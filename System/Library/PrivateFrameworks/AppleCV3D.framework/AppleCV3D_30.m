uint64_t *sub_20F405AF0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  void (*v5)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v6;
  void (*v7)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  _QWORD v23[3];
  uint64_t v24;
  _QWORD v25[3];
  uint64_t v26;
  _QWORD v27[3];
  char *v28;
  __int128 v29;

  v28 = (char *)operator new(0x28uLL);
  v29 = xmmword_2102DC280;
  strcpy(v28, "StateCorrectionConfig parameters");
  sub_20E8B30B4(a2, (__int128 *)&v28, 80, 40);
  if (SHIBYTE(v29) < 0)
    operator delete(v28);
  v28 = (char *)nullsub_1(a2);
  v4 = operator new();
  *(_QWORD *)v4 = &off_24C9C2F58;
  *(_QWORD *)(v4 + 8) = &unk_24C9C2FC8;
  *(_QWORD *)(v4 + 120) = 0;
  *(_QWORD *)(v4 + 109) = 0;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_BYTE *)(v4 + 114) = 1;
  v26 = (uint64_t)off_24C9FFD58 + 1;
  v27[0] = a1;
  sub_20EAA459C((uint64_t *)(v4 + 120), &v26);
  sub_20E8B2F9C((uint64_t *)&v28, "StateCorrectionConfig.min_num_pnp_inlier_map_matches", v4, "Vector of minimum number of pnp inlier of matches for state correction. Each number has a corresponding min_pnp_inlier_ratio");
  if (v26)
  {
    if ((v26 & 1) == 0)
    {
      v5 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v26 & 0xFFFFFFFFFFFFFFFELL);
      if (v5)
        v5(v27, v27, 2);
    }
    v26 = 0;
  }
  v28 = (char *)nullsub_1(a2);
  v6 = operator new();
  *(_QWORD *)v6 = &off_24C9C2F58;
  *(_QWORD *)(v6 + 8) = &unk_24C9C2FC8;
  *(_QWORD *)(v6 + 120) = 0;
  *(_QWORD *)(v6 + 109) = 0;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_BYTE *)(v6 + 114) = 1;
  v24 = (uint64_t)off_24C9FFD78 + 1;
  v25[0] = a1;
  sub_20EAA459C((uint64_t *)(v6 + 120), &v24);
  sub_20E8B2F9C((uint64_t *)&v28, "StateCorrectionConfig.min_pnp_inlier_ratio", v6, "Vector of minimum portion of pnp inliers of matches for state correction. Each number has a corresponding min_num_pnp_inlier_map_matches");
  if (v24)
  {
    if ((v24 & 1) == 0)
    {
      v7 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v24 & 0xFFFFFFFFFFFFFFFELL);
      if (v7)
        v7(v25, v25, 2);
    }
    v24 = 0;
  }
  v28 = (char *)nullsub_1(a2);
  v8 = sub_20EAA1CB0((unint64_t *)(a1 + 120));
  sub_20E8B2F9C((uint64_t *)&v28, "StateCorrectionConfig.min_no_map_constraints_before_in_place_relocalization", v8, "Minimum number of consective windows without sufficient map-constraints before in-place state correction");
  v28 = (char *)nullsub_1(a2);
  v9 = sub_20EAA1CB0((unint64_t *)(a1 + 128));
  sub_20E8B2F9C((uint64_t *)&v28, "StateCorrectionConfig.min_no_map_constraints_before_enforcing_epipolar_map_tracking", v9, "Minimum number of consecutive windows without sufficient map-constraints before enforcing the use of epipolar map-tracker over reprojection-based one.");
  v28 = (char *)nullsub_1(a2);
  v10 = sub_20EA9DB90((double *)(a1 + 136));
  sub_20E8B2F9C((uint64_t *)&v28, "StateCorrectionConfig.min_health_to_enforce_epipolar_map_tracker_use", v10, "Minimum health before enforcing epipolar map-tracking over reprojection-based map-tracking.");
  v28 = (char *)nullsub_1(a2);
  v11 = sub_20EAA14D8((_BYTE *)(a1 + 144));
  sub_20E8B2F9C((uint64_t *)&v28, "StateCorrectionConfig.enable_epipolar_reprojection_map_tracking_switching", v11, "A flag indicating whether to enable switching bewteen epipolar and reprojetcion-based map-tracing at runtime.");
  v28 = (char *)nullsub_1(a2);
  v12 = sub_20EAA1CB0((unint64_t *)(a1 + 104));
  sub_20E8B2F9C((uint64_t *)&v28, "StateCorrectionConfig.min_num_required_map_constraints_of_a_frame", v12, "Minimum number of contributing map matches that counts as sufficient constraints");
  v28 = (char *)nullsub_1(a2);
  v13 = sub_20EA9DB90((double *)(a1 + 8));
  sub_20E8B2F9C((uint64_t *)&v28, "StateCorrectionConfig.pnp_reprojection_error_bound_in_normalized_image_coordinates", v13, "pnp reprojection error upper bound in normalzied image coordinates");
  v28 = (char *)nullsub_1(a2);
  v14 = operator new();
  *(_QWORD *)v14 = &off_24C9C2F58;
  *(_QWORD *)(v14 + 8) = &unk_24C9C2FC8;
  *(_QWORD *)(v14 + 120) = 0;
  *(_QWORD *)(v14 + 109) = 0;
  *(_OWORD *)(v14 + 16) = 0u;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_OWORD *)(v14 + 80) = 0u;
  *(_OWORD *)(v14 + 96) = 0u;
  *(_BYTE *)(v14 + 114) = 1;
  v22 = (uint64_t)off_24C9FFD98 + 1;
  v23[0] = a1;
  sub_20EAA459C((uint64_t *)(v14 + 120), &v22);
  sub_20E8B2F9C((uint64_t *)&v28, "StateCorrectionConfig.gravity", v14, "The gravity vector");
  if (v22)
  {
    if ((v22 & 1) == 0)
    {
      v15 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v22 & 0xFFFFFFFFFFFFFFFELL);
      if (v15)
        v15(v23, v23, 2);
    }
    v22 = 0;
  }
  v28 = (char *)nullsub_1(a2);
  v16 = sub_20EAA1CB0((unint64_t *)a1);
  sub_20E8B2F9C((uint64_t *)&v28, "StateCorrectionConfig.pnp_reprojection_error_bound_in_pixels", v16, "pnp parameter: reprojection error bound (in pixels) for ransac inlier counting.");
  v28 = (char *)nullsub_1(a2);
  v17 = sub_20EAA1CB0((unint64_t *)(a1 + 24));
  sub_20E8B2F9C((uint64_t *)&v28, "StateCorrectionConfig.pnp_max_num_hypotheses", v17, "pnp parameter: maximum num. hypotheses for pnp ransac.");
  v28 = (char *)nullsub_1(a2);
  v18 = sub_20EAA1CB0((unint64_t *)(a1 + 32));
  sub_20E8B2F9C((uint64_t *)&v28, "StateCorrectionConfig.pnp_max_trials", v18, "pnp parameter: maximum num. iterations for pnp ransac.");
  v28 = (char *)nullsub_1(a2);
  v19 = sub_20EAA1CB0((unint64_t *)(a1 + 40));
  sub_20E8B2F9C((uint64_t *)&v28, "StateCorrectionConfig.pnp_chunk_size", v19, "pnp parameter: chunk size for preemptive pnp ransac.");
  v28 = (char *)nullsub_1(a2);
  v20 = sub_20EAA14D8((_BYTE *)(a1 + 145));
  return sub_20E8B2F9C((uint64_t *)&v28, "StateCorrectionConfig.enable_pnp_pose_refinement", v20, "Perform pose refinement after preemtive ransac");
}

void sub_20F405FC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E869298(v1);
  _Unwind_Resume(a1);
}

void sub_20F40606C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20EAA2D14((uint64_t *)va);
  JUMPOUT(0x20F40605CLL);
}

void sub_20F40607C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20EAA2D14((uint64_t *)va);
  JUMPOUT(0x20F40605CLL);
}

uint64_t sub_20F40608C(uint64_t result, _WORD *a2, unsigned int a3)
{
  uint64_t v4;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 <= 1)
  {
    *(_QWORD *)a2 = *(_QWORD *)result;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      *(_QWORD *)a2 = &unk_24C9FFD68;
      a2[4] = 0;
      return result;
    }
    result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == ((unint64_t)"ZN4cv3d3vio20odometry_unsanitized28GetProgramOptionsDescriptionERNS1_21StateCorrec"
                                      "tionConfigEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)
      || (result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4cv3d3vio20odometry_unsanitized28GetProgramOptionsDescriptionERNS1_21StateCorrectionConfigEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
    {
      *(_QWORD *)a2 = v4;
    }
    else
    {
      *(_QWORD *)a2 = 0;
    }
  }
  return result;
}

void sub_20F406138(uint64_t a1, double **a2)
{
  double *v2;
  double *v3;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  unint64_t *v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  _OWORD *v21;
  unint64_t *v22;
  uint64_t v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;

  v2 = *a2;
  v3 = a2[1];
  *(_QWORD *)(*(_QWORD *)a1 + 56) = *(_QWORD *)(*(_QWORD *)a1 + 48);
  if (v2 != v3)
  {
    while (1)
    {
      v6 = *(_QWORD **)a1;
      v7 = vcvtpd_u64_f64(*v2);
      v9 = *(unint64_t **)(*(_QWORD *)a1 + 56);
      v8 = *(_QWORD *)(*(_QWORD *)a1 + 64);
      if ((unint64_t)v9 >= v8)
        break;
      *v9 = v7;
      v5 = (uint64_t)(v9 + 1);
LABEL_4:
      v6[7] = v5;
      if (++v2 == v3)
        return;
    }
    v10 = (unint64_t *)v6[6];
    v11 = v9 - v10;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61)
      sub_20E867F44();
    v13 = v8 - (_QWORD)v10;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    v26 = v12;
    if (v12)
    {
      if (v12 >> 61)
        sub_20E877A38();
      v14 = operator new(8 * v12);
      v15 = (unint64_t *)&v14[8 * v11];
      *v15 = v7;
      v5 = (uint64_t)(v15 + 1);
      v16 = (char *)v9 - (char *)v10;
      if (v9 == v10)
        goto LABEL_23;
    }
    else
    {
      v14 = 0;
      v15 = (unint64_t *)(8 * v11);
      *(_QWORD *)(8 * v11) = v7;
      v5 = 8 * v11 + 8;
      v16 = (char *)v9 - (char *)v10;
      if (v9 == v10)
      {
LABEL_23:
        v6[6] = v15;
        v6[7] = v5;
        v6[8] = &v14[8 * v26];
        if (v10)
          operator delete(v10);
        goto LABEL_4;
      }
    }
    v17 = v16 - 8;
    if (v17 < 0x58)
      goto LABEL_30;
    if ((unint64_t)((char *)v10 - v14) < 0x20)
      goto LABEL_30;
    v18 = (v17 >> 3) + 1;
    v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    v20 = &v9[v19 / 0xFFFFFFFFFFFFFFF8];
    v15 = (unint64_t *)((char *)v15 - v19);
    v21 = &v14[8 * v11 - 16];
    v22 = v9 - 2;
    v23 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24 = *(_OWORD *)v22;
      *(v21 - 1) = *((_OWORD *)v22 - 1);
      *v21 = v24;
      v21 -= 2;
      v22 -= 4;
      v23 -= 4;
    }
    while (v23);
    v9 = v20;
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_30:
      do
      {
        v25 = *--v9;
        *--v15 = v25;
      }
      while (v9 != v10);
    }
    goto LABEL_23;
  }
}

uint64_t sub_20F406300(uint64_t result, _WORD *a2, unsigned int a3)
{
  uint64_t v4;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 <= 1)
  {
    *(_QWORD *)a2 = *(_QWORD *)result;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      *(_QWORD *)a2 = &unk_24C9FFD88;
      a2[4] = 0;
      return result;
    }
    result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == ((unint64_t)"ZN4cv3d3vio20odometry_unsanitized28GetProgramOptionsDescriptionERNS1_21StateCorrec"
                                      "tionConfigEE3$_3" & 0x7FFFFFFFFFFFFFFFLL)
      || (result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4cv3d3vio20odometry_unsanitized28GetProgramOptionsDescriptionERNS1_21StateCorrectionConfigEE3$_3" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
    {
      *(_QWORD *)a2 = v4;
    }
    else
    {
      *(_QWORD *)a2 = 0;
    }
  }
  return result;
}

char **sub_20F4063AC(_QWORD *a1, char **a2)
{
  char **result;

  result = (char **)(*a1 + 72);
  if (result != a2)
    return (char **)sub_20E86811C(result, *a2, a2[1], (a2[1] - *a2) >> 3);
  return result;
}

uint64_t sub_20F4063D4(uint64_t result, _WORD *a2, unsigned int a3)
{
  uint64_t v4;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 <= 1)
  {
    *(_QWORD *)a2 = *(_QWORD *)result;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      *(_QWORD *)a2 = &unk_24C9FFDA8;
      a2[4] = 0;
      return result;
    }
    result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == ((unint64_t)"ZN4cv3d3vio20odometry_unsanitized28GetProgramOptionsDescriptionERNS1_21StateCorrec"
                                      "tionConfigEE4$_11" & 0x7FFFFFFFFFFFFFFFLL)
      || (result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4cv3d3vio20odometry_unsanitized28GetProgramOptionsDescriptionERNS1_21StateCorrectionConfigEE4$_11" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
    {
      *(_QWORD *)a2 = v4;
    }
    else
    {
      *(_QWORD *)a2 = 0;
    }
  }
  return result;
}

double sub_20F406480(uint64_t *a1, _OWORD **a2)
{
  uint64_t v2;
  double result;

  v2 = *a1;
  result = *((double *)*a2 + 2);
  *(_OWORD *)(v2 + 152) = **a2;
  *(double *)(v2 + 168) = result;
  return result;
}

void sub_20F40649C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE v4[144];
  void *v5;
  void *v6;
  void *__p;
  void *v8;
  char v9;
  char v10;

  *(_DWORD *)(a1 + 200) = 0;
  v2 = a1 + 200;
  *(_QWORD *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 216) = 0;
  *(_WORD *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 226) = 0;
  v4[0] = 0;
  v10 = 0;
  sub_20F04DA80(a1 + 376, (uint64_t)v4);
  if (v10)
  {
    if (v9 && __p)
    {
      v8 = __p;
      operator delete(__p);
    }
    if (v5)
    {
      v6 = v5;
      operator delete(v5);
    }
  }
  if (*(_BYTE *)(a1 + 368))
  {
    v3 = *(_QWORD *)(a1 + 904);
    if (!v3
      || ((*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 48))(v3, v2, a1 + 232),
          *(_BYTE *)(a1 + 368)))
    {
      *(_BYTE *)(a1 + 368) = 0;
    }
  }
}

uint64_t sub_20F406560(uint64_t a1, __int128 *a2)
{
  uint64_t v3;

  v3 = sub_20E868FE0(a1, a2);
  *(_QWORD *)(v3 + 184) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_DWORD *)(v3 + 200) = 0;
  *(_BYTE *)(v3 + 208) = 0;
  *(_BYTE *)(v3 + 216) = 0;
  *(_WORD *)(v3 + 224) = 0;
  *(_BYTE *)(v3 + 226) = 0;
  *(_BYTE *)(v3 + 232) = 0;
  *(_BYTE *)(v3 + 368) = 0;
  *(_BYTE *)(v3 + 376) = 0;
  *(_BYTE *)(v3 + 872) = 0;
  *(_QWORD *)(v3 + 904) = 0;
  sub_20F40649C(v3);
  return a1;
}

void sub_20F4065B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v3 = *(_QWORD **)(v1 + 904);
  if (v3 == (_QWORD *)(v1 + 880))
  {
    v4 = 4;
    v3 = (_QWORD *)(v1 + 880);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(_BYTE *)(v1 + 872))
  {
    if (*(_BYTE *)(v1 + 856))
    {
      v5 = *(void **)(v1 + 544);
      if (v5)
      {
        *(_QWORD *)(v1 + 552) = v5;
        operator delete(v5);
      }
    }
    v6 = *(void **)(v1 + 520);
    if (v6)
    {
      *(_QWORD *)(v1 + 528) = v6;
      operator delete(v6);
    }
  }
  v7 = *(void **)(v1 + 72);
  if (v7)
  {
    *(_QWORD *)(v1 + 80) = v7;
    operator delete(v7);
    v8 = *(void **)(v1 + 48);
    if (!v8)
LABEL_14:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v8 = *(void **)(v1 + 48);
    if (!v8)
      goto LABEL_14;
  }
  *(_QWORD *)(v1 + 56) = v8;
  operator delete(v8);
  _Unwind_Resume(exception_object);
}

unint64_t sub_20F406654@<X0>(unint64_t result@<X0>, unsigned int a2@<W1>, _BYTE *a3@<X8>)
{
  uint64_t v4;
  _BYTE *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  std::string::size_type size;
  char v16;
  size_t v17;
  void **p_dst;
  unint64_t v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;
  uint64_t v24;
  const char *v25;
  size_t v26;
  unint64_t v27;
  unsigned __int8 v28;
  unsigned __int8 v29;
  const char *v30;
  size_t v31;
  std::string::size_type *p_size;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  const char *v37;
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  size_t v41;
  void *v42;
  _QWORD *v43;
  size_t v44;
  size_t v45;
  _QWORD *v46;
  void *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  char v52;
  _QWORD *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *p_shared_owners;
  unint64_t v57;
  char *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::string::size_type v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  uint64_t v74;
  __int128 v75;
  std::string::size_type v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  _QWORD *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  const char *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  int v103;
  unint64_t v104;
  std::string *v105;
  __int128 v106;
  std::string *v107;
  __int128 v108;
  std::string *v109;
  std::string::size_type v110;
  char v111;
  size_t v112;
  void **v113;
  unint64_t v114;
  const void *v115;
  uint64_t v116;
  uint64_t v117;
  const char *v118;
  uint64_t v119;
  size_t v120;
  const char *v121;
  unsigned __int8 v122;
  unsigned __int8 v123;
  const char *v124;
  size_t v125;
  std::string::size_type *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  NSObject *v130;
  uint64_t v131;
  uint64_t v132;
  size_t v133;
  void *v134;
  _QWORD *v135;
  size_t v136;
  size_t v137;
  _QWORD *v138;
  void *v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  char v144;
  _QWORD *v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  char *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  std::string::size_type v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  __int128 v167;
  std::string::size_type v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  _QWORD *v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  const char *v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  uint64_t v192;
  const char *v193;
  int v194;
  int v195;
  unsigned int v196;
  uint64_t v197;
  _BYTE *v198;
  void *v199[2];
  std::string::size_type v200;
  _QWORD v201[2];
  uint64_t v202;
  uint64_t v203;
  const void *v204;
  uint64_t v205;
  const void *v206;
  unint64_t v207;
  void *v208;
  char v209;
  unint64_t v210;
  int v211;
  _BYTE v212[16];
  void *v213;
  void *v214;
  void *v215;
  void *v216;
  char v217;
  char v218;
  std::string v219;
  int v220;
  const char *v221;
  int v222;
  const char *v223;
  uint64_t v224;
  std::__shared_weak_count *v225;
  void **__dst;
  size_t v227;
  int64_t v228;
  void *__p[2];
  std::string::size_type v230;
  unint64_t v231;
  std::string v232;
  char *v233;
  std::__shared_weak_count *v234;
  _QWORD *v235;
  __int128 v236;
  std::string v237;
  __int128 v238;
  char *v239;
  size_t v240;
  unint64_t v241;
  char v242;
  _QWORD v243[5];

  v4 = result;
  v5 = a3;
  v243[2] = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(result + 224) && *(_BYTE *)(result + 368))
  {
    *a3 = 0;
    a3[496] = 0;
    return result;
  }
  sub_20F4081A4(&v231);
  if (**(int **)(v231 + 56) <= 2)
  {
    v6 = *(unsigned __int8 *)(v231 + 72);
    v7 = sub_20E8C31DC(v231, "OSLogSurrogateAppender", 1, 0);
    v8 = v7;
    if (v6 || v7 != 0)
    {
      sub_20E863438((uint64_t)v201);
      std::to_string(&v232, a2);
      v10 = std::string::insert(&v232, 0, "[SC, Prior update map measurements:", 0x23uLL);
      v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v219.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v219.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      v12 = std::string::append(&v219, "] ", 2uLL);
      v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      v230 = v12->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      sub_20F408298(&v237, v4, (uint64_t)__p);
      if ((v237.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v14 = &v237;
      else
        v14 = (std::string *)v237.__r_.__value_.__r.__words[0];
      if ((v237.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v237.__r_.__value_.__r.__words[2]);
      else
        size = v237.__r_.__value_.__l.__size_;
      sub_20E86A980(&v202, (uint64_t)v14, size);
      if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v237.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v230) & 0x80000000) == 0)
        {
LABEL_15:
          if ((SHIBYTE(v219.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_16;
          goto LABEL_24;
        }
      }
      else if ((SHIBYTE(v230) & 0x80000000) == 0)
      {
        goto LABEL_15;
      }
      operator delete(__p[0]);
      if ((SHIBYTE(v219.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_16:
        if ((SHIBYTE(v232.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_17;
        goto LABEL_25;
      }
LABEL_24:
      operator delete(v219.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v232.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_17:
        v16 = v211;
        v198 = v5;
        v196 = a2;
        if ((v211 & 0x10) == 0)
          goto LABEL_18;
        goto LABEL_26;
      }
LABEL_25:
      operator delete(v232.__r_.__value_.__l.__data_);
      v16 = v211;
      v198 = v5;
      v196 = a2;
      if ((v211 & 0x10) == 0)
      {
LABEL_18:
        if ((v16 & 8) == 0)
        {
          v17 = 0;
          HIBYTE(v228) = 0;
          p_dst = (void **)&__dst;
          goto LABEL_36;
        }
        v20 = v204;
        v17 = v205 - (_QWORD)v204;
        if ((unint64_t)(v205 - (_QWORD)v204) > 0x7FFFFFFFFFFFFFF7)
LABEL_81:
          sub_20E860B7C();
LABEL_29:
        if (v17 >= 0x17)
        {
          v21 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v17 | 7) != 0x17)
            v21 = v17 | 7;
          v22 = v21 + 1;
          p_dst = (void **)operator new(v21 + 1);
          v228 = v22 | 0x8000000000000000;
          __dst = p_dst;
          v227 = v17;
        }
        else
        {
          HIBYTE(v228) = v17;
          p_dst = (void **)&__dst;
          if (!v17)
          {
LABEL_36:
            *((_BYTE *)p_dst + v17) = 0;
            v219.__r_.__value_.__r.__words[0] = (std::string::size_type)&v231;
            v219.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
            v219.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
            v220 = 2;
            v221 = "unknown file";
            v222 = 66;
            v225 = 0;
            v223 = "unknown function";
            v224 = 0;
            if (v228 >= 0)
              v23 = (void **)&__dst;
            else
              v23 = __dst;
            v24 = *(_QWORD *)v219.__r_.__value_.__l.__data_;
            v25 = (const char *)(*(_QWORD *)v219.__r_.__value_.__l.__data_ + 16);
            v193 = v25;
            if (*(char *)(*(_QWORD *)v219.__r_.__value_.__l.__data_ + 39) < 0)
            {
              v25 = *(const char **)(v24 + 16);
              v26 = *(_QWORD *)(v24 + 24);
              v27 = v8;
              v194 = v6;
              v29 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v29 & 1) != 0)
                goto LABEL_43;
            }
            else
            {
              v26 = *(unsigned __int8 *)(*(_QWORD *)v219.__r_.__value_.__l.__data_ + 39);
              v27 = v8;
              v194 = v6;
              v28 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v28 & 1) != 0)
                goto LABEL_43;
            }
            if (__cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)&v237);
              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v237);
              if ((_BYTE)v238 && SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v237.__r_.__value_.__l.__data_);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
            }
LABEL_43:
            if (byte_254A4A4F8[23] >= 0)
              v30 = byte_254A4A4F8;
            else
              v30 = *(const char **)byte_254A4A4F8;
            if (byte_254A4A4F8[23] >= 0)
              v31 = byte_254A4A4F8[23];
            else
              v31 = *(_QWORD *)&byte_254A4A4F8[8];
            v237.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v30, v25);
            p_size = &v237.__r_.__value_.__l.__size_;
            if (v31 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v31 >= 0x17)
            {
              v33 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v31 | 7) != 0x17)
                v33 = v31 | 7;
              v34 = v33 + 1;
              p_size = (std::string::size_type *)operator new(v33 + 1);
              v237.__r_.__value_.__r.__words[2] = v31;
              *(_QWORD *)&v238 = v34 | 0x8000000000000000;
              v237.__r_.__value_.__l.__size_ = (std::string::size_type)p_size;
            }
            else
            {
              BYTE7(v238) = v31;
              if (!v31)
              {
LABEL_57:
                *((_BYTE *)p_size + v31) = 0;
                BYTE8(v238) = 1;
                v35 = (char *)&v239;
                if (v26 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                v36 = v27;
                if (v26 >= 0x17)
                {
                  v39 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v26 | 7) != 0x17)
                    v39 = v26 | 7;
                  v40 = v39 + 1;
                  v35 = (char *)operator new(v39 + 1);
                  v37 = (const char *)v23;
                  v240 = v26;
                  v241 = v40 | 0x8000000000000000;
                  v239 = v35;
                  a2 = v196;
                }
                else
                {
                  HIBYTE(v241) = v26;
                  v37 = (const char *)v23;
                  a2 = v196;
                  if (!v26)
                  {
                    LOBYTE(v239) = 0;
                    v242 = 1;
                    v38 = v237.__r_.__value_.__r.__words[0];
                    if ((SHIBYTE(v241) & 0x80000000) == 0)
                      goto LABEL_61;
                    goto LABEL_67;
                  }
                }
                memmove(v35, v25, v26);
                v35[v26] = 0;
                v242 = 1;
                v38 = v237.__r_.__value_.__r.__words[0];
                if ((SHIBYTE(v241) & 0x80000000) == 0)
                {
LABEL_61:
                  if (!BYTE8(v238))
                    goto LABEL_70;
                  goto LABEL_68;
                }
LABEL_67:
                operator delete(v239);
                if (!BYTE8(v238))
                  goto LABEL_70;
LABEL_68:
                if (SBYTE7(v238) < 0)
                  operator delete((void *)v237.__r_.__value_.__l.__size_);
LABEL_70:
                if (v237.__r_.__value_.__r.__words[0])
                  os_release(v237.__r_.__value_.__l.__data_);
                if (!v36 || !*(_QWORD *)(v36 + 24))
                {
                  os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG);
                  LODWORD(v237.__r_.__value_.__l.__data_) = 136315138;
                  *(std::string::size_type *)((char *)v237.__r_.__value_.__r.__words + 4) = (std::string::size_type)v37;
                  v47 = (void *)_os_log_send_and_compose_impl();
                  v48 = v194;
                  if (v47)
                    free(v47);
                  goto LABEL_146;
                }
                v41 = _os_log_pack_size();
                v42 = operator new(v41, (std::align_val_t)8uLL);
                v43 = (_QWORD *)operator new();
                *v43 = &off_24C9ABB80;
                v43[1] = 0;
                v43[2] = 0;
                v43[3] = v42;
                v232.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
                v232.__r_.__value_.__l.__size_ = (std::string::size_type)v42;
                v233 = 0;
                v234 = 0;
                v232.__r_.__value_.__r.__words[2] = (std::string::size_type)v43;
                v44 = strlen(v37);
                if (v44 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                v45 = v44;
                if (v44 >= 0x17)
                {
                  v49 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v44 | 7) != 0x17)
                    v49 = v44 | 7;
                  v50 = v49 + 1;
                  v46 = operator new(v49 + 1);
                  *(_QWORD *)&v236 = v45;
                  *((_QWORD *)&v236 + 1) = v50 | 0x8000000000000000;
                  v235 = v46;
                }
                else
                {
                  HIBYTE(v236) = v44;
                  v46 = &v235;
                  if (!v44)
                  {
LABEL_86:
                    *((_BYTE *)v46 + v45) = 0;
                    v51 = v235;
                    v243[0] = v236;
                    *(_QWORD *)((char *)v243 + 7) = *(_QWORD *)((char *)&v236 + 7);
                    v52 = HIBYTE(v236);
                    v53 = operator new(0x38uLL);
                    v53[1] = 0;
                    v53[2] = 0;
                    v53[3] = off_24C9ABC20;
                    *v53 = &off_24C9ABBD0;
                    v54 = v243[0];
                    v53[4] = v51;
                    v53[5] = v54;
                    *(_QWORD *)((char *)v53 + 47) = *(_QWORD *)((char *)v243 + 7);
                    *((_BYTE *)v53 + 55) = v52;
                    v243[0] = 0;
                    *(_QWORD *)((char *)v243 + 7) = 0;
                    v55 = v234;
                    v233 = (char *)(v53 + 3);
                    v234 = (std::__shared_weak_count *)v53;
                    if (v55)
                    {
                      p_shared_owners = (unint64_t *)&v55->__shared_owners_;
                      do
                        v57 = __ldaxr(p_shared_owners);
                      while (__stlxr(v57 - 1, p_shared_owners));
                      if (!v57)
                      {
                        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                        std::__shared_weak_count::__release_weak(v55);
                      }
                    }
                    v237 = v232;
                    v58 = v233;
                    if (v232.__r_.__value_.__r.__words[2])
                    {
                      v59 = (unint64_t *)(v232.__r_.__value_.__r.__words[2] + 8);
                      do
                        v60 = __ldxr(v59);
                      while (__stxr(v60 + 1, v59));
                    }
                    v61 = v234;
                    *(_QWORD *)&v238 = v58;
                    *((_QWORD *)&v238 + 1) = v234;
                    if (v234)
                    {
                      v62 = (unint64_t *)&v234->__shared_owners_;
                      do
                        v63 = __ldxr(v62);
                      while (__stxr(v63 + 1, v62));
                      v239 = v58;
                      do
                        v64 = __ldaxr(v62);
                      while (__stlxr(v64 - 1, v62));
                      if (!v64)
                      {
                        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                        std::__shared_weak_count::__release_weak(v61);
                      }
                    }
                    else
                    {
                      v239 = v58;
                    }
                    v65 = (std::__shared_weak_count *)v232.__r_.__value_.__r.__words[2];
                    if (v232.__r_.__value_.__r.__words[2])
                    {
                      v66 = (unint64_t *)(v232.__r_.__value_.__r.__words[2] + 8);
                      do
                        v67 = __ldaxr(v66);
                      while (__stlxr(v67 - 1, v66));
                      if (!v67)
                      {
                        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                        std::__shared_weak_count::__release_weak(v65);
                      }
                    }
                    v68 = v237.__r_.__value_.__r.__words[0];
                    if (v239[31] >= 0)
                      v69 = v239 + 8;
                    else
                      v69 = (char *)*((_QWORD *)v239 + 1);
                    v70 = _os_log_pack_fill();
                    *(_DWORD *)v70 = 136315138;
                    *(_QWORD *)(v70 + 4) = v69;
                    v71 = operator new();
                    v72 = *(unsigned __int8 *)(v24 + 39);
                    v73 = *(const char **)(v24 + 16);
                    v74 = *(_QWORD *)(v24 + 24);
                    v75 = v238;
                    *(_OWORD *)(v71 + 8) = *(_OWORD *)&v237.__r_.__value_.__r.__words[1];
                    if ((v72 & 0x80u) != 0)
                      v72 = v74;
                    else
                      v73 = v193;
                    *(_QWORD *)v71 = v68;
                    *(_OWORD *)&v237.__r_.__value_.__r.__words[1] = 0uLL;
                    *(_OWORD *)(v71 + 24) = v75;
                    v238 = 0uLL;
                    *(_QWORD *)(v71 + 40) = v73;
                    *(_QWORD *)(v71 + 48) = v72;
                    *(_BYTE *)(v71 + 56) = 2;
                    v235 = 0;
                    v232.__r_.__value_.__r.__words[0] = v71;
                    (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v36 + 24) + 40))(*(_QWORD *)(v36 + 24), &v232);
                    v76 = v232.__r_.__value_.__r.__words[0];
                    v232.__r_.__value_.__r.__words[0] = 0;
                    v48 = v194;
                    if (v76)
                    {
                      v77 = *(std::__shared_weak_count **)(v76 + 32);
                      if (v77)
                      {
                        v78 = (unint64_t *)&v77->__shared_owners_;
                        do
                          v79 = __ldaxr(v78);
                        while (__stlxr(v79 - 1, v78));
                        if (!v79)
                        {
                          ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                          std::__shared_weak_count::__release_weak(v77);
                        }
                      }
                      v80 = *(std::__shared_weak_count **)(v76 + 16);
                      if (v80)
                      {
                        v81 = (unint64_t *)&v80->__shared_owners_;
                        do
                          v82 = __ldaxr(v81);
                        while (__stlxr(v82 - 1, v81));
                        if (!v82)
                        {
                          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                          std::__shared_weak_count::__release_weak(v80);
                        }
                      }
                      MEMORY[0x212BC6398](v76, 0x10F0C40B62ED6C6);
                      v83 = v235;
                      v235 = 0;
                      if (v83)
                      {
                        v84 = (std::__shared_weak_count *)v83[4];
                        if (v84)
                        {
                          v85 = (unint64_t *)&v84->__shared_owners_;
                          do
                            v86 = __ldaxr(v85);
                          while (__stlxr(v86 - 1, v85));
                          if (!v86)
                          {
                            ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                            std::__shared_weak_count::__release_weak(v84);
                          }
                        }
                        v87 = (std::__shared_weak_count *)v83[2];
                        if (v87)
                        {
                          v88 = (unint64_t *)&v87->__shared_owners_;
                          do
                            v89 = __ldaxr(v88);
                          while (__stlxr(v89 - 1, v88));
                          if (!v89)
                          {
                            ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                            std::__shared_weak_count::__release_weak(v87);
                          }
                        }
                        MEMORY[0x212BC6398](v83, 0x10F0C40B62ED6C6);
                      }
                    }
                    v90 = (std::__shared_weak_count *)*((_QWORD *)&v238 + 1);
                    if (*((_QWORD *)&v238 + 1))
                    {
                      v91 = (unint64_t *)(*((_QWORD *)&v238 + 1) + 8);
                      do
                        v92 = __ldaxr(v91);
                      while (__stlxr(v92 - 1, v91));
                      if (!v92)
                      {
                        ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
                        std::__shared_weak_count::__release_weak(v90);
                      }
                    }
                    v93 = (std::__shared_weak_count *)v237.__r_.__value_.__r.__words[2];
                    if (v237.__r_.__value_.__r.__words[2])
                    {
                      v94 = (unint64_t *)(v237.__r_.__value_.__r.__words[2] + 8);
                      do
                        v95 = __ldaxr(v94);
                      while (__stlxr(v95 - 1, v94));
                      if (!v95)
                      {
                        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                        std::__shared_weak_count::__release_weak(v93);
                      }
                    }
LABEL_146:
                    if (v48)
                    {
                      v96 = (const char *)&__dst;
                      if (v228 < 0)
                        v96 = (const char *)__dst;
                      sub_20E8C003C((uint64_t)&v219, "%s", v96);
                      sub_20E863570((uint64_t)&v219);
                    }
                    sub_20E863570((uint64_t)&v219);
                    v97 = v225;
                    if (v225)
                    {
                      v98 = (unint64_t *)&v225->__shared_owners_;
                      do
                        v99 = __ldaxr(v98);
                      while (__stlxr(v99 - 1, v98));
                      if (!v99)
                      {
                        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
                        std::__shared_weak_count::__release_weak(v97);
                      }
                    }
                    if (SHIBYTE(v228) < 0)
                      operator delete(__dst);
                    v201[0] = *MEMORY[0x24BEDB7F0];
                    v100 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                    *(_QWORD *)((char *)v201 + *(_QWORD *)(v201[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                    v202 = v100;
                    v203 = MEMORY[0x24BEDB848] + 16;
                    if (v209 < 0)
                      operator delete(v208);
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    MEMORY[0x212BC6290](v212);
                    v5 = v198;
                    goto LABEL_160;
                  }
                }
                memcpy(v46, v37, v45);
                goto LABEL_86;
              }
            }
            memmove(p_size, v30, v31);
            goto LABEL_57;
          }
        }
        memmove(p_dst, v20, v17);
        goto LABEL_36;
      }
LABEL_26:
      v19 = v210;
      if (v210 < v207)
      {
        v210 = v207;
        v19 = v207;
      }
      v20 = v206;
      v17 = v19 - (_QWORD)v206;
      if (v19 - (unint64_t)v206 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_81;
      goto LABEL_29;
    }
  }
LABEL_160:
  *v5 = 0;
  v5[496] = 0;
  if (*(_QWORD *)(v4 + 104) <= (unint64_t)a2)
  {
    *(_QWORD *)(v4 + 184) = 0;
    if (*(_BYTE *)(v4 + 224))
    {
      v101 = (*(_DWORD *)(v4 + 200) + 1);
      *(_DWORD *)(v4 + 200) = v101;
      if (*(_QWORD *)(v4 + 112) <= v101)
      {
        ++*(_DWORD *)(v4 + 192);
        *(_WORD *)(v4 + 224) = 256;
        *(_DWORD *)(v4 + 200) = 0;
        sub_20F04DA80((uint64_t)v5, v4 + 376);
        LOBYTE(v201[0]) = 0;
        v218 = 0;
        sub_20F04DA80(v4 + 376, (uint64_t)v201);
        if (v218)
        {
          if (v217 && v215)
          {
            v216 = v215;
            operator delete(v215);
          }
          if (v213)
          {
            v214 = v213;
            operator delete(v213);
          }
        }
        if (*(_BYTE *)(v4 + 226))
        {
          if (*(_BYTE *)(v4 + 368))
          {
            v102 = *(_QWORD *)(v4 + 904);
            if (!v102
              || ((*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v102 + 48))(v102, v4 + 200, v4 + 232),
                  *(_BYTE *)(v4 + 368)))
            {
              *(_BYTE *)(v4 + 368) = 0;
            }
          }
        }
      }
    }
  }
  else
  {
    ++*(_QWORD *)(v4 + 184);
    sub_20F408600(v4);
  }
  sub_20F4081A4(&v231);
  result = v231;
  if (**(int **)(v231 + 56) <= 2)
  {
    v103 = *(unsigned __int8 *)(v231 + 72);
    result = sub_20E8C31DC(v231, "OSLogSurrogateAppender", 1, 0);
    v104 = result;
    if (v103 || result)
    {
      sub_20E863438((uint64_t)v201);
      std::to_string(&v232, a2);
      v105 = std::string::insert(&v232, 0, "[SC, Post update map measurements:", 0x22uLL);
      v106 = *(_OWORD *)&v105->__r_.__value_.__l.__data_;
      v219.__r_.__value_.__r.__words[2] = v105->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v219.__r_.__value_.__l.__data_ = v106;
      v105->__r_.__value_.__l.__size_ = 0;
      v105->__r_.__value_.__r.__words[2] = 0;
      v105->__r_.__value_.__r.__words[0] = 0;
      v107 = std::string::append(&v219, "] ", 2uLL);
      v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
      v200 = v107->__r_.__value_.__r.__words[2];
      *(_OWORD *)v199 = v108;
      v107->__r_.__value_.__l.__size_ = 0;
      v107->__r_.__value_.__r.__words[2] = 0;
      v107->__r_.__value_.__r.__words[0] = 0;
      sub_20F408298(&v237, v4, (uint64_t)v199);
      if ((v237.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v109 = &v237;
      else
        v109 = (std::string *)v237.__r_.__value_.__r.__words[0];
      if ((v237.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v110 = HIBYTE(v237.__r_.__value_.__r.__words[2]);
      else
        v110 = v237.__r_.__value_.__l.__size_;
      sub_20E86A980(&v202, (uint64_t)v109, v110);
      if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v237.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v200) & 0x80000000) == 0)
        {
LABEL_186:
          if ((SHIBYTE(v219.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_187;
          goto LABEL_193;
        }
      }
      else if ((SHIBYTE(v200) & 0x80000000) == 0)
      {
        goto LABEL_186;
      }
      operator delete(v199[0]);
      if ((SHIBYTE(v219.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_187:
        if ((SHIBYTE(v232.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_188;
        goto LABEL_194;
      }
LABEL_193:
      operator delete(v219.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v232.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_188:
        v111 = v211;
        v195 = v103;
        if ((v211 & 0x10) == 0)
          goto LABEL_189;
        goto LABEL_195;
      }
LABEL_194:
      operator delete(v232.__r_.__value_.__l.__data_);
      v111 = v211;
      v195 = v103;
      if ((v211 & 0x10) == 0)
      {
LABEL_189:
        if ((v111 & 8) == 0)
        {
          v112 = 0;
          HIBYTE(v228) = 0;
          v113 = (void **)&__dst;
          goto LABEL_205;
        }
        v115 = v204;
        v112 = v205 - (_QWORD)v204;
        if ((unint64_t)(v205 - (_QWORD)v204) > 0x7FFFFFFFFFFFFFF7)
LABEL_250:
          sub_20E860B7C();
LABEL_198:
        if (v112 >= 0x17)
        {
          v116 = (v112 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v112 | 7) != 0x17)
            v116 = v112 | 7;
          v117 = v116 + 1;
          v113 = (void **)operator new(v116 + 1);
          v228 = v117 | 0x8000000000000000;
          __dst = v113;
          v227 = v112;
        }
        else
        {
          HIBYTE(v228) = v112;
          v113 = (void **)&__dst;
          if (!v112)
          {
LABEL_205:
            *((_BYTE *)v113 + v112) = 0;
            v219.__r_.__value_.__r.__words[0] = (std::string::size_type)&v231;
            v219.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
            v219.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
            v220 = 2;
            v221 = "unknown file";
            v222 = 106;
            v225 = 0;
            v223 = "unknown function";
            v224 = 0;
            if (v228 >= 0)
              v118 = (const char *)&__dst;
            else
              v118 = (const char *)__dst;
            v119 = *(_QWORD *)v219.__r_.__value_.__l.__data_;
            if (*(char *)(*(_QWORD *)v219.__r_.__value_.__l.__data_ + 39) < 0)
            {
              v121 = *(const char **)(v119 + 16);
              v120 = *(_QWORD *)(v119 + 24);
              v197 = *(_QWORD *)v219.__r_.__value_.__l.__data_ + 16;
              v123 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v123 & 1) != 0)
                goto LABEL_212;
            }
            else
            {
              v120 = *(unsigned __int8 *)(*(_QWORD *)v219.__r_.__value_.__l.__data_ + 39);
              v121 = (const char *)(*(_QWORD *)v219.__r_.__value_.__l.__data_ + 16);
              v197 = (uint64_t)v121;
              v122 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v122 & 1) != 0)
                goto LABEL_212;
            }
            if (__cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)&v237);
              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v237);
              if ((_BYTE)v238 && SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v237.__r_.__value_.__l.__data_);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
            }
LABEL_212:
            if (byte_254A4A4F8[23] >= 0)
              v124 = byte_254A4A4F8;
            else
              v124 = *(const char **)byte_254A4A4F8;
            if (byte_254A4A4F8[23] >= 0)
              v125 = byte_254A4A4F8[23];
            else
              v125 = *(_QWORD *)&byte_254A4A4F8[8];
            v237.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v124, v121);
            v126 = &v237.__r_.__value_.__l.__size_;
            if (v125 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v125 >= 0x17)
            {
              v127 = (v125 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v125 | 7) != 0x17)
                v127 = v125 | 7;
              v128 = v127 + 1;
              v126 = (std::string::size_type *)operator new(v127 + 1);
              v237.__r_.__value_.__r.__words[2] = v125;
              *(_QWORD *)&v238 = v128 | 0x8000000000000000;
              v237.__r_.__value_.__l.__size_ = (std::string::size_type)v126;
            }
            else
            {
              BYTE7(v238) = v125;
              if (!v125)
              {
LABEL_226:
                *((_BYTE *)v126 + v125) = 0;
                BYTE8(v238) = 1;
                v129 = (char *)&v239;
                if (v120 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                if (v120 >= 0x17)
                {
                  v131 = (v120 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v120 | 7) != 0x17)
                    v131 = v120 | 7;
                  v132 = v131 + 1;
                  v129 = (char *)operator new(v131 + 1);
                  v240 = v120;
                  v241 = v132 | 0x8000000000000000;
                  v239 = v129;
                }
                else
                {
                  HIBYTE(v241) = v120;
                  if (!v120)
                  {
                    LOBYTE(v239) = 0;
                    v242 = 1;
                    v130 = v237.__r_.__value_.__r.__words[0];
                    if ((SHIBYTE(v241) & 0x80000000) == 0)
                      goto LABEL_230;
                    goto LABEL_236;
                  }
                }
                memmove(v129, v121, v120);
                v129[v120] = 0;
                v242 = 1;
                v130 = v237.__r_.__value_.__r.__words[0];
                if ((SHIBYTE(v241) & 0x80000000) == 0)
                {
LABEL_230:
                  if (!BYTE8(v238))
                    goto LABEL_239;
                  goto LABEL_237;
                }
LABEL_236:
                operator delete(v239);
                if (!BYTE8(v238))
                  goto LABEL_239;
LABEL_237:
                if (SBYTE7(v238) < 0)
                  operator delete((void *)v237.__r_.__value_.__l.__size_);
LABEL_239:
                if (v237.__r_.__value_.__r.__words[0])
                  os_release(v237.__r_.__value_.__l.__data_);
                if (!v104 || !*(_QWORD *)(v104 + 24))
                {
                  os_log_type_enabled(v130, OS_LOG_TYPE_DEBUG);
                  LODWORD(v237.__r_.__value_.__l.__data_) = 136315138;
                  *(std::string::size_type *)((char *)v237.__r_.__value_.__r.__words + 4) = (std::string::size_type)v118;
                  v139 = (void *)_os_log_send_and_compose_impl();
                  v140 = v195;
                  if (v139)
                    free(v139);
                  goto LABEL_315;
                }
                v133 = _os_log_pack_size();
                v134 = operator new(v133, (std::align_val_t)8uLL);
                v135 = (_QWORD *)operator new();
                *v135 = &off_24C9ABB80;
                v135[1] = 0;
                v135[2] = 0;
                v135[3] = v134;
                v232.__r_.__value_.__r.__words[0] = (std::string::size_type)v134;
                v232.__r_.__value_.__l.__size_ = (std::string::size_type)v134;
                v233 = 0;
                v234 = 0;
                v232.__r_.__value_.__r.__words[2] = (std::string::size_type)v135;
                v136 = strlen(v118);
                if (v136 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                v137 = v136;
                if (v136 >= 0x17)
                {
                  v141 = (v136 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v136 | 7) != 0x17)
                    v141 = v136 | 7;
                  v142 = v141 + 1;
                  v138 = operator new(v141 + 1);
                  *(_QWORD *)&v236 = v137;
                  *((_QWORD *)&v236 + 1) = v142 | 0x8000000000000000;
                  v235 = v138;
                }
                else
                {
                  HIBYTE(v236) = v136;
                  v138 = &v235;
                  if (!v136)
                  {
LABEL_255:
                    *((_BYTE *)v138 + v137) = 0;
                    v143 = v235;
                    v243[0] = v236;
                    *(_QWORD *)((char *)v243 + 7) = *(_QWORD *)((char *)&v236 + 7);
                    v144 = HIBYTE(v236);
                    v145 = operator new(0x38uLL);
                    v145[1] = 0;
                    v145[2] = 0;
                    v145[3] = off_24C9ABC20;
                    *v145 = &off_24C9ABBD0;
                    v146 = v243[0];
                    v145[4] = v143;
                    v145[5] = v146;
                    *(_QWORD *)((char *)v145 + 47) = *(_QWORD *)((char *)v243 + 7);
                    *((_BYTE *)v145 + 55) = v144;
                    v243[0] = 0;
                    *(_QWORD *)((char *)v243 + 7) = 0;
                    v147 = v234;
                    v233 = (char *)(v145 + 3);
                    v234 = (std::__shared_weak_count *)v145;
                    if (v147)
                    {
                      v148 = (unint64_t *)&v147->__shared_owners_;
                      do
                        v149 = __ldaxr(v148);
                      while (__stlxr(v149 - 1, v148));
                      if (!v149)
                      {
                        ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
                        std::__shared_weak_count::__release_weak(v147);
                      }
                    }
                    v237 = v232;
                    v150 = v233;
                    if (v232.__r_.__value_.__r.__words[2])
                    {
                      v151 = (unint64_t *)(v232.__r_.__value_.__r.__words[2] + 8);
                      do
                        v152 = __ldxr(v151);
                      while (__stxr(v152 + 1, v151));
                    }
                    v153 = v234;
                    *(_QWORD *)&v238 = v150;
                    *((_QWORD *)&v238 + 1) = v234;
                    if (v234)
                    {
                      v154 = (unint64_t *)&v234->__shared_owners_;
                      do
                        v155 = __ldxr(v154);
                      while (__stxr(v155 + 1, v154));
                      v239 = v150;
                      do
                        v156 = __ldaxr(v154);
                      while (__stlxr(v156 - 1, v154));
                      if (!v156)
                      {
                        ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
                        std::__shared_weak_count::__release_weak(v153);
                      }
                    }
                    else
                    {
                      v239 = v150;
                    }
                    v157 = (std::__shared_weak_count *)v232.__r_.__value_.__r.__words[2];
                    if (v232.__r_.__value_.__r.__words[2])
                    {
                      v158 = (unint64_t *)(v232.__r_.__value_.__r.__words[2] + 8);
                      do
                        v159 = __ldaxr(v158);
                      while (__stlxr(v159 - 1, v158));
                      if (!v159)
                      {
                        ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
                        std::__shared_weak_count::__release_weak(v157);
                      }
                    }
                    v160 = v237.__r_.__value_.__r.__words[0];
                    if (v239[31] >= 0)
                      v161 = v239 + 8;
                    else
                      v161 = (char *)*((_QWORD *)v239 + 1);
                    v162 = _os_log_pack_fill();
                    *(_DWORD *)v162 = 136315138;
                    *(_QWORD *)(v162 + 4) = v161;
                    v163 = operator new();
                    v164 = *(unsigned __int8 *)(v119 + 39);
                    v165 = *(_QWORD *)(v119 + 16);
                    v166 = *(_QWORD *)(v119 + 24);
                    v167 = v238;
                    *(_OWORD *)(v163 + 8) = *(_OWORD *)&v237.__r_.__value_.__r.__words[1];
                    if ((v164 & 0x80u) != 0)
                      v164 = v166;
                    else
                      v165 = v197;
                    *(_QWORD *)v163 = v160;
                    *(_OWORD *)&v237.__r_.__value_.__r.__words[1] = 0uLL;
                    *(_OWORD *)(v163 + 24) = v167;
                    v238 = 0uLL;
                    *(_QWORD *)(v163 + 40) = v165;
                    *(_QWORD *)(v163 + 48) = v164;
                    *(_BYTE *)(v163 + 56) = 2;
                    v235 = 0;
                    v232.__r_.__value_.__r.__words[0] = v163;
                    (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v104 + 24) + 40))(*(_QWORD *)(v104 + 24), &v232);
                    v168 = v232.__r_.__value_.__r.__words[0];
                    v232.__r_.__value_.__r.__words[0] = 0;
                    v140 = v195;
                    if (v168)
                    {
                      v169 = *(std::__shared_weak_count **)(v168 + 32);
                      if (v169)
                      {
                        v170 = (unint64_t *)&v169->__shared_owners_;
                        do
                          v171 = __ldaxr(v170);
                        while (__stlxr(v171 - 1, v170));
                        if (!v171)
                        {
                          ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
                          std::__shared_weak_count::__release_weak(v169);
                        }
                      }
                      v172 = *(std::__shared_weak_count **)(v168 + 16);
                      if (v172)
                      {
                        v173 = (unint64_t *)&v172->__shared_owners_;
                        do
                          v174 = __ldaxr(v173);
                        while (__stlxr(v174 - 1, v173));
                        if (!v174)
                        {
                          ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
                          std::__shared_weak_count::__release_weak(v172);
                        }
                      }
                      MEMORY[0x212BC6398](v168, 0x10F0C40B62ED6C6);
                      v175 = v235;
                      v235 = 0;
                      if (v175)
                      {
                        v176 = (std::__shared_weak_count *)v175[4];
                        if (v176)
                        {
                          v177 = (unint64_t *)&v176->__shared_owners_;
                          do
                            v178 = __ldaxr(v177);
                          while (__stlxr(v178 - 1, v177));
                          if (!v178)
                          {
                            ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
                            std::__shared_weak_count::__release_weak(v176);
                          }
                        }
                        v179 = (std::__shared_weak_count *)v175[2];
                        if (v179)
                        {
                          v180 = (unint64_t *)&v179->__shared_owners_;
                          do
                            v181 = __ldaxr(v180);
                          while (__stlxr(v181 - 1, v180));
                          if (!v181)
                          {
                            ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
                            std::__shared_weak_count::__release_weak(v179);
                          }
                        }
                        MEMORY[0x212BC6398](v175, 0x10F0C40B62ED6C6);
                      }
                    }
                    v182 = (std::__shared_weak_count *)*((_QWORD *)&v238 + 1);
                    if (*((_QWORD *)&v238 + 1))
                    {
                      v183 = (unint64_t *)(*((_QWORD *)&v238 + 1) + 8);
                      do
                        v184 = __ldaxr(v183);
                      while (__stlxr(v184 - 1, v183));
                      if (!v184)
                      {
                        ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
                        std::__shared_weak_count::__release_weak(v182);
                      }
                    }
                    v185 = (std::__shared_weak_count *)v237.__r_.__value_.__r.__words[2];
                    if (v237.__r_.__value_.__r.__words[2])
                    {
                      v186 = (unint64_t *)(v237.__r_.__value_.__r.__words[2] + 8);
                      do
                        v187 = __ldaxr(v186);
                      while (__stlxr(v187 - 1, v186));
                      if (!v187)
                      {
                        ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
                        std::__shared_weak_count::__release_weak(v185);
                      }
                    }
LABEL_315:
                    if (v140)
                    {
                      v188 = (const char *)&__dst;
                      if (v228 < 0)
                        v188 = (const char *)__dst;
                      sub_20E8C003C((uint64_t)&v219, "%s", v188);
                      sub_20E863570((uint64_t)&v219);
                    }
                    sub_20E863570((uint64_t)&v219);
                    v189 = v225;
                    if (v225)
                    {
                      v190 = (unint64_t *)&v225->__shared_owners_;
                      do
                        v191 = __ldaxr(v190);
                      while (__stlxr(v191 - 1, v190));
                      if (!v191)
                      {
                        ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
                        std::__shared_weak_count::__release_weak(v189);
                      }
                    }
                    if (SHIBYTE(v228) < 0)
                      operator delete(__dst);
                    v201[0] = *MEMORY[0x24BEDB7F0];
                    v192 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                    *(_QWORD *)((char *)v201 + *(_QWORD *)(v201[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                    v202 = v192;
                    v203 = MEMORY[0x24BEDB848] + 16;
                    if (v209 < 0)
                      operator delete(v208);
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    return MEMORY[0x212BC6290](v212);
                  }
                }
                memcpy(v138, v118, v137);
                goto LABEL_255;
              }
            }
            memmove(v126, v124, v125);
            goto LABEL_226;
          }
        }
        memmove(v113, v115, v112);
        goto LABEL_205;
      }
LABEL_195:
      v114 = v210;
      if (v210 < v207)
      {
        v210 = v207;
        v114 = v207;
      }
      v115 = v206;
      v112 = v114 - (_QWORD)v206;
      if (v114 - (unint64_t)v206 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_250;
      goto LABEL_198;
    }
  }
  return result;
}

void sub_20F407D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  va_list va;

  va_start(va, a10);
  if (*(_BYTE *)(v10 - 168) && *(char *)(v10 - 169) < 0)
    operator delete(*(void **)(v10 - 192));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0x240]);
  if (SLOBYTE(STACK[0x29F]) < 0)
    operator delete((void *)STACK[0x288]);
  sub_20E863784((uint64_t)va);
  sub_20F035EA4(a7);
  _Unwind_Resume(a1);
}

void sub_20F4080E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  void *v12;
  va_list va;

  va_start(va, a10);
  if (*(_BYTE *)(v10 - 160) && *(char *)(v10 - 161) < 0)
    operator delete(*(void **)(v10 - 184));
  v12 = *(void **)(v10 - 192);
  if (v12)
    os_release(v12);
  sub_20E863714((uint64_t)&STACK[0x240]);
  if (SLOBYTE(STACK[0x29F]) < 0)
    operator delete((void *)STACK[0x288]);
  sub_20E863784((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F40813C(void *a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  JUMPOUT(0x20F40819CLL);
}

void sub_20F40814C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20F035EA4(v1);
  _Unwind_Resume(a1);
}

void sub_20F408164(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20F035EA4(v1);
  _Unwind_Resume(a1);
}

void sub_20F408180(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20F035EA4(v1);
  _Unwind_Resume(a1);
}

void sub_20F408198(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_20F4081A4(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A68938);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A68938))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.odometry_unsanitized");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A68930);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A68938);
  }
  *a1 = qword_254A68930;
}

void sub_20F408240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A68938);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A68938);
  _Unwind_Resume(a1);
}

uint64_t sub_20F408298(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  unsigned int v14;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  char v23;
  size_t v24;
  unint64_t v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  std::string __p;
  uint64_t v32;
  std::ios_base v33;
  uint64_t v34;
  int v35;
  uint64_t __sb;
  const void *v37;
  uint64_t v38;
  const void *v39;
  unint64_t v40;
  __int128 v41;
  __int128 v42;
  int v43;

  std::streambuf::basic_streambuf();
  v6 = MEMORY[0x24BEDB848];
  __sb = MEMORY[0x24BEDB848] + 16;
  v41 = 0u;
  v42 = 0u;
  v43 = 24;
  v32 = MEMORY[0x24BEDB828] + 24;
  v33.__vftable = (std::ios_base_vtbl *)(MEMORY[0x24BEDB828] + 64);
  std::ios_base::init(&v33, &__sb);
  v34 = 0;
  v35 = -1;
  v7 = *(char *)(a3 + 23);
  if (v7 >= 0)
    v8 = a3;
  else
    v8 = *(_QWORD *)a3;
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(a3 + 23);
  else
    v9 = *(_QWORD *)(a3 + 8);
  v10 = sub_20E86A980(&v32, v8, v9);
  v11 = sub_20E86A980(v10, (uint64_t)" StateCorrectionLogic: ", 23);
  sub_20E86A980(v11, (uint64_t)" is during reloc: ", 18);
  v12 = (_QWORD *)std::ostream::operator<<();
  v13 = sub_20E86A980(v12, (uint64_t)" opt_query_state_id: ", 21);
  if (*(_BYTE *)(a2 + 368))
  {
    std::to_string(&__p, *(_DWORD *)(a2 + 232));
    v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else
  {
    v14 = 2;
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 2;
    strcpy((char *)&__p, "na");
  }
  if ((v14 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((v14 & 0x80u) == 0)
    size = v14;
  else
    size = __p.__r_.__value_.__l.__size_;
  v17 = sub_20E86A980(v13, (uint64_t)p_p, size);
  sub_20E86A980(v17, (uint64_t)" state correction applied to tracker: ", 38);
  v18 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v18, (uint64_t)" num_consecutive_map_tracking: ", 31);
  v19 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v19, (uint64_t)" num of no map measurements: ", 29);
  v20 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v20, (uint64_t)" num_state_correction: ", 23);
  v21 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v21, (uint64_t)" state correction succeeded: ", 29);
  v22 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v22, (uint64_t)"\n", 1);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v23 = v43;
    if ((v43 & 0x10) == 0)
      goto LABEL_18;
LABEL_21:
    v25 = *((_QWORD *)&v42 + 1);
    if (*((_QWORD *)&v42 + 1) < v40)
    {
      *((_QWORD *)&v42 + 1) = v40;
      v25 = v40;
    }
    v26 = v39;
    v24 = v25 - (_QWORD)v39;
    if (v25 - (unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_35;
    goto LABEL_24;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  v23 = v43;
  if ((v43 & 0x10) != 0)
    goto LABEL_21;
LABEL_18:
  if ((v23 & 8) == 0)
  {
    v24 = 0;
    a1[23] = 0;
    goto LABEL_31;
  }
  v26 = v37;
  v24 = v38 - (_QWORD)v37;
  if ((unint64_t)(v38 - (_QWORD)v37) >= 0x7FFFFFFFFFFFFFF8)
LABEL_35:
    sub_20E860B7C();
LABEL_24:
  if (v24 >= 0x17)
  {
    v27 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v24 | 7) != 0x17)
      v27 = v24 | 7;
    v28 = v27 + 1;
    v29 = operator new(v27 + 1);
    *((_QWORD *)a1 + 1) = v24;
    *((_QWORD *)a1 + 2) = v28 | 0x8000000000000000;
    *(_QWORD *)a1 = v29;
    a1 = v29;
    goto LABEL_30;
  }
  a1[23] = v24;
  if (v24)
LABEL_30:
    memmove(a1, v26, v24);
LABEL_31:
  a1[v24] = 0;
  std::ostream::~ostream();
  __sb = v6 + 16;
  if (SBYTE7(v42) < 0)
    operator delete((void *)v41);
  return std::streambuf::~streambuf();
}

void sub_20F408598(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  sub_20F23197C(v1 - 152);
  _Unwind_Resume(a1);
}

void sub_20F4085D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  if (a14 < 0)
    operator delete(__p);
  std::ostream::~ostream();
  sub_20F23197C(v15 - 152);
  _Unwind_Resume(a1);
}

void sub_20F408600(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE v4[144];
  void *v5;
  void *v6;
  void *__p;
  void *v8;
  char v9;
  char v10;

  *(_DWORD *)(a1 + 200) = 0;
  v2 = a1 + 200;
  *(_BYTE *)(a1 + 224) = 0;
  v4[0] = 0;
  v10 = 0;
  sub_20F04DA80(a1 + 376, (uint64_t)v4);
  if (v10)
  {
    if (v9 && __p)
    {
      v8 = __p;
      operator delete(__p);
    }
    if (v5)
    {
      v6 = v5;
      operator delete(v5);
    }
  }
  if (*(_BYTE *)(a1 + 368))
  {
    v3 = *(_QWORD *)(a1 + 904);
    if (!v3
      || ((*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 48))(v3, v2, a1 + 232),
          *(_BYTE *)(a1 + 368)))
    {
      *(_BYTE *)(a1 + 368) = 0;
    }
  }
}

__n128 sub_20F4086B0(uint64_t a1, int a2, _QWORD *a3, char a4, __int128 *a5)
{
  uint64_t v10;
  __n128 result;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  if (*(_BYTE *)(a1 + 224)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryUnsanitized/src/StateCorrectionLogic.cpp", 117, (uint64_t)"!this->RelocalizationVerificationInProgress()", 45, (uint64_t)"Cannot update state correction during verification", 50, (void (*)(void **))sub_21023DDB0))
  {
LABEL_11:
    abort();
  }
  v10 = a3[1];
  if (*a3 == v10)
  {
    *(_BYTE *)(a1 + 208) = 0;
    *(_BYTE *)(a1 + 216) = 0;
    if (!*(_BYTE *)(a1 + 368))
      goto LABEL_8;
  }
  else
  {
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(v10 - 8);
    *(_BYTE *)(a1 + 216) = 1;
    if (!*(_BYTE *)(a1 + 368))
      goto LABEL_8;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryUnsanitized/src/StateCorrectionLogic.cpp", 128, (uint64_t)"!this->opt_request_", 19, (uint64_t)"Query state ID should be empty upon receiving state correction event", 68, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_11;
  }
LABEL_8:
  if (*(_BYTE *)(a1 + 872)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryUnsanitized/src/StateCorrectionLogic.cpp", 130, (uint64_t)"!this->opt_reloc_info_", 22, (uint64_t)"relocalization info should be empty upon receiving state correction event", 73, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_11;
  }
  result = (__n128)a5[4];
  v17 = a5[5];
  v12 = a5[6];
  v18 = a5[7];
  v13 = *a5;
  v15 = a5[1];
  v14 = a5[2];
  v16 = a5[3];
  *(_DWORD *)(a1 + 232) = a2;
  *(__n128 *)(a1 + 304) = result;
  *(_OWORD *)(a1 + 320) = v17;
  *(_OWORD *)(a1 + 336) = v12;
  *(_OWORD *)(a1 + 352) = v18;
  *(_OWORD *)(a1 + 240) = v13;
  *(_OWORD *)(a1 + 256) = v15;
  *(_OWORD *)(a1 + 272) = v14;
  *(_OWORD *)(a1 + 288) = v16;
  *(_BYTE *)(a1 + 368) = 1;
  *(_BYTE *)(a1 + 226) = a4;
  *(_WORD *)(a1 + 224) = 1;
  *(_DWORD *)(a1 + 200) = 0;
  return result;
}

void sub_20F408864(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  if (*(_BYTE *)(a1 + 872)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryUnsanitized/src/StateCorrectionLogic.cpp", 166, (uint64_t)"!this->opt_reloc_info_", 22, (uint64_t)"relocalization info should be empty upon receiving state correction event", 73, (void (*)(void **))sub_21023DDB0)|| !*(_BYTE *)(a1 + 368)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryUnsanitized/src/StateCorrectionLogic.cpp", 167, (uint64_t)"this->opt_request_", 18, (uint64_t)"State correction request is not set", 35, (void (*)(void **))sub_21023DDB0)|| *(_DWORD *)(a1 + 232) != *(_DWORD *)(a2 + 16)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryUnsanitized/src/StateCorrectionLogic.cpp",
         169,
         (uint64_t)"this->opt_request_->query_state_id == reloc_info.query_image_id.view.key()",
         74,
         (uint64_t)"Query state ID not compatible",
         29,
         (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v4 = (_OWORD *)(a1 + 376);
  if (*(_BYTE *)(a1 + 872))
  {
    *v4 = *(_OWORD *)a2;
    v5 = *(_OWORD *)(a2 + 16);
    v6 = *(_OWORD *)(a2 + 32);
    v7 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 440) = v7;
    *(_OWORD *)(a1 + 392) = v5;
    *(_OWORD *)(a1 + 408) = v6;
    v8 = *(_OWORD *)(a2 + 80);
    v9 = *(_OWORD *)(a2 + 96);
    v10 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 488) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 504) = v10;
    *(_OWORD *)(a1 + 456) = v8;
    *(_OWORD *)(a1 + 472) = v9;
    if (v4 != (_OWORD *)a2)
      sub_20F04DCF4((_QWORD *)(a1 + 520), *(char **)(a2 + 144), *(char **)(a2 + 152), (uint64_t)(*(_QWORD *)(a2 + 152) - *(_QWORD *)(a2 + 144)) >> 4);
    sub_20F408A9C(a1 + 544, a2 + 168);
    *(_BYTE *)(a1 + 864) = *(_BYTE *)(a2 + 488);
  }
  else
  {
    sub_20F4089B8((uint64_t)v4, a2);
  }
}

uint64_t sub_20F4089B8(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_OWORD *)(a2 + 16);
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  v7 = *(_OWORD *)(a2 + 80);
  v8 = *(_OWORD *)(a2 + 96);
  v9 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v9;
  *(_QWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 96) = v8;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  v11 = *(_BYTE **)(a2 + 144);
  v10 = *(_BYTE **)(a2 + 152);
  v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0)
      sub_20E867F44();
    v13 = (char *)operator new(v10 - v11);
    *(_QWORD *)(a1 + 144) = v13;
    *(_QWORD *)(a1 + 152) = v13;
    v14 = &v13[16 * (v12 >> 4)];
    *(_QWORD *)(a1 + 160) = v14;
    memcpy(v13, v11, v12 - 4);
    *(_QWORD *)(a1 + 152) = v14;
  }
  result = sub_20F0909CC(a1 + 168, a2 + 168);
  *(_BYTE *)(a1 + 488) = *(_BYTE *)(a2 + 488);
  *(_BYTE *)(a1 + 496) = 1;
  return result;
}

void sub_20F408A7C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 152) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_20F408A9C(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  size_t v9;

  if (*(unsigned __int8 *)(a1 + 312) == *(unsigned __int8 *)(a2 + 312))
  {
    if (*(_BYTE *)(a1 + 312))
    {
      if (a1 != a2)
        sub_20EAF9840((_QWORD *)a1, *(char **)a2, *(char **)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 7);
      memcpy((void *)(a1 + 24), (const void *)(a2 + 24), 0x120uLL);
    }
  }
  else if (*(_BYTE *)(a1 + 312))
  {
    v4 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v4;
      operator delete(v4);
    }
    *(_BYTE *)(a1 + 312) = 0;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    v6 = *(char **)a2;
    v5 = *(_QWORD *)(a2 + 8);
    v7 = v5 - *(_QWORD *)a2;
    if (v5 != *(_QWORD *)a2)
    {
      if (v7 < 0)
        sub_20E867F44();
      v8 = (char *)operator new(v5 - *(_QWORD *)a2);
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = &v8[128 * (v7 >> 7)];
      v9 = v7 & 0xFFFFFFFFFFFFFF80;
      memcpy(v8, v6, v9);
      *(_QWORD *)(a1 + 8) = &v8[v9];
    }
    memcpy((void *)(a1 + 24), (const void *)(a2 + 24), 0x120uLL);
    *(_BYTE *)(a1 + 312) = 1;
  }
}

void sub_20F408BB8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20F408BD4(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  unsigned int *v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  unsigned int *i;
  uint64_t v14;
  size_t prime;
  int8x8_t v16;
  BOOL v17;
  unint64_t v18;
  uint8x8_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  char *v23;
  void *v24;
  char *j;
  unsigned int *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t **v34;
  uint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  _QWORD *v41;
  int8x8_t v42;
  unint64_t v43;
  uint8x8_t v44;
  unint64_t v45;
  uint64_t **v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  void *v51;
  unint64_t v52;
  unint64_t v53;
  uint8x8_t v54;
  unint64_t v55;
  uint64_t v56;
  unsigned int **v57;
  unsigned int *v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unsigned int *v62;
  unsigned int *v63;
  unint64_t v64;
  unint64_t v65;
  unsigned int *v66;
  unint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  void *v70;
  char *v71;
  void *v72;
  _QWORD *v73;
  _QWORD *v74;
  void *v75;
  void *v76;
  unsigned int *v77;
  unsigned int v78;
  void *v79;
  char *v80;
  char *v81;
  void *__p[3];

  if (!a1[3])
  {
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_DWORD *)(a2 + 32) = 1065353216;
    return;
  }
  v5 = (unsigned int *)(a1 + 2);
  v4 = (_QWORD *)a1[2];
  v6 = (_QWORD *)*v4;
  if (*v4)
  {
    do
    {
      if (v4[6] < v6[6])
        v4 = v6;
      v6 = (_QWORD *)*v6;
    }
    while (v6);
  }
  v7 = *((_DWORD *)v4 + 12);
  v79 = 0;
  v80 = 0;
  v81 = 0;
  v8 = (v7 + 1);
  if ((_DWORD)v8)
  {
    v9 = 40 * v8;
    v10 = (char *)operator new(40 * v8);
    v11 = v10;
    v79 = v10;
    v81 = &v10[v9];
    v12 = v10;
    do
    {
      *(_OWORD *)v12 = 0uLL;
      *((_OWORD *)v12 + 1) = 0uLL;
      *((_DWORD *)v12 + 8) = 1065353216;
      v12 += 40;
    }
    while (v12 != &v10[v9]);
    v80 = &v10[v9];
  }
  else
  {
    v11 = 0;
  }
  for (i = v5; ; sub_20EABA148((uint64_t)&v11[40 * *((_QWORD *)i + 6)], i + 4, i + 4))
  {
    i = *(unsigned int **)i;
    if (!i)
      break;
  }
  v14 = a1[3];
  prime = v14;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  if (v14 != 1)
  {
    if ((v14 & (v14 - 1)) != 0)
    {
      prime = std::__next_prime(v14);
      v16 = *(int8x8_t *)(a2 + 8);
      v17 = prime >= *(_QWORD *)&v16;
      if (prime > *(_QWORD *)&v16)
        goto LABEL_31;
    }
    else
    {
      v16 = 0;
      v17 = 1;
      if ((_DWORD)v14)
        goto LABEL_31;
    }
    if (v17)
      goto LABEL_32;
    v18 = vcvtps_u32_f32((float)*(unint64_t *)(a2 + 24) / *(float *)(a2 + 32));
    if (*(_QWORD *)&v16 < 3uLL || (v19 = (uint8x8_t)vcnt_s8(v16), v19.i16[0] = vaddlv_u8(v19), v19.u32[0] > 1uLL))
    {
      v18 = std::__next_prime(v18);
    }
    else
    {
      v20 = 1 << -(char)__clz(v18 - 1);
      if (v18 >= 2)
        v18 = v20;
    }
    if (prime <= v18)
      prime = v18;
    if (prime >= *(_QWORD *)&v16)
      goto LABEL_32;
    goto LABEL_31;
  }
  prime = 2;
LABEL_31:
  sub_20E8D2B3C(a2, prime);
LABEL_32:
  if ((_DWORD)v14)
  {
    v77 = v5;
    v21 = 0;
    v22 = 0;
    do
    {
      v23 = (char *)v79;
      if (v79 != v80)
      {
        while (!*((_QWORD *)v23 + 3))
        {
          v23 += 40;
          if (v23 == v80)
          {
            v23 = v80;
            break;
          }
        }
      }
      if (v21 <= -858993459 * ((unint64_t)(v23 - (_BYTE *)v79) >> 3))
        v21 = -858993459 * ((unint64_t)(v23 - (_BYTE *)v79) >> 3);
      v78 = *(_DWORD *)(*((_QWORD *)v23 + 2) + 16);
      __p[0] = &v78;
      *((_DWORD *)sub_20F2CE5F0(a2, &v78, (uint64_t)&unk_2102DB95C, (_DWORD **)__p) + 5) = v21;
      sub_20E8D2CE8(v23, *((_QWORD **)v23 + 2), (uint64_t)__p);
      v24 = __p[0];
      __p[0] = 0;
      if (v24)
        operator delete(v24);
      for (j = sub_20F40ACE4((uint64_t)a1, v78, &v78) + 40;
            ;
            sub_20EABA148((uint64_t)v40 + 40 * (v28 - 1), (unsigned int *)j + 4, (_DWORD *)j + 4))
      {
        j = *(char **)j;
        if (!j)
          break;
        v26 = (unsigned int *)(j + 16);
        v27 = sub_20F40ACE4((uint64_t)a1, *((_DWORD *)j + 4), (_DWORD *)j + 4);
        v28 = *((_QWORD *)v27 + 6);
        v29 = *((_QWORD *)v27 + 4);
        if (v29)
        {
          v30 = (uint8x8_t)vcnt_s8((int8x8_t)v29);
          v30.i16[0] = vaddlv_u8(v30);
          if (v30.u32[0] > 1uLL)
          {
            v31 = v78;
            if (v29 <= v78)
              v31 = v78 % v29;
          }
          else
          {
            v31 = ((_DWORD)v29 - 1) & v78;
          }
          v33 = *((_QWORD *)v27 + 3);
          v32 = v27 + 24;
          v34 = *(uint64_t ***)(v33 + 8 * v31);
          if (v34)
          {
            v35 = *v34;
            if (*v34)
            {
              if (v30.u32[0] < 2uLL)
              {
                v36 = v29 - 1;
                while (1)
                {
                  v38 = v35[1];
                  if (v38 == v78)
                  {
                    if (*((_DWORD *)v35 + 4) == v78)
                      goto LABEL_68;
                  }
                  else if ((v38 & v36) != v31)
                  {
                    goto LABEL_70;
                  }
                  v35 = (uint64_t *)*v35;
                  if (!v35)
                    goto LABEL_70;
                }
              }
              do
              {
                v37 = v35[1];
                if (v37 == v78)
                {
                  if (*((_DWORD *)v35 + 4) == v78)
                  {
LABEL_68:
                    sub_20E8D2CE8(v32, v35, (uint64_t)__p);
                    v39 = __p[0];
                    __p[0] = 0;
                    if (v39)
                      operator delete(v39);
                    break;
                  }
                }
                else
                {
                  if (v37 >= v29)
                    v37 %= v29;
                  if (v37 != v31)
                    break;
                }
                v35 = (uint64_t *)*v35;
              }
              while (v35);
            }
          }
        }
LABEL_70:
        v40 = v79;
        v41 = (char *)v79 + 40 * v28;
        v42 = (int8x8_t)v41[1];
        if (v42)
        {
          v43 = *v26;
          v44 = (uint8x8_t)vcnt_s8(v42);
          v44.i16[0] = vaddlv_u8(v44);
          if (v44.u32[0] > 1uLL)
          {
            v45 = *v26;
            if (*(_QWORD *)&v42 <= v43)
              v45 = v43 % *(_QWORD *)&v42;
          }
          else
          {
            v45 = (v42.i32[0] - 1) & v43;
          }
          v46 = *(uint64_t ***)(*v41 + 8 * v45);
          if (v46)
          {
            v47 = *v46;
            if (*v46)
            {
              if (v44.u32[0] < 2uLL)
              {
                v48 = *(_QWORD *)&v42 - 1;
                while (1)
                {
                  v50 = v47[1];
                  if (v50 == v43)
                  {
                    if (*((_DWORD *)v47 + 4) == (_DWORD)v43)
                      goto LABEL_91;
                  }
                  else if ((v50 & v48) != v45)
                  {
                    goto LABEL_45;
                  }
                  v47 = (uint64_t *)*v47;
                  if (!v47)
                    goto LABEL_45;
                }
              }
              do
              {
                v49 = v47[1];
                if (v49 == v43)
                {
                  if (*((_DWORD *)v47 + 4) == (_DWORD)v43)
                  {
LABEL_91:
                    sub_20E8D2CE8(v41, v47, (uint64_t)__p);
                    v51 = __p[0];
                    __p[0] = 0;
                    if (v51)
                      operator delete(v51);
                    break;
                  }
                }
                else
                {
                  if (v49 >= *(_QWORD *)&v42)
                    v49 %= *(_QWORD *)&v42;
                  if (v49 != v45)
                    break;
                }
                v47 = (uint64_t *)*v47;
              }
              while (v47);
            }
          }
        }
LABEL_45:
        ;
      }
      v52 = a1[1];
      if (v52)
      {
        v53 = v78;
        v54 = (uint8x8_t)vcnt_s8((int8x8_t)v52);
        v54.i16[0] = vaddlv_u8(v54);
        if (v54.u32[0] > 1uLL)
        {
          v55 = v78;
          if (v52 <= v78)
            v55 = v78 % v52;
        }
        else
        {
          v55 = ((_DWORD)v52 - 1) & v78;
        }
        v56 = *a1;
        v57 = *(unsigned int ***)(*a1 + 8 * v55);
        if (v57)
        {
          v58 = *v57;
          if (*v57)
          {
            v59 = v52 - 1;
            if (v54.u32[0] < 2uLL)
            {
              while (1)
              {
                v60 = *((_QWORD *)v58 + 1);
                if (v60 == v78)
                {
                  if (v58[4] == v78)
                    goto LABEL_114;
                }
                else if ((v60 & v59) != v55)
                {
                  goto LABEL_35;
                }
                v58 = *(unsigned int **)v58;
                if (!v58)
                  goto LABEL_35;
              }
            }
            do
            {
              v61 = *((_QWORD *)v58 + 1);
              if (v61 == v78)
              {
                if (v58[4] == v78)
                {
LABEL_114:
                  if (v54.u32[0] > 1uLL)
                  {
                    if (v52 <= v78)
                      v53 = v78 % v52;
                  }
                  else
                  {
                    v53 = v59 & v78;
                  }
                  v62 = *(unsigned int **)(v56 + 8 * v53);
                  do
                  {
                    v63 = v62;
                    v62 = *(unsigned int **)v62;
                  }
                  while (v62 != v58);
                  if (v63 == v77)
                    goto LABEL_131;
                  v64 = *((_QWORD *)v63 + 1);
                  if (v54.u32[0] > 1uLL)
                  {
                    if (v64 >= v52)
                      v64 %= v52;
                  }
                  else
                  {
                    v64 &= v59;
                  }
                  if (v64 != v53)
                  {
LABEL_131:
                    if (!*(_QWORD *)v58)
                      goto LABEL_132;
                    v65 = *(_QWORD *)(*(_QWORD *)v58 + 8);
                    if (v54.u32[0] > 1uLL)
                    {
                      if (v65 >= v52)
                        v65 %= v52;
                    }
                    else
                    {
                      v65 &= v59;
                    }
                    if (v65 != v53)
LABEL_132:
                      *(_QWORD *)(v56 + 8 * v53) = 0;
                  }
                  v66 = *(unsigned int **)v58;
                  if (*(_QWORD *)v58)
                  {
                    v67 = *((_QWORD *)v66 + 1);
                    if (v54.u32[0] > 1uLL)
                    {
                      if (v67 >= v52)
                        v67 %= v52;
                    }
                    else
                    {
                      v67 &= v59;
                    }
                    if (v67 != v53)
                    {
                      *(_QWORD *)(*a1 + 8 * v67) = v63;
                      v66 = *(unsigned int **)v58;
                    }
                  }
                  *(_QWORD *)v63 = v66;
                  *(_QWORD *)v58 = 0;
                  --a1[3];
                  v68 = (_QWORD *)*((_QWORD *)v58 + 5);
                  if (v68)
                  {
                    do
                    {
                      v69 = (_QWORD *)*v68;
                      operator delete(v68);
                      v68 = v69;
                    }
                    while (v69);
                  }
                  v70 = (void *)*((_QWORD *)v58 + 3);
                  *((_QWORD *)v58 + 3) = 0;
                  if (v70)
                    operator delete(v70);
                  operator delete(v58);
                  break;
                }
              }
              else
              {
                if (v61 >= v52)
                  v61 %= v52;
                if (v61 != v55)
                  break;
              }
              v58 = *(unsigned int **)v58;
            }
            while (v58);
          }
        }
      }
LABEL_35:
      ++v22;
    }
    while (v22 != (_DWORD)v14);
    v11 = (char *)v79;
  }
  if (v11)
  {
    v71 = v80;
    v72 = v11;
    if (v80 != v11)
    {
      do
      {
        v73 = (_QWORD *)*((_QWORD *)v71 - 3);
        if (v73)
        {
          do
          {
            v74 = (_QWORD *)*v73;
            operator delete(v73);
            v73 = v74;
          }
          while (v74);
        }
        v76 = (void *)*((_QWORD *)v71 - 5);
        v71 -= 40;
        v75 = v76;
        *(_QWORD *)v71 = 0;
        if (v76)
          operator delete(v75);
      }
      while (v71 != v11);
      v72 = v79;
    }
    v80 = v11;
    operator delete(v72);
  }
}

void sub_20F409304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_20E8C25A8(v4);
  sub_20F40935C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20F409320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_20E8C25A8(v4);
  sub_20F40935C((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20F40935C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  void *v8;

  v2 = (_QWORD *)*a1;
  if (*a1)
  {
    v3 = (_QWORD *)a1[1];
    v4 = (_QWORD *)*a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (_QWORD *)*(v3 - 3);
        if (v5)
        {
          do
          {
            v6 = (_QWORD *)*v5;
            operator delete(v5);
            v5 = v6;
          }
          while (v6);
        }
        v8 = (void *)*(v3 - 5);
        v3 -= 5;
        v7 = v8;
        *v3 = 0;
        if (v8)
          operator delete(v7);
      }
      while (v3 != v2);
      v4 = (_QWORD *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_20F4093E0(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  int *v7;
  unint64_t v8;
  _QWORD *v9;
  unsigned int *v10;
  unsigned int *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int8x8_t v15;
  unint64_t v16;
  uint8x8_t v17;
  unint64_t v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t **v24;
  char *v25;
  uint64_t v26;
  int8x8_t v27;
  unint64_t v28;
  uint8x8_t v29;
  unint64_t v30;
  uint64_t **v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  int64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _BYTE *v43;
  uint64_t *v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _OWORD *v52;
  char *v53;
  uint64_t v54;
  __int128 v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int *v60;
  int8x8_t v61;
  unint64_t v62;
  uint8x8_t v63;
  unint64_t v64;
  uint64_t **v65;
  uint64_t *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  void **v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t *v80;
  unint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  void *v84;
  int *v85;
  unsigned int *v86;
  unsigned int v88;
  void *v89[2];
  void *v90[2];
  int v91;
  void *__p;
  uint64_t v93;
  char *v94;
  int *v95;
  int *v96;
  char *v97;

  v5 = a3;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  v6 = (_QWORD *)a2[2];
  v96 = 0;
  v97 = 0;
  v95 = 0;
  v7 = 0;
  if (v6)
  {
    v8 = -1;
    v9 = v6;
    do
    {
      v9 = (_QWORD *)*v9;
      ++v8;
      v7 += 2;
    }
    while (v9);
    if (v8 >= 0x1FFFFFFFFFFFFFFFLL)
      sub_20E92CED8();
    v10 = (unsigned int *)operator new((size_t)v7);
    v11 = v10;
    v12 = 0;
    v95 = (int *)v10;
    v97 = (char *)v7 + (_QWORD)v10;
    do
    {
      *(_QWORD *)&v10[v12] = v6[2];
      v6 = (_QWORD *)*v6;
      v12 += 2;
    }
    while (v6);
    v7 = (int *)&v10[v12];
    v96 = (int *)&v10[v12];
  }
  else
  {
    v11 = 0;
  }
  v13 = 126 - 2 * __clz(((char *)v7 - (char *)v11) >> 3);
  if (v7 == (int *)v11)
    v14 = 0;
  else
    v14 = v13;
  sub_20F409C88((unint64_t)v11, v7, v14, 1);
  if (v7 == (int *)v11)
    goto LABEL_155;
  v85 = v7;
  while (2)
  {
    if (*(_QWORD *)(v5 + 24) > (unint64_t)v11[1])
      goto LABEL_14;
    __p = 0;
    v93 = 0;
    v94 = 0;
    v15 = (int8x8_t)a1[1];
    if (!*(_QWORD *)&v15)
      goto LABEL_160;
    v16 = *v11;
    v17 = (uint8x8_t)vcnt_s8(v15);
    v17.i16[0] = vaddlv_u8(v17);
    if (v17.u32[0] > 1uLL)
    {
      v18 = *v11;
      if (*(_QWORD *)&v15 <= v16)
        v18 = v16 % *(_QWORD *)&v15;
    }
    else
    {
      v18 = (v15.i32[0] - 1) & v16;
    }
    v19 = *(uint64_t ***)(*a1 + 8 * v18);
    if (!v19 || (v20 = *v19) == 0)
LABEL_160:
      sub_20E89FD20("unordered_map::at: key not found");
    if (v17.u32[0] < 2uLL)
    {
      v21 = *(_QWORD *)&v15 - 1;
      while (1)
      {
        v23 = v20[1];
        if (v23 == v16)
        {
          if (*((_DWORD *)v20 + 4) == (_DWORD)v16)
            goto LABEL_36;
        }
        else if ((v23 & v21) != v18)
        {
          goto LABEL_160;
        }
        v20 = (uint64_t *)*v20;
        if (!v20)
          goto LABEL_160;
      }
    }
    while (1)
    {
      v22 = v20[1];
      if (v22 == v16)
        break;
      if (v22 >= *(_QWORD *)&v15)
        v22 %= *(_QWORD *)&v15;
      if (v22 != v18)
        goto LABEL_160;
LABEL_26:
      v20 = (uint64_t *)*v20;
      if (!v20)
        goto LABEL_160;
    }
    if (*((_DWORD *)v20 + 4) != (_DWORD)v16)
      goto LABEL_26;
LABEL_36:
    v24 = (uint64_t **)v20[5];
    if (v24)
    {
      v86 = v11;
      v25 = 0;
      while (1)
      {
        v27 = (int8x8_t)a2[1];
        if (!*(_QWORD *)&v27)
          goto LABEL_158;
        v28 = *((unsigned int *)v24 + 4);
        v29 = (uint8x8_t)vcnt_s8(v27);
        v29.i16[0] = vaddlv_u8(v29);
        if (v29.u32[0] > 1uLL)
        {
          v30 = *((unsigned int *)v24 + 4);
          if (*(_QWORD *)&v27 <= v28)
            v30 = v28 % *(_QWORD *)&v27;
        }
        else
        {
          v30 = (v27.i32[0] - 1) & v28;
        }
        v31 = *(uint64_t ***)(*a2 + 8 * v30);
        if (!v31 || (v32 = *v31) == 0)
LABEL_158:
          sub_20E89FD20("unordered_map::at: key not found");
        if (v29.u32[0] < 2uLL)
        {
          v33 = *(_QWORD *)&v27 - 1;
          while (1)
          {
            v35 = v32[1];
            if (v35 == v28)
            {
              if (*((_DWORD *)v32 + 4) == (_DWORD)v28)
                goto LABEL_61;
            }
            else if ((v35 & v33) != v30)
            {
              goto LABEL_158;
            }
            v32 = (uint64_t *)*v32;
            if (!v32)
              goto LABEL_158;
          }
        }
        while (1)
        {
          v34 = v32[1];
          if (v34 == v28)
            break;
          if (v34 >= *(_QWORD *)&v27)
            v34 %= *(_QWORD *)&v27;
          if (v34 != v30)
            goto LABEL_158;
LABEL_51:
          v32 = (uint64_t *)*v32;
          if (!v32)
            goto LABEL_158;
        }
        if (*((_DWORD *)v32 + 4) != (_DWORD)v28)
          goto LABEL_51;
LABEL_61:
        v36 = *((unsigned int *)v32 + 5);
        if (*(_QWORD *)(v5 + 24) > v36)
          goto LABEL_40;
        if (v25 < v94)
        {
          *(_QWORD *)v25 = v28 | (v36 << 32);
          v26 = (uint64_t)(v25 + 8);
          goto LABEL_39;
        }
        v37 = (char *)__p;
        v38 = v25 - (_BYTE *)__p;
        v39 = (v25 - (_BYTE *)__p) >> 3;
        v40 = v39 + 1;
        if ((unint64_t)(v39 + 1) >> 61)
          sub_20E92CED8();
        v41 = v94 - (_BYTE *)__p;
        if ((v94 - (_BYTE *)__p) >> 2 > v40)
          v40 = v41 >> 2;
        if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8)
          v42 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v42 = v40;
        if (!v42)
        {
          v43 = 0;
          v44 = (uint64_t *)(8 * v39);
          *(_QWORD *)(8 * v39) = v28 | (v36 << 32);
          v26 = 8 * v39 + 8;
          v45 = v25 - v37;
          if (v25 != v37)
            goto LABEL_72;
LABEL_78:
          __p = v44;
          v93 = v26;
          v94 = &v43[8 * v42];
          if (!v25)
            goto LABEL_80;
LABEL_79:
          operator delete(v25);
          goto LABEL_80;
        }
        if (v42 >> 61)
          sub_20E877A38();
        v43 = operator new(8 * v42);
        v44 = (uint64_t *)&v43[8 * v39];
        *v44 = v28 | (v36 << 32);
        v26 = (uint64_t)(v44 + 1);
        v45 = v25 - v37;
        if (v25 == v37)
          goto LABEL_78;
LABEL_72:
        v46 = v45 - 8;
        if (v46 < 0x168)
        {
          v47 = v25;
          goto LABEL_74;
        }
        v49 = (v25 - 8 - v37) & 0xFFFFFFFFFFFFFFF8;
        if (&v43[v38 - 8 - v49] > &v43[v38 - 8])
        {
          v47 = v25;
          goto LABEL_74;
        }
        if (&v25[-v49 - 8] > v25 - 8)
        {
          v47 = v25;
          goto LABEL_74;
        }
        if ((unint64_t)(v25 - v43 - v38) < 0x20)
        {
          v47 = v25;
          goto LABEL_74;
        }
        v50 = (v46 >> 3) + 1;
        v51 = 8 * (v50 & 0x3FFFFFFFFFFFFFFCLL);
        v47 = &v25[-v51];
        v44 = (uint64_t *)((char *)v44 - v51);
        v52 = &v43[8 * v39 - 16];
        v53 = v25 - 16;
        v54 = v50 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v55 = *(_OWORD *)v53;
          *(v52 - 1) = *((_OWORD *)v53 - 1);
          *v52 = v55;
          v52 -= 2;
          v53 -= 32;
          v54 -= 4;
        }
        while (v54);
        if (v50 != (v50 & 0x3FFFFFFFFFFFFFFCLL))
        {
          do
          {
LABEL_74:
            v48 = *((_QWORD *)v47 - 1);
            v47 -= 8;
            *--v44 = v48;
          }
          while (v47 != v37);
        }
        v25 = (char *)__p;
        __p = v44;
        v93 = v26;
        v94 = &v43[8 * v42];
        if (v25)
          goto LABEL_79;
LABEL_80:
        v5 = a3;
LABEL_39:
        v93 = v26;
        v25 = (char *)v26;
LABEL_40:
        v24 = (uint64_t **)*v24;
        if (!v24)
        {
          v56 = (char *)__p;
          v7 = v85;
          v11 = v86;
          goto LABEL_93;
        }
      }
    }
    v25 = 0;
    v56 = 0;
LABEL_93:
    v57 = 126 - 2 * __clz((v25 - v56) >> 3);
    if (v25 == v56)
      v58 = 0;
    else
      v58 = v57;
    sub_20F409C88((unint64_t)v56, (int *)v25, v58, 1);
    v88 = *v11;
    *(_OWORD *)v89 = 0u;
    *(_OWORD *)v90 = 0u;
    v91 = 1065353216;
    sub_20EABA148((uint64_t)v89, &v88, &v88);
    v59 = (unsigned int *)__p;
    v60 = (unsigned int *)v93;
LABEL_99:
    if (v59 != v60)
    {
      v61 = (int8x8_t)a1[1];
      if (!*(_QWORD *)&v61)
        goto LABEL_159;
      v62 = *v59;
      v63 = (uint8x8_t)vcnt_s8(v61);
      v63.i16[0] = vaddlv_u8(v63);
      if (v63.u32[0] > 1uLL)
      {
        v64 = *v59;
        if (*(_QWORD *)&v61 <= v62)
          v64 = v62 % *(_QWORD *)&v61;
      }
      else
      {
        v64 = (v61.i32[0] - 1) & v62;
      }
      v65 = *(uint64_t ***)(*a1 + 8 * v64);
      if (!v65 || (v66 = *v65) == 0)
LABEL_159:
        sub_20E89FD20("unordered_map::at: key not found");
      if (v63.u32[0] < 2uLL)
      {
        v67 = *(_QWORD *)&v61 - 1;
        while (1)
        {
          v69 = v66[1];
          if (v69 == v62)
          {
            if (*((_DWORD *)v66 + 4) == (_DWORD)v62)
              goto LABEL_120;
          }
          else if ((v69 & v67) != v64)
          {
            goto LABEL_159;
          }
          v66 = (uint64_t *)*v66;
          if (!v66)
            goto LABEL_159;
        }
      }
      while (1)
      {
        v68 = v66[1];
        if (v68 == v62)
        {
          if (*((_DWORD *)v66 + 4) == (_DWORD)v62)
          {
LABEL_120:
            v70 = (void **)v90[0];
            if (v90[0])
            {
              v71 = v66[4];
              if (v71)
              {
                v72 = v71 - 1;
                v73 = v66[3];
                if ((v71 & (v71 - 1)) != 0)
                {
LABEL_132:
                  v78 = *((unsigned int *)v70 + 4);
                  v79 = v78;
                  if (v71 <= v78)
                    v79 = v78 % v71;
                  v80 = *(uint64_t **)(v73 + 8 * v79);
                  if (v80)
                  {
                    while (1)
                    {
                      v80 = (uint64_t *)*v80;
                      if (!v80)
                        break;
                      v81 = v80[1];
                      if (v81 == v78)
                      {
                        if (*((_DWORD *)v80 + 4) == (_DWORD)v78)
                        {
                          v70 = (void **)*v70;
                          if (v70)
                            goto LABEL_132;
                          goto LABEL_97;
                        }
                      }
                      else
                      {
                        if (v81 >= v71)
                          v81 %= v71;
                        if (v81 != v79)
                          break;
                      }
                    }
                  }
                }
                else
                {
                  v74 = v71 + 0xFFFFFFFF;
LABEL_124:
                  v75 = *((unsigned int *)v70 + 4);
                  v76 = *(uint64_t **)(v73 + 8 * (v74 & v75));
                  if (v76)
                  {
                    while (1)
                    {
                      v76 = (uint64_t *)*v76;
                      if (!v76)
                        break;
                      v77 = v76[1];
                      if (v77 == v75)
                      {
                        if (*((_DWORD *)v76 + 4) == (_DWORD)v75)
                        {
                          v70 = (void **)*v70;
                          if (v70)
                            goto LABEL_124;
                          goto LABEL_97;
                        }
                      }
                      else if ((v77 & v72) != (v74 & v75))
                      {
                        break;
                      }
                    }
                  }
                }
              }
            }
            else
            {
LABEL_97:
              sub_20EABA148((uint64_t)v89, v59, v59);
            }
            v59 += 2;
            goto LABEL_99;
          }
        }
        else
        {
          if (v68 >= *(_QWORD *)&v61)
            v68 %= *(_QWORD *)&v61;
          if (v68 != v64)
            goto LABEL_159;
        }
        v66 = (uint64_t *)*v66;
        if (!v66)
          goto LABEL_159;
      }
    }
    v82 = (uint64_t *)v90[0];
    if (v89 != (void **)v5 && v90[1] > (void *)*(_QWORD *)(v5 + 24))
    {
      *(_DWORD *)(v5 + 32) = v91;
      sub_20F40AFF0((_QWORD *)v5, v82, 0);
      v82 = (uint64_t *)v90[0];
    }
    if (v82)
    {
      do
      {
        v83 = *v82;
        operator delete(v82);
        v82 = (uint64_t *)v83;
      }
      while (v83);
    }
    v84 = v89[0];
    v89[0] = 0;
    if (v84)
      operator delete(v84);
    if (__p)
      operator delete(__p);
LABEL_14:
    v11 += 2;
    if (v11 != (unsigned int *)v7)
      continue;
    break;
  }
  v7 = v95;
LABEL_155:
  if (v7)
  {
    v96 = v7;
    operator delete(v7);
  }
}

void sub_20F409B9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  void **v24;
  _QWORD *v25;
  _QWORD *v26;
  void *v27;

  if (__p)
  {
    v24 = (void **)a11;
    operator delete(__p);
    v25 = *(_QWORD **)(a11 + 16);
    if (!v25)
      goto LABEL_6;
  }
  else
  {
    v24 = (void **)a11;
    v25 = *(_QWORD **)(a11 + 16);
    if (!v25)
    {
LABEL_6:
      v27 = *v24;
      *v24 = 0;
      if (v27)
        operator delete(v27);
      _Unwind_Resume(exception_object);
    }
  }
  do
  {
    v26 = (_QWORD *)*v25;
    operator delete(v25);
    v25 = v26;
  }
  while (v26);
  goto LABEL_6;
}

unint64_t sub_20F409C88(unint64_t result, int *a2, uint64_t a3, char a4)
{
  int *v7;
  int *v8;
  int *v9;
  unsigned int *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int *v15;
  unsigned int v16;
  int *v17;
  unsigned int v18;
  int *v19;
  unsigned int v20;
  int v21;
  int *v22;
  unsigned int v23;
  int *v24;
  unsigned int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int *v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  int *v39;
  int *v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int *v47;
  int v48;
  int v49;
  int *v50;
  int *v51;
  unint64_t v52;
  unsigned int v53;
  int *v54;
  int *v55;
  int *v56;
  unsigned int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int *v62;
  int v63;
  unint64_t v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  int *v73;
  int *v74;
  int *v75;
  unsigned int v76;
  int *v77;
  unsigned int v78;
  int *v79;
  int v80;
  int v81;
  unsigned int v82;
  unsigned int v83;
  BOOL v84;
  uint64_t v85;
  uint64_t v86;
  int *v87;
  unsigned int v88;
  int *v89;
  unsigned int v90;
  int *v91;
  int *v92;
  unsigned int v93;
  int v94;
  int v95;
  unsigned int v96;
  unsigned int v97;
  int v98;
  int v99;
  int *v100;
  unsigned int v101;
  int *v102;
  unsigned int v103;
  unsigned int v104;
  int v105;
  int v106;
  int v107;
  unsigned int v108;
  unsigned int v109;
  int v110;
  unsigned int v111;
  int v112;
  unsigned int v113;
  int v114;
  int v115;
  int *v116;
  BOOL v118;
  uint64_t v119;
  int *v120;
  int *v121;
  unsigned int v122;
  unsigned int v123;
  int v124;
  unsigned int v125;
  uint64_t v126;
  char *v127;
  int v128;
  int64_t v129;
  int64_t v130;
  BOOL v131;
  uint64_t v132;
  int *v133;
  int *v134;
  int v135;
  unsigned int v136;
  int *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int *v143;
  int *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  int *v149;
  int v150;
  unsigned int v151;
  int *v152;
  int v153;
  int v154;
  int v155;
  int *v156;
  unsigned int v157;
  unsigned int v158;
  uint64_t v159;
  uint64_t v160;
  int *v161;
  int *v162;
  unsigned int v163;
  int v164;
  int v165;

  v7 = (int *)result;
LABEL_2:
  v8 = a2 - 1;
  v9 = a2 - 3;
  v10 = (unsigned int *)(a2 - 5);
  v11 = v7;
  while (2)
  {
    v7 = v11;
    v12 = (char *)a2 - (char *)v11;
    v13 = ((char *)a2 - (char *)v11) >> 3;
    switch(v13)
    {
      case 0:
      case 1:
        return result;
      case 2:
        if (*(a2 - 1) > v11[1])
        {
          v98 = *v11;
          *v11 = *(a2 - 2);
          *(a2 - 2) = v98;
          v99 = v11[1];
          v11[1] = *(a2 - 1);
          *(a2 - 1) = v99;
        }
        return result;
      case 3:
        v100 = v11 + 1;
        v101 = v11[1];
        v102 = v11 + 3;
        v103 = v11[3];
        v104 = *(a2 - 1);
        if (v103 > v101)
        {
          v105 = *v11;
          if (v104 <= v103)
          {
            *v11 = v11[2];
            v11[1] = v103;
            v11[2] = v105;
            v11[3] = v101;
            if (*(a2 - 1) <= v101)
              return result;
            v11[2] = *(a2 - 2);
            *(a2 - 2) = v105;
            v100 = v11 + 3;
          }
          else
          {
            *v11 = *(a2 - 2);
            *(a2 - 2) = v105;
          }
          v102 = a2 - 1;
          goto LABEL_178;
        }
        if (v104 > v103)
        {
          v153 = v11[2];
          v11[2] = *(a2 - 2);
          *(a2 - 2) = v153;
          v154 = v11[3];
          v11[3] = *(a2 - 1);
          *(a2 - 1) = v154;
          if (v11[3] > v11[1])
          {
            v155 = *v11;
            *v11 = v11[2];
            v11[2] = v155;
LABEL_178:
            v165 = *v100;
            *v100 = *v102;
            *v102 = v165;
            return result;
          }
        }
        return result;
      case 4:
        return (unint64_t)sub_20F40AB6C(v11, v11 + 2, v11 + 4, a2 - 2);
      case 5:
        result = (unint64_t)sub_20F40AB6C(v11, v11 + 2, v11 + 4, v11 + 6);
        if (*(a2 - 1) > v11[7])
        {
          v106 = v11[6];
          v11[6] = *(a2 - 2);
          *(a2 - 2) = v106;
          v107 = v11[7];
          v11[7] = *(a2 - 1);
          *(a2 - 1) = v107;
          v108 = v11[7];
          v109 = v11[5];
          if (v108 > v109)
          {
            v110 = v11[6];
            v111 = v11[3];
            v112 = v11[4];
            v11[4] = v110;
            v11[5] = v108;
            v11[6] = v112;
            v11[7] = v109;
            if (v108 > v111)
            {
              v113 = v11[1];
              v114 = v11[2];
              v11[2] = v110;
              v11[3] = v108;
              v11[4] = v114;
              v11[5] = v111;
              if (v108 > v113)
              {
                v115 = *v11;
                *v11 = v110;
                v11[1] = v108;
                v11[2] = v115;
                v11[3] = v113;
              }
            }
          }
        }
        return result;
      default:
        if (v12 > 191)
        {
          if (!a3)
          {
            if (v11 != a2)
            {
              v129 = (unint64_t)(v13 - 2) >> 1;
              v130 = v129;
              do
              {
                if (v129 >= v130)
                {
                  v132 = (2 * v130) | 1;
                  v133 = &v11[2 * v132];
                  if (2 * v130 + 2 < v13)
                  {
                    v131 = v133[1] > v133[3];
                    v133 += 2 * v131;
                    if (v131)
                      v132 = 2 * v130 + 2;
                  }
                  v134 = &v11[2 * v130];
                  if (v133[1] <= v134[1])
                  {
                    v135 = *v134;
                    v136 = v134[1];
                    do
                    {
                      v137 = v134;
                      v134 = v133;
                      *v137 = *v133;
                      v137[1] = v133[1];
                      if (v129 < v132)
                        break;
                      v138 = (2 * v132) | 1;
                      v133 = &v11[2 * v138];
                      v139 = 2 * v132 + 2;
                      if (v139 < v13)
                      {
                        v131 = v133[1] > v133[3];
                        v133 += 2 * v131;
                        if (v131)
                          v138 = v139;
                      }
                      result = v133[1];
                      v132 = v138;
                    }
                    while (result <= v136);
                    *v134 = v135;
                    v134[1] = v136;
                  }
                }
                v131 = v130-- <= 0;
              }
              while (!v131);
              v140 = (unint64_t)v12 >> 3;
              do
              {
                v141 = 0;
                v142 = *(_QWORD *)v11;
                v143 = v11;
                do
                {
                  v144 = &v143[2 * v141 + 2];
                  v145 = (2 * v141) | 1;
                  v146 = 2 * v141 + 2;
                  if (v146 < v140)
                  {
                    v131 = v144[1] > v144[3];
                    v144 += 2 * v131;
                    if (v131)
                      v145 = v146;
                  }
                  *v143 = *v144;
                  v143[1] = v144[1];
                  v143 = v144;
                  v141 = v145;
                }
                while (v145 <= (uint64_t)((unint64_t)(v140 - 2) >> 1));
                if (v144 == a2 - 2)
                {
                  *(_QWORD *)v144 = v142;
                }
                else
                {
                  *v144 = *(a2 - 2);
                  v144[1] = *(a2 - 1);
                  *((_QWORD *)a2 - 1) = v142;
                  v147 = (char *)v144 - (char *)v11 + 8;
                  if (v147 >= 9)
                  {
                    v148 = (((unint64_t)v147 >> 3) - 2) >> 1;
                    v149 = &v11[2 * v148];
                    if (v149[1] > v144[1])
                    {
                      v150 = *v144;
                      v151 = v144[1];
                      do
                      {
                        v152 = v144;
                        v144 = v149;
                        *v152 = *v149;
                        v152[1] = v149[1];
                        if (!v148)
                          break;
                        v148 = (v148 - 1) >> 1;
                        v149 = &v11[2 * v148];
                      }
                      while (v149[1] > v151);
                      *v144 = v150;
                      v144[1] = v151;
                    }
                  }
                }
                a2 -= 2;
                v131 = v140-- <= 2;
              }
              while (!v131);
            }
            return result;
          }
          v14 = (unint64_t)v13 >> 1;
          v15 = &v11[2 * ((unint64_t)v13 >> 1)];
          v16 = *v8;
          if ((unint64_t)v12 < 0x401)
          {
            v22 = v11 + 1;
            v23 = v11[1];
            v24 = v15 + 1;
            v25 = v15[1];
            if (v23 <= v25)
            {
              if (v16 <= v23
                || (v31 = *v11,
                    *v11 = *(a2 - 2),
                    *(a2 - 2) = v31,
                    v32 = v11[1],
                    v11[1] = *(a2 - 1),
                    *(a2 - 1) = v32,
                    v11[1] <= *v24))
              {
LABEL_33:
                --a3;
                if ((a4 & 1) != 0)
                  goto LABEL_61;
                goto LABEL_60;
              }
              v33 = *v15;
              *v15 = *v11;
              *v11 = v33;
            }
            else
            {
              v26 = *v15;
              if (v16 <= v23)
              {
                *v15 = *v11;
                v15[1] = v23;
                *v11 = v26;
                v11[1] = v25;
                if (*v8 <= v25)
                  goto LABEL_33;
                *v11 = *(a2 - 2);
                *(a2 - 2) = v26;
                v24 = v11 + 1;
              }
              else
              {
                *v15 = *(a2 - 2);
                *(a2 - 2) = v26;
              }
              v22 = a2 - 1;
            }
            v48 = *v24;
            *v24 = *v22;
            *v22 = v48;
            goto LABEL_33;
          }
          v17 = v15 + 1;
          v18 = v15[1];
          v19 = v11 + 1;
          v20 = v11[1];
          if (v18 > v20)
          {
            v21 = *v11;
            if (v16 <= v18)
            {
              *v11 = *v15;
              v11[1] = v18;
              *v15 = v21;
              v15[1] = v20;
              if (*v8 <= v20)
                goto LABEL_23;
              *v15 = *(a2 - 2);
              *(a2 - 2) = v21;
              v19 = v15 + 1;
            }
            else
            {
              *v11 = *(a2 - 2);
              *(a2 - 2) = v21;
            }
            v30 = a2 - 1;
            goto LABEL_22;
          }
          if (v16 > v18)
          {
            v27 = *v15;
            *v15 = *(a2 - 2);
            *(a2 - 2) = v27;
            v28 = v15[1];
            v15[1] = *(a2 - 1);
            *(a2 - 1) = v28;
            if (v15[1] > *v19)
            {
              v29 = *v11;
              *v11 = *v15;
              *v15 = v29;
              v30 = v15 + 1;
LABEL_22:
              v34 = *v19;
              *v19 = *v30;
              *v30 = v34;
            }
          }
LABEL_23:
          v35 = &v11[2 * v14];
          v38 = *(v35 - 1);
          v36 = (unsigned int *)(v35 - 1);
          v37 = v38;
          v39 = (int *)(v36 - 1);
          v40 = v11 + 3;
          v41 = v11[3];
          v42 = *v9;
          if (v38 > v41)
          {
            v43 = v11[2];
            if (v42 <= v37)
            {
              v11[2] = *v39;
              v11[3] = v37;
              *v39 = v43;
              *v36 = v41;
              if (*v9 <= v41)
                goto LABEL_39;
              *v39 = *(a2 - 4);
              *(a2 - 4) = v43;
              v40 = (int *)v36;
            }
            else
            {
              v11[2] = *(a2 - 4);
              *(a2 - 4) = v43;
            }
            v47 = a2 - 3;
            goto LABEL_38;
          }
          if (v42 > v37)
          {
            v44 = *v39;
            *v39 = *(a2 - 4);
            *(a2 - 4) = v44;
            v45 = *v36;
            *v36 = *(a2 - 3);
            *(a2 - 3) = v45;
            if (*v36 > *v40)
            {
              v46 = v11[2];
              v11[2] = *v39;
              *v39 = v46;
              v47 = (int *)v36;
LABEL_38:
              v49 = *v40;
              *v40 = *v47;
              *v47 = v49;
            }
          }
LABEL_39:
          v50 = &v11[2 * v14];
          v53 = v50[3];
          v51 = v50 + 3;
          v52 = v53;
          v54 = v51 - 1;
          v56 = v11 + 5;
          v55 = (int *)v11[5];
          v57 = *v10;
          if (v53 > v55)
          {
            v58 = v11[4];
            if (v57 <= v52)
            {
              v11[4] = *v54;
              v11[5] = v52;
              *v54 = v58;
              *v51 = (int)v55;
              v52 = (unint64_t)v55;
              if (*v10 <= v55)
                goto LABEL_49;
              *v54 = *(a2 - 6);
              *(a2 - 6) = v58;
              v56 = v51;
            }
            else
            {
              v11[4] = *(a2 - 6);
              *(a2 - 6) = v58;
            }
            v62 = a2 - 5;
            goto LABEL_48;
          }
          if (v57 > v52)
          {
            v59 = *v54;
            *v54 = *(a2 - 6);
            *(a2 - 6) = v59;
            v60 = *v51;
            *v51 = *(a2 - 5);
            *(a2 - 5) = v60;
            v52 = *v51;
            if (v52 > *v56)
            {
              v61 = v11[4];
              v11[4] = *v54;
              *v54 = v61;
              v62 = v51;
LABEL_48:
              v63 = *v56;
              *v56 = *v62;
              *v62 = v63;
              v52 = *v51;
            }
          }
LABEL_49:
          result = *v17;
          v64 = *v36;
          if (result <= v64)
          {
            v65 = *v15;
            if (v52 <= result)
              goto LABEL_59;
            v66 = *v54;
            *v15 = *v54;
            v15[1] = v52;
            *v54 = v65;
            v54[1] = result;
            if (v52 > v64)
            {
              v67 = *v39;
              *v39 = v66;
              *v15 = v67;
LABEL_58:
              *v36 = v52;
              *v17 = v64;
              v65 = *v15;
              result = v11[2 * v14 + 1];
              goto LABEL_59;
            }
            result = v52;
            v65 = v66;
          }
          else
          {
            v65 = *v39;
            if (v52 > result)
            {
              *v39 = *v54;
              *v54 = v65;
LABEL_57:
              v17 = v51;
              goto LABEL_58;
            }
            *v39 = *v15;
            *v36 = result;
            *v15 = v65;
            v15[1] = v64;
            if (v52 > v64)
            {
              *v15 = *v54;
              *v54 = v65;
              v36 = (unsigned int *)(v15 + 1);
              goto LABEL_57;
            }
            result = v64;
          }
LABEL_59:
          v68 = *(_QWORD *)v11;
          *v11 = v65;
          v11[1] = result;
          *(_QWORD *)v15 = v68;
          --a3;
          if ((a4 & 1) != 0)
            goto LABEL_61;
LABEL_60:
          if (*(v11 - 1) <= v11[1])
          {
            v85 = *(_QWORD *)v11;
            v86 = HIDWORD(*(_QWORD *)v11);
            if (*v8 >= v86)
            {
              v89 = v11 + 2;
              do
              {
                v11 = v89;
                if (v89 >= a2)
                  break;
                v90 = v89[1];
                v89 += 2;
              }
              while (v90 >= v86);
            }
            else
            {
              v87 = v11;
              do
              {
                v11 = v87 + 2;
                v88 = v87[3];
                v87 += 2;
              }
              while (v88 >= v86);
            }
            v91 = a2;
            if (v11 < a2)
            {
              v92 = a2;
              do
              {
                v91 = v92 - 2;
                v93 = *(v92 - 1);
                v92 -= 2;
              }
              while (v93 < v86);
            }
            while (v11 < v91)
            {
              v94 = *v11;
              *v11 = *v91;
              *v91 = v94;
              v95 = v11[1];
              v11[1] = v91[1];
              v91[1] = v95;
              do
              {
                v96 = v11[3];
                v11 += 2;
              }
              while (v96 >= v86);
              do
              {
                v97 = *(v91 - 1);
                v91 -= 2;
              }
              while (v97 < v86);
            }
            if (v11 - 2 != v7)
            {
              *v7 = *(v11 - 2);
              v7[1] = *(v11 - 1);
            }
            a4 = 0;
            *(v11 - 2) = v85;
            *(v11 - 1) = v86;
            continue;
          }
LABEL_61:
          v69 = 0;
          v70 = *(_QWORD *)v11;
          v71 = HIDWORD(*(_QWORD *)v11);
          do
          {
            v72 = v11[v69 + 3];
            v69 += 2;
          }
          while (v72 > v71);
          v73 = &v11[v69];
          v74 = a2;
          if (v69 == 2)
          {
            v77 = a2;
            while (v73 < v77)
            {
              v75 = v77 - 2;
              v78 = *(v77 - 1);
              v77 -= 2;
              if (v78 > v71)
                goto LABEL_69;
            }
            v75 = v77;
            v11 = v73;
          }
          else
          {
            do
            {
              v75 = v74 - 2;
              v76 = *(v74 - 1);
              v74 -= 2;
            }
            while (v76 <= v71);
LABEL_69:
            v11 = v73;
            if (v73 < v75)
            {
              v79 = v75;
              do
              {
                v80 = *v11;
                *v11 = *v79;
                *v79 = v80;
                v81 = v11[1];
                v11[1] = v79[1];
                v79[1] = v81;
                do
                {
                  v82 = v11[3];
                  v11 += 2;
                }
                while (v82 > v71);
                do
                {
                  v83 = *(v79 - 1);
                  v79 -= 2;
                }
                while (v83 <= v71);
              }
              while (v11 < v79);
            }
          }
          if (v11 - 2 != v7)
          {
            *v7 = *(v11 - 2);
            v7[1] = *(v11 - 1);
          }
          *(v11 - 2) = v70;
          *(v11 - 1) = v71;
          if (v73 < v75)
            goto LABEL_80;
          v84 = sub_20F40A7F8(v7, v11 - 2);
          result = sub_20F40A7F8(v11, a2);
          if (!(_DWORD)result)
          {
            if (v84)
              continue;
LABEL_80:
            result = sub_20F409C88(v7, v11 - 2, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v11 - 2;
          if (v84)
            return result;
          goto LABEL_2;
        }
        v116 = v11 + 2;
        v118 = v11 == a2 || v116 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v118)
          {
            v119 = 0;
            v120 = v11;
            do
            {
              v122 = v120[3];
              v123 = v120[1];
              v120 = v116;
              if (v122 > v123)
              {
                v124 = *v116;
                v125 = v120[1];
                v126 = v119;
                do
                {
                  v127 = (char *)v11 + v126;
                  v128 = *(int *)((char *)v11 + v126 + 4);
                  *((_DWORD *)v127 + 2) = *(int *)((char *)v11 + v126);
                  *((_DWORD *)v127 + 3) = v128;
                  if (!v126)
                  {
                    v121 = v11;
                    goto LABEL_126;
                  }
                  v126 -= 8;
                }
                while (*((_DWORD *)v127 - 1) < v125);
                v121 = (int *)((char *)v11 + v126 + 8);
LABEL_126:
                *v121 = v124;
                v121[1] = v125;
              }
              v116 = v120 + 2;
              v119 += 8;
            }
            while (v120 + 2 != a2);
          }
        }
        else if (!v118)
        {
          v156 = v11 + 3;
          do
          {
            v157 = v7[3];
            v158 = v7[1];
            v7 = v116;
            if (v157 > v158)
            {
              v159 = *(_QWORD *)v116;
              v160 = HIDWORD(*(_QWORD *)v7);
              v161 = v156;
              do
              {
                v162 = v161;
                v163 = *(v161 - 4);
                *(v161 - 1) = *(v161 - 3);
                v164 = *(v161 - 2);
                v161 -= 2;
                *v162 = v164;
              }
              while (v163 < v160);
              *(v161 - 1) = v159;
              *v161 = v160;
            }
            v116 = v7 + 2;
            v156 += 2;
          }
          while (v7 + 2 != a2);
        }
        return result;
    }
  }
}

BOOL sub_20F40A7F8(int *a1, int *a2)
{
  uint64_t v4;
  _BOOL8 result;
  int v6;
  int v7;
  int *v8;
  unsigned int v9;
  int *v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unsigned int *v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int *v37;
  uint64_t v38;
  int v39;
  int *v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  _DWORD *v44;
  int v45;
  char *v46;

  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(a2 - 1) > a1[1])
      {
        v6 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v6;
        v7 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      v8 = a1 + 1;
      v9 = a1[1];
      v10 = a1 + 3;
      v11 = a1[3];
      v12 = *(a2 - 1);
      if (v11 > v9)
      {
        v13 = *a1;
        if (v12 <= v11)
        {
          *a1 = a1[2];
          a1[1] = v11;
          a1[2] = v13;
          a1[3] = v9;
          if (*(a2 - 1) <= v9)
            return result;
          a1[2] = *(a2 - 2);
          *(a2 - 2) = v13;
          v8 = a1 + 3;
        }
        else
        {
          *a1 = *(a2 - 2);
          *(a2 - 2) = v13;
        }
        v10 = a2 - 1;
        goto LABEL_27;
      }
      if (v12 > v11)
      {
        v30 = a1[2];
        a1[2] = *(a2 - 2);
        *(a2 - 2) = v30;
        v31 = a1[3];
        a1[3] = *(a2 - 1);
        *(a2 - 1) = v31;
        if (a1[3] > a1[1])
        {
          v32 = *a1;
          *a1 = a1[2];
          a1[2] = v32;
LABEL_27:
          v36 = *v8;
          *v8 = *v10;
          *v10 = v36;
          return result;
        }
      }
      return result;
    case 4:
      sub_20F40AB6C(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_20F40AB6C(a1, a1 + 2, a1 + 4, a1 + 6);
      if (*(a2 - 1) <= a1[7])
        return 1;
      v20 = a1[6];
      a1[6] = *(a2 - 2);
      *(a2 - 2) = v20;
      v21 = a1[7];
      a1[7] = *(a2 - 1);
      *(a2 - 1) = v21;
      v22 = a1[7];
      v23 = a1[5];
      if (v22 <= v23)
        return 1;
      v24 = a1[6];
      v25 = a1[3];
      v26 = a1[4];
      a1[4] = v24;
      a1[5] = v22;
      a1[6] = v26;
      a1[7] = v23;
      if (v22 <= v25)
        return 1;
      v27 = a1[1];
      v28 = a1[2];
      a1[2] = v24;
      a1[3] = v22;
      a1[4] = v28;
      a1[5] = v25;
      if (v22 <= v27)
        return 1;
      v29 = *a1;
      *a1 = v24;
      a1[1] = v22;
      a1[2] = v29;
      a1[3] = v27;
      return 1;
    default:
      v14 = a1[1];
      v15 = (unsigned int *)(a1 + 3);
      v16 = a1[3];
      v17 = a1[5];
      if (v16 > v14)
      {
        v18 = *a1;
        if (v17 <= v16)
        {
          *a1 = a1[2];
          a1[1] = v16;
          a1[2] = v18;
          a1[3] = v14;
          if (v17 <= v14)
            goto LABEL_32;
          a1[2] = a1[4];
          a1[4] = v18;
          v19 = (unsigned int *)(a1 + 3);
        }
        else
        {
          *a1 = a1[4];
          a1[4] = v18;
          v19 = (unsigned int *)(a1 + 1);
        }
        v15 = (unsigned int *)(a1 + 5);
        goto LABEL_31;
      }
      if (v17 > v16)
      {
        v33 = a1[2];
        v34 = a1[4];
        a1[2] = v34;
        a1[3] = v17;
        a1[4] = v33;
        a1[5] = v16;
        if (v17 > v14)
        {
          v35 = *a1;
          *a1 = v34;
          a1[2] = v35;
          v19 = (unsigned int *)(a1 + 1);
LABEL_31:
          *v19 = v17;
          *v15 = v14;
        }
      }
LABEL_32:
      v37 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v38 = 0;
      v39 = 0;
      v40 = a1 + 4;
      while (v37[1] <= v40[1])
      {
LABEL_41:
        v40 = v37;
        v38 += 8;
        v37 += 2;
        if (v37 == a2)
          return 1;
      }
      v41 = *v37;
      v42 = v37[1];
      v43 = v38;
      do
      {
        v44 = (int *)((char *)a1 + v43);
        v45 = *(int *)((char *)a1 + v43 + 20);
        v44[6] = *(int *)((char *)a1 + v43 + 16);
        v44[7] = v45;
        if (v43 == -16)
        {
          *a1 = v41;
          a1[1] = v42;
          if (++v39 != 8)
            goto LABEL_41;
          return v37 + 2 == a2;
        }
        v43 -= 8;
      }
      while (v44[3] < v42);
      v46 = (char *)a1 + v43;
      *((_DWORD *)v46 + 6) = v41;
      *((_DWORD *)v46 + 7) = v42;
      if (++v39 != 8)
        goto LABEL_41;
      return v37 + 2 == a2;
  }
}

int *sub_20F40AB6C(int *result, int *a2, _DWORD *a3, _DWORD *a4)
{
  unsigned int v4;
  _DWORD *v5;
  unsigned int *v6;
  unsigned int v7;
  int v8;
  int *v9;
  int v10;
  int v11;
  int *v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;

  v4 = a2[1];
  v5 = result + 1;
  v6 = a3 + 1;
  v7 = a3[1];
  if (v4 <= result[1])
  {
    if (v7 > v4)
    {
      v10 = *a2;
      *a2 = *a3;
      *a3 = v10;
      v7 = a2[1];
      a2[1] = a3[1];
      a3[1] = v7;
      if (a2[1] > *v5)
      {
        v11 = *result;
        *result = *a2;
        *a2 = v11;
        v9 = result + 1;
        v12 = a2 + 1;
LABEL_10:
        v15 = *v9;
        *v9 = *v12;
        *v12 = v15;
        v7 = *v6;
      }
    }
  }
  else
  {
    v8 = *result;
    if (v7 > v4)
    {
      *result = *a3;
      *a3 = v8;
      v9 = result + 1;
LABEL_9:
      v12 = a3 + 1;
      goto LABEL_10;
    }
    *result = *a2;
    *a2 = v8;
    v13 = result[1];
    result[1] = a2[1];
    a2[1] = v13;
    v7 = *v6;
    if (*v6 > v13)
    {
      v14 = *a2;
      *a2 = *a3;
      *a3 = v14;
      v9 = a2 + 1;
      goto LABEL_9;
    }
  }
  if (a4[1] > v7)
  {
    v16 = *a3;
    *a3 = *a4;
    *a4 = v16;
    v17 = a3[1];
    a3[1] = a4[1];
    a4[1] = v17;
    if (a3[1] > a2[1])
    {
      v18 = *a2;
      *a2 = *a3;
      *a3 = v18;
      v19 = a2[1];
      a2[1] = a3[1];
      a3[1] = v19;
      if (a2[1] > *v5)
      {
        v20 = *result;
        *result = *a2;
        *a2 = v20;
        v21 = result[1];
        result[1] = a2[1];
        a2[1] = v21;
      }
    }
  }
  return result;
}

char *sub_20F40ACE4(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (char *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = *((_QWORD *)v10 + 1);
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = *(char **)v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = *((_QWORD *)v10 + 1);
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = (_QWORD *)(a1 + 16);
  v10 = (char *)operator new(0x40uLL);
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = v6;
  *((_DWORD *)v10 + 4) = *a3;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *((_DWORD *)v10 + 14) = 1065353216;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v6 = v3;
  }
  else
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v21 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        v20 = std::__next_prime(v20);
      }
      else
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
      }
      if (prime <= v20)
        prime = v20;
      if (prime < v7)
LABEL_35:
        sub_20E8D2B3C(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v6 %= v7;
    }
    else
    {
      v6 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
  if (v24)
  {
    *(_QWORD *)v10 = *v24;
LABEL_58:
    *v24 = v10;
    goto LABEL_59;
  }
  *(_QWORD *)v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v23 + 8 * v6) = v13;
  if (*(_QWORD *)v10)
  {
    v25 = *(_QWORD *)(*(_QWORD *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v25 >= v7)
        v25 %= v7;
    }
    else
    {
      v25 &= v7 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_20F40AFDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EDB1EC4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F40AFF0(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t i;
  unsigned int *v8;
  unsigned int *v9;
  _DWORD *v10;
  uint64_t v11;
  unsigned int *v12;

  v6 = a1[1];
  if (!v6)
    goto LABEL_7;
  for (i = 0; i != v6; *(_QWORD *)(*a1 + 8 * i++) = 0)
    ;
  v8 = (unsigned int *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      v8[4] = *((_DWORD *)a2 + 4);
      v9 = *(unsigned int **)v8;
      sub_20EC1D308(a1, v8);
      a2 = (uint64_t *)*a2;
      v8 = v9;
      if (!v9)
        goto LABEL_7;
    }
    do
    {
      v12 = *(unsigned int **)v8;
      operator delete(v8);
      v8 = v12;
    }
    while (v12);
  }
  else
  {
LABEL_7:
    while (a2 != a3)
    {
      v10 = operator new(0x18uLL);
      *(_QWORD *)v10 = 0;
      v11 = *((unsigned int *)a2 + 4);
      v10[4] = v11;
      *((_QWORD *)v10 + 1) = v11;
      sub_20EC1D308(a1, v10);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_20F40B0CC(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_20F40B0EC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20F40B100(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20F40B114(uint64_t a1, __int128 *a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  char v12;
  __int128 v13;
  void *v14;
  size_t v15;
  _DWORD *v16;
  _QWORD *v17;
  float v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  unint64_t v71;
  _BYTE *v72;
  _BYTE *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  __int128 *v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  _BYTE *v91;
  uint64_t v92;
  char **v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  _BYTE *v104;
  uint64_t v105;
  char **v106;
  char *v107;
  char *v108;
  char *v109;
  char *v110;
  char *v111;
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  _BYTE *v117;
  uint64_t v118;
  char **v119;
  char *v120;
  char *v121;
  char *v122;
  char *v123;
  char *v124;
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  _BYTE *v130;
  uint64_t v131;
  char **v132;
  _BYTE *v133;
  _BYTE *v134;
  char *v135;
  char *v136;
  char *v137;
  char *v138;
  uint64_t v139;
  _BYTE *v140;
  uint64_t v141;
  char **v142;
  _BYTE *v143;
  _BYTE *v144;
  char *v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  __int128 *v154;
  uint64_t v155;
  __int128 v156;
  uint64_t v157;
  uint64_t v158;
  _BYTE *v159;
  uint64_t v160;
  char **v161;
  _BYTE *v162;
  _BYTE *v163;
  char *v164;
  uint64_t v165;
  char *v166;
  char *v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  char *v171;
  char *v172;
  __int128 *v173;
  uint64_t v174;
  __int128 v175;
  uint64_t v176;
  _QWORD *v177;
  _QWORD *v178;
  _QWORD *v179;
  _QWORD *v180;
  _QWORD *v181;
  unint64_t v182;
  __int128 v183[14];
  void *__p;
  void *v185;

  if (*(_BYTE *)(a1 + 112)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureMatchingUnsanitized/src/DoGTracker.cpp", 42, (uint64_t)"!allocated_", 11, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| !*((_DWORD *)a2 + 8)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureMatchingUnsanitized/src/DoGTracker.cpp", 43, (uint64_t)"config.image_width > 0", 22, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| !*((_DWORD *)a2 + 9)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureMatchingUnsanitized/src/DoGTracker.cpp",
         44,
         (uint64_t)"config.image_height > 0",
         23,
         (uint64_t)"",
         0,
         (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v6 = *a2;
  v7 = a2[1];
  v8 = a2[2];
  *(_OWORD *)(a1 + 168) = a2[3];
  *(_OWORD *)(a1 + 152) = v8;
  *(_OWORD *)(a1 + 136) = v7;
  *(_OWORD *)(a1 + 120) = v6;
  v9 = a2[4];
  v10 = a2[5];
  v11 = a2[6];
  *(_OWORD *)(a1 + 232) = a2[7];
  *(_OWORD *)(a1 + 216) = v11;
  *(_OWORD *)(a1 + 200) = v10;
  *(_OWORD *)(a1 + 184) = v9;
  if ((__int128 *)(a1 + 120) != a2)
  {
    v12 = *((_BYTE *)a2 + 151);
    if (*(char *)(a1 + 271) < 0)
    {
      if (v12 >= 0)
        v14 = a2 + 8;
      else
        v14 = (void *)*((_QWORD *)a2 + 16);
      if (v12 >= 0)
        v15 = *((unsigned __int8 *)a2 + 151);
      else
        v15 = *((_QWORD *)a2 + 17);
      sub_20E867CBC((void **)(a1 + 248), v14, v15);
    }
    else if ((*((_BYTE *)a2 + 151) & 0x80) != 0)
    {
      sub_20E867BF8((_QWORD *)(a1 + 248), *((void **)a2 + 16), *((_QWORD *)a2 + 17));
    }
    else
    {
      v13 = a2[8];
      *(_QWORD *)(a1 + 264) = *((_QWORD *)a2 + 18);
      *(_OWORD *)(a1 + 248) = v13;
    }
  }
  *(_WORD *)(a1 + 272) = *((_WORD *)a2 + 76);
  sub_20EDFEFA8(a1 + 616);
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_DWORD *)(a1 + 632) = 1028443341;
  *(_DWORD *)(a1 + 640) = 1;
  *(_QWORD *)(a1 + 656) = 0;
  *(_QWORD *)(a1 + 648) = 0;
  *(_QWORD *)(a1 + 664) = 0;
  v16 = operator new(4uLL);
  *(_QWORD *)(a1 + 648) = v16;
  *v16++ = 0;
  *(_QWORD *)(a1 + 664) = v16;
  *(_QWORD *)(a1 + 656) = v16;
  *(_QWORD *)(a1 + 752) = 0;
  *(_QWORD *)(a1 + 768) = 0;
  *(_QWORD *)(a1 + 760) = 0;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 732) = 0u;
  *(_BYTE *)(a1 + 776) = 1;
  if (*(_BYTE *)(a1 + 237))
  {
    sub_20FD66938(*((unsigned __int8 *)a2 + 58), *((unsigned int *)a2 + 8), *((unsigned int *)a2 + 9), *((_QWORD *)a2 + 6), *((_DWORD *)a2 + 22), *((_DWORD *)a2 + 23), *((_DWORD *)a2 + 24), *((_QWORD *)a2 + 9), (uint64_t)v183, *((float *)a2 + 26), *((float *)a2 + 27), *((float *)a2 + 28), *((_QWORD *)a2 + 10), *((_QWORD *)a2 + 1), *((_WORD *)a2 + 28), HIBYTE(*((_WORD *)a2 + 28)), *(_WORD *)((char *)a2 + 59), HIBYTE(*(_WORD *)((char *)a2 + 59)), *(_DWORD *)((char *)a2 + 61),
      BYTE1(*(_DWORD *)((char *)a2 + 61)),
      BYTE2(*(_DWORD *)((char *)a2 + 61)),
      HIBYTE(*(_DWORD *)((char *)a2 + 61)),
      *((_BYTE *)a2 + 116),
      *((_BYTE *)a2 + 100),
      (uint64_t)(a2 + 8));
    v17 = (_QWORD *)(a1 + 280);
    if (*(_BYTE *)(a1 + 608))
    {
      v17 = sub_20FD40A18(v17);
      *(_BYTE *)(a1 + 608) = 0;
    }
    *(_QWORD *)(a1 + 280) = &off_24CA06CB8;
    *(_OWORD *)(a1 + 288) = 0u;
    *(_OWORD *)(a1 + 304) = 0u;
    *(_OWORD *)(a1 + 320) = 0u;
    *(_QWORD *)(a1 + 336) = 0;
    *(_DWORD *)(a1 + 352) = 1;
    *(_BYTE *)(a1 + 356) = 1;
    *(_QWORD *)(a1 + 360) = 320;
    *(_OWORD *)(a1 + 368) = xmmword_2103B44A0;
    *(_OWORD *)(a1 + 384) = xmmword_210378500;
    *(_BYTE *)(a1 + 400) = 1;
    *(_OWORD *)(a1 + 404) = xmmword_2102DB6D0;
    *(_QWORD *)((char *)v17 + 140) = 0x410000004141999ALL;
    *(_QWORD *)(a1 + 432) = 5;
    *(_QWORD *)(a1 + 440) = 0x41F0000041200000;
    *(int64x2_t *)(a1 + 448) = vdupq_n_s64(1uLL);
    *(_OWORD *)(a1 + 464) = xmmword_2102DB6E0;
    *(_WORD *)(a1 + 480) = 0;
    *(_DWORD *)(a1 + 484) = 1;
    *(_WORD *)(a1 + 488) = 1;
    *(_QWORD *)(a1 + 496) = 36;
    *(_QWORD *)(a1 + 504) = 0x3F4CCCCD00000005;
    *(_QWORD *)(a1 + 512) = 0x3FC0000040400000;
    *(_QWORD *)(a1 + 520) = 20000;
    *(_DWORD *)(a1 + 528) = 0;
    *(_WORD *)(a1 + 532) = 256;
    *(_OWORD *)(a1 + 536) = xmmword_2102DB6F0;
    *(_QWORD *)(a1 + 552) = 0x3F96E9DD3F5425F2;
    *(_DWORD *)(a1 + 560) = 0;
    *(_QWORD *)(a1 + 568) = 10;
    *(_QWORD *)(a1 + 576) = 10;
    *(_QWORD *)(a1 + 600) = 0;
    *(_QWORD *)(a1 + 584) = 0;
    *(_QWORD *)(a1 + 592) = 0;
    *(_BYTE *)(a1 + 608) = 1;
    sub_20FD40C08((uint64_t)v17, v183, a3);
    if (__p)
    {
      v185 = __p;
      operator delete(__p);
    }
  }
  if (*(char *)(a1 + 271) < 0)
  {
    if (!*(_QWORD *)(a1 + 256))
      goto LABEL_27;
    goto LABEL_26;
  }
  if (*(_BYTE *)(a1 + 271))
LABEL_26:
    sub_20FD66B64(a1 + 856, (__int128 *)(a1 + 248));
LABEL_27:
  v18 = *(double *)(a1 + 144);
  sub_20EE00E4C(a1 + 616, *((_DWORD *)a2 + 8), *((_DWORD *)a2 + 9), *(_QWORD *)(a1 + 128), 0x12u, v18);
  if (*(_DWORD *)a2)
    v19 = 2;
  else
    v19 = 1;
  v20 = *(_QWORD *)(a1 + 792);
  v21 = *(_QWORD *)(a1 + 784);
  v22 = 0xAAAAAAAAAAAAAAABLL * ((v20 - v21) >> 3);
  v182 = v19;
  if (v19 <= v22)
  {
    if (v19 < v22)
    {
      v23 = v21 + 24 * v19;
      if (v20 != v23)
      {
        v24 = *(_QWORD *)(a1 + 792);
        do
        {
          v26 = *(void **)(v24 - 24);
          v24 -= 24;
          v25 = v26;
          if (v26)
          {
            *(_QWORD *)(v20 - 16) = v25;
            operator delete(v25);
          }
          v20 = v24;
        }
        while (v24 != v23);
      }
      *(_QWORD *)(a1 + 792) = v23;
    }
  }
  else
  {
    sub_20F411E58(a1 + 784, v19 - v22);
  }
  v27 = *(_QWORD *)(a1 + 816);
  v28 = *(_QWORD *)(a1 + 808);
  v29 = 0xAAAAAAAAAAAAAAABLL * ((v27 - v28) >> 3);
  if (v182 <= v29)
  {
    if (v182 < v29)
    {
      v30 = v28 + 24 * v182;
      if (v27 != v30)
      {
        v31 = *(_QWORD *)(a1 + 816);
        do
        {
          v33 = *(void **)(v31 - 24);
          v31 -= 24;
          v32 = v33;
          if (v33)
          {
            *(_QWORD *)(v27 - 16) = v32;
            operator delete(v32);
          }
          v27 = v31;
        }
        while (v31 != v30);
      }
      *(_QWORD *)(a1 + 816) = v30;
    }
  }
  else
  {
    sub_20F411E58(a1 + 808, v182 - v29);
  }
  v34 = *(_QWORD *)(a1 + 840);
  v35 = *(_QWORD *)(a1 + 832);
  v36 = 0xAAAAAAAAAAAAAAABLL * ((v34 - v35) >> 3);
  if (v182 <= v36)
  {
    if (v182 < v36)
    {
      v37 = v35 + 24 * v182;
      if (v34 != v37)
      {
        v38 = *(_QWORD *)(a1 + 840);
        do
        {
          v40 = *(void **)(v38 - 24);
          v38 -= 24;
          v39 = v40;
          if (v40)
          {
            *(_QWORD *)(v34 - 16) = v39;
            operator delete(v39);
          }
          v34 = v38;
        }
        while (v38 != v37);
      }
      *(_QWORD *)(a1 + 840) = v37;
    }
  }
  else
  {
    sub_20F411E58(a1 + 832, v182 - v36);
  }
  v42 = *(_QWORD *)(a1 + 8);
  v41 = *(_QWORD *)(a1 + 16);
  v43 = 0xAAAAAAAAAAAAAAABLL * ((v41 - v42) >> 3);
  if (v182 <= v43)
  {
    if (v182 < v43)
    {
      v44 = v42 + 24 * v182;
      if (v41 != v44)
      {
        v45 = *(_QWORD *)(a1 + 16);
        do
        {
          v47 = *(void **)(v45 - 24);
          v45 -= 24;
          v46 = v47;
          if (v47)
          {
            *(_QWORD *)(v41 - 16) = v46;
            operator delete(v46);
          }
          v41 = v45;
        }
        while (v45 != v44);
      }
      *(_QWORD *)(a1 + 16) = v44;
    }
  }
  else
  {
    sub_20F0B7BF8(a1 + 8, v182 - v43);
  }
  v49 = *(_QWORD *)(a1 + 32);
  v48 = *(_QWORD *)(a1 + 40);
  v50 = 0xAAAAAAAAAAAAAAABLL * ((v48 - v49) >> 3);
  if (v182 <= v50)
  {
    if (v182 < v50)
    {
      v51 = v49 + 24 * v182;
      if (v48 != v51)
      {
        v52 = *(_QWORD *)(a1 + 40);
        do
        {
          v54 = *(void **)(v52 - 24);
          v52 -= 24;
          v53 = v54;
          if (v54)
          {
            *(_QWORD *)(v48 - 16) = v53;
            operator delete(v53);
          }
          v48 = v52;
        }
        while (v52 != v51);
      }
      *(_QWORD *)(a1 + 40) = v51;
    }
  }
  else
  {
    sub_20F0B7BF8(a1 + 32, v182 - v50);
  }
  v55 = *(_QWORD *)(a1 + 56);
  v56 = *(_QWORD *)(a1 + 64);
  v57 = (v56 - v55) >> 5;
  if (v182 <= v57)
  {
    if (v182 < v57)
    {
      v58 = v55 + 32 * v182;
      while (v56 != v58)
      {
        if (*(_BYTE *)(v56 - 8))
        {
          v59 = *(void **)(v56 - 32);
          if (v59)
          {
            *(_QWORD *)(v56 - 24) = v59;
            operator delete(v59);
          }
        }
        v56 -= 32;
      }
      *(_QWORD *)(a1 + 64) = v58;
    }
  }
  else
  {
    sub_20F41202C((uint64_t *)(a1 + 56), v182 - v57);
  }
  v61 = *(_QWORD *)(a1 + 80);
  v60 = *(_QWORD *)(a1 + 88);
  v62 = 0xAAAAAAAAAAAAAAABLL * ((v60 - v61) >> 3);
  v177 = (_QWORD *)(a1 + 80);
  if (v182 <= v62)
  {
    if (v182 < v62)
    {
      v63 = v61 + 24 * v182;
      if (v60 != v63)
      {
        v64 = *(_QWORD *)(a1 + 88);
        do
        {
          v66 = *(void **)(v64 - 24);
          v64 -= 24;
          v65 = v66;
          if (v66)
          {
            *(_QWORD *)(v60 - 16) = v65;
            operator delete(v65);
          }
          v60 = v64;
        }
        while (v64 != v63);
      }
      *(_QWORD *)(a1 + 88) = v63;
    }
  }
  else
  {
    sub_20F0B7BF8(a1 + 80, v182 - v62);
  }
  v178 = (_QWORD *)(a1 + 32);
  v179 = (_QWORD *)(a1 + 8);
  v180 = (_QWORD *)(a1 + 832);
  v181 = (_QWORD *)(a1 + 808);
  v67 = 0;
  do
  {
    if (!v67)
      goto LABEL_115;
    v68 = *(_QWORD *)(a1 + 56) + 32 * v67;
    if (*(_BYTE *)(v68 + 24))
    {
      v69 = *(void **)v68;
      if (*(_QWORD *)v68)
      {
        *(_QWORD *)(v68 + 8) = v69;
        operator delete(v69);
      }
    }
    *(_QWORD *)v68 = 0;
    *(_QWORD *)(v68 + 8) = 0;
    *(_QWORD *)(v68 + 16) = 0;
    *(_BYTE *)(v68 + 24) = 1;
    v70 = *(_QWORD *)(a1 + 56) + 32 * v67;
    v71 = *(_QWORD *)(a1 + 128);
    v72 = *(_BYTE **)v70;
    if (v71 > (uint64_t)(*(_QWORD *)(v70 + 16) - *(_QWORD *)v70) >> 3)
    {
      if (v71 >> 61)
        sub_20E867F44();
      v73 = *(_BYTE **)(v70 + 8);
      v74 = 8 * v71;
      v75 = (char *)operator new(8 * v71);
      v76 = v73 - v72;
      v77 = &v75[(v73 - v72) & 0xFFFFFFFFFFFFFFF8];
      v78 = v77;
      if (v73 == v72)
        goto LABEL_112;
      if ((unint64_t)(v76 - 8) >= 0x58)
      {
        v78 = &v75[(v73 - v72) & 0xFFFFFFFFFFFFFFF8];
        if (v73 - v75 - (v76 & 0xFFFFFFFFFFFFFFF8) >= 0x20)
        {
          v79 = v76 >> 3;
          v80 = ((unint64_t)(v76 - 8) >> 3) + 1;
          v81 = 8 * (v80 & 0x3FFFFFFFFFFFFFFCLL);
          v82 = &v73[-v81];
          v78 = &v77[-v81];
          v83 = &v75[8 * v79 - 16];
          v84 = (__int128 *)(v73 - 16);
          v85 = v80 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v86 = *v84;
            *((_OWORD *)v83 - 1) = *(v84 - 1);
            *(_OWORD *)v83 = v86;
            v83 -= 32;
            v84 -= 2;
            v85 -= 4;
          }
          while (v85);
          v73 = v82;
          if (v80 == (v80 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_112:
            *(_QWORD *)v70 = v78;
            *(_QWORD *)(v70 + 8) = v77;
            *(_QWORD *)(v70 + 16) = &v75[v74];
            if (v72)
              operator delete(v72);
            goto LABEL_114;
          }
        }
      }
      else
      {
        v78 = &v75[(v73 - v72) & 0xFFFFFFFFFFFFFFF8];
      }
      do
      {
        v87 = *((_QWORD *)v73 - 1);
        v73 -= 8;
        *((_QWORD *)v78 - 1) = v87;
        v78 -= 8;
      }
      while (v73 != v72);
      goto LABEL_112;
    }
LABEL_114:
    if (!*(_BYTE *)(a1 + 238))
      goto LABEL_97;
LABEL_115:
    v88 = *(_QWORD *)(a1 + 784);
    v89 = v88 + 24 * v67;
    v90 = *(_QWORD *)(a1 + 128);
    v91 = *(_BYTE **)v89;
    if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(v89 + 16) - *(_QWORD *)v89) >> 3) < v90)
    {
      if (v90 > 0x2E8BA2E8BA2E8BALL)
        goto LABEL_168;
      v92 = v88 + 24 * v67;
      v95 = *(char **)(v92 + 8);
      v93 = (char **)(v92 + 8);
      v94 = v95;
      v96 = (char *)operator new(88 * v90);
      v97 = &v96[v95 - v91];
      v98 = v97;
      if (v95 != v91)
      {
        v98 = &v96[v94 - v91];
        do
        {
          v99 = *((_QWORD *)v94 - 11);
          v94 -= 88;
          *((_QWORD *)v98 - 11) = v99;
          v98 -= 88;
          *(_OWORD *)(v98 + 8) = *(_OWORD *)(v94 + 8);
          v100 = *(_OWORD *)(v94 + 24);
          v101 = *(_OWORD *)(v94 + 40);
          v102 = *(_OWORD *)(v94 + 56);
          *(_OWORD *)(v98 + 72) = *(_OWORD *)(v94 + 72);
          *(_OWORD *)(v98 + 56) = v102;
          *(_OWORD *)(v98 + 40) = v101;
          *(_OWORD *)(v98 + 24) = v100;
        }
        while (v94 != v91);
      }
      *(_QWORD *)v89 = v98;
      *v93 = v97;
      *(_QWORD *)(v89 + 16) = &v96[88 * v90];
      if (v91)
      {
        operator delete(v91);
        v90 = *(_QWORD *)(a1 + 128);
      }
    }
    v103 = *v181 + 24 * v67;
    v104 = *(_BYTE **)v103;
    if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(v103 + 16) - *(_QWORD *)v103) >> 3) < v90)
    {
      if (v90 > 0x2E8BA2E8BA2E8BALL)
        goto LABEL_168;
      v105 = *v181 + 24 * v67;
      v108 = *(char **)(v105 + 8);
      v106 = (char **)(v105 + 8);
      v107 = v108;
      v109 = (char *)operator new(88 * v90);
      v110 = &v109[v108 - v104];
      v111 = v110;
      if (v108 != v104)
      {
        v111 = &v109[v107 - v104];
        do
        {
          v112 = *((_QWORD *)v107 - 11);
          v107 -= 88;
          *((_QWORD *)v111 - 11) = v112;
          v111 -= 88;
          *(_OWORD *)(v111 + 8) = *(_OWORD *)(v107 + 8);
          v113 = *(_OWORD *)(v107 + 24);
          v114 = *(_OWORD *)(v107 + 40);
          v115 = *(_OWORD *)(v107 + 56);
          *(_OWORD *)(v111 + 72) = *(_OWORD *)(v107 + 72);
          *(_OWORD *)(v111 + 56) = v115;
          *(_OWORD *)(v111 + 40) = v114;
          *(_OWORD *)(v111 + 24) = v113;
        }
        while (v107 != v104);
      }
      *(_QWORD *)v103 = v111;
      *v106 = v110;
      *(_QWORD *)(v103 + 16) = &v109[88 * v90];
      if (v104)
      {
        operator delete(v104);
        v90 = *(_QWORD *)(a1 + 128);
      }
    }
    v116 = *v180 + 24 * v67;
    v117 = *(_BYTE **)v116;
    if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(v116 + 16) - *(_QWORD *)v116) >> 3) < v90)
    {
      if (v90 > 0x2E8BA2E8BA2E8BALL)
LABEL_168:
        sub_20E867F44();
      v118 = *v180 + 24 * v67;
      v121 = *(char **)(v118 + 8);
      v119 = (char **)(v118 + 8);
      v120 = v121;
      v122 = (char *)operator new(88 * v90);
      v123 = &v122[v121 - v117];
      v124 = v123;
      if (v121 != v117)
      {
        v124 = &v122[v120 - v117];
        do
        {
          v125 = *((_QWORD *)v120 - 11);
          v120 -= 88;
          *((_QWORD *)v124 - 11) = v125;
          v124 -= 88;
          *(_OWORD *)(v124 + 8) = *(_OWORD *)(v120 + 8);
          v126 = *(_OWORD *)(v120 + 24);
          v127 = *(_OWORD *)(v120 + 40);
          v128 = *(_OWORD *)(v120 + 56);
          *(_OWORD *)(v124 + 72) = *(_OWORD *)(v120 + 72);
          *(_OWORD *)(v124 + 56) = v128;
          *(_OWORD *)(v124 + 40) = v127;
          *(_OWORD *)(v124 + 24) = v126;
        }
        while (v120 != v117);
      }
      *(_QWORD *)v116 = v124;
      *v119 = v123;
      *(_QWORD *)(v116 + 16) = &v122[88 * v90];
      if (v117)
      {
        operator delete(v117);
        v90 = *(_QWORD *)(a1 + 128);
      }
    }
    v129 = *v179 + 24 * v67;
    v130 = *(_BYTE **)v129;
    if (v90 > (uint64_t)(*(_QWORD *)(v129 + 16) - *(_QWORD *)v129) >> 4)
    {
      if (v90 >> 60)
        sub_20E867F44();
      v131 = *v179 + 24 * v67;
      v134 = *(_BYTE **)(v131 + 8);
      v132 = (char **)(v131 + 8);
      v133 = v134;
      v135 = (char *)operator new(16 * v90);
      v136 = &v135[(v134 - v130) & 0xFFFFFFFFFFFFFFF0];
      v137 = v136;
      if (v134 != v130)
      {
        v138 = &v135[(v133 - v130) & 0xFFFFFFFFFFFFFFF0];
        do
        {
          v137 = v138 - 16;
          *((_OWORD *)v138 - 1) = *((_OWORD *)v133 - 1);
          v133 -= 16;
          v138 -= 16;
        }
        while (v133 != v130);
      }
      *(_QWORD *)v129 = v137;
      *v132 = v136;
      *(_QWORD *)(v129 + 16) = &v135[16 * v90];
      if (v130)
      {
        operator delete(v130);
        v90 = *(_QWORD *)(a1 + 128);
      }
    }
    v139 = *v178 + 24 * v67;
    v140 = *(_BYTE **)v139;
    if (v90 > (uint64_t)(*(_QWORD *)(v139 + 16) - *(_QWORD *)v139) >> 3)
    {
      if (v90 >> 61)
        sub_20E867F44();
      v141 = *v178 + 24 * v67;
      v144 = *(_BYTE **)(v141 + 8);
      v142 = (char **)(v141 + 8);
      v143 = v144;
      v145 = (char *)operator new(8 * v90);
      v146 = v144 - v140;
      v147 = &v145[(v144 - v140) & 0xFFFFFFFFFFFFFFF8];
      v148 = v147;
      if (v144 == v140)
        goto LABEL_153;
      if ((unint64_t)(v146 - 8) >= 0x58)
      {
        v148 = &v145[(v143 - v140) & 0xFFFFFFFFFFFFFFF8];
        if ((unint64_t)(v143 - &v145[v146 & 0xFFFFFFFFFFFFFFF8]) >= 0x20)
        {
          v149 = v146 >> 3;
          v150 = ((unint64_t)(v146 - 8) >> 3) + 1;
          v151 = 8 * (v150 & 0x3FFFFFFFFFFFFFFCLL);
          v152 = &v143[-v151];
          v148 = &v147[-v151];
          v153 = &v145[8 * v149 - 16];
          v154 = (__int128 *)(v143 - 16);
          v155 = v150 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v156 = *v154;
            *((_OWORD *)v153 - 1) = *(v154 - 1);
            *(_OWORD *)v153 = v156;
            v153 -= 32;
            v154 -= 2;
            v155 -= 4;
          }
          while (v155);
          v143 = v152;
          if (v150 == (v150 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_153:
            *(_QWORD *)v139 = v148;
            *v142 = v147;
            *(_QWORD *)(v139 + 16) = &v145[8 * v90];
            if (v140)
            {
              operator delete(v140);
              v90 = *(_QWORD *)(a1 + 128);
            }
            goto LABEL_155;
          }
        }
      }
      else
      {
        v148 = &v145[(v143 - v140) & 0xFFFFFFFFFFFFFFF8];
      }
      do
      {
        v157 = *((_QWORD *)v143 - 1);
        v143 -= 8;
        *((_QWORD *)v148 - 1) = v157;
        v148 -= 8;
      }
      while (v143 != v140);
      goto LABEL_153;
    }
LABEL_155:
    v158 = *v177 + 24 * v67;
    v159 = *(_BYTE **)v158;
    if (v90 <= (uint64_t)(*(_QWORD *)(v158 + 16) - *(_QWORD *)v158) >> 3)
      goto LABEL_97;
    if (v90 >> 61)
      sub_20E867F44();
    v160 = *v177 + 24 * v67;
    v163 = *(_BYTE **)(v160 + 8);
    v161 = (char **)(v160 + 8);
    v162 = v163;
    v164 = (char *)operator new(8 * v90);
    v165 = v163 - v159;
    v166 = &v164[(v163 - v159) & 0xFFFFFFFFFFFFFFF8];
    v167 = v166;
    if (v163 != v159)
    {
      if ((unint64_t)(v165 - 8) < 0x58)
      {
        v167 = &v164[(v162 - v159) & 0xFFFFFFFFFFFFFFF8];
        do
        {
LABEL_164:
          v176 = *((_QWORD *)v162 - 1);
          v162 -= 8;
          *((_QWORD *)v167 - 1) = v176;
          v167 -= 8;
        }
        while (v162 != v159);
        goto LABEL_165;
      }
      v167 = &v164[(v162 - v159) & 0xFFFFFFFFFFFFFFF8];
      if ((unint64_t)(v162 - &v164[v165 & 0xFFFFFFFFFFFFFFF8]) < 0x20)
        goto LABEL_164;
      v168 = v165 >> 3;
      v169 = ((unint64_t)(v165 - 8) >> 3) + 1;
      v170 = 8 * (v169 & 0x3FFFFFFFFFFFFFFCLL);
      v171 = &v162[-v170];
      v167 = &v166[-v170];
      v172 = &v164[8 * v168 - 16];
      v173 = (__int128 *)(v162 - 16);
      v174 = v169 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v175 = *v173;
        *((_OWORD *)v172 - 1) = *(v173 - 1);
        *(_OWORD *)v172 = v175;
        v172 -= 32;
        v173 -= 2;
        v174 -= 4;
      }
      while (v174);
      v162 = v171;
      if (v169 != (v169 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_164;
    }
LABEL_165:
    *(_QWORD *)v158 = v167;
    *v161 = v166;
    *(_QWORD *)(v158 + 16) = &v164[8 * v90];
    if (v159)
      operator delete(v159);
LABEL_97:
    ++v67;
  }
  while ((_DWORD)v182 != (_DWORD)v67);
  *(_BYTE *)(a1 + 112) = 1;
}

void sub_20F40BEFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F40BF18(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  sub_20F40C068(a1, 0, *a2, **a4, *(_QWORD *)(a1 + 8), *(uint64_t **)(a1 + 80), *(_QWORD **)(a1 + 32));
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  if (v8 - v7 == 48)
  {
    *(_QWORD *)(v7 + 32) = *(_QWORD *)(v7 + 24);
    *(_QWORD *)(*(_QWORD *)(a1 + 80) + 32) = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 24);
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 32);
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
  }
  if (a2[1] - *a2 == 288 && *(_BYTE *)(a1 + 238))
  {
    sub_20F40C068(a1, 1u, *a2 + 144, (*a4)[1], v7 + 24, (uint64_t *)(*(_QWORD *)(a1 + 80) + 24), (_QWORD *)(*(_QWORD *)(a1 + 32) + 24));
    v7 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
  }
  v9 = *(_QWORD *)(a1 + 848);
  v10 = *(_OWORD *)(a1 + 816);
  v11 = *(_OWORD *)(a1 + 784);
  v12 = *(_OWORD *)(a1 + 800);
  *(_OWORD *)(a1 + 784) = *(_OWORD *)(a1 + 832);
  *(_OWORD *)(a1 + 824) = v12;
  *(_OWORD *)(a1 + 840) = v10;
  *(_QWORD *)(a1 + 800) = v9;
  *(_OWORD *)(a1 + 808) = v11;
  if (v8 - v7 == 48 && a2[1] - *a2 == 288)
  {
    v13 = *(_QWORD *)(a1 + 56);
    if (!*(_BYTE *)(v13 + 56))
      sub_20E866B34();
    sub_20F40C068(a1, 0, *a2 + 144, (*a4)[1], v7 + 24, (uint64_t *)(*(_QWORD *)(a1 + 80) + 24), (_QWORD *)(v13 + 32));
  }
}

void sub_20F40C068(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, _QWORD *a7)
{
  uint64_t (**v14)(uint64_t);
  char v15;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  uint64_t v17;
  int v18;
  const char *v19;

  if (!*(_BYTE *)(a1 + 237))
  {
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureMatchingUnsanitized/src/DoGTracker.cpp", 123, (uint64_t)"", 0, (uint64_t)"No feature detector", 19, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  v15 = 0;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v17 = 0;
  v14 = &off_24CA1E140;
  v18 = 3;
  v19 = "[DoGTracker] DoGAndFREAKGenerator::Generate() time elapsed";
  (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)(a1 + 280) + 16))(a1 + 280, a3, 0, a4);
  sub_210215814((uint64_t)&v14);
  LOBYTE(v14) = 0;
  BYTE4(v14) = 0;
  sub_20F40D414(a1, a2, a4, 0, (uint64_t)&v14, a5, a6, a7);
}

void sub_20F40C174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_210215814((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20F40C188(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t (**v12)(uint64_t);
  char v13;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  uint64_t v15;
  int v16;
  const char *v17;

  if (!*(_BYTE *)(a1 + 237))
  {
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureMatchingUnsanitized/src/DoGTracker.cpp", 201, (uint64_t)"", 0, (uint64_t)"No feature detector", 19, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  v13 = 0;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v15 = 0;
  v12 = &off_24CA1E140;
  v16 = 3;
  v17 = "[DoGTracker] DoGAndFREAKGenerator::Generate() time elapsed";
  v7 = *a2;
  if (a2[1] != *a2)
  {
    v8 = 0;
    v9 = a1 + 280;
    v10 = 1;
    do
    {
      if (v10 - 1 >= 0x10000
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 39, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      (*(void (**)(uint64_t, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v9 + 16))(v9, v7 + 144 * v8, v8 << 32, *(_QWORD *)(*a4 + 8 * v8));
      v8 = v10;
      v7 = *a2;
      ++v10;
    }
    while (0x8E38E38E38E38E39 * ((a2[1] - *a2) >> 4) > v8);
  }
  return sub_210215814((uint64_t)&v12);
}

void sub_20F40C300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_210215814((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20F40C314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_210215814((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20F40C328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  size_t v39;
  const char *v40;
  uint64_t v41;
  unsigned __int8 v42;
  const char *v43;
  size_t v44;
  void *v45;
  unint64_t v46;
  const char *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  size_t v57;
  std::__shared_weak_count_vtbl *v58;
  std::__shared_weak_count *v59;
  std::__shared_weak_count *v60;
  unint64_t *p_shared_owners;
  unint64_t v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  void *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  _QWORD v92[3];
  int v93;
  const char *v94;
  int v95;
  const char *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  uint64_t v99;
  void *object;
  void *v101[2];
  __int128 v102;
  void *__p[2];
  unint64_t v104;
  char v105;
  uint64_t v106;
  uint64_t v107;

  v15 = **(_QWORD **)a2;
  if (*(_BYTE *)(a9 + 8))
  {
    if (*(_BYTE *)(v15 + 184))
    {
      v16 = *(_QWORD *)(v15 + 88) - *(_QWORD *)(v15 + 80);
      if (v16)
        v17 = v16 == *(_QWORD *)(v15 + 168) - *(_QWORD *)(v15 + 160);
      else
        v17 = 0;
      if (!v17)
        goto LABEL_14;
      v18 = (uint64_t)(*(_QWORD *)(v15 + 64) - *(_QWORD *)(v15 + 56)) >> 5;
      if (v18 != v16 >> 6)
        goto LABEL_14;
    }
    else
    {
      if (*(_QWORD *)(v15 + 160) != *(_QWORD *)(v15 + 168))
        goto LABEL_14;
      v18 = (uint64_t)(*(_QWORD *)(v15 + 64) - *(_QWORD *)(v15 + 56)) >> 5;
      if (v18 != (uint64_t)(*(_QWORD *)(v15 + 88) - *(_QWORD *)(v15 + 80)) >> 6)
        goto LABEL_14;
    }
    v19 = *(_QWORD *)(v15 + 16);
    if (v19 <= v18)
    {
LABEL_16:
      sub_20F40CE80(a1, v15, v18 - v19, *(_QWORD *)(a1 + 784), *(_QWORD *)(a1 + 8), *(uint64_t **)(a1 + 80));
      v20 = *(_QWORD **)(a1 + 32);
      if (v20 != *(_QWORD **)a9)
        sub_20E86811C(v20, **(char ***)a9, *(char **)(*(_QWORD *)a9 + 8), (uint64_t)(*(_QWORD *)(*(_QWORD *)a9 + 8) - **(_QWORD **)a9) >> 3);
      goto LABEL_18;
    }
LABEL_14:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/PointDescriptorStore.h", 184, (uint64_t)"HasValidSize()", 14, (uint64_t)"Descriptor size mis-match", 25, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_128;
    }
    v18 = (uint64_t)(*(_QWORD *)(v15 + 64) - *(_QWORD *)(v15 + 56)) >> 5;
    v19 = *(_QWORD *)(v15 + 16);
    v15 = **(_QWORD **)a2;
    goto LABEL_16;
  }
  sub_20F40D414(a1, 0, v15, a3, a6, *(_QWORD *)(a1 + 8), *(uint64_t **)(a1 + 80), *(_QWORD **)(a1 + 32));
LABEL_18:
  v22 = *(_QWORD *)(a1 + 8);
  v21 = *(_QWORD *)(a1 + 16);
  if (v21 - v22 == 48)
  {
    *(_QWORD *)(v22 + 32) = *(_QWORD *)(v22 + 24);
    v23 = *(_QWORD *)(a1 + 80);
    v25 = *(_QWORD *)(v23 + 24);
    v24 = (uint64_t *)(v23 + 24);
    v24[1] = v25;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 32);
    v26 = *(_QWORD *)(a1 + 32);
    v28 = *(_QWORD *)(v26 + 24);
    v27 = (_QWORD *)(v26 + 24);
    v27[1] = v28;
    if (*(_BYTE *)(a1 + 238))
    {
      sub_20F40D414(a1, 1u, *(_QWORD *)(*(_QWORD *)a2 + 8), a4, a7, v22 + 24, v24, v27);
      v22 = *(_QWORD *)(a1 + 8);
      v21 = *(_QWORD *)(a1 + 16);
    }
  }
  v29 = *(_QWORD *)(a1 + 848);
  v30 = *(_OWORD *)(a1 + 816);
  v31 = *(_OWORD *)(a1 + 784);
  v32 = *(_OWORD *)(a1 + 800);
  *(_OWORD *)(a1 + 784) = *(_OWORD *)(a1 + 832);
  *(_OWORD *)(a1 + 824) = v32;
  *(_OWORD *)(a1 + 840) = v30;
  *(_QWORD *)(a1 + 800) = v29;
  *(_OWORD *)(a1 + 808) = v31;
  if (v21 - v22 != 48)
    return;
  if (*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32) != 48
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureMatchingUnsanitized/src/DoGTracker.cpp", 291, (uint64_t)"curr_to_prev_matches_.size() == 2", 33, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_128;
  }
  v33 = *(_QWORD *)(a1 + 64);
  if (v33 - *(_QWORD *)(a1 + 56) != 64)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureMatchingUnsanitized/src/DoGTracker.cpp", 292, (uint64_t)"sec_to_pri_matches_.size() == 2", 31, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_128;
    }
    v33 = *(_QWORD *)(a1 + 64);
  }
  if (!*(_BYTE *)(v33 - 8)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureMatchingUnsanitized/src/DoGTracker.cpp", 293, (uint64_t)"sec_to_pri_matches_.back().has_value()", 38, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80) != 48&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureMatchingUnsanitized/src/DoGTracker.cpp", 294, (uint64_t)"standard_deviations_.size() == 2", 32, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureMatchingUnsanitized/src/DoGTracker.cpp",
         295,
         (uint64_t)"features.size() == 2",
         20,
         (uint64_t)"",
         0,
         (void (*)(void **))sub_21023DDB0))
  {
LABEL_128:
    abort();
  }
  if (*(_BYTE *)(a1 + 272))
  {
    sub_20F40DB38(&v99);
    if (**(int **)(v99 + 56) > 4)
      return;
    v34 = *(unsigned __int8 *)(v99 + 72);
    v35 = sub_20E8C31DC(v99, "OSLogSurrogateAppender", 1, 0);
    v36 = v35;
    if (!v34 && !v35)
      return;
    v92[0] = &v99;
    v92[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v92[2] = std::chrono::system_clock::now().__d_.__rep_;
    v93 = 4;
    v94 = "unknown file";
    v95 = 301;
    v97 = 0;
    v98 = 0;
    v96 = "unknown function";
    v37 = v99;
    v38 = v99 + 16;
    if (*(char *)(v99 + 39) < 0)
    {
      v40 = *(const char **)(v99 + 16);
      v39 = *(_QWORD *)(v99 + 24);
    }
    else
    {
      v39 = *(unsigned __int8 *)(v99 + 39);
      v40 = (const char *)(*(_QWORD *)v92[0] + 16);
    }
    v42 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v42 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
      if ((_BYTE)v102 && SHIBYTE(v101[1]) < 0)
        operator delete(object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v43 = byte_254A4A4F8;
    else
      v43 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v44 = byte_254A4A4F8[23];
    else
      v44 = *(_QWORD *)&byte_254A4A4F8[8];
    object = os_log_create(v43, v40);
    v45 = v101;
    if (v44 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v44 >= 0x17)
    {
      v46 = v36;
      v47 = v40;
      v48 = v37;
      v49 = v34;
      v50 = v38;
      v51 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v44 | 7) != 0x17)
        v51 = v44 | 7;
      v52 = v51 + 1;
      v45 = operator new(v51 + 1);
      v101[1] = (void *)v44;
      *(_QWORD *)&v102 = v52 | 0x8000000000000000;
      v101[0] = v45;
      v38 = v50;
      v34 = v49;
      v37 = v48;
      v40 = v47;
      v36 = v46;
    }
    else
    {
      BYTE7(v102) = v44;
      if (!v44)
      {
LABEL_57:
        *((_BYTE *)v45 + v44) = 0;
        BYTE8(v102) = 1;
        v53 = __p;
        if (v39 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v39 >= 0x17)
        {
          v54 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v39 | 7) != 0x17)
            v54 = v39 | 7;
          v55 = v54 + 1;
          v53 = operator new(v54 + 1);
          __p[1] = (void *)v39;
          v104 = v55 | 0x8000000000000000;
          __p[0] = v53;
        }
        else
        {
          HIBYTE(v104) = v39;
          if (!v39)
            goto LABEL_65;
        }
        memmove(v53, v40, v39);
LABEL_65:
        *((_BYTE *)v53 + v39) = 0;
        v105 = 1;
        v56 = object;
        if (SHIBYTE(v104) < 0)
          operator delete(__p[0]);
        if (BYTE8(v102) && SBYTE7(v102) < 0)
          operator delete(v101[0]);
        if (object)
          os_release(object);
        if (v36 && *(_QWORD *)(v36 + 24))
        {
          v57 = _os_log_pack_size();
          v58 = (std::__shared_weak_count_vtbl *)operator new(v57, (std::align_val_t)8uLL);
          v59 = (std::__shared_weak_count *)operator new();
          v60 = v59;
          v59->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v59->__shared_owners_;
          v59->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v59->__shared_weak_owners_ = 0;
          v59[1].__vftable = v58;
          object = v58;
          v101[0] = v58;
          v101[1] = v59;
          do
            v62 = __ldxr(p_shared_owners);
          while (__stxr(v62 + 1, p_shared_owners));
          v102 = 0uLL;
          __p[0] = 0;
          do
            v63 = __ldaxr(p_shared_owners);
          while (__stlxr(v63 - 1, p_shared_owners));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v60);
          }
          v64 = object;
          *(_WORD *)_os_log_pack_fill() = 0;
          v65 = operator new();
          v66 = *(unsigned __int8 *)(v37 + 39);
          if ((v66 & 0x80u) == 0)
            v67 = v38;
          else
            v67 = *(_QWORD *)(v37 + 16);
          if ((v66 & 0x80u) != 0)
            v66 = *(_QWORD *)(v37 + 24);
          *(_QWORD *)v65 = v64;
          *(_OWORD *)(v65 + 8) = *(_OWORD *)v101;
          v101[0] = 0;
          v101[1] = 0;
          *(_OWORD *)(v65 + 24) = v102;
          v102 = 0uLL;
          *(_QWORD *)(v65 + 40) = v67;
          *(_QWORD *)(v65 + 48) = v66;
          *(_BYTE *)(v65 + 56) = 16;
          v106 = 0;
          v107 = v65;
          (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v36 + 24) + 40))(*(_QWORD *)(v36 + 24), &v107);
          v68 = v107;
          v107 = 0;
          if (v68)
          {
            v69 = *(std::__shared_weak_count **)(v68 + 32);
            if (v69)
            {
              v70 = (unint64_t *)&v69->__shared_owners_;
              do
                v71 = __ldaxr(v70);
              while (__stlxr(v71 - 1, v70));
              if (!v71)
              {
                ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                std::__shared_weak_count::__release_weak(v69);
              }
            }
            v72 = *(std::__shared_weak_count **)(v68 + 16);
            if (v72)
            {
              v73 = (unint64_t *)&v72->__shared_owners_;
              do
                v74 = __ldaxr(v73);
              while (__stlxr(v74 - 1, v73));
              if (!v74)
              {
                ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
                std::__shared_weak_count::__release_weak(v72);
              }
            }
            MEMORY[0x212BC6398](v68, 0x10F0C40B62ED6C6);
            v75 = v106;
            v106 = 0;
            if (v75)
            {
              v76 = *(std::__shared_weak_count **)(v75 + 32);
              if (v76)
              {
                v77 = (unint64_t *)&v76->__shared_owners_;
                do
                  v78 = __ldaxr(v77);
                while (__stlxr(v78 - 1, v77));
                if (!v78)
                {
                  ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                  std::__shared_weak_count::__release_weak(v76);
                }
              }
              v79 = *(std::__shared_weak_count **)(v75 + 16);
              if (v79)
              {
                v80 = (unint64_t *)&v79->__shared_owners_;
                do
                  v81 = __ldaxr(v80);
                while (__stlxr(v81 - 1, v80));
                if (!v81)
                {
                  ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                  std::__shared_weak_count::__release_weak(v79);
                }
              }
              MEMORY[0x212BC6398](v75, 0x10F0C40B62ED6C6);
            }
          }
          v82 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
          if (*((_QWORD *)&v102 + 1))
          {
            v83 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
            do
              v84 = __ldaxr(v83);
            while (__stlxr(v84 - 1, v83));
            if (!v84)
            {
              ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
              std::__shared_weak_count::__release_weak(v82);
            }
          }
          v85 = (std::__shared_weak_count *)v101[1];
          if (v101[1])
          {
            v86 = (unint64_t *)((char *)v101[1] + 8);
            do
              v87 = __ldaxr(v86);
            while (__stlxr(v87 - 1, v86));
            if (!v87)
            {
              ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
              std::__shared_weak_count::__release_weak(v85);
            }
          }
        }
        else
        {
          os_log_type_enabled(v56, OS_LOG_TYPE_ERROR);
          LOWORD(object) = 0;
          v88 = (void *)_os_log_send_and_compose_impl();
          if (v88)
            free(v88);
        }
        if (v34)
        {
          sub_20E8C003C((uint64_t)v92, "[Features Tracking] stereo matching is disabled");
          sub_20E863570((uint64_t)v92);
        }
        sub_20E863570((uint64_t)v92);
        v89 = v98;
        if (v98)
        {
          v90 = (unint64_t *)&v98->__shared_owners_;
          do
            v91 = __ldaxr(v90);
          while (__stlxr(v91 - 1, v90));
          if (!v91)
          {
            ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
            std::__shared_weak_count::__release_weak(v89);
          }
        }
        return;
      }
    }
    memmove(v45, v43, v44);
    goto LABEL_57;
  }
  v41 = *(_QWORD *)(a1 + 56);
  if (!*(_BYTE *)(v41 + 56))
    sub_20E866B34();
  sub_20F40D414(a1, 0, *(_QWORD *)(*(_QWORD *)a2 + 8), a5, a8, *(_QWORD *)(a1 + 8) + 24, (uint64_t *)(*(_QWORD *)(a1 + 80) + 24), (_QWORD *)(v41 + 32));
}

void sub_20F40CD6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a27)
  {
    if (a26 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20F40CDAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  sub_20E86E8C4((uint64_t *)(v3 - 96));
  sub_20E86E8C4((uint64_t *)(v3 - 104));
  sub_20E86E658((uint64_t)va1);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F40CDE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  MEMORY[0x212BC6398](v3, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F40CE0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F40CE28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F40CE3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *object,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a28 && a27 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20F40CE80(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  __int128 *v35;
  char v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v47;
  _BOOL4 v49;
  uint64_t v50;
  unint64_t v51;
  BOOL v52;
  _QWORD *v54;

  kdebug_trace();
  if (*(_BYTE *)(a2 + 184))
  {
    v11 = *(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80);
    if (v11)
      v12 = v11 == *(_QWORD *)(a2 + 168) - *(_QWORD *)(a2 + 160);
    else
      v12 = 0;
    if (!v12)
      goto LABEL_14;
LABEL_9:
    v13 = (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 5;
    if (v13 == v11 >> 6 && *(_QWORD *)(a2 + 16) <= v13)
      goto LABEL_16;
    goto LABEL_14;
  }
  if (*(_QWORD *)(a2 + 160) == *(_QWORD *)(a2 + 168))
  {
    v11 = *(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80);
    goto LABEL_9;
  }
LABEL_14:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/PointDescriptorStore.h", 184, (uint64_t)"HasValidSize()", 14, (uint64_t)"Descriptor size mis-match", 25, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_77;
  }
  v13 = (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 5;
LABEL_16:
  v15 = (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 4;
  if (v13 <= v15)
  {
    if (v13 < v15)
      *(_QWORD *)(a5 + 8) = *(_QWORD *)a5 + 16 * v13;
  }
  else
  {
    sub_20E99C28C((char **)a5, v13 - v15);
  }
  if (*(_BYTE *)(a2 + 184))
  {
    v16 = *(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80);
    if (!v16)
      goto LABEL_30;
    if (v16 != *(_QWORD *)(a2 + 168) - *(_QWORD *)(a2 + 160))
      goto LABEL_30;
    v17 = (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 5;
    if (v17 != v16 >> 6)
      goto LABEL_30;
  }
  else
  {
    if (*(_QWORD *)(a2 + 160) != *(_QWORD *)(a2 + 168))
      goto LABEL_30;
    v17 = (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 5;
    if (v17 != (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 6)
      goto LABEL_30;
  }
  if (*(_QWORD *)(a2 + 16) <= v17)
  {
    v18 = *a6;
    v19 = (a6[1] - *a6) >> 3;
    v20 = v17 >= v19;
    v21 = v17 - v19;
    if (v17 <= v19)
      goto LABEL_32;
    goto LABEL_29;
  }
LABEL_30:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/PointDescriptorStore.h", 184, (uint64_t)"HasValidSize()", 14, (uint64_t)"Descriptor size mis-match", 25, (void (*)(void **))sub_21023DDB0))
  {
LABEL_77:
    abort();
  }
  v17 = (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 5;
  v18 = *a6;
  v22 = (a6[1] - *a6) >> 3;
  v20 = v17 >= v22;
  v21 = v17 - v22;
  if (v17 <= v22)
  {
LABEL_32:
    if (!v20)
      a6[1] = v18 + 8 * v17;
    goto LABEL_34;
  }
LABEL_29:
  sub_20E93D8FC((uint64_t)a6, v21);
LABEL_34:
  v23 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  if (a3 <= v23)
  {
    if (a3 < v23)
      *(_QWORD *)(a4 + 8) = *(_QWORD *)a4 + 88 * a3;
  }
  else
  {
    sub_20EDFEB54((void **)a4, a3 - v23);
  }
  v54 = (_QWORD *)a4;
  if (*(_BYTE *)(a1 + 273))
    v24 = *(_QWORD *)(a1 + 856) != *(_QWORD *)(a1 + 864);
  else
    v24 = 0;
  v25 = a1;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = *(double *)(v25 + 160) * *(double *)(v25 + 104);
  while (1)
  {
    if (*(_BYTE *)(a2 + 184))
    {
      v44 = *(_QWORD *)(a2 + 80);
      v43 = *(_QWORD *)(a2 + 88);
      v45 = v43 - v44;
      if (v43 != v44 && v45 == *(_QWORD *)(a2 + 168) - *(_QWORD *)(a2 + 160))
        goto LABEL_55;
    }
    else if (*(_QWORD *)(a2 + 160) == *(_QWORD *)(a2 + 168))
    {
      v45 = *(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80);
LABEL_55:
      v31 = *(_QWORD *)(a2 + 56);
      v47 = (*(_QWORD *)(a2 + 64) - v31) >> 5;
      if (v47 == v45 >> 6 && *(_QWORD *)(a2 + 16) <= v47)
        goto LABEL_62;
    }
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/PointDescriptorStore.h", 184, (uint64_t)"HasValidSize()", 14, (uint64_t)"Descriptor size mis-match", 25, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v31 = *(_QWORD *)(a2 + 56);
    v47 = (*(_QWORD *)(a2 + 64) - v31) >> 5;
LABEL_62:
    if (v29 >= v47)
      break;
    if (v29 < a3)
    {
      if (*(_BYTE *)(a2 + 184))
        v49 = 0;
      else
        v49 = v24;
      if (v49)
      {
        kdebug_trace();
        v50 = *(_QWORD *)(a2 + 160);
        v51 = (*(_QWORD *)(a2 + 168) - v50) >> 6;
        if (a3 > v51)
        {
          sub_20ED406CC((char **)(a2 + 160), a3 - v51);
          v50 = *(_QWORD *)(a2 + 160);
        }
        sub_20F40DFC4((unint64_t *)(*(_QWORD *)(a2 + 80) + v28), (unint64_t *)(v50 + v28));
        kdebug_trace();
        v31 = *(_QWORD *)(a2 + 56);
      }
      v32 = v31 + v27;
      v33 = (int)*(float *)v32 | ((unint64_t)(int)*(float *)(v32 + 4) << 32);
      v34 = 80;
      if (v24)
        v34 = 160;
      v35 = (__int128 *)(*(_QWORD *)(a2 + v34) + v28);
      v36 = *(_BYTE *)(v32 + 24);
      v37 = *(_QWORD *)(v32 + 16);
      v38 = *v35;
      v39 = v35[1];
      v40 = v35[2];
      v41 = v35[3];
      v42 = *v54 + v26;
      *(_QWORD *)v42 = v33;
      *(_OWORD *)(v42 + 56) = v41;
      *(_OWORD *)(v42 + 40) = v40;
      *(_OWORD *)(v42 + 24) = v39;
      *(_OWORD *)(v42 + 8) = v38;
      *(_BYTE *)(v42 + 72) = v36;
      *(_QWORD *)(v42 + 76) = v37;
      *(_DWORD *)(v42 + 84) = 220;
      v31 = *(_QWORD *)(a2 + 56);
    }
    *(float64x2_t *)(*(_QWORD *)a5 + 16 * v29) = vcvtq_f64_f32(*(float32x2_t *)(v31 + v27));
    *(double *)(*a6 + 8 * v29++) = v30 * *(float *)(*(_QWORD *)(a2 + 56) + v27 + 20);
    v28 += 64;
    v27 += 32;
    v26 += 88;
  }
  if (*(_BYTE *)(a2 + 184))
    v52 = 0;
  else
    v52 = v24;
  if (v52)
    *(_BYTE *)(a2 + 184) = 1;
  return kdebug_trace();
}

void sub_20F40D3CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20F40D414(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, _QWORD *a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int **v25;
  uint64_t v26;
  int **v27;
  int *v28;
  int *v29;
  int *v30;
  uint64_t v31;
  unint64_t v32;
  float64x2_t v33;
  uint64_t v34;
  float64x2_t v35;
  int8x16_t v36;
  int8x16_t v39;
  double v44;
  double v45;
  uint64_t v46;
  double v47;
  char *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  _BYTE *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  _OWORD *v61;
  __int128 *v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  float v75;
  float v76;
  void **v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unsigned int v86;
  char *v87;
  _QWORD *v88;
  unsigned int v89;
  int8x16_t v91;
  uint64_t (**v92)(uint64_t);
  char v93;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  uint64_t v95;
  int v96;
  void **v97;
  void *__p[2];
  char v99;
  char *v100;
  char *v101;
  char *v102;
  char *v103;
  char *v104;
  char *v105;
  unint64_t v106;

  v14 = a2;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 792) - *(_QWORD *)(a1 + 784)) >> 3) <= a2
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureMatchingUnsanitized/src/DoGTracker.cpp", 335, (uint64_t)"stream_index < cur_descriptors_.size()", 38, (uint64_t)"Stream index out of range", 25, (void (*)(void **))sub_21023DDB0))
  {
LABEL_87:
    abort();
  }
  v88 = a8;
  if (*(_BYTE *)(a3 + 184))
  {
    v16 = *(_QWORD *)(a3 + 80);
    v15 = *(_QWORD *)(a3 + 88);
    v17 = v15 - v16;
    _ZF = v15 != v16 && v17 == *(_QWORD *)(a3 + 168) - *(_QWORD *)(a3 + 160);
    if (!_ZF)
      goto LABEL_16;
  }
  else
  {
    if (*(_QWORD *)(a3 + 160) != *(_QWORD *)(a3 + 168))
      goto LABEL_16;
    v17 = *(_QWORD *)(a3 + 88) - *(_QWORD *)(a3 + 80);
  }
  v19 = (uint64_t)(*(_QWORD *)(a3 + 64) - *(_QWORD *)(a3 + 56)) >> 5;
  v20 = *(_QWORD *)(a3 + 16);
  v21 = v19 != v17 >> 6 || v20 > v19;
  if (!v21)
    goto LABEL_18;
LABEL_16:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/PointDescriptorStore.h", 184, (uint64_t)"HasValidSize()", 14, (uint64_t)"Descriptor size mis-match", 25, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_87;
  }
  v19 = (uint64_t)(*(_QWORD *)(a3 + 64) - *(_QWORD *)(a3 + 56)) >> 5;
  v20 = *(_QWORD *)(a3 + 16);
LABEL_18:
  v106 = v19 - v20;
  v22 = 24 * v14;
  sub_20F40CE80(a1, a3, v19 - v20, *(_QWORD *)(a1 + 784) + 24 * v14, a6, a7);
  v103 = 0;
  v104 = 0;
  v105 = 0;
  v23 = v14;
  v24 = *(_QWORD *)(a1 + 784);
  v89 = v23;
  if (a4)
  {
    v25 = (int **)(v24 + v22);
    v26 = v24 + 24 * v23;
    v29 = *(int **)(v26 + 8);
    v27 = (int **)(v26 + 8);
    v28 = v29;
    v30 = *v25;
    v31 = (char *)v29 - (char *)*v25;
    if (v29 != *v25)
    {
      v32 = 0x2E8BA2E8BA2E8BA3 * (v31 >> 3);
      if (v32 >> 61)
LABEL_85:
        sub_20E867F44();
      v103 = (char *)operator new(0x745D1745D1745D18 * (v31 >> 3));
      v104 = v103;
      v105 = &v103[8 * v32];
      v30 = *v25;
      v28 = *v27;
    }
    if (v30 != v28)
    {
      v33.f64[0] = NAN;
      v33.f64[1] = NAN;
      v91 = (int8x16_t)vnegq_f64(v33);
      while (1)
      {
        v48 = v104;
        if (v104 < v105)
        {
          *(_QWORD *)v104 = *(_QWORD *)v30;
          v34 = (uint64_t)(v48 + 8);
        }
        else
        {
          v49 = v103;
          v50 = (v104 - v103) >> 3;
          v51 = v50 + 1;
          if ((unint64_t)(v50 + 1) >> 61)
            goto LABEL_85;
          v52 = v105 - v103;
          if ((v105 - v103) >> 2 > v51)
            v51 = v52 >> 2;
          if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8)
            v53 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v53 = v51;
          if (v53)
          {
            if (v53 >> 61)
              sub_20E877A38();
            v54 = operator new(8 * v53);
            v55 = &v54[8 * v50];
            *(_QWORD *)v55 = *(_QWORD *)v30;
            v34 = (uint64_t)(v55 + 8);
            v56 = v48 - v49;
            if (v48 != v49)
            {
LABEL_46:
              v57 = v56 - 8;
              if (v57 < 0x58)
                goto LABEL_91;
              if ((unint64_t)(v49 - v54) < 0x20)
                goto LABEL_91;
              v58 = (v57 >> 3) + 1;
              v59 = 8 * (v58 & 0x3FFFFFFFFFFFFFFCLL);
              v60 = &v48[-v59];
              v55 -= v59;
              v61 = &v54[8 * v50 - 16];
              v62 = (__int128 *)(v48 - 16);
              v63 = v58 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v64 = *v62;
                *(v61 - 1) = *(v62 - 1);
                *v61 = v64;
                v61 -= 2;
                v62 -= 2;
                v63 -= 4;
              }
              while (v63);
              v48 = v60;
              if (v58 != (v58 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_91:
                do
                {
                  v65 = *((_QWORD *)v48 - 1);
                  v48 -= 8;
                  *((_QWORD *)v55 - 1) = v65;
                  v55 -= 8;
                }
                while (v48 != v49);
              }
              v48 = v103;
              v103 = v55;
              v105 = &v54[8 * v53];
              if (!v48)
                goto LABEL_25;
LABEL_43:
              operator delete(v48);
              goto LABEL_25;
            }
          }
          else
          {
            v54 = 0;
            v55 = (char *)(8 * v50);
            *(_QWORD *)(8 * v50) = *(_QWORD *)v30;
            v34 = 8 * v50 + 8;
            v56 = v48 - v49;
            if (v48 != v49)
              goto LABEL_46;
          }
          v103 = v55;
          v105 = &v54[8 * v53];
          if (v48)
            goto LABEL_43;
        }
LABEL_25:
        v104 = (char *)v34;
        v35.f64[0] = *(float64_t *)(a4 + 16);
        v36 = *(int8x16_t *)(a4 + 24);
        _Q4 = *(int8x16_t *)(a4 + 48);
        _D6 = (double)v30[1];
        v35.f64[1] = *(float64_t *)(a4 + 40);
        v39 = (int8x16_t)vaddq_f64(v35, vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)a4, (int64x2_t)v36), (double)*v30), (float64x2_t)vzip2q_s64(*(int64x2_t *)a4, (int64x2_t)v36), _D6));
        __asm { FMLA            D1, D6, V4.D[1] }
        v44 = *(double *)(a4 + 64) + _D1;
        if (v44 == 0.0)
          v44 = 1.0;
        *(double *)v36.i64 = *(double *)&v39.i64[1] / v44;
        _Q4.i64[0] = 0x41DFFFFFFFC00000;
        *(_QWORD *)&v45 = vbslq_s8(v91, _Q4, v36).u64[0];
        if (fabs(*(double *)&v39.i64[1] / v44) > 2147483650.0)
          *(double *)v36.i64 = v45;
        v46 = (int)*(double *)v36.i64;
        *(double *)v39.i64 = *(double *)v39.i64 / v44;
        *(_QWORD *)&v47 = vbslq_s8(v91, _Q4, v39).u64[0];
        if (fabs(*(double *)v39.i64) > 2147483650.0)
          *(double *)v39.i64 = v47;
        *(_QWORD *)v30 = (int)*(double *)v39.i64 | (unint64_t)(v46 << 32);
        v30 += 22;
        if (v30 == v28)
        {
          v24 = *(_QWORD *)(a1 + 784);
          break;
        }
      }
    }
  }
  v100 = 0;
  v101 = 0;
  v102 = 0;
  if (*(_BYTE *)(a5 + 4))
  {
    v66 = (uint64_t *)(v24 + 24 * v89);
    v68 = v66 + 1;
    v67 = v66[1];
    v69 = v67 - *v66;
    if (v67 == *v66)
    {
      v71 = 0;
      v74 = v89;
    }
    else
    {
      v70 = 0x2E8BA2E8BA2E8BA3 * (v69 >> 3);
      if (v70 >> 62)
        sub_20E867F44();
      v71 = (char *)operator new(0xBA2E8BA2E8BA2E8CLL * (v69 >> 3));
      v100 = v71;
      v101 = v71;
      v102 = &v71[4 * v70];
      v72 = *v66;
      v73 = *v68;
      _ZF = *v66 == *v68;
      v74 = v89;
      if (!_ZF)
      {
        do
        {
          v75 = *(float *)(v72 + 76) + *(float *)a5;
          v76 = 6.2832;
          if (v75 <= 6.2832)
            v76 = 0.0;
          *(float *)(v72 + 76) = v75 - v76;
          v72 += 88;
        }
        while (v72 != v73);
      }
    }
  }
  else
  {
    v71 = 0;
    v74 = v89;
  }
  kdebug_trace();
  v77 = __p;
  sub_20F40DE34((uint64_t)__p, &v106);
  if (v99 < 0)
    v77 = (void **)__p[0];
  v93 = 0;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v95 = 0;
  v92 = &off_24CA1E140;
  v96 = 3;
  v97 = v77;
  v88[1] = *v88;
  v78 = *(_QWORD *)(a1 + 784) + 24 * v74;
  if (*(_QWORD *)v78 != *(_QWORD *)(v78 + 8))
  {
    v79 = (_QWORD *)(*(_QWORD *)(a1 + 808) + 24 * v74);
    if (*v79 != v79[1])
      sub_20EDFE10C((int *)(a1 + 616), (float **)v78, v79, (uint64_t)v88, 0, *(_DWORD *)(a1 + 240), *(_DWORD *)(a1 + 244));
  }
  sub_210215814((uint64_t)&v92);
  if (v99 < 0)
    operator delete(__p[0]);
  kdebug_trace();
  if (v103 != v104)
  {
    v80 = (_QWORD *)(*(_QWORD *)(a1 + 784) + 24 * v74);
    v81 = v80[1];
    v82 = v81 - *v80;
    if (v81 != *v80)
    {
      v83 = 0;
      v84 = 0;
      v85 = 0x2E8BA2E8BA2E8BA3 * (v82 >> 3);
      v86 = 1;
      do
      {
        v87 = (char *)(*v80 + v83);
        if (v87 != &v103[v84])
          *(_QWORD *)v87 = *(_QWORD *)&v103[v84];
        v84 += 8;
        v83 += 88;
        v21 = v85 > v86++;
      }
      while (v21);
    }
  }
  if (v71)
  {
    v101 = v71;
    operator delete(v71);
  }
  if (v103)
  {
    v104 = v103;
    operator delete(v103);
  }
}

void sub_20F40DACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29)
{
  void *v29;
  uint64_t v30;
  void *v32;

  sub_210215814((uint64_t)&a16);
  if (a27 < 0)
    operator delete(__p);
  if (v29)
  {
    a29 = (uint64_t)v29;
    operator delete(v29);
  }
  v32 = *(void **)(v30 - 136);
  if (v32)
  {
    *(_QWORD *)(v30 - 128) = v32;
    operator delete(v32);
  }
  _Unwind_Resume(a1);
}

void sub_20F40DB38(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A68948);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A68948))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.feature_matching_unsanitized");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A68940);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A68948);
  }
  *a1 = qword_254A68940;
}

void sub_20F40DBD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A68948);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A68948);
  _Unwind_Resume(a1);
}

_QWORD *sub_20F40DC2C(_QWORD *result)
{
  char *v1;
  char *v2;
  unint64_t v3;
  char *v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;

  v1 = (char *)result[101];
  v2 = (char *)result[102];
  if (v1 != v2)
  {
    v3 = v2 - v1 - 24;
    v4 = (char *)result[101];
    if (v3 < 0x18)
      goto LABEL_26;
    v5 = v3 / 0x18 + 1;
    v4 = &v1[24 * (v5 & 0x1FFFFFFFFFFFFFFELL)];
    v6 = (uint64_t *)(v1 + 24);
    v7 = v5 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v8 = *v6;
      *(v6 - 2) = *(v6 - 3);
      v6[1] = v8;
      v6 += 6;
      v7 -= 2;
    }
    while (v7);
    if (v5 != (v5 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_26:
      do
      {
        *((_QWORD *)v4 + 1) = *(_QWORD *)v4;
        v4 += 24;
      }
      while (v4 != v2);
    }
  }
  v9 = (char *)result[98];
  v10 = (char *)result[99];
  if (v9 != v10)
  {
    v11 = v10 - v9 - 24;
    v12 = (char *)result[98];
    if (v11 < 0x18)
      goto LABEL_27;
    v13 = v11 / 0x18 + 1;
    v12 = &v9[24 * (v13 & 0x1FFFFFFFFFFFFFFELL)];
    v14 = (uint64_t *)(v9 + 24);
    v15 = v13 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v16 = *v14;
      *(v14 - 2) = *(v14 - 3);
      v14[1] = v16;
      v14 += 6;
      v15 -= 2;
    }
    while (v15);
    if (v13 != (v13 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_27:
      do
      {
        *((_QWORD *)v12 + 1) = *(_QWORD *)v12;
        v12 += 24;
      }
      while (v12 != v10);
    }
  }
  v17 = (char *)result[104];
  v18 = (char *)result[105];
  if (v17 != v18)
  {
    v19 = v18 - v17 - 24;
    v20 = (char *)result[104];
    if (v19 < 0x18)
      goto LABEL_28;
    v21 = v19 / 0x18 + 1;
    v20 = &v17[24 * (v21 & 0x1FFFFFFFFFFFFFFELL)];
    v22 = (uint64_t *)(v17 + 24);
    v23 = v21 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v24 = *v22;
      *(v22 - 2) = *(v22 - 3);
      v22[1] = v24;
      v22 += 6;
      v23 -= 2;
    }
    while (v23);
    if (v21 != (v21 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_28:
      do
      {
        *((_QWORD *)v20 + 1) = *(_QWORD *)v20;
        v20 += 24;
      }
      while (v20 != v18);
    }
  }
  v25 = result[1];
  v26 = -1431655765 * ((unint64_t)(result[2] - v25) >> 3);
  if ((_DWORD)v26)
  {
    v27 = result[7];
    v28 = (_QWORD *)(v25 + 8);
    v29 = (_QWORD *)(result[10] + 8);
    v30 = (_QWORD *)(result[4] + 8);
    do
    {
      *v28 = *(v28 - 1);
      *v30 = *(v30 - 1);
      if (*(_BYTE *)(v27 + 24))
        *(_QWORD *)(v27 + 8) = *(_QWORD *)v27;
      v28 += 3;
      *v29 = *(v29 - 1);
      v29 += 3;
      v27 += 32;
      v30 += 3;
      --v26;
    }
    while (v26);
  }
  return result;
}

uint64_t sub_20F40DE34(uint64_t a1, unint64_t *a2)
{
  uint64_t result;
  _DWORD v4[6];
  int v5;
  std::string v6;
  std::string **v7;
  std::string *v8;
  std::string *v9;
  _DWORD *v10;
  std::string *v11;
  std::string *v12;

  v5 = 0;
  sub_20EE13ECC(v4, "[DoGTracker] FeatureMatcher::Match(), points: ");
  std::to_string(&v6, *a2);
  v8 = (std::string *)v4;
  v9 = &v6;
  v10 = v4;
  v11 = &v6;
  v12 = &v6;
  if (v5 == -1)
    sub_20E877AB8();
  v7 = &v8;
  ((void (*)(std::string ***, _DWORD *))off_24C9FFDD0[v5])(&v7, v4);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  v8 = (std::string *)v4;
  v9 = (std::string *)",";
  v10 = v4;
  v11 = (std::string *)",";
  v12 = (std::string *)",";
  if (v5 == -1)
    sub_20E877AB8();
  v6.__r_.__value_.__r.__words[0] = (std::string::size_type)&v8;
  ((void (*)(std::string *, _DWORD *))off_24C9FFDE8[v5])(&v6, v4);
  if (v5 == -1)
    sub_20E877AB8();
  v8 = &v6;
  result = ((uint64_t (*)(std::string **, _DWORD *))off_24C9FFE00[v5])(&v8, v4);
  if (v5 != -1)
    return ((uint64_t (*)(std::string **, _DWORD *))off_24C9FFDB8[v5])(&v8, v4);
  return result;
}

void sub_20F40DF80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F40DFA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_20E877A60((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20F40DF90);
}

unint64_t sub_20F40DFC4(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t result;
  unint64_t v11;

  v3 = *a1;
  v2 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v7 = a1[6];
  v6 = a1[7];
  v8 = (*a1 << 36) & 0x8080000000000000 | *a1 & 0x13CE3841063CELL;
  v9 = (*a1 >> 19) & 0x10000000000;
  v11 = a1[4];
  result = a1[5];
  *a2 = v8 & 0xFFFDFFFFFFFFFFFFLL | v9 & 0xFFFDFFFFFFFFFFFFLL | (v3 >> 21) & 0x21000000011 | (v2 << 43) & 0x104000000000000 | v5 & 0x7E78C00C7BEF9C20 | (((v6 >> 10) & 1) << 49);
  a2[1] = v2 & 0x420130010004F00 | (v3 << 33) & 0x8008000000000000 | (v3 >> 10) & 0x20 | (v2 >> 21) & 0x400430018 | (v4 << 43) & 0x13C00000000000 | v11 & 0x78C00CFBEF9C2087 | (v6 << 41) & 0x304200000000000 | (16 * (int)v6) & 0x209040;
  a2[2] = v4 & 0x801C080000580080 | (v3 >> 31) & 0x10000 | (v2 >> 10) & 0x20002000 | (v4 >> 6) & 0x1800000000000 | (v4 >> 19) & 0x40000000 | (v4 >> 21) & 0x3861800 | result & 0x3FE277FF9C20877FLL | ((v6 & 1) << 62) | ((_DWORD)v6 << 9) & 0x4000;
  a2[3] = (v2 >> 31) & 0x800000 | v3 & 0x400000000000000 | (((v4 >> 26) & 3) << 59) | (v4 >> 10) & 0x1C00000000801 | v7 & 0xE3FE3FF3FF27E3FELL | (((v6 >> 3) & 1) << 35) | (v6 << 21) & 0x400400000 | (v6 >> 2) & 0x181400;
  return result;
}

void sub_20F40E1BC(uint64_t a1, __int128 *a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  char v12;
  __int128 v13;
  _OWORD *v14;
  void *v15;
  size_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  _DWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  float v26;
  unint64_t v27;
  unint64_t v28;
  BOOL v29;
  unint64_t v30;
  uint64_t v32;
  unint64_t v33;
  _OWORD *v34;
  _BYTE *v35;
  int64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  _OWORD *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  _OWORD *v53;
  unint64_t v54;
  uint64_t v55;
  _OWORD *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  unint64_t v70;
  char *v71;
  unint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  int v76;
  char *v77;
  unint64_t v78;
  char *v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;
  uint64_t v133;
  unint64_t v134;
  _BYTE *v135;
  _BYTE *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  __int128 *v147;
  uint64_t v148;
  __int128 v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  _BYTE *v154;
  uint64_t v155;
  char **v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  char *v161;
  uint64_t v162;
  __int128 v163;
  __int128 v164;
  uint64_t v165;
  _BYTE *v166;
  uint64_t v167;
  char **v168;
  char *v169;
  char *v170;
  char *v171;
  char *v172;
  char *v173;
  uint64_t v174;
  __int128 v175;
  __int128 v176;
  uint64_t v177;
  _BYTE *v178;
  uint64_t v179;
  char **v180;
  char *v181;
  char *v182;
  char *v183;
  char *v184;
  char *v185;
  uint64_t v186;
  __int128 v187;
  __int128 v188;
  uint64_t v189;
  _BYTE *v190;
  uint64_t v191;
  char **v192;
  _BYTE *v193;
  _BYTE *v194;
  char *v195;
  char *v196;
  char *v197;
  char *v198;
  uint64_t v199;
  _BYTE *v200;
  uint64_t v201;
  char **v202;
  _BYTE *v203;
  _BYTE *v204;
  char *v205;
  uint64_t v206;
  char *v207;
  char *v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  char *v212;
  char *v213;
  __int128 *v214;
  uint64_t v215;
  __int128 v216;
  uint64_t v217;
  uint64_t v218;
  _BYTE *v219;
  uint64_t v220;
  char **v221;
  _BYTE *v222;
  _BYTE *v223;
  char *v224;
  uint64_t v225;
  char *v226;
  char *v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  char *v231;
  char *v232;
  __int128 *v233;
  uint64_t v234;
  __int128 v235;
  uint64_t v236;
  _QWORD *v237;
  _QWORD *v238;
  _QWORD *v239;
  _QWORD *v240;
  _QWORD *v241;
  uint64_t v242;
  unint64_t v243;
  __int128 v244[14];
  void *__p;
  void *v246;

  if (*(_BYTE *)(a1 + 112)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureMatchingUnsanitized/src/DoGTracker.cpp", 42, (uint64_t)"!allocated_", 11, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| !*((_DWORD *)a2 + 8)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureMatchingUnsanitized/src/DoGTracker.cpp", 43, (uint64_t)"config.image_width > 0", 22, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| !*((_DWORD *)a2 + 9)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureMatchingUnsanitized/src/DoGTracker.cpp",
         44,
         (uint64_t)"config.image_height > 0",
         23,
         (uint64_t)"",
         0,
         (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_259;
  }
  v6 = *a2;
  v7 = a2[1];
  v8 = a2[2];
  *(_OWORD *)(a1 + 168) = a2[3];
  *(_OWORD *)(a1 + 152) = v8;
  *(_OWORD *)(a1 + 136) = v7;
  *(_OWORD *)(a1 + 120) = v6;
  v9 = a2[4];
  v10 = a2[5];
  v11 = a2[6];
  *(_OWORD *)(a1 + 232) = a2[7];
  *(_OWORD *)(a1 + 216) = v11;
  *(_OWORD *)(a1 + 200) = v10;
  *(_OWORD *)(a1 + 184) = v9;
  if ((__int128 *)(a1 + 120) == a2)
  {
LABEL_19:
    *(_WORD *)(a1 + 272) = *((_WORD *)a2 + 76);
    v14 = (_OWORD *)(a1 + 616);
    if (!*(_BYTE *)(a1 + 776))
      goto LABEL_31;
    goto LABEL_20;
  }
  v12 = *((_BYTE *)a2 + 151);
  if (*(char *)(a1 + 271) < 0)
  {
    if (v12 >= 0)
      v15 = a2 + 8;
    else
      v15 = (void *)*((_QWORD *)a2 + 16);
    if (v12 >= 0)
      v16 = *((unsigned __int8 *)a2 + 151);
    else
      v16 = *((_QWORD *)a2 + 17);
    sub_20E867CBC((void **)(a1 + 248), v15, v16);
    goto LABEL_19;
  }
  if ((*((_BYTE *)a2 + 151) & 0x80) != 0)
  {
    sub_20E867BF8((_QWORD *)(a1 + 248), *((void **)a2 + 16), *((_QWORD *)a2 + 17));
    *(_WORD *)(a1 + 272) = *((_WORD *)a2 + 76);
    v14 = (_OWORD *)(a1 + 616);
    if (!*(_BYTE *)(a1 + 776))
      goto LABEL_31;
  }
  else
  {
    v13 = a2[8];
    *(_QWORD *)(a1 + 264) = *((_QWORD *)a2 + 18);
    *(_OWORD *)(a1 + 248) = v13;
    *(_WORD *)(a1 + 272) = *((_WORD *)a2 + 76);
    v14 = (_OWORD *)(a1 + 616);
    if (!*(_BYTE *)(a1 + 776))
      goto LABEL_31;
  }
LABEL_20:
  v17 = *(void **)(a1 + 752);
  if (v17)
  {
    *(_QWORD *)(a1 + 760) = v17;
    operator delete(v17);
  }
  v18 = *(void **)(a1 + 720);
  if (v18)
  {
    *(_QWORD *)(a1 + 728) = v18;
    operator delete(v18);
  }
  v19 = *(void **)(a1 + 696);
  if (v19)
  {
    *(_QWORD *)(a1 + 704) = v19;
    operator delete(v19);
  }
  v20 = *(void **)(a1 + 672);
  if (v20)
  {
    *(_QWORD *)(a1 + 680) = v20;
    operator delete(v20);
  }
  v21 = *(void **)(a1 + 648);
  if (v21)
  {
    *(_QWORD *)(a1 + 656) = v21;
    operator delete(v21);
  }
  *(_BYTE *)(a1 + 776) = 0;
LABEL_31:
  v14[8] = 0u;
  v14[9] = 0u;
  v14[6] = 0u;
  v14[7] = 0u;
  v14[4] = 0u;
  v14[5] = 0u;
  v14[2] = 0u;
  v14[3] = 0u;
  *v14 = 0u;
  v14[1] = 0u;
  *(_DWORD *)(a1 + 632) = 1028443341;
  *(_DWORD *)(a1 + 640) = 1;
  *(_QWORD *)(a1 + 656) = 0;
  *(_QWORD *)(a1 + 648) = 0;
  *(_QWORD *)(a1 + 664) = 0;
  v22 = operator new(4uLL);
  *(_QWORD *)(a1 + 648) = v22;
  *v22++ = 0;
  *(_QWORD *)(a1 + 664) = v22;
  *(_QWORD *)(a1 + 656) = v22;
  *(_QWORD *)(a1 + 752) = 0;
  *(_QWORD *)(a1 + 768) = 0;
  *(_QWORD *)(a1 + 760) = 0;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 732) = 0u;
  *(_BYTE *)(a1 + 776) = 1;
  if (*(_BYTE *)(a1 + 237))
  {
    sub_20FD66938(*((unsigned __int8 *)a2 + 58), *((unsigned int *)a2 + 8), *((unsigned int *)a2 + 9), *((_QWORD *)a2 + 6), *((_DWORD *)a2 + 22), *((_DWORD *)a2 + 23), *((_DWORD *)a2 + 24), *((_QWORD *)a2 + 9), (uint64_t)v244, *((float *)a2 + 26), *((float *)a2 + 27), *((float *)a2 + 28), *((_QWORD *)a2 + 10), *((_QWORD *)a2 + 1), *((_WORD *)a2 + 28), HIBYTE(*((_WORD *)a2 + 28)), *(_WORD *)((char *)a2 + 59), HIBYTE(*(_WORD *)((char *)a2 + 59)), *(_DWORD *)((char *)a2 + 61),
      BYTE1(*(_DWORD *)((char *)a2 + 61)),
      BYTE2(*(_DWORD *)((char *)a2 + 61)),
      HIBYTE(*(_DWORD *)((char *)a2 + 61)),
      *((_BYTE *)a2 + 116),
      *((_BYTE *)a2 + 100),
      (uint64_t)(a2 + 8));
    v23 = (_QWORD *)(a1 + 280);
    if (*(_BYTE *)(a1 + 608))
    {
      v23 = sub_20FD40A18(v23);
      *(_BYTE *)(a1 + 608) = 0;
    }
    *(_QWORD *)(a1 + 280) = &off_24CA06CB8;
    *(_OWORD *)(a1 + 288) = 0u;
    *(_OWORD *)(a1 + 304) = 0u;
    *(_OWORD *)(a1 + 320) = 0u;
    *(_QWORD *)(a1 + 336) = 0;
    *(_DWORD *)(a1 + 352) = 1;
    *(_BYTE *)(a1 + 356) = 1;
    *(_QWORD *)(a1 + 360) = 320;
    *(_OWORD *)(a1 + 368) = xmmword_2103B44A0;
    *(_OWORD *)(a1 + 384) = xmmword_210378500;
    *(_BYTE *)(a1 + 400) = 1;
    *(_OWORD *)(a1 + 404) = xmmword_2102DB6D0;
    *(_QWORD *)((char *)v23 + 140) = 0x410000004141999ALL;
    *(_QWORD *)(a1 + 432) = 5;
    *(_QWORD *)(a1 + 440) = 0x41F0000041200000;
    *(int64x2_t *)(a1 + 448) = vdupq_n_s64(1uLL);
    *(_OWORD *)(a1 + 464) = xmmword_2102DB6E0;
    *(_WORD *)(a1 + 480) = 0;
    *(_DWORD *)(a1 + 484) = 1;
    *(_WORD *)(a1 + 488) = 1;
    *(_QWORD *)(a1 + 496) = 36;
    *(_QWORD *)(a1 + 504) = 0x3F4CCCCD00000005;
    *(_QWORD *)(a1 + 512) = 0x3FC0000040400000;
    *(_QWORD *)(a1 + 520) = 20000;
    *(_DWORD *)(a1 + 528) = 0;
    *(_WORD *)(a1 + 532) = 256;
    *(_OWORD *)(a1 + 536) = xmmword_2102DB6F0;
    *(_QWORD *)(a1 + 552) = 0x3F96E9DD3F5425F2;
    *(_DWORD *)(a1 + 560) = 0;
    *(_QWORD *)(a1 + 568) = 10;
    *(_QWORD *)(a1 + 576) = 10;
    *(_QWORD *)(a1 + 600) = 0;
    *(_QWORD *)(a1 + 584) = 0;
    *(_QWORD *)(a1 + 592) = 0;
    *(_BYTE *)(a1 + 608) = 1;
    sub_20FD40C08((uint64_t)v23, v244, a3);
    if (__p)
    {
      v246 = __p;
      operator delete(__p);
    }
  }
  if ((*(char *)(a1 + 271) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a1 + 271))
      goto LABEL_39;
    goto LABEL_38;
  }
  if (*(_QWORD *)(a1 + 256))
LABEL_38:
    sub_20FD66B64(a1 + 856, (__int128 *)(a1 + 248));
LABEL_39:
  v24 = *((_QWORD *)a2 + 4);
  v25 = *(_QWORD *)(a1 + 128);
  v26 = *(double *)(a1 + 144);
  *(float *)(a1 + 632) = v26;
  if (HIDWORD(v25))
  {
    v242 = v24;
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureMatching/include/VIO/FeatureMatching/FeatureMatcher.h", 570, (uint64_t)"max_num_features <= std::numeric_limits<IntFeatureIndex>::max()", 63, (uint64_t)"IntFeatureIndex is too small.", 29, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_259;
    }
    v26 = *(float *)(a1 + 632);
    v24 = v242;
  }
  *(_DWORD *)(a1 + 624) = v25;
  *(_QWORD *)(a1 + 616) = v24;
  *(_DWORD *)(a1 + 628) = (float)(v26
                                              * (float)((float)(v26 * (float)v24)
                                                      * (float)v24));
  v27 = (unint64_t)(float)(ceilf(1.0 / v26) + 2.0);
  v28 = v27 * v27;
  v29 = v27 > 0xFFFFFFFE || v28 > 0xE38E38E;
  v30 = (36 * v28) | 1;
  if (v29 || v30 >= 0xFFFFFFFF)
  {
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureMatching/include/VIO/FeatureMatching/FeatureMatcher.h", 587, (uint64_t)"num_bins < std::numeric_limits<IntBinIndex>::max() && num_bins * num_bins + 1 < std::numeric_limits<IntBinIndex>::max() && num_bins * num_bins * num_bins_multiplier + 1 < std::numeric_limits<IntBinIndex>::max() && (!ENABLE_MINMAX_BINNING || num_bins * num_bins * num_bins_multiplier * 2 + 1 < std::numeric_limits<IntBinIndex>::max())", 333, (uint64_t)"IntBinIndex is too small.", 25, (void (*)(void **))sub_21023DDB0))
    {
      v30 = (36 * v28) | 1;
      goto LABEL_52;
    }
LABEL_259:
    abort();
  }
LABEL_52:
  *(_DWORD *)(a1 + 636) = v27;
  *(_DWORD *)(a1 + 640) = 18;
  v32 = *(_QWORD *)(a1 + 648);
  v33 = (*(_QWORD *)(a1 + 656) - v32) >> 2;
  if (v30 <= v33)
  {
    if (v30 < v33)
      *(_QWORD *)(a1 + 656) = v32 + 4 * v30;
  }
  else
  {
    sub_20E93DC84(a1 + 648, v30 - v33);
  }
  v34 = *(_OWORD **)(a1 + 680);
  v35 = *(_BYTE **)(a1 + 672);
  v36 = (char *)v34 - v35;
  v37 = ((char *)v34 - v35) >> 4;
  v38 = v25 - v37;
  if (v25 <= v37)
  {
    if (v25 >= v37)
      goto LABEL_88;
    v53 = &v35[16 * v25];
    goto LABEL_83;
  }
  v39 = *(_QWORD *)(a1 + 688);
  if (v38 <= (v39 - (uint64_t)v34) >> 4)
  {
    v53 = &v34[v38];
    v54 = 16 * v25 - v36 - 16;
    if (v54 < 0x70)
      goto LABEL_265;
    v55 = (v54 >> 4) + 1;
    v56 = v34 + 4;
    v57 = v55 & 0x1FFFFFFFFFFFFFF8;
    do
    {
      *(v56 - 2) = xmmword_210379400;
      *(v56 - 1) = xmmword_210379400;
      *(v56 - 4) = xmmword_210379400;
      *(v56 - 3) = xmmword_210379400;
      v56[2] = xmmword_210379400;
      v56[3] = xmmword_210379400;
      *v56 = xmmword_210379400;
      v56[1] = xmmword_210379400;
      v56 += 8;
      v57 -= 8;
    }
    while (v57);
    v34 += v55 & 0x1FFFFFFFFFFFFFF8;
    if (v55 != (v55 & 0x1FFFFFFFFFFFFFF8))
    {
LABEL_265:
      do
        *v34++ = xmmword_210379400;
      while (v34 != v53);
    }
LABEL_83:
    *(_QWORD *)(a1 + 680) = v53;
    goto LABEL_88;
  }
  if (v25 >> 60)
    sub_20E867F44();
  v40 = v39 - (_QWORD)v35;
  v41 = (v39 - (uint64_t)v35) >> 3;
  if (v41 <= v25)
    v41 = v25;
  if (v40 >= 0x7FFFFFFFFFFFFFF0)
    v42 = 0xFFFFFFFFFFFFFFFLL;
  else
    v42 = v41;
  if (v42 >> 60)
    goto LABEL_260;
  v43 = (char *)operator new(16 * v42);
  v44 = &v43[16 * v37];
  v45 = &v43[16 * v25];
  v46 = 16 * v25 - v36 - 16;
  v47 = v44;
  if (v46 < 0x70)
    goto LABEL_266;
  v48 = (v46 >> 4) + 1;
  v47 = &v44[16 * (v48 & 0x1FFFFFFFFFFFFFF8)];
  v49 = v44 + 64;
  v50 = v48 & 0x1FFFFFFFFFFFFFF8;
  do
  {
    *(v49 - 2) = xmmword_210379400;
    *(v49 - 1) = xmmword_210379400;
    *(v49 - 4) = xmmword_210379400;
    *(v49 - 3) = xmmword_210379400;
    v49[2] = xmmword_210379400;
    v49[3] = xmmword_210379400;
    *v49 = xmmword_210379400;
    v49[1] = xmmword_210379400;
    v49 += 8;
    v50 -= 8;
  }
  while (v50);
  if (v48 != (v48 & 0x1FFFFFFFFFFFFFF8))
  {
LABEL_266:
    do
    {
      *(_OWORD *)v47 = xmmword_210379400;
      v47 += 16;
    }
    while (v47 != v45);
  }
  v51 = &v43[16 * v42];
  if (v34 == (_OWORD *)v35)
  {
    *(_QWORD *)(a1 + 672) = v44;
    *(_QWORD *)(a1 + 680) = v45;
    *(_QWORD *)(a1 + 688) = v51;
    if (!v35)
      goto LABEL_88;
    goto LABEL_87;
  }
  do
  {
    v52 = v44 - 16;
    *((_OWORD *)v44 - 1) = *--v34;
    v44 -= 16;
  }
  while (v34 != (_OWORD *)v35);
  *(_QWORD *)(a1 + 672) = v52;
  *(_QWORD *)(a1 + 680) = v45;
  *(_QWORD *)(a1 + 688) = v51;
  if (v35)
LABEL_87:
    operator delete(v35);
LABEL_88:
  v58 = *(char **)(a1 + 728);
  v59 = *(char **)(a1 + 720);
  v60 = v58 - v59;
  v61 = 0xAAAAAAAAAAAAAAABLL * ((v58 - v59) >> 2);
  v62 = v25 - v61;
  if (v25 > v61)
  {
    v63 = *(_QWORD *)(a1 + 736);
    if (0xAAAAAAAAAAAAAAABLL * ((v63 - (uint64_t)v58) >> 2) < v62)
    {
      if (v25 > 0x1555555555555555)
        sub_20E867F44();
      v64 = 0xAAAAAAAAAAAAAAABLL * ((v63 - (uint64_t)v59) >> 2);
      v65 = 2 * v64;
      if (2 * v64 <= v25)
        v65 = v25;
      if (v64 >= 0xAAAAAAAAAAAAAAALL)
        v66 = 0x1555555555555555;
      else
        v66 = v65;
      if (v66 <= 0x1555555555555555)
      {
        v67 = (char *)operator new(12 * v66);
        v68 = &v67[4 * ((v58 - v59) >> 2)];
        v69 = &v67[12 * v25];
        v70 = 12 * v25 - v60 - 12;
        v71 = v68;
        if (v70 < 0x54)
          goto LABEL_267;
        v72 = v70 / 0xC + 1;
        v71 = &v68[12 * (v72 & 0x3FFFFFFFFFFFFFF8)];
        v73 = v72 & 0x3FFFFFFFFFFFFFF8;
        v74 = &v67[4 * ((v58 - v59) >> 2)];
        do
        {
          *(_OWORD *)v74 = xmmword_210379430;
          *((_OWORD *)v74 + 1) = xmmword_210379420;
          *((_OWORD *)v74 + 4) = xmmword_210379420;
          *((_OWORD *)v74 + 5) = xmmword_210379410;
          *((_OWORD *)v74 + 2) = xmmword_210379410;
          *((_OWORD *)v74 + 3) = xmmword_210379430;
          v74 += 96;
          v73 -= 8;
        }
        while (v73);
        if (v72 != (v72 & 0x3FFFFFFFFFFFFFF8))
        {
LABEL_267:
          do
          {
            *(_QWORD *)v71 = 0xFFFFFFFF80000000;
            *((_DWORD *)v71 + 2) = 0;
            v71 += 12;
          }
          while (v71 != v69);
        }
        for (; v58 != v59; *((_DWORD *)v68 + 2) = v76)
        {
          v75 = *(_QWORD *)(v58 - 12);
          v58 -= 12;
          v76 = *((_DWORD *)v58 + 2);
          *(_QWORD *)(v68 - 12) = v75;
          v68 -= 12;
        }
        *(_QWORD *)(a1 + 720) = v68;
        *(_QWORD *)(a1 + 728) = v69;
        *(_QWORD *)(a1 + 736) = &v67[12 * v66];
        if (v59)
          operator delete(v59);
        goto LABEL_115;
      }
LABEL_260:
      sub_20E877A38();
    }
    v77 = &v58[12 * v62];
    v78 = 12 * v25 - v60 - 12;
    if (v78 >= 0x54)
    {
      v80 = v78 / 0xC + 1;
      v79 = &v58[12 * (v80 & 0x3FFFFFFFFFFFFFF8)];
      v81 = v80 & 0x3FFFFFFFFFFFFFF8;
      do
      {
        *(_OWORD *)v58 = xmmword_210379430;
        *((_OWORD *)v58 + 1) = xmmword_210379420;
        *((_OWORD *)v58 + 4) = xmmword_210379420;
        *((_OWORD *)v58 + 5) = xmmword_210379410;
        *((_OWORD *)v58 + 2) = xmmword_210379410;
        *((_OWORD *)v58 + 3) = xmmword_210379430;
        v58 += 96;
        v81 -= 8;
      }
      while (v81);
      if (v80 == (v80 & 0x3FFFFFFFFFFFFFF8))
        goto LABEL_114;
    }
    else
    {
      v79 = *(char **)(a1 + 728);
    }
    do
    {
      *(_QWORD *)v79 = 0xFFFFFFFF80000000;
      *((_DWORD *)v79 + 2) = 0;
      v79 += 12;
    }
    while (v79 != v77);
LABEL_114:
    *(_QWORD *)(a1 + 728) = v77;
    goto LABEL_115;
  }
  if (v25 < v61)
  {
    v77 = &v59[12 * v25];
    goto LABEL_114;
  }
LABEL_115:
  **(_DWORD **)(a1 + 648) = 0;
  if (*(_DWORD *)a2)
    v82 = 2;
  else
    v82 = 1;
  v83 = *(_QWORD *)(a1 + 792);
  v84 = *(_QWORD *)(a1 + 784);
  v85 = 0xAAAAAAAAAAAAAAABLL * ((v83 - v84) >> 3);
  v243 = v82;
  if (v82 <= v85)
  {
    if (v82 < v85)
    {
      v86 = v84 + 24 * v82;
      if (v83 != v86)
      {
        v87 = *(_QWORD *)(a1 + 792);
        do
        {
          v89 = *(void **)(v87 - 24);
          v87 -= 24;
          v88 = v89;
          if (v89)
          {
            *(_QWORD *)(v83 - 16) = v88;
            operator delete(v88);
          }
          v83 = v87;
        }
        while (v87 != v86);
      }
      *(_QWORD *)(a1 + 792) = v86;
    }
  }
  else
  {
    sub_20F411E58(a1 + 784, v82 - v85);
  }
  v90 = *(_QWORD *)(a1 + 816);
  v91 = *(_QWORD *)(a1 + 808);
  v92 = 0xAAAAAAAAAAAAAAABLL * ((v90 - v91) >> 3);
  if (v243 <= v92)
  {
    if (v243 < v92)
    {
      v93 = v91 + 24 * v243;
      if (v90 != v93)
      {
        v94 = *(_QWORD *)(a1 + 816);
        do
        {
          v96 = *(void **)(v94 - 24);
          v94 -= 24;
          v95 = v96;
          if (v96)
          {
            *(_QWORD *)(v90 - 16) = v95;
            operator delete(v95);
          }
          v90 = v94;
        }
        while (v94 != v93);
      }
      *(_QWORD *)(a1 + 816) = v93;
    }
  }
  else
  {
    sub_20F411E58(a1 + 808, v243 - v92);
  }
  v97 = *(_QWORD *)(a1 + 840);
  v98 = *(_QWORD *)(a1 + 832);
  v99 = 0xAAAAAAAAAAAAAAABLL * ((v97 - v98) >> 3);
  if (v243 <= v99)
  {
    if (v243 < v99)
    {
      v100 = v98 + 24 * v243;
      if (v97 != v100)
      {
        v101 = *(_QWORD *)(a1 + 840);
        do
        {
          v103 = *(void **)(v101 - 24);
          v101 -= 24;
          v102 = v103;
          if (v103)
          {
            *(_QWORD *)(v97 - 16) = v102;
            operator delete(v102);
          }
          v97 = v101;
        }
        while (v101 != v100);
      }
      *(_QWORD *)(a1 + 840) = v100;
    }
  }
  else
  {
    sub_20F411E58(a1 + 832, v243 - v99);
  }
  v105 = *(_QWORD *)(a1 + 8);
  v104 = *(_QWORD *)(a1 + 16);
  v106 = 0xAAAAAAAAAAAAAAABLL * ((v104 - v105) >> 3);
  if (v243 <= v106)
  {
    if (v243 < v106)
    {
      v107 = v105 + 24 * v243;
      if (v104 != v107)
      {
        v108 = *(_QWORD *)(a1 + 16);
        do
        {
          v110 = *(void **)(v108 - 24);
          v108 -= 24;
          v109 = v110;
          if (v110)
          {
            *(_QWORD *)(v104 - 16) = v109;
            operator delete(v109);
          }
          v104 = v108;
        }
        while (v108 != v107);
      }
      *(_QWORD *)(a1 + 16) = v107;
    }
  }
  else
  {
    sub_20F0B7BF8(a1 + 8, v243 - v106);
  }
  v112 = *(_QWORD *)(a1 + 32);
  v111 = *(_QWORD *)(a1 + 40);
  v113 = 0xAAAAAAAAAAAAAAABLL * ((v111 - v112) >> 3);
  if (v243 <= v113)
  {
    if (v243 < v113)
    {
      v114 = v112 + 24 * v243;
      if (v111 != v114)
      {
        v115 = *(_QWORD *)(a1 + 40);
        do
        {
          v117 = *(void **)(v115 - 24);
          v115 -= 24;
          v116 = v117;
          if (v117)
          {
            *(_QWORD *)(v111 - 16) = v116;
            operator delete(v116);
          }
          v111 = v115;
        }
        while (v115 != v114);
      }
      *(_QWORD *)(a1 + 40) = v114;
    }
  }
  else
  {
    sub_20F0B7BF8(a1 + 32, v243 - v113);
  }
  v118 = *(_QWORD *)(a1 + 56);
  v119 = *(_QWORD *)(a1 + 64);
  v120 = (v119 - v118) >> 5;
  if (v243 <= v120)
  {
    if (v243 < v120)
    {
      v121 = v118 + 32 * v243;
      while (v119 != v121)
      {
        if (*(_BYTE *)(v119 - 8))
        {
          v122 = *(void **)(v119 - 32);
          if (v122)
          {
            *(_QWORD *)(v119 - 24) = v122;
            operator delete(v122);
          }
        }
        v119 -= 32;
      }
      *(_QWORD *)(a1 + 64) = v121;
    }
  }
  else
  {
    sub_20F41202C((uint64_t *)(a1 + 56), v243 - v120);
  }
  v124 = *(_QWORD *)(a1 + 80);
  v123 = *(_QWORD *)(a1 + 88);
  v125 = 0xAAAAAAAAAAAAAAABLL * ((v123 - v124) >> 3);
  v237 = (_QWORD *)(a1 + 80);
  if (v243 <= v125)
  {
    if (v243 < v125)
    {
      v126 = v124 + 24 * v243;
      if (v123 != v126)
      {
        v127 = *(_QWORD *)(a1 + 88);
        do
        {
          v129 = *(void **)(v127 - 24);
          v127 -= 24;
          v128 = v129;
          if (v129)
          {
            *(_QWORD *)(v123 - 16) = v128;
            operator delete(v128);
          }
          v123 = v127;
        }
        while (v127 != v126);
      }
      *(_QWORD *)(a1 + 88) = v126;
    }
  }
  else
  {
    sub_20F0B7BF8(a1 + 80, v243 - v125);
  }
  v238 = (_QWORD *)(a1 + 32);
  v239 = (_QWORD *)(a1 + 8);
  v240 = (_QWORD *)(a1 + 832);
  v241 = (_QWORD *)(a1 + 808);
  v130 = 0;
  do
  {
    if (!v130)
      goto LABEL_201;
    v131 = *(_QWORD *)(a1 + 56) + 32 * v130;
    if (*(_BYTE *)(v131 + 24))
    {
      v132 = *(void **)v131;
      if (*(_QWORD *)v131)
      {
        *(_QWORD *)(v131 + 8) = v132;
        operator delete(v132);
      }
    }
    *(_QWORD *)v131 = 0;
    *(_QWORD *)(v131 + 8) = 0;
    *(_QWORD *)(v131 + 16) = 0;
    *(_BYTE *)(v131 + 24) = 1;
    v133 = *(_QWORD *)(a1 + 56) + 32 * v130;
    v134 = *(_QWORD *)(a1 + 128);
    v135 = *(_BYTE **)v133;
    if (v134 > (uint64_t)(*(_QWORD *)(v133 + 16) - *(_QWORD *)v133) >> 3)
    {
      if (v134 >> 61)
        sub_20E867F44();
      v136 = *(_BYTE **)(v133 + 8);
      v137 = 8 * v134;
      v138 = (char *)operator new(8 * v134);
      v139 = v136 - v135;
      v140 = &v138[(v136 - v135) & 0xFFFFFFFFFFFFFFF8];
      v141 = v140;
      if (v136 == v135)
        goto LABEL_198;
      if ((unint64_t)(v139 - 8) >= 0x58)
      {
        v141 = &v138[(v136 - v135) & 0xFFFFFFFFFFFFFFF8];
        if (v136 - v138 - (v139 & 0xFFFFFFFFFFFFFFF8) >= 0x20)
        {
          v142 = v139 >> 3;
          v143 = ((unint64_t)(v139 - 8) >> 3) + 1;
          v144 = 8 * (v143 & 0x3FFFFFFFFFFFFFFCLL);
          v145 = &v136[-v144];
          v141 = &v140[-v144];
          v146 = &v138[8 * v142 - 16];
          v147 = (__int128 *)(v136 - 16);
          v148 = v143 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v149 = *v147;
            *((_OWORD *)v146 - 1) = *(v147 - 1);
            *(_OWORD *)v146 = v149;
            v146 -= 32;
            v147 -= 2;
            v148 -= 4;
          }
          while (v148);
          v136 = v145;
          if (v143 == (v143 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_198:
            *(_QWORD *)v133 = v141;
            *(_QWORD *)(v133 + 8) = v140;
            *(_QWORD *)(v133 + 16) = &v138[v137];
            if (v135)
              operator delete(v135);
            goto LABEL_200;
          }
        }
      }
      else
      {
        v141 = &v138[(v136 - v135) & 0xFFFFFFFFFFFFFFF8];
      }
      do
      {
        v150 = *((_QWORD *)v136 - 1);
        v136 -= 8;
        *((_QWORD *)v141 - 1) = v150;
        v141 -= 8;
      }
      while (v136 != v135);
      goto LABEL_198;
    }
LABEL_200:
    if (!*(_BYTE *)(a1 + 238))
      goto LABEL_183;
LABEL_201:
    v151 = *(_QWORD *)(a1 + 784);
    v152 = v151 + 24 * v130;
    v153 = *(_QWORD *)(a1 + 128);
    v154 = *(_BYTE **)v152;
    if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v152 + 16) - *(_QWORD *)v152) >> 3) < v153)
    {
      if (v153 > 0x492492492492492)
        goto LABEL_254;
      v155 = v151 + 24 * v130;
      v158 = *(char **)(v155 + 8);
      v156 = (char **)(v155 + 8);
      v157 = v158;
      v159 = (char *)operator new(56 * v153);
      v160 = &v159[v158 - v154];
      v161 = v160;
      if (v158 != v154)
      {
        v161 = &v159[v157 - v154];
        do
        {
          v162 = *((_QWORD *)v157 - 7);
          v157 -= 56;
          *((_QWORD *)v161 - 7) = v162;
          v161 -= 56;
          v163 = *(_OWORD *)(v157 + 8);
          v164 = *(_OWORD *)(v157 + 24);
          *(_OWORD *)(v161 + 40) = *(_OWORD *)(v157 + 40);
          *(_OWORD *)(v161 + 24) = v164;
          *(_OWORD *)(v161 + 8) = v163;
        }
        while (v157 != v154);
      }
      *(_QWORD *)v152 = v161;
      *v156 = v160;
      *(_QWORD *)(v152 + 16) = &v159[56 * v153];
      if (v154)
      {
        operator delete(v154);
        v153 = *(_QWORD *)(a1 + 128);
      }
    }
    v165 = *v241 + 24 * v130;
    v166 = *(_BYTE **)v165;
    if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v165 + 16) - *(_QWORD *)v165) >> 3) < v153)
    {
      if (v153 > 0x492492492492492)
        goto LABEL_254;
      v167 = *v241 + 24 * v130;
      v170 = *(char **)(v167 + 8);
      v168 = (char **)(v167 + 8);
      v169 = v170;
      v171 = (char *)operator new(56 * v153);
      v172 = &v171[v170 - v166];
      v173 = v172;
      if (v170 != v166)
      {
        v173 = &v171[v169 - v166];
        do
        {
          v174 = *((_QWORD *)v169 - 7);
          v169 -= 56;
          *((_QWORD *)v173 - 7) = v174;
          v173 -= 56;
          v175 = *(_OWORD *)(v169 + 8);
          v176 = *(_OWORD *)(v169 + 24);
          *(_OWORD *)(v173 + 40) = *(_OWORD *)(v169 + 40);
          *(_OWORD *)(v173 + 24) = v176;
          *(_OWORD *)(v173 + 8) = v175;
        }
        while (v169 != v166);
      }
      *(_QWORD *)v165 = v173;
      *v168 = v172;
      *(_QWORD *)(v165 + 16) = &v171[56 * v153];
      if (v166)
      {
        operator delete(v166);
        v153 = *(_QWORD *)(a1 + 128);
      }
    }
    v177 = *v240 + 24 * v130;
    v178 = *(_BYTE **)v177;
    if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v177 + 16) - *(_QWORD *)v177) >> 3) < v153)
    {
      if (v153 > 0x492492492492492)
LABEL_254:
        sub_20E867F44();
      v179 = *v240 + 24 * v130;
      v182 = *(char **)(v179 + 8);
      v180 = (char **)(v179 + 8);
      v181 = v182;
      v183 = (char *)operator new(56 * v153);
      v184 = &v183[v182 - v178];
      v185 = v184;
      if (v182 != v178)
      {
        v185 = &v183[v181 - v178];
        do
        {
          v186 = *((_QWORD *)v181 - 7);
          v181 -= 56;
          *((_QWORD *)v185 - 7) = v186;
          v185 -= 56;
          v187 = *(_OWORD *)(v181 + 8);
          v188 = *(_OWORD *)(v181 + 24);
          *(_OWORD *)(v185 + 40) = *(_OWORD *)(v181 + 40);
          *(_OWORD *)(v185 + 24) = v188;
          *(_OWORD *)(v185 + 8) = v187;
        }
        while (v181 != v178);
      }
      *(_QWORD *)v177 = v185;
      *v180 = v184;
      *(_QWORD *)(v177 + 16) = &v183[56 * v153];
      if (v178)
      {
        operator delete(v178);
        v153 = *(_QWORD *)(a1 + 128);
      }
    }
    v189 = *v239 + 24 * v130;
    v190 = *(_BYTE **)v189;
    if (v153 > (uint64_t)(*(_QWORD *)(v189 + 16) - *(_QWORD *)v189) >> 4)
    {
      if (v153 >> 60)
        sub_20E867F44();
      v191 = *v239 + 24 * v130;
      v194 = *(_BYTE **)(v191 + 8);
      v192 = (char **)(v191 + 8);
      v193 = v194;
      v195 = (char *)operator new(16 * v153);
      v196 = &v195[(v194 - v190) & 0xFFFFFFFFFFFFFFF0];
      v197 = v196;
      if (v194 != v190)
      {
        v198 = &v195[(v193 - v190) & 0xFFFFFFFFFFFFFFF0];
        do
        {
          v197 = v198 - 16;
          *((_OWORD *)v198 - 1) = *((_OWORD *)v193 - 1);
          v193 -= 16;
          v198 -= 16;
        }
        while (v193 != v190);
      }
      *(_QWORD *)v189 = v197;
      *v192 = v196;
      *(_QWORD *)(v189 + 16) = &v195[16 * v153];
      if (v190)
      {
        operator delete(v190);
        v153 = *(_QWORD *)(a1 + 128);
      }
    }
    v199 = *v238 + 24 * v130;
    v200 = *(_BYTE **)v199;
    if (v153 > (uint64_t)(*(_QWORD *)(v199 + 16) - *(_QWORD *)v199) >> 3)
    {
      if (v153 >> 61)
        sub_20E867F44();
      v201 = *v238 + 24 * v130;
      v204 = *(_BYTE **)(v201 + 8);
      v202 = (char **)(v201 + 8);
      v203 = v204;
      v205 = (char *)operator new(8 * v153);
      v206 = v204 - v200;
      v207 = &v205[(v204 - v200) & 0xFFFFFFFFFFFFFFF8];
      v208 = v207;
      if (v204 == v200)
        goto LABEL_239;
      if ((unint64_t)(v206 - 8) >= 0x58)
      {
        v208 = &v205[(v203 - v200) & 0xFFFFFFFFFFFFFFF8];
        if ((unint64_t)(v203 - &v205[v206 & 0xFFFFFFFFFFFFFFF8]) >= 0x20)
        {
          v209 = v206 >> 3;
          v210 = ((unint64_t)(v206 - 8) >> 3) + 1;
          v211 = 8 * (v210 & 0x3FFFFFFFFFFFFFFCLL);
          v212 = &v203[-v211];
          v208 = &v207[-v211];
          v213 = &v205[8 * v209 - 16];
          v214 = (__int128 *)(v203 - 16);
          v215 = v210 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v216 = *v214;
            *((_OWORD *)v213 - 1) = *(v214 - 1);
            *(_OWORD *)v213 = v216;
            v213 -= 32;
            v214 -= 2;
            v215 -= 4;
          }
          while (v215);
          v203 = v212;
          if (v210 == (v210 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_239:
            *(_QWORD *)v199 = v208;
            *v202 = v207;
            *(_QWORD *)(v199 + 16) = &v205[8 * v153];
            if (v200)
            {
              operator delete(v200);
              v153 = *(_QWORD *)(a1 + 128);
            }
            goto LABEL_241;
          }
        }
      }
      else
      {
        v208 = &v205[(v203 - v200) & 0xFFFFFFFFFFFFFFF8];
      }
      do
      {
        v217 = *((_QWORD *)v203 - 1);
        v203 -= 8;
        *((_QWORD *)v208 - 1) = v217;
        v208 -= 8;
      }
      while (v203 != v200);
      goto LABEL_239;
    }
LABEL_241:
    v218 = *v237 + 24 * v130;
    v219 = *(_BYTE **)v218;
    if (v153 <= (uint64_t)(*(_QWORD *)(v218 + 16) - *(_QWORD *)v218) >> 3)
      goto LABEL_183;
    if (v153 >> 61)
      sub_20E867F44();
    v220 = *v237 + 24 * v130;
    v223 = *(_BYTE **)(v220 + 8);
    v221 = (char **)(v220 + 8);
    v222 = v223;
    v224 = (char *)operator new(8 * v153);
    v225 = v223 - v219;
    v226 = &v224[(v223 - v219) & 0xFFFFFFFFFFFFFFF8];
    v227 = v226;
    if (v223 != v219)
    {
      if ((unint64_t)(v225 - 8) < 0x58)
      {
        v227 = &v224[(v222 - v219) & 0xFFFFFFFFFFFFFFF8];
        do
        {
LABEL_250:
          v236 = *((_QWORD *)v222 - 1);
          v222 -= 8;
          *((_QWORD *)v227 - 1) = v236;
          v227 -= 8;
        }
        while (v222 != v219);
        goto LABEL_251;
      }
      v227 = &v224[(v222 - v219) & 0xFFFFFFFFFFFFFFF8];
      if ((unint64_t)(v222 - &v224[v225 & 0xFFFFFFFFFFFFFFF8]) < 0x20)
        goto LABEL_250;
      v228 = v225 >> 3;
      v229 = ((unint64_t)(v225 - 8) >> 3) + 1;
      v230 = 8 * (v229 & 0x3FFFFFFFFFFFFFFCLL);
      v231 = &v222[-v230];
      v227 = &v226[-v230];
      v232 = &v224[8 * v228 - 16];
      v233 = (__int128 *)(v222 - 16);
      v234 = v229 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v235 = *v233;
        *((_OWORD *)v232 - 1) = *(v233 - 1);
        *(_OWORD *)v232 = v235;
        v232 -= 32;
        v233 -= 2;
        v234 -= 4;
      }
      while (v234);
      v222 = v231;
      if (v229 != (v229 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_250;
    }
LABEL_251:
    *(_QWORD *)v218 = v227;
    *v221 = v226;
    *(_QWORD *)(v218 + 16) = &v224[8 * v153];
    if (v219)
      operator delete(v219);
LABEL_183:
    ++v130;
  }
  while ((_DWORD)v243 != (_DWORD)v130);
  *(_BYTE *)(a1 + 112) = 1;
}

void sub_20F40F500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F40F51C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  sub_20F40F66C(a1, 0, *a2, **a4, *(_QWORD *)(a1 + 8), *(uint64_t **)(a1 + 80), *(_QWORD *)(a1 + 32));
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  if (v8 - v7 == 48)
  {
    *(_QWORD *)(v7 + 32) = *(_QWORD *)(v7 + 24);
    *(_QWORD *)(*(_QWORD *)(a1 + 80) + 32) = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 24);
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 32);
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
  }
  if (a2[1] - *a2 == 288 && *(_BYTE *)(a1 + 238))
  {
    sub_20F40F66C(a1, 1u, *a2 + 144, (*a4)[1], v7 + 24, (uint64_t *)(*(_QWORD *)(a1 + 80) + 24), *(_QWORD *)(a1 + 32) + 24);
    v7 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
  }
  v9 = *(_QWORD *)(a1 + 848);
  v10 = *(_OWORD *)(a1 + 816);
  v11 = *(_OWORD *)(a1 + 784);
  v12 = *(_OWORD *)(a1 + 800);
  *(_OWORD *)(a1 + 784) = *(_OWORD *)(a1 + 832);
  *(_OWORD *)(a1 + 824) = v12;
  *(_OWORD *)(a1 + 840) = v10;
  *(_QWORD *)(a1 + 800) = v9;
  *(_OWORD *)(a1 + 808) = v11;
  if (v8 - v7 == 48 && a2[1] - *a2 == 288)
  {
    v13 = *(_QWORD *)(a1 + 56);
    if (!*(_BYTE *)(v13 + 56))
      sub_20E866B34();
    sub_20F40F66C(a1, 0, *a2 + 144, (*a4)[1], v7 + 24, (uint64_t *)(*(_QWORD *)(a1 + 80) + 24), v13 + 32);
  }
}

void sub_20F40F66C(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  uint64_t (**v14)(uint64_t);
  char v15;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  uint64_t v17;
  int v18;
  const char *v19;

  if (!*(_BYTE *)(a1 + 237))
  {
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureMatchingUnsanitized/src/DoGTracker.cpp", 123, (uint64_t)"", 0, (uint64_t)"No feature detector", 19, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  v15 = 0;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v17 = 0;
  v14 = &off_24CA1E140;
  v18 = 3;
  v19 = "[DoGTracker] DoGAndFREAKGenerator::Generate() time elapsed";
  (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)(a1 + 280) + 16))(a1 + 280, a3, 0, a4);
  sub_210215814((uint64_t)&v14);
  LOBYTE(v14) = 0;
  BYTE4(v14) = 0;
  sub_20F410C58(a1, a2, a4, 0, (uint64_t)&v14, a5, a6, a7);
}

void sub_20F40F778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_210215814((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20F40F78C(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t (**v12)(uint64_t);
  char v13;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  uint64_t v15;
  int v16;
  const char *v17;

  if (!*(_BYTE *)(a1 + 237))
  {
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureMatchingUnsanitized/src/DoGTracker.cpp", 201, (uint64_t)"", 0, (uint64_t)"No feature detector", 19, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  v13 = 0;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v15 = 0;
  v12 = &off_24CA1E140;
  v16 = 3;
  v17 = "[DoGTracker] DoGAndFREAKGenerator::Generate() time elapsed";
  v7 = *a2;
  if (a2[1] != *a2)
  {
    v8 = 0;
    v9 = a1 + 280;
    v10 = 1;
    do
    {
      if (v10 - 1 >= 0x10000
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 39, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      (*(void (**)(uint64_t, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v9 + 16))(v9, v7 + 144 * v8, v8 << 32, *(_QWORD *)(*a4 + 8 * v8));
      v8 = v10;
      v7 = *a2;
      ++v10;
    }
    while (0x8E38E38E38E38E39 * ((a2[1] - *a2) >> 4) > v8);
  }
  return sub_210215814((uint64_t)&v12);
}

void sub_20F40F904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_210215814((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20F40F918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_210215814((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20F40F92C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  size_t v39;
  const char *v40;
  uint64_t v41;
  unsigned __int8 v42;
  const char *v43;
  size_t v44;
  void *v45;
  unint64_t v46;
  const char *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  size_t v57;
  std::__shared_weak_count_vtbl *v58;
  std::__shared_weak_count *v59;
  std::__shared_weak_count *v60;
  unint64_t *p_shared_owners;
  unint64_t v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  void *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  _QWORD v92[3];
  int v93;
  const char *v94;
  int v95;
  const char *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  uint64_t v99;
  void *object;
  void *v101[2];
  __int128 v102;
  void *__p[2];
  unint64_t v104;
  char v105;
  uint64_t v106;
  uint64_t v107;

  v15 = **(_QWORD **)a2;
  if (*(_BYTE *)(a9 + 8))
  {
    if (*(_BYTE *)(v15 + 184))
    {
      v16 = *(_QWORD *)(v15 + 88) - *(_QWORD *)(v15 + 80);
      if (v16)
        v17 = v16 == *(_QWORD *)(v15 + 168) - *(_QWORD *)(v15 + 160);
      else
        v17 = 0;
      if (!v17)
        goto LABEL_14;
      v18 = (uint64_t)(*(_QWORD *)(v15 + 64) - *(_QWORD *)(v15 + 56)) >> 5;
      if (v18 != v16 >> 6)
        goto LABEL_14;
    }
    else
    {
      if (*(_QWORD *)(v15 + 160) != *(_QWORD *)(v15 + 168))
        goto LABEL_14;
      v18 = (uint64_t)(*(_QWORD *)(v15 + 64) - *(_QWORD *)(v15 + 56)) >> 5;
      if (v18 != (uint64_t)(*(_QWORD *)(v15 + 88) - *(_QWORD *)(v15 + 80)) >> 6)
        goto LABEL_14;
    }
    v19 = *(_QWORD *)(v15 + 16);
    if (v19 <= v18)
    {
LABEL_16:
      sub_20F410484(a1, v15, v18 - v19, *(char ***)(a1 + 784), *(_QWORD *)(a1 + 8), *(uint64_t **)(a1 + 80));
      v20 = *(_QWORD **)(a1 + 32);
      if (v20 != *(_QWORD **)a9)
        sub_20E86811C(v20, **(char ***)a9, *(char **)(*(_QWORD *)a9 + 8), (uint64_t)(*(_QWORD *)(*(_QWORD *)a9 + 8) - **(_QWORD **)a9) >> 3);
      goto LABEL_18;
    }
LABEL_14:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/PointDescriptorStore.h", 184, (uint64_t)"HasValidSize()", 14, (uint64_t)"Descriptor size mis-match", 25, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_128;
    }
    v18 = (uint64_t)(*(_QWORD *)(v15 + 64) - *(_QWORD *)(v15 + 56)) >> 5;
    v19 = *(_QWORD *)(v15 + 16);
    v15 = **(_QWORD **)a2;
    goto LABEL_16;
  }
  sub_20F410C58(a1, 0, v15, a3, a6, *(_QWORD *)(a1 + 8), *(uint64_t **)(a1 + 80), *(_QWORD *)(a1 + 32));
LABEL_18:
  v22 = *(_QWORD *)(a1 + 8);
  v21 = *(_QWORD *)(a1 + 16);
  if (v21 - v22 == 48)
  {
    *(_QWORD *)(v22 + 32) = *(_QWORD *)(v22 + 24);
    v23 = *(_QWORD *)(a1 + 80);
    v25 = *(_QWORD *)(v23 + 24);
    v24 = (uint64_t *)(v23 + 24);
    v24[1] = v25;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 32);
    v26 = *(_QWORD *)(a1 + 32);
    v28 = *(_QWORD *)(v26 + 24);
    v27 = v26 + 24;
    *(_QWORD *)(v27 + 8) = v28;
    if (*(_BYTE *)(a1 + 238))
    {
      sub_20F410C58(a1, 1u, *(_QWORD *)(*(_QWORD *)a2 + 8), a4, a7, v22 + 24, v24, v27);
      v22 = *(_QWORD *)(a1 + 8);
      v21 = *(_QWORD *)(a1 + 16);
    }
  }
  v29 = *(_QWORD *)(a1 + 848);
  v30 = *(_OWORD *)(a1 + 816);
  v31 = *(_OWORD *)(a1 + 784);
  v32 = *(_OWORD *)(a1 + 800);
  *(_OWORD *)(a1 + 784) = *(_OWORD *)(a1 + 832);
  *(_OWORD *)(a1 + 824) = v32;
  *(_OWORD *)(a1 + 840) = v30;
  *(_QWORD *)(a1 + 800) = v29;
  *(_OWORD *)(a1 + 808) = v31;
  if (v21 - v22 != 48)
    return;
  if (*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32) != 48
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureMatchingUnsanitized/src/DoGTracker.cpp", 291, (uint64_t)"curr_to_prev_matches_.size() == 2", 33, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_128;
  }
  v33 = *(_QWORD *)(a1 + 64);
  if (v33 - *(_QWORD *)(a1 + 56) != 64)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureMatchingUnsanitized/src/DoGTracker.cpp", 292, (uint64_t)"sec_to_pri_matches_.size() == 2", 31, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_128;
    }
    v33 = *(_QWORD *)(a1 + 64);
  }
  if (!*(_BYTE *)(v33 - 8)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureMatchingUnsanitized/src/DoGTracker.cpp", 293, (uint64_t)"sec_to_pri_matches_.back().has_value()", 38, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80) != 48&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureMatchingUnsanitized/src/DoGTracker.cpp", 294, (uint64_t)"standard_deviations_.size() == 2", 32, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureMatchingUnsanitized/src/DoGTracker.cpp",
         295,
         (uint64_t)"features.size() == 2",
         20,
         (uint64_t)"",
         0,
         (void (*)(void **))sub_21023DDB0))
  {
LABEL_128:
    abort();
  }
  if (*(_BYTE *)(a1 + 272))
  {
    sub_20F40DB38(&v99);
    if (**(int **)(v99 + 56) > 4)
      return;
    v34 = *(unsigned __int8 *)(v99 + 72);
    v35 = sub_20E8C31DC(v99, "OSLogSurrogateAppender", 1, 0);
    v36 = v35;
    if (!v34 && !v35)
      return;
    v92[0] = &v99;
    v92[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v92[2] = std::chrono::system_clock::now().__d_.__rep_;
    v93 = 4;
    v94 = "unknown file";
    v95 = 301;
    v97 = 0;
    v98 = 0;
    v96 = "unknown function";
    v37 = v99;
    v38 = v99 + 16;
    if (*(char *)(v99 + 39) < 0)
    {
      v40 = *(const char **)(v99 + 16);
      v39 = *(_QWORD *)(v99 + 24);
    }
    else
    {
      v39 = *(unsigned __int8 *)(v99 + 39);
      v40 = (const char *)(*(_QWORD *)v92[0] + 16);
    }
    v42 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v42 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
      if ((_BYTE)v102 && SHIBYTE(v101[1]) < 0)
        operator delete(object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v43 = byte_254A4A4F8;
    else
      v43 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v44 = byte_254A4A4F8[23];
    else
      v44 = *(_QWORD *)&byte_254A4A4F8[8];
    object = os_log_create(v43, v40);
    v45 = v101;
    if (v44 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v44 >= 0x17)
    {
      v46 = v36;
      v47 = v40;
      v48 = v37;
      v49 = v34;
      v50 = v38;
      v51 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v44 | 7) != 0x17)
        v51 = v44 | 7;
      v52 = v51 + 1;
      v45 = operator new(v51 + 1);
      v101[1] = (void *)v44;
      *(_QWORD *)&v102 = v52 | 0x8000000000000000;
      v101[0] = v45;
      v38 = v50;
      v34 = v49;
      v37 = v48;
      v40 = v47;
      v36 = v46;
    }
    else
    {
      BYTE7(v102) = v44;
      if (!v44)
      {
LABEL_57:
        *((_BYTE *)v45 + v44) = 0;
        BYTE8(v102) = 1;
        v53 = __p;
        if (v39 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v39 >= 0x17)
        {
          v54 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v39 | 7) != 0x17)
            v54 = v39 | 7;
          v55 = v54 + 1;
          v53 = operator new(v54 + 1);
          __p[1] = (void *)v39;
          v104 = v55 | 0x8000000000000000;
          __p[0] = v53;
        }
        else
        {
          HIBYTE(v104) = v39;
          if (!v39)
            goto LABEL_65;
        }
        memmove(v53, v40, v39);
LABEL_65:
        *((_BYTE *)v53 + v39) = 0;
        v105 = 1;
        v56 = object;
        if (SHIBYTE(v104) < 0)
          operator delete(__p[0]);
        if (BYTE8(v102) && SBYTE7(v102) < 0)
          operator delete(v101[0]);
        if (object)
          os_release(object);
        if (v36 && *(_QWORD *)(v36 + 24))
        {
          v57 = _os_log_pack_size();
          v58 = (std::__shared_weak_count_vtbl *)operator new(v57, (std::align_val_t)8uLL);
          v59 = (std::__shared_weak_count *)operator new();
          v60 = v59;
          v59->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v59->__shared_owners_;
          v59->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v59->__shared_weak_owners_ = 0;
          v59[1].__vftable = v58;
          object = v58;
          v101[0] = v58;
          v101[1] = v59;
          do
            v62 = __ldxr(p_shared_owners);
          while (__stxr(v62 + 1, p_shared_owners));
          v102 = 0uLL;
          __p[0] = 0;
          do
            v63 = __ldaxr(p_shared_owners);
          while (__stlxr(v63 - 1, p_shared_owners));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v60);
          }
          v64 = object;
          *(_WORD *)_os_log_pack_fill() = 0;
          v65 = operator new();
          v66 = *(unsigned __int8 *)(v37 + 39);
          if ((v66 & 0x80u) == 0)
            v67 = v38;
          else
            v67 = *(_QWORD *)(v37 + 16);
          if ((v66 & 0x80u) != 0)
            v66 = *(_QWORD *)(v37 + 24);
          *(_QWORD *)v65 = v64;
          *(_OWORD *)(v65 + 8) = *(_OWORD *)v101;
          v101[0] = 0;
          v101[1] = 0;
          *(_OWORD *)(v65 + 24) = v102;
          v102 = 0uLL;
          *(_QWORD *)(v65 + 40) = v67;
          *(_QWORD *)(v65 + 48) = v66;
          *(_BYTE *)(v65 + 56) = 16;
          v106 = 0;
          v107 = v65;
          (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v36 + 24) + 40))(*(_QWORD *)(v36 + 24), &v107);
          v68 = v107;
          v107 = 0;
          if (v68)
          {
            v69 = *(std::__shared_weak_count **)(v68 + 32);
            if (v69)
            {
              v70 = (unint64_t *)&v69->__shared_owners_;
              do
                v71 = __ldaxr(v70);
              while (__stlxr(v71 - 1, v70));
              if (!v71)
              {
                ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                std::__shared_weak_count::__release_weak(v69);
              }
            }
            v72 = *(std::__shared_weak_count **)(v68 + 16);
            if (v72)
            {
              v73 = (unint64_t *)&v72->__shared_owners_;
              do
                v74 = __ldaxr(v73);
              while (__stlxr(v74 - 1, v73));
              if (!v74)
              {
                ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
                std::__shared_weak_count::__release_weak(v72);
              }
            }
            MEMORY[0x212BC6398](v68, 0x10F0C40B62ED6C6);
            v75 = v106;
            v106 = 0;
            if (v75)
            {
              v76 = *(std::__shared_weak_count **)(v75 + 32);
              if (v76)
              {
                v77 = (unint64_t *)&v76->__shared_owners_;
                do
                  v78 = __ldaxr(v77);
                while (__stlxr(v78 - 1, v77));
                if (!v78)
                {
                  ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                  std::__shared_weak_count::__release_weak(v76);
                }
              }
              v79 = *(std::__shared_weak_count **)(v75 + 16);
              if (v79)
              {
                v80 = (unint64_t *)&v79->__shared_owners_;
                do
                  v81 = __ldaxr(v80);
                while (__stlxr(v81 - 1, v80));
                if (!v81)
                {
                  ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                  std::__shared_weak_count::__release_weak(v79);
                }
              }
              MEMORY[0x212BC6398](v75, 0x10F0C40B62ED6C6);
            }
          }
          v82 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
          if (*((_QWORD *)&v102 + 1))
          {
            v83 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
            do
              v84 = __ldaxr(v83);
            while (__stlxr(v84 - 1, v83));
            if (!v84)
            {
              ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
              std::__shared_weak_count::__release_weak(v82);
            }
          }
          v85 = (std::__shared_weak_count *)v101[1];
          if (v101[1])
          {
            v86 = (unint64_t *)((char *)v101[1] + 8);
            do
              v87 = __ldaxr(v86);
            while (__stlxr(v87 - 1, v86));
            if (!v87)
            {
              ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
              std::__shared_weak_count::__release_weak(v85);
            }
          }
        }
        else
        {
          os_log_type_enabled(v56, OS_LOG_TYPE_ERROR);
          LOWORD(object) = 0;
          v88 = (void *)_os_log_send_and_compose_impl();
          if (v88)
            free(v88);
        }
        if (v34)
        {
          sub_20E8C003C((uint64_t)v92, "[Features Tracking] stereo matching is disabled");
          sub_20E863570((uint64_t)v92);
        }
        sub_20E863570((uint64_t)v92);
        v89 = v98;
        if (v98)
        {
          v90 = (unint64_t *)&v98->__shared_owners_;
          do
            v91 = __ldaxr(v90);
          while (__stlxr(v91 - 1, v90));
          if (!v91)
          {
            ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
            std::__shared_weak_count::__release_weak(v89);
          }
        }
        return;
      }
    }
    memmove(v45, v43, v44);
    goto LABEL_57;
  }
  v41 = *(_QWORD *)(a1 + 56);
  if (!*(_BYTE *)(v41 + 56))
    sub_20E866B34();
  sub_20F410C58(a1, 0, *(_QWORD *)(*(_QWORD *)a2 + 8), a5, a8, *(_QWORD *)(a1 + 8) + 24, (uint64_t *)(*(_QWORD *)(a1 + 80) + 24), v41 + 32);
}

void sub_20F410370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a27)
  {
    if (a26 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20F4103B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  sub_20E86E8C4((uint64_t *)(v3 - 96));
  sub_20E86E8C4((uint64_t *)(v3 - 104));
  sub_20E86E658((uint64_t)va1);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F4103E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  MEMORY[0x212BC6398](v3, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F410410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F41042C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F410440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *object,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a28 && a27 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20F410484(uint64_t a1, uint64_t a2, unint64_t a3, char **a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  BOOL v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  unint64_t v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  _BOOL4 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  double v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  __int128 *v59;
  char v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v70;
  _BOOL4 v72;
  uint64_t v73;
  unint64_t v74;
  BOOL v75;
  char **v77;
  _QWORD *v78;

  kdebug_trace();
  v77 = a4;
  if (*(_BYTE *)(a2 + 184))
  {
    v12 = *(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80);
    if (v12)
      v13 = v12 == *(_QWORD *)(a2 + 168) - *(_QWORD *)(a2 + 160);
    else
      v13 = 0;
    if (!v13)
      goto LABEL_14;
LABEL_9:
    v14 = (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 5;
    if (v14 == v12 >> 6 && *(_QWORD *)(a2 + 16) <= v14)
      goto LABEL_16;
    goto LABEL_14;
  }
  if (*(_QWORD *)(a2 + 160) == *(_QWORD *)(a2 + 168))
  {
    v12 = *(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80);
    goto LABEL_9;
  }
LABEL_14:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/PointDescriptorStore.h", 184, (uint64_t)"HasValidSize()", 14, (uint64_t)"Descriptor size mis-match", 25, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_101;
  }
  v14 = (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 5;
LABEL_16:
  v16 = (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 4;
  if (v14 <= v16)
  {
    if (v14 < v16)
      *(_QWORD *)(a5 + 8) = *(_QWORD *)a5 + 16 * v14;
  }
  else
  {
    sub_20E99C28C((char **)a5, v14 - v16);
  }
  if (*(_BYTE *)(a2 + 184))
  {
    v17 = *(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80);
    if (!v17)
      goto LABEL_30;
    if (v17 != *(_QWORD *)(a2 + 168) - *(_QWORD *)(a2 + 160))
      goto LABEL_30;
    v18 = (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 5;
    if (v18 != v17 >> 6)
      goto LABEL_30;
  }
  else
  {
    if (*(_QWORD *)(a2 + 160) != *(_QWORD *)(a2 + 168))
      goto LABEL_30;
    v18 = (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 5;
    if (v18 != (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 6)
      goto LABEL_30;
  }
  if (*(_QWORD *)(a2 + 16) <= v18)
  {
    v19 = *a6;
    v20 = (a6[1] - *a6) >> 3;
    v21 = v18 >= v20;
    v22 = v18 - v20;
    if (v18 <= v20)
      goto LABEL_32;
LABEL_29:
    sub_20E93D8FC((uint64_t)a6, v22);
    goto LABEL_34;
  }
LABEL_30:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/PointDescriptorStore.h", 184, (uint64_t)"HasValidSize()", 14, (uint64_t)"Descriptor size mis-match", 25, (void (*)(void **))sub_21023DDB0))
  {
LABEL_101:
    abort();
  }
  v18 = (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 5;
  v19 = *a6;
  v23 = (a6[1] - *a6) >> 3;
  v21 = v18 >= v23;
  v22 = v18 - v23;
  if (v18 > v23)
    goto LABEL_29;
LABEL_32:
  if (!v21)
    a6[1] = v19 + 8 * v18;
LABEL_34:
  v25 = *a4;
  v24 = a4[1];
  v26 = v24 - *v77;
  v27 = 0x6DB6DB6DB6DB6DB7 * (v26 >> 3);
  v28 = a3 - v27;
  if (a3 <= v27)
  {
    if (a3 >= v27)
      goto LABEL_62;
    v45 = &v25[56 * a3];
LABEL_59:
    v77[1] = v45;
    goto LABEL_62;
  }
  v29 = v77[2];
  if (0x6DB6DB6DB6DB6DB7 * ((v29 - v24) >> 3) >= v28)
  {
    v45 = &v24[56 * v28];
    v46 = 56 * a3 - v26 - 56;
    if (v46 < 0x38)
      goto LABEL_106;
    v47 = v46 / 0x38 + 1;
    v48 = v24 + 96;
    v49 = v47 & 0xFFFFFFFFFFFFFFELL;
    do
    {
      *(v48 - 56) = 1;
      *v48 = 1;
      *(_QWORD *)(v48 - 52) = 0;
      *(_QWORD *)(v48 + 4) = 0;
      *((_DWORD *)v48 - 11) = 220;
      *((_DWORD *)v48 + 3) = 220;
      v48 += 112;
      v49 -= 2;
    }
    while (v49);
    v24 += 56 * (v47 & 0xFFFFFFFFFFFFFFELL);
    if (v47 != (v47 & 0xFFFFFFFFFFFFFFELL))
    {
LABEL_106:
      do
      {
        v24[40] = 1;
        *((_DWORD *)v24 + 11) = 0;
        *((_DWORD *)v24 + 12) = 0;
        *((_DWORD *)v24 + 13) = 220;
        v24 += 56;
      }
      while (v24 != v45);
    }
    goto LABEL_59;
  }
  if (a3 > 0x492492492492492)
    sub_20E867F44();
  v30 = 0x6DB6DB6DB6DB6DB7 * ((v29 - v25) >> 3);
  v31 = 2 * v30;
  if (2 * v30 <= a3)
    v31 = a3;
  if (v30 >= 0x249249249249249)
    v32 = 0x492492492492492;
  else
    v32 = v31;
  if (v32 > 0x492492492492492)
    sub_20E877A38();
  v33 = (char *)operator new(56 * v32);
  v34 = &v33[8 * (v26 >> 3)];
  v35 = &v33[56 * a3];
  v36 = 56 * a3 - v26 - 56;
  v37 = v34;
  if (v36 < 0x38)
    goto LABEL_107;
  v38 = v36 / 0x38 + 1;
  v37 = &v34[56 * (v38 & 0xFFFFFFFFFFFFFFELL)];
  v39 = (uint64_t)&v33[8 * (v26 >> 3) + 96];
  v40 = v38 & 0xFFFFFFFFFFFFFFELL;
  do
  {
    *(_BYTE *)(v39 - 56) = 1;
    *(_BYTE *)v39 = 1;
    *(_QWORD *)(v39 - 52) = 0;
    *(_QWORD *)(v39 + 4) = 0;
    *(_DWORD *)(v39 - 44) = 220;
    *(_DWORD *)(v39 + 12) = 220;
    v39 += 112;
    v40 -= 2;
  }
  while (v40);
  if (v38 != (v38 & 0xFFFFFFFFFFFFFFELL))
  {
LABEL_107:
    do
    {
      v37[40] = 1;
      *((_DWORD *)v37 + 11) = 0;
      *((_DWORD *)v37 + 12) = 0;
      *((_DWORD *)v37 + 13) = 220;
      v37 += 56;
    }
    while (v37 != v35);
  }
  v41 = &v33[56 * v32];
  if (v24 != v25)
  {
    do
    {
      v42 = *((_QWORD *)v24 - 7);
      v24 -= 56;
      *((_QWORD *)v34 - 7) = v42;
      v34 -= 56;
      v43 = *(_OWORD *)(v24 + 8);
      v44 = *(_OWORD *)(v24 + 24);
      *(_OWORD *)(v34 + 40) = *(_OWORD *)(v24 + 40);
      *(_OWORD *)(v34 + 24) = v44;
      *(_OWORD *)(v34 + 8) = v43;
    }
    while (v24 != v25);
    *v77 = v34;
    v77[1] = v35;
    v77[2] = v41;
    if (!v25)
      goto LABEL_62;
    goto LABEL_61;
  }
  *v77 = v34;
  v77[1] = v35;
  v77[2] = v41;
  if (v25)
LABEL_61:
    operator delete(v25);
LABEL_62:
  v78 = (_QWORD *)a5;
  if (*(_BYTE *)(a1 + 273))
    v50 = *(_QWORD *)(a1 + 856) != *(_QWORD *)(a1 + 864);
  else
    v50 = 0;
  v51 = 0;
  v52 = 0;
  v53 = 0;
  v54 = 0;
  v55 = *(double *)(a1 + 160) * *(double *)(a1 + 104);
  while (1)
  {
    if (*(_BYTE *)(a2 + 184))
    {
      v67 = *(_QWORD *)(a2 + 80);
      v66 = *(_QWORD *)(a2 + 88);
      v68 = v66 - v67;
      if (v66 != v67 && v68 == *(_QWORD *)(a2 + 168) - *(_QWORD *)(a2 + 160))
        goto LABEL_78;
    }
    else if (*(_QWORD *)(a2 + 160) == *(_QWORD *)(a2 + 168))
    {
      v68 = *(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80);
LABEL_78:
      v65 = *(_QWORD *)(a2 + 56);
      v70 = (*(_QWORD *)(a2 + 64) - v65) >> 5;
      if (v70 == v68 >> 6 && *(_QWORD *)(a2 + 16) <= v70)
        goto LABEL_85;
    }
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/PointDescriptorStore.h", 184, (uint64_t)"HasValidSize()", 14, (uint64_t)"Descriptor size mis-match", 25, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v65 = *(_QWORD *)(a2 + 56);
    v70 = (*(_QWORD *)(a2 + 64) - v65) >> 5;
LABEL_85:
    if (v54 >= v70)
      break;
    if (v54 < a3)
    {
      if (*(_BYTE *)(a2 + 184))
        v72 = 0;
      else
        v72 = v50;
      if (v72)
      {
        kdebug_trace();
        v73 = *(_QWORD *)(a2 + 160);
        v74 = (*(_QWORD *)(a2 + 168) - v73) >> 6;
        if (a3 > v74)
        {
          sub_20ED406CC((char **)(a2 + 160), a3 - v74);
          v73 = *(_QWORD *)(a2 + 160);
        }
        sub_20F40DFC4((unint64_t *)(*(_QWORD *)(a2 + 80) + v53), (unint64_t *)(v73 + v53));
        kdebug_trace();
        v65 = *(_QWORD *)(a2 + 56);
      }
      v56 = v65 + v52;
      v57 = (int)*(float *)v56 | ((unint64_t)(int)*(float *)(v56 + 4) << 32);
      v58 = 80;
      if (v50)
        v58 = 160;
      v59 = (__int128 *)(*(_QWORD *)(a2 + v58) + v53);
      v60 = *(_BYTE *)(v56 + 24);
      v61 = *(_QWORD *)(v56 + 16);
      v62 = *v59;
      v63 = v59[1];
      v64 = &(*v77)[v51];
      *(_QWORD *)v64 = v57;
      *(_OWORD *)(v64 + 24) = v63;
      *(_OWORD *)(v64 + 8) = v62;
      v64[40] = v60;
      *(_QWORD *)(v64 + 44) = v61;
      *((_DWORD *)v64 + 13) = 220;
      v65 = *(_QWORD *)(a2 + 56);
    }
    *(float64x2_t *)(*v78 + 16 * v54) = vcvtq_f64_f32(*(float32x2_t *)(v65 + v52));
    *(double *)(*a6 + 8 * v54++) = v55 * *(float *)(*(_QWORD *)(a2 + 56) + v52 + 20);
    v53 += 64;
    v52 += 32;
    v51 += 56;
  }
  if (*(_BYTE *)(a2 + 184))
    v75 = 0;
  else
    v75 = v50;
  if (v75)
    *(_BYTE *)(a2 + 184) = 1;
  return kdebug_trace();
}

void sub_20F410C10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20F410C58(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  int **v24;
  int *v25;
  int *v26;
  uint64_t v27;
  unint64_t v28;
  float64x2_t v29;
  uint64_t v30;
  float64x2_t v31;
  int8x16_t v32;
  int8x16_t v35;
  double v39;
  double v40;
  uint64_t v41;
  double v42;
  char *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _BYTE *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  _OWORD *v56;
  __int128 *v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  float v67;
  float v68;
  void **v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  int v73;
  int v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _DWORD *v88;
  unint64_t v89;
  int v90;
  uint64_t v91;
  int32x4_t v92;
  int32x4_t *v93;
  int32x4_t v94;
  int32x4_t v95;
  uint64_t v96;
  _DWORD *v97;
  uint64_t v98;
  uint64_t v99;
  _DWORD *v100;
  unint64_t v101;
  int v102;
  unsigned int v103;
  uint64_t v104;
  int32x4_t v105;
  int32x4_t *v106;
  int32x4_t v107;
  int32x4_t v108;
  uint64_t v109;
  uint64_t v110;
  float *v111;
  unsigned int v112;
  int v113;
  unsigned int v114;
  uint64_t v115;
  float *v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  float *v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v126;
  unsigned int v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  signed int *v134;
  unsigned int *v135;
  unsigned int v136;
  uint64_t v140;
  float v141;
  unsigned int v142;
  int v143;
  int v144;
  float v145;
  unsigned int v146;
  unsigned int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unsigned int v152;
  int v153;
  signed int v154;
  uint64_t v155;
  float v156;
  float v157;
  uint8x16_t v158;
  unsigned __int16 v159;
  signed int *v161;
  _DWORD *v162;
  unsigned int v163;
  unint64_t v164;
  uint64_t *v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t i;
  uint64_t v169;
  unint64_t v170;
  unsigned int v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  _QWORD *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  unsigned int v182;
  char *v183;
  _DWORD *v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  _DWORD *v190;
  int v191;
  float **v192;
  uint64_t v194;
  unsigned int v195;
  uint64_t v196;
  int v197;
  _QWORD *v198;
  unsigned int v199;
  unsigned int v200;
  unint64_t v201;
  unsigned int v202;
  int8x16_t v203;
  unsigned int v204;
  int8x16_t v205;
  unsigned int v206;
  signed int v207;
  uint64_t v208;
  unsigned int v209;
  uint64_t v210;
  int v211;
  _QWORD *v212;
  int8x16_t v213;
  uint64_t *v214;
  uint64_t (**v215)(uint64_t);
  char v216;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  uint64_t v218;
  int v219;
  void **v220;
  void *v221[2];
  char v222;
  char *v223;
  char *v224;
  char *v225;
  char *v226;
  char *v227;
  char *v228;
  unint64_t v229;

  v194 = a2;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 792) - *(_QWORD *)(a1 + 784)) >> 3) <= a2
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureMatchingUnsanitized/src/DoGTracker.cpp", 335, (uint64_t)"stream_index < cur_descriptors_.size()", 38, (uint64_t)"Stream index out of range", 25, (void (*)(void **))sub_21023DDB0))
  {
LABEL_207:
    abort();
  }
  if (*(_BYTE *)(a3 + 184))
  {
    v15 = *(_QWORD *)(a3 + 80);
    v14 = *(_QWORD *)(a3 + 88);
    v16 = v14 - v15;
    _ZF = v14 != v15 && v16 == *(_QWORD *)(a3 + 168) - *(_QWORD *)(a3 + 160);
    if (!_ZF)
      goto LABEL_16;
  }
  else
  {
    if (*(_QWORD *)(a3 + 160) != *(_QWORD *)(a3 + 168))
      goto LABEL_16;
    v16 = *(_QWORD *)(a3 + 88) - *(_QWORD *)(a3 + 80);
  }
  v18 = (uint64_t)(*(_QWORD *)(a3 + 64) - *(_QWORD *)(a3 + 56)) >> 5;
  v19 = *(_QWORD *)(a3 + 16);
  v20 = v18 != v16 >> 6 || v19 > v18;
  if (!v20)
    goto LABEL_18;
LABEL_16:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/PointDescriptorStore.h", 184, (uint64_t)"HasValidSize()", 14, (uint64_t)"Descriptor size mis-match", 25, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_207;
  }
  v18 = (uint64_t)(*(_QWORD *)(a3 + 64) - *(_QWORD *)(a3 + 56)) >> 5;
  v19 = *(_QWORD *)(a3 + 16);
LABEL_18:
  v229 = v18 - v19;
  sub_20F410484(a1, a3, v18 - v19, (char **)(*(_QWORD *)(a1 + 784) + 24 * v194), a6, a7);
  v226 = 0;
  v227 = 0;
  v228 = 0;
  v210 = a1;
  v21 = *(_QWORD *)(a1 + 784);
  if (a4)
  {
    v22 = v21 + 24 * v194;
    v25 = *(int **)(v22 + 8);
    v24 = (int **)(v22 + 8);
    v23 = v25;
    v26 = *(int **)(v21 + 24 * v194);
    v27 = (char *)v25 - (char *)v26;
    if (v25 != v26)
    {
      v28 = 0x6DB6DB6DB6DB6DB7 * (v27 >> 3);
      if (v28 >> 61)
LABEL_205:
        sub_20E867F44();
      v226 = (char *)operator new(0x6DB6DB6DB6DB6DB8 * (v27 >> 3));
      v227 = v226;
      v228 = &v226[8 * v28];
      v26 = *(int **)(v21 + 24 * v194);
      v23 = *v24;
    }
    if (v26 != v23)
    {
      v29.f64[0] = NAN;
      v29.f64[1] = NAN;
      v213 = (int8x16_t)vnegq_f64(v29);
      while (1)
      {
        v43 = v227;
        if (v227 < v228)
        {
          *(_QWORD *)v227 = *(_QWORD *)v26;
          v30 = (uint64_t)(v43 + 8);
        }
        else
        {
          v44 = v226;
          v45 = (v227 - v226) >> 3;
          v46 = v45 + 1;
          if ((unint64_t)(v45 + 1) >> 61)
            goto LABEL_205;
          v47 = v228 - v226;
          if ((v228 - v226) >> 2 > v46)
            v46 = v47 >> 2;
          if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
            v48 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v48 = v46;
          if (v48)
          {
            if (v48 >> 61)
              sub_20E877A38();
            v49 = operator new(8 * v48);
            v50 = &v49[8 * v45];
            *(_QWORD *)v50 = *(_QWORD *)v26;
            v30 = (uint64_t)(v50 + 8);
            v51 = v43 - v44;
            if (v43 != v44)
            {
LABEL_46:
              v52 = v51 - 8;
              if (v52 < 0x58)
                goto LABEL_211;
              if ((unint64_t)(v44 - v49) < 0x20)
                goto LABEL_211;
              v53 = (v52 >> 3) + 1;
              v54 = 8 * (v53 & 0x3FFFFFFFFFFFFFFCLL);
              v55 = &v43[-v54];
              v50 -= v54;
              v56 = &v49[8 * v45 - 16];
              v57 = (__int128 *)(v43 - 16);
              v58 = v53 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v59 = *v57;
                *(v56 - 1) = *(v57 - 1);
                *v56 = v59;
                v56 -= 2;
                v57 -= 2;
                v58 -= 4;
              }
              while (v58);
              v43 = v55;
              if (v53 != (v53 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_211:
                do
                {
                  v60 = *((_QWORD *)v43 - 1);
                  v43 -= 8;
                  *((_QWORD *)v50 - 1) = v60;
                  v50 -= 8;
                }
                while (v43 != v44);
              }
              v43 = v226;
              v226 = v50;
              v228 = &v49[8 * v48];
              if (!v43)
                goto LABEL_25;
LABEL_43:
              operator delete(v43);
              goto LABEL_25;
            }
          }
          else
          {
            v49 = 0;
            v50 = (char *)(8 * v45);
            *(_QWORD *)(8 * v45) = *(_QWORD *)v26;
            v30 = 8 * v45 + 8;
            v51 = v43 - v44;
            if (v43 != v44)
              goto LABEL_46;
          }
          v226 = v50;
          v228 = &v49[8 * v48];
          if (v43)
            goto LABEL_43;
        }
LABEL_25:
        v227 = (char *)v30;
        v31.f64[0] = *(float64_t *)(a4 + 16);
        v32 = *(int8x16_t *)(a4 + 24);
        _Q4 = *(int8x16_t *)(a4 + 48);
        _D6 = (double)v26[1];
        v31.f64[1] = *(float64_t *)(a4 + 40);
        v35 = (int8x16_t)vaddq_f64(v31, vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)a4, (int64x2_t)v32), (double)*v26), (float64x2_t)vzip2q_s64(*(int64x2_t *)a4, (int64x2_t)v32), _D6));
        __asm { FMLA            D1, D6, V4.D[1] }
        v39 = *(double *)(a4 + 64) + _D1;
        if (v39 == 0.0)
          v39 = 1.0;
        *(double *)v32.i64 = *(double *)&v35.i64[1] / v39;
        _Q4.i64[0] = 0x41DFFFFFFFC00000;
        *(_QWORD *)&v40 = vbslq_s8(v213, _Q4, v32).u64[0];
        if (fabs(*(double *)&v35.i64[1] / v39) > 2147483650.0)
          *(double *)v32.i64 = v40;
        v41 = (int)*(double *)v32.i64;
        *(double *)v35.i64 = *(double *)v35.i64 / v39;
        *(_QWORD *)&v42 = vbslq_s8(v213, _Q4, v35).u64[0];
        if (fabs(*(double *)v35.i64) > 2147483650.0)
          *(double *)v35.i64 = v42;
        *(_QWORD *)v26 = (int)*(double *)v35.i64 | (unint64_t)(v41 << 32);
        v26 += 14;
        if (v26 == v23)
        {
          v21 = *(_QWORD *)(v210 + 784);
          break;
        }
      }
    }
  }
  v223 = 0;
  v224 = 0;
  v225 = 0;
  v61 = v194;
  if (*(_BYTE *)(a5 + 4))
  {
    v62 = (uint64_t *)(v21 + 24 * v194);
    v63 = v62[1];
    v64 = *v62;
    v65 = v63 - *v62;
    if (v63 != *v62)
    {
      v66 = 0x6DB6DB6DB6DB6DB7 * (v65 >> 3);
      if (v66 >> 62)
        sub_20E867F44();
      v223 = (char *)operator new(0xB6DB6DB6DB6DB6DCLL * (v65 >> 3));
      v224 = v223;
      v225 = &v223[4 * v66];
      v64 = *v62;
      v63 = v62[1];
      v61 = v194;
    }
    for (; v64 != v63; v64 += 56)
    {
      v67 = *(float *)(v64 + 44) + *(float *)a5;
      v68 = 6.2832;
      if (v67 <= 6.2832)
        v68 = 0.0;
      *(float *)(v64 + 44) = v67 - v68;
    }
  }
  kdebug_trace();
  v69 = v221;
  sub_20F40DE34((uint64_t)v221, &v229);
  v70 = v210;
  if (v222 < 0)
    v69 = (void **)v221[0];
  v216 = 0;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v218 = 0;
  v215 = &off_24CA1E140;
  v219 = 3;
  v220 = v69;
  *(_QWORD *)(a8 + 8) = *(_QWORD *)a8;
  v71 = (_QWORD *)(*(_QWORD *)(v210 + 784) + 24 * v61);
  v212 = v71;
  v192 = (float **)(v71 + 1);
  if (*v71 == v71[1])
    goto LABEL_185;
  v72 = (_QWORD *)(*(_QWORD *)(v210 + 808) + 24 * v61);
  if (*v72 == v72[1])
    goto LABEL_185;
  v204 = *(_DWORD *)(v210 + 244);
  v211 = *(_DWORD *)(v210 + 240);
  kdebug_trace();
  *(_QWORD *)(a8 + 8) = *(_QWORD *)a8;
  v73 = *(_DWORD *)(v210 + 616);
  v74 = *(_DWORD *)(v210 + 620);
  v75 = *(_DWORD *)(v210 + 628);
  v76 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)*v192 - *v212) >> 3);
  v77 = v72[1];
  v78 = *v72;
  *(_DWORD *)(v210 + 744) = 37;
  v191 = v76;
  v79 = v76 + 74;
  v80 = *(_QWORD *)(v210 + 760);
  v81 = *(_QWORD *)(v210 + 752);
  v82 = (v80 - v81) >> 2;
  v214 = (uint64_t *)(v210 + 752);
  if (v79 <= v82)
  {
    if (v79 < v82)
    {
      v80 = v81 + 4 * v79;
      *(_QWORD *)(v210 + 760) = v80;
    }
    LODWORD(v83) = 37;
    v84 = 74;
  }
  else
  {
    sub_20E93DC84(v210 + 752, v79 - v82);
    v80 = *(_QWORD *)(v210 + 760);
    v81 = *(_QWORD *)(v210 + 752);
    v83 = *(unsigned int *)(v210 + 744);
    v84 = 2 * v83;
  }
  v85 = ((v80 - v81) >> 2) - v84;
  v86 = v85;
  v87 = (v83 + v85);
  if (v85 != v87)
  {
    v88 = (_DWORD *)(v81 + 4 * v85);
    v89 = 4 * v87 - 4 * v85 - 4;
    if (v89 >= 0x1C)
    {
      v91 = (v89 >> 2) + 1;
      v90 = v87 + (v91 & 0xFFFFFFF8);
      v88 += v91 & 0x7FFFFFFFFFFFFFF8;
      v92 = vaddq_s32(vdupq_n_s32(v87), (int32x4_t)xmmword_210365350);
      v93 = (int32x4_t *)(4 * v85 + v81 + 16);
      v94.i64[0] = 0x400000004;
      v94.i64[1] = 0x400000004;
      v95.i64[0] = 0x800000008;
      v95.i64[1] = 0x800000008;
      v96 = v91 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v93[-1] = v92;
        *v93 = vaddq_s32(v92, v94);
        v92 = vaddq_s32(v92, v95);
        v93 += 2;
        v96 -= 8;
      }
      while (v96);
      if (v91 == (v91 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_80;
    }
    else
    {
      v90 = v87;
    }
    v97 = (_DWORD *)(v81 + 4 * v87);
    do
      *v88++ = v90++;
    while (v88 != v97);
LABEL_80:
    LODWORD(v83) = *(_DWORD *)(v210 + 744);
    v86 = (v83 + v85);
  }
  if (!(_DWORD)v83)
  {
    v103 = 0;
    goto LABEL_90;
  }
  v98 = (v85 + 2 * v83);
  v99 = 4 * v86;
  v100 = (_DWORD *)(v81 + 4 * v86);
  v101 = 4 * v98 - 4 * v86 - 4;
  if (v101 >= 0x1C)
  {
    v104 = (v101 >> 2) + 1;
    v102 = v85 + (v104 & 0xFFFFFFF8);
    v100 += v104 & 0x7FFFFFFFFFFFFFF8;
    v105 = vaddq_s32(vdupq_n_s32(v85), (int32x4_t)xmmword_210365350);
    v106 = (int32x4_t *)(v99 + v81 + 16);
    v107.i64[0] = 0x400000004;
    v107.i64[1] = 0x400000004;
    v108.i64[0] = 0x800000008;
    v108.i64[1] = 0x800000008;
    v109 = v104 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v106[-1] = v105;
      *v106 = vaddq_s32(v105, v107);
      v105 = vaddq_s32(v105, v108);
      v106 += 2;
      v109 -= 8;
    }
    while (v109);
    if (v104 == (v104 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_89;
  }
  else
  {
    v102 = v85;
  }
  do
    *v100++ = v102++;
  while (v100 != (_DWORD *)(v81 + 4 * v98));
LABEL_89:
  v103 = *(_DWORD *)(v210 + 744);
LABEL_90:
  v110 = (v77 - v78) >> 3;
  v111 = *v192;
  v112 = ((unint64_t)(v80 - v81) >> 2) - v103;
  if ((float *)*v212 != *v192)
  {
    v113 = 0;
    v114 = 0;
    v115 = *(_QWORD *)(v210 + 672);
    v116 = (float *)(*v212 + 44);
    do
    {
      v121 = *((_DWORD *)v116 - 11);
      v122 = *((_DWORD *)v116 - 10);
      v120 = v116 - 11;
      if (v121 < 6 || v122 < 6 || v121 >= v73 - 6 || v122 >= v74 - 6)
      {
        v117 = 0;
        ++v113;
      }
      else
      {
        v126 = vcvtms_u32_f32(*v116 * 2.8648) % 0x12;
        if (*((_BYTE *)v116 - 4))
          v117 = v126 + 1;
        else
          v117 = v126 + 19;
      }
      v118 = v115 + 16 * v114;
      *(_DWORD *)(v118 + 12) = v114;
      *(_QWORD *)v118 = 0xFFFFFFFF80000000;
      v119 = 4 * (v117 + v112);
      *(_DWORD *)(v81 + 4 * *(unsigned int *)(v81 + v119)) = v114;
      *(_DWORD *)(v81 + v119) = v114++;
      v116 += 14;
    }
    while (v120 + 14 != v111);
    v103 = *(_DWORD *)(v210 + 744);
    v127 = -1227133513 * v110;
    if (!v103)
      goto LABEL_112;
    goto LABEL_110;
  }
  v113 = 0;
  v127 = -1227133513 * v110;
  if (v103)
  {
LABEL_110:
    v128 = v103;
    do
    {
      *(_DWORD *)(v81 + 4 * *(unsigned int *)(v81 + 4 * v112)) = v112;
      ++v112;
      --v128;
    }
    while (v128);
  }
LABEL_112:
  v129 = v127;
  if (v127)
  {
    v130 = 0;
    v131 = 0;
    v132 = v73 - 6;
    v133 = v74 - 6;
    v198 = v72;
    v197 = v113;
    v196 = v127;
    v195 = v74 - 6;
    while (1)
    {
      v135 = (unsigned int *)(*v72 + 56 * v130);
      v136 = v135[1];
      if (*v135 >= 6 && v136 >= 6 && *v135 < v132 && v136 < v133)
      {
        v199 = v131;
        v201 = v130;
        v140 = *v72 + 56 * v130;
        v141 = *(float *)(v140 + 44);
        v142 = vcvtms_u32_f32((float)(v141 + 5.9341) * 2.8648);
        v206 = vcvtms_u32_f32((float)(v141 + 6.6323) * 2.8648);
        v143 = *(unsigned __int8 *)(v140 + 40);
        if (*(_BYTE *)(v140 + 40))
          v144 = 1;
        else
          v144 = 19;
        v209 = v144;
        if (v206 + 1 > v142)
        {
          v202 = 0;
          v205 = *(int8x16_t *)(v140 + 8);
          v203 = *(int8x16_t *)(v140 + 24);
          v145 = *(float *)(v140 + 48);
          v147 = *v135;
          v146 = v135[1];
          v207 = 0x80000000;
          v200 = -1;
          v148 = *v214;
          while (1)
          {
            v149 = v142 % 0x12 + v209;
            v150 = *(unsigned int *)(v70 + 744);
            v151 = (unint64_t)(*(_QWORD *)(v70 + 760) - v148) >> 2;
            v152 = *(_DWORD *)(v148 + 4 * (v151 - 2 * v150 + v149));
            v153 = v149 - v150 + v151;
            while (v153 != v152)
            {
              v155 = *v212;
              if ((*(_DWORD *)(*v212 + 56 * v152) - v147) * (*(_DWORD *)(*v212 + 56 * v152) - v147)
                 + (*(_DWORD *)(*v212 + 56 * v152 + 4) - v146) * (*(_DWORD *)(*v212 + 56 * v152 + 4) - v146) >= v75
                || *(unsigned __int8 *)(v155 + 56 * v152 + 40) != v143
                || vabds_f32(*(float *)(v155 + 56 * v152 + 48), v145) > 0.5)
              {
                goto LABEL_136;
              }
              v156 = vabds_f32(v141, *(float *)(v155 + 56 * v152 + 44));
              v157 = fabs(v156 + -6.2832);
              if (LODWORD(v157) >= LODWORD(v156))
                v157 = v156;
              if (v157 > 0.34907)
                goto LABEL_136;
              v208 = *(_QWORD *)(v210 + 672);
              if (v211 != 256)
              {
                if (v211 == 128)
                {
                  v158 = (uint8x16_t)vcntq_s8(veorq_s8(*(int8x16_t *)(v155 + 56 * v152 + 8), v205));
                  goto LABEL_149;
                }
                if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureMatchingUnsanitized/include/VIO/FeatureMatchingUnsanitized/DescriptorFreak.hpp", 100, (uint64_t)"num_matching_bits == 256", 24, (uint64_t)"Number of bits for matching can only be 128/256", 47, (void (*)(void **))sub_21023DDB0))
                {
                  abort();
                }
              }
              v158 = (uint8x16_t)vaddq_s8(vcntq_s8(veorq_s8(*(int8x16_t *)(v155 + 56 * v152 + 24), v203)), vcntq_s8(veorq_s8(*(int8x16_t *)(v155 + 56 * v152 + 8), v205)));
LABEL_149:
              v159 = vaddlvq_u8(v158);
              v154 = v211 - v159;
              if (v159 > v204 || v154 == 0x7FFFFFFF)
                goto LABEL_136;
              v161 = (signed int *)(v208 + 16 * v152);
              if (*v161 < v154)
              {
                *v161 = v154;
                v161[1] = v201;
                v162 = v161 + 2;
LABEL_159:
                *v162 = 0;
                goto LABEL_160;
              }
              if (*v161 == v154)
              {
                v162 = v161 + 2;
                if (v161[2] || v201 < v161[1])
                {
                  v161[1] = v201;
                  goto LABEL_159;
                }
              }
LABEL_160:
              v163 = v161[3];
              if (v207 < v154)
                goto LABEL_135;
              if (v207 == v154)
              {
                if (v202 > v209)
                {
                  v154 = v207;
LABEL_135:
                  v207 = v154;
                  v200 = v163;
                  v202 = v209;
                  goto LABEL_136;
                }
                if (v202 == v209)
                {
                  v154 = v207;
                  if (v200 > v163)
                    goto LABEL_135;
                }
              }
LABEL_136:
              v148 = *v214;
              v152 = *(_DWORD *)(*v214 + 4 * v152);
            }
            _ZF = v142++ == v206;
            v70 = v210;
            if (_ZF)
              goto LABEL_115;
          }
        }
        v202 = 0;
        v200 = -1;
        v207 = 0x80000000;
LABEL_115:
        v130 = v201;
        v134 = (signed int *)(*(_QWORD *)(v70 + 720) + 12 * v201);
        *v134 = v207;
        v134[1] = v200;
        v134[2] = v202;
        v131 = v199 + 1;
        v72 = v198;
        v113 = v197;
        v129 = v196;
        v133 = v195;
        v132 = v73 - 6;
      }
      if (++v130 == v129)
        goto LABEL_167;
    }
  }
  v131 = 0;
LABEL_167:
  LODWORD(v164) = v191 - v113;
  if (v131 >= v191 - v113)
    v164 = v164;
  else
    v164 = v131;
  v165 = *(uint64_t **)a8;
  v166 = (uint64_t)(*(_QWORD *)(a8 + 8) - *(_QWORD *)a8) >> 3;
  if (v164 <= v166)
  {
    if (v164 < v166)
      *(_QWORD *)(a8 + 8) = &v165[v164];
  }
  else
  {
    sub_20EE015F4((void **)a8, v164 - v166);
    v165 = *(uint64_t **)a8;
  }
  v167 = *v214;
  for (i = 1; i != 37; ++i)
  {
    v169 = *(unsigned int *)(v70 + 744);
    v170 = (unint64_t)(*(_QWORD *)(v70 + 760) - v167) >> 2;
    v171 = *(_DWORD *)(v167 + 4 * (i - 2 * v169 + v170));
    v172 = i - v169 + v170;
    while (v172 != v171)
    {
      v173 = *(_QWORD *)(v70 + 672) + 16 * v171;
      v174 = *(unsigned int *)(v173 + 4);
      if ((_DWORD)v174 != -1)
      {
        v175 = *(unsigned int *)(*(_QWORD *)(v70 + 720) + 12 * v174 + 4);
        if ((_DWORD)v175 == *(_DWORD *)(v173 + 12))
        {
          *v165++ = v175 | (v174 << 32);
          v167 = *v214;
        }
      }
      v171 = *(_DWORD *)(v167 + 4 * v171);
    }
  }
  if (v165 != *(uint64_t **)(a8 + 8))
    *(_QWORD *)(a8 + 8) = v165;
  kdebug_trace();
  v61 = v194;
LABEL_185:
  sub_210215814((uint64_t)&v215);
  if (v222 < 0)
    operator delete(v221[0]);
  kdebug_trace();
  if (v226 != v227)
  {
    v176 = (_QWORD *)(*(_QWORD *)(v70 + 784) + 24 * v61);
    v177 = v176[1];
    v178 = v177 - *v176;
    if (v177 != *v176)
    {
      v179 = 0;
      v180 = 0;
      v181 = 0x6DB6DB6DB6DB6DB7 * (v178 >> 3);
      v182 = 1;
      do
      {
        v183 = (char *)(*v176 + v179);
        if (v183 != &v226[v180])
          *(_QWORD *)v183 = *(_QWORD *)&v226[v180];
        v180 += 8;
        v179 += 56;
        v20 = v181 > v182++;
      }
      while (v20);
    }
  }
  v184 = v223;
  if (v223 == v224
    || (v185 = (uint64_t *)(*(_QWORD *)(v70 + 784) + 24 * v61), v186 = *v185, (v187 = v185[1] - *v185) == 0))
  {
    if (!v223)
      goto LABEL_201;
  }
  else
  {
    v188 = 0;
    v189 = 0x6DB6DB6DB6DB6DB7 * (v187 >> 3);
    v190 = (_DWORD *)(v186 + 44);
    do
    {
      *v190 = v184[v188];
      v190 += 14;
      ++v188;
    }
    while (v189 > v188);
  }
  operator delete(v184);
LABEL_201:
  if (v226)
  {
    v227 = v226;
    operator delete(v226);
  }
}

void sub_20F411BE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;
  void *v38;
  void *v39;

  v38 = *(void **)(v36 - 176);
  if (v38)
  {
    *(_QWORD *)(v36 - 168) = v38;
    operator delete(v38);
  }
  v39 = *(void **)(v36 - 152);
  if (v39)
  {
    *(_QWORD *)(v36 - 144) = v39;
    operator delete(v39);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20F411C50(_QWORD *result)
{
  char *v1;
  char *v2;
  unint64_t v3;
  char *v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;

  v1 = (char *)result[101];
  v2 = (char *)result[102];
  if (v1 != v2)
  {
    v3 = v2 - v1 - 24;
    v4 = (char *)result[101];
    if (v3 < 0x18)
      goto LABEL_26;
    v5 = v3 / 0x18 + 1;
    v4 = &v1[24 * (v5 & 0x1FFFFFFFFFFFFFFELL)];
    v6 = (uint64_t *)(v1 + 24);
    v7 = v5 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v8 = *v6;
      *(v6 - 2) = *(v6 - 3);
      v6[1] = v8;
      v6 += 6;
      v7 -= 2;
    }
    while (v7);
    if (v5 != (v5 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_26:
      do
      {
        *((_QWORD *)v4 + 1) = *(_QWORD *)v4;
        v4 += 24;
      }
      while (v4 != v2);
    }
  }
  v9 = (char *)result[98];
  v10 = (char *)result[99];
  if (v9 != v10)
  {
    v11 = v10 - v9 - 24;
    v12 = (char *)result[98];
    if (v11 < 0x18)
      goto LABEL_27;
    v13 = v11 / 0x18 + 1;
    v12 = &v9[24 * (v13 & 0x1FFFFFFFFFFFFFFELL)];
    v14 = (uint64_t *)(v9 + 24);
    v15 = v13 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v16 = *v14;
      *(v14 - 2) = *(v14 - 3);
      v14[1] = v16;
      v14 += 6;
      v15 -= 2;
    }
    while (v15);
    if (v13 != (v13 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_27:
      do
      {
        *((_QWORD *)v12 + 1) = *(_QWORD *)v12;
        v12 += 24;
      }
      while (v12 != v10);
    }
  }
  v17 = (char *)result[104];
  v18 = (char *)result[105];
  if (v17 != v18)
  {
    v19 = v18 - v17 - 24;
    v20 = (char *)result[104];
    if (v19 < 0x18)
      goto LABEL_28;
    v21 = v19 / 0x18 + 1;
    v20 = &v17[24 * (v21 & 0x1FFFFFFFFFFFFFFELL)];
    v22 = (uint64_t *)(v17 + 24);
    v23 = v21 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v24 = *v22;
      *(v22 - 2) = *(v22 - 3);
      v22[1] = v24;
      v22 += 6;
      v23 -= 2;
    }
    while (v23);
    if (v21 != (v21 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_28:
      do
      {
        *((_QWORD *)v20 + 1) = *(_QWORD *)v20;
        v20 += 24;
      }
      while (v20 != v18);
    }
  }
  v25 = result[1];
  v26 = -1431655765 * ((unint64_t)(result[2] - v25) >> 3);
  if ((_DWORD)v26)
  {
    v27 = result[7];
    v28 = (_QWORD *)(v25 + 8);
    v29 = (_QWORD *)(result[10] + 8);
    v30 = (_QWORD *)(result[4] + 8);
    do
    {
      *v28 = *(v28 - 1);
      *v30 = *(v30 - 1);
      if (*(_BYTE *)(v27 + 24))
        *(_QWORD *)(v27 + 8) = *(_QWORD *)v27;
      v28 += 3;
      *v29 = *(v29 - 1);
      v29 += 3;
      v27 += 32;
      v30 += 3;
      --v26;
    }
    while (v26);
  }
  return result;
}

void sub_20F411E58(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  void *v22;

  v5 = *(_QWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 3) >= a2)
  {
    if (a2)
    {
      v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(a1 + 8), v12);
      v5 = (_QWORD *)((char *)v5 + v12);
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(_QWORD **)a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(_QWORD *)a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_20E867F44();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL)
        sub_20E877A38();
      v11 = (char *)operator new(24 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[24 * v7];
    v14 = &v11[24 * v10];
    v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 == v6)
    {
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
    }
    else
    {
      do
      {
        v17 = v13;
        *((_QWORD *)v13 - 2) = 0;
        *((_QWORD *)v13 - 1) = 0;
        v18 = *(_OWORD *)(v5 - 3);
        v5 -= 3;
        *(_OWORD *)(v13 - 24) = v18;
        v13 -= 24;
        *((_QWORD *)v17 - 1) = v5[2];
        *v5 = 0;
        v5[1] = 0;
        v5[2] = 0;
      }
      while (v5 != v6);
      v5 = *(_QWORD **)a1;
      v19 = *(_QWORD **)(a1 + 8);
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (v19 != v5)
      {
        v20 = v19;
        do
        {
          v22 = (void *)*(v20 - 3);
          v20 -= 3;
          v21 = v22;
          if (v22)
          {
            *(v19 - 2) = v21;
            operator delete(v21);
          }
          v19 = v20;
        }
        while (v20 != v5);
      }
    }
    if (v5)
      operator delete(v5);
  }
}

void sub_20F41202C(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  char *v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  _QWORD *v27;
  _BYTE *v28;
  void *v29;

  v5 = (_BYTE *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if (a2 > (v4 - (uint64_t)v5) >> 5)
  {
    v7 = (uint64_t)&v5[-*a1] >> 5;
    if ((v7 + a2) >> 59)
      sub_20E867F44();
    v8 = v4 - *a1;
    v9 = v8 >> 4;
    if (v8 >> 4 <= v7 + a2)
      v9 = v7 + a2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
      v10 = 0x7FFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    if (v10)
    {
      if (v10 >> 59)
        sub_20E877A38();
      v11 = (char *)operator new(32 * v10);
      v12 = (uint64_t)&v11[32 * v7];
      v13 = v12 + 32 * a2;
      v14 = (_BYTE *)v12;
      v15 = (a2 - 1) & 0x7FFFFFFFFFFFFFFLL;
      if (!v15)
        goto LABEL_24;
    }
    else
    {
      v11 = 0;
      v12 = 32 * v7;
      v13 = 32 * v7 + 32 * a2;
      v14 = (_BYTE *)(32 * v7);
      v15 = (a2 - 1) & 0x7FFFFFFFFFFFFFFLL;
      if (!v15)
      {
        do
        {
LABEL_24:
          *v14 = 0;
          v14[24] = 0;
          v14 += 32;
        }
        while (v14 != (_BYTE *)v13);
LABEL_25:
        v22 = &v11[32 * v10];
        v23 = (_BYTE *)*a1;
        if (v5 == (_BYTE *)*a1)
        {
          *a1 = v12;
          a1[1] = v13;
          a1[2] = (uint64_t)v22;
        }
        else
        {
          v24 = 0;
          do
          {
            v25 = v12 + v24;
            v26 = &v5[v24];
            *(_BYTE *)(v25 - 32) = 0;
            *(_BYTE *)(v25 - 8) = 0;
            if (v5[v24 - 8])
            {
              v27 = v26 - 32;
              *(_QWORD *)(v25 - 24) = 0;
              *(_QWORD *)(v25 - 16) = 0;
              *(_OWORD *)(v25 - 32) = *((_OWORD *)v26 - 2);
              *(_QWORD *)(v25 - 16) = *((_QWORD *)v26 - 2);
              *v27 = 0;
              v27[1] = 0;
              v27[2] = 0;
              *(_BYTE *)(v25 - 8) = 1;
            }
            v24 -= 32;
          }
          while (&v5[v24] != v23);
          v6 = (_BYTE *)*a1;
          v28 = (_BYTE *)a1[1];
          *a1 = v12 + v24;
          a1[1] = v13;
          a1[2] = (uint64_t)v22;
          while (v28 != v6)
          {
            if (*(v28 - 8))
            {
              v29 = (void *)*((_QWORD *)v28 - 4);
              if (v29)
              {
                *((_QWORD *)v28 - 3) = v29;
                operator delete(v29);
              }
            }
            v28 -= 32;
          }
        }
        if (v6)
          operator delete(v6);
        return;
      }
    }
    v19 = v15 + 1;
    v14 = (_BYTE *)(v12 + 32 * (v19 & 0xFFFFFFFFFFFFFFELL));
    v20 = (_BYTE *)(v12 + 32);
    v21 = v19 & 0xFFFFFFFFFFFFFFELL;
    do
    {
      *(v20 - 32) = 0;
      *v20 = 0;
      *(v20 - 8) = 0;
      v20[24] = 0;
      v20 += 64;
      v21 -= 2;
    }
    while (v21);
    if (v19 == (v19 & 0xFFFFFFFFFFFFFFELL))
      goto LABEL_25;
    goto LABEL_24;
  }
  if (a2)
  {
    if (((a2 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0)
      goto LABEL_44;
    v16 = ((a2 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
    v6 = &v5[32 * (v16 & 0xFFFFFFFFFFFFFFELL)];
    v17 = v5 + 32;
    v18 = v16 & 0xFFFFFFFFFFFFFFELL;
    do
    {
      *(v17 - 32) = 0;
      *v17 = 0;
      *(v17 - 8) = 0;
      v17[24] = 0;
      v17 += 64;
      v18 -= 2;
    }
    while (v18);
    if (v16 != (v16 & 0xFFFFFFFFFFFFFFELL))
    {
LABEL_44:
      do
      {
        *v6 = 0;
        v6[24] = 0;
        v6 += 32;
      }
      while (v6 != &v5[32 * a2]);
    }
    v6 = &v5[32 * a2];
  }
  a1[1] = (uint64_t)v6;
}

_DWORD *sub_20F412284(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C9FFDB8[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

uint64_t sub_20F412374(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)(a1 + 104) = 0x3FF0000000000000;
  *(_QWORD *)a1 = &off_24C9FFE28;
  *(_BYTE *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0xC800000000;
  *(_DWORD *)(a1 + 128) = 2;
  *(_OWORD *)(a1 + 136) = xmmword_2103B44C0;
  *(_QWORD *)(a1 + 152) = -1;
  *(_QWORD *)(a1 + 160) = 0x3FD0000000000000;
  v2 = operator new();
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 240) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 24) = xmmword_2103B44D0;
  *(_QWORD *)(v2 + 40) = &off_24C9AFD78;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 97) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_QWORD *)(v2 + 176) = 0;
  *(_QWORD *)(v2 + 184) = &off_24C9E9690;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 256) = 0u;
  *(_OWORD *)(v2 + 272) = 0u;
  *(_OWORD *)(v2 + 241) = 0u;
  *(_OWORD *)(v2 + 288) = 0u;
  *(_OWORD *)(v2 + 304) = 0u;
  *(_QWORD *)(v2 + 320) = 0;
  *(_QWORD *)(a1 + 168) = v2;
  v3 = operator new();
  *(_OWORD *)(v3 + 320) = 0u;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 288) = 0u;
  *(_OWORD *)(v3 + 304) = 0u;
  *(_OWORD *)(v3 + 272) = 0u;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_OWORD *)(v3 + 208) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_DWORD *)(v3 + 68) = 1028443341;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)(v3 + 120) = &off_24C9AFD78;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 152) = 0u;
  *(_OWORD *)(v3 + 168) = 0u;
  *(_OWORD *)(v3 + 177) = 0u;
  *(_OWORD *)(v3 + 208) = 0u;
  *(_OWORD *)(v3 + 224) = 0u;
  *(_OWORD *)(v3 + 224) = 0u;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_OWORD *)(v3 + 256) = 0u;
  *(_QWORD *)(v3 + 256) = 0;
  *(_QWORD *)(v3 + 264) = &off_24C9AFD78;
  *(_OWORD *)(v3 + 280) = 0u;
  *(_OWORD *)(v3 + 296) = 0u;
  *(_OWORD *)(v3 + 312) = 0u;
  *(_OWORD *)(v3 + 321) = 0u;
  *(_QWORD *)(v3 + 400) = 0;
  *(_OWORD *)(v3 + 368) = 0u;
  *(_OWORD *)(v3 + 384) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_QWORD *)(a1 + 176) = v3;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  return a1;
}

void sub_20F412548(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD **v2;

  sub_20F412578(v2);
  sub_20E8E7CFC(v1);
  _Unwind_Resume(a1);
}

void sub_20F412564(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20E8E7CFC(v1);
  _Unwind_Resume(a1);
}

_QWORD **sub_20F412578(_QWORD **a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_20F413664(v2);
    MEMORY[0x212BC6398](v3, 0x10B0C40FC9801F6);
  }
  return a1;
}

void sub_20F4125BC(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  size_t v13;
  size_t v14;
  _BYTE *v15;
  int v16;
  unint64_t v17;
  _BYTE *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int128 *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  _BYTE *v32;
  _BYTE *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  __int128 *v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  void *v74;
  uint64_t i;
  uint64_t v76;
  uint64_t v77;
  int v78;
  unint64_t v79;
  _BYTE *v80;
  _QWORD *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  _BYTE *v85;
  char **v86;
  _BYTE *v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  uint64_t v92;
  _BYTE *v93;
  uint64_t v94;
  _BYTE *v95;
  char **v96;
  _BYTE *v97;
  char *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  __int128 *v107;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  unint64_t v114;
  _BYTE *v115;
  _BYTE *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  __int128 *v127;
  uint64_t v128;
  __int128 v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  _BYTE *v134;
  uint64_t v135;
  _BYTE *v136;
  char **v137;
  _BYTE *v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  __int128 *v149;
  uint64_t v150;
  __int128 v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;

  v3 = a1;
  if (*(_BYTE *)(a1 + 112)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureMatchingUnsanitized/src/HarrisTracker.cpp", 37, (uint64_t)"!allocated_", 11, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *((int *)a2 + 8) <= 0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureMatchingUnsanitized/src/HarrisTracker.cpp", 38, (uint64_t)"config.image_width > 0", 22, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *((int *)a2 + 9) <= 0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureMatchingUnsanitized/src/HarrisTracker.cpp",
         39,
         (uint64_t)"config.image_height > 0",
         23,
         (uint64_t)"",
         0,
         (void (*)(void **))sub_21023DDB0)
    || (*((_DWORD *)a2 + 1) & 0x80000000) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureMatchingUnsanitized/src/HarrisTracker.cpp", 40, (uint64_t)"config.max_features >= 0", 24, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| (*((_DWORD *)a2 + 2) & 0x80000000) != 0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureMatchingUnsanitized/src/HarrisTracker.cpp", 41, (uint64_t)"config.num_buckets >= 0", 23, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v4 = *a2;
  v5 = a2[1];
  *(_OWORD *)(v3 + 152) = a2[2];
  *(_OWORD *)(v3 + 136) = v5;
  *(_OWORD *)(v3 + 120) = v4;
  v6 = *(_QWORD *)(v3 + 168);
  v8 = *((int *)a2 + 8);
  v7 = *((int *)a2 + 9);
  v9 = *(int *)(v3 + 124);
  v10 = *(int *)(v3 + 128);
  *(_QWORD *)(v6 + 8) = v8;
  *(_QWORD *)(v6 + 16) = v7;
  *(_QWORD *)(v6 + 24) = v9;
  sub_20EDDCF24((_QWORD *)(v6 + 184), (v8 & 0xFFFFFFFFFFFFFF80) + 128, (v8 & 0xFFFFFFFFFFFFFF80) + 128, v7, 1, 0, 0);
  *(_QWORD *)(v6 + 32) = v10;
  *(_BYTE *)v6 = 1;
  v11 = *(_QWORD *)(v3 + 176);
  v12 = *(double *)(v3 + 144);
  sub_20F4169A0(v11, *((_DWORD *)a2 + 8), *((_DWORD *)a2 + 9), *(int *)(v3 + 124), v12);
  sub_20EDA8E0C((_QWORD *)(v11 + 120), 128, 0x80uLL, *(_QWORD *)(v11 + 8), 1, 0, 0);
  sub_20EDA8E0C((_QWORD *)(v11 + 264), 128, 0x80uLL, *(_QWORD *)(v11 + 8), 1, 0, 0);
  v13 = *(_QWORD *)(v11 + 160) * *(_QWORD *)(v11 + 168);
  if (v13)
    bzero(*(void **)(v11 + 208), v13);
  v14 = *(_QWORD *)(v11 + 304) * *(_QWORD *)(v11 + 312);
  if (v14)
    bzero(*(void **)(v11 + 352), v14);
  v15 = *(_BYTE **)(v3 + 184);
  v16 = *(_DWORD *)(v3 + 124);
  v17 = v16;
  if (v16 > (unint64_t)((uint64_t)(*(_QWORD *)(v3 + 200) - (_QWORD)v15) >> 3))
  {
    if (v16 < 0)
      goto LABEL_134;
    v18 = *(_BYTE **)(v3 + 192);
    v19 = (char *)operator new(8 * v16);
    v20 = v18 - v15;
    v21 = &v19[(v18 - v15) & 0xFFFFFFFFFFFFFFF8];
    v22 = v21;
    if (v18 == v15)
      goto LABEL_25;
    if ((unint64_t)(v20 - 8) >= 0x58)
    {
      v22 = &v19[(v18 - v15) & 0xFFFFFFFFFFFFFFF8];
      if ((unint64_t)(&v18[-(v20 & 0xFFFFFFFFFFFFFFF8)] - v19) >= 0x20)
      {
        v23 = v20 >> 3;
        v24 = ((unint64_t)(v20 - 8) >> 3) + 1;
        v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        v26 = &v18[-v25];
        v22 = &v21[-v25];
        v27 = &v19[8 * v23 - 16];
        v28 = (__int128 *)(v18 - 16);
        v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v30 = *v28;
          *((_OWORD *)v27 - 1) = *(v28 - 1);
          *(_OWORD *)v27 = v30;
          v27 -= 32;
          v28 -= 2;
          v29 -= 4;
        }
        while (v29);
        v18 = v26;
        if (v24 == (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_25:
          *(_QWORD *)(v3 + 184) = v22;
          *(_QWORD *)(v3 + 192) = v21;
          *(_QWORD *)(v3 + 200) = &v19[8 * v16];
          if (v15)
          {
            operator delete(v15);
            v16 = *(_DWORD *)(v3 + 124);
            v17 = v16;
          }
          goto LABEL_27;
        }
      }
    }
    else
    {
      v22 = &v19[(v18 - v15) & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      v31 = *((_QWORD *)v18 - 1);
      v18 -= 8;
      *((_QWORD *)v22 - 1) = v31;
      v22 -= 8;
    }
    while (v18 != v15);
    goto LABEL_25;
  }
LABEL_27:
  v32 = *(_BYTE **)(v3 + 208);
  if (v17 > (uint64_t)(*(_QWORD *)(v3 + 224) - (_QWORD)v32) >> 3)
  {
    if ((v16 & 0x80000000) == 0)
    {
      v33 = *(_BYTE **)(v3 + 216);
      v34 = (char *)operator new(8 * v17);
      v35 = v33 - v32;
      v36 = &v34[(v33 - v32) & 0xFFFFFFFFFFFFFFF8];
      v37 = v36;
      if (v33 == v32)
        goto LABEL_37;
      if ((unint64_t)(v35 - 8) >= 0x58)
      {
        v37 = &v34[(v33 - v32) & 0xFFFFFFFFFFFFFFF8];
        if ((unint64_t)(v33 - &v34[v35 & 0xFFFFFFFFFFFFFFF8]) >= 0x20)
        {
          v38 = v35 >> 3;
          v39 = ((unint64_t)(v35 - 8) >> 3) + 1;
          v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
          v41 = &v33[-v40];
          v37 = &v36[-v40];
          v42 = &v34[8 * v38 - 16];
          v43 = (__int128 *)(v33 - 16);
          v44 = v39 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v45 = *v43;
            *((_OWORD *)v42 - 1) = *(v43 - 1);
            *(_OWORD *)v42 = v45;
            v42 -= 32;
            v43 -= 2;
            v44 -= 4;
          }
          while (v44);
          v33 = v41;
          if (v39 == (v39 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_37:
            *(_QWORD *)(v3 + 208) = v37;
            *(_QWORD *)(v3 + 216) = v36;
            *(_QWORD *)(v3 + 224) = &v34[8 * v17];
            if (v32)
              operator delete(v32);
            goto LABEL_39;
          }
        }
      }
      else
      {
        v37 = &v34[(v33 - v32) & 0xFFFFFFFFFFFFFFF8];
      }
      do
      {
        v46 = *((_QWORD *)v33 - 1);
        v33 -= 8;
        *((_QWORD *)v37 - 1) = v46;
        v37 -= 8;
      }
      while (v33 != v32);
      goto LABEL_37;
    }
LABEL_134:
    sub_20E867F44();
  }
LABEL_39:
  if (*(_DWORD *)a2)
    v47 = 2;
  else
    v47 = 1;
  v49 = *(_QWORD *)(v3 + 8);
  v48 = *(_QWORD *)(v3 + 16);
  v50 = 0xAAAAAAAAAAAAAAABLL * ((v48 - v49) >> 3);
  if (v47 <= v50)
  {
    if (v47 < v50)
    {
      v51 = v49 + 24 * v47;
      if (v48 != v51)
      {
        v52 = *(_QWORD *)(v3 + 16);
        do
        {
          v54 = *(void **)(v52 - 24);
          v52 -= 24;
          v53 = v54;
          if (v54)
          {
            *(_QWORD *)(v48 - 16) = v53;
            operator delete(v53);
          }
          v48 = v52;
        }
        while (v52 != v51);
      }
      *(_QWORD *)(v3 + 16) = v51;
    }
  }
  else
  {
    sub_20F0B7BF8(v3 + 8, v47 - v50);
  }
  v56 = *(_QWORD *)(v3 + 32);
  v55 = *(_QWORD *)(v3 + 40);
  v57 = (_QWORD *)(v3 + 32);
  v58 = 0xAAAAAAAAAAAAAAABLL * ((v55 - v56) >> 3);
  if (v47 <= v58)
  {
    if (v47 < v58)
    {
      v59 = v56 + 24 * v47;
      if (v55 != v59)
      {
        v60 = *(_QWORD *)(v3 + 40);
        do
        {
          v62 = *(void **)(v60 - 24);
          v60 -= 24;
          v61 = v62;
          if (v62)
          {
            *(_QWORD *)(v55 - 16) = v61;
            operator delete(v61);
          }
          v55 = v60;
        }
        while (v60 != v59);
      }
      *(_QWORD *)(v3 + 40) = v59;
    }
  }
  else
  {
    sub_20F0B7BF8(v3 + 32, v47 - v58);
  }
  v63 = *(_QWORD *)(v3 + 56);
  v64 = *(_QWORD *)(v3 + 64);
  v65 = (v64 - v63) >> 5;
  if (v47 <= v65)
  {
    if (v47 < v65)
    {
      v66 = v63 + 32 * v47;
      while (v64 != v66)
      {
        if (*(_BYTE *)(v64 - 8))
        {
          v67 = *(void **)(v64 - 32);
          if (v67)
          {
            *(_QWORD *)(v64 - 24) = v67;
            operator delete(v67);
          }
        }
        v64 -= 32;
      }
      *(_QWORD *)(v3 + 64) = v66;
    }
  }
  else
  {
    sub_20F41202C((uint64_t *)(v3 + 56), v47 - v65);
  }
  v69 = *(_QWORD *)(v3 + 80);
  v68 = *(_QWORD *)(v3 + 88);
  v70 = 0xAAAAAAAAAAAAAAABLL * ((v68 - v69) >> 3);
  if (v47 <= v70)
  {
    if (v47 < v70)
    {
      v71 = v69 + 24 * v47;
      if (v68 != v71)
      {
        v72 = *(_QWORD *)(v3 + 88);
        do
        {
          v74 = *(void **)(v72 - 24);
          v72 -= 24;
          v73 = v74;
          if (v74)
          {
            *(_QWORD *)(v68 - 16) = v73;
            operator delete(v73);
          }
          v68 = v72;
        }
        while (v72 != v71);
      }
      *(_QWORD *)(v3 + 88) = v71;
    }
  }
  else
  {
    sub_20F0B7BF8(v3 + 80, v47 - v70);
  }
  v153 = (_QWORD *)(v3 + 56);
  for (i = 0; i != v47; ++i)
  {
    v76 = *(_QWORD *)(v3 + 8);
    v77 = v76 + 24 * i;
    v78 = *(_DWORD *)(v3 + 124);
    v79 = v78;
    v80 = *(_BYTE **)v77;
    v154 = i;
    if (v78 > (unint64_t)((uint64_t)(*(_QWORD *)(v77 + 16) - *(_QWORD *)v77) >> 4))
    {
      if (v78 < 0)
        sub_20E867F44();
      v81 = v57;
      v82 = v3;
      v83 = v47;
      v84 = v76 + 24 * v154;
      v87 = *(_BYTE **)(v84 + 8);
      v86 = (char **)(v84 + 8);
      v85 = v87;
      v88 = (char *)operator new(16 * v78);
      v89 = &v88[(v87 - v80) & 0xFFFFFFFFFFFFFFF0];
      v90 = v89;
      if (v87 != v80)
      {
        v91 = &v88[(v85 - v80) & 0xFFFFFFFFFFFFFFF0];
        do
        {
          v90 = v91 - 16;
          *((_OWORD *)v91 - 1) = *((_OWORD *)v85 - 1);
          v85 -= 16;
          v91 -= 16;
        }
        while (v85 != v80);
      }
      *(_QWORD *)v77 = v90;
      *v86 = v89;
      *(_QWORD *)(v77 + 16) = &v88[16 * v78];
      v47 = v83;
      v3 = v82;
      v57 = v81;
      i = v154;
      if (v80)
      {
        operator delete(v80);
        v78 = *(_DWORD *)(v3 + 124);
        v79 = v78;
      }
    }
    v92 = *v57 + 24 * i;
    v93 = *(_BYTE **)v92;
    if (v79 > (uint64_t)(*(_QWORD *)(v92 + 16) - *(_QWORD *)v92) >> 3)
    {
      if (v78 < 0)
        sub_20E867F44();
      v94 = *v57 + 24 * i;
      v97 = *(_BYTE **)(v94 + 8);
      v96 = (char **)(v94 + 8);
      v95 = v97;
      v98 = (char *)operator new(8 * v79);
      v99 = v97 - v93;
      v100 = &v98[(v97 - v93) & 0xFFFFFFFFFFFFFFF8];
      v101 = v100;
      if (v97 == v93)
        goto LABEL_98;
      if ((unint64_t)(v99 - 8) >= 0x58)
      {
        v101 = &v98[(v95 - v93) & 0xFFFFFFFFFFFFFFF8];
        if (v95 - v98 - (v99 & 0xFFFFFFFFFFFFFFF8) >= 0x20)
        {
          v102 = v99 >> 3;
          v103 = ((unint64_t)(v99 - 8) >> 3) + 1;
          v104 = 8 * (v103 & 0x3FFFFFFFFFFFFFFCLL);
          v105 = &v95[-v104];
          v101 = &v100[-v104];
          v106 = &v98[8 * v102 - 16];
          v107 = (__int128 *)(v95 - 16);
          v108 = v103 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v109 = *v107;
            *((_OWORD *)v106 - 1) = *(v107 - 1);
            *(_OWORD *)v106 = v109;
            v106 -= 32;
            v107 -= 2;
            v108 -= 4;
          }
          while (v108);
          v95 = v105;
          if (v103 == (v103 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_98:
            *(_QWORD *)v92 = v101;
            *v96 = v100;
            *(_QWORD *)(v92 + 16) = &v98[8 * v79];
            i = v154;
            if (v93)
              operator delete(v93);
            goto LABEL_100;
          }
        }
      }
      else
      {
        v101 = &v98[(v95 - v93) & 0xFFFFFFFFFFFFFFF8];
      }
      do
      {
        v110 = *((_QWORD *)v95 - 1);
        v95 -= 8;
        *((_QWORD *)v101 - 1) = v110;
        v101 -= 8;
      }
      while (v95 != v93);
      goto LABEL_98;
    }
LABEL_100:
    if (i)
    {
      v111 = *v153 + 32 * i;
      if (*(_BYTE *)(v111 + 24))
      {
        v112 = *(void **)v111;
        if (*(_QWORD *)v111)
        {
          *(_QWORD *)(v111 + 8) = v112;
          operator delete(v112);
        }
      }
      *(_QWORD *)v111 = 0;
      *(_QWORD *)(v111 + 8) = 0;
      *(_QWORD *)(v111 + 16) = 0;
      *(_BYTE *)(v111 + 24) = 1;
      v113 = *(_QWORD *)(v3 + 56) + 32 * i;
      v114 = *(int *)(v3 + 124);
      v115 = *(_BYTE **)v113;
      if (v114 > (uint64_t)(*(_QWORD *)(v113 + 16) - *(_QWORD *)v113) >> 3)
      {
        if ((v114 & 0x80000000) != 0)
          sub_20E867F44();
        v116 = *(_BYTE **)(v113 + 8);
        v117 = 8 * v114;
        v118 = (char *)operator new(8 * v114);
        v119 = v116 - v115;
        v120 = &v118[(v116 - v115) & 0xFFFFFFFFFFFFFFF8];
        v121 = v120;
        if (v116 == v115)
          goto LABEL_114;
        if ((unint64_t)(v119 - 8) >= 0x58)
        {
          v121 = &v118[(v116 - v115) & 0xFFFFFFFFFFFFFFF8];
          if ((unint64_t)(v116 - &v118[v119 & 0xFFFFFFFFFFFFFFF8]) >= 0x20)
          {
            v122 = v119 >> 3;
            v123 = ((unint64_t)(v119 - 8) >> 3) + 1;
            v124 = 8 * (v123 & 0x3FFFFFFFFFFFFFFCLL);
            v125 = &v116[-v124];
            v121 = &v120[-v124];
            v126 = &v118[8 * v122 - 16];
            v127 = (__int128 *)(v116 - 16);
            v128 = v123 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v129 = *v127;
              *((_OWORD *)v126 - 1) = *(v127 - 1);
              *(_OWORD *)v126 = v129;
              v126 -= 32;
              v127 -= 2;
              v128 -= 4;
            }
            while (v128);
            v116 = v125;
            if (v123 == (v123 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_114:
              *(_QWORD *)v113 = v121;
              *(_QWORD *)(v113 + 8) = v120;
              *(_QWORD *)(v113 + 16) = &v118[v117];
              i = v154;
              if (v115)
                operator delete(v115);
              goto LABEL_116;
            }
          }
        }
        else
        {
          v121 = &v118[(v116 - v115) & 0xFFFFFFFFFFFFFFF8];
        }
        do
        {
          v130 = *((_QWORD *)v116 - 1);
          v116 -= 8;
          *((_QWORD *)v121 - 1) = v130;
          v121 -= 8;
        }
        while (v116 != v115);
        goto LABEL_114;
      }
    }
LABEL_116:
    v131 = *(_QWORD *)(v3 + 80);
    v132 = v131 + 24 * i;
    v133 = *(int *)(v3 + 124);
    v134 = *(_BYTE **)v132;
    if (v133 <= (uint64_t)(*(_QWORD *)(v132 + 16) - *(_QWORD *)v132) >> 3)
      continue;
    if ((v133 & 0x80000000) != 0)
      sub_20E867F44();
    v135 = v131 + 24 * i;
    v138 = *(_BYTE **)(v135 + 8);
    v137 = (char **)(v135 + 8);
    v136 = v138;
    v139 = 8 * v133;
    v140 = (char *)operator new(8 * v133);
    v141 = v138 - v134;
    v142 = &v140[(v138 - v134) & 0xFFFFFFFFFFFFFFF8];
    v143 = v142;
    if (v138 != v134)
    {
      if ((unint64_t)(v141 - 8) < 0x58)
      {
        v143 = &v140[(v136 - v134) & 0xFFFFFFFFFFFFFFF8];
        do
        {
LABEL_125:
          v152 = *((_QWORD *)v136 - 1);
          v136 -= 8;
          *((_QWORD *)v143 - 1) = v152;
          v143 -= 8;
        }
        while (v136 != v134);
        goto LABEL_126;
      }
      v143 = &v140[(v136 - v134) & 0xFFFFFFFFFFFFFFF8];
      if (v136 - v140 - (v141 & 0xFFFFFFFFFFFFFFF8) < 0x20)
        goto LABEL_125;
      v144 = v141 >> 3;
      v145 = ((unint64_t)(v141 - 8) >> 3) + 1;
      v146 = 8 * (v145 & 0x3FFFFFFFFFFFFFFCLL);
      v147 = &v136[-v146];
      v143 = &v142[-v146];
      v148 = &v140[8 * v144 - 16];
      v149 = (__int128 *)(v136 - 16);
      v150 = v145 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v151 = *v149;
        *((_OWORD *)v148 - 1) = *(v149 - 1);
        *(_OWORD *)v148 = v151;
        v148 -= 32;
        v149 -= 2;
        v150 -= 4;
      }
      while (v150);
      v136 = v147;
      if (v145 != (v145 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_125;
    }
LABEL_126:
    *(_QWORD *)v132 = v143;
    *v137 = v142;
    *(_QWORD *)(v132 + 16) = &v140[v139];
    i = v154;
    if (v134)
      operator delete(v134);
  }
  *(_BYTE *)(v3 + 112) = 1;
}

void sub_20F412FE0(uint64_t a1, uint64_t a2, float64x2_t **a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v8;
  float v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  int64x2_t v14;
  float64x2_t *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  _QWORD *v26;
  char *v27;
  unint64_t v28;
  float64x2_t *v29;
  float64x2_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  _OWORD *v40;
  char *v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  float64x2_t *v45;
  int64x2_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t *v53;
  double v54;
  void *__p;
  _QWORD *v56;
  uint64_t v57;

  v8 = a2;
  if (*(_DWORD *)(a1 + 152) != *(_DWORD *)(a2 + 32)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureMatchingUnsanitized/src/HarrisTracker.cpp", 82, (uint64_t)"static_cast<int>(image.width()) == config_.image_width", 54, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *(_DWORD *)(a1 + 156) != *(_DWORD *)(v8 + 48)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureMatchingUnsanitized/src/HarrisTracker.cpp", 83, (uint64_t)"static_cast<int>(image.height()) == config_.image_height", 56, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  __p = 0;
  v56 = 0;
  v57 = 0;
  v10 = *(double *)(a1 + 136);
  sub_20FD76B8C(*(_QWORD *)(a1 + 168), *(_QWORD *)(v8 + 120), &__p, v10);
  v11 = *(_QWORD *)(a1 + 184);
  v53 = (uint64_t *)(a1 + 184);
  *(_QWORD *)(a1 + 192) = v11;
  a3[1] = *a3;
  v12 = __p;
  v13 = v56;
  if (__p != v56)
  {
    v50 = v8;
    v51 = a5;
    v52 = a4;
    while (1)
    {
      v17 = *(char **)(a1 + 192);
      v16 = *(_QWORD *)(a1 + 200);
      if ((unint64_t)v17 >= v16)
      {
        v19 = *v53;
        v20 = (uint64_t)&v17[-*v53];
        v21 = v20 >> 3;
        v22 = (v20 >> 3) + 1;
        if (v22 >> 61)
          sub_20E867F44();
        v23 = v16 - v19;
        if (v23 >> 2 > v22)
          v22 = v23 >> 2;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v24 = v22;
        if (v24)
        {
          if (v24 >> 61)
            goto LABEL_59;
          v25 = operator new(8 * v24);
          v26 = &v25[8 * v21];
          *v26 = *v12;
          v18 = (uint64_t)(v26 + 1);
          v27 = &v17[-v19];
          if (v17 != (char *)v19)
          {
LABEL_33:
            v36 = (unint64_t)(v27 - 8);
            if (v36 < 0x58)
              goto LABEL_65;
            if ((unint64_t)(v17 - v25 - v20) < 0x20)
              goto LABEL_65;
            v37 = (v36 >> 3) + 1;
            v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
            v39 = &v17[-v38];
            v26 = (_QWORD *)((char *)v26 - v38);
            v40 = &v25[8 * v21 - 16];
            v41 = v17 - 16;
            v42 = v37 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v43 = *(_OWORD *)v41;
              *(v40 - 1) = *((_OWORD *)v41 - 1);
              *v40 = v43;
              v40 -= 2;
              v41 -= 32;
              v42 -= 4;
            }
            while (v42);
            v17 = v39;
            if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_65:
              do
              {
                v44 = *((_QWORD *)v17 - 1);
                v17 -= 8;
                *--v26 = v44;
              }
              while (v17 != (char *)v19);
            }
            v17 = (char *)*v53;
            *(_QWORD *)(a1 + 184) = v26;
            *(_QWORD *)(a1 + 192) = v18;
            *(_QWORD *)(a1 + 200) = &v25[8 * v24];
            if (!v17)
              goto LABEL_22;
LABEL_21:
            operator delete(v17);
            goto LABEL_22;
          }
        }
        else
        {
          v25 = 0;
          v26 = (_QWORD *)(8 * v21);
          *(_QWORD *)(8 * v21) = *v12;
          v18 = 8 * v21 + 8;
          v27 = &v17[-v19];
          if (v17 != (char *)v19)
            goto LABEL_33;
        }
        *(_QWORD *)(a1 + 184) = v26;
        *(_QWORD *)(a1 + 192) = v18;
        *(_QWORD *)(a1 + 200) = &v25[8 * v24];
        if (v17)
          goto LABEL_21;
      }
      else
      {
        *(_QWORD *)v17 = *v12;
        v18 = (uint64_t)(v17 + 8);
      }
LABEL_22:
      *(_QWORD *)(a1 + 192) = v18;
      v29 = a3[1];
      v28 = (unint64_t)a3[2];
      if ((unint64_t)v29 < v28)
      {
        v14.i64[0] = (int)*v12;
        v14.i64[1] = (int)HIDWORD(*v12);
        *v29 = vcvtq_f64_s64(v14);
        v15 = v29 + 1;
      }
      else
      {
        v30 = *a3;
        v31 = v29 - *a3;
        v32 = v31 + 1;
        if ((unint64_t)(v31 + 1) >> 60)
          sub_20E867F44();
        v33 = v28 - (_QWORD)v30;
        if (v33 >> 3 > v32)
          v32 = v33 >> 3;
        if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0)
          v34 = 0xFFFFFFFFFFFFFFFLL;
        else
          v34 = v32;
        if (v34)
        {
          if (v34 >> 60)
LABEL_59:
            sub_20E877A38();
          v35 = (char *)operator new(16 * v34);
        }
        else
        {
          v35 = 0;
        }
        v45 = (float64x2_t *)&v35[16 * v31];
        v46.i64[0] = (int)*v12;
        v46.i64[1] = (int)HIDWORD(*v12);
        *v45 = vcvtq_f64_s64(v46);
        v15 = v45 + 1;
        if (v29 != v30)
        {
          do
          {
            v45[-1] = v29[-1];
            --v45;
            --v29;
          }
          while (v29 != v30);
          v29 = *a3;
        }
        *a3 = v45;
        a3[1] = v15;
        a3[2] = (float64x2_t *)&v35[16 * v34];
        if (v29)
          operator delete(v29);
      }
      a3[1] = v15;
      if (++v12 == v13)
      {
        v11 = *(_QWORD *)(a1 + 192);
        a5 = v51;
        a4 = v52;
        v8 = v50;
        break;
      }
    }
  }
  a5[1] = *a5;
  v47 = *v53;
  if (*v53 == v11)
  {
    v47 = v11;
  }
  else if (*(_QWORD *)(a1 + 208) != *(_QWORD *)(a1 + 216))
  {
    sub_20F41648C(*(_QWORD *)(a1 + 176), *(_QWORD *)(v8 + 120), v53, *(_QWORD *)(*(_QWORD *)(a1 + 232) + 120), (uint64_t *)(a1 + 208), a5);
    v47 = *(_QWORD *)(a1 + 184);
    v11 = *(_QWORD *)(a1 + 192);
  }
  v54 = *(double *)(a1 + 160) * *(double *)(a1 + 104);
  v48 = (v11 - v47) >> 3;
  v49 = (uint64_t)(a4[1] - *a4) >> 3;
  if (v48 <= v49)
  {
    if (v48 < v49)
      a4[1] = *a4 + 8 * v48;
  }
  else
  {
    sub_20F0052C8((uint64_t)a4, v48 - v49, (uint64_t *)&v54);
  }
  if (__p)
  {
    v56 = __p;
    operator delete(__p);
  }
}

void sub_20F413414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F41343C(uint64_t a1, uint64_t *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  sub_20F412FE0(a1, *a2, *(float64x2_t ***)(a1 + 8), *(_QWORD **)(a1 + 80), *(_QWORD **)(a1 + 32));
  v4 = *(_OWORD *)(a1 + 184);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a1 + 208);
  *(_OWORD *)(a1 + 208) = v4;
  v5 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 224) = v5;
  v6 = *a2;
  *(_QWORD *)(a1 + 232) = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(a1 + 16) - v7 == 48)
  {
    v9 = *(_QWORD *)(v7 + 24);
    v8 = v7 + 24;
    *(_QWORD *)(v8 + 8) = v9;
    v10 = *(_QWORD *)(a1 + 80);
    v12 = *(_QWORD *)(v10 + 24);
    v11 = (_QWORD *)(v10 + 24);
    v11[1] = v12;
    v13 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(v13 + 40) = *(_QWORD *)(v13 + 32);
    if (a2[1] - v6 == 288)
    {
      if (!*(_BYTE *)(v13 + 56))
        sub_20E866B34();
      sub_20F412FE0(a1, v6 + 144, (float64x2_t **)v8, v11, (_QWORD *)(v13 + 32));
    }
  }
}

void sub_20F413500(_QWORD *a1)
{
  sub_20F4137C4(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20F413524()
{
  sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureMatchingUnsanitized/include/VIO/FeatureMatchingUnsanitized/HarrisTracker.h", 117, (uint64_t)"", 0, (uint64_t)"DetectFeatures not supported for harris tracker", 47, (void (*)(void **))sub_21023DDB0);
  abort();
}

void sub_20F413560()
{
  sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureMatchingUnsanitized/include/VIO/FeatureMatchingUnsanitized/HarrisTracker.h", 159, (uint64_t)"", 0, (uint64_t)"TrackFeatures not supported for harris tracker", 46, (void (*)(void **))sub_21023DDB0);
  abort();
}

void sub_20F41359C()
{
  sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureMatchingUnsanitized/include/VIO/FeatureMatchingUnsanitized/HarrisTracker.h", 177, (uint64_t)"", 0, (uint64_t)"Rematching not supported in HarrisTracker.", 42, (void (*)(void **))sub_21023DDB0);
  abort();
}

_QWORD *sub_20F4135D8(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  result[24] = result[23];
  result[27] = result[26];
  v1 = result[1];
  v2 = -1431655765 * ((unint64_t)(result[2] - v1) >> 3);
  if ((_DWORD)v2)
  {
    v3 = result[7];
    v4 = (_QWORD *)(v1 + 8);
    v5 = (_QWORD *)(result[10] + 8);
    v6 = (_QWORD *)(result[4] + 8);
    do
    {
      *v4 = *(v4 - 1);
      *v6 = *(v6 - 1);
      if (*(_BYTE *)(v3 + 24))
        *(_QWORD *)(v3 + 8) = *(_QWORD *)v3;
      v4 += 3;
      *v5 = *(v5 - 1);
      v5 += 3;
      v3 += 32;
      v6 += 3;
      --v2;
    }
    while (v2);
  }
  return result;
}

_QWORD *sub_20F413664(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;

  a1[23] = &off_24C9E9690;
  v2 = (void *)a1[38];
  if (v2)
  {
    a1[39] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)a1[37];
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = (std::__shared_weak_count *)a1[35];
    if (!v6)
      goto LABEL_13;
  }
  else
  {
LABEL_7:
    v6 = (std::__shared_weak_count *)a1[35];
    if (!v6)
      goto LABEL_13;
  }
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_13:
  a1[5] = &off_24C9AFD78;
  v9 = (void *)a1[20];
  if (v9)
  {
    a1[21] = v9;
    operator delete(v9);
  }
  v10 = (std::__shared_weak_count *)a1[19];
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      v13 = (std::__shared_weak_count *)a1[17];
      if (v13)
        goto LABEL_20;
      return a1;
    }
  }
  v13 = (std::__shared_weak_count *)a1[17];
  if (!v13)
    return a1;
LABEL_20:
  v14 = (unint64_t *)&v13->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
    return a1;
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  return a1;
}

_QWORD *sub_20F4137C4(_QWORD *a1)
{
  void *v2;
  void *v3;
  _QWORD *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  void *v19;
  void *v20;
  void **v21;
  void **v22;
  void *v23;
  void **v24;
  void *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  void *v30;
  void *v31;
  void **v32;
  void **v33;
  void *v34;
  void **v35;
  void *v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  void *v41;
  void *v42;
  _QWORD *v43;
  _QWORD *v44;

  *a1 = &off_24C9FFE28;
  v2 = (void *)a1[26];
  if (v2)
  {
    a1[27] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[23];
  if (v3)
  {
    a1[24] = v3;
    operator delete(v3);
  }
  v4 = (_QWORD *)a1[22];
  a1[22] = 0;
  if (v4)
  {
    v4[33] = &off_24C9AFD78;
    v5 = (void *)v4[48];
    if (v5)
    {
      v4[49] = v5;
      operator delete(v5);
    }
    v6 = (std::__shared_weak_count *)v4[47];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = (std::__shared_weak_count *)v4[45];
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v4[15] = &off_24C9AFD78;
    v12 = (void *)v4[30];
    if (v12)
    {
      v4[31] = v12;
      operator delete(v12);
    }
    v13 = (std::__shared_weak_count *)v4[29];
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = (std::__shared_weak_count *)v4[27];
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (void *)v4[12];
    if (v19)
    {
      v4[13] = v19;
      operator delete(v19);
    }
    v20 = (void *)v4[9];
    if (v20)
    {
      v4[10] = v20;
      operator delete(v20);
    }
    v21 = (void **)v4[5];
    if (v21)
    {
      v22 = (void **)v4[6];
      v23 = (void *)v4[5];
      if (v22 != v21)
      {
        v24 = (void **)v4[6];
        do
        {
          v27 = (char *)*(v24 - 3);
          v24 -= 3;
          v26 = v27;
          if (v27)
          {
            v28 = (char *)*(v22 - 2);
            v25 = v26;
            if (v28 != v26)
            {
              v29 = (char *)*(v22 - 2);
              do
              {
                v31 = (void *)*((_QWORD *)v29 - 3);
                v29 -= 24;
                v30 = v31;
                if (v31)
                {
                  *((_QWORD *)v28 - 2) = v30;
                  operator delete(v30);
                }
                v28 = v29;
              }
              while (v29 != v26);
              v25 = *v24;
            }
            *(v22 - 2) = v26;
            operator delete(v25);
          }
          v22 = v24;
        }
        while (v24 != v21);
        v23 = (void *)v4[5];
      }
      v4[6] = v21;
      operator delete(v23);
    }
    v32 = (void **)v4[2];
    if (v32)
    {
      v33 = (void **)v4[3];
      v34 = (void *)v4[2];
      if (v33 != v32)
      {
        v35 = (void **)v4[3];
        do
        {
          v38 = (char *)*(v35 - 3);
          v35 -= 3;
          v37 = v38;
          if (v38)
          {
            v39 = (char *)*(v33 - 2);
            v36 = v37;
            if (v39 != v37)
            {
              v40 = (char *)*(v33 - 2);
              do
              {
                v42 = (void *)*((_QWORD *)v40 - 3);
                v40 -= 24;
                v41 = v42;
                if (v42)
                {
                  *((_QWORD *)v39 - 2) = v41;
                  operator delete(v41);
                }
                v39 = v40;
              }
              while (v40 != v37);
              v36 = *v35;
            }
            *(v33 - 2) = v37;
            operator delete(v36);
          }
          v33 = v35;
        }
        while (v35 != v32);
        v34 = (void *)v4[2];
      }
      v4[3] = v32;
      operator delete(v34);
    }
    MEMORY[0x212BC6398](v4, 0x10B0C404B9CDA62);
  }
  v43 = (_QWORD *)a1[21];
  a1[21] = 0;
  if (v43)
  {
    v44 = sub_20F413664(v43);
    MEMORY[0x212BC6398](v44, 0x10B0C40FC9801F6);
  }
  return sub_20E8E7CFC(a1);
}

uint64_t sub_20F413AA8(uint64_t a1, int *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  BOOL v19;
  _QWORD *v20;
  void *v21;
  void *v22;
  int v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  __int128 v30;
  char *v31;
  char *v32;
  void *v33;
  void *v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  _QWORD *v45;
  _QWORD *v46;
  void *v47;
  void *v48;
  size_t v49;
  char *v50;
  char *v51;
  size_t v52;
  char *v53;
  char *v54;
  __int128 v55;
  _QWORD *v56;
  _QWORD *v57;
  void *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  _BYTE *v83;
  uint64_t v84;
  char **v85;
  _BYTE *v86;
  _BYTE *v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  uint64_t v92;
  _BYTE *v93;
  uint64_t v94;
  char **v95;
  _BYTE *v96;
  _BYTE *v97;
  char *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  __int128 *v107;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  _BYTE *v114;
  _BYTE *v115;
  char *v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  __int128 *v125;
  uint64_t v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  _BYTE *v130;
  uint64_t v131;
  char **v132;
  _BYTE *v133;
  _BYTE *v134;
  char *v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  char *v142;
  char *v143;
  __int128 *v144;
  uint64_t v145;
  __int128 v146;
  uint64_t v147;
  _QWORD *v150;
  _DWORD *v151;
  _QWORD *v152;

  *(_OWORD *)(a1 + 8) = 0u;
  v152 = (_QWORD *)(a1 + 8);
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 104) = 0x3FF0000000000000;
  *(_QWORD *)a1 = &off_24C9FFE88;
  *(_QWORD *)(a1 + 112) = 0;
  v4 = (uint64_t *)(a1 + 112);
  *(_QWORD *)(a1 + 120) = 0;
  v5 = (uint64_t *)(a1 + 120);
  v6 = *((_OWORD *)a2 + 1);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 144) = v6;
  v7 = *((_OWORD *)a2 + 2);
  v8 = *((_OWORD *)a2 + 3);
  v9 = *((_OWORD *)a2 + 5);
  *(_OWORD *)(a1 + 192) = *((_OWORD *)a2 + 4);
  *(_OWORD *)(a1 + 208) = v9;
  *(_OWORD *)(a1 + 160) = v7;
  *(_OWORD *)(a1 + 176) = v8;
  v10 = *((_OWORD *)a2 + 6);
  v11 = *((_OWORD *)a2 + 7);
  v12 = *((_OWORD *)a2 + 9);
  *(_OWORD *)(a1 + 256) = *((_OWORD *)a2 + 8);
  *(_OWORD *)(a1 + 272) = v12;
  *(_OWORD *)(a1 + 224) = v10;
  *(_OWORD *)(a1 + 240) = v11;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  if (*(_BYTE *)(a1 + 280))
  {
    v13 = operator new();
    *(_QWORD *)v13 = &off_24CA06F30;
    *(_OWORD *)(v13 + 8) = *((_OWORD *)a2 + 1);
    *(_OWORD *)(v13 + 20) = *(_OWORD *)(a2 + 7);
    *(_OWORD *)(v13 + 40) = 0u;
    *(_OWORD *)(v13 + 56) = 0u;
    *(_OWORD *)(v13 + 72) = 0u;
    *(_OWORD *)(v13 + 88) = 0u;
    *(_OWORD *)(v13 + 104) = 0u;
    *(_OWORD *)(v13 + 120) = 0u;
    *(_OWORD *)(v13 + 136) = 0u;
    *(_OWORD *)(v13 + 152) = 0u;
    *(_OWORD *)(v13 + 168) = 0u;
    v14 = *v4;
    *v4 = v13;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  v15 = operator new();
  v16 = *((_OWORD *)a2 + 8);
  *(_OWORD *)(v15 + 64) = *((_OWORD *)a2 + 7);
  *(_OWORD *)(v15 + 80) = v16;
  *(_QWORD *)(v15 + 96) = *((_QWORD *)a2 + 18);
  v17 = *((_OWORD *)a2 + 4);
  *(_OWORD *)v15 = *((_OWORD *)a2 + 3);
  *(_OWORD *)(v15 + 16) = v17;
  v18 = *((_OWORD *)a2 + 6);
  *(_OWORD *)(v15 + 32) = *((_OWORD *)a2 + 5);
  *(_OWORD *)(v15 + 48) = v18;
  v19 = *((double *)a2 + 12) <= 0.0;
  *(_OWORD *)(v15 + 104) = 0u;
  *(_OWORD *)(v15 + 120) = 0u;
  *(_OWORD *)(v15 + 136) = 0u;
  if (v19
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureMatching/include/VIO/FeatureMatching/LineMatcher.h", 41, (uint64_t)"config.i_ratio_threshold > 0.0", 30, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *((double *)a2 + 13) <= 0.0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureMatching/include/VIO/FeatureMatching/LineMatcher.h", 42, (uint64_t)"config.p_ratio_threshold > 0.0", 30, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *((double *)a2 + 6) <= 0.0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureMatching/include/VIO/FeatureMatching/LineMatcher.h",
         43,
         (uint64_t)"config.descriptor_threshold > 0.0",
         33,
         (uint64_t)"",
         0,
         (void (*)(void **))sub_21023DDB0)
    || *((double *)a2 + 8) <= 0.0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureMatching/include/VIO/FeatureMatching/LineMatcher.h", 44, (uint64_t)"config.angle_threshold > 0.0", 28, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v20 = (_QWORD *)*v5;
  *v5 = v15;
  if (v20)
  {
    v21 = (void *)v20[16];
    if (v21)
    {
      v20[17] = v21;
      operator delete(v21);
    }
    v22 = (void *)v20[13];
    if (v22)
    {
      v20[14] = v22;
      operator delete(v22);
    }
    MEMORY[0x212BC6398](v20, 0x1030C40FC32EE4FLL);
  }
  v23 = *a2;
  v24 = *(char **)(a1 + 288);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 304) - (_QWORD)v24) >> 3) <= 0xC7)
  {
    v25 = *(char **)(a1 + 296);
    v26 = (char *)operator new(0x12C0uLL);
    v27 = v26 + 4800;
    v28 = &v26[24 * ((v25 - v24) / 24)];
    if (v25 == v24)
    {
      *(_QWORD *)(a1 + 288) = v28;
      *(_QWORD *)(a1 + 296) = v28;
      *(_QWORD *)(a1 + 304) = v27;
    }
    else
    {
      v29 = &v26[24 * ((v25 - v24) / 24)];
      do
      {
        v30 = *(_OWORD *)(v25 - 24);
        v25 -= 24;
        *(_OWORD *)(v29 - 24) = v30;
        v29 -= 24;
        *((_QWORD *)v29 + 2) = *((_QWORD *)v25 + 2);
        *(_QWORD *)v25 = 0;
        *((_QWORD *)v25 + 1) = 0;
        *((_QWORD *)v25 + 2) = 0;
      }
      while (v25 != v24);
      v24 = *(char **)(a1 + 288);
      v31 = *(char **)(a1 + 296);
      *(_QWORD *)(a1 + 288) = v29;
      *(_QWORD *)(a1 + 296) = v28;
      *(_QWORD *)(a1 + 304) = v27;
      if (v31 != v24)
      {
        v32 = v31;
        do
        {
          v34 = (void *)*((_QWORD *)v32 - 3);
          v32 -= 24;
          v33 = v34;
          if (v34)
          {
            *((_QWORD *)v31 - 2) = v33;
            operator delete(v33);
          }
          v31 = v32;
        }
        while (v32 != v24);
      }
    }
    if (v24)
      operator delete(v24);
  }
  if (v23)
    v35 = 2;
  else
    v35 = 1;
  v36 = *(_QWORD **)(a1 + 8);
  v37 = *(_QWORD **)(a1 + 16);
  v38 = 0xAAAAAAAAAAAAAAABLL * (v37 - v36);
  v39 = v35 - v38;
  if (v35 <= v38)
  {
    if (v35 < v38)
    {
      v45 = &v36[3 * v35];
      if (v37 != v45)
      {
        v46 = *(_QWORD **)(a1 + 16);
        do
        {
          v48 = (void *)*(v46 - 3);
          v46 -= 3;
          v47 = v48;
          if (v48)
          {
            *(v37 - 2) = v47;
            operator delete(v47);
          }
          v37 = v46;
        }
        while (v46 != v45);
      }
      *(_QWORD *)(a1 + 16) = v45;
    }
  }
  else
  {
    v40 = *(_QWORD *)(a1 + 24);
    if (0xAAAAAAAAAAAAAAABLL * ((v40 - (uint64_t)v37) >> 3) >= v39)
    {
      if (24 * v39 - 24 >= 0x18)
        v49 = 6;
      else
        v49 = 3;
      bzero(*(void **)(a1 + 16), v49 * 8);
      *(_QWORD *)(a1 + 16) = &v37[v49];
    }
    else
    {
      v41 = v35;
      v42 = 0xAAAAAAAAAAAAAAABLL * ((v40 - (uint64_t)v36) >> 3);
      if (2 * v42 > v35)
        v41 = 2 * v42;
      if (v42 >= 0x555555555555555)
        v43 = 0xAAAAAAAAAAAAAAALL;
      else
        v43 = v41;
      if (v43)
      {
        if (v43 > 0xAAAAAAAAAAAAAAALL)
          sub_20E877A38();
        v44 = (char *)operator new(24 * v43);
      }
      else
      {
        v44 = 0;
      }
      v50 = &v44[8 * (v37 - v36)];
      v51 = &v44[24 * v43];
      if (24 * v39 - 24 >= 0x18)
        v52 = 48;
      else
        v52 = 24;
      bzero(v50, v52);
      v53 = &v50[v52];
      if (v37 == v36)
      {
        *(_QWORD *)(a1 + 8) = v50;
        *(_QWORD *)(a1 + 16) = v53;
        *(_QWORD *)(a1 + 24) = v51;
      }
      else
      {
        do
        {
          v54 = v50;
          *((_QWORD *)v50 - 2) = 0;
          *((_QWORD *)v50 - 1) = 0;
          v55 = *(_OWORD *)(v37 - 3);
          v37 -= 3;
          *(_OWORD *)(v50 - 24) = v55;
          v50 -= 24;
          *((_QWORD *)v54 - 1) = v37[2];
          *v37 = 0;
          v37[1] = 0;
          v37[2] = 0;
        }
        while (v37 != v36);
        v37 = *(_QWORD **)(a1 + 8);
        v56 = *(_QWORD **)(a1 + 16);
        *(_QWORD *)(a1 + 8) = v50;
        *(_QWORD *)(a1 + 16) = v53;
        *(_QWORD *)(a1 + 24) = v51;
        if (v56 != v37)
        {
          v57 = v56;
          do
          {
            v59 = (void *)*(v57 - 3);
            v57 -= 3;
            v58 = v59;
            if (v59)
            {
              *(v56 - 2) = v58;
              operator delete(v58);
            }
            v56 = v57;
          }
          while (v57 != v37);
        }
      }
      if (v37)
        operator delete(v37);
    }
  }
  v61 = *(_QWORD *)(a1 + 32);
  v60 = *(_QWORD *)(a1 + 40);
  v62 = (_QWORD *)(a1 + 32);
  v63 = 0xAAAAAAAAAAAAAAABLL * ((v60 - v61) >> 3);
  if (v35 <= v63)
  {
    if (v35 < v63)
    {
      v64 = v61 + 24 * v35;
      if (v60 != v64)
      {
        v65 = *(_QWORD *)(a1 + 40);
        do
        {
          v67 = *(void **)(v65 - 24);
          v65 -= 24;
          v66 = v67;
          if (v67)
          {
            *(_QWORD *)(v60 - 16) = v66;
            operator delete(v66);
          }
          v60 = v65;
        }
        while (v65 != v64);
      }
      *(_QWORD *)(a1 + 40) = v64;
    }
  }
  else
  {
    sub_20F0B7BF8(a1 + 32, v35 - v63);
  }
  v68 = *(_QWORD *)(a1 + 56);
  v69 = *(_QWORD *)(a1 + 64);
  v70 = (v69 - v68) >> 5;
  if (v35 <= v70)
  {
    if (v35 < v70)
    {
      v71 = v68 + 32 * v35;
      while (v69 != v71)
      {
        if (*(_BYTE *)(v69 - 8))
        {
          v72 = *(void **)(v69 - 32);
          if (v72)
          {
            *(_QWORD *)(v69 - 24) = v72;
            operator delete(v72);
          }
        }
        v69 -= 32;
      }
      *(_QWORD *)(a1 + 64) = v71;
    }
  }
  else
  {
    sub_20F41202C((uint64_t *)(a1 + 56), v35 - v70);
  }
  v74 = *(_QWORD *)(a1 + 80);
  v73 = *(_QWORD *)(a1 + 88);
  v75 = (_QWORD *)(a1 + 80);
  v76 = 0xAAAAAAAAAAAAAAABLL * ((v73 - v74) >> 3);
  if (v35 <= v76)
  {
    if (v35 < v76)
    {
      v77 = v74 + 24 * v35;
      if (v73 != v77)
      {
        v78 = *(_QWORD *)(a1 + 88);
        do
        {
          v80 = *(void **)(v78 - 24);
          v78 -= 24;
          v79 = v80;
          if (v80)
          {
            *(_QWORD *)(v73 - 16) = v79;
            operator delete(v79);
          }
          v73 = v78;
        }
        while (v78 != v77);
      }
      *(_QWORD *)(a1 + 88) = v77;
    }
  }
  else
  {
    sub_20F0B7BF8(a1 + 80, v35 - v76);
  }
  v81 = 0;
  v150 = (_QWORD *)(a1 + 56);
  v151 = (_DWORD *)(a1 + 128);
  do
  {
    v82 = *v152 + 24 * v81;
    v83 = *(_BYTE **)v82;
    if ((*(_QWORD *)(v82 + 16) - *(_QWORD *)v82) >> 8 <= 0x18uLL)
    {
      v84 = *v152 + 24 * v81;
      v87 = *(_BYTE **)(v84 + 8);
      v85 = (char **)(v84 + 8);
      v86 = v87;
      v88 = (char *)operator new(0x1900uLL);
      v89 = &v88[v87 - v83];
      v90 = v89;
      if (v87 != v83)
      {
        v91 = &v88[v86 - v83];
        do
        {
          v90 = v91 - 32;
          *((_OWORD *)v91 - 2) = *((_OWORD *)v86 - 2);
          *((_OWORD *)v91 - 1) = *((_OWORD *)v86 - 1);
          v86 -= 32;
          v91 -= 32;
        }
        while (v86 != v83);
      }
      *(_QWORD *)v82 = v90;
      *v85 = v89;
      *(_QWORD *)(v82 + 16) = v88 + 6400;
      if (v83)
        operator delete(v83);
    }
    v92 = *v62 + 24 * v81;
    v93 = *(_BYTE **)v92;
    if (*(_QWORD *)(v92 + 16) - *(_QWORD *)v92 <= 0x63FuLL)
    {
      v94 = *v62 + 24 * v81;
      v97 = *(_BYTE **)(v94 + 8);
      v95 = (char **)(v94 + 8);
      v96 = v97;
      v98 = (char *)operator new(0x640uLL);
      v99 = v97 - v93;
      v100 = &v98[(v97 - v93) & 0xFFFFFFFFFFFFFFF8];
      v101 = v100;
      if (v97 == v93)
        goto LABEL_114;
      if ((unint64_t)(v99 - 8) >= 0x58)
      {
        v101 = &v98[(v96 - v93) & 0xFFFFFFFFFFFFFFF8];
        if (v96 - v98 - (v99 & 0xFFFFFFFFFFFFFFF8) >= 0x20)
        {
          v102 = v99 >> 3;
          v103 = ((unint64_t)(v99 - 8) >> 3) + 1;
          v104 = 8 * (v103 & 0x3FFFFFFFFFFFFFFCLL);
          v105 = &v96[-v104];
          v101 = &v100[-v104];
          v106 = &v98[8 * v102 - 16];
          v107 = (__int128 *)(v96 - 16);
          v108 = v103 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v109 = *v107;
            *((_OWORD *)v106 - 1) = *(v107 - 1);
            *(_OWORD *)v106 = v109;
            v106 -= 32;
            v107 -= 2;
            v108 -= 4;
          }
          while (v108);
          v96 = v105;
          if (v103 == (v103 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_114:
            *(_QWORD *)v92 = v101;
            *v95 = v100;
            *(_QWORD *)(v92 + 16) = v98 + 1600;
            if (v93)
              operator delete(v93);
            goto LABEL_116;
          }
        }
      }
      else
      {
        v101 = &v98[(v96 - v93) & 0xFFFFFFFFFFFFFFF8];
      }
      do
      {
        v110 = *((_QWORD *)v96 - 1);
        v96 -= 8;
        *((_QWORD *)v101 - 1) = v110;
        v101 -= 8;
      }
      while (v96 != v93);
      goto LABEL_114;
    }
LABEL_116:
    if (v81 && *v151 == 1)
    {
      v111 = *v150 + 32 * v81;
      if (*(_BYTE *)(v111 + 24))
      {
        v112 = *(void **)v111;
        if (*(_QWORD *)v111)
        {
          *(_QWORD *)(v111 + 8) = v112;
          operator delete(v112);
        }
      }
      *(_QWORD *)v111 = 0;
      *(_QWORD *)(v111 + 8) = 0;
      *(_QWORD *)(v111 + 16) = 0;
      *(_BYTE *)(v111 + 24) = 1;
      v113 = *v150 + 32 * v81;
      v114 = *(_BYTE **)v113;
      if (*(_QWORD *)(v113 + 16) - *(_QWORD *)v113 <= 0x63FuLL)
      {
        v115 = *(_BYTE **)(v113 + 8);
        v116 = (char *)operator new(0x640uLL);
        v117 = v115 - v114;
        v118 = &v116[(v115 - v114) & 0xFFFFFFFFFFFFFFF8];
        v119 = v118;
        if (v115 == v114)
          goto LABEL_130;
        if ((unint64_t)(v117 - 8) >= 0x58)
        {
          v119 = &v116[(v115 - v114) & 0xFFFFFFFFFFFFFFF8];
          if (v115 - v116 - (v117 & 0xFFFFFFFFFFFFFFF8) >= 0x20)
          {
            v120 = v117 >> 3;
            v121 = ((unint64_t)(v117 - 8) >> 3) + 1;
            v122 = 8 * (v121 & 0x3FFFFFFFFFFFFFFCLL);
            v123 = &v115[-v122];
            v119 = &v118[-v122];
            v124 = &v116[8 * v120 - 16];
            v125 = (__int128 *)(v115 - 16);
            v126 = v121 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v127 = *v125;
              *((_OWORD *)v124 - 1) = *(v125 - 1);
              *(_OWORD *)v124 = v127;
              v124 -= 32;
              v125 -= 2;
              v126 -= 4;
            }
            while (v126);
            v115 = v123;
            if (v121 == (v121 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_130:
              *(_QWORD *)v113 = v119;
              *(_QWORD *)(v113 + 8) = v118;
              *(_QWORD *)(v113 + 16) = v116 + 1600;
              if (v114)
                operator delete(v114);
              goto LABEL_132;
            }
          }
        }
        else
        {
          v119 = &v116[(v115 - v114) & 0xFFFFFFFFFFFFFFF8];
        }
        do
        {
          v128 = *((_QWORD *)v115 - 1);
          v115 -= 8;
          *((_QWORD *)v119 - 1) = v128;
          v119 -= 8;
        }
        while (v115 != v114);
        goto LABEL_130;
      }
    }
LABEL_132:
    v129 = *v75 + 24 * v81;
    v130 = *(_BYTE **)v129;
    if (*(_QWORD *)(v129 + 16) - *(_QWORD *)v129 > 0x63FuLL)
      goto LABEL_98;
    v131 = *v75 + 24 * v81;
    v134 = *(_BYTE **)(v131 + 8);
    v132 = (char **)(v131 + 8);
    v133 = v134;
    v135 = (char *)operator new(0x640uLL);
    v136 = v134 - v130;
    v137 = &v135[(v134 - v130) & 0xFFFFFFFFFFFFFFF8];
    v138 = v137;
    if (v134 != v130)
    {
      if ((unint64_t)(v136 - 8) < 0x58)
      {
        v138 = &v135[(v133 - v130) & 0xFFFFFFFFFFFFFFF8];
        do
        {
LABEL_140:
          v147 = *((_QWORD *)v133 - 1);
          v133 -= 8;
          *((_QWORD *)v138 - 1) = v147;
          v138 -= 8;
        }
        while (v133 != v130);
        goto LABEL_141;
      }
      v138 = &v135[(v133 - v130) & 0xFFFFFFFFFFFFFFF8];
      if (v133 - v135 - (v136 & 0xFFFFFFFFFFFFFFF8) < 0x20)
        goto LABEL_140;
      v139 = v136 >> 3;
      v140 = ((unint64_t)(v136 - 8) >> 3) + 1;
      v141 = 8 * (v140 & 0x3FFFFFFFFFFFFFFCLL);
      v142 = &v133[-v141];
      v138 = &v137[-v141];
      v143 = &v135[8 * v139 - 16];
      v144 = (__int128 *)(v133 - 16);
      v145 = v140 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v146 = *v144;
        *((_OWORD *)v143 - 1) = *(v144 - 1);
        *(_OWORD *)v143 = v146;
        v143 -= 32;
        v144 -= 2;
        v145 -= 4;
      }
      while (v145);
      v133 = v142;
      if (v140 != (v140 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_140;
    }
LABEL_141:
    *(_QWORD *)v129 = v138;
    *v132 = v137;
    *(_QWORD *)(v129 + 16) = v135 + 1600;
    if (v130)
      operator delete(v130);
LABEL_98:
    ++v81;
  }
  while (v81 != v35);
  return a1;
}

void sub_20F41453C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9, uint64_t *a10, uint64_t a11)
{
  uint64_t v12;

  sub_20E9DD680((void **)(a11 + 288));
  sub_20F4145CC(a9);
  v12 = *a10;
  *a10 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  sub_20F414630((_QWORD *)a11);
  _Unwind_Resume(a1);
}

_QWORD *sub_20F4145CC(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;

  v2 = (_QWORD *)*a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (void *)v2[16];
    if (v3)
    {
      v2[17] = v3;
      operator delete(v3);
    }
    v4 = (void *)v2[13];
    if (v4)
    {
      v2[14] = v4;
      operator delete(v4);
    }
    MEMORY[0x212BC6398](v2, 0x1030C40FC32EE4FLL);
  }
  return a1;
}

_QWORD *sub_20F414630(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;

  *a1 = off_24C9FFEF8;
  v2 = a1[10];
  if (v2)
  {
    v3 = a1[11];
    v4 = (void *)a1[10];
    if (v3 != v2)
    {
      v5 = a1[11];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[10];
    }
    a1[11] = v2;
    operator delete(v4);
  }
  v8 = a1[7];
  if (v8)
  {
    v9 = a1[8];
    v10 = (void *)a1[7];
    if (v9 != v8)
    {
      do
      {
        if (*(_BYTE *)(v9 - 8))
        {
          v11 = *(void **)(v9 - 32);
          if (v11)
          {
            *(_QWORD *)(v9 - 24) = v11;
            operator delete(v11);
          }
        }
        v9 -= 32;
      }
      while (v9 != v8);
      v10 = (void *)a1[7];
    }
    a1[8] = v8;
    operator delete(v10);
  }
  v12 = a1[4];
  if (v12)
  {
    v13 = a1[5];
    v14 = (void *)a1[4];
    if (v13 != v12)
    {
      v15 = a1[5];
      do
      {
        v17 = *(void **)(v15 - 24);
        v15 -= 24;
        v16 = v17;
        if (v17)
        {
          *(_QWORD *)(v13 - 16) = v16;
          operator delete(v16);
        }
        v13 = v15;
      }
      while (v15 != v12);
      v14 = (void *)a1[4];
    }
    a1[5] = v12;
    operator delete(v14);
  }
  v18 = a1[1];
  if (v18)
  {
    v19 = a1[2];
    v20 = (void *)a1[1];
    if (v19 != v18)
    {
      v21 = a1[2];
      do
      {
        v23 = *(void **)(v21 - 24);
        v21 -= 24;
        v22 = v23;
        if (v23)
        {
          *(_QWORD *)(v19 - 16) = v22;
          operator delete(v22);
        }
        v19 = v21;
      }
      while (v21 != v18);
      v20 = (void *)a1[1];
    }
    a1[2] = v18;
    operator delete(v20);
  }
  return a1;
}

uint64_t sub_20F414798(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BYTE v7[16];
  _BYTE v8[8];
  _BYTE v9[8];
  _BYTE v10[8];

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v10[0] = 0;
  v10[4] = 0;
  v9[0] = 0;
  v9[4] = 0;
  v8[0] = 0;
  v8[4] = 0;
  v7[0] = 0;
  v7[8] = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _BYTE *, _BYTE *, _BYTE *, _BYTE *))(*(_QWORD *)a1 + 32))(a1, a4, 0, 0, 0, v10, v9, v8, v7);
}

uint64_t sub_20F414820(uint64_t a1, _QWORD *a2, uint64_t **a3, _QWORD **a4)
{
  uint64_t v8;
  uint64_t (**v10)(uint64_t);
  char v11;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  uint64_t v13;
  int v14;
  const char *v15;

  if (!*(_BYTE *)(a1 + 280))
  {
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureMatchingUnsanitized/src/LineTracker.cpp", 114, (uint64_t)"", 0, (uint64_t)"No feature detector", 19, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  v11 = 0;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v13 = 0;
  v10 = &off_24CA1E140;
  v14 = 3;
  v15 = "[LineTracker] LineTracker::DetectFeaturesWithLens() time elapsed";
  if (*a3 == a3[1])
  {
    v8 = 0;
    if (*(_BYTE *)(a1 + 280))
      goto LABEL_4;
LABEL_6:
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureMatchingUnsanitized/src/LineTracker.cpp", 106, (uint64_t)"", 0, (uint64_t)"No feature detector", 19, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  v8 = **a3;
  if (!*(_BYTE *)(a1 + 280))
    goto LABEL_6;
LABEL_4:
  (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 112) + 16))(*(_QWORD *)(a1 + 112), *a2, v8, **a4);
  return sub_210215814((uint64_t)&v10);
}

void sub_20F414940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_210215814((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20F414954(uint64_t *a1, uint64_t ****a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t ***v5;
  unsigned __int8 v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  const char *v12;
  size_t v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  const char *v16;
  size_t v17;
  void *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  size_t v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  void *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t **v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  int64_t v66;
  unint64_t v67;
  _QWORD *v68;
  uint64_t *v69;
  double **v70;
  double *v71;
  double *v72;
  float64x2_t v74;
  float64x2_t v76;
  double v81;
  float64x2_t v82;
  float64x2_t v84;
  float64x2_t v86;
  double v88;
  float64x2_t v89;
  double v91;
  char *v94;
  _QWORD *v95;
  void *v96;
  char *v97;
  void *v98;
  void *v99;
  double v100;
  double v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  unint64_t v105;
  uint64_t v106;
  char *v107;
  double *v108;
  unint64_t v109;
  size_t v110;
  char *v111;
  uint64_t *v112;
  uint64_t *v113;
  double v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  _QWORD *v122;
  _QWORD *v123;
  _QWORD *v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  char *v132;
  double v133;
  unint64_t v134;
  double *v135;
  double *v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  _BYTE *v142;
  double *v143;
  int64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  double *v148;
  _OWORD *v149;
  double *v150;
  uint64_t v151;
  __int128 v152;
  uint64_t v153;
  uint64_t **v154;
  void **v155;
  uint64_t *v156;
  uint64_t *v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  char *v162;
  void *v163;
  char *v164;
  void *v165;
  void *v166;
  char *v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t *v176;
  char *v177;
  void *v178;
  void *v179;
  const char *v180;
  uint64_t v183;
  float64x2_t v184;
  void *v185;
  _QWORD *rep;
  char *v187;
  int v188;
  const char *v189;
  int v190;
  const char *v191;
  uint64_t v192;
  std::__shared_weak_count *v193;
  uint64_t v194;
  void *object;
  void *v196[2];
  __int128 v197;
  void *__p[2];
  unint64_t v199;
  char v200;
  uint64_t v201;
  uint64_t v202;

  v4 = a1;
  v5 = *a2;
  if ((unint64_t)((char *)a2[1] - (char *)*a2) >= 9)
  {
    v6 = atomic_load((unsigned __int8 *)&qword_254A68958);
    if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254A68958))
    {
      sub_21021D3D8(&v185);
      sub_20E8610C0(&object, "cv3d.vio.feature_matching_unsanitized");
      sub_20E8C4068((uint64_t **)&v185, (uint64_t)&object, &qword_254A68950);
      if (SHIBYTE(v196[1]) < 0)
        operator delete(object);
      __cxa_guard_release(&qword_254A68958);
    }
    v194 = qword_254A68950;
    if (**(int **)(qword_254A68950 + 56) > 2)
      goto LABEL_93;
    v7 = *(unsigned __int8 *)(qword_254A68950 + 72);
    v8 = sub_20E8C31DC(qword_254A68950, "OSLogSurrogateAppender", 1, 0);
    v9 = v8;
    if (!v7 && v8 == 0)
      goto LABEL_93;
    v185 = &v194;
    rep = (_QWORD *)std::chrono::steady_clock::now().__d_.__rep_;
    v187 = (char *)std::chrono::system_clock::now().__d_.__rep_;
    v188 = 2;
    v189 = "unknown file";
    v190 = 142;
    v192 = 0;
    v193 = 0;
    v191 = "unknown function";
    v11 = *(_QWORD *)v185;
    v12 = (const char *)(*(_QWORD *)v185 + 16);
    v183 = *(_QWORD *)v185;
    v180 = v12;
    if (*(char *)(*(_QWORD *)v185 + 39) < 0)
    {
      v12 = *(const char **)(v11 + 16);
      v13 = *(_QWORD *)(v11 + 24);
      v15 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v15 & 1) != 0)
        goto LABEL_12;
    }
    else
    {
      v13 = *(unsigned __int8 *)(*(_QWORD *)v185 + 39);
      v14 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v14 & 1) != 0)
        goto LABEL_12;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
      if ((_BYTE)v197 && SHIBYTE(v196[1]) < 0)
        operator delete(object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_12:
    if (byte_254A4A4F8[23] >= 0)
      v16 = byte_254A4A4F8;
    else
      v16 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v17 = byte_254A4A4F8[23];
    else
      v17 = *(_QWORD *)&byte_254A4A4F8[8];
    object = os_log_create(v16, v12);
    v18 = v196;
    if (v17 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v17 >= 0x17)
    {
      v19 = v7;
      v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v17 | 7) != 0x17)
        v20 = v17 | 7;
      v21 = v20 + 1;
      v18 = operator new(v20 + 1);
      v196[1] = (void *)v17;
      *(_QWORD *)&v197 = v21 | 0x8000000000000000;
      v196[0] = v18;
      v7 = v19;
    }
    else
    {
      BYTE7(v197) = v17;
      if (!v17)
      {
LABEL_26:
        *((_BYTE *)v18 + v17) = 0;
        BYTE8(v197) = 1;
        v22 = __p;
        if (v13 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v13 >= 0x17)
        {
          v23 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v13 | 7) != 0x17)
            v23 = v13 | 7;
          v24 = v23 + 1;
          v22 = operator new(v23 + 1);
          __p[1] = (void *)v13;
          v199 = v24 | 0x8000000000000000;
          __p[0] = v22;
        }
        else
        {
          HIBYTE(v199) = v13;
          if (!v13)
            goto LABEL_34;
        }
        memmove(v22, v12, v13);
LABEL_34:
        *((_BYTE *)v22 + v13) = 0;
        v200 = 1;
        v25 = object;
        if (SHIBYTE(v199) < 0)
          operator delete(__p[0]);
        if (BYTE8(v197) && SBYTE7(v197) < 0)
          operator delete(v196[0]);
        if (object)
          os_release(object);
        if (v9 && *(_QWORD *)(v9 + 24))
        {
          v26 = _os_log_pack_size();
          v27 = (std::__shared_weak_count_vtbl *)operator new(v26, (std::align_val_t)8uLL);
          v28 = (std::__shared_weak_count *)operator new();
          v29 = v28;
          v28->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v28->__shared_owners_;
          v28->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v28->__shared_weak_owners_ = 0;
          v28[1].__vftable = v27;
          object = v27;
          v196[0] = v27;
          v196[1] = v28;
          do
            v31 = __ldxr(p_shared_owners);
          while (__stxr(v31 + 1, p_shared_owners));
          v197 = 0uLL;
          __p[0] = 0;
          do
            v32 = __ldaxr(p_shared_owners);
          while (__stlxr(v32 - 1, p_shared_owners));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v29);
          }
          v33 = object;
          *(_WORD *)_os_log_pack_fill() = 0;
          v34 = operator new();
          v35 = *(unsigned __int8 *)(v183 + 39);
          v36 = v180;
          if ((v35 & 0x80u) != 0)
          {
            v36 = *(const char **)(v183 + 16);
            v35 = *(_QWORD *)(v183 + 24);
          }
          *(_QWORD *)v34 = v33;
          *(_OWORD *)(v34 + 8) = *(_OWORD *)v196;
          v196[0] = 0;
          v196[1] = 0;
          *(_OWORD *)(v34 + 24) = v197;
          v197 = 0uLL;
          *(_QWORD *)(v34 + 40) = v36;
          *(_QWORD *)(v34 + 48) = v35;
          *(_BYTE *)(v34 + 56) = 2;
          v201 = 0;
          v202 = v34;
          (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v9 + 24) + 40))(*(_QWORD *)(v9 + 24), &v202);
          v37 = v202;
          v202 = 0;
          if (v37)
          {
            v38 = *(std::__shared_weak_count **)(v37 + 32);
            if (v38)
            {
              v39 = (unint64_t *)&v38->__shared_owners_;
              do
                v40 = __ldaxr(v39);
              while (__stlxr(v40 - 1, v39));
              if (!v40)
              {
                ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                std::__shared_weak_count::__release_weak(v38);
              }
            }
            v41 = *(std::__shared_weak_count **)(v37 + 16);
            if (v41)
            {
              v42 = (unint64_t *)&v41->__shared_owners_;
              do
                v43 = __ldaxr(v42);
              while (__stlxr(v43 - 1, v42));
              if (!v43)
              {
                ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
                std::__shared_weak_count::__release_weak(v41);
              }
            }
            MEMORY[0x212BC6398](v37, 0x10F0C40B62ED6C6);
            v44 = v201;
            v201 = 0;
            if (v44)
            {
              v45 = *(std::__shared_weak_count **)(v44 + 32);
              if (v45)
              {
                v46 = (unint64_t *)&v45->__shared_owners_;
                do
                  v47 = __ldaxr(v46);
                while (__stlxr(v47 - 1, v46));
                if (!v47)
                {
                  ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                  std::__shared_weak_count::__release_weak(v45);
                }
              }
              v48 = *(std::__shared_weak_count **)(v44 + 16);
              if (v48)
              {
                v49 = (unint64_t *)&v48->__shared_owners_;
                do
                  v50 = __ldaxr(v49);
                while (__stlxr(v50 - 1, v49));
                if (!v50)
                {
                  ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                  std::__shared_weak_count::__release_weak(v48);
                }
              }
              MEMORY[0x212BC6398](v44, 0x10F0C40B62ED6C6);
            }
          }
          v51 = (std::__shared_weak_count *)*((_QWORD *)&v197 + 1);
          if (*((_QWORD *)&v197 + 1))
          {
            v52 = (unint64_t *)(*((_QWORD *)&v197 + 1) + 8);
            do
              v53 = __ldaxr(v52);
            while (__stlxr(v53 - 1, v52));
            if (!v53)
            {
              ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
              std::__shared_weak_count::__release_weak(v51);
            }
          }
          v54 = (std::__shared_weak_count *)v196[1];
          if (v196[1])
          {
            v55 = (unint64_t *)((char *)v196[1] + 8);
            do
              v56 = __ldaxr(v55);
            while (__stlxr(v56 - 1, v55));
            if (!v56)
            {
              ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
              std::__shared_weak_count::__release_weak(v54);
            }
          }
        }
        else
        {
          os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG);
          LOWORD(object) = 0;
          v57 = (void *)_os_log_send_and_compose_impl();
          if (v57)
            free(v57);
        }
        if (v7)
        {
          sub_20E8C003C((uint64_t)&v185, "Stereo not yet supported for line tracking");
          sub_20E863570((uint64_t)&v185);
        }
        sub_20E863570((uint64_t)&v185);
        v58 = v193;
        if (v193)
        {
          v59 = (unint64_t *)&v193->__shared_owners_;
          do
            v60 = __ldaxr(v59);
          while (__stlxr(v60 - 1, v59));
          if (!v60)
          {
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
          }
        }
LABEL_93:
        v4 = a1;
        v5 = *a2;
        goto LABEL_94;
      }
    }
    memmove(v18, v16, v17);
    goto LABEL_26;
  }
LABEL_94:
  v61 = *v5;
  v63 = **v5;
  v62 = (*v5)[1];
  if (v63 == v62 || v4[36] == v4[37])
  {
    *(_QWORD *)(v4[4] + 8) = *(_QWORD *)v4[4];
    goto LABEL_123;
  }
  v185 = 0;
  rep = 0;
  v187 = 0;
  v64 = *v61;
  v65 = v61[1];
  v66 = (char *)v65 - (char *)*v61;
  if (v65 != *v61)
  {
    v67 = 0xAAAAAAAAAAAAAAABLL * (v66 >> 3);
    if (v67 > 0xAAAAAAAAAAAAAAALL)
      sub_20E867F44();
    v185 = operator new(v66);
    rep = v185;
    v187 = (char *)v185 + 24 * v67;
    v68 = sub_20F415BFC((uint64_t)&v187, v64, v65, v185);
    rep = v68;
    v69 = a1 + 36;
    if (!a3)
      goto LABEL_114;
LABEL_102:
    v70 = (double **)v185;
    if (v185 != v68)
    {
      v71 = *(double **)v185;
      v72 = (double *)*((_QWORD *)v185 + 1);
      if (*(double **)v185 != v72)
        goto LABEL_106;
      while (1)
      {
        v70 += 3;
        if (v70 == v68)
          break;
        v71 = *v70;
        v72 = v70[1];
        if (*v70 != v72)
        {
          do
          {
LABEL_106:
            _D1 = v71[1];
            v74.f64[0] = *(float64_t *)(a3 + 16);
            _Q6 = *(_OWORD *)(a3 + 48);
            v74.f64[1] = *(float64_t *)(a3 + 40);
            v76 = vaddq_f64(v74, vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)a3, *(int64x2_t *)(a3 + 24)), *v71), (float64x2_t)vzip2q_s64(*(int64x2_t *)a3, *(int64x2_t *)(a3 + 24)), _D1));
            __asm { FMLA            D0, D1, V6.D[1] }
            v81 = *(double *)(a3 + 64) + _D0;
            if (v81 == 0.0)
              v81 = 1.0;
            v82 = vdivq_f64(v76, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v81, 0));
            *(float64x2_t *)v71 = v82;
            _D2 = v71[3];
            v84.f64[0] = *(float64_t *)(a3 + 16);
            _Q7 = *(_OWORD *)(a3 + 48);
            v84.f64[1] = *(float64_t *)(a3 + 40);
            v86 = vaddq_f64(v84, vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)a3, *(int64x2_t *)(a3 + 24)), v71[2]), (float64x2_t)vzip2q_s64(*(int64x2_t *)a3, *(int64x2_t *)(a3 + 24)), _D2));
            __asm { FMLA            D1, D2, V7.D[1] }
            v88 = *(double *)(a3 + 64) + _D1;
            if (v88 == 0.0)
              v88 = 1.0;
            v89 = vdivq_f64(v86, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v88, 0));
            *((float64x2_t *)v71 + 1) = v89;
            v184 = vsubq_f64(v89, v82);
            _D8 = v184.f64[1];
            v91 = atan2(v184.f64[1], v184.f64[0]);
            if (v91 == 3.14159265)
              v91 = -3.14159265;
            _V2.D[1] = v184.f64[1];
            __asm { FMLA            D1, D8, V2.D[1] }
            v71[5] = v91;
            v71[6] = sqrt(_D1);
            v71 += 47;
          }
          while (v71 != v72);
        }
      }
    }
    goto LABEL_114;
  }
  v68 = 0;
  v69 = a1 + 36;
  if (a3)
    goto LABEL_102;
LABEL_114:
  LOBYTE(v196[0]) = 0;
  v196[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
  *(_QWORD *)&v197 = 0;
  object = &off_24CA1E140;
  DWORD2(v197) = 3;
  __p[0] = "[LineTracker] LineTracker::TrackFeatures() Matcher time elapsed";
  sub_20F4173FC(a1[15], (uint64_t *)&v185, v69, a1[4]);
  sub_210215814((uint64_t)&object);
  v94 = (char *)v185;
  v4 = a1;
  if (v185)
  {
    v95 = rep;
    v96 = v185;
    if (rep != v185)
    {
      v97 = (char *)rep;
      do
      {
        v99 = (void *)*((_QWORD *)v97 - 3);
        v97 -= 24;
        v98 = v99;
        if (v99)
        {
          *(v95 - 2) = v98;
          operator delete(v98);
        }
        v95 = v97;
      }
      while (v97 != v94);
      v96 = v185;
    }
    rep = v94;
    operator delete(v96);
  }
  v61 = **a2;
  v63 = *v61;
  v62 = v61[1];
LABEL_123:
  v100 = *((double *)v4 + 17);
  v101 = *((double *)v4 + 13);
  v102 = v4[1];
  v103 = v4[10];
  v104 = *(_QWORD **)v102;
  *(_QWORD *)(v102 + 8) = *(_QWORD *)v102;
  v105 = 0xAAAAAAAAAAAAAAABLL * (v62 - v63);
  if (v105 > (uint64_t)(*(_QWORD *)(v102 + 16) - (_QWORD)v104) >> 5)
  {
    if (v105 >> 59)
LABEL_212:
      sub_20E867F44();
    v106 = 32 * v105;
    v107 = (char *)operator new(32 * v105);
    *(_QWORD *)v102 = v107;
    *(_QWORD *)(v102 + 8) = v107;
    *(_QWORD *)(v102 + 16) = &v107[v106];
    if (v104)
      operator delete(v104);
  }
  v108 = *(double **)v103;
  *(_QWORD *)(v103 + 8) = *(_QWORD *)v103;
  v109 = 0xAAAAAAAAAAAAAAABLL * (v61[1] - *v61);
  if (v109 > (uint64_t)(*(_QWORD *)(v103 + 16) - (_QWORD)v108) >> 3)
  {
    if (v109 >> 61)
LABEL_213:
      sub_20E867F44();
    v110 = 0x5555555555555558 * (v61[1] - *v61);
    v111 = (char *)operator new(v110);
    *(_QWORD *)v103 = v111;
    *(_QWORD *)(v103 + 8) = v111;
    *(_QWORD *)(v103 + 16) = &v111[v110];
    if (v108)
      operator delete(v108);
  }
  v113 = *v61;
  v112 = v61[1];
  if (v113 != v112)
  {
    v114 = v100 * v101;
    do
    {
      v116 = (uint64_t *)*v113;
      if (v113[1] == *v113)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureMatchingUnsanitized/src/LineTracker.cpp", 54, (uint64_t)"f.size() >= 1", 13, (uint64_t)"feature must be detected in at least one pyramid level", 54, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v118 = *(_QWORD *)*v113;
        v117 = *(_QWORD *)(*v113 + 8);
        v120 = *(_QWORD *)(*v113 + 16);
        v119 = *(_QWORD *)(*v113 + 24);
        v122 = *(_QWORD **)(v102 + 8);
        v121 = *(_QWORD *)(v102 + 16);
        if ((unint64_t)v122 < v121)
        {
LABEL_137:
          *v122 = v118;
          v122[1] = v117;
          v123 = v122 + 4;
          v122[2] = v120;
          v122[3] = v119;
          goto LABEL_151;
        }
      }
      else
      {
        v118 = *v116;
        v117 = v116[1];
        v120 = v116[2];
        v119 = v116[3];
        v122 = *(_QWORD **)(v102 + 8);
        v121 = *(_QWORD *)(v102 + 16);
        if ((unint64_t)v122 < v121)
          goto LABEL_137;
      }
      v124 = *(_QWORD **)v102;
      v125 = ((uint64_t)v122 - *(_QWORD *)v102) >> 5;
      v126 = v125 + 1;
      if ((unint64_t)(v125 + 1) >> 59)
        goto LABEL_212;
      v127 = v121 - (_QWORD)v124;
      if (v127 >> 4 > v126)
        v126 = v127 >> 4;
      _CF = (unint64_t)v127 >= 0x7FFFFFFFFFFFFFE0;
      v128 = 0x7FFFFFFFFFFFFFFLL;
      if (!_CF)
        v128 = v126;
      if (v128 >> 59)
LABEL_211:
        sub_20E877A38();
      v129 = 32 * v128;
      v130 = (char *)operator new(32 * v128);
      v131 = &v130[32 * v125];
      *(_QWORD *)v131 = v118;
      *((_QWORD *)v131 + 1) = v117;
      *((_QWORD *)v131 + 2) = v120;
      *((_QWORD *)v131 + 3) = v119;
      v132 = v131;
      if (v122 != v124)
      {
        do
        {
          *((_OWORD *)v132 - 2) = *((_OWORD *)v122 - 2);
          *((_OWORD *)v132 - 1) = *((_OWORD *)v122 - 1);
          v132 -= 32;
          v122 -= 4;
        }
        while (v122 != v124);
        v122 = v124;
      }
      v123 = v131 + 32;
      *(_QWORD *)v102 = v132;
      *(_QWORD *)(v102 + 8) = v131 + 32;
      *(_QWORD *)(v102 + 16) = &v130[v129];
      if (v122)
        operator delete(v122);
LABEL_151:
      *(_QWORD *)(v102 + 8) = v123;
      v133 = v114 * *(double *)(*v113 + 32);
      v135 = *(double **)(v103 + 8);
      v134 = *(_QWORD *)(v103 + 16);
      if ((unint64_t)v135 >= v134)
      {
        v136 = *(double **)v103;
        v137 = (uint64_t)v135 - *(_QWORD *)v103;
        v138 = v137 >> 3;
        v139 = (v137 >> 3) + 1;
        if (v139 >> 61)
          goto LABEL_213;
        v140 = v134 - (_QWORD)v136;
        if (v140 >> 2 > v139)
          v139 = v140 >> 2;
        if ((unint64_t)v140 >= 0x7FFFFFFFFFFFFFF8)
          v141 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v141 = v139;
        if (v141)
        {
          if (v141 >> 61)
            goto LABEL_211;
          v142 = operator new(8 * v141);
          v143 = (double *)&v142[8 * v138];
          *v143 = v133;
          v115 = (uint64_t)(v143 + 1);
          v144 = (char *)v135 - (char *)v136;
          if (v135 == v136)
            goto LABEL_169;
LABEL_163:
          v145 = v144 - 8;
          if (v145 < 0x58)
            goto LABEL_230;
          if ((unint64_t)((char *)v135 - &v142[v137]) < 0x20)
            goto LABEL_230;
          v146 = (v145 >> 3) + 1;
          v147 = 8 * (v146 & 0x3FFFFFFFFFFFFFFCLL);
          v148 = &v135[v147 / 0xFFFFFFFFFFFFFFF8];
          v143 = (double *)((char *)v143 - v147);
          v149 = &v142[8 * v138 - 16];
          v150 = v135 - 2;
          v151 = v146 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v152 = *(_OWORD *)v150;
            *(v149 - 1) = *((_OWORD *)v150 - 1);
            *v149 = v152;
            v149 -= 2;
            v150 -= 4;
            v151 -= 4;
          }
          while (v151);
          v135 = v148;
          if (v146 != (v146 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_230:
            do
            {
              v153 = *((_QWORD *)v135-- - 1);
              *((_QWORD *)v143-- - 1) = v153;
            }
            while (v135 != v136);
          }
        }
        else
        {
          v142 = 0;
          v143 = (double *)(8 * v138);
          *(double *)(8 * v138) = v133;
          v115 = 8 * v138 + 8;
          v144 = (char *)v135 - (char *)v136;
          if (v135 != v136)
            goto LABEL_163;
        }
LABEL_169:
        *(_QWORD *)v103 = v143;
        *(_QWORD *)(v103 + 8) = v115;
        *(_QWORD *)(v103 + 16) = &v142[8 * v141];
        if (v136)
          operator delete(v136);
        goto LABEL_134;
      }
      *v135 = v133;
      v115 = (uint64_t)(v135 + 1);
LABEL_134:
      *(_QWORD *)(v103 + 8) = v115;
      v113 += 3;
    }
    while (v113 != v112);
  }
  v154 = **a2;
  v155 = (void **)(a1 + 36);
  if (a1 + 36 != (uint64_t *)v154)
  {
    v157 = *v154;
    v156 = v154[1];
    v158 = 0xAAAAAAAAAAAAAAABLL * (v156 - *v154);
    v159 = (uint64_t)(a1 + 38);
    v160 = a1[38];
    v161 = (char *)a1[36];
    if (0xAAAAAAAAAAAAAAABLL * ((v160 - (uint64_t)v161) >> 3) < v158)
    {
      if (v161)
      {
        v162 = (char *)a1[37];
        v163 = (void *)a1[36];
        if (v162 != v161)
        {
          v164 = (char *)a1[37];
          do
          {
            v166 = (void *)*((_QWORD *)v164 - 3);
            v164 -= 24;
            v165 = v166;
            if (v166)
            {
              *((_QWORD *)v162 - 2) = v165;
              operator delete(v165);
            }
            v162 = v164;
          }
          while (v164 != v161);
          v163 = *v155;
        }
        a1[37] = (uint64_t)v161;
        operator delete(v163);
        v160 = 0;
        *v155 = 0;
        a1[37] = 0;
        a1[38] = 0;
      }
      if (v158 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_215;
      v171 = 0xAAAAAAAAAAAAAAABLL * (v160 >> 3);
      v172 = 2 * v171;
      if (2 * v171 <= v158)
        v172 = v158;
      v173 = v171 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v172;
      if (v173 > 0xAAAAAAAAAAAAAAALL)
LABEL_215:
        sub_20E867F44();
      v174 = 3 * v173;
      v175 = operator new(24 * v173);
      a1[36] = (uint64_t)v175;
      a1[37] = (uint64_t)v175;
      a1[38] = (uint64_t)&v175[v174];
      a1[37] = (uint64_t)sub_20F415BFC(v159, v157, v156, v175);
      return;
    }
    v167 = (char *)a1[37];
    if (0xAAAAAAAAAAAAAAABLL * ((v167 - v161) >> 3) < v158)
    {
      v168 = &v157[(v167 - v161) >> 3];
      if (v167 != v161)
      {
        v169 = 8 * ((v167 - v161) >> 3);
        do
        {
          if (v157 != (uint64_t *)v161)
            sub_20F415D6C(v161, (_OWORD *)*v157, (_OWORD *)v157[1], 0x51B3BEA3677D46CFLL * ((v157[1] - *v157) >> 3));
          v157 += 3;
          v161 += 24;
          v169 -= 24;
        }
        while (v169);
        v161 = (char *)a1[37];
      }
      a1[37] = (uint64_t)sub_20F415BFC(v159, v168, v156, v161);
      return;
    }
    if (v157 == v156)
    {
      v170 = a1[36];
      v176 = a1;
      if (v167 == v161)
      {
LABEL_209:
        v176[37] = v170;
        return;
      }
    }
    else
    {
      v170 = a1[36];
      do
      {
        if (v157 != (uint64_t *)v161)
          sub_20F415D6C(v161, (_OWORD *)*v157, (_OWORD *)v157[1], 0x51B3BEA3677D46CFLL * ((v157[1] - *v157) >> 3));
        v157 += 3;
        v161 += 24;
        v170 += 24;
      }
      while (v157 != v156);
      v176 = a1;
      v167 = (char *)a1[37];
      if (v167 == (char *)v170)
        goto LABEL_209;
    }
    v177 = v167;
    do
    {
      v179 = (void *)*((_QWORD *)v177 - 3);
      v177 -= 24;
      v178 = v179;
      if (v179)
      {
        *((_QWORD *)v167 - 2) = v178;
        operator delete(v178);
      }
      v167 = v177;
    }
    while (v177 != (char *)v170);
    goto LABEL_209;
  }
}

void sub_20F41590C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33)
{
  if (a33)
  {
    if (a32 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F41594C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_254A68958);
  _Unwind_Resume(a1);
}

void sub_20F415980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  sub_20E86E8C4((uint64_t *)(v27 - 144));
  sub_20E86E8C4((uint64_t *)(v27 - 152));
  sub_20E86E658((uint64_t)&a27);
  sub_20E863714((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F4159B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  MEMORY[0x212BC6398](v9, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F4159E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F4159FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;

  *(_QWORD *)(a14 + 296) = v14;
  _Unwind_Resume(a1);
}

void sub_20F415A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F415A1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *object,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  if (a34 && a33 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F415A60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  char *v27;
  char *v29;
  char *v30;
  char *v31;
  void *v32;
  void *v33;

  if (!__p)
    _Unwind_Resume(exception_object);
  v29 = v27;
  v30 = __p;
  if (v27 != __p)
  {
    v31 = v27;
    do
    {
      v33 = (void *)*((_QWORD *)v31 - 3);
      v31 -= 24;
      v32 = v33;
      if (v33)
      {
        *((_QWORD *)v29 - 2) = v32;
        operator delete(v32);
      }
      v29 = v31;
    }
    while (v31 != __p);
    v30 = __p;
  }
  operator delete(v30);
  _Unwind_Resume(exception_object);
}

void sub_20F415AF8(_QWORD *a1)
{
  sub_20F415FB8(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20F415B20(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;

  v3 = a1[36];
  v2 = a1[37];
  if (v2 != v3)
  {
    v4 = a1[37];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[37] = v3;
  v7 = a1[1];
  v8 = -1431655765 * ((unint64_t)(a1[2] - v7) >> 3);
  if ((_DWORD)v8)
  {
    v9 = a1[7];
    v10 = (_QWORD *)(v7 + 8);
    v11 = (_QWORD *)(a1[10] + 8);
    v12 = (_QWORD *)(a1[4] + 8);
    do
    {
      *v10 = *(v10 - 1);
      *v12 = *(v12 - 1);
      if (*(_BYTE *)(v9 + 24))
        *(_QWORD *)(v9 + 8) = *(_QWORD *)v9;
      v10 += 3;
      *v11 = *(v11 - 1);
      v11 += 3;
      v9 += 32;
      v12 += 3;
      --v8;
    }
    while (v8);
  }
}

_QWORD *sub_20F415BFC(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      v7 = *v6;
      v8 = v6[1];
      v9 = v8 - *v6;
      if (v8 != *v6)
      {
        v10 = 0x51B3BEA3677D46CFLL * (v9 >> 3);
        if (v10 >= 0xAE4C415C9882BALL)
          sub_20E867F44();
        v11 = (char *)operator new(v9);
        v12 = 0;
        *a4 = v11;
        a4[1] = v11;
        a4[2] = &v11[376 * v10];
        do
        {
          v13 = v7 + v12;
          v14 = &v11[v12];
          *(_OWORD *)v14 = *(_OWORD *)(v7 + v12);
          *((_OWORD *)v14 + 1) = *(_OWORD *)(v7 + v12 + 16);
          memcpy(&v11[v12 + 32], (const void *)(v7 + v12 + 32), 0x158uLL);
          v12 += 376;
        }
        while (v13 + 376 != v8);
        a4[1] = &v11[v12];
      }
      v6 += 3;
      a4 += 3;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_20F415D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E96AC74((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20F415D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_20E96AC74((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *sub_20F415D6C(char *result, _OWORD *a2, _OWORD *a3, unint64_t a4)
{
  _OWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char **v14;
  _OWORD *v15;
  __int128 v16;
  int64_t v17;
  char **v18;
  char *v19;
  _OWORD *v20;
  _OWORD *v21;
  _OWORD *v22;
  uint64_t v23;
  _OWORD *v24;

  v6 = a2;
  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (0x51B3BEA3677D46CFLL * ((v8 - *(_QWORD *)result) >> 3) >= a4)
  {
    v18 = (char **)(result + 8);
    v19 = (char *)*((_QWORD *)result + 1);
    if (0x51B3BEA3677D46CFLL * ((v19 - v9) >> 3) >= a4)
    {
      v23 = *(_QWORD *)result;
      if (a2 != a3)
      {
        v24 = *(_OWORD **)result;
        do
        {
          *v24 = *v6;
          v24[1] = v6[1];
          result = (char *)memcpy(v24 + 2, v6 + 2, 0x158uLL);
          v23 += 376;
          v6 = (_OWORD *)((char *)v6 + 376);
          v24 = (_OWORD *)((char *)v24 + 376);
        }
        while (v6 != a3);
      }
      v17 = v23 - (_QWORD)v9;
    }
    else
    {
      v20 = (_OWORD *)((char *)a2 + 8 * ((v19 - v9) >> 3));
      if (v19 != v9)
      {
        do
        {
          *(_OWORD *)v9 = *v6;
          *((_OWORD *)v9 + 1) = v6[1];
          result = (char *)memcpy(v9 + 32, v6 + 2, 0x158uLL);
          v6 = (_OWORD *)((char *)v6 + 376);
          v9 += 376;
        }
        while (v6 != v20);
        v9 = *v18;
      }
      v21 = v9;
      if (v20 != a3)
      {
        v21 = v9;
        v22 = v9;
        do
        {
          *v22 = *v20;
          v22[1] = v20[1];
          result = (char *)memcpy(v22 + 2, v20 + 2, 0x158uLL);
          v21 = (_OWORD *)((char *)v21 + 376);
          v20 = (_OWORD *)((char *)v20 + 376);
          v22 = (_OWORD *)((char *)v22 + 376);
        }
        while (v20 != a3);
      }
      v17 = (char *)v21 - v9;
    }
  }
  else
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0xAE4C415C9882B9)
      goto LABEL_28;
    v10 = 0x51B3BEA3677D46CFLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    v12 = v10 >= 0x572620AE4C415CLL ? 0xAE4C415C9882B9 : v11;
    if (v12 > 0xAE4C415C9882B9)
LABEL_28:
      sub_20E867F44();
    v13 = 376 * v12;
    result = (char *)operator new(376 * v12);
    v9 = result;
    *v7 = result;
    v7[1] = result;
    v14 = (char **)(v7 + 1);
    v7[2] = &result[v13];
    v15 = result;
    if (v6 != a3)
    {
      v15 = result;
      do
      {
        v16 = v6[1];
        *v15 = *v6;
        v15[1] = v16;
        result = (char *)memcpy(v15 + 2, v6 + 2, 0x158uLL);
        v15 = (_OWORD *)((char *)v15 + 376);
        v6 = (_OWORD *)((char *)v6 + 376);
      }
      while (v6 != a3);
    }
    v17 = (char *)v15 - v9;
    v18 = v14;
  }
  *v18 = &v9[v17];
  return result;
}

_QWORD *sub_20F415FB8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  uint64_t v11;

  *a1 = &off_24C9FFE88;
  v2 = a1[36];
  if (v2)
  {
    v3 = a1[37];
    v4 = (void *)a1[36];
    if (v3 != v2)
    {
      v5 = a1[37];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[36];
    }
    a1[37] = v2;
    operator delete(v4);
  }
  v8 = (_QWORD *)a1[15];
  a1[15] = 0;
  if (v8)
  {
    v9 = (void *)v8[16];
    if (v9)
    {
      v8[17] = v9;
      operator delete(v9);
    }
    v10 = (void *)v8[13];
    if (v10)
    {
      v8[14] = v10;
      operator delete(v10);
    }
    MEMORY[0x212BC6398](v8, 0x1030C40FC32EE4FLL);
  }
  v11 = a1[14];
  a1[14] = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  return sub_20F414630(a1);
}

_BYTE *sub_20F416094(_BYTE *result, _BYTE *a2, int a3)
{
  _BYTE *v3;
  _BYTE *v4;
  _BYTE *v5;
  _BYTE *v6;
  _BYTE *v7;
  _BYTE *v8;
  _BYTE *v9;
  _BYTE *v10;
  _BYTE *v11;
  _BYTE *v12;

  *result = *a2;
  result[1] = a2[1];
  result[2] = a2[2];
  result[3] = a2[3];
  result[4] = a2[4];
  result[5] = a2[5];
  result[6] = a2[6];
  result[7] = a2[7];
  result[8] = a2[8];
  result[9] = a2[9];
  result[10] = a2[10];
  v3 = &a2[a3];
  result[11] = *v3;
  result[12] = v3[1];
  result[13] = v3[2];
  result[14] = v3[3];
  result[15] = v3[4];
  result[16] = v3[5];
  result[17] = v3[6];
  result[18] = v3[7];
  result[19] = v3[8];
  result[20] = v3[9];
  result[21] = v3[10];
  v4 = &v3[a3];
  result[22] = *v4;
  result[23] = v4[1];
  result[24] = v4[2];
  result[25] = v4[3];
  result[26] = v4[4];
  result[27] = v4[5];
  result[28] = v4[6];
  result[29] = v4[7];
  result[30] = v4[8];
  result[31] = v4[9];
  result[32] = v4[10];
  v5 = &v4[a3];
  result[33] = *v5;
  result[34] = v5[1];
  result[35] = v5[2];
  result[36] = v5[3];
  result[37] = v5[4];
  result[38] = v5[5];
  result[39] = v5[6];
  result[40] = v5[7];
  result[41] = v5[8];
  result[42] = v5[9];
  result[43] = v5[10];
  v6 = &v5[a3];
  result[44] = *v6;
  result[45] = v6[1];
  result[46] = v6[2];
  result[47] = v6[3];
  result[48] = v6[4];
  result[49] = v6[5];
  result[50] = v6[6];
  result[51] = v6[7];
  result[52] = v6[8];
  result[53] = v6[9];
  result[54] = v6[10];
  v7 = &v6[a3];
  result[55] = *v7;
  result[56] = v7[1];
  result[57] = v7[2];
  result[58] = v7[3];
  result[59] = v7[4];
  result[60] = v7[5];
  result[61] = v7[6];
  result[62] = v7[7];
  result[63] = v7[8];
  result[64] = v7[9];
  result[65] = v7[10];
  v8 = &v7[a3];
  result[66] = *v8;
  result[67] = v8[1];
  result[68] = v8[2];
  result[69] = v8[3];
  result[70] = v8[4];
  result[71] = v8[5];
  result[72] = v8[6];
  result[73] = v8[7];
  result[74] = v8[8];
  result[75] = v8[9];
  result[76] = v8[10];
  v9 = &v8[a3];
  result[77] = *v9;
  result[78] = v9[1];
  result[79] = v9[2];
  result[80] = v9[3];
  result[81] = v9[4];
  result[82] = v9[5];
  result[83] = v9[6];
  result[84] = v9[7];
  result[85] = v9[8];
  result[86] = v9[9];
  result[87] = v9[10];
  v10 = &v9[a3];
  result[88] = *v10;
  result[89] = v10[1];
  result[90] = v10[2];
  result[91] = v10[3];
  result[92] = v10[4];
  result[93] = v10[5];
  result[94] = v10[6];
  result[95] = v10[7];
  result[96] = v10[8];
  result[97] = v10[9];
  result[98] = v10[10];
  v11 = &v10[a3];
  result[99] = *v11;
  result[100] = v11[1];
  result[101] = v11[2];
  result[102] = v11[3];
  result[103] = v11[4];
  result[104] = v11[5];
  result[105] = v11[6];
  result[106] = v11[7];
  result[107] = v11[8];
  result[108] = v11[9];
  result[109] = v11[10];
  v12 = &v11[a3];
  result[110] = *v12;
  result[111] = v12[1];
  result[112] = v12[2];
  result[113] = v12[3];
  result[114] = v12[4];
  result[115] = v12[5];
  result[116] = v12[6];
  result[117] = v12[7];
  result[118] = v12[8];
  result[119] = v12[9];
  result[120] = v12[10];
  return result;
}

void sub_20F41648C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5, _QWORD *a6)
{
  unint64_t v7;
  unsigned int v8;
  uint64_t i;
  _QWORD *v10;
  uint64_t j;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v18;

  a6[1] = *a6;
  sub_20F4165AC(a1, a2, a3, a4, a5);
  v18 = (_QWORD *)(a1 + 16);
  v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) - 1;
  if (v7 >= 2)
  {
    v8 = *(_DWORD *)(a1 + 64);
    for (i = 1; i != v7; ++i)
    {
      v10 = (_QWORD *)(*v18 + 24 * i);
      for (j = 1; j != v7; ++j)
      {
        v12 = (_QWORD *)(*v10 + 24 * j);
        v13 = v12[1] - *v12;
        if (v13)
        {
          v14 = 0;
          v15 = v13 >> 3;
          if (v15 <= 1)
            v16 = 1;
          else
            v16 = v15;
          do
            sub_20F416D0C(*(_QWORD *)(*v12 + 8 * v14++), i, j, v8, v18 + 3);
          while (v16 != v14);
        }
      }
    }
  }
  sub_20F416754((uint64_t)a6, v18);
}

uint64_t sub_20F4165AC(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  BOOL v28;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  BOOL v34;
  BOOL v35;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;

  v5 = *a3;
  v6 = a3[1] - *a3;
  v7 = *a5;
  v8 = a5[1];
  v9 = *(_DWORD *)result;
  v10 = *(_DWORD *)(result + 4);
  v11 = *(_QWORD *)(result + 16);
  v12 = *(_QWORD *)(result + 24);
  v13 = v12 - v11;
  if (v12 != v11)
  {
    v14 = 0;
    v15 = v13 / 24;
    if (v15 <= 1)
      v15 = 1;
    do
    {
      v16 = (uint64_t *)(v11 + 24 * v14);
      v17 = *v16;
      v18 = v16[1] - *v16;
      if (v18)
      {
        v19 = v18 / 24;
        if (v19 <= 1)
          v19 = 1;
        v20 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 24 * v14) + 8);
        v21 = (_QWORD *)(v17 + 8);
        do
        {
          *v21 = *(v21 - 1);
          v21 += 3;
          *v20 = *(v20 - 1);
          v20 += 3;
          --v19;
        }
        while (v19);
      }
      ++v14;
    }
    while (v14 != v15);
  }
  v22 = (v6 >> 3);
  if ((v6 >> 3))
  {
    v23 = 0;
    v24 = 8 * v22;
    while (1)
    {
      v25 = *(_DWORD *)(v5 + v23);
      v26 = *(_DWORD *)(v5 + v23 + 4);
      v27 = v25 >= 6 && v26 >= 6;
      v28 = !v27 || v25 >= v9 - 6;
      if (!v28 && v26 < v10 - 6)
        break;
      v23 += 8;
      if (v24 == v23)
        goto LABEL_26;
    }
    v37 = *(_BYTE **)(*(_QWORD *)(result + 240) + v23);
    v38 = (int)v25;
    v39 = *(_QWORD *)(a2 + 8 * (int)(v26 - 5));
LABEL_41:
    sub_20F416094(v37, (_BYTE *)(v38 + v39 - 5), v9);
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureMatchingUnsanitized/include_private/VIO/FeatureMatchingUnsanitized/NCCFeatureMatcher_NEON_INTRINSIC.h", 34, (uint64_t)"", 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_21023DDB0);
    abort();
  }
LABEL_26:
  if (((unint64_t)(v8 - v7) >> 3))
  {
    v30 = 0;
    v31 = v10 - 6;
    while (1)
    {
      v32 = *(_DWORD *)(v7 + v30);
      v33 = *(_DWORD *)(v7 + v30 + 4);
      v34 = v32 >= 6 && v33 >= 6;
      v35 = !v34 || v32 >= v9 - 6;
      if (!v35 && v33 < v31)
        break;
      v30 += 8;
      if (8 * ((unint64_t)(v8 - v7) >> 3) == v30)
        return result;
    }
    v37 = *(_BYTE **)(*(_QWORD *)(result + 384) + v30);
    v38 = (int)v32;
    v39 = *(_QWORD *)(a4 + 8 * (int)(v33 - 5));
    goto LABEL_41;
  }
  return result;
}

void sub_20F416754(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  int *v11;
  int **v12;
  int v13;
  int v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  _BYTE *v24;
  _DWORD *v25;
  int64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  _OWORD *v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3) - 1;
  if (v40 >= 2)
  {
    v3 = 1;
    do
    {
      v38 = v3;
      v39 = (_QWORD *)(*a2 + 24 * v3);
      v4 = 1;
      do
      {
        v41 = v4;
        v5 = (_QWORD *)(*v39 + 24 * v4);
        v6 = v5[1] - *v5;
        if (v6)
        {
          v7 = 0;
          v8 = v6 >> 3;
          if (v8 <= 1)
            v9 = 1;
          else
            v9 = v8;
          while (2)
          {
            v11 = *(int **)(*v5 + 8 * v7);
            v12 = (int **)*((_QWORD *)v11 + 1);
            if (!v12 || v12[1] != v11)
              goto LABEL_12;
            v13 = *v11;
            v14 = *(_DWORD *)v12;
            v16 = *(char **)(a1 + 8);
            v15 = *(_QWORD *)(a1 + 16);
            if ((unint64_t)v16 < v15)
            {
              *(_DWORD *)v16 = v13;
              *((_DWORD *)v16 + 1) = v14;
              v10 = v16 + 8;
            }
            else
            {
              v17 = *(char **)a1;
              v18 = (uint64_t)&v16[-*(_QWORD *)a1];
              v19 = v18 >> 3;
              v20 = (v18 >> 3) + 1;
              if (v20 >> 61)
                sub_20E867F44();
              v21 = v15 - (_QWORD)v17;
              if (v21 >> 2 > v20)
                v20 = v21 >> 2;
              v22 = (unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8;
              v23 = 0x1FFFFFFFFFFFFFFFLL;
              if (!v22)
                v23 = v20;
              if (v23 >> 61)
                sub_20E877A38();
              v42 = 8 * v23;
              v24 = operator new(8 * v23);
              v25 = &v24[8 * v19];
              *v25 = v13;
              v25[1] = v14;
              v26 = v16 - v17;
              if (v16 == v17)
              {
                v28 = &v24[8 * v19];
              }
              else
              {
                v27 = v26 - 8;
                if ((unint64_t)(v26 - 8) < 0x58)
                {
                  v28 = &v24[8 * v19];
                  goto LABEL_30;
                }
                v28 = &v24[8 * v19];
                if ((unint64_t)(&v16[-v18] - v24) < 0x20)
                  goto LABEL_38;
                v29 = (v27 >> 3) + 1;
                v30 = 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL);
                v31 = &v16[-v30];
                v28 = (char *)&v25[v30 / 0xFFFFFFFFFFFFFFFCLL];
                v32 = &v24[8 * v19 - 16];
                v33 = v16 - 16;
                v34 = v29 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v35 = *(_OWORD *)v33;
                  *(v32 - 1) = *((_OWORD *)v33 - 1);
                  *v32 = v35;
                  v32 -= 2;
                  v33 -= 32;
                  v34 -= 4;
                }
                while (v34);
                v16 = v31;
                if (v29 != (v29 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_38:
                  do
                  {
LABEL_30:
                    v36 = *((_QWORD *)v16 - 1);
                    v16 -= 8;
                    *((_QWORD *)v28 - 1) = v36;
                    v28 -= 8;
                  }
                  while (v16 != v17);
                }
              }
              v10 = v25 + 2;
              *(_QWORD *)a1 = v28;
              *(_QWORD *)(a1 + 8) = v25 + 2;
              *(_QWORD *)(a1 + 16) = &v24[v42];
              if (v17)
                operator delete(v17);
            }
            *(_QWORD *)(a1 + 8) = v10;
LABEL_12:
            if (++v7 == v9)
              break;
            continue;
          }
        }
        v4 = v41 + 1;
      }
      while (v41 + 1 != v40);
      v3 = v38 + 1;
    }
    while (v38 + 1 != v40);
  }
}

void sub_20F4169A0(uint64_t a1, unsigned int a2, int a3, uint64_t a4, float a5)
{
  float v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void **v10;
  unint64_t v11;
  void **v12;
  void **v13;
  void *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void **v22;
  unint64_t v23;
  void **v24;
  void **v25;
  void *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;

  *(float *)(a1 + 68) = a5;
  *(_QWORD *)(a1 + 8) = a4;
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_DWORD *)(a1 + 64) = (float)((float)((float)((float)a2 * a5) * (float)a2) * a5);
  v6 = ceilf(1.0 / a5) + 2.0;
  v7 = (unint64_t)v6;
  v9 = (_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 16);
  v10 = *(void ***)(a1 + 24);
  v11 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v10 - v8) >> 3);
  if ((unint64_t)v6 <= v11)
  {
    if ((unint64_t)v6 < v11)
    {
      v12 = (void **)(v8 + 24 * v7);
      if (v10 != v12)
      {
        v13 = *(void ***)(a1 + 24);
        do
        {
          v16 = (char *)*(v13 - 3);
          v13 -= 3;
          v15 = v16;
          if (v16)
          {
            v17 = (char *)*(v10 - 2);
            v14 = v15;
            if (v17 != v15)
            {
              v18 = (char *)*(v10 - 2);
              do
              {
                v20 = (void *)*((_QWORD *)v18 - 3);
                v18 -= 24;
                v19 = v20;
                if (v20)
                {
                  *((_QWORD *)v17 - 2) = v19;
                  operator delete(v19);
                }
                v17 = v18;
              }
              while (v18 != v15);
              v14 = *v13;
            }
            *(v10 - 2) = v15;
            operator delete(v14);
          }
          v10 = v13;
        }
        while (v13 != v12);
      }
      *(_QWORD *)(a1 + 24) = v12;
    }
  }
  else
  {
    sub_20F41702C(a1 + 16, (unint64_t)v6 - v11);
  }
  v21 = *(_QWORD *)(a1 + 40);
  v22 = *(void ***)(a1 + 48);
  v23 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v22 - v21) >> 3);
  if (v7 > v23)
  {
    sub_20F41702C(a1 + 40, v7 - v23);
LABEL_32:
    v33 = 0;
    do
    {
      v34 = (_QWORD *)(*v9 + 24 * v33);
      v36 = v34 + 1;
      v35 = v34[1];
      v37 = 0xAAAAAAAAAAAAAAABLL * ((v35 - *v34) >> 3);
      if (v7 <= v37)
      {
        if (v7 < v37)
        {
          v38 = *v34 + 24 * v7;
          if (v35 != v38)
          {
            v39 = v34[1];
            do
            {
              v41 = *(void **)(v39 - 24);
              v39 -= 24;
              v40 = v41;
              if (v41)
              {
                *(_QWORD *)(v35 - 16) = v40;
                operator delete(v40);
              }
              v35 = v39;
            }
            while (v39 != v38);
          }
          *v36 = v38;
        }
      }
      else
      {
        sub_20F411E58((uint64_t)v34, v7 - v37);
      }
      v42 = (_QWORD *)(*(_QWORD *)(a1 + 40) + 24 * v33);
      v44 = v42 + 1;
      v43 = v42[1];
      v45 = 0xAAAAAAAAAAAAAAABLL * ((v43 - *v42) >> 3);
      if (v7 > v45)
      {
        sub_20F411E58((uint64_t)v42, v7 - v45);
      }
      else if (v7 < v45)
      {
        v46 = *v42 + 24 * v7;
        if (v43 != v46)
        {
          v47 = v42[1];
          do
          {
            v49 = *(void **)(v47 - 24);
            v47 -= 24;
            v48 = v49;
            if (v49)
            {
              *(_QWORD *)(v43 - 16) = v48;
              operator delete(v48);
            }
            v43 = v47;
          }
          while (v47 != v46);
        }
        *v44 = v46;
      }
      ++v33;
    }
    while (v33 != v7);
    goto LABEL_52;
  }
  if (v7 < v23)
  {
    v24 = (void **)(v21 + 24 * v7);
    if (v22 != v24)
    {
      v25 = *(void ***)(a1 + 48);
      do
      {
        v28 = (char *)*(v25 - 3);
        v25 -= 3;
        v27 = v28;
        if (v28)
        {
          v29 = (char *)*(v22 - 2);
          v26 = v27;
          if (v29 != v27)
          {
            v30 = (char *)*(v22 - 2);
            do
            {
              v32 = (void *)*((_QWORD *)v30 - 3);
              v30 -= 24;
              v31 = v32;
              if (v32)
              {
                *((_QWORD *)v29 - 2) = v31;
                operator delete(v31);
              }
              v29 = v30;
            }
            while (v30 != v27);
            v26 = *v25;
          }
          *(v22 - 2) = v27;
          operator delete(v26);
        }
        v22 = v25;
      }
      while (v25 != v24);
    }
    *(_QWORD *)(a1 + 48) = v24;
  }
  if (v7)
    goto LABEL_32;
LABEL_52:
  v50 = *(_QWORD *)(a1 + 72);
  v51 = *(_QWORD *)(a1 + 8);
  v52 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 80) - v50) >> 4);
  if (v51 <= v52)
  {
    if (v51 < v52)
      *(_QWORD *)(a1 + 80) = v50 + 48 * v51;
  }
  else
  {
    sub_20F417238((void **)(a1 + 72), v51 - v52);
    v51 = *(_QWORD *)(a1 + 8);
  }
  v53 = *(_QWORD *)(a1 + 96);
  v54 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 104) - v53) >> 4);
  if (v51 <= v54)
  {
    if (v51 < v54)
      *(_QWORD *)(a1 + 104) = v53 + 48 * v51;
  }
  else
  {
    sub_20F417238((void **)(a1 + 96), v51 - v54);
  }
}

uint64_t sub_20F416D0C(uint64_t result, int a2, int a3, unsigned int a4, uint64_t *a5)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;

  v5 = *a5;
  v6 = *(_DWORD *)(result + 16);
  v7 = *(_DWORD *)(result + 20);
  v8 = *(_QWORD *)(*a5 + 24 * a2 - 24);
  v9 = a3 - 1;
  v10 = *(_QWORD *)(v8 + 24 * v9);
  v11 = *(_QWORD *)(v8 + 24 * v9 + 8) - v10;
  if (v11)
  {
    v12 = v11 >> 3;
    if (v12 <= 1)
      v12 = 1;
    while ((*(_DWORD *)(*(_QWORD *)v10 + 16) - v6) * (*(_DWORD *)(*(_QWORD *)v10 + 16) - v6)
          + (*(_DWORD *)(*(_QWORD *)v10 + 20) - v7) * (*(_DWORD *)(*(_QWORD *)v10 + 20) - v7) >= a4)
    {
      v10 += 8;
      if (!--v12)
        goto LABEL_6;
    }
LABEL_47:
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureMatchingUnsanitized/include_private/VIO/FeatureMatchingUnsanitized/NCCFeatureMatcher_NEON_INTRINSIC.h", 29, (uint64_t)"", 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_21023DDB0);
    abort();
  }
LABEL_6:
  v13 = *(_QWORD *)(v8 + 24 * a3);
  v14 = *(_QWORD *)(v8 + 24 * a3 + 8) - v13;
  if (v14)
  {
    v15 = v14 >> 3;
    if (v15 <= 1)
      v15 = 1;
    while ((*(_DWORD *)(*(_QWORD *)v13 + 16) - v6) * (*(_DWORD *)(*(_QWORD *)v13 + 16) - v6)
          + (*(_DWORD *)(*(_QWORD *)v13 + 20) - v7) * (*(_DWORD *)(*(_QWORD *)v13 + 20) - v7) >= a4)
    {
      v13 += 8;
      if (!--v15)
        goto LABEL_11;
    }
    goto LABEL_47;
  }
LABEL_11:
  v16 = a3 + 1;
  v18 = (uint64_t *)(v8 + 24 * v16);
  v17 = *v18;
  v19 = v18[1] - *v18;
  if (v19)
  {
    v20 = v19 >> 3;
    if (v20 <= 1)
      v20 = 1;
    while ((*(_DWORD *)(*(_QWORD *)v17 + 16) - v6) * (*(_DWORD *)(*(_QWORD *)v17 + 16) - v6)
          + (*(_DWORD *)(*(_QWORD *)v17 + 20) - v7) * (*(_DWORD *)(*(_QWORD *)v17 + 20) - v7) >= a4)
    {
      v17 += 8;
      if (!--v20)
        goto LABEL_16;
    }
    goto LABEL_47;
  }
LABEL_16:
  v21 = *(_QWORD *)(v5 + 24 * a2);
  v22 = *(_QWORD *)(v21 + 24 * v9);
  v23 = *(_QWORD *)(v21 + 24 * v9 + 8) - v22;
  if (v23)
  {
    v24 = v23 >> 3;
    if (v24 <= 1)
      v24 = 1;
    do
    {
      result = ((*(_DWORD *)(*(_QWORD *)v22 + 16) - v6) * (*(_DWORD *)(*(_QWORD *)v22 + 16) - v6)
                            + (*(_DWORD *)(*(_QWORD *)v22 + 20) - v7) * (*(_DWORD *)(*(_QWORD *)v22 + 20) - v7));
      if (result < a4)
        goto LABEL_47;
      v22 += 8;
    }
    while (--v24);
  }
  v25 = *(_QWORD *)(v21 + 24 * a3);
  v26 = *(_QWORD *)(v21 + 24 * a3 + 8) - v25;
  if (v26)
  {
    v27 = v26 >> 3;
    if (v27 <= 1)
      v27 = 1;
    do
    {
      result = ((*(_DWORD *)(*(_QWORD *)v25 + 16) - v6) * (*(_DWORD *)(*(_QWORD *)v25 + 16) - v6)
                            + (*(_DWORD *)(*(_QWORD *)v25 + 20) - v7) * (*(_DWORD *)(*(_QWORD *)v25 + 20) - v7));
      if (result < a4)
        goto LABEL_47;
      v25 += 8;
    }
    while (--v27);
  }
  v29 = (uint64_t *)(v21 + 24 * v16);
  v28 = *v29;
  v30 = v29[1] - *v29;
  if (v30)
  {
    v31 = v30 >> 3;
    if (v31 <= 1)
      v31 = 1;
    do
    {
      result = ((*(_DWORD *)(*(_QWORD *)v28 + 16) - v6) * (*(_DWORD *)(*(_QWORD *)v28 + 16) - v6));
      if ((int)result + (*(_DWORD *)(*(_QWORD *)v28 + 20) - v7) * (*(_DWORD *)(*(_QWORD *)v28 + 20) - v7) < a4)
        goto LABEL_47;
      v28 += 8;
    }
    while (--v31);
  }
  v32 = *(_QWORD *)(v5 + 24 * a2 + 24);
  v34 = (uint64_t *)(v32 + 24 * v9);
  v33 = *v34;
  v35 = v34[1] - *v34;
  if (v35)
  {
    v36 = v35 >> 3;
    if (v36 <= 1)
      v36 = 1;
    while ((*(_DWORD *)(*(_QWORD *)v33 + 16) - v6) * (*(_DWORD *)(*(_QWORD *)v33 + 16) - v6)
          + (*(_DWORD *)(*(_QWORD *)v33 + 20) - v7) * (*(_DWORD *)(*(_QWORD *)v33 + 20) - v7) >= a4)
    {
      v33 += 8;
      if (!--v36)
        goto LABEL_36;
    }
    goto LABEL_47;
  }
LABEL_36:
  v37 = *(_QWORD *)(v32 + 24 * a3);
  v38 = *(_QWORD *)(v32 + 24 * a3 + 8) - v37;
  if (v38)
  {
    v39 = v38 >> 3;
    if (v39 <= 1)
      v39 = 1;
    while ((*(_DWORD *)(*(_QWORD *)v37 + 16) - v6) * (*(_DWORD *)(*(_QWORD *)v37 + 16) - v6)
          + (*(_DWORD *)(*(_QWORD *)v37 + 20) - v7) * (*(_DWORD *)(*(_QWORD *)v37 + 20) - v7) >= a4)
    {
      v37 += 8;
      if (!--v39)
        goto LABEL_41;
    }
    goto LABEL_47;
  }
LABEL_41:
  v40 = *(_QWORD *)(v32 + 24 * v16);
  v41 = *(_QWORD *)(v32 + 24 * v16 + 8) - v40;
  if (v41)
  {
    v42 = v41 >> 3;
    if (v42 <= 1)
      v42 = 1;
    while ((*(_DWORD *)(*(_QWORD *)v40 + 16) - v6) * (*(_DWORD *)(*(_QWORD *)v40 + 16) - v6)
          + (*(_DWORD *)(*(_QWORD *)v40 + 20) - v7) * (*(_DWORD *)(*(_QWORD *)v40 + 20) - v7) >= a4)
    {
      v40 += 8;
      if (!--v42)
        return result;
    }
    goto LABEL_47;
  }
  return result;
}

void sub_20F41702C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  void **v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  void **v19;
  void **v20;
  void *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  void *v26;
  void *v27;

  v5 = *(void ***)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 3) >= a2)
  {
    if (a2)
    {
      v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(a1 + 8), v12);
      v5 = (void **)((char *)v5 + v12);
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(void ***)a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(_QWORD *)a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_20E867F44();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL)
        sub_20E877A38();
      v11 = (char *)operator new(24 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[24 * v7];
    v14 = &v11[24 * v10];
    v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 == v6)
    {
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
    }
    else
    {
      do
      {
        v17 = v13;
        *((_QWORD *)v13 - 2) = 0;
        *((_QWORD *)v13 - 1) = 0;
        v18 = *(_OWORD *)(v5 - 3);
        v5 -= 3;
        *(_OWORD *)(v13 - 24) = v18;
        v13 -= 24;
        *((_QWORD *)v17 - 1) = v5[2];
        *v5 = 0;
        v5[1] = 0;
        v5[2] = 0;
      }
      while (v5 != v6);
      v5 = *(void ***)a1;
      v19 = *(void ***)(a1 + 8);
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (v19 != v5)
      {
        v20 = v19;
        do
        {
          v23 = (char *)*(v20 - 3);
          v20 -= 3;
          v22 = v23;
          if (v23)
          {
            v24 = (char *)*(v19 - 2);
            v21 = v22;
            if (v24 != v22)
            {
              v25 = (char *)*(v19 - 2);
              do
              {
                v27 = (void *)*((_QWORD *)v25 - 3);
                v25 -= 24;
                v26 = v27;
                if (v27)
                {
                  *((_QWORD *)v24 - 2) = v26;
                  operator delete(v26);
                }
                v24 = v25;
              }
              while (v25 != v22);
              v21 = *v20;
            }
            *(v19 - 2) = v22;
            operator delete(v21);
          }
          v19 = v20;
        }
        while (v20 != v5);
      }
    }
    if (v5)
      operator delete(v5);
  }
}

void sub_20F417238(void **a1, unint64_t a2)
{
  char *v4;
  _BYTE *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  __int128 v23;

  v4 = (char *)a1[1];
  v5 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 4) >= a2)
  {
    if (a2)
    {
      v11 = &v4[48 * a2];
      v12 = 48 * a2;
      v13 = v4 + 8;
      do
      {
        *(_OWORD *)(v13 + 24) = 0uLL;
        *(_OWORD *)(v13 + 8) = 0uLL;
        *((_QWORD *)v13 - 1) = 0x800000FFFFFFFFLL;
        *(_QWORD *)v13 = 0;
        v13 += 48;
        v12 -= 48;
      }
      while (v12);
      a1[1] = v11;
    }
    else
    {
      a1[1] = v4;
    }
  }
  else
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a1) >> 4);
    v7 = v6 + a2;
    if (v6 + a2 > 0x555555555555555)
      sub_20E867F44();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 4);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x2AAAAAAAAAAAAAALL)
      v9 = 0x555555555555555;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0x555555555555555)
        sub_20E877A38();
      v10 = (char *)operator new(48 * v9);
    }
    else
    {
      v10 = 0;
    }
    v14 = &v10[48 * v6];
    v15 = 48 * a2;
    v16 = &v14[48 * a2];
    v17 = v14 + 8;
    do
    {
      *(_OWORD *)(v17 + 24) = 0uLL;
      *(_OWORD *)(v17 + 8) = 0uLL;
      *((_QWORD *)v17 - 1) = 0x800000FFFFFFFFLL;
      *(_QWORD *)v17 = 0;
      v17 += 48;
      v15 -= 48;
    }
    while (v15);
    v18 = &v10[48 * v9];
    v20 = (char *)*a1;
    v19 = (char *)a1[1];
    if (v19 != *a1)
    {
      v21 = 0;
      do
      {
        v22 = &v14[v21];
        *((_OWORD *)v22 - 3) = *(_OWORD *)&v19[v21 - 48];
        *((_QWORD *)v22 - 4) = *(_QWORD *)&v19[v21 - 32];
        v23 = *(_OWORD *)&v19[v21 - 24];
        *((_DWORD *)v22 - 2) = *(_DWORD *)&v19[v21 - 8];
        *(_OWORD *)(v22 - 24) = v23;
        v21 -= 48;
      }
      while (&v19[v21] != v20);
      v19 = (char *)*a1;
      v14 += v21;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v18;
    if (v19)
      operator delete(v19);
  }
}

uint64_t sub_20F4173FC(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  _QWORD *v8;
  int32x4_t *v9;
  unint64_t v10;
  int32x4_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int32x4_t *v15;
  uint64_t v16;
  int32x4_t v17;
  int32x4_t *v18;
  int32x4_t v19;
  int32x4_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unsigned int *v26;
  unsigned int *v27;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _BYTE *v38;
  _QWORD *v39;
  char *v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  char *v48;
  uint64_t v49;
  __int128 v50;
  _QWORD v51[3];
  unsigned int v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *__p;
  void *v58;

  kdebug_trace();
  v8 = (_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
  sub_20F4178FC(a2, a3, a1, (void **)(a1 + 104), 0.0);
  if (*(_BYTE *)(a1 + 64))
  {
    v9 = *(int32x4_t **)(a1 + 128);
    v10 = (uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 4;
    v11 = *(int32x4_t **)(a1 + 136);
    v12 = ((char *)v11 - (char *)v9) >> 2;
    if (v10 <= v12)
    {
      if (v10 < v12)
      {
        v11 = (int32x4_t *)((char *)v9 + 4 * v10);
        *(_QWORD *)(a1 + 136) = v11;
      }
    }
    else
    {
      sub_20E93DC84(a1 + 128, v10 - v12);
      v9 = *(int32x4_t **)(a1 + 128);
      v11 = *(int32x4_t **)(a1 + 136);
    }
    if (v9 == v11)
    {
      v9 = v11;
      goto LABEL_23;
    }
    v13 = (char *)v11 - (char *)v9 - 4;
    if (v13 < 0x1C)
    {
      LODWORD(v14) = 0;
      v15 = v9;
      do
      {
LABEL_22:
        v15->i32[0] = v14;
        v15 = (int32x4_t *)((char *)v15 + 4);
        LODWORD(v14) = v14 + 1;
      }
      while (v15 != v11);
      goto LABEL_23;
    }
    v16 = (v13 >> 2) + 1;
    v14 = v16 & 0x7FFFFFFFFFFFFFF8;
    v15 = (int32x4_t *)((char *)v9 + 4 * (v16 & 0x7FFFFFFFFFFFFFF8));
    v17 = (int32x4_t)xmmword_210365350;
    v18 = v9 + 1;
    v19.i64[0] = 0x400000004;
    v19.i64[1] = 0x400000004;
    v20.i64[0] = 0x800000008;
    v20.i64[1] = 0x800000008;
    v21 = v16 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v18[-1] = v17;
      *v18 = vaddq_s32(v17, v19);
      v17 = vaddq_s32(v17, v20);
      v18 += 2;
      v21 -= 8;
    }
    while (v21);
    if (v16 != v14)
      goto LABEL_22;
  }
  else
  {
    sub_20F418F14(a2, a3, (uint64_t *)(a1 + 104), a1, (uint64_t)&v52);
    sub_20F41A684(&v52, (uint64_t)v51);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a1 + 128);
    sub_20F41AC64(a2, a3, (uint64_t)v51, (uint64_t *)(a1 + 104), (double *)a1, (_QWORD *)(a1 + 128));
    if (v51[0])
      MEMORY[0x212BC6368](v51[0], 0x1000C8000313F17);
    if (__p)
    {
      v58 = __p;
      operator delete(__p);
    }
    if (v55)
    {
      v56 = v55;
      operator delete(v55);
    }
    if (v53)
    {
      v54 = v53;
      operator delete(v53);
    }
    v9 = *(int32x4_t **)(a1 + 128);
    v11 = *(int32x4_t **)(a1 + 136);
  }
LABEL_23:
  v22 = *(char **)a4;
  *(_QWORD *)(a4 + 8) = *(_QWORD *)a4;
  v23 = (char *)v11 - (char *)v9;
  v24 = v23 >> 2;
  if (v23 >> 2 <= (unint64_t)((uint64_t)(*(_QWORD *)(a4 + 16) - (_QWORD)v22) >> 3))
    goto LABEL_27;
  if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFDLL)
LABEL_61:
    sub_20E867F44();
  v25 = (char *)operator new(2 * v23);
  *(_QWORD *)a4 = v25;
  *(_QWORD *)(a4 + 8) = v25;
  *(_QWORD *)(a4 + 16) = &v25[8 * v24];
  if (!v22)
  {
    v22 = v25;
    v27 = *(unsigned int **)(a1 + 128);
    v26 = *(unsigned int **)(a1 + 136);
    if (v27 == v26)
      return kdebug_trace();
LABEL_33:
    while (1)
    {
      v30 = (_QWORD *)(*v8 + 16 * *v27);
      v31 = *(_QWORD *)(a4 + 16);
      if ((unint64_t)v22 >= v31)
        break;
      *(_QWORD *)v22 = *v30;
      v29 = (uint64_t)(v22 + 8);
LABEL_32:
      *(_QWORD *)(a4 + 8) = v29;
      ++v27;
      v22 = (char *)v29;
      if (v27 == v26)
        return kdebug_trace();
    }
    v32 = *(char **)a4;
    v33 = (uint64_t)&v22[-*(_QWORD *)a4];
    v34 = v33 >> 3;
    v35 = (v33 >> 3) + 1;
    if (v35 >> 61)
      goto LABEL_61;
    v36 = v31 - (_QWORD)v32;
    if (v36 >> 2 > v35)
      v35 = v36 >> 2;
    if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
      v37 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v37 = v35;
    if (v37)
    {
      if (v37 >> 61)
        sub_20E877A38();
      v38 = operator new(8 * v37);
      v39 = &v38[8 * v34];
      *v39 = *v30;
      v29 = (uint64_t)(v39 + 1);
      v40 = (char *)(v22 - v32);
      if (v22 == v32)
        goto LABEL_49;
    }
    else
    {
      v38 = 0;
      v39 = (_QWORD *)(8 * v34);
      *(_QWORD *)(8 * v34) = *v30;
      v29 = 8 * v34 + 8;
      v40 = (char *)(v22 - v32);
      if (v22 == v32)
        goto LABEL_49;
    }
    v41 = (unint64_t)(v40 - 8);
    if (v41 >= 0x168)
    {
      v44 = (v22 - 8 - v32) & 0xFFFFFFFFFFFFFFF8;
      if (&v38[v33 - 8 - v44] > &v38[v33 - 8])
      {
        v42 = v22;
      }
      else if (&v22[-v44 - 8] > v22 - 8)
      {
        v42 = v22;
      }
      else if ((unint64_t)(v22 - &v38[v33]) >= 0x20)
      {
        v45 = (v41 >> 3) + 1;
        v46 = 8 * (v45 & 0x3FFFFFFFFFFFFFFCLL);
        v42 = &v22[-v46];
        v39 = (_QWORD *)((char *)v39 - v46);
        v47 = &v38[8 * v34 - 16];
        v48 = v22 - 16;
        v49 = v45 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v50 = *(_OWORD *)v48;
          *(v47 - 1) = *((_OWORD *)v48 - 1);
          *v47 = v50;
          v47 -= 2;
          v48 -= 32;
          v49 -= 4;
        }
        while (v49);
        if (v45 == (v45 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_48;
      }
      else
      {
        v42 = v22;
      }
    }
    else
    {
      v42 = v22;
    }
    do
    {
      v43 = *((_QWORD *)v42 - 1);
      v42 -= 8;
      *--v39 = v43;
    }
    while (v42 != v32);
LABEL_48:
    v22 = *(char **)a4;
LABEL_49:
    *(_QWORD *)a4 = v39;
    *(_QWORD *)(a4 + 8) = v29;
    *(_QWORD *)(a4 + 16) = &v38[8 * v37];
    if (v22)
      operator delete(v22);
    goto LABEL_32;
  }
  operator delete(v22);
  v22 = *(char **)(a4 + 8);
LABEL_27:
  v27 = *(unsigned int **)(a1 + 128);
  v26 = *(unsigned int **)(a1 + 136);
  if (v27 != v26)
    goto LABEL_33;
  return kdebug_trace();
}

void sub_20F417860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  if (a5)
  {
    MEMORY[0x212BC6368](a5, 0x1000C8000313F17);
    sub_20F4178AC((uint64_t *)va);
    _Unwind_Resume(a1);
  }
  sub_20F4178AC((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20F4178AC(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[1];
  if (v4)
  {
    a1[2] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_20F4178FC(uint64_t *a1, uint64_t *a2, uint64_t a3, void **a4, double a5)
{
  void **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  unint64_t v12;
  unint64_t v13;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  char *v23;
  uint64_t v24;
  float64x2_t *v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  float64x2_t v34;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v45;
  double v47;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v56;
  double v58;
  double v59;
  uint64_t v60;
  float64x2_t *v61;
  float64x2_t *v62;
  float v63;
  float64x2_t *v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float32x2_t v116;
  float32x2_t v117;
  float v118;
  float32x2_t v119;
  float32x2_t v120;
  float v121;
  float32x2_t v122;
  float32x2_t v123;
  float32x2_t v124;
  float v125;
  float32x2_t v126;
  float v127;
  float32x2_t v128;
  float32x2_t v129;
  float v130;
  float32x2_t v131;
  float32x2_t v132;
  float v133;
  float64x2_t *v134;
  double v135;
  double v136;
  uint64_t v137;
  unint64_t v138;
  char *v139;
  char *v140;
  unint64_t v141;
  double v142;
  long double v143;
  double v144;
  long double v145;
  double v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  char *v156;
  int v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  size_t v161;
  const char *v162;
  _BYTE *v163;
  _BYTE *v164;
  unsigned __int8 v165;
  unsigned __int8 v166;
  const char *v167;
  size_t v168;
  _BYTE *v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  void **v174;
  uint64_t v175;
  uint64_t v176;
  NSObject *v177;
  uint64_t v178;
  size_t v179;
  std::__shared_weak_count_vtbl *v180;
  std::__shared_weak_count *v181;
  std::__shared_weak_count *v182;
  unint64_t *p_shared_owners;
  unint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  uint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  void *v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  unint64_t v215;
  double *v216;
  unint64_t v217;
  double *v218;
  unint64_t v219;
  double *v220;
  double *v221;
  double v222;
  double v223;
  int v224;
  double v225;
  double v226;
  double *v227;
  unint64_t v228;
  unint64_t v229;
  double v230;
  unint64_t v231;
  double v232;
  double v233;
  double *v234;
  double v235;
  unint64_t v236;
  double v237;
  double v238;
  double *v239;
  unint64_t v240;
  double v241;
  double v242;
  double v243;
  double v244;
  double v245;
  _OWORD *v246;
  double *v247;
  double v248;
  double v249;
  __int128 v250;
  double *v251;
  double *v252;
  double *v253;
  __int128 v254;
  double v258;
  double v259;
  float64x2_t v260;
  double v261;
  _BYTE *v262;
  uint64_t v263;
  const char *__src;
  _QWORD v265[3];
  int v266;
  const char *v267;
  int v268;
  const char *v269;
  uint64_t v270;
  std::__shared_weak_count *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  _BYTE v275[24];
  __int128 v276;
  void *v277[2];
  unint64_t v278;
  char v279;
  uint64_t v280;

  v5 = a4;
  v6 = a3;
  v280 = *MEMORY[0x24BDAC8D0];
  a4[1] = *a4;
  v8 = *a1;
  v7 = a1[1];
  if (v7 == *a1)
    goto LABEL_146;
  v9 = a5;
  v12 = 0;
  v13 = 0;
  __asm { FMOV            V2.2D, #1.0 }
  v260 = (float64x2_t)vbicq_s8((int8x16_t)vdivq_f64(_Q2, *(float64x2_t *)(a3 + 72)), (int8x16_t)vclezq_f64(*(float64x2_t *)(a3 + 72)));
  v19 = *a2;
  v20 = a2[1];
  do
  {
    if (v20 != v19)
    {
      v21 = 0;
      v22 = 0;
      while (1)
      {
        v24 = *(_QWORD *)(*a1 + 24 * v12);
        v25 = *(float64x2_t **)(v19 + 24 * v21);
        v26 = *(double *)(v24 + 48);
        v27 = v25[3].f64[0];
        v28 = vabdd_f64(v26, v27);
        if (v27 < v26)
          v26 = v25[3].f64[0];
        v29 = v28 / v26;
        v30 = *(double *)(v6 + 8);
        if (v28 / v26 > v30)
          goto LABEL_9;
        v31 = v25[2].f64[1] - v9;
        if (v31 >= 3.14159265)
          v31 = v31 + -6.28318531;
        if (v31 < -3.14159265)
          v31 = v31 + 6.28318531;
        v32 = vabdd_f64(*(double *)(v24 + 40), v31);
        v33 = 6.28318531 - v32 >= v32 ? v32 : 6.28318531 - v32;
        if (v33 > *(double *)(v6 + 16))
          goto LABEL_9;
        v34 = *(float64x2_t *)(v24 + 16);
        _Q2 = vsubq_f64(v34, *(float64x2_t *)v24);
        _D4 = _Q2.f64[1];
        __asm { FMLA            D3, D4, V2.D[1] }
        v38 = vdivq_f64(_Q2, (float64x2_t)vdupq_lane_s64(COERCE__INT64(sqrt(_D3)), 0));
        v39 = *v25;
        v40 = v25[1];
        v41 = vsubq_f64(*(float64x2_t *)v24, *v25);
        _Q7 = (float64x2_t)vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL);
        v38.f64[1] = vnegq_f64(v38).f64[1];
        _D16 = vmulq_f64(v260, vmlaq_laneq_f64(vmulq_n_f64(v38, *(double *)&v41), _Q7, v41, 1)).f64[1];
        __asm { FMLA            D6, D16, V3.D[1] }
        v45 = vsubq_f64(v34, v40);
        _Q7.f64[0] = vmulq_f64(v260, vmlaq_laneq_f64(vmulq_n_f64(v38, *(double *)&v45), _Q7, v45, 1)).f64[1];
        __asm { FMLA            D3, D7, V2.D[1] }
        v47 = _D3 >= _D6 ? _D6 : _D3;
        _Q3 = vsubq_f64(v40, v39);
        _D7 = _Q3.f64[1];
        __asm { FMLA            D6, D7, V3.D[1] }
        _Q3 = vdivq_f64(_Q3, (float64x2_t)vdupq_lane_s64(COERCE__INT64(sqrt(_D6)), 0));
        v52 = vsubq_f64(v39, *(float64x2_t *)v24);
        v53 = (float64x2_t)vextq_s8((int8x16_t)_Q3, (int8x16_t)_Q3, 8uLL);
        _Q3.f64[1] = vnegq_f64(_Q3).f64[1];
        _D7 = vmulq_f64(v260, vmlaq_laneq_f64(vmulq_n_f64(_Q3, *(double *)&v52), v53, v52, 1)).f64[1];
        __asm { FMLA            D6, D7, V1.D[1] }
        v56 = vsubq_f64(v40, v34);
        _Q3.f64[0] = vmulq_f64(v260, vmlaq_laneq_f64(vmulq_n_f64(_Q3, *(double *)&v56), v53, v56, 1)).f64[1];
        __asm { FMLA            D1, D3, V0.D[1] }
        v58 = _D1 >= _D6 ? _D6 : _D1;
        v59 = v58 >= v47 ? v47 : v58;
        v261 = v59;
        if (v59 > 1.0)
          goto LABEL_9;
        v60 = *(_QWORD *)(*a1 + 24 * v12 + 8);
        v258 = *(double *)(v6 + 16);
        v259 = v33;
        if (v24 == v60 || (v61 = *(float64x2_t **)(v19 + 24 * v21 + 8), v25 == v61))
        {
          v63 = 3.4028e38;
        }
        else
        {
          v62 = (float64x2_t *)((char *)v25 + 184);
          v63 = 3.4028e38;
          do
          {
            v64 = v62;
            do
            {
              v65 = *(double *)(v24 + 56) - v64[-8].f64[0];
              v66 = *(double *)(v24 + 64) - v64[-8].f64[1];
              v67 = (float)(v65 * v65) + (float)(v66 * v66);
              v68 = *(double *)(v24 + 72) - v64[-7].f64[0];
              v69 = v67 + (float)(v68 * v68);
              v70 = *(double *)(v24 + 80) - v64[-7].f64[1];
              v71 = v69 + (float)(v70 * v70);
              v72 = *(double *)(v24 + 88) - v64[-6].f64[0];
              v73 = v71 + (float)(v72 * v72);
              v74 = *(double *)(v24 + 96) - v64[-6].f64[1];
              v75 = v73 + (float)(v74 * v74);
              v76 = *(double *)(v24 + 104) - v64[-5].f64[0];
              v77 = *(double *)(v24 + 112) - v64[-5].f64[1];
              v78 = (float)(v75 + (float)(v76 * v76)) + (float)(v77 * v77);
              v79 = *(double *)(v24 + 120) - v64[-4].f64[0];
              v80 = v78 + (float)(v79 * v79);
              v81 = *(double *)(v24 + 128) - v64[-4].f64[1];
              v82 = v80 + (float)(v81 * v81);
              v83 = *(double *)(v24 + 136) - v64[-3].f64[0];
              v84 = v82 + (float)(v83 * v83);
              v85 = *(double *)(v24 + 144) - v64[-3].f64[1];
              v86 = v84 + (float)(v85 * v85);
              v87 = *(double *)(v24 + 152) - v64[-2].f64[0];
              v88 = *(double *)(v24 + 160) - v64[-2].f64[1];
              v89 = (float)(v86 + (float)(v87 * v87)) + (float)(v88 * v88);
              v90 = *(double *)(v24 + 168) - v64[-1].f64[0];
              v91 = v89 + (float)(v90 * v90);
              v92 = *(double *)(v24 + 176) - v64[-1].f64[1];
              v93 = v91 + (float)(v92 * v92);
              v94 = *(double *)(v24 + 184) - v64->f64[0];
              v95 = v93 + (float)(v94 * v94);
              v96 = *(double *)(v24 + 192) - v64->f64[1];
              v97 = v95 + (float)(v96 * v96);
              v98 = *(double *)(v24 + 200) - v64[1].f64[0];
              v99 = *(double *)(v24 + 208) - v64[1].f64[1];
              v100 = (float)(v97 + (float)(v98 * v98)) + (float)(v99 * v99);
              v101 = *(double *)(v24 + 216) - v64[2].f64[0];
              v102 = v100 + (float)(v101 * v101);
              v103 = *(double *)(v24 + 224) - v64[2].f64[1];
              v104 = v102 + (float)(v103 * v103);
              v105 = *(double *)(v24 + 232) - v64[3].f64[0];
              v106 = v104 + (float)(v105 * v105);
              v107 = *(double *)(v24 + 240) - v64[3].f64[1];
              v108 = v106 + (float)(v107 * v107);
              v109 = *(double *)(v24 + 248) - v64[4].f64[0];
              v110 = *(double *)(v24 + 256) - v64[4].f64[1];
              v111 = (float)(v108 + (float)(v109 * v109)) + (float)(v110 * v110);
              v112 = *(double *)(v24 + 264) - v64[5].f64[0];
              v113 = v111 + (float)(v112 * v112);
              v114 = *(double *)(v24 + 272) - v64[5].f64[1];
              v115 = v113 + (float)(v114 * v114);
              v116 = vcvt_f32_f64(vsubq_f64(*(float64x2_t *)(v24 + 280), v64[6]));
              v117 = vmul_f32(v116, v116);
              v118 = (float)(v115 + v117.f32[0]) + v117.f32[1];
              v119 = vcvt_f32_f64(vsubq_f64(*(float64x2_t *)(v24 + 296), v64[7]));
              v120 = vmul_f32(v119, v119);
              v121 = (float)(v118 + v120.f32[0]) + v120.f32[1];
              v122 = vcvt_f32_f64(vsubq_f64(*(float64x2_t *)(v24 + 312), v64[8]));
              v123 = vmul_f32(v122, v122);
              v124 = vcvt_f32_f64(vsubq_f64(*(float64x2_t *)(v24 + 328), v64[9]));
              v125 = (float)(v121 + v123.f32[0]) + v123.f32[1];
              v126 = vmul_f32(v124, v124);
              v127 = (float)(v125 + v126.f32[0]) + v126.f32[1];
              v128 = vcvt_f32_f64(vsubq_f64(*(float64x2_t *)(v24 + 344), v64[10]));
              v129 = vmul_f32(v128, v128);
              v130 = (float)(v127 + v129.f32[0]) + v129.f32[1];
              v131 = vcvt_f32_f64(vsubq_f64(*(float64x2_t *)(v24 + 360), v64[11]));
              v132 = vmul_f32(v131, v131);
              v133 = (float)(v130 + v132.f32[0]) + v132.f32[1];
              if (v133 < v63)
                v63 = v133;
              v134 = v64 + 12;
              v64 = (float64x2_t *)((char *)v64 + 376);
            }
            while (v134 != v61);
            v24 += 376;
          }
          while (v24 != v60);
        }
        v135 = sqrtf(v63);
        v136 = *(double *)v6;
        v9 = a5;
        if (*(double *)v6 < v135)
          goto LABEL_9;
        v137 = v6;
        v138 = v13;
        v140 = (char *)*v5;
        v139 = (char *)v5[1];
        v141 = (v139 - (_BYTE *)*v5) >> 4;
        if (v141 >= *(unsigned int *)(v137 + 88))
        {
          sub_20F418E20(&v272);
          v6 = a3;
          if (**(int **)(v272 + 56) > 4)
            goto LABEL_146;
          v157 = *(unsigned __int8 *)(v272 + 72);
          v158 = sub_20E8C31DC(v272, "OSLogSurrogateAppender", 1, 0);
          v159 = v158;
          if (!v157 && !v158)
            goto LABEL_146;
          v265[0] = &v272;
          v265[1] = std::chrono::steady_clock::now().__d_.__rep_;
          v265[2] = std::chrono::system_clock::now().__d_.__rep_;
          v266 = 4;
          v267 = "unknown file";
          v268 = 106;
          v270 = 0;
          v271 = 0;
          v269 = "unknown function";
          v160 = v272;
          if (*(char *)(v272 + 39) < 0)
          {
            v162 = *(const char **)(v272 + 16);
            v161 = *(_QWORD *)(v272 + 24);
            v263 = *(_QWORD *)v265[0] + 16;
            v163 = *v5;
            v164 = v5[1];
            v166 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v166 & 1) == 0)
            {
LABEL_238:
              if (__cxa_guard_acquire(&qword_254A4A510))
              {
                sub_20E9E46F8((uint64_t)v275);
                sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v275);
                if ((_BYTE)v276 && (v275[23] & 0x80000000) != 0)
                  operator delete(*(void **)v275);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                __cxa_guard_release(&qword_254A4A510);
                v6 = a3;
              }
            }
          }
          else
          {
            v161 = *(unsigned __int8 *)(v272 + 39);
            v162 = (const char *)(*(_QWORD *)v265[0] + 16);
            v263 = (uint64_t)v162;
            v163 = *v5;
            v164 = v5[1];
            v165 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v165 & 1) == 0)
              goto LABEL_238;
          }
          if (byte_254A4A4F8[23] >= 0)
            v167 = byte_254A4A4F8;
          else
            v167 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v168 = byte_254A4A4F8[23];
          else
            v168 = *(_QWORD *)&byte_254A4A4F8[8];
          __src = v162;
          *(_QWORD *)v275 = os_log_create(v167, v162);
          v169 = &v275[8];
          if (v168 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v168 >= 0x17)
          {
            v262 = v163;
            v170 = v160;
            v171 = v157;
            v172 = (v168 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v168 | 7) != 0x17)
              v172 = v168 | 7;
            v173 = v172 + 1;
            v169 = operator new(v172 + 1);
            *(_QWORD *)&v275[16] = v168;
            *(_QWORD *)&v276 = v173 | 0x8000000000000000;
            *(_QWORD *)&v275[8] = v169;
            v157 = v171;
            v160 = v170;
            v163 = v262;
          }
          else
          {
            BYTE7(v276) = v168;
            if (!v168)
            {
LABEL_79:
              v169[v168] = 0;
              BYTE8(v276) = 1;
              v174 = v277;
              if (v161 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v161 >= 0x17)
              {
                v175 = (v161 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v161 | 7) != 0x17)
                  v175 = v161 | 7;
                v176 = v175 + 1;
                v174 = (void **)operator new(v175 + 1);
                v277[1] = (void *)v161;
                v278 = v176 | 0x8000000000000000;
                v277[0] = v174;
              }
              else
              {
                HIBYTE(v278) = v161;
                if (!v161)
                {
LABEL_87:
                  *((_BYTE *)v174 + v161) = 0;
                  v279 = 1;
                  v177 = *(NSObject **)v275;
                  if (SHIBYTE(v278) < 0)
                    operator delete(v277[0]);
                  v5 = a4;
                  if (BYTE8(v276) && SBYTE7(v276) < 0)
                    operator delete(*(void **)&v275[8]);
                  if (*(_QWORD *)v275)
                    os_release(*(void **)v275);
                  v178 = (v164 - v163) >> 4;
                  if (v159 && *(_QWORD *)(v159 + 24))
                  {
                    v179 = _os_log_pack_size();
                    v180 = (std::__shared_weak_count_vtbl *)operator new(v179, (std::align_val_t)8uLL);
                    v181 = (std::__shared_weak_count *)operator new();
                    v182 = v181;
                    v181->__shared_owners_ = 0;
                    p_shared_owners = (unint64_t *)&v181->__shared_owners_;
                    v181->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                    v181->__shared_weak_owners_ = 0;
                    v181[1].__vftable = v180;
                    *(_QWORD *)v275 = v180;
                    *(_QWORD *)&v275[8] = v180;
                    *(_QWORD *)&v275[16] = v181;
                    do
                      v184 = __ldxr(p_shared_owners);
                    while (__stxr(v184 + 1, p_shared_owners));
                    v276 = 0uLL;
                    v277[0] = 0;
                    do
                      v185 = __ldaxr(p_shared_owners);
                    while (__stlxr(v185 - 1, p_shared_owners));
                    if (!v185)
                    {
                      ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
                      std::__shared_weak_count::__release_weak(v182);
                    }
                    v186 = *(_QWORD *)v275;
                    v187 = _os_log_pack_fill();
                    *(_DWORD *)v187 = 134217984;
                    *(_QWORD *)(v187 + 4) = v178;
                    v188 = operator new();
                    v189 = *(unsigned __int8 *)(v160 + 39);
                    v190 = v263;
                    if ((v189 & 0x80u) != 0)
                    {
                      v190 = *(_QWORD *)(v160 + 16);
                      v189 = *(_QWORD *)(v160 + 24);
                    }
                    *(_QWORD *)v188 = v186;
                    *(_OWORD *)(v188 + 8) = *(_OWORD *)&v275[8];
                    *(_QWORD *)&v275[8] = 0;
                    *(_QWORD *)&v275[16] = 0;
                    *(_OWORD *)(v188 + 24) = v276;
                    v276 = 0uLL;
                    *(_QWORD *)(v188 + 40) = v190;
                    *(_QWORD *)(v188 + 48) = v189;
                    *(_BYTE *)(v188 + 56) = 16;
                    v273 = 0;
                    v274 = v188;
                    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v159 + 24) + 40))(*(_QWORD *)(v159 + 24), &v274);
                    v191 = v274;
                    v274 = 0;
                    v5 = a4;
                    if (v191)
                    {
                      v192 = *(std::__shared_weak_count **)(v191 + 32);
                      if (v192)
                      {
                        v193 = (unint64_t *)&v192->__shared_owners_;
                        do
                          v194 = __ldaxr(v193);
                        while (__stlxr(v194 - 1, v193));
                        if (!v194)
                        {
                          ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
                          std::__shared_weak_count::__release_weak(v192);
                        }
                      }
                      v195 = *(std::__shared_weak_count **)(v191 + 16);
                      if (v195)
                      {
                        v196 = (unint64_t *)&v195->__shared_owners_;
                        do
                          v197 = __ldaxr(v196);
                        while (__stlxr(v197 - 1, v196));
                        if (!v197)
                        {
                          ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
                          std::__shared_weak_count::__release_weak(v195);
                        }
                      }
                      MEMORY[0x212BC6398](v191, 0x10F0C40B62ED6C6);
                      v198 = v273;
                      v273 = 0;
                      if (v198)
                      {
                        v199 = *(std::__shared_weak_count **)(v198 + 32);
                        if (v199)
                        {
                          v200 = (unint64_t *)&v199->__shared_owners_;
                          do
                            v201 = __ldaxr(v200);
                          while (__stlxr(v201 - 1, v200));
                          if (!v201)
                          {
                            ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
                            std::__shared_weak_count::__release_weak(v199);
                          }
                        }
                        v202 = *(std::__shared_weak_count **)(v198 + 16);
                        if (v202)
                        {
                          v203 = (unint64_t *)&v202->__shared_owners_;
                          do
                            v204 = __ldaxr(v203);
                          while (__stlxr(v204 - 1, v203));
                          if (!v204)
                          {
                            ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
                            std::__shared_weak_count::__release_weak(v202);
                          }
                        }
                        MEMORY[0x212BC6398](v198, 0x10F0C40B62ED6C6);
                      }
                    }
                    v205 = (std::__shared_weak_count *)*((_QWORD *)&v276 + 1);
                    if (*((_QWORD *)&v276 + 1))
                    {
                      v206 = (unint64_t *)(*((_QWORD *)&v276 + 1) + 8);
                      do
                        v207 = __ldaxr(v206);
                      while (__stlxr(v207 - 1, v206));
                      if (!v207)
                      {
                        ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
                        std::__shared_weak_count::__release_weak(v205);
                      }
                    }
                    v208 = *(std::__shared_weak_count **)&v275[16];
                    if (*(_QWORD *)&v275[16])
                    {
                      v209 = (unint64_t *)(*(_QWORD *)&v275[16] + 8);
                      do
                        v210 = __ldaxr(v209);
                      while (__stlxr(v210 - 1, v209));
                      if (!v210)
                      {
                        ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
                        std::__shared_weak_count::__release_weak(v208);
                      }
                    }
                  }
                  else
                  {
                    os_log_type_enabled(v177, OS_LOG_TYPE_ERROR);
                    *(_DWORD *)v275 = 134217984;
                    *(_QWORD *)&v275[4] = (v164 - v163) >> 4;
                    v211 = (void *)_os_log_send_and_compose_impl();
                    if (v211)
                      free(v211);
                  }
                  if (v157)
                  {
                    sub_20E8C003C((uint64_t)v265, "[GetCandidateMatches] Maximum number of line segments reached (%ld).  Ending candidate matching prematureely...", ((_BYTE *)v5[1] - (_BYTE *)*v5) >> 4);
                    sub_20E863570((uint64_t)v265);
                  }
                  sub_20E863570((uint64_t)v265);
                  v212 = v271;
                  if (v271)
                  {
                    v213 = (unint64_t *)&v271->__shared_owners_;
                    do
                      v214 = __ldaxr(v213);
                    while (__stlxr(v214 - 1, v213));
                    if (!v214)
                    {
                      ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
                      std::__shared_weak_count::__release_weak(v212);
                    }
                  }
                  goto LABEL_146;
                }
              }
              memmove(v174, __src, v161);
              goto LABEL_87;
            }
          }
          memmove(v169, v167, v168);
          goto LABEL_79;
        }
        v142 = exp(-(v29 / v30 * 2.5 * (v29 / v30 * 2.5)) * 0.5);
        v143 = v142 * exp(-(v259 / v258 * 2.5 * (v259 / v258 * 2.5)) * 0.5);
        v144 = sqrt(v261);
        v145 = v143 * exp(-(v144 * 2.5 * (v144 * 2.5)) * 0.5);
        v146 = v145 * exp(-(v135 / v136 * 2.5 * (v135 / v136 * 2.5)) * 0.5);
        v147 = (unint64_t)v5[2];
        if ((unint64_t)v139 < v147)
        {
          v13 = v138;
          *(_DWORD *)v139 = v138;
          *((_DWORD *)v139 + 1) = v22;
          v23 = v139 + 16;
          *((double *)v139 + 1) = v146;
          v6 = a3;
        }
        else
        {
          v148 = v147 - (_QWORD)v140;
          if (v148 >> 3 <= v141 + 1)
            v149 = v141 + 1;
          else
            v149 = v148 >> 3;
          _CF = (unint64_t)v148 >= 0x7FFFFFFFFFFFFFF0;
          v150 = 0xFFFFFFFFFFFFFFFLL;
          if (!_CF)
            v150 = v149;
          if (v150 >> 60)
            sub_20E877A38();
          v151 = 16 * v150;
          v152 = (char *)operator new(16 * v150);
          v153 = &v152[16 * v141];
          v13 = v138;
          *(_DWORD *)v153 = v138;
          *((_DWORD *)v153 + 1) = v22;
          *((double *)v153 + 1) = v146;
          v154 = v153;
          if (v139 != v140)
          {
            v6 = a3;
            do
            {
              *((_OWORD *)v154 - 1) = *((_OWORD *)v139 - 1);
              v154 -= 16;
              v139 -= 16;
            }
            while (v139 != v140);
            v139 = v140;
            v155 = &v152[v151];
            v23 = v153 + 16;
            *a4 = v154;
            a4[1] = v153 + 16;
            a4[2] = v155;
            if (!v140)
              goto LABEL_8;
LABEL_56:
            operator delete(v139);
            goto LABEL_8;
          }
          v156 = &v152[v151];
          v23 = v153 + 16;
          v6 = a3;
          *a4 = v153;
          a4[1] = v153 + 16;
          a4[2] = v156;
          if (v139)
            goto LABEL_56;
        }
LABEL_8:
        v9 = a5;
        a4[1] = v23;
        v5 = a4;
LABEL_9:
        v19 = *a2;
        v20 = a2[1];
        v21 = ++v22;
        if (0xAAAAAAAAAAAAAAABLL * ((v20 - *a2) >> 3) <= v22)
        {
          v8 = *a1;
          v7 = a1[1];
          goto LABEL_4;
        }
      }
    }
    v20 = v19;
LABEL_4:
    v12 = (v13 + 1);
    v13 = v12;
  }
  while (0xAAAAAAAAAAAAAAABLL * ((v7 - v8) >> 3) > v12);
LABEL_146:
  v215 = (unint64_t)*v5;
  v216 = (double *)v5[1];
  v217 = *(unsigned int *)(v6 + 92);
  if (v217 <= ((char *)v216 - (_BYTE *)*v5) >> 4)
  {
    v218 = (double *)(v215 + 16 * v217);
    while (v216 != v218)
    {
      v219 = (uint64_t)((uint64_t)v216 - v215) >> 4;
      if (v219 < 2)
        break;
      if (v219 == 3)
      {
        v246 = (_OWORD *)(v215 + 16);
        v247 = v216 - 2;
        v248 = *(double *)(v215 + 24);
        v249 = *(v216 - 1);
        if (v248 <= *(double *)(v215 + 8))
        {
          if (v249 > v248)
          {
            *(_OWORD *)v275 = *v246;
            v254 = *(_OWORD *)v275;
            *v246 = *(_OWORD *)v247;
            *(_OWORD *)v247 = v254;
            if (*(double *)(v215 + 24) > *(double *)(v215 + 8))
            {
              *(_OWORD *)v275 = *(_OWORD *)v215;
              *(_OWORD *)v215 = *v246;
              *v246 = *(_OWORD *)v275;
            }
          }
        }
        else
        {
          if (v249 <= v248)
          {
            *(_OWORD *)v275 = *(_OWORD *)v215;
            *(_OWORD *)v215 = *v246;
            *v246 = *(_OWORD *)v275;
            if (*(v216 - 1) <= *(double *)(v215 + 24))
              break;
            v250 = *v246;
            *(_OWORD *)v275 = *v246;
            *v246 = *(_OWORD *)v247;
          }
          else
          {
            *(_OWORD *)v275 = *(_OWORD *)v215;
            *(_OWORD *)v215 = *(_OWORD *)v247;
            v250 = *(_OWORD *)v275;
          }
          *(_OWORD *)v247 = v250;
        }
        break;
      }
      if (v219 == 2)
      {
        if (*(v216 - 1) > *(double *)(v215 + 8))
        {
          *(_OWORD *)v275 = *(_OWORD *)v215;
          *(_OWORD *)v215 = *((_OWORD *)v216 - 1);
          *((_OWORD *)v216 - 1) = *(_OWORD *)v275;
        }
        break;
      }
      if ((uint64_t)((uint64_t)v216 - v215) <= 127)
      {
        while ((double *)v215 != v216 - 2)
        {
          v251 = (double *)v215;
          v215 += 16;
          if (v251 != v216 && (double *)v215 != v216)
          {
            v252 = (double *)v215;
            v253 = v251;
            do
            {
              if (v252[1] > v253[1])
                v253 = v252;
              v252 += 2;
            }
            while (v252 != v216);
            if (v253 != v251)
            {
              *(_OWORD *)v275 = *(_OWORD *)v251;
              *(_OWORD *)v251 = *(_OWORD *)v253;
              *(_OWORD *)v253 = *(_OWORD *)v275;
            }
          }
        }
        break;
      }
      v220 = (double *)(v215 + 16 * (v219 >> 1));
      v221 = v216 - 2;
      v222 = v220[1];
      v223 = *(v216 - 1);
      if (v222 <= *(double *)(v215 + 8))
      {
        if (v223 <= v222)
        {
          v224 = 0;
          v225 = *(double *)(v215 + 8);
          v226 = v220[1];
          if (v225 <= v226)
            goto LABEL_173;
          goto LABEL_155;
        }
        *(_OWORD *)v275 = *(_OWORD *)v220;
        *(_OWORD *)v220 = *(_OWORD *)v221;
        *(_OWORD *)v221 = *(_OWORD *)v275;
        if (v220[1] > *(double *)(v215 + 8))
        {
          *(_OWORD *)v275 = *(_OWORD *)v215;
          *(_OWORD *)v215 = *(_OWORD *)v220;
          *(_OWORD *)v220 = *(_OWORD *)v275;
          v224 = 2;
          v225 = *(double *)(v215 + 8);
          v226 = v220[1];
          if (v225 <= v226)
            goto LABEL_173;
          goto LABEL_155;
        }
      }
      else
      {
        if (v223 > v222)
        {
          *(_OWORD *)v275 = *(_OWORD *)v215;
          *(_OWORD *)v215 = *(_OWORD *)v221;
          *(_OWORD *)v221 = *(_OWORD *)v275;
          v224 = 1;
          v225 = *(double *)(v215 + 8);
          v226 = v220[1];
          if (v225 <= v226)
            goto LABEL_173;
          goto LABEL_155;
        }
        *(_OWORD *)v275 = *(_OWORD *)v215;
        *(_OWORD *)v215 = *(_OWORD *)v220;
        *(_OWORD *)v220 = *(_OWORD *)v275;
        if (*(v216 - 1) > v220[1])
        {
          *(_OWORD *)v275 = *(_OWORD *)v220;
          *(_OWORD *)v220 = *(_OWORD *)v221;
          *(_OWORD *)v221 = *(_OWORD *)v275;
          v224 = 2;
          v225 = *(double *)(v215 + 8);
          v226 = v220[1];
          if (v225 <= v226)
            goto LABEL_173;
          goto LABEL_155;
        }
      }
      v224 = 1;
      v225 = *(double *)(v215 + 8);
      v226 = v220[1];
      if (v225 <= v226)
      {
LABEL_173:
        v234 = v216 - 2;
        while (1)
        {
          v227 = v234 - 2;
          if (v234 - 2 == (double *)v215)
            break;
          v235 = *(v234 - 1);
          v234 -= 2;
          if (v235 > v226)
          {
            *(_OWORD *)v275 = *(_OWORD *)v215;
            *(_OWORD *)v215 = *(_OWORD *)v227;
            *(_OWORD *)v227 = *(_OWORD *)v275;
            ++v224;
            v228 = v215 + 16;
            if (v215 + 16 < (unint64_t)v227)
              goto LABEL_156;
            goto LABEL_177;
          }
        }
        v239 = (double *)(v215 + 16);
        if (v225 <= *(v216 - 1))
        {
          if (v239 == v221)
            break;
          while (v225 <= v239[1])
          {
            v239 += 2;
            if (v239 == v221)
              goto LABEL_234;
          }
          *(_OWORD *)v275 = *(_OWORD *)v239;
          *(_OWORD *)v239 = *(_OWORD *)v221;
          v239 += 2;
          *(_OWORD *)v221 = *(_OWORD *)v275;
        }
        if (v239 == v221)
          break;
        while (1)
        {
          v243 = *(double *)(v215 + 8);
          v236 = (unint64_t)(v239 - 2);
          do
          {
            v244 = *(double *)(v236 + 24);
            v236 += 16;
          }
          while (v243 <= v244);
          v239 = (double *)(v236 + 16);
          do
          {
            v245 = *(v221 - 1);
            v221 -= 2;
          }
          while (v243 > v245);
          if (v236 >= (unint64_t)v221)
            break;
          *(_OWORD *)v275 = *(_OWORD *)v236;
          *(_OWORD *)v236 = *(_OWORD *)v221;
          *(_OWORD *)v221 = *(_OWORD *)v275;
        }
        if (v236 > (unint64_t)v218)
          break;
        goto LABEL_210;
      }
LABEL_155:
      v227 = v216 - 2;
      v228 = v215 + 16;
      if (v215 + 16 >= (unint64_t)(v216 - 2))
      {
LABEL_177:
        v231 = v228;
      }
      else
      {
LABEL_156:
        v229 = v228;
        while (1)
        {
          v230 = v220[1];
          v231 = v229 - 16;
          do
          {
            v232 = *(double *)(v231 + 24);
            v231 += 16;
          }
          while (v232 > v230);
          v229 = v231 + 16;
          do
          {
            v233 = *(v227 - 1);
            v227 -= 2;
          }
          while (v233 <= v230);
          if (v231 >= (unint64_t)v227)
            break;
          *(_OWORD *)v275 = *(_OWORD *)v231;
          *(_OWORD *)v231 = *(_OWORD *)v227;
          *(_OWORD *)v227 = *(_OWORD *)v275;
          ++v224;
          if ((double *)v231 == v220)
            v220 = v227;
        }
      }
      if ((double *)v231 != v220 && v220[1] > *(double *)(v231 + 8))
      {
        *(_OWORD *)v275 = *(_OWORD *)v231;
        *(_OWORD *)v231 = *(_OWORD *)v220;
        *(_OWORD *)v220 = *(_OWORD *)v275;
        ++v224;
      }
      if ((double *)v231 == v218)
        break;
      if (!v224)
      {
        if (v231 <= (unint64_t)v218)
        {
          v240 = v231 + 16;
          while ((double *)v240 != v216)
          {
            v241 = *(double *)(v240 + 8);
            v242 = *(double *)(v240 - 8);
            v240 += 16;
            if (v241 > v242)
              goto LABEL_183;
          }
        }
        else
        {
          while (v228 != v231)
          {
            v237 = *(double *)(v228 + 8);
            v238 = *(double *)(v228 - 8);
            v228 += 16;
            if (v237 > v238)
              goto LABEL_183;
          }
        }
        break;
      }
LABEL_183:
      if (v231 <= (unint64_t)v218)
      {
        v236 = v231 + 16;
      }
      else
      {
        v216 = (double *)v231;
        v236 = v215;
      }
LABEL_210:
      v215 = v236;
    }
LABEL_234:
    if (v218 != v5[1])
      v5[1] = v218;
  }
}

void sub_20F418CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  if (*(_BYTE *)(v33 - 216))
  {
    if (*(char *)(v33 - 217) < 0)
      operator delete(*(void **)(v33 - 240));
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_20F418D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  sub_20E86E8C4((uint64_t *)(v33 - 248));
  sub_20E86E8C4((uint64_t *)(v33 - 256));
  sub_20E86E658(v33 - 240);
  sub_20E863714((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_20F418D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  sub_20E86E658(v33 - 240);
  sub_20E863714((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_20F418D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  MEMORY[0x212BC6398](v33, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_20F418D94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_20E863714((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_20F418DA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20F418E20(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A68968);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A68968))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.feature_matching");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A68960);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A68968);
  }
  *a1 = qword_254A68960;
}

void sub_20F418EBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A68968);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A68968);
  _Unwind_Resume(a1);
}

void sub_20F418F14(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  double *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  size_t v16;
  size_t v17;
  float64x2_t v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  double *v24;
  double *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  int v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  float64x2_t *v37;
  float64x2_t *v38;
  int v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  float64x2_t *v47;
  float64x2_t *v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double *v58;
  double v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  int8x16_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  int8x16_t v70;
  float64x2_t v71;
  uint64_t v72;
  double *v73;
  double v74;
  float64x2_t v75;
  float64x2_t v76;
  uint64_t v86;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  int8x16_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  int8x16_t v103;
  float64x2_t v104;
  uint64_t v105;
  double *v106;
  double v107;
  float64x2_t v108;
  float64x2_t v109;
  uint64_t v116;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  double *v134;
  double v135;
  long double v136;
  long double v137;
  double v138;
  double *v139;
  char *v140;
  uint64_t v141;
  unint64_t v142;
  double *v143;
  unint64_t v144;
  unint64_t v145;
  char *v146;
  int64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  double *v151;
  float64x2_t *v152;
  float64x2_t *v153;
  uint64_t v154;
  float64x2_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  char *v159;
  int64_t v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  double *v165;
  char *v166;
  int64_t v167;
  unint64_t v168;
  char *v169;
  int v170;
  double *v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  float64x2_t *v177;
  float64x2_t *v178;
  uint64_t v179;
  float64x2_t v180;
  double *v181;
  int v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  const char *v186;
  size_t v187;
  unint64_t v188;
  unsigned __int8 v189;
  const char *v190;
  size_t v191;
  const char *v192;
  __int128 *v193;
  uint64_t v194;
  uint64_t v195;
  void **v196;
  uint64_t v197;
  uint64_t v198;
  NSObject *v199;
  size_t v200;
  NSObject *v201;
  std::__shared_weak_count *v202;
  std::__shared_weak_count *v203;
  unint64_t *p_shared_owners;
  unint64_t v205;
  unint64_t v206;
  os_log_t v207;
  _DWORD *v208;
  int v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  uint64_t v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  int v233;
  void *v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  unint64_t v238;
  char *v239;
  char *v240;
  char *v242;
  unint64_t v243;
  unsigned int v244;
  char *__p;
  unint64_t v248;
  double *v249;
  _QWORD *v251;
  int v252;
  int v253;
  int v254;
  int v255;
  float64x2_t *v256;
  char *v257;
  _DWORD *v258;
  char *v259;
  double *v260;
  unsigned int v261;
  uint64_t v262;
  double *v263;
  double *v264;
  double *v265;
  void *v266;
  void *v267;
  _QWORD v268[3];
  int v269;
  const char *v270;
  int v271;
  const char *v272;
  uint64_t v273;
  std::__shared_weak_count *v274;
  uint64_t v275;
  char *v276;
  char *v277;
  char *v278;
  char *v279;
  _DWORD *v280;
  char *v281;
  void *v282;
  double *v283;
  double *v284;
  uint64_t v285;
  uint64_t v286;
  os_log_t v287;
  __int128 v288;
  __int128 v289;
  void *v290[2];
  unint64_t v291;
  char v292;
  uint64_t v293;

  v293 = *MEMORY[0x24BDAC8D0];
  v282 = 0;
  v283 = 0;
  v284 = 0;
  v6 = *a3;
  v5 = a3[1];
  v7 = (v5 - *a3) >> 4;
  v8 = v7 + 1;
  v9 = (v7 + 1) * v7;
  v251 = a1;
  if (v9 > 1)
  {
    if (v9 >> 62)
      sub_20E867F44();
    v15 = v9 >> 1;
    v282 = operator new(8 * (v9 >> 1));
    v283 = (double *)v282;
    v10 = (double *)v282;
    v249 = (double *)((char *)v282 + 8 * v15);
    v284 = v249;
    v11 = (char *)operator new(4 * v15);
    v279 = v11;
    v280 = v11;
    v257 = &v11[4 * v15];
    v281 = v257;
    a1 = v251;
    v276 = 0;
    v277 = 0;
    v278 = 0;
    if (v8)
      goto LABEL_3;
  }
  else
  {
    v249 = 0;
    v10 = 0;
    v257 = 0;
    v11 = 0;
    v279 = 0;
    v280 = 0;
    v281 = 0;
    v276 = 0;
    v277 = 0;
    v278 = 0;
    if (v8)
    {
LABEL_3:
      if (v8 >> 61)
        sub_20F41B384();
      v12 = (char *)operator new(8 * v8);
      v13 = &v12[8 * v8];
      v276 = v12;
      v278 = v13;
      bzero(v12, 8 * v8);
      v14 = v13;
      v277 = v13;
      a1 = v251;
      goto LABEL_8;
    }
  }
  v13 = 0;
  v14 = 0;
  v12 = 0;
LABEL_8:
  v253 = -1431655765 * ((a1[1] - *a1) >> 3);
  v16 = (v253 * v253);
  v263 = (double *)operator new((8 * v16 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
  v265 = (double *)operator new((8 * v16 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
  v267 = operator new((v16 + 31) & 0x1FFFFFFE0, (std::align_val_t)0x20uLL);
  if ((_DWORD)v16)
    bzero(v267, v16);
  v252 = -1431655765 * ((a2[1] - *a2) >> 3);
  v17 = (v252 * v252);
  v260 = (double *)operator new((8 * v17 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
  v264 = (double *)operator new((8 * v17 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
  v266 = operator new((v17 + 31) & 0x1FFFFFFE0, (std::align_val_t)0x20uLL);
  if ((_DWORD)v17)
    bzero(v266, v17);
  if (v5 == v6)
  {
    v6 = v5;
    v23 = (uint64_t)v11;
    v24 = v10;
    v26 = (uint64_t)v10;
    v181 = v249;
    goto LABEL_202;
  }
  v239 = v14;
  v240 = v13;
  v21 = 0;
  v261 = 0;
  v22 = 0;
  v258 = v11;
  v23 = (uint64_t)v11;
  v24 = v10;
  v25 = v10;
  v26 = (uint64_t)v10;
  __p = v11;
  v27 = a4;
  v29 = a2;
  v28 = v251;
  v30 = v252;
  v31 = v253;
  v242 = v12;
  while (1)
  {
    v33 = v21;
    *(_QWORD *)&v12[8 * v21] = (v26 - (uint64_t)v25) >> 3;
    v21 = ++v22;
    v32 = (v5 - v6) >> 4;
    if (v32 > v22)
      break;
LABEL_15:
    if (v32 <= v21)
    {
      v11 = __p;
      v14 = v239;
      v13 = v240;
      v181 = v249;
      goto LABEL_202;
    }
  }
  v248 = v33;
  v34 = (unsigned int *)(v6 + 16 * v33);
  v35 = *v34;
  v36 = v34[1];
  v37 = *(float64x2_t **)(*v28 + 24 * *v34);
  v38 = *(float64x2_t **)(*v29 + 24 * v36);
  v39 = *v34 * v31;
  v40 = v36 * v30;
  v243 = v22;
  v41 = v22;
  v244 = v22;
  v42 = v22;
  v256 = *(float64x2_t **)(*v28 + 24 * v35);
  v254 = v36 * v30;
  v255 = v35 * v31;
  while (1)
  {
    v43 = (unsigned int *)(v6 + 16 * v41);
    v44 = *v43;
    v45 = v43[1];
    _ZF = *v43 == v35 || v45 == v36;
    if (_ZF)
      goto LABEL_20;
    v47 = *(float64x2_t **)(*v28 + 24 * v44);
    v48 = *(float64x2_t **)(*v29 + 24 * v45);
    v49 = v47[2].f64[1] - v37[2].f64[1];
    if (v49 >= 3.14159265)
      v49 = v49 + -6.28318531;
    if (v49 < -3.14159265)
      v49 = v49 + 6.28318531;
    v50 = v48[2].f64[1] - v38[2].f64[1];
    if (v50 >= 3.14159265)
      v50 = v50 + -6.28318531;
    if (v50 < -3.14159265)
      v50 = v50 + 6.28318531;
    v51 = vabdd_f64(v49, v50);
    v52 = 6.28318531 - v51 >= v51 ? v51 : 6.28318531 - v51;
    v53 = *(double *)(v27 + 16);
    if (v52 > v53)
      goto LABEL_20;
    v54 = v44 + v39;
    v55 = v35 + v44 * v31;
    if (*((_BYTE *)v267 + v54))
    {
      v56 = v45 + v40;
      v57 = v36 + v45 * v30;
      if (!*((_BYTE *)v266 + v56))
        goto LABEL_44;
    }
    else
    {
      v60 = v47[1];
      v61 = vsubq_f64(v60, *v47);
      _D4 = v61.f64[1];
      v60.f64[0] = -v61.f64[1];
      _Q1.f64[0] = vmuld_lane_f64(v47->f64[0], v61, 1) - vmulq_laneq_f64(v61, *v47, 1).f64[0];
      v63 = (float64x2_t)vzip1q_s64((int64x2_t)v60, (int64x2_t)v61);
      v64 = vmulq_f64(v60, v60);
      v64.f64[0] = sqrt(vmlad_n_f64(v64.f64[0], v61.f64[0], v61.f64[0])) + 2.22507386e-308;
      v65 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v64.f64[0], 0);
      v66 = (int8x16_t)vdivq_f64(_Q1, v64);
      v67 = vdivq_f64(v63, v65);
      v68 = vsubq_f64(v37[1], *v37);
      v20.f64[0] = -v68.f64[1];
      v69 = vmulq_laneq_f64(v68, *v37, 1);
      v69.f64[0] = vmuld_lane_f64(v37->f64[0], v68, 1) - v69.f64[0];
      _Q3.f64[0] = sqrt(vmlad_n_f64(vmulq_f64(v20, v20).f64[0], v68.f64[0], v68.f64[0])) + 2.22507386e-308;
      v70 = (int8x16_t)vdivq_f64(v69, _Q3);
      v71 = vdivq_f64((float64x2_t)vzip1q_s64((int64x2_t)v20, (int64x2_t)v68), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&_Q3.f64[0], 0));
      v20 = vmulq_laneq_f64(v71, v67, 1);
      v72 = *(_OWORD *)&vsubq_f64(vmulq_laneq_f64(v67, v71, 1), v20);
      if (fabs(*(double *)&v72) >= 1.0e-10)
      {
        *(_QWORD *)&v75.f64[0] = v70.i64[0];
        v75.f64[1] = v71.f64[0];
        *(_QWORD *)&v76.f64[0] = v66.i64[0];
        v76.f64[1] = v67.f64[0];
        v20 = vsubq_f64(vmulq_f64((float64x2_t)vextq_s8((int8x16_t)v67, v66, 8uLL), v75), vmulq_f64(v76, (float64x2_t)vextq_s8((int8x16_t)v71, v70, 8uLL)));
        *(_QWORD *)&v20.f64[1] = vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL).u64[0];
        _Q7 = vdivq_f64(v20, (float64x2_t)vdupq_lane_s64(v72, 0));
        _Q5 = vsubq_f64(_Q7, *v47);
        __asm { FMLA            D6, D4, V5.D[1] }
        v73 = v263;
        v263[v54] = _D6 / (v47[3].f64[0] * v47[3].f64[0] + 1.0e-10);
        _Q6 = vsubq_f64(_Q7, *v37);
        _D4 = vsubq_f64(v37[16], *v37).f64[1];
        __asm { FMLA            D7, D4, V6.D[1] }
        v74 = _Q7.f64[0] / (v37[3].f64[0] * v37[3].f64[0] + 1.0e-10);
      }
      else
      {
        v73 = v263;
        v263[v54] = INFINITY;
        v74 = INFINITY;
      }
      _V3.D[1] = vextq_s8((int8x16_t)v71, (int8x16_t)v71, 8uLL).u64[0];
      v86 = v55;
      v73[v86] = v74;
      _Q4 = *v47;
      _Q6 = v47[1];
      __asm { FMLA            D7, D5, V4.D[1] }
      *(_QWORD *)&_Q4.f64[0] = vextq_s8((int8x16_t)v67, (int8x16_t)v67, 8uLL).u64[0];
      v67.f64[1] = _Q4.f64[0];
      __asm { FMLA            D3, D5, V6.D[1] }
      v265[v54] = (fabs(*(double *)v70.i64 + _D7) + fabs(*(double *)v70.i64 + _D3)) / (v47[3].f64[0] + 1.0e-10);
      _Q2 = *v37;
      _Q3 = v37[1];
      __asm { FMLA            D5, D4, V2.D[1] }
      _Q1 = vmulq_f64(_Q3, v67);
      __asm { FMLA            D1, D4, V3.D[1] }
      v265[v86] = (fabs(*(double *)v66.i64 + _D5) + fabs(*(double *)v66.i64 + _Q1.f64[0])) / (v37[3].f64[0] + 1.0e-10);
      *((_BYTE *)v267 + v54) = 1;
      v56 = v45 + v40;
      v57 = v36 + v45 * v30;
      if (!*((_BYTE *)v266 + v56))
      {
LABEL_44:
        v93 = v48[1];
        v94 = vsubq_f64(v93, *v48);
        _D4 = v94.f64[1];
        v93.f64[0] = -v94.f64[1];
        _Q1.f64[0] = vmuld_lane_f64(v48->f64[0], v94, 1) - vmulq_laneq_f64(v94, *v48, 1).f64[0];
        v96 = (float64x2_t)vzip1q_s64((int64x2_t)v93, (int64x2_t)v94);
        v97 = vmulq_f64(v93, v93);
        v97.f64[0] = sqrt(vmlad_n_f64(v97.f64[0], v94.f64[0], v94.f64[0])) + 2.22507386e-308;
        v98 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v97.f64[0], 0);
        v99 = (int8x16_t)vdivq_f64(_Q1, v97);
        v100 = vdivq_f64(v96, v98);
        v101 = vsubq_f64(v38[1], *v38);
        v20.f64[0] = -v101.f64[1];
        v102 = vmulq_laneq_f64(v101, *v38, 1);
        v102.f64[0] = vmuld_lane_f64(v38->f64[0], v101, 1) - v102.f64[0];
        _Q3.f64[0] = sqrt(vmlad_n_f64(vmulq_f64(v20, v20).f64[0], v101.f64[0], v101.f64[0])) + 2.22507386e-308;
        v103 = (int8x16_t)vdivq_f64(v102, _Q3);
        v104 = vdivq_f64((float64x2_t)vzip1q_s64((int64x2_t)v20, (int64x2_t)v101), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&_Q3.f64[0], 0));
        v20 = vmulq_laneq_f64(v104, v100, 1);
        v105 = *(_OWORD *)&vsubq_f64(vmulq_laneq_f64(v100, v104, 1), v20);
        if (fabs(*(double *)&v105) >= 1.0e-10)
        {
          *(_QWORD *)&v108.f64[0] = v103.i64[0];
          v108.f64[1] = v104.f64[0];
          *(_QWORD *)&v109.f64[0] = v99.i64[0];
          v109.f64[1] = v100.f64[0];
          v20 = vsubq_f64(vmulq_f64((float64x2_t)vextq_s8((int8x16_t)v100, v99, 8uLL), v108), vmulq_f64(v109, (float64x2_t)vextq_s8((int8x16_t)v104, v103, 8uLL)));
          *(_QWORD *)&v20.f64[1] = vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL).u64[0];
          _Q7 = vdivq_f64(v20, (float64x2_t)vdupq_lane_s64(v105, 0));
          _Q5 = vsubq_f64(_Q7, *v48);
          __asm { FMLA            D6, D4, V5.D[1] }
          v106 = v260;
          v260[v56] = _D6 / (v48[3].f64[0] * v48[3].f64[0] + 1.0e-10);
          _Q6 = vsubq_f64(_Q7, *v38);
          _D4 = vsubq_f64(v38[16], *v38).f64[1];
          __asm { FMLA            D7, D4, V6.D[1] }
          v107 = _Q7.f64[0] / (v38[3].f64[0] * v38[3].f64[0] + 1.0e-10);
        }
        else
        {
          v106 = v260;
          v260[v56] = INFINITY;
          v107 = INFINITY;
        }
        _V3.D[1] = vextq_s8((int8x16_t)v104, (int8x16_t)v104, 8uLL).u64[0];
        v116 = v57;
        v106[v116] = v107;
        _Q4 = *v48;
        _Q6 = v48[1];
        __asm { FMLA            D7, D5, V4.D[1] }
        *(_QWORD *)&_Q4.f64[0] = vextq_s8((int8x16_t)v100, (int8x16_t)v100, 8uLL).u64[0];
        v100.f64[1] = _Q4.f64[0];
        __asm { FMLA            D3, D5, V6.D[1] }
        v58 = v264;
        v264[v56] = (fabs(*(double *)v103.i64 + _D7) + fabs(*(double *)v103.i64 + _D3)) / (v48[3].f64[0] + 1.0e-10);
        _Q2 = *v38;
        _Q3 = v38[1];
        __asm { FMLA            D5, D4, V2.D[1] }
        _Q1 = vmulq_f64(_Q3, v100);
        __asm { FMLA            D1, D4, V3.D[1] }
        v59 = (fabs(*(double *)v99.i64 + _D5) + fabs(*(double *)v99.i64 + _Q1.f64[0])) / (v38[3].f64[0] + 1.0e-10);
        v264[v116] = v59;
        *((_BYTE *)v266 + v56) = 1;
        goto LABEL_48;
      }
    }
    v58 = v264;
    v59 = v264[v57];
LABEL_48:
    v123 = vabdd_f64(v265[v54], v58[v56]);
    v124 = vabdd_f64(v265[v55], v59);
    if (v124 >= v123)
      v125 = v123;
    else
      v125 = v124;
    v126 = *(double *)(v27 + 56);
    if (v125 > v126)
      goto LABEL_20;
    v127 = 0.0;
    if (*(_BYTE *)(v27 + 40))
    {
      v128 = v263[v54];
      if (fabs(v128) != INFINITY)
      {
        v129 = v260[v56];
        if (fabs(v129) != INFINITY)
        {
          v130 = v263[v55];
          if (fabs(v130) != INFINITY)
          {
            v131 = v260[v57];
            if (fabs(v131) != INFINITY)
            {
              v127 = vabdd_f64(v128, v129);
              v132 = vabdd_f64(v130, v131);
              if (v132 < v127)
                v127 = v132;
            }
          }
        }
      }
    }
    v133 = *(double *)(v27 + 48);
    if (v127 > v133)
      goto LABEL_20;
    if (v261 >= *(_DWORD *)(v27 + 96))
      break;
    v259 = (char *)v23;
    v134 = v24;
    v135 = *(double *)(v6 + 16 * v41 + 8) * *(double *)(v6 + 16 * v248 + 8);
    v136 = exp(-(v127 / v133 * 2.5 * (v127 / v133 * 2.5)) * 0.5) * v135;
    v137 = exp(-(v125 / v126 * 2.5 * (v125 / v126 * 2.5)) * 0.5) * v136;
    v138 = exp(-(v52 / v53 * 2.5 * (v52 / v53 * 2.5)) * 0.5) * v137;
    v139 = v283;
    if (v283 < v249)
    {
      *v283 = v138;
      v26 = (uint64_t)(v139 + 1);
      v24 = v134;
      v29 = a2;
      v28 = v251;
      v30 = v252;
      v31 = v253;
      goto LABEL_84;
    }
    v140 = (char *)((char *)v283 - (char *)v134);
    v141 = v283 - v134;
    v142 = v141 + 1;
    if ((unint64_t)(v141 + 1) >> 61)
      sub_20E867F44();
    v143 = v134;
    if (((char *)v249 - (char *)v134) >> 2 > v142)
      v142 = ((char *)v249 - (char *)v134) >> 2;
    if ((unint64_t)((char *)v249 - (char *)v134) >= 0x7FFFFFFFFFFFFFF8)
      v144 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v144 = v142;
    if (v144)
    {
      if (v144 >> 61)
        sub_20E877A38();
      v145 = v144;
      v146 = (char *)operator new(8 * v144);
      v143 = v134;
      v144 = v145;
      v25 = (double *)&v146[8 * v141];
      *v25 = v138;
      v26 = (uint64_t)(v25 + 1);
      v147 = (char *)v139 - (char *)v134;
      _ZF = v139 == v134;
      v31 = v253;
      if (_ZF)
        goto LABEL_81;
LABEL_75:
      v148 = v147 - 8;
      if (v148 < 0x58)
        goto LABEL_223;
      if ((unint64_t)((char *)v139 - v146 - (_QWORD)v140) < 0x20)
        goto LABEL_223;
      v149 = (v148 >> 3) + 1;
      v150 = 8 * (v149 & 0x3FFFFFFFFFFFFFFCLL);
      v151 = &v139[v150 / 0xFFFFFFFFFFFFFFF8];
      v25 = (double *)((char *)v25 - v150);
      v152 = (float64x2_t *)&v146[8 * v141 - 16];
      v153 = (float64x2_t *)(v139 - 2);
      v154 = v149 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        _Q1 = v153[-1];
        v155 = *v153;
        v152[-1] = _Q1;
        *v152 = v155;
        v152 -= 2;
        v153 -= 2;
        v154 -= 4;
      }
      while (v154);
      v139 = v151;
      if (v149 != (v149 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_223:
        do
        {
          v156 = *((_QWORD *)v139-- - 1);
          *((_QWORD *)v25-- - 1) = v156;
        }
        while (v139 != v143);
      }
      goto LABEL_81;
    }
    v146 = 0;
    v25 = (double *)(8 * v141);
    *(double *)(8 * v141) = v138;
    v26 = 8 * v141 + 8;
    v147 = (char *)v139 - (char *)v134;
    v31 = v253;
    if (v139 != v143)
      goto LABEL_75;
LABEL_81:
    v282 = v25;
    v249 = (double *)&v146[8 * v144];
    v284 = v249;
    if (v143)
    {
      v157 = v26;
      operator delete(v143);
      v26 = v157;
    }
    v24 = v25;
    v27 = a4;
    v29 = a2;
    v28 = v251;
    v30 = v252;
LABEL_84:
    v158 = v259;
    v37 = v256;
    v40 = v254;
    v39 = v255;
    v283 = (double *)v26;
    if (v259 >= v257)
    {
      v159 = __p;
      v160 = v259 - __p;
      v161 = (v259 - __p) >> 2;
      v162 = v161 + 1;
      if ((unint64_t)(v161 + 1) >> 62)
        sub_20EABADD4();
      if ((v257 - __p) >> 1 > v162)
        v162 = (v257 - __p) >> 1;
      if ((unint64_t)(v257 - __p) >= 0x7FFFFFFFFFFFFFFCLL)
        v163 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v163 = v162;
      if (v163)
      {
        if (v163 >> 62)
          sub_20E877A38();
        v164 = v26;
        v165 = v24;
        v166 = (char *)operator new(4 * v163);
        v24 = v165;
        v30 = v252;
        v31 = v253;
        v159 = __p;
        v26 = v164;
        v158 = v259;
        v37 = v256;
        v40 = v254;
        v39 = v255;
        v11 = &v166[4 * v161];
        *(_DWORD *)v11 = v42;
        v23 = (uint64_t)(v11 + 4);
        v167 = v259 - __p;
        if (v259 != __p)
        {
LABEL_94:
          v168 = v167 - 4;
          if (v168 < 0xBC
            || (v174 = (v158 - 4 - v159) & 0xFFFFFFFFFFFFFFFCLL, &v166[v160 - 4 - v174] > &v166[v160 - 4])
            || &v158[-v174 - 4] > v158 - 4
            || (unint64_t)(v158 - v166 - v160) < 0x20)
          {
            v169 = v158;
            v27 = a4;
          }
          else
          {
            v175 = (v168 >> 2) + 1;
            v176 = 4 * (v175 & 0x7FFFFFFFFFFFFFF8);
            v169 = &v158[-v176];
            v11 -= v176;
            v177 = (float64x2_t *)&v166[4 * v161 - 16];
            v178 = (float64x2_t *)(v158 - 16);
            v179 = v175 & 0x7FFFFFFFFFFFFFF8;
            v27 = a4;
            do
            {
              _Q1 = v178[-1];
              v180 = *v178;
              v177[-1] = _Q1;
              *v177 = v180;
              v177 -= 2;
              v178 -= 2;
              v179 -= 8;
            }
            while (v179);
            if (v175 == (v175 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_97:
              v279 = v11;
              v257 = &v166[4 * v163];
              v281 = v257;
              if (!v159)
              {
LABEL_99:
                __p = v11;
                v29 = a2;
                v28 = v251;
                goto LABEL_19;
              }
LABEL_98:
              v171 = v24;
              v172 = v26;
              v173 = v23;
              operator delete(v159);
              v23 = v173;
              v40 = v254;
              v39 = v255;
              v37 = v256;
              v26 = v172;
              v24 = v171;
              v30 = v252;
              v31 = v253;
              goto LABEL_99;
            }
          }
          do
          {
            v170 = *((_DWORD *)v169 - 1);
            v169 -= 4;
            *((_DWORD *)v11 - 1) = v170;
            v11 -= 4;
          }
          while (v169 != v159);
          goto LABEL_97;
        }
      }
      else
      {
        v166 = 0;
        v11 = (char *)(4 * v161);
        *(_DWORD *)(4 * v161) = v42;
        v23 = 4 * v161 + 4;
        v167 = v259 - __p;
        if (v259 != __p)
          goto LABEL_94;
      }
      v27 = a4;
      v279 = v11;
      v257 = &v166[4 * v163];
      v281 = v257;
      if (!v159)
        goto LABEL_99;
      goto LABEL_98;
    }
    *(_DWORD *)v259 = v42;
    v23 = (uint64_t)(v259 + 4);
LABEL_19:
    v280 = (_DWORD *)v23;
    ++v261;
    v258 = (_DWORD *)v23;
    v6 = *a3;
    v5 = a3[1];
LABEL_20:
    v41 = ++v42;
    if (v42 >= (unint64_t)((v5 - v6) >> 4))
    {
      v32 = (v5 - v6) >> 4;
      v12 = v242;
      v21 = v243;
      v22 = v244;
      goto LABEL_15;
    }
  }
  sub_20F418E20(&v275);
  v12 = v242;
  v14 = v239;
  v13 = v240;
  if (**(int **)(v275 + 56) > 4)
    goto LABEL_201;
  v182 = *(unsigned __int8 *)(v275 + 72);
  v183 = sub_20E8C31DC(v275, "OSLogSurrogateAppender", 1, 0);
  v184 = v183;
  if (!v182 && !v183)
    goto LABEL_201;
  v268[0] = &v275;
  v268[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v268[2] = std::chrono::system_clock::now().__d_.__rep_;
  v269 = 4;
  v270 = "unknown file";
  v271 = 238;
  v273 = 0;
  v274 = 0;
  v272 = "unknown function";
  v185 = v275;
  v186 = (const char *)(v275 + 16);
  v262 = v275 + 16;
  if (*(char *)(v275 + 39) < 0)
  {
    v186 = *(const char **)(v275 + 16);
    v187 = *(_QWORD *)(v275 + 24);
  }
  else
  {
    v187 = *(unsigned __int8 *)(v275 + 39);
  }
  v188 = v184;
  v189 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v189 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)&v287);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v287);
    if ((_BYTE)v289 && SHIBYTE(v288) < 0)
      operator delete(v287);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
    v27 = a4;
  }
  if (byte_254A4A4F8[23] >= 0)
    v190 = byte_254A4A4F8;
  else
    v190 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v191 = byte_254A4A4F8[23];
  else
    v191 = *(_QWORD *)&byte_254A4A4F8[8];
  v192 = v186;
  v287 = os_log_create(v190, v186);
  v193 = &v288;
  if (v191 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v191 >= 0x17)
  {
    v194 = (v191 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v191 | 7) != 0x17)
      v194 = v191 | 7;
    v195 = v194 + 1;
    v193 = (__int128 *)operator new(v194 + 1);
    *((_QWORD *)&v288 + 1) = v191;
    *(_QWORD *)&v289 = v195 | 0x8000000000000000;
    *(_QWORD *)&v288 = v193;
    v27 = a4;
    goto LABEL_132;
  }
  BYTE7(v289) = v191;
  if (v191)
LABEL_132:
    memmove(v193, v190, v191);
  *((_BYTE *)v193 + v191) = 0;
  BYTE8(v289) = 1;
  v196 = v290;
  if (v187 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v187 >= 0x17)
  {
    v197 = (v187 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v187 | 7) != 0x17)
      v197 = v187 | 7;
    v198 = v197 + 1;
    v196 = (void **)operator new(v197 + 1);
    v290[1] = (void *)v187;
    v291 = v198 | 0x8000000000000000;
    v290[0] = v196;
    v27 = a4;
    goto LABEL_140;
  }
  HIBYTE(v291) = v187;
  if (v187)
LABEL_140:
    memmove(v196, v192, v187);
  *((_BYTE *)v196 + v187) = 0;
  v292 = 1;
  v199 = v287;
  if (SHIBYTE(v291) < 0)
    operator delete(v290[0]);
  if (BYTE8(v289) && SBYTE7(v289) < 0)
    operator delete((void *)v288);
  if (v287)
    os_release(v287);
  if (v188 && *(_QWORD *)(v188 + 24))
  {
    v200 = _os_log_pack_size();
    v201 = operator new(v200, (std::align_val_t)8uLL);
    v202 = (std::__shared_weak_count *)operator new();
    v203 = v202;
    v202->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v202->__shared_owners_;
    v202->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v202->__shared_weak_owners_ = 0;
    v202[1].__vftable = (std::__shared_weak_count_vtbl *)v201;
    v287 = v201;
    *(_QWORD *)&v288 = v201;
    *((_QWORD *)&v288 + 1) = v202;
    do
      v205 = __ldxr(p_shared_owners);
    while (__stxr(v205 + 1, p_shared_owners));
    v289 = 0uLL;
    v290[0] = 0;
    do
      v206 = __ldaxr(p_shared_owners);
    while (__stlxr(v206 - 1, p_shared_owners));
    if (!v206)
    {
      ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
      std::__shared_weak_count::__release_weak(v203);
    }
    v207 = v287;
    v208 = (_DWORD *)_os_log_pack_fill();
    v209 = *(_DWORD *)(a4 + 96);
    *v208 = 67109120;
    v208[1] = v209;
    v210 = operator new();
    v211 = *(unsigned __int8 *)(v185 + 39);
    v212 = v262;
    if ((v211 & 0x80u) != 0)
    {
      v212 = *(_QWORD *)(v185 + 16);
      v211 = *(_QWORD *)(v185 + 24);
    }
    *(_QWORD *)v210 = v207;
    *(_OWORD *)(v210 + 8) = v288;
    v288 = 0uLL;
    *(_OWORD *)(v210 + 24) = v289;
    v289 = 0uLL;
    *(_QWORD *)(v210 + 40) = v212;
    *(_QWORD *)(v210 + 48) = v211;
    *(_BYTE *)(v210 + 56) = 16;
    v285 = 0;
    v286 = v210;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v188 + 24) + 40))(*(_QWORD *)(v188 + 24), &v286);
    v213 = v286;
    v286 = 0;
    if (v213)
    {
      v214 = *(std::__shared_weak_count **)(v213 + 32);
      if (v214)
      {
        v215 = (unint64_t *)&v214->__shared_owners_;
        do
          v216 = __ldaxr(v215);
        while (__stlxr(v216 - 1, v215));
        if (!v216)
        {
          ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
          std::__shared_weak_count::__release_weak(v214);
        }
      }
      v217 = *(std::__shared_weak_count **)(v213 + 16);
      if (v217)
      {
        v218 = (unint64_t *)&v217->__shared_owners_;
        do
          v219 = __ldaxr(v218);
        while (__stlxr(v219 - 1, v218));
        if (!v219)
        {
          ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
          std::__shared_weak_count::__release_weak(v217);
        }
      }
      MEMORY[0x212BC6398](v213, 0x10F0C40B62ED6C6);
      v220 = v285;
      v285 = 0;
      if (v220)
      {
        v221 = *(std::__shared_weak_count **)(v220 + 32);
        if (v221)
        {
          v222 = (unint64_t *)&v221->__shared_owners_;
          do
            v223 = __ldaxr(v222);
          while (__stlxr(v223 - 1, v222));
          if (!v223)
          {
            ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
            std::__shared_weak_count::__release_weak(v221);
          }
        }
        v224 = *(std::__shared_weak_count **)(v220 + 16);
        if (v224)
        {
          v225 = (unint64_t *)&v224->__shared_owners_;
          do
            v226 = __ldaxr(v225);
          while (__stlxr(v226 - 1, v225));
          if (!v226)
          {
            ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
            std::__shared_weak_count::__release_weak(v224);
          }
        }
        MEMORY[0x212BC6398](v220, 0x10F0C40B62ED6C6);
      }
    }
    v227 = (std::__shared_weak_count *)*((_QWORD *)&v289 + 1);
    if (*((_QWORD *)&v289 + 1))
    {
      v228 = (unint64_t *)(*((_QWORD *)&v289 + 1) + 8);
      do
        v229 = __ldaxr(v228);
      while (__stlxr(v229 - 1, v228));
      if (!v229)
      {
        ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
        std::__shared_weak_count::__release_weak(v227);
      }
    }
    v230 = (std::__shared_weak_count *)*((_QWORD *)&v288 + 1);
    if (*((_QWORD *)&v288 + 1))
    {
      v231 = (unint64_t *)(*((_QWORD *)&v288 + 1) + 8);
      do
        v232 = __ldaxr(v231);
      while (__stlxr(v232 - 1, v231));
      if (!v232)
      {
        ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
        std::__shared_weak_count::__release_weak(v230);
      }
    }
  }
  else
  {
    os_log_type_enabled(v199, OS_LOG_TYPE_ERROR);
    v233 = *(_DWORD *)(v27 + 96);
    LODWORD(v287) = 67109120;
    HIDWORD(v287) = v233;
    v234 = (void *)_os_log_send_and_compose_impl();
    if (v234)
      free(v234);
  }
  if (v182)
  {
    sub_20E8C003C((uint64_t)v268, "[ComputeAffinityMatrix] Maximum number of nonzero entries reached (%d). Returning a null matrix...", *(_DWORD *)(a4 + 96));
    sub_20E863570((uint64_t)v268);
  }
  sub_20E863570((uint64_t)v268);
  v235 = v274;
  if (v274)
  {
    v236 = (unint64_t *)&v274->__shared_owners_;
    do
      v237 = __ldaxr(v236);
    while (__stlxr(v237 - 1, v236));
    if (!v237)
    {
      ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
      std::__shared_weak_count::__release_weak(v235);
    }
  }
  v12 = v276;
  v14 = v277;
  v13 = v278;
  v11 = v279;
  v258 = v280;
LABEL_201:
  v6 = *a3;
  v5 = a3[1];
  v26 = (uint64_t)v283;
  v181 = v284;
  v24 = (double *)v282;
  v257 = v281;
  v23 = (uint64_t)v258;
LABEL_202:
  *((_QWORD *)v14 - 1) = (v26 - (uint64_t)v24) >> 3;
  v238 = (unint64_t)(v5 - v6) >> 4;
  v282 = 0;
  v283 = 0;
  v284 = 0;
  v280 = 0;
  v281 = 0;
  v278 = 0;
  v279 = 0;
  v276 = 0;
  v277 = 0;
  *(_DWORD *)a5 = v238;
  *(_QWORD *)(a5 + 8) = v24;
  *(_QWORD *)(a5 + 16) = v26;
  *(_QWORD *)(a5 + 24) = v181;
  *(_QWORD *)(a5 + 32) = v11;
  *(_QWORD *)(a5 + 40) = v23;
  *(_QWORD *)(a5 + 48) = v257;
  *(_QWORD *)(a5 + 56) = v12;
  *(_QWORD *)(a5 + 64) = v14;
  *(_QWORD *)(a5 + 72) = v13;
  if ((v5 - v6) >> 4 != v238
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureMatching/src/LineMatching.cpp", 275, (uint64_t)"affinity_mat_s.nrows() == match_candidates.size()", 49, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  MEMORY[0x212BC6368](v266, 0x1000C8077774924);
  MEMORY[0x212BC6368](v264, 0x1000C8000313F17);
  MEMORY[0x212BC6368](v260, 0x1000C8000313F17);
  MEMORY[0x212BC6368](v267, 0x1000C8077774924);
  MEMORY[0x212BC6368](v265, 0x1000C8000313F17);
  MEMORY[0x212BC6368](v263, 0x1000C8000313F17);
  if (v282)
  {
    v283 = (double *)v282;
    operator delete(v282);
  }
}

void sub_20F41A438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57)
{
  uint64_t v57;
  void *__pa;

  if (*(_BYTE *)(v57 - 216) && *(char *)(v57 - 217) < 0)
    operator delete(*(void **)(v57 - 240));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a40);
  __pa = a50;
  MEMORY[0x212BC6368](a38, 0x1000C8077774924);
  MEMORY[0x212BC6368](a36, 0x1000C8000313F17);
  MEMORY[0x212BC6368](a33, 0x1000C8000313F17);
  MEMORY[0x212BC6368](a39, 0x1000C8077774924);
  MEMORY[0x212BC6368](a37, 0x1000C8000313F17);
  MEMORY[0x212BC6368](a35, 0x1000C8000313F17);
  if (__pa)
  {
    a51 = (uint64_t)__pa;
    operator delete(__pa);
  }
  if (a53)
  {
    a54 = (uint64_t)a53;
    operator delete(a53);
  }
  if (a56)
  {
    a57 = (uint64_t)a56;
    operator delete(a56);
  }
  _Unwind_Resume(a1);
}

void sub_20F41A684(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  char *v7;
  double *v8;
  double *v9;
  double v10;
  uint64_t v11;
  unint64_t v12;
  double *v13;
  unint64_t v14;
  int64x2_t v15;
  int64x2_t *v16;
  uint64_t v17;
  double *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  double i;
  double *v24;
  int *v25;
  uint64_t *v26;
  double *v27;
  double v28;
  double v29;
  double v30;
  double *v31;
  double *v32;
  double *v33;
  float64x2_t *v34;
  float64x2_t *v35;
  uint64_t v36;
  float64x2_t v37;
  float64x2_t v38;
  double *v39;
  double v40;
  double v41;
  double v42;
  float64x2_t *v43;
  uint64_t v44;
  float64x2_t v45;
  float64x2_t v46;
  double v47;
  double v48;
  double *v49;
  double v50;
  float64x2_t v51;
  float64x2_t *v52;
  uint64_t v53;
  float64x2_t v54;
  double *v55;
  int *v56;
  uint64_t *v57;
  double v58;
  double *v59;
  unint64_t v60;
  unint64_t v61;
  float64x2_t *v62;
  uint64_t v63;
  float64x2_t v64;
  float64x2_t v65;
  double v66;
  double v67;
  uint64_t v68;
  double *v69;
  uint64_t v70;
  uint64_t v71;
  float64x2_t v72;
  float64x2_t *v73;
  uint64_t v74;
  float64x2_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  size_t v84;
  DenseMatrix_Double y;
  DenseMatrix_Double x;
  SparseMatrix_Double A;

  v4 = *a1;
  v5 = 8 * v4;
  v6 = (8 * v4 + 31) & 0xFFFFFFFE0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = v6 >> 3;
  v84 = v6 >> 3;
  v7 = (char *)operator new(v6, (std::align_val_t)0x20uLL);
  *(_QWORD *)a2 = v7;
  *(_DWORD *)(a2 + 16) = v4;
  if (!(_DWORD)v4)
    return;
  v8 = (double *)v7;
  v9 = (double *)*((_QWORD *)a1 + 1);
  if (*((double **)a1 + 2) == v9)
  {
    bzero(v7, v5);
    return;
  }
  v10 = 1.0 / (double)v4;
  v11 = v4 - 1;
  v12 = (v4 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  v13 = (double *)v7;
  if (v12 < 3)
    goto LABEL_50;
  v14 = v12 + 1;
  v13 = (double *)&v7[8 * (v14 & 0x3FFFFFFFFFFFFFFCLL)];
  v15 = vdupq_lane_s64(*(uint64_t *)&v10, 0);
  v16 = (int64x2_t *)(v7 + 16);
  v17 = v14 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v16[-1] = v15;
    *v16 = v15;
    v16 += 2;
    v17 -= 4;
  }
  while (v17);
  if (v14 != (v14 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_50:
    do
      *v13++ = v10;
    while (v13 != (double *)&v7[8 * v4]);
  }
  v18 = (double *)operator new((v5 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
  bzero(v18, v5);
  v19 = 0;
  v76 = v4 - 1;
  v82 = v11 & 0x1FFFFFFFFFFFFFFFLL;
  v20 = (v11 & 0x1FFFFFFFFFFFFFFFLL) + 1;
  v83 = (v4 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
  v80 = v83 + 1;
  v21 = (v83 + 1) & 0x3FFFFFFFFFFFFFFCLL;
  v78 = v20;
  v79 = v21;
  v81 = v20 & 0x3FFFFFFFFFFFFFFCLL;
  v77 = v20 & 0x3FFFFFFFFFFFFFFCLL;
  v22 = v4;
  for (i = 0.0; ; i = v29)
  {
    v24 = v8;
    v25 = (int *)*((_QWORD *)a1 + 4);
    v26 = (uint64_t *)*((_QWORD *)a1 + 7);
    A.structure.rowCount = v22;
    A.structure.columnCount = v22;
    A.structure.columnStarts = v26;
    A.structure.rowIndices = v25;
    A.structure.attributes = (SparseAttributes_t)14;
    *(&A.structure.blockSize + 2) = 1;
    A.data = v9;
    x.rowCount = v22;
    x.columnCount = 1;
    x.columnStride = v22;
    x.attributes = 0;
    x.data = v8;
    y.rowCount = v22;
    y.columnCount = 1;
    y.columnStride = v22;
    y.attributes = 0;
    y.data = v18;
    _SparseSpMV_Double(1.0, &A, &x, 0, &y);
    *(_QWORD *)a2 = v18;
    *(_QWORD *)(a2 + 8) = v84;
    *(_DWORD *)(a2 + 16) = v4;
    v27 = &v18[v4];
    v28 = *v18;
    v29 = *v18 * *v24;
    if ((_DWORD)v4 == 1)
    {
      v30 = v28 * v28;
      goto LABEL_24;
    }
    v31 = v18 + 1;
    if (v83 < 3)
    {
      v32 = v18 + 1;
      v33 = v24;
LABEL_17:
      v39 = v33 + 1;
      do
      {
        v40 = *v32++;
        v41 = v40;
        v42 = *v39++;
        v29 = v29 + v41 * v42;
      }
      while (v32 != v27);
      goto LABEL_19;
    }
    v32 = &v31[v79];
    v33 = &v24[v79];
    v34 = (float64x2_t *)(v24 + 3);
    v35 = (float64x2_t *)(v18 + 3);
    v36 = (v83 + 1) & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v37 = vmulq_f64(v35[-1], v34[-1]);
      v38 = vmulq_f64(*v35, *v34);
      v29 = v29 + v37.f64[0] + v37.f64[1] + v38.f64[0] + v38.f64[1];
      v34 += 2;
      v35 += 2;
      v36 -= 4;
    }
    while (v36);
    if (v80 != v21)
      goto LABEL_17;
LABEL_19:
    v30 = v28 * v28;
    if (v83 < 3)
      goto LABEL_51;
    v31 = (double *)((char *)v31 + v79 * 8);
    v43 = (float64x2_t *)(v18 + 3);
    v44 = (v83 + 1) & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v45 = vmulq_f64(v43[-1], v43[-1]);
      v46 = vmulq_f64(*v43, *v43);
      v30 = v30 + v45.f64[0] + v45.f64[1] + v46.f64[0] + v46.f64[1];
      v43 += 2;
      v44 -= 4;
    }
    while (v44);
    if (v80 != v21)
    {
LABEL_51:
      do
      {
        v47 = *v31++;
        v30 = v30 + v47 * v47;
      }
      while (v31 != v27);
    }
LABEL_24:
    v48 = fabs(v29);
    if (sqrt(fmax(v30 - v29 * v29, 0.0)) < (v48 + 1.0e-32) * 0.001 || v19 > 0xA || vabdd_f64(v29, i) < v48 * 0.00005)
      break;
    v49 = v18;
    v50 = sqrt(v30);
    if (v82 < 3)
      goto LABEL_52;
    v49 = &v18[v77];
    v51 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v50, 0);
    v52 = (float64x2_t *)(v18 + 2);
    v53 = v81;
    do
    {
      v54 = vdivq_f64(*v52, v51);
      v52[-1] = vdivq_f64(v52[-1], v51);
      *v52 = v54;
      v52 += 2;
      v53 -= 4;
    }
    while (v53);
    if (v78 != v81)
    {
LABEL_52:
      do
      {
        *v49 = *v49 / v50;
        ++v49;
      }
      while (v49 != v27);
    }
    ++v19;
    v22 = *a1;
    v9 = (double *)*((_QWORD *)a1 + 1);
    v8 = v18;
    v18 = v24;
  }
  v55 = (double *)*((_QWORD *)a1 + 1);
  v56 = (int *)*((_QWORD *)a1 + 4);
  v57 = (uint64_t *)*((_QWORD *)a1 + 7);
  A.structure.rowCount = *a1;
  A.structure.columnCount = A.structure.rowCount;
  A.structure.columnStarts = v57;
  A.structure.rowIndices = v56;
  A.structure.attributes = (SparseAttributes_t)14;
  *(&A.structure.blockSize + 2) = 1;
  A.data = v55;
  x.rowCount = A.structure.rowCount;
  x.columnCount = 1;
  x.columnStride = A.structure.rowCount;
  x.attributes = 0;
  x.data = v18;
  y.rowCount = A.structure.rowCount;
  y.columnCount = 1;
  y.columnStride = A.structure.rowCount;
  y.attributes = 0;
  y.data = v24;
  _SparseSpMV_Double(1.0, &A, &x, 0, &y);
  v58 = *v18 * *v18;
  if ((_DWORD)v4 != 1)
  {
    v59 = v18 + 1;
    v60 = (v4 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
    if (v60 < 3)
      goto LABEL_53;
    v61 = v60 + 1;
    v59 += v61 & 0x3FFFFFFFFFFFFFFCLL;
    v62 = (float64x2_t *)(v18 + 3);
    v63 = v61 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v64 = vmulq_f64(v62[-1], v62[-1]);
      v65 = vmulq_f64(*v62, *v62);
      v58 = v58 + v64.f64[0] + v64.f64[1] + v65.f64[0] + v65.f64[1];
      v62 += 2;
      v63 -= 4;
    }
    while (v63);
    if (v61 != (v61 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_53:
      do
      {
        v66 = *v59++;
        v58 = v58 + v66 * v66;
      }
      while (v59 != v27);
    }
  }
  v67 = sqrt(v58);
  if (v67 != 0.0)
  {
    v68 = v76 & 0x1FFFFFFFFFFFFFFFLL;
    if ((v76 & 0x1FFFFFFFFFFFFFFFuLL) < 3)
    {
      v69 = v18;
      goto LABEL_46;
    }
    v70 = v68 + 1;
    v71 = (v68 + 1) & 0x3FFFFFFFFFFFFFFCLL;
    v69 = &v18[v71];
    v72 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v67, 0);
    v73 = (float64x2_t *)(v18 + 2);
    v74 = v71;
    do
    {
      v75 = vdivq_f64(*v73, v72);
      v73[-1] = vdivq_f64(v73[-1], v72);
      *v73 = v75;
      v73 += 2;
      v74 -= 4;
    }
    while (v74);
    if (v70 != v71)
    {
      do
      {
LABEL_46:
        *v69 = *v69 / v67;
        ++v69;
      }
      while (v69 != v27);
    }
  }
  MEMORY[0x212BC6368](v24, 0x1000C8000313F17);
}

void sub_20F41AC0C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x212BC6368](v2, 0x1000C8000313F17);
  if (*v1)
    MEMORY[0x212BC6368](*v1, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

void sub_20F41AC64(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t *a4, double *a5, _QWORD *a6)
{
  unint64_t v6;
  _QWORD *v7;
  double *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double *v13;
  double *v14;
  double v15;
  uint64_t v16;
  double v17;
  double v18;
  uint64_t v19;
  int32x4_t *v20;
  int32x4_t *v21;
  uint64_t v22;
  int32x4_t *v23;
  unint64_t v24;
  int32x4_t v25;
  int32x4_t *v26;
  int32x4_t v27;
  int32x4_t v28;
  uint64_t v29;
  double v30;
  float64x2_t v32;
  float64x2_t v33;
  unint64_t v34;
  char *v35;
  double *v41;
  int32x4_t *v42;
  int32x4_t *v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  _BYTE *v53;
  _DWORD *v54;
  uint64_t v55;
  int64_t v56;
  unint64_t v57;
  char *v58;
  int v59;
  uint64_t v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  float64x2_t *v65;
  uint64_t v66;
  float64x2_t *v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  double v71;
  int8x16_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  double v76;
  double v78;
  unsigned int *v79;
  unsigned int v80;
  float64x2_t *v81;
  float64x2_t *v82;
  double v85;
  double v88;
  BOOL v89;
  double v90;
  double v91;
  double v92;
  double v93;
  unsigned int *v94;
  uint64_t v95;
  unsigned int *v96;
  unsigned int v97;
  float64x2_t *v98;
  float64x2_t *v99;
  double v102;
  double v105;
  BOOL v106;
  double v107;
  double v108;
  double v109;
  double v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _OWORD *v114;
  char *v115;
  uint64_t v116;
  __int128 v117;
  int32x4_t *__p;
  float64x2_t v119;
  int32x4_t *v124;
  double *v125;
  char v126;
  uint64_t *v127[2];

  a6[1] = *a6;
  v6 = *(unsigned int *)(a3 + 16);
  if ((_DWORD)v6)
  {
    v7 = a6;
    v9 = *(double **)a3;
    v10 = (v6 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v10)
    {
      v11 = v10 + 1;
      v12 = (v10 + 1) & 0x3FFFFFFFFFFFFFFELL;
      v13 = &v9[v12];
      v14 = v9 + 1;
      v15 = 0.0;
      v16 = v12;
      do
      {
        v15 = v15 + fabs(*(v14 - 1)) + fabs(*v14);
        v14 += 2;
        v16 -= 2;
      }
      while (v16);
      if (v11 == v12)
      {
LABEL_9:
        v18 = a5[3];
        v19 = 4 * v6;
        v20 = (int32x4_t *)operator new(4 * v6);
        bzero(v20, 4 * v6);
        v21 = (int32x4_t *)((char *)v20 + 4 * v6);
        if (4 * v6 - 4 >= 0x1C)
        {
          v24 = ((unint64_t)(v19 - 4) >> 2) + 1;
          v22 = v24 & 0x7FFFFFFFFFFFFFF8;
          v23 = (int32x4_t *)((char *)v20 + 4 * (v24 & 0x7FFFFFFFFFFFFFF8));
          v25 = (int32x4_t)xmmword_210365350;
          v26 = v20 + 1;
          v27.i64[0] = 0x400000004;
          v27.i64[1] = 0x400000004;
          v28.i64[0] = 0x800000008;
          v28.i64[1] = 0x800000008;
          v29 = v24 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v26[-1] = v25;
            *v26 = vaddq_s32(v25, v27);
            v25 = vaddq_s32(v25, v28);
            v26 += 2;
            v29 -= 8;
          }
          while (v29);
          if (v24 == v22)
          {
LABEL_15:
            v30 = v15 / (double)v6 * v18;
            v125 = v9;
            v127[0] = (uint64_t *)&v125;
            v127[1] = (uint64_t *)&v126;
            sub_20F41B398((uint64_t)v20, &v20->u32[(unint64_t)v19 / 4], v127, 126 - 2 * __clz(v6), 1);
            v34 = 0;
            do
            {
              if (fabs(*(double *)(*(_QWORD *)a3 + 8 * v20->u32[v34 / 4])) < v30)
              {
                v21 = (int32x4_t *)((char *)v20 + v34);
                __p = v20;
                if (v20 == (int32x4_t *)&v20->i8[v34])
                  goto LABEL_95;
                goto LABEL_21;
              }
              v34 += 4;
            }
            while (v19 != v34);
            __p = v20;
            if (v20 == v21)
            {
LABEL_95:
              operator delete(__p);
              return;
            }
LABEL_21:
            v35 = (char *)v7[1];
            __asm { FMOV            V22.2D, #0.5 }
            v41 = (double *)&unk_2103A5000;
            v42 = __p;
            v119 = _Q22;
            while (1)
            {
              v44 = v42->u32[0];
              v45 = v7[2];
              if ((unint64_t)v35 < v45)
              {
                *(_DWORD *)v35 = v44;
                v35 += 4;
                v7[1] = v35;
                v42 = (int32x4_t *)((char *)v42 + 4);
                if (v42 != v21)
                  goto LABEL_42;
                goto LABEL_22;
              }
              v46 = v7;
              v47 = (char *)*v7;
              v48 = (uint64_t)&v35[-*v7];
              v49 = v48 >> 2;
              v50 = (v48 >> 2) + 1;
              if (v50 >> 62)
                sub_20E867F44();
              v51 = v45 - (_QWORD)v47;
              if (v51 >> 1 > v50)
                v50 = v51 >> 1;
              if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL)
                v52 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v52 = v50;
              v124 = v42;
              if (v52)
              {
                if (v52 >> 62)
                  sub_20E877A38();
                v53 = operator new(4 * v52);
                _Q22 = v119;
                v54 = &v53[4 * v49];
                *v54 = v44;
                v55 = (uint64_t)(v54 + 1);
                v56 = v35 - v47;
                if (v35 != v47)
                {
LABEL_36:
                  v57 = v56 - 4;
                  if (v57 < 0xBC
                    || (v111 = (v35 - 4 - v47) & 0xFFFFFFFFFFFFFFFCLL, &v53[v48 - 4 - v111] > &v53[v48 - 4])
                    || &v35[-v111 - 4] > v35 - 4
                    || (unint64_t)(v35 - &v53[v48]) < 0x20)
                  {
                    v58 = v35;
                    v7 = v46;
                  }
                  else
                  {
                    v112 = (v57 >> 2) + 1;
                    v113 = 4 * (v112 & 0x7FFFFFFFFFFFFFF8);
                    v58 = &v35[-v113];
                    v54 = (_DWORD *)((char *)v54 - v113);
                    v114 = &v53[4 * v49 - 16];
                    v115 = v35 - 16;
                    v116 = v112 & 0x7FFFFFFFFFFFFFF8;
                    v7 = v46;
                    do
                    {
                      v117 = *(_OWORD *)v115;
                      *(v114 - 1) = *((_OWORD *)v115 - 1);
                      *v114 = v117;
                      v114 -= 2;
                      v115 -= 32;
                      v116 -= 8;
                    }
                    while (v116);
                    if (v112 == (v112 & 0x7FFFFFFFFFFFFFF8))
                    {
LABEL_39:
                      *v7 = v54;
                      v7[1] = v55;
                      v7[2] = &v53[4 * v52];
                      if (!v47)
                        goto LABEL_41;
LABEL_40:
                      operator delete(v47);
                      _Q22 = v119;
                      goto LABEL_41;
                    }
                  }
                  do
                  {
                    v59 = *((_DWORD *)v58 - 1);
                    v58 -= 4;
                    *--v54 = v59;
                  }
                  while (v58 != v47);
                  goto LABEL_39;
                }
              }
              else
              {
                v53 = 0;
                v54 = (_DWORD *)(4 * v49);
                *(_DWORD *)(4 * v49) = v44;
                v55 = 4 * v49 + 4;
                v56 = v35 - v47;
                if (v35 != v47)
                  goto LABEL_36;
              }
              v7 = v46;
              *v46 = v54;
              v46[1] = v55;
              v46[2] = &v53[4 * v52];
              if (v47)
                goto LABEL_40;
LABEL_41:
              v35 = (char *)v55;
              v41 = (double *)&unk_2103A5000;
              v7[1] = v55;
              v42 = (int32x4_t *)((char *)v124->i64 + 4);
              if ((int32x4_t *)((char *)v124->i64 + 4) != v21)
              {
LABEL_42:
                v60 = *a4;
                v61 = (unsigned int *)(*a4 + 16 * v44);
                v62 = *v61;
                v63 = v61[1];
                v64 = *a1;
                v65 = *(float64x2_t **)(*a1 + 24 * v62);
                v66 = *a2;
                v67 = *(float64x2_t **)(*a2 + 24 * v63);
                v68 = vsubq_f64(v65[1], *v65);
                _Q2.f64[0] = -v68.f64[1];
                v69 = vmulq_laneq_f64(v68, *v65, 1);
                v69.f64[0] = vmuld_lane_f64(v65->f64[0], v68, 1) - v69.f64[0];
                v70 = (float64x2_t)vzip1q_s64((int64x2_t)_Q2, (int64x2_t)v68);
                v68.f64[0] = sqrt(vmlad_n_f64(vmulq_f64(_Q2, _Q2).f64[0], v68.f64[0], v68.f64[0])) + 2.22507386e-308;
                *(_QWORD *)&v71 = *(_OWORD *)&vdivq_f64(v69, v68);
                v72 = (int8x16_t)vdivq_f64(v70, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v68.f64[0], 0));
                _Q2 = (float64x2_t)vextq_s8(v72, v72, 8uLL);
                v73 = vsubq_f64(v67[1], *v67);
                v33.f64[0] = -v73.f64[1];
                v74 = vmulq_laneq_f64(v73, *v67, 1);
                v74.f64[0] = vmuld_lane_f64(v67->f64[0], v73, 1) - v74.f64[0];
                v75 = (float64x2_t)vzip1q_s64((int64x2_t)v33, (int64x2_t)v73);
                v33 = vmulq_f64(v33, v33);
                v32.f64[0] = sqrt(vmlad_n_f64(v33.f64[0], v73.f64[0], v73.f64[0])) + 2.22507386e-308;
                *(_QWORD *)&v76 = *(_OWORD *)&vdivq_f64(v74, v32);
                v32 = vdivq_f64(v75, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v32.f64[0], 0));
                _D5 = vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL).u64[0];
                v33.f64[0] = a5[4];
                v78 = a5[2];
                v43 = v42;
                while (1)
                {
                  v79 = (unsigned int *)(v60 + 16 * v43->u32[0]);
                  if (*v79 == v62)
                    break;
                  v80 = v79[1];
                  if (v80 == v63)
                    break;
                  v81 = *(float64x2_t **)(v64 + 24 * *v79);
                  v82 = *(float64x2_t **)(v66 + 24 * v80);
                  _Q18 = vmulq_f64(vaddq_f64(*v81, v81[1]), _Q22);
                  __asm { FMLA            D19, D2, V18.D[1] }
                  v85 = v71 + _D19;
                  _Q19 = vmulq_f64(vaddq_f64(*v82, v82[1]), _Q22);
                  __asm { FMLA            D20, D5, V19.D[1] }
                  v88 = fabs(v76 + _D20);
                  v89 = fabs(v85) <= v33.f64[0] || v88 <= v33.f64[0];
                  if (!v89 && v85 < 0.0 != v76 + _D20 < 0.0)
                    break;
                  v90 = v65[2].f64[1] - v81[2].f64[1];
                  if (v90 >= 3.14159265)
                    v90 = v90 + -6.28318531;
                  v91 = v41[327];
                  if (v90 < v91)
                    v90 = v90 + 6.28318531;
                  v92 = v67[2].f64[1] - v82[2].f64[1];
                  if (v92 >= 3.14159265)
                    v92 = v92 + -6.28318531;
                  if (v92 < v91)
                    v92 = v92 + 6.28318531;
                  v93 = vabdd_f64(v90, v92);
                  if (6.28318531 - v93 < v93)
                    v93 = 6.28318531 - v93;
                  if (v93 > v78)
                    break;
                  v43 = (int32x4_t *)((char *)v43 + 4);
                  if (v43 == v21)
                    goto LABEL_22;
                }
                v94 = &v43->u32[1];
                if ((int32x4_t *)((char *)v43->i64 + 4) != v21)
                {
                  *(_QWORD *)&v32.f64[1] = _D5;
                  do
                  {
                    v95 = *v94;
                    v96 = (unsigned int *)(v60 + 16 * v95);
                    if (*v96 != v62)
                    {
                      v97 = v96[1];
                      if (v97 != v63)
                      {
                        v98 = *(float64x2_t **)(v64 + 24 * *v96);
                        v99 = *(float64x2_t **)(v66 + 24 * v97);
                        _Q16 = vmulq_f64(vaddq_f64(*v98, v98[1]), _Q22);
                        __asm { FMLA            D17, D2, V16.D[1] }
                        v102 = v71 + _D17;
                        _Q17 = vmulq_f64(vaddq_f64(*v99, v99[1]), _Q22);
                        __asm { FMLA            D18, D5, V17.D[1] }
                        v105 = fabs(v76 + _D18);
                        v106 = fabs(v102) <= v33.f64[0] || v105 <= v33.f64[0];
                        if (v106 || v102 < 0.0 == v76 + _D18 < 0.0)
                        {
                          v107 = v65[2].f64[1] - v98[2].f64[1];
                          if (v107 >= 3.14159265)
                            v107 = v107 + -6.28318531;
                          v108 = v41[327];
                          if (v107 < v108)
                            v107 = v107 + 6.28318531;
                          v109 = v67[2].f64[1] - v99[2].f64[1];
                          if (v109 >= 3.14159265)
                            v109 = v109 + -6.28318531;
                          if (v109 < v108)
                            v109 = v109 + 6.28318531;
                          v110 = vabdd_f64(v107, v109);
                          if (6.28318531 - v110 < v110)
                            v110 = 6.28318531 - v110;
                          if (v110 <= v78)
                          {
                            v43->i32[0] = v95;
                            v43 = (int32x4_t *)((char *)v43 + 4);
                          }
                        }
                      }
                    }
                    ++v94;
                  }
                  while (v94 != (unsigned int *)v21);
                }
                goto LABEL_23;
              }
LABEL_22:
              v43 = v21;
LABEL_23:
              v21 = v43;
              if (v42 == v43)
                goto LABEL_95;
            }
          }
        }
        else
        {
          LODWORD(v22) = 0;
          v23 = v20;
        }
        do
        {
          v23->i32[0] = v22;
          v23 = (int32x4_t *)((char *)v23 + 4);
          LODWORD(v22) = v22 + 1;
        }
        while (v23 != v21);
        goto LABEL_15;
      }
    }
    else
    {
      v15 = 0.0;
      v13 = *(double **)a3;
    }
    do
    {
      v17 = *v13++;
      v15 = v15 + fabs(v17);
    }
    while (v13 != &v9[v6]);
    goto LABEL_9;
  }
}

void sub_20F41B35C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20F41B370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20F41B384()
{
  sub_20E860B90("vector");
}

uint64_t sub_20F41B398(uint64_t result, unsigned int *a2, uint64_t **a3, uint64_t a4, char a5)
{
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  double v37;
  double v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  double v50;
  double v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  double v60;
  uint64_t v61;
  double v62;
  unsigned int v63;
  unsigned int v64;
  double v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  uint64_t v69;
  unsigned int *v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int *v80;
  BOOL v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int *v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  double v96;
  double v97;
  uint64_t v98;
  double v99;
  _DWORD *v100;
  _DWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  double v107;
  uint64_t v108;
  uint64_t v109;
  double v110;
  uint64_t *v111;
  unsigned int *v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int *v115;
  unsigned int *v116;
  uint64_t v117;
  uint64_t v118;
  double v119;
  uint64_t v120;
  uint64_t v121;
  int64_t v122;
  int64_t v123;
  BOOL v124;
  uint64_t v125;
  unsigned int *v126;
  uint64_t v127;
  unsigned int *v128;
  uint64_t v129;
  double v130;
  unsigned int *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unsigned int v136;
  uint64_t *v137;
  unsigned int *v138;
  unsigned int *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unsigned int *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  double v148;
  unsigned int *v149;
  unsigned int *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  double v154;
  uint64_t v155;

  v9 = (unsigned int *)result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v92 = *(a2 - 1);
        v93 = *v10;
        if (fabs(*(double *)(**a3 + 8 * v92)) > fabs(*(double *)(**a3 + 8 * v93)))
        {
          *v10 = v92;
          goto LABEL_165;
        }
        return result;
      case 3:
        v94 = **a3;
        v93 = *v10;
        v95 = v10[1];
        v96 = fabs(*(double *)(v94 + 8 * v95));
        v97 = fabs(*(double *)(v94 + 8 * v93));
        v98 = *(a2 - 1);
        v99 = fabs(*(double *)(v94 + 8 * v98));
        if (v96 <= v97)
        {
          if (v99 > v96)
          {
            v10[1] = v98;
            *(a2 - 1) = v95;
            v109 = *v10;
            v105 = v10[1];
            v110 = *(double *)(v94 + 8 * v109);
            v107 = fabs(*(double *)(v94 + 8 * v105));
            goto LABEL_154;
          }
        }
        else
        {
          if (v99 <= v96)
          {
            *v10 = v95;
            v10[1] = v93;
            v155 = *(a2 - 1);
            if (fabs(*(double *)(v94 + 8 * v155)) <= v97)
              return result;
            v10[1] = v155;
          }
          else
          {
            *v10 = v98;
          }
LABEL_165:
          *(a2 - 1) = v93;
        }
        return result;
      case 4:
        return (uint64_t)sub_20F41C2C8(v10, v10 + 1, v10 + 2, a2 - 1, **a3);
      case 5:
        v100 = v10 + 2;
        v101 = v10 + 3;
        result = (uint64_t)sub_20F41C2C8(v9, v9 + 1, v9 + 2, v9 + 3, **a3);
        v102 = *(a2 - 1);
        v103 = **a3;
        v104 = v9[3];
        if (fabs(*(double *)(v103 + 8 * v102)) > fabs(*(double *)(v103 + 8 * v104)))
        {
          *v101 = v102;
          *(a2 - 1) = v104;
          v105 = *v101;
          v106 = *v100;
          v107 = fabs(*(double *)(v103 + 8 * v105));
          if (v107 > fabs(*(double *)(v103 + 8 * v106)))
          {
            *v100 = v105;
            *v101 = v106;
            v108 = v9[1];
            if (v107 > fabs(*(double *)(v103 + 8 * v108)))
            {
              v9[1] = v105;
              v9[2] = v108;
              v109 = *v9;
              v110 = *(double *)(v103 + 8 * v109);
LABEL_154:
              if (v107 > fabs(v110))
              {
                *v9 = v105;
                v9[1] = v109;
              }
            }
          }
        }
        return result;
      default:
        if (v11 > 95)
        {
          if (!a4)
          {
            if (v10 != a2)
            {
              v122 = (unint64_t)(v12 - 2) >> 1;
              v123 = v122;
              do
              {
                if (v122 >= v123)
                {
                  v125 = (2 * v123) | 1;
                  v126 = &v10[v125];
                  v127 = **a3;
                  if (2 * v123 + 2 < v12
                    && fabs(*(double *)(v127 + 8 * *v126)) > fabs(*(double *)(v127 + 8 * v126[1])))
                  {
                    ++v126;
                    v125 = 2 * v123 + 2;
                  }
                  v128 = &v10[v123];
                  result = *v126;
                  v129 = *v128;
                  v130 = fabs(*(double *)(v127 + 8 * v129));
                  if (fabs(*(double *)(v127 + 8 * result)) <= v130)
                  {
                    do
                    {
                      v131 = v126;
                      *v128 = result;
                      if (v122 < v125)
                        break;
                      v132 = 2 * v125;
                      v125 = (2 * v125) | 1;
                      v126 = &v10[v125];
                      v133 = v132 + 2;
                      if (v133 < v12 && fabs(*(double *)(v127 + 8 * *v126)) > fabs(*(double *)(v127 + 8 * v126[1])))
                      {
                        ++v126;
                        v125 = v133;
                      }
                      result = *v126;
                      v128 = v131;
                    }
                    while (fabs(*(double *)(v127 + 8 * result)) <= v130);
                    *v131 = v129;
                  }
                }
                v124 = v123-- <= 0;
              }
              while (!v124);
              v134 = (unint64_t)v11 >> 2;
              do
              {
                v135 = 0;
                v136 = *v10;
                v137 = *a3;
                v138 = v10;
                do
                {
                  v139 = v138;
                  v138 += v135 + 1;
                  v140 = 2 * v135;
                  v135 = (2 * v135) | 1;
                  v141 = v140 + 2;
                  if (v141 < v134)
                  {
                    result = v138[1];
                    if (fabs(*(double *)(*v137 + 8 * *v138)) > fabs(*(double *)(*v137 + 8 * result)))
                    {
                      ++v138;
                      v135 = v141;
                    }
                  }
                  *v139 = *v138;
                }
                while (v135 <= (uint64_t)((unint64_t)(v134 - 2) >> 1));
                if (v138 == --a2)
                {
                  *v138 = v136;
                }
                else
                {
                  *v138 = *a2;
                  *a2 = v136;
                  v142 = (char *)v138 - (char *)v10 + 4;
                  if (v142 >= 5)
                  {
                    v143 = (((unint64_t)v142 >> 2) - 2) >> 1;
                    v144 = &v10[v143];
                    v145 = *v144;
                    v146 = **a3;
                    v147 = *v138;
                    v148 = fabs(*(double *)(v146 + 8 * v147));
                    if (fabs(*(double *)(v146 + 8 * v145)) > v148)
                    {
                      do
                      {
                        v149 = v144;
                        *v138 = v145;
                        if (!v143)
                          break;
                        v143 = (v143 - 1) >> 1;
                        v144 = &v10[v143];
                        v145 = *v144;
                        v138 = v149;
                      }
                      while (fabs(*(double *)(v146 + 8 * v145)) > v148);
                      *v149 = v147;
                    }
                  }
                }
                v124 = v134-- <= 2;
              }
              while (!v124);
            }
            return result;
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = &v10[(unint64_t)v12 >> 1];
          v15 = **a3;
          v16 = *(a2 - 1);
          v17 = fabs(*(double *)(v15 + 8 * v16));
          if ((unint64_t)v11 < 0x201)
          {
            v22 = *v10;
            v23 = *v14;
            v24 = fabs(*(double *)(v15 + 8 * v22));
            v25 = fabs(*(double *)(v15 + 8 * v23));
            if (v24 <= v25)
            {
              if (v17 > v24)
              {
                *v10 = v16;
                *(a2 - 1) = v22;
                v28 = *v10;
                v29 = *v14;
                if (fabs(*(double *)(v15 + 8 * v28)) > fabs(*(double *)(v15 + 8 * v29)))
                {
                  *v14 = v28;
                  *v10 = v29;
                  --a4;
                  v30 = v29;
                  if ((a5 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
              goto LABEL_32;
            }
            if (v17 <= v24)
            {
              *v14 = v22;
              *v10 = v23;
              v43 = *(a2 - 1);
              if (fabs(*(double *)(v15 + 8 * v43)) <= v25)
                goto LABEL_32;
              *v10 = v43;
            }
            else
            {
              *v14 = v16;
            }
            *(a2 - 1) = v23;
LABEL_32:
            --a4;
            v30 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v18 = *v14;
          v19 = *v10;
          v20 = fabs(*(double *)(v15 + 8 * v18));
          v21 = fabs(*(double *)(v15 + 8 * v19));
          if (v20 <= v21)
          {
            if (v17 > v20)
            {
              *v14 = v16;
              *(a2 - 1) = v18;
              v26 = *v14;
              v27 = *v10;
              if (fabs(*(double *)(v15 + 8 * v26)) > fabs(*(double *)(v15 + 8 * v27)))
              {
                *v10 = v26;
                *v14 = v27;
              }
            }
          }
          else
          {
            if (v17 <= v20)
            {
              *v10 = v18;
              *v14 = v19;
              v31 = *(a2 - 1);
              if (fabs(*(double *)(v15 + 8 * v31)) <= v21)
                goto LABEL_23;
              *v14 = v31;
            }
            else
            {
              *v10 = v16;
            }
            *(a2 - 1) = v19;
          }
LABEL_23:
          v32 = &v10[v13];
          v35 = *(v32 - 1);
          v33 = v32 - 1;
          v34 = v35;
          v36 = v10[1];
          v37 = fabs(*(double *)(v15 + 8 * v35));
          v38 = fabs(*(double *)(v15 + 8 * v36));
          v39 = *(a2 - 2);
          v40 = fabs(*(double *)(v15 + 8 * v39));
          if (v37 <= v38)
          {
            if (v40 > v37)
            {
              *v33 = v39;
              *(a2 - 2) = v34;
              v41 = *v33;
              v42 = v10[1];
              if (fabs(*(double *)(v15 + 8 * v41)) > fabs(*(double *)(v15 + 8 * v42)))
              {
                v10[1] = v41;
                *v33 = v42;
              }
            }
          }
          else
          {
            if (v40 <= v37)
            {
              v10[1] = v34;
              *v33 = v36;
              v44 = *(a2 - 2);
              if (fabs(*(double *)(v15 + 8 * v44)) <= v38)
                goto LABEL_37;
              *v33 = v44;
            }
            else
            {
              v10[1] = v39;
            }
            *(a2 - 2) = v36;
          }
LABEL_37:
          v45 = &v10[v13];
          v48 = v45[1];
          v46 = v45 + 1;
          v47 = v48;
          v49 = v10[2];
          v50 = fabs(*(double *)(v15 + 8 * v48));
          v51 = fabs(*(double *)(v15 + 8 * v49));
          v52 = *(a2 - 3);
          v53 = fabs(*(double *)(v15 + 8 * v52));
          if (v50 <= v51)
          {
            if (v53 > v50)
            {
              *v46 = v52;
              *(a2 - 3) = v47;
              v54 = *v46;
              v55 = v10[2];
              if (fabs(*(double *)(v15 + 8 * v54)) > fabs(*(double *)(v15 + 8 * v55)))
              {
                v10[2] = v54;
                *v46 = v55;
              }
            }
          }
          else
          {
            if (v53 <= v50)
            {
              v10[2] = v47;
              *v46 = v49;
              v56 = *(a2 - 3);
              if (fabs(*(double *)(v15 + 8 * v56)) <= v51)
                goto LABEL_46;
              *v46 = v56;
            }
            else
            {
              v10[2] = v52;
            }
            *(a2 - 3) = v49;
          }
LABEL_46:
          v57 = *v14;
          v58 = *v33;
          v59 = fabs(*(double *)(v15 + 8 * v57));
          v60 = fabs(*(double *)(v15 + 8 * v58));
          v61 = *v46;
          v62 = fabs(*(double *)(v15 + 8 * v61));
          if (v59 > v60)
          {
            if (v62 <= v59)
            {
              *v33 = v57;
              *v14 = v58;
              v33 = v14;
              LODWORD(v57) = v61;
              if (v62 <= v60)
              {
                v63 = *v10;
                *v10 = v58;
                *v14 = v63;
                --a4;
                v30 = *v10;
                if ((a5 & 1) != 0)
                  goto LABEL_56;
                goto LABEL_55;
              }
            }
            goto LABEL_53;
          }
          if (v62 <= v59)
            goto LABEL_54;
          *v14 = v61;
          *v46 = v57;
          v46 = v14;
          LODWORD(v57) = v58;
          if (v62 > v60)
          {
LABEL_53:
            *v33 = v61;
            *v46 = v58;
LABEL_54:
            v64 = *v10;
            *v10 = v57;
            *v14 = v64;
            --a4;
            v30 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_56;
LABEL_55:
            v65 = fabs(*(double *)(v15 + 8 * v30));
            if (fabs(*(double *)(v15 + 8 * *(v10 - 1))) > v65)
              goto LABEL_56;
            if (v65 <= fabs(*(double *)(v15 + 8 * *(a2 - 1))))
            {
              v84 = v10 + 1;
              do
              {
                v10 = v84;
                if (v84 >= a2)
                  break;
                ++v84;
              }
              while (v65 <= fabs(*(double *)(v15 + 8 * *v10)));
            }
            else
            {
              do
              {
                v83 = v10[1];
                ++v10;
              }
              while (v65 <= fabs(*(double *)(v15 + 8 * v83)));
            }
            v85 = a2;
            if (v10 < a2)
            {
              v85 = a2;
              do
                v86 = *--v85;
              while (v65 > fabs(*(double *)(v15 + 8 * v86)));
            }
            if (v10 < v85)
            {
              v87 = *v10;
              v88 = *v85;
              do
              {
                *v10 = v88;
                *v85 = v87;
                do
                {
                  v89 = v10[1];
                  ++v10;
                  v87 = v89;
                }
                while (v65 <= fabs(*(double *)(v15 + 8 * v89)));
                do
                {
                  v90 = *--v85;
                  v88 = v90;
                }
                while (v65 > fabs(*(double *)(v15 + 8 * v90)));
              }
              while (v10 < v85);
            }
            v91 = v10 - 1;
            if (v10 - 1 != v9)
              *v9 = *v91;
            a5 = 0;
            *v91 = v30;
            continue;
          }
          v82 = *v10;
          *v10 = v61;
          *v14 = v82;
          --a4;
          v30 = *v10;
          if ((a5 & 1) == 0)
            goto LABEL_55;
LABEL_56:
          v66 = 0;
          v67 = **a3;
          v68 = fabs(*(double *)(v67 + 8 * v30));
          do
            v69 = v10[++v66];
          while (fabs(*(double *)(v67 + 8 * v69)) > v68);
          v70 = &v10[v66];
          v71 = a2;
          if (v66 == 1)
          {
            v71 = a2;
            do
            {
              if (v70 >= v71)
                break;
              v73 = *--v71;
            }
            while (fabs(*(double *)(v67 + 8 * v73)) <= v68);
          }
          else
          {
            do
              v72 = *--v71;
            while (fabs(*(double *)(v67 + 8 * v72)) <= v68);
          }
          if (v70 >= v71)
          {
            v80 = v70 - 1;
            if (v70 - 1 != v10)
              goto LABEL_73;
          }
          else
          {
            v74 = *v71;
            v75 = v69;
            v76 = &v10[v66];
            v77 = v71;
            do
            {
              *v76 = v74;
              *v77 = v75;
              do
              {
                v78 = v76[1];
                ++v76;
                v75 = v78;
              }
              while (fabs(*(double *)(v67 + 8 * v78)) > v68);
              do
              {
                v79 = *--v77;
                v74 = v79;
              }
              while (fabs(*(double *)(v67 + 8 * v79)) <= v68);
            }
            while (v76 < v77);
            v80 = v76 - 1;
            if (v76 - 1 == v10)
              goto LABEL_74;
LABEL_73:
            *v10 = *v80;
          }
LABEL_74:
          *v80 = v30;
          if (v70 < v71)
            goto LABEL_77;
          v81 = sub_20F41BF04(v10, v80, a3);
          v10 = v80 + 1;
          result = sub_20F41BF04(v80 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            if (v81)
              continue;
LABEL_77:
            result = sub_20F41B398(v9, v80, a3, a4, a5 & 1);
            a5 = 0;
            v10 = v80 + 1;
            continue;
          }
          a2 = v80;
          if (v81)
            return result;
          goto LABEL_2;
        }
        v111 = *a3;
        if ((a5 & 1) != 0)
        {
          if (v10 != a2)
          {
            v112 = v10 + 1;
            if (v10 + 1 != a2)
            {
              v113 = *v111;
              v114 = 4;
              v115 = v10;
              do
              {
                v118 = *v115;
                v117 = v115[1];
                v115 = v112;
                v119 = fabs(*(double *)(v113 + 8 * v117));
                if (v119 > fabs(*(double *)(v113 + 8 * v118)))
                {
                  v120 = v114;
                  do
                  {
                    *(unsigned int *)((char *)v10 + v120) = v118;
                    v121 = v120 - 4;
                    if (v120 == 4)
                    {
                      v116 = v10;
                      goto LABEL_116;
                    }
                    v118 = *(unsigned int *)((char *)v10 + v120 - 8);
                    v120 -= 4;
                  }
                  while (v119 > fabs(*(double *)(v113 + 8 * v118)));
                  v116 = (unsigned int *)((char *)v10 + v121);
LABEL_116:
                  *v116 = v117;
                }
                v112 = v115 + 1;
                v114 += 4;
              }
              while (v115 + 1 != a2);
            }
          }
        }
        else if (v10 != a2)
        {
          v150 = v10 + 1;
          if (v10 + 1 != a2)
          {
            v151 = *v111;
            do
            {
              v153 = *v9;
              v152 = v9[1];
              v9 = v150;
              v154 = fabs(*(double *)(v151 + 8 * v152));
              if (v154 > fabs(*(double *)(v151 + 8 * v153)))
              {
                do
                {
                  *v150 = v153;
                  v153 = *(v150 - 2);
                  --v150;
                }
                while (v154 > fabs(*(double *)(v151 + 8 * v153)));
                *v150 = v152;
              }
              v150 = v9 + 1;
            }
            while (v9 + 1 != a2);
          }
        }
        return result;
    }
  }
}

BOOL sub_20F41BF04(unsigned int *a1, unsigned int *a2, uint64_t **a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  int v40;
  uint64_t i;
  uint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (fabs(*(double *)(**a3 + 8 * v8)) > fabs(*(double *)(**a3 + 8 * v9)))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      v10 = **a3;
      v11 = *a1;
      v12 = a1[1];
      v13 = fabs(*(double *)(v10 + 8 * v12));
      v14 = fabs(*(double *)(v10 + 8 * v11));
      v15 = *(a2 - 1);
      v16 = fabs(*(double *)(v10 + 8 * v15));
      if (v13 <= v14)
      {
        if (v16 > v13)
        {
          a1[1] = v15;
          *(a2 - 1) = v12;
          v38 = *a1;
          v37 = a1[1];
          if (fabs(*(double *)(v10 + 8 * v37)) > fabs(*(double *)(v10 + 8 * v38)))
          {
            *a1 = v37;
            a1[1] = v38;
          }
        }
      }
      else if (v16 <= v13)
      {
        *a1 = v12;
        a1[1] = v11;
        v47 = *(a2 - 1);
        if (fabs(*(double *)(v10 + 8 * v47)) > v14)
        {
          a1[1] = v47;
          *(a2 - 1) = v11;
        }
      }
      else
      {
        *a1 = v15;
        *(a2 - 1) = v11;
      }
      return result;
    case 4:
      sub_20F41C2C8(a1, a1 + 1, a1 + 2, a2 - 1, **a3);
      return 1;
    case 5:
      v27 = a1 + 2;
      v28 = a1 + 3;
      sub_20F41C2C8(a1, a1 + 1, a1 + 2, a1 + 3, **a3);
      v29 = *(a2 - 1);
      v30 = **a3;
      v31 = a1[3];
      if (fabs(*(double *)(v30 + 8 * v29)) <= fabs(*(double *)(v30 + 8 * v31)))
        return 1;
      *v28 = v29;
      *(a2 - 1) = v31;
      v32 = *v28;
      v33 = *v27;
      v34 = fabs(*(double *)(v30 + 8 * v32));
      if (v34 <= fabs(*(double *)(v30 + 8 * v33)))
        return 1;
      *v27 = v32;
      *v28 = v33;
      v35 = a1[1];
      if (v34 <= fabs(*(double *)(v30 + 8 * v35)))
        return 1;
      a1[1] = v32;
      a1[2] = v35;
      v36 = *a1;
      if (v34 <= fabs(*(double *)(v30 + 8 * v36)))
        return 1;
      *a1 = v32;
      a1[1] = v36;
      return 1;
    default:
      v18 = a1 + 2;
      v17 = a1[2];
      v19 = a1[1];
      v20 = **a3;
      v21 = *a1;
      v22 = fabs(*(double *)(v20 + 8 * v19));
      v23 = fabs(*(double *)(v20 + 8 * v21));
      v24 = fabs(*(double *)(v20 + 8 * v17));
      if (v22 > v23)
      {
        v25 = a1;
        v26 = a1 + 2;
        if (v24 <= v22)
        {
          *a1 = v19;
          a1[1] = v21;
          v25 = a1 + 1;
          v26 = a1 + 2;
          if (v24 <= v23)
            goto LABEL_25;
        }
LABEL_24:
        *v25 = v17;
        *v26 = v21;
        goto LABEL_25;
      }
      if (v24 > v22)
      {
        a1[1] = v17;
        *v18 = v19;
        v25 = a1;
        v26 = a1 + 1;
        if (v24 > v23)
          goto LABEL_24;
      }
LABEL_25:
      v39 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v40 = 0;
      for (i = 12; ; i += 4)
      {
        v42 = *v39;
        v43 = *v18;
        v44 = fabs(*(double *)(v20 + 8 * v42));
        if (v44 > fabs(*(double *)(v20 + 8 * v43)))
          break;
LABEL_34:
        v18 = v39++;
        if (v39 == a2)
          return 1;
      }
      v45 = i;
      do
      {
        *(unsigned int *)((char *)a1 + v45) = v43;
        v46 = v45 - 4;
        if (v45 == 4)
        {
          *a1 = v42;
          if (++v40 != 8)
            goto LABEL_34;
          return v39 + 1 == a2;
        }
        v43 = *(unsigned int *)((char *)a1 + v45 - 8);
        v45 -= 4;
      }
      while (v44 > fabs(*(double *)(v20 + 8 * v43)));
      *(unsigned int *)((char *)a1 + v46) = v42;
      if (++v40 != 8)
        goto LABEL_34;
      return v39 + 1 == a2;
  }
}

_DWORD *sub_20F41C2C8(_DWORD *result, _DWORD *a2, unsigned int *a3, _DWORD *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  int v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *a2;
  v6 = *result;
  v7 = fabs(*(double *)(a5 + 8 * v5));
  v8 = fabs(*(double *)(a5 + 8 * v6));
  v9 = *a3;
  v10 = fabs(*(double *)(a5 + 8 * *a3));
  if (v7 <= v8)
  {
    if (v10 <= v7)
    {
      v6 = *a3;
      goto LABEL_14;
    }
    *a2 = v9;
    *a3 = v5;
    v11 = *a2;
    v12 = *result;
    if (fabs(*(double *)(a5 + 8 * v11)) <= fabs(*(double *)(a5 + 8 * v12)))
    {
      v6 = v5;
      v9 = v5;
      goto LABEL_14;
    }
    *result = v11;
    *a2 = v12;
    v6 = *a3;
  }
  else
  {
    if (v10 <= v7)
    {
      *result = v5;
      *a2 = v6;
      v9 = *a3;
      if (fabs(*(double *)(a5 + 8 * *a3)) <= v8)
      {
        v6 = *a3;
        goto LABEL_14;
      }
      *a2 = v9;
    }
    else
    {
      *result = v9;
    }
    *a3 = v6;
  }
  v9 = v6;
LABEL_14:
  v13 = *a4;
  if (fabs(*(double *)(a5 + 8 * v13)) > fabs(*(double *)(a5 + 8 * v6)))
  {
    *a3 = v13;
    *a4 = v9;
    v14 = *a3;
    v15 = *a2;
    if (fabs(*(double *)(a5 + 8 * v14)) > fabs(*(double *)(a5 + 8 * v15)))
    {
      *a2 = v14;
      *a3 = v15;
      v16 = *a2;
      v17 = *result;
      if (fabs(*(double *)(a5 + 8 * v16)) > fabs(*(double *)(a5 + 8 * v17)))
      {
        *result = v16;
        *a2 = v17;
      }
    }
  }
  return result;
}

uint64_t *sub_20F41C400@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *__p;
  __int128 v17;

  __p = operator new(0x19uLL);
  v17 = xmmword_2102DAFD0;
  strcpy((char *)__p, "LineMatching parameters");
  sub_20E8B30B4(a2, (__int128 *)&__p, 80, 40);
  if (SHIBYTE(v17) < 0)
    operator delete(__p);
  __p = (void *)nullsub_1(a2);
  v4 = sub_20EA9DB90((double *)a1);
  sub_20E8B2F9C((uint64_t *)&__p, "LineMatchingConfig.descriptor_threshold", v4, "Maximum euclidean distance between lines' descriptors for them to be considered a match.");
  __p = (void *)nullsub_1(a2);
  v5 = sub_20EA9DB90((double *)(a1 + 8));
  sub_20E8B2F9C((uint64_t *)&__p, "LineMatchingConfig.length_threshold", v5, "Maximum relative length difference for lines to be considered a match. Length delta is normalized w.r.t. the minimum length of the two lines");
  __p = (void *)nullsub_1(a2);
  v6 = sub_20EA9DB90((double *)(a1 + 16));
  sub_20E8B2F9C((uint64_t *)&__p, "LineMatchingConfig.angle_threshold", v6, "Serves two purposes: (1) When finding candidate line matches, this is the maximum change in angle between a line in one image and its match in the other image.  (2) When computing the affinity matrix between pairs of matches, the angle between a pair of lines in one image is compared to the angle between the matching pair in another image; this p"
    "arameter is the maximum allowed difference between those two angles.");
  __p = (void *)nullsub_1(a2);
  v7 = sub_20EA9DB90((double *)(a1 + 24));
  sub_20E8B2F9C((uint64_t *)&__p, "LineMatchingConfig.eigenvector_threshold_factor", v7, "When converting eigenvector to a matching, algorithm terminates when values drop below this factor of the mean value ");
  __p = (void *)nullsub_1(a2);
  v8 = sub_20EA9DB90((double *)(a1 + 32));
  sub_20E8B2F9C((uint64_t *)&__p, "LineMatchingConfig.sidedness_margin", v8, "\"sidedness\" value below which the sidedness check always passes (in pixels?)");
  __p = (void *)nullsub_1(a2);
  v9 = sub_20EAA14D8((_BYTE *)(a1 + 40));
  sub_20E8B2F9C((uint64_t *)&__p, "LineMatchingConfig.enable_i_ratio_test", v9, "if false, i_ratio isn't considered during matching.  Recommended to disable, because i_ratio behaves badly with near-parallel pairs of lines");
  __p = (void *)nullsub_1(a2);
  v10 = sub_20EA9DB90((double *)(a1 + 48));
  sub_20E8B2F9C((uint64_t *)&__p, "LineMatchingConfig.i_ratio_threshold", v10, "Intersection ratio threshold for creating affinity matrix.");
  __p = (void *)nullsub_1(a2);
  v11 = sub_20EA9DB90((double *)(a1 + 56));
  sub_20E8B2F9C((uint64_t *)&__p, "LineMatchingConfig.p_ratio_threshold", v11, "Projection ratio threshold for creating affinity matrix.");
  __p = (void *)nullsub_1(a2);
  v12 = sub_20EAA14D8((_BYTE *)(a1 + 64));
  sub_20E8B2F9C((uint64_t *)&__p, "LineMatchingConfig.disable_consistency_pruning", v12, "don't apply pair-based pruning of matches (just return original candidate set)");
  __p = (void *)nullsub_1(a2);
  v13 = sub_20EA9DB90((double *)(a1 + 72));
  sub_20E8B2F9C((uint64_t *)&__p, "LineMatchingConfig.on_axis_endpoint_stddev", v13, "Scale for endpoint movement in the on-axis direction (in pixels; disabled if <= 0.0).  If after scaling, endpoint mo"
    "tion is greater than 1.0 for both endpoints, the segment match is rejected.");
  __p = (void *)nullsub_1(a2);
  v14 = sub_20EA9DB90((double *)(a1 + 80));
  return sub_20E8B2F9C((uint64_t *)&__p, "LineMatchingConfig.off_axis_endpoint_stddev", v14, "Scale for endpoint movement in the off-axis direction (in pixels; disabled if <= 0.0).  If after scaling, end"
           "point motion is greater than 1.0 for both endpoints, the segment match is rejected.");
}

void sub_20F41C698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  sub_20E869298(v15);
  _Unwind_Resume(a1);
}

uint64_t *sub_20F41C71C(uint64_t *a1, uint64_t a2, uint64_t a3, char a4, int a5, int a6)
{
  uint64_t v12;
  uint64_t v13;

  *a1 = 0;
  a1[1] = (uint64_t)sub_20F41EF34;
  v12 = operator new();
  sub_20F41F7D4(v12, a2, a3, a4, a5, a6);
  v13 = *a1;
  *a1 = v12;
  if (v13)
    ((void (*)(void))a1[1])();
  a1[1] = (uint64_t)sub_20F41EF34;
  return a1;
}

void sub_20F41C7C4(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  MEMORY[0x212BC6398](v2, 0x1020C402164EE68);
  v4 = *v1;
  *v1 = 0;
  if (v4)
    ((void (*)(void))v1[1])();
  _Unwind_Resume(a1);
}

void sub_20F41C808(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  double *exception;
  _OWORD v19[3];
  _OWORD v20[2];
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  _BYTE v25[296];

  if (!*a1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FrameDownsampleNodeGroup/src/FrameDownsampler.cpp", 354, (uint64_t)"pimpl_", 6, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  sub_20F41CA14(a1, a2, (uint64_t)v19);
  if (!v25[288])
  {
    exception = (double *)__cxa_allocate_exception(0x28uLL);
    *(_DWORD *)exception = 2;
    sub_20E8610C0((_QWORD *)exception + 1, "The input frame has expired when downsampling the image");
    exception[4] = *(double *)(a2 + 112) + *(double *)(a2 + 120);
    __cxa_throw(exception, (struct type_info *)&unk_24C9B3130, (void (*)(void *))sub_20F41D5EC);
  }
  v6 = v20[0];
  *(_OWORD *)(a3 + 32) = v19[2];
  *(_OWORD *)(a3 + 48) = v6;
  *(_OWORD *)(a3 + 57) = *(_OWORD *)((char *)v20 + 9);
  v7 = v19[1];
  *(_OWORD *)a3 = v19[0];
  *(_OWORD *)(a3 + 16) = v7;
  v8 = v22;
  *(_QWORD *)(a3 + 80) = v21;
  *(_QWORD *)(a3 + 88) = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = v24;
  *(_QWORD *)(a3 + 96) = v23;
  *(_QWORD *)(a3 + 104) = v11;
  if (!v11)
  {
    memcpy((void *)(a3 + 112), v25, 0x120uLL);
    v15 = v22;
    if (!v22)
      return;
    goto LABEL_17;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldxr(v12);
  while (__stxr(v13 + 1, v12));
  memcpy((void *)(a3 + 112), v25, 0x120uLL);
  do
    v14 = __ldaxr(v12);
  while (__stlxr(v14 - 1, v12));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  v15 = v22;
  if (v22)
  {
LABEL_17:
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20F41C9E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E9AE81C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F41C9F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  void *v10;

  __cxa_free_exception(v10);
  sub_20E9AE81C((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_20F41CA14(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _OWORD *v13;
  int v14;
  int v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  __int128 v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  int v31;
  double v32;
  char v33;
  int v34;
  OpaqueVTPixelTransferSession **v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  vImage_Flags v57;
  vImagePixelCount v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  BOOL v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  double *exception;
  double *v103;
  double v104;
  __int128 v105;
  __int128 v106;
  _BYTE v107[48];
  _BYTE v108[25];
  __int128 v109;
  __int128 v110;
  _OWORD v111[18];
  vImage_Buffer dest;
  __int128 v113;
  _OWORD v114[2];
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  uint64_t (**v119)();
  uint64_t v120;
  std::__shared_weak_count *v121;
  vImage_Buffer src;
  __int128 v123;
  _OWORD v124[2];
  __int128 v125;
  __int128 v126;
  uint64_t (**v127)();
  uint64_t v128;
  std::__shared_weak_count *v129;
  _DWORD v130[2];
  uint64_t v131;
  std::__shared_weak_count *v132;
  char v133;
  double v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;
  uint64_t v142;

  v142 = *MEMORY[0x24BDAC8D0];
  v5 = *a1;
  if (*a1)
  {
    if (!*(_BYTE *)(v5 + 24))
      goto LABEL_18;
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FrameDownsampleNodeGroup/src/FrameDownsampler.cpp", 342, (uint64_t)"pimpl_", 6, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v5 = *a1;
    if (!*(_BYTE *)(*a1 + 24))
    {
LABEL_18:
      v13 = (_OWORD *)(a2 + 112);
      v134 = *(double *)(a2 + 112) + *(double *)(a2 + 120);
      v136 = 0;
      v137 = 0;
      v135 = 0;
      v138 = 733220960;
      kdebug_trace();
      if (*(_BYTE *)(v5 + 12) && *(_BYTE *)(v5 + 20))
      {
        if (*(_DWORD *)(v5 + 8) <= *(_DWORD *)(a2 + 24))
          goto LABEL_24;
      }
      else
      {
        v14 = *(_DWORD *)(a2 + 24);
        *(_DWORD *)(v5 + 8) = v14;
        *(_BYTE *)(v5 + 12) = 1;
        *(_DWORD *)(v5 + 16) = *(_QWORD *)(a2 + 40);
        *(_BYTE *)(v5 + 20) = 1;
        if (v14 <= *(_DWORD *)(a2 + 24))
          goto LABEL_24;
      }
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FrameDownsampleNodeGroup/src/FrameDownsampler.cpp", 209, (uint64_t)"*output_frame_width_ <= static_cast<int32_t>(src_frame.image.width)", 67, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_121;
      }
LABEL_24:
      v15 = *(_DWORD *)(v5 + 16);
      v16 = *(_QWORD *)(a2 + 40);
      if (v15 > (int)v16)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FrameDownsampleNodeGroup/src/FrameDownsampler.cpp", 211, (uint64_t)"*output_frame_height_ <= static_cast<int32_t>(src_frame.image.height)", 69, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_121;
        }
        v16 = *(_QWORD *)(a2 + 40);
        v15 = *(_DWORD *)(v5 + 16);
      }
      if (sub_20F41E234(*(_QWORD *)(a2 + 24), v16, *(_DWORD *)(v5 + 8), v15)
        || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FrameDownsampleNodeGroup/src/FrameDownsampler.cpp", 215, (uint64_t)"CheckFrameDownSamplerAspectRatio( src_frame.image.width, src_frame.image.height, static_cast<size_t>(*output_frame_width_), static_cast<size_t>(*output_frame_height_))", 167, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        sub_20F41F074((uint64_t)&v131, v5, a2);
        v18 = *(double *)(a2 + 128);
        v17 = *(double *)(a2 + 136);
        v20 = *(double *)(a2 + 144);
        v19 = *(double *)(a2 + 152);
        v22 = *(double *)(a2 + 160);
        v21 = *(double *)(a2 + 168);
        v23 = *(_OWORD *)(a2 + 176);
        v141 = *(_QWORD *)(a2 + 192);
        v24 = *(double *)(a2 + 200);
        v25 = *(double *)(a2 + 208);
        v26 = *(double *)(a2 + 216);
        v27 = *(double *)(a2 + 224);
        v28 = *(double *)(a2 + 232);
        v29 = *(double *)(a2 + 240);
        v139 = *(_OWORD *)(a2 + 248);
        v140 = v23;
        v30 = *(double *)(a2 + 264);
        v31 = *(unsigned __int8 *)(a2 + 272);
        v130[0] = *(_DWORD *)(a2 + 273);
        *(_DWORD *)((char *)v130 + 3) = *(_DWORD *)(a2 + 276);
        *(double *)&v106 = v22;
        *((double *)&v106 + 1) = v21;
        *(double *)&v105 = v20;
        *((double *)&v105 + 1) = v19;
        v104 = v17;
        if (v31)
        {
          v32 = (double)*(int *)(v5 + 8) / (double)*(unint64_t *)(a2 + 24);
          v24 = v18 * v32;
          v25 = v17 * v32;
          v26 = v20 * v32;
          v27 = v19 * v32;
          v28 = v22 * v32;
          v29 = v21 * v32;
          v139 = 0uLL;
          v140 = *(_OWORD *)(a2 + 176);
          v141 = *(_QWORD *)(a2 + 192);
          v33 = 1;
          v30 = 1.0;
          v34 = *(_DWORD *)(v5 + 32);
          if (v34 != 1)
            goto LABEL_31;
        }
        else
        {
          v33 = 0;
          v34 = *(_DWORD *)(v5 + 32);
          if (v34 != 1)
          {
LABEL_31:
            if (v34)
            {
              sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FrameDownsampleNodeGroup/src/FrameDownsampler.cpp", 163, (uint64_t)"", 0, (uint64_t)"Unsupported mode", 16, (void (*)(void **))sub_21023DDB0);
            }
            else
            {
              v35 = *(OpaqueVTPixelTransferSession ***)(v5 + 48);
              if (v35)
                goto LABEL_35;
              if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FrameDownsampleNodeGroup/src/FrameDownsampler.cpp", 106, (uint64_t)"pixel_transfer_session_", 23, (uint64_t)"Failed to construct apple_util::PixelBufferTransferSession", 58, (void (*)(void **))sub_21023DDB0))
              {
                v35 = *(OpaqueVTPixelTransferSession ***)(v5 + 48);
LABEL_35:
                v36 = *(_OWORD *)(a2 + 48);
                v123 = *(_OWORD *)(a2 + 32);
                v124[0] = v36;
                *(_OWORD *)((char *)v124 + 9) = *(_OWORD *)(a2 + 57);
                v37 = *(_OWORD *)(a2 + 16);
                *(_OWORD *)&src.data = *(_OWORD *)a2;
                *(_OWORD *)&src.width = v37;
                v38 = *(_QWORD *)(a2 + 88);
                *(_QWORD *)&v125 = *(_QWORD *)(a2 + 80);
                *((_QWORD *)&v125 + 1) = v38;
                if (v38)
                {
                  v39 = (unint64_t *)(v38 + 8);
                  do
                    v40 = __ldxr(v39);
                  while (__stxr(v40 + 1, v39));
                }
                v41 = *(_QWORD *)(a2 + 96);
                v42 = *(std::__shared_weak_count **)(a2 + 104);
                *(_QWORD *)&v126 = v41;
                *((_QWORD *)&v126 + 1) = v42;
                if (v42)
                {
                  p_shared_owners = (unint64_t *)&v42->__shared_owners_;
                  do
                    v44 = __ldxr(p_shared_owners);
                  while (__stxr(v44 + 1, p_shared_owners));
                  do
                    v45 = __ldxr(p_shared_owners);
                  while (__stxr(v45 + 1, p_shared_owners));
                }
                v127 = &off_24CA1A9A0;
                if (v41)
                {
                  v47 = *(_QWORD *)(v41 + 8);
                  v46 = *(std::__shared_weak_count **)(v41 + 16);
                  v128 = v47;
                  v129 = v46;
                  if (v46)
                  {
                    v48 = (unint64_t *)&v46->__shared_owners_;
                    do
                      v49 = __ldxr(v48);
                    while (__stxr(v49 + 1, v48));
                  }
                  if (!v42)
                  {
LABEL_57:
                    v61 = v131;
                    v117 = v131;
                    v118 = v132;
                    if (v132)
                    {
                      v62 = (unint64_t *)&v132->__shared_owners_;
                      do
                        v63 = __ldxr(v62);
                      while (__stxr(v63 + 1, v62));
                    }
                    v119 = &off_24CA1A9A0;
                    if (v61)
                    {
                      v65 = *(_QWORD *)(v61 + 8);
                      v64 = *(std::__shared_weak_count **)(v61 + 16);
                      v120 = v65;
                      v121 = v64;
                      if (v64)
                      {
                        v66 = (unint64_t *)&v64->__shared_owners_;
                        do
                          v67 = __ldxr(v66);
                        while (__stxr(v67 + 1, v66));
                      }
                    }
                    else
                    {
                      v120 = 0;
                      v121 = 0;
                    }
                    v68 = sub_210106494(v35, (uint64_t)&v127, (uint64_t)&v119);
                    v119 = &off_24CA1A9A0;
                    v69 = v121;
                    if (v121)
                    {
                      v70 = (unint64_t *)&v121->__shared_owners_;
                      do
                        v71 = __ldaxr(v70);
                      while (__stlxr(v71 - 1, v70));
                      if (!v71)
                      {
                        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                        std::__shared_weak_count::__release_weak(v69);
                      }
                    }
                    if (v118)
                    {
                      v72 = &v118->__shared_owners_;
                      do
                        v73 = __ldaxr((unint64_t *)v72);
                      while (__stlxr(v73 - 1, (unint64_t *)v72));
                      if (!v73)
                      {
                        ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                        std::__shared_weak_count::__release_weak(v118);
                      }
                    }
                    v127 = &off_24CA1A9A0;
                    v74 = v129;
                    if (v129)
                    {
                      v75 = (unint64_t *)&v129->__shared_owners_;
                      do
                        v76 = __ldaxr(v75);
                      while (__stlxr(v76 - 1, v75));
                      if (!v76)
                      {
                        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                        std::__shared_weak_count::__release_weak(v74);
                      }
                    }
                    v77 = (std::__shared_weak_count *)*((_QWORD *)&v126 + 1);
                    if (*((_QWORD *)&v126 + 1))
                    {
                      v78 = (unint64_t *)(*((_QWORD *)&v126 + 1) + 8);
                      do
                        v79 = __ldaxr(v78);
                      while (__stlxr(v79 - 1, v78));
                      if (!v79)
                      {
                        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                        std::__shared_weak_count::__release_weak(v77);
                      }
                    }
                    v80 = (std::__shared_weak_count *)*((_QWORD *)&v125 + 1);
                    if (*((_QWORD *)&v125 + 1))
                    {
                      v81 = (unint64_t *)(*((_QWORD *)&v125 + 1) + 8);
                      do
                        v82 = __ldaxr(v81);
                      while (__stlxr(v82 - 1, v81));
                      if (!v82)
                      {
                        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                        std::__shared_weak_count::__release_weak(v80);
                      }
                    }
                    if (!v68)
                    {
                      exception = (double *)__cxa_allocate_exception(0x28uLL);
                      *(_DWORD *)exception = 0;
                      sub_20E8610C0((_QWORD *)exception + 1, "PixelBufferTransferSession::Transfer failed.");
                      exception[4] = *(double *)(a2 + 112) + *(double *)(a2 + 120);
                      __cxa_throw(exception, (struct type_info *)&unk_24C9B3130, (void (*)(void *))sub_20F41D5EC);
                    }
                    sub_210107D4C(&v131, 1, (uint64_t)&dest);
                    v83 = *(_QWORD *)(a2 + 280);
                    v84 = *(_DWORD *)(a2 + 352);
                    v85 = *(_QWORD *)(a2 + 360);
                    *(_OWORD *)&v107[32] = v113;
                    *(_OWORD *)v108 = v114[0];
                    *(_OWORD *)&v108[9] = *(_OWORD *)((char *)v114 + 9);
                    *(vImage_Buffer *)v107 = dest;
                    v86 = v115;
                    v115 = 0uLL;
                    v109 = v86;
                    v110 = v116;
                    v111[0] = *v13;
                    *(double *)&v111[1] = v18;
                    *((double *)&v111[1] + 1) = v104;
                    v111[2] = v105;
                    v111[3] = v106;
                    *(_QWORD *)&v111[5] = v141;
                    v111[4] = v140;
                    *((double *)&v111[5] + 1) = v24;
                    *(double *)&v111[6] = v25;
                    *((double *)&v111[6] + 1) = v26;
                    *(double *)&v111[7] = v27;
                    *((double *)&v111[7] + 1) = v28;
                    *(double *)&v111[8] = v29;
                    *(_OWORD *)((char *)&v111[8] + 8) = v139;
                    *((double *)&v111[9] + 1) = v30;
                    LOBYTE(v111[10]) = v33;
                    *(_DWORD *)((char *)&v111[10] + 1) = v130[0];
                    DWORD1(v111[10]) = *(_DWORD *)((char *)v130 + 3);
                    *((_QWORD *)&v111[10] + 1) = v83;
                    v87 = *(_OWORD *)(a2 + 304);
                    v111[11] = *(_OWORD *)(a2 + 288);
                    v111[12] = v87;
                    v88 = *(_OWORD *)(a2 + 336);
                    v111[13] = *(_OWORD *)(a2 + 320);
                    v111[14] = v88;
                    LODWORD(v111[15]) = v84;
                    *((_QWORD *)&v111[15] + 1) = v85;
                    v89 = *(_OWORD *)(a2 + 384);
                    v111[16] = *(_OWORD *)(a2 + 368);
                    v111[17] = v89;
                    if (!v133)
                      goto LABEL_98;
                    goto LABEL_93;
                  }
                }
                else
                {
                  v128 = 0;
                  v129 = 0;
                  if (!v42)
                    goto LABEL_57;
                }
                v59 = (unint64_t *)&v42->__shared_owners_;
                do
                  v60 = __ldaxr(v59);
                while (__stlxr(v60 - 1, v59));
                if (!v60)
                {
                  ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                  std::__shared_weak_count::__release_weak(v42);
                }
                goto LABEL_57;
              }
            }
            abort();
          }
        }
        sub_210107D4C(&v131, 1, (uint64_t)&src);
        v50 = *(_QWORD *)(a2 + 280);
        v51 = *(_DWORD *)(a2 + 352);
        v52 = *(_QWORD *)(a2 + 360);
        *(_OWORD *)&v107[32] = v123;
        *(_OWORD *)v108 = v124[0];
        *(_OWORD *)&v108[9] = *(_OWORD *)((char *)v124 + 9);
        *(vImage_Buffer *)v107 = src;
        v53 = v125;
        v125 = 0uLL;
        v109 = v53;
        v110 = v126;
        v111[0] = *v13;
        *(double *)&v111[1] = v18;
        *((double *)&v111[1] + 1) = v104;
        v111[2] = v105;
        v111[3] = v106;
        *(_QWORD *)&v111[5] = v141;
        v111[4] = v140;
        *((double *)&v111[5] + 1) = v24;
        *(double *)&v111[6] = v25;
        *((double *)&v111[6] + 1) = v26;
        *(double *)&v111[7] = v27;
        *((double *)&v111[7] + 1) = v28;
        *(double *)&v111[8] = v29;
        *(_OWORD *)((char *)&v111[8] + 8) = v139;
        *((double *)&v111[9] + 1) = v30;
        LOBYTE(v111[10]) = v33;
        *(_DWORD *)((char *)&v111[10] + 1) = v130[0];
        DWORD1(v111[10]) = *(_DWORD *)((char *)v130 + 3);
        *((_QWORD *)&v111[10] + 1) = v50;
        v54 = *(_OWORD *)(a2 + 304);
        v111[11] = *(_OWORD *)(a2 + 288);
        v111[12] = v54;
        v55 = *(_OWORD *)(a2 + 336);
        v111[13] = *(_OWORD *)(a2 + 320);
        v111[14] = v55;
        LODWORD(v111[15]) = v51;
        *((_QWORD *)&v111[15] + 1) = v52;
        v56 = *(_OWORD *)(a2 + 384);
        v111[16] = *(_OWORD *)(a2 + 368);
        v111[17] = v56;
        v57 = *(_DWORD *)(v5 + 4);
        v58 = *(_QWORD *)(a2 + 40);
        src.data = *(void **)(a2 + 80);
        src.height = v58;
        *(_OWORD *)&src.width = *(_OWORD *)(a2 + 24);
        dest.data = (void *)v53;
        dest.height = *((_QWORD *)&v123 + 1);
        *(_OWORD *)&dest.width = *(_OWORD *)&v107[24];
        if (vImageScale_Planar8(&src, &dest, 0, v57))
        {
          v103 = (double *)__cxa_allocate_exception(0x28uLL);
          *(_DWORD *)v103 = 0;
          sub_20E8610C0((_QWORD *)v103 + 1, "Error in vImageScale_Planar8");
          v103[4] = *(double *)(a2 + 112) + *(double *)(a2 + 120);
          __cxa_throw(v103, (struct type_info *)&unk_24C9B3130, (void (*)(void *))sub_20F41D5EC);
        }
        if (!v133)
          goto LABEL_98;
LABEL_93:
        v90 = v132;
        if (v132)
        {
          v91 = (unint64_t *)&v132->__shared_owners_;
          do
            v92 = __ldaxr(v91);
          while (__stlxr(v92 - 1, v91));
          if (!v92)
          {
            ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
            std::__shared_weak_count::__release_weak(v90);
          }
        }
LABEL_98:
        kdebug_trace();
        goto LABEL_99;
      }
LABEL_121:
      abort();
    }
  }
  if (!*(_BYTE *)(v5 + 12)
    || !*(_BYTE *)(v5 + 20)
    || *(_DWORD *)(v5 + 8) != *(_DWORD *)(a2 + 24)
    || *(_DWORD *)(v5 + 16) != *(_DWORD *)(a2 + 40))
  {
    kdebug_trace();
    goto LABEL_18;
  }
  *(_OWORD *)&v107[32] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)v108 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v108[9] = *(_OWORD *)(a2 + 57);
  *(_OWORD *)v107 = *(_OWORD *)a2;
  *(_OWORD *)&v107[16] = *(_OWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)&v109 = *(_QWORD *)(a2 + 80);
  *((_QWORD *)&v109 + 1) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)&v110 = *(_QWORD *)(a2 + 96);
  *((_QWORD *)&v110 + 1) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  memcpy(v111, (const void *)(a2 + 112), sizeof(v111));
LABEL_99:
  if (*(_BYTE *)(a2 + 72) && sub_210215748((double *)(a2 + 64)))
  {
    if (!*(_BYTE *)(a2 + 72))
      sub_20E866B34();
    kdebug_trace();
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 400) = 0;
    v93 = (std::__shared_weak_count *)*((_QWORD *)&v110 + 1);
    if (!*((_QWORD *)&v110 + 1))
      goto LABEL_115;
LABEL_111:
    v98 = (unint64_t *)&v93->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
    goto LABEL_115;
  }
  *(_OWORD *)(a3 + 32) = *(_OWORD *)&v107[32];
  *(_OWORD *)(a3 + 48) = *(_OWORD *)v108;
  *(_OWORD *)(a3 + 57) = *(_OWORD *)&v108[9];
  *(_OWORD *)a3 = *(_OWORD *)v107;
  *(_OWORD *)(a3 + 16) = *(_OWORD *)&v107[16];
  *(_OWORD *)(a3 + 80) = v109;
  if (*((_QWORD *)&v109 + 1))
  {
    v94 = (unint64_t *)(*((_QWORD *)&v109 + 1) + 8);
    do
      v95 = __ldxr(v94);
    while (__stxr(v95 + 1, v94));
  }
  *(_OWORD *)(a3 + 96) = v110;
  if (*((_QWORD *)&v110 + 1))
  {
    v96 = (unint64_t *)(*((_QWORD *)&v110 + 1) + 8);
    do
      v97 = __ldxr(v96);
    while (__stxr(v97 + 1, v96));
  }
  memcpy((void *)(a3 + 112), v111, 0x120uLL);
  *(_BYTE *)(a3 + 400) = 1;
  v93 = (std::__shared_weak_count *)*((_QWORD *)&v110 + 1);
  if (*((_QWORD *)&v110 + 1))
    goto LABEL_111;
LABEL_115:
  if (*((_QWORD *)&v109 + 1))
  {
    v100 = (unint64_t *)(*((_QWORD *)&v109 + 1) + 8);
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v109 + 1) + 16))(*((_QWORD *)&v109 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v109 + 1));
    }
  }
}

void sub_20F41D508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  uint64_t v8;
  va_list va;

  va_start(va, a7);
  __cxa_free_exception(v7);
  sub_20E8E5AE4((uint64_t)va);
  sub_20E869AA8((uint64_t)&STACK[0x2F0]);
  sub_20E8E69C4(v8 - 248);
  _Unwind_Resume(a1);
}

void sub_20F41D5AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8E69C4(v1 - 248);
  _Unwind_Resume(a1);
}

void sub_20F41D5C0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_20E860DA4(exception_object);
}

void sub_20F41D5D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8E69C4(v1 - 248);
  _Unwind_Resume(a1);
}

uint64_t sub_20F41D5EC(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

void sub_20F41D62C(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  int v7;
  int v8;
  uint64_t v9;
  float64x2_t v10;
  float64x2_t v11;
  __int128 v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  double v17;
  int v18;
  int v19;
  double v20;
  char v21;
  __int128 v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  _QWORD *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t *v67;
  unint64_t v68;
  uint64_t *v69;
  unint64_t v70;
  uint64_t *v71;
  std::__shared_weak_count *v72;
  uint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  _BYTE v116[25];
  __int128 v117;
  __int128 v118;
  _OWORD v119[18];
  __int128 v120;
  __int128 v121;
  __int128 v122;
  _OWORD v123[2];
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  uint64_t (**v128)();
  _QWORD *v129;
  std::__shared_weak_count *v130;
  uint64_t (**v131)();
  _QWORD *v132;
  std::__shared_weak_count *v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  _OWORD v137[2];
  uint64_t v138;
  std::__shared_weak_count *v139;
  uint64_t v140;
  std::__shared_weak_count *v141;
  uint64_t (**v142)();
  uint64_t *v143;
  std::__shared_weak_count *v144;
  _DWORD v145[2];
  uint64_t v146;
  std::__shared_weak_count *v147;
  char v148;
  double v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  __int128 v154;
  __int128 v155;
  uint64_t v156;
  uint64_t v157;

  v157 = *MEMORY[0x24BDAC8D0];
  v5 = *a1;
  if (!*a1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FrameDownsampleNodeGroup/src/FrameDownsampler.cpp", 367, (uint64_t)"pimpl_", 6, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v5 = *a1;
  }
  v149 = *(double *)(a2 + 112) + *(double *)(a2 + 120);
  v151 = 0;
  v152 = 0;
  v150 = 0;
  v153 = 733220960;
  kdebug_trace();
  if (*(_BYTE *)(v5 + 12) && *(_BYTE *)(v5 + 20))
  {
    if (*(_DWORD *)(v5 + 8) <= *(_DWORD *)(a2 + 24))
      goto LABEL_10;
  }
  else
  {
    v7 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(v5 + 8) = v7;
    *(_BYTE *)(v5 + 12) = 1;
    *(_DWORD *)(v5 + 16) = *(_QWORD *)(a2 + 40);
    *(_BYTE *)(v5 + 20) = 1;
    if (v7 <= *(_DWORD *)(a2 + 24))
      goto LABEL_10;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FrameDownsampleNodeGroup/src/FrameDownsampler.cpp", 209, (uint64_t)"*output_frame_width_ <= static_cast<int32_t>(src_frame.image.width)", 67, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_156;
  }
LABEL_10:
  v8 = *(_DWORD *)(v5 + 16);
  v9 = *(_QWORD *)(a2 + 40);
  if (v8 > (int)v9)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FrameDownsampleNodeGroup/src/FrameDownsampler.cpp", 211, (uint64_t)"*output_frame_height_ <= static_cast<int32_t>(src_frame.image.height)", 69, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_156;
    }
    v9 = *(_QWORD *)(a2 + 40);
    v8 = *(_DWORD *)(v5 + 16);
  }
  if (!sub_20F41E234(*(_QWORD *)(a2 + 24), v9, *(_DWORD *)(v5 + 8), v8)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FrameDownsampleNodeGroup/src/FrameDownsampler.cpp", 215, (uint64_t)"CheckFrameDownSamplerAspectRatio( src_frame.image.width, src_frame.image.height, static_cast<size_t>(*output_frame_width_), static_cast<size_t>(*output_frame_height_))", 167, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_156:
    abort();
  }
  sub_20F41F074((uint64_t)&v146, v5, a2);
  v10 = *(float64x2_t *)(a2 + 128);
  v11 = *(float64x2_t *)(a2 + 160);
  v12 = *(_OWORD *)(a2 + 176);
  v156 = *(_QWORD *)(a2 + 192);
  v13 = *(float64x2_t *)(a2 + 200);
  v14 = *(float64x2_t *)(a2 + 216);
  v15 = *(float64x2_t *)(a2 + 144);
  v16 = *(float64x2_t *)(a2 + 232);
  v154 = *(_OWORD *)(a2 + 248);
  v155 = v12;
  v17 = *(double *)(a2 + 264);
  v18 = *(unsigned __int8 *)(a2 + 272);
  v19 = *(_DWORD *)(a2 + 273);
  *(_DWORD *)((char *)v145 + 3) = *(_DWORD *)(a2 + 276);
  v145[0] = v19;
  v111 = v11;
  v112 = v10;
  v110 = v15;
  if (v18)
  {
    v20 = (double)*(int *)(v5 + 8) / (double)*(unint64_t *)(a2 + 24);
    v108 = vmulq_n_f64(v15, v20);
    v109 = vmulq_n_f64(v10, v20);
    v107 = vmulq_n_f64(v11, v20);
    v154 = 0uLL;
    v155 = *(_OWORD *)(a2 + 176);
    v156 = *(_QWORD *)(a2 + 192);
    v17 = 1.0;
    v21 = 1;
  }
  else
  {
    v107 = v16;
    v108 = v14;
    v109 = v13;
    v21 = 0;
  }
  v22 = *(_OWORD *)(a2 + 48);
  v136 = *(_OWORD *)(a2 + 32);
  v137[0] = v22;
  *(_OWORD *)((char *)v137 + 9) = *(_OWORD *)(a2 + 57);
  v23 = *(_OWORD *)(a2 + 16);
  v134 = *(_OWORD *)a2;
  v135 = v23;
  v24 = *(std::__shared_weak_count **)(a2 + 88);
  v138 = *(_QWORD *)(a2 + 80);
  v139 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldxr(p_shared_owners);
    while (__stxr(v26 + 1, p_shared_owners));
  }
  v27 = *(_QWORD *)(a2 + 96);
  v28 = *(std::__shared_weak_count **)(a2 + 104);
  v140 = v27;
  v141 = v28;
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
    do
      v31 = __ldxr(v29);
    while (__stxr(v31 + 1, v29));
  }
  *(_QWORD *)&v120 = &off_24CA1A9A0;
  if (!v27)
  {
    *((_QWORD *)&v120 + 1) = 0;
    *(_QWORD *)&v121 = 0;
    if (!v28)
      goto LABEL_36;
    goto LABEL_32;
  }
  v33 = *(_QWORD *)(v27 + 8);
  v32 = *(_QWORD *)(v27 + 16);
  *((_QWORD *)&v120 + 1) = v33;
  *(_QWORD *)&v121 = v32;
  if (v32)
  {
    v34 = (unint64_t *)(v32 + 8);
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  if (v28)
  {
LABEL_32:
    v36 = (unint64_t *)&v28->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
LABEL_36:
  v38 = (uint64_t *)*((_QWORD *)&v120 + 1);
  v143 = (uint64_t *)*((_QWORD *)&v120 + 1);
  v144 = (std::__shared_weak_count *)v121;
  if ((_QWORD)v121)
  {
    v39 = (unint64_t *)(v121 + 8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
    v38 = v143;
  }
  v142 = &off_24CA1A9C0;
  if (v38)
  {
    v42 = *v38;
    v41 = (std::__shared_weak_count *)v38[1];
    if (!v41)
      goto LABEL_46;
    v43 = (unint64_t *)&v41->__shared_owners_;
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
    do
      v45 = __ldaxr(v43);
    while (__stlxr(v45 - 1, v43));
    if (v45)
    {
LABEL_46:
      if (!v42)
        goto LABEL_48;
      goto LABEL_47;
    }
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
    if (v42)
LABEL_47:
      sub_2101613B8((uint64_t)v143);
  }
LABEL_48:
  v46 = v146;
  v126 = v146;
  v127 = v147;
  if (v147)
  {
    v47 = (unint64_t *)&v147->__shared_owners_;
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
  }
  v128 = &off_24CA1A9A0;
  if (!v46)
  {
    v49 = 0;
    v129 = 0;
    v130 = 0;
LABEL_60:
    v132 = v49;
    v133 = 0;
    v131 = &off_24CA1A9E0;
    if (!v49)
      goto LABEL_68;
LABEL_61:
    v55 = *v49;
    v54 = (std::__shared_weak_count *)v49[1];
    if (!v54)
      goto LABEL_66;
    v56 = (unint64_t *)&v54->__shared_owners_;
    do
      v57 = __ldxr(v56);
    while (__stxr(v57 + 1, v56));
    do
      v58 = __ldaxr(v56);
    while (__stlxr(v58 - 1, v56));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
      if (!v55)
        goto LABEL_68;
    }
    else
    {
LABEL_66:
      if (!v55)
        goto LABEL_68;
    }
    sub_2101614A8((uint64_t)v132);
    goto LABEL_68;
  }
  v49 = *(_QWORD **)(v46 + 8);
  v50 = *(std::__shared_weak_count **)(v46 + 16);
  v129 = v49;
  v130 = v50;
  if (!v50)
    goto LABEL_60;
  v51 = (unint64_t *)&v50->__shared_owners_;
  do
    v52 = __ldxr(v51);
  while (__stxr(v52 + 1, v51));
  v132 = v49;
  v133 = v50;
  do
    v53 = __ldxr(v51);
  while (__stxr(v53 + 1, v51));
  v49 = v132;
  v131 = &off_24CA1A9E0;
  if (v132)
    goto LABEL_61;
LABEL_68:
  sub_21015EE68((uint64_t)&v142, (uint64_t)&v131);
  if (v132)
  {
    v60 = *v132;
    v59 = (std::__shared_weak_count *)v132[1];
    if (v59)
    {
      v61 = (unint64_t *)&v59->__shared_owners_;
      do
        v62 = __ldxr(v61);
      while (__stxr(v62 + 1, v61));
      do
        v63 = __ldaxr(v61);
      while (__stlxr(v63 - 1, v61));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
        if (!v60)
          goto LABEL_76;
        goto LABEL_75;
      }
    }
    if (v60)
LABEL_75:
      sub_210161684((uint64_t)v132);
  }
LABEL_76:
  v131 = &off_24CA1A9A0;
  v64 = v133;
  if (v133)
  {
    v65 = (unint64_t *)&v133->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  v128 = &off_24CA1A9A0;
  if (v130)
  {
    v67 = &v130->__shared_owners_;
    do
      v68 = __ldaxr((unint64_t *)v67);
    while (__stlxr(v68 - 1, (unint64_t *)v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  if (!v127)
    goto LABEL_90;
  v69 = &v127->__shared_owners_;
  do
    v70 = __ldaxr((unint64_t *)v69);
  while (__stlxr(v70 - 1, (unint64_t *)v69));
  if (!v70)
  {
    ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
    std::__shared_weak_count::__release_weak(v127);
    v71 = v143;
    if (!v143)
      goto LABEL_98;
  }
  else
  {
LABEL_90:
    v71 = v143;
    if (!v143)
      goto LABEL_98;
  }
  v73 = *v71;
  v72 = (std::__shared_weak_count *)v71[1];
  if (v72)
  {
    v74 = (unint64_t *)&v72->__shared_owners_;
    do
      v75 = __ldxr(v74);
    while (__stxr(v75 + 1, v74));
    do
      v76 = __ldaxr(v74);
    while (__stlxr(v76 - 1, v74));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
      if (!v73)
        goto LABEL_98;
      goto LABEL_97;
    }
  }
  if (v73)
LABEL_97:
    sub_210161594((uint64_t)v143);
LABEL_98:
  v142 = &off_24CA1A9A0;
  v77 = v144;
  if (v144)
  {
    v78 = (unint64_t *)&v144->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  *(_QWORD *)&v120 = &off_24CA1A9A0;
  if ((_QWORD)v121)
  {
    v80 = (unint64_t *)(v121 + 8);
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v121 + 16))(v121);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v121);
    }
  }
  v82 = v141;
  if (v141)
  {
    v83 = (unint64_t *)&v141->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = v139;
  if (v139)
  {
    v86 = (unint64_t *)&v139->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  sub_210107D4C(&v146, 1, (uint64_t)&v120);
  v88 = *(_QWORD *)(a2 + 280);
  v89 = *(_DWORD *)(a2 + 352);
  v90 = *(_QWORD *)(a2 + 360);
  v115 = v122;
  *(_OWORD *)v116 = v123[0];
  *(_OWORD *)&v116[9] = *(_OWORD *)((char *)v123 + 9);
  v113 = v120;
  v114 = v121;
  v91 = v124;
  v124 = 0uLL;
  v117 = v91;
  v118 = v125;
  v119[0] = *(_OWORD *)(a2 + 112);
  v119[1] = v112;
  v119[2] = v110;
  v119[3] = v111;
  v119[4] = v155;
  *(_QWORD *)&v119[5] = v156;
  *(float64x2_t *)((char *)&v119[5] + 8) = v109;
  *(float64x2_t *)((char *)&v119[6] + 8) = v108;
  *(float64x2_t *)((char *)&v119[7] + 8) = v107;
  *(_OWORD *)((char *)&v119[8] + 8) = v154;
  *((double *)&v119[9] + 1) = v17;
  LOBYTE(v119[10]) = v21;
  *(_DWORD *)((char *)&v119[10] + 1) = v145[0];
  DWORD1(v119[10]) = *(_DWORD *)((char *)v145 + 3);
  *((_QWORD *)&v119[10] + 1) = v88;
  v92 = *(_OWORD *)(a2 + 304);
  v119[11] = *(_OWORD *)(a2 + 288);
  v119[12] = v92;
  v93 = *(_OWORD *)(a2 + 336);
  v119[13] = *(_OWORD *)(a2 + 320);
  v119[14] = v93;
  LODWORD(v119[15]) = v89;
  *((_QWORD *)&v119[15] + 1) = v90;
  v94 = *(_OWORD *)(a2 + 384);
  v119[16] = *(_OWORD *)(a2 + 368);
  v119[17] = v94;
  if (v148)
  {
    v95 = v147;
    if (v147)
    {
      v96 = (unint64_t *)&v147->__shared_owners_;
      do
        v97 = __ldaxr(v96);
      while (__stlxr(v97 - 1, v96));
      if (!v97)
      {
        ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
        std::__shared_weak_count::__release_weak(v95);
      }
    }
  }
  kdebug_trace();
  if (*(_BYTE *)(a2 + 72) && sub_210215748((double *)(a2 + 64)))
  {
    if (!*(_BYTE *)(a2 + 72))
      sub_20E866B34();
    kdebug_trace();
    *(_BYTE *)a3 = 0;
    v98 = (std::__shared_weak_count *)*((_QWORD *)&v118 + 1);
    *(_BYTE *)(a3 + 400) = 0;
    if (!*((_QWORD *)&v118 + 1))
      goto LABEL_140;
LABEL_136:
    v103 = (unint64_t *)&v98->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
    goto LABEL_140;
  }
  *(_OWORD *)(a3 + 32) = v115;
  *(_OWORD *)(a3 + 48) = *(_OWORD *)v116;
  *(_OWORD *)(a3 + 57) = *(_OWORD *)&v116[9];
  *(_OWORD *)a3 = v113;
  *(_OWORD *)(a3 + 16) = v114;
  *(_OWORD *)(a3 + 80) = v117;
  if (*((_QWORD *)&v117 + 1))
  {
    v99 = (unint64_t *)(*((_QWORD *)&v117 + 1) + 8);
    do
      v100 = __ldxr(v99);
    while (__stxr(v100 + 1, v99));
  }
  v98 = (std::__shared_weak_count *)*((_QWORD *)&v118 + 1);
  *(_OWORD *)(a3 + 96) = v118;
  if (*((_QWORD *)&v118 + 1))
  {
    v101 = (unint64_t *)(*((_QWORD *)&v118 + 1) + 8);
    do
      v102 = __ldxr(v101);
    while (__stxr(v102 + 1, v101));
  }
  memcpy((void *)(a3 + 112), v119, 0x120uLL);
  *(_BYTE *)(a3 + 400) = 1;
  if (*((_QWORD *)&v118 + 1))
    goto LABEL_136;
LABEL_140:
  if (*((_QWORD *)&v117 + 1))
  {
    v105 = (unint64_t *)(*((_QWORD *)&v117 + 1) + 8);
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v117 + 1) + 16))(*((_QWORD *)&v117 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v117 + 1));
    }
  }
}

void sub_20F41E05C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_20E8E5AE4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F41E110(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E869AA8(v1 - 208);
  sub_20E8E69C4(v1 - 184);
  _Unwind_Resume(a1);
}

void sub_20F41E118()
{
  sub_21015CEBC(&STACK[0x288]);
  JUMPOUT(0x20F41E128);
}

void sub_20F41E1C0()
{
  __cxa_end_catch();
  JUMPOUT(0x20F41E1D8);
}

void sub_20F41E1F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8E69C4(v1 - 184);
  _Unwind_Resume(a1);
}

void sub_20F41E208(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_20E860DA4(exception_object);
}

void sub_20F41E220(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8E69C4(v1 - 184);
  _Unwind_Resume(a1);
}

BOOL sub_20F41E234(int a1, int a2, int a3, int a4)
{
  int v4;
  int v5;
  unsigned __int8 v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  size_t v15;
  void **v16;
  unint64_t v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  size_t v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  const char *v27;
  size_t v28;
  _BYTE *v29;
  int v30;
  const char *v31;
  uint64_t v32;
  const char *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  void **v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  size_t v42;
  std::__shared_weak_count_vtbl *v43;
  std::__shared_weak_count *v44;
  size_t v45;
  size_t v46;
  _QWORD *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  char v52;
  _QWORD *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *p_shared_owners;
  unint64_t v57;
  void *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  _QWORD *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  const char *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  int v102;
  const char *v103;
  unint64_t v104;
  _QWORD v105[3];
  int v106;
  const char *v107;
  int v108;
  const char *v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  void *__dst[2];
  int64_t v113;
  void *v114[2];
  _QWORD v115[3];
  const void *v116;
  uint64_t v117;
  const void *v118;
  unint64_t v119;
  void *__p;
  char v121;
  unint64_t v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  __int128 v126;
  std::__shared_weak_count *v127;
  char *v128;
  std::__shared_weak_count *v129;
  _QWORD *v130;
  __int128 v131;
  _BYTE v132[24];
  __int128 v133;
  void *v134[2];
  unint64_t v135;
  char v136;
  _QWORD v137[5];

  v137[2] = *MEMORY[0x24BDAC8D0];
  v4 = (int)((double)(a3 * a2) * 0.02);
  if (a3 * a2 - a4 * a1 >= 0)
    v5 = a3 * a2 - a4 * a1;
  else
    v5 = a4 * a1 - a3 * a2;
  if (v5 > v4)
  {
    v6 = atomic_load((unsigned __int8 *)&qword_254A68978);
    if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254A68978))
    {
      sub_21021D3D8(v132);
      sub_20E8610C0(v114, "cv3d.vio");
      sub_20E8C4068((uint64_t **)v132, (uint64_t)v114, &qword_254A68970);
      if (SHIBYTE(v115[0]) < 0)
        operator delete(v114[0]);
      __cxa_guard_release(&qword_254A68978);
    }
    v125 = qword_254A68970;
    if (**(int **)(qword_254A68970 + 56) <= 5)
    {
      v7 = *(unsigned __int8 *)(qword_254A68970 + 72);
      v8 = sub_20E8C31DC(qword_254A68970, "OSLogSurrogateAppender", 1, 0);
      v9 = v8;
      if (v7 || v8 != 0)
      {
        sub_20E863438((uint64_t)v114);
        sub_20E86A980(v115, (uint64_t)"Incompatible aspect ratio: in=[", 31);
        v11 = (_QWORD *)std::ostream::operator<<();
        sub_20E86A980(v11, (uint64_t)",", 1);
        v12 = (_QWORD *)std::ostream::operator<<();
        sub_20E86A980(v12, (uint64_t)"], out=[", 8);
        v13 = (_QWORD *)std::ostream::operator<<();
        sub_20E86A980(v13, (uint64_t)",", 1);
        v14 = (_QWORD *)std::ostream::operator<<();
        sub_20E86A980(v14, (uint64_t)"]", 1);
        if ((v123 & 0x10) != 0)
        {
          v17 = v122;
          if (v122 < v119)
          {
            v122 = v119;
            v17 = v119;
          }
          v18 = v118;
          v15 = v17 - (_QWORD)v118;
          if (v17 - (unint64_t)v118 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_69;
        }
        else
        {
          if ((v123 & 8) == 0)
          {
            v15 = 0;
            HIBYTE(v113) = 0;
            v16 = __dst;
            goto LABEL_24;
          }
          v18 = v116;
          v15 = v117 - (_QWORD)v116;
          if ((unint64_t)(v117 - (_QWORD)v116) > 0x7FFFFFFFFFFFFFF7)
LABEL_69:
            sub_20E860B7C();
        }
        if (v15 >= 0x17)
        {
          v19 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v15 | 7) != 0x17)
            v19 = v15 | 7;
          v20 = v19 + 1;
          v16 = (void **)operator new(v19 + 1);
          __dst[1] = (void *)v15;
          v113 = v20 | 0x8000000000000000;
          __dst[0] = v16;
        }
        else
        {
          HIBYTE(v113) = v15;
          v16 = __dst;
          if (!v15)
          {
LABEL_24:
            *((_BYTE *)v16 + v15) = 0;
            v105[0] = &v125;
            v105[1] = std::chrono::steady_clock::now().__d_.__rep_;
            v105[2] = std::chrono::system_clock::now().__d_.__rep_;
            v106 = 5;
            v107 = "unknown file";
            v108 = 394;
            v110 = 0;
            v111 = 0;
            v109 = "unknown function";
            if (v113 >= 0)
              v21 = (const char *)__dst;
            else
              v21 = (const char *)__dst[0];
            v22 = *(_QWORD *)v105[0];
            v23 = (const char *)(*(_QWORD *)v105[0] + 16);
            v103 = v23;
            if (*(char *)(*(_QWORD *)v105[0] + 39) < 0)
            {
              v23 = *(const char **)(v22 + 16);
              v24 = *(_QWORD *)(v22 + 24);
              v104 = v9;
              v26 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v26 & 1) != 0)
                goto LABEL_31;
            }
            else
            {
              v24 = *(unsigned __int8 *)(*(_QWORD *)v105[0] + 39);
              v104 = v9;
              v25 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v25 & 1) != 0)
                goto LABEL_31;
            }
            if (__cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)v132);
              sub_20E86E4C8((uint64_t *)&xmmword_254A4A4F8, "com.apple.cv3d", (unint64_t)v132);
              if ((_BYTE)v133 && (v132[23] & 0x80000000) != 0)
                operator delete(*(void **)v132);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
            }
LABEL_31:
            if (byte_254A4A50F >= 0)
              v27 = (const char *)&xmmword_254A4A4F8;
            else
              v27 = (const char *)xmmword_254A4A4F8;
            if (byte_254A4A50F >= 0)
              v28 = byte_254A4A50F;
            else
              v28 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
            *(_QWORD *)v132 = os_log_create(v27, v23);
            v29 = &v132[8];
            if (v28 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v28 >= 0x17)
            {
              v102 = v5;
              v30 = v4;
              v31 = v23;
              v32 = v22;
              v33 = v21;
              v34 = v7;
              v35 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v28 | 7) != 0x17)
                v35 = v28 | 7;
              v36 = v35 + 1;
              v29 = operator new(v35 + 1);
              *(_QWORD *)&v132[16] = v28;
              *(_QWORD *)&v133 = v36 | 0x8000000000000000;
              *(_QWORD *)&v132[8] = v29;
              v7 = v34;
              v21 = v33;
              v22 = v32;
              v23 = v31;
              v4 = v30;
              v5 = v102;
            }
            else
            {
              BYTE7(v133) = v28;
              if (!v28)
              {
LABEL_45:
                v29[v28] = 0;
                BYTE8(v133) = 1;
                v37 = v134;
                if (v24 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                if (v24 >= 0x17)
                {
                  v39 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v24 | 7) != 0x17)
                    v39 = v24 | 7;
                  v40 = v39 + 1;
                  v37 = (void **)operator new(v39 + 1);
                  v134[1] = (void *)v24;
                  v135 = v40 | 0x8000000000000000;
                  v134[0] = v37;
                  v38 = v104;
                }
                else
                {
                  HIBYTE(v135) = v24;
                  v38 = v104;
                  if (!v24)
                  {
LABEL_53:
                    *((_BYTE *)v37 + v24) = 0;
                    v136 = 1;
                    v41 = *(NSObject **)v132;
                    if (SHIBYTE(v135) < 0)
                      operator delete(v134[0]);
                    if (BYTE8(v133) && SBYTE7(v133) < 0)
                      operator delete(*(void **)&v132[8]);
                    if (*(_QWORD *)v132)
                      os_release(*(void **)v132);
                    if (!v38 || !*(_QWORD *)(v38 + 24))
                    {
                      os_log_type_enabled(v41, OS_LOG_TYPE_ERROR);
                      *(_DWORD *)v132 = 136315138;
                      *(_QWORD *)&v132[4] = v21;
                      v48 = (void *)_os_log_send_and_compose_impl();
                      if (v48)
                        free(v48);
                      goto LABEL_134;
                    }
                    v42 = _os_log_pack_size();
                    v43 = (std::__shared_weak_count_vtbl *)operator new(v42, (std::align_val_t)8uLL);
                    v44 = (std::__shared_weak_count *)operator new();
                    v44->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                    v44->__shared_owners_ = 0;
                    v44->__shared_weak_owners_ = 0;
                    v44[1].__vftable = v43;
                    *(_QWORD *)&v126 = v43;
                    *((_QWORD *)&v126 + 1) = v43;
                    v128 = 0;
                    v129 = 0;
                    v127 = v44;
                    v45 = strlen(v21);
                    if (v45 > 0x7FFFFFFFFFFFFFF7)
                      sub_20E860B7C();
                    v46 = v45;
                    if (v45 >= 0x17)
                    {
                      v49 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v45 | 7) != 0x17)
                        v49 = v45 | 7;
                      v50 = v49 + 1;
                      v47 = operator new(v49 + 1);
                      *(_QWORD *)&v131 = v46;
                      *((_QWORD *)&v131 + 1) = v50 | 0x8000000000000000;
                      v130 = v47;
                      v38 = v104;
                    }
                    else
                    {
                      HIBYTE(v131) = v45;
                      v47 = &v130;
                      if (!v45)
                      {
LABEL_74:
                        *((_BYTE *)v47 + v46) = 0;
                        v51 = v130;
                        v137[0] = v131;
                        *(_QWORD *)((char *)v137 + 7) = *(_QWORD *)((char *)&v131 + 7);
                        v52 = HIBYTE(v131);
                        v53 = operator new(0x38uLL);
                        v53[1] = 0;
                        v53[2] = 0;
                        v53[3] = off_24C9ABC20;
                        *v53 = &off_24C9ABBD0;
                        v54 = v137[0];
                        v53[4] = v51;
                        v53[5] = v54;
                        *(_QWORD *)((char *)v53 + 47) = *(_QWORD *)((char *)v137 + 7);
                        *((_BYTE *)v53 + 55) = v52;
                        v137[0] = 0;
                        *(_QWORD *)((char *)v137 + 7) = 0;
                        v55 = v129;
                        v128 = (char *)(v53 + 3);
                        v129 = (std::__shared_weak_count *)v53;
                        if (v55)
                        {
                          p_shared_owners = (unint64_t *)&v55->__shared_owners_;
                          do
                            v57 = __ldaxr(p_shared_owners);
                          while (__stlxr(v57 - 1, p_shared_owners));
                          if (!v57)
                          {
                            ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                            std::__shared_weak_count::__release_weak(v55);
                          }
                        }
                        *(_OWORD *)v132 = v126;
                        v58 = v128;
                        *(_QWORD *)&v132[16] = v127;
                        if (v127)
                        {
                          v59 = (unint64_t *)&v127->__shared_owners_;
                          do
                            v60 = __ldxr(v59);
                          while (__stxr(v60 + 1, v59));
                        }
                        v61 = v129;
                        *(_QWORD *)&v133 = v58;
                        *((_QWORD *)&v133 + 1) = v129;
                        if (v129)
                        {
                          v62 = (unint64_t *)&v129->__shared_owners_;
                          do
                            v63 = __ldxr(v62);
                          while (__stxr(v63 + 1, v62));
                          v134[0] = v58;
                          do
                            v64 = __ldaxr(v62);
                          while (__stlxr(v64 - 1, v62));
                          if (!v64)
                          {
                            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                            std::__shared_weak_count::__release_weak(v61);
                          }
                        }
                        else
                        {
                          v134[0] = v58;
                        }
                        v65 = v127;
                        if (v127)
                        {
                          v66 = (unint64_t *)&v127->__shared_owners_;
                          do
                            v67 = __ldaxr(v66);
                          while (__stlxr(v67 - 1, v66));
                          if (!v67)
                          {
                            ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                            std::__shared_weak_count::__release_weak(v65);
                          }
                        }
                        v68 = *(_QWORD *)v132;
                        if (*((char *)v134[0] + 31) >= 0)
                          v69 = (char *)v134[0] + 8;
                        else
                          v69 = (char *)*((_QWORD *)v134[0] + 1);
                        v70 = _os_log_pack_fill();
                        *(_DWORD *)v70 = 136315138;
                        *(_QWORD *)(v70 + 4) = v69;
                        v71 = operator new();
                        v72 = *(unsigned __int8 *)(v22 + 39);
                        v73 = *(const char **)(v22 + 16);
                        v74 = *(_QWORD *)(v22 + 24);
                        v75 = v133;
                        *(_OWORD *)(v71 + 8) = *(_OWORD *)&v132[8];
                        if ((v72 & 0x80u) != 0)
                          v72 = v74;
                        else
                          v73 = v103;
                        *(_QWORD *)v71 = v68;
                        *(_QWORD *)&v132[8] = 0;
                        *(_QWORD *)&v132[16] = 0;
                        *(_OWORD *)(v71 + 24) = v75;
                        v133 = 0uLL;
                        *(_QWORD *)(v71 + 40) = v73;
                        *(_QWORD *)(v71 + 48) = v72;
                        *(_BYTE *)(v71 + 56) = 16;
                        v130 = 0;
                        *(_QWORD *)&v126 = v71;
                        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v38 + 24) + 40))(*(_QWORD *)(v38 + 24), &v126);
                        v76 = v126;
                        *(_QWORD *)&v126 = 0;
                        if (v76)
                        {
                          v77 = *(std::__shared_weak_count **)(v76 + 32);
                          if (v77)
                          {
                            v78 = (unint64_t *)&v77->__shared_owners_;
                            do
                              v79 = __ldaxr(v78);
                            while (__stlxr(v79 - 1, v78));
                            if (!v79)
                            {
                              ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                              std::__shared_weak_count::__release_weak(v77);
                            }
                          }
                          v80 = *(std::__shared_weak_count **)(v76 + 16);
                          if (v80)
                          {
                            v81 = (unint64_t *)&v80->__shared_owners_;
                            do
                              v82 = __ldaxr(v81);
                            while (__stlxr(v82 - 1, v81));
                            if (!v82)
                            {
                              ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                              std::__shared_weak_count::__release_weak(v80);
                            }
                          }
                          MEMORY[0x212BC6398](v76, 0x10F0C40B62ED6C6);
                          v83 = v130;
                          v130 = 0;
                          if (v83)
                          {
                            v84 = (std::__shared_weak_count *)v83[4];
                            if (v84)
                            {
                              v85 = (unint64_t *)&v84->__shared_owners_;
                              do
                                v86 = __ldaxr(v85);
                              while (__stlxr(v86 - 1, v85));
                              if (!v86)
                              {
                                ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                                std::__shared_weak_count::__release_weak(v84);
                              }
                            }
                            v87 = (std::__shared_weak_count *)v83[2];
                            if (v87)
                            {
                              v88 = (unint64_t *)&v87->__shared_owners_;
                              do
                                v89 = __ldaxr(v88);
                              while (__stlxr(v89 - 1, v88));
                              if (!v89)
                              {
                                ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                                std::__shared_weak_count::__release_weak(v87);
                              }
                            }
                            MEMORY[0x212BC6398](v83, 0x10F0C40B62ED6C6);
                          }
                        }
                        v90 = (std::__shared_weak_count *)*((_QWORD *)&v133 + 1);
                        if (*((_QWORD *)&v133 + 1))
                        {
                          v91 = (unint64_t *)(*((_QWORD *)&v133 + 1) + 8);
                          do
                            v92 = __ldaxr(v91);
                          while (__stlxr(v92 - 1, v91));
                          if (!v92)
                          {
                            ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
                            std::__shared_weak_count::__release_weak(v90);
                          }
                        }
                        v93 = *(std::__shared_weak_count **)&v132[16];
                        if (*(_QWORD *)&v132[16])
                        {
                          v94 = (unint64_t *)(*(_QWORD *)&v132[16] + 8);
                          do
                            v95 = __ldaxr(v94);
                          while (__stlxr(v95 - 1, v94));
                          if (!v95)
                          {
                            ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                            std::__shared_weak_count::__release_weak(v93);
                          }
                        }
LABEL_134:
                        if (v7)
                        {
                          v96 = (const char *)__dst;
                          if (v113 < 0)
                            v96 = (const char *)__dst[0];
                          sub_20E8C003C((uint64_t)v105, "%s", v96);
                          sub_20E863570((uint64_t)v105);
                        }
                        sub_20E863570((uint64_t)v105);
                        v97 = v111;
                        if (v111)
                        {
                          v98 = (unint64_t *)&v111->__shared_owners_;
                          do
                            v99 = __ldaxr(v98);
                          while (__stlxr(v99 - 1, v98));
                          if (!v99)
                          {
                            ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
                            std::__shared_weak_count::__release_weak(v97);
                          }
                        }
                        if (SHIBYTE(v113) < 0)
                          operator delete(__dst[0]);
                        v114[0] = *(void **)MEMORY[0x24BEDB7F0];
                        v100 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                        *(void **)((char *)v114 + *((_QWORD *)v114[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
                        v115[0] = v100;
                        v115[1] = MEMORY[0x24BEDB848] + 16;
                        if (v121 < 0)
                          operator delete(__p);
                        std::streambuf::~streambuf();
                        std::iostream::~basic_iostream();
                        MEMORY[0x212BC6290](&v124);
                        return v5 <= v4;
                      }
                    }
                    memcpy(v47, v21, v46);
                    goto LABEL_74;
                  }
                }
                memmove(v37, v23, v24);
                goto LABEL_53;
              }
            }
            memmove(v29, v27, v28);
            goto LABEL_45;
          }
        }
        memmove(v16, v18, v15);
        goto LABEL_24;
      }
    }
  }
  return v5 <= v4;
}

void sub_20F41ED98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(_BYTE *)(v33 - 168) && *(char *)(v33 - 169) < 0)
    operator delete(*(void **)(v33 - 192));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a13);
  if (a27 < 0)
  {
    operator delete(__p);
    sub_20E863784((uint64_t)&a28);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&a28);
  _Unwind_Resume(a1);
}

uint64_t sub_20F41EF34(uint64_t result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  if (result)
  {
    v1 = result;
    v2 = *(uint64_t **)(result + 48);
    *(_QWORD *)(result + 48) = 0;
    if (v2)
    {
      v3 = *v2;
      *v2 = 0;
      if (v3)
        ((void (*)(void))v2[1])();
      MEMORY[0x212BC6398](v2, 0xA0C40AFF93C70);
    }
    v4 = *(_QWORD *)(v1 + 40);
    *(_QWORD *)(v1 + 40) = 0;
    if (v4)
    {
      v5 = *(std::__shared_weak_count **)(v4 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      MEMORY[0x212BC6398](v4, 0xA0C40BD48D6D6);
    }
    JUMPOUT(0x212BC6398);
  }
  return result;
}

uint64_t **sub_20F41F018(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
      ((void (*)(void))v2[1])();
    MEMORY[0x212BC6398](v2, 0xA0C40AFF93C70);
  }
  return a1;
}

void sub_20F41F074(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CVPixelBufferPoolRef *v5;
  __int128 v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __CVBuffer *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  int v22;
  OSType PixelFormatType;
  int v24;
  const void *v25;
  std::__shared_weak_count_vtbl **v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  double *exception;
  __int128 v44;
  _OWORD v45[3];
  _OWORD v46[2];
  uint64_t v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  __int128 v51;
  char *valuePtr;
  __int128 v53;

  v5 = *(CVPixelBufferPoolRef **)(a2 + 40);
  if (v5)
    goto LABEL_55;
  v7 = *(_OWORD *)(a3 + 48);
  v45[2] = *(_OWORD *)(a3 + 32);
  v46[0] = v7;
  *(_OWORD *)((char *)v46 + 9) = *(_OWORD *)(a3 + 57);
  v8 = *(_OWORD *)(a3 + 16);
  v45[0] = *(_OWORD *)a3;
  v45[1] = v8;
  v9 = *(std::__shared_weak_count **)(a3 + 88);
  v47 = *(_QWORD *)(a3 + 80);
  v48 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = *(std::__shared_weak_count **)(a3 + 104);
  v49 = *(_QWORD *)(a3 + 96);
  v50 = v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = (__CVBuffer *)sub_20EAAB158(v45);
  v16 = v50;
  if (!v50)
    goto LABEL_12;
  v17 = (unint64_t *)&v50->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    v19 = v48;
    if (!v48)
      goto LABEL_16;
  }
  else
  {
LABEL_12:
    v19 = v48;
    if (!v48)
      goto LABEL_16;
  }
  v20 = (unint64_t *)&v19->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (v21)
  {
LABEL_16:
    if (v15)
      goto LABEL_17;
LABEL_25:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FrameDownsampleNodeGroup/src/FrameDownsampler.cpp", 224, (uint64_t)"pixel_buffer", 12, (uint64_t)"Data owner needs to be intialized", 33, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_65;
    }
    v24 = *(_DWORD *)(a2 + 28);
    if (v24 != 2)
    {
      if (v24 != 1)
      {
        if (!v24)
        {
          PixelFormatType = CVPixelBufferGetPixelFormatType(0);
          if (!*(_BYTE *)(a2 + 12))
            goto LABEL_37;
          goto LABEL_36;
        }
        goto LABEL_35;
      }
LABEL_31:
      PixelFormatType = 1111970369;
      if (!*(_BYTE *)(a2 + 12))
        goto LABEL_37;
      goto LABEL_36;
    }
LABEL_33:
    PixelFormatType = 1278226488;
    if (!*(_BYTE *)(a2 + 12))
      goto LABEL_37;
    goto LABEL_36;
  }
  ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
  std::__shared_weak_count::__release_weak(v19);
  if (!v15)
    goto LABEL_25;
LABEL_17:
  v22 = *(_DWORD *)(a2 + 28);
  switch(v22)
  {
    case 2:
      goto LABEL_33;
    case 1:
      goto LABEL_31;
    case 0:
      PixelFormatType = CVPixelBufferGetPixelFormatType(v15);
      if (!*(_BYTE *)(a2 + 12))
        goto LABEL_37;
      goto LABEL_36;
  }
LABEL_35:
  PixelFormatType = 0;
  if (!*(_BYTE *)(a2 + 12))
    goto LABEL_37;
LABEL_36:
  if (*(_BYTE *)(a2 + 20))
    goto LABEL_38;
LABEL_37:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FrameDownsampleNodeGroup/src/FrameDownsampler.cpp", 230, (uint64_t)"output_frame_width_ && output_frame_height_", 43, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_65:
    abort();
  }
LABEL_38:
  v53 = 0uLL;
  valuePtr = (char *)&v53;
  sub_20EA65D20(&valuePtr, &v51);
  v44 = v51;
  sub_20E866BE0((uint64_t)&valuePtr, (char *)v53);
  v25 = (const void *)*MEMORY[0x24BDC56E0];
  valuePtr = 0;
  sub_21015B424((uint64_t)&v44, v25, &valuePtr);
  v26 = (std::__shared_weak_count_vtbl **)operator new();
  v27 = *(_DWORD *)(a2 + 8);
  v28 = *(_DWORD *)(a2 + 16);
  v29 = *(_DWORD *)a2;
  valuePtr = (char *)operator new(0x78uLL);
  v53 = xmmword_2102DCC70;
  strcpy(valuePtr, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FrameDownsampleNodeGroup/src/FrameDownsampler.cpp:236");
  sub_210105910(v26, (uint64_t)&v44, v27, v28, v29, PixelFormatType, (uint64_t *)&valuePtr);
  if (SHIBYTE(v53) < 0)
  {
    operator delete(valuePtr);
    v30 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a2 + 40) = v26;
    if (!v30)
      goto LABEL_49;
LABEL_42:
    v31 = *(std::__shared_weak_count **)(v30 + 8);
    if (v31)
    {
      v32 = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    MEMORY[0x212BC6398](v30, 0xA0C40BD48D6D6);
    if (!*(_QWORD *)(a2 + 40)
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FrameDownsampleNodeGroup/src/FrameDownsampler.cpp", 237, (uint64_t)"frame_pool_", 11, (uint64_t)"Failed to construct apple_util::PixelBufferPool", 47, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    goto LABEL_49;
  }
  v30 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = v26;
  if (v30)
    goto LABEL_42;
LABEL_49:
  v34 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
  if (*((_QWORD *)&v44 + 1))
  {
    v35 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v5 = *(CVPixelBufferPoolRef **)(a2 + 40);
LABEL_55:
  sub_210105A14(v5, (uint64_t)&valuePtr);
  v37 = operator new(0x30uLL);
  v37[1] = 0;
  v37[2] = 0;
  *v37 = &off_24CA18420;
  v37[3] = &off_24CA1A9A0;
  v38 = v37 + 3;
  v39 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
  v37[4] = v53;
  v37[5] = v39;
  if (v39)
  {
    v40 = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
    *(_QWORD *)a1 = v38;
    *(_QWORD *)(a1 + 8) = v37;
    *(_BYTE *)(a1 + 16) = 1;
    valuePtr = (char *)&off_24CA1A9A0;
    do
      v42 = __ldaxr(v40);
    while (__stlxr(v42 - 1, v40));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  else
  {
    *(_QWORD *)a1 = v38;
    *(_QWORD *)(a1 + 8) = v37;
    *(_BYTE *)(a1 + 16) = 1;
  }
  if (!*(_BYTE *)(a1 + 16))
  {
    exception = (double *)__cxa_allocate_exception(0x28uLL);
    *(_DWORD *)exception = 0;
    sub_20E8610C0((_QWORD *)exception + 1, "apple_util::PixelBufferPool::Alloc() failed.");
    exception[4] = *(double *)(a3 + 112) + *(double *)(a3 + 120);
    __cxa_throw(exception, (struct type_info *)&unk_24C9B3130, (void (*)(void *))sub_20F41D5EC);
  }
}

void sub_20F41F578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20F41F58C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  if (*(char *)(v10 - 81) < 0)
    operator delete(*(void **)(v10 - 104));
  MEMORY[0x212BC6398](v9, 0xA0C40BD48D6D6);
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20F41F5D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20F41F5E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20F41F5F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E866BE0(v1 - 104, *(char **)(v1 - 96));
  _Unwind_Resume(a1);
}

void sub_20F41F610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E8E5AE4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F41F624(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E869AA8(v1);
  _Unwind_Resume(a1);
}

void sub_20F41F638(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  __cxa_free_exception(v2);
  sub_20E869AA8(v1);
  _Unwind_Resume(a1);
}

void sub_20F41F654(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_21015D41C((_QWORD *)(v1 - 104));
  _Unwind_Resume(a1);
}

uint64_t sub_20F41F668(uint64_t a1, const char *a2)
{
  uint64_t result;
  _DWORD v4[6];
  int v5;
  _QWORD **v6;
  const char *v7;
  _DWORD *v8;
  const char *v9;
  const char *v10;
  _QWORD *v11;

  v5 = 0;
  sub_20EE0A738(v4, "Error copying: ");
  if (*(_QWORD *)a2)
  {
    v6 = (_QWORD **)v4;
    v7 = a2;
    v8 = v4;
    v9 = a2;
    v10 = a2;
    if (v5 != -1)
    {
      v11 = &v6;
      ((void (*)(_QWORD **, _DWORD *))off_24C9FFF60[v5])(&v11, v4);
      goto LABEL_6;
    }
LABEL_10:
    sub_20E877AB8();
  }
  v6 = (_QWORD **)v4;
  v7 = "nullptr";
  v8 = v4;
  v9 = "nullptr";
  v10 = "nullptr";
  if (v5 == -1)
    goto LABEL_10;
  v11 = &v6;
  ((void (*)(_QWORD **, _DWORD *))off_24C9FFF48[v5])(&v11, v4);
LABEL_6:
  if (v5 == -1)
    sub_20E877AB8();
  v6 = &v11;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C9FFF78[v5])(&v6, v4);
  if (v5 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C9FFF30[v5])(&v6, v4);
  return result;
}

void sub_20F41F798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20F41F7AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20F41F7C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20F41F7D4(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5, int a6)
{
  VTPixelTransferSessionRef **v8;
  VTPixelTransferSessionRef *v10;
  VTPixelTransferSessionRef *v11;
  VTPixelTransferSessionRef v12;

  *(_QWORD *)a1 = 0x2000000010;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_BYTE *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + 28) = a5;
  *(_DWORD *)(a1 + 32) = a6;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v8 = (VTPixelTransferSessionRef **)(a1 + 48);
  if ((a2 & 0xFF00000000) == 0 || (a3 & 0xFF00000000) == 0)
    goto LABEL_10;
  if ((int)a2 <= 0)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FrameDownsampleNodeGroup/src/FrameDownsampler.cpp", 67, (uint64_t)"output_frame_width_ > 0", 23, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_17;
    }
    if (*(_BYTE *)(a1 + 20) && *(int *)(a1 + 16) > 0)
      goto LABEL_10;
  }
  else if ((int)a3 > 0)
  {
    goto LABEL_10;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FrameDownsampleNodeGroup/src/FrameDownsampler.cpp", 68, (uint64_t)"output_frame_height_ > 0", 24, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_17;
  }
LABEL_10:
  if (!a6)
  {
    v10 = (VTPixelTransferSessionRef *)operator new();
    sub_210106388(v10);
    v11 = *v8;
    *v8 = v10;
    if (v11)
    {
      v12 = *v11;
      *v11 = 0;
      if (v12)
        ((void (*)(void))v11[1])();
      MEMORY[0x212BC6398](v11, 0xA0C40AFF93C70);
      if (!*v8
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FrameDownsampleNodeGroup/src/FrameDownsampler.cpp", 73, (uint64_t)"pixel_transfer_session_", 23, (uint64_t)"Failed to construct apple_util::PixelBufferTransferSession", 58, (void (*)(void **))sub_21023DDB0))
      {
LABEL_17:
        abort();
      }
    }
  }
  return a1;
}

void sub_20F41F974(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t **v2;
  uint64_t v3;

  MEMORY[0x212BC6398](v3, 0xA0C40AFF93C70);
  sub_20F41F018(v2);
  sub_20E8A187C(v1);
  _Unwind_Resume(a1);
}

void sub_20F41F9A8(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t **v2;

  sub_20F41F018(v2);
  sub_20E8A187C(v1);
  _Unwind_Resume(a1);
}

void sub_20F41F9CC(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F41F9F0(uint64_t a1, __int128 *a2)
{
  void **v3;
  void **v4;
  void **v5;
  void **v6;
  __int128 v7;
  __int128 v8;
  unint64_t v9;
  char *v10;
  unint64_t v11;
  char *v12;
  void **v13;
  _BYTE *v14;
  size_t v15;
  char *v16;
  void **v17;
  char *v18;
  void **v19;
  char *v20;
  void **v21;
  _BYTE __p[24];
  void *__dst[4];

  *(_OWORD *)(a1 + 8) = 0u;
  v3 = (void **)(a1 + 8);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  v4 = (void **)(a1 + 64);
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  v5 = (void **)(a1 + 120);
  *(_OWORD *)(a1 + 168) = 0u;
  v6 = (void **)(a1 + 168);
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)a1 = &off_24C9FFFE0;
  *(_QWORD *)(a1 + 56) = &unk_24CA00018;
  *(_QWORD *)(a1 + 112) = &unk_24CA00040;
  v7 = *a2;
  v8 = a2[1];
  *(_QWORD *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 216) = v7;
  *(_OWORD *)(a1 + 232) = v8;
  v9 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  if (v9)
  {
    if (v9 >> 61)
      sub_20E867F44();
    v10 = (char *)operator new(8 * v9);
    *(_QWORD *)(a1 + 248) = v10;
    *(_QWORD *)(a1 + 264) = &v10[8 * v9];
    bzero(v10, 8 * v9);
    *(_QWORD *)(a1 + 256) = &v10[8 * v9];
  }
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  v11 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  if (v11)
  {
    if (v11 >> 60)
      sub_20E867F44();
    v12 = (char *)operator new(16 * v11);
    *(_QWORD *)(a1 + 296) = v12;
    *(_QWORD *)(a1 + 312) = &v12[16 * v11];
    bzero(v12, 16 * v11);
    *(_QWORD *)(a1 + 304) = &v12[16 * v11];
  }
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_BYTE *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  if (!v9)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FrameDownsampleNodeGroup/src/JasperFrameSelectorNode.cpp", 38, (uint64_t)"config_.max_triggers_to_buffer >= 1", 35, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_46;
    }
    if (*(_QWORD *)(a1 + 224) > 1uLL)
      goto LABEL_13;
LABEL_12:
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FrameDownsampleNodeGroup/src/JasperFrameSelectorNode.cpp", 39, (uint64_t)"config_.max_frames_to_buffer >= 2", 33, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))goto LABEL_13;
LABEL_46:
    abort();
  }
  if (v11 <= 1)
    goto LABEL_12;
LABEL_13:
  HIBYTE(__dst[2]) = 21;
  strcpy((char *)__dst, "Jasper Frame Selector");
  *(_QWORD *)__p = operator new(0x40uLL);
  *(_OWORD *)&__p[8] = xmmword_2103A5C60;
  if (v6 != __dst)
  {
    if (*(char *)(a1 + 191) < 0)
    {
      sub_20E867CBC(v6, __dst, 0x15uLL);
    }
    else
    {
      *(_OWORD *)v6 = *(_OWORD *)__dst;
      v6[2] = __dst[2];
    }
  }
  v13 = (void **)(a1 + 192);
  if ((_BYTE *)(a1 + 192) != __p)
  {
    if (*(char *)(a1 + 215) < 0)
    {
      if (__p[23] >= 0)
        v14 = __p;
      else
        v14 = *(_BYTE **)__p;
      if (__p[23] >= 0)
        v15 = __p[23];
      else
        v15 = *(_QWORD *)&__p[8];
      sub_20E867CBC(v13, v14, v15);
    }
    else if ((__p[23] & 0x80) != 0)
    {
      sub_20E867BF8(v13, *(void **)__p, *(size_t *)&__p[8]);
    }
    else
    {
      *(_OWORD *)v13 = *(_OWORD *)__p;
      *(_QWORD *)(a1 + 208) = *(_QWORD *)&__p[16];
    }
  }
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_31;
  }
  else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    goto LABEL_31;
  }
  operator delete(__dst[0]);
LABEL_31:
  v16 = (char *)operator new(0x48uLL);
  strcpy(v16, "Enables or disables the frame selector based on SLAM health information");
  if (*(char *)(a1 + 143) < 0)
    operator delete(*v5);
  strcpy((char *)(a1 + 120), "Health Info Channel");
  *(_BYTE *)(a1 + 143) = 19;
  sub_20E860C04(__dst, v16, 0x47uLL);
  v17 = (void **)(a1 + 144);
  if (*(char *)(a1 + 167) < 0)
    operator delete(*v17);
  *(_OWORD *)v17 = *(_OWORD *)__dst;
  *(void **)(a1 + 160) = __dst[2];
  operator delete(v16);
  v18 = (char *)operator new(0x58uLL);
  strcpy(v18, "Processes input frames and returns selected jasper frames if there is enough data");
  if (*(char *)(a1 + 87) < 0)
    operator delete(*v4);
  strcpy((char *)(a1 + 64), "Jasper Frame Channel");
  *(_BYTE *)(a1 + 87) = 20;
  sub_20E860C04(__dst, v18, 0x51uLL);
  v19 = (void **)(a1 + 88);
  if (*(char *)(a1 + 111) < 0)
    operator delete(*v19);
  *(_OWORD *)v19 = *(_OWORD *)__dst;
  *(void **)(a1 + 104) = __dst[2];
  operator delete(v18);
  v20 = (char *)operator new(0x68uLL);
  strcpy(v20, "Processes input triggers (timestamps) and returns selected jasper frames if there is enough data");
  if (*(char *)(a1 + 31) < 0)
    operator delete(*v3);
  strcpy((char *)(a1 + 8), "Jasper Trigger Channel");
  *(_BYTE *)(a1 + 31) = 22;
  sub_20E860C04(__dst, v20, 0x60uLL);
  v21 = (void **)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*v21);
  *(_OWORD *)v21 = *(_OWORD *)__dst;
  *(void **)(a1 + 48) = __dst[2];
  operator delete(v20);
  return a1;
}

void sub_20F41FF28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  void **v22;
  void *v24;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  sub_20E8C3144(a9);
  v24 = *v22;
  if (*v22)
  {
    *(_QWORD *)(v21 + 256) = v24;
    operator delete(v24);
    sub_20ED625D0(v21);
    _Unwind_Resume(a1);
  }
  sub_20ED625D0(v21);
  _Unwind_Resume(a1);
}

uint64_t sub_20F420058(uint64_t result, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  _OWORD *v22;
  char *v23;
  char *v24;
  _OWORD *v25;
  char *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v35;
  _OWORD *v36;
  _OWORD *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  __int128 *v44;
  uint64_t v45;
  __int128 v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  const std::nothrow_t *v68;
  unint64_t v69;
  __n128 *v70;
  BOOL v71;
  __n128 *v72;
  char *v73;
  char *v74;
  char *v75;
  int v76;
  int v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  __n128 v88;
  double **v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  int v96;
  int v97;
  char *v98;
  int v99;
  char *v100;
  char *v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  int v105;
  int v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  _OWORD *v117;
  _OWORD *v118;
  _OWORD *v119;

  *(_BYTE *)result = 0;
  *(_BYTE *)(result + 24) = 0;
  if (!*(_QWORD *)(a2 + 288))
    return result;
  v3 = *(_QWORD *)(a2 + 336);
  if (v3 < 2)
    return result;
  v4 = result;
  v5 = 0;
  v6 = 0;
  v7 = *(_QWORD *)(a2 + 336);
  do
  {
    v8 = v7 >> 1;
    v9 = (v7 >> 1) + v6;
    if (**(double **)(*(_QWORD *)(a2 + 296)
                     + 16
                     * ((v9 + *(_QWORD *)(a2 + 320)) % ((uint64_t)(*(_QWORD *)(a2 + 304) - *(_QWORD *)(a2 + 296)) >> 4))) < *(double *)(*(_QWORD *)(a2 + 248) + 8 * *(_QWORD *)(a2 + 272)))
    {
      v6 = v9 + 1;
      v5 = v9 + 1 == v3;
      v8 = v7 + ~v8;
    }
    v7 = v8;
  }
  while (v8);
  if (v5 || !v6)
    return result;
  result = kdebug_trace();
  v10 = v6 + 1;
  v11 = *(_QWORD *)(a2 + 336);
  if (v6 + 1 != v11 && ((v12 = 0, v11) ? (v13 = v10 == 0) : (v13 = 0), v13 || !(v11 | v10))
    || (v10 >= 8 ? (v12 = 8) : (v12 = v6 + 1), v6 >= 0x7FFFFFFFFFFFFFFFLL))
  {
    result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FrameDownsampleNodeGroup/src/JasperFrameSelectorNode.cpp", 80, (uint64_t)"kAvailableFrames > 0", 20, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    if ((_DWORD)result)
      abort();
  }
  if (v12 < *(unsigned int *)(a2 + 240))
  {
    v14 = *(_QWORD *)(a2 + 272);
    v15 = *(_QWORD *)(a2 + 248);
    *(_QWORD *)(v15 + 8 * v14) = 0;
    v16 = (*(_QWORD *)(a2 + 256) - v15) >> 3;
    v17 = v14 + 1;
    if (v17 < v16)
      v16 = 0;
    *(_QWORD *)(a2 + 272) = v17 - v16;
    --*(_QWORD *)(a2 + 288);
    return result;
  }
  v18 = v10 - v12;
  v19 = *(_QWORD *)(a2 + 336);
  if (v19 || v18)
  {
    if (v10 == v12)
    {
      if (v10 == v11)
      {
        v20 = -v19;
        goto LABEL_42;
      }
    }
    else
    {
      if (v18 < 0
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FrameDownsampleNodeGroup/src/JasperFrameSelectorNode.cpp", 96, (uint64_t)"range_begin >= jasper_buffer_.begin()", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_179:
        abort();
      }
      if (v10 == v11)
      {
        if (v18 == v19)
          goto LABEL_43;
        goto LABEL_41;
      }
    }
    if (!(v18 | v10) && v18 != v19)
      goto LABEL_43;
  }
  else if (v10 == v11)
  {
    goto LABEL_43;
  }
  if (v6 == -1 && v18 == v19)
  {
    v20 = *(_QWORD *)(a2 + 336);
    goto LABEL_42;
  }
LABEL_41:
  v20 = -v12;
LABEL_42:
  if (v20 < 0)
    goto LABEL_44;
LABEL_43:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FrameDownsampleNodeGroup/src/JasperFrameSelectorNode.cpp", 97, (uint64_t)"range_end - range_begin > 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_179;
  }
LABEL_44:
  v117 = 0;
  v118 = 0;
  v119 = 0;
  if (!v12)
  {
    v22 = 0;
    v21 = 0;
    if (*(_BYTE *)(v4 + 24))
      goto LABEL_46;
LABEL_56:
    *(_QWORD *)v4 = v21;
    *(_QWORD *)(v4 + 8) = v21;
    *(_QWORD *)(v4 + 16) = v22;
    *(_BYTE *)(v4 + 24) = 1;
    if (v10 != v11)
      goto LABEL_57;
    goto LABEL_73;
  }
  v21 = operator new(16 * v12);
  v22 = &v21[v12];
  v117 = v21;
  v118 = v21;
  v119 = v22;
  if (!*(_BYTE *)(v4 + 24))
    goto LABEL_56;
LABEL_46:
  v116 = v19;
  v23 = *(char **)v4;
  if (*(_QWORD *)v4)
  {
    v115 = v11;
    v24 = *(char **)(v4 + 8);
    v25 = v21;
    v26 = *(char **)v4;
    if (v24 != v23)
    {
      do
      {
        v27 = (std::__shared_weak_count *)*((_QWORD *)v24 - 1);
        if (v27)
        {
          p_shared_owners = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldaxr(p_shared_owners);
          while (__stlxr(v29 - 1, p_shared_owners));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v24 -= 16;
      }
      while (v24 != v23);
      v26 = *(char **)v4;
      v25 = v117;
      v21 = v118;
      v22 = v119;
    }
    *(_QWORD *)(v4 + 8) = v23;
    v36 = v25;
    operator delete(v26);
    v37 = v36;
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 16) = 0;
    v11 = v115;
    v19 = v116;
    *(_QWORD *)v4 = v37;
    *(_QWORD *)(v4 + 8) = v21;
    *(_QWORD *)(v4 + 16) = v22;
    if (v10 == v115)
      goto LABEL_73;
LABEL_57:
    if (!v12 && v18 != v19)
      goto LABEL_74;
    v30 = -v12;
    do
    {
      v31 = *(_QWORD *)(a2 + 296)
          + 16
          * ((v6 + v30 + *(_QWORD *)(a2 + 320) + 1) % ((uint64_t)(*(_QWORD *)(a2 + 304) - *(_QWORD *)(a2 + 296)) >> 4));
      if ((unint64_t)v21 >= *(_QWORD *)(v4 + 16))
      {
        v21 = sub_20EAFDCA4((char **)v4, v31);
      }
      else
      {
        *v21++ = *(_OWORD *)v31;
        *(_QWORD *)v31 = 0;
        *(_QWORD *)(v31 + 8) = 0;
      }
      *(_QWORD *)(v4 + 8) = v21;
      v32 = v6 + v30 + 2;
      v33 = *(_QWORD *)(a2 + 336);
      v35 = __CFADD__(v30++, 1);
    }
    while (v32 == v33 || !v35);
    goto LABEL_75;
  }
  v19 = v116;
  *(_QWORD *)v4 = v21;
  *(_QWORD *)(v4 + 8) = v21;
  *(_QWORD *)(v4 + 16) = v22;
  if (v10 != v11)
    goto LABEL_57;
LABEL_73:
  if (v18 == v19)
  {
LABEL_74:
    v33 = *(_QWORD *)(a2 + 336);
    goto LABEL_75;
  }
  do
  {
    while (1)
    {
      v39 = *(_QWORD *)(a2 + 296)
          + 16
          * ((v18 + *(_QWORD *)(a2 + 320))
           % (unint64_t)((uint64_t)(*(_QWORD *)(a2 + 304) - *(_QWORD *)(a2 + 296)) >> 4));
      if ((unint64_t)v21 >= *(_QWORD *)(v4 + 16))
        break;
      *v21++ = *(_OWORD *)v39;
      *(_QWORD *)v39 = 0;
      *(_QWORD *)(v39 + 8) = 0;
      *(_QWORD *)(v4 + 8) = v21;
      ++v18;
      v33 = *(_QWORD *)(a2 + 336);
      if (v18 == v33)
        goto LABEL_75;
    }
    v21 = sub_20EAFDCA4((char **)v4, v39);
    *(_QWORD *)(v4 + 8) = v21;
    ++v18;
    v33 = *(_QWORD *)(a2 + 336);
  }
  while (v18 != v33);
LABEL_75:
  if (v33)
  {
    if (v10 == v11)
    {
      v38 = -v33;
LABEL_95:
      v50 = -(uint64_t)v38;
      v51 = *(_QWORD *)(a2 + 328);
      while (1)
      {
        if (v51)
        {
          v54 = *(_QWORD *)(a2 + 296) + 16 * v51;
          v55 = *(std::__shared_weak_count **)(v54 - 8);
          *(_QWORD *)(v54 - 16) = 0;
          *(_QWORD *)(v54 - 8) = 0;
          if (v55)
            goto LABEL_104;
        }
        else
        {
          v57 = *(_QWORD *)(a2 + 296) + 16 * ((uint64_t)(*(_QWORD *)(a2 + 304) - *(_QWORD *)(a2 + 296)) >> 4);
          v55 = *(std::__shared_weak_count **)(v57 - 8);
          *(_QWORD *)(v57 - 16) = 0;
          *(_QWORD *)(v57 - 8) = 0;
          if (v55)
          {
LABEL_104:
            v58 = (unint64_t *)&v55->__shared_owners_;
            do
              v59 = __ldaxr(v58);
            while (__stlxr(v59 - 1, v58));
            if (!v59)
            {
              ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
              std::__shared_weak_count::__release_weak(v55);
            }
          }
        }
        v52 = *(_QWORD *)(a2 + 328);
        if (v52)
        {
          v51 = v52 - 1;
          v53 = *(_QWORD *)(a2 + 336) - 1;
          *(_QWORD *)(a2 + 328) = v51;
          *(_QWORD *)(a2 + 336) = v53;
          if (!--v50)
            goto LABEL_108;
        }
        else
        {
          v51 = ((uint64_t)(*(_QWORD *)(a2 + 304) - *(_QWORD *)(a2 + 296)) >> 4) - 1;
          v56 = *(_QWORD *)(a2 + 336) - 1;
          *(_QWORD *)(a2 + 328) = v51;
          *(_QWORD *)(a2 + 336) = v56;
          if (!--v50)
            goto LABEL_108;
        }
      }
    }
    if (v6 == -1)
      goto LABEL_108;
    goto LABEL_86;
  }
  if (v10 != v11)
  {
    if (v6 == -1)
    {
      v38 = 0;
LABEL_87:
      v40 = 0;
      do
      {
        v41 = *(_QWORD *)(a2 + 320);
        v42 = *(_QWORD *)(a2 + 296);
        v43 = (*(_QWORD *)(a2 + 304) - v42) >> 4;
        v44 = (__int128 *)(v42 + 16 * ((v41 + v10) % v43));
        v45 = v42 + 16 * ((v41 + v40) % v43);
        v46 = *v44;
        *(_QWORD *)v44 = 0;
        *((_QWORD *)v44 + 1) = 0;
        v47 = *(std::__shared_weak_count **)(v45 + 8);
        *(_OWORD *)v45 = v46;
        if (v47)
        {
          v48 = (unint64_t *)&v47->__shared_owners_;
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 - 1, v48));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
        ++v10;
        ++v40;
      }
      while (v10 != *(_QWORD *)(a2 + 336));
      if (v38)
        goto LABEL_95;
      goto LABEL_108;
    }
LABEL_86:
    v38 = ~v6;
    goto LABEL_87;
  }
LABEL_108:
  v60 = *(_QWORD *)(a2 + 272);
  v61 = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(v61 + 8 * v60) = 0;
  v62 = (*(_QWORD *)(a2 + 256) - v61) >> 3;
  v63 = v60 + 1;
  if (v63 < v62)
    v62 = 0;
  *(_QWORD *)(a2 + 272) = v63 - v62;
  --*(_QWORD *)(a2 + 288);
  v64 = *(char **)v4;
  v65 = *(char **)(v4 + 8);
  v66 = (uint64_t)&v65[-*(_QWORD *)v4];
  v67 = v66 >> 4;
  if (v66 < 1)
  {
LABEL_114:
    v72 = 0;
    v69 = 0;
  }
  else
  {
    v68 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
    v69 = v66 >> 4;
    while (1)
    {
      v70 = (__n128 *)operator new(16 * v69, v68);
      if (v70)
        break;
      v71 = v69 > 1;
      v69 >>= 1;
      if (!v71)
        goto LABEL_114;
    }
    v72 = v70;
  }
  sub_20F422CD4(v64, v65, v67, v72, v69);
  if (v72)
    operator delete(v72);
  v74 = *(char **)v4;
  v73 = *(char **)(v4 + 8);
  if (v73 == *(char **)v4)
  {
    v74 = *(char **)(v4 + 8);
  }
  else
  {
    do
    {
      v75 = v73 - 16;
      if (v73 - 16 == v74)
      {
        v73 = *(char **)v4;
        goto LABEL_135;
      }
      v76 = *(unsigned __int8 *)(*((_QWORD *)v73 - 2) + 112);
      v77 = *(unsigned __int8 *)(*((_QWORD *)v73 - 4) + 112);
      v73 -= 16;
    }
    while (v76 != v77);
    v78 = v75 - 16;
    v79 = v75 + 16;
    if (v75 - 16 != v74)
    {
      do
      {
        v80 = v75;
        v75 = v78;
        v81 = v79 - 16;
        v83 = v80 - 32;
        v82 = *((_QWORD *)v80 - 4);
        if (*(unsigned __int8 *)(*((_QWORD *)v79 - 2) + 112) != *(unsigned __int8 *)(v82 + 112))
        {
          v84 = *((_QWORD *)v80 - 3);
          *(_QWORD *)v83 = 0;
          *((_QWORD *)v83 + 1) = 0;
          v85 = (std::__shared_weak_count *)*((_QWORD *)v79 - 3);
          *((_QWORD *)v79 - 4) = v82;
          *((_QWORD *)v79 - 3) = v84;
          if (v85)
          {
            v86 = (unint64_t *)&v85->__shared_owners_;
            do
              v87 = __ldaxr(v86);
            while (__stlxr(v87 - 1, v86));
            if (!v87)
            {
              ((void (*)(std::__shared_weak_count *, char *))v85->__on_zero_shared)(v85, v73);
              std::__shared_weak_count::__release_weak(v85);
            }
          }
          v79 = v81;
        }
        v78 = v75 - 16;
      }
      while (v75 - 16 != v74);
      v74 = *(char **)v4;
    }
    v73 = v74;
    v74 = v79 - 16;
  }
LABEL_135:
  sub_20F420B10(v4, (__int128 *)v73, (__int128 *)&v73[(v74 - v73) << 28 >> 28]);
  v89 = *(double ***)(v4 + 8);
  v90 = 126 - 2 * __clz(((uint64_t)v89 - *(_QWORD *)v4) >> 4);
  if (v89 == *(double ***)v4)
    v91 = 0;
  else
    v91 = v90;
  sub_20F4218FC(*(double ***)v4, v89, v91, 1, v88);
  v93 = *(char **)v4;
  v92 = *(_QWORD *)(v4 + 8);
  v94 = *(char **)v4;
  if (v92 == *(_QWORD *)v4)
    goto LABEL_170;
  v95 = 0;
  v96 = 0;
  v97 = 0;
  v98 = (char *)(v92 - 16);
  while (1)
  {
    v99 = *(unsigned __int8 *)(*(_QWORD *)v98 + 116);
    if (v99 == 1)
    {
      v71 = v96++ < *(_DWORD *)(a2 + 236);
      if (!v71)
        break;
      goto LABEL_142;
    }
    if (v99 == 3)
    {
      v71 = v97++ < *(_DWORD *)(a2 + 232) + *(_DWORD *)(a2 + 236);
      if (!v71)
        break;
      goto LABEL_142;
    }
    if (v99 == 2)
    {
      v71 = (int)v95 < *(_DWORD *)(a2 + 232);
      v95 = (v95 + 1);
      if (!v71)
        break;
    }
LABEL_142:
    v13 = v98 == v93;
    v98 -= 16;
    if (v13)
    {
      v94 = *(char **)v4;
      goto LABEL_170;
    }
  }
  v100 = v98 + 16;
  v94 = *(char **)v4;
  if (v98 + 16 != v93)
  {
    if (v98 != v93)
    {
      v94 = v98 + 16;
      while (1)
      {
        v101 = v100;
        v100 = v98;
        v102 = *((_QWORD *)v101 - 4);
        v103 = *(unsigned __int8 *)(v102 + 116);
        switch(v103)
        {
          case 1:
            v106 = v96 + 1;
            v104 = v95;
            v71 = v96++ < *(_DWORD *)(a2 + 236);
            if (v71)
              goto LABEL_164;
            v104 = v95;
            v96 = v106;
            break;
          case 3:
            v105 = v97 + 1;
            v104 = v95;
            v71 = v97++ < *(_DWORD *)(a2 + 232) + *(_DWORD *)(a2 + 236);
            if (v71)
              goto LABEL_164;
            v104 = v95;
            v97 = v105;
            break;
          case 2:
            v104 = (v95 + 1);
            if ((int)v95 < *(_DWORD *)(a2 + 232))
              goto LABEL_164;
            break;
          default:
            v104 = v95;
LABEL_164:
            v107 = *((_QWORD *)v101 - 3);
            *((_QWORD *)v101 - 4) = 0;
            *((_QWORD *)v101 - 3) = 0;
            *((_QWORD *)v94 - 2) = v102;
            v94 -= 16;
            v108 = (std::__shared_weak_count *)*((_QWORD *)v94 + 1);
            *((_QWORD *)v94 + 1) = v107;
            if (v108)
            {
              v109 = (unint64_t *)&v108->__shared_owners_;
              do
                v110 = __ldaxr(v109);
              while (__stlxr(v110 - 1, v109));
              if (!v110)
              {
                ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                std::__shared_weak_count::__release_weak(v108);
              }
            }
            break;
        }
        v98 = v100 - 16;
        v95 = v104;
        if (v100 - 16 == v93)
          goto LABEL_170;
      }
    }
    v94 = v98 + 16;
  }
LABEL_170:
  sub_20F420B10(v4, (__int128 *)v93, (__int128 *)v94);
  v111 = *(char **)v4;
  v112 = *(char **)(v4 + 8);
  if (*(char **)v4 != v112)
  {
    v113 = 0;
    do
    {
      v114 = *(unsigned __int8 *)(*(_QWORD *)v111 + 112);
      if (v114 >= 8)
        sub_20E89FD20("bitset set argument out of range");
      v113 |= 1 << v114;
      v111 += 16;
    }
    while (v111 != v112);
  }
  return kdebug_trace();
}

void sub_20F420A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  char **v4;
  va_list va;

  va_start(va, a4);
  sub_20E8C3144((void **)va);
  sub_20EC06BE0(v4);
  _Unwind_Resume(a1);
}

void sub_20F420ABC(_Unwind_Exception *a1)
{
  char **v1;

  sub_20EC06BE0(v1);
  _Unwind_Resume(a1);
}

void sub_20F420B10(uint64_t a1, __int128 *a2, __int128 *a3)
{
  __int128 *v3;
  __int128 *v5;
  __int128 *v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  if (a2 != a3)
  {
    v3 = a2;
    v5 = a3;
    v6 = *(__int128 **)(a1 + 8);
    if (a3 != v6)
    {
      do
      {
        v7 = *v5;
        *(_QWORD *)v5 = 0;
        *((_QWORD *)v5 + 1) = 0;
        v8 = (std::__shared_weak_count *)*((_QWORD *)v3 + 1);
        *v3 = v7;
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(p_shared_owners);
          while (__stlxr(v10 - 1, p_shared_owners));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        ++v5;
        ++v3;
      }
      while (v5 != v6);
      v5 = *(__int128 **)(a1 + 8);
    }
    while (v5 != v3)
    {
      v11 = (std::__shared_weak_count *)*((_QWORD *)v5 - 1);
      if (v11)
      {
        v12 = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      --v5;
    }
    *(_QWORD *)(a1 + 8) = v3;
  }
}

_QWORD *sub_20F420C0C@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  double *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  int v10;
  double **v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  BOOL v27;
  unint64_t v28;
  double v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  std::runtime_error *exception;
  uint64_t v41;
  uint64_t v42;
  std::string v43;

  v4 = *(double **)a2;
  if (!*(_BYTE *)(*(_QWORD *)a2 + 116))
    goto LABEL_53;
  v5 = (uint64_t)result;
  v6 = result[41];
  if (result[42])
  {
    v7 = result[37];
    if (v6)
      v8 = result[41];
    else
      v8 = (result[38] - v7) >> 4;
    v9 = **(double **)(v7 + 16 * v8 - 16);
    if (*v4 == v9)
      v10 = 0;
    else
      v10 = -127;
    if (*v4 > v9)
      v10 = 1;
    if (*v4 < v9)
      v10 = -1;
    if (v10 != -127 && (char)v10 <= 0)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
      v41 = *(_QWORD *)(v5 + 328);
      v42 = *(_QWORD *)(v5 + 296);
      if (!v41)
        v41 = (*(_QWORD *)(v5 + 304) - v42) >> 4;
      sub_20F420F48((uint64_t)&v43, *(uint64_t **)(v42 + 16 * v41 - 16), *(uint64_t **)a2);
      std::runtime_error::runtime_error(exception, &v43);
      exception->__vftable = (std::runtime_error_vtbl *)&off_24C9FFFA0;
      LODWORD(exception[1].__vftable) = 2;
      __cxa_throw(exception, (struct type_info *)&unk_24C9FFFB8, (void (*)(void *))std::runtime_error::~runtime_error);
    }
  }
  else
  {
    v7 = result[37];
  }
  v12 = (double **)(v7 + 16 * v6);
  v13 = *(_QWORD *)(a2 + 8);
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = (std::__shared_weak_count *)v12[1];
  *v12 = v4;
  v12[1] = (double *)v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = *(_QWORD *)(v5 + 296);
  v20 = (*(_QWORD *)(v5 + 304) - v19) >> 4;
  v21 = *(_QWORD *)(v5 + 336);
  v22 = *(_QWORD *)(v5 + 328) + 1;
  if (v22 >= v20)
    v23 = (*(_QWORD *)(v5 + 304) - v19) >> 4;
  else
    v23 = 0;
  *(_QWORD *)(v5 + 328) = v22 - v23;
  if (v21 == v20)
  {
    v24 = *(_QWORD *)(v5 + 320) + 1;
    if (v24 >= v20)
      v25 = v20;
    else
      v25 = 0;
    *(_QWORD *)(v5 + 320) = v24 - v25;
    v26 = *(_QWORD *)(v5 + 288);
    if (!v26)
      goto LABEL_51;
  }
  else
  {
    v20 = v21 + 1;
    *(_QWORD *)(v5 + 336) = v21 + 1;
    v26 = *(_QWORD *)(v5 + 288);
    if (!v26)
      goto LABEL_51;
  }
  if (!v20)
    goto LABEL_51;
  v27 = 0;
  v28 = 0;
  v29 = **(double **)(v19 + 16 * *(_QWORD *)(v5 + 320));
  v30 = *(_QWORD *)(v5 + 272);
  v31 = *(_QWORD *)(v5 + 248);
  v32 = (*(_QWORD *)(v5 + 256) - v31) >> 3;
  v33 = v26;
  do
  {
    v34 = v33 >> 1;
    v35 = (v33 >> 1) + v28;
    if (*(double *)(v31 + 8 * ((v35 + v30) % v32)) < v29)
    {
      v28 = v35 + 1;
      v27 = v35 + 1 == v26;
      v34 = v33 + ~v34;
    }
    v33 = v34;
  }
  while (v34);
  if (v27)
  {
    v28 = v26;
  }
  else
  {
    if (!v28)
      goto LABEL_51;
    v36 = v26;
    do
    {
      *(_QWORD *)(v31 + 8 * (v30 % v32)) = *(_QWORD *)(v31 + 8 * ((v28 + v30) % v32));
      --v36;
      ++v30;
    }
    while (v28 != v36);
  }
  v37 = *(_QWORD *)(v5 + 280);
  v38 = v28;
  do
  {
    if (!v37)
      v37 = v32;
    --v37;
    *(_QWORD *)(v31 + 8 * v37) = 0;
    --v38;
  }
  while (v38);
  *(_QWORD *)(v5 + 280) = v37;
  *(_QWORD *)(v5 + 288) = v26 - v28;
LABEL_51:
  result = (_QWORD *)kdebug_trace();
  if (*(_BYTE *)(v5 + 344))
    return (_QWORD *)sub_20F420058((uint64_t)a3, v5);
LABEL_53:
  *a3 = 0;
  a3[24] = 0;
  return result;
}

void sub_20F420F08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) != 0)
    {
LABEL_6:
      __cxa_free_exception(v15);
      _Unwind_Resume(a1);
    }
  }
  else if (v16)
  {
    goto LABEL_6;
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20F420F48(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t result;
  _DWORD v6[6];
  int v7;
  std::string __p;
  std::string *v9;
  std::string *p_p;
  _DWORD *v11;
  std::string *v12;
  std::string *v13;
  std::string **v14;

  v7 = 0;
  sub_20F412284(v6, "Lidar frames are arriving out of order. Prev tstamp: ");
  sub_20EC4149C(a2, &__p);
  v9 = (std::string *)v6;
  p_p = &__p;
  v11 = v6;
  v12 = &__p;
  v13 = &__p;
  if (v7 == -1)
    sub_20E877AB8();
  v14 = &v9;
  ((void (*)(std::string ***, _DWORD *))off_24CA00088[v7])(&v14, v6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = (std::string *)v6;
  p_p = (std::string *)" Frame tstamp: ";
  v11 = v6;
  v12 = (std::string *)" Frame tstamp: ";
  v13 = (std::string *)" Frame tstamp: ";
  if (v7 == -1)
    sub_20E877AB8();
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v9;
  ((void (*)(std::string *, _DWORD *))off_24CA000A0[v7])(&__p, v6);
  sub_20EC4149C(a3, &__p);
  v9 = (std::string *)v6;
  p_p = &__p;
  v11 = v6;
  v12 = &__p;
  v13 = &__p;
  if (v7 == -1)
    sub_20E877AB8();
  v14 = &v9;
  ((void (*)(std::string ***, _DWORD *))off_24CA00088[v7])(&v14, v6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v7 == -1)
    sub_20E877AB8();
  v9 = &__p;
  result = ((uint64_t (*)(std::string **, _DWORD *))off_24CA000B8[v7])(&v9, v6);
  if (v7 != -1)
    return ((uint64_t (*)(std::string **, _DWORD *))off_24CA00070[v7])(&v9, v6);
  return result;
}

void sub_20F4210FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  sub_20E877A60((uint64_t)&a10);
  _Unwind_Resume(a1);
}

_QWORD *sub_20F421148@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  return sub_20F420C0C((_QWORD *)(a1 - 56), a2, a3);
}

uint64_t sub_20F421150@<X0>(uint64_t result@<X0>, double *a2@<X1>, _BYTE *a3@<X8>)
{
  _QWORD *v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  std::runtime_error *v15;
  std::runtime_error *exception;
  std::string v17;

  if (!*(_BYTE *)(result + 344))
  {
    *a3 = 0;
    a3[24] = 0;
    return result;
  }
  v5 = (_QWORD *)result;
  v6 = *a2;
  if (*(_QWORD *)(result + 288))
  {
    v7 = *(_QWORD *)(result + 280);
    if (v7)
    {
      if (v6 > *(double *)(*(_QWORD *)(result + 248) + 8 * v7 - 8))
        goto LABEL_5;
LABEL_9:
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FrameDownsampleNodeGroup/src/JasperFrameSelectorNode.cpp", 214, (uint64_t)"trigger_buffer_.empty() || trigger_timestamp > trigger_buffer_.back()", 69, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v6 = *a2;
      if (!v5[42])
        goto LABEL_12;
      goto LABEL_11;
    }
    if (v6 <= *(double *)(*(_QWORD *)(result + 248)
                         + 8 * ((uint64_t)(*(_QWORD *)(result + 256) - *(_QWORD *)(result + 248)) >> 3)
                         - 8))
      goto LABEL_9;
  }
LABEL_5:
  if (*(_QWORD *)(result + 336))
  {
LABEL_11:
    if (v6 <= **(double **)(v5[37] + 16 * v5[40]))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
      sub_20E8610C0(&v17, "Selection requests are arriving with significant delays.");
      std::runtime_error::runtime_error(exception, &v17);
      exception->__vftable = (std::runtime_error_vtbl *)&off_24C9FFFA0;
      LODWORD(exception[1].__vftable) = 0;
      __cxa_throw(exception, (struct type_info *)&unk_24C9FFFB8, (void (*)(void *))std::runtime_error::~runtime_error);
    }
  }
LABEL_12:
  v8 = v5[31];
  v9 = (v5[32] - v8) >> 3;
  v11 = v5[35];
  v10 = v5[36];
  *(double *)(v8 + 8 * v11) = v6;
  v12 = v11 + 1;
  if (v11 + 1 >= v9)
    v13 = v9;
  else
    v13 = 0;
  v5[35] = v12 - v13;
  if (v10 == v9)
  {
    v14 = v5[34] + 1;
    if (v14 < v10)
      v10 = 0;
    v5[34] = v14 - v10;
    v15 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    sub_20E8610C0(&v17, "Lidar frames are arriving with significant delays.");
    std::runtime_error::runtime_error(v15, &v17);
    v15->__vftable = (std::runtime_error_vtbl *)&off_24C9FFFA0;
    LODWORD(v15[1].__vftable) = 1;
    __cxa_throw(v15, (struct type_info *)&unk_24C9FFFB8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5[36] = v10 + 1;
  kdebug_trace();
  return sub_20F420058((uint64_t)a3, (uint64_t)v5);
}

void sub_20F42137C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  char v16;

  if (a15 < 0)
    operator delete(__p);
  if ((v16 & 1) != 0)
    __cxa_free_exception(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F4213C4(uint64_t result, _BYTE *a2)
{
  _QWORD *v2;
  int v3;
  int v4;
  int v5;

  v2 = (_QWORD *)result;
  v3 = *(_BYTE *)(result + 344) != 0;
  v4 = *a2;
  v5 = *a2 != 0;
  *(_BYTE *)(result + 344) = v4;
  if (v3 != v5)
    result = kdebug_trace();
  if (!v4)
  {
    v2[34] = 0;
    v2[35] = 0;
    v2[36] = 0;
  }
  return result;
}

uint64_t sub_20F421440(uint64_t result, _BYTE *a2)
{
  _QWORD *v2;
  int v3;
  int v4;
  int v5;

  v2 = (_QWORD *)result;
  v3 = *(_BYTE *)(result + 232) != 0;
  v4 = *a2;
  v5 = *a2 != 0;
  *(_BYTE *)(result + 232) = v4;
  if (v3 != v5)
    result = kdebug_trace();
  if (!v4)
  {
    v2[20] = 0;
    v2[21] = 0;
    v2[22] = 0;
  }
  return result;
}

void sub_20F4214BC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;

  *a1 = &off_24C9FFFE0;
  a1[7] = &unk_24CA00018;
  a1[14] = &unk_24CA00040;
  v2 = a1[37];
  if (v2)
  {
    v3 = a1[38];
    v4 = (void *)a1[37];
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)a1[37];
    }
    a1[38] = v2;
    operator delete(v4);
  }
  v8 = (void *)a1[31];
  if (v8)
  {
    a1[32] = v8;
    operator delete(v8);
  }
  sub_20ED625D0((uint64_t)a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F421594(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;

  *(a1 - 7) = &off_24C9FFFE0;
  v2 = (uint64_t)(a1 - 7);
  *a1 = &unk_24CA00018;
  a1[7] = &unk_24CA00040;
  v3 = a1[30];
  if (v3)
  {
    v4 = a1[31];
    v5 = (void *)a1[30];
    if (v4 != v3)
    {
      do
      {
        v6 = *(std::__shared_weak_count **)(v4 - 8);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 16;
      }
      while (v4 != v3);
      v5 = (void *)a1[30];
    }
    a1[31] = v3;
    operator delete(v5);
  }
  v9 = (void *)a1[24];
  if (v9)
  {
    a1[25] = v9;
    operator delete(v9);
  }
  return sub_20ED625D0(v2);
}

void sub_20F421664(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;

  *(a1 - 7) = &off_24C9FFFE0;
  v2 = (uint64_t)(a1 - 7);
  *a1 = &unk_24CA00018;
  a1[7] = &unk_24CA00040;
  v3 = a1[30];
  if (v3)
  {
    v4 = a1[31];
    v5 = (void *)a1[30];
    if (v4 != v3)
    {
      do
      {
        v6 = *(std::__shared_weak_count **)(v4 - 8);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 16;
      }
      while (v4 != v3);
      v5 = (void *)a1[30];
    }
    a1[31] = v3;
    operator delete(v5);
  }
  v9 = (void *)a1[24];
  if (v9)
  {
    a1[25] = v9;
    operator delete(v9);
  }
  sub_20ED625D0(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F421748(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;

  *(a1 - 14) = &off_24C9FFFE0;
  v2 = (uint64_t)(a1 - 14);
  *(a1 - 7) = &unk_24CA00018;
  *a1 = &unk_24CA00040;
  v3 = a1[23];
  if (v3)
  {
    v4 = a1[24];
    v5 = (void *)a1[23];
    if (v4 != v3)
    {
      do
      {
        v6 = *(std::__shared_weak_count **)(v4 - 8);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 16;
      }
      while (v4 != v3);
      v5 = (void *)a1[23];
    }
    a1[24] = v3;
    operator delete(v5);
  }
  v9 = (void *)a1[17];
  if (v9)
  {
    a1[18] = v9;
    operator delete(v9);
  }
  return sub_20ED625D0(v2);
}

void sub_20F421818(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;

  *(a1 - 14) = &off_24C9FFFE0;
  v2 = (uint64_t)(a1 - 14);
  *(a1 - 7) = &unk_24CA00018;
  *a1 = &unk_24CA00040;
  v3 = a1[23];
  if (v3)
  {
    v4 = a1[24];
    v5 = (void *)a1[23];
    if (v4 != v3)
    {
      do
      {
        v6 = *(std::__shared_weak_count **)(v4 - 8);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 16;
      }
      while (v4 != v3);
      v5 = (void *)a1[23];
    }
    a1[24] = v3;
    operator delete(v5);
  }
  v9 = (void *)a1[17];
  if (v9)
  {
    a1[18] = v9;
    operator delete(v9);
  }
  sub_20ED625D0(v2);
  JUMPOUT(0x212BC6398);
}

void sub_20F4218FC(double **a1, double **a2, uint64_t a3, char a4, __n128 a5)
{
  double **v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  double **v12;
  uint64_t v13;
  double *v14;
  double *v15;
  BOOL v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  double *v20;
  double v21;
  double *v22;
  int v23;
  double **v24;
  double **v25;
  double *v26;
  BOOL v27;
  BOOL v28;
  int v29;
  double *v30;
  BOOL v31;
  BOOL v32;
  int v33;
  double *v34;
  double **v35;
  double *v36;
  double *v37;
  BOOL v38;
  BOOL v39;
  int v40;
  double *v41;
  BOOL v42;
  BOOL v43;
  int v44;
  double **v45;
  __int128 v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  BOOL v53;
  BOOL v54;
  double *v55;
  double v56;
  double v57;
  int v58;
  double *v59;
  BOOL v60;
  BOOL v61;
  int v62;
  double **v63;
  double v64;
  int v65;
  double **v66;
  double *v67;
  BOOL v68;
  BOOL v69;
  int v70;
  double *v71;
  double *v72;
  double *v73;
  double *v74;
  BOOL v75;
  BOOL v76;
  int v77;
  double *v78;
  BOOL v79;
  BOOL v80;
  int v81;
  __n128 *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  double *v89;
  double *v90;
  double v91;
  int v92;
  double *v93;
  double **v94;
  BOOL v96;
  double **v97;
  double **v98;
  unint64_t *v99;
  double *v100;
  double v101;
  int v102;
  unint64_t *v103;
  unint64_t **v104;
  double **v105;
  double *v106;
  std::__shared_weak_count *v107;
  unint64_t *p_shared_owners;
  unint64_t v109;
  int v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  int64_t v114;
  int64_t v115;
  int64_t v116;
  uint64_t v117;
  double **v118;
  double v119;
  double v120;
  int v121;
  double **v122;
  double *v123;
  double v124;
  int v125;
  double *v126;
  double **v127;
  double *v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  double *v132;
  double v133;
  int v134;
  int v135;
  int v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  uint64_t v140;
  double **v141;
  uint64_t v142;
  double **v143;
  double *v144;
  double *v145;
  double **v146;
  double **v147;
  double *v148;
  double *v149;
  double v150;
  int v151;
  double *v152;
  std::__shared_weak_count *v153;
  double *v154;
  double *v155;
  unint64_t *v156;
  unint64_t v157;
  __int128 v158;
  double **v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  double **v168;
  double *v169;
  double v170;
  double v171;
  int v172;
  double *v173;
  double *v174;
  double **v175;
  double *v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  double v180;
  int v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  unint64_t *v185;
  double **v186;
  unint64_t *v187;
  double *v188;
  double v189;
  int v190;
  unint64_t *v191;
  unint64_t **v192;
  double **v193;
  double *v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  int v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  double **v202;
  double **v203;
  double **v204;
  double *v206;
  double **v207;

double **sub_20F4226D4(double **a1, double **a2, double **a3, uint64_t a4, uint64_t a5)
{
  double **result;
  double *v11;
  double v12;
  double v13;
  int v14;
  uint64_t v15;
  double *v16;
  double v17;
  double v18;
  int v19;
  double *v20;
  double *v21;
  double v22;
  double v23;
  int v24;
  double *v25;
  double *v26;
  double v27;
  double v28;
  int v29;
  double *v30;

  result = sub_20F422BC8(a1, a2, a3, a4);
  v11 = *(double **)a4;
  v12 = **(double **)a5;
  v13 = **(double **)a4;
  if (v12 == v13)
    v14 = 0;
  else
    v14 = -127;
  if (v12 > v13)
    v14 = 1;
  if (v12 < v13)
    v14 = -1;
  if (v14 != -127 && (v14 & 0x80) != 0)
  {
    *(_QWORD *)a4 = *(_QWORD *)a5;
    *(_QWORD *)a5 = v11;
    v15 = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = *(_QWORD *)(a5 + 8);
    *(_QWORD *)(a5 + 8) = v15;
    v16 = *a3;
    v17 = **(double **)a4;
    v18 = **a3;
    if (v17 == v18)
      v19 = 0;
    else
      v19 = -127;
    if (v17 > v18)
      v19 = 1;
    if (v17 < v18)
      v19 = -1;
    if (v19 != -127 && (v19 & 0x80) != 0)
    {
      *a3 = *(double **)a4;
      *(_QWORD *)a4 = v16;
      v20 = a3[1];
      a3[1] = *(double **)(a4 + 8);
      *(_QWORD *)(a4 + 8) = v20;
      v21 = *a2;
      v22 = **a3;
      v23 = **a2;
      if (v22 == v23)
        v24 = 0;
      else
        v24 = -127;
      if (v22 > v23)
        v24 = 1;
      if (v22 < v23)
        v24 = -1;
      if (v24 != -127 && (v24 & 0x80) != 0)
      {
        *a2 = *a3;
        *a3 = v21;
        v25 = a2[1];
        a2[1] = a3[1];
        a3[1] = v25;
        v26 = *a1;
        v27 = **a2;
        v28 = **a1;
        if (v27 == v28)
          v29 = 0;
        else
          v29 = -127;
        if (v27 > v28)
          v29 = 1;
        if (v27 < v28)
          v29 = -1;
        if (v29 != -127 && (v29 & 0x80) != 0)
        {
          *a1 = *a2;
          *a2 = v26;
          v30 = a1[1];
          a1[1] = a2[1];
          a2[1] = v30;
        }
      }
    }
  }
  return result;
}

double **sub_20F422834(double **result, double **a2, double **a3)
{
  double *v3;
  double *v4;
  double v5;
  double v6;
  int v7;
  int v8;
  double *v9;
  double v10;
  int v11;
  _BOOL4 v13;
  double **v14;
  double **v15;
  double *v16;
  double *v17;
  double v18;
  double v19;
  int v20;
  double *v21;
  double *v22;
  double v23;
  double v24;
  int v25;
  double *v26;

  v3 = *a2;
  v4 = *result;
  v5 = **a2;
  v6 = **result;
  if (v5 == v6)
    v7 = 0;
  else
    v7 = -127;
  if (v5 > v6)
    v7 = 1;
  if (v5 < v6)
    v8 = -1;
  else
    v8 = v7;
  v9 = *a3;
  v10 = **a3;
  if (v10 == v5)
    v11 = 0;
  else
    v11 = -127;
  if (v10 > v5)
    v11 = 1;
  if (v10 < v5)
    v11 = -1;
  v13 = v11 != -127 && v11 < 0;
  if (v8 == -127 || (v8 & 0x80) == 0)
  {
    if (v13)
    {
      *a2 = v9;
      *a3 = v3;
      v15 = a2 + 1;
      v16 = a2[1];
      a2[1] = a3[1];
      a3[1] = v16;
      v17 = *result;
      v18 = **a2;
      v19 = **result;
      if (v18 == v19)
        v20 = 0;
      else
        v20 = -127;
      if (v18 > v19)
        v20 = 1;
      if (v18 < v19)
        v20 = -1;
      if (v20 != -127 && (v20 & 0x80) != 0)
      {
        *result++ = *a2;
        *a2 = v17;
LABEL_48:
        v26 = *result;
        *result = *v15;
        *v15 = v26;
      }
    }
  }
  else
  {
    if (v13)
    {
      *result++ = v9;
      *a3 = v4;
      v14 = a3 + 1;
LABEL_47:
      v15 = v14;
      goto LABEL_48;
    }
    *result = v3;
    *a2 = v4;
    v21 = result[1];
    result[1] = a2[1];
    a2[1] = v21;
    v22 = *a2;
    v23 = **a3;
    v24 = **a2;
    if (v23 == v24)
      v25 = 0;
    else
      v25 = -127;
    if (v23 > v24)
      v25 = 1;
    if (v23 < v24)
      v25 = -1;
    if (v25 != -127 && (v25 & 0x80) != 0)
    {
      *a2 = *a3;
      *a3 = v22;
      v14 = a3 + 1;
      result = a2 + 1;
      goto LABEL_47;
    }
  }
  return result;
}

BOOL sub_20F422964(double **a1, double **a2)
{
  uint64_t v4;
  _BOOL8 result;
  double *v6;
  double *v7;
  double v8;
  int v9;
  double *v10;
  double **v11;
  __n128 v12;
  double **v13;
  int v14;
  unint64_t *v15;
  double *v16;
  double v17;
  int v18;
  double *v19;
  double **v20;
  double **v21;
  double *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  int v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;

  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 2);
      v7 = *a1;
      v8 = **a1;
      if (*v6 == v8)
        v9 = 0;
      else
        v9 = -127;
      if (*v6 > v8)
        v9 = 1;
      if (*v6 < v8)
        v9 = -1;
      if (v9 != -127 && (v9 & 0x80) != 0)
      {
        *a1 = v6;
        *(a2 - 2) = v7;
        v10 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v10;
      }
      return result;
    case 3:
      sub_20F422834(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      sub_20F422BC8(a1, a1 + 2, a1 + 4, (uint64_t)(a2 - 2));
      return 1;
    case 5:
      sub_20F4226D4(a1, a1 + 2, a1 + 4, (uint64_t)(a1 + 6), (uint64_t)(a2 - 2));
      return 1;
    default:
      v11 = a1 + 4;
      sub_20F422834(a1, a1 + 2, a1 + 4);
      v13 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = (unint64_t *)*v13;
    v16 = *v11;
    v12.n128_f64[0] = **v13;
    v17 = **v11;
    if (v12.n128_f64[0] == v17)
      v18 = 0;
    else
      v18 = -127;
    if (v12.n128_f64[0] > v17)
      v18 = 1;
    if (v12.n128_f64[0] < v17)
      v18 = -1;
    if (v18 != -127 && (v18 & 0x80) != 0)
    {
      v19 = v13[1];
      v20 = v13;
      *v13 = 0;
      v13[1] = 0;
      while (1)
      {
        v21 = v20;
        v20 = v11;
        v22 = v11[1];
        *v11 = 0;
        v11[1] = 0;
        v23 = (std::__shared_weak_count *)v21[1];
        *v21 = v16;
        v21[1] = v22;
        if (v23)
        {
          p_shared_owners = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(p_shared_owners);
          while (__stlxr(v25 - 1, p_shared_owners));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        if (v20 == a1)
          break;
        v11 = v20 - 2;
        v16 = *(v20 - 2);
        v12.n128_u64[0] = *v15;
        if (*(double *)v15 == *v16)
          v26 = 0;
        else
          v26 = -127;
        if (*(double *)v15 > *v16)
          v26 = 1;
        if (*(double *)v15 < *v16)
          v26 = -1;
        if (v26 == -127 || (v26 & 0x80) == 0)
          goto LABEL_43;
      }
      v20 = a1;
LABEL_43:
      v27 = (std::__shared_weak_count *)v20[1];
      *v20 = (double *)v15;
      v20[1] = v19;
      if (v27)
      {
        v28 = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v27->__on_zero_shared)(v27, v12);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      if (++v14 == 8)
        return v13 + 2 == a2;
    }
    v11 = v13;
    v13 += 2;
    if (v13 == a2)
      return 1;
  }
}

double **sub_20F422BC8(double **a1, double **a2, double **a3, uint64_t a4)
{
  double **result;
  double *v9;
  double v10;
  double v11;
  int v12;
  double *v13;
  double *v14;
  double v15;
  double v16;
  int v17;
  double *v18;
  double *v19;
  double v20;
  double v21;
  int v22;
  double *v23;

  result = sub_20F422834(a1, a2, a3);
  v9 = *a3;
  v10 = **(double **)a4;
  v11 = **a3;
  if (v10 == v11)
    v12 = 0;
  else
    v12 = -127;
  if (v10 > v11)
    v12 = 1;
  if (v10 < v11)
    v12 = -1;
  if (v12 != -127 && (v12 & 0x80) != 0)
  {
    *a3 = *(double **)a4;
    *(_QWORD *)a4 = v9;
    v13 = a3[1];
    a3[1] = *(double **)(a4 + 8);
    *(_QWORD *)(a4 + 8) = v13;
    v14 = *a2;
    v15 = **a3;
    v16 = **a2;
    if (v15 == v16)
      v17 = 0;
    else
      v17 = -127;
    if (v15 > v16)
      v17 = 1;
    if (v15 < v16)
      v17 = -1;
    if (v17 != -127 && (v17 & 0x80) != 0)
    {
      *a2 = *a3;
      *a3 = v14;
      v18 = a2[1];
      a2[1] = a3[1];
      a3[1] = v18;
      v19 = *a1;
      v20 = **a2;
      v21 = **a1;
      if (v20 == v21)
        v22 = 0;
      else
        v22 = -127;
      if (v20 > v21)
        v22 = 1;
      if (v20 < v21)
        v22 = -1;
      if (v22 != -127 && (v22 & 0x80) != 0)
      {
        *a1 = *a2;
        *a2 = v19;
        v23 = a1[1];
        a1[1] = a2[1];
        a2[1] = v23;
      }
    }
  }
  return result;
}

void sub_20F422CD4(char *a1, char *a2, unint64_t a3, __n128 *a4, uint64_t a5)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  __n128 *v32;
  __n128 v33;
  __n128 *v34;
  __n128 *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  __n128 v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  __n128 v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __n128 *v54;
  unint64_t i;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v60;

  if (a3 >= 2)
  {
    v6 = a1;
    if (a3 == 2)
    {
      v7 = *((_QWORD *)a2 - 2);
      v8 = *(_QWORD *)a1;
      if (*(unsigned __int8 *)(v7 + 112) < *(unsigned __int8 *)(*(_QWORD *)a1 + 112))
      {
        *(_QWORD *)a1 = v7;
        *((_QWORD *)a2 - 2) = v8;
        v9 = *((_QWORD *)a1 + 1);
        *((_QWORD *)a1 + 1) = *((_QWORD *)a2 - 1);
        *((_QWORD *)a2 - 1) = v9;
      }
    }
    else if ((uint64_t)a3 <= 0)
    {
      if (a1 != a2)
      {
        v16 = a1 + 16;
        if (a1 + 16 != a2)
        {
          v17 = a1;
          do
          {
            v18 = v17;
            v17 = v16;
            v19 = *(_QWORD *)v16;
            v20 = *(_QWORD *)v18;
            if (*(unsigned __int8 *)(v19 + 112) < *(unsigned __int8 *)(*(_QWORD *)v18 + 112))
            {
              v21 = *((_QWORD *)v18 + 3);
              v22 = v17;
              *(_QWORD *)v17 = 0;
              *((_QWORD *)v17 + 1) = 0;
              while (1)
              {
                v23 = v18;
                v24 = *((_QWORD *)v18 + 1);
                *(_QWORD *)v23 = 0;
                *((_QWORD *)v23 + 1) = 0;
                v25 = (std::__shared_weak_count *)*((_QWORD *)v22 + 1);
                *(_QWORD *)v22 = v20;
                *((_QWORD *)v22 + 1) = v24;
                if (v25)
                {
                  p_shared_owners = (unint64_t *)&v25->__shared_owners_;
                  do
                    v27 = __ldaxr(p_shared_owners);
                  while (__stlxr(v27 - 1, p_shared_owners));
                  if (!v27)
                  {
                    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
                    std::__shared_weak_count::__release_weak(v25);
                  }
                }
                if (v23 == v6)
                  break;
                v18 = v23 - 16;
                v20 = *((_QWORD *)v23 - 2);
                v22 = v23;
                if (*(unsigned __int8 *)(v19 + 112) >= *(unsigned __int8 *)(v20 + 112))
                {
                  v28 = (std::__shared_weak_count *)*((_QWORD *)v23 + 1);
                  *(_QWORD *)v23 = v19;
                  *((_QWORD *)v23 + 1) = v21;
                  if (!v28)
                    goto LABEL_12;
                  goto LABEL_25;
                }
              }
              v28 = (std::__shared_weak_count *)*((_QWORD *)v6 + 1);
              *(_QWORD *)v6 = v19;
              *((_QWORD *)v6 + 1) = v21;
              if (!v28)
                goto LABEL_12;
LABEL_25:
              v29 = (unint64_t *)&v28->__shared_owners_;
              do
                v30 = __ldaxr(v29);
              while (__stlxr(v30 - 1, v29));
              if (!v30)
              {
                ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
                std::__shared_weak_count::__release_weak(v28);
              }
            }
LABEL_12:
            v16 = v17 + 16;
          }
          while (v17 + 16 != a2);
        }
      }
    }
    else
    {
      v12 = a4;
      v13 = a3 >> 1;
      v14 = &a1[16 * (a3 >> 1)];
      if ((uint64_t)a3 <= a5)
      {
        sub_20F423158(a1, &a1[16 * (a3 >> 1)], a3 >> 1, a4);
        v31 = a3 - v13;
        v32 = &v12[v13];
        v33 = sub_20F423158(&v6[16 * (a3 >> 1)], a2, v31, v32);
        v60 = a3;
        v34 = &v12[a3];
        v35 = v32;
        while (v35 != v34)
        {
          v36 = v35->n128_u64[0];
          v37 = v12->n128_u64[0];
          if (*(unsigned __int8 *)(v35->n128_u64[0] + 112) >= *(unsigned __int8 *)(v12->n128_u64[0] + 112))
          {
            v42 = v12->n128_u64[1];
            v12->n128_u64[0] = 0;
            v12->n128_u64[1] = 0;
            v43 = (std::__shared_weak_count *)*((_QWORD *)v6 + 1);
            *(_QWORD *)v6 = v37;
            *((_QWORD *)v6 + 1) = v42;
            if (v43)
            {
              v44 = (unint64_t *)&v43->__shared_owners_;
              do
                v45 = __ldaxr(v44);
              while (__stlxr(v45 - 1, v44));
              if (!v45)
              {
                ((void (*)(std::__shared_weak_count *, __n128))v43->__on_zero_shared)(v43, v33);
                std::__shared_weak_count::__release_weak(v43);
              }
            }
            ++v12;
            v6 += 16;
            if (v12 == v32)
            {
LABEL_54:
              while (v35 != v34)
              {
                v50 = *v35;
                v35->n128_u64[0] = 0;
                v35->n128_u64[1] = 0;
                v51 = (std::__shared_weak_count *)*((_QWORD *)v6 + 1);
                *(__n128 *)v6 = v50;
                if (v51)
                {
                  v52 = (unint64_t *)&v51->__shared_owners_;
                  do
                    v53 = __ldaxr(v52);
                  while (__stlxr(v53 - 1, v52));
                  if (!v53)
                  {
                    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                    std::__shared_weak_count::__release_weak(v51);
                  }
                }
                ++v35;
                v6 += 16;
              }
              goto LABEL_60;
            }
          }
          else
          {
            v38 = v35->n128_u64[1];
            v35->n128_u64[0] = 0;
            v35->n128_u64[1] = 0;
            v39 = (std::__shared_weak_count *)*((_QWORD *)v6 + 1);
            *(_QWORD *)v6 = v36;
            *((_QWORD *)v6 + 1) = v38;
            if (!v39)
              goto LABEL_37;
            v40 = (unint64_t *)&v39->__shared_owners_;
            do
              v41 = __ldaxr(v40);
            while (__stlxr(v41 - 1, v40));
            if (!v41)
            {
              ((void (*)(std::__shared_weak_count *, __n128))v39->__on_zero_shared)(v39, v33);
              std::__shared_weak_count::__release_weak(v39);
              ++v35;
              v6 += 16;
              if (v12 == v32)
                goto LABEL_54;
            }
            else
            {
LABEL_37:
              ++v35;
              v6 += 16;
              if (v12 == v32)
                goto LABEL_54;
            }
          }
        }
        while (v12 != v32)
        {
          v46 = *v12;
          v12->n128_u64[0] = 0;
          v12->n128_u64[1] = 0;
          v47 = (std::__shared_weak_count *)*((_QWORD *)v6 + 1);
          *(__n128 *)v6 = v46;
          if (v47)
          {
            v48 = (unint64_t *)&v47->__shared_owners_;
            do
              v49 = __ldaxr(v48);
            while (__stlxr(v49 - 1, v48));
            if (!v49)
            {
              ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
              std::__shared_weak_count::__release_weak(v47);
            }
          }
          ++v12;
          v6 += 16;
        }
LABEL_60:
        v54 = a4;
        if (a4)
        {
          for (i = 0; i < v60; ++i)
          {
            v56 = (std::__shared_weak_count *)v54->n128_u64[1];
            if (v56)
            {
              v57 = (unint64_t *)&v56->__shared_owners_;
              do
                v58 = __ldaxr(v57);
              while (__stlxr(v58 - 1, v57));
              if (!v58)
              {
                ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                std::__shared_weak_count::__release_weak(v56);
              }
            }
            ++v54;
          }
        }
      }
      else
      {
        sub_20F422CD4(a1, &a1[16 * (a3 >> 1)], a3 >> 1, a4, a5);
        v15 = a3 - v13;
        sub_20F422CD4(v14, a2, v15, v12, a5);
        sub_20F4234F8(v6, v14, a2, v13, v15, (uint64_t)v12, a5);
      }
    }
  }
}

void sub_20F423144(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20F423458((uint64_t *)va);
  _Unwind_Resume(a1);
}

__n128 sub_20F423158(_QWORD *a1, _QWORD *a2, unint64_t a3, __n128 *a4)
{
  __n128 *v4;
  _QWORD *v7;
  unint64_t *v8;
  unint64_t *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  __n128 result;
  _QWORD *v14;
  __n128 *v15;
  __n128 *v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  __n128 *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  _QWORD *v42;

  if (a3)
  {
    v4 = a4;
    v7 = a1;
    if (a3 == 2)
    {
      v10 = a2 - 2;
      v11 = *(a2 - 2);
      v9 = &a4[1].n128_u64[1];
      if (*(unsigned __int8 *)(v11 + 112) >= *(unsigned __int8 *)(*a1 + 112))
      {
        v32 = a1[1];
        a4->n128_u64[0] = *a1;
        a4->n128_u64[1] = v32;
        *a1 = 0;
        a1[1] = 0;
        a4[1].n128_u64[0] = *(a2 - 2);
        v8 = a2 - 1;
      }
      else
      {
        v12 = *(a2 - 1);
        a4->n128_u64[0] = v11;
        a4->n128_u64[1] = v12;
        *v10 = 0;
        *(a2 - 1) = 0;
        v8 = a1 + 1;
        a4[1].n128_u64[0] = *a1;
        v10 = a1;
      }
      goto LABEL_30;
    }
    if (a3 == 1)
    {
      v8 = a1 + 1;
      a4->n128_u64[0] = *a1;
      v9 = &a4->n128_u64[1];
      v10 = a1;
LABEL_30:
      *v9 = *v8;
      *v10 = 0;
      v10[1] = 0;
      return result;
    }
    if ((uint64_t)a3 > 8)
    {
      v33 = a3 >> 1;
      v34 = 16 * (a3 >> 1);
      v35 = &a1[(unint64_t)v34 / 8];
      sub_20F422CD4(a1, &a1[(unint64_t)v34 / 8], a3 >> 1, a4, a3 >> 1);
      sub_20F422CD4(&v7[(unint64_t)v34 / 8], a2, a3 - v33, &v4[(unint64_t)v34 / 0x10], a3 - v33);
      v36 = &v7[(unint64_t)v34 / 8];
      while (v36 != a2)
      {
        if (*(unsigned __int8 *)(*v36 + 112) >= *(unsigned __int8 *)(*v7 + 112))
        {
          v37 = v7[1];
          v4->n128_u64[0] = *v7;
          v4->n128_u64[1] = v37;
          ++v4;
          *v7 = 0;
          v7[1] = 0;
          v7 += 2;
          if (v7 == v35)
            goto LABEL_37;
        }
        else
        {
          v38 = v36[1];
          v4->n128_u64[0] = *v36;
          v4->n128_u64[1] = v38;
          ++v4;
          *v36 = 0;
          v36[1] = 0;
          v36 += 2;
          if (v7 == v35)
          {
LABEL_37:
            if (v36 != a2)
            {
              v39 = 0;
              do
              {
                v40 = &v36[v39 / 8];
                result = *(__n128 *)&v36[v39 / 8];
                v4[v39 / 0x10] = result;
                *v40 = 0;
                v40[1] = 0;
                v39 += 16;
              }
              while (&v36[v39 / 8] != a2);
            }
            return result;
          }
        }
      }
      if (v7 != v35)
      {
        v41 = 0;
        do
        {
          v42 = &v7[v41 / 8];
          result = *(__n128 *)&v7[v41 / 8];
          v4[v41 / 0x10] = result;
          *v42 = 0;
          v42[1] = 0;
          v41 += 16;
        }
        while (&v7[v41 / 8] != v35);
      }
    }
    else if (a1 != a2)
    {
      result = *(__n128 *)a1;
      *a4 = *(__n128 *)a1;
      *a1 = 0;
      a1[1] = 0;
      v14 = a1 + 2;
      if (a1 + 2 != a2)
      {
        v15 = a4;
        v16 = a4;
        do
        {
          v18 = v7;
          v7 = v14;
          v20 = v16->n128_u64[0];
          ++v16;
          v19 = v20;
          if (*(unsigned __int8 *)(*v7 + 112) >= *(unsigned __int8 *)(v20 + 112))
          {
            v17 = v18[3];
            v15[1].n128_u64[0] = *v7;
            v15[1].n128_u64[1] = v17;
            *v7 = 0;
            v7[1] = 0;
          }
          else
          {
            v21 = v15->n128_i64[1];
            v15[1].n128_u64[0] = v19;
            v15[1].n128_u64[1] = v21;
            v15->n128_u64[0] = 0;
            v15->n128_u64[1] = 0;
            v22 = v4;
            if (v15 != v4)
            {
              while (1)
              {
                v22 = v15;
                v24 = v15[-1].n128_u64[0];
                --v15;
                v23 = v24;
                if (*(unsigned __int8 *)(*v7 + 112) >= *(unsigned __int8 *)(v24 + 112))
                  break;
                v25 = v22[-1].n128_u64[1];
                v15->n128_u64[0] = 0;
                v15->n128_u64[1] = 0;
                v26 = (std::__shared_weak_count *)v22->n128_u64[1];
                v22->n128_u64[0] = v23;
                v22->n128_u64[1] = v25;
                if (v26)
                {
                  p_shared_owners = (unint64_t *)&v26->__shared_owners_;
                  do
                    v28 = __ldaxr(p_shared_owners);
                  while (__stlxr(v28 - 1, p_shared_owners));
                  if (!v28)
                  {
                    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
                    std::__shared_weak_count::__release_weak(v26);
                  }
                }
                if (v15 == v4)
                {
                  v22 = v4;
                  break;
                }
              }
            }
            result = *(__n128 *)v7;
            *v7 = 0;
            v7[1] = 0;
            v29 = (std::__shared_weak_count *)v22->n128_u64[1];
            *v22 = result;
            if (v29)
            {
              v30 = (unint64_t *)&v29->__shared_owners_;
              do
                v31 = __ldaxr(v30);
              while (__stlxr(v31 - 1, v30));
              if (!v31)
              {
                ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
                std::__shared_weak_count::__release_weak(v29);
              }
            }
          }
          v14 = v7 + 2;
          v15 = v16;
        }
        while (v7 + 2 != a2);
      }
    }
  }
  return result;
}

uint64_t *sub_20F423458(uint64_t *a1)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (unint64_t *)a1[1];
    if (*v3)
    {
      v4 = 0;
      do
      {
        v5 = *(std::__shared_weak_count **)(v2 + 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        ++v4;
        v2 += 16;
      }
      while (v4 < *v3);
    }
  }
  return a1;
}

void sub_20F4234F8(char *a1, char *a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *i;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  _BOOL4 v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  _QWORD *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  __int128 v69;
  std::__shared_weak_count *v70;
  unint64_t *p_shared_owners;
  unint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  _QWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  char *v93;
  BOOL v94;
  __int128 v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;

  if (!a5)
    return;
  v9 = a2;
  while (a4 > a7 && a5 > a7)
  {
    if (!a4)
      return;
    v11 = 0;
    v12 = *(_QWORD *)v9;
    v13 = -a4;
    while (1)
    {
      v14 = *(_QWORD *)&a1[v11];
      if (*(unsigned __int8 *)(v14 + 112) > *(_DWORD *)(*(_QWORD *)v9 + 112))
        break;
      v11 += 16;
      if (__CFADD__(v13++, 1))
        return;
    }
    v16 = -v13;
    if (-v13 >= a5)
    {
      if (v13 == -1)
      {
        v105 = &a1[v11];
        *(_QWORD *)v105 = v12;
        *(_QWORD *)v9 = v14;
        v106 = *((_QWORD *)v105 + 1);
        *((_QWORD *)v105 + 1) = *((_QWORD *)v9 + 1);
        *((_QWORD *)v9 + 1) = v106;
        return;
      }
      if (v13 > 0)
        v16 = 1 - v13;
      v26 = v16 >> 1;
      v20 = &a1[16 * (v16 >> 1) + v11];
      v19 = v9;
      if (v9 != a3)
      {
        v40 = (a3 - v9) >> 4;
        v19 = v9;
        do
        {
          v41 = v40 >> 1;
          v42 = &v19[16 * (v40 >> 1)];
          v44 = *(_QWORD *)v42;
          v43 = v42 + 16;
          v40 += ~(v40 >> 1);
          if (*(unsigned __int8 *)(v44 + 112) < *(_DWORD *)(*(_QWORD *)v20 + 112))
            v19 = v43;
          else
            v40 = v41;
        }
        while (v40);
      }
      v18 = (v19 - v9) >> 4;
      if (v20 != v9)
      {
LABEL_22:
        if (v19 == v9)
        {
          v29 = v20;
        }
        else
        {
          v27 = *(_QWORD *)v20;
          *(_QWORD *)v20 = v12;
          *(_QWORD *)v9 = v27;
          v28 = *((_QWORD *)v20 + 1);
          *((_QWORD *)v20 + 1) = *((_QWORD *)v9 + 1);
          *((_QWORD *)v9 + 1) = v28;
          v29 = v20 + 16;
          for (i = v9 + 16; i != v19; i += 16)
          {
            if (v29 == v9)
              v9 = i;
            v31 = *(_QWORD *)v29;
            *(_QWORD *)v29 = *(_QWORD *)i;
            *(_QWORD *)i = v31;
            v32 = *((_QWORD *)v29 + 1);
            *((_QWORD *)v29 + 1) = *((_QWORD *)i + 1);
            *((_QWORD *)i + 1) = v32;
            v29 += 16;
          }
          if (v29 != v9)
          {
            v33 = v29;
            v34 = v9;
            while (1)
            {
              v35 = *(_QWORD *)v33;
              *(_QWORD *)v33 = *(_QWORD *)v34;
              *(_QWORD *)v34 = v35;
              v36 = *((_QWORD *)v33 + 1);
              *((_QWORD *)v33 + 1) = *((_QWORD *)v34 + 1);
              *((_QWORD *)v34 + 1) = v36;
              v33 += 16;
              v34 += 16;
              v37 = v33 == v9;
              if (v34 == v19)
              {
                if (v33 == v9)
                  goto LABEL_49;
                v34 = v9 + 16;
                while (1)
                {
                  v38 = *(_QWORD *)v33;
                  *(_QWORD *)v33 = *(_QWORD *)v9;
                  *(_QWORD *)v9 = v38;
                  v39 = *((_QWORD *)v33 + 1);
                  *((_QWORD *)v33 + 1) = *((_QWORD *)v9 + 1);
                  *((_QWORD *)v9 + 1) = v39;
                  v33 += 16;
                  v37 = v33 == v9;
                  if (v34 != v19)
                    break;
                  if (v33 == v9)
                    goto LABEL_49;
                }
              }
              if (v37)
                v9 = v34;
            }
          }
        }
        goto LABEL_49;
      }
    }
    else
    {
      if (a5 >= 0)
        v17 = a5;
      else
        v17 = a5 + 1;
      v18 = v17 >> 1;
      v19 = &v9[16 * (v17 >> 1)];
      v20 = v9;
      if (v9 - a1 != v11)
      {
        v21 = (v9 - a1 - v11) >> 4;
        v20 = &a1[v11];
        do
        {
          v22 = v21 >> 1;
          v23 = &v20[16 * (v21 >> 1)];
          v25 = *(_QWORD *)v23;
          v24 = v23 + 16;
          v21 += ~(v21 >> 1);
          if (*(_DWORD *)(*(_QWORD *)v19 + 112) < *(unsigned __int8 *)(v25 + 112))
            v21 = v22;
          else
            v20 = v24;
        }
        while (v21);
      }
      v26 = (v20 - a1 - v11) >> 4;
      if (v20 != v9)
        goto LABEL_22;
    }
    v29 = v19;
LABEL_49:
    a4 = -(v26 + v13);
    v45 = a5 - v18;
    if (v26 + v18 >= a5 - (v26 + v18) - v13)
    {
      v50 = &a1[v11];
      v51 = a6;
      sub_20F4234F8(v29, v19, a3, a4, a5 - v18, a6, a7);
      v52 = v50;
      a6 = v51;
      v9 = v20;
      a4 = v26;
      a3 = v29;
      a5 = v18;
      a1 = v52;
      if (!v18)
        return;
    }
    else
    {
      v46 = &a1[v11];
      v47 = a3;
      v48 = v18;
      v49 = a6;
      sub_20F4234F8(v46, v20, v29, v26, v48, a6, a7);
      a3 = v47;
      a6 = v49;
      v9 = v19;
      a5 = v45;
      a1 = v29;
      if (!v45)
        return;
    }
  }
  if (a4 > a5)
  {
    if (a3 == v9)
      return;
    v53 = 0;
    v54 = 0;
    do
    {
      v55 = &v9[v53];
      *(_OWORD *)(a6 + v53) = *(_OWORD *)&v9[v53];
      *(_QWORD *)v55 = 0;
      *((_QWORD *)v55 + 1) = 0;
      ++v54;
      v53 += 16;
    }
    while (&v9[v53] != a3);
    if (!v53)
      goto LABEL_106;
    v56 = (_QWORD *)(a6 + v53);
    while (2)
    {
      if (v9 == a1)
      {
        do
        {
          v69 = *((_OWORD *)v56 - 1);
          v56 -= 2;
          *v56 = 0;
          v56[1] = 0;
          v70 = (std::__shared_weak_count *)*((_QWORD *)a3 - 1);
          *((_OWORD *)a3 - 1) = v69;
          a3 -= 16;
          if (v70)
          {
            p_shared_owners = (unint64_t *)&v70->__shared_owners_;
            do
              v72 = __ldaxr(p_shared_owners);
            while (__stlxr(v72 - 1, p_shared_owners));
            if (!v72)
            {
              v73 = a6;
              v74 = a3;
              ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
              std::__shared_weak_count::__release_weak(v70);
              a3 = v74;
              a6 = v73;
            }
          }
        }
        while (v56 != (_QWORD *)a6);
        goto LABEL_106;
      }
      v57 = v9 - 16;
      v58 = *((_QWORD *)v9 - 2);
      v59 = *(v56 - 2);
      if (*(unsigned __int8 *)(v59 + 112) >= *(unsigned __int8 *)(v58 + 112))
      {
        v64 = *(v56 - 1);
        *(v56 - 2) = 0;
        *(v56 - 1) = 0;
        v61 = (std::__shared_weak_count *)*((_QWORD *)a3 - 1);
        *((_QWORD *)a3 - 2) = v59;
        *((_QWORD *)a3 - 1) = v64;
        if (v61)
        {
          v65 = (unint64_t *)&v61->__shared_owners_;
          do
            v66 = __ldaxr(v65);
          while (__stlxr(v66 - 1, v65));
          v57 = v9;
          v56 -= 2;
          if (!v66)
          {
LABEL_73:
            v67 = a6;
            v68 = a3;
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
            a3 = v68;
            a6 = v67;
          }
        }
        else
        {
          v57 = v9;
          v56 -= 2;
        }
      }
      else
      {
        v60 = *((_QWORD *)v9 - 1);
        *(_QWORD *)v57 = 0;
        *((_QWORD *)v9 - 1) = 0;
        v61 = (std::__shared_weak_count *)*((_QWORD *)a3 - 1);
        *((_QWORD *)a3 - 2) = v58;
        *((_QWORD *)a3 - 1) = v60;
        if (v61)
        {
          v62 = (unint64_t *)&v61->__shared_owners_;
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 - 1, v62));
          if (!v63)
            goto LABEL_73;
        }
      }
      a3 -= 16;
      v9 = v57;
      if (v56 == (_QWORD *)a6)
        goto LABEL_106;
      continue;
    }
  }
  if (a1 != v9)
  {
    v75 = 0;
    v54 = 0;
    do
    {
      v76 = &a1[v75];
      *(_OWORD *)(a6 + v75) = *(_OWORD *)&a1[v75];
      *(_QWORD *)v76 = 0;
      *((_QWORD *)v76 + 1) = 0;
      ++v54;
      v75 += 16;
    }
    while (&a1[v75] != v9);
    if (!v75)
      goto LABEL_106;
    v77 = (_QWORD *)(a6 + v75);
    v78 = a6 + v75 - 16;
    v79 = (_QWORD *)a6;
    while (v9 != a3)
    {
      v80 = *(_QWORD *)v9;
      v81 = *v79;
      if (*(unsigned __int8 *)(*(_QWORD *)v9 + 112) >= *(unsigned __int8 *)(*v79 + 112))
      {
        v88 = v79[1];
        *v79 = 0;
        v79[1] = 0;
        v89 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
        *(_QWORD *)a1 = v81;
        *((_QWORD *)a1 + 1) = v88;
        if (v89)
        {
          v90 = (unint64_t *)&v89->__shared_owners_;
          do
            v91 = __ldaxr(v90);
          while (__stlxr(v91 - 1, v90));
          if (!v91)
          {
            v92 = a6;
            v93 = a3;
            ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
            std::__shared_weak_count::__release_weak(v89);
            a3 = v93;
            a6 = v92;
          }
        }
        v79 += 2;
        a1 += 16;
        if (v77 == v79)
          goto LABEL_106;
      }
      else
      {
        v82 = *((_QWORD *)v9 + 1);
        *(_QWORD *)v9 = 0;
        *((_QWORD *)v9 + 1) = 0;
        v83 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
        *(_QWORD *)a1 = v80;
        *((_QWORD *)a1 + 1) = v82;
        if (v83)
        {
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldaxr(v84);
          while (__stlxr(v85 - 1, v84));
          if (!v85)
          {
            v86 = a6;
            v87 = a3;
            ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
            std::__shared_weak_count::__release_weak(v83);
            a3 = v87;
            a6 = v86;
          }
        }
        v9 += 16;
        a1 += 16;
        if (v77 == v79)
          goto LABEL_106;
      }
    }
    do
    {
      v95 = *(_OWORD *)v79;
      *v79 = 0;
      v79[1] = 0;
      v96 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
      *(_OWORD *)a1 = v95;
      if (v96)
      {
        v97 = (unint64_t *)&v96->__shared_owners_;
        do
          v98 = __ldaxr(v97);
        while (__stlxr(v98 - 1, v97));
        if (!v98)
        {
          v99 = a6;
          ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
          std::__shared_weak_count::__release_weak(v96);
          a6 = v99;
        }
      }
      a1 += 16;
      v94 = v78 == (_QWORD)v79;
      v79 += 2;
    }
    while (!v94);
LABEL_106:
    if (a6)
    {
      v100 = 0;
      do
      {
        v101 = *(std::__shared_weak_count **)(a6 + 8);
        if (v101)
        {
          v102 = (unint64_t *)&v101->__shared_owners_;
          do
            v103 = __ldaxr(v102);
          while (__stlxr(v103 - 1, v102));
          if (!v103)
          {
            v104 = a6;
            ((void (*)(std::__shared_weak_count *, char *, char *))v101->__on_zero_shared)(v101, a2, a3);
            std::__shared_weak_count::__release_weak(v101);
            a6 = v104;
          }
        }
        ++v100;
        a6 += 16;
      }
      while (v100 != v54);
    }
  }
}

uint64_t sub_20F423BD0(float **a1, uint64_t a2, uint64_t a3)
{
  float *v6;
  float *v7;
  unsigned int v8;
  unsigned int v9;
  float v10;
  float v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  BOOL v24;
  float v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  float v30;
  unsigned int v32;
  uint64_t v33;
  float v34;
  unsigned int v36;
  uint64_t v37;
  float v38;
  uint64_t v40;
  float v41;
  int v44;
  int v45;

  v45 = 0;
  sub_20F4253D4(a2, (const float *)&v45);
  v44 = 0;
  sub_20F4253D4(a3, (const float *)&v44);
  v6 = *a1;
  v7 = a1[1];
  if (*a1 == v7)
  {
    LOBYTE(v21) = 1;
  }
  else
  {
    v8 = *(_DWORD *)(a2 + 32);
    v9 = *(_DWORD *)(a2 + 36);
    v10 = (float)v8 + -1.0;
    v11 = (float)v9 + -1.0;
    v12 = v8 - 1;
    v13 = v9 - 1;
    v14 = *(_DWORD *)(a2 + 40);
    v15 = *(_DWORD *)(a2 + 44);
    v16 = *(_QWORD *)(a2 + 24);
    v17 = *(_QWORD *)(a3 + 24);
    v19 = *(_DWORD *)(a3 + 40);
    v18 = *(_DWORD *)(a3 + 44);
    v20 = 1;
    do
    {
      v21 = 0;
      v22 = *v6 + -0.5;
      if (v22 >= 0.0)
      {
        v23 = v6[1] + -0.5;
        v24 = v23 >= 0.0 && v22 <= v10;
        if (v24 && v23 <= v11)
        {
          v26 = v6[2];
          v27 = v22;
          if (v12 < v22)
            v27 = v12;
          if (v13 >= v23)
            v28 = v23;
          else
            v28 = v13;
          v29 = v28 * v15 + v27 * v14;
          v30 = *(float *)(v16 + 4 * v29);
          if (v30 <= 0.0 || v30 > v26)
          {
            *(float *)(v16 + 4 * v29) = v26;
            *(_DWORD *)(v17 + 4 * (v27 * v19 + v28 * v18)) = 1065353216;
          }
          v32 = (float)(v22 + 1.0);
          if (v12 < v32)
            v32 = v12;
          v33 = v28 * v15 + v32 * v14;
          v34 = *(float *)(v16 + 4 * v33);
          if (v34 <= 0.0 || v34 > v26)
          {
            *(float *)(v16 + 4 * v33) = v26;
            *(_DWORD *)(v17 + 4 * (v28 * v18 + v32 * v19)) = 1065353216;
          }
          v36 = (float)(v23 + 1.0);
          if (v13 < v36)
            v36 = v13;
          v37 = v36 * v15 + v27 * v14;
          v38 = *(float *)(v16 + 4 * v37);
          if (v38 <= 0.0 || v38 > v26)
          {
            *(float *)(v16 + 4 * v37) = v26;
            *(_DWORD *)(v17 + 4 * (v27 * v19 + v36 * v18)) = 1065353216;
          }
          v40 = v36 * v15 + v32 * v14;
          v41 = *(float *)(v16 + 4 * v40);
          if (v41 <= 0.0 || v41 > v26)
          {
            *(float *)(v16 + 4 * v40) = v26;
            *(_DWORD *)(v17 + 4 * (v32 * v19 + v36 * v18)) = 1065353216;
          }
          v21 = v20;
        }
      }
      v6 += 3;
      v20 = v21;
    }
    while (v6 != v7);
  }
  return v21 & 1;
}

void sub_20F423D9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  int v32;
  uint64_t (**v33)();
  __int16 v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  int v37;
  int v38;

  v32 = 0;
  v33 = &off_24C9AD388;
  sub_20E8A5D1C((_DWORD *)(a2 + 32), &v32, &v34);
  sub_20F423FD0(a2, (uint64_t)&v33);
  if (a1)
  {
    v4 = 0;
    while (1)
    {
      v5 = *(_DWORD *)(a2 + 36) - 1;
      if (*(_DWORD *)(a2 + 36) != 2)
      {
        v6 = *(_DWORD *)(a2 + 32) - 2;
        if (*(_DWORD *)(a2 + 32) != 2)
          break;
      }
LABEL_5:
      sub_20F42477C((uint64_t)&v33, a2);
      if (++v4 == a1)
        goto LABEL_21;
    }
    v7 = 0;
    v8 = *(_DWORD *)(a2 + 40);
    v9 = *(_DWORD *)(a2 + 44);
    v10 = *(_QWORD *)(a2 + 24);
    v11 = v9 + v8;
    v12 = 1;
    v13 = 2;
LABEL_9:
    v14 = 0;
    v15 = v37;
    v16 = v38 * v12;
    v17 = v36;
    ++v12;
    v18 = v37 + v38 * v13;
    v19 = v37 + v38 * v7;
    v20 = v16 + 2 * v37;
    v21 = v11;
    v22 = v6;
    while (1)
    {
      v23 = v21;
      v24 = *(float *)(v10 + 4 * v21);
      if (v24 <= 0.0)
        goto LABEL_10;
      v25 = (v16 + v14);
      if (*(float *)(v17 + 4 * v25) <= 0.0)
      {
        *(float *)(v17 + 4 * v25) = v24;
        v26 = (v20 + v14);
        if (*(float *)(v17 + 4 * v26) > 0.0)
        {
LABEL_14:
          v27 = (v19 + v14);
          if (*(float *)(v17 + 4 * v27) > 0.0)
            goto LABEL_15;
          goto LABEL_19;
        }
      }
      else
      {
        v26 = (v20 + v14);
        if (*(float *)(v17 + 4 * v26) > 0.0)
          goto LABEL_14;
      }
      *(_DWORD *)(v17 + 4 * v26) = *(_DWORD *)(v10 + 4 * v23);
      v27 = (v19 + v14);
      if (*(float *)(v17 + 4 * v27) > 0.0)
      {
LABEL_15:
        v28 = (v18 + v14);
        if (*(float *)(v17 + 4 * v28) <= 0.0)
          goto LABEL_20;
        goto LABEL_10;
      }
LABEL_19:
      *(_DWORD *)(v17 + 4 * v27) = *(_DWORD *)(v10 + 4 * v23);
      v28 = (v18 + v14);
      if (*(float *)(v17 + 4 * v28) <= 0.0)
LABEL_20:
        *(_DWORD *)(v17 + 4 * v28) = *(_DWORD *)(v10 + 4 * v23);
LABEL_10:
      v14 += v15;
      v21 = v23 + v8;
      if (!--v22)
      {
        ++v13;
        ++v7;
        v11 += v9;
        if (v12 == v5)
          goto LABEL_5;
        goto LABEL_9;
      }
    }
  }
LABEL_21:
  v29 = v35;
  if (v35)
  {
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_20F423FA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86665C(v1);
  _Unwind_Resume(a1);
}

void sub_20F423FBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86665C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20F423FD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  const void *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  size_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t result;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 49))
      goto LABEL_15;
LABEL_18:
    v61 = 0;
    v14 = *(_QWORD *)(a2 + 8);
    v13 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v13)
      goto LABEL_23;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 49))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 96))(&v61, v4, 1);
  v14 = *(_QWORD *)(a2 + 8);
  v13 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v13)
    goto LABEL_23;
LABEL_19:
  v15 = (unint64_t *)&v13->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
LABEL_23:
    if (!v14)
      goto LABEL_28;
    goto LABEL_24;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  if (!v14)
  {
LABEL_28:
    v60 = 0;
    v18 = *(unsigned int *)(a1 + 32);
    v19 = *(_DWORD *)(a1 + 44);
    if (v19 != (_DWORD)v18)
      goto LABEL_49;
    goto LABEL_29;
  }
LABEL_24:
  if (!*(_BYTE *)(a2 + 81))
    goto LABEL_28;
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 96))(&v60, *(_QWORD *)(a2 + 8), 1);
  v18 = *(unsigned int *)(a1 + 32);
  v19 = *(_DWORD *)(a1 + 44);
  if (v19 != (_DWORD)v18)
    goto LABEL_49;
LABEL_29:
  if (v19 == *(_DWORD *)(a2 + 76))
  {
    v20 = *(_DWORD *)(a1 + 36);
    v21 = *(const void **)(a1 + 24);
    if (*(_BYTE *)(a1 + 48) && v21)
    {
      v22 = *(_QWORD *)(a1 + 8);
      v23 = *(std::__shared_weak_count **)(a1 + 16);
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
        do
          v26 = __ldaxr(v24);
        while (__stlxr(v26 - 1, v24));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v22 + 88))(v22, 1, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v21 = *(const void **)(a1 + 24);
    }
    v27 = v20 * (unint64_t)v18;
    if (!v27
      || v21
      || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      v28 = *(void **)(a2 + 32);
      if (*(_BYTE *)(a2 + 80) && v28)
      {
        (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(a2 + 8) + 88))(*(_QWORD *)(a2 + 8), 1, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
        v28 = *(void **)(a2 + 32);
      }
      if (!v27 || v28)
      {
        if (!v27)
          goto LABEL_116;
      }
      else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_48;
      }
      memmove(v28, v21, 4 * v27);
      goto LABEL_116;
    }
LABEL_48:
    abort();
  }
LABEL_49:
  v29 = *(_QWORD *)(a1 + 8);
  if (!v29)
    goto LABEL_65;
  v30 = *(std::__shared_weak_count **)(a1 + 16);
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
    do
      v33 = __ldaxr(v31);
    while (__stlxr(v33 - 1, v31));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
    v29 = *(_QWORD *)(a1 + 8);
    v34 = *(std::__shared_weak_count **)(a1 + 16);
    if (v34)
    {
      v35 = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
      do
        v37 = __ldaxr(v35);
      while (__stlxr(v37 - 1, v35));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
  }
  if (*(_BYTE *)(a1 + 49))
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v29 + 96))(&v63, v29, 1);
    v39 = *(_QWORD *)(a2 + 8);
    v38 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v38)
      goto LABEL_70;
  }
  else
  {
LABEL_65:
    v63 = 0;
    v39 = *(_QWORD *)(a2 + 8);
    v38 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v38)
      goto LABEL_70;
  }
  v40 = (unint64_t *)&v38->__shared_owners_;
  do
    v41 = __ldxr(v40);
  while (__stxr(v41 + 1, v40));
  do
    v42 = __ldaxr(v40);
  while (__stlxr(v42 - 1, v40));
  if (!v42)
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
    if (!v39)
      goto LABEL_77;
    goto LABEL_71;
  }
LABEL_70:
  if (!v39)
    goto LABEL_77;
LABEL_71:
  if (*(_BYTE *)(a2 + 81))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 96))(&v62, *(_QWORD *)(a2 + 8), 1);
    if (!*(_DWORD *)(a1 + 32))
      goto LABEL_112;
    goto LABEL_78;
  }
LABEL_77:
  v62 = 0;
  if (!*(_DWORD *)(a1 + 32))
    goto LABEL_112;
LABEL_78:
  v43 = *(_DWORD *)(a1 + 36);
  if (!v43)
    goto LABEL_112;
  v44 = *(unsigned int *)(a1 + 44);
  v45 = *(unsigned int *)(a2 + 76);
  v46 = *(char **)(a1 + 24);
  if (*(_BYTE *)(a1 + 48) && v46)
  {
    v47 = *(_QWORD *)(a1 + 8);
    v48 = *(std::__shared_weak_count **)(a1 + 16);
    if (v48)
    {
      v49 = (unint64_t *)&v48->__shared_owners_;
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
      do
        v51 = __ldaxr(v49);
      while (__stlxr(v51 - 1, v49));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v47 + 88))(v47, 1, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v46 = *(char **)(a1 + 24);
  }
  v52 = *(char **)(a2 + 32);
  if (*(_BYTE *)(a2 + 80) && v52)
  {
    (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(a2 + 8) + 88))(*(_QWORD *)(a2 + 8), 1, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
    v52 = *(char **)(a2 + 32);
  }
  v53 = 4 * v18;
  v54 = v43 - 1;
  if (v43 == 1)
  {
    v59 = v18;
LABEL_101:
    if (!v59 || v46)
    {
      if (!v52 && v59)
      {
LABEL_108:
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_99;
        }
        v52 = 0;
        goto LABEL_111;
      }
      if (!v59)
        goto LABEL_112;
    }
    else
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_99;
      }
      if (!v52)
        goto LABEL_108;
    }
LABEL_111:
    memmove(v52, v46, v53);
    goto LABEL_112;
  }
  if ((_DWORD)v18)
  {
    v59 = v18;
    while ((v46
          || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))&& (v52|| !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)))
    {
      memmove(v52, v46, v53);
      v46 += 4 * v44;
      v52 += 4 * v45;
      if (!--v54)
        goto LABEL_101;
    }
LABEL_99:
    abort();
  }
LABEL_112:
  v55 = v62;
  v62 = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  v56 = v63;
  v63 = 0;
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
LABEL_116:
  v57 = v60;
  v60 = 0;
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  result = v61;
  v61 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_20F4246A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;
  uint64_t v16;

  if (a14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
    v15 = a11;
    if (!a11)
    {
LABEL_3:
      v16 = a12;
      if (!a12)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v15 = a11;
    if (!a11)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = a12;
  if (!a12)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F42477C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  const void *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  size_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t result;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
  {
    if (!v4)
    {
LABEL_20:
      v79 = 0;
      v13 = *(_QWORD *)(a2 + 8);
      if (!v13)
        goto LABEL_36;
      goto LABEL_21;
    }
    goto LABEL_16;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    if (!v4)
      goto LABEL_20;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (!v4)
      goto LABEL_20;
  }
  v4 = *(_QWORD *)(a1 + 8);
  v9 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v9)
    goto LABEL_16;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_16:
    if (!*(_BYTE *)(a1 + 81))
      goto LABEL_20;
    goto LABEL_17;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 81))
    goto LABEL_20;
LABEL_17:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v79, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (!v13)
    goto LABEL_36;
LABEL_21:
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v14)
    goto LABEL_151;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  v13 = *(_QWORD *)(a2 + 8);
  v18 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v18)
    goto LABEL_151;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 - 1, v19));
  if (v21)
  {
LABEL_151:
    if (*(_BYTE *)(a2 + 49))
      goto LABEL_33;
LABEL_36:
    v78 = 0;
    v22 = *(unsigned int *)(a1 + 64);
    v23 = *(_DWORD *)(a1 + 76);
    if (v23 != (_DWORD)v22)
      goto LABEL_63;
LABEL_37:
    if (v23 != *(_DWORD *)(a2 + 44))
      goto LABEL_63;
    v24 = *(_DWORD *)(a1 + 68);
    v25 = *(const void **)(a1 + 56);
    if (*(_BYTE *)(a1 + 80) && v25)
    {
      v26 = *(_QWORD *)(a1 + 8);
      v27 = *(std::__shared_weak_count **)(a1 + 16);
      if (v27)
      {
        v28 = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
        do
          v30 = __ldaxr(v28);
        while (__stlxr(v30 - 1, v28));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v26 + 88))(v26, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Image/include/Kit/Image/Image.h:1196");
      v25 = *(const void **)(a1 + 56);
    }
    v31 = v24 * (unint64_t)v22;
    if (!v31
      || v25
      || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      v32 = *(void **)(a2 + 24);
      if (*(_BYTE *)(a2 + 48) && v32)
      {
        v33 = *(_QWORD *)(a2 + 8);
        v34 = *(std::__shared_weak_count **)(a2 + 16);
        if (v34)
        {
          v35 = (unint64_t *)&v34->__shared_owners_;
          do
            v36 = __ldxr(v35);
          while (__stxr(v36 + 1, v35));
          do
            v37 = __ldaxr(v35);
          while (__stlxr(v37 - 1, v35));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
        }
        (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v33 + 88))(v33, 1, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
        v32 = *(void **)(a2 + 24);
      }
      if (!v31 || v32)
      {
        if (!v31)
          goto LABEL_145;
      }
      else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_62;
      }
      memmove(v32, v25, 4 * v31);
      goto LABEL_145;
    }
LABEL_62:
    abort();
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (!*(_BYTE *)(a2 + 49))
    goto LABEL_36;
LABEL_33:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v13 + 96))(&v78, v13, 1);
  v22 = *(unsigned int *)(a1 + 64);
  v23 = *(_DWORD *)(a1 + 76);
  if (v23 == (_DWORD)v22)
    goto LABEL_37;
LABEL_63:
  v38 = *(_QWORD *)(a1 + 8);
  v39 = *(std::__shared_weak_count **)(a1 + 16);
  if (v39)
  {
    v40 = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
    do
      v42 = __ldaxr(v40);
    while (__stlxr(v42 - 1, v40));
    if (v42)
    {
      if (!v38)
        goto LABEL_84;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
      if (!v38)
        goto LABEL_84;
    }
    v38 = *(_QWORD *)(a1 + 8);
    v43 = *(std::__shared_weak_count **)(a1 + 16);
    if (v43)
    {
      v44 = (unint64_t *)&v43->__shared_owners_;
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
      do
        v46 = __ldaxr(v44);
      while (__stlxr(v46 - 1, v44));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
  }
  else if (!v38)
  {
    goto LABEL_84;
  }
  if (*(_BYTE *)(a1 + 81))
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v38 + 96))(&v81, v38, 0);
    v47 = *(_QWORD *)(a2 + 8);
    if (!v47)
      goto LABEL_100;
    goto LABEL_85;
  }
LABEL_84:
  v81 = 0;
  v47 = *(_QWORD *)(a2 + 8);
  if (!v47)
    goto LABEL_100;
LABEL_85:
  v48 = *(std::__shared_weak_count **)(a2 + 16);
  if (v48)
  {
    v49 = (unint64_t *)&v48->__shared_owners_;
    do
      v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
    do
      v51 = __ldaxr(v49);
    while (__stlxr(v51 - 1, v49));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
    v47 = *(_QWORD *)(a2 + 8);
    v52 = *(std::__shared_weak_count **)(a2 + 16);
    if (v52)
    {
      v53 = (unint64_t *)&v52->__shared_owners_;
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
      do
        v55 = __ldaxr(v53);
      while (__stlxr(v55 - 1, v53));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
  }
  if (*(_BYTE *)(a2 + 49))
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v47 + 96))(&v80, v47, 1);
    if (!*(_DWORD *)(a1 + 64))
      goto LABEL_141;
    goto LABEL_101;
  }
LABEL_100:
  v80 = 0;
  if (!*(_DWORD *)(a1 + 64))
    goto LABEL_141;
LABEL_101:
  v56 = *(_DWORD *)(a1 + 68);
  if (!v56)
    goto LABEL_141;
  v57 = *(unsigned int *)(a1 + 76);
  v58 = *(unsigned int *)(a2 + 44);
  v59 = *(char **)(a1 + 56);
  if (*(_BYTE *)(a1 + 80) && v59)
  {
    v60 = *(_QWORD *)(a1 + 8);
    v61 = *(std::__shared_weak_count **)(a1 + 16);
    if (v61)
    {
      v62 = (unint64_t *)&v61->__shared_owners_;
      do
        v63 = __ldxr(v62);
      while (__stxr(v63 + 1, v62));
      do
        v64 = __ldaxr(v62);
      while (__stlxr(v64 - 1, v62));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v60 + 88))(v60, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Image/include/Kit/Image/Image.h:1196");
    v59 = *(char **)(a1 + 56);
  }
  v65 = *(char **)(a2 + 24);
  if (*(_BYTE *)(a2 + 48) && v65)
  {
    v66 = *(_QWORD *)(a2 + 8);
    v67 = *(std::__shared_weak_count **)(a2 + 16);
    if (v67)
    {
      v68 = (unint64_t *)&v67->__shared_owners_;
      do
        v69 = __ldxr(v68);
      while (__stxr(v69 + 1, v68));
      do
        v70 = __ldaxr(v68);
      while (__stlxr(v70 - 1, v68));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
    (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v66 + 88))(v66, 1, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v65 = *(char **)(a2 + 24);
  }
  v71 = 4 * v22;
  v72 = v56 - 1;
  if (v56 == 1)
  {
    v77 = v22;
LABEL_130:
    if (!v77 || v59)
    {
      if (!v65 && v77)
      {
LABEL_137:
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_128;
        }
        v65 = 0;
        goto LABEL_140;
      }
      if (!v77)
        goto LABEL_141;
    }
    else
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_128;
      }
      if (!v65)
        goto LABEL_137;
    }
LABEL_140:
    memmove(v65, v59, v71);
    goto LABEL_141;
  }
  if ((_DWORD)v22)
  {
    v77 = v22;
    while ((v59
          || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))&& (v65|| !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)))
    {
      memmove(v65, v59, v71);
      v59 += 4 * v57;
      v65 += 4 * v58;
      if (!--v72)
        goto LABEL_130;
    }
LABEL_128:
    abort();
  }
LABEL_141:
  v73 = v80;
  v80 = 0;
  if (v73)
    (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
  v74 = v81;
  v81 = 0;
  if (v74)
    (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
LABEL_145:
  v75 = v78;
  v78 = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  result = v79;
  v79 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_20F424F84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;
  uint64_t v16;

  if (a14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
    v15 = a11;
    if (!a11)
    {
LABEL_3:
      v16 = a12;
      if (!a12)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v15 = a11;
    if (!a11)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = a12;
  if (!a12)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  _Unwind_Resume(exception_object);
}

void sub_20F42505C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  int v31;
  unint64_t v32;
  float v33;
  uint64_t v34;
  float v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unsigned int v45;
  int v46;
  uint64_t (**v47)();
  __int16 v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  int v51;
  int v52;

  v3 = a3;
  v4 = a2;
  v6 = (_DWORD *)(a3 + 32);
  if ((*(_DWORD *)(a2 + 32) != *(_DWORD *)(a3 + 32) || *(_DWORD *)(a2 + 36) != *(_DWORD *)(a3 + 36))
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/AppleDepth/src/DilationUtil.cpp", 115, (uint64_t)"depth_img.Size() == weight_img.Size()", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v46 = 0;
  v47 = &off_24C9AD388;
  sub_20E8A5D1C(v6, &v46, &v48);
  sub_20F423FD0(v3, (uint64_t)&v47);
  if (a1)
  {
    v44 = (*(_DWORD *)(v4 + 36) - 1);
    if (v44 <= 1)
    {
      do
      {
        sub_20F42477C((uint64_t)&v47, v3);
        --a1;
      }
      while (a1);
    }
    else
    {
      v7 = (*(_DWORD *)(v4 + 32) - 1);
      v43 = v7 - 1;
      if (v7 <= 1)
      {
        do
        {
          sub_20F42477C((uint64_t)&v47, v3);
          --a1;
        }
        while (a1);
      }
      else
      {
        v8 = 0;
        v40 = a1;
        v41 = v3;
        v39 = v4;
        do
        {
          v42 = v8;
          v9 = 0;
          v10 = 0;
          v11 = 0;
          v12 = *(_DWORD *)(v4 + 40);
          v13 = *(_DWORD *)(v4 + 44);
          v14 = *(_QWORD *)(v4 + 24);
          v15 = *(_DWORD *)(v3 + 40);
          v16 = *(_DWORD *)(v3 + 44);
          v17 = *(_QWORD *)(v3 + 24);
          v18 = v12 + 2 * v13;
          v19 = 2;
          v45 = v13;
          v20 = 1;
          do
          {
            v21 = 0;
            v22 = v51;
            v23 = v52 * v20;
            v24 = v52 * v20 + 2 * v51;
            v25 = v51 + v52 * v19;
            v26 = v51 + v52 * v10;
            v27 = v51 + v52 * v20;
            v28 = v50;
            v29 = v9;
            v30 = v13;
            v31 = v11;
            v32 = v43;
            do
            {
              v33 = *(float *)(v17 + 4 * (v16 + v15 + v31));
              if (v33 > 0.0)
              {
                *(float *)(v28 + 4 * (v27 + v21)) = v33 + 1.0;
                v34 = v12 + v30;
                v35 = *(float *)(v14 + 4 * v34);
                if (v35 == *(float *)(v14 + 4 * v30))
                {
                  *(float *)(v28 + 4 * (v23 + v21)) = *(float *)(v17 + 4 * (v16 + v31))
                                                                    + 1.0;
                  v35 = *(float *)(v14 + 4 * v34);
                }
                if (v35 == *(float *)(v14 + 4 * (2 * v12 + v30)))
                {
                  *(float *)(v28 + 4 * (v24 + v21)) = *(float *)(v17
                                                                               + 4
                                                                               * (v16 + 2 * v15 + v31))
                                                                    + 1.0;
                  v35 = *(float *)(v14 + 4 * v34);
                }
                if (v35 == *(float *)(v14 + 4 * (v12 + v29)))
                {
                  *(float *)(v28 + 4 * (v26 + v21)) = *(float *)(v17 + 4 * (v15 + v31))
                                                                    + 1.0;
                  v35 = *(float *)(v14 + 4 * v34);
                }
                if (v35 == *(float *)(v14 + 4 * (v18 + v29)))
                  *(float *)(v28 + 4 * (v25 + v21)) = *(float *)(v17
                                                                               + 4
                                                                               * (v15 + 2 * v16 + v31))
                                                                    + 1.0;
              }
              v21 += v22;
              v31 += v15;
              v30 += v12;
              v29 += v12;
              --v32;
            }
            while (v32);
            ++v20;
            v11 += v16;
            v13 += v45;
            ++v19;
            ++v10;
            v9 += v45;
          }
          while (v20 != v44);
          v3 = v41;
          sub_20F42477C((uint64_t)&v47, v41);
          v8 = v42 + 1;
          v4 = v39;
        }
        while (v42 + 1 != v40);
      }
    }
  }
  v36 = v49;
  if (v49)
  {
    p_shared_owners = (unint64_t *)&v49->__shared_owners_;
    do
      v38 = __ldaxr(p_shared_owners);
    while (__stlxr(v38 - 1, p_shared_owners));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
}

void sub_20F425384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_20E86665C(a10);
  _Unwind_Resume(a1);
}

void sub_20F425398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_20E86665C(a10);
  _Unwind_Resume(a1);
}

void sub_20F4253AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_20E86665C(a10);
  _Unwind_Resume(a1);
}

void sub_20F4253C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_20E86665C(a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20F4253D4(uint64_t a1, const float *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  int v24;
  int v25;
  _DWORD *v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  BOOL v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  float32x4_t *v49;
  _DWORD *v50;
  unint64_t v51;
  float32x4_t v52;
  unint64_t v53;
  float32x4_t *v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  _DWORD *v58;
  unint64_t v59;
  unint64_t v60;
  _DWORD *v61;
  unint64_t v62;
  uint64_t result;
  float32x4_t v64;
  float32x4_t *v65;
  unint64_t v66;
  float32x4_t v67;
  float32x4_t *v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_37;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 49))
      goto LABEL_15;
LABEL_37:
    v71 = 0;
    v13 = *(unsigned int *)(a1 + 40);
    if ((_DWORD)v13 != 1)
      goto LABEL_16;
    goto LABEL_38;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 49))
    goto LABEL_37;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 96))(&v71, v4, 1);
  v13 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v13 != 1)
  {
LABEL_16:
    v14 = *(_DWORD *)(a1 + 32);
    if (!v14)
      goto LABEL_100;
    v15 = *(_DWORD *)(a1 + 36);
    if (!v15)
      goto LABEL_100;
    v16 = *(unsigned int *)(a1 + 44);
    v17 = *(_DWORD **)(a1 + 24);
    if (*(_BYTE *)(a1 + 48) && v17)
    {
      v18 = *(_QWORD *)(a1 + 8);
      v19 = *(std::__shared_weak_count **)(a1 + 16);
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
        do
          v22 = __ldaxr(v20);
        while (__stlxr(v22 - 1, v20));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v18 + 88))(v18, 1, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v17 = *(_DWORD **)(a1 + 24);
    }
    v23 = v14 - 1;
    v24 = v15 - 1;
    if (v15 != 1)
    {
      if (v14 == 1)
      {
        do
        {
          *v17 = *(_DWORD *)a2;
          v17 += v16;
          --v24;
        }
        while (v24);
LABEL_99:
        *v17 = *(_DWORD *)a2;
        goto LABEL_100;
      }
      v25 = 0;
      do
      {
        v26 = v17;
        v27 = v14 - 1;
        do
        {
          *v26 = *(_DWORD *)a2;
          v26 += v13;
          --v27;
        }
        while (v27);
        *v26 = *(_DWORD *)a2;
        v17 += v16;
        ++v25;
      }
      while (v25 != v24);
    }
    if (v14 != 1)
    {
      do
      {
        *v17 = *(_DWORD *)a2;
        v17 += v13;
        --v23;
      }
      while (v23);
    }
    goto LABEL_99;
  }
LABEL_38:
  v28 = *(unsigned int *)(a1 + 44);
  v29 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v28 != (_DWORD)v29)
  {
    if (!(_DWORD)v29)
      goto LABEL_100;
    v39 = *(_DWORD *)(a1 + 36);
    if (!v39)
      goto LABEL_100;
    v40 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(a1 + 48) && v40)
    {
      v41 = *(_QWORD *)(a1 + 8);
      v42 = *(std::__shared_weak_count **)(a1 + 16);
      if (v42)
      {
        v43 = (unint64_t *)&v42->__shared_owners_;
        do
          v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
        do
          v45 = __ldaxr(v43);
        while (__stlxr(v45 - 1, v43));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v41 + 88))(v41, 1, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v40 = *(_QWORD *)(a1 + 24);
    }
    v46 = v39 - 1;
    if (v39 == 1)
    {
LABEL_89:
      if (v40
        || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        v60 = v29 - ((_DWORD)v29 != 0) + 1;
        if (v60 >= 0x10 && (v40 >= (unint64_t)(a2 + 1) || v40 + 4 * v29 <= (unint64_t)a2))
        {
          v61 = (_DWORD *)(v40 + 4 * (v60 & 0xFFFFFFFFFFFFFFF8));
          v29 -= v60 & 0xFFFFFFFFFFFFFFF8;
          v67 = vld1q_dup_f32(a2);
          v68 = (float32x4_t *)(v40 + 16);
          v69 = v60 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v68[-1] = v67;
            *v68 = v67;
            v68 += 2;
            v69 -= 8;
          }
          while (v69);
          if (v60 == (v60 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_100;
        }
        else
        {
          v61 = (_DWORD *)v40;
        }
        v62 = v29 + 1;
        do
        {
          *v61++ = *(_DWORD *)a2;
          --v62;
        }
        while (v62 > 1);
        goto LABEL_100;
      }
    }
    else
    {
      v47 = 0;
      v48 = 4 * v28;
      v70 = v40;
      v49 = (float32x4_t *)(v40 + 16);
      while (v40
           || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        v50 = (_DWORD *)v40;
        v51 = v29;
        if (v29 < 8)
          goto LABEL_76;
        if (v40 < (unint64_t)(a2 + 1))
        {
          v50 = (_DWORD *)v40;
          v51 = v29;
          if (v70 + 4 * v29 + v48 * v47 > (unint64_t)a2)
            goto LABEL_76;
        }
        v50 = (_DWORD *)(v40 + 4 * (v29 & 0xFFFFFFFFFFFFFFF8));
        v52 = vld1q_dup_f32(a2);
        v53 = v29 & 0xFFFFFFFFFFFFFFF8;
        v54 = v49;
        do
        {
          v54[-1] = v52;
          *v54 = v52;
          v54 += 2;
          v53 -= 8;
        }
        while (v53);
        v51 = v29 - (v29 & 0xFFFFFFFFFFFFFFF8);
        if (v29 != (v29 & 0xFFFFFFFFFFFFFFF8))
        {
LABEL_76:
          v55 = v51 + 1;
          do
          {
            *v50++ = *(_DWORD *)a2;
            --v55;
          }
          while (v55 > 1);
        }
        v40 += 4 * v28;
        ++v47;
        v49 = (float32x4_t *)((char *)v49 + v48);
        if ((_DWORD)v47 == v46)
          goto LABEL_89;
      }
    }
    goto LABEL_111;
  }
  v30 = *(_DWORD *)(a1 + 36);
  v31 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(a1 + 48) && v31)
  {
    v32 = *(_QWORD *)(a1 + 8);
    v33 = *(std::__shared_weak_count **)(a1 + 16);
    if (v33)
    {
      v34 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
      do
        v36 = __ldaxr(v34);
      while (__stlxr(v36 - 1, v34));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v32 + 88))(v32, 1, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v31 = *(_QWORD *)(a1 + 24);
  }
  v37 = (v30 * v28);
  if ((_DWORD)v37)
    v38 = v31 == 0;
  else
    v38 = 0;
  if (!v38)
  {
    if (!(_DWORD)v37)
      goto LABEL_100;
    goto LABEL_80;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_111:
    abort();
  }
LABEL_80:
  v56 = v37 - ((_DWORD)v37 != 0) + 1;
  if (v56 < 0x10)
    goto LABEL_85;
  v57 = 4 * v37;
  if (!(_DWORD)v37)
    v57 = 4;
  if (v31 >= (unint64_t)(a2 + 1) || v31 + v57 <= (unint64_t)a2)
  {
    v58 = (_DWORD *)(v31 + 4 * (v56 & 0xFFFFFFFFFFFFFFF8));
    v37 -= v56 & 0xFFFFFFFFFFFFFFF8;
    v64 = vld1q_dup_f32(a2);
    v65 = (float32x4_t *)(v31 + 16);
    v66 = v56 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v65[-1] = v64;
      *v65 = v64;
      v65 += 2;
      v66 -= 8;
    }
    while (v66);
    if (v56 == (v56 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_100;
  }
  else
  {
LABEL_85:
    v58 = (_DWORD *)v31;
  }
  v59 = v37 + 1;
  do
  {
    *v58++ = *(_DWORD *)a2;
    --v59;
  }
  while (v59 > 1);
LABEL_100:
  result = v71;
  v71 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_20F425A20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 8))(a16);
  _Unwind_Resume(exception_object);
}

void sub_20F425A48(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  float32x2_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  float32x2_t *v10;
  float v11;
  uint64_t *v12;
  float32x2_t v13;
  double v14;
  int v15;
  unint64_t v16;
  char *v17;
  float32x2_t v18;
  float v19;
  double v20;
  int v21;
  uint64_t v22;
  void *__p;
  __int128 v24;
  _OWORD v25[6];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  sub_20EA74E34(a2, 0x90uLL);
  v4 = *a1;
  if (*a1)
  {
    v5 = 0;
    v6 = (float32x2_t)vdup_n_s32(0x3A83126Fu);
    do
    {
      v7 = *(unsigned __int8 *)(a1[16] + v5);
      __p = v25;
      v24 = xmmword_2102E0CB0;
      v8 = 16 * v5;
      v9 = v5;
      do
      {
        v10 = (float32x2_t *)(a1[1] + v8);
        v11 = v10[1].f32[0] * 0.001;
        v18 = vmul_f32(*v10, v6);
        v19 = v11;
        v20 = *(float *)(a1[19] + 4 * v9);
        v21 = *(_DWORD *)(a1[31] + 4 * v9);
        v12 = (uint64_t *)((char *)__p + 32 * v24);
        if ((_QWORD)v24 == *((_QWORD *)&v24 + 1))
        {
          sub_20EA753B4((uint64_t)&__p, v12, 1, (uint64_t *)&v18, &v22);
        }
        else
        {
          v13 = v18;
          *((float *)v12 + 2) = v19;
          *v12 = (uint64_t)v13;
          v14 = v20;
          *((_DWORD *)v12 + 6) = v21;
          *((double *)v12 + 2) = v14;
          *(_QWORD *)&v24 = v24 + 1;
        }
        v5 = v9 + 1;
        if (v9 + 1 >= v4)
          break;
        v15 = *(unsigned __int8 *)(a1[16] + v9 + 1);
        v8 += 16;
        ++v9;
      }
      while (v15 == v7);
      if ((_QWORD)v24)
      {
        v16 = *(_QWORD *)(a2 + 8);
        if (v16 >= *(_QWORD *)(a2 + 16))
        {
          v17 = sub_20EA75184((void **)a2, (uint64_t)&__p);
        }
        else
        {
          *(_QWORD *)v16 = v16 + 24;
          *(_OWORD *)(v16 + 8) = xmmword_2102E0CB0;
          if (v25 == __p)
          {
            sub_20EA74FD0((_QWORD *)v16, (uint64_t *)v25, (uint64_t *)&v25[2 * v24]);
            *(_QWORD *)&v24 = 0;
          }
          else
          {
            *(_QWORD *)v16 = __p;
            *(_OWORD *)(v16 + 8) = v24;
            __p = 0;
            v24 = 0uLL;
          }
          v17 = (char *)(v16 + 120);
        }
        *(_QWORD *)(a2 + 8) = v17;
      }
      if (*((_QWORD *)&v24 + 1))
      {
        if (v25 != __p)
          operator delete(__p);
      }
    }
    while (v5 < v4);
  }
}

void sub_20F425C94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18)
{
  void **v18;
  void *v19;
  char *v21;
  char *v22;
  void *v23;
  char *v24;

  if (a18 && v19 != __p)
    operator delete(__p);
  v21 = (char *)*v18;
  if (*v18)
  {
    v22 = (char *)v18[1];
    v23 = *v18;
    if (v22 != v21)
    {
      do
      {
        if (*((_QWORD *)v22 - 13))
        {
          v24 = (char *)*((_QWORD *)v22 - 15);
          if (v22 - 96 != v24)
            operator delete(v24);
        }
        v22 -= 120;
      }
      while (v22 != v21);
      v23 = *v18;
    }
    v18[1] = v21;
    operator delete(v23);
  }
  _Unwind_Resume(exception_object);
}

void sub_20F425D28(uint64_t a1, uint64_t a2, uint64_t a3, int a4, double a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;

  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 8) = v9;
  *(double *)(a1 + 16) = a5;
  v10 = *(_QWORD *)(a1 + 24);
  if (!v10)
  {
    v11 = operator new();
    *(_OWORD *)v11 = *(_OWORD *)a1;
    *(_OWORD *)(v11 + 16) = 0u;
    *(_OWORD *)(v11 + 32) = 0u;
    *(_BYTE *)(v11 + 48) = 1;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + 88) = 0u;
    *(_OWORD *)(v11 + 104) = 0u;
    *(_OWORD *)(v11 + 114) = 0u;
    *(_OWORD *)(v11 + 136) = 0u;
    *(_OWORD *)(v11 + 152) = 0u;
    *(_OWORD *)(v11 + 168) = 0u;
    *(_BYTE *)(v11 + 184) = 0;
    v12 = *(_QWORD **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v11;
    if (v12)
    {
      v13 = (void *)v12[20];
      if (v13)
      {
        v12[21] = v13;
        operator delete(v13);
      }
      v14 = (void *)v12[13];
      if (v14)
      {
        v12[14] = v14;
        operator delete(v14);
      }
      v15 = (void *)v12[10];
      if (v15)
      {
        v12[11] = v15;
        operator delete(v15);
      }
      v16 = (void *)v12[7];
      if (v16)
      {
        v12[8] = v16;
        operator delete(v16);
      }
      MEMORY[0x212BC6398](v12, 0x1020C4069399AA6);
      v10 = *(_QWORD *)(a1 + 24);
    }
    else
    {
      v10 = v11;
    }
  }
  (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a3 + 16))(a3, a2, 0, v10);
  v17 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v17 + 184))
  {
    v18 = *(_QWORD *)(v17 + 88) - *(_QWORD *)(v17 + 80);
    if (v18)
      v19 = v18 == *(_QWORD *)(v17 + 168) - *(_QWORD *)(v17 + 160);
    else
      v19 = 0;
    if (!v19)
      goto LABEL_24;
    v20 = (uint64_t)(*(_QWORD *)(v17 + 64) - *(_QWORD *)(v17 + 56)) >> 5;
    if (v20 != v18 >> 6)
      goto LABEL_24;
LABEL_23:
    if (*(_QWORD *)(v17 + 16) <= v20)
      goto LABEL_26;
    goto LABEL_24;
  }
  if (*(_QWORD *)(v17 + 160) == *(_QWORD *)(v17 + 168))
  {
    v20 = (uint64_t)(*(_QWORD *)(v17 + 64) - *(_QWORD *)(v17 + 56)) >> 5;
    if (v20 == (uint64_t)(*(_QWORD *)(v17 + 88) - *(_QWORD *)(v17 + 80)) >> 6)
      goto LABEL_23;
  }
LABEL_24:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/PointDescriptorStore.h", 184, (uint64_t)"HasValidSize()", 14, (uint64_t)"Descriptor size mis-match", 25, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v20 = (uint64_t)(*(_QWORD *)(v17 + 64) - *(_QWORD *)(v17 + 56)) >> 5;
LABEL_26:
  v23 = 0;
  v21 = *(_QWORD *)(a1 + 32);
  v22 = (*(_QWORD *)(a1 + 40) - v21) >> 2;
  if (v20 <= v22)
  {
    if (v20 < v22)
    {
      *(_QWORD *)(a1 + 40) = v21 + 4 * v20;
      if (!a4)
        return;
    }
    else if (!a4)
    {
      return;
    }
LABEL_33:
    sub_20F425F70((_QWORD *)a1);
    return;
  }
  sub_20EDDCBD0(a1 + 32, v20 - v22, (const float *)&v23);
  if (a4)
    goto LABEL_33;
}

void sub_20F425F70(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  size_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  __int128 *v19;
  __int128 *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t j;
  uint64_t v31;
  unint64_t v32;

  v2 = a1[3];
  if (*(_BYTE *)(v2 + 184))
  {
    v3 = *(_QWORD *)(v2 + 88) - *(_QWORD *)(v2 + 80);
    if (v3)
      v4 = v3 == *(_QWORD *)(v2 + 168) - *(_QWORD *)(v2 + 160);
    else
      v4 = 0;
    if (!v4)
      goto LABEL_12;
    v5 = (uint64_t)(*(_QWORD *)(v2 + 64) - *(_QWORD *)(v2 + 56)) >> 5;
    if (v5 != v3 >> 6)
      goto LABEL_12;
LABEL_11:
    if (*(_QWORD *)(v2 + 16) <= v5)
      goto LABEL_14;
    goto LABEL_12;
  }
  if (*(_QWORD *)(v2 + 160) == *(_QWORD *)(v2 + 168))
  {
    v5 = (uint64_t)(*(_QWORD *)(v2 + 64) - *(_QWORD *)(v2 + 56)) >> 5;
    if (v5 == (uint64_t)(*(_QWORD *)(v2 + 88) - *(_QWORD *)(v2 + 80)) >> 6)
      goto LABEL_11;
  }
LABEL_12:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/PointDescriptorStore.h", 184, (uint64_t)"HasValidSize()", 14, (uint64_t)"Descriptor size mis-match", 25, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_67;
  }
  v5 = (uint64_t)(*(_QWORD *)(v2 + 64) - *(_QWORD *)(v2 + 56)) >> 5;
LABEL_14:
  if (!v5)
    return;
  v6 = a1 + 25;
  v7 = (_QWORD *)a1[26];
  v8 = 68;
  if (a1[27])
    v8 = 0;
  a1[29] = 0;
  a1[30] = v8;
  a1[28] = v7;
  while (v7 != v6)
  {
    v9 = v7[2];
    for (i = v7[3]; v9 != i; v9 += 120)
    {
      *(_QWORD *)(v9 + 8) = *(_QWORD *)v9;
      *(_QWORD *)(v9 + 32) = *(_QWORD *)(v9 + 24);
      *(_BYTE *)(v9 + 52) = 0;
    }
    v7 = (_QWORD *)v7[1];
  }
  a1[10] = 0;
  a1[21] = 0;
  v11 = a1[3];
  if (*(_BYTE *)(v11 + 184))
  {
    v12 = *(_QWORD *)(v11 + 88) - *(_QWORD *)(v11 + 80);
    if (v12)
      v13 = v12 == *(_QWORD *)(v11 + 168) - *(_QWORD *)(v11 + 160);
    else
      v13 = 0;
    if (!v13)
      goto LABEL_34;
    v14 = (uint64_t)(*(_QWORD *)(v11 + 64) - *(_QWORD *)(v11 + 56)) >> 5;
    if (v14 != v12 >> 6)
      goto LABEL_34;
  }
  else
  {
    if (*(_QWORD *)(v11 + 160) != *(_QWORD *)(v11 + 168))
      goto LABEL_34;
    v14 = (uint64_t)(*(_QWORD *)(v11 + 64) - *(_QWORD *)(v11 + 56)) >> 5;
    if (v14 != (uint64_t)(*(_QWORD *)(v11 + 88) - *(_QWORD *)(v11 + 80)) >> 6)
      goto LABEL_34;
  }
  if (*(_QWORD *)(v11 + 16) <= v14)
    goto LABEL_36;
LABEL_34:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/PointDescriptorStore.h", 184, (uint64_t)"HasValidSize()", 14, (uint64_t)"Descriptor size mis-match", 25, (void (*)(void **))sub_21023DDB0))
  {
LABEL_67:
    abort();
  }
  v14 = (uint64_t)(*(_QWORD *)(v11 + 64) - *(_QWORD *)(v11 + 56)) >> 5;
LABEL_36:
  v15 = v14 << 6;
  if (!(v14 << 6))
  {
    v17 = 0;
    v16 = 0;
    v18 = a1[3];
    v19 = *(__int128 **)(v18 + 80);
    v20 = *(__int128 **)(v18 + 88);
    v21 = 0;
    if (v19 == v20)
      goto LABEL_43;
    goto LABEL_41;
  }
  if ((v15 & 0x8000000000000000) != 0)
    sub_20E867F44();
  v16 = (char *)operator new(v14 << 6);
  bzero(v16, v15);
  v17 = &v16[v15];
  v18 = a1[3];
  v19 = *(__int128 **)(v18 + 80);
  v20 = *(__int128 **)(v18 + 88);
  v21 = v16;
  if (v19 != v20)
  {
LABEL_41:
    v21 = v16;
    do
    {
      v22 = *v19;
      v23 = v19[1];
      v24 = v19[3];
      *((_OWORD *)v21 + 2) = v19[2];
      *((_OWORD *)v21 + 3) = v24;
      *(_OWORD *)v21 = v22;
      *((_OWORD *)v21 + 1) = v23;
      v21 += 64;
      v19 += 4;
    }
    while (v19 != v20);
  }
LABEL_43:
  if (v21 != v17)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PlaceRecognitionUnsanitized/src/KeyFrame.cpp", 140, (uint64_t)"tmp_buffer_it == std::end(tmp_buffer)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_68;
    }
    v18 = a1[3];
  }
  if (*(_BYTE *)(v18 + 184))
  {
    v25 = *(_QWORD *)(v18 + 88) - *(_QWORD *)(v18 + 80);
    if (!v25)
      goto LABEL_54;
    if (v25 != *(_QWORD *)(v18 + 168) - *(_QWORD *)(v18 + 160))
      goto LABEL_54;
    v26 = (uint64_t)(*(_QWORD *)(v18 + 64) - *(_QWORD *)(v18 + 56)) >> 5;
    if (v26 != v25 >> 6)
      goto LABEL_54;
  }
  else if (*(_QWORD *)(v18 + 160) != *(_QWORD *)(v18 + 168)
         || (v26 = (uint64_t)(*(_QWORD *)(v18 + 64) - *(_QWORD *)(v18 + 56)) >> 5,
             v26 != (uint64_t)(*(_QWORD *)(v18 + 88) - *(_QWORD *)(v18 + 80)) >> 6))
  {
LABEL_54:
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/PointDescriptorStore.h", 184, (uint64_t)"HasValidSize()", 14, (uint64_t)"Descriptor size mis-match", 25, (void (*)(void **))sub_21023DDB0))
    {
      v26 = (uint64_t)(*(_QWORD *)(v18 + 64) - *(_QWORD *)(v18 + 56)) >> 5;
      goto LABEL_56;
    }
LABEL_68:
    abort();
  }
  if (*(_QWORD *)(v18 + 16) > v26)
    goto LABEL_54;
LABEL_56:
  v27 = (_QWORD *)a1[26];
  v28 = 68;
  if (a1[27])
    v28 = 0;
  a1[29] = 0;
  a1[30] = v28;
  a1[28] = v27;
  while (v27 != v6)
  {
    v29 = v27[2];
    for (j = v27[3]; v29 != j; v29 += 120)
    {
      *(_QWORD *)(v29 + 8) = *(_QWORD *)v29;
      *(_QWORD *)(v29 + 32) = *(_QWORD *)(v29 + 24);
      *(_BYTE *)(v29 + 52) = 0;
    }
    v27 = (_QWORD *)v27[1];
  }
  a1[10] = 0;
  a1[21] = 1;
  v31 = sub_20EDCC2FC(a1 + 25, 0);
  a1[10] = v31;
  v32 = v26 << 32;
  sub_20EDCC3EC((uint64_t)(a1 + 10), v31, (uint64_t)v16, (unsigned int *)&v32, 0);
  if (v16)
    operator delete(v16);
}

void sub_20F42639C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F4263C4(uint64_t a1, __int128 *a2, char **a3, uint64_t a4, uint64_t a5, int a6, double a7)
{
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  v14 = *(_QWORD *)(a1 + 24);
  if (!v14)
  {
    v14 = operator new();
    *(_OWORD *)v14 = *(_OWORD *)a1;
    *(_OWORD *)(v14 + 16) = 0u;
    *(_OWORD *)(v14 + 32) = 0u;
    *(_BYTE *)(v14 + 48) = 1;
    *(_OWORD *)(v14 + 56) = 0u;
    *(_OWORD *)(v14 + 72) = 0u;
    *(_OWORD *)(v14 + 88) = 0u;
    *(_OWORD *)(v14 + 104) = 0u;
    *(_OWORD *)(v14 + 114) = 0u;
    *(_OWORD *)(v14 + 136) = 0u;
    *(_OWORD *)(v14 + 152) = 0u;
    *(_OWORD *)(v14 + 168) = 0u;
    *(_BYTE *)(v14 + 184) = 0;
    v15 = *(_QWORD **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v14;
    if (v15)
    {
      v16 = (void *)v15[20];
      if (v16)
      {
        v15[21] = v16;
        operator delete(v16);
      }
      v17 = (void *)v15[13];
      if (v17)
      {
        v15[14] = v17;
        operator delete(v17);
      }
      v18 = (void *)v15[10];
      if (v18)
      {
        v15[11] = v18;
        operator delete(v18);
      }
      v19 = (void *)v15[7];
      if (v19)
      {
        v15[8] = v19;
        operator delete(v19);
      }
      MEMORY[0x212BC6398](v15, 0x1020C4069399AA6);
      v14 = *(_QWORD *)(a1 + 24);
    }
  }
  sub_20EDB4CE8(v14, a2);
  if ((char **)(a1 + 32) != a3)
    sub_20F0E80A4((_QWORD *)(a1 + 32), *a3, a3[1], (a3[1] - *a3) >> 2);
  *(_QWORD *)a1 = a4;
  *(_QWORD *)(a1 + 8) = a5;
  *(double *)(a1 + 16) = a7;
  if (a6)
    sub_20F425F70((_QWORD *)a1);
}

void sub_20F42652C(uint64_t *a1@<X8>)
{
  uint64_t v2;

  v2 = operator new();
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_QWORD *)(v2 + 136) = 0;
  sub_20F426B4C(v2, 1000, 9, 0x1F4uLL, 550, 20, 20, 10, 0.5, 0.00001, 1);
  *a1 = v2;
}

void sub_20F4265C8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void *v4;
  void *v5;
  void *v6;

  v4 = (void *)v1[15];
  if (v4)
  {
    v1[16] = v4;
    operator delete(v4);
    v5 = (void *)v1[12];
    if (!v5)
    {
LABEL_3:
      v6 = *v2;
      if (!*v2)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v5 = (void *)v1[12];
    if (!v5)
      goto LABEL_3;
  }
  v1[13] = v5;
  operator delete(v5);
  v6 = *v2;
  if (!*v2)
  {
LABEL_5:
    MEMORY[0x212BC6398](v1, 0x10B0C4091E22534);
    _Unwind_Resume(a1);
  }
LABEL_4:
  v1[10] = v6;
  operator delete(v6);
  goto LABEL_5;
}

BOOL sub_20F426630(unsigned __int16 *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unsigned int **a6, unsigned int **a7, double **a8, double **a9, uint64_t a10)
{
  _QWORD *v18;
  double v19;
  double v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double *v25;
  unsigned int *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  float64x2_t *v30;
  unsigned int v31;
  unint64_t v32;
  double *v33;
  unsigned int *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  float64x2_t *v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  __int16 v43;
  unint64_t v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  float64x2_t v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  float64x2_t v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  float64x2_t v77;
  double v78;
  double v79;
  double v80;
  double v81;
  float64x2_t v82;
  float64x2_t v83;
  int64x2_t v84;
  float64x2_t v85;
  int64x2_t v86;
  int64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  int64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v100;
  int v101;
  int v102;
  int v103;
  int v104;
  _BOOL8 v105;
  _QWORD *v106;
  unint64_t v108;
  void *__p;
  _QWORD *v110;
  _QWORD *v111;

  v18 = operator new(0x40uLL);
  v110 = v18 + 8;
  v111 = v18 + 8;
  v108 = a3;
  __p = v18;
  v19 = (double)a2;
  *v18 = 0;
  v18[1] = 0;
  *((double *)v18 + 2) = (double)a2;
  v18[3] = 0;
  v20 = (double)a3;
  *((double *)v18 + 4) = (double)a2;
  *((double *)v18 + 5) = (double)a3;
  v18[6] = 0;
  *((double *)v18 + 7) = (double)a3;
  v21 = (char *)a6[1] - (char *)*a6;
  v22 = v21 >> 1;
  v23 = a8[1] - *a8;
  if (v21 >> 1 <= v23)
  {
    if (v21 >> 1 < v23)
      a8[1] = &(*a8)[v22];
  }
  else
  {
    sub_20E93D8FC((uint64_t)a8, (v21 >> 1) - v23);
  }
  v24 = a9[1] - *a9;
  if (v22 <= v24)
  {
    if (v22 < v24)
      a9[1] = &(*a9)[v22];
  }
  else
  {
    sub_20E93D8FC((uint64_t)a9, v22 - v24);
  }
  v25 = *a8;
  v26 = *a6;
  v27 = (char *)a6[1] - (char *)*a6;
  if (v27)
  {
    v28 = v27 >> 2;
    v29 = *(_QWORD *)(a4 + 56);
    if (v28 <= 1)
      v28 = 1;
    v30 = (float64x2_t *)v25;
    do
    {
      v31 = *v26++;
      *v30++ = vcvtq_f64_f32(*(float32x2_t *)(v29 + 32 * v31));
      --v28;
    }
    while (v28);
  }
  v32 = v21 >> 2;
  v33 = *a9;
  v34 = *a7;
  v35 = (char *)a7[1] - (char *)*a7;
  if (v35)
  {
    v36 = v35 >> 2;
    v37 = *(_QWORD *)(a5 + 56);
    if (v36 <= 1)
      v36 = 1;
    v38 = (float64x2_t *)*a9;
    do
    {
      v39 = *v34++;
      *v38++ = vcvtq_f64_f32(*(float32x2_t *)(v37 + 32 * v39));
      --v36;
    }
    while (v36);
  }
  if (*((_QWORD *)a1 + 18) < v32)
  {
    v40 = *((_QWORD *)a1 + 12);
    v41 = (*((_QWORD *)a1 + 13) - v40) >> 3;
    if (v22 <= v41)
    {
      if (v22 < v41)
        *((_QWORD *)a1 + 13) = v40 + 8 * v22;
    }
    else
    {
      sub_20EAC9ECC((uint64_t)(a1 + 48), v22 - v41);
    }
    *((_QWORD *)a1 + 18) = v32;
  }
  if (!sub_2100EE588((_QWORD *)a10, (uint64_t)v25, (uint64_t)v33, v21 >> 2, (float64x2_t **)&__p, (uint64_t *)a1 + 9, (int64x2_t **)a1 + 12, (uint64_t *)a1 + 15, *((double *)a1 + 1), *a1, *((_QWORD *)a1 + 2), *((_QWORD *)a1 + 3), *((_QWORD *)a1 + 4), *((_BYTE *)a1 + 64)))goto LABEL_59;
  v42 = *a1;
  v43 = v42 - 1;
  if ((v42 - 1) > 8 || ((0x1C1u >> v43) & 1) == 0)
    goto LABEL_59;
  if (qword_2103B4680[v43] < v32)
  {
    v44 = *((_QWORD *)a1 + 5);
    if (v44)
      sub_2100EB210(a10, v25, v33, v21 >> 2, v42, v44, *((_QWORD *)a1 + 6), *((double *)a1 + 1), *((double *)a1 + 7));
  }
  v45 = *(double *)a10;
  v46 = *(double *)(a10 + 8);
  v48 = *(double *)(a10 + 16);
  v47 = *(double *)(a10 + 24);
  v49 = *(double *)(a10 + 32);
  v50 = *(double *)(a10 + 40);
  v51 = *(double *)(a10 + 48);
  v52 = *(double *)(a10 + 56);
  v53 = *(double *)(a10 + 64);
  v54 = v51 * 0.0;
  v55 = v53 + v51 * 0.0 + v52 * 0.0;
  v56 = 1.0 / v55;
  if (v55 == 0.0)
    v56 = 1.0;
  v57 = v45 * 0.0;
  v58 = (v48 + v45 * 0.0 + v46 * 0.0) * v56;
  v59 = v47 * 0.0;
  v60 = (v50 + v47 * 0.0 + v49 * 0.0) * v56;
  v61.f64[0] = v58;
  v61.f64[1] = v60;
  v62 = v51 * v19;
  v63 = v53 + v62 + v52 * 0.0;
  v64 = v63 == 0.0 ? 1.0 : 1.0 / v63;
  v65 = v45 * v19;
  v66 = (v48 + v45 * v19 + v46 * 0.0) * v64;
  v67 = v47 * v19;
  v68 = (v50 + v47 * v19 + v49 * 0.0) * v64;
  v69.f64[0] = v66;
  v69.f64[1] = v68;
  v70 = v52 * v20;
  v71 = v53 + v62 + v70;
  v72 = v71 == 0.0 ? 1.0 : 1.0 / v71;
  v73 = v46 * v20;
  v74 = (v48 + v65 + v46 * v20) * v72;
  v75 = v49 * v20;
  v76 = (v50 + v67 + v49 * v20) * v72;
  v77.f64[0] = v74;
  v77.f64[1] = v76;
  v78 = v53 + v54 + v70;
  v79 = v78 == 0.0 ? 1.0 : 1.0 / v78;
  v80 = (v48 + v57 + v73) * v79;
  v81 = (v50 + v59 + v75) * v79;
  v82.f64[0] = v80;
  v82.f64[1] = v81;
  v83 = vsubq_f64(v69, v61);
  v84 = (int64x2_t)vsubq_f64(v77, v61);
  v85 = vsubq_f64(v82, v61);
  v86 = (int64x2_t)vsubq_f64(v69, v77);
  v87 = (int64x2_t)vsubq_f64(v82, v77);
  v88 = (float64x2_t)vzip1q_s64(v84, (int64x2_t)v83);
  v89 = (float64x2_t)vzip2q_s64(v84, (int64x2_t)v83);
  v90 = vdupq_laneq_s64((int64x2_t)v83, 1);
  *(_QWORD *)&v83.f64[1] = v87.i64[1];
  v91 = vmulq_f64((float64x2_t)vzip1q_s64(vdupq_laneq_s64((int64x2_t)v85, 1), v86), v83);
  v92 = vmulq_f64(v88, (float64x2_t)vzip2q_s64((int64x2_t)v85, v84));
  v93 = (float64x2_t)vzip1q_s64((int64x2_t)v85, v84);
  *(_QWORD *)&v85.f64[1] = v86.i64[1];
  v94 = vabdq_f64(v91, vmulq_f64(v85, (float64x2_t)vzip1q_s64(v90, v87)));
  __asm { FMOV            V19.2D, #0.5 }
  v100 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)(v108 * a2) * 0.0001), 0);
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vcgtq_f64(v100, vmulq_f64(vabdq_f64(v92, vmulq_f64(v89, v93)), _Q19)), (int32x4_t)vcgtq_f64(v100, vmulq_f64(v94, _Q19)))), 0xFuLL))) & 1) != 0)
  {
LABEL_59:
    v105 = 0;
    v106 = __p;
    if (!__p)
      return v105;
LABEL_60:
    v110 = v106;
    operator delete(v106);
    return v105;
  }
  if ((v66 - v58) * (v76 - v60) - (v68 - v60) * (v74 - v58) > 0.0)
    v101 = 1;
  else
    v101 = -1;
  if ((v74 - v66) * (v81 - v68) - (v76 - v68) * (v80 - v66) > 0.0)
    v102 = v101 + 1;
  else
    v102 = v101 - 1;
  if ((v60 - v76) * (v80 - v74) - (v58 - v74) * (v81 - v76) > 0.0)
    v103 = v102 + 1;
  else
    v103 = v102 - 1;
  if ((v68 - v81) * (v58 - v80) - (v60 - v81) * (v66 - v80) > 0.0)
    v104 = v103 + 1;
  else
    v104 = v103 - 1;
  if (v104 < 0)
    v104 = -v104;
  v105 = v104 == 4;
  v106 = __p;
  if (__p)
    goto LABEL_60;
  return v105;
}

void sub_20F426B30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F426B4C(uint64_t a1, uint64_t a2, __int16 a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, char a11)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  void *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;

  *(_WORD *)a1 = a3;
  *(double *)(a1 + 8) = a9;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  *(_QWORD *)(a1 + 40) = a7;
  *(_QWORD *)(a1 + 48) = a8;
  *(double *)(a1 + 56) = a10;
  *(_BYTE *)(a1 + 64) = a11;
  v16 = *(_QWORD *)(a1 + 72);
  v14 = a1 + 72;
  v15 = v16;
  *(_QWORD *)(a1 + 144) = a2;
  v17 = (*(_QWORD *)(a1 + 80) - v16) >> 3;
  if (9 * a4 <= v17)
  {
    if (9 * a4 < v17)
      *(_QWORD *)(a1 + 80) = v15 + 72 * a4;
  }
  else
  {
    sub_20E93D8FC(v14, 9 * a4 - v17);
  }
  v19 = *(_QWORD *)(a1 + 120);
  v18 = *(_QWORD *)(a1 + 128);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 4;
  v22 = a4 - v21;
  if (a4 <= v21)
  {
    if (a4 >= v21)
      goto LABEL_33;
    v38 = v19 + 16 * a4;
    goto LABEL_30;
  }
  v23 = *(_QWORD *)(a1 + 136);
  if (v22 <= (v23 - v18) >> 4)
  {
    v38 = v18 + 16 * v22;
    v39 = 16 * a4 - v20 - 16;
    if (v39 < 0x10)
      goto LABEL_42;
    v40 = (v39 >> 4) + 1;
    v41 = v18 + 16;
    v42 = v40 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(_QWORD *)(v41 - 16) = 0;
      *(_QWORD *)v41 = 0;
      *(_DWORD *)(v41 - 8) = 0;
      *(_DWORD *)(v41 + 8) = 0;
      v41 += 32;
      v42 -= 2;
    }
    while (v42);
    v18 += 16 * (v40 & 0x1FFFFFFFFFFFFFFELL);
    if (v40 != (v40 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_42:
      do
      {
        *(_QWORD *)v18 = 0;
        *(_DWORD *)(v18 + 8) = 0;
        v18 += 16;
      }
      while (v18 != v38);
    }
LABEL_30:
    *(_QWORD *)(a1 + 128) = v38;
    goto LABEL_33;
  }
  if (a4 >> 60)
    sub_20E867F44();
  v24 = v23 - v19;
  v25 = (v23 - v19) >> 3;
  if (v25 <= a4)
    v25 = a4;
  if (v24 >= 0x7FFFFFFFFFFFFFF0)
    v26 = 0xFFFFFFFFFFFFFFFLL;
  else
    v26 = v25;
  if (v26 >> 60)
    sub_20E877A38();
  v27 = (char *)operator new(16 * v26);
  v28 = &v27[16 * v21];
  v29 = &v27[16 * a4];
  v30 = 16 * a4 - v20 - 16;
  v31 = v28;
  if (v30 < 0x10)
    goto LABEL_43;
  v32 = (v30 >> 4) + 1;
  v31 = &v28[16 * (v32 & 0x1FFFFFFFFFFFFFFELL)];
  v33 = v28 + 16;
  v34 = v32 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    *((_QWORD *)v33 - 2) = 0;
    *(_QWORD *)v33 = 0;
    *((_DWORD *)v33 - 2) = 0;
    *((_DWORD *)v33 + 2) = 0;
    v33 += 32;
    v34 -= 2;
  }
  while (v34);
  if (v32 != (v32 & 0x1FFFFFFFFFFFFFFELL))
  {
LABEL_43:
    do
    {
      *(_QWORD *)v31 = 0;
      *((_DWORD *)v31 + 2) = 0;
      v31 += 16;
    }
    while (v31 != v29);
  }
  v35 = &v27[16 * v26];
  if (v18 == v19)
  {
    v37 = *(void **)(a1 + 120);
    *(_QWORD *)(a1 + 120) = v28;
    *(_QWORD *)(a1 + 128) = v29;
    *(_QWORD *)(a1 + 136) = v35;
    if (!v37)
      goto LABEL_33;
    goto LABEL_32;
  }
  do
  {
    v36 = v28 - 16;
    *((_OWORD *)v28 - 1) = *(_OWORD *)(v18 - 16);
    v18 -= 16;
    v28 -= 16;
  }
  while (v18 != v19);
  v37 = *(void **)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v36;
  *(_QWORD *)(a1 + 128) = v29;
  *(_QWORD *)(a1 + 136) = v35;
  if (v37)
LABEL_32:
    operator delete(v37);
LABEL_33:
  v43 = *(_QWORD *)(a1 + 96);
  v44 = (*(_QWORD *)(a1 + 104) - v43) >> 3;
  if (2 * a2 <= v44)
  {
    if (2 * a2 < v44)
      *(_QWORD *)(a1 + 104) = v43 + 16 * a2;
  }
  else
  {
    sub_20EAC9ECC(a1 + 96, 2 * a2 - v44);
  }
}

_QWORD *sub_20F426DC8(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[21];
  if (v2)
  {
    a1[22] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[18];
  if (v3)
  {
    a1[19] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[15];
  if (v4)
  {
    a1[16] = v4;
    operator delete(v4);
  }
  return a1;
}

_QWORD *sub_20F426E18(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (_QWORD *)*a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (void *)v2[15];
    if (v3)
    {
      v2[16] = v3;
      operator delete(v3);
    }
    v4 = (void *)v2[12];
    if (v4)
    {
      v2[13] = v4;
      operator delete(v4);
    }
    v5 = (void *)v2[9];
    if (v5)
    {
      v2[10] = v5;
      operator delete(v5);
    }
    MEMORY[0x212BC6398](v2, 0x10B0C4091E22534);
  }
  return a1;
}

void sub_20F426E8C(uint64_t a1@<X0>, double *a2@<X1>, uint64_t **a3@<X8>)
{
  size_t v3;
  double *v4;
  uint64_t **v5;
  unint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  void *v17;
  char *v18;
  _BYTE *v19;
  _BYTE *v20;
  char *v21;
  char v22;
  unint64_t v23;
  _OWORD *v24;
  __int128 *v25;
  unint64_t v26;
  __int128 v27;
  _QWORD *v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t *v37;
  _QWORD *v38;
  int64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  _BYTE *v43;
  char *v44;
  uint64_t v45;
  int64_t v46;
  unint64_t v47;
  unint64_t *v48;
  uint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _OWORD *v54;
  unint64_t *v55;
  uint64_t v56;
  __int128 v57;
  char *v58;
  char *v59;
  _BYTE *v60;
  float *v61;
  _QWORD **v62;
  _QWORD *v63;
  uint64_t v64;
  float *v65;
  float v66;
  float *v67;
  float *v68;
  float *v69;
  float *v70;
  float v71;
  float *v72;
  float *v73;
  _QWORD *v74;
  char *v75;
  char *v76;
  char *v77;
  _QWORD *v78;
  unint64_t v79;
  size_t v80;
  unint64_t v81;
  BOOL v82;
  _QWORD *v83;
  float *v84;
  float *v85;
  float *v86;
  float v87;
  BOOL v88;
  unint64_t v89;
  unint64_t v90;
  float v91;
  float *v92;
  float *v93;
  float *v94;
  float *v95;
  float *v96;
  float *v97;
  float *v98;
  float *v99;
  float *v100;
  uint64_t v101;
  float *v102;
  float *v103;
  float *v104;
  float *v105;
  float *v106;
  float *v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  char *v111;
  uint64_t v112;
  char *v113;
  char *v114;
  unint64_t v115;
  char *v116;
  char *v117;
  float v118;
  float v119;
  uint64_t v120;
  char *v121;
  _QWORD *v122;
  _QWORD *v123;
  char *v124;
  size_t v125;
  unint64_t v126;
  _BYTE *v127;
  _BYTE *v128;
  char *v129;
  char *v130;
  char *v131;
  char *v132;
  int v133;
  uint64_t v134;
  size_t v135;
  void *v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  int64_t v151;
  float *v152;
  float *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  char *v158;
  float v159;
  float v160;
  uint64_t v161;
  float *v162;
  char *v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  char *v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  _BYTE *v181;
  size_t *v182;
  int64_t v183;
  unint64_t v184;
  char *v185;
  size_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  _OWORD *v190;
  char *v191;
  uint64_t v192;
  __int128 v193;
  uint64_t v194;
  _QWORD *v195;
  unint64_t v196;
  unint64_t v197;
  uint64_t v198;
  int v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  BOOL v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  int v211;
  void *v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unsigned __int16 *v221;
  void *v222;
  void *v223;
  double v224;
  double v225;
  double v226;
  double v227;
  void *v228;
  void *v229;
  double v230;
  double v231;
  double v232;
  void *v233;
  void *v234;
  double v235;
  uint64_t v236;
  unint64_t v237;
  unint64_t v238;
  uint64_t v239;
  size_t v240;
  double *v241;
  unsigned int *v242;
  char *v243;
  int64_t v244;
  uint64_t v245;
  char *v246;
  unsigned int *v247;
  uint64_t v248;
  int64_t v249;
  size_t v250;
  double *v251;
  uint64_t v252;
  int v253;
  unint64_t v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  _QWORD *v258;
  unint64_t v259;
  unsigned int *v260;
  char *v261;
  _QWORD *v262;
  _QWORD *v263;
  uint64_t v264;
  unint64_t v265;
  unint64_t v266;
  uint64_t v267;
  _BYTE *v268;
  _QWORD *v269;
  int64_t v270;
  unint64_t v271;
  char *v272;
  uint64_t v273;
  _QWORD *v274;
  uint64_t v275;
  unint64_t v276;
  unint64_t v277;
  _QWORD *v278;
  _BYTE *v279;
  _QWORD *v280;
  int64_t v281;
  unint64_t v282;
  char *v283;
  uint64_t v284;
  unint64_t v285;
  unint64_t v286;
  uint64_t v287;
  uint64_t v288;
  _OWORD *v289;
  __int128 *v290;
  uint64_t v291;
  __int128 v292;
  uint64_t v293;
  uint64_t v294;
  _OWORD *v295;
  __int128 *v296;
  uint64_t v297;
  __int128 v298;
  uint64_t v299;
  unint64_t v300;
  _QWORD *v301;
  unsigned int *v302;
  char *v303;
  unint64_t v304;
  void *v305;
  void *v306;
  void *v307;
  unint64_t v308;
  uint64_t v309;
  uint64_t v310;
  unint64_t v311;
  uint64_t v312;
  unint64_t v313;
  unint64_t v314;
  uint64_t v315;
  _QWORD *v316;
  _QWORD *v317;
  uint64_t v318;
  unint64_t v319;
  unint64_t v320;
  uint64_t v321;
  _BYTE *v322;
  _QWORD *v323;
  int64_t v324;
  unint64_t v325;
  char *v326;
  uint64_t v327;
  _QWORD *v328;
  uint64_t v329;
  unint64_t v330;
  unint64_t v331;
  _QWORD *v332;
  _BYTE *v333;
  _QWORD *v334;
  _QWORD *v335;
  int64_t v336;
  unint64_t v337;
  char *v338;
  uint64_t v339;
  unint64_t v340;
  unint64_t v341;
  uint64_t v342;
  uint64_t v343;
  _OWORD *v344;
  __int128 *v345;
  uint64_t v346;
  __int128 v347;
  uint64_t v348;
  uint64_t v349;
  _OWORD *v350;
  __int128 *v351;
  uint64_t v352;
  __int128 v353;
  unint64_t v354;
  unint64_t v355;
  uint64_t v356;
  uint64_t v357;
  unint64_t v358;
  uint64_t v359;
  unint64_t v360;
  uint64_t v361;
  uint64_t v362;
  unint64_t v363;
  uint64_t v364;
  uint64_t v365;
  unint64_t v366;
  uint64_t v367;
  unint64_t v368;
  float *v369;
  uint64_t **v370;
  unint64_t v371;
  uint64_t *v372;
  int64_t v373;
  char *v374;
  char *v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  uint64_t *v383;
  uint64_t *v384;
  uint64_t v385;
  unint64_t v386;
  unint64_t v387;
  unint64_t v388;
  char *v389;
  uint64_t *v390;
  char **v391;
  int64_t v392;
  char *v393;
  char *v394;
  char *v395;
  __int128 v396;
  __int128 v397;
  __int128 v398;
  __int128 v399;
  __int128 v400;
  __int128 v401;
  __int128 v402;
  uint64_t *v403;
  uint64_t v404;
  __int128 v405;
  __int128 v406;
  __int128 v407;
  __int128 v408;
  __int128 v409;
  __int128 v410;
  __int128 v411;
  __int128 v412;
  __int128 v413;
  __int128 v414;
  __int128 v415;
  __int128 v416;
  __int128 v417;
  uint64_t *v418;
  uint64_t *v419;
  void **v420;
  uint64_t *v421;
  void *v422;
  unsigned __int8 v423;
  int v424;
  unint64_t v425;
  unint64_t v426;
  uint64_t v428;
  uint64_t v429;
  size_t v430;
  const char *v431;
  unsigned __int8 v432;
  unsigned __int8 v433;
  const char *v434;
  size_t v435;
  void **v436;
  uint64_t v437;
  uint64_t v438;
  void **v439;
  NSObject *v440;
  uint64_t v441;
  uint64_t v442;
  unint64_t v443;
  size_t v444;
  std::__shared_weak_count_vtbl *v445;
  std::__shared_weak_count *v446;
  std::__shared_weak_count *v447;
  unint64_t *p_shared_owners;
  unint64_t v449;
  unint64_t v450;
  void *v451;
  uint64_t v452;
  char *v453;
  uint64_t v454;
  uint64_t v455;
  void *v456;
  int v457;
  std::__shared_weak_count *v458;
  unint64_t *v459;
  unint64_t v460;
  std::__shared_weak_count *v461;
  unint64_t *v462;
  unint64_t v463;
  uint64_t v464;
  std::__shared_weak_count *v465;
  unint64_t *v466;
  unint64_t v467;
  std::__shared_weak_count *v468;
  unint64_t *v469;
  unint64_t v470;
  std::__shared_weak_count *v471;
  unint64_t *v472;
  unint64_t v473;
  std::__shared_weak_count *v474;
  unint64_t *v475;
  unint64_t v476;
  void *v477;
  std::__shared_weak_count *v478;
  unint64_t *v479;
  unint64_t v480;
  uint64_t v481;
  uint64_t v482;
  unint64_t v483;
  uint64_t v484;
  uint64_t v485;
  char *v486;
  char *v487;
  unint64_t v488;
  uint64_t v489;
  uint64_t v490;
  int v491;
  unint64_t v492;
  unint64_t v493;
  char *v494;
  uint64_t v495;
  uint64_t v496;
  __int128 v497;
  size_t v498;
  uint64_t v499;
  unint64_t v500;
  unint64_t v501;
  double *v502;
  unsigned int *v503;
  double *v504;
  unint64_t v505;
  double v506;
  unint64_t v507;
  unsigned int *v508;
  unsigned int v509;
  uint64_t v510;
  unint64_t v511;
  unint64_t v512;
  double *v513;
  unsigned int *v514;
  double *v515;
  unint64_t v516;
  double v517;
  unint64_t v518;
  char *v519;
  unsigned int v520;
  unint64_t v521;
  unint64_t v522;
  double v523;
  double v524;
  double v525;
  double v526;
  double v527;
  double v528;
  double v529;
  double v530;
  double v531;
  double v532;
  char *v533;
  double *v534;
  double *v535;
  double v536;
  double v537;
  double v538;
  double v539;
  double v540;
  double v541;
  double v542;
  double v543;
  double v544;
  size_t *v545;
  uint64_t v546;
  uint64_t v547;
  int8x16_t v548;
  int8x16_t v549;
  int8x16_t v550;
  unsigned int v551;
  unint64_t v552;
  uint64_t i;
  unsigned int v554;
  _QWORD *v555;
  uint64_t v556;
  uint64_t v557;
  _QWORD *v558;
  _QWORD *v559;
  _QWORD *v560;
  _QWORD *v561;
  unint64_t v562;
  _QWORD *v563;
  _QWORD *v564;
  unint64_t v565;
  _QWORD *v566;
  _QWORD *v567;
  _BYTE *v568;
  uint64_t v569;
  _BYTE *v570;
  uint64_t v571;
  _BYTE *v572;
  int v573;
  uint64_t v574;
  int v575;
  uint64_t *v576;
  uint64_t v577;
  uint64_t v578;
  _QWORD *v579;
  _QWORD *v580;
  _QWORD *v581;
  uint64_t v582;
  unint64_t v583;
  _QWORD *v584;
  float *v585;
  _QWORD *v586;
  unint64_t v587;
  BOOL v588;
  _QWORD *v589;
  float *v590;
  float v591;
  float *v592;
  unint64_t v593;
  float **v594;
  float *v595;
  float *v596;
  uint64_t v597;
  _QWORD *v598;
  uint64_t v599;
  _BYTE *v600;
  uint64_t v601;
  _BYTE *v602;
  int v603;
  uint64_t v604;
  int v605;
  uint64_t *v606;
  uint64_t v607;
  uint64_t v608;
  float *v609;
  float *v610;
  unint64_t v611;
  unint64_t v612;
  uint64_t v613;
  double *v614;
  uint64_t v615;
  int64x2_t v616;
  double v617;
  uint64_t v618;
  void *v619;
  double __src;
  char *__srca;
  const char *__srcb;
  double v623;
  uint64_t v624;
  int v625;
  unint64_t *v626;
  int v627;
  void *v628;
  uint64_t v629;
  void **v630;
  double v631;
  int v632;
  uint64_t v633;
  double v634;
  unint64_t v635;
  void *v637;
  unsigned int *v638;
  unsigned int *v639;
  unint64_t v640;
  unint64_t v641;
  unint64_t v642;
  int8x16_t *v643;
  float *v646;
  uint64_t v647;
  uint64_t v648;
  unint64_t v649;
  unint64_t v650;
  unint64_t *v651;
  char *v652;
  char *v653;
  void *v654[2];
  __int128 v655;
  __int128 v656;
  __int128 v657;
  void *v658;
  void *v659;
  unint64_t v660;
  uint64_t v661;
  void *v662[2];
  unint64_t v663;
  __int128 v664;
  double *v665;
  unsigned __int16 *v666;
  void *v667;
  int64x2_t v668;
  uint64_t v669;
  uint64_t v670;
  __int128 v671;
  __int128 v672;
  __int128 v673;
  unint64_t v674;
  __int128 v675;
  double *v676;
  void *__p[31];
  void *object[6];
  __int128 v679;
  __int128 v680;
  __int128 v681;
  void *v682;
  void *v683;
  void *v684;
  void *v685;
  void *v686;
  void *v687;
  uint64_t v688;

  v4 = a2;
  v5 = a3;
  v688 = *MEMORY[0x24BDAC8D0];
  v652 = 0;
  v653 = 0;
  v6 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1 || !*(_QWORD *)(v6 + 96))
  {
    v32 = *(_QWORD *)(a1 + 24);
    if (v32)
    {
      if (v32 >> 61)
        sub_20E92CED8();
      v33 = (unint64_t *)operator new(8 * v32);
      v3 = (size_t)&v33[v32];
      v652 = (char *)v33;
      v34 = *(_QWORD **)(a1 + 8);
      v35 = (_QWORD *)(a1 + 16);
      if (v34 != (_QWORD *)(a1 + 16))
        goto LABEL_45;
    }
    else
    {
      v3 = 0;
      v33 = 0;
      v34 = *(_QWORD **)(a1 + 8);
      v35 = (_QWORD *)(a1 + 16);
      if (v34 != (_QWORD *)(a1 + 16))
      {
LABEL_45:
        v36 = 0x1FFFFFFFFFFFFFFFLL;
        v37 = v33;
        while (1)
        {
          if ((unint64_t)v33 < v3)
          {
            *v33++ = v34[4];
            v38 = (_QWORD *)v34[1];
            if (v38)
              goto LABEL_65;
            goto LABEL_67;
          }
          v39 = (char *)v33 - (char *)v37;
          v6 = v33 - v37;
          v40 = v6 + 1;
          if ((v6 + 1) >> 61)
            sub_20E92CED8();
          if ((uint64_t)(v3 - (_QWORD)v37) >> 2 > v40)
            v40 = (uint64_t)(v3 - (_QWORD)v37) >> 2;
          if (v3 - (unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
            v41 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v41 = v40;
          if (v41)
          {
            v42 = v33;
            if (v41 >> 61)
              sub_20E877A38();
            v43 = operator new(8 * v41);
            v33 = v42;
            v44 = &v43[8 * v6];
            *(_QWORD *)v44 = v34[4];
            v45 = (uint64_t)(v44 + 8);
            v46 = (char *)v33 - (char *)v37;
            if (v33 != v37)
            {
LABEL_59:
              v47 = v46 - 8;
              if (v47 < 0x168
                || (v51 = ((char *)(v33 - 1) - (char *)v37) & 0xFFFFFFFFFFFFFFF8, &v43[v39 - 8 - v51] > &v43[v39 - 8])
                || (unint64_t *)((char *)v33 - v51 - 8) > v33 - 1
                || (unint64_t)((char *)v33 - v43 - v39) < 0x20)
              {
                v48 = v33;
                v4 = a2;
              }
              else
              {
                v52 = (v47 >> 3) + 1;
                v53 = 8 * (v52 & 0x3FFFFFFFFFFFFFFCLL);
                v48 = &v33[v53 / 0xFFFFFFFFFFFFFFF8];
                v44 -= v53;
                v54 = &v43[8 * v6 - 16];
                v55 = v33 - 2;
                v56 = v52 & 0x3FFFFFFFFFFFFFFCLL;
                v4 = a2;
                do
                {
                  v57 = *(_OWORD *)v55;
                  *(v54 - 1) = *((_OWORD *)v55 - 1);
                  *v54 = v57;
                  v54 -= 2;
                  v55 -= 4;
                  v56 -= 4;
                }
                while (v56);
                if (v52 == (v52 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_62:
                  v3 = (size_t)&v43[8 * v41];
                  v652 = v44;
                  if (!v37)
                    goto LABEL_64;
LABEL_63:
                  operator delete(v37);
                  goto LABEL_64;
                }
              }
              do
              {
                v49 = *--v48;
                *((_QWORD *)v44 - 1) = v49;
                v44 -= 8;
              }
              while (v48 != v37);
              goto LABEL_62;
            }
          }
          else
          {
            v43 = 0;
            v44 = (char *)(8 * v6);
            *(_QWORD *)(8 * v6) = v34[4];
            v45 = 8 * v6 + 8;
            v46 = (char *)v33 - (char *)v37;
            if (v33 != v37)
              goto LABEL_59;
          }
          v4 = a2;
          v3 = (size_t)&v43[8 * v41];
          v652 = v44;
          if (v37)
            goto LABEL_63;
LABEL_64:
          v37 = (unint64_t *)v44;
          v33 = (unint64_t *)v45;
          v5 = a3;
          v38 = (_QWORD *)v34[1];
          if (v38)
          {
            do
            {
LABEL_65:
              v50 = v38;
              v38 = (_QWORD *)*v38;
            }
            while (v38);
            goto LABEL_46;
          }
          do
          {
LABEL_67:
            v50 = (_QWORD *)v34[2];
            v88 = *v50 == (_QWORD)v34;
            v34 = v50;
          }
          while (!v88);
LABEL_46:
          v34 = v50;
          if (v50 == v35)
          {
            v58 = v652;
            *v5 = 0;
            v5[1] = 0;
            v5[2] = 0;
            if (v652 == (char *)v33)
              goto LABEL_850;
LABEL_285:
            v651 = (unint64_t *)v58;
            v619 = v5 + 2;
            v616 = vdupq_n_s64(0x64uLL);
            v194 = a1;
            v626 = v33;
LABEL_288:
            v195 = *(_QWORD **)(v194 + 16);
            if (!v195)
LABEL_996:
              sub_20E89FD20("map::at:  key not found");
            v196 = *v651;
            while (1)
            {
              while (1)
              {
                v197 = v195[4];
                if (v196 >= v197)
                  break;
                v195 = (_QWORD *)*v195;
                if (!v195)
                  goto LABEL_996;
              }
              if (v197 >= v196)
                break;
              v195 = (_QWORD *)v195[1];
              if (!v195)
                goto LABEL_996;
            }
            v198 = v195[5];
            v194 = a1;
            if (v4[2] - *(double *)(v198 + 16) < *(double *)(a1 + 48))
              goto LABEL_287;
            v199 = *(unsigned __int8 *)(a1 + 56);
            v200 = *(_DWORD *)(a1 + 32);
            v664 = 0uLL;
            v665 = 0;
            v662[0] = 0;
            v662[1] = 0;
            v663 = 0;
            if ((unint64_t)sub_20EDCAE04((uint64_t *)(v198 + 80), (uint64_t *)(*(_QWORD *)(v198 + 24) + 80), (_QWORD *)(*((_QWORD *)v4 + 3) + 80), (char **)&v664, (char **)v662, 0.85, -1, 0, 0) <= 3)
            {
              v201 = *(_QWORD *)(v198 + 24);
              if (*(_BYTE *)(v201 + 184))
              {
                v202 = *(_QWORD *)(v201 + 88) - *(_QWORD *)(v201 + 80);
                if (v202)
                  v203 = v202 == *(_QWORD *)(v201 + 168) - *(_QWORD *)(v201 + 160);
                else
                  v203 = 0;
                if (!v203 || (v6 = (uint64_t)(*(_QWORD *)(v201 + 64) - *(_QWORD *)(v201 + 56)) >> 5, v6 != v202 >> 6))
                {
LABEL_315:
                  if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/PointDescriptorStore.h", 184, (uint64_t)"HasValidSize()", 14, (uint64_t)"Descriptor size mis-match", 25, (void (*)(void **))sub_21023DDB0))
                  {
                    v6 = (uint64_t)(*(_QWORD *)(v201 + 64) - *(_QWORD *)(v201 + 56)) >> 5;
                    goto LABEL_317;
                  }
LABEL_1012:
                  abort();
                }
              }
              else
              {
                if (*(_QWORD *)(v201 + 160) != *(_QWORD *)(v201 + 168))
                  goto LABEL_315;
                v6 = (uint64_t)(*(_QWORD *)(v201 + 64) - *(_QWORD *)(v201 + 56)) >> 5;
                if (v6 != (uint64_t)(*(_QWORD *)(v201 + 88) - *(_QWORD *)(v201 + 80)) >> 6)
                  goto LABEL_315;
              }
              if (*(_QWORD *)(v201 + 16) > v6)
                goto LABEL_315;
LABEL_317:
              v206 = *((_QWORD *)v4 + 3);
              if (*(_BYTE *)(v206 + 184))
              {
                v207 = *(_QWORD *)(v206 + 88) - *(_QWORD *)(v206 + 80);
                if (!v207)
                  goto LABEL_325;
                if (v207 != *(_QWORD *)(v206 + 168) - *(_QWORD *)(v206 + 160))
                  goto LABEL_325;
                v208 = (uint64_t)(*(_QWORD *)(v206 + 64) - *(_QWORD *)(v206 + 56)) >> 5;
                if (v208 != v207 >> 6)
                  goto LABEL_325;
LABEL_324:
                if (*(_QWORD *)(v206 + 16) > v208)
                  goto LABEL_325;
              }
              else
              {
                if (*(_QWORD *)(v206 + 160) == *(_QWORD *)(v206 + 168))
                {
                  v208 = (uint64_t)(*(_QWORD *)(v206 + 64) - *(_QWORD *)(v206 + 56)) >> 5;
                  if (v208 == (uint64_t)(*(_QWORD *)(v206 + 88) - *(_QWORD *)(v206 + 80)) >> 6)
                    goto LABEL_324;
                }
LABEL_325:
                if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/PointDescriptorStore.h", 184, (uint64_t)"HasValidSize()", 14, (uint64_t)"Descriptor size mis-match", 25, (void (*)(void **))sub_21023DDB0))
                {
                  goto LABEL_1012;
                }
                v208 = (uint64_t)(*(_QWORD *)(v206 + 64) - *(_QWORD *)(v206 + 56)) >> 5;
              }
              v633 = v208;
              v3 = 0;
              v646 = 0;
              v36 = -1;
              LODWORD(v630) = v200;
              memset((char *)__p + 4, 0, 240);
              goto LABEL_610;
            }
            if (!v199)
              goto LABEL_386;
            v667 = 0;
            v668 = 0uLL;
            v654[0] = 0;
            v654[1] = 0;
            *(_QWORD *)&v655 = 0;
            v659 = 0;
            v666 = 0;
            sub_20FD3D6C4((uint64_t *)&v667, (uint64_t *)v654, &v659, (uint64_t *)&v666, *(_QWORD *)(v198 + 24), *((_QWORD *)v4 + 3), (unsigned int **)&v664, (unsigned int **)v662, (uint64_t)object, 0.2, *(uint64x2_t *)v4, *(uint64x2_t *)v198);
            if ((unint64_t)v659 <= 2)
            {
              v204 = *(_QWORD *)(v198 + 24);
              if (*(_BYTE *)(v204 + 184))
              {
                v205 = *(_QWORD *)(v204 + 88) - *(_QWORD *)(v204 + 80);
                if (!v205)
                  goto LABEL_343;
                if (v205 != *(_QWORD *)(v204 + 168) - *(_QWORD *)(v204 + 160))
                  goto LABEL_343;
                v6 = (uint64_t)(*(_QWORD *)(v204 + 64) - *(_QWORD *)(v204 + 56)) >> 5;
                if (v6 != v205 >> 6)
                  goto LABEL_343;
LABEL_342:
                if (*(_QWORD *)(v204 + 16) > v6)
                  goto LABEL_343;
              }
              else
              {
                if (*(_QWORD *)(v204 + 160) == *(_QWORD *)(v204 + 168))
                {
                  v6 = (uint64_t)(*(_QWORD *)(v204 + 64) - *(_QWORD *)(v204 + 56)) >> 5;
                  if (v6 == (uint64_t)(*(_QWORD *)(v204 + 88) - *(_QWORD *)(v204 + 80)) >> 6)
                    goto LABEL_342;
                }
LABEL_343:
                if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/PointDescriptorStore.h", 184, (uint64_t)"HasValidSize()", 14, (uint64_t)"Descriptor size mis-match", 25, (void (*)(void **))sub_21023DDB0))
                {
                  goto LABEL_1023;
                }
                v6 = (uint64_t)(*(_QWORD *)(v204 + 64) - *(_QWORD *)(v204 + 56)) >> 5;
              }
              v213 = *((_QWORD *)v4 + 3);
              if (*(_BYTE *)(v213 + 184))
              {
                v214 = *(_QWORD *)(v213 + 88) - *(_QWORD *)(v213 + 80);
                if (!v214)
                  goto LABEL_353;
                if (v214 != *(_QWORD *)(v213 + 168) - *(_QWORD *)(v213 + 160))
                  goto LABEL_353;
                v215 = (uint64_t)(*(_QWORD *)(v213 + 64) - *(_QWORD *)(v213 + 56)) >> 5;
                if (v215 != v214 >> 6)
                  goto LABEL_353;
LABEL_352:
                if (*(_QWORD *)(v213 + 16) > v215)
                  goto LABEL_353;
              }
              else
              {
                if (*(_QWORD *)(v213 + 160) == *(_QWORD *)(v213 + 168))
                {
                  v215 = (uint64_t)(*(_QWORD *)(v213 + 64) - *(_QWORD *)(v213 + 56)) >> 5;
                  if (v215 == (uint64_t)(*(_QWORD *)(v213 + 88) - *(_QWORD *)(v213 + 80)) >> 6)
                    goto LABEL_352;
                }
LABEL_353:
                if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/PointDescriptorStore.h", 184, (uint64_t)"HasValidSize()", 14, (uint64_t)"Descriptor size mis-match", 25, (void (*)(void **))sub_21023DDB0))
                {
LABEL_1023:
                  abort();
                }
                v215 = (uint64_t)(*(_QWORD *)(v213 + 64) - *(_QWORD *)(v213 + 56)) >> 5;
              }
              v633 = v215;
              v3 = 0;
              v646 = 0;
              v211 = 1;
              v36 = -1;
              LODWORD(v630) = v200;
              memset((char *)__p + 4, 0, 240);
LABEL_375:
              if (v686)
              {
                v687 = v686;
                operator delete(v686);
              }
              if (v684)
              {
                v685 = v684;
                operator delete(v684);
              }
              if (v682)
              {
                v683 = v682;
                operator delete(v682);
              }
              if (v654[0])
              {
                v654[1] = v654[0];
                operator delete(v654[0]);
              }
              if (v667)
              {
                v668.i64[0] = (uint64_t)v667;
                operator delete(v667);
              }
              if (v211)
                goto LABEL_610;
LABEL_386:
              v659 = 0;
              v660 = 0;
              v661 = 0;
              memset((char *)__p + 4, 0, 240);
              v647 = v198;
              v627 = v200;
              if (v200 != 2)
              {
                if (v200 == 1)
                {
                  v219 = *((_QWORD *)v4 + 3);
                  v220 = *((_QWORD *)&v664 + 1) - v664;
                  if ((void *)(*((_QWORD *)&v664 + 1) - v664) == (void *)((char *)v662[1] - (char *)v662[0]))
                    goto LABEL_391;
                  if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PlaceRecognitionUnsanitized/src/VisualDatabase.cpp", 246, (uint64_t)"reference_correspondences.size() == inspection_correspondences.size()", 69, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                  {
                    v220 = *((_QWORD *)&v664 + 1) - v664;
LABEL_391:
                    v660 = 0;
                    sub_20EB884A4((uint64_t)&v659, v220 >> 2, 0);
                    *(_QWORD *)&v680 = 0;
                    v679 = 0u;
                    memset(object, 0, sizeof(object));
                    v667 = 0;
                    v668 = 0uLL;
                    v654[0] = 0;
                    v654[1] = 0;
                    *(_QWORD *)&v655 = 0;
                    sub_20F42652C((uint64_t *)&v666);
                    v221 = v666;
                    if (!sub_20F426630(v666, *(_QWORD *)v198, *(_QWORD *)(v198 + 8), *(_QWORD *)(v198 + 24), v219, (unsigned int **)&v664, (unsigned int **)v662, (double **)&v667, (double **)v654, (uint64_t)object))
                    {
                      v304 = 0;
                      v305 = (void *)*((_QWORD *)v221 + 15);
                      if (!v305)
                        goto LABEL_471;
                      goto LABEL_470;
                    }
                    v222 = object[4];
                    v223 = object[5];
                    v224 = *(double *)&v680;
                    v225 = *((double *)&v679 + 1);
                    v226 = *(double *)&v679;
                    v227 = *(double *)&object[4] * *(double *)&v680 - *(double *)&object[5] * *((double *)&v679 + 1);
                    v228 = object[3];
                    v229 = object[2];
                    v230 = *(double *)&v680 * *(double *)&object[3];
                    v231 = *(double *)&object[5] * *(double *)&v679;
                    v232 = *((double *)&v679 + 1) * *(double *)&object[3] - *(double *)&object[4] * *(double *)&v679;
                    v233 = object[0];
                    v234 = object[1];
                    v235 = v227 * *(double *)object
                         - *(double *)&object[1]
                         * (*(double *)&v680 * *(double *)&object[3] - *(double *)&object[5] * *(double *)&v679)
                         + v232 * *(double *)&object[2];
                    if (fabs(v235) <= 0.00000001)
                    {
                      v304 = 0;
                      v305 = (void *)*((_QWORD *)v221 + 15);
                      if (!v305)
                        goto LABEL_471;
                      goto LABEL_470;
                    }
                    v236 = *((_QWORD *)&v664 + 1);
                    v676 = 0;
                    v675 = 0uLL;
                    v615 = v664;
                    v237 = *((_QWORD *)&v664 + 1) - v664;
                    v238 = (uint64_t)(*((_QWORD *)&v664 + 1) - v664) >> 2;
                    v637 = object[4];
                    v631 = *(double *)&object[4] * *(double *)&v680 - *(double *)&object[5] * *((double *)&v679 + 1);
                    v634 = *((double *)&v679 + 1) * *(double *)&object[3] - *(double *)&object[4] * *(double *)&v679;
                    __src = *(double *)&object[5] * *(double *)&v679;
                    v623 = *(double *)&v680 * *(double *)&object[3];
                    v617 = v227 * *(double *)object
                         - *(double *)&object[1]
                         * (*(double *)&v680 * *(double *)&object[3] - *(double *)&object[5] * *(double *)&v679)
                         + v232 * *(double *)&object[2];
                    if (*((_QWORD *)&v664 + 1) == (_QWORD)v664)
                    {
                      v241 = 0;
                      v242 = (unsigned int *)v662[0];
                      v243 = (char *)v662[1];
                      v674 = 0;
                      v673 = 0uLL;
                      v244 = (char *)v662[1] - (char *)v662[0];
                      if (v662[1] != v662[0])
                        goto LABEL_396;
                    }
                    else
                    {
                      if (v237 >= 0x7FFFFFFFFFFFFFFDLL)
                        sub_20E867F44();
                      v239 = *((_QWORD *)&v664 + 1);
                      v240 = 2 * v237;
                      v241 = (double *)operator new(2 * v237);
                      *(_QWORD *)&v675 = v241;
                      v676 = &v241[v238];
                      bzero(v241, v240);
                      *((_QWORD *)&v675 + 1) = (char *)v241 + v240;
                      v222 = v637;
                      v227 = v631;
                      v232 = v634;
                      v231 = __src;
                      v230 = v623;
                      v235 = v617;
                      v236 = v239;
                      v242 = (unsigned int *)v662[0];
                      v243 = (char *)v662[1];
                      v674 = 0;
                      v673 = 0uLL;
                      v244 = (char *)v662[1] - (char *)v662[0];
                      if (v662[1] != v662[0])
                      {
LABEL_396:
                        v614 = v241;
                        if ((unint64_t)v244 >= 0x7FFFFFFFFFFFFFFDLL)
                          sub_20E867F44();
                        v245 = v219;
                        v246 = v243;
                        v247 = v242;
                        v248 = v236;
                        v249 = v244;
                        v250 = 2 * v244;
                        v251 = (double *)operator new(2 * v244);
                        bzero(v251, v250);
                        v222 = v637;
                        v227 = v631;
                        v232 = v634;
                        v231 = __src;
                        v230 = v623;
                        v235 = v617;
                        v236 = v248;
                        v242 = v247;
                        v244 = v249;
                        v243 = v246;
                        v219 = v245;
                        v241 = v614;
                        v252 = v615;
                        if (v248 == v615)
                        {
LABEL_812:
                          if (v243 != (char *)v242)
                          {
                            v510 = *(_QWORD *)(v219 + 56);
                            if ((unint64_t)(v244 >> 2) <= 1)
                              v511 = 1;
                            else
                              v511 = v244 >> 2;
                            if (v511 < 2)
                            {
                              v512 = 0;
                              v513 = v251;
                              goto LABEL_821;
                            }
                            v512 = v511 & 0xFFFFFFFFFFFFFFFELL;
                            v513 = &v251[v511 & 0xFFFFFFFFFFFFFFFELL];
                            v514 = v242 + 1;
                            v515 = v251 + 1;
                            v516 = v511 & 0xFFFFFFFFFFFFFFFELL;
                            do
                            {
                              v517 = *(float *)(v510 + 32 * *v514 + 20);
                              *(v515 - 1) = *(float *)(v510 + 32 * *(v514 - 1) + 20);
                              *v515 = v517;
                              v514 += 2;
                              v515 += 2;
                              v516 -= 2;
                            }
                            while (v516);
                            if (v511 != v512)
                            {
LABEL_821:
                              v518 = v511 - v512;
                              v519 = (char *)&v242[v512];
                              do
                              {
                                v520 = *(_DWORD *)v519;
                                v519 += 4;
                                *v513++ = *(float *)(v510 + 32 * v520 + 20);
                                --v518;
                              }
                              while (v518);
                            }
                          }
                          if (v236 == v252)
                          {
                            v522 = 0;
                            v304 = 0;
                            if (v251)
                              goto LABEL_831;
                          }
                          else
                          {
                            v521 = 0;
                            v522 = 0;
                            v523 = 1.0 / v235;
                            v524 = v227 * (1.0 / v235);
                            v525 = (v225 * *(double *)&v229 - v224 * *(double *)&v234) * (1.0 / v235);
                            v526 = (*(double *)&v223 * *(double *)&v234 - *(double *)&v222 * *(double *)&v229)
                                 * (1.0
                                  / v235);
                            v527 = (v231 - v230) * v523;
                            v528 = (v224 * *(double *)&v233 - v226 * *(double *)&v229) * v523;
                            v529 = (*(double *)&v228 * *(double *)&v229 - *(double *)&v223 * *(double *)&v233) * v523;
                            v530 = v232 * v523;
                            v531 = (v226 * *(double *)&v234 - v225 * *(double *)&v233) * v523;
                            v532 = (*(double *)&v222 * *(double *)&v233 - *(double *)&v228 * *(double *)&v234) * v523;
                            v533 = (char *)v659;
                            v534 = (double *)v654[0];
                            v535 = (double *)v667;
                            do
                            {
                              while (1)
                              {
                                v536 = v535[1];
                                v537 = 1.0 / (v224 + v226 * *v535 + v225 * v536);
                                v538 = (*(double *)&v229 + *(double *)&v233 * *v535 + *(double *)&v234 * v536) * v537;
                                v539 = (*(double *)&v223 + *(double *)&v228 * *v535 + *(double *)&v222 * v536) * v537;
                                v540 = *v534;
                                v541 = v534[1];
                                if ((v538 - *v534) * (v538 - *v534) + (v539 - v541) * (v539 - v541) < v251[v521] * v251[v521] * 64.0)
                                {
                                  v542 = 1.0 / (v532 + v530 * v540 + v531 * v541);
                                  v543 = (v526 + v524 * v540 + v525 * v541) * v542;
                                  v544 = (v529 + v527 * v540 + v528 * v541) * v542 - v536;
                                  if ((v543 - *v535) * (v543 - *v535) + v544 * v544 < v241[v521] * v241[v521] * 64.0)
                                    break;
                                }
                                *(_QWORD *)&v533[(v521 >> 3) & 0x1FFFFFFFFFFFFFF8] &= ~(1 << v521);
                                ++v521;
                                v535 += 2;
                                v534 += 2;
                                if (v238 == v521)
                                  goto LABEL_831;
                              }
                              *(_QWORD *)&v533[(v521 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v521;
                              ++v522;
                              ++v521;
                              v535 += 2;
                              v534 += 2;
                            }
                            while (v238 != v521);
LABEL_831:
                            operator delete(v251);
                            v304 = v522;
                          }
                          if (v241)
                            operator delete(v241);
                          v4 = a2;
                          v198 = v647;
                          v305 = (void *)*((_QWORD *)v221 + 15);
                          if (!v305)
                          {
LABEL_471:
                            v306 = (void *)*((_QWORD *)v221 + 12);
                            if (v306)
                            {
                              *((_QWORD *)v221 + 13) = v306;
                              operator delete(v306);
                            }
                            v307 = (void *)*((_QWORD *)v221 + 9);
                            if (v307)
                            {
                              *((_QWORD *)v221 + 10) = v307;
                              operator delete(v307);
                            }
                            MEMORY[0x212BC6398](v221, 0x10B0C4091E22534);
                            if (v654[0])
                            {
                              v654[1] = v654[0];
                              operator delete(v654[0]);
                            }
                            if (v667)
                            {
                              v668.i64[0] = (uint64_t)v667;
                              operator delete(v667);
                            }
                            v308 = *(_QWORD *)(a1 + 64);
                            if (!*(_BYTE *)(a1 + 72))
                              v308 = 8;
                            v309 = *(_QWORD *)(v198 + 24);
                            if (v304 < v308)
                            {
                              if (*(_BYTE *)(v309 + 184))
                              {
                                v310 = *(_QWORD *)(v309 + 88) - *(_QWORD *)(v309 + 80);
                                if (!v310)
                                  goto LABEL_584;
                                if (v310 != *(_QWORD *)(v309 + 168) - *(_QWORD *)(v309 + 160))
                                  goto LABEL_584;
                                v311 = (uint64_t)(*(_QWORD *)(v309 + 64) - *(_QWORD *)(v309 + 56)) >> 5;
                                if (v311 != v310 >> 6)
                                  goto LABEL_584;
LABEL_583:
                                if (*(_QWORD *)(v309 + 16) > v311)
                                  goto LABEL_584;
LABEL_586:
                                v361 = *((_QWORD *)v4 + 3);
                                v640 = v311;
                                if (*(_BYTE *)(v361 + 184))
                                {
                                  v362 = *(_QWORD *)(v361 + 88) - *(_QWORD *)(v361 + 80);
                                  if (!v362
                                    || v362 != *(_QWORD *)(v361 + 168) - *(_QWORD *)(v361 + 160)
                                    || (v363 = (uint64_t)(*(_QWORD *)(v361 + 64) - *(_QWORD *)(v361 + 56)) >> 5,
                                        v363 != v362 >> 6))
                                  {
LABEL_604:
                                    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/PointDescriptorStore.h", 184, (uint64_t)"HasValidSize()", 14, (uint64_t)"Descriptor size mis-match", 25, (void (*)(void **))sub_21023DDB0))
                                    {
                                      v367 = -1;
                                      v633 = (uint64_t)(*(_QWORD *)(v361 + 64) - *(_QWORD *)(v361 + 56)) >> 5;
                                      v368 = v660;
                                      if (!v660)
                                        goto LABEL_606;
                                      goto LABEL_777;
                                    }
                                    goto LABEL_1024;
                                  }
                                }
                                else
                                {
                                  if (*(_QWORD *)(v361 + 160) != *(_QWORD *)(v361 + 168))
                                    goto LABEL_604;
                                  v363 = (uint64_t)(*(_QWORD *)(v361 + 64) - *(_QWORD *)(v361 + 56)) >> 5;
                                  if (v363 != (uint64_t)(*(_QWORD *)(v361 + 88) - *(_QWORD *)(v361 + 80)) >> 6)
                                    goto LABEL_604;
                                }
                                if (*(_QWORD *)(v361 + 16) <= v363)
                                {
                                  v367 = -1;
                                  v633 = v363;
                                  v368 = v660;
                                  if (!v660)
                                    goto LABEL_606;
                                  goto LABEL_777;
                                }
                                goto LABEL_604;
                              }
                              if (*(_QWORD *)(v309 + 160) == *(_QWORD *)(v309 + 168))
                              {
                                v311 = (uint64_t)(*(_QWORD *)(v309 + 64) - *(_QWORD *)(v309 + 56)) >> 5;
                                if (v311 == (uint64_t)(*(_QWORD *)(v309 + 88) - *(_QWORD *)(v309 + 80)) >> 6)
                                  goto LABEL_583;
                              }
LABEL_584:
                              if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/PointDescriptorStore.h", 184, (uint64_t)"HasValidSize()", 14, (uint64_t)"Descriptor size mis-match", 25, (void (*)(void **))sub_21023DDB0))
                              {
                                v311 = (uint64_t)(*(_QWORD *)(v309 + 64) - *(_QWORD *)(v309 + 56)) >> 5;
                                goto LABEL_586;
                              }
LABEL_1024:
                              abort();
                            }
                            if (*(_BYTE *)(v309 + 184))
                            {
                              v312 = *(_QWORD *)(v309 + 88) - *(_QWORD *)(v309 + 80);
                              if (!v312)
                                goto LABEL_594;
                              if (v312 != *(_QWORD *)(v309 + 168) - *(_QWORD *)(v309 + 160))
                                goto LABEL_594;
                              v313 = (uint64_t)(*(_QWORD *)(v309 + 64) - *(_QWORD *)(v309 + 56)) >> 5;
                              if (v313 != v312 >> 6)
                                goto LABEL_594;
LABEL_593:
                              if (*(_QWORD *)(v309 + 16) > v313)
                                goto LABEL_594;
                            }
                            else
                            {
                              if (*(_QWORD *)(v309 + 160) == *(_QWORD *)(v309 + 168))
                              {
                                v313 = (uint64_t)(*(_QWORD *)(v309 + 64) - *(_QWORD *)(v309 + 56)) >> 5;
                                if (v313 == (uint64_t)(*(_QWORD *)(v309 + 88) - *(_QWORD *)(v309 + 80)) >> 6)
                                  goto LABEL_593;
                              }
LABEL_594:
                              if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/PointDescriptorStore.h", 184, (uint64_t)"HasValidSize()", 14, (uint64_t)"Descriptor size mis-match", 25, (void (*)(void **))sub_21023DDB0))
                              {
                                goto LABEL_1024;
                              }
                              v313 = (uint64_t)(*(_QWORD *)(v309 + 64) - *(_QWORD *)(v309 + 56)) >> 5;
                            }
                            v364 = *((_QWORD *)v4 + 3);
                            v640 = v313;
                            if (*(_BYTE *)(v364 + 184))
                            {
                              v365 = *(_QWORD *)(v364 + 88) - *(_QWORD *)(v364 + 80);
                              if (!v365)
                                goto LABEL_741;
                              if (v365 != *(_QWORD *)(v364 + 168) - *(_QWORD *)(v364 + 160))
                                goto LABEL_741;
                              v366 = (uint64_t)(*(_QWORD *)(v364 + 64) - *(_QWORD *)(v364 + 56)) >> 5;
                              if (v366 != v365 >> 6)
                                goto LABEL_741;
LABEL_740:
                              if (*(_QWORD *)(v364 + 16) <= v366)
                                goto LABEL_776;
                            }
                            else if (*(_QWORD *)(v364 + 160) == *(_QWORD *)(v364 + 168))
                            {
                              v366 = (uint64_t)(*(_QWORD *)(v364 + 64) - *(_QWORD *)(v364 + 56)) >> 5;
                              if (v366 == (uint64_t)(*(_QWORD *)(v364 + 88) - *(_QWORD *)(v364 + 80)) >> 6)
                                goto LABEL_740;
                            }
LABEL_741:
                            if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/PointDescriptorStore.h", 184, (uint64_t)"HasValidSize()", 14, (uint64_t)"Descriptor size mis-match", 25, (void (*)(void **))sub_21023DDB0))
                            {
                              v367 = v196;
                              v633 = (uint64_t)(*(_QWORD *)(v364 + 64) - *(_QWORD *)(v364 + 56)) >> 5;
                              v368 = v660;
                              if (!v660)
                                goto LABEL_606;
                              goto LABEL_777;
                            }
                            goto LABEL_1024;
                          }
LABEL_470:
                          *((_QWORD *)v221 + 16) = v305;
                          operator delete(v305);
                          goto LABEL_471;
                        }
LABEL_802:
                        v499 = *(_QWORD *)(*(_QWORD *)(v647 + 24) + 56);
                        if (v238 <= 1)
                          v500 = 1;
                        else
                          v500 = v238;
                        if (v500 >= 2)
                        {
                          v501 = v500 & 0xFFFFFFFFFFFFFFFELL;
                          v502 = &v241[v500 & 0xFFFFFFFFFFFFFFFELL];
                          v503 = (unsigned int *)(v252 + 4);
                          v504 = v241 + 1;
                          v505 = v500 & 0xFFFFFFFFFFFFFFFELL;
                          do
                          {
                            v506 = *(float *)(v499 + 32 * *v503 + 20);
                            *(v504 - 1) = *(float *)(v499 + 32 * *(v503 - 1) + 20);
                            *v504 = v506;
                            v503 += 2;
                            v504 += 2;
                            v505 -= 2;
                          }
                          while (v505);
                          if (v500 == v501)
                            goto LABEL_812;
                        }
                        else
                        {
                          v501 = 0;
                          v502 = v241;
                        }
                        v507 = v500 - v501;
                        v508 = (unsigned int *)(v252 + 4 * v501);
                        do
                        {
                          v509 = *v508++;
                          *v502++ = *(float *)(v499 + 32 * v509 + 20);
                          --v507;
                        }
                        while (v507);
                        goto LABEL_812;
                      }
                    }
                    v251 = 0;
                    v252 = v615;
                    if (v236 == v615)
                      goto LABEL_812;
                    goto LABEL_802;
                  }
                }
                else
                {
                  sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PlaceRecognitionUnsanitized/src/VisualDatabase.cpp", 223, (uint64_t)"", 0, (uint64_t)"Invalid value for GeometryModel::TYPE", 37, (void (*)(void **))sub_21023DDB0);
                }
                abort();
              }
              v658 = 0;
              v656 = 0uLL;
              v657 = 0uLL;
              *(_OWORD *)v654 = 0uLL;
              v655 = 0uLL;
              v680 = 0uLL;
              v681 = 0uLL;
              v679 = 0uLL;
              memset(object, 0, sizeof(object));
              v253 = *(unsigned __int8 *)(a1 + 72);
              v254 = *(_QWORD *)(a1 + 64);
              if ((void *)(*((_QWORD *)&v664 + 1) - v664) != (void *)((char *)v662[1] - (char *)v662[0])
                && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PlaceRecognitionUnsanitized/src/VisualDatabase.cpp", 302, (uint64_t)"reference_correspondences.size() == inspection_correspondences.size()", 69, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *(_QWORD *)(v198 + 64) == *(_QWORD *)(v198 + 56)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PlaceRecognitionUnsanitized/src/VisualDatabase.cpp", 303, (uint64_t)"reference_keyframe.calibrated_points().size()", 45, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *((_QWORD *)v4 + 8) == *((_QWORD *)v4 + 7)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PlaceRecognitionUnsanitized/src/VisualDatabase.cpp",
                     304,
                     (uint64_t)"inspection_keyframe.calibrated_points().size()",
                     46,
                     (uint64_t)"",
                     0,
                     (void (*)(void **))sub_21023DDB0))
              {
                goto LABEL_1018;
              }
              v660 = 0;
              sub_20EB884A4((uint64_t)&v659, (uint64_t)(*((_QWORD *)&v664 + 1) - v664) >> 2, 0);
              v632 = v253;
              v675 = 0uLL;
              v676 = 0;
              v255 = *(_QWORD *)(v198 + 64) - *(_QWORD *)(v198 + 56);
              v635 = v254;
              if (v255)
              {
                v256 = 0xAAAAAAAAAAAAAAABLL * (v255 >> 3);
                v257 = 2 * v256;
                if ((2 * v256) >> 61)
                  goto LABEL_1002;
                v258 = operator new(16 * v256);
                v259 = (unint64_t)&v258[v257];
                *(_QWORD *)&v675 = v258;
                *((_QWORD *)&v675 + 1) = v258;
                v676 = (double *)v259;
                v638 = (unsigned int *)*((_QWORD *)&v664 + 1);
                v260 = (unsigned int *)v664;
                if ((_QWORD)v664 != *((_QWORD *)&v664 + 1))
                {
LABEL_408:
                  v261 = (char *)v258;
                  while (1)
                  {
                    while (1)
                    {
                      v262 = (_QWORD *)(*(_QWORD *)(v198 + 56) + 24 * *v260);
                      if ((unint64_t)v258 >= v259)
                        break;
                      *v258 = *v262;
                      v263 = v258 + 1;
                      if ((unint64_t)(v258 + 1) >= v259)
                        goto LABEL_430;
LABEL_409:
                      *v263 = v262[1];
                      v258 = v263 + 1;
                      v198 = v647;
                      if (++v260 == v638)
                        goto LABEL_466;
                    }
                    v264 = ((char *)v258 - v261) >> 3;
                    v265 = v264 + 1;
                    if ((unint64_t)(v264 + 1) >> 61)
                    {
                      v676 = (double *)v259;
                      *((_QWORD *)&v675 + 1) = v258;
                      goto LABEL_1001;
                    }
                    if ((uint64_t)(v259 - (_QWORD)v261) >> 2 > v265)
                      v265 = (uint64_t)(v259 - (_QWORD)v261) >> 2;
                    if (v259 - (unint64_t)v261 >= 0x7FFFFFFFFFFFFFF8)
                      v266 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v266 = v265;
                    if (v266)
                    {
                      if (v266 >> 61)
                        goto LABEL_1009;
                      v267 = *(_QWORD *)(v198 + 56) + 24 * *v260;
                      v268 = operator new(8 * v266);
                      v262 = (_QWORD *)v267;
                      v269 = &v268[8 * v264];
                      *v269 = *v262;
                      v263 = v269 + 1;
                      v270 = (char *)v258 - v261;
                      if (v258 == (_QWORD *)v261)
                        goto LABEL_427;
                    }
                    else
                    {
                      v268 = 0;
                      v269 = (_QWORD *)(8 * v264);
                      *(_QWORD *)(8 * v264) = *v262;
                      v263 = (_QWORD *)(8 * v264 + 8);
                      v270 = (char *)v258 - v261;
                      if (v258 == (_QWORD *)v261)
                        goto LABEL_427;
                    }
                    v271 = v270 - 8;
                    if (v271 < 0x168)
                    {
                      v272 = (char *)v258;
                      goto LABEL_426;
                    }
                    v285 = ((char *)(v258 - 1) - v261) & 0xFFFFFFFFFFFFFFF8;
                    if (&v268[(char *)v258 - v261 - 8 - v285] > &v268[(char *)v258 - v261 - 8])
                    {
                      v272 = (char *)v258;
                      do
                      {
LABEL_426:
                        v273 = *((_QWORD *)v272 - 1);
                        v272 -= 8;
                        *--v269 = v273;
                      }
                      while (v272 != v261);
                      goto LABEL_427;
                    }
                    if ((_QWORD *)((char *)v258 - v285 - 8) > v258 - 1)
                    {
                      v272 = (char *)v258;
                      goto LABEL_426;
                    }
                    if ((unint64_t)(v261 - v268) < 0x20)
                    {
                      v272 = (char *)v258;
                      goto LABEL_426;
                    }
                    v293 = (v271 >> 3) + 1;
                    v294 = 8 * (v293 & 0x3FFFFFFFFFFFFFFCLL);
                    v272 = (char *)&v258[v294 / 0xFFFFFFFFFFFFFFF8];
                    v269 = (_QWORD *)((char *)v269 - v294);
                    v295 = &v268[8 * v264 - 16];
                    v296 = (__int128 *)(v258 - 2);
                    v297 = v293 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v298 = *v296;
                      *(v295 - 1) = *(v296 - 1);
                      *v295 = v298;
                      v295 -= 2;
                      v296 -= 2;
                      v297 -= 4;
                    }
                    while (v297);
                    if (v293 != (v293 & 0x3FFFFFFFFFFFFFFCLL))
                      goto LABEL_426;
LABEL_427:
                    v259 = (unint64_t)&v268[8 * v266];
                    if (v261)
                    {
                      v274 = v262;
                      operator delete(v261);
                      v262 = v274;
                    }
                    v261 = (char *)v269;
                    if ((unint64_t)v263 < v259)
                      goto LABEL_409;
LABEL_430:
                    v275 = ((char *)v263 - v261) >> 3;
                    v276 = v275 + 1;
                    if ((unint64_t)(v275 + 1) >> 61)
                    {
                      v676 = (double *)v259;
                      *((_QWORD *)&v675 + 1) = v263;
LABEL_1001:
                      *(_QWORD *)&v675 = v261;
LABEL_1002:
                      sub_20E867F44();
                    }
                    if ((uint64_t)(v259 - (_QWORD)v261) >> 2 > v276)
                      v276 = (uint64_t)(v259 - (_QWORD)v261) >> 2;
                    if (v259 - (unint64_t)v261 >= 0x7FFFFFFFFFFFFFF8)
                      v277 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v277 = v276;
                    if (v277)
                    {
                      if (v277 >> 61)
                      {
                        v258 = v263;
LABEL_1009:
                        v676 = (double *)v259;
                        *((_QWORD *)&v675 + 1) = v258;
                        *(_QWORD *)&v675 = v261;
                        sub_20E877A38();
                      }
                      v278 = v262;
                      v279 = operator new(8 * v277);
                      v280 = &v279[8 * v275];
                      *v280 = v278[1];
                      v258 = v280 + 1;
                      v281 = (char *)v263 - v261;
                      if (v263 == (_QWORD *)v261)
                      {
LABEL_447:
                        v198 = v647;
                        v259 = (unint64_t)&v279[8 * v277];
                        if (!v261)
                          goto LABEL_444;
LABEL_443:
                        operator delete(v261);
                        goto LABEL_444;
                      }
                    }
                    else
                    {
                      v279 = 0;
                      v280 = (_QWORD *)(8 * v275);
                      *(_QWORD *)(8 * v275) = v262[1];
                      v258 = (_QWORD *)(8 * v275 + 8);
                      v281 = (char *)v263 - v261;
                      if (v263 == (_QWORD *)v261)
                        goto LABEL_447;
                    }
                    v282 = v281 - 8;
                    if (v282 < 0x168
                      || (v286 = ((char *)(v263 - 1) - v261) & 0xFFFFFFFFFFFFFFF8,
                          &v279[(char *)v263 - v261 - 8 - v286] > &v279[(char *)v263 - v261 - 8])
                      || (_QWORD *)((char *)v263 - v286 - 8) > v263 - 1
                      || (unint64_t)(v261 - v279) < 0x20)
                    {
                      v283 = (char *)v263;
                      v198 = v647;
                      do
                      {
LABEL_441:
                        v284 = *((_QWORD *)v283 - 1);
                        v283 -= 8;
                        *--v280 = v284;
                      }
                      while (v283 != v261);
                      goto LABEL_442;
                    }
                    v287 = (v282 >> 3) + 1;
                    v288 = 8 * (v287 & 0x3FFFFFFFFFFFFFFCLL);
                    v283 = (char *)&v263[v288 / 0xFFFFFFFFFFFFFFF8];
                    v280 = (_QWORD *)((char *)v280 - v288);
                    v289 = &v279[8 * v275 - 16];
                    v290 = (__int128 *)(v263 - 2);
                    v291 = v287 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v292 = *v290;
                      *(v289 - 1) = *(v290 - 1);
                      *v289 = v292;
                      v289 -= 2;
                      v290 -= 2;
                      v291 -= 4;
                    }
                    while (v291);
                    v198 = v647;
                    if (v287 != (v287 & 0x3FFFFFFFFFFFFFFCLL))
                      goto LABEL_441;
LABEL_442:
                    v259 = (unint64_t)&v279[8 * v277];
                    if (v261)
                      goto LABEL_443;
LABEL_444:
                    v261 = (char *)v280;
                    if (++v260 == v638)
                    {
LABEL_466:
                      v676 = (double *)v259;
                      *((_QWORD *)&v675 + 1) = v258;
                      *(_QWORD *)&v675 = v261;
                      v4 = a2;
                      v673 = 0uLL;
                      v674 = 0;
                      v299 = *((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7);
                      if (!v299)
                        goto LABEL_467;
LABEL_494:
                      v314 = 0xAAAAAAAAAAAAAAABLL * (v299 >> 3);
                      v315 = 2 * v314;
                      if (!((2 * v314) >> 61))
                      {
                        v301 = operator new(16 * v314);
                        v300 = (unint64_t)&v301[v315];
                        *(_QWORD *)&v673 = v301;
                        *((_QWORD *)&v673 + 1) = v301;
                        v674 = v300;
                        v302 = (unsigned int *)v662[0];
                        v639 = (unsigned int *)v662[1];
                        if (v662[0] != v662[1])
                          goto LABEL_496;
LABEL_468:
                        v303 = (char *)v301;
                        goto LABEL_555;
                      }
LABEL_1006:
                      sub_20E867F44();
                    }
                  }
                }
              }
              else
              {
                v259 = 0;
                v258 = 0;
                v638 = (unsigned int *)*((_QWORD *)&v664 + 1);
                v260 = (unsigned int *)v664;
                if ((_QWORD)v664 != *((_QWORD *)&v664 + 1))
                  goto LABEL_408;
              }
              v673 = 0uLL;
              v674 = 0;
              v299 = *((_QWORD *)v4 + 8) - *((_QWORD *)v4 + 7);
              if (v299)
                goto LABEL_494;
LABEL_467:
              v300 = 0;
              v301 = 0;
              v302 = (unsigned int *)v662[0];
              v639 = (unsigned int *)v662[1];
              if (v662[0] == v662[1])
                goto LABEL_468;
LABEL_496:
              v303 = (char *)v301;
              while (2)
              {
                v316 = (_QWORD *)(*((_QWORD *)v4 + 7) + 24 * *v302);
                if ((unint64_t)v301 < v300)
                {
                  *v301 = *v316;
                  v317 = v301 + 1;
                  if ((unint64_t)(v301 + 1) < v300)
                    goto LABEL_497;
                  goto LABEL_518;
                }
                v318 = ((char *)v301 - v303) >> 3;
                v319 = v318 + 1;
                if ((unint64_t)(v318 + 1) >> 61)
                {
                  v674 = v300;
                  *((_QWORD *)&v673 + 1) = v301;
LABEL_1005:
                  *(_QWORD *)&v673 = v303;
                  goto LABEL_1006;
                }
                if ((uint64_t)(v300 - (_QWORD)v303) >> 2 > v319)
                  v319 = (uint64_t)(v300 - (_QWORD)v303) >> 2;
                if (v300 - (unint64_t)v303 >= 0x7FFFFFFFFFFFFFF8)
                  v320 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v320 = v319;
                if (v320)
                {
                  if (v320 >> 61)
                    goto LABEL_1011;
                  v321 = *((_QWORD *)v4 + 7) + 24 * *v302;
                  v322 = operator new(8 * v320);
                  v316 = (_QWORD *)v321;
                  v323 = &v322[8 * v318];
                  *v323 = *v316;
                  v317 = v323 + 1;
                  v324 = (char *)v301 - v303;
                  if (v301 == (_QWORD *)v303)
                  {
LABEL_515:
                    v300 = (unint64_t)&v322[8 * v320];
                    if (v303)
                    {
                      v328 = v316;
                      operator delete(v303);
                      v316 = v328;
                    }
                    v303 = (char *)v323;
                    if ((unint64_t)v317 < v300)
                    {
LABEL_497:
                      *v317 = v316[1];
                      v301 = v317 + 1;
                      v4 = a2;
                      if (++v302 == v639)
                        goto LABEL_554;
                      continue;
                    }
LABEL_518:
                    v329 = ((char *)v317 - v303) >> 3;
                    v330 = v329 + 1;
                    if ((unint64_t)(v329 + 1) >> 61)
                    {
                      v674 = v300;
                      *((_QWORD *)&v673 + 1) = v317;
                      goto LABEL_1005;
                    }
                    if ((uint64_t)(v300 - (_QWORD)v303) >> 2 > v330)
                      v330 = (uint64_t)(v300 - (_QWORD)v303) >> 2;
                    if (v300 - (unint64_t)v303 >= 0x7FFFFFFFFFFFFFF8)
                      v331 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v331 = v330;
                    if (v331)
                    {
                      if (v331 >> 61)
                      {
                        v301 = v317;
LABEL_1011:
                        v674 = v300;
                        *((_QWORD *)&v673 + 1) = v301;
                        *(_QWORD *)&v673 = v303;
                        sub_20E877A38();
                      }
                      v332 = v316;
                      v333 = operator new(8 * v331);
                      v334 = v332;
                      v335 = &v333[8 * v329];
                      *v335 = v334[1];
                      v301 = v335 + 1;
                      v336 = (char *)v317 - v303;
                      if (v317 != (_QWORD *)v303)
                      {
LABEL_527:
                        v337 = v336 - 8;
                        if (v337 < 0x168
                          || (v341 = ((char *)(v317 - 1) - v303) & 0xFFFFFFFFFFFFFFF8,
                              &v333[(char *)v317 - v303 - 8 - v341] > &v333[(char *)v317 - v303 - 8])
                          || (_QWORD *)((char *)v317 - v341 - 8) > v317 - 1
                          || (unint64_t)(v303 - v333) < 0x20)
                        {
                          v338 = (char *)v317;
                          v4 = a2;
                        }
                        else
                        {
                          v342 = (v337 >> 3) + 1;
                          v343 = 8 * (v342 & 0x3FFFFFFFFFFFFFFCLL);
                          v338 = (char *)&v317[v343 / 0xFFFFFFFFFFFFFFF8];
                          v335 = (_QWORD *)((char *)v335 - v343);
                          v344 = &v333[8 * v329 - 16];
                          v345 = (__int128 *)(v317 - 2);
                          v346 = v342 & 0x3FFFFFFFFFFFFFFCLL;
                          do
                          {
                            v347 = *v345;
                            *(v344 - 1) = *(v345 - 1);
                            *v344 = v347;
                            v344 -= 2;
                            v345 -= 2;
                            v346 -= 4;
                          }
                          while (v346);
                          v4 = a2;
                          if (v342 == (v342 & 0x3FFFFFFFFFFFFFFCLL))
                          {
LABEL_530:
                            v300 = (unint64_t)&v333[8 * v331];
                            if (v303)
                              goto LABEL_531;
                            goto LABEL_532;
                          }
                        }
                        do
                        {
                          v339 = *((_QWORD *)v338 - 1);
                          v338 -= 8;
                          *--v335 = v339;
                        }
                        while (v338 != v303);
                        goto LABEL_530;
                      }
                    }
                    else
                    {
                      v333 = 0;
                      v335 = (_QWORD *)(8 * v329);
                      *(_QWORD *)(8 * v329) = v316[1];
                      v301 = (_QWORD *)(8 * v329 + 8);
                      v336 = (char *)v317 - v303;
                      if (v317 != (_QWORD *)v303)
                        goto LABEL_527;
                    }
                    v4 = a2;
                    v300 = (unint64_t)&v333[8 * v331];
                    if (v303)
LABEL_531:
                      operator delete(v303);
LABEL_532:
                    v303 = (char *)v335;
                    if (++v302 == v639)
                    {
LABEL_554:
                      v674 = v300;
                      *((_QWORD *)&v673 + 1) = v301;
                      *(_QWORD *)&v673 = v303;
LABEL_555:
                      v667 = (void *)0x3F689374BC6A7EFALL;
                      v669 = 200;
                      v670 = 0x3F747AE147AE147BLL;
                      v671 = xmmword_210315A80;
                      v672 = xmmword_210315A90;
                      v668 = v616;
                      v198 = v647;
                      if (*((_QWORD *)&v664 + 1) - (_QWORD)v664 >= 0x18uLL)
                      {
                        if (sub_20EB7C38C((uint64_t)&v667, (uint64_t)object, (uint64_t)v654, (uint64_t *)&v675, (double *)&v673))
                        {
                          v354 = sub_20EB7C150((uint64_t)&v659, (uint64_t)v654, &v675, &v673, 0.005);
                          v303 = (char *)v673;
                          if (!(_QWORD)v673)
                            goto LABEL_558;
                        }
                        else
                        {
                          v354 = 0;
                          v303 = (char *)v673;
                          if (!(_QWORD)v673)
                            goto LABEL_558;
                        }
LABEL_557:
                        *((_QWORD *)&v673 + 1) = v303;
                        operator delete(v303);
                        goto LABEL_558;
                      }
                      v354 = 0;
                      if (v303)
                        goto LABEL_557;
LABEL_558:
                      if ((_QWORD)v675)
                      {
                        *((_QWORD *)&v675 + 1) = v675;
                        operator delete((void *)v675);
                      }
                      if (v632)
                        v355 = v635;
                      else
                        v355 = 15;
                      v356 = *(_QWORD *)(v647 + 24);
                      if (v354 < v355)
                      {
                        if (*(_BYTE *)(v356 + 184))
                        {
                          v357 = *(_QWORD *)(v356 + 88) - *(_QWORD *)(v356 + 80);
                          if (!v357)
                            goto LABEL_747;
                          if (v357 != *(_QWORD *)(v356 + 168) - *(_QWORD *)(v356 + 160))
                            goto LABEL_747;
                          v358 = (uint64_t)(*(_QWORD *)(v356 + 64) - *(_QWORD *)(v356 + 56)) >> 5;
                          if (v358 != v357 >> 6)
                            goto LABEL_747;
LABEL_746:
                          if (*(_QWORD *)(v356 + 16) > v358)
                            goto LABEL_747;
LABEL_749:
                          v481 = *((_QWORD *)v4 + 3);
                          v640 = v358;
                          if (*(_BYTE *)(v481 + 184))
                          {
                            v482 = *(_QWORD *)(v481 + 88) - *(_QWORD *)(v481 + 80);
                            if (!v482)
                              goto LABEL_767;
                            if (v482 != *(_QWORD *)(v481 + 168) - *(_QWORD *)(v481 + 160))
                              goto LABEL_767;
                            v483 = (uint64_t)(*(_QWORD *)(v481 + 64) - *(_QWORD *)(v481 + 56)) >> 5;
                            if (v483 != v482 >> 6)
                              goto LABEL_767;
LABEL_766:
                            if (*(_QWORD *)(v481 + 16) > v483)
                              goto LABEL_767;
                            v367 = -1;
                            v633 = v483;
                            v368 = v660;
                            if (v660)
                              goto LABEL_777;
LABEL_606:
                            v3 = 0;
                            v369 = 0;
LABEL_607:
                            v646 = v369;
                            v36 = v367;
                            if (v659)
                              operator delete(v659);
                            LODWORD(v630) = v627;
                            v6 = v640;
LABEL_610:
                            if (v662[0])
                            {
                              v662[1] = v662[0];
                              operator delete(v662[0]);
                            }
                            v370 = a3;
                            v194 = a1;
                            if ((_QWORD)v664)
                            {
                              *((_QWORD *)&v664 + 1) = v664;
                              operator delete((void *)v664);
                            }
                            if (v36 == -1)
                              goto LABEL_736;
                            v372 = a3[1];
                            v371 = (unint64_t)a3[2];
                            v628 = (void *)v36;
                            if ((unint64_t)v372 >= v371)
                            {
                              v384 = *a3;
                              v385 = 0x14C1BACF914C1BADLL * (v372 - *a3);
                              v386 = v385 + 1;
                              if ((unint64_t)(v385 + 1) > 0xDD67C8A60DD67CLL)
                                sub_20E867F44();
                              v387 = 0x14C1BACF914C1BADLL * ((uint64_t)(v371 - (_QWORD)v384) >> 3);
                              if (2 * v387 > v386)
                                v386 = 2 * v387;
                              v388 = v387 >= 0x6EB3E45306EB3ELL ? 0xDD67C8A60DD67CLL : v386;
                              object[4] = v619;
                              v641 = v6;
                              if (v388)
                              {
                                if (v388 > 0xDD67C8A60DD67CLL)
                                  sub_20E877A38();
                                v389 = (char *)operator new(296 * v388);
                              }
                              else
                              {
                                v389 = 0;
                              }
                              v624 = v385;
                              v390 = (uint64_t *)&v389[296 * v385];
                              object[0] = v389;
                              object[1] = v390;
                              object[2] = v390;
                              __srca = &v389[296 * v388];
                              object[3] = __srca;
                              *v390 = v36;
                              v390[1] = v641;
                              v390[2] = v633;
                              v390[3] = 0;
                              v390[4] = 0;
                              v391 = (char **)(v390 + 4);
                              v390[5] = 0;
                              v392 = (int64_t)v646 - v3;
                              if (v646 != (float *)v3)
                              {
                                if (0xAAAAAAAAAAAAAAABLL * (v392 >> 3) > 0xAAAAAAAAAAAAAAALL)
                                  sub_20E867F44();
                                v393 = (char *)operator new((size_t)v646 - v3);
                                v390[3] = (uint64_t)v393;
                                *v391 = v393;
                                v394 = &v393[8 * (v392 >> 3)];
                                v390[5] = (uint64_t)v394;
                                memcpy(v393, (const void *)v3, v392);
                                *v391 = v394;
                                v36 = (uint64_t)v628;
                              }
                              v395 = &v389[296 * v624];
                              *((_DWORD *)v395 + 12) = (_DWORD)v630;
                              v395 += 48;
                              v396 = *(_OWORD *)&__p[26];
                              *(_OWORD *)(v395 + 196) = *(_OWORD *)&__p[24];
                              *(_OWORD *)(v395 + 212) = v396;
                              *(_OWORD *)(v395 + 228) = *(_OWORD *)&__p[28];
                              v397 = *(_OWORD *)&__p[18];
                              *(_OWORD *)(v395 + 132) = *(_OWORD *)&__p[16];
                              *(_OWORD *)(v395 + 148) = v397;
                              v398 = *(_OWORD *)&__p[22];
                              *(_OWORD *)(v395 + 164) = *(_OWORD *)&__p[20];
                              *(_OWORD *)(v395 + 180) = v398;
                              v399 = *(_OWORD *)&__p[10];
                              *(_OWORD *)(v395 + 68) = *(_OWORD *)&__p[8];
                              *(_OWORD *)(v395 + 84) = v399;
                              v400 = *(_OWORD *)&__p[14];
                              *(_OWORD *)(v395 + 100) = *(_OWORD *)&__p[12];
                              *(_OWORD *)(v395 + 116) = v400;
                              v401 = *(_OWORD *)&__p[2];
                              *(_OWORD *)(v395 + 4) = *(_OWORD *)__p;
                              *(_OWORD *)(v395 + 20) = v401;
                              v402 = *(_OWORD *)&__p[6];
                              *(_OWORD *)(v395 + 36) = *(_OWORD *)&__p[4];
                              *((_DWORD *)v395 + 61) = __p[30];
                              *(_OWORD *)(v395 + 52) = v402;
                              v383 = v390 + 37;
                              object[2] = v390 + 37;
                              if (v372 == v384)
                              {
                                v370 = a3;
                                v6 = v641;
                                *a3 = v390;
                                a3[1] = v383;
                                a3[2] = (uint64_t *)__srca;
                                v194 = a1;
                                v4 = a2;
                              }
                              else
                              {
                                v403 = v372 - 37;
                                v404 = (uint64_t)&v389[296 * v624 - 296];
                                v370 = a3;
                                do
                                {
                                  v405 = *(_OWORD *)v403;
                                  *(_QWORD *)(v404 + 16) = v403[2];
                                  *(_OWORD *)v404 = v405;
                                  *(_QWORD *)(v404 + 32) = 0;
                                  *(_QWORD *)(v404 + 40) = 0;
                                  *(_OWORD *)(v404 + 24) = *(_OWORD *)(v403 + 3);
                                  *(_QWORD *)(v404 + 40) = v403[5];
                                  v403[4] = 0;
                                  v403[5] = 0;
                                  v403[3] = 0;
                                  v406 = *((_OWORD *)v403 + 10);
                                  v408 = *((_OWORD *)v403 + 7);
                                  v407 = *((_OWORD *)v403 + 8);
                                  *(_OWORD *)(v404 + 144) = *((_OWORD *)v403 + 9);
                                  *(_OWORD *)(v404 + 160) = v406;
                                  *(_OWORD *)(v404 + 112) = v408;
                                  *(_OWORD *)(v404 + 128) = v407;
                                  v409 = *((_OWORD *)v403 + 14);
                                  v411 = *((_OWORD *)v403 + 11);
                                  v410 = *((_OWORD *)v403 + 12);
                                  *(_OWORD *)(v404 + 208) = *((_OWORD *)v403 + 13);
                                  *(_OWORD *)(v404 + 224) = v409;
                                  *(_OWORD *)(v404 + 176) = v411;
                                  *(_OWORD *)(v404 + 192) = v410;
                                  v413 = *((_OWORD *)v403 + 16);
                                  v412 = *((_OWORD *)v403 + 17);
                                  v414 = *((_OWORD *)v403 + 15);
                                  *(_QWORD *)(v404 + 288) = v403[36];
                                  *(_OWORD *)(v404 + 256) = v413;
                                  *(_OWORD *)(v404 + 272) = v412;
                                  *(_OWORD *)(v404 + 240) = v414;
                                  v415 = *((_OWORD *)v403 + 3);
                                  v416 = *((_OWORD *)v403 + 4);
                                  v417 = *((_OWORD *)v403 + 6);
                                  *(_OWORD *)(v404 + 80) = *((_OWORD *)v403 + 5);
                                  *(_OWORD *)(v404 + 96) = v417;
                                  *(_OWORD *)(v404 + 48) = v415;
                                  *(_OWORD *)(v404 + 64) = v416;
                                  v404 -= 296;
                                  v88 = v403 == v384;
                                  v403 -= 37;
                                }
                                while (!v88);
                                v372 = *a3;
                                v418 = a3[1];
                                *a3 = (uint64_t *)(v404 + 296);
                                v419 = (uint64_t *)object[2];
                                *(_OWORD *)(a3 + 1) = *(_OWORD *)&object[2];
                                v383 = v419;
                                v194 = a1;
                                v4 = a2;
                                v6 = v641;
                                if (v418 != v372)
                                {
                                  v420 = (void **)(v418 - 34);
                                  do
                                  {
                                    v422 = *v420;
                                    if (*v420)
                                    {
                                      v420[1] = v422;
                                      operator delete(v422);
                                    }
                                    v421 = (uint64_t *)(v420 - 3);
                                    v420 -= 37;
                                  }
                                  while (v421 != v372);
                                }
                              }
                              if (v372)
                                operator delete(v372);
                            }
                            else
                            {
                              *v372 = v36;
                              v372[1] = v6;
                              v372[2] = v633;
                              v372[3] = 0;
                              v372[4] = 0;
                              v372[5] = 0;
                              v373 = (int64_t)v646 - v3;
                              if (v646 != (float *)v3)
                              {
                                if (0xAAAAAAAAAAAAAAABLL * (v373 >> 3) > 0xAAAAAAAAAAAAAAALL)
                                  sub_20E867F44();
                                v374 = (char *)operator new((size_t)v646 - v3);
                                v372[3] = (uint64_t)v374;
                                v372[4] = (uint64_t)v374;
                                v375 = &v374[8 * (v373 >> 3)];
                                v372[5] = (uint64_t)v375;
                                memcpy(v374, (const void *)v3, v373);
                                v372[4] = (uint64_t)v375;
                              }
                              *((_DWORD *)v372 + 12) = (_DWORD)v630;
                              *(_OWORD *)((char *)v372 + 244) = *(_OWORD *)&__p[24];
                              *((_DWORD *)v372 + 73) = __p[30];
                              v376 = *(_OWORD *)&__p[18];
                              *(_OWORD *)((char *)v372 + 180) = *(_OWORD *)&__p[16];
                              *(_OWORD *)((char *)v372 + 196) = v376;
                              v377 = *(_OWORD *)&__p[22];
                              *(_OWORD *)((char *)v372 + 212) = *(_OWORD *)&__p[20];
                              *(_OWORD *)((char *)v372 + 228) = v377;
                              v378 = *(_OWORD *)&__p[10];
                              *(_OWORD *)((char *)v372 + 116) = *(_OWORD *)&__p[8];
                              *(_OWORD *)((char *)v372 + 132) = v378;
                              v379 = *(_OWORD *)&__p[14];
                              *(_OWORD *)((char *)v372 + 148) = *(_OWORD *)&__p[12];
                              *(_OWORD *)((char *)v372 + 164) = v379;
                              v380 = *(_OWORD *)&__p[2];
                              *(_OWORD *)((char *)v372 + 52) = *(_OWORD *)__p;
                              *(_OWORD *)((char *)v372 + 68) = v380;
                              v381 = *(_OWORD *)&__p[6];
                              *(_OWORD *)((char *)v372 + 84) = *(_OWORD *)&__p[4];
                              *(_OWORD *)((char *)v372 + 100) = v381;
                              v382 = *(_OWORD *)&__p[28];
                              *(_OWORD *)((char *)v372 + 260) = *(_OWORD *)&__p[26];
                              *(_OWORD *)((char *)v372 + 276) = v382;
                              v383 = v372 + 37;
                              a3[1] = v372 + 37;
                            }
                            v370[1] = v383;
                            v423 = atomic_load((unsigned __int8 *)&qword_254A68988);
                            if ((v423 & 1) == 0 && __cxa_guard_acquire(&qword_254A68988))
                            {
                              sub_21021D3D8(&v667);
                              sub_20E8610C0(object, "cv3d.vio.place_recognition_unsanitized");
                              sub_20E8C4068((uint64_t **)&v667, (uint64_t)object, &qword_254A68980);
                              if (SHIBYTE(object[2]) < 0)
                                operator delete(object[0]);
                              __cxa_guard_release(&qword_254A68988);
                              v194 = a1;
                              v4 = a2;
                              v36 = (uint64_t)v628;
                            }
                            *(_QWORD *)&v673 = qword_254A68980;
                            if (**(int **)(qword_254A68980 + 56) > 2)
                              goto LABEL_736;
                            v424 = *(unsigned __int8 *)(qword_254A68980 + 72);
                            v425 = sub_20E8C31DC(qword_254A68980, "OSLogSurrogateAppender", 1, 0);
                            v426 = v425;
                            if (!v424 && v425 == 0)
                              goto LABEL_736;
                            v625 = v424;
                            v642 = v6;
                            v667 = &v673;
                            *(std::chrono::steady_clock::time_point *)v668.i8 = std::chrono::steady_clock::now();
                            v668.u64[1] = std::chrono::system_clock::now().__d_.__rep_;
                            LODWORD(v669) = 2;
                            v670 = (uint64_t)"unknown file";
                            LODWORD(v671) = 382;
                            *((_QWORD *)&v671 + 1) = "unknown function";
                            v672 = 0uLL;
                            v428 = *(_QWORD *)v667;
                            v429 = *(_QWORD *)v667 + 16;
                            if (*(char *)(*(_QWORD *)v667 + 39) < 0)
                            {
                              v431 = *(const char **)(v428 + 16);
                              v430 = *(_QWORD *)(v428 + 24);
                              v433 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                              if ((v433 & 1) == 0)
                              {
LABEL_844:
                                if (__cxa_guard_acquire(&qword_254A4A510))
                                {
                                  sub_20E9E46F8((uint64_t)v654);
                                  sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v654);
                                  if (BYTE8(v655) && SBYTE7(v655) < 0)
                                    operator delete(v654[0]);
                                  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                                  __cxa_guard_release(&qword_254A4A510);
                                  v4 = a2;
                                }
                              }
                            }
                            else
                            {
                              v430 = *(unsigned __int8 *)(*(_QWORD *)v667 + 39);
                              v431 = (const char *)(*(_QWORD *)v667 + 16);
                              v432 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                              if ((v432 & 1) == 0)
                                goto LABEL_844;
                            }
                            if (byte_254A4A4F8[23] >= 0)
                              v434 = byte_254A4A4F8;
                            else
                              v434 = *(const char **)byte_254A4A4F8;
                            if (byte_254A4A4F8[23] >= 0)
                              v435 = byte_254A4A4F8[23];
                            else
                              v435 = *(_QWORD *)&byte_254A4A4F8[8];
                            object[0] = os_log_create(v434, v431);
                            if (v435 > 0x7FFFFFFFFFFFFFF7)
                              sub_20E860B7C();
                            __srcb = v431;
                            if (v435 >= 0x17)
                            {
                              v437 = (v435 & 0xFFFFFFFFFFFFFFF8) + 8;
                              if ((v435 | 7) != 0x17)
                                v437 = v435 | 7;
                              v438 = v437 + 1;
                              v436 = (void **)operator new(v437 + 1);
                              object[3] = (void *)(v438 | 0x8000000000000000);
                              object[1] = v436;
                              object[2] = (void *)v435;
LABEL_668:
                              memmove(v436, v434, v435);
                              goto LABEL_669;
                            }
                            HIBYTE(object[3]) = v435;
                            v436 = &object[1];
                            if (v435)
                              goto LABEL_668;
LABEL_669:
                            v618 = v429;
                            *((_BYTE *)v436 + v435) = 0;
                            LOBYTE(object[4]) = 1;
                            if (v430 > 0x7FFFFFFFFFFFFFF7)
                              sub_20E860B7C();
                            v194 = a1;
                            if (v430 >= 0x17)
                            {
                              v441 = (v430 & 0xFFFFFFFFFFFFFFF8) + 8;
                              if ((v430 | 7) != 0x17)
                                v441 = v430 | 7;
                              v442 = v441 + 1;
                              v439 = (void **)operator new(v441 + 1);
                              *((_QWORD *)&v679 + 1) = v442 | 0x8000000000000000;
                              object[5] = v439;
                              *(_QWORD *)&v679 = v430;
                            }
                            else
                            {
                              HIBYTE(v679) = v430;
                              v439 = &object[5];
                              if (!v430)
                              {
                                LOBYTE(object[5]) = 0;
                                LOBYTE(v680) = 1;
                                v440 = object[0];
                                if ((SHIBYTE(v679) & 0x80000000) == 0)
                                  goto LABEL_673;
LABEL_679:
                                operator delete(object[5]);
                                if (LOBYTE(object[4]))
                                  goto LABEL_680;
                                goto LABEL_682;
                              }
                            }
                            memmove(v439, __srcb, v430);
                            *((_BYTE *)v439 + v430) = 0;
                            LOBYTE(v680) = 1;
                            v440 = object[0];
                            if (SHIBYTE(v679) < 0)
                              goto LABEL_679;
LABEL_673:
                            if (LOBYTE(object[4]))
                            {
LABEL_680:
                              if (SHIBYTE(object[3]) < 0)
                                operator delete(object[1]);
                            }
LABEL_682:
                            if (object[0])
                              os_release(object[0]);
                            v443 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v646 - v3) >> 3);
                            if (v426 && *(_QWORD *)(v426 + 24))
                            {
                              v444 = _os_log_pack_size();
                              v36 = (uint64_t)v628;
                              v445 = (std::__shared_weak_count_vtbl *)operator new(v444, (std::align_val_t)8uLL);
                              v446 = (std::__shared_weak_count *)operator new();
                              v447 = v446;
                              v446->__shared_owners_ = 0;
                              p_shared_owners = (unint64_t *)&v446->__shared_owners_;
                              v446->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                              v446->__shared_weak_owners_ = 0;
                              v446[1].__vftable = v445;
                              object[0] = v445;
                              object[1] = v445;
                              object[2] = v446;
                              do
                                v449 = __ldxr(p_shared_owners);
                              while (__stxr(v449 + 1, p_shared_owners));
                              memset(&object[3], 0, 24);
                              v194 = a1;
                              do
                                v450 = __ldaxr(p_shared_owners);
                              while (__stlxr(v450 - 1, p_shared_owners));
                              if (!v450)
                              {
                                ((void (*)(std::__shared_weak_count *))v446->__on_zero_shared)(v446);
                                std::__shared_weak_count::__release_weak(v447);
                              }
                              v451 = object[0];
                              v452 = _os_log_pack_fill();
                              *(_DWORD *)v452 = 134218240;
                              *(_QWORD *)(v452 + 4) = v628;
                              *(_WORD *)(v452 + 12) = 2048;
                              *(_QWORD *)(v452 + 14) = v443;
                              v453 = (char *)operator new();
                              v454 = *(unsigned __int8 *)(v428 + 39);
                              v455 = v618;
                              if ((v454 & 0x80u) != 0)
                              {
                                v455 = *(_QWORD *)(v428 + 16);
                                v454 = *(_QWORD *)(v428 + 24);
                              }
                              *(_QWORD *)v453 = v451;
                              *(_OWORD *)(v453 + 8) = *(_OWORD *)&object[1];
                              object[1] = 0;
                              object[2] = 0;
                              *(_OWORD *)(v453 + 24) = *(_OWORD *)&object[3];
                              object[3] = 0;
                              object[4] = 0;
                              *((_QWORD *)v453 + 5) = v455;
                              *((_QWORD *)v453 + 6) = v454;
                              v453[56] = 2;
                              *(_QWORD *)&v675 = 0;
                              v654[0] = v453;
                              (*(void (**)(_QWORD, void **))(**(_QWORD **)(v426 + 24) + 40))(*(_QWORD *)(v426 + 24), v654);
                              v6 = v642;
                              v456 = v654[0];
                              v654[0] = 0;
                              v457 = v625;
                              if (v456)
                              {
                                v458 = (std::__shared_weak_count *)*((_QWORD *)v456 + 4);
                                if (v458)
                                {
                                  v459 = (unint64_t *)&v458->__shared_owners_;
                                  do
                                    v460 = __ldaxr(v459);
                                  while (__stlxr(v460 - 1, v459));
                                  if (!v460)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v458->__on_zero_shared)(v458);
                                    std::__shared_weak_count::__release_weak(v458);
                                  }
                                }
                                v461 = (std::__shared_weak_count *)*((_QWORD *)v456 + 2);
                                if (v461)
                                {
                                  v462 = (unint64_t *)&v461->__shared_owners_;
                                  do
                                    v463 = __ldaxr(v462);
                                  while (__stlxr(v463 - 1, v462));
                                  if (!v463)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v461->__on_zero_shared)(v461);
                                    std::__shared_weak_count::__release_weak(v461);
                                  }
                                }
                                MEMORY[0x212BC6398](v456, 0x10F0C40B62ED6C6);
                                v464 = v675;
                                *(_QWORD *)&v675 = 0;
                                if (v464)
                                {
                                  v465 = *(std::__shared_weak_count **)(v464 + 32);
                                  if (v465)
                                  {
                                    v466 = (unint64_t *)&v465->__shared_owners_;
                                    do
                                      v467 = __ldaxr(v466);
                                    while (__stlxr(v467 - 1, v466));
                                    if (!v467)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v465->__on_zero_shared)(v465);
                                      std::__shared_weak_count::__release_weak(v465);
                                    }
                                  }
                                  v468 = *(std::__shared_weak_count **)(v464 + 16);
                                  if (v468)
                                  {
                                    v469 = (unint64_t *)&v468->__shared_owners_;
                                    do
                                      v470 = __ldaxr(v469);
                                    while (__stlxr(v470 - 1, v469));
                                    if (!v470)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v468->__on_zero_shared)(v468);
                                      std::__shared_weak_count::__release_weak(v468);
                                    }
                                  }
                                  MEMORY[0x212BC6398](v464, 0x10F0C40B62ED6C6);
                                }
                              }
                              v471 = (std::__shared_weak_count *)object[4];
                              if (object[4])
                              {
                                v472 = (unint64_t *)((char *)object[4] + 8);
                                do
                                  v473 = __ldaxr(v472);
                                while (__stlxr(v473 - 1, v472));
                                if (!v473)
                                {
                                  ((void (*)(std::__shared_weak_count *))v471->__on_zero_shared)(v471);
                                  std::__shared_weak_count::__release_weak(v471);
                                }
                              }
                              v474 = (std::__shared_weak_count *)object[2];
                              if (object[2])
                              {
                                v475 = (unint64_t *)((char *)object[2] + 8);
                                do
                                  v476 = __ldaxr(v475);
                                while (__stlxr(v476 - 1, v475));
                                if (!v476)
                                {
                                  ((void (*)(std::__shared_weak_count *))v474->__on_zero_shared)(v474);
                                  std::__shared_weak_count::__release_weak(v474);
                                }
                              }
                            }
                            else
                            {
                              os_log_type_enabled(v440, OS_LOG_TYPE_DEBUG);
                              LODWORD(object[0]) = 134218240;
                              v36 = (uint64_t)v628;
                              *(void **)((char *)object + 4) = v628;
                              WORD2(object[1]) = 2048;
                              *(void **)((char *)&object[1] + 6) = (void *)(0xAAAAAAAAAAAAAAABLL
                                                                          * ((uint64_t)((uint64_t)v646 - v3) >> 3));
                              v477 = (void *)_os_log_send_and_compose_impl();
                              v6 = v642;
                              v457 = v625;
                              if (v477)
                                free(v477);
                            }
                            if (v457)
                            {
                              sub_20E8C003C((uint64_t)&v667, "Add match with:%llu inliers: %zu", v36, v443);
                              sub_20E863570((uint64_t)&v667);
                            }
                            sub_20E863570((uint64_t)&v667);
                            v478 = (std::__shared_weak_count *)*((_QWORD *)&v672 + 1);
                            if (*((_QWORD *)&v672 + 1))
                            {
                              v479 = (unint64_t *)(*((_QWORD *)&v672 + 1) + 8);
                              do
                                v480 = __ldaxr(v479);
                              while (__stlxr(v480 - 1, v479));
                              if (!v480)
                              {
                                ((void (*)(std::__shared_weak_count *))v478->__on_zero_shared)(v478);
                                std::__shared_weak_count::__release_weak(v478);
                              }
                            }
LABEL_736:
                            if (v3)
                            {
                              operator delete((void *)v3);
                              v646 = (float *)v3;
                            }
                            v33 = v626;
LABEL_287:
                            if (++v651 == v33)
                            {
                              v33 = (unint64_t *)v652;
                              goto LABEL_850;
                            }
                            goto LABEL_288;
                          }
                          if (*(_QWORD *)(v481 + 160) == *(_QWORD *)(v481 + 168))
                          {
                            v483 = (uint64_t)(*(_QWORD *)(v481 + 64) - *(_QWORD *)(v481 + 56)) >> 5;
                            if (v483 == (uint64_t)(*(_QWORD *)(v481 + 88) - *(_QWORD *)(v481 + 80)) >> 6)
                              goto LABEL_766;
                          }
LABEL_767:
                          if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/PointDescriptorStore.h", 184, (uint64_t)"HasValidSize()", 14, (uint64_t)"Descriptor size mis-match", 25, (void (*)(void **))sub_21023DDB0))
                          {
                            v367 = -1;
                            v633 = (uint64_t)(*(_QWORD *)(v481 + 64) - *(_QWORD *)(v481 + 56)) >> 5;
                            v368 = v660;
                            if (!v660)
                              goto LABEL_606;
                            goto LABEL_777;
                          }
                        }
                        else
                        {
                          if (*(_QWORD *)(v356 + 160) == *(_QWORD *)(v356 + 168))
                          {
                            v358 = (uint64_t)(*(_QWORD *)(v356 + 64) - *(_QWORD *)(v356 + 56)) >> 5;
                            if (v358 == (uint64_t)(*(_QWORD *)(v356 + 88) - *(_QWORD *)(v356 + 80)) >> 6)
                              goto LABEL_746;
                          }
LABEL_747:
                          if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/PointDescriptorStore.h", 184, (uint64_t)"HasValidSize()", 14, (uint64_t)"Descriptor size mis-match", 25, (void (*)(void **))sub_21023DDB0))
                          {
                            v358 = (uint64_t)(*(_QWORD *)(v356 + 64) - *(_QWORD *)(v356 + 56)) >> 5;
                            goto LABEL_749;
                          }
                        }
LABEL_1018:
                        abort();
                      }
                      if (*(_BYTE *)(v356 + 184))
                      {
                        v359 = *(_QWORD *)(v356 + 88) - *(_QWORD *)(v356 + 80);
                        if (!v359)
                          goto LABEL_757;
                        if (v359 != *(_QWORD *)(v356 + 168) - *(_QWORD *)(v356 + 160))
                          goto LABEL_757;
                        v360 = (uint64_t)(*(_QWORD *)(v356 + 64) - *(_QWORD *)(v356 + 56)) >> 5;
                        if (v360 != v359 >> 6)
                          goto LABEL_757;
LABEL_756:
                        if (*(_QWORD *)(v356 + 16) > v360)
                          goto LABEL_757;
                      }
                      else
                      {
                        if (*(_QWORD *)(v356 + 160) == *(_QWORD *)(v356 + 168))
                        {
                          v360 = (uint64_t)(*(_QWORD *)(v356 + 64) - *(_QWORD *)(v356 + 56)) >> 5;
                          if (v360 == (uint64_t)(*(_QWORD *)(v356 + 88) - *(_QWORD *)(v356 + 80)) >> 6)
                            goto LABEL_756;
                        }
LABEL_757:
                        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/PointDescriptorStore.h", 184, (uint64_t)"HasValidSize()", 14, (uint64_t)"Descriptor size mis-match", 25, (void (*)(void **))sub_21023DDB0))
                        {
                          goto LABEL_1018;
                        }
                        v360 = (uint64_t)(*(_QWORD *)(v356 + 64) - *(_QWORD *)(v356 + 56)) >> 5;
                      }
                      v484 = *((_QWORD *)v4 + 3);
                      if (*(_BYTE *)(v484 + 184))
                      {
                        v485 = *(_QWORD *)(v484 + 88) - *(_QWORD *)(v484 + 80);
                        if (!v485)
                          goto LABEL_773;
                        if (v485 != *(_QWORD *)(v484 + 168) - *(_QWORD *)(v484 + 160))
                          goto LABEL_773;
                        v366 = (uint64_t)(*(_QWORD *)(v484 + 64) - *(_QWORD *)(v484 + 56)) >> 5;
                        if (v366 != v485 >> 6)
                          goto LABEL_773;
LABEL_772:
                        if (*(_QWORD *)(v484 + 16) > v366)
                          goto LABEL_773;
                      }
                      else
                      {
                        if (*(_QWORD *)(v484 + 160) == *(_QWORD *)(v484 + 168))
                        {
                          v366 = (uint64_t)(*(_QWORD *)(v484 + 64) - *(_QWORD *)(v484 + 56)) >> 5;
                          if (v366 == (uint64_t)(*(_QWORD *)(v484 + 88) - *(_QWORD *)(v484 + 80)) >> 6)
                            goto LABEL_772;
                        }
LABEL_773:
                        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/PointDescriptorStore.h", 184, (uint64_t)"HasValidSize()", 14, (uint64_t)"Descriptor size mis-match", 25, (void (*)(void **))sub_21023DDB0))
                        {
                          goto LABEL_1018;
                        }
                        v366 = (uint64_t)(*(_QWORD *)(v484 + 64) - *(_QWORD *)(v484 + 56)) >> 5;
                      }
                      v640 = v360;
                      *(_OWORD *)((char *)&__p[13] + 4) = v656;
                      *(_OWORD *)((char *)&__p[15] + 4) = v657;
                      *(void **)((char *)&__p[17] + 4) = v658;
                      *(_OWORD *)((char *)&__p[9] + 4) = *(_OWORD *)v654;
                      *(_OWORD *)((char *)&__p[11] + 4) = v655;
                      *(_OWORD *)((char *)&__p[22] + 4) = *(_OWORD *)&object[4];
                      *(_OWORD *)((char *)&__p[24] + 4) = v679;
                      *(_OWORD *)((char *)&__p[26] + 4) = v680;
                      *(_OWORD *)((char *)&__p[28] + 4) = v681;
                      *(_OWORD *)((char *)&__p[18] + 4) = *(_OWORD *)object;
                      *(_OWORD *)((char *)&__p[20] + 4) = *(_OWORD *)&object[2];
LABEL_776:
                      v367 = v196;
                      v633 = v366;
                      v368 = v660;
                      if (!v660)
                        goto LABEL_606;
LABEL_777:
                      v3 = 0;
                      v369 = 0;
                      v486 = 0;
                      v487 = 0;
                      v488 = 0;
                      while (2)
                      {
                        if (((*(_QWORD *)((char *)v659 + ((v488 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v488) & 1) == 0)
                          goto LABEL_780;
                        v489 = *((unsigned int *)v662[0] + v488);
                        v490 = *(unsigned int *)(v664 + 4 * v488);
                        v491 = *(_DWORD *)(*(_QWORD *)(v198 + 32) + 4 * v490);
                        if (v487 < v486)
                        {
                          *(_QWORD *)v487 = v489;
                          *((_QWORD *)v487 + 1) = v490;
                          v369 = (float *)(v487 + 24);
                          *((_DWORD *)v487 + 4) = v491;
                          goto LABEL_779;
                        }
                        v492 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v487[-v3] >> 3) + 1;
                        if (v492 > 0xAAAAAAAAAAAAAAALL)
                          sub_20E867F44();
                        if (0x5555555555555556 * ((uint64_t)&v486[-v3] >> 3) > v492)
                          v492 = 0x5555555555555556 * ((uint64_t)&v486[-v3] >> 3);
                        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v486[-v3] >> 3) >= 0x555555555555555)
                          v493 = 0xAAAAAAAAAAAAAAALL;
                        else
                          v493 = v492;
                        if (v493)
                        {
                          if (v493 > 0xAAAAAAAAAAAAAAALL)
                            sub_20E877A38();
                          v494 = (char *)operator new(24 * v493);
                          v495 = (uint64_t)&v494[8 * ((uint64_t)&v487[-v3] >> 3)];
                          *(_QWORD *)v495 = v489;
                          *(_QWORD *)(v495 + 8) = v490;
                          *(_DWORD *)(v495 + 16) = v491;
                          if (v487 != (char *)v3)
                          {
LABEL_792:
                            v496 = v495;
                            v198 = v647;
                            do
                            {
                              v497 = *(_OWORD *)(v487 - 24);
                              v498 = v496 - 24;
                              *(_QWORD *)(v496 - 8) = *((_QWORD *)v487 - 1);
                              *(_OWORD *)(v496 - 24) = v497;
                              v487 -= 24;
                              v496 -= 24;
                            }
                            while (v487 != (char *)v3);
                            v486 = &v494[24 * v493];
                            v369 = (float *)(v495 + 24);
                            if (v3)
LABEL_795:
                              operator delete((void *)v3);
LABEL_796:
                            v3 = v498;
LABEL_779:
                            v368 = v660;
                            v487 = (char *)v369;
LABEL_780:
                            if (++v488 >= v368)
                              goto LABEL_607;
                            continue;
                          }
                        }
                        else
                        {
                          v494 = 0;
                          v495 = 8 * ((uint64_t)&v487[-v3] >> 3);
                          *(_QWORD *)v495 = v489;
                          *(_QWORD *)(v495 + 8) = v490;
                          *(_DWORD *)(v495 + 16) = v491;
                          if (v487 != (char *)v3)
                            goto LABEL_792;
                        }
                        break;
                      }
                      v498 = v495;
                      v198 = v647;
                      v486 = &v494[24 * v493];
                      v369 = (float *)(v495 + 24);
                      if (v3)
                        goto LABEL_795;
                      goto LABEL_796;
                    }
                    continue;
                  }
                }
                else
                {
                  v322 = 0;
                  v323 = (_QWORD *)(8 * v318);
                  *(_QWORD *)(8 * v318) = *v316;
                  v317 = (_QWORD *)(8 * v318 + 8);
                  v324 = (char *)v301 - v303;
                  if (v301 == (_QWORD *)v303)
                    goto LABEL_515;
                }
                break;
              }
              v325 = v324 - 8;
              if (v325 >= 0x168)
              {
                v340 = ((char *)(v301 - 1) - v303) & 0xFFFFFFFFFFFFFFF8;
                if (&v322[(char *)v301 - v303 - 8 - v340] > &v322[(char *)v301 - v303 - 8])
                {
                  v326 = (char *)v301;
                }
                else if ((_QWORD *)((char *)v301 - v340 - 8) > v301 - 1)
                {
                  v326 = (char *)v301;
                }
                else if ((unint64_t)(v303 - v322) >= 0x20)
                {
                  v348 = (v325 >> 3) + 1;
                  v349 = 8 * (v348 & 0x3FFFFFFFFFFFFFFCLL);
                  v326 = (char *)&v301[v349 / 0xFFFFFFFFFFFFFFF8];
                  v323 = (_QWORD *)((char *)v323 - v349);
                  v350 = &v322[8 * v318 - 16];
                  v351 = (__int128 *)(v301 - 2);
                  v352 = v348 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v353 = *v351;
                    *(v350 - 1) = *(v351 - 1);
                    *v350 = v353;
                    v350 -= 2;
                    v351 -= 2;
                    v352 -= 4;
                  }
                  while (v352);
                  if (v348 == (v348 & 0x3FFFFFFFFFFFFFFCLL))
                    goto LABEL_515;
                }
                else
                {
                  v326 = (char *)v301;
                }
              }
              else
              {
                v326 = (char *)v301;
              }
              do
              {
                v327 = *((_QWORD *)v326 - 1);
                v326 -= 8;
                *--v323 = v327;
              }
              while (v326 != v303);
              goto LABEL_515;
            }
            v675 = 0uLL;
            v676 = 0;
            v673 = 0uLL;
            v674 = 0;
            if ((int)sub_20FD3D260((uint64_t)object, (int)v666, (uint64_t *)&v664, (uint64_t *)v662, &v675, &v673, 1.0) > 3)
            {
              if ((_QWORD)v664)
              {
                *((_QWORD *)&v664 + 1) = v664;
                operator delete((void *)v664);
              }
              v664 = v675;
              v665 = v676;
              v676 = 0;
              v675 = 0uLL;
              if (v662[0])
              {
                v662[1] = v662[0];
                operator delete(v662[0]);
              }
              v211 = 0;
              *(_OWORD *)v662 = v673;
              v663 = v674;
              v212 = (void *)v675;
              if (!(_QWORD)v675)
                goto LABEL_375;
            }
            else
            {
              v209 = *(_QWORD *)(v198 + 24);
              if (*(_BYTE *)(v209 + 184))
              {
                v210 = *(_QWORD *)(v209 + 88) - *(_QWORD *)(v209 + 80);
                if (!v210)
                  goto LABEL_359;
                if (v210 != *(_QWORD *)(v209 + 168) - *(_QWORD *)(v209 + 160))
                  goto LABEL_359;
                v6 = (uint64_t)(*(_QWORD *)(v209 + 64) - *(_QWORD *)(v209 + 56)) >> 5;
                if (v6 != v210 >> 6)
                  goto LABEL_359;
LABEL_358:
                if (*(_QWORD *)(v209 + 16) > v6)
                  goto LABEL_359;
              }
              else
              {
                if (*(_QWORD *)(v209 + 160) == *(_QWORD *)(v209 + 168))
                {
                  v6 = (uint64_t)(*(_QWORD *)(v209 + 64) - *(_QWORD *)(v209 + 56)) >> 5;
                  if (v6 == (uint64_t)(*(_QWORD *)(v209 + 88) - *(_QWORD *)(v209 + 80)) >> 6)
                    goto LABEL_358;
                }
LABEL_359:
                if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/PointDescriptorStore.h", 184, (uint64_t)"HasValidSize()", 14, (uint64_t)"Descriptor size mis-match", 25, (void (*)(void **))sub_21023DDB0))
                {
                  goto LABEL_1032;
                }
                v6 = (uint64_t)(*(_QWORD *)(v209 + 64) - *(_QWORD *)(v209 + 56)) >> 5;
              }
              v216 = *((_QWORD *)v4 + 3);
              if (*(_BYTE *)(v216 + 184))
              {
                v217 = *(_QWORD *)(v216 + 88) - *(_QWORD *)(v216 + 80);
                if (!v217)
                  goto LABEL_369;
                if (v217 != *(_QWORD *)(v216 + 168) - *(_QWORD *)(v216 + 160))
                  goto LABEL_369;
                v218 = (uint64_t)(*(_QWORD *)(v216 + 64) - *(_QWORD *)(v216 + 56)) >> 5;
                if (v218 != v217 >> 6)
                  goto LABEL_369;
LABEL_368:
                if (*(_QWORD *)(v216 + 16) > v218)
                  goto LABEL_369;
              }
              else
              {
                if (*(_QWORD *)(v216 + 160) == *(_QWORD *)(v216 + 168))
                {
                  v218 = (uint64_t)(*(_QWORD *)(v216 + 64) - *(_QWORD *)(v216 + 56)) >> 5;
                  if (v218 == (uint64_t)(*(_QWORD *)(v216 + 88) - *(_QWORD *)(v216 + 80)) >> 6)
                    goto LABEL_368;
                }
LABEL_369:
                if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/PointDescriptorStore.h", 184, (uint64_t)"HasValidSize()", 14, (uint64_t)"Descriptor size mis-match", 25, (void (*)(void **))sub_21023DDB0))
                {
LABEL_1032:
                  abort();
                }
                v218 = (uint64_t)(*(_QWORD *)(v216 + 64) - *(_QWORD *)(v216 + 56)) >> 5;
              }
              v633 = v218;
              memset((char *)__p + 4, 0, 240);
              if ((_QWORD)v673)
              {
                *((_QWORD *)&v673 + 1) = v673;
                operator delete((void *)v673);
              }
              v3 = 0;
              v646 = 0;
              v211 = 1;
              v36 = -1;
              LODWORD(v630) = v200;
              v212 = (void *)v675;
              if (!(_QWORD)v675)
                goto LABEL_375;
            }
            *((_QWORD *)&v675 + 1) = v212;
            operator delete(v212);
            goto LABEL_375;
          }
        }
      }
    }
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
    goto LABEL_850;
  }
  memset(__p, 0, 24);
  v7 = *((_QWORD *)a2 + 3);
  v9 = *(_BYTE **)(v7 + 80);
  v8 = *(_BYTE **)(v7 + 88);
  if (v9 == v8)
  {
    v59 = 0;
    v60 = *(_BYTE **)(v7 + 80);
    goto LABEL_86;
  }
  v648 = *((_QWORD *)a2 + 3);
  v10 = 0;
  while (2)
  {
    v11 = 0;
    v12 = v9;
    do
    {
      while (v10 < __p[2])
      {
        *v10++ = *v12;
        __p[1] = v10;
        v12 = &v9[++v11];
        if (v11 == 64)
          goto LABEL_5;
      }
      v13 = (unint64_t)__p[0];
      v14 = v10 - (char *)__p[0];
      v15 = v10 - (char *)__p[0] + 1;
      if (v15 < 0)
        sub_20E867F44();
      v16 = (char *)__p[2] - (char *)__p[0];
      if (2 * ((char *)__p[2] - (char *)__p[0]) > (unint64_t)v15)
        v15 = 2 * v16;
      if (v16 >= 0x3FFFFFFFFFFFFFFFLL)
        v3 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v3 = v15;
      if (v3)
      {
        v17 = operator new(v3);
        v18 = (char *)v17 + v14;
        *((_BYTE *)v17 + v14) = *v12;
        v19 = (char *)v17 + v14 + 1;
        if (v10 == (_BYTE *)v13)
          goto LABEL_24;
      }
      else
      {
        v17 = 0;
        v18 = (char *)(v10 - (char *)__p[0]);
        *(_BYTE *)v14 = *v12;
        v19 = (_BYTE *)(v14 + 1);
        if (v10 == (_BYTE *)v13)
        {
LABEL_24:
          __p[0] = v18;
          __p[2] = (char *)v17 + v3;
          if (!v10)
            goto LABEL_26;
LABEL_25:
          operator delete(v10);
          goto LABEL_26;
        }
      }
      if (v14 < 8
        || (char *)v17 + v14 - 1 - &v10[~v13] > (unint64_t)v17 + v14 - 1
        || v13 > (unint64_t)(v10 - 1)
        || v13 - (unint64_t)v17 < 0x20)
      {
        v20 = v10;
        goto LABEL_19;
      }
      if (v14 >= 0x20)
      {
        v23 = v14 & 0xFFFFFFFFFFFFFFE0;
        v24 = (char *)v17 + v14 - 16;
        v25 = (__int128 *)(v10 - 16);
        v26 = v14 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v27 = *v25;
          *(v24 - 1) = *(v25 - 1);
          *v24 = v27;
          v24 -= 2;
          v25 -= 2;
          v26 -= 32;
        }
        while (v26);
        if (v14 == v23)
          goto LABEL_21;
        if ((v14 & 0x18) == 0)
        {
          v18 -= v23;
          v20 = &v10[-v23];
LABEL_19:
          v21 = v18 - 1;
          do
          {
            v22 = *--v20;
            *v21-- = v22;
          }
          while (v20 != (_BYTE *)v13);
          goto LABEL_21;
        }
      }
      else
      {
        v23 = 0;
      }
      v20 = &v10[-(v14 & 0xFFFFFFFFFFFFFFF8)];
      v18 -= v14 & 0xFFFFFFFFFFFFFFF8;
      v28 = &v10[-v23 - v13 - 8 + (_QWORD)v17];
      v29 = (uint64_t *)&v10[-v23 - 8];
      v30 = v23 - (v14 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v31 = *v29--;
        *v28-- = v31;
        v30 += 8;
      }
      while (v30);
      if (v14 != (v14 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_19;
LABEL_21:
      v10 = __p[0];
      __p[0] = v17;
      __p[2] = (char *)v17 + v3;
      if (v10)
        goto LABEL_25;
LABEL_26:
      v10 = v19;
      __p[1] = v19;
      v12 = &v9[++v11];
    }
    while (v11 != 64);
LABEL_5:
    v9 += 64;
    if (v9 != v8)
      continue;
    break;
  }
  v6 = *(_QWORD *)a1;
  v59 = (char *)__p[0];
  v9 = *(_BYTE **)(v648 + 80);
  v60 = *(_BYTE **)(v648 + 88);
LABEL_86:
  v61 = (float *)(v6 + 8);
  sub_20E86872C(v6, *(_QWORD **)(v6 + 8));
  *(_QWORD *)v6 = v6 + 8;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 8) = 0;
  v62 = (_QWORD **)(v6 + 24);
  v63 = (_QWORD *)(v6 + 32);
  sub_20E86872C(v6 + 24, *(_QWORD **)(v6 + 32));
  *(_QWORD *)(v6 + 24) = v6 + 32;
  *(_QWORD *)(v6 + 32) = 0;
  v64 = *(_QWORD *)(v6 + 48);
  *(_QWORD *)(v6 + 40) = 0;
  v630 = (void **)(v6 + 48);
  *(_QWORD *)(v6 + 56) = v64;
  v646 = (float *)(v6 + 8);
  v649 = v6;
  if (v60 != v9 && !*(_BYTE *)(*(_QWORD *)(v6 + 96) + 60))
  {
    v633 = 0;
    v629 = (v60 - v9) >> 6;
    while (1)
    {
      v3 = *(_QWORD *)(v6 + 96);
      if (!*(_BYTE *)(v3 + 60))
        break;
LABEL_854:
      if (++v633 == v629)
        goto LABEL_88;
    }
    v643 = (int8x16_t *)&v59[64 * v633];
    while (1)
    {
      v545 = *(size_t **)(v3 + 32);
      v546 = *(_QWORD *)(v3 + 40) - (_QWORD)v545;
      if ((unint64_t)v546 >= 9)
        break;
      v3 = *v545;
      v555 = *(_QWORD **)(*v545 + 8);
      v556 = *v545 + 16;
      if (v555 != (_QWORD *)v556)
        goto LABEL_869;
LABEL_929:
      v583 = *(unsigned int *)(v3 + 56);
      v61 = v646;
      v584 = *(_QWORD **)v646;
      if (*(_QWORD *)v646)
      {
        v585 = v646;
        v586 = *(_QWORD **)v646;
        do
        {
          v587 = v586[4];
          v588 = v587 >= v583;
          if (v587 >= v583)
            v589 = v586;
          else
            v589 = v586 + 1;
          if (v588)
            v585 = (float *)v586;
          v586 = (_QWORD *)*v589;
        }
        while (*v589);
        if (v585 != v646 && *((_QWORD *)v585 + 4) <= v583)
        {
          v585[10] = *(float *)v3 + v585[10];
          v6 = v649;
          goto LABEL_858;
        }
      }
      v590 = *(float **)v649;
      v591 = *(float *)v3;
      v592 = (float *)operator new(0x30uLL);
      *((_QWORD *)v592 + 4) = v583;
      v592[10] = v591;
      if (v646 == v590 || (v593 = *((_QWORD *)v590 + 4), v593 > v583))
      {
        if (!*(_QWORD *)v590)
        {
          v594 = (float **)v590;
LABEL_951:
          *(_QWORD *)v592 = 0;
          *((_QWORD *)v592 + 1) = 0;
          *((_QWORD *)v592 + 2) = v590;
          *v594 = v592;
          v6 = v649;
          v597 = **(_QWORD **)v649;
          if (v597)
          {
            *(_QWORD *)v649 = v597;
            v592 = *v594;
          }
          v61 = v646;
          v598 = *(_QWORD **)v646;
          v88 = v592 == *(float **)v646;
          *((_BYTE *)v592 + 24) = v88;
          if (!v88)
          {
            do
            {
              v599 = *((_QWORD *)v592 + 2);
              if (*(_BYTE *)(v599 + 24))
                break;
              v600 = *(_BYTE **)(v599 + 16);
              v601 = *(_QWORD *)v600;
              if (*(_QWORD *)v600 == v599)
              {
                v604 = *((_QWORD *)v600 + 1);
                if (!v604 || (v605 = *(unsigned __int8 *)(v604 + 24), v602 = (_BYTE *)(v604 + 24), v605))
                {
                  if (*(float **)v599 == v592)
                  {
                    *(_BYTE *)(v599 + 24) = 1;
                    v600[24] = 0;
                    v608 = *(_QWORD *)(v599 + 8);
                    *(_QWORD *)v600 = v608;
                    if (v608)
                      goto LABEL_968;
                  }
                  else
                  {
                    v606 = *(uint64_t **)(v599 + 8);
                    v607 = *v606;
                    *(_QWORD *)(v599 + 8) = *v606;
                    if (v607)
                    {
                      *(_QWORD *)(v607 + 16) = v599;
                      v600 = *(_BYTE **)(v599 + 16);
                    }
                    v606[2] = (uint64_t)v600;
                    *(_QWORD *)(*(_QWORD *)(v599 + 16) + 8 * (**(_QWORD **)(v599 + 16) != v599)) = v606;
                    *v606 = v599;
                    *(_QWORD *)(v599 + 16) = v606;
                    v600 = (_BYTE *)v606[2];
                    v599 = *(_QWORD *)v600;
                    *((_BYTE *)v606 + 24) = 1;
                    v600[24] = 0;
                    v608 = *(_QWORD *)(v599 + 8);
                    *(_QWORD *)v600 = v608;
                    if (v608)
LABEL_968:
                      *(_QWORD *)(v608 + 16) = v600;
                  }
                  *(_QWORD *)(v599 + 16) = *((_QWORD *)v600 + 2);
                  *(_QWORD *)(*((_QWORD *)v600 + 2) + 8 * (**((_QWORD **)v600 + 2) != (_QWORD)v600)) = v599;
                  *(_QWORD *)(v599 + 8) = v600;
LABEL_975:
                  *((_QWORD *)v600 + 2) = v599;
                  break;
                }
              }
              else if (!v601 || (v603 = *(unsigned __int8 *)(v601 + 24), v602 = (_BYTE *)(v601 + 24), v603))
              {
                if (*(float **)v599 == v592)
                {
                  v613 = *((_QWORD *)v592 + 1);
                  *(_QWORD *)v599 = v613;
                  if (v613)
                  {
                    *(_QWORD *)(v613 + 16) = v599;
                    v600 = *(_BYTE **)(v599 + 16);
                  }
                  *((_QWORD *)v592 + 2) = v600;
                  *(_QWORD *)(*(_QWORD *)(v599 + 16) + 8 * (**(_QWORD **)(v599 + 16) != v599)) = v592;
                  *((_QWORD *)v592 + 1) = v599;
                  *(_QWORD *)(v599 + 16) = v592;
                  v600 = (_BYTE *)*((_QWORD *)v592 + 2);
                  *((_BYTE *)v592 + 24) = 1;
                  v600[24] = 0;
                  v599 = *((_QWORD *)v600 + 1);
                  v609 = *(float **)v599;
                  *((_QWORD *)v600 + 1) = *(_QWORD *)v599;
                  if (v609)
LABEL_973:
                    *((_QWORD *)v609 + 2) = v600;
                }
                else
                {
                  *(_BYTE *)(v599 + 24) = 1;
                  v600[24] = 0;
                  v599 = *((_QWORD *)v600 + 1);
                  v609 = *(float **)v599;
                  *((_QWORD *)v600 + 1) = *(_QWORD *)v599;
                  if (v609)
                    goto LABEL_973;
                }
                *(_QWORD *)(v599 + 16) = *((_QWORD *)v600 + 2);
                *(_QWORD *)(*((_QWORD *)v600 + 2) + 8 * (**((_QWORD **)v600 + 2) != (_QWORD)v600)) = v599;
                *(_QWORD *)v599 = v600;
                goto LABEL_975;
              }
              *(_BYTE *)(v599 + 24) = 1;
              v592 = (float *)v600;
              v600[24] = v600 == (_BYTE *)v598;
              *v602 = 1;
            }
            while (v600 != (_BYTE *)v598);
          }
          ++*(_QWORD *)(v649 + 16);
          goto LABEL_858;
        }
        v594 = (float **)(v590 + 2);
        goto LABEL_944;
      }
      if (v593 < v583)
      {
        v594 = (float **)(v590 + 2);
        v595 = (float *)*((_QWORD *)v590 + 1);
        if (v595)
        {
          do
          {
            v594 = (float **)v595;
            v595 = *(float **)v595;
            v590 = (float *)v594;
            v596 = (float *)v594;
          }
          while (v595);
        }
        else
        {
          v596 = v590;
          do
          {
            v610 = v596;
            v596 = (float *)*((_QWORD *)v596 + 2);
          }
          while (*(float **)v596 != v610);
        }
        if (v596 != v646)
        {
          v611 = *((_QWORD *)v596 + 4);
          if (v611 <= v583)
          {
            v590 = v646;
            v594 = (float **)v646;
          }
          if (v584 && v611 <= v583)
          {
            v594 = (float **)v646;
            while (1)
            {
              while (1)
              {
                v590 = (float *)v584;
                v612 = v584[4];
                if (v612 <= v583)
                  break;
                v584 = (_QWORD *)*v584;
                v594 = (float **)v590;
                if (!*(_QWORD *)v590)
                  goto LABEL_951;
              }
              if (v612 >= v583)
                break;
              v594 = (float **)(v584 + 1);
              v584 = (_QWORD *)v584[1];
              if (!v584)
                goto LABEL_951;
            }
          }
        }
LABEL_944:
        if (!*v594)
          goto LABEL_951;
      }
      operator delete(v592);
      v61 = v646;
      v6 = v649;
LABEL_858:
      if (*(_BYTE *)(v3 + 60))
        goto LABEL_854;
    }
    v547 = 0;
    v548 = v643[1];
    v549 = v643[2];
    v550 = v643[3];
    v551 = vaddlvq_u8((uint8x16_t)vaddq_s8(vaddq_s8(vcntq_s8(veorq_s8(*(int8x16_t *)(*v545 + 61), *v643)), vcntq_s8(veorq_s8(*(int8x16_t *)(*v545 + 77), v548))), vaddq_s8(vcntq_s8(veorq_s8(*(int8x16_t *)(*v545 + 93), v549)), vcntq_s8(veorq_s8(*(int8x16_t *)(*v545 + 109), v550)))));
    v552 = v546 >> 3;
    if (v552 <= 2)
      v552 = 2;
    for (i = 1; i != v552; ++i)
    {
      v554 = vaddlvq_u8((uint8x16_t)vaddq_s8(vaddq_s8(vcntq_s8(veorq_s8(*(int8x16_t *)(v545[i] + 77), v548)), vcntq_s8(veorq_s8(*(int8x16_t *)(v545[i] + 61), *v643))), vaddq_s8(vcntq_s8(veorq_s8(*(int8x16_t *)(v545[i] + 93), v549)), vcntq_s8(veorq_s8(*(int8x16_t *)(v545[i] + 109), v550)))));
      if (v554 < v551)
      {
        v547 = i;
        v551 = v554;
      }
    }
    v3 = v545[v547];
    v555 = *(_QWORD **)(v3 + 8);
    v556 = v3 + 16;
    if (v555 == (_QWORD *)(v3 + 16))
      goto LABEL_929;
LABEL_869:
    v557 = *(_QWORD *)(v649 + 40);
    while (1)
    {
      v558 = (_QWORD *)*v63;
      v559 = v63;
      if (*v62 != v63)
      {
        v560 = (_QWORD *)*v63;
        v561 = v63;
        if (v558)
        {
          do
          {
            v559 = v560;
            v560 = (_QWORD *)v560[1];
          }
          while (v560);
        }
        else
        {
          do
          {
            v559 = (_QWORD *)v561[2];
            v88 = *v559 == (_QWORD)v561;
            v561 = v559;
          }
          while (v88);
        }
        v562 = v555[4];
        if (v559[4] >= v562)
          break;
      }
      if (v558)
        v563 = v559;
      else
        v563 = v63;
      if (v558)
        v564 = v559 + 1;
      else
        v564 = v63;
      if (!*v564)
        goto LABEL_892;
LABEL_917:
      v580 = (_QWORD *)v555[1];
      if (v580)
      {
        do
        {
          v581 = v580;
          v580 = (_QWORD *)*v580;
        }
        while (v580);
      }
      else
      {
        do
        {
          v581 = (_QWORD *)v555[2];
          v88 = *v581 == (_QWORD)v555;
          v555 = v581;
        }
        while (!v88);
      }
      v555 = v581;
      if (v581 == (_QWORD *)v556)
        goto LABEL_929;
    }
    v564 = v63;
    v563 = v63;
    if (v558)
    {
      while (1)
      {
        while (1)
        {
          v563 = v558;
          v565 = v558[4];
          if (v562 >= v565)
            break;
          v558 = (_QWORD *)*v563;
          v564 = v563;
          if (!*v563)
            goto LABEL_892;
        }
        if (v565 >= v562)
          goto LABEL_917;
        v558 = (_QWORD *)v563[1];
        if (!v558)
        {
          v564 = v563 + 1;
          break;
        }
      }
    }
LABEL_892:
    v566 = operator new(0x28uLL);
    v566[4] = v555[4];
    *v566 = 0;
    v566[1] = 0;
    v566[2] = v563;
    *v564 = v566;
    v567 = (_QWORD *)**v62;
    if (v567)
    {
      *v62 = v567;
      v566 = (_QWORD *)*v564;
    }
    v568 = (_BYTE *)*v63;
    v88 = v566 == (_QWORD *)*v63;
    *((_BYTE *)v566 + 24) = v88;
    if (!v88)
    {
      do
      {
        v569 = v566[2];
        if (*(_BYTE *)(v569 + 24))
          break;
        v570 = *(_BYTE **)(v569 + 16);
        v571 = *(_QWORD *)v570;
        if (*(_QWORD *)v570 == v569)
        {
          v574 = *((_QWORD *)v570 + 1);
          if (!v574 || (v575 = *(unsigned __int8 *)(v574 + 24), v572 = (_BYTE *)(v574 + 24), v575))
          {
            if (*(_QWORD **)v569 == v566)
            {
              *(_BYTE *)(v569 + 24) = 1;
              v570[24] = 0;
              v578 = *(_QWORD *)(v569 + 8);
              *(_QWORD *)v570 = v578;
              if (v578)
                goto LABEL_909;
            }
            else
            {
              v576 = *(uint64_t **)(v569 + 8);
              v577 = *v576;
              *(_QWORD *)(v569 + 8) = *v576;
              if (v577)
              {
                *(_QWORD *)(v577 + 16) = v569;
                v570 = *(_BYTE **)(v569 + 16);
              }
              v576[2] = (uint64_t)v570;
              *(_QWORD *)(*(_QWORD *)(v569 + 16) + 8 * (**(_QWORD **)(v569 + 16) != v569)) = v576;
              *v576 = v569;
              *(_QWORD *)(v569 + 16) = v576;
              v570 = (_BYTE *)v576[2];
              v569 = *(_QWORD *)v570;
              *((_BYTE *)v576 + 24) = 1;
              v570[24] = 0;
              v578 = *(_QWORD *)(v569 + 8);
              *(_QWORD *)v570 = v578;
              if (v578)
LABEL_909:
                *(_QWORD *)(v578 + 16) = v570;
            }
            *(_QWORD *)(v569 + 16) = *((_QWORD *)v570 + 2);
            *(_QWORD *)(*((_QWORD *)v570 + 2) + 8 * (**((_QWORD **)v570 + 2) != (_QWORD)v570)) = v569;
            *(_QWORD *)(v569 + 8) = v570;
LABEL_915:
            *((_QWORD *)v570 + 2) = v569;
            break;
          }
        }
        else if (!v571 || (v573 = *(unsigned __int8 *)(v571 + 24), v572 = (_BYTE *)(v571 + 24), v573))
        {
          if (*(_QWORD **)v569 == v566)
          {
            v582 = v566[1];
            *(_QWORD *)v569 = v582;
            if (v582)
            {
              *(_QWORD *)(v582 + 16) = v569;
              v570 = *(_BYTE **)(v569 + 16);
            }
            v566[2] = v570;
            *(_QWORD *)(*(_QWORD *)(v569 + 16) + 8 * (**(_QWORD **)(v569 + 16) != v569)) = v566;
            v566[1] = v569;
            *(_QWORD *)(v569 + 16) = v566;
            v570 = (_BYTE *)v566[2];
            *((_BYTE *)v566 + 24) = 1;
            v570[24] = 0;
            v569 = *((_QWORD *)v570 + 1);
            v579 = *(_QWORD **)v569;
            *((_QWORD *)v570 + 1) = *(_QWORD *)v569;
            if (v579)
LABEL_913:
              v579[2] = v570;
          }
          else
          {
            *(_BYTE *)(v569 + 24) = 1;
            v570[24] = 0;
            v569 = *((_QWORD *)v570 + 1);
            v579 = *(_QWORD **)v569;
            *((_QWORD *)v570 + 1) = *(_QWORD *)v569;
            if (v579)
              goto LABEL_913;
          }
          *(_QWORD *)(v569 + 16) = *((_QWORD *)v570 + 2);
          *(_QWORD *)(*((_QWORD *)v570 + 2) + 8 * (**((_QWORD **)v570 + 2) != (_QWORD)v570)) = v569;
          *(_QWORD *)v569 = v570;
          goto LABEL_915;
        }
        *(_BYTE *)(v569 + 24) = 1;
        v566 = v570;
        v570[24] = v570 == v568;
        *v572 = 1;
      }
      while (v570 != v568);
    }
    *(_QWORD *)(v649 + 40) = ++v557;
    goto LABEL_917;
  }
LABEL_88:
  v65 = *(float **)v6;
  if (*(float **)v6 != v61)
  {
    v66 = 0.0;
    v67 = *(float **)v6;
    do
    {
      v68 = (float *)*((_QWORD *)v67 + 1);
      v69 = v67;
      if (v68)
      {
        do
        {
          v70 = v68;
          v68 = *(float **)v68;
        }
        while (v68);
      }
      else
      {
        do
        {
          v70 = (float *)*((_QWORD *)v69 + 2);
          v88 = *(_QWORD *)v70 == (_QWORD)v69;
          v69 = v70;
        }
        while (!v88);
      }
      v66 = v66 + v67[10];
      v67 = v70;
    }
    while (v70 != v61);
    if (v66 > 0.0)
    {
      v71 = 1.0 / v66;
      do
      {
        v65[10] = v71 * v65[10];
        v72 = (float *)*((_QWORD *)v65 + 1);
        if (v72)
        {
          do
          {
            v73 = v72;
            v72 = *(float **)v72;
          }
          while (v72);
        }
        else
        {
          do
          {
            v73 = (float *)*((_QWORD *)v65 + 2);
            v88 = *(_QWORD *)v73 == (_QWORD)v65;
            v65 = v73;
          }
          while (!v88);
        }
        v65 = v73;
      }
      while (v73 != v61);
    }
  }
  v74 = *v62;
  if (*v62 != v63)
  {
    v75 = 0;
    v76 = 0;
    v77 = 0;
    v3 = v6 + 80;
    while (1)
    {
      v78 = *(_QWORD **)v3;
      if (!*(_QWORD *)v3)
        goto LABEL_120;
      v79 = v74[4];
      v80 = v3;
      do
      {
        v81 = v78[4];
        v82 = v81 >= v79;
        if (v81 >= v79)
          v83 = v78;
        else
          v83 = v78 + 1;
        if (v82)
          v80 = (size_t)v78;
        v78 = (_QWORD *)*v83;
      }
      while (*v83);
      if (v80 == v3 || v79 < *(_QWORD *)(v80 + 32))
LABEL_120:
        v80 = v3;
      v84 = *(float **)v6;
      v85 = *(float **)(v80 + 40);
      v86 = (float *)(v80 + 48);
      v87 = 0.0;
      v88 = *(float **)v6 == v646 || v85 == v86;
      if (!v88)
      {
        do
        {
          v89 = *((_QWORD *)v84 + 4);
          v90 = *((_QWORD *)v85 + 4);
          if (v89 >= v90)
          {
            if (v89 <= v90)
            {
              v96 = (float *)*((_QWORD *)v84 + 1);
              v97 = v84;
              if (v96)
              {
                do
                {
                  v98 = v96;
                  v96 = *(float **)v96;
                }
                while (v96);
              }
              else
              {
                do
                {
                  v98 = (float *)*((_QWORD *)v97 + 2);
                  v88 = *(_QWORD *)v98 == (_QWORD)v97;
                  v97 = v98;
                }
                while (!v88);
              }
              v91 = vabds_f32(v84[10], v85[10]);
              v99 = (float *)*((_QWORD *)v85 + 1);
              if (v99)
              {
                do
                {
                  v85 = v99;
                  v99 = *(float **)v99;
                }
                while (v99);
              }
              else
              {
                do
                {
                  v100 = v85;
                  v85 = (float *)*((_QWORD *)v85 + 2);
                }
                while (*(float **)v85 != v100);
              }
              v84 = v98;
            }
            else
            {
              v91 = v85[10];
              v94 = (float *)*((_QWORD *)v85 + 1);
              if (v94)
              {
                do
                {
                  v85 = v94;
                  v94 = *(float **)v94;
                }
                while (v94);
              }
              else
              {
                do
                {
                  v95 = v85;
                  v85 = (float *)*((_QWORD *)v85 + 2);
                }
                while (*(float **)v85 != v95);
              }
            }
          }
          else
          {
            v91 = v84[10];
            v92 = (float *)*((_QWORD *)v84 + 1);
            if (v92)
            {
              do
              {
                v84 = v92;
                v92 = *(float **)v92;
              }
              while (v92);
            }
            else
            {
              do
              {
                v93 = v84;
                v84 = (float *)*((_QWORD *)v84 + 2);
              }
              while (*(float **)v84 != v93);
            }
          }
          v87 = v87 + v91;
        }
        while (v84 != v646 && v85 != v86);
      }
      if (v84 != v646)
      {
        do
        {
          v102 = (float *)*((_QWORD *)v84 + 1);
          v103 = v84;
          if (v102)
          {
            do
            {
              v104 = v102;
              v102 = *(float **)v102;
            }
            while (v102);
          }
          else
          {
            do
            {
              v104 = (float *)*((_QWORD *)v103 + 2);
              v88 = *(_QWORD *)v104 == (_QWORD)v103;
              v103 = v104;
            }
            while (!v88);
          }
          v87 = v87 + v84[10];
          v84 = v104;
        }
        while (v104 != v646);
      }
      if (v85 != v86)
      {
        do
        {
          v105 = (float *)*((_QWORD *)v85 + 1);
          v106 = v85;
          if (v105)
          {
            do
            {
              v107 = v105;
              v105 = *(float **)v105;
            }
            while (v105);
          }
          else
          {
            do
            {
              v107 = (float *)*((_QWORD *)v106 + 2);
              v88 = *(_QWORD *)v107 == (_QWORD)v106;
              v106 = v107;
            }
            while (!v88);
          }
          v87 = v87 + v85[10];
          v85 = v107;
        }
        while (v107 != v86);
      }
      v101 = v74[4];
      if (v76 < v75)
      {
        *(float *)v76 = v87;
        *((_QWORD *)v76 + 1) = v101;
        v76 += 16;
        goto LABEL_180;
      }
      v108 = (v76 - v77) >> 4;
      v109 = v108 + 1;
      if ((unint64_t)(v108 + 1) >> 60)
        sub_20E867F44();
      if ((v75 - v77) >> 3 > v109)
        v109 = (v75 - v77) >> 3;
      if ((unint64_t)(v75 - v77) >= 0x7FFFFFFFFFFFFFF0)
        v110 = 0xFFFFFFFFFFFFFFFLL;
      else
        v110 = v109;
      if (v110)
      {
        if (v110 >> 60)
          sub_20E877A38();
        v111 = (char *)operator new(16 * v110);
        v112 = (uint64_t)&v111[16 * v108];
        *(float *)v112 = v87;
        *(_QWORD *)(v112 + 8) = v101;
        if (v76 != v77)
        {
LABEL_176:
          v113 = (char *)v112;
          v6 = v649;
          do
          {
            *((_OWORD *)v113 - 1) = *((_OWORD *)v76 - 1);
            v113 -= 16;
            v76 -= 16;
          }
          while (v76 != v77);
          v114 = v77;
          v77 = v113;
          v75 = &v111[16 * v110];
          v76 = (char *)(v112 + 16);
          if (!v114)
            goto LABEL_180;
LABEL_179:
          operator delete(v114);
          goto LABEL_180;
        }
      }
      else
      {
        v111 = 0;
        v112 = 16 * v108;
        *(float *)v112 = v87;
        *(_QWORD *)(v112 + 8) = v101;
        if (v76 != v77)
          goto LABEL_176;
      }
      v114 = v76;
      v77 = (char *)v112;
      v6 = v649;
      v75 = &v111[16 * v110];
      v76 = (char *)(v112 + 16);
      if (v114)
        goto LABEL_179;
LABEL_180:
      if (v76 - v77 >= 17)
      {
        v115 = (((unint64_t)(v76 - v77) >> 4) - 2) >> 1;
        v116 = &v77[16 * v115];
        v117 = v76 - 16;
        v118 = *((float *)v76 - 4);
        v119 = *(float *)v116;
        if (*(float *)v116 > v118)
        {
          v120 = *((_QWORD *)v76 - 1);
          do
          {
            v121 = v117;
            v117 = v116;
            *(float *)v121 = v119;
            *((_QWORD *)v121 + 1) = *((_QWORD *)v116 + 1);
            if (!v115)
              break;
            v115 = (v115 - 1) >> 1;
            v116 = &v77[16 * v115];
            v119 = *(float *)v116;
          }
          while (*(float *)v116 > v118);
          *(float *)v117 = v118;
          *((_QWORD *)v117 + 1) = v120;
        }
      }
      v122 = (_QWORD *)v74[1];
      if (v122)
      {
        do
        {
          v123 = v122;
          v122 = (_QWORD *)*v122;
        }
        while (v122);
      }
      else
      {
        do
        {
          v123 = (_QWORD *)v74[2];
          v88 = *v123 == (_QWORD)v74;
          v74 = v123;
        }
        while (!v88);
      }
      v74 = v123;
      if (v123 == v63)
      {
        v124 = v76;
        goto LABEL_197;
      }
    }
  }
  v76 = 0;
  v77 = 0;
  v124 = 0;
LABEL_197:
  v125 = v124 - v77;
  v126 = (v124 - v77) >> 4;
  v127 = *(_BYTE **)(v6 + 48);
  v4 = a2;
  if (v126 > (uint64_t)(*(_QWORD *)(v6 + 64) - (_QWORD)v127) >> 4)
  {
    if ((v125 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v128 = *(_BYTE **)(v6 + 56);
    v129 = (char *)operator new(v125);
    v130 = &v129[(v128 - v127) & 0xFFFFFFFFFFFFFFF0];
    v131 = v130;
    if (v128 != v127)
    {
      v132 = &v129[(v128 - v127) & 0xFFFFFFFFFFFFFFF0];
      do
      {
        v131 = v132 - 16;
        *((_OWORD *)v132 - 1) = *((_OWORD *)v128 - 1);
        v128 -= 16;
        v132 -= 16;
      }
      while (v128 != v127);
    }
    *(_QWORD *)(v6 + 48) = v131;
    *(_QWORD *)(v6 + 56) = v130;
    *(_QWORD *)(v6 + 64) = &v129[16 * v126];
    if (v127)
      operator delete(v127);
  }
  if (v77 != v76)
  {
    v3 = *(_QWORD *)(v6 + 56);
    while (1)
    {
      v133 = *(_DWORD *)v77;
      v134 = *((_QWORD *)v77 + 1);
      v135 = *(_QWORD *)(v6 + 64);
      if (v3 >= v135)
        break;
      *(_DWORD *)v3 = v133;
      *(_QWORD *)(v3 + 8) = v134;
      v3 += 16;
LABEL_223:
      *(_QWORD *)(v6 + 56) = v3;
      v146 = v76 - v77;
      if (v76 - v77 >= 17)
      {
        v147 = 0;
        v148 = v146 >> 4;
        v149 = *(_DWORD *)v77;
        v150 = *((_QWORD *)v77 + 1);
        v151 = (unint64_t)((v146 >> 4) - 2) >> 1;
        v152 = (float *)v77;
        do
        {
          v153 = v152;
          v152 += 4 * v147 + 4;
          v154 = 2 * v147;
          v147 = (2 * v147) | 1;
          v155 = v154 + 2;
          if (v155 < v148 && *v152 > v152[4])
          {
            v152 += 4;
            v147 = v155;
          }
          *v153 = *v152;
          *((_QWORD *)v153 + 1) = *((_QWORD *)v152 + 1);
        }
        while (v147 <= v151);
        if (v152 == (float *)(v76 - 16))
        {
          *(_DWORD *)v152 = v149;
          *((_QWORD *)v152 + 1) = v150;
        }
        else
        {
          *v152 = *((float *)v76 - 4);
          *((_QWORD *)v152 + 1) = *((_QWORD *)v76 - 1);
          *((_DWORD *)v76 - 4) = v149;
          *((_QWORD *)v76 - 1) = v150;
          v156 = (char *)v152 - v77 + 16;
          if (v156 >= 17)
          {
            v157 = (((unint64_t)v156 >> 4) - 2) >> 1;
            v158 = &v77[16 * v157];
            v159 = *(float *)v158;
            v160 = *v152;
            if (*(float *)v158 > *v152)
            {
              v161 = *((_QWORD *)v152 + 1);
              do
              {
                v162 = v152;
                v152 = (float *)v158;
                *v162 = v159;
                *((_QWORD *)v162 + 1) = *((_QWORD *)v158 + 1);
                if (!v157)
                  break;
                v157 = (v157 - 1) >> 1;
                v158 = &v77[16 * v157];
                v159 = *(float *)v158;
              }
              while (*(float *)v158 > v160);
              *v152 = v160;
              *((_QWORD *)v152 + 1) = v161;
            }
          }
        }
      }
      v76 -= 16;
      if (v77 == v76)
        goto LABEL_239;
    }
    v136 = *v630;
    v137 = (uint64_t)(v3 - (_QWORD)*v630) >> 4;
    v138 = v137 + 1;
    if ((unint64_t)(v137 + 1) >> 60)
      sub_20E867F44();
    v139 = v135 - (_QWORD)v136;
    if (v139 >> 3 > v138)
      v138 = v139 >> 3;
    if ((unint64_t)v139 >= 0x7FFFFFFFFFFFFFF0)
      v140 = 0xFFFFFFFFFFFFFFFLL;
    else
      v140 = v138;
    if (v140)
    {
      if (v140 >> 60)
        sub_20E877A38();
      v141 = (char *)operator new(16 * v140);
      v142 = (uint64_t)&v141[16 * v137];
      *(_DWORD *)v142 = v133;
      *(_QWORD *)(v142 + 8) = v134;
      if ((void *)v3 != v136)
        goto LABEL_219;
LABEL_237:
      v144 = (void *)v3;
      v4 = a2;
      v163 = &v141[16 * v140];
      v3 = v142 + 16;
      v6 = v649;
      *(_QWORD *)(v649 + 48) = v142;
      *(_QWORD *)(v649 + 56) = v142 + 16;
      *(_QWORD *)(v649 + 64) = v163;
      if (!v144)
        goto LABEL_223;
    }
    else
    {
      v141 = 0;
      v142 = 16 * v137;
      *(_DWORD *)v142 = v133;
      *(_QWORD *)(v142 + 8) = v134;
      if ((void *)v3 == v136)
        goto LABEL_237;
LABEL_219:
      v143 = v142;
      v4 = a2;
      do
      {
        *(_OWORD *)(v143 - 16) = *(_OWORD *)(v3 - 16);
        v143 -= 16;
        v3 -= 16;
      }
      while ((void *)v3 != v136);
      v144 = *v630;
      v145 = &v141[16 * v140];
      v3 = v142 + 16;
      v6 = v649;
      *(_QWORD *)(v649 + 48) = v143;
      *(_QWORD *)(v649 + 56) = v142 + 16;
      *(_QWORD *)(v649 + 64) = v145;
      if (!v144)
        goto LABEL_223;
    }
    operator delete(v144);
    goto LABEL_223;
  }
LABEL_239:
  if (v77)
    operator delete(v77);
  v164 = *(_QWORD *)a1;
  memset(object, 0, 24);
  v165 = *(_QWORD *)(v164 + 48);
  v36 = *(_QWORD *)(v164 + 56);
  v166 = v36 - v165;
  if (v36 == v165)
  {
    v6 = 0;
    v171 = 0;
    v5 = a3;
  }
  else
  {
    v5 = a3;
    if (v166 < 0)
      sub_20E867F44();
    v167 = (char *)operator new(v36 - v165);
    v6 = (unint64_t)v167;
    v168 = 0;
    object[0] = v167;
    object[1] = v167;
    object[2] = &v167[16 * (v166 >> 4)];
    do
    {
      v169 = v165 + v168;
      v170 = &v167[v168];
      *(_DWORD *)v170 = *(_DWORD *)(v165 + v168);
      *((_QWORD *)v170 + 1) = *(_QWORD *)(v165 + v168 + 8);
      v168 += 16;
    }
    while (v169 + 16 != v36);
    v171 = &v167[v168];
  }
  v172 = (uint64_t)&v171[-v6] >> 4;
  v173 = 5;
  if (v172 < 5)
    v173 = v172;
  v58 = 0;
  if (v173)
  {
    v174 = 0;
    v176 = 0;
    v175 = 0;
    v646 = (float *)v173;
    v650 = v6;
    while (1)
    {
      while (1)
      {
        v3 = *(_QWORD *)(v6 + 16 * v174 + 8);
        if (v176 >= v175)
          break;
        *(_QWORD *)v176 = v3;
        v176 += 8;
        if (++v174 == v173)
          goto LABEL_279;
      }
      v177 = (v176 - v58) >> 3;
      v178 = v177 + 1;
      if ((unint64_t)(v177 + 1) >> 61)
        sub_20E92CED8();
      if ((v175 - v58) >> 2 > v178)
        v178 = (v175 - v58) >> 2;
      v179 = (unint64_t)(v175 - v58) >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v178;
      if (v179)
      {
        if (v179 >> 61)
          sub_20E877A38();
        v180 = v179;
        v181 = operator new(8 * v179);
        v179 = v180;
        v182 = (size_t *)&v181[8 * v177];
        *v182 = v3;
        v36 = (uint64_t)(v182 + 1);
        v183 = v176 - v58;
        if (v176 == v58)
        {
LABEL_270:
          v5 = a3;
          v6 = v650;
          v175 = &v181[8 * v179];
          if (!v58)
            goto LABEL_267;
LABEL_266:
          operator delete(v58);
          goto LABEL_267;
        }
      }
      else
      {
        v181 = 0;
        v182 = (size_t *)(8 * v177);
        *(_QWORD *)(8 * v177) = v3;
        v36 = 8 * v177 + 8;
        v183 = v176 - v58;
        if (v176 == v58)
          goto LABEL_270;
      }
      v184 = v183 - 8;
      if (v184 < 0x168)
        break;
      v187 = (v176 - 8 - v58) & 0xFFFFFFFFFFFFFFF8;
      if (&v181[v176 - v58 - 8 - v187] > &v181[v176 - v58 - 8]
        || &v176[-v187 - 8] > v176 - 8
        || (unint64_t)(v58 - v181) < 0x20)
      {
        break;
      }
      v188 = (v184 >> 3) + 1;
      v189 = 8 * (v188 & 0x3FFFFFFFFFFFFFFCLL);
      v185 = &v176[-v189];
      v182 = (size_t *)((char *)v182 - v189);
      v190 = &v181[8 * v177 - 16];
      v191 = v176 - 16;
      v192 = v188 & 0x3FFFFFFFFFFFFFFCLL;
      v6 = v650;
      do
      {
        v193 = *(_OWORD *)v191;
        *(v190 - 1) = *((_OWORD *)v191 - 1);
        *v190 = v193;
        v190 -= 2;
        v191 -= 32;
        v192 -= 4;
      }
      while (v192);
      v5 = a3;
      if (v188 != (v188 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_264;
LABEL_265:
      v175 = &v181[8 * v179];
      if (v58)
        goto LABEL_266;
LABEL_267:
      v58 = (char *)v182;
      v176 = (char *)v36;
      v4 = a2;
      v173 = (uint64_t)v646;
      if ((float *)++v174 == v646)
      {
LABEL_279:
        v653 = v176;
        goto LABEL_280;
      }
    }
    v185 = v176;
    v5 = a3;
    v6 = v650;
    do
    {
LABEL_264:
      v186 = *((_QWORD *)v185 - 1);
      v185 -= 8;
      *--v182 = v186;
    }
    while (v185 != v58);
    goto LABEL_265;
  }
LABEL_280:
  v652 = v58;
  if (v6)
    operator delete((void *)v6);
  if (v59)
    operator delete(v59);
  v33 = (unint64_t *)v653;
  *v5 = 0;
  v5[1] = 0;
  v5[2] = 0;
  if (v58 != v653)
    goto LABEL_285;
LABEL_850:
  if (v33)
    operator delete(v33);
}

void sub_20F42B400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void **a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  void *a72;
  void *v72;

  if (a57 && a56 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a72);
  if (v72)
    operator delete(v72);
  sub_20EDDCB58(a42);
  if (a48)
    operator delete(a48);
  _Unwind_Resume(a1);
}

uint64_t sub_20F42B858(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        v4 = v2 - 296;
        *(_QWORD *)(a1 + 16) = v2 - 296;
        v5 = *(void **)(v2 - 272);
        if (!v5)
          break;
        *(_QWORD *)(v2 - 264) = v5;
        operator delete(v5);
        v2 = *(_QWORD *)(a1 + 16);
        if (v2 == v3)
          goto LABEL_6;
      }
      v2 -= 296;
    }
    while (v4 != v3);
  }
LABEL_6:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20F42B8C8(char ***a1@<X0>, __int128 *a2@<X1>, char **a3@<X8>)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  size_t v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  __int128 v39;
  uint64_t v40;
  int v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  __int128 v46;
  char *v47;
  void *v48;
  uint64_t v49;
  void *v50;
  void **v51;
  unint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unint64_t *v55;
  char **v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  __int128 v69;
  int v70;
  char *v71;
  void *v72;
  uint64_t v73;
  void *v74;
  char *v75;
  unint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  size_t v87;
  void *v88;
  uint64_t v89;
  void *v90;
  int v91;
  char **v92;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  char *v98;
  __int128 v99;
  __int128 v100;
  void *v101[2];
  void *v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  int v108;
  __int128 __p;
  uint64_t v110;
  _QWORD v111[3];
  __int128 v112;
  __int128 v113;
  char *v114;
  char *v115;
  char *v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;

  v121 = *MEMORY[0x24BDAC8D0];
  v91 = *((unsigned __int8 *)a2 + 32);
  v4 = *a1;
  v97 = 0;
  v98 = 0;
  v96 = 0;
  v92 = a1[1];
  v5 = (char *)v92 - (char *)*a1;
  if (!v5)
  {
    v7 = 0;
    v99 = *a2;
    v100 = a2[1];
    v8 = 0;
    if (v92 != v4)
      goto LABEL_8;
    goto LABEL_68;
  }
  v6 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 3);
  if (v6 > 0x249249249249249)
    sub_20E867F44();
  v7 = (char *)operator new(0xAAAAAAAAAAAAAAD0 * (v5 >> 3));
  v96 = v7;
  v97 = v7;
  v98 = &v7[112 * v6];
  v99 = *a2;
  v100 = a2[1];
  v8 = v7;
  if (v92 != v4)
  {
LABEL_8:
    while (1)
    {
      if (v91)
      {
        v112 = v99;
        v113 = v100;
      }
      else
      {
        *((_QWORD *)&v112 + 1) = 10;
        *(_QWORD *)&v113 = 1;
        DWORD2(v113) = 0;
      }
      v9 = *v4;
      v10 = v4[1];
      v114 = 0;
      v115 = 0;
      v116 = 0;
      v11 = v10 - v9;
      *(_QWORD *)&v112 = (v10 - v9) >> 6;
      if (v10 != v9)
        break;
      v32 = 0;
      v12 = 0;
      v31 = 0;
LABEL_35:
      v111[0] = v31;
      v111[1] = v12;
      v111[2] = v32;
      sub_20F42C5B0((uint64_t)v101, (uint64_t)v111, &v112);
      if (v31)
        operator delete(v31);
      v33 = v97;
      if (v97 >= v98)
      {
        v35 = 0x6DB6DB6DB6DB6DB7 * ((v97 - v96) >> 4) + 1;
        if (v35 > 0x249249249249249)
          sub_20E867F44();
        if (0xDB6DB6DB6DB6DB6ELL * ((v98 - v96) >> 4) > v35)
          v35 = 0xDB6DB6DB6DB6DB6ELL * ((v98 - v96) >> 4);
        if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v98 - v96) >> 4)) >= 0x124924924924924)
          v36 = 0x249249249249249;
        else
          v36 = v35;
        if (v36 > 0x249249249249249)
          sub_20E877A38();
        v37 = (char *)operator new(112 * v36);
        v38 = &v37[16 * ((v97 - v96) >> 4)];
        *(_OWORD *)v38 = *(_OWORD *)v101;
        v39 = v104;
        *(_OWORD *)(v38 + 24) = v103;
        *((_QWORD *)v38 + 2) = v102;
        v40 = v106;
        *((_QWORD *)v38 + 7) = v105;
        *((_QWORD *)v38 + 8) = v40;
        v41 = v108;
        *((_DWORD *)v38 + 18) = v107;
        v101[0] = 0;
        v101[1] = 0;
        *(_OWORD *)(v38 + 40) = v39;
        v105 = 0;
        v106 = 0;
        v102 = 0;
        v107 = 0;
        *((_DWORD *)v38 + 20) = v41;
        *((_QWORD *)v38 + 12) = 0;
        *((_QWORD *)v38 + 13) = 0;
        *(_OWORD *)(v38 + 88) = __p;
        *((_QWORD *)v38 + 13) = v110;
        __p = 0uLL;
        v42 = v38 + 112;
        v110 = 0;
        if (v97 == v96)
        {
          v96 = &v37[16 * ((v97 - v96) >> 4)];
          v98 = &v37[112 * v36];
        }
        else
        {
          v43 = 0;
          do
          {
            v44 = &v38[v43];
            v45 = &v97[v43];
            *((_OWORD *)v44 - 7) = *(_OWORD *)&v97[v43 - 112];
            *((_QWORD *)v44 - 12) = *(_QWORD *)&v97[v43 - 96];
            *((_QWORD *)v45 - 14) = 0;
            *((_QWORD *)v45 - 13) = 0;
            *((_QWORD *)v45 - 12) = 0;
            v46 = *(_OWORD *)&v97[v43 - 88];
            *(_OWORD *)(v44 - 72) = *(_OWORD *)&v97[v43 - 72];
            *(_OWORD *)(v44 - 88) = v46;
            *((_QWORD *)v44 - 7) = *(_QWORD *)&v97[v43 - 56];
            *((_QWORD *)v45 - 7) = 0;
            *((_QWORD *)v44 - 6) = *(_QWORD *)&v97[v43 - 48];
            *((_QWORD *)v45 - 6) = 0;
            *((_DWORD *)v44 - 10) = *(_DWORD *)&v97[v43 - 40];
            *((_DWORD *)v45 - 10) = 0;
            *((_DWORD *)v44 - 8) = *(_DWORD *)&v97[v43 - 32];
            *(_OWORD *)(v44 - 24) = *(_OWORD *)&v97[v43 - 24];
            *((_QWORD *)v44 - 1) = *(_QWORD *)&v97[v43 - 8];
            *((_QWORD *)v45 - 3) = 0;
            *((_QWORD *)v45 - 2) = 0;
            *((_QWORD *)v45 - 1) = 0;
            v43 -= 112;
          }
          while (&v97[v43] != v96);
          v33 = v96;
          v47 = v97;
          v96 = &v38[v43];
          v98 = &v37[112 * v36];
          while (v47 != v33)
          {
            v48 = (void *)*((_QWORD *)v47 - 3);
            if (v48)
            {
              *((_QWORD *)v47 - 2) = v48;
              operator delete(v48);
            }
            v49 = *((_QWORD *)v47 - 7);
            if (v49)
              MEMORY[0x212BC6368](v49, 0x1000C80BDFB0063);
            v50 = (void *)*((_QWORD *)v47 - 14);
            if (v50)
            {
              *((_QWORD *)v47 - 13) = v50;
              operator delete(v50);
            }
            v47 -= 112;
          }
        }
        if (v33)
          operator delete(v33);
        v97 = v42;
        if ((_QWORD)__p)
        {
          *((_QWORD *)&__p + 1) = __p;
          operator delete((void *)__p);
        }
      }
      else
      {
        *((_QWORD *)v97 + 1) = 0;
        *((_QWORD *)v97 + 2) = 0;
        *(_QWORD *)v97 = 0;
        *(_OWORD *)v97 = *(_OWORD *)v101;
        *((_QWORD *)v97 + 2) = v102;
        v101[0] = 0;
        v101[1] = 0;
        v34 = v104;
        *(_OWORD *)(v97 + 24) = v103;
        *(_OWORD *)(v97 + 40) = v34;
        *((_QWORD *)v97 + 7) = 0;
        *((_QWORD *)v97 + 8) = 0;
        *((_QWORD *)v97 + 7) = v105;
        v102 = 0;
        *((_QWORD *)v97 + 8) = v106;
        v105 = 0;
        v106 = 0;
        *((_DWORD *)v97 + 18) = v107;
        v107 = 0;
        *((_DWORD *)v97 + 20) = v108;
        *((_QWORD *)v97 + 11) = 0;
        *((_QWORD *)v97 + 12) = 0;
        *((_QWORD *)v97 + 13) = 0;
        *(_OWORD *)(v97 + 88) = __p;
        *((_QWORD *)v97 + 13) = v110;
        __p = 0uLL;
        v110 = 0;
        v97 += 112;
      }
      if (v105)
        MEMORY[0x212BC6368](v105, 0x1000C80BDFB0063);
      if (v101[0])
      {
        v101[1] = v101[0];
        operator delete(v101[0]);
      }
      v4 += 3;
      if (v4 == v92)
      {
        v8 = v96;
        v7 = v97;
        goto LABEL_68;
      }
    }
    if ((v11 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v12 = (char *)operator new(v11);
    v114 = v12;
    v115 = v12;
    v116 = &v12[64 * ((v10 - v9) >> 6)];
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v16 = *((_OWORD *)v9 + 1);
          v117 = *(_OWORD *)v9;
          v118 = v16;
          v17 = *((_OWORD *)v9 + 3);
          v119 = *((_OWORD *)v9 + 2);
          v120 = v17;
          if (v12 >= v116)
            break;
          v13 = *(_OWORD *)v9;
          v14 = *((_OWORD *)v9 + 1);
          v15 = *((_OWORD *)v9 + 3);
          *((_OWORD *)v12 + 2) = *((_OWORD *)v9 + 2);
          *((_OWORD *)v12 + 3) = v15;
          *(_OWORD *)v12 = v13;
          *((_OWORD *)v12 + 1) = v14;
          v12 += 64;
          v115 = v12;
          v9 += 64;
          if (v9 == v10)
            goto LABEL_33;
        }
        v18 = v114;
        v19 = (v12 - v114) >> 6;
        v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 58)
          sub_20E867F44();
        v21 = v116 - v114;
        if ((v116 - v114) >> 5 > v20)
          v20 = v21 >> 5;
        v22 = (unint64_t)v21 >= 0x7FFFFFFFFFFFFFC0 ? 0x3FFFFFFFFFFFFFFLL : v20;
        if (v22)
        {
          if (v22 >> 58)
            sub_20E877A38();
          v23 = (char *)operator new(v22 << 6);
        }
        else
        {
          v23 = 0;
        }
        v24 = &v23[64 * v19];
        v25 = v118;
        *(_OWORD *)v24 = v117;
        *((_OWORD *)v24 + 1) = v25;
        v26 = v120;
        *((_OWORD *)v24 + 2) = v119;
        *((_OWORD *)v24 + 3) = v26;
        v27 = v24 + 64;
        if (v12 != v18)
          break;
        v114 = v24;
        v115 = v24 + 64;
        v18 = v12;
        v116 = &v23[64 * v22];
LABEL_32:
        operator delete(v18);
        v12 = v27;
        v115 = v27;
        v9 += 64;
        if (v9 == v10)
        {
LABEL_33:
          v31 = v114;
          v32 = v116;
          goto LABEL_35;
        }
      }
      do
      {
        v28 = *((_OWORD *)v12 - 4);
        v29 = *((_OWORD *)v12 - 3);
        v30 = *((_OWORD *)v12 - 1);
        *((_OWORD *)v24 - 2) = *((_OWORD *)v12 - 2);
        *((_OWORD *)v24 - 1) = v30;
        *((_OWORD *)v24 - 4) = v28;
        *((_OWORD *)v24 - 3) = v29;
        v24 -= 64;
        v12 -= 64;
      }
      while (v12 != v18);
      v114 = v24;
      v115 = v27;
      v116 = &v23[64 * v22];
      if (v18)
        goto LABEL_32;
      v12 = v27;
      v115 = v27;
      v9 += 64;
      if (v9 == v10)
        goto LABEL_33;
    }
  }
LABEL_68:
  v94 = v8;
  v95 = v7;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *((_BYTE *)a3 + 32) = 0;
  *((_BYTE *)a3 + 44) = 0;
  a3[6] = 0;
  *((_DWORD *)a3 + 14) = 0;
  a3[8] = 0;
  v51 = (void **)(a3 + 8);
  a3[9] = 0;
  *((_DWORD *)a3 + 20) = 0;
  if (v7 == v8)
  {
    v77 = 0;
    v8 = v7;
    goto LABEL_108;
  }
  v52 = 0;
  v53 = 0;
  v54 = 0;
  v55 = (unint64_t *)(a3 + 2);
  do
  {
    v57 = (uint64_t)&v8[112 * v53];
    v58 = *(_OWORD *)(v57 + 40);
    v117 = *(_OWORD *)(v57 + 24);
    v118 = v58;
    LODWORD(v118) = v54;
    if (v52 >= *v55)
    {
      v59 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v52 - (_QWORD)*a3) >> 4);
      v60 = v59 + 1;
      if ((unint64_t)(v59 + 1) > 0x249249249249249)
        sub_20E867F44();
      if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*v55 - (_QWORD)*a3) >> 4) > v60)
        v60 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*v55 - (_QWORD)*a3) >> 4);
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*v55 - (_QWORD)*a3) >> 4)) >= 0x124924924924924)
        v61 = 0x249249249249249;
      else
        v61 = v60;
      *((_QWORD *)&v103 + 1) = a3 + 2;
      if (v61)
      {
        if (v61 > 0x249249249249249)
          sub_20E877A38();
        v62 = (char *)operator new(112 * v61);
      }
      else
      {
        v62 = 0;
      }
      v101[0] = v62;
      v101[1] = &v62[112 * v59];
      v102 = v101[1];
      *(_QWORD *)&v103 = &v62[112 * v61];
      sub_20F42C5B0((uint64_t)v101[1], v57, &v117);
      v63 = (char *)v101[1];
      v52 = (unint64_t)v102 + 112;
      v56 = a3;
      v64 = *a3;
      v65 = a3[1];
      if (v65 == *a3)
      {
        *a3 = (char *)v101[1];
        a3[1] = (char *)v52;
        a3[2] = (char *)v103;
        if (v65)
          goto LABEL_71;
      }
      else
      {
        v66 = 0;
        do
        {
          v67 = &v63[v66];
          v68 = &v65[v66];
          *((_QWORD *)v67 - 14) = 0;
          *((_QWORD *)v67 - 13) = 0;
          *((_QWORD *)v67 - 12) = 0;
          *((_OWORD *)v67 - 7) = *(_OWORD *)&v65[v66 - 112];
          *((_QWORD *)v67 - 12) = *(_QWORD *)&v65[v66 - 96];
          *((_QWORD *)v68 - 14) = 0;
          *((_QWORD *)v68 - 13) = 0;
          *((_QWORD *)v68 - 12) = 0;
          v69 = *(_OWORD *)&v65[v66 - 88];
          *(_OWORD *)(v67 - 72) = *(_OWORD *)&v65[v66 - 72];
          *((_QWORD *)v67 - 7) = 0;
          *((_QWORD *)v67 - 6) = 0;
          *(_OWORD *)(v67 - 88) = v69;
          *((_QWORD *)v67 - 7) = *(_QWORD *)&v65[v66 - 56];
          *((_QWORD *)v68 - 7) = 0;
          *((_QWORD *)v67 - 6) = *(_QWORD *)&v65[v66 - 48];
          *((_QWORD *)v68 - 6) = 0;
          *((_DWORD *)v67 - 10) = *(_DWORD *)&v65[v66 - 40];
          *((_DWORD *)v68 - 10) = 0;
          v70 = *(_DWORD *)&v65[v66 - 32];
          *((_QWORD *)v67 - 2) = 0;
          *((_QWORD *)v67 - 1) = 0;
          *((_DWORD *)v67 - 8) = v70;
          *((_QWORD *)v67 - 3) = 0;
          *(_OWORD *)(v67 - 24) = *(_OWORD *)&v65[v66 - 24];
          *((_QWORD *)v67 - 1) = *(_QWORD *)&v65[v66 - 8];
          *((_QWORD *)v68 - 3) = 0;
          *((_QWORD *)v68 - 2) = 0;
          *((_QWORD *)v68 - 1) = 0;
          v66 -= 112;
        }
        while (&v65[v66] != v64);
        v65 = *a3;
        v71 = a3[1];
        *a3 = &v63[v66];
        a3[1] = (char *)v52;
        a3[2] = (char *)v103;
        while (v71 != v65)
        {
          v72 = (void *)*((_QWORD *)v71 - 3);
          if (v72)
          {
            *((_QWORD *)v71 - 2) = v72;
            operator delete(v72);
          }
          v73 = *((_QWORD *)v71 - 7);
          if (v73)
            MEMORY[0x212BC6368](v73, 0x1000C80BDFB0063);
          v74 = (void *)*((_QWORD *)v71 - 14);
          if (v74)
          {
            *((_QWORD *)v71 - 13) = v74;
            operator delete(v74);
          }
          v71 -= 112;
        }
        v56 = a3;
        if (v65)
LABEL_71:
          operator delete(v65);
      }
    }
    else
    {
      v56 = a3;
      sub_20F42C5B0(v52, v57, &v117);
      v52 += 112;
      a3[1] = (char *)v52;
    }
    v56[1] = (char *)v52;
    v8 = v94;
    v7 = v95;
    v53 = ++v54;
  }
  while (0x6DB6DB6DB6DB6DB7 * ((v95 - v94) >> 4) > (unint64_t)v54);
  v75 = *a3;
  if (*a3 == (char *)v52)
  {
    v77 = 0;
  }
  else
  {
    v76 = v52 - (_QWORD)v75 - 112;
    if (v76 < 0x70)
    {
      v77 = 0;
      v78 = *a3;
      goto LABEL_107;
    }
    v79 = 0;
    v80 = 0;
    v81 = (((v76 >> 4) * (unsigned __int128)0x2492492492492493uLL) >> 64) + 1;
    v78 = &v75[112 * (v81 & 0x7FFFFFFFFFFFFFELL)];
    v82 = (uint64_t *)(v75 + 136);
    v83 = v81 & 0x7FFFFFFFFFFFFFELL;
    do
    {
      v84 = *(v82 - 14);
      v85 = *v82;
      v82 += 28;
      v79 += v84 << 9;
      v80 += v85 << 9;
      v83 -= 2;
    }
    while (v83);
    v77 = (char *)(v80 + v79);
    if (v81 != (v81 & 0x7FFFFFFFFFFFFFELL))
    {
      do
      {
LABEL_107:
        v77 += 512 * *((_QWORD *)v78 + 3);
        v78 += 112;
      }
      while (v78 != (char *)v52);
    }
  }
LABEL_108:
  a3[3] = v77;
  *((_DWORD *)a3 + 20) = (_DWORD)v77;
  v86 = v77;
  if ((unint64_t)a3[9] < v77)
  {
    if (*v51)
      MEMORY[0x212BC6368](*v51, 0x1000C8052888210);
    v87 = (4 * v86 + 31) & 0x7FFFFFFE0;
    a3[8] = 0;
    a3[9] = (char *)(v87 >> 2);
    *v51 = operator new(v87, (std::align_val_t)0x20uLL);
  }
  if (v8)
  {
    while (v7 != v8)
    {
      v88 = (void *)*((_QWORD *)v7 - 3);
      if (v88)
      {
        *((_QWORD *)v7 - 2) = v88;
        operator delete(v88);
      }
      v89 = *((_QWORD *)v7 - 7);
      if (v89)
        MEMORY[0x212BC6368](v89, 0x1000C80BDFB0063);
      v90 = (void *)*((_QWORD *)v7 - 14);
      if (v90)
      {
        *((_QWORD *)v7 - 13) = v90;
        operator delete(v90);
      }
      v7 -= 112;
    }
    operator delete(v8);
  }
}

void sub_20F42C320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20F42C484(a5);
  sub_20F42C484((void **)va);
  _Unwind_Resume(a1);
}

void sub_20F42C33C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20F42C484((void **)va);
  _Unwind_Resume(a1);
}

void sub_20F42C350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, void *a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35)
{
  _QWORD *v35;

  if (*v35)
    MEMORY[0x212BC6368](*v35, 0x1000C8052888210);
  sub_20F42C484(a12);
  sub_20F42C484(&a13);
  _Unwind_Resume(a1);
}

void sub_20F42C3E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  va_list va;

  va_start(va, a8);
  if (v8)
    operator delete(v8);
  sub_20F42C484((void **)va);
  _Unwind_Resume(a1);
}

void sub_20F42C454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  uint64_t v9;
  va_list va;

  va_start(va, a8);
  if (v8)
  {
    *(_QWORD *)(v9 - 208) = v8;
    JUMPOUT(0x20F42C46CLL);
  }
  sub_20F42C484((uint64_t *)va);
  _Unwind_Resume(a1);
}

void **sub_20F42C484(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 3);
        if (v5)
        {
          *((_QWORD *)v3 - 2) = v5;
          operator delete(v5);
        }
        v6 = *((_QWORD *)v3 - 7);
        if (v6)
          MEMORY[0x212BC6368](v6, 0x1000C80BDFB0063);
        v7 = (void *)*((_QWORD *)v3 - 14);
        if (v7)
        {
          *((_QWORD *)v3 - 13) = v7;
          operator delete(v7);
        }
        v3 -= 112;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_20F42C520(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  void **v4;
  void *v5;
  uint64_t v6;
  void *v7;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 112);
    *(_QWORD *)(a1 + 16) = i - 112;
    v5 = *(void **)(i - 24);
    if (v5)
    {
      *(_QWORD *)(i - 16) = v5;
      operator delete(v5);
    }
    v6 = *(_QWORD *)(i - 56);
    if (v6)
      MEMORY[0x212BC6368](v6, 0x1000C80BDFB0063);
    v7 = *v4;
    if (*v4)
    {
      *(_QWORD *)(i - 104) = v7;
      operator delete(v7);
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20F42C5B0(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v5;
  const void *v6;
  int64_t v7;
  char *v8;
  char *v9;
  __int128 v10;
  uint64_t v11;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v6 = *(const void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v7 = v5 - *(_QWORD *)a2;
  if (v5 != *(_QWORD *)a2)
  {
    if (v7 < 0)
      sub_20E867F44();
    v8 = (char *)operator new(v5 - *(_QWORD *)a2);
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = v8;
    v9 = &v8[64 * (v7 >> 6)];
    *(_QWORD *)(a1 + 16) = v9;
    memcpy(v8, v6, v7);
    *(_QWORD *)(a1 + 8) = v9;
  }
  v10 = a3[1];
  *(_OWORD *)(a1 + 24) = *a3;
  *(_OWORD *)(a1 + 40) = v10;
  v11 = (*(_DWORD *)(a1 + 24) << 9);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 56) = operator new(2 * v11, (std::align_val_t)0x20uLL);
  *(_DWORD *)(a1 + 72) = v11;
  *(_DWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  return a1;
}

void sub_20F42C674(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_20F42C6A0(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  std::string *v7;
  void *v8;
  void **v9;
  void *v10;
  void *v11;
  void *v12;
  BOOL v13;
  unsigned int data;
  unsigned int v16;
  char *v17;
  uint64_t v18;
  std::string::size_type size;
  std::string::size_type v20;
  int64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  std::string::size_type v27;
  _BYTE *v28;
  _BYTE *v29;
  int64_t v30;
  char *v31;
  std::string::size_type v32;
  std::string::size_type v33;
  std::string::size_type v34;
  void *v35;
  std::string::size_type v36;
  void *v37;
  void *v38;
  std::string::size_type v39;
  void *v40;
  std::string::size_type v41;
  void *v42;
  void *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  char *v49;
  char *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  void *v60;
  void *v61;
  uint64_t v62;
  void *v63;
  std::string::size_type v64;
  std::string::size_type v65;
  void *v66;
  std::string::size_type v67;
  void *v68;
  void *v69;
  uint64_t v70;
  std::string *v71;
  std::string::size_type v72;
  std::string *v73;
  unsigned int v74;
  char *v75;
  float *v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  float *v83;
  unint64_t v84;
  int v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  __int128 v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  float *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  std::string::size_type v103;
  char *v104;
  char *v105;
  unint64_t v106;
  size_t v107;
  unint64_t v108;
  size_t v109;
  char *v110;
  std::string::size_type v111;
  char *v112;
  unint64_t v113;
  char *v114;
  char *v115;
  unint64_t v116;
  __int128 v117;
  char *v118;
  char *v119;
  unint64_t v120;
  uint64_t v121;
  char *v122;
  char v123;
  _BYTE *v124;
  std::string::size_type v125;
  uint64_t v126;
  uint64_t v127;
  __n128 v128;
  float32x4_t v129;
  __int128 v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int32x4_t v144;
  __int128 v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  char *v157;
  void *v158;
  void *v159;
  uint64_t v160;
  void *v161;
  std::ios_base::failure *v162;
  const std::error_category *v163;
  std::ios_base::failure *v164;
  const std::error_category *v165;
  std::ios_base::failure *exception;
  std::ios_base::failure *v167;
  const std::error_category *v168;
  const std::error_category *v169;
  uint64_t v170;
  char *v171;
  unsigned int v172;
  __int128 v173;
  __int128 v174;
  __int128 v178;
  char *v179;
  void *v180[2];
  uint64_t v181;
  __int128 v182;
  __int128 v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  uint64_t v199;
  uint64_t v200;
  int v201;
  uint64_t v202;
  int v203;
  void *v204[3];
  std::string v205;
  void *v206[2];
  uint64_t v207;
  __int128 v208;
  __int128 v209;
  int v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  uint64_t (**v214)();
  void *v215;
  int v216;
  __int128 v217;
  int v218;
  _QWORD v219[6];
  _QWORD v220[4];
  uint64_t v221;
  uint64_t v222;
  int v223;
  uint64_t v224;
  uint64_t v225;
  int v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  uint64_t v230;
  int v231;
  std::error_code __ec;
  std::string __msg;
  std::string __dst;
  void *v235;
  char *v236;
  uint64_t v237;
  void *__p[2];
  void *v239[4];
  void *v240[4];
  int v241;
  __int128 v242;
  __int128 v243;
  int v244;
  __int128 v245;
  int v246;
  uint64_t v247;
  _BYTE v248[392];
  _BYTE v249[160];
  std::string v250;
  _BYTE v251[56];
  uint64_t v252;

  v252 = *MEMORY[0x24BDAC8D0];
  v206[0] = 0;
  v206[1] = 0;
  v207 = 0;
  BYTE8(v208) = 0;
  BYTE4(v209) = 0;
  *((_QWORD *)&v209 + 1) = 0;
  v210 = 0;
  v211 = 0;
  v212 = 0;
  v213 = 0;
  v214 = &off_24CA000E0;
  v215 = 0;
  v216 = 10;
  LOWORD(v220[0]) = 0;
  v230 = 0;
  v231 = 0;
  v217 = 0uLL;
  v218 = 0;
  memset(v219, 0, 44);
  memset((char *)v220 + 4, 0, 24);
  v223 = 0;
  v221 = 0;
  v222 = 0;
  v226 = 0;
  v224 = 0;
  v225 = 0;
  v229 = 0;
  v227 = 0;
  v228 = 0;
  *(_OWORD *)&v205.__r_.__value_.__l.__data_ = 0uLL;
  v6 = *(unsigned __int8 *)(a1 + 23);
  if ((v6 & 0x80u) == 0)
    v7 = (std::string *)a1;
  else
    v7 = *(std::string **)a1;
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a1 + 8);
  v205.__r_.__value_.__r.__words[2] = 0;
  sub_20E8A9678(&v205, v7, (std::string *)((char *)v7 + v6));
  HIBYTE(v204[2]) = 19;
  strcpy((char *)v204, "FreakMultiVladModel");
  sub_20E8B5480(&v245);
  if (*(_DWORD *)&v248[*(_QWORD *)(v245 - 24)])
  {
    exception = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
    if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0)
      sub_20E860C04(&__dst, v205.__r_.__value_.__l.__data_, v205.__r_.__value_.__l.__size_);
    else
      __dst = v205;
    sub_20E8B0848("Failed to open file at ", &__dst, (std::string *)__p);
    v168 = std::iostream_category();
    __msg.__r_.__value_.__r.__words[0] = 1;
    __msg.__r_.__value_.__l.__size_ = (std::string::size_type)v168;
    std::ios_base::failure::failure(exception, (const std::string *)__p, (const std::error_code *)&__msg);
    __cxa_throw(exception, MEMORY[0x24BEDB710], MEMORY[0x24BEDB570]);
  }
  __msg.__r_.__value_.__r.__words[0] = 1;
  sub_20E9EECEC(&__dst, (uint64_t *)&__msg, (uint64_t)&v245, 0x2800uLL);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C9B0298;
  __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_24C9B03E0;
  __p[1] = 0;
  __p[0] = 0;
  v239[0] = 0;
  sub_20E9EE280(v237, (std::string *)__p);
  v8 = (void *)HIBYTE(v239[0]);
  if (SHIBYTE(v239[0]) < 0)
    v8 = __p[1];
  if (v8 != (void *)19)
    goto LABEL_248;
  v9 = __p;
  if (SHIBYTE(v239[0]) < 0)
    v9 = (void **)__p[0];
  v10 = *v9;
  v11 = v9[1];
  v12 = *(void **)((char *)v9 + 11);
  v13 = v204[0] == v10 && v204[1] == v11;
  if (!v13 || *(void **)((char *)&v204[1] + 3) != v12)
  {
LABEL_248:
    v162 = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
    std::operator+<char>();
    v163 = std::iostream_category();
    *(_QWORD *)&__ec.__val_ = 1;
    __ec.__cat_ = v163;
    std::ios_base::failure::failure(v162, &__msg, &__ec);
    __cxa_throw(v162, MEMORY[0x24BEDB710], MEMORY[0x24BEDB570]);
  }
  if (SHIBYTE(v239[0]) < 0)
    operator delete(__p[0]);
  *(_QWORD *)v251 = 0;
  *(_OWORD *)&v250.__r_.__value_.__r.__words[1] = 0uLL;
  *(_QWORD *)&v251[8] = 0xA00000010;
  v251[36] = 0;
  *(_QWORD *)&v251[40] = 0;
  *(_DWORD *)&v251[48] = 0;
  *(_QWORD *)&v251[16] = 0;
  v251[24] = 0;
  LODWORD(__msg.__r_.__value_.__l.__data_) = 3;
  sub_20E9EDADC(v237, &__msg);
  data = __msg.__r_.__value_.__l.__data_;
  if (LODWORD(__msg.__r_.__value_.__l.__data_) >= 2)
    sub_20E90A71C(&__dst.__r_.__value_.__r.__words[2]);
  if (data >= 3)
    v16 = 3;
  else
    v16 = data;
  if (v16 < 2)
  {
    memset(&__msg, 0, sizeof(__msg));
    sub_20F42FBCC((uint64_t)&__dst, (uint64_t)&__msg);
    v239[0] = 0;
    __p[1] = 0;
    v239[1] = 0;
    size = __msg.__r_.__value_.__l.__size_;
    v20 = __msg.__r_.__value_.__r.__words[0];
    v21 = __msg.__r_.__value_.__l.__size_ - __msg.__r_.__value_.__r.__words[0];
    v172 = data;
    if (__msg.__r_.__value_.__l.__size_ == __msg.__r_.__value_.__r.__words[0])
    {
      v171 = 0;
      v32 = 0;
      v23 = 0;
    }
    else
    {
      v22 = 0xAAAAAAAAAAAAAAABLL * (v21 >> 3);
      if (v22 >= 0xAAAAAAAAAAAAAABLL)
        sub_20E867F44();
      v170 = a2;
      v23 = (char *)operator new(v21);
      v24 = 0;
      __p[1] = v23;
      v171 = &v23[24 * v22];
      v239[1] = v171;
      do
      {
        v26 = &v23[v24];
        v27 = v20 + v24;
        *(_QWORD *)v26 = 0;
        *((_QWORD *)v26 + 1) = 0;
        *((_QWORD *)v26 + 2) = 0;
        v29 = *(_BYTE **)(v20 + v24);
        v28 = *(_BYTE **)(v20 + v24 + 8);
        v30 = v28 - v29;
        if (v28 != v29)
        {
          if (v30 < 0)
            sub_20E92CED8();
          v31 = (char *)operator new(v28 - v29);
          *(_QWORD *)v26 = v31;
          *((_QWORD *)v26 + 1) = v31;
          v25 = &v31[64 * (v30 >> 6)];
          *((_QWORD *)v26 + 2) = v25;
          memcpy(v31, v29, v30);
          *((_QWORD *)v26 + 1) = v25;
        }
        v24 += 24;
      }
      while (v27 + 24 != size);
      v32 = (std::string::size_type)&v23[v24];
      v239[0] = &v23[v24];
      a2 = v170;
    }
    *(_OWORD *)&v239[2] = 0xA00000010uLL;
    BYTE4(v240[1]) = 0;
    v240[2] = 0;
    LODWORD(v240[3]) = 0;
    LOBYTE(v240[0]) = 0;
    v33 = v250.__r_.__value_.__l.__size_;
    if (v250.__r_.__value_.__l.__size_)
    {
      v34 = v250.__r_.__value_.__r.__words[2];
      v35 = (void *)v250.__r_.__value_.__l.__size_;
      if (v250.__r_.__value_.__r.__words[2] != v250.__r_.__value_.__l.__size_)
      {
        v36 = v250.__r_.__value_.__r.__words[2];
        do
        {
          v38 = *(void **)(v36 - 24);
          v36 -= 24;
          v37 = v38;
          if (v38)
          {
            *(_QWORD *)(v34 - 16) = v37;
            operator delete(v37);
          }
          v34 = v36;
        }
        while (v36 != v33);
        v35 = (void *)v250.__r_.__value_.__l.__size_;
      }
      v250.__r_.__value_.__r.__words[2] = v33;
      operator delete(v35);
      v20 = __msg.__r_.__value_.__r.__words[0];
    }
    v250.__r_.__value_.__l.__size_ = (std::string::size_type)v23;
    v250.__r_.__value_.__r.__words[2] = v32;
    *(_QWORD *)v251 = v171;
    *(_OWORD *)&v251[8] = *(_OWORD *)&v239[2];
    *(_OWORD *)&v251[24] = *(_OWORD *)v240;
    *(_OWORD *)&v251[36] = *(_OWORD *)((char *)&v240[1] + 4);
    data = v172;
    if (v20)
    {
      v39 = __msg.__r_.__value_.__l.__size_;
      v40 = (void *)v20;
      if (__msg.__r_.__value_.__l.__size_ != v20)
      {
        v41 = __msg.__r_.__value_.__l.__size_;
        do
        {
          v43 = *(void **)(v41 - 24);
          v41 -= 24;
          v42 = v43;
          if (v43)
          {
            *(_QWORD *)(v39 - 16) = v42;
            operator delete(v42);
          }
          v39 = v41;
        }
        while (v41 != v20);
        v40 = (void *)__msg.__r_.__value_.__r.__words[0];
      }
      __msg.__r_.__value_.__l.__size_ = v20;
      operator delete(v40);
    }
  }
  else
  {
    LODWORD(__msg.__r_.__value_.__l.__data_) = 1;
    sub_20E9EDADC(v237, &__msg);
    sub_20F42FBCC((uint64_t)&__dst, (uint64_t)&v250.__r_.__value_.__l.__size_);
    LODWORD(__msg.__r_.__value_.__l.__data_) = 1;
    sub_20E9EDADC(v237, &__msg);
    sub_20E90A71C(&__dst.__r_.__value_.__r.__words[2]);
    sub_20E9EDADC(v237, &v251[8]);
    sub_20E9EDADC(v237, &v251[12]);
    sub_20E9EDADC(v237, &v251[16]);
    sub_20E9EDADC(v237, &v251[20]);
    v17 = v236;
    v18 = *((_QWORD *)v17 - 2)
        - (*(uint64_t (**)(uint64_t))(__dst.__r_.__value_.__r.__words[2] + 32))((uint64_t)&__dst.__r_.__value_.__r.__words[2])
        + *((_QWORD *)v17 - 1);
    if (v18)
      (*(void (**)(uint64_t, unint64_t))(__dst.__r_.__value_.__r.__words[2] + 40))((uint64_t)&__dst.__r_.__value_.__r.__words[2], v18);
    v236 -= 16;
    if (v16 != 2)
    {
      __msg.__r_.__value_.__s.__data_[0] = 0;
      sub_20E9ED7B4(v237, &__msg);
      if (__msg.__r_.__value_.__s.__data_[0])
      {
        if (!v251[36])
        {
          *(_DWORD *)&v251[32] = 0;
          *(_QWORD *)&v251[24] = 0;
          v251[36] = 1;
        }
        sub_20E9EDADC(v237, &v251[24]);
        sub_20E9EDADC(v237, &v251[28]);
        sub_20E9EDADC(v237, &v251[32]);
      }
      else if (v251[36])
      {
        v251[36] = 0;
      }
      sub_20E9EDADC(v237, &v251[40]);
      sub_20E9EDADC(v237, &v251[44]);
      sub_20E9EDADC(v237, &v251[48]);
    }
  }
  if (data >= 2)
  {
    v44 = v236;
    v18 = *((_QWORD *)v44 - 2)
        - (*(uint64_t (**)(uint64_t))(__dst.__r_.__value_.__r.__words[2] + 32))((uint64_t)&__dst.__r_.__value_.__r.__words[2])
        + *((_QWORD *)v44 - 1);
    if (v18)
      (*(void (**)(uint64_t, unint64_t))(__dst.__r_.__value_.__r.__words[2] + 40))((uint64_t)&__dst.__r_.__value_.__r.__words[2], v18);
    v236 -= 16;
  }
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C9B71C0;
  __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_24C9B7308;
  v45 = v237;
  v237 = 0;
  if (v45)
  {
    sub_20E9EF740((_QWORD *)(v45 + 8));
    MEMORY[0x212BC6398](v45, 0x10F2C40853B94B7);
  }
  __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)off_24C9B7428;
  if (v235)
  {
    v236 = (char *)v235;
    operator delete(v235);
  }
  v46 = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)&v245 = v46;
  v47 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
  *(_QWORD *)((char *)&v245 + *(_QWORD *)(v46 - 24)) = v47;
  MEMORY[0x212BC5B4C](&v246, v18);
  std::istream::~istream();
  MEMORY[0x212BC6290](v249);
  *(_QWORD *)&v48 = *(unsigned int *)&v251[8];
  *((_QWORD *)&v48 + 1) = *(unsigned int *)&v251[12];
  v245 = v48;
  v246 = 1;
  v247 = *(_QWORD *)&v251[16];
  v248[0] = 1;
  sub_20F42B8C8((char ***)&v250.__r_.__value_.__l.__size_, &v245, (char **)v180);
  if (v251[36])
  {
    *((_QWORD *)&v182 + 1) = *(_QWORD *)&v251[24];
    LODWORD(v183) = *(_DWORD *)&v251[32];
    if (!BYTE4(v183))
      BYTE4(v183) = 1;
  }
  *((_QWORD *)&v183 + 1) = *(_QWORD *)&v251[40];
  LODWORD(v184) = *(_DWORD *)&v251[48];
  v49 = (char *)v206[0];
  if (v206[0])
  {
    v50 = (char *)v206[1];
    v51 = v206[0];
    if (v206[1] != v206[0])
    {
      do
      {
        v52 = (void *)*((_QWORD *)v50 - 3);
        if (v52)
        {
          *((_QWORD *)v50 - 2) = v52;
          operator delete(v52);
        }
        v53 = *((_QWORD *)v50 - 7);
        if (v53)
          MEMORY[0x212BC6368](v53, 0x1000C80BDFB0063);
        v54 = (void *)*((_QWORD *)v50 - 14);
        if (v54)
        {
          *((_QWORD *)v50 - 13) = v54;
          operator delete(v54);
        }
        v50 -= 112;
      }
      while (v50 != v49);
      v51 = v206[0];
    }
    v206[1] = v49;
    operator delete(v51);
  }
  *(_OWORD *)v206 = *(_OWORD *)v180;
  v207 = v181;
  v180[0] = 0;
  v180[1] = 0;
  v208 = v182;
  v209 = v183;
  v210 = v184;
  v55 = v211;
  v56 = v185;
  v57 = v186;
  v181 = 0;
  v185 = v211;
  v186 = v212;
  v211 = v56;
  v212 = v57;
  v213 = v187;
  LODWORD(v187) = 0;
  if (v185)
  {
    MEMORY[0x212BC6368](v55, 0x1000C8052888210);
    v58 = (char *)v180[0];
    if (v180[0])
    {
      v59 = (char *)v180[1];
      v60 = v180[0];
      if (v180[1] != v180[0])
      {
        do
        {
          v61 = (void *)*((_QWORD *)v59 - 3);
          if (v61)
          {
            *((_QWORD *)v59 - 2) = v61;
            operator delete(v61);
          }
          v62 = *((_QWORD *)v59 - 7);
          if (v62)
            MEMORY[0x212BC6368](v62, 0x1000C80BDFB0063);
          v63 = (void *)*((_QWORD *)v59 - 14);
          if (v63)
          {
            *((_QWORD *)v59 - 13) = v63;
            operator delete(v63);
          }
          v59 -= 112;
        }
        while (v59 != v58);
        v60 = v180[0];
      }
      v180[1] = v58;
      operator delete(v60);
    }
  }
  v64 = v250.__r_.__value_.__l.__size_;
  if (v250.__r_.__value_.__l.__size_)
  {
    v65 = v250.__r_.__value_.__r.__words[2];
    v66 = (void *)v250.__r_.__value_.__l.__size_;
    if (v250.__r_.__value_.__r.__words[2] != v250.__r_.__value_.__l.__size_)
    {
      v67 = v250.__r_.__value_.__r.__words[2];
      do
      {
        v69 = *(void **)(v67 - 24);
        v67 -= 24;
        v68 = v69;
        if (v69)
        {
          *(_QWORD *)(v65 - 16) = v68;
          operator delete(v68);
        }
        v65 = v67;
      }
      while (v67 != v64);
      v66 = (void *)v250.__r_.__value_.__l.__size_;
    }
    v250.__r_.__value_.__r.__words[2] = v64;
    operator delete(v66);
  }
  if (SHIBYTE(v204[2]) < 0)
  {
    operator delete(v204[0]);
    if ((SHIBYTE(v205.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_110;
  }
  else if ((SHIBYTE(v205.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_110;
  }
  operator delete(v205.__r_.__value_.__l.__data_);
LABEL_110:
  memset(&v205, 0, sizeof(v205));
  v70 = *(unsigned __int8 *)(a2 + 23);
  if ((v70 & 0x80u) == 0)
    v71 = (std::string *)a2;
  else
    v71 = *(std::string **)a2;
  if ((v70 & 0x80u) != 0)
    v70 = *(_QWORD *)(a2 + 8);
  sub_20E8A9678(&v205, v71, (std::string *)((char *)v71 + v70));
  HIBYTE(v204[2]) = 8;
  strcpy((char *)v204, "PcaModel");
  sub_20E8B5480(&v245);
  if (*(_DWORD *)&v248[*(_QWORD *)(v245 - 24)])
  {
    v167 = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
    if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0)
      sub_20E860C04(&__dst, v205.__r_.__value_.__l.__data_, v205.__r_.__value_.__l.__size_);
    else
      __dst = v205;
    sub_20E8B0848("Failed to open file at ", &__dst, &v250);
    v169 = std::iostream_category();
    __msg.__r_.__value_.__r.__words[0] = 1;
    __msg.__r_.__value_.__l.__size_ = (std::string::size_type)v169;
    std::ios_base::failure::failure(v167, &v250, (const std::error_code *)&__msg);
    __cxa_throw(v167, MEMORY[0x24BEDB710], MEMORY[0x24BEDB570]);
  }
  __msg.__r_.__value_.__r.__words[0] = 1;
  sub_20E9EECEC(&__dst, (uint64_t *)&__msg, (uint64_t)&v245, 0x2800uLL);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C9B0298;
  __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_24C9B03E0;
  memset(&v250, 0, sizeof(v250));
  sub_20E9EE280(v237, &v250);
  v72 = HIBYTE(v250.__r_.__value_.__r.__words[2]);
  if ((v250.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v72 = v250.__r_.__value_.__l.__size_;
  if (v72 != 8)
    goto LABEL_249;
  v73 = &v250;
  if ((v250.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v73 = (std::string *)v250.__r_.__value_.__r.__words[0];
  if (v204[0] != v73->__r_.__value_.__l.__data_)
  {
LABEL_249:
    v164 = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
    std::operator+<char>();
    v165 = std::iostream_category();
    *(_QWORD *)&__ec.__val_ = 1;
    __ec.__cat_ = v165;
    std::ios_base::failure::failure(v164, &__msg, &__ec);
    __cxa_throw(v164, MEMORY[0x24BEDB710], MEMORY[0x24BEDB570]);
  }
  if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v250.__r_.__value_.__l.__data_);
  *(_OWORD *)__p = 0u;
  memset(v239, 0, sizeof(v239));
  memset(v240, 0, sizeof(v240));
  v242 = 0u;
  v243 = 0u;
  v241 = 0;
  v244 = 0;
  LODWORD(__msg.__r_.__value_.__l.__data_) = 4;
  sub_20E9EDADC(v237, &__msg);
  v74 = __msg.__r_.__value_.__l.__data_;
  if (LODWORD(__msg.__r_.__value_.__l.__data_) < 2)
  {
    memset(v251, 0, sizeof(v251));
    *(_OWORD *)&v250.__r_.__value_.__r.__words[1] = 0u;
    sub_20E9EDADC(v237, &v250);
    sub_20E9EDADC(v237, (_DWORD *)v250.__r_.__value_.__r.__words + 1);
    v78 = (uint64_t)(v250.__r_.__value_.__r.__words[2] - v250.__r_.__value_.__l.__size_) >> 2;
    if (LODWORD(v250.__r_.__value_.__l.__data_) <= v78)
    {
      if (LODWORD(v250.__r_.__value_.__l.__data_) < v78)
        v250.__r_.__value_.__r.__words[2] = v250.__r_.__value_.__l.__size_
                                          + 4 * LODWORD(v250.__r_.__value_.__l.__data_);
    }
    else
    {
      sub_20E9F5694((uint64_t)&v250.__r_.__value_.__l.__size_, LODWORD(v250.__r_.__value_.__l.__data_) - v78);
    }
    v85 = HIDWORD(v250.__r_.__value_.__r.__words[0]);
    v86 = (uint64_t)(*(_QWORD *)&v251[16] - *(_QWORD *)&v251[8]) >> 2;
    if (HIDWORD(v250.__r_.__value_.__r.__words[0]) <= v86)
    {
      if (HIDWORD(v250.__r_.__value_.__r.__words[0]) < v86)
        *(_QWORD *)&v251[16] = *(_QWORD *)&v251[8] + 4 * HIDWORD(v250.__r_.__value_.__r.__words[0]);
    }
    else
    {
      sub_20E9F5694((uint64_t)&v251[8], HIDWORD(v250.__r_.__value_.__r.__words[0]) - v86);
      v85 = HIDWORD(v250.__r_.__value_.__r.__words[0]);
    }
    v87 = (LODWORD(v250.__r_.__value_.__l.__data_) * v85);
    v88 = (uint64_t)(*(_QWORD *)&v251[40] - *(_QWORD *)&v251[32]) >> 2;
    if (v87 <= v88)
    {
      if (v87 < v88)
        *(_QWORD *)&v251[40] = *(_QWORD *)&v251[32] + 4 * v87;
    }
    else
    {
      sub_20E9F5694((uint64_t)&v251[32], v87 - v88);
    }
    sub_20E9EE41C(v237, (float **)&v250.__r_.__value_.__l.__size_);
    sub_20E9EE41C(v237, (float **)&v251[8]);
    sub_20E9EE41C(v237, (float **)&v251[32]);
    v89 = *(_OWORD *)&v250.__r_.__value_.__r.__words[1];
    *(_OWORD *)&v250.__r_.__value_.__r.__words[1] = 0uLL;
    v90 = *(void **)v251;
    v91 = *(void **)&v251[24];
    memset(v251, 0, sizeof(v251));
    v174 = *(_OWORD *)&v251[8];
    v178 = *(_OWORD *)&v251[32];
    v92 = *(void **)&v251[48];
    v93 = (void *)v250.__r_.__value_.__r.__words[0];
    if (__p[0])
    {
      __p[1] = __p[0];
      v173 = v89;
      operator delete(__p[0]);
      v89 = v173;
    }
    *(_OWORD *)__p = v89;
    v239[0] = v90;
    if (v239[1])
    {
      v239[2] = v239[1];
      operator delete(v239[1]);
    }
    *(_OWORD *)&v239[1] = v174;
    v239[3] = v91;
    if (v240[0])
    {
      v240[1] = v240[0];
      operator delete(v240[0]);
    }
    *(_OWORD *)v240 = v178;
    v240[2] = v92;
    v240[3] = v93;
    v241 = 0;
    if ((_QWORD)v242)
    {
      *((_QWORD *)&v242 + 1) = v242;
      operator delete((void *)v242);
    }
    v244 = 0;
    v242 = 0u;
    v243 = 0u;
    if (*(_QWORD *)&v251[32])
    {
      *(_QWORD *)&v251[40] = *(_QWORD *)&v251[32];
      operator delete(*(void **)&v251[32]);
    }
    if (*(_QWORD *)&v251[8])
    {
      *(_QWORD *)&v251[16] = *(_QWORD *)&v251[8];
      operator delete(*(void **)&v251[8]);
    }
    if (v250.__r_.__value_.__l.__size_)
    {
      v250.__r_.__value_.__r.__words[2] = v250.__r_.__value_.__l.__size_;
      operator delete((void *)v250.__r_.__value_.__l.__size_);
    }
  }
  else
  {
    __msg.__r_.__value_.__r.__words[0] = ((char *)__p[1] - (char *)__p[0]) >> 2;
    sub_20E9EDE6C(v237, &__msg);
    v75 = (char *)__p[1];
    v76 = (float *)__p[0];
    v77 = ((char *)__p[1] - (char *)__p[0]) >> 2;
    if (__msg.__r_.__value_.__r.__words[0] <= v77)
    {
      if (__msg.__r_.__value_.__r.__words[0] < v77)
      {
        v75 = (char *)__p[0] + 4 * __msg.__r_.__value_.__r.__words[0];
        __p[1] = v75;
      }
    }
    else
    {
      sub_20E9F5694((uint64_t)__p, __msg.__r_.__value_.__r.__words[0] - v77);
      v76 = (float *)__p[0];
      v75 = (char *)__p[1];
    }
    v79 = v237;
    v80 = v75 - (char *)v76;
    if (v80)
    {
      v81 = 4 * (v80 >> 2);
      do
      {
        sub_20E9EDF48(v79, v76++);
        v81 -= 4;
      }
      while (v81);
      v79 = v237;
    }
    __msg.__r_.__value_.__r.__words[0] = ((char *)v239[2] - (char *)v239[1]) >> 2;
    sub_20E9EDE6C(v79, &__msg);
    v82 = (char *)v239[2];
    v83 = (float *)v239[1];
    v84 = ((char *)v239[2] - (char *)v239[1]) >> 2;
    if (__msg.__r_.__value_.__r.__words[0] <= v84)
    {
      if (__msg.__r_.__value_.__r.__words[0] < v84)
      {
        v82 = (char *)v239[1] + 4 * __msg.__r_.__value_.__r.__words[0];
        v239[2] = v82;
      }
    }
    else
    {
      sub_20E9F5694((uint64_t)&v239[1], __msg.__r_.__value_.__r.__words[0] - v84);
      v83 = (float *)v239[1];
      v82 = (char *)v239[2];
    }
    v94 = v237;
    v95 = v82 - (char *)v83;
    if (v95)
    {
      v96 = 4 * (v95 >> 2);
      do
      {
        sub_20E9EDF48(v94, v83++);
        v96 -= 4;
      }
      while (v96);
      v94 = v237;
    }
    __msg.__r_.__value_.__r.__words[0] = ((char *)v240[1] - (char *)v240[0]) >> 2;
    sub_20E9EDE6C(v94, &__msg);
    v97 = (char *)v240[1];
    v98 = (float *)v240[0];
    v99 = ((char *)v240[1] - (char *)v240[0]) >> 2;
    if (__msg.__r_.__value_.__r.__words[0] <= v99)
    {
      if (__msg.__r_.__value_.__r.__words[0] < v99)
      {
        v97 = (char *)v240[0] + 4 * __msg.__r_.__value_.__r.__words[0];
        v240[1] = v97;
      }
    }
    else
    {
      sub_20E9F5694((uint64_t)v240, __msg.__r_.__value_.__r.__words[0] - v99);
      v98 = (float *)v240[0];
      v97 = (char *)v240[1];
    }
    v100 = v97 - (char *)v98;
    if (v100)
    {
      v101 = v237;
      v102 = 4 * (v100 >> 2);
      do
      {
        sub_20E9EDF48(v101, v98++);
        v102 -= 4;
      }
      while (v102);
    }
    LODWORD(v240[3]) = (unint64_t)((char *)__p[1] - (char *)__p[0]) >> 2;
    HIDWORD(v240[3]) = (unint64_t)((char *)v239[2] - (char *)v239[1]) >> 2;
    if (v74 >= 3)
    {
      sub_20E9EDF48(v237, (float *)&v241);
      __msg.__r_.__value_.__r.__words[0] = *((_QWORD *)&v242 + 1) - v242;
      sub_20E9EDE6C(v237, &__msg);
      v103 = __msg.__r_.__value_.__r.__words[0];
      v104 = (char *)*((_QWORD *)&v242 + 1);
      v105 = (char *)v242;
      v106 = *((_QWORD *)&v242 + 1) - v242;
      v107 = __msg.__r_.__value_.__r.__words[0] - (*((_QWORD *)&v242 + 1) - v242);
      if (__msg.__r_.__value_.__r.__words[0] <= *((_QWORD *)&v242 + 1) - (_QWORD)v242)
      {
        v111 = *((_QWORD *)&v242 + 1);
        if (__msg.__r_.__value_.__r.__words[0] >= *((_QWORD *)&v242 + 1) - (_QWORD)v242)
        {
LABEL_208:
          v124 = (_BYTE *)v242;
          v125 = v111 - v242;
          if (v111 != (_QWORD)v242)
          {
            v126 = v237;
            do
            {
              sub_20E9ED704(v126, v124++);
              --v125;
            }
            while (v125);
          }
          if (v74 != 3)
          {
            sub_20E9EDADC(v237, (_DWORD *)&v243 + 2);
            sub_20E9EDADC(v237, (_DWORD *)&v243 + 3);
            sub_20E9EDADC(v237, &v244);
          }
          goto LABEL_213;
        }
        v111 = v242 + __msg.__r_.__value_.__r.__words[0];
      }
      else
      {
        if ((_QWORD)v243 - *((_QWORD *)&v242 + 1) < v107)
        {
          if ((__msg.__r_.__value_.__r.__words[0] & 0x8000000000000000) != 0)
            sub_20F42FE78();
          v108 = 2 * (v243 - v242);
          if (v108 <= __msg.__r_.__value_.__r.__words[0])
            v108 = __msg.__r_.__value_.__r.__words[0];
          if ((_QWORD)v243 - (_QWORD)v242 >= 0x3FFFFFFFFFFFFFFFuLL)
            v109 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v109 = v108;
          v110 = (char *)operator new(v109);
          v179 = &v110[v109];
          v111 = (std::string::size_type)&v110[v103];
          v112 = &v110[v106];
          bzero(&v110[v106], v107);
          if (v104 == v105)
            goto LABEL_206;
          if (v106 >= 8 && (unint64_t)(v105 - v110) >= 0x20)
          {
            if (v106 < 0x20)
            {
              v113 = 0;
              goto LABEL_198;
            }
            v113 = v106 & 0xFFFFFFFFFFFFFFE0;
            v114 = v104 - 16;
            v115 = &v110[v104 - 16 - v105];
            v116 = v106 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v117 = *(_OWORD *)v114;
              *((_OWORD *)v115 - 1) = *((_OWORD *)v114 - 1);
              *(_OWORD *)v115 = v117;
              v115 -= 32;
              v114 -= 32;
              v116 -= 32;
            }
            while (v116);
            if (v106 == v113)
              goto LABEL_205;
            if ((v106 & 0x18) != 0)
            {
LABEL_198:
              v112 -= v106 & 0xFFFFFFFFFFFFFFF8;
              v118 = &v104[-v113 - 8];
              v119 = (char *)(v118 - v105);
              v120 = v113 - (v106 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                v121 = *(_QWORD *)v118;
                v118 -= 8;
                *(_QWORD *)&v119[(_QWORD)v110] = v121;
                v119 -= 8;
                v120 += 8;
              }
              while (v120);
              v104 -= v106 & 0xFFFFFFFFFFFFFFF8;
              if (v106 == (v106 & 0xFFFFFFFFFFFFFFF8))
                goto LABEL_205;
              goto LABEL_203;
            }
            v112 -= v113;
            v104 -= v113;
          }
LABEL_203:
          v122 = v112 - 1;
          do
          {
            v123 = *--v104;
            *v122-- = v123;
          }
          while (v104 != v105);
LABEL_205:
          v104 = v105;
          v112 = v110;
LABEL_206:
          *(_QWORD *)&v242 = v112;
          *((_QWORD *)&v242 + 1) = v111;
          *(_QWORD *)&v243 = v179;
          if (v104)
          {
            operator delete(v104);
            v111 = *((_QWORD *)&v242 + 1);
          }
          goto LABEL_208;
        }
        v111 = __msg.__r_.__value_.__r.__words[0] + v242;
        bzero(*((void **)&v242 + 1), __msg.__r_.__value_.__r.__words[0] - (*((_QWORD *)&v242 + 1) - v242));
      }
      *((_QWORD *)&v242 + 1) = v111;
      goto LABEL_208;
    }
  }
LABEL_213:
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C9B71C0;
  __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_24C9B7308;
  v127 = v237;
  v237 = 0;
  if (v127)
  {
    sub_20E9EF740((_QWORD *)(v127 + 8));
    MEMORY[0x212BC6398](v127, 0x10F2C40853B94B7);
  }
  __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)off_24C9B7428;
  if (v235)
  {
    v236 = (char *)v235;
    operator delete(v235);
  }
  *(_QWORD *)&v245 = v46;
  *(_QWORD *)((char *)&v245 + *(_QWORD *)(v46 - 24)) = v47;
  MEMORY[0x212BC5B4C](&v246);
  std::istream::~istream();
  v128.n128_f64[0] = MEMORY[0x212BC6290](v249);
  sub_20F431460((uint64_t)__p, (uint64_t)v180, v128, v129);
  v215 = v180[1];
  v216 = v181;
  v130 = v217;
  v217 = v182;
  v182 = v130;
  v218 = v183;
  v131 = v219[0];
  v132 = v219[1];
  v219[0] = *((_QWORD *)&v183 + 1);
  v219[1] = v184;
  *((_QWORD *)&v183 + 1) = v131;
  v184 = v132;
  v133 = v185;
  v134 = v219[4];
  v135 = v186;
  v185 = 0;
  v186 = v219[3];
  v219[3] = v135;
  v219[4] = v187;
  v187 = v134;
  LODWORD(v219[5]) = v188;
  v136 = v220[1];
  v137 = v220[2];
  v220[0] = v189;
  v220[1] = v190;
  v220[2] = v191;
  v190 = v136;
  v191 = v137;
  LODWORD(v220[3]) = v192;
  v138 = v221;
  v139 = v222;
  v221 = v193;
  v222 = v194;
  v193 = v138;
  v194 = v139;
  v223 = v195;
  v140 = v224;
  v141 = v225;
  v224 = v196;
  v225 = v197;
  v196 = v140;
  v197 = v141;
  v226 = v198;
  v142 = v227;
  v143 = v228;
  v227 = v199;
  v228 = v200;
  LODWORD(v183) = 0;
  v219[2] = v133;
  v188 = 0;
  v192 = 0;
  v195 = 0;
  v198 = 0;
  v199 = v142;
  v200 = v143;
  v229 = v201;
  v201 = 0;
  v231 = v203;
  v230 = v202;
  sub_20F42FE8C(v180);
  if ((_QWORD)v242)
  {
    *((_QWORD *)&v242 + 1) = v242;
    operator delete((void *)v242);
  }
  if (v240[0])
  {
    v240[1] = v240[0];
    operator delete(v240[0]);
  }
  if (v239[1])
  {
    v239[2] = v239[1];
    operator delete(v239[1]);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((SHIBYTE(v204[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v205.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_227;
LABEL_230:
    operator delete(v205.__r_.__value_.__l.__data_);
    if ((a3 & 1) == 0)
      goto LABEL_232;
    goto LABEL_231;
  }
  operator delete(v204[0]);
  if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_230;
LABEL_227:
  if ((a3 & 1) != 0)
LABEL_231:
    sub_20F4305A4((unint64_t)&v214, a4, v144);
LABEL_232:
  *(_OWORD *)a5 = *(_OWORD *)v206;
  v145 = v209;
  *(_OWORD *)(a5 + 24) = v208;
  *(_QWORD *)(a5 + 16) = v207;
  v206[0] = 0;
  v206[1] = 0;
  *(_OWORD *)(a5 + 40) = v145;
  *(_DWORD *)(a5 + 56) = v210;
  v147 = v211;
  v146 = v212;
  v211 = 0;
  v212 = 0;
  v207 = 0;
  *(_QWORD *)(a5 + 64) = v147;
  *(_QWORD *)(a5 + 72) = v146;
  *(_DWORD *)(a5 + 80) = v213;
  v213 = 0;
  v148 = v215;
  *(_DWORD *)(a5 + 104) = v216;
  *(_QWORD *)(a5 + 88) = &off_24CA000E0;
  *(_QWORD *)(a5 + 96) = v148;
  v149 = *((_QWORD *)&v217 + 1);
  *(_QWORD *)(a5 + 112) = v217;
  *(_QWORD *)(a5 + 120) = v149;
  v217 = 0uLL;
  *(_DWORD *)(a5 + 128) = v218;
  v218 = 0;
  *(_QWORD *)(a5 + 136) = v219[0];
  *(_OWORD *)(a5 + 144) = *(_OWORD *)&v219[1];
  memset(v219, 0, 32);
  v150 = v219[4];
  *(_QWORD *)(a5 + 160) = v219[3];
  *(_QWORD *)(a5 + 168) = v150;
  v219[4] = 0;
  *(_DWORD *)(a5 + 176) = v219[5];
  LODWORD(v219[5]) = 0;
  v151 = v220[1];
  *(_QWORD *)(a5 + 184) = v220[0];
  *(_QWORD *)(a5 + 192) = v151;
  *(_QWORD *)(a5 + 200) = v220[2];
  v220[1] = 0;
  v220[2] = 0;
  *(_DWORD *)(a5 + 208) = v220[3];
  LODWORD(v220[3]) = 0;
  v152 = v222;
  *(_QWORD *)(a5 + 216) = v221;
  *(_QWORD *)(a5 + 224) = v152;
  v221 = 0;
  v222 = 0;
  *(_DWORD *)(a5 + 232) = v223;
  v223 = 0;
  v153 = v225;
  *(_QWORD *)(a5 + 240) = v224;
  *(_QWORD *)(a5 + 248) = v153;
  v224 = 0;
  v225 = 0;
  *(_DWORD *)(a5 + 256) = v226;
  v226 = 0;
  v154 = v228;
  *(_QWORD *)(a5 + 264) = v227;
  *(_QWORD *)(a5 + 272) = v154;
  v227 = 0;
  v228 = 0;
  *(_DWORD *)(a5 + 280) = v229;
  v229 = 0;
  v155 = v230;
  *(_DWORD *)(a5 + 296) = v231;
  *(_QWORD *)(a5 + 288) = v155;
  *(_BYTE *)(a5 + 304) = 1;
  sub_20F42FE8C(&v214);
  if (v211)
    MEMORY[0x212BC6368](v211, 0x1000C8052888210);
  v156 = (char *)v206[0];
  if (v206[0])
  {
    v157 = (char *)v206[1];
    v158 = v206[0];
    if (v206[1] != v206[0])
    {
      do
      {
        v159 = (void *)*((_QWORD *)v157 - 3);
        if (v159)
        {
          *((_QWORD *)v157 - 2) = v159;
          operator delete(v159);
        }
        v160 = *((_QWORD *)v157 - 7);
        if (v160)
          MEMORY[0x212BC6368](v160, 0x1000C80BDFB0063);
        v161 = (void *)*((_QWORD *)v157 - 14);
        if (v161)
        {
          *((_QWORD *)v157 - 13) = v161;
          operator delete(v161);
        }
        v157 -= 112;
      }
      while (v157 != v156);
      v158 = v206[0];
    }
    v206[1] = v156;
    operator delete(v158);
  }
}

void sub_20F42DD1C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, _BYTE *a18, char *category, uint64_t a20,uint64_t a21,uint64_t a22,__int128 a23,uint64_t a24,int a25,uint64_t a26,int a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  void *v58;
  uint64_t v59;
  unsigned __int8 v61;
  int v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  size_t v66;
  const char *v67;
  unsigned __int8 v68;
  const char *v69;
  size_t v70;
  unint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  NSObject *v77;
  size_t v78;
  std::__shared_weak_count_vtbl *v79;
  std::__shared_weak_count *v80;
  std::__shared_weak_count *v81;
  unint64_t *p_shared_owners;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  void *v95;
  uint64_t *v96;
  uint64_t v97;
  _QWORD *v98;
  __int128 v99;
  int v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  _QWORD *v119;
  __int128 v120;
  int v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;

  if (!a2)
    _Unwind_Resume(a1);
  __cxa_free_exception(v58);
  sub_20E860ABC(&STACK[0x3A0]);
  if (a58 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  v61 = atomic_load((unsigned __int8 *)&qword_254A68998);
  if ((v61 & 1) == 0 && __cxa_guard_acquire(&qword_254A68998))
  {
    sub_21021D3D8(&STACK[0x320]);
    HIBYTE(a24) = 20;
    strcpy((char *)&a23, "cv3d.vio.recognition");
    sub_20E8C4068((uint64_t **)&STACK[0x320], (uint64_t)&a23, &qword_254A68990);
    if (SHIBYTE(a24) < 0)
      operator delete((void *)a23);
    __cxa_guard_release(&qword_254A68998);
  }
  __p = (void *)qword_254A68990;
  if (**(int **)(qword_254A68990 + 56) > 2
    || (v62 = *(unsigned __int8 *)(qword_254A68990 + 72),
        v63 = sub_20E8C31DC(qword_254A68990, "OSLogSurrogateAppender", 1, 0),
        v64 = v63,
        !v62)
    && !v63)
  {
LABEL_136:
    *a18 = 0;
    a18[304] = 0;
    __cxa_end_catch();
    JUMPOUT(0x20F42DA44);
  }
  *(_QWORD *)(v59 - 200) = &__p;
  *(std::chrono::steady_clock::time_point *)(v59 - 192) = std::chrono::steady_clock::now();
  *(std::chrono::system_clock::time_point *)(v59 - 184) = std::chrono::system_clock::now();
  *(_DWORD *)(v59 - 176) = 2;
  *(_QWORD *)(v59 - 168) = "unknown file";
  *(_DWORD *)(v59 - 160) = 55;
  *(_QWORD *)(v59 - 144) = 0;
  *(_QWORD *)(v59 - 136) = 0;
  *(_QWORD *)(v59 - 152) = "unknown function";
  v65 = **(_QWORD **)(v59 - 200);
  if (*(char *)(v65 + 39) < 0)
  {
    v67 = *(const char **)(v65 + 16);
    v66 = *(_QWORD *)(v65 + 24);
  }
  else
  {
    v66 = *(unsigned __int8 *)(v65 + 39);
    v67 = (const char *)(v65 + 16);
  }
  v68 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v68 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)&a23);
    if ((_BYTE)a25)
    {
      *(_OWORD *)byte_254A4A4F8 = a23;
      *(_QWORD *)&byte_254A4A4F8[16] = a24;
    }
    else
    {
      byte_254A4A4F8[23] = 14;
      strcpy(byte_254A4A4F8, "com.apple.cv3d");
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v69 = byte_254A4A4F8;
  else
    v69 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v70 = byte_254A4A4F8[23];
  else
    v70 = *(_QWORD *)&byte_254A4A4F8[8];
  STACK[0x320] = (unint64_t)os_log_create(v69, v67);
  v71 = &STACK[0x328];
  if (v70 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v70 >= 0x17)
  {
    v72 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v70 | 7) != 0x17)
      v72 = v70 | 7;
    v73 = v72 + 1;
    v71 = (unint64_t *)operator new(v72 + 1);
    STACK[0x338] = v73 | 0x8000000000000000;
    STACK[0x328] = (unint64_t)v71;
    STACK[0x330] = v70;
  }
  else
  {
    LOBYTE(STACK[0x33F]) = v70;
    if (!v70)
    {
LABEL_26:
      *((_BYTE *)v71 + v70) = 0;
      LOBYTE(STACK[0x340]) = 1;
      v74 = &STACK[0x348];
      if (v66 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v66 >= 0x17)
      {
        v75 = (v66 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v66 | 7) != 0x17)
          v75 = v66 | 7;
        v76 = v75 + 1;
        v74 = (unint64_t *)operator new(v75 + 1);
        STACK[0x358] = v76 | 0x8000000000000000;
        STACK[0x348] = (unint64_t)v74;
        STACK[0x350] = v66;
      }
      else
      {
        LOBYTE(STACK[0x35F]) = v66;
        if (!v66)
        {
LABEL_34:
          *((_BYTE *)v74 + v66) = 0;
          LOBYTE(STACK[0x360]) = 1;
          v77 = STACK[0x320];
          if (SLOBYTE(STACK[0x35F]) < 0)
            operator delete((void *)STACK[0x348]);
          if (LOBYTE(STACK[0x340]) && SLOBYTE(STACK[0x33F]) < 0)
            operator delete((void *)STACK[0x328]);
          if (STACK[0x320])
            os_release((void *)STACK[0x320]);
          if (v64 && *(_QWORD *)(v64 + 24))
          {
            v78 = _os_log_pack_size();
            v79 = (std::__shared_weak_count_vtbl *)operator new(v78, (std::align_val_t)8uLL);
            v80 = (std::__shared_weak_count *)operator new();
            v81 = v80;
            v80->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v80->__shared_owners_;
            v80->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v80->__shared_weak_owners_ = 0;
            v80[1].__vftable = v79;
            do
              v83 = __ldxr(p_shared_owners);
            while (__stxr(v83 + 1, p_shared_owners));
            do
              v84 = __ldaxr(p_shared_owners);
            while (__stlxr(v84 - 1, p_shared_owners));
            if (!v84)
            {
              ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
              std::__shared_weak_count::__release_weak(v81);
            }
            *(_WORD *)_os_log_pack_fill() = 0;
            v85 = operator new();
            v86 = *(unsigned __int8 *)(v65 + 39);
            v87 = v65 + 16;
            if ((v86 & 0x80u) != 0)
            {
              v87 = *(_QWORD *)(v65 + 16);
              v86 = *(_QWORD *)(v65 + 24);
            }
            *(_QWORD *)v85 = v79;
            *(_QWORD *)(v85 + 8) = v79;
            *(_QWORD *)(v85 + 16) = v81;
            *(_QWORD *)(v85 + 24) = 0;
            *(_QWORD *)(v85 + 32) = 0;
            *(_QWORD *)(v85 + 40) = v87;
            *(_QWORD *)(v85 + 48) = v86;
            *(_BYTE *)(v85 + 56) = 2;
            STACK[0x320] = v85;
            (*(void (**)(_QWORD, unint64_t *))(**(_QWORD **)(v64 + 24) + 40))(*(_QWORD *)(v64 + 24), &STACK[0x320]);
            v88 = STACK[0x320];
            STACK[0x320] = 0;
            if (v88)
            {
              v89 = *(std::__shared_weak_count **)(v88 + 32);
              if (v89)
              {
                v90 = (unint64_t *)&v89->__shared_owners_;
                do
                  v91 = __ldaxr(v90);
                while (__stlxr(v91 - 1, v90));
                if (!v91)
                {
                  ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
                  std::__shared_weak_count::__release_weak(v89);
                }
              }
              v92 = *(std::__shared_weak_count **)(v88 + 16);
              if (v92)
              {
                v93 = (unint64_t *)&v92->__shared_owners_;
                do
                  v94 = __ldaxr(v93);
                while (__stlxr(v94 - 1, v93));
                if (!v94)
                {
                  ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                  std::__shared_weak_count::__release_weak(v92);
                }
              }
              MEMORY[0x212BC6398](v88, 0x10F0C40B62ED6C6);
            }
          }
          else
          {
            os_log_type_enabled(v77, OS_LOG_TYPE_DEBUG);
            LOWORD(a23) = 0;
            v95 = (void *)_os_log_send_and_compose_impl();
            if (v95)
              free(v95);
          }
          if (v62)
          {
            sub_20E8C003C(v59 - 200, "Fail to load PCA data.");
            v96 = *(uint64_t **)(v59 - 200);
            if (!v96 || (v97 = *(_QWORD *)(v59 - 144)) == 0)
            {
LABEL_119:
              v138 = *(std::__shared_weak_count **)(v59 - 136);
              if (v138)
              {
                v139 = (unint64_t *)&v138->__shared_owners_;
                do
                  v140 = __ldaxr(v139);
                while (__stlxr(v140 - 1, v139));
                if (!v140)
                {
                  ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                  std::__shared_weak_count::__release_weak(v138);
                }
              }
              goto LABEL_136;
            }
            v98 = (_QWORD *)(*v96 + 16);
            if (*(char *)(*v96 + 39) < 0)
              v98 = (_QWORD *)*v98;
            v99 = *(_OWORD *)(v59 - 192);
            v100 = *(_DWORD *)(v59 - 176);
            v101 = *(_QWORD *)(v59 - 168);
            v102 = *(_DWORD *)(v59 - 160);
            v103 = *(_QWORD *)(v59 - 152);
            v104 = *(std::__shared_weak_count **)(v59 - 136);
            if (v104)
            {
              v105 = (unint64_t *)&v104->__shared_owners_;
              do
                v106 = __ldxr(v105);
              while (__stxr(v106 + 1, v105));
            }
            *(_QWORD *)&a23 = v98;
            *(__int128 *)((char *)&a23 + 8) = v99;
            a25 = v100;
            a26 = v101;
            a27 = v102;
            a28 = v103;
            a29 = v97;
            a30 = (uint64_t)v104;
            if (v104)
            {
              v107 = (unint64_t *)&v104->__shared_owners_;
              do
                v108 = __ldxr(v107);
              while (__stxr(v108 + 1, v107));
            }
            v109 = v104;
            if (v100 >= **(_DWORD **)(*v96 + 56))
            {
              sub_20E8C3FC4(*v96, (uint64_t)&a23);
              v109 = (std::__shared_weak_count *)a30;
            }
            if (v109)
            {
              v110 = (unint64_t *)&v109->__shared_owners_;
              do
                v111 = __ldaxr(v110);
              while (__stlxr(v111 - 1, v110));
              if (!v111)
              {
                ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
                std::__shared_weak_count::__release_weak(v109);
              }
            }
            if (v104)
            {
              v112 = (unint64_t *)&v104->__shared_owners_;
              do
                v113 = __ldaxr(v112);
              while (__stlxr(v113 - 1, v112));
              if (!v113)
              {
                ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                std::__shared_weak_count::__release_weak(v104);
              }
            }
            v114 = *(std::__shared_weak_count **)(v59 - 136);
            *(_QWORD *)(v59 - 144) = 0;
            *(_QWORD *)(v59 - 136) = 0;
            if (v114)
            {
              v115 = (unint64_t *)&v114->__shared_owners_;
              do
                v116 = __ldaxr(v115);
              while (__stlxr(v116 - 1, v115));
              if (!v116)
              {
                ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
                std::__shared_weak_count::__release_weak(v114);
              }
            }
          }
          v117 = *(uint64_t **)(v59 - 200);
          if (v117)
          {
            v118 = *(_QWORD *)(v59 - 144);
            if (v118)
            {
              v119 = (_QWORD *)(*v117 + 16);
              if (*(char *)(*v117 + 39) < 0)
                v119 = (_QWORD *)*v119;
              v120 = *(_OWORD *)(v59 - 192);
              v121 = *(_DWORD *)(v59 - 176);
              v122 = *(_QWORD *)(v59 - 168);
              v123 = *(_DWORD *)(v59 - 160);
              v124 = *(_QWORD *)(v59 - 152);
              v125 = *(std::__shared_weak_count **)(v59 - 136);
              if (v125)
              {
                v126 = (unint64_t *)&v125->__shared_owners_;
                do
                  v127 = __ldxr(v126);
                while (__stxr(v127 + 1, v126));
              }
              *(_QWORD *)&a23 = v119;
              *(__int128 *)((char *)&a23 + 8) = v120;
              a25 = v121;
              a26 = v122;
              a27 = v123;
              a28 = v124;
              a29 = v118;
              a30 = (uint64_t)v125;
              if (v125)
              {
                v128 = (unint64_t *)&v125->__shared_owners_;
                do
                  v129 = __ldxr(v128);
                while (__stxr(v129 + 1, v128));
              }
              v130 = v125;
              if (v121 >= **(_DWORD **)(*v117 + 56))
              {
                sub_20E8C3FC4(*v117, (uint64_t)&a23);
                v130 = (std::__shared_weak_count *)a30;
              }
              if (v130)
              {
                v131 = (unint64_t *)&v130->__shared_owners_;
                do
                  v132 = __ldaxr(v131);
                while (__stlxr(v132 - 1, v131));
                if (!v132)
                {
                  ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
                  std::__shared_weak_count::__release_weak(v130);
                }
              }
              if (v125)
              {
                v133 = (unint64_t *)&v125->__shared_owners_;
                do
                  v134 = __ldaxr(v133);
                while (__stlxr(v134 - 1, v133));
                if (!v134)
                {
                  ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
                  std::__shared_weak_count::__release_weak(v125);
                }
              }
              v135 = *(std::__shared_weak_count **)(v59 - 136);
              *(_QWORD *)(v59 - 144) = 0;
              *(_QWORD *)(v59 - 136) = 0;
              if (v135)
              {
                v136 = (unint64_t *)&v135->__shared_owners_;
                do
                  v137 = __ldaxr(v136);
                while (__stlxr(v137 - 1, v136));
                if (!v137)
                {
                  ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
                  std::__shared_weak_count::__release_weak(v135);
                }
              }
            }
          }
          goto LABEL_119;
        }
      }
      memmove(v74, v67, v66);
      goto LABEL_34;
    }
  }
  memmove(v71, v69, v70);
  goto LABEL_26;
}

void sub_20F42F5D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,_QWORD *a22,_QWORD *a23,__int128 a24,int a25,uint64_t a26,int a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char *a56,char *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;
  uint64_t v64;
  uint64_t *v66;
  uint64_t v67;
  _QWORD *v68;
  __int128 v69;
  int v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *p_shared_owners;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  void *v93;
  uint64_t v94;
  void *v95;

  __cxa_guard_abort(&qword_254A4A510);
  v66 = *(uint64_t **)(v64 - 200);
  if (v66)
  {
    v67 = *(_QWORD *)(v64 - 144);
    if (v67)
    {
      v68 = (_QWORD *)(*v66 + 16);
      if (*(char *)(*v66 + 39) < 0)
        v68 = (_QWORD *)*v68;
      v69 = *(_OWORD *)(v64 - 192);
      v70 = *(_DWORD *)(v64 - 176);
      v71 = *(_QWORD *)(v64 - 168);
      v72 = *(_DWORD *)(v64 - 160);
      v73 = *(_QWORD *)(v64 - 152);
      v74 = *(std::__shared_weak_count **)(v64 - 136);
      if (v74)
      {
        p_shared_owners = (unint64_t *)&v74->__shared_owners_;
        do
          v76 = __ldxr(p_shared_owners);
        while (__stxr(v76 + 1, p_shared_owners));
      }
      a23 = v68;
      a24 = v69;
      a25 = v70;
      a26 = v71;
      a27 = v72;
      a28 = v73;
      a29 = v67;
      a30 = v74;
      if (v74)
      {
        v77 = (unint64_t *)&v74->__shared_owners_;
        do
          v78 = __ldxr(v77);
        while (__stxr(v78 + 1, v77));
      }
      v79 = v74;
      if (v70 >= **(_DWORD **)(*v66 + 56))
      {
        sub_20E8C3FC4(*v66, (uint64_t)&a23);
        v79 = a30;
      }
      if (v79)
      {
        v80 = (unint64_t *)&v79->__shared_owners_;
        do
          v81 = __ldaxr(v80);
        while (__stlxr(v81 - 1, v80));
        if (!v81)
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
      }
      if (v74)
      {
        v82 = (unint64_t *)&v74->__shared_owners_;
        do
          v83 = __ldaxr(v82);
        while (__stlxr(v83 - 1, v82));
        if (!v83)
        {
          ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
          std::__shared_weak_count::__release_weak(v74);
        }
      }
      v84 = *(std::__shared_weak_count **)(v64 - 136);
      *(_QWORD *)(v64 - 144) = 0;
      *(_QWORD *)(v64 - 136) = 0;
      if (v84)
      {
        v85 = (unint64_t *)&v84->__shared_owners_;
        do
          v86 = __ldaxr(v85);
        while (__stlxr(v86 - 1, v85));
        if (!v86)
        {
          ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
          std::__shared_weak_count::__release_weak(v84);
        }
      }
    }
  }
  v87 = *(std::__shared_weak_count **)(v64 - 136);
  if (v87)
  {
    v88 = (unint64_t *)&v87->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  __cxa_end_catch();
  sub_20F42FE8C(a22);
  if (a64)
    MEMORY[0x212BC6368](a64, 0x1000C8052888210);
  v90 = a56;
  if (!a56)
    _Unwind_Resume(a1);
  v91 = a57;
  v92 = a56;
  if (a57 != a56)
  {
    do
    {
      v93 = (void *)*((_QWORD *)v91 - 3);
      if (v93)
      {
        *((_QWORD *)v91 - 2) = v93;
        operator delete(v93);
      }
      v94 = *((_QWORD *)v91 - 7);
      if (v94)
        MEMORY[0x212BC6368](v94, 0x1000C80BDFB0063);
      v95 = (void *)*((_QWORD *)v91 - 14);
      if (v95)
      {
        *((_QWORD *)v91 - 13) = v95;
        operator delete(v95);
      }
      v91 -= 112;
    }
    while (v91 != v90);
    v92 = a56;
  }
  a57 = v90;
  operator delete(v92);
  _Unwind_Resume(a1);
}

void sub_20F42F5E8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_254A68998);
  __cxa_end_catch();
  JUMPOUT(0x20F42FA50);
}

void sub_20F42F614(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31)
{
  uint64_t v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;

  if (a2)
  {
    if (a31)
    {
      p_shared_owners = (unint64_t *)&a31->__shared_owners_;
      do
        v33 = __ldaxr(p_shared_owners);
      while (__stlxr(v33 - 1, p_shared_owners));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))a31->__on_zero_shared)(a31);
        std::__shared_weak_count::__release_weak(a31);
      }
    }
    if (v31)
    {
      v34 = (unint64_t *)(v31 + 8);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      JUMPOUT(0x20F42F66CLL);
    }
    JUMPOUT(0x20F42FA44);
  }
  JUMPOUT(0x20F42FA7CLL);
}

void sub_20F42F690(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_QWORD *a23,__int128 a24,int a25,uint64_t a26,int a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30)
{
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  _QWORD *v39;
  __int128 v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;

  v32 = a30;
  if (a30)
  {
    p_shared_owners = (unint64_t *)&a30->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (v30)
  {
    v35 = (unint64_t *)&v30->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v37 = *(uint64_t **)(v31 - 200);
  if (v37)
  {
    v38 = *(_QWORD *)(v31 - 144);
    if (v38)
    {
      v39 = (_QWORD *)(*v37 + 16);
      if (*(char *)(*v37 + 39) < 0)
        v39 = (_QWORD *)*v39;
      v40 = *(_OWORD *)(v31 - 192);
      v41 = *(_DWORD *)(v31 - 176);
      v42 = *(_QWORD *)(v31 - 168);
      v43 = *(_DWORD *)(v31 - 160);
      v44 = *(_QWORD *)(v31 - 152);
      v45 = *(std::__shared_weak_count **)(v31 - 136);
      if (v45)
      {
        v46 = (unint64_t *)&v45->__shared_owners_;
        do
          v47 = __ldxr(v46);
        while (__stxr(v47 + 1, v46));
      }
      a23 = v39;
      a24 = v40;
      a25 = v41;
      a26 = v42;
      a27 = v43;
      a28 = v44;
      a29 = v38;
      a30 = v45;
      if (v45)
      {
        v48 = (unint64_t *)&v45->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
      v50 = v45;
      if (v41 >= **(_DWORD **)(*v37 + 56))
      {
        sub_20E8C3FC4(*v37, (uint64_t)&a23);
        v50 = a30;
      }
      if (v50)
      {
        v51 = (unint64_t *)&v50->__shared_owners_;
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
      if (v45)
      {
        v53 = (unint64_t *)&v45->__shared_owners_;
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      v55 = *(std::__shared_weak_count **)(v31 - 136);
      *(_QWORD *)(v31 - 144) = 0;
      *(_QWORD *)(v31 - 136) = 0;
      if (v55)
      {
        v56 = (unint64_t *)&v55->__shared_owners_;
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
    }
  }
  v58 = *(std::__shared_weak_count **)(v31 - 136);
  if (v58)
  {
    v59 = (unint64_t *)&v58->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  JUMPOUT(0x20F42FA34);
}

void sub_20F42F7BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_QWORD *a23,__int128 a24,int a25,uint64_t a26,int a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30)
{
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  _QWORD *v34;
  __int128 v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;

  MEMORY[0x212BC6398](v30, 0x10D0C40B950D02ALL);
  v32 = *(uint64_t **)(v31 - 200);
  if (v32)
  {
    v33 = *(_QWORD *)(v31 - 144);
    if (v33)
    {
      v34 = (_QWORD *)(*v32 + 16);
      if (*(char *)(*v32 + 39) < 0)
        v34 = (_QWORD *)*v34;
      v35 = *(_OWORD *)(v31 - 192);
      v36 = *(_DWORD *)(v31 - 176);
      v37 = *(_QWORD *)(v31 - 168);
      v38 = *(_DWORD *)(v31 - 160);
      v39 = *(_QWORD *)(v31 - 152);
      v40 = *(std::__shared_weak_count **)(v31 - 136);
      if (v40)
      {
        p_shared_owners = (unint64_t *)&v40->__shared_owners_;
        do
          v42 = __ldxr(p_shared_owners);
        while (__stxr(v42 + 1, p_shared_owners));
      }
      a23 = v34;
      a24 = v35;
      a25 = v36;
      a26 = v37;
      a27 = v38;
      a28 = v39;
      a29 = v33;
      a30 = v40;
      if (v40)
      {
        v43 = (unint64_t *)&v40->__shared_owners_;
        do
          v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
      }
      v45 = v40;
      if (v36 >= **(_DWORD **)(*v32 + 56))
      {
        sub_20E8C3FC4(*v32, (uint64_t)&a23);
        v45 = a30;
      }
      if (v45)
      {
        v46 = (unint64_t *)&v45->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      if (v40)
      {
        v48 = (unint64_t *)&v40->__shared_owners_;
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      v50 = *(std::__shared_weak_count **)(v31 - 136);
      *(_QWORD *)(v31 - 144) = 0;
      *(_QWORD *)(v31 - 136) = 0;
      if (v50)
      {
        v51 = (unint64_t *)&v50->__shared_owners_;
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
    }
  }
  v53 = *(std::__shared_weak_count **)(v31 - 136);
  if (v53)
  {
    v54 = (unint64_t *)&v53->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  JUMPOUT(0x20F42FA34);
}

void sub_20F42F7DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_QWORD *a23,__int128 a24,int a25,uint64_t a26,int a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30)
{
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  _QWORD *v33;
  __int128 v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;

  v31 = *(uint64_t **)(v30 - 200);
  if (v31)
  {
    v32 = *(_QWORD *)(v30 - 144);
    if (v32)
    {
      v33 = (_QWORD *)(*v31 + 16);
      if (*(char *)(*v31 + 39) < 0)
        v33 = (_QWORD *)*v33;
      v34 = *(_OWORD *)(v30 - 192);
      v35 = *(_DWORD *)(v30 - 176);
      v36 = *(_QWORD *)(v30 - 168);
      v37 = *(_DWORD *)(v30 - 160);
      v38 = *(_QWORD *)(v30 - 152);
      v39 = *(std::__shared_weak_count **)(v30 - 136);
      if (v39)
      {
        p_shared_owners = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldxr(p_shared_owners);
        while (__stxr(v41 + 1, p_shared_owners));
      }
      a23 = v33;
      a24 = v34;
      a25 = v35;
      a26 = v36;
      a27 = v37;
      a28 = v38;
      a29 = v32;
      a30 = v39;
      if (v39)
      {
        v42 = (unint64_t *)&v39->__shared_owners_;
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
      }
      v44 = v39;
      if (v35 >= **(_DWORD **)(*v31 + 56))
      {
        sub_20E8C3FC4(*v31, (uint64_t)&a23);
        v44 = a30;
      }
      if (v44)
      {
        v45 = (unint64_t *)&v44->__shared_owners_;
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
      if (v39)
      {
        v47 = (unint64_t *)&v39->__shared_owners_;
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      v49 = *(std::__shared_weak_count **)(v30 - 136);
      *(_QWORD *)(v30 - 144) = 0;
      *(_QWORD *)(v30 - 136) = 0;
      if (v49)
      {
        v50 = (unint64_t *)&v49->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
    }
  }
  v52 = *(std::__shared_weak_count **)(v30 - 136);
  if (v52)
  {
    v53 = (unint64_t *)&v52->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  JUMPOUT(0x20F42FA34);
}

void sub_20F42F7E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_QWORD *a23,__int128 a24,int a25,uint64_t a26,int a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30)
{
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  _QWORD *v33;
  __int128 v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;

  v31 = *(uint64_t **)(v30 - 200);
  if (v31)
  {
    v32 = *(_QWORD *)(v30 - 144);
    if (v32)
    {
      v33 = (_QWORD *)(*v31 + 16);
      if (*(char *)(*v31 + 39) < 0)
        v33 = (_QWORD *)*v33;
      v34 = *(_OWORD *)(v30 - 192);
      v35 = *(_DWORD *)(v30 - 176);
      v36 = *(_QWORD *)(v30 - 168);
      v37 = *(_DWORD *)(v30 - 160);
      v38 = *(_QWORD *)(v30 - 152);
      v39 = *(std::__shared_weak_count **)(v30 - 136);
      if (v39)
      {
        p_shared_owners = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldxr(p_shared_owners);
        while (__stxr(v41 + 1, p_shared_owners));
      }
      a23 = v33;
      a24 = v34;
      a25 = v35;
      a26 = v36;
      a27 = v37;
      a28 = v38;
      a29 = v32;
      a30 = v39;
      if (v39)
      {
        v42 = (unint64_t *)&v39->__shared_owners_;
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
      }
      v44 = v39;
      if (v35 >= **(_DWORD **)(*v31 + 56))
      {
        sub_20E8C3FC4(*v31, (uint64_t)&a23);
        v44 = a30;
      }
      if (v44)
      {
        v45 = (unint64_t *)&v44->__shared_owners_;
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
      if (v39)
      {
        v47 = (unint64_t *)&v39->__shared_owners_;
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      v49 = *(std::__shared_weak_count **)(v30 - 136);
      *(_QWORD *)(v30 - 144) = 0;
      *(_QWORD *)(v30 - 136) = 0;
      if (v49)
      {
        v50 = (unint64_t *)&v49->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
    }
  }
  v52 = *(std::__shared_weak_count **)(v30 - 136);
  if (v52)
  {
    v53 = (unint64_t *)&v52->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  JUMPOUT(0x20F42FA34);
}

void sub_20F42F7F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_QWORD *a23,__int128 a24,int a25,uint64_t a26,int a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30)
{
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  _QWORD *v33;
  __int128 v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;

  if (LOBYTE(STACK[0x340]) && SLOBYTE(STACK[0x33F]) < 0)
    operator delete((void *)STACK[0x328]);
  if (STACK[0x320])
    os_release((void *)STACK[0x320]);
  v31 = *(uint64_t **)(v30 - 200);
  if (v31)
  {
    v32 = *(_QWORD *)(v30 - 144);
    if (v32)
    {
      v33 = (_QWORD *)(*v31 + 16);
      if (*(char *)(*v31 + 39) < 0)
        v33 = (_QWORD *)*v33;
      v34 = *(_OWORD *)(v30 - 192);
      v35 = *(_DWORD *)(v30 - 176);
      v36 = *(_QWORD *)(v30 - 168);
      v37 = *(_DWORD *)(v30 - 160);
      v38 = *(_QWORD *)(v30 - 152);
      v39 = *(std::__shared_weak_count **)(v30 - 136);
      if (v39)
      {
        p_shared_owners = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldxr(p_shared_owners);
        while (__stxr(v41 + 1, p_shared_owners));
      }
      a23 = v33;
      a24 = v34;
      a25 = v35;
      a26 = v36;
      a27 = v37;
      a28 = v38;
      a29 = v32;
      a30 = v39;
      if (v39)
      {
        v42 = (unint64_t *)&v39->__shared_owners_;
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
      }
      v44 = v39;
      if (v35 >= **(_DWORD **)(*v31 + 56))
      {
        sub_20E8C3FC4(*v31, (uint64_t)&a23);
        v44 = a30;
      }
      if (v44)
      {
        v45 = (unint64_t *)&v44->__shared_owners_;
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
      if (v39)
      {
        v47 = (unint64_t *)&v39->__shared_owners_;
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      v49 = *(std::__shared_weak_count **)(v30 - 136);
      *(_QWORD *)(v30 - 144) = 0;
      *(_QWORD *)(v30 - 136) = 0;
      if (v49)
      {
        v50 = (unint64_t *)&v49->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
    }
  }
  v52 = *(std::__shared_weak_count **)(v30 - 136);
  if (v52)
  {
    v53 = (unint64_t *)&v52->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  JUMPOUT(0x20F42FA34);
}

void sub_20F42F9B0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31)
{
  uint64_t v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;

  if (a2)
  {
    if (a31)
    {
      p_shared_owners = (unint64_t *)&a31->__shared_owners_;
      do
        v33 = __ldaxr(p_shared_owners);
      while (__stlxr(v33 - 1, p_shared_owners));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))a31->__on_zero_shared)(a31);
        std::__shared_weak_count::__release_weak(a31);
      }
    }
    if (v31)
    {
      v34 = (unint64_t *)(v31 + 8);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      JUMPOUT(0x20F42FA08);
    }
    JUMPOUT(0x20F42FA44);
  }
  JUMPOUT(0x20F42FA7CLL);
}

void sub_20F42FA3C(void *a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  JUMPOUT(0x20F42FA7CLL);
}

uint64_t sub_20F42FAF8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = *(void **)(a1 + 8);
    if (v3 != v2)
    {
      v5 = *(_QWORD *)(a1 + 16);
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_20F42FB6C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(_QWORD *)(a1 + 96) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(_QWORD *)(a1 + 56) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 24);
  if (v4)
  {
    *(_QWORD *)(a1 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v5;
    operator delete(v5);
  }
  return a1;
}

void sub_20F42FBCC(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  char **v5;
  char **v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  char **v17;
  char **v18;
  char *v19;
  char *v20;
  char **v21;
  char **v22;
  char *v23;
  char *v24;
  size_t v25;
  char **v26;
  char **v27;
  int64_t v28;
  char **v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;

  v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  sub_20E9EDE6C(*(_QWORD *)(a1 + 48), &v32);
  v4 = v32;
  v6 = *(char ***)a2;
  v5 = *(char ***)(a2 + 8);
  v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(_QWORD *)a2) >> 3);
  v8 = v32 - v7;
  if (v32 <= v7)
  {
    if (v32 >= v7)
    {
      v27 = *(char ***)a2;
      v28 = (char *)v5 - (char *)v27;
      if (v5 == v27)
        return;
      goto LABEL_32;
    }
    v21 = &v6[3 * v32];
    if (v5 != v21)
    {
      v22 = *(char ***)(a2 + 8);
      do
      {
        v24 = *(v22 - 3);
        v22 -= 3;
        v23 = v24;
        if (v24)
        {
          *(v5 - 2) = v23;
          operator delete(v23);
        }
        v5 = v22;
      }
      while (v22 != v21);
    }
    *(_QWORD *)(a2 + 8) = v21;
    v27 = *(char ***)a2;
    v28 = (char *)v21 - (char *)v27;
    if (v21 != v27)
      goto LABEL_32;
  }
  else
  {
    v9 = *(_QWORD *)(a2 + 16);
    if (0xAAAAAAAAAAAAAAABLL * ((v9 - (uint64_t)v5) >> 3) >= v8)
    {
      v25 = 24 * ((24 * v8 - 24) / 0x18) + 24;
      bzero(*(void **)(a2 + 8), v25);
      *(_QWORD *)(a2 + 8) = (char *)v5 + v25;
      v26 = (char **)((char *)v5 + v25);
      v27 = *(char ***)a2;
      v28 = (char *)v26 - (char *)v27;
      if (v26 == v27)
        return;
      goto LABEL_32;
    }
    if (v32 > 0xAAAAAAAAAAAAAAALL)
      sub_20E867F44();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v9 - (uint64_t)v6) >> 3);
    if (2 * v10 > v32)
      v4 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v4 = 0xAAAAAAAAAAAAAAALL;
    if (v4 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v11 = 24 * v4;
    v12 = (char *)operator new(24 * v4);
    v13 = &v12[24 * v7];
    v14 = &v12[v11];
    bzero(v13, 24 * ((24 * v8 - 24) / 0x18) + 24);
    v15 = &v13[24 * ((24 * v8 - 24) / 0x18) + 24];
    if (v5 == v6)
    {
      *(_QWORD *)a2 = v13;
      *(_QWORD *)(a2 + 8) = v15;
      *(_QWORD *)(a2 + 16) = v14;
    }
    else
    {
      do
      {
        v16 = *(_OWORD *)(v5 - 3);
        v5 -= 3;
        *(_OWORD *)(v13 - 24) = v16;
        v13 -= 24;
        *((_QWORD *)v13 + 2) = v5[2];
        *v5 = 0;
        v5[1] = 0;
        v5[2] = 0;
      }
      while (v5 != v6);
      v5 = *(char ***)a2;
      v17 = *(char ***)(a2 + 8);
      *(_QWORD *)a2 = v13;
      *(_QWORD *)(a2 + 8) = v15;
      *(_QWORD *)(a2 + 16) = v14;
      if (v17 != v5)
      {
        v18 = v17;
        do
        {
          v20 = *(v18 - 3);
          v18 -= 3;
          v19 = v20;
          if (v20)
          {
            *(v17 - 2) = v19;
            operator delete(v19);
          }
          v17 = v18;
        }
        while (v18 != v5);
      }
    }
    if (v5)
      operator delete(v5);
    v30 = a2;
    v27 = *(char ***)a2;
    v29 = *(char ***)(v30 + 8);
    v28 = (char *)v29 - (char *)v27;
    if (v29 != v27)
    {
LABEL_32:
      v31 = 24 * (v28 / 24);
      do
      {
        sub_20E93E1A4((uint64_t)&v33, a1, v27);
        v27 += 3;
        v31 -= 24;
      }
      while (v31);
    }
  }
}

void sub_20F42FE78()
{
  sub_20E860B90("vector");
}

_QWORD *sub_20F42FE8C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = &off_24CA000E0;
  v2 = a1[22];
  if (v2)
    MEMORY[0x212BC6368](v2, 0x1000C80BDFB0063);
  v3 = a1[19];
  if (v3)
    MEMORY[0x212BC6368](v3, 0x1000C8077774924);
  v4 = a1[16];
  if (v4)
    MEMORY[0x212BC6368](v4, 0x1000C8077774924);
  v5 = a1[13];
  if (v5)
    MEMORY[0x212BC6368](v5, 0x1000C8077774924);
  v6 = a1[9];
  if (v6)
    MEMORY[0x212BC6368](v6, 0x1000C8052888210);
  v7 = a1[6];
  if (v7)
    MEMORY[0x212BC6368](v7, 0x1000C8052888210);
  v8 = a1[3];
  if (v8)
    MEMORY[0x212BC6368](v8, 0x1000C8052888210);
  return a1;
}

void sub_20F42FF80(_QWORD *a1)
{
  sub_20F42FE8C(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F42FFA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void **v8;
  void **v9;
  void **v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  size_t v14;
  size_t v15;
  size_t v16;
  size_t v17;
  size_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  size_t v28;
  size_t v29;
  size_t v30;
  void *v31;
  unsigned int v32;
  unint64_t v33;
  BOOL v34;
  BOOL v35;
  int v36;
  uint64_t v37;
  int v38;
  unint64_t v39;
  size_t v40;
  size_t v41;
  void *v42;
  int v43;
  int v44;
  int v45;
  unint64_t v46;
  size_t v47;
  size_t v48;
  void *v49;

  *(_QWORD *)a1 = &off_24CA000E0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v8 = (void **)(a1 + 24);
  *(_OWORD *)(a1 + 48) = 0u;
  v9 = (void **)(a1 + 48);
  *(_DWORD *)(a1 + 16) = 10;
  *(_WORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_DWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 76) = 0u;
  *(_QWORD *)(a1 + 100) = 0;
  *(_QWORD *)(a1 + 116) = 0;
  *(_QWORD *)(a1 + 108) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v10 = (void **)(a1 + 72);
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  v11 = *(_DWORD *)(a2 + 16);
  v12 = *(unsigned int *)(a3 + 16);
  if (v12 > v11
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Recognition/src/Pca.cpp", 45, (uint64_t)"e_dim <= x_dim", 14, (uint64_t)"Number of eigen values has to be smaller than x_dimension", 57, (void (*)(void **))sub_21023DDB0)|| (*(_DWORD *)(a4 + 16) != (_DWORD)v12 || *(_DWORD *)(a4 + 20) != v11)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Recognition/src/Pca.cpp", 46, (uint64_t)"eig_vector_set.rows() == e_dim && eig_vector_set.columns() == x_dim", 67, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  *(_DWORD *)(a1 + 8) = v11;
  *(_DWORD *)(a1 + 12) = v12;
  *(_DWORD *)(a1 + 16) = 10;
  *(_DWORD *)(a1 + 64) = v12;
  *(_DWORD *)(a1 + 68) = v11;
  v13 = v12 * (unint64_t)v11;
  if (*(_QWORD *)(a1 + 56) < v13)
  {
    if (*v9)
      MEMORY[0x212BC6368](*v9, 0x1000C8052888210);
    v14 = (4 * v13 + 31) & 0xFFFFFFFFFFFFFFE0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = v14 >> 2;
    *(_QWORD *)(a1 + 48) = operator new(v14, (std::align_val_t)0x20uLL);
    v12 = *(unsigned int *)(a1 + 12);
  }
  *(_DWORD *)(a1 + 88) = v12;
  if (*(_QWORD *)(a1 + 80) < v12)
  {
    if (*v10)
      MEMORY[0x212BC6368](*v10, 0x1000C8052888210);
    v15 = (4 * v12 + 31) & 0x7FFFFFFE0;
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = v15 >> 2;
    *v10 = operator new(v15, (std::align_val_t)0x20uLL);
  }
  v16 = *(unsigned int *)(a1 + 8);
  *(_DWORD *)(a1 + 40) = v16;
  v17 = *(_QWORD *)(a1 + 32);
  if (v17 < v16)
  {
    if (*v8)
      MEMORY[0x212BC6368](*v8, 0x1000C8052888210);
    v18 = (4 * v16 + 31) & 0x7FFFFFFE0;
    v17 = v18 >> 2;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = v18 >> 2;
    *v8 = operator new(v18, (std::align_val_t)0x20uLL);
  }
  v19 = *(_DWORD *)(a1 + 64);
  if (*(_DWORD *)(a1 + 68) * v19)
    bzero(*v9, 4 * (*(_DWORD *)(a1 + 68) * v19));
  v20 = *(unsigned int *)(a1 + 88);
  if ((_DWORD)v20)
    bzero(*v10, 4 * v20);
  v21 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v21)
    bzero(*v8, 4 * v21);
  v22 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v22)
  {
    v23 = v19 + 1;
    v24 = *v9;
    if ((_DWORD)v22 == 1)
    {
      v25 = 0;
LABEL_27:
      v26 = v22 - v25;
      v27 = v23 * v25;
      do
      {
        v24[v27] = 1065353216;
        v27 += v23;
        --v26;
      }
      while (v26);
      goto LABEL_29;
    }
    v25 = 0;
    if (v23 < 0)
      v32 = ~v19;
    else
      v32 = v19 + 1;
    v33 = (v22 - 1) * (unint64_t)v32;
    v34 = v19 != -1 && (unint64_t)(v22 - 1) >> 32 != 0;
    if ((_DWORD)v33)
      v35 = v23 < 0;
    else
      v35 = 0;
    if (v35)
      goto LABEL_27;
    if ((v33 & 0xFFFFFFFF00000000) != 0)
      goto LABEL_27;
    if (v34)
      goto LABEL_27;
    v36 = 0;
    v25 = v22 & 0xFFFFFFFE;
    v37 = v25;
    do
    {
      v24[v36] = 1065353216;
      v24[v23 + v36] = 1065353216;
      v36 += 2 * v19 + 2;
      v37 -= 2;
    }
    while (v37);
    if (v25 != v22)
      goto LABEL_27;
  }
LABEL_29:
  if (v8 == (void **)a2)
    goto LABEL_54;
  v28 = *(unsigned int *)(a2 + 16);
  if (v17 >= v28)
  {
    if (!(_DWORD)v28)
    {
      v38 = 0;
      goto LABEL_53;
    }
    v31 = *v8;
    v29 = 4 * v28;
  }
  else
  {
    if (*v8)
      MEMORY[0x212BC6368](*v8, 0x1000C8052888210);
    v29 = 4 * v28;
    v30 = (4 * v28 + 31) & 0x7FFFFFFE0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = v30 >> 2;
    v31 = operator new(v30, (std::align_val_t)0x20uLL);
    *v8 = v31;
  }
  memcpy(v31, *(const void **)a2, v29);
  v38 = *(_DWORD *)(a2 + 16);
LABEL_53:
  *(_DWORD *)(a1 + 40) = v38;
LABEL_54:
  if (v10 == (void **)a3)
    goto LABEL_63;
  v39 = *(unsigned int *)(a3 + 16);
  if (*(_QWORD *)(a1 + 80) >= v39)
  {
    if (!(_DWORD)v39)
    {
      v43 = 0;
      goto LABEL_62;
    }
    v42 = *v10;
    v40 = 4 * v39;
  }
  else
  {
    if (*v10)
      MEMORY[0x212BC6368](*v10, 0x1000C8052888210);
    v40 = 4 * v39;
    v41 = (v40 + 31) & 0x7FFFFFFE0;
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = v41 >> 2;
    v42 = operator new(v41, (std::align_val_t)0x20uLL);
    *v10 = v42;
  }
  memcpy(v42, *(const void **)a3, v40);
  v43 = *(_DWORD *)(a3 + 16);
LABEL_62:
  *(_DWORD *)(a1 + 88) = v43;
LABEL_63:
  if (v9 != (void **)a4)
  {
    v44 = *(_DWORD *)(a4 + 16);
    v45 = *(_DWORD *)(a4 + 20);
    v46 = (v45 * v44);
    if (*(_QWORD *)(a1 + 56) >= v46)
    {
      if (!(_DWORD)v46)
      {
LABEL_71:
        *(_DWORD *)(a1 + 64) = v44;
        *(_DWORD *)(a1 + 68) = v45;
        return a1;
      }
      v49 = *v9;
      v47 = 4 * v46;
    }
    else
    {
      if (*v9)
        MEMORY[0x212BC6368](*v9, 0x1000C8052888210);
      v47 = 4 * v46;
      v48 = (v47 + 31) & 0x7FFFFFFE0;
      *(_QWORD *)(a1 + 48) = 0;
      *(_QWORD *)(a1 + 56) = v48 >> 2;
      v49 = operator new(v48, (std::align_val_t)0x20uLL);
      *v9 = v49;
    }
    memcpy(v49, *(const void **)a4, v47);
    v44 = *(_DWORD *)(a4 + 16);
    v45 = *(_DWORD *)(a4 + 20);
    goto LABEL_71;
  }
  return a1;
}

void sub_20F430488(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t *a9, uint64_t *a10)
{
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (*v14)
  {
    MEMORY[0x212BC6368](*v14, 0x1000C80BDFB0063);
    v16 = *a9;
    if (!*a9)
    {
LABEL_3:
      v17 = *a10;
      if (!*a10)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else
  {
    v16 = *a9;
    if (!*a9)
      goto LABEL_3;
  }
  MEMORY[0x212BC6368](v16, 0x1000C8077774924);
  v17 = *a10;
  if (!*a10)
  {
LABEL_4:
    v18 = *(_QWORD *)(v10 + 104);
    if (!v18)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  MEMORY[0x212BC6368](v17, 0x1000C8077774924);
  v18 = *(_QWORD *)(v10 + 104);
  if (!v18)
  {
LABEL_5:
    v19 = *v13;
    if (!*v13)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  MEMORY[0x212BC6368](v18, 0x1000C8077774924);
  v19 = *v13;
  if (!*v13)
  {
LABEL_6:
    v20 = *v12;
    if (!*v12)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  MEMORY[0x212BC6368](v19, 0x1000C8052888210);
  v20 = *v12;
  if (!*v12)
  {
LABEL_7:
    v21 = *v11;
    if (!*v11)
      goto LABEL_8;
    goto LABEL_15;
  }
LABEL_14:
  MEMORY[0x212BC6368](v20, 0x1000C8052888210);
  v21 = *v11;
  if (!*v11)
LABEL_8:
    _Unwind_Resume(exception_object);
LABEL_15:
  MEMORY[0x212BC6368](v21, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

unint64_t sub_20F4305A4(unint64_t result, char a2, int32x4_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  unint64_t v7;
  uint64_t v8;
  float32x4_t *v9;
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t i;
  uint64_t j;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  float32x4_t *v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  unsigned int v34;
  unint64_t v35;

  *(_BYTE *)(result + 97) = a2;
  if (*(_DWORD *)(result + 64) == 128)
  {
    v3 = result;
    if (*(_DWORD *)(result + 68) == 0x8000)
    {
      *(_BYTE *)(result + 96) = 1;
      *(_DWORD *)(result + 120) = 0x8000;
      if (!(*(_QWORD *)(result + 112) >> 15))
      {
        v4 = *(_QWORD *)(result + 104);
        if (v4)
          MEMORY[0x212BC6368](v4, 0x1000C8077774924);
        *(_QWORD *)(v3 + 104) = 0;
        *(_QWORD *)(v3 + 112) = 0x8000;
        result = (unint64_t)operator new(0x8000uLL, (std::align_val_t)0x20uLL);
        *(_QWORD *)(v3 + 104) = result;
      }
      *(_DWORD *)(v3 + 144) = 0x8000;
      if (!(*(_QWORD *)(v3 + 136) >> 22))
      {
        v5 = *(_QWORD *)(v3 + 128);
        if (v5)
          MEMORY[0x212BC6368](v5, 0x1000C8077774924);
        *(_QWORD *)(v3 + 128) = 0;
        *(_QWORD *)(v3 + 136) = 0x400000;
        result = (unint64_t)operator new(0x400000uLL, (std::align_val_t)0x20uLL);
        *(_QWORD *)(v3 + 128) = result;
      }
      v6 = 4.0;
      if (!*(_BYTE *)(v3 + 97))
        v6 = 2.0;
      *(float *)(v3 + 100) = v6;
      *(float *)a3.i32 = v6 * 64.0;
      v7 = *(unsigned int *)(v3 + 40);
      if (v7 >= 0x10)
      {
        v8 = 0;
        v9 = *(float32x4_t **)(v3 + 24);
        v10 = *(_QWORD *)(v3 + 104);
        do
        {
          v11 = *v9;
          v12 = v9[1];
          v13 = v9[2];
          v14 = v9[3];
          v9 += 4;
          *(int8x16_t *)(v10 + v8) = vqmovn_high_s16(vqmovn_s16(vqmovn_high_s32(vqmovn_s32(vcvtaq_s32_f32(vmulq_n_f32(v11, *(float *)a3.i32))), vcvtaq_s32_f32(vmulq_n_f32(v12, *(float *)a3.i32)))), vqmovn_high_s32(vqmovn_s32(vcvtaq_s32_f32(vmulq_n_f32(v13, *(float *)a3.i32))), vcvtaq_s32_f32(vmulq_n_f32(v14, *(float *)a3.i32))));
          v15 = v8 + 32;
          v8 += 16;
        }
        while (v15 <= v7);
      }
      else
      {
        LODWORD(v8) = 0;
      }
      if (v8 < v7)
      {
        v16 = v8;
        do
        {
          *(_BYTE *)(*(_QWORD *)(v3 + 104) + v16) = llroundf(*(float *)a3.i32 * *(float *)(*(_QWORD *)(v3 + 24) + 4 * v16));
          ++v16;
        }
        while (v7 != v16);
      }
      v17 = *(unsigned int *)(v3 + 68);
      if ((_DWORD)v17)
      {
        v18 = *(unsigned int *)(v3 + 64);
        if (v18 >= 0x10)
        {
          v24 = 0;
          v25 = 0;
          v26 = 16;
          a3 = vdupq_n_s32(0x43800000u);
          do
          {
            v27 = 0;
            v28 = *(_QWORD *)(v3 + 128) + v24;
            v29 = (float32x4_t *)(*(_QWORD *)(v3 + 48) + 4 * (*(_DWORD *)(v3 + 64) * v25));
            LODWORD(result) = v26;
            do
            {
              v30 = *v29;
              v31 = v29[1];
              v32 = v29[2];
              v33 = v29[3];
              v29 += 4;
              v34 = result;
              *(int8x16_t *)(v28 + v27) = vqmovn_high_s16(vqmovn_s16(vqmovn_high_s32(vqmovn_s32(vcvtaq_s32_f32(vmulq_f32(v30, (float32x4_t)a3))), vcvtaq_s32_f32(vmulq_f32(v31, (float32x4_t)a3)))), vqmovn_high_s32(vqmovn_s32(vcvtaq_s32_f32(vmulq_f32(v32, (float32x4_t)a3))), vcvtaq_s32_f32(vmulq_f32(v33, (float32x4_t)a3))));
              v35 = v27 + 32;
              v27 += 16;
              result = (result + 16);
            }
            while (v35 <= v18);
            if (v18 > v27)
            {
              do
                *(_BYTE *)(*(_QWORD *)(v3 + 128) + v34++) = llroundf(*(float *)(*(_QWORD *)(v3 + 48)+ 4* (v27+++ v25 * *(_DWORD *)(v3 + 64)))* 256.0);
              while (v27 < v18);
            }
            ++v25;
            v24 += 128;
            v26 += 128;
          }
          while (v25 != v17);
        }
        else if ((_DWORD)v18)
        {
          v19 = 0;
          for (i = 0; i != v17; ++i)
          {
            for (j = 0; j != v18; ++j)
            {
              *(float *)a3.i32 = *(float *)(*(_QWORD *)(v3 + 48) + 4 * (j + i * *(_DWORD *)(v3 + 64)))
                               * 256.0;
              *(_BYTE *)(*(_QWORD *)(v3 + 128) + v19 + j) = llroundf(*(float *)a3.i32);
            }
            v19 += 128;
          }
        }
      }
      *(_DWORD *)(v3 + 168) = 0x8000;
      if (!(*(_QWORD *)(v3 + 160) >> 15))
      {
        v22 = *(_QWORD *)(v3 + 152);
        if (v22)
          MEMORY[0x212BC6368](v22, 0x1000C8077774924, (__n128)a3);
        *(_QWORD *)(v3 + 152) = 0;
        *(_QWORD *)(v3 + 160) = 0x8000;
        result = (unint64_t)operator new(0x8000uLL, (std::align_val_t)0x20uLL);
        *(_QWORD *)(v3 + 152) = result;
      }
      *(_DWORD *)(v3 + 192) = 128;
      if (*(_QWORD *)(v3 + 184) <= 0x7FuLL)
      {
        v23 = *(_QWORD *)(v3 + 176);
        if (v23)
          MEMORY[0x212BC6368](v23, 0x1000C80BDFB0063, (__n128)a3);
        *(_QWORD *)(v3 + 176) = 0;
        *(_QWORD *)(v3 + 184) = 128;
        result = (unint64_t)operator new(0x100uLL, (std::align_val_t)0x20uLL);
        *(_QWORD *)(v3 + 176) = result;
      }
    }
  }
  return result;
}

uint64_t sub_20F430918(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  float v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  float32x4_t *v13;
  uint64_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int8x8_t v26;
  int8x8_t v27;
  int8x8_t v28;
  int8x8_t v29;
  int8x8_t v30;
  int8x8_t v31;
  int8x8_t v32;
  int8x8_t v33;
  int8x8_t v34;
  int8x8_t *v35;
  int16x8_t *v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  uint64_t v49;
  float v50;
  int16x8_t *v51;
  float32x4_t *v52;
  uint64_t v53;
  int16x8_t *v54;
  float32x4_t *v55;
  uint64_t v56;
  int16x8_t v57;
  float32x4_t v58;
  float32x4_t v59;
  uint64_t v60;
  float *v61;
  __int16 *v62;
  int v63;
  float32x2_t *v64;
  float32x2_t *v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  float32x2_t v71;
  uint64_t v72;
  float v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  float *v79;
  int v80;
  float v81;
  unsigned int v82;
  float *v83;
  unint64_t v84;
  int v86;
  unsigned int v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  int v96;
  int v97;
  float32x2_t v98;
  uint64_t v99;
  int v100;
  float32x4_t *v101;
  float32x4_t *v102;
  float32x4_t *v103;
  unsigned int v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  int v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  float v116;
  int v117;
  BOOL v118;
  BOOL v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  BOOL v125;
  BOOL v126;
  BOOL v127;
  float32x4_t *v128;
  unsigned int v129;
  unint64_t v130;
  unsigned int v131;
  unsigned int v132;
  unint64_t v133;
  int v134;
  unint64_t v135;
  float v136;
  float32x4_t *v137;
  uint64_t v138;
  unsigned int v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  int v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  float *v149;
  unsigned int v150;
  uint64_t v151;
  BOOL v152;
  unsigned int v153;
  float32x4_t *v154;
  unint64_t v155;
  float32x4_t *v156;
  float32x4_t v157;
  unint64_t v158;

  kdebug_trace();
  if (*(_BYTE *)(a1 + 96))
  {
    v6 = *(float *)(a1 + 100) * 64.0;
    v7 = *a2;
    if (v7 >= 0x10)
    {
      v8 = 0;
      v13 = (float32x4_t *)*((_QWORD *)a2 + 1);
      v14 = *(_QWORD *)(a1 + 152);
      do
      {
        v15 = *v13;
        v16 = v13[1];
        v17 = v13[2];
        v18 = v13[3];
        v13 += 4;
        *(int8x16_t *)(v14 + v8) = vqmovn_high_s16(vqmovn_s16(vqmovn_high_s32(vqmovn_s32(vcvtaq_s32_f32(vmulq_n_f32(v15, v6))), vcvtaq_s32_f32(vmulq_n_f32(v16, v6)))), vqmovn_high_s32(vqmovn_s32(vcvtaq_s32_f32(vmulq_n_f32(v17, v6))), vcvtaq_s32_f32(vmulq_n_f32(v18, v6))));
        v19 = v8 + 32;
        v8 += 16;
      }
      while (v19 <= v7);
    }
    else
    {
      LODWORD(v8) = 0;
    }
    if (v8 < v7)
    {
      v20 = v8;
      do
      {
        *(_BYTE *)(*(_QWORD *)(a1 + 152) + v20) = llroundf(v6 * *(float *)(*((_QWORD *)a2 + 1) + 4 * v20));
        ++v20;
      }
      while (v7 != v20);
    }
    v21 = *(unsigned int *)(a1 + 192);
    if ((_DWORD)v21)
      bzero(*(void **)(a1 + 176), 2 * v21);
    v22 = 0;
    v23 = *(_QWORD *)(a1 + 152);
    v24 = *(_QWORD *)(a1 + 104);
    v25 = 992;
    do
    {
      v26 = vqsub_s8(*(int8x8_t *)(v23 + v22), *(int8x8_t *)(v24 + v22));
      v27 = vdup_lane_s8(v26, 0);
      v28 = vdup_lane_s8(v26, 1);
      v29 = vdup_lane_s8(v26, 2);
      v30 = vdup_lane_s8(v26, 3);
      v31 = vdup_lane_s8(v26, 4);
      v32 = vdup_lane_s8(v26, 5);
      v33 = vdup_lane_s8(v26, 6);
      v34 = vdup_lane_s8(v26, 7);
      v35 = (int8x8_t *)(*(_QWORD *)(a1 + 128) + v25);
      v36 = *(int16x8_t **)(a1 + 176);
      v37 = vqaddq_s16(v36[1], vmlal_s8(vmlal_s8(vmlal_s8(vmlal_s8(vmlal_s8(vmlal_s8(vmlal_s8(vmull_s8(v35[-107], v28), v35[-123], v27), v35[-91], v29), v35[-75], v30), v35[-59], v31), v35[-43], v32), v35[-27], v33), v35[-11], v34));
      v38 = vqaddq_s16(v36[2], vmlal_s8(vmlal_s8(vmlal_s8(vmlal_s8(vmlal_s8(vmlal_s8(vmlal_s8(vmull_s8(v35[-106], v28), v35[-122], v27), v35[-90], v29), v35[-74], v30), v35[-58], v31), v35[-42], v32), v35[-26], v33), v35[-10], v34));
      v39 = vqaddq_s16(v36[3], vmlal_s8(vmlal_s8(vmlal_s8(vmlal_s8(vmlal_s8(vmlal_s8(vmlal_s8(vmull_s8(v35[-105], v28), v35[-121], v27), v35[-89], v29), v35[-73], v30), v35[-57], v31), v35[-41], v32), v35[-25], v33), v35[-9], v34));
      *v36 = vqaddq_s16(*v36, vmlal_s8(vmlal_s8(vmlal_s8(vmlal_s8(vmlal_s8(vmlal_s8(vmlal_s8(vmull_s8(v35[-108], v28), v35[-124], v27), v35[-92], v29), v35[-76], v30), v35[-60], v31), v35[-44], v32), v35[-28], v33), v35[-12], v34));
      v36[1] = v37;
      v36[2] = v38;
      v36[3] = v39;
      v40 = vqaddq_s16(v36[5], vmlal_s8(vmlal_s8(vmlal_s8(vmlal_s8(vmlal_s8(vmlal_s8(vmlal_s8(vmull_s8(v35[-103], v28), v35[-119], v27), v35[-87], v29), v35[-71], v30), v35[-55], v31), v35[-39], v32), v35[-23], v33), v35[-7], v34));
      v41 = vqaddq_s16(v36[6], vmlal_s8(vmlal_s8(vmlal_s8(vmlal_s8(vmlal_s8(vmlal_s8(vmlal_s8(vmull_s8(v35[-102], v28), v35[-118], v27), v35[-86], v29), v35[-70], v30), v35[-54], v31), v35[-38], v32), v35[-22], v33), v35[-6], v34));
      v42 = vqaddq_s16(v36[7], vmlal_s8(vmlal_s8(vmlal_s8(vmlal_s8(vmlal_s8(vmlal_s8(vmlal_s8(vmull_s8(v35[-101], v28), v35[-117], v27), v35[-85], v29), v35[-69], v30), v35[-53], v31), v35[-37], v32), v35[-21], v33), v35[-5], v34));
      v36[4] = vqaddq_s16(v36[4], vmlal_s8(vmlal_s8(vmlal_s8(vmlal_s8(vmlal_s8(vmlal_s8(vmlal_s8(vmull_s8(v35[-104], v28), v35[-120], v27), v35[-88], v29), v35[-72], v30), v35[-56], v31), v35[-40], v32), v35[-24], v33), v35[-8], v34));
      v36[5] = v40;
      v36[6] = v41;
      v36[7] = v42;
      v43 = vqaddq_s16(v36[9], vmlal_s8(vmlal_s8(vmlal_s8(vmlal_s8(vmlal_s8(vmlal_s8(vmlal_s8(vmull_s8(v35[-99], v28), v35[-115], v27), v35[-83], v29), v35[-67], v30), v35[-51], v31), v35[-35], v32), v35[-19], v33), v35[-3], v34));
      v44 = vqaddq_s16(v36[10], vmlal_s8(vmlal_s8(vmlal_s8(vmlal_s8(vmlal_s8(vmlal_s8(vmlal_s8(vmull_s8(v35[-98], v28), v35[-114], v27), v35[-82], v29), v35[-66], v30), v35[-50], v31), v35[-34], v32), v35[-18], v33), v35[-2], v34));
      v45 = vqaddq_s16(v36[11], vmlal_s8(vmlal_s8(vmlal_s8(vmlal_s8(vmlal_s8(vmlal_s8(vmlal_s8(vmull_s8(v35[-97], v28), v35[-113], v27), v35[-81], v29), v35[-65], v30), v35[-49], v31), v35[-33], v32), v35[-17], v33), v35[-1], v34));
      v36[8] = vqaddq_s16(v36[8], vmlal_s8(vmlal_s8(vmlal_s8(vmlal_s8(vmlal_s8(vmlal_s8(vmlal_s8(vmull_s8(v35[-100], v28), v35[-116], v27), v35[-84], v29), v35[-68], v30), v35[-52], v31), v35[-36], v32), v35[-20], v33), v35[-4], v34));
      v36[9] = v43;
      v36[10] = v44;
      v36[11] = v45;
      v36 += 12;
      v46 = vqaddq_s16(v36[1], vmlal_s8(vmlal_s8(vmlal_s8(vmlal_s8(vmlal_s8(vmlal_s8(vmlal_s8(vmull_s8(v35[-95], v28), v35[-111], v27), v35[-79], v29), v35[-63], v30), v35[-47], v31), v35[-31], v32), v35[-15], v33), v35[1], v34));
      v47 = vqaddq_s16(v36[2], vmlal_s8(vmlal_s8(vmlal_s8(vmlal_s8(vmlal_s8(vmlal_s8(vmlal_s8(vmull_s8(v35[-94], v28), v35[-110], v27), v35[-78], v29), v35[-62], v30), v35[-46], v31), v35[-30], v32), v35[-14], v33), v35[2], v34));
      v48 = vqaddq_s16(v36[3], vmlal_s8(vmlal_s8(vmlal_s8(vmlal_s8(vmlal_s8(vmlal_s8(vmlal_s8(vmull_s8(v35[-93], v28), v35[-109], v27), v35[-77], v29), v35[-61], v30), v35[-45], v31), v35[-29], v32), v35[-13], v33), v35[3], v34));
      *v36 = vqaddq_s16(*v36, vmlal_s8(vmlal_s8(vmlal_s8(vmlal_s8(vmlal_s8(vmlal_s8(vmlal_s8(vmull_s8(v35[-96], v28), v35[-112], v27), v35[-80], v29), v35[-64], v30), v35[-48], v31), v35[-32], v32), v35[-16], v33), *v35, v34));
      v36[1] = v46;
      v36[2] = v47;
      v36[3] = v48;
      v25 += 1024;
      v22 += 8;
    }
    while (v22 < 0x7FF9);
    v49 = *(unsigned int *)(a1 + 192);
    if ((_DWORD)v49)
    {
      v50 = 1.0 / (float)((float)(*(float *)(a1 + 100) * 4.0) * 4096.0);
      v51 = *(int16x8_t **)(a1 + 176);
      v52 = (float32x4_t *)*((_QWORD *)a3 + 1);
      if (v49 < 0x10)
      {
        v53 = 0;
LABEL_23:
        v60 = v49 - v53;
        v61 = &v52->f32[v53];
        v62 = &v51->i16[v53];
        do
        {
          v63 = *v62++;
          *v61++ = v50 * (float)v63;
          --v60;
        }
        while (v60);
        return kdebug_trace();
      }
      v53 = v49 & 0xFFFFFFF0;
      v54 = v51 + 1;
      v55 = v52 + 2;
      v56 = v53;
      do
      {
        v57 = v54[-1];
        v58 = vcvtq_f32_s32(vmovl_high_s16(*v54));
        v59 = vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v54->i8)), v50);
        v55[-2] = vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v57.i8)), v50);
        v55[-1] = vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(v57)), v50);
        *v55 = v59;
        v55[1] = vmulq_n_f32(v58, v50);
        v55 += 4;
        v54 += 2;
        v56 -= 16;
      }
      while (v56);
      if (v53 != v49)
        goto LABEL_23;
    }
  }
  else
  {
    v9 = *(unsigned int *)(a1 + 64);
    v10 = *(unsigned int *)(a1 + 68);
    v11 = *a3;
    if ((_DWORD)v11)
      bzero(*((void **)a3 + 1), 4 * v11);
    if (v10 >= 2)
    {
      v64 = (float32x2_t *)*((_QWORD *)a2 + 1);
      v65 = *(float32x2_t **)(a1 + 24);
      if (v9 >= 0x10)
      {
        v86 = 0;
        v87 = v9 & 0xFFFFFFF0;
        v88 = (v9 & 0xFFFFFFF0) - 16;
        v89 = v88 + 16;
        v90 = v88 + 17;
        if (v88 + 17 <= v9)
          v90 = v9;
        v91 = v90 - v88 - 17;
        v92 = 4 * (v87 - 16);
        v93 = v92 + 64;
        v94 = v92 ^ 0xFFFFFFFFFFFFFFC0;
        v95 = v90 - v88 - 16;
        v158 = (v88 & 0xFFFFFFFFFFFFFFFCLL | v90 & 3) - v90 + 16;
        v96 = 2;
        v97 = 1;
        do
        {
          v12 = v96;
          v98 = vsub_f32(*v64, *v65);
          v99 = *(_QWORD *)(a1 + 48);
          v100 = *(_DWORD *)(a1 + 64);
          v101 = (float32x4_t *)(v99 + 4 * (v100 * v86));
          v102 = (float32x4_t *)(v99 + 4 * v100 * (v86 | 1u));
          v103 = (float32x4_t *)*((_QWORD *)a3 + 1);
          v104 = 16;
          do
          {
            v105 = vaddq_f32(vmulq_n_f32(v101[2], v98.f32[0]), v103[2]);
            v106 = v102[2];
            v107 = v102[3];
            v108 = vaddq_f32(vmulq_n_f32(v101[3], v98.f32[0]), v103[3]);
            v109 = vaddq_f32(vmulq_lane_f32(v102[1], v98, 1), vaddq_f32(vmulq_n_f32(v101[1], v98.f32[0]), v103[1]));
            *v103 = vaddq_f32(vmulq_lane_f32(*v102, v98, 1), vaddq_f32(vmulq_n_f32(*v101, v98.f32[0]), *v103));
            v103[1] = v109;
            v104 += 16;
            v103[2] = vaddq_f32(vmulq_lane_f32(v106, v98, 1), v105);
            v103[3] = vaddq_f32(vmulq_lane_f32(v107, v98, 1), v108);
            v101 += 4;
            v102 += 4;
            v103 += 4;
          }
          while (v9 >= v104);
          if (v87 < v9)
          {
            v110 = *(_DWORD *)(a1 + 64);
            v111 = v110 * v86;
            v112 = *(_QWORD *)(a1 + 48);
            v113 = *((_QWORD *)a3 + 1);
            v114 = v89;
            if (v95 < 0x10)
              goto LABEL_97;
            v117 = v110 * (v86 | 1);
            v118 = __CFADD__(v87 + v111, (_DWORD)v91);
            v119 = __CFADD__(v87 + v117, (_DWORD)v91);
            v114 = v89;
            if (v118)
              goto LABEL_97;
            v114 = v89;
            if (v119)
              goto LABEL_97;
            v114 = v89;
            if (HIDWORD(v91))
              goto LABEL_97;
            v120 = v113 + 4 * v90;
            v121 = v87 + v117;
            v122 = v112 + 4 * v121;
            v123 = v112 + v94 + 4 * (v90 + v121);
            v124 = v87 + v111;
            v125 = v113 + v93 >= v112 + v94 + 4 * (v90 + v124)
                || v112 + 4 * (unint64_t)v124 >= v120;
            v126 = !v125;
            v127 = v122 >= v120 || v113 + v93 >= v123;
            v114 = v89;
            if (!v127)
              goto LABEL_97;
            v114 = v89;
            if (v126)
              goto LABEL_97;
            v128 = (float32x4_t *)(v113 + v93);
            v129 = v87 + v110 * v86;
            v130 = v158;
            v131 = v87 + v110 * v97;
            do
            {
              *v128 = vaddq_f32(vaddq_f32(vmulq_n_f32(*(float32x4_t *)(v112 + 4 * v129), v98.f32[0]), *v128), vmulq_lane_f32(*(float32x4_t *)(v112 + 4 * v131), v98, 1));
              ++v128;
              v129 += 4;
              v131 += 4;
              v130 += 4;
            }
            while (v130);
            v114 = v89 + v95 - (v90 & 3);
            if ((v90 & 3) != 0)
            {
LABEL_97:
              do
              {
                v115 = 4 * v114;
                v116 = (float)(v98.f32[0] * *(float *)(v112 + 4 * (v111 + v114)))
                     + *(float *)(v113 + 4 * v114);
                *(float *)(v113 + v115) = v116;
                *(float *)(v113 + v115) = v116
                                        + (float)(v98.f32[1]
                                                * *(float *)(v112 + 4 * (v110 * v97 + v114++)));
              }
              while (v114 < v9);
            }
          }
          ++v64;
          ++v65;
          v96 = v12 + 2;
          v86 += 2;
          v97 += 2;
        }
        while (v12 + 2 <= v10);
      }
      else
      {
        if (!(_DWORD)v9)
          return kdebug_trace();
        v66 = 0;
        v67 = *(_QWORD *)(a1 + 48);
        v68 = *((_QWORD *)a3 + 1);
        v69 = 2;
        do
        {
          v70 = 0;
          v12 = v69;
          v71 = vsub_f32(*v64, *v65);
          do
          {
            v72 = 4 * v70;
            v73 = (float)(v71.f32[0] * *(float *)(v67 + 4 * (v66 + v70))) + *(float *)(v68 + 4 * v70);
            *(float *)(v68 + v72) = v73;
            *(float *)(v68 + v72) = v73 + (float)(v71.f32[1] * *(float *)(v67 + 4 * (v9 + v66 + v70++)));
          }
          while (v9 != v70);
          ++v64;
          ++v65;
          v69 += 2;
          v66 += 2 * v9;
        }
        while (v69 <= v10);
      }
    }
    else
    {
      v12 = 0;
    }
    if (v12 < v10)
    {
      v74 = v12;
      if (v9 >= 0x10)
      {
        v132 = v9 & 0xFFFFFFF0;
        v133 = ~(unint64_t)(v9 & 0xFFFFFFF0) + v9;
        v134 = 16 * (v9 >> 4);
        v135 = v9 - (v9 & 0xFFFFFFF0);
        do
        {
          v136 = *(float *)(*((_QWORD *)a2 + 1) + 4 * v74) - *(float *)(*(_QWORD *)(a1 + 24) + 4 * v74);
          v137 = (float32x4_t *)*((_QWORD *)a3 + 1);
          v138 = *(_QWORD *)(a1 + 48) + 4 * (*(_DWORD *)(a1 + 64) * v74);
          v139 = 16;
          do
          {
            v140 = *(float32x4_t *)(v138 + 32);
            v141 = *(float32x4_t *)(v138 + 48);
            v142 = vaddq_f32(vmulq_n_f32(*(float32x4_t *)(v138 + 16), v136), v137[1]);
            *v137 = vaddq_f32(vmulq_n_f32(*(float32x4_t *)v138, v136), *v137);
            v137[1] = v142;
            v143 = vaddq_f32(vmulq_n_f32(v141, v136), v137[3]);
            v137[2] = vaddq_f32(vmulq_n_f32(v140, v136), v137[2]);
            v137[3] = v143;
            v139 += 16;
            v138 += 64;
            v137 += 4;
          }
          while (v139 <= v9);
          if (v132 < v9)
          {
            v144 = *(_DWORD *)(a1 + 64);
            v145 = *(_QWORD *)(a1 + 48);
            v146 = v9 & 0xFFFFFFF0;
            v147 = *((_QWORD *)a3 + 1);
            if (v135 < 0xC)
              goto LABEL_81;
            v146 = v9 & 0xFFFFFFF0;
            if (__CFADD__(v134 + v144 * v74, (_DWORD)v133))
              goto LABEL_81;
            v146 = v9 & 0xFFFFFFF0;
            if (HIDWORD(v133))
              goto LABEL_81;
            v151 = (v134 + v144 * v74);
            v152 = v147 + (v9 >> 4 << 6) >= v145 - (v9 >> 4 << 6) + 4 * (v9 + v151)
                || v145 + 4 * (unint64_t)v151 >= v147 + 4 * v9;
            v146 = v9 & 0xFFFFFFF0;
            if (!v152)
              goto LABEL_81;
            v153 = v132 + v144 * v74;
            v154 = (float32x4_t *)(v147 + (((unint64_t)(v9 >> 4) << 6) | 0x10));
            v155 = v135 - (v9 & 7);
            do
            {
              v156 = (float32x4_t *)(v145 + 4 * v153);
              v157 = vaddq_f32(vmulq_n_f32(v156[1], v136), *v154);
              v154[-1] = vaddq_f32(vmulq_n_f32(*v156, v136), v154[-1]);
              *v154 = v157;
              v153 += 8;
              v154 += 2;
              v155 -= 8;
            }
            while (v155);
            v146 = v135 - (v9 & 7) + (v9 & 0xFFFFFFF0);
            if ((v9 & 7) != 0)
            {
LABEL_81:
              v148 = v9 - v146;
              v149 = (float *)(v147 + 4 * v146);
              v150 = v146 + v144 * v74;
              do
              {
                *v149 = (float)(v136 * *(float *)(v145 + 4 * v150)) + *v149;
                ++v149;
                ++v150;
                --v148;
              }
              while (v148);
            }
          }
          ++v74;
        }
        while (v74 != v10);
      }
      else if ((_DWORD)v9)
      {
        v75 = *((_QWORD *)a2 + 1);
        v76 = *(_QWORD *)(a1 + 24);
        v77 = *(_DWORD *)(a1 + 64);
        v78 = *(_QWORD *)(a1 + 48);
        v79 = (float *)*((_QWORD *)a3 + 1);
        v80 = v12 * v77;
        do
        {
          v81 = *(float *)(v75 + 4 * v74) - *(float *)(v76 + 4 * v74);
          v82 = v80;
          v83 = v79;
          v84 = v9;
          do
          {
            *v83 = (float)(v81 * *(float *)(v78 + 4 * v82)) + *v83;
            ++v83;
            ++v82;
            --v84;
          }
          while (v84);
          ++v74;
          v80 += v77;
        }
        while (v74 != v10);
      }
    }
  }
  return kdebug_trace();
}

uint64_t sub_20F431460@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>, float32x4_t a4@<Q1>)
{
  uint64_t v6;
  size_t v7;
  __n128 *v8;
  uint64_t v9;
  size_t v10;
  __n128 *v11;
  unint64_t v12;
  size_t v13;
  _DWORD *v14;
  uint64_t v15;
  __n128 *v16;
  __n128 *v17;
  __n128 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int32 *v22;
  __n128 *v23;
  unsigned __int32 v24;
  uint64_t v25;
  __n128 *v26;
  __n128 *v27;
  __n128 *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int32 *v32;
  __n128 *v33;
  unsigned __int32 v34;
  BOOL v35;
  char v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  BOOL v47;
  BOOL v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int8x16_t v52;
  float32x4_t *v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  int v57;
  uint64_t result;
  int v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  int v68;
  int v69;
  BOOL v70;
  BOOL v71;
  int v72;
  uint64_t v73;
  __int128 *v74;
  __int128 v75;
  __int128 v76;
  _OWORD *v77;
  _DWORD *v78;
  size_t v79;
  unint64_t v80;
  __n128 *v81;
  size_t v82;
  int v83;
  __n128 *v84;
  size_t v85;
  int v86;

  v84 = 0;
  v85 = 0;
  v81 = 0;
  v82 = 0;
  v83 = 0;
  v78 = 0;
  v79 = 0;
  v80 = 0;
  v6 = *(unsigned int *)(a1 + 72);
  v86 = v6;
  if ((_DWORD)v6)
  {
    v7 = (4 * v6 + 31) & 0x7FFFFFFE0;
    v85 = v7 >> 2;
    v8 = (__n128 *)operator new(v7, (std::align_val_t)0x20uLL);
    v84 = v8;
    v9 = *(unsigned int *)(a1 + 76);
    v83 = v9;
    if ((_DWORD)v9)
      goto LABEL_3;
  }
  else
  {
    v8 = 0;
    v9 = *(unsigned int *)(a1 + 76);
    v83 = v9;
    if ((_DWORD)v9)
    {
LABEL_3:
      v10 = (4 * v9 + 31) & 0x7FFFFFFE0;
      v82 = v10 >> 2;
      v11 = (__n128 *)operator new(v10, (std::align_val_t)0x20uLL);
      v81 = v11;
      v80 = __PAIR64__(v6, v9);
      v12 = v9 * (unint64_t)v6;
      if (v12)
        goto LABEL_4;
LABEL_8:
      v14 = 0;
      if (!(_DWORD)v6)
        goto LABEL_16;
      goto LABEL_9;
    }
  }
  v11 = 0;
  v80 = __PAIR64__(v6, v9);
  v12 = v9 * (unint64_t)v6;
  if (!v12)
    goto LABEL_8;
LABEL_4:
  v13 = (4 * v12 + 31) & 0xFFFFFFFFFFFFFFE0;
  v79 = v13 >> 2;
  v14 = operator new(v13, (std::align_val_t)0x20uLL);
  v78 = v14;
  if (!(_DWORD)v6)
    goto LABEL_16;
LABEL_9:
  v15 = 0;
  v16 = *(__n128 **)a1;
  if (v6 < 8)
    goto LABEL_14;
  if ((unint64_t)((char *)v8 - (char *)v16) < 0x20)
    goto LABEL_14;
  v15 = v6 & 0xFFFFFFF8;
  v17 = v16 + 1;
  v18 = v8 + 1;
  v19 = v15;
  do
  {
    a3 = v17[-1];
    a4 = *(float32x4_t *)v17;
    v18[-1] = a3;
    *v18 = (__n128)a4;
    v17 += 2;
    v18 += 2;
    v19 -= 8;
  }
  while (v19);
  if (v15 != v6)
  {
LABEL_14:
    v20 = v6 - v15;
    v21 = 4 * v15;
    v22 = (unsigned __int32 *)v8 + v15;
    v23 = (__n128 *)((char *)v16 + v21);
    do
    {
      v24 = v23->n128_u32[0];
      v23 = (__n128 *)((char *)v23 + 4);
      *v22++ = v24;
      --v20;
    }
    while (v20);
  }
LABEL_16:
  if ((_DWORD)v9)
  {
    v25 = 0;
    v26 = *(__n128 **)(a1 + 24);
    if (v9 < 8)
      goto LABEL_22;
    if ((unint64_t)((char *)v11 - (char *)v26) < 0x20)
      goto LABEL_22;
    v25 = v9 & 0xFFFFFFF8;
    v27 = v26 + 1;
    v28 = v11 + 1;
    v29 = v25;
    do
    {
      a3 = v27[-1];
      a4 = *(float32x4_t *)v27;
      v28[-1] = a3;
      *v28 = (__n128)a4;
      v27 += 2;
      v28 += 2;
      v29 -= 8;
    }
    while (v29);
    if (v25 != v9)
    {
LABEL_22:
      v30 = v9 - v25;
      v31 = 4 * v25;
      v32 = (unsigned __int32 *)v11 + v25;
      v33 = (__n128 *)((char *)v26 + v31);
      do
      {
        v34 = v33->n128_u32[0];
        v33 = (__n128 *)((char *)v33 + 4);
        *v32++ = v34;
        --v30;
      }
      while (v30);
    }
  }
  a3.n128_u32[0] = *(_DWORD *)(a1 + 80);
  if ((_DWORD)v6)
    v35 = (_DWORD)v9 == 0;
  else
    v35 = 1;
  v36 = v35;
  if (a3.n128_f32[0] <= 0.0)
  {
    if ((v36 & 1) != 0)
      goto LABEL_56;
    v59 = 0;
    v60 = 0;
    v61 = 0;
    v62 = *(_QWORD *)(a1 + 48);
    v63 = v9 - 1;
    v64 = v9 & 0xFFFFFFF8;
    while (1)
    {
      if (v9 >= 0x14)
      {
        v65 = 0;
        v70 = __CFADD__(v9 * v60, v63);
        v71 = __CFADD__(v61, v63);
        if (v70 || v71 || (unint64_t)(v9 - 1) >> 32)
          goto LABEL_66;
        if ((unint64_t)&v14[(v9 * v60)] - v62 + -4 * v61 >= 0x20)
        {
          v66 = v61 + v64;
          v72 = v59;
          v73 = v9 & 0xFFFFFFF8;
          do
          {
            v74 = (__int128 *)(v62 + 4 * v61);
            v75 = *v74;
            v76 = v74[1];
            v77 = &v14[v72];
            *v77 = v75;
            v77[1] = v76;
            v61 += 8;
            v72 += 8;
            v73 -= 8;
          }
          while (v73);
          v65 = v9 & 0xFFFFFFF8;
          if (v64 == v9)
            goto LABEL_69;
          goto LABEL_67;
        }
      }
      v65 = 0;
LABEL_66:
      v66 = v61;
LABEL_67:
      v67 = v9 - v65;
      v68 = v59 + v65;
      do
      {
        v69 = *(_DWORD *)(v62 + 4 * v66++);
        v14[v68++] = v69;
        --v67;
      }
      while (v67);
LABEL_69:
      ++v60;
      v59 += v9;
      v61 = v66;
      if (v60 == (_DWORD)v6)
        goto LABEL_56;
    }
  }
  if ((v36 & 1) == 0)
  {
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = *(_QWORD *)(a1 + 88);
    v41 = v9 - 1;
    v42 = v9 & 0xFFFFFFF0;
    do
    {
      if (v9 >= 0x10)
      {
        v43 = 0;
        v47 = __CFADD__(v9 * v38, v41);
        v48 = __CFADD__(v39, v41);
        if (v47 || v48 || (unint64_t)(v9 - 1) >> 32)
          goto LABEL_35;
        v49 = (v9 * v38);
        if ((unint64_t)&v14[v49] >= v40 + v9 + (unint64_t)v39
          || v40 + (unint64_t)v39 >= (unint64_t)&v14[v9 + v49])
        {
          v44 = v39 + v42;
          v50 = v37;
          v51 = v9 & 0xFFFFFFF0;
          do
          {
            v52 = *(int8x16_t *)(v40 + v39);
            v53 = (float32x4_t *)&v14[v50];
            v54 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v52.i8, (int8x8_t)a3.n128_u64[0]), 8uLL), 8uLL)));
            v55 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)v52.i8, (int8x8_t)a3.n128_u64[0]), 8uLL), 8uLL)));
            v52.i64[0] = vextq_s8(v52, v52, 8uLL).u64[0];
            v56 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v52.i8, (int8x8_t)a3.n128_u64[0]), 8uLL), 8uLL)));
            a4 = vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)v52.i8, (int8x8_t)a3.n128_u64[0]), 8uLL), 8uLL))), a3.n128_f32[0]);
            *v53 = vmulq_n_f32(v55, a3.n128_f32[0]);
            v53[1] = vmulq_n_f32(v54, a3.n128_f32[0]);
            v53[2] = a4;
            v53[3] = vmulq_n_f32(v56, a3.n128_f32[0]);
            v39 += 16;
            v50 += 16;
            v51 -= 16;
          }
          while (v51);
          v43 = v9 & 0xFFFFFFF0;
          if (v42 == v9)
            goto LABEL_38;
          goto LABEL_36;
        }
      }
      v43 = 0;
LABEL_35:
      v44 = v39;
LABEL_36:
      v45 = v9 - v43;
      v46 = v37 + v43;
      do
      {
        a4.i8[0] = *(_BYTE *)(v40 + v44);
        a4.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a4.f32)).u64[0];
        a4.f32[0] = a3.n128_f32[0] * (float)a4.i32[0];
        ++v44;
        v14[v46++] = a4.i32[0];
        --v45;
      }
      while (v45);
LABEL_38:
      ++v38;
      v37 += v9;
      v39 = v44;
    }
    while (v38 != (_DWORD)v6);
  }
LABEL_56:
  sub_20F42FFA4(a2, (uint64_t)&v84, (uint64_t)&v81, (uint64_t)&v78);
  v57 = *(_DWORD *)(a1 + 120);
  *(_QWORD *)(a2 + 200) = *(_QWORD *)(a1 + 112);
  *(_DWORD *)(a2 + 208) = v57;
  if (v78)
    MEMORY[0x212BC6368](v78, 0x1000C8052888210);
  if (v81)
    MEMORY[0x212BC6368](v81, 0x1000C8052888210);
  result = (uint64_t)v84;
  if (v84)
    return MEMORY[0x212BC6368](v84, 0x1000C8052888210);
  return result;
}

void sub_20F43191C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v17;
  uint64_t v18;

  if (a10)
  {
    MEMORY[0x212BC6368](a10, 0x1000C8052888210);
    v17 = a13;
    if (!a13)
    {
LABEL_3:
      v18 = a16;
      if (!a16)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v17 = a13;
    if (!a13)
      goto LABEL_3;
  }
  MEMORY[0x212BC6368](v17, 0x1000C8052888210);
  v18 = a16;
  if (!a16)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  MEMORY[0x212BC6368](v18, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

void **sub_20F431994(void **a1)
{
  void *v2;
  char *v3;
  char *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;

  v2 = a1[8];
  if (v2)
    MEMORY[0x212BC6368](v2, 0x1000C8052888210);
  v3 = (char *)*a1;
  if (*a1)
  {
    v4 = (char *)a1[1];
    v5 = *a1;
    if (v4 != v3)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 3);
        if (v6)
        {
          *((_QWORD *)v4 - 2) = v6;
          operator delete(v6);
        }
        v7 = *((_QWORD *)v4 - 7);
        if (v7)
          MEMORY[0x212BC6368](v7, 0x1000C80BDFB0063);
        v8 = (void *)*((_QWORD *)v4 - 14);
        if (v8)
        {
          *((_QWORD *)v4 - 13) = v8;
          operator delete(v8);
        }
        v4 -= 112;
      }
      while (v4 != v3);
      v5 = *a1;
    }
    a1[1] = v3;
    operator delete(v5);
  }
  return a1;
}

uint64_t sub_20F431A4C(uint64_t a1)
{
  void *v2;

  *(_QWORD *)(a1 + 400) = &off_24C9FC540;
  v2 = *(void **)(a1 + 408);
  if (v2)
  {
    *(_QWORD *)(a1 + 416) = v2;
    operator delete(v2);
  }
  if (*(_BYTE *)(a1 + 392))
    sub_20F279C38((void **)(a1 + 16));
  return a1;
}

char *sub_20F431A98@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, void *a4@<X8>)
{
  void **v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  _QWORD *v16;
  uint64_t v17;
  const void *v18;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  __int128 v30;
  char *v31;
  uint64_t v32;
  __int128 v33;
  _QWORD *v34;
  unsigned int v35;
  char *v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  char __src[512];
  uint64_t v42;
  unsigned int v43;

  v8 = (void **)(a1 + 328);
  v9 = *(char **)(a1 + 328);
  v10 = *(char **)(a1 + 336);
  v11 = v10 - v9;
  if (v10 == v9)
  {
LABEL_15:
    sub_20F433470((uint64_t *)a1, a2, (uint64_t)&v42);
    if (*(_DWORD *)(a1 + 100) != 128
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Recognition/include/VIO/Recognition/ImageRetrievalModel.h", 184, (uint64_t)"compressed_vlad.rows() == pca.config().num_eigs", 47, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v38 = v43;
    v39 = v42;
    v40 = 0;
    v35 = 128;
    v36 = __src;
    v37 = 0;
    sub_20F430918(a1 + 88, &v38, &v35);
    memcpy(a4, __src, 0x200uLL);
    if (v42)
      MEMORY[0x212BC6368](v42, 0x1000C8052888210);
    ++*(_QWORD *)(a1 + 360);
    v20 = *(_QWORD *)(a1 + 336);
    if (v20 - *(_QWORD *)(a1 + 328) == 240)
    {
      v21 = *(_QWORD *)(v20 - 8);
      *(_QWORD *)__src = v21;
      *(_QWORD *)(a1 + 336) = v20 - 8;
    }
    else
    {
      v22 = *(char **)(a1 + 304);
      v23 = *(char **)(a1 + 312);
      v21 = 0xF0B7672A07A44C6BLL * ((v23 - v22) >> 3);
      *(_QWORD *)__src = v21;
      if (v23 - v22 == -536)
      {
        *(_QWORD *)(a1 + 312) = &v22[8 * ((v23 - v22) >> 3) + 536];
        v21 = -1;
      }
      else if (*(char **)(a1 + 320) == v23)
      {
        v24 = v21 + 1;
        if (v21 + 1 > 0x7A44C6AFC2DD9CLL)
          sub_20E867F44();
        if (0xE16ECE540F4898D6 * ((v23 - v22) >> 3) > v24)
          v24 = 0xE16ECE540F4898D6 * ((v23 - v22) >> 3);
        if (v21 >= 0x3D226357E16ECELL)
          v25 = 0x7A44C6AFC2DD9CLL;
        else
          v25 = v24;
        if (v25)
        {
          if (v25 > 0x7A44C6AFC2DD9CLL)
            sub_20E877A38();
          v26 = (char *)operator new(536 * v25);
        }
        else
        {
          v26 = 0;
        }
        v27 = &v26[8 * ((v23 - v22) >> 3)];
        *((_QWORD *)v27 + 1) = 0;
        *((_QWORD *)v27 + 2) = 0;
        *(_QWORD *)v27 = 0;
        *((_DWORD *)v27 + 4) = -1;
        v28 = v27 + 536;
        v29 = &v26[536 * v25];
        if (v23 != v22)
        {
          v34 = v27 + 536;
          do
          {
            v30 = *(_OWORD *)(v23 - 536);
            v31 = v27 - 512;
            v27 -= 536;
            *((_QWORD *)v27 + 2) = *((_QWORD *)v23 - 65);
            *(_OWORD *)v27 = v30;
            memcpy(v31, v23 - 512, 0x200uLL);
            v23 -= 536;
          }
          while (v23 != v22);
          v23 = *(char **)(a1 + 304);
          v28 = v34;
        }
        *(_QWORD *)(a1 + 304) = v27;
        *(_QWORD *)(a1 + 312) = v28;
        *(_QWORD *)(a1 + 320) = v29;
        if (v23)
          operator delete(v23);
      }
      else
      {
        *((_QWORD *)v23 + 1) = 0;
        *((_QWORD *)v23 + 2) = 0;
        *(_QWORD *)v23 = 0;
        *((_DWORD *)v23 + 4) = -1;
        *(_QWORD *)(a1 + 312) = v23 + 536;
      }
    }
    v32 = *(_QWORD *)(a1 + 304) + 536 * v21;
    v33 = *a3;
    *(_DWORD *)(v32 + 16) = *((_DWORD *)a3 + 4);
    *(_OWORD *)v32 = v33;
    memcpy((void *)(v32 + 24), a4, 0x200uLL);
    return sub_20F435A18(v8, *(_BYTE **)(a1 + 328), __src);
  }
  else
  {
    v12 = 0;
    v13 = *(_QWORD *)(a1 + 304);
    if ((unint64_t)(v11 >> 3) <= 1)
      v14 = 1;
    else
      v14 = v11 >> 3;
    v15 = v11 - 8;
    v16 = *(_QWORD **)(a1 + 328);
    while (1)
    {
      v17 = v13 + 536 * *v16;
      if (*(_DWORD *)(v17 + 16) == *((_DWORD *)a3 + 4)
        && *(_QWORD *)v17 == *(_QWORD *)a3
        && *(_DWORD *)(v17 + 8) == *((_DWORD *)a3 + 2))
      {
        break;
      }
      --v12;
      ++v16;
      v15 -= 8;
      if (-v14 == v12)
        goto LABEL_15;
    }
    v18 = (const void *)(v13 + 536 * *v16 + 24);
    if (v12)
    {
      *(_QWORD *)__src = *v16;
      if (v16 + 1 != (_QWORD *)v10)
      {
        memmove(v16, v16 + 1, v15);
        v9 = (char *)*v8;
      }
      *(_QWORD *)(a1 + 336) = (char *)v16 + (v15 & 0xFFFFFFFFFFFFFFF8);
      sub_20F435A18(v8, v9, __src);
    }
    ++*(_QWORD *)(a1 + 352);
    return (char *)memcpy(a4, v18, 0x200uLL);
  }
}

void sub_20F431E54(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 - 112);
  if (v3)
    MEMORY[0x212BC6368](v3, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F431E80(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  void **v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  void *v20;
  int v21;
  int v22;
  size_t v23;
  void *v24;
  uint64_t v25;
  size_t v26;
  void *v27;
  size_t v28;
  void *v29;
  int v30;
  void *v31;
  size_t v32;
  void *v33;
  uint64_t v34;
  size_t v35;
  void *v36;
  uint64_t v37;
  size_t v38;
  size_t v39;
  void *v40;
  unsigned int v41;
  char *v42;
  char *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  void *v47;
  __int128 v48;
  uint64_t v49;
  void *v50;
  void *v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  __int128 v64;
  void *v65;
  void *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void **v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  void *v97;
  __int128 v98;
  __int128 v99;
  char *v100;
  char *v101;
  void *v102;
  void *v103;
  uint64_t v104;
  void *v105;
  void *__p;
  char *v108;
  char *v109;
  __int128 v110;
  __int128 v111;
  int v112;
  void *__src;
  size_t v114;
  unsigned int v115;
  _QWORD v116[2];
  int v117;
  void *v118;
  size_t v119;
  int v120;
  void *v121;
  size_t v122;
  int v123;
  int v124;
  void *v125;
  size_t v126;
  int v127;
  uint64_t v128;
  void *v129;
  size_t v130;
  int v131;
  void *v132;
  size_t v133;
  int v134;
  void *v135;
  size_t v136;
  int v137;
  void *v138;
  size_t v139;
  int v140;
  uint64_t v141;
  int v142;
  __int128 v143;
  uint64_t v144;
  __int128 v145;
  __int128 v146;
  int v147;
  void *__dst[2];
  unsigned int v149;
  uint64_t (**v150)();
  uint64_t v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  _QWORD v156[6];
  _QWORD v157[4];
  uint64_t v158;
  uint64_t v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  uint64_t v167;
  int v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  uint64_t v173;
  void **p_p;
  char v175;

  *(_OWORD *)(a1 + 16) = 0u;
  v6 = (void **)(a1 + 16);
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 400) = &off_24C9E9620;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  __p = 0;
  v108 = 0;
  v109 = 0;
  v7 = *a2;
  v8 = a2[1];
  p_p = &__p;
  v175 = 0;
  v9 = v8 - v7;
  if (v8 == v7)
  {
    v13 = 0;
  }
  else
  {
    v10 = 0x6DB6DB6DB6DB6DB7 * (v9 >> 4);
    if (v10 >= 0x24924924924924ALL)
      sub_20E867F44();
    v11 = (char *)operator new(v9);
    v12 = 0;
    __p = v11;
    v108 = v11;
    v109 = &v11[112 * v10];
    do
    {
      sub_20F30FEE0((uint64_t)&v11[v12], v7 + v12);
      v12 += 112;
    }
    while (v7 + v12 != v8);
    v13 = &v11[v12];
    v108 = v13;
  }
  v110 = *(_OWORD *)(a2 + 3);
  v111 = *(_OWORD *)(a2 + 5);
  v112 = *((_DWORD *)a2 + 14);
  v14 = *((unsigned int *)a2 + 20);
  v15 = (4 * v14 + 31) & 0x7FFFFFFE0;
  __src = 0;
  v114 = v15 >> 2;
  v16 = operator new(v15, (std::align_val_t)0x20uLL);
  __src = v16;
  if ((_DWORD)v14)
    memcpy(v16, (const void *)a2[8], 4 * v14);
  v115 = v14;
  v17 = *(_QWORD *)(a3 + 8);
  v116[0] = &off_24CA000E0;
  v116[1] = v17;
  v117 = *(_DWORD *)(a3 + 16);
  v18 = *(unsigned int *)(a3 + 40);
  v19 = (4 * v18 + 31) & 0x7FFFFFFE0;
  v118 = 0;
  v119 = v19 >> 2;
  v20 = operator new(v19, (std::align_val_t)0x20uLL);
  v118 = v20;
  if ((_DWORD)v18)
    memcpy(v20, *(const void **)(a3 + 24), 4 * v18);
  v120 = v18;
  v21 = *(_DWORD *)(a3 + 64);
  v22 = *(_DWORD *)(a3 + 68);
  v23 = (4 * (v22 * v21) + 31) & 0x7FFFFFFE0;
  v121 = 0;
  v122 = v23 >> 2;
  v24 = operator new(v23, (std::align_val_t)0x20uLL);
  v121 = v24;
  if (v22 * v21)
    memcpy(v24, *(const void **)(a3 + 48), 4 * (v22 * v21));
  v123 = v21;
  v124 = v22;
  v25 = *(unsigned int *)(a3 + 88);
  v26 = (4 * v25 + 31) & 0x7FFFFFFE0;
  v125 = 0;
  v126 = v26 >> 2;
  v27 = operator new(v26, (std::align_val_t)0x20uLL);
  v125 = v27;
  if ((_DWORD)v25)
    memcpy(v27, *(const void **)(a3 + 72), 4 * v25);
  v127 = v25;
  v28 = *(unsigned int *)(a3 + 120);
  v128 = *(_QWORD *)(a3 + 96);
  v129 = 0;
  v130 = (v28 + 31) & 0x1FFFFFFE0;
  v29 = operator new(v130, (std::align_val_t)0x20uLL);
  v129 = v29;
  if ((_DWORD)v28)
    memcpy(v29, *(const void **)(a3 + 104), v28);
  v131 = v28;
  v30 = *(_DWORD *)(a3 + 144);
  v132 = 0;
  v133 = (v30 << 7);
  v31 = operator new(v133, (std::align_val_t)0x20uLL);
  v132 = v31;
  if (v30 << 7)
    memcpy(v31, *(const void **)(a3 + 128), (v30 << 7));
  v134 = v30;
  v32 = *(unsigned int *)(a3 + 168);
  v135 = 0;
  v136 = (v32 + 31) & 0x1FFFFFFE0;
  v33 = operator new(v136, (std::align_val_t)0x20uLL);
  v135 = v33;
  if ((_DWORD)v32)
    memcpy(v33, *(const void **)(a3 + 152), v32);
  v137 = v32;
  v34 = *(unsigned int *)(a3 + 192);
  v35 = (2 * v34 + 31) & 0x3FFFFFFE0;
  v138 = 0;
  v139 = v35 >> 1;
  v36 = operator new(v35, (std::align_val_t)0x20uLL);
  v138 = v36;
  if ((_DWORD)v34)
    memcpy(v36, *(const void **)(a3 + 176), 2 * v34);
  v140 = v34;
  v141 = *(_QWORD *)(a3 + 200);
  v142 = *(_DWORD *)(a3 + 208);
  v144 = 0;
  v143 = 0uLL;
  BYTE8(v145) = 0;
  BYTE4(v146) = 0;
  *((_QWORD *)&v146 + 1) = 0;
  v147 = 0;
  __dst[0] = 0;
  __dst[1] = 0;
  v149 = 0;
  v150 = &off_24CA000E0;
  v151 = 0;
  v152 = 10;
  LOWORD(v157[0]) = 0;
  v167 = 0;
  v168 = 0;
  v153 = 0;
  v154 = 0;
  v155 = 0;
  memset(v156, 0, 44);
  memset((char *)v157 + 4, 0, 24);
  v160 = 0;
  v158 = 0;
  v159 = 0;
  v163 = 0;
  v161 = 0;
  v162 = 0;
  v166 = 0;
  v164 = 0;
  v165 = 0;
  v173 = 0;
  v171 = 0u;
  v172 = 0u;
  v169 = 0u;
  v170 = 0u;
  sub_20F30F9B4((void **)&v143, (char *)__p, v13, 0x6DB6DB6DB6DB6DB7 * ((v13 - (_BYTE *)__p) >> 4));
  v145 = v110;
  v146 = v111;
  v147 = v112;
  v37 = v115;
  if (__dst[1] < (void *)v115)
  {
    if (__dst[0])
      MEMORY[0x212BC6368](__dst[0], 0x1000C8052888210);
    v38 = 4 * v37;
    v39 = (v38 + 31) & 0x7FFFFFFE0;
    __dst[0] = 0;
    __dst[1] = (void *)(v39 >> 2);
    v40 = operator new(v39, (std::align_val_t)0x20uLL);
    __dst[0] = v40;
    goto LABEL_29;
  }
  if (v115)
  {
    v40 = __dst[0];
    v38 = 4 * v115;
LABEL_29:
    memcpy(v40, __src, v38);
    v41 = v115;
    goto LABEL_30;
  }
  v41 = 0;
LABEL_30:
  v149 = v41;
  sub_20F30F608((uint64_t)&v150, (uint64_t)v116);
  if (*(_BYTE *)(a1 + 392))
  {
    v42 = (char *)*v6;
    if (*v6)
    {
      v43 = *(char **)(a1 + 24);
      v44 = *v6;
      if (v43 != v42)
      {
        do
        {
          v45 = (void *)*((_QWORD *)v43 - 3);
          if (v45)
          {
            *((_QWORD *)v43 - 2) = v45;
            operator delete(v45);
          }
          v46 = *((_QWORD *)v43 - 7);
          if (v46)
            MEMORY[0x212BC6368](v46, 0x1000C80BDFB0063);
          v47 = (void *)*((_QWORD *)v43 - 14);
          if (v47)
          {
            *((_QWORD *)v43 - 13) = v47;
            operator delete(v47);
          }
          v43 -= 112;
        }
        while (v43 != v42);
        v44 = *v6;
      }
      *(_QWORD *)(a1 + 24) = v42;
      operator delete(v44);
      *v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
    }
    *(_OWORD *)(a1 + 16) = v143;
    v64 = v146;
    *(_OWORD *)(a1 + 40) = v145;
    *(_QWORD *)(a1 + 32) = v144;
    v143 = 0uLL;
    *(_OWORD *)(a1 + 56) = v64;
    *(_DWORD *)(a1 + 72) = v147;
    v66 = *(void **)(a1 + 80);
    v65 = *(void **)(a1 + 88);
    v144 = 0;
    v67 = __dst[1];
    *(void **)(a1 + 80) = __dst[0];
    *(_QWORD *)(a1 + 88) = v67;
    __dst[0] = v66;
    __dst[1] = v65;
    *(_DWORD *)(a1 + 96) = v149;
    v149 = 0;
    v68 = v151;
    *(_DWORD *)(a1 + 120) = v152;
    *(_QWORD *)(a1 + 112) = v68;
    v69 = *(_QWORD *)(a1 + 128);
    v70 = *(_QWORD *)(a1 + 136);
    v71 = v154;
    *(_QWORD *)(a1 + 128) = v153;
    *(_QWORD *)(a1 + 136) = v71;
    v153 = v69;
    v154 = v70;
    *(_DWORD *)(a1 + 144) = v155;
    v155 = 0;
    v72 = *(_QWORD *)(a1 + 152);
    v73 = *(_QWORD *)(a1 + 160);
    v74 = v156[1];
    *(_QWORD *)(a1 + 152) = v156[0];
    *(_QWORD *)(a1 + 160) = v74;
    v156[0] = v72;
    v156[1] = v73;
    *(_QWORD *)(a1 + 168) = v156[2];
    v75 = *(_QWORD *)(a1 + 176);
    v76 = *(_QWORD *)(a1 + 184);
    v77 = v156[3];
    v78 = v156[4];
    v156[2] = 0;
    v156[3] = v75;
    *(_QWORD *)(a1 + 176) = v77;
    *(_QWORD *)(a1 + 184) = v78;
    v156[4] = v76;
    *(_DWORD *)(a1 + 192) = v156[5];
    LODWORD(v156[5]) = 0;
    v79 = v157[1];
    v80 = *(_QWORD *)(a1 + 208);
    v81 = *(_QWORD *)(a1 + 216);
    *(_QWORD *)(a1 + 200) = v157[0];
    *(_QWORD *)(a1 + 208) = v79;
    *(_QWORD *)(a1 + 216) = v157[2];
    v157[1] = v80;
    v157[2] = v81;
    *(_DWORD *)(a1 + 224) = v157[3];
    LODWORD(v157[3]) = 0;
    v82 = *(_QWORD *)(a1 + 232);
    v83 = *(_QWORD *)(a1 + 240);
    v84 = v159;
    *(_QWORD *)(a1 + 232) = v158;
    *(_QWORD *)(a1 + 240) = v84;
    v158 = v82;
    v159 = v83;
    *(_DWORD *)(a1 + 248) = v160;
    v160 = 0;
    v85 = *(_QWORD *)(a1 + 256);
    v86 = *(_QWORD *)(a1 + 264);
    v87 = v162;
    *(_QWORD *)(a1 + 256) = v161;
    *(_QWORD *)(a1 + 264) = v87;
    v161 = v85;
    v162 = v86;
    *(_DWORD *)(a1 + 272) = v163;
    v163 = 0;
    v88 = *(_QWORD *)(a1 + 280);
    v89 = *(_QWORD *)(a1 + 288);
    v90 = v165;
    *(_QWORD *)(a1 + 280) = v164;
    *(_QWORD *)(a1 + 288) = v90;
    v164 = v88;
    v165 = v89;
    *(_DWORD *)(a1 + 296) = v166;
    v166 = 0;
    v91 = v167;
    *(_DWORD *)(a1 + 312) = v168;
    *(_QWORD *)(a1 + 304) = v91;
    v92 = *(_QWORD *)(a1 + 320);
    if (v92)
    {
      v93 = (void **)(a1 + 320);
      v94 = *(_QWORD *)(a1 + 328);
      v95 = *(void **)(a1 + 320);
      if (v94 != v92)
      {
        do
        {
          v96 = *(_QWORD *)(v94 - 24);
          if (v96)
            MEMORY[0x212BC6368](v96, 0x1000C8052888210);
          v94 -= 48;
        }
        while (v94 != v92);
        v95 = *v93;
      }
      *(_QWORD *)(a1 + 328) = v92;
      operator delete(v95);
      *v93 = 0;
      *(_QWORD *)(a1 + 328) = 0;
      *(_QWORD *)(a1 + 336) = 0;
    }
    *(_OWORD *)(a1 + 320) = v169;
    *(_QWORD *)(a1 + 336) = v170;
    *(_QWORD *)&v170 = 0;
    v169 = 0uLL;
    v97 = *(void **)(a1 + 344);
    if (v97)
    {
      *(_QWORD *)(a1 + 352) = v97;
      operator delete(v97);
      *(_QWORD *)(a1 + 344) = 0;
      *(_QWORD *)(a1 + 352) = 0;
      *(_QWORD *)(a1 + 360) = 0;
    }
    *(_QWORD *)(a1 + 344) = *((_QWORD *)&v170 + 1);
    v98 = v171;
    v99 = v172;
    v171 = 0uLL;
    *((_QWORD *)&v170 + 1) = 0;
    *(_OWORD *)(a1 + 352) = v98;
    *(_OWORD *)(a1 + 368) = v99;
    *(_QWORD *)(a1 + 384) = v173;
    sub_20EDB165C((void **)&v143);
    sub_20F42FE8C(v116);
    v63 = __src;
    if (__src)
      goto LABEL_56;
  }
  else
  {
    *(_OWORD *)(a1 + 16) = v143;
    v143 = 0u;
    v48 = v146;
    *(_OWORD *)(a1 + 40) = v145;
    *(_OWORD *)(a1 + 56) = v48;
    v49 = v144;
    v50 = __dst[0];
    v51 = __dst[1];
    *(_OWORD *)__dst = 0u;
    *(_OWORD *)(a1 + 160) = *(_OWORD *)&v156[1];
    *(_OWORD *)&v156[1] = 0u;
    *(_OWORD *)(a1 + 320) = v169;
    v169 = 0u;
    v52 = v170;
    v53 = v171;
    v54 = v172;
    v171 = 0u;
    *(_QWORD *)(a1 + 32) = v49;
    *(_DWORD *)(a1 + 72) = v147;
    *(_QWORD *)(a1 + 80) = v50;
    *(_QWORD *)(a1 + 88) = v51;
    *(_DWORD *)(a1 + 96) = v149;
    *(_DWORD *)(a1 + 120) = v152;
    v144 = 0;
    v149 = 0;
    v55 = v151;
    *(_QWORD *)(a1 + 104) = &off_24CA000E0;
    *(_QWORD *)(a1 + 112) = v55;
    v56 = v154;
    *(_QWORD *)(a1 + 128) = v153;
    *(_QWORD *)(a1 + 136) = v56;
    v153 = 0;
    v154 = 0;
    *(_DWORD *)(a1 + 144) = v155;
    v155 = 0;
    *(_QWORD *)(a1 + 152) = v156[0];
    v156[0] = 0;
    v57 = v156[4];
    *(_QWORD *)(a1 + 176) = v156[3];
    *(_QWORD *)(a1 + 184) = v57;
    v156[3] = 0;
    v156[4] = 0;
    *(_DWORD *)(a1 + 192) = v156[5];
    LODWORD(v156[5]) = 0;
    v58 = v157[1];
    *(_QWORD *)(a1 + 200) = v157[0];
    *(_QWORD *)(a1 + 208) = v58;
    *(_QWORD *)(a1 + 216) = v157[2];
    v157[1] = 0;
    v157[2] = 0;
    *(_DWORD *)(a1 + 224) = v157[3];
    LODWORD(v157[3]) = 0;
    v59 = v159;
    *(_QWORD *)(a1 + 232) = v158;
    *(_QWORD *)(a1 + 240) = v59;
    v158 = 0;
    v159 = 0;
    *(_DWORD *)(a1 + 248) = v160;
    v160 = 0;
    v60 = v162;
    *(_QWORD *)(a1 + 256) = v161;
    *(_QWORD *)(a1 + 264) = v60;
    v161 = 0;
    v162 = 0;
    *(_DWORD *)(a1 + 272) = v163;
    v163 = 0;
    v61 = v165;
    *(_QWORD *)(a1 + 280) = v164;
    *(_QWORD *)(a1 + 288) = v61;
    v164 = 0;
    v165 = 0;
    *(_DWORD *)(a1 + 296) = v166;
    v166 = 0;
    v62 = v167;
    *(_DWORD *)(a1 + 312) = v168;
    *(_QWORD *)(a1 + 304) = v62;
    *(_QWORD *)&v170 = 0;
    *(_OWORD *)(a1 + 336) = v52;
    *((_QWORD *)&v170 + 1) = 0;
    *(_QWORD *)(a1 + 384) = v173;
    *(_OWORD *)(a1 + 352) = v53;
    *(_OWORD *)(a1 + 368) = v54;
    *(_BYTE *)(a1 + 392) = 1;
    sub_20EDB165C((void **)&v143);
    sub_20F42FE8C(v116);
    v63 = __src;
    if (__src)
LABEL_56:
      MEMORY[0x212BC6368](v63, 0x1000C8052888210);
  }
  v100 = (char *)__p;
  if (__p)
  {
    v101 = v108;
    v102 = __p;
    if (v108 != __p)
    {
      do
      {
        v103 = (void *)*((_QWORD *)v101 - 3);
        if (v103)
        {
          *((_QWORD *)v101 - 2) = v103;
          operator delete(v103);
        }
        v104 = *((_QWORD *)v101 - 7);
        if (v104)
          MEMORY[0x212BC6368](v104, 0x1000C80BDFB0063);
        v105 = (void *)*((_QWORD *)v101 - 14);
        if (v105)
        {
          *((_QWORD *)v101 - 13) = v105;
          operator delete(v105);
        }
        v101 -= 112;
      }
      while (v101 != v100);
      v102 = __p;
    }
    v108 = v100;
    operator delete(v102);
  }
  if (!*(_BYTE *)(a1 + 392))
    sub_20E866B34();
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = 1;
  return a1;
}

void sub_20F43280C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20F432A9C(v1);
  _Unwind_Resume(a1);
}

void sub_20F432820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v38 = v37;
  MEMORY[0x212BC6368](v38, 0x1000C8077774924);
  if (a36)
  {
    MEMORY[0x212BC6368](a36, 0x1000C8077774924);
    if (!a33)
    {
LABEL_3:
      if (!a29)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if (!a33)
  {
    goto LABEL_3;
  }
  MEMORY[0x212BC6368]();
  if (!a29)
  {
LABEL_4:
    if (!a26)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  MEMORY[0x212BC6368]();
  if (!a26)
  {
LABEL_5:
    if (!a23)
    {
LABEL_12:
      sub_20F431994(&a9);
      sub_20F432A9C(v36);
      _Unwind_Resume(a1);
    }
LABEL_11:
    MEMORY[0x212BC6368]();
    goto LABEL_12;
  }
LABEL_10:
  MEMORY[0x212BC6368]();
  if (!a23)
    goto LABEL_12;
  goto LABEL_11;
}

void sub_20F432958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  char *v10;
  void *v12;
  uint64_t v13;
  void *v14;

  if (a9)
  {
    if (v10 != (char *)a9)
    {
      do
      {
        v12 = (void *)*((_QWORD *)v10 - 3);
        if (v12)
        {
          *((_QWORD *)v10 - 2) = v12;
          operator delete(v12);
        }
        v13 = *((_QWORD *)v10 - 7);
        if (v13)
          MEMORY[0x212BC6368](v13, 0x1000C80BDFB0063);
        v14 = (void *)*((_QWORD *)v10 - 14);
        if (v14)
        {
          *((_QWORD *)v10 - 13) = v14;
          operator delete(v14);
        }
        v10 -= 112;
      }
      while (v10 != (char *)a9);
      v10 = (char *)a9;
    }
    operator delete(v10);
    sub_20F432A9C(v9);
    _Unwind_Resume(a1);
  }
  sub_20F432A9C(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_20F432A9C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(a1 + 400) = &off_24C9E9620;
  v2 = *(_QWORD *)(a1 + 408);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 416);
    v4 = *(void **)(a1 + 408);
    if (v3 != v2)
    {
      do
      {
        v6 = *(_QWORD *)(v3 - 48);
        v3 -= 48;
        v5 = v6;
        if (v6)
          MEMORY[0x212BC6368](v5, 0x1000C8052888210);
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 408);
    }
    *(_QWORD *)(a1 + 416) = v2;
    operator delete(v4);
  }
  if (*(_BYTE *)(a1 + 392))
    sub_20EDB165C((void **)(a1 + 16));
  return a1;
}

uint64_t sub_20F432B30(_QWORD **a1, __int128 *a2, uint64_t *a3, int a4)
{
  _QWORD *v6;
  uint64_t v7;
  float v8;
  float *v9;
  unint64_t v10;
  unint64_t v11;
  float32x4_t *v12;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float v16;
  float v17;
  unint64_t v18;
  float *v19;
  unint64_t v20;
  float32x4_t *v21;
  uint64_t v22;
  float32x4_t v23;
  uint64_t result;
  _QWORD v25[2];
  unsigned int v26;

  v6 = a1 + 50;
  sub_20F432F00(*a1, a3, a2, (uint64_t)v25);
  if (a4 && v26)
  {
    v7 = v25[0] + 4 * v26;
    v8 = *(float *)v25[0] * *(float *)v25[0];
    if (v26 != 1)
    {
      v9 = (float *)(v25[0] + 4);
      v10 = (v26 + 0x3FFFFFFFFFFFFFFELL) & 0x3FFFFFFFFFFFFFFFLL;
      if (v10 < 7)
        goto LABEL_18;
      v11 = v10 + 1;
      v9 += v11 & 0x7FFFFFFFFFFFFFF8;
      v12 = (float32x4_t *)(v25[0] + 20);
      v13 = v11 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v14 = vmulq_f32(v12[-1], v12[-1]);
        v15 = vmulq_f32(*v12, *v12);
        v8 = (float)((float)((float)((float)((float)((float)((float)(v8 + v14.f32[0]) + v14.f32[1]) + v14.f32[2])
                                           + v14.f32[3])
                                   + v15.f32[0])
                           + v15.f32[1])
                   + v15.f32[2])
           + v15.f32[3];
        v12 += 2;
        v13 -= 8;
      }
      while (v13);
      if (v11 != (v11 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_18:
        do
        {
          v16 = *v9++;
          v8 = v8 + (float)(v16 * v16);
        }
        while (v9 != (float *)v7);
      }
    }
    v17 = 1.0 / sqrtf(v8);
    v18 = (v26 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    v19 = (float *)v25[0];
    if (v18 < 7)
      goto LABEL_19;
    v20 = v18 + 1;
    v19 = (float *)(v25[0] + 4 * (v20 & 0x7FFFFFFFFFFFFFF8));
    v21 = (float32x4_t *)(v25[0] + 16);
    v22 = v20 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v23 = vmulq_n_f32(*v21, v17);
      v21[-1] = vmulq_n_f32(v21[-1], v17);
      *v21 = v23;
      v21 += 2;
      v22 -= 8;
    }
    while (v22);
    if (v20 != (v20 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_19:
      do
      {
        *v19 = v17 * *v19;
        ++v19;
      }
      while (v19 != (float *)v7);
    }
  }
  sub_20EDAF560(v6, (uint64_t)v25, a2);
  result = v25[0];
  if (v25[0])
    return MEMORY[0x212BC6368](v25[0], 0x1000C8052888210);
  return result;
}

void sub_20F432CCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    MEMORY[0x212BC6368](a10, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

float *sub_20F432CF4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  uint64_t v10;
  __n128 v13;
  float *v14;
  float v15;
  float *v16;
  unint64_t v17;
  unint64_t v18;
  float32x4_t *v19;
  uint64_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float v23;
  unint64_t v24;
  float *v25;
  unint64_t v26;
  float32x4_t *v27;
  uint64_t v28;
  float32x4_t v29;
  float *result;
  float *v31[2];
  unsigned int v32;

  v10 = *a1;
  if (*(_DWORD *)(a3 + 16) == -1 && *(_QWORD *)a3 == 12345 && *(_DWORD *)(a3 + 8) == -1)
  {
    sub_20F435DA0(*a1, a2, (uint64_t)v31);
    ++*(_QWORD *)(v10 + 368);
    if (!a5)
      goto LABEL_23;
  }
  else
  {
    sub_20F432F00((_QWORD *)*a1, a2, (__int128 *)a3, (uint64_t)v31);
    if (!a5)
      goto LABEL_23;
  }
  if (v32)
  {
    v14 = &v31[0][v32];
    v15 = *v31[0] * *v31[0];
    if (v32 != 1)
    {
      v16 = v31[0] + 1;
      v17 = (v32 + 0x3FFFFFFFFFFFFFFELL) & 0x3FFFFFFFFFFFFFFFLL;
      if (v17 < 7)
        goto LABEL_27;
      v18 = v17 + 1;
      v16 += v18 & 0x7FFFFFFFFFFFFFF8;
      v19 = (float32x4_t *)(v31[0] + 5);
      v20 = v18 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v21 = vmulq_f32(v19[-1], v19[-1]);
        v22 = vmulq_f32(*v19, *v19);
        v15 = (float)((float)((float)((float)((float)((float)((float)(v15 + v21.f32[0]) + v21.f32[1]) + v21.f32[2])
                                            + v21.f32[3])
                                    + v22.f32[0])
                            + v22.f32[1])
                    + v22.f32[2])
            + v22.f32[3];
        v19 += 2;
        v20 -= 8;
      }
      while (v20);
      if (v18 != (v18 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_27:
        do
        {
          v23 = *v16++;
          v15 = v15 + (float)(v23 * v23);
        }
        while (v16 != v14);
      }
    }
    v13.n128_f32[0] = 1.0 / sqrtf(v15);
    v24 = (v32 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    v25 = v31[0];
    if (v24 < 7)
      goto LABEL_28;
    v26 = v24 + 1;
    v25 = &v31[0][v26 & 0x7FFFFFFFFFFFFFF8];
    v27 = (float32x4_t *)(v31[0] + 4);
    v28 = v26 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v29 = vmulq_n_f32(*v27, v13.n128_f32[0]);
      v27[-1] = vmulq_n_f32(v27[-1], v13.n128_f32[0]);
      *v27 = v29;
      v27 += 2;
      v28 -= 8;
    }
    while (v28);
    if (v26 != (v26 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_28:
      do
      {
        *v25 = v13.n128_f32[0] * *v25;
        ++v25;
      }
      while (v25 != v14);
    }
  }
LABEL_23:
  sub_20EDAF900((uint64_t)(a1 + 50), v31, a4, a6, v13);
  result = v31[0];
  if (v31[0])
    return (float *)MEMORY[0x212BC6368](v31[0], 0x1000C8052888210);
  return result;
}

void sub_20F432ED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    MEMORY[0x212BC6368](a10, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

char *sub_20F432F00@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  void **v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  unint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  char *result;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  __int128 v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;

  v8 = (void **)(a1 + 41);
  v9 = (char *)a1[41];
  v10 = (char *)a1[42];
  v11 = v10 - v9;
  if (v10 == v9)
  {
LABEL_17:
    sub_20F435DA0((uint64_t)a1, a2, a4);
    ++a1[45];
    v22 = a1[42];
    if (v22 - a1[41] == 240)
    {
      v23 = *(_QWORD *)(v22 - 8);
      v46 = v23;
      a1[42] = v22 - 8;
    }
    else
    {
      v25 = (char *)a1[38];
      v24 = (char *)a1[39];
      v23 = 0xAAAAAAAAAAAAAAABLL * ((v24 - v25) >> 4);
      v46 = v23;
      if (v24 - v25 == -48)
      {
        v26 = (uint64_t)&v25[16 * ((v24 - v25) >> 4) + 48];
        while (v24 != (char *)v26)
        {
          v27 = *((_QWORD *)v24 - 3);
          if (v27)
            MEMORY[0x212BC6368](v27, 0x1000C8052888210);
          v24 -= 48;
        }
        a1[39] = v26;
      }
      else if ((char *)a1[40] == v24)
      {
        v34 = v23 + 1;
        if (v23 + 1 > 0x555555555555555)
          sub_20E867F44();
        if (0x5555555555555556 * ((v24 - v25) >> 4) > v34)
          v34 = 0x5555555555555556 * ((v24 - v25) >> 4);
        if (v23 >= 0x2AAAAAAAAAAAAAALL)
          v35 = 0x555555555555555;
        else
          v35 = v34;
        if (v35)
        {
          if (v35 > 0x555555555555555)
            sub_20E877A38();
          v36 = (char *)operator new(48 * v35);
        }
        else
        {
          v36 = 0;
        }
        v37 = &v36[16 * ((v24 - v25) >> 4)];
        *((_QWORD *)v37 + 2) = 0;
        *((_QWORD *)v37 + 3) = 0;
        v38 = &v36[48 * v35];
        *(_QWORD *)v37 = 0;
        *((_QWORD *)v37 + 1) = 0;
        *((_DWORD *)v37 + 4) = -1;
        *((_QWORD *)v37 + 4) = 0;
        *((_DWORD *)v37 + 10) = 0;
        v39 = v37 + 48;
        if (v24 == v25)
        {
          a1[38] = v37;
          a1[39] = v39;
          a1[40] = v38;
        }
        else
        {
          v40 = 0;
          do
          {
            v41 = &v37[v40];
            v42 = &v24[v40];
            v43 = *(_OWORD *)&v24[v40 - 48];
            *((_QWORD *)v41 - 4) = *(_QWORD *)&v24[v40 - 32];
            *((_OWORD *)v41 - 3) = v43;
            *((_QWORD *)v41 - 2) = 0;
            *((_QWORD *)v41 - 3) = *(_QWORD *)&v24[v40 - 24];
            *((_QWORD *)v42 - 3) = 0;
            *((_QWORD *)v41 - 2) = *(_QWORD *)&v24[v40 - 16];
            *((_QWORD *)v42 - 2) = 0;
            *((_DWORD *)v41 - 2) = *(_DWORD *)&v24[v40 - 8];
            *((_DWORD *)v42 - 2) = 0;
            v40 -= 48;
          }
          while (&v24[v40] != v25);
          v24 = (char *)a1[38];
          v44 = (char *)a1[39];
          a1[38] = &v37[v40];
          a1[39] = v39;
          a1[40] = v38;
          while (v44 != v24)
          {
            v45 = *((_QWORD *)v44 - 3);
            if (v45)
              MEMORY[0x212BC6368](v45, 0x1000C8052888210);
            v44 -= 48;
          }
        }
        if (v24)
          operator delete(v24);
      }
      else
      {
        *(_QWORD *)v24 = 0;
        *((_QWORD *)v24 + 1) = 0;
        *((_QWORD *)v24 + 2) = 0;
        *((_QWORD *)v24 + 3) = 0;
        *((_DWORD *)v24 + 4) = -1;
        *((_QWORD *)v24 + 4) = 0;
        *((_DWORD *)v24 + 10) = 0;
        a1[39] = v24 + 48;
      }
    }
    v28 = *(unsigned int *)(a4 + 16);
    v29 = operator new((4 * v28 + 31) & 0x7FFFFFFE0, (std::align_val_t)0x20uLL);
    v30 = v29;
    if ((_DWORD)v28)
      memcpy(v29, *(const void **)a4, 4 * v28);
    v31 = a1[38] + 48 * v23;
    v32 = *a3;
    *(_DWORD *)(v31 + 16) = *((_DWORD *)a3 + 4);
    *(_OWORD *)v31 = v32;
    v33 = *(_QWORD *)(v31 + 24);
    *(_QWORD *)(v31 + 24) = v30;
    *(_QWORD *)(v31 + 32) = ((4 * v28 + 31) & 0x7FFFFFFE0uLL) >> 2;
    *(_DWORD *)(v31 + 40) = v28;
    if (v33)
      MEMORY[0x212BC6368](v33, 0x1000C8052888210);
    return sub_20F435A18(v8, *v8, (char *)&v46);
  }
  else
  {
    v12 = 0;
    v13 = a1[38];
    if ((unint64_t)(v11 >> 3) <= 1)
      v14 = 1;
    else
      v14 = v11 >> 3;
    v15 = v11 - 8;
    v16 = (unint64_t *)a1[41];
    while (1)
    {
      v17 = v13 + 48 * *v16;
      if (*(_DWORD *)(v17 + 16) == *((_DWORD *)a3 + 4)
        && *(_QWORD *)v17 == *(_QWORD *)a3
        && *(_DWORD *)(v17 + 8) == *((_DWORD *)a3 + 2))
      {
        break;
      }
      --v12;
      ++v16;
      v15 -= 8;
      if (-v14 == v12)
        goto LABEL_17;
    }
    v18 = v13 + 48 * *v16 + 24;
    if (v12)
    {
      v46 = *v16;
      if (v16 + 1 != (unint64_t *)v10)
      {
        memmove(v16, v16 + 1, v15);
        v9 = (char *)*v8;
      }
      a1[42] = (char *)v16 + (v15 & 0xFFFFFFFFFFFFFFF8);
      sub_20F435A18(v8, v9, (char *)&v46);
    }
    ++a1[44];
    v19 = *(unsigned int *)(v18 + 16);
    v20 = (4 * v19 + 31) & 0x7FFFFFFE0;
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = v20 >> 2;
    result = (char *)operator new(v20, (std::align_val_t)0x20uLL);
    *(_QWORD *)a4 = result;
    if ((_DWORD)v19)
      result = (char *)memcpy(result, *(const void **)v18, 4 * v19);
    *(_DWORD *)(a4 + 16) = v19;
  }
  return result;
}

void sub_20F433304(_Unwind_Exception *exception_object)
{
  _QWORD *v1;

  if (*v1)
    MEMORY[0x212BC6368](*v1, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

void ***sub_20F433334(void ***result)
{
  void ***v1;
  void **v2;
  char *v3;
  char *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (char *)**result;
    if (v3)
    {
      v4 = (char *)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          v6 = (void *)*((_QWORD *)v4 - 3);
          if (v6)
          {
            *((_QWORD *)v4 - 2) = v6;
            operator delete(v6);
          }
          v7 = *((_QWORD *)v4 - 7);
          if (v7)
            MEMORY[0x212BC6368](v7, 0x1000C80BDFB0063);
          v8 = (void *)*((_QWORD *)v4 - 14);
          if (v8)
          {
            *((_QWORD *)v4 - 13) = v8;
            operator delete(v8);
          }
          v4 -= 112;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void **sub_20F4333F4(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  uint64_t v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = *((_QWORD *)v3 - 3);
        if (v5)
          MEMORY[0x212BC6368](v5, 0x1000C8052888210);
        v3 -= 48;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_20F433470@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int32x4_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int8x16_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int32x4_t *v25;
  unint64_t v26;
  __int32 v27;
  __int32 *v28;
  uint64_t v29;
  int32x4_t *v30;
  uint64_t v31;
  int32x4_t v32;
  int32x4_t v33;
  __int32 *v34;
  uint64_t v35;
  int32x4_t *v36;
  unint64_t v37;
  __int32 v38;
  __int32 *v39;
  unsigned int v40;
  uint64_t v41;
  int32x4_t *v42;
  uint64_t v43;
  int32x4_t v44;
  int32x4_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  int8x16_t *v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unsigned int v65;
  int v66;
  uint64_t v67;
  int8x16_t *v68;
  int8x16_t *v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t *v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t *v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t *v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  uint64_t v83;
  int16x8_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  int8x16_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int8x16_t v93;
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  int32x4_t *v97;
  int16x8_t v98;
  int16x8_t v99;
  int16x8_t v100;
  int16x8_t v101;
  int16x8_t v102;
  unsigned __int128 v103;
  int16x8_t v104;
  int8x16_t v105;
  int8x16_t v106;
  int8x16_t v107;
  int8x16_t v108;
  int16x8_t v109;
  int16x8_t v110;
  int16x8_t v111;
  int16x8_t v112;
  int16x8_t v113;
  int16x8_t v114;
  int16x8_t v115;
  unsigned __int128 v116;
  int16x8_t v117;
  int8x16_t v118;
  int8x16_t v119;
  int8x16_t v120;
  int8x16_t v121;
  int16x8_t v122;
  int16x8_t v123;
  int16x8_t v124;
  int16x8_t v125;
  int16x8_t v126;
  int16x8_t v127;
  int16x8_t v128;
  unsigned __int128 v129;
  int16x8_t v130;
  int8x16_t v131;
  int8x16_t v132;
  int8x16_t v133;
  int8x16_t v134;
  int16x8_t v135;
  int16x8_t v136;
  int16x8_t v137;
  int16x8_t v138;
  int16x8_t v139;
  int16x8_t v140;
  int16x8_t v141;
  int16x8_t v142;
  int16x8_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int8x16_t *v150;
  int8x16_t v151;
  int8x16_t v152;
  int8x16_t v153;
  int8x16_t *v154;
  int8x16_t v155;
  int8x16_t v156;
  int8x16_t v157;
  uint64_t v158;
  int16x8_t v159;
  int16x8_t v160;
  int8x16_t v161;
  int8x16_t v162;
  int8x16_t v163;
  int8x16_t v164;
  int16x8_t v165;
  int16x8_t v166;
  int8x16_t v167;
  int8x16_t v168;
  int16x8_t v169;
  int16x8_t v170;
  int16x8_t v171;
  int16x8_t v172;
  int16x8_t v173;
  int16x8_t v174;
  unsigned __int128 v175;
  int16x8_t v176;
  int8x16_t v177;
  int8x16_t v178;
  int16x8_t v179;
  int16x8_t v180;
  int16x8_t v181;
  int16x8_t v182;
  int16x8_t v183;
  int16x8_t v184;
  int16x8_t v185;
  unsigned __int128 v186;
  int16x8_t v187;
  int8x16_t v188;
  int8x16_t v189;
  int16x8_t v190;
  int16x8_t v191;
  int16x8_t v192;
  int16x8_t v193;
  int16x8_t v194;
  int16x8_t v195;
  int16x8_t v196;
  unsigned __int128 v197;
  int16x8_t v198;
  int8x16_t v199;
  int8x16_t v200;
  int16x8_t v201;
  int16x8_t v202;
  int16x8_t v203;
  int16x8_t v204;
  int16x8_t v205;
  int16x8_t v206;
  int16x8_t v207;
  uint64_t v208;
  int8x16_t v209;
  int8x16_t v210;
  int8x16_t v211;
  int8x16_t v212;
  int8x16_t v213;
  int8x16_t v214;
  int8x16_t v215;
  int8x16_t v216;
  int16x8_t v217;
  int16x8_t v218;
  int16x8_t v219;
  int16x8_t v220;
  int16x8_t v221;
  int16x8_t v222;
  int16x8_t v223;
  uint16x8_t v224;
  int8x16_t v225;
  int16x8_t v226;
  int16x8_t v227;
  int16x8_t v228;
  int16x8_t v229;
  int16x8_t v230;
  int16x8_t v231;
  int16x8_t v232;
  uint16x8_t v233;
  int8x16_t v234;
  int16x8_t v235;
  int16x8_t v236;
  int16x8_t v237;
  int16x8_t v238;
  int16x8_t v239;
  int16x8_t v240;
  int16x8_t v241;
  uint16x8_t v242;
  int8x16_t v243;
  int16x8_t v244;
  int16x8_t v245;
  int16x8_t v246;
  int16x8_t v247;
  int16x8_t v248;
  int16x8_t v249;
  int16x8_t v250;
  float *v251;
  unint64_t v252;
  unint64_t v253;
  __int16 *v254;
  uint64_t v255;
  unsigned int i;
  float v257;
  float v258;
  float v259;
  float v260;
  float v261;
  float v262;
  float v263;
  __int16 *v264;
  unsigned int v265;
  uint64_t v266;
  float v267;
  float v268;
  float v269;
  float v270;
  float v271;
  float v272;
  float v273;
  __int16 *v274;
  unsigned int v275;
  uint64_t v276;
  float v277;
  float v278;
  float v279;
  float v280;
  float v281;
  float v282;
  float v283;
  __int16 *v284;
  unsigned int v285;
  uint64_t v286;
  float v287;
  float v288;
  float v289;
  float v290;
  float v291;
  float v292;
  float v293;
  unint64_t v294;
  unint64_t v295;
  uint64_t v296;
  uint64_t v297;
  unsigned int v298;
  uint64_t v299;
  uint64_t v300;
  float *v301;
  float v302;
  float32x4_t v303;
  float32x4_t v304;
  uint64_t v305;
  float v306;
  float32x4_t *v307;
  float32x4_t v308;
  unint64_t v309;
  BOOL v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  unsigned int v314;
  uint64_t v315;
  uint64_t v316;
  float *v317;
  float v318;
  float32x4_t v319;
  float32x4_t v320;
  uint64_t v321;
  float v322;
  float32x4_t *v323;
  float32x4_t v324;
  uint64_t v325;
  uint64_t v326;
  unsigned int v327;
  uint64_t v328;
  uint64_t v329;
  float *v330;
  float v331;
  float32x4_t v332;
  float32x4_t v333;
  uint64_t v334;
  float v335;
  float32x4_t *v336;
  float32x4_t v337;
  float32x4_t *v338;
  float32x4_t v339;
  int v340;
  int v341;
  float v342;
  uint64_t v343;
  unint64_t v344;
  unint64_t v345;
  float *v346;
  unint64_t v347;
  float32x4_t *v348;
  float32x4_t v349;
  float32x4_t v350;
  uint64_t v351;
  float v352;
  unint64_t v353;
  float v354;
  unint64_t v355;
  float32x4_t *v356;
  float32x4_t v357;
  float *v358;
  float v359;
  uint64_t v360;
  float v361;
  unint64_t v362;
  float32x4_t *v363;
  float32x4_t v364;
  unint64_t v365;
  float32x4_t *v366;
  float32x4_t v367;
  float v368;
  uint64_t v369;
  unint64_t v370;
  unint64_t v371;
  float *v372;
  float32x4_t *v373;
  float32x4_t v374;
  float32x4_t v375;
  uint64_t v376;
  float v377;
  float v378;
  unint64_t v379;
  float32x4_t *v380;
  float32x4_t v381;
  uint64_t v382;
  uint64_t v383;
  size_t v384;
  void *v385;
  uint64_t v388;

  kdebug_trace();
  v6 = *a1;
  v388 = a1[1];
  if (*a1 != v388)
  {
    v7 = 0;
    while (1)
    {
      v8 = *(_QWORD *)(v6 + 24);
      v9 = a1[8];
      v10 = *(unsigned int *)(v6 + 72);
      if ((_DWORD)v10)
        bzero(*(void **)(v6 + 56), 2 * v10);
      v11 = *(int8x16_t **)v6;
      v12 = *(_QWORD *)(v6 + 8) - *(_QWORD *)v6;
      v13 = v12 >> 6;
      v14 = (unint64_t)(a2[1] - *a2) >> 6;
      *(_DWORD *)(v6 + 80) = v12 >> 6;
      v16 = (uint64_t *)(v6 + 88);
      v15 = *(_QWORD *)(v6 + 88);
      v17 = (v12 >> 5) & 0x1FFFFFFFELL;
      v18 = v17 + v14;
      v19 = *(_QWORD *)(v6 + 96);
      v20 = (v19 - v15) >> 2;
      if (v18 <= v20)
      {
        if (v18 < v20)
        {
          v19 = v15 + 4 * v18;
          *(_QWORD *)(v6 + 96) = v19;
        }
        v21 = v12 >> 6;
      }
      else
      {
        sub_20E93DC84(v6 + 88, v18 - v20);
        v15 = *(_QWORD *)(v6 + 88);
        v19 = *(_QWORD *)(v6 + 96);
        v21 = *(unsigned int *)(v6 + 80);
        v17 = 2 * v21;
      }
      v22 = ((v19 - v15) >> 2) - v17;
      v23 = v22;
      v24 = (v21 + v22);
      if (v22 != v24)
        break;
LABEL_20:
      if ((_DWORD)v21)
      {
        v35 = (v22 + 2 * v21);
        v36 = (int32x4_t *)(v15 + 4 * v23);
        v37 = 4 * v35 - 4 * v23 - 4;
        if (v37 < 0x1C)
        {
          v38 = v22;
          v39 = (__int32 *)(v15 + 4 * v23);
          goto LABEL_27;
        }
        v41 = (v37 >> 2) + 1;
        v38 = v22 + (v41 & 0xFFFFFFF8);
        v39 = &v36->i32[v41 & 0x7FFFFFFFFFFFFFF8];
        v5 = vaddq_s32(vdupq_n_s32(v22), (int32x4_t)xmmword_210365350);
        v42 = v36 + 1;
        v43 = v41 & 0x7FFFFFFFFFFFFFF8;
        v44.i64[0] = 0x400000004;
        v44.i64[1] = 0x400000004;
        v45.i64[0] = 0x800000008;
        v45.i64[1] = 0x800000008;
        do
        {
          v42[-1] = v5;
          *v42 = vaddq_s32(v5, v44);
          v5 = vaddq_s32(v5, v45);
          v42 += 2;
          v43 -= 8;
        }
        while (v43);
        if (v41 != (v41 & 0x7FFFFFFFFFFFFFF8))
        {
          do
LABEL_27:
            *v39++ = v38++;
          while (v39 != (__int32 *)(v15 + 4 * v35));
        }
        v40 = *(_DWORD *)(v6 + 80);
        goto LABEL_29;
      }
      v40 = 0;
LABEL_29:
      v46 = *a2;
      v47 = a2[1];
      v48 = ((unint64_t)(v19 - v15) >> 2) - v40;
      v49 = (v12 >> 6);
      if (*a2 != v47)
      {
        v50 = 0;
        do
        {
          if ((_DWORD)v13)
          {
            v53 = 0;
            v5 = *(int32x4_t *)v46;
            v54 = -1;
            v55 = v11 + 2;
            v51 = -1;
            do
            {
              v56 = v55[-2];
              v57 = v55[-1];
              v58 = *v55;
              v59 = v55[1];
              v55 += 4;
              v60 = vaddlvq_u8((uint8x16_t)vaddq_s8(vaddq_s8(vcntq_s8(veorq_s8(v57, *(int8x16_t *)(v46 + 16))), vcntq_s8(veorq_s8(v56, (int8x16_t)v5))), vaddq_s8(vcntq_s8(veorq_s8(v58, *(int8x16_t *)(v46 + 32))), vcntq_s8(veorq_s8(v59, *(int8x16_t *)(v46 + 48))))));
              if (v60 < v54)
              {
                v51 = v53;
                v54 = v60;
              }
              ++v53;
            }
            while (v49 != v53);
          }
          else
          {
            v51 = -1;
          }
          v52 = 4 * (v51 + v48);
          *(_DWORD *)(v15 + 4 * *(unsigned int *)(v15 + v52)) = v50;
          *(_DWORD *)(v15 + v52) = v50;
          v46 += 64;
          ++v50;
        }
        while (v46 != v47);
        v40 = *(_DWORD *)(v6 + 80);
      }
      if (v40)
      {
        v61 = v40;
        do
        {
          *(_DWORD *)(v15 + 4 * *(unsigned int *)(v15 + 4 * v48)) = v48;
          ++v48;
          --v61;
        }
        while (v61);
      }
      if ((_DWORD)v13)
      {
        v62 = 0;
        do
        {
          v63 = *(unsigned int *)(v6 + 80);
          v64 = (unint64_t)(*(_QWORD *)(v6 + 96) - v15) >> 2;
          v65 = *(_DWORD *)(v15 + 4 * (v62 - 2 * v63 + v64));
          v66 = v62 - v63 + v64;
          if (v66 != v65)
          {
            v67 = ((_DWORD)v62 << 9);
            v68 = &v11[4 * v62];
            do
            {
              v144 = *(unsigned int *)(v15 + 4 * v65);
              v145 = *(unsigned int *)(v15 + 4 * v144);
              v146 = v65;
              v147 = *(unsigned int *)(v15 + 4 * v145);
              if ((_DWORD)v144 == v66 || (_DWORD)v145 == v66 || (_DWORD)v147 == v66)
              {
                v150 = (int8x16_t *)(*a2 + (v146 << 6));
                if ((_DWORD)v144 == v66)
                {
                  v208 = *(_QWORD *)(v6 + 56) + 2 * v67;
                  v209 = v68[1];
                  v210 = v150[1];
                  v212 = v68[2];
                  v211 = v68[3];
                  v214 = v150[2];
                  v213 = v150[3];
                  v215 = veorq_s8(*v150, *v68);
                  v216.i64[0] = 0x1000100010001;
                  v216.i64[1] = 0x1000100010001;
                  v217 = vaddq_s16(*(int16x8_t *)(v208 + 16), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v215, 1uLL), v216));
                  *(int16x8_t *)v208 = vaddq_s16(*(int16x8_t *)v208, (int16x8_t)vandq_s8(v215, v216));
                  *(int16x8_t *)(v208 + 16) = v217;
                  v218 = vaddq_s16(*(int16x8_t *)(v208 + 48), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v215, 3uLL), v216));
                  *(int16x8_t *)(v208 + 32) = vaddq_s16(*(int16x8_t *)(v208 + 32), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v215, 2uLL), v216));
                  *(int16x8_t *)(v208 + 48) = v218;
                  v219 = vaddq_s16(*(int16x8_t *)(v208 + 80), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v215, 5uLL), v216));
                  *(int16x8_t *)(v208 + 64) = vaddq_s16(*(int16x8_t *)(v208 + 64), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v215, 4uLL), v216));
                  *(int16x8_t *)(v208 + 80) = v219;
                  v220 = vaddq_s16(*(int16x8_t *)(v208 + 112), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v215, 7uLL), v216));
                  *(int16x8_t *)(v208 + 96) = vaddq_s16(*(int16x8_t *)(v208 + 96), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v215, 6uLL), v216));
                  *(int16x8_t *)(v208 + 112) = v220;
                  v221 = vaddq_s16(*(int16x8_t *)(v208 + 144), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v215, 9uLL) & __PAIR128__(0xFF81FF81FF81FF81, 0xFF81FF81FF81FF81)));
                  *(int16x8_t *)(v208 + 128) = vaddq_s16(*(int16x8_t *)(v208 + 128), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v215, 8uLL) & __PAIR128__(0xFF01FF01FF01FF01, 0xFF01FF01FF01FF01)));
                  *(int16x8_t *)(v208 + 144) = v221;
                  v222 = vaddq_s16(*(int16x8_t *)(v208 + 176), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v215, 0xBuLL) & __PAIR128__(0xFFE1FFE1FFE1FFE1, 0xFFE1FFE1FFE1FFE1)));
                  *(int16x8_t *)(v208 + 160) = vaddq_s16(*(int16x8_t *)(v208 + 160), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v215, 0xAuLL) & __PAIR128__(0xFFC1FFC1FFC1FFC1, 0xFFC1FFC1FFC1FFC1)));
                  *(int16x8_t *)(v208 + 176) = v222;
                  v223 = vaddq_s16(*(int16x8_t *)(v208 + 208), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v215, 0xDuLL) & __PAIR128__(0xFFF9FFF9FFF9FFF9, 0xFFF9FFF9FFF9FFF9)));
                  *(int16x8_t *)(v208 + 192) = vaddq_s16(*(int16x8_t *)(v208 + 192), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v215, 0xCuLL) & __PAIR128__(0xFFF1FFF1FFF1FFF1, 0xFFF1FFF1FFF1FFF1)));
                  *(int16x8_t *)(v208 + 208) = v223;
                  v97 = (int32x4_t *)(v208 + 1008);
                  v224 = vsraq_n_u16(*(uint16x8_t *)(v208 + 240), (uint16x8_t)v215, 0xFuLL);
                  *(int16x8_t *)(v208 + 224) = vaddq_s16(*(int16x8_t *)(v208 + 224), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v215, 0xEuLL) & __PAIR128__(0xFFFDFFFDFFFDFFFDLL, 0xFFFDFFFDFFFDFFFDLL)));
                  *(uint16x8_t *)(v208 + 240) = v224;
                  v225 = veorq_s8(v210, v209);
                  v226 = vaddq_s16(*(int16x8_t *)(v208 + 272), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v225, 1uLL), v216));
                  *(int16x8_t *)(v208 + 256) = vaddq_s16(*(int16x8_t *)(v208 + 256), (int16x8_t)vandq_s8(v225, v216));
                  *(int16x8_t *)(v208 + 272) = v226;
                  v227 = vaddq_s16(*(int16x8_t *)(v208 + 304), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v225, 3uLL), v216));
                  *(int16x8_t *)(v208 + 288) = vaddq_s16(*(int16x8_t *)(v208 + 288), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v225, 2uLL), v216));
                  *(int16x8_t *)(v208 + 304) = v227;
                  v228 = vaddq_s16(*(int16x8_t *)(v208 + 336), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v225, 5uLL), v216));
                  *(int16x8_t *)(v208 + 320) = vaddq_s16(*(int16x8_t *)(v208 + 320), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v225, 4uLL), v216));
                  *(int16x8_t *)(v208 + 336) = v228;
                  v229 = vaddq_s16(*(int16x8_t *)(v208 + 368), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v225, 7uLL), v216));
                  *(int16x8_t *)(v208 + 352) = vaddq_s16(*(int16x8_t *)(v208 + 352), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v225, 6uLL), v216));
                  *(int16x8_t *)(v208 + 368) = v229;
                  v230 = vaddq_s16(*(int16x8_t *)(v208 + 400), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v225, 9uLL) & __PAIR128__(0xFF81FF81FF81FF81, 0xFF81FF81FF81FF81)));
                  *(int16x8_t *)(v208 + 384) = vaddq_s16(*(int16x8_t *)(v208 + 384), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v225, 8uLL) & __PAIR128__(0xFF01FF01FF01FF01, 0xFF01FF01FF01FF01)));
                  *(int16x8_t *)(v208 + 400) = v230;
                  v231 = vaddq_s16(*(int16x8_t *)(v208 + 432), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v225, 0xBuLL) & __PAIR128__(0xFFE1FFE1FFE1FFE1, 0xFFE1FFE1FFE1FFE1)));
                  *(int16x8_t *)(v208 + 416) = vaddq_s16(*(int16x8_t *)(v208 + 416), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v225, 0xAuLL) & __PAIR128__(0xFFC1FFC1FFC1FFC1, 0xFFC1FFC1FFC1FFC1)));
                  *(int16x8_t *)(v208 + 432) = v231;
                  v232 = vaddq_s16(*(int16x8_t *)(v208 + 464), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v225, 0xDuLL) & __PAIR128__(0xFFF9FFF9FFF9FFF9, 0xFFF9FFF9FFF9FFF9)));
                  *(int16x8_t *)(v208 + 448) = vaddq_s16(*(int16x8_t *)(v208 + 448), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v225, 0xCuLL) & __PAIR128__(0xFFF1FFF1FFF1FFF1, 0xFFF1FFF1FFF1FFF1)));
                  *(int16x8_t *)(v208 + 464) = v232;
                  v233 = vsraq_n_u16(*(uint16x8_t *)(v208 + 496), (uint16x8_t)v225, 0xFuLL);
                  *(int16x8_t *)(v208 + 480) = vaddq_s16(*(int16x8_t *)(v208 + 480), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v225, 0xEuLL) & __PAIR128__(0xFFFDFFFDFFFDFFFDLL, 0xFFFDFFFDFFFDFFFDLL)));
                  *(uint16x8_t *)(v208 + 496) = v233;
                  v234 = veorq_s8(v214, v212);
                  v235 = vaddq_s16(*(int16x8_t *)(v208 + 528), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v234, 1uLL), v216));
                  *(int16x8_t *)(v208 + 512) = vaddq_s16(*(int16x8_t *)(v208 + 512), (int16x8_t)vandq_s8(v234, v216));
                  *(int16x8_t *)(v208 + 528) = v235;
                  v236 = vaddq_s16(*(int16x8_t *)(v208 + 560), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v234, 3uLL), v216));
                  *(int16x8_t *)(v208 + 544) = vaddq_s16(*(int16x8_t *)(v208 + 544), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v234, 2uLL), v216));
                  *(int16x8_t *)(v208 + 560) = v236;
                  v237 = vaddq_s16(*(int16x8_t *)(v208 + 592), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v234, 5uLL), v216));
                  *(int16x8_t *)(v208 + 576) = vaddq_s16(*(int16x8_t *)(v208 + 576), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v234, 4uLL), v216));
                  *(int16x8_t *)(v208 + 592) = v237;
                  v238 = vaddq_s16(*(int16x8_t *)(v208 + 624), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v234, 7uLL), v216));
                  *(int16x8_t *)(v208 + 608) = vaddq_s16(*(int16x8_t *)(v208 + 608), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v234, 6uLL), v216));
                  *(int16x8_t *)(v208 + 624) = v238;
                  v239 = vaddq_s16(*(int16x8_t *)(v208 + 656), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v234, 9uLL) & __PAIR128__(0xFF81FF81FF81FF81, 0xFF81FF81FF81FF81)));
                  *(int16x8_t *)(v208 + 640) = vaddq_s16(*(int16x8_t *)(v208 + 640), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v234, 8uLL) & __PAIR128__(0xFF01FF01FF01FF01, 0xFF01FF01FF01FF01)));
                  *(int16x8_t *)(v208 + 656) = v239;
                  v240 = vaddq_s16(*(int16x8_t *)(v208 + 688), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v234, 0xBuLL) & __PAIR128__(0xFFE1FFE1FFE1FFE1, 0xFFE1FFE1FFE1FFE1)));
                  *(int16x8_t *)(v208 + 672) = vaddq_s16(*(int16x8_t *)(v208 + 672), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v234, 0xAuLL) & __PAIR128__(0xFFC1FFC1FFC1FFC1, 0xFFC1FFC1FFC1FFC1)));
                  *(int16x8_t *)(v208 + 688) = v240;
                  v241 = vaddq_s16(*(int16x8_t *)(v208 + 720), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v234, 0xDuLL) & __PAIR128__(0xFFF9FFF9FFF9FFF9, 0xFFF9FFF9FFF9FFF9)));
                  *(int16x8_t *)(v208 + 704) = vaddq_s16(*(int16x8_t *)(v208 + 704), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v234, 0xCuLL) & __PAIR128__(0xFFF1FFF1FFF1FFF1, 0xFFF1FFF1FFF1FFF1)));
                  *(int16x8_t *)(v208 + 720) = v241;
                  v242 = vsraq_n_u16(*(uint16x8_t *)(v208 + 752), (uint16x8_t)v234, 0xFuLL);
                  *(int16x8_t *)(v208 + 736) = vaddq_s16(*(int16x8_t *)(v208 + 736), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v234, 0xEuLL) & __PAIR128__(0xFFFDFFFDFFFDFFFDLL, 0xFFFDFFFDFFFDFFFDLL)));
                  *(uint16x8_t *)(v208 + 752) = v242;
                  v243 = veorq_s8(v213, v211);
                  v244 = vaddq_s16(*(int16x8_t *)(v208 + 784), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v243, 1uLL), v216));
                  *(int16x8_t *)(v208 + 768) = vaddq_s16(*(int16x8_t *)(v208 + 768), (int16x8_t)vandq_s8(v243, v216));
                  *(int16x8_t *)(v208 + 784) = v244;
                  v245 = vaddq_s16(*(int16x8_t *)(v208 + 816), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v243, 3uLL), v216));
                  *(int16x8_t *)(v208 + 800) = vaddq_s16(*(int16x8_t *)(v208 + 800), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v243, 2uLL), v216));
                  *(int16x8_t *)(v208 + 816) = v245;
                  v246 = vaddq_s16(*(int16x8_t *)(v208 + 848), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v243, 5uLL), v216));
                  *(int16x8_t *)(v208 + 832) = vaddq_s16(*(int16x8_t *)(v208 + 832), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v243, 4uLL), v216));
                  *(int16x8_t *)(v208 + 848) = v246;
                  v247 = vaddq_s16(*(int16x8_t *)(v208 + 880), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v243, 7uLL), v216));
                  *(int16x8_t *)(v208 + 864) = vaddq_s16(*(int16x8_t *)(v208 + 864), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v243, 6uLL), v216));
                  *(int16x8_t *)(v208 + 880) = v247;
                  v248 = vaddq_s16(*(int16x8_t *)(v208 + 912), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v243, 9uLL) & __PAIR128__(0xFF81FF81FF81FF81, 0xFF81FF81FF81FF81)));
                  *(int16x8_t *)(v208 + 896) = vaddq_s16(*(int16x8_t *)(v208 + 896), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v243, 8uLL) & __PAIR128__(0xFF01FF01FF01FF01, 0xFF01FF01FF01FF01)));
                  *(int16x8_t *)(v208 + 912) = v248;
                  v249 = vaddq_s16(*(int16x8_t *)(v208 + 944), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v243, 0xBuLL) & __PAIR128__(0xFFE1FFE1FFE1FFE1, 0xFFE1FFE1FFE1FFE1)));
                  *(int16x8_t *)(v208 + 928) = vaddq_s16(*(int16x8_t *)(v208 + 928), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v243, 0xAuLL) & __PAIR128__(0xFFC1FFC1FFC1FFC1, 0xFFC1FFC1FFC1FFC1)));
                  *(int16x8_t *)(v208 + 944) = v249;
                  v250 = vaddq_s16(*(int16x8_t *)(v208 + 976), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v243, 0xDuLL) & __PAIR128__(0xFFF9FFF9FFF9FFF9, 0xFFF9FFF9FFF9FFF9)));
                  *(int16x8_t *)(v208 + 960) = vaddq_s16(*(int16x8_t *)(v208 + 960), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v243, 0xCuLL) & __PAIR128__(0xFFF1FFF1FFF1FFF1, 0xFFF1FFF1FFF1FFF1)));
                  *(int16x8_t *)(v208 + 976) = v250;
                  v143 = *(int16x8_t *)(v208 + 1008);
                  v142 = (int16x8_t)vshrq_n_u16((uint16x8_t)v243, 0xFuLL);
                  v144 = v146;
                  *(int16x8_t *)(v208 + 992) = vaddq_s16(*(int16x8_t *)(v208 + 992), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v243, 0xEuLL) & __PAIR128__(0xFFFDFFFDFFFDFFFDLL, 0xFFFDFFFDFFFDFFFDLL)));
                }
                else
                {
                  v151 = v68[1];
                  v152 = v150[1];
                  v153 = veorq_s8(*v150, *v68);
                  v154 = (int8x16_t *)(*a2 + (v144 << 6));
                  v155 = v154[1];
                  v156 = veorq_s8(*v154, *v68);
                  v157.i64[0] = 0x1000100010001;
                  v157.i64[1] = 0x1000100010001;
                  v158 = *(_QWORD *)(v6 + 56) + 2 * v67;
                  v159 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v156, 1uLL), v157), vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v153, 1uLL), v157), *(int16x8_t *)(v158 + 16)));
                  v160 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v156, 2uLL), v157), vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v153, 2uLL), v157), *(int16x8_t *)(v158 + 32)));
                  v162 = v68[2];
                  v161 = v68[3];
                  v164 = v150[2];
                  v163 = v150[3];
                  v165 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v156, 3uLL), v157), vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v153, 3uLL), v157), *(int16x8_t *)(v158 + 48)));
                  v166 = *(int16x8_t *)(v158 + 80);
                  v168 = v154[2];
                  v167 = v154[3];
                  v169 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v156, 4uLL), v157), vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v153, 4uLL), v157), *(int16x8_t *)(v158 + 64)));
                  *(int16x8_t *)v158 = vaddq_s16((int16x8_t)vandq_s8(v156, v157), vaddq_s16((int16x8_t)vandq_s8(v153, v157), *(int16x8_t *)v158));
                  *(int16x8_t *)(v158 + 16) = v159;
                  *(int16x8_t *)(v158 + 32) = v160;
                  *(int16x8_t *)(v158 + 48) = v165;
                  v170 = *(int16x8_t *)(v158 + 112);
                  v171 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v153, 6uLL), v157), *(int16x8_t *)(v158 + 96));
                  *(int16x8_t *)(v158 + 64) = v169;
                  *(int16x8_t *)(v158 + 80) = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v156, 5uLL), v157), vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v153, 5uLL), v157), v166));
                  v97 = (int32x4_t *)(v158 + 1008);
                  *(int16x8_t *)(v158 + 96) = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v156, 6uLL), v157), v171);
                  *(int16x8_t *)(v158 + 112) = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v156, 7uLL), v157), vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v153, 7uLL), v157), v170));
                  v172 = vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v156, 9uLL) & __PAIR128__(0xFF81FF81FF81FF81, 0xFF81FF81FF81FF81)), vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v153, 9uLL) & __PAIR128__(0xFF81FF81FF81FF81, 0xFF81FF81FF81FF81)), *(int16x8_t *)(v158 + 144)));
                  *(int16x8_t *)(v158 + 128) = vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v156, 8uLL) & __PAIR128__(0xFF01FF01FF01FF01, 0xFF01FF01FF01FF01)), vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v153, 8uLL) & __PAIR128__(0xFF01FF01FF01FF01, 0xFF01FF01FF01FF01)), *(int16x8_t *)(v158 + 128)));
                  *(int16x8_t *)(v158 + 144) = v172;
                  v173 = vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v156, 0xBuLL) & __PAIR128__(0xFFE1FFE1FFE1FFE1, 0xFFE1FFE1FFE1FFE1)), vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v153, 0xBuLL) & __PAIR128__(0xFFE1FFE1FFE1FFE1, 0xFFE1FFE1FFE1FFE1)), *(int16x8_t *)(v158 + 176)));
                  *(int16x8_t *)(v158 + 160) = vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v156, 0xAuLL) & __PAIR128__(0xFFC1FFC1FFC1FFC1, 0xFFC1FFC1FFC1FFC1)), vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v153, 0xAuLL) & __PAIR128__(0xFFC1FFC1FFC1FFC1, 0xFFC1FFC1FFC1FFC1)), *(int16x8_t *)(v158 + 160)));
                  *(int16x8_t *)(v158 + 176) = v173;
                  v174 = vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v156, 0xDuLL) & __PAIR128__(0xFFF9FFF9FFF9FFF9, 0xFFF9FFF9FFF9FFF9)), vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v153, 0xDuLL) & __PAIR128__(0xFFF9FFF9FFF9FFF9, 0xFFF9FFF9FFF9FFF9)), *(int16x8_t *)(v158 + 208)));
                  *(int16x8_t *)(v158 + 192) = vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v156, 0xCuLL) & __PAIR128__(0xFFF1FFF1FFF1FFF1, 0xFFF1FFF1FFF1FFF1)), vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v153, 0xCuLL) & __PAIR128__(0xFFF1FFF1FFF1FFF1, 0xFFF1FFF1FFF1FFF1)), *(int16x8_t *)(v158 + 192)));
                  *(int16x8_t *)(v158 + 208) = v174;
                  v175 = *(_OWORD *)&vshrq_n_u16((uint16x8_t)v153, 0xEuLL) & __PAIR128__(0xFFFDFFFDFFFDFFFDLL, 0xFFFDFFFDFFFDFFFDLL);
                  v176 = vaddq_s16((int16x8_t)vsraq_n_u16(vshrq_n_u16((uint16x8_t)v156, 0xFuLL), (uint16x8_t)v153, 0xFuLL), *(int16x8_t *)(v158 + 240));
                  *(int16x8_t *)(v158 + 224) = vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v156, 0xEuLL) & __PAIR128__(0xFFFDFFFDFFFDFFFDLL, 0xFFFDFFFDFFFDFFFDLL)), vaddq_s16((int16x8_t)v175, *(int16x8_t *)(v158 + 224)));
                  *(int16x8_t *)(v158 + 240) = v176;
                  v177 = veorq_s8(v152, v151);
                  v178 = veorq_s8(v155, v151);
                  v179 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v178, 1uLL), v157), vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v177, 1uLL), v157), *(int16x8_t *)(v158 + 272)));
                  *(int16x8_t *)(v158 + 256) = vaddq_s16((int16x8_t)vandq_s8(v178, v157), vaddq_s16((int16x8_t)vandq_s8(v177, v157), *(int16x8_t *)(v158 + 256)));
                  *(int16x8_t *)(v158 + 272) = v179;
                  v180 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v178, 3uLL), v157), vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v177, 3uLL), v157), *(int16x8_t *)(v158 + 304)));
                  *(int16x8_t *)(v158 + 288) = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v178, 2uLL), v157), vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v177, 2uLL), v157), *(int16x8_t *)(v158 + 288)));
                  *(int16x8_t *)(v158 + 304) = v180;
                  v181 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v178, 5uLL), v157), vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v177, 5uLL), v157), *(int16x8_t *)(v158 + 336)));
                  *(int16x8_t *)(v158 + 320) = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v178, 4uLL), v157), vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v177, 4uLL), v157), *(int16x8_t *)(v158 + 320)));
                  *(int16x8_t *)(v158 + 336) = v181;
                  v182 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v178, 7uLL), v157), vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v177, 7uLL), v157), *(int16x8_t *)(v158 + 368)));
                  *(int16x8_t *)(v158 + 352) = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v178, 6uLL), v157), vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v177, 6uLL), v157), *(int16x8_t *)(v158 + 352)));
                  *(int16x8_t *)(v158 + 368) = v182;
                  v183 = vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v178, 9uLL) & __PAIR128__(0xFF81FF81FF81FF81, 0xFF81FF81FF81FF81)), vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v177, 9uLL) & __PAIR128__(0xFF81FF81FF81FF81, 0xFF81FF81FF81FF81)), *(int16x8_t *)(v158 + 400)));
                  *(int16x8_t *)(v158 + 384) = vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v178, 8uLL) & __PAIR128__(0xFF01FF01FF01FF01, 0xFF01FF01FF01FF01)), vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v177, 8uLL) & __PAIR128__(0xFF01FF01FF01FF01, 0xFF01FF01FF01FF01)), *(int16x8_t *)(v158 + 384)));
                  *(int16x8_t *)(v158 + 400) = v183;
                  v184 = vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v178, 0xBuLL) & __PAIR128__(0xFFE1FFE1FFE1FFE1, 0xFFE1FFE1FFE1FFE1)), vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v177, 0xBuLL) & __PAIR128__(0xFFE1FFE1FFE1FFE1, 0xFFE1FFE1FFE1FFE1)), *(int16x8_t *)(v158 + 432)));
                  *(int16x8_t *)(v158 + 416) = vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v178, 0xAuLL) & __PAIR128__(0xFFC1FFC1FFC1FFC1, 0xFFC1FFC1FFC1FFC1)), vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v177, 0xAuLL) & __PAIR128__(0xFFC1FFC1FFC1FFC1, 0xFFC1FFC1FFC1FFC1)), *(int16x8_t *)(v158 + 416)));
                  *(int16x8_t *)(v158 + 432) = v184;
                  v185 = vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v178, 0xDuLL) & __PAIR128__(0xFFF9FFF9FFF9FFF9, 0xFFF9FFF9FFF9FFF9)), vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v177, 0xDuLL) & __PAIR128__(0xFFF9FFF9FFF9FFF9, 0xFFF9FFF9FFF9FFF9)), *(int16x8_t *)(v158 + 464)));
                  *(int16x8_t *)(v158 + 448) = vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v178, 0xCuLL) & __PAIR128__(0xFFF1FFF1FFF1FFF1, 0xFFF1FFF1FFF1FFF1)), vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v177, 0xCuLL) & __PAIR128__(0xFFF1FFF1FFF1FFF1, 0xFFF1FFF1FFF1FFF1)), *(int16x8_t *)(v158 + 448)));
                  *(int16x8_t *)(v158 + 464) = v185;
                  v186 = *(_OWORD *)&vshrq_n_u16((uint16x8_t)v178, 0xEuLL) & __PAIR128__(0xFFFDFFFDFFFDFFFDLL, 0xFFFDFFFDFFFDFFFDLL);
                  v187 = vaddq_s16((int16x8_t)vsraq_n_u16(vshrq_n_u16((uint16x8_t)v178, 0xFuLL), (uint16x8_t)v177, 0xFuLL), *(int16x8_t *)(v158 + 496));
                  *(int16x8_t *)(v158 + 480) = vaddq_s16((int16x8_t)v186, vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v177, 0xEuLL) & __PAIR128__(0xFFFDFFFDFFFDFFFDLL, 0xFFFDFFFDFFFDFFFDLL)), *(int16x8_t *)(v158 + 480)));
                  *(int16x8_t *)(v158 + 496) = v187;
                  v188 = veorq_s8(v164, v162);
                  v189 = veorq_s8(v168, v162);
                  v190 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v189, 1uLL), v157), vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v188, 1uLL), v157), *(int16x8_t *)(v158 + 528)));
                  *(int16x8_t *)(v158 + 512) = vaddq_s16((int16x8_t)vandq_s8(v189, v157), vaddq_s16((int16x8_t)vandq_s8(v188, v157), *(int16x8_t *)(v158 + 512)));
                  *(int16x8_t *)(v158 + 528) = v190;
                  v191 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v189, 3uLL), v157), vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v188, 3uLL), v157), *(int16x8_t *)(v158 + 560)));
                  *(int16x8_t *)(v158 + 544) = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v189, 2uLL), v157), vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v188, 2uLL), v157), *(int16x8_t *)(v158 + 544)));
                  *(int16x8_t *)(v158 + 560) = v191;
                  v192 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v189, 5uLL), v157), vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v188, 5uLL), v157), *(int16x8_t *)(v158 + 592)));
                  *(int16x8_t *)(v158 + 576) = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v189, 4uLL), v157), vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v188, 4uLL), v157), *(int16x8_t *)(v158 + 576)));
                  *(int16x8_t *)(v158 + 592) = v192;
                  v193 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v189, 7uLL), v157), vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v188, 7uLL), v157), *(int16x8_t *)(v158 + 624)));
                  *(int16x8_t *)(v158 + 608) = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v189, 6uLL), v157), vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v188, 6uLL), v157), *(int16x8_t *)(v158 + 608)));
                  *(int16x8_t *)(v158 + 624) = v193;
                  v194 = vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v189, 9uLL) & __PAIR128__(0xFF81FF81FF81FF81, 0xFF81FF81FF81FF81)), vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v188, 9uLL) & __PAIR128__(0xFF81FF81FF81FF81, 0xFF81FF81FF81FF81)), *(int16x8_t *)(v158 + 656)));
                  *(int16x8_t *)(v158 + 640) = vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v189, 8uLL) & __PAIR128__(0xFF01FF01FF01FF01, 0xFF01FF01FF01FF01)), vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v188, 8uLL) & __PAIR128__(0xFF01FF01FF01FF01, 0xFF01FF01FF01FF01)), *(int16x8_t *)(v158 + 640)));
                  *(int16x8_t *)(v158 + 656) = v194;
                  v195 = vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v189, 0xBuLL) & __PAIR128__(0xFFE1FFE1FFE1FFE1, 0xFFE1FFE1FFE1FFE1)), vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v188, 0xBuLL) & __PAIR128__(0xFFE1FFE1FFE1FFE1, 0xFFE1FFE1FFE1FFE1)), *(int16x8_t *)(v158 + 688)));
                  *(int16x8_t *)(v158 + 672) = vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v189, 0xAuLL) & __PAIR128__(0xFFC1FFC1FFC1FFC1, 0xFFC1FFC1FFC1FFC1)), vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v188, 0xAuLL) & __PAIR128__(0xFFC1FFC1FFC1FFC1, 0xFFC1FFC1FFC1FFC1)), *(int16x8_t *)(v158 + 672)));
                  *(int16x8_t *)(v158 + 688) = v195;
                  v196 = vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v189, 0xDuLL) & __PAIR128__(0xFFF9FFF9FFF9FFF9, 0xFFF9FFF9FFF9FFF9)), vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v188, 0xDuLL) & __PAIR128__(0xFFF9FFF9FFF9FFF9, 0xFFF9FFF9FFF9FFF9)), *(int16x8_t *)(v158 + 720)));
                  *(int16x8_t *)(v158 + 704) = vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v189, 0xCuLL) & __PAIR128__(0xFFF1FFF1FFF1FFF1, 0xFFF1FFF1FFF1FFF1)), vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v188, 0xCuLL) & __PAIR128__(0xFFF1FFF1FFF1FFF1, 0xFFF1FFF1FFF1FFF1)), *(int16x8_t *)(v158 + 704)));
                  *(int16x8_t *)(v158 + 720) = v196;
                  v197 = *(_OWORD *)&vshrq_n_u16((uint16x8_t)v189, 0xEuLL) & __PAIR128__(0xFFFDFFFDFFFDFFFDLL, 0xFFFDFFFDFFFDFFFDLL);
                  v198 = vaddq_s16((int16x8_t)vsraq_n_u16(vshrq_n_u16((uint16x8_t)v189, 0xFuLL), (uint16x8_t)v188, 0xFuLL), *(int16x8_t *)(v158 + 752));
                  *(int16x8_t *)(v158 + 736) = vaddq_s16((int16x8_t)v197, vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v188, 0xEuLL) & __PAIR128__(0xFFFDFFFDFFFDFFFDLL, 0xFFFDFFFDFFFDFFFDLL)), *(int16x8_t *)(v158 + 736)));
                  *(int16x8_t *)(v158 + 752) = v198;
                  v199 = veorq_s8(v163, v161);
                  v200 = veorq_s8(v167, v161);
                  v201 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v200, 1uLL), v157), vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v199, 1uLL), v157), *(int16x8_t *)(v158 + 784)));
                  *(int16x8_t *)(v158 + 768) = vaddq_s16((int16x8_t)vandq_s8(v200, v157), vaddq_s16((int16x8_t)vandq_s8(v199, v157), *(int16x8_t *)(v158 + 768)));
                  *(int16x8_t *)(v158 + 784) = v201;
                  v202 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v200, 3uLL), v157), vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v199, 3uLL), v157), *(int16x8_t *)(v158 + 816)));
                  *(int16x8_t *)(v158 + 800) = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v200, 2uLL), v157), vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v199, 2uLL), v157), *(int16x8_t *)(v158 + 800)));
                  *(int16x8_t *)(v158 + 816) = v202;
                  v203 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v200, 5uLL), v157), vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v199, 5uLL), v157), *(int16x8_t *)(v158 + 848)));
                  *(int16x8_t *)(v158 + 832) = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v200, 4uLL), v157), vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v199, 4uLL), v157), *(int16x8_t *)(v158 + 832)));
                  *(int16x8_t *)(v158 + 848) = v203;
                  v204 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v200, 7uLL), v157), vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v199, 7uLL), v157), *(int16x8_t *)(v158 + 880)));
                  *(int16x8_t *)(v158 + 864) = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v200, 6uLL), v157), vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v199, 6uLL), v157), *(int16x8_t *)(v158 + 864)));
                  *(int16x8_t *)(v158 + 880) = v204;
                  v205 = vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v200, 9uLL) & __PAIR128__(0xFF81FF81FF81FF81, 0xFF81FF81FF81FF81)), vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v199, 9uLL) & __PAIR128__(0xFF81FF81FF81FF81, 0xFF81FF81FF81FF81)), *(int16x8_t *)(v158 + 912)));
                  *(int16x8_t *)(v158 + 896) = vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v200, 8uLL) & __PAIR128__(0xFF01FF01FF01FF01, 0xFF01FF01FF01FF01)), vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v199, 8uLL) & __PAIR128__(0xFF01FF01FF01FF01, 0xFF01FF01FF01FF01)), *(int16x8_t *)(v158 + 896)));
                  *(int16x8_t *)(v158 + 912) = v205;
                  v206 = vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v200, 0xBuLL) & __PAIR128__(0xFFE1FFE1FFE1FFE1, 0xFFE1FFE1FFE1FFE1)), vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v199, 0xBuLL) & __PAIR128__(0xFFE1FFE1FFE1FFE1, 0xFFE1FFE1FFE1FFE1)), *(int16x8_t *)(v158 + 944)));
                  *(int16x8_t *)(v158 + 928) = vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v200, 0xAuLL) & __PAIR128__(0xFFC1FFC1FFC1FFC1, 0xFFC1FFC1FFC1FFC1)), vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v199, 0xAuLL) & __PAIR128__(0xFFC1FFC1FFC1FFC1, 0xFFC1FFC1FFC1FFC1)), *(int16x8_t *)(v158 + 928)));
                  *(int16x8_t *)(v158 + 944) = v206;
                  v207 = vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v200, 0xDuLL) & __PAIR128__(0xFFF9FFF9FFF9FFF9, 0xFFF9FFF9FFF9FFF9)), vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v199, 0xDuLL) & __PAIR128__(0xFFF9FFF9FFF9FFF9, 0xFFF9FFF9FFF9FFF9)), *(int16x8_t *)(v158 + 976)));
                  *(int16x8_t *)(v158 + 960) = vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v200, 0xCuLL) & __PAIR128__(0xFFF1FFF1FFF1FFF1, 0xFFF1FFF1FFF1FFF1)), vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v199, 0xCuLL) & __PAIR128__(0xFFF1FFF1FFF1FFF1, 0xFFF1FFF1FFF1FFF1)), *(int16x8_t *)(v158 + 960)));
                  *(int16x8_t *)(v158 + 976) = v207;
                  v142 = *(int16x8_t *)(v158 + 1008);
                  *(int16x8_t *)(v158 + 992) = vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v200, 0xEuLL) & __PAIR128__(0xFFFDFFFDFFFDFFFDLL, 0xFFFDFFFDFFFDFFFDLL)), vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v199, 0xEuLL) & __PAIR128__(0xFFFDFFFDFFFDFFFDLL, 0xFFFDFFFDFFFDFFFDLL)), *(int16x8_t *)(v158 + 992)));
                  v143 = (int16x8_t)vsraq_n_u16(vshrq_n_u16((uint16x8_t)v200, 0xFuLL), (uint16x8_t)v199, 0xFuLL);
                }
              }
              else
              {
                v69 = (int8x16_t *)(*a2 + (v146 << 6));
                v70 = v68[1];
                v71 = v69[1];
                v72 = veorq_s8(*v69, *v68);
                v73 = (int8x16_t *)(*a2 + (v144 << 6));
                v74 = v73[1];
                v75 = veorq_s8(*v73, *v68);
                v76 = (int8x16_t *)(*a2 + (v145 << 6));
                v77 = v76[1];
                v78 = veorq_s8(*v76, *v68);
                v79 = (int8x16_t *)(*a2 + (v147 << 6));
                v80 = v79[1];
                v81 = veorq_s8(*v79, *v68);
                v82.i64[0] = 0x1000100010001;
                v82.i64[1] = 0x1000100010001;
                v83 = *(_QWORD *)(v6 + 56) + 2 * v67;
                v84 = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v75, 1uLL), v82), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v72, 1uLL), v82)), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v78, 1uLL), v82)), *(int16x8_t *)(v83 + 16)), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v81, 1uLL), v82));
                v86 = v68[2];
                v85 = v68[3];
                v88 = v69[2];
                v87 = v69[3];
                v90 = v73[2];
                v89 = v73[3];
                v91 = *(int16x8_t *)(v83 + 48);
                v92 = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v75, 2uLL), v82), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v72, 2uLL), v82)), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v78, 2uLL), v82)), *(int16x8_t *)(v83 + 32)), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v81, 2uLL), v82));
                v94 = v76[2];
                v93 = v76[3];
                v96 = v79[2];
                v95 = v79[3];
                *(int16x8_t *)v83 = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v75, v82), (int16x8_t)vandq_s8(v72, v82)), (int16x8_t)vandq_s8(v78, v82)), *(int16x8_t *)v83), (int16x8_t)vandq_s8(v81, v82));
                *(int16x8_t *)(v83 + 16) = v84;
                v97 = (int32x4_t *)(v83 + 1008);
                *(int16x8_t *)(v83 + 32) = v92;
                *(int16x8_t *)(v83 + 48) = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v75, 3uLL), v82), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v72, 3uLL), v82)), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v78, 3uLL), v82)), v91), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v81, 3uLL), v82));
                v98 = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v75, 5uLL), v82), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v72, 5uLL), v82)), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v78, 5uLL), v82)), *(int16x8_t *)(v83 + 80)), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v81, 5uLL), v82));
                *(int16x8_t *)(v83 + 64) = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v75, 4uLL), v82), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v72, 4uLL), v82)), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v78, 4uLL), v82)), *(int16x8_t *)(v83 + 64)), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v81, 4uLL), v82));
                *(int16x8_t *)(v83 + 80) = v98;
                v99 = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v75, 7uLL), v82), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v72, 7uLL), v82)), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v78, 7uLL), v82)), *(int16x8_t *)(v83 + 112)), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v81, 7uLL), v82));
                *(int16x8_t *)(v83 + 96) = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v75, 6uLL), v82), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v72, 6uLL), v82)), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v78, 6uLL), v82)), *(int16x8_t *)(v83 + 96)), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v81, 6uLL), v82));
                *(int16x8_t *)(v83 + 112) = v99;
                v100 = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v75, 9uLL) & __PAIR128__(0xFF81FF81FF81FF81, 0xFF81FF81FF81FF81)), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v72, 9uLL) & __PAIR128__(0xFF81FF81FF81FF81, 0xFF81FF81FF81FF81))), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v78, 9uLL) & __PAIR128__(0xFF81FF81FF81FF81, 0xFF81FF81FF81FF81))), *(int16x8_t *)(v83 + 144)), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v81, 9uLL) & __PAIR128__(0xFF81FF81FF81FF81, 0xFF81FF81FF81FF81)));
                *(int16x8_t *)(v83 + 128) = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v75, 8uLL) & __PAIR128__(0xFF01FF01FF01FF01, 0xFF01FF01FF01FF01)), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v72, 8uLL) & __PAIR128__(0xFF01FF01FF01FF01, 0xFF01FF01FF01FF01))), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v78, 8uLL) & __PAIR128__(0xFF01FF01FF01FF01, 0xFF01FF01FF01FF01))), *(int16x8_t *)(v83 + 128)), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v81, 8uLL) & __PAIR128__(0xFF01FF01FF01FF01, 0xFF01FF01FF01FF01)));
                *(int16x8_t *)(v83 + 144) = v100;
                v101 = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v75, 0xBuLL) & __PAIR128__(0xFFE1FFE1FFE1FFE1, 0xFFE1FFE1FFE1FFE1)), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v72, 0xBuLL) & __PAIR128__(0xFFE1FFE1FFE1FFE1, 0xFFE1FFE1FFE1FFE1))), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v78, 0xBuLL) & __PAIR128__(0xFFE1FFE1FFE1FFE1, 0xFFE1FFE1FFE1FFE1))), *(int16x8_t *)(v83 + 176)), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v81, 0xBuLL) & __PAIR128__(0xFFE1FFE1FFE1FFE1, 0xFFE1FFE1FFE1FFE1)));
                *(int16x8_t *)(v83 + 160) = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v75, 0xAuLL) & __PAIR128__(0xFFC1FFC1FFC1FFC1, 0xFFC1FFC1FFC1FFC1)), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v72, 0xAuLL) & __PAIR128__(0xFFC1FFC1FFC1FFC1, 0xFFC1FFC1FFC1FFC1))), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v78, 0xAuLL) & __PAIR128__(0xFFC1FFC1FFC1FFC1, 0xFFC1FFC1FFC1FFC1))), *(int16x8_t *)(v83 + 160)), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v81, 0xAuLL) & __PAIR128__(0xFFC1FFC1FFC1FFC1, 0xFFC1FFC1FFC1FFC1)));
                *(int16x8_t *)(v83 + 176) = v101;
                v102 = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v75, 0xDuLL) & __PAIR128__(0xFFF9FFF9FFF9FFF9, 0xFFF9FFF9FFF9FFF9)), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v72, 0xDuLL) & __PAIR128__(0xFFF9FFF9FFF9FFF9, 0xFFF9FFF9FFF9FFF9))), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v78, 0xDuLL) & __PAIR128__(0xFFF9FFF9FFF9FFF9, 0xFFF9FFF9FFF9FFF9))), *(int16x8_t *)(v83 + 208)), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v81, 0xDuLL) & __PAIR128__(0xFFF9FFF9FFF9FFF9, 0xFFF9FFF9FFF9FFF9)));
                *(int16x8_t *)(v83 + 192) = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v75, 0xCuLL) & __PAIR128__(0xFFF1FFF1FFF1FFF1, 0xFFF1FFF1FFF1FFF1)), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v72, 0xCuLL) & __PAIR128__(0xFFF1FFF1FFF1FFF1, 0xFFF1FFF1FFF1FFF1))), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v78, 0xCuLL) & __PAIR128__(0xFFF1FFF1FFF1FFF1, 0xFFF1FFF1FFF1FFF1))), *(int16x8_t *)(v83 + 192)), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v81, 0xCuLL) & __PAIR128__(0xFFF1FFF1FFF1FFF1, 0xFFF1FFF1FFF1FFF1)));
                *(int16x8_t *)(v83 + 208) = v102;
                v103 = *(_OWORD *)&vshrq_n_u16((uint16x8_t)v72, 0xEuLL) & __PAIR128__(0xFFFDFFFDFFFDFFFDLL, 0xFFFDFFFDFFFDFFFDLL);
                v104 = vaddq_s16((int16x8_t)vsraq_n_u16(vsraq_n_u16(vsraq_n_u16(vshrq_n_u16((uint16x8_t)v75, 0xFuLL), (uint16x8_t)v72, 0xFuLL), (uint16x8_t)v78, 0xFuLL), (uint16x8_t)v81, 0xFuLL), *(int16x8_t *)(v83 + 240));
                *(int16x8_t *)(v83 + 224) = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v75, 0xEuLL) & __PAIR128__(0xFFFDFFFDFFFDFFFDLL, 0xFFFDFFFDFFFDFFFDLL)), (int16x8_t)v103), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v78, 0xEuLL) & __PAIR128__(0xFFFDFFFDFFFDFFFDLL, 0xFFFDFFFDFFFDFFFDLL))), *(int16x8_t *)(v83 + 224)), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v81, 0xEuLL) & __PAIR128__(0xFFFDFFFDFFFDFFFDLL, 0xFFFDFFFDFFFDFFFDLL)));
                *(int16x8_t *)(v83 + 240) = v104;
                v105 = veorq_s8(v71, v70);
                v106 = veorq_s8(v74, v70);
                v107 = veorq_s8(v77, v70);
                v108 = veorq_s8(v80, v70);
                v109 = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v106, 1uLL), v82), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v105, 1uLL), v82)), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v107, 1uLL), v82)), *(int16x8_t *)(v83 + 272)), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v108, 1uLL), v82));
                *(int16x8_t *)(v83 + 256) = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v106, v82), (int16x8_t)vandq_s8(v105, v82)), (int16x8_t)vandq_s8(v107, v82)), *(int16x8_t *)(v83 + 256)), (int16x8_t)vandq_s8(v108, v82));
                *(int16x8_t *)(v83 + 272) = v109;
                v110 = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v106, 3uLL), v82), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v105, 3uLL), v82)), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v107, 3uLL), v82)), *(int16x8_t *)(v83 + 304)), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v108, 3uLL), v82));
                *(int16x8_t *)(v83 + 288) = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v106, 2uLL), v82), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v105, 2uLL), v82)), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v107, 2uLL), v82)), *(int16x8_t *)(v83 + 288)), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v108, 2uLL), v82));
                *(int16x8_t *)(v83 + 304) = v110;
                v111 = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v106, 5uLL), v82), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v105, 5uLL), v82)), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v107, 5uLL), v82)), *(int16x8_t *)(v83 + 336)), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v108, 5uLL), v82));
                *(int16x8_t *)(v83 + 320) = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v106, 4uLL), v82), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v105, 4uLL), v82)), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v107, 4uLL), v82)), *(int16x8_t *)(v83 + 320)), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v108, 4uLL), v82));
                *(int16x8_t *)(v83 + 336) = v111;
                v112 = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v106, 7uLL), v82), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v105, 7uLL), v82)), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v107, 7uLL), v82)), *(int16x8_t *)(v83 + 368)), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v108, 7uLL), v82));
                *(int16x8_t *)(v83 + 352) = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v106, 6uLL), v82), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v105, 6uLL), v82)), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v107, 6uLL), v82)), *(int16x8_t *)(v83 + 352)), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v108, 6uLL), v82));
                *(int16x8_t *)(v83 + 368) = v112;
                v113 = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v106, 9uLL) & __PAIR128__(0xFF81FF81FF81FF81, 0xFF81FF81FF81FF81)), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v105, 9uLL) & __PAIR128__(0xFF81FF81FF81FF81, 0xFF81FF81FF81FF81))), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v107, 9uLL) & __PAIR128__(0xFF81FF81FF81FF81, 0xFF81FF81FF81FF81))), *(int16x8_t *)(v83 + 400)), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v108, 9uLL) & __PAIR128__(0xFF81FF81FF81FF81, 0xFF81FF81FF81FF81)));
                *(int16x8_t *)(v83 + 384) = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v106, 8uLL) & __PAIR128__(0xFF01FF01FF01FF01, 0xFF01FF01FF01FF01)), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v105, 8uLL) & __PAIR128__(0xFF01FF01FF01FF01, 0xFF01FF01FF01FF01))), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v107, 8uLL) & __PAIR128__(0xFF01FF01FF01FF01, 0xFF01FF01FF01FF01))), *(int16x8_t *)(v83 + 384)), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v108, 8uLL) & __PAIR128__(0xFF01FF01FF01FF01, 0xFF01FF01FF01FF01)));
                *(int16x8_t *)(v83 + 400) = v113;
                v114 = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v106, 0xBuLL) & __PAIR128__(0xFFE1FFE1FFE1FFE1, 0xFFE1FFE1FFE1FFE1)), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v105, 0xBuLL) & __PAIR128__(0xFFE1FFE1FFE1FFE1, 0xFFE1FFE1FFE1FFE1))), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v107, 0xBuLL) & __PAIR128__(0xFFE1FFE1FFE1FFE1, 0xFFE1FFE1FFE1FFE1))), *(int16x8_t *)(v83 + 432)), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v108, 0xBuLL) & __PAIR128__(0xFFE1FFE1FFE1FFE1, 0xFFE1FFE1FFE1FFE1)));
                *(int16x8_t *)(v83 + 416) = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v106, 0xAuLL) & __PAIR128__(0xFFC1FFC1FFC1FFC1, 0xFFC1FFC1FFC1FFC1)), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v105, 0xAuLL) & __PAIR128__(0xFFC1FFC1FFC1FFC1, 0xFFC1FFC1FFC1FFC1))), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v107, 0xAuLL) & __PAIR128__(0xFFC1FFC1FFC1FFC1, 0xFFC1FFC1FFC1FFC1))), *(int16x8_t *)(v83 + 416)), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v108, 0xAuLL) & __PAIR128__(0xFFC1FFC1FFC1FFC1, 0xFFC1FFC1FFC1FFC1)));
                *(int16x8_t *)(v83 + 432) = v114;
                v115 = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v106, 0xDuLL) & __PAIR128__(0xFFF9FFF9FFF9FFF9, 0xFFF9FFF9FFF9FFF9)), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v105, 0xDuLL) & __PAIR128__(0xFFF9FFF9FFF9FFF9, 0xFFF9FFF9FFF9FFF9))), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v107, 0xDuLL) & __PAIR128__(0xFFF9FFF9FFF9FFF9, 0xFFF9FFF9FFF9FFF9))), *(int16x8_t *)(v83 + 464)), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v108, 0xDuLL) & __PAIR128__(0xFFF9FFF9FFF9FFF9, 0xFFF9FFF9FFF9FFF9)));
                *(int16x8_t *)(v83 + 448) = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v106, 0xCuLL) & __PAIR128__(0xFFF1FFF1FFF1FFF1, 0xFFF1FFF1FFF1FFF1)), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v105, 0xCuLL) & __PAIR128__(0xFFF1FFF1FFF1FFF1, 0xFFF1FFF1FFF1FFF1))), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v107, 0xCuLL) & __PAIR128__(0xFFF1FFF1FFF1FFF1, 0xFFF1FFF1FFF1FFF1))), *(int16x8_t *)(v83 + 448)), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v108, 0xCuLL) & __PAIR128__(0xFFF1FFF1FFF1FFF1, 0xFFF1FFF1FFF1FFF1)));
                *(int16x8_t *)(v83 + 464) = v115;
                v116 = *(_OWORD *)&vshrq_n_u16((uint16x8_t)v108, 0xEuLL) & __PAIR128__(0xFFFDFFFDFFFDFFFDLL, 0xFFFDFFFDFFFDFFFDLL);
                v117 = vaddq_s16((int16x8_t)vsraq_n_u16(vsraq_n_u16(vsraq_n_u16(vshrq_n_u16((uint16x8_t)v106, 0xFuLL), (uint16x8_t)v105, 0xFuLL), (uint16x8_t)v107, 0xFuLL), (uint16x8_t)v108, 0xFuLL), *(int16x8_t *)(v83 + 496));
                *(int16x8_t *)(v83 + 480) = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v106, 0xEuLL) & __PAIR128__(0xFFFDFFFDFFFDFFFDLL, 0xFFFDFFFDFFFDFFFDLL)), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v105, 0xEuLL) & __PAIR128__(0xFFFDFFFDFFFDFFFDLL, 0xFFFDFFFDFFFDFFFDLL))), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v107, 0xEuLL) & __PAIR128__(0xFFFDFFFDFFFDFFFDLL, 0xFFFDFFFDFFFDFFFDLL))), *(int16x8_t *)(v83 + 480)), (int16x8_t)v116);
                *(int16x8_t *)(v83 + 496) = v117;
                v118 = veorq_s8(v88, v86);
                v119 = veorq_s8(v90, v86);
                v120 = veorq_s8(v94, v86);
                v121 = veorq_s8(v96, v86);
                v122 = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v119, 1uLL), v82), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v118, 1uLL), v82)), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v120, 1uLL), v82)), *(int16x8_t *)(v83 + 528)), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v121, 1uLL), v82));
                *(int16x8_t *)(v83 + 512) = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v119, v82), (int16x8_t)vandq_s8(v118, v82)), (int16x8_t)vandq_s8(v120, v82)), *(int16x8_t *)(v83 + 512)), (int16x8_t)vandq_s8(v121, v82));
                *(int16x8_t *)(v83 + 528) = v122;
                v123 = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v119, 3uLL), v82), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v118, 3uLL), v82)), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v120, 3uLL), v82)), *(int16x8_t *)(v83 + 560)), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v121, 3uLL), v82));
                *(int16x8_t *)(v83 + 544) = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v119, 2uLL), v82), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v118, 2uLL), v82)), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v120, 2uLL), v82)), *(int16x8_t *)(v83 + 544)), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v121, 2uLL), v82));
                *(int16x8_t *)(v83 + 560) = v123;
                v124 = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v119, 5uLL), v82), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v118, 5uLL), v82)), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v120, 5uLL), v82)), *(int16x8_t *)(v83 + 592)), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v121, 5uLL), v82));
                *(int16x8_t *)(v83 + 576) = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v119, 4uLL), v82), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v118, 4uLL), v82)), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v120, 4uLL), v82)), *(int16x8_t *)(v83 + 576)), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v121, 4uLL), v82));
                *(int16x8_t *)(v83 + 592) = v124;
                v125 = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v119, 7uLL), v82), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v118, 7uLL), v82)), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v120, 7uLL), v82)), *(int16x8_t *)(v83 + 624)), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v121, 7uLL), v82));
                *(int16x8_t *)(v83 + 608) = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v119, 6uLL), v82), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v118, 6uLL), v82)), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v120, 6uLL), v82)), *(int16x8_t *)(v83 + 608)), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v121, 6uLL), v82));
                *(int16x8_t *)(v83 + 624) = v125;
                v126 = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v119, 9uLL) & __PAIR128__(0xFF81FF81FF81FF81, 0xFF81FF81FF81FF81)), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v118, 9uLL) & __PAIR128__(0xFF81FF81FF81FF81, 0xFF81FF81FF81FF81))), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v120, 9uLL) & __PAIR128__(0xFF81FF81FF81FF81, 0xFF81FF81FF81FF81))), *(int16x8_t *)(v83 + 656)), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v121, 9uLL) & __PAIR128__(0xFF81FF81FF81FF81, 0xFF81FF81FF81FF81)));
                *(int16x8_t *)(v83 + 640) = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v119, 8uLL) & __PAIR128__(0xFF01FF01FF01FF01, 0xFF01FF01FF01FF01)), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v118, 8uLL) & __PAIR128__(0xFF01FF01FF01FF01, 0xFF01FF01FF01FF01))), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v120, 8uLL) & __PAIR128__(0xFF01FF01FF01FF01, 0xFF01FF01FF01FF01))), *(int16x8_t *)(v83 + 640)), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v121, 8uLL) & __PAIR128__(0xFF01FF01FF01FF01, 0xFF01FF01FF01FF01)));
                *(int16x8_t *)(v83 + 656) = v126;
                v127 = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v119, 0xBuLL) & __PAIR128__(0xFFE1FFE1FFE1FFE1, 0xFFE1FFE1FFE1FFE1)), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v118, 0xBuLL) & __PAIR128__(0xFFE1FFE1FFE1FFE1, 0xFFE1FFE1FFE1FFE1))), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v120, 0xBuLL) & __PAIR128__(0xFFE1FFE1FFE1FFE1, 0xFFE1FFE1FFE1FFE1))), *(int16x8_t *)(v83 + 688)), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v121, 0xBuLL) & __PAIR128__(0xFFE1FFE1FFE1FFE1, 0xFFE1FFE1FFE1FFE1)));
                *(int16x8_t *)(v83 + 672) = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v119, 0xAuLL) & __PAIR128__(0xFFC1FFC1FFC1FFC1, 0xFFC1FFC1FFC1FFC1)), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v118, 0xAuLL) & __PAIR128__(0xFFC1FFC1FFC1FFC1, 0xFFC1FFC1FFC1FFC1))), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v120, 0xAuLL) & __PAIR128__(0xFFC1FFC1FFC1FFC1, 0xFFC1FFC1FFC1FFC1))), *(int16x8_t *)(v83 + 672)), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v121, 0xAuLL) & __PAIR128__(0xFFC1FFC1FFC1FFC1, 0xFFC1FFC1FFC1FFC1)));
                *(int16x8_t *)(v83 + 688) = v127;
                v128 = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v119, 0xDuLL) & __PAIR128__(0xFFF9FFF9FFF9FFF9, 0xFFF9FFF9FFF9FFF9)), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v118, 0xDuLL) & __PAIR128__(0xFFF9FFF9FFF9FFF9, 0xFFF9FFF9FFF9FFF9))), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v120, 0xDuLL) & __PAIR128__(0xFFF9FFF9FFF9FFF9, 0xFFF9FFF9FFF9FFF9))), *(int16x8_t *)(v83 + 720)), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v121, 0xDuLL) & __PAIR128__(0xFFF9FFF9FFF9FFF9, 0xFFF9FFF9FFF9FFF9)));
                *(int16x8_t *)(v83 + 704) = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v119, 0xCuLL) & __PAIR128__(0xFFF1FFF1FFF1FFF1, 0xFFF1FFF1FFF1FFF1)), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v118, 0xCuLL) & __PAIR128__(0xFFF1FFF1FFF1FFF1, 0xFFF1FFF1FFF1FFF1))), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v120, 0xCuLL) & __PAIR128__(0xFFF1FFF1FFF1FFF1, 0xFFF1FFF1FFF1FFF1))), *(int16x8_t *)(v83 + 704)), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v121, 0xCuLL) & __PAIR128__(0xFFF1FFF1FFF1FFF1, 0xFFF1FFF1FFF1FFF1)));
                *(int16x8_t *)(v83 + 720) = v128;
                v129 = *(_OWORD *)&vshrq_n_u16((uint16x8_t)v121, 0xEuLL) & __PAIR128__(0xFFFDFFFDFFFDFFFDLL, 0xFFFDFFFDFFFDFFFDLL);
                v130 = vaddq_s16((int16x8_t)vsraq_n_u16(vsraq_n_u16(vsraq_n_u16(vshrq_n_u16((uint16x8_t)v119, 0xFuLL), (uint16x8_t)v118, 0xFuLL), (uint16x8_t)v120, 0xFuLL), (uint16x8_t)v121, 0xFuLL), *(int16x8_t *)(v83 + 752));
                *(int16x8_t *)(v83 + 736) = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v119, 0xEuLL) & __PAIR128__(0xFFFDFFFDFFFDFFFDLL, 0xFFFDFFFDFFFDFFFDLL)), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v118, 0xEuLL) & __PAIR128__(0xFFFDFFFDFFFDFFFDLL, 0xFFFDFFFDFFFDFFFDLL))), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v120, 0xEuLL) & __PAIR128__(0xFFFDFFFDFFFDFFFDLL, 0xFFFDFFFDFFFDFFFDLL))), *(int16x8_t *)(v83 + 736)), (int16x8_t)v129);
                *(int16x8_t *)(v83 + 752) = v130;
                v131 = veorq_s8(v87, v85);
                v132 = veorq_s8(v89, v85);
                v133 = veorq_s8(v93, v85);
                v134 = veorq_s8(v95, v85);
                v135 = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v132, 1uLL), v82), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v131, 1uLL), v82)), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v133, 1uLL), v82)), *(int16x8_t *)(v83 + 784)), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v134, 1uLL), v82));
                *(int16x8_t *)(v83 + 768) = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v132, v82), (int16x8_t)vandq_s8(v131, v82)), (int16x8_t)vandq_s8(v133, v82)), *(int16x8_t *)(v83 + 768)), (int16x8_t)vandq_s8(v134, v82));
                *(int16x8_t *)(v83 + 784) = v135;
                v136 = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v132, 3uLL), v82), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v131, 3uLL), v82)), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v133, 3uLL), v82)), *(int16x8_t *)(v83 + 816)), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v134, 3uLL), v82));
                *(int16x8_t *)(v83 + 800) = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v132, 2uLL), v82), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v131, 2uLL), v82)), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v133, 2uLL), v82)), *(int16x8_t *)(v83 + 800)), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v134, 2uLL), v82));
                *(int16x8_t *)(v83 + 816) = v136;
                v137 = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v132, 5uLL), v82), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v131, 5uLL), v82)), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v133, 5uLL), v82)), *(int16x8_t *)(v83 + 848)), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v134, 5uLL), v82));
                *(int16x8_t *)(v83 + 832) = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v132, 4uLL), v82), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v131, 4uLL), v82)), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v133, 4uLL), v82)), *(int16x8_t *)(v83 + 832)), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v134, 4uLL), v82));
                *(int16x8_t *)(v83 + 848) = v137;
                v138 = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v132, 7uLL), v82), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v131, 7uLL), v82)), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v133, 7uLL), v82)), *(int16x8_t *)(v83 + 880)), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v134, 7uLL), v82));
                *(int16x8_t *)(v83 + 864) = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v132, 6uLL), v82), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v131, 6uLL), v82)), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v133, 6uLL), v82)), *(int16x8_t *)(v83 + 864)), (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v134, 6uLL), v82));
                *(int16x8_t *)(v83 + 880) = v138;
                v139 = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v132, 9uLL) & __PAIR128__(0xFF81FF81FF81FF81, 0xFF81FF81FF81FF81)), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v131, 9uLL) & __PAIR128__(0xFF81FF81FF81FF81, 0xFF81FF81FF81FF81))), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v133, 9uLL) & __PAIR128__(0xFF81FF81FF81FF81, 0xFF81FF81FF81FF81))), *(int16x8_t *)(v83 + 912)), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v134, 9uLL) & __PAIR128__(0xFF81FF81FF81FF81, 0xFF81FF81FF81FF81)));
                *(int16x8_t *)(v83 + 896) = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v132, 8uLL) & __PAIR128__(0xFF01FF01FF01FF01, 0xFF01FF01FF01FF01)), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v131, 8uLL) & __PAIR128__(0xFF01FF01FF01FF01, 0xFF01FF01FF01FF01))), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v133, 8uLL) & __PAIR128__(0xFF01FF01FF01FF01, 0xFF01FF01FF01FF01))), *(int16x8_t *)(v83 + 896)), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v134, 8uLL) & __PAIR128__(0xFF01FF01FF01FF01, 0xFF01FF01FF01FF01)));
                *(int16x8_t *)(v83 + 912) = v139;
                v140 = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v132, 0xBuLL) & __PAIR128__(0xFFE1FFE1FFE1FFE1, 0xFFE1FFE1FFE1FFE1)), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v131, 0xBuLL) & __PAIR128__(0xFFE1FFE1FFE1FFE1, 0xFFE1FFE1FFE1FFE1))), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v133, 0xBuLL) & __PAIR128__(0xFFE1FFE1FFE1FFE1, 0xFFE1FFE1FFE1FFE1))), *(int16x8_t *)(v83 + 944)), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v134, 0xBuLL) & __PAIR128__(0xFFE1FFE1FFE1FFE1, 0xFFE1FFE1FFE1FFE1)));
                *(int16x8_t *)(v83 + 928) = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v132, 0xAuLL) & __PAIR128__(0xFFC1FFC1FFC1FFC1, 0xFFC1FFC1FFC1FFC1)), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v131, 0xAuLL) & __PAIR128__(0xFFC1FFC1FFC1FFC1, 0xFFC1FFC1FFC1FFC1))), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v133, 0xAuLL) & __PAIR128__(0xFFC1FFC1FFC1FFC1, 0xFFC1FFC1FFC1FFC1))), *(int16x8_t *)(v83 + 928)), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v134, 0xAuLL) & __PAIR128__(0xFFC1FFC1FFC1FFC1, 0xFFC1FFC1FFC1FFC1)));
                *(int16x8_t *)(v83 + 944) = v140;
                v141 = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v132, 0xDuLL) & __PAIR128__(0xFFF9FFF9FFF9FFF9, 0xFFF9FFF9FFF9FFF9)), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v131, 0xDuLL) & __PAIR128__(0xFFF9FFF9FFF9FFF9, 0xFFF9FFF9FFF9FFF9))), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v133, 0xDuLL) & __PAIR128__(0xFFF9FFF9FFF9FFF9, 0xFFF9FFF9FFF9FFF9))), *(int16x8_t *)(v83 + 976)), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v134, 0xDuLL) & __PAIR128__(0xFFF9FFF9FFF9FFF9, 0xFFF9FFF9FFF9FFF9)));
                *(int16x8_t *)(v83 + 960) = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v132, 0xCuLL) & __PAIR128__(0xFFF1FFF1FFF1FFF1, 0xFFF1FFF1FFF1FFF1)), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v131, 0xCuLL) & __PAIR128__(0xFFF1FFF1FFF1FFF1, 0xFFF1FFF1FFF1FFF1))), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v133, 0xCuLL) & __PAIR128__(0xFFF1FFF1FFF1FFF1, 0xFFF1FFF1FFF1FFF1))), *(int16x8_t *)(v83 + 960)), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v134, 0xCuLL) & __PAIR128__(0xFFF1FFF1FFF1FFF1, 0xFFF1FFF1FFF1FFF1)));
                *(int16x8_t *)(v83 + 976) = v141;
                v142 = *(int16x8_t *)(v83 + 1008);
                *(int16x8_t *)(v83 + 992) = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v132, 0xEuLL) & __PAIR128__(0xFFFDFFFDFFFDFFFDLL, 0xFFFDFFFDFFFDFFFDLL)), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v131, 0xEuLL) & __PAIR128__(0xFFFDFFFDFFFDFFFDLL, 0xFFFDFFFDFFFDFFFDLL))), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v133, 0xEuLL) & __PAIR128__(0xFFFDFFFDFFFDFFFDLL, 0xFFFDFFFDFFFDFFFDLL))), *(int16x8_t *)(v83 + 992)), (int16x8_t)(*(_OWORD *)&vshrq_n_u16((uint16x8_t)v134, 0xEuLL) & __PAIR128__(0xFFFDFFFDFFFDFFFDLL, 0xFFFDFFFDFFFDFFFDLL)));
                v144 = v147;
                v143 = (int16x8_t)vsraq_n_u16(vsraq_n_u16(vsraq_n_u16(vshrq_n_u16((uint16x8_t)v132, 0xFuLL), (uint16x8_t)v131, 0xFuLL), (uint16x8_t)v133, 0xFuLL), (uint16x8_t)v134, 0xFuLL);
              }
              v5 = (int32x4_t)vaddq_s16(v143, v142);
              *v97 = v5;
              v15 = *v16;
              v65 = *(_DWORD *)(*v16 + 4 * v144);
            }
            while (v66 != v65);
          }
          ++v62;
        }
        while (v62 != v49);
      }
      v251 = (float *)(v9 + 4 * (v7 & 0xFFFFFE00));
      v252 = *(_QWORD *)(v6 + 24);
      if (v252)
      {
        LODWORD(v253) = 0;
        v254 = *(__int16 **)(v6 + 56);
        v255 = v9 + 4 * (v7 & 0xFFFFFE00);
        do
        {
          for (i = 0; i < 0x79; i += 8)
          {
            v5.i16[0] = *v254;
            v257 = (float)v5.u32[0];
            *(float *)v255 = v257;
            LOWORD(v257) = v254[1];
            v258 = (float)LODWORD(v257);
            *(float *)(v255 + 64) = v258;
            LOWORD(v258) = v254[2];
            v259 = (float)LODWORD(v258);
            *(float *)(v255 + 128) = v259;
            LOWORD(v259) = v254[3];
            v260 = (float)LODWORD(v259);
            *(float *)(v255 + 192) = v260;
            LOWORD(v260) = v254[4];
            v261 = (float)LODWORD(v260);
            *(float *)(v255 + 256) = v261;
            LOWORD(v261) = v254[5];
            v262 = (float)LODWORD(v261);
            *(float *)(v255 + 320) = v262;
            LOWORD(v262) = v254[6];
            v263 = (float)LODWORD(v262);
            *(float *)(v255 + 384) = v263;
            v264 = v254 + 8;
            LOWORD(v263) = v254[7];
            *(float *)v5.i32 = (float)LODWORD(v263);
            *(_DWORD *)(v255 + 448) = v5.i32[0];
            v255 += 4;
            v254 += 8;
          }
          v265 = 0;
          v266 = v255 + 448;
          do
          {
            v5.i16[0] = *v264;
            v267 = (float)v5.u32[0];
            *(float *)v266 = v267;
            LOWORD(v267) = v264[1];
            v268 = (float)LODWORD(v267);
            *(float *)(v266 + 64) = v268;
            LOWORD(v268) = v264[2];
            v269 = (float)LODWORD(v268);
            *(float *)(v266 + 128) = v269;
            LOWORD(v269) = v264[3];
            v270 = (float)LODWORD(v269);
            *(float *)(v266 + 192) = v270;
            LOWORD(v270) = v264[4];
            v271 = (float)LODWORD(v270);
            *(float *)(v266 + 256) = v271;
            LOWORD(v271) = v264[5];
            v272 = (float)LODWORD(v271);
            *(float *)(v266 + 320) = v272;
            LOWORD(v272) = v264[6];
            v273 = (float)LODWORD(v272);
            *(float *)(v266 + 384) = v273;
            v274 = v264 + 8;
            LOWORD(v273) = v264[7];
            *(float *)v5.i32 = (float)LODWORD(v273);
            *(_DWORD *)(v266 + 448) = v5.i32[0];
            v266 += 4;
            v265 += 8;
            v264 += 8;
          }
          while (v265 < 0x79);
          v275 = 0;
          v276 = v266 + 448;
          do
          {
            v5.i16[0] = *v274;
            v277 = (float)v5.u32[0];
            *(float *)v276 = v277;
            LOWORD(v277) = v274[1];
            v278 = (float)LODWORD(v277);
            *(float *)(v276 + 64) = v278;
            LOWORD(v278) = v274[2];
            v279 = (float)LODWORD(v278);
            *(float *)(v276 + 128) = v279;
            LOWORD(v279) = v274[3];
            v280 = (float)LODWORD(v279);
            *(float *)(v276 + 192) = v280;
            LOWORD(v280) = v274[4];
            v281 = (float)LODWORD(v280);
            *(float *)(v276 + 256) = v281;
            LOWORD(v281) = v274[5];
            v282 = (float)LODWORD(v281);
            *(float *)(v276 + 320) = v282;
            LOWORD(v282) = v274[6];
            v283 = (float)LODWORD(v282);
            *(float *)(v276 + 384) = v283;
            v284 = v274 + 8;
            LOWORD(v283) = v274[7];
            *(float *)v5.i32 = (float)LODWORD(v283);
            *(_DWORD *)(v276 + 448) = v5.i32[0];
            v276 += 4;
            v275 += 8;
            v274 += 8;
          }
          while (v275 < 0x79);
          v285 = 0;
          v286 = v276 + 448;
          do
          {
            v5.i16[0] = *v284;
            v287 = (float)v5.u32[0];
            *(float *)v286 = v287;
            LOWORD(v287) = v284[1];
            v288 = (float)LODWORD(v287);
            *(float *)(v286 + 64) = v288;
            LOWORD(v288) = v284[2];
            v289 = (float)LODWORD(v288);
            *(float *)(v286 + 128) = v289;
            LOWORD(v289) = v284[3];
            v290 = (float)LODWORD(v289);
            *(float *)(v286 + 192) = v290;
            LOWORD(v290) = v284[4];
            v291 = (float)LODWORD(v290);
            *(float *)(v286 + 256) = v291;
            LOWORD(v291) = v284[5];
            v292 = (float)LODWORD(v291);
            *(float *)(v286 + 320) = v292;
            LOWORD(v292) = v284[6];
            v293 = (float)LODWORD(v292);
            *(float *)(v286 + 384) = v293;
            v254 = v284 + 8;
            LOWORD(v293) = v284[7];
            *(float *)v5.i32 = (float)LODWORD(v293);
            *(_DWORD *)(v286 + 448) = v5.i32[0];
            v286 += 4;
            v285 += 8;
            v284 += 8;
          }
          while (v285 < 0x79);
          v255 = v286 + 448;
          v253 = (v253 + 1);
        }
        while (v252 > v253);
      }
      v294 = *(_QWORD *)(v6 + 8) - *(_QWORD *)v6;
      v295 = v294 >> 6;
      switch(*(_DWORD *)(v6 + 48))
      {
        case 0:
          if ((_DWORD)v295)
          {
            v296 = 0;
            v297 = (v294 >> 6);
            v298 = v7;
            do
            {
              v299 = 0;
              v300 = v9 + ((unint64_t)(v298 >> 9) << 11);
              v301 = (float *)(v9 + 4 * ((v7 + ((_DWORD)v296 << 9)) & 0xFFFFFE00));
              v302 = *v301 * *v301;
              do
              {
                v303 = vmulq_f32(*(float32x4_t *)(v300 + v299 + 4), *(float32x4_t *)(v300 + v299 + 4));
                v304 = vmulq_f32(*(float32x4_t *)(v300 + v299 + 20), *(float32x4_t *)(v300 + v299 + 20));
                v302 = (float)((float)((float)((float)((float)((float)((float)(v302 + v303.f32[0]) + v303.f32[1])
                                                             + v303.f32[2])
                                                     + v303.f32[3])
                                             + v304.f32[0])
                                     + v304.f32[1])
                             + v304.f32[2])
                     + v304.f32[3];
                v299 += 32;
              }
              while (v299 != 2016);
              v305 = 0;
              v306 = sqrtf(sqrtf((float)((float)((float)((float)((float)((float)(v302 + (float)(v301[505] * v301[505]))+ (float)(v301[506] * v301[506]))+ (float)(v301[507] * v301[507]))+ (float)(v301[508] * v301[508]))+ (float)(v301[509] * v301[509]))+ (float)(v301[510] * v301[510]))+ (float)(v301[511] * v301[511])));
              if (v306 == 0.0)
                *(float *)v5.i32 = 1.0;
              else
                *(float *)v5.i32 = 1.0 / v306;
              do
              {
                v307 = (float32x4_t *)(v300 + v305);
                v308 = vmulq_n_f32(*(float32x4_t *)(v300 + v305 + 16), *(float *)v5.i32);
                *v307 = vmulq_n_f32(*(float32x4_t *)(v300 + v305), *(float *)v5.i32);
                v307[1] = v308;
                v305 += 32;
              }
              while (v305 != 2048);
              ++v296;
              v298 += 512;
            }
            while (v296 != v297);
          }
          break;
        case 1:
          v309 = v252 << 9;
          if (v252 << 9)
          {
            if ((_DWORD)v309)
              v310 = (v309 - 1) >> 32 == 0;
            else
              v310 = 0;
            if (v310)
            {
              v338 = (float32x4_t *)(v9 + ((unint64_t)(v7 >> 9) << 11) + 16);
              do
              {
                v5 = (int32x4_t)vsqrtq_f32(v338[-1]);
                v339 = vsqrtq_f32(*v338);
                v338[-1] = (float32x4_t)v5;
                *v338 = v339;
                v338 += 2;
                v309 -= 8;
              }
              while (v309);
            }
            else
            {
              v311 = 0;
              do
              {
                *(float *)v5.i32 = sqrtf(v251[v311]);
                v251[v311++] = *(float *)v5.i32;
              }
              while (v309 > v311);
            }
          }
          break;
        case 2:
          if ((_DWORD)v295)
          {
            v312 = 0;
            v313 = (v294 >> 6);
            v314 = v7;
            do
            {
              v315 = 0;
              v316 = v9 + ((unint64_t)(v314 >> 9) << 11);
              v317 = (float *)(v9 + 4 * ((v7 + ((_DWORD)v312 << 9)) & 0xFFFFFE00));
              v318 = fabsf(*v317);
              do
              {
                v319 = vabsq_f32(*(float32x4_t *)(v316 + v315 + 4));
                v320 = vabsq_f32(*(float32x4_t *)(v316 + v315 + 20));
                v318 = (float)((float)((float)((float)((float)((float)((float)(v318 + v319.f32[0]) + v319.f32[1])
                                                             + v319.f32[2])
                                                     + v319.f32[3])
                                             + v320.f32[0])
                                     + v320.f32[1])
                             + v320.f32[2])
                     + v320.f32[3];
                v315 += 32;
              }
              while (v315 != 2016);
              v321 = 0;
              v322 = (float)((float)((float)((float)((float)((float)(v318 + fabsf(v317[505])) + fabsf(v317[506]))
                                                   + fabsf(v317[507]))
                                           + fabsf(v317[508]))
                                   + fabsf(v317[509]))
                           + fabsf(v317[510]))
                   + fabsf(v317[511]);
              if (v322 == 0.0)
                *(float *)v5.i32 = 1.0;
              else
                *(float *)v5.i32 = 1.0 / v322;
              do
              {
                v323 = (float32x4_t *)(v316 + v321);
                v324 = vmulq_n_f32(*(float32x4_t *)(v316 + v321 + 16), *(float *)v5.i32);
                *v323 = vmulq_n_f32(*(float32x4_t *)(v316 + v321), *(float *)v5.i32);
                v323[1] = v324;
                v321 += 32;
              }
              while (v321 != 2048);
              ++v312;
              v314 += 512;
            }
            while (v312 != v313);
          }
          break;
        case 3:
          if ((_DWORD)v295)
          {
            v325 = 0;
            v326 = (v294 >> 6);
            v327 = v7;
            do
            {
              v328 = 0;
              v329 = v9 + ((unint64_t)(v327 >> 9) << 11);
              v330 = (float *)(v9 + 4 * ((v7 + ((_DWORD)v325 << 9)) & 0xFFFFFE00));
              v331 = *v330 * *v330;
              do
              {
                v332 = vmulq_f32(*(float32x4_t *)(v329 + v328 + 4), *(float32x4_t *)(v329 + v328 + 4));
                v333 = vmulq_f32(*(float32x4_t *)(v329 + v328 + 20), *(float32x4_t *)(v329 + v328 + 20));
                v331 = (float)((float)((float)((float)((float)((float)((float)(v331 + v332.f32[0]) + v332.f32[1])
                                                             + v332.f32[2])
                                                     + v332.f32[3])
                                             + v333.f32[0])
                                     + v333.f32[1])
                             + v333.f32[2])
                     + v333.f32[3];
                v328 += 32;
              }
              while (v328 != 2016);
              v334 = 0;
              v335 = sqrtf((float)((float)((float)((float)((float)((float)(v331 + (float)(v330[505] * v330[505]))+ (float)(v330[506] * v330[506]))+ (float)(v330[507] * v330[507]))+ (float)(v330[508] * v330[508]))+ (float)(v330[509] * v330[509]))+ (float)(v330[510] * v330[510]))+ (float)(v330[511] * v330[511]));
              if (v335 == 0.0)
                *(float *)v5.i32 = 1.0;
              else
                *(float *)v5.i32 = 1.0 / v335;
              do
              {
                v336 = (float32x4_t *)(v329 + v334);
                v337 = vmulq_n_f32(*(float32x4_t *)(v329 + v334 + 16), *(float *)v5.i32);
                *v336 = vmulq_n_f32(*(float32x4_t *)(v329 + v334), *(float *)v5.i32);
                v336[1] = v337;
                v334 += 32;
              }
              while (v334 != 2048);
              ++v325;
              v327 += 512;
            }
            while (v325 != v326);
          }
          break;
        default:
          break;
      }
      v340 = (_DWORD)v8 << 9;
      v341 = *(_DWORD *)(v6 + 44);
      if (v341 == 2)
      {
        if (v340)
        {
          v358 = v251 + 1;
          v359 = fabsf(*v251);
          v360 = ((v8 & 0x7FFFFF) << 11) - 4;
          do
          {
            v361 = *v358++;
            v359 = v359 + fabsf(v361);
            v360 -= 4;
          }
          while (v360);
          if (v359 == 0.0)
            *(float *)v5.i32 = 1.0;
          else
            *(float *)v5.i32 = 1.0 / v359;
          v362 = ((((v8 & 0x7FFFFFuLL) << 11) - 4) >> 2) + 1;
          v363 = (float32x4_t *)(v9 + ((unint64_t)(v7 >> 9) << 11) + 16);
          do
          {
            v364 = vmulq_n_f32(*v363, *(float *)v5.i32);
            v363[-1] = vmulq_n_f32(v363[-1], *(float *)v5.i32);
            *v363 = v364;
            v363 += 2;
            v362 -= 8;
          }
          while (v362);
        }
        v365 = v252 << 9;
        if (v365)
        {
          if (!(_DWORD)v365 || (v365 - 1) >> 32)
          {
            v382 = 0;
            do
            {
              *(float *)v5.i32 = sqrtf(v251[v382]);
              v251[v382++] = *(float *)v5.i32;
            }
            while (v365 > v382);
          }
          else
          {
            v366 = (float32x4_t *)(v9 + ((unint64_t)(v7 >> 9) << 11) + 16);
            do
            {
              v5 = (int32x4_t)vsqrtq_f32(v366[-1]);
              v367 = vsqrtq_f32(*v366);
              v366[-1] = (float32x4_t)v5;
              *v366 = v367;
              v366 += 2;
              v365 -= 8;
            }
            while (v365);
          }
        }
      }
      else if (v341 == 1)
      {
        if (v340)
        {
          v368 = *v251 * *v251;
          v369 = (v8 & 0x7FFFFF) << 11;
          v370 = (unint64_t)(v369 - 8) >> 2;
          v371 = v370 - 6;
          v372 = &v251[v370 - 5];
          v373 = (float32x4_t *)(v9 + ((unint64_t)(v7 >> 9) << 11) + 20);
          do
          {
            v374 = vmulq_f32(v373[-1], v373[-1]);
            v375 = vmulq_f32(*v373, *v373);
            v368 = (float)((float)((float)((float)((float)((float)((float)(v368 + v374.f32[0]) + v374.f32[1])
                                                         + v374.f32[2])
                                                 + v374.f32[3])
                                         + v375.f32[0])
                                 + v375.f32[1])
                         + v375.f32[2])
                 + v375.f32[3];
            v373 += 2;
            v371 -= 8;
          }
          while (v371);
          v376 = v369 - 4 * v370 + 20;
          do
          {
            v377 = *v372++;
            v368 = v368 + (float)(v377 * v377);
            v376 -= 4;
          }
          while (v376);
          v378 = sqrtf(sqrtf(v368));
          if (v378 == 0.0)
            *(float *)v5.i32 = 1.0;
          else
            *(float *)v5.i32 = 1.0 / v378;
          v379 = ((((v8 & 0x7FFFFFuLL) << 11) - 4) >> 2) + 1;
          v380 = (float32x4_t *)(v9 + ((unint64_t)(v7 >> 9) << 11) + 16);
          do
          {
            v381 = vmulq_n_f32(*v380, *(float *)v5.i32);
            v380[-1] = vmulq_n_f32(v380[-1], *(float *)v5.i32);
            *v380 = v381;
            v380 += 2;
            v379 -= 8;
          }
          while (v379);
        }
        else
        {
          v5.i16[1] = 0;
        }
      }
      else if (!v341 && v340)
      {
        v342 = *v251 * *v251;
        v343 = (v8 & 0x7FFFFF) << 11;
        v344 = (unint64_t)(v343 - 8) >> 2;
        v345 = v344 - 6;
        v346 = &v251[v344 - 5];
        v347 = (unint64_t)(v7 >> 9) << 11;
        v348 = (float32x4_t *)(v9 + v347 + 20);
        do
        {
          v349 = vmulq_f32(v348[-1], v348[-1]);
          v350 = vmulq_f32(*v348, *v348);
          v342 = (float)((float)((float)((float)((float)((float)((float)(v342 + v349.f32[0]) + v349.f32[1]) + v349.f32[2])
                                               + v349.f32[3])
                                       + v350.f32[0])
                               + v350.f32[1])
                       + v350.f32[2])
               + v350.f32[3];
          v348 += 2;
          v345 -= 8;
        }
        while (v345);
        v351 = v343 - 4 * v344 + 20;
        do
        {
          v352 = *v346++;
          v342 = v342 + (float)(v352 * v352);
          v351 -= 4;
        }
        while (v351);
        v353 = (unint64_t)(v343 - 4) >> 2;
        v354 = sqrtf(v342);
        if (v354 == 0.0)
          *(float *)v5.i32 = 1.0;
        else
          *(float *)v5.i32 = 1.0 / v354;
        v355 = v353 + 1;
        v356 = (float32x4_t *)(v9 + v347 + 16);
        do
        {
          v357 = vmulq_n_f32(*v356, *(float *)v5.i32);
          v356[-1] = vmulq_n_f32(v356[-1], *(float *)v5.i32);
          *v356 = v357;
          v356 += 2;
          v355 -= 8;
        }
        while (v355);
      }
      v7 += v340;
      v6 += 112;
      if (v6 == v388)
        goto LABEL_156;
    }
    v25 = (int32x4_t *)(v15 + 4 * v22);
    v26 = 4 * v24 - 4 * v22 - 4;
    if (v26 >= 0x1C)
    {
      v29 = (v26 >> 2) + 1;
      v27 = v24 + (v29 & 0xFFFFFFF8);
      v28 = &v25->i32[v29 & 0x7FFFFFFFFFFFFFF8];
      v5 = vaddq_s32(vdupq_n_s32(v24), (int32x4_t)xmmword_210365350);
      v30 = v25 + 1;
      v31 = v29 & 0x7FFFFFFFFFFFFFF8;
      v32.i64[0] = 0x400000004;
      v32.i64[1] = 0x400000004;
      v33.i64[0] = 0x800000008;
      v33.i64[1] = 0x800000008;
      do
      {
        v30[-1] = v5;
        *v30 = vaddq_s32(v5, v32);
        v5 = vaddq_s32(v5, v33);
        v30 += 2;
        v31 -= 8;
      }
      while (v31);
      if (v29 == (v29 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_19;
    }
    else
    {
      v27 = v24;
      v28 = (__int32 *)(v15 + 4 * v22);
    }
    v34 = (__int32 *)(v15 + 4 * v24);
    do
      *v28++ = v27++;
    while (v28 != v34);
LABEL_19:
    LODWORD(v21) = *(_DWORD *)(v6 + 80);
    v23 = (v21 + v22);
    goto LABEL_20;
  }
LABEL_156:
  v383 = *((unsigned int *)a1 + 20);
  v384 = (4 * v383 + 31) & 0x7FFFFFFE0;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = v384 >> 2;
  v385 = operator new(v384, (std::align_val_t)0x20uLL);
  *(_QWORD *)a3 = v385;
  if ((_DWORD)v383)
    memcpy(v385, (const void *)a1[8], 4 * v383);
  *(_DWORD *)(a3 + 16) = v383;
  return kdebug_trace();
}

void sub_20F4359EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20E8E69C4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F435A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20E8E69C4((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_20F435A18(void **a1, _BYTE *a2, char *a3)
{
  char *v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  __int128 *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  char *v39;
  int64_t v40;
  char *v41;
  size_t v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  __int128 *v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;

  v3 = a3;
  v6 = (unint64_t)*a1;
  v5 = (unint64_t)a1[1];
  v7 = a2 - (_BYTE *)*a1;
  v8 = v7 >> 3;
  v9 = (char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFF8);
  v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(_QWORD *)v9 = *(_QWORD *)a3;
      a1[1] = v9 + 8;
      return v9;
    }
    v11 = v5 - (_QWORD)(v9 + 8);
    v12 = v11 >> 3;
    v13 = (uint64_t *)(v5 - 8);
    if (v5 < 8)
    {
      v17 = a1[1];
    }
    else
    {
      v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      v15 = v14 + v6 + 8;
      if (v5 > v15)
        v15 = (unint64_t)a1[1];
      v16 = v15 + ~v6 - v14;
      if (v16 >= 0x58)
      {
        v17 = a1[1];
        if ((unint64_t)&v9[-(v7 & 0xFFFFFFFFFFFFFFF8) + 8 - v6] >= 0x20)
        {
          v45 = (v16 >> 3) + 1;
          v46 = 8 * (v45 & 0x3FFFFFFFFFFFFFFCLL);
          v13 = (uint64_t *)((char *)v13 + v46);
          v17 = (_QWORD *)(v5 + v46);
          v47 = (_OWORD *)(v5 + 16);
          v48 = (__int128 *)(8 * v12 + 8 * v8 + v6 + 16);
          v49 = v45 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v50 = *v48;
            *(v47 - 1) = *(v48 - 1);
            *v47 = v50;
            v47 += 2;
            v48 += 2;
            v49 -= 4;
          }
          while (v49);
          if (v45 == (v45 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_49;
        }
      }
      else
      {
        v17 = a1[1];
      }
      do
      {
        v51 = *v13++;
        *v17++ = v51;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_49:
    a1[1] = v17;
    if ((char *)v5 != v9 + 8)
      memmove((void *)(v5 - 8 * v12), v9, v11);
    if (v9 <= v3)
      v3 += 8 * (a1[1] > v3);
    *(_QWORD *)v9 = *(_QWORD *)v3;
    return v9;
  }
  v18 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v18 >> 61)
    sub_20E867F44();
  v20 = v10 - v6;
  if (v20 >> 2 > v18)
    v18 = v20 >> 2;
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
    v21 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v21 = v18;
  if (v21)
  {
    if (v21 >> 61)
      sub_20E877A38();
    v22 = (char *)operator new(8 * v21);
    v23 = &v22[8 * v8];
    v24 = &v22[8 * v21];
    if (v8 != v21)
      goto LABEL_24;
  }
  else
  {
    v22 = 0;
    v23 = (char *)(8 * v8);
    v24 = 0;
    if (v8)
      goto LABEL_24;
  }
  if (v7 < 1)
  {
    if ((_BYTE *)v6 == a2)
      v44 = 1;
    else
      v44 = v7 >> 2;
    if (v44 >> 61)
      sub_20E877A38();
    v23 = (char *)operator new(8 * v44);
    v24 = &v23[8 * v44];
    if (v22)
    {
      operator delete(v22);
      v24 = &v23[8 * v44];
      v26 = (char *)*a1;
      *(_QWORD *)v23 = *(_QWORD *)v3;
      v27 = v23 + 8;
      v28 = v23;
      if (v26 != v9)
        goto LABEL_25;
      goto LABEL_31;
    }
  }
  else
  {
    v25 = v8 + 2;
    if (v8 >= -1)
      v25 = v8 + 1;
    v23 -= 8 * (v25 >> 1);
  }
LABEL_24:
  v26 = (char *)v6;
  *(_QWORD *)v23 = *(_QWORD *)v3;
  v27 = v23 + 8;
  v28 = v23;
  if ((char *)v6 != v9)
  {
LABEL_25:
    v29 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    v30 = v29 - v26 - 8;
    v31 = v9;
    v28 = v23;
    if (v30 < 0x58)
      goto LABEL_60;
    v31 = v9;
    v28 = v23;
    if ((unint64_t)(v29 - v23) < 0x20)
      goto LABEL_60;
    v32 = (v30 >> 3) + 1;
    v33 = 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
    v31 = &v9[-v33];
    v28 = &v23[-v33];
    v34 = v23 - 16;
    v35 = (__int128 *)(v6 + 8 * v8 - 16);
    v36 = v32 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v37 = *v35;
      *((_OWORD *)v34 - 1) = *(v35 - 1);
      *(_OWORD *)v34 = v37;
      v34 -= 32;
      v35 -= 2;
      v36 -= 4;
    }
    while (v36);
    if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_60:
      do
      {
        v38 = *((_QWORD *)v31 - 1);
        v31 -= 8;
        *((_QWORD *)v28 - 1) = v38;
        v28 -= 8;
      }
      while (v31 != v26);
    }
  }
LABEL_31:
  v39 = (char *)a1[1];
  v40 = v39 - v9;
  if (v39 != v9)
  {
    v41 = v9;
    v42 = v39 - v9;
    v43 = v24;
    memmove(v27, v41, v42);
    v24 = v43;
    v26 = (char *)*a1;
  }
  *a1 = v28;
  a1[1] = &v27[v40];
  a1[2] = v24;
  if (v26)
    operator delete(v26);
  return v23;
}

void sub_20F435D88(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F435DA0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  unint64_t v7;
  uint64_t result;
  unsigned int v9;
  void *v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;

  sub_20F433470((uint64_t *)a1, a2, (uint64_t)&v15);
  v5 = *(unsigned int *)(a1 + 100);
  if ((_DWORD)v5)
  {
    v6 = operator new((4 * v5 + 31) & 0x7FFFFFFE0, (std::align_val_t)0x20uLL);
    v7 = ((4 * v5 + 31) & 0x7FFFFFFE0uLL) >> 2;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  v12 = v16;
  v13 = v15;
  v14 = 0;
  v9 = v5;
  v10 = v6;
  v11 = 0;
  sub_20F430918(a1 + 88, &v12, &v9);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v7;
  *(_DWORD *)(a3 + 16) = v5;
  result = v15;
  if (v15)
    return MEMORY[0x212BC6368](v15, 0x1000C8052888210);
  return result;
}

void sub_20F435E68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (!a16)
    _Unwind_Resume(exception_object);
  MEMORY[0x212BC6368](a16, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

char ***sub_20F435ECC@<X0>(char ***result@<X0>, int a2@<W1>, char **a3@<X8>)
{
  char **v3;
  char **v4;
  char **v5;
  uint64_t v6;
  char *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  char *v11;
  BOOL v12;
  unint64_t v19;
  char **v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char **v35;
  char **v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  char *v42;
  __int128 v43;
  char *v44;
  _OWORD v45[4];
  char **v46;

  v3 = a3;
  if (a2)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v4 = *result;
    v5 = result[1];
    v6 = (char *)v5 - (char *)*result;
    if (v5 != *result)
    {
      if (v6 < 0)
        sub_20E867F44();
      v7 = (char *)operator new((char *)v5 - (char *)*result);
      *v3 = v7;
      v3[1] = v7;
      v3[2] = &v7[64 * (v6 >> 6)];
      result = 0;
      do
      {
        if (*v4)
          v12 = 0;
        else
          v12 = v4[1] == 0;
        if (!v12 || v4[2] != 0 || v4[3] != 0 || v4[4] != 0 || v4[5] != 0 || v4[6] != 0 || v4[7] != 0)
        {
          v19 = (unint64_t)v3[2];
          if ((unint64_t)v7 < v19)
          {
            v8 = *((_OWORD *)v4 + 3);
            v10 = *(_OWORD *)v4;
            v9 = *((_OWORD *)v4 + 1);
            *((_OWORD *)v7 + 2) = *((_OWORD *)v4 + 2);
            *((_OWORD *)v7 + 3) = v8;
            *(_OWORD *)v7 = v10;
            *((_OWORD *)v7 + 1) = v9;
            v11 = v7 + 64;
            v3[1] = v7 + 64;
          }
          else
          {
            v20 = v3;
            v21 = *v3;
            v22 = (v7 - *v3) >> 6;
            v23 = v22 + 1;
            if ((unint64_t)(v22 + 1) >> 58)
              sub_20E867F44();
            v24 = v19 - (_QWORD)v21;
            if (v24 >> 5 > v23)
              v23 = v24 >> 5;
            if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFC0)
              v25 = 0x3FFFFFFFFFFFFFFLL;
            else
              v25 = v23;
            if (v25)
            {
              if (v25 >> 58)
                sub_20E877A38();
              v26 = (char *)operator new(v25 << 6);
            }
            else
            {
              v26 = 0;
            }
            v27 = &v26[64 * v22];
            v28 = *(_OWORD *)v4;
            v29 = *((_OWORD *)v4 + 1);
            v30 = *((_OWORD *)v4 + 3);
            *((_OWORD *)v27 + 2) = *((_OWORD *)v4 + 2);
            *((_OWORD *)v27 + 3) = v30;
            *(_OWORD *)v27 = v28;
            *((_OWORD *)v27 + 1) = v29;
            v31 = v27;
            v3 = v20;
            if (v7 != v21)
            {
              do
              {
                v32 = *((_OWORD *)v7 - 4);
                v33 = *((_OWORD *)v7 - 3);
                v34 = *((_OWORD *)v7 - 1);
                *((_OWORD *)v31 - 2) = *((_OWORD *)v7 - 2);
                *((_OWORD *)v31 - 1) = v34;
                *((_OWORD *)v31 - 4) = v32;
                *((_OWORD *)v31 - 3) = v33;
                v31 -= 64;
                v7 -= 64;
              }
              while (v7 != v21);
              v7 = v21;
            }
            v11 = v27 + 64;
            *v20 = v31;
            v20[1] = v27 + 64;
            v20[2] = &v26[64 * v25];
            if (v7)
              operator delete(v7);
            result = 0;
          }
          v3[1] = v11;
          v7 = v11;
        }
        v4 += 8;
      }
      while (v4 != v5);
    }
  }
  else
  {
    v35 = *result;
    v36 = result[1];
    v43 = 0uLL;
    v44 = 0;
    v37 = (char *)v36 - (char *)v35;
    if (v36 == v35)
    {
      v42 = 0;
      v41 = 0uLL;
    }
    else
    {
      if (v37 < 0)
        sub_20E867F44();
      *(_QWORD *)&v43 = operator new((char *)v36 - (char *)v35);
      *((_QWORD *)&v43 + 1) = v43;
      v44 = (char *)(v43 + (v37 >> 6 << 6));
      v46 = (char **)&v43;
      do
      {
        v38 = *(_OWORD *)v35;
        v39 = *((_OWORD *)v35 + 1);
        v40 = *((_OWORD *)v35 + 3);
        v45[2] = *((_OWORD *)v35 + 2);
        v45[3] = v40;
        v45[0] = v38;
        v45[1] = v39;
        result = sub_20EDB1848(&v46, v45);
        v35 += 8;
      }
      while (v35 != v36);
      v41 = v43;
      v42 = v44;
    }
    *(_OWORD *)v3 = v41;
    v3[2] = v42;
  }
  return result;
}

void sub_20F436150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F43619C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v3;
  char __p[18];
  char v5;
  __int128 v6;
  uint64_t v7;

  v5 = 17;
  strcpy(__p, "VIODatabaseSample");
  sub_20F436294(a1, (uint64_t)__p, &v6);
  v3 = (char *)operator new(0x30uLL);
  *((_QWORD *)v3 + 2) = 0;
  *(_QWORD *)v3 = &unk_24C9B0508;
  *((_QWORD *)v3 + 1) = 0;
  *(_OWORD *)(v3 + 24) = v6;
  *((_QWORD *)v3 + 5) = v7;
  v6 = 0uLL;
  v7 = 0;
  *a2 = v3 + 24;
  a2[1] = v3;
  if (v5 < 0)
    operator delete(*(void **)__p);
}

void sub_20F436248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F436294@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t *v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  uint64_t *p_dst;
  unint64_t v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  size_t v27;
  char *v28;
  uint64_t **v29;
  uint64_t v30;
  void *v31;
  _QWORD v33[2];
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const void *v38;
  uint64_t v39;
  const void *v40;
  unint64_t v41;
  void *__p[2];
  __int128 v43;
  int v44;
  uint64_t v45[19];
  uint64_t *__dst;
  size_t v47;
  int64_t v48;

  v6 = MEMORY[0x24BEDB870];
  v7 = MEMORY[0x24BEDB870] + 64;
  v8 = (uint64_t *)MEMORY[0x24BEDB800];
  v9 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  v10 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v45[0] = MEMORY[0x24BEDB870] + 64;
  v36 = v9;
  *(uint64_t *)((char *)&v36 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = (std::ios_base *)((char *)&v36 + *(_QWORD *)(v36 - 24));
  std::ios_base::init(v11, &v37);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v36 = v6 + 24;
  v45[0] = v7;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x24BEDB848];
  v37 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)__p = 0u;
  v43 = 0u;
  v44 = 16;
  v33[1] = 1;
  v13 = operator new();
  *(_QWORD *)v13 = &v36;
  *(_QWORD *)(v13 + 8) = &v36;
  *(_BYTE *)(v13 + 16) = 0;
  *(_BYTE *)(v13 + 40) = 0;
  *(_BYTE *)(v13 + 48) = 0;
  *(_BYTE *)(v13 + 72) = 0;
  *(_QWORD *)(v13 + 88) = 0;
  *(_QWORD *)(v13 + 96) = 0;
  *(_QWORD *)(v13 + 80) = 0;
  v33[0] = &off_24C9B4468;
  v34 = &unk_24C9B45B8;
  v35 = v13;
  v14 = *(unsigned __int8 *)(a2 + 23);
  if ((v14 & 0x80u) != 0)
    v14 = *(_QWORD *)(a2 + 8);
  if (v14 && (sub_20E9F5254((uint64_t)&__dst, v13 + 8, a2), *(_BYTE *)(v35 + 40)))
  {
    __dst = (uint64_t *)(v35 + 16);
    sub_20E9F3D4C(&__dst, 3u);
  }
  else
  {
    LOBYTE(__dst) = 3;
    std::ostream::write();
  }
  sub_20E9EE95C(v35);
  sub_20E94E1A8((uint64_t)&__dst, a1);
  sub_20EAD56A0((uint64_t)v33, (uint64_t)&__dst, 3);
  sub_20E8FB5B8((uint64_t)&__dst);
  v15 = v35;
  v16 = *(_QWORD *)(*(_QWORD *)(v35 + 88) - 8);
  v17 = (size_t *)(v35 + 48);
  sub_20E9EE4D0((uint64_t *)(v35 + 48), *(_QWORD *)(v35 + 16) - v16 - 9);
  if (*v17)
    memmove((void *)(*(_QWORD *)(v15 + 24) + v16), *(const void **)(v15 + 56), *v17);
  *(_QWORD *)(v15 + 48) = 0;
  v18 = *(_QWORD *)(v15 + 80);
  v19 = *(_QWORD *)(v15 + 88) - 8;
  *(_QWORD *)(v15 + 88) = v19;
  if (v18 == v19)
  {
    std::ostream::write();
    if (*(_BYTE *)(v15 + 40))
    {
      free(*(void **)(v15 + 24));
      *(_BYTE *)(v15 + 40) = 0;
    }
  }
  if ((v44 & 0x10) != 0)
  {
    v22 = *((_QWORD *)&v43 + 1);
    if (*((_QWORD *)&v43 + 1) < v41)
    {
      *((_QWORD *)&v43 + 1) = v41;
      v22 = v41;
    }
    v23 = v40;
    v20 = v22 - (_QWORD)v40;
    if (v22 - (unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_48;
  }
  else
  {
    if ((v44 & 8) == 0)
    {
      v20 = 0;
      HIBYTE(v48) = 0;
      p_dst = (uint64_t *)&__dst;
      goto LABEL_25;
    }
    v23 = v38;
    v20 = v39 - (_QWORD)v38;
    if ((unint64_t)(v39 - (_QWORD)v38) >= 0x7FFFFFFFFFFFFFF8)
LABEL_48:
      sub_20E860B7C();
  }
  if (v20 >= 0x17)
  {
    v24 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v24 = v20 | 7;
    v25 = v24 + 1;
    p_dst = (uint64_t *)operator new(v24 + 1);
    v47 = v20;
    v48 = v25 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_24;
  }
  HIBYTE(v48) = v20;
  p_dst = (uint64_t *)&__dst;
  if (v20)
LABEL_24:
    memmove(p_dst, v23, v20);
LABEL_25:
  *((_BYTE *)p_dst + v20) = 0;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v26 = SHIBYTE(v48);
  if (v48 >= 0)
    v27 = HIBYTE(v48);
  else
    v27 = v47;
  if (v27)
  {
    if ((v27 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v28 = (char *)operator new(v27);
    bzero(v28, v27);
    *a3 = v28;
    a3[1] = &v28[v27];
    a3[2] = &v28[v27];
    if (v26 >= 0)
      v29 = &__dst;
    else
      v29 = (uint64_t **)__dst;
    memmove(v28, v29, v27);
  }
  if (v26 < 0)
    operator delete(__dst);
  v33[0] = &off_24C9B7040;
  v30 = v35;
  v34 = &unk_24C9B7190;
  v35 = 0;
  if (v30)
  {
    v31 = *(void **)(v30 + 80);
    if (v31)
    {
      *(_QWORD *)(v30 + 88) = v31;
      operator delete(v31);
    }
    if (*(_BYTE *)(v30 + 72))
      free(*(void **)(v30 + 56));
    if (*(_BYTE *)(v30 + 40))
      free(*(void **)(v30 + 24));
    MEMORY[0x212BC6398](v30, 0x1030C408C1A3048);
  }
  v36 = *v8;
  *(uint64_t *)((char *)&v36 + *(_QWORD *)(v36 - 24)) = v8[3];
  v37 = v12 + 16;
  if (SBYTE7(v43) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212BC6290](v45);
}

void sub_20F4366CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_20E8FB5B8(v2 - 192);
  sub_20E9EE6A8((uint64_t *)va);
  sub_20E9977BC((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20F4366F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20E9977BC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F436704(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x212BC6290](v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20F436790@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  __int128 __p;
  uint64_t v8;
  _BYTE v9[448];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  __p = 0uLL;
  v8 = 0;
  sub_20EB063DC((uint64_t)v9, a1, (uint64_t *)&__p);
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  if (*(_BYTE *)(a2 + 8))
    sub_20F448AAC(*(uint64_t **)a2, (uint64_t)v9);
  HIBYTE(v8) = 13;
  strcpy((char *)&__p, "MapDataSample");
  sub_20EE676A4((uint64_t)v9, (uint64_t)&__p, a3);
  if (SHIBYTE(v8) < 0)
    operator delete((void *)__p);
  sub_20E94FADC((uint64_t)v9);
  return kdebug_trace();
}

void sub_20F4368C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_20E94FADC((uint64_t)&a21);
  sub_20E8E69C4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20F43692C(__int128 *a1, _QWORD *a2, uint64_t a3)
{
  void *__p;
  void *v8;
  uint64_t v9;
  _BYTE v10[448];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  __p = 0;
  v8 = 0;
  v9 = 0;
  sub_20EB063DC((uint64_t)v10, a2, (uint64_t *)&__p);
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
  if (*(_BYTE *)(a3 + 8))
    sub_20F448AAC(*(uint64_t **)a3, (uint64_t)v10);
  sub_20F436A88(a1, (uint64_t)v10, "MapDataSample", 0xDuLL);
  sub_20E94FADC((uint64_t)v10);
  return kdebug_trace();
}

void sub_20F436A34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18)
{
  sub_20E94FADC((uint64_t)&a18);
  sub_20E8E69C4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20F436A88(__int128 *a1, uint64_t a2, const void *a3, size_t a4)
{
  std::ios_base::failure *exception;
  const std::string::value_type *p_dst;
  std::string::size_type v11;
  std::error_code v12;
  __int128 __dst;
  uint64_t v14;
  std::string __msg;
  uint64_t v16;
  _BYTE v17[408];
  _QWORD v18[20];

  v18[19] = *MEMORY[0x24BDAC8D0];
  sub_20EF88698(&v16);
  if (*(_DWORD *)&v17[*(_QWORD *)(v16 - 24) + 24])
  {
    exception = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
    if (*((char *)a1 + 23) < 0)
    {
      sub_20E860C04(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
    }
    else
    {
      __dst = *a1;
      v14 = *((_QWORD *)a1 + 2);
    }
    if (v14 >= 0)
      p_dst = (const std::string::value_type *)&__dst;
    else
      p_dst = (const std::string::value_type *)__dst;
    if (v14 >= 0)
      v11 = HIBYTE(v14);
    else
      v11 = *((_QWORD *)&__dst + 1);
    sub_20F43A11C("Problem opening", " ref state ", p_dst, v11, &__msg);
    *(_QWORD *)&v12.__val_ = 1;
    v12.__cat_ = std::iostream_category();
    std::ios_base::failure::failure(exception, &__msg, &v12);
    __cxa_throw(exception, MEMORY[0x24BEDB710], MEMORY[0x24BEDB570]);
  }
  sub_20EF972C0((uint64_t)&v16, a2, a3, a4);
  v16 = *MEMORY[0x24BEDB7E8];
  *(_QWORD *)&v17[*(_QWORD *)(v16 - 24) - 8] = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 24);
  MEMORY[0x212BC5B4C](v17);
  std::ostream::~ostream();
  return MEMORY[0x212BC6290](v18);
}

void sub_20F436C18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23)
{
  void *v23;

  __cxa_free_exception(v23);
  sub_20EEA00A4(&a23);
  _Unwind_Resume(a1);
}

void sub_20F436C98(std::string *__src, uint64_t **a2, uint64_t a3, char a4)
{
  std::string *v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  v7 = (std::string *)((char *)__src - 1);
  do
  {
    v8 = v7->__r_.__value_.__s.__data_[1];
    v7 = (std::string *)((char *)v7 + 1);
  }
  while (v8);
  sub_20E8A9678(&__p, __src, v7);
  sub_20F44B2D0(a2, a4, (uint64_t *)&v11);
  sub_20F43692C((__int128 *)&__p, v11, a3);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    v10 = sub_20E9545B0((uint64_t)v9);
    MEMORY[0x212BC6398](v10, 0x10A0C401749CDD1);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20F436D54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_20EE5C31C(&a9);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20F436D84(void *a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  std::string *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  std::string::size_type v21;
  std::string *p_p;
  std::string::size_type v23;
  std::string::size_type v24;
  int v25;
  BOOL v26;
  uint64_t v28;
  std::string *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  std::string::size_type size;
  std::string *v34;
  std::string::size_type v35;
  uint64_t v36;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  uint64_t v48;
  unint64_t *v49;
  std::ios_base::failure *v51;
  const std::error_category *v52;
  std::ios_base::failure *exception;
  const std::error_category *v54;
  std::string v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  _QWORD v65[2];
  __int128 v66;
  __int128 v67;
  int v68;
  void *__src;
  std::error_code __ec;
  std::string __msg;
  std::string __p;
  void *v73;
  void *v74;
  __int128 v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  char v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  std::string v106;
  void *v107;
  void *v108;
  __int128 v109;
  _QWORD v110[4];
  __int128 v111;
  uint64_t v112;
  char v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  _OWORD v118[2];
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  uint64_t v132;
  __int128 v133;
  uint64_t v134;
  __int128 *v135;
  __int128 v136;
  __int128 v137;
  _BYTE v138[32];
  uint64_t v139;
  uint64_t v140;

  v140 = *MEMORY[0x24BDAC8D0];
  __src = a1;
  v66 = 0u;
  v67 = 0u;
  v68 = 733221288;
  kdebug_trace();
  v65[0] = &__src;
  v65[1] = a3;
  *((_BYTE *)&v106.__r_.__value_.__s + 23) = 17;
  strcpy((char *)&v106, "VIODatabaseSample");
  if (!sub_20F4377D4((uint64_t)v65, (unsigned __int8 *)&v106, v5, v6, v7, v8, v9, v10, v55.__r_.__value_.__l.__data_, v55.__r_.__value_.__l.__size_, v55.__r_.__value_.__r.__words[2], SWORD2(v55.__r_.__value_.__r.__words[2]), v55.__r_.__value_.__s.__data_[22], SHIBYTE(v55.__r_.__value_.__r.__words[2])))
  {
    *((_BYTE *)&v106.__r_.__value_.__s + 23) = 13;
    strcpy((char *)&v106, "MapDataSample");
    if (!sub_20F4377D4((uint64_t)v65, (unsigned __int8 *)&v106, v11, v12, v13, v14, v15, v16, v55.__r_.__value_.__l.__data_, v55.__r_.__value_.__l.__size_, v55.__r_.__value_.__r.__words[2], SWORD2(v55.__r_.__value_.__r.__words[2]), v55.__r_.__value_.__s.__data_[22], SHIBYTE(v55.__r_.__value_.__r.__words[2])))goto LABEL_79;
    memset(&v106, 0, sizeof(v106));
    v29 = (std::string *)((char *)__src - 1);
    do
    {
      v30 = v29->__r_.__value_.__s.__data_[1];
      v29 = (std::string *)((char *)v29 + 1);
    }
    while (v30);
    sub_20E8A9678(&v106, (std::string *)__src, v29);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, std::string *, uint64_t))(*(_QWORD *)a3 + 368))(&v62, a3, &v106, 8);
    if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v106.__r_.__value_.__l.__data_);
      v31 = v63;
      if (v63)
        goto LABEL_32;
    }
    else
    {
      v31 = v63;
      if (v63)
      {
LABEL_32:
        v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 16))(v31);
        v55.__r_.__value_.__r.__words[0] = 1;
        sub_20E9EECEC(&__p, (uint64_t *)&v55, v32, 0x2800uLL);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C9B0298;
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_24C9B03E0;
        memset(&v55, 0, sizeof(v55));
        sub_20E9EE280(*((uint64_t *)&v75 + 1), &v55);
        size = HIBYTE(v55.__r_.__value_.__r.__words[2]);
        if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v55.__r_.__value_.__l.__size_;
        if (size != 13)
          goto LABEL_82;
        v34 = &v55;
        if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v34 = (std::string *)v55.__r_.__value_.__r.__words[0];
        v35 = v34->__r_.__value_.__r.__words[0];
        v36 = *(std::string::size_type *)((char *)v34->__r_.__value_.__r.__words + 5);
        if (v35 != 0x536174614470614DLL || v36 != 0x656C706D61536174)
        {
LABEL_82:
          exception = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
          std::operator+<char>();
          v54 = std::iostream_category();
          *(_QWORD *)&__ec.__val_ = 1;
          __ec.__cat_ = v54;
          std::ios_base::failure::failure(exception, &__msg, &__ec);
          __cxa_throw(exception, MEMORY[0x24BEDB710], MEMORY[0x24BEDB570]);
        }
        if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v55.__r_.__value_.__l.__data_);
        v107 = 0;
        v106.__r_.__value_.__r.__words[2] = (std::string::size_type)&v107;
        v109 = 0u;
        memset(v110, 0, sizeof(v110));
        v111 = 0u;
        v108 = 0;
        v112 = 0;
        v113 = 3;
        v116 = 0;
        v115 = 0;
        v114 = &v115;
        memset(v118, 0, sizeof(v118));
        v117 = 0u;
        v120 = 0;
        v119 = &v120;
        v124 = 0;
        v123 = 0;
        v121 = 0;
        v122 = &v123;
        v127 = 0u;
        v128 = 0u;
        v129 = 0u;
        v130 = 0u;
        v126 = 0u;
        v125 = -1;
        v131 = 0;
        v133 = 0u;
        v134 = 0;
        v139 = 0;
        v137 = 0u;
        memset(v138, 0, sizeof(v138));
        v136 = 0u;
        v132 = -1;
        v135 = &v136;
        sub_20E9450C0((uint64_t)&v55, &__p, (uint64_t)&v106);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C9B71C0;
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_24C9B7308;
        v38 = *((_QWORD *)&v75 + 1);
        *((_QWORD *)&v75 + 1) = 0;
        if (v38)
        {
          sub_20E9EF740((_QWORD *)(v38 + 8));
          MEMORY[0x212BC6398](v38, 0x10F2C40853B94B7);
        }
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)off_24C9B7428;
        if (v73)
        {
          v74 = v73;
          operator delete(v73);
        }
        sub_20E94BF80(a2, (uint64_t)&v106);
        sub_20E94FADC((uint64_t)&v106);
        v39 = v64;
        if (!v64)
          goto LABEL_72;
        p_shared_owners = (unint64_t *)&v64->__shared_owners_;
        do
          v41 = __ldaxr(p_shared_owners);
        while (__stlxr(v41 - 1, p_shared_owners));
        goto LABEL_70;
      }
    }
    v42 = v64;
    if (v64)
    {
      v49 = (unint64_t *)&v64->__shared_owners_;
      do
        v44 = __ldaxr(v49);
      while (__stlxr(v44 - 1, v49));
LABEL_77:
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
LABEL_79:
    v48 = 2;
    goto LABEL_80;
  }
  memset(&v106, 0, sizeof(v106));
  v17 = (std::string *)((char *)__src - 1);
  do
  {
    v18 = v17->__r_.__value_.__s.__data_[1];
    v17 = (std::string *)((char *)v17 + 1);
  }
  while (v18);
  sub_20E8A9678(&v106, (std::string *)__src, v17);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, std::string *, uint64_t))(*(_QWORD *)a3 + 368))(&v62, a3, &v106, 8);
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v106.__r_.__value_.__l.__data_);
    v19 = v63;
    if (v63)
      goto LABEL_6;
LABEL_53:
    v42 = v64;
    if (v64)
    {
      v43 = (unint64_t *)&v64->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      goto LABEL_77;
    }
    goto LABEL_79;
  }
  v19 = v63;
  if (!v63)
    goto LABEL_53;
LABEL_6:
  v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
  __p.__r_.__value_.__r.__words[0] = 1;
  sub_20E9EECEC(&v106, (uint64_t *)&__p, v20, 0x2800uLL);
  v106.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C9B0298;
  v106.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_24C9B03E0;
  memset(&__p, 0, sizeof(__p));
  sub_20E9EE280(*((uint64_t *)&v109 + 1), &__p);
  v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v21 = __p.__r_.__value_.__l.__size_;
  if (v21 != 17)
    goto LABEL_81;
  p_p = &__p;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v23 = p_p->__r_.__value_.__r.__words[0];
  v24 = p_p->__r_.__value_.__l.__size_;
  v25 = p_p->__r_.__value_.__s.__data_[16];
  v26 = v23 == 0x62617461444F4956 && v24 == 0x6C706D6153657361;
  if (!v26 || v25 != 101)
  {
LABEL_81:
    v51 = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
    std::operator+<char>();
    v52 = std::iostream_category();
    *(_QWORD *)&__ec.__val_ = 1;
    __ec.__cat_ = v52;
    std::ios_base::failure::failure(v51, &__msg, &__ec);
    __cxa_throw(v51, MEMORY[0x24BEDB710], MEMORY[0x24BEDB570]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_OWORD *)&v55.__r_.__value_.__r.__words[1] = 0uLL;
  v55.__r_.__value_.__r.__words[0] = (std::string::size_type)&v55.__r_.__value_.__l.__size_;
  v56 = 0u;
  v57 = 0u;
  v58 = 0u;
  v59 = 0u;
  v60 = 0;
  v61 = 3;
  LODWORD(__p.__r_.__value_.__l.__data_) = 3;
  sub_20E9EDADC(*((uint64_t *)&v109 + 1), &__p);
  sub_20E945814((uint64_t)&__p, (uint64_t)&v106, (uint64_t)&v55, __p.__r_.__value_.__l.__data_);
  v106.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C9B71C0;
  v106.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_24C9B7308;
  v28 = *((_QWORD *)&v109 + 1);
  *((_QWORD *)&v109 + 1) = 0;
  if (v28)
  {
    sub_20E9EF740((_QWORD *)(v28 + 8));
    MEMORY[0x212BC6398](v28, 0x10F2C40853B94B7);
  }
  v106.__r_.__value_.__r.__words[2] = (std::string::size_type)off_24C9B7428;
  if (v107)
  {
    v108 = v107;
    operator delete(v107);
  }
  sub_20F446F18((uint64_t)&v55, (uint64_t)&__p.__r_.__value_.__l.__size_);
  v99 = 0u;
  v100 = 0u;
  v97 = 0u;
  v98 = 0u;
  v96 = 0u;
  v101 = 0;
  v102 = -1;
  v105 = 0;
  v103 = 0;
  v104 = 0;
  v106.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
  v107 = v73;
  v108 = v74;
  if (v74)
  {
    *((_QWORD *)v73 + 2) = &v107;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v73;
    v73 = 0;
    v74 = 0;
  }
  else
  {
    v106.__r_.__value_.__r.__words[2] = (std::string::size_type)&v107;
  }
  v109 = v75;
  v110[0] = v76;
  v75 = 0uLL;
  *(_OWORD *)&v110[1] = v77;
  v76 = 0;
  v77 = 0uLL;
  v45 = v78;
  v78 = 0;
  v111 = v79;
  v110[3] = v45;
  v112 = v80;
  v80 = 0;
  v79 = 0uLL;
  v113 = v81;
  v114 = v82;
  v115 = v83;
  v116 = v84;
  if (v84)
  {
    *(_QWORD *)(v83 + 16) = &v115;
    v82 = &v83;
    v83 = 0;
    v84 = 0;
  }
  else
  {
    v114 = &v115;
  }
  v117 = v85;
  v85 = 0uLL;
  *(_OWORD *)((char *)v118 + 8) = v87;
  *(_QWORD *)&v118[0] = v86;
  *((_QWORD *)&v118[1] + 1) = v88;
  v86 = 0;
  v87 = 0uLL;
  v88 = 0;
  v119 = v89;
  v120 = v90;
  v121 = v91;
  if (v91)
  {
    *(_QWORD *)(v90 + 16) = &v120;
    v89 = &v90;
    v90 = 0;
    v91 = 0;
  }
  else
  {
    v119 = &v120;
  }
  v122 = v92;
  v123 = v93;
  v124 = v94;
  if (v94)
  {
    *(_QWORD *)(v93 + 16) = &v123;
    v92 = &v93;
    v93 = 0;
    v94 = 0;
  }
  else
  {
    v122 = &v123;
  }
  v125 = v95;
  v126 = 0uLL;
  v127 = (unint64_t)v97;
  v97 = 0uLL;
  v96 = 0uLL;
  *(_QWORD *)&v128 = 0;
  v129 = v99;
  v130 = v100;
  v46 = *((_QWORD *)&v98 + 1);
  v98 = 0uLL;
  *((_QWORD *)&v128 + 1) = v46;
  v131 = v101;
  memset(v138, 0, sizeof(v138));
  v137 = 0u;
  v133 = 0u;
  v134 = 0;
  v139 = 0;
  *(_QWORD *)&v138[13] = 0;
  v136 = 0u;
  v132 = -1;
  v135 = &v136;
  sub_20E94BF80(a2, (uint64_t)&v106);
  sub_20E94FADC((uint64_t)&v106);
  sub_20E94FBC8((uint64_t)&__p);
  sub_20E8FB5B8((uint64_t)&v55);
  v39 = v64;
  if (!v64)
    goto LABEL_72;
  v47 = (unint64_t *)&v64->__shared_owners_;
  do
    v41 = __ldaxr(v47);
  while (__stlxr(v41 - 1, v47));
LABEL_70:
  if (!v41)
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
  }
LABEL_72:
  v48 = *(unsigned __int8 *)(a2 + 112) < 2u;
LABEL_80:
  kdebug_trace();
  return v48;
}

void sub_20F437698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,uint64_t a38,void *a39)
{
  sub_20E94FADC((uint64_t)&STACK[0x260]);
  sub_20E9EEE68(&a39);
  sub_21022EAD8((uint64_t)&a22);
  sub_20E8E69C4((uint64_t)&a27);
  _Unwind_Resume(a1);
}

BOOL sub_20F4377D4(uint64_t a1, unsigned __int8 *a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::string **v16;
  std::string *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::string __p;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;

  v16 = *(std::string ***)a1;
  memset(&__p, 0, sizeof(__p));
  v17 = (std::string *)((char *)*v16 - 1);
  do
  {
    v18 = v17->__r_.__value_.__s.__data_[1];
    v17 = (std::string *)((char *)v17 + 1);
  }
  while (v18);
  sub_20E8A9678(&__p, *v16, v17);
  (*(void (**)(uint64_t *__return_ptr, _QWORD, std::string *, uint64_t))(**(_QWORD **)(a1 + 8) + 368))(&v27, *(_QWORD *)(a1 + 8), &__p, 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    v19 = v28;
    if (!v28)
      goto LABEL_9;
  }
  else
  {
    v19 = v28;
    if (!v28)
    {
LABEL_9:
      v21 = 0;
      v22 = v29;
      if (v29)
        goto LABEL_10;
      return v21;
    }
  }
  v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
  v21 = sub_210105254(v20, a2);
  v22 = v29;
  if (!v29)
    return v21;
LABEL_10:
  p_shared_owners = (unint64_t *)&v22->__shared_owners_;
  do
    v25 = __ldaxr(p_shared_owners);
  while (__stlxr(v25 - 1, p_shared_owners));
  if (v25)
    return v21;
  ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
  std::__shared_weak_count::__release_weak(v22);
  return v21;
}

void sub_20F4378FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_21022EAD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20F437910@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  char *v11;
  _QWORD *v12;
  void *v13;
  char *v14;
  void *v15;
  void *v16;
  void *__p[2];
  uint64_t v19;
  void *v20[2];
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  __int128 v25;
  _OWORD v26[2];
  int v27;
  __int128 v28;
  __int128 v29;
  int v30;

  v28 = 0u;
  v29 = 0u;
  v30 = 733221312;
  kdebug_trace();
  v20[0] = 0;
  v20[1] = 0;
  v23 = 0;
  v24 = 0;
  v21 = 0;
  v22 = &v23;
  LOBYTE(v27) = 0;
  v25 = 0u;
  memset(v26, 0, 21);
  v4 = *a1;
  __p[0] = 0;
  __p[1] = 0;
  v19 = 0;
  sub_20E9540A0(*(void **)v4, *(_QWORD *)(v4 + 8) - *(_QWORD *)v4, (uint64_t)v20, (unsigned __int8 *)__p, 0x2800uLL);
  if (SHIBYTE(v19) < 0)
    operator delete(__p[0]);
  *(_OWORD *)a2 = *(_OWORD *)v20;
  v20[0] = 0;
  v20[1] = 0;
  v5 = v21;
  v6 = v22;
  v21 = 0;
  *(_QWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 24) = v6;
  v7 = v23;
  v8 = v24;
  *(_QWORD *)(a2 + 32) = v23;
  v9 = a2 + 32;
  *(_QWORD *)(a2 + 40) = v8;
  if (v8)
  {
    v7[2] = v9;
    v7 = 0;
    v22 = &v23;
    v23 = 0;
    v24 = 0;
  }
  else
  {
    *(_QWORD *)(a2 + 24) = v9;
  }
  v10 = v26[0];
  *(_OWORD *)(a2 + 48) = v25;
  *(_OWORD *)(a2 + 64) = v10;
  *(_OWORD *)(a2 + 80) = v26[1];
  *(_DWORD *)(a2 + 96) = v27;
  *(_BYTE *)(a2 + 104) = 1;
  sub_20E86872C((uint64_t)&v22, v7);
  v11 = (char *)v20[0];
  if (v20[0])
  {
    v12 = v20[1];
    v13 = v20[0];
    if (v20[1] != v20[0])
    {
      v14 = (char *)v20[1];
      do
      {
        v16 = (void *)*((_QWORD *)v14 - 6);
        v14 -= 48;
        v15 = v16;
        if (v16)
        {
          *(v12 - 5) = v15;
          operator delete(v15);
        }
        v12 = v14;
      }
      while (v14 != v11);
      v13 = v20[0];
    }
    v20[1] = v11;
    operator delete(v13);
  }
  return kdebug_trace();
}

void sub_20F437AB0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char *a16)
{
  uint64_t v16;

  if (a15 < 0)
    operator delete(__p);
  sub_20EE5B500(&a16);
  __cxa_begin_catch(a1);
  *(_DWORD *)v16 = 0;
  *(_BYTE *)(v16 + 104) = 0;
  __cxa_end_catch();
  JUMPOUT(0x20F437A8CLL);
}

void sub_20F437AF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8E69C4(v1 - 96);
  _Unwind_Resume(a1);
}

uint64_t sub_20F437B08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  char *v18;
  _QWORD *v19;
  void *v20;
  char *v21;
  void *v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  void *__p[2];
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  __int128 v33;
  _OWORD v34[2];
  int v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  __int128 v39;
  __int128 v40;
  int v41;
  _QWORD v42[2];
  void (**v43)();
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;

  v39 = 0u;
  v40 = 0u;
  v41 = 733221312;
  kdebug_trace();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 368))(&v36, a2, a1, 8);
  if (v37)
  {
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37);
    v47 = 1;
    sub_20E9EECEC(v42, &v47, v6, 0x2800uLL);
    v42[0] = &off_24C9B0298;
    v43 = (void (**)())&unk_24C9B03E0;
    __p[0] = 0;
    __p[1] = 0;
    v31 = 0;
    v32 = 0;
    v29 = 0;
    v30 = &v31;
    LOBYTE(v35) = 0;
    v33 = 0u;
    memset(v34, 0, 21);
    LODWORD(v47) = 4;
    sub_20E9EDADC(v46, &v47);
    v7 = v47;
    sub_20E90A71C(&v43);
    if (v7 >= 4)
      v8 = 4;
    else
      v8 = v7;
    sub_20E94B960(v42, (uint64_t)__p, v8);
    v9 = v45;
    v10 = *((_QWORD *)v9 - 2) - ((uint64_t (*)(uint64_t))v43[4])((uint64_t)&v43) + *((_QWORD *)v9 - 1);
    if (v10)
      ((void (*)(uint64_t, unint64_t))v43[5])((uint64_t)&v43, v10);
    v11 = v46;
    v42[0] = &off_24C9B71C0;
    v43 = (void (**)())&unk_24C9B7308;
    v45 -= 16;
    v46 = 0;
    if (v11)
    {
      sub_20E9EF740((_QWORD *)(v11 + 8));
      MEMORY[0x212BC6398](v11, 0x10F2C40853B94B7);
    }
    v43 = off_24C9B7428;
    if (v44)
    {
      v45 = v44;
      operator delete(v44);
    }
    *(_OWORD *)a3 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v12 = v29;
    v13 = v30;
    v29 = 0;
    *(_QWORD *)(a3 + 16) = v12;
    *(_QWORD *)(a3 + 24) = v13;
    v14 = v31;
    v15 = v32;
    *(_QWORD *)(a3 + 32) = v31;
    v16 = a3 + 32;
    *(_QWORD *)(a3 + 40) = v15;
    if (v15)
    {
      v14[2] = v16;
      v14 = 0;
      v30 = &v31;
      v31 = 0;
      v32 = 0;
    }
    else
    {
      *(_QWORD *)(a3 + 24) = v16;
    }
    v17 = v34[0];
    *(_OWORD *)(a3 + 48) = v33;
    *(_OWORD *)(a3 + 64) = v17;
    *(_OWORD *)(a3 + 80) = v34[1];
    *(_DWORD *)(a3 + 96) = v35;
    *(_BYTE *)(a3 + 104) = 1;
    sub_20E86872C((uint64_t)&v30, v14);
    v18 = (char *)__p[0];
    if (__p[0])
    {
      v19 = __p[1];
      v20 = __p[0];
      if (__p[1] != __p[0])
      {
        v21 = (char *)__p[1];
        do
        {
          v23 = (void *)*((_QWORD *)v21 - 6);
          v21 -= 48;
          v22 = v23;
          if (v23)
          {
            *(v19 - 5) = v22;
            operator delete(v22);
          }
          v19 = v21;
        }
        while (v21 != v18);
        v20 = __p[0];
      }
      __p[1] = v18;
      operator delete(v20);
    }
  }
  else
  {
    *(_DWORD *)a3 = 0;
    *(_BYTE *)(a3 + 104) = 0;
  }
  v24 = v38;
  if (v38)
  {
    p_shared_owners = (unint64_t *)&v38->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  return kdebug_trace();
}

void sub_20F437E00(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29)
{
  uint64_t v29;

  __cxa_begin_catch(a1);
  *(_DWORD *)v29 = 0;
  *(_BYTE *)(v29 + 104) = 0;
  __cxa_end_catch();
  JUMPOUT(0x20F437DD8);
}

void sub_20F437E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_20E8E69C4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20F437E68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  __int128 v16;
  __int128 v17;
  int v18;

  v16 = 0u;
  v17 = 0u;
  v18 = 733221312;
  kdebug_trace();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 368))(&v13, a2, a1, 8);
  if (v14)
  {
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
    sub_20F437FE0(v6, &unk_2102AB6D1, 0, (void **)&v11);
    *(_OWORD *)a3 = v11;
    *(_QWORD *)(a3 + 16) = v12;
    *(_BYTE *)(a3 + 24) = 1;
    v7 = v15;
    if (!v15)
      return kdebug_trace();
  }
  else
  {
    *(_DWORD *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
    v7 = v15;
    if (!v15)
      return kdebug_trace();
  }
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  return kdebug_trace();
}

void sub_20F437F90(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19)
{
  uint64_t v19;

  __cxa_begin_catch(a1);
  *(_DWORD *)v19 = 0;
  *(_BYTE *)(v19 + 24) = 0;
  __cxa_end_catch();
  JUMPOUT(0x20F437F70);
}

void sub_20F437FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20E8E69C4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F437FE0(uint64_t a1@<X0>, const void *a2@<X1>, size_t a3@<X2>, void **a4@<X8>)
{
  std::string::size_type size;
  int v8;
  void *v9;
  std::string *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  size_t v22;
  char *v23;
  __int128 v24;
  char *v25;
  void *v26;
  char *v27;
  void *v28;
  char *v29;
  void **v30;
  uint64_t v31;
  float *v32;
  float *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  size_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  float *v54;
  _QWORD *v55;
  char *i;
  uint64_t v57;
  void (*v58)(uint64_t);
  _QWORD *v59;
  _QWORD *v60;
  float v61;
  _QWORD *v62;
  char *j;
  uint64_t v64;
  void (*v65)(uint64_t);
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  std::bad_cast *v69;
  std::bad_cast *v70;
  std::bad_cast *v71;
  std::bad_cast *v72;
  std::ios_base::failure *exception;
  char *v74;
  std::error_code __ec;
  std::string __msg;
  uint64_t (**v77)();
  void (**v78)();
  void *__p;
  void *v80;
  uint64_t v81;
  std::string v82;
  _QWORD *v83;

  v82.__r_.__value_.__r.__words[0] = 1;
  sub_20E9EECEC(&v77, (uint64_t *)&v82, a1, 0x2800uLL);
  v77 = &off_24C9B0298;
  v78 = (void (**)())&unk_24C9B03E0;
  if (a3)
  {
    memset(&v82, 0, sizeof(v82));
    sub_20E9EE280(v81, &v82);
    size = HIBYTE(v82.__r_.__value_.__r.__words[2]);
    v8 = SHIBYTE(v82.__r_.__value_.__r.__words[2]);
    if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v82.__r_.__value_.__l.__size_;
    if (a3 != size
      || ((v9 = (void *)v82.__r_.__value_.__r.__words[0],
           (v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        ? (v10 = &v82)
        : (v10 = (std::string *)v82.__r_.__value_.__r.__words[0]),
          memcmp(a2, v10, a3)))
    {
      exception = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
      std::operator+<char>();
      *(_QWORD *)&__ec.__val_ = 1;
      __ec.__cat_ = std::iostream_category();
      std::ios_base::failure::failure(exception, &__msg, &__ec);
      __cxa_throw(exception, MEMORY[0x24BEDB710], MEMORY[0x24BEDB570]);
    }
    if (v8 < 0)
      operator delete(v9);
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  LODWORD(v82.__r_.__value_.__l.__data_) = 1;
  sub_20E9EDADC(v81, &v82);
  *(_QWORD *)&__ec.__val_ = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a4[1] - (_BYTE *)*a4) >> 4);
  sub_20E9EDE6C(v81, &__ec);
  v11 = *(_QWORD *)&__ec.__val_;
  v12 = (char *)*a4;
  v13 = (char *)a4[1];
  v14 = 0xAAAAAAAAAAAAAAABLL * ((v13 - (_BYTE *)*a4) >> 4);
  v15 = *(_QWORD *)&__ec.__val_ - v14;
  if (*(_QWORD *)&__ec.__val_ <= v14)
  {
    if (*(_QWORD *)&__ec.__val_ >= v14)
    {
      v27 = (char *)a4[1];
      v29 = (char *)*a4;
      if (v27 == *a4)
        goto LABEL_96;
    }
    else
    {
      v27 = &v12[48 * *(_QWORD *)&__ec.__val_];
      while (v13 != v27)
      {
        v28 = (void *)*((_QWORD *)v13 - 3);
        if (v28)
        {
          *((_QWORD *)v13 - 2) = v28;
          operator delete(v28);
        }
        v13 -= 48;
      }
      a4[1] = v27;
      v29 = (char *)*a4;
      if (v27 == *a4)
        goto LABEL_96;
    }
LABEL_42:
    v74 = v27;
    while (1)
    {
      LODWORD(v82.__r_.__value_.__l.__data_) = 1;
      sub_20E9EDADC(v81, &v82);
      sub_20E9EDE6C(v81, v29);
      sub_20E9EDADC(v81, (_DWORD *)v29 + 2);
      sub_20E9EDADC(v81, (_DWORD *)v29 + 4);
      v30 = (void **)(v29 + 24);
      __msg.__r_.__value_.__r.__words[0] = (uint64_t)(*((_QWORD *)v29 + 4) - *((_QWORD *)v29 + 3)) >> 3;
      sub_20E9EDE6C(v81, &__msg);
      v31 = __msg.__r_.__value_.__r.__words[0];
      v33 = (float *)*((_QWORD *)v29 + 3);
      v32 = (float *)*((_QWORD *)v29 + 4);
      v34 = ((char *)v32 - (char *)v33) >> 3;
      v35 = __msg.__r_.__value_.__r.__words[0] - v34;
      if (__msg.__r_.__value_.__r.__words[0] > v34)
        break;
      if (__msg.__r_.__value_.__r.__words[0] < v34)
      {
        v32 = &v33[2 * __msg.__r_.__value_.__r.__words[0]];
        *((_QWORD *)v29 + 4) = v32;
      }
LABEL_69:
      if (v32 != v33)
      {
        v54 = v32;
        do
        {
          sub_20E9EFAC4(v81, (uint64_t)&v82);
          if (LODWORD(v82.__r_.__value_.__l.__data_) != 2 || v82.__r_.__value_.__l.__size_ >= 0x100)
          {
            v69 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
            v69->__vftable = 0;
            v70 = std::bad_cast::bad_cast(v69);
            v70->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
            __cxa_throw(v70, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
          }
          *(_BYTE *)v33 = v82.__r_.__value_.__s.__data_[8];
          v55 = v83;
          v83 = 0;
          if (v55)
          {
            for (i = (char *)v55[4]; i != (char *)v55[6]; i -= 16)
            {
              v58 = (void (*)(uint64_t))*((_QWORD *)i - 2);
              v57 = *((_QWORD *)i - 1);
              v58(v57);
            }
            free(i);
            v59 = (_QWORD *)v55[3];
            if (v59)
            {
              do
              {
                v60 = (_QWORD *)*v59;
                free(v59);
                v59 = v60;
              }
              while (v60);
            }
            free(v55);
          }
          sub_20E9EFAC4(v81, (uint64_t)&v82);
          switch(LODWORD(v82.__r_.__value_.__l.__data_))
          {
            case 2:
              v33[1] = (float)v82.__r_.__value_.__l.__size_;
              v62 = v83;
              v83 = 0;
              if (v62)
                goto LABEL_90;
              break;
            case 3:
              v33[1] = (float)(uint64_t)v82.__r_.__value_.__l.__size_;
              v62 = v83;
              v83 = 0;
              if (v62)
                goto LABEL_90;
              break;
            case 4:
              v61 = *(double *)&v82.__r_.__value_.__l.__size_;
              v33[1] = v61;
              v62 = v83;
              v83 = 0;
              if (!v62)
                break;
LABEL_90:
              for (j = (char *)v62[4]; j != (char *)v62[6]; j -= 16)
              {
                v65 = (void (*)(uint64_t))*((_QWORD *)j - 2);
                v64 = *((_QWORD *)j - 1);
                v65(v64);
              }
              free(j);
              v66 = (_QWORD *)v62[3];
              if (v66)
              {
                do
                {
                  v67 = (_QWORD *)*v66;
                  free(v66);
                  v66 = v67;
                }
                while (v67);
              }
              free(v62);
              break;
            default:
              v71 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
              v71->__vftable = 0;
              v72 = std::bad_cast::bad_cast(v71);
              v72->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
              __cxa_throw(v72, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
          }
          v33 += 2;
        }
        while (v33 != v54);
      }
      v29 += 48;
      if (v29 == v27)
        goto LABEL_96;
    }
    v36 = *((_QWORD *)v29 + 5);
    if (v35 <= (v36 - (uint64_t)v32) >> 3)
    {
      bzero(*((void **)v29 + 4), 8 * v35);
      v45 = (char *)&v32[2 * v35];
      *((_QWORD *)v29 + 4) = v45;
      goto LABEL_68;
    }
    if (__msg.__r_.__value_.__r.__words[0] >> 61)
      sub_20E867F44();
    v37 = v36 - (_QWORD)v33;
    if (v37 >> 2 > __msg.__r_.__value_.__r.__words[0])
      v31 = v37 >> 2;
    if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
      v38 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v38 = v31;
    if (v38 >> 61)
      goto LABEL_103;
    v39 = (char *)operator new(8 * v38);
    v40 = 8 * v35;
    v41 = &v39[8 * v34];
    bzero(v41, v40);
    v42 = (char *)((char *)v32 - (char *)v33);
    if (v32 == v33)
    {
      v45 = &v41[v40];
      *((_QWORD *)v29 + 3) = v41;
      *((_QWORD *)v29 + 4) = &v41[v40];
      *((_QWORD *)v29 + 5) = &v39[8 * v38];
      v27 = v74;
      if (!v32)
        goto LABEL_68;
      goto LABEL_67;
    }
    v43 = v42 - 8;
    if ((unint64_t)(v42 - 8) >= 0x58)
    {
      v44 = &v39[8 * v34];
      if ((unint64_t)((char *)v33 - v39) >= 0x20)
      {
        v46 = ((unint64_t)v43 >> 3) + 1;
        v47 = 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
        v48 = (char *)&v32[v47 / 0xFFFFFFFFFFFFFFFCLL];
        v44 = &v41[-v47];
        v49 = &v39[8 * v34 - 16];
        v50 = (char *)(v32 - 4);
        v51 = v46 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v52 = *(_OWORD *)v50;
          *((_OWORD *)v49 - 1) = *((_OWORD *)v50 - 1);
          *(_OWORD *)v49 = v52;
          v49 -= 32;
          v50 -= 32;
          v51 -= 4;
        }
        while (v51);
        v32 = (float *)v48;
        if (v46 == (v46 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_66:
          v32 = (float *)*v30;
          v45 = &v41[v40];
          *((_QWORD *)v29 + 3) = v44;
          *((_QWORD *)v29 + 4) = &v41[v40];
          *((_QWORD *)v29 + 5) = &v39[8 * v38];
          v27 = v74;
          if (v32)
          {
LABEL_67:
            operator delete(v32);
            v45 = (char *)*((_QWORD *)v29 + 4);
          }
LABEL_68:
          v33 = (float *)*v30;
          v32 = (float *)v45;
          goto LABEL_69;
        }
      }
    }
    else
    {
      v44 = &v39[8 * v34];
    }
    do
    {
      v53 = *((_QWORD *)v32 - 1);
      v32 -= 2;
      *((_QWORD *)v44 - 1) = v53;
      v44 -= 8;
    }
    while (v32 != v33);
    goto LABEL_66;
  }
  v16 = a4[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v16 - v13) >> 4) >= v15)
  {
    bzero(v13, 48 * ((48 * v15 - 48) / 0x30) + 48);
    a4[1] = &v13[48 * ((48 * v15 - 48) / 0x30) + 48];
  }
  else
  {
    if (*(_QWORD *)&__ec.__val_ > 0x555555555555555uLL)
      sub_20E867F44();
    v17 = 0xAAAAAAAAAAAAAAABLL * ((v16 - v12) >> 4);
    if (2 * v17 > *(_QWORD *)&__ec.__val_)
      v11 = 2 * v17;
    if (v17 >= 0x2AAAAAAAAAAAAAALL)
      v18 = 0x555555555555555;
    else
      v18 = v11;
    if (v18 > 0x555555555555555)
LABEL_103:
      sub_20E877A38();
    v19 = (char *)operator new(48 * v18);
    v20 = &v19[48 * v14];
    v21 = &v19[48 * v18];
    v22 = 48 * ((48 * v15 - 48) / 0x30) + 48;
    bzero(v20, v22);
    v23 = &v20[v22];
    if (v13 == v12)
    {
      *a4 = v20;
      a4[1] = v23;
      a4[2] = v21;
    }
    else
    {
      do
      {
        v24 = *((_OWORD *)v13 - 3);
        *((_QWORD *)v20 - 4) = *((_QWORD *)v13 - 4);
        *((_OWORD *)v20 - 3) = v24;
        *(_OWORD *)(v20 - 24) = *(_OWORD *)(v13 - 24);
        *((_QWORD *)v20 - 1) = *((_QWORD *)v13 - 1);
        v20 -= 48;
        *((_QWORD *)v13 - 3) = 0;
        *((_QWORD *)v13 - 2) = 0;
        *((_QWORD *)v13 - 1) = 0;
        v13 -= 48;
      }
      while (v13 != v12);
      v13 = (char *)*a4;
      v25 = (char *)a4[1];
      *a4 = v20;
      a4[1] = v23;
      a4[2] = v21;
      while (v25 != v13)
      {
        v26 = (void *)*((_QWORD *)v25 - 3);
        if (v26)
        {
          *((_QWORD *)v25 - 2) = v26;
          operator delete(v26);
        }
        v25 -= 48;
      }
    }
    if (v13)
      operator delete(v13);
  }
  v29 = (char *)*a4;
  v27 = (char *)a4[1];
  if (v27 != *a4)
    goto LABEL_42;
LABEL_96:
  v77 = &off_24C9B71C0;
  v78 = (void (**)())&unk_24C9B7308;
  v68 = v81;
  v81 = 0;
  if (v68)
  {
    sub_20E9EF740((_QWORD *)(v68 + 8));
    MEMORY[0x212BC6398](v68, 0x10F2C40853B94B7);
  }
  v78 = off_24C9B7428;
  if (__p)
  {
    v80 = __p;
    operator delete(__p);
  }
}

void sub_20F438784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32)
{
  void *v32;
  int v33;

  if (a18 < 0)
  {
    operator delete(__p);
    if ((v33 & 1) == 0)
    {
LABEL_6:
      if (a31 < 0)
      {
        operator delete(a26);
        sub_20E9EEE68(&a19);
        _Unwind_Resume(a1);
      }
      sub_20E9EEE68(&a19);
      _Unwind_Resume(a1);
    }
  }
  else if (!v33)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v32);
  goto LABEL_6;
}

uint64_t sub_20F4388CC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL4 v5;
  uint64_t v6;
  _BOOL4 v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  void *v12[2];
  char v13;
  __int128 v14;
  __int128 v15;
  int v16;
  _BYTE __p[24];
  _QWORD v18[2];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  char v24;
  _QWORD *v25;
  _QWORD v26[2];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _QWORD *v30;
  _QWORD v31[3];
  _QWORD v32[3];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  _BYTE *v42;
  _BYTE v43[64];
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v14 = 0u;
  v15 = 0u;
  v16 = 733221312;
  kdebug_trace();
  v4 = *a1;
  __p[23] = 17;
  strcpy(__p, "VIODatabaseSample");
  v5 = sub_210105468(v4, __p);
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    v6 = *a1;
    if (v5)
      goto LABEL_3;
LABEL_5:
    __p[23] = 13;
    strcpy(__p, "MapDataSample");
    v7 = sub_210105468(v6, __p);
    v8 = v7;
    if ((__p[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)__p);
      if (v8)
        goto LABEL_7;
    }
    else if (v7)
    {
LABEL_7:
      v18[0] = 0;
      v18[1] = 0;
      *(_QWORD *)&__p[16] = v18;
      v19 = 0u;
      v20 = 0u;
      v21 = 0u;
      v22 = 0u;
      v23 = 0;
      v24 = 3;
      v25 = v26;
      v26[0] = 0;
      v31[0] = 0;
      v31[1] = 0;
      v27 = 0u;
      v28 = 0u;
      v29 = 0u;
      v26[1] = 0;
      v30 = v31;
      v31[2] = v32;
      v32[0] = 0;
      v32[1] = 0;
      v32[2] = -1;
      v34 = 0u;
      v35 = 0u;
      v36 = 0u;
      v37 = 0u;
      v33 = 0u;
      v38 = 0;
      v39 = -1;
      v40 = 0u;
      v41 = 0;
      v44 = 0;
      memset(v43, 0, sizeof(v43));
      v42 = v43;
      v9 = *a1;
      v13 = 13;
      strcpy((char *)v12, "MapDataSample");
      sub_20E944D50(*(void **)v9, *(_QWORD *)(v9 + 8) - *(_QWORD *)v9, (uint64_t)__p, (unsigned __int8 *)v12, 0x2800uLL);
      if (v13 < 0)
        operator delete(v12[0]);
      sub_20E9470EC(a2, (uint64_t)&__p[16]);
      sub_20E94FADC((uint64_t)__p);
      goto LABEL_10;
    }
    v10 = 2;
    goto LABEL_13;
  }
  v6 = *a1;
  if (!v5)
    goto LABEL_5;
LABEL_3:
  __p[23] = 17;
  strcpy(__p, "VIODatabaseSample");
  sub_20F43A270(*(void **)v6, *(_QWORD *)(v6 + 8) - *(_QWORD *)v6, a2, __p);
LABEL_10:
  v10 = *(unsigned __int8 *)(a2 + 96) < 2u;
LABEL_13:
  kdebug_trace();
  return v10;
}

void sub_20F438B6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a2)
  {
    if (a17 < 0)
      operator delete(__p);
    sub_20E94FADC((uint64_t)&a24);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x20F438B28);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F438C08(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL4 v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  _QWORD v16[2];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  __int128 v24;
  int v25;
  _BYTE v26[8];
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE __p[24];
  _QWORD v63[2];
  __int128 v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  char v70;
  uint64_t *v71;
  _QWORD v72[2];
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  uint64_t *v77;
  _QWORD v78[2];
  uint64_t *v79;
  _QWORD v80[9];
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  _BYTE *v87;
  _BYTE v88[64];
  uint64_t v89;
  uint64_t v90;

  v90 = *MEMORY[0x24BDAC8D0];
  v23 = 0u;
  v24 = 0u;
  v25 = 733221296;
  kdebug_trace();
  v4 = *a1;
  __p[23] = 17;
  strcpy(__p, "VIODatabaseSample");
  v5 = sub_210105468(v4, __p);
  v6 = v5;
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if (v6)
      goto LABEL_3;
  }
  else if (v5)
  {
LABEL_3:
    v16[0] = 0;
    v16[1] = 0;
    v15 = v16;
    v17 = 0u;
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    v21 = 0;
    v22 = 3;
    v7 = *a1;
    __p[23] = 17;
    strcpy(__p, "VIODatabaseSample");
    sub_20F43A270(*(void **)v7, *(_QWORD *)(v7 + 8) - *(_QWORD *)v7, (uint64_t)&v15, __p);
    sub_20F446F18((uint64_t)&v15, (uint64_t)&v27);
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v52 = 0u;
    v57 = 0;
    v58 = -1;
    v61 = 0;
    v59 = 0;
    v60 = 0;
    *(_QWORD *)&__p[16] = v28;
    v63[0] = v29;
    v63[1] = v30;
    if (v30)
    {
      *(_QWORD *)(v29 + 16) = v63;
      v28 = &v29;
      v29 = 0;
      v30 = 0;
    }
    else
    {
      *(_QWORD *)&__p[16] = v63;
    }
    v64 = v31;
    v31 = 0uLL;
    v66 = v33;
    v65 = v32;
    v67 = v34;
    v32 = 0;
    v33 = 0uLL;
    v34 = 0;
    v68 = v35;
    v69 = v36;
    v36 = 0;
    v35 = 0uLL;
    v70 = v37;
    v71 = v38;
    v72[0] = v39;
    v72[1] = v40;
    if (v40)
    {
      *(_QWORD *)(v39 + 16) = v72;
      v38 = &v39;
      v39 = 0;
      v40 = 0;
    }
    else
    {
      v71 = v72;
    }
    v73 = v41;
    v41 = 0uLL;
    v75 = v43;
    v74 = v42;
    v76 = v44;
    v42 = 0;
    v43 = 0uLL;
    v44 = 0;
    v77 = v45;
    v78[0] = v46;
    v78[1] = v47;
    if (v47)
    {
      *(_QWORD *)(v46 + 16) = v78;
      v45 = &v46;
      v46 = 0;
      v47 = 0;
    }
    else
    {
      v77 = v78;
    }
    v79 = v48;
    v80[0] = v49;
    v80[1] = v50;
    if (v50)
    {
      *(_QWORD *)(v49 + 16) = v80;
      v48 = &v49;
      v49 = 0;
      v50 = 0;
    }
    else
    {
      v79 = v80;
    }
    v80[2] = v51;
    v80[3] = 0;
    v80[4] = 0;
    v80[5] = v53;
    v53 = 0uLL;
    v52 = 0uLL;
    v80[7] = 0;
    v80[6] = 0;
    v81 = v55;
    v82 = v56;
    v13 = *((_QWORD *)&v54 + 1);
    v54 = 0uLL;
    v80[8] = v13;
    v83 = v57;
    memset(&v88[32], 0, 32);
    v85 = 0u;
    v86 = 0;
    v89 = 0;
    *(_QWORD *)&v88[45] = 0;
    memset(v88, 0, 32);
    v84 = -1;
    v87 = v88;
    sub_20E94BF80(a2, (uint64_t)__p);
    sub_20E94FADC((uint64_t)__p);
    sub_20E94FBC8((uint64_t)v26);
    sub_20E8FB5B8((uint64_t)&v15);
LABEL_23:
    v12 = *(unsigned __int8 *)(a2 + 112) < 2u;
    goto LABEL_24;
  }
  v8 = *a1;
  __p[23] = 13;
  strcpy(__p, "MapDataSample");
  v9 = sub_210105468(v8, __p);
  v10 = v9;
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if (v10)
    {
LABEL_8:
      v11 = *a1;
      __p[23] = 13;
      strcpy(__p, "MapDataSample");
      sub_20E944D50(*(void **)v11, *(_QWORD *)(v11 + 8) - *(_QWORD *)v11, a2, __p, 0x2800uLL);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      goto LABEL_23;
    }
  }
  else if (v9)
  {
    goto LABEL_8;
  }
  v12 = 2;
LABEL_24:
  kdebug_trace();
  return v12;
}

void sub_20F439068(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    if (SLOBYTE(STACK[0x237]) < 0)
      operator delete((void *)STACK[0x220]);
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x20F439024);
  }
  _Unwind_Resume(a1);
}

void sub_20F4390F0(char **a1, char *__src, char *a3, unint64_t a4)
{
  char *v6;
  uint64_t v8;
  int v9;
  char *v10;
  char *v11;
  char *v12;
  void *v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  __int128 v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  void *v25;

  v6 = __src;
  v9 = (_DWORD)a1 + 16;
  v8 = (uint64_t)a1[2];
  v10 = *a1;
  if (0x8F5C28F5C28F5C29 * ((v8 - (uint64_t)*a1) >> 5) < a4)
  {
    if (v10)
    {
      v11 = a1[1];
      v12 = *a1;
      if (v11 != v10)
      {
        do
        {
          v13 = (void *)*((_QWORD *)v11 - 7);
          if (v13)
          {
            *((_QWORD *)v11 - 6) = v13;
            operator delete(v13);
          }
          v11 -= 800;
        }
        while (v11 != v10);
        v12 = *a1;
      }
      a1[1] = v10;
      operator delete(v12);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x51EB851EB851EBLL)
      goto LABEL_39;
    v19 = 0x8F5C28F5C28F5C29 * (v8 >> 5);
    v20 = 2 * v19;
    if (2 * v19 <= a4)
      v20 = a4;
    v21 = v19 >= 0x28F5C28F5C28F5 ? 0x51EB851EB851EBLL : v20;
    if (v21 > 0x51EB851EB851EBLL)
LABEL_39:
      sub_20E92CED8();
    v22 = 800 * v21;
    v23 = (char *)operator new(800 * v21);
    *a1 = v23;
    a1[1] = v23;
    a1[2] = &v23[v22];
    v24 = sub_20E94E5C8(v9, v6, a3, v23);
LABEL_31:
    a1[1] = v24;
    return;
  }
  v14 = a1[1];
  if (0x8F5C28F5C28F5C29 * ((v14 - v10) >> 5) < a4)
  {
    v15 = &__src[32 * ((v14 - v10) >> 5)];
    if (v14 != v10)
    {
      do
      {
        memcpy(v10, v6, 0x2E8uLL);
        if (v10 != v6)
          sub_20F4393E4((_QWORD *)v10 + 93, *((char **)v6 + 93), *((char **)v6 + 94), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)v6 + 94) - *((_QWORD *)v6 + 93)) >> 3));
        v16 = *((_OWORD *)v6 + 48);
        *(_OWORD *)(v10 + 780) = *(_OWORD *)(v6 + 780);
        *((_OWORD *)v10 + 48) = v16;
        v6 += 800;
        v10 += 800;
      }
      while (v6 != v15);
      v10 = a1[1];
    }
    v24 = sub_20E94E5C8(v9, v15, a3, v10);
    goto LABEL_31;
  }
  if (__src == a3)
  {
    v17 = *a1;
  }
  else
  {
    v17 = *a1;
    do
    {
      memcpy(v10, v6, 0x2E8uLL);
      if (v10 != v6)
        sub_20F4393E4((_QWORD *)v10 + 93, *((char **)v6 + 93), *((char **)v6 + 94), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)v6 + 94) - *((_QWORD *)v6 + 93)) >> 3));
      v18 = *((_OWORD *)v6 + 48);
      *(_OWORD *)(v10 + 780) = *(_OWORD *)(v6 + 780);
      *((_OWORD *)v10 + 48) = v18;
      v17 += 800;
      v6 += 800;
      v10 += 800;
    }
    while (v6 != a3);
    v14 = a1[1];
  }
  while (v14 != v17)
  {
    v25 = (void *)*((_QWORD *)v14 - 7);
    if (v25)
    {
      *((_QWORD *)v14 - 6) = v25;
      operator delete(v25);
    }
    v14 -= 800;
  }
  a1[1] = v17;
}

void sub_20F4393D4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20F4393DC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_QWORD *sub_20F4393E4(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  char *v17;
  void *v18;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (0x6DB6DB6DB6DB6DB7 * ((v8 - *result) >> 3) < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x492492492492492)
      goto LABEL_23;
    v10 = 0x6DB6DB6DB6DB6DB7 * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    v12 = v10 >= 0x249249249249249 ? 0x492492492492492 : v11;
    if (v12 > 0x492492492492492)
LABEL_23:
      sub_20E92CED8();
    v13 = 7 * v12;
    result = operator new(56 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  if (0x6DB6DB6DB6DB6DB7 * ((v16 - v9) >> 3) >= a4)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_22;
    v18 = (void *)*result;
LABEL_21:
    result = memmove(v18, __src, v14);
    goto LABEL_22;
  }
  v17 = &__src[8 * ((v16 - v9) >> 3)];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v17;
  if (v14)
  {
    v18 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *v15 = &v9[v14];
  return result;
}

void sub_20F43957C(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = a2;
  v8 = a1[2];
  v9 = *a1;
  if (0xCF3CF3CF3CF3CF3DLL * ((v8 - *a1) >> 3) >= a4)
  {
    v16 = a1[1];
    if (0xCF3CF3CF3CF3CF3DLL * ((v16 - v9) >> 3) >= a4)
    {
      if (a2 == a3)
      {
        v21 = *a1;
      }
      else
      {
        v21 = *a1;
        do
        {
          sub_20F439814(v9, v6);
          v6 += 168;
          v9 += 168;
          v21 += 168;
        }
        while (v6 != a3);
      }
      sub_20E8FB128((uint64_t)a1, v21);
    }
    else
    {
      v17 = a2 + 8 * ((v16 - v9) >> 3);
      if (v16 != v9)
      {
        v18 = 8 * ((v16 - v9) >> 3);
        do
        {
          sub_20F439814(v9, v6);
          v6 += 168;
          v9 += 168;
          v18 -= 168;
        }
        while (v18);
        v9 = a1[1];
      }
      v19 = v9;
      if (v17 != a3)
      {
        v20 = 0;
        do
        {
          sub_20E9417E0(v9 + v20, (__int128 *)(v17 + v20));
          v20 += 168;
        }
        while (v17 + v20 != a3);
        v19 = v9 + v20;
      }
      a1[1] = v19;
    }
  }
  else
  {
    if (v9)
    {
      sub_20E8FB128((uint64_t)a1, *a1);
      operator delete((void *)*a1);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x186186186186186)
      goto LABEL_32;
    v10 = 0xCF3CF3CF3CF3CF3DLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    v12 = v10 >= 0xC30C30C30C30C3 ? 0x186186186186186 : v11;
    if (v12 > 0x186186186186186)
LABEL_32:
      sub_20E92CED8();
    v13 = 168 * v12;
    v14 = (char *)operator new(168 * v12);
    *a1 = (uint64_t)v14;
    a1[1] = (uint64_t)v14;
    a1[2] = (uint64_t)&v14[v13];
    if (v6 != a3)
    {
      v15 = 0;
      do
      {
        sub_20E9417E0((uint64_t)&v14[v15], (__int128 *)(v6 + v15));
        v15 += 168;
      }
      while (v6 + v15 != a3);
      v14 += v15;
    }
    a1[1] = (uint64_t)v14;
  }
}

void sub_20F4397C4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_20E94E8F4(v2, v3, v3, v4, v4);
  *(_QWORD *)(v1 + 8) = v4;
  _Unwind_Resume(a1);
}

uint64_t sub_20F439814(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  if (a1 != a2)
  {
    sub_20F4398CC((_QWORD *)(a1 + 32), *(char **)(a2 + 32), *(char **)(a2 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 4));
    sub_20EF67860((_QWORD *)(a1 + 56), *(char **)(a2 + 56), *(char **)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 6);
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
    sub_20E86811C((_QWORD *)(a1 + 88), *(char **)(a2 + 88), *(char **)(a2 + 96), (uint64_t)(*(_QWORD *)(a2 + 96) - *(_QWORD *)(a2 + 88)) >> 3);
    *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
    sub_20E92CD94((_QWORD *)(a1 + 120), *(char **)(a2 + 120), *(char **)(a2 + 128), (uint64_t)(*(_QWORD *)(a2 + 128) - *(_QWORD *)(a2 + 120)) >> 3);
    sub_20E867E00((_QWORD *)(a1 + 144), *(char **)(a2 + 144), *(char **)(a2 + 152), (uint64_t)(*(_QWORD *)(a2 + 152) - *(_QWORD *)(a2 + 144)) >> 2);
  }
  return a1;
}

_QWORD *sub_20F4398CC(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  char *v17;
  void *v18;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *result) >> 4) < __sz)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz > 0x555555555555555)
      goto LABEL_23;
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 4);
    v11 = 2 * v10;
    if (2 * v10 <= __sz)
      v11 = __sz;
    v12 = v10 >= 0x2AAAAAAAAAAAAAALL ? 0x555555555555555 : v11;
    if (v12 > 0x555555555555555)
LABEL_23:
      sub_20E92CED8();
    v13 = 6 * v12;
    result = operator new(48 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v16 - v9) >> 4) >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_22;
    v18 = (void *)*result;
LABEL_21:
    result = memmove(v18, __src, v14);
    goto LABEL_22;
  }
  v17 = &__src[16 * ((v16 - v9) >> 4)];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v17;
  if (v14)
  {
    v18 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *v15 = &v9[v14];
  return result;
}

void sub_20F439A44(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  void *v42;

  v9 = (uint64_t)(a1 + 2);
  v8 = a1[2];
  v10 = *a1;
  if (0x2E8BA2E8BA2E8BA3 * ((v8 - *a1) >> 4) < a4)
  {
    if (v10)
    {
      v11 = a1[1];
      v12 = (void *)*a1;
      if (v11 != v10)
      {
        do
        {
          v13 = *(void **)(v11 - 32);
          if (v13)
          {
            *(_QWORD *)(v11 - 24) = v13;
            operator delete(v13);
          }
          v11 -= 176;
        }
        while (v11 != v10);
        v12 = (void *)*a1;
      }
      a1[1] = v10;
      operator delete(v12);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x1745D1745D1745DLL)
      goto LABEL_38;
    v36 = 0x2E8BA2E8BA2E8BA3 * (v8 >> 4);
    v37 = 2 * v36;
    if (2 * v36 <= a4)
      v37 = a4;
    v38 = v36 >= 0xBA2E8BA2E8BA2ELL ? 0x1745D1745D1745DLL : v37;
    if (v38 > 0x1745D1745D1745DLL)
LABEL_38:
      sub_20E92CED8();
    v39 = 176 * v38;
    v40 = operator new(176 * v38);
    *a1 = (uint64_t)v40;
    a1[1] = (uint64_t)v40;
    a1[2] = (uint64_t)v40 + v39;
    v41 = sub_20E94EA94(v9, a2, a3, (uint64_t)v40);
LABEL_31:
    a1[1] = v41;
    return;
  }
  v14 = a1[1];
  if (0x2E8BA2E8BA2E8BA3 * ((v14 - v10) >> 4) < a4)
  {
    v15 = a2 + 16 * ((v14 - v10) >> 4);
    if (v14 != v10)
    {
      v16 = v10 + 144;
      v17 = a2 + 152;
      do
      {
        v19 = v17 - 152;
        *(_OWORD *)(v16 - 144) = *(_OWORD *)(v17 - 152);
        v20 = *(_OWORD *)(v17 - 136);
        v21 = *(_OWORD *)(v17 - 120);
        v22 = *(_OWORD *)(v17 - 88);
        *(_OWORD *)(v16 - 96) = *(_OWORD *)(v17 - 104);
        *(_OWORD *)(v16 - 80) = v22;
        *(_OWORD *)(v16 - 128) = v20;
        *(_OWORD *)(v16 - 112) = v21;
        v23 = *(_OWORD *)(v17 - 72);
        v24 = *(_OWORD *)(v17 - 56);
        v25 = *(_OWORD *)(v17 - 40);
        *(_OWORD *)(v16 - 23) = *(_OWORD *)(v17 - 31);
        *(_OWORD *)(v16 - 48) = v24;
        *(_OWORD *)(v16 - 32) = v25;
        *(_OWORD *)(v16 - 64) = v23;
        if (v16 - 144 != v17 - 152)
          sub_20F439D6C((char **)v16, *(_QWORD *)(v17 - 8), *(char **)v17, (uint64_t)(*(_QWORD *)v17 - *(_QWORD *)(v17 - 8)) >> 3);
        v18 = *(_DWORD *)(v17 + 16);
        *(_WORD *)(v16 + 28) = *(_WORD *)(v17 + 20);
        *(_DWORD *)(v16 + 24) = v18;
        v16 += 176;
        v17 += 176;
      }
      while (v19 + 176 != v15);
      v10 = a1[1];
    }
    v41 = sub_20E94EA94(v9, v15, a3, v10);
    goto LABEL_31;
  }
  if (a2 != a3)
  {
    v26 = v10 + 144;
    v27 = a2 + 152;
    do
    {
      v29 = v27 - 152;
      *(_OWORD *)(v26 - 144) = *(_OWORD *)(v27 - 152);
      v30 = *(_OWORD *)(v27 - 136);
      v31 = *(_OWORD *)(v27 - 120);
      v32 = *(_OWORD *)(v27 - 88);
      *(_OWORD *)(v26 - 96) = *(_OWORD *)(v27 - 104);
      *(_OWORD *)(v26 - 80) = v32;
      *(_OWORD *)(v26 - 128) = v30;
      *(_OWORD *)(v26 - 112) = v31;
      v33 = *(_OWORD *)(v27 - 72);
      v34 = *(_OWORD *)(v27 - 56);
      v35 = *(_OWORD *)(v27 - 40);
      *(_OWORD *)(v26 - 23) = *(_OWORD *)(v27 - 31);
      *(_OWORD *)(v26 - 48) = v34;
      *(_OWORD *)(v26 - 32) = v35;
      *(_OWORD *)(v26 - 64) = v33;
      if (v26 - 144 != v27 - 152)
        sub_20F439D6C((char **)v26, *(_QWORD *)(v27 - 8), *(char **)v27, (uint64_t)(*(_QWORD *)v27 - *(_QWORD *)(v27 - 8)) >> 3);
      v28 = *(_DWORD *)(v27 + 16);
      *(_WORD *)(v26 + 28) = *(_WORD *)(v27 + 20);
      *(_DWORD *)(v26 + 24) = v28;
      v26 += 176;
      v10 += 176;
      v27 += 176;
    }
    while (v29 + 176 != a3);
    v14 = a1[1];
  }
  while (v14 != v10)
  {
    v42 = *(void **)(v14 - 32);
    if (v42)
    {
      *(_QWORD *)(v14 - 24) = v42;
      operator delete(v42);
    }
    v14 -= 176;
  }
  a1[1] = v10;
}

void sub_20F439D5C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20F439D64(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20F439D6C(char **a1, unint64_t a2, char *a3, size_t __sz)
{
  uint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  char *result;
  char **v14;
  char *v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  __int128 *v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  unint64_t v42;
  BOOL v44;
  unint64_t v46;
  uint64_t v47;
  __int128 *v48;
  _OWORD *v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  char *v55;
  unint64_t v56;
  BOOL v58;
  uint64_t v60;
  uint64_t v61;
  _OWORD *v62;
  __int128 *v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  unint64_t v69;
  char *v70;
  unint64_t v71;
  unint64_t v72;
  BOOL v73;
  char v74;
  BOOL v75;
  uint64_t v76;
  uint64_t v77;
  __int128 *v78;
  _OWORD *v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;

  v8 = (uint64_t)a1[2];
  v9 = *a1;
  v10 = *a1;
  if (__sz > (v8 - (uint64_t)*a1) >> 3)
  {
    if (v10)
    {
      a1[1] = v10;
      operator delete(v10);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz >> 61)
      goto LABEL_85;
    v11 = v8 >> 2;
    if (v8 >> 2 <= __sz)
      v11 = __sz;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    if (v11 >> 61)
LABEL_85:
      sub_20E92CED8();
    v12 = 8 * v11;
    result = (char *)operator new(8 * v11);
    *a1 = result;
    v14 = a1 + 1;
    a1[2] = &result[v12];
    v15 = result;
    if ((char *)a2 == a3)
      goto LABEL_34;
    v16 = (unint64_t)&a3[-a2 - 8];
    if (v16 >= 0x38)
    {
      v30 = (v16 >> 3) + 1;
      v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFF8);
      v17 = (char *)(a2 + v31);
      v15 = &result[v31];
      v32 = result + 32;
      v33 = (__int128 *)(a2 + 32);
      v34 = v30 & 0x3FFFFFFFFFFFFFF8;
      do
      {
        v35 = *(v33 - 2);
        v36 = *(v33 - 1);
        v37 = *v33;
        v38 = v33[1];
        v33 += 4;
        *(v32 - 2) = v35;
        *(v32 - 1) = v36;
        *v32 = v37;
        v32[1] = v38;
        v32 += 4;
        v34 -= 8;
      }
      while (v34);
      if (v30 == (v30 & 0x3FFFFFFFFFFFFFF8))
        goto LABEL_34;
    }
    else
    {
      v17 = (char *)a2;
      v15 = result;
    }
    do
    {
      v39 = *(_QWORD *)v17;
      v17 += 8;
      *(_QWORD *)v15 = v39;
      v15 += 8;
    }
    while (v17 != a3);
LABEL_34:
    *v14 = v15;
    return result;
  }
  result = a1[1];
  v14 = a1 + 1;
  v18 = result - v9;
  v19 = (result - v9) >> 3;
  if (v19 < __sz)
  {
    v20 = (char *)(a2 + 8 * v19);
    if (result == v9)
      goto LABEL_18;
    if (v18 - 8 >= 0x78)
    {
      v40 = (v18 & 0xFFFFFFFFFFFFFFF8) - 4;
      v41 = &v9[v40];
      v42 = a2 + v40;
      v44 = (unint64_t)(v9 + 4) < a2 + (v18 & 0xFFFFFFFFFFFFFFF8)
         && a2 + 4 < (unint64_t)&v9[v18 & 0xFFFFFFFFFFFFFFF8];
      v21 = (char *)a2;
      if (((unint64_t)v41 <= a2 || (unint64_t)v9 >= v42) && !v44)
      {
        v46 = ((v18 - 8) >> 3) + 1;
        v47 = 8 * (v46 & 0x3FFFFFFFFFFFFFF8);
        v10 = &v9[v47];
        v21 = (char *)(a2 + v47);
        v48 = (__int128 *)(a2 + 32);
        v49 = v9 + 32;
        v50 = v46 & 0x3FFFFFFFFFFFFFF8;
        do
        {
          v52 = *(v48 - 2);
          v51 = *(v48 - 1);
          v54 = *v48;
          v53 = v48[1];
          v48 += 4;
          *(v49 - 2) = v52;
          *(v49 - 1) = v51;
          *v49 = v54;
          v49[1] = v53;
          v49 += 4;
          v50 -= 8;
        }
        while (v50);
        if (v46 == (v46 & 0x3FFFFFFFFFFFFFF8))
        {
LABEL_18:
          if (v20 == a3)
          {
            v15 = result;
          }
          else
          {
            v23 = (char *)(v18 + a2);
            v24 = (unint64_t)&a3[-v18 - a2 - 8];
            if (v24 >= 0xB8)
            {
              v55 = &v23[v24 & 0xFFFFFFFFFFFFFFF8];
              v56 = (unint64_t)(v23 + 4);
              v58 = result + 4 < v55 + 8 && v56 < (unint64_t)&result[(v24 & 0xFFFFFFFFFFFFFFF8) + 8];
              v15 = result;
              if ((v20 >= &result[(v24 & 0xFFFFFFFFFFFFFFF8) + 4] || result >= v55 + 4) && !v58)
              {
                v60 = (v24 >> 3) + 1;
                v61 = 8 * (v60 & 0x3FFFFFFFFFFFFFF8);
                v20 += v61;
                v15 = &result[v61];
                v62 = result + 32;
                v63 = (__int128 *)(a2 + 8 * v19 + 32);
                v64 = v60 & 0x3FFFFFFFFFFFFFF8;
                do
                {
                  v66 = *(v63 - 2);
                  v65 = *(v63 - 1);
                  v68 = *v63;
                  v67 = v63[1];
                  v63 += 4;
                  *(v62 - 2) = v66;
                  *(v62 - 1) = v65;
                  *v62 = v68;
                  v62[1] = v67;
                  v62 += 4;
                  v64 -= 8;
                }
                while (v64);
                if (v60 == (v60 & 0x3FFFFFFFFFFFFFF8))
                  goto LABEL_34;
              }
            }
            else
            {
              v15 = result;
            }
            do
            {
              v25 = *(_QWORD *)v20;
              v20 += 8;
              *(_QWORD *)v15 = v25;
              v15 += 8;
            }
            while (v20 != a3);
          }
          goto LABEL_34;
        }
      }
    }
    else
    {
      v21 = (char *)a2;
    }
    do
    {
      v22 = *(_QWORD *)v21;
      v21 += 8;
      *(_QWORD *)v10 = v22;
      v10 += 8;
    }
    while (v21 != v20);
    goto LABEL_18;
  }
  if ((char *)a2 == a3)
  {
    v27 = v10;
  }
  else
  {
    v26 = (unint64_t)&a3[-a2 - 8];
    if (v26 < 0x78
      || ((v69 = v26 & 0xFFFFFFFFFFFFFFF8 | 4,
           v70 = &v9[v69],
           v71 = a2 + v69,
           v72 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8,
           (unint64_t)(v9 + 4) < a2 + v72)
        ? (v73 = a2 + 4 >= (unint64_t)&v9[v72])
        : (v73 = 1),
          v73 ? (v74 = 0) : (v74 = 1),
          (unint64_t)v70 > a2 ? (v75 = (unint64_t)v9 >= v71) : (v75 = 1),
          !v75 || (v74 & 1) != 0))
    {
      v27 = v10;
      v28 = (char *)a2;
    }
    else
    {
      v76 = (v26 >> 3) + 1;
      v77 = 8 * (v76 & 0x3FFFFFFFFFFFFFF8);
      v27 = &v9[v77];
      v28 = (char *)(a2 + v77);
      v78 = (__int128 *)(a2 + 32);
      v79 = v9 + 32;
      v80 = v76 & 0x3FFFFFFFFFFFFFF8;
      do
      {
        v82 = *(v78 - 2);
        v81 = *(v78 - 1);
        v84 = *v78;
        v83 = v78[1];
        v78 += 4;
        *(v79 - 2) = v82;
        *(v79 - 1) = v81;
        *v79 = v84;
        v79[1] = v83;
        v79 += 4;
        v80 -= 8;
      }
      while (v80);
      if (v76 == (v76 & 0x3FFFFFFFFFFFFFF8))
        goto LABEL_36;
    }
    do
    {
      v29 = *(_QWORD *)v28;
      v28 += 8;
      *(_QWORD *)v27 = v29;
      v27 += 8;
    }
    while (v28 != a3);
  }
LABEL_36:
  *v14 = &v10[v27 - v9];
  return result;
}

void sub_20F43A11C(unsigned __int8 *a1@<X0>, unsigned __int8 *a2@<X2>, const std::string::value_type *a3@<X4>, std::string::size_type a4@<X5>, std::string *a5@<X8>)
{
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  unsigned __int8 *i;
  std::string::value_type __s[8];
  char v15;

  v10 = a2 - a1;
  if (a2 == a1)
    v11 = 0;
  else
    v11 = a2 - a1;
  if (v10 <= 1)
    v12 = 1;
  else
    v12 = a2 - a1;
  a5->__r_.__value_.__r.__words[0] = 0;
  a5->__r_.__value_.__l.__size_ = 0;
  a5->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(a5, v11 + (v12 - 1) * a4);
  if (v10 >= 1)
  {
    *(_QWORD *)__s = *a1;
    v15 = 1;
    std::string::append(a5, __s, 1uLL);
    if (v15 < 0)
    {
      operator delete(*(void **)__s);
      if ((unint64_t)v10 < 2)
        return;
    }
    else if ((unint64_t)v10 < 2)
    {
      return;
    }
    for (i = a1 + 1; i != a2; ++i)
    {
      std::string::append(a5, a3, a4);
      *(_QWORD *)__s = *i;
      v15 = 1;
      std::string::append(a5, __s, 1uLL);
      if (v15 < 0)
        operator delete(*(void **)__s);
    }
  }
}

void sub_20F43A234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

void sub_20F43A270(void *__src, size_t __n, uint64_t a3, unsigned __int8 *a4)
{
  __int128 *p_dst;
  size_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::string::size_type size;
  int v15;
  void *v16;
  std::string *p_p;
  uint64_t v18;
  std::ios_base::failure *exception;
  std::error_code v20;
  std::string __msg;
  std::string __p;
  _QWORD v23[2];
  void (**v24)();
  void *v25;
  void *v26;
  uint64_t v27;
  _QWORD v28[12];
  char v29;
  uint64_t v30;
  __int128 __dst;
  unint64_t v32;

  if (__n >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  if (__n >= 0x17)
  {
    v9 = (__n & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__n | 7) != 0x17)
      v9 = __n | 7;
    v10 = v9 + 1;
    p_dst = (__int128 *)operator new(v9 + 1);
    *((_QWORD *)&__dst + 1) = __n;
    v32 = v10 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v32) = __n;
  p_dst = &__dst;
  if (__n)
LABEL_8:
    memcpy(p_dst, __src, __n);
  *((_BYTE *)p_dst + __n) = 0;
  sub_20E909E50((uint64_t)v28, &__dst, 8);
  __p.__r_.__value_.__r.__words[0] = 1;
  sub_20E9EECEC(v23, (uint64_t *)&__p, (uint64_t)v28, 0x2800uLL);
  v23[0] = &off_24C9B0298;
  v24 = (void (**)())&unk_24C9B03E0;
  v11 = a4[23];
  if ((v11 & 0x80u) != 0)
    v11 = *((_QWORD *)a4 + 1);
  if (v11)
  {
    memset(&__p, 0, sizeof(__p));
    sub_20E9EE280(v27, &__p);
    v12 = a4[23];
    if ((v12 & 0x80u) == 0)
      v13 = a4[23];
    else
      v13 = *((_QWORD *)a4 + 1);
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    v15 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __p.__r_.__value_.__l.__size_;
    if (v13 != size)
      goto LABEL_38;
    v16 = (void *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((v12 & 0x80) != 0)
    {
      if (memcmp(*(const void **)a4, p_p, *((_QWORD *)a4 + 1)))
        goto LABEL_38;
    }
    else if (a4[23])
    {
      while (*a4 == p_p->__r_.__value_.__s.__data_[0])
      {
        ++a4;
        p_p = (std::string *)((char *)p_p + 1);
        if (!--v12)
          goto LABEL_27;
      }
LABEL_38:
      exception = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
      std::operator+<char>();
      *(_QWORD *)&v20.__val_ = 1;
      v20.__cat_ = std::iostream_category();
      std::ios_base::failure::failure(exception, &__msg, &v20);
      __cxa_throw(exception, MEMORY[0x24BEDB710], MEMORY[0x24BEDB570]);
    }
LABEL_27:
    if (v15 < 0)
      operator delete(v16);
  }
  LODWORD(__p.__r_.__value_.__l.__data_) = 3;
  sub_20E9EDADC(v27, &__p);
  sub_20E945814((uint64_t)&__p, (uint64_t)v23, a3, __p.__r_.__value_.__l.__data_);
  v23[0] = &off_24C9B71C0;
  v24 = (void (**)())&unk_24C9B7308;
  v18 = v27;
  v27 = 0;
  if (v18)
  {
    sub_20E9EF740((_QWORD *)(v18 + 8));
    MEMORY[0x212BC6398](v18, 0x10F2C40853B94B7);
  }
  v24 = off_24C9B7428;
  if (v25)
  {
    v26 = v25;
    operator delete(v25);
  }
  v28[0] = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)((char *)v28 + *(_QWORD *)(v28[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 24);
  v28[2] = MEMORY[0x24BEDB848] + 16;
  if (v29 < 0)
    operator delete((void *)v28[10]);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x212BC6290](&v30);
  if (SHIBYTE(v32) < 0)
    operator delete((void *)__dst);
}

void sub_20F43A56C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;

  if (a22 < 0)
    operator delete(__p);
  sub_20E9EEE68(&a23);
  sub_20E8B2DDC((uint64_t)&a30);
  if (*(char *)(v30 - 65) < 0)
    operator delete(*(void **)(v30 - 88));
  _Unwind_Resume(a1);
}

uint64_t sub_20F43A5F4@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *v4;
  int v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  char v9;
  size_t v10;
  unint64_t v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v19;
  _QWORD v20[2];
  _QWORD v21[3];
  const void *v22;
  uint64_t v23;
  const void *v24;
  unint64_t v25;
  void *v26;
  char v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;

  sub_20E863438((uint64_t)v20);
  v4 = sub_20E86A980(v21, (uint64_t)" ref state ", 11);
  *(_QWORD *)((char *)v4 + *(_QWORD *)(*v4 - 24) + 24) = 25;
  v5 = *(_DWORD *)(a1 + 32);
  v31 = *(_QWORD *)(a1 + 24);
  v32 = v5;
  sub_210216370((uint64_t)&v31);
  if ((v19 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v19 & 0x80u) == 0)
    v7 = v19;
  else
    v7 = (uint64_t)__p[1];
  v8 = sub_20E86A980(v4, (uint64_t)v6, v7);
  sub_20E86A980(v8, (uint64_t)" image dist sq ", 15);
  std::ostream::operator<<();
  if (((char)v19 & 0x80000000) == 0)
  {
    v9 = v29;
    if ((v29 & 0x10) == 0)
      goto LABEL_9;
LABEL_12:
    v11 = v28;
    if (v28 < v25)
    {
      v28 = v25;
      v11 = v25;
    }
    v12 = v24;
    v10 = v11 - (_QWORD)v24;
    if (v11 - (unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_26;
    goto LABEL_15;
  }
  operator delete(__p[0]);
  v9 = v29;
  if ((v29 & 0x10) != 0)
    goto LABEL_12;
LABEL_9:
  if ((v9 & 8) == 0)
  {
    v10 = 0;
    a2[23] = 0;
    goto LABEL_22;
  }
  v12 = v22;
  v10 = v23 - (_QWORD)v22;
  if ((unint64_t)(v23 - (_QWORD)v22) >= 0x7FFFFFFFFFFFFFF8)
LABEL_26:
    sub_20E860B7C();
LABEL_15:
  if (v10 >= 0x17)
  {
    v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v13 = v10 | 7;
    v14 = v13 + 1;
    v15 = operator new(v13 + 1);
    *((_QWORD *)a2 + 1) = v10;
    *((_QWORD *)a2 + 2) = v14 | 0x8000000000000000;
    *(_QWORD *)a2 = v15;
    a2 = v15;
    goto LABEL_21;
  }
  a2[23] = v10;
  if (v10)
LABEL_21:
    memmove(a2, v12, v10);
LABEL_22:
  a2[v10] = 0;
  v20[0] = *MEMORY[0x24BEDB7F0];
  v16 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v20 + *(_QWORD *)(v20[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v21[0] = v16;
  v21[1] = MEMORY[0x24BEDB848] + 16;
  if (v27 < 0)
    operator delete(v26);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x212BC6290](&v30);
}

void sub_20F43A800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E863784((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F43A814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E863784((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F43A828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  sub_20E863784((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_20F43A84C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t **v15;
  uint64_t *v16;
  uint64_t *v17;
  _QWORD *v18;
  int v19;
  void **v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  size_t v25;
  unint64_t v26;
  const void *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v33;
  void *__p[2];
  unsigned __int8 v35;
  _QWORD v36[2];
  _QWORD v37[3];
  const void *v38;
  uint64_t v39;
  const void *v40;
  unint64_t v41;
  void *v42;
  char v43;
  unint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;

  sub_20E863438((uint64_t)v36);
  v5 = *a1;
  v4 = a1[1];
  sub_20E86A980(v37, (uint64_t)"   query_camera_source: ", 24);
  v6 = (_QWORD *)std::ostream::operator<<();
  v7 = sub_20E86A980(v6, (uint64_t)"\n", 1);
  sub_20E86A980(v7, (uint64_t)"   ref submap id: ", 18);
  v8 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v8, (uint64_t)", keyframe clusters:", 20);
  v9 = (v4 - v5) / 24;
  v10 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v10, (uint64_t)"\n", 1);
  if (v4 != v5)
  {
    v11 = 0;
    if (v9 <= 1)
      v12 = 1;
    else
      v12 = v9;
    v33 = v12;
    do
    {
      v13 = *a1;
      sub_20E86A980(v37, (uint64_t)"    ----: traversal dist: ", 26);
      v14 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v14, (uint64_t)" ", 1);
      v15 = (uint64_t **)(v13 + 24 * v11);
      v16 = *v15;
      v17 = v15[1];
      while (v16 != v17)
      {
        v18 = sub_20E86A980(v37, (uint64_t)"{", 1);
        v19 = *((_DWORD *)v16 + 2);
        v47 = *v16;
        v48 = v19;
        sub_210216370((uint64_t)&v47);
        if ((v35 & 0x80u) == 0)
          v20 = __p;
        else
          v20 = (void **)__p[0];
        if ((v35 & 0x80u) == 0)
          v21 = v35;
        else
          v21 = (uint64_t)__p[1];
        v22 = sub_20E86A980(v18, (uint64_t)v20, v21);
        sub_20E86A980(v22, (uint64_t)", ", 2);
        v23 = (_QWORD *)std::ostream::operator<<();
        sub_20E86A980(v23, (uint64_t)"} ", 2);
        if ((char)v35 < 0)
          operator delete(__p[0]);
        v16 += 3;
      }
      sub_20E86A980(v37, (uint64_t)"\n", 1);
      ++v11;
    }
    while (v11 != v33);
  }
  if ((v45 & 0x10) != 0)
  {
    v26 = v44;
    v24 = a2;
    if (v44 < v41)
    {
      v44 = v41;
      v26 = v41;
    }
    v27 = v40;
    v25 = v26 - (_QWORD)v40;
    if (v26 - (unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_35;
  }
  else
  {
    v24 = a2;
    if ((v45 & 8) == 0)
    {
      v25 = 0;
      a2[23] = 0;
      goto LABEL_31;
    }
    v27 = v38;
    v25 = v39 - (_QWORD)v38;
    if ((unint64_t)(v39 - (_QWORD)v38) >= 0x7FFFFFFFFFFFFFF8)
LABEL_35:
      sub_20E860B7C();
  }
  if (v25 >= 0x17)
  {
    v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v25 | 7) != 0x17)
      v28 = v25 | 7;
    v29 = v28 + 1;
    v30 = operator new(v28 + 1);
    v24[1] = v25;
    v24[2] = v29 | 0x8000000000000000;
    *v24 = v30;
    v24 = v30;
    goto LABEL_30;
  }
  *((_BYTE *)v24 + 23) = v25;
  if (v25)
LABEL_30:
    memmove(v24, v27, v25);
LABEL_31:
  *((_BYTE *)v24 + v25) = 0;
  v36[0] = *MEMORY[0x24BEDB7F0];
  v31 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v36 + *(_QWORD *)(v36[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v37[0] = v31;
  v37[1] = MEMORY[0x24BEDB848] + 16;
  if (v43 < 0)
    operator delete(v42);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x212BC6290](&v46);
}

void sub_20F43AB9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20E863784((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F43ABBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0)
    operator delete(__p);
  sub_20E863784((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_20F43ABE0(uint64_t a1, uint64_t a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  void *v21;
  int v22;
  int v23;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  *(_DWORD *)(a1 + 40) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 0;
  v3 = *(char **)(a2 + 616);
  v4 = *(char **)(a2 + 624);
  v5 = v4 - v3;
  if (v4 == v3)
  {
    v6 = 0;
    v7 = 0;
    goto LABEL_29;
  }
  if (v5 < 0)
    sub_20E92CED8();
  v25 = a2;
  v6 = (char *)operator new(v4 - v3);
  v7 = &v6[64 * (v5 >> 6)];
  v5 = (uint64_t)v6;
  do
  {
    while (1)
    {
      v26 = *(_OWORD *)v3;
      v27 = *((_OWORD *)v3 + 1);
      v28 = *((_OWORD *)v3 + 2);
      v29 = *((_OWORD *)v3 + 3);
      if (v5 >= (unint64_t)v7)
        break;
      v8 = *(_OWORD *)v3;
      v9 = *((_OWORD *)v3 + 1);
      v10 = *((_OWORD *)v3 + 3);
      *(_OWORD *)(v5 + 32) = *((_OWORD *)v3 + 2);
      *(_OWORD *)(v5 + 48) = v10;
      *(_OWORD *)v5 = v8;
      *(_OWORD *)(v5 + 16) = v9;
      v5 += 64;
      v3 += 64;
      if (v3 == v4)
        goto LABEL_25;
    }
    v11 = (v5 - (uint64_t)v6) >> 6;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 58)
      sub_20E92CED8();
    if ((v7 - v6) >> 5 > v12)
      v12 = (v7 - v6) >> 5;
    if ((unint64_t)(v7 - v6) >= 0x7FFFFFFFFFFFFFC0)
      v13 = 0x3FFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    if (v13)
    {
      if (v13 >> 58)
        sub_20E877A38();
      v14 = (char *)operator new(v13 << 6);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[64 * v11];
    *(_OWORD *)v15 = v26;
    *((_OWORD *)v15 + 1) = v27;
    *((_OWORD *)v15 + 2) = v28;
    *((_OWORD *)v15 + 3) = v29;
    if ((char *)v5 == v6)
    {
      v20 = &v14[64 * v11];
      v7 = &v14[64 * v13];
      v5 = (uint64_t)(v15 + 64);
      if (v6)
        goto LABEL_20;
    }
    else
    {
      v16 = &v14[64 * v11];
      do
      {
        v17 = *(_OWORD *)(v5 - 64);
        v18 = *(_OWORD *)(v5 - 48);
        v19 = *(_OWORD *)(v5 - 16);
        v20 = v16 - 64;
        *((_OWORD *)v16 - 2) = *(_OWORD *)(v5 - 32);
        *((_OWORD *)v16 - 1) = v19;
        *((_OWORD *)v16 - 4) = v17;
        *((_OWORD *)v16 - 3) = v18;
        v5 -= 64;
        v16 -= 64;
      }
      while ((char *)v5 != v6);
      v7 = &v14[64 * v13];
      v5 = (uint64_t)(v15 + 64);
      if (v6)
LABEL_20:
        operator delete(v6);
    }
    v6 = v20;
    v3 += 64;
  }
  while (v3 != v4);
LABEL_25:
  v21 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v21;
    operator delete(v21);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  a2 = v25;
LABEL_29:
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v7;
  v22 = *(_DWORD *)(a2 + 8);
  v23 = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 32) = v22;
  *(_DWORD *)(a1 + 40) = v23;
  return a1;
}

void sub_20F43AE20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  void *v14;

  if (__p)
    operator delete(__p);
  v14 = *(void **)v12;
  if (*(_QWORD *)v12)
  {
    *(_QWORD *)(v12 + 8) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

char ***sub_20F43AE74@<X0>(char ***result@<X0>, uint64_t a2@<X8>)
{
  char ***v2;
  char **v4;
  char **v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  __int128 v14;
  uint64_t v15;
  char **v16;
  _OWORD v17[4];
  uint64_t v18;

  v2 = result;
  v18 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = -1;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v4 = *result;
  v5 = result[1];
  v14 = 0uLL;
  v15 = 0;
  v6 = (char *)v5 - (char *)v4;
  if (v5 == v4)
  {
    v11 = 0;
    v10 = 0uLL;
  }
  else
  {
    if (v6 < 0)
      sub_20ED343A8();
    *(_QWORD *)&v14 = operator new((char *)v5 - (char *)v4);
    *((_QWORD *)&v14 + 1) = v14;
    v15 = v14 + (v6 >> 6 << 6);
    v16 = (char **)&v14;
    do
    {
      v7 = *(_OWORD *)v4;
      v8 = *((_OWORD *)v4 + 1);
      v9 = *((_OWORD *)v4 + 3);
      v17[2] = *((_OWORD *)v4 + 2);
      v17[3] = v9;
      v17[0] = v7;
      v17[1] = v8;
      result = sub_20F245D94(&v16, v17);
      v4 += 8;
    }
    while (v4 != v5);
    v10 = v14;
    v11 = v15;
  }
  *(_OWORD *)(a2 + 24) = v10;
  *(_QWORD *)(a2 + 40) = v11;
  v12 = *((unsigned int *)v2 + 8);
  v13 = *((_DWORD *)v2 + 10);
  *(_QWORD *)a2 = v2[3];
  *(_QWORD *)(a2 + 8) = v12;
  *(_DWORD *)(a2 + 16) = v13;
  return result;
}

void sub_20F43AF84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20F43AFA4(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  __int128 v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  double result;
  __int128 v156;
  uint64_t v157;

  v4 = *a3;
  sub_20F43C1C0((uint64_t)&v156);
  v6 = v4;
  v5 = *v4;
  if (v6[1] == v5)
    sub_20EDB40C4();
  if (*(char *)(v5 + 23) < 0)
    operator delete(*(void **)v5);
  v7 = v156;
  *(_QWORD *)(v5 + 16) = v157;
  *(_OWORD *)v5 = v7;
  v8 = *a3;
  sub_20F43C398((uint64_t)&v156);
  v9 = *v8;
  if (0xAAAAAAAAAAAAAAABLL * ((v8[1] - *v8) >> 3) <= 1)
    sub_20EDB40C4();
  v10 = v9 + 24;
  if (*(char *)(v9 + 47) < 0)
    operator delete(*(void **)v10);
  *(_OWORD *)v10 = v156;
  *(_QWORD *)(v10 + 16) = v157;
  v11 = *a3;
  sub_20F43C570((uint64_t)&v156);
  v12 = *v11;
  if (0xAAAAAAAAAAAAAAABLL * ((v11[1] - *v11) >> 3) <= 2)
    sub_20EDB40C4();
  v13 = v12 + 48;
  if (*(char *)(v12 + 71) < 0)
    operator delete(*(void **)v13);
  *(_OWORD *)v13 = v156;
  *(_QWORD *)(v13 + 16) = v157;
  v14 = *a3;
  sub_20F43C748((uint64_t)&v156);
  v15 = *v14;
  if (0xAAAAAAAAAAAAAAABLL * ((v14[1] - *v14) >> 3) <= 3)
    sub_20EDB40C4();
  v16 = v15 + 72;
  if (*(char *)(v15 + 95) < 0)
    operator delete(*(void **)v16);
  *(_OWORD *)v16 = v156;
  *(_QWORD *)(v16 + 16) = v157;
  v17 = *a3;
  sub_20F43C920((uint64_t)&v156);
  v18 = *v17;
  if (0xAAAAAAAAAAAAAAABLL * ((v17[1] - *v17) >> 3) <= 4)
    sub_20EDB40C4();
  v19 = v18 + 96;
  if (*(char *)(v18 + 119) < 0)
    operator delete(*(void **)v19);
  *(_OWORD *)v19 = v156;
  *(_QWORD *)(v19 + 16) = v157;
  v20 = *a3;
  sub_20F43CAF8((uint64_t)&v156);
  v21 = *v20;
  if (0xAAAAAAAAAAAAAAABLL * ((v20[1] - *v20) >> 3) <= 5)
    sub_20EDB40C4();
  v22 = v21 + 120;
  if (*(char *)(v21 + 143) < 0)
    operator delete(*(void **)v22);
  *(_OWORD *)v22 = v156;
  *(_QWORD *)(v22 + 16) = v157;
  v23 = *a3;
  sub_20F43CCD0((uint64_t)&v156);
  v24 = *v23;
  if (0xAAAAAAAAAAAAAAABLL * ((v23[1] - *v23) >> 3) <= 6)
    sub_20EDB40C4();
  v25 = v24 + 144;
  if (*(char *)(v24 + 167) < 0)
    operator delete(*(void **)v25);
  *(_OWORD *)v25 = v156;
  *(_QWORD *)(v25 + 16) = v157;
  v26 = *a3;
  sub_20F43CEA8((uint64_t)&v156);
  v27 = *v26;
  if (0xAAAAAAAAAAAAAAABLL * ((v26[1] - *v26) >> 3) <= 7)
    sub_20EDB40C4();
  v28 = v27 + 168;
  if (*(char *)(v27 + 191) < 0)
    operator delete(*(void **)v28);
  *(_OWORD *)v28 = v156;
  *(_QWORD *)(v28 + 16) = v157;
  v29 = *a3;
  sub_20F43D080((uint64_t)&v156);
  v30 = *v29;
  if (0xAAAAAAAAAAAAAAABLL * ((v29[1] - *v29) >> 3) <= 8)
    sub_20EDB40C4();
  v31 = v30 + 192;
  if (*(char *)(v30 + 215) < 0)
    operator delete(*(void **)v31);
  *(_OWORD *)v31 = v156;
  *(_QWORD *)(v31 + 16) = v157;
  v32 = *a3;
  sub_20F43D258((uint64_t)&v156);
  v33 = *v32;
  if (0xAAAAAAAAAAAAAAABLL * ((v32[1] - *v32) >> 3) <= 9)
    sub_20EDB40C4();
  v34 = v33 + 216;
  if (*(char *)(v33 + 239) < 0)
    operator delete(*(void **)v34);
  *(_OWORD *)v34 = v156;
  *(_QWORD *)(v34 + 16) = v157;
  v35 = *a3;
  sub_20F43D430((uint64_t)&v156);
  v36 = *v35;
  if (0xAAAAAAAAAAAAAAABLL * ((v35[1] - *v35) >> 3) <= 0xA)
    sub_20EDB40C4();
  v37 = v36 + 240;
  if (*(char *)(v36 + 263) < 0)
    operator delete(*(void **)v37);
  *(_OWORD *)v37 = v156;
  *(_QWORD *)(v37 + 16) = v157;
  v38 = *a3;
  sub_20F43D608((uint64_t)&v156);
  v39 = *v38;
  if (0xAAAAAAAAAAAAAAABLL * ((v38[1] - *v38) >> 3) <= 0xB)
    sub_20EDB40C4();
  v40 = v39 + 264;
  if (*(char *)(v39 + 287) < 0)
    operator delete(*(void **)v40);
  *(_OWORD *)v40 = v156;
  *(_QWORD *)(v40 + 16) = v157;
  v41 = *a3;
  sub_20F43D7E0((uint64_t)&v156);
  v42 = *v41;
  if (0xAAAAAAAAAAAAAAABLL * ((v41[1] - *v41) >> 3) <= 0xC)
    sub_20EDB40C4();
  v43 = v42 + 288;
  if (*(char *)(v42 + 311) < 0)
    operator delete(*(void **)v43);
  *(_OWORD *)v43 = v156;
  *(_QWORD *)(v43 + 16) = v157;
  v44 = *a3;
  sub_20F43D9B8((uint64_t)&v156);
  v45 = *v44;
  if (0xAAAAAAAAAAAAAAABLL * ((v44[1] - *v44) >> 3) <= 0xD)
    sub_20EDB40C4();
  v46 = v45 + 312;
  if (*(char *)(v45 + 335) < 0)
    operator delete(*(void **)v46);
  *(_OWORD *)v46 = v156;
  *(_QWORD *)(v46 + 16) = v157;
  v47 = *a3;
  sub_20F43DB90((uint64_t)&v156);
  v48 = *v47;
  if (0xAAAAAAAAAAAAAAABLL * ((v47[1] - *v47) >> 3) <= 0xE)
    sub_20EDB40C4();
  v49 = v48 + 336;
  if (*(char *)(v48 + 359) < 0)
    operator delete(*(void **)v49);
  *(_OWORD *)v49 = v156;
  *(_QWORD *)(v49 + 16) = v157;
  v50 = *a3;
  sub_20F43DD68((uint64_t)&v156);
  v51 = *v50;
  if (0xAAAAAAAAAAAAAAABLL * ((v50[1] - *v50) >> 3) <= 0xF)
    sub_20EDB40C4();
  v52 = v51 + 360;
  if (*(char *)(v51 + 383) < 0)
    operator delete(*(void **)v52);
  *(_OWORD *)v52 = v156;
  *(_QWORD *)(v52 + 16) = v157;
  v53 = *a3;
  sub_20F43DF40((uint64_t)&v156);
  v54 = *v53;
  if (0xAAAAAAAAAAAAAAABLL * ((v53[1] - *v53) >> 3) <= 0x10)
    sub_20EDB40C4();
  v55 = v54 + 384;
  if (*(char *)(v54 + 407) < 0)
    operator delete(*(void **)v55);
  *(_OWORD *)v55 = v156;
  *(_QWORD *)(v55 + 16) = v157;
  v56 = *a3;
  sub_20F43E118((uint64_t)&v156);
  v57 = *v56;
  if (0xAAAAAAAAAAAAAAABLL * ((v56[1] - *v56) >> 3) <= 0x11)
    sub_20EDB40C4();
  v58 = v57 + 408;
  if (*(char *)(v57 + 431) < 0)
    operator delete(*(void **)v58);
  *(_OWORD *)v58 = v156;
  *(_QWORD *)(v58 + 16) = v157;
  v59 = *a3;
  sub_20F43E2F0((uint64_t)&v156);
  v60 = *v59;
  if (0xAAAAAAAAAAAAAAABLL * ((v59[1] - *v59) >> 3) <= 0x12)
    sub_20EDB40C4();
  v61 = v60 + 432;
  if (*(char *)(v60 + 455) < 0)
    operator delete(*(void **)v61);
  *(_OWORD *)v61 = v156;
  *(_QWORD *)(v61 + 16) = v157;
  v62 = *a3;
  sub_20F43E4C8((uint64_t)&v156);
  v63 = *v62;
  if (0xAAAAAAAAAAAAAAABLL * ((v62[1] - *v62) >> 3) <= 0x13)
    sub_20EDB40C4();
  v64 = v63 + 456;
  if (*(char *)(v63 + 479) < 0)
    operator delete(*(void **)v64);
  *(_OWORD *)v64 = v156;
  *(_QWORD *)(v64 + 16) = v157;
  v65 = *a3;
  sub_20F43E6A0((uint64_t)&v156);
  v66 = *v65;
  if (0xAAAAAAAAAAAAAAABLL * ((v65[1] - *v65) >> 3) <= 0x14)
    sub_20EDB40C4();
  v67 = v66 + 480;
  if (*(char *)(v66 + 503) < 0)
    operator delete(*(void **)v67);
  *(_OWORD *)v67 = v156;
  *(_QWORD *)(v67 + 16) = v157;
  v68 = *a3;
  sub_20F43E878((uint64_t)&v156);
  v69 = *v68;
  if (0xAAAAAAAAAAAAAAABLL * ((v68[1] - *v68) >> 3) <= 0x15)
    sub_20EDB40C4();
  v70 = v69 + 504;
  if (*(char *)(v69 + 527) < 0)
    operator delete(*(void **)v70);
  *(_OWORD *)v70 = v156;
  *(_QWORD *)(v70 + 16) = v157;
  v71 = *a3;
  sub_20F43EA50((uint64_t)&v156);
  v72 = *v71;
  if (0xAAAAAAAAAAAAAAABLL * ((v71[1] - *v71) >> 3) <= 0x16)
    sub_20EDB40C4();
  v73 = v72 + 528;
  if (*(char *)(v72 + 551) < 0)
    operator delete(*(void **)v73);
  *(_OWORD *)v73 = v156;
  *(_QWORD *)(v73 + 16) = v157;
  v74 = *a3;
  sub_20F43EC28((uint64_t)&v156);
  v75 = *v74;
  if (0xAAAAAAAAAAAAAAABLL * ((v74[1] - *v74) >> 3) <= 0x17)
    sub_20EDB40C4();
  v76 = v75 + 552;
  if (*(char *)(v75 + 575) < 0)
    operator delete(*(void **)v76);
  *(_OWORD *)v76 = v156;
  *(_QWORD *)(v76 + 16) = v157;
  v77 = *a3;
  sub_20F43EE00((uint64_t)&v156);
  v78 = *v77;
  if (0xAAAAAAAAAAAAAAABLL * ((v77[1] - *v77) >> 3) <= 0x18)
    sub_20EDB40C4();
  v79 = v78 + 576;
  if (*(char *)(v78 + 599) < 0)
    operator delete(*(void **)v79);
  *(_OWORD *)v79 = v156;
  *(_QWORD *)(v79 + 16) = v157;
  v80 = *a3;
  sub_20F43EFD8((uint64_t)&v156);
  v81 = *v80;
  if (0xAAAAAAAAAAAAAAABLL * ((v80[1] - *v80) >> 3) <= 0x19)
    sub_20EDB40C4();
  v82 = v81 + 600;
  if (*(char *)(v81 + 623) < 0)
    operator delete(*(void **)v82);
  *(_OWORD *)v82 = v156;
  *(_QWORD *)(v82 + 16) = v157;
  v83 = *a3;
  sub_20F43F1B0((uint64_t)&v156);
  v84 = *v83;
  if (0xAAAAAAAAAAAAAAABLL * ((v83[1] - *v83) >> 3) <= 0x1A)
    sub_20EDB40C4();
  v85 = v84 + 624;
  if (*(char *)(v84 + 647) < 0)
    operator delete(*(void **)v85);
  *(_OWORD *)v85 = v156;
  *(_QWORD *)(v85 + 16) = v157;
  v86 = *a3;
  sub_20F43F388((uint64_t)&v156);
  v87 = *v86;
  if (0xAAAAAAAAAAAAAAABLL * ((v86[1] - *v86) >> 3) <= 0x1B)
    sub_20EDB40C4();
  v88 = v87 + 648;
  if (*(char *)(v87 + 671) < 0)
    operator delete(*(void **)v88);
  *(_OWORD *)v88 = v156;
  *(_QWORD *)(v88 + 16) = v157;
  v89 = *a3;
  sub_20F43F560((uint64_t)&v156);
  v90 = *v89;
  if (0xAAAAAAAAAAAAAAABLL * ((v89[1] - *v89) >> 3) <= 0x1C)
    sub_20EDB40C4();
  v91 = v90 + 672;
  if (*(char *)(v90 + 695) < 0)
    operator delete(*(void **)v91);
  *(_OWORD *)v91 = v156;
  *(_QWORD *)(v91 + 16) = v157;
  v92 = *a3;
  sub_20F43F738((uint64_t)&v156);
  v93 = *v92;
  if (0xAAAAAAAAAAAAAAABLL * ((v92[1] - *v92) >> 3) <= 0x1D)
    sub_20EDB40C4();
  v94 = v93 + 696;
  if (*(char *)(v93 + 719) < 0)
    operator delete(*(void **)v94);
  *(_OWORD *)v94 = v156;
  *(_QWORD *)(v94 + 16) = v157;
  v95 = *a3;
  sub_20F43F910((uint64_t)&v156);
  v96 = *v95;
  if (0xAAAAAAAAAAAAAAABLL * ((v95[1] - *v95) >> 3) <= 0x1E)
    sub_20EDB40C4();
  v97 = v96 + 720;
  if (*(char *)(v96 + 743) < 0)
    operator delete(*(void **)v97);
  *(_OWORD *)v97 = v156;
  *(_QWORD *)(v97 + 16) = v157;
  v98 = *a3;
  sub_20F43FAE8((uint64_t)&v156);
  v99 = *v98;
  if (0xAAAAAAAAAAAAAAABLL * ((v98[1] - *v98) >> 3) <= 0x1F)
    sub_20EDB40C4();
  v100 = v99 + 744;
  if (*(char *)(v99 + 767) < 0)
    operator delete(*(void **)v100);
  *(_OWORD *)v100 = v156;
  *(_QWORD *)(v100 + 16) = v157;
  v101 = *a3;
  sub_20F43FCC0((uint64_t)&v156);
  v102 = *v101;
  if (0xAAAAAAAAAAAAAAABLL * ((v101[1] - *v101) >> 3) <= 0x20)
    sub_20EDB40C4();
  v103 = v102 + 768;
  if (*(char *)(v102 + 791) < 0)
    operator delete(*(void **)v103);
  *(_OWORD *)v103 = v156;
  *(_QWORD *)(v103 + 16) = v157;
  v104 = *a3;
  sub_20F43FE98((uint64_t)&v156);
  v105 = *v104;
  if (0xAAAAAAAAAAAAAAABLL * ((v104[1] - *v104) >> 3) <= 0x21)
    sub_20EDB40C4();
  v106 = v105 + 792;
  if (*(char *)(v105 + 815) < 0)
    operator delete(*(void **)v106);
  *(_OWORD *)v106 = v156;
  *(_QWORD *)(v106 + 16) = v157;
  v107 = *a3;
  sub_20F440070((uint64_t)&v156);
  v108 = *v107;
  if (0xAAAAAAAAAAAAAAABLL * ((v107[1] - *v107) >> 3) <= 0x22)
    sub_20EDB40C4();
  v109 = v108 + 816;
  if (*(char *)(v108 + 839) < 0)
    operator delete(*(void **)v109);
  *(_OWORD *)v109 = v156;
  *(_QWORD *)(v109 + 16) = v157;
  v110 = *a3;
  sub_20F440248((uint64_t)&v156);
  v111 = *v110;
  if (0xAAAAAAAAAAAAAAABLL * ((v110[1] - *v110) >> 3) <= 0x23)
    sub_20EDB40C4();
  v112 = v111 + 840;
  if (*(char *)(v111 + 863) < 0)
    operator delete(*(void **)v112);
  *(_OWORD *)v112 = v156;
  *(_QWORD *)(v112 + 16) = v157;
  v113 = *a3;
  sub_20F440420((uint64_t)&v156);
  v114 = *v113;
  if (0xAAAAAAAAAAAAAAABLL * ((v113[1] - *v113) >> 3) <= 0x24)
    sub_20EDB40C4();
  v115 = v114 + 864;
  if (*(char *)(v114 + 887) < 0)
    operator delete(*(void **)v115);
  *(_OWORD *)v115 = v156;
  *(_QWORD *)(v115 + 16) = v157;
  v116 = *a3;
  sub_20F4405F8((uint64_t)&v156);
  v117 = *v116;
  if (0xAAAAAAAAAAAAAAABLL * ((v116[1] - *v116) >> 3) <= 0x25)
    sub_20EDB40C4();
  v118 = v117 + 888;
  if (*(char *)(v117 + 911) < 0)
    operator delete(*(void **)v118);
  *(_OWORD *)v118 = v156;
  *(_QWORD *)(v118 + 16) = v157;
  v119 = *a3;
  sub_20F4407D0((uint64_t)&v156);
  v120 = *v119;
  if (0xAAAAAAAAAAAAAAABLL * ((v119[1] - *v119) >> 3) <= 0x26)
    sub_20EDB40C4();
  v121 = v120 + 912;
  if (*(char *)(v120 + 935) < 0)
    operator delete(*(void **)v121);
  *(_OWORD *)v121 = v156;
  *(_QWORD *)(v121 + 16) = v157;
  v122 = *a3;
  sub_20F4409A8((uint64_t)&v156);
  v123 = *v122;
  if (0xAAAAAAAAAAAAAAABLL * ((v122[1] - *v122) >> 3) <= 0x27)
    sub_20EDB40C4();
  v124 = v123 + 936;
  if (*(char *)(v123 + 959) < 0)
    operator delete(*(void **)v124);
  *(_OWORD *)v124 = v156;
  *(_QWORD *)(v124 + 16) = v157;
  v125 = *a3;
  sub_20F440B80((uint64_t)&v156);
  v126 = *v125;
  if (0xAAAAAAAAAAAAAAABLL * ((v125[1] - *v125) >> 3) <= 0x28)
    sub_20EDB40C4();
  v127 = v126 + 960;
  if (*(char *)(v126 + 983) < 0)
    operator delete(*(void **)v127);
  *(_OWORD *)v127 = v156;
  *(_QWORD *)(v127 + 16) = v157;
  v128 = *a3;
  sub_20F440D58((uint64_t)&v156);
  v129 = *v128;
  if (0xAAAAAAAAAAAAAAABLL * ((v128[1] - *v128) >> 3) <= 0x29)
    sub_20EDB40C4();
  v130 = v129 + 984;
  if (*(char *)(v129 + 1007) < 0)
    operator delete(*(void **)v130);
  *(_OWORD *)v130 = v156;
  *(_QWORD *)(v130 + 16) = v157;
  v131 = *a3;
  sub_20F440F30((uint64_t)&v156);
  v132 = *v131;
  if (0xAAAAAAAAAAAAAAABLL * ((v131[1] - *v131) >> 3) <= 0x2A)
    sub_20EDB40C4();
  v133 = v132 + 1008;
  if (*(char *)(v132 + 1031) < 0)
    operator delete(*(void **)v133);
  *(_OWORD *)v133 = v156;
  *(_QWORD *)(v133 + 16) = v157;
  v134 = *a3;
  sub_20F441108((uint64_t)&v156);
  v135 = *v134;
  if (0xAAAAAAAAAAAAAAABLL * ((v134[1] - *v134) >> 3) <= 0x2B)
    sub_20EDB40C4();
  v136 = v135 + 1032;
  if (*(char *)(v135 + 1055) < 0)
    operator delete(*(void **)v136);
  *(_OWORD *)v136 = v156;
  *(_QWORD *)(v136 + 16) = v157;
  v137 = *a3;
  sub_20F4412E0((uint64_t)&v156);
  v138 = *v137;
  if (0xAAAAAAAAAAAAAAABLL * ((v137[1] - *v137) >> 3) <= 0x2C)
    sub_20EDB40C4();
  v139 = v138 + 1056;
  if (*(char *)(v138 + 1079) < 0)
    operator delete(*(void **)v139);
  *(_OWORD *)v139 = v156;
  *(_QWORD *)(v139 + 16) = v157;
  v140 = *a3;
  sub_20F4414B8((uint64_t)&v156);
  v141 = *v140;
  if (0xAAAAAAAAAAAAAAABLL * ((v140[1] - *v140) >> 3) <= 0x2D)
    sub_20EDB40C4();
  v142 = v141 + 1080;
  if (*(char *)(v141 + 1103) < 0)
    operator delete(*(void **)v142);
  *(_OWORD *)v142 = v156;
  *(_QWORD *)(v142 + 16) = v157;
  v143 = *a3;
  sub_20F441690((uint64_t)&v156);
  v144 = *v143;
  if (0xAAAAAAAAAAAAAAABLL * ((v143[1] - *v143) >> 3) <= 0x2E)
    sub_20EDB40C4();
  v145 = v144 + 1104;
  if (*(char *)(v144 + 1127) < 0)
    operator delete(*(void **)v145);
  *(_OWORD *)v145 = v156;
  *(_QWORD *)(v145 + 16) = v157;
  v146 = *a3;
  sub_20F441868((uint64_t)&v156);
  v147 = *v146;
  if (0xAAAAAAAAAAAAAAABLL * ((v146[1] - *v146) >> 3) <= 0x2F)
    sub_20EDB40C4();
  v148 = v147 + 1128;
  if (*(char *)(v147 + 1151) < 0)
    operator delete(*(void **)v148);
  *(_OWORD *)v148 = v156;
  *(_QWORD *)(v148 + 16) = v157;
  v149 = *a3;
  sub_20F441A40((uint64_t)&v156);
  v150 = *v149;
  if (0xAAAAAAAAAAAAAAABLL * ((v149[1] - *v149) >> 3) <= 0x30)
    sub_20EDB40C4();
  v151 = v150 + 1152;
  if (*(char *)(v150 + 1175) < 0)
    operator delete(*(void **)v151);
  *(_OWORD *)v151 = v156;
  *(_QWORD *)(v151 + 16) = v157;
  v152 = *a3;
  sub_20F441C18((uint64_t)&v156);
  v153 = *v152;
  if (0xAAAAAAAAAAAAAAABLL * ((v152[1] - *v152) >> 3) <= 0x31)
    sub_20EDB40C4();
  v154 = v153 + 1176;
  if (*(char *)(v153 + 1199) < 0)
    operator delete(*(void **)v154);
  result = *(double *)&v156;
  *(_OWORD *)v154 = v156;
  *(_QWORD *)(v154 + 16) = v157;
  return result;
}

void sub_20F43C0E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F43C1C0(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *__p;
  void **v10;

  v2 = sub_20F43C2A0();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v10 - 1) < 0)
  {
    sub_20E860C04((_BYTE *)a1, *(v10 - 3), (unint64_t)*(v10 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v10 - 3);
    *(_QWORD *)(a1 + 16) = *(v10 - 1);
    *(_OWORD *)a1 = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
}

void sub_20F43C28C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F43C2A0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A541D8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A541D8))
    return &stru_254A541C0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_types::MapAnalyticsMetricName::kCreateRegularKeyframe]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A541C0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A541C0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A541D8);
  return &stru_254A541C0;
}

void sub_20F43C358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A541D8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A541D8);
  _Unwind_Resume(a1);
}

void sub_20F43C398(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *__p;
  void **v10;

  v2 = sub_20F43C478();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v10 - 1) < 0)
  {
    sub_20E860C04((_BYTE *)a1, *(v10 - 3), (unint64_t)*(v10 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v10 - 3);
    *(_QWORD *)(a1 + 16) = *(v10 - 1);
    *(_OWORD *)a1 = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
}

void sub_20F43C464(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F43C478()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A541F8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A541F8))
    return &stru_254A541E0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_types::MapAnalyticsMetricName::kCreateWeakKeyframe]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A541E0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A541E0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A541F8);
  return &stru_254A541E0;
}

void sub_20F43C530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A541F8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A541F8);
  _Unwind_Resume(a1);
}

void sub_20F43C570(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *__p;
  void **v10;

  v2 = sub_20F43C650();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v10 - 1) < 0)
  {
    sub_20E860C04((_BYTE *)a1, *(v10 - 3), (unint64_t)*(v10 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v10 - 3);
    *(_QWORD *)(a1 + 16) = *(v10 - 1);
    *(_OWORD *)a1 = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
}

void sub_20F43C63C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F43C650()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A54218);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A54218))
    return &stru_254A54200;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_types::MapAnalyticsMetricName::kCreateSlidingKeyframe]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A54200);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A54200, &dword_20E81F000);
  __cxa_guard_release(&qword_254A54218);
  return &stru_254A54200;
}

void sub_20F43C708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A54218);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A54218);
  _Unwind_Resume(a1);
}

void sub_20F43C748(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *__p;
  void **v10;

  v2 = sub_20F43C828();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v10 - 1) < 0)
  {
    sub_20E860C04((_BYTE *)a1, *(v10 - 3), (unint64_t)*(v10 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v10 - 3);
    *(_QWORD *)(a1 + 16) = *(v10 - 1);
    *(_OWORD *)a1 = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
}

void sub_20F43C814(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F43C828()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A54238);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A54238))
    return &stru_254A54220;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_types::MapAnalyticsMetricName::kCreateNewSession]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A54220);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A54220, &dword_20E81F000);
  __cxa_guard_release(&qword_254A54238);
  return &stru_254A54220;
}

void sub_20F43C8E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A54238);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A54238);
  _Unwind_Resume(a1);
}

void sub_20F43C920(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *__p;
  void **v10;

  v2 = sub_20F43CA00();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v10 - 1) < 0)
  {
    sub_20E860C04((_BYTE *)a1, *(v10 - 3), (unint64_t)*(v10 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v10 - 3);
    *(_QWORD *)(a1 + 16) = *(v10 - 1);
    *(_OWORD *)a1 = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
}

void sub_20F43C9EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F43CA00()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A54258);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A54258))
    return &stru_254A54240;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_types::MapAnalyticsMetricName::kIsCollaborativeMapping]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A54240);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A54240, &dword_20E81F000);
  __cxa_guard_release(&qword_254A54258);
  return &stru_254A54240;
}

void sub_20F43CAB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A54258);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A54258);
  _Unwind_Resume(a1);
}

void sub_20F43CAF8(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *__p;
  void **v10;

  v2 = sub_20F43CBD8();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v10 - 1) < 0)
  {
    sub_20E860C04((_BYTE *)a1, *(v10 - 3), (unint64_t)*(v10 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v10 - 3);
    *(_QWORD *)(a1 + 16) = *(v10 - 1);
    *(_OWORD *)a1 = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
}

void sub_20F43CBC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F43CBD8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A54278);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A54278))
    return &stru_254A54260;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_types::MapAnalyticsMetricName::kNumberStatesWithinActiveSubmaps]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A54260);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A54260, &dword_20E81F000);
  __cxa_guard_release(&qword_254A54278);
  return &stru_254A54260;
}

void sub_20F43CC90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A54278);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A54278);
  _Unwind_Resume(a1);
}

void sub_20F43CCD0(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *__p;
  void **v10;

  v2 = sub_20F43CDB0();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v10 - 1) < 0)
  {
    sub_20E860C04((_BYTE *)a1, *(v10 - 3), (unint64_t)*(v10 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v10 - 3);
    *(_QWORD *)(a1 + 16) = *(v10 - 1);
    *(_OWORD *)a1 = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
}

void sub_20F43CD9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F43CDB0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A54298);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A54298))
    return &stru_254A54280;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_types::MapAnalyticsMetricName::kNumberStatesWithinLocalizedSubmaps]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A54280);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A54280, &dword_20E81F000);
  __cxa_guard_release(&qword_254A54298);
  return &stru_254A54280;
}

void sub_20F43CE68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A54298);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A54298);
  _Unwind_Resume(a1);
}

void sub_20F43CEA8(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *__p;
  void **v10;

  v2 = sub_20F43CF88();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v10 - 1) < 0)
  {
    sub_20E860C04((_BYTE *)a1, *(v10 - 3), (unint64_t)*(v10 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v10 - 3);
    *(_QWORD *)(a1 + 16) = *(v10 - 1);
    *(_OWORD *)a1 = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
}

void sub_20F43CF74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F43CF88()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A542B8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A542B8))
    return &stru_254A542A0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_types::MapAnalyticsMetricName::kNumberStatesWithinExternalSubmaps]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A542A0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A542A0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A542B8);
  return &stru_254A542A0;
}

void sub_20F43D040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A542B8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A542B8);
  _Unwind_Resume(a1);
}

void sub_20F43D080(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *__p;
  void **v10;

  v2 = sub_20F43D160();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v10 - 1) < 0)
  {
    sub_20E860C04((_BYTE *)a1, *(v10 - 3), (unint64_t)*(v10 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v10 - 3);
    *(_QWORD *)(a1 + 16) = *(v10 - 1);
    *(_OWORD *)a1 = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
}

void sub_20F43D14C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F43D160()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A542D8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A542D8))
    return &stru_254A542C0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_types::MapAnalyticsMetricName::kNumberOfActiveSubmaps]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A542C0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A542C0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A542D8);
  return &stru_254A542C0;
}

void sub_20F43D218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A542D8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A542D8);
  _Unwind_Resume(a1);
}

void sub_20F43D258(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *__p;
  void **v10;

  v2 = sub_20F43D338();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v10 - 1) < 0)
  {
    sub_20E860C04((_BYTE *)a1, *(v10 - 3), (unint64_t)*(v10 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v10 - 3);
    *(_QWORD *)(a1 + 16) = *(v10 - 1);
    *(_OWORD *)a1 = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
}

void sub_20F43D324(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F43D338()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A542F8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A542F8))
    return &stru_254A542E0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_types::MapAnalyticsMetricName::kNumberOfLocalizedSubmaps]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A542E0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A542E0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A542F8);
  return &stru_254A542E0;
}

void sub_20F43D3F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A542F8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A542F8);
  _Unwind_Resume(a1);
}

void sub_20F43D430(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *__p;
  void **v10;

  v2 = sub_20F43D510();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v10 - 1) < 0)
  {
    sub_20E860C04((_BYTE *)a1, *(v10 - 3), (unint64_t)*(v10 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v10 - 3);
    *(_QWORD *)(a1 + 16) = *(v10 - 1);
    *(_OWORD *)a1 = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
}

void sub_20F43D4FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F43D510()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A54318);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A54318))
    return &stru_254A54300;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_types::MapAnalyticsMetricName::kNumberOfExternalSubmaps]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A54300);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A54300, &dword_20E81F000);
  __cxa_guard_release(&qword_254A54318);
  return &stru_254A54300;
}

void sub_20F43D5C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A54318);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A54318);
  _Unwind_Resume(a1);
}

void sub_20F43D608(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *__p;
  void **v10;

  v2 = sub_20F43D6E8();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v10 - 1) < 0)
  {
    sub_20E860C04((_BYTE *)a1, *(v10 - 3), (unint64_t)*(v10 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v10 - 3);
    *(_QWORD *)(a1 + 16) = *(v10 - 1);
    *(_OWORD *)a1 = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
}

void sub_20F43D6D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F43D6E8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A54338);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A54338))
    return &stru_254A54320;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_types::MapAnalyticsMetricName::KNumberActiveClosingLoopKeyframeMatchingPairs]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A54320);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A54320, &dword_20E81F000);
  __cxa_guard_release(&qword_254A54338);
  return &stru_254A54320;
}

void sub_20F43D7A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A54338);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A54338);
  _Unwind_Resume(a1);
}

void sub_20F43D7E0(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *__p;
  void **v10;

  v2 = sub_20F43D8C0();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v10 - 1) < 0)
  {
    sub_20E860C04((_BYTE *)a1, *(v10 - 3), (unint64_t)*(v10 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v10 - 3);
    *(_QWORD *)(a1 + 16) = *(v10 - 1);
    *(_OWORD *)a1 = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
}

void sub_20F43D8AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F43D8C0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A54358);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A54358))
    return &stru_254A54340;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_types::MapAnalyticsMetricName::kNumberActiveClosingLoopCandidates]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A54340);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A54340, &dword_20E81F000);
  __cxa_guard_release(&qword_254A54358);
  return &stru_254A54340;
}

void sub_20F43D978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A54358);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A54358);
  _Unwind_Resume(a1);
}

void sub_20F43D9B8(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *__p;
  void **v10;

  v2 = sub_20F43DA98();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v10 - 1) < 0)
  {
    sub_20E860C04((_BYTE *)a1, *(v10 - 3), (unint64_t)*(v10 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v10 - 3);
    *(_QWORD *)(a1 + 16) = *(v10 - 1);
    *(_OWORD *)a1 = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
}

void sub_20F43DA84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F43DA98()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A54378);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A54378))
    return &stru_254A54360;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_types::MapAnalyticsMetricName::kNumberActiveClosingLoopResults]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A54360);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A54360, &dword_20E81F000);
  __cxa_guard_release(&qword_254A54378);
  return &stru_254A54360;
}

void sub_20F43DB50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A54378);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A54378);
  _Unwind_Resume(a1);
}

void sub_20F43DB90(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *__p;
  void **v10;

  v2 = sub_20F43DC70();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v10 - 1) < 0)
  {
    sub_20E860C04((_BYTE *)a1, *(v10 - 3), (unint64_t)*(v10 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v10 - 3);
    *(_QWORD *)(a1 + 16) = *(v10 - 1);
    *(_OWORD *)a1 = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
}

void sub_20F43DC5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F43DC70()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A54398);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A54398))
    return &stru_254A54380;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_types::MapAnalyticsMetricName::kNumberActiveClosingLoopResultsML]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A54380);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A54380, &dword_20E81F000);
  __cxa_guard_release(&qword_254A54398);
  return &stru_254A54380;
}

void sub_20F43DD28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A54398);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A54398);
  _Unwind_Resume(a1);
}

void sub_20F43DD68(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *__p;
  void **v10;

  v2 = sub_20F43DE48();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v10 - 1) < 0)
  {
    sub_20E860C04((_BYTE *)a1, *(v10 - 3), (unint64_t)*(v10 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v10 - 3);
    *(_QWORD *)(a1 + 16) = *(v10 - 1);
    *(_OWORD *)a1 = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
}

void sub_20F43DE34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F43DE48()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A543B8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A543B8))
    return &stru_254A543A0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_types::MapAnalyticsMetricName::kNumberSubmapsToSerialize]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A543A0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A543A0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A543B8);
  return &stru_254A543A0;
}

void sub_20F43DF00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A543B8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A543B8);
  _Unwind_Resume(a1);
}

void sub_20F43DF40(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *__p;
  void **v10;

  v2 = sub_20F43E020();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v10 - 1) < 0)
  {
    sub_20E860C04((_BYTE *)a1, *(v10 - 3), (unint64_t)*(v10 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v10 - 3);
    *(_QWORD *)(a1 + 16) = *(v10 - 1);
    *(_OWORD *)a1 = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
}

void sub_20F43E00C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F43E020()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A543D8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A543D8))
    return &stru_254A543C0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_types::MapAnalyticsMetricName::kNumberSubmapsRemainModified]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A543C0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A543C0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A543D8);
  return &stru_254A543C0;
}

void sub_20F43E0D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A543D8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A543D8);
  _Unwind_Resume(a1);
}

void sub_20F43E118(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *__p;
  void **v10;

  v2 = sub_20F43E1F8();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v10 - 1) < 0)
  {
    sub_20E860C04((_BYTE *)a1, *(v10 - 3), (unint64_t)*(v10 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v10 - 3);
    *(_QWORD *)(a1 + 16) = *(v10 - 1);
    *(_OWORD *)a1 = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
}

void sub_20F43E1E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F43E1F8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A543F8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A543F8))
    return &stru_254A543E0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_types::MapAnalyticsMetricName::kNumberSubmapsPriorPruning]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A543E0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A543E0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A543F8);
  return &stru_254A543E0;
}

void sub_20F43E2B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A543F8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A543F8);
  _Unwind_Resume(a1);
}

void sub_20F43E2F0(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *__p;
  void **v10;

  v2 = sub_20F43E3D0();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v10 - 1) < 0)
  {
    sub_20E860C04((_BYTE *)a1, *(v10 - 3), (unint64_t)*(v10 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v10 - 3);
    *(_QWORD *)(a1 + 16) = *(v10 - 1);
    *(_OWORD *)a1 = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
}

void sub_20F43E3BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F43E3D0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A54418);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A54418))
    return &stru_254A54400;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_types::MapAnalyticsMetricName::kNumberOverlappedSubmaps]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A54400);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A54400, &dword_20E81F000);
  __cxa_guard_release(&qword_254A54418);
  return &stru_254A54400;
}

void sub_20F43E488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A54418);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A54418);
  _Unwind_Resume(a1);
}

void sub_20F43E4C8(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *__p;
  void **v10;

  v2 = sub_20F43E5A8();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v10 - 1) < 0)
  {
    sub_20E860C04((_BYTE *)a1, *(v10 - 3), (unint64_t)*(v10 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v10 - 3);
    *(_QWORD *)(a1 + 16) = *(v10 - 1);
    *(_OWORD *)a1 = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
}

void sub_20F43E594(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F43E5A8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A54438);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A54438))
    return &stru_254A54420;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_types::MapAnalyticsMetricName::kOverlappedSubmapRatio]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A54420);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A54420, &dword_20E81F000);
  __cxa_guard_release(&qword_254A54438);
  return &stru_254A54420;
}

void sub_20F43E660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A54438);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A54438);
  _Unwind_Resume(a1);
}

void sub_20F43E6A0(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *__p;
  void **v10;

  v2 = sub_20F43E780();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v10 - 1) < 0)
  {
    sub_20E860C04((_BYTE *)a1, *(v10 - 3), (unint64_t)*(v10 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v10 - 3);
    *(_QWORD *)(a1 + 16) = *(v10 - 1);
    *(_OWORD *)a1 = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
}

void sub_20F43E76C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F43E780()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A54458);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A54458))
    return &stru_254A54440;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_types::MapAnalyticsMetricName::kPruneSubmapFromOverlap]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A54440);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A54440, &dword_20E81F000);
  __cxa_guard_release(&qword_254A54458);
  return &stru_254A54440;
}

void sub_20F43E838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A54458);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A54458);
  _Unwind_Resume(a1);
}

void sub_20F43E878(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *__p;
  void **v10;

  v2 = sub_20F43E958();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v10 - 1) < 0)
  {
    sub_20E860C04((_BYTE *)a1, *(v10 - 3), (unint64_t)*(v10 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v10 - 3);
    *(_QWORD *)(a1 + 16) = *(v10 - 1);
    *(_OWORD *)a1 = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
}

void sub_20F43E944(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F43E958()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A54478);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A54478))
    return &stru_254A54460;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_types::MapAnalyticsMetricName::kPruneSubmapFromDistance]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A54460);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A54460, &dword_20E81F000);
  __cxa_guard_release(&qword_254A54478);
  return &stru_254A54460;
}

void sub_20F43EA10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A54478);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A54478);
  _Unwind_Resume(a1);
}

void sub_20F43EA50(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *__p;
  void **v10;

  v2 = sub_20F43EB30();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v10 - 1) < 0)
  {
    sub_20E860C04((_BYTE *)a1, *(v10 - 3), (unint64_t)*(v10 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v10 - 3);
    *(_QWORD *)(a1 + 16) = *(v10 - 1);
    *(_OWORD *)a1 = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
}

void sub_20F43EB1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F43EB30()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A54498);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A54498))
    return &stru_254A54480;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_types::MapAnalyticsMetricName::kAverageAnchorDistanceAfterPruning]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A54480);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A54480, &dword_20E81F000);
  __cxa_guard_release(&qword_254A54498);
  return &stru_254A54480;
}

void sub_20F43EBE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A54498);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A54498);
  _Unwind_Resume(a1);
}

void sub_20F43EC28(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *__p;
  void **v10;

  v2 = sub_20F43ED08();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v10 - 1) < 0)
  {
    sub_20E860C04((_BYTE *)a1, *(v10 - 3), (unint64_t)*(v10 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v10 - 3);
    *(_QWORD *)(a1 + 16) = *(v10 - 1);
    *(_OWORD *)a1 = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
}

void sub_20F43ECF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F43ED08()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A544B8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A544B8))
    return &stru_254A544A0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_types::MapAnalyticsMetricName::kNumberDeletedSubmapStates]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A544A0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A544A0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A544B8);
  return &stru_254A544A0;
}

void sub_20F43EDC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A544B8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A544B8);
  _Unwind_Resume(a1);
}

void sub_20F43EE00(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *__p;
  void **v10;

  v2 = sub_20F43EEE0();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v10 - 1) < 0)
  {
    sub_20E860C04((_BYTE *)a1, *(v10 - 3), (unint64_t)*(v10 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v10 - 3);
    *(_QWORD *)(a1 + 16) = *(v10 - 1);
    *(_OWORD *)a1 = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
}

void sub_20F43EECC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F43EEE0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A544D8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A544D8))
    return &stru_254A544C0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_types::MapAnalyticsMetricName::kNumberExternalRelocalizationResults]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A544C0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A544C0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A544D8);
  return &stru_254A544C0;
}

void sub_20F43EF98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A544D8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A544D8);
  _Unwind_Resume(a1);
}

void sub_20F43EFD8(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *__p;
  void **v10;

  v2 = sub_20F43F0B8();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v10 - 1) < 0)
  {
    sub_20E860C04((_BYTE *)a1, *(v10 - 3), (unint64_t)*(v10 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v10 - 3);
    *(_QWORD *)(a1 + 16) = *(v10 - 1);
    *(_OWORD *)a1 = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
}

void sub_20F43F0A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F43F0B8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A544F8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A544F8))
    return &stru_254A544E0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_types::MapAnalyticsMetricName::kMaxNewIntraSubmapOdometryEdgeError]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A544E0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A544E0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A544F8);
  return &stru_254A544E0;
}

void sub_20F43F170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A544F8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A544F8);
  _Unwind_Resume(a1);
}

void sub_20F43F1B0(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *__p;
  void **v10;

  v2 = sub_20F43F290();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v10 - 1) < 0)
  {
    sub_20E860C04((_BYTE *)a1, *(v10 - 3), (unint64_t)*(v10 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v10 - 3);
    *(_QWORD *)(a1 + 16) = *(v10 - 1);
    *(_OWORD *)a1 = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
}

void sub_20F43F27C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F43F290()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A54518);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A54518))
    return &stru_254A54500;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_types::MapAnalyticsMetricName::kMaxNewIntraSubmapRelocEdgeError]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A54500);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A54500, &dword_20E81F000);
  __cxa_guard_release(&qword_254A54518);
  return &stru_254A54500;
}

void sub_20F43F348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A54518);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A54518);
  _Unwind_Resume(a1);
}

void sub_20F43F388(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *__p;
  void **v10;

  v2 = sub_20F43F468();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v10 - 1) < 0)
  {
    sub_20E860C04((_BYTE *)a1, *(v10 - 3), (unint64_t)*(v10 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v10 - 3);
    *(_QWORD *)(a1 + 16) = *(v10 - 1);
    *(_OWORD *)a1 = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
}

void sub_20F43F454(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F43F468()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A54538);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A54538))
    return &stru_254A54520;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_types::MapAnalyticsMetricName::kMaxNewIntraSubmapUnknownEdgeError]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A54520);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A54520, &dword_20E81F000);
  __cxa_guard_release(&qword_254A54538);
  return &stru_254A54520;
}

void sub_20F43F520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A54538);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A54538);
  _Unwind_Resume(a1);
}

void sub_20F43F560(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *__p;
  void **v10;

  v2 = sub_20F43F640();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v10 - 1) < 0)
  {
    sub_20E860C04((_BYTE *)a1, *(v10 - 3), (unint64_t)*(v10 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v10 - 3);
    *(_QWORD *)(a1 + 16) = *(v10 - 1);
    *(_OWORD *)a1 = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
}

void sub_20F43F62C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F43F640()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A54558);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A54558))
    return &stru_254A54540;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_types::MapAnalyticsMetricName::kMaxNewInterSubmapOdometryEdgeError]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A54540);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A54540, &dword_20E81F000);
  __cxa_guard_release(&qword_254A54558);
  return &stru_254A54540;
}

void sub_20F43F6F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A54558);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A54558);
  _Unwind_Resume(a1);
}

void sub_20F43F738(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *__p;
  void **v10;

  v2 = sub_20F43F818();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v10 - 1) < 0)
  {
    sub_20E860C04((_BYTE *)a1, *(v10 - 3), (unint64_t)*(v10 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v10 - 3);
    *(_QWORD *)(a1 + 16) = *(v10 - 1);
    *(_OWORD *)a1 = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
}

void sub_20F43F804(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F43F818()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A54578);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A54578))
    return &stru_254A54560;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_types::MapAnalyticsMetricName::kMaxNewInterSubmapRelocEdgeError]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A54560);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A54560, &dword_20E81F000);
  __cxa_guard_release(&qword_254A54578);
  return &stru_254A54560;
}

void sub_20F43F8D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A54578);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A54578);
  _Unwind_Resume(a1);
}

void sub_20F43F910(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *__p;
  void **v10;

  v2 = sub_20F43F9F0();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v10 - 1) < 0)
  {
    sub_20E860C04((_BYTE *)a1, *(v10 - 3), (unint64_t)*(v10 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v10 - 3);
    *(_QWORD *)(a1 + 16) = *(v10 - 1);
    *(_OWORD *)a1 = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
}

void sub_20F43F9DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F43F9F0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A54598);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A54598))
    return &stru_254A54580;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_types::MapAnalyticsMetricName::kMaxNewInterSubmapUnknownEdgeError]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A54580);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A54580, &dword_20E81F000);
  __cxa_guard_release(&qword_254A54598);
  return &stru_254A54580;
}

void sub_20F43FAA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A54598);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A54598);
  _Unwind_Resume(a1);
}

void sub_20F43FAE8(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *__p;
  void **v10;

  v2 = sub_20F43FBC8();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v10 - 1) < 0)
  {
    sub_20E860C04((_BYTE *)a1, *(v10 - 3), (unint64_t)*(v10 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v10 - 3);
    *(_QWORD *)(a1 + 16) = *(v10 - 1);
    *(_OWORD *)a1 = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
}

void sub_20F43FBB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F43FBC8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A545B8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A545B8))
    return &stru_254A545A0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_types::MapAnalyticsMetricName::kMaxIntraSubmapOdometryEdgeError]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A545A0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A545A0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A545B8);
  return &stru_254A545A0;
}

void sub_20F43FC80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A545B8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A545B8);
  _Unwind_Resume(a1);
}

void sub_20F43FCC0(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *__p;
  void **v10;

  v2 = sub_20F43FDA0();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v10 - 1) < 0)
  {
    sub_20E860C04((_BYTE *)a1, *(v10 - 3), (unint64_t)*(v10 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v10 - 3);
    *(_QWORD *)(a1 + 16) = *(v10 - 1);
    *(_OWORD *)a1 = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
}

void sub_20F43FD8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F43FDA0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A545D8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A545D8))
    return &stru_254A545C0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_types::MapAnalyticsMetricName::kMaxIntraSubmapRelocEdgeError]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A545C0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A545C0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A545D8);
  return &stru_254A545C0;
}

void sub_20F43FE58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A545D8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A545D8);
  _Unwind_Resume(a1);
}

void sub_20F43FE98(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *__p;
  void **v10;

  v2 = sub_20F43FF78();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v10 - 1) < 0)
  {
    sub_20E860C04((_BYTE *)a1, *(v10 - 3), (unint64_t)*(v10 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v10 - 3);
    *(_QWORD *)(a1 + 16) = *(v10 - 1);
    *(_OWORD *)a1 = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
}

void sub_20F43FF64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F43FF78()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A545F8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A545F8))
    return &stru_254A545E0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_types::MapAnalyticsMetricName::kMaxIntraSubmapUnknownEdgeError]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A545E0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A545E0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A545F8);
  return &stru_254A545E0;
}

void sub_20F440030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A545F8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A545F8);
  _Unwind_Resume(a1);
}

void sub_20F440070(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *__p;
  void **v10;

  v2 = sub_20F440150();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v10 - 1) < 0)
  {
    sub_20E860C04((_BYTE *)a1, *(v10 - 3), (unint64_t)*(v10 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v10 - 3);
    *(_QWORD *)(a1 + 16) = *(v10 - 1);
    *(_OWORD *)a1 = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
}

void sub_20F44013C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F440150()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A54618);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A54618))
    return &stru_254A54600;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_types::MapAnalyticsMetricName::kMaxInterSubmapOdometryEdgeError]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A54600);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A54600, &dword_20E81F000);
  __cxa_guard_release(&qword_254A54618);
  return &stru_254A54600;
}

void sub_20F440208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A54618);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A54618);
  _Unwind_Resume(a1);
}

void sub_20F440248(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *__p;
  void **v10;

  v2 = sub_20F440328();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v10 - 1) < 0)
  {
    sub_20E860C04((_BYTE *)a1, *(v10 - 3), (unint64_t)*(v10 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v10 - 3);
    *(_QWORD *)(a1 + 16) = *(v10 - 1);
    *(_OWORD *)a1 = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
}

void sub_20F440314(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F440328()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A54638);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A54638))
    return &stru_254A54620;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_types::MapAnalyticsMetricName::kMaxInterSubmapRelocEdgeError]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A54620);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A54620, &dword_20E81F000);
  __cxa_guard_release(&qword_254A54638);
  return &stru_254A54620;
}

void sub_20F4403E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A54638);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A54638);
  _Unwind_Resume(a1);
}

void sub_20F440420(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *__p;
  void **v10;

  v2 = sub_20F440500();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v10 - 1) < 0)
  {
    sub_20E860C04((_BYTE *)a1, *(v10 - 3), (unint64_t)*(v10 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v10 - 3);
    *(_QWORD *)(a1 + 16) = *(v10 - 1);
    *(_OWORD *)a1 = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
}

void sub_20F4404EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F440500()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A54658);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A54658))
    return &stru_254A54640;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_types::MapAnalyticsMetricName::kMaxInterSubmapUnknownEdgeError]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A54640);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A54640, &dword_20E81F000);
  __cxa_guard_release(&qword_254A54658);
  return &stru_254A54640;
}

void sub_20F4405B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A54658);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A54658);
  _Unwind_Resume(a1);
}

void sub_20F4405F8(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *__p;
  void **v10;

  v2 = sub_20F4406D8();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v10 - 1) < 0)
  {
    sub_20E860C04((_BYTE *)a1, *(v10 - 3), (unint64_t)*(v10 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v10 - 3);
    *(_QWORD *)(a1 + 16) = *(v10 - 1);
    *(_OWORD *)a1 = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
}

void sub_20F4406C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F4406D8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A54678);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A54678))
    return &stru_254A54660;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_types::MapAnalyticsMetricName::kRejectInterSubmapRelocResult]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A54660);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A54660, &dword_20E81F000);
  __cxa_guard_release(&qword_254A54678);
  return &stru_254A54660;
}

void sub_20F440790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A54678);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A54678);
  _Unwind_Resume(a1);
}

void sub_20F4407D0(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *__p;
  void **v10;

  v2 = sub_20F4408B0();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v10 - 1) < 0)
  {
    sub_20E860C04((_BYTE *)a1, *(v10 - 3), (unint64_t)*(v10 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v10 - 3);
    *(_QWORD *)(a1 + 16) = *(v10 - 1);
    *(_OWORD *)a1 = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
}

void sub_20F44089C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F4408B0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A54698);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A54698))
    return &stru_254A54680;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_types::MapAnalyticsMetricName::kNumNewAnchorsInMetadata]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A54680);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A54680, &dword_20E81F000);
  __cxa_guard_release(&qword_254A54698);
  return &stru_254A54680;
}

void sub_20F440968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A54698);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A54698);
  _Unwind_Resume(a1);
}

void sub_20F4409A8(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *__p;
  void **v10;

  v2 = sub_20F440A88();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v10 - 1) < 0)
  {
    sub_20E860C04((_BYTE *)a1, *(v10 - 3), (unint64_t)*(v10 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v10 - 3);
    *(_QWORD *)(a1 + 16) = *(v10 - 1);
    *(_OWORD *)a1 = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
}

void sub_20F440A74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F440A88()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A546B8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A546B8))
    return &stru_254A546A0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_types::MapAnalyticsMetricName::kNumUpdatedAnchorsInMetadata]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A546A0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A546A0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A546B8);
  return &stru_254A546A0;
}

void sub_20F440B40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A546B8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A546B8);
  _Unwind_Resume(a1);
}

void sub_20F440B80(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *__p;
  void **v10;

  v2 = sub_20F440C60();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v10 - 1) < 0)
  {
    sub_20E860C04((_BYTE *)a1, *(v10 - 3), (unint64_t)*(v10 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v10 - 3);
    *(_QWORD *)(a1 + 16) = *(v10 - 1);
    *(_OWORD *)a1 = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
}

void sub_20F440C4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F440C60()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A546D8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A546D8))
    return &stru_254A546C0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_types::MapAnalyticsMetricName::kNumExternalAnchorsInMetadata]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A546C0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A546C0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A546D8);
  return &stru_254A546C0;
}

void sub_20F440D18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A546D8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A546D8);
  _Unwind_Resume(a1);
}

void sub_20F440D58(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *__p;
  void **v10;

  v2 = sub_20F440E38();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v10 - 1) < 0)
  {
    sub_20E860C04((_BYTE *)a1, *(v10 - 3), (unint64_t)*(v10 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v10 - 3);
    *(_QWORD *)(a1 + 16) = *(v10 - 1);
    *(_OWORD *)a1 = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
}

void sub_20F440E24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F440E38()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A546F8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A546F8))
    return &stru_254A546E0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_types::MapAnalyticsMetricName::kNumRemovedAnchorsInMetadata]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A546E0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A546E0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A546F8);
  return &stru_254A546E0;
}

void sub_20F440EF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A546F8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A546F8);
  _Unwind_Resume(a1);
}

void sub_20F440F30(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *__p;
  void **v10;

  v2 = sub_20F441010();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v10 - 1) < 0)
  {
    sub_20E860C04((_BYTE *)a1, *(v10 - 3), (unint64_t)*(v10 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v10 - 3);
    *(_QWORD *)(a1 + 16) = *(v10 - 1);
    *(_OWORD *)a1 = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
}

void sub_20F440FFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F441010()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A54718);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A54718))
    return &stru_254A54700;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_types::MapAnalyticsMetricName::kNumSampledKeyframesForMapTracking]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A54700);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A54700, &dword_20E81F000);
  __cxa_guard_release(&qword_254A54718);
  return &stru_254A54700;
}

void sub_20F4410C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A54718);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A54718);
  _Unwind_Resume(a1);
}

void sub_20F441108(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *__p;
  void **v10;

  v2 = sub_20F4411E8();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v10 - 1) < 0)
  {
    sub_20E860C04((_BYTE *)a1, *(v10 - 3), (unint64_t)*(v10 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v10 - 3);
    *(_QWORD *)(a1 + 16) = *(v10 - 1);
    *(_OWORD *)a1 = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
}

void sub_20F4411D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F4411E8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A54738);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A54738))
    return &stru_254A54720;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_types::MapAnalyticsMetricName::kNumGoodKeyframesForMapTracking]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A54720);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A54720, &dword_20E81F000);
  __cxa_guard_release(&qword_254A54738);
  return &stru_254A54720;
}

void sub_20F4412A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A54738);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A54738);
  _Unwind_Resume(a1);
}

void sub_20F4412E0(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *__p;
  void **v10;

  v2 = sub_20F4413C0();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v10 - 1) < 0)
  {
    sub_20E860C04((_BYTE *)a1, *(v10 - 3), (unint64_t)*(v10 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v10 - 3);
    *(_QWORD *)(a1 + 16) = *(v10 - 1);
    *(_OWORD *)a1 = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
}

void sub_20F4413AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F4413C0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A54758);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A54758))
    return &stru_254A54740;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_types::MapAnalyticsMetricName::kNumSubmapsAlignmentCalls]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A54740);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A54740, &dword_20E81F000);
  __cxa_guard_release(&qword_254A54758);
  return &stru_254A54740;
}

void sub_20F441478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A54758);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A54758);
  _Unwind_Resume(a1);
}

void sub_20F4414B8(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *__p;
  void **v10;

  v2 = sub_20F441598();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v10 - 1) < 0)
  {
    sub_20E860C04((_BYTE *)a1, *(v10 - 3), (unint64_t)*(v10 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v10 - 3);
    *(_QWORD *)(a1 + 16) = *(v10 - 1);
    *(_OWORD *)a1 = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
}

void sub_20F441584(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F441598()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A54778);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A54778))
    return &stru_254A54760;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_types::MapAnalyticsMetricName::kNumSubmapOptimizationCalls]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A54760);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A54760, &dword_20E81F000);
  __cxa_guard_release(&qword_254A54778);
  return &stru_254A54760;
}

void sub_20F441650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A54778);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A54778);
  _Unwind_Resume(a1);
}

void sub_20F441690(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *__p;
  void **v10;

  v2 = sub_20F441770();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v10 - 1) < 0)
  {
    sub_20E860C04((_BYTE *)a1, *(v10 - 3), (unint64_t)*(v10 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v10 - 3);
    *(_QWORD *)(a1 + 16) = *(v10 - 1);
    *(_OWORD *)a1 = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
}

void sub_20F44175C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F441770()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A54798);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A54798))
    return &stru_254A54780;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_types::MapAnalyticsMetricName::kLoopClosurePositionCompensation]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A54780);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A54780, &dword_20E81F000);
  __cxa_guard_release(&qword_254A54798);
  return &stru_254A54780;
}

void sub_20F441828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A54798);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A54798);
  _Unwind_Resume(a1);
}

void sub_20F441868(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *__p;
  void **v10;

  v2 = sub_20F441948();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v10 - 1) < 0)
  {
    sub_20E860C04((_BYTE *)a1, *(v10 - 3), (unint64_t)*(v10 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v10 - 3);
    *(_QWORD *)(a1 + 16) = *(v10 - 1);
    *(_OWORD *)a1 = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
}

void sub_20F441934(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F441948()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A547B8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A547B8))
    return &stru_254A547A0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_types::MapAnalyticsMetricName::kLoopClosureRotationCompensation]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A547A0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A547A0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A547B8);
  return &stru_254A547A0;
}

void sub_20F441A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A547B8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A547B8);
  _Unwind_Resume(a1);
}

void sub_20F441A40(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *__p;
  void **v10;

  v2 = sub_20F441B20();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v10 - 1) < 0)
  {
    sub_20E860C04((_BYTE *)a1, *(v10 - 3), (unint64_t)*(v10 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v10 - 3);
    *(_QWORD *)(a1 + 16) = *(v10 - 1);
    *(_OWORD *)a1 = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
}

void sub_20F441B0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F441B20()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A547D8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A547D8))
    return &stru_254A547C0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_types::MapAnalyticsMetricName::kNumOverlapMapInlierMatches]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A547C0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A547C0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A547D8);
  return &stru_254A547C0;
}

void sub_20F441BD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A547D8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A547D8);
  _Unwind_Resume(a1);
}

void sub_20F441C18(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *__p;
  void **v10;

  v2 = sub_20F441CF8();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v10 - 1) < 0)
  {
    sub_20E860C04((_BYTE *)a1, *(v10 - 3), (unint64_t)*(v10 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v10 - 3);
    *(_QWORD *)(a1 + 16) = *(v10 - 1);
    *(_OWORD *)a1 = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
}

void sub_20F441CE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F441CF8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A547F8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A547F8))
    return &stru_254A547E0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_types::MapAnalyticsMetricName::kOverlapMapInlierMatchesRatio]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A547E0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A547E0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A547F8);
  return &stru_254A547E0;
}

void sub_20F441DB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A547F8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A547F8);
  _Unwind_Resume(a1);
}

void sub_20F441DF0(unsigned int a1, uint64_t a2)
{
  double v3;
  void *__p[2];
  char v5;

  v3 = (double)a1;
  kdebug_trace();
  if (a2
    && (*(_BYTE *)(a2 + 80)
     || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144)))
  {
    sub_20F43C748((uint64_t)__p);
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, (unsigned __int8 *)__p, v3);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, (uint64_t)__p, v3);
    if (v5 < 0)
      operator delete(__p[0]);
  }
}

void sub_20F441ED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F441EF8(unsigned int a1, uint64_t a2)
{
  double v3;
  void *__p[2];
  char v5;

  v3 = (double)a1;
  kdebug_trace();
  if (a2
    && (*(_BYTE *)(a2 + 80)
     || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144)))
  {
    sub_20F43C920((uint64_t)__p);
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, (unsigned __int8 *)__p, v3);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, (uint64_t)__p, v3);
    if (v5 < 0)
      operator delete(__p[0]);
  }
}

void sub_20F441FE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F442000(unsigned int a1, unsigned int a2, uint64_t a3)
{
  double v4;
  double v5;
  double v6;
  void *__p[2];
  char v8;

  v4 = (double)((a1 | a2) ^ 1);
  v5 = (double)a1;
  v6 = (double)a2;
  kdebug_trace();
  if (!a3)
    return;
  if (*(_BYTE *)(a3 + 80)
    || *(_BYTE *)(a3 + 200) && *(_QWORD *)(a3 + 184) && *(_QWORD *)(a3 + 136) != *(_QWORD *)(a3 + 144))
  {
    sub_20F43C1C0((uint64_t)__p);
    if (*(_BYTE *)(a3 + 80))
      sub_20FDBBC20(a3, (unsigned __int8 *)__p, v4);
    if (*(_BYTE *)(a3 + 200) && *(_QWORD *)(a3 + 184) && *(_QWORD *)(a3 + 136) != *(_QWORD *)(a3 + 144))
      sub_210214860(a3 + 88, (uint64_t)__p, v4);
    if (v8 < 0)
    {
      operator delete(__p[0]);
      if (*(_BYTE *)(a3 + 80))
        goto LABEL_20;
    }
    else if (*(_BYTE *)(a3 + 80))
    {
      goto LABEL_20;
    }
  }
  if (!*(_BYTE *)(a3 + 200) || !*(_QWORD *)(a3 + 184) || *(_QWORD *)(a3 + 136) == *(_QWORD *)(a3 + 144))
    goto LABEL_30;
LABEL_20:
  sub_20F43C398((uint64_t)__p);
  if (*(_BYTE *)(a3 + 80))
    sub_20FDBBC20(a3, (unsigned __int8 *)__p, v5);
  if (*(_BYTE *)(a3 + 200) && *(_QWORD *)(a3 + 184) && *(_QWORD *)(a3 + 136) != *(_QWORD *)(a3 + 144))
    sub_210214860(a3 + 88, (uint64_t)__p, v5);
  if (v8 < 0)
  {
    operator delete(__p[0]);
    if (*(_BYTE *)(a3 + 80))
      goto LABEL_33;
LABEL_30:
    if (!*(_BYTE *)(a3 + 200) || !*(_QWORD *)(a3 + 184) || *(_QWORD *)(a3 + 136) == *(_QWORD *)(a3 + 144))
      return;
    goto LABEL_33;
  }
  if (!*(_BYTE *)(a3 + 80))
    goto LABEL_30;
LABEL_33:
  sub_20F43C570((uint64_t)__p);
  if (*(_BYTE *)(a3 + 80))
    sub_20FDBBC20(a3, (unsigned __int8 *)__p, v6);
  if (*(_BYTE *)(a3 + 200) && *(_QWORD *)(a3 + 184) && *(_QWORD *)(a3 + 136) != *(_QWORD *)(a3 + 144))
    sub_210214860(a3 + 88, (uint64_t)__p, v6);
  if (v8 < 0)
    operator delete(__p[0]);
}

void sub_20F44221C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F442244(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  unsigned __int8 v7;
  char *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  __uint64_t v15[2];
  void *v16;
  void *v17;
  char v18;
  char v19;
  void *v20;
  char v21;
  char v22;
  void *v23;
  char v24;
  char v25;
  void *v26;
  char v27;
  void *__p;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v6 = sub_210219C18();
  v7 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    LODWORD(v16) = 67109376;
    HIDWORD(v16) = a1;
    LOWORD(v17) = 1024;
    *(_DWORD *)((char *)&v17 + 2) = a2;
    v9 = (char *)_os_log_send_and_compose_impl();
    v10 = strlen(v9);
    v15[0] = 0;
    pthread_threadid_np(0, v15);
    v11 = v15[0];
    timespec_get((timespec *)v15, 1);
    sub_210219E20(&v16, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v6 + 1), (__int128 *)(v6 + 5), "ACL:C: NIRMP:%u, NAC:%u", 0x17uLL, v9, v10, v11, v15);
    std::mutex::lock(&stru_254A5A410);
    v12 = qword_254A5A458;
    for (i = unk_254A5A460; v12 != i; v12 += 40)
    {
      v14 = *(_QWORD *)(v12 + 32);
      if (!v14)
        sub_20E86D37C();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v14 + 48))(v14, &v16);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v29 < 0)
    {
      operator delete(__p);
      if ((v27 & 0x80000000) == 0)
      {
LABEL_8:
        if (!v25)
        {
LABEL_14:
          if (v22 && v21 < 0)
            operator delete(v20);
          if (v19 < 0)
            operator delete(v17);
          if (v9)
            free(v9);
          goto LABEL_21;
        }
LABEL_12:
        if (v24 < 0)
          operator delete(v23);
        goto LABEL_14;
      }
    }
    else if ((v27 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(v26);
    if (!v25)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_21:
  if (os_signpost_enabled((os_log_t)*v6))
  {
    LODWORD(v16) = 67109376;
    HIDWORD(v16) = a1;
    LOWORD(v17) = 1024;
    *(_DWORD *)((char *)&v17 + 2) = a2;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  kdebug_trace();
  if (a3)
  {
    if (!*(_BYTE *)(a3 + 80)
      && (!*(_BYTE *)(a3 + 200) || !*(_QWORD *)(a3 + 184) || *(_QWORD *)(a3 + 136) == *(_QWORD *)(a3 + 144)))
    {
LABEL_39:
      if (!*(_BYTE *)(a3 + 200) || !*(_QWORD *)(a3 + 184) || *(_QWORD *)(a3 + 136) == *(_QWORD *)(a3 + 144))
        return;
      goto LABEL_42;
    }
    sub_20F43D608((uint64_t)&v16);
    if (*(_BYTE *)(a3 + 80))
      sub_20FDBBC20(a3, (unsigned __int8 *)&v16, (double)a1);
    if (*(_BYTE *)(a3 + 200) && *(_QWORD *)(a3 + 184) && *(_QWORD *)(a3 + 136) != *(_QWORD *)(a3 + 144))
      sub_210214860(a3 + 88, (uint64_t)&v16, (double)a1);
    if (v18 < 0)
    {
      operator delete(v16);
      if (!*(_BYTE *)(a3 + 80))
        goto LABEL_39;
    }
    else if (!*(_BYTE *)(a3 + 80))
    {
      goto LABEL_39;
    }
LABEL_42:
    sub_20F43D7E0((uint64_t)&v16);
    if (*(_BYTE *)(a3 + 80))
      sub_20FDBBC20(a3, (unsigned __int8 *)&v16, (double)a2);
    if (*(_BYTE *)(a3 + 200) && *(_QWORD *)(a3 + 184) && *(_QWORD *)(a3 + 136) != *(_QWORD *)(a3 + 144))
      sub_210214860(a3 + 88, (uint64_t)&v16, (double)a2);
    if (v18 < 0)
      operator delete(v16);
  }
}

void sub_20F442668(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, void *a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a20 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20F442750(unint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  unsigned __int8 v5;
  char *v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  __uint64_t v13[2];
  void *v14[2];
  char v15;
  char v16;
  void *v17;
  char v18;
  char v19;
  void *v20;
  char v21;
  char v22;
  void *v23;
  char v24;
  void *__p;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v4 = sub_210219C18();
  v5 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    LODWORD(v14[0]) = 67109120;
    HIDWORD(v14[0]) = a1;
    v7 = (char *)_os_log_send_and_compose_impl();
    v8 = strlen(v7);
    v13[0] = 0;
    pthread_threadid_np(0, v13);
    v9 = v13[0];
    timespec_get((timespec *)v13, 1);
    sub_210219E20(v14, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v4 + 1), (__int128 *)(v4 + 5), "ACL:FREAK:R: NAR:%u", 0x13uLL, v7, v8, v9, v13);
    std::mutex::lock(&stru_254A5A410);
    v10 = qword_254A5A458;
    for (i = unk_254A5A460; v10 != i; v10 += 40)
    {
      v12 = *(_QWORD *)(v10 + 32);
      if (!v12)
        sub_20E86D37C();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v12 + 48))(v12, v14);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v26 < 0)
    {
      operator delete(__p);
      if ((v24 & 0x80000000) == 0)
      {
LABEL_8:
        if (!v22)
        {
LABEL_14:
          if (v19 && v18 < 0)
            operator delete(v17);
          if (v16 < 0)
            operator delete(v14[1]);
          if (v7)
            free(v7);
          goto LABEL_21;
        }
LABEL_12:
        if (v21 < 0)
          operator delete(v20);
        goto LABEL_14;
      }
    }
    else if ((v24 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(v23);
    if (!v22)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_21:
  if (os_signpost_enabled((os_log_t)*v4))
  {
    LODWORD(v14[0]) = 67109120;
    HIDWORD(v14[0]) = a1;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  kdebug_trace();
  if (a2
    && (*(_BYTE *)(a2 + 80)
     || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144)))
  {
    sub_20F43D9B8((uint64_t)v14);
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, (unsigned __int8 *)v14, (double)a1);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, (uint64_t)v14, (double)a1);
    if (v15 < 0)
      operator delete(v14[0]);
  }
}

void sub_20F442AC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, void *a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a20 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20F442BAC(unint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  unsigned __int8 v5;
  char *v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  __uint64_t v13[2];
  void *v14[2];
  char v15;
  char v16;
  void *v17;
  char v18;
  char v19;
  void *v20;
  char v21;
  char v22;
  void *v23;
  char v24;
  void *__p;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v4 = sub_210219C18();
  v5 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    LODWORD(v14[0]) = 67109120;
    HIDWORD(v14[0]) = a1;
    v7 = (char *)_os_log_send_and_compose_impl();
    v8 = strlen(v7);
    v13[0] = 0;
    pthread_threadid_np(0, v13);
    v9 = v13[0];
    timespec_get((timespec *)v13, 1);
    sub_210219E20(v14, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v4 + 1), (__int128 *)(v4 + 5), "ACL:ML:R: NAR:%u", 0x10uLL, v7, v8, v9, v13);
    std::mutex::lock(&stru_254A5A410);
    v10 = qword_254A5A458;
    for (i = unk_254A5A460; v10 != i; v10 += 40)
    {
      v12 = *(_QWORD *)(v10 + 32);
      if (!v12)
        sub_20E86D37C();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v12 + 48))(v12, v14);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v26 < 0)
    {
      operator delete(__p);
      if ((v24 & 0x80000000) == 0)
      {
LABEL_8:
        if (!v22)
        {
LABEL_14:
          if (v19 && v18 < 0)
            operator delete(v17);
          if (v16 < 0)
            operator delete(v14[1]);
          if (v7)
            free(v7);
          goto LABEL_21;
        }
LABEL_12:
        if (v21 < 0)
          operator delete(v20);
        goto LABEL_14;
      }
    }
    else if ((v24 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(v23);
    if (!v22)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_21:
  if (os_signpost_enabled((os_log_t)*v4))
  {
    LODWORD(v14[0]) = 67109120;
    HIDWORD(v14[0]) = a1;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  kdebug_trace();
  if (a2
    && (*(_BYTE *)(a2 + 80)
     || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144)))
  {
    sub_20F43DB90((uint64_t)v14);
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, (unsigned __int8 *)v14, (double)a1);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, (uint64_t)v14, (double)a1);
    if (v15 < 0)
      operator delete(v14[0]);
  }
}

void sub_20F442F24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, void *a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a20 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20F443008(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  int v15;
  _QWORD *v16;
  int v17;
  std::chrono::steady_clock::time_point v18;
  std::chrono::steady_clock::time_point *v19;
  uint64_t *v20;
  unsigned __int8 v21;
  size_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  uint64_t v27;
  unsigned __int8 v28;
  _QWORD *v29;
  _QWORD *v30;
  char *v31;
  __uint64_t v32[2];
  void *v33;
  void *v34;
  int v35;
  __int16 v36;
  int v37;
  char v38;
  void *v39;
  char v40;
  char v41;
  void *v42;
  char v43;
  char v44;
  void *v45;
  char v46;
  void *__p;
  char v48;
  uint64_t v49;

  v12 = a1;
  v49 = *MEMORY[0x24BDAC8D0];
  v13 = atomic_load((unsigned __int8 *)&qword_254A689A0);
  if ((v13 & 1) == 0)
  {
    a1 = __cxa_guard_acquire(&qword_254A689A0);
    if ((_DWORD)a1)
    {
      v29 = operator new(0x28uLL);
      v29[1] = 0;
      v29[2] = 0;
      *v29 = &off_24C9C4340;
      *((_BYTE *)v29 + 24) = 0;
      *((_BYTE *)v29 + 32) = 0;
      qword_254A689E0 = (uint64_t)(v29 + 3);
      qword_254A689E8 = (uint64_t)v29;
      unk_254A689F0 = 5000000000;
      __cxa_atexit((void (*)(void *))sub_20EAF5AE0, &qword_254A689E0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A689A0);
    }
  }
  v14 = atomic_load((unsigned __int8 *)&qword_254A689A8);
  if ((v14 & 1) == 0)
  {
    a1 = __cxa_guard_acquire(&qword_254A689A8);
    if ((_DWORD)a1)
    {
      qword_254A689C0 = 0;
      qword_254A689C8 = 0;
      v30 = operator new(0x40uLL);
      v30[1] = 0;
      v30[2] = 0;
      *((_BYTE *)v30 + 24) = 0;
      *v30 = &off_24CA00110;
      *((_BYTE *)v30 + 56) = 0;
      qword_254A689C0 = (uint64_t)(v30 + 3);
      qword_254A689C8 = (uint64_t)v30;
      __cxa_atexit((void (*)(void *))sub_20F446068, &qword_254A689C0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A689A8);
    }
  }
  v15 = sub_20F4460D0(a1, a2, a3, a4, a5, a6, a7, a8, v12, a2, a3, a4);
  v16 = (_QWORD *)qword_254A689E0;
  v17 = *(unsigned __int8 *)(qword_254A689E0 + 8);
  if (v15)
  {
    if (*(_BYTE *)(qword_254A689E0 + 8))
      *(_BYTE *)(qword_254A689E0 + 8) = 0;
    v18.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    goto LABEL_10;
  }
  v18.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  if (!v17)
  {
LABEL_10:
    v19 = (std::chrono::steady_clock::time_point *)qword_254A689E0;
    if (!*(_BYTE *)(qword_254A689E0 + 8))
      *(_BYTE *)(qword_254A689E0 + 8) = 1;
    goto LABEL_12;
  }
  if (v18.__d_.__rep_ - *v16 < 5000000000)
    goto LABEL_34;
  v19 = (std::chrono::steady_clock::time_point *)qword_254A689E0;
LABEL_12:
  v19->__d_.__rep_ = v18.__d_.__rep_;
  v20 = sub_210219C18();
  v21 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v21 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (!atomic_load(&qword_254A5A450))
    goto LABEL_32;
  v33 = (void *)__PAIR64__(v12, 67109888);
  LOWORD(v34) = 1024;
  *(_DWORD *)((char *)&v34 + 2) = a2;
  HIWORD(v34) = 1024;
  v35 = a3;
  v36 = 1024;
  v37 = a4;
  v31 = (char *)_os_log_send_and_compose_impl();
  v23 = strlen(v31);
  v32[0] = 0;
  pthread_threadid_np(0, v32);
  v24 = v32[0];
  timespec_get((timespec *)v32, 1);
  sub_210219E20(&v33, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v20 + 1), (__int128 *)(v20 + 5), "NLMP: NAS:%u, NLS:%u, NSWAS:%u, NSWLS:%u", 0x28uLL, v31, v23, v24, v32);
  std::mutex::lock(&stru_254A5A410);
  v25 = qword_254A5A458;
  for (i = unk_254A5A460; v25 != i; v25 += 40)
  {
    v27 = *(_QWORD *)(v25 + 32);
    if (!v27)
      sub_20E86D37C();
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v27 + 48))(v27, &v33);
  }
  std::mutex::unlock(&stru_254A5A410);
  if ((v48 & 0x80000000) == 0)
  {
    if ((v46 & 0x80000000) == 0)
      goto LABEL_19;
LABEL_22:
    operator delete(v45);
    if (!v44)
      goto LABEL_25;
LABEL_23:
    if (v43 < 0)
      operator delete(v42);
    goto LABEL_25;
  }
  operator delete(__p);
  if (v46 < 0)
    goto LABEL_22;
LABEL_19:
  if (v44)
    goto LABEL_23;
LABEL_25:
  if (v41 && v40 < 0)
    operator delete(v39);
  if (v38 < 0)
    operator delete(v34);
  if (v31)
    free(v31);
LABEL_32:
  if (os_signpost_enabled((os_log_t)*v20))
  {
    v33 = (void *)__PAIR64__(v12, 67109888);
    LOWORD(v34) = 1024;
    *(_DWORD *)((char *)&v34 + 2) = a2;
    HIWORD(v34) = 1024;
    v35 = a3;
    v36 = 1024;
    v37 = a4;
    _os_signpost_emit_unreliably_with_name_impl();
  }
LABEL_34:
  v28 = atomic_load((unsigned __int8 *)&qword_254A6D9C8);
  if ((v28 & 1) == 0 && __cxa_guard_acquire(&qword_254A6D9C8))
  {
    sub_20FCFB524();
    __cxa_atexit((void (*)(void *))sub_20FCFB238, &qword_254A6D9A0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6D9C8);
  }
  sub_210237040("NLMP: NAS:%u, NLS:%u, NSWAS:%u, NSWLS:%u", (std::string *)&v33, v12, a2, a3, a4);
  sub_20EA5C6C8((uint64_t)&v33, qword_254A6D9A8);
  if (SBYTE1(v37) < 0)
    operator delete(v33);
  kdebug_trace();
  if (a5)
  {
    if (!*(_BYTE *)(a5 + 80)
      && (!*(_BYTE *)(a5 + 200) || !*(_QWORD *)(a5 + 184) || *(_QWORD *)(a5 + 136) == *(_QWORD *)(a5 + 144)))
    {
LABEL_53:
      if (!*(_BYTE *)(a5 + 200) || !*(_QWORD *)(a5 + 184) || *(_QWORD *)(a5 + 136) == *(_QWORD *)(a5 + 144))
        goto LABEL_66;
      goto LABEL_56;
    }
    sub_20F43D080((uint64_t)&v33);
    if (*(_BYTE *)(a5 + 80))
      sub_20FDBBC20(a5, (unsigned __int8 *)&v33, (double)v12);
    if (*(_BYTE *)(a5 + 200) && *(_QWORD *)(a5 + 184) && *(_QWORD *)(a5 + 136) != *(_QWORD *)(a5 + 144))
      sub_210214860(a5 + 88, (uint64_t)&v33, (double)v12);
    if (SBYTE1(v37) < 0)
    {
      operator delete(v33);
      if (!*(_BYTE *)(a5 + 80))
        goto LABEL_53;
    }
    else if (!*(_BYTE *)(a5 + 80))
    {
      goto LABEL_53;
    }
LABEL_56:
    sub_20F43D258((uint64_t)&v33);
    if (*(_BYTE *)(a5 + 80))
      sub_20FDBBC20(a5, (unsigned __int8 *)&v33, (double)(unint64_t)a2);
    if (*(_BYTE *)(a5 + 200) && *(_QWORD *)(a5 + 184) && *(_QWORD *)(a5 + 136) != *(_QWORD *)(a5 + 144))
      sub_210214860(a5 + 88, (uint64_t)&v33, (double)(unint64_t)a2);
    if ((SBYTE1(v37) & 0x80000000) == 0)
    {
      if (!*(_BYTE *)(a5 + 80))
        goto LABEL_66;
LABEL_69:
      sub_20F43CAF8((uint64_t)&v33);
      if (*(_BYTE *)(a5 + 80))
        sub_20FDBBC20(a5, (unsigned __int8 *)&v33, (double)(unint64_t)a3);
      if (*(_BYTE *)(a5 + 200) && *(_QWORD *)(a5 + 184) && *(_QWORD *)(a5 + 136) != *(_QWORD *)(a5 + 144))
        sub_210214860(a5 + 88, (uint64_t)&v33, (double)(unint64_t)a3);
      if ((SBYTE1(v37) & 0x80000000) == 0)
      {
        if (!*(_BYTE *)(a5 + 80))
          goto LABEL_79;
LABEL_82:
        sub_20F43CCD0((uint64_t)&v33);
        if (*(_BYTE *)(a5 + 80))
          sub_20FDBBC20(a5, (unsigned __int8 *)&v33, (double)(unint64_t)a4);
        if (*(_BYTE *)(a5 + 200) && *(_QWORD *)(a5 + 184) && *(_QWORD *)(a5 + 136) != *(_QWORD *)(a5 + 144))
          sub_210214860(a5 + 88, (uint64_t)&v33, (double)(unint64_t)a4);
        if (SBYTE1(v37) < 0)
          operator delete(v33);
        return;
      }
      operator delete(v33);
      if (*(_BYTE *)(a5 + 80))
        goto LABEL_82;
LABEL_79:
      if (!*(_BYTE *)(a5 + 200) || !*(_QWORD *)(a5 + 184) || *(_QWORD *)(a5 + 136) == *(_QWORD *)(a5 + 144))
        return;
      goto LABEL_82;
    }
    operator delete(v33);
    if (*(_BYTE *)(a5 + 80))
      goto LABEL_69;
LABEL_66:
    if (!*(_BYTE *)(a5 + 200) || !*(_QWORD *)(a5 + 184) || *(_QWORD *)(a5 + 136) == *(_QWORD *)(a5 + 144))
      goto LABEL_79;
    goto LABEL_69;
  }
}

void sub_20F443774(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A6D9C8);
  _Unwind_Resume(a1);
}

void sub_20F44378C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A689A8);
  _Unwind_Resume(a1);
}

void sub_20F4437A4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A689A0);
  _Unwind_Resume(a1);
}

void sub_20F4437BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, void *a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a22 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20F4438B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  int v13;
  _QWORD *v14;
  int v15;
  std::chrono::steady_clock::time_point v16;
  std::chrono::steady_clock::time_point *v17;
  uint64_t *v18;
  unsigned __int8 v19;
  char *v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  __uint64_t v29[2];
  void *v30;
  void *v31;
  char v32;
  char v33;
  void *v34;
  char v35;
  char v36;
  void *v37;
  char v38;
  char v39;
  void *v40;
  char v41;
  void *__p;
  char v43;
  uint64_t v44;

  v10 = a1;
  v44 = *MEMORY[0x24BDAC8D0];
  v11 = atomic_load((unsigned __int8 *)&qword_254A689B0);
  if ((v11 & 1) == 0)
  {
    a1 = __cxa_guard_acquire(&qword_254A689B0);
    if ((_DWORD)a1)
    {
      v27 = operator new(0x28uLL);
      v27[1] = 0;
      v27[2] = 0;
      *v27 = &off_24C9C4340;
      *((_BYTE *)v27 + 24) = 0;
      *((_BYTE *)v27 + 32) = 0;
      qword_254A689F8 = (uint64_t)(v27 + 3);
      qword_254A68A00 = (uint64_t)v27;
      unk_254A68A08 = 5000000000;
      __cxa_atexit((void (*)(void *))sub_20EAF5AE0, &qword_254A689F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A689B0);
    }
  }
  v12 = atomic_load((unsigned __int8 *)&qword_254A689B8);
  if ((v12 & 1) == 0)
  {
    a1 = __cxa_guard_acquire(&qword_254A689B8);
    if ((_DWORD)a1)
    {
      qword_254A689D0 = 0;
      qword_254A689D8 = 0;
      v28 = operator new(0x30uLL);
      v28[1] = 0;
      v28[2] = 0;
      *((_BYTE *)v28 + 24) = 0;
      *v28 = &off_24CA00160;
      *((_BYTE *)v28 + 40) = 0;
      qword_254A689D0 = (uint64_t)(v28 + 3);
      qword_254A689D8 = (uint64_t)v28;
      __cxa_atexit((void (*)(void *))sub_20F44619C, &qword_254A689D0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A689B8);
    }
  }
  v13 = sub_20F446204(a1, a2, a3, a4, a5, a6, a7, a8, v10, a2);
  v14 = (_QWORD *)qword_254A689F8;
  v15 = *(unsigned __int8 *)(qword_254A689F8 + 8);
  if (v13)
  {
    if (*(_BYTE *)(qword_254A689F8 + 8))
      *(_BYTE *)(qword_254A689F8 + 8) = 0;
    v16.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    goto LABEL_10;
  }
  v16.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  if (!v15)
  {
LABEL_10:
    v17 = (std::chrono::steady_clock::time_point *)qword_254A689F8;
    if (!*(_BYTE *)(qword_254A689F8 + 8))
      *(_BYTE *)(qword_254A689F8 + 8) = 1;
    goto LABEL_12;
  }
  if (v16.__d_.__rep_ - *v14 < 5000000000)
    goto LABEL_34;
  v17 = (std::chrono::steady_clock::time_point *)qword_254A689F8;
LABEL_12:
  v17->__d_.__rep_ = v16.__d_.__rep_;
  v18 = sub_210219C18();
  v19 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (!atomic_load(&qword_254A5A450))
    goto LABEL_32;
  LODWORD(v30) = 67109376;
  HIDWORD(v30) = v10;
  LOWORD(v31) = 1024;
  *(_DWORD *)((char *)&v31 + 2) = a2;
  v21 = (char *)_os_log_send_and_compose_impl();
  v22 = strlen(v21);
  v29[0] = 0;
  pthread_threadid_np(0, v29);
  v23 = v29[0];
  timespec_get((timespec *)v29, 1);
  sub_210219E20(&v30, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v18 + 1), (__int128 *)(v18 + 5), "NEMS: NES:%u, NSWES:%u", 0x16uLL, v21, v22, v23, v29);
  std::mutex::lock(&stru_254A5A410);
  v24 = qword_254A5A458;
  for (i = unk_254A5A460; v24 != i; v24 += 40)
  {
    v26 = *(_QWORD *)(v24 + 32);
    if (!v26)
      sub_20E86D37C();
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v26 + 48))(v26, &v30);
  }
  std::mutex::unlock(&stru_254A5A410);
  if ((v43 & 0x80000000) == 0)
  {
    if ((v41 & 0x80000000) == 0)
      goto LABEL_19;
LABEL_22:
    operator delete(v40);
    if (!v39)
      goto LABEL_25;
LABEL_23:
    if (v38 < 0)
      operator delete(v37);
    goto LABEL_25;
  }
  operator delete(__p);
  if (v41 < 0)
    goto LABEL_22;
LABEL_19:
  if (v39)
    goto LABEL_23;
LABEL_25:
  if (v36 && v35 < 0)
    operator delete(v34);
  if (v33 < 0)
    operator delete(v31);
  if (v21)
    free(v21);
LABEL_32:
  if (os_signpost_enabled((os_log_t)*v18))
  {
    LODWORD(v30) = 67109376;
    HIDWORD(v30) = v10;
    LOWORD(v31) = 1024;
    *(_DWORD *)((char *)&v31 + 2) = a2;
    _os_signpost_emit_unreliably_with_name_impl();
  }
LABEL_34:
  kdebug_trace();
  if (!a3)
    return;
  if (!*(_BYTE *)(a3 + 80)
    && (!*(_BYTE *)(a3 + 200) || !*(_QWORD *)(a3 + 184) || *(_QWORD *)(a3 + 136) == *(_QWORD *)(a3 + 144)))
  {
LABEL_50:
    if (!*(_BYTE *)(a3 + 200) || !*(_QWORD *)(a3 + 184) || *(_QWORD *)(a3 + 136) == *(_QWORD *)(a3 + 144))
      return;
    goto LABEL_53;
  }
  sub_20F43D430((uint64_t)&v30);
  if (*(_BYTE *)(a3 + 80))
    sub_20FDBBC20(a3, (unsigned __int8 *)&v30, (double)(unint64_t)v10);
  if (*(_BYTE *)(a3 + 200) && *(_QWORD *)(a3 + 184) && *(_QWORD *)(a3 + 136) != *(_QWORD *)(a3 + 144))
    sub_210214860(a3 + 88, (uint64_t)&v30, (double)(unint64_t)v10);
  if (v32 < 0)
  {
    operator delete(v30);
    if (!*(_BYTE *)(a3 + 80))
      goto LABEL_50;
  }
  else if (!*(_BYTE *)(a3 + 80))
  {
    goto LABEL_50;
  }
LABEL_53:
  sub_20F43CEA8((uint64_t)&v30);
  if (*(_BYTE *)(a3 + 80))
    sub_20FDBBC20(a3, (unsigned __int8 *)&v30, (double)(unint64_t)a2);
  if (*(_BYTE *)(a3 + 200) && *(_QWORD *)(a3 + 184) && *(_QWORD *)(a3 + 136) != *(_QWORD *)(a3 + 144))
    sub_210214860(a3 + 88, (uint64_t)&v30, (double)(unint64_t)a2);
  if (v32 < 0)
    operator delete(v30);
}

void sub_20F443E44(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A689B8);
  _Unwind_Resume(a1);
}

void sub_20F443E5C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A689B0);
  _Unwind_Resume(a1);
}

void sub_20F443E74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, void *a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a20 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20F443F5C(unint64_t a1, unint64_t a2, uint64_t a3)
{
  double v4;
  double v5;
  void *__p[2];
  char v7;

  v4 = (double)a1;
  v5 = (double)a2;
  kdebug_trace();
  if (!a3)
    return;
  if (!*(_BYTE *)(a3 + 80)
    && (!*(_BYTE *)(a3 + 200) || !*(_QWORD *)(a3 + 184) || *(_QWORD *)(a3 + 136) == *(_QWORD *)(a3 + 144)))
  {
    goto LABEL_17;
  }
  sub_20F440F30((uint64_t)__p);
  if (*(_BYTE *)(a3 + 80))
    sub_20FDBBC20(a3, (unsigned __int8 *)__p, v4);
  if (*(_BYTE *)(a3 + 200) && *(_QWORD *)(a3 + 184) && *(_QWORD *)(a3 + 136) != *(_QWORD *)(a3 + 144))
    sub_210214860(a3 + 88, (uint64_t)__p, v4);
  if (v7 < 0)
  {
    operator delete(__p[0]);
    if (!*(_BYTE *)(a3 + 80))
    {
LABEL_17:
      if (!*(_BYTE *)(a3 + 200) || !*(_QWORD *)(a3 + 184) || *(_QWORD *)(a3 + 136) == *(_QWORD *)(a3 + 144))
        return;
    }
  }
  else if (!*(_BYTE *)(a3 + 80))
  {
    goto LABEL_17;
  }
  sub_20F441108((uint64_t)__p);
  if (*(_BYTE *)(a3 + 80))
    sub_20FDBBC20(a3, (unsigned __int8 *)__p, v5);
  if (*(_BYTE *)(a3 + 200) && *(_QWORD *)(a3 + 184) && *(_QWORD *)(a3 + 136) != *(_QWORD *)(a3 + 144))
    sub_210214860(a3 + 88, (uint64_t)__p, v5);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_20F4440D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F4440F8(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  unsigned __int8 v7;
  char *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  __uint64_t v15[2];
  void *v16;
  void *v17;
  char v18;
  char v19;
  void *v20;
  char v21;
  char v22;
  void *v23;
  char v24;
  char v25;
  void *v26;
  char v27;
  void *__p;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v6 = sub_210219C18();
  v7 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    LODWORD(v16) = 67109376;
    HIDWORD(v16) = a1;
    LOWORD(v17) = 1024;
    *(_DWORD *)((char *)&v17 + 2) = a2;
    v9 = (char *)_os_log_send_and_compose_impl();
    v10 = strlen(v9);
    v15[0] = 0;
    pthread_threadid_np(0, v15);
    v11 = v15[0];
    timespec_get((timespec *)v15, 1);
    sub_210219E20(&v16, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v6 + 1), (__int128 *)(v6 + 5), "NPO: NSAC:%u, NSOC:%u", 0x15uLL, v9, v10, v11, v15);
    std::mutex::lock(&stru_254A5A410);
    v12 = qword_254A5A458;
    for (i = unk_254A5A460; v12 != i; v12 += 40)
    {
      v14 = *(_QWORD *)(v12 + 32);
      if (!v14)
        sub_20E86D37C();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v14 + 48))(v14, &v16);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v29 < 0)
    {
      operator delete(__p);
      if ((v27 & 0x80000000) == 0)
      {
LABEL_8:
        if (!v25)
        {
LABEL_14:
          if (v22 && v21 < 0)
            operator delete(v20);
          if (v19 < 0)
            operator delete(v17);
          if (v9)
            free(v9);
          goto LABEL_21;
        }
LABEL_12:
        if (v24 < 0)
          operator delete(v23);
        goto LABEL_14;
      }
    }
    else if ((v27 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(v26);
    if (!v25)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_21:
  if (os_signpost_enabled((os_log_t)*v6))
  {
    LODWORD(v16) = 67109376;
    HIDWORD(v16) = a1;
    LOWORD(v17) = 1024;
    *(_DWORD *)((char *)&v17 + 2) = a2;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  kdebug_trace();
  if (a3)
  {
    if (!*(_BYTE *)(a3 + 80)
      && (!*(_BYTE *)(a3 + 200) || !*(_QWORD *)(a3 + 184) || *(_QWORD *)(a3 + 136) == *(_QWORD *)(a3 + 144)))
    {
LABEL_39:
      if (!*(_BYTE *)(a3 + 200) || !*(_QWORD *)(a3 + 184) || *(_QWORD *)(a3 + 136) == *(_QWORD *)(a3 + 144))
        return;
      goto LABEL_42;
    }
    sub_20F4412E0((uint64_t)&v16);
    if (*(_BYTE *)(a3 + 80))
      sub_20FDBBC20(a3, (unsigned __int8 *)&v16, (double)a1);
    if (*(_BYTE *)(a3 + 200) && *(_QWORD *)(a3 + 184) && *(_QWORD *)(a3 + 136) != *(_QWORD *)(a3 + 144))
      sub_210214860(a3 + 88, (uint64_t)&v16, (double)a1);
    if (v18 < 0)
    {
      operator delete(v16);
      if (!*(_BYTE *)(a3 + 80))
        goto LABEL_39;
    }
    else if (!*(_BYTE *)(a3 + 80))
    {
      goto LABEL_39;
    }
LABEL_42:
    sub_20F4414B8((uint64_t)&v16);
    if (*(_BYTE *)(a3 + 80))
      sub_20FDBBC20(a3, (unsigned __int8 *)&v16, (double)a2);
    if (*(_BYTE *)(a3 + 200) && *(_QWORD *)(a3 + 184) && *(_QWORD *)(a3 + 136) != *(_QWORD *)(a3 + 144))
      sub_210214860(a3 + 88, (uint64_t)&v16, (double)a2);
    if (v18 < 0)
      operator delete(v16);
  }
}

void sub_20F44451C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, void *a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a20 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20F444604(uint64_t a1, double a2, double a3)
{
  uint64_t *v6;
  unsigned __int8 v7;
  char *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  __uint64_t v15[2];
  _BYTE v16[22];
  char v17;
  char v18;
  void *v19;
  char v20;
  char v21;
  void *v22;
  char v23;
  char v24;
  void *v25;
  char v26;
  void *__p;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v6 = sub_210219C18();
  v7 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    *(_DWORD *)v16 = 134218240;
    *(double *)&v16[4] = a2;
    *(_WORD *)&v16[12] = 2048;
    *(double *)&v16[14] = a3;
    v9 = (char *)_os_log_send_and_compose_impl();
    v10 = strlen(v9);
    v15[0] = 0;
    pthread_threadid_np(0, v15);
    v11 = v15[0];
    timespec_get((timespec *)v15, 1);
    sub_210219E20(v16, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v6 + 1), (__int128 *)(v6 + 5), "LC:CP: CD: %f, CR: %f ", 0x16uLL, v9, v10, v11, v15);
    std::mutex::lock(&stru_254A5A410);
    v12 = qword_254A5A458;
    for (i = unk_254A5A460; v12 != i; v12 += 40)
    {
      v14 = *(_QWORD *)(v12 + 32);
      if (!v14)
        sub_20E86D37C();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v14 + 48))(v14, v16);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v28 < 0)
    {
      operator delete(__p);
      if ((v26 & 0x80000000) == 0)
      {
LABEL_8:
        if (!v24)
        {
LABEL_14:
          if (v21 && v20 < 0)
            operator delete(v19);
          if (v18 < 0)
            operator delete(*(void **)&v16[8]);
          if (v9)
            free(v9);
          goto LABEL_21;
        }
LABEL_12:
        if (v23 < 0)
          operator delete(v22);
        goto LABEL_14;
      }
    }
    else if ((v26 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(v25);
    if (!v24)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_21:
  if (os_signpost_enabled((os_log_t)*v6))
  {
    *(_DWORD *)v16 = 134218240;
    *(double *)&v16[4] = a2;
    *(_WORD *)&v16[12] = 2048;
    *(double *)&v16[14] = a3;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  if (a1)
  {
    if (!*(_BYTE *)(a1 + 80)
      && (!*(_BYTE *)(a1 + 200) || !*(_QWORD *)(a1 + 184) || *(_QWORD *)(a1 + 136) == *(_QWORD *)(a1 + 144)))
    {
LABEL_39:
      if (!*(_BYTE *)(a1 + 200) || !*(_QWORD *)(a1 + 184) || *(_QWORD *)(a1 + 136) == *(_QWORD *)(a1 + 144))
        return;
      goto LABEL_42;
    }
    sub_20F441690((uint64_t)v16);
    if (*(_BYTE *)(a1 + 80))
      sub_20FDBBC20(a1, v16, a2);
    if (*(_BYTE *)(a1 + 200) && *(_QWORD *)(a1 + 184) && *(_QWORD *)(a1 + 136) != *(_QWORD *)(a1 + 144))
      sub_210214860(a1 + 88, (uint64_t)v16, a2);
    if (v17 < 0)
    {
      operator delete(*(void **)v16);
      if (!*(_BYTE *)(a1 + 80))
        goto LABEL_39;
    }
    else if (!*(_BYTE *)(a1 + 80))
    {
      goto LABEL_39;
    }
LABEL_42:
    sub_20F441868((uint64_t)v16);
    if (*(_BYTE *)(a1 + 80))
      sub_20FDBBC20(a1, v16, a3);
    if (*(_BYTE *)(a1 + 200) && *(_QWORD *)(a1 + 184) && *(_QWORD *)(a1 + 136) != *(_QWORD *)(a1 + 144))
      sub_210214860(a1 + 88, (uint64_t)v16, a3);
    if (v17 < 0)
      operator delete(*(void **)v16);
  }
}

void sub_20F444A04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, void *a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a20 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20F444ADC(unint64_t a1, unint64_t a2, uint64_t a3)
{
  double v5;
  BOOL v6;
  BOOL v7;
  void *__p[2];
  char v9;

  if (!*(_BYTE *)(a3 + 80))
  {
    v6 = !*(_BYTE *)(a3 + 200) || *(_QWORD *)(a3 + 184) == 0;
    if (v6 || *(_QWORD *)(a3 + 136) == *(_QWORD *)(a3 + 144))
    {
LABEL_18:
      if (*(_BYTE *)(a3 + 200))
        v7 = *(_QWORD *)(a3 + 184) == 0;
      else
        v7 = 1;
      if (v7 || *(_QWORD *)(a3 + 136) == *(_QWORD *)(a3 + 144))
        return;
      goto LABEL_23;
    }
  }
  v5 = (double)a1;
  sub_20F43DD68((uint64_t)__p);
  if (*(_BYTE *)(a3 + 80))
    sub_20FDBBC20(a3, (unsigned __int8 *)__p, v5);
  if (*(_BYTE *)(a3 + 200) && *(_QWORD *)(a3 + 184) && *(_QWORD *)(a3 + 136) != *(_QWORD *)(a3 + 144))
    sub_210214860(a3 + 88, (uint64_t)__p, v5);
  if (v9 < 0)
  {
    operator delete(__p[0]);
    if (!*(_BYTE *)(a3 + 80))
      goto LABEL_18;
  }
  else if (!*(_BYTE *)(a3 + 80))
  {
    goto LABEL_18;
  }
LABEL_23:
  sub_20F43DF40((uint64_t)__p);
  if (*(_BYTE *)(a3 + 80))
    sub_20FDBBC20(a3, (unsigned __int8 *)__p, (double)a2);
  if (*(_BYTE *)(a3 + 200) && *(_QWORD *)(a3 + 184) && *(_QWORD *)(a3 + 136) != *(_QWORD *)(a3 + 144))
    sub_210214860(a3 + 88, (uint64_t)__p, (double)a2);
  if (v9 < 0)
    operator delete(__p[0]);
}

void sub_20F444C40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F444C60(unint64_t a1, unint64_t a2, uint64_t a3)
{
  double v6;
  double v7;
  BOOL v8;
  double v9;
  double v10;
  void *__p[2];
  char v12;

  v6 = (double)a2;
  if (!*(_BYTE *)(a3 + 80)
    && (*(_BYTE *)(a3 + 200) ? (v8 = *(_QWORD *)(a3 + 184) == 0) : (v8 = 1),
        v8 || *(_QWORD *)(a3 + 136) == *(_QWORD *)(a3 + 144)))
  {
    v7 = (double)a1;
    if (!*(_BYTE *)(a3 + 200))
      goto LABEL_32;
  }
  else
  {
    sub_20F43E118((uint64_t)__p);
    if (*(_BYTE *)(a3 + 80))
      sub_20FDBBC20(a3, (unsigned __int8 *)__p, v6);
    if (*(_BYTE *)(a3 + 200) && *(_QWORD *)(a3 + 184) && *(_QWORD *)(a3 + 136) != *(_QWORD *)(a3 + 144))
      sub_210214860(a3 + 88, (uint64_t)__p, v6);
    if (v12 < 0)
    {
      operator delete(__p[0]);
      v7 = (double)a1;
      if (*(_BYTE *)(a3 + 80))
        goto LABEL_22;
    }
    else
    {
      v7 = (double)a1;
      if (*(_BYTE *)(a3 + 80))
        goto LABEL_22;
    }
    if (!*(_BYTE *)(a3 + 200))
      goto LABEL_32;
  }
  if (!*(_QWORD *)(a3 + 184) || *(_QWORD *)(a3 + 136) == *(_QWORD *)(a3 + 144))
  {
LABEL_32:
    if (!*(_BYTE *)(a3 + 200) || !*(_QWORD *)(a3 + 184) || *(_QWORD *)(a3 + 136) == *(_QWORD *)(a3 + 144))
      return;
    goto LABEL_35;
  }
LABEL_22:
  sub_20F43E2F0((uint64_t)__p);
  if (*(_BYTE *)(a3 + 80))
    sub_20FDBBC20(a3, (unsigned __int8 *)__p, v7);
  if (*(_BYTE *)(a3 + 200) && *(_QWORD *)(a3 + 184) && *(_QWORD *)(a3 + 136) != *(_QWORD *)(a3 + 144))
    sub_210214860(a3 + 88, (uint64_t)__p, v7);
  if (v12 < 0)
  {
    operator delete(__p[0]);
    if (!*(_BYTE *)(a3 + 80))
      goto LABEL_32;
  }
  else if (!*(_BYTE *)(a3 + 80))
  {
    goto LABEL_32;
  }
LABEL_35:
  v9 = 1.0;
  if (a2)
    v9 = v6;
  v10 = v7 / v9;
  sub_20F43E4C8((uint64_t)__p);
  if (*(_BYTE *)(a3 + 80))
    sub_20FDBBC20(a3, (unsigned __int8 *)__p, v10);
  if (*(_BYTE *)(a3 + 200) && *(_QWORD *)(a3 + 184) && *(_QWORD *)(a3 + 136) != *(_QWORD *)(a3 + 144))
    sub_210214860(a3 + 88, (uint64_t)__p, v10);
  if (v12 < 0)
    operator delete(__p[0]);
}

void sub_20F444E7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F444EA0(unsigned int a1, unsigned int a2, uint64_t a3)
{
  double v5;
  BOOL v6;
  BOOL v7;
  void *__p[2];
  char v9;

  if (!*(_BYTE *)(a3 + 80))
  {
    v6 = !*(_BYTE *)(a3 + 200) || *(_QWORD *)(a3 + 184) == 0;
    if (v6 || *(_QWORD *)(a3 + 136) == *(_QWORD *)(a3 + 144))
    {
LABEL_18:
      if (*(_BYTE *)(a3 + 200))
        v7 = *(_QWORD *)(a3 + 184) == 0;
      else
        v7 = 1;
      if (v7 || *(_QWORD *)(a3 + 136) == *(_QWORD *)(a3 + 144))
        return;
      goto LABEL_23;
    }
  }
  v5 = (double)a1;
  sub_20F43E6A0((uint64_t)__p);
  if (*(_BYTE *)(a3 + 80))
    sub_20FDBBC20(a3, (unsigned __int8 *)__p, v5);
  if (*(_BYTE *)(a3 + 200) && *(_QWORD *)(a3 + 184) && *(_QWORD *)(a3 + 136) != *(_QWORD *)(a3 + 144))
    sub_210214860(a3 + 88, (uint64_t)__p, v5);
  if (v9 < 0)
  {
    operator delete(__p[0]);
    if (!*(_BYTE *)(a3 + 80))
      goto LABEL_18;
  }
  else if (!*(_BYTE *)(a3 + 80))
  {
    goto LABEL_18;
  }
LABEL_23:
  sub_20F43E878((uint64_t)__p);
  if (*(_BYTE *)(a3 + 80))
    sub_20FDBBC20(a3, (unsigned __int8 *)__p, (double)a2);
  if (*(_BYTE *)(a3 + 200) && *(_QWORD *)(a3 + 184) && *(_QWORD *)(a3 + 136) != *(_QWORD *)(a3 + 144))
    sub_210214860(a3 + 88, (uint64_t)__p, (double)a2);
  if (v9 < 0)
    operator delete(__p[0]);
}

void sub_20F445004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F445024(uint64_t a1, double a2)
{
  BOOL v4;
  void *__p[2];
  char v6;

  if (*(_BYTE *)(a1 + 80)
    || (*(_BYTE *)(a1 + 200) ? (v4 = *(_QWORD *)(a1 + 184) == 0) : (v4 = 1),
        !v4 && *(_QWORD *)(a1 + 136) != *(_QWORD *)(a1 + 144)))
  {
    sub_20F43EA50((uint64_t)__p);
    if (*(_BYTE *)(a1 + 80))
      sub_20FDBBC20(a1, (unsigned __int8 *)__p, a2);
    if (*(_BYTE *)(a1 + 200) && *(_QWORD *)(a1 + 184) && *(_QWORD *)(a1 + 136) != *(_QWORD *)(a1 + 144))
      sub_210214860(a1 + 88, (uint64_t)__p, a2);
    if (v6 < 0)
      operator delete(__p[0]);
  }
}

void sub_20F4450F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F44510C(unsigned int a1, uint64_t a2)
{
  double v3;
  BOOL v4;
  void *__p[2];
  char v6;

  if (*(_BYTE *)(a2 + 80)
    || (*(_BYTE *)(a2 + 200) ? (v4 = *(_QWORD *)(a2 + 184) == 0) : (v4 = 1),
        !v4 && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144)))
  {
    v3 = (double)a1;
    sub_20F43EC28((uint64_t)__p);
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, (unsigned __int8 *)__p, v3);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, (uint64_t)__p, v3);
    if (v6 < 0)
      operator delete(__p[0]);
  }
}

void sub_20F4451D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F4451F4(unsigned int a1, uint64_t a2)
{
  double v3;
  BOOL v4;
  void *__p[2];
  char v6;

  if (*(_BYTE *)(a2 + 80)
    || (*(_BYTE *)(a2 + 200) ? (v4 = *(_QWORD *)(a2 + 184) == 0) : (v4 = 1),
        !v4 && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144)))
  {
    v3 = (double)a1;
    sub_20F43EE00((uint64_t)__p);
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, (unsigned __int8 *)__p, v3);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, (uint64_t)__p, v3);
    if (v6 < 0)
      operator delete(__p[0]);
  }
}

void sub_20F4452C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F4452DC(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  double v5;
  double v6;
  double v7;
  void *__p[2];
  char v9;
  void *v10[2];
  char v11;
  void *v12[2];
  char v13;

  if (*(_BYTE *)(a2 + 80)
    || (*(_BYTE *)(a2 + 200) ? (v4 = *(_QWORD *)(a2 + 184) == 0) : (v4 = 1),
        !v4 && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144)))
  {
    if (*(_BYTE *)(a1 + 48))
    {
      sub_20F43EFD8((uint64_t)v12);
      sub_20F43F1B0((uint64_t)v10);
      sub_20F43F388((uint64_t)__p);
    }
    else
    {
      sub_20F43FAE8((uint64_t)v12);
      sub_20F43FCC0((uint64_t)v10);
      sub_20F43FE98((uint64_t)__p);
    }
    v5 = *(double *)(a1 + 24);
    if (v5 >= 0.0)
    {
      if (*(_BYTE *)(a2 + 80))
        sub_20FDBBC20(a2, (unsigned __int8 *)v12, *(double *)(a1 + 24));
      if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
        sub_210214860(a2 + 88, (uint64_t)v12, v5);
    }
    v6 = *(double *)(a1 + 32);
    if (v6 >= 0.0)
    {
      if (*(_BYTE *)(a2 + 80))
        sub_20FDBBC20(a2, (unsigned __int8 *)v10, *(double *)(a1 + 32));
      if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
        sub_210214860(a2 + 88, (uint64_t)v10, v6);
    }
    v7 = *(double *)(a1 + 40);
    if (v7 >= 0.0)
    {
      if (*(_BYTE *)(a2 + 80))
        sub_20FDBBC20(a2, (unsigned __int8 *)__p, *(double *)(a1 + 40));
      if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
        sub_210214860(a2 + 88, (uint64_t)__p, v7);
    }
    if (v9 < 0)
    {
      operator delete(__p[0]);
      if ((v11 & 0x80000000) == 0)
      {
LABEL_34:
        if ((v13 & 0x80000000) == 0)
          return;
        goto LABEL_38;
      }
    }
    else if ((v11 & 0x80000000) == 0)
    {
      goto LABEL_34;
    }
    operator delete(v10[0]);
    if ((v13 & 0x80000000) == 0)
      return;
LABEL_38:
    operator delete(v12[0]);
  }
}

void sub_20F4454B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a27 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a27 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a22);
  _Unwind_Resume(exception_object);
}

void sub_20F44552C(uint64_t a1, uint64_t a2)
{
  int v4;
  BOOL v5;
  double v6;
  double v7;
  double v8;
  double v9;
  void *v10[2];
  char v11;
  void *v12[2];
  char v13;
  void *v14[2];
  char v15;
  void *__p[2];
  char v17;

  if (*(_BYTE *)(a2 + 80)
    || (*(_BYTE *)(a2 + 200) ? (v5 = *(_QWORD *)(a2 + 184) == 0) : (v5 = 1),
        !v5 && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144)))
  {
    v4 = *(unsigned __int8 *)(a1 + 48);
    if (*(_BYTE *)(a1 + 48))
    {
      sub_20F43F560((uint64_t)v14);
      sub_20F43F738((uint64_t)v12);
      sub_20F43F910((uint64_t)v10);
    }
    else
    {
      sub_20F440070((uint64_t)v14);
      sub_20F440248((uint64_t)v12);
      sub_20F440420((uint64_t)v10);
    }
    v6 = *(double *)(a1 + 24);
    if (v6 >= 0.0)
    {
      if (*(_BYTE *)(a2 + 80))
        sub_20FDBBC20(a2, (unsigned __int8 *)v14, *(double *)(a1 + 24));
      if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
        sub_210214860(a2 + 88, (uint64_t)v14, v6);
    }
    v7 = *(double *)(a1 + 32);
    if (v7 >= 0.0)
    {
      if (*(_BYTE *)(a2 + 80))
        sub_20FDBBC20(a2, (unsigned __int8 *)v12, *(double *)(a1 + 32));
      if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
        sub_210214860(a2 + 88, (uint64_t)v12, v7);
    }
    v8 = *(double *)(a1 + 40);
    if (v8 >= 0.0)
    {
      if (*(_BYTE *)(a2 + 80))
        sub_20FDBBC20(a2, (unsigned __int8 *)v10, *(double *)(a1 + 40));
      if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
        sub_210214860(a2 + 88, (uint64_t)v10, v8);
    }
    if (v4)
    {
      v9 = *(_QWORD *)a1 == *(_QWORD *)(a1 + 8) ? 0.0 : 1.0;
      if (*(_BYTE *)(a2 + 80)
        || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      {
        sub_20F4405F8((uint64_t)__p);
        if (*(_BYTE *)(a2 + 80))
          sub_20FDBBC20(a2, (unsigned __int8 *)__p, v9);
        if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
          sub_210214860(a2 + 88, (uint64_t)__p, v9);
        if (v17 < 0)
          operator delete(__p[0]);
      }
    }
    if (v11 < 0)
    {
      operator delete(v10[0]);
      if ((v13 & 0x80000000) == 0)
      {
LABEL_50:
        if ((v15 & 0x80000000) == 0)
          return;
        goto LABEL_54;
      }
    }
    else if ((v13 & 0x80000000) == 0)
    {
      goto LABEL_50;
    }
    operator delete(v12[0]);
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_54:
    operator delete(v14[0]);
  }
}

void sub_20F4457B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a20 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a20 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a26 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a15);
  if ((a26 & 0x80000000) == 0)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(a21);
  _Unwind_Resume(exception_object);
}

void sub_20F445850(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4, uint64_t a5)
{
  double v10;
  double v11;
  double v12;
  double v13;
  _BOOL4 v14;
  _BOOL4 v15;
  uint64_t *v16;
  unsigned __int8 v17;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  char *v24;
  __uint64_t v25[2];
  void *v26;
  void *v27;
  unsigned int v28;
  __int16 v29;
  unsigned int v30;
  char v31;
  void *v32;
  char v33;
  char v34;
  void *v35;
  char v36;
  char v37;
  void *v38;
  char v39;
  void *__p;
  char v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v10 = (double)a1;
  v11 = (double)a2;
  v12 = (double)a3;
  v13 = (double)a4;
  kdebug_trace();
  v14 = a1 != 0;
  v15 = a2 != 0;
  if (!a2)
    v15 = (a3 | a4) != 0;
  if (!a1)
    v14 = v15;
  if (v14)
  {
    v16 = sub_210219C18();
    v17 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
    if (!atomic_load(&qword_254A5A450))
      goto LABEL_26;
    v26 = (void *)__PAIR64__(a1, 67109888);
    LOWORD(v27) = 1024;
    *(_DWORD *)((char *)&v27 + 2) = a2;
    HIWORD(v27) = 1024;
    v28 = a3;
    v29 = 1024;
    v30 = a4;
    v24 = (char *)_os_log_send_and_compose_impl();
    v19 = strlen(v24);
    v25[0] = 0;
    pthread_threadid_np(0, v25);
    v20 = v25[0];
    timespec_get((timespec *)v25, 1);
    sub_210219E20(&v26, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v16 + 1), (__int128 *)(v16 + 5), "MA:NAIM:NNA: %u, NUA: %u, NEA: %u, NRA: %u", 0x2AuLL, v24, v19, v20, v25);
    std::mutex::lock(&stru_254A5A410);
    v21 = qword_254A5A458;
    for (i = unk_254A5A460; v21 != i; v21 += 40)
    {
      v23 = *(_QWORD *)(v21 + 32);
      if (!v23)
        sub_20E86D37C();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v23 + 48))(v23, &v26);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v41 < 0)
    {
      operator delete(__p);
      if ((v39 & 0x80000000) == 0)
      {
LABEL_13:
        if (!v37)
        {
LABEL_19:
          if (v34 && v33 < 0)
            operator delete(v32);
          if (v31 < 0)
            operator delete(v27);
          if (v24)
            free(v24);
LABEL_26:
          if (os_signpost_enabled((os_log_t)*v16))
          {
            v26 = (void *)__PAIR64__(a1, 67109888);
            LOWORD(v27) = 1024;
            *(_DWORD *)((char *)&v27 + 2) = a2;
            HIWORD(v27) = 1024;
            v28 = a3;
            v29 = 1024;
            v30 = a4;
            _os_signpost_emit_unreliably_with_name_impl();
          }
          goto LABEL_28;
        }
LABEL_17:
        if (v36 < 0)
          operator delete(v35);
        goto LABEL_19;
      }
    }
    else if ((v39 & 0x80000000) == 0)
    {
      goto LABEL_13;
    }
    operator delete(v38);
    if (!v37)
      goto LABEL_19;
    goto LABEL_17;
  }
LABEL_28:
  if (!a5)
    return;
  if (!*(_BYTE *)(a5 + 80)
    && (!*(_BYTE *)(a5 + 200) || !*(_QWORD *)(a5 + 184) || *(_QWORD *)(a5 + 136) == *(_QWORD *)(a5 + 144)))
  {
LABEL_44:
    if (!*(_BYTE *)(a5 + 200) || !*(_QWORD *)(a5 + 184) || *(_QWORD *)(a5 + 136) == *(_QWORD *)(a5 + 144))
      goto LABEL_57;
    goto LABEL_47;
  }
  sub_20F4407D0((uint64_t)&v26);
  if (*(_BYTE *)(a5 + 80))
    sub_20FDBBC20(a5, (unsigned __int8 *)&v26, v10);
  if (*(_BYTE *)(a5 + 200) && *(_QWORD *)(a5 + 184) && *(_QWORD *)(a5 + 136) != *(_QWORD *)(a5 + 144))
    sub_210214860(a5 + 88, (uint64_t)&v26, v10);
  if (SBYTE1(v30) < 0)
  {
    operator delete(v26);
    if (!*(_BYTE *)(a5 + 80))
      goto LABEL_44;
  }
  else if (!*(_BYTE *)(a5 + 80))
  {
    goto LABEL_44;
  }
LABEL_47:
  sub_20F4409A8((uint64_t)&v26);
  if (*(_BYTE *)(a5 + 80))
    sub_20FDBBC20(a5, (unsigned __int8 *)&v26, v11);
  if (*(_BYTE *)(a5 + 200) && *(_QWORD *)(a5 + 184) && *(_QWORD *)(a5 + 136) != *(_QWORD *)(a5 + 144))
    sub_210214860(a5 + 88, (uint64_t)&v26, v11);
  if (SBYTE1(v30) < 0)
  {
    operator delete(v26);
    if (*(_BYTE *)(a5 + 80))
      goto LABEL_60;
  }
  else if (*(_BYTE *)(a5 + 80))
  {
    goto LABEL_60;
  }
LABEL_57:
  if (!*(_BYTE *)(a5 + 200) || !*(_QWORD *)(a5 + 184) || *(_QWORD *)(a5 + 136) == *(_QWORD *)(a5 + 144))
    goto LABEL_70;
LABEL_60:
  sub_20F440B80((uint64_t)&v26);
  if (*(_BYTE *)(a5 + 80))
    sub_20FDBBC20(a5, (unsigned __int8 *)&v26, v12);
  if (*(_BYTE *)(a5 + 200) && *(_QWORD *)(a5 + 184) && *(_QWORD *)(a5 + 136) != *(_QWORD *)(a5 + 144))
    sub_210214860(a5 + 88, (uint64_t)&v26, v12);
  if (SBYTE1(v30) < 0)
  {
    operator delete(v26);
    if (*(_BYTE *)(a5 + 80))
      goto LABEL_73;
LABEL_70:
    if (!*(_BYTE *)(a5 + 200) || !*(_QWORD *)(a5 + 184) || *(_QWORD *)(a5 + 136) == *(_QWORD *)(a5 + 144))
      return;
    goto LABEL_73;
  }
  if (!*(_BYTE *)(a5 + 80))
    goto LABEL_70;
LABEL_73:
  sub_20F440D58((uint64_t)&v26);
  if (*(_BYTE *)(a5 + 80))
    sub_20FDBBC20(a5, (unsigned __int8 *)&v26, v13);
  if (*(_BYTE *)(a5 + 200) && *(_QWORD *)(a5 + 184) && *(_QWORD *)(a5 + 136) != *(_QWORD *)(a5 + 144))
    sub_210214860(a5 + 88, (uint64_t)&v26, v13);
  if (SBYTE1(v30) < 0)
    operator delete(v26);
}

void sub_20F445DF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, void *a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a22 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20F445EE8(uint64_t a1, double a2, double a3)
{
  BOOL v6;
  BOOL v7;
  void *__p[2];
  char v9;

  if (!*(_BYTE *)(a1 + 80))
  {
    v6 = !*(_BYTE *)(a1 + 200) || *(_QWORD *)(a1 + 184) == 0;
    if (v6 || *(_QWORD *)(a1 + 136) == *(_QWORD *)(a1 + 144))
    {
LABEL_18:
      if (*(_BYTE *)(a1 + 200))
        v7 = *(_QWORD *)(a1 + 184) == 0;
      else
        v7 = 1;
      if (v7 || *(_QWORD *)(a1 + 136) == *(_QWORD *)(a1 + 144))
        return;
      goto LABEL_23;
    }
  }
  sub_20F441A40((uint64_t)__p);
  if (*(_BYTE *)(a1 + 80))
    sub_20FDBBC20(a1, (unsigned __int8 *)__p, a2);
  if (*(_BYTE *)(a1 + 200) && *(_QWORD *)(a1 + 184) && *(_QWORD *)(a1 + 136) != *(_QWORD *)(a1 + 144))
    sub_210214860(a1 + 88, (uint64_t)__p, a2);
  if (v9 < 0)
  {
    operator delete(__p[0]);
    if (!*(_BYTE *)(a1 + 80))
      goto LABEL_18;
  }
  else if (!*(_BYTE *)(a1 + 80))
  {
    goto LABEL_18;
  }
LABEL_23:
  sub_20F441C18((uint64_t)__p);
  if (*(_BYTE *)(a1 + 80))
    sub_20FDBBC20(a1, (unsigned __int8 *)__p, a3);
  if (*(_BYTE *)(a1 + 200) && *(_QWORD *)(a1 + 184) && *(_QWORD *)(a1 + 136) != *(_QWORD *)(a1 + 144))
    sub_210214860(a1 + 88, (uint64_t)__p, a3);
  if (v9 < 0)
    operator delete(__p[0]);
}

void sub_20F446048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F446068(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20F4460D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t result;

  v12 = qword_254A689C0;
  if (*(_BYTE *)(qword_254A689C0 + 32)
    && *(_QWORD *)qword_254A689C0 == a9
    && *(_QWORD *)(qword_254A689C0 + 8) == a10
    && *(_QWORD *)(qword_254A689C0 + 16) == a11
    && *(_QWORD *)(qword_254A689C0 + 24) == a12)
  {
    return 0;
  }
  *(_QWORD *)qword_254A689C0 = a9;
  *(_QWORD *)(v12 + 8) = a10;
  *(_QWORD *)(v12 + 16) = a11;
  *(_QWORD *)(v12 + 24) = a12;
  result = 1;
  *(_BYTE *)(v12 + 32) = 1;
  return result;
}

void sub_20F446154(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA00110;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20F446164(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA00110;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F44619C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20F446204(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t result;

  v10 = qword_254A689D0;
  if (*(_BYTE *)(qword_254A689D0 + 16) && *(_QWORD *)qword_254A689D0 == a9 && *(_QWORD *)(qword_254A689D0 + 8) == a10)
    return 0;
  *(_QWORD *)qword_254A689D0 = a9;
  *(_QWORD *)(v10 + 8) = a10;
  result = 1;
  *(_BYTE *)(v10 + 16) = 1;
  return result;
}

void sub_20F446264(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA00160;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20F446274(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA00160;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F4462AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  _BOOL4 v6;
  _BYTE v8[440];

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_QWORD *)(a1 + 152) = 0;
  sub_20FCC477C((_QWORD *)a1);
  *(_QWORD *)(a1 + 160) = -1;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_QWORD *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 200) = 1065353216;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 232) = a1 + 240;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_BYTE *)(a1 + 292) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_BYTE *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 296) = a1 + 304;
  *(_QWORD *)(a1 + 304) = 0;
  *(_BYTE *)(a1 + 356) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_BYTE *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_DWORD *)(a1 + 392) = 1065353216;
  *(_QWORD *)(a1 + 400) = -1;
  *(_BYTE *)(a1 + 408) = 0;
  *(_DWORD *)(a1 + 428) = 0;
  *(_QWORD *)(a1 + 412) = 0;
  *(_QWORD *)(a1 + 420) = 0;
  if (a1 != a2)
  {
    v4 = *(_QWORD *)(a2 + 424);
    if (v4 && *(_QWORD *)(v4 + 40) == *(_QWORD *)(v4 + 48))
    {
      v6 = *(_QWORD *)(a2 + 24) != 0;
      v5 = 1;
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
    sub_20F453BF4(a2, v5, 0, v6, (uint64_t)v8);
    sub_20F310B54(a1, (uint64_t)v8);
    sub_20E9545B0((uint64_t)v8);
  }
  return a1;
}

void sub_20F446418(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t **v6;
  void **v7;
  _QWORD **v8;
  _QWORD **v9;
  void *v11;

  sub_20F44646C(v6);
  sub_20E8C25A8(v4);
  sub_20E86872C(v5, *v9);
  sub_20E86872C(v3, *v8);
  v11 = *v7;
  if (*v7)
  {
    *(_QWORD *)(v1 + 216) = v11;
    operator delete(v11);
  }
  sub_20F4464B0(v2);
  sub_20E95469C(v1);
  _Unwind_Resume(a1);
}

uint64_t **sub_20F44646C(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_20E8E95B0(v2);
    MEMORY[0x212BC6398](v3, 0x20C40313AD07FLL);
  }
  return a1;
}

uint64_t sub_20F4464B0(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  void *v6;
  void *v7;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = (void *)v2[9];
      if (v6)
      {
        v2[10] = v6;
        operator delete(v6);
      }
      v7 = (void *)v2[6];
      if (v7)
      {
        v2[7] = v7;
        operator delete(v7);
      }
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void sub_20F446528(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t *v27;
  void *v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t *v31;
  __int128 *v32;
  unint64_t v33;
  unint64_t v34;
  size_t v35;
  int v36;
  BOOL v37;
  size_t v38;
  int v39;
  char v41;
  uint64_t **v42;
  void **v43;
  unint64_t v44;
  unint64_t v45;
  size_t v46;
  int v47;
  size_t v49;
  int v50;
  char v52;
  uint64_t **v53;
  void **v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  int v59;
  uint64_t *v60;
  _QWORD *v61;
  void *__src[2];
  uint64_t **v63;
  unint64_t *v64;
  __int128 v66[8];
  __int128 __dst;
  uint64_t *v68;
  _BYTE v69[305];
  __int128 *v70;
  _BYTE __s2[512];
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 8) = a3 + 16;
  v5 = a3 + 8;
  *(_QWORD *)(a3 + 24) = 0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_QWORD *)(a3 + 96) = 0;
  *(_BYTE *)(a3 + 104) = 3;
  *(_QWORD *)(a3 + 120) = 0;
  v6 = a3 + 120;
  *(_QWORD *)(a3 + 112) = a3 + 120;
  v7 = (_QWORD *)(a3 + 112);
  *(_QWORD *)(a3 + 128) = 0;
  *(_OWORD *)(a3 + 136) = 0u;
  v8 = a3 + 136;
  *(_QWORD *)(a3 + 192) = 0;
  *(_QWORD *)(a3 + 200) = 0;
  *(_OWORD *)(a3 + 152) = 0u;
  *(_OWORD *)(a3 + 168) = 0u;
  *(_QWORD *)(a3 + 184) = a3 + 192;
  v9 = a3 + 184;
  *(_QWORD *)(a3 + 216) = 0;
  *(_QWORD *)(a3 + 208) = a3 + 216;
  v10 = (uint64_t **)(a3 + 208);
  v11 = a1[20];
  *(_QWORD *)(v9 + 40) = 0;
  *(_QWORD *)(v9 + 48) = v11;
  v63 = v10;
  v64 = a1 + 20;
  v12 = (_QWORD *)a1[53];
  if (v12)
  {
    sub_20FCD5C18(v12, (uint64_t)a2, (uint64_t **)__s2);
    sub_20E9470EC(v5, (uint64_t)__s2);
    sub_20E8FB5B8((uint64_t)__s2);
  }
  sub_20F281F30(__s2, a1 + 21, a2);
  sub_20E86872C((uint64_t)v7, *(_QWORD **)(a3 + 120));
  v13 = *(_QWORD **)&__s2[8];
  *(_QWORD *)(a3 + 112) = *(_QWORD *)__s2;
  *(_QWORD *)(a3 + 120) = v13;
  v14 = *(_QWORD *)&__s2[16];
  *(_QWORD *)(a3 + 128) = *(_QWORD *)&__s2[16];
  if (v14)
  {
    v13[2] = v6;
    *(_QWORD *)__s2 = &__s2[8];
    *(_QWORD *)&__s2[8] = 0;
    *(_QWORD *)&__s2[16] = 0;
    v13 = 0;
    v15 = *(void **)v8;
    if (!*(_QWORD *)v8)
      goto LABEL_6;
    goto LABEL_5;
  }
  *v7 = v6;
  v15 = *(void **)v8;
  if (*(_QWORD *)v8)
  {
LABEL_5:
    *(_QWORD *)(a3 + 144) = v15;
    operator delete(v15);
    *(_QWORD *)v8 = 0;
    *(_QWORD *)(v8 + 8) = 0;
    *(_QWORD *)(v8 + 16) = 0;
    v13 = *(_QWORD **)&__s2[8];
  }
LABEL_6:
  *(_OWORD *)(a3 + 136) = *(_OWORD *)&__s2[24];
  *(_QWORD *)(a3 + 152) = *(_QWORD *)&__s2[40];
  memset(&__s2[24], 0, 24);
  sub_20E86872C((uint64_t)__s2, v13);
  v16 = a1[26];
  v17 = a1[27];
  __dst = 0uLL;
  v68 = 0;
  v18 = v17 - v16;
  if (v17 == v16)
  {
    v27 = 0;
    v26 = 0uLL;
    v29 = (_QWORD *)(a3 + 160);
    v28 = *(void **)(a3 + 160);
    if (v28)
    {
LABEL_11:
      *(_QWORD *)(a3 + 168) = v28;
      *(_OWORD *)__src = v26;
      operator delete(v28);
      v26 = *(_OWORD *)__src;
      *v29 = 0;
      v29[1] = 0;
      v29[2] = 0;
    }
  }
  else
  {
    v19 = 0xCBEEA4E1A08AD8F3 * (v18 >> 3);
    if (v19 >= 0x8AD8F2FBA93869)
      sub_20E92CED8();
    *(_QWORD *)&__dst = operator new(v18);
    *((_QWORD *)&__dst + 1) = __dst;
    v68 = (uint64_t *)(__dst + 472 * v19);
    *(_QWORD *)&v66[0] = &__dst;
    do
    {
      *(_QWORD *)__s2 = *(_QWORD *)v16;
      *(_DWORD *)&__s2[8] = *(_DWORD *)(v16 + 8);
      *(_DWORD *)&__s2[16] = *(_DWORD *)(v16 + 16);
      *(_QWORD *)&__s2[24] = *(_QWORD *)(v16 + 24);
      *(_DWORD *)&__s2[32] = *(_DWORD *)(v16 + 32);
      *(_DWORD *)&__s2[40] = *(_DWORD *)(v16 + 40);
      v20 = *(_OWORD *)(v16 + 160);
      v22 = *(_OWORD *)(v16 + 112);
      v21 = *(_OWORD *)(v16 + 128);
      *(_OWORD *)&__s2[144] = *(_OWORD *)(v16 + 144);
      *(_OWORD *)&__s2[160] = v20;
      *(_OWORD *)&__s2[112] = v22;
      *(_OWORD *)&__s2[128] = v21;
      v23 = *(_OWORD *)(v16 + 64);
      v25 = *(_OWORD *)(v16 + 80);
      v24 = *(_OWORD *)(v16 + 96);
      *(_OWORD *)&__s2[48] = *(_OWORD *)(v16 + 48);
      *(_OWORD *)&__s2[64] = v23;
      *(_OWORD *)&__s2[80] = v25;
      *(_OWORD *)&__s2[96] = v24;
      memcpy(&__s2[176], (const void *)(v16 + 176), 0x124uLL);
      sub_20EE66D34((void ***)v66, __s2);
      v16 += 472;
    }
    while (v16 != v17);
    v26 = __dst;
    v27 = v68;
    v29 = (_QWORD *)(a3 + 160);
    v28 = *(void **)(a3 + 160);
    if (v28)
      goto LABEL_11;
  }
  *(_OWORD *)(a3 + 160) = v26;
  *(_QWORD *)(a3 + 176) = v27;
  sub_20FCCBC60(v64, (std::string *)__s2);
  v30 = sub_20EB07858(a1, (uint64_t)__s2);
  v31 = v30;
  if ((__s2[23] & 0x80000000) == 0)
  {
    v32 = (__int128 *)a1[2];
    if (v30)
      goto LABEL_14;
    goto LABEL_60;
  }
  operator delete(*(void **)__s2);
  v32 = (__int128 *)a1[2];
  if (!v31)
  {
LABEL_60:
    if (!v32)
      goto LABEL_97;
    while (1)
    {
      __s2[23] = 4;
      strcpy(__s2, "sem_");
      v44 = *((unsigned __int8 *)v32 + 39);
      v45 = (v44 & 0x80u) == 0 ? *((unsigned __int8 *)v32 + 39) : *((_QWORD *)v32 + 3);
      if (v45 <= 3)
        break;
      if ((v44 & 0x80) != 0)
      {
        if (*((_QWORD *)v32 + 3) >= 4uLL)
          v49 = 4;
        else
          v49 = *((_QWORD *)v32 + 3);
        v50 = memcmp(*((const void **)v32 + 2), __s2, v49);
        if (v49 != 4 || v50 != 0)
          break;
      }
      else
      {
        if (v44 >= 4)
          v46 = 4;
        else
          v46 = *((unsigned __int8 *)v32 + 39);
        v47 = memcmp(v32 + 1, __s2, v46);
        if (v46 != 4 || v47 != 0)
          break;
      }
LABEL_62:
      v32 = *(__int128 **)v32;
      if (!v32)
        goto LABEL_97;
    }
    if (*((_BYTE *)v32 + 320))
    {
      memset(v66, 0, sizeof(v66));
      sub_20EE67070((uint64_t)__s2, v32 + 1, v64, (__int128 *)((char *)v32 + 40), v66);
      if ((__s2[47] & 0x80000000) != 0)
      {
        sub_20E860C04(&__dst, *(void **)&__s2[24], *(unint64_t *)&__s2[32]);
      }
      else
      {
        __dst = *(_OWORD *)&__s2[24];
        v68 = *(uint64_t **)&__s2[40];
      }
      *(_QWORD *)v69 = *(_QWORD *)&__s2[48];
      *(_QWORD *)&v69[8] = *(_QWORD *)__s2;
      *(_DWORD *)&v69[16] = *(_DWORD *)&__s2[8];
      *(_DWORD *)&v69[24] = *(_DWORD *)&__s2[16];
      *(_OWORD *)&v69[96] = *(_OWORD *)&__s2[120];
      *(_OWORD *)&v69[112] = *(_OWORD *)&__s2[136];
      *(_OWORD *)&v69[128] = *(_OWORD *)&__s2[152];
      *(_OWORD *)&v69[144] = *(_OWORD *)&__s2[168];
      *(_OWORD *)&v69[32] = *(_OWORD *)&__s2[56];
      *(_OWORD *)&v69[48] = *(_OWORD *)&__s2[72];
      *(_OWORD *)&v69[64] = *(_OWORD *)&__s2[88];
      *(_OWORD *)&v69[80] = *(_OWORD *)&__s2[104];
      *(_OWORD *)&v69[224] = *(_OWORD *)&__s2[248];
      *(_OWORD *)&v69[240] = *(_OWORD *)&__s2[264];
      *(_OWORD *)&v69[256] = *(_OWORD *)&__s2[280];
      *(_OWORD *)&v69[272] = *(_OWORD *)&__s2[296];
      *(_OWORD *)&v69[160] = *(_OWORD *)&__s2[184];
      *(_OWORD *)&v69[176] = *(_OWORD *)&__s2[200];
      *(_OWORD *)&v69[192] = *(_OWORD *)&__s2[216];
      *(_OWORD *)&v69[208] = *(_OWORD *)&__s2[232];
      v52 = __s2[328];
      if (__s2[328])
      {
        *(_QWORD *)&v69[288] = *(_QWORD *)&__s2[312];
        *(_DWORD *)&v69[296] = *(_DWORD *)&__s2[320];
        v52 = 1;
      }
      else
      {
        v69[288] = 0;
      }
      v69[304] = v52;
      v70 = v32 + 1;
      v53 = sub_20EE66E94(v63, (const void **)v32 + 2, (uint64_t)&unk_2102DB95C, &v70);
      v54 = (void **)(v53 + 7);
      if (*((char *)v53 + 79) < 0)
        operator delete(*v54);
      *(_OWORD *)v54 = __dst;
      v53[9] = v68;
      HIBYTE(v68) = 0;
      LOBYTE(__dst) = 0;
      memcpy(v53 + 10, v69, 0x131uLL);
      if (__s2[360] && (__s2[359] & 0x80000000) != 0)
        operator delete(*(void **)&__s2[336]);
      if ((__s2[47] & 0x80000000) != 0)
        operator delete(*(void **)&__s2[24]);
    }
    goto LABEL_62;
  }
LABEL_14:
  if (v32)
  {
    while (1)
    {
      __s2[23] = 4;
      strcpy(__s2, "sem_");
      v33 = *((unsigned __int8 *)v32 + 39);
      v34 = (v33 & 0x80u) == 0 ? *((unsigned __int8 *)v32 + 39) : *((_QWORD *)v32 + 3);
      if (v34 <= 3)
        break;
      if ((v33 & 0x80) != 0)
      {
        if (*((_QWORD *)v32 + 3) >= 4uLL)
          v38 = 4;
        else
          v38 = *((_QWORD *)v32 + 3);
        v39 = memcmp(*((const void **)v32 + 2), __s2, v38);
        if (v38 != 4 || v39 != 0)
          break;
      }
      else
      {
        if (v33 >= 4)
          v35 = 4;
        else
          v35 = *((unsigned __int8 *)v32 + 39);
        v36 = memcmp(v32 + 1, __s2, v35);
        v37 = v35 == 4 && v36 == 0;
        if (!v37)
          break;
      }
LABEL_16:
      v32 = *(__int128 **)v32;
      if (!v32)
        goto LABEL_97;
    }
    if (*((_BYTE *)v32 + 320))
    {
      sub_20FCCC180(a1, v64, v32 + 1, (uint64_t)__s2);
      if (!__s2[368])
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingTypes/src/MapDataSample.cpp", 81, (uint64_t)"opt_obj_cm", 10, (uint64_t)"Fail to create the object_anchor_cm using origin anchor. It should always succeed", 81, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        if (!__s2[368])
          sub_20E866B34();
      }
      if ((__s2[47] & 0x80000000) != 0)
      {
        sub_20E860C04(&__dst, *(void **)&__s2[24], *(unint64_t *)&__s2[32]);
      }
      else
      {
        __dst = *(_OWORD *)&__s2[24];
        v68 = *(uint64_t **)&__s2[40];
      }
      *(_QWORD *)v69 = *(_QWORD *)&__s2[48];
      *(_QWORD *)&v69[8] = *(_QWORD *)__s2;
      *(_DWORD *)&v69[16] = *(_DWORD *)&__s2[8];
      *(_DWORD *)&v69[24] = *(_DWORD *)&__s2[16];
      *(_OWORD *)&v69[96] = *(_OWORD *)&__s2[120];
      *(_OWORD *)&v69[112] = *(_OWORD *)&__s2[136];
      *(_OWORD *)&v69[128] = *(_OWORD *)&__s2[152];
      *(_OWORD *)&v69[144] = *(_OWORD *)&__s2[168];
      *(_OWORD *)&v69[32] = *(_OWORD *)&__s2[56];
      *(_OWORD *)&v69[48] = *(_OWORD *)&__s2[72];
      *(_OWORD *)&v69[64] = *(_OWORD *)&__s2[88];
      *(_OWORD *)&v69[80] = *(_OWORD *)&__s2[104];
      *(_OWORD *)&v69[224] = *(_OWORD *)&__s2[248];
      *(_OWORD *)&v69[240] = *(_OWORD *)&__s2[264];
      *(_OWORD *)&v69[256] = *(_OWORD *)&__s2[280];
      *(_OWORD *)&v69[272] = *(_OWORD *)&__s2[296];
      *(_OWORD *)&v69[160] = *(_OWORD *)&__s2[184];
      *(_OWORD *)&v69[176] = *(_OWORD *)&__s2[200];
      *(_OWORD *)&v69[192] = *(_OWORD *)&__s2[216];
      *(_OWORD *)&v69[208] = *(_OWORD *)&__s2[232];
      v41 = __s2[328];
      if (__s2[328])
      {
        *(_QWORD *)&v69[288] = *(_QWORD *)&__s2[312];
        *(_DWORD *)&v69[296] = *(_DWORD *)&__s2[320];
        v41 = 1;
      }
      else
      {
        v69[288] = 0;
      }
      v69[304] = v41;
      *(_QWORD *)&v66[0] = v32 + 1;
      v42 = sub_20EE66E94(v63, (const void **)v32 + 2, (uint64_t)&unk_2102DB95C, (__int128 **)v66);
      v43 = (void **)(v42 + 7);
      if (*((char *)v42 + 79) < 0)
        operator delete(*v43);
      *(_OWORD *)v43 = __dst;
      v42[9] = v68;
      memcpy(v42 + 10, v69, 0x131uLL);
      if (__s2[368])
      {
        if (__s2[360] && (__s2[359] & 0x80000000) != 0)
          operator delete(*(void **)&__s2[336]);
        if ((__s2[47] & 0x80000000) != 0)
          operator delete(*(void **)&__s2[24]);
      }
    }
    goto LABEL_16;
  }
LABEL_97:
  v55 = (_QWORD *)a1[29];
  if (v55 != a1 + 30)
  {
    do
    {
      v57 = *a2;
      v56 = a2[1];
      if (*a2 != v56)
      {
        while (*(_QWORD *)v57 != v55[4] || *(_DWORD *)(v57 + 8) != *((_DWORD *)v55 + 10))
        {
          v57 += 16;
          if (v57 == v56)
            goto LABEL_108;
        }
      }
      if (v57 == v56)
      {
LABEL_108:
        memcpy(__s2, v55 + 7, sizeof(__s2));
        *(_QWORD *)&__dst = v55[4];
        v59 = *((_DWORD *)v55 + 12);
        DWORD2(__dst) = *((_DWORD *)v55 + 10);
        LODWORD(v68) = v59;
        *(_QWORD *)&v66[0] = &__dst;
        v60 = sub_20F4485F0((uint64_t **)v9, (uint64_t *)&__dst, (uint64_t)&unk_2102DB95C, (_OWORD **)v66);
        memcpy(v60 + 7, __s2, 0x200uLL);
        v58 = (_QWORD *)v55[1];
        if (v58)
        {
          do
          {
LABEL_109:
            v61 = v58;
            v58 = (_QWORD *)*v58;
          }
          while (v58);
          goto LABEL_99;
        }
      }
      else
      {
        v58 = (_QWORD *)v55[1];
        if (v58)
          goto LABEL_109;
      }
      do
      {
        v61 = (_QWORD *)v55[2];
        v37 = *v61 == (_QWORD)v55;
        v55 = v61;
      }
      while (!v37);
LABEL_99:
      v55 = v61;
    }
    while (v61 != a1 + 30);
  }
}

void sub_20F446E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E94DEFC(a9);
  _Unwind_Resume(a1);
}

void sub_20F446F18(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  float64x2_t **v4;
  uint64_t v5;
  uint64_t v6;
  __int32 v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD **v15;
  unint64_t v16;
  uint8x8_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t **v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  float64x2_t *v30;
  float64x2_t **v31;
  float64x2_t **v32;
  unint64_t v33;
  unsigned int v34;
  float64x2_t *v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  char *v44;
  float64x2_t v45;
  float64x2_t v47;
  float64x2_t v48;
  int8x16_t v49;
  float64x2_t v51;
  float64x2_t v54;
  int8x16_t v57;
  int8x16_t v58;
  float64x2_t v59;
  float64x2_t v60;
  double v63;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  char *v74;
  uint64_t v75;
  int v76;
  char *v77;
  uint64_t v78;
  int v79;
  unint64_t v80;
  char *v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  void *v90;
  char *v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  char *v96;
  char *v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  char *v106;
  char *v107;
  _QWORD *v108;
  _QWORD *v109;
  void *v110;
  void *exception;
  _QWORD *v112;
  _QWORD **v113;
  void **v114;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  uint64_t v124;
  char **v125;
  float64_t v126;
  float64_t v127;
  int64x2_t v128;
  float64_t v129;
  int64x2_t v130;
  float64_t v131;
  int64x2_t v132;
  double v133;
  float64x2_t v134;
  double v135;
  void *__p;
  void *v137;
  void *v138[2];
  void *v139[2];
  int v140;
  float64x2_t v141;
  double v142;
  int64x2_t v143;
  double v144;
  float64x2_t v145;
  double v146;
  float64x2_t v147;
  double v148;
  void *v149;
  void *v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  uint64_t v166;

  v166 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = a2 + 16;
  *(_OWORD *)(a2 + 32) = 0u;
  v125 = (char **)(a2 + 32);
  *(_QWORD *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  v4 = (float64x2_t **)(a2 + 120);
  *(_QWORD *)(a2 + 112) = a2 + 120;
  *(_BYTE *)(a2 + 104) = 3;
  *(_QWORD *)(a2 + 128) = 0;
  *(_OWORD *)(a2 + 136) = 0u;
  v113 = (_QWORD **)(a2 + 112);
  v114 = (void **)(a2 + 136);
  *(_QWORD *)(a2 + 200) = 0;
  *(_QWORD *)(a2 + 192) = 0;
  *(_OWORD *)(a2 + 152) = 0u;
  *(_OWORD *)(a2 + 168) = 0u;
  *(_QWORD *)(a2 + 184) = a2 + 192;
  *(_QWORD *)(a2 + 216) = 0;
  *(_QWORD *)(a2 + 208) = a2 + 216;
  *(_QWORD *)(a2 + 224) = 0;
  *(_QWORD *)(a2 + 232) = -1;
  if (a2 + 8 == a1)
  {
    *(_BYTE *)(a2 + 104) = *(_BYTE *)(a1 + 96);
    *(_OWORD *)v139 = 0uLL;
    *(_OWORD *)v138 = 0uLL;
    v140 = 1065353216;
    v12 = a2;
    v13 = *(_QWORD *)(a2 + 80);
    v14 = *(_QWORD *)(a2 + 88);
    v15 = v113;
    if (v13 == v14)
      goto LABEL_33;
LABEL_8:
    v16 = (unint64_t)v138[1];
    if (!v138[1])
    {
LABEL_81:
      exception = __cxa_allocate_exception(0x580uLL);
      v112 = (_QWORD *)sub_20EA59064((uint64_t)exception, "Fail to find the track anchor id!", "Unknown");
      *v112 = &off_24CA05150;
      __cxa_throw(v112, (struct type_info *)&unk_24CA05168, (void (*)(void *))std::exception::~exception);
    }
    v17 = (uint8x8_t)vcnt_s8((int8x8_t)v138[1]);
    v17.i16[0] = vaddlv_u8(v17);
    v18 = v138[0];
LABEL_11:
    v19 = *(unsigned int *)(v13 + 168);
    if (v17.u32[0] > 1uLL)
    {
      v20 = *(unsigned int *)(v13 + 168);
      if (v16 <= v19)
        v20 = v19 % v16;
    }
    else
    {
      v20 = (v16 + 0xFFFFFFFF) & v19;
    }
    v21 = (uint64_t **)v18[v20];
    if (!v21)
      goto LABEL_81;
    v22 = *v21;
    if (!v22)
      goto LABEL_81;
    if (v17.u32[0] < 2uLL)
    {
      while (1)
      {
        v23 = v22[1];
        if (v23 == v19)
        {
          if (*((_DWORD *)v22 + 4) == (_DWORD)v19)
            goto LABEL_23;
        }
        else if ((v23 & (v16 - 1)) != v20)
        {
          goto LABEL_81;
        }
        v22 = (uint64_t *)*v22;
        if (!v22)
          goto LABEL_81;
      }
    }
    while (1)
    {
      v25 = v22[1];
      if (v25 == v19)
      {
        if (*((_DWORD *)v22 + 4) == (_DWORD)v19)
        {
LABEL_23:
          if (!*(_QWORD *)v13)
          {
            v24 = v22[3];
            if (v24)
              *(_QWORD *)v13 = v24;
          }
          v13 += 176;
          if (v13 == v14)
            goto LABEL_33;
          goto LABEL_11;
        }
      }
      else
      {
        if (v25 >= v16)
          v25 %= v16;
        if (v25 != v20)
          goto LABEL_81;
      }
      v22 = (uint64_t *)*v22;
      if (!v22)
        goto LABEL_81;
    }
  }
  sub_20E9DF450(a2 + 8, *(uint64_t **)a1, (uint64_t *)(a1 + 8));
  sub_20F4390F0(v125, *(char **)(a1 + 24), *(char **)(a1 + 32), 0x8F5C28F5C28F5C29 * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 5));
  sub_20F43957C((uint64_t *)(a2 + 56), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 3));
  sub_20F439A44((uint64_t *)(a2 + 80), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 4));
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a2 + 104) = *(_BYTE *)(a1 + 96);
  *(_OWORD *)v139 = 0u;
  *(_OWORD *)v138 = 0u;
  v140 = 1065353216;
  if (v5 != v6)
  {
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)v5;
      v9 = *(unsigned int *)(v5 + 8);
      v10 = *(_DWORD *)(v5 + 16);
      v128.i32[0] = v7;
      *(_QWORD *)&v141.f64[0] = &v128;
      v11 = sub_20F448798((uint64_t)v138, (unsigned int *)&v128, (uint64_t)&unk_2102DB95C, &v141);
      ++v7;
      v11[3] = v8;
      v11[4] = v9;
      *((_DWORD *)v11 + 10) = v10;
      v5 += 168;
    }
    while (v5 != v6);
  }
  v12 = a2;
  v13 = *(_QWORD *)(a2 + 80);
  v14 = *(_QWORD *)(a2 + 88);
  v15 = v113;
  if (v13 != v14)
    goto LABEL_8;
LABEL_33:
  v26 = *(_QWORD *)(v12 + 32);
  v27 = *(_QWORD *)(v12 + 40);
  if (v26 == v27)
  {
    v28 = *(_QWORD *)(v12 + 32);
    goto LABEL_51;
  }
  do
  {
    v141 = *(float64x2_t *)(v26 + 784);
    v29 = *(_QWORD *)(v26 + 784);
    v126 = *(double *)(v26 + 792);
    v30 = *v4;
    v31 = v4;
    v32 = v4;
    if (*v4)
    {
      while (1)
      {
        while (1)
        {
          v32 = (float64x2_t **)v30;
          v33 = *(_QWORD *)&v30[2].f64[0];
          if (v33 == v29)
            break;
          if (v33 <= v29)
          {
            if (v33 >= v29)
              goto LABEL_36;
            goto LABEL_46;
          }
LABEL_39:
          v30 = *v32;
          v31 = v32;
          if (!*v32)
            goto LABEL_48;
        }
        v34 = *((_DWORD *)v32 + 10);
        if (v34 > LODWORD(v126))
          goto LABEL_39;
        if (v34 >= LODWORD(v126))
          goto LABEL_36;
LABEL_46:
        v30 = v32[1];
        if (!v30)
        {
          v31 = v32 + 1;
          break;
        }
      }
    }
LABEL_48:
    v35 = (float64x2_t *)operator new(0x40uLL);
    *(_QWORD *)&v35[2].f64[0] = v29;
    v35[2].f64[1] = v126;
    v35[3] = v141;
    v35->f64[0] = 0.0;
    v35->f64[1] = 0.0;
    *(_QWORD *)&v35[1].f64[0] = v32;
    *v31 = v35;
    v36 = (_QWORD *)**v15;
    if (v36)
    {
      *v15 = v36;
      v35 = *v31;
    }
    sub_20E868578(*(uint64_t **)(v12 + 120), (uint64_t *)v35);
    ++*(_QWORD *)(v12 + 128);
LABEL_36:
    v26 += 800;
  }
  while (v26 != v27);
  v26 = *(_QWORD *)(v12 + 32);
  v28 = *(_QWORD *)(v12 + 40);
LABEL_51:
  v163 = 0u;
  v164 = 0u;
  v37 = 0x8F5C28F5C28F5C29 * ((v28 - v26) >> 5);
  v165 = 0u;
  v160 = 0u;
  v161 = 0u;
  v162 = 0u;
  v157 = 0u;
  v158 = 0u;
  v159 = 0u;
  v154 = 0u;
  v155 = 0u;
  v156 = 0u;
  v151 = 0u;
  v152 = 0u;
  v153 = 0u;
  if ((v37 & 0xFFFFFFFE) != 0)
  {
    v124 = v37;
    v38 = 1;
    __asm { FMOV            V0.2D, #1.0 }
    v127 = *((double *)&_Q0 + 1);
    while (1)
    {
      v44 = *v125;
      sub_20FCD0CB8((__int128 *)&(*v125)[800 * v38 - 800], (uint64_t)&v141);
      sub_20FCD0CB8((__int128 *)&v44[800 * v38], (uint64_t)&v128);
      v45.f64[0] = v129;
      _V5.D[1] = v132.i64[1];
      v47 = (float64x2_t)vzip1q_s64(v128, v130);
      v48 = (float64x2_t)vzip2q_s64(v128, v130);
      v45.f64[1] = v131;
      v49 = vextq_s8((int8x16_t)v48, (int8x16_t)vdupq_laneq_s64(v132, 1), 8uLL);
      _Q16.f64[1] = v134.f64[1];
      v51 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v47, v134.f64[0]), v48, v134, 1), v45, v135);
      _D16 = v134.f64[1];
      __asm { FMLA            D17, D16, V5.D[1] }
      _Q16.f64[0] = _D17 + v133 * v135;
      *(_QWORD *)&v48.f64[1] = v49.i64[0];
      v54.f64[1] = v127;
      *(_QWORD *)&v54.f64[0] = *(_OWORD *)&vnegq_f64(_Q16);
      _D18 = v144;
      _Q16.f64[1] = v145.f64[1];
      _Q19 = (float64x2_t)vzip2q_s64((int64x2_t)v141, v143);
      v57 = (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q19, 1);
      v58 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&_Q19.f64[0], 0);
      v59 = (float64x2_t)vzip1q_s64((int64x2_t)v141, v143);
      v60 = vmlaq_laneq_f64(vmulq_n_f64(v59, v147.f64[0]), _Q19, v147, 1);
      _Q19.f64[0] = v142;
      _Q19.f64[1] = v144;
      _Q28 = vmlaq_n_f64(v60, _Q19, v148);
      _D26 = v147.f64[1];
      __asm { FMLA            D19, D26, V16.D[1] }
      v63 = _Q19.f64[0] + v146 * v148;
      _Q23 = (int64x2_t)vextq_s8(v58, v57, 8uLL);
      v65 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v59, _Q23), _Q28.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v59, _Q23), _Q28, 1), v145, v63);
      __asm { FMLA            D23, D18, V28.D[1] }
      *(double *)_Q23.i64 = *(double *)_Q23.i64 + v146 * v63;
      v66 = vmlsq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v47, v141.f64[0]), v48, v141, 1), v45, v142), (float64x2_t)0, v51);
      v67 = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v132.u64[0], v141.f64[0]), (float64x2_t)v49.u64[1], v141, 1), (float64x2_t)*(unint64_t *)&v133, v142), (float64x2_t)0, v54);
      v68 = vmlsq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v47, *(double *)v143.i64), v48, (float64x2_t)v143, 1), v45, v144), (float64x2_t)0, v51);
      v69 = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v132.u64[0], *(double *)v143.i64), (float64x2_t)v49.u64[1], (float64x2_t)v143, 1), (float64x2_t)*(unint64_t *)&v133, v144), (float64x2_t)0, v54);
      v70 = vmlsq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v47, v145.f64[0]), v48, v145, 1), v45, v146), (float64x2_t)0, v51);
      v71 = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v132.u64[0], v145.f64[0]), (float64x2_t)v49.u64[1], v145, 1), (float64x2_t)*(unint64_t *)&v133, v146), (float64x2_t)0, v54);
      v72 = vsubq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v47, v65.f64[0]), v48, v65, 1), v45, *(double *)_Q23.i64), v51);
      v73 = vaddq_f64(v54, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v132.u64[0], v65.f64[0]), (float64x2_t)v49.u64[1], v65, 1), (float64x2_t)*(unint64_t *)&v133, *(double *)_Q23.i64));
      v74 = &v44[800 * v38 - 800];
      v75 = *((_QWORD *)v74 + 98);
      v76 = *((_DWORD *)v74 + 198);
      v77 = &v44[800 * v38];
      v78 = *((_QWORD *)v77 + 98);
      v79 = *((_DWORD *)v77 + 198);
      v81 = *(char **)(v12 + 144);
      v80 = *(_QWORD *)(v12 + 152);
      if ((unint64_t)v81 >= v80)
        break;
      *v81 = 0;
      *((_QWORD *)v81 + 1) = v75;
      *((_DWORD *)v81 + 4) = v76;
      *((_DWORD *)v81 + 6) = -1;
      *((_QWORD *)v81 + 4) = v78;
      *((_DWORD *)v81 + 10) = v79;
      *((_DWORD *)v81 + 12) = -1;
      *(float64x2_t *)(v81 + 56) = v66;
      *(float64x2_t *)(v81 + 72) = v67;
      *(float64x2_t *)(v81 + 88) = v68;
      *(float64x2_t *)(v81 + 104) = v69;
      *(float64x2_t *)(v81 + 120) = v70;
      *(float64x2_t *)(v81 + 136) = v71;
      *(float64x2_t *)(v81 + 152) = v72;
      *(float64x2_t *)(v81 + 168) = v73;
      *((_QWORD *)v81 + 23) = 0x3FF0000000000000;
      v82 = v164;
      *((_OWORD *)v81 + 12) = v163;
      *((_OWORD *)v81 + 13) = v82;
      *((_OWORD *)v81 + 14) = v165;
      *((_QWORD *)v81 + 30) = 0x3FF0000000000000;
      v83 = v161;
      *(_OWORD *)(v81 + 248) = v160;
      v84 = v162;
      *(_OWORD *)(v81 + 264) = v83;
      *(_OWORD *)(v81 + 280) = v84;
      *((_QWORD *)v81 + 37) = 0x3FF0000000000000;
      v85 = v158;
      *((_OWORD *)v81 + 19) = v157;
      *((_OWORD *)v81 + 20) = v85;
      *((_OWORD *)v81 + 21) = v159;
      *((_QWORD *)v81 + 44) = 0x3FF0000000000000;
      v86 = v154;
      v87 = v156;
      *(_OWORD *)(v81 + 376) = v155;
      *(_OWORD *)(v81 + 392) = v87;
      *(_OWORD *)(v81 + 360) = v86;
      *((_QWORD *)v81 + 51) = 0x3FF0000000000000;
      v88 = v153;
      v89 = v151;
      *((_OWORD *)v81 + 27) = v152;
      *((_OWORD *)v81 + 28) = v88;
      *((_OWORD *)v81 + 26) = v89;
      *((_QWORD *)v81 + 58) = 0x3FF0000000000000;
      *((_DWORD *)v81 + 118) = 0;
      *(_QWORD *)(v12 + 144) = v81 + 480;
      v90 = __p;
      if (__p)
        goto LABEL_56;
LABEL_57:
      if (v149)
      {
        v150 = v149;
        operator delete(v149);
      }
      if (++v38 == v124)
        goto LABEL_76;
    }
    v91 = (char *)*v114;
    v92 = 0xEEEEEEEEEEEEEEEFLL * ((v81 - (_BYTE *)*v114) >> 5);
    v93 = v92 + 1;
    if (v92 + 1 > 0x88888888888888)
      sub_20E92CED8();
    v94 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v80 - (_QWORD)v91) >> 5);
    if (2 * v94 > v93)
      v93 = 2 * v94;
    if (v94 >= 0x44444444444444)
      v95 = 0x88888888888888;
    else
      v95 = v93;
    if (v95)
    {
      v116 = v73;
      v117 = v72;
      v118 = v71;
      v119 = v70;
      v120 = v69;
      v121 = v68;
      v122 = v67;
      v123 = v66;
      if (v95 > 0x88888888888888)
        sub_20E877A38();
      v96 = (char *)operator new(480 * v95);
      v67 = v122;
      v66 = v123;
      v69 = v120;
      v68 = v121;
      v71 = v118;
      v70 = v119;
      v73 = v116;
      v72 = v117;
    }
    else
    {
      v96 = 0;
    }
    v97 = &v96[480 * v92];
    *v97 = 0;
    *((_QWORD *)v97 + 1) = v75;
    *((_DWORD *)v97 + 4) = v76;
    *((_DWORD *)v97 + 6) = -1;
    *((_QWORD *)v97 + 4) = v78;
    *((_DWORD *)v97 + 10) = v79;
    *((_DWORD *)v97 + 12) = -1;
    *(float64x2_t *)(v97 + 72) = v67;
    *(float64x2_t *)(v97 + 56) = v66;
    *(float64x2_t *)(v97 + 104) = v69;
    *(float64x2_t *)(v97 + 88) = v68;
    *(float64x2_t *)(v97 + 136) = v71;
    *(float64x2_t *)(v97 + 120) = v70;
    *(float64x2_t *)(v97 + 168) = v73;
    *(float64x2_t *)(v97 + 152) = v72;
    *((_QWORD *)v97 + 23) = 0x3FF0000000000000;
    v98 = v164;
    *((_OWORD *)v97 + 12) = v163;
    *((_OWORD *)v97 + 13) = v98;
    *((_OWORD *)v97 + 14) = v165;
    *((_QWORD *)v97 + 30) = 0x3FF0000000000000;
    v99 = v161;
    *(_OWORD *)(v97 + 248) = v160;
    v100 = v162;
    *(_OWORD *)(v97 + 264) = v99;
    *(_OWORD *)(v97 + 280) = v100;
    *((_QWORD *)v97 + 37) = 0x3FF0000000000000;
    v101 = v158;
    *((_OWORD *)v97 + 19) = v157;
    *((_OWORD *)v97 + 20) = v101;
    *((_OWORD *)v97 + 21) = v159;
    *((_QWORD *)v97 + 44) = 0x3FF0000000000000;
    v102 = v154;
    v103 = v156;
    *(_OWORD *)(v97 + 376) = v155;
    *(_OWORD *)(v97 + 392) = v103;
    *(_OWORD *)(v97 + 360) = v102;
    *((_QWORD *)v97 + 51) = 0x3FF0000000000000;
    v104 = v153;
    v105 = v151;
    *((_OWORD *)v97 + 27) = v152;
    *((_OWORD *)v97 + 28) = v104;
    *((_OWORD *)v97 + 26) = v105;
    *((_QWORD *)v97 + 58) = 0x3FF0000000000000;
    *((_DWORD *)v97 + 118) = 0;
    v106 = v97;
    if (v81 != v91)
    {
      do
      {
        v81 -= 480;
        v106 -= 480;
        memcpy(v106, v81, 0x1DCuLL);
      }
      while (v81 != v91);
      v81 = v91;
    }
    v107 = v97 + 480;
    v12 = a2;
    *(_QWORD *)(a2 + 136) = v106;
    *(_QWORD *)(a2 + 144) = v107;
    *(_QWORD *)(a2 + 152) = &v96[480 * v95];
    if (v81)
      operator delete(v81);
    *(_QWORD *)(a2 + 144) = v107;
    v90 = __p;
    if (!__p)
      goto LABEL_57;
LABEL_56:
    v137 = v90;
    operator delete(v90);
    goto LABEL_57;
  }
LABEL_76:
  v108 = v139[0];
  if (v139[0])
  {
    do
    {
      v109 = (_QWORD *)*v108;
      operator delete(v108);
      v108 = v109;
    }
    while (v109);
  }
  v110 = v138[0];
  v138[0] = 0;
  if (v110)
    operator delete(v110);
}

void sub_20F447900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15)
{
  uint64_t v15;
  _QWORD **v16;
  void *v18;
  void *v19;

  sub_20E866B68(a11, *(_QWORD *)(v15 + 216));
  sub_20E86872C(a12, *(_QWORD **)(v15 + 192));
  v18 = *(void **)(v15 + 160);
  if (v18)
  {
    *(_QWORD *)(v15 + 168) = v18;
    operator delete(v18);
  }
  v19 = *a15;
  if (*a15)
  {
    *(_QWORD *)(v15 + 144) = v19;
    operator delete(v19);
  }
  sub_20E86872C(a14, *v16);
  sub_20E8FB5B8(a13);
  _Unwind_Resume(a1);
}

void sub_20F4479FC(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  float64x2_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  float64x2_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  int v61;
  _QWORD *v62;
  _QWORD *v63;
  void *v64;
  _QWORD *v65;
  _QWORD *v66;
  void *v67;
  void *v68;
  float64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  unint64_t v72;
  unint64_t v73;
  size_t v74;
  int v75;
  BOOL v76;
  size_t v77;
  int v78;
  int v80;
  void *v81;
  uint64_t v82;
  int v83;
  __int128 v84;
  float64x2_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  int64_t v97;
  unint64_t v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  void *v124;
  unint64_t v125;
  uint64_t v126;
  unsigned int v127;
  uint64_t **v128;
  _QWORD *v129;
  uint64_t v130;
  unsigned int v131;
  unint64_t v132;
  unsigned int v133;
  char *v134;
  uint64_t v135;
  uint64_t *v136;
  _OWORD *v137;
  _QWORD *v138;
  _QWORD *v139;
  void **v140;
  _QWORD *i;
  uint64_t *v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  void *__p[2];
  void *v177[2];
  int v178;
  float64x2_t __s2;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  int v208;
  char v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  unsigned int v218;
  uint64_t v219;
  uint64_t v220;
  int v221;
  uint64_t v222;
  uint64_t v223;
  int v224;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_OWORD *)(a2 + 120) = 0u;
  *(_OWORD *)(a2 + 136) = 0u;
  *(_QWORD *)(a2 + 152) = 0;
  sub_20FCC477C((_QWORD *)a2);
  *(_QWORD *)(a2 + 240) = 0;
  *(_QWORD *)(a2 + 160) = -1;
  *(_OWORD *)(a2 + 168) = 0u;
  *(_OWORD *)(a2 + 184) = 0u;
  *(_DWORD *)(a2 + 200) = 1065353216;
  *(_QWORD *)(a2 + 208) = 0;
  *(_QWORD *)(a2 + 216) = 0;
  *(_QWORD *)(a2 + 224) = 0;
  *(_QWORD *)(a2 + 248) = 0;
  *(_QWORD *)(a2 + 256) = 0;
  *(_QWORD *)(a2 + 232) = a2 + 240;
  *(_BYTE *)(a2 + 292) = 0;
  *(_QWORD *)(a2 + 264) = 0;
  *(_QWORD *)(a2 + 272) = 0;
  *(_BYTE *)(a2 + 280) = 0;
  *(_QWORD *)(a2 + 296) = a2 + 304;
  *(_QWORD *)(a2 + 304) = 0;
  *(_BYTE *)(a2 + 356) = 0;
  *(_QWORD *)(a2 + 312) = 0;
  *(_QWORD *)(a2 + 320) = 0;
  *(_BYTE *)(a2 + 344) = 0;
  *(_QWORD *)(a2 + 328) = 0;
  *(_QWORD *)(a2 + 336) = 0;
  *(_OWORD *)(a2 + 360) = 0u;
  *(_OWORD *)(a2 + 376) = 0u;
  *(_DWORD *)(a2 + 392) = 1065353216;
  *(_QWORD *)(a2 + 400) = -1;
  *(_BYTE *)(a2 + 408) = 0;
  *(_DWORD *)(a2 + 428) = 0;
  *(_QWORD *)(a2 + 412) = 0;
  v142 = (uint64_t *)(a2 + 240);
  *(_QWORD *)(a2 + 420) = 0;
  v4 = (uint64_t *)operator new();
  sub_20E8E8A78(v4);
  v5 = *(uint64_t **)(a2 + 424);
  *(_QWORD *)(a2 + 424) = v4;
  if (v5)
  {
    v6 = sub_20E8E95B0(v5);
    MEMORY[0x212BC6398](v6, 0x20C40313AD07FLL);
    v4 = *(uint64_t **)(a2 + 424);
  }
  *(_QWORD *)(a2 + 160) = a1[29];
  sub_20FCD9BAC(a1 + 1, v4);
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v177 = 0u;
  v178 = 1065353216;
  v7 = a1[17];
  v8 = a1[18];
  for (i = a1; v7 != v8; v7 += 480)
  {
    if (*(_BYTE *)v7 == 1)
    {
      v223 = 0;
      v222 = *(_QWORD *)(v7 + 8);
      LODWORD(v223) = *(_DWORD *)(v7 + 16);
      v224 = *(_DWORD *)(v7 + 24);
      v220 = 0;
      v219 = *(_QWORD *)(v7 + 32);
      LODWORD(v220) = *(_DWORD *)(v7 + 40);
      v221 = *(_DWORD *)(v7 + 48);
      v218 = 1;
      v9 = *(_OWORD *)(v7 + 72);
      v10 = *(_OWORD *)(v7 + 56);
      v11 = *(_OWORD *)(v7 + 104);
      v12 = *(_OWORD *)(v7 + 88);
      v13 = *(_OWORD *)(v7 + 136);
      v14 = *(_OWORD *)(v7 + 120);
      v15 = *(_OWORD *)(v7 + 168);
      v216 = *(_OWORD *)(v7 + 152);
      v217 = v15;
      v214 = v14;
      v215 = v13;
      v212 = v12;
      v213 = v11;
      v210 = v10;
      v211 = v9;
      v16 = *(float64x2_t *)(v7 + 184);
      v17 = *(_OWORD *)(v7 + 200);
      v18 = *(_OWORD *)(v7 + 216);
      v19 = *(_OWORD *)(v7 + 232);
      v20 = *(_OWORD *)(v7 + 248);
      v21 = *(_OWORD *)(v7 + 264);
      v22 = *(_OWORD *)(v7 + 280);
      v23 = *(_OWORD *)(v7 + 296);
      v24 = *(_OWORD *)(v7 + 312);
      v25 = *(_OWORD *)(v7 + 328);
      v26 = *(_OWORD *)(v7 + 344);
      v27 = *(_OWORD *)(v7 + 360);
      v28 = *(_OWORD *)(v7 + 376);
      v29 = *(_OWORD *)(v7 + 392);
      v30 = *(_OWORD *)(v7 + 408);
      v31 = *(_OWORD *)(v7 + 424);
      v32 = *(_OWORD *)(v7 + 456);
      v195 = *(_OWORD *)(v7 + 440);
      v196 = v32;
      v193 = v30;
      v194 = v31;
      v191 = v28;
      v192 = v29;
      v189 = v26;
      v190 = v27;
      v187 = v24;
      v188 = v25;
      v185 = v22;
      v186 = v23;
      v184 = v21;
      v183 = v20;
      v182 = v19;
      v181 = v18;
      __s2 = v16;
      v180 = v17;
      sub_20F7C2840((uint64_t *)__p, &v222, &v219, &v218, -1, (uint64_t)&v210, (int8x16_t *)&__s2, *(_DWORD *)(v7 + 472));
    }
    else if (!*(_BYTE *)v7)
    {
      v33 = *(_QWORD *)(v7 + 8);
      v34 = *(unsigned int *)(v7 + 16);
      v35 = *(_QWORD *)(v7 + 32);
      v36 = *(unsigned int *)(v7 + 40);
      v218 = 0;
      v37 = *(_OWORD *)(v7 + 72);
      v38 = *(_OWORD *)(v7 + 56);
      v39 = *(_OWORD *)(v7 + 104);
      v40 = *(_OWORD *)(v7 + 88);
      v41 = *(_OWORD *)(v7 + 136);
      v42 = *(_OWORD *)(v7 + 120);
      v43 = *(_OWORD *)(v7 + 168);
      v216 = *(_OWORD *)(v7 + 152);
      v217 = v43;
      v214 = v42;
      v215 = v41;
      v212 = v40;
      v213 = v39;
      v210 = v38;
      v211 = v37;
      v44 = *(float64x2_t *)(v7 + 184);
      v45 = *(_OWORD *)(v7 + 200);
      v46 = *(_OWORD *)(v7 + 216);
      v47 = *(_OWORD *)(v7 + 232);
      v48 = *(_OWORD *)(v7 + 248);
      v49 = *(_OWORD *)(v7 + 264);
      v50 = *(_OWORD *)(v7 + 280);
      v51 = *(_OWORD *)(v7 + 296);
      v52 = *(_OWORD *)(v7 + 312);
      v53 = *(_OWORD *)(v7 + 328);
      v54 = *(_OWORD *)(v7 + 344);
      v55 = *(_OWORD *)(v7 + 360);
      v56 = *(_OWORD *)(v7 + 376);
      v57 = *(_OWORD *)(v7 + 392);
      v58 = *(_OWORD *)(v7 + 408);
      v59 = *(_OWORD *)(v7 + 424);
      v60 = *(_OWORD *)(v7 + 456);
      v195 = *(_OWORD *)(v7 + 440);
      v196 = v60;
      v193 = v58;
      v194 = v59;
      v191 = v56;
      v192 = v57;
      v189 = v54;
      v190 = v55;
      v187 = v52;
      v188 = v53;
      v185 = v50;
      v186 = v51;
      v184 = v49;
      v183 = v48;
      v182 = v47;
      v181 = v46;
      __s2 = v44;
      v180 = v45;
      v61 = *(_DWORD *)(v7 + 472);
      v222 = v33;
      v223 = v34;
      v224 = -1;
      v219 = v35;
      v220 = v36;
      v221 = -1;
      sub_20F7C2840((uint64_t *)__p, &v222, &v219, &v218, -1, (uint64_t)&v210, (int8x16_t *)&__s2, v61);
    }
  }
  v62 = (_QWORD *)a1[14];
  if (v62 != a1 + 15)
  {
    do
    {
      *(_QWORD *)&v69 = *((unsigned int *)v62 + 14);
      __s2.f64[0] = (float64_t)v62[6];
      __s2.f64[1] = v69;
      sub_20F7C2444((uint64_t *)__p, (uint64_t *)&__s2);
      v70 = (_QWORD *)v62[1];
      if (v70)
      {
        do
        {
          v71 = v70;
          v70 = (_QWORD *)*v70;
        }
        while (v70);
      }
      else
      {
        do
        {
          v71 = (_QWORD *)v62[2];
          v76 = *v71 == (_QWORD)v62;
          v62 = v71;
        }
        while (!v76);
      }
      v62 = v71;
    }
    while (v71 != a1 + 15);
  }
  sub_20F310F9C(a2 + 168, (uint64_t *)__p);
  v63 = v177[0];
  if (v177[0])
  {
    do
    {
      v66 = (_QWORD *)*v63;
      v67 = (void *)v63[9];
      if (v67)
      {
        v63[10] = v67;
        operator delete(v67);
      }
      v68 = (void *)v63[6];
      if (v68)
      {
        v63[7] = v68;
        operator delete(v68);
      }
      operator delete(v63);
      v63 = v66;
    }
    while (v66);
  }
  v140 = (void **)(a2 + 208);
  v64 = __p[0];
  __p[0] = 0;
  if (v64)
    operator delete(v64);
  v65 = (_QWORD *)a1[26];
  if (v65 != a1 + 27)
  {
    while (1)
    {
      BYTE7(v180) = 4;
      strcpy((char *)&__s2, "sem_");
      v72 = *((unsigned __int8 *)v65 + 55);
      v73 = (v72 & 0x80u) == 0 ? *((unsigned __int8 *)v65 + 55) : v65[5];
      if (v73 <= 3)
        break;
      if ((v72 & 0x80) != 0)
      {
        if (v65[5] >= 4uLL)
          v77 = 4;
        else
          v77 = v65[5];
        v78 = memcmp((const void *)v65[4], &__s2, v77);
        if (v77 != 4 || v78 != 0)
          break;
      }
      else
      {
        if (v72 >= 4)
          v74 = 4;
        else
          v74 = *((unsigned __int8 *)v65 + 55);
        v75 = memcmp(v65 + 4, &__s2, v74);
        v76 = v74 == 4 && v75 == 0;
        if (!v76)
          break;
      }
LABEL_54:
      v91 = (_QWORD *)v65[1];
      if (v91)
      {
        do
        {
          v92 = v91;
          v91 = (_QWORD *)*v91;
        }
        while (v91);
      }
      else
      {
        do
        {
          v92 = (_QWORD *)v65[2];
          v76 = *v92 == (_QWORD)v65;
          v65 = v92;
        }
        while (!v76);
      }
      v65 = v92;
      if (v92 == a1 + 27)
        goto LABEL_60;
    }
    v210 = (unint64_t)v65[11];
    v80 = *((_DWORD *)v65 + 26);
    DWORD2(v210) = *((_DWORD *)v65 + 24);
    LODWORD(v211) = v80;
    if (sub_20E9DF85C((_QWORD *)(**(_QWORD **)(a2 + 424) + 1784), (uint64_t *)&v210))
    {
      LOBYTE(__p[0]) = 0;
      LOBYTE(v177[0]) = 0;
      if (*((_BYTE *)v65 + 384))
      {
        v81 = (void *)*((unsigned int *)v65 + 94);
        __p[0] = *((void **)v65 + 46);
        __p[1] = v81;
        LOBYTE(v177[0]) = 1;
      }
      v82 = **(_QWORD **)(a2 + 424);
      v222 = v65[11];
      v223 = 0;
      v83 = *((_DWORD *)v65 + 26);
      LODWORD(v223) = *((_DWORD *)v65 + 24);
      v224 = v83;
      v85 = *((float64x2_t *)v65 + 7);
      v84 = *((_OWORD *)v65 + 8);
      v87 = *((_OWORD *)v65 + 9);
      v86 = *((_OWORD *)v65 + 10);
      v89 = *((_OWORD *)v65 + 11);
      v88 = *((_OWORD *)v65 + 12);
      v90 = *((_OWORD *)v65 + 14);
      v185 = *((_OWORD *)v65 + 13);
      v186 = v90;
      v183 = v89;
      v184 = v88;
      v181 = v87;
      v182 = v86;
      __s2 = v85;
      v180 = v84;
      sub_20FCC6708((_QWORD *)a2, (uint64_t)(v65 + 4), v82, &v222, &__s2, (__int128 *)__p);
    }
    goto LABEL_54;
  }
LABEL_60:
  v93 = (_QWORD *)a1[23];
  if (v93 != a1 + 24)
  {
    while (1)
    {
      v159 = *(_OWORD *)(v93 + 7);
      v173 = *(_OWORD *)(v93 + 67);
      v175 = *(_OWORD *)(v93 + 69);
      v171 = *(_OWORD *)(v93 + 63);
      v172 = *(_OWORD *)(v93 + 65);
      v169 = *(_OWORD *)(v93 + 59);
      v170 = *(_OWORD *)(v93 + 61);
      v167 = *(_OWORD *)(v93 + 55);
      v168 = *(_OWORD *)(v93 + 57);
      v165 = *(_OWORD *)(v93 + 51);
      v166 = *(_OWORD *)(v93 + 53);
      v163 = *(_OWORD *)(v93 + 47);
      v164 = *(_OWORD *)(v93 + 49);
      v161 = *(_OWORD *)(v93 + 43);
      v162 = *(_OWORD *)(v93 + 45);
      v160 = *(_OWORD *)(v93 + 41);
      v157 = *(_OWORD *)(v93 + 37);
      v158 = *(_OWORD *)(v93 + 39);
      v155 = *(_OWORD *)(v93 + 33);
      v156 = *(_OWORD *)(v93 + 35);
      v153 = *(_OWORD *)(v93 + 29);
      v154 = *(_OWORD *)(v93 + 31);
      v151 = *(_OWORD *)(v93 + 25);
      v152 = *(_OWORD *)(v93 + 27);
      v149 = *(_OWORD *)(v93 + 21);
      v150 = *(_OWORD *)(v93 + 23);
      v147 = *(_OWORD *)(v93 + 17);
      v148 = *(_OWORD *)(v93 + 19);
      v145 = *(_OWORD *)(v93 + 13);
      v146 = *(_OWORD *)(v93 + 15);
      v143 = *(_OWORD *)(v93 + 9);
      v144 = *(_OWORD *)(v93 + 11);
      v125 = v93[4];
      v126 = *((unsigned int *)v93 + 10);
      v127 = *((_DWORD *)v93 + 12);
      v128 = (uint64_t **)(a2 + 240);
      v129 = (_QWORD *)(a2 + 240);
      v130 = *v142;
      if (*v142)
        break;
LABEL_84:
      v134 = (char *)operator new(0x238uLL);
      *((_QWORD *)v134 + 4) = v125;
      *((_QWORD *)v134 + 5) = v126;
      *((_DWORD *)v134 + 12) = v127;
      *(_QWORD *)v134 = 0;
      *((_QWORD *)v134 + 1) = 0;
      *((_QWORD *)v134 + 2) = v129;
      *v128 = (uint64_t *)v134;
      v135 = **(_QWORD **)(a2 + 232);
      v136 = (uint64_t *)v134;
      if (v135)
      {
        *(_QWORD *)(a2 + 232) = v135;
        v136 = *v128;
      }
      sub_20E868578(*(uint64_t **)(a2 + 240), v136);
      ++*(_QWORD *)(a2 + 248);
LABEL_87:
      *(_OWORD *)(v134 + 56) = v159;
      v137 = v134 + 56;
      v137[1] = v143;
      v137[2] = v144;
      v137[3] = v145;
      v137[4] = v146;
      v137[5] = v147;
      v137[6] = v148;
      v137[7] = v149;
      v137[8] = v150;
      v137[9] = v151;
      v137[10] = v152;
      v137[11] = v153;
      v137[12] = v154;
      v137[13] = v155;
      v137[14] = v156;
      v137[15] = v157;
      v137[16] = v158;
      v137[17] = v160;
      v137[18] = v161;
      v137[19] = v162;
      v137[20] = v163;
      v137[21] = v164;
      v137[22] = v165;
      v137[23] = v166;
      v137[24] = v167;
      v137[25] = v168;
      v137[26] = v169;
      v137[27] = v170;
      v137[28] = v171;
      v137[29] = v172;
      v137[30] = v173;
      v137[31] = v175;
      v138 = (_QWORD *)v93[1];
      if (v138)
      {
        do
        {
          v139 = v138;
          v138 = (_QWORD *)*v138;
        }
        while (v138);
      }
      else
      {
        do
        {
          v139 = (_QWORD *)v93[2];
          v76 = *v139 == (_QWORD)v93;
          v93 = v139;
        }
        while (!v76);
      }
      v93 = v139;
      if (v139 == i + 24)
        goto LABEL_61;
    }
    while (1)
    {
      while (1)
      {
        v129 = (_QWORD *)v130;
        v131 = *(_DWORD *)(v130 + 48);
        if (v127 == v131)
          break;
        if (v127 < v131)
          goto LABEL_71;
        if (v131 >= v127)
          goto LABEL_93;
LABEL_82:
        v130 = v129[1];
        if (!v130)
        {
          v128 = (uint64_t **)(v129 + 1);
          goto LABEL_84;
        }
      }
      v132 = v129[4];
      if (v125 < v132)
        goto LABEL_71;
      if (v125 != v132)
      {
        if (v132 >= v125)
        {
LABEL_93:
          v134 = (char *)v129;
          goto LABEL_87;
        }
        goto LABEL_82;
      }
      v133 = *((_DWORD *)v129 + 10);
      if (v126 >= v133)
      {
        if (v133 >= v126)
          goto LABEL_93;
        goto LABEL_82;
      }
LABEL_71:
      v130 = *v129;
      v128 = (uint64_t **)v129;
      if (!*v129)
        goto LABEL_84;
    }
  }
LABEL_61:
  v94 = i[20];
  v95 = i[21];
  *(_QWORD *)&v211 = 0;
  v96 = 0uLL;
  v210 = 0u;
  v97 = v95 - v94;
  if (v95 == v94)
  {
    v123 = 0;
    v124 = *v140;
    if (!*v140)
      goto LABEL_67;
    goto LABEL_66;
  }
  v98 = 0xCBEEA4E1A08AD8F3 * (v97 >> 3);
  if (v98 >= 0x8AD8F2FBA93869)
    sub_20E867F44();
  *(_QWORD *)&v210 = operator new(v97);
  *((_QWORD *)&v210 + 1) = v210;
  *(_QWORD *)&v211 = v210 + 472 * v98;
  do
  {
    __s2.f64[1] = 0.0;
    __s2.f64[0] = *(float64_t *)v94;
    LODWORD(__s2.f64[1]) = *(_DWORD *)(v94 + 8);
    LODWORD(v180) = *(_DWORD *)(v94 + 16);
    *(_QWORD *)&v181 = 0;
    *((_QWORD *)&v180 + 1) = *(_QWORD *)(v94 + 24);
    LODWORD(v181) = *(_DWORD *)(v94 + 32);
    DWORD2(v181) = *(_DWORD *)(v94 + 40);
    v100 = *(_OWORD *)(v94 + 48);
    v99 = *(_OWORD *)(v94 + 64);
    v102 = *(_OWORD *)(v94 + 80);
    v101 = *(_OWORD *)(v94 + 96);
    v104 = *(_OWORD *)(v94 + 112);
    v103 = *(_OWORD *)(v94 + 128);
    v105 = *(_OWORD *)(v94 + 160);
    v188 = *(_OWORD *)(v94 + 144);
    v189 = v105;
    v186 = v104;
    v187 = v103;
    v184 = v102;
    v185 = v101;
    v182 = v100;
    v183 = v99;
    v107 = *(_OWORD *)(v94 + 432);
    v106 = *(_OWORD *)(v94 + 448);
    v109 = *(_OWORD *)(v94 + 400);
    v108 = *(_OWORD *)(v94 + 416);
    v111 = *(_OWORD *)(v94 + 368);
    v110 = *(_OWORD *)(v94 + 384);
    v113 = *(_OWORD *)(v94 + 336);
    v112 = *(_OWORD *)(v94 + 352);
    v115 = *(_OWORD *)(v94 + 304);
    v114 = *(_OWORD *)(v94 + 320);
    v117 = *(_OWORD *)(v94 + 272);
    v116 = *(_OWORD *)(v94 + 288);
    v119 = *(_OWORD *)(v94 + 240);
    v118 = *(_OWORD *)(v94 + 256);
    v121 = *(_OWORD *)(v94 + 208);
    v120 = *(_OWORD *)(v94 + 224);
    v122 = *(_OWORD *)(v94 + 192);
    v190 = *(_OWORD *)(v94 + 176);
    v191 = v122;
    v192 = v121;
    v193 = v120;
    v194 = v119;
    v195 = v118;
    v196 = v117;
    v197 = v116;
    v198 = v115;
    v199 = v114;
    v200 = v113;
    v201 = v112;
    v202 = v111;
    v203 = v110;
    v204 = v109;
    v205 = v108;
    v206 = v107;
    v207 = v106;
    v208 = *(_DWORD *)(v94 + 464);
    v209 = 0;
    sub_20F269ED8((char **)&v210, (__int128 *)&__s2);
    v94 += 472;
  }
  while (v94 != v95);
  v96 = v210;
  v123 = v211;
  v124 = *v140;
  if (*v140)
  {
LABEL_66:
    *(_QWORD *)(a2 + 216) = v124;
    v174 = v96;
    operator delete(v124);
    v96 = v174;
    *v140 = 0;
    *(_QWORD *)(a2 + 216) = 0;
    *(_QWORD *)(a2 + 224) = 0;
  }
LABEL_67:
  *(_OWORD *)(a2 + 208) = v96;
  *(_QWORD *)(a2 + 224) = v123;
}

void sub_20F448400(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x212BC6398](v2, 0x20C40313AD07FLL);
  sub_20E9545B0(v1);
  _Unwind_Resume(a1);
}

void sub_20F44842C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = (void *)STACK[0x420];
  if (STACK[0x420])
  {
    STACK[0x428] = (unint64_t)v3;
    operator delete(v3);
    sub_20E9545B0(v1);
    _Unwind_Resume(a1);
  }
  sub_20E9545B0(v1);
  _Unwind_Resume(a1);
}

void sub_20F4484C8(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20EB0BD38();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20F4485C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20E89FB98(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t *sub_20F4485F0(uint64_t **a1, uint64_t *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t *v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t *v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    v9 = *((_DWORD *)a2 + 2);
    v10 = *((_DWORD *)a2 + 4);
    while (1)
    {
      while (1)
      {
        v11 = v6;
        v12 = v6[4];
        if (v8 == v12)
          break;
        if (v8 < v12)
          goto LABEL_3;
        if (v12 >= v8)
          return v11;
LABEL_14:
        v6 = (uint64_t *)v11[1];
        if (!v6)
        {
          v7 = (uint64_t **)(v11 + 1);
          goto LABEL_17;
        }
      }
      v13 = *((_DWORD *)v11 + 10);
      if (v9 != v13)
      {
        if (v9 < v13)
          goto LABEL_3;
        if (v13 >= v9)
          return v11;
        goto LABEL_14;
      }
      v14 = *((_DWORD *)v11 + 12);
      if (v10 >= v14)
      {
        if (v14 >= v10)
          return v11;
        goto LABEL_14;
      }
LABEL_3:
      v6 = (uint64_t *)*v11;
      v7 = (uint64_t **)v11;
      if (!*v11)
        goto LABEL_17;
    }
  }
  v11 = (uint64_t *)(a1 + 1);
LABEL_17:
  v15 = v11;
  v16 = operator new(0x238uLL);
  v17 = *((_QWORD *)*a4 + 2);
  v16[2] = **a4;
  *((_QWORD *)v16 + 6) = v17;
  *(_OWORD *)((char *)v16 + 72) = 0u;
  *(_OWORD *)((char *)v16 + 88) = 0u;
  *(_OWORD *)((char *)v16 + 104) = 0u;
  *(_OWORD *)((char *)v16 + 120) = 0u;
  *(_OWORD *)((char *)v16 + 136) = 0u;
  *(_OWORD *)((char *)v16 + 152) = 0u;
  *(_OWORD *)((char *)v16 + 168) = 0u;
  *(_OWORD *)((char *)v16 + 184) = 0u;
  *(_OWORD *)((char *)v16 + 200) = 0u;
  *(_OWORD *)((char *)v16 + 216) = 0u;
  *(_OWORD *)((char *)v16 + 232) = 0u;
  *(_OWORD *)((char *)v16 + 248) = 0u;
  *(_OWORD *)((char *)v16 + 264) = 0u;
  *(_OWORD *)((char *)v16 + 280) = 0u;
  *(_OWORD *)((char *)v16 + 56) = 0u;
  *(_OWORD *)((char *)v16 + 296) = 0u;
  *(_OWORD *)((char *)v16 + 312) = 0u;
  *(_OWORD *)((char *)v16 + 328) = 0u;
  *(_OWORD *)((char *)v16 + 344) = 0u;
  *(_OWORD *)((char *)v16 + 360) = 0u;
  *(_OWORD *)((char *)v16 + 376) = 0u;
  *(_OWORD *)((char *)v16 + 392) = 0u;
  *(_OWORD *)((char *)v16 + 408) = 0u;
  *(_OWORD *)((char *)v16 + 424) = 0u;
  *(_OWORD *)((char *)v16 + 440) = 0u;
  *(_OWORD *)((char *)v16 + 456) = 0u;
  *(_OWORD *)((char *)v16 + 472) = 0u;
  *(_OWORD *)((char *)v16 + 488) = 0u;
  *(_OWORD *)((char *)v16 + 504) = 0u;
  *(_OWORD *)((char *)v16 + 520) = 0u;
  *(_OWORD *)((char *)v16 + 536) = 0u;
  *(_OWORD *)((char *)v16 + 552) = 0u;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = 0;
  *((_QWORD *)v16 + 2) = v15;
  *v7 = (uint64_t *)v16;
  v18 = (uint64_t *)v16;
  v19 = (uint64_t *)**a1;
  if (v19)
  {
    *a1 = v19;
    v18 = *v7;
  }
  sub_20E868578(a1[1], v18);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t *)v16;
}

uint64_t *sub_20F448798(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (uint64_t *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v15 = operator new(0x30uLL);
  *v15 = 0;
  v15[1] = v7;
  *((_DWORD *)v15 + 4) = **a4;
  v15[4] = 0;
  v15[5] = 0;
  v15[3] = 0;
  *((_DWORD *)v15 + 10) = -1;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    v7 = v4;
  }
  else
  {
    v18 = 1;
    if (v8 >= 3)
      v18 = (v8 & (v8 - 1)) != 0;
    v19 = v18 | (2 * v8);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      prime = v20;
    else
      prime = v19;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_36;
    if (prime < v8)
    {
      v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v23 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
      {
        v22 = std::__next_prime(v22);
      }
      else
      {
        v24 = 1 << -(char)__clz(v22 - 1);
        if (v22 >= 2)
          v22 = v24;
      }
      if (prime <= v22)
        prime = v22;
      if (prime < v8)
LABEL_36:
        sub_20E8D2B3C(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v7 %= v8;
    }
    else
    {
      v7 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
  if (v26)
  {
    *v15 = *v26;
LABEL_59:
    *v26 = v15;
    goto LABEL_60;
  }
  *v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v25 + 8 * v7) = a1 + 16;
  if (*v15)
  {
    v27 = *(_QWORD *)(*v15 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v27 >= v8)
        v27 %= v8;
    }
    else
    {
      v27 &= v8 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_20F448A98(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20F448AAC(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  uint64_t **v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  _QWORD **v17;
  BOOL v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  __int128 v38;
  uint64_t v39;
  _QWORD **v40;
  _QWORD *v41[2];
  __int128 *v42;

  sub_20F467F58(a1, a2 + 16);
  sub_20F7F6EAC((unint64_t)a1, a2 + 120);
  v4 = *(_QWORD **)(a2 + 192);
  v41[0] = 0;
  v41[1] = 0;
  v40 = v41;
  sub_20E94F000((uint64_t *)&v40, v4, (_QWORD *)(a2 + 200));
  sub_20E86872C(a2 + 192, *(_QWORD **)(a2 + 200));
  *(_QWORD *)(a2 + 200) = 0;
  *(_QWORD *)(a2 + 208) = 0;
  *(_QWORD *)(a2 + 192) = a2 + 200;
  v5 = (uint64_t)v40;
  if (v40 != v41)
  {
    do
    {
      v38 = *(_OWORD *)(v5 + 32);
      v6 = *(_QWORD *)(v5 + 48);
      v39 = v6;
      v7 = a1[1];
      if (v7)
      {
        v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
        v8.i16[0] = vaddlv_u8(v8);
        if (v8.u32[0] > 1uLL)
        {
          v9 = v6;
          if (v7 <= v6)
            v9 = v6 % v7;
        }
        else
        {
          v9 = ((_DWORD)v7 - 1) & v6;
        }
        v10 = *(uint64_t ***)(*a1 + 8 * v9);
        if (v10)
        {
          v11 = *v10;
          if (v11)
          {
            if (v8.u32[0] < 2uLL)
            {
              v12 = v7 - 1;
              while (1)
              {
                v14 = v11[1];
                if (v14 == v6)
                {
                  if (*((_DWORD *)v11 + 4) == (_DWORD)v6)
                    goto LABEL_25;
                }
                else if ((v14 & v12) != v9)
                {
                  goto LABEL_26;
                }
                v11 = (uint64_t *)*v11;
                if (!v11)
                  goto LABEL_26;
              }
            }
            do
            {
              v13 = v11[1];
              if (v13 == v6)
              {
                if (*((_DWORD *)v11 + 4) == (_DWORD)v6)
                {
LABEL_25:
                  LODWORD(v39) = *((_DWORD *)v11 + 5);
                  break;
                }
              }
              else
              {
                if (v13 >= v7)
                  v13 %= v7;
                if (v13 != v9)
                  break;
              }
              v11 = (uint64_t *)*v11;
            }
            while (v11);
          }
        }
      }
LABEL_26:
      v42 = &v38;
      v15 = sub_20F4485F0((uint64_t **)(a2 + 192), (uint64_t *)&v38, (uint64_t)&unk_2102DB95C, &v42);
      memcpy(v15 + 7, (const void *)(v5 + 56), 0x200uLL);
      v16 = *(_QWORD **)(v5 + 8);
      if (v16)
      {
        do
        {
          v17 = (_QWORD **)v16;
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = *(_QWORD ***)(v5 + 16);
          v18 = *v17 == (_QWORD *)v5;
          v5 = (uint64_t)v17;
        }
        while (!v18);
      }
      v5 = (uint64_t)v17;
    }
    while (v17 != v41);
  }
  v19 = *(_QWORD **)(a2 + 216);
  v20 = (_QWORD *)(a2 + 224);
  if (v19 != (_QWORD *)(a2 + 224))
  {
    v21 = a1[1];
    if (v21)
    {
      v22 = *a1;
      v23 = v21 - 1;
      if ((v21 & (v21 - 1)) != 0)
      {
        do
        {
          v27 = *((unsigned int *)v19 + 26);
          v28 = v27;
          if (v21 <= v27)
            v28 = v27 % v21;
          v29 = *(uint64_t **)(v22 + 8 * v28);
          if (v29)
          {
            while (1)
            {
              v29 = (uint64_t *)*v29;
              if (!v29)
                break;
              v30 = v29[1];
              if (v30 == v27)
              {
                if (*((_DWORD *)v29 + 4) == (_DWORD)v27)
                {
                  *((_DWORD *)v19 + 26) = *((_DWORD *)v29 + 5);
                  break;
                }
              }
              else
              {
                if (v30 >= v21)
                  v30 %= v21;
                if (v30 != v28)
                  break;
              }
            }
          }
          v31 = (_QWORD *)v19[1];
          if (v31)
          {
            do
            {
              v32 = v31;
              v31 = (_QWORD *)*v31;
            }
            while (v31);
          }
          else
          {
            do
            {
              v32 = (_QWORD *)v19[2];
              v18 = *v32 == (_QWORD)v19;
              v19 = v32;
            }
            while (!v18);
          }
          v19 = v32;
        }
        while (v32 != v20);
      }
      else
      {
        v24 = v21 + 0xFFFFFFFF;
        do
        {
          v33 = *((unsigned int *)v19 + 26);
          v34 = *(uint64_t **)(v22 + 8 * (v24 & v33));
          if (v34)
          {
            while (1)
            {
              v34 = (uint64_t *)*v34;
              if (!v34)
                break;
              v35 = v34[1];
              if (v35 == v33)
              {
                if (*((_DWORD *)v34 + 4) == (_DWORD)v33)
                {
                  *((_DWORD *)v19 + 26) = *((_DWORD *)v34 + 5);
                  break;
                }
              }
              else if ((v35 & v23) != (v24 & v33))
              {
                break;
              }
            }
          }
          v36 = (_QWORD *)v19[1];
          if (v36)
          {
            do
            {
              v37 = v36;
              v36 = (_QWORD *)*v36;
            }
            while (v36);
          }
          else
          {
            do
            {
              v37 = (_QWORD *)v19[2];
              v18 = *v37 == (_QWORD)v19;
              v19 = v37;
            }
            while (!v18);
          }
          v19 = v37;
        }
        while (v37 != v20);
      }
    }
    else
    {
      do
      {
        v25 = (_QWORD *)v19[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v19[2];
            v18 = *v26 == (_QWORD)v19;
            v19 = v26;
          }
          while (!v18);
        }
        v19 = v26;
      }
      while (v26 != v20);
    }
  }
  sub_20E86872C((uint64_t)&v40, v41[0]);
}

void sub_20F448E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, _QWORD *a13)
{
  sub_20E86872C((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_20F448E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, _QWORD *a13)
{
  sub_20E86872C((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

double sub_20F448E84@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char **a4@<X8>)
{
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  void *v24;
  void *v25;
  char *v26;
  char *v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  char *v32;
  void *v33;
  void *v34;
  _QWORD *v35;
  char *v36;
  int v37;
  int v38;
  uint64_t *v39;
  _QWORD *v40;
  _QWORD *v41;
  BOOL v42;
  double result;
  __int128 v44;
  __int128 v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  __int128 v50;
  void **v51;
  void *__p[66];

  __p[64] = *(void **)MEMORY[0x24BDAC8D0];
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  a4[4] = 0;
  a4[3] = (char *)(a4 + 4);
  v8 = (uint64_t **)(a4 + 3);
  a4[5] = 0;
  *((_OWORD *)a4 + 3) = 0u;
  v9 = (uint64_t *)(a4 + 6);
  *((_BYTE *)a4 + 96) = 0;
  *((_OWORD *)a4 + 4) = 0u;
  *(char **)((char *)a4 + 77) = 0;
  v10 = *(_QWORD *)(a1 + 424);
  v12 = *(uint64_t **)(v10 + 40);
  v11 = *(uint64_t **)(v10 + 48);
  v50 = 0uLL;
  v49 = 0;
  v13 = (char *)v11 - (char *)v12;
  if (v11 == v12)
  {
    v15 = 0;
    v46 = v9;
    v47 = a2;
    v48 = a3;
LABEL_17:
    *a4 = v15;
    a4[1] = v15;
    a4[2] = (char *)v13;
    goto LABEL_39;
  }
  if ((unint64_t)v13 >= 0x5555555555555551)
    sub_20E92CED8();
  v14 = v13 >> 4;
  v15 = (char *)operator new(48 * (v13 >> 4));
  v13 = (uint64_t)&v15[48 * v14];
  v49 = v15;
  *(_QWORD *)&v50 = v15;
  *((_QWORD *)&v50 + 1) = v13;
  v46 = v9;
  v47 = a2;
  v48 = a3;
  if (v11 == v12)
    goto LABEL_17;
  do
  {
    sub_20F43ABE0((uint64_t)__p, *v12);
    v17 = v50;
    if ((unint64_t)v50 < *((_QWORD *)&v50 + 1))
    {
      *(_OWORD *)v50 = 0uLL;
      *(_QWORD *)(v17 + 16) = 0;
      *(_OWORD *)v17 = *(_OWORD *)__p;
      *(void **)(v17 + 16) = __p[2];
      memset(__p, 0, 24);
      v16 = __p[5];
      *(_OWORD *)(v17 + 24) = *(_OWORD *)&__p[3];
      *(_QWORD *)(v17 + 40) = v16;
      *(_QWORD *)&v50 = v17 + 48;
    }
    else
    {
      *(_QWORD *)&v50 = sub_20F2818AC((void **)&v49, (uint64_t)__p);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    v12 += 2;
  }
  while (v12 != v11);
  v18 = v49;
  v19 = v50;
  v20 = *a4;
  if (*a4)
  {
    v45 = v50;
    v21 = a4[1];
    v22 = *a4;
    if (v21 != v20)
    {
      v23 = a4[1];
      do
      {
        v25 = (void *)*((_QWORD *)v23 - 6);
        v23 -= 48;
        v24 = v25;
        if (v25)
        {
          *((_QWORD *)v21 - 5) = v24;
          operator delete(v24);
        }
        v21 = v23;
      }
      while (v23 != v20);
      v22 = *a4;
    }
    a4[1] = v20;
    operator delete(v22);
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    v19 = v45;
  }
  *a4 = v18;
  *(_OWORD *)(a4 + 1) = v19;
  v26 = (char *)v19;
  if (v18 != (char *)v19)
  {
    while (*(_QWORD *)v18 != *((_QWORD *)v18 + 1))
    {
      v18 += 48;
      if (v18 == (char *)v19)
        goto LABEL_39;
    }
    if (v18 != (char *)v19)
    {
      v27 = v18 + 48;
      if (v18 + 48 != (char *)v19)
      {
        do
        {
          v29 = *(_QWORD *)v27;
          v30 = *((_QWORD *)v27 + 1);
          if (*(_QWORD *)v27 != v30)
          {
            v31 = *(void **)v18;
            if (*(_QWORD *)v18)
            {
              *((_QWORD *)v18 + 1) = v31;
              operator delete(v31);
              *(_QWORD *)v18 = 0;
              *((_QWORD *)v18 + 1) = 0;
              *((_QWORD *)v18 + 2) = 0;
              v29 = *(_QWORD *)v27;
              v30 = *((_QWORD *)v27 + 1);
            }
            *(_QWORD *)v18 = v29;
            *((_QWORD *)v18 + 1) = v30;
            *((_QWORD *)v18 + 2) = *((_QWORD *)v27 + 2);
            *(_QWORD *)v27 = 0;
            *((_QWORD *)v27 + 1) = 0;
            *((_QWORD *)v27 + 2) = 0;
            v28 = *(_OWORD *)(v27 + 24);
            *((_DWORD *)v18 + 10) = *((_DWORD *)v27 + 10);
            *(_OWORD *)(v18 + 24) = v28;
            v18 += 48;
          }
          v27 += 48;
        }
        while (v27 != v26);
        v26 = a4[1];
      }
    }
    if (v18 != v26)
    {
      v32 = v26;
      do
      {
        v34 = (void *)*((_QWORD *)v32 - 6);
        v32 -= 48;
        v33 = v34;
        if (v34)
        {
          *((_QWORD *)v26 - 5) = v33;
          operator delete(v33);
        }
        v26 = v32;
      }
      while (v32 != v18);
      a4[1] = v18;
    }
  }
LABEL_39:
  v35 = *(_QWORD **)(a1 + 296);
  if (v35 != (_QWORD *)(a1 + 304))
  {
    do
    {
      v36 = (char *)v35[4];
      v37 = *((_DWORD *)v35 + 10);
      v38 = *((_DWORD *)v35 + 12);
      memcpy(__p, v35 + 7, 0x200uLL);
      v49 = v36;
      LODWORD(v50) = v37;
      DWORD2(v50) = v38;
      v51 = (void **)&v49;
      v39 = sub_20F4485F0(v8, (uint64_t *)&v49, (uint64_t)&unk_2102DB95C, (_OWORD **)&v51);
      memcpy(v39 + 7, __p, 0x200uLL);
      v40 = (_QWORD *)v35[1];
      if (v40)
      {
        do
        {
          v41 = v40;
          v40 = (_QWORD *)*v40;
        }
        while (v40);
      }
      else
      {
        do
        {
          v41 = (_QWORD *)v35[2];
          v42 = *v41 == (_QWORD)v35;
          v35 = v41;
        }
        while (!v42);
      }
      v35 = v41;
    }
    while (v41 != (_QWORD *)(a1 + 304));
  }
  if (*(_BYTE *)(v48 + 8))
    sub_20F46840C(*(uint64_t **)v48, a4);
  __p[0] = *(void **)(a1 + 320);
  LODWORD(__p[1]) = *(_DWORD *)(a1 + 328);
  *(void **)((char *)&__p[1] + 4) = *(void **)(a1 + 332);
  HIDWORD(__p[2]) = *(_DWORD *)(a1 + 340);
  *(_OWORD *)&__p[3] = *(_OWORD *)(a1 + 344);
  result = *(double *)__p;
  v44 = *(_OWORD *)&__p[2];
  *(_OWORD *)((char *)a4 + 60) = *(_OWORD *)__p;
  *v46 = *(_QWORD *)v47;
  *((_DWORD *)v46 + 2) = *(_DWORD *)(v47 + 8);
  *(_OWORD *)((char *)a4 + 76) = v44;
  *(char **)((char *)a4 + 92) = (char *)__p[4];
  return result;
}

void sub_20F449338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  char **v20;

  sub_20EE5B500(v20);
  _Unwind_Resume(a1);
}

void **sub_20F44939C(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  void *v6;
  void *v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = (char *)a1[1];
      do
      {
        v7 = (void *)*((_QWORD *)v5 - 6);
        v5 -= 48;
        v6 = v7;
        if (v7)
        {
          *((_QWORD *)v3 - 5) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_20F449410(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char **a4@<X8>)
{
  uint64_t **v6;
  char **v7;
  uint64_t v8;
  const void *v9;
  int64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  char *v30;
  char *v31;
  void *v32;
  void *v33;
  _QWORD *v34;
  _QWORD *v35;
  char *v36;
  uint64_t v37;
  int v38;
  char *v39;
  int v40;
  _QWORD *v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t *v48;
  _QWORD *v49;
  _QWORD *v50;
  __int128 v51;
  char **v52;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t *v61;
  _OWORD __dst[32];
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  *a4 = 0;
  a4[1] = 0;
  a4[4] = 0;
  a4[2] = 0;
  a4[3] = (char *)(a4 + 4);
  v6 = (uint64_t **)(a4 + 3);
  a4[5] = 0;
  *((_OWORD *)a4 + 3) = 0u;
  v7 = a4 + 6;
  *((_BYTE *)a4 + 96) = 0;
  *((_OWORD *)a4 + 4) = 0u;
  *(char **)((char *)a4 + 77) = 0;
  v58 = 0;
  v59 = 0;
  v60 = 0;
  v9 = *(const void **)a3;
  v8 = *(_QWORD *)(a3 + 8);
  v10 = v8 - *(_QWORD *)a3;
  v52 = v7;
  if (v8 == *(_QWORD *)a3)
  {
    v12 = 0;
    v11 = 0;
    v54 = a1;
    v16 = *(_QWORD *)(a1 + 424);
    v15 = *(uint64_t **)(v16 + 40);
    v14 = *(uint64_t **)(v16 + 48);
    if (v15 == v14)
      goto LABEL_38;
  }
  else
  {
    if (v10 < 0)
      sub_20E867F44();
    v11 = (char *)operator new(v10);
    v12 = &v11[16 * (v10 >> 4)];
    v58 = v11;
    v60 = v12;
    memcpy(v11, v9, v10 - 4);
    v59 = v12;
    v54 = a1;
    v13 = *(_QWORD *)(a1 + 424);
    v15 = *(uint64_t **)(v13 + 40);
    v14 = *(uint64_t **)(v13 + 48);
    if (v15 == v14)
      goto LABEL_38;
  }
  v17 = 0;
  v18 = (unint64_t *)(a4 + 2);
  do
  {
    v19 = *v15;
    v20 = v12;
    if (v11 != v12)
    {
      v20 = v11;
      while (*(_QWORD *)v20 != *(_QWORD *)v19 || *((_DWORD *)v20 + 2) != *(_DWORD *)(v19 + 8))
      {
        v20 += 16;
        if (v20 == v12)
          goto LABEL_16;
      }
    }
    if (v20 == v12)
    {
LABEL_16:
      if (*(_QWORD *)(v19 + 616) != *(_QWORD *)(v19 + 624))
      {
        if (v17 < *v18)
        {
          sub_20F43ABE0(v17, *v15);
          v17 += 48;
          a4[1] = (char *)v17;
        }
        else
        {
          v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - (_QWORD)*a4) >> 4);
          v22 = v21 + 1;
          if (v21 + 1 > 0x555555555555555)
            sub_20E92CED8();
          if (0x5555555555555556 * ((uint64_t)(*v18 - (_QWORD)*a4) >> 4) > v22)
            v22 = 0x5555555555555556 * ((uint64_t)(*v18 - (_QWORD)*a4) >> 4);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v18 - (_QWORD)*a4) >> 4) >= 0x2AAAAAAAAAAAAAALL)
            v23 = 0x555555555555555;
          else
            v23 = v22;
          *(_QWORD *)&__dst[2] = a4 + 2;
          if (v23)
          {
            if (v23 > 0x555555555555555)
              sub_20E877A38();
            v24 = (char *)operator new(48 * v23);
          }
          else
          {
            v24 = 0;
          }
          *(_QWORD *)&__dst[0] = v24;
          *((_QWORD *)&__dst[0] + 1) = &v24[48 * v21];
          *(_QWORD *)&__dst[1] = *((_QWORD *)&__dst[0] + 1);
          *((_QWORD *)&__dst[1] + 1) = &v24[48 * v23];
          sub_20F43ABE0(*((uint64_t *)&__dst[0] + 1), v19);
          v25 = (char *)*((_QWORD *)&__dst[0] + 1);
          v17 = *((_QWORD *)&__dst[0] + 1) + 48;
          v26 = *a4;
          v27 = a4[1];
          if (v27 == *a4)
          {
            *a4 = (char *)*((_QWORD *)&__dst[0] + 1);
            a4[1] = (char *)v17;
            a4[2] = (char *)*((_QWORD *)&__dst[1] + 1);
          }
          else
          {
            do
            {
              *((_QWORD *)v25 - 6) = 0;
              *((_QWORD *)v25 - 5) = 0;
              v25 -= 48;
              *((_QWORD *)v25 + 2) = 0;
              v28 = *((_OWORD *)v27 - 3);
              v27 -= 48;
              *(_OWORD *)v25 = v28;
              *((_QWORD *)v25 + 2) = *((_QWORD *)v27 + 2);
              *(_QWORD *)v27 = 0;
              *((_QWORD *)v27 + 1) = 0;
              *((_QWORD *)v27 + 2) = 0;
              v29 = *(_OWORD *)(v27 + 24);
              *((_QWORD *)v25 + 5) = *((_QWORD *)v27 + 5);
              *(_OWORD *)(v25 + 24) = v29;
            }
            while (v27 != v26);
            v27 = *a4;
            v30 = a4[1];
            *a4 = v25;
            a4[1] = (char *)v17;
            a4[2] = (char *)*((_QWORD *)&__dst[1] + 1);
            if (v30 != v27)
            {
              v31 = v30;
              do
              {
                v33 = (void *)*((_QWORD *)v31 - 6);
                v31 -= 48;
                v32 = v33;
                if (v33)
                {
                  *((_QWORD *)v30 - 5) = v32;
                  operator delete(v32);
                }
                v30 = v31;
              }
              while (v31 != v27);
            }
          }
          if (v27)
            operator delete(v27);
        }
        a4[1] = (char *)v17;
      }
    }
    v15 += 2;
  }
  while (v15 != v14);
LABEL_38:
  v34 = *(_QWORD **)(v54 + 296);
  v35 = (_QWORD *)(v54 + 304);
  if (v34 != (_QWORD *)(v54 + 304))
  {
    v36 = v59;
    if (v11 == v59)
    {
      do
      {
        v45 = v34[4];
        v46 = *((_DWORD *)v34 + 10);
        v47 = *((_DWORD *)v34 + 12);
        memcpy(__dst, v34 + 7, sizeof(__dst));
        v55 = v45;
        v56 = v46;
        v57 = v47;
        v61 = &v55;
        v48 = sub_20F4485F0(v6, &v55, (uint64_t)&unk_2102DB95C, (_OWORD **)&v61);
        memcpy(v48 + 7, __dst, 0x200uLL);
        v49 = (_QWORD *)v34[1];
        if (v49)
        {
          do
          {
            v50 = v49;
            v49 = (_QWORD *)*v49;
          }
          while (v49);
        }
        else
        {
          do
          {
            v50 = (_QWORD *)v34[2];
            v44 = *v50 == (_QWORD)v34;
            v34 = v50;
          }
          while (!v44);
        }
        v34 = v50;
      }
      while (v50 != v35);
    }
    else
    {
      do
      {
        v37 = v34[4];
        v38 = *((_DWORD *)v34 + 10);
        v39 = v11;
        v40 = *((_DWORD *)v34 + 12);
        while (*(_QWORD *)v39 != v37 || *((_DWORD *)v39 + 2) != v38)
        {
          v39 += 16;
          if (v39 == v36)
            goto LABEL_49;
        }
        if (v39 == v36)
        {
LABEL_49:
          memcpy(__dst, v34 + 7, sizeof(__dst));
          v55 = v37;
          v56 = v38;
          v57 = v40;
          v61 = &v55;
          v42 = sub_20F4485F0(v6, &v55, (uint64_t)&unk_2102DB95C, (_OWORD **)&v61);
          memcpy(v42 + 7, __dst, 0x200uLL);
          v41 = (_QWORD *)v34[1];
          if (!v41)
          {
            do
            {
LABEL_52:
              v43 = (_QWORD *)v34[2];
              v44 = *v43 == (_QWORD)v34;
              v34 = v43;
            }
            while (!v44);
            goto LABEL_41;
          }
        }
        else
        {
          v41 = (_QWORD *)v34[1];
          if (!v41)
            goto LABEL_52;
        }
        do
        {
          v43 = v41;
          v41 = (_QWORD *)*v41;
        }
        while (v41);
LABEL_41:
        v34 = v43;
      }
      while (v43 != v35);
    }
  }
  *(_QWORD *)&__dst[0] = *(_QWORD *)(v54 + 320);
  DWORD2(__dst[0]) = *(_DWORD *)(v54 + 328);
  *(_QWORD *)((char *)__dst + 12) = *(_QWORD *)(v54 + 332);
  DWORD1(__dst[1]) = *(_DWORD *)(v54 + 340);
  *(_OWORD *)((char *)&__dst[1] + 8) = *(_OWORD *)(v54 + 344);
  v51 = __dst[1];
  *(_OWORD *)((char *)a4 + 60) = __dst[0];
  *v52 = *(char **)a2;
  *((_DWORD *)v52 + 2) = *(_DWORD *)(a2 + 8);
  *(_OWORD *)((char *)a4 + 76) = v51;
  *(char **)((char *)a4 + 92) = *(char **)&__dst[2];
  if (v11)
    operator delete(v11);
}

void sub_20F449958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  char **v21;

  if (__p)
    operator delete(__p);
  sub_20EE5B500(v21);
  _Unwind_Resume(a1);
}

void sub_20F4499B4(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  int64x2_t *v9;
  int64x2_t *v10;
  char *i8;
  int64x2_t *v12;
  _BYTE *v13;
  _BYTE *v14;
  int64_t v15;
  void *v16;
  unint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  int64x2_t *v24;
  int64x2_t *v25;
  int64x2_t *v26;
  int64x2_t v27;
  void *v28;
  uint64_t *v29;
  char *v30;
  char *i;
  void *v32;
  unint64_t v33;
  char *v35;
  char *v36;
  int64x2_t v37;
  uint64_t v38;
  void *__p[2];
  unint64_t v40;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = *(_QWORD *)(a1 + 424);
  v6 = *(char **)(v4 + 40);
  v5 = *(char **)(v4 + 48);
  v7 = v5 - v6;
  if (v5 == v6)
  {
    i8 = 0;
    v10 = 0;
    goto LABEL_41;
  }
  if ((unint64_t)v7 >= 0x5555555555555551)
    sub_20E867F44();
  v8 = v7 >> 4;
  v9 = (int64x2_t *)operator new(48 * (v7 >> 4));
  v10 = v9;
  i8 = v9[3 * v8].i8;
  v35 = (char *)v9;
  v36 = i8;
  if (v5 == v6)
  {
LABEL_41:
    v29 = a3;
    *a3 = (uint64_t)v10;
    a3[1] = (uint64_t)v10;
    a3[2] = (uint64_t)i8;
    if (*(_BYTE *)(a2 + 8))
      goto LABEL_39;
    return;
  }
  v33 = a2;
  v12 = v9;
  do
  {
    while (1)
    {
      a2 = a2 & 0xFFFFFFFF00000000 | *(unsigned int *)(*(_QWORD *)v6 + 8);
      v37.i64[0] = **(_QWORD **)v6;
      v37.i64[1] = a2;
      LODWORD(v38) = *(_DWORD *)(*(_QWORD *)v6 + 16);
      v40 = 0;
      *(_OWORD *)__p = 0uLL;
      v13 = *(_BYTE **)(*(_QWORD *)v6 + 656);
      v14 = *(_BYTE **)(*(_QWORD *)v6 + 664);
      v15 = v14 - v13;
      if (v14 != v13)
        break;
      v17 = 0;
      v16 = 0;
      v18 = v36;
      if (v12 >= (int64x2_t *)v36)
        goto LABEL_11;
LABEL_5:
      *v12 = v37;
      v12[1].i64[0] = v38;
      v12[1].i64[1] = 0;
      v12[2].i64[0] = 0;
      v12[2].i64[1] = 0;
      *(int64x2_t *)((char *)v12 + 24) = *(int64x2_t *)__p;
      v12[2].i64[1] = v40;
      v12 += 3;
      v6 += 16;
      if (v6 == v5)
        goto LABEL_31;
    }
    if (v15 < 0)
      sub_20E867F44();
    v16 = operator new(v14 - v13);
    v17 = (unint64_t)v16 + 8 * (v15 >> 3);
    __p[0] = v16;
    v40 = v17;
    memcpy(v16, v13, v15);
    __p[1] = (void *)v17;
    v18 = v36;
    if (v12 < (int64x2_t *)v36)
      goto LABEL_5;
LABEL_11:
    v19 = v35;
    v20 = 0xAAAAAAAAAAAAAAABLL * (((char *)v12 - v35) >> 4) + 1;
    if (v20 > 0x555555555555555)
      sub_20E867F44();
    v21 = 0xAAAAAAAAAAAAAAABLL * ((v18 - v35) >> 4);
    if (2 * v21 > v20)
      v20 = 2 * v21;
    if (v21 >= 0x2AAAAAAAAAAAAAALL)
      v22 = 0x555555555555555;
    else
      v22 = v20;
    if (v22 > 0x555555555555555)
      sub_20E877A38();
    v23 = (char *)operator new(48 * v22);
    v24 = (int64x2_t *)&v23[16 * (((char *)v12 - v35) >> 4)];
    *v24 = v37;
    v24[2].i64[0] = 0;
    v24[2].i64[1] = 0;
    v24[1].i64[0] = v38;
    v24[1].i64[1] = (uint64_t)v16;
    v24[2] = vdupq_n_s64(v17);
    v25 = v24 + 3;
    if (v12 == (int64x2_t *)v35)
    {
      v35 = &v23[16 * (((char *)v12 - v35) >> 4)];
      v36 = &v23[48 * v22];
      if (v12)
        goto LABEL_26;
    }
    else
    {
      v26 = v12;
      do
      {
        v27 = v26[-3];
        v24[-2].i64[0] = v26[-2].i64[0];
        v24[-3] = v27;
        *(int64x2_t *)((char *)v24 - 24) = *(int64x2_t *)((char *)v26 - 24);
        v24[-1].i64[1] = v26[-1].i64[1];
        v24 -= 3;
        v26[-2].i64[1] = 0;
        v26[-1].i64[0] = 0;
        v26[-1].i64[1] = 0;
        v26 -= 3;
      }
      while (v26 != (int64x2_t *)v35);
      v35 = (char *)v24;
      v36 = &v23[48 * v22];
      do
      {
        v28 = (void *)v12[-2].i64[1];
        if (v28)
        {
          v12[-1].i64[0] = (uint64_t)v28;
          operator delete(v28);
        }
        v12 -= 3;
      }
      while (v12 != (int64x2_t *)v19);
      v12 = (int64x2_t *)v19;
      if (v19)
LABEL_26:
        operator delete(v12);
    }
    v12 = v25;
    v6 += 16;
  }
  while (v6 != v5);
LABEL_31:
  v29 = a3;
  v30 = (char *)*a3;
  if (*a3)
  {
    for (i = (char *)a3[1]; i != v30; i -= 48)
    {
      v32 = (void *)*((_QWORD *)i - 3);
      if (v32)
      {
        *((_QWORD *)i - 2) = v32;
        operator delete(v32);
      }
    }
    operator delete(v30);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  a2 = v33;
  *a3 = (uint64_t)v35;
  a3[1] = (uint64_t)v12;
  a3[2] = (uint64_t)v36;
  if (*(_BYTE *)(v33 + 8))
LABEL_39:
    sub_20F46872C(*(uint64_t **)a2, v29);
}

void sub_20F449D78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  sub_20E954954(&a12);
  sub_20E954954(a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20F449DF0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        v5 = v2 - 48;
        v4 = *(void **)(v2 - 48);
        *(_QWORD *)(a1 + 16) = v2 - 48;
        if (!v4)
          break;
        *(_QWORD *)(v2 - 40) = v4;
        operator delete(v4);
        v2 = *(_QWORD *)(a1 + 16);
        if (v2 == v3)
          goto LABEL_6;
      }
      v2 -= 48;
    }
    while (v5 != v3);
  }
LABEL_6:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

double sub_20F449E5C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  uint64_t *v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  char *v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  unsigned int v38;
  BOOL v39;
  uint64_t v40;
  char *v41;
  uint64_t **v42;
  _QWORD *v43;
  uint64_t v44;
  unsigned int v45;
  unint64_t v46;
  unsigned int v47;
  char *v48;
  uint64_t v49;
  uint64_t *v50;
  _OWORD *v51;
  uint64_t *v52;
  uint64_t *v53;
  BOOL v54;
  double result;
  __int128 v56;
  uint64_t v57;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  __int128 v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  _BYTE v98[48];
  __int128 v99;
  uint64_t v100;

  v100 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v90 = a1[1];
  if (*a1 == v90)
    goto LABEL_30;
  while (2)
  {
    v4 = *(char **)v3;
    v5 = *(char **)(v3 + 8);
    v95 = 0;
    v96 = 0;
    v97 = 0;
    v6 = v5 - v4;
    if (v5 == v4)
      goto LABEL_4;
    if (v6 < 0)
      sub_20ED343A8();
    v7 = (char *)operator new(v5 - v4);
    v95 = v7;
    v96 = v7;
    v97 = &v7[64 * (v6 >> 6)];
    do
    {
      while (1)
      {
        while (1)
        {
          *(_OWORD *)v98 = *(_OWORD *)v4;
          *(_OWORD *)&v98[16] = *((_OWORD *)v4 + 1);
          *(_OWORD *)&v98[32] = *((_OWORD *)v4 + 2);
          v99 = *((_OWORD *)v4 + 3);
          if (v7 >= v97)
            break;
          v8 = *(_OWORD *)v4;
          v9 = *((_OWORD *)v4 + 1);
          v10 = *((_OWORD *)v4 + 3);
          *((_OWORD *)v7 + 2) = *((_OWORD *)v4 + 2);
          *((_OWORD *)v7 + 3) = v10;
          *(_OWORD *)v7 = v8;
          *((_OWORD *)v7 + 1) = v9;
          v7 += 64;
          v96 = v7;
          v4 += 64;
          if (v4 == v5)
            goto LABEL_27;
        }
        v11 = v95;
        v12 = (v7 - v95) >> 6;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 58)
          sub_20ED343A8();
        v14 = v97 - v95;
        if ((v97 - v95) >> 5 > v13)
          v13 = v14 >> 5;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFC0)
          v15 = 0x3FFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        if (v15)
        {
          if (v15 >> 58)
            sub_20E877A38();
          v16 = (char *)operator new(v15 << 6);
        }
        else
        {
          v16 = 0;
        }
        v17 = &v16[64 * v12];
        v18 = *(_OWORD *)&v98[16];
        *(_OWORD *)v17 = *(_OWORD *)v98;
        *((_OWORD *)v17 + 1) = v18;
        v19 = v99;
        *((_OWORD *)v17 + 2) = *(_OWORD *)&v98[32];
        *((_OWORD *)v17 + 3) = v19;
        v20 = v17 + 64;
        if (v7 == v11)
        {
          v95 = v17;
          v96 = v17 + 64;
          v11 = v7;
          v97 = &v16[64 * v15];
          break;
        }
        do
        {
          v21 = *((_OWORD *)v7 - 4);
          v22 = *((_OWORD *)v7 - 3);
          v23 = *((_OWORD *)v7 - 1);
          *((_OWORD *)v17 - 2) = *((_OWORD *)v7 - 2);
          *((_OWORD *)v17 - 1) = v23;
          *((_OWORD *)v17 - 4) = v21;
          *((_OWORD *)v17 - 3) = v22;
          v17 -= 64;
          v7 -= 64;
        }
        while (v7 != v11);
        v95 = v17;
        v96 = v20;
        v97 = &v16[64 * v15];
        if (v11)
          break;
        v7 = v20;
        v96 = v20;
        v4 += 64;
        if (v4 == v5)
          goto LABEL_27;
      }
      operator delete(v11);
      v7 = v20;
      v96 = v20;
      v4 += 64;
    }
    while (v4 != v5);
LABEL_27:
    v92 = v95;
    v93 = v7;
    v94 = v97;
    if (v95 == v7
      || (v24 = *(_QWORD *)(a2 + 424),
          *(_OWORD *)v98 = *(unint64_t *)(v3 + 24),
          v25 = *(_DWORD *)(v3 + 40),
          *(_DWORD *)&v98[8] = *(_DWORD *)(v3 + 32),
          *(_DWORD *)&v98[16] = v25,
          sub_20F25A5A0(v24, (uint64_t *)v98, &v92),
          (v7 = v92) != 0))
    {
      v93 = v7;
      operator delete(v7);
    }
LABEL_4:
    v3 += 48;
    if (v3 != v90)
      continue;
    break;
  }
LABEL_30:
  v26 = (uint64_t *)a1[3];
  if (v26 != a1 + 4)
  {
    v27 = (uint64_t *)(a2 + 304);
    while (1)
    {
      v28 = v26[4];
      v29 = *((unsigned int *)v26 + 10);
      v30 = *((_DWORD *)v26 + 12);
      v31 = *(_QWORD *)(a2 + 424);
      v33 = *(char **)(v31 + 40);
      v32 = *(char **)(v31 + 48);
      if (v32 != v33)
      {
        v34 = (v32 - v33) >> 4;
        while (1)
        {
          v35 = v34 >> 1;
          v36 = (uint64_t *)&v33[16 * (v34 >> 1)];
          v37 = *v36;
          v38 = *(_DWORD *)(*v36 + 16);
          v39 = v38 >= v30;
          if (v38 != v30)
            goto LABEL_41;
          if (*(_QWORD *)v37 >= v28)
            break;
LABEL_35:
          v33 = (char *)(v36 + 2);
          v35 = v34 + ~v35;
LABEL_36:
          v34 = v35;
          if (!v35)
            goto LABEL_44;
        }
        if (*(_QWORD *)v37 != v28)
          goto LABEL_36;
        v39 = *(_DWORD *)(v37 + 8) >= v29;
LABEL_41:
        if (v39)
          goto LABEL_36;
        goto LABEL_35;
      }
LABEL_44:
      if (v33 != v32)
      {
        v40 = *(_QWORD *)v33;
        v41 = v32;
        if (*(_DWORD *)(*(_QWORD *)v33 + 16) == v30)
        {
          v41 = v32;
          if (*(_QWORD *)v40 == v28)
          {
            if (*(_DWORD *)(v40 + 8) == (_DWORD)v29)
              v41 = v33;
            else
              v41 = v32;
          }
        }
        if (v32 != v41)
          break;
      }
      v52 = (uint64_t *)v26[1];
      if (v52)
        goto LABEL_72;
      do
      {
LABEL_74:
        v53 = (uint64_t *)v26[2];
        v54 = *v53 == (_QWORD)v26;
        v26 = v53;
      }
      while (!v54);
LABEL_32:
      v26 = v53;
      if (v53 == a1 + 4)
        goto LABEL_78;
    }
    v75 = *(_OWORD *)(v26 + 7);
    v89 = *(_OWORD *)(v26 + 67);
    v91 = *(_OWORD *)(v26 + 69);
    v88 = *(_OWORD *)(v26 + 65);
    v86 = *(_OWORD *)(v26 + 61);
    v87 = *(_OWORD *)(v26 + 63);
    v84 = *(_OWORD *)(v26 + 57);
    v85 = *(_OWORD *)(v26 + 59);
    v82 = *(_OWORD *)(v26 + 53);
    v83 = *(_OWORD *)(v26 + 55);
    v80 = *(_OWORD *)(v26 + 49);
    v81 = *(_OWORD *)(v26 + 51);
    v78 = *(_OWORD *)(v26 + 45);
    v79 = *(_OWORD *)(v26 + 47);
    v76 = *(_OWORD *)(v26 + 41);
    v77 = *(_OWORD *)(v26 + 43);
    v73 = *(_OWORD *)(v26 + 37);
    v74 = *(_OWORD *)(v26 + 39);
    v71 = *(_OWORD *)(v26 + 33);
    v72 = *(_OWORD *)(v26 + 35);
    v69 = *(_OWORD *)(v26 + 29);
    v70 = *(_OWORD *)(v26 + 31);
    v67 = *(_OWORD *)(v26 + 25);
    v68 = *(_OWORD *)(v26 + 27);
    v65 = *(_OWORD *)(v26 + 21);
    v66 = *(_OWORD *)(v26 + 23);
    v63 = *(_OWORD *)(v26 + 17);
    v64 = *(_OWORD *)(v26 + 19);
    v61 = *(_OWORD *)(v26 + 13);
    v62 = *(_OWORD *)(v26 + 15);
    v59 = *(_OWORD *)(v26 + 9);
    v60 = *(_OWORD *)(v26 + 11);
    v42 = (uint64_t **)(a2 + 304);
    v43 = (_QWORD *)(a2 + 304);
    v44 = *v27;
    if (!*v27)
    {
LABEL_66:
      v48 = (char *)operator new(0x238uLL);
      *((_QWORD *)v48 + 4) = v28;
      *((_QWORD *)v48 + 5) = v29;
      *((_DWORD *)v48 + 12) = v30;
      *(_QWORD *)v48 = 0;
      *((_QWORD *)v48 + 1) = 0;
      *((_QWORD *)v48 + 2) = v43;
      *v42 = (uint64_t *)v48;
      v49 = **(_QWORD **)(a2 + 296);
      v50 = (uint64_t *)v48;
      if (v49)
      {
        *(_QWORD *)(a2 + 296) = v49;
        v50 = *v42;
      }
      sub_20E868578(*(uint64_t **)(a2 + 304), v50);
      ++*(_QWORD *)(a2 + 312);
LABEL_69:
      *(_OWORD *)(v48 + 56) = v75;
      v51 = v48 + 56;
      v51[1] = v59;
      v51[2] = v60;
      v51[3] = v61;
      v51[4] = v62;
      v51[5] = v63;
      v51[6] = v64;
      v51[7] = v65;
      v51[8] = v66;
      v51[9] = v67;
      v51[10] = v68;
      v51[11] = v69;
      v51[12] = v70;
      v51[13] = v71;
      v51[14] = v72;
      v51[15] = v73;
      v51[16] = v74;
      v51[17] = v76;
      v51[18] = v77;
      v51[19] = v78;
      v51[20] = v79;
      v51[21] = v80;
      v51[22] = v81;
      v51[23] = v82;
      v51[24] = v83;
      v51[25] = v84;
      v51[26] = v85;
      v51[27] = v86;
      v51[28] = v87;
      v51[29] = v88;
      v51[30] = v89;
      v51[31] = v91;
      v52 = (uint64_t *)v26[1];
      if (!v52)
        goto LABEL_74;
      do
      {
LABEL_72:
        v53 = v52;
        v52 = (uint64_t *)*v52;
      }
      while (v52);
      goto LABEL_32;
    }
    while (1)
    {
      v43 = (_QWORD *)v44;
      v45 = *(_DWORD *)(v44 + 48);
      if (v30 == v45)
      {
        v46 = v43[4];
        if (v28 < v46)
          goto LABEL_53;
        if (v28 == v46)
        {
          v47 = *((_DWORD *)v43 + 10);
          if (v29 < v47)
            goto LABEL_53;
          if (v47 >= v29)
            goto LABEL_77;
        }
        else if (v46 >= v28)
        {
LABEL_77:
          v48 = (char *)v43;
          goto LABEL_69;
        }
      }
      else
      {
        if (v30 < v45)
        {
LABEL_53:
          v44 = *v43;
          v42 = (uint64_t **)v43;
          if (!*v43)
            goto LABEL_66;
          continue;
        }
        if (v45 >= v30)
          goto LABEL_77;
      }
      v44 = v43[1];
      if (!v44)
      {
        v42 = (uint64_t **)(v43 + 1);
        goto LABEL_66;
      }
    }
  }
LABEL_78:
  *(_QWORD *)v98 = *(uint64_t *)((char *)a1 + 60);
  *(_DWORD *)&v98[8] = *((_DWORD *)a1 + 17);
  *(_QWORD *)&v98[12] = a1[9];
  *(_DWORD *)&v98[20] = *((_DWORD *)a1 + 20);
  *(_QWORD *)&v98[24] = *(uint64_t *)((char *)a1 + 84);
  *(_QWORD *)&v98[29] = *(uint64_t *)((char *)a1 + 89);
  result = *(double *)v98;
  v56 = *(_OWORD *)&v98[16];
  *(_OWORD *)(a2 + 320) = *(_OWORD *)v98;
  *(_OWORD *)(a2 + 336) = v56;
  *(_QWORD *)(a2 + 352) = *(_QWORD *)&v98[32];
  v57 = a1[6];
  *(_DWORD *)(a2 + 420) = *((_DWORD *)a1 + 14);
  *(_QWORD *)(a2 + 412) = v57;
  return result;
}

void sub_20F44A430(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 208);
  if (v3)
  {
    *(_QWORD *)(v1 - 200) = v3;
    operator delete(v3);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20F44A49C(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  _BYTE v14[432];
  uint64_t v15;

  v10 = operator new();
  *(_OWORD *)v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_OWORD *)(v10 + 80) = 0u;
  *(_OWORD *)(v10 + 96) = 0u;
  *(_OWORD *)(v10 + 112) = 0u;
  *(_OWORD *)(v10 + 128) = 0u;
  *(_OWORD *)(v10 + 144) = 0u;
  *(_OWORD *)(v10 + 160) = 0u;
  *(_OWORD *)(v10 + 176) = 0u;
  *(_OWORD *)(v10 + 192) = 0u;
  *(_OWORD *)(v10 + 208) = 0u;
  *(_OWORD *)(v10 + 224) = 0u;
  *(_OWORD *)(v10 + 256) = 0u;
  *(_OWORD *)(v10 + 272) = 0u;
  *(_OWORD *)(v10 + 288) = 0u;
  *(_OWORD *)(v10 + 304) = 0u;
  *(_OWORD *)(v10 + 320) = 0u;
  *(_OWORD *)(v10 + 336) = 0u;
  *(_OWORD *)(v10 + 352) = 0u;
  *(_OWORD *)(v10 + 368) = 0u;
  *(_OWORD *)(v10 + 384) = 0u;
  *(_OWORD *)(v10 + 400) = 0u;
  *(_OWORD *)(v10 + 416) = 0u;
  *(_OWORD *)(v10 + 240) = 0u;
  *(_DWORD *)(v10 + 32) = 1065353216;
  *(_OWORD *)(v10 + 40) = 0u;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *(_OWORD *)(v10 + 88) = 0u;
  *(_OWORD *)(v10 + 104) = 0u;
  *(_OWORD *)(v10 + 120) = 0u;
  *(_OWORD *)(v10 + 136) = 0u;
  *(_QWORD *)(v10 + 152) = 0;
  sub_20FCC477C((_QWORD *)v10);
  *(_QWORD *)(v10 + 160) = -1;
  *(_OWORD *)(v10 + 168) = 0u;
  *(_OWORD *)(v10 + 184) = 0u;
  *(_DWORD *)(v10 + 200) = 1065353216;
  *(_QWORD *)(v10 + 208) = 0;
  *(_QWORD *)(v10 + 216) = 0;
  *(_QWORD *)(v10 + 240) = 0;
  *(_QWORD *)(v10 + 248) = 0;
  *(_QWORD *)(v10 + 256) = 0;
  *(_QWORD *)(v10 + 224) = 0;
  *(_QWORD *)(v10 + 232) = v10 + 240;
  *(_BYTE *)(v10 + 292) = 0;
  *(_QWORD *)(v10 + 264) = 0;
  *(_QWORD *)(v10 + 272) = 0;
  *(_BYTE *)(v10 + 280) = 0;
  *(_QWORD *)(v10 + 296) = v10 + 304;
  *(_QWORD *)(v10 + 304) = 0;
  *(_BYTE *)(v10 + 356) = 0;
  *(_QWORD *)(v10 + 312) = 0;
  *(_QWORD *)(v10 + 320) = 0;
  *(_BYTE *)(v10 + 344) = 0;
  *(_QWORD *)(v10 + 328) = 0;
  *(_QWORD *)(v10 + 336) = 0;
  *(_OWORD *)(v10 + 360) = 0u;
  *(_OWORD *)(v10 + 376) = 0u;
  *(_DWORD *)(v10 + 392) = 1065353216;
  *(_QWORD *)(v10 + 400) = -1;
  *(_BYTE *)(v10 + 408) = 0;
  *(_DWORD *)(v10 + 428) = 0;
  *(_QWORD *)(v10 + 412) = 0;
  *(_QWORD *)(v10 + 420) = 0;
  v15 = v10;
  if (*(_BYTE *)(a1 + 448))
  {
    sub_20E955E54();
    sub_20F310B54(v10, (uint64_t)v14);
    sub_20E9545B0((uint64_t)v14);
    if ((a2 & 1) == 0)
      sub_20FCC477C((_QWORD *)v10);
  }
  else
  {
    v11 = (uint64_t *)operator new();
    sub_20E8E8A78(v11);
    v12 = *(uint64_t **)(v10 + 424);
    *(_QWORD *)(v10 + 424) = v11;
    if (v12)
    {
      v13 = sub_20E8E95B0(v12);
      MEMORY[0x212BC6398](v13, 0x20C40313AD07FLL);
    }
  }
  if (*(_BYTE *)(a3 + 104))
    sub_20F449E5C((uint64_t *)a3, v10);
  if (*(_BYTE *)(a4 + 24))
    sub_20FCE9ED0(a4, *(_QWORD *)(v10 + 424));
  *a5 = v10;
}

void sub_20F44A69C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x212BC6398](v1, 0x20C40313AD07FLL);
  sub_20EE5C31C((uint64_t *)(v2 - 120));
  _Unwind_Resume(a1);
}

void sub_20F44A9B8(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A68A18);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A68A18))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A68A10);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A68A18);
  }
  *a1 = qword_254A68A10;
}

void sub_20F44AA54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A68A18);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A68A18);
  _Unwind_Resume(a1);
}

uint64_t sub_20F44AAAC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  unsigned int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int v9;
  BOOL v10;
  BOOL v12;
  BOOL v14;
  uint64_t *v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unsigned int v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  unsigned int v30;
  uint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t result;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;

  v2 = *(uint64_t **)(a2 + 424);
  if (!v2)
    return 0;
  v4 = *(_DWORD *)(a1 + 40);
  v5 = *(_DWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)a1;
  v8 = *(_DWORD *)(a1 + 32);
  v9 = *(_DWORD *)(a1 + 8);
  v10 = v4 == v5 && v6 == v7;
  if (v10 && v8 == v9)
    return 0;
  v12 = v4 == -1 && v6 == -1;
  if (v12 && v8 == -1)
    return 0;
  v14 = v5 == -1 && v7 == -1;
  if (v14 && v9 == -1)
    return 0;
  if ((v5 & v4) != 0xFFFFFFFF)
  {
    if (v4 == -1 || v5 == -1)
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MapOptimization/src/PoseGraphEdgeUtil.cpp", 36, (uint64_t)"", 0, (uint64_t)"Invalid relocalization results", 30, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    v16 = (uint64_t *)v2[5];
    v17 = (uint64_t *)v2[6];
    if (v17 != v16)
    {
      v18 = ((char *)v17 - (char *)v16) >> 4;
      v19 = (uint64_t *)v2[5];
      while (1)
      {
        v20 = v18 >> 1;
        v21 = &v19[2 * (v18 >> 1)];
        v22 = *v21;
        v23 = *(_DWORD *)(*v21 + 16);
        v24 = v23 >= v4;
        if (v23 != v4)
          goto LABEL_34;
        if (*(_QWORD *)v22 >= v6)
          break;
LABEL_28:
        v19 = v21 + 2;
        v20 = v18 + ~v20;
LABEL_29:
        v18 = v20;
        if (!v20)
          goto LABEL_55;
      }
      if (*(_QWORD *)v22 != v6)
        goto LABEL_29;
      v24 = *(_DWORD *)(v22 + 8) >= v8;
LABEL_34:
      if (v24)
        goto LABEL_29;
      goto LABEL_28;
    }
    v19 = (uint64_t *)v2[5];
LABEL_55:
    if (v19 != v17)
    {
      v35 = *v19;
      if (*(_DWORD *)(*v19 + 16) == v4 && *(_QWORD *)v35 == v6)
      {
        v36 = *(_DWORD *)(v35 + 8) == v8 ? v19 : v17;
        if (v17 != v36)
        {
          v37 = sub_20F45B774(v16, v17, (uint64_t *)a1);
          if (v17 != v37)
          {
            v38 = *v37;
            if (*(_DWORD *)(*v37 + 16) == v5 && *(_QWORD *)v38 == v7)
            {
              v39 = *(_DWORD *)(v38 + 8) == v9 ? v37 : v17;
              if (v17 != v39)
                return 1;
            }
          }
        }
      }
    }
    return 0;
  }
  v25 = *v2;
  v26 = *v2;
  v29 = *(uint64_t **)(v26 + 56);
  v27 = v26 + 56;
  v28 = v29;
  if (!v29)
    return 0;
  v30 = *(_DWORD *)(a1 + 32);
  v31 = (uint64_t *)v27;
  do
  {
    v32 = v28[4];
    if (v32 < v6)
    {
      ++v28;
    }
    else if (v32 == v6)
    {
      if (*((_DWORD *)v28 + 10) < v30)
        ++v28;
      else
        v31 = v28;
    }
    else
    {
      v31 = v28;
    }
    v28 = (uint64_t *)*v28;
  }
  while (v28);
  if (v31 == (uint64_t *)v27)
    return 0;
  v33 = v31[4];
  if (v6 < v33 || v6 == v33 && *((_DWORD *)v31 + 10) > v30)
    return 0;
  if (!v31[6])
    return 0;
  result = sub_20F44AD08(v25, v7, *(_QWORD *)(a1 + 8));
  if (result)
    return 1;
  return result;
}

uint64_t sub_20F44AD08(uint64_t a1, unint64_t a2, unsigned int a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;

  v5 = *(uint64_t **)(a1 + 56);
  v3 = (uint64_t *)(a1 + 56);
  v4 = v5;
  if (!v5)
    return 0;
  v6 = v3;
  do
  {
    v7 = v4[4];
    if (v7 < a2)
    {
      ++v4;
    }
    else if (v7 == a2)
    {
      if (*((_DWORD *)v4 + 10) < a3)
        ++v4;
      else
        v6 = v4;
    }
    else
    {
      v6 = v4;
    }
    v4 = (uint64_t *)*v4;
  }
  while (v4);
  if (v6 == v3)
    return 0;
  v8 = v6[4];
  if (a2 < v8 || a2 == v8 && *((_DWORD *)v6 + 10) > a3)
    return 0;
  else
    return v6[6];
}

uint64_t sub_20F44AD90(int8x16_t *a1, uint64_t a2)
{
  __int32 v4;
  __int32 v5;
  unsigned int v8;
  uint64_t *v10;
  unsigned int v11;

  if (!sub_20F44AAAC((uint64_t)a1, a2))
    return 2;
  v4 = a1[1].i32[0];
  v5 = a1[2].i32[2];
  if (v4 == -1 && v5 == -1)
  {
    v8 = 0;
  }
  else
  {
    if (v4 == -1 || v5 == -1)
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MapOptimization/src/PoseGraphEdgeUtil.cpp", 36, (uint64_t)"", 0, (uint64_t)"Invalid relocalization results", 30, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    v8 = 1;
  }
  v11 = v8;
  v10 = (uint64_t *)(a2 + 168);
  if (sub_20F7C25CC(v10, &a1[1].i64[1], a1->i64, &v11))
    return 1;
  sub_20F7C2840(v10, &a1[1].i64[1], a1->i64, &v11, -1, (uint64_t)a1[3].i64, a1 + 11, a1[29].i32[0]);
  return 0;
}

BOOL sub_20F44AEA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  unsigned int v12;
  uint64_t *v13;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  unsigned int v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t *v25;

  v3 = *(_QWORD *)(a2 + 160);
  if (v3 != *(_QWORD *)a1)
    return 0;
  v4 = *(_QWORD *)(a3 + 160);
  if (v4 != *(_QWORD *)(a1 + 24))
    return 0;
  v5 = *(uint64_t **)(a2 + 424);
  if (!v5)
    return 0;
  v6 = *v5;
  if (!*v5)
    return 0;
  v7 = *(uint64_t **)(a3 + 424);
  if (!v7)
    return 0;
  v8 = *v7;
  if (!v8)
    return 0;
  v11 = *(uint64_t **)(v6 + 56);
  v9 = (uint64_t *)(v6 + 56);
  v10 = v11;
  if (!v11)
    goto LABEL_20;
  v12 = *(_DWORD *)(a1 + 8);
  v13 = v9;
  do
  {
    v15 = v10[4];
    if (v15 < v3)
    {
      ++v10;
    }
    else if (v15 == v3)
    {
      if (*((_DWORD *)v10 + 10) < v12)
        ++v10;
      else
        v13 = v10;
    }
    else
    {
      v13 = v10;
    }
    v10 = (uint64_t *)*v10;
  }
  while (v10);
  if (v13 == v9 || (v16 = v13[4], v3 < v16) || v3 == v16 && *((_DWORD *)v13 + 10) > v12)
  {
LABEL_20:
    v17 = 0;
    v20 = *(uint64_t **)(v8 + 56);
    v18 = (uint64_t *)(v8 + 56);
    v19 = v20;
    if (!v20)
      return 0;
  }
  else
  {
    v17 = v13[6];
    v25 = *(uint64_t **)(v8 + 56);
    v18 = (uint64_t *)(v8 + 56);
    v19 = v25;
    if (!v25)
      return 0;
  }
  v21 = *(_DWORD *)(a1 + 32);
  v22 = v18;
  do
  {
    v23 = v19[4];
    if (v23 < v4)
    {
      ++v19;
    }
    else if (v23 == v4)
    {
      if (*((_DWORD *)v19 + 10) < v21)
        ++v19;
      else
        v22 = v19;
    }
    else
    {
      v22 = v19;
    }
    v19 = (uint64_t *)*v19;
  }
  while (v19);
  if (v22 == v18)
    return 0;
  v24 = v22[4];
  if (v4 < v24 || v4 == v24 && *((_DWORD *)v22 + 10) > v21)
    return 0;
  return v17 && v22[6] != 0;
}

uint64_t sub_20F44B01C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int8x16_t *v5;
  int8x16_t *i;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t *v11;
  _BYTE __dst[512];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  sub_20F46583C(a1, *(uint64_t **)(a2 + 424));
  result = sub_20F7C2444((uint64_t *)(a2 + 168), (uint64_t *)(a1 + 880));
  v5 = *(int8x16_t **)(a1 + 904);
  for (i = *(int8x16_t **)(a1 + 912); v5 != i; v5 = (int8x16_t *)((char *)v5 + 472))
    result = sub_20F7C4504((uint64_t *)(a2 + 168), v5);
  if (*(_DWORD *)(a1 + 952) == *(_DWORD *)(a2 + 256)
    && *(_DWORD *)(a1 + 956) == *(_DWORD *)(a2 + 260)
    && *(_DWORD *)(a1 + 960) == *(_DWORD *)(a2 + 264)
    && *(_DWORD *)(a1 + 964) == *(_DWORD *)(a2 + 268)
    && *(_DWORD *)(a1 + 968) == *(_DWORD *)(a2 + 272)
    && *(_DWORD *)(a1 + 972) == *(_DWORD *)(a2 + 276))
  {
    if (*(_BYTE *)(a1 + 988) && *(_BYTE *)(a2 + 292))
    {
      if (*(_DWORD *)(a1 + 976) != *(_DWORD *)(a2 + 280)
        || *(_DWORD *)(a1 + 980) != *(_DWORD *)(a2 + 284)
        || *(_DWORD *)(a1 + 984) != *(_DWORD *)(a2 + 288))
      {
        return result;
      }
    }
    else if ((*(_BYTE *)(a1 + 988) != 0) != (*(_BYTE *)(a2 + 292) != 0))
    {
      return result;
    }
    v7 = *(uint64_t ***)a1;
    v8 = *(uint64_t ***)(a1 + 8);
    if (*(uint64_t ***)a1 != v8)
    {
      v9 = (uint64_t **)(a2 + 232);
      do
      {
        memcpy(__dst, v7 + 2, sizeof(__dst));
        v11 = *v7;
        v10 = sub_20F29289C(v9, v11, (uint64_t)&unk_2102DB95C, (_OWORD **)&v11);
        result = (uint64_t)memcpy(v10 + 7, __dst, 0x200uLL);
        v7 += 69;
      }
      while (v7 != v8);
    }
  }
  return result;
}

void **sub_20F44B1E0(void **a1)
{
  char **v2;
  char **v3;
  void *v4;

  v2 = (char **)*a1;
  if (*a1)
  {
    v3 = (char **)a1[1];
    v4 = v2;
    if (v3 != v2)
    {
      do
        v3 = sub_20E9549C4(v3 - 124);
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_20F44B238(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = *(void **)(a1 + 8);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_20F44B2D0(uint64_t **a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t **v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  size_t v20;
  void **p_dst;
  _BYTE *v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  uint64_t v27;
  const char *v28;
  size_t v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  const char *v32;
  size_t v33;
  void **v34;
  unint64_t v35;
  uint64_t v36;
  void **v37;
  uint64_t **v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  void **v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  size_t v46;
  void *v47;
  _QWORD *v48;
  size_t v49;
  size_t v50;
  void *v51;
  void *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  char v57;
  _QWORD *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *p_shared_owners;
  unint64_t v62;
  void *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  void *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  const char *v78;
  uint64_t v79;
  __int128 v80;
  void *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  void *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  const char *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  void *v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t *v111;
  unsigned __int8 *v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  _QWORD *v118;
  _QWORD *v119;
  _QWORD **v120;
  _OWORD *v121;
  uint64_t *v122;
  uint64_t *v123;
  unint64_t v124;
  unsigned int v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  unsigned int v130;
  BOOL v131;
  uint64_t v132;
  int v133;
  _DWORD *v134;
  _DWORD *v135;
  _DWORD *v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  uint64_t v144;
  int v145;
  _QWORD *v146;
  _QWORD *v147;
  _QWORD **v148;
  uint64_t *v149;
  uint64_t *v150;
  unint64_t v151;
  unsigned int v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  unsigned int v157;
  BOOL v158;
  uint64_t v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t *v165;
  unsigned int v166;
  unint64_t v167;
  _QWORD *v168;
  unsigned int v169;
  unsigned int v170;
  BOOL v171;
  unint64_t v172;
  unsigned int v173;
  BOOL v174;
  unint64_t v175;
  _QWORD *v176;
  unsigned __int8 v177;
  unsigned __int8 *v178;
  BOOL v179;
  uint64_t v180;
  uint64_t i;
  unsigned __int8 v182;
  char *v183;
  uint64_t *v184;
  unsigned int v185;
  unint64_t v186;
  _QWORD *v187;
  unsigned int v188;
  unsigned int v189;
  BOOL v190;
  unint64_t v191;
  unsigned int v192;
  BOOL v193;
  unint64_t v194;
  int8x16_t *v195;
  int8x16_t *j;
  _QWORD *v197;
  _QWORD *v198;
  void *v199;
  _QWORD *v200;
  _QWORD *v201;
  void *v202;
  _QWORD *v203;
  _QWORD *v204;
  __int128 **v205;
  __int128 **v206;
  __int128 *v207;
  _QWORD *v208;
  uint64_t v209;
  uint64_t **v210;
  unsigned int v211;
  unint64_t v212;
  unsigned int v213;
  unsigned int v214;
  unint64_t v215;
  unsigned int v216;
  _QWORD *v217;
  __int128 v218;
  uint64_t v219;
  uint64_t *v220;
  uint64_t *v221;
  uint64_t v222;
  uint64_t *v223;
  uint64_t v224;
  _BYTE *v225;
  int v226;
  uint64_t v227;
  int v228;
  uint64_t *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t *v233;
  uint64_t v234;
  _QWORD *v235;
  _QWORD *v236;
  _QWORD *v237;
  _QWORD *v238;
  _QWORD *v239;
  _QWORD *v240;
  uint64_t *m;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t *v246;
  uint64_t *v247;
  uint64_t *v248;
  unint64_t v249;
  unsigned int v250;
  uint64_t *v251;
  unint64_t v252;
  unint64_t v253;
  std::__shared_weak_count *v254;
  uint64_t v255;
  unint64_t *v256;
  unint64_t v257;
  unint64_t v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  unint64_t *v263;
  unint64_t v264;
  _QWORD *v265;
  _QWORD *v266;
  uint64_t v267;
  uint64_t *v268;
  uint64_t v269;
  uint64_t v270;
  unint64_t v271;
  unint64_t v272;
  unint64_t v273;
  unint64_t v274;
  BOOL v275;
  void **v276;
  void **v277;
  void *v278;
  void *v279;
  void *v280;
  void *v281;
  void **v282;
  char *v283;
  void **v284;
  char *v285;
  void *v286;
  std::__shared_weak_count *v287;
  unint64_t *v288;
  unint64_t v289;
  uint64_t *v290;
  uint64_t *v291;
  int8x16_t *v292;
  int8x16_t *n;
  int8x8_t **v294;
  int8x8_t **v295;
  int8x8_t *v296;
  int8x8_t v297;
  int8x8_t *v298;
  int8x8_t v299;
  uint8x8_t v300;
  int8x8_t v301;
  _QWORD *v302;
  _QWORD *v303;
  uint64_t v304;
  unint64_t v305;
  uint64_t v306;
  uint64_t v307;
  _QWORD *v308;
  _QWORD *v309;
  _QWORD *v310;
  _QWORD *v311;
  char *v312;
  unint64_t v313;
  uint8x8_t v314;
  unint64_t v315;
  uint64_t **v316;
  uint64_t *v317;
  unint64_t v318;
  unint64_t v319;
  _QWORD *v320;
  _QWORD *v321;
  _OWORD *v322;
  void *v323;
  char *v324;
  uint64_t v325;
  unint64_t v326;
  int64_t v327;
  unint64_t v328;
  char *v329;
  char *v330;
  char *v331;
  uint64_t v332;
  int v333;
  void *v334;
  uint64_t v335;
  uint64_t *v336;
  _QWORD *v337;
  _QWORD *v338;
  void *v339;
  uint64_t *v341;
  _QWORD *v342;
  uint64_t *v343;
  void *v344;
  _QWORD *v345;
  __int128 *v346;
  void **v347;
  _QWORD *v348;
  uint64_t v349;
  const char *v350;
  uint64_t *v351;
  const char *v352;
  __int128 *v353;
  __int128 **k;
  int v355;
  uint64_t v356;
  void *v357[2];
  void *v358[2];
  const char *v359;
  int v360;
  const char *v361;
  uint64_t v362;
  std::__shared_weak_count *v363;
  uint64_t v364;
  void *v365[2];
  void *v366[2];
  std::__shared_weak_count *v367;
  void **__dst;
  void **v369;
  int64_t v370;
  void *v371;
  __int128 v372;
  void *__src[110];
  uint64_t v374[3];
  int8x16_t *v375;
  int8x16_t *v376;
  int v377;
  int v378;
  int v379;
  int v380;
  int v381;
  int v382;
  int v383;
  int v384;
  int v385;
  char v386;
  __int128 v387;
  void *object[68];

  object[65] = *(void **)MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = a1[1];
  if ((char *)v4 - (char *)*a1 == 8)
  {
    v5 = *v3;
    v6 = operator new();
    sub_20F4462AC(v6, v5);
    *a3 = v6;
    return;
  }
  v8 = a1;
  v344 = *(void **)(*(v4 - 1) + 160);
  if (v3 != v4)
  {
    v9 = 0;
    v10 = -1;
    v11 = *v3;
    v12 = *(_QWORD *)(*v3 + 424);
    v13 = *(_QWORD *)(v12 + 40);
    v14 = *(_QWORD *)(v12 + 48);
    if (v13 != v14)
      goto LABEL_7;
LABEL_5:
    while (++v3 != v4)
    {
      v11 = *v3;
      v15 = *(_QWORD *)(*v3 + 424);
      v13 = *(_QWORD *)(v15 + 40);
      v14 = *(_QWORD *)(v15 + 48);
      if (v13 != v14)
      {
LABEL_7:
        while (!*(_BYTE *)(*(_QWORD *)v13 + 736))
        {
          v13 += 16;
          if (v13 == v14)
            goto LABEL_5;
        }
        ++v9;
        if (v10 < *(_QWORD *)(v11 + 400))
        {
          v344 = *(void **)(v11 + 160);
          v10 = *(_QWORD *)(v11 + 400);
        }
      }
    }
  }
  sub_20F44A9B8(&v364);
  if (**(int **)(v364 + 56) > 3)
    goto LABEL_154;
  v16 = *(unsigned __int8 *)(v364 + 72);
  v17 = sub_20E8C31DC(v364, "OSLogSurrogateAppender", 1, 0);
  v18 = v17;
  v19 = !v16 && v17 == 0;
  if (v19)
    goto LABEL_154;
  sub_20E863438((uint64_t)__src);
  sub_20E86A980(&__src[2], (uint64_t)"MergeSubmaps: Number of primary submaps = ", 42);
  std::ostream::operator<<();
  v355 = v16;
  if (((uint64_t)__src[15] & 0x10) != 0)
  {
    v22 = __src[14];
    if (__src[14] < __src[9])
    {
      __src[14] = __src[9];
      v22 = __src[9];
    }
    v23 = __src[8];
    v20 = v22 - (char *)__src[8];
    if ((unint64_t)(v22 - (char *)__src[8]) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_75;
  }
  else
  {
    if (((uint64_t)__src[15] & 8) == 0)
    {
      v20 = 0;
      HIBYTE(v370) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_30;
    }
    v23 = __src[5];
    v20 = (char *)__src[7] - (char *)__src[5];
    if ((void *)((char *)__src[7] - (char *)__src[5]) > (void *)0x7FFFFFFFFFFFFFF7)
LABEL_75:
      sub_20E860B7C();
  }
  if (v20 >= 0x17)
  {
    v24 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v24 = v20 | 7;
    v25 = v24 + 1;
    p_dst = (void **)operator new(v24 + 1);
    v369 = (void **)v20;
    v370 = v25 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_29;
  }
  HIBYTE(v370) = v20;
  p_dst = (void **)&__dst;
  if (v20)
LABEL_29:
    memmove(p_dst, v23, v20);
LABEL_30:
  *((_BYTE *)p_dst + v20) = 0;
  v357[0] = &v364;
  v357[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
  v358[0] = (void *)std::chrono::system_clock::now().__d_.__rep_;
  LODWORD(v358[1]) = 3;
  v359 = "unknown file";
  v360 = 459;
  v362 = 0;
  v363 = 0;
  v361 = "unknown function";
  if (v370 >= 0)
    v26 = (void **)&__dst;
  else
    v26 = __dst;
  v27 = *(_QWORD *)v357[0];
  v28 = (const char *)(*(_QWORD *)v357[0] + 16);
  v352 = v28;
  if (*(char *)(*(_QWORD *)v357[0] + 39) < 0)
  {
    v28 = *(const char **)(v27 + 16);
    v29 = *(_QWORD *)(v27 + 24);
    v31 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v31 & 1) != 0)
      goto LABEL_37;
  }
  else
  {
    v29 = *(unsigned __int8 *)(*(_QWORD *)v357[0] + 39);
    v30 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v30 & 1) != 0)
      goto LABEL_37;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
    if (LOBYTE(object[3]) && SHIBYTE(object[2]) < 0)
      operator delete(object[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_37:
  if (byte_254A4A4F8[23] >= 0)
    v32 = byte_254A4A4F8;
  else
    v32 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v33 = byte_254A4A4F8[23];
  else
    v33 = *(_QWORD *)&byte_254A4A4F8[8];
  object[0] = os_log_create(v32, v28);
  v34 = &object[1];
  if (v33 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v33 >= 0x17)
  {
    v350 = v28;
    v35 = v18;
    v36 = v27;
    v37 = v26;
    v38 = v8;
    v39 = a2;
    v40 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v33 | 7) != 0x17)
      v40 = v33 | 7;
    v41 = v40 + 1;
    v34 = (void **)operator new(v40 + 1);
    object[3] = (void *)(v41 | 0x8000000000000000);
    object[1] = v34;
    object[2] = (void *)v33;
    a2 = v39;
    v8 = v38;
    v26 = v37;
    v27 = v36;
    v18 = v35;
    v28 = v350;
    goto LABEL_50;
  }
  HIBYTE(object[3]) = v33;
  if (v33)
LABEL_50:
    memmove(v34, v32, v33);
  *((_BYTE *)v34 + v33) = 0;
  LOBYTE(object[4]) = 1;
  v42 = &object[5];
  if (v29 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v29 >= 0x17)
  {
    v43 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v29 | 7) != 0x17)
      v43 = v29 | 7;
    v44 = v43 + 1;
    v42 = (void **)operator new(v43 + 1);
    object[7] = (void *)(v44 | 0x8000000000000000);
    object[5] = v42;
    object[6] = (void *)v29;
    goto LABEL_58;
  }
  HIBYTE(object[7]) = v29;
  if (v29)
LABEL_58:
    memmove(v42, v28, v29);
  *((_BYTE *)v42 + v29) = 0;
  LOBYTE(object[8]) = 1;
  v45 = object[0];
  if (SHIBYTE(object[7]) < 0)
    operator delete(object[5]);
  if (LOBYTE(object[4]) && SHIBYTE(object[3]) < 0)
    operator delete(object[1]);
  if (object[0])
    os_release(object[0]);
  if (!v18 || !*(_QWORD *)(v18 + 24))
  {
    os_log_type_enabled(v45, OS_LOG_TYPE_INFO);
    LODWORD(object[0]) = 136315138;
    *(void **)((char *)object + 4) = v26;
    v52 = (void *)_os_log_send_and_compose_impl();
    v53 = v355;
    if (v52)
      free(v52);
    goto LABEL_140;
  }
  v46 = _os_log_pack_size();
  v47 = operator new(v46, (std::align_val_t)8uLL);
  v48 = (_QWORD *)operator new();
  *v48 = &off_24C9ABB80;
  v48[1] = 0;
  v48[2] = 0;
  v48[3] = v47;
  v365[0] = v47;
  v365[1] = v47;
  v366[1] = 0;
  v367 = 0;
  v366[0] = v48;
  v49 = strlen((const char *)v26);
  if (v49 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v50 = v49;
  if (v49 >= 0x17)
  {
    v54 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v49 | 7) != 0x17)
      v54 = v49 | 7;
    v55 = v54 + 1;
    v51 = operator new(v54 + 1);
    *(_QWORD *)&v372 = v50;
    *((_QWORD *)&v372 + 1) = v55 | 0x8000000000000000;
    v371 = v51;
    goto LABEL_79;
  }
  HIBYTE(v372) = v49;
  v51 = &v371;
  if (v49)
LABEL_79:
    memcpy(v51, v26, v50);
  *((_BYTE *)v51 + v50) = 0;
  v56 = v371;
  *(_QWORD *)&v387 = v372;
  *(_QWORD *)((char *)&v387 + 7) = *(_QWORD *)((char *)&v372 + 7);
  v57 = HIBYTE(v372);
  v58 = operator new(0x38uLL);
  v58[1] = 0;
  v58[2] = 0;
  v58[3] = off_24C9ABC20;
  *v58 = &off_24C9ABBD0;
  v59 = v387;
  v58[4] = v56;
  v58[5] = v59;
  *(_QWORD *)((char *)v58 + 47) = *(_QWORD *)((char *)&v387 + 7);
  *((_BYTE *)v58 + 55) = v57;
  *(_QWORD *)&v387 = 0;
  *(_QWORD *)((char *)&v387 + 7) = 0;
  v60 = v367;
  v366[1] = v58 + 3;
  v367 = (std::__shared_weak_count *)v58;
  if (v60)
  {
    p_shared_owners = (unint64_t *)&v60->__shared_owners_;
    do
      v62 = __ldaxr(p_shared_owners);
    while (__stlxr(v62 - 1, p_shared_owners));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  *(_OWORD *)object = *(_OWORD *)v365;
  v63 = v366[1];
  object[2] = v366[0];
  if (v366[0])
  {
    v64 = (unint64_t *)((char *)v366[0] + 8);
    do
      v65 = __ldxr(v64);
    while (__stxr(v65 + 1, v64));
  }
  v66 = v367;
  object[3] = v63;
  object[4] = v367;
  if (v367)
  {
    v67 = (unint64_t *)&v367->__shared_owners_;
    do
      v68 = __ldxr(v67);
    while (__stxr(v68 + 1, v67));
    object[5] = v63;
    do
      v69 = __ldaxr(v67);
    while (__stlxr(v69 - 1, v67));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  else
  {
    object[5] = v63;
  }
  v70 = (std::__shared_weak_count *)v366[0];
  if (v366[0])
  {
    v71 = (unint64_t *)((char *)v366[0] + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = object[0];
  if (*((char *)object[5] + 31) >= 0)
    v74 = (char *)object[5] + 8;
  else
    v74 = (char *)*((_QWORD *)object[5] + 1);
  v75 = _os_log_pack_fill();
  *(_DWORD *)v75 = 136315138;
  *(_QWORD *)(v75 + 4) = v74;
  v76 = (char *)operator new();
  v77 = *(unsigned __int8 *)(v27 + 39);
  v78 = *(const char **)(v27 + 16);
  v79 = *(_QWORD *)(v27 + 24);
  v80 = *(_OWORD *)&object[3];
  *(_OWORD *)(v76 + 8) = *(_OWORD *)&object[1];
  if ((v77 & 0x80u) != 0)
    v77 = v79;
  else
    v78 = v352;
  *(_QWORD *)v76 = v73;
  object[1] = 0;
  object[2] = 0;
  *(_OWORD *)(v76 + 24) = v80;
  object[3] = 0;
  object[4] = 0;
  *((_QWORD *)v76 + 5) = v78;
  *((_QWORD *)v76 + 6) = v77;
  v76[56] = 1;
  v371 = 0;
  v365[0] = v76;
  (*(void (**)(_QWORD, void **))(**(_QWORD **)(v18 + 24) + 40))(*(_QWORD *)(v18 + 24), v365);
  v81 = v365[0];
  v365[0] = 0;
  v53 = v355;
  if (v81)
  {
    v82 = (std::__shared_weak_count *)*((_QWORD *)v81 + 4);
    if (v82)
    {
      v83 = (unint64_t *)&v82->__shared_owners_;
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v84 - 1, v83));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
      }
    }
    v85 = (std::__shared_weak_count *)*((_QWORD *)v81 + 2);
    if (v85)
    {
      v86 = (unint64_t *)&v85->__shared_owners_;
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 - 1, v86));
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
      }
    }
    MEMORY[0x212BC6398](v81, 0x10F0C40B62ED6C6);
    v88 = v371;
    v371 = 0;
    if (v88)
    {
      v89 = (std::__shared_weak_count *)*((_QWORD *)v88 + 4);
      if (v89)
      {
        v90 = (unint64_t *)&v89->__shared_owners_;
        do
          v91 = __ldaxr(v90);
        while (__stlxr(v91 - 1, v90));
        if (!v91)
        {
          ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
          std::__shared_weak_count::__release_weak(v89);
        }
      }
      v92 = (std::__shared_weak_count *)*((_QWORD *)v88 + 2);
      if (v92)
      {
        v93 = (unint64_t *)&v92->__shared_owners_;
        do
          v94 = __ldaxr(v93);
        while (__stlxr(v94 - 1, v93));
        if (!v94)
        {
          ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
          std::__shared_weak_count::__release_weak(v92);
        }
      }
      MEMORY[0x212BC6398](v88, 0x10F0C40B62ED6C6);
    }
  }
  v95 = (std::__shared_weak_count *)object[4];
  if (object[4])
  {
    v96 = (unint64_t *)((char *)object[4] + 8);
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = (std::__shared_weak_count *)object[2];
  if (object[2])
  {
    v99 = (unint64_t *)((char *)object[2] + 8);
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
LABEL_140:
  if (v53)
  {
    v101 = (const char *)&__dst;
    if (v370 < 0)
      v101 = (const char *)__dst;
    sub_20E8C003C((uint64_t)v357, "%s", v101);
    sub_20E863570((uint64_t)v357);
  }
  sub_20E863570((uint64_t)v357);
  v102 = v363;
  if (v363)
  {
    v103 = (unint64_t *)&v363->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  if (SHIBYTE(v370) < 0)
    operator delete(__dst);
  __src[0] = *(void **)MEMORY[0x24BEDB7F0];
  v105 = *(void **)(MEMORY[0x24BEDB7F0] + 72);
  *(void **)((char *)__src + *((_QWORD *)__src[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
  __src[2] = v105;
  __src[3] = (void *)(MEMORY[0x24BEDB848] + 16);
  if (SHIBYTE(__src[13]) < 0)
    operator delete(__src[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](&__src[16]);
LABEL_154:
  *a3 = 0;
  v106 = *v8;
  v107 = v8[1];
  if (*v8 == v107)
  {
LABEL_157:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingTypes/src/MapDataUtil.cpp", 469, (uint64_t)"merged_map_data", 15, (uint64_t)"primary submap must be one of the submaps", 41, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v109 = 0;
    v110 = *v8;
    v111 = v8[1];
    if (*v8 == v111)
      goto LABEL_491;
  }
  else
  {
    while (1)
    {
      v108 = *v106;
      if (*(void **)(*v106 + 160) == v344)
        break;
      if (++v106 == v107)
        goto LABEL_157;
    }
    v109 = operator new();
    sub_20F4462AC(v109, v108);
    *a3 = v109;
    v110 = *v8;
    v111 = v8[1];
    if (*v8 == v111)
      goto LABEL_491;
  }
  v349 = v109;
  v351 = (uint64_t *)(v109 + 168);
  v341 = v111;
  v342 = (_QWORD *)(v109 + 240);
  v112 = (unsigned __int8 *)&qword_254A6DE78;
  while (2)
  {
    v113 = *v110;
    v347 = (void **)(*v110 + 160);
    if (*v347 == v344)
      goto LABEL_163;
    v343 = v110;
    sub_20FCE86E0(**(_QWORD ***)(v113 + 424), **(_QWORD **)(v109 + 424));
    v371 = 0;
    v372 = 0uLL;
    v114 = *(_QWORD **)(v113 + 424);
    v115 = *v114;
    v116 = *(_QWORD **)(*v114 + 48);
    v117 = *v114 + 56;
    v356 = v113;
    if (v116 == (_QWORD *)v117)
    {
      __dst = 0;
      v369 = 0;
      v370 = 0;
      v348 = (_QWORD *)(v115 + 56);
      if (v116 == (_QWORD *)(v115 + 56))
        goto LABEL_368;
      goto LABEL_167;
    }
    do
    {
      v120 = *(_QWORD ***)(v113 + 424);
      v121 = v116 + 4;
      *(_OWORD *)object = *((_OWORD *)v116 + 2);
      sub_20F23A0A0(*v120, (__int128 *)object, (char **)__src);
      v123 = v120[5];
      v122 = v120[6];
      if (v122 != v123)
      {
        v124 = ((char *)v122 - (char *)v123) >> 4;
        v125 = *((_DWORD *)__src[0] + 4);
        v126 = *(_QWORD *)__src[0];
        while (1)
        {
          v127 = v124 >> 1;
          v128 = &v123[2 * (v124 >> 1)];
          v129 = *v128;
          v130 = *(_DWORD *)(*v128 + 16);
          v131 = v130 >= v125;
          if (v130 != v125)
            goto LABEL_177;
          if (*(_QWORD *)v129 >= v126)
            break;
LABEL_171:
          v123 = v128 + 2;
          v127 = v124 + ~v127;
LABEL_172:
          v124 = v127;
          if (!v127)
            goto LABEL_180;
        }
        if (*(_QWORD *)v129 != v126)
          goto LABEL_172;
        v131 = *(_DWORD *)(v129 + 8) >= *((_DWORD *)__src[0] + 2);
LABEL_177:
        if (v131)
          goto LABEL_172;
        goto LABEL_171;
      }
LABEL_180:
      v113 = v356;
      if (v123 == v122)
      {
        v133 = *(unsigned __int8 *)(*v122 + 736);
        if (!__src[0])
          goto LABEL_188;
      }
      else
      {
        v132 = *v123;
        if (*(_DWORD *)(*v123 + 16) == *((_DWORD *)__src[0] + 4)
          && *(_QWORD *)v132 == *(_QWORD *)__src[0]
          && *(_DWORD *)(v132 + 8) == *((_DWORD *)__src[0] + 2))
        {
          v122 = v123;
        }
        v133 = *(unsigned __int8 *)(*v122 + 736);
      }
      __src[1] = __src[0];
      operator delete(__src[0]);
LABEL_188:
      if (!v133)
        goto LABEL_208;
      v134 = (_DWORD *)v372;
      if ((unint64_t)v372 >= *((_QWORD *)&v372 + 1))
      {
        v136 = v371;
        v137 = (uint64_t)(v372 - (_QWORD)v371) >> 4;
        v138 = v137 + 1;
        if ((unint64_t)(v137 + 1) >> 60)
          sub_20E867F44();
        v139 = *((_QWORD *)&v372 + 1) - (_QWORD)v371;
        if ((uint64_t)(*((_QWORD *)&v372 + 1) - (_QWORD)v371) >> 3 > v138)
          v138 = v139 >> 3;
        if ((unint64_t)v139 >= 0x7FFFFFFFFFFFFFF0)
          v140 = 0xFFFFFFFFFFFFFFFLL;
        else
          v140 = v138;
        if (v140)
        {
          if (v140 >> 60)
            sub_20E877A38();
          v141 = (char *)operator new(16 * v140);
          v142 = &v141[16 * v137];
          *(_OWORD *)v142 = *v121;
          v143 = v142;
          if (v134 != v136)
          {
            do
            {
LABEL_202:
              v144 = *((_QWORD *)v134 - 2);
              v134 -= 4;
              v145 = v134[2];
              *((_QWORD *)v143 - 2) = v144;
              v143 -= 16;
              *((_DWORD *)v143 + 2) = v145;
            }
            while (v134 != v136);
            v134 = v136;
            v135 = v142 + 16;
            v371 = v143;
            *((_QWORD *)&v372 + 1) = &v141[16 * v140];
            if (!v136)
              goto LABEL_207;
LABEL_206:
            operator delete(v134);
            goto LABEL_207;
          }
        }
        else
        {
          v141 = 0;
          v142 = (char *)(16 * v137);
          *(_OWORD *)(16 * v137) = *v121;
          v143 = (char *)(16 * v137);
          if (v134 != v136)
            goto LABEL_202;
        }
        v135 = v142 + 16;
        v371 = v143;
        *((_QWORD *)&v372 + 1) = &v141[16 * v140];
        if (v134)
          goto LABEL_206;
      }
      else
      {
        *(_OWORD *)v372 = *v121;
        v135 = v134 + 4;
      }
LABEL_207:
      *(_QWORD *)&v372 = v135;
      v113 = v356;
LABEL_208:
      v146 = (_QWORD *)v116[1];
      if (v146)
      {
        do
        {
          v147 = v146;
          v146 = (_QWORD *)*v146;
        }
        while (v146);
      }
      else
      {
        do
        {
          v147 = (_QWORD *)v116[2];
          v19 = *v147 == (_QWORD)v116;
          v116 = v147;
        }
        while (!v19);
      }
      v116 = v147;
    }
    while (v147 != (_QWORD *)v117);
    v114 = *(_QWORD **)(v113 + 424);
    v234 = *v114;
    v116 = *(_QWORD **)(*v114 + 48);
    __dst = 0;
    v369 = 0;
    v370 = 0;
    v348 = (_QWORD *)(v234 + 56);
    if (v116 == (_QWORD *)(v234 + 56))
    {
LABEL_368:
      v235 = (_QWORD *)v114[1];
      v238 = (_QWORD *)*v235;
      v236 = v235 + 1;
      v237 = v238;
      v109 = v349;
      if (v238 == v236)
        goto LABEL_371;
LABEL_374:
      while (2)
      {
        v245 = *(_QWORD *)(*(_QWORD *)(v109 + 424) + 8);
        v248 = *(uint64_t **)(v245 + 8);
        v246 = (uint64_t *)(v245 + 8);
        v247 = v248;
        if (!v248)
          goto LABEL_405;
        v249 = v237[4];
        v250 = *((_DWORD *)v237 + 10);
        v251 = v246;
        do
        {
          v252 = v247[4];
          if (v252 < v249)
          {
            ++v247;
          }
          else if (v252 == v249)
          {
            if (*((_DWORD *)v247 + 10) < v250)
              ++v247;
            else
              v251 = v247;
          }
          else
          {
            v251 = v247;
          }
          v247 = (uint64_t *)*v247;
        }
        while (v247);
        if (v251 == v246)
          goto LABEL_405;
        v253 = v251[4];
        if (v249 < v253 || v249 == v253 && v250 < *((_DWORD *)v251 + 10))
          goto LABEL_405;
        v255 = v251[6];
        v254 = (std::__shared_weak_count *)v251[7];
        if (!v254)
          goto LABEL_394;
        v256 = (unint64_t *)&v254->__shared_owners_;
        do
          v257 = __ldxr(v256);
        while (__stxr(v257 + 1, v256));
        do
          v258 = __ldxr(v256);
        while (__stxr(v258 + 1, v256));
        do
          v259 = __ldaxr(v256);
        while (__stlxr(v259 - 1, v256));
        if (!v259)
        {
          ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
          std::__shared_weak_count::__release_weak(v254);
          if (v255)
          {
LABEL_395:
            v260 = v255 + 40;
            if (!*(_BYTE *)(v255 + 192))
              v260 = 0;
            v261 = v237[6];
            if (*(_BYTE *)(v261 + 192))
              v262 = v261 + 40;
            else
              v262 = 0;
            *(_BYTE *)(v260 + 149) = *(_BYTE *)(v262 + 149);
          }
        }
        else
        {
LABEL_394:
          if (v255)
            goto LABEL_395;
        }
        if (!v254)
          goto LABEL_405;
        v263 = (unint64_t *)&v254->__shared_owners_;
        do
          v264 = __ldaxr(v263);
        while (__stlxr(v264 - 1, v263));
        if (v264)
        {
LABEL_405:
          v265 = (_QWORD *)v237[1];
          if (v265)
          {
            do
            {
LABEL_406:
              v266 = v265;
              v265 = (_QWORD *)*v265;
            }
            while (v265);
            goto LABEL_373;
          }
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
          std::__shared_weak_count::__release_weak(v254);
          v265 = (_QWORD *)v237[1];
          if (v265)
            goto LABEL_406;
        }
        do
        {
          v266 = (_QWORD *)v237[2];
          v19 = *v266 == (_QWORD)v237;
          v237 = v266;
        }
        while (!v19);
LABEL_373:
        v237 = v266;
        if (v266 == v236)
          goto LABEL_371;
        continue;
      }
    }
LABEL_167:
    v118 = (_QWORD *)(v113 + 240);
    v119 = (_QWORD *)(v113 + 304);
    v345 = (_QWORD *)(v113 + 168);
    v346 = (__int128 *)(v113 + 256);
    while (2)
    {
      v148 = *(_QWORD ***)(v113 + 424);
      v353 = (__int128 *)(v116 + 4);
      *(_OWORD *)object = *((_OWORD *)v116 + 2);
      sub_20F23A0A0(*v148, (__int128 *)object, (char **)__src);
      v150 = v148[5];
      v149 = v148[6];
      if (v149 != v150)
      {
        v151 = ((char *)v149 - (char *)v150) >> 4;
        v152 = *((_DWORD *)__src[0] + 4);
        v153 = *(_QWORD *)__src[0];
        while (1)
        {
          v154 = v151 >> 1;
          v155 = &v150[2 * (v151 >> 1)];
          v156 = *v155;
          v157 = *(_DWORD *)(*v155 + 16);
          v158 = v157 >= v152;
          if (v157 != v152)
            goto LABEL_223;
          if (*(_QWORD *)v156 >= v153)
            break;
LABEL_217:
          v150 = v155 + 2;
          v154 = v151 + ~v154;
LABEL_218:
          v151 = v154;
          if (!v154)
            goto LABEL_226;
        }
        if (*(_QWORD *)v156 != v153)
          goto LABEL_218;
        v158 = *(_DWORD *)(v156 + 8) >= *((_DWORD *)__src[0] + 2);
LABEL_223:
        if (v158)
          goto LABEL_218;
        goto LABEL_217;
      }
LABEL_226:
      if (v150 == v149)
      {
        v160 = *(unsigned __int8 *)(*v149 + 736);
        if (__src[0])
          goto LABEL_233;
      }
      else
      {
        v159 = *v150;
        if (*(_DWORD *)(*v150 + 16) == *((_DWORD *)__src[0] + 4)
          && *(_QWORD *)v159 == *(_QWORD *)__src[0]
          && *(_DWORD *)(v159 + 8) == *((_DWORD *)__src[0] + 2))
        {
          v149 = v150;
        }
        v160 = *(unsigned __int8 *)(*v149 + 736);
LABEL_233:
        __src[1] = __src[0];
        operator delete(__src[0]);
      }
      if (v160)
        goto LABEL_311;
      *(_OWORD *)v357 = 0u;
      *(_OWORD *)v358 = 0u;
      LODWORD(v359) = 1065353216;
      *(_OWORD *)v365 = 0u;
      *(_OWORD *)v366 = 0u;
      LODWORD(v367) = 1065353216;
      sub_20F23A0A0(**(_QWORD ***)(v113 + 424), v353, (char **)&v387);
      v162 = *((_QWORD *)&v387 + 1);
      v163 = v387;
LABEL_238:
      if (v163 != v162)
      {
        v165 = (uint64_t *)*v118;
        if (!*v118)
          goto LABEL_255;
        v166 = *(_DWORD *)(v163 + 16);
        v167 = *(_QWORD *)v163;
        v168 = v118;
        v169 = *(_DWORD *)(v163 + 8);
        while (1)
        {
LABEL_242:
          v170 = *((_DWORD *)v165 + 12);
          v171 = v170 >= v166;
          if (v170 != v166)
            goto LABEL_246;
          v172 = v165[4];
          if (v172 < v167)
            goto LABEL_241;
          if (v172 == v167)
            break;
LABEL_248:
          v168 = v165;
          v165 = (uint64_t *)*v165;
          if (!v165)
          {
LABEL_249:
            if (v168 == v118)
              goto LABEL_255;
            v173 = *((_DWORD *)v168 + 12);
            v174 = v166 >= v173;
            if (v166 != v173)
              goto LABEL_254;
            v175 = v168[4];
            if (v167 < v175)
              goto LABEL_255;
            if (v167 == v175)
            {
              v174 = v169 >= *((_DWORD *)v168 + 10);
LABEL_254:
              if (!v174)
              {
LABEL_255:
                sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingTypes/src/MapDataUtil.cpp", 317, (uint64_t)"src_desc_iter != src_map_data.image_descriptors_.end()", 54, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                v176 = v119;
                v177 = atomic_load(v112);
                if ((v177 & 1) == 0 && __cxa_guard_acquire((__guard *)v112))
                {
                  __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                  __cxa_guard_release((__guard *)v112);
                }
                v178 = v112;
                if (byte_254A6DE68)
                  v179 = byte_254A6DE70 == 0;
                else
                  v179 = 0;
                if (!v179)
                {
                  v180 = qword_254A6DE40;
                  for (i = qword_254A6DE48; v180 != i; v180 += 16)
                    (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v180)(*(_QWORD *)(v180 + 8), "src_desc_iter != src_map_data.image_descriptors_.end()", 54, "", 0);
                }
                v112 = v178;
                v182 = atomic_load(v178);
                if ((v182 & 1) == 0 && __cxa_guard_acquire((__guard *)v178))
                {
                  __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                  __cxa_guard_release((__guard *)v178);
                }
                if (!byte_254A6DE68)
                  abort();
                v119 = v176;
                qword_254A6DE58(unk_254A6DE60, "src_desc_iter != src_map_data.image_descriptors_.end()", 54, "", 0);
                v168 = v118;
              }
            }
            memcpy(__src, v168 + 7, 0x200uLL);
            v183 = sub_20F45B7E0((uint64_t)v357, (uint64_t *)v163, v163);
            memcpy(v183 + 40, __src, 0x200uLL);
            v184 = (uint64_t *)*v119;
            if (!*v119)
              goto LABEL_237;
            v185 = *(_DWORD *)(v163 + 16);
            v186 = *(_QWORD *)v163;
            v187 = v119;
            v188 = *(_DWORD *)(v163 + 8);
            while (2)
            {
              while (2)
              {
                v189 = *((_DWORD *)v184 + 12);
                v190 = v189 >= v185;
                if (v189 == v185)
                {
                  v191 = v184[4];
                  if (v191 >= v186)
                  {
                    if (v191 != v186)
                      goto LABEL_274;
                    v190 = *((_DWORD *)v184 + 10) >= v188;
                    break;
                  }
LABEL_267:
                  v184 = (uint64_t *)v184[1];
                  if (!v184)
                    goto LABEL_275;
                  continue;
                }
                break;
              }
              if (!v190)
                goto LABEL_267;
LABEL_274:
              v187 = v184;
              v184 = (uint64_t *)*v184;
              if (v184)
                continue;
              break;
            }
LABEL_275:
            if (v187 != v119)
            {
              v192 = *((_DWORD *)v187 + 12);
              v193 = v185 >= v192;
              if (v185 != v192)
                goto LABEL_280;
              v194 = v187[4];
              if (v186 >= v194)
              {
                if (v186 != v194)
                  goto LABEL_236;
                v193 = v188 >= *((_DWORD *)v187 + 10);
LABEL_280:
                if (v193)
                {
LABEL_236:
                  memcpy(object, v187 + 7, 0x200uLL);
                  v164 = sub_20F45B7E0((uint64_t)v365, (uint64_t *)v163, v163);
                  memcpy(v164 + 40, object, 0x200uLL);
                }
              }
            }
LABEL_237:
            v163 += 24;
            goto LABEL_238;
          }
        }
        v171 = *((_DWORD *)v165 + 10) >= v169;
LABEL_246:
        if (!v171)
        {
LABEL_241:
          v165 = (uint64_t *)v165[1];
          if (!v165)
            goto LABEL_249;
          goto LABEL_242;
        }
        goto LABEL_248;
      }
      sub_20F46A0E0(__src, *(_QWORD ***)(v356 + 424), v345, (uint64_t *)v353, v357, v347, v346, v161, &v371, 1);
      sub_20F46583C((uint64_t)__src, *(uint64_t **)(v349 + 424));
      sub_20F7C2444(v351, v374);
      v195 = v375;
      for (j = v376; v195 != j; v195 = (int8x16_t *)((char *)v195 + 472))
        sub_20F7C4504(v351, v195);
      v113 = v356;
      if (v377 != *(_DWORD *)(v349 + 256)
        || v378 != *(_DWORD *)(v349 + 260)
        || v379 != *(_DWORD *)(v349 + 264)
        || v380 != *(_DWORD *)(v349 + 268)
        || v381 != *(_DWORD *)(v349 + 272)
        || v382 != *(_DWORD *)(v349 + 276))
      {
        goto LABEL_301;
      }
      if (!v386 || !*(_BYTE *)(v349 + 292))
      {
        if ((v386 != 0) != (*(_BYTE *)(v349 + 292) != 0))
          goto LABEL_301;
LABEL_317:
        v206 = (__int128 **)__src[0];
        v205 = (__int128 **)__src[1];
        for (k = (__int128 **)__src[1]; ; v205 = k)
        {
          if (v206 == v205)
            goto LABEL_301;
          memcpy(object, v206 + 2, 0x200uLL);
          v207 = *v206;
          v208 = v342;
          v209 = *v342;
          v210 = (uint64_t **)v342;
          if (*v342)
            break;
LABEL_338:
          v217 = operator new(0x238uLL);
          v218 = *v207;
          v217[6] = *((_QWORD *)v207 + 2);
          *((_OWORD *)v217 + 2) = v218;
          *v217 = 0;
          v217[1] = 0;
          v217[2] = v208;
          *v210 = v217;
          v219 = **(_QWORD **)(v349 + 232);
          v220 = v217;
          if (v219)
          {
            *(_QWORD *)(v349 + 232) = v219;
            v220 = *v210;
          }
          v221 = (uint64_t *)*v342;
          v19 = v220 == (uint64_t *)*v342;
          *((_BYTE *)v220 + 24) = v19;
          v113 = v356;
          if (!v19)
          {
            do
            {
              v222 = v220[2];
              if (*(_BYTE *)(v222 + 24))
                break;
              v223 = *(uint64_t **)(v222 + 16);
              v224 = *v223;
              if (*v223 == v222)
              {
                v227 = v223[1];
                if (!v227 || (v228 = *(unsigned __int8 *)(v227 + 24), v225 = (_BYTE *)(v227 + 24), v228))
                {
                  if (*(uint64_t **)v222 == v220)
                  {
                    *(_BYTE *)(v222 + 24) = 1;
                    *((_BYTE *)v223 + 24) = 0;
                    v231 = *(_QWORD *)(v222 + 8);
                    *v223 = v231;
                    if (v231)
                      goto LABEL_355;
                  }
                  else
                  {
                    v229 = *(uint64_t **)(v222 + 8);
                    v230 = *v229;
                    *(_QWORD *)(v222 + 8) = *v229;
                    if (v230)
                    {
                      *(_QWORD *)(v230 + 16) = v222;
                      v223 = *(uint64_t **)(v222 + 16);
                    }
                    v229[2] = (uint64_t)v223;
                    *(_QWORD *)(*(_QWORD *)(v222 + 16) + 8 * (**(_QWORD **)(v222 + 16) != v222)) = v229;
                    *v229 = v222;
                    *(_QWORD *)(v222 + 16) = v229;
                    v223 = (uint64_t *)v229[2];
                    v222 = *v223;
                    *((_BYTE *)v229 + 24) = 1;
                    *((_BYTE *)v223 + 24) = 0;
                    v231 = *(_QWORD *)(v222 + 8);
                    *v223 = v231;
                    if (v231)
LABEL_355:
                      *(_QWORD *)(v231 + 16) = v223;
                  }
                  *(_QWORD *)(v222 + 16) = v223[2];
                  *(_QWORD *)(v223[2] + 8 * (*(_QWORD *)v223[2] != (_QWORD)v223)) = v222;
                  *(_QWORD *)(v222 + 8) = v223;
LABEL_319:
                  v223[2] = v222;
                  break;
                }
              }
              else if (!v224 || (v226 = *(unsigned __int8 *)(v224 + 24), v225 = (_BYTE *)(v224 + 24), v226))
              {
                if (*(uint64_t **)v222 == v220)
                {
                  v232 = v220[1];
                  *(_QWORD *)v222 = v232;
                  if (v232)
                  {
                    *(_QWORD *)(v232 + 16) = v222;
                    v223 = *(uint64_t **)(v222 + 16);
                  }
                  v220[2] = (uint64_t)v223;
                  *(_QWORD *)(*(_QWORD *)(v222 + 16) + 8 * (**(_QWORD **)(v222 + 16) != v222)) = v220;
                  v220[1] = v222;
                  *(_QWORD *)(v222 + 16) = v220;
                  v223 = (uint64_t *)v220[2];
                }
                else
                {
                  v220 = (uint64_t *)v220[2];
                }
                *((_BYTE *)v220 + 24) = 1;
                *((_BYTE *)v223 + 24) = 0;
                v222 = v223[1];
                v233 = *(uint64_t **)v222;
                v223[1] = *(_QWORD *)v222;
                if (v233)
                  v233[2] = (uint64_t)v223;
                *(_QWORD *)(v222 + 16) = v223[2];
                *(_QWORD *)(v223[2] + 8 * (*(_QWORD *)v223[2] != (_QWORD)v223)) = v222;
                *(_QWORD *)v222 = v223;
                goto LABEL_319;
              }
              *(_BYTE *)(v222 + 24) = 1;
              v220 = v223;
              *((_BYTE *)v223 + 24) = v223 == v221;
              *v225 = 1;
            }
            while (v223 != v221);
          }
          ++*(_QWORD *)(v349 + 248);
LABEL_321:
          memcpy(v217 + 7, object, 0x200uLL);
          v206 += 69;
        }
        v211 = *((_DWORD *)v207 + 4);
        v212 = *(_QWORD *)v207;
        v213 = *((_DWORD *)v207 + 2);
        while (1)
        {
          while (1)
          {
            v208 = (_QWORD *)v209;
            v214 = *(_DWORD *)(v209 + 48);
            if (v211 == v214)
              break;
            if (v211 < v214)
              goto LABEL_325;
            if (v214 >= v211)
              goto LABEL_357;
LABEL_336:
            v209 = v208[1];
            if (!v209)
            {
              v210 = (uint64_t **)(v208 + 1);
              goto LABEL_338;
            }
          }
          v215 = v208[4];
          if (v212 < v215)
            goto LABEL_325;
          if (v212 != v215)
          {
            if (v215 >= v212)
            {
LABEL_357:
              v217 = v208;
              v113 = v356;
              goto LABEL_321;
            }
            goto LABEL_336;
          }
          v216 = *((_DWORD *)v208 + 10);
          if (v213 >= v216)
          {
            if (v216 >= v213)
              goto LABEL_357;
            goto LABEL_336;
          }
LABEL_325:
          v209 = *v208;
          v210 = (uint64_t **)v208;
          if (!*v208)
            goto LABEL_338;
        }
      }
      if (v383 == *(_DWORD *)(v349 + 280) && v384 == *(_DWORD *)(v349 + 284) && v385 == *(_DWORD *)(v349 + 288))
        goto LABEL_317;
LABEL_301:
      sub_20E9549C4((char **)__src);
      if ((_QWORD)v387)
      {
        *((_QWORD *)&v387 + 1) = v387;
        operator delete((void *)v387);
      }
      v197 = v366[0];
      if (v366[0])
      {
        do
        {
          v198 = (_QWORD *)*v197;
          operator delete(v197);
          v197 = v198;
        }
        while (v198);
      }
      v199 = v365[0];
      v365[0] = 0;
      if (v199)
        operator delete(v199);
      v200 = v358[0];
      if (v358[0])
      {
        do
        {
          v201 = (_QWORD *)*v200;
          operator delete(v200);
          v200 = v201;
        }
        while (v201);
      }
      v202 = v357[0];
      v357[0] = 0;
      if (v202)
        operator delete(v202);
LABEL_311:
      v203 = (_QWORD *)v116[1];
      if (v203)
      {
        do
        {
          v204 = v203;
          v203 = (_QWORD *)*v203;
        }
        while (v203);
      }
      else
      {
        do
        {
          v204 = (_QWORD *)v116[2];
          v19 = *v204 == (_QWORD)v116;
          v116 = v204;
        }
        while (!v19);
      }
      v116 = v204;
      if (v204 != v348)
        continue;
      break;
    }
    v239 = *(_QWORD **)(*(_QWORD *)(v113 + 424) + 8);
    v240 = (_QWORD *)*v239;
    v236 = v239 + 1;
    v237 = v240;
    v109 = v349;
    if (v240 != v236)
      goto LABEL_374;
LABEL_371:
    for (m = *(uint64_t **)(v356 + 16); m; m = (uint64_t *)*m)
    {
      if (*((_BYTE *)m + 320))
        sub_20FCC6708((_QWORD *)v109, (uint64_t)(m + 2), **(_QWORD **)(v109 + 424), m + 5, (float64x2_t *)m + 4, (__int128 *)(m + 41));
    }
    sub_20E956C08(*(_QWORD *)(v109 + 424) + 80, 0x80BFA02FE80BFA03* ((uint64_t)(*(_QWORD *)(*(_QWORD *)(v109 + 424) + 88) - *(_QWORD *)(*(_QWORD *)(v109 + 424) + 80)) >> 4)- 0x7F405FD017F405FDLL* ((uint64_t)(*(_QWORD *)(*(_QWORD *)(v356 + 424) + 88) - *(_QWORD *)(*(_QWORD *)(v356 + 424) + 80)) >> 4));
    v242 = *(_QWORD *)(v356 + 424);
    v244 = *(_QWORD *)(v242 + 80);
    v243 = *(_QWORD *)(v242 + 88);
    while (v244 != v243)
    {
      v267 = *(_QWORD *)(v109 + 424);
      v269 = *(_QWORD *)(v267 + 80);
      v270 = *(_QWORD *)(v267 + 88);
      v268 = (uint64_t *)(v267 + 80);
      if (v270 != v269)
      {
        v271 = 0x80BFA02FE80BFA03 * ((v270 - v269) >> 4);
        v272 = *(_QWORD *)v244;
        do
        {
          v273 = v271 >> 1;
          v274 = v269 + 2736 * (v271 >> 1);
          if (*(_QWORD *)v274 < v272 || *(_QWORD *)v274 == v272 && *(_DWORD *)(v274 + 8) < *(_DWORD *)(v244 + 8))
          {
            v269 = v274 + 2736;
            v273 = v271 + ~v273;
          }
          v271 = v273;
        }
        while (v273);
      }
      if (v269 == v270
        || (*(_QWORD *)v269 == *(_QWORD *)v244 ? (v275 = *(_DWORD *)(v269 + 8) == *(_DWORD *)(v244 + 8)) : (v275 = 0),
            !v275))
      {
        sub_20F45BB78(v268, v269, v244);
      }
      v244 += 2736;
    }
    v276 = __dst;
    if (__dst)
    {
      v277 = v369;
      if (v369 != __dst)
      {
        do
        {
          sub_20E86872C((uint64_t)(v277 - 8), *(v277 - 7));
          v279 = *(v277 - 11);
          if (v279)
          {
            *(v277 - 10) = v279;
            operator delete(v279);
          }
          v280 = *(v277 - 25);
          if (v280)
          {
            *(v277 - 24) = v280;
            operator delete(v280);
          }
          v281 = *(v277 - 121);
          if (v281)
          {
            *(v277 - 120) = v281;
            operator delete(v281);
          }
          v282 = v277 - 124;
          v283 = (char *)*(v277 - 124);
          if (v283)
          {
            v284 = v277 - 123;
            v285 = (char *)*v284;
            v278 = v283;
            if (*v284 != v283)
            {
              do
              {
                v286 = (void *)*((_QWORD *)v285 - 3);
                if (v286)
                {
                  *((_QWORD *)v285 - 2) = v286;
                  operator delete(v286);
                }
                v287 = (std::__shared_weak_count *)*((_QWORD *)v285 - 68);
                if (v287)
                {
                  v288 = (unint64_t *)&v287->__shared_owners_;
                  do
                    v289 = __ldaxr(v288);
                  while (__stlxr(v289 - 1, v288));
                  if (!v289)
                  {
                    ((void (*)(std::__shared_weak_count *))v287->__on_zero_shared)(v287);
                    std::__shared_weak_count::__release_weak(v287);
                  }
                }
                v285 -= 552;
              }
              while (v285 != v283);
              v278 = *v282;
              v109 = v349;
            }
            *v284 = v283;
            operator delete(v278);
          }
          v277 = v282;
        }
        while (v282 != v276);
        v276 = __dst;
      }
      operator delete(v276);
    }
    if (v371)
    {
      *(_QWORD *)&v372 = v371;
      operator delete(v371);
    }
    v110 = v343;
    v111 = v341;
LABEL_163:
    if (++v110 != v111)
      continue;
    break;
  }
  v290 = *v8;
  v291 = v8[1];
  if (*v8 != v291)
  {
    do
    {
      v292 = *(int8x16_t **)(*v290 + 208);
      for (n = *(int8x16_t **)(*v290 + 216); v292 != n; v292 = (int8x16_t *)((char *)v292 + 472))
        sub_20F7C4504(v351, v292);
      ++v290;
    }
    while (v290 != v291);
    v294 = (int8x8_t **)*v8;
    v295 = (int8x8_t **)v8[1];
    if (*v8 != (uint64_t *)v295)
    {
      do
      {
        v296 = *v294;
        v297 = (*v294)[46];
        if (v297)
        {
          v298 = v296 + 20;
          v299 = v296[20];
          v300 = (uint8x8_t)vcnt_s8(v297);
          v300.i16[0] = vaddlv_u8(v300);
          if (v300.u32[0] > 1uLL)
          {
            v301 = v296[20];
            if (*(_QWORD *)&v299 >= *(_QWORD *)&v297)
              v301 = (int8x8_t)(*(_QWORD *)&v299 % *(_QWORD *)&v297);
          }
          else
          {
            v301 = (int8x8_t)((*(_QWORD *)&v297 - 1) & *(_QWORD *)&v299);
          }
          v302 = *(_QWORD **)(*(_QWORD *)&v296[45] + 8 * *(_QWORD *)&v301);
          if (v302)
          {
            v303 = (_QWORD *)*v302;
            if (v303)
            {
              if (v300.u32[0] < 2uLL)
              {
                v304 = *(_QWORD *)&v297 - 1;
                while (1)
                {
                  v306 = v303[1];
                  if (*(_QWORD *)&v299 == v306)
                  {
                    if (v303[2] == *(_QWORD *)&v299)
                      goto LABEL_490;
                  }
                  else if ((v306 & v304) != *(_QWORD *)&v301)
                  {
                    goto LABEL_468;
                  }
                  v303 = (_QWORD *)*v303;
                  if (!v303)
                    goto LABEL_468;
                }
              }
              do
              {
                v305 = v303[1];
                if (*(_QWORD *)&v299 == v305)
                {
                  if (v303[2] == *(_QWORD *)&v299)
                  {
LABEL_490:
                    v307 = v303[3];
                    __src[0] = v298;
                    sub_20EE61B18(v109 + 360, (unint64_t *)v298, (uint64_t)&unk_2102DB95C, (_QWORD **)__src)[3] = v307;
                    break;
                  }
                }
                else
                {
                  if (v305 >= *(_QWORD *)&v297)
                    v305 %= *(_QWORD *)&v297;
                  if (v305 != *(_QWORD *)&v301)
                    break;
                }
                v303 = (_QWORD *)*v303;
              }
              while (v303);
            }
          }
        }
LABEL_468:
        ++v294;
      }
      while (v294 != v295);
    }
  }
LABEL_491:
  if ((a2 & 1) == 0)
    return;
  memset(__src, 0, 32);
  LODWORD(__src[4]) = 1065353216;
  memset(object, 0, 24);
  v308 = *(_QWORD **)(*(_QWORD *)(v109 + 424) + 8);
  v311 = (_QWORD *)*v308;
  v309 = v308 + 1;
  v310 = v311;
  if (v311 == v309)
    goto LABEL_545;
  v312 = 0;
  while (2)
  {
    v313 = *((unsigned int *)v310 + 10);
    if (!__src[1])
      goto LABEL_515;
    v314 = (uint8x8_t)vcnt_s8((int8x8_t)__src[1]);
    v314.i16[0] = vaddlv_u8(v314);
    if (v314.u32[0] > 1uLL)
    {
      v315 = *((unsigned int *)v310 + 10);
      if (__src[1] <= (void *)v313)
        v315 = v313 % (unint64_t)__src[1];
    }
    else
    {
      v315 = (LODWORD(__src[1]) - 1) & v313;
    }
    v316 = (uint64_t **)*((_QWORD *)__src[0] + v315);
    if (!v316 || (v317 = *v316) == 0)
    {
LABEL_515:
      LODWORD(v357[0]) = *((_DWORD *)v310 + 10);
      sub_20EEA52F4((uint64_t)__src, (unsigned int *)v357, v357);
      v320 = (_QWORD *)v310[1];
      if (!v320)
        goto LABEL_537;
      do
      {
LABEL_516:
        v321 = v320;
        v320 = (_QWORD *)*v320;
      }
      while (v320);
      goto LABEL_494;
    }
    if (v314.u32[0] < 2uLL)
    {
      while (1)
      {
        v319 = v317[1];
        if (v319 == v313)
        {
          if (*((_DWORD *)v317 + 4) == (_DWORD)v313)
            goto LABEL_518;
        }
        else if ((v319 & ((unint64_t)__src[1] - 1)) != v315)
        {
          goto LABEL_515;
        }
        v317 = (uint64_t *)*v317;
        if (!v317)
          goto LABEL_515;
      }
    }
    while (2)
    {
      v318 = v317[1];
      if (v318 != v313)
      {
        if ((void *)v318 >= __src[1])
          v318 %= (unint64_t)__src[1];
        if (v318 != v315)
          goto LABEL_515;
        goto LABEL_505;
      }
      if (*((_DWORD *)v317 + 4) != (_DWORD)v313)
      {
LABEL_505:
        v317 = (uint64_t *)*v317;
        if (!v317)
          goto LABEL_515;
        continue;
      }
      break;
    }
LABEL_518:
    v322 = v310 + 4;
    if (v312 < object[2])
    {
      *(_OWORD *)v312 = *v322;
      v323 = v312 + 16;
      goto LABEL_536;
    }
    v324 = (char *)object[0];
    v325 = (v312 - (char *)object[0]) >> 4;
    v326 = v325 + 1;
    if ((unint64_t)(v325 + 1) >> 60)
      sub_20E867F44();
    v327 = (char *)object[2] - (char *)object[0];
    if (((char *)object[2] - (char *)object[0]) >> 3 > v326)
      v326 = v327 >> 3;
    if ((unint64_t)v327 >= 0x7FFFFFFFFFFFFFF0)
      v328 = 0xFFFFFFFFFFFFFFFLL;
    else
      v328 = v326;
    if (v328)
    {
      if (v328 >> 60)
        sub_20E877A38();
      v329 = (char *)operator new(16 * v328);
      v330 = &v329[16 * v325];
      *(_OWORD *)v330 = *v322;
      v331 = v330;
      if (v312 == v324)
      {
LABEL_534:
        v323 = v330 + 16;
        object[0] = v331;
        object[1] = v330 + 16;
        object[2] = &v329[16 * v328];
        if (v312)
          goto LABEL_535;
        goto LABEL_536;
      }
    }
    else
    {
      v329 = 0;
      v330 = (char *)(16 * v325);
      *(_OWORD *)(16 * v325) = *v322;
      v331 = (char *)(16 * v325);
      if (v312 == v324)
        goto LABEL_534;
    }
    do
    {
      v332 = *((_QWORD *)v312 - 2);
      v312 -= 16;
      v333 = *((_DWORD *)v312 + 2);
      *((_QWORD *)v331 - 2) = v332;
      v331 -= 16;
      *((_DWORD *)v331 + 2) = v333;
    }
    while (v312 != v324);
    v312 = (char *)object[0];
    v323 = v330 + 16;
    object[0] = v331;
    object[1] = v330 + 16;
    object[2] = &v329[16 * v328];
    if (v312)
LABEL_535:
      operator delete(v312);
LABEL_536:
    object[1] = v323;
    v312 = (char *)v323;
    v320 = (_QWORD *)v310[1];
    if (v320)
      goto LABEL_516;
    do
    {
LABEL_537:
      v321 = (_QWORD *)v310[2];
      v19 = *v321 == (_QWORD)v310;
      v310 = v321;
    }
    while (!v19);
LABEL_494:
    v310 = v321;
    if (v321 != v309)
      continue;
    break;
  }
  v334 = object[0];
  if (object[0] != v312)
  {
    v335 = *a3;
    v336 = (uint64_t *)object[0];
    do
    {
      sub_20F25F344(*(_QWORD **)(*(_QWORD *)(v335 + 424) + 8), v336);
      v336 += 2;
    }
    while (v336 != (uint64_t *)v312);
  }
  if (v334)
    operator delete(v334);
LABEL_545:
  v337 = __src[2];
  if (__src[2])
  {
    do
    {
      v338 = (_QWORD *)*v337;
      operator delete(v337);
      v337 = v338;
    }
    while (v338);
  }
  v339 = __src[0];
  __src[0] = 0;
  if (v339)
    operator delete(v339);
}

void sub_20F44D33C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  if (LOBYTE(STACK[0x558]) && SLOBYTE(STACK[0x557]) < 0)
    operator delete((void *)STACK[0x540]);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a27);
  if (a48 < 0)
  {
    operator delete(a43);
    sub_20E863784((uint64_t)&a52);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&a52);
  _Unwind_Resume(a1);
}

void sub_20F44D4E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20F44D4F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10A0C401749CDD1);
  _Unwind_Resume(a1);
}

void sub_20F44D518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13)
{
  sub_20EE5C31C(a13);
  _Unwind_Resume(a1);
}

void sub_20F44D530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  void *v50;

  v50 = (void *)STACK[0x540];
  if (STACK[0x540])
  {
    STACK[0x548] = (unint64_t)v50;
    operator delete(v50);
  }
  sub_20E8C25A8(&a49);
  sub_20EE5C31C(a13);
  _Unwind_Resume(a1);
}

void sub_20F44D560()
{
  JUMPOUT(0x20F44D5FCLL);
}

void sub_20F44D5A0()
{
  JUMPOUT(0x20F44D604);
}

void sub_20F44D5A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13)
{
  sub_20EE5C31C(a13);
  _Unwind_Resume(a1);
}

void sub_20F44D5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,char *a49)
{
  void *v50;

  sub_20E9549C4(&a49);
  v50 = (void *)STACK[0x528];
  if (STACK[0x528])
  {
    STACK[0x530] = (unint64_t)v50;
    operator delete(v50);
  }
  sub_20E8C25A8((uint64_t)&a37);
  sub_20E8C25A8((uint64_t)&a27);
  sub_20F44B1E0(&a43);
  if (a46)
  {
    a47 = (uint64_t)a46;
    operator delete(a46);
  }
  sub_20EE5C31C(a13);
  _Unwind_Resume(a1);
}

void sub_20F44D624(uint64_t **a1@<X0>, uint64_t **a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t **v9;
  _QWORD *v10;
  uint64_t (**v11)();
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t **v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t (**v23)();
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  __int128 v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  int8x8_t v42;
  unint64_t v43;
  uint8x8_t v44;
  unint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  void *v51;
  _QWORD **v52;
  _QWORD *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  unint64_t v60;
  _QWORD *v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  int v72;
  BOOL v73;
  uint64_t v74;
  int v75;
  BOOL v76;
  _QWORD *v77;
  __int128 *v78;
  _QWORD *v79;
  float64x2_t v80;
  _QWORD **v81;
  uint64_t *v82;
  _QWORD *v83;
  unsigned int v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  float64x2_t *v88;
  double v90;
  float64x2_t v91;
  double v92;
  float64x2_t v99;
  double v101;
  double v104;
  double v105;
  float64x2_t v106;
  float64x2_t v108;
  float64x2_t v110;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  _QWORD *v157;
  _QWORD **v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t *v162;
  uint64_t *v163;
  uint64_t *v164;
  uint64_t *v165;
  unint64_t v166;
  unint64_t v167;
  int v168;
  unint64_t v169;
  unint64_t v170;
  _QWORD *v171;
  _QWORD *v172;
  _QWORD *v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unsigned __int8 v178;
  uint64_t v179;
  uint64_t i;
  unsigned __int8 v181;
  _DWORD *v182;
  _DWORD *v183;
  unint64_t v184;
  _QWORD *v185;
  _QWORD *v186;
  char *v187;
  char *v188;
  unint64_t v189;
  unsigned int v190;
  unint64_t v191;
  unint64_t v192;
  char *v193;
  uint64_t v194;
  unsigned int v195;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t *v201;
  unint64_t v202;
  _QWORD *v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  char *v209;
  char *v210;
  unint64_t *v211;
  unint64_t v212;
  _QWORD *v213;
  __int128 v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  char *v218;
  uint64_t *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  unsigned int v224;
  unint64_t v225;
  unint64_t v226;
  unint64_t v227;
  uint64_t v228;
  unsigned int v229;
  BOOL v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  _QWORD *v234;
  uint64_t *v235;
  unsigned __int8 v236;
  uint64_t v237;
  uint64_t j;
  unsigned __int8 v239;
  unint64_t v240;
  unsigned int v241;
  _QWORD *v242;
  unint64_t v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  unsigned int v247;
  uint64_t v248;
  unsigned int v249;
  BOOL v250;
  uint64_t *v251;
  unsigned __int8 v252;
  uint64_t v253;
  uint64_t k;
  unsigned __int8 v255;
  uint64_t v256;
  char v257;
  unsigned __int8 v258;
  uint64_t v259;
  uint64_t m;
  unsigned __int8 v261;
  unsigned __int8 v262;
  uint64_t v263;
  uint64_t n;
  unsigned __int8 v265;
  char *v266;
  char *v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  _QWORD **v271;
  uint64_t v272;
  size_t v273;
  const char *v274;
  unsigned __int8 v275;
  unsigned __int8 v276;
  const char *v277;
  size_t v278;
  _BYTE *v279;
  uint64_t v280;
  uint64_t v281;
  _BYTE *v282;
  NSObject *v283;
  uint64_t v284;
  uint64_t v285;
  size_t v286;
  std::__shared_weak_count_vtbl *v287;
  std::__shared_weak_count *v288;
  std::__shared_weak_count *v289;
  unint64_t *v290;
  unint64_t v291;
  unint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  std::__shared_weak_count *v298;
  unint64_t *v299;
  unint64_t v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  void *v304;
  std::__shared_weak_count *v305;
  unint64_t *v306;
  unint64_t v307;
  std::__shared_weak_count *v308;
  unint64_t *v309;
  unint64_t v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  std::__shared_weak_count *v314;
  unint64_t *v315;
  unint64_t v316;
  void *v317;
  std::__shared_weak_count *v318;
  unint64_t *v319;
  unint64_t v320;
  _QWORD *v321;
  _QWORD *v322;
  _QWORD **v323;
  uint64_t *v324;
  uint64_t v325;
  _DWORD *v326;
  _DWORD *v327;
  __int128 *v328;
  __int128 *v329;
  uint64_t v330;
  _BYTE *v331;
  _QWORD *v332;
  unsigned int v333;
  unint64_t v334;
  unsigned int v335;
  unsigned int v336;
  unint64_t v337;
  unsigned int v338;
  _QWORD *v339;
  __int128 v340;
  _BYTE *v341;
  uint64_t v342;
  _BYTE *v343;
  uint64_t v344;
  _BYTE *v345;
  int v346;
  uint64_t v347;
  int v348;
  uint64_t *v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  _QWORD *v353;
  uint64_t v354;
  char *v355;
  char *v356;
  unint64_t v357;
  unsigned int v358;
  unint64_t v359;
  unint64_t v360;
  char *v361;
  uint64_t v362;
  unsigned int v363;
  BOOL v364;
  uint64_t v365;
  char *v366;
  unsigned __int8 v367;
  uint64_t v368;
  uint64_t ii;
  unsigned __int8 v370;
  __int128 v371;
  uint64_t v372;
  std::__shared_weak_count *v373;
  unint64_t *v374;
  unint64_t v375;
  char *v376;
  char *v377;
  _QWORD *v378;
  unsigned int v379;
  unint64_t v380;
  unsigned int v381;
  _OWORD *v382;
  _BYTE *v383;
  uint64_t v384;
  _BYTE *v385;
  uint64_t v386;
  _BYTE *v387;
  int v388;
  uint64_t v389;
  int v390;
  uint64_t *v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  _OWORD *v395;
  unint64_t *v396;
  unint64_t v397;
  uint64_t v398;
  _QWORD *v399;
  unsigned int v400;
  int8x8_t *v401;
  int8x8_t *v402;
  int8x8_t v403;
  uint8x8_t v404;
  _BYTE *v405;
  int v406;
  unsigned int v407;
  unint64_t v408;
  unint64_t v409;
  uint64_t **v410;
  uint64_t *v411;
  uint64_t v412;
  uint64_t v413;
  _QWORD *v414;
  _BYTE *v415;
  unint64_t v416;
  uint64_t *v417;
  _QWORD *v418;
  _QWORD *v419;
  _BYTE *v420;
  uint64_t v421;
  uint64_t *v422;
  _QWORD *v423;
  _QWORD *v424;
  _BYTE *v425;
  _QWORD *v426;
  uint64_t v427;
  uint64_t v428;
  unint64_t v429;
  char *v430;
  unint64_t v431;
  unint64_t v432;
  char *v433;
  unint64_t v434;
  _QWORD *v435;
  _QWORD *v436;
  _QWORD *v437;
  unint64_t v438;
  _QWORD *v439;
  _QWORD *v440;
  uint64_t v441;
  _QWORD *v442;
  _QWORD *v443;
  _QWORD *v444;
  _QWORD *v445;
  unint64_t v446;
  _QWORD *v447;
  _QWORD *v448;
  _QWORD *v449;
  unint64_t v450;
  _QWORD *v451;
  _QWORD *v452;
  uint64_t v453;
  _QWORD *v454;
  _QWORD *v455;
  _QWORD *v456;
  unsigned int v457;
  int8x8_t *v458;
  int8x8_t *v459;
  int8x8_t v460;
  uint8x8_t v461;
  _BYTE *v462;
  int v463;
  unsigned int v464;
  unint64_t v465;
  unint64_t v466;
  uint64_t **v467;
  uint64_t *v468;
  uint64_t v469;
  uint64_t v470;
  _QWORD *v471;
  _BYTE *v472;
  unint64_t v473;
  uint64_t *v474;
  _QWORD *v475;
  _QWORD *v476;
  _BYTE *v477;
  uint64_t v478;
  uint64_t *v479;
  _QWORD *v480;
  _QWORD *v481;
  _BYTE *v482;
  _QWORD *v483;
  uint64_t v484;
  void *v485;
  void *v486;
  char *v487;
  unint64_t v488;
  unint64_t v489;
  void **v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t *v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t jj;
  uint64_t *v497;
  unsigned __int8 v498;
  uint64_t v499;
  uint64_t kk;
  unsigned __int8 v501;
  __int128 *v502;
  int8x8_t **v503;
  _DWORD *v504;
  _DWORD *v505;
  __int128 *v506;
  __int128 *v507;
  int8x8_t *v508;
  uint64_t v509;
  unsigned int v510;
  unint64_t v511;
  uint64_t v512;
  unsigned int v513;
  unsigned int v514;
  BOOL v515;
  unint64_t v516;
  unsigned int v517;
  BOOL v518;
  unint64_t v519;
  uint64_t v520;
  uint64_t *v521;
  uint64_t **v522;
  uint64_t **v523;
  _QWORD *v524;
  unsigned int v525;
  unint64_t v526;
  unsigned int v527;
  _QWORD *v528;
  __int128 v529;
  uint64_t v530;
  uint64_t *v531;
  uint64_t *v532;
  uint64_t v533;
  uint64_t *v534;
  uint64_t v535;
  _BYTE *v536;
  int v537;
  uint64_t v538;
  int v539;
  uint64_t *v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t *v544;
  int8x8_t *v545;
  int8x8_t *v546;
  unsigned int v547;
  unint64_t v548;
  unsigned int v549;
  int8x8_t *v550;
  unsigned int v551;
  BOOL v552;
  unint64_t v553;
  unsigned int v554;
  BOOL v555;
  unint64_t v556;
  uint64_t v557;
  uint64_t **v558;
  uint64_t *v559;
  uint64_t **v560;
  _QWORD *v561;
  unsigned int v562;
  unint64_t v563;
  unsigned int v564;
  _QWORD *v565;
  __int128 v566;
  uint64_t v567;
  uint64_t *v568;
  uint64_t *v569;
  uint64_t v570;
  uint64_t *v571;
  uint64_t v572;
  _BYTE *v573;
  int v574;
  uint64_t v575;
  int v576;
  uint64_t *v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t *v581;
  _QWORD **v582;
  uint64_t v583;
  uint64_t v584;
  int8x8_t v585;
  unint64_t v586;
  uint8x8_t v587;
  unint64_t v588;
  uint64_t *v589;
  _QWORD *v590;
  uint64_t v591;
  unint64_t v593;
  uint64_t v595;
  uint64_t *v596;
  uint64_t *v597;
  uint64_t v598;
  uint64_t v599;
  int8x8_t v600;
  unint64_t v601;
  uint8x8_t v602;
  unint64_t v603;
  uint64_t v604;
  uint64_t **v605;
  uint64_t *v606;
  uint64_t v607;
  _QWORD *v608;
  uint64_t v610;
  unint64_t v612;
  unint64_t v613;
  unint64_t v614;
  uint64_t **v615;
  uint64_t *v616;
  uint64_t v617;
  uint64_t v619;
  unint64_t v621;
  int v622;
  unsigned __int8 v623;
  uint64_t v624;
  uint64_t mm;
  unsigned __int8 v626;
  __int128 v627;
  __int128 v628;
  __int128 v629;
  __int128 v630;
  __int128 v631;
  __int128 v632;
  uint64_t v633;
  int v634;
  unsigned __int8 v635;
  uint64_t v636;
  uint64_t nn;
  unsigned __int8 v638;
  uint64_t *v639;
  _QWORD *v640;
  _QWORD **v641;
  uint64_t v642;
  _QWORD **v643;
  _QWORD *v644;
  unint64_t v645;
  unsigned int v646;
  _QWORD *v647;
  unint64_t v648;
  unsigned int v649;
  _QWORD *v650;
  _QWORD *v651;
  _QWORD *v652;
  uint64_t v653;
  _QWORD *v654;
  uint64_t v655;
  _BYTE *v656;
  int v657;
  uint64_t v658;
  int v659;
  uint64_t *v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t *v664;
  uint64_t v665;
  _QWORD *v666;
  _QWORD *i1;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  __int128 v672;
  __int128 v673;
  __int128 v674;
  __int128 v675;
  char *v676;
  uint64_t v677;
  uint64_t *v678;
  uint64_t *v679;
  uint64_t v680;
  uint64_t v681;
  unsigned __int8 v682;
  uint64_t v683;
  uint64_t i3;
  unsigned __int8 v685;
  __int128 v686;
  __int128 v687;
  __int128 v688;
  __int128 v689;
  int v690;
  _QWORD *v691;
  unint64_t v692;
  _QWORD *v693;
  _BYTE *v694;
  unint64_t v695;
  unint64_t v696;
  unint64_t v697;
  char *v698;
  char *v699;
  __int128 v700;
  __int128 v701;
  __int128 v702;
  __int128 v703;
  _OWORD *v704;
  _OWORD *v705;
  __int128 v706;
  __int128 v707;
  _OWORD *v708;
  __int128 v709;
  __int128 v710;
  __int128 v711;
  __int128 v712;
  __int128 v713;
  __int128 v714;
  char v715;
  __int128 v716;
  __int128 v717;
  __int128 v718;
  __int128 v719;
  char *v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t *v723;
  uint64_t *v724;
  unsigned __int8 v725;
  uint64_t v726;
  uint64_t i4;
  unsigned __int8 v728;
  __int128 v729;
  __int128 v730;
  __int128 v731;
  __int128 v732;
  int v733;
  _QWORD *v734;
  unint64_t v735;
  _QWORD *v736;
  _BYTE *v737;
  unint64_t v738;
  unint64_t v739;
  unint64_t v740;
  int v741;
  char *v742;
  char *v743;
  __int128 v744;
  __int128 v745;
  __int128 v746;
  __int128 v747;
  _OWORD *v748;
  _OWORD *v749;
  __int128 v750;
  __int128 v751;
  _OWORD *v752;
  __int128 v753;
  __int128 v754;
  __int128 v755;
  __int128 v756;
  __int128 v757;
  __int128 v758;
  char v759;
  char *v760;
  uint64_t *v761;
  uint64_t *v762;
  uint64_t *v763;
  uint64_t v764;
  unint64_t v765;
  uint64_t i5;
  uint64_t *v767;
  uint64_t *v768;
  uint64_t v769;
  uint64_t *v770;
  uint64_t v771;
  uint64_t v772;
  unint64_t v773;
  unint64_t v774;
  unint64_t v775;
  unint64_t v776;
  BOOL v777;
  _QWORD *v778;
  _QWORD *v779;
  void *v780;
  uint64_t *v781;
  uint64_t *v782;
  void *v783;
  uint64_t *v784;
  uint64_t v785;
  unint64_t v786;
  unint64_t v787;
  const void **v788;
  size_t v789;
  int v790;
  size_t v792;
  int v793;
  _OWORD *v795;
  __int128 v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t *v800;
  uint64_t *v801;
  _QWORD *v802;
  void *v803;
  _QWORD *v804;
  uint64_t *v805;
  uint64_t *v806;
  float64x2_t v808;
  float64x2_t v809;
  float64x2_t v810;
  float64x2_t v811;
  float64x2_t v812;
  float64x2_t v813;
  float64x2_t v814;
  float64x2_t v815;
  float64x2_t v816;
  float64x2_t v817;
  float64x2_t v818;
  float64x2_t v819;
  float64x2_t v820;
  float64x2_t v821;
  float64x2_t v822;
  float64x2_t v823;
  float64x2_t v824;
  float64x2_t v825;
  float64x2_t v826;
  float64x2_t v827;
  float64x2_t v828;
  float64x2_t v829;
  float64x2_t v830;
  float64x2_t v831;
  float64x2_t v832;
  float64x2_t v833;
  float64x2_t v834;
  float64x2_t v835;
  float64x2_t v836;
  float64x2_t v837;
  float64x2_t v838;
  float64x2_t v839;
  float64x2_t v840;
  float64x2_t v841;
  float64x2_t v842;
  float64x2_t v843;
  float64x2_t v844;
  float64x2_t v845;
  float64x2_t v846;
  float64x2_t v847;
  float64x2_t v848;
  float64x2_t v849;
  float64x2_t v850;
  float64x2_t v851;
  float64x2_t v852;
  float64x2_t v853;
  float64x2_t v854;
  float64x2_t v855;
  float64x2_t v856;
  float64x2_t v857;
  float64x2_t v858;
  float64x2_t v859;
  float64x2_t v860;
  float64x2_t v861;
  float64x2_t v862;
  float64x2_t v863;
  float64x2_t v864;
  float64x2_t v865;
  float64x2_t v866;
  float64x2_t v867;
  float64x2_t v868;
  float64x2_t v869;
  float64x2_t v870;
  float64x2_t v871;
  float64x2_t v872;
  float64x2_t v873;
  float64x2_t v874;
  float64x2_t v875;
  float64x2_t v876;
  float64x2_t v877;
  float64x2_t v878;
  float64x2_t v879;
  float64x2_t v880;
  float64x2_t v881;
  _QWORD *v882;
  uint64_t v883;
  uint64_t i2;
  uint64_t v885;
  uint64_t v887;
  uint64_t v888;
  float64x2_t v889;
  char *v890;
  uint64_t v891;
  int v892;
  uint64_t v893;
  int v894;
  int v895;
  int v896;
  uint64_t v897;
  _QWORD *v898;
  int v899;
  uint64_t v900;
  _QWORD *v901;
  uint64_t *v902;
  _QWORD *v903;
  _QWORD *v904;
  _QWORD **v905;
  _QWORD *v906;
  uint64_t v907;
  void *v908[2];
  void *v909[2];
  int v910;
  __int128 v911;
  uint64_t v912;
  char v913;
  void *v914[3];
  __int128 v915;
  _BYTE __p[84];
  __int128 v917;
  __int128 v918;
  __int128 v919;
  _BYTE object[464];
  int v921;
  char v922;
  uint64_t v923;

  v923 = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  if (!*a1)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return;
  }
  *(_OWORD *)v909 = 0u;
  *(_OWORD *)v908 = 0u;
  v910 = 1065353216;
  v3 = *(_QWORD *)v2[53];
  v4 = *(_QWORD **)(v3 + 48);
  v5 = (_QWORD *)(v3 + 56);
  if (v4 == (_QWORD *)(v3 + 56))
  {
    v6 = 0;
  }
  else
  {
    do
    {
      sub_20EDB1F30((uint64_t)v908, v4 + 4, v4 + 4);
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          _ZF = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!_ZF);
      }
      v4 = v8;
    }
    while (v8 != v5);
    v6 = v909[1];
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_20EA647CC((uint64_t)a2, (unint64_t)v6);
  v9 = a1;
  v10 = v909[0];
  if (v909[0])
  {
    v11 = &off_24C9B6A40;
    do
    {
      v14 = (char *)operator new(0x1C8uLL);
      *((_QWORD *)v14 + 1) = 0;
      *((_QWORD *)v14 + 2) = 0;
      *(_QWORD *)v14 = v11;
      v15 = v10[2];
      *(_OWORD *)(v14 + 24) = 0u;
      v16 = v14 + 24;
      *(_OWORD *)(v14 + 40) = 0u;
      *((_DWORD *)v14 + 14) = 1065353216;
      *((_QWORD *)v14 + 22) = 0;
      *((_OWORD *)v14 + 9) = 0u;
      *((_OWORD *)v14 + 10) = 0u;
      *((_OWORD *)v14 + 7) = 0u;
      *((_OWORD *)v14 + 8) = 0u;
      *((_OWORD *)v14 + 5) = 0u;
      *((_OWORD *)v14 + 6) = 0u;
      *((_OWORD *)v14 + 4) = 0u;
      sub_20FCC477C((_QWORD *)v14 + 3);
      *((_QWORD *)v14 + 23) = v15;
      *((_OWORD *)v14 + 12) = 0u;
      *((_OWORD *)v14 + 13) = 0u;
      *((_DWORD *)v14 + 56) = 1065353216;
      *((_QWORD *)v14 + 29) = 0;
      *((_QWORD *)v14 + 30) = 0;
      *((_QWORD *)v14 + 33) = 0;
      *((_QWORD *)v14 + 34) = 0;
      *((_QWORD *)v14 + 31) = 0;
      *((_QWORD *)v14 + 32) = v14 + 264;
      v14[316] = 0;
      *((_QWORD *)v14 + 36) = 0;
      *((_QWORD *)v14 + 37) = 0;
      *((_QWORD *)v14 + 35) = 0;
      v14[304] = 0;
      *((_QWORD *)v14 + 40) = v14 + 328;
      *((_QWORD *)v14 + 41) = 0;
      v14[380] = 0;
      *((_QWORD *)v14 + 42) = 0;
      *((_QWORD *)v14 + 43) = 0;
      v14[368] = 0;
      *((_QWORD *)v14 + 44) = 0;
      *((_QWORD *)v14 + 45) = 0;
      *((_OWORD *)v14 + 24) = 0u;
      *((_OWORD *)v14 + 25) = 0u;
      *((_DWORD *)v14 + 104) = 1065353216;
      *((_QWORD *)v14 + 53) = -1;
      v14[432] = 0;
      *((_DWORD *)v14 + 113) = 0;
      *(_QWORD *)(v14 + 436) = 0;
      *(_QWORD *)(v14 + 444) = 0;
      *(_QWORD *)object = v14 + 24;
      *(_QWORD *)&object[8] = v14;
      v17 = a2;
      v19 = a2[1];
      v18 = (unint64_t)a2[2];
      if ((unint64_t)v19 >= v18)
      {
        v20 = *a2;
        v21 = ((char *)v19 - (char *)*a2) >> 4;
        v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 60)
          sub_20E867F44();
        v23 = v11;
        v24 = v18 - (_QWORD)v20;
        if (v24 >> 3 > v22)
          v22 = v24 >> 3;
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0)
          v25 = 0xFFFFFFFFFFFFFFFLL;
        else
          v25 = v22;
        if (v25 >> 60)
          sub_20E877A38();
        v26 = (char *)operator new(16 * v25);
        v27 = (uint64_t *)&v26[16 * v21];
        *v27 = (uint64_t)v16;
        v27[1] = (uint64_t)v14;
        v28 = (uint64_t *)&v26[16 * v25];
        *(_QWORD *)&object[8] = 0;
        *(_QWORD *)object = 0;
        v29 = v27 + 2;
        if (v19 == v20)
        {
          *a2 = v27;
          a2[1] = v29;
          a2[2] = v28;
          v11 = v23;
        }
        else
        {
          v11 = v23;
          do
          {
            v30 = *((_OWORD *)v19 - 1);
            v19 -= 2;
            *((_OWORD *)v27 - 1) = v30;
            v27 -= 2;
            *v19 = 0;
            v19[1] = 0;
          }
          while (v19 != v20);
          v19 = *a2;
          v31 = a2[1];
          *a2 = v27;
          a2[1] = v29;
          for (a2[2] = v28; v31 != v19; v31 -= 2)
          {
            v32 = (std::__shared_weak_count *)*(v31 - 1);
            if (v32)
            {
              p_shared_owners = (unint64_t *)&v32->__shared_owners_;
              do
                v34 = __ldaxr(p_shared_owners);
              while (__stlxr(v34 - 1, p_shared_owners));
              if (!v34)
              {
                ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
                std::__shared_weak_count::__release_weak(v32);
              }
            }
          }
        }
        if (v19)
          operator delete(v19);
        v35 = *(std::__shared_weak_count **)&object[8];
        v17 = a2;
        a2[1] = v29;
        if (v35)
        {
          v36 = (unint64_t *)&v35->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          v17 = a2;
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
      }
      else
      {
        *v19 = (uint64_t)v16;
        v19[1] = (uint64_t)v14;
        a2[1] = v19 + 2;
      }
      v38 = *(v17[1] - 2);
      v39 = (uint64_t *)operator new();
      sub_20E8E8A78(v39);
      v40 = *(uint64_t **)(v38 + 424);
      *(_QWORD *)(v38 + 424) = v39;
      if (v40)
      {
        v41 = sub_20E8E95B0(v40);
        MEMORY[0x212BC6398](v41, 0x20C40313AD07FLL);
      }
      v9 = a1;
      v42 = (int8x8_t)(*a1)[46];
      if (v42)
      {
        v43 = v10[2];
        v44 = (uint8x8_t)vcnt_s8(v42);
        v44.i16[0] = vaddlv_u8(v44);
        if (v44.u32[0] > 1uLL)
        {
          v45 = v10[2];
          if (v43 >= *(_QWORD *)&v42)
            v45 = v43 % *(_QWORD *)&v42;
        }
        else
        {
          v45 = (*(_QWORD *)&v42 - 1) & v43;
        }
        v46 = *(_QWORD **)((*a1)[45] + 8 * v45);
        if (v46)
        {
          v47 = (_QWORD *)*v46;
          if (v47)
          {
            if (v44.u32[0] < 2uLL)
            {
              v48 = *(_QWORD *)&v42 - 1;
              while (1)
              {
                v50 = v47[1];
                if (v50 == v43)
                {
                  if (v47[2] == v43)
                    goto LABEL_14;
                }
                else if ((v50 & v48) != v45)
                {
                  goto LABEL_15;
                }
                v47 = (_QWORD *)*v47;
                if (!v47)
                  goto LABEL_15;
              }
            }
            do
            {
              v49 = v47[1];
              if (v49 == v43)
              {
                if (v47[2] == v43)
                {
LABEL_14:
                  v12 = v47[3];
                  v13 = *(a2[1] - 2) + 360;
                  *(_QWORD *)object = v10 + 2;
                  sub_20EE61B18(v13, v10 + 2, (uint64_t)&unk_2102DB95C, (_QWORD **)object)[3] = v12;
                  v9 = a1;
                  break;
                }
              }
              else
              {
                if (v49 >= *(_QWORD *)&v42)
                  v49 %= *(_QWORD *)&v42;
                if (v49 != v45)
                  break;
              }
              v47 = (_QWORD *)*v47;
            }
            while (v47);
          }
        }
      }
LABEL_15:
      v10 = (_QWORD *)*v10;
    }
    while (v10);
  }
  v902 = *a2;
  v805 = a2[1];
  if (*a2 == v805)
    goto LABEL_1185;
  while (2)
  {
    v52 = (_QWORD **)(*v9)[53];
    v53 = (_QWORD *)(*v52)[6];
    v54 = (uint64_t)(*v52 + 7);
    if (v53 == (_QWORD *)v54)
    {
LABEL_100:
      v906 = 0;
      v907 = 0;
      v905 = &v906;
    }
    else
    {
      v55 = 0;
      v56 = *(_QWORD *)(*v902 + 160);
      v57 = (_QWORD *)(*v52)[6];
      do
      {
        v58 = (_QWORD *)v57[1];
        if (v58)
        {
          do
          {
            v59 = v58;
            v58 = (_QWORD *)*v58;
          }
          while (v58);
        }
        else
        {
          do
          {
            v59 = (_QWORD *)v57[2];
            _ZF = *v59 == (_QWORD)v57;
            v57 = v59;
          }
          while (!_ZF);
        }
        ++v55;
        v57 = v59;
      }
      while (v59 != (_QWORD *)v54);
      while (1)
      {
        while (1)
        {
          v60 = v55 >> 1;
          v61 = v53;
          if (v55 != 1)
          {
            v64 = v55 >> 1;
            v65 = v53;
            do
            {
              v66 = (_QWORD *)v65[1];
              if (v66)
              {
                do
                {
                  v61 = v66;
                  v66 = (_QWORD *)*v66;
                }
                while (v66);
              }
              else
              {
                do
                {
                  v61 = (_QWORD *)v65[2];
                  _ZF = *v61 == (_QWORD)v65;
                  v65 = v61;
                }
                while (!_ZF);
              }
              v65 = v61;
              v70 = v64-- <= 1;
            }
            while (!v70);
          }
          v62 = v61[4];
          if (v62 >= v56)
            break;
          v63 = (_QWORD *)v61[1];
          if (v63)
          {
            do
            {
              v53 = v63;
              v63 = (_QWORD *)*v63;
            }
            while (v63);
          }
          else
          {
            do
            {
              v53 = (_QWORD *)v61[2];
              _ZF = *v53 == (_QWORD)v61;
              v61 = v53;
            }
            while (!_ZF);
          }
          v55 += ~v60;
          if (!v55)
            goto LABEL_100;
        }
        if (v62 <= v56)
          break;
        v54 = (uint64_t)v61;
        v55 >>= 1;
        if (!v60)
          goto LABEL_100;
      }
      if (v53 != v61)
      {
        v434 = 0;
        v435 = v53;
        do
        {
          v436 = (_QWORD *)v435[1];
          if (v436)
          {
            do
            {
              v437 = v436;
              v436 = (_QWORD *)*v436;
            }
            while (v436);
          }
          else
          {
            do
            {
              v437 = (_QWORD *)v435[2];
              _ZF = *v437 == (_QWORD)v435;
              v435 = v437;
            }
            while (!_ZF);
          }
          ++v434;
          v435 = v437;
        }
        while (v437 != v61);
        do
        {
          v438 = v434 >> 1;
          v439 = v53;
          if (v434 != 1)
          {
            v441 = v434 >> 1;
            v442 = v53;
            do
            {
              v443 = (_QWORD *)v442[1];
              if (v443)
              {
                do
                {
                  v439 = v443;
                  v443 = (_QWORD *)*v443;
                }
                while (v443);
              }
              else
              {
                do
                {
                  v439 = (_QWORD *)v442[2];
                  _ZF = *v439 == (_QWORD)v442;
                  v442 = v439;
                }
                while (!_ZF);
              }
              v442 = v439;
              v70 = v441-- <= 1;
            }
            while (!v70);
          }
          if (v439[4] < v56)
          {
            v440 = (_QWORD *)v439[1];
            if (v440)
            {
              do
              {
                v53 = v440;
                v440 = (_QWORD *)*v440;
              }
              while (v440);
            }
            else
            {
              do
              {
                v53 = (_QWORD *)v439[2];
                _ZF = *v53 == (_QWORD)v439;
                v439 = v53;
              }
              while (!_ZF);
            }
            v438 = v434 + ~v438;
          }
          v434 = v438;
        }
        while (v438);
      }
      v444 = (_QWORD *)v61[1];
      if (v444)
      {
        do
        {
          v445 = v444;
          v444 = (_QWORD *)*v444;
        }
        while (v444);
      }
      else
      {
        do
        {
          v445 = (_QWORD *)v61[2];
          _ZF = *v445 == (_QWORD)v61;
          v61 = v445;
        }
        while (!_ZF);
      }
      if (v445 == (_QWORD *)v54)
      {
        v445 = (_QWORD *)v54;
      }
      else
      {
        v446 = 0;
        v447 = v445;
        do
        {
          v448 = (_QWORD *)v447[1];
          if (v448)
          {
            do
            {
              v449 = v448;
              v448 = (_QWORD *)*v448;
            }
            while (v448);
          }
          else
          {
            do
            {
              v449 = (_QWORD *)v447[2];
              _ZF = *v449 == (_QWORD)v447;
              v447 = v449;
            }
            while (!_ZF);
          }
          ++v446;
          v447 = v449;
        }
        while (v449 != (_QWORD *)v54);
        do
        {
          v450 = v446 >> 1;
          v451 = v445;
          if (v446 != 1)
          {
            v453 = v446 >> 1;
            v454 = v445;
            do
            {
              v455 = (_QWORD *)v454[1];
              if (v455)
              {
                do
                {
                  v451 = v455;
                  v455 = (_QWORD *)*v455;
                }
                while (v455);
              }
              else
              {
                do
                {
                  v451 = (_QWORD *)v454[2];
                  _ZF = *v451 == (_QWORD)v454;
                  v454 = v451;
                }
                while (!_ZF);
              }
              v454 = v451;
              v70 = v453-- <= 1;
            }
            while (!v70);
          }
          if (v451[4] <= v56)
          {
            v452 = (_QWORD *)v451[1];
            if (v452)
            {
              do
              {
                v445 = v452;
                v452 = (_QWORD *)*v452;
              }
              while (v452);
            }
            else
            {
              do
              {
                v445 = (_QWORD *)v451[2];
                _ZF = *v445 == (_QWORD)v451;
                v451 = v445;
              }
              while (!_ZF);
            }
            v450 = v446 + ~v450;
          }
          v446 = v450;
        }
        while (v450);
      }
      v906 = 0;
      v907 = 0;
      v905 = &v906;
      if (v53 != v445)
      {
        v642 = 0;
        v643 = &v906;
        v644 = &v906;
LABEL_1146:
        v651 = operator new(0x30uLL);
        *((_OWORD *)v651 + 2) = *((_OWORD *)v53 + 2);
        *v651 = 0;
        v651[1] = 0;
        v651[2] = v643;
        *v644 = v651;
        if (*v905)
        {
          v905 = (_QWORD **)*v905;
          v651 = (_QWORD *)*v644;
        }
        v652 = v906;
        _ZF = v651 == v906;
        *((_BYTE *)v651 + 24) = v651 == v906;
        v9 = a1;
        if (_ZF)
          goto LABEL_1174;
        while (1)
        {
          v653 = v651[2];
          if (*(_BYTE *)(v653 + 24))
            goto LABEL_1174;
          v654 = *(_QWORD **)(v653 + 16);
          v655 = *v654;
          if (*v654 == v653)
          {
            v658 = v654[1];
            if (!v658 || (v659 = *(unsigned __int8 *)(v658 + 24), v656 = (_BYTE *)(v658 + 24), v659))
            {
              if (*(_QWORD **)v653 == v651)
              {
                *(_BYTE *)(v653 + 24) = 1;
                *((_BYTE *)v654 + 24) = 0;
                v662 = *(_QWORD *)(v653 + 8);
                *v654 = v662;
                if (v662)
                  goto LABEL_1163;
              }
              else
              {
                v660 = *(uint64_t **)(v653 + 8);
                v661 = *v660;
                *(_QWORD *)(v653 + 8) = *v660;
                if (v661)
                {
                  *(_QWORD *)(v661 + 16) = v653;
                  v654 = *(_QWORD **)(v653 + 16);
                }
                v660[2] = (uint64_t)v654;
                *(_QWORD *)(*(_QWORD *)(v653 + 16) + 8 * (**(_QWORD **)(v653 + 16) != v653)) = v660;
                *v660 = v653;
                *(_QWORD *)(v653 + 16) = v660;
                v654 = (_QWORD *)v660[2];
                v653 = *v654;
                *((_BYTE *)v660 + 24) = 1;
                *((_BYTE *)v654 + 24) = 0;
                v662 = *(_QWORD *)(v653 + 8);
                *v654 = v662;
                if (v662)
LABEL_1163:
                  *(_QWORD *)(v662 + 16) = v654;
              }
              *(_QWORD *)(v653 + 16) = v654[2];
              *(_QWORD *)(v654[2] + 8 * (*(_QWORD *)v654[2] != (_QWORD)v654)) = v653;
              *(_QWORD *)(v653 + 8) = v654;
              v654[2] = v653;
              v907 = ++v642;
              v650 = (_QWORD *)v53[1];
              if (!v650)
                goto LABEL_1177;
              do
              {
LABEL_1175:
                v666 = v650;
                v650 = (_QWORD *)*v650;
              }
              while (v650);
LABEL_1179:
              if (v666 == v445)
              {
                v52 = (_QWORD **)(*v9)[53];
                break;
              }
              v647 = v906;
              v53 = v666;
              v643 = &v906;
              v644 = &v906;
              if (!v906)
                goto LABEL_1146;
              v645 = v666[4];
              v646 = *((_DWORD *)v53 + 10);
              while (2)
              {
                while (1)
                {
                  v643 = (_QWORD **)v647;
                  v648 = v647[4];
                  if (v645 < v648)
                    break;
                  if (v645 == v648)
                  {
                    v649 = *((_DWORD *)v643 + 10);
                    if (v646 < v649)
                      break;
                    if (v649 >= v646)
                    {
                      v9 = a1;
                      v650 = (_QWORD *)v53[1];
                      if (v650)
                        goto LABEL_1175;
                      do
                      {
LABEL_1177:
                        v666 = (_QWORD *)v53[2];
                        _ZF = *v666 == (_QWORD)v53;
                        v53 = v666;
                      }
                      while (!_ZF);
                      goto LABEL_1179;
                    }
                  }
                  else if (v648 >= v645)
                  {
                    v9 = a1;
                    v650 = (_QWORD *)v53[1];
                    if (v650)
                      goto LABEL_1175;
                    goto LABEL_1177;
                  }
                  v647 = v643[1];
                  if (!v647)
                  {
                    v644 = v643 + 1;
                    goto LABEL_1146;
                  }
                }
                v647 = *v643;
                v644 = v643;
                if (!*v643)
                  goto LABEL_1146;
                continue;
              }
            }
          }
          else if (!v655 || (v657 = *(unsigned __int8 *)(v655 + 24), v656 = (_BYTE *)(v655 + 24), v657))
          {
            if (*(_QWORD **)v653 == v651)
            {
              v663 = v651[1];
              *(_QWORD *)v653 = v663;
              if (v663)
              {
                *(_QWORD *)(v663 + 16) = v653;
                v654 = *(_QWORD **)(v653 + 16);
              }
              v651[2] = v654;
              *(_QWORD *)(*(_QWORD *)(v653 + 16) + 8 * (**(_QWORD **)(v653 + 16) != v653)) = v651;
              v651[1] = v653;
              *(_QWORD *)(v653 + 16) = v651;
              v654 = (_QWORD *)v651[2];
            }
            else
            {
              v651 = (_QWORD *)v651[2];
            }
            *((_BYTE *)v651 + 24) = 1;
            *((_BYTE *)v654 + 24) = 0;
            v664 = (uint64_t *)v654[1];
            v665 = *v664;
            v654[1] = *v664;
            if (v665)
              *(_QWORD *)(v665 + 16) = v654;
            v664[2] = v654[2];
            *(_QWORD *)(v654[2] + 8 * (*(_QWORD *)v654[2] != (_QWORD)v654)) = v664;
            *v664 = (uint64_t)v654;
            v654[2] = v664;
LABEL_1174:
            v907 = ++v642;
            v650 = (_QWORD *)v53[1];
            if (!v650)
              goto LABEL_1177;
            goto LABEL_1175;
          }
          *(_BYTE *)(v653 + 24) = 1;
          v651 = v654;
          *((_BYTE *)v654 + 24) = v654 == v652;
          *v656 = 1;
          if (v654 == v652)
            goto LABEL_1174;
        }
      }
    }
    sub_20FCE86E0(*v52, **(_QWORD **)(*v902 + 424));
    v67 = 0;
    v68 = 0;
    v897 = *v902;
    v806 = *v9;
    v69 = *(_QWORD *)(*v9)[53];
    do
    {
      *(_QWORD *)&object[8 * v67] = 0;
      v70 = v68 < 2;
      if (v68 < 2)
        ++v68;
      else
        v68 = 0;
      if (v70)
        ++v67;
      else
        v67 += 4;
    }
    while (v67 != 18);
    v71 = 0;
    v72 = 0;
    *(_QWORD *)object = 0x3FF0000000000000;
    *(_QWORD *)&object[56] = 0x3FF0000000000000;
    *(_QWORD *)&object[112] = 0x3FF0000000000000;
    do
    {
      *(_QWORD *)&object[8 * v71 + 144] = 0;
      v73 = v72 < 2;
      if (v72 < 2)
        ++v72;
      else
        v72 = 0;
      if (v73)
        ++v71;
      else
        v71 += 4;
    }
    while (v71 != 18);
    v74 = 0;
    v75 = 0;
    do
    {
      *(_QWORD *)&object[8 * v74 + 24] = 0;
      v76 = v75 < 2;
      if (v75 < 2)
        ++v75;
      else
        v75 = 0;
      if (v76)
        ++v74;
      else
        v74 += 4;
    }
    while (v74 != 18);
    *(_OWORD *)&object[168] = xmmword_21030D320;
    *(_QWORD *)&object[184] = 0;
    *(_QWORD *)&object[232] = 0;
    *(_OWORD *)&object[216] = xmmword_2102DD520;
    *(_QWORD *)&object[264] = 0;
    *(_QWORD *)&object[272] = 0;
    *(_QWORD *)&object[280] = 0x3FF0000000000000;
    v77 = v905;
    v78 = (__int128 *)&v906;
    if (v905 != &v906)
    {
      v861 = *(float64x2_t *)&object[32];
      v858 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&object[96], 0);
      v859 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&object[48], 0);
      v856 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&object[192], 0);
      v857 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&object[144], 0);
      v79 = (_QWORD *)(v69 + 56);
      v847 = *(float64x2_t *)&object[48];
      v854 = (float64x2_t)vdupq_laneq_s64(*(int64x2_t *)&object[48], 1);
      v855 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&object[240], 0);
      v860 = *(float64x2_t *)&object[96];
      v880 = (float64x2_t)vdupq_laneq_s64(*(int64x2_t *)&object[96], 1);
      v889 = *(float64x2_t *)&object[16];
      v835 = *(float64x2_t *)object;
      v844 = *(float64x2_t *)&object[144];
      v879 = (float64x2_t)vdupq_laneq_s64(*(int64x2_t *)&object[144], 1);
      v842 = *(float64x2_t *)&object[192];
      v878 = (float64x2_t)vdupq_laneq_s64(*(int64x2_t *)&object[192], 1);
      v839 = *(float64x2_t *)&object[64];
      v840 = *(float64x2_t *)&object[240];
      v877 = (float64x2_t)vdupq_laneq_s64(*(int64x2_t *)&object[240], 1);
      v852 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&object[64], 0);
      v837 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&object[160], 0);
      v838 = *(float64x2_t *)&object[160];
      v80.f64[1] = *(float64_t *)&object[280];
      v874 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&object[208], 0);
      v875 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&object[112], 0);
      v81 = v905;
      v872 = (float64x2_t)vdupq_laneq_s64(*(int64x2_t *)&object[64], 1);
      v873 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&object[256], 0);
      v845 = *(float64x2_t *)&object[128];
      v846 = *(float64x2_t *)&object[112];
      v843 = *(float64x2_t *)&object[208];
      v870 = (float64x2_t)vdupq_laneq_s64(*(int64x2_t *)&object[208], 1);
      v871 = (float64x2_t)vdupq_laneq_s64(*(int64x2_t *)&object[112], 1);
      v836 = *(float64x2_t *)&object[256];
      v881 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&object[80], 0);
      v868 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&object[128], 0);
      v869 = (float64x2_t)vdupq_laneq_s64(*(int64x2_t *)&object[256], 1);
      v849 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&object[224], 0);
      v850 = (float64x2_t)vdupq_laneq_s64(*(int64x2_t *)&object[160], 1);
      v866 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&object[272], 0);
      v867 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&object[176], 0);
      v853 = *(float64x2_t *)&object[80];
      v864 = (float64x2_t)vdupq_laneq_s64(*(int64x2_t *)&object[128], 1);
      v865 = (float64x2_t)vdupq_laneq_s64(*(int64x2_t *)&object[80], 1);
      v876 = *(float64x2_t *)&object[176];
      v841 = *(float64x2_t *)&object[224];
      v848 = (float64x2_t)vdupq_laneq_s64(*(int64x2_t *)&object[224], 1);
      v851 = *(float64x2_t *)&object[272];
      v862 = (float64x2_t)vdupq_laneq_s64(*(int64x2_t *)&object[272], 1);
      v863 = (float64x2_t)vdupq_laneq_s64(*(int64x2_t *)&object[176], 1);
      do
      {
        v82 = (uint64_t *)*v79;
        if (!*v79)
          goto LABEL_1357;
        v83 = v81[4];
        v84 = *((_DWORD *)v81 + 10);
        v85 = v79;
        do
        {
          v86 = (_QWORD *)v82[4];
          if (v86 < v83)
          {
            ++v82;
          }
          else if (v86 == v83)
          {
            if (*((_DWORD *)v82 + 10) < v84)
              ++v82;
            else
              v85 = v82;
          }
          else
          {
            v85 = v82;
          }
          v82 = (uint64_t *)*v82;
        }
        while (v82);
        if (v85 == v79
          || (v87 = (_QWORD *)v85[4], v83 < v87)
          || v83 == v87 && *((_DWORD *)v85 + 10) > v84
          || (v88 = (float64x2_t *)v85[6]) == 0)
        {
LABEL_1357:
          sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/viostateset.hpp", 1020, (uint64_t)"vio_state_ptr", 13, (uint64_t)"VIO state not found.", 20, (void (*)(void **))sub_21023DDB0);
          abort();
        }
        _Q1 = *v88;
        v90 = v88[1].f64[0];
        v91 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_21030D320, v88->f64[0]), (float64x2_t)xmmword_2102DD520, *v88, 1), (float64x2_t)0, v90);
        v92 = v88[2].f64[1];
        _D24 = 0;
        _Q6 = *(float64x2_t *)((char *)v88 + 24);
        __asm { FMLA            D5, D24, V1.D[1] }
        _Q1.f64[0] = v88[4].f64[0];
        _Q16 = v88[3];
        v80.f64[0] = v88[5].f64[1];
        v99 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_21030D320, _Q6.f64[0]), (float64x2_t)xmmword_2102DD520, _Q6, 1), (float64x2_t)0, v92);
        _Q18 = *(float64x2_t *)((char *)v88 + 72);
        v101 = v88[7].f64[0];
        __asm { FMLA            D19, D24, V6.D[1] }
        _Q6 = v88[6];
        v104 = v90 + _D5;
        v105 = v92 + _D19;
        v106 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_21030D320, _Q16.f64[0]), (float64x2_t)xmmword_2102DD520, _Q16, 1), (float64x2_t)0, _Q1.f64[0]);
        __asm { FMLA            D19, D24, V16.D[1] }
        _Q1.f64[0] = _Q1.f64[0] + _D19;
        v108 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_21030D320, _Q6.f64[0]), (float64x2_t)xmmword_2102DD520, _Q6, 1), (float64x2_t)0, v101);
        __asm { FMLA            D19, D24, V6.D[1] }
        _Q6.f64[0] = v101 + _D19;
        v110 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_21030D320, _Q18.f64[0]), (float64x2_t)xmmword_2102DD520, _Q18, 1), (float64x2_t)0, v80.f64[0]);
        __asm { FMLA            D20, D24, V18.D[1] }
        v80.f64[0] = v80.f64[0] + _D20;
        *v88 = v91;
        v88[1].f64[0] = v104;
        *(float64x2_t *)((char *)v88 + 24) = v99;
        v88[2].f64[1] = v105;
        v88[3] = v106;
        v88[4].f64[0] = _Q1.f64[0];
        *(float64x2_t *)((char *)v88 + 72) = vaddq_f64(v110, (float64x2_t)0);
        *(_QWORD *)&v88[5].f64[1] = *(_OWORD *)&vaddq_f64(v80, (float64x2_t)0);
        v88[6] = v108;
        v88[7].f64[0] = _Q6.f64[0];
        v113 = *(float64x2_t *)((char *)v88 + 456);
        v112 = *(float64x2_t *)((char *)v88 + 472);
        v115 = *(float64x2_t *)((char *)v88 + 520);
        v114 = *(float64x2_t *)((char *)v88 + 536);
        v117 = *(float64x2_t *)((char *)v88 + 488);
        v116 = *(float64x2_t *)((char *)v88 + 504);
        v118 = *(float64x2_t *)((char *)v88 + 552);
        v119 = *(float64x2_t *)((char *)v88 + 568);
        v120 = *(float64x2_t *)((char *)v88 + 616);
        v121 = *(float64x2_t *)((char *)v88 + 632);
        v122 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v835, v113.f64[0]), v847, v113, 1), v860, v112.f64[0]), v844, v112, 1), v842, v117.f64[0]), v840, v117, 1);
        v124 = *(float64x2_t *)((char *)v88 + 584);
        v123 = *(float64x2_t *)((char *)v88 + 600);
        v812 = *(float64x2_t *)((char *)v88 + 648);
        v819 = *(float64x2_t *)((char *)v88 + 728);
        v821 = *(float64x2_t *)((char *)v88 + 664);
        v829 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v889, v113.f64[0]), v839, v113, 1), v846, v112.f64[0]), v838, v112, 1), v843, v117.f64[0]), v836, v117, 1);
        v814 = *(float64x2_t *)((char *)v88 + 680);
        v816 = *(float64x2_t *)((char *)v88 + 696);
        v818 = *(float64x2_t *)((char *)v88 + 712);
        v833 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v861, v113.f64[0]), v853, v113, 1), v845, v112.f64[0]), v876, v112, 1), v841, v117.f64[0]), v851, v117, 1);
        v125 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v835, v116.f64[0]), v847, v116, 1), v860, v115.f64[0]), v844, v115, 1), v842, v114.f64[0]), v840, v114, 1);
        v126 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v889, v116.f64[0]), v839, v116, 1), v846, v115.f64[0]), v838, v115, 1), v843, v114.f64[0]), v836, v114, 1);
        v831 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v861, v116.f64[0]), v853, v116, 1), v845, v115.f64[0]), v876, v115, 1), v841, v114.f64[0]), v851, v114, 1);
        v127 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v835, v118.f64[0]), v847, v118, 1), v860, v119.f64[0]), v844, v119, 1), v842, v124.f64[0]), v840, v124, 1);
        v128 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v889, v118.f64[0]), v839, v118, 1), v846, v119.f64[0]), v838, v119, 1), v843, v124.f64[0]), v836, v124, 1);
        v827 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v861, v118.f64[0]), v853, v118, 1), v845, v119.f64[0]), v876, v119, 1), v841, v124.f64[0]), v851, v124, 1);
        v129 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v835, v123.f64[0]), v847, v123, 1), v860, v120.f64[0]), v844, v120, 1), v842, v121.f64[0]), v840, v121, 1);
        v130 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v889, v123.f64[0]), v839, v123, 1), v846, v120.f64[0]), v838, v120, 1), v843, v121.f64[0]), v836, v121, 1);
        v825 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v861, v123.f64[0]), v853, v123, 1), v845, v120.f64[0]), v876, v120, 1), v841, v121.f64[0]), v851, v121, 1);
        v131 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v835, v812.f64[0]), v847, v812, 1), v860, v821.f64[0]), v844, v821, 1), v842, v814.f64[0]), v840, v814, 1);
        v132 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v889, v812.f64[0]), v839, v812, 1), v846, v821.f64[0]), v838, v821, 1), v843, v814.f64[0]), v836, v814, 1);
        v822 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v861, v812.f64[0]), v853, v812, 1), v845, v821.f64[0]), v876, v821, 1), v841, v814.f64[0]), v851, v814, 1);
        v133 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v835, v816.f64[0]), v847, v816, 1), v860, v818.f64[0]), v844, v818, 1), v842, v819.f64[0]), v840, v819, 1);
        v134 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v889, v816.f64[0]), v839, v816, 1), v846, v818.f64[0]), v838, v818, 1), v843, v819.f64[0]), v836, v819, 1);
        v135 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v861, v816.f64[0]), v853, v816, 1), v845, v818.f64[0]), v876, v818, 1), v841, v819.f64[0]), v851, v819, 1);
        *(float64x2_t *)((char *)v88 + 456) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v122, v835.f64[0]), v859, v125), v858, v127), v857, v129), v856, v131), v855, v133);
        *(float64x2_t *)((char *)v88 + 472) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v829, v835.f64[0]), v859, v126), v858, v128), v857, v130), v856, v132), v855, v134);
        *(float64x2_t *)((char *)v88 + 488) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v833, v835.f64[0]), v859, v831), v858, v827), v857, v825), v856, v822), v855, v135);
        *(float64x2_t *)((char *)v88 + 504) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_laneq_f64(v122, v835, 1), v854, v125), v880, v127), v879, v129), v878, v131), v877, v133);
        *(float64x2_t *)((char *)v88 + 520) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_laneq_f64(v829, v835, 1), v854, v126), v880, v128), v879, v130), v878, v132), v877, v134);
        *(float64x2_t *)((char *)v88 + 536) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_laneq_f64(v833, v835, 1), v854, v831), v880, v827), v879, v825), v878, v822), v877, v135);
        *(float64x2_t *)((char *)v88 + 552) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v122, v889.f64[0]), v852, v125), v875, v127), v837, v129), v874, v131), v873, v133);
        *(float64x2_t *)((char *)v88 + 568) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v829, v889.f64[0]), v852, v126), v875, v128), v837, v130), v874, v132), v873, v134);
        *(float64x2_t *)((char *)v88 + 584) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v833, v889.f64[0]), v852, v831), v875, v827), v837, v825), v874, v822), v873, v135);
        *(float64x2_t *)((char *)v88 + 600) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_laneq_f64(v122, v889, 1), v872, v125), v871, v127), v850, v129), v870, v131), v869, v133);
        *(float64x2_t *)((char *)v88 + 616) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_laneq_f64(v829, v889, 1), v872, v126), v871, v128), v850, v130), v870, v132), v869, v134);
        *(float64x2_t *)((char *)v88 + 632) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_laneq_f64(v833, v889, 1), v872, v831), v871, v827), v850, v825), v870, v822), v869, v135);
        *(float64x2_t *)((char *)v88 + 648) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v122, v861.f64[0]), v881, v125), v868, v127), v867, v129), v849, v131), v866, v133);
        *(float64x2_t *)((char *)v88 + 664) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v829, v861.f64[0]), v881, v126), v868, v128), v867, v130), v849, v132), v866, v134);
        *(float64x2_t *)((char *)v88 + 680) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v833, v861.f64[0]), v881, v831), v868, v827), v867, v825), v849, v822), v866, v135);
        *(float64x2_t *)((char *)v88 + 696) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_laneq_f64(v122, v861, 1), v865, v125), v864, v127), v863, v129), v848, v131), v862, v133);
        *(float64x2_t *)((char *)v88 + 712) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_laneq_f64(v829, v861, 1), v865, v126), v864, v128), v863, v130), v848, v132), v862, v134);
        *(float64x2_t *)((char *)v88 + 728) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_laneq_f64(v833, v861, 1), v865, v831), v864, v827), v863, v825), v848, v822), v862, v135);
        v136 = *(float64x2_t *)((char *)v88 + 200);
        v137 = *(float64x2_t *)((char *)v88 + 184);
        v138 = *(float64x2_t *)((char *)v88 + 168);
        v139 = *(float64x2_t *)((char *)v88 + 248);
        v140 = *(float64x2_t *)((char *)v88 + 232);
        v141 = *(float64x2_t *)((char *)v88 + 216);
        v143 = *(float64x2_t *)((char *)v88 + 264);
        v142 = *(float64x2_t *)((char *)v88 + 280);
        v145 = *(float64x2_t *)((char *)v88 + 328);
        v144 = *(float64x2_t *)((char *)v88 + 344);
        v147 = *(float64x2_t *)((char *)v88 + 296);
        v146 = *(float64x2_t *)((char *)v88 + 312);
        v811 = *(float64x2_t *)((char *)v88 + 360);
        v813 = *(float64x2_t *)((char *)v88 + 376);
        v148 = *(float64x2_t *)((char *)v88 + 424);
        v817 = *(float64x2_t *)((char *)v88 + 440);
        v823 = *(float64x2_t *)((char *)v88 + 392);
        v815 = *(float64x2_t *)((char *)v88 + 408);
        v149 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v835, v138.f64[0]), v847, v138, 1), v860, v137.f64[0]), v844, v137, 1), v842, v136.f64[0]), v840, v136, 1);
        v828 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v889, v138.f64[0]), v839, v138, 1), v846, v137.f64[0]), v838, v137, 1), v843, v136.f64[0]), v836, v136, 1);
        v832 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v861, v138.f64[0]), v853, v138, 1), v845, v137.f64[0]), v876, v137, 1), v841, v136.f64[0]), v851, v136, 1);
        v150 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v835, v141.f64[0]), v847, v141, 1), v860, v140.f64[0]), v844, v140, 1), v842, v139.f64[0]), v840, v139, 1);
        v820 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v889, v141.f64[0]), v839, v141, 1), v846, v140.f64[0]), v838, v140, 1), v843, v139.f64[0]), v836, v139, 1);
        v826 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v861, v141.f64[0]), v853, v141, 1), v845, v140.f64[0]), v876, v140, 1), v841, v139.f64[0]), v851, v139, 1);
        v151 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v835, v143.f64[0]), v847, v143, 1), v860, v142.f64[0]), v844, v142, 1), v842, v147.f64[0]), v840, v147, 1);
        v809 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v889, v143.f64[0]), v839, v143, 1), v846, v142.f64[0]), v838, v142, 1), v843, v147.f64[0]), v836, v147, 1);
        v834 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v861, v143.f64[0]), v853, v143, 1), v845, v142.f64[0]), v876, v142, 1), v841, v147.f64[0]), v851, v147, 1);
        v152 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v835, v146.f64[0]), v847, v146, 1), v860, v145.f64[0]), v844, v145, 1), v842, v144.f64[0]), v840, v144, 1);
        v808 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v889, v146.f64[0]), v839, v146, 1), v846, v145.f64[0]), v838, v145, 1), v843, v144.f64[0]), v836, v144, 1);
        v830 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v861, v146.f64[0]), v853, v146, 1), v845, v145.f64[0]), v876, v145, 1), v841, v144.f64[0]), v851, v144, 1);
        v153 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v835, v811.f64[0]), v847, v811, 1), v860, v813.f64[0]), v844, v813, 1), v842, v823.f64[0]), v840, v823, 1);
        v810 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v889, v811.f64[0]), v839, v811, 1), v846, v813.f64[0]), v838, v813, 1), v843, v823.f64[0]), v836, v823, 1);
        v824 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v861, v811.f64[0]), v853, v811, 1), v845, v813.f64[0]), v876, v813, 1), v841, v823.f64[0]), v851, v823, 1);
        v154 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v835, v815.f64[0]), v847, v815, 1), v860, v148.f64[0]), v844, v148, 1), v842, v817.f64[0]), v840, v817, 1);
        v155 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v889, v815.f64[0]), v839, v815, 1), v846, v148.f64[0]), v838, v148, 1), v843, v817.f64[0]), v836, v817, 1);
        v156 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v861, v815.f64[0]), v853, v815, 1), v845, v148.f64[0]), v876, v148, 1), v841, v817.f64[0]), v851, v817, 1);
        v80 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v149, v861.f64[0]), v881, v150), v868, v151), v867, v152), v849, v153), v866, v154);
        *(float64x2_t *)((char *)v88 + 200) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v832, v835.f64[0]), v859, v826), v858, v834), v857, v830), v856, v824), v855, v156);
        *(float64x2_t *)((char *)v88 + 184) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v828, v835.f64[0]), v859, v820), v858, v809), v857, v808), v856, v810), v855, v155);
        *(float64x2_t *)((char *)v88 + 168) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v149, v835.f64[0]), v859, v150), v858, v151), v857, v152), v856, v153), v855, v154);
        *(float64x2_t *)((char *)v88 + 248) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_laneq_f64(v832, v835, 1), v854, v826), v880, v834), v879, v830), v878, v824), v877, v156);
        *(float64x2_t *)((char *)v88 + 232) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_laneq_f64(v828, v835, 1), v854, v820), v880, v809), v879, v808), v878, v810), v877, v155);
        *(float64x2_t *)((char *)v88 + 216) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_laneq_f64(v149, v835, 1), v854, v150), v880, v151), v879, v152), v878, v153), v877, v154);
        *(float64x2_t *)((char *)v88 + 264) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v149, v889.f64[0]), v852, v150), v875, v151), v837, v152), v874, v153), v873, v154);
        *(float64x2_t *)((char *)v88 + 280) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v828, v889.f64[0]), v852, v820), v875, v809), v837, v808), v874, v810), v873, v155);
        *(float64x2_t *)((char *)v88 + 296) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v832, v889.f64[0]), v852, v826), v875, v834), v837, v830), v874, v824), v873, v156);
        *(float64x2_t *)((char *)v88 + 312) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_laneq_f64(v149, v889, 1), v872, v150), v871, v151), v850, v152), v870, v153), v869, v154);
        *(float64x2_t *)((char *)v88 + 328) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_laneq_f64(v828, v889, 1), v872, v820), v871, v809), v850, v808), v870, v810), v869, v155);
        *(float64x2_t *)((char *)v88 + 344) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_laneq_f64(v832, v889, 1), v872, v826), v871, v834), v850, v830), v870, v824), v869, v156);
        *(float64x2_t *)((char *)v88 + 360) = v80;
        *(float64x2_t *)((char *)v88 + 376) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v828, v861.f64[0]), v881, v820), v868, v809), v867, v808), v849, v810), v866, v155);
        *(float64x2_t *)((char *)v88 + 392) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v832, v861.f64[0]), v881, v826), v868, v834), v867, v830), v849, v824), v866, v156);
        *(float64x2_t *)((char *)v88 + 408) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_laneq_f64(v149, v861, 1), v865, v150), v864, v151), v863, v152), v848, v153), v862, v154);
        *(float64x2_t *)((char *)v88 + 424) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_laneq_f64(v828, v861, 1), v865, v820), v864, v809), v863, v808), v848, v810), v862, v155);
        *(float64x2_t *)((char *)v88 + 440) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_laneq_f64(v832, v861, 1), v865, v826), v864, v834), v863, v830), v848, v824), v862, v156);
        v157 = v81[1];
        if (v157)
        {
          do
          {
            v158 = (_QWORD **)v157;
            v157 = (_QWORD *)*v157;
          }
          while (v157);
        }
        else
        {
          do
          {
            v158 = (_QWORD **)v81[2];
            _ZF = *v158 == v81;
            v81 = v158;
          }
          while (!_ZF);
        }
        v81 = v158;
      }
      while (v158 != &v906);
      while (1)
      {
        v159 = **(_QWORD **)(v897 + 424);
        v161 = v77[4];
        v160 = v77[5];
        v164 = *(uint64_t **)(v159 + 56);
        v162 = (uint64_t *)(v159 + 56);
        v163 = v164;
        v882 = v77;
        if (v164)
        {
          v165 = v162;
          do
          {
            v166 = v163[4];
            if (v166 < v161)
            {
              ++v163;
            }
            else if (v166 == v161)
            {
              if (*((_DWORD *)v163 + 10) < v160)
                ++v163;
              else
                v165 = v163;
            }
            else
            {
              v165 = v163;
            }
            v163 = (uint64_t *)*v163;
          }
          while (v163);
          if (v165 != v162)
          {
            v167 = v165[4];
            if (v161 >= v167 && (v161 != v167 || *((_DWORD *)v165 + 10) <= v160))
            {
              if (v165[6])
              {
                sub_20F44A9B8(&v915);
                if (**(int **)(v915 + 56) > 2
                  || (v168 = *(unsigned __int8 *)(v915 + 72),
                      v169 = sub_20E8C31DC(v915, "OSLogSurrogateAppender", 1, 0),
                      v170 = v169,
                      !v168)
                  && !v169)
                {
                  v171 = (_QWORD *)v77[1];
                  if (v171)
                    goto LABEL_358;
                  goto LABEL_445;
                }
                *(_QWORD *)__p = &v915;
                *(std::chrono::steady_clock::time_point *)&__p[8] = std::chrono::steady_clock::now();
                *(std::chrono::system_clock::time_point *)&__p[16] = std::chrono::system_clock::now();
                *(_DWORD *)&__p[24] = 2;
                *(_QWORD *)&__p[32] = "unknown file";
                *(_DWORD *)&__p[40] = 382;
                *(_QWORD *)&__p[48] = "unknown function";
                *(_QWORD *)&__p[56] = 0;
                *(_QWORD *)&__p[64] = 0;
                v272 = **(_QWORD **)__p;
                if (*(char *)(**(_QWORD **)__p + 39) < 0)
                {
                  v274 = *(const char **)(v272 + 16);
                  v273 = *(_QWORD *)(v272 + 24);
                  v891 = **(_QWORD **)__p + 16;
                  v276 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                  if ((v276 & 1) != 0)
                    goto LABEL_364;
                }
                else
                {
                  v273 = *(unsigned __int8 *)(**(_QWORD **)__p + 39);
                  v274 = (const char *)(**(_QWORD **)__p + 16);
                  v891 = (uint64_t)v274;
                  v275 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                  if ((v275 & 1) != 0)
                    goto LABEL_364;
                }
                if (__cxa_guard_acquire(&qword_254A4A510))
                {
                  sub_20E9E46F8((uint64_t)&v911);
                  sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v911);
                  if (v913 && SHIBYTE(v912) < 0)
                    operator delete((void *)v911);
                  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A4A510);
                }
LABEL_364:
                if (byte_254A4A4F8[23] >= 0)
                  v277 = byte_254A4A4F8;
                else
                  v277 = *(const char **)byte_254A4A4F8;
                if (byte_254A4A4F8[23] >= 0)
                  v278 = byte_254A4A4F8[23];
                else
                  v278 = *(_QWORD *)&byte_254A4A4F8[8];
                *(_QWORD *)object = os_log_create(v277, v274);
                if (v278 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                if (v278 >= 0x17)
                {
                  v280 = (v278 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v278 | 7) != 0x17)
                    v280 = v278 | 7;
                  v281 = v280 + 1;
                  v279 = operator new(v280 + 1);
                  *(_QWORD *)&object[24] = v281 | 0x8000000000000000;
                  *(_QWORD *)&object[8] = v279;
                  *(_QWORD *)&object[16] = v278;
                }
                else
                {
                  object[31] = v278;
                  v279 = &object[8];
                  if (!v278)
                  {
LABEL_378:
                    v279[v278] = 0;
                    object[32] = 1;
                    if (v273 > 0x7FFFFFFFFFFFFFF7)
                      sub_20E860B7C();
                    if (v273 >= 0x17)
                    {
                      v284 = (v273 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v273 | 7) != 0x17)
                        v284 = v273 | 7;
                      v285 = v284 + 1;
                      v282 = operator new(v284 + 1);
                      *(_QWORD *)&object[56] = v285 | 0x8000000000000000;
                      *(_QWORD *)&object[40] = v282;
                      *(_QWORD *)&object[48] = v273;
                    }
                    else
                    {
                      object[63] = v273;
                      v282 = &object[40];
                      if (!v273)
                      {
                        object[40] = 0;
                        object[64] = 1;
                        v283 = *(NSObject **)object;
                        if ((object[63] & 0x80000000) == 0)
                          goto LABEL_382;
                        goto LABEL_388;
                      }
                    }
                    memmove(v282, v274, v273);
                    v282[v273] = 0;
                    object[64] = 1;
                    v283 = *(NSObject **)object;
                    if ((object[63] & 0x80000000) == 0)
                    {
LABEL_382:
                      if (!object[32])
                        goto LABEL_391;
                      goto LABEL_389;
                    }
LABEL_388:
                    operator delete(*(void **)&object[40]);
                    if (!object[32])
                      goto LABEL_391;
LABEL_389:
                    if ((object[31] & 0x80000000) != 0)
                      operator delete(*(void **)&object[8]);
LABEL_391:
                    if (*(_QWORD *)object)
                      os_release(*(void **)object);
                    if (v170 && *(_QWORD *)(v170 + 24))
                    {
                      v286 = _os_log_pack_size();
                      v287 = (std::__shared_weak_count_vtbl *)operator new(v286, (std::align_val_t)8uLL);
                      v288 = (std::__shared_weak_count *)operator new();
                      v289 = v288;
                      v288->__shared_owners_ = 0;
                      v290 = (unint64_t *)&v288->__shared_owners_;
                      v288->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                      v288->__shared_weak_owners_ = 0;
                      v288[1].__vftable = v287;
                      *(_QWORD *)object = v287;
                      *(_QWORD *)&object[8] = v287;
                      *(_QWORD *)&object[16] = v288;
                      do
                        v291 = __ldxr(v290);
                      while (__stxr(v291 + 1, v290));
                      memset(&object[24], 0, 24);
                      do
                        v292 = __ldaxr(v290);
                      while (__stlxr(v292 - 1, v290));
                      if (!v292)
                      {
                        ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
                        std::__shared_weak_count::__release_weak(v289);
                      }
                      v293 = *(_QWORD *)object;
                      *(_WORD *)_os_log_pack_fill() = 0;
                      v294 = operator new();
                      v295 = *(unsigned __int8 *)(v272 + 39);
                      v296 = v891;
                      if ((v295 & 0x80u) != 0)
                      {
                        v296 = *(_QWORD *)(v272 + 16);
                        v295 = *(_QWORD *)(v272 + 24);
                      }
                      *(_QWORD *)v294 = v293;
                      *(_OWORD *)(v294 + 8) = *(_OWORD *)&object[8];
                      *(_QWORD *)&object[8] = 0;
                      *(_QWORD *)&object[16] = 0;
                      *(_OWORD *)(v294 + 24) = *(_OWORD *)&object[24];
                      *(_QWORD *)&object[24] = 0;
                      *(_QWORD *)&object[32] = 0;
                      *(_QWORD *)(v294 + 40) = v296;
                      *(_QWORD *)(v294 + 48) = v295;
                      *(_BYTE *)(v294 + 56) = 2;
                      v914[0] = 0;
                      *(_QWORD *)&v911 = v294;
                      (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v170 + 24) + 40))(*(_QWORD *)(v170 + 24), &v911);
                      v297 = v911;
                      *(_QWORD *)&v911 = 0;
                      if (v297)
                      {
                        v298 = *(std::__shared_weak_count **)(v297 + 32);
                        if (v298)
                        {
                          v299 = (unint64_t *)&v298->__shared_owners_;
                          do
                            v300 = __ldaxr(v299);
                          while (__stlxr(v300 - 1, v299));
                          if (!v300)
                          {
                            ((void (*)(std::__shared_weak_count *))v298->__on_zero_shared)(v298);
                            std::__shared_weak_count::__release_weak(v298);
                          }
                        }
                        v301 = *(std::__shared_weak_count **)(v297 + 16);
                        if (v301)
                        {
                          v302 = (unint64_t *)&v301->__shared_owners_;
                          do
                            v303 = __ldaxr(v302);
                          while (__stlxr(v303 - 1, v302));
                          if (!v303)
                          {
                            ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
                            std::__shared_weak_count::__release_weak(v301);
                          }
                        }
                        MEMORY[0x212BC6398](v297, 0x10F0C40B62ED6C6);
                        v304 = v914[0];
                        v914[0] = 0;
                        if (v304)
                        {
                          v305 = (std::__shared_weak_count *)*((_QWORD *)v304 + 4);
                          if (v305)
                          {
                            v306 = (unint64_t *)&v305->__shared_owners_;
                            do
                              v307 = __ldaxr(v306);
                            while (__stlxr(v307 - 1, v306));
                            if (!v307)
                            {
                              ((void (*)(std::__shared_weak_count *))v305->__on_zero_shared)(v305);
                              std::__shared_weak_count::__release_weak(v305);
                            }
                          }
                          v308 = (std::__shared_weak_count *)*((_QWORD *)v304 + 2);
                          if (v308)
                          {
                            v309 = (unint64_t *)&v308->__shared_owners_;
                            do
                              v310 = __ldaxr(v309);
                            while (__stlxr(v310 - 1, v309));
                            if (!v310)
                            {
                              ((void (*)(std::__shared_weak_count *))v308->__on_zero_shared)(v308);
                              std::__shared_weak_count::__release_weak(v308);
                            }
                          }
                          MEMORY[0x212BC6398](v304, 0x10F0C40B62ED6C6);
                        }
                      }
                      v311 = *(std::__shared_weak_count **)&object[32];
                      if (*(_QWORD *)&object[32])
                      {
                        v312 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                        do
                          v313 = __ldaxr(v312);
                        while (__stlxr(v313 - 1, v312));
                        if (!v313)
                        {
                          ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
                          std::__shared_weak_count::__release_weak(v311);
                        }
                      }
                      v314 = *(std::__shared_weak_count **)&object[16];
                      if (*(_QWORD *)&object[16])
                      {
                        v315 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                        do
                          v316 = __ldaxr(v315);
                        while (__stlxr(v316 - 1, v315));
                        if (!v316)
                        {
                          ((void (*)(std::__shared_weak_count *))v314->__on_zero_shared)(v314);
                          std::__shared_weak_count::__release_weak(v314);
                        }
                      }
                    }
                    else
                    {
                      os_log_type_enabled(v283, OS_LOG_TYPE_DEBUG);
                      *(_WORD *)object = 0;
                      v317 = (void *)_os_log_send_and_compose_impl();
                      if (v317)
                        free(v317);
                    }
                    if (v168)
                    {
                      sub_20E8C003C((uint64_t)__p, "State already exists in vio database");
                      sub_20E863570((uint64_t)__p);
                    }
                    sub_20E863570((uint64_t)__p);
                    v318 = *(std::__shared_weak_count **)&__p[64];
                    if (!*(_QWORD *)&__p[64])
                      goto LABEL_444;
                    v319 = (unint64_t *)(*(_QWORD *)&__p[64] + 8);
                    do
                      v320 = __ldaxr(v319);
                    while (__stlxr(v320 - 1, v319));
                    if (!v320)
                    {
                      ((void (*)(std::__shared_weak_count *))v318->__on_zero_shared)(v318);
                      std::__shared_weak_count::__release_weak(v318);
                      v77 = v882;
                      v171 = (_QWORD *)v882[1];
                      if (v171)
                        goto LABEL_358;
                    }
                    else
                    {
LABEL_444:
                      v77 = v882;
                      v171 = (_QWORD *)v882[1];
                      if (v171)
                        goto LABEL_358;
                    }
                    goto LABEL_445;
                  }
                }
                memmove(v279, v277, v278);
                goto LABEL_378;
              }
            }
          }
        }
        v172 = (_QWORD *)v806[53];
        *(_QWORD *)&v911 = v77[4];
        *((_QWORD *)&v911 + 1) = v160;
        memset(__p, 0, 32);
        v173 = (_QWORD *)*v172;
        v174 = *(_QWORD *)(*v172 + 56);
        if (!v174)
          goto LABEL_185;
        v175 = *v172 + 56;
        do
        {
          v176 = *(_QWORD *)(v174 + 32);
          if (v176 < v161)
          {
            v174 += 8;
          }
          else if (v176 == v161)
          {
            if (*(_DWORD *)(v174 + 40) < v160)
              v174 += 8;
            else
              v175 = v174;
          }
          else
          {
            v175 = v174;
          }
          v174 = *(_QWORD *)v174;
        }
        while (v174);
        if (v175 == *v172 + 56
          || (v177 = *(_QWORD *)(v175 + 32), v161 < v177)
          || v161 == v177 && *(_DWORD *)(v175 + 40) > v160
          || (*(_QWORD *)__p = *(_QWORD *)(v175 + 48)) == 0)
        {
LABEL_185:
          sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/viodatabase.hpp", 492, (uint64_t)"ret.first", 9, (uint64_t)"Failed to find the vio state", 28, (void (*)(void **))sub_21023DDB0);
          v178 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v178 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68 || byte_254A6DE70)
          {
            v179 = qword_254A6DE40;
            for (i = qword_254A6DE48; v179 != i; v179 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v179)(*(_QWORD *)(v179 + 8), "ret.first", 9, "Failed to find the vio state", 28);
          }
          v181 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v181 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68)
            abort();
          qword_254A6DE58(unk_254A6DE60, "ret.first", 9, "Failed to find the vio state", 28);
          v173 = (_QWORD *)*v172;
        }
        sub_20F23A0A0(v173, &v911, (char **)object);
        v182 = *(_DWORD **)&object[8];
        v183 = *(_DWORD **)object;
        if (*(_QWORD *)&object[8] != *(_QWORD *)object)
        {
          v184 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&object[8] - *(_QWORD *)object) >> 3);
          if (v184 >> 60)
            sub_20E867F44();
          v185 = operator new(0xAAAAAAAAAAAAAAB0 * ((uint64_t)(*(_QWORD *)&object[8] - *(_QWORD *)object) >> 3));
          *(_QWORD *)&__p[8] = v185;
          *(_QWORD *)&__p[16] = v185;
          *(_QWORD *)&__p[24] = &v185[2 * v184];
          while (1)
          {
            v188 = (char *)v172[5];
            v187 = (char *)v172[6];
            if (v187 != v188)
              break;
LABEL_210:
            if (v188 == v187)
            {
              v198 = (char *)v172[6];
            }
            else
            {
              v197 = *(_QWORD *)v188;
              v198 = (char *)v172[6];
              if (*(_DWORD *)(*(_QWORD *)v188 + 16) == v183[4])
              {
                v198 = (char *)v172[6];
                if (*(_QWORD *)v197 == *(_QWORD *)v183)
                {
                  if (*(_DWORD *)(v197 + 8) == v183[2])
                    v198 = v188;
                  else
                    v198 = (char *)v172[6];
                }
              }
            }
            if (v187 != v198)
            {
              v199 = *(_QWORD *)v198;
              if ((unint64_t)v185 >= *(_QWORD *)&__p[24])
              {
                v203 = *(_QWORD **)&__p[8];
                v204 = ((uint64_t)v185 - *(_QWORD *)&__p[8]) >> 4;
                v205 = v204 + 1;
                if ((unint64_t)(v204 + 1) >> 60)
                  sub_20E867F44();
                v206 = *(_QWORD *)&__p[24] - *(_QWORD *)&__p[8];
                if ((uint64_t)(*(_QWORD *)&__p[24] - *(_QWORD *)&__p[8]) >> 3 > v205)
                  v205 = v206 >> 3;
                if ((unint64_t)v206 >= 0x7FFFFFFFFFFFFFF0)
                  v207 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v207 = v205;
                if (v207 >> 60)
                  sub_20E877A38();
                v208 = *((_QWORD *)v198 + 1);
                v209 = (char *)operator new(16 * v207);
                v210 = &v209[16 * v204];
                *(_QWORD *)v210 = v199;
                *((_QWORD *)v210 + 1) = v208;
                if (v208)
                {
                  v211 = (unint64_t *)(v208 + 8);
                  do
                    v212 = __ldxr(v211);
                  while (__stxr(v212 + 1, v211));
                }
                v186 = v210 + 16;
                if (v185 == v203)
                {
                  *(_QWORD *)&__p[8] = &v209[16 * v204];
                  *(_QWORD *)&__p[24] = &v209[16 * v207];
                }
                else
                {
                  v213 = v185;
                  do
                  {
                    v214 = *((_OWORD *)v213 - 1);
                    v213 -= 2;
                    *((_OWORD *)v210 - 1) = v214;
                    v210 -= 16;
                    *v213 = 0;
                    v213[1] = 0;
                  }
                  while (v213 != v203);
                  *(_QWORD *)&__p[8] = v210;
                  *(_QWORD *)&__p[16] = v186;
                  *(_QWORD *)&__p[24] = &v209[16 * v207];
                  do
                  {
                    v215 = (std::__shared_weak_count *)*(v185 - 1);
                    if (v215)
                    {
                      v216 = (unint64_t *)&v215->__shared_owners_;
                      do
                        v217 = __ldaxr(v216);
                      while (__stlxr(v217 - 1, v216));
                      if (!v217)
                      {
                        ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
                        std::__shared_weak_count::__release_weak(v215);
                      }
                    }
                    v185 -= 2;
                  }
                  while (v185 != v203);
                }
                if (v203)
                  operator delete(v203);
              }
              else
              {
                *v185 = v199;
                v200 = *((_QWORD *)v198 + 1);
                v185[1] = v200;
                if (v200)
                {
                  v201 = (unint64_t *)(v200 + 8);
                  do
                    v202 = __ldxr(v201);
                  while (__stxr(v202 + 1, v201));
                }
                v186 = v185 + 2;
              }
              *(_QWORD *)&__p[16] = v186;
              v185 = v186;
            }
            v183 += 6;
            if (v183 == v182)
            {
              v182 = *(_DWORD **)object;
              goto LABEL_247;
            }
          }
          v189 = (v187 - v188) >> 4;
          v190 = v183[4];
          v191 = *(_QWORD *)v183;
          while (1)
          {
            v192 = v189 >> 1;
            v193 = &v188[16 * (v189 >> 1)];
            v194 = *(_QWORD *)v193;
            v195 = *(_DWORD *)(*(_QWORD *)v193 + 16);
            _CF = v195 >= v190;
            if (v195 != v190)
              goto LABEL_207;
            if (*(_QWORD *)v194 >= v191)
              break;
LABEL_201:
            v188 = v193 + 16;
            v192 = v189 + ~v192;
LABEL_202:
            v189 = v192;
            if (!v192)
              goto LABEL_210;
          }
          if (*(_QWORD *)v194 != v191)
            goto LABEL_202;
          _CF = *(_DWORD *)(v194 + 8) >= v183[2];
LABEL_207:
          if (_CF)
            goto LABEL_202;
          goto LABEL_201;
        }
LABEL_247:
        if (v182)
        {
          *(_QWORD *)&object[8] = v182;
          operator delete(v182);
        }
        sub_20F283D18(**(_QWORD **)(v897 + 424), v882[4], v882[5], *(uint64_t *)__p);
        v218 = *(char **)&__p[8];
        v890 = *(char **)&__p[16];
        if (*(_QWORD *)&__p[8] != *(_QWORD *)&__p[16])
          break;
LABEL_346:
        if (v218)
        {
          v266 = *(char **)&__p[16];
          v267 = v218;
          if (*(char **)&__p[16] != v218)
          {
            do
            {
              v268 = (std::__shared_weak_count *)*((_QWORD *)v266 - 1);
              if (v268)
              {
                v269 = (unint64_t *)&v268->__shared_owners_;
                do
                  v270 = __ldaxr(v269);
                while (__stlxr(v270 - 1, v269));
                if (!v270)
                {
                  ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
                  std::__shared_weak_count::__release_weak(v268);
                }
              }
              v266 -= 16;
            }
            while (v266 != v218);
            v267 = *(char **)&__p[8];
          }
          *(_QWORD *)&__p[16] = v218;
          operator delete(v267);
        }
        v77 = v882;
        v171 = (_QWORD *)v882[1];
        if (v171)
        {
          do
          {
LABEL_358:
            v271 = (_QWORD **)v171;
            v171 = (_QWORD *)*v171;
          }
          while (v171);
          goto LABEL_149;
        }
        do
        {
LABEL_445:
          v271 = (_QWORD **)v77[2];
          _ZF = *v271 == v77;
          v77 = v271;
        }
        while (!_ZF);
LABEL_149:
        v77 = v271;
        if (v271 == &v906)
        {
          v321 = v905;
          v78 = (__int128 *)&v906;
          if (v905 != &v906)
          {
            do
            {
              sub_20F7C2444((uint64_t *)(*v902 + 168), v321 + 4);
              v322 = (_QWORD *)v321[1];
              if (v322)
              {
                do
                {
                  v323 = (_QWORD **)v322;
                  v322 = (_QWORD *)*v322;
                }
                while (v322);
              }
              else
              {
                do
                {
                  v323 = (_QWORD **)v321[2];
                  _ZF = *v323 == v321;
                  v321 = v323;
                }
                while (!_ZF);
              }
              v321 = v323;
            }
            while (v323 != &v906);
            v78 = (__int128 *)v905;
          }
          goto LABEL_469;
        }
      }
      while (1)
      {
        v219 = *(uint64_t **)(v897 + 424);
        v220 = *(_QWORD *)v218;
        v221 = v219[5];
        v222 = v219[6];
        if (v222 != v221)
        {
          v223 = (v222 - v221) >> 4;
          v224 = *(_DWORD *)(v220 + 16);
          v225 = *(_QWORD *)v220;
          while (1)
          {
            v226 = v223 >> 1;
            v227 = v221 + 16 * (v223 >> 1);
            v228 = *(_QWORD *)v227;
            v229 = *(_DWORD *)(*(_QWORD *)v227 + 16);
            v230 = v229 >= v224;
            if (v229 != v224)
              goto LABEL_258;
            if (*(_QWORD *)v228 >= v225)
              break;
LABEL_252:
            v221 = v227 + 16;
            v226 = v223 + ~v226;
LABEL_253:
            v223 = v226;
            if (!v226)
              goto LABEL_261;
          }
          if (*(_QWORD *)v228 != v225)
            goto LABEL_253;
          v230 = *(_DWORD *)(v228 + 8) >= *(_DWORD *)(v220 + 8);
LABEL_258:
          if (v230)
            goto LABEL_253;
          goto LABEL_252;
        }
LABEL_261:
        if (v221 == v222
          || (v231 = *(_QWORD *)v221, *(_DWORD *)(*(_QWORD *)v221 + 16) != *(_DWORD *)(v220 + 16))
          || *(_QWORD *)v231 != *(_QWORD *)v220
          || *(_DWORD *)(v231 + 8) != *(_DWORD *)(v220 + 8))
        {
          v232 = *(_QWORD *)(v220 + 24);
          if (v232)
          {
            v233 = *v219;
            v234 = (_QWORD *)(*v219 + 56);
            v235 = (uint64_t *)*v234;
            if (*v234)
              goto LABEL_276;
          }
          else
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/viodatabase.hpp", 114, (uint64_t)"vio_frame->lens_model_", 22, (uint64_t)"VIO Frame Lens is not set!", 26, (void (*)(void **))sub_21023DDB0);
            v236 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v236 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v237 = qword_254A6DE40;
              for (j = qword_254A6DE48; v237 != j; v237 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v237)(*(_QWORD *)(v237 + 8), "vio_frame->lens_model_", 22, "VIO Frame Lens is not set!", 26);
            }
            v239 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v239 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
LABEL_1353:
              abort();
            qword_254A6DE58(unk_254A6DE60, "vio_frame->lens_model_", 22, "VIO Frame Lens is not set!", 26);
            v220 = *(_QWORD *)v218;
            v232 = *(_QWORD *)(*(_QWORD *)v218 + 24);
            v233 = *v219;
            v234 = (_QWORD *)(*v219 + 56);
            v235 = (uint64_t *)*v234;
            if (*v234)
            {
LABEL_276:
              v240 = *(_QWORD *)v220;
              v241 = *(_DWORD *)(v220 + 8);
              v242 = v234;
              do
              {
                v243 = v235[4];
                if (v243 < v240)
                {
                  ++v235;
                }
                else if (v243 == v240)
                {
                  if (*((_DWORD *)v235 + 10) < v241)
                    ++v235;
                  else
                    v242 = v235;
                }
                else
                {
                  v242 = v235;
                }
                v235 = (uint64_t *)*v235;
              }
              while (v235);
              if (v242 != v234)
              {
                v244 = v242[4];
                if (v240 >= v244 && (v240 != v244 || *((_DWORD *)v242 + 10) <= v241))
                {
                  v245 = v242[6];
                  if (v245)
                  {
                    v246 = *(_QWORD *)(v233 + 304);
                    if (!v246)
                      goto LABEL_301;
                    v247 = *(_DWORD *)(v220 + 16);
                    v248 = v233 + 304;
                    do
                    {
                      v249 = *(_DWORD *)(v246 + 32);
                      v250 = v249 >= v247;
                      if (v249 >= v247)
                        v251 = (uint64_t *)v246;
                      else
                        v251 = (uint64_t *)(v246 + 8);
                      if (v250)
                        v248 = v246;
                      v246 = *v251;
                    }
                    while (*v251);
                    if (v248 != v233 + 304 && *(_DWORD *)(v248 + 32) <= v247)
                    {
                      v256 = v248 + 40;
                    }
                    else
                    {
LABEL_301:
                      sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/viostateset.hpp", 90, (uint64_t)"T_I_to_C", 8, (uint64_t)"Failed to find ItoC transform for camera source", 47, (void (*)(void **))sub_21023DDB0);
                      v252 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                      if ((v252 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                      {
                        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                        __cxa_guard_release(&qword_254A6DE78);
                      }
                      if (!byte_254A6DE68 || byte_254A6DE70)
                      {
                        v253 = qword_254A6DE40;
                        for (k = qword_254A6DE48; v253 != k; v253 += 16)
                          (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v253)(*(_QWORD *)(v253 + 8), "T_I_to_C", 8, "Failed to find ItoC transform for camera source", 47);
                      }
                      v255 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                      if ((v255 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                      {
                        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                        __cxa_guard_release(&qword_254A6DE78);
                      }
                      if (!byte_254A6DE68)
                        goto LABEL_1353;
                      qword_254A6DE58(unk_254A6DE60, "T_I_to_C", 8, "Failed to find ItoC transform for camera source", 47);
                      v256 = 0;
                    }
                    *(_QWORD *)object = v245;
                    *(_DWORD *)&object[8] = 0;
                    *(_QWORD *)&object[16] = v245 + 72;
                    *(_DWORD *)&object[24] = 0;
                    *(_QWORD *)&object[32] = v256;
                    *(_DWORD *)&object[40] = 0;
                    *(_QWORD *)&object[48] = v256 + 72;
                    *(_DWORD *)&object[56] = 0;
                    *(_QWORD *)&object[64] = v232;
                    sub_20F287320(v233 + 1784, (uint64_t *)v220, v220, (__int128 *)object);
                    if ((v257 & 1) == 0)
                    {
                      sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/viostateset.hpp", 93, (uint64_t)"ret.second", 10, (uint64_t)"Duplicated pose ref. This should not happen", 43, (void (*)(void **))sub_21023DDB0);
                      v258 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                      if ((v258 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                      {
                        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                        __cxa_guard_release(&qword_254A6DE78);
                      }
                      if (!byte_254A6DE68 || byte_254A6DE70)
                      {
                        v259 = qword_254A6DE40;
                        for (m = qword_254A6DE48; v259 != m; v259 += 16)
                          (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v259)(*(_QWORD *)(v259 + 8), "ret.second", 10, "Duplicated pose ref. This should not happen", 43);
                      }
                      v261 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                      if ((v261 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                      {
                        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                        __cxa_guard_release(&qword_254A6DE78);
                      }
                      if (!byte_254A6DE68)
                        goto LABEL_1353;
                      qword_254A6DE58(unk_254A6DE60, "ret.second", 10, "Duplicated pose ref. This should not happen", 43);
                    }
                    if ((char *)v219[6] != sub_20F286FF8((char **)v219 + 5, v221, v218))
                      goto LABEL_327;
                  }
                }
              }
            }
          }
        }
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingTypes/src/MapDataUtil.cpp", 394, (uint64_t)"added", 5, (uint64_t)"Failed to add vio frame to self database", 40, (void (*)(void **))sub_21023DDB0);
        v262 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v262 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v263 = qword_254A6DE40;
          for (n = qword_254A6DE48; v263 != n; v263 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v263)(*(_QWORD *)(v263 + 8), "added", 5, "Failed to add vio frame to self database", 40);
        }
        v265 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v265 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          goto LABEL_1353;
        qword_254A6DE58(unk_254A6DE60, "added", 5, "Failed to add vio frame to self database", 40);
LABEL_327:
        v218 += 16;
        if (v218 == v890)
        {
          v218 = *(char **)&__p[8];
          goto LABEL_346;
        }
      }
    }
LABEL_469:
    v324 = *a1;
    v325 = *v902;
    *(_QWORD *)&__p[8] = 0;
    *(_QWORD *)&__p[16] = 0;
    *(_QWORD *)__p = &__p[8];
    *((_QWORD *)&v911 + 1) = 0;
    v912 = 0;
    *(_QWORD *)&v911 = (char *)&v911 + 8;
    if (v78 != (__int128 *)&v906)
    {
      while (1)
      {
        sub_20F23A0A0(*(_QWORD **)v324[53], v78 + 2, (char **)v914);
        v326 = v914[0];
        v327 = v914[1];
        if (v914[0] != v914[1])
          break;
        if (v914[0])
          goto LABEL_474;
LABEL_475:
        v328 = (__int128 *)*((_QWORD *)v78 + 1);
        if (v328)
        {
          do
          {
            v329 = v328;
            v328 = *(__int128 **)v328;
          }
          while (v328);
        }
        else
        {
          do
          {
            v329 = (__int128 *)*((_QWORD *)v78 + 2);
            _ZF = *(_QWORD *)v329 == (_QWORD)v78;
            v78 = v329;
          }
          while (!_ZF);
        }
        v78 = v329;
        if (v329 == (__int128 *)&v906)
        {
          v398 = *(_QWORD *)&__p[16];
          if (*(_QWORD *)&__p[16])
          {
            v399 = *(_QWORD **)__p;
            if (*(_BYTE **)__p != &__p[8])
            {
              v400 = 0;
              v401 = *(int8x8_t **)(v324[53] + 8);
              v402 = v401 + 3;
              v403 = v401[4];
              v404 = (uint8x8_t)vcnt_s8(v403);
              v404.i16[0] = vaddlv_u8(v404);
              v405 = *(_BYTE **)__p;
              do
              {
                if (v403)
                {
                  v406 = *((_DWORD *)v405 + 12);
                  v407 = *((_DWORD *)v405 + 10);
                  v408 = v407 ^ __ROR4__(v406, 13);
                  if (v404.u32[0] > 1uLL)
                  {
                    v409 = v408;
                    if (*(_QWORD *)&v403 <= v408)
                      v409 = v408 % *(_QWORD *)&v403;
                  }
                  else
                  {
                    v409 = (*(_QWORD *)&v403 + 0xFFFFFFFFLL) & v408;
                  }
                  v410 = *(uint64_t ***)(*(_QWORD *)v402 + 8 * v409);
                  if (v410)
                  {
                    v411 = *v410;
                    if (v411)
                    {
                      v412 = *((_QWORD *)v405 + 4);
                      if (v404.u32[0] < 2uLL)
                      {
                        while (1)
                        {
                          v413 = v411[1];
                          if (v413 == v408)
                          {
                            if (*((_DWORD *)v411 + 8) == v406 && v411[2] == v412 && *((_DWORD *)v411 + 6) == v407)
                              goto LABEL_635;
                          }
                          else if ((v413 & (*(_QWORD *)&v403 - 1)) != v409)
                          {
                            goto LABEL_637;
                          }
                          v411 = (uint64_t *)*v411;
                          if (!v411)
                            goto LABEL_637;
                        }
                      }
                      do
                      {
                        v416 = v411[1];
                        if (v416 == v408)
                        {
                          if (*((_DWORD *)v411 + 8) == v406 && v411[2] == v412 && *((_DWORD *)v411 + 6) == v407)
                          {
LABEL_635:
                            if (v411[8] > (unint64_t)v400)
                              v400 = v411[8];
                            break;
                          }
                        }
                        else
                        {
                          if (v416 >= *(_QWORD *)&v403)
                            v416 %= *(_QWORD *)&v403;
                          if (v416 != v409)
                            break;
                        }
                        v411 = (uint64_t *)*v411;
                      }
                      while (v411);
                    }
                  }
                }
LABEL_637:
                v414 = (_QWORD *)*((_QWORD *)v405 + 1);
                if (v414)
                {
                  do
                  {
                    v415 = v414;
                    v414 = (_QWORD *)*v414;
                  }
                  while (v414);
                }
                else
                {
                  do
                  {
                    v415 = (_BYTE *)*((_QWORD *)v405 + 2);
                    _ZF = *(_QWORD *)v415 == (_QWORD)v405;
                    v405 = v415;
                  }
                  while (!_ZF);
                }
                v405 = v415;
              }
              while (v415 != &__p[8]);
              if (v400)
              {
                *(_QWORD *)object = operator new(16 * v400);
                *(_QWORD *)&object[8] = *(_QWORD *)object;
                *(_QWORD *)&object[16] = *(_QWORD *)object + 16 * v400;
                if (v398 == 1)
                {
                  do
                  {
                    v417 = sub_20E9DF85C(v402, v399 + 4);
                    if (v417)
                    {
                      v418 = (_QWORD *)v417[7];
                      while (v418)
                      {
                        v421 = v418[3];
                        v418 = (_QWORD *)*v418;
                        if (*(_BYTE *)(v421 + 192))
                        {
                          sub_20F45CC90(v914, (uint64_t)&v911, xmmword_2103B47F0, v421, **(_QWORD **)(v325 + 424), *(_QWORD *)(*(_QWORD *)(v325 + 424) + 8));
                          if (v914[1])
                            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v914[1]);
                        }
                      }
                    }
                    v419 = (_QWORD *)v399[1];
                    if (v419)
                    {
                      do
                      {
                        v420 = v419;
                        v419 = (_QWORD *)*v419;
                      }
                      while (v419);
                    }
                    else
                    {
                      do
                      {
                        v420 = (_BYTE *)v399[2];
                        _ZF = *(_QWORD *)v420 == (_QWORD)v399;
                        v399 = v420;
                      }
                      while (!_ZF);
                    }
                    v399 = v420;
                  }
                  while (v420 != &__p[8]);
                }
                else
                {
                  do
                  {
                    v422 = sub_20E9DF85C(v402, v399 + 4);
                    if (v422)
                    {
                      v423 = (_QWORD *)v422[7];
                      while (v423)
                      {
                        v426 = v423;
                        v427 = v423[3];
                        v429 = *(_QWORD *)(v427 + 24);
                        v428 = *(_QWORD *)(v427 + 32);
                        *(_QWORD *)&v915 = v429;
                        *((_QWORD *)&v915 + 1) = v428;
                        v423 = (_QWORD *)*v423;
                        if (*(_BYTE *)(v427 + 192))
                        {
                          v430 = *(char **)object;
                          if (*(_QWORD *)&object[8] != *(_QWORD *)object)
                          {
                            v431 = (uint64_t)(*(_QWORD *)&object[8] - *(_QWORD *)object) >> 4;
                            do
                            {
                              v432 = v431 >> 1;
                              v433 = &v430[16 * (v431 >> 1)];
                              if (*(_QWORD *)v433 < v429
                                || *(_QWORD *)v433 == v429 && *(_DWORD *)&v430[16 * v432 + 8] < v428)
                              {
                                v430 = v433 + 16;
                                v432 = v431 + ~v432;
                              }
                              v431 = v432;
                            }
                            while (v432);
                          }
                          if (v430 == *(char **)&object[8]
                            || *(_QWORD *)v430 != v429
                            || *((_DWORD *)v430 + 2) != (_DWORD)v428)
                          {
                            sub_20F0527A0((char **)object, v430, &v915);
                            sub_20F45CC90(v914, (uint64_t)&v911, xmmword_2103B47F0, v426[3], **(_QWORD **)(v325 + 424), *(_QWORD *)(*(_QWORD *)(v325 + 424) + 8));
                            if (v914[1])
                              std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v914[1]);
                          }
                        }
                      }
                    }
                    v424 = (_QWORD *)v399[1];
                    if (v424)
                    {
                      do
                      {
                        v425 = v424;
                        v424 = (_QWORD *)*v424;
                      }
                      while (v424);
                    }
                    else
                    {
                      do
                      {
                        v425 = (_BYTE *)v399[2];
                        _ZF = *(_QWORD *)v425 == (_QWORD)v399;
                        v399 = v425;
                      }
                      while (!_ZF);
                    }
                    v399 = v425;
                  }
                  while (v425 != &__p[8]);
                }
                if (*(_QWORD *)object)
                {
                  *(_QWORD *)&object[8] = *(_QWORD *)object;
                  operator delete(*(void **)object);
                }
                v398 = *(_QWORD *)&__p[16];
              }
            }
            if (v398)
            {
              v456 = *(_QWORD **)__p;
              if (*(_BYTE **)__p != &__p[8])
              {
                v457 = 0;
                v458 = *(int8x8_t **)(*(_QWORD *)(v325 + 424) + 8);
                v459 = v458 + 3;
                v460 = v458[4];
                v461 = (uint8x8_t)vcnt_s8(v460);
                v461.i16[0] = vaddlv_u8(v461);
                v462 = *(_BYTE **)__p;
                do
                {
                  if (v460)
                  {
                    v463 = *((_DWORD *)v462 + 12);
                    v464 = *((_DWORD *)v462 + 10);
                    v465 = v464 ^ __ROR4__(v463, 13);
                    if (v461.u32[0] > 1uLL)
                    {
                      v466 = v465;
                      if (*(_QWORD *)&v460 <= v465)
                        v466 = v465 % *(_QWORD *)&v460;
                    }
                    else
                    {
                      v466 = (*(_QWORD *)&v460 + 0xFFFFFFFFLL) & v465;
                    }
                    v467 = *(uint64_t ***)(*(_QWORD *)v459 + 8 * v466);
                    if (v467)
                    {
                      v468 = *v467;
                      if (v468)
                      {
                        v469 = *((_QWORD *)v462 + 4);
                        if (v461.u32[0] < 2uLL)
                        {
                          while (1)
                          {
                            v470 = v468[1];
                            if (v470 == v465)
                            {
                              if (*((_DWORD *)v468 + 8) == v463 && v468[2] == v469 && *((_DWORD *)v468 + 6) == v464)
                                goto LABEL_773;
                            }
                            else if ((v470 & (*(_QWORD *)&v460 - 1)) != v466)
                            {
                              goto LABEL_775;
                            }
                            v468 = (uint64_t *)*v468;
                            if (!v468)
                              goto LABEL_775;
                          }
                        }
                        do
                        {
                          v473 = v468[1];
                          if (v473 == v465)
                          {
                            if (*((_DWORD *)v468 + 8) == v463 && v468[2] == v469 && *((_DWORD *)v468 + 6) == v464)
                            {
LABEL_773:
                              if (v468[8] > (unint64_t)v457)
                                v457 = v468[8];
                              break;
                            }
                          }
                          else
                          {
                            if (v473 >= *(_QWORD *)&v460)
                              v473 %= *(_QWORD *)&v460;
                            if (v473 != v466)
                              break;
                          }
                          v468 = (uint64_t *)*v468;
                        }
                        while (v468);
                      }
                    }
                  }
LABEL_775:
                  v471 = (_QWORD *)*((_QWORD *)v462 + 1);
                  if (v471)
                  {
                    do
                    {
                      v472 = v471;
                      v471 = (_QWORD *)*v471;
                    }
                    while (v471);
                  }
                  else
                  {
                    do
                    {
                      v472 = (_BYTE *)*((_QWORD *)v462 + 2);
                      _ZF = *(_QWORD *)v472 == (_QWORD)v462;
                      v462 = v472;
                    }
                    while (!_ZF);
                  }
                  v462 = v472;
                }
                while (v472 != &__p[8]);
                if (v457)
                {
                  *(_QWORD *)object = operator new(16 * v457);
                  *(_QWORD *)&object[8] = *(_QWORD *)object;
                  *(_QWORD *)&object[16] = *(_QWORD *)object + 16 * v457;
                  if (v398 == 1)
                  {
                    do
                    {
                      v474 = sub_20E9DF85C(v459, v456 + 4);
                      if (v474)
                      {
                        v475 = (_QWORD *)v474[7];
                        while (v475)
                        {
                          v478 = v475[3];
                          v475 = (_QWORD *)*v475;
                          if (*(_BYTE *)(v478 + 192))
                            *(_BYTE *)(v478 + 190) = 0;
                        }
                      }
                      v476 = (_QWORD *)v456[1];
                      if (v476)
                      {
                        do
                        {
                          v477 = v476;
                          v476 = (_QWORD *)*v476;
                        }
                        while (v476);
                      }
                      else
                      {
                        do
                        {
                          v477 = (_BYTE *)v456[2];
                          _ZF = *(_QWORD *)v477 == (_QWORD)v456;
                          v456 = v477;
                        }
                        while (!_ZF);
                      }
                      v456 = v477;
                    }
                    while (v477 != &__p[8]);
                  }
                  else
                  {
                    do
                    {
                      v479 = sub_20E9DF85C(v459, v456 + 4);
                      if (v479)
                      {
                        v480 = (_QWORD *)v479[7];
                        while (v480)
                        {
                          v483 = v480;
                          v484 = v480[3];
                          v486 = *(void **)(v484 + 24);
                          v485 = *(void **)(v484 + 32);
                          v914[0] = v486;
                          v914[1] = v485;
                          v480 = (_QWORD *)*v480;
                          if (*(_BYTE *)(v484 + 192))
                          {
                            v487 = *(char **)object;
                            if (*(_QWORD *)&object[8] != *(_QWORD *)object)
                            {
                              v488 = (uint64_t)(*(_QWORD *)&object[8] - *(_QWORD *)object) >> 4;
                              do
                              {
                                v489 = v488 >> 1;
                                v490 = (void **)&v487[16 * (v488 >> 1)];
                                if (*v490 < v486
                                  || *v490 == v486 && *(_DWORD *)&v487[16 * v489 + 8] < v485)
                                {
                                  v487 = (char *)(v490 + 2);
                                  v489 = v488 + ~v489;
                                }
                                v488 = v489;
                              }
                              while (v489);
                            }
                            if (v487 == *(char **)&object[8]
                              || *(void **)v487 != v486
                              || *((_DWORD *)v487 + 2) != (_DWORD)v485)
                            {
                              sub_20F0527A0((char **)object, v487, v914);
                              v491 = v483[3];
                              if (*(_BYTE *)(v491 + 192))
                                v492 = v491 + 40;
                              else
                                v492 = 0;
                              *(_BYTE *)(v492 + 150) = 0;
                            }
                          }
                        }
                      }
                      v481 = (_QWORD *)v456[1];
                      if (v481)
                      {
                        do
                        {
                          v482 = v481;
                          v481 = (_QWORD *)*v481;
                        }
                        while (v481);
                      }
                      else
                      {
                        do
                        {
                          v482 = (_BYTE *)v456[2];
                          _ZF = *(_QWORD *)v482 == (_QWORD)v456;
                          v456 = v482;
                        }
                        while (!_ZF);
                      }
                      v456 = v482;
                    }
                    while (v482 != &__p[8]);
                  }
                  if (*(_QWORD *)object)
                  {
                    *(_QWORD *)&object[8] = *(_QWORD *)object;
                    operator delete(*(void **)object);
                  }
                }
              }
            }
          }
          goto LABEL_833;
        }
      }
      while (1)
      {
        v330 = *(_QWORD *)&__p[8];
        v331 = &__p[8];
        v332 = &__p[8];
        if (*(_QWORD *)&__p[8])
        {
          v333 = v326[4];
          v334 = *(_QWORD *)v326;
          v335 = v326[2];
          while (1)
          {
            while (1)
            {
              v331 = (_BYTE *)v330;
              v336 = *(_DWORD *)(v330 + 48);
              if (v333 == v336)
                break;
              if (v333 >= v336)
              {
                if (v336 >= v333)
                  goto LABEL_523;
                goto LABEL_492;
              }
LABEL_481:
              v330 = *(_QWORD *)v331;
              v332 = v331;
              if (!*(_QWORD *)v331)
                goto LABEL_494;
            }
            v337 = *((_QWORD *)v331 + 4);
            if (v334 < v337)
              goto LABEL_481;
            if (v334 != v337)
            {
              if (v337 >= v334)
                goto LABEL_523;
              goto LABEL_492;
            }
            v338 = *((_DWORD *)v331 + 10);
            if (v335 < v338)
              goto LABEL_481;
            if (v338 >= v335)
              goto LABEL_523;
LABEL_492:
            v330 = *((_QWORD *)v331 + 1);
            if (!v330)
            {
              v332 = v331 + 8;
              break;
            }
          }
        }
LABEL_494:
        v339 = operator new(0x38uLL);
        v340 = *(_OWORD *)v326;
        v339[6] = *((_QWORD *)v326 + 2);
        *((_OWORD *)v339 + 2) = v340;
        *v339 = 0;
        v339[1] = 0;
        v339[2] = v331;
        *v332 = v339;
        if (**(_QWORD **)__p)
        {
          *(_QWORD *)__p = **(_QWORD **)__p;
          v339 = (_QWORD *)*v332;
        }
        v341 = *(_BYTE **)&__p[8];
        _ZF = v339 == *(_QWORD **)&__p[8];
        *((_BYTE *)v339 + 24) = v339 == *(_QWORD **)&__p[8];
        if (!_ZF)
        {
          do
          {
            v342 = v339[2];
            if (*(_BYTE *)(v342 + 24))
              break;
            v343 = *(_BYTE **)(v342 + 16);
            v344 = *(_QWORD *)v343;
            if (*(_QWORD *)v343 == v342)
            {
              v347 = *((_QWORD *)v343 + 1);
              if (!v347 || (v348 = *(unsigned __int8 *)(v347 + 24), v345 = (_BYTE *)(v347 + 24), v348))
              {
                if (*(_QWORD **)v342 == v339)
                {
                  *(_BYTE *)(v342 + 24) = 1;
                  v343[24] = 0;
                  v351 = *(_QWORD *)(v342 + 8);
                  *(_QWORD *)v343 = v351;
                  if (v351)
                    goto LABEL_511;
                }
                else
                {
                  v349 = *(uint64_t **)(v342 + 8);
                  v350 = *v349;
                  *(_QWORD *)(v342 + 8) = *v349;
                  if (v350)
                  {
                    *(_QWORD *)(v350 + 16) = v342;
                    v343 = *(_BYTE **)(v342 + 16);
                  }
                  v349[2] = (uint64_t)v343;
                  *(_QWORD *)(*(_QWORD *)(v342 + 16) + 8 * (**(_QWORD **)(v342 + 16) != v342)) = v349;
                  *v349 = v342;
                  *(_QWORD *)(v342 + 16) = v349;
                  v343 = (_BYTE *)v349[2];
                  v342 = *(_QWORD *)v343;
                  *((_BYTE *)v349 + 24) = 1;
                  v343[24] = 0;
                  v351 = *(_QWORD *)(v342 + 8);
                  *(_QWORD *)v343 = v351;
                  if (v351)
LABEL_511:
                    *(_QWORD *)(v351 + 16) = v343;
                }
                *(_QWORD *)(v342 + 16) = *((_QWORD *)v343 + 2);
                *(_QWORD *)(*((_QWORD *)v343 + 2) + 8 * (**((_QWORD **)v343 + 2) != (_QWORD)v343)) = v342;
                *(_QWORD *)(v342 + 8) = v343;
LABEL_521:
                *((_QWORD *)v343 + 2) = v342;
                break;
              }
            }
            else if (!v344 || (v346 = *(unsigned __int8 *)(v344 + 24), v345 = (_BYTE *)(v344 + 24), v346))
            {
              if (*(_QWORD **)v342 == v339)
              {
                v352 = v339[1];
                *(_QWORD *)v342 = v352;
                if (v352)
                {
                  *(_QWORD *)(v352 + 16) = v342;
                  v343 = *(_BYTE **)(v342 + 16);
                }
                v339[2] = v343;
                *(_QWORD *)(*(_QWORD *)(v342 + 16) + 8 * (**(_QWORD **)(v342 + 16) != v342)) = v339;
                v339[1] = v342;
                *(_QWORD *)(v342 + 16) = v339;
                v343 = (_BYTE *)v339[2];
              }
              else
              {
                v339 = (_QWORD *)v339[2];
              }
              *((_BYTE *)v339 + 24) = 1;
              v343[24] = 0;
              v342 = *((_QWORD *)v343 + 1);
              v353 = *(_QWORD **)v342;
              *((_QWORD *)v343 + 1) = *(_QWORD *)v342;
              if (v353)
                v353[2] = v343;
              *(_QWORD *)(v342 + 16) = *((_QWORD *)v343 + 2);
              *(_QWORD *)(*((_QWORD *)v343 + 2) + 8 * (**((_QWORD **)v343 + 2) != (_QWORD)v343)) = v342;
              *(_QWORD *)v342 = v343;
              goto LABEL_521;
            }
            *(_BYTE *)(v342 + 24) = 1;
            v339 = v343;
            v343[24] = v343 == v341;
            *v345 = 1;
          }
          while (v343 != v341);
        }
        ++*(_QWORD *)&__p[16];
LABEL_523:
        v354 = *(_QWORD *)(v325 + 424);
        v356 = *(char **)(v354 + 40);
        v355 = *(char **)(v354 + 48);
        if (v355 != v356)
        {
          v357 = (v355 - v356) >> 4;
          v358 = v326[4];
          v359 = *(_QWORD *)v326;
          while (1)
          {
            v360 = v357 >> 1;
            v361 = &v356[16 * (v357 >> 1)];
            v362 = *(_QWORD *)v361;
            v363 = *(_DWORD *)(*(_QWORD *)v361 + 16);
            v364 = v363 >= v358;
            if (v363 != v358)
              goto LABEL_531;
            if (*(_QWORD *)v362 >= v359)
              break;
LABEL_525:
            v356 = v361 + 16;
            v360 = v357 + ~v360;
LABEL_526:
            v357 = v360;
            if (!v360)
              goto LABEL_534;
          }
          if (*(_QWORD *)v362 != v359)
            goto LABEL_526;
          v364 = *(_DWORD *)(v362 + 8) >= v326[2];
LABEL_531:
          if (v364)
            goto LABEL_526;
          goto LABEL_525;
        }
LABEL_534:
        if (v356 == v355)
          break;
        v365 = *(_QWORD *)v356;
        v366 = v355;
        if (*(_DWORD *)(*(_QWORD *)v356 + 16) == v326[4])
        {
          v366 = v355;
          if (*(_QWORD *)v365 == *(_QWORD *)v326)
          {
            if (*(_DWORD *)(v365 + 8) == v326[2])
              v366 = v356;
            else
              v366 = v355;
          }
        }
        if (v355 == v366)
          goto LABEL_543;
LABEL_551:
        v371 = *(_OWORD *)v326;
        *(_QWORD *)&object[16] = *((_QWORD *)v326 + 2);
        *(_OWORD *)object = v371;
        v372 = *(_QWORD *)v366;
        *(_QWORD *)&object[24] = *(_QWORD *)v366;
        v373 = (std::__shared_weak_count *)*((_QWORD *)v366 + 1);
        *(_QWORD *)&object[32] = v373;
        if (v373)
        {
          v374 = (unint64_t *)&v373->__shared_owners_;
          do
            v375 = __ldxr(v374);
          while (__stxr(v375 + 1, v374));
        }
        v376 = (char *)*((_QWORD *)&v911 + 1);
        v377 = (char *)&v911 + 8;
        v378 = (_QWORD *)&v911 + 1;
        if (!*((_QWORD *)&v911 + 1))
          goto LABEL_569;
        do
        {
          while (1)
          {
            v377 = v376;
            v379 = *((_DWORD *)v376 + 12);
            if (*(_DWORD *)&object[16] != v379)
              break;
            v380 = *((_QWORD *)v377 + 4);
            if (*(_QWORD *)object < v380)
              goto LABEL_556;
            if (*(_QWORD *)object != v380)
            {
              if (v380 >= *(_QWORD *)object)
                goto LABEL_598;
              goto LABEL_567;
            }
            v381 = *((_DWORD *)v377 + 10);
            if (*(_DWORD *)&object[8] >= v381)
            {
              if (v381 >= *(_DWORD *)&object[8])
                goto LABEL_598;
              goto LABEL_567;
            }
LABEL_556:
            v376 = *(char **)v377;
            v378 = v377;
            if (!*(_QWORD *)v377)
              goto LABEL_569;
          }
          if (*(_DWORD *)&object[16] < v379)
            goto LABEL_556;
          if (v379 >= *(_DWORD *)&object[16])
            goto LABEL_598;
LABEL_567:
          v376 = (char *)*((_QWORD *)v377 + 1);
        }
        while (v376);
        v378 = v377 + 8;
LABEL_569:
        v382 = operator new(0x48uLL);
        v382[2] = *(_OWORD *)object;
        *((_QWORD *)v382 + 6) = *(_QWORD *)&object[16];
        *((_QWORD *)v382 + 7) = v372;
        *((_QWORD *)v382 + 8) = v373;
        *(_QWORD *)&object[24] = 0;
        *(_QWORD *)&object[32] = 0;
        *(_QWORD *)v382 = 0;
        *((_QWORD *)v382 + 1) = 0;
        *((_QWORD *)v382 + 2) = v377;
        *v378 = v382;
        if (*(_QWORD *)v911)
        {
          *(_QWORD *)&v911 = *(_QWORD *)v911;
          v382 = (_OWORD *)*v378;
        }
        v383 = (_BYTE *)*((_QWORD *)&v911 + 1);
        _ZF = v382 == *((_OWORD **)&v911 + 1);
        *((_BYTE *)v382 + 24) = v382 == *((_OWORD **)&v911 + 1);
        if (!_ZF)
        {
          do
          {
            v384 = *((_QWORD *)v382 + 2);
            if (*(_BYTE *)(v384 + 24))
              break;
            v385 = *(_BYTE **)(v384 + 16);
            v386 = *(_QWORD *)v385;
            if (*(_QWORD *)v385 == v384)
            {
              v389 = *((_QWORD *)v385 + 1);
              if (!v389 || (v390 = *(unsigned __int8 *)(v389 + 24), v387 = (_BYTE *)(v389 + 24), v390))
              {
                if (*(_OWORD **)v384 == v382)
                {
                  *(_BYTE *)(v384 + 24) = 1;
                  v385[24] = 0;
                  v393 = *(_QWORD *)(v384 + 8);
                  *(_QWORD *)v385 = v393;
                  if (v393)
                    goto LABEL_586;
                }
                else
                {
                  v391 = *(uint64_t **)(v384 + 8);
                  v392 = *v391;
                  *(_QWORD *)(v384 + 8) = *v391;
                  if (v392)
                  {
                    *(_QWORD *)(v392 + 16) = v384;
                    v385 = *(_BYTE **)(v384 + 16);
                  }
                  v391[2] = (uint64_t)v385;
                  *(_QWORD *)(*(_QWORD *)(v384 + 16) + 8 * (**(_QWORD **)(v384 + 16) != v384)) = v391;
                  *v391 = v384;
                  *(_QWORD *)(v384 + 16) = v391;
                  v385 = (_BYTE *)v391[2];
                  v384 = *(_QWORD *)v385;
                  *((_BYTE *)v391 + 24) = 1;
                  v385[24] = 0;
                  v393 = *(_QWORD *)(v384 + 8);
                  *(_QWORD *)v385 = v393;
                  if (v393)
LABEL_586:
                    *(_QWORD *)(v393 + 16) = v385;
                }
                *(_QWORD *)(v384 + 16) = *((_QWORD *)v385 + 2);
                *(_QWORD *)(*((_QWORD *)v385 + 2) + 8 * (**((_QWORD **)v385 + 2) != (_QWORD)v385)) = v384;
                *(_QWORD *)(v384 + 8) = v385;
LABEL_596:
                *((_QWORD *)v385 + 2) = v384;
                break;
              }
            }
            else if (!v386 || (v388 = *(unsigned __int8 *)(v386 + 24), v387 = (_BYTE *)(v386 + 24), v388))
            {
              if (*(_OWORD **)v384 == v382)
              {
                v394 = *((_QWORD *)v382 + 1);
                *(_QWORD *)v384 = v394;
                if (v394)
                {
                  *(_QWORD *)(v394 + 16) = v384;
                  v385 = *(_BYTE **)(v384 + 16);
                }
                *((_QWORD *)v382 + 2) = v385;
                *(_QWORD *)(*(_QWORD *)(v384 + 16) + 8 * (**(_QWORD **)(v384 + 16) != v384)) = v382;
                *((_QWORD *)v382 + 1) = v384;
                *(_QWORD *)(v384 + 16) = v382;
                v385 = (_BYTE *)*((_QWORD *)v382 + 2);
              }
              else
              {
                v382 = (_OWORD *)*((_QWORD *)v382 + 2);
              }
              *((_BYTE *)v382 + 24) = 1;
              v385[24] = 0;
              v384 = *((_QWORD *)v385 + 1);
              v395 = *(_OWORD **)v384;
              *((_QWORD *)v385 + 1) = *(_QWORD *)v384;
              if (v395)
                *((_QWORD *)v395 + 2) = v385;
              *(_QWORD *)(v384 + 16) = *((_QWORD *)v385 + 2);
              *(_QWORD *)(*((_QWORD *)v385 + 2) + 8 * (**((_QWORD **)v385 + 2) != (_QWORD)v385)) = v384;
              *(_QWORD *)v384 = v385;
              goto LABEL_596;
            }
            *(_BYTE *)(v384 + 24) = 1;
            v382 = v385;
            v385[24] = v385 == v383;
            *v387 = 1;
          }
          while (v385 != v383);
        }
        ++v912;
        v373 = *(std::__shared_weak_count **)&object[32];
LABEL_598:
        if (v373)
        {
          v396 = (unint64_t *)&v373->__shared_owners_;
          do
            v397 = __ldaxr(v396);
          while (__stlxr(v397 - 1, v396));
          if (!v397)
          {
            ((void (*)(std::__shared_weak_count *))v373->__on_zero_shared)(v373);
            std::__shared_weak_count::__release_weak(v373);
          }
        }
        v326 += 6;
        if (v326 == v327)
        {
          v326 = v914[0];
          if (!v914[0])
            goto LABEL_475;
LABEL_474:
          v914[1] = v326;
          operator delete(v326);
          goto LABEL_475;
        }
      }
      v366 = v355;
LABEL_543:
      sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingTypes/src/MapDataUtil.cpp", 416, (uint64_t)"vio_frame_iter != dst_map_data.viodatabase()->end()", 51, (uint64_t)"Failed to find vio frame in self map", 36, (void (*)(void **))sub_21023DDB0);
      v367 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
      if ((v367 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
      {
        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DE78);
      }
      if (!byte_254A6DE68 || byte_254A6DE70)
      {
        v368 = qword_254A6DE40;
        for (ii = qword_254A6DE48; v368 != ii; v368 += 16)
          (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v368)(*(_QWORD *)(v368 + 8), "vio_frame_iter != dst_map_data.viodatabase()->end()", 51, "Failed to find vio frame in self map", 36);
      }
      v370 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
      if ((v370 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
      {
        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DE78);
      }
      if (!byte_254A6DE68)
        abort();
      qword_254A6DE58(unk_254A6DE60, "vio_frame_iter != dst_map_data.viodatabase()->end()", 51, "Failed to find vio frame in self map", 36);
      goto LABEL_551;
    }
LABEL_833:
    sub_20F45CC10(*((_QWORD **)&v911 + 1));
    sub_20E86872C((uint64_t)__p, *(_QWORD **)&__p[8]);
    v493 = *a1;
    v494 = *v902;
    sub_20FCC90D0(*a1, *(_QWORD *)(*a1)[53], (uint64_t)&v905, (uint64_t *)__p);
    v495 = *(_QWORD *)__p;
    for (jj = *(_QWORD *)&__p[8]; v495 != jj; v495 += 24)
    {
      v497 = sub_20EB07858(v493, v495);
      if (!v497)
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingTypes/src/MapDataUtil.cpp", 228, (uint64_t)"object_iter != src_map_data.object_anchor_set_.ObjectAnchors().end()", 68, (uint64_t)"Failed to find object anchor", 28, (void (*)(void **))sub_21023DDB0);
        v498 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v498 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v499 = qword_254A6DE40;
          for (kk = qword_254A6DE48; v499 != kk; v499 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v499)(*(_QWORD *)(v499 + 8), "object_iter != src_map_data.object_anchor_set_.ObjectAnchors().end()", 68, "Failed to find object anchor", 28);
        }
        v501 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v501 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          abort();
        qword_254A6DE58(unk_254A6DE60, "object_iter != src_map_data.object_anchor_set_.ObjectAnchors().end()", 68, "Failed to find object anchor", 28);
      }
      sub_20FCC6708((_QWORD *)v494, (uint64_t)(v497 + 2), **(_QWORD **)(v494 + 424), v497 + 5, (float64x2_t *)v497 + 4, (__int128 *)(v497 + 41));
      sub_20FCC8710(v493, v495);
    }
    v502 = (__int128 *)v905;
    v503 = (int8x8_t **)a1;
    if (v905 == &v906)
      goto LABEL_995;
    while (2)
    {
      sub_20F23A0A0(**(_QWORD ***)&(*v503)[53], v502 + 2, (char **)object);
      v504 = *(_DWORD **)object;
      v505 = *(_DWORD **)&object[8];
      if (*(_QWORD *)object == *(_QWORD *)&object[8])
      {
        if (!*(_QWORD *)object)
          goto LABEL_855;
        goto LABEL_854;
      }
      while (2)
      {
        v508 = *v503;
        v509 = (uint64_t)(*v503)[30];
        if (!v509)
          goto LABEL_929;
        v510 = v504[4];
        v511 = *(_QWORD *)v504;
        v512 = (uint64_t)&(*v503)[30];
        v513 = v504[2];
        do
        {
          while (1)
          {
            v514 = *(_DWORD *)(v509 + 48);
            v515 = v514 >= v510;
            if (v514 != v510)
              goto LABEL_873;
            v516 = *(_QWORD *)(v509 + 32);
            if (v516 >= v511)
              break;
LABEL_868:
            v509 = *(_QWORD *)(v509 + 8);
            if (!v509)
              goto LABEL_876;
          }
          if (v516 != v511)
            goto LABEL_875;
          v515 = *(_DWORD *)(v509 + 40) >= v513;
LABEL_873:
          if (!v515)
            goto LABEL_868;
LABEL_875:
          v512 = v509;
          v509 = *(_QWORD *)v509;
        }
        while (v509);
LABEL_876:
        if ((int8x8_t *)v512 != &(*v503)[30])
        {
          v517 = *(_DWORD *)(v512 + 48);
          v518 = v510 >= v517;
          if (v510 != v517)
            goto LABEL_881;
          v519 = *(_QWORD *)(v512 + 32);
          if (v511 >= v519)
          {
            if (v511 != v519)
              goto LABEL_883;
            v518 = v513 >= *(_DWORD *)(v512 + 40);
LABEL_881:
            if (v518)
            {
LABEL_883:
              v520 = *v902;
              v522 = (uint64_t **)(*v902 + 240);
              v521 = *v522;
              v523 = v522;
              v524 = v522;
              if (!*v522)
              {
LABEL_898:
                v528 = operator new(0x238uLL);
                v529 = *(_OWORD *)v504;
                v528[6] = *((_QWORD *)v504 + 2);
                *((_OWORD *)v528 + 2) = v529;
                *v528 = 0;
                v528[1] = 0;
                v528[2] = v524;
                *v523 = v528;
                v530 = **(_QWORD **)(v520 + 232);
                v531 = v528;
                if (v530)
                {
                  *(_QWORD *)(v520 + 232) = v530;
                  v531 = *v523;
                }
                v532 = *v522;
                _ZF = v531 == *v522;
                *((_BYTE *)v531 + 24) = _ZF;
                v503 = (int8x8_t **)a1;
                if (!_ZF)
                {
                  do
                  {
                    v533 = v531[2];
                    if (*(_BYTE *)(v533 + 24))
                      break;
                    v534 = *(uint64_t **)(v533 + 16);
                    v535 = *v534;
                    if (*v534 == v533)
                    {
                      v538 = v534[1];
                      if (!v538 || (v539 = *(unsigned __int8 *)(v538 + 24), v536 = (_BYTE *)(v538 + 24), v539))
                      {
                        if (*(uint64_t **)v533 == v531)
                        {
                          *(_BYTE *)(v533 + 24) = 1;
                          *((_BYTE *)v534 + 24) = 0;
                          v542 = *(_QWORD *)(v533 + 8);
                          *v534 = v542;
                          if (v542)
                            goto LABEL_915;
                        }
                        else
                        {
                          v540 = *(uint64_t **)(v533 + 8);
                          v541 = *v540;
                          *(_QWORD *)(v533 + 8) = *v540;
                          if (v541)
                          {
                            *(_QWORD *)(v541 + 16) = v533;
                            v534 = *(uint64_t **)(v533 + 16);
                          }
                          v540[2] = (uint64_t)v534;
                          *(_QWORD *)(*(_QWORD *)(v533 + 16) + 8 * (**(_QWORD **)(v533 + 16) != v533)) = v540;
                          *v540 = v533;
                          *(_QWORD *)(v533 + 16) = v540;
                          v534 = (uint64_t *)v540[2];
                          v533 = *v534;
                          *((_BYTE *)v540 + 24) = 1;
                          *((_BYTE *)v534 + 24) = 0;
                          v542 = *(_QWORD *)(v533 + 8);
                          *v534 = v542;
                          if (v542)
LABEL_915:
                            *(_QWORD *)(v542 + 16) = v534;
                        }
                        *(_QWORD *)(v533 + 16) = v534[2];
                        *(_QWORD *)(v534[2] + 8 * (*(_QWORD *)v534[2] != (_QWORD)v534)) = v533;
                        *(_QWORD *)(v533 + 8) = v534;
LABEL_926:
                        v534[2] = v533;
                        break;
                      }
                    }
                    else if (!v535 || (v537 = *(unsigned __int8 *)(v535 + 24), v536 = (_BYTE *)(v535 + 24), v537))
                    {
                      if (*(uint64_t **)v533 == v531)
                      {
                        v543 = v531[1];
                        *(_QWORD *)v533 = v543;
                        if (v543)
                        {
                          *(_QWORD *)(v543 + 16) = v533;
                          v534 = *(uint64_t **)(v533 + 16);
                        }
                        v531[2] = (uint64_t)v534;
                        *(_QWORD *)(*(_QWORD *)(v533 + 16) + 8 * (**(_QWORD **)(v533 + 16) != v533)) = v531;
                        v531[1] = v533;
                        *(_QWORD *)(v533 + 16) = v531;
                        v534 = (uint64_t *)v531[2];
                      }
                      else
                      {
                        v531 = (uint64_t *)v531[2];
                      }
                      *((_BYTE *)v531 + 24) = 1;
                      *((_BYTE *)v534 + 24) = 0;
                      v533 = v534[1];
                      v544 = *(uint64_t **)v533;
                      v534[1] = *(_QWORD *)v533;
                      if (v544)
                        v544[2] = (uint64_t)v534;
                      *(_QWORD *)(v533 + 16) = v534[2];
                      *(_QWORD *)(v534[2] + 8 * (*(_QWORD *)v534[2] != (_QWORD)v534)) = v533;
                      *(_QWORD *)v533 = v534;
                      goto LABEL_926;
                    }
                    *(_BYTE *)(v533 + 24) = 1;
                    v531 = v534;
                    *((_BYTE *)v534 + 24) = v534 == v532;
                    *v536 = 1;
                  }
                  while (v534 != v532);
                }
                ++*(_QWORD *)(v520 + 248);
LABEL_928:
                memcpy(v528 + 7, (const void *)(v512 + 56), 0x200uLL);
                v508 = *v503;
                goto LABEL_929;
              }
              while (1)
              {
                while (1)
                {
                  v524 = v521;
                  v525 = *((_DWORD *)v521 + 12);
                  if (v510 == v525)
                    break;
                  if (v510 < v525)
                    goto LABEL_885;
                  if (v525 >= v510)
                    goto LABEL_917;
LABEL_896:
                  v521 = (uint64_t *)v524[1];
                  if (!v521)
                  {
                    v523 = (uint64_t **)(v524 + 1);
                    goto LABEL_898;
                  }
                }
                v526 = v524[4];
                if (v511 < v526)
                  goto LABEL_885;
                if (v511 != v526)
                {
                  if (v526 >= v511)
                  {
LABEL_917:
                    v528 = v524;
                    v503 = (int8x8_t **)a1;
                    goto LABEL_928;
                  }
                  goto LABEL_896;
                }
                v527 = *((_DWORD *)v524 + 10);
                if (v513 >= v527)
                {
                  if (v527 >= v513)
                    goto LABEL_917;
                  goto LABEL_896;
                }
LABEL_885:
                v521 = (uint64_t *)*v524;
                v523 = (uint64_t **)v524;
                if (!*v524)
                  goto LABEL_898;
              }
            }
          }
        }
LABEL_929:
        v545 = (int8x8_t *)v508[38];
        if (!v545)
          goto LABEL_865;
        v546 = v508 + 38;
        v547 = v504[4];
        v548 = *(_QWORD *)v504;
        v549 = v504[2];
        v550 = v546;
        while (2)
        {
          while (2)
          {
            v551 = v545[6].u32[0];
            v552 = v551 >= v547;
            if (v551 == v547)
            {
              v553 = (unint64_t)v545[4];
              if (v553 >= v548)
              {
                if (v553 != v548)
                  goto LABEL_938;
                v552 = v545[5].i32[0] >= v549;
                break;
              }
LABEL_931:
              v545 = (int8x8_t *)v545[1];
              if (!v545)
                goto LABEL_939;
              continue;
            }
            break;
          }
          if (!v552)
            goto LABEL_931;
LABEL_938:
          v550 = v545;
          v545 = (int8x8_t *)*v545;
          if (v545)
            continue;
          break;
        }
LABEL_939:
        if (v550 != v546)
        {
          v554 = v550[6].u32[0];
          v555 = v547 >= v554;
          if (v547 != v554)
            goto LABEL_944;
          v556 = (unint64_t)v550[4];
          if (v548 >= v556)
          {
            if (v548 != v556)
              goto LABEL_946;
            v555 = v549 >= v550[5].i32[0];
LABEL_944:
            if (v555)
            {
LABEL_946:
              v557 = *v902;
              v558 = (uint64_t **)(*v902 + 304);
              v559 = *v558;
              v560 = v558;
              v561 = v558;
              if (!*v558)
              {
LABEL_961:
                v565 = operator new(0x238uLL);
                v566 = *(_OWORD *)v504;
                v565[6] = *((_QWORD *)v504 + 2);
                *((_OWORD *)v565 + 2) = v566;
                *v565 = 0;
                v565[1] = 0;
                v565[2] = v561;
                *v560 = v565;
                v567 = **(_QWORD **)(v557 + 296);
                v568 = v565;
                if (v567)
                {
                  *(_QWORD *)(v557 + 296) = v567;
                  v568 = *v560;
                }
                v569 = *v558;
                _ZF = v568 == *v558;
                *((_BYTE *)v568 + 24) = _ZF;
                v503 = (int8x8_t **)a1;
                if (!_ZF)
                {
                  do
                  {
                    v570 = v568[2];
                    if (*(_BYTE *)(v570 + 24))
                      break;
                    v571 = *(uint64_t **)(v570 + 16);
                    v572 = *v571;
                    if (*v571 == v570)
                    {
                      v575 = v571[1];
                      if (!v575 || (v576 = *(unsigned __int8 *)(v575 + 24), v573 = (_BYTE *)(v575 + 24), v576))
                      {
                        if (*(uint64_t **)v570 == v568)
                        {
                          *(_BYTE *)(v570 + 24) = 1;
                          *((_BYTE *)v571 + 24) = 0;
                          v579 = *(_QWORD *)(v570 + 8);
                          *v571 = v579;
                          if (v579)
                            goto LABEL_978;
                        }
                        else
                        {
                          v577 = *(uint64_t **)(v570 + 8);
                          v578 = *v577;
                          *(_QWORD *)(v570 + 8) = *v577;
                          if (v578)
                          {
                            *(_QWORD *)(v578 + 16) = v570;
                            v571 = *(uint64_t **)(v570 + 16);
                          }
                          v577[2] = (uint64_t)v571;
                          *(_QWORD *)(*(_QWORD *)(v570 + 16) + 8 * (**(_QWORD **)(v570 + 16) != v570)) = v577;
                          *v577 = v570;
                          *(_QWORD *)(v570 + 16) = v577;
                          v571 = (uint64_t *)v577[2];
                          v570 = *v571;
                          *((_BYTE *)v577 + 24) = 1;
                          *((_BYTE *)v571 + 24) = 0;
                          v579 = *(_QWORD *)(v570 + 8);
                          *v571 = v579;
                          if (v579)
LABEL_978:
                            *(_QWORD *)(v579 + 16) = v571;
                        }
                        *(_QWORD *)(v570 + 16) = v571[2];
                        *(_QWORD *)(v571[2] + 8 * (*(_QWORD *)v571[2] != (_QWORD)v571)) = v570;
                        *(_QWORD *)(v570 + 8) = v571;
LABEL_862:
                        v571[2] = v570;
                        break;
                      }
                    }
                    else if (!v572 || (v574 = *(unsigned __int8 *)(v572 + 24), v573 = (_BYTE *)(v572 + 24), v574))
                    {
                      if (*(uint64_t **)v570 == v568)
                      {
                        v580 = v568[1];
                        *(_QWORD *)v570 = v580;
                        if (v580)
                        {
                          *(_QWORD *)(v580 + 16) = v570;
                          v571 = *(uint64_t **)(v570 + 16);
                        }
                        v568[2] = (uint64_t)v571;
                        *(_QWORD *)(*(_QWORD *)(v570 + 16) + 8 * (**(_QWORD **)(v570 + 16) != v570)) = v568;
                        v568[1] = v570;
                        *(_QWORD *)(v570 + 16) = v568;
                        v571 = (uint64_t *)v568[2];
                      }
                      else
                      {
                        v568 = (uint64_t *)v568[2];
                      }
                      *((_BYTE *)v568 + 24) = 1;
                      *((_BYTE *)v571 + 24) = 0;
                      v570 = v571[1];
                      v581 = *(uint64_t **)v570;
                      v571[1] = *(_QWORD *)v570;
                      if (v581)
                        v581[2] = (uint64_t)v571;
                      *(_QWORD *)(v570 + 16) = v571[2];
                      *(_QWORD *)(v571[2] + 8 * (*(_QWORD *)v571[2] != (_QWORD)v571)) = v570;
                      *(_QWORD *)v570 = v571;
                      goto LABEL_862;
                    }
                    *(_BYTE *)(v570 + 24) = 1;
                    v568 = v571;
                    *((_BYTE *)v571 + 24) = v571 == v569;
                    *v573 = 1;
                  }
                  while (v571 != v569);
                }
                ++*(_QWORD *)(v557 + 312);
LABEL_864:
                memcpy(v565 + 7, &v550[7], 0x200uLL);
                goto LABEL_865;
              }
              while (1)
              {
                v561 = v559;
                v562 = *((_DWORD *)v559 + 12);
                if (v547 == v562)
                {
                  v563 = v561[4];
                  if (v548 < v563)
                    goto LABEL_948;
                  if (v548 == v563)
                  {
                    v564 = *((_DWORD *)v561 + 10);
                    if (v549 < v564)
                      goto LABEL_948;
                    if (v564 >= v549)
                      goto LABEL_980;
                  }
                  else if (v563 >= v548)
                  {
LABEL_980:
                    v565 = v561;
                    v503 = (int8x8_t **)a1;
                    goto LABEL_864;
                  }
                }
                else
                {
                  if (v547 < v562)
                  {
LABEL_948:
                    v559 = (uint64_t *)*v561;
                    v560 = (uint64_t **)v561;
                    if (!*v561)
                      goto LABEL_961;
                    continue;
                  }
                  if (v562 >= v547)
                    goto LABEL_980;
                }
                v559 = (uint64_t *)v561[1];
                if (!v559)
                {
                  v560 = (uint64_t **)(v561 + 1);
                  goto LABEL_961;
                }
              }
            }
          }
        }
LABEL_865:
        v504 += 6;
        if (v504 != v505)
          continue;
        break;
      }
      v504 = *(_DWORD **)object;
      if (*(_QWORD *)object)
      {
LABEL_854:
        *(_QWORD *)&object[8] = v504;
        operator delete(v504);
      }
LABEL_855:
      v506 = (__int128 *)*((_QWORD *)v502 + 1);
      if (v506)
      {
        do
        {
          v507 = v506;
          v506 = *(__int128 **)v506;
        }
        while (v506);
      }
      else
      {
        do
        {
          v507 = (__int128 *)*((_QWORD *)v502 + 2);
          _ZF = *(_QWORD *)v507 == (_QWORD)v502;
          v502 = v507;
        }
        while (!_ZF);
      }
      v502 = v507;
      if (v507 != (__int128 *)&v906)
        continue;
      break;
    }
    v582 = v905;
    if (v905 != &v906)
    {
LABEL_1002:
      v585 = (*v503)[22];
      if (v585)
      {
        v586 = *((unsigned int *)v582 + 10);
        v587 = (uint8x8_t)vcnt_s8(v585);
        v587.i16[0] = vaddlv_u8(v587);
        if (v587.u32[0] > 1uLL)
        {
          v588 = *((unsigned int *)v582 + 10);
          if (*(_QWORD *)&v585 <= v586)
            v588 = v586 % *(_QWORD *)&v585;
        }
        else
        {
          v588 = (v585.i32[0] - 1) & v586;
        }
        v589 = *(uint64_t **)(*(_QWORD *)&(*v503)[21] + 8 * v588);
        if (v589)
        {
          v589 = (uint64_t *)*v589;
          if (v589)
          {
            v590 = v582[4];
            if (v587.u32[0] < 2uLL)
            {
              v591 = *(_QWORD *)&v585 - 1;
              while (1)
              {
                v595 = v589[1];
                if (v595 == v586)
                {
                  if ((_QWORD *)v589[2] == v590 && *((_DWORD *)v589 + 6) == (_DWORD)v586)
                    goto LABEL_1029;
                }
                else if ((v595 & v591) != v588)
                {
                  goto LABEL_1028;
                }
                v589 = (uint64_t *)*v589;
                if (!v589)
                  goto LABEL_1029;
              }
            }
            do
            {
              v593 = v589[1];
              if (v593 == v586)
              {
                _ZF = (_QWORD *)v589[2] == v590 && *((_DWORD *)v589 + 6) == (_DWORD)v586;
                if (_ZF)
                  break;
              }
              else
              {
                if (v593 >= *(_QWORD *)&v585)
                  v593 %= *(_QWORD *)&v585;
                if (v593 != v588)
                  goto LABEL_1028;
              }
              v589 = (uint64_t *)*v589;
            }
            while (v589);
          }
        }
      }
      else
      {
LABEL_1028:
        v589 = 0;
      }
LABEL_1029:
      v596 = v589 + 6;
      v597 = v589 + 12;
LABEL_1031:
      v598 = *v596;
      v599 = v596[1];
      if (*v596 == v599 || !*(_QWORD *)(*v902 + 176))
        goto LABEL_1030;
LABEL_1035:
      v600 = *(int8x8_t *)(*v902 + 176);
      if (!*(_QWORD *)&v600)
        goto LABEL_1034;
      v601 = *((unsigned int *)v582 + 10);
      v602 = (uint8x8_t)vcnt_s8(v600);
      v602.i16[0] = vaddlv_u8(v602);
      if (v602.u32[0] > 1uLL)
      {
        v603 = *((unsigned int *)v582 + 10);
        if (*(_QWORD *)&v600 <= v601)
          v603 = v601 % *(_QWORD *)&v600;
      }
      else
      {
        v603 = (v600.i32[0] - 1) & v601;
      }
      v604 = *(_QWORD *)(*v902 + 168);
      v605 = *(uint64_t ***)(v604 + 8 * v603);
      if (!v605)
        goto LABEL_1034;
      v606 = *v605;
      if (!*v605)
        goto LABEL_1034;
      v607 = *(_QWORD *)&v600 - 1;
      v608 = v582[4];
      if (v602.u32[0] < 2uLL)
      {
        while (1)
        {
          v610 = v606[1];
          if (v610 == v601)
          {
            if ((_QWORD *)v606[2] == v608 && *((_DWORD *)v606 + 6) == (_DWORD)v601)
              goto LABEL_1062;
          }
          else if ((v610 & v607) != v603)
          {
            goto LABEL_1034;
          }
          v606 = (uint64_t *)*v606;
          if (!v606)
            goto LABEL_1034;
        }
      }
      while (1)
      {
        v612 = v606[1];
        if (v612 == v601)
        {
          if ((_QWORD *)v606[2] == v608 && *((_DWORD *)v606 + 6) == (_DWORD)v601)
          {
LABEL_1062:
            v613 = *(unsigned int *)(v598 + 24);
            if (v602.u32[0] > 1uLL)
            {
              v614 = *(unsigned int *)(v598 + 24);
              if (*(_QWORD *)&v600 <= v613)
                v614 = v613 % *(_QWORD *)&v600;
            }
            else
            {
              v614 = (v600.i32[0] - 1) & v613;
            }
            v615 = *(uint64_t ***)(v604 + 8 * v614);
            if (!v615)
              goto LABEL_1034;
            v616 = *v615;
            if (!v616)
              goto LABEL_1034;
            v617 = *(_QWORD *)(v598 + 16);
            if (v602.u32[0] < 2uLL)
            {
              while (1)
              {
                v619 = v616[1];
                if (v619 == v613)
                {
                  if (v616[2] == v617 && *((_DWORD *)v616 + 6) == (_DWORD)v613)
                    goto LABEL_1088;
                }
                else if ((v619 & v607) != v614)
                {
                  goto LABEL_1034;
                }
                v616 = (uint64_t *)*v616;
                if (!v616)
                  goto LABEL_1034;
              }
            }
            while (2)
            {
              v621 = v616[1];
              if (v621 != v613)
              {
                if (v621 >= *(_QWORD *)&v600)
                  v621 %= *(_QWORD *)&v600;
                if (v621 != v614)
                  goto LABEL_1034;
                goto LABEL_1082;
              }
              if (v616[2] != v617 || *((_DWORD *)v616 + 6) != (_DWORD)v613)
              {
LABEL_1082:
                v616 = (uint64_t *)*v616;
                if (!v616)
                  goto LABEL_1034;
                continue;
              }
              break;
            }
LABEL_1088:
            v898 = v582[5];
            v883 = *(_QWORD *)(v598 + 24);
            v622 = *(_DWORD *)(v598 + 8);
            v892 = *(_DWORD *)(v598 + 4);
            if (!*(_BYTE *)(v598 + 160) || !*(_BYTE *)(v598 + 456))
            {
              sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MapOptimization/src/PoseGraphEdgeUtil.cpp", 61, (uint64_t)"(edge.T_source_to_neighbor && edge.JtJ_source_to_neighbor)", 58, (uint64_t)"Edge must have transformation", 29, (void (*)(void **))sub_21023DDB0);
              v623 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v623 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              if (!byte_254A6DE68 || byte_254A6DE70)
              {
                v624 = qword_254A6DE40;
                for (mm = qword_254A6DE48; v624 != mm; v624 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v624)(*(_QWORD *)(v624 + 8), "(edge.T_source_to_neighbor && edge.JtJ_source_to_neighbor)", 58, "Edge must have transformation", 29);
              }
              v626 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v626 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              if (byte_254A6DE68)
              {
                qword_254A6DE58(unk_254A6DE60, "(edge.T_source_to_neighbor && edge.JtJ_source_to_neighbor)", 58, "Edge must have transformation", 29);
                goto LABEL_1098;
              }
LABEL_1364:
              abort();
            }
LABEL_1098:
            *(_QWORD *)object = v617;
            *(_QWORD *)&object[8] = v883;
            *(_DWORD *)&object[16] = v622;
            *(_QWORD *)&object[24] = v608;
            *(_QWORD *)&object[32] = v898;
            *(_DWORD *)&object[40] = v892;
            v627 = *(_OWORD *)(v598 + 80);
            v629 = *(_OWORD *)(v598 + 32);
            v628 = *(_OWORD *)(v598 + 48);
            *(_OWORD *)&object[80] = *(_OWORD *)(v598 + 64);
            *(_OWORD *)&object[96] = v627;
            *(_OWORD *)&object[48] = v629;
            *(_OWORD *)&object[64] = v628;
            v630 = *(_OWORD *)(v598 + 144);
            v632 = *(_OWORD *)(v598 + 96);
            v631 = *(_OWORD *)(v598 + 112);
            *(_OWORD *)&object[144] = *(_OWORD *)(v598 + 128);
            *(_OWORD *)&object[160] = v630;
            *(_OWORD *)&object[112] = v632;
            *(_OWORD *)&object[128] = v631;
            memcpy(&object[176], (const void *)(v598 + 168), 0x120uLL);
            v921 = *(_DWORD *)(v598 + 464);
            v922 = 0;
            v633 = *v902;
            if (sub_20F44AAAC((uint64_t)object, *v902))
            {
              if (*(_DWORD *)&object[16] == -1 && *(_DWORD *)&object[40] == -1)
              {
                v634 = 0;
              }
              else
              {
                if (*(_DWORD *)&object[16] == -1 || *(_DWORD *)&object[40] == -1)
                {
                  sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MapOptimization/src/PoseGraphEdgeUtil.cpp", 36, (uint64_t)"", 0, (uint64_t)"Invalid relocalization results", 30, (void (*)(void **))sub_21023DDB0);
                  goto LABEL_1364;
                }
                v634 = 1;
              }
              LODWORD(v911) = v634;
              v639 = (uint64_t *)(v633 + 168);
              if (!sub_20F7C25CC(v639, (uint64_t *)&object[24], (uint64_t *)object, (unsigned int *)&v911))
                sub_20F7C2840(v639, (uint64_t *)&object[24], (uint64_t *)object, (unsigned int *)&v911, -1, (uint64_t)&object[48], (int8x16_t *)&object[176], v921);
            }
            else
            {
              sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingTypes/src/MapDataUtil.cpp", 613, (uint64_t)"(ret == AddPoseGraphEdgeReturn::kAddedNewEdge || ret == AddPoseGraphEdgeReturn::kSkipDueToDuplicatedEdge)", 105, (uint64_t)"Failed to add the external pose-graph edge to self map.", 55, (void (*)(void **))sub_21023DDB0);
              v635 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v635 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              if (!byte_254A6DE68 || byte_254A6DE70)
              {
                v636 = qword_254A6DE40;
                for (nn = qword_254A6DE48; v636 != nn; v636 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v636)(*(_QWORD *)(v636 + 8), "(ret == AddPoseGraphEdgeReturn::kAddedNewEdge || ret == AddPoseGraphEdgeReturn::kSkipDueToDuplicatedEdge)", 105, "Failed to add the external pose-graph edge to self map.", 55);
              }
              v638 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v638 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              if (!byte_254A6DE68)
                abort();
              qword_254A6DE58(unk_254A6DE60, "(ret == AddPoseGraphEdgeReturn::kAddedNewEdge || ret == AddPoseGraphEdgeReturn::kSkipDueToDuplicatedEdge)", 105, "Failed to add the external pose-graph edge to self map.", 55);
            }
LABEL_1034:
            v598 += 472;
            if (v598 != v599)
              goto LABEL_1035;
LABEL_1030:
            v596 += 3;
            if (v596 != v597)
              goto LABEL_1031;
            v640 = v582[1];
            if (v640)
            {
              do
              {
                v641 = (_QWORD **)v640;
                v640 = (_QWORD *)*v640;
              }
              while (v640);
            }
            else
            {
              do
              {
                v641 = (_QWORD **)v582[2];
                _ZF = *v641 == v582;
                v582 = v641;
              }
              while (!_ZF);
            }
            v582 = v641;
            v503 = (int8x8_t **)a1;
            if (v641 == &v906)
              break;
            goto LABEL_1002;
          }
        }
        else
        {
          if (v612 >= *(_QWORD *)&v600)
            v612 %= *(_QWORD *)&v600;
          if (v612 != v603)
            goto LABEL_1034;
        }
        v606 = (uint64_t *)*v606;
        if (!v606)
          goto LABEL_1034;
      }
    }
LABEL_995:
    v583 = *(_QWORD *)__p;
    if (*(_QWORD *)__p)
    {
      v584 = *(_QWORD *)&__p[8];
      v51 = *(void **)__p;
      if (*(_QWORD *)&__p[8] != *(_QWORD *)__p)
      {
        do
        {
          if (*(char *)(v584 - 1) < 0)
            operator delete(*(void **)(v584 - 24));
          v584 -= 24;
        }
        while (v584 != v583);
        v51 = *(void **)__p;
      }
      *(_QWORD *)&__p[8] = v583;
      operator delete(v51);
    }
    sub_20E86872C((uint64_t)&v905, v906);
    v902 += 2;
    v9 = a1;
    if (v902 != v805)
      continue;
    break;
  }
LABEL_1185:
  for (i1 = (_QWORD *)(*v9)[23]; i1; i1 = (_QWORD *)*i1)
  {
    v669 = i1[6];
    v668 = i1[7];
    v901 = i1;
    for (i2 = v668; v669 != v668; v669 += 472)
    {
      v677 = *(_QWORD *)(v669 + 16);
      if (v677 != i1[2])
      {
        v678 = *a2;
        v679 = a2[1];
        v887 = i1[2];
        if (*a2 != v679)
        {
          while (*(_QWORD *)(*v678 + 160) != v677)
          {
            v678 += 2;
            if (v678 == v679)
            {
              v678 = a2[1];
              break;
            }
          }
        }
        v903 = (_QWORD *)*v678;
        v680 = i1[3];
        v893 = *(_QWORD *)(v669 + 24);
        v899 = *(_DWORD *)(v669 + 4);
        v895 = *(_DWORD *)(v669 + 8);
        if (!*(_BYTE *)(v669 + 160) || !*(_BYTE *)(v669 + 456))
        {
          sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MapOptimization/src/PoseGraphEdgeUtil.cpp", 61, (uint64_t)"(edge.T_source_to_neighbor && edge.JtJ_source_to_neighbor)", 58, (uint64_t)"Edge must have transformation", 29, (void (*)(void **))sub_21023DDB0);
          v681 = v680;
          v682 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v682 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68 || byte_254A6DE70)
          {
            v683 = qword_254A6DE40;
            for (i3 = qword_254A6DE48; v683 != i3; v683 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v683)(*(_QWORD *)(v683 + 8), "(edge.T_source_to_neighbor && edge.JtJ_source_to_neighbor)", 58, "Edge must have transformation", 29);
          }
          v685 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v685 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68)
            abort();
          v680 = v681;
          qword_254A6DE58(unk_254A6DE60, "(edge.T_source_to_neighbor && edge.JtJ_source_to_neighbor)", 58, "Edge must have transformation", 29);
        }
        v686 = *(_OWORD *)(v669 + 112);
        *(_OWORD *)&__p[68] = *(_OWORD *)(v669 + 96);
        v917 = v686;
        v687 = *(_OWORD *)(v669 + 144);
        v918 = *(_OWORD *)(v669 + 128);
        v919 = v687;
        v688 = *(_OWORD *)(v669 + 48);
        *(_OWORD *)&__p[4] = *(_OWORD *)(v669 + 32);
        *(_OWORD *)&__p[20] = v688;
        v689 = *(_OWORD *)(v669 + 80);
        *(_OWORD *)&__p[36] = *(_OWORD *)(v669 + 64);
        *(_OWORD *)&__p[52] = v689;
        memcpy(object, (const void *)(v669 + 168), 0x120uLL);
        v690 = *(_DWORD *)(v669 + 464);
        v691 = v903;
        v693 = (_QWORD *)v903[27];
        v692 = v903[28];
        if ((unint64_t)v693 < v692)
        {
          *v693 = v677;
          v693[1] = v893;
          *((_DWORD *)v693 + 4) = v895;
          v693[3] = v887;
          v693[4] = v680;
          *((_DWORD *)v693 + 10) = v899;
          v672 = v917;
          *((_OWORD *)v693 + 7) = *(_OWORD *)&__p[68];
          *((_OWORD *)v693 + 8) = v672;
          v673 = v919;
          *((_OWORD *)v693 + 9) = v918;
          *((_OWORD *)v693 + 10) = v673;
          v674 = *(_OWORD *)&__p[20];
          *((_OWORD *)v693 + 3) = *(_OWORD *)&__p[4];
          *((_OWORD *)v693 + 4) = v674;
          v675 = *(_OWORD *)&__p[52];
          *((_OWORD *)v693 + 5) = *(_OWORD *)&__p[36];
          *((_OWORD *)v693 + 6) = v675;
          memcpy(v693 + 22, object, 0x120uLL);
          *((_DWORD *)v693 + 116) = v690;
          *((_BYTE *)v693 + 468) = 0;
          v676 = (char *)(v693 + 59);
        }
        else
        {
          v694 = (_BYTE *)v903[26];
          v695 = 0xCBEEA4E1A08AD8F3 * (((char *)v693 - v694) >> 3) + 1;
          if (v695 > 0x8AD8F2FBA93868)
LABEL_1362:
            sub_20E867F44();
          v696 = 0xCBEEA4E1A08AD8F3 * ((uint64_t)(v692 - (_QWORD)v694) >> 3);
          if (2 * v696 > v695)
            v695 = 2 * v696;
          if (v696 >= 0x456C797DD49C34)
            v697 = 0x8AD8F2FBA93868;
          else
            v697 = v695;
          if (v697 > 0x8AD8F2FBA93868)
LABEL_1361:
            sub_20E877A38();
          v698 = (char *)operator new(472 * v697);
          v699 = &v698[8 * (((char *)v693 - v694) >> 3)];
          *(_QWORD *)v699 = v677;
          *((_QWORD *)v699 + 1) = v893;
          *((_DWORD *)v699 + 4) = v895;
          *((_QWORD *)v699 + 3) = v887;
          *((_QWORD *)v699 + 4) = v680;
          *((_DWORD *)v699 + 10) = v899;
          v700 = v917;
          *((_OWORD *)v699 + 7) = *(_OWORD *)&__p[68];
          *((_OWORD *)v699 + 8) = v700;
          v701 = v919;
          *((_OWORD *)v699 + 9) = v918;
          *((_OWORD *)v699 + 10) = v701;
          v702 = *(_OWORD *)&__p[20];
          *((_OWORD *)v699 + 3) = *(_OWORD *)&__p[4];
          *((_OWORD *)v699 + 4) = v702;
          v703 = *(_OWORD *)&__p[52];
          *((_OWORD *)v699 + 5) = *(_OWORD *)&__p[36];
          *((_OWORD *)v699 + 6) = v703;
          memcpy(v699 + 176, object, 0x120uLL);
          *((_DWORD *)v699 + 116) = v690;
          v699[468] = 0;
          v704 = v699;
          if (v693 != (_QWORD *)v694)
          {
            do
            {
              v705 = v704;
              v704 = (_OWORD *)((char *)v704 - 472);
              v706 = *(_OWORD *)(v693 - 59);
              v707 = *(_OWORD *)(v693 - 57);
              *(_OWORD *)((char *)v704 + 28) = *(_OWORD *)((char *)v693 - 444);
              *v704 = v706;
              v704[1] = v707;
              v708 = (_OWORD *)((char *)v705 - 424);
              v709 = *(_OWORD *)(v693 - 39);
              v711 = *(_OWORD *)(v693 - 45);
              v710 = *(_OWORD *)(v693 - 43);
              v708[6] = *(_OWORD *)(v693 - 41);
              v708[7] = v709;
              v708[4] = v711;
              v708[5] = v710;
              v712 = *(_OWORD *)(v693 - 53);
              v713 = *(_OWORD *)(v693 - 51);
              v714 = *(_OWORD *)(v693 - 47);
              v708[2] = *(_OWORD *)(v693 - 49);
              v708[3] = v714;
              *v708 = v712;
              v708[1] = v713;
              memcpy((char *)v705 - 296, v693 - 37, 0x120uLL);
              v715 = *((_BYTE *)v693 - 4);
              *((_DWORD *)v705 - 2) = *((_DWORD *)v693 - 2);
              *((_BYTE *)v705 - 4) = v715;
              v693 -= 59;
            }
            while (v693 != (_QWORD *)v694);
            v693 = (_QWORD *)v903[26];
          }
          v676 = v699 + 472;
          v691 = v903;
          v903[26] = v704;
          v903[27] = v699 + 472;
          v903[28] = &v698[472 * v697];
          if (v693)
            operator delete(v693);
        }
        i1 = v901;
        v668 = i2;
        v691[27] = v676;
      }
    }
    v670 = i1[9];
    v671 = i1[10];
    if (v670 != v671)
    {
      v885 = i1[10];
      do
      {
        v721 = *(_QWORD *)(v670 + 16);
        v722 = i1[2];
        if (v721 != v722)
        {
          v723 = *a2;
          v724 = a2[1];
          if (*a2 != v724)
          {
            while (*(_QWORD *)(*v723 + 160) != v721)
            {
              v723 += 2;
              if (v723 == v724)
              {
                v723 = a2[1];
                break;
              }
            }
          }
          v904 = (_QWORD *)*v723;
          v900 = i1[3];
          v888 = *(_QWORD *)(v670 + 24);
          v896 = *(_DWORD *)(v670 + 4);
          v894 = *(_DWORD *)(v670 + 8);
          if (!*(_BYTE *)(v670 + 160) || !*(_BYTE *)(v670 + 456))
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MapOptimization/src/PoseGraphEdgeUtil.cpp", 61, (uint64_t)"(edge.T_source_to_neighbor && edge.JtJ_source_to_neighbor)", 58, (uint64_t)"Edge must have transformation", 29, (void (*)(void **))sub_21023DDB0);
            v725 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v725 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v726 = qword_254A6DE40;
              for (i4 = qword_254A6DE48; v726 != i4; v726 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v726)(*(_QWORD *)(v726 + 8), "(edge.T_source_to_neighbor && edge.JtJ_source_to_neighbor)", 58, "Edge must have transformation", 29);
            }
            v728 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v728 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
              abort();
            qword_254A6DE58(unk_254A6DE60, "(edge.T_source_to_neighbor && edge.JtJ_source_to_neighbor)", 58, "Edge must have transformation", 29);
          }
          v729 = *(_OWORD *)(v670 + 112);
          *(_OWORD *)&__p[68] = *(_OWORD *)(v670 + 96);
          v917 = v729;
          v730 = *(_OWORD *)(v670 + 144);
          v918 = *(_OWORD *)(v670 + 128);
          v919 = v730;
          v731 = *(_OWORD *)(v670 + 48);
          *(_OWORD *)&__p[4] = *(_OWORD *)(v670 + 32);
          *(_OWORD *)&__p[20] = v731;
          v732 = *(_OWORD *)(v670 + 80);
          *(_OWORD *)&__p[36] = *(_OWORD *)(v670 + 64);
          *(_OWORD *)&__p[52] = v732;
          memcpy(object, (const void *)(v670 + 168), 0x120uLL);
          v733 = *(_DWORD *)(v670 + 464);
          v734 = v904;
          v736 = (_QWORD *)v904[27];
          v735 = v904[28];
          if ((unint64_t)v736 < v735)
          {
            *v736 = v721;
            v736[1] = v888;
            *((_DWORD *)v736 + 4) = v894;
            v736[3] = v722;
            v736[4] = v900;
            *((_DWORD *)v736 + 10) = v896;
            v716 = v917;
            *((_OWORD *)v736 + 7) = *(_OWORD *)&__p[68];
            *((_OWORD *)v736 + 8) = v716;
            v717 = v919;
            *((_OWORD *)v736 + 9) = v918;
            *((_OWORD *)v736 + 10) = v717;
            v718 = *(_OWORD *)&__p[20];
            *((_OWORD *)v736 + 3) = *(_OWORD *)&__p[4];
            *((_OWORD *)v736 + 4) = v718;
            v719 = *(_OWORD *)&__p[52];
            *((_OWORD *)v736 + 5) = *(_OWORD *)&__p[36];
            *((_OWORD *)v736 + 6) = v719;
            memcpy(v736 + 22, object, 0x120uLL);
            *((_DWORD *)v736 + 116) = v733;
            *((_BYTE *)v736 + 468) = 0;
            v720 = (char *)(v736 + 59);
            i1 = v901;
            v671 = v885;
          }
          else
          {
            v737 = (_BYTE *)v904[26];
            v738 = 0xCBEEA4E1A08AD8F3 * (((char *)v736 - v737) >> 3) + 1;
            if (v738 > 0x8AD8F2FBA93868)
              goto LABEL_1362;
            v739 = 0xCBEEA4E1A08AD8F3 * ((uint64_t)(v735 - (_QWORD)v737) >> 3);
            if (2 * v739 > v738)
              v738 = 2 * v739;
            if (v739 >= 0x456C797DD49C34)
              v740 = 0x8AD8F2FBA93868;
            else
              v740 = v738;
            if (v740 > 0x8AD8F2FBA93868)
              goto LABEL_1361;
            v741 = *(_DWORD *)(v670 + 464);
            v742 = (char *)operator new(472 * v740);
            v743 = &v742[8 * (((char *)v736 - v737) >> 3)];
            *(_QWORD *)v743 = v721;
            *((_QWORD *)v743 + 1) = v888;
            *((_DWORD *)v743 + 4) = v894;
            *((_QWORD *)v743 + 3) = v722;
            *((_QWORD *)v743 + 4) = v900;
            *((_DWORD *)v743 + 10) = v896;
            v744 = v917;
            *((_OWORD *)v743 + 7) = *(_OWORD *)&__p[68];
            *((_OWORD *)v743 + 8) = v744;
            v745 = v919;
            *((_OWORD *)v743 + 9) = v918;
            *((_OWORD *)v743 + 10) = v745;
            v746 = *(_OWORD *)&__p[20];
            *((_OWORD *)v743 + 3) = *(_OWORD *)&__p[4];
            *((_OWORD *)v743 + 4) = v746;
            v747 = *(_OWORD *)&__p[52];
            *((_OWORD *)v743 + 5) = *(_OWORD *)&__p[36];
            *((_OWORD *)v743 + 6) = v747;
            memcpy(v743 + 176, object, 0x120uLL);
            *((_DWORD *)v743 + 116) = v741;
            v743[468] = 0;
            v748 = v743;
            if (v736 != (_QWORD *)v737)
            {
              do
              {
                v749 = v748;
                v748 = (_OWORD *)((char *)v748 - 472);
                v750 = *(_OWORD *)(v736 - 59);
                v751 = *(_OWORD *)(v736 - 57);
                *(_OWORD *)((char *)v748 + 28) = *(_OWORD *)((char *)v736 - 444);
                *v748 = v750;
                v748[1] = v751;
                v752 = (_OWORD *)((char *)v749 - 424);
                v753 = *(_OWORD *)(v736 - 39);
                v755 = *(_OWORD *)(v736 - 45);
                v754 = *(_OWORD *)(v736 - 43);
                v752[6] = *(_OWORD *)(v736 - 41);
                v752[7] = v753;
                v752[4] = v755;
                v752[5] = v754;
                v756 = *(_OWORD *)(v736 - 53);
                v757 = *(_OWORD *)(v736 - 51);
                v758 = *(_OWORD *)(v736 - 47);
                v752[2] = *(_OWORD *)(v736 - 49);
                v752[3] = v758;
                *v752 = v756;
                v752[1] = v757;
                memcpy((char *)v749 - 296, v736 - 37, 0x120uLL);
                v759 = *((_BYTE *)v736 - 4);
                *((_DWORD *)v749 - 2) = *((_DWORD *)v736 - 2);
                *((_BYTE *)v749 - 4) = v759;
                v736 -= 59;
              }
              while (v736 != (_QWORD *)v737);
              v736 = (_QWORD *)v904[26];
            }
            v760 = &v742[472 * v740];
            v720 = v743 + 472;
            v734 = v904;
            v904[26] = v748;
            v904[27] = v720;
            v904[28] = v760;
            v671 = v885;
            if (v736)
              operator delete(v736);
            i1 = v901;
          }
          v734[27] = v720;
        }
        v670 += 472;
      }
      while (v670 != v671);
    }
  }
  v761 = *a2;
  v762 = a2[1];
  if (*a2 == v762)
    goto LABEL_1267;
  while (1)
  {
    sub_20FCCBC60((unint64_t *)(*v761 + 160), (std::string *)object);
    v763 = sub_20EB07858((_QWORD *)*v761, (uint64_t)object);
    if ((object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    if (!v763)
      break;
    v761 += 2;
    if (v761 == v762)
      goto LABEL_1267;
  }
  v781 = *a2;
  v782 = a2[1];
  if (*a2 == v782)
    goto LABEL_1267;
  while (2)
  {
    memset(__p, 0, 24);
    v784 = *(uint64_t **)(*v781 + 16);
    if (!v784)
      goto LABEL_1302;
    while (2)
    {
      object[23] = 7;
      strcpy(object, "origin_");
      v786 = *((unsigned __int8 *)v784 + 39);
      if ((v786 & 0x80u) == 0)
        v787 = *((unsigned __int8 *)v784 + 39);
      else
        v787 = v784[3];
      if (v787 > 6)
      {
        v788 = (const void **)(v784 + 2);
        if ((v786 & 0x80) != 0)
        {
          if ((unint64_t)v784[3] >= 7)
            v792 = 7;
          else
            v792 = v784[3];
          v793 = memcmp(*v788, object, v792);
          if (v792 == 7 && v793 == 0)
            goto LABEL_1330;
        }
        else
        {
          if (v786 >= 7)
            v789 = 7;
          else
            v789 = *((unsigned __int8 *)v784 + 39);
          v790 = memcmp(v784 + 2, object, v789);
          if (v789 != 7 || v790 != 0)
            goto LABEL_1307;
LABEL_1330:
          if (sub_20FCCBF10(v784 + 2) != *(_QWORD *)(*v781 + 160))
          {
            v795 = *(_OWORD **)&__p[8];
            if (*(_QWORD *)&__p[8] >= *(_QWORD *)&__p[16])
            {
              v785 = sub_20E8ADE68((uint64_t *)__p, (__int128 *)v784 + 1);
            }
            else
            {
              if (*((char *)v784 + 39) < 0)
              {
                sub_20E860C04(*(_BYTE **)&__p[8], (void *)v784[2], v784[3]);
              }
              else
              {
                v796 = *(_OWORD *)v788;
                *(_QWORD *)(*(_QWORD *)&__p[8] + 16) = v784[4];
                *v795 = v796;
              }
              v785 = (uint64_t)v795 + 24;
            }
            *(_QWORD *)&__p[8] = v785;
          }
        }
      }
LABEL_1307:
      v784 = (uint64_t *)*v784;
      if (v784)
        continue;
      break;
    }
    v797 = *(_QWORD *)__p;
    v798 = *(_QWORD *)&__p[8];
    if (*(_QWORD *)__p != *(_QWORD *)&__p[8])
    {
      do
      {
        sub_20FCC8710((_QWORD *)*v781, v797);
        v797 += 24;
      }
      while (v797 != v798);
      v797 = *(_QWORD *)__p;
    }
    if (v797)
    {
      v799 = *(_QWORD *)&__p[8];
      v783 = (void *)v797;
      if (*(_QWORD *)&__p[8] != v797)
      {
        do
        {
          if (*(char *)(v799 - 1) < 0)
            operator delete(*(void **)(v799 - 24));
          v799 -= 24;
        }
        while (v799 != v797);
        v783 = *(void **)__p;
      }
      *(_QWORD *)&__p[8] = v797;
      operator delete(v783);
    }
LABEL_1302:
    v781 += 2;
    if (v781 != v782)
      continue;
    break;
  }
  v800 = *a2;
  v801 = a2[1];
  while (v800 != v801)
  {
    sub_20FCCBC60((unint64_t *)(*v800 + 160), (std::string *)object);
    if (!sub_20EB07858((_QWORD *)*v800, (uint64_t)object))
    {
      v802 = (_QWORD *)*v800;
      v803 = *(void **)(*v800 + 160);
      v804 = **(_QWORD ***)(*v800 + 424);
      memset(__p, 0, 24);
      sub_20FCC7534(v802, v803, v804, (uint64_t *)__p, 4352, 0);
      if (*(_QWORD *)__p)
      {
        *(_QWORD *)&__p[8] = *(_QWORD *)__p;
        operator delete(*(void **)__p);
      }
    }
    if ((object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    v800 += 2;
  }
LABEL_1267:
  v764 = (*a1)[53];
  v765 = *(_QWORD *)(v764 + 80);
  for (i5 = *(_QWORD *)(v764 + 88); v765 != i5; v765 += 2736)
  {
    v767 = *a2;
    v768 = a2[1];
    if (*a2 != v768)
    {
      while (!*v767 || *(_QWORD *)(*v767 + 160) != *(_QWORD *)v765)
      {
        v767 += 2;
        if (v767 == v768)
          goto LABEL_1270;
      }
    }
    if (v767 != v768)
    {
      v769 = *(_QWORD *)(*v767 + 424);
      v771 = *(_QWORD *)(v769 + 80);
      v772 = *(_QWORD *)(v769 + 88);
      v770 = (uint64_t *)(v769 + 80);
      if (v772 != v771)
      {
        v773 = 0x80BFA02FE80BFA03 * ((v772 - v771) >> 4);
        v774 = *(_QWORD *)v765;
        do
        {
          v775 = v773 >> 1;
          v776 = v771 + 2736 * (v773 >> 1);
          if (*(_QWORD *)v776 < v774 || *(_QWORD *)v776 == v774 && *(_DWORD *)(v776 + 8) < *(_DWORD *)(v765 + 8))
          {
            v771 = v776 + 2736;
            v775 = v773 + ~v775;
          }
          v773 = v775;
        }
        while (v775);
      }
      if (v771 == v772
        || (*(_QWORD *)v771 == *(_QWORD *)v765 ? (v777 = *(_DWORD *)(v771 + 8) == *(_DWORD *)(v765 + 8)) : (v777 = 0),
            !v777))
      {
        sub_20F45BB78(v770, v771, v765);
      }
    }
LABEL_1270:
    ;
  }
  v778 = v909[0];
  if (v909[0])
  {
    do
    {
      v779 = (_QWORD *)*v778;
      operator delete(v778);
      v778 = v779;
    }
    while (v779);
  }
  v780 = v908[0];
  v908[0] = 0;
  if (v780)
    operator delete(v780);
}

void sub_20F45331C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22)
{
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  char *v26;
  char *v27;
  void *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  void *v32;

  if (LOBYTE(STACK[0x510]) && SLOBYTE(STACK[0x50F]) < 0)
    operator delete((void *)STACK[0x4F8]);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0x540]);
  sub_20E86872C((uint64_t)&STACK[0x4B8], (_QWORD *)STACK[0x4C0]);
  v26 = (char *)*a22;
  if (*a22)
  {
    v27 = (char *)a22[1];
    v28 = *a22;
    if (v27 == v26)
    {
      a22[1] = v26;
      operator delete(v28);
      v23 = (_QWORD *)STACK[0x4E0];
      if (!STACK[0x4E0])
        goto LABEL_7;
    }
    else
    {
      do
      {
        v29 = (std::__shared_weak_count *)*((_QWORD *)v27 - 1);
        if (v29)
        {
          p_shared_owners = (unint64_t *)&v29->__shared_owners_;
          do
            v31 = __ldaxr(p_shared_owners);
          while (__stlxr(v31 - 1, p_shared_owners));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        v27 -= 16;
      }
      while (v27 != v26);
      v32 = *a22;
      a22[1] = v26;
      operator delete(v32);
      v23 = (_QWORD *)STACK[0x4E0];
      if (!STACK[0x4E0])
      {
LABEL_7:
        v25 = (void *)STACK[0x4D0];
        STACK[0x4D0] = 0;
        if (v25)
          operator delete(v25);
        _Unwind_Resume(a1);
      }
    }
  }
  else
  {
    v23 = (_QWORD *)STACK[0x4E0];
    if (!STACK[0x4E0])
      goto LABEL_7;
  }
  do
  {
    v24 = (_QWORD *)*v23;
    operator delete(v23);
    v23 = v24;
  }
  while (v24);
  goto LABEL_7;
}

double sub_20F453824@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X8>, double a8@<D0>)
{
  __int128 v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  float64x2_t **v18;
  int64x2_t v19;
  float64_t *v20;
  int64x2_t v21;
  double v22;
  float64x2_t *v24;
  double v25;
  float64x2_t v26;
  double v27;
  float64x2_t v28;
  float64x2_t v30;
  float64x2_t v33;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v46;
  float64x2_t v47;
  int8x16_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t **v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  double v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t *v72;
  double v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  uint64_t v82;
  double result;

  *(_OWORD *)(a7 + 112) = xmmword_2103B4830;
  *(_OWORD *)(a7 + 128) = unk_2103B4840;
  *(_OWORD *)(a7 + 144) = xmmword_2103B4850;
  *(_OWORD *)(a7 + 160) = unk_2103B4860;
  *(float64x2_t *)(a7 + 48) = xmmword_2103B47F0[0];
  *(_OWORD *)(a7 + 64) = unk_2103B4800;
  *(_OWORD *)(a7 + 80) = xmmword_2103B4810;
  *(_OWORD *)(a7 + 96) = unk_2103B4820;
  *(_OWORD *)(a7 + 176) = 0u;
  *(_OWORD *)(a7 + 192) = 0u;
  *(_OWORD *)(a7 + 208) = 0u;
  *(_OWORD *)(a7 + 224) = 0u;
  *(_OWORD *)(a7 + 240) = 0u;
  *(_OWORD *)(a7 + 256) = 0u;
  *(_OWORD *)(a7 + 272) = 0u;
  *(_OWORD *)(a7 + 288) = 0u;
  *(_OWORD *)(a7 + 304) = 0u;
  *(_OWORD *)(a7 + 320) = 0u;
  *(_OWORD *)(a7 + 336) = 0u;
  *(_OWORD *)(a7 + 352) = 0u;
  *(_OWORD *)(a7 + 368) = 0u;
  *(_OWORD *)(a7 + 384) = 0u;
  *(_OWORD *)(a7 + 400) = 0u;
  *(_OWORD *)(a7 + 416) = 0u;
  *(_OWORD *)(a7 + 432) = 0u;
  *(_OWORD *)(a7 + 448) = 0u;
  *(_QWORD *)(a7 + 461) = 0;
  *(_QWORD *)&v14 = -1;
  *((_QWORD *)&v14 + 1) = -1;
  *(_OWORD *)(a7 + 28) = v14;
  *(_OWORD *)(a7 + 12) = v14;
  *(_DWORD *)(a7 + 44) = -1;
  *(_QWORD *)a7 = *(_QWORD *)a3;
  *(_DWORD *)(a7 + 8) = *(_DWORD *)(a3 + 8);
  *(_QWORD *)(a7 + 24) = *(_QWORD *)a4;
  v15 = (_QWORD *)(**(_QWORD **)(a1 + 424) + 1784);
  *(_DWORD *)(a7 + 32) = *(_DWORD *)(a4 + 8);
  v16 = sub_20E9DF85C(v15, (uint64_t *)a3);
  if (!v16
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingTypes/src/MapDataUtil.cpp", 743, (uint64_t)"query_proj_ref", 14, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| (v17 = sub_20E9DF85C((_QWORD *)(**(_QWORD **)(a2 + 424) + 1784), (uint64_t *)a4)) == 0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingTypes/src/MapDataUtil.cpp", 747, (uint64_t)"ref_proj_ref", 12, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (v16)
    v18 = (float64x2_t **)(v16 + 5);
  else
    v18 = 0;
  v46.f64[0] = (*v18)[1].f64[0];
  v19 = *(int64x2_t *)*v18;
  v20 = &(*v18)[2].f64[1];
  v21 = *(int64x2_t *)((char *)&(*v18)[1] + 8);
  v22 = (*v18)[4].f64[0];
  _Q18 = (*v18)[3];
  v24 = v18[2];
  v25 = v24[1].f64[0];
  v26.f64[0] = *(float64_t *)(a5 + 16);
  v27 = *(double *)(a5 + 48);
  v28 = *(float64x2_t *)(a5 + 32);
  _D2 = *(double *)(a5 + 80);
  v30 = *(float64x2_t *)(a5 + 64);
  _D24 = *(double *)(a5 + 112);
  _Q23 = *(float64x2_t *)(a5 + 96);
  v33 = vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)a5, (int64x2_t)v28), vnegq_f64(_Q23).f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)a5, (int64x2_t)v28), _Q23, 1);
  _D25 = *(_QWORD *)(a5 + 72);
  __asm { FMLS            D17, D25, V23.D[1] }
  v40 = (float64x2_t)vzip1q_s64(v19, v21);
  v41 = (float64x2_t)*(unint64_t *)&_Q18.f64[0];
  v42 = vmulq_n_f64(v40, v26.f64[0]);
  v43 = vmulq_n_f64((float64x2_t)*(unint64_t *)&_Q18.f64[0], v26.f64[0]);
  v26.f64[1] = v27;
  v44 = vmlsq_lane_f64(v33, v26, _D24, 0);
  __asm { FMLS            D17, D2, V24.D[0] }
  v51 = (float64x2_t)vzip2q_s64(v19, v21);
  v46.f64[1] = *v20;
  v47 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v40, v24->f64[0]), v51, *v24, 1), v46, v25);
  _Q16 = vmulq_f64(_Q18, *v24);
  _D21 = v24->f64[1];
  __asm { FMLA            D16, D21, V18.D[1] }
  _Q16.f64[0] = _Q16.f64[0] + v22 * v25;
  v50 = vextq_s8((int8x16_t)v51, (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q18, 1), 8uLL);
  *(_QWORD *)&v51.f64[1] = v50.i64[0];
  v52 = (float64x2_t)*(unint64_t *)&v25;
  *(_QWORD *)&v52.f64[0] = v50.i64[1];
  __asm { FMOV            V21.2D, #1.0 }
  *(_QWORD *)&_Q21.f64[0] = *(_OWORD *)&vnegq_f64(_Q16);
  v54 = vmlaq_n_f64(vmulq_n_f64(v40, *(double *)a5), v51, v28.f64[0]);
  v55 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v41.f64[0], *(double *)a5), (float64x2_t)v50.u64[1], v28.f64[0]);
  v56 = vmlaq_laneq_f64(vmulq_laneq_f64(v40, *(float64x2_t *)a5, 1), v51, v28, 1);
  v57 = vmlaq_laneq_f64(vmulq_laneq_f64((float64x2_t)*(unint64_t *)&v41.f64[0], *(float64x2_t *)a5, 1), (float64x2_t)v50.u64[1], v28, 1);
  v58 = (float64x2_t **)(v17 + 5);
  if (!v17)
    v58 = 0;
  v59 = vmlsq_f64(vmlaq_n_f64(v54, v46, v30.f64[0]), (float64x2_t)0, v47);
  v60 = vmlaq_f64(vmlaq_n_f64(v55, (float64x2_t)*(unint64_t *)&v22, v30.f64[0]), (float64x2_t)0, _Q21);
  v61 = vmlsq_f64(vmlaq_laneq_f64(v56, v46, v30, 1), (float64x2_t)0, v47);
  v62 = vmlaq_f64(vmlaq_laneq_f64(v57, (float64x2_t)*(unint64_t *)&v22, v30, 1), (float64x2_t)0, _Q21);
  v63 = vmlsq_f64(vmlaq_n_f64(vmlaq_n_f64(v42, v51, v27), v46, _D2), (float64x2_t)0, v47);
  v64 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v43, v52, v27), (float64x2_t)*(unint64_t *)&v22, _D2), (float64x2_t)0, _Q21);
  v65 = vsubq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v40, v44.f64[0]), v51, v44, 1), v46, _D17), v47);
  v66 = vaddq_f64(_Q21, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v41, v44.f64[0]), v52, v44, 1), (float64x2_t)*(unint64_t *)&v22, _D17));
  v67 = (*v58)[4].f64[0];
  v69 = (*v58)[2];
  v68 = (*v58)[3];
  v71 = **v58;
  v70 = (*v58)[1];
  v72 = v58[2];
  v73 = v72[1].f64[0];
  v74 = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v59, v71.f64[0]), v61, v71, 1), v63, v70.f64[0]), (float64x2_t)0, v65);
  v75 = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v60, v71.f64[0]), v62, v71, 1), v64, v70.f64[0]), (float64x2_t)0, v66);
  v76 = vmlaq_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(v59, v70, 1), v61, v69.f64[0]), v63, v69, 1), (float64x2_t)0, v65);
  v77 = vmlaq_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(v60, v70, 1), v62, v69.f64[0]), v64, v69, 1), (float64x2_t)0, v66);
  v78 = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v59, v68.f64[0]), v61, v68, 1), v63, v67), (float64x2_t)0, v65);
  v79 = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v60, v68.f64[0]), v62, v68, 1), v64, v67), (float64x2_t)0, v66);
  v80 = vaddq_f64(v65, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v59, v72->f64[0]), v61, *v72, 1), v63, v73));
  v81 = vmlaq_laneq_f64(vmulq_n_f64(v60, v72->f64[0]), v62, *v72, 1);
  *(float64x2_t *)(a7 + 48) = v74;
  *(float64x2_t *)(a7 + 64) = v75;
  *(float64x2_t *)(a7 + 80) = v76;
  *(float64x2_t *)(a7 + 96) = v77;
  *(float64x2_t *)(a7 + 112) = v78;
  *(float64x2_t *)(a7 + 128) = v79;
  *(float64x2_t *)(a7 + 144) = v80;
  *(float64x2_t *)(a7 + 160) = vaddq_f64(v66, vmlaq_n_f64(v81, v64, v73));
  *(_OWORD *)(a7 + 184) = 0uLL;
  v82 = a7 + 184;
  *(_OWORD *)(v82 + 240) = 0uLL;
  *(_OWORD *)(v82 + 256) = 0uLL;
  *(_OWORD *)(v82 + 208) = 0uLL;
  *(_OWORD *)(v82 + 224) = 0uLL;
  *(_OWORD *)(v82 + 176) = 0uLL;
  *(_OWORD *)(v82 + 192) = 0uLL;
  *(_OWORD *)(v82 + 144) = 0uLL;
  *(_OWORD *)(v82 + 160) = 0uLL;
  *(_OWORD *)(v82 + 112) = 0uLL;
  *(_OWORD *)(v82 + 128) = 0uLL;
  *(_OWORD *)(v82 + 80) = 0uLL;
  *(_OWORD *)(v82 + 96) = 0uLL;
  *(_OWORD *)(v82 + 48) = 0uLL;
  *(_OWORD *)(v82 + 64) = 0uLL;
  *(_OWORD *)(v82 + 16) = 0uLL;
  *(_OWORD *)(v82 + 32) = 0uLL;
  result = a8 * a8;
  *(double *)(v82 - 8) = a8 * a8;
  *(double *)(v82 + 48) = a8 * a8;
  *(double *)(v82 + 104) = a8 * a8;
  *(double *)(v82 + 160) = a8 * a8;
  *(double *)(v82 + 216) = a8 * a8;
  *(double *)(v82 + 272) = a8 * a8;
  *(_DWORD *)(v82 + 280) = a6;
  return result;
}

void sub_20F453BF4(uint64_t a1@<X0>, int a2@<W1>, char a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  void **v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  char *v14;
  uint64_t v15;
  uint64_t i;
  char *v17;
  void **v18;
  char v19;
  __int128 v20;
  void *v21;
  size_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  int v56;
  uint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  char *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t j;
  _DWORD *v85;
  uint64_t v86;
  uint64_t v87;
  _DWORD *v88;
  _QWORD *v89;
  __int128 v90;
  __int128 v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t k;
  _QWORD *v95;
  _QWORD *v96;
  _OWORD *v97;
  _DWORD *v98;
  void *v99;
  void *v100;
  _QWORD *v101;
  void **v102;
  uint64_t v103;
  _QWORD v105[2];
  char v106;

  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_DWORD *)(a5 + 32) = 1065353216;
  *(_OWORD *)(a5 + 40) = 0u;
  v9 = (void **)(a5 + 40);
  *(_OWORD *)(a5 + 56) = 0u;
  *(_OWORD *)(a5 + 72) = 0u;
  *(_OWORD *)(a5 + 88) = 0u;
  *(_OWORD *)(a5 + 104) = 0u;
  *(_OWORD *)(a5 + 120) = 0u;
  *(_OWORD *)(a5 + 136) = 0u;
  *(_QWORD *)(a5 + 152) = 0;
  sub_20FCC477C((_QWORD *)a5);
  *(_QWORD *)(a5 + 240) = 0;
  *(_QWORD *)(a5 + 232) = a5 + 240;
  *(_OWORD *)(a5 + 168) = 0u;
  *(_QWORD *)(a5 + 160) = -1;
  *(_OWORD *)(a5 + 184) = 0u;
  *(_DWORD *)(a5 + 200) = 1065353216;
  *(_QWORD *)(a5 + 208) = 0;
  *(_QWORD *)(a5 + 216) = 0;
  *(_QWORD *)(a5 + 224) = 0;
  *(_QWORD *)(a5 + 248) = 0;
  *(_QWORD *)(a5 + 256) = 0;
  *(_BYTE *)(a5 + 292) = 0;
  *(_QWORD *)(a5 + 264) = 0;
  *(_QWORD *)(a5 + 272) = 0;
  *(_BYTE *)(a5 + 280) = 0;
  *(_QWORD *)(a5 + 296) = a5 + 304;
  *(_QWORD *)(a5 + 304) = 0;
  *(_QWORD *)(a5 + 312) = 0;
  *(_BYTE *)(a5 + 356) = 0;
  *(_QWORD *)(a5 + 320) = 0;
  *(_QWORD *)(a5 + 328) = 0;
  *(_BYTE *)(a5 + 344) = 0;
  *(_QWORD *)(a5 + 336) = 0;
  *(_OWORD *)(a5 + 360) = 0u;
  *(_OWORD *)(a5 + 376) = 0u;
  *(_DWORD *)(a5 + 392) = 1065353216;
  *(_QWORD *)(a5 + 400) = -1;
  *(_BYTE *)(a5 + 408) = 0;
  *(_DWORD *)(a5 + 428) = 0;
  *(_QWORD *)(a5 + 412) = 0;
  *(_QWORD *)(a5 + 420) = 0;
  v10 = *(_QWORD *)(a1 + 424);
  if (v10)
  {
    v11 = (uint64_t *)operator new();
    sub_20E8E8A78(v11);
    v105[0] = v11;
    sub_20FCE0894(v10, a2, a3, v11);
    v12 = *(uint64_t **)(a5 + 424);
    *(_QWORD *)(a5 + 424) = v11;
    if (v12)
    {
      v13 = sub_20E8E95B0(v12);
      MEMORY[0x212BC6398](v13, 0x20C40313AD07FLL);
    }
  }
  if (a5 != a1 && (a2 & ~a4 & 1) == 0)
  {
    *(_DWORD *)(a5 + 32) = *(_DWORD *)(a1 + 32);
    v14 = *(char **)(a1 + 16);
    v15 = *(_QWORD *)(a5 + 8);
    if (!v15)
      goto LABEL_24;
    for (i = 0; i != v15; ++i)
      *(_QWORD *)(*(_QWORD *)a5 + 8 * i) = 0;
    v17 = *(char **)(a5 + 16);
    *(_QWORD *)(a5 + 16) = 0;
    *(_QWORD *)(a5 + 24) = 0;
    if (v17)
    {
      while (v14)
      {
        if (v17 != v14)
        {
          v18 = (void **)(v17 + 16);
          v19 = v14[39];
          if (v17[39] < 0)
          {
            if (v19 >= 0)
              v21 = v14 + 16;
            else
              v21 = (void *)*((_QWORD *)v14 + 2);
            if (v19 >= 0)
              v22 = v14[39];
            else
              v22 = *((_QWORD *)v14 + 3);
            sub_20E867CBC(v18, v21, v22);
          }
          else if (v14[39] < 0)
          {
            sub_20E867BF8(v18, *((void **)v14 + 2), *((_QWORD *)v14 + 3));
          }
          else
          {
            v20 = *((_OWORD *)v14 + 1);
            *((_QWORD *)v17 + 4) = *((_QWORD *)v14 + 4);
            *(_OWORD *)v18 = v20;
          }
        }
        v23 = *(_OWORD *)(v14 + 40);
        *((_DWORD *)v17 + 14) = *((_DWORD *)v14 + 14);
        *(_OWORD *)(v17 + 40) = v23;
        v24 = *((_OWORD *)v14 + 11);
        v26 = *((_OWORD *)v14 + 8);
        v25 = *((_OWORD *)v14 + 9);
        *((_OWORD *)v17 + 10) = *((_OWORD *)v14 + 10);
        *((_OWORD *)v17 + 11) = v24;
        *((_OWORD *)v17 + 8) = v26;
        *((_OWORD *)v17 + 9) = v25;
        v27 = *((_OWORD *)v14 + 4);
        v28 = *((_OWORD *)v14 + 5);
        v29 = *((_OWORD *)v14 + 7);
        *((_OWORD *)v17 + 6) = *((_OWORD *)v14 + 6);
        *((_OWORD *)v17 + 7) = v29;
        *((_OWORD *)v17 + 4) = v27;
        *((_OWORD *)v17 + 5) = v28;
        v30 = *((_OWORD *)v14 + 19);
        v32 = *((_OWORD *)v14 + 16);
        v31 = *((_OWORD *)v14 + 17);
        *((_OWORD *)v17 + 18) = *((_OWORD *)v14 + 18);
        *((_OWORD *)v17 + 19) = v30;
        *((_OWORD *)v17 + 16) = v32;
        *((_OWORD *)v17 + 17) = v31;
        v33 = *((_OWORD *)v14 + 12);
        v34 = *((_OWORD *)v14 + 13);
        v35 = *((_OWORD *)v14 + 15);
        *((_OWORD *)v17 + 14) = *((_OWORD *)v14 + 14);
        *((_OWORD *)v17 + 15) = v35;
        *((_OWORD *)v17 + 12) = v33;
        *((_OWORD *)v17 + 13) = v34;
        v36 = *((_OWORD *)v14 + 20);
        *(_OWORD *)(v17 + 329) = *(_OWORD *)(v14 + 329);
        *((_OWORD *)v17 + 20) = v36;
        v37 = *(char **)v17;
        sub_20F459888(a5, (uint64_t)v17);
        v14 = *(char **)v14;
        v17 = v37;
        if (!v37)
          goto LABEL_24;
      }
      do
      {
        v65 = *(char **)v17;
        if (v17[39] < 0)
          operator delete(*((void **)v17 + 2));
        operator delete(v17);
        v17 = v65;
      }
      while (v65);
    }
    else
    {
LABEL_24:
      while (v14)
      {
        v38 = (char *)operator new(0x160uLL);
        v39 = (uint64_t)v38;
        v40 = (uint64_t *)(v38 + 16);
        *(_QWORD *)v38 = 0;
        *((_QWORD *)v38 + 1) = 0;
        if (v14[39] < 0)
        {
          sub_20E860C04(v38 + 16, *((void **)v14 + 2), *((_QWORD *)v14 + 3));
        }
        else
        {
          v41 = *((_OWORD *)v14 + 1);
          *((_QWORD *)v38 + 4) = *((_QWORD *)v14 + 4);
          *(_OWORD *)v40 = v41;
        }
        v42 = *(_OWORD *)(v14 + 40);
        *(_QWORD *)(v39 + 56) = *((_QWORD *)v14 + 7);
        *(_OWORD *)(v39 + 40) = v42;
        v43 = *((_OWORD *)v14 + 11);
        v45 = *((_OWORD *)v14 + 8);
        v44 = *((_OWORD *)v14 + 9);
        *(_OWORD *)(v39 + 160) = *((_OWORD *)v14 + 10);
        *(_OWORD *)(v39 + 176) = v43;
        *(_OWORD *)(v39 + 128) = v45;
        *(_OWORD *)(v39 + 144) = v44;
        v46 = *((_OWORD *)v14 + 4);
        v47 = *((_OWORD *)v14 + 5);
        v48 = *((_OWORD *)v14 + 7);
        *(_OWORD *)(v39 + 96) = *((_OWORD *)v14 + 6);
        *(_OWORD *)(v39 + 112) = v48;
        *(_OWORD *)(v39 + 64) = v46;
        *(_OWORD *)(v39 + 80) = v47;
        v49 = *((_OWORD *)v14 + 19);
        v51 = *((_OWORD *)v14 + 16);
        v50 = *((_OWORD *)v14 + 17);
        *(_OWORD *)(v39 + 288) = *((_OWORD *)v14 + 18);
        *(_OWORD *)(v39 + 304) = v49;
        *(_OWORD *)(v39 + 256) = v51;
        *(_OWORD *)(v39 + 272) = v50;
        v52 = *((_OWORD *)v14 + 12);
        v53 = *((_OWORD *)v14 + 13);
        v54 = *((_OWORD *)v14 + 15);
        *(_OWORD *)(v39 + 224) = *((_OWORD *)v14 + 14);
        *(_OWORD *)(v39 + 240) = v54;
        *(_OWORD *)(v39 + 192) = v52;
        *(_OWORD *)(v39 + 208) = v53;
        v55 = *((_OWORD *)v14 + 20);
        *(_OWORD *)(v39 + 329) = *(_OWORD *)(v14 + 329);
        *(_OWORD *)(v39 + 320) = v55;
        v56 = *(char *)(v39 + 39);
        if (v56 >= 0)
          v57 = v40;
        else
          v57 = *(uint64_t **)(v39 + 16);
        if (v56 >= 0)
          v58 = *(unsigned __int8 *)(v39 + 39);
        else
          v58 = *(_QWORD *)(v39 + 24);
        *(_QWORD *)(v39 + 8) = sub_20E8D177C((uint64_t)v105, v57, v58);
        sub_20F459888(a5, v39);
        v14 = *(char **)v14;
      }
    }
    v59 = *(_QWORD *)(a1 + 40);
    v103 = *(_QWORD *)(a1 + 48);
    v60 = 0xCCCCCCCCCCCCCCCDLL * ((v103 - v59) >> 3);
    v61 = *(_QWORD *)(a5 + 56);
    v62 = *(_QWORD *)(a5 + 40);
    if (0xCCCCCCCCCCCCCCCDLL * ((v61 - v62) >> 3) >= v60)
    {
      v69 = *(_QWORD *)(a5 + 48);
      if (0xCCCCCCCCCCCCCCCDLL * ((v69 - v62) >> 3) >= v60)
      {
        if (v59 == v103)
        {
          v73 = *(_QWORD *)(a5 + 40);
        }
        else
        {
          v73 = *(_QWORD *)(a5 + 40);
          do
          {
            v74 = *(_QWORD *)v59;
            *(_DWORD *)(v62 + 8) = *(_DWORD *)(v59 + 8);
            *(_QWORD *)v62 = v74;
            if (v59 != v62)
              sub_20F45A120((void ***)(v62 + 16), *(void ***)(v59 + 16), *(void ***)(v59 + 24), (uint64_t)(*(_QWORD *)(v59 + 24) - *(_QWORD *)(v59 + 16)) >> 5);
            v59 += 40;
            v62 += 40;
            v73 += 40;
          }
          while (v59 != v103);
          v69 = *(_QWORD *)(a5 + 48);
        }
        while (v69 != v73)
        {
          v80 = *(_QWORD *)(v69 - 24);
          if (v80)
          {
            v81 = *(_QWORD *)(v69 - 16);
            v79 = *(void **)(v69 - 24);
            if (v81 != v80)
            {
              do
              {
                if (*(char *)(v81 - 9) < 0)
                  operator delete(*(void **)(v81 - 32));
                v81 -= 32;
              }
              while (v81 != v80);
              v79 = *(void **)(v69 - 24);
            }
            *(_QWORD *)(v69 - 16) = v80;
            operator delete(v79);
          }
          v69 -= 40;
        }
        *(_QWORD *)(a5 + 48) = v73;
        goto LABEL_87;
      }
      v70 = v59 + 8 * ((v69 - v62) >> 3);
      if (v69 != v62)
      {
        v71 = 8 * ((v69 - v62) >> 3);
        do
        {
          v72 = *(_QWORD *)v59;
          *(_DWORD *)(v62 + 8) = *(_DWORD *)(v59 + 8);
          *(_QWORD *)v62 = v72;
          if (v59 != v62)
            sub_20F45A120((void ***)(v62 + 16), *(void ***)(v59 + 16), *(void ***)(v59 + 24), (uint64_t)(*(_QWORD *)(v59 + 24) - *(_QWORD *)(v59 + 16)) >> 5);
          v59 += 40;
          v62 += 40;
          v71 -= 40;
        }
        while (v71);
      }
      v59 = v70;
    }
    else
    {
      if (v62)
      {
        v63 = *(_QWORD *)(a5 + 48);
        v64 = *(void **)(a5 + 40);
        if (v63 != v62)
        {
          v102 = v9;
          do
          {
            v67 = *(_QWORD *)(v63 - 24);
            if (v67)
            {
              v68 = *(_QWORD *)(v63 - 16);
              v66 = *(void **)(v63 - 24);
              if (v68 != v67)
              {
                do
                {
                  if (*(char *)(v68 - 9) < 0)
                    operator delete(*(void **)(v68 - 32));
                  v68 -= 32;
                }
                while (v68 != v67);
                v66 = *(void **)(v63 - 24);
              }
              *(_QWORD *)(v63 - 16) = v67;
              operator delete(v66);
            }
            v63 -= 40;
          }
          while (v63 != v62);
          v9 = v102;
          v64 = *v102;
        }
        *(_QWORD *)(a5 + 48) = v62;
        operator delete(v64);
        v61 = 0;
        *v9 = 0;
        v9[1] = 0;
        v9[2] = 0;
      }
      if (v60 > 0x666666666666666)
        goto LABEL_117;
      v75 = 0xCCCCCCCCCCCCCCCDLL * (v61 >> 3);
      v76 = 2 * v75;
      if (2 * v75 <= v60)
        v76 = 0xCCCCCCCCCCCCCCCDLL * ((v103 - v59) >> 3);
      v77 = v75 >= 0x333333333333333 ? 0x666666666666666 : v76;
      if (v77 > 0x666666666666666)
LABEL_117:
        sub_20F45A4CC();
      v78 = (char *)operator new(40 * v77);
      *(_QWORD *)(a5 + 40) = v78;
      *(_QWORD *)(a5 + 48) = v78;
      *(_QWORD *)(a5 + 56) = &v78[40 * v77];
    }
    sub_20F45A028((char *)v9, v59, v103);
LABEL_87:
    sub_20E8AD1B8(a5 + 64, *(std::string **)(a1 + 64), *(__int128 **)(a1 + 72), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 3));
    sub_20E8AD1B8(a5 + 88, *(std::string **)(a1 + 88), *(__int128 **)(a1 + 96), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 3));
    sub_20E8AD1B8(a5 + 112, *(std::string **)(a1 + 112), *(__int128 **)(a1 + 120), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 120) - *(_QWORD *)(a1 + 112)) >> 3));
    sub_20E8AD1B8(a5 + 136, *(std::string **)(a1 + 136), *(__int128 **)(a1 + 144), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 144) - *(_QWORD *)(a1 + 136)) >> 3));
  }
  *(_QWORD *)(a5 + 160) = *(_QWORD *)(a1 + 160);
  if (a5 != a1)
  {
    *(_DWORD *)(a5 + 200) = *(_DWORD *)(a1 + 200);
    v82 = *(_QWORD **)(a1 + 184);
    v83 = *(_QWORD *)(a5 + 176);
    if (!v83)
      goto LABEL_97;
    for (j = 0; j != v83; ++j)
      *(_QWORD *)(*(_QWORD *)(a5 + 168) + 8 * j) = 0;
    v85 = *(_DWORD **)(a5 + 184);
    *(_QWORD *)(a5 + 184) = 0;
    *(_QWORD *)(a5 + 192) = 0;
    if (v85)
    {
      while (v82)
      {
        v86 = v82[2];
        v85[6] = *((_DWORD *)v82 + 6);
        *((_QWORD *)v85 + 2) = v86;
        v87 = v82[4];
        v85[10] = *((_DWORD *)v82 + 10);
        *((_QWORD *)v85 + 4) = v87;
        if (v85 != (_DWORD *)v82)
        {
          sub_20F45AA70((_QWORD *)v85 + 6, v82[6], v82[7], 0xCBEEA4E1A08AD8F3 * ((uint64_t)(v82[7] - v82[6]) >> 3));
          sub_20F45AA70((_QWORD *)v85 + 9, v82[9], v82[10], 0xCBEEA4E1A08AD8F3 * ((uint64_t)(v82[10] - v82[9]) >> 3));
        }
        v88 = *(_DWORD **)v85;
        sub_20F45A4E0(a5 + 168, (uint64_t)v85);
        v82 = (_QWORD *)*v82;
        v85 = v88;
        if (!v88)
          goto LABEL_97;
      }
      do
      {
        v98 = *(_DWORD **)v85;
        v99 = (void *)*((_QWORD *)v85 + 9);
        if (v99)
        {
          *((_QWORD *)v85 + 10) = v99;
          operator delete(v99);
        }
        v100 = (void *)*((_QWORD *)v85 + 6);
        if (v100)
        {
          *((_QWORD *)v85 + 7) = v100;
          operator delete(v100);
        }
        operator delete(v85);
        v85 = v98;
      }
      while (v98);
    }
    else
    {
LABEL_97:
      while (v82)
      {
        v89 = operator new(0x60uLL);
        v105[0] = v89;
        v105[1] = a5 + 184;
        v106 = 0;
        *v89 = 0;
        v89[1] = 0;
        *((_OWORD *)v89 + 1) = *((_OWORD *)v82 + 1);
        *((_OWORD *)v89 + 2) = *((_OWORD *)v82 + 2);
        v89[6] = 0;
        v89[7] = 0;
        v89[8] = 0;
        sub_20F45AFEC(v89 + 6, v82[6], v82[7], 0xCBEEA4E1A08AD8F3 * ((uint64_t)(v82[7] - v82[6]) >> 3));
        v89[9] = 0;
        v89[10] = 0;
        v89[11] = 0;
        sub_20F45AFEC(v89 + 9, v82[9], v82[10], 0xCBEEA4E1A08AD8F3 * ((uint64_t)(v82[10] - v82[9]) >> 3));
        v89[1] = *((unsigned int *)v89 + 6);
        sub_20F45A4E0(a5 + 168, (uint64_t)v89);
        v82 = (_QWORD *)*v82;
      }
    }
    sub_20F236478((char *)(a5 + 208), *(__int128 **)(a1 + 208), *(__int128 **)(a1 + 216), 0xCBEEA4E1A08AD8F3 * ((uint64_t)(*(_QWORD *)(a1 + 216) - *(_QWORD *)(a1 + 208)) >> 3));
    if ((a2 & 1) == 0)
    {
      sub_20F45DDE8(a5 + 232, *(_QWORD **)(a1 + 232), (_QWORD *)(a1 + 240));
      sub_20F45DDE8(a5 + 296, *(_QWORD **)(a1 + 296), (_QWORD *)(a1 + 304));
      v90 = *(_OWORD *)(a1 + 272);
      *(_OWORD *)(a5 + 256) = *(_OWORD *)(a1 + 256);
      *(_OWORD *)(a5 + 272) = v90;
      *(_QWORD *)(a5 + 288) = *(_QWORD *)(a1 + 288);
      v91 = *(_OWORD *)(a1 + 336);
      *(_OWORD *)(a5 + 320) = *(_OWORD *)(a1 + 320);
      *(_OWORD *)(a5 + 336) = v91;
      *(_QWORD *)(a5 + 352) = *(_QWORD *)(a1 + 352);
    }
    *(_DWORD *)(a5 + 392) = *(_DWORD *)(a1 + 392);
    v92 = *(_QWORD **)(a1 + 376);
    v93 = *(_QWORD *)(a5 + 368);
    if (!v93)
      goto LABEL_107;
    for (k = 0; k != v93; ++k)
      *(_QWORD *)(*(_QWORD *)(a5 + 360) + 8 * k) = 0;
    v95 = *(_QWORD **)(a5 + 376);
    *(_QWORD *)(a5 + 376) = 0;
    *(_QWORD *)(a5 + 384) = 0;
    if (v95)
    {
      while (v92)
      {
        v95[2] = v92[2];
        v95[3] = v92[3];
        v96 = (_QWORD *)*v95;
        sub_20F45E154(a5 + 360, v95);
        v92 = (_QWORD *)*v92;
        v95 = v96;
        if (!v96)
          goto LABEL_107;
      }
      do
      {
        v101 = (_QWORD *)*v95;
        operator delete(v95);
        v95 = v101;
      }
      while (v101);
    }
    else
    {
LABEL_107:
      while (v92)
      {
        v97 = operator new(0x20uLL);
        *(_QWORD *)v97 = 0;
        v97[1] = *((_OWORD *)v92 + 1);
        *((_QWORD *)v97 + 1) = *((_QWORD *)v97 + 2);
        sub_20F45E154(a5 + 360, v97);
        v92 = (_QWORD *)*v92;
      }
    }
  }
}

void sub_20F45457C()
{
  __break(1u);
}

void sub_20F4546B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E9545B0(v1);
  _Unwind_Resume(a1);
}

void sub_20F4546CC(_Unwind_Exception *a1)
{
  uint64_t v1;
  char *v2;
  void **v3;

  if (v2[39] < 0)
    operator delete(*v3);
  operator delete(v2);
  sub_20E9545B0(v1);
  _Unwind_Resume(a1);
}

void sub_20F4546F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  __cxa_end_catch();
  sub_20E9545B0(v1);
  _Unwind_Resume(a1);
}

void sub_20F454708(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E9545B0(v1);
  _Unwind_Resume(a1);
}

void sub_20F45471C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  operator delete(v2);
  sub_20E9545B0(v1);
  _Unwind_Resume(a1);
}

void sub_20F454738(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E9545B0(v1);
  _Unwind_Resume(a1);
}

void sub_20F45474C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  sub_20F45AF90((uint64_t)va);
  sub_20E9545B0(v8);
  _Unwind_Resume(a1);
}

void sub_20F454780()
{
  _QWORD *v0;
  void **v1;
  void **v2;
  void *v3;
  void *v4;

  v3 = *v2;
  if (*v2)
  {
    v0[10] = v3;
    operator delete(v3);
  }
  v4 = *v1;
  if (*v1)
  {
    v0[7] = v4;
    operator delete(v4);
  }
  operator delete(v0);
  JUMPOUT(0x20F4547ACLL);
}

void sub_20F4547BC(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t *v13;
  unsigned int v14;
  uint64_t **v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  uint64_t *v33;
  uint64_t **v34;
  uint64_t **v35;
  unint64_t v36;
  unsigned int v37;
  unint64_t v38;
  unsigned int v39;
  _OWORD *v40;
  uint64_t **v42;
  uint64_t *v43;
  uint64_t v44;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v43 = 0;
  v44 = 0;
  v42 = &v43;
  v5 = *(uint64_t **)(a1 + 16);
  if (!v5)
    goto LABEL_2;
  while (2)
  {
    if (!*((_BYTE *)v5 + 320))
      goto LABEL_50;
    v33 = v43;
    v34 = &v43;
    v35 = &v43;
    if (!v43)
      goto LABEL_63;
    v36 = v5[5];
    v37 = *((_DWORD *)v5 + 12);
    do
    {
      while (1)
      {
        v35 = (uint64_t **)v33;
        v38 = v33[4];
        if (v36 < v38)
          goto LABEL_54;
        if (v36 != v38)
          break;
        v39 = *((_DWORD *)v35 + 10);
        if (v37 >= v39)
        {
          if (v39 >= v37)
            goto LABEL_50;
          goto LABEL_61;
        }
LABEL_54:
        v33 = *v35;
        v34 = v35;
        if (!*v35)
          goto LABEL_63;
      }
      if (v38 >= v36)
        goto LABEL_50;
LABEL_61:
      v33 = v35[1];
    }
    while (v33);
    v34 = v35 + 1;
LABEL_63:
    v40 = operator new(0x30uLL);
    v40[2] = *(_OWORD *)(v5 + 5);
    *(_QWORD *)v40 = 0;
    *((_QWORD *)v40 + 1) = 0;
    *((_QWORD *)v40 + 2) = v35;
    *v34 = (uint64_t *)v40;
    if (*v42)
    {
      v42 = (uint64_t **)*v42;
      v40 = *v34;
    }
    sub_20E868578(v43, (uint64_t *)v40);
    ++v44;
LABEL_50:
    v5 = (uint64_t *)*v5;
    if (v5)
      continue;
    break;
  }
LABEL_2:
  v6 = **(_QWORD **)(a1 + 424);
  v7 = *(_QWORD **)(v6 + 48);
  v8 = (_QWORD *)(v6 + 56);
  if (v7 != (_QWORD *)(v6 + 56))
  {
    do
    {
      v10 = v7 + 4;
      v9 = v7[4];
      v11 = v9 != *(_QWORD *)(a1 + 160) && a2 == 0;
      if (!v11 && !sub_20F29DB88(*(_QWORD ***)(a1 + 424), v9, v7[5]))
        goto LABEL_36;
      v12 = v43;
      if (v43)
      {
        v13 = (uint64_t *)v7[4];
        v14 = *((_DWORD *)v7 + 10);
        v15 = &v43;
        do
        {
          v16 = v12[4];
          if (v16 < (unint64_t)v13)
          {
            ++v12;
          }
          else if ((uint64_t *)v16 == v13)
          {
            if (*((_DWORD *)v12 + 10) < v14)
              ++v12;
            else
              v15 = (uint64_t **)v12;
          }
          else
          {
            v15 = (uint64_t **)v12;
          }
          v12 = (uint64_t *)*v12;
        }
        while (v12);
        if (v15 != &v43)
        {
          v17 = v15[4];
          if (v13 >= v17 && (v13 != v17 || v14 >= *((_DWORD *)v15 + 10)))
            goto LABEL_36;
        }
      }
      v19 = (_DWORD *)a3[1];
      v18 = a3[2];
      if ((unint64_t)v19 >= v18)
      {
        v21 = (_DWORD *)*a3;
        v22 = ((uint64_t)v19 - *a3) >> 4;
        v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 60)
          sub_20E867F44();
        v24 = v18 - (_QWORD)v21;
        if (v24 >> 3 > v23)
          v23 = v24 >> 3;
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0)
          v25 = 0xFFFFFFFFFFFFFFFLL;
        else
          v25 = v23;
        if (v25)
        {
          if (v25 >> 60)
            sub_20E877A38();
          v26 = (char *)operator new(16 * v25);
          v27 = &v26[16 * v22];
          *(_OWORD *)v27 = *v10;
          v28 = (uint64_t)v27;
          if (v19 != v21)
          {
            do
            {
LABEL_46:
              v31 = *((_QWORD *)v19 - 2);
              v19 -= 4;
              v32 = v19[2];
              *(_QWORD *)(v28 - 16) = v31;
              v28 -= 16;
              *(_DWORD *)(v28 + 8) = v32;
            }
            while (v19 != v21);
            v19 = (_DWORD *)*a3;
            v20 = v27 + 16;
            *a3 = v28;
            a3[1] = (uint64_t)(v27 + 16);
            a3[2] = (uint64_t)&v26[16 * v25];
            if (!v19)
              goto LABEL_35;
LABEL_34:
            operator delete(v19);
            goto LABEL_35;
          }
        }
        else
        {
          v26 = 0;
          v27 = (char *)(16 * v22);
          *(_OWORD *)(16 * v22) = *v10;
          v28 = 16 * v22;
          if (v19 != v21)
            goto LABEL_46;
        }
        v20 = v27 + 16;
        *a3 = v28;
        a3[1] = (uint64_t)(v27 + 16);
        a3[2] = (uint64_t)&v26[16 * v25];
        if (v19)
          goto LABEL_34;
      }
      else
      {
        *(_OWORD *)v19 = *v10;
        v20 = v19 + 4;
      }
LABEL_35:
      a3[1] = (uint64_t)v20;
LABEL_36:
      v29 = (_QWORD *)v7[1];
      if (v29)
      {
        do
        {
          v30 = v29;
          v29 = (_QWORD *)*v29;
        }
        while (v29);
      }
      else
      {
        do
        {
          v30 = (_QWORD *)v7[2];
          v11 = *v30 == (_QWORD)v7;
          v7 = v30;
        }
        while (!v11);
      }
      v7 = v30;
    }
    while (v30 != v8);
  }
  sub_20E86872C((uint64_t)&v42, v43);
}

void sub_20F454B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  uint64_t v11;
  void *v13;

  sub_20E86872C((uint64_t)&a10, a11);
  v13 = *(void **)v11;
  if (*(_QWORD *)v11)
  {
    *(_QWORD *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(a1);
}

void sub_20F454B34(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  unint64_t v23;
  unsigned int v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v38;
  uint64_t v39;
  _OWORD *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46[29];
  __int128 v47[29];
  int v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;

  if (!*(_QWORD *)(a1 + 424)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingTypes/src/MapDataUtil.cpp", 1011, (uint64_t)"ref_map_data.viodatabase()", 26, (uint64_t)"Map Data must have a viodatabase", 32, (void (*)(void **))sub_21023DDB0)|| !*(_QWORD *)(a2 + 424)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingTypes/src/MapDataUtil.cpp", 1012, (uint64_t)"query_map_data.viodatabase()", 28, (uint64_t)"Map Data must have a viodatabase", 32, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v52 = 0uLL;
  v53 = 0;
  v12 = **(_QWORD **)(a1 + 424);
  v13 = *(_QWORD *)(a3 + 24);
  v14 = *(_DWORD *)(a3 + 32);
  v17 = *(uint64_t **)(v12 + 56);
  v15 = (uint64_t *)(v12 + 56);
  v16 = v17;
  if (v17)
  {
    v18 = v15;
    do
    {
      v19 = v16[4];
      if (v19 < v13)
      {
        ++v16;
      }
      else if (v19 == v13)
      {
        if (*((_DWORD *)v16 + 10) < v14)
          ++v16;
        else
          v18 = v16;
      }
      else
      {
        v18 = v16;
      }
      v16 = (uint64_t *)*v16;
    }
    while (v16);
    if (v18 != v15)
    {
      v20 = v18[4];
      if (v13 >= v20 && (v13 != v20 || *((_DWORD *)v18 + 10) <= v14))
      {
        v16 = (uint64_t *)v18[6];
        v21 = (_QWORD *)(**(_QWORD **)(a2 + 424) + 56);
        v22 = (uint64_t *)*v21;
        if (!*v21)
          goto LABEL_54;
        goto LABEL_19;
      }
    }
    v16 = 0;
  }
  v21 = (_QWORD *)(**(_QWORD **)(a2 + 424) + 56);
  v22 = (uint64_t *)*v21;
  if (!*v21)
  {
LABEL_54:
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
    return;
  }
LABEL_19:
  v23 = *(_QWORD *)a3;
  v24 = *(_DWORD *)(a3 + 8);
  v25 = v21;
  do
  {
    v26 = v22[4];
    if (v26 < v23)
    {
      ++v22;
    }
    else if (v26 == v23)
    {
      if (*((_DWORD *)v22 + 10) < v24)
        ++v22;
      else
        v25 = v22;
    }
    else
    {
      v25 = v22;
    }
    v22 = (uint64_t *)*v22;
  }
  while (v22);
  if (v25 == v21)
    goto LABEL_54;
  v27 = v25[4];
  if (v23 < v27 || v23 == v27 && *((_DWORD *)v25 + 10) > v24)
    goto LABEL_54;
  if (!v16 || !v25[6])
    goto LABEL_54;
  v28 = *a4;
  v29 = a4[1];
  v30 = *a4;
  if (*a4 != v29)
  {
    v30 = *a4;
    while (*(_QWORD *)v30 != v13 || *(_DWORD *)(v30 + 8) != v14)
    {
      v30 += 16;
      if (v30 == v29)
      {
        v30 = a4[1];
        break;
      }
    }
  }
  if (v30 != v29)
    goto LABEL_54;
  v31 = *a5;
  v32 = a5[1];
  if (*a5 != v32)
  {
    while (*(_QWORD *)v31 != v13 || *(_DWORD *)(v31 + 8) != v14)
    {
      v31 += 16;
      if (v31 == v32)
      {
        v31 = a5[1];
        break;
      }
    }
  }
  if (v31 != v32)
    goto LABEL_54;
  if (v28 != v29)
  {
    while (*(_QWORD *)v28 != v23 || *(_DWORD *)(v28 + 8) != v24)
    {
      v28 += 16;
      if (v28 == v29)
      {
        v28 = a4[1];
        break;
      }
    }
  }
  if (v28 == v29)
  {
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
    v40 = operator new(0x1D8uLL);
    *a6 = v40;
    a6[2] = (char *)v40 + 472;
    v41 = *(_OWORD *)(a3 + 16);
    *v40 = *(_OWORD *)a3;
    v40[1] = v41;
    *(_OWORD *)((char *)v40 + 28) = *(_OWORD *)(a3 + 28);
    v42 = *(_OWORD *)(a3 + 128);
    v40[7] = *(_OWORD *)(a3 + 112);
    v40[8] = v42;
    v43 = *(_OWORD *)(a3 + 160);
    v40[9] = *(_OWORD *)(a3 + 144);
    v40[10] = v43;
    v44 = *(_OWORD *)(a3 + 64);
    v40[3] = *(_OWORD *)(a3 + 48);
    v40[4] = v44;
    v45 = *(_OWORD *)(a3 + 96);
    v40[5] = *(_OWORD *)(a3 + 80);
    v40[6] = v45;
    memcpy(v40 + 11, (const void *)(a3 + 176), 0x125uLL);
    a6[1] = (char *)v40 + 472;
    return;
  }
  if (sub_20F7C1F78(a3) == 1)
    goto LABEL_54;
  v51 = *(_OWORD *)a3;
  sub_20F7C5800((_QWORD *)(a2 + 168), (uint64_t *)&v51, a4, &v49);
  v33 = v49;
  v34 = v50;
  if (v49 == v50)
  {
    v35 = 0;
    v36 = 0uLL;
  }
  else
  {
    do
    {
      if (*(_DWORD *)(v33 + 8) == -1 || *(_DWORD *)(v33 + 4) == -1)
      {
        v38 = *a5;
        v39 = a5[1];
        if (*a5 != v39)
        {
          while (*(_QWORD *)v38 != *(_QWORD *)(v33 + 16) || *(_DWORD *)(v38 + 8) != *(_DWORD *)(v33 + 24))
          {
            v38 += 16;
            if (v38 == v39)
            {
              v38 = a5[1];
              break;
            }
          }
        }
        if (v38 == v39)
        {
          sub_20F7C1FEC(v33, &v51, (uint64_t)v46);
          sub_20F7CA674(a3, v46, (uint64_t)v47);
          v48 = *(_DWORD *)(a3 + 464);
          sub_20F269ED8((char **)&v52, v47);
        }
      }
      v33 += 472;
    }
    while (v33 != v34);
    v36 = v52;
    v35 = v53;
    v33 = v49;
  }
  *(_OWORD *)a6 = v36;
  a6[2] = v35;
  v53 = 0;
  v52 = 0uLL;
  if (v33)
  {
    v50 = v33;
    operator delete((void *)v33);
    if ((_QWORD)v52)
    {
      *((_QWORD *)&v52 + 1) = v52;
      operator delete((void *)v52);
    }
  }
}

void sub_20F454FBC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 96);
  if (!v3)
    _Unwind_Resume(exception_object);
  *(_QWORD *)(v1 - 88) = v3;
  operator delete(v3);
  _Unwind_Resume(exception_object);
}

void sub_20F45500C(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, double a5)
{
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  void **v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  void **v27;
  void **v28;
  unint64_t v29;
  void *v30;
  void *v31;
  char *v32;
  char *v33;
  unint64_t v34;
  uint8x8_t v35;
  unint64_t v36;
  uint64_t **v37;
  uint64_t *v38;
  unint64_t v39;
  unint64_t v41;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  unint64_t v47;
  uint8x8_t v48;
  unint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  unint64_t v62;
  uint8x8_t v63;
  unint64_t v64;
  uint64_t **v65;
  uint64_t *v66;
  uint64_t v67;
  unint64_t v69;
  unint64_t v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  int8x8_t *v79;
  unint64_t v80;
  unint64_t v81;
  int8x8_t v82;
  unint64_t v83;
  uint8x8_t v84;
  unint64_t v85;
  uint64_t **v86;
  uint64_t *v87;
  uint64_t v88;
  unint64_t v90;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  int v108;
  uint8x8_t v109;
  unint64_t v110;
  uint64_t **v111;
  uint64_t *v112;
  unint64_t v114;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t *v121;
  unint64_t v122;
  uint8x8_t v123;
  unint64_t v124;
  uint64_t **v125;
  uint64_t *v126;
  uint64_t v127;
  unint64_t v129;
  unint64_t v131;
  char *v132;
  char *v133;
  char *v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  char *v139;
  char *v140;
  char *v141;
  uint64_t v142;
  int v143;
  char *v144;
  char *v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  unsigned int v153;
  double v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  void *v164;
  uint64_t *v165;
  uint64_t *v166;
  char *v167;
  unint64_t v168;
  uint64_t *v169;
  int v170;
  _QWORD *v171;
  uint64_t v172;
  _QWORD *v173;
  uint64_t v174;
  unint64_t *v175;
  void *v176[2];
  void *__p[2];
  int v178;
  void *v179[2];
  __int128 v180;
  unsigned __int128 v181;
  char *v182;
  char *v183;
  char *v184;
  __int128 v185;

  v9 = a1;
  v182 = 0;
  v183 = 0;
  v184 = 0;
  v180 = 0u;
  v181 = 0u;
  *(_OWORD *)v179 = 0u;
  *(_OWORD *)v176 = 0u;
  *(_OWORD *)__p = 0u;
  v178 = 1065353216;
  v10 = a1[1];
  v11 = *(_QWORD *)a2;
  v12 = *(_DWORD *)(a2 + 8);
  sub_20F456CAC(*a1, v10, *(_QWORD *)a2, v12);
  if (v13)
  {
    v14 = *a4;
    v15 = a4[1];
    if (*a4 != v15)
    {
      v174 = a2;
      v16 = 0;
      while (1)
      {
        while (1)
        {
          *(_BYTE *)(v14 + 24) = 0;
          if (*(double *)(v14 + 16) > a5)
            *(_QWORD *)(v14 + 16) = 0x7FEFFFFFFFFFFFFFLL;
          if (v11 == *(_QWORD *)v14)
            break;
          v17 = *(_DWORD *)(v14 + 8);
LABEL_5:
          sub_20F456CAC(*v9, v10, *(_QWORD *)v14, v17);
          if (v18)
            ++v16;
          v14 += 32;
          if (v14 == v15)
          {
LABEL_13:
            if (!v16)
              goto LABEL_15;
            *(_QWORD *)&v185 = *(_QWORD *)v174;
            DWORD2(v185) = *(_DWORD *)(v174 + 8);
            sub_20F45E9D0(v179);
            v19 = *((_QWORD *)&v181 + 1);
            v20 = v181;
            v21 = (void **)v179[1];
            v22 = *((_QWORD *)v179[1] + ((_QWORD)v181 + *((_QWORD *)&v181 + 1)) / 0xAAuLL)
                + 24 * (((_QWORD)v181 + *((_QWORD *)&v181 + 1)) % 0xAAuLL);
            *(_OWORD *)v22 = v185;
            *(_DWORD *)(v22 + 16) = 0;
            *(_BYTE *)(v22 + 20) = 1;
            v23 = v19 + 1;
            *((_QWORD *)&v181 + 1) = v19 + 1;
            if (v19 == -1)
              goto LABEL_15;
            v165 = a4;
            v166 = v9;
            while (2)
            {
              v32 = (char *)v21[v20 / 0xAA];
              v33 = &v32[24 * (v20 % 0xAA)];
              v34 = *((unsigned int *)v33 + 2);
              if (v176[1])
              {
                v35 = (uint8x8_t)vcnt_s8((int8x8_t)v176[1]);
                v35.i16[0] = vaddlv_u8(v35);
                if (v35.u32[0] > 1uLL)
                {
                  v36 = *((unsigned int *)v33 + 2);
                  if (v176[1] <= (void *)v34)
                    v36 = v34 % (unint64_t)v176[1];
                }
                else
                {
                  v36 = (LODWORD(v176[1]) - 1) & v34;
                }
                v37 = (uint64_t **)*((_QWORD *)v176[0] + v36);
                if (v37)
                {
                  v38 = *v37;
                  if (v38)
                  {
                    v39 = *(_QWORD *)v33;
                    if (v35.u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        v43 = v38[1];
                        if (v43 == v34)
                        {
                          if (v38[2] == v39 && *((_DWORD *)v38 + 6) == (_DWORD)v34)
                            goto LABEL_319;
                        }
                        else if ((v43 & ((unint64_t)v176[1] - 1)) != v36)
                        {
                          goto LABEL_56;
                        }
                        v38 = (uint64_t *)*v38;
                        if (!v38)
                          goto LABEL_56;
                      }
                    }
                    do
                    {
                      v41 = v38[1];
                      if (v41 == v34)
                      {
                        if (v38[2] == v39 && *((_DWORD *)v38 + 6) == (_DWORD)v34)
                        {
LABEL_319:
                          --v23;
                          *(_QWORD *)&v181 = ++v20;
                          *((_QWORD *)&v181 + 1) = v23;
                          if (v20 < 0x154)
                            goto LABEL_317;
LABEL_316:
                          v164 = *v21++;
                          operator delete(v164);
                          v20 -= 170;
                          v179[1] = v21;
                          *(_QWORD *)&v181 = v20;
                          goto LABEL_317;
                        }
                      }
                      else
                      {
                        if ((void *)v41 >= v176[1])
                          v41 %= (unint64_t)v176[1];
                        if (v41 != v36)
                          break;
                      }
                      v38 = (uint64_t *)*v38;
                    }
                    while (v38);
                  }
                }
              }
LABEL_56:
              v168 = v20 % 0xAA;
              v169 = (uint64_t *)&v32[24 * (v20 % 0xAA)];
              v170 = v16;
              v44 = *v9;
              v45 = v9[1];
              v175 = (unint64_t *)sub_20F456CAC(v44, v45, *(_QWORD *)v33, v34);
              if (!v46)
              {
                --v23;
                *(_QWORD *)&v181 = ++v20;
                *((_QWORD *)&v181 + 1) = v23;
                v9 = v166;
                if (v20 < 0x154)
                  goto LABEL_317;
                goto LABEL_316;
              }
              v167 = v32;
              if (v45)
              {
                v47 = *v175;
                v48 = (uint8x8_t)vcnt_s8((int8x8_t)v45);
                v48.i16[0] = vaddlv_u8(v48);
                if (v48.u32[0] > 1uLL)
                {
                  v49 = *v175;
                  if (v47 >= v45)
                    v49 = v47 % v45;
                }
                else
                {
                  v49 = v47 & (v45 - 1);
                }
                v50 = *(_QWORD **)(v44 + 8 * v49);
                if (v50)
                {
                  v51 = (_QWORD *)*v50;
                  if (*v50)
                  {
                    if (v48.u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        v53 = v51[1];
                        if (v47 == v53)
                        {
                          if (v51[2] == v47)
                            goto LABEL_79;
                        }
                        else if ((v53 & (v45 - 1)) != v49)
                        {
                          goto LABEL_80;
                        }
                        v51 = (_QWORD *)*v51;
                        if (!v51)
                          goto LABEL_80;
                      }
                    }
                    do
                    {
                      v52 = v51[1];
                      if (v47 == v52)
                      {
                        if (v51[2] == v47)
                        {
LABEL_79:
                          v173 = v51;
                          goto LABEL_81;
                        }
                      }
                      else
                      {
                        if (v52 >= v45)
                          v52 %= v45;
                        if (v52 != v49)
                          break;
                      }
                      v51 = (_QWORD *)*v51;
                    }
                    while (v51);
                  }
                }
              }
LABEL_80:
              v173 = 0;
LABEL_81:
              v54 = v175 + 2;
              v55 = v175[3] - v175[2];
              v56 = v175[6] - v175[5];
              v57 = v182;
              v183 = v182;
              v58 = 0xCBEEA4E1A08AD8F3 * (v55 >> 3) - 0x34115B1E5F75270DLL * (v56 >> 3);
              if (v58 > (v184 - v182) >> 4)
              {
                if (v58 >> 60)
                  goto LABEL_321;
                v182 = (char *)operator new(16 * v58);
                v183 = v182;
                v184 = &v182[16 * v58];
                if (v57)
                  operator delete(v57);
              }
              v172 = 0;
              while (2)
              {
                v60 = *v54;
                v59 = v54[1];
                v171 = v54;
LABEL_91:
                if (v60 != v59)
                {
                  v62 = *(unsigned int *)(v60 + 24);
                  if (!v176[1])
                    goto LABEL_118;
                  v63 = (uint8x8_t)vcnt_s8((int8x8_t)v176[1]);
                  v63.i16[0] = vaddlv_u8(v63);
                  if (v63.u32[0] > 1uLL)
                  {
                    v64 = *(unsigned int *)(v60 + 24);
                    if (v176[1] <= (void *)v62)
                      v64 = v62 % (unint64_t)v176[1];
                  }
                  else
                  {
                    v64 = (LODWORD(v176[1]) - 1) & v62;
                  }
                  v65 = (uint64_t **)*((_QWORD *)v176[0] + v64);
                  if (!v65 || (v66 = *v65) == 0)
                  {
LABEL_118:
                    v72 = *(_QWORD *)(v60 + 16);
                    v73 = *(_DWORD *)(v60 + 28);
                    v75 = *a3;
                    v74 = a3[1];
                    if (*a3 == v74)
                      goto LABEL_124;
                    while (*(_QWORD *)v75 != v72 || *(_DWORD *)(v75 + 8) != (_DWORD)v62)
                    {
                      v75 += 16;
                      if (v75 == v74)
                        goto LABEL_124;
                    }
                    if (v75 == v74)
                    {
LABEL_124:
                      v77 = v182;
                      v76 = v183;
                      v78 = v182;
                      if (v182 == v183)
                        goto LABEL_176;
                      goto LABEL_125;
                    }
                    v79 = (int8x8_t *)v173[3];
                    v80 = *v175;
                    v81 = v175[1];
                    *(_QWORD *)&v185 = *(_QWORD *)(v60 + 16);
                    *((_QWORD *)&v185 + 1) = __PAIR64__(v73, v62);
                    sub_20F28FE1C((uint64_t)v176, (uint64_t *)&v185, &v185);
                    v82 = v79[22];
                    if (!*(_QWORD *)&v82)
                      goto LABEL_90;
                    v83 = DWORD2(v185);
LABEL_133:
                    v84 = (uint8x8_t)vcnt_s8(v82);
                    v84.i16[0] = vaddlv_u8(v84);
                    if (v84.u32[0] > 1uLL)
                    {
                      v85 = v83;
                      if (*(_QWORD *)&v82 <= v83)
                        v85 = v83 % *(_QWORD *)&v82;
                    }
                    else
                    {
                      v85 = (*(_QWORD *)&v82 + 0xFFFFFFFFLL) & v83;
                    }
                    v86 = *(uint64_t ***)(*(_QWORD *)&v79[21] + 8 * v85);
                    if (!v86)
                      goto LABEL_90;
                    v87 = *v86;
                    if (!v87)
                      goto LABEL_90;
                    if (v84.u32[0] < 2uLL)
                    {
                      v88 = *(_QWORD *)&v82 - 1;
                      while (1)
                      {
                        v92 = v87[1];
                        if (v92 == v83)
                        {
                          if (v87[2] == (_QWORD)v185 && *((_DWORD *)v87 + 6) == v83)
                            goto LABEL_159;
                        }
                        else if ((v92 & v88) != v85)
                        {
                          goto LABEL_90;
                        }
                        v87 = (uint64_t *)*v87;
                        if (!v87)
                          goto LABEL_90;
                      }
                    }
                    while (1)
                    {
                      v90 = v87[1];
                      if (v90 == v83)
                      {
                        if (v87[2] == (_QWORD)v185 && *((_DWORD *)v87 + 6) == v83)
                        {
LABEL_159:
                          v93 = &v87[3 * v172];
                          v96 = v93[6];
                          v95 = v93 + 6;
                          v94 = v96;
                          v97 = 0xCBEEA4E1A08AD8F3 * ((v95[1] - v96) >> 3);
                          if (v97 >= 3)
                          {
                            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingTypes/src/MapDataUtil.cpp", 1654, (uint64_t)"edges.size() <= 2", 17, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                            {
                              abort();
                            }
                            v94 = *v95;
                            v97 = 0xCBEEA4E1A08AD8F3 * ((v95[1] - *v95) >> 3);
                          }
                          if (v97 < 2)
                            goto LABEL_90;
                          if (*(_QWORD *)(v94 + 16) == v80)
                            v94 += 472 * (*(_DWORD *)(v94 + 24) == (_DWORD)v81);
                          v98 = *a3;
                          v99 = a3[1];
                          if (*a3 != v99)
                          {
                            while (*(_QWORD *)v98 != *(_QWORD *)(v94 + 16)
                                 || *(_DWORD *)(v98 + 8) != *(_DWORD *)(v94 + 24))
                            {
                              v98 += 16;
                              if (v98 == v99)
                              {
                                v98 = a3[1];
                                break;
                              }
                            }
                          }
                          if (v98 == v99)
                          {
                            v72 = *(_QWORD *)(v94 + 16);
                            v62 = *(unsigned int *)(v94 + 24);
                            if (v176[1])
                            {
                              v109 = (uint8x8_t)vcnt_s8((int8x8_t)v176[1]);
                              v109.i16[0] = vaddlv_u8(v109);
                              if (v109.u32[0] > 1uLL)
                              {
                                v110 = *(unsigned int *)(v94 + 24);
                                if (v176[1] <= (void *)v62)
                                  v110 = v62 % (unint64_t)v176[1];
                              }
                              else
                              {
                                v110 = (LODWORD(v176[1]) - 1) & v62;
                              }
                              v111 = (uint64_t **)*((_QWORD *)v176[0] + v110);
                              if (v111)
                              {
                                v112 = *v111;
                                if (v112)
                                {
                                  if (v109.u32[0] < 2uLL)
                                  {
                                    while (1)
                                    {
                                      v116 = v112[1];
                                      if (v116 == v62)
                                      {
                                        if (v112[2] == v72 && *((_DWORD *)v112 + 6) == (_DWORD)v62)
                                          goto LABEL_90;
                                      }
                                      else if ((v116 & ((unint64_t)v176[1] - 1)) != v110)
                                      {
                                        goto LABEL_219;
                                      }
                                      v112 = (uint64_t *)*v112;
                                      if (!v112)
                                        goto LABEL_219;
                                    }
                                  }
                                  do
                                  {
                                    v114 = v112[1];
                                    if (v114 == v62)
                                    {
                                      if (v112[2] == v72 && *((_DWORD *)v112 + 6) == (_DWORD)v62)
                                        goto LABEL_90;
                                    }
                                    else
                                    {
                                      if ((void *)v114 >= v176[1])
                                        v114 %= (unint64_t)v176[1];
                                      if (v114 != v110)
                                        break;
                                    }
                                    v112 = (uint64_t *)*v112;
                                  }
                                  while (v112);
                                }
                              }
                            }
LABEL_219:
                            v77 = v182;
                            v76 = v183;
                            v78 = v182;
                            if (v182 == v183)
                            {
LABEL_176:
                              if (v78 != v76)
                                goto LABEL_90;
                              if (v76 < v184)
                              {
                                *(_QWORD *)v76 = v72;
                                v61 = v76 + 16;
                                *((_DWORD *)v76 + 2) = v62;
                                *((_DWORD *)v76 + 3) = v73;
                                goto LABEL_89;
                              }
                              v100 = (v76 - v77) >> 4;
                              v101 = v100 + 1;
                              if (!((unint64_t)(v100 + 1) >> 60))
                              {
                                v102 = v184 - v77;
                                if ((v184 - v77) >> 3 > v101)
                                  v101 = v102 >> 3;
                                if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFF0)
                                  v103 = 0xFFFFFFFFFFFFFFFLL;
                                else
                                  v103 = v101;
                                if (!v103)
                                {
                                  v104 = 0;
                                  v105 = 16 * v100;
                                  *(_QWORD *)v105 = v72;
                                  *(_DWORD *)(v105 + 8) = v62;
                                  *(_DWORD *)(v105 + 12) = v73;
                                  v106 = (char *)(16 * v100);
                                  if (v77 != v76)
                                    goto LABEL_190;
LABEL_187:
                                  v61 = (char *)(v105 + 16);
                                  v182 = v106;
                                  v183 = (char *)(v105 + 16);
                                  v184 = &v104[16 * v103];
                                  if (v77)
LABEL_192:
                                    operator delete(v77);
LABEL_89:
                                  v183 = v61;
                                  goto LABEL_90;
                                }
                                if (!(v103 >> 60))
                                {
                                  v104 = (char *)operator new(16 * v103);
                                  v105 = (uint64_t)&v104[16 * v100];
                                  *(_QWORD *)v105 = v72;
                                  *(_DWORD *)(v105 + 8) = v62;
                                  *(_DWORD *)(v105 + 12) = v73;
                                  v106 = (char *)v105;
                                  if (v77 == v76)
                                    goto LABEL_187;
                                  do
                                  {
LABEL_190:
                                    v107 = *((_QWORD *)v76 - 2);
                                    v76 -= 16;
                                    v108 = *((_DWORD *)v76 + 2);
                                    *((_QWORD *)v106 - 2) = v107;
                                    v106 -= 16;
                                    *((_DWORD *)v106 + 2) = v108;
                                  }
                                  while (v76 != v77);
                                  v77 = v182;
                                  v61 = (char *)(v105 + 16);
                                  v182 = v106;
                                  v183 = (char *)(v105 + 16);
                                  v184 = &v104[16 * v103];
                                  if (v77)
                                    goto LABEL_192;
                                  goto LABEL_89;
                                }
LABEL_322:
                                sub_20E877A38();
                              }
LABEL_321:
                              sub_20E867F44();
                            }
LABEL_125:
                            v78 = v77;
                            while (*(_QWORD *)v78 != v72 || *((_DWORD *)v78 + 2) != (_DWORD)v62)
                            {
                              v78 += 16;
                              if (v78 == v76)
                              {
                                v78 = v76;
                                goto LABEL_176;
                              }
                            }
                            goto LABEL_176;
                          }
                          v80 = v185;
                          LODWORD(v81) = DWORD2(v185);
                          *(_QWORD *)&v185 = *(_QWORD *)(v94 + 16);
                          DWORD2(v185) = *(_DWORD *)(v94 + 24);
                          sub_20F28FE1C((uint64_t)v176, (uint64_t *)&v185, &v185);
                          v83 = DWORD2(v185);
                          v82 = v79[22];
                          if (!*(_QWORD *)&v82)
                            goto LABEL_90;
                          goto LABEL_133;
                        }
                      }
                      else
                      {
                        if (v90 >= *(_QWORD *)&v82)
                          v90 %= *(_QWORD *)&v82;
                        if (v90 != v85)
                          goto LABEL_90;
                      }
                      v87 = (uint64_t *)*v87;
                      if (!v87)
                        goto LABEL_90;
                    }
                  }
                  v67 = *(_QWORD *)(v60 + 16);
                  if (v63.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      v71 = v66[1];
                      if (v71 == v62)
                      {
                        if (v66[2] == v67 && *((_DWORD *)v66 + 6) == (_DWORD)v62)
                          goto LABEL_90;
                      }
                      else if ((v71 & ((unint64_t)v176[1] - 1)) != v64)
                      {
                        goto LABEL_118;
                      }
                      v66 = (uint64_t *)*v66;
                      if (!v66)
                        goto LABEL_118;
                    }
                  }
                  while (1)
                  {
                    v69 = v66[1];
                    if (v69 == v62)
                    {
                      if (v66[2] == v67 && *((_DWORD *)v66 + 6) == (_DWORD)v62)
                      {
LABEL_90:
                        v60 += 472;
                        goto LABEL_91;
                      }
                    }
                    else
                    {
                      if ((void *)v69 >= v176[1])
                        v69 %= (unint64_t)v176[1];
                      if (v69 != v64)
                        goto LABEL_118;
                    }
                    v66 = (uint64_t *)*v66;
                    if (!v66)
                      goto LABEL_118;
                  }
                }
                ++v172;
                v54 = v171 + 3;
                if (v171 + 3 != v175 + 8)
                  continue;
                break;
              }
              v117 = v173[3];
              v118 = *(_QWORD *)(v117 + 208);
              v119 = *(_QWORD *)(v117 + 216);
LABEL_225:
              if (v118 == v119)
              {
                sub_20F28FE1C((uint64_t)v176, v169, v169);
                v144 = v182;
                v145 = v183;
                v9 = v166;
                if (v182 == v183)
                {
                  v16 = v170;
LABEL_315:
                  v21 = (void **)v179[1];
                  v23 = *((_QWORD *)&v181 + 1) - 1;
                  v20 = v181 + 1;
                  v181 = __PAIR128__(*((unint64_t *)&v181 + 1), (uint64_t)v181 + 1) + __PAIR128__(-1, 0);
                  if (v20 >= 0x154)
                    goto LABEL_316;
LABEL_317:
                  if (!v23)
                    goto LABEL_15;
                  continue;
                }
                v16 = v170;
                while (2)
                {
                  if (!v167[24 * v168 + 20])
                    sub_20E866B34();
                  v147 = *v165;
                  v148 = v165[1];
                  if (v148 != *v165)
                  {
                    v149 = (v148 - *v165) >> 5;
                    v150 = *(_QWORD *)v144;
                    do
                    {
                      v151 = v149 >> 1;
                      v152 = v147 + 32 * (v149 >> 1);
                      if (*(_QWORD *)v152 < v150
                        || *(_QWORD *)v152 == v150 && *(_DWORD *)(v152 + 8) < *((_DWORD *)v144 + 2))
                      {
                        v147 = v152 + 32;
                        v151 = v149 + ~v151;
                      }
                      v149 = v151;
                    }
                    while (v151);
                  }
                  v153 = *(_DWORD *)&v167[24 * v168 + 16] + 1;
                  if (v147 != v148
                    && *(_QWORD *)v147 == *(_QWORD *)v144
                    && *(_DWORD *)(v147 + 8) == *((_DWORD *)v144 + 2))
                  {
                    v154 = (double)v153;
                    if (*(double *)(v147 + 16) > (double)v153)
                      *(double *)(v147 + 16) = v154;
                    if (!*(_BYTE *)(v147 + 24))
                    {
                      *(_BYTE *)(v147 + 24) = 1;
                      if (!--v16)
                        goto LABEL_15;
                    }
                  }
                  else
                  {
                    v154 = (double)v153;
                  }
                  if (v154 < a5)
                  {
                    v155 = v179[1];
                    if ((void *)v180 == v179[1])
                    {
                      v158 = *((_QWORD *)&v181 + 1);
                      v159 = *((_QWORD *)&v181 + 1) + v181;
                      goto LABEL_309;
                    }
                    v156 = *((_QWORD *)v179[1] + (unint64_t)v181 / 0xAA);
                    v157 = v156 + 24 * ((unint64_t)v181 % 0xAA);
                    v158 = *((_QWORD *)&v181 + 1);
                    v159 = *((_QWORD *)&v181 + 1) + v181;
                    v160 = *((_QWORD *)v179[1] + (*((_QWORD *)&v181 + 1) + (_QWORD)v181) / 0xAAuLL)
                         + 24 * ((*((_QWORD *)&v181 + 1) + (_QWORD)v181) % 0xAAuLL);
                    if (v157 != v160)
                    {
                      v161 = (char *)v179[1] + 8 * ((unint64_t)v181 / 0xAA);
                      while (*(_QWORD *)v144 != *(_QWORD *)v157 || *((_DWORD *)v144 + 2) != *(_DWORD *)(v157 + 8))
                      {
                        v157 += 24;
                        if (v157 - v156 == 4080)
                        {
                          v162 = *((_QWORD *)v161 + 1);
                          v161 += 8;
                          v156 = v162;
                          v157 = v162;
                        }
                        if (v157 == v160)
                          goto LABEL_309;
                      }
                    }
                    if (v157 == v160)
                    {
LABEL_309:
                      *(_QWORD *)&v185 = *(_QWORD *)v144;
                      DWORD2(v185) = *((_DWORD *)v144 + 2);
                      if ((void *)v180 == v179[1])
                        v163 = 0;
                      else
                        v163 = 170 * ((uint64_t)(v180 - (unint64_t)v179[1]) >> 3) - 1;
                      if (v163 == v159)
                      {
                        sub_20F45E9D0(v179);
                        v155 = v179[1];
                        v158 = *((_QWORD *)&v181 + 1);
                        v159 = *((_QWORD *)&v181 + 1) + v181;
                      }
                      v146 = v155[v159 / 0xAA] + 24 * (v159 % 0xAA);
                      *(_OWORD *)v146 = v185;
                      *(_DWORD *)(v146 + 16) = v153;
                      *(_BYTE *)(v146 + 20) = 1;
                      *((_QWORD *)&v181 + 1) = v158 + 1;
                    }
                  }
                  v144 += 16;
                  if (v144 == v145)
                    goto LABEL_315;
                  continue;
                }
              }
              break;
            }
            if (*(_QWORD *)v118 == *v175 && *(_DWORD *)(v118 + 8) == *((_DWORD *)v175 + 2))
            {
              v121 = (uint64_t *)(v118 + 24);
              v122 = *(unsigned int *)(v118 + 32);
              if (v176[1])
              {
                v123 = (uint8x8_t)vcnt_s8((int8x8_t)v176[1]);
                v123.i16[0] = vaddlv_u8(v123);
                if (v123.u32[0] > 1uLL)
                {
                  v124 = *(unsigned int *)(v118 + 32);
                  if (v176[1] <= (void *)v122)
                    v124 = v122 % (unint64_t)v176[1];
                }
                else
                {
                  v124 = (LODWORD(v176[1]) - 1) & v122;
                }
                v125 = (uint64_t **)*((_QWORD *)v176[0] + v124);
                if (v125)
                {
                  v126 = *v125;
                  if (v126)
                  {
                    v127 = *v121;
                    if (v123.u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        v131 = v126[1];
                        if (v131 == v122)
                        {
                          if (v126[2] == v127 && *((_DWORD *)v126 + 6) == (_DWORD)v122)
                            goto LABEL_224;
                        }
                        else if ((v131 & ((unint64_t)v176[1] - 1)) != v124)
                        {
                          goto LABEL_254;
                        }
                        v126 = (uint64_t *)*v126;
                        if (!v126)
                          goto LABEL_254;
                      }
                    }
                    do
                    {
                      v129 = v126[1];
                      if (v129 == v122)
                      {
                        if (v126[2] == v127 && *((_DWORD *)v126 + 6) == (_DWORD)v122)
                          goto LABEL_224;
                      }
                      else
                      {
                        if ((void *)v129 >= v176[1])
                          v129 %= (unint64_t)v176[1];
                        if (v129 != v124)
                          break;
                      }
                      v126 = (uint64_t *)*v126;
                    }
                    while (v126);
                  }
                }
              }
LABEL_254:
              v133 = v182;
              v132 = v183;
              v134 = v182;
              if (v182 != v183)
              {
                v134 = v182;
                while (*(_QWORD *)v134 != *v121 || *((_DWORD *)v134 + 2) != (_DWORD)v122)
                {
                  v134 += 16;
                  if (v134 == v183)
                    goto LABEL_260;
                }
              }
              if (v134 == v183)
              {
LABEL_260:
                if (v183 < v184)
                {
                  *(_OWORD *)v183 = *(_OWORD *)v121;
                  v120 = v132 + 16;
                  goto LABEL_223;
                }
                v135 = (v183 - v182) >> 4;
                v136 = v135 + 1;
                if ((unint64_t)(v135 + 1) >> 60)
                  goto LABEL_321;
                v137 = v184 - v182;
                if ((v184 - v182) >> 3 > v136)
                  v136 = v137 >> 3;
                if ((unint64_t)v137 >= 0x7FFFFFFFFFFFFFF0)
                  v138 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v138 = v136;
                if (v138)
                {
                  if (v138 >> 60)
                    goto LABEL_322;
                  v139 = (char *)operator new(16 * v138);
                  v140 = &v139[16 * v135];
                  *(_OWORD *)v140 = *(_OWORD *)v121;
                  v141 = v140;
                  if (v133 == v132)
                  {
LABEL_270:
                    v120 = v140 + 16;
                    v182 = v141;
                    v183 = v140 + 16;
                    v184 = &v139[16 * v138];
                    if (!v133)
                      goto LABEL_223;
LABEL_275:
                    operator delete(v133);
                    goto LABEL_223;
                  }
                }
                else
                {
                  v139 = 0;
                  v140 = (char *)(16 * v135);
                  *(_OWORD *)(16 * v135) = *(_OWORD *)v121;
                  v141 = (char *)(16 * v135);
                  if (v133 == v132)
                    goto LABEL_270;
                }
                do
                {
                  v142 = *((_QWORD *)v132 - 2);
                  v132 -= 16;
                  v143 = *((_DWORD *)v132 + 2);
                  *((_QWORD *)v141 - 2) = v142;
                  v141 -= 16;
                  *((_DWORD *)v141 + 2) = v143;
                }
                while (v132 != v133);
                v133 = v182;
                v120 = v140 + 16;
                v182 = v141;
                v183 = v140 + 16;
                v184 = &v139[16 * v138];
                if (v133)
                  goto LABEL_275;
LABEL_223:
                v183 = v120;
              }
            }
LABEL_224:
            v118 += 472;
            goto LABEL_225;
          }
        }
        v17 = *(_DWORD *)(v14 + 8);
        if (v12 != v17)
          goto LABEL_5;
        *(_QWORD *)(v14 + 16) = 0;
        v14 += 32;
        if (v14 == v15)
          goto LABEL_13;
      }
    }
  }
LABEL_15:
  v24 = __p[0];
  if (__p[0])
  {
    do
    {
      v25 = (_QWORD *)*v24;
      operator delete(v24);
      v24 = v25;
    }
    while (v25);
  }
  v26 = v176[0];
  v176[0] = 0;
  if (v26)
    operator delete(v26);
  v27 = (void **)v179[1];
  v28 = (void **)v180;
  v29 = v180 - (unint64_t)v179[1];
  if ((unint64_t)v180 - (unint64_t)v179[1] >= 0x11)
  {
    do
    {
      v30 = *v27++;
      operator delete(v30);
      v29 -= 8;
    }
    while (v29 > 0x10);
  }
  while (v27 != v28)
  {
    v31 = *v27++;
    operator delete(v31);
  }
  if (v179[0])
    operator delete(v179[0]);
  if (v182)
  {
    v183 = v182;
    operator delete(v182);
  }
}

void sub_20F456008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;
  void *v29;

  sub_20E8C25A8((uint64_t)&a21);
  sub_20F45F098((uint64_t)&a27);
  v29 = *(void **)(v27 - 144);
  if (v29)
  {
    *(_QWORD *)(v27 - 136) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(a1);
}

void sub_20F456050(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t v8;
  void *v9;
  uint64_t *i;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  unint64_t v17;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v8 = *(_QWORD *)(a3 + 24);
  if (v8)
  {
    if (v8 >= 0xAAAAAAAAAAAAAABLL)
      sub_20F45A4CC();
    v9 = operator new(24 * v8);
    *a4 = (unint64_t)v9;
    a4[1] = (unint64_t)v9;
    a4[2] = (unint64_t)v9 + 24 * v8;
  }
  for (i = *(uint64_t **)(a3 + 16); i; i = (uint64_t *)*i)
  {
    v16 = *((_OWORD *)i + 1);
    v17 = 0xBFF0000000000000;
    v11 = *a4;
    v12 = a4[1];
    if (v12 != *a4)
    {
      v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - *a4) >> 3);
      do
      {
        v14 = v13 >> 1;
        v15 = v11 + 24 * (v13 >> 1);
        if (*(_QWORD *)v15 < (unint64_t)v16
          || *(_QWORD *)v15 == (_QWORD)v16 && *(_DWORD *)(v15 + 8) < DWORD2(v16))
        {
          v11 = v15 + 24;
          v14 = v13 + ~v14;
        }
        v13 = v14;
      }
      while (v14);
    }
    if (v11 == v12 || *(_QWORD *)v11 != (_QWORD)v16 || *(_DWORD *)(v11 + 8) != DWORD2(v16))
      sub_20F45E6B4(a4, v11, &v16);
  }
  sub_20F4561E0(a1, a2, a4, 1.79769313e308);
}

void sub_20F4561C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20F4561E0(uint64_t a1, uint64_t a2, _QWORD *a3, double a4)
{
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  char v15;
  double *v16;
  double *v17;
  double v19;
  uint64_t v20;
  int64_t v21;
  double *v22;
  __int128 v23;
  double *v24;
  uint64_t v25;
  int64_t v26;
  double *v27;
  __int128 v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  double v32;
  double *v33;
  __int128 v34;
  __int128 v35;
  uint8x8_t v36;
  unint64_t v37;
  uint64_t **v38;
  uint64_t *v39;
  unint64_t v41;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int8x8_t v53;
  uint8x8_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  unint64_t v69;
  uint8x8_t v70;
  unint64_t v71;
  uint64_t **v72;
  uint64_t *v73;
  uint64_t v74;
  unint64_t v76;
  unint64_t v78;
  double v85;
  double *v86;
  double *v87;
  double *v88;
  double *v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  char *v93;
  double *v94;
  __int128 v95;
  char *v96;
  unint64_t v97;
  double *v98;
  double v99;
  double *v100;
  double *v101;
  __int128 v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  unint64_t v107;
  uint8x8_t v108;
  unint64_t v109;
  uint64_t **v110;
  uint64_t *v111;
  uint64_t v112;
  unint64_t v114;
  unint64_t v116;
  double v120;
  _QWORD *v121;
  _QWORD *v122;
  void *v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t *v126;
  __int128 v128;
  __int128 v129;
  void *v130[2];
  void *__p[2];
  int v132;
  void *v133;
  double *v134;
  unint64_t v135;
  __int128 v136;
  double v137;
  _OWORD v138[2];

  v133 = 0;
  v134 = 0;
  v135 = 0;
  *(_OWORD *)v130 = 0u;
  *(_OWORD *)__p = 0u;
  v132 = 1065353216;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)a2;
  v9 = *(_DWORD *)(a2 + 8);
  sub_20F456CAC(*(_QWORD *)a1, v7, *(_QWORD *)a2, v9);
  if (!v10)
    goto LABEL_203;
  v11 = *a3;
  v12 = a3[1];
  if (*a3 == v12)
    goto LABEL_203;
  v13 = 0;
  do
  {
    while (1)
    {
      if (v8 != *(_QWORD *)v11)
      {
        v14 = *(_DWORD *)(v11 + 8);
        break;
      }
      v14 = *(_DWORD *)(v11 + 8);
      if (v9 != v14)
        break;
      *(_QWORD *)(v11 + 16) = 0;
      v11 += 24;
      if (v11 == v12)
        goto LABEL_11;
    }
    sub_20F456CAC(*(_QWORD *)a1, v7, *(_QWORD *)v11, v14);
    if (v15)
      ++v13;
    v11 += 24;
  }
  while (v11 != v12);
LABEL_11:
  if (v13)
  {
    *(_QWORD *)&v136 = *(_QWORD *)a2;
    DWORD2(v136) = *(_DWORD *)(a2 + 8);
    v137 = 0.0;
    sub_20F456EA4((char **)&v133, &v136);
    v16 = (double *)v133;
    v17 = v134;
    if (v133 != v134)
    {
      v124 = a3;
      while (1)
      {
        v129 = *(_OWORD *)v16;
        v19 = v16[2];
        if ((char *)v17 - (char *)v16 >= 25)
        {
          v20 = 0;
          v21 = 0xAAAAAAAAAAAAAAABLL * (v17 - v16);
          v136 = *(_OWORD *)v16;
          v137 = v16[2];
          v22 = v16;
          do
          {
            v24 = v22;
            v22 += 3 * v20 + 3;
            v25 = 2 * v20;
            v20 = (2 * v20) | 1;
            v26 = v25 + 2;
            if (v26 < v21 && v22[2] > v22[5])
            {
              v22 += 3;
              v20 = v26;
            }
            v23 = *(_OWORD *)v22;
            v24[2] = v22[2];
            *(_OWORD *)v24 = v23;
          }
          while (v20 <= (uint64_t)((unint64_t)(v21 - 2) >> 1));
          v27 = v17 - 3;
          if (v22 == v27)
          {
            v35 = v136;
            v22[2] = v137;
            *(_OWORD *)v22 = v35;
          }
          else
          {
            v28 = *(_OWORD *)v27;
            v22[2] = v27[2];
            *(_OWORD *)v22 = v28;
            *(_OWORD *)v27 = v136;
            v27[2] = v137;
            v29 = (char *)v22 - (char *)v16 + 24;
            if (v29 >= 25)
            {
              v30 = (v29 / 0x18uLL - 2) >> 1;
              v31 = (char *)&v16[3 * v30];
              v32 = v22[2];
              if (*((double *)v31 + 2) > v32)
              {
                v138[0] = *(_OWORD *)v22;
                do
                {
                  v33 = v22;
                  v22 = (double *)v31;
                  v34 = *(_OWORD *)v31;
                  v33[2] = *((double *)v31 + 2);
                  *(_OWORD *)v33 = v34;
                  if (!v30)
                    break;
                  v30 = (v30 - 1) >> 1;
                  v31 = (char *)&v16[3 * v30];
                }
                while (*((double *)v31 + 2) > v32);
                *(_OWORD *)v22 = v138[0];
                v22[2] = v32;
              }
            }
          }
          v17 = v134;
        }
        v134 = v17 - 3;
        v138[0] = v129;
        if (v130[1])
        {
          v36 = (uint8x8_t)vcnt_s8((int8x8_t)v130[1]);
          v36.i16[0] = vaddlv_u8(v36);
          if (v36.u32[0] > 1uLL)
          {
            v37 = DWORD2(v138[0]);
            if (v130[1] <= (void *)DWORD2(v129))
              v37 = DWORD2(v129) % (unint64_t)v130[1];
          }
          else
          {
            v37 = (LODWORD(v130[1]) - 1) & DWORD2(v129);
          }
          v38 = (uint64_t **)*((_QWORD *)v130[0] + v37);
          if (v38)
          {
            v39 = *v38;
            if (v39)
            {
              if (v36.u32[0] < 2uLL)
              {
                while (1)
                {
                  v43 = v39[1];
                  if (v43 == DWORD2(v129))
                  {
                    if (v39[2] == *(_QWORD *)&v138[0] && *((_DWORD *)v39 + 6) == DWORD2(v129))
                      goto LABEL_14;
                  }
                  else if ((v43 & ((uint64_t)v130[1] - 1)) != v37)
                  {
                    goto LABEL_59;
                  }
                  v39 = (uint64_t *)*v39;
                  if (!v39)
                    goto LABEL_59;
                }
              }
              do
              {
                v41 = v39[1];
                if (v41 == DWORD2(v129))
                {
                  if (v39[2] == *(_QWORD *)&v138[0] && *((_DWORD *)v39 + 6) == DWORD2(v129))
                    goto LABEL_14;
                }
                else
                {
                  if ((void *)v41 >= v130[1])
                    v41 %= (unint64_t)v130[1];
                  if (v41 != v37)
                    break;
                }
                v39 = (uint64_t *)*v39;
              }
              while (v39);
            }
          }
        }
LABEL_59:
        v44 = *(_QWORD *)&v138[0];
        v45 = sub_20F456CAC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unint64_t *)&v138[0], DWORD2(v138[0]));
        if (!v46)
          goto LABEL_14;
        v47 = v45;
        v48 = *a3;
        v49 = a3[1];
        if (v49 != *a3)
        {
          v50 = 0xAAAAAAAAAAAAAAABLL * ((v49 - *a3) >> 3);
          do
          {
            v51 = v50 >> 1;
            v52 = v48 + 24 * (v50 >> 1);
            if (*(_QWORD *)v52 < v44 || *(_QWORD *)v52 == v44 && *(_DWORD *)(v52 + 8) < DWORD2(v129))
            {
              v48 = v52 + 24;
              v51 = v50 + ~v51;
            }
            v50 = v51;
          }
          while (v51);
        }
        if (v48 != v49 && *(_QWORD *)v48 == v44 && *(_DWORD *)(v48 + 8) == DWORD2(v129))
        {
          *(double *)(v48 + 16) = v19;
          if (!--v13)
            goto LABEL_203;
        }
        sub_20F28FE1C((uint64_t)v130, (uint64_t *)v138, v138);
        v53 = *(int8x8_t *)(a1 + 8);
        if (!*(_QWORD *)&v53)
          goto LABEL_14;
        v54 = (uint8x8_t)vcnt_s8(v53);
        v54.i16[0] = vaddlv_u8(v54);
        if (v54.u32[0] > 1uLL)
        {
          v55 = *(_QWORD *)&v138[0];
          if (*(_QWORD *)&v138[0] >= *(_QWORD *)&v53)
            v55 = *(_QWORD *)&v138[0] % *(_QWORD *)&v53;
        }
        else
        {
          v55 = (*(_QWORD *)&v53 - 1) & *(_QWORD *)&v138[0];
        }
        v56 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v55);
        if (!v56)
          goto LABEL_14;
        v57 = (_QWORD *)*v56;
        if (!*v56)
          goto LABEL_14;
        v58 = *(_QWORD *)&v53 - 1;
        if (v54.u32[0] < 2uLL)
        {
          while (1)
          {
            v59 = v57[1];
            if (*(_QWORD *)&v138[0] == v59)
            {
              if (v57[2] == *(_QWORD *)&v138[0])
                goto LABEL_93;
            }
            else if ((v59 & v58) != v55)
            {
              goto LABEL_14;
            }
            v57 = (_QWORD *)*v57;
            if (!v57)
              goto LABEL_14;
          }
        }
        while (1)
        {
          v60 = v57[1];
          if (*(_QWORD *)&v138[0] == v60)
            break;
          if (v60 >= *(_QWORD *)&v53)
            v60 %= *(_QWORD *)&v53;
          if (v60 != v55)
            goto LABEL_14;
LABEL_87:
          v57 = (_QWORD *)*v57;
          if (!v57)
            goto LABEL_14;
        }
        if (v57[2] != *(_QWORD *)&v138[0])
          goto LABEL_87;
LABEL_93:
        if (v54.u32[0] > 1uLL)
        {
          v61 = *(_QWORD *)&v138[0];
          if (*(_QWORD *)&v138[0] >= *(_QWORD *)&v53)
            v61 = *(_QWORD *)&v138[0] % *(_QWORD *)&v53;
        }
        else
        {
          v61 = v58 & *(_QWORD *)&v138[0];
        }
        v62 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v61);
        if (!v62 || (v63 = (_QWORD *)*v62) == 0)
LABEL_210:
          sub_20E89FD20("unordered_map::at: key not found");
        if (v54.u32[0] < 2uLL)
        {
          while (1)
          {
            v64 = v63[1];
            if (*(_QWORD *)&v138[0] == v64)
            {
              if (v63[2] == *(_QWORD *)&v138[0])
                goto LABEL_105;
            }
            else if ((v64 & v58) != v61)
            {
              goto LABEL_210;
            }
            v63 = (_QWORD *)*v63;
            if (!v63)
              goto LABEL_210;
          }
        }
        while (2)
        {
          v103 = v63[1];
          if (*(_QWORD *)&v138[0] != v103)
          {
            if (v103 >= *(_QWORD *)&v53)
              v103 %= *(_QWORD *)&v53;
            if (v103 != v61)
              goto LABEL_210;
LABEL_163:
            v63 = (_QWORD *)*v63;
            if (!v63)
              goto LABEL_210;
            continue;
          }
          break;
        }
        if (v63[2] != *(_QWORD *)&v138[0])
          goto LABEL_163;
LABEL_105:
        v65 = (uint64_t *)(v47 + 16);
        v125 = v63[3];
        v126 = (uint64_t *)(v47 + 64);
        do
        {
          v66 = *v65;
          v67 = v65[1];
          while (v66 != v67)
          {
            v68 = (uint64_t *)(v66 + 16);
            if (v130[1])
            {
              v69 = *(unsigned int *)(v66 + 24);
              v70 = (uint8x8_t)vcnt_s8((int8x8_t)v130[1]);
              v70.i16[0] = vaddlv_u8(v70);
              if (v70.u32[0] > 1uLL)
              {
                v71 = *(unsigned int *)(v66 + 24);
                if (v130[1] <= (void *)v69)
                  v71 = v69 % (unint64_t)v130[1];
              }
              else
              {
                v71 = (LODWORD(v130[1]) - 1) & v69;
              }
              v72 = (uint64_t **)*((_QWORD *)v130[0] + v71);
              if (v72)
              {
                v73 = *v72;
                if (v73)
                {
                  v74 = *v68;
                  if (v70.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      v78 = v73[1];
                      if (v78 == v69)
                      {
                        if (v73[2] == v74 && *((_DWORD *)v73 + 6) == (_DWORD)v69)
                          goto LABEL_109;
                      }
                      else if ((v78 & ((unint64_t)v130[1] - 1)) != v71)
                      {
                        goto LABEL_137;
                      }
                      v73 = (uint64_t *)*v73;
                      if (!v73)
                        goto LABEL_137;
                    }
                  }
                  do
                  {
                    v76 = v73[1];
                    if (v76 == v69)
                    {
                      if (v73[2] == v74 && *((_DWORD *)v73 + 6) == (_DWORD)v69)
                        goto LABEL_109;
                    }
                    else
                    {
                      if ((void *)v76 >= v130[1])
                        v76 %= (unint64_t)v130[1];
                      if (v76 != v71)
                        break;
                    }
                    v73 = (uint64_t *)*v73;
                  }
                  while (v73);
                }
              }
            }
LABEL_137:
            if (*(_BYTE *)(v66 + 160))
            {
              _Q1 = *(_OWORD *)(v66 + 128);
              _D3 = *(_QWORD *)(v66 + 136);
              __asm { FMLA            D2, D3, V1.D[1] }
              v85 = v19 + sqrt(_D2 + *(double *)(v66 + 144) * *(double *)(v66 + 144));
              if (v85 < a4)
              {
                *(_QWORD *)&v128 = *v68;
                DWORD2(v128) = *(_DWORD *)(v66 + 24);
                v86 = v134;
                if ((unint64_t)v134 >= v135)
                {
                  v89 = (double *)v133;
                  v90 = 0xAAAAAAAAAAAAAAABLL * (((char *)v134 - (_BYTE *)v133) >> 3);
                  v91 = v90 + 1;
                  if (v90 + 1 > 0xAAAAAAAAAAAAAAALL)
                    sub_20F45A4CC();
                  if (0x5555555555555556 * ((uint64_t)(v135 - (_QWORD)v133) >> 3) > v91)
                    v91 = 0x5555555555555556 * ((uint64_t)(v135 - (_QWORD)v133) >> 3);
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v135 - (_QWORD)v133) >> 3) >= 0x555555555555555)
                    v92 = 0xAAAAAAAAAAAAAAALL;
                  else
                    v92 = v91;
                  if (v92)
                  {
                    if (v92 > 0xAAAAAAAAAAAAAAALL)
                      sub_20E877A38();
                    v93 = (char *)operator new(24 * v92);
                  }
                  else
                  {
                    v93 = 0;
                  }
                  v94 = (double *)&v93[24 * v90];
                  *(_OWORD *)v94 = v128;
                  v94[2] = v85;
                  v88 = v94;
                  if (v86 != v89)
                  {
                    do
                    {
                      v95 = *(_OWORD *)(v86 - 3);
                      *(v88 - 1) = *(v86 - 1);
                      *(_OWORD *)(v88 - 3) = v95;
                      v88 -= 3;
                      v86 -= 3;
                    }
                    while (v86 != v89);
                    v86 = (double *)v133;
                  }
                  v96 = &v93[24 * v92];
                  v87 = v94 + 3;
                  v133 = v88;
                  v135 = (unint64_t)v96;
                  if (v86)
                    operator delete(v86);
                }
                else
                {
                  *(_OWORD *)v134 = v128;
                  v86[2] = v85;
                  v87 = v86 + 3;
                  v88 = (double *)v133;
                }
                v134 = v87;
                if ((char *)v87 - (char *)v88 >= 25)
                {
                  v97 = (((char *)v87 - (char *)v88) / 0x18uLL - 2) >> 1;
                  v98 = &v88[3 * v97];
                  v99 = *(v87 - 1);
                  if (v98[2] > v99)
                  {
                    v100 = v87 - 3;
                    v136 = *(_OWORD *)(v87 - 3);
                    do
                    {
                      v101 = v100;
                      v100 = v98;
                      v102 = *(_OWORD *)v98;
                      v101[2] = v98[2];
                      *(_OWORD *)v101 = v102;
                      if (!v97)
                        break;
                      v97 = (v97 - 1) >> 1;
                      v98 = &v88[3 * v97];
                    }
                    while (v98[2] > v99);
                    *(_OWORD *)v100 = v136;
                    v100[2] = v99;
                  }
                }
              }
            }
LABEL_109:
            v66 += 472;
          }
          v65 += 3;
        }
        while (v65 != v126);
        a3 = v124;
        v104 = *(_QWORD *)(v125 + 208);
        v105 = *(_QWORD *)(v125 + 216);
        if (v104 != v105)
          break;
LABEL_14:
        v16 = (double *)v133;
        v17 = v134;
        if (v133 == v134 || v13 == 0)
          goto LABEL_203;
      }
      while (*(_QWORD *)v104 != *(_QWORD *)&v138[0] || *(_DWORD *)(v104 + 8) != DWORD2(v138[0]))
      {
LABEL_171:
        v104 += 472;
        if (v104 == v105)
          goto LABEL_14;
      }
      v106 = (uint64_t *)(v104 + 24);
      if (v130[1])
      {
        v107 = *(unsigned int *)(v104 + 32);
        v108 = (uint8x8_t)vcnt_s8((int8x8_t)v130[1]);
        v108.i16[0] = vaddlv_u8(v108);
        if (v108.u32[0] > 1uLL)
        {
          v109 = v107 % (unint64_t)v130[1];
          if (v130[1] > (void *)v107)
            v109 = *(unsigned int *)(v104 + 32);
          v110 = (uint64_t **)*((_QWORD *)v130[0] + v109);
          if (!v110)
            goto LABEL_201;
        }
        else
        {
          v109 = (LODWORD(v130[1]) - 1) & v107;
          v110 = (uint64_t **)*((_QWORD *)v130[0] + v109);
          if (!v110)
            goto LABEL_201;
        }
        v111 = *v110;
        if (v111)
        {
          v112 = *v106;
          if (v108.u32[0] < 2uLL)
          {
            while (1)
            {
              v116 = v111[1];
              if (v116 == v107)
              {
                if (v111[2] == v112 && *((_DWORD *)v111 + 6) == (_DWORD)v107)
                  goto LABEL_171;
              }
              else if ((v116 & ((unint64_t)v130[1] - 1)) != v109)
              {
                goto LABEL_201;
              }
              v111 = (uint64_t *)*v111;
              if (!v111)
                goto LABEL_201;
            }
          }
          do
          {
            v114 = v111[1];
            if (v114 == v107)
            {
              if (v111[2] == v112 && *((_DWORD *)v111 + 6) == (_DWORD)v107)
                goto LABEL_171;
            }
            else
            {
              if ((void *)v114 >= v130[1])
                v114 %= (unint64_t)v130[1];
              if (v114 != v109)
                break;
            }
            v111 = (uint64_t *)*v111;
          }
          while (v111);
        }
      }
LABEL_201:
      _Q1 = *(_OWORD *)(v104 + 144);
      _D3 = *(_QWORD *)(v104 + 152);
      __asm { FMLA            D2, D3, V1.D[1] }
      v120 = v19 + sqrt(_D2 + *(double *)(v104 + 160) * *(double *)(v104 + 160));
      if (v120 < a4)
      {
        *(_QWORD *)&v136 = *v106;
        DWORD2(v136) = *(_DWORD *)(v104 + 32);
        v137 = v120;
        sub_20F456EA4((char **)&v133, &v136);
      }
      goto LABEL_171;
    }
  }
LABEL_203:
  v121 = __p[0];
  if (__p[0])
  {
    do
    {
      v122 = (_QWORD *)*v121;
      operator delete(v121);
      v121 = v122;
    }
    while (v122);
  }
  v123 = v130[0];
  v130[0] = 0;
  if (v123)
    operator delete(v123);
  if (v133)
    operator delete(v133);
}

void sub_20F456C78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p)
{
  sub_20E8C25A8((uint64_t)&a17);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20F456CAC(uint64_t a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  uint64_t **v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v18;
  uint64_t v20;

  if (!a2)
    return 0;
  v4 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = a3;
    if (a3 >= a2)
      v5 = a3 % a2;
  }
  else
  {
    v5 = (a2 - 1) & a3;
  }
  v6 = *(_QWORD **)(a1 + 8 * v5);
  if (!v6)
    return 0;
  v7 = (_QWORD *)*v6;
  if (!v7)
    return 0;
  if (v4.u32[0] < 2uLL)
  {
    while (1)
    {
      v9 = v7[1];
      if (v9 == a3)
      {
        if (v7[2] == a3)
          goto LABEL_23;
      }
      else if ((v9 & (a2 - 1)) != v5)
      {
        return 0;
      }
      v7 = (_QWORD *)*v7;
      if (!v7)
        return 0;
    }
  }
  while (1)
  {
    v8 = v7[1];
    if (v8 == a3)
      break;
    if (v8 >= a2)
      v8 %= a2;
    if (v8 != v5)
      return 0;
LABEL_12:
    v7 = (_QWORD *)*v7;
    if (!v7)
      return 0;
  }
  if (v7[2] != a3)
    goto LABEL_12;
LABEL_23:
  v10 = v7[3];
  v11 = *(_QWORD *)(v10 + 176);
  if (!v11)
    return 0;
  v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    v13 = a4;
    if (v11 <= a4)
      v13 = a4 % v11;
  }
  else
  {
    v13 = ((_DWORD)v11 - 1) & a4;
  }
  v14 = *(uint64_t ***)(*(_QWORD *)(v10 + 168) + 8 * v13);
  if (!v14)
    return 0;
  v15 = *v14;
  if (!v15)
    return 0;
  if (v12.u32[0] < 2uLL)
  {
    v16 = v11 - 1;
    while (1)
    {
      v20 = v15[1];
      if (v20 == a4)
      {
        if (v15[2] == a3 && *((_DWORD *)v15 + 6) == a4)
          return ((_BYTE)v15 + 32);
      }
      else if ((v20 & v16) != v13)
      {
        return 0;
      }
      v15 = (uint64_t *)*v15;
      if (!v15)
        return 0;
    }
  }
  while (1)
  {
    v18 = v15[1];
    if (v18 == a4)
      break;
    if (v18 >= v11)
      v18 %= v11;
    if (v18 != v13)
      return 0;
LABEL_36:
    v15 = (uint64_t *)*v15;
    if (!v15)
      return 0;
  }
  if (v15[2] != a3 || *((_DWORD *)v15 + 6) != a4)
    goto LABEL_36;
  return ((_BYTE)v15 + 32);
}

void sub_20F456EA4(char **a1, __int128 *a2)
{
  unint64_t v4;
  double *v5;
  __int128 v6;
  double *v7;
  double *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  double *v16;
  uint64_t v17;
  unint64_t v18;
  double *v19;
  double v20;
  double *v21;
  double *v22;
  __int128 v23;
  __int128 v24;

  v5 = (double *)a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v8 = (double *)*a1;
    v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_20F45A4CC();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (_QWORD)v8) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 > 0xAAAAAAAAAAAAAAALL)
        sub_20E877A38();
      v13 = (char *)operator new(24 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[24 * v9];
    *(_OWORD *)v14 = *a2;
    *((_QWORD *)v14 + 2) = *((_QWORD *)a2 + 2);
    v7 = (double *)(v14 + 24);
    if (v5 != v8)
    {
      do
      {
        v15 = *(_OWORD *)(v5 - 3);
        *((double *)v14 - 1) = *(v5 - 1);
        *(_OWORD *)(v14 - 24) = v15;
        v14 -= 24;
        v5 -= 3;
      }
      while (v5 != v8);
      v5 = (double *)*a1;
    }
    *a1 = v14;
    a1[1] = (char *)v7;
    a1[2] = &v13[24 * v12];
    if (v5)
      operator delete(v5);
  }
  else
  {
    v6 = *a2;
    v5[2] = *((double *)a2 + 2);
    *(_OWORD *)v5 = v6;
    v7 = v5 + 3;
  }
  a1[1] = (char *)v7;
  v16 = (double *)*a1;
  v17 = (char *)v7 - *a1;
  if (v17 >= 25)
  {
    v18 = (v17 / 0x18uLL - 2) >> 1;
    v19 = &v16[3 * v18];
    v20 = *(v7 - 1);
    if (v19[2] > v20)
    {
      v21 = v7 - 3;
      v24 = *(_OWORD *)(v7 - 3);
      do
      {
        v22 = v21;
        v21 = v19;
        v23 = *(_OWORD *)v19;
        v22[2] = v19[2];
        *(_OWORD *)v22 = v23;
        if (!v18)
          break;
        v18 = (v18 - 1) >> 1;
        v19 = &v16[3 * v18];
      }
      while (v19[2] > v20);
      *(_OWORD *)v21 = v24;
      v21[2] = v20;
    }
  }
}

uint64_t sub_20F457074(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void **v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  void **v17;
  void **v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint8x8_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint8x8_t v36;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  _QWORD *v45;
  uint64_t v46;
  void **v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  void ***v53;
  void **v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  void **v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  void *v65[2];
  void *__p[2];
  int v67;
  void *v68[2];
  __int128 v69;
  __int128 v70;
  unint64_t v71;

  if (a1 == a2)
    return 1;
  if (!*(_QWORD *)(a4 + 24)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingTypes/src/MapDataUtil.cpp", 1499, (uint64_t)"validate_reloc_result", 21, (uint64_t)"validate_reloc_result is not set", 32, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v69 = 0u;
  v70 = 0u;
  *(_OWORD *)v68 = 0u;
  *(_OWORD *)v65 = 0u;
  *(_OWORD *)__p = 0u;
  v67 = 1065353216;
  sub_20F34605C((uint64_t)v68);
  v9 = (void **)v68[1];
  v11 = *((_QWORD *)&v70 + 1);
  v10 = v70;
  *(_QWORD *)(*(_QWORD *)((char *)v68[1] + (((*((_QWORD *)&v70 + 1) + (_QWORD)v70) >> 6) & 0x3FFFFFFFFFFFFF8))
            + 8 * ((*((_QWORD *)&v70 + 1) + v70) & 0x1FF)) = a1;
  v12 = __CFADD__(v11, 1);
  v13 = v11 + 1;
  *((_QWORD *)&v70 + 1) = v13;
  if (v12)
    goto LABEL_7;
  while (2)
  {
    v22 = (unint64_t *)(*(char **)((char *)v9 + ((v10 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v10 & 0x1FF));
    v23 = *v22;
    if (!v65[1])
      goto LABEL_37;
    v24 = (uint8x8_t)vcnt_s8((int8x8_t)v65[1]);
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.u32[0] > 1uLL)
    {
      v25 = *v22;
      if ((void *)v23 >= v65[1])
        v25 = v23 % (unint64_t)v65[1];
    }
    else
    {
      v25 = ((unint64_t)v65[1] - 1) & v23;
    }
    v26 = (_QWORD *)*((_QWORD *)v65[0] + v25);
    if (!v26 || (v27 = (_QWORD *)*v26) == 0)
    {
LABEL_37:
      v71 = *v22;
      v30 = *(_QWORD *)(a3 + 24);
      if (!v30)
        sub_20E86D37C();
      v31 = (*(uint64_t (**)(uint64_t, unint64_t *))(*(_QWORD *)v30 + 48))(v30, &v71);
      v32 = *(_QWORD *)(v31 + 208);
      v33 = *(_QWORD *)(v31 + 216);
      while (1)
      {
        if (v32 == v33)
        {
          sub_20EDB1F30((uint64_t)v65, v22, v22);
          v9 = (void **)v68[1];
          v13 = *((_QWORD *)&v70 + 1);
          v10 = v70;
          goto LABEL_113;
        }
        v34 = *(_QWORD *)(a4 + 24);
        if (!v34)
          goto LABEL_126;
        v35 = *(_QWORD *)(v32 + 24);
        if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 48))(v34, v32) & 1) == 0)
          goto LABEL_40;
        if (v65[1])
        {
          v36 = (uint8x8_t)vcnt_s8((int8x8_t)v65[1]);
          v36.i16[0] = vaddlv_u8(v36);
          if (v36.u32[0] > 1uLL)
          {
            v37 = v35;
            if ((void *)v35 >= v65[1])
              v37 = v35 % (unint64_t)v65[1];
          }
          else
          {
            v37 = ((unint64_t)v65[1] - 1) & v35;
          }
          v38 = (_QWORD *)*((_QWORD *)v65[0] + v37);
          if (v38)
          {
            v39 = (_QWORD *)*v38;
            if (v39)
            {
              if (v36.u32[0] < 2uLL)
              {
                while (1)
                {
                  v41 = v39[1];
                  if (v41 == v35)
                  {
                    if (v39[2] == v35)
                      goto LABEL_40;
                  }
                  else if ((v41 & ((unint64_t)v65[1] - 1)) != v37)
                  {
                    goto LABEL_64;
                  }
                  v39 = (_QWORD *)*v39;
                  if (!v39)
                    goto LABEL_64;
                }
              }
              do
              {
                v40 = v39[1];
                if (v40 == v35)
                {
                  if (v39[2] == v35)
                    goto LABEL_40;
                }
                else
                {
                  if ((void *)v40 >= v65[1])
                    v40 %= (unint64_t)v65[1];
                  if (v40 != v37)
                    break;
                }
                v39 = (_QWORD *)*v39;
              }
              while (v39);
            }
          }
        }
LABEL_64:
        v71 = v35;
        v42 = *(_QWORD *)(a3 + 24);
        if (!v42)
LABEL_126:
          sub_20E86D37C();
        if (!(*(uint64_t (**)(uint64_t, unint64_t *))(*(_QWORD *)v42 + 48))(v42, &v71))
          goto LABEL_40;
        v43 = (unint64_t)v70 >> 9;
        v44 = (char *)v68[1];
        v45 = (char *)v68[1] + 8 * ((unint64_t)v70 >> 9);
        if ((void *)v69 == v68[1])
        {
          v48 = *((_QWORD *)&v70 + 1);
          v52 = (*((_QWORD *)&v70 + 1) + (_QWORD)v70) >> 9;
          if (v43 == v52)
          {
            v47 = 0;
            goto LABEL_74;
          }
          v47 = 0;
          v51 = 0;
          v50 = (char *)v68[1] + 8 * v52;
          v46 = *v45;
        }
        else
        {
          v46 = *((_QWORD *)v68[1] + v43);
          v47 = (void **)(v46 + 8 * (v70 & 0x1FF));
          v48 = *((_QWORD *)&v70 + 1);
          v49 = (*((_QWORD *)&v70 + 1) + (_QWORD)v70) >> 9;
          v50 = (char *)v68[1] + 8 * v49;
          v51 = *(_QWORD *)v50 + 8 * ((*((_QWORD *)&v70 + 1) + v70) & 0x1FF);
          if (v43 == v49)
          {
            if (v47 == (void **)v51)
            {
LABEL_76:
              if ((void **)(v46 + 4096) == v47)
              {
                v53 = (void ***)(v45 + 1);
                goto LABEL_98;
              }
            }
            else
            {
              while (*v47 != (void *)v35)
              {
                if (++v47 == (void **)v51)
                {
                  v47 = (void **)(*(_QWORD *)v50 + 8 * ((*((_QWORD *)&v70 + 1) + v70) & 0x1FF));
                  break;
                }
              }
LABEL_74:
              if (v68[1])
              {
                v46 = *v45;
                goto LABEL_76;
              }
            }
LABEL_101:
            v59 = v48 + v70;
            v60 = v69 - (unint64_t)v68[1];
            if ((void *)v69 == v68[1])
              goto LABEL_105;
            goto LABEL_102;
          }
        }
        v54 = (void **)(v46 + 4096);
        while (*v47 != (void *)v35)
        {
          if (++v47 == v54)
            goto LABEL_86;
        }
        if (v47 != v54)
          goto LABEL_101;
LABEL_86:
        v55 = v45 + 1;
        if (v45 + 1 == (_QWORD *)v50)
        {
          v58 = *(void ***)v50;
          if (v58 == (void **)v51)
          {
            v47 = (void **)v51;
          }
          else
          {
            v47 = v58;
            while (*v47 != (void *)v35)
            {
              if (++v47 == (void **)v51)
              {
                v47 = (void **)v51;
                break;
              }
            }
            if (v58 + 512 == v47)
            {
              v53 = (void ***)(v45 + 2);
LABEL_98:
              v47 = *v53;
              v59 = v48 + v70;
              v60 = v69 - (unint64_t)v68[1];
              if ((void *)v69 == v68[1])
                goto LABEL_105;
              goto LABEL_102;
            }
          }
          goto LABEL_101;
        }
        v56 = 0;
        ++v45;
        v57 = *v55;
        while (*(_QWORD *)(v57 + v56) != v35)
        {
          v56 += 8;
          if (v56 == 4096)
            goto LABEL_86;
        }
        v47 = (void **)(v57 + v56);
        v59 = v48 + v70;
        v60 = v69 - (unint64_t)v68[1];
        if ((void *)v69 == v68[1])
        {
LABEL_105:
          if (v47)
            goto LABEL_40;
          goto LABEL_106;
        }
LABEL_102:
        if (v47 != (void **)(*(_QWORD *)((char *)v68[1] + ((v59 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v59 & 0x1FF)))
          goto LABEL_40;
LABEL_106:
        if ((void *)v35 == a2)
        {
          v4 = 1;
          v14 = __p[0];
          if (!__p[0])
            goto LABEL_9;
          goto LABEL_8;
        }
        v61 = (v60 << 6) - 1;
        if ((void *)v69 == v68[1])
          v62 = 0;
        else
          v62 = v61;
        if (v62 == v59)
        {
          sub_20F34605C((uint64_t)v68);
          v48 = *((_QWORD *)&v70 + 1);
          v44 = (char *)v68[1];
          v59 = v70 + *((_QWORD *)&v70 + 1);
        }
        *(_QWORD *)(*(_QWORD *)&v44[(v59 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v59 & 0x1FF)) = v35;
        *((_QWORD *)&v70 + 1) = v48 + 1;
LABEL_40:
        v32 += 472;
      }
    }
    if (v24.u32[0] < 2uLL)
    {
      while (1)
      {
        v29 = v27[1];
        if (v29 == v23)
        {
          if (v27[2] == v23)
            goto LABEL_113;
        }
        else if ((v29 & ((uint64_t)v65[1] - 1)) != v25)
        {
          goto LABEL_37;
        }
        v27 = (_QWORD *)*v27;
        if (!v27)
          goto LABEL_37;
      }
    }
    while (1)
    {
      v28 = v27[1];
      if (v28 == v23)
        break;
      if ((void *)v28 >= v65[1])
        v28 %= (unint64_t)v65[1];
      if (v28 != v25)
        goto LABEL_37;
LABEL_27:
      v27 = (_QWORD *)*v27;
      if (!v27)
        goto LABEL_37;
    }
    if (v27[2] != v23)
      goto LABEL_27;
LABEL_113:
    --v13;
    *(_QWORD *)&v70 = ++v10;
    *((_QWORD *)&v70 + 1) = v13;
    if (v10 >= 0x400)
    {
      operator delete(*v9);
      v13 = *((_QWORD *)&v70 + 1);
      v9 = (void **)((char *)v68[1] + 8);
      v10 = v70 - 512;
      v68[1] = (char *)v68[1] + 8;
      *(_QWORD *)&v70 = v70 - 512;
    }
    if (v13)
      continue;
    break;
  }
LABEL_7:
  v4 = 0;
  v14 = __p[0];
  if (!__p[0])
    goto LABEL_9;
  do
  {
LABEL_8:
    v15 = (_QWORD *)*v14;
    operator delete(v14);
    v14 = v15;
  }
  while (v15);
LABEL_9:
  v16 = v65[0];
  v65[0] = 0;
  if (v16)
    operator delete(v16);
  v17 = (void **)v68[1];
  v18 = (void **)v69;
  *((_QWORD *)&v70 + 1) = 0;
  v19 = v69 - (unint64_t)v68[1];
  if ((unint64_t)v69 - (unint64_t)v68[1] >= 0x11)
  {
    do
    {
      operator delete(*v17);
      v18 = (void **)v69;
      v17 = (void **)((char *)v68[1] + 8);
      v68[1] = v17;
      v19 = v69 - (_QWORD)v17;
    }
    while ((_QWORD)v69 - (_QWORD)v17 > 0x10uLL);
  }
  v20 = v19 >> 3;
  if (v20 == 1)
  {
    v21 = 256;
LABEL_116:
    *(_QWORD *)&v70 = v21;
  }
  else if (v20 == 2)
  {
    v21 = 512;
    goto LABEL_116;
  }
  if (v17 != v18)
  {
    do
    {
      v63 = *v17++;
      operator delete(v63);
    }
    while (v17 != v18);
    if ((void *)v69 != v68[1])
      *(_QWORD *)&v69 = v69 + (((unint64_t)v68[1] - v69 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v68[0])
    operator delete(v68[0]);
  return v4;
}

void sub_20F4576CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  sub_20E8C25A8((uint64_t)&a9);
  sub_20E8D41E8((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_20F4576F8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void **v13;
  void **v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  int8x8_t v22;
  uint8x8_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int8x8_t v36;
  uint8x8_t v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  _BYTE *v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD **v57;
  _QWORD *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  int8x8_t v64;
  uint8x8_t v65;
  unint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  void *v75;
  void *__p[2];
  __int128 v77;
  __int128 v78;
  unint64_t v79;
  unint64_t v80;

  if (!*(_QWORD *)(a3 + 24)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingTypes/src/MapDataUtil.cpp", 1567, (uint64_t)"validate_reloc_result", 21, (uint64_t)"validate_reloc_result is not set", 32, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_149;
  }
  v10 = *(_QWORD *)(a2 + 24);
  if (v10)
  {
    __p[0] = a1;
    goto LABEL_7;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingTypes/src/MapDataUtil.cpp", 1568, (uint64_t)"find_submap", 11, (uint64_t)"find_submap is not set", 22, (void (*)(void **))sub_21023DDB0))
  {
LABEL_149:
    abort();
  }
  v10 = *(_QWORD *)(a2 + 24);
  __p[0] = a1;
  if (!v10)
    sub_20E86D37C();
LABEL_7:
  if (!(*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v10 + 48))(v10, __p))
    return;
  v77 = 0u;
  v78 = 0u;
  *(_OWORD *)__p = 0u;
  sub_20F34605C((uint64_t)__p);
  v12 = *((_QWORD *)&v78 + 1);
  v11 = v78;
  v13 = (void **)__p[1];
  v14 = (void **)v77;
  *(_QWORD *)(*(_QWORD *)((char *)__p[1] + (((*((_QWORD *)&v78 + 1) + (_QWORD)v78) >> 6) & 0x3FFFFFFFFFFFFF8))
            + 8 * ((*((_QWORD *)&v78 + 1) + v78) & 0x1FF)) = a1;
  v15 = __CFADD__(v12, 1);
  v16 = v12 + 1;
  *((_QWORD *)&v78 + 1) = v16;
  if (!v15)
  {
    while (1)
    {
      v20 = (unint64_t *)(*(char **)((char *)v13 + ((v11 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v11 & 0x1FF));
      v21 = *v20;
      v22 = (int8x8_t)a5[1];
      if (v22)
      {
        v23 = (uint8x8_t)vcnt_s8(v22);
        v23.i16[0] = vaddlv_u8(v23);
        if (v23.u32[0] > 1uLL)
        {
          v24 = *v20;
          if (v21 >= *(_QWORD *)&v22)
            v24 = v21 % *(_QWORD *)&v22;
        }
        else
        {
          v24 = (*(_QWORD *)&v22 - 1) & v21;
        }
        v25 = *(_QWORD **)(*a5 + 8 * v24);
        if (v25)
        {
          v26 = (_QWORD *)*v25;
          if (v26)
          {
            if (v23.u32[0] < 2uLL)
            {
              v27 = *(_QWORD *)&v22 - 1;
              while (1)
              {
                v29 = v26[1];
                if (v29 == v21)
                {
                  if (v26[2] == v21)
                    goto LABEL_133;
                }
                else if ((v29 & v27) != v24)
                {
                  goto LABEL_36;
                }
                v26 = (_QWORD *)*v26;
                if (!v26)
                  goto LABEL_36;
              }
            }
            do
            {
              v28 = v26[1];
              if (v28 == v21)
              {
                if (v26[2] == v21)
                  goto LABEL_133;
              }
              else
              {
                if (v28 >= *(_QWORD *)&v22)
                  v28 %= *(_QWORD *)&v22;
                if (v28 != v24)
                  break;
              }
              v26 = (_QWORD *)*v26;
            }
            while (v26);
          }
        }
      }
LABEL_36:
      v80 = *v20;
      v30 = *(_QWORD *)(a2 + 24);
      if (!v30)
        sub_20E86D37C();
      v31 = (*(uint64_t (**)(uint64_t, unint64_t *))(*(_QWORD *)v30 + 48))(v30, &v80);
      v32 = *(_QWORD *)(v31 + 208);
      v33 = *(_QWORD *)(v31 + 216);
      while (v32 != v33)
      {
        v34 = *(_QWORD *)(a3 + 24);
        if (!v34)
          sub_20E86D37C();
        v35 = *(_QWORD *)(v32 + 24);
        if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 48))(v34, v32) & 1) != 0)
        {
          v36 = (int8x8_t)a5[1];
          if (v36)
          {
            v37 = (uint8x8_t)vcnt_s8(v36);
            v37.i16[0] = vaddlv_u8(v37);
            if (v37.u32[0] > 1uLL)
            {
              v38 = v35;
              if (v35 >= *(_QWORD *)&v36)
                v38 = v35 % *(_QWORD *)&v36;
            }
            else
            {
              v38 = (*(_QWORD *)&v36 - 1) & v35;
            }
            v39 = *(_QWORD **)(*a5 + 8 * v38);
            if (v39)
            {
              v40 = (_QWORD *)*v39;
              if (v40)
              {
                if (v37.u32[0] < 2uLL)
                {
                  v41 = *(_QWORD *)&v36 - 1;
                  while (1)
                  {
                    v43 = v40[1];
                    if (v43 == v35)
                    {
                      if (v40[2] == v35)
                        goto LABEL_39;
                    }
                    else if ((v43 & v41) != v38)
                    {
                      goto LABEL_63;
                    }
                    v40 = (_QWORD *)*v40;
                    if (!v40)
                      goto LABEL_63;
                  }
                }
                do
                {
                  v42 = v40[1];
                  if (v42 == v35)
                  {
                    if (v40[2] == v35)
                      goto LABEL_39;
                  }
                  else
                  {
                    if (v42 >= *(_QWORD *)&v36)
                      v42 %= *(_QWORD *)&v36;
                    if (v42 != v38)
                      break;
                  }
                  v40 = (_QWORD *)*v40;
                }
                while (v40);
              }
            }
          }
LABEL_63:
          v80 = v35;
          v44 = *(_QWORD *)(a2 + 24);
          if (!v44)
            sub_20E86D37C();
          if ((*(uint64_t (**)(uint64_t, unint64_t *))(*(_QWORD *)v44 + 48))(v44, &v80))
          {
            v45 = v78;
            v46 = (unint64_t)v78 >> 9;
            v47 = (char *)__p[1];
            v48 = (_BYTE *)v77;
            v49 = (char *)__p[1] + 8 * ((unint64_t)v78 >> 9);
            if ((void *)v77 == __p[1])
            {
              v52 = *((_QWORD *)&v78 + 1);
              v56 = (*((_QWORD *)&v78 + 1) + (_QWORD)v78) >> 9;
              if (v46 == v56)
              {
                v51 = 0;
                goto LABEL_73;
              }
              v51 = 0;
              v55 = 0;
              v54 = (char *)__p[1] + 8 * v56;
              v50 = *v49;
            }
            else
            {
              v50 = *((_QWORD *)__p[1] + v46);
              v51 = (_QWORD *)(v50 + 8 * (v78 & 0x1FF));
              v52 = *((_QWORD *)&v78 + 1);
              v53 = (*((_QWORD *)&v78 + 1) + (_QWORD)v78) >> 9;
              v54 = (char *)__p[1] + 8 * v53;
              v55 = *(_QWORD *)v54 + 8 * ((*((_QWORD *)&v78 + 1) + v78) & 0x1FF);
              if (v46 == v53)
              {
                if (v51 == (_QWORD *)v55)
                  goto LABEL_75;
                while (*v51 != v35)
                {
                  if (++v51 == (_QWORD *)v55)
                  {
                    v51 = (_QWORD *)(*(_QWORD *)v54 + 8 * ((*((_QWORD *)&v78 + 1) + v78) & 0x1FF));
                    break;
                  }
                }
LABEL_73:
                if (__p[1])
                {
                  v50 = *v49;
LABEL_75:
                  if ((_QWORD *)(v50 + 4096) == v51)
                  {
                    v57 = (_QWORD **)(v49 + 1);
                    goto LABEL_97;
                  }
                }
                goto LABEL_100;
              }
            }
            v58 = (_QWORD *)(v50 + 4096);
            while (*v51 != v35)
            {
              if (++v51 == v58)
                goto LABEL_85;
            }
            if (v51 != v58)
              goto LABEL_100;
LABEL_85:
            v59 = v49 + 1;
            if (v49 + 1 == (_QWORD *)v54)
            {
              v62 = *(_QWORD **)v54;
              if (v62 == (_QWORD *)v55)
              {
                v51 = (_QWORD *)v55;
                goto LABEL_100;
              }
              v51 = v62;
              while (*v51 != v35)
              {
                if (++v51 == (_QWORD *)v55)
                {
                  v51 = (_QWORD *)v55;
                  break;
                }
              }
              if (v62 + 512 == v51)
              {
                v57 = (_QWORD **)(v49 + 2);
LABEL_97:
                v51 = *v57;
                if ((void *)v77 != __p[1])
                  goto LABEL_101;
              }
              else
              {
LABEL_100:
                if ((void *)v77 != __p[1])
                  goto LABEL_101;
              }
LABEL_104:
              if (v51)
                goto LABEL_39;
            }
            else
            {
              v60 = 0;
              ++v49;
              v61 = *v59;
              while (*(_QWORD *)(v61 + v60) != v35)
              {
                v60 += 8;
                if (v60 == 4096)
                  goto LABEL_85;
              }
              v51 = (_QWORD *)(v61 + v60);
              if ((void *)v77 == __p[1])
                goto LABEL_104;
LABEL_101:
              if (v51 != (_QWORD *)(*(_QWORD *)((char *)__p[1]
                                               + (((unint64_t)(v52 + v78) >> 6) & 0x3FFFFFFFFFFFFF8))
                                   + 8 * ((v52 + v78) & 0x1FF)))
                goto LABEL_39;
            }
            v63 = *(_QWORD *)(a4 + 24);
            if (v63)
            {
              v64 = (int8x8_t)a5[1];
              if (v64)
              {
                v65 = (uint8x8_t)vcnt_s8(v64);
                v65.i16[0] = vaddlv_u8(v65);
                if (v65.u32[0] > 1uLL)
                {
                  v66 = v35;
                  if (v35 >= *(_QWORD *)&v64)
                    v66 = v35 % *(_QWORD *)&v64;
                }
                else
                {
                  v66 = (*(_QWORD *)&v64 - 1) & v35;
                }
                v67 = *(_QWORD **)(*a5 + 8 * v66);
                if (v67)
                {
                  v68 = (_QWORD *)*v67;
                  if (v68)
                  {
                    if (v65.u32[0] < 2uLL)
                    {
                      v69 = *(_QWORD *)&v64 - 1;
                      while (1)
                      {
                        v71 = v68[1];
                        if (v35 == v71)
                        {
                          if (v68[2] == v35)
                            goto LABEL_127;
                        }
                        else if ((v71 & v69) != v66)
                        {
                          goto LABEL_126;
                        }
                        v68 = (_QWORD *)*v68;
                        if (!v68)
                          goto LABEL_126;
                      }
                    }
                    do
                    {
                      v70 = v68[1];
                      if (v35 == v70)
                      {
                        if (v68[2] == v35)
                          goto LABEL_127;
                      }
                      else
                      {
                        if (v70 >= *(_QWORD *)&v64)
                          v70 %= *(_QWORD *)&v64;
                        if (v70 != v66)
                          break;
                      }
                      v68 = (_QWORD *)*v68;
                    }
                    while (v68);
                  }
                }
              }
LABEL_126:
              v72 = *v20;
              v79 = v35;
              v80 = v72;
              (*(void (**)(uint64_t, unint64_t *, unint64_t *, uint64_t))(*(_QWORD *)v63 + 48))(v63, &v80, &v79, v32);
              v47 = (char *)__p[1];
              v48 = (_BYTE *)v77;
              v52 = *((_QWORD *)&v78 + 1);
              v45 = v78;
            }
LABEL_127:
            if (v48 == v47)
              v73 = 0;
            else
              v73 = ((v48 - v47) << 6) - 1;
            v74 = v45 + v52;
            if (v73 == v74)
            {
              sub_20F34605C((uint64_t)__p);
              v52 = *((_QWORD *)&v78 + 1);
              v47 = (char *)__p[1];
              v74 = v78 + *((_QWORD *)&v78 + 1);
            }
            *(_QWORD *)(*(_QWORD *)&v47[(v74 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v74 & 0x1FF)) = v35;
            *((_QWORD *)&v78 + 1) = v52 + 1;
          }
        }
LABEL_39:
        v32 += 472;
      }
      sub_20EDB1F30((uint64_t)a5, v20, v20);
      v13 = (void **)__p[1];
      v16 = *((_QWORD *)&v78 + 1);
      v11 = v78;
LABEL_133:
      --v16;
      *(_QWORD *)&v78 = ++v11;
      *((_QWORD *)&v78 + 1) = v16;
      if (v11 >= 0x400)
      {
        operator delete(*v13);
        v13 = (void **)((char *)__p[1] + 8);
        v11 = v78 - 512;
        __p[1] = (char *)__p[1] + 8;
        *(_QWORD *)&v78 = v78 - 512;
        v16 = *((_QWORD *)&v78 + 1);
      }
      if (!v16)
      {
        v14 = (void **)v77;
        *((_QWORD *)&v78 + 1) = 0;
        v17 = v77 - (_QWORD)v13;
        if ((_QWORD)v77 - (_QWORD)v13 < 0x11uLL)
          goto LABEL_12;
        goto LABEL_11;
      }
    }
  }
  *((_QWORD *)&v78 + 1) = 0;
  v17 = (char *)v14 - (char *)v13;
  if ((unint64_t)((char *)v14 - (char *)v13) < 0x11)
    goto LABEL_12;
  do
  {
LABEL_11:
    operator delete(*v13);
    v14 = (void **)v77;
    v13 = (void **)((char *)__p[1] + 8);
    __p[1] = v13;
    v17 = v77 - (_QWORD)v13;
  }
  while ((_QWORD)v77 - (_QWORD)v13 > 0x10uLL);
LABEL_12:
  v18 = v17 >> 3;
  if (v18 == 1)
  {
    v19 = 256;
  }
  else
  {
    if (v18 != 2)
      goto LABEL_139;
    v19 = 512;
  }
  *(_QWORD *)&v78 = v19;
LABEL_139:
  if (v13 != v14)
  {
    do
    {
      v75 = *v13++;
      operator delete(v75);
    }
    while (v13 != v14);
    if ((void *)v77 != __p[1])
      *(_QWORD *)&v77 = v77 + (((unint64_t)__p[1] - v77 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (__p[0])
    operator delete(__p[0]);
}

void sub_20F457E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E8D41E8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20F457E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E8D41E8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20F457E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E8D41E8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20F457EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E8D41E8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20F457EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E8D41E8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20F457ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E8D41E8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20F457EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E8D41E8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20F457EF8(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, unsigned int a4@<W3>, void **a5@<X8>)
{
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  char *v13;
  unint64_t v14;
  int v15;
  unsigned int v16;
  unint64_t v17;
  uint8x8_t v18;
  unint64_t v19;
  void **v20;
  int8x8_t *v21;
  uint64_t v22;
  int8x8_t v23;
  int8x8_t v24;
  void **v25;
  uint64_t v26;
  int8x8_t v27;
  int8x8_t v28;
  unint64_t *v29;
  int8x8_t v30;
  int8x8_t v31;
  float v32;
  _BOOL8 v33;
  unint64_t v34;
  unint64_t v35;
  size_t prime;
  unint64_t v37;
  uint8x8_t v38;
  uint64_t v39;
  uint64_t v40;
  int8x8_t **v41;
  unint64_t v42;
  unint64_t v43;
  uint8x8_t v44;
  unint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  uint8x8_t v55;
  _QWORD *v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  float v62;
  float v63;
  uint64_t v64;
  _QWORD *v65;
  _BOOL8 v66;
  unint64_t v67;
  unint64_t v68;
  size_t v69;
  int8x8_t v70;
  unint64_t v71;
  uint8x8_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  _QWORD *v77;
  _BYTE *v78;
  _BYTE *v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  __int128 v84;
  char *v85;
  _QWORD *v86;
  _QWORD *v87;
  unint64_t v88;
  char *v89;
  void **v90;
  _BYTE *v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char *v95;
  __int128 v96;
  char *v97;
  char *v98;
  __int128 v99;
  void **v100;
  char *v101;
  _QWORD *v102;
  _QWORD *v103;
  void *v104;
  int8x8_t v105;
  unint64_t v106;
  uint8x8_t v107;
  unint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  int v114;
  unint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  char *v120;
  __int128 v121;
  char *v122;
  char *v123;
  void *v124;
  void *v125;
  _BYTE *v126;
  _BYTE *v127;
  _BYTE *v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  char *v135;
  _OWORD *v136;
  __int128 *v137;
  uint64_t v138;
  __int128 v139;
  uint64_t v140;
  const void **v141;
  const void **v142;
  void *v143;
  _BYTE *v144;
  _BYTE *v145;
  uint64_t v146;
  _BYTE *v147;
  unint64_t v148;
  unsigned int v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  _BYTE *v155;
  const void *v156;
  int64_t v157;
  char *v158;
  char *v159;
  void *v160;
  _QWORD *v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  int8x8_t *v165;
  char *v166;
  int64_t v167;
  char *v168;
  char *v169;
  const void *v170;
  char *v171;
  __int128 v172;
  _QWORD *v173;
  _QWORD *v174;
  void *v175;
  void *v176;
  char *v177;
  const void **v178;
  _BYTE *v179;
  int64_t v180;
  int64_t v181;
  unint64_t v182;
  int64_t v183;
  unint64_t v184;
  _BYTE *v185;
  _QWORD *v186;
  int64_t v187;
  unint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  _OWORD *v193;
  char *v194;
  uint64_t v195;
  __int128 v196;
  uint64_t v197;
  void *v198;
  void *v199;
  unint64_t v200;
  void **v201;
  __int128 v202;
  char *v203;
  void **v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  char *v208;
  char *v209;
  char *v210;
  char *v211;
  __int128 v212;
  __int128 v213;
  void **v214;
  const void **v215;
  const void **v216;
  void *v217;
  const void **v218;
  void *v219;
  void *v220;
  void *v221;
  void *v222;
  void **v223;
  char *v224;
  char *v225;
  char *v226;
  void *v227;
  void *v228;
  char *v229;
  _QWORD *v230;
  char *v231;
  void *v232;
  void *v233;
  _QWORD *v234;
  void *v235;
  _QWORD *v236;
  _QWORD *v237;
  void *v238;
  _QWORD *v239;
  void *v240;
  _QWORD *v241;
  uint64_t v244;
  _QWORD *v245;
  uint64_t __sz;
  void *__sza;
  uint64_t v248;
  const void **v249;
  _QWORD *v250;
  uint64_t v252;
  uint64_t v253;
  void *v255;
  const void **v256;
  void *__p[6];
  _BYTE v258[28];
  __int128 v259;
  __int128 v260;
  float v261;
  int8x8_t *v262;
  char *v263;
  __int128 v264;
  void **v265;

  v6 = a3;
  v8 = *a2;
  v7 = a2[1];
  v259 = 0u;
  v260 = 0u;
  v261 = 1.0;
  v248 = v7;
  v244 = v8;
  v9 = v7 - v8;
  v10 = 0x6DB6DB6DB6DB6DB7 * (v9 >> 3);
  if (v9)
  {
    __sz = 0x4924924924924928 * (v9 >> 3);
    v11 = v8;
    v252 = 0x6DB6DB6DB6DB6DB7 * (v9 >> 3);
    do
    {
      v14 = *((_QWORD *)&v259 + 1);
      v15 = *(_DWORD *)(v11 + 16);
      v16 = *(_DWORD *)(v11 + 8);
      v17 = v16 ^ __ROR4__(v15, 13);
      if (!*((_QWORD *)&v259 + 1))
      {
        memset(__p, 0, 32);
        LODWORD(__p[4]) = 1065353216;
LABEL_56:
        v21 = (int8x8_t *)operator new(0x50uLL);
        v262 = v21;
        v263 = (char *)&v260;
        *v21 = 0;
        v21[1] = (int8x8_t)v17;
        v31 = *(int8x8_t *)(v11 + 16);
        *(_OWORD *)v21[2].i8 = *(_OWORD *)v11;
        __p[0] = 0;
        __p[1] = 0;
        v21[4] = v31;
        v21[5] = 0;
        v21[7] = 0;
        v21[8] = 0;
        v21[6] = 0;
        v21[9].i32[0] = 1065353216;
        LOBYTE(v264) = 1;
        v32 = (float)(unint64_t)(*((_QWORD *)&v260 + 1) + 1);
        if (v14 && (float)(v261 * (float)v14) >= v32)
        {
          v17 = v10;
          v10 = v252;
        }
        else
        {
          v33 = v14 < 3 || (v14 & (v14 - 1)) != 0;
          v10 = v252;
          v34 = v33 | (2 * v14);
          v35 = vcvtps_u32_f32(v32 / v261);
          if (v34 <= v35)
            prime = v35;
          else
            prime = v34;
          if (prime == 1)
          {
            prime = 2;
          }
          else if ((prime & (prime - 1)) != 0)
          {
            prime = std::__next_prime(prime);
            v14 = *((_QWORD *)&v259 + 1);
          }
          if (prime > v14)
            goto LABEL_70;
          if (prime < v14)
          {
            v37 = vcvtps_u32_f32((float)*((unint64_t *)&v260 + 1) / v261);
            if (v14 < 3 || (v38 = (uint8x8_t)vcnt_s8((int8x8_t)v14), v38.i16[0] = vaddlv_u8(v38), v38.u32[0] > 1uLL))
            {
              v37 = std::__next_prime(v37);
            }
            else
            {
              v39 = 1 << -(char)__clz(v37 - 1);
              if (v37 >= 2)
                v37 = v39;
            }
            if (prime <= v37)
              prime = v37;
            if (prime < v14)
LABEL_70:
              sub_20E8D2B3C((uint64_t)&v259, prime);
          }
          v14 = *((_QWORD *)&v259 + 1);
          if ((v14 & (v14 - 1)) != 0)
          {
            if (*((_QWORD *)&v259 + 1) <= v17)
              v17 %= *((_QWORD *)&v259 + 1);
          }
          else
          {
            v17 = (DWORD2(v259) - 1) & v17;
          }
        }
        v40 = v259;
        v41 = *(int8x8_t ***)(v259 + 8 * v17);
        if (v41)
        {
          *v21 = (int8x8_t)*v41;
          goto LABEL_93;
        }
        *v21 = (int8x8_t)v260;
        *(_QWORD *)&v260 = v21;
        *(_QWORD *)(v40 + 8 * v17) = &v260;
        if (*v21)
        {
          v42 = *(_QWORD *)(*(_QWORD *)v21 + 8);
          if ((v14 & (v14 - 1)) != 0)
          {
            if (v42 >= v14)
              v42 %= v14;
          }
          else
          {
            v42 &= v14 - 1;
          }
          v41 = (int8x8_t **)(v259 + 8 * v42);
LABEL_93:
          *v41 = v21;
        }
        ++*((_QWORD *)&v260 + 1);
LABEL_95:
        v29 = (unint64_t *)(v11 + 24);
        v30 = v21[6];
        if (v30)
          goto LABEL_96;
        goto LABEL_115;
      }
      v18 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v259 + 8));
      v18.i16[0] = vaddlv_u8(v18);
      if (v18.u32[0] > 1uLL)
      {
        v19 = v17;
        if (*((_QWORD *)&v259 + 1) <= v17)
          v19 = v17 % *((_QWORD *)&v259 + 1);
      }
      else
      {
        v19 = (DWORD2(v259) - 1) & v17;
      }
      v20 = *(void ***)(v259 + 8 * v19);
      if (v20)
      {
        v21 = (int8x8_t *)*v20;
        if (*v20)
        {
          v22 = *(_QWORD *)v11;
          if (v18.u32[0] < 2uLL)
          {
            while (1)
            {
              v24 = v21[1];
              if (*(_QWORD *)&v24 == v17)
              {
                if (v21[4].i32[0] == v15 && *(_QWORD *)&v21[2] == v22 && v21[3].i32[0] == v16)
                  goto LABEL_95;
              }
              else if ((*(_QWORD *)&v24 & (*((_QWORD *)&v259 + 1) - 1)) != v19)
              {
                goto LABEL_31;
              }
              v21 = (int8x8_t *)*v21;
              if (!v21)
                goto LABEL_31;
            }
          }
          do
          {
            v23 = v21[1];
            if (*(_QWORD *)&v23 == v17)
            {
              if (v21[4].i32[0] == v15 && *(_QWORD *)&v21[2] == v22 && v21[3].i32[0] == v16)
                goto LABEL_95;
            }
            else
            {
              if (*(_QWORD *)&v23 >= *((_QWORD *)&v259 + 1))
                *(_QWORD *)&v23 %= *((_QWORD *)&v259 + 1);
              if (*(_QWORD *)&v23 != v19)
                break;
            }
            v21 = (int8x8_t *)*v21;
          }
          while (v21);
        }
      }
LABEL_31:
      memset(__p, 0, 32);
      LODWORD(__p[4]) = 1065353216;
      if (v18.u32[0] > 1uLL)
      {
        v10 = v17;
        if (*((_QWORD *)&v259 + 1) <= v17)
          v10 = v17 % *((_QWORD *)&v259 + 1);
      }
      else
      {
        v10 = (DWORD2(v259) - 1) & v17;
      }
      v25 = *(void ***)(v259 + 8 * v10);
      if (!v25)
        goto LABEL_56;
      v21 = (int8x8_t *)*v25;
      if (!*v25)
        goto LABEL_56;
      v26 = *(_QWORD *)v11;
      if (v18.u32[0] < 2uLL)
      {
        while (1)
        {
          v28 = v21[1];
          if (*(_QWORD *)&v28 == v17)
          {
            if (v21[4].i32[0] == v15 && *(_QWORD *)&v21[2] == v26 && v21[3].i32[0] == v16)
              goto LABEL_54;
          }
          else if ((*(_QWORD *)&v28 & (*((_QWORD *)&v259 + 1) - 1)) != v10)
          {
            goto LABEL_56;
          }
          v21 = (int8x8_t *)*v21;
          if (!v21)
            goto LABEL_56;
        }
      }
      while (1)
      {
        v27 = v21[1];
        if (*(_QWORD *)&v27 == v17)
          break;
        if (*(_QWORD *)&v27 >= *((_QWORD *)&v259 + 1))
          *(_QWORD *)&v27 %= *((_QWORD *)&v259 + 1);
        if (*(_QWORD *)&v27 != v10)
          goto LABEL_56;
LABEL_40:
        v21 = (int8x8_t *)*v21;
        if (!v21)
          goto LABEL_56;
      }
      if (v21[4].i32[0] != v15 || *(_QWORD *)&v21[2] != v26 || v21[3].i32[0] != v16)
        goto LABEL_40;
LABEL_54:
      v10 = v252;
      v29 = (unint64_t *)(v11 + 24);
      v30 = v21[6];
      if (!*(_QWORD *)&v30)
        goto LABEL_115;
LABEL_96:
      v43 = *v29;
      v44 = (uint8x8_t)vcnt_s8(v30);
      v44.i16[0] = vaddlv_u8(v44);
      if (v44.u32[0] > 1uLL)
      {
        v45 = *v29;
        if (v43 >= *(_QWORD *)&v30)
          v45 = v43 % *(_QWORD *)&v30;
      }
      else
      {
        v45 = (*(_QWORD *)&v30 - 1) & v43;
      }
      v46 = *(_QWORD **)(*(_QWORD *)&v21[5] + 8 * v45);
      if (v46)
      {
        v47 = (_QWORD *)*v46;
        if (v47)
        {
          if (v44.u32[0] < 2uLL)
          {
            v48 = *(_QWORD *)&v30 - 1;
            while (1)
            {
              v50 = v47[1];
              if (v50 == v43)
              {
                if (v47[2] == v43)
                  goto LABEL_183;
              }
              else if ((v50 & v48) != v45)
              {
                goto LABEL_115;
              }
              v47 = (_QWORD *)*v47;
              if (!v47)
                goto LABEL_115;
            }
          }
          do
          {
            v49 = v47[1];
            if (v49 == v43)
            {
              if (v47[2] == v43)
                goto LABEL_183;
            }
            else
            {
              if (v49 >= *(_QWORD *)&v30)
                v49 %= *(_QWORD *)&v30;
              if (v49 != v45)
                break;
            }
            v47 = (_QWORD *)*v47;
          }
          while (v47);
        }
      }
LABEL_115:
      v51 = sub_20F45F1E0((uint64_t)&v259, (uint64_t *)v11, v11);
      v52 = (uint64_t *)(v51 + 40);
      v53 = *v29;
      v54 = *((_QWORD *)v51 + 6);
      if (v54)
      {
        v55 = (uint8x8_t)vcnt_s8((int8x8_t)v54);
        v55.i16[0] = vaddlv_u8(v55);
        if (v55.u32[0] > 1uLL)
        {
          v5 = *v29;
          if (v54 <= v53)
            v5 = v53 % v54;
        }
        else
        {
          v5 = (v54 - 1) & v53;
        }
        v56 = *(_QWORD **)(*v52 + 8 * v5);
        if (v56)
        {
          v57 = (_QWORD *)*v56;
          if (v57)
          {
            if (v55.u32[0] < 2uLL)
            {
              while (1)
              {
                v59 = v57[1];
                if (v59 == v53)
                {
                  if (v57[2] == v53)
                    goto LABEL_176;
                }
                else if ((v59 & (v54 - 1)) != v5)
                {
                  goto LABEL_135;
                }
                v57 = (_QWORD *)*v57;
                if (!v57)
                  goto LABEL_135;
              }
            }
            do
            {
              v58 = v57[1];
              if (v58 == v53)
              {
                if (v57[2] == v53)
                  goto LABEL_176;
              }
              else
              {
                if (v58 >= v54)
                  v58 %= v54;
                if (v58 != v5)
                  break;
              }
              v57 = (_QWORD *)*v57;
            }
            while (v57);
          }
        }
      }
LABEL_135:
      v60 = operator new(0x30uLL);
      v61 = v51 + 56;
      __p[0] = v60;
      __p[1] = v51 + 56;
      *v60 = 0;
      v60[1] = v53;
      v60[2] = v53;
      v60[3] = 0;
      v60[4] = 0;
      v60[5] = 0;
      LOBYTE(__p[2]) = 1;
      v62 = (float)(unint64_t)(*((_QWORD *)v51 + 8) + 1);
      v63 = *((float *)v51 + 18);
      if (v54 && (float)(v63 * (float)v54) >= v62)
      {
        v64 = *v52;
        v65 = *(_QWORD **)(*v52 + 8 * v5);
        if (v65)
          goto LABEL_138;
LABEL_163:
        *v60 = *v61;
        *v61 = v60;
        *(_QWORD *)(v64 + 8 * v5) = v61;
        v10 = v252;
        if (*v60)
        {
          v75 = *(_QWORD *)(*v60 + 8);
          if ((v54 & (v54 - 1)) != 0)
          {
            if (v75 >= v54)
              v75 %= v54;
          }
          else
          {
            v75 &= v54 - 1;
          }
          v65 = (_QWORD *)(*v52 + 8 * v75);
          goto LABEL_174;
        }
      }
      else
      {
        v66 = v54 < 3 || (v54 & (v54 - 1)) != 0;
        v67 = v66 | (2 * v54);
        v68 = vcvtps_u32_f32(v62 / v63);
        if (v67 <= v68)
          v69 = v68;
        else
          v69 = v67;
        if (v69 == 1)
        {
          v69 = 2;
        }
        else if ((v69 & (v69 - 1)) != 0)
        {
          v69 = std::__next_prime(v69);
        }
        v70 = *(int8x8_t *)(v51 + 48);
        if (v69 > *(_QWORD *)&v70)
          goto LABEL_150;
        if (v69 < *(_QWORD *)&v70)
        {
          v71 = vcvtps_u32_f32((float)*((unint64_t *)v51 + 8) / *((float *)v51 + 18));
          if (*(_QWORD *)&v70 < 3uLL || (v72 = (uint8x8_t)vcnt_s8(v70), v72.i16[0] = vaddlv_u8(v72), v72.u32[0] > 1uLL))
          {
            v71 = std::__next_prime(v71);
          }
          else
          {
            v73 = 1 << -(char)__clz(v71 - 1);
            if (v71 >= 2)
              v71 = v73;
          }
          if (v69 <= v71)
            v69 = v71;
          if (v69 < *(_QWORD *)&v70)
LABEL_150:
            sub_20E8D2B3C((uint64_t)v52, v69);
        }
        v54 = *((_QWORD *)v51 + 6);
        v74 = v54 - 1;
        if ((v54 & (v54 - 1)) != 0)
        {
          if (v54 <= v53)
          {
            v5 = v53 % v54;
            v64 = *v52;
            v65 = *(_QWORD **)(*v52 + 8 * (v53 % v54));
            if (!v65)
              goto LABEL_163;
          }
          else
          {
            v5 = v53;
            v64 = *v52;
            v65 = *(_QWORD **)(*v52 + 8 * v53);
            if (!v65)
              goto LABEL_163;
          }
        }
        else
        {
          v5 = v74 & v53;
          v64 = *v52;
          v65 = *(_QWORD **)(*v52 + 8 * (v74 & v53));
          if (!v65)
            goto LABEL_163;
        }
LABEL_138:
        *v60 = *v65;
        v10 = v252;
LABEL_174:
        *v65 = v60;
      }
      ++*((_QWORD *)v51 + 8);
LABEL_176:
      v76 = sub_20F45F1E0((uint64_t)&v259, (uint64_t *)v11, v11);
      v77 = sub_20F45F538((uint64_t)(v76 + 40), *v29, v29);
      v5 = (unint64_t)v77;
      v78 = (_BYTE *)v77[3];
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v77[5] - (_QWORD)v78) >> 3) < v10)
      {
        if (v10 <= 0xAAAAAAAAAAAAAAALL)
        {
          v79 = (_BYTE *)v77[4];
          v80 = (char *)operator new(__sz);
          v81 = &v80[v79 - v78];
          v82 = v81;
          if (v79 != v78)
          {
            v83 = &v80[v79 - v78];
            do
            {
              v84 = *(_OWORD *)(v79 - 24);
              v82 = v83 - 24;
              *((_DWORD *)v83 - 2) = *((_DWORD *)v79 - 2);
              *(_OWORD *)(v83 - 24) = v84;
              v79 -= 24;
              v83 -= 24;
            }
            while (v79 != v78);
          }
          *(_QWORD *)(v5 + 24) = v82;
          *(_QWORD *)(v5 + 32) = v81;
          *(_QWORD *)(v5 + 40) = &v80[24 * v10];
          if (v78)
            operator delete(v78);
          goto LABEL_183;
        }
LABEL_392:
        sub_20E867F44();
      }
LABEL_183:
      v85 = sub_20F45F1E0((uint64_t)&v259, (uint64_t *)v11, v11);
      v86 = sub_20F45F538((uint64_t)(v85 + 40), *v29, v29);
      v87 = v86;
      v89 = (char *)v86[4];
      v88 = v86[5];
      if ((unint64_t)v89 < v88)
      {
        v12 = *(_OWORD *)v29;
        *((_QWORD *)v89 + 2) = v29[2];
        *(_OWORD *)v89 = v12;
        v13 = v89 + 24;
        v6 = a3;
      }
      else
      {
        v90 = (void **)(v86 + 3);
        v91 = (_BYTE *)v86[3];
        v92 = 0xAAAAAAAAAAAAAAABLL * ((v89 - v91) >> 3) + 1;
        if (v92 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_392;
        v93 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v88 - (_QWORD)v91) >> 3);
        if (2 * v93 > v92)
          v92 = 2 * v93;
        if (v93 >= 0x555555555555555)
          v94 = 0xAAAAAAAAAAAAAAALL;
        else
          v94 = v92;
        if (v94)
        {
          if (v94 > 0xAAAAAAAAAAAAAAALL)
            sub_20E877A38();
          v95 = (char *)operator new(24 * v94);
        }
        else
        {
          v95 = 0;
        }
        v96 = *(_OWORD *)v29;
        v97 = &v95[8 * ((v89 - v91) >> 3)];
        *((_QWORD *)v97 + 2) = v29[2];
        *(_OWORD *)v97 = v96;
        v98 = v97;
        if (v89 != v91)
        {
          do
          {
            v99 = *(_OWORD *)(v89 - 24);
            *((_DWORD *)v98 - 2) = *((_DWORD *)v89 - 2);
            *(_OWORD *)(v98 - 24) = v99;
            v98 -= 24;
            v89 -= 24;
          }
          while (v89 != v91);
          v89 = (char *)*v90;
        }
        v13 = v97 + 24;
        v87[3] = v98;
        v87[4] = v97 + 24;
        v87[5] = &v95[24 * v94];
        v6 = a3;
        if (v89)
          operator delete(v89);
      }
      v87[4] = v13;
      v11 += 56;
    }
    while (v11 != v248);
  }
  v100 = a5;
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  if (v244 != v248)
  {
    if (v10 > 0x333333333333333)
      sub_20F45A4CC();
    v101 = (char *)operator new(80 * v10);
    *a5 = v101;
    a5[1] = v101;
    a5[2] = &v101[80 * v10];
  }
  if ((_QWORD)v260)
  {
    v102 = (_QWORD *)v260;
    while (1)
    {
      v241 = v102;
      v103 = (_QWORD *)v102[7];
      if (v103)
        break;
LABEL_204:
      v102 = (_QWORD *)*v241;
      if (!*v241)
      {
        v234 = (_QWORD *)v260;
        if ((_QWORD)v260)
        {
          do
          {
            v236 = (_QWORD *)*v234;
            v237 = (_QWORD *)v234[7];
            if (v237)
            {
              do
              {
                v239 = (_QWORD *)*v237;
                v240 = (void *)v237[3];
                if (v240)
                {
                  v237[4] = v240;
                  operator delete(v240);
                }
                operator delete(v237);
                v237 = v239;
              }
              while (v239);
            }
            v238 = (void *)v234[5];
            v234[5] = 0;
            if (v238)
              operator delete(v238);
            operator delete(v234);
            v234 = v236;
          }
          while (v236);
        }
        goto LABEL_371;
      }
    }
    v245 = v102 + 2;
LABEL_210:
    v105 = (int8x8_t)a1[1];
    if (!*(_QWORD *)&v105)
      goto LABEL_381;
    v106 = v103[2];
    v107 = (uint8x8_t)vcnt_s8(v105);
    v107.i16[0] = vaddlv_u8(v107);
    if (v107.u32[0] > 1uLL)
    {
      v108 = v103[2];
      if (v106 >= *(_QWORD *)&v105)
        v108 = v106 % *(_QWORD *)&v105;
    }
    else
    {
      v108 = (*(_QWORD *)&v105 - 1) & v106;
    }
    v109 = *(_QWORD **)(*a1 + 8 * v108);
    if (!v109 || (v110 = (_QWORD *)*v109) == 0)
    {
LABEL_381:
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingTypes/src/MapDataUtil.cpp", 1726, (uint64_t)"ref_submap_iter != active_submap_data_set.end()", 47, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    if (v107.u32[0] < 2uLL)
    {
      v111 = *(_QWORD *)&v105 - 1;
      while (1)
      {
        v113 = v110[1];
        if (v106 == v113)
        {
          if (v110[2] == v106)
            goto LABEL_230;
        }
        else if ((v113 & v111) != v108)
        {
          goto LABEL_381;
        }
        v110 = (_QWORD *)*v110;
        if (!v110)
          goto LABEL_381;
      }
    }
    while (1)
    {
      v112 = v110[1];
      if (v106 == v112)
      {
        if (v110[2] == v106)
        {
LABEL_230:
          *(_QWORD *)&v258[8] = 0;
          *(_QWORD *)&v258[16] = 0;
          memset(__p, 0, sizeof(__p));
          *(_DWORD *)&v258[24] = -1;
          v114 = *((_DWORD *)v245 + 4);
          *(_OWORD *)&v258[8] = *(_OWORD *)v245;
          *(_DWORD *)&v258[24] = v114;
          *(_QWORD *)v258 = v103[2];
          sub_20F27B5E0(*(_QWORD *)(*(_QWORD *)(v110[3] + 424) + 8), (uint64_t)(v103 + 3), a4, (uint64_t)&v255);
          v115 = 0xAAAAAAAAAAAAAAABLL * (((char *)v256 - (_BYTE *)v255) >> 3);
          v116 = (char *)__p[0];
          if (0xAAAAAAAAAAAAAAABLL * (((char *)__p[2] - (char *)__p[0]) >> 3) < v115)
          {
            if (v115 > 0xAAAAAAAAAAAAAAALL)
              sub_20E867F44();
            v117 = (char *)__p[1];
            v118 = (char *)operator new((char *)v256 - (_BYTE *)v255);
            v119 = &v118[24 * ((v117 - v116) / 24)];
            v120 = v119;
            if (v117 == v116)
            {
              __p[0] = &v118[24 * ((v117 - v116) / 24)];
              __p[1] = __p[0];
              __p[2] = &v118[24 * v115];
            }
            else
            {
              do
              {
                v121 = *(_OWORD *)(v117 - 24);
                v117 -= 24;
                *(_OWORD *)(v120 - 24) = v121;
                v120 -= 24;
                *((_QWORD *)v120 + 2) = *((_QWORD *)v117 + 2);
                *(_QWORD *)v117 = 0;
                *((_QWORD *)v117 + 1) = 0;
                *((_QWORD *)v117 + 2) = 0;
              }
              while (v117 != v116);
              v116 = (char *)__p[0];
              v122 = (char *)__p[1];
              __p[0] = v120;
              __p[1] = v119;
              __p[2] = &v118[24 * v115];
              if (v122 != v116)
              {
                v123 = v122;
                do
                {
                  v125 = (void *)*((_QWORD *)v123 - 3);
                  v123 -= 24;
                  v124 = v125;
                  if (v125)
                  {
                    *((_QWORD *)v122 - 2) = v124;
                    operator delete(v124);
                  }
                  v122 = v123;
                }
                while (v123 != v116);
              }
            }
            v100 = a5;
            if (v116)
              operator delete(v116);
          }
          v126 = __p[3];
          if (v115 > ((char *)__p[5] - (char *)__p[3]) >> 3)
          {
            if (v115 >> 61)
              sub_20E867F44();
            v127 = __p[4];
            v128 = operator new(8 * v115);
            v129 = v127 - v126;
            v130 = &v128[(v127 - v126) & 0xFFFFFFFFFFFFFFF8];
            v131 = v130;
            if (v127 != v126)
            {
              if ((unint64_t)(v129 - 8) < 0x58)
              {
                v131 = &v128[(v127 - v126) & 0xFFFFFFFFFFFFFFF8];
                goto LABEL_251;
              }
              v131 = &v128[(v127 - v126) & 0xFFFFFFFFFFFFFFF8];
              if (v127 - v128 - (v129 & 0xFFFFFFFFFFFFFFF8) < 0x20)
                goto LABEL_397;
              v132 = v129 >> 3;
              v133 = ((unint64_t)(v129 - 8) >> 3) + 1;
              v134 = 8 * (v133 & 0x3FFFFFFFFFFFFFFCLL);
              v135 = &v127[-v134];
              v131 = &v130[-v134];
              v136 = &v128[8 * v132 - 16];
              v137 = (__int128 *)(v127 - 16);
              v138 = v133 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v139 = *v137;
                *(v136 - 1) = *(v137 - 1);
                *v136 = v139;
                v136 -= 2;
                v137 -= 2;
                v138 -= 4;
              }
              while (v138);
              v127 = v135;
              if (v133 != (v133 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_397:
                do
                {
LABEL_251:
                  v140 = *((_QWORD *)v127 - 1);
                  v127 -= 8;
                  *((_QWORD *)v131 - 1) = v140;
                  v131 -= 8;
                }
                while (v127 != v126);
              }
            }
            __p[3] = v131;
            __p[4] = v130;
            __p[5] = &v128[8 * v115];
            v100 = a5;
            if (v126)
              operator delete(v126);
          }
          v250 = v103;
          v142 = (const void **)v255;
          v141 = v256;
          while (2)
          {
            if (v142 != v141)
            {
              v144 = *v142;
              v145 = v142[1];
              if (*v142 == v145)
                goto LABEL_257;
              v146 = v6[1];
              if (v146 == *v6)
                goto LABEL_257;
              v147 = *v142;
              while (1)
              {
                v148 = *(_QWORD *)v147;
                v149 = *((_DWORD *)v147 + 2);
                v150 = *v6;
                v151 = 0xAAAAAAAAAAAAAAABLL * ((v146 - *v6) >> 3);
                do
                {
                  v152 = v151 >> 1;
                  v153 = v150 + 24 * (v151 >> 1);
                  if (*(_QWORD *)v153 < v148 || *(_QWORD *)v153 == v148 && *(_DWORD *)(v153 + 8) < v149)
                  {
                    v150 = v153 + 24;
                    v152 = v151 + ~v152;
                  }
                  v151 = v152;
                }
                while (v152);
                if (v150 != v146 && *(_QWORD *)v150 == v148 && *(_DWORD *)(v150 + 8) == v149)
                  break;
                v147 += 24;
                if (v147 == v145)
                  goto LABEL_257;
              }
              v253 = *(_QWORD *)(v150 + 16);
              v154 = __p[1];
              if (__p[1] >= __p[2])
              {
                v249 = v141;
                v161 = __p[0];
                v162 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3);
                v163 = v162 + 1;
                if (v162 + 1 > 0xAAAAAAAAAAAAAAALL)
                  sub_20E867F44();
                if (0x5555555555555556 * (((char *)__p[2] - (char *)__p[0]) >> 3) > v163)
                  v163 = 0x5555555555555556 * (((char *)__p[2] - (char *)__p[0]) >> 3);
                if (0xAAAAAAAAAAAAAAABLL * (((char *)__p[2] - (char *)__p[0]) >> 3) >= 0x555555555555555)
                  v164 = 0xAAAAAAAAAAAAAAALL;
                else
                  v164 = v163;
                v265 = &__p[2];
                if (v164)
                {
                  if (v164 > 0xAAAAAAAAAAAAAAALL)
                    sub_20E877A38();
                  v165 = (int8x8_t *)operator new(24 * v164);
                }
                else
                {
                  v165 = 0;
                }
                v262 = v165;
                v263 = (char *)&v165[3 * v162];
                v166 = v263;
                *((_QWORD *)v263 + 1) = 0;
                *((_QWORD *)v166 + 2) = 0;
                *(_QWORD *)&v264 = &v165[3 * v162];
                *((_QWORD *)&v264 + 1) = &v165[3 * v164];
                __sza = (void *)*((_QWORD *)&v264 + 1);
                *(_QWORD *)v166 = 0;
                v167 = v145 - v144;
                if (0xAAAAAAAAAAAAAAABLL * (v167 >> 3) > 0xAAAAAAAAAAAAAAALL)
                  sub_20E867F44();
                v168 = (char *)operator new(v167);
                *(_QWORD *)v166 = v168;
                v169 = &v168[8 * (v167 >> 3)];
                *((_QWORD *)v166 + 2) = v169;
                v170 = v144;
                v160 = v166 + 24;
                memcpy(v168, v170, v167 - 4);
                *((_QWORD *)v166 + 1) = v169;
                *(_QWORD *)&v264 = v166 + 24;
                if (v154 == v161)
                {
                  __p[0] = v166;
                  __p[1] = v166 + 24;
                  v141 = v249;
                  __p[2] = __sza;
                  v6 = a3;
                }
                else
                {
                  v141 = v249;
                  do
                  {
                    v171 = v166;
                    *((_QWORD *)v166 - 2) = 0;
                    *((_QWORD *)v166 - 1) = 0;
                    v172 = *(_OWORD *)(v154 - 3);
                    v154 -= 3;
                    *(_OWORD *)(v166 - 24) = v172;
                    v166 -= 24;
                    *((_QWORD *)v171 - 1) = v154[2];
                    *v154 = 0;
                    v154[1] = 0;
                    v154[2] = 0;
                  }
                  while (v154 != v161);
                  v154 = __p[0];
                  v173 = __p[1];
                  __p[0] = v166;
                  *(_OWORD *)&__p[1] = v264;
                  v160 = (void *)v264;
                  v6 = a3;
                  if (v173 != v154)
                  {
                    v174 = v173;
                    do
                    {
                      v176 = (void *)*(v174 - 3);
                      v174 -= 3;
                      v175 = v176;
                      if (v176)
                      {
                        *(v173 - 2) = v175;
                        operator delete(v175);
                      }
                      v173 = v174;
                    }
                    while (v174 != v154);
                  }
                }
                if (v154)
                  operator delete(v154);
              }
              else
              {
                *(_QWORD *)__p[1] = 0;
                v154[1] = 0;
                v154[2] = 0;
                v156 = *v142;
                v155 = v142[1];
                v157 = v155 - (_BYTE *)*v142;
                if (v155 != *v142)
                {
                  if (0xAAAAAAAAAAAAAAABLL * (v157 >> 3) > 0xAAAAAAAAAAAAAAALL)
                    sub_20E867F44();
                  v158 = (char *)operator new(v157);
                  *v154 = v158;
                  v154[1] = v158;
                  v159 = &v158[8 * (v157 >> 3)];
                  v154[2] = v159;
                  memcpy(v158, v156, v157 - 4);
                  v154[1] = v159;
                }
                v160 = v154 + 3;
              }
              __p[1] = v160;
              v177 = (char *)__p[4];
              if (__p[4] < __p[5])
              {
                *(_QWORD *)__p[4] = v253;
                v143 = v177 + 8;
                v100 = a5;
                goto LABEL_256;
              }
              v178 = v141;
              v179 = __p[3];
              v180 = (char *)__p[4] - (char *)__p[3];
              v181 = ((char *)__p[4] - (char *)__p[3]) >> 3;
              v182 = v181 + 1;
              if ((unint64_t)(v181 + 1) >> 61)
                sub_20E867F44();
              v183 = (char *)__p[5] - (char *)__p[3];
              if (((char *)__p[5] - (char *)__p[3]) >> 2 > v182)
                v182 = v183 >> 2;
              if ((unint64_t)v183 >= 0x7FFFFFFFFFFFFFF8)
                v184 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v184 = v182;
              if (v184)
              {
                if (v184 >> 61)
                  sub_20E877A38();
                v185 = operator new(8 * v184);
                v186 = &v185[8 * v181];
                *v186 = v253;
                v143 = v186 + 1;
                v187 = v177 - v179;
                if (v177 != v179)
                {
LABEL_310:
                  v188 = v187 - 8;
                  if (v188 < 0x58)
                  {
                    v141 = v178;
                    goto LABEL_318;
                  }
                  v189 = v177 - v185 - v180;
                  v141 = v178;
                  if (v189 < 0x20)
                    goto LABEL_398;
                  v190 = (v188 >> 3) + 1;
                  v191 = 8 * (v190 & 0x3FFFFFFFFFFFFFFCLL);
                  v192 = &v177[-v191];
                  v186 = (_QWORD *)((char *)v186 - v191);
                  v193 = &v185[8 * v181 - 16];
                  v194 = v177 - 16;
                  v195 = v190 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v196 = *(_OWORD *)v194;
                    *(v193 - 1) = *((_OWORD *)v194 - 1);
                    *v193 = v196;
                    v193 -= 2;
                    v194 -= 32;
                    v195 -= 4;
                  }
                  while (v195);
                  v177 = v192;
                  if (v190 != (v190 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_398:
                    do
                    {
LABEL_318:
                      v197 = *((_QWORD *)v177 - 1);
                      v177 -= 8;
                      *--v186 = v197;
                    }
                    while (v177 != v179);
                  }
LABEL_319:
                  __p[3] = v186;
                  __p[4] = v143;
                  __p[5] = &v185[8 * v184];
                  if (v179)
                    operator delete(v179);
                  v100 = a5;
LABEL_256:
                  __p[4] = v143;
LABEL_257:
                  v142 += 3;
                  continue;
                }
              }
              else
              {
                v185 = 0;
                v186 = (_QWORD *)(8 * v181);
                *(_QWORD *)(8 * v181) = v253;
                v143 = (void *)(8 * v181 + 8);
                v187 = v177 - v179;
                if (v177 != v179)
                  goto LABEL_310;
              }
              v141 = v178;
              goto LABEL_319;
            }
            break;
          }
          v198 = __p[0];
          v199 = __p[1];
          if (__p[0] != __p[1])
          {
            v201 = (void **)v100[1];
            v200 = (unint64_t)v100[2];
            if ((unint64_t)v201 < v200)
            {
              v201[2] = 0;
              v201[3] = 0;
              *v201 = 0;
              v201[1] = 0;
              *(_OWORD *)v201 = *(_OWORD *)__p;
              v201[2] = __p[2];
              memset(__p, 0, 24);
              v201[4] = 0;
              v201[5] = 0;
              *(_OWORD *)(v201 + 3) = *(_OWORD *)&__p[3];
              v201[5] = __p[5];
              memset(&__p[3], 0, 24);
              v202 = *(_OWORD *)v258;
              *(_OWORD *)((char *)v201 + 60) = *(_OWORD *)&v258[12];
              *((_OWORD *)v201 + 3) = v202;
              v203 = (char *)(v201 + 10);
              goto LABEL_340;
            }
            v204 = (void **)*v100;
            v205 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v201 - (char *)v204) >> 4) + 1;
            if (v205 > 0x333333333333333)
              sub_20F45A4CC();
            v206 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v200 - (_QWORD)v204) >> 4);
            if (2 * v206 > v205)
              v205 = 2 * v206;
            if (v206 >= 0x199999999999999)
              v207 = 0x333333333333333;
            else
              v207 = v205;
            if (v207)
            {
              if (v207 > 0x333333333333333)
                sub_20E877A38();
              v208 = (char *)operator new(80 * v207);
            }
            else
            {
              v208 = 0;
            }
            v209 = &v208[16 * (((char *)v201 - (char *)v204) >> 4)];
            *(_QWORD *)v209 = v198;
            *((_QWORD *)v209 + 1) = v199;
            *((void **)v209 + 2) = __p[2];
            v210 = &v208[80 * v207];
            memset(__p, 0, 24);
            *(_OWORD *)(v209 + 24) = *(_OWORD *)&__p[3];
            *((void **)v209 + 5) = __p[5];
            memset(&__p[3], 0, 24);
            *((_OWORD *)v209 + 3) = *(_OWORD *)v258;
            v203 = v209 + 80;
            *(_OWORD *)(v209 + 60) = *(_OWORD *)&v258[12];
            if (v201 == v204)
            {
              v100 = a5;
              *a5 = v209;
              a5[1] = v203;
              a5[2] = v210;
              if (v201)
                goto LABEL_339;
            }
            else
            {
              do
              {
                v211 = v209;
                *((_QWORD *)v209 - 9) = 0;
                *((_QWORD *)v209 - 8) = 0;
                v212 = *((_OWORD *)v201 - 5);
                v201 -= 10;
                *((_OWORD *)v209 - 5) = v212;
                v209 -= 80;
                *((_QWORD *)v211 - 8) = v201[2];
                *v201 = 0;
                v201[1] = 0;
                v201[2] = 0;
                *((_QWORD *)v209 + 4) = 0;
                *((_QWORD *)v209 + 5) = 0;
                *(_OWORD *)(v209 + 24) = *(_OWORD *)(v201 + 3);
                *((_QWORD *)v209 + 5) = v201[5];
                v201[3] = 0;
                v201[4] = 0;
                v201[5] = 0;
                v213 = *((_OWORD *)v201 + 3);
                *(_OWORD *)(v209 + 60) = *(_OWORD *)((char *)v201 + 60);
                *((_OWORD *)v209 + 3) = v213;
              }
              while (v201 != v204);
              v201 = (void **)*a5;
              v214 = (void **)a5[1];
              *a5 = v209;
              a5[1] = v203;
              a5[2] = v210;
              if (v214 != v201)
              {
                do
                {
                  v222 = *(v214 - 7);
                  if (v222)
                  {
                    *(v214 - 6) = v222;
                    operator delete(v222);
                  }
                  v223 = v214 - 10;
                  v224 = (char *)*(v214 - 10);
                  if (v224)
                  {
                    v225 = (char *)*(v214 - 9);
                    v221 = *(v214 - 10);
                    if (v225 != v224)
                    {
                      v226 = (char *)*(v214 - 9);
                      do
                      {
                        v228 = (void *)*((_QWORD *)v226 - 3);
                        v226 -= 24;
                        v227 = v228;
                        if (v228)
                        {
                          *((_QWORD *)v225 - 2) = v227;
                          operator delete(v227);
                        }
                        v225 = v226;
                      }
                      while (v226 != v224);
                      v221 = *v223;
                    }
                    *(v214 - 9) = v224;
                    operator delete(v221);
                  }
                  v214 -= 10;
                }
                while (v223 != v201);
              }
              v100 = a5;
              if (v201)
LABEL_339:
                operator delete(v201);
            }
LABEL_340:
            v100[1] = v203;
          }
          v215 = (const void **)v255;
          if (v255)
          {
            v216 = v256;
            v217 = v255;
            if (v256 != v255)
            {
              v218 = v256;
              do
              {
                v220 = (void *)*(v218 - 3);
                v218 -= 3;
                v219 = v220;
                if (v220)
                {
                  *(v216 - 2) = v219;
                  operator delete(v219);
                }
                v216 = v218;
              }
              while (v218 != v215);
              v217 = v255;
            }
            v256 = v215;
            operator delete(v217);
          }
          if (__p[3])
          {
            __p[4] = __p[3];
            operator delete(__p[3]);
          }
          v229 = (char *)__p[0];
          if (__p[0])
          {
            v230 = __p[1];
            v104 = __p[0];
            if (__p[1] != __p[0])
            {
              v231 = (char *)__p[1];
              do
              {
                v233 = (void *)*((_QWORD *)v231 - 3);
                v231 -= 24;
                v232 = v233;
                if (v233)
                {
                  *(v230 - 2) = v232;
                  operator delete(v232);
                }
                v230 = v231;
              }
              while (v231 != v229);
              v104 = __p[0];
            }
            __p[1] = v229;
            operator delete(v104);
          }
          v103 = (_QWORD *)*v250;
          v100 = a5;
          if (!*v250)
            goto LABEL_204;
          goto LABEL_210;
        }
      }
      else
      {
        if (v112 >= *(_QWORD *)&v105)
          v112 %= *(_QWORD *)&v105;
        if (v112 != v108)
          goto LABEL_381;
      }
      v110 = (_QWORD *)*v110;
      if (!v110)
        goto LABEL_381;
    }
  }
LABEL_371:
  v235 = (void *)v259;
  *(_QWORD *)&v259 = 0;
  if (v235)
    operator delete(v235);
}

void sub_20F4595A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  void ***v31;
  uint64_t v32;
  void **v34;
  void **v35;
  _QWORD *v36;
  void *v37;
  _QWORD *v38;
  _QWORD *v39;
  void *v40;
  _QWORD *v41;
  void *v42;
  void *v43;
  void *v44;
  void **v45;
  char *v46;
  char *v47;
  char *v48;
  void *v49;
  void *v50;

  v34 = *v31;
  if (*v31)
  {
    v35 = v31[1];
    if (v35 != v34)
    {
      do
      {
        v44 = *(v35 - 7);
        if (v44)
        {
          *(v35 - 6) = v44;
          operator delete(v44);
        }
        v45 = v35 - 10;
        v46 = (char *)*(v35 - 10);
        if (v46)
        {
          v47 = (char *)*(v35 - 9);
          v43 = *(v35 - 10);
          if (v47 != v46)
          {
            v48 = (char *)*(v35 - 9);
            do
            {
              v50 = (void *)*((_QWORD *)v48 - 3);
              v48 -= 24;
              v49 = v50;
              if (v50)
              {
                *((_QWORD *)v47 - 2) = v49;
                operator delete(v49);
              }
              v47 = v48;
            }
            while (v48 != v46);
            v43 = *v45;
          }
          *(v35 - 9) = v46;
          operator delete(v43);
        }
        v35 -= 10;
      }
      while (v45 != v34);
    }
    *(_QWORD *)(a23 + 8) = v34;
    operator delete(v34);
  }
  v36 = *(_QWORD **)(v32 - 160);
  if (v36)
  {
    do
    {
      v38 = (_QWORD *)*v36;
      v39 = (_QWORD *)v36[7];
      if (v39)
      {
        do
        {
          v41 = (_QWORD *)*v39;
          v42 = (void *)v39[3];
          if (v42)
          {
            v39[4] = v42;
            operator delete(v42);
          }
          operator delete(v39);
          v39 = v41;
        }
        while (v41);
      }
      v40 = (void *)v36[5];
      v36[5] = 0;
      if (v40)
        operator delete(v40);
      operator delete(v36);
      v36 = v38;
    }
    while (v38);
  }
  v37 = *(void **)(v32 - 176);
  *(_QWORD *)(v32 - 176) = 0;
  if (v37)
    operator delete(v37);
  _Unwind_Resume(exception_object);
}

void sub_20F459830(void **__p)
{
  void **v2;
  void *v3;
  void *v4;

  do
  {
    v2 = (void **)*__p;
    v3 = __p[9];
    if (v3)
    {
      __p[10] = v3;
      operator delete(v3);
    }
    v4 = __p[6];
    if (v4)
    {
      __p[7] = v4;
      operator delete(v4);
    }
    operator delete(__p);
    __p = v2;
  }
  while (v2);
}

void sub_20F459888(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  unsigned __int8 *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  float v11;
  float v12;
  uint8x8_t v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  size_t prime;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t **v24;
  size_t v25;
  uint8x8_t v26;
  unint64_t v27;
  size_t v28;
  uint8x8_t v29;
  uint64_t v30;
  uint64_t *v31;
  size_t v32;
  size_t v33;
  uint64_t *v34;
  size_t v35;
  uint64_t v36;
  uint64_t *v37;
  _QWORD *v38;
  uint64_t v39;
  int v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  void *v46;
  const void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t *v52;
  int v53;
  uint8x8_t v54;
  uint64_t *v55;
  char v56;
  uint64_t v57;
  int v58;
  _BOOL4 v59;
  char v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  const void **v65;
  uint64_t v66;
  unsigned __int8 *v67;
  int v68;
  int v69;
  int v70;
  int v71;
  BOOL v72;
  char v73;
  BOOL v74;
  int v75;
  unint64_t v76;
  unint64_t v77;
  int v78;
  _BOOL4 v79;
  int v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  const void **v85;
  uint64_t v86;
  unsigned __int8 *v87;
  int v88;
  int v89;
  int v90;
  int v91;
  char v92;
  int v93;
  uint8x8_t v94;
  size_t v95;
  void *v96;
  uint8x8_t v97;
  void *__s1;
  unint64_t v99;
  unsigned __int8 *v100;
  _QWORD *v101;
  unint64_t v102;
  char v103;

  v2 = (_QWORD *)a2;
  v4 = (unsigned __int8 *)(a2 + 16);
  v5 = *(unsigned __int8 *)(a2 + 39);
  v6 = *(_QWORD *)(a2 + 24);
  if ((v5 & 0x80u) == 0)
    v7 = (uint64_t *)(a2 + 16);
  else
    v7 = *(uint64_t **)(a2 + 16);
  if ((v5 & 0x80u) == 0)
    v8 = v5;
  else
    v8 = v6;
  v9 = sub_20E8D177C((uint64_t)&v103, v7, v8);
  v2[1] = v9;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v12 = *(float *)(a1 + 32);
  v101 = v2;
  v102 = v9;
  if (v10 && (float)(v12 * (float)v10) >= v11)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v13.i16[0] = vaddlv_u8(v13);
    v14 = v13.u32[0];
    if (v13.u32[0] <= 1uLL)
      goto LABEL_10;
    goto LABEL_99;
  }
  v100 = v4;
  v16 = 1;
  if (v10 >= 3)
    v16 = (v10 & (v10 - 1)) != 0;
  v17 = v16 | (2 * v10);
  v18 = vcvtps_u32_f32(v11 / v12);
  if (v17 <= v18)
    v19 = v18;
  else
    v19 = v17;
  if (v19 == 1)
  {
    v19 = 2;
  }
  else if ((v19 & (v19 - 1)) != 0)
  {
    prime = std::__next_prime(v19);
    v9 = v102;
    v19 = prime;
    v10 = *(_QWORD *)(a1 + 8);
  }
  if (v19 > v10)
    goto LABEL_21;
  if (v19 >= v10)
    goto LABEL_98;
  v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
  if (v10 < 3 || (v29 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
  {
    v95 = std::__next_prime(v28);
    v9 = v102;
    if (v19 <= v95)
      v19 = v95;
    if (v19 >= v10)
      goto LABEL_37;
  }
  else
  {
    v30 = 1 << -(char)__clz(v28 - 1);
    if (v28 >= 2)
      v28 = v30;
    if (v19 <= v28)
      v19 = v28;
    if (v19 >= v10)
    {
LABEL_37:
      v10 = *(_QWORD *)(a1 + 8);
      goto LABEL_98;
    }
  }
  if (!v19)
  {
    v96 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    v4 = v100;
    if (v96)
    {
      operator delete(v96);
      v9 = v102;
    }
    v10 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v97 = (uint8x8_t)vcnt_s8(0);
    v97.i16[0] = vaddlv_u8(v97);
    v14 = v97.u32[0];
    if (v97.u32[0] > 1uLL)
      goto LABEL_99;
LABEL_10:
    v15 = (v10 - 1) & v9;
    goto LABEL_101;
  }
LABEL_21:
  if (v19 >> 61)
    sub_20E877A38();
  v21 = operator new(8 * v19);
  v22 = *(void **)a1;
  *(_QWORD *)a1 = v21;
  if (v22)
    operator delete(v22);
  v23 = 0;
  *(_QWORD *)(a1 + 8) = v19;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v23++) = 0;
  while (v19 != v23);
  v24 = *(uint64_t ***)(a1 + 16);
  v9 = v102;
  if (!v24)
    goto LABEL_97;
  v25 = (size_t)v24[1];
  v26 = (uint8x8_t)vcnt_s8((int8x8_t)v19);
  v26.i16[0] = vaddlv_u8(v26);
  v27 = v26.u32[0];
  if (v26.u32[0] > 1uLL)
  {
    if (v25 >= v19)
      v25 %= v19;
  }
  else
  {
    v25 &= v19 - 1;
  }
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = a1 + 16;
  v31 = *v24;
  if (!*v24)
  {
LABEL_97:
    v10 = v19;
LABEL_98:
    v4 = v100;
    v54 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v54.i16[0] = vaddlv_u8(v54);
    v14 = v54.u32[0];
    if (v54.u32[0] <= 1uLL)
      goto LABEL_10;
    goto LABEL_99;
  }
  v32 = v19 - 1;
  v99 = v26.u32[0];
  do
  {
    v33 = v31[1];
    if (v27 > 1)
    {
      if (v33 >= v19)
        v33 %= v19;
    }
    else
    {
      v33 &= v32;
    }
    if (v33 == v25)
    {
      v24 = (uint64_t **)v31;
      goto LABEL_43;
    }
    if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v33))
    {
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v33) = v24;
      v24 = (uint64_t **)v31;
      v25 = v33;
      goto LABEL_43;
    }
    v34 = (uint64_t *)*v31;
    if (!*v31)
      goto LABEL_77;
    v35 = v31[3];
    if (*((char *)v31 + 39) >= 0)
      v36 = *((unsigned __int8 *)v31 + 39);
    else
      v36 = v31[3];
    if ((*((_BYTE *)v31 + 39) & 0x80) == 0)
    {
      if (*((_BYTE *)v31 + 39))
      {
        v37 = (uint64_t *)*v31;
        v38 = v31;
LABEL_57:
        v34 = v37;
        v39 = *((unsigned __int8 *)v37 + 39);
        v40 = (char)v39;
        if ((v39 & 0x80u) != 0)
          v39 = v34[3];
        if (v36 == v39)
        {
          if (v40 >= 0)
            v41 = (unsigned __int8 *)(v34 + 2);
          else
            v41 = (unsigned __int8 *)v34[2];
          v42 = (unsigned __int8 *)(v31 + 2);
          v43 = *((unsigned __int8 *)v31 + 39);
          while (*v42 == *v41)
          {
            ++v42;
            ++v41;
            if (!--v43)
            {
              v37 = (uint64_t *)*v34;
              v38 = v34;
              v34 = 0;
              if (v37)
                goto LABEL_57;
              goto LABEL_78;
            }
          }
        }
      }
      else
      {
        v48 = *((unsigned __int8 *)v34 + 39);
        if ((v48 & 0x80u) != 0)
          v48 = v34[3];
        v38 = v31;
        if (v48 == *((unsigned __int8 *)v31 + 39))
        {
          do
          {
            v38 = v34;
            v34 = (uint64_t *)*v34;
            if (!v34)
              break;
            v49 = *((unsigned __int8 *)v34 + 39);
            if ((v49 & 0x80u) != 0)
              v49 = v34[3];
          }
          while (v36 == v49);
        }
      }
      goto LABEL_78;
    }
    v44 = *((unsigned __int8 *)v34 + 39);
    v45 = (char)v44;
    if ((v44 & 0x80u) != 0)
      v44 = v34[3];
    if (v35 == v44)
    {
      v46 = (void *)v31[2];
      if (v45 >= 0)
        v47 = v34 + 2;
      else
        v47 = (const void *)v34[2];
      if (!memcmp((const void *)v31[2], v47, v31[3]))
      {
        __s1 = v46;
        v9 = v102;
        v32 = v19 - 1;
        v27 = v99;
        do
        {
          v38 = v34;
          v34 = (uint64_t *)*v34;
          if (!v34)
            break;
          v50 = *((unsigned __int8 *)v34 + 39);
          v51 = (char)v50;
          if ((v50 & 0x80u) != 0)
            v50 = v34[3];
          if (v36 != v50)
            break;
          v52 = v51 >= 0 ? v34 + 2 : (uint64_t *)v34[2];
          v53 = memcmp(__s1, v52, v35);
          v32 = v19 - 1;
          v27 = v99;
          v9 = v102;
        }
        while (!v53);
      }
      else
      {
        v38 = v31;
        v9 = v102;
        v32 = v19 - 1;
        v27 = v99;
      }
    }
    else
    {
LABEL_77:
      v38 = v31;
    }
LABEL_78:
    *v24 = v34;
    *v38 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v33);
    **(_QWORD **)(*(_QWORD *)a1 + 8 * v33) = v31;
LABEL_43:
    v31 = *v24;
  }
  while (*v24);
  v10 = v19;
  v4 = v100;
  v2 = v101;
  v94 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
  v94.i16[0] = vaddlv_u8(v94);
  v14 = v94.u32[0];
  if (v94.u32[0] <= 1uLL)
    goto LABEL_10;
LABEL_99:
  v15 = v9;
  if (v10 <= v9)
    v15 = v9 % v10;
LABEL_101:
  v55 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v15);
  if (v55)
  {
    v56 = *((_BYTE *)v2 + 39);
    if (v56 >= 0)
      v57 = *((unsigned __int8 *)v2 + 39);
    else
      v57 = v2[3];
    if (v56 < 0)
      v4 = (unsigned __int8 *)v2[2];
    if (v14 >= 2)
    {
      v78 = 0;
      do
      {
        v61 = v55;
        v55 = (uint64_t *)*v55;
        if (!v55)
          break;
        v81 = v55[1];
        v82 = v81;
        if (v81 >= v10)
          v82 = v81 % v10;
        if (v82 != v15)
          break;
        if (v81 == v9
          && ((v83 = *((unsigned __int8 *)v55 + 39), (v83 & 0x80u) == 0)
            ? (v84 = *((unsigned __int8 *)v55 + 39))
            : (v84 = v55[3]),
              v84 == v57))
        {
          v85 = (const void **)(v55 + 2);
          if ((v83 & 0x80) != 0)
          {
            v93 = memcmp(*v85, v4, v55[3]);
            v9 = v102;
            v79 = v93 == 0;
          }
          else if (*((_BYTE *)v55 + 39))
          {
            v86 = v83 - 1;
            v87 = v4;
            do
            {
              v89 = *(unsigned __int8 *)v85;
              v85 = (const void **)((char *)v85 + 1);
              v88 = v89;
              v91 = *v87++;
              v90 = v91;
              v72 = v86-- != 0;
              v92 = v72;
              v74 = v88 == v90;
              v79 = v88 == v90;
            }
            while (v74 && (v92 & 1) != 0);
          }
          else
          {
            v79 = 1;
          }
        }
        else
        {
          v79 = 0;
        }
        v80 = v78 & !v79;
        v78 |= v79;
      }
      while (v80 != 1);
    }
    else
    {
      v58 = 0;
      do
      {
        v61 = v55;
        v55 = (uint64_t *)*v55;
        if (!v55)
          break;
        v62 = v55[1];
        if ((v62 & (v10 - 1)) != v15)
          break;
        if (v62 == v9
          && ((v63 = *((unsigned __int8 *)v55 + 39), (v63 & 0x80u) == 0)
            ? (v64 = *((unsigned __int8 *)v55 + 39))
            : (v64 = v55[3]),
              v64 == v57))
        {
          v65 = (const void **)(v55 + 2);
          if ((v63 & 0x80) != 0)
          {
            v75 = memcmp(*v65, v4, v55[3]);
            v9 = v102;
            v59 = v75 == 0;
          }
          else if (*((_BYTE *)v55 + 39))
          {
            v66 = v63 - 1;
            v67 = v4;
            do
            {
              v69 = *(unsigned __int8 *)v65;
              v65 = (const void **)((char *)v65 + 1);
              v68 = v69;
              v71 = *v67++;
              v70 = v71;
              v72 = v66-- != 0;
              v73 = v72;
              v74 = v68 == v70;
              v59 = v68 == v70;
            }
            while (v74 && (v73 & 1) != 0);
          }
          else
          {
            v59 = 1;
          }
        }
        else
        {
          v59 = 0;
        }
        v60 = v58 & !v59;
        v58 |= v59;
      }
      while ((v60 & 1) == 0);
    }
  }
  else
  {
    v61 = 0;
  }
  v76 = v101[1];
  if (v14 > 1)
  {
    if (v76 >= v10)
      v76 %= v10;
  }
  else
  {
    v76 &= v10 - 1;
  }
  if (!v61)
  {
    *v101 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v101;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v76) = a1 + 16;
    if (!*v101)
      goto LABEL_173;
    v77 = *(_QWORD *)(*v101 + 8);
    if (v14 > 1)
    {
      if (v77 >= v10)
        v77 %= v10;
    }
    else
    {
      v77 &= v10 - 1;
    }
LABEL_172:
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v77) = v101;
    goto LABEL_173;
  }
  *v101 = *v61;
  *v61 = v101;
  if (*v101)
  {
    v77 = *(_QWORD *)(*v101 + 8);
    if (v14 > 1)
    {
      if (v77 >= v10)
        v77 %= v10;
    }
    else
    {
      v77 &= v10 - 1;
    }
    if (v77 != v76)
      goto LABEL_172;
  }
LABEL_173:
  ++*(_QWORD *)(a1 + 24);
}

char *sub_20F45A028(char *result, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = result;
  v4 = *((_QWORD *)result + 1);
  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      v8 = v4 + v7;
      v9 = a2 + v7;
      *(_OWORD *)v8 = *(_OWORD *)(a2 + v7);
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_QWORD *)(v4 + v7 + 16) = 0;
      result = sub_20F27ECB8((char *)(v4 + v7 + 16), *(_QWORD *)(a2 + v7 + 16), *(_QWORD *)(a2 + v7 + 24), (uint64_t)(*(_QWORD *)(a2 + v7 + 24) - *(_QWORD *)(a2 + v7 + 16)) >> 5);
      v7 += 40;
    }
    while (v9 + 40 != a3);
    v4 += v7;
  }
  *((_QWORD *)v3 + 1) = v4;
  return result;
}

void sub_20F45A0B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  if (v4)
  {
    do
    {
      v7 = *(_QWORD *)(v3 - 24);
      if (v7)
      {
        v8 = *(_QWORD *)(v3 - 16);
        v6 = *(void **)(v3 - 24);
        if (v8 != v7)
        {
          do
          {
            if (*(char *)(v8 - 9) < 0)
              operator delete(*(void **)(v8 - 32));
            v8 -= 32;
          }
          while (v8 != v7);
          v6 = *(void **)(v3 - 24);
        }
        *(_QWORD *)(v3 - 16) = v7;
        operator delete(v6);
      }
      v3 -= 40;
    }
    while (v3 != v2);
  }
  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

void sub_20F45A120(void ***a1, void **a2, void **a3, unint64_t a4)
{
  uint64_t v8;
  void **v9;
  void **v10;
  void **v11;
  void **v12;
  unint64_t v13;
  void **v14;
  unint64_t v15;
  uint64_t v16;
  void **v17;
  size_t v18;
  void **v19;
  void **v20;
  char v21;
  __int128 v22;
  unint64_t v23;
  void **v24;
  size_t v25;
  void **v26;
  void **v27;
  char v28;
  __int128 v29;
  uint64_t v30;
  BOOL v31;
  unint64_t v32;
  uint64_t v33;
  void **v34;
  uint64_t v35;
  void **v36;
  void **v37;
  void **v38;
  uint64_t v39;
  __int128 v40;
  void **v41;
  void **v42;

  v8 = (uint64_t)a1[2];
  v9 = *a1;
  if (a4 <= (v8 - (uint64_t)*a1) >> 5)
  {
    v12 = a1[1];
    v13 = ((char *)v12 - (char *)v9) >> 5;
    if (v13 >= a4)
    {
      if (a2 != a3)
      {
        v23 = 0;
        do
        {
          v26 = &a2[v23];
          v27 = &v9[v23];
          if (a2 != v9)
          {
            v28 = *((_BYTE *)v26 + 23);
            if (*((char *)v27 + 23) < 0)
            {
              if (v28 >= 0)
                v24 = &a2[v23];
              else
                v24 = (void **)a2[v23];
              if (v28 >= 0)
                v25 = *((unsigned __int8 *)v26 + 23);
              else
                v25 = (size_t)a2[v23 + 1];
              sub_20E867CBC(&v9[v23], v24, v25);
            }
            else if ((*((_BYTE *)v26 + 23) & 0x80) != 0)
            {
              sub_20E867BF8(&v9[v23], a2[v23], (size_t)a2[v23 + 1]);
            }
            else
            {
              v29 = *(_OWORD *)v26;
              v27[2] = v26[2];
              *(_OWORD *)v27 = v29;
            }
          }
          *((_BYTE *)v27 + 24) = *((_BYTE *)v26 + 24);
          v23 += 4;
        }
        while (&a2[v23] != a3);
        v12 = a1[1];
        v9 = (void **)((char *)v9 + v23 * 8);
      }
      while (v12 != v9)
      {
        if (*((char *)v12 - 9) < 0)
          operator delete(*(v12 - 4));
        v12 -= 4;
      }
      a1[1] = v9;
    }
    else
    {
      v14 = &a2[4 * v13];
      if (v12 != v9)
      {
        v15 = 0;
        v16 = 32 * v13;
        do
        {
          v19 = &v9[v15 / 8];
          v20 = &a2[v15 / 8];
          if (a2 != v9)
          {
            v21 = *((_BYTE *)v20 + 23);
            if (*((char *)v19 + 23) < 0)
            {
              if (v21 >= 0)
                v17 = &a2[v15 / 8];
              else
                v17 = (void **)a2[v15 / 8];
              if (v21 >= 0)
                v18 = *((unsigned __int8 *)v20 + 23);
              else
                v18 = (size_t)a2[v15 / 8 + 1];
              sub_20E867CBC(&v9[v15 / 8], v17, v18);
            }
            else if ((*((_BYTE *)v20 + 23) & 0x80) != 0)
            {
              sub_20E867BF8(&v9[v15 / 8], a2[v15 / 8], (size_t)a2[v15 / 8 + 1]);
            }
            else
            {
              v22 = *(_OWORD *)v20;
              v19[2] = v20[2];
              *(_OWORD *)v19 = v22;
            }
          }
          *((_BYTE *)v19 + 24) = *((_BYTE *)v20 + 24);
          v15 += 32;
        }
        while (v16 != v15);
        v9 = a1[1];
      }
      v38 = v9;
      if (v14 != a3)
      {
        v39 = 0;
        do
        {
          v41 = &v9[v39];
          v42 = &v14[v39];
          if (SHIBYTE(v14[v39 + 2]) < 0)
          {
            sub_20E860C04(v41, *v42, (unint64_t)v42[1]);
          }
          else
          {
            v40 = *(_OWORD *)v42;
            v41[2] = v42[2];
            *(_OWORD *)v41 = v40;
          }
          LOBYTE(v9[v39 + 3]) = v14[v39 + 3];
          v39 += 4;
        }
        while (&v14[v39] != a3);
        v38 = &v9[v39];
      }
      a1[1] = v38;
    }
  }
  else
  {
    if (v9)
    {
      v10 = a1[1];
      v11 = *a1;
      if (v10 != v9)
      {
        do
        {
          if (*((char *)v10 - 9) < 0)
            operator delete(*(v10 - 4));
          v10 -= 4;
        }
        while (v10 != v9);
        v11 = *a1;
      }
      a1[1] = v9;
      operator delete(v11);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 59)
      goto LABEL_70;
    v30 = v8 >> 4;
    if (v8 >> 4 <= a4)
      v30 = a4;
    v31 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0;
    v32 = 0x7FFFFFFFFFFFFFFLL;
    if (!v31)
      v32 = v30;
    if (v32 >> 59)
LABEL_70:
      sub_20E867F44();
    v33 = 4 * v32;
    v34 = (void **)operator new(32 * v32);
    *a1 = v34;
    a1[1] = v34;
    a1[2] = &v34[v33];
    if (a2 != a3)
    {
      v35 = 0;
      do
      {
        v36 = &v34[v35];
        v37 = &a2[v35];
        if (SHIBYTE(a2[v35 + 2]) < 0)
        {
          sub_20E860C04(v36, *v37, (unint64_t)v37[1]);
        }
        else
        {
          *(_OWORD *)v36 = *(_OWORD *)v37;
          v36[2] = v37[2];
        }
        LOBYTE(v34[v35 + 3]) = a2[v35 + 3];
        v35 += 4;
      }
      while (&a2[v35] != a3);
      v34 = (void **)((char *)v34 + v35 * 8);
    }
    a1[1] = v34;
  }
}

void sub_20F45A498(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  for (; v3; v3 -= 32)
  {
    if (*(char *)(v2 + v3 - 9) < 0)
      operator delete(*(void **)(v2 + v3 - 32));
  }
  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

void sub_20F45A4CC()
{
  sub_20E860B90("vector");
}

void sub_20F45A4E0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  float v6;
  float v7;
  _BOOL8 v8;
  unint64_t v9;
  unint64_t v10;
  int8x8_t prime;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t **v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v25;
  size_t v26;
  uint8x8_t v27;
  uint64_t v28;
  uint8x8_t v29;
  unint64_t v30;
  uint64_t *i;
  uint8x8_t v32;
  unint64_t v33;
  uint64_t *v34;
  int v35;
  _BOOL4 v37;
  int v38;
  _QWORD *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  _QWORD *v44;
  uint64_t v46;
  unint64_t v47;
  size_t v48;
  void *v49;
  uint8x8_t v50;
  uint8x8_t v51;
  uint64_t v52;
  uint64_t *v53;
  char v54;
  BOOL v56;
  char v57;
  uint64_t v58;
  unint64_t v59;

  v4 = *(unsigned int *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = v4;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v7 = *(float *)(a1 + 32);
  if (v5 && (float)(v7 * (float)v5) >= v6)
    goto LABEL_88;
  v8 = 1;
  if (v5 >= 3)
    v8 = (v5 & (v5 - 1)) != 0;
  v9 = v8 | (2 * v5);
  v10 = vcvtps_u32_f32(v6 / v7);
  if (v9 <= v10)
    prime = (int8x8_t)v10;
  else
    prime = (int8x8_t)v9;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v5 = *(_QWORD *)(a1 + 8);
  }
  if (*(_QWORD *)&prime <= v5)
  {
    if (*(_QWORD *)&prime >= v5)
      goto LABEL_88;
    v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v5 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v5), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
    {
      v48 = std::__next_prime(v26);
      if (*(_QWORD *)&prime <= v48)
        prime = (int8x8_t)v48;
      if (*(_QWORD *)&prime >= v5)
      {
LABEL_41:
        v5 = *(_QWORD *)(a1 + 8);
        v29 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
        v29.i16[0] = vaddlv_u8(v29);
        v30 = v29.u32[0];
        if (v29.u32[0] >= 2uLL)
          goto LABEL_47;
        goto LABEL_89;
      }
    }
    else
    {
      v28 = 1 << -(char)__clz(v26 - 1);
      if (v26 >= 2)
        v26 = v28;
      if (*(_QWORD *)&prime <= v26)
        prime = (int8x8_t)v26;
      if (*(_QWORD *)&prime >= v5)
        goto LABEL_41;
    }
    if (!*(_QWORD *)&prime)
    {
      v49 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v49)
        operator delete(v49);
      v5 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      v50 = (uint8x8_t)vcnt_s8(0);
      v50.i16[0] = vaddlv_u8(v50);
      v30 = v50.u32[0];
      if (v50.u32[0] >= 2uLL)
        goto LABEL_47;
      goto LABEL_89;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    sub_20E877A38();
  v12 = operator new(8 * *(_QWORD *)&prime);
  v13 = *(void **)a1;
  *(_QWORD *)a1 = v12;
  if (v13)
    operator delete(v13);
  v14 = 0;
  *(int8x8_t *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v14++) = 0;
  while (*(_QWORD *)&prime != v14);
  v16 = a1 + 16;
  v15 = *(uint64_t ***)(a1 + 16);
  if (v15)
  {
    v17 = (unint64_t)v15[1];
    v18 = *(_QWORD *)&prime - 1;
    if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) == 0)
    {
      v19 = v17 & v18;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = v16;
      v20 = *v15;
      if (!*v15)
        goto LABEL_46;
      do
      {
        v21 = v20[1] & v18;
        if (v21 == v19)
        {
          v15 = (uint64_t **)v20;
        }
        else
        {
          v22 = v20;
          if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v21))
          {
            do
            {
              v23 = v22;
              v22 = (uint64_t *)*v22;
              if (!v22)
                break;
            }
            while (v20[2] == v22[2] && *((_DWORD *)v20 + 6) == *((_DWORD *)v22 + 6));
            *v15 = v22;
            v25 = 8 * v21;
            *v23 = **(_QWORD **)(*(_QWORD *)a1 + v25);
            **(_QWORD **)(*(_QWORD *)a1 + v25) = v20;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v21) = v15;
            v15 = (uint64_t **)v20;
            v19 = v21;
          }
        }
        v20 = *v15;
      }
      while (*v15);
      v5 = (unint64_t)prime;
LABEL_88:
      v51 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
      v51.i16[0] = vaddlv_u8(v51);
      v30 = v51.u32[0];
      if (v51.u32[0] >= 2uLL)
        goto LABEL_47;
      goto LABEL_89;
    }
    if (v17 >= *(_QWORD *)&prime)
      v17 %= *(_QWORD *)&prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v17) = v16;
    for (i = *v15; *v15; i = *v15)
    {
      v42 = i[1];
      if (v42 >= *(_QWORD *)&prime)
        v42 %= *(_QWORD *)&prime;
      if (v42 == v17)
      {
        v15 = (uint64_t **)i;
      }
      else
      {
        v43 = i;
        if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v42))
        {
          do
          {
            v44 = v43;
            v43 = (uint64_t *)*v43;
            if (!v43)
              break;
          }
          while (i[2] == v43[2] && *((_DWORD *)i + 6) == *((_DWORD *)v43 + 6));
          *v15 = v43;
          v46 = 8 * v42;
          *v44 = **(_QWORD **)(*(_QWORD *)a1 + v46);
          **(_QWORD **)(*(_QWORD *)a1 + v46) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v42) = v15;
          v15 = (uint64_t **)i;
          v17 = v42;
        }
      }
    }
  }
LABEL_46:
  v5 = (unint64_t)prime;
  v32 = (uint8x8_t)vcnt_s8(prime);
  v32.i16[0] = vaddlv_u8(v32);
  v30 = v32.u32[0];
  if (v32.u32[0] >= 2uLL)
  {
LABEL_47:
    v33 = v4;
    if (v5 <= v4)
      v33 = v4 % v5;
    v34 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v33);
    if (!v34)
    {
      v39 = 0;
      v47 = *(_QWORD *)(a2 + 8);
      goto LABEL_103;
    }
    v35 = 0;
    while (1)
    {
      v39 = v34;
      v34 = (uint64_t *)*v34;
      if (!v34)
        goto LABEL_102;
      v40 = v34[1];
      v41 = v40;
      if (v40 >= v5)
        v41 = v40 % v5;
      if (v41 != v33)
        goto LABEL_102;
      if (v40 == v4)
      {
        v37 = v34[2] == *(_QWORD *)(a2 + 16) && *((_DWORD *)v34 + 6) == *(_DWORD *)(a2 + 24);
        v38 = v35 & !v37;
        v35 |= v37;
        if (v38 == 1)
          goto LABEL_102;
      }
      else if ((v35 & 1) == 1)
      {
        goto LABEL_102;
      }
    }
  }
LABEL_89:
  v52 = (v5 - 1) & v4;
  v53 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v52);
  if (!v53)
  {
    v39 = 0;
    v47 = *(_QWORD *)(a2 + 8);
LABEL_114:
    v47 &= v5 - 1;
    if (v39)
      goto LABEL_106;
LABEL_115:
    *(_QWORD *)a2 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = a2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v47) = a1 + 16;
    if (!*(_QWORD *)a2)
      goto LABEL_121;
    v59 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v30 > 1)
    {
      if (v59 >= v5)
        v59 %= v5;
    }
    else
    {
      v59 &= v5 - 1;
    }
LABEL_120:
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v59) = a2;
    goto LABEL_121;
  }
  v54 = 0;
  while (1)
  {
    v39 = v53;
    v53 = (uint64_t *)*v53;
    if (!v53)
      break;
    v58 = v53[1];
    if ((v58 & (v5 - 1)) != v52)
      break;
    if (v58 == v4)
    {
      v56 = v53[2] == *(_QWORD *)(a2 + 16) && *((_DWORD *)v53 + 6) == *(_DWORD *)(a2 + 24);
      v57 = v54 & !v56;
      v54 |= v56;
      if ((v57 & 1) != 0)
        break;
    }
    else if ((v54 & 1) != 0)
    {
      break;
    }
  }
LABEL_102:
  v47 = *(_QWORD *)(a2 + 8);
  if (v30 <= 1)
    goto LABEL_114;
LABEL_103:
  if (v47 >= v5)
    v47 %= v5;
  if (!v39)
    goto LABEL_115;
LABEL_106:
  *(_QWORD *)a2 = *v39;
  *v39 = a2;
  if (*(_QWORD *)a2)
  {
    v59 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v30 > 1)
    {
      if (v59 >= v5)
        v59 %= v5;
    }
    else
    {
      v59 &= v5 - 1;
    }
    if (v59 != v47)
      goto LABEL_120;
  }
LABEL_121:
  ++*(_QWORD *)(a1 + 24);
}

_QWORD *sub_20F45AA70(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char **v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char *v23;
  char **v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  _OWORD *v28;
  __int128 *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  int v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  _OWORD *v49;
  __int128 *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  int v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;

  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (0xCBEEA4E1A08AD8F3 * ((v8 - *result) >> 3) < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x8AD8F2FBA93868)
      goto LABEL_66;
    v10 = 0xCBEEA4E1A08AD8F3 * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    v12 = v10 >= 0x456C797DD49C34 ? 0x8AD8F2FBA93868 : v11;
    if (v12 > 0x8AD8F2FBA93868)
LABEL_66:
      sub_20F45A4CC();
    v13 = 59 * v12;
    result = operator new(472 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v14 = (char **)(v7 + 1);
    v7[2] = &result[v13];
    v15 = (char *)result;
    if (a2 != a3)
    {
      v16 = 0;
      do
      {
        v17 = &v9[v16];
        v18 = a2 + v16;
        *(_OWORD *)v17 = *(_OWORD *)(a2 + v16);
        *(_OWORD *)(v17 + 12) = *(_OWORD *)(a2 + v16 + 12);
        v9[v16 + 32] = 0;
        v17[160] = 0;
        if (*(_BYTE *)(a2 + v16 + 160))
        {
          v19 = *(_OWORD *)(v18 + 112);
          *(_OWORD *)&v9[v16 + 96] = *(_OWORD *)(v18 + 96);
          *(_OWORD *)&v9[v16 + 112] = v19;
          v20 = *(_OWORD *)(v18 + 144);
          *(_OWORD *)&v9[v16 + 128] = *(_OWORD *)(v18 + 128);
          *(_OWORD *)&v9[v16 + 144] = v20;
          v21 = *(_OWORD *)(v18 + 48);
          *(_OWORD *)&v9[v16 + 32] = *(_OWORD *)(v18 + 32);
          *(_OWORD *)&v9[v16 + 48] = v21;
          v22 = *(_OWORD *)(v18 + 80);
          *(_OWORD *)&v9[v16 + 64] = *(_OWORD *)(v18 + 64);
          *(_OWORD *)&v9[v16 + 80] = v22;
          v17[160] = 1;
        }
        v17[168] = 0;
        result = v17 + 168;
        v17[456] = 0;
        if (*(_BYTE *)(v18 + 456))
        {
          result = memcpy(result, (const void *)(a2 + v16 + 168), 0x120uLL);
          v17[456] = 1;
        }
        *(_DWORD *)&v9[v16 + 464] = *(_DWORD *)(v18 + 464);
        v16 += 472;
      }
      while (v18 + 472 != a3);
      v15 = &v9[v16];
    }
    v44 = v15 - v9;
    v24 = v14;
    goto LABEL_65;
  }
  v24 = (char **)(result + 1);
  v23 = (char *)result[1];
  if (0xCBEEA4E1A08AD8F3 * ((v23 - v9) >> 3) >= a4)
  {
    if (a2 == a3)
    {
      v44 = 0;
      goto LABEL_65;
    }
    v45 = a2 + 168;
    v46 = *result;
    v47 = *result;
    while (1)
    {
      v48 = *(_OWORD *)(v45 - 168);
      *(_OWORD *)(v47 + 12) = *(_OWORD *)(v45 - 156);
      *(_OWORD *)v47 = v48;
      v49 = (_OWORD *)(v47 + 32);
      v50 = (__int128 *)(v45 - 136);
      if (*(unsigned __int8 *)(v47 + 160) == *(unsigned __int8 *)(v45 - 8))
        break;
      if (*(_BYTE *)(v47 + 160))
      {
        *(_BYTE *)(v47 + 160) = 0;
LABEL_47:
        v57 = v45 - 168;
        result = (_QWORD *)(v47 + 168);
        v58 = *(unsigned __int8 *)(v47 + 456);
        if (v58 == *(unsigned __int8 *)(v45 + 288))
          goto LABEL_48;
        goto LABEL_51;
      }
      v59 = *v50;
      v60 = *(_OWORD *)(v45 - 120);
      v61 = *(_OWORD *)(v45 - 88);
      *(_OWORD *)(v47 + 64) = *(_OWORD *)(v45 - 104);
      *(_OWORD *)(v47 + 80) = v61;
      *v49 = v59;
      *(_OWORD *)(v47 + 48) = v60;
      v62 = *(_OWORD *)(v45 - 72);
      v63 = *(_OWORD *)(v45 - 56);
      v64 = *(_OWORD *)(v45 - 24);
      *(_OWORD *)(v47 + 128) = *(_OWORD *)(v45 - 40);
      *(_OWORD *)(v47 + 144) = v64;
      *(_OWORD *)(v47 + 96) = v62;
      *(_OWORD *)(v47 + 112) = v63;
      *(_BYTE *)(v47 + 160) = 1;
      v57 = v45 - 168;
      result = (_QWORD *)(v47 + 168);
      v58 = *(unsigned __int8 *)(v47 + 456);
      if (v58 == *(unsigned __int8 *)(v45 + 288))
      {
LABEL_48:
        if (v58)
          result = memcpy(result, (const void *)v45, 0x120uLL);
        goto LABEL_40;
      }
LABEL_51:
      if (v58)
      {
        *(_BYTE *)(v47 + 456) = 0;
      }
      else
      {
        result = memcpy(result, (const void *)v45, 0x120uLL);
        *(_BYTE *)(v47 + 456) = 1;
      }
LABEL_40:
      *(_DWORD *)(v47 + 464) = *(_DWORD *)(v45 + 296);
      v47 += 472;
      v46 += 472;
      v45 += 472;
      if (v57 + 472 == a3)
      {
        v44 = v46 - (_QWORD)v9;
        goto LABEL_65;
      }
    }
    if (*(_BYTE *)(v47 + 160))
    {
      v51 = *v50;
      v52 = *(_OWORD *)(v45 - 120);
      v53 = *(_OWORD *)(v45 - 88);
      *(_OWORD *)(v47 + 64) = *(_OWORD *)(v45 - 104);
      *(_OWORD *)(v47 + 80) = v53;
      *v49 = v51;
      *(_OWORD *)(v47 + 48) = v52;
      v54 = *(_OWORD *)(v45 - 72);
      v55 = *(_OWORD *)(v45 - 56);
      v56 = *(_OWORD *)(v45 - 24);
      *(_OWORD *)(v47 + 128) = *(_OWORD *)(v45 - 40);
      *(_OWORD *)(v47 + 144) = v56;
      *(_OWORD *)(v47 + 96) = v54;
      *(_OWORD *)(v47 + 112) = v55;
      v57 = v45 - 168;
      result = (_QWORD *)(v47 + 168);
      v58 = *(unsigned __int8 *)(v47 + 456);
      if (v58 == *(unsigned __int8 *)(v45 + 288))
        goto LABEL_48;
      goto LABEL_51;
    }
    goto LABEL_47;
  }
  v25 = a2 + 8 * ((v23 - v9) >> 3);
  if (v23 == v9)
    goto LABEL_54;
  v26 = a2 + 168;
  do
  {
    v27 = *(_OWORD *)(v26 - 168);
    *(_OWORD *)(v9 + 12) = *(_OWORD *)(v26 - 156);
    *(_OWORD *)v9 = v27;
    v28 = v9 + 32;
    v29 = (__int128 *)(v26 - 136);
    if (v9[160] == *(_BYTE *)(v26 - 8))
    {
      if (v9[160])
      {
        v30 = *v29;
        v31 = *(_OWORD *)(v26 - 120);
        v32 = *(_OWORD *)(v26 - 88);
        *((_OWORD *)v9 + 4) = *(_OWORD *)(v26 - 104);
        *((_OWORD *)v9 + 5) = v32;
        *v28 = v30;
        *((_OWORD *)v9 + 3) = v31;
        v33 = *(_OWORD *)(v26 - 72);
        v34 = *(_OWORD *)(v26 - 56);
        v35 = *(_OWORD *)(v26 - 24);
        *((_OWORD *)v9 + 8) = *(_OWORD *)(v26 - 40);
        *((_OWORD *)v9 + 9) = v35;
        *((_OWORD *)v9 + 6) = v33;
        *((_OWORD *)v9 + 7) = v34;
        v36 = v26 - 168;
        result = v9 + 168;
        v37 = v9[456];
        if (v37 != *(unsigned __int8 *)(v26 + 288))
          goto LABEL_33;
        goto LABEL_30;
      }
      goto LABEL_29;
    }
    if (v9[160])
    {
      v9[160] = 0;
LABEL_29:
      v36 = v26 - 168;
      result = v9 + 168;
      v37 = v9[456];
      if (v37 != *(unsigned __int8 *)(v26 + 288))
        goto LABEL_33;
      goto LABEL_30;
    }
    v38 = *v29;
    v39 = *(_OWORD *)(v26 - 120);
    v40 = *(_OWORD *)(v26 - 88);
    *((_OWORD *)v9 + 4) = *(_OWORD *)(v26 - 104);
    *((_OWORD *)v9 + 5) = v40;
    *v28 = v38;
    *((_OWORD *)v9 + 3) = v39;
    v41 = *(_OWORD *)(v26 - 72);
    v42 = *(_OWORD *)(v26 - 56);
    v43 = *(_OWORD *)(v26 - 24);
    *((_OWORD *)v9 + 8) = *(_OWORD *)(v26 - 40);
    *((_OWORD *)v9 + 9) = v43;
    *((_OWORD *)v9 + 6) = v41;
    *((_OWORD *)v9 + 7) = v42;
    v9[160] = 1;
    v36 = v26 - 168;
    result = v9 + 168;
    v37 = v9[456];
    if (v37 != *(unsigned __int8 *)(v26 + 288))
    {
LABEL_33:
      if (v37)
      {
        v9[456] = 0;
      }
      else
      {
        result = memcpy(result, (const void *)v26, 0x120uLL);
        v9[456] = 1;
      }
      goto LABEL_22;
    }
LABEL_30:
    if (v37)
      result = memcpy(result, (const void *)v26, 0x120uLL);
LABEL_22:
    *((_DWORD *)v9 + 116) = *(_DWORD *)(v26 + 296);
    v9 += 472;
    v26 += 472;
  }
  while (v36 + 472 != v25);
  v9 = *v24;
LABEL_54:
  v65 = v9;
  if (v25 != a3)
  {
    v66 = 0;
    do
    {
      v67 = &v9[v66];
      v68 = v25 + v66;
      v69 = *(_OWORD *)(v25 + v66);
      *(_OWORD *)(v67 + 12) = *(_OWORD *)(v25 + v66 + 12);
      *(_OWORD *)v67 = v69;
      v9[v66 + 32] = 0;
      v67[160] = 0;
      if (*(_BYTE *)(v25 + v66 + 160))
      {
        v70 = *(_OWORD *)(v68 + 32);
        v71 = *(_OWORD *)(v68 + 48);
        v72 = *(_OWORD *)(v68 + 80);
        *(_OWORD *)&v9[v66 + 64] = *(_OWORD *)(v68 + 64);
        *(_OWORD *)&v9[v66 + 80] = v72;
        *(_OWORD *)&v9[v66 + 32] = v70;
        *(_OWORD *)&v9[v66 + 48] = v71;
        v73 = *(_OWORD *)(v68 + 96);
        v74 = *(_OWORD *)(v68 + 112);
        v75 = *(_OWORD *)(v68 + 144);
        *(_OWORD *)&v9[v66 + 128] = *(_OWORD *)(v68 + 128);
        *(_OWORD *)&v9[v66 + 144] = v75;
        *(_OWORD *)&v9[v66 + 96] = v73;
        *(_OWORD *)&v9[v66 + 112] = v74;
        v67[160] = 1;
      }
      v67[168] = 0;
      result = v67 + 168;
      v67[456] = 0;
      if (*(_BYTE *)(v68 + 456))
      {
        result = memcpy(result, (const void *)(v25 + v66 + 168), 0x120uLL);
        v67[456] = 1;
      }
      *(_DWORD *)&v9[v66 + 464] = *(_DWORD *)(v68 + 464);
      v66 += 472;
    }
    while (v68 + 472 != a3);
    v65 = &v9[v66];
  }
  v44 = v65 - v9;
LABEL_65:
  *v24 = &v9[v44];
  return result;
}

uint64_t sub_20F45AF90(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (void *)v2[9];
      if (v3)
      {
        v2[10] = v3;
        operator delete(v3);
      }
      v4 = (void *)v2[6];
      if (v4)
      {
        v2[7] = v4;
        operator delete(v4);
      }
    }
    operator delete(v2);
  }
  return a1;
}

_QWORD *sub_20F45AFEC(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  if (a4)
  {
    v5 = result;
    if (a4 >= 0x8AD8F2FBA93869)
      sub_20F45A4CC();
    result = operator new(472 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[59 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        v10 = &v8[v9];
        v11 = a2 + v9 * 8;
        *(_OWORD *)v10 = *(_OWORD *)(a2 + v9 * 8);
        *(_OWORD *)((char *)v10 + 12) = *(_OWORD *)(a2 + v9 * 8 + 12);
        LOBYTE(v8[v9 + 4]) = 0;
        *((_BYTE *)v10 + 160) = 0;
        if (*(_BYTE *)(a2 + v9 * 8 + 160))
        {
          v12 = *(_OWORD *)(v11 + 112);
          *(_OWORD *)&v8[v9 + 12] = *(_OWORD *)(v11 + 96);
          *(_OWORD *)&v8[v9 + 14] = v12;
          v13 = *(_OWORD *)(v11 + 144);
          *(_OWORD *)&v8[v9 + 16] = *(_OWORD *)(v11 + 128);
          *(_OWORD *)&v8[v9 + 18] = v13;
          v14 = *(_OWORD *)(v11 + 48);
          *(_OWORD *)&v8[v9 + 4] = *(_OWORD *)(v11 + 32);
          *(_OWORD *)&v8[v9 + 6] = v14;
          v15 = *(_OWORD *)(v11 + 80);
          *(_OWORD *)&v8[v9 + 8] = *(_OWORD *)(v11 + 64);
          *(_OWORD *)&v8[v9 + 10] = v15;
          *((_BYTE *)v10 + 160) = 1;
        }
        *((_BYTE *)v10 + 168) = 0;
        result = v10 + 21;
        *((_BYTE *)v10 + 456) = 0;
        if (*(_BYTE *)(v11 + 456))
        {
          result = memcpy(result, (const void *)(a2 + v9 * 8 + 168), 0x120uLL);
          *((_BYTE *)v10 + 456) = 1;
        }
        LODWORD(v8[v9 + 58]) = *(_DWORD *)(v11 + 464);
        v9 += 59;
      }
      while (v11 + 472 != a3);
      v8 = (_QWORD *)((char *)v8 + v9 * 8);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_20F45B128(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20F45B144(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, uint64_t *a5, const char **a6)
{
  size_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;
  const char *v14;
  size_t v15;
  size_t v16;
  _QWORD *p_dst;
  uint64_t v18;
  const char *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  char v24;
  _QWORD *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  _QWORD *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  __int128 v64;
  std::__shared_weak_count *v65;
  __int128 v66;
  _QWORD *__dst;
  __int128 v68;
  _BYTE v69[24];
  __int128 v70;
  uint64_t v71;
  _QWORD v72[3];

  v72[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v11 = _os_log_pack_size();
    v12 = (std::__shared_weak_count_vtbl *)operator new(v11, (std::align_val_t)8uLL);
    v13 = (std::__shared_weak_count *)operator new();
    v13->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v13->__shared_owners_ = 0;
    v13->__shared_weak_owners_ = 0;
    v13[1].__vftable = v12;
    *(_QWORD *)&v64 = v12;
    *((_QWORD *)&v64 + 1) = v12;
    v66 = 0uLL;
    v65 = v13;
    v14 = *a6;
    v15 = strlen(*a6);
    if (v15 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v16 = v15;
    if (v15 >= 0x17)
    {
      v21 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17)
        v21 = v15 | 7;
      v22 = v21 + 1;
      p_dst = operator new(v21 + 1);
      *(_QWORD *)&v68 = v16;
      *((_QWORD *)&v68 + 1) = v22 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v68) = v15;
      p_dst = &__dst;
      if (!v15)
      {
LABEL_13:
        *((_BYTE *)p_dst + v16) = 0;
        v23 = __dst;
        v72[0] = v68;
        *(_QWORD *)((char *)v72 + 7) = *(_QWORD *)((char *)&v68 + 7);
        v24 = HIBYTE(v68);
        v25 = operator new(0x38uLL);
        v25[1] = 0;
        v25[2] = 0;
        v25[3] = off_24C9B31C8;
        *v25 = &off_24C9B3178;
        v26 = v72[0];
        v25[4] = v23;
        v25[5] = v26;
        *(_QWORD *)((char *)v25 + 47) = *(_QWORD *)((char *)v72 + 7);
        *((_BYTE *)v25 + 55) = v24;
        v72[0] = 0;
        *(_QWORD *)((char *)v72 + 7) = 0;
        v27 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        *(_QWORD *)&v66 = v25 + 3;
        *((_QWORD *)&v66 + 1) = v25;
        if (v27)
        {
          p_shared_owners = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldaxr(p_shared_owners);
          while (__stlxr(v29 - 1, p_shared_owners));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        *(_OWORD *)v69 = v64;
        *(_QWORD *)&v69[16] = v65;
        if (v65)
        {
          v30 = &v65->__shared_owners_;
          do
            v31 = __ldxr((unint64_t *)v30);
          while (__stxr(v31 + 1, (unint64_t *)v30));
        }
        v70 = v66;
        if (*((_QWORD *)&v66 + 1))
        {
          v32 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v33 = __ldxr(v32);
          while (__stxr(v33 + 1, v32));
          v71 = v66;
          do
            v34 = __ldaxr(v32);
          while (__stlxr(v34 - 1, v32));
          if (!v34)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v66 + 1) + 16))(*((_QWORD *)&v66 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v66 + 1));
          }
        }
        else
        {
          v71 = v66;
        }
        if (v65)
        {
          v35 = &v65->__shared_owners_;
          do
            v36 = __ldaxr((unint64_t *)v35);
          while (__stlxr(v36 - 1, (unint64_t *)v35));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
            std::__shared_weak_count::__release_weak(v65);
          }
        }
        v37 = *(_QWORD *)v69;
        if (*(char *)(v71 + 31) >= 0)
          v38 = v71 + 8;
        else
          v38 = *(_QWORD *)(v71 + 8);
        v39 = _os_log_pack_fill();
        v40 = *a5;
        *(_DWORD *)v39 = 134218242;
        *(_QWORD *)(v39 + 4) = v40;
        *(_WORD *)(v39 + 12) = 2080;
        *(_QWORD *)(v39 + 14) = v38;
        v41 = operator new();
        v42 = *((unsigned __int8 *)a2 + 23);
        if ((v42 & 0x80u) == 0)
          v43 = a2;
        else
          v43 = (uint64_t *)*a2;
        if ((v42 & 0x80u) != 0)
          v42 = a2[1];
        *(_QWORD *)v41 = v37;
        *(_OWORD *)(v41 + 8) = *(_OWORD *)&v69[8];
        *(_QWORD *)&v69[8] = 0;
        *(_QWORD *)&v69[16] = 0;
        *(_OWORD *)(v41 + 24) = v70;
        v70 = 0uLL;
        *(_QWORD *)(v41 + 40) = v43;
        *(_QWORD *)(v41 + 48) = v42;
        *(_BYTE *)(v41 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v64 = v41;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v64);
        v44 = v64;
        *(_QWORD *)&v64 = 0;
        if (v44)
        {
          v45 = *(std::__shared_weak_count **)(v44 + 32);
          if (v45)
          {
            v46 = (unint64_t *)&v45->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v45);
            }
          }
          v48 = *(std::__shared_weak_count **)(v44 + 16);
          if (v48)
          {
            v49 = (unint64_t *)&v48->__shared_owners_;
            do
              v50 = __ldaxr(v49);
            while (__stlxr(v50 - 1, v49));
            if (!v50)
            {
              ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
              std::__shared_weak_count::__release_weak(v48);
            }
          }
          MEMORY[0x212BC6398](v44, 0x10F0C40B62ED6C6);
          v51 = __dst;
          __dst = 0;
          if (v51)
          {
            v52 = (std::__shared_weak_count *)v51[4];
            if (v52)
            {
              v53 = (unint64_t *)&v52->__shared_owners_;
              do
                v54 = __ldaxr(v53);
              while (__stlxr(v54 - 1, v53));
              if (!v54)
              {
                ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                std::__shared_weak_count::__release_weak(v52);
              }
            }
            v55 = (std::__shared_weak_count *)v51[2];
            if (v55)
            {
              v56 = (unint64_t *)&v55->__shared_owners_;
              do
                v57 = __ldaxr(v56);
              while (__stlxr(v57 - 1, v56));
              if (!v57)
              {
                ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                std::__shared_weak_count::__release_weak(v55);
              }
            }
            MEMORY[0x212BC6398](v51, 0x10F0C40B62ED6C6);
          }
        }
        v58 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
        if (*((_QWORD *)&v70 + 1))
        {
          v59 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
          do
            v60 = __ldaxr(v59);
          while (__stlxr(v60 - 1, v59));
          if (!v60)
          {
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
          }
        }
        v61 = *(std::__shared_weak_count **)&v69[16];
        if (*(_QWORD *)&v69[16])
        {
          v62 = (unint64_t *)(*(_QWORD *)&v69[16] + 8);
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 - 1, v62));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v14, v16);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v18 = *a5;
  v19 = *a6;
  *(_DWORD *)v69 = 134218242;
  *(_QWORD *)&v69[4] = v18;
  *(_WORD *)&v69[12] = 2080;
  *(_QWORD *)&v69[14] = v19;
  v20 = (void *)_os_log_send_and_compose_impl();
  if (v20)
    free(v20);
}

void sub_20F45B6E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20F45B708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F45B71C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t *sub_20F45B774(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  unint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;

  if (a2 != result)
  {
    v3 = ((char *)a2 - (char *)result) >> 4;
    v4 = *((_DWORD *)a3 + 4);
    v5 = *a3;
    while (1)
    {
      v6 = v3 >> 1;
      v7 = &result[2 * (v3 >> 1)];
      v8 = *v7;
      v9 = *(_DWORD *)(*v7 + 16);
      v10 = v9 >= v4;
      if (v9 != v4)
        goto LABEL_10;
      if (*(_QWORD *)v8 >= v5)
        break;
LABEL_4:
      result = v7 + 2;
      v6 = v3 + ~v6;
LABEL_5:
      v3 = v6;
      if (!v6)
        return result;
    }
    if (*(_QWORD *)v8 != v5)
      goto LABEL_5;
    v10 = *(_DWORD *)(v8 + 8) >= *((_DWORD *)a3 + 2);
LABEL_10:
    if (v10)
      goto LABEL_5;
    goto LABEL_4;
  }
  return result;
}

char *sub_20F45B7E0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  int v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v6 = *((_DWORD *)a2 + 4);
  v7 = *((_DWORD *)a2 + 2);
  v8 = v7 ^ __ROR4__(v6, 13);
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v9 <= v8)
        v3 = v8 % v9;
    }
    else
    {
      v3 = ((_DWORD)v9 - 1) & v8;
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = (char *)*v11;
      if (*v11)
      {
        v13 = *a2;
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = *((_QWORD *)v12 + 1);
            if (v15 == v8)
            {
              if (*((_DWORD *)v12 + 8) == v6 && *((_QWORD *)v12 + 2) == v13 && *((_DWORD *)v12 + 6) == v7)
                return v12;
            }
            else if ((v15 & (v9 - 1)) != v3)
            {
              goto LABEL_27;
            }
            v12 = *(char **)v12;
            if (!v12)
              goto LABEL_27;
          }
        }
        do
        {
          v14 = *((_QWORD *)v12 + 1);
          if (v14 == v8)
          {
            if (*((_DWORD *)v12 + 8) == v6 && *((_QWORD *)v12 + 2) == v13 && *((_DWORD *)v12 + 6) == v7)
              return v12;
          }
          else
          {
            if (v14 >= v9)
              v14 %= v9;
            if (v14 != v3)
              break;
          }
          v12 = *(char **)v12;
        }
        while (v12);
      }
    }
  }
LABEL_27:
  v12 = (char *)operator new(0x228uLL);
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = v8;
  *((_OWORD *)v12 + 1) = *(_OWORD *)a3;
  *((_QWORD *)v12 + 4) = *(_QWORD *)(a3 + 16);
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 88) = 0u;
  *(_OWORD *)(v12 + 104) = 0u;
  *(_OWORD *)(v12 + 120) = 0u;
  *(_OWORD *)(v12 + 136) = 0u;
  *(_OWORD *)(v12 + 152) = 0u;
  *(_OWORD *)(v12 + 168) = 0u;
  *(_OWORD *)(v12 + 184) = 0u;
  *(_OWORD *)(v12 + 200) = 0u;
  *(_OWORD *)(v12 + 216) = 0u;
  *(_OWORD *)(v12 + 232) = 0u;
  *(_OWORD *)(v12 + 248) = 0u;
  *(_OWORD *)(v12 + 264) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_OWORD *)(v12 + 280) = 0u;
  *(_OWORD *)(v12 + 296) = 0u;
  *(_OWORD *)(v12 + 312) = 0u;
  *(_OWORD *)(v12 + 328) = 0u;
  *(_OWORD *)(v12 + 344) = 0u;
  *(_OWORD *)(v12 + 360) = 0u;
  *(_OWORD *)(v12 + 376) = 0u;
  *(_OWORD *)(v12 + 392) = 0u;
  *(_OWORD *)(v12 + 408) = 0u;
  *(_OWORD *)(v12 + 424) = 0u;
  *(_OWORD *)(v12 + 440) = 0u;
  *(_OWORD *)(v12 + 456) = 0u;
  *(_OWORD *)(v12 + 472) = 0u;
  *(_OWORD *)(v12 + 488) = 0u;
  *(_OWORD *)(v12 + 504) = 0u;
  *(_OWORD *)(v12 + 520) = 0u;
  *(_OWORD *)(v12 + 536) = 0u;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v9 && (float)(v17 * (float)v9) >= v16)
  {
    v8 = v3;
  }
  else
  {
    v18 = v9 < 3 || (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      prime = v20;
    else
      prime = v19;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v9 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v9)
      goto LABEL_41;
    if (prime < v9)
    {
      v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v23 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
      {
        v22 = std::__next_prime(v22);
      }
      else
      {
        v24 = 1 << -(char)__clz(v22 - 1);
        if (v22 >= 2)
          v22 = v24;
      }
      if (prime <= v22)
        prime = v22;
      if (prime < v9)
LABEL_41:
        sub_20E8D2B3C(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8)
        v8 %= v9;
    }
    else
    {
      v8 = ((_DWORD)v9 - 1) & v8;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
  if (v26)
  {
    *(_QWORD *)v12 = *v26;
LABEL_64:
    *v26 = v12;
    goto LABEL_65;
  }
  *(_QWORD *)v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v25 + 8 * v8) = a1 + 16;
  if (*(_QWORD *)v12)
  {
    v27 = *(_QWORD *)(*(_QWORD *)v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9)
        v27 %= v9;
    }
    else
    {
      v27 &= v9 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_64;
  }
LABEL_65:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_20F45BB64(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20F45BB78(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  unint64_t v46;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t *v53;
  int64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  __int128 v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  uint64_t v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  uint64_t v155;
  __int128 v156;
  unint64_t v157;
  char *v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  uint64_t v188;
  __int128 v189;
  uint64_t v190;
  void *v191;
  unint64_t v192;
  uint64_t v193;
  _OWORD *v194;
  __int128 v195;
  uint64_t v196;
  __int128 v197;
  uint64_t v198;
  __int128 v199;
  _OWORD *v200;
  __int128 v201;
  uint64_t v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  uint64_t v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  uint64_t v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  uint64_t v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  uint64_t v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  uint64_t v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  uint64_t v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  uint64_t v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  uint64_t v234;
  __int128 v235;
  uint64_t v236;
  uint64_t v237;
  __int128 v238;
  uint64_t i;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  uint64_t v269;
  __int128 v270;
  void *v271;

  v3 = a3;
  v6 = *a1;
  v5 = a1[1];
  v7 = a2 - *a1;
  v8 = v7 / 2736;
  v9 = *a1 + 2736 * (v7 / 2736);
  v10 = a1[2];
  if (v5 < v10)
  {
    if (v9 == v5)
    {
      *(_OWORD *)v9 = *(_OWORD *)a3;
      v57 = v6 + 2736 * v8;
      v58 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)(v57 + 28) = *(_OWORD *)(a3 + 28);
      *(_OWORD *)(v57 + 16) = v58;
      v59 = *(_OWORD *)(a3 + 48);
      *(_QWORD *)(v57 + 64) = *(_QWORD *)(a3 + 64);
      *(_OWORD *)(v57 + 48) = v59;
      v60 = *(_OWORD *)(a3 + 72);
      *(_QWORD *)(v57 + 88) = *(_QWORD *)(a3 + 88);
      *(_OWORD *)(v57 + 72) = v60;
      v61 = *(_OWORD *)(a3 + 112);
      *(_OWORD *)(v57 + 96) = *(_OWORD *)(a3 + 96);
      *(_OWORD *)(v57 + 112) = v61;
      v63 = *(_OWORD *)(a3 + 160);
      v62 = *(_OWORD *)(a3 + 176);
      v64 = *(_OWORD *)(a3 + 144);
      *(_QWORD *)(v57 + 192) = *(_QWORD *)(a3 + 192);
      *(_OWORD *)(v57 + 160) = v63;
      *(_OWORD *)(v57 + 176) = v62;
      *(_OWORD *)(v57 + 144) = v64;
      *(_OWORD *)(v57 + 128) = *(_OWORD *)(a3 + 128);
      *(_OWORD *)(v57 + 200) = *(_OWORD *)(a3 + 200);
      v65 = *(_OWORD *)(a3 + 216);
      v66 = *(_OWORD *)(a3 + 232);
      v67 = *(_OWORD *)(a3 + 248);
      *(_QWORD *)(v57 + 264) = *(_QWORD *)(a3 + 264);
      *(_OWORD *)(v57 + 248) = v67;
      *(_OWORD *)(v57 + 232) = v66;
      *(_OWORD *)(v57 + 216) = v65;
      *(_OWORD *)(v57 + 272) = *(_OWORD *)(a3 + 272);
      v68 = *(_OWORD *)(a3 + 288);
      v69 = *(_OWORD *)(a3 + 304);
      v70 = *(_OWORD *)(a3 + 320);
      *(_QWORD *)(v57 + 336) = *(_QWORD *)(a3 + 336);
      *(_OWORD *)(v57 + 304) = v69;
      *(_OWORD *)(v57 + 320) = v70;
      *(_OWORD *)(v57 + 288) = v68;
      *(_OWORD *)(v57 + 344) = *(_OWORD *)(a3 + 344);
      v71 = *(_OWORD *)(a3 + 360);
      v72 = *(_OWORD *)(a3 + 376);
      v73 = *(_OWORD *)(a3 + 392);
      *(_QWORD *)(v57 + 408) = *(_QWORD *)(a3 + 408);
      *(_OWORD *)(v57 + 376) = v72;
      *(_OWORD *)(v57 + 392) = v73;
      *(_OWORD *)(v57 + 360) = v71;
      *(_OWORD *)(v57 + 416) = *(_OWORD *)(a3 + 416);
      v74 = *(_OWORD *)(a3 + 432);
      v75 = *(_OWORD *)(a3 + 448);
      v76 = *(_OWORD *)(a3 + 464);
      *(_QWORD *)(v57 + 480) = *(_QWORD *)(a3 + 480);
      *(_OWORD *)(v57 + 448) = v75;
      *(_OWORD *)(v57 + 464) = v76;
      *(_OWORD *)(v57 + 432) = v74;
      *(_OWORD *)(v57 + 488) = *(_OWORD *)(a3 + 488);
      v77 = *(_OWORD *)(a3 + 504);
      v78 = *(_OWORD *)(a3 + 520);
      v79 = *(_OWORD *)(a3 + 536);
      *(_QWORD *)(v57 + 552) = *(_QWORD *)(a3 + 552);
      *(_OWORD *)(v57 + 520) = v78;
      *(_OWORD *)(v57 + 536) = v79;
      *(_OWORD *)(v57 + 504) = v77;
      *(_OWORD *)(v57 + 560) = *(_OWORD *)(a3 + 560);
      v80 = *(_OWORD *)(a3 + 576);
      v81 = *(_OWORD *)(a3 + 592);
      v82 = *(_OWORD *)(a3 + 608);
      *(_QWORD *)(v57 + 624) = *(_QWORD *)(a3 + 624);
      *(_OWORD *)(v57 + 592) = v81;
      *(_OWORD *)(v57 + 608) = v82;
      *(_OWORD *)(v57 + 576) = v80;
      *(_OWORD *)(v57 + 632) = *(_OWORD *)(a3 + 632);
      v83 = *(_OWORD *)(a3 + 648);
      v84 = *(_OWORD *)(a3 + 664);
      v85 = *(_OWORD *)(a3 + 680);
      *(_QWORD *)(v57 + 696) = *(_QWORD *)(a3 + 696);
      *(_OWORD *)(v57 + 664) = v84;
      *(_OWORD *)(v57 + 680) = v85;
      *(_OWORD *)(v57 + 648) = v83;
      memcpy((void *)(v57 + 704), (const void *)(a3 + 704), 0x288uLL);
      v86 = *(_OWORD *)(v3 + 1352);
      *(_QWORD *)(v57 + 1368) = *(_QWORD *)(v3 + 1368);
      *(_OWORD *)(v57 + 1352) = v86;
      v87 = *(_QWORD *)(v3 + 1392);
      *(_OWORD *)(v57 + 1376) = *(_OWORD *)(v3 + 1376);
      *(_QWORD *)(v57 + 1392) = v87;
      memcpy((void *)(v57 + 1400), (const void *)(v3 + 1400), 0x288uLL);
      memcpy((void *)(v57 + 2048), (const void *)(v3 + 2048), 0x288uLL);
      v88 = *(_OWORD *)(v3 + 2696);
      *(_QWORD *)(v57 + 2712) = *(_QWORD *)(v3 + 2712);
      *(_OWORD *)(v57 + 2696) = v88;
      *(_OWORD *)(v57 + 2720) = *(_OWORD *)(v3 + 2720);
      a1[1] = v9 + 2736;
      return;
    }
    v11 = v9 + 2736;
    v12 = v5 - 2736;
    if (v5 < 0xAB0)
    {
      a1[1] = v5;
      if (v5 == v11)
        goto LABEL_28;
    }
    else
    {
      v13 = v5 - 2736;
      v14 = a1[1];
      do
      {
        *(_OWORD *)v14 = *(_OWORD *)v13;
        v15 = *(_OWORD *)(v13 + 16);
        *(_OWORD *)(v14 + 28) = *(_OWORD *)(v13 + 28);
        *(_OWORD *)(v14 + 16) = v15;
        v16 = *(_OWORD *)(v13 + 48);
        *(_QWORD *)(v14 + 64) = *(_QWORD *)(v13 + 64);
        *(_OWORD *)(v14 + 48) = v16;
        v17 = *(_OWORD *)(v13 + 72);
        *(_QWORD *)(v14 + 88) = *(_QWORD *)(v13 + 88);
        *(_OWORD *)(v14 + 72) = v17;
        v18 = *(_OWORD *)(v13 + 112);
        *(_OWORD *)(v14 + 96) = *(_OWORD *)(v13 + 96);
        *(_OWORD *)(v14 + 112) = v18;
        v20 = *(_OWORD *)(v13 + 160);
        v19 = *(_OWORD *)(v13 + 176);
        v21 = *(_OWORD *)(v13 + 144);
        *(_QWORD *)(v14 + 192) = *(_QWORD *)(v13 + 192);
        *(_OWORD *)(v14 + 160) = v20;
        *(_OWORD *)(v14 + 176) = v19;
        *(_OWORD *)(v14 + 144) = v21;
        *(_OWORD *)(v14 + 128) = *(_OWORD *)(v13 + 128);
        *(_OWORD *)(v14 + 200) = *(_OWORD *)(v13 + 200);
        v22 = *(_OWORD *)(v13 + 216);
        v23 = *(_OWORD *)(v13 + 232);
        v24 = *(_OWORD *)(v13 + 248);
        *(_QWORD *)(v14 + 264) = *(_QWORD *)(v13 + 264);
        *(_OWORD *)(v14 + 248) = v24;
        *(_OWORD *)(v14 + 232) = v23;
        *(_OWORD *)(v14 + 216) = v22;
        *(_OWORD *)(v14 + 272) = *(_OWORD *)(v13 + 272);
        v25 = *(_OWORD *)(v13 + 288);
        v26 = *(_OWORD *)(v13 + 304);
        v27 = *(_OWORD *)(v13 + 320);
        *(_QWORD *)(v14 + 336) = *(_QWORD *)(v13 + 336);
        *(_OWORD *)(v14 + 304) = v26;
        *(_OWORD *)(v14 + 320) = v27;
        *(_OWORD *)(v14 + 288) = v25;
        *(_OWORD *)(v14 + 344) = *(_OWORD *)(v13 + 344);
        v28 = *(_OWORD *)(v13 + 360);
        v29 = *(_OWORD *)(v13 + 376);
        v30 = *(_OWORD *)(v13 + 392);
        *(_QWORD *)(v14 + 408) = *(_QWORD *)(v13 + 408);
        *(_OWORD *)(v14 + 376) = v29;
        *(_OWORD *)(v14 + 392) = v30;
        *(_OWORD *)(v14 + 360) = v28;
        *(_OWORD *)(v14 + 416) = *(_OWORD *)(v13 + 416);
        v31 = *(_OWORD *)(v13 + 432);
        v32 = *(_OWORD *)(v13 + 448);
        v33 = *(_OWORD *)(v13 + 464);
        *(_QWORD *)(v14 + 480) = *(_QWORD *)(v13 + 480);
        *(_OWORD *)(v14 + 448) = v32;
        *(_OWORD *)(v14 + 464) = v33;
        *(_OWORD *)(v14 + 432) = v31;
        *(_OWORD *)(v14 + 488) = *(_OWORD *)(v13 + 488);
        v34 = *(_OWORD *)(v13 + 504);
        v35 = *(_OWORD *)(v13 + 520);
        v36 = *(_OWORD *)(v13 + 536);
        *(_QWORD *)(v14 + 552) = *(_QWORD *)(v13 + 552);
        *(_OWORD *)(v14 + 520) = v35;
        *(_OWORD *)(v14 + 536) = v36;
        *(_OWORD *)(v14 + 504) = v34;
        *(_OWORD *)(v14 + 560) = *(_OWORD *)(v13 + 560);
        v37 = *(_OWORD *)(v13 + 576);
        v38 = *(_OWORD *)(v13 + 592);
        v39 = *(_OWORD *)(v13 + 608);
        *(_QWORD *)(v14 + 624) = *(_QWORD *)(v13 + 624);
        *(_OWORD *)(v14 + 592) = v38;
        *(_OWORD *)(v14 + 608) = v39;
        *(_OWORD *)(v14 + 576) = v37;
        *(_OWORD *)(v14 + 632) = *(_OWORD *)(v13 + 632);
        v40 = *(_OWORD *)(v13 + 648);
        v41 = *(_OWORD *)(v13 + 664);
        v42 = *(_OWORD *)(v13 + 680);
        *(_QWORD *)(v14 + 696) = *(_QWORD *)(v13 + 696);
        *(_OWORD *)(v14 + 664) = v41;
        *(_OWORD *)(v14 + 680) = v42;
        *(_OWORD *)(v14 + 648) = v40;
        memcpy((void *)(v14 + 704), (const void *)(v13 + 704), 0x288uLL);
        v43 = *(_OWORD *)(v13 + 1352);
        *(_QWORD *)(v14 + 1368) = *(_QWORD *)(v13 + 1368);
        *(_OWORD *)(v14 + 1352) = v43;
        v44 = *(_QWORD *)(v13 + 1392);
        *(_OWORD *)(v14 + 1376) = *(_OWORD *)(v13 + 1376);
        *(_QWORD *)(v14 + 1392) = v44;
        memcpy((void *)(v14 + 1400), (const void *)(v13 + 1400), 0x288uLL);
        memcpy((void *)(v14 + 2048), (const void *)(v13 + 2048), 0x288uLL);
        v45 = *(_OWORD *)(v13 + 2696);
        *(_QWORD *)(v14 + 2712) = *(_QWORD *)(v13 + 2712);
        *(_OWORD *)(v14 + 2696) = v45;
        *(_OWORD *)(v14 + 2720) = *(_OWORD *)(v13 + 2720);
        v14 += 2736;
        v13 += 2736;
      }
      while (v13 < v5);
      a1[1] = v14;
      if (v5 == v11)
      {
LABEL_28:
        if (v9 <= v3)
          v3 += 2736 * (a1[1] > v3);
        v124 = *(_QWORD *)v3;
        *(_DWORD *)(v9 + 8) = *(_DWORD *)(v3 + 8);
        *(_QWORD *)v9 = v124;
        v125 = v6 + 2736 * v8;
        v126 = *(_OWORD *)(v3 + 16);
        *(_OWORD *)(v125 + 28) = *(_OWORD *)(v3 + 28);
        *(_OWORD *)(v125 + 16) = v126;
        v127 = *(_OWORD *)(v3 + 48);
        *(_QWORD *)(v125 + 64) = *(_QWORD *)(v3 + 64);
        *(_OWORD *)(v125 + 48) = v127;
        v128 = *(_OWORD *)(v3 + 72);
        *(_QWORD *)(v125 + 88) = *(_QWORD *)(v3 + 88);
        *(_OWORD *)(v125 + 72) = v128;
        v129 = *(_OWORD *)(v3 + 112);
        *(_OWORD *)(v125 + 96) = *(_OWORD *)(v3 + 96);
        *(_OWORD *)(v125 + 112) = v129;
        v131 = *(_OWORD *)(v3 + 160);
        v130 = *(_OWORD *)(v3 + 176);
        v132 = *(_OWORD *)(v3 + 144);
        *(_QWORD *)(v125 + 192) = *(_QWORD *)(v3 + 192);
        *(_OWORD *)(v125 + 160) = v131;
        *(_OWORD *)(v125 + 176) = v130;
        *(_OWORD *)(v125 + 144) = v132;
        *(_OWORD *)(v125 + 128) = *(_OWORD *)(v3 + 128);
        *(_OWORD *)(v125 + 200) = *(_OWORD *)(v3 + 200);
        v133 = *(_OWORD *)(v3 + 216);
        v134 = *(_OWORD *)(v3 + 232);
        v135 = *(_OWORD *)(v3 + 248);
        *(_QWORD *)(v125 + 264) = *(_QWORD *)(v3 + 264);
        *(_OWORD *)(v125 + 248) = v135;
        *(_OWORD *)(v125 + 232) = v134;
        *(_OWORD *)(v125 + 216) = v133;
        *(_OWORD *)(v125 + 272) = *(_OWORD *)(v3 + 272);
        v136 = *(_OWORD *)(v3 + 288);
        v137 = *(_OWORD *)(v3 + 304);
        v138 = *(_OWORD *)(v3 + 320);
        *(_QWORD *)(v125 + 336) = *(_QWORD *)(v3 + 336);
        *(_OWORD *)(v125 + 304) = v137;
        *(_OWORD *)(v125 + 320) = v138;
        *(_OWORD *)(v125 + 288) = v136;
        *(_OWORD *)(v125 + 344) = *(_OWORD *)(v3 + 344);
        v139 = *(_OWORD *)(v3 + 360);
        v140 = *(_OWORD *)(v3 + 376);
        v141 = *(_OWORD *)(v3 + 392);
        *(_QWORD *)(v125 + 408) = *(_QWORD *)(v3 + 408);
        *(_OWORD *)(v125 + 376) = v140;
        *(_OWORD *)(v125 + 392) = v141;
        *(_OWORD *)(v125 + 360) = v139;
        *(_OWORD *)(v125 + 416) = *(_OWORD *)(v3 + 416);
        v142 = *(_OWORD *)(v3 + 432);
        v143 = *(_OWORD *)(v3 + 448);
        v144 = *(_OWORD *)(v3 + 464);
        *(_QWORD *)(v125 + 480) = *(_QWORD *)(v3 + 480);
        *(_OWORD *)(v125 + 448) = v143;
        *(_OWORD *)(v125 + 464) = v144;
        *(_OWORD *)(v125 + 432) = v142;
        *(_OWORD *)(v125 + 488) = *(_OWORD *)(v3 + 488);
        v145 = *(_OWORD *)(v3 + 504);
        v146 = *(_OWORD *)(v3 + 520);
        v147 = *(_OWORD *)(v3 + 536);
        *(_QWORD *)(v125 + 552) = *(_QWORD *)(v3 + 552);
        *(_OWORD *)(v125 + 520) = v146;
        *(_OWORD *)(v125 + 536) = v147;
        *(_OWORD *)(v125 + 504) = v145;
        *(_OWORD *)(v125 + 560) = *(_OWORD *)(v3 + 560);
        v148 = *(_OWORD *)(v3 + 576);
        v149 = *(_OWORD *)(v3 + 592);
        v150 = *(_OWORD *)(v3 + 608);
        *(_QWORD *)(v125 + 624) = *(_QWORD *)(v3 + 624);
        *(_OWORD *)(v125 + 592) = v149;
        *(_OWORD *)(v125 + 608) = v150;
        *(_OWORD *)(v125 + 576) = v148;
        *(_OWORD *)(v125 + 632) = *(_OWORD *)(v3 + 632);
        v151 = *(_OWORD *)(v3 + 648);
        v152 = *(_OWORD *)(v3 + 664);
        v153 = *(_OWORD *)(v3 + 680);
        *(_QWORD *)(v125 + 696) = *(_QWORD *)(v3 + 696);
        *(_OWORD *)(v125 + 664) = v152;
        *(_OWORD *)(v125 + 680) = v153;
        *(_OWORD *)(v125 + 648) = v151;
        memcpy((void *)(v125 + 704), (const void *)(v3 + 704), 0x288uLL);
        v154 = *(_OWORD *)(v3 + 1352);
        *(_QWORD *)(v125 + 1368) = *(_QWORD *)(v3 + 1368);
        *(_OWORD *)(v125 + 1352) = v154;
        v155 = *(_QWORD *)(v3 + 1392);
        *(_OWORD *)(v125 + 1376) = *(_OWORD *)(v3 + 1376);
        *(_QWORD *)(v125 + 1392) = v155;
        memcpy((void *)(v125 + 1400), (const void *)(v3 + 1400), 0x288uLL);
        memcpy((void *)(v125 + 2048), (const void *)(v3 + 2048), 0x288uLL);
        v156 = *(_OWORD *)(v3 + 2696);
        *(_QWORD *)(v125 + 2712) = *(_QWORD *)(v3 + 2712);
        *(_OWORD *)(v125 + 2696) = v156;
        *(_OWORD *)(v125 + 2720) = *(_OWORD *)(v3 + 2720);
        return;
      }
    }
    v89 = 0x80BFA02FE80BFA03 * ((uint64_t)(v5 - v11) >> 4);
    v90 = 2736 * v8 + v6 - 2736;
    v91 = 2736 * v89;
    do
    {
      v92 = *(_QWORD *)(v90 + v91);
      *(_DWORD *)(v12 + 8) = *(_DWORD *)(v90 + v91 + 8);
      *(_QWORD *)v12 = v92;
      v93 = *(_OWORD *)(v90 + v91 + 16);
      *(_OWORD *)(v12 + 28) = *(_OWORD *)(v90 + v91 + 28);
      *(_OWORD *)(v12 + 16) = v93;
      v94 = *(_OWORD *)(v90 + v91 + 48);
      *(_QWORD *)(v12 + 64) = *(_QWORD *)(v90 + v91 + 64);
      *(_OWORD *)(v12 + 48) = v94;
      v95 = *(_OWORD *)(v90 + v91 + 72);
      *(_QWORD *)(v12 + 88) = *(_QWORD *)(v90 + v91 + 88);
      *(_OWORD *)(v12 + 72) = v95;
      v96 = *(_OWORD *)(v90 + v91 + 112);
      *(_OWORD *)(v12 + 96) = *(_OWORD *)(v90 + v91 + 96);
      *(_OWORD *)(v12 + 112) = v96;
      v98 = *(_OWORD *)(v90 + v91 + 160);
      v97 = *(_OWORD *)(v90 + v91 + 176);
      v99 = *(_OWORD *)(v90 + v91 + 144);
      *(_QWORD *)(v12 + 192) = *(_QWORD *)(v90 + v91 + 192);
      *(_OWORD *)(v12 + 160) = v98;
      *(_OWORD *)(v12 + 176) = v97;
      *(_OWORD *)(v12 + 144) = v99;
      *(_OWORD *)(v12 + 128) = *(_OWORD *)(v90 + v91 + 128);
      *(_OWORD *)(v12 + 200) = *(_OWORD *)(v90 + v91 + 200);
      v100 = *(_OWORD *)(v90 + v91 + 216);
      v101 = *(_OWORD *)(v90 + v91 + 232);
      v102 = *(_OWORD *)(v90 + v91 + 248);
      *(_QWORD *)(v12 + 264) = *(_QWORD *)(v90 + v91 + 264);
      *(_OWORD *)(v12 + 248) = v102;
      *(_OWORD *)(v12 + 232) = v101;
      *(_OWORD *)(v12 + 216) = v100;
      *(_OWORD *)(v12 + 272) = *(_OWORD *)(v90 + v91 + 272);
      v103 = *(_OWORD *)(v90 + v91 + 288);
      v104 = *(_OWORD *)(v90 + v91 + 304);
      v105 = *(_OWORD *)(v90 + v91 + 320);
      *(_QWORD *)(v12 + 336) = *(_QWORD *)(v90 + v91 + 336);
      *(_OWORD *)(v12 + 304) = v104;
      *(_OWORD *)(v12 + 320) = v105;
      *(_OWORD *)(v12 + 288) = v103;
      *(_OWORD *)(v12 + 344) = *(_OWORD *)(v90 + v91 + 344);
      v106 = *(_OWORD *)(v90 + v91 + 360);
      v107 = *(_OWORD *)(v90 + v91 + 376);
      v108 = *(_OWORD *)(v90 + v91 + 392);
      *(_QWORD *)(v12 + 408) = *(_QWORD *)(v90 + v91 + 408);
      *(_OWORD *)(v12 + 376) = v107;
      *(_OWORD *)(v12 + 392) = v108;
      *(_OWORD *)(v12 + 360) = v106;
      *(_OWORD *)(v12 + 416) = *(_OWORD *)(v90 + v91 + 416);
      v109 = *(_OWORD *)(v90 + v91 + 432);
      v110 = *(_OWORD *)(v90 + v91 + 448);
      v111 = *(_OWORD *)(v90 + v91 + 464);
      *(_QWORD *)(v12 + 480) = *(_QWORD *)(v90 + v91 + 480);
      *(_OWORD *)(v12 + 448) = v110;
      *(_OWORD *)(v12 + 464) = v111;
      *(_OWORD *)(v12 + 432) = v109;
      *(_OWORD *)(v12 + 488) = *(_OWORD *)(v90 + v91 + 488);
      v112 = *(_OWORD *)(v90 + v91 + 504);
      v113 = *(_OWORD *)(v90 + v91 + 520);
      v114 = *(_OWORD *)(v90 + v91 + 536);
      *(_QWORD *)(v12 + 552) = *(_QWORD *)(v90 + v91 + 552);
      *(_OWORD *)(v12 + 520) = v113;
      *(_OWORD *)(v12 + 536) = v114;
      *(_OWORD *)(v12 + 504) = v112;
      *(_OWORD *)(v12 + 560) = *(_OWORD *)(v90 + v91 + 560);
      v115 = *(_OWORD *)(v90 + v91 + 576);
      v116 = *(_OWORD *)(v90 + v91 + 592);
      v117 = *(_OWORD *)(v90 + v91 + 608);
      *(_QWORD *)(v12 + 624) = *(_QWORD *)(v90 + v91 + 624);
      *(_OWORD *)(v12 + 592) = v116;
      *(_OWORD *)(v12 + 608) = v117;
      *(_OWORD *)(v12 + 576) = v115;
      *(_OWORD *)(v12 + 632) = *(_OWORD *)(v90 + v91 + 632);
      v118 = *(_OWORD *)(v90 + v91 + 648);
      v119 = *(_OWORD *)(v90 + v91 + 664);
      v120 = *(_OWORD *)(v90 + v91 + 680);
      *(_QWORD *)(v12 + 696) = *(_QWORD *)(v90 + v91 + 696);
      *(_OWORD *)(v12 + 664) = v119;
      *(_OWORD *)(v12 + 680) = v120;
      *(_OWORD *)(v12 + 648) = v118;
      memcpy((void *)(v12 + 704), (const void *)(v90 + v91 + 704), 0x288uLL);
      v121 = *(_OWORD *)(v90 + v91 + 1352);
      *(_QWORD *)(v12 + 1368) = *(_QWORD *)(v90 + v91 + 1368);
      *(_OWORD *)(v12 + 1352) = v121;
      v122 = *(_QWORD *)(v90 + v91 + 1392);
      *(_OWORD *)(v12 + 1376) = *(_OWORD *)(v90 + v91 + 1376);
      *(_QWORD *)(v12 + 1392) = v122;
      memcpy((void *)(v12 + 1400), (const void *)(v90 + v91 + 1400), 0x288uLL);
      memcpy((void *)(v12 + 2048), (const void *)(v90 + v91 + 2048), 0x288uLL);
      v123 = *(_OWORD *)(v90 + v91 + 2696);
      *(_QWORD *)(v12 + 2712) = *(_QWORD *)(v90 + v91 + 2712);
      *(_OWORD *)(v12 + 2696) = v123;
      *(_OWORD *)(v12 + 2720) = *(_OWORD *)(v90 + v91 + 2720);
      v12 -= 2736;
      v91 -= 2736;
    }
    while (v91);
    goto LABEL_28;
  }
  v46 = 0x80BFA02FE80BFA03 * ((uint64_t)(v5 - v6) >> 4) + 1;
  if (v46 > 0x17F405FD017F40)
    sub_20E92CED8();
  v48 = 0x80BFA02FE80BFA03 * ((uint64_t)(v10 - v6) >> 4);
  if (2 * v48 > v46)
    v46 = 2 * v48;
  if (v48 >= 0xBFA02FE80BFA0)
    v49 = 0x17F405FD017F40;
  else
    v49 = v46;
  if (v49)
  {
    if (v49 > 0x17F405FD017F40)
      sub_20E877A38();
    v50 = (char *)operator new(2736 * v49);
    v51 = (uint64_t)&v50[2736 * v8];
    v52 = &v50[2736 * v49];
    if (v8 == v49)
      goto LABEL_17;
LABEL_24:
    v53 = a1;
    v56 = v52;
    goto LABEL_38;
  }
  v50 = 0;
  v51 = 2736 * v8;
  v52 = 0;
  if (v8)
    goto LABEL_24;
LABEL_17:
  v53 = a1;
  if (v7 < 1)
  {
    if (v6 == a2)
      v157 = 1;
    else
      v157 = 2 * v8;
    if (v157 > 0x17F405FD017F40)
      sub_20E877A38();
    v158 = (char *)operator new(2736 * v157);
    v51 = (uint64_t)&v158[2736 * (v157 >> 2)];
    v56 = &v158[2736 * v157];
    if (v50)
      operator delete(v50);
    v53 = a1;
  }
  else
  {
    v54 = 0x80BFA02FE80BFA03 * ((v51 - (uint64_t)v50) >> 4);
    if (v54 >= -1)
      v55 = v54 + 1;
    else
      v55 = v54 + 2;
    v51 -= 2736 * (v55 >> 1);
    v56 = v52;
  }
LABEL_38:
  *(_OWORD *)v51 = *(_OWORD *)v3;
  v159 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(v51 + 28) = *(_OWORD *)(v3 + 28);
  *(_OWORD *)(v51 + 16) = v159;
  v160 = *(_OWORD *)(v3 + 48);
  *(_QWORD *)(v51 + 64) = *(_QWORD *)(v3 + 64);
  *(_OWORD *)(v51 + 48) = v160;
  v161 = *(_OWORD *)(v3 + 72);
  *(_QWORD *)(v51 + 88) = *(_QWORD *)(v3 + 88);
  *(_OWORD *)(v51 + 72) = v161;
  v162 = *(_OWORD *)(v3 + 112);
  *(_OWORD *)(v51 + 96) = *(_OWORD *)(v3 + 96);
  *(_OWORD *)(v51 + 112) = v162;
  v164 = *(_OWORD *)(v3 + 160);
  v163 = *(_OWORD *)(v3 + 176);
  v165 = *(_OWORD *)(v3 + 144);
  *(_QWORD *)(v51 + 192) = *(_QWORD *)(v3 + 192);
  *(_OWORD *)(v51 + 160) = v164;
  *(_OWORD *)(v51 + 176) = v163;
  *(_OWORD *)(v51 + 144) = v165;
  *(_OWORD *)(v51 + 128) = *(_OWORD *)(v3 + 128);
  *(_OWORD *)(v51 + 200) = *(_OWORD *)(v3 + 200);
  v166 = *(_OWORD *)(v3 + 216);
  v167 = *(_OWORD *)(v3 + 232);
  v168 = *(_OWORD *)(v3 + 248);
  *(_QWORD *)(v51 + 264) = *(_QWORD *)(v3 + 264);
  *(_OWORD *)(v51 + 248) = v168;
  *(_OWORD *)(v51 + 232) = v167;
  *(_OWORD *)(v51 + 216) = v166;
  *(_OWORD *)(v51 + 272) = *(_OWORD *)(v3 + 272);
  v169 = *(_OWORD *)(v3 + 288);
  v170 = *(_OWORD *)(v3 + 304);
  v171 = *(_OWORD *)(v3 + 320);
  *(_QWORD *)(v51 + 336) = *(_QWORD *)(v3 + 336);
  *(_OWORD *)(v51 + 304) = v170;
  *(_OWORD *)(v51 + 320) = v171;
  *(_OWORD *)(v51 + 288) = v169;
  *(_OWORD *)(v51 + 344) = *(_OWORD *)(v3 + 344);
  v172 = *(_OWORD *)(v3 + 360);
  v173 = *(_OWORD *)(v3 + 376);
  v174 = *(_OWORD *)(v3 + 392);
  *(_QWORD *)(v51 + 408) = *(_QWORD *)(v3 + 408);
  *(_OWORD *)(v51 + 376) = v173;
  *(_OWORD *)(v51 + 392) = v174;
  *(_OWORD *)(v51 + 360) = v172;
  *(_OWORD *)(v51 + 416) = *(_OWORD *)(v3 + 416);
  v175 = *(_OWORD *)(v3 + 432);
  v176 = *(_OWORD *)(v3 + 448);
  v177 = *(_OWORD *)(v3 + 464);
  *(_QWORD *)(v51 + 480) = *(_QWORD *)(v3 + 480);
  *(_OWORD *)(v51 + 448) = v176;
  *(_OWORD *)(v51 + 464) = v177;
  *(_OWORD *)(v51 + 432) = v175;
  *(_OWORD *)(v51 + 488) = *(_OWORD *)(v3 + 488);
  v178 = *(_OWORD *)(v3 + 504);
  v179 = *(_OWORD *)(v3 + 520);
  v180 = *(_OWORD *)(v3 + 536);
  *(_QWORD *)(v51 + 552) = *(_QWORD *)(v3 + 552);
  *(_OWORD *)(v51 + 520) = v179;
  *(_OWORD *)(v51 + 536) = v180;
  *(_OWORD *)(v51 + 504) = v178;
  *(_OWORD *)(v51 + 560) = *(_OWORD *)(v3 + 560);
  v181 = *(_OWORD *)(v3 + 576);
  v182 = *(_OWORD *)(v3 + 592);
  v183 = *(_OWORD *)(v3 + 608);
  *(_QWORD *)(v51 + 624) = *(_QWORD *)(v3 + 624);
  *(_OWORD *)(v51 + 592) = v182;
  *(_OWORD *)(v51 + 608) = v183;
  *(_OWORD *)(v51 + 576) = v181;
  *(_OWORD *)(v51 + 632) = *(_OWORD *)(v3 + 632);
  v184 = *(_OWORD *)(v3 + 648);
  v185 = *(_OWORD *)(v3 + 664);
  v186 = *(_OWORD *)(v3 + 680);
  *(_QWORD *)(v51 + 696) = *(_QWORD *)(v3 + 696);
  *(_OWORD *)(v51 + 664) = v185;
  *(_OWORD *)(v51 + 680) = v186;
  *(_OWORD *)(v51 + 648) = v184;
  memcpy((void *)(v51 + 704), (const void *)(v3 + 704), 0x288uLL);
  v187 = *(_OWORD *)(v3 + 1352);
  *(_QWORD *)(v51 + 1368) = *(_QWORD *)(v3 + 1368);
  *(_OWORD *)(v51 + 1352) = v187;
  v188 = *(_QWORD *)(v3 + 1392);
  *(_OWORD *)(v51 + 1376) = *(_OWORD *)(v3 + 1376);
  *(_QWORD *)(v51 + 1392) = v188;
  memcpy((void *)(v51 + 1400), (const void *)(v3 + 1400), 0x288uLL);
  memcpy((void *)(v51 + 2048), (const void *)(v3 + 2048), 0x288uLL);
  v189 = *(_OWORD *)(v3 + 2696);
  *(_QWORD *)(v51 + 2712) = *(_QWORD *)(v3 + 2712);
  *(_OWORD *)(v51 + 2696) = v189;
  *(_OWORD *)(v51 + 2720) = *(_OWORD *)(v3 + 2720);
  v190 = v51 + 2736;
  v191 = (void *)*v53;
  if (*v53 == v9)
  {
    v193 = v51;
    i = v53[1];
    if (i == v9)
      goto LABEL_43;
    goto LABEL_42;
  }
  v192 = v9;
  do
  {
    v193 = v51 - 2736;
    *(_OWORD *)(v51 - 2736) = *(_OWORD *)(v192 - 2736);
    v194 = (_OWORD *)(v51 - 2720);
    v195 = *(_OWORD *)(v192 - 2720);
    *(_OWORD *)((char *)v194 + 12) = *(_OWORD *)(v192 - 2708);
    *v194 = v195;
    v196 = v51 - 2688;
    v197 = *(_OWORD *)(v192 - 2688);
    *(_QWORD *)(v196 + 16) = *(_QWORD *)(v192 - 2672);
    *(_OWORD *)v196 = v197;
    v198 = v51 - 2664;
    v199 = *(_OWORD *)(v192 - 2664);
    *(_QWORD *)(v198 + 16) = *(_QWORD *)(v192 - 2648);
    *(_OWORD *)v198 = v199;
    v200 = (_OWORD *)(v51 - 2640);
    v201 = *(_OWORD *)(v192 - 2624);
    *v200 = *(_OWORD *)(v192 - 2640);
    v200[1] = v201;
    v202 = v51 - 2608;
    v204 = *(_OWORD *)(v192 - 2576);
    v203 = *(_OWORD *)(v192 - 2560);
    v205 = *(_OWORD *)(v192 - 2592);
    *(_QWORD *)(v202 + 64) = *(_QWORD *)(v192 - 2544);
    *(_OWORD *)(v202 + 32) = v204;
    *(_OWORD *)(v202 + 48) = v203;
    *(_OWORD *)(v202 + 16) = v205;
    *(_OWORD *)v202 = *(_OWORD *)(v192 - 2608);
    v206 = v51 - 2536;
    *(_OWORD *)v206 = *(_OWORD *)(v192 - 2536);
    v207 = *(_OWORD *)(v192 - 2520);
    v208 = *(_OWORD *)(v192 - 2504);
    v209 = *(_OWORD *)(v192 - 2488);
    *(_QWORD *)(v206 + 64) = *(_QWORD *)(v192 - 2472);
    *(_OWORD *)(v206 + 32) = v208;
    *(_OWORD *)(v206 + 48) = v209;
    *(_OWORD *)(v206 + 16) = v207;
    v210 = v51 - 2464;
    *(_OWORD *)v210 = *(_OWORD *)(v192 - 2464);
    v211 = *(_OWORD *)(v192 - 2448);
    v212 = *(_OWORD *)(v192 - 2432);
    v213 = *(_OWORD *)(v192 - 2416);
    *(_QWORD *)(v210 + 64) = *(_QWORD *)(v192 - 2400);
    *(_OWORD *)(v210 + 32) = v212;
    *(_OWORD *)(v210 + 48) = v213;
    *(_OWORD *)(v210 + 16) = v211;
    v214 = v51 - 2392;
    *(_OWORD *)v214 = *(_OWORD *)(v192 - 2392);
    v215 = *(_OWORD *)(v192 - 2376);
    v216 = *(_OWORD *)(v192 - 2360);
    v217 = *(_OWORD *)(v192 - 2344);
    *(_QWORD *)(v214 + 64) = *(_QWORD *)(v192 - 2328);
    *(_OWORD *)(v214 + 32) = v216;
    *(_OWORD *)(v214 + 48) = v217;
    *(_OWORD *)(v214 + 16) = v215;
    v218 = v51 - 2320;
    *(_OWORD *)v218 = *(_OWORD *)(v192 - 2320);
    v219 = *(_OWORD *)(v192 - 2304);
    v220 = *(_OWORD *)(v192 - 2288);
    v221 = *(_OWORD *)(v192 - 2272);
    *(_QWORD *)(v218 + 64) = *(_QWORD *)(v192 - 2256);
    *(_OWORD *)(v218 + 32) = v220;
    *(_OWORD *)(v218 + 48) = v221;
    *(_OWORD *)(v218 + 16) = v219;
    v222 = v51 - 2248;
    *(_OWORD *)v222 = *(_OWORD *)(v192 - 2248);
    v223 = *(_OWORD *)(v192 - 2232);
    v224 = *(_OWORD *)(v192 - 2216);
    v225 = *(_OWORD *)(v192 - 2200);
    *(_QWORD *)(v222 + 64) = *(_QWORD *)(v192 - 2184);
    *(_OWORD *)(v222 + 32) = v224;
    *(_OWORD *)(v222 + 48) = v225;
    *(_OWORD *)(v222 + 16) = v223;
    v226 = v51 - 2176;
    *(_OWORD *)v226 = *(_OWORD *)(v192 - 2176);
    v227 = *(_OWORD *)(v192 - 2160);
    v228 = *(_OWORD *)(v192 - 2144);
    v229 = *(_OWORD *)(v192 - 2128);
    *(_QWORD *)(v226 + 64) = *(_QWORD *)(v192 - 2112);
    *(_OWORD *)(v226 + 32) = v228;
    *(_OWORD *)(v226 + 48) = v229;
    *(_OWORD *)(v226 + 16) = v227;
    v230 = v51 - 2104;
    *(_OWORD *)v230 = *(_OWORD *)(v192 - 2104);
    v231 = *(_OWORD *)(v192 - 2088);
    v232 = *(_OWORD *)(v192 - 2072);
    v233 = *(_OWORD *)(v192 - 2056);
    *(_QWORD *)(v230 + 64) = *(_QWORD *)(v192 - 2040);
    *(_OWORD *)(v230 + 32) = v232;
    *(_OWORD *)(v230 + 48) = v233;
    *(_OWORD *)(v230 + 16) = v231;
    memcpy((void *)(v51 - 2032), (const void *)(v192 - 2032), 0x288uLL);
    v234 = v51 - 1384;
    v235 = *(_OWORD *)(v192 - 1384);
    *(_QWORD *)(v234 + 16) = *(_QWORD *)(v192 - 1368);
    *(_OWORD *)v234 = v235;
    v236 = v51 - 1360;
    v237 = *(_QWORD *)(v192 - 1344);
    *(_OWORD *)v236 = *(_OWORD *)(v192 - 1360);
    *(_QWORD *)(v236 + 16) = v237;
    memcpy((void *)(v51 - 1336), (const void *)(v192 - 1336), 0x288uLL);
    memcpy((void *)(v51 - 688), (const void *)(v192 - 688), 0x288uLL);
    v238 = *(_OWORD *)(v192 - 40);
    *(_QWORD *)(v51 - 24) = *(_QWORD *)(v192 - 24);
    *(_OWORD *)(v51 - 40) = v238;
    *(_OWORD *)(v51 - 16) = *(_OWORD *)(v192 - 16);
    v192 -= 2736;
    v51 -= 2736;
  }
  while ((void *)v192 != v191);
  for (i = v53[1]; v9 != i; v9 += 2736)
  {
LABEL_42:
    *(_OWORD *)v190 = *(_OWORD *)v9;
    v240 = *(_OWORD *)(v9 + 16);
    *(_OWORD *)(v190 + 28) = *(_OWORD *)(v9 + 28);
    *(_OWORD *)(v190 + 16) = v240;
    v241 = *(_OWORD *)(v9 + 48);
    *(_QWORD *)(v190 + 64) = *(_QWORD *)(v9 + 64);
    *(_OWORD *)(v190 + 48) = v241;
    v242 = *(_OWORD *)(v9 + 72);
    *(_QWORD *)(v190 + 88) = *(_QWORD *)(v9 + 88);
    *(_OWORD *)(v190 + 72) = v242;
    v243 = *(_OWORD *)(v9 + 112);
    *(_OWORD *)(v190 + 96) = *(_OWORD *)(v9 + 96);
    *(_OWORD *)(v190 + 112) = v243;
    v245 = *(_OWORD *)(v9 + 160);
    v244 = *(_OWORD *)(v9 + 176);
    v246 = *(_OWORD *)(v9 + 144);
    *(_QWORD *)(v190 + 192) = *(_QWORD *)(v9 + 192);
    *(_OWORD *)(v190 + 160) = v245;
    *(_OWORD *)(v190 + 176) = v244;
    *(_OWORD *)(v190 + 144) = v246;
    *(_OWORD *)(v190 + 128) = *(_OWORD *)(v9 + 128);
    *(_OWORD *)(v190 + 200) = *(_OWORD *)(v9 + 200);
    v247 = *(_OWORD *)(v9 + 216);
    v248 = *(_OWORD *)(v9 + 232);
    v249 = *(_OWORD *)(v9 + 248);
    *(_QWORD *)(v190 + 264) = *(_QWORD *)(v9 + 264);
    *(_OWORD *)(v190 + 248) = v249;
    *(_OWORD *)(v190 + 232) = v248;
    *(_OWORD *)(v190 + 216) = v247;
    *(_OWORD *)(v190 + 272) = *(_OWORD *)(v9 + 272);
    v250 = *(_OWORD *)(v9 + 288);
    v251 = *(_OWORD *)(v9 + 304);
    v252 = *(_OWORD *)(v9 + 320);
    *(_QWORD *)(v190 + 336) = *(_QWORD *)(v9 + 336);
    *(_OWORD *)(v190 + 304) = v251;
    *(_OWORD *)(v190 + 320) = v252;
    *(_OWORD *)(v190 + 288) = v250;
    *(_OWORD *)(v190 + 344) = *(_OWORD *)(v9 + 344);
    v253 = *(_OWORD *)(v9 + 360);
    v254 = *(_OWORD *)(v9 + 376);
    v255 = *(_OWORD *)(v9 + 392);
    *(_QWORD *)(v190 + 408) = *(_QWORD *)(v9 + 408);
    *(_OWORD *)(v190 + 376) = v254;
    *(_OWORD *)(v190 + 392) = v255;
    *(_OWORD *)(v190 + 360) = v253;
    *(_OWORD *)(v190 + 416) = *(_OWORD *)(v9 + 416);
    v256 = *(_OWORD *)(v9 + 432);
    v257 = *(_OWORD *)(v9 + 448);
    v258 = *(_OWORD *)(v9 + 464);
    *(_QWORD *)(v190 + 480) = *(_QWORD *)(v9 + 480);
    *(_OWORD *)(v190 + 448) = v257;
    *(_OWORD *)(v190 + 464) = v258;
    *(_OWORD *)(v190 + 432) = v256;
    *(_OWORD *)(v190 + 488) = *(_OWORD *)(v9 + 488);
    v259 = *(_OWORD *)(v9 + 504);
    v260 = *(_OWORD *)(v9 + 520);
    v261 = *(_OWORD *)(v9 + 536);
    *(_QWORD *)(v190 + 552) = *(_QWORD *)(v9 + 552);
    *(_OWORD *)(v190 + 520) = v260;
    *(_OWORD *)(v190 + 536) = v261;
    *(_OWORD *)(v190 + 504) = v259;
    *(_OWORD *)(v190 + 560) = *(_OWORD *)(v9 + 560);
    v262 = *(_OWORD *)(v9 + 576);
    v263 = *(_OWORD *)(v9 + 592);
    v264 = *(_OWORD *)(v9 + 608);
    *(_QWORD *)(v190 + 624) = *(_QWORD *)(v9 + 624);
    *(_OWORD *)(v190 + 592) = v263;
    *(_OWORD *)(v190 + 608) = v264;
    *(_OWORD *)(v190 + 576) = v262;
    *(_OWORD *)(v190 + 632) = *(_OWORD *)(v9 + 632);
    v265 = *(_OWORD *)(v9 + 648);
    v266 = *(_OWORD *)(v9 + 664);
    v267 = *(_OWORD *)(v9 + 680);
    *(_QWORD *)(v190 + 696) = *(_QWORD *)(v9 + 696);
    *(_OWORD *)(v190 + 664) = v266;
    *(_OWORD *)(v190 + 680) = v267;
    *(_OWORD *)(v190 + 648) = v265;
    memcpy((void *)(v190 + 704), (const void *)(v9 + 704), 0x288uLL);
    v268 = *(_OWORD *)(v9 + 1352);
    *(_QWORD *)(v190 + 1368) = *(_QWORD *)(v9 + 1368);
    *(_OWORD *)(v190 + 1352) = v268;
    v269 = *(_QWORD *)(v9 + 1392);
    *(_OWORD *)(v190 + 1376) = *(_OWORD *)(v9 + 1376);
    *(_QWORD *)(v190 + 1392) = v269;
    memcpy((void *)(v190 + 1400), (const void *)(v9 + 1400), 0x288uLL);
    memcpy((void *)(v190 + 2048), (const void *)(v9 + 2048), 0x288uLL);
    v270 = *(_OWORD *)(v9 + 2696);
    *(_QWORD *)(v190 + 2712) = *(_QWORD *)(v9 + 2712);
    *(_OWORD *)(v190 + 2696) = v270;
    *(_OWORD *)(v190 + 2720) = *(_OWORD *)(v9 + 2720);
    v190 += 2736;
  }
LABEL_43:
  v271 = (void *)*v53;
  *v53 = v193;
  v53[1] = v190;
  v53[2] = (uint64_t)v56;
  if (v271)
    operator delete(v271);
}

void sub_20F45CBF8(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_20F45CC10(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (a1)
  {
    sub_20F45CC10(*a1);
    sub_20F45CC10(a1[1]);
    v2 = (std::__shared_weak_count *)a1[8];
    if (!v2)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      operator delete(a1);
    }
    else
    {
LABEL_6:
      operator delete(a1);
    }
  }
}

void sub_20F45CC90(_QWORD *a1, uint64_t a2, float64x2_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t *v23;
  unsigned int v24;
  unint64_t v25;
  _QWORD *v26;
  unsigned int v27;
  unsigned int v28;
  unint64_t v30;
  unsigned int v31;
  BOOL v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unsigned int v42;
  BOOL v43;
  uint64_t v44;
  uint64_t *v45;
  int8x16_t v46;
  int32x4_t v47;
  int32x4_t v48;
  float64x2_t v49;
  float64x2_t v50;
  uint64_t *v51;
  uint64_t v52;
  float32x2_t v53;
  unsigned int v54;
  float64x2_t v55;
  double v56;
  uint64_t v57;
  float64x2_t *v58;
  float64x2_t *v59;
  uint64_t v60;
  float64x2_t v61;
  float64x2_t *v62;
  float64x2_t *v63;
  uint64_t v64;
  float64x2_t *v65;
  float64x2_t *v66;
  double *v67;
  uint64_t v68;
  float64x2_t *v69;
  float64x2_t *v70;
  uint64_t v71;
  char v72;
  int64x2_t *v73;
  double *v74;
  double *v75;
  float64x2_t *v76;
  float64x2_t *v77;
  uint64_t v78;
  double *v79;
  float64x2_t *v80;
  uint64_t v81;
  float64x2_t *v82;
  double *v83;
  double v84;
  double v85;
  int8x16_t v86;
  float64x2_t v87;
  __int128 v88;
  __int128 v95;
  int64x2_t v96;
  double *v97;
  double v98;
  double v99;
  int8x16_t v100;
  float64x2_t v101;
  __int128 v102;
  __int128 v106;
  int64x2_t v107;
  float64x2_t *v108;
  float64x2_t *v109;
  uint64_t v110;
  double v111;
  float64x2_t v115;
  _QWORD *v116;
  uint64_t *v117;
  unint64_t v118;
  unsigned int v119;
  unint64_t v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  uint64_t *v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  uint64_t *v127;
  uint64_t *v128;
  int8x16_t v129;
  int8x16_t v130;
  int32x4_t v131;
  int32x4_t v132;
  int8x16_t v133;
  double v136;
  float64x2_t v137;
  float64x2_t v139;
  float32x4_t v145;
  float32x4_t v146;
  double v147;
  float64x2_t v152;
  double v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v159;
  int8x16_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  int8x16_t v164;
  int8x16_t v165;
  int32x4_t v166;
  int32x4_t v167;
  int8x16_t v168;
  unint64_t *v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *p_shared_weak_owners;
  unint64_t v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *p_shared_owners;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  _QWORD *v183;
  uint64_t v184;
  _QWORD *v187;
  float64x2_t v188;
  float64_t v189;
  uint64_t *v190;
  std::__shared_weak_count *v191;
  float64x2_t *v192;
  float64x2_t *v193;
  float64x2_t *v194;
  float64x2_t *v195;
  uint64_t v196;
  int64x2_t v197;
  float64_t v198;
  int64x2_t v199;
  float64_t v200;
  float64x2_t v201;
  uint64_t v202;
  float64x2_t v203;
  int8x16_t v204;
  int64x2_t v205;
  int64x2_t v206;
  float64x2_t v207;
  uint64_t v208;
  int8x16_t v209;
  float64_t v210;
  __int128 v211;
  unint64_t v212;
  __int128 v213;
  uint64_t v214;
  double v215;
  float64_t v216;
  uint64_t v217;

  v217 = *MEMORY[0x24BDAC8D0];
  v12 = *(uint64_t **)(a6 + 8);
  v10 = (_QWORD *)(a6 + 8);
  v11 = v12;
  v187 = v10;
  if (!v12)
    goto LABEL_13;
  v14 = *(_QWORD *)(a4 + 24);
  v13 = *(_QWORD *)(a4 + 32);
  v15 = v10;
  do
  {
    v16 = v11[4];
    if (v16 < v14)
    {
      ++v11;
    }
    else if (v16 == v14)
    {
      if (*((_DWORD *)v11 + 10) < v13)
        ++v11;
      else
        v15 = v11;
    }
    else
    {
      v15 = v11;
    }
    v11 = (uint64_t *)*v11;
  }
  while (v11);
  if (v15 == v10 || (v17 = v15[4], v14 < v17) || v14 == v17 && *((_DWORD *)v15 + 10) > v13)
  {
LABEL_13:
    v18 = 0;
  }
  else
  {
    v18 = (uint64_t *)v15[6];
    v178 = (std::__shared_weak_count *)v15[7];
    if (v178)
    {
      p_shared_owners = (unint64_t *)&v178->__shared_owners_;
      do
        v180 = __ldxr(p_shared_owners);
      while (__stxr(v180 + 1, p_shared_owners));
      v190 = v18;
      v191 = v178;
      do
        v181 = __ldxr(p_shared_owners);
      while (__stxr(v181 + 1, p_shared_owners));
      do
        v182 = __ldaxr(p_shared_owners);
      while (__stlxr(v182 - 1, p_shared_owners));
      if (!v182)
      {
        ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
        std::__shared_weak_count::__release_weak(v178);
      }
      goto LABEL_15;
    }
  }
  v190 = v18;
  v191 = 0;
LABEL_15:
  v20 = *(uint64_t **)(a4 + 200);
  v19 = *(uint64_t **)(a4 + 208);
  if (v20 == v19)
    goto LABEL_202;
  v23 = *(uint64_t **)(a2 + 8);
  v22 = (_QWORD *)(a2 + 8);
  v21 = v23;
  if (!v23)
    goto LABEL_202;
  v183 = a1;
LABEL_19:
  v24 = *((_DWORD *)v20 + 4);
  v25 = *v20;
  v26 = v22;
  v27 = *((_DWORD *)v20 + 2);
  do
  {
    while (1)
    {
      v28 = *((_DWORD *)v21 + 12);
      _CF = v28 >= v24;
      if (v28 != v24)
        goto LABEL_25;
      v30 = v21[4];
      if (v30 >= v25)
        break;
LABEL_20:
      v21 = (uint64_t *)v21[1];
      if (!v21)
        goto LABEL_28;
    }
    if (v30 != v25)
      goto LABEL_27;
    _CF = *((_DWORD *)v21 + 10) >= v27;
LABEL_25:
    if (!_CF)
      goto LABEL_20;
LABEL_27:
    v26 = v21;
    v21 = (uint64_t *)*v21;
  }
  while (v21);
LABEL_28:
  if (v26 == v22)
    goto LABEL_201;
  v31 = *((_DWORD *)v26 + 12);
  v32 = v24 >= v31;
  if (v24 != v31)
    goto LABEL_33;
  v33 = v26[4];
  if (v25 < v33)
    goto LABEL_201;
  if (v25 == v33)
  {
    v32 = v27 >= *((_DWORD *)v26 + 10);
LABEL_33:
    if (!v32)
      goto LABEL_201;
  }
  v34 = *(_DWORD *)(v20[3] + 4);
  v35 = *(_QWORD *)(v26[7] + 72);
  v36 = v190;
  if (v190)
  {
    v37 = v190[25];
    v38 = v190[26];
    if (v38 == v37)
    {
LABEL_47:
      if ((v37 == v38 || *(_DWORD *)(v37 + 16) != v24 || *(_QWORD *)v37 != v25 || *(_DWORD *)(v37 + 8) != v27)
        && (char *)v36[26] == sub_20F287E70(v190, (__int128 *)v20, v35 + 40 * v34)
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingTypes/include/VIO/MappingTypes/MapKeyframeCreator.hpp", 274, (uint64_t)"nit != new_track->end()", 23, (uint64_t)"Failed to add a node to track map", 33, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      goto LABEL_201;
    }
    v39 = (v38 - v37) >> 5;
    while (2)
    {
      v40 = v39 >> 1;
      v41 = v37 + 32 * (v39 >> 1);
      v42 = *(_DWORD *)(v41 + 16);
      v43 = v42 >= v24;
      if (v42 == v24)
      {
        if (*(_QWORD *)v41 >= v25)
        {
          if (*(_QWORD *)v41 == v25)
          {
            v43 = *(_DWORD *)(v41 + 8) >= v27;
            goto LABEL_44;
          }
LABEL_39:
          v39 = v40;
          if (!v40)
            goto LABEL_47;
          continue;
        }
      }
      else
      {
LABEL_44:
        if (v43)
          goto LABEL_39;
      }
      break;
    }
    v37 = v41 + 32;
    v40 = v39 + ~v40;
    goto LABEL_39;
  }
  v184 = v35 + 40 * v34;
  if (*(_BYTE *)(a4 + 192))
    v44 = a4 + 40;
  else
    v44 = 0;
  v45 = sub_20E9DF85C((_QWORD *)(a5 + 1784), v20);
  if (v45)
    v51 = v45 + 5;
  else
    v51 = 0;
  if (!v45
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingTypes/include/VIO/MappingTypes/MapKeyframeCreator.hpp", 242, (uint64_t)"anchor_pose_ref", 15, (uint64_t)"Failed to find anchor pose_ref", 30, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v52 = v51[8];
  v53 = *(float32x2_t *)(v35 + 40 * v34 + 8);
  v54 = *(_DWORD *)(v52 + 992);
  if (v54 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_224;
    }
    v54 = *(_DWORD *)(v52 + 992);
    v55 = vcvtq_f64_f32(v53);
    if (v54 > 7)
      goto LABEL_68;
LABEL_64:
    if (v54)
    {
      *(double *)v47.i64 = *(double *)(v52 + 72) * v55.f64[0];
      v56 = v55.f64[1];
      v215 = *(double *)(v52 + 88) + *(double *)v47.i64 + vmuld_lane_f64(*(double *)(v52 + 80), v55, 1);
      v46.i64[0] = *(_QWORD *)(v52 + 112);
      v55.f64[0] = v55.f64[1] * *(double *)(v52 + 104) + *(double *)v46.i64;
      goto LABEL_69;
    }
    goto LABEL_223;
  }
  v55 = vcvtq_f64_f32(v53);
  if (v54 <= 7)
    goto LABEL_64;
LABEL_68:
  v215 = *(double *)(v52 + 88) + *(double *)(v52 + 72) * v55.f64[0] + vmuld_lane_f64(*(double *)(v52 + 80), v55, 1);
  v56 = *(double *)(v52 + 104);
  v46.i64[0] = *(_QWORD *)(v52 + 112);
  v55.f64[0] = vmuld_lane_f64(v56, v55, 1) + *(double *)v46.i64;
  if (v54 < 0xE)
  {
LABEL_69:
    v216 = v55.f64[0];
    goto LABEL_70;
  }
  v216 = v55.f64[0];
  if (v54 == 14)
  {
LABEL_70:
    v192 = &v188;
    v193 = (float64x2_t *)&v215;
    v195 = 0;
    v196 = 0;
    v194 = 0;
    if (v54 > 7)
      goto LABEL_112;
LABEL_71:
    if (v54 > 3)
    {
      v68 = (uint64_t)v192;
      v67 = (double *)v193;
      v69 = v194;
      v70 = v195;
      v71 = v196;
      if (v54 > 5)
      {
        if (v54 == 6)
          v72 = sub_20EB41C58((double *)v52, (uint64_t)v192, v193->f64, v194, (uint64_t)v195, v196);
        else
          v72 = sub_20EB306CC(v52, (uint64_t)v192, v193, v194, (unint64_t)v195, v196, v55.f64[0], v56, v46, (int8x16_t)v47, *(double *)v48.i64, v49.f64[0], v50);
      }
      else if (v54 == 5)
      {
        if (v194)
        {
          v194->f64[0] = 0.0;
          v69->f64[1] = 0.0;
          v69[1].f64[0] = 0.0;
        }
        if (v71)
        {
          *(_QWORD *)(v71 + 64) = 0;
          *(_OWORD *)(v71 + 32) = 0u;
          *(_OWORD *)(v71 + 48) = 0u;
          *(_OWORD *)v71 = 0u;
          *(_OWORD *)(v71 + 16) = 0u;
        }
        if (v70)
          v72 = sub_20EB28F10(v68, (uint64_t)v70, v67, v52 + 168, 5);
        else
          v72 = sub_20EB2886C(v68, v67, v52 + 168, 5);
      }
      else
      {
        if (v194)
        {
          v194->f64[0] = 0.0;
          v69->f64[1] = 0.0;
          v69[1].f64[0] = 0.0;
        }
        if (v71)
        {
          *(_QWORD *)(v71 + 64) = 0;
          v55 = 0uLL;
          *(_OWORD *)(v71 + 32) = 0u;
          *(_OWORD *)(v71 + 48) = 0u;
          *(_OWORD *)v71 = 0u;
          *(_OWORD *)(v71 + 16) = 0u;
        }
        v73 = (int64x2_t *)(v52 + 168);
        if (v70)
        {
          if (!*(_BYTE *)(v52 + 468))
          {
            *(_QWORD *)&v55.f64[0] = sub_20EB27C0C(v52 + 204, (double *)(v52 + 168), 0x32uLL, (int8x16_t)v55, v56, v46, (int8x16_t)v47).u64[0];
            *(_BYTE *)(v52 + 468) = 1;
            v73 = (int64x2_t *)(v52 + 168);
          }
          v72 = sub_20EA8D684(v68, (uint64_t)v67, v73, (float *)(v52 + 204), v70, 5, v55.f64[0], v56, *(double *)v46.i64, *(double *)v47.i64, *(double *)v48.i64, v49.f64[0], v50);
        }
        else
        {
          if (!*(_BYTE *)(v52 + 468))
          {
            *(_QWORD *)&v55.f64[0] = sub_20EB27C0C(v52 + 204, (double *)(v52 + 168), 0x32uLL, (int8x16_t)v55, v56, v46, (int8x16_t)v47).u64[0];
            *(_BYTE *)(v52 + 468) = 1;
            v73 = (int64x2_t *)(v52 + 168);
          }
          v72 = sub_20EA8D684(v68, (uint64_t)v67, v73, (float *)(v52 + 204), 0, 5, v55.f64[0], v56, *(double *)v46.i64, *(double *)v47.i64, *(double *)v48.i64, v49.f64[0], v50);
        }
      }
      goto LABEL_161;
    }
    if (v54 > 1)
    {
      if (v54 == 2)
      {
        v72 = sub_20EA8D22C((uint64_t)&v192, v52);
      }
      else
      {
        v74 = (double *)v192;
        v75 = (double *)v193;
        v77 = v194;
        v76 = v195;
        v78 = v196;
        if (v194)
        {
          v194->f64[0] = 0.0;
          v77->f64[1] = 0.0;
          v77[1].f64[0] = 0.0;
        }
        if (v78)
        {
          *(_QWORD *)(v78 + 64) = 0;
          v55.f64[0] = 0.0;
          *(_OWORD *)(v78 + 32) = 0u;
          *(_OWORD *)(v78 + 48) = 0u;
          *(_OWORD *)v78 = 0u;
          *(_OWORD *)(v78 + 16) = 0u;
        }
        if (v76)
          v72 = sub_20EB27398(v74, (uint64_t)v76, v75, (int64x2_t *)(v52 + 168), 20, v55.f64[0], v56, *(double *)v46.i64, *(double *)v47.i64, (int64x2_t)v48);
        else
          v72 = sub_20EB23DF0((uint64_t)v74, v75, (int64x2_t *)(v52 + 168), 20, v55.f64[0], v56, *(double *)v46.i64, *(double *)v47.i64, (int64x2_t)v48, v49);
      }
      goto LABEL_161;
    }
    if (v54)
    {
      v57 = (uint64_t)v192;
      v59 = v194;
      v58 = v195;
      v60 = v196;
      v61 = *v193;
      *v192 = *v193;
      *(_QWORD *)(v57 + 16) = 0x3FF0000000000000;
      if (v59)
      {
        v59->f64[0] = 0.0;
        v59->f64[1] = 0.0;
        v59[1].f64[0] = 0.0;
      }
      if (v58)
      {
        *v58 = (float64x2_t)xmmword_210312EC0;
        v58[1] = (float64x2_t)unk_210312ED0;
        v61.f64[1] = 0.0;
        v58[2] = (float64x2_t)xmmword_210312EE0;
      }
      if (v60)
      {
        *(_QWORD *)(v60 + 64) = 0;
        v61.f64[1] = 0.0;
        *(_OWORD *)(v60 + 32) = 0u;
        *(_OWORD *)(v60 + 48) = 0u;
        *(_OWORD *)v60 = 0u;
        *(_OWORD *)(v60 + 16) = 0u;
      }
      goto LABEL_163;
    }
LABEL_223:
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
    goto LABEL_224;
  }
  v62 = &v188;
  v63 = (float64x2_t *)&v215;
  v192 = &v188;
  v193 = (float64x2_t *)&v215;
  v195 = 0;
  v196 = 0;
  v194 = 0;
  if (v54 != -1)
  {
    v64 = 0;
    v65 = 0;
    v66 = 0;
    goto LABEL_139;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_224:
    abort();
  }
  v54 = *(_DWORD *)(v52 + 992);
  if (v54 <= 7)
    goto LABEL_71;
LABEL_112:
  v62 = v192;
  if (v54 > 0xB)
  {
    if (v54 <= 0xD)
    {
      if (v54 == 13)
      {
        v72 = sub_20EB43734((double *)v52, (uint64_t)v192, (uint64_t)v193, v194, (uint64_t)v195, v196);
        goto LABEL_161;
      }
      v109 = v194;
      v108 = v195;
      v110 = v196;
      if (v194)
      {
        v194->f64[0] = 0.0;
        v109->f64[1] = 0.0;
        v109[1].f64[0] = 0.0;
      }
      if (v110)
      {
        *(_QWORD *)(v110 + 64) = 0;
        *(_OWORD *)(v110 + 32) = 0u;
        *(_OWORD *)(v110 + 48) = 0u;
        *(_OWORD *)v110 = 0u;
        *(_OWORD *)(v110 + 16) = 0u;
      }
      v62->f64[0] = 0.0;
      v62->f64[1] = 0.0;
      v62[1].f64[0] = 0.0;
      if (v108)
      {
        v108[1] = 0u;
        v108[2] = 0u;
        *v108 = 0u;
      }
      goto LABEL_162;
    }
    v63 = v193;
    v66 = v194;
    v65 = v195;
    v64 = v196;
    if (v54 != 14)
    {
LABEL_139:
      v72 = sub_20EB3CED8(v52, (uint64_t)v62, v63, v66, v65, v64);
      goto LABEL_161;
    }
    if (v194)
    {
      v194->f64[0] = 0.0;
      v66->f64[1] = 0.0;
      v66[1].f64[0] = 0.0;
    }
    if (v64)
    {
      *(_QWORD *)(v64 + 64) = 0;
      *(_OWORD *)(v64 + 32) = 0u;
      *(_OWORD *)(v64 + 48) = 0u;
      *(_OWORD *)v64 = 0u;
      *(_OWORD *)(v64 + 16) = 0u;
    }
    v97 = (double *)(v52 + 392);
    v98 = *(double *)v52 + *(double *)(v52 + 32);
    v99 = v98 * 0.5;
    if (!v65)
    {
      v72 = sub_20EB253A0((uint64_t)v62, (uint64_t)v63, (double *)(v52 + 168), v97, 0x14u, v98 * 0.5);
      goto LABEL_161;
    }
    if (!sub_20EB253A0((uint64_t)v62, (uint64_t)v63, (double *)(v52 + 168), v97, 0x14u, v98 * 0.5))
      goto LABEL_162;
    if (!sub_20EB2498C(&v203, (uint64_t)&v204, &v201, (uint64_t)v62, (double *)(v52 + 168), v99))
      goto LABEL_162;
    v100.i64[0] = *(_QWORD *)&v62[1].f64[0];
    v101 = *v62;
    *(_QWORD *)&v102 = v205.i64[0];
    _Q3 = v204;
    v207 = v101;
    v208 = v100.i64[0];
    v202 = 0;
    *(_QWORD *)&_Q5.f64[0] = v100.i64[0];
    _Q5.f64[1] = v101.f64[0];
    _Q5.f64[0] = vmlsq_f64(vmulq_f64(*(float64x2_t *)&v206, _Q5), (float64x2_t)vzip2q_s64(v206, v205), (float64x2_t)vextq_s8(*(int8x16_t *)&v101, v100, 8uLL)).f64[1];
    __asm { FMLA            D6, D5, V3.D[1] }
    if (fabs(vmlad_n_f64(_D6, vmlsq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vmulq_f64((float64x2_t)v205, v101), 1), (float64x2_t)v206, v101).f64[0], *(double *)v205.i64)) >= 0.00000001)
    {
      *(_QWORD *)&v106 = vextq_s8(v204, v204, 8uLL).u64[0];
      _Q3.i64[1] = vextq_s8((int8x16_t)v205, (int8x16_t)v205, 8uLL).u64[0];
      *((_QWORD *)&v106 + 1) = v206.i64[0];
      *((_QWORD *)&v102 + 1) = vextq_s8((int8x16_t)v206, (int8x16_t)v206, 8uLL).u64[0];
      v209 = _Q3;
      v210 = v101.f64[0];
      v212 = vextq_s8((int8x16_t)v101, (int8x16_t)v101, 8uLL).u64[0];
      v211 = v106;
      v214 = v100.i64[0];
      v213 = v102;
      sub_20E8BE424((uint64_t)&v197);
      v61.f64[0] = v198;
      v107 = vzip2q_s64(v197, v199);
      v61.f64[1] = v200;
      *(int64x2_t *)v65 = vzip1q_s64(v197, v199);
      v65[1] = (float64x2_t)v107;
      v65[2] = v61;
    }
    else
    {
LABEL_162:
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingTypes/include/VIO/MappingTypes/MapKeyframeCreator.hpp", 248, (uint64_t)"ret", 3, (uint64_t)"Failed to compute calibrated measurement", 40, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
    }
  }
  else
  {
    v79 = (double *)v193;
    v80 = v194;
    v82 = v195;
    v81 = v196;
    if (v54 > 9)
    {
      if (v54 != 10)
      {
        v72 = sub_20EB38E20(v52, (uint64_t)v192, v193, v194, v195, v196);
        goto LABEL_161;
      }
      if (v194)
      {
        v194->f64[0] = 0.0;
        v80->f64[1] = 0.0;
        v80[1].f64[0] = 0.0;
      }
      if (v81)
      {
        *(_QWORD *)(v81 + 64) = 0;
        *(_OWORD *)(v81 + 32) = 0u;
        *(_OWORD *)(v81 + 48) = 0u;
        *(_OWORD *)v81 = 0u;
        *(_OWORD *)(v81 + 16) = 0u;
      }
      v83 = (double *)(v52 + 280);
      v84 = *(double *)v52 + *(double *)(v52 + 32);
      v85 = v84 * 0.5;
      if (!v82)
      {
        v72 = sub_20EB24F38((uint64_t)v62, (uint64_t)v79, v52 + 168, v83, 0x14u, v84 * 0.5);
        goto LABEL_161;
      }
      if (!sub_20EB24F38((uint64_t)v62, (uint64_t)v79, v52 + 168, v83, 0x14u, v84 * 0.5))
        goto LABEL_162;
      if (!sub_20EB2450C(&v203, (uint64_t)&v204, &v201, (uint64_t)v62, (double *)(v52 + 168), v85))
        goto LABEL_162;
      v86.i64[0] = *(_QWORD *)&v62[1].f64[0];
      v87 = *v62;
      *(_QWORD *)&v88 = v205.i64[0];
      _Q3 = v204;
      v207 = v87;
      v208 = v86.i64[0];
      v202 = 0;
      *(_QWORD *)&_Q5.f64[0] = v86.i64[0];
      _Q5.f64[1] = v87.f64[0];
      _Q5.f64[0] = vmlsq_f64(vmulq_f64(*(float64x2_t *)&v206, _Q5), (float64x2_t)vzip2q_s64(v206, v205), (float64x2_t)vextq_s8(*(int8x16_t *)&v87, v86, 8uLL)).f64[1];
      __asm { FMLA            D6, D5, V3.D[1] }
      if (fabs(vmlad_n_f64(_D6, vmlsq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vmulq_f64((float64x2_t)v205, v87), 1), (float64x2_t)v206, v87).f64[0], *(double *)v205.i64)) < 0.00000001)goto LABEL_162;
      *(_QWORD *)&v95 = vextq_s8(v204, v204, 8uLL).u64[0];
      _Q3.i64[1] = vextq_s8((int8x16_t)v205, (int8x16_t)v205, 8uLL).u64[0];
      *((_QWORD *)&v95 + 1) = v206.i64[0];
      *((_QWORD *)&v88 + 1) = vextq_s8((int8x16_t)v206, (int8x16_t)v206, 8uLL).u64[0];
      v209 = _Q3;
      v210 = v87.f64[0];
      v212 = vextq_s8((int8x16_t)v87, (int8x16_t)v87, 8uLL).u64[0];
      v211 = v95;
      v214 = v86.i64[0];
      v213 = v88;
      sub_20E8BE424((uint64_t)&v197);
      v61.f64[0] = v198;
      v96 = vzip2q_s64(v197, v199);
      v61.f64[1] = v200;
      *(int64x2_t *)v82 = vzip1q_s64(v197, v199);
      v82[1] = (float64x2_t)v96;
      v82[2] = v61;
    }
    else
    {
      if (v54 == 9)
      {
        v72 = sub_20EB35004(v52, (uint64_t)v192, v193, v194, (unint64_t)v195, v196, v55.f64[0], v56, *(double *)v46.i64, v47, v48);
      }
      else
      {
        if (v194)
        {
          v194->f64[0] = 0.0;
          v80->f64[1] = 0.0;
          v80[1].f64[0] = 0.0;
        }
        if (v81)
        {
          *(_QWORD *)(v81 + 64) = 0;
          v55.f64[0] = 0.0;
          *(_OWORD *)(v81 + 32) = 0u;
          *(_OWORD *)(v81 + 48) = 0u;
          *(_OWORD *)v81 = 0u;
          *(_OWORD *)(v81 + 16) = 0u;
        }
        if (v82)
        {
          v72 = sub_20EB277C4((uint64_t)v62, (uint64_t)v82, v79, v52 + 168, 20, v55.f64[0], v56, *(double *)v46.i64, v47, v48);
        }
        else
        {
          v111 = sqrt(*v79 * *v79 + v79[1] * v79[1]);
          v72 = sub_20EB24018((uint64_t)v62, v79, (double *)(v52 + 168), 20, v111, v111, *(double *)v46.i64, v47, v48);
        }
      }
LABEL_161:
      if ((v72 & 1) == 0)
        goto LABEL_162;
    }
  }
LABEL_163:
  v61.f64[0] = v189;
  _Q1 = v188;
  _Q2 = vmulq_f64(_Q1, _Q1);
  _D3 = v188.f64[1];
  __asm { FMLA            D2, D3, V1.D[1] }
  _Q2.f64[0] = 1.0 / sqrt(_Q2.f64[0] + v61.f64[0] * v61.f64[0]);
  v188 = vmulq_n_f64(v188, _Q2.f64[0]);
  *(_QWORD *)&v189 = *(_OWORD *)&vmulq_f64(v61, _Q2);
  sub_20F25C29C(*(_DWORD *)(a4 + 32), v20, a5, (__int128 *)(v44 + 8), (__int128 *)&v188, a6, v184);
  v116 = v187;
  v117 = (uint64_t *)*v187;
  if (!*v187)
    goto LABEL_175;
  v118 = *(_QWORD *)(a4 + 24);
  v119 = *(_DWORD *)(a4 + 32);
  do
  {
    v120 = v117[4];
    if (v120 < v118)
    {
      ++v117;
    }
    else if (v120 == v118)
    {
      if (*((_DWORD *)v117 + 10) < v119)
        ++v117;
      else
        v116 = v117;
    }
    else
    {
      v116 = v117;
    }
    v117 = (uint64_t *)*v117;
  }
  while (v117);
  if (v116 == v187 || (v121 = v116[4], v118 < v121) || v118 == v121 && *((_DWORD *)v116 + 10) > v119)
  {
LABEL_175:
    v122 = 0;
    v123 = 0;
  }
  else
  {
    v123 = (uint64_t *)v116[6];
    v122 = (std::__shared_weak_count *)v116[7];
    if (v122)
    {
      v169 = (unint64_t *)&v122->__shared_owners_;
      do
        v170 = __ldxr(v169);
      while (__stxr(v170 + 1, v169));
      do
        v171 = __ldxr(v169);
      while (__stxr(v171 + 1, v169));
      do
        v172 = __ldaxr(v169);
      while (__stlxr(v172 - 1, v169));
      if (!v172)
      {
        ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
        std::__shared_weak_count::__release_weak(v122);
      }
    }
  }
  v124 = v191;
  v190 = v123;
  v191 = v122;
  a1 = v183;
  if (v124)
  {
    v125 = (unint64_t *)&v124->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = v190;
  if (*((_BYTE *)v190 + 192))
    v128 = v190 + 5;
  else
    v128 = 0;
  *((_BYTE *)v128 + 149) = *(_BYTE *)(v44 + 149);
  if (*((_BYTE *)v128 + 148)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingTypes/include/VIO/MappingTypes/MapKeyframeCreator.hpp", 261, (uint64_t)"!new_structure->ValidStructureCovariance()", 42, (uint64_t)"New structure initialized to valid covariance.", 46, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (*(_BYTE *)(v44 + 148))
  {
    *((_DWORD *)v128 + 28) = *(_DWORD *)(v44 + 112);
    *((_DWORD *)v128 + 29) = *(_DWORD *)(v44 + 124);
    *((_DWORD *)v128 + 30) = *(_DWORD *)(v44 + 136);
    *((_DWORD *)v128 + 31) = *(_DWORD *)(v44 + 116);
    *((_DWORD *)v128 + 32) = *(_DWORD *)(v44 + 128);
    *((_DWORD *)v128 + 33) = *(_DWORD *)(v44 + 140);
    *((_DWORD *)v128 + 34) = *(_DWORD *)(v44 + 120);
    *((_DWORD *)v128 + 35) = *(_DWORD *)(v44 + 132);
    LODWORD(v115.f64[0]) = *(_DWORD *)(v44 + 144);
    *((_DWORD *)v128 + 36) = LODWORD(v115.f64[0]);
    v129 = *((int8x16_t *)v128 + 7);
    v130 = *((int8x16_t *)v128 + 8);
    v131 = (int32x4_t)vextq_s8(v129, v130, 0xCuLL);
    v132 = (int32x4_t)vextq_s8(v130, (int8x16_t)v115, 8uLL);
    v133 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v131, (int8x16_t)v131, 0xCuLL), (int8x16_t)v131, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v132, v132), (int8x16_t)v132, 0xCuLL)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v131, v131), (int8x16_t)v131, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v132, (int8x16_t)v132, 0xCuLL), (int8x16_t)v132, 8uLL));
    v115 = (float64x2_t)vextq_s8(v129, v129, 8uLL);
    *((_BYTE *)v128 + 148) = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v129.i8, *(float32x2_t *)v133.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v133.i8, 1), *(float32x2_t *)v129.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v133, v133, 8uLL), *(float32x2_t *)&v115.f64[0]).f32[0] > 0.0;
  }
  if (*((_BYTE *)v127 + 192))
  {
    *(_QWORD *)&v115.f64[0] = v127[8];
    _Q1 = *((float64x2_t *)v127 + 3);
    _D4 = a3[3].f64[0];
    v136 = a3[5].f64[0];
    v137 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*a3, _Q1.f64[0]), a3[2], _Q1, 1), a3[4], v115.f64[0]);
    __asm { FMLA            D2, D4, V1.D[1] }
    v115.f64[0] = _D2 + v136 * v115.f64[0];
    _Q1.f64[0] = a3[7].f64[0];
    v139 = vaddq_f64(v115, _Q1);
    *((float64x2_t *)v127 + 3) = vaddq_f64(v137, a3[6]);
    v127[8] = *(_QWORD *)&v139.f64[0];
    if (*((_BYTE *)v127 + 188))
    {
      v139.f64[0] = a3[1].f64[0];
      _Q3 = *(int8x16_t *)a3;
      _D1 = a3[3].f64[0];
      _Q4 = a3[2];
      _D2 = a3[5].f64[0];
      _Q5 = a3[4];
      LODWORD(v136) = *((_DWORD *)v127 + 46);
      v145 = *(float32x4_t *)(v127 + 19);
      v146 = *(float32x4_t *)(v127 + 21);
      *(_QWORD *)&v147 = *(_OWORD *)&vcvtq_f64_f32(*(float32x2_t *)&v136);
      _Q17 = vcvt_hight_f64_f32(v146);
      _Q16 = vcvtq_f64_f32(*(float32x2_t *)v146.f32);
      _Q18 = vcvt_hight_f64_f32(v145);
      _Q7 = vcvtq_f64_f32(*(float32x2_t *)v145.f32);
      v152 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*a3, _Q7.f64[0]), _Q4, _Q7, 1), _Q5, _Q18.f64[0]);
      __asm { FMLA            D20, D1, V7.D[1] }
      v154 = vmlad_n_f64(_D20, _D2, _Q18.f64[0]);
      v155 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(*a3, _Q18, 1), _Q4, _Q16.f64[0]), _Q5, _Q16, 1);
      __asm { FMLA            D18, D2, V16.D[1] }
      v156 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*a3, _Q17.f64[0]), _Q4, _Q17, 1), _Q5, v147);
      __asm { FMLA            D21, D1, V17.D[1] }
      _D21 = vmlad_n_f64(_D21, _D2, v147);
      v159 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v152, a3->f64[0]), v155, _Q4.f64[0]), v156, _Q5.f64[0]);
      _Q17.f64[0] = vmlad_n_f64(vmlad_n_f64(v154 * a3->f64[0], _Q18.f64[0], _Q4.f64[0]), _D21, _Q5.f64[0]);
      v160 = (int8x16_t)vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v152, *a3, 1), v155, _Q4, 1), v156, _Q5, 1);
      __asm
      {
        FMLA            D3, D18, V4.D[1]
        FMLA            D3, D21, V5.D[1]
      }
      v161 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v152, v139.f64[0]), v155, _D1), v156, _D2);
      v139.f64[0] = v154 * v139.f64[0] + _Q18.f64[0] * _D1 + _D21 * _D2;
      v162 = (float64x2_t)vextq_s8(v160, _Q3, 8uLL);
      v163 = (float64x2_t)vzip1q_s64((int64x2_t)_Q17, (int64x2_t)v160);
      *(float32x2_t *)_Q3.i8 = vcvt_f32_f64(v163);
      v164 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v162), v161);
      *(float32x2_t *)&_Q5.f64[0] = vcvt_f32_f64(v159);
      v165 = (int8x16_t)vcvt_hight_f32_f64(*(int32x2_t *)&_Q5.f64[0], v163);
      *(int8x16_t *)(v127 + 19) = v165;
      *((_DWORD *)v127 + 46) = vcvt_f32_f64(v139).u32[0];
      *(int8x16_t *)(v127 + 21) = v164;
      v166 = (int32x4_t)vextq_s8(v165, v164, 0xCuLL);
      v167 = (int32x4_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v161), v139);
      v168 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v166, (int8x16_t)v166, 0xCuLL), (int8x16_t)v166, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v167, v167), (int8x16_t)v167, 0xCuLL)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v166, v166), (int8x16_t)v166, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v167, (int8x16_t)v167, 0xCuLL), (int8x16_t)v167, 8uLL));
      *((_BYTE *)v127 + 188) = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)&_Q5.f64[0], *(float32x2_t *)v168.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v168.i8, 1), *(float32x2_t *)&_Q5.f64[0], 1), (float32x2_t)*(_OWORD *)&vextq_s8(v168, v168, 8uLL), *(float32x2_t *)_Q3.i8).f32[0] > 0.0;
    }
    *((_BYTE *)v127 + 190) = 1;
  }
LABEL_201:
  while (1)
  {
    v20 += 4;
    if (v20 == v19)
      break;
    v21 = (uint64_t *)*v22;
    if (*v22)
      goto LABEL_19;
  }
LABEL_202:
  v173 = v191;
  *a1 = v190;
  a1[1] = v173;
  if (v173)
  {
    p_shared_weak_owners = (unint64_t *)&v173->__shared_weak_owners_;
    do
      v175 = __ldxr(p_shared_weak_owners);
    while (__stxr(v175 + 1, p_shared_weak_owners));
    v176 = (unint64_t *)&v173->__shared_owners_;
    do
      v177 = __ldaxr(v176);
    while (__stlxr(v177 - 1, v176));
    if (!v177)
    {
      ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
      std::__shared_weak_count::__release_weak(v173);
    }
  }
}

void sub_20F45DD0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F45DD20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F45DD34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F45DD48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F45DD5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F45DD70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F45DD84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F45DD98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F45DDAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F45DDC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F45DDD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F45DDE8(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  __int128 v14;
  uint64_t *v15;
  uint64_t **v16;
  uint64_t **v17;
  unsigned int v18;
  unint64_t v19;
  unsigned int v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  BOOL v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *i;
  uint64_t **v29;
  _OWORD *v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD *v34;
  unsigned int v35;
  unint64_t v36;
  unsigned int v37;
  BOOL v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t *v43;

  v4 = a2;
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_50;
  v6 = *(uint64_t **)a1;
  v8 = (uint64_t **)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = a1 + 8;
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v9 = v6[1] ? (uint64_t *)v6[1] : v6;
  if (!v9)
    goto LABEL_50;
  v10 = (uint64_t *)v9[2];
  if (v10)
  {
    v11 = (uint64_t *)*v10;
    if ((uint64_t *)*v10 == v9)
    {
      *v10 = 0;
      while (1)
      {
        v43 = (uint64_t *)v10[1];
        if (!v43)
          break;
        do
        {
          v10 = v43;
          v43 = (uint64_t *)*v43;
        }
        while (v43);
      }
    }
    else
    {
      for (v10[1] = 0; v11; v11 = (uint64_t *)v10[1])
      {
        do
        {
          v10 = v11;
          v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
    }
  }
  if (a2 == a3)
    goto LABEL_46;
  v12 = v9;
  v13 = a2;
  do
  {
    v9 = v10;
    v14 = *((_OWORD *)v13 + 2);
    *((_DWORD *)v12 + 12) = *((_DWORD *)v13 + 12);
    *((_OWORD *)v12 + 2) = v14;
    memcpy(v12 + 7, v13 + 7, 0x200uLL);
    v15 = *v8;
    v16 = (uint64_t **)(a1 + 8);
    v17 = (uint64_t **)(a1 + 8);
    if (!*v8)
      goto LABEL_24;
    v18 = *((_DWORD *)v12 + 12);
    v19 = v12[4];
    do
    {
      while (1)
      {
        v16 = (uint64_t **)v15;
        v20 = *((_DWORD *)v15 + 12);
        v21 = v18 >= v20;
        if (v18 != v20)
          goto LABEL_20;
        v22 = v15[4];
        if (v19 >= v22)
          break;
LABEL_15:
        v15 = (uint64_t *)*v15;
        v17 = v16;
        if (!*v16)
          goto LABEL_24;
      }
      if (v19 != v22)
        goto LABEL_22;
      v21 = *((_DWORD *)v12 + 10) >= *((_DWORD *)v15 + 10);
LABEL_20:
      if (!v21)
        goto LABEL_15;
LABEL_22:
      v15 = (uint64_t *)v15[1];
    }
    while (v15);
    v17 = v16 + 1;
LABEL_24:
    *v12 = 0;
    v12[1] = 0;
    v12[2] = (uint64_t)v16;
    *v17 = v12;
    v23 = **(_QWORD **)a1;
    if (v23)
    {
      *(_QWORD *)a1 = v23;
      v12 = *v17;
    }
    sub_20E868578(*(uint64_t **)(a1 + 8), v12);
    ++*(_QWORD *)(a1 + 16);
    if (v10)
    {
      v10 = (uint64_t *)v10[2];
      if (v10)
      {
        v26 = (uint64_t *)*v10;
        if ((uint64_t *)*v10 == v9)
        {
          *v10 = 0;
          while (1)
          {
            v27 = (uint64_t *)v10[1];
            if (!v27)
              break;
            do
            {
              v10 = v27;
              v27 = (uint64_t *)*v27;
            }
            while (v27);
          }
        }
        else
        {
          for (v10[1] = 0; v26; v26 = (uint64_t *)v10[1])
          {
            do
            {
              v10 = v26;
              v26 = (uint64_t *)*v26;
            }
            while (v26);
          }
        }
      }
    }
    else
    {
      v10 = 0;
    }
    v24 = (_QWORD *)v13[1];
    if (v24)
    {
      do
      {
        v4 = v24;
        v24 = (_QWORD *)*v24;
      }
      while (v24);
    }
    else
    {
      do
      {
        v4 = (_QWORD *)v13[2];
        v25 = *v4 == (_QWORD)v13;
        v13 = v4;
      }
      while (!v25);
    }
    if (!v9)
      break;
    v12 = v9;
    v13 = v4;
  }
  while (v4 != a3);
LABEL_46:
  sub_20E86872C(a1, v9);
  if (v10)
  {
    for (i = (uint64_t *)v10[2]; i; i = (uint64_t *)i[2])
      v10 = i;
    sub_20E86872C(a1, v10);
  }
LABEL_50:
  if (v4 == a3)
    return;
  v29 = (uint64_t **)(a1 + 8);
  while (2)
  {
    v30 = operator new(0x238uLL);
    v31 = v4[6];
    v30[2] = *((_OWORD *)v4 + 2);
    *((_QWORD *)v30 + 6) = v31;
    memcpy((char *)v30 + 56, v4 + 7, 0x200uLL);
    v32 = *v29;
    v33 = (_QWORD *)(a1 + 8);
    v34 = (_QWORD *)(a1 + 8);
    if (!*v29)
      goto LABEL_64;
    v35 = *((_DWORD *)v30 + 12);
    v36 = *((_QWORD *)v30 + 4);
    while (2)
    {
      while (2)
      {
        v33 = v32;
        v37 = *((_DWORD *)v32 + 12);
        v38 = v35 >= v37;
        if (v35 == v37)
        {
          v39 = v32[4];
          if (v36 >= v39)
          {
            if (v36 != v39)
              goto LABEL_62;
            v38 = *((_DWORD *)v30 + 10) >= *((_DWORD *)v32 + 10);
            break;
          }
LABEL_55:
          v32 = (uint64_t *)*v32;
          v34 = v33;
          if (!*v33)
            goto LABEL_64;
          continue;
        }
        break;
      }
      if (!v38)
        goto LABEL_55;
LABEL_62:
      v32 = (uint64_t *)v32[1];
      if (v32)
        continue;
      break;
    }
    v34 = v33 + 1;
LABEL_64:
    *(_QWORD *)v30 = 0;
    *((_QWORD *)v30 + 1) = 0;
    *((_QWORD *)v30 + 2) = v33;
    *v34 = v30;
    v40 = **(_QWORD **)a1;
    if (v40)
    {
      *(_QWORD *)a1 = v40;
      v30 = (_OWORD *)*v34;
    }
    sub_20E868578(*(uint64_t **)(a1 + 8), (uint64_t *)v30);
    ++*(_QWORD *)(a1 + 16);
    v41 = (_QWORD *)v4[1];
    if (v41)
    {
      do
      {
        v42 = v41;
        v41 = (_QWORD *)*v41;
      }
      while (v41);
    }
    else
    {
      do
      {
        v42 = (_QWORD *)v4[2];
        v25 = *v42 == (_QWORD)v4;
        v4 = v42;
      }
      while (!v25);
    }
    v4 = v42;
    if (v42 != a3)
      continue;
    break;
  }
}

void sub_20F45E154(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  float v6;
  float v7;
  _BOOL8 v8;
  unint64_t v9;
  unint64_t v10;
  int8x8_t prime;
  void *v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  size_t v25;
  uint8x8_t v26;
  uint64_t v27;
  uint8x8_t v28;
  unint64_t v29;
  _QWORD *i;
  uint8x8_t v31;
  unint64_t v32;
  _QWORD *v33;
  unsigned __int8 v34;
  uint64_t v35;
  int v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  size_t v45;
  void *v46;
  uint8x8_t v47;
  uint8x8_t v48;
  uint64_t v49;
  _QWORD *v50;
  char v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  unint64_t v55;

  v4 = a2[2];
  a2[1] = v4;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v7 = *(float *)(a1 + 32);
  if (v5 && (float)(v7 * (float)v5) >= v6)
    goto LABEL_76;
  v8 = 1;
  if (v5 >= 3)
    v8 = (v5 & (v5 - 1)) != 0;
  v9 = v8 | (2 * v5);
  v10 = vcvtps_u32_f32(v6 / v7);
  if (v9 <= v10)
    prime = (int8x8_t)v10;
  else
    prime = (int8x8_t)v9;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v5 = *(_QWORD *)(a1 + 8);
  }
  if (*(_QWORD *)&prime <= v5)
  {
    if (*(_QWORD *)&prime >= v5)
      goto LABEL_76;
    v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v5 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v5), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      v45 = std::__next_prime(v25);
      if (*(_QWORD *)&prime <= v45)
        prime = (int8x8_t)v45;
      if (*(_QWORD *)&prime >= v5)
      {
LABEL_38:
        v5 = *(_QWORD *)(a1 + 8);
        v28 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
        v28.i16[0] = vaddlv_u8(v28);
        v29 = v28.u32[0];
        if (v28.u32[0] >= 2uLL)
          goto LABEL_44;
        goto LABEL_77;
      }
    }
    else
    {
      v27 = 1 << -(char)__clz(v25 - 1);
      if (v25 >= 2)
        v25 = v27;
      if (*(_QWORD *)&prime <= v25)
        prime = (int8x8_t)v25;
      if (*(_QWORD *)&prime >= v5)
        goto LABEL_38;
    }
    if (!*(_QWORD *)&prime)
    {
      v46 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v46)
        operator delete(v46);
      v5 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      v47 = (uint8x8_t)vcnt_s8(0);
      v47.i16[0] = vaddlv_u8(v47);
      v29 = v47.u32[0];
      if (v47.u32[0] >= 2uLL)
        goto LABEL_44;
      goto LABEL_77;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    sub_20E877A38();
  v12 = operator new(8 * *(_QWORD *)&prime);
  v13 = *(void **)a1;
  *(_QWORD *)a1 = v12;
  if (v13)
    operator delete(v13);
  v14 = 0;
  *(int8x8_t *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v14++) = 0;
  while (*(_QWORD *)&prime != v14);
  v16 = a1 + 16;
  v15 = *(_QWORD **)(a1 + 16);
  if (v15)
  {
    v17 = v15[1];
    v18 = *(_QWORD *)&prime - 1;
    if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) == 0)
    {
      v19 = v17 & v18;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = v16;
      v20 = (_QWORD *)*v15;
      if (!*v15)
        goto LABEL_43;
      do
      {
        v21 = v20[1] & v18;
        if (v21 == v19)
        {
          v15 = v20;
        }
        else
        {
          v22 = v20;
          if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v21))
          {
            do
            {
              v23 = v22;
              v22 = (_QWORD *)*v22;
            }
            while (v22 && v20[2] == v22[2]);
            *v15 = v22;
            v24 = 8 * v21;
            *v23 = **(_QWORD **)(*(_QWORD *)a1 + v24);
            **(_QWORD **)(*(_QWORD *)a1 + v24) = v20;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v21) = v15;
            v15 = v20;
            v19 = v21;
          }
        }
        v20 = (_QWORD *)*v15;
      }
      while (*v15);
      v5 = (unint64_t)prime;
LABEL_76:
      v48 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
      v48.i16[0] = vaddlv_u8(v48);
      v29 = v48.u32[0];
      if (v48.u32[0] >= 2uLL)
        goto LABEL_44;
      goto LABEL_77;
    }
    if (v17 >= *(_QWORD *)&prime)
      v17 %= *(_QWORD *)&prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v17) = v16;
    for (i = (_QWORD *)*v15; *v15; i = (_QWORD *)*v15)
    {
      v40 = i[1];
      if (v40 >= *(_QWORD *)&prime)
        v40 %= *(_QWORD *)&prime;
      if (v40 == v17)
      {
        v15 = i;
      }
      else
      {
        v41 = i;
        if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v40))
        {
          do
          {
            v42 = v41;
            v41 = (_QWORD *)*v41;
          }
          while (v41 && i[2] == v41[2]);
          *v15 = v41;
          v43 = 8 * v40;
          *v42 = **(_QWORD **)(*(_QWORD *)a1 + v43);
          **(_QWORD **)(*(_QWORD *)a1 + v43) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = v15;
          v15 = i;
          v17 = v40;
        }
      }
    }
  }
LABEL_43:
  v5 = (unint64_t)prime;
  v31 = (uint8x8_t)vcnt_s8(prime);
  v31.i16[0] = vaddlv_u8(v31);
  v29 = v31.u32[0];
  if (v31.u32[0] >= 2uLL)
  {
LABEL_44:
    v32 = v4;
    if (v5 <= v4)
      v32 = v4 % v5;
    v33 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v32);
    if (!v33)
    {
      v37 = 0;
      v44 = a2[1];
      goto LABEL_85;
    }
    v34 = 0;
    v35 = a2[2];
    while (1)
    {
      v37 = v33;
      v33 = (_QWORD *)*v33;
      if (!v33)
        goto LABEL_84;
      v38 = v33[1];
      v39 = v38;
      if (v38 >= v5)
        v39 = v38 % v5;
      if (v39 != v32)
        goto LABEL_84;
      if (v38 == v4)
      {
        v36 = v34 & (v33[2] != v35);
        v34 |= v33[2] == v35;
        if (v36 == 1)
          goto LABEL_84;
      }
      else if ((v34 & 1) == 1)
      {
        goto LABEL_84;
      }
    }
  }
LABEL_77:
  v49 = (v5 - 1) & v4;
  v50 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v49);
  if (!v50)
  {
    v37 = 0;
    v44 = a2[1];
LABEL_96:
    v44 &= v5 - 1;
    if (v37)
      goto LABEL_88;
LABEL_97:
    *a2 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = a2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v44) = a1 + 16;
    if (!*a2)
      goto LABEL_103;
    v55 = *(_QWORD *)(*a2 + 8);
    if (v29 > 1)
    {
      if (v55 >= v5)
        v55 %= v5;
    }
    else
    {
      v55 &= v5 - 1;
    }
LABEL_102:
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v55) = a2;
    goto LABEL_103;
  }
  v51 = 0;
  v52 = a2[2];
  while (1)
  {
    v37 = v50;
    v50 = (_QWORD *)*v50;
    if (!v50)
      break;
    v54 = v50[1];
    if ((v54 & (v5 - 1)) != v49)
      break;
    if (v54 == v4)
    {
      v53 = v51 & (v50[2] != v52);
      v51 |= v50[2] == v52;
      if ((v53 & 1) != 0)
        break;
    }
    else if ((v51 & 1) != 0)
    {
      break;
    }
  }
LABEL_84:
  v44 = a2[1];
  if (v29 <= 1)
    goto LABEL_96;
LABEL_85:
  if (v44 >= v5)
    v44 %= v5;
  if (!v37)
    goto LABEL_97;
LABEL_88:
  *a2 = *v37;
  *v37 = a2;
  if (*a2)
  {
    v55 = *(_QWORD *)(*a2 + 8);
    if (v29 > 1)
    {
      if (v55 >= v5)
        v55 %= v5;
    }
    else
    {
      v55 &= v5 - 1;
    }
    if (v55 != v44)
      goto LABEL_102;
  }
LABEL_103:
  ++*(_QWORD *)(a1 + 24);
}

unint64_t sub_20F45E6B4(unint64_t *a1, uint64_t a2, __int128 *a3)
{
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  __int128 v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  __int128 v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  __int128 v36;
  unint64_t i;
  __int128 v38;
  void *v39;
  __int128 v41;

  v5 = (_QWORD *)*a1;
  v6 = a1[1];
  v7 = (uint64_t)(a2 - *a1) / 24;
  v8 = *a1 + 24 * v7;
  v9 = a1[2];
  if (v6 < v9)
  {
    if (v8 == v6)
    {
      v25 = *a3;
      *(_QWORD *)(v8 + 16) = *((_QWORD *)a3 + 2);
      *(_OWORD *)v8 = v25;
      a1[1] = v8 + 24;
    }
    else
    {
      v41 = *a3;
      v10 = *((_QWORD *)a3 + 2);
      v11 = v8 + 24;
      v12 = v6 - 24;
      v13 = a1[1];
      if (v6 >= 0x18)
      {
        do
        {
          v14 = *(_OWORD *)v12;
          *(_QWORD *)(v13 + 16) = *(_QWORD *)(v12 + 16);
          *(_OWORD *)v13 = v14;
          v13 += 24;
          v12 += 24;
        }
        while (v12 < v6);
      }
      a1[1] = v13;
      if (v6 != v11)
      {
        v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v11) >> 3);
        v16 = (_QWORD *)(v6 - 8);
        v17 = 24 * v15;
        do
        {
          v18 = *(_QWORD *)(v8 + v17 - 24);
          *((_DWORD *)v16 - 2) = *(_DWORD *)(v8 + v17 - 16);
          *(v16 - 2) = v18;
          *v16 = *(_QWORD *)(v8 + v17 - 8);
          v16 -= 3;
          v17 -= 24;
        }
        while (v17);
      }
      *(_QWORD *)v8 = v41;
      *(_DWORD *)(v8 + 8) = DWORD2(v41);
      v5[3 * v7 + 2] = v10;
    }
    return v8;
  }
  v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (_QWORD)v5) >> 3) + 1;
  if (v19 > 0xAAAAAAAAAAAAAAALL)
    sub_20F45A4CC();
  v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (_QWORD)v5) >> 3);
  if (2 * v20 > v19)
    v19 = 2 * v20;
  if (v20 >= 0x555555555555555)
    v21 = 0xAAAAAAAAAAAAAAALL;
  else
    v21 = v19;
  if (v21)
  {
    if (v21 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v22 = (char *)operator new(24 * v21);
    v23 = (unint64_t)&v22[24 * v7];
    v24 = &v22[24 * v21];
    if ((char *)v23 != v24)
      goto LABEL_32;
    goto LABEL_21;
  }
  v22 = 0;
  v23 = 24 * v7;
  v24 = 0;
  if (!v23)
  {
LABEL_21:
    v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - (_QWORD)v22) >> 3);
    if (v23 <= (unint64_t)v22)
    {
      if ((char *)v23 == v22)
        v28 = 1;
      else
        v28 = 0x5555555555555556 * ((uint64_t)(v23 - (_QWORD)v22) >> 3);
      if (v28 > 0xAAAAAAAAAAAAAAALL)
        sub_20E877A38();
      v29 = (char *)operator new(24 * v28);
      v23 = (unint64_t)&v29[24 * (v28 >> 2)];
      v24 = &v29[24 * v28];
      if (v22)
        operator delete(v22);
    }
    else
    {
      if (v26 >= -1)
        v27 = v26 + 1;
      else
        v27 = v26 + 2;
      v24 = (char *)v23;
      v23 -= 24 * (v27 >> 1);
    }
  }
LABEL_32:
  v30 = *a3;
  *(_QWORD *)(v23 + 16) = *((_QWORD *)a3 + 2);
  *(_OWORD *)v23 = v30;
  v31 = v23 + 24;
  v32 = (_QWORD *)*a1;
  v33 = v23;
  if (*a1 != v8)
  {
    v34 = v8;
    v35 = v23;
    do
    {
      v33 = v35 - 24;
      v36 = *(_OWORD *)(v34 - 24);
      *(_QWORD *)(v35 - 8) = *(_QWORD *)(v34 - 8);
      *(_OWORD *)(v35 - 24) = v36;
      v34 -= 24;
      v35 -= 24;
    }
    while ((_QWORD *)v34 != v32);
  }
  for (i = a1[1]; v8 != i; v8 += 24)
  {
    v38 = *(_OWORD *)v8;
    *(_QWORD *)(v31 + 16) = *(_QWORD *)(v8 + 16);
    *(_OWORD *)v31 = v38;
    v31 += 24;
  }
  v39 = (void *)*a1;
  *a1 = v33;
  a1[1] = v31;
  a1[2] = (unint64_t)v24;
  if (v39)
    operator delete(v39);
  return v23;
}

void sub_20F45E9B8(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_20F45E9D0(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  void *v29;
  void *v30;
  char *v31;
  char *v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  BOOL v43;
  int64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  unint64_t v56;
  int64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  __int128 *v79;
  _OWORD *v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  int64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  __int128 *v95;
  _OWORD *v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  int64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  __int128 *v113;
  _OWORD *v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;

  v2 = a1[4];
  v3 = v2 >= 0xAA;
  v4 = v2 - 170;
  if (v3)
  {
    a1[4] = v4;
    v6 = (_QWORD *)a1[1];
    v5 = (char *)a1[2];
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    a1[1] = v6 + 1;
    if (v5 != (char *)a1[3])
    {
LABEL_92:
      *(_QWORD *)v5 = v8;
      goto LABEL_93;
    }
    v9 = (char *)*a1;
    if ((unint64_t)v7 > *a1)
    {
      v10 = (uint64_t)&v7[-*a1] >> 3;
      if (v10 >= -1)
        v11 = v10 + 1;
      else
        v11 = v10 + 2;
      v12 = v11 >> 1;
      v13 = -v12;
      v14 = &v7[-8 * v12];
      v15 = v5 - v7;
      if (v5 != v7)
      {
        memmove(&v7[-8 * v12], v7, v5 - v7);
        v7 = (char *)a1[1];
      }
      v5 = &v14[v15];
      v16 = &v7[8 * v13];
      goto LABEL_11;
    }
    v38 = (v5 - v9) >> 2;
    if (v5 == v9)
      v38 = 1;
    if (v38 >> 61)
      goto LABEL_109;
    v39 = v38 >> 2;
    v40 = 8 * v38;
    v41 = (char *)operator new(8 * v38);
    v42 = &v41[8 * v39];
    v44 = v5 - v7;
    v43 = v5 == v7;
    v5 = v42;
    if (!v43)
    {
      v5 = &v42[v44 & 0xFFFFFFFFFFFFFFF8];
      v45 = v44 - 8;
      if ((unint64_t)(v44 - 8) >= 0x38)
      {
        v92 = &v41[8 * v39];
        v46 = v92;
        if ((unint64_t)(v92 - v7) >= 0x20)
        {
          v93 = (v45 >> 3) + 1;
          v94 = 8 * (v93 & 0x3FFFFFFFFFFFFFFCLL);
          v46 = &v42[v94];
          v7 += v94;
          v95 = (__int128 *)(v6 + 3);
          v96 = v92 + 16;
          v97 = v93 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v98 = *v95;
            *(v96 - 1) = *(v95 - 1);
            *v96 = v98;
            v95 += 2;
            v96 += 2;
            v97 -= 4;
          }
          while (v97);
          if (v93 == (v93 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_89;
        }
      }
      else
      {
        v46 = &v41[8 * v39];
      }
      do
      {
        v99 = *(_QWORD *)v7;
        v7 += 8;
        *(_QWORD *)v46 = v99;
        v46 += 8;
      }
      while (v46 != v5);
    }
LABEL_89:
    *a1 = v41;
    a1[1] = v42;
    a1[2] = v5;
    a1[3] = &v41[v40];
    if (!v9)
      goto LABEL_92;
    v100 = v9;
LABEL_91:
    operator delete(v100);
    v5 = (char *)a1[2];
    goto LABEL_92;
  }
  v18 = (char *)a1[2];
  v17 = (char *)a1[3];
  v20 = (char *)*a1;
  v19 = (char *)a1[1];
  v21 = v18 - v19;
  v22 = (v18 - v19) >> 3;
  v23 = (uint64_t)&v17[-*a1];
  if (v22 < (unint64_t)(v23 >> 3))
  {
    v24 = operator new(0xFF0uLL);
    v25 = v24;
    if (v17 != v18)
    {
      *(_QWORD *)v18 = v24;
LABEL_93:
      a1[2] += 8;
      return;
    }
    if (v19 == v20)
    {
      v69 = (v17 - v19) >> 2;
      if (v18 == v19)
        v69 = 1;
      if (v69 >> 61)
        goto LABEL_109;
      v70 = (v69 + 3) >> 2;
      v71 = 8 * v69;
      v72 = (char *)operator new(8 * v69);
      v47 = &v72[8 * v70];
      v73 = v47;
      if (v18 != v19)
      {
        v73 = &v47[8 * v22];
        v74 = &v72[8 * v70];
        v75 = v19;
        if ((unint64_t)(v21 - 8) < 0x38)
          goto LABEL_113;
        v76 = &v72[8 * v70];
        v74 = v76;
        v75 = v19;
        if ((unint64_t)(v76 - v19) < 0x20)
          goto LABEL_113;
        v77 = ((unint64_t)(v21 - 8) >> 3) + 1;
        v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
        v74 = &v47[v78];
        v75 = &v19[v78];
        v79 = (__int128 *)(v19 + 16);
        v80 = v76 + 16;
        v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v82 = *v79;
          *(v80 - 1) = *(v79 - 1);
          *v80 = v82;
          v79 += 2;
          v80 += 2;
          v81 -= 4;
        }
        while (v81);
        if (v77 != (v77 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_113:
          do
          {
            v83 = *(_QWORD *)v75;
            v75 += 8;
            *(_QWORD *)v74 = v83;
            v74 += 8;
          }
          while (v74 != v73);
        }
      }
      *a1 = v72;
      a1[1] = v47;
      a1[2] = v73;
      a1[3] = &v72[v71];
      if (v19)
      {
        operator delete(v19);
        v47 = (char *)a1[1];
      }
    }
    else
    {
      v47 = v19;
    }
    *((_QWORD *)v47 - 1) = v25;
    v84 = (char *)a1[1];
    v5 = (char *)a1[2];
    a1[1] = v84 - 8;
    v8 = *((_QWORD *)v84 - 1);
    a1[1] = v84;
    if (v5 != (char *)a1[3])
      goto LABEL_92;
    v85 = (char *)*a1;
    if ((unint64_t)v84 > *a1)
    {
      v86 = (uint64_t)&v84[-*a1] >> 3;
      if (v86 >= -1)
        v87 = v86 + 1;
      else
        v87 = v86 + 2;
      v88 = v87 >> 1;
      v89 = -v88;
      v90 = &v84[-8 * v88];
      v91 = v5 - v84;
      if (v5 != v84)
      {
        memmove(&v84[-8 * v88], v84, v5 - v84);
        v84 = (char *)a1[1];
      }
      v5 = &v90[v91];
      v16 = &v84[8 * v89];
LABEL_11:
      a1[1] = v16;
      a1[2] = v5;
      goto LABEL_92;
    }
    v101 = (v5 - v85) >> 2;
    if (v5 == v85)
      v101 = 1;
    if (!(v101 >> 61))
    {
      v102 = v101 >> 2;
      v103 = 8 * v101;
      v104 = (char *)operator new(8 * v101);
      v105 = &v104[8 * v102];
      v106 = v5 - v84;
      v43 = v5 == v84;
      v5 = v105;
      if (!v43)
      {
        v5 = &v105[v106 & 0xFFFFFFFFFFFFFFF8];
        v107 = v106 - 8;
        if ((unint64_t)(v106 - 8) >= 0x38)
        {
          v109 = &v104[8 * v102];
          v108 = v109;
          if ((unint64_t)(v109 - v84) >= 0x20)
          {
            v110 = (v107 >> 3) + 1;
            v111 = 8 * (v110 & 0x3FFFFFFFFFFFFFFCLL);
            v108 = &v105[v111];
            v112 = &v84[v111];
            v113 = (__int128 *)(v84 + 16);
            v114 = v109 + 16;
            v115 = v110 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v116 = *v113;
              *(v114 - 1) = *(v113 - 1);
              *v114 = v116;
              v113 += 2;
              v114 += 2;
              v115 -= 4;
            }
            while (v115);
            v84 = v112;
            if (v110 == (v110 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_106;
          }
        }
        else
        {
          v108 = &v104[8 * v102];
        }
        do
        {
          v117 = *(_QWORD *)v84;
          v84 += 8;
          *(_QWORD *)v108 = v117;
          v108 += 8;
        }
        while (v108 != v5);
      }
LABEL_106:
      *a1 = v104;
      a1[1] = v105;
      a1[2] = v5;
      a1[3] = &v104[v103];
      if (!v85)
        goto LABEL_92;
      v100 = v85;
      goto LABEL_91;
    }
LABEL_109:
    sub_20E877A38();
  }
  v26 = v23 >> 2;
  if (v17 == v20)
    v27 = 1;
  else
    v27 = v26;
  if (v27 >> 61)
    goto LABEL_109;
  v28 = (char *)operator new(8 * v27);
  v29 = operator new(0xFF0uLL);
  v30 = v29;
  v31 = &v28[8 * v22];
  v32 = &v28[8 * v27];
  if (v22 == v27)
  {
    if (v21 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v21 >> 2;
      if (v48 >> 61)
        sub_20E877A38();
      v31 = (char *)operator new(8 * v48);
      v32 = &v31[8 * v48];
      operator delete(v28);
      v49 = (char *)a1[1];
      v18 = (char *)a1[2];
      v28 = v31;
      *(_QWORD *)v31 = v30;
      v34 = v31 + 8;
      if (v18 == v49)
        goto LABEL_25;
      do
      {
LABEL_44:
        if (v31 == v28)
        {
          if (v34 >= v32)
          {
            if (v32 == v31)
              v54 = 1;
            else
              v54 = (v32 - v31) >> 2;
            if (v54 >> 61)
              sub_20E877A38();
            v55 = (char *)operator new(8 * v54);
            v28 = v55;
            v56 = (v54 + 3) >> 2;
            v50 = &v55[8 * v56];
            v36 = v50;
            v57 = v34 - v31;
            if (v34 != v31)
            {
              v36 = &v50[v57 & 0xFFFFFFFFFFFFFFF8];
              v58 = v57 - 8;
              v59 = &v55[8 * v56];
              v60 = v31;
              if (v58 < 0x38)
                goto LABEL_114;
              v61 = 8 * v56;
              v59 = &v55[8 * v56];
              v60 = v31;
              if ((unint64_t)(v59 - v31) < 0x20)
                goto LABEL_114;
              v62 = (v58 >> 3) + 1;
              v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
              v59 = &v50[v63];
              v60 = &v31[v63];
              v64 = (__int128 *)(v31 + 16);
              v65 = &v55[v61 + 16];
              v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v67 = *v64;
                *((_OWORD *)v65 - 1) = *(v64 - 1);
                *(_OWORD *)v65 = v67;
                v64 += 2;
                v65 += 32;
                v66 -= 4;
              }
              while (v66);
              if (v62 != (v62 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_114:
                do
                {
                  v68 = *(_QWORD *)v60;
                  v60 += 8;
                  *(_QWORD *)v59 = v68;
                  v59 += 8;
                }
                while (v59 != v36);
              }
            }
            v32 = &v55[8 * v54];
            operator delete(v31);
          }
          else
          {
            v52 = (v32 - v34) >> 3;
            if (v52 >= -1)
              v53 = v52 + 1;
            else
              v53 = v52 + 2;
            v36 = &v34[8 * (v53 >> 1)];
            v50 = &v31[8 * (v53 >> 1)];
            if (v34 == v31)
            {
              v28 = v34;
            }
            else
            {
              memmove(&v31[8 * (v53 >> 1)], v31, v34 - v31);
              v28 = v31;
            }
          }
        }
        else
        {
          v50 = v31;
          v36 = v34;
        }
        v51 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v50 - 1) = v51;
        v35 = v50 - 8;
        v34 = v36;
        v31 = v35;
      }
      while (v18 != (char *)a1[1]);
      goto LABEL_26;
    }
    v33 = v22 + 2;
    if (v22 >= -1)
      v33 = v22 + 1;
    v31 -= 8 * (v33 >> 1);
  }
  *(_QWORD *)v31 = v29;
  v34 = v31 + 8;
  if (v18 != v19)
    goto LABEL_44;
LABEL_25:
  v35 = v31;
  v36 = v34;
LABEL_26:
  v37 = (char *)*a1;
  *a1 = v28;
  a1[1] = v35;
  a1[2] = v36;
  a1[3] = v32;
  if (v37)
    operator delete(v37);
}

void sub_20F45F038(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20F45F054(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20F45F068(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20F45F080(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20F45F098(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 85;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 170;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20F45F15C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v6;
  void *v7;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (_QWORD *)v2[7];
      if (v3)
      {
        do
        {
          v6 = (_QWORD *)*v3;
          v7 = (void *)v3[3];
          if (v7)
          {
            v3[4] = v7;
            operator delete(v7);
          }
          operator delete(v3);
          v3 = v6;
        }
        while (v6);
      }
      v4 = (void *)v2[5];
      v2[5] = 0;
      if (v4)
        operator delete(v4);
    }
    operator delete(v2);
  }
  return a1;
}

char *sub_20F45F1E0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  int v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v6 = *((_DWORD *)a2 + 4);
  v7 = *((_DWORD *)a2 + 2);
  v8 = v7 ^ __ROR4__(v6, 13);
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v9 <= v8)
        v3 = v8 % v9;
    }
    else
    {
      v3 = ((_DWORD)v9 - 1) & v8;
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = (char *)*v11;
      if (*v11)
      {
        v13 = *a2;
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = *((_QWORD *)v12 + 1);
            if (v15 == v8)
            {
              if (*((_DWORD *)v12 + 8) == v6 && *((_QWORD *)v12 + 2) == v13 && *((_DWORD *)v12 + 6) == v7)
                return v12;
            }
            else if ((v15 & (v9 - 1)) != v3)
            {
              goto LABEL_27;
            }
            v12 = *(char **)v12;
            if (!v12)
              goto LABEL_27;
          }
        }
        do
        {
          v14 = *((_QWORD *)v12 + 1);
          if (v14 == v8)
          {
            if (*((_DWORD *)v12 + 8) == v6 && *((_QWORD *)v12 + 2) == v13 && *((_DWORD *)v12 + 6) == v7)
              return v12;
          }
          else
          {
            if (v14 >= v9)
              v14 %= v9;
            if (v14 != v3)
              break;
          }
          v12 = *(char **)v12;
        }
        while (v12);
      }
    }
  }
LABEL_27:
  v16 = (_QWORD *)(a1 + 16);
  v12 = (char *)operator new(0x50uLL);
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = v8;
  *((_OWORD *)v12 + 1) = *(_OWORD *)a3;
  *((_QWORD *)v12 + 4) = *(_QWORD *)(a3 + 16);
  *(_OWORD *)(v12 + 40) = 0u;
  *(_OWORD *)(v12 + 56) = 0u;
  *((_DWORD *)v12 + 18) = 1065353216;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (v9 && (float)(v18 * (float)v9) >= v17)
  {
    v8 = v3;
  }
  else
  {
    v19 = 1;
    if (v9 >= 3)
      v19 = (v9 & (v9 - 1)) != 0;
    v20 = v19 | (2 * v9);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v9 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v9)
      goto LABEL_40;
    if (prime < v9)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v24 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < v9)
LABEL_40:
        sub_20E8D2B3C(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8)
        v8 %= v9;
    }
    else
    {
      v8 = ((_DWORD)v9 - 1) & v8;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
  if (v27)
  {
    *(_QWORD *)v12 = *v27;
LABEL_63:
    *v27 = v12;
    goto LABEL_64;
  }
  *(_QWORD *)v12 = *v16;
  *v16 = v12;
  *(_QWORD *)(v26 + 8 * v8) = v16;
  if (*(_QWORD *)v12)
  {
    v28 = *(_QWORD *)(*(_QWORD *)v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v28 >= v9)
        v28 %= v9;
    }
    else
    {
      v28 &= v9 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_63;
  }
LABEL_64:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_20F45F524(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20F45F15C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20F45F538(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = (_QWORD *)(a1 + 16);
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  v10[3] = 0;
  v10[4] = 0;
  v10[5] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v5 = v3;
  }
  else
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v21 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        v20 = std::__next_prime(v20);
      }
      else
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
      }
      if (prime <= v20)
        prime = v20;
      if (prime < v7)
LABEL_35:
        sub_20E8D2B3C(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5)
        v5 %= v7;
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v24)
  {
    *v10 = *v24;
LABEL_58:
    *v24 = v10;
    goto LABEL_59;
  }
  *v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v23 + 8 * v5) = v13;
  if (*v10)
  {
    v25 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v25 >= v7)
        v25 %= v7;
    }
    else
    {
      v25 &= v7 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_20F45F81C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EAFA1EC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20F45F830@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  BOOL v30;
  size_t v31;
  void *v32;
  unint64_t v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v40;
  std::ios_base v41;
  uint64_t v42;
  int v43;
  uint64_t __sb;
  const void *v45;
  uint64_t v46;
  const void *v47;
  unint64_t v48;
  void *__p[2];
  __int128 v50;
  int v51;

  std::streambuf::basic_streambuf();
  __sb = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)__p = 0u;
  v50 = 0u;
  v51 = 24;
  v40 = MEMORY[0x24BEDB828] + 24;
  v41.__vftable = (std::ios_base_vtbl *)(MEMORY[0x24BEDB828] + 64);
  std::ios_base::init(&v41, &__sb);
  v42 = 0;
  v43 = -1;
  sub_20E86A980(&v40, (uint64_t)"[CM] User: ", 11);
  v3 = (_QWORD *)std::ostream::operator<<();
  v4 = sub_20E86A980(v3, (uint64_t)" ", 1);
  sub_20E86A980(v4, (uint64_t)"RelocTask ", 10);
  v5 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v5, (uint64_t)"/", 1);
  v6 = (_QWORD *)std::ostream::operator<<();
  v7 = sub_20E86A980(v6, (uint64_t)" ", 1);
  sub_20E86A980(v7, (uint64_t)"RelocResult ", 12);
  v8 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v8, (uint64_t)"/", 1);
  v9 = (_QWORD *)std::ostream::operator<<();
  v10 = sub_20E86A980(v9, (uint64_t)" ", 1);
  sub_20E86A980(v10, (uint64_t)"ExtKf ", 6);
  v11 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v11, (uint64_t)"/", 1);
  v12 = (_QWORD *)std::ostream::operator<<();
  v13 = sub_20E86A980(v12, (uint64_t)" ", 1);
  sub_20E86A980(v13, (uint64_t)"ObjAnchor ", 10);
  v14 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v14, (uint64_t)"/", 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v15, (uint64_t)"\n", 1);
  v16 = *(_QWORD **)(a1 + 64);
  v17 = (_QWORD *)(a1 + 72);
  if (v16 != v17)
  {
    do
    {
      sub_20E86A980(&v40, (uint64_t)" Map[", 5);
      v18 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v18, (uint64_t)"] ", 2);
      sub_20E86A980(&v40, (uint64_t)"m: ", 3);
      v19 = (_QWORD *)std::ostream::operator<<();
      v20 = sub_20E86A980(v19, (uint64_t)" ", 1);
      sub_20E86A980(v20, (uint64_t)"r: ", 3);
      v21 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v21, (uint64_t)"/", 1);
      v22 = (_QWORD *)std::ostream::operator<<();
      v23 = sub_20E86A980(v22, (uint64_t)" ", 1);
      sub_20E86A980(v23, (uint64_t)"e: ", 3);
      v24 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v24, (uint64_t)"/", 1);
      v25 = (_QWORD *)std::ostream::operator<<();
      v26 = sub_20E86A980(v25, (uint64_t)" ", 1);
      sub_20E86A980(v26, (uint64_t)"a: ", 3);
      v27 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v27, (uint64_t)"\n", 1);
      v28 = (_QWORD *)v16[1];
      if (v28)
      {
        do
        {
          v29 = v28;
          v28 = (_QWORD *)*v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          v29 = (_QWORD *)v16[2];
          v30 = *v29 == (_QWORD)v16;
          v16 = v29;
        }
        while (!v30);
      }
      v16 = v29;
    }
    while (v29 != v17);
  }
  if ((v51 & 0x10) != 0)
  {
    v33 = *((_QWORD *)&v50 + 1);
    if (*((_QWORD *)&v50 + 1) < v48)
    {
      *((_QWORD *)&v50 + 1) = v48;
      v33 = v48;
    }
    v34 = v47;
    v31 = v33 - (_QWORD)v47;
    if (v33 - (unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_27;
  }
  else
  {
    if ((v51 & 8) == 0)
    {
      v31 = 0;
      v32 = a2;
      *((_BYTE *)a2 + 23) = 0;
      goto LABEL_23;
    }
    v34 = v45;
    v31 = v46 - (_QWORD)v45;
    if ((unint64_t)(v46 - (_QWORD)v45) >= 0x7FFFFFFFFFFFFFF8)
LABEL_27:
      sub_20E860B7C();
  }
  if (v31 >= 0x17)
  {
    v35 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v31 | 7) != 0x17)
      v35 = v31 | 7;
    v36 = v35 + 1;
    v32 = operator new(v35 + 1);
    a2[1] = v31;
    a2[2] = v36 | 0x8000000000000000;
    *a2 = v32;
    goto LABEL_22;
  }
  v32 = a2;
  *((_BYTE *)a2 + 23) = v31;
  if (v31)
  {
LABEL_22:
    v37 = v32;
    memmove(v32, v34, v31);
    v32 = v37;
  }
LABEL_23:
  *((_BYTE *)v32 + v31) = 0;
  std::ostream::~ostream();
  __sb = MEMORY[0x24BEDB848] + 16;
  if (SBYTE7(v50) < 0)
    operator delete(__p[0]);
  return std::streambuf::~streambuf();
}

uint64_t *sub_20F45FCA8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *__p;
  __int128 v9;

  __p = operator new(0x28uLL);
  v9 = xmmword_2102DCA10;
  strcpy((char *)__p, "MapKeyframeCreatorConfig parameters");
  sub_20E8B30B4(a2, (__int128 *)&__p, 80, 40);
  if (SHIBYTE(v9) < 0)
    operator delete(__p);
  __p = (void *)nullsub_1(a2);
  v4 = sub_20EA9DB90((double *)a1);
  sub_20E8B2F9C((uint64_t *)&__p, "MapKeyframeCreatorConfig.max_feature_distance_for_mapping_in_meter", v4, "Maximum distance of any new map structure that is allowed");
  __p = (void *)nullsub_1(a2);
  v5 = sub_20EAA14D8((_BYTE *)(a1 + 8));
  sub_20E8B2F9C((uint64_t *)&__p, "MapKeyframeCreatorConfig.construct_only_close_map", v5, "Indicator if we only construct close map features");
  __p = (void *)nullsub_1(a2);
  v6 = sub_20EAA14D8((_BYTE *)(a1 + 9));
  return sub_20E8B2F9C((uint64_t *)&__p, "MapKeyframeCreatorConfig.store_all_features", v6, "Optionally store all features in the keyframe");
}

void sub_20F45FDC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  sub_20E869298(v15);
  _Unwind_Resume(a1);
}

void sub_20F45FE08(uint64_t a1, _QWORD *a2)
{
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;

  if (*(_QWORD *)a1 != a2[30]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingTypes/src/MapUpdateSample.cpp", 30, (uint64_t)"update.map_session == data.map_data.map_session", 47, (uint64_t)"Submap ID mismatch during MapUpdateSample move.", 47, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v4 = (void *)a2[21];
  if (v4)
  {
    a2[22] = v4;
    operator delete(v4);
    a2[21] = 0;
    a2[22] = 0;
    a2[23] = 0;
  }
  *(_OWORD *)(a2 + 21) = *(_OWORD *)(a1 + 8);
  a2[23] = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v5 = a2 + 28;
  sub_20E866B68((uint64_t)(a2 + 27), a2[28]);
  a2[27] = *(_QWORD *)(a1 + 32);
  v6 = (_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 40);
  a2[28] = v7;
  v8 = *(_QWORD *)(a1 + 48);
  a2[29] = v8;
  if (v8)
  {
    *(_QWORD *)(v7 + 16) = v5;
    *(_QWORD *)(a1 + 32) = v6;
    *v6 = 0;
    *(_QWORD *)(a1 + 48) = 0;
    v9 = *(_QWORD **)(a1 + 56);
    v10 = *(_QWORD **)(a1 + 64);
    v11 = (_QWORD *)(a1 + 56);
    v12 = v9;
    if (v9 == v10)
      goto LABEL_13;
  }
  else
  {
    a2[27] = v5;
    v9 = *(_QWORD **)(a1 + 56);
    v10 = *(_QWORD **)(a1 + 64);
    v11 = (_QWORD *)(a1 + 56);
    v12 = v9;
    if (v9 == v10)
      goto LABEL_13;
  }
  v12 = v9;
  while (*v12 != *(_QWORD *)a1)
  {
    v12 += 2;
    if (v12 == v10)
    {
      v12 = v10;
      break;
    }
  }
LABEL_13:
  v13 = (_QWORD *)a2[31];
  v14 = (_QWORD *)a2[32];
  v15 = v13;
  if (v13 != v14)
  {
    v15 = (_QWORD *)a2[31];
    while (*v15 != a2[30])
    {
      v15 += 2;
      if (v15 == v14)
      {
        v15 = (_QWORD *)a2[32];
        break;
      }
    }
  }
  if (v12 != v10)
  {
    if (v15 == v14
      || (*v12 < *v15 ? (v16 = -16777216) : (v16 = 0x1000000),
          *v12 != *v15 || ((v17 = v12[1], v18 = v15[1], v17 < v18) ? (v16 = -16777216) : (v16 = 0x1000000), v17 != v18))
      && v16 >= 1)
    {
      if (v13)
      {
        a2[32] = v13;
        operator delete(v13);
        a2[31] = 0;
        a2[32] = 0;
        a2[33] = 0;
        v9 = *(_QWORD **)(a1 + 56);
        v10 = *(_QWORD **)(a1 + 64);
      }
      a2[31] = v9;
      a2[32] = v10;
      a2[33] = *(_QWORD *)(a1 + 72);
      *v11 = 0;
      v11[1] = 0;
      v11[2] = 0;
    }
  }
}

uint64_t *sub_20F45FFEC(uint64_t *result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;

  v2 = *(_QWORD **)(a2 + 32);
  v3 = (_QWORD *)(a2 + 40);
  if (v2 != (_QWORD *)(a2 + 40))
  {
    v4 = result[1];
    if (v4)
    {
      v5 = *result;
      v6 = v4 - 1;
      if ((v4 & (v4 - 1)) != 0)
      {
        do
        {
          v11 = *((unsigned int *)v2 + 26);
          v12 = v11;
          if (v4 <= v11)
            v12 = v11 % v4;
          v13 = *(uint64_t **)(v5 + 8 * v12);
          if (v13)
          {
            while (1)
            {
              v13 = (uint64_t *)*v13;
              if (!v13)
                break;
              v14 = v13[1];
              if (v14 == v11)
              {
                if (*((_DWORD *)v13 + 4) == (_DWORD)v11)
                {
                  *((_DWORD *)v2 + 26) = *((_DWORD *)v13 + 5);
                  break;
                }
              }
              else
              {
                if (v14 >= v4)
                  v14 %= v4;
                if (v14 != v12)
                  break;
              }
            }
          }
          v15 = (_QWORD *)v2[1];
          if (v15)
          {
            do
            {
              v16 = v15;
              v15 = (_QWORD *)*v15;
            }
            while (v15);
          }
          else
          {
            do
            {
              v16 = (_QWORD *)v2[2];
              v10 = *v16 == (_QWORD)v2;
              v2 = v16;
            }
            while (!v10);
          }
          v2 = v16;
        }
        while (v16 != v3);
      }
      else
      {
        v7 = v4 + 0xFFFFFFFF;
        do
        {
          v17 = *((unsigned int *)v2 + 26);
          v18 = *(uint64_t **)(v5 + 8 * (v7 & v17));
          if (v18)
          {
            while (1)
            {
              v18 = (uint64_t *)*v18;
              if (!v18)
                break;
              v19 = v18[1];
              if (v19 == v17)
              {
                if (*((_DWORD *)v18 + 4) == (_DWORD)v17)
                {
                  *((_DWORD *)v2 + 26) = *((_DWORD *)v18 + 5);
                  break;
                }
              }
              else if ((v19 & v6) != (v7 & v17))
              {
                break;
              }
            }
          }
          v20 = (_QWORD *)v2[1];
          if (v20)
          {
            do
            {
              v21 = v20;
              v20 = (_QWORD *)*v20;
            }
            while (v20);
          }
          else
          {
            do
            {
              v21 = (_QWORD *)v2[2];
              v10 = *v21 == (_QWORD)v2;
              v2 = v21;
            }
            while (!v10);
          }
          v2 = v21;
        }
        while (v21 != v3);
      }
    }
    else
    {
      do
      {
        v8 = (_QWORD *)v2[1];
        if (v8)
        {
          do
          {
            v9 = v8;
            v8 = (_QWORD *)*v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            v9 = (_QWORD *)v2[2];
            v10 = *v9 == (_QWORD)v2;
            v2 = v9;
          }
          while (!v10);
        }
        v2 = v9;
      }
      while (v9 != v3);
    }
  }
  return result;
}

void sub_20F46018C(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  uint64_t *v9;
  void **v10;
  timespec *v11;
  void **v12;
  unsigned __int8 v13;
  uint64_t v15;
  char *v16;
  size_t v17;
  __darwin_time_t tv_sec;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  void **v31;
  timespec *v32;
  unsigned __int8 v33;
  char *v35;
  size_t v36;
  __darwin_time_t v37;
  uint64_t v38;
  uint64_t j;
  uint64_t v40;
  const void *v41;
  char *v42;
  int64_t v43;
  char *v44;
  _QWORD *v45;
  timespec v47;
  char v48;
  void *v49[2];
  char v50;
  char v51;
  char v52;
  timespec v53;
  int v54;
  _BYTE v55[18];
  __int16 v56;
  timespec *v57;
  void *v58[2];
  char v59;
  char v60;
  void *v61;
  char v62;
  char v63;
  void *v64;
  char v65;
  void *__p;
  char v67;
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  v3 = (_QWORD *)a2[4];
  v45 = a2 + 5;
  if (v3 != a2 + 5)
  {
    do
    {
      v4 = *(_QWORD *)(a1 + 64);
      v5 = *(_QWORD *)(a1 + 72);
      if (v4 != v5)
      {
        while (*(_QWORD *)v4 != v3[11] || *(_DWORD *)(v4 + 8) != *((_DWORD *)v3 + 24))
        {
          v4 += 168;
          if (v4 == v5)
            goto LABEL_18;
        }
        if (v4 != v5)
        {
          v6 = (_QWORD *)v3[1];
          if (v6)
          {
            do
            {
              v7 = v6;
              v6 = (_QWORD *)*v6;
            }
            while (v6);
          }
          else
          {
            do
            {
              v7 = (_QWORD *)v3[2];
              v8 = *v7 == (_QWORD)v3;
              v3 = v7;
            }
            while (!v8);
          }
          goto LABEL_5;
        }
      }
LABEL_18:
      v9 = sub_210219C18();
      v10 = (void **)(v3 + 7);
      v11 = (timespec *)(v3 + 7);
      if (*((char *)v3 + 79) < 0)
        v11 = (timespec *)*v10;
      LODWORD(v57) = 0;
      sub_20F460D7C((uint64_t)&v54, (uint64_t)(v3 + 11));
      if ((_DWORD)v57 == -1)
        sub_20E877AB8();
      v47.tv_sec = (__darwin_time_t)&v52;
      ((void (*)(void **__return_ptr, timespec *, int *))off_24CA001D0[v57])(v49, &v47, &v54);
      if ((_DWORD)v57 != -1)
        ((void (*)(timespec *, int *))off_24CA001B8[v57])(&v47, &v54);
      if (v50 >= 0)
        v12 = v49;
      else
        v12 = (void **)v49[0];
      v13 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
      if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
      {
        __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DDD0);
      }
      if (!atomic_load(&qword_254A5A450))
        goto LABEL_45;
      v15 = v3[10];
      v54 = 136315906;
      *(_QWORD *)v55 = "Anchor";
      *(_WORD *)&v55[8] = 2048;
      *(_QWORD *)&v55[10] = v15;
      v56 = 2080;
      v57 = v11;
      LOWORD(v58[0]) = 2080;
      *(void **)((char *)v58 + 2) = v12;
      v16 = (char *)_os_log_send_and_compose_impl();
      v17 = strlen(v16);
      v47.tv_sec = 0;
      pthread_threadid_np(0, (__uint64_t *)&v47);
      tv_sec = v47.tv_sec;
      timespec_get(&v47, 1);
      sub_210219E20(&v54, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v9 + 1), (__int128 *)(v9 + 5), "PruneEventsWithoutKeyframe:Type:%s, SID:%llu, AID:%s, IMID:%s", 0x3DuLL, v16, v17, tv_sec, &v47);
      std::mutex::lock(&stru_254A5A410);
      v19 = qword_254A5A458;
      for (i = unk_254A5A460; v19 != i; v19 += 40)
      {
        v21 = *(_QWORD *)(v19 + 32);
        if (!v21)
          sub_20E86D37C();
        (*(void (**)(uint64_t, int *))(*(_QWORD *)v21 + 48))(v21, &v54);
      }
      std::mutex::unlock(&stru_254A5A410);
      if (v67 < 0)
      {
        operator delete(__p);
        if ((v65 & 0x80000000) == 0)
        {
LABEL_33:
          if (v63)
            goto LABEL_37;
          goto LABEL_39;
        }
      }
      else if ((v65 & 0x80000000) == 0)
      {
        goto LABEL_33;
      }
      operator delete(v64);
      if (v63)
      {
LABEL_37:
        if (v62 < 0)
          operator delete(v61);
      }
LABEL_39:
      if (v60 && v59 < 0)
        operator delete(v58[0]);
      if ((SHIBYTE(v57) & 0x80000000) == 0)
      {
        if (!v16)
          goto LABEL_45;
LABEL_44:
        free(v16);
        goto LABEL_45;
      }
      operator delete(*(void **)&v55[4]);
      if (v16)
        goto LABEL_44;
LABEL_45:
      if (os_signpost_enabled((os_log_t)*v9))
      {
        v22 = v3[10];
        v54 = 136315906;
        *(_QWORD *)v55 = "Anchor";
        *(_WORD *)&v55[8] = 2048;
        *(_QWORD *)&v55[10] = v22;
        v56 = 2080;
        v57 = v11;
        LOWORD(v58[0]) = 2080;
        *(void **)((char *)v58 + 2) = v12;
        _os_signpost_emit_unreliably_with_name_impl();
        if (v50 < 0)
          goto LABEL_47;
      }
      else if (v50 < 0)
      {
LABEL_47:
        operator delete(v49[0]);
        v23 = (_QWORD *)v3[1];
        v24 = v3;
        if (!v23)
          goto LABEL_53;
        goto LABEL_51;
      }
      v23 = (_QWORD *)v3[1];
      v24 = v3;
      if (!v23)
      {
        do
        {
LABEL_53:
          v7 = (_QWORD *)v24[2];
          v8 = *v7 == (_QWORD)v24;
          v24 = v7;
        }
        while (!v8);
        goto LABEL_55;
      }
      do
      {
LABEL_51:
        v7 = v23;
        v23 = (_QWORD *)*v23;
      }
      while (v23);
LABEL_55:
      if ((_QWORD *)a2[4] == v3)
        a2[4] = v7;
      v25 = (uint64_t *)a2[5];
      --a2[6];
      sub_20E8D2134(v25, v3);
      if (*((char *)v3 + 79) < 0)
      {
        operator delete(*v10);
        if (*((char *)v3 + 55) < 0)
          goto LABEL_59;
      }
      else if (*((char *)v3 + 55) < 0)
      {
LABEL_59:
        operator delete((void *)v3[4]);
      }
      operator delete(v3);
LABEL_5:
      v3 = v7;
    }
    while (v7 != v45);
  }
  v27 = (char *)a2[1];
  v26 = (char *)a2[2];
  if (v27 != v26)
  {
    do
    {
      while (1)
      {
        v28 = *(_QWORD *)(a1 + 64);
        v29 = *(_QWORD *)(a1 + 72);
        if (v28 == v29)
          break;
        while ((*(_QWORD *)v28 != *((_QWORD *)v27 + 3) || *(_DWORD *)(v28 + 8) != *((_DWORD *)v27 + 8))
             && (*(_QWORD *)v28 != *(_QWORD *)v27 || *(_DWORD *)(v28 + 8) != *((_DWORD *)v27 + 2)))
        {
          v28 += 168;
          if (v28 == v29)
            goto LABEL_77;
        }
        if (v28 == v29)
          break;
        v27 += 472;
        if (v27 == v26)
          return;
      }
LABEL_77:
      v30 = sub_210219C18();
      LODWORD(v57) = 0;
      sub_20F460D7C((uint64_t)&v54, (uint64_t)(v27 + 24));
      if ((_DWORD)v57 == -1)
        sub_20E877AB8();
      v47.tv_sec = (__darwin_time_t)&v52;
      ((void (*)(void **__return_ptr, timespec *, int *))off_24CA001D0[v57])(v49, &v47, &v54);
      if ((_DWORD)v57 != -1)
        ((void (*)(timespec *, int *))off_24CA001B8[v57])(&v47, &v54);
      if (v50 >= 0)
        v31 = v49;
      else
        v31 = (void **)v49[0];
      LODWORD(v57) = 0;
      sub_20F460D7C((uint64_t)&v54, (uint64_t)v27);
      if ((_DWORD)v57 == -1)
        sub_20E877AB8();
      v53.tv_sec = (__darwin_time_t)&v51;
      ((void (*)(timespec *__return_ptr, timespec *, int *))off_24CA001D0[v57])(&v47, &v53, &v54);
      if ((_DWORD)v57 != -1)
        ((void (*)(timespec *, int *))off_24CA001B8[v57])(&v53, &v54);
      if (v48 >= 0)
        v32 = &v47;
      else
        v32 = (timespec *)v47.tv_sec;
      v33 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
      if ((v33 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
      {
        __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DDD0);
      }
      if (!atomic_load(&qword_254A5A450))
        goto LABEL_108;
      v54 = 136315650;
      *(_QWORD *)v55 = "Reloc";
      *(_WORD *)&v55[8] = 2080;
      *(_QWORD *)&v55[10] = v31;
      v56 = 2080;
      v57 = v32;
      v35 = (char *)_os_log_send_and_compose_impl();
      v36 = strlen(v35);
      v53.tv_sec = 0;
      pthread_threadid_np(0, (__uint64_t *)&v53);
      v37 = v53.tv_sec;
      timespec_get(&v53, 1);
      sub_210219E20(&v54, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v30 + 1), (__int128 *)(v30 + 5), "PruneEventsWithoutKeyframe:Type:%s, RIMID:%s, QIMID:%s", 0x36uLL, v35, v36, v37, &v53);
      std::mutex::lock(&stru_254A5A410);
      v38 = qword_254A5A458;
      for (j = unk_254A5A460; v38 != j; v38 += 40)
      {
        v40 = *(_QWORD *)(v38 + 32);
        if (!v40)
          sub_20E86D37C();
        (*(void (**)(uint64_t, int *))(*(_QWORD *)v40 + 48))(v40, &v54);
      }
      std::mutex::unlock(&stru_254A5A410);
      if (v67 < 0)
      {
        operator delete(__p);
        if ((v65 & 0x80000000) == 0)
        {
LABEL_96:
          if (v63)
            goto LABEL_100;
          goto LABEL_102;
        }
      }
      else if ((v65 & 0x80000000) == 0)
      {
        goto LABEL_96;
      }
      operator delete(v64);
      if (v63)
      {
LABEL_100:
        if (v62 < 0)
          operator delete(v61);
      }
LABEL_102:
      if (v60)
      {
        if (v59 < 0)
          operator delete(v58[0]);
      }
      if ((SHIBYTE(v57) & 0x80000000) == 0)
      {
        if (!v35)
          goto LABEL_108;
LABEL_107:
        free(v35);
        goto LABEL_108;
      }
      operator delete(*(void **)&v55[4]);
      if (v35)
        goto LABEL_107;
LABEL_108:
      if (os_signpost_enabled((os_log_t)*v30))
      {
        v54 = 136315650;
        *(_QWORD *)v55 = "Reloc";
        *(_WORD *)&v55[8] = 2080;
        *(_QWORD *)&v55[10] = v31;
        v56 = 2080;
        v57 = v32;
        _os_signpost_emit_unreliably_with_name_impl();
        if (v48 < 0)
          goto LABEL_110;
      }
      else if (v48 < 0)
      {
LABEL_110:
        operator delete((void *)v47.tv_sec);
        if (v50 < 0)
          goto LABEL_111;
        goto LABEL_115;
      }
      if (v50 < 0)
      {
LABEL_111:
        operator delete(v49[0]);
        v41 = v27 + 472;
        v42 = (char *)a2[2];
        v43 = v42 - (v27 + 472);
        if (v42 == v27 + 472)
          goto LABEL_66;
LABEL_116:
        memmove(v27, v41, v43 - 4);
        goto LABEL_66;
      }
LABEL_115:
      v41 = v27 + 472;
      v44 = (char *)a2[2];
      v43 = v44 - (v27 + 472);
      if (v44 != v27 + 472)
        goto LABEL_116;
LABEL_66:
      v26 = &v27[v43];
      a2[2] = &v27[v43];
    }
    while (v27 != &v27[v43]);
  }
}

void sub_20F460B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,char a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,void *__p,uint64_t a63)
{
  char a67;
  void *v67;

  if (a67 < 0)
  {
    operator delete(__p);
    if ((a61 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a61 & 0x80000000) == 0)
  {
LABEL_3:
    if (!a55)
      goto LABEL_9;
LABEL_7:
    if (a54 < 0)
      operator delete(a49);
LABEL_9:
    if (a48 && a47 < 0)
      operator delete(a42);
    if (a41 < 0)
    {
      operator delete(a36);
      if (v67)
        goto LABEL_14;
    }
    else if (v67)
    {
LABEL_14:
      free(v67);
      if ((a24 & 0x80000000) == 0)
        goto LABEL_19;
LABEL_18:
      operator delete(a19);
LABEL_19:
      if (a31 < 0)
        operator delete(a26);
      _Unwind_Resume(a1);
    }
    if ((a24 & 0x80000000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
  operator delete(a56);
  if (!a55)
    goto LABEL_9;
  goto LABEL_7;
}

void sub_20F460D7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  size_t v6;
  void **v7;
  unint64_t v8;
  unint64_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *__dst[2];
  unint64_t v19;
  _QWORD v20[5];
  _QWORD *v21;

  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_OWORD *)(v4 + 224) = 0u;
  *(_OWORD *)(v4 + 240) = 0u;
  *(_OWORD *)(v4 + 256) = 0u;
  *(_QWORD *)(v4 + 272) = 0;
  sub_20E863438(v4);
  v20[0] = v4;
  sub_210122C68((_QWORD *)(v4 + 16), a2);
  v5 = *(_DWORD *)(v4 + 120);
  if ((v5 & 0x10) != 0)
  {
    v8 = *(_QWORD *)(v4 + 112);
    v9 = *(_QWORD *)(v4 + 72);
    if (v8 < v9)
    {
      *(_QWORD *)(v4 + 112) = v9;
      v8 = v9;
    }
    v10 = *(const void **)(v4 + 64);
    v6 = v8 - (_QWORD)v10;
    if (v8 - (unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v5 & 8) == 0)
    {
      v6 = 0;
      HIBYTE(v19) = 0;
      v7 = __dst;
      goto LABEL_14;
    }
    v10 = *(const void **)(v4 + 40);
    v6 = *(_QWORD *)(v4 + 56) - (_QWORD)v10;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_20E860B7C();
  }
  if (v6 >= 0x17)
  {
    v11 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v11 = v6 | 7;
    v12 = v11 + 1;
    v7 = (void **)operator new(v11 + 1);
    __dst[1] = (void *)v6;
    v19 = v12 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_13;
  }
  HIBYTE(v19) = v6;
  v7 = __dst;
  if (v6)
LABEL_13:
    memmove(v7, v10, v6);
LABEL_14:
  *((_BYTE *)v7 + v6) = 0;
  v13 = v20[0];
  if (v20[0])
  {
    v14 = MEMORY[0x24BEDB7F0];
    v15 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v20[0] = *MEMORY[0x24BEDB7F0];
    v16 = *(_QWORD *)(v14 + 72);
    *(_QWORD *)(v13 + *(_QWORD *)(v15 - 24)) = *(_QWORD *)(v14 + 64);
    *(_QWORD *)(v13 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v13 + 16) = v16;
    if (*(char *)(v13 + 111) < 0)
      operator delete(*(void **)(v13 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v13 + 128);
    MEMORY[0x212BC6398](v13, 0x10B2C40EED050F3);
  }
  v20[0] = a1;
  v20[1] = __dst;
  v20[2] = a1;
  v20[3] = __dst;
  v20[4] = __dst;
  v17 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v17 == -1)
    sub_20E877AB8();
  v21 = v20;
  ((void (*)(_QWORD **, uint64_t))off_24CA001A0[v17])(&v21, a1);
  if (SHIBYTE(v19) < 0)
    operator delete(__dst[0]);
}

void sub_20F460FCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20F460FF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F46100C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20FD0DE48((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20F461020(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  char *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t *v19;
  uint64_t *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  int v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  __int128 v31;
  char *v32;
  _QWORD *v33;
  unint64_t v34;
  char **v35;
  char **v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  _QWORD *v44;
  __int128 v45;
  char **v46;
  char **v47;
  char *v48;
  char *v49;
  void *v50;
  uint64_t v51;
  void **v52;
  int64_t v53;
  unint64_t v54;
  void **v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  void **v61;
  void **v62;
  uint64_t **v63;
  uint64_t **v64;
  _QWORD *v65;
  char **v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  void **v72;
  void **v73;
  uint64_t v74;
  uint64_t v75;
  void **v76;
  void *v77;
  void **v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void **v83;
  char *v84;
  char *v85;
  void *v86;
  void *v87;
  int64_t v88;
  unint64_t v89;
  _BYTE *v90;
  _BYTE *v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  char *v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  char *v111;
  char *v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  char *v119;
  char *v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  size_t v125;
  unint64_t *v126;
  char *v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  _QWORD *v134;
  char *v135;
  uint64_t v136;
  int64x2_t v137;
  char *v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  char *v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int64x2_t v150;
  char *v151;
  uint64_t result;
  _QWORD *v153;
  char ***v155;
  _QWORD *v156;
  _QWORD *v157;
  int64x2_t *v158;
  _QWORD *v159;
  _QWORD *v160;
  uint64_t *v161;
  void *__p;
  int64x2_t v164;
  char *v165;
  unint64_t *v166;

  *(_DWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  v155 = (char ***)(a1 + 40);
  *(_OWORD *)(a1 + 88) = 0u;
  v153 = (_QWORD *)(a1 + 88);
  v156 = (_QWORD *)(a1 + 64);
  v157 = (_QWORD *)(a1 + 112);
  *(_OWORD *)(a1 + 136) = 0u;
  v158 = (int64x2_t *)(a1 + 136);
  *(_QWORD *)(a1 + 12) = 0;
  *(_QWORD *)(a1 + 4) = 0;
  *(_OWORD *)(a1 + 146) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  v2 = *(_DWORD *)(a2 + 16);
  v3 = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = v2;
  *(_DWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 48);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    if (v7 > 0xAAAAAAAAAAAAAAALL)
      sub_20EABADD4();
    v8 = (char *)operator new(v6);
    *(_QWORD *)(a1 + 40) = v8;
    *(_QWORD *)(a1 + 48) = v8;
    *(_QWORD *)(a1 + 56) = &v8[24 * v7];
    v9 = *(_QWORD **)(a2 + 40);
    if (v9 != *(_QWORD **)(a2 + 48))
    {
      v159 = *(_QWORD **)(a2 + 48);
      while (1)
      {
        v164 = 0uLL;
        __p = 0;
        v13 = v9[1];
        v14 = v13 - *v9;
        v160 = v9;
        if (v13 == *v9)
        {
          v18 = 0;
          v21 = 0;
          v22 = 0;
          goto LABEL_36;
        }
        v15 = 0xAAAAAAAAAAAAAAABLL * (v14 >> 3);
        if (v15 > 0xAAAAAAAAAAAAAAALL)
          sub_20EABADD4();
        v16 = (char *)operator new(v14);
        v17 = v16;
        v18 = &v16[24 * v15];
        __p = v16;
        v164.i64[0] = (uint64_t)v16;
        v164.i64[1] = (uint64_t)v18;
        v20 = (uint64_t *)*v9;
        v19 = (uint64_t *)v9[1];
        if ((uint64_t *)*v9 == v19)
        {
          v21 = v16;
          v22 = v16;
LABEL_36:
          v33 = (_QWORD *)a1;
          v35 = *(char ***)(a1 + 48);
          v34 = *(_QWORD *)(a1 + 56);
          if ((unint64_t)v35 >= v34)
            goto LABEL_37;
LABEL_5:
          v35[1] = v21;
          v35[2] = 0;
          *v35 = v22;
          v35[2] = (char *)v164.i64[1];
          v33[6] = v35 + 3;
          v10 = v33;
          v12 = v159;
          v11 = v160;
          goto LABEL_6;
        }
        v21 = (char *)v164.i64[0];
        v22 = v16;
        v161 = (uint64_t *)v9[1];
        do
        {
          while (1)
          {
            v23 = *v20;
            v24 = *((_DWORD *)v20 + 2);
            v25 = *((_DWORD *)v20 + 4);
            if (v17 >= v18)
              break;
            *(_QWORD *)v17 = v23;
            *((_DWORD *)v17 + 2) = v24;
            v21 = v17 + 24;
            *((_DWORD *)v17 + 4) = v25;
            v20 += 3;
            v17 += 24;
            if (v20 == v19)
              goto LABEL_32;
          }
          v26 = 0xAAAAAAAAAAAAAAABLL * ((v17 - v22) >> 3) + 1;
          if (v26 > 0xAAAAAAAAAAAAAAALL)
          {
            v164.i64[0] = (uint64_t)v21;
            v164.i64[1] = (uint64_t)v18;
            __p = v22;
            sub_20EABADD4();
          }
          if (0x5555555555555556 * ((v18 - v22) >> 3) > v26)
            v26 = 0x5555555555555556 * ((v18 - v22) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((v18 - v22) >> 3) >= 0x555555555555555)
            v27 = 0xAAAAAAAAAAAAAAALL;
          else
            v27 = v26;
          if (v27)
          {
            if (v27 > 0xAAAAAAAAAAAAAAALL)
            {
              v164.i64[0] = (uint64_t)v21;
              v164.i64[1] = (uint64_t)v18;
              __p = v22;
              sub_20E877A38();
            }
            v28 = (char *)operator new(24 * v27);
          }
          else
          {
            v28 = 0;
          }
          v29 = &v28[8 * ((v17 - v22) >> 3)];
          *(_QWORD *)v29 = v23;
          *((_DWORD *)v29 + 2) = v24;
          *((_DWORD *)v29 + 4) = v25;
          if (v17 == v22)
          {
            v32 = &v28[8 * ((v17 - v22) >> 3)];
            v18 = &v28[24 * v27];
            v21 = v29 + 24;
            if (v22)
              goto LABEL_27;
          }
          else
          {
            v30 = &v28[8 * ((v17 - v22) >> 3)];
            do
            {
              v31 = *(_OWORD *)(v17 - 24);
              v32 = v30 - 24;
              *((_DWORD *)v30 - 2) = *((_DWORD *)v17 - 2);
              *(_OWORD *)(v30 - 24) = v31;
              v17 -= 24;
              v30 -= 24;
            }
            while (v17 != v22);
            v18 = &v28[24 * v27];
            v21 = v29 + 24;
            if (v22)
LABEL_27:
              operator delete(v22);
          }
          v22 = v32;
          v19 = v161;
          v20 += 3;
          v17 = v21;
        }
        while (v20 != v161);
LABEL_32:
        v164.i64[0] = (uint64_t)v21;
        v164.i64[1] = (uint64_t)v18;
        __p = v22;
        v33 = (_QWORD *)a1;
        v35 = *(char ***)(a1 + 48);
        v34 = *(_QWORD *)(a1 + 56);
        if ((unint64_t)v35 < v34)
          goto LABEL_5;
LABEL_37:
        v36 = *v155;
        v37 = 0xAAAAAAAAAAAAAAABLL * (v35 - *v155);
        v38 = v37 + 1;
        if (v37 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20EABADD4();
        v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34 - (_QWORD)v36) >> 3);
        if (2 * v39 > v38)
          v38 = 2 * v39;
        if (v39 >= 0x555555555555555)
          v40 = 0xAAAAAAAAAAAAAAALL;
        else
          v40 = v38;
        if (v40 > 0xAAAAAAAAAAAAAAALL)
          sub_20E877A38();
        v41 = (char *)operator new(24 * v40);
        v42 = &v41[24 * v37];
        *(_QWORD *)v42 = v22;
        *((_QWORD *)v42 + 1) = v21;
        *((_QWORD *)v42 + 2) = v18;
        v164 = 0uLL;
        v43 = &v41[24 * v40];
        __p = 0;
        v44 = v42 + 24;
        if (v35 == v36)
        {
          v10 = (_QWORD *)a1;
          *(_QWORD *)(a1 + 40) = v42;
          *(_QWORD *)(a1 + 48) = v44;
          *(_QWORD *)(a1 + 56) = v43;
          v12 = v159;
          v11 = v160;
        }
        else
        {
          v10 = (_QWORD *)a1;
          v12 = v159;
          v11 = v160;
          do
          {
            v45 = *(_OWORD *)(v35 - 3);
            v35 -= 3;
            *(_OWORD *)(v42 - 24) = v45;
            v42 -= 24;
            *((_QWORD *)v42 + 2) = v35[2];
            *v35 = 0;
            v35[1] = 0;
            v35[2] = 0;
          }
          while (v35 != v36);
          v35 = *(char ***)(a1 + 40);
          v46 = *(char ***)(a1 + 48);
          *(_QWORD *)(a1 + 40) = v42;
          *(_QWORD *)(a1 + 48) = v44;
          *(_QWORD *)(a1 + 56) = v43;
          if (v46 != v35)
          {
            v47 = v46;
            do
            {
              v49 = *(v47 - 3);
              v47 -= 3;
              v48 = v49;
              if (v49)
              {
                *(v46 - 2) = v48;
                operator delete(v48);
              }
              v46 = v47;
            }
            while (v47 != v35);
          }
        }
        if (v35)
          operator delete(v35);
        v50 = __p;
        v10[6] = v44;
        if (v50)
          operator delete(v50);
LABEL_6:
        v9 = v11 + 3;
        if (v9 == v12)
        {
          v51 = v10[10];
          v52 = (void **)v10[8];
          goto LABEL_59;
        }
      }
    }
  }
  v52 = 0;
  v51 = 0;
LABEL_59:
  v53 = *(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64);
  v54 = 0x6DB6DB6DB6DB6DB7 * (v53 >> 4);
  if (0x6DB6DB6DB6DB6DB7 * ((v51 - (uint64_t)v52) >> 4) < v54)
  {
    if (v54 > 0x249249249249249)
      sub_20EABADD4();
    v55 = *(void ***)(a1 + 72);
    v56 = (char *)operator new(v53);
    v57 = &v56[112 * v54];
    v58 = &v56[(char *)v55 - (char *)v52];
    if (v55 == v52)
    {
      *(_QWORD *)(a1 + 64) = v58;
      *(_QWORD *)(a1 + 72) = v58;
      *(_QWORD *)(a1 + 80) = v57;
      if (v52)
LABEL_67:
        operator delete(v52);
    }
    else
    {
      v59 = 0;
      do
      {
        v60 = &v58[v59 * 8];
        v61 = &v55[v59];
        *((_OWORD *)v60 - 7) = *(_OWORD *)&v55[v59 - 14];
        *((_QWORD *)v60 - 12) = v55[v59 - 12];
        *(v61 - 14) = 0;
        *(v61 - 13) = 0;
        *(v61 - 12) = 0;
        *(_OWORD *)(v60 - 88) = *(_OWORD *)&v55[v59 - 11];
        *((_QWORD *)v60 - 9) = v55[v59 - 9];
        *(v61 - 10) = 0;
        *(v61 - 9) = 0;
        *(v61 - 11) = 0;
        *((_QWORD *)v60 - 8) = v55[v59 - 8];
        *(_OWORD *)(v60 - 56) = *(_OWORD *)&v55[v59 - 7];
        *((_QWORD *)v60 - 5) = v55[v59 - 5];
        *(v61 - 7) = 0;
        *(v61 - 6) = 0;
        *(v61 - 5) = 0;
        *((_OWORD *)v60 - 2) = *(_OWORD *)&v55[v59 - 4];
        *((_QWORD *)v60 - 2) = v55[v59 - 2];
        *(v61 - 4) = 0;
        *(v61 - 3) = 0;
        *(v61 - 2) = 0;
        *((_WORD *)v60 - 4) = v55[v59 - 1];
        v59 -= 14;
      }
      while (&v55[v59] != v52);
      v52 = *(void ***)(a1 + 64);
      v62 = *(void ***)(a1 + 72);
      *(_QWORD *)(a1 + 64) = &v58[v59 * 8];
      *(_QWORD *)(a1 + 72) = v58;
      for (*(_QWORD *)(a1 + 80) = v57; v62 != v52; v62 = sub_20E991750(v62 - 14))
        ;
      if (v52)
        goto LABEL_67;
    }
  }
  v64 = *(uint64_t ***)(a2 + 64);
  v63 = *(uint64_t ***)(a2 + 72);
  if (v64 != v63)
  {
    v65 = (_QWORD *)(a1 + 80);
    v66 = *(char ***)(a1 + 72);
    do
    {
      while ((unint64_t)v66 < *v65)
      {
        sub_20FCC339C(v66, v64);
        v66 += 14;
        *(_QWORD *)(a1 + 72) = v66;
        *(_QWORD *)(a1 + 72) = v66;
        v64 += 14;
        if (v64 == v63)
          goto LABEL_109;
      }
      v67 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v66 - *v156) >> 4);
      v68 = v67 + 1;
      if ((unint64_t)(v67 + 1) > 0x249249249249249)
        sub_20EABADD4();
      if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*v65 - *v156) >> 4) > v68)
        v68 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*v65 - *v156) >> 4);
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*v65 - *v156) >> 4)) >= 0x124924924924924)
        v69 = 0x249249249249249;
      else
        v69 = v68;
      v166 = (unint64_t *)(a1 + 80);
      if (v69)
      {
        if (v69 > 0x249249249249249)
          sub_20E877A38();
        v70 = (char *)operator new(112 * v69);
      }
      else
      {
        v70 = 0;
      }
      __p = v70;
      v164.i64[0] = (uint64_t)&v70[112 * v67];
      v164.i64[1] = v164.i64[0];
      v165 = &v70[112 * v69];
      sub_20FCC339C((char **)v164.i64[0], v64);
      v71 = v164.i64[0];
      v66 = (char **)(v164.i64[0] + 112);
      v72 = *(void ***)(a1 + 64);
      v73 = *(void ***)(a1 + 72);
      if (v73 == v72)
      {
        *(_QWORD *)(a1 + 64) = v164.i64[0];
        *(_QWORD *)(a1 + 72) = v66;
        *(_QWORD *)(a1 + 80) = v165;
      }
      else
      {
        v74 = 0;
        do
        {
          v75 = v71 + v74 * 8;
          v76 = &v73[v74];
          *(_QWORD *)(v75 - 112) = 0;
          *(_QWORD *)(v75 - 104) = 0;
          *(_QWORD *)(v75 - 96) = 0;
          *(_OWORD *)(v75 - 112) = *(_OWORD *)&v73[v74 - 14];
          *(_QWORD *)(v75 - 96) = v73[v74 - 12];
          *(v76 - 14) = 0;
          *(v76 - 13) = 0;
          *(v76 - 12) = 0;
          *(_QWORD *)(v75 - 88) = 0;
          *(_QWORD *)(v75 - 80) = 0;
          *(_QWORD *)(v75 - 72) = 0;
          *(_OWORD *)(v75 - 88) = *(_OWORD *)&v73[v74 - 11];
          *(_QWORD *)(v75 - 72) = v73[v74 - 9];
          *(v76 - 10) = 0;
          *(v76 - 9) = 0;
          *(v76 - 11) = 0;
          v77 = v73[v74 - 8];
          *(_QWORD *)(v75 - 48) = 0;
          *(_QWORD *)(v75 - 40) = 0;
          *(_QWORD *)(v75 - 64) = v77;
          *(_QWORD *)(v75 - 56) = 0;
          *(_OWORD *)(v75 - 56) = *(_OWORD *)&v73[v74 - 7];
          *(_QWORD *)(v75 - 40) = v73[v74 - 5];
          *(v76 - 7) = 0;
          *(v76 - 6) = 0;
          *(v76 - 5) = 0;
          *(_QWORD *)(v75 - 24) = 0;
          *(_QWORD *)(v75 - 16) = 0;
          *(_QWORD *)(v75 - 32) = 0;
          *(_OWORD *)(v75 - 32) = *(_OWORD *)&v73[v74 - 4];
          *(_QWORD *)(v75 - 16) = v73[v74 - 2];
          *(v76 - 4) = 0;
          *(v76 - 3) = 0;
          *(v76 - 2) = 0;
          *(_WORD *)(v75 - 8) = v73[v74 - 1];
          v74 -= 14;
        }
        while (&v73[v74] != v72);
        v73 = *(void ***)(a1 + 64);
        v78 = *(void ***)(a1 + 72);
        *(_QWORD *)(a1 + 64) = v71 + v74 * 8;
        *(_QWORD *)(a1 + 72) = v66;
        *(_QWORD *)(a1 + 80) = v165;
        if (v78 != v73)
        {
          do
          {
            v80 = *(v78 - 4);
            if (v80)
            {
              *(v78 - 3) = v80;
              operator delete(v80);
            }
            v81 = *(v78 - 7);
            if (v81)
            {
              *(v78 - 6) = v81;
              operator delete(v81);
            }
            v82 = *(v78 - 11);
            if (v82)
            {
              *(v78 - 10) = v82;
              operator delete(v82);
            }
            v83 = v78 - 14;
            v84 = (char *)*(v78 - 14);
            if (v84)
            {
              v85 = (char *)*(v78 - 13);
              v79 = *(v78 - 14);
              if (v85 != v84)
              {
                do
                {
                  v86 = (void *)*((_QWORD *)v85 - 3);
                  if (v86)
                  {
                    *((_QWORD *)v85 - 2) = v86;
                    operator delete(v86);
                  }
                  v87 = (void *)*((_QWORD *)v85 - 6);
                  if (v87)
                  {
                    *((_QWORD *)v85 - 5) = v87;
                    operator delete(v87);
                  }
                  v85 -= 112;
                }
                while (v85 != v84);
                v79 = *v83;
              }
              *(v78 - 13) = v84;
              operator delete(v79);
            }
            v78 -= 14;
          }
          while (v83 != v73);
        }
      }
      if (v73)
        operator delete(v73);
      *(_QWORD *)(a1 + 72) = v66;
      v64 += 14;
    }
    while (v64 != v63);
  }
LABEL_109:
  if (v153 != (_QWORD *)(a2 + 88))
    sub_20E86811C(v153, *(char **)(a2 + 88), *(char **)(a2 + 96), (uint64_t)(*(_QWORD *)(a2 + 96) - *(_QWORD *)(a2 + 88)) >> 3);
  v88 = *(_QWORD *)(a2 + 120) - *(_QWORD *)(a2 + 112);
  v89 = 0xCBEEA4E1A08AD8F3 * (v88 >> 3);
  v90 = *(_BYTE **)(a1 + 112);
  if (0xCBEEA4E1A08AD8F3 * ((uint64_t)(*(_QWORD *)(a1 + 128) - (_QWORD)v90) >> 3) < v89)
  {
    if (v89 > 0x8AD8F2FBA93868)
      sub_20E92CED8();
    v91 = *(_BYTE **)(a1 + 120);
    v92 = (char *)operator new(v88);
    v93 = &v92[472 * v89];
    v94 = &v92[v91 - v90];
    v95 = v94;
    if (v91 != v90)
    {
      v95 = &v92[v91 - v90];
      do
      {
        v91 -= 472;
        v95 -= 472;
        memcpy(v95, v91, 0x1D4uLL);
      }
      while (v91 != v90);
    }
    *(_QWORD *)(a1 + 112) = v95;
    *(_QWORD *)(a1 + 120) = v94;
    *(_QWORD *)(a1 + 128) = v93;
    if (v90)
      operator delete(v90);
  }
  v96 = *(_QWORD *)(a2 + 112);
  v97 = *(_QWORD *)(a2 + 120);
  v98 = (_QWORD *)a1;
  if (v96 != v97)
  {
    v99 = *(char **)(a1 + 120);
    do
    {
      while (1)
      {
        v106 = v98[16];
        if ((unint64_t)v99 >= v106)
          break;
        *(_QWORD *)v99 = *(_QWORD *)v96;
        *((_DWORD *)v99 + 2) = *(_DWORD *)(v96 + 8);
        *((_DWORD *)v99 + 4) = *(_DWORD *)(v96 + 16);
        *((_QWORD *)v99 + 3) = *(_QWORD *)(v96 + 24);
        *((_DWORD *)v99 + 8) = *(_DWORD *)(v96 + 32);
        *((_DWORD *)v99 + 10) = *(_DWORD *)(v96 + 40);
        v100 = *(_OWORD *)(v96 + 160);
        v102 = *(_OWORD *)(v96 + 112);
        v101 = *(_OWORD *)(v96 + 128);
        *((_OWORD *)v99 + 9) = *(_OWORD *)(v96 + 144);
        *((_OWORD *)v99 + 10) = v100;
        *((_OWORD *)v99 + 7) = v102;
        *((_OWORD *)v99 + 8) = v101;
        v103 = *(_OWORD *)(v96 + 64);
        v105 = *(_OWORD *)(v96 + 80);
        v104 = *(_OWORD *)(v96 + 96);
        *((_OWORD *)v99 + 3) = *(_OWORD *)(v96 + 48);
        *((_OWORD *)v99 + 4) = v103;
        *((_OWORD *)v99 + 5) = v105;
        *((_OWORD *)v99 + 6) = v104;
        memcpy(v99 + 176, (const void *)(v96 + 176), 0x124uLL);
        v99 += 472;
        v98[15] = v99;
        v98[15] = v99;
        v96 += 472;
        if (v96 == v97)
          goto LABEL_138;
      }
      v107 = 0xCBEEA4E1A08AD8F3 * ((uint64_t)&v99[-*v157] >> 3);
      v108 = v107 + 1;
      if (v107 + 1 > 0x8AD8F2FBA93868)
        sub_20E92CED8();
      v109 = 0xCBEEA4E1A08AD8F3 * ((uint64_t)(v106 - *v157) >> 3);
      if (2 * v109 > v108)
        v108 = 2 * v109;
      if (v109 >= 0x456C797DD49C34)
        v110 = 0x8AD8F2FBA93868;
      else
        v110 = v108;
      if (v110)
      {
        if (v110 > 0x8AD8F2FBA93868)
          sub_20E877A38();
        v111 = (char *)operator new(472 * v110);
      }
      else
      {
        v111 = 0;
      }
      v112 = &v111[472 * v107];
      *(_QWORD *)v112 = *(_QWORD *)v96;
      *((_DWORD *)v112 + 2) = *(_DWORD *)(v96 + 8);
      *((_DWORD *)v112 + 4) = *(_DWORD *)(v96 + 16);
      *((_QWORD *)v112 + 3) = *(_QWORD *)(v96 + 24);
      *((_DWORD *)v112 + 8) = *(_DWORD *)(v96 + 32);
      *((_DWORD *)v112 + 10) = *(_DWORD *)(v96 + 40);
      v113 = *(_OWORD *)(v96 + 160);
      v115 = *(_OWORD *)(v96 + 112);
      v114 = *(_OWORD *)(v96 + 128);
      *((_OWORD *)v112 + 9) = *(_OWORD *)(v96 + 144);
      *((_OWORD *)v112 + 10) = v113;
      *((_OWORD *)v112 + 7) = v115;
      *((_OWORD *)v112 + 8) = v114;
      v116 = *(_OWORD *)(v96 + 64);
      v118 = *(_OWORD *)(v96 + 80);
      v117 = *(_OWORD *)(v96 + 96);
      *((_OWORD *)v112 + 3) = *(_OWORD *)(v96 + 48);
      *((_OWORD *)v112 + 4) = v116;
      *((_OWORD *)v112 + 5) = v118;
      *((_OWORD *)v112 + 6) = v117;
      memcpy(v112 + 176, (const void *)(v96 + 176), 0x124uLL);
      v119 = *(char **)(a1 + 112);
      v120 = *(char **)(a1 + 120);
      v121 = v112;
      if (v120 != v119)
      {
        do
        {
          v120 -= 472;
          v121 -= 472;
          memcpy(v121, v120, 0x1D4uLL);
        }
        while (v120 != v119);
        v120 = (char *)*v157;
      }
      v122 = &v111[472 * v110];
      v99 = v112 + 472;
      v98 = (_QWORD *)a1;
      *(_QWORD *)(a1 + 112) = v121;
      *(_QWORD *)(a1 + 120) = v99;
      *(_QWORD *)(a1 + 128) = v122;
      if (v120)
        operator delete(v120);
      *(_QWORD *)(a1 + 120) = v99;
      v96 += 472;
    }
    while (v96 != v97);
  }
LABEL_138:
  v124 = *(_QWORD *)(a2 + 136);
  v123 = *(_QWORD *)(a2 + 144);
  v125 = v123 - v124;
  v126 = v98 + 19;
  v127 = (char *)v98[19];
  v128 = 0x6DB6DB6DB6DB6DB7 * ((v123 - v124) >> 3);
  v129 = v98[17];
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v127[-v129] >> 3) < v128)
  {
    if (v128 > 0x492492492492492)
      sub_20EABADD4();
    v130 = *(_QWORD *)(a1 + 144);
    v166 = v98 + 19;
    v131 = (char *)operator new(v125);
    v132 = &v131[v130 - v129];
    if (v130 == v129)
    {
      v137 = vdupq_n_s64(v129);
      v138 = &v131[v130 - v129];
      v134 = (_QWORD *)a1;
    }
    else
    {
      v133 = 0;
      v134 = (_QWORD *)a1;
      do
      {
        v135 = &v132[v133];
        v136 = v130 + v133;
        *(v135 - 56) = *(_BYTE *)(v130 + v133 - 56);
        *((_OWORD *)v135 - 3) = *(_OWORD *)(v130 + v133 - 48);
        *((_QWORD *)v135 - 4) = *(_QWORD *)(v130 + v133 - 32);
        *(_QWORD *)(v136 - 48) = 0;
        *(_QWORD *)(v136 - 40) = 0;
        *(_QWORD *)(v136 - 32) = 0;
        *(_OWORD *)(v135 - 24) = *(_OWORD *)(v130 + v133 - 24);
        *((_QWORD *)v135 - 1) = *(_QWORD *)(v130 + v133 - 8);
        *(_QWORD *)(v136 - 24) = 0;
        *(_QWORD *)(v136 - 16) = 0;
        *(_QWORD *)(v136 - 8) = 0;
        v133 -= 56;
      }
      while (v130 + v133 != v129);
      v137 = *v158;
      v127 = (char *)*v126;
      v138 = &v132[v133];
    }
    v134[17] = v138;
    v134[18] = v132;
    v164 = v137;
    v134[19] = &v131[56 * v128];
    v165 = v127;
    __p = (void *)v137.i64[0];
    sub_20EACA068((uint64_t)&__p, v137.i64[0]);
    if (__p)
      operator delete(__p);
    v124 = *(_QWORD *)(a2 + 136);
    v123 = *(_QWORD *)(a2 + 144);
  }
  if (v124 != v123)
  {
    v139 = *(_QWORD *)(a1 + 144);
    do
    {
      while (v139 < *v126)
      {
        sub_20FCC3D40(v139, v124);
        v139 += 56;
        *(_QWORD *)(a1 + 144) = v139;
        *(_QWORD *)(a1 + 144) = v139;
        v124 += 56;
        if (v124 == v123)
          goto LABEL_173;
      }
      v140 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v139 - v158->i64[0]) >> 3);
      v141 = v140 + 1;
      if ((unint64_t)(v140 + 1) > 0x492492492492492)
        sub_20EABADD4();
      if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*v126 - v158->i64[0]) >> 3) > v141)
        v141 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*v126 - v158->i64[0]) >> 3);
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*v126 - v158->i64[0]) >> 3)) >= 0x249249249249249)
        v142 = 0x492492492492492;
      else
        v142 = v141;
      v166 = v126;
      if (v142)
      {
        if (v142 > 0x492492492492492)
          sub_20E877A38();
        v143 = (char *)operator new(56 * v142);
      }
      else
      {
        v143 = 0;
      }
      __p = v143;
      v164.i64[0] = (uint64_t)&v143[56 * v140];
      v164.i64[1] = v164.i64[0];
      v165 = &v143[56 * v142];
      sub_20FCC3D40(v164.i64[0], v124);
      v144 = v164.i64[0];
      v139 = v164.i64[1] + 56;
      v164.i64[1] += 56;
      v146 = *(_QWORD *)(a1 + 136);
      v145 = *(_QWORD *)(a1 + 144);
      if (v145 == v146)
      {
        v150 = vdupq_n_s64(v145);
      }
      else
      {
        v147 = 0;
        do
        {
          v148 = v144 + v147;
          v149 = v145 + v147;
          *(_BYTE *)(v148 - 56) = *(_BYTE *)(v145 + v147 - 56);
          *(_QWORD *)(v148 - 40) = 0;
          *(_QWORD *)(v148 - 32) = 0;
          *(_QWORD *)(v148 - 48) = 0;
          *(_OWORD *)(v148 - 48) = *(_OWORD *)(v145 + v147 - 48);
          *(_QWORD *)(v148 - 32) = *(_QWORD *)(v145 + v147 - 32);
          *(_QWORD *)(v149 - 48) = 0;
          *(_QWORD *)(v149 - 40) = 0;
          *(_QWORD *)(v149 - 32) = 0;
          *(_QWORD *)(v148 - 24) = 0;
          *(_QWORD *)(v148 - 16) = 0;
          *(_QWORD *)(v148 - 8) = 0;
          *(_OWORD *)(v148 - 24) = *(_OWORD *)(v145 + v147 - 24);
          *(_QWORD *)(v148 - 8) = *(_QWORD *)(v145 + v147 - 8);
          *(_QWORD *)(v149 - 24) = 0;
          *(_QWORD *)(v149 - 16) = 0;
          *(_QWORD *)(v149 - 8) = 0;
          v147 -= 56;
        }
        while (v145 + v147 != v146);
        v150 = *v158;
        v139 = v164.u64[1];
        v144 += v147;
      }
      *(_QWORD *)(a1 + 136) = v144;
      *(_QWORD *)(a1 + 144) = v139;
      v164 = v150;
      v151 = *(char **)(a1 + 152);
      *(_QWORD *)(a1 + 152) = v165;
      v165 = v151;
      __p = (void *)v150.i64[0];
      sub_20EACA068((uint64_t)&__p, v150.i64[0]);
      if (__p)
        operator delete(__p);
      *(_QWORD *)(a1 + 144) = v139;
      v124 += 56;
    }
    while (v124 != v123);
  }
LABEL_173:
  result = a1;
  *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
  return result;
}

void sub_20F461FA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, void **a12, void **a13, void **a14, uint64_t *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22)
{
  void *v23;
  void *v24;

  sub_20F462138(a15);
  v23 = *a14;
  if (*a14)
  {
    *(_QWORD *)(a19 + 120) = v23;
    operator delete(v23);
    v24 = *a10;
    if (!*a10)
    {
LABEL_3:
      sub_20EAB9BFC(a13);
      sub_20E9DD680(a12);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v24 = *a10;
    if (!*a10)
      goto LABEL_3;
  }
  *(_QWORD *)(a19 + 96) = v24;
  operator delete(v24);
  sub_20EAB9BFC(a13);
  sub_20E9DD680(a12);
  _Unwind_Resume(a1);
}

uint64_t *sub_20F462138(uint64_t *a1)
{
  if (*a1)
  {
    sub_20E991630((uint64_t)a1, *a1);
    operator delete((void *)*a1);
  }
  return a1;
}

void sub_20F462170(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t **v7;
  _QWORD *v8;
  uint64_t *v9;
  int64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  _QWORD *v26;
  char *v27;
  void *v28;
  void **v29;
  int64_t v30;
  unint64_t v31;
  void **v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  void **v38;
  void **v39;
  uint64_t **v40;
  uint64_t **i;
  void *v42;
  _QWORD *v43;
  void **v44;
  unint64_t v45;
  void **v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  void *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  void **v59;
  void **v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void **v65;
  char *v66;
  char *v67;
  void *v68;
  void *v69;
  void *v70;
  char *v71;
  char *v72;
  void *v73;
  void *v74;
  _QWORD *v75;
  char **v76;
  _BYTE *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  _BYTE *v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  __int128 v87;
  __int128 v88;
  char *v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  char v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  unint64_t v121;
  uint64_t j;
  uint64_t v123;
  size_t v124;
  unint64_t v125;
  void *v126;
  void **v127;
  uint64_t v128;
  char *v129;
  char *v130;
  char *v131;
  uint64_t v132;
  _QWORD *v133;
  char *v134;
  uint64_t v135;
  int64x2_t v136;
  char *v137;
  void *v138;
  void *v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  int64x2_t v150;
  char *v151;
  char *v152;
  void *v153;
  char *v154;
  char *v155;
  void *v156;
  void *v157;
  void *v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  void *v162;
  void *v163;
  char **v165;
  void ***v166;
  uint64_t **v167;
  int64x2_t *v168;
  _QWORD *v169;
  void *__p[3];
  void *v171[3];
  _BYTE v172[32];
  void *v173[2];
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  int v197;
  char v198;
  void *v199;
  int64x2_t v200;
  void *v201;
  _QWORD *v202;

  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 146) = 0u;
  *(_OWORD *)(a2 + 136) = 0u;
  *(_OWORD *)(a2 + 120) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_WORD *)a2 = *(_WORD *)a1;
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(a1 + 4);
  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 16) = v3;
  *(_DWORD *)(a2 + 24) = v4;
  v5 = *(_QWORD *)(a1 + 32);
  v165 = (char **)(a2 + 40);
  v6 = (uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 3;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_QWORD *)(a2 + 32) = v5;
  sub_20ED9C3C4((uint64_t)v165, 0xAAAAAAAAAAAAAAABLL * v6);
  v7 = *(uint64_t ***)(a1 + 40);
  v167 = *(uint64_t ***)(a1 + 48);
  v169 = (_QWORD *)a2;
  v8 = (_QWORD *)a2;
  if (v7 != v167)
  {
    while (1)
    {
      memset(__p, 0, sizeof(__p));
      v9 = v7[1];
      v10 = (char *)v9 - (char *)*v7;
      if (v9 != *v7)
        break;
LABEL_29:
      v26 = (_QWORD *)v8[6];
      if ((unint64_t)v26 < v8[7])
      {
        *v26 = 0;
        v26[1] = 0;
        v26[2] = 0;
        *(_OWORD *)v26 = *(_OWORD *)__p;
        v26[2] = __p[2];
        v8[6] = v26 + 3;
      }
      else
      {
        v27 = sub_20ED9C854(v165, (uint64_t)__p);
        v28 = __p[0];
        v8[6] = v27;
        if (v28)
        {
          __p[1] = v28;
          operator delete(v28);
        }
      }
      v7 += 3;
      if (v7 == v167)
        goto LABEL_32;
    }
    v11 = 0xAAAAAAAAAAAAAAABLL * (v10 >> 3);
    if (v11 > 0xAAAAAAAAAAAAAAALL)
      sub_20E867F44();
    v12 = operator new(v10);
    __p[0] = v12;
    __p[1] = v12;
    __p[2] = &v12[3 * v11];
    v14 = *v7;
    v13 = v7[1];
    while (1)
    {
      if (v14 == v13)
        goto LABEL_29;
      v16 = *v14;
      v17 = *((unsigned int *)v14 + 2);
      v18 = *((_DWORD *)v14 + 4);
      if (v12 < __p[2])
      {
        *v12 = v16;
        v12[1] = v17;
        v15 = v12 + 3;
        *((_DWORD *)v12 + 4) = v18;
        goto LABEL_9;
      }
      v19 = __p[0];
      v20 = 0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)__p[0]) >> 3);
      v21 = v20 + 1;
      if (v20 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20E867F44();
      if (0x5555555555555556 * (((char *)__p[2] - (char *)__p[0]) >> 3) > v21)
        v21 = 0x5555555555555556 * (((char *)__p[2] - (char *)__p[0]) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)__p[2] - (char *)__p[0]) >> 3) >= 0x555555555555555)
        v22 = 0xAAAAAAAAAAAAAAALL;
      else
        v22 = v21;
      if (v22)
      {
        if (v22 > 0xAAAAAAAAAAAAAAALL)
          sub_20E877A38();
        v23 = (char *)operator new(24 * v22);
      }
      else
      {
        v23 = 0;
      }
      v24 = &v23[24 * v20];
      *(_QWORD *)v24 = v16;
      *((_QWORD *)v24 + 1) = v17;
      *((_DWORD *)v24 + 4) = v18;
      v15 = v24 + 24;
      if (v12 == v19)
      {
        __p[0] = &v23[24 * v20];
        __p[1] = v24 + 24;
        __p[2] = &v23[24 * v22];
      }
      else
      {
        do
        {
          v25 = *(_OWORD *)(v12 - 3);
          *((_DWORD *)v24 - 2) = *((_DWORD *)v12 - 2);
          *(_OWORD *)(v24 - 24) = v25;
          v24 -= 24;
          v12 -= 3;
        }
        while (v12 != v19);
        v12 = __p[0];
        __p[0] = v24;
        __p[1] = v15;
        __p[2] = &v23[24 * v22];
        if (!v12)
          goto LABEL_28;
      }
      operator delete(v12);
LABEL_28:
      v8 = v169;
LABEL_9:
      __p[1] = v15;
      v14 += 3;
      v12 = v15;
    }
  }
LABEL_32:
  v29 = (void **)v8[8];
  v30 = *(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64);
  v31 = 0x6DB6DB6DB6DB6DB7 * (v30 >> 4);
  v166 = (void ***)(v8 + 8);
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v8[10] - (_QWORD)v29) >> 4) < v31)
  {
    if (v31 > 0x249249249249249)
      sub_20E867F44();
    v32 = (void **)v8[9];
    v33 = (char *)operator new(v30);
    v34 = &v33[112 * v31];
    v35 = &v33[(char *)v32 - (char *)v29];
    if (v32 == v29)
    {
      v8 = v169;
      v169[8] = v35;
      v169[9] = v35;
      v169[10] = v34;
      if (v29)
LABEL_40:
        operator delete(v29);
    }
    else
    {
      v36 = 0;
      v8 = v169;
      do
      {
        v37 = &v35[v36 * 8];
        v38 = &v32[v36];
        *((_OWORD *)v37 - 7) = *(_OWORD *)&v32[v36 - 14];
        *((_QWORD *)v37 - 12) = v32[v36 - 12];
        *(v38 - 14) = 0;
        *(v38 - 13) = 0;
        *(v38 - 12) = 0;
        *(_OWORD *)(v37 - 88) = *(_OWORD *)&v32[v36 - 11];
        *((_QWORD *)v37 - 9) = v32[v36 - 9];
        *(v38 - 10) = 0;
        *(v38 - 9) = 0;
        *(v38 - 11) = 0;
        *((_QWORD *)v37 - 8) = v32[v36 - 8];
        *(_OWORD *)(v37 - 56) = *(_OWORD *)&v32[v36 - 7];
        *((_QWORD *)v37 - 5) = v32[v36 - 5];
        *(v38 - 7) = 0;
        *(v38 - 6) = 0;
        *(v38 - 5) = 0;
        *((_OWORD *)v37 - 2) = *(_OWORD *)&v32[v36 - 4];
        *((_QWORD *)v37 - 2) = v32[v36 - 2];
        *(v38 - 4) = 0;
        *(v38 - 3) = 0;
        *(v38 - 2) = 0;
        *((_WORD *)v37 - 4) = v32[v36 - 1];
        v36 -= 14;
      }
      while (&v32[v36] != v29);
      v29 = (void **)v169[8];
      v39 = (void **)v169[9];
      v169[8] = &v35[v36 * 8];
      v169[9] = v35;
      for (v169[10] = v34; v39 != v29; v39 = sub_20E991750(v39 - 14))
        ;
      if (v29)
        goto LABEL_40;
    }
  }
  v40 = *(uint64_t ***)(a1 + 64);
  for (i = *(uint64_t ***)(a1 + 72); v40 != i; v40 += 14)
  {
    sub_20FCC3814(v40, __p);
    v43 = v8;
    v44 = (void **)v8[9];
    v45 = v43[10];
    if ((unint64_t)v44 >= v45)
    {
      v46 = *v166;
      v47 = 0x6DB6DB6DB6DB6DB7 * (((char *)v44 - (char *)*v166) >> 4);
      v48 = v47 + 1;
      if ((unint64_t)(v47 + 1) > 0x249249249249249)
        sub_20E867F44();
      v49 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v45 - (_QWORD)v46) >> 4);
      if (2 * v49 > v48)
        v48 = 2 * v49;
      if (v49 >= 0x124924924924924)
        v50 = 0x249249249249249;
      else
        v50 = v48;
      if (v50 > 0x249249249249249)
        sub_20E877A38();
      v51 = (char *)operator new(112 * v50);
      v52 = &v51[112 * v47];
      *(_OWORD *)v52 = *(_OWORD *)__p;
      *((void **)v52 + 2) = __p[2];
      v53 = &v51[112 * v50];
      memset(__p, 0, sizeof(__p));
      *(_OWORD *)(v52 + 24) = *(_OWORD *)v171;
      v54 = v171[2];
      v55 = *(_QWORD *)v172;
      memset(v171, 0, sizeof(v171));
      *((_QWORD *)v52 + 5) = v54;
      *((_QWORD *)v52 + 6) = v55;
      *((_QWORD *)v52 + 8) = 0;
      *((_QWORD *)v52 + 9) = 0;
      *(_OWORD *)(v52 + 56) = *(_OWORD *)&v172[8];
      *((_QWORD *)v52 + 9) = *(_QWORD *)&v172[24];
      memset(&v172[8], 0, 24);
      *((_QWORD *)v52 + 11) = 0;
      *((_QWORD *)v52 + 12) = 0;
      *((_OWORD *)v52 + 5) = *(_OWORD *)v173;
      *((_QWORD *)v52 + 12) = v174;
      v173[0] = 0;
      v173[1] = 0;
      *((_WORD *)v52 + 52) = WORD4(v174);
      v56 = v52 + 112;
      *(_QWORD *)&v174 = 0;
      if (v44 == v46)
      {
        v169[8] = v52;
        v169[9] = v56;
        v169[10] = v53;
      }
      else
      {
        v57 = 0;
        do
        {
          v58 = &v52[v57 * 8];
          v59 = &v44[v57];
          *((_OWORD *)v58 - 7) = *(_OWORD *)&v44[v57 - 14];
          *((_QWORD *)v58 - 12) = v44[v57 - 12];
          *(v59 - 14) = 0;
          *(v59 - 13) = 0;
          *(v59 - 12) = 0;
          *(_OWORD *)(v58 - 88) = *(_OWORD *)&v44[v57 - 11];
          *((_QWORD *)v58 - 9) = v44[v57 - 9];
          *(v59 - 10) = 0;
          *(v59 - 9) = 0;
          *(v59 - 11) = 0;
          *((_QWORD *)v58 - 8) = v44[v57 - 8];
          *(_OWORD *)(v58 - 56) = *(_OWORD *)&v44[v57 - 7];
          *((_QWORD *)v58 - 5) = v44[v57 - 5];
          *(v59 - 7) = 0;
          *(v59 - 6) = 0;
          *(v59 - 5) = 0;
          *((_OWORD *)v58 - 2) = *(_OWORD *)&v44[v57 - 4];
          *((_QWORD *)v58 - 2) = v44[v57 - 2];
          *(v59 - 4) = 0;
          *(v59 - 3) = 0;
          *(v59 - 2) = 0;
          *((_WORD *)v58 - 4) = v44[v57 - 1];
          v57 -= 14;
        }
        while (&v44[v57] != v46);
        v44 = (void **)v169[8];
        v60 = (void **)v169[9];
        v169[8] = &v52[v57 * 8];
        v169[9] = v56;
        v169[10] = v53;
        if (v60 != v44)
        {
          do
          {
            v62 = *(v60 - 4);
            if (v62)
            {
              *(v60 - 3) = v62;
              operator delete(v62);
            }
            v63 = *(v60 - 7);
            if (v63)
            {
              *(v60 - 6) = v63;
              operator delete(v63);
            }
            v64 = *(v60 - 11);
            if (v64)
            {
              *(v60 - 10) = v64;
              operator delete(v64);
            }
            v65 = v60 - 14;
            v66 = (char *)*(v60 - 14);
            if (v66)
            {
              v67 = (char *)*(v60 - 13);
              v61 = *(v60 - 14);
              if (v67 != v66)
              {
                do
                {
                  v68 = (void *)*((_QWORD *)v67 - 3);
                  if (v68)
                  {
                    *((_QWORD *)v67 - 2) = v68;
                    operator delete(v68);
                  }
                  v69 = (void *)*((_QWORD *)v67 - 6);
                  if (v69)
                  {
                    *((_QWORD *)v67 - 5) = v69;
                    operator delete(v69);
                  }
                  v67 -= 112;
                }
                while (v67 != v66);
                v61 = *v65;
              }
              *(v60 - 13) = v66;
              operator delete(v61);
            }
            v60 -= 14;
          }
          while (v65 != v44);
        }
      }
      if (v44)
        operator delete(v44);
      v70 = v173[0];
      v8 = v169;
      v169[9] = v56;
      if (v70)
      {
        v173[1] = v70;
        operator delete(v70);
      }
    }
    else
    {
      v44[2] = 0;
      v44[3] = 0;
      *v44 = 0;
      v44[1] = 0;
      *(_OWORD *)v44 = *(_OWORD *)__p;
      v44[2] = __p[2];
      memset(__p, 0, sizeof(__p));
      v44[4] = 0;
      v44[5] = 0;
      *(_OWORD *)(v44 + 3) = *(_OWORD *)v171;
      v44[5] = v171[2];
      memset(v171, 0, sizeof(v171));
      v44[6] = *(void **)v172;
      v44[7] = 0;
      v44[8] = 0;
      v44[9] = 0;
      *(_OWORD *)(v44 + 7) = *(_OWORD *)&v172[8];
      *(_QWORD *)&v172[8] = 0;
      *(_QWORD *)&v172[16] = 0;
      v44[9] = *(void **)&v172[24];
      v44[10] = 0;
      *(_QWORD *)&v172[24] = 0;
      v44[11] = 0;
      v44[12] = 0;
      *((_OWORD *)v44 + 5) = *(_OWORD *)v173;
      v44[12] = (void *)v174;
      v173[0] = 0;
      v173[1] = 0;
      *(_QWORD *)&v174 = 0;
      *((_WORD *)v44 + 52) = WORD4(v174);
      v43[9] = v44 + 14;
      v8 = v43;
    }
    if (*(_QWORD *)&v172[8])
    {
      *(_QWORD *)&v172[16] = *(_QWORD *)&v172[8];
      operator delete(*(void **)&v172[8]);
    }
    if (v171[0])
    {
      v171[1] = v171[0];
      operator delete(v171[0]);
    }
    v71 = (char *)__p[0];
    if (__p[0])
    {
      v72 = (char *)__p[1];
      v42 = __p[0];
      if (__p[1] != __p[0])
      {
        do
        {
          v73 = (void *)*((_QWORD *)v72 - 3);
          if (v73)
          {
            *((_QWORD *)v72 - 2) = v73;
            operator delete(v73);
          }
          v74 = (void *)*((_QWORD *)v72 - 6);
          if (v74)
          {
            *((_QWORD *)v72 - 5) = v74;
            operator delete(v74);
          }
          v72 -= 112;
        }
        while (v72 != v71);
        v42 = __p[0];
      }
      __p[1] = v71;
      operator delete(v42);
    }
  }
  v75 = v8;
  if (v8 != (_QWORD *)a1)
    sub_20E86811C(v8 + 11, *(char **)(a1 + 88), *(char **)(a1 + 96), (uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 3);
  v76 = (char **)(v8 + 14);
  v77 = (_BYTE *)v8[14];
  v79 = *(_QWORD *)(a1 + 112);
  v78 = *(_QWORD *)(a1 + 120);
  v80 = 0xCBEEA4E1A08AD8F3 * ((v78 - v79) >> 3);
  if (0xCBEEA4E1A08AD8F3 * ((uint64_t)(v75[16] - (_QWORD)v77) >> 3) < v80)
  {
    if (v80 >= 0x8AD8F2FBA93869)
      sub_20E867F44();
    v81 = (_BYTE *)v169[15];
    v82 = (char *)operator new(v78 - v79);
    v83 = &v82[8 * ((v78 - v79) >> 3)];
    v84 = &v82[v81 - v77];
    v85 = v84;
    if (v81 != v77)
    {
      v86 = &v82[v81 - v77];
      do
      {
        v85 = v86 - 472;
        v87 = *(_OWORD *)(v81 - 472);
        v88 = *(_OWORD *)(v81 - 456);
        *(_OWORD *)(v85 + 28) = *(_OWORD *)(v81 - 444);
        *(_OWORD *)v85 = v87;
        *((_OWORD *)v85 + 1) = v88;
        v89 = v86 - 424;
        v90 = *(_OWORD *)(v81 - 312);
        v92 = *(_OWORD *)(v81 - 360);
        v91 = *(_OWORD *)(v81 - 344);
        *((_OWORD *)v89 + 6) = *(_OWORD *)(v81 - 328);
        *((_OWORD *)v89 + 7) = v90;
        *((_OWORD *)v89 + 4) = v92;
        *((_OWORD *)v89 + 5) = v91;
        v93 = *(_OWORD *)(v81 - 424);
        v94 = *(_OWORD *)(v81 - 408);
        v95 = *(_OWORD *)(v81 - 376);
        *((_OWORD *)v89 + 2) = *(_OWORD *)(v81 - 392);
        *((_OWORD *)v89 + 3) = v95;
        *(_OWORD *)v89 = v93;
        *((_OWORD *)v89 + 1) = v94;
        memcpy(v86 - 296, v81 - 296, 0x120uLL);
        v96 = *(v81 - 4);
        *((_DWORD *)v86 - 2) = *((_DWORD *)v81 - 2);
        *(v86 - 4) = v96;
        v81 -= 472;
        v86 -= 472;
      }
      while (v81 != v77);
    }
    v169[14] = v85;
    v169[15] = v84;
    v169[16] = v83;
    if (v77)
    {
      operator delete(v77);
      v79 = *(_QWORD *)(a1 + 112);
      v78 = *(_QWORD *)(a1 + 120);
    }
  }
  while (v79 != v78)
  {
    __p[1] = 0;
    __p[0] = *(void **)v79;
    LODWORD(__p[1]) = *(_DWORD *)(v79 + 8);
    LODWORD(__p[2]) = *(_DWORD *)(v79 + 16);
    v171[1] = 0;
    v171[0] = *(void **)(v79 + 24);
    LODWORD(v171[1]) = *(_DWORD *)(v79 + 32);
    LODWORD(v171[2]) = *(_DWORD *)(v79 + 40);
    v98 = *(_OWORD *)(v79 + 48);
    v97 = *(_OWORD *)(v79 + 64);
    v100 = *(_OWORD *)(v79 + 80);
    v99 = *(_OWORD *)(v79 + 96);
    v102 = *(_OWORD *)(v79 + 112);
    v101 = *(_OWORD *)(v79 + 128);
    v103 = *(_OWORD *)(v79 + 160);
    v177 = *(_OWORD *)(v79 + 144);
    v178 = v103;
    v175 = v102;
    v176 = v101;
    *(_OWORD *)v173 = v100;
    v174 = v99;
    *(_OWORD *)v172 = v98;
    *(_OWORD *)&v172[16] = v97;
    v105 = *(_OWORD *)(v79 + 432);
    v104 = *(_OWORD *)(v79 + 448);
    v107 = *(_OWORD *)(v79 + 400);
    v106 = *(_OWORD *)(v79 + 416);
    v109 = *(_OWORD *)(v79 + 368);
    v108 = *(_OWORD *)(v79 + 384);
    v111 = *(_OWORD *)(v79 + 336);
    v110 = *(_OWORD *)(v79 + 352);
    v113 = *(_OWORD *)(v79 + 304);
    v112 = *(_OWORD *)(v79 + 320);
    v115 = *(_OWORD *)(v79 + 272);
    v114 = *(_OWORD *)(v79 + 288);
    v117 = *(_OWORD *)(v79 + 240);
    v116 = *(_OWORD *)(v79 + 256);
    v119 = *(_OWORD *)(v79 + 208);
    v118 = *(_OWORD *)(v79 + 224);
    v120 = *(_OWORD *)(v79 + 192);
    v179 = *(_OWORD *)(v79 + 176);
    v180 = v120;
    v181 = v119;
    v182 = v118;
    v183 = v117;
    v184 = v116;
    v185 = v115;
    v186 = v114;
    v187 = v113;
    v188 = v112;
    v189 = v111;
    v190 = v110;
    v191 = v109;
    v192 = v108;
    v193 = v107;
    v194 = v106;
    v195 = v105;
    v196 = v104;
    v197 = *(_DWORD *)(v79 + 464);
    v198 = 0;
    sub_20F235770(v76, (__int128 *)__p);
    v79 += 472;
  }
  v121 = v169[17];
  v123 = *(_QWORD *)(a1 + 136);
  j = *(_QWORD *)(a1 + 144);
  v124 = j - v123;
  v125 = 0x6DB6DB6DB6DB6DB7 * ((j - v123) >> 3);
  v168 = (int64x2_t *)(v169 + 17);
  v127 = (void **)(v169 + 19);
  v126 = (void *)v169[19];
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)((uint64_t)v126 - v121) >> 3) >= v125)
  {
    v133 = v169;
    if (v123 == j)
      goto LABEL_161;
    goto LABEL_123;
  }
  if (v125 > 0x492492492492492)
    sub_20E867F44();
  v128 = v169[18];
  v171[1] = v169 + 19;
  v129 = (char *)operator new(v124);
  v130 = &v129[56 * v125];
  v131 = &v129[v128 - v121];
  if (v128 == v121)
  {
    v136 = vdupq_n_s64(v121);
    v137 = &v129[v128 - v121];
    v133 = v169;
  }
  else
  {
    v132 = 0;
    v133 = v169;
    do
    {
      v134 = &v131[v132];
      v135 = v128 + v132;
      *(v134 - 56) = *(_BYTE *)(v128 + v132 - 56);
      *((_OWORD *)v134 - 3) = *(_OWORD *)(v128 + v132 - 48);
      *((_QWORD *)v134 - 4) = *(_QWORD *)(v128 + v132 - 32);
      *(_QWORD *)(v135 - 48) = 0;
      *(_QWORD *)(v135 - 40) = 0;
      *(_QWORD *)(v135 - 32) = 0;
      *(_OWORD *)(v134 - 24) = *(_OWORD *)(v128 + v132 - 24);
      *((_QWORD *)v134 - 1) = *(_QWORD *)(v128 + v132 - 8);
      *(_QWORD *)(v135 - 24) = 0;
      *(_QWORD *)(v135 - 16) = 0;
      *(_QWORD *)(v135 - 8) = 0;
      v132 -= 56;
    }
    while (v128 + v132 != v121);
    v136 = *v168;
    v126 = *v127;
    v137 = &v131[v132];
  }
  v133[17] = v137;
  v133[18] = v131;
  *(int64x2_t *)&__p[1] = v136;
  v133[19] = v130;
  v171[0] = v126;
  __p[0] = (void *)v136.i64[0];
  sub_20EACA068((uint64_t)__p, v136.i64[0]);
  if (__p[0])
    operator delete(__p[0]);
  v123 = *(_QWORD *)(a1 + 136);
  for (j = *(_QWORD *)(a1 + 144); v123 != j; v123 += 56)
  {
LABEL_123:
    sub_20FCC41C8(v123, (uint64_t)__p);
    v140 = v133[18];
    v139 = (void *)v133[19];
    if (v140 >= (unint64_t)v139)
    {
      v141 = v168->i64[0];
      v142 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v140 - v168->i64[0]) >> 3);
      v143 = v142 + 1;
      if ((unint64_t)(v142 + 1) > 0x492492492492492)
        sub_20E867F44();
      if (0xDB6DB6DB6DB6DB6ELL * (((uint64_t)v139 - v141) >> 3) > v143)
        v143 = 0xDB6DB6DB6DB6DB6ELL * (((uint64_t)v139 - v141) >> 3);
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((uint64_t)v139 - v141) >> 3)) >= 0x249249249249249)
        v144 = 0x492492492492492;
      else
        v144 = v143;
      v202 = v169 + 19;
      if (v144 > 0x492492492492492)
        sub_20E877A38();
      v145 = (char *)operator new(56 * v144);
      v146 = &v145[56 * v142];
      *v146 = (char)__p[0];
      *(_OWORD *)(v146 + 8) = *(_OWORD *)&__p[1];
      *((void **)v146 + 3) = v171[0];
      __p[2] = 0;
      v171[0] = 0;
      __p[1] = 0;
      *((_OWORD *)v146 + 2) = *(_OWORD *)&v171[1];
      *((_QWORD *)v146 + 6) = *(_QWORD *)v172;
      v171[2] = 0;
      *(_QWORD *)v172 = 0;
      v171[1] = 0;
      if (v140 == v141)
      {
        v150 = vdupq_n_s64(v140);
        v151 = &v145[56 * v142];
      }
      else
      {
        v147 = 0;
        do
        {
          v148 = &v146[v147];
          v149 = v140 + v147;
          *(v148 - 56) = *(_BYTE *)(v140 + v147 - 56);
          *((_OWORD *)v148 - 3) = *(_OWORD *)(v140 + v147 - 48);
          *((_QWORD *)v148 - 4) = *(_QWORD *)(v140 + v147 - 32);
          *(_QWORD *)(v149 - 48) = 0;
          *(_QWORD *)(v149 - 40) = 0;
          *(_QWORD *)(v149 - 32) = 0;
          *(_OWORD *)(v148 - 24) = *(_OWORD *)(v140 + v147 - 24);
          *((_QWORD *)v148 - 1) = *(_QWORD *)(v140 + v147 - 8);
          *(_QWORD *)(v149 - 24) = 0;
          *(_QWORD *)(v149 - 16) = 0;
          *(_QWORD *)(v149 - 8) = 0;
          v147 -= 56;
        }
        while (v140 + v147 != v141);
        v150 = *v168;
        v139 = *v127;
        v151 = &v146[v147];
      }
      v152 = v146 + 56;
      v133 = v169;
      v169[17] = v151;
      v169[18] = v146 + 56;
      v200 = v150;
      v169[19] = &v145[56 * v144];
      v201 = v139;
      v199 = (void *)v150.i64[0];
      sub_20EACA068((uint64_t)&v199, v150.i64[0]);
      if (v199)
        operator delete(v199);
      v153 = v171[1];
      v169[18] = v152;
      if (v153)
      {
        v171[2] = v153;
        operator delete(v153);
      }
    }
    else
    {
      *(_BYTE *)v140 = __p[0];
      *(_QWORD *)(v140 + 8) = 0;
      *(_QWORD *)(v140 + 16) = 0;
      *(_QWORD *)(v140 + 24) = 0;
      *(_QWORD *)(v140 + 32) = 0;
      *(_OWORD *)(v140 + 8) = *(_OWORD *)&__p[1];
      *(void **)(v140 + 24) = v171[0];
      __p[1] = 0;
      __p[2] = 0;
      v171[0] = 0;
      *(_QWORD *)(v140 + 40) = 0;
      *(_QWORD *)(v140 + 48) = 0;
      *(_OWORD *)(v140 + 32) = *(_OWORD *)&v171[1];
      *(_QWORD *)(v140 + 48) = *(_QWORD *)v172;
      v171[1] = 0;
      v171[2] = 0;
      *(_QWORD *)v172 = 0;
      v133[18] = v140 + 56;
    }
    v154 = (char *)__p[1];
    if (__p[1])
    {
      v155 = (char *)__p[2];
      v138 = __p[1];
      if (__p[2] != __p[1])
      {
        do
        {
          v157 = (void *)*((_QWORD *)v155 - 4);
          if (v157)
          {
            *((_QWORD *)v155 - 3) = v157;
            operator delete(v157);
          }
          v158 = (void *)*((_QWORD *)v155 - 7);
          if (v158)
          {
            *((_QWORD *)v155 - 6) = v158;
            operator delete(v158);
          }
          v159 = (void *)*((_QWORD *)v155 - 11);
          if (v159)
          {
            *((_QWORD *)v155 - 10) = v159;
            operator delete(v159);
          }
          v160 = *((_QWORD *)v155 - 14);
          if (v160)
          {
            v161 = *((_QWORD *)v155 - 13);
            v156 = (void *)*((_QWORD *)v155 - 14);
            if (v161 != v160)
            {
              do
              {
                v162 = *(void **)(v161 - 24);
                if (v162)
                {
                  *(_QWORD *)(v161 - 16) = v162;
                  operator delete(v162);
                }
                v163 = *(void **)(v161 - 48);
                if (v163)
                {
                  *(_QWORD *)(v161 - 40) = v163;
                  operator delete(v163);
                }
                v161 -= 112;
              }
              while (v161 != v160);
              v156 = (void *)*((_QWORD *)v155 - 14);
            }
            *((_QWORD *)v155 - 13) = v160;
            operator delete(v156);
          }
          v155 -= 136;
        }
        while (v155 != v154);
        v138 = __p[1];
      }
      __p[2] = v154;
      operator delete(v138);
    }
  }
LABEL_161:
  *((_WORD *)v133 + 80) = *(_WORD *)(a1 + 160);
}

