uint64_t sub_20FB34340(uint64_t result, uint64_t *a2, _QWORD *a3, unsigned int **a4, unsigned __int8 *a5)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t *v11;
  int v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64x2_t v21;
  int64x2_t *v22;
  __int128 v23;
  uint64_t v24;
  int64x2_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  int64x2_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int8 *v33;
  int64x2_t *v34;
  __int8 *v35;
  int64x2_t *v36;
  __int8 *v37;
  int64x2_t *v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t v41;
  int64x2_t v42;
  int64x2_t v43;
  int64x2_t v44;
  int64x2_t v45;
  int64x2_t v46;
  int64x2_t v47;
  int64x2_t v48;
  int64x2_t *v49;
  int64x2_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int *v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t *v61;
  int v62;
  unsigned int v63;
  uint64_t *v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int64x2_t v71;
  int64x2_t *v72;
  __int128 v73;
  uint64_t v74;
  int64x2_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  int64x2_t v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  int64x2_t v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  int64x2_t v87;
  uint64_t v88;
  __int8 *v89;
  int64x2_t *v90;
  __int8 *v91;
  int64x2_t *v92;
  __int8 *v93;
  int64x2_t *v94;
  __int8 *v95;
  int64x2_t *v96;
  int64x2_t v97;
  int64x2_t *v98;
  int64x2_t v99;
  int64x2_t v100;
  int64x2_t v101;
  int64x2_t v102;
  int64x2_t v103;
  int64x2_t v104;
  int64x2_t v105;
  int64x2_t v106;
  int64x2_t v107;
  int64x2_t v108;
  uint64_t v109;
  __int128 v110;
  int64x2_t v111;
  int64x2_t v112;
  int64x2_t *v113;
  int64x2_t *v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int *v122;
  uint64_t v123;
  unsigned int v124;
  uint64_t *v125;
  int v126;
  unsigned int v127;
  uint64_t *v128;
  uint64_t v129;
  unsigned int v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int64x2_t v135;
  int64x2_t *v136;
  __int128 v137;
  uint64_t v138;
  int64x2_t v139;
  uint64_t v140;
  __int128 v141;
  uint64_t v142;
  int64x2_t v143;
  uint64_t v144;
  __int128 v145;
  uint64_t v146;
  __int8 *v147;
  int64x2_t *v148;
  __int8 *v149;
  int64x2_t *v150;
  __int8 *v151;
  int64x2_t *v152;
  int64x2_t v153;
  int64x2_t v154;
  int64x2_t v155;
  int64x2_t v156;
  int64x2_t v157;
  int64x2_t v158;
  int64x2_t v159;
  int64x2_t v160;
  int64x2_t v161;
  int64x2_t v162;
  int64x2_t *v163;
  int64x2_t *v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unsigned int v170;
  unsigned int v171;
  unsigned int *v172;
  uint64_t v173;
  unsigned int v174;
  uint64_t *v175;
  int v176;
  unsigned int v177;
  uint64_t *v178;
  uint64_t v179;
  unsigned int v180;
  unsigned int v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  int64x2_t v185;
  int64x2_t *v186;
  __int128 v187;
  uint64_t v188;
  int64x2_t v189;
  uint64_t v190;
  __int128 v191;
  uint64_t v192;
  int64x2_t v193;
  uint64_t v194;
  __int128 v195;
  uint64_t v196;
  __int8 *v197;
  int64x2_t *v198;
  __int8 *v199;
  int64x2_t *v200;
  __int8 *v201;
  int64x2_t *v202;
  int64x2_t v203;
  int64x2_t v204;
  int64x2_t v205;
  int64x2_t v206;
  int64x2_t v207;
  int64x2_t v208;
  int64x2_t v209;
  int64x2_t v210;
  int64x2_t v211;
  int64x2_t v212;
  int64x2_t *v213;
  int64x2_t *v214;
  uint64_t *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unsigned int v220;
  unsigned int v221;
  unsigned int *v222;
  uint64_t v223;
  unsigned int v224;
  uint64_t *v225;
  int v226;
  unsigned int v227;
  uint64_t *v228;
  uint64_t v229;
  unsigned int v230;
  unsigned int v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  int64x2_t *v236;
  int64x2_t v237;
  __int128 v238;
  uint64_t v239;
  uint64_t v240;
  int8x16_t v241;
  unint64_t v242;
  __int8 *v243;
  int64x2_t *v244;
  int64x2_t v245;
  __int128 v246;
  int64x2_t v247;
  int64x2_t v248;
  int64x2_t *v249;
  uint64_t v250;
  uint64_t *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unsigned int v256;
  unsigned int v257;
  unsigned int *v258;
  uint64_t v259;
  unsigned int v260;
  uint64_t *v261;
  int v262;
  unsigned int v263;
  uint64_t *v264;
  uint64_t v265;
  unsigned int v266;
  unsigned int v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  int8x16_t v271;
  uint64_t v272;
  unint64_t v273;
  int8x16_t *v274;
  _QWORD *v275;
  uint64_t *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unsigned int v281;
  unsigned int v282;
  unsigned int *v283;
  uint64_t v284;
  unsigned int v285;
  uint64_t *v286;
  int v287;
  unsigned int v288;
  uint64_t *v289;
  uint64_t v290;
  unsigned int v291;
  unsigned int v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  int64x2_t *v297;
  int64x2_t v298;
  __int128 v299;
  uint64_t v300;
  uint64_t v301;
  int8x16_t v302;
  unint64_t v303;
  __int8 *v304;
  int64x2_t *v305;
  int64x2_t v306;
  __int128 v307;
  int64x2_t v308;
  int64x2_t v309;
  int64x2_t *v310;
  uint64_t v311;
  uint64_t *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  unsigned int v317;
  unsigned int v318;
  unsigned int *v319;
  uint64_t v320;
  unsigned int v321;
  uint64_t *v322;
  int v323;
  unsigned int v324;
  uint64_t *v325;
  uint64_t v326;
  unsigned int v327;
  unsigned int v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  int64x2_t v332;
  int64x2_t *v333;
  __int128 v334;
  uint64_t v335;
  int64x2_t v336;
  uint64_t v337;
  __int128 v338;
  uint64_t v339;
  __int8 *v340;
  int64x2_t *v341;
  __int8 *v342;
  int64x2_t *v343;
  int64x2_t v344;
  int64x2_t v345;
  int64x2_t v346;
  int64x2_t v347;
  int64x2_t v348;
  int64x2_t v349;
  int64x2_t v350;
  int64x2_t *v351;
  int64x2_t *v352;
  uint64_t *v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  unsigned int v358;
  unsigned int v359;
  unsigned int *v360;
  uint64_t v361;
  unsigned int v362;
  uint64_t *v363;
  int v364;
  unsigned int v365;
  uint64_t *v366;
  uint64_t v367;
  unsigned int v368;
  unsigned int v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  int64x2_t v373;
  int64x2_t *v374;
  __int128 v375;
  uint64_t v376;
  int64x2_t v377;
  uint64_t v378;
  __int128 v379;
  uint64_t v380;
  __int8 *v381;
  int64x2_t *v382;
  __int8 *v383;
  int64x2_t *v384;
  int64x2_t v385;
  int64x2_t v386;
  int64x2_t v387;
  int64x2_t v388;
  int64x2_t v389;
  int64x2_t v390;
  int64x2_t v391;
  int64x2_t *v392;
  int64x2_t *v393;
  uint64_t *v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  unsigned int v399;
  unsigned int v400;
  unsigned int *v401;
  uint64_t v402;
  unsigned int v403;
  uint64_t *v404;
  int v405;
  unsigned int v406;
  uint64_t *v407;
  uint64_t v408;
  unsigned int v409;
  unsigned int v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  int64x2_t *v415;
  int64x2_t v416;
  __int128 v417;
  uint64_t v418;
  uint64_t v419;
  int8x16_t v420;
  unint64_t v421;
  __int8 *v422;
  int64x2_t *v423;
  int64x2_t v424;
  __int128 v425;
  int64x2_t v426;
  int64x2_t v427;
  int64x2_t *v428;
  uint64_t v429;
  uint64_t *v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  unsigned int v435;
  unsigned int v436;
  unsigned int *v437;
  uint64_t v438;
  unsigned int v439;
  uint64_t *v440;
  int v441;
  unsigned int v442;
  uint64_t *v443;
  uint64_t v444;
  unsigned int v445;
  unsigned int v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  __int128 v450;
  _OWORD *v451;
  __int128 v452;
  __int128 v453;
  __int128 v454;
  __int128 v455;
  __int128 v456;
  __int128 v457;
  __int128 v458;
  __int128 v459;
  __int128 v460;
  __int128 v461;
  _OWORD *v462;
  _OWORD *v463;
  _OWORD *v464;
  _OWORD *v465;
  _OWORD *v466;
  int64x2_t *v467;
  int64x2_t v468;
  int64x2_t v469;
  int64x2_t v470;
  int64x2_t v471;
  int64x2_t v472;
  int64x2_t v473;
  int64x2_t v474;
  int64x2_t v475;
  int64x2_t v476;
  int64x2_t v477;
  int64x2_t v478;
  int64x2_t v479;
  int64x2_t v480;
  int64x2_t v481;
  int64x2_t v482;
  int64x2_t *v483;
  int64x2_t *v484;
  int64x2_t *v485;
  uint64_t *v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  unsigned int v491;
  unsigned int v492;
  unsigned int *v493;
  uint64_t v494;
  unsigned int v495;
  uint64_t *v496;
  int v497;
  unsigned int v498;
  uint64_t *v499;
  uint64_t v500;
  unsigned int v501;
  unsigned int v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  __int128 v506;
  _OWORD *v507;
  __int128 v508;
  __int128 v509;
  __int128 v510;
  __int128 v511;
  __int128 v512;
  __int128 v513;
  __int128 v514;
  __int128 v515;
  __int128 v516;
  __int128 v517;
  __int128 v518;
  __int128 v519;
  __int128 v520;
  __int128 v521;
  __int128 v522;
  __int128 v523;
  _OWORD *v524;
  _OWORD *v525;
  _OWORD *v526;
  _OWORD *v527;
  _OWORD *v528;
  _OWORD *v529;
  _OWORD *v530;
  _OWORD *v531;
  int64x2_t v532;
  int64x2_t *v533;
  int64x2_t v534;
  int64x2_t v535;
  int64x2_t v536;
  int64x2_t v537;
  int64x2_t v538;
  int64x2_t v539;
  int64x2_t v540;
  int64x2_t v541;
  __int128 v542;
  __int128 v543;
  int64x2_t v544;
  int64x2_t v545;
  int64x2_t v546;
  int64x2_t v547;
  int64x2_t v548;
  int64x2_t v549;
  int64x2_t v550;
  int64x2_t v551;
  int64x2_t v552;
  int64x2_t *v553;
  int64x2_t *v554;
  int64x2_t *v555;
  uint64_t *v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  unsigned int v561;
  unsigned int v562;
  unsigned int *v563;
  uint64_t v564;
  unsigned int v565;
  uint64_t *v566;
  int v567;
  unsigned int v568;
  uint64_t *v569;
  uint64_t v570;
  unsigned int v571;
  unsigned int v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  __int128 v576;
  _OWORD *v577;
  __int128 v578;
  __int128 v579;
  __int128 v580;
  __int128 v581;
  __int128 v582;
  __int128 v583;
  __int128 v584;
  __int128 v585;
  __int128 v586;
  __int128 v587;
  _OWORD *v588;
  _OWORD *v589;
  _OWORD *v590;
  _OWORD *v591;
  _OWORD *v592;
  int64x2_t *v593;
  int64x2_t v594;
  int64x2_t v595;
  int64x2_t v596;
  int64x2_t v597;
  int64x2_t v598;
  int64x2_t v599;
  int64x2_t v600;
  int64x2_t v601;
  int64x2_t v602;
  int64x2_t v603;
  int64x2_t v604;
  int64x2_t v605;
  int64x2_t v606;
  int64x2_t v607;
  int64x2_t v608;
  int64x2_t *v609;
  int64x2_t *v610;
  int64x2_t *v611;
  uint64_t *v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  unsigned int v617;
  unsigned int v618;
  unsigned int *v619;
  uint64_t v620;
  unsigned int v621;
  uint64_t *v622;
  int v623;
  unsigned int v624;
  uint64_t *v625;
  uint64_t v626;
  unsigned int v627;
  unsigned int v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  __int128 v632;
  _OWORD *v633;
  __int128 v634;
  __int128 v635;
  __int128 v636;
  __int128 v637;
  __int128 v638;
  __int128 v639;
  __int128 v640;
  __int128 v641;
  __int128 v642;
  __int128 v643;
  _OWORD *v644;
  _OWORD *v645;
  _OWORD *v646;
  _OWORD *v647;
  _OWORD *v648;
  int64x2_t *v649;
  int64x2_t v650;
  int64x2_t v651;
  int64x2_t v652;
  int64x2_t v653;
  int64x2_t v654;
  int64x2_t v655;
  int64x2_t v656;
  int64x2_t v657;
  int64x2_t v658;
  int64x2_t v659;
  int64x2_t v660;
  int64x2_t v661;
  int64x2_t v662;
  int64x2_t v663;
  int64x2_t v664;
  int64x2_t *v665;
  int64x2_t *v666;
  int64x2_t *v667;
  uint64_t *v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  unsigned int v673;
  unsigned int v674;
  unsigned int *v675;
  uint64_t v676;
  unsigned int v677;
  uint64_t *v678;
  int v679;
  unsigned int v680;
  uint64_t *v681;
  uint64_t v682;
  unsigned int v683;
  unsigned int v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  __int128 v688;
  _OWORD *v689;
  __int128 v690;
  __int128 v691;
  __int128 v692;
  __int128 v693;
  _OWORD *v694;
  _OWORD *v695;
  int64x2_t *v696;
  int64x2_t v697;
  int64x2_t v698;
  int64x2_t v699;
  __int128 v700;
  __int128 v701;
  int64x2_t v702;
  int64x2_t v703;
  int64x2_t *v704;
  int64x2_t *v705;
  int64x2_t *v706;
  uint64_t *v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  unsigned int v712;
  unsigned int v713;
  unsigned int *v714;
  uint64_t v715;
  unsigned int v716;
  uint64_t *v717;
  int v718;
  unsigned int v719;
  uint64_t *v720;
  uint64_t v721;
  unsigned int v722;
  unsigned int v723;
  int8x16_t *v724;
  uint64_t v725;
  uint64_t v726;
  int8x16_t v727;
  int8x16_t v728;
  int8x16_t *v729;
  _QWORD *v730;
  uint64_t *v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  unsigned int v736;
  unsigned int v737;
  unsigned int *v738;
  uint64_t v739;
  unsigned int v740;
  uint64_t *v741;
  int v742;
  unsigned int v743;
  uint64_t *v744;
  uint64_t v745;
  unsigned int v746;
  unsigned int v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  __int128 v751;
  _OWORD *v752;
  __int128 v753;
  __int128 v754;
  __int128 v755;
  __int128 v756;
  _OWORD *v757;
  _OWORD *v758;
  int64x2_t *v759;
  int64x2_t v760;
  int64x2_t v761;
  int64x2_t v762;
  __int128 v763;
  __int128 v764;
  int64x2_t v765;
  int64x2_t v766;
  int64x2_t *v767;
  int64x2_t *v768;
  int64x2_t *v769;
  uint64_t *v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  unsigned int v775;
  unsigned int v776;
  unsigned int *v777;
  uint64_t v778;
  unsigned int v779;
  uint64_t *v780;
  int v781;
  unsigned int v782;
  uint64_t *v783;
  uint64_t v784;
  unsigned int v785;
  unsigned int v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  int64x2_t v790;
  int64x2_t *v791;
  __int128 v792;
  __int128 v793;
  int64x2_t v794;
  int64x2_t v795;
  int64x2_t v796;
  int64x2_t v797;
  __int8 *v798;
  int64x2_t v799;
  int64x2_t v800;
  int64x2_t v801;
  int64x2_t v802;
  int64x2_t v803;
  int64x2_t v804;
  int64x2_t v805;
  int64x2_t v806;
  int64x2_t *v807;
  int64x2_t *v808;
  int64x2_t *v809;
  uint64_t *v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  unsigned int v815;
  unsigned int v816;
  unsigned int *v817;
  uint64_t v818;
  unsigned int v819;
  uint64_t *v820;
  int v821;
  unsigned int v822;
  uint64_t *v823;
  uint64_t v824;
  unsigned int v825;
  unsigned int v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  int64x2_t v830;
  int64x2_t *v831;
  __int128 v832;
  __int128 v833;
  int64x2_t v834;
  int64x2_t v835;
  int64x2_t v836;
  int64x2_t v837;
  __int8 *v838;
  int64x2_t v839;
  int64x2_t v840;
  int64x2_t v841;
  int64x2_t v842;
  int64x2_t v843;
  int64x2_t v844;
  int64x2_t v845;
  int64x2_t v846;
  int64x2_t *v847;
  int64x2_t *v848;
  int64x2_t *v849;
  uint64_t *v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  unsigned int v855;
  unsigned int v856;
  unsigned int *v857;
  uint64_t v858;
  unsigned int v859;
  uint64_t *v860;
  int v861;
  unsigned int v862;
  uint64_t *v863;
  uint64_t v864;
  unsigned int v865;
  unsigned int v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  __int128 v870;
  _OWORD *v871;
  __int128 v872;
  __int128 v873;
  __int128 v874;
  __int128 v875;
  _OWORD *v876;
  _OWORD *v877;
  int64x2_t *v878;
  int64x2_t v879;
  int64x2_t v880;
  int64x2_t v881;
  __int128 v882;
  __int128 v883;
  int64x2_t v884;
  int64x2_t v885;
  int64x2_t *v886;
  int64x2_t *v887;
  int64x2_t *v888;
  uint64_t *v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  unsigned int v894;
  unsigned int v895;
  unsigned int *v896;
  uint64_t v897;
  unsigned int v898;
  uint64_t *v899;
  int v900;
  unsigned int v901;
  uint64_t *v902;
  uint64_t v903;
  unsigned int v904;
  unsigned int v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  __int128 v909;
  _OWORD *v910;
  __int128 v911;
  __int128 v912;
  __int128 v913;
  __int128 v914;
  __int128 v915;
  __int128 v916;
  __int128 v917;
  __int128 v918;
  __int128 v919;
  __int128 v920;
  _OWORD *v921;
  _OWORD *v922;
  _OWORD *v923;
  _OWORD *v924;
  _OWORD *v925;
  int64x2_t *v926;
  int64x2_t v927;
  int64x2_t v928;
  int64x2_t v929;
  int64x2_t v930;
  int64x2_t v931;
  int64x2_t v932;
  int64x2_t v933;
  int64x2_t v934;
  int64x2_t v935;
  int64x2_t v936;
  int64x2_t v937;
  int64x2_t v938;
  int64x2_t v939;
  int64x2_t v940;
  int64x2_t v941;
  int64x2_t *v942;
  int64x2_t *v943;
  int64x2_t *v944;
  uint64_t *v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  unsigned int v950;
  unsigned int v951;
  unsigned int *v952;
  uint64_t v953;
  unsigned int v954;
  uint64_t *v955;
  int v956;
  unsigned int v957;
  uint64_t *v958;
  uint64_t v959;
  unsigned int v960;
  unsigned int v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  __int128 v965;
  _OWORD *v966;
  __int128 v967;
  __int128 v968;
  __int128 v969;
  __int128 v970;
  __int128 v971;
  __int128 v972;
  __int128 v973;
  __int128 v974;
  __int128 v975;
  __int128 v976;
  __int128 v977;
  __int128 v978;
  __int128 v979;
  __int128 v980;
  __int128 v981;
  __int128 v982;
  _OWORD *v983;
  _OWORD *v984;
  _OWORD *v985;
  _OWORD *v986;
  _OWORD *v987;
  _OWORD *v988;
  _OWORD *v989;
  _OWORD *v990;
  int64x2_t v991;
  int64x2_t *v992;
  int64x2_t v993;
  int64x2_t v994;
  int64x2_t v995;
  int64x2_t v996;
  int64x2_t v997;
  int64x2_t v998;
  int64x2_t v999;
  int64x2_t v1000;
  __int128 v1001;
  __int128 v1002;
  int64x2_t v1003;
  int64x2_t v1004;
  int64x2_t v1005;
  int64x2_t v1006;
  int64x2_t v1007;
  int64x2_t v1008;
  int64x2_t v1009;
  int64x2_t v1010;
  int64x2_t v1011;
  int64x2_t *v1012;
  int64x2_t *v1013;
  int64x2_t *v1014;
  uint64_t *v1015;
  uint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  uint64_t v1019;
  unsigned int v1020;
  unsigned int v1021;
  unsigned int *v1022;
  uint64_t v1023;
  unsigned int v1024;
  uint64_t *v1025;
  int v1026;
  unsigned int v1027;
  uint64_t *v1028;
  uint64_t v1029;
  unsigned int v1030;
  unsigned int v1031;
  uint64_t v1032;
  uint64_t v1033;
  uint64_t v1034;
  __int128 v1035;
  _OWORD *v1036;
  __int128 v1037;
  __int128 v1038;
  __int128 v1039;
  __int128 v1040;
  __int128 v1041;
  __int128 v1042;
  __int128 v1043;
  __int128 v1044;
  __int128 v1045;
  __int128 v1046;
  _OWORD *v1047;
  _OWORD *v1048;
  _OWORD *v1049;
  _OWORD *v1050;
  _OWORD *v1051;
  int64x2_t *v1052;
  int64x2_t v1053;
  int64x2_t v1054;
  int64x2_t v1055;
  int64x2_t v1056;
  int64x2_t v1057;
  int64x2_t v1058;
  int64x2_t v1059;
  int64x2_t v1060;
  int64x2_t v1061;
  int64x2_t v1062;
  int64x2_t v1063;
  int64x2_t v1064;
  int64x2_t v1065;
  int64x2_t v1066;
  int64x2_t v1067;
  int64x2_t *v1068;
  int64x2_t *v1069;
  int64x2_t *v1070;
  uint64_t *v1071;
  uint64_t v1072;
  uint64_t v1073;
  uint64_t v1074;
  uint64_t v1075;
  unsigned int v1076;
  unsigned int v1077;
  unsigned int *v1078;
  uint64_t v1079;
  unsigned int v1080;
  uint64_t *v1081;
  int v1082;
  unsigned int v1083;
  uint64_t *v1084;
  uint64_t v1085;
  unsigned int v1086;
  unsigned int v1087;
  uint64_t v1088;
  uint64_t v1089;
  uint64_t v1090;
  __int128 v1091;
  _OWORD *v1092;
  __int128 v1093;
  __int128 v1094;
  __int128 v1095;
  __int128 v1096;
  __int128 v1097;
  __int128 v1098;
  __int128 v1099;
  __int128 v1100;
  __int128 v1101;
  __int128 v1102;
  _OWORD *v1103;
  _OWORD *v1104;
  _OWORD *v1105;
  _OWORD *v1106;
  _OWORD *v1107;
  int64x2_t *v1108;
  int64x2_t v1109;
  int64x2_t v1110;
  int64x2_t v1111;
  int64x2_t v1112;
  int64x2_t v1113;
  int64x2_t v1114;
  int64x2_t v1115;
  int64x2_t v1116;
  int64x2_t v1117;
  int64x2_t v1118;
  int64x2_t v1119;
  int64x2_t v1120;
  int64x2_t v1121;
  int64x2_t v1122;
  int64x2_t v1123;
  int64x2_t *v1124;
  int64x2_t *v1125;
  int64x2_t *v1126;
  uint64_t *v1127;
  uint64_t v1128;
  uint64_t v1129;
  uint64_t v1130;
  uint64_t v1131;
  unsigned int v1132;
  unsigned int v1133;
  unsigned int *v1134;
  uint64_t v1135;
  unsigned int v1136;
  uint64_t *v1137;
  int v1138;
  unsigned int v1139;
  uint64_t *v1140;
  uint64_t v1141;
  unsigned int v1142;
  unsigned int v1143;
  uint64_t v1144;
  uint64_t v1145;
  uint64_t v1146;
  __int128 v1147;
  _OWORD *v1148;
  __int128 v1149;
  __int128 v1150;
  __int128 v1151;
  __int128 v1152;
  _OWORD *v1153;
  _OWORD *v1154;
  int64x2_t *v1155;
  int64x2_t v1156;
  int64x2_t v1157;
  int64x2_t v1158;
  __int128 v1159;
  __int128 v1160;
  int64x2_t v1161;
  int64x2_t v1162;
  int64x2_t *v1163;
  int64x2_t *v1164;
  int64x2_t *v1165;
  uint64_t *v1166;
  uint64_t v1167;
  uint64_t v1168;
  uint64_t v1169;
  uint64_t v1170;
  unsigned int v1171;
  unsigned int v1172;
  unsigned int *v1173;
  uint64_t v1174;
  unsigned int v1175;
  uint64_t *v1176;
  int v1177;
  unsigned int v1178;
  uint64_t *v1179;
  uint64_t v1180;
  unsigned int v1181;
  unsigned int v1182;
  int8x16_t *v1183;
  uint64_t v1184;
  uint64_t v1185;
  int8x16_t v1186;
  int8x16_t v1187;
  int8x16_t *v1188;
  _QWORD *v1189;
  uint64_t *v1190;
  uint64_t v1191;
  uint64_t v1192;
  uint64_t v1193;
  uint64_t v1194;
  unsigned int v1195;
  unsigned int v1196;
  unsigned int *v1197;
  uint64_t v1198;
  unsigned int v1199;
  uint64_t *v1200;
  int v1201;
  unsigned int v1202;
  uint64_t *v1203;
  uint64_t v1204;
  unsigned int v1205;
  unsigned int v1206;
  uint64_t v1207;
  uint64_t v1208;
  uint64_t v1209;
  __int128 v1210;
  _OWORD *v1211;
  __int128 v1212;
  __int128 v1213;
  __int128 v1214;
  __int128 v1215;
  _OWORD *v1216;
  _OWORD *v1217;
  int64x2_t *v1218;
  int64x2_t v1219;
  int64x2_t v1220;
  int64x2_t v1221;
  __int128 v1222;
  __int128 v1223;
  int64x2_t v1224;
  int64x2_t v1225;
  int64x2_t *v1226;
  int64x2_t *v1227;
  int64x2_t *v1228;
  uint64_t *v1229;
  uint64_t v1230;
  uint64_t v1231;
  uint64_t v1232;
  uint64_t v1233;
  unsigned int v1234;
  unsigned int v1235;
  unsigned int *v1236;
  uint64_t v1237;
  unsigned int v1238;
  uint64_t *v1239;
  int v1240;
  unsigned int v1241;
  uint64_t *v1242;
  uint64_t v1243;
  unsigned int v1244;
  unsigned int v1245;
  uint64_t v1246;
  uint64_t v1247;
  uint64_t v1248;
  int64x2_t v1249;
  int64x2_t *v1250;
  __int128 v1251;
  __int128 v1252;
  int64x2_t v1253;
  int64x2_t v1254;
  int64x2_t v1255;
  int64x2_t v1256;
  __int8 *v1257;
  int64x2_t v1258;
  int64x2_t v1259;
  int64x2_t v1260;
  int64x2_t v1261;
  int64x2_t v1262;
  int64x2_t v1263;
  int64x2_t v1264;
  int64x2_t v1265;
  int64x2_t *v1266;
  int64x2_t *v1267;
  int64x2_t *v1268;
  uint64_t *v1269;
  uint64_t v1270;
  uint64_t v1271;
  uint64_t v1272;
  uint64_t v1273;
  unsigned int v1274;
  unsigned int v1275;
  unsigned int *v1276;
  uint64_t v1277;
  unsigned int v1278;
  uint64_t *v1279;
  int v1280;
  unsigned int v1281;
  uint64_t *v1282;
  uint64_t v1283;
  unsigned int v1284;
  unsigned int v1285;
  uint64_t v1286;
  uint64_t v1287;
  uint64_t v1288;
  int64x2_t v1289;
  int64x2_t *v1290;
  __int128 v1291;
  __int128 v1292;
  int64x2_t v1293;
  int64x2_t v1294;
  int64x2_t v1295;
  int64x2_t v1296;
  __int8 *v1297;
  int64x2_t v1298;
  int64x2_t v1299;
  int64x2_t v1300;
  int64x2_t v1301;
  int64x2_t v1302;
  int64x2_t v1303;
  int64x2_t v1304;
  int64x2_t v1305;
  int64x2_t *v1306;
  int64x2_t *v1307;
  int64x2_t *v1308;
  uint64_t *v1309;
  uint64_t v1310;
  uint64_t v1311;
  uint64_t v1312;
  uint64_t v1313;
  unsigned int v1314;
  unsigned int v1315;
  unsigned int *v1316;
  uint64_t v1317;
  unsigned int v1318;
  uint64_t *v1319;
  int v1320;
  unsigned int v1321;
  uint64_t *v1322;
  uint64_t v1323;
  unsigned int v1324;
  unsigned int v1325;
  uint64_t v1326;
  uint64_t v1327;
  uint64_t v1328;
  __int128 v1329;
  _OWORD *v1330;
  __int128 v1331;
  __int128 v1332;
  __int128 v1333;
  __int128 v1334;
  _OWORD *v1335;
  _OWORD *v1336;
  int64x2_t *v1337;
  int64x2_t v1338;
  int64x2_t v1339;
  int64x2_t v1340;
  __int128 v1341;
  __int128 v1342;
  int64x2_t v1343;
  int64x2_t v1344;
  int64x2_t *v1345;
  int64x2_t *v1346;
  int64x2_t *v1347;
  uint64_t *v1348;
  uint64_t v1349;
  uint64_t v1350;
  uint64_t v1351;
  uint64_t v1352;
  unsigned int v1353;
  unsigned int v1354;
  unsigned int *v1355;
  uint64_t v1356;
  unsigned int v1357;
  uint64_t *v1358;
  int v1359;
  unsigned int v1360;
  uint64_t *v1361;
  uint64_t v1362;
  unsigned int v1363;
  unsigned int v1364;
  uint64_t v1365;
  uint64_t v1366;
  uint64_t v1367;
  int64x2_t v1368;
  int64x2_t *v1369;
  __int128 v1370;
  uint64_t v1371;
  int64x2_t v1372;
  uint64_t v1373;
  __int128 v1374;
  uint64_t v1375;
  int64x2_t v1376;
  uint64_t v1377;
  __int128 v1378;
  uint64_t v1379;
  __int8 *v1380;
  int64x2_t *v1381;
  __int8 *v1382;
  int64x2_t *v1383;
  __int8 *v1384;
  int64x2_t *v1385;
  int64x2_t v1386;
  int64x2_t v1387;
  int64x2_t v1388;
  int64x2_t v1389;
  int64x2_t v1390;
  int64x2_t v1391;
  int64x2_t v1392;
  int64x2_t v1393;
  int64x2_t v1394;
  int64x2_t v1395;
  int64x2_t *v1396;
  int64x2_t *v1397;
  uint64_t *v1398;
  uint64_t v1399;
  uint64_t v1400;
  uint64_t v1401;
  uint64_t v1402;
  unsigned int v1403;
  unsigned int v1404;
  unsigned int *v1405;
  uint64_t v1406;
  unsigned int v1407;
  uint64_t *v1408;
  int v1409;
  unsigned int v1410;
  uint64_t *v1411;
  uint64_t v1412;
  unsigned int v1413;
  unsigned int v1414;
  uint64_t v1415;
  uint64_t v1416;
  uint64_t v1417;
  int64x2_t v1418;
  int64x2_t *v1419;
  __int128 v1420;
  uint64_t v1421;
  int64x2_t v1422;
  uint64_t v1423;
  __int128 v1424;
  uint64_t v1425;
  int64x2_t v1426;
  uint64_t v1427;
  __int128 v1428;
  uint64_t v1429;
  int64x2_t v1430;
  uint64_t v1431;
  __int128 v1432;
  uint64_t v1433;
  int64x2_t v1434;
  uint64_t v1435;
  __int8 *v1436;
  int64x2_t *v1437;
  __int8 *v1438;
  int64x2_t *v1439;
  __int8 *v1440;
  int64x2_t *v1441;
  __int8 *v1442;
  int64x2_t *v1443;
  int64x2_t v1444;
  int64x2_t *v1445;
  int64x2_t v1446;
  int64x2_t v1447;
  int64x2_t v1448;
  int64x2_t v1449;
  int64x2_t v1450;
  int64x2_t v1451;
  int64x2_t v1452;
  int64x2_t v1453;
  int64x2_t v1454;
  int64x2_t v1455;
  uint64_t v1456;
  __int128 v1457;
  int64x2_t v1458;
  int64x2_t v1459;
  int64x2_t *v1460;
  int64x2_t *v1461;
  uint64_t *v1462;
  uint64_t v1463;
  uint64_t v1464;
  uint64_t v1465;
  uint64_t v1466;
  unsigned int v1467;
  unsigned int v1468;
  unsigned int *v1469;
  uint64_t v1470;
  unsigned int v1471;
  uint64_t *v1472;
  int v1473;
  unsigned int v1474;
  uint64_t *v1475;
  uint64_t v1476;
  unsigned int v1477;
  unsigned int v1478;
  uint64_t v1479;
  uint64_t v1480;
  uint64_t v1481;
  int64x2_t v1482;
  int64x2_t *v1483;
  __int128 v1484;
  uint64_t v1485;
  int64x2_t v1486;
  uint64_t v1487;
  __int128 v1488;
  uint64_t v1489;
  int64x2_t v1490;
  uint64_t v1491;
  __int128 v1492;
  uint64_t v1493;
  __int8 *v1494;
  int64x2_t *v1495;
  __int8 *v1496;
  int64x2_t *v1497;
  __int8 *v1498;
  int64x2_t *v1499;
  int64x2_t v1500;
  int64x2_t v1501;
  int64x2_t v1502;
  int64x2_t v1503;
  int64x2_t v1504;
  int64x2_t v1505;
  int64x2_t v1506;
  int64x2_t v1507;
  int64x2_t v1508;
  int64x2_t v1509;
  int64x2_t *v1510;
  int64x2_t *v1511;
  uint64_t *v1512;
  uint64_t v1513;
  uint64_t v1514;
  uint64_t v1515;
  uint64_t v1516;
  unsigned int v1517;
  unsigned int v1518;
  unsigned int *v1519;
  uint64_t v1520;
  unsigned int v1521;
  uint64_t *v1522;
  int v1523;
  unsigned int v1524;
  uint64_t *v1525;
  uint64_t v1526;
  unsigned int v1527;
  unsigned int v1528;
  uint64_t v1529;
  uint64_t v1530;
  uint64_t v1531;
  int64x2_t v1532;
  int64x2_t *v1533;
  __int128 v1534;
  uint64_t v1535;
  int64x2_t v1536;
  uint64_t v1537;
  __int128 v1538;
  uint64_t v1539;
  int64x2_t v1540;
  uint64_t v1541;
  __int128 v1542;
  uint64_t v1543;
  __int8 *v1544;
  int64x2_t *v1545;
  __int8 *v1546;
  int64x2_t *v1547;
  __int8 *v1548;
  int64x2_t *v1549;
  int64x2_t v1550;
  int64x2_t v1551;
  int64x2_t v1552;
  int64x2_t v1553;
  int64x2_t v1554;
  int64x2_t v1555;
  int64x2_t v1556;
  int64x2_t v1557;
  int64x2_t v1558;
  int64x2_t v1559;
  int64x2_t *v1560;
  int64x2_t *v1561;
  uint64_t *v1562;
  uint64_t v1563;
  uint64_t v1564;
  uint64_t v1565;
  uint64_t v1566;
  unsigned int v1567;
  unsigned int v1568;
  unsigned int *v1569;
  uint64_t v1570;
  unsigned int v1571;
  uint64_t *v1572;
  int v1573;
  unsigned int v1574;
  uint64_t *v1575;
  uint64_t v1576;
  unsigned int v1577;
  unsigned int v1578;
  uint64_t v1579;
  uint64_t v1580;
  uint64_t v1581;
  uint64_t v1582;
  int64x2_t *v1583;
  int64x2_t v1584;
  __int128 v1585;
  uint64_t v1586;
  uint64_t v1587;
  int8x16_t v1588;
  unint64_t v1589;
  __int8 *v1590;
  int64x2_t *v1591;
  int64x2_t v1592;
  __int128 v1593;
  int64x2_t v1594;
  int64x2_t v1595;
  int64x2_t *v1596;
  uint64_t v1597;
  uint64_t *v1598;
  uint64_t v1599;
  uint64_t v1600;
  uint64_t v1601;
  uint64_t v1602;
  unsigned int v1603;
  unsigned int v1604;
  unsigned int *v1605;
  uint64_t v1606;
  unsigned int v1607;
  uint64_t *v1608;
  int v1609;
  unsigned int v1610;
  uint64_t *v1611;
  uint64_t v1612;
  unsigned int v1613;
  unsigned int v1614;
  uint64_t v1615;
  uint64_t v1616;
  uint64_t v1617;
  int8x16_t v1618;
  uint64_t v1619;
  unint64_t v1620;
  int8x16_t *v1621;
  _QWORD *v1622;
  uint64_t *v1623;
  uint64_t v1624;
  uint64_t v1625;
  uint64_t v1626;
  uint64_t v1627;
  unsigned int v1628;
  unsigned int v1629;
  unsigned int *v1630;
  uint64_t v1631;
  unsigned int v1632;
  uint64_t *v1633;
  int v1634;
  unsigned int v1635;
  uint64_t *v1636;
  uint64_t v1637;
  unsigned int v1638;
  unsigned int v1639;
  uint64_t v1640;
  uint64_t v1641;
  uint64_t v1642;
  uint64_t v1643;
  int64x2_t *v1644;
  int64x2_t v1645;
  __int128 v1646;
  uint64_t v1647;
  uint64_t v1648;
  int8x16_t v1649;
  unint64_t v1650;
  __int8 *v1651;
  int64x2_t *v1652;
  int64x2_t v1653;
  __int128 v1654;
  int64x2_t v1655;
  int64x2_t v1656;
  int64x2_t *v1657;
  uint64_t v1658;
  uint64_t *v1659;
  uint64_t v1660;
  uint64_t v1661;
  uint64_t v1662;
  uint64_t v1663;
  unsigned int v1664;
  unsigned int v1665;
  unsigned int *v1666;
  uint64_t v1667;
  unsigned int v1668;
  uint64_t *v1669;
  int v1670;
  unsigned int v1671;
  uint64_t *v1672;
  uint64_t v1673;
  unsigned int v1674;
  unsigned int v1675;
  uint64_t v1676;
  uint64_t v1677;
  uint64_t v1678;
  int64x2_t v1679;
  int64x2_t *v1680;
  __int128 v1681;
  uint64_t v1682;
  int64x2_t v1683;
  uint64_t v1684;
  __int128 v1685;
  uint64_t v1686;
  __int8 *v1687;
  int64x2_t *v1688;
  __int8 *v1689;
  int64x2_t *v1690;
  int64x2_t v1691;
  int64x2_t v1692;
  int64x2_t v1693;
  int64x2_t v1694;
  int64x2_t v1695;
  int64x2_t v1696;
  int64x2_t v1697;
  int64x2_t *v1698;
  int64x2_t *v1699;
  uint64_t *v1700;
  uint64_t v1701;
  uint64_t v1702;
  uint64_t v1703;
  uint64_t v1704;
  unsigned int v1705;
  unsigned int v1706;
  unsigned int *v1707;
  uint64_t v1708;
  unsigned int v1709;
  uint64_t *v1710;
  int v1711;
  unsigned int v1712;
  uint64_t *v1713;
  uint64_t v1714;
  unsigned int v1715;
  unsigned int v1716;
  uint64_t v1717;
  uint64_t v1718;
  uint64_t v1719;
  int64x2_t v1720;
  int64x2_t *v1721;
  __int128 v1722;
  uint64_t v1723;
  int64x2_t v1724;
  uint64_t v1725;
  __int128 v1726;
  uint64_t v1727;
  __int8 *v1728;
  int64x2_t *v1729;
  __int8 *v1730;
  int64x2_t *v1731;
  int64x2_t v1732;
  int64x2_t v1733;
  int64x2_t v1734;
  int64x2_t v1735;
  int64x2_t v1736;
  int64x2_t v1737;
  int64x2_t v1738;
  int64x2_t *v1739;
  int64x2_t *v1740;
  uint64_t *v1741;
  uint64_t v1742;
  uint64_t v1743;
  uint64_t v1744;
  uint64_t v1745;
  unsigned int v1746;
  unsigned int v1747;
  unsigned int *v1748;
  uint64_t v1749;
  unsigned int v1750;
  uint64_t *v1751;
  int v1752;
  unsigned int v1753;
  uint64_t *v1754;
  uint64_t v1755;
  unsigned int v1756;
  unsigned int v1757;
  uint64_t v1758;
  uint64_t v1759;
  uint64_t v1760;
  uint64_t v1761;
  int64x2_t *v1762;
  int64x2_t v1763;
  __int128 v1764;
  uint64_t v1765;
  uint64_t v1766;
  int8x16_t v1767;
  unint64_t v1768;
  __int8 *v1769;
  int64x2_t *v1770;
  int64x2_t v1771;
  __int128 v1772;
  int64x2_t v1773;
  int64x2_t v1774;
  int64x2_t *v1775;
  uint64_t v1776;
  uint64_t *v1777;
  uint64_t v1778;
  uint64_t v1779;
  uint64_t v1780;
  uint64_t v1781;
  unsigned int v1782;
  unsigned int v1783;
  unsigned int *v1784;
  uint64_t v1785;
  unsigned int v1786;
  uint64_t *v1787;
  int v1788;
  unsigned int v1789;
  uint64_t *v1790;
  uint64_t v1791;
  unsigned int v1792;
  unsigned int v1793;
  _QWORD *v1794;
  uint64_t v1795;
  uint64_t v1796;
  uint64_t v1797;
  _QWORD *v1798;
  uint64_t v1799;
  uint64_t v1800;
  uint64_t v1801;
  uint64_t v1802;
  _OWORD *v1803;
  __int128 v1804;
  __int128 v1805;
  uint64_t *v1806;
  uint64_t v1807;
  uint64_t v1808;
  uint64_t v1809;
  uint64_t v1810;
  unsigned int v1811;
  unsigned int v1812;
  unsigned int *v1813;
  uint64_t v1814;
  unsigned int v1815;
  uint64_t *v1816;
  int v1817;
  unsigned int v1818;
  uint64_t *v1819;
  uint64_t v1820;
  unsigned int v1821;
  unsigned int v1822;
  _QWORD *v1823;
  uint64_t v1824;
  uint64_t v1825;
  uint64_t v1826;
  uint64_t v1827;
  _QWORD *v1828;
  uint64_t v1829;
  uint64_t v1830;
  uint64_t v1831;
  uint64_t v1832;
  uint64_t v1833;
  uint64_t v1834;
  uint64_t v1835;
  __int128 v1836;
  __int128 v1837;
  __int128 v1838;
  __int128 v1839;
  uint64_t *v1840;
  uint64_t v1841;
  uint64_t v1842;
  uint64_t v1843;
  uint64_t v1844;
  unsigned int v1845;
  unsigned int v1846;
  unsigned int *v1847;
  uint64_t v1848;
  unsigned int v1849;
  uint64_t *v1850;
  int v1851;
  unsigned int v1852;
  uint64_t *v1853;
  uint64_t v1854;
  unsigned int v1855;
  unsigned int v1856;
  _QWORD *v1857;
  uint64_t v1858;
  uint64_t v1859;
  uint64_t v1860;
  _QWORD *v1861;
  uint64_t v1862;
  uint64_t v1863;
  uint64_t v1864;
  uint64_t v1865;
  _OWORD *v1866;
  __int128 v1867;
  __int128 v1868;
  uint64_t *v1869;
  uint64_t v1870;
  uint64_t v1871;
  uint64_t v1872;
  uint64_t v1873;
  unsigned int v1874;
  unsigned int v1875;
  unsigned int *v1876;
  uint64_t v1877;
  unsigned int v1878;
  uint64_t *v1879;
  int v1880;
  unsigned int v1881;
  uint64_t *v1882;
  uint64_t v1883;
  unsigned int v1884;
  unsigned int v1885;
  _QWORD *v1886;
  uint64_t v1887;
  uint64_t v1888;
  uint64_t v1889;
  _QWORD *v1890;
  uint64_t v1891;
  uint64_t v1892;
  uint64_t v1893;
  uint64_t v1894;
  _OWORD *v1895;
  __int128 v1896;
  __int128 v1897;
  uint64_t *v1898;
  uint64_t v1899;
  uint64_t v1900;
  uint64_t v1901;
  uint64_t v1902;
  unsigned int v1903;
  unsigned int v1904;
  unsigned int *v1905;
  uint64_t v1906;
  unsigned int v1907;
  uint64_t *v1908;
  int v1909;
  unsigned int v1910;
  uint64_t *v1911;
  uint64_t v1912;
  unsigned int v1913;
  unsigned int v1914;
  _QWORD *v1915;
  uint64_t v1916;
  uint64_t v1917;
  _QWORD *v1918;
  uint64_t v1919;
  uint64_t v1920;
  uint64_t v1921;
  __int128 v1922;
  uint64_t *v1923;
  uint64_t v1924;
  uint64_t v1925;
  uint64_t v1926;
  uint64_t v1927;
  unsigned int v1928;
  unsigned int *v1929;
  unsigned int i;
  uint64_t v1931;
  unsigned int v1932;
  uint64_t *v1933;
  int v1934;
  unsigned int v1935;
  uint64_t *v1936;
  uint64_t v1937;
  unsigned int v1938;
  unsigned int v1939;
  unsigned int v1940;
  uint64_t *v1941;
  uint64_t v1942;
  uint64_t v1943;
  uint64_t v1944;
  uint64_t v1945;
  uint64_t v1946;
  unsigned int v1947;
  uint64_t *v1948;
  int v1949;
  unsigned int v1950;
  uint64_t *v1951;
  uint64_t v1952;
  uint64_t *v1953;
  uint64_t v1954;
  uint64_t v1955;
  uint64_t v1956;
  uint64_t v1957;
  int v1958;
  unsigned int v1959;
  unsigned int v1960;
  unsigned int *v1961;
  uint64_t v1962;
  unsigned int v1963;
  uint64_t *v1964;
  int v1965;
  unsigned int v1966;
  uint64_t *v1967;
  uint64_t v1968;
  unsigned int v1969;
  unsigned int v1970;
  _QWORD *v1971;
  uint64_t v1972;
  uint64_t v1973;
  _QWORD *v1974;
  uint64_t v1975;
  uint64_t v1976;
  uint64_t v1977;
  __int128 v1978;
  uint64_t *v1979;
  uint64_t v1980;
  uint64_t v1981;
  uint64_t v1982;
  uint64_t v1983;
  unsigned int v1984;
  unsigned int v1985;
  unsigned int *v1986;
  uint64_t v1987;
  unsigned int v1988;
  uint64_t *v1989;
  int v1990;
  unsigned int v1991;
  uint64_t *v1992;
  uint64_t v1993;
  unsigned int v1994;
  unsigned int v1995;
  _QWORD *v1996;
  uint64_t v1997;
  uint64_t v1998;
  uint64_t v1999;
  _QWORD *v2000;
  uint64_t v2001;
  uint64_t v2002;
  _OWORD *v2003;
  __int128 v2004;
  uint64_t *v2005;
  uint64_t v2006;
  uint64_t v2007;
  uint64_t v2008;
  uint64_t v2009;
  unsigned int v2010;
  unsigned int v2011;
  unsigned int *v2012;
  uint64_t v2013;
  unsigned int v2014;
  uint64_t *v2015;
  int v2016;
  unsigned int v2017;
  uint64_t *v2018;
  uint64_t v2019;
  unsigned int v2020;
  unsigned int v2021;
  _QWORD *v2022;
  uint64_t v2023;
  uint64_t v2024;
  uint64_t v2025;
  _QWORD *v2026;
  uint64_t v2027;
  uint64_t v2028;
  _OWORD *v2029;
  __int128 v2030;
  uint64_t *v2031;
  uint64_t v2032;
  uint64_t v2033;
  uint64_t v2034;
  uint64_t v2035;
  unsigned int v2036;
  unsigned int v2037;
  unsigned int *v2038;
  uint64_t v2039;
  unsigned int v2040;
  uint64_t *v2041;
  int v2042;
  unsigned int v2043;
  uint64_t *v2044;
  uint64_t v2045;
  unsigned int v2046;
  unsigned int v2047;
  _QWORD *v2048;
  uint64_t v2049;
  uint64_t v2050;
  _QWORD *v2051;
  uint64_t v2052;
  uint64_t v2053;
  uint64_t v2054;
  __int128 v2055;
  uint64_t *v2056;
  uint64_t v2057;
  uint64_t v2058;
  uint64_t v2059;
  uint64_t v2060;
  unsigned int v2061;
  unsigned int v2062;
  unsigned int *v2063;
  uint64_t v2064;
  unsigned int v2065;
  uint64_t *v2066;
  int v2067;
  unsigned int v2068;
  uint64_t *v2069;
  uint64_t v2070;
  unsigned int v2071;
  unsigned int v2072;
  uint64_t v2073;
  uint64_t v2074;
  uint64_t v2075;
  int64x2_t v2076;
  int64x2_t *v2077;
  __int128 v2078;
  uint64_t v2079;
  int64x2_t v2080;
  uint64_t v2081;
  __int128 v2082;
  uint64_t v2083;
  int64x2_t v2084;
  uint64_t v2085;
  __int128 v2086;
  uint64_t v2087;
  __int8 *v2088;
  int64x2_t *v2089;
  __int8 *v2090;
  int64x2_t *v2091;
  __int8 *v2092;
  int64x2_t *v2093;
  int64x2_t v2094;
  int64x2_t v2095;
  int64x2_t v2096;
  int64x2_t v2097;
  int64x2_t v2098;
  int64x2_t v2099;
  int64x2_t v2100;
  int64x2_t v2101;
  int64x2_t v2102;
  int64x2_t v2103;
  int64x2_t *v2104;
  int64x2_t *v2105;
  uint64_t *v2106;
  uint64_t v2107;
  uint64_t v2108;
  uint64_t v2109;
  uint64_t v2110;
  unsigned int v2111;
  unsigned int v2112;
  unsigned int *v2113;
  uint64_t v2114;
  unsigned int v2115;
  uint64_t *v2116;
  int v2117;
  unsigned int v2118;
  uint64_t *v2119;
  uint64_t v2120;
  unsigned int v2121;
  unsigned int v2122;
  uint64_t v2123;
  uint64_t v2124;
  uint64_t v2125;
  int64x2_t v2126;
  int64x2_t *v2127;
  __int128 v2128;
  uint64_t v2129;
  int64x2_t v2130;
  uint64_t v2131;
  __int128 v2132;
  uint64_t v2133;
  int64x2_t v2134;
  uint64_t v2135;
  __int128 v2136;
  uint64_t v2137;
  int64x2_t v2138;
  uint64_t v2139;
  __int128 v2140;
  uint64_t v2141;
  int64x2_t v2142;
  uint64_t v2143;
  __int8 *v2144;
  int64x2_t *v2145;
  __int8 *v2146;
  int64x2_t *v2147;
  __int8 *v2148;
  int64x2_t *v2149;
  __int8 *v2150;
  int64x2_t *v2151;
  int64x2_t v2152;
  int64x2_t *v2153;
  int64x2_t v2154;
  int64x2_t v2155;
  int64x2_t v2156;
  int64x2_t v2157;
  int64x2_t v2158;
  int64x2_t v2159;
  int64x2_t v2160;
  int64x2_t v2161;
  int64x2_t v2162;
  int64x2_t v2163;
  uint64_t v2164;
  __int128 v2165;
  int64x2_t v2166;
  int64x2_t v2167;
  int64x2_t *v2168;
  int64x2_t *v2169;
  uint64_t *v2170;
  uint64_t v2171;
  uint64_t v2172;
  uint64_t v2173;
  uint64_t v2174;
  unsigned int v2175;
  unsigned int v2176;
  unsigned int *v2177;
  uint64_t v2178;
  unsigned int v2179;
  uint64_t *v2180;
  int v2181;
  unsigned int v2182;
  uint64_t *v2183;
  uint64_t v2184;
  unsigned int v2185;
  unsigned int v2186;
  uint64_t v2187;
  uint64_t v2188;
  uint64_t v2189;
  int64x2_t v2190;
  int64x2_t *v2191;
  __int128 v2192;
  uint64_t v2193;
  int64x2_t v2194;
  uint64_t v2195;
  __int128 v2196;
  uint64_t v2197;
  int64x2_t v2198;
  uint64_t v2199;
  __int128 v2200;
  uint64_t v2201;
  __int8 *v2202;
  int64x2_t *v2203;
  __int8 *v2204;
  int64x2_t *v2205;
  __int8 *v2206;
  int64x2_t *v2207;
  int64x2_t v2208;
  int64x2_t v2209;
  int64x2_t v2210;
  int64x2_t v2211;
  int64x2_t v2212;
  int64x2_t v2213;
  int64x2_t v2214;
  int64x2_t v2215;
  int64x2_t v2216;
  int64x2_t v2217;
  int64x2_t *v2218;
  int64x2_t *v2219;
  uint64_t *v2220;
  uint64_t v2221;
  uint64_t v2222;
  uint64_t v2223;
  uint64_t v2224;
  unsigned int v2225;
  unsigned int v2226;
  unsigned int *v2227;
  uint64_t v2228;
  unsigned int v2229;
  uint64_t *v2230;
  int v2231;
  unsigned int v2232;
  uint64_t *v2233;
  uint64_t v2234;
  unsigned int v2235;
  unsigned int v2236;
  uint64_t v2237;
  uint64_t v2238;
  uint64_t v2239;
  int64x2_t v2240;
  int64x2_t *v2241;
  __int128 v2242;
  uint64_t v2243;
  int64x2_t v2244;
  uint64_t v2245;
  __int128 v2246;
  uint64_t v2247;
  int64x2_t v2248;
  uint64_t v2249;
  __int128 v2250;
  uint64_t v2251;
  __int8 *v2252;
  int64x2_t *v2253;
  __int8 *v2254;
  int64x2_t *v2255;
  __int8 *v2256;
  int64x2_t *v2257;
  int64x2_t v2258;
  int64x2_t v2259;
  int64x2_t v2260;
  int64x2_t v2261;
  int64x2_t v2262;
  int64x2_t v2263;
  int64x2_t v2264;
  int64x2_t v2265;
  int64x2_t v2266;
  int64x2_t v2267;
  int64x2_t *v2268;
  int64x2_t *v2269;
  uint64_t *v2270;
  uint64_t v2271;
  uint64_t v2272;
  uint64_t v2273;
  uint64_t v2274;
  unsigned int v2275;
  unsigned int v2276;
  unsigned int *v2277;
  uint64_t v2278;
  unsigned int v2279;
  uint64_t *v2280;
  int v2281;
  unsigned int v2282;
  uint64_t *v2283;
  uint64_t v2284;
  unsigned int v2285;
  unsigned int v2286;
  uint64_t v2287;
  uint64_t v2288;
  uint64_t v2289;
  uint64_t v2290;
  int64x2_t *v2291;
  int64x2_t v2292;
  __int128 v2293;
  uint64_t v2294;
  uint64_t v2295;
  int8x16_t v2296;
  unint64_t v2297;
  __int8 *v2298;
  int64x2_t *v2299;
  int64x2_t v2300;
  __int128 v2301;
  int64x2_t v2302;
  int64x2_t v2303;
  int64x2_t *v2304;
  uint64_t v2305;
  uint64_t *v2306;
  uint64_t v2307;
  uint64_t v2308;
  uint64_t v2309;
  uint64_t v2310;
  unsigned int v2311;
  unsigned int v2312;
  unsigned int *v2313;
  uint64_t v2314;
  unsigned int v2315;
  uint64_t *v2316;
  int v2317;
  unsigned int v2318;
  uint64_t *v2319;
  uint64_t v2320;
  unsigned int v2321;
  unsigned int v2322;
  uint64_t v2323;
  uint64_t v2324;
  uint64_t v2325;
  int8x16_t v2326;
  uint64_t v2327;
  unint64_t v2328;
  int8x16_t *v2329;
  _QWORD *v2330;
  uint64_t *v2331;
  uint64_t v2332;
  uint64_t v2333;
  uint64_t v2334;
  uint64_t v2335;
  unsigned int v2336;
  unsigned int v2337;
  unsigned int *v2338;
  uint64_t v2339;
  unsigned int v2340;
  uint64_t *v2341;
  int v2342;
  unsigned int v2343;
  uint64_t *v2344;
  uint64_t v2345;
  unsigned int v2346;
  unsigned int v2347;
  uint64_t v2348;
  uint64_t v2349;
  uint64_t v2350;
  uint64_t v2351;
  int64x2_t *v2352;
  int64x2_t v2353;
  __int128 v2354;
  uint64_t v2355;
  uint64_t v2356;
  int8x16_t v2357;
  unint64_t v2358;
  __int8 *v2359;
  int64x2_t *v2360;
  int64x2_t v2361;
  __int128 v2362;
  int64x2_t v2363;
  int64x2_t v2364;
  int64x2_t *v2365;
  uint64_t v2366;
  uint64_t *v2367;
  uint64_t v2368;
  uint64_t v2369;
  uint64_t v2370;
  uint64_t v2371;
  unsigned int v2372;
  unsigned int v2373;
  unsigned int *v2374;
  uint64_t v2375;
  unsigned int v2376;
  uint64_t *v2377;
  int v2378;
  unsigned int v2379;
  uint64_t *v2380;
  uint64_t v2381;
  unsigned int v2382;
  unsigned int v2383;
  uint64_t v2384;
  uint64_t v2385;
  uint64_t v2386;
  int64x2_t v2387;
  int64x2_t *v2388;
  __int128 v2389;
  uint64_t v2390;
  int64x2_t v2391;
  uint64_t v2392;
  __int128 v2393;
  uint64_t v2394;
  __int8 *v2395;
  int64x2_t *v2396;
  __int8 *v2397;
  int64x2_t *v2398;
  int64x2_t v2399;
  int64x2_t v2400;
  int64x2_t v2401;
  int64x2_t v2402;
  int64x2_t v2403;
  int64x2_t v2404;
  int64x2_t v2405;
  int64x2_t *v2406;
  int64x2_t *v2407;
  uint64_t *v2408;
  uint64_t v2409;
  uint64_t v2410;
  uint64_t v2411;
  uint64_t v2412;
  unsigned int v2413;
  unsigned int v2414;
  unsigned int *v2415;
  uint64_t v2416;
  unsigned int v2417;
  uint64_t *v2418;
  int v2419;
  unsigned int v2420;
  uint64_t *v2421;
  uint64_t v2422;
  unsigned int v2423;
  unsigned int v2424;
  uint64_t v2425;
  uint64_t v2426;
  uint64_t v2427;
  int64x2_t v2428;
  int64x2_t *v2429;
  __int128 v2430;
  uint64_t v2431;
  int64x2_t v2432;
  uint64_t v2433;
  __int128 v2434;
  uint64_t v2435;
  __int8 *v2436;
  int64x2_t *v2437;
  __int8 *v2438;
  int64x2_t *v2439;
  int64x2_t v2440;
  int64x2_t v2441;
  int64x2_t v2442;
  int64x2_t v2443;
  int64x2_t v2444;
  int64x2_t v2445;
  int64x2_t v2446;
  int64x2_t *v2447;
  int64x2_t *v2448;
  uint64_t *v2449;
  uint64_t v2450;
  uint64_t v2451;
  uint64_t v2452;
  uint64_t v2453;
  unsigned int v2454;
  unsigned int v2455;
  unsigned int *v2456;
  uint64_t v2457;
  unsigned int v2458;
  uint64_t *v2459;
  int v2460;
  unsigned int v2461;
  uint64_t *v2462;
  uint64_t v2463;
  unsigned int v2464;
  unsigned int v2465;
  uint64_t v2466;
  uint64_t v2467;
  uint64_t v2468;
  uint64_t v2469;
  int64x2_t *v2470;
  int64x2_t v2471;
  __int128 v2472;
  uint64_t v2473;
  uint64_t v2474;
  int8x16_t v2475;
  unint64_t v2476;
  __int8 *v2477;
  int64x2_t *v2478;
  int64x2_t v2479;
  __int128 v2480;
  int64x2_t v2481;
  int64x2_t v2482;
  int64x2_t *v2483;
  uint64_t v2484;
  uint64_t *v2485;
  uint64_t v2486;
  uint64_t v2487;
  uint64_t v2488;
  uint64_t v2489;
  unsigned int v2490;
  unsigned int v2491;
  unsigned int *v2492;
  uint64_t v2493;
  unsigned int v2494;
  uint64_t *v2495;
  int v2496;
  unsigned int v2497;
  uint64_t *v2498;
  uint64_t v2499;
  unsigned int v2500;
  unsigned int v2501;
  uint64_t v2502;
  uint64_t v2503;
  uint64_t v2504;
  int64x2_t v2505;
  int64x2_t *v2506;
  int64x2_t v2507;
  int64x2_t v2508;
  int64x2_t v2509;
  int64x2_t v2510;
  int8x16_t v2511;
  int8x16_t v2512;
  int8x16_t v2513;
  int8x16_t v2514;
  unint64_t v2515;
  unint64_t v2516;
  unint64_t v2517;
  int8x16_t v2518;
  int8x16_t v2519;
  unint64_t v2520;
  unint64_t v2521;
  unint64_t v2522;
  int8x16_t v2523;
  int8x16_t v2524;
  int8x16_t v2525;
  int8x16_t v2526;
  unint64_t v2527;
  unint64_t v2528;
  unint64_t v2529;
  int8x16_t v2530;
  int8x16_t v2531;
  unint64_t v2532;
  unint64_t v2533;
  unint64_t v2534;
  int64x2_t *v2535;
  int64x2_t v2536;
  int64x2_t v2537;
  int64x2_t v2538;
  int64x2_t v2539;
  int64x2_t v2540;
  int64x2_t v2541;
  int64x2_t v2542;
  int64x2_t v2543;
  int64x2_t v2544;
  int64x2_t v2545;
  int64x2_t v2546;
  int64x2_t v2547;
  int64x2_t v2548;
  int64x2_t v2549;
  int64x2_t v2550;
  int64x2_t v2551;
  int8x16_t *v2552;
  int8x16_t *v2553;
  int8x16_t *v2554;
  int8x16_t *v2555;
  uint64_t *v2556;
  uint64_t v2557;
  uint64_t v2558;
  uint64_t v2559;
  uint64_t v2560;
  unsigned int v2561;
  unsigned int v2562;
  unsigned int *v2563;
  uint64_t v2564;
  unsigned int v2565;
  uint64_t *v2566;
  int v2567;
  unsigned int v2568;
  uint64_t *v2569;
  uint64_t v2570;
  unsigned int v2571;
  unsigned int v2572;
  uint64_t v2573;
  uint64_t v2574;
  uint64_t v2575;
  int64x2_t v2576;
  int64x2_t *v2577;
  int64x2_t v2578;
  __int128 v2579;
  __int128 v2580;
  __int128 v2581;
  int64x2_t v2582;
  int64x2_t v2583;
  int64x2_t v2584;
  __int128 v2585;
  __int128 v2586;
  __int128 v2587;
  int64x2_t v2588;
  int64x2_t v2589;
  int64x2_t v2590;
  __int128 v2591;
  __int128 v2592;
  __int128 v2593;
  int64x2_t v2594;
  int64x2_t v2595;
  int64x2_t v2596;
  __int128 v2597;
  __int128 v2598;
  __int128 v2599;
  int64x2_t v2600;
  int64x2_t v2601;
  int64x2_t v2602;
  __int8 *v2603;
  int64x2_t *v2604;
  __int8 *v2605;
  int64x2_t *v2606;
  __int8 *v2607;
  int64x2_t *v2608;
  __int8 *v2609;
  int64x2_t *v2610;
  int64x2_t v2611;
  int64x2_t *v2612;
  int64x2_t v2613;
  int64x2_t v2614;
  int64x2_t v2615;
  int64x2_t v2616;
  int64x2_t v2617;
  int64x2_t v2618;
  int64x2_t v2619;
  int64x2_t v2620;
  int64x2_t v2621;
  int64x2_t v2622;
  int64x2_t v2623;
  int64x2_t v2624;
  int64x2_t v2625;
  int64x2_t v2626;
  int64x2_t v2627;
  int64x2_t v2628;
  int64x2_t v2629;
  int64x2_t v2630;
  int64x2_t v2631;
  int64x2_t v2632;
  int64x2_t v2633;
  int64x2_t v2634;
  __int128 v2635;
  __int128 v2636;
  __int128 v2637;
  int64x2_t v2638;
  int64x2_t v2639;
  int64x2_t *v2640;
  int64x2_t *v2641;
  int64x2_t *v2642;
  int64x2_t *v2643;
  int64x2_t *v2644;
  uint64_t *v2645;
  uint64_t v2646;
  uint64_t v2647;
  uint64_t v2648;
  uint64_t v2649;
  unsigned int v2650;
  unsigned int v2651;
  unsigned int *v2652;
  uint64_t v2653;
  unsigned int v2654;
  uint64_t *v2655;
  int v2656;
  unsigned int v2657;
  uint64_t *v2658;
  uint64_t v2659;
  unsigned int v2660;
  unsigned int v2661;
  uint64_t v2662;
  uint64_t v2663;
  uint64_t v2664;
  int64x2_t v2665;
  int64x2_t *v2666;
  int64x2_t v2667;
  int64x2_t v2668;
  int64x2_t v2669;
  int64x2_t v2670;
  int8x16_t v2671;
  int8x16_t v2672;
  int8x16_t v2673;
  int8x16_t v2674;
  unint64_t v2675;
  unint64_t v2676;
  unint64_t v2677;
  int8x16_t v2678;
  int8x16_t v2679;
  unint64_t v2680;
  unint64_t v2681;
  unint64_t v2682;
  int8x16_t v2683;
  int8x16_t v2684;
  int8x16_t v2685;
  int8x16_t v2686;
  unint64_t v2687;
  unint64_t v2688;
  unint64_t v2689;
  int8x16_t v2690;
  int8x16_t v2691;
  unint64_t v2692;
  unint64_t v2693;
  unint64_t v2694;
  int64x2_t *v2695;
  int64x2_t v2696;
  int64x2_t v2697;
  int64x2_t v2698;
  int64x2_t v2699;
  int64x2_t v2700;
  int64x2_t v2701;
  int64x2_t v2702;
  int64x2_t v2703;
  int64x2_t v2704;
  int64x2_t v2705;
  int64x2_t v2706;
  int64x2_t v2707;
  int64x2_t v2708;
  int64x2_t v2709;
  int64x2_t v2710;
  int64x2_t v2711;
  int8x16_t *v2712;
  int8x16_t *v2713;
  int8x16_t *v2714;
  int8x16_t *v2715;
  uint64_t *v2716;
  uint64_t v2717;
  uint64_t v2718;
  uint64_t v2719;
  uint64_t v2720;
  unsigned int v2721;
  unsigned int v2722;
  unsigned int *v2723;
  uint64_t v2724;
  unsigned int v2725;
  uint64_t *v2726;
  int v2727;
  unsigned int v2728;
  uint64_t *v2729;
  uint64_t v2730;
  unsigned int v2731;
  unsigned int v2732;
  uint64_t v2733;
  uint64_t v2734;
  uint64_t v2735;
  int64x2_t v2736;
  int64x2_t *v2737;
  int64x2_t v2738;
  int64x2_t v2739;
  int64x2_t v2740;
  int64x2_t v2741;
  int8x16_t v2742;
  int8x16_t v2743;
  int8x16_t v2744;
  int8x16_t v2745;
  unint64_t v2746;
  unint64_t v2747;
  unint64_t v2748;
  int8x16_t v2749;
  int8x16_t v2750;
  unint64_t v2751;
  unint64_t v2752;
  unint64_t v2753;
  int8x16_t v2754;
  int8x16_t v2755;
  int8x16_t v2756;
  int8x16_t v2757;
  unint64_t v2758;
  unint64_t v2759;
  unint64_t v2760;
  int8x16_t v2761;
  int8x16_t v2762;
  unint64_t v2763;
  unint64_t v2764;
  unint64_t v2765;
  int64x2_t *v2766;
  int64x2_t v2767;
  int64x2_t v2768;
  int64x2_t v2769;
  int64x2_t v2770;
  int64x2_t v2771;
  int64x2_t v2772;
  int64x2_t v2773;
  int64x2_t v2774;
  int64x2_t v2775;
  int64x2_t v2776;
  int64x2_t v2777;
  int64x2_t v2778;
  int64x2_t v2779;
  int64x2_t v2780;
  int64x2_t v2781;
  int64x2_t v2782;
  int8x16_t *v2783;
  int8x16_t *v2784;
  int8x16_t *v2785;
  int8x16_t *v2786;
  uint64_t *v2787;
  uint64_t v2788;
  uint64_t v2789;
  uint64_t v2790;
  uint64_t v2791;
  unsigned int v2792;
  unsigned int v2793;
  unsigned int *v2794;
  uint64_t v2795;
  unsigned int v2796;
  uint64_t *v2797;
  int v2798;
  unsigned int v2799;
  uint64_t *v2800;
  uint64_t v2801;
  unsigned int v2802;
  unsigned int v2803;
  uint64_t v2804;
  uint64_t v2805;
  uint64_t v2806;
  int64x2_t v2807;
  int64x2_t *v2808;
  int64x2_t v2809;
  __int128 v2810;
  __int128 v2811;
  __int128 v2812;
  int64x2_t v2813;
  int64x2_t v2814;
  int64x2_t v2815;
  __int8 *v2816;
  int64x2_t *v2817;
  int64x2_t v2818;
  int64x2_t *v2819;
  int64x2_t v2820;
  int64x2_t v2821;
  int64x2_t v2822;
  int64x2_t v2823;
  __int128 v2824;
  __int128 v2825;
  __int128 v2826;
  int64x2_t v2827;
  int64x2_t v2828;
  int64x2_t *v2829;
  int64x2_t *v2830;
  int64x2_t *v2831;
  int64x2_t *v2832;
  int64x2_t *v2833;
  uint64_t *v2834;
  uint64_t v2835;
  uint64_t v2836;
  uint64_t v2837;
  uint64_t v2838;
  unsigned int v2839;
  unsigned int v2840;
  unsigned int *v2841;
  uint64_t v2842;
  unsigned int v2843;
  uint64_t *v2844;
  int v2845;
  unsigned int v2846;
  uint64_t *v2847;
  uint64_t v2848;
  unsigned int v2849;
  unsigned int v2850;
  int8x16_t *v2851;
  uint64_t v2852;
  uint64_t v2853;
  int8x16_t v2854;
  int8x16_t v2855;
  int8x16_t v2856;
  unint64_t v2857;
  unint64_t v2858;
  unint64_t v2859;
  int8x16_t *v2860;
  _QWORD *v2861;
  uint64_t *v2862;
  uint64_t v2863;
  uint64_t v2864;
  uint64_t v2865;
  uint64_t v2866;
  unsigned int v2867;
  unsigned int v2868;
  unsigned int *v2869;
  uint64_t v2870;
  unsigned int v2871;
  uint64_t *v2872;
  int v2873;
  unsigned int v2874;
  uint64_t *v2875;
  uint64_t v2876;
  unsigned int v2877;
  unsigned int v2878;
  uint64_t v2879;
  uint64_t v2880;
  uint64_t v2881;
  int64x2_t v2882;
  int64x2_t *v2883;
  int64x2_t v2884;
  __int128 v2885;
  __int128 v2886;
  __int128 v2887;
  int64x2_t v2888;
  int64x2_t v2889;
  int64x2_t v2890;
  __int8 *v2891;
  int64x2_t *v2892;
  int64x2_t v2893;
  int64x2_t *v2894;
  int64x2_t v2895;
  int64x2_t v2896;
  int64x2_t v2897;
  int64x2_t v2898;
  __int128 v2899;
  __int128 v2900;
  __int128 v2901;
  int64x2_t v2902;
  int64x2_t v2903;
  int64x2_t *v2904;
  int64x2_t *v2905;
  int64x2_t *v2906;
  int64x2_t *v2907;
  int64x2_t *v2908;
  uint64_t *v2909;
  uint64_t v2910;
  uint64_t v2911;
  uint64_t v2912;
  uint64_t v2913;
  unsigned int v2914;
  unsigned int v2915;
  unsigned int *v2916;
  uint64_t v2917;
  unsigned int v2918;
  uint64_t *v2919;
  int v2920;
  unsigned int v2921;
  uint64_t *v2922;
  uint64_t v2923;
  unsigned int v2924;
  unsigned int v2925;
  uint64_t v2926;
  uint64_t v2927;
  uint64_t v2928;
  int64x2_t v2929;
  int64x2_t *v2930;
  int64x2_t v2931;
  __int128 v2932;
  __int128 v2933;
  __int128 v2934;
  int64x2_t v2935;
  int64x2_t v2936;
  int64x2_t v2937;
  __int128 v2938;
  __int128 v2939;
  __int128 v2940;
  __int8 *v2941;
  int64x2_t *v2942;
  __int8 *v2943;
  int64x2_t v2944;
  int64x2_t *v2945;
  int64x2_t v2946;
  int64x2_t v2947;
  int64x2_t v2948;
  int64x2_t v2949;
  int64x2_t v2950;
  int64x2_t v2951;
  int64x2_t v2952;
  int64x2_t v2953;
  int64x2_t v2954;
  int64x2_t v2955;
  int64x2_t v2956;
  int64x2_t *v2957;
  int64x2_t *v2958;
  int64x2_t *v2959;
  int64x2_t *v2960;
  int64x2_t *v2961;
  uint64_t *v2962;
  uint64_t v2963;
  uint64_t v2964;
  uint64_t v2965;
  uint64_t v2966;
  unsigned int v2967;
  unsigned int v2968;
  unsigned int *v2969;
  uint64_t v2970;
  unsigned int v2971;
  uint64_t *v2972;
  int v2973;
  unsigned int v2974;
  uint64_t *v2975;
  uint64_t v2976;
  unsigned int v2977;
  unsigned int v2978;
  uint64_t v2979;
  uint64_t v2980;
  uint64_t v2981;
  int64x2_t v2982;
  int64x2_t *v2983;
  int64x2_t v2984;
  __int128 v2985;
  __int128 v2986;
  __int128 v2987;
  int64x2_t v2988;
  int64x2_t v2989;
  int64x2_t v2990;
  __int128 v2991;
  __int128 v2992;
  __int128 v2993;
  __int8 *v2994;
  int64x2_t *v2995;
  __int8 *v2996;
  int64x2_t v2997;
  int64x2_t *v2998;
  int64x2_t v2999;
  int64x2_t v3000;
  int64x2_t v3001;
  int64x2_t v3002;
  int64x2_t v3003;
  int64x2_t v3004;
  int64x2_t v3005;
  int64x2_t v3006;
  int64x2_t v3007;
  int64x2_t v3008;
  int64x2_t v3009;
  int64x2_t *v3010;
  int64x2_t *v3011;
  int64x2_t *v3012;
  int64x2_t *v3013;
  int64x2_t *v3014;
  uint64_t *v3015;
  uint64_t v3016;
  uint64_t v3017;
  uint64_t v3018;
  uint64_t v3019;
  unsigned int v3020;
  unsigned int v3021;
  unsigned int *v3022;
  uint64_t v3023;
  unsigned int v3024;
  uint64_t *v3025;
  int v3026;
  unsigned int v3027;
  uint64_t *v3028;
  uint64_t v3029;
  unsigned int v3030;
  unsigned int v3031;
  uint64_t v3032;
  uint64_t v3033;
  uint64_t v3034;
  int64x2_t v3035;
  int64x2_t *v3036;
  int64x2_t v3037;
  __int128 v3038;
  __int128 v3039;
  __int128 v3040;
  int64x2_t v3041;
  int64x2_t v3042;
  int64x2_t v3043;
  __int8 *v3044;
  int64x2_t *v3045;
  int64x2_t v3046;
  int64x2_t *v3047;
  int64x2_t v3048;
  int64x2_t v3049;
  int64x2_t v3050;
  int64x2_t v3051;
  __int128 v3052;
  __int128 v3053;
  __int128 v3054;
  int64x2_t v3055;
  int64x2_t v3056;
  int64x2_t *v3057;
  int64x2_t *v3058;
  int64x2_t *v3059;
  int64x2_t *v3060;
  int64x2_t *v3061;
  uint64_t *v3062;
  uint64_t v3063;
  uint64_t v3064;
  uint64_t v3065;
  uint64_t v3066;
  unsigned int v3067;
  unsigned int v3068;
  unsigned int *v3069;
  uint64_t v3070;
  unsigned int v3071;
  uint64_t *v3072;
  int v3073;
  unsigned int v3074;
  uint64_t *v3075;
  uint64_t v3076;
  unsigned int v3077;
  unsigned int v3078;
  uint64_t v3079;
  uint64_t v3080;
  uint64_t v3081;
  int64x2_t v3082;
  int64x2_t *v3083;
  int64x2_t v3084;
  int64x2_t v3085;
  int64x2_t v3086;
  int64x2_t v3087;
  int8x16_t v3088;
  int8x16_t v3089;
  int8x16_t v3090;
  int8x16_t v3091;
  unint64_t v3092;
  unint64_t v3093;
  unint64_t v3094;
  int8x16_t v3095;
  int8x16_t v3096;
  unint64_t v3097;
  unint64_t v3098;
  unint64_t v3099;
  int8x16_t v3100;
  int8x16_t v3101;
  int8x16_t v3102;
  int8x16_t v3103;
  unint64_t v3104;
  unint64_t v3105;
  unint64_t v3106;
  int8x16_t v3107;
  int8x16_t v3108;
  unint64_t v3109;
  unint64_t v3110;
  unint64_t v3111;
  int64x2_t *v3112;
  int64x2_t v3113;
  int64x2_t v3114;
  int64x2_t v3115;
  int64x2_t v3116;
  int64x2_t v3117;
  int64x2_t v3118;
  int64x2_t v3119;
  int64x2_t v3120;
  int64x2_t v3121;
  int64x2_t v3122;
  int64x2_t v3123;
  int64x2_t v3124;
  int64x2_t v3125;
  int64x2_t v3126;
  int64x2_t v3127;
  int64x2_t v3128;
  int8x16_t *v3129;
  int8x16_t *v3130;
  int8x16_t *v3131;
  int8x16_t *v3132;
  uint64_t *v3133;
  uint64_t v3134;
  uint64_t v3135;
  uint64_t v3136;
  uint64_t v3137;
  unsigned int v3138;
  unsigned int v3139;
  unsigned int *v3140;
  uint64_t v3141;
  unsigned int v3142;
  uint64_t *v3143;
  int v3144;
  unsigned int v3145;
  uint64_t *v3146;
  uint64_t v3147;
  unsigned int v3148;
  unsigned int v3149;
  uint64_t v3150;
  uint64_t v3151;
  uint64_t v3152;
  int64x2_t v3153;
  int64x2_t *v3154;
  int64x2_t v3155;
  __int128 v3156;
  __int128 v3157;
  __int128 v3158;
  int64x2_t v3159;
  int64x2_t v3160;
  int64x2_t v3161;
  __int128 v3162;
  __int128 v3163;
  __int128 v3164;
  int64x2_t v3165;
  int64x2_t v3166;
  int64x2_t v3167;
  __int128 v3168;
  __int128 v3169;
  __int128 v3170;
  int64x2_t v3171;
  int64x2_t v3172;
  int64x2_t v3173;
  __int128 v3174;
  __int128 v3175;
  __int128 v3176;
  int64x2_t v3177;
  int64x2_t v3178;
  int64x2_t v3179;
  __int8 *v3180;
  int64x2_t *v3181;
  __int8 *v3182;
  int64x2_t *v3183;
  __int8 *v3184;
  int64x2_t *v3185;
  __int8 *v3186;
  int64x2_t *v3187;
  int64x2_t v3188;
  int64x2_t *v3189;
  int64x2_t v3190;
  int64x2_t v3191;
  int64x2_t v3192;
  int64x2_t v3193;
  int64x2_t v3194;
  int64x2_t v3195;
  int64x2_t v3196;
  int64x2_t v3197;
  int64x2_t v3198;
  int64x2_t v3199;
  int64x2_t v3200;
  int64x2_t v3201;
  int64x2_t v3202;
  int64x2_t v3203;
  int64x2_t v3204;
  int64x2_t v3205;
  int64x2_t v3206;
  int64x2_t v3207;
  int64x2_t v3208;
  int64x2_t v3209;
  int64x2_t v3210;
  int64x2_t v3211;
  __int128 v3212;
  __int128 v3213;
  __int128 v3214;
  int64x2_t v3215;
  int64x2_t v3216;
  int64x2_t *v3217;
  int64x2_t *v3218;
  int64x2_t *v3219;
  int64x2_t *v3220;
  int64x2_t *v3221;
  uint64_t *v3222;
  uint64_t v3223;
  uint64_t v3224;
  uint64_t v3225;
  uint64_t v3226;
  unsigned int v3227;
  unsigned int v3228;
  unsigned int *v3229;
  uint64_t v3230;
  unsigned int v3231;
  uint64_t *v3232;
  int v3233;
  unsigned int v3234;
  uint64_t *v3235;
  uint64_t v3236;
  unsigned int v3237;
  unsigned int v3238;
  uint64_t v3239;
  uint64_t v3240;
  uint64_t v3241;
  int64x2_t v3242;
  int64x2_t *v3243;
  int64x2_t v3244;
  int64x2_t v3245;
  int64x2_t v3246;
  int64x2_t v3247;
  int8x16_t v3248;
  int8x16_t v3249;
  int8x16_t v3250;
  int8x16_t v3251;
  unint64_t v3252;
  unint64_t v3253;
  unint64_t v3254;
  int8x16_t v3255;
  int8x16_t v3256;
  unint64_t v3257;
  unint64_t v3258;
  unint64_t v3259;
  int8x16_t v3260;
  int8x16_t v3261;
  int8x16_t v3262;
  int8x16_t v3263;
  unint64_t v3264;
  unint64_t v3265;
  unint64_t v3266;
  int8x16_t v3267;
  int8x16_t v3268;
  unint64_t v3269;
  unint64_t v3270;
  unint64_t v3271;
  int64x2_t *v3272;
  int64x2_t v3273;
  int64x2_t v3274;
  int64x2_t v3275;
  int64x2_t v3276;
  int64x2_t v3277;
  int64x2_t v3278;
  int64x2_t v3279;
  int64x2_t v3280;
  int64x2_t v3281;
  int64x2_t v3282;
  int64x2_t v3283;
  int64x2_t v3284;
  int64x2_t v3285;
  int64x2_t v3286;
  int64x2_t v3287;
  int64x2_t v3288;
  int8x16_t *v3289;
  int8x16_t *v3290;
  int8x16_t *v3291;
  int8x16_t *v3292;
  uint64_t *v3293;
  uint64_t v3294;
  uint64_t v3295;
  uint64_t v3296;
  uint64_t v3297;
  unsigned int v3298;
  unsigned int v3299;
  unsigned int *v3300;
  uint64_t v3301;
  unsigned int v3302;
  uint64_t *v3303;
  int v3304;
  unsigned int v3305;
  uint64_t *v3306;
  uint64_t v3307;
  unsigned int v3308;
  unsigned int v3309;
  uint64_t v3310;
  uint64_t v3311;
  uint64_t v3312;
  int64x2_t v3313;
  int64x2_t *v3314;
  int64x2_t v3315;
  int64x2_t v3316;
  int64x2_t v3317;
  int64x2_t v3318;
  int8x16_t v3319;
  int8x16_t v3320;
  int8x16_t v3321;
  int8x16_t v3322;
  unint64_t v3323;
  unint64_t v3324;
  unint64_t v3325;
  int8x16_t v3326;
  int8x16_t v3327;
  unint64_t v3328;
  unint64_t v3329;
  unint64_t v3330;
  int8x16_t v3331;
  int8x16_t v3332;
  int8x16_t v3333;
  int8x16_t v3334;
  unint64_t v3335;
  unint64_t v3336;
  unint64_t v3337;
  int8x16_t v3338;
  int8x16_t v3339;
  unint64_t v3340;
  unint64_t v3341;
  unint64_t v3342;
  int64x2_t *v3343;
  int64x2_t v3344;
  int64x2_t v3345;
  int64x2_t v3346;
  int64x2_t v3347;
  int64x2_t v3348;
  int64x2_t v3349;
  int64x2_t v3350;
  int64x2_t v3351;
  int64x2_t v3352;
  int64x2_t v3353;
  int64x2_t v3354;
  int64x2_t v3355;
  int64x2_t v3356;
  int64x2_t v3357;
  int64x2_t v3358;
  int64x2_t v3359;
  int8x16_t *v3360;
  int8x16_t *v3361;
  int8x16_t *v3362;
  int8x16_t *v3363;
  uint64_t *v3364;
  uint64_t v3365;
  uint64_t v3366;
  uint64_t v3367;
  uint64_t v3368;
  unsigned int v3369;
  unsigned int v3370;
  unsigned int *v3371;
  uint64_t v3372;
  unsigned int v3373;
  uint64_t *v3374;
  int v3375;
  unsigned int v3376;
  uint64_t *v3377;
  uint64_t v3378;
  unsigned int v3379;
  unsigned int v3380;
  uint64_t v3381;
  uint64_t v3382;
  uint64_t v3383;
  int64x2_t v3384;
  int64x2_t *v3385;
  int64x2_t v3386;
  __int128 v3387;
  __int128 v3388;
  __int128 v3389;
  int64x2_t v3390;
  int64x2_t v3391;
  int64x2_t v3392;
  __int8 *v3393;
  int64x2_t *v3394;
  int64x2_t v3395;
  int64x2_t *v3396;
  int64x2_t v3397;
  int64x2_t v3398;
  int64x2_t v3399;
  int64x2_t v3400;
  __int128 v3401;
  __int128 v3402;
  __int128 v3403;
  int64x2_t v3404;
  int64x2_t v3405;
  int64x2_t *v3406;
  int64x2_t *v3407;
  int64x2_t *v3408;
  int64x2_t *v3409;
  int64x2_t *v3410;
  uint64_t *v3411;
  uint64_t v3412;
  uint64_t v3413;
  uint64_t v3414;
  uint64_t v3415;
  unsigned int v3416;
  unsigned int v3417;
  unsigned int *v3418;
  uint64_t v3419;
  unsigned int v3420;
  uint64_t *v3421;
  int v3422;
  unsigned int v3423;
  uint64_t *v3424;
  uint64_t v3425;
  unsigned int v3426;
  unsigned int v3427;
  int8x16_t *v3428;
  uint64_t v3429;
  uint64_t v3430;
  int8x16_t v3431;
  int8x16_t v3432;
  int8x16_t v3433;
  unint64_t v3434;
  unint64_t v3435;
  unint64_t v3436;
  int8x16_t *v3437;
  _QWORD *v3438;
  uint64_t *v3439;
  uint64_t v3440;
  uint64_t v3441;
  uint64_t v3442;
  uint64_t v3443;
  unsigned int v3444;
  unsigned int v3445;
  unsigned int *v3446;
  uint64_t v3447;
  unsigned int v3448;
  uint64_t *v3449;
  int v3450;
  unsigned int v3451;
  uint64_t *v3452;
  uint64_t v3453;
  unsigned int v3454;
  unsigned int v3455;
  uint64_t v3456;
  uint64_t v3457;
  uint64_t v3458;
  int64x2_t v3459;
  int64x2_t *v3460;
  int64x2_t v3461;
  __int128 v3462;
  __int128 v3463;
  __int128 v3464;
  int64x2_t v3465;
  int64x2_t v3466;
  int64x2_t v3467;
  __int8 *v3468;
  int64x2_t *v3469;
  int64x2_t v3470;
  int64x2_t *v3471;
  int64x2_t v3472;
  int64x2_t v3473;
  int64x2_t v3474;
  int64x2_t v3475;
  __int128 v3476;
  __int128 v3477;
  __int128 v3478;
  int64x2_t v3479;
  int64x2_t v3480;
  int64x2_t *v3481;
  int64x2_t *v3482;
  int64x2_t *v3483;
  int64x2_t *v3484;
  int64x2_t *v3485;
  uint64_t *v3486;
  uint64_t v3487;
  uint64_t v3488;
  uint64_t v3489;
  uint64_t v3490;
  unsigned int v3491;
  unsigned int v3492;
  unsigned int *v3493;
  uint64_t v3494;
  unsigned int v3495;
  uint64_t *v3496;
  int v3497;
  unsigned int v3498;
  uint64_t *v3499;
  uint64_t v3500;
  unsigned int v3501;
  unsigned int v3502;
  uint64_t v3503;
  uint64_t v3504;
  uint64_t v3505;
  int64x2_t v3506;
  int64x2_t *v3507;
  int64x2_t v3508;
  __int128 v3509;
  __int128 v3510;
  __int128 v3511;
  int64x2_t v3512;
  int64x2_t v3513;
  int64x2_t v3514;
  __int128 v3515;
  __int128 v3516;
  __int128 v3517;
  __int8 *v3518;
  int64x2_t *v3519;
  __int8 *v3520;
  int64x2_t v3521;
  int64x2_t *v3522;
  int64x2_t v3523;
  int64x2_t v3524;
  int64x2_t v3525;
  int64x2_t v3526;
  int64x2_t v3527;
  int64x2_t v3528;
  int64x2_t v3529;
  int64x2_t v3530;
  int64x2_t v3531;
  int64x2_t v3532;
  int64x2_t v3533;
  int64x2_t *v3534;
  int64x2_t *v3535;
  int64x2_t *v3536;
  int64x2_t *v3537;
  int64x2_t *v3538;
  uint64_t *v3539;
  uint64_t v3540;
  uint64_t v3541;
  uint64_t v3542;
  uint64_t v3543;
  unsigned int v3544;
  unsigned int v3545;
  unsigned int *v3546;
  uint64_t v3547;
  unsigned int v3548;
  uint64_t *v3549;
  int v3550;
  unsigned int v3551;
  uint64_t *v3552;
  uint64_t v3553;
  unsigned int v3554;
  unsigned int v3555;
  uint64_t v3556;
  uint64_t v3557;
  uint64_t v3558;
  int64x2_t v3559;
  int64x2_t *v3560;
  int64x2_t v3561;
  __int128 v3562;
  __int128 v3563;
  __int128 v3564;
  int64x2_t v3565;
  int64x2_t v3566;
  int64x2_t v3567;
  __int128 v3568;
  __int128 v3569;
  __int128 v3570;
  __int8 *v3571;
  int64x2_t *v3572;
  __int8 *v3573;
  int64x2_t v3574;
  int64x2_t *v3575;
  int64x2_t v3576;
  int64x2_t v3577;
  int64x2_t v3578;
  int64x2_t v3579;
  int64x2_t v3580;
  int64x2_t v3581;
  int64x2_t v3582;
  int64x2_t v3583;
  int64x2_t v3584;
  int64x2_t v3585;
  int64x2_t v3586;
  int64x2_t *v3587;
  int64x2_t *v3588;
  int64x2_t *v3589;
  int64x2_t *v3590;
  int64x2_t *v3591;
  uint64_t *v3592;
  uint64_t v3593;
  uint64_t v3594;
  uint64_t v3595;
  uint64_t v3596;
  unsigned int v3597;
  unsigned int v3598;
  unsigned int *v3599;
  uint64_t v3600;
  unsigned int v3601;
  uint64_t *v3602;
  int v3603;
  unsigned int v3604;
  uint64_t *v3605;
  uint64_t v3606;
  unsigned int v3607;
  unsigned int v3608;
  uint64_t v3609;
  uint64_t v3610;
  uint64_t v3611;
  int64x2_t v3612;
  int64x2_t *v3613;
  int64x2_t v3614;
  __int128 v3615;
  __int128 v3616;
  __int128 v3617;
  int64x2_t v3618;
  int64x2_t v3619;
  int64x2_t v3620;
  __int8 *v3621;
  int64x2_t *v3622;
  int64x2_t v3623;
  int64x2_t *v3624;
  int64x2_t v3625;
  int64x2_t v3626;
  int64x2_t v3627;
  int64x2_t v3628;
  __int128 v3629;
  __int128 v3630;
  __int128 v3631;
  int64x2_t v3632;
  int64x2_t v3633;
  int64x2_t *v3634;
  int64x2_t *v3635;
  int64x2_t *v3636;
  int64x2_t *v3637;
  int64x2_t *v3638;
  uint64_t *v3639;
  uint64_t v3640;
  uint64_t v3641;
  uint64_t v3642;
  uint64_t v3643;
  unsigned int v3644;
  unsigned int v3645;
  unsigned int *v3646;
  uint64_t v3647;
  unsigned int v3648;
  uint64_t *v3649;
  int v3650;
  unsigned int v3651;
  uint64_t *v3652;
  uint64_t v3653;
  unsigned int v3654;
  unsigned int v3655;
  uint64_t v3656;
  uint64_t v3657;
  uint64_t v3658;
  uint64_t v3659;
  uint64_t v3660;
  __int128 v3661;
  int64x2_t v3662;
  __int128 v3663;
  __int128 v3664;
  __int128 v3665;
  __int128 v3666;
  __int128 v3667;
  uint64_t v3668;
  __int128 v3669;
  __int128 v3670;
  __int128 v3671;
  __int128 v3672;
  uint64_t v3673;
  __int128 v3674;
  __int128 v3675;
  __int128 v3676;
  __int128 v3677;
  uint64_t v3678;
  __int128 v3679;
  __int128 v3680;
  __int128 v3681;
  __int128 v3682;
  uint64_t v3683;
  __int128 v3684;
  __int128 v3685;
  __int128 v3686;
  __int128 v3687;
  uint64_t v3688;
  uint64_t v3689;
  uint64_t v3690;
  uint64_t v3691;
  uint64_t v3692;
  uint64_t v3693;
  int64x2_t v3694;
  int64x2_t *v3695;
  int64x2_t v3696;
  int64x2_t v3697;
  int64x2_t v3698;
  int64x2_t v3699;
  int64x2_t v3700;
  int64x2_t v3701;
  int64x2_t v3702;
  int64x2_t v3703;
  int64x2_t v3704;
  int64x2_t v3705;
  int64x2_t v3706;
  int64x2_t v3707;
  int64x2_t v3708;
  int64x2_t v3709;
  int64x2_t v3710;
  int64x2_t v3711;
  int64x2_t v3712;
  int64x2_t v3713;
  int64x2_t v3714;
  int64x2_t v3715;
  int64x2_t v3716;
  int64x2_t v3717;
  int64x2_t v3718;
  int64x2_t v3719;
  int64x2_t v3720;
  int64x2_t v3721;
  int64x2_t v3722;
  int64x2_t v3723;
  int64x2_t v3724;
  int64x2_t v3725;
  int64x2_t *v3726;
  int64x2_t *v3727;
  int64x2_t *v3728;
  int64x2_t *v3729;
  int64x2_t *v3730;
  int64x2_t *v3731;
  int64x2_t *v3732;
  int64x2_t *v3733;
  uint64_t *v3734;
  uint64_t v3735;
  uint64_t v3736;
  uint64_t v3737;
  uint64_t v3738;
  unsigned int v3739;
  unsigned int v3740;
  unsigned int *v3741;
  uint64_t v3742;
  unsigned int v3743;
  uint64_t *v3744;
  int v3745;
  unsigned int v3746;
  uint64_t *v3747;
  uint64_t v3748;
  unsigned int v3749;
  unsigned int v3750;
  uint64_t v3751;
  uint64_t v3752;
  uint64_t v3753;
  uint64_t v3754;
  __int128 v3755;
  __int128 v3756;
  uint64_t v3757;
  int8x16_t v3758;
  int8x16_t v3759;
  int8x16_t v3760;
  int8x16_t v3761;
  int8x16_t v3762;
  int8x16_t v3763;
  int8x16_t v3764;
  int8x16_t v3765;
  int8x16_t v3766;
  int8x16_t v3767;
  int8x16_t v3768;
  int8x16_t v3769;
  int8x16_t v3770;
  int8x16_t v3771;
  int8x16_t v3772;
  int8x16_t v3773;
  int8x16_t v3774;
  int8x16_t v3775;
  int8x16_t v3776;
  int8x16_t v3777;
  int8x16_t v3778;
  int8x16_t v3779;
  uint64_t v3780;
  unint64_t v3781;
  unint64_t v3782;
  unint64_t v3783;
  unint64_t v3784;
  unint64_t v3785;
  int64x2_t v3786;
  unint64_t v3787;
  uint64_t v3788;
  unint64_t v3789;
  int8x16_t v3790;
  unint64_t v3791;
  unint64_t v3792;
  uint64_t v3793;
  unint64_t v3794;
  int8x16_t v3795;
  unint64_t v3796;
  int8x16_t v3797;
  int8x16_t v3798;
  int8x16_t v3799;
  unint64_t v3800;
  unint64_t v3801;
  uint64_t v3802;
  uint64_t v3803;
  unint64_t v3804;
  int64x2_t v3805;
  int64x2_t v3806;
  int64x2_t v3807;
  int64x2_t v3808;
  int64x2_t v3809;
  int64x2_t v3810;
  int64x2_t v3811;
  int64x2_t v3812;
  int64x2_t v3813;
  int64x2_t v3814;
  int64x2_t v3815;
  int64x2_t v3816;
  int64x2_t v3817;
  int64x2_t v3818;
  int64x2_t v3819;
  int64x2_t v3820;
  __int128 v3821;
  int64x2_t v3822;
  __int128 v3823;
  int8x16_t v3824;
  int8x16_t v3825;
  int8x16_t v3826;
  int8x16_t v3827;
  int8x16_t v3828;
  int8x16_t v3829;
  int8x16_t v3830;
  int8x16_t v3831;
  int8x16_t v3832;
  int8x16_t v3833;
  int8x16_t v3834;
  int8x16_t v3835;
  int8x16_t v3836;
  int8x16_t v3837;
  int8x16_t v3838;
  int64x2_t v3839;
  int8x16_t v3840;
  int8x16_t v3841;
  int8x16_t v3842;
  uint64_t v3843;
  __int128 v3844;
  __int128 v3845;
  __int128 v3846;
  __int128 v3847;
  __int128 v3848;
  __int128 v3849;
  __int128 v3850;
  __int128 v3851;
  __int128 v3852;
  __int128 v3853;
  __int128 v3854;
  __int128 v3855;
  __int128 v3856;
  __int128 v3857;
  __int128 v3858;
  __int128 v3859;
  __int128 v3860;
  __int128 v3861;
  __int128 v3862;
  __int128 v3863;
  __int128 v3864;
  __int128 v3865;
  uint64_t v3866;
  uint64_t v3867;
  uint64_t v3868;
  uint64_t v3869;
  uint64_t v3870;
  int8x16_t *v3871;
  uint64_t v3872;
  uint64_t *v3873;
  uint64_t v3874;
  uint64_t v3875;
  uint64_t v3876;
  uint64_t v3877;
  unsigned int v3878;
  unsigned int v3879;
  unsigned int *v3880;
  uint64_t v3881;
  unsigned int v3882;
  uint64_t *v3883;
  int v3884;
  unsigned int v3885;
  uint64_t *v3886;
  uint64_t v3887;
  unsigned int v3888;
  unsigned int v3889;
  uint64_t v3890;
  uint64_t v3891;
  uint64_t v3892;
  uint64_t v3893;
  uint64_t v3894;
  __int128 v3895;
  int64x2_t v3896;
  __int128 v3897;
  __int128 v3898;
  __int128 v3899;
  __int128 v3900;
  __int128 v3901;
  uint64_t v3902;
  __int128 v3903;
  __int128 v3904;
  __int128 v3905;
  __int128 v3906;
  uint64_t v3907;
  __int128 v3908;
  __int128 v3909;
  __int128 v3910;
  __int128 v3911;
  uint64_t v3912;
  __int128 v3913;
  __int128 v3914;
  __int128 v3915;
  __int128 v3916;
  uint64_t v3917;
  __int128 v3918;
  __int128 v3919;
  __int128 v3920;
  __int128 v3921;
  uint64_t v3922;
  uint64_t v3923;
  uint64_t v3924;
  uint64_t v3925;
  uint64_t v3926;
  uint64_t v3927;
  int64x2_t v3928;
  int64x2_t *v3929;
  int64x2_t v3930;
  int64x2_t v3931;
  int64x2_t v3932;
  int64x2_t v3933;
  int64x2_t v3934;
  int64x2_t v3935;
  int64x2_t v3936;
  int64x2_t v3937;
  int64x2_t v3938;
  int64x2_t v3939;
  int64x2_t v3940;
  int64x2_t v3941;
  int64x2_t v3942;
  int64x2_t v3943;
  int64x2_t v3944;
  int64x2_t v3945;
  int64x2_t v3946;
  int64x2_t v3947;
  int64x2_t v3948;
  int64x2_t v3949;
  int64x2_t v3950;
  int64x2_t v3951;
  int64x2_t v3952;
  int64x2_t v3953;
  int64x2_t v3954;
  int64x2_t v3955;
  int64x2_t v3956;
  int64x2_t v3957;
  int64x2_t v3958;
  int64x2_t v3959;
  int64x2_t *v3960;
  int64x2_t *v3961;
  int64x2_t *v3962;
  int64x2_t *v3963;
  int64x2_t *v3964;
  int64x2_t *v3965;
  int64x2_t *v3966;
  int64x2_t *v3967;
  uint64_t *v3968;
  uint64_t v3969;
  uint64_t v3970;
  uint64_t v3971;
  uint64_t v3972;
  unsigned int v3973;
  unsigned int v3974;
  unsigned int *v3975;
  uint64_t v3976;
  unsigned int v3977;
  uint64_t *v3978;
  int v3979;
  unsigned int v3980;
  uint64_t *v3981;
  uint64_t v3982;
  unsigned int v3983;
  unsigned int v3984;
  uint64_t v3985;
  uint64_t v3986;
  uint64_t v3987;
  uint64_t v3988;
  uint64_t v3989;
  __int128 v3990;
  int64x2_t v3991;
  __int128 v3992;
  __int128 v3993;
  __int128 v3994;
  __int128 v3995;
  __int128 v3996;
  uint64_t v3997;
  __int128 v3998;
  __int128 v3999;
  __int128 v4000;
  __int128 v4001;
  uint64_t v4002;
  __int128 v4003;
  __int128 v4004;
  __int128 v4005;
  __int128 v4006;
  uint64_t v4007;
  __int128 v4008;
  __int128 v4009;
  __int128 v4010;
  __int128 v4011;
  uint64_t v4012;
  __int128 v4013;
  __int128 v4014;
  __int128 v4015;
  __int128 v4016;
  uint64_t v4017;
  uint64_t v4018;
  uint64_t v4019;
  uint64_t v4020;
  uint64_t v4021;
  uint64_t v4022;
  int64x2_t v4023;
  int64x2_t *v4024;
  int64x2_t v4025;
  int64x2_t v4026;
  int64x2_t v4027;
  int64x2_t v4028;
  int64x2_t v4029;
  int64x2_t v4030;
  int64x2_t v4031;
  int64x2_t v4032;
  int64x2_t v4033;
  int64x2_t v4034;
  int64x2_t v4035;
  int64x2_t v4036;
  int64x2_t v4037;
  int64x2_t v4038;
  int64x2_t v4039;
  int64x2_t v4040;
  int64x2_t v4041;
  int64x2_t v4042;
  int64x2_t v4043;
  int64x2_t v4044;
  int64x2_t v4045;
  int64x2_t v4046;
  int64x2_t v4047;
  int64x2_t v4048;
  int64x2_t v4049;
  int64x2_t v4050;
  int64x2_t v4051;
  int64x2_t v4052;
  int64x2_t v4053;
  int64x2_t v4054;
  int64x2_t *v4055;
  int64x2_t *v4056;
  int64x2_t *v4057;
  int64x2_t *v4058;
  int64x2_t *v4059;
  int64x2_t *v4060;
  int64x2_t *v4061;
  int64x2_t *v4062;
  uint64_t *v4063;
  uint64_t v4064;
  uint64_t v4065;
  uint64_t v4066;
  uint64_t v4067;
  unsigned int v4068;
  unsigned int v4069;
  unsigned int *v4070;
  uint64_t v4071;
  unsigned int v4072;
  uint64_t *v4073;
  int v4074;
  unsigned int v4075;
  uint64_t *v4076;
  uint64_t v4077;
  unsigned int v4078;
  unsigned int v4079;
  uint64_t v4080;
  uint64_t v4081;
  uint64_t v4082;
  uint64_t v4083;
  uint64_t v4084;
  __int128 v4085;
  int64x2_t v4086;
  __int128 v4087;
  __int128 v4088;
  __int128 v4089;
  __int128 v4090;
  __int128 v4091;
  uint64_t v4092;
  __int128 v4093;
  __int128 v4094;
  __int128 v4095;
  __int128 v4096;
  uint64_t v4097;
  uint64_t v4098;
  uint64_t v4099;
  int64x2_t v4100;
  int64x2_t *v4101;
  int64x2_t v4102;
  int64x2_t v4103;
  int64x2_t v4104;
  int64x2_t v4105;
  int64x2_t v4106;
  int64x2_t v4107;
  int64x2_t v4108;
  uint64_t v4109;
  __int128 v4110;
  __int128 v4111;
  __int128 v4112;
  __int128 v4113;
  int64x2_t v4114;
  int64x2_t v4115;
  int64x2_t *v4116;
  int64x2_t *v4117;
  int64x2_t *v4118;
  int64x2_t *v4119;
  int64x2_t *v4120;
  int64x2_t *v4121;
  int64x2_t *v4122;
  int64x2_t *v4123;
  uint64_t *v4124;
  uint64_t v4125;
  uint64_t v4126;
  uint64_t v4127;
  uint64_t v4128;
  unsigned int v4129;
  unsigned int v4130;
  unsigned int *v4131;
  uint64_t v4132;
  unsigned int v4133;
  uint64_t *v4134;
  int v4135;
  unsigned int v4136;
  uint64_t *v4137;
  uint64_t v4138;
  unsigned int v4139;
  unsigned int v4140;
  uint64_t v4141;
  uint64_t v4142;
  uint64_t v4143;
  int8x16_t v4144;
  int8x16_t v4145;
  int8x16_t v4146;
  int8x16_t v4147;
  uint64_t v4148;
  unint64_t v4149;
  unint64_t v4150;
  unint64_t v4151;
  unint64_t v4152;
  int8x16_t *v4153;
  _QWORD *v4154;
  uint64_t *v4155;
  uint64_t v4156;
  uint64_t v4157;
  uint64_t v4158;
  uint64_t v4159;
  unsigned int v4160;
  unsigned int v4161;
  unsigned int *v4162;
  uint64_t v4163;
  unsigned int v4164;
  uint64_t *v4165;
  int v4166;
  unsigned int v4167;
  uint64_t *v4168;
  uint64_t v4169;
  unsigned int v4170;
  unsigned int v4171;
  uint64_t v4172;
  uint64_t v4173;
  uint64_t v4174;
  uint64_t v4175;
  uint64_t v4176;
  __int128 v4177;
  int64x2_t v4178;
  __int128 v4179;
  __int128 v4180;
  __int128 v4181;
  __int128 v4182;
  __int128 v4183;
  uint64_t v4184;
  __int128 v4185;
  __int128 v4186;
  __int128 v4187;
  __int128 v4188;
  uint64_t v4189;
  uint64_t v4190;
  uint64_t v4191;
  int64x2_t v4192;
  int64x2_t *v4193;
  int64x2_t v4194;
  int64x2_t v4195;
  int64x2_t v4196;
  int64x2_t v4197;
  int64x2_t v4198;
  int64x2_t v4199;
  int64x2_t v4200;
  uint64_t v4201;
  __int128 v4202;
  __int128 v4203;
  __int128 v4204;
  __int128 v4205;
  int64x2_t v4206;
  int64x2_t v4207;
  int64x2_t *v4208;
  int64x2_t *v4209;
  int64x2_t *v4210;
  int64x2_t *v4211;
  int64x2_t *v4212;
  int64x2_t *v4213;
  int64x2_t *v4214;
  int64x2_t *v4215;
  uint64_t *v4216;
  uint64_t v4217;
  uint64_t v4218;
  uint64_t v4219;
  uint64_t v4220;
  unsigned int v4221;
  unsigned int v4222;
  unsigned int *v4223;
  uint64_t v4224;
  unsigned int v4225;
  uint64_t *v4226;
  int v4227;
  unsigned int v4228;
  uint64_t *v4229;
  uint64_t v4230;
  unsigned int v4231;
  unsigned int v4232;
  uint64_t v4233;
  uint64_t v4234;
  uint64_t v4235;
  uint64_t v4236;
  uint64_t v4237;
  __int128 v4238;
  int64x2_t v4239;
  __int128 v4240;
  __int128 v4241;
  __int128 v4242;
  __int128 v4243;
  __int128 v4244;
  uint64_t v4245;
  __int128 v4246;
  __int128 v4247;
  __int128 v4248;
  __int128 v4249;
  uint64_t v4250;
  __int128 v4251;
  __int128 v4252;
  __int128 v4253;
  __int128 v4254;
  uint64_t v4255;
  uint64_t v4256;
  uint64_t v4257;
  uint64_t v4258;
  int64x2_t v4259;
  int64x2_t *v4260;
  int64x2_t v4261;
  int64x2_t v4262;
  int64x2_t v4263;
  int64x2_t v4264;
  int64x2_t v4265;
  int64x2_t v4266;
  int64x2_t v4267;
  int64x2_t v4268;
  int64x2_t v4269;
  int64x2_t v4270;
  int64x2_t v4271;
  int64x2_t v4272;
  int64x2_t v4273;
  int64x2_t v4274;
  int64x2_t v4275;
  int64x2_t v4276;
  int64x2_t v4277;
  int64x2_t *v4278;
  int64x2_t *v4279;
  int64x2_t *v4280;
  int64x2_t *v4281;
  int64x2_t *v4282;
  int64x2_t *v4283;
  int64x2_t *v4284;
  int64x2_t *v4285;
  uint64_t *v4286;
  uint64_t v4287;
  uint64_t v4288;
  uint64_t v4289;
  uint64_t v4290;
  unsigned int v4291;
  unsigned int v4292;
  unsigned int *v4293;
  uint64_t v4294;
  unsigned int v4295;
  uint64_t *v4296;
  int v4297;
  unsigned int v4298;
  uint64_t *v4299;
  uint64_t v4300;
  unsigned int v4301;
  unsigned int v4302;
  uint64_t v4303;
  uint64_t v4304;
  uint64_t v4305;
  uint64_t v4306;
  uint64_t v4307;
  __int128 v4308;
  int64x2_t v4309;
  __int128 v4310;
  __int128 v4311;
  __int128 v4312;
  __int128 v4313;
  __int128 v4314;
  uint64_t v4315;
  __int128 v4316;
  __int128 v4317;
  __int128 v4318;
  __int128 v4319;
  uint64_t v4320;
  __int128 v4321;
  __int128 v4322;
  __int128 v4323;
  __int128 v4324;
  uint64_t v4325;
  uint64_t v4326;
  uint64_t v4327;
  uint64_t v4328;
  int64x2_t v4329;
  int64x2_t *v4330;
  int64x2_t v4331;
  int64x2_t v4332;
  int64x2_t v4333;
  int64x2_t v4334;
  int64x2_t v4335;
  int64x2_t v4336;
  int64x2_t v4337;
  int64x2_t v4338;
  int64x2_t v4339;
  int64x2_t v4340;
  int64x2_t v4341;
  int64x2_t v4342;
  int64x2_t v4343;
  int64x2_t v4344;
  int64x2_t v4345;
  int64x2_t v4346;
  int64x2_t v4347;
  int64x2_t *v4348;
  int64x2_t *v4349;
  int64x2_t *v4350;
  int64x2_t *v4351;
  int64x2_t *v4352;
  int64x2_t *v4353;
  int64x2_t *v4354;
  int64x2_t *v4355;
  uint64_t *v4356;
  uint64_t v4357;
  uint64_t v4358;
  uint64_t v4359;
  uint64_t v4360;
  unsigned int v4361;
  unsigned int v4362;
  unsigned int *v4363;
  uint64_t v4364;
  unsigned int v4365;
  uint64_t *v4366;
  int v4367;
  unsigned int v4368;
  uint64_t *v4369;
  uint64_t v4370;
  unsigned int v4371;
  unsigned int v4372;
  uint64_t v4373;
  uint64_t v4374;
  uint64_t v4375;
  uint64_t v4376;
  uint64_t v4377;
  __int128 v4378;
  int64x2_t v4379;
  __int128 v4380;
  __int128 v4381;
  __int128 v4382;
  __int128 v4383;
  __int128 v4384;
  uint64_t v4385;
  __int128 v4386;
  __int128 v4387;
  __int128 v4388;
  __int128 v4389;
  uint64_t v4390;
  uint64_t v4391;
  uint64_t v4392;
  int64x2_t v4393;
  int64x2_t *v4394;
  int64x2_t v4395;
  int64x2_t v4396;
  int64x2_t v4397;
  int64x2_t v4398;
  int64x2_t v4399;
  int64x2_t v4400;
  int64x2_t v4401;
  uint64_t v4402;
  __int128 v4403;
  __int128 v4404;
  __int128 v4405;
  __int128 v4406;
  int64x2_t v4407;
  int64x2_t v4408;
  int64x2_t *v4409;
  int64x2_t *v4410;
  int64x2_t *v4411;
  int64x2_t *v4412;
  int64x2_t *v4413;
  int64x2_t *v4414;
  int64x2_t *v4415;
  int64x2_t *v4416;
  uint64_t *v4417;
  uint64_t v4418;
  uint64_t v4419;
  uint64_t v4420;
  uint64_t v4421;
  unsigned int v4422;
  unsigned int v4423;
  unsigned int *v4424;
  uint64_t v4425;
  unsigned int v4426;
  uint64_t *v4427;
  int v4428;
  unsigned int v4429;
  uint64_t *v4430;
  uint64_t v4431;
  unsigned int v4432;
  unsigned int v4433;
  uint64_t v4434;
  uint64_t v4435;
  uint64_t v4436;
  int64x2_t v4437;
  int64x2_t *v4438;
  int64x2_t v4439;
  int64x2_t v4440;
  int64x2_t v4441;
  int64x2_t v4442;
  int8x16_t v4443;
  int8x16_t v4444;
  int8x16_t v4445;
  int8x16_t v4446;
  unint64_t v4447;
  unint64_t v4448;
  unint64_t v4449;
  int8x16_t v4450;
  int8x16_t v4451;
  unint64_t v4452;
  unint64_t v4453;
  unint64_t v4454;
  int8x16_t v4455;
  int8x16_t v4456;
  int8x16_t v4457;
  int8x16_t v4458;
  unint64_t v4459;
  unint64_t v4460;
  unint64_t v4461;
  int8x16_t v4462;
  int8x16_t v4463;
  unint64_t v4464;
  unint64_t v4465;
  unint64_t v4466;
  int64x2_t *v4467;
  int64x2_t v4468;
  int64x2_t v4469;
  int64x2_t v4470;
  int64x2_t v4471;
  int64x2_t v4472;
  int64x2_t v4473;
  int64x2_t v4474;
  int64x2_t v4475;
  int64x2_t v4476;
  int64x2_t v4477;
  int64x2_t v4478;
  int64x2_t v4479;
  int64x2_t v4480;
  int64x2_t v4481;
  int64x2_t v4482;
  int64x2_t v4483;
  int8x16_t *v4484;
  int8x16_t *v4485;
  int8x16_t *v4486;
  int8x16_t *v4487;
  uint64_t *v4488;
  uint64_t v4489;
  uint64_t v4490;
  uint64_t v4491;
  uint64_t v4492;
  unsigned int v4493;
  unsigned int v4494;
  unsigned int *v4495;
  uint64_t v4496;
  unsigned int v4497;
  uint64_t *v4498;
  int v4499;
  unsigned int v4500;
  uint64_t *v4501;
  uint64_t v4502;
  unsigned int v4503;
  unsigned int v4504;
  uint64_t v4505;
  uint64_t v4506;
  uint64_t v4507;
  int64x2_t v4508;
  int64x2_t *v4509;
  int64x2_t v4510;
  __int128 v4511;
  __int128 v4512;
  __int128 v4513;
  int64x2_t v4514;
  int64x2_t v4515;
  int64x2_t v4516;
  __int128 v4517;
  __int128 v4518;
  __int128 v4519;
  int64x2_t v4520;
  int64x2_t v4521;
  int64x2_t v4522;
  __int128 v4523;
  __int128 v4524;
  __int128 v4525;
  int64x2_t v4526;
  int64x2_t v4527;
  int64x2_t v4528;
  __int128 v4529;
  __int128 v4530;
  __int128 v4531;
  int64x2_t v4532;
  int64x2_t v4533;
  int64x2_t v4534;
  __int8 *v4535;
  int64x2_t *v4536;
  __int8 *v4537;
  int64x2_t *v4538;
  __int8 *v4539;
  int64x2_t *v4540;
  __int8 *v4541;
  int64x2_t *v4542;
  int64x2_t v4543;
  int64x2_t *v4544;
  int64x2_t v4545;
  int64x2_t v4546;
  int64x2_t v4547;
  int64x2_t v4548;
  int64x2_t v4549;
  int64x2_t v4550;
  int64x2_t v4551;
  int64x2_t v4552;
  int64x2_t v4553;
  int64x2_t v4554;
  int64x2_t v4555;
  int64x2_t v4556;
  int64x2_t v4557;
  int64x2_t v4558;
  int64x2_t v4559;
  int64x2_t v4560;
  int64x2_t v4561;
  int64x2_t v4562;
  int64x2_t v4563;
  int64x2_t v4564;
  int64x2_t v4565;
  int64x2_t v4566;
  __int128 v4567;
  __int128 v4568;
  __int128 v4569;
  int64x2_t v4570;
  int64x2_t v4571;
  int64x2_t *v4572;
  int64x2_t *v4573;
  int64x2_t *v4574;
  int64x2_t *v4575;
  int64x2_t *v4576;
  uint64_t *v4577;
  uint64_t v4578;
  uint64_t v4579;
  uint64_t v4580;
  uint64_t v4581;
  unsigned int v4582;
  unsigned int v4583;
  unsigned int *v4584;
  uint64_t v4585;
  unsigned int v4586;
  uint64_t *v4587;
  int v4588;
  unsigned int v4589;
  uint64_t *v4590;
  uint64_t v4591;
  unsigned int v4592;
  unsigned int v4593;
  uint64_t v4594;
  uint64_t v4595;
  uint64_t v4596;
  int64x2_t v4597;
  int64x2_t *v4598;
  int64x2_t v4599;
  int64x2_t v4600;
  int64x2_t v4601;
  int64x2_t v4602;
  int8x16_t v4603;
  int8x16_t v4604;
  int8x16_t v4605;
  int8x16_t v4606;
  unint64_t v4607;
  unint64_t v4608;
  unint64_t v4609;
  int8x16_t v4610;
  int8x16_t v4611;
  unint64_t v4612;
  unint64_t v4613;
  unint64_t v4614;
  int8x16_t v4615;
  int8x16_t v4616;
  int8x16_t v4617;
  int8x16_t v4618;
  unint64_t v4619;
  unint64_t v4620;
  unint64_t v4621;
  int8x16_t v4622;
  int8x16_t v4623;
  unint64_t v4624;
  unint64_t v4625;
  unint64_t v4626;
  int64x2_t *v4627;
  int64x2_t v4628;
  int64x2_t v4629;
  int64x2_t v4630;
  int64x2_t v4631;
  int64x2_t v4632;
  int64x2_t v4633;
  int64x2_t v4634;
  int64x2_t v4635;
  int64x2_t v4636;
  int64x2_t v4637;
  int64x2_t v4638;
  int64x2_t v4639;
  int64x2_t v4640;
  int64x2_t v4641;
  int64x2_t v4642;
  int64x2_t v4643;
  int8x16_t *v4644;
  int8x16_t *v4645;
  int8x16_t *v4646;
  int8x16_t *v4647;
  uint64_t *v4648;
  uint64_t v4649;
  uint64_t v4650;
  uint64_t v4651;
  uint64_t v4652;
  unsigned int v4653;
  unsigned int v4654;
  unsigned int *v4655;
  uint64_t v4656;
  unsigned int v4657;
  uint64_t *v4658;
  int v4659;
  unsigned int v4660;
  uint64_t *v4661;
  uint64_t v4662;
  unsigned int v4663;
  unsigned int v4664;
  uint64_t v4665;
  uint64_t v4666;
  uint64_t v4667;
  int64x2_t v4668;
  int64x2_t *v4669;
  int64x2_t v4670;
  int64x2_t v4671;
  int64x2_t v4672;
  int64x2_t v4673;
  int8x16_t v4674;
  int8x16_t v4675;
  int8x16_t v4676;
  int8x16_t v4677;
  unint64_t v4678;
  unint64_t v4679;
  unint64_t v4680;
  int8x16_t v4681;
  int8x16_t v4682;
  unint64_t v4683;
  unint64_t v4684;
  unint64_t v4685;
  int8x16_t v4686;
  int8x16_t v4687;
  int8x16_t v4688;
  int8x16_t v4689;
  unint64_t v4690;
  unint64_t v4691;
  unint64_t v4692;
  int8x16_t v4693;
  int8x16_t v4694;
  unint64_t v4695;
  unint64_t v4696;
  unint64_t v4697;
  int64x2_t *v4698;
  int64x2_t v4699;
  int64x2_t v4700;
  int64x2_t v4701;
  int64x2_t v4702;
  int64x2_t v4703;
  int64x2_t v4704;
  int64x2_t v4705;
  int64x2_t v4706;
  int64x2_t v4707;
  int64x2_t v4708;
  int64x2_t v4709;
  int64x2_t v4710;
  int64x2_t v4711;
  int64x2_t v4712;
  int64x2_t v4713;
  int64x2_t v4714;
  int8x16_t *v4715;
  int8x16_t *v4716;
  int8x16_t *v4717;
  int8x16_t *v4718;
  uint64_t *v4719;
  uint64_t v4720;
  uint64_t v4721;
  uint64_t v4722;
  uint64_t v4723;
  unsigned int v4724;
  unsigned int v4725;
  unsigned int *v4726;
  uint64_t v4727;
  unsigned int v4728;
  uint64_t *v4729;
  int v4730;
  unsigned int v4731;
  uint64_t *v4732;
  uint64_t v4733;
  unsigned int v4734;
  unsigned int v4735;
  uint64_t v4736;
  uint64_t v4737;
  uint64_t v4738;
  int64x2_t v4739;
  int64x2_t *v4740;
  int64x2_t v4741;
  __int128 v4742;
  __int128 v4743;
  __int128 v4744;
  int64x2_t v4745;
  int64x2_t v4746;
  int64x2_t v4747;
  __int8 *v4748;
  int64x2_t *v4749;
  int64x2_t v4750;
  int64x2_t *v4751;
  int64x2_t v4752;
  int64x2_t v4753;
  int64x2_t v4754;
  int64x2_t v4755;
  __int128 v4756;
  __int128 v4757;
  __int128 v4758;
  int64x2_t v4759;
  int64x2_t v4760;
  int64x2_t *v4761;
  int64x2_t *v4762;
  int64x2_t *v4763;
  int64x2_t *v4764;
  int64x2_t *v4765;
  uint64_t *v4766;
  uint64_t v4767;
  uint64_t v4768;
  uint64_t v4769;
  uint64_t v4770;
  unsigned int v4771;
  unsigned int v4772;
  unsigned int *v4773;
  uint64_t v4774;
  unsigned int v4775;
  uint64_t *v4776;
  int v4777;
  unsigned int v4778;
  uint64_t *v4779;
  uint64_t v4780;
  unsigned int v4781;
  unsigned int v4782;
  int8x16_t *v4783;
  uint64_t v4784;
  uint64_t v4785;
  int8x16_t v4786;
  int8x16_t v4787;
  int8x16_t v4788;
  unint64_t v4789;
  unint64_t v4790;
  unint64_t v4791;
  int8x16_t *v4792;
  _QWORD *v4793;
  uint64_t *v4794;
  uint64_t v4795;
  uint64_t v4796;
  uint64_t v4797;
  uint64_t v4798;
  unsigned int v4799;
  unsigned int v4800;
  unsigned int *v4801;
  uint64_t v4802;
  unsigned int v4803;
  uint64_t *v4804;
  int v4805;
  unsigned int v4806;
  uint64_t *v4807;
  uint64_t v4808;
  unsigned int v4809;
  unsigned int v4810;
  uint64_t v4811;
  uint64_t v4812;
  uint64_t v4813;
  int64x2_t v4814;
  int64x2_t *v4815;
  int64x2_t v4816;
  __int128 v4817;
  __int128 v4818;
  __int128 v4819;
  int64x2_t v4820;
  int64x2_t v4821;
  int64x2_t v4822;
  __int8 *v4823;
  int64x2_t *v4824;
  int64x2_t v4825;
  int64x2_t *v4826;
  int64x2_t v4827;
  int64x2_t v4828;
  int64x2_t v4829;
  int64x2_t v4830;
  __int128 v4831;
  __int128 v4832;
  __int128 v4833;
  int64x2_t v4834;
  int64x2_t v4835;
  int64x2_t *v4836;
  int64x2_t *v4837;
  int64x2_t *v4838;
  int64x2_t *v4839;
  int64x2_t *v4840;
  uint64_t *v4841;
  uint64_t v4842;
  uint64_t v4843;
  uint64_t v4844;
  uint64_t v4845;
  unsigned int v4846;
  unsigned int v4847;
  unsigned int *v4848;
  uint64_t v4849;
  unsigned int v4850;
  uint64_t *v4851;
  int v4852;
  unsigned int v4853;
  uint64_t *v4854;
  uint64_t v4855;
  unsigned int v4856;
  unsigned int v4857;
  uint64_t v4858;
  uint64_t v4859;
  uint64_t v4860;
  int64x2_t v4861;
  int64x2_t *v4862;
  int64x2_t v4863;
  __int128 v4864;
  __int128 v4865;
  __int128 v4866;
  int64x2_t v4867;
  int64x2_t v4868;
  int64x2_t v4869;
  __int128 v4870;
  __int128 v4871;
  __int128 v4872;
  __int8 *v4873;
  int64x2_t *v4874;
  __int8 *v4875;
  int64x2_t v4876;
  int64x2_t *v4877;
  int64x2_t v4878;
  int64x2_t v4879;
  int64x2_t v4880;
  int64x2_t v4881;
  int64x2_t v4882;
  int64x2_t v4883;
  int64x2_t v4884;
  int64x2_t v4885;
  int64x2_t v4886;
  int64x2_t v4887;
  int64x2_t v4888;
  int64x2_t *v4889;
  int64x2_t *v4890;
  int64x2_t *v4891;
  int64x2_t *v4892;
  int64x2_t *v4893;
  uint64_t *v4894;
  uint64_t v4895;
  uint64_t v4896;
  uint64_t v4897;
  uint64_t v4898;
  unsigned int v4899;
  unsigned int v4900;
  unsigned int *v4901;
  uint64_t v4902;
  unsigned int v4903;
  uint64_t *v4904;
  int v4905;
  unsigned int v4906;
  uint64_t *v4907;
  uint64_t v4908;
  unsigned int v4909;
  unsigned int v4910;
  uint64_t v4911;
  uint64_t v4912;
  uint64_t v4913;
  int64x2_t v4914;
  int64x2_t *v4915;
  int64x2_t v4916;
  __int128 v4917;
  __int128 v4918;
  __int128 v4919;
  int64x2_t v4920;
  int64x2_t v4921;
  int64x2_t v4922;
  __int128 v4923;
  __int128 v4924;
  __int128 v4925;
  __int8 *v4926;
  int64x2_t *v4927;
  __int8 *v4928;
  int64x2_t v4929;
  int64x2_t *v4930;
  int64x2_t v4931;
  int64x2_t v4932;
  int64x2_t v4933;
  int64x2_t v4934;
  int64x2_t v4935;
  int64x2_t v4936;
  int64x2_t v4937;
  int64x2_t v4938;
  int64x2_t v4939;
  int64x2_t v4940;
  int64x2_t v4941;
  int64x2_t *v4942;
  int64x2_t *v4943;
  int64x2_t *v4944;
  int64x2_t *v4945;
  int64x2_t *v4946;
  uint64_t *v4947;
  uint64_t v4948;
  uint64_t v4949;
  uint64_t v4950;
  uint64_t v4951;
  unsigned int v4952;
  unsigned int v4953;
  unsigned int *v4954;
  uint64_t v4955;
  unsigned int v4956;
  uint64_t *v4957;
  int v4958;
  unsigned int v4959;
  uint64_t *v4960;
  uint64_t v4961;
  unsigned int v4962;
  unsigned int v4963;
  uint64_t v4964;
  uint64_t v4965;
  uint64_t v4966;
  int64x2_t v4967;
  int64x2_t *v4968;
  int64x2_t v4969;
  __int128 v4970;
  __int128 v4971;
  __int128 v4972;
  int64x2_t v4973;
  int64x2_t v4974;
  int64x2_t v4975;
  __int8 *v4976;
  int64x2_t *v4977;
  int64x2_t v4978;
  int64x2_t *v4979;
  int64x2_t v4980;
  int64x2_t v4981;
  int64x2_t v4982;
  int64x2_t v4983;
  __int128 v4984;
  __int128 v4985;
  __int128 v4986;
  int64x2_t v4987;
  int64x2_t v4988;
  int64x2_t *v4989;
  int64x2_t *v4990;
  int64x2_t *v4991;
  int64x2_t *v4992;
  int64x2_t *v4993;
  uint64_t *v4994;
  uint64_t v4995;
  uint64_t v4996;
  uint64_t v4997;
  uint64_t v4998;
  unint64_t v4999;
  unint64_t v5000;
  unint64_t v5001;
  unint64_t v5002;
  unint64_t v5003;
  unint64_t v5004;
  unint64_t v5005;
  uint64_t v5006;
  uint64_t v5007;
  uint64_t v5008;
  uint64_t v5009;
  uint64_t v5010;
  uint64_t v5011;
  uint64_t v5012;
  uint64_t v5013;
  unint64_t v5014;
  uint64_t v5015;
  unint64_t v5016;
  uint64_t v5017;
  uint64_t v5018;
  unint64_t v5019;
  unint64_t v5020;
  uint64_t v5021;
  uint64_t v5022;
  uint64_t v5023;
  uint64_t v5024;
  int64x2_t v5025;
  uint64_t v5026;
  int64x2_t v5027;
  uint64_t v5028;
  int64x2_t v5029;
  uint64_t v5030;
  uint64_t v5031;
  uint64_t v5032;
  int64x2_t v5033;
  uint64_t v5034;
  uint64_t v5035;
  uint64_t v5036;
  __int128 v5037;
  uint64_t v5038;
  int64x2_t v5039;
  uint64_t v5040;
  int64x2_t v5041;
  __int128 v5042;
  uint64_t v5043;
  uint64_t v5044;
  uint64_t v5045;
  __int128 v5046;
  __int128 v5047;
  uint64_t v5048;
  int8x16_t v5049;

  v5 = *a5;
  v6 = *(_DWORD *)(result + 1308);
  if (v6)
  {
    v7 = 0;
    v8 = *a4;
    do
    {
      v9 = *(_QWORD *)(result + 1384);
      v10 = *(_DWORD *)(result + 1408) * v7;
      v11 = (uint64_t *)(v9 + 8 * v10);
      v12 = *(_DWORD *)(result + 1304);
      if (v12 && *v11 == -1)
      {
        v13 = 0;
        v53 = 8 * (v12 + v10) - 8 * v10 - 8;
        v54 = v9 + 8 * v10;
        while (v53)
        {
          v11 = (uint64_t *)(v54 + 8);
          ++v13;
          v55 = *(_QWORD *)(v54 + 8);
          v53 -= 8;
          v54 += 8;
          if (v55 != -1)
            goto LABEL_8;
        }
      }
      else
      {
        v13 = 0;
LABEL_8:
        v14 = (uint64_t *)(v9 + 8 * (v10 + v12));
        if (v11 != v14)
        {
          v15 = *v11;
LABEL_10:
          v16 = *v8;
          v17 = *(_DWORD *)(a3[27] + 4 * v13);
          v18 = *(_QWORD *)(result + 1312) + 8 * v15;
          v19 = *((unsigned int *)a2 + 4);
          v20 = *a2;
          if (v5 && v16 < v17)
          {
            v21 = *(int64x2_t *)v18;
            v22 = (int64x2_t *)(v20 + 8 * (v17 + (_DWORD)v19 * v16));
            v23 = *(_OWORD *)(v18 + 24);
            v24 = *(_QWORD *)(v18 + 40);
            v25 = *(int64x2_t *)(v18 + 48);
            v26 = *(_QWORD *)(v18 + 64);
            v27 = *(_OWORD *)(v18 + 72);
            v28 = *(_QWORD *)(v18 + 88);
            v29 = *(int64x2_t *)(v18 + 96);
            v30 = *(_QWORD *)(v18 + 112);
            v31 = *(_OWORD *)(v18 + 120);
            v32 = *(_QWORD *)(v18 + 136);
            v22[1].i64[0] = *(_QWORD *)(v18 + 16);
            *v22 = v21;
            v33 = &v22->i8[8 * v19];
            *((_QWORD *)v33 + 2) = v24;
            *(_OWORD *)v33 = v23;
            v34 = &v22[v19];
            v34[1].i64[0] = v26;
            *v34 = v25;
            v35 = &v22->i8[24 * v19];
            *((_QWORD *)v35 + 2) = v28;
            *(_OWORD *)v35 = v27;
            v36 = &v22[2 * v19];
            v36[1].i64[0] = v30;
            *v36 = v29;
            v37 = &v22->i8[40 * v19];
            *((_QWORD *)v37 + 2) = v32;
            *(_OWORD *)v37 = v31;
          }
          else
          {
            v38 = (int64x2_t *)(v20 + 8 * (v16 + (_DWORD)v19 * v17));
            v39.i64[0] = *(_QWORD *)(v18 + 16);
            v40 = *(int64x2_t *)(v18 + 24);
            v41.i64[0] = *(_QWORD *)(v18 + 64);
            v42 = *(int64x2_t *)(v18 + 48);
            v43 = *(int64x2_t *)(v18 + 72);
            v44.i64[0] = *(_QWORD *)(v18 + 112);
            v45 = *(int64x2_t *)(v18 + 96);
            v46 = *(int64x2_t *)(v18 + 120);
            v47 = vzip1q_s64(*(int64x2_t *)v18, v40);
            v48 = vzip2q_s64(*(int64x2_t *)v18, v40);
            v39.i64[1] = *(_QWORD *)(v18 + 40);
            v41.i64[1] = *(_QWORD *)(v18 + 88);
            v44.i64[1] = *(_QWORD *)(v18 + 136);
            v38[1] = vzip1q_s64(v42, v43);
            v38[2] = vzip1q_s64(v45, v46);
            *v38 = v47;
            v49 = (int64x2_t *)((char *)v38 + 8 * v19);
            v49[1] = vzip1q_s64(vdupq_laneq_s64(v42, 1), vdupq_laneq_s64(v43, 1));
            v49[2] = vzip2q_s64(v45, v46);
            *v49 = v48;
            v50 = &v38[v19];
            v50[1] = v41;
            v50[2] = v44;
            *v50 = v39;
          }
          v51 = v11 + 1;
          while (v51 != v14)
          {
            ++v13;
            v52 = *v51++;
            v15 = v52;
            if (v52 != -1)
            {
              v11 = v51 - 1;
              goto LABEL_10;
            }
          }
          v6 = *(_DWORD *)(result + 1308);
        }
      }
      ++v7;
      ++v8;
    }
    while (v7 < v6);
    v5 = *a5;
  }
  v56 = *(_DWORD *)(result + 2748);
  if (v56)
  {
    v57 = 0;
    v58 = a4[3];
    do
    {
      v59 = *(_QWORD *)(result + 2824);
      v60 = *(_DWORD *)(result + 2848) * v57;
      v61 = (uint64_t *)(v59 + 8 * v60);
      v62 = *(_DWORD *)(result + 2744);
      if (v62 && *v61 == -1)
      {
        v63 = 0;
        v117 = 8 * (v62 + v60) - 8 * v60 - 8;
        v118 = v59 + 8 * v60;
        while (v117)
        {
          v61 = (uint64_t *)(v118 + 8);
          ++v63;
          v119 = *(_QWORD *)(v118 + 8);
          v117 -= 8;
          v118 += 8;
          if (v119 != -1)
            goto LABEL_30;
        }
      }
      else
      {
        v63 = 0;
LABEL_30:
        v64 = (uint64_t *)(v59 + 8 * (v60 + v62));
        if (v61 != v64)
        {
          v65 = *v61;
LABEL_32:
          v66 = *v58;
          v67 = *(_DWORD *)(a3[27] + 4 * v63);
          v68 = *(_QWORD *)(result + 2752) + 8 * v65;
          v69 = *((unsigned int *)a2 + 4);
          v70 = *a2;
          if (v5 && v66 < v67)
          {
            v71 = *(int64x2_t *)v68;
            v72 = (int64x2_t *)(v70 + 8 * (v67 + (_DWORD)v69 * v66));
            v73 = *(_OWORD *)(v68 + 24);
            v74 = *(_QWORD *)(v68 + 40);
            v75 = *(int64x2_t *)(v68 + 48);
            v76 = *(_QWORD *)(v68 + 64);
            v77 = *(_OWORD *)(v68 + 72);
            v78 = *(_QWORD *)(v68 + 88);
            v79 = *(int64x2_t *)(v68 + 96);
            v80 = *(_QWORD *)(v68 + 112);
            v81 = *(_OWORD *)(v68 + 120);
            v82 = *(_QWORD *)(v68 + 136);
            v83 = *(int64x2_t *)(v68 + 144);
            v84 = *(_QWORD *)(v68 + 160);
            v85 = *(_OWORD *)(v68 + 168);
            v86 = *(_QWORD *)(v68 + 184);
            v87 = *(int64x2_t *)(v68 + 192);
            v88 = *(_QWORD *)(v68 + 208);
            v72[1].i64[0] = *(_QWORD *)(v68 + 16);
            *v72 = v71;
            v89 = &v72->i8[8 * v69];
            *((_QWORD *)v89 + 2) = v74;
            *(_OWORD *)v89 = v73;
            v90 = &v72[v69];
            v90[1].i64[0] = v76;
            *v90 = v75;
            v91 = &v72->i8[24 * v69];
            *((_QWORD *)v91 + 2) = v78;
            *(_OWORD *)v91 = v77;
            v92 = &v72[2 * v69];
            v92[1].i64[0] = v80;
            *v92 = v79;
            v93 = &v72->i8[40 * v69];
            *((_QWORD *)v93 + 2) = v82;
            *(_OWORD *)v93 = v81;
            v94 = &v72[3 * v69];
            v94[1].i64[0] = v84;
            *v94 = v83;
            v95 = &v72->i8[56 * v69];
            *((_QWORD *)v95 + 2) = v86;
            *(_OWORD *)v95 = v85;
            v96 = &v72[4 * v69];
            v96[1].i64[0] = v88;
            *v96 = v87;
          }
          else
          {
            v97.i64[0] = *(_QWORD *)(v68 + 16);
            v98 = (int64x2_t *)(v70 + 8 * (v66 + (_DWORD)v69 * v67));
            v99 = *(int64x2_t *)(v68 + 24);
            v100.i64[0] = *(_QWORD *)(v68 + 64);
            v101 = *(int64x2_t *)(v68 + 48);
            v102 = *(int64x2_t *)(v68 + 72);
            v103.i64[0] = *(_QWORD *)(v68 + 112);
            v104 = *(int64x2_t *)(v68 + 96);
            v105 = *(int64x2_t *)(v68 + 120);
            v106.i64[0] = *(_QWORD *)(v68 + 160);
            v107 = *(int64x2_t *)(v68 + 144);
            v108 = *(int64x2_t *)(v68 + 168);
            v109 = *(_QWORD *)(v68 + 208);
            v110 = *(_OWORD *)(v68 + 192);
            v111 = vzip1q_s64(*(int64x2_t *)v68, v99);
            v112 = vzip2q_s64(*(int64x2_t *)v68, v99);
            v97.i64[1] = *(_QWORD *)(v68 + 40);
            v100.i64[1] = *(_QWORD *)(v68 + 88);
            v103.i64[1] = *(_QWORD *)(v68 + 136);
            v106.i64[1] = *(_QWORD *)(v68 + 184);
            v98[2] = vzip1q_s64(v104, v105);
            v98[3] = vzip1q_s64(v107, v108);
            v98[4].i64[0] = v110;
            *v98 = v111;
            v98[1] = vzip1q_s64(v101, v102);
            v113 = (int64x2_t *)((char *)v98 + 8 * v69);
            v113[2] = vzip2q_s64(v104, v105);
            v113[3] = vzip2q_s64(v107, v108);
            *v113 = v112;
            v113[1] = vzip2q_s64(v101, v102);
            v113[4].i64[0] = *((_QWORD *)&v110 + 1);
            v114 = &v98[v69];
            v114[4].i64[0] = v109;
            v114[2] = v103;
            v114[3] = v106;
            *v114 = v97;
            v114[1] = v100;
          }
          v115 = v61 + 1;
          while (v115 != v64)
          {
            ++v63;
            v116 = *v115++;
            v65 = v116;
            if (v116 != -1)
            {
              v61 = v115 - 1;
              goto LABEL_32;
            }
          }
          v56 = *(_DWORD *)(result + 2748);
        }
      }
      ++v57;
      ++v58;
    }
    while (v57 < v56);
    v5 = *a5;
  }
  v120 = *(_DWORD *)(result + 4188);
  if (v120)
  {
    v121 = 0;
    v122 = a4[6];
    do
    {
      v123 = *(_QWORD *)(result + 4264);
      v124 = *(_DWORD *)(result + 4288) * v121;
      v125 = (uint64_t *)(v123 + 8 * v124);
      v126 = *(_DWORD *)(result + 4184);
      if (v126 && *v125 == -1)
      {
        v127 = 0;
        v167 = 8 * (v126 + v124) - 8 * v124 - 8;
        v168 = v123 + 8 * v124;
        while (v167)
        {
          v125 = (uint64_t *)(v168 + 8);
          ++v127;
          v169 = *(_QWORD *)(v168 + 8);
          v167 -= 8;
          v168 += 8;
          if (v169 != -1)
            goto LABEL_52;
        }
      }
      else
      {
        v127 = 0;
LABEL_52:
        v128 = (uint64_t *)(v123 + 8 * (v124 + v126));
        if (v125 != v128)
        {
          v129 = *v125;
LABEL_54:
          v130 = *v122;
          v131 = *(_DWORD *)(a3[27] + 4 * v127);
          v132 = *(_QWORD *)(result + 4192) + 8 * v129;
          v133 = *((unsigned int *)a2 + 4);
          v134 = *a2;
          if (v5 && v130 < v131)
          {
            v135 = *(int64x2_t *)v132;
            v136 = (int64x2_t *)(v134 + 8 * (v131 + (_DWORD)v133 * v130));
            v137 = *(_OWORD *)(v132 + 24);
            v138 = *(_QWORD *)(v132 + 40);
            v139 = *(int64x2_t *)(v132 + 48);
            v140 = *(_QWORD *)(v132 + 64);
            v141 = *(_OWORD *)(v132 + 72);
            v142 = *(_QWORD *)(v132 + 88);
            v143 = *(int64x2_t *)(v132 + 96);
            v144 = *(_QWORD *)(v132 + 112);
            v145 = *(_OWORD *)(v132 + 120);
            v146 = *(_QWORD *)(v132 + 136);
            v136[1].i64[0] = *(_QWORD *)(v132 + 16);
            *v136 = v135;
            v147 = &v136->i8[8 * v133];
            *((_QWORD *)v147 + 2) = v138;
            *(_OWORD *)v147 = v137;
            v148 = &v136[v133];
            v148[1].i64[0] = v140;
            *v148 = v139;
            v149 = &v136->i8[24 * v133];
            *((_QWORD *)v149 + 2) = v142;
            *(_OWORD *)v149 = v141;
            v150 = &v136[2 * v133];
            v150[1].i64[0] = v144;
            *v150 = v143;
            v151 = &v136->i8[40 * v133];
            *((_QWORD *)v151 + 2) = v146;
            *(_OWORD *)v151 = v145;
          }
          else
          {
            v152 = (int64x2_t *)(v134 + 8 * (v130 + (_DWORD)v133 * v131));
            v153.i64[0] = *(_QWORD *)(v132 + 16);
            v154 = *(int64x2_t *)(v132 + 24);
            v155.i64[0] = *(_QWORD *)(v132 + 64);
            v156 = *(int64x2_t *)(v132 + 48);
            v157 = *(int64x2_t *)(v132 + 72);
            v158.i64[0] = *(_QWORD *)(v132 + 112);
            v159 = *(int64x2_t *)(v132 + 96);
            v160 = *(int64x2_t *)(v132 + 120);
            v161 = vzip1q_s64(*(int64x2_t *)v132, v154);
            v162 = vzip2q_s64(*(int64x2_t *)v132, v154);
            v153.i64[1] = *(_QWORD *)(v132 + 40);
            v155.i64[1] = *(_QWORD *)(v132 + 88);
            v158.i64[1] = *(_QWORD *)(v132 + 136);
            v152[1] = vzip1q_s64(v156, v157);
            v152[2] = vzip1q_s64(v159, v160);
            *v152 = v161;
            v163 = (int64x2_t *)((char *)v152 + 8 * v133);
            v163[1] = vzip1q_s64(vdupq_laneq_s64(v156, 1), vdupq_laneq_s64(v157, 1));
            v163[2] = vzip2q_s64(v159, v160);
            *v163 = v162;
            v164 = &v152[v133];
            v164[1] = v155;
            v164[2] = v158;
            *v164 = v153;
          }
          v165 = v125 + 1;
          while (v165 != v128)
          {
            ++v127;
            v166 = *v165++;
            v129 = v166;
            if (v166 != -1)
            {
              v125 = v165 - 1;
              goto LABEL_54;
            }
          }
          v120 = *(_DWORD *)(result + 4188);
        }
      }
      ++v121;
      ++v122;
    }
    while (v121 < v120);
    v5 = *a5;
  }
  v170 = *(_DWORD *)(result + 5628);
  if (v170)
  {
    v171 = 0;
    v172 = a4[9];
    do
    {
      v173 = *(_QWORD *)(result + 5704);
      v174 = *(_DWORD *)(result + 5728) * v171;
      v175 = (uint64_t *)(v173 + 8 * v174);
      v176 = *(_DWORD *)(result + 5624);
      if (v176 && *v175 == -1)
      {
        v177 = 0;
        v217 = 8 * (v176 + v174) - 8 * v174 - 8;
        v218 = v173 + 8 * v174;
        while (v217)
        {
          v175 = (uint64_t *)(v218 + 8);
          ++v177;
          v219 = *(_QWORD *)(v218 + 8);
          v217 -= 8;
          v218 += 8;
          if (v219 != -1)
            goto LABEL_74;
        }
      }
      else
      {
        v177 = 0;
LABEL_74:
        v178 = (uint64_t *)(v173 + 8 * (v174 + v176));
        if (v175 != v178)
        {
          v179 = *v175;
LABEL_76:
          v180 = *v172;
          v181 = *(_DWORD *)(a3[27] + 4 * v177);
          v182 = *(_QWORD *)(result + 5632) + 8 * v179;
          v183 = *((unsigned int *)a2 + 4);
          v184 = *a2;
          if (v5 && v180 < v181)
          {
            v185 = *(int64x2_t *)v182;
            v186 = (int64x2_t *)(v184 + 8 * (v181 + (_DWORD)v183 * v180));
            v187 = *(_OWORD *)(v182 + 24);
            v188 = *(_QWORD *)(v182 + 40);
            v189 = *(int64x2_t *)(v182 + 48);
            v190 = *(_QWORD *)(v182 + 64);
            v191 = *(_OWORD *)(v182 + 72);
            v192 = *(_QWORD *)(v182 + 88);
            v193 = *(int64x2_t *)(v182 + 96);
            v194 = *(_QWORD *)(v182 + 112);
            v195 = *(_OWORD *)(v182 + 120);
            v196 = *(_QWORD *)(v182 + 136);
            v186[1].i64[0] = *(_QWORD *)(v182 + 16);
            *v186 = v185;
            v197 = &v186->i8[8 * v183];
            *((_QWORD *)v197 + 2) = v188;
            *(_OWORD *)v197 = v187;
            v198 = &v186[v183];
            v198[1].i64[0] = v190;
            *v198 = v189;
            v199 = &v186->i8[24 * v183];
            *((_QWORD *)v199 + 2) = v192;
            *(_OWORD *)v199 = v191;
            v200 = &v186[2 * v183];
            v200[1].i64[0] = v194;
            *v200 = v193;
            v201 = &v186->i8[40 * v183];
            *((_QWORD *)v201 + 2) = v196;
            *(_OWORD *)v201 = v195;
          }
          else
          {
            v202 = (int64x2_t *)(v184 + 8 * (v180 + (_DWORD)v183 * v181));
            v203.i64[0] = *(_QWORD *)(v182 + 16);
            v204 = *(int64x2_t *)(v182 + 24);
            v205.i64[0] = *(_QWORD *)(v182 + 64);
            v206 = *(int64x2_t *)(v182 + 48);
            v207 = *(int64x2_t *)(v182 + 72);
            v208.i64[0] = *(_QWORD *)(v182 + 112);
            v209 = *(int64x2_t *)(v182 + 96);
            v210 = *(int64x2_t *)(v182 + 120);
            v211 = vzip1q_s64(*(int64x2_t *)v182, v204);
            v212 = vzip2q_s64(*(int64x2_t *)v182, v204);
            v203.i64[1] = *(_QWORD *)(v182 + 40);
            v205.i64[1] = *(_QWORD *)(v182 + 88);
            v208.i64[1] = *(_QWORD *)(v182 + 136);
            v202[1] = vzip1q_s64(v206, v207);
            v202[2] = vzip1q_s64(v209, v210);
            *v202 = v211;
            v213 = (int64x2_t *)((char *)v202 + 8 * v183);
            v213[1] = vzip1q_s64(vdupq_laneq_s64(v206, 1), vdupq_laneq_s64(v207, 1));
            v213[2] = vzip2q_s64(v209, v210);
            *v213 = v212;
            v214 = &v202[v183];
            v214[1] = v205;
            v214[2] = v208;
            *v214 = v203;
          }
          v215 = v175 + 1;
          while (v215 != v178)
          {
            ++v177;
            v216 = *v215++;
            v179 = v216;
            if (v216 != -1)
            {
              v175 = v215 - 1;
              goto LABEL_76;
            }
          }
          v170 = *(_DWORD *)(result + 5628);
        }
      }
      ++v171;
      ++v172;
    }
    while (v171 < v170);
    v5 = *a5;
  }
  v220 = *(_DWORD *)(result + 7068);
  if (v220)
  {
    v221 = 0;
    v222 = a4[12];
    do
    {
      v223 = *(_QWORD *)(result + 7144);
      v224 = *(_DWORD *)(result + 7168) * v221;
      v225 = (uint64_t *)(v223 + 8 * v224);
      v226 = *(_DWORD *)(result + 7064);
      if (v226 && *v225 == -1)
      {
        v227 = 0;
        v253 = 8 * (v226 + v224) - 8 * v224 - 8;
        v254 = v223 + 8 * v224;
        while (v253)
        {
          v225 = (uint64_t *)(v254 + 8);
          ++v227;
          v255 = *(_QWORD *)(v254 + 8);
          v253 -= 8;
          v254 += 8;
          if (v255 != -1)
            goto LABEL_96;
        }
      }
      else
      {
        v227 = 0;
LABEL_96:
        v228 = (uint64_t *)(v223 + 8 * (v224 + v226));
        if (v225 != v228)
        {
          v229 = *v225;
LABEL_98:
          v230 = *v222;
          v231 = *(_DWORD *)(a3[27] + 4 * v227);
          v232 = *(_QWORD *)(result + 7072) + 8 * v229;
          v233 = *((unsigned int *)a2 + 4);
          v234 = *a2;
          if (v5 && v230 < v231)
          {
            v235 = v231 + (_DWORD)v233 * v230;
            v236 = (int64x2_t *)(v234 + 8 * v235);
            v237 = *(int64x2_t *)v232;
            v238 = *(_OWORD *)(v232 + 24);
            v239 = *(_QWORD *)(v232 + 40);
            v240 = *(_QWORD *)(v232 + 64);
            v241 = *(int8x16_t *)(v232 + 48);
            v242 = vextq_s8(v241, v241, 8uLL).u64[0];
            v236[1].i64[0] = *(_QWORD *)(v232 + 16);
            *v236 = v237;
            v243 = &v236->i8[8 * v233];
            *((_QWORD *)v243 + 2) = v239;
            *(_OWORD *)v243 = v238;
          }
          else
          {
            v235 = v230 + (_DWORD)v233 * v231;
            v244 = (int64x2_t *)(v234 + 8 * v235);
            v241.i64[0] = *(_QWORD *)(v232 + 16);
            v242 = *(_QWORD *)(v232 + 40);
            v245 = *(int64x2_t *)(v232 + 24);
            v240 = *(_QWORD *)(v232 + 64);
            v246 = *(_OWORD *)(v232 + 48);
            v247 = vzip1q_s64(*(int64x2_t *)v232, v245);
            v248 = vzip2q_s64(*(int64x2_t *)v232, v245);
            v244[1].i64[0] = v246;
            *v244 = v247;
            v249 = (int64x2_t *)((char *)v244 + 8 * v233);
            *v249 = v248;
            v249[1].i64[0] = *((_QWORD *)&v246 + 1);
          }
          v250 = v234 + 8 * v235 + 16 * v233;
          *(_QWORD *)(v250 + 16) = v240;
          v241.i64[1] = v242;
          *(int8x16_t *)v250 = v241;
          v251 = v225 + 1;
          while (v251 != v228)
          {
            ++v227;
            v252 = *v251++;
            v229 = v252;
            if (v252 != -1)
            {
              v225 = v251 - 1;
              goto LABEL_98;
            }
          }
          v220 = *(_DWORD *)(result + 7068);
        }
      }
      ++v221;
      ++v222;
    }
    while (v221 < v220);
    v5 = *a5;
  }
  v256 = *(_DWORD *)(result + 8508);
  if (v256)
  {
    v257 = 0;
    v258 = a4[15];
    do
    {
      v259 = *(_QWORD *)(result + 8584);
      v260 = *(_DWORD *)(result + 8608) * v257;
      v261 = (uint64_t *)(v259 + 8 * v260);
      v262 = *(_DWORD *)(result + 8504);
      if (v262 && *v261 == -1)
      {
        v263 = 0;
        v278 = 8 * (v262 + v260) - 8 * v260 - 8;
        v279 = v259 + 8 * v260;
        while (v278)
        {
          v261 = (uint64_t *)(v279 + 8);
          ++v263;
          v280 = *(_QWORD *)(v279 + 8);
          v278 -= 8;
          v279 += 8;
          if (v280 != -1)
            goto LABEL_118;
        }
      }
      else
      {
        v263 = 0;
LABEL_118:
        v264 = (uint64_t *)(v259 + 8 * (v260 + v262));
        if (v261 != v264)
        {
          v265 = *v261;
LABEL_120:
          v266 = *v258;
          v267 = *(_DWORD *)(a3[27] + 4 * v263);
          v268 = *(_QWORD *)(result + 8512) + 8 * v265;
          v269 = *((unsigned int *)a2 + 4);
          v270 = *a2;
          v271 = *(int8x16_t *)v268;
          v272 = *(_QWORD *)(v268 + 16);
          v273 = vextq_s8(v271, v271, 8uLL).u64[0];
          if (v5 && v266 < v267)
          {
            v274 = (int8x16_t *)(v270 + 8 * (v267 + (_DWORD)v269 * v266));
            v274[1].i64[0] = v272;
            v271.i64[1] = v273;
            *v274 = v271;
          }
          else
          {
            v275 = (_QWORD *)(v270 + 8 * (v266 + (_DWORD)v269 * v267));
            *v275 = v271.i64[0];
            v275[v269] = v273;
            v275[2 * v269] = v272;
          }
          v276 = v261 + 1;
          while (v276 != v264)
          {
            ++v263;
            v277 = *v276++;
            v265 = v277;
            if (v277 != -1)
            {
              v261 = v276 - 1;
              goto LABEL_120;
            }
          }
          v256 = *(_DWORD *)(result + 8508);
        }
      }
      ++v257;
      ++v258;
    }
    while (v257 < v256);
    v5 = *a5;
  }
  v281 = *(_DWORD *)(result + 9948);
  if (v281)
  {
    v282 = 0;
    v283 = a4[18];
    do
    {
      v284 = *(_QWORD *)(result + 10024);
      v285 = *(_DWORD *)(result + 10048) * v282;
      v286 = (uint64_t *)(v284 + 8 * v285);
      v287 = *(_DWORD *)(result + 9944);
      if (v287 && *v286 == -1)
      {
        v288 = 0;
        v314 = 8 * (v287 + v285) - 8 * v285 - 8;
        v315 = v284 + 8 * v285;
        while (v314)
        {
          v286 = (uint64_t *)(v315 + 8);
          ++v288;
          v316 = *(_QWORD *)(v315 + 8);
          v314 -= 8;
          v315 += 8;
          if (v316 != -1)
            goto LABEL_140;
        }
      }
      else
      {
        v288 = 0;
LABEL_140:
        v289 = (uint64_t *)(v284 + 8 * (v285 + v287));
        if (v286 != v289)
        {
          v290 = *v286;
LABEL_142:
          v291 = *v283;
          v292 = *(_DWORD *)(a3[27] + 4 * v288);
          v293 = *(_QWORD *)(result + 9952) + 8 * v290;
          v294 = *((unsigned int *)a2 + 4);
          v295 = *a2;
          if (v5 && v291 < v292)
          {
            v296 = v292 + (_DWORD)v294 * v291;
            v297 = (int64x2_t *)(v295 + 8 * v296);
            v298 = *(int64x2_t *)v293;
            v299 = *(_OWORD *)(v293 + 24);
            v300 = *(_QWORD *)(v293 + 40);
            v301 = *(_QWORD *)(v293 + 64);
            v302 = *(int8x16_t *)(v293 + 48);
            v303 = vextq_s8(v302, v302, 8uLL).u64[0];
            v297[1].i64[0] = *(_QWORD *)(v293 + 16);
            *v297 = v298;
            v304 = &v297->i8[8 * v294];
            *((_QWORD *)v304 + 2) = v300;
            *(_OWORD *)v304 = v299;
          }
          else
          {
            v296 = v291 + (_DWORD)v294 * v292;
            v305 = (int64x2_t *)(v295 + 8 * v296);
            v302.i64[0] = *(_QWORD *)(v293 + 16);
            v303 = *(_QWORD *)(v293 + 40);
            v306 = *(int64x2_t *)(v293 + 24);
            v301 = *(_QWORD *)(v293 + 64);
            v307 = *(_OWORD *)(v293 + 48);
            v308 = vzip1q_s64(*(int64x2_t *)v293, v306);
            v309 = vzip2q_s64(*(int64x2_t *)v293, v306);
            v305[1].i64[0] = v307;
            *v305 = v308;
            v310 = (int64x2_t *)((char *)v305 + 8 * v294);
            *v310 = v309;
            v310[1].i64[0] = *((_QWORD *)&v307 + 1);
          }
          v311 = v295 + 8 * v296 + 16 * v294;
          *(_QWORD *)(v311 + 16) = v301;
          v302.i64[1] = v303;
          *(int8x16_t *)v311 = v302;
          v312 = v286 + 1;
          while (v312 != v289)
          {
            ++v288;
            v313 = *v312++;
            v290 = v313;
            if (v313 != -1)
            {
              v286 = v312 - 1;
              goto LABEL_142;
            }
          }
          v281 = *(_DWORD *)(result + 9948);
        }
      }
      ++v282;
      ++v283;
    }
    while (v282 < v281);
    v5 = *a5;
  }
  v317 = *(_DWORD *)(result + 11388);
  if (v317)
  {
    v318 = 0;
    v319 = a4[21];
    do
    {
      v320 = *(_QWORD *)(result + 11464);
      v321 = *(_DWORD *)(result + 11488) * v318;
      v322 = (uint64_t *)(v320 + 8 * v321);
      v323 = *(_DWORD *)(result + 11384);
      if (v323 && *v322 == -1)
      {
        v324 = 0;
        v355 = 8 * (v323 + v321) - 8 * v321 - 8;
        v356 = v320 + 8 * v321;
        while (v355)
        {
          v322 = (uint64_t *)(v356 + 8);
          ++v324;
          v357 = *(_QWORD *)(v356 + 8);
          v355 -= 8;
          v356 += 8;
          if (v357 != -1)
            goto LABEL_162;
        }
      }
      else
      {
        v324 = 0;
LABEL_162:
        v325 = (uint64_t *)(v320 + 8 * (v321 + v323));
        if (v322 != v325)
        {
          v326 = *v322;
LABEL_164:
          v327 = *v319;
          v328 = *(_DWORD *)(a3[27] + 4 * v324);
          v329 = *(_QWORD *)(result + 11392) + 8 * v326;
          v330 = *((unsigned int *)a2 + 4);
          v331 = *a2;
          if (v5 && v327 < v328)
          {
            v332 = *(int64x2_t *)v329;
            v333 = (int64x2_t *)(v331 + 8 * (v328 + (_DWORD)v330 * v327));
            v334 = *(_OWORD *)(v329 + 24);
            v335 = *(_QWORD *)(v329 + 40);
            v336 = *(int64x2_t *)(v329 + 48);
            v337 = *(_QWORD *)(v329 + 64);
            v338 = *(_OWORD *)(v329 + 72);
            v339 = *(_QWORD *)(v329 + 88);
            v333[1].i64[0] = *(_QWORD *)(v329 + 16);
            *v333 = v332;
            v340 = &v333->i8[8 * v330];
            *((_QWORD *)v340 + 2) = v335;
            *(_OWORD *)v340 = v334;
            v341 = &v333[v330];
            v341[1].i64[0] = v337;
            *v341 = v336;
            v342 = &v333->i8[24 * v330];
            *((_QWORD *)v342 + 2) = v339;
            *(_OWORD *)v342 = v338;
          }
          else
          {
            v343 = (int64x2_t *)(v331 + 8 * (v327 + (_DWORD)v330 * v328));
            v344.i64[0] = *(_QWORD *)(v329 + 16);
            v345 = *(int64x2_t *)(v329 + 24);
            v346.i64[0] = *(_QWORD *)(v329 + 64);
            v347 = *(int64x2_t *)(v329 + 48);
            v348 = vzip1q_s64(*(int64x2_t *)v329, v345);
            v349 = vzip1q_s64(v347, *(int64x2_t *)(v329 + 72));
            v350 = vzip2q_s64(*(int64x2_t *)v329, v345);
            v345.i64[0] = vdupq_laneq_s64(v347, 1).u64[0];
            v345.i64[1] = *(_QWORD *)(v329 + 80);
            v344.i64[1] = *(_QWORD *)(v329 + 40);
            v346.i64[1] = *(_QWORD *)(v329 + 88);
            *v343 = v348;
            v343[1] = v349;
            v351 = (int64x2_t *)((char *)v343 + 8 * v330);
            *v351 = v350;
            v351[1] = v345;
            v352 = &v343[v330];
            *v352 = v344;
            v352[1] = v346;
          }
          v353 = v322 + 1;
          while (v353 != v325)
          {
            ++v324;
            v354 = *v353++;
            v326 = v354;
            if (v354 != -1)
            {
              v322 = v353 - 1;
              goto LABEL_164;
            }
          }
          v317 = *(_DWORD *)(result + 11388);
        }
      }
      ++v318;
      ++v319;
    }
    while (v318 < v317);
    v5 = *a5;
  }
  v358 = *(_DWORD *)(result + 12828);
  if (v358)
  {
    v359 = 0;
    v360 = a4[24];
    do
    {
      v361 = *(_QWORD *)(result + 12904);
      v362 = *(_DWORD *)(result + 12928) * v359;
      v363 = (uint64_t *)(v361 + 8 * v362);
      v364 = *(_DWORD *)(result + 12824);
      if (v364 && *v363 == -1)
      {
        v365 = 0;
        v396 = 8 * (v364 + v362) - 8 * v362 - 8;
        v397 = v361 + 8 * v362;
        while (v396)
        {
          v363 = (uint64_t *)(v397 + 8);
          ++v365;
          v398 = *(_QWORD *)(v397 + 8);
          v396 -= 8;
          v397 += 8;
          if (v398 != -1)
            goto LABEL_184;
        }
      }
      else
      {
        v365 = 0;
LABEL_184:
        v366 = (uint64_t *)(v361 + 8 * (v362 + v364));
        if (v363 != v366)
        {
          v367 = *v363;
LABEL_186:
          v368 = *v360;
          v369 = *(_DWORD *)(a3[27] + 4 * v365);
          v370 = *(_QWORD *)(result + 12832) + 8 * v367;
          v371 = *((unsigned int *)a2 + 4);
          v372 = *a2;
          if (v5 && v368 < v369)
          {
            v373 = *(int64x2_t *)v370;
            v374 = (int64x2_t *)(v372 + 8 * (v369 + (_DWORD)v371 * v368));
            v375 = *(_OWORD *)(v370 + 24);
            v376 = *(_QWORD *)(v370 + 40);
            v377 = *(int64x2_t *)(v370 + 48);
            v378 = *(_QWORD *)(v370 + 64);
            v379 = *(_OWORD *)(v370 + 72);
            v380 = *(_QWORD *)(v370 + 88);
            v374[1].i64[0] = *(_QWORD *)(v370 + 16);
            *v374 = v373;
            v381 = &v374->i8[8 * v371];
            *((_QWORD *)v381 + 2) = v376;
            *(_OWORD *)v381 = v375;
            v382 = &v374[v371];
            v382[1].i64[0] = v378;
            *v382 = v377;
            v383 = &v374->i8[24 * v371];
            *((_QWORD *)v383 + 2) = v380;
            *(_OWORD *)v383 = v379;
          }
          else
          {
            v384 = (int64x2_t *)(v372 + 8 * (v368 + (_DWORD)v371 * v369));
            v385.i64[0] = *(_QWORD *)(v370 + 16);
            v386 = *(int64x2_t *)(v370 + 24);
            v387.i64[0] = *(_QWORD *)(v370 + 64);
            v388 = *(int64x2_t *)(v370 + 48);
            v389 = vzip1q_s64(*(int64x2_t *)v370, v386);
            v390 = vzip1q_s64(v388, *(int64x2_t *)(v370 + 72));
            v391 = vzip2q_s64(*(int64x2_t *)v370, v386);
            v386.i64[0] = vdupq_laneq_s64(v388, 1).u64[0];
            v386.i64[1] = *(_QWORD *)(v370 + 80);
            v385.i64[1] = *(_QWORD *)(v370 + 40);
            v387.i64[1] = *(_QWORD *)(v370 + 88);
            *v384 = v389;
            v384[1] = v390;
            v392 = (int64x2_t *)((char *)v384 + 8 * v371);
            *v392 = v391;
            v392[1] = v386;
            v393 = &v384[v371];
            *v393 = v385;
            v393[1] = v387;
          }
          v394 = v363 + 1;
          while (v394 != v366)
          {
            ++v365;
            v395 = *v394++;
            v367 = v395;
            if (v395 != -1)
            {
              v363 = v394 - 1;
              goto LABEL_186;
            }
          }
          v358 = *(_DWORD *)(result + 12828);
        }
      }
      ++v359;
      ++v360;
    }
    while (v359 < v358);
    v5 = *a5;
  }
  v399 = *(_DWORD *)(result + 14268);
  if (v399)
  {
    v400 = 0;
    v401 = a4[27];
    do
    {
      v402 = *(_QWORD *)(result + 14344);
      v403 = *(_DWORD *)(result + 14368) * v400;
      v404 = (uint64_t *)(v402 + 8 * v403);
      v405 = *(_DWORD *)(result + 14264);
      if (v405 && *v404 == -1)
      {
        v406 = 0;
        v432 = 8 * (v405 + v403) - 8 * v403 - 8;
        v433 = v402 + 8 * v403;
        while (v432)
        {
          v404 = (uint64_t *)(v433 + 8);
          ++v406;
          v434 = *(_QWORD *)(v433 + 8);
          v432 -= 8;
          v433 += 8;
          if (v434 != -1)
            goto LABEL_206;
        }
      }
      else
      {
        v406 = 0;
LABEL_206:
        v407 = (uint64_t *)(v402 + 8 * (v403 + v405));
        if (v404 != v407)
        {
          v408 = *v404;
LABEL_208:
          v409 = *v401;
          v410 = *(_DWORD *)(a3[27] + 4 * v406);
          v411 = *(_QWORD *)(result + 14272) + 8 * v408;
          v412 = *((unsigned int *)a2 + 4);
          v413 = *a2;
          if (v5 && v409 < v410)
          {
            v414 = v410 + (_DWORD)v412 * v409;
            v415 = (int64x2_t *)(v413 + 8 * v414);
            v416 = *(int64x2_t *)v411;
            v417 = *(_OWORD *)(v411 + 24);
            v418 = *(_QWORD *)(v411 + 40);
            v419 = *(_QWORD *)(v411 + 64);
            v420 = *(int8x16_t *)(v411 + 48);
            v421 = vextq_s8(v420, v420, 8uLL).u64[0];
            v415[1].i64[0] = *(_QWORD *)(v411 + 16);
            *v415 = v416;
            v422 = &v415->i8[8 * v412];
            *((_QWORD *)v422 + 2) = v418;
            *(_OWORD *)v422 = v417;
          }
          else
          {
            v414 = v409 + (_DWORD)v412 * v410;
            v423 = (int64x2_t *)(v413 + 8 * v414);
            v420.i64[0] = *(_QWORD *)(v411 + 16);
            v421 = *(_QWORD *)(v411 + 40);
            v424 = *(int64x2_t *)(v411 + 24);
            v419 = *(_QWORD *)(v411 + 64);
            v425 = *(_OWORD *)(v411 + 48);
            v426 = vzip1q_s64(*(int64x2_t *)v411, v424);
            v427 = vzip2q_s64(*(int64x2_t *)v411, v424);
            v423[1].i64[0] = v425;
            *v423 = v426;
            v428 = (int64x2_t *)((char *)v423 + 8 * v412);
            *v428 = v427;
            v428[1].i64[0] = *((_QWORD *)&v425 + 1);
          }
          v429 = v413 + 8 * v414 + 16 * v412;
          *(_QWORD *)(v429 + 16) = v419;
          v420.i64[1] = v421;
          *(int8x16_t *)v429 = v420;
          v430 = v404 + 1;
          while (v430 != v407)
          {
            ++v406;
            v431 = *v430++;
            v408 = v431;
            if (v431 != -1)
            {
              v404 = v430 - 1;
              goto LABEL_208;
            }
          }
          v399 = *(_DWORD *)(result + 14268);
        }
      }
      ++v400;
      ++v401;
    }
    while (v400 < v399);
    v5 = *a5;
  }
  v435 = *(_DWORD *)(result + 1164);
  if (v435)
  {
    v436 = 0;
    v437 = *a4;
    do
    {
      v438 = *(_QWORD *)(result + 1240);
      v439 = *(_DWORD *)(result + 1264) * v436;
      v440 = (uint64_t *)(v438 + 8 * v439);
      v441 = *(_DWORD *)(result + 1160);
      if (v441 && *v440 == -1)
      {
        v442 = 0;
        v488 = 8 * (v441 + v439) - 8 * v439 - 8;
        v489 = v438 + 8 * v439;
        while (v488)
        {
          v440 = (uint64_t *)(v489 + 8);
          ++v442;
          v490 = *(_QWORD *)(v489 + 8);
          v488 -= 8;
          v489 += 8;
          if (v490 != -1)
            goto LABEL_228;
        }
      }
      else
      {
        v442 = 0;
LABEL_228:
        v443 = (uint64_t *)(v438 + 8 * (v439 + v441));
        if (v440 != v443)
        {
          v444 = *v440;
LABEL_230:
          v445 = *v437;
          v446 = *(_DWORD *)(a3[24] + 4 * v442);
          v447 = *(_QWORD *)(result + 1168) + 8 * v444;
          v448 = *((unsigned int *)a2 + 4);
          v449 = *a2;
          if (v5 && v445 < v446)
          {
            v450 = *(_OWORD *)(v447 + 16);
            v451 = (_OWORD *)(v449 + 8 * (v446 + (_DWORD)v448 * v445));
            v452 = *(_OWORD *)(v447 + 32);
            v453 = *(_OWORD *)(v447 + 48);
            v454 = *(_OWORD *)(v447 + 64);
            v455 = *(_OWORD *)(v447 + 80);
            v456 = *(_OWORD *)(v447 + 96);
            v457 = *(_OWORD *)(v447 + 112);
            v458 = *(_OWORD *)(v447 + 128);
            v459 = *(_OWORD *)(v447 + 144);
            v460 = *(_OWORD *)(v447 + 160);
            v461 = *(_OWORD *)(v447 + 176);
            *v451 = *(_OWORD *)v447;
            v451[1] = v450;
            v462 = (_OWORD *)((char *)v451 + 8 * v448);
            *v462 = v452;
            v462[1] = v453;
            v463 = &v451[v448];
            *v463 = v454;
            v463[1] = v455;
            v464 = (_OWORD *)((char *)v451 + 24 * v448);
            *v464 = v456;
            v464[1] = v457;
            v465 = &v451[2 * v448];
            *v465 = v458;
            v465[1] = v459;
            v466 = (_OWORD *)((char *)v451 + 40 * v448);
            *v466 = v460;
            v466[1] = v461;
          }
          else
          {
            v467 = (int64x2_t *)(v449 + 8 * (v445 + (_DWORD)v448 * v446));
            v468 = *(int64x2_t *)(v447 + 16);
            v470 = *(int64x2_t *)(v447 + 32);
            v469 = *(int64x2_t *)(v447 + 48);
            v472 = *(int64x2_t *)(v447 + 64);
            v471 = *(int64x2_t *)(v447 + 80);
            v474 = *(int64x2_t *)(v447 + 128);
            v473 = *(int64x2_t *)(v447 + 144);
            v475 = vzip1q_s64(*(int64x2_t *)v447, v470);
            v476 = vzip1q_s64(v472, *(int64x2_t *)(v447 + 96));
            v477 = vzip1q_s64(v474, *(int64x2_t *)(v447 + 160));
            v472.i64[0] = vdupq_laneq_s64(v472, 1).u64[0];
            v472.i64[1] = *(_QWORD *)(v447 + 104);
            v478.i64[0] = vdupq_laneq_s64(v474, 1).u64[0];
            v479 = vzip2q_s64(*(int64x2_t *)v447, v470);
            v478.i64[1] = *(_QWORD *)(v447 + 168);
            v480 = vzip1q_s64(v471, *(int64x2_t *)(v447 + 112));
            v481 = vzip1q_s64(v473, *(int64x2_t *)(v447 + 176));
            v471.i64[0] = vdupq_laneq_s64(v471, 1).u64[0];
            v471.i64[1] = *(_QWORD *)(v447 + 120);
            v482.i64[0] = vdupq_laneq_s64(v473, 1).u64[0];
            v482.i64[1] = *(_QWORD *)(v447 + 184);
            v467[1] = v476;
            v467[2] = v477;
            *v467 = v475;
            v483 = (int64x2_t *)((char *)v467 + 8 * v448);
            v483[1] = v472;
            v483[2] = v478;
            *v483 = v479;
            v484 = &v467[v448];
            v484[1] = v480;
            v484[2] = v481;
            *v484 = vzip1q_s64(v468, v469);
            v485 = (int64x2_t *)((char *)v467 + 24 * v448);
            v485[1] = v471;
            v485[2] = v482;
            *v485 = vzip2q_s64(v468, v469);
          }
          v486 = v440 + 1;
          while (v486 != v443)
          {
            ++v442;
            v487 = *v486++;
            v444 = v487;
            if (v487 != -1)
            {
              v440 = v486 - 1;
              goto LABEL_230;
            }
          }
          v435 = *(_DWORD *)(result + 1164);
        }
      }
      ++v436;
      ++v437;
    }
    while (v436 < v435);
    v5 = *a5;
  }
  v491 = *(_DWORD *)(result + 2604);
  if (v491)
  {
    v492 = 0;
    v493 = a4[3];
    do
    {
      v494 = *(_QWORD *)(result + 2680);
      v495 = *(_DWORD *)(result + 2704) * v492;
      v496 = (uint64_t *)(v494 + 8 * v495);
      v497 = *(_DWORD *)(result + 2600);
      if (v497 && *v496 == -1)
      {
        v498 = 0;
        v558 = 8 * (v497 + v495) - 8 * v495 - 8;
        v559 = v494 + 8 * v495;
        while (v558)
        {
          v496 = (uint64_t *)(v559 + 8);
          ++v498;
          v560 = *(_QWORD *)(v559 + 8);
          v558 -= 8;
          v559 += 8;
          if (v560 != -1)
            goto LABEL_250;
        }
      }
      else
      {
        v498 = 0;
LABEL_250:
        v499 = (uint64_t *)(v494 + 8 * (v495 + v497));
        if (v496 != v499)
        {
          v500 = *v496;
LABEL_252:
          v501 = *v493;
          v502 = *(_DWORD *)(a3[24] + 4 * v498);
          v503 = *(_QWORD *)(result + 2608) + 8 * v500;
          v504 = *((unsigned int *)a2 + 4);
          v505 = *a2;
          if (v5 && v501 < v502)
          {
            v506 = *(_OWORD *)(v503 + 16);
            v507 = (_OWORD *)(v505 + 8 * (v502 + (_DWORD)v504 * v501));
            v508 = *(_OWORD *)(v503 + 32);
            v509 = *(_OWORD *)(v503 + 48);
            v510 = *(_OWORD *)(v503 + 64);
            v511 = *(_OWORD *)(v503 + 80);
            v512 = *(_OWORD *)(v503 + 96);
            v513 = *(_OWORD *)(v503 + 112);
            v514 = *(_OWORD *)(v503 + 128);
            v515 = *(_OWORD *)(v503 + 144);
            v516 = *(_OWORD *)(v503 + 160);
            v517 = *(_OWORD *)(v503 + 176);
            v518 = *(_OWORD *)(v503 + 192);
            v519 = *(_OWORD *)(v503 + 208);
            v520 = *(_OWORD *)(v503 + 224);
            v521 = *(_OWORD *)(v503 + 240);
            v522 = *(_OWORD *)(v503 + 256);
            v523 = *(_OWORD *)(v503 + 272);
            *v507 = *(_OWORD *)v503;
            v507[1] = v506;
            v524 = (_OWORD *)((char *)v507 + 8 * v504);
            *v524 = v508;
            v524[1] = v509;
            v525 = &v507[v504];
            *v525 = v510;
            v525[1] = v511;
            v526 = (_OWORD *)((char *)v507 + 24 * v504);
            *v526 = v512;
            v526[1] = v513;
            v527 = &v507[2 * v504];
            *v527 = v514;
            v527[1] = v515;
            v528 = (_OWORD *)((char *)v507 + 40 * v504);
            *v528 = v516;
            v528[1] = v517;
            v529 = &v507[3 * v504];
            *v529 = v518;
            v529[1] = v519;
            v530 = (_OWORD *)((char *)v507 + 56 * v504);
            *v530 = v520;
            v530[1] = v521;
            v531 = &v507[4 * v504];
            *v531 = v522;
            v531[1] = v523;
          }
          else
          {
            v532 = *(int64x2_t *)(v503 + 16);
            v533 = (int64x2_t *)(v505 + 8 * (v501 + (_DWORD)v504 * v502));
            v535 = *(int64x2_t *)(v503 + 32);
            v534 = *(int64x2_t *)(v503 + 48);
            v537 = *(int64x2_t *)(v503 + 64);
            v536 = *(int64x2_t *)(v503 + 80);
            v539 = *(int64x2_t *)(v503 + 128);
            v538 = *(int64x2_t *)(v503 + 144);
            v541 = *(int64x2_t *)(v503 + 192);
            v540 = *(int64x2_t *)(v503 + 208);
            v543 = *(_OWORD *)(v503 + 256);
            v542 = *(_OWORD *)(v503 + 272);
            v544 = vzip1q_s64(*(int64x2_t *)v503, v535);
            v545 = vzip1q_s64(v537, *(int64x2_t *)(v503 + 96));
            v546 = vzip1q_s64(v541, *(int64x2_t *)(v503 + 224));
            v547 = vzip2q_s64(*(int64x2_t *)v503, v535);
            v535.i64[0] = vdupq_laneq_s64(v537, 1).u64[0];
            v535.i64[1] = *(_QWORD *)(v503 + 104);
            v537.i64[0] = vdupq_laneq_s64(v539, 1).u64[0];
            v537.i64[1] = *(_QWORD *)(v503 + 168);
            v548.i64[0] = vdupq_laneq_s64(v541, 1).u64[0];
            v548.i64[1] = *(_QWORD *)(v503 + 232);
            v549 = vzip1q_s64(v536, *(int64x2_t *)(v503 + 112));
            v550 = vzip1q_s64(v538, *(int64x2_t *)(v503 + 176));
            v551 = vzip1q_s64(v540, *(int64x2_t *)(v503 + 240));
            v536.i64[0] = vdupq_laneq_s64(v536, 1).u64[0];
            v536.i64[1] = *(_QWORD *)(v503 + 120);
            v552.i64[0] = vdupq_laneq_s64(v538, 1).u64[0];
            v552.i64[1] = *(_QWORD *)(v503 + 184);
            v538.i64[0] = vdupq_laneq_s64(v540, 1).u64[0];
            v538.i64[1] = *(_QWORD *)(v503 + 248);
            v533[2] = vzip1q_s64(v539, *(int64x2_t *)(v503 + 160));
            v533[3] = v546;
            v533[4].i64[0] = v543;
            *v533 = v544;
            v533[1] = v545;
            v553 = (int64x2_t *)((char *)v533 + 8 * v504);
            v553[2] = v537;
            v553[3] = v548;
            *v553 = v547;
            v553[1] = v535;
            v553[4].i64[0] = *((_QWORD *)&v543 + 1);
            v554 = &v533[v504];
            v554[4].i64[0] = v542;
            v554[2] = v550;
            v554[3] = v551;
            *v554 = vzip1q_s64(v532, v534);
            v554[1] = v549;
            v555 = (int64x2_t *)((char *)v533 + 24 * v504);
            v555[4].i64[0] = *((_QWORD *)&v542 + 1);
            v555[2] = v552;
            v555[3] = v538;
            *v555 = vzip2q_s64(v532, v534);
            v555[1] = v536;
          }
          v556 = v496 + 1;
          while (v556 != v499)
          {
            ++v498;
            v557 = *v556++;
            v500 = v557;
            if (v557 != -1)
            {
              v496 = v556 - 1;
              goto LABEL_252;
            }
          }
          v491 = *(_DWORD *)(result + 2604);
        }
      }
      ++v492;
      ++v493;
    }
    while (v492 < v491);
    v5 = *a5;
  }
  v561 = *(_DWORD *)(result + 4044);
  if (v561)
  {
    v562 = 0;
    v563 = a4[6];
    do
    {
      v564 = *(_QWORD *)(result + 4120);
      v565 = *(_DWORD *)(result + 4144) * v562;
      v566 = (uint64_t *)(v564 + 8 * v565);
      v567 = *(_DWORD *)(result + 4040);
      if (v567 && *v566 == -1)
      {
        v568 = 0;
        v614 = 8 * (v567 + v565) - 8 * v565 - 8;
        v615 = v564 + 8 * v565;
        while (v614)
        {
          v566 = (uint64_t *)(v615 + 8);
          ++v568;
          v616 = *(_QWORD *)(v615 + 8);
          v614 -= 8;
          v615 += 8;
          if (v616 != -1)
            goto LABEL_272;
        }
      }
      else
      {
        v568 = 0;
LABEL_272:
        v569 = (uint64_t *)(v564 + 8 * (v565 + v567));
        if (v566 != v569)
        {
          v570 = *v566;
LABEL_274:
          v571 = *v563;
          v572 = *(_DWORD *)(a3[24] + 4 * v568);
          v573 = *(_QWORD *)(result + 4048) + 8 * v570;
          v574 = *((unsigned int *)a2 + 4);
          v575 = *a2;
          if (v5 && v571 < v572)
          {
            v576 = *(_OWORD *)(v573 + 16);
            v577 = (_OWORD *)(v575 + 8 * (v572 + (_DWORD)v574 * v571));
            v578 = *(_OWORD *)(v573 + 32);
            v579 = *(_OWORD *)(v573 + 48);
            v580 = *(_OWORD *)(v573 + 64);
            v581 = *(_OWORD *)(v573 + 80);
            v582 = *(_OWORD *)(v573 + 96);
            v583 = *(_OWORD *)(v573 + 112);
            v584 = *(_OWORD *)(v573 + 128);
            v585 = *(_OWORD *)(v573 + 144);
            v586 = *(_OWORD *)(v573 + 160);
            v587 = *(_OWORD *)(v573 + 176);
            *v577 = *(_OWORD *)v573;
            v577[1] = v576;
            v588 = (_OWORD *)((char *)v577 + 8 * v574);
            *v588 = v578;
            v588[1] = v579;
            v589 = &v577[v574];
            *v589 = v580;
            v589[1] = v581;
            v590 = (_OWORD *)((char *)v577 + 24 * v574);
            *v590 = v582;
            v590[1] = v583;
            v591 = &v577[2 * v574];
            *v591 = v584;
            v591[1] = v585;
            v592 = (_OWORD *)((char *)v577 + 40 * v574);
            *v592 = v586;
            v592[1] = v587;
          }
          else
          {
            v593 = (int64x2_t *)(v575 + 8 * (v571 + (_DWORD)v574 * v572));
            v594 = *(int64x2_t *)(v573 + 16);
            v596 = *(int64x2_t *)(v573 + 32);
            v595 = *(int64x2_t *)(v573 + 48);
            v598 = *(int64x2_t *)(v573 + 64);
            v597 = *(int64x2_t *)(v573 + 80);
            v600 = *(int64x2_t *)(v573 + 128);
            v599 = *(int64x2_t *)(v573 + 144);
            v601 = vzip1q_s64(*(int64x2_t *)v573, v596);
            v602 = vzip1q_s64(v598, *(int64x2_t *)(v573 + 96));
            v603 = vzip1q_s64(v600, *(int64x2_t *)(v573 + 160));
            v598.i64[0] = vdupq_laneq_s64(v598, 1).u64[0];
            v598.i64[1] = *(_QWORD *)(v573 + 104);
            v604.i64[0] = vdupq_laneq_s64(v600, 1).u64[0];
            v605 = vzip2q_s64(*(int64x2_t *)v573, v596);
            v604.i64[1] = *(_QWORD *)(v573 + 168);
            v606 = vzip1q_s64(v597, *(int64x2_t *)(v573 + 112));
            v607 = vzip1q_s64(v599, *(int64x2_t *)(v573 + 176));
            v597.i64[0] = vdupq_laneq_s64(v597, 1).u64[0];
            v597.i64[1] = *(_QWORD *)(v573 + 120);
            v608.i64[0] = vdupq_laneq_s64(v599, 1).u64[0];
            v608.i64[1] = *(_QWORD *)(v573 + 184);
            v593[1] = v602;
            v593[2] = v603;
            *v593 = v601;
            v609 = (int64x2_t *)((char *)v593 + 8 * v574);
            v609[1] = v598;
            v609[2] = v604;
            *v609 = v605;
            v610 = &v593[v574];
            v610[1] = v606;
            v610[2] = v607;
            *v610 = vzip1q_s64(v594, v595);
            v611 = (int64x2_t *)((char *)v593 + 24 * v574);
            v611[1] = v597;
            v611[2] = v608;
            *v611 = vzip2q_s64(v594, v595);
          }
          v612 = v566 + 1;
          while (v612 != v569)
          {
            ++v568;
            v613 = *v612++;
            v570 = v613;
            if (v613 != -1)
            {
              v566 = v612 - 1;
              goto LABEL_274;
            }
          }
          v561 = *(_DWORD *)(result + 4044);
        }
      }
      ++v562;
      ++v563;
    }
    while (v562 < v561);
    v5 = *a5;
  }
  v617 = *(_DWORD *)(result + 5484);
  if (v617)
  {
    v618 = 0;
    v619 = a4[9];
    do
    {
      v620 = *(_QWORD *)(result + 5560);
      v621 = *(_DWORD *)(result + 5584) * v618;
      v622 = (uint64_t *)(v620 + 8 * v621);
      v623 = *(_DWORD *)(result + 5480);
      if (v623 && *v622 == -1)
      {
        v624 = 0;
        v670 = 8 * (v623 + v621) - 8 * v621 - 8;
        v671 = v620 + 8 * v621;
        while (v670)
        {
          v622 = (uint64_t *)(v671 + 8);
          ++v624;
          v672 = *(_QWORD *)(v671 + 8);
          v670 -= 8;
          v671 += 8;
          if (v672 != -1)
            goto LABEL_294;
        }
      }
      else
      {
        v624 = 0;
LABEL_294:
        v625 = (uint64_t *)(v620 + 8 * (v621 + v623));
        if (v622 != v625)
        {
          v626 = *v622;
LABEL_296:
          v627 = *v619;
          v628 = *(_DWORD *)(a3[24] + 4 * v624);
          v629 = *(_QWORD *)(result + 5488) + 8 * v626;
          v630 = *((unsigned int *)a2 + 4);
          v631 = *a2;
          if (v5 && v627 < v628)
          {
            v632 = *(_OWORD *)(v629 + 16);
            v633 = (_OWORD *)(v631 + 8 * (v628 + (_DWORD)v630 * v627));
            v634 = *(_OWORD *)(v629 + 32);
            v635 = *(_OWORD *)(v629 + 48);
            v636 = *(_OWORD *)(v629 + 64);
            v637 = *(_OWORD *)(v629 + 80);
            v638 = *(_OWORD *)(v629 + 96);
            v639 = *(_OWORD *)(v629 + 112);
            v640 = *(_OWORD *)(v629 + 128);
            v641 = *(_OWORD *)(v629 + 144);
            v642 = *(_OWORD *)(v629 + 160);
            v643 = *(_OWORD *)(v629 + 176);
            *v633 = *(_OWORD *)v629;
            v633[1] = v632;
            v644 = (_OWORD *)((char *)v633 + 8 * v630);
            *v644 = v634;
            v644[1] = v635;
            v645 = &v633[v630];
            *v645 = v636;
            v645[1] = v637;
            v646 = (_OWORD *)((char *)v633 + 24 * v630);
            *v646 = v638;
            v646[1] = v639;
            v647 = &v633[2 * v630];
            *v647 = v640;
            v647[1] = v641;
            v648 = (_OWORD *)((char *)v633 + 40 * v630);
            *v648 = v642;
            v648[1] = v643;
          }
          else
          {
            v649 = (int64x2_t *)(v631 + 8 * (v627 + (_DWORD)v630 * v628));
            v650 = *(int64x2_t *)(v629 + 16);
            v652 = *(int64x2_t *)(v629 + 32);
            v651 = *(int64x2_t *)(v629 + 48);
            v654 = *(int64x2_t *)(v629 + 64);
            v653 = *(int64x2_t *)(v629 + 80);
            v656 = *(int64x2_t *)(v629 + 128);
            v655 = *(int64x2_t *)(v629 + 144);
            v657 = vzip1q_s64(*(int64x2_t *)v629, v652);
            v658 = vzip1q_s64(v654, *(int64x2_t *)(v629 + 96));
            v659 = vzip1q_s64(v656, *(int64x2_t *)(v629 + 160));
            v654.i64[0] = vdupq_laneq_s64(v654, 1).u64[0];
            v654.i64[1] = *(_QWORD *)(v629 + 104);
            v660.i64[0] = vdupq_laneq_s64(v656, 1).u64[0];
            v661 = vzip2q_s64(*(int64x2_t *)v629, v652);
            v660.i64[1] = *(_QWORD *)(v629 + 168);
            v662 = vzip1q_s64(v653, *(int64x2_t *)(v629 + 112));
            v663 = vzip1q_s64(v655, *(int64x2_t *)(v629 + 176));
            v653.i64[0] = vdupq_laneq_s64(v653, 1).u64[0];
            v653.i64[1] = *(_QWORD *)(v629 + 120);
            v664.i64[0] = vdupq_laneq_s64(v655, 1).u64[0];
            v664.i64[1] = *(_QWORD *)(v629 + 184);
            v649[1] = v658;
            v649[2] = v659;
            *v649 = v657;
            v665 = (int64x2_t *)((char *)v649 + 8 * v630);
            v665[1] = v654;
            v665[2] = v660;
            *v665 = v661;
            v666 = &v649[v630];
            v666[1] = v662;
            v666[2] = v663;
            *v666 = vzip1q_s64(v650, v651);
            v667 = (int64x2_t *)((char *)v649 + 24 * v630);
            v667[1] = v653;
            v667[2] = v664;
            *v667 = vzip2q_s64(v650, v651);
          }
          v668 = v622 + 1;
          while (v668 != v625)
          {
            ++v624;
            v669 = *v668++;
            v626 = v669;
            if (v669 != -1)
            {
              v622 = v668 - 1;
              goto LABEL_296;
            }
          }
          v617 = *(_DWORD *)(result + 5484);
        }
      }
      ++v618;
      ++v619;
    }
    while (v618 < v617);
    v5 = *a5;
  }
  v673 = *(_DWORD *)(result + 6924);
  if (v673)
  {
    v674 = 0;
    v675 = a4[12];
    do
    {
      v676 = *(_QWORD *)(result + 7000);
      v677 = *(_DWORD *)(result + 7024) * v674;
      v678 = (uint64_t *)(v676 + 8 * v677);
      v679 = *(_DWORD *)(result + 6920);
      if (v679 && *v678 == -1)
      {
        v680 = 0;
        v709 = 8 * (v679 + v677) - 8 * v677 - 8;
        v710 = v676 + 8 * v677;
        while (v709)
        {
          v678 = (uint64_t *)(v710 + 8);
          ++v680;
          v711 = *(_QWORD *)(v710 + 8);
          v709 -= 8;
          v710 += 8;
          if (v711 != -1)
            goto LABEL_316;
        }
      }
      else
      {
        v680 = 0;
LABEL_316:
        v681 = (uint64_t *)(v676 + 8 * (v677 + v679));
        if (v678 != v681)
        {
          v682 = *v678;
LABEL_318:
          v683 = *v675;
          v684 = *(_DWORD *)(a3[24] + 4 * v680);
          v685 = *(_QWORD *)(result + 6928) + 8 * v682;
          v686 = *((unsigned int *)a2 + 4);
          v687 = *a2;
          if (v5 && v683 < v684)
          {
            v688 = *(_OWORD *)(v685 + 16);
            v689 = (_OWORD *)(v687 + 8 * (v684 + (_DWORD)v686 * v683));
            v690 = *(_OWORD *)(v685 + 32);
            v691 = *(_OWORD *)(v685 + 48);
            v692 = *(_OWORD *)(v685 + 64);
            v693 = *(_OWORD *)(v685 + 80);
            *v689 = *(_OWORD *)v685;
            v689[1] = v688;
            v694 = (_OWORD *)((char *)v689 + 8 * v686);
            *v694 = v690;
            v694[1] = v691;
            v695 = &v689[v686];
            *v695 = v692;
            v695[1] = v693;
          }
          else
          {
            v696 = (int64x2_t *)(v687 + 8 * (v683 + (_DWORD)v686 * v684));
            v697 = *(int64x2_t *)(v685 + 16);
            v699 = *(int64x2_t *)(v685 + 32);
            v698 = *(int64x2_t *)(v685 + 48);
            v701 = *(_OWORD *)(v685 + 64);
            v700 = *(_OWORD *)(v685 + 80);
            v702 = vzip1q_s64(*(int64x2_t *)v685, v699);
            v703 = vzip2q_s64(*(int64x2_t *)v685, v699);
            v696[1].i64[0] = v701;
            *v696 = v702;
            v704 = (int64x2_t *)((char *)v696 + 8 * v686);
            *v704 = v703;
            v704[1].i64[0] = *((_QWORD *)&v701 + 1);
            v705 = &v696[v686];
            v705[1].i64[0] = v700;
            *v705 = vzip1q_s64(v697, v698);
            v706 = (int64x2_t *)((char *)v696 + 24 * v686);
            v706[1].i64[0] = *((_QWORD *)&v700 + 1);
            *v706 = vzip2q_s64(v697, v698);
          }
          v707 = v678 + 1;
          while (v707 != v681)
          {
            ++v680;
            v708 = *v707++;
            v682 = v708;
            if (v708 != -1)
            {
              v678 = v707 - 1;
              goto LABEL_318;
            }
          }
          v673 = *(_DWORD *)(result + 6924);
        }
      }
      ++v674;
      ++v675;
    }
    while (v674 < v673);
    v5 = *a5;
  }
  v712 = *(_DWORD *)(result + 8364);
  if (v712)
  {
    v713 = 0;
    v714 = a4[15];
    do
    {
      v715 = *(_QWORD *)(result + 8440);
      v716 = *(_DWORD *)(result + 8464) * v713;
      v717 = (uint64_t *)(v715 + 8 * v716);
      v718 = *(_DWORD *)(result + 8360);
      if (v718 && *v717 == -1)
      {
        v719 = 0;
        v733 = 8 * (v718 + v716) - 8 * v716 - 8;
        v734 = v715 + 8 * v716;
        while (v733)
        {
          v717 = (uint64_t *)(v734 + 8);
          ++v719;
          v735 = *(_QWORD *)(v734 + 8);
          v733 -= 8;
          v734 += 8;
          if (v735 != -1)
            goto LABEL_338;
        }
      }
      else
      {
        v719 = 0;
LABEL_338:
        v720 = (uint64_t *)(v715 + 8 * (v716 + v718));
        if (v717 != v720)
        {
          v721 = *v717;
LABEL_340:
          v722 = *v714;
          v723 = *(_DWORD *)(a3[24] + 4 * v719);
          v724 = (int8x16_t *)(*(_QWORD *)(result + 8368) + 8 * v721);
          v725 = *((unsigned int *)a2 + 4);
          v726 = *a2;
          v728 = *v724;
          v727 = v724[1];
          if (v5 && v722 < v723)
          {
            v729 = (int8x16_t *)(v726 + 8 * (v723 + (_DWORD)v725 * v722));
            *v729 = v728;
            v729[1] = v727;
          }
          else
          {
            v730 = (_QWORD *)(v726 + 8 * (v722 + (_DWORD)v725 * v723));
            *v730 = v728.i64[0];
            v730[v725] = vextq_s8(v728, v728, 8uLL).u64[0];
            v730[2 * v725] = v727.i64[0];
            v730[3 * v725] = vextq_s8(v727, v727, 8uLL).u64[0];
          }
          v731 = v717 + 1;
          while (v731 != v720)
          {
            ++v719;
            v732 = *v731++;
            v721 = v732;
            if (v732 != -1)
            {
              v717 = v731 - 1;
              goto LABEL_340;
            }
          }
          v712 = *(_DWORD *)(result + 8364);
        }
      }
      ++v713;
      ++v714;
    }
    while (v713 < v712);
    v5 = *a5;
  }
  v736 = *(_DWORD *)(result + 9804);
  if (v736)
  {
    v737 = 0;
    v738 = a4[18];
    do
    {
      v739 = *(_QWORD *)(result + 9880);
      v740 = *(_DWORD *)(result + 9904) * v737;
      v741 = (uint64_t *)(v739 + 8 * v740);
      v742 = *(_DWORD *)(result + 9800);
      if (v742 && *v741 == -1)
      {
        v743 = 0;
        v772 = 8 * (v742 + v740) - 8 * v740 - 8;
        v773 = v739 + 8 * v740;
        while (v772)
        {
          v741 = (uint64_t *)(v773 + 8);
          ++v743;
          v774 = *(_QWORD *)(v773 + 8);
          v772 -= 8;
          v773 += 8;
          if (v774 != -1)
            goto LABEL_360;
        }
      }
      else
      {
        v743 = 0;
LABEL_360:
        v744 = (uint64_t *)(v739 + 8 * (v740 + v742));
        if (v741 != v744)
        {
          v745 = *v741;
LABEL_362:
          v746 = *v738;
          v747 = *(_DWORD *)(a3[24] + 4 * v743);
          v748 = *(_QWORD *)(result + 9808) + 8 * v745;
          v749 = *((unsigned int *)a2 + 4);
          v750 = *a2;
          if (v5 && v746 < v747)
          {
            v751 = *(_OWORD *)(v748 + 16);
            v752 = (_OWORD *)(v750 + 8 * (v747 + (_DWORD)v749 * v746));
            v753 = *(_OWORD *)(v748 + 32);
            v754 = *(_OWORD *)(v748 + 48);
            v755 = *(_OWORD *)(v748 + 64);
            v756 = *(_OWORD *)(v748 + 80);
            *v752 = *(_OWORD *)v748;
            v752[1] = v751;
            v757 = (_OWORD *)((char *)v752 + 8 * v749);
            *v757 = v753;
            v757[1] = v754;
            v758 = &v752[v749];
            *v758 = v755;
            v758[1] = v756;
          }
          else
          {
            v759 = (int64x2_t *)(v750 + 8 * (v746 + (_DWORD)v749 * v747));
            v760 = *(int64x2_t *)(v748 + 16);
            v762 = *(int64x2_t *)(v748 + 32);
            v761 = *(int64x2_t *)(v748 + 48);
            v764 = *(_OWORD *)(v748 + 64);
            v763 = *(_OWORD *)(v748 + 80);
            v765 = vzip1q_s64(*(int64x2_t *)v748, v762);
            v766 = vzip2q_s64(*(int64x2_t *)v748, v762);
            v759[1].i64[0] = v764;
            *v759 = v765;
            v767 = (int64x2_t *)((char *)v759 + 8 * v749);
            *v767 = v766;
            v767[1].i64[0] = *((_QWORD *)&v764 + 1);
            v768 = &v759[v749];
            v768[1].i64[0] = v763;
            *v768 = vzip1q_s64(v760, v761);
            v769 = (int64x2_t *)((char *)v759 + 24 * v749);
            v769[1].i64[0] = *((_QWORD *)&v763 + 1);
            *v769 = vzip2q_s64(v760, v761);
          }
          v770 = v741 + 1;
          while (v770 != v744)
          {
            ++v743;
            v771 = *v770++;
            v745 = v771;
            if (v771 != -1)
            {
              v741 = v770 - 1;
              goto LABEL_362;
            }
          }
          v736 = *(_DWORD *)(result + 9804);
        }
      }
      ++v737;
      ++v738;
    }
    while (v737 < v736);
    v5 = *a5;
  }
  v775 = *(_DWORD *)(result + 11244);
  if (v775)
  {
    v776 = 0;
    v777 = a4[21];
    do
    {
      v778 = *(_QWORD *)(result + 11320);
      v779 = *(_DWORD *)(result + 11344) * v776;
      v780 = (uint64_t *)(v778 + 8 * v779);
      v781 = *(_DWORD *)(result + 11240);
      if (v781 && *v780 == -1)
      {
        v782 = 0;
        v812 = 8 * (v781 + v779) - 8 * v779 - 8;
        v813 = v778 + 8 * v779;
        while (v812)
        {
          v780 = (uint64_t *)(v813 + 8);
          ++v782;
          v814 = *(_QWORD *)(v813 + 8);
          v812 -= 8;
          v813 += 8;
          if (v814 != -1)
            goto LABEL_382;
        }
      }
      else
      {
        v782 = 0;
LABEL_382:
        v783 = (uint64_t *)(v778 + 8 * (v779 + v781));
        if (v780 != v783)
        {
          v784 = *v780;
LABEL_384:
          v785 = *v777;
          v786 = *(_DWORD *)(a3[24] + 4 * v782);
          v787 = *(_QWORD *)(result + 11248) + 8 * v784;
          v788 = *((unsigned int *)a2 + 4);
          v789 = *a2;
          if (v5 && v785 < v786)
          {
            v790 = *(int64x2_t *)(v787 + 16);
            v791 = (int64x2_t *)(v789 + 8 * (v786 + (_DWORD)v788 * v785));
            v792 = *(_OWORD *)(v787 + 32);
            v793 = *(_OWORD *)(v787 + 48);
            v794 = *(int64x2_t *)(v787 + 64);
            v795 = *(int64x2_t *)(v787 + 80);
            v797 = *(int64x2_t *)(v787 + 96);
            v796 = *(int64x2_t *)(v787 + 112);
            *v791 = *(int64x2_t *)v787;
            v791[1] = v790;
            v798 = &v791->i8[8 * v788];
            *(_OWORD *)v798 = v792;
            *((_OWORD *)v798 + 1) = v793;
          }
          else
          {
            v791 = (int64x2_t *)(v789 + 8 * (v785 + (_DWORD)v788 * v786));
            v799 = *(int64x2_t *)(v787 + 16);
            v800 = *(int64x2_t *)(v787 + 32);
            v801 = *(int64x2_t *)(v787 + 48);
            v803 = *(int64x2_t *)(v787 + 64);
            v802 = *(int64x2_t *)(v787 + 80);
            v804 = vzip1q_s64(*(int64x2_t *)v787, v800);
            v805 = vzip1q_s64(v803, *(int64x2_t *)(v787 + 96));
            v806 = vzip2q_s64(*(int64x2_t *)v787, v800);
            v803.i64[0] = vdupq_laneq_s64(v803, 1).u64[0];
            v803.i64[1] = *(_QWORD *)(v787 + 104);
            v794 = vzip1q_s64(v799, v801);
            v795 = vzip1q_s64(v802, *(int64x2_t *)(v787 + 112));
            v796.i64[0] = vdupq_laneq_s64(v802, 1).u64[0];
            v796.i64[1] = *(_QWORD *)(v787 + 120);
            v797 = vzip2q_s64(v799, v801);
            *v791 = v804;
            v791[1] = v805;
            v807 = (int64x2_t *)((char *)v791 + 8 * v788);
            *v807 = v806;
            v807[1] = v803;
          }
          v808 = &v791[v788];
          *v808 = v794;
          v808[1] = v795;
          v809 = (int64x2_t *)((char *)v791 + 24 * v788);
          *v809 = v797;
          v809[1] = v796;
          v810 = v780 + 1;
          while (v810 != v783)
          {
            ++v782;
            v811 = *v810++;
            v784 = v811;
            if (v811 != -1)
            {
              v780 = v810 - 1;
              goto LABEL_384;
            }
          }
          v775 = *(_DWORD *)(result + 11244);
        }
      }
      ++v776;
      ++v777;
    }
    while (v776 < v775);
    v5 = *a5;
  }
  v815 = *(_DWORD *)(result + 12684);
  if (v815)
  {
    v816 = 0;
    v817 = a4[24];
    do
    {
      v818 = *(_QWORD *)(result + 12760);
      v819 = *(_DWORD *)(result + 12784) * v816;
      v820 = (uint64_t *)(v818 + 8 * v819);
      v821 = *(_DWORD *)(result + 12680);
      if (v821 && *v820 == -1)
      {
        v822 = 0;
        v852 = 8 * (v821 + v819) - 8 * v819 - 8;
        v853 = v818 + 8 * v819;
        while (v852)
        {
          v820 = (uint64_t *)(v853 + 8);
          ++v822;
          v854 = *(_QWORD *)(v853 + 8);
          v852 -= 8;
          v853 += 8;
          if (v854 != -1)
            goto LABEL_404;
        }
      }
      else
      {
        v822 = 0;
LABEL_404:
        v823 = (uint64_t *)(v818 + 8 * (v819 + v821));
        if (v820 != v823)
        {
          v824 = *v820;
LABEL_406:
          v825 = *v817;
          v826 = *(_DWORD *)(a3[24] + 4 * v822);
          v827 = *(_QWORD *)(result + 12688) + 8 * v824;
          v828 = *((unsigned int *)a2 + 4);
          v829 = *a2;
          if (v5 && v825 < v826)
          {
            v830 = *(int64x2_t *)(v827 + 16);
            v831 = (int64x2_t *)(v829 + 8 * (v826 + (_DWORD)v828 * v825));
            v832 = *(_OWORD *)(v827 + 32);
            v833 = *(_OWORD *)(v827 + 48);
            v834 = *(int64x2_t *)(v827 + 64);
            v835 = *(int64x2_t *)(v827 + 80);
            v837 = *(int64x2_t *)(v827 + 96);
            v836 = *(int64x2_t *)(v827 + 112);
            *v831 = *(int64x2_t *)v827;
            v831[1] = v830;
            v838 = &v831->i8[8 * v828];
            *(_OWORD *)v838 = v832;
            *((_OWORD *)v838 + 1) = v833;
          }
          else
          {
            v831 = (int64x2_t *)(v829 + 8 * (v825 + (_DWORD)v828 * v826));
            v839 = *(int64x2_t *)(v827 + 16);
            v840 = *(int64x2_t *)(v827 + 32);
            v841 = *(int64x2_t *)(v827 + 48);
            v843 = *(int64x2_t *)(v827 + 64);
            v842 = *(int64x2_t *)(v827 + 80);
            v844 = vzip1q_s64(*(int64x2_t *)v827, v840);
            v845 = vzip1q_s64(v843, *(int64x2_t *)(v827 + 96));
            v846 = vzip2q_s64(*(int64x2_t *)v827, v840);
            v843.i64[0] = vdupq_laneq_s64(v843, 1).u64[0];
            v843.i64[1] = *(_QWORD *)(v827 + 104);
            v834 = vzip1q_s64(v839, v841);
            v835 = vzip1q_s64(v842, *(int64x2_t *)(v827 + 112));
            v836.i64[0] = vdupq_laneq_s64(v842, 1).u64[0];
            v836.i64[1] = *(_QWORD *)(v827 + 120);
            v837 = vzip2q_s64(v839, v841);
            *v831 = v844;
            v831[1] = v845;
            v847 = (int64x2_t *)((char *)v831 + 8 * v828);
            *v847 = v846;
            v847[1] = v843;
          }
          v848 = &v831[v828];
          *v848 = v834;
          v848[1] = v835;
          v849 = (int64x2_t *)((char *)v831 + 24 * v828);
          *v849 = v837;
          v849[1] = v836;
          v850 = v820 + 1;
          while (v850 != v823)
          {
            ++v822;
            v851 = *v850++;
            v824 = v851;
            if (v851 != -1)
            {
              v820 = v850 - 1;
              goto LABEL_406;
            }
          }
          v815 = *(_DWORD *)(result + 12684);
        }
      }
      ++v816;
      ++v817;
    }
    while (v816 < v815);
    v5 = *a5;
  }
  v855 = *(_DWORD *)(result + 14124);
  if (v855)
  {
    v856 = 0;
    v857 = a4[27];
    do
    {
      v858 = *(_QWORD *)(result + 14200);
      v859 = *(_DWORD *)(result + 14224) * v856;
      v860 = (uint64_t *)(v858 + 8 * v859);
      v861 = *(_DWORD *)(result + 14120);
      if (v861 && *v860 == -1)
      {
        v862 = 0;
        v891 = 8 * (v861 + v859) - 8 * v859 - 8;
        v892 = v858 + 8 * v859;
        while (v891)
        {
          v860 = (uint64_t *)(v892 + 8);
          ++v862;
          v893 = *(_QWORD *)(v892 + 8);
          v891 -= 8;
          v892 += 8;
          if (v893 != -1)
            goto LABEL_426;
        }
      }
      else
      {
        v862 = 0;
LABEL_426:
        v863 = (uint64_t *)(v858 + 8 * (v859 + v861));
        if (v860 != v863)
        {
          v864 = *v860;
LABEL_428:
          v865 = *v857;
          v866 = *(_DWORD *)(a3[24] + 4 * v862);
          v867 = *(_QWORD *)(result + 14128) + 8 * v864;
          v868 = *((unsigned int *)a2 + 4);
          v869 = *a2;
          if (v5 && v865 < v866)
          {
            v870 = *(_OWORD *)(v867 + 16);
            v871 = (_OWORD *)(v869 + 8 * (v866 + (_DWORD)v868 * v865));
            v872 = *(_OWORD *)(v867 + 32);
            v873 = *(_OWORD *)(v867 + 48);
            v874 = *(_OWORD *)(v867 + 64);
            v875 = *(_OWORD *)(v867 + 80);
            *v871 = *(_OWORD *)v867;
            v871[1] = v870;
            v876 = (_OWORD *)((char *)v871 + 8 * v868);
            *v876 = v872;
            v876[1] = v873;
            v877 = &v871[v868];
            *v877 = v874;
            v877[1] = v875;
          }
          else
          {
            v878 = (int64x2_t *)(v869 + 8 * (v865 + (_DWORD)v868 * v866));
            v879 = *(int64x2_t *)(v867 + 16);
            v881 = *(int64x2_t *)(v867 + 32);
            v880 = *(int64x2_t *)(v867 + 48);
            v883 = *(_OWORD *)(v867 + 64);
            v882 = *(_OWORD *)(v867 + 80);
            v884 = vzip1q_s64(*(int64x2_t *)v867, v881);
            v885 = vzip2q_s64(*(int64x2_t *)v867, v881);
            v878[1].i64[0] = v883;
            *v878 = v884;
            v886 = (int64x2_t *)((char *)v878 + 8 * v868);
            *v886 = v885;
            v886[1].i64[0] = *((_QWORD *)&v883 + 1);
            v887 = &v878[v868];
            v887[1].i64[0] = v882;
            *v887 = vzip1q_s64(v879, v880);
            v888 = (int64x2_t *)((char *)v878 + 24 * v868);
            v888[1].i64[0] = *((_QWORD *)&v882 + 1);
            *v888 = vzip2q_s64(v879, v880);
          }
          v889 = v860 + 1;
          while (v889 != v863)
          {
            ++v862;
            v890 = *v889++;
            v864 = v890;
            if (v890 != -1)
            {
              v860 = v889 - 1;
              goto LABEL_428;
            }
          }
          v855 = *(_DWORD *)(result + 14124);
        }
      }
      ++v856;
      ++v857;
    }
    while (v856 < v855);
    v5 = *a5;
  }
  v894 = *(_DWORD *)(result + 1020);
  if (v894)
  {
    v895 = 0;
    v896 = *a4;
    do
    {
      v897 = *(_QWORD *)(result + 1096);
      v898 = *(_DWORD *)(result + 1120) * v895;
      v899 = (uint64_t *)(v897 + 8 * v898);
      v900 = *(_DWORD *)(result + 1016);
      if (v900 && *v899 == -1)
      {
        v901 = 0;
        v947 = 8 * (v900 + v898) - 8 * v898 - 8;
        v948 = v897 + 8 * v898;
        while (v947)
        {
          v899 = (uint64_t *)(v948 + 8);
          ++v901;
          v949 = *(_QWORD *)(v948 + 8);
          v947 -= 8;
          v948 += 8;
          if (v949 != -1)
            goto LABEL_448;
        }
      }
      else
      {
        v901 = 0;
LABEL_448:
        v902 = (uint64_t *)(v897 + 8 * (v898 + v900));
        if (v899 != v902)
        {
          v903 = *v899;
LABEL_450:
          v904 = *v896;
          v905 = *(_DWORD *)(a3[21] + 4 * v901);
          v906 = *(_QWORD *)(result + 1024) + 8 * v903;
          v907 = *((unsigned int *)a2 + 4);
          v908 = *a2;
          if (v5 && v904 < v905)
          {
            v909 = *(_OWORD *)(v906 + 16);
            v910 = (_OWORD *)(v908 + 8 * (v905 + (_DWORD)v907 * v904));
            v911 = *(_OWORD *)(v906 + 32);
            v912 = *(_OWORD *)(v906 + 48);
            v913 = *(_OWORD *)(v906 + 64);
            v914 = *(_OWORD *)(v906 + 80);
            v915 = *(_OWORD *)(v906 + 96);
            v916 = *(_OWORD *)(v906 + 112);
            v917 = *(_OWORD *)(v906 + 128);
            v918 = *(_OWORD *)(v906 + 144);
            v919 = *(_OWORD *)(v906 + 160);
            v920 = *(_OWORD *)(v906 + 176);
            *v910 = *(_OWORD *)v906;
            v910[1] = v909;
            v921 = (_OWORD *)((char *)v910 + 8 * v907);
            *v921 = v911;
            v921[1] = v912;
            v922 = &v910[v907];
            *v922 = v913;
            v922[1] = v914;
            v923 = (_OWORD *)((char *)v910 + 24 * v907);
            *v923 = v915;
            v923[1] = v916;
            v924 = &v910[2 * v907];
            *v924 = v917;
            v924[1] = v918;
            v925 = (_OWORD *)((char *)v910 + 40 * v907);
            *v925 = v919;
            v925[1] = v920;
          }
          else
          {
            v926 = (int64x2_t *)(v908 + 8 * (v904 + (_DWORD)v907 * v905));
            v927 = *(int64x2_t *)(v906 + 16);
            v929 = *(int64x2_t *)(v906 + 32);
            v928 = *(int64x2_t *)(v906 + 48);
            v931 = *(int64x2_t *)(v906 + 64);
            v930 = *(int64x2_t *)(v906 + 80);
            v933 = *(int64x2_t *)(v906 + 128);
            v932 = *(int64x2_t *)(v906 + 144);
            v934 = vzip1q_s64(*(int64x2_t *)v906, v929);
            v935 = vzip1q_s64(v931, *(int64x2_t *)(v906 + 96));
            v936 = vzip1q_s64(v933, *(int64x2_t *)(v906 + 160));
            v931.i64[0] = vdupq_laneq_s64(v931, 1).u64[0];
            v931.i64[1] = *(_QWORD *)(v906 + 104);
            v937.i64[0] = vdupq_laneq_s64(v933, 1).u64[0];
            v938 = vzip2q_s64(*(int64x2_t *)v906, v929);
            v937.i64[1] = *(_QWORD *)(v906 + 168);
            v939 = vzip1q_s64(v930, *(int64x2_t *)(v906 + 112));
            v940 = vzip1q_s64(v932, *(int64x2_t *)(v906 + 176));
            v930.i64[0] = vdupq_laneq_s64(v930, 1).u64[0];
            v930.i64[1] = *(_QWORD *)(v906 + 120);
            v941.i64[0] = vdupq_laneq_s64(v932, 1).u64[0];
            v941.i64[1] = *(_QWORD *)(v906 + 184);
            v926[1] = v935;
            v926[2] = v936;
            *v926 = v934;
            v942 = (int64x2_t *)((char *)v926 + 8 * v907);
            v942[1] = v931;
            v942[2] = v937;
            *v942 = v938;
            v943 = &v926[v907];
            v943[1] = v939;
            v943[2] = v940;
            *v943 = vzip1q_s64(v927, v928);
            v944 = (int64x2_t *)((char *)v926 + 24 * v907);
            v944[1] = v930;
            v944[2] = v941;
            *v944 = vzip2q_s64(v927, v928);
          }
          v945 = v899 + 1;
          while (v945 != v902)
          {
            ++v901;
            v946 = *v945++;
            v903 = v946;
            if (v946 != -1)
            {
              v899 = v945 - 1;
              goto LABEL_450;
            }
          }
          v894 = *(_DWORD *)(result + 1020);
        }
      }
      ++v895;
      ++v896;
    }
    while (v895 < v894);
    v5 = *a5;
  }
  v950 = *(_DWORD *)(result + 2460);
  if (v950)
  {
    v951 = 0;
    v952 = a4[3];
    do
    {
      v953 = *(_QWORD *)(result + 2536);
      v954 = *(_DWORD *)(result + 2560) * v951;
      v955 = (uint64_t *)(v953 + 8 * v954);
      v956 = *(_DWORD *)(result + 2456);
      if (v956 && *v955 == -1)
      {
        v957 = 0;
        v1017 = 8 * (v956 + v954) - 8 * v954 - 8;
        v1018 = v953 + 8 * v954;
        while (v1017)
        {
          v955 = (uint64_t *)(v1018 + 8);
          ++v957;
          v1019 = *(_QWORD *)(v1018 + 8);
          v1017 -= 8;
          v1018 += 8;
          if (v1019 != -1)
            goto LABEL_470;
        }
      }
      else
      {
        v957 = 0;
LABEL_470:
        v958 = (uint64_t *)(v953 + 8 * (v954 + v956));
        if (v955 != v958)
        {
          v959 = *v955;
LABEL_472:
          v960 = *v952;
          v961 = *(_DWORD *)(a3[21] + 4 * v957);
          v962 = *(_QWORD *)(result + 2464) + 8 * v959;
          v963 = *((unsigned int *)a2 + 4);
          v964 = *a2;
          if (v5 && v960 < v961)
          {
            v965 = *(_OWORD *)(v962 + 16);
            v966 = (_OWORD *)(v964 + 8 * (v961 + (_DWORD)v963 * v960));
            v967 = *(_OWORD *)(v962 + 32);
            v968 = *(_OWORD *)(v962 + 48);
            v969 = *(_OWORD *)(v962 + 64);
            v970 = *(_OWORD *)(v962 + 80);
            v971 = *(_OWORD *)(v962 + 96);
            v972 = *(_OWORD *)(v962 + 112);
            v973 = *(_OWORD *)(v962 + 128);
            v974 = *(_OWORD *)(v962 + 144);
            v975 = *(_OWORD *)(v962 + 160);
            v976 = *(_OWORD *)(v962 + 176);
            v977 = *(_OWORD *)(v962 + 192);
            v978 = *(_OWORD *)(v962 + 208);
            v979 = *(_OWORD *)(v962 + 224);
            v980 = *(_OWORD *)(v962 + 240);
            v981 = *(_OWORD *)(v962 + 256);
            v982 = *(_OWORD *)(v962 + 272);
            *v966 = *(_OWORD *)v962;
            v966[1] = v965;
            v983 = (_OWORD *)((char *)v966 + 8 * v963);
            *v983 = v967;
            v983[1] = v968;
            v984 = &v966[v963];
            *v984 = v969;
            v984[1] = v970;
            v985 = (_OWORD *)((char *)v966 + 24 * v963);
            *v985 = v971;
            v985[1] = v972;
            v986 = &v966[2 * v963];
            *v986 = v973;
            v986[1] = v974;
            v987 = (_OWORD *)((char *)v966 + 40 * v963);
            *v987 = v975;
            v987[1] = v976;
            v988 = &v966[3 * v963];
            *v988 = v977;
            v988[1] = v978;
            v989 = (_OWORD *)((char *)v966 + 56 * v963);
            *v989 = v979;
            v989[1] = v980;
            v990 = &v966[4 * v963];
            *v990 = v981;
            v990[1] = v982;
          }
          else
          {
            v991 = *(int64x2_t *)(v962 + 16);
            v992 = (int64x2_t *)(v964 + 8 * (v960 + (_DWORD)v963 * v961));
            v994 = *(int64x2_t *)(v962 + 32);
            v993 = *(int64x2_t *)(v962 + 48);
            v996 = *(int64x2_t *)(v962 + 64);
            v995 = *(int64x2_t *)(v962 + 80);
            v998 = *(int64x2_t *)(v962 + 128);
            v997 = *(int64x2_t *)(v962 + 144);
            v1000 = *(int64x2_t *)(v962 + 192);
            v999 = *(int64x2_t *)(v962 + 208);
            v1002 = *(_OWORD *)(v962 + 256);
            v1001 = *(_OWORD *)(v962 + 272);
            v1003 = vzip1q_s64(*(int64x2_t *)v962, v994);
            v1004 = vzip1q_s64(v996, *(int64x2_t *)(v962 + 96));
            v1005 = vzip1q_s64(v1000, *(int64x2_t *)(v962 + 224));
            v1006 = vzip2q_s64(*(int64x2_t *)v962, v994);
            v994.i64[0] = vdupq_laneq_s64(v996, 1).u64[0];
            v994.i64[1] = *(_QWORD *)(v962 + 104);
            v996.i64[0] = vdupq_laneq_s64(v998, 1).u64[0];
            v996.i64[1] = *(_QWORD *)(v962 + 168);
            v1007.i64[0] = vdupq_laneq_s64(v1000, 1).u64[0];
            v1007.i64[1] = *(_QWORD *)(v962 + 232);
            v1008 = vzip1q_s64(v995, *(int64x2_t *)(v962 + 112));
            v1009 = vzip1q_s64(v997, *(int64x2_t *)(v962 + 176));
            v1010 = vzip1q_s64(v999, *(int64x2_t *)(v962 + 240));
            v995.i64[0] = vdupq_laneq_s64(v995, 1).u64[0];
            v995.i64[1] = *(_QWORD *)(v962 + 120);
            v1011.i64[0] = vdupq_laneq_s64(v997, 1).u64[0];
            v1011.i64[1] = *(_QWORD *)(v962 + 184);
            v997.i64[0] = vdupq_laneq_s64(v999, 1).u64[0];
            v997.i64[1] = *(_QWORD *)(v962 + 248);
            v992[2] = vzip1q_s64(v998, *(int64x2_t *)(v962 + 160));
            v992[3] = v1005;
            v992[4].i64[0] = v1002;
            *v992 = v1003;
            v992[1] = v1004;
            v1012 = (int64x2_t *)((char *)v992 + 8 * v963);
            v1012[2] = v996;
            v1012[3] = v1007;
            *v1012 = v1006;
            v1012[1] = v994;
            v1012[4].i64[0] = *((_QWORD *)&v1002 + 1);
            v1013 = &v992[v963];
            v1013[4].i64[0] = v1001;
            v1013[2] = v1009;
            v1013[3] = v1010;
            *v1013 = vzip1q_s64(v991, v993);
            v1013[1] = v1008;
            v1014 = (int64x2_t *)((char *)v992 + 24 * v963);
            v1014[4].i64[0] = *((_QWORD *)&v1001 + 1);
            v1014[2] = v1011;
            v1014[3] = v997;
            *v1014 = vzip2q_s64(v991, v993);
            v1014[1] = v995;
          }
          v1015 = v955 + 1;
          while (v1015 != v958)
          {
            ++v957;
            v1016 = *v1015++;
            v959 = v1016;
            if (v1016 != -1)
            {
              v955 = v1015 - 1;
              goto LABEL_472;
            }
          }
          v950 = *(_DWORD *)(result + 2460);
        }
      }
      ++v951;
      ++v952;
    }
    while (v951 < v950);
    v5 = *a5;
  }
  v1020 = *(_DWORD *)(result + 3900);
  if (v1020)
  {
    v1021 = 0;
    v1022 = a4[6];
    do
    {
      v1023 = *(_QWORD *)(result + 3976);
      v1024 = *(_DWORD *)(result + 4000) * v1021;
      v1025 = (uint64_t *)(v1023 + 8 * v1024);
      v1026 = *(_DWORD *)(result + 3896);
      if (v1026 && *v1025 == -1)
      {
        v1027 = 0;
        v1073 = 8 * (v1026 + v1024) - 8 * v1024 - 8;
        v1074 = v1023 + 8 * v1024;
        while (v1073)
        {
          v1025 = (uint64_t *)(v1074 + 8);
          ++v1027;
          v1075 = *(_QWORD *)(v1074 + 8);
          v1073 -= 8;
          v1074 += 8;
          if (v1075 != -1)
            goto LABEL_492;
        }
      }
      else
      {
        v1027 = 0;
LABEL_492:
        v1028 = (uint64_t *)(v1023 + 8 * (v1024 + v1026));
        if (v1025 != v1028)
        {
          v1029 = *v1025;
LABEL_494:
          v1030 = *v1022;
          v1031 = *(_DWORD *)(a3[21] + 4 * v1027);
          v1032 = *(_QWORD *)(result + 3904) + 8 * v1029;
          v1033 = *((unsigned int *)a2 + 4);
          v1034 = *a2;
          if (v5 && v1030 < v1031)
          {
            v1035 = *(_OWORD *)(v1032 + 16);
            v1036 = (_OWORD *)(v1034 + 8 * (v1031 + (_DWORD)v1033 * v1030));
            v1037 = *(_OWORD *)(v1032 + 32);
            v1038 = *(_OWORD *)(v1032 + 48);
            v1039 = *(_OWORD *)(v1032 + 64);
            v1040 = *(_OWORD *)(v1032 + 80);
            v1041 = *(_OWORD *)(v1032 + 96);
            v1042 = *(_OWORD *)(v1032 + 112);
            v1043 = *(_OWORD *)(v1032 + 128);
            v1044 = *(_OWORD *)(v1032 + 144);
            v1045 = *(_OWORD *)(v1032 + 160);
            v1046 = *(_OWORD *)(v1032 + 176);
            *v1036 = *(_OWORD *)v1032;
            v1036[1] = v1035;
            v1047 = (_OWORD *)((char *)v1036 + 8 * v1033);
            *v1047 = v1037;
            v1047[1] = v1038;
            v1048 = &v1036[v1033];
            *v1048 = v1039;
            v1048[1] = v1040;
            v1049 = (_OWORD *)((char *)v1036 + 24 * v1033);
            *v1049 = v1041;
            v1049[1] = v1042;
            v1050 = &v1036[2 * v1033];
            *v1050 = v1043;
            v1050[1] = v1044;
            v1051 = (_OWORD *)((char *)v1036 + 40 * v1033);
            *v1051 = v1045;
            v1051[1] = v1046;
          }
          else
          {
            v1052 = (int64x2_t *)(v1034 + 8 * (v1030 + (_DWORD)v1033 * v1031));
            v1053 = *(int64x2_t *)(v1032 + 16);
            v1055 = *(int64x2_t *)(v1032 + 32);
            v1054 = *(int64x2_t *)(v1032 + 48);
            v1057 = *(int64x2_t *)(v1032 + 64);
            v1056 = *(int64x2_t *)(v1032 + 80);
            v1059 = *(int64x2_t *)(v1032 + 128);
            v1058 = *(int64x2_t *)(v1032 + 144);
            v1060 = vzip1q_s64(*(int64x2_t *)v1032, v1055);
            v1061 = vzip1q_s64(v1057, *(int64x2_t *)(v1032 + 96));
            v1062 = vzip1q_s64(v1059, *(int64x2_t *)(v1032 + 160));
            v1057.i64[0] = vdupq_laneq_s64(v1057, 1).u64[0];
            v1057.i64[1] = *(_QWORD *)(v1032 + 104);
            v1063.i64[0] = vdupq_laneq_s64(v1059, 1).u64[0];
            v1064 = vzip2q_s64(*(int64x2_t *)v1032, v1055);
            v1063.i64[1] = *(_QWORD *)(v1032 + 168);
            v1065 = vzip1q_s64(v1056, *(int64x2_t *)(v1032 + 112));
            v1066 = vzip1q_s64(v1058, *(int64x2_t *)(v1032 + 176));
            v1056.i64[0] = vdupq_laneq_s64(v1056, 1).u64[0];
            v1056.i64[1] = *(_QWORD *)(v1032 + 120);
            v1067.i64[0] = vdupq_laneq_s64(v1058, 1).u64[0];
            v1067.i64[1] = *(_QWORD *)(v1032 + 184);
            v1052[1] = v1061;
            v1052[2] = v1062;
            *v1052 = v1060;
            v1068 = (int64x2_t *)((char *)v1052 + 8 * v1033);
            v1068[1] = v1057;
            v1068[2] = v1063;
            *v1068 = v1064;
            v1069 = &v1052[v1033];
            v1069[1] = v1065;
            v1069[2] = v1066;
            *v1069 = vzip1q_s64(v1053, v1054);
            v1070 = (int64x2_t *)((char *)v1052 + 24 * v1033);
            v1070[1] = v1056;
            v1070[2] = v1067;
            *v1070 = vzip2q_s64(v1053, v1054);
          }
          v1071 = v1025 + 1;
          while (v1071 != v1028)
          {
            ++v1027;
            v1072 = *v1071++;
            v1029 = v1072;
            if (v1072 != -1)
            {
              v1025 = v1071 - 1;
              goto LABEL_494;
            }
          }
          v1020 = *(_DWORD *)(result + 3900);
        }
      }
      ++v1021;
      ++v1022;
    }
    while (v1021 < v1020);
    v5 = *a5;
  }
  v1076 = *(_DWORD *)(result + 5340);
  if (v1076)
  {
    v1077 = 0;
    v1078 = a4[9];
    do
    {
      v1079 = *(_QWORD *)(result + 5416);
      v1080 = *(_DWORD *)(result + 5440) * v1077;
      v1081 = (uint64_t *)(v1079 + 8 * v1080);
      v1082 = *(_DWORD *)(result + 5336);
      if (v1082 && *v1081 == -1)
      {
        v1083 = 0;
        v1129 = 8 * (v1082 + v1080) - 8 * v1080 - 8;
        v1130 = v1079 + 8 * v1080;
        while (v1129)
        {
          v1081 = (uint64_t *)(v1130 + 8);
          ++v1083;
          v1131 = *(_QWORD *)(v1130 + 8);
          v1129 -= 8;
          v1130 += 8;
          if (v1131 != -1)
            goto LABEL_514;
        }
      }
      else
      {
        v1083 = 0;
LABEL_514:
        v1084 = (uint64_t *)(v1079 + 8 * (v1080 + v1082));
        if (v1081 != v1084)
        {
          v1085 = *v1081;
LABEL_516:
          v1086 = *v1078;
          v1087 = *(_DWORD *)(a3[21] + 4 * v1083);
          v1088 = *(_QWORD *)(result + 5344) + 8 * v1085;
          v1089 = *((unsigned int *)a2 + 4);
          v1090 = *a2;
          if (v5 && v1086 < v1087)
          {
            v1091 = *(_OWORD *)(v1088 + 16);
            v1092 = (_OWORD *)(v1090 + 8 * (v1087 + (_DWORD)v1089 * v1086));
            v1093 = *(_OWORD *)(v1088 + 32);
            v1094 = *(_OWORD *)(v1088 + 48);
            v1095 = *(_OWORD *)(v1088 + 64);
            v1096 = *(_OWORD *)(v1088 + 80);
            v1097 = *(_OWORD *)(v1088 + 96);
            v1098 = *(_OWORD *)(v1088 + 112);
            v1099 = *(_OWORD *)(v1088 + 128);
            v1100 = *(_OWORD *)(v1088 + 144);
            v1101 = *(_OWORD *)(v1088 + 160);
            v1102 = *(_OWORD *)(v1088 + 176);
            *v1092 = *(_OWORD *)v1088;
            v1092[1] = v1091;
            v1103 = (_OWORD *)((char *)v1092 + 8 * v1089);
            *v1103 = v1093;
            v1103[1] = v1094;
            v1104 = &v1092[v1089];
            *v1104 = v1095;
            v1104[1] = v1096;
            v1105 = (_OWORD *)((char *)v1092 + 24 * v1089);
            *v1105 = v1097;
            v1105[1] = v1098;
            v1106 = &v1092[2 * v1089];
            *v1106 = v1099;
            v1106[1] = v1100;
            v1107 = (_OWORD *)((char *)v1092 + 40 * v1089);
            *v1107 = v1101;
            v1107[1] = v1102;
          }
          else
          {
            v1108 = (int64x2_t *)(v1090 + 8 * (v1086 + (_DWORD)v1089 * v1087));
            v1109 = *(int64x2_t *)(v1088 + 16);
            v1111 = *(int64x2_t *)(v1088 + 32);
            v1110 = *(int64x2_t *)(v1088 + 48);
            v1113 = *(int64x2_t *)(v1088 + 64);
            v1112 = *(int64x2_t *)(v1088 + 80);
            v1115 = *(int64x2_t *)(v1088 + 128);
            v1114 = *(int64x2_t *)(v1088 + 144);
            v1116 = vzip1q_s64(*(int64x2_t *)v1088, v1111);
            v1117 = vzip1q_s64(v1113, *(int64x2_t *)(v1088 + 96));
            v1118 = vzip1q_s64(v1115, *(int64x2_t *)(v1088 + 160));
            v1113.i64[0] = vdupq_laneq_s64(v1113, 1).u64[0];
            v1113.i64[1] = *(_QWORD *)(v1088 + 104);
            v1119.i64[0] = vdupq_laneq_s64(v1115, 1).u64[0];
            v1120 = vzip2q_s64(*(int64x2_t *)v1088, v1111);
            v1119.i64[1] = *(_QWORD *)(v1088 + 168);
            v1121 = vzip1q_s64(v1112, *(int64x2_t *)(v1088 + 112));
            v1122 = vzip1q_s64(v1114, *(int64x2_t *)(v1088 + 176));
            v1112.i64[0] = vdupq_laneq_s64(v1112, 1).u64[0];
            v1112.i64[1] = *(_QWORD *)(v1088 + 120);
            v1123.i64[0] = vdupq_laneq_s64(v1114, 1).u64[0];
            v1123.i64[1] = *(_QWORD *)(v1088 + 184);
            v1108[1] = v1117;
            v1108[2] = v1118;
            *v1108 = v1116;
            v1124 = (int64x2_t *)((char *)v1108 + 8 * v1089);
            v1124[1] = v1113;
            v1124[2] = v1119;
            *v1124 = v1120;
            v1125 = &v1108[v1089];
            v1125[1] = v1121;
            v1125[2] = v1122;
            *v1125 = vzip1q_s64(v1109, v1110);
            v1126 = (int64x2_t *)((char *)v1108 + 24 * v1089);
            v1126[1] = v1112;
            v1126[2] = v1123;
            *v1126 = vzip2q_s64(v1109, v1110);
          }
          v1127 = v1081 + 1;
          while (v1127 != v1084)
          {
            ++v1083;
            v1128 = *v1127++;
            v1085 = v1128;
            if (v1128 != -1)
            {
              v1081 = v1127 - 1;
              goto LABEL_516;
            }
          }
          v1076 = *(_DWORD *)(result + 5340);
        }
      }
      ++v1077;
      ++v1078;
    }
    while (v1077 < v1076);
    v5 = *a5;
  }
  v1132 = *(_DWORD *)(result + 6780);
  if (v1132)
  {
    v1133 = 0;
    v1134 = a4[12];
    do
    {
      v1135 = *(_QWORD *)(result + 6856);
      v1136 = *(_DWORD *)(result + 6880) * v1133;
      v1137 = (uint64_t *)(v1135 + 8 * v1136);
      v1138 = *(_DWORD *)(result + 6776);
      if (v1138 && *v1137 == -1)
      {
        v1139 = 0;
        v1168 = 8 * (v1138 + v1136) - 8 * v1136 - 8;
        v1169 = v1135 + 8 * v1136;
        while (v1168)
        {
          v1137 = (uint64_t *)(v1169 + 8);
          ++v1139;
          v1170 = *(_QWORD *)(v1169 + 8);
          v1168 -= 8;
          v1169 += 8;
          if (v1170 != -1)
            goto LABEL_536;
        }
      }
      else
      {
        v1139 = 0;
LABEL_536:
        v1140 = (uint64_t *)(v1135 + 8 * (v1136 + v1138));
        if (v1137 != v1140)
        {
          v1141 = *v1137;
LABEL_538:
          v1142 = *v1134;
          v1143 = *(_DWORD *)(a3[21] + 4 * v1139);
          v1144 = *(_QWORD *)(result + 6784) + 8 * v1141;
          v1145 = *((unsigned int *)a2 + 4);
          v1146 = *a2;
          if (v5 && v1142 < v1143)
          {
            v1147 = *(_OWORD *)(v1144 + 16);
            v1148 = (_OWORD *)(v1146 + 8 * (v1143 + (_DWORD)v1145 * v1142));
            v1149 = *(_OWORD *)(v1144 + 32);
            v1150 = *(_OWORD *)(v1144 + 48);
            v1151 = *(_OWORD *)(v1144 + 64);
            v1152 = *(_OWORD *)(v1144 + 80);
            *v1148 = *(_OWORD *)v1144;
            v1148[1] = v1147;
            v1153 = (_OWORD *)((char *)v1148 + 8 * v1145);
            *v1153 = v1149;
            v1153[1] = v1150;
            v1154 = &v1148[v1145];
            *v1154 = v1151;
            v1154[1] = v1152;
          }
          else
          {
            v1155 = (int64x2_t *)(v1146 + 8 * (v1142 + (_DWORD)v1145 * v1143));
            v1156 = *(int64x2_t *)(v1144 + 16);
            v1158 = *(int64x2_t *)(v1144 + 32);
            v1157 = *(int64x2_t *)(v1144 + 48);
            v1160 = *(_OWORD *)(v1144 + 64);
            v1159 = *(_OWORD *)(v1144 + 80);
            v1161 = vzip1q_s64(*(int64x2_t *)v1144, v1158);
            v1162 = vzip2q_s64(*(int64x2_t *)v1144, v1158);
            v1155[1].i64[0] = v1160;
            *v1155 = v1161;
            v1163 = (int64x2_t *)((char *)v1155 + 8 * v1145);
            *v1163 = v1162;
            v1163[1].i64[0] = *((_QWORD *)&v1160 + 1);
            v1164 = &v1155[v1145];
            v1164[1].i64[0] = v1159;
            *v1164 = vzip1q_s64(v1156, v1157);
            v1165 = (int64x2_t *)((char *)v1155 + 24 * v1145);
            v1165[1].i64[0] = *((_QWORD *)&v1159 + 1);
            *v1165 = vzip2q_s64(v1156, v1157);
          }
          v1166 = v1137 + 1;
          while (v1166 != v1140)
          {
            ++v1139;
            v1167 = *v1166++;
            v1141 = v1167;
            if (v1167 != -1)
            {
              v1137 = v1166 - 1;
              goto LABEL_538;
            }
          }
          v1132 = *(_DWORD *)(result + 6780);
        }
      }
      ++v1133;
      ++v1134;
    }
    while (v1133 < v1132);
    v5 = *a5;
  }
  v1171 = *(_DWORD *)(result + 8220);
  if (v1171)
  {
    v1172 = 0;
    v1173 = a4[15];
    do
    {
      v1174 = *(_QWORD *)(result + 8296);
      v1175 = *(_DWORD *)(result + 8320) * v1172;
      v1176 = (uint64_t *)(v1174 + 8 * v1175);
      v1177 = *(_DWORD *)(result + 8216);
      if (v1177 && *v1176 == -1)
      {
        v1178 = 0;
        v1192 = 8 * (v1177 + v1175) - 8 * v1175 - 8;
        v1193 = v1174 + 8 * v1175;
        while (v1192)
        {
          v1176 = (uint64_t *)(v1193 + 8);
          ++v1178;
          v1194 = *(_QWORD *)(v1193 + 8);
          v1192 -= 8;
          v1193 += 8;
          if (v1194 != -1)
            goto LABEL_558;
        }
      }
      else
      {
        v1178 = 0;
LABEL_558:
        v1179 = (uint64_t *)(v1174 + 8 * (v1175 + v1177));
        if (v1176 != v1179)
        {
          v1180 = *v1176;
LABEL_560:
          v1181 = *v1173;
          v1182 = *(_DWORD *)(a3[21] + 4 * v1178);
          v1183 = (int8x16_t *)(*(_QWORD *)(result + 8224) + 8 * v1180);
          v1184 = *((unsigned int *)a2 + 4);
          v1185 = *a2;
          v1187 = *v1183;
          v1186 = v1183[1];
          if (v5 && v1181 < v1182)
          {
            v1188 = (int8x16_t *)(v1185 + 8 * (v1182 + (_DWORD)v1184 * v1181));
            *v1188 = v1187;
            v1188[1] = v1186;
          }
          else
          {
            v1189 = (_QWORD *)(v1185 + 8 * (v1181 + (_DWORD)v1184 * v1182));
            *v1189 = v1187.i64[0];
            v1189[v1184] = vextq_s8(v1187, v1187, 8uLL).u64[0];
            v1189[2 * v1184] = v1186.i64[0];
            v1189[3 * v1184] = vextq_s8(v1186, v1186, 8uLL).u64[0];
          }
          v1190 = v1176 + 1;
          while (v1190 != v1179)
          {
            ++v1178;
            v1191 = *v1190++;
            v1180 = v1191;
            if (v1191 != -1)
            {
              v1176 = v1190 - 1;
              goto LABEL_560;
            }
          }
          v1171 = *(_DWORD *)(result + 8220);
        }
      }
      ++v1172;
      ++v1173;
    }
    while (v1172 < v1171);
    v5 = *a5;
  }
  v1195 = *(_DWORD *)(result + 9660);
  if (v1195)
  {
    v1196 = 0;
    v1197 = a4[18];
    do
    {
      v1198 = *(_QWORD *)(result + 9736);
      v1199 = *(_DWORD *)(result + 9760) * v1196;
      v1200 = (uint64_t *)(v1198 + 8 * v1199);
      v1201 = *(_DWORD *)(result + 9656);
      if (v1201 && *v1200 == -1)
      {
        v1202 = 0;
        v1231 = 8 * (v1201 + v1199) - 8 * v1199 - 8;
        v1232 = v1198 + 8 * v1199;
        while (v1231)
        {
          v1200 = (uint64_t *)(v1232 + 8);
          ++v1202;
          v1233 = *(_QWORD *)(v1232 + 8);
          v1231 -= 8;
          v1232 += 8;
          if (v1233 != -1)
            goto LABEL_580;
        }
      }
      else
      {
        v1202 = 0;
LABEL_580:
        v1203 = (uint64_t *)(v1198 + 8 * (v1199 + v1201));
        if (v1200 != v1203)
        {
          v1204 = *v1200;
LABEL_582:
          v1205 = *v1197;
          v1206 = *(_DWORD *)(a3[21] + 4 * v1202);
          v1207 = *(_QWORD *)(result + 9664) + 8 * v1204;
          v1208 = *((unsigned int *)a2 + 4);
          v1209 = *a2;
          if (v5 && v1205 < v1206)
          {
            v1210 = *(_OWORD *)(v1207 + 16);
            v1211 = (_OWORD *)(v1209 + 8 * (v1206 + (_DWORD)v1208 * v1205));
            v1212 = *(_OWORD *)(v1207 + 32);
            v1213 = *(_OWORD *)(v1207 + 48);
            v1214 = *(_OWORD *)(v1207 + 64);
            v1215 = *(_OWORD *)(v1207 + 80);
            *v1211 = *(_OWORD *)v1207;
            v1211[1] = v1210;
            v1216 = (_OWORD *)((char *)v1211 + 8 * v1208);
            *v1216 = v1212;
            v1216[1] = v1213;
            v1217 = &v1211[v1208];
            *v1217 = v1214;
            v1217[1] = v1215;
          }
          else
          {
            v1218 = (int64x2_t *)(v1209 + 8 * (v1205 + (_DWORD)v1208 * v1206));
            v1219 = *(int64x2_t *)(v1207 + 16);
            v1221 = *(int64x2_t *)(v1207 + 32);
            v1220 = *(int64x2_t *)(v1207 + 48);
            v1223 = *(_OWORD *)(v1207 + 64);
            v1222 = *(_OWORD *)(v1207 + 80);
            v1224 = vzip1q_s64(*(int64x2_t *)v1207, v1221);
            v1225 = vzip2q_s64(*(int64x2_t *)v1207, v1221);
            v1218[1].i64[0] = v1223;
            *v1218 = v1224;
            v1226 = (int64x2_t *)((char *)v1218 + 8 * v1208);
            *v1226 = v1225;
            v1226[1].i64[0] = *((_QWORD *)&v1223 + 1);
            v1227 = &v1218[v1208];
            v1227[1].i64[0] = v1222;
            *v1227 = vzip1q_s64(v1219, v1220);
            v1228 = (int64x2_t *)((char *)v1218 + 24 * v1208);
            v1228[1].i64[0] = *((_QWORD *)&v1222 + 1);
            *v1228 = vzip2q_s64(v1219, v1220);
          }
          v1229 = v1200 + 1;
          while (v1229 != v1203)
          {
            ++v1202;
            v1230 = *v1229++;
            v1204 = v1230;
            if (v1230 != -1)
            {
              v1200 = v1229 - 1;
              goto LABEL_582;
            }
          }
          v1195 = *(_DWORD *)(result + 9660);
        }
      }
      ++v1196;
      ++v1197;
    }
    while (v1196 < v1195);
    v5 = *a5;
  }
  v1234 = *(_DWORD *)(result + 11100);
  if (v1234)
  {
    v1235 = 0;
    v1236 = a4[21];
    do
    {
      v1237 = *(_QWORD *)(result + 11176);
      v1238 = *(_DWORD *)(result + 11200) * v1235;
      v1239 = (uint64_t *)(v1237 + 8 * v1238);
      v1240 = *(_DWORD *)(result + 11096);
      if (v1240 && *v1239 == -1)
      {
        v1241 = 0;
        v1271 = 8 * (v1240 + v1238) - 8 * v1238 - 8;
        v1272 = v1237 + 8 * v1238;
        while (v1271)
        {
          v1239 = (uint64_t *)(v1272 + 8);
          ++v1241;
          v1273 = *(_QWORD *)(v1272 + 8);
          v1271 -= 8;
          v1272 += 8;
          if (v1273 != -1)
            goto LABEL_602;
        }
      }
      else
      {
        v1241 = 0;
LABEL_602:
        v1242 = (uint64_t *)(v1237 + 8 * (v1238 + v1240));
        if (v1239 != v1242)
        {
          v1243 = *v1239;
LABEL_604:
          v1244 = *v1236;
          v1245 = *(_DWORD *)(a3[21] + 4 * v1241);
          v1246 = *(_QWORD *)(result + 11104) + 8 * v1243;
          v1247 = *((unsigned int *)a2 + 4);
          v1248 = *a2;
          if (v5 && v1244 < v1245)
          {
            v1249 = *(int64x2_t *)(v1246 + 16);
            v1250 = (int64x2_t *)(v1248 + 8 * (v1245 + (_DWORD)v1247 * v1244));
            v1251 = *(_OWORD *)(v1246 + 32);
            v1252 = *(_OWORD *)(v1246 + 48);
            v1253 = *(int64x2_t *)(v1246 + 64);
            v1254 = *(int64x2_t *)(v1246 + 80);
            v1256 = *(int64x2_t *)(v1246 + 96);
            v1255 = *(int64x2_t *)(v1246 + 112);
            *v1250 = *(int64x2_t *)v1246;
            v1250[1] = v1249;
            v1257 = &v1250->i8[8 * v1247];
            *(_OWORD *)v1257 = v1251;
            *((_OWORD *)v1257 + 1) = v1252;
          }
          else
          {
            v1250 = (int64x2_t *)(v1248 + 8 * (v1244 + (_DWORD)v1247 * v1245));
            v1258 = *(int64x2_t *)(v1246 + 16);
            v1259 = *(int64x2_t *)(v1246 + 32);
            v1260 = *(int64x2_t *)(v1246 + 48);
            v1262 = *(int64x2_t *)(v1246 + 64);
            v1261 = *(int64x2_t *)(v1246 + 80);
            v1263 = vzip1q_s64(*(int64x2_t *)v1246, v1259);
            v1264 = vzip1q_s64(v1262, *(int64x2_t *)(v1246 + 96));
            v1265 = vzip2q_s64(*(int64x2_t *)v1246, v1259);
            v1262.i64[0] = vdupq_laneq_s64(v1262, 1).u64[0];
            v1262.i64[1] = *(_QWORD *)(v1246 + 104);
            v1253 = vzip1q_s64(v1258, v1260);
            v1254 = vzip1q_s64(v1261, *(int64x2_t *)(v1246 + 112));
            v1255.i64[0] = vdupq_laneq_s64(v1261, 1).u64[0];
            v1255.i64[1] = *(_QWORD *)(v1246 + 120);
            v1256 = vzip2q_s64(v1258, v1260);
            *v1250 = v1263;
            v1250[1] = v1264;
            v1266 = (int64x2_t *)((char *)v1250 + 8 * v1247);
            *v1266 = v1265;
            v1266[1] = v1262;
          }
          v1267 = &v1250[v1247];
          *v1267 = v1253;
          v1267[1] = v1254;
          v1268 = (int64x2_t *)((char *)v1250 + 24 * v1247);
          *v1268 = v1256;
          v1268[1] = v1255;
          v1269 = v1239 + 1;
          while (v1269 != v1242)
          {
            ++v1241;
            v1270 = *v1269++;
            v1243 = v1270;
            if (v1270 != -1)
            {
              v1239 = v1269 - 1;
              goto LABEL_604;
            }
          }
          v1234 = *(_DWORD *)(result + 11100);
        }
      }
      ++v1235;
      ++v1236;
    }
    while (v1235 < v1234);
    v5 = *a5;
  }
  v1274 = *(_DWORD *)(result + 12540);
  if (v1274)
  {
    v1275 = 0;
    v1276 = a4[24];
    do
    {
      v1277 = *(_QWORD *)(result + 12616);
      v1278 = *(_DWORD *)(result + 12640) * v1275;
      v1279 = (uint64_t *)(v1277 + 8 * v1278);
      v1280 = *(_DWORD *)(result + 12536);
      if (v1280 && *v1279 == -1)
      {
        v1281 = 0;
        v1311 = 8 * (v1280 + v1278) - 8 * v1278 - 8;
        v1312 = v1277 + 8 * v1278;
        while (v1311)
        {
          v1279 = (uint64_t *)(v1312 + 8);
          ++v1281;
          v1313 = *(_QWORD *)(v1312 + 8);
          v1311 -= 8;
          v1312 += 8;
          if (v1313 != -1)
            goto LABEL_624;
        }
      }
      else
      {
        v1281 = 0;
LABEL_624:
        v1282 = (uint64_t *)(v1277 + 8 * (v1278 + v1280));
        if (v1279 != v1282)
        {
          v1283 = *v1279;
LABEL_626:
          v1284 = *v1276;
          v1285 = *(_DWORD *)(a3[21] + 4 * v1281);
          v1286 = *(_QWORD *)(result + 12544) + 8 * v1283;
          v1287 = *((unsigned int *)a2 + 4);
          v1288 = *a2;
          if (v5 && v1284 < v1285)
          {
            v1289 = *(int64x2_t *)(v1286 + 16);
            v1290 = (int64x2_t *)(v1288 + 8 * (v1285 + (_DWORD)v1287 * v1284));
            v1291 = *(_OWORD *)(v1286 + 32);
            v1292 = *(_OWORD *)(v1286 + 48);
            v1293 = *(int64x2_t *)(v1286 + 64);
            v1294 = *(int64x2_t *)(v1286 + 80);
            v1296 = *(int64x2_t *)(v1286 + 96);
            v1295 = *(int64x2_t *)(v1286 + 112);
            *v1290 = *(int64x2_t *)v1286;
            v1290[1] = v1289;
            v1297 = &v1290->i8[8 * v1287];
            *(_OWORD *)v1297 = v1291;
            *((_OWORD *)v1297 + 1) = v1292;
          }
          else
          {
            v1290 = (int64x2_t *)(v1288 + 8 * (v1284 + (_DWORD)v1287 * v1285));
            v1298 = *(int64x2_t *)(v1286 + 16);
            v1299 = *(int64x2_t *)(v1286 + 32);
            v1300 = *(int64x2_t *)(v1286 + 48);
            v1302 = *(int64x2_t *)(v1286 + 64);
            v1301 = *(int64x2_t *)(v1286 + 80);
            v1303 = vzip1q_s64(*(int64x2_t *)v1286, v1299);
            v1304 = vzip1q_s64(v1302, *(int64x2_t *)(v1286 + 96));
            v1305 = vzip2q_s64(*(int64x2_t *)v1286, v1299);
            v1302.i64[0] = vdupq_laneq_s64(v1302, 1).u64[0];
            v1302.i64[1] = *(_QWORD *)(v1286 + 104);
            v1293 = vzip1q_s64(v1298, v1300);
            v1294 = vzip1q_s64(v1301, *(int64x2_t *)(v1286 + 112));
            v1295.i64[0] = vdupq_laneq_s64(v1301, 1).u64[0];
            v1295.i64[1] = *(_QWORD *)(v1286 + 120);
            v1296 = vzip2q_s64(v1298, v1300);
            *v1290 = v1303;
            v1290[1] = v1304;
            v1306 = (int64x2_t *)((char *)v1290 + 8 * v1287);
            *v1306 = v1305;
            v1306[1] = v1302;
          }
          v1307 = &v1290[v1287];
          *v1307 = v1293;
          v1307[1] = v1294;
          v1308 = (int64x2_t *)((char *)v1290 + 24 * v1287);
          *v1308 = v1296;
          v1308[1] = v1295;
          v1309 = v1279 + 1;
          while (v1309 != v1282)
          {
            ++v1281;
            v1310 = *v1309++;
            v1283 = v1310;
            if (v1310 != -1)
            {
              v1279 = v1309 - 1;
              goto LABEL_626;
            }
          }
          v1274 = *(_DWORD *)(result + 12540);
        }
      }
      ++v1275;
      ++v1276;
    }
    while (v1275 < v1274);
    v5 = *a5;
  }
  v1314 = *(_DWORD *)(result + 13980);
  if (v1314)
  {
    v1315 = 0;
    v1316 = a4[27];
    do
    {
      v1317 = *(_QWORD *)(result + 14056);
      v1318 = *(_DWORD *)(result + 14080) * v1315;
      v1319 = (uint64_t *)(v1317 + 8 * v1318);
      v1320 = *(_DWORD *)(result + 13976);
      if (v1320 && *v1319 == -1)
      {
        v1321 = 0;
        v1350 = 8 * (v1320 + v1318) - 8 * v1318 - 8;
        v1351 = v1317 + 8 * v1318;
        while (v1350)
        {
          v1319 = (uint64_t *)(v1351 + 8);
          ++v1321;
          v1352 = *(_QWORD *)(v1351 + 8);
          v1350 -= 8;
          v1351 += 8;
          if (v1352 != -1)
            goto LABEL_646;
        }
      }
      else
      {
        v1321 = 0;
LABEL_646:
        v1322 = (uint64_t *)(v1317 + 8 * (v1318 + v1320));
        if (v1319 != v1322)
        {
          v1323 = *v1319;
LABEL_648:
          v1324 = *v1316;
          v1325 = *(_DWORD *)(a3[21] + 4 * v1321);
          v1326 = *(_QWORD *)(result + 13984) + 8 * v1323;
          v1327 = *((unsigned int *)a2 + 4);
          v1328 = *a2;
          if (v5 && v1324 < v1325)
          {
            v1329 = *(_OWORD *)(v1326 + 16);
            v1330 = (_OWORD *)(v1328 + 8 * (v1325 + (_DWORD)v1327 * v1324));
            v1331 = *(_OWORD *)(v1326 + 32);
            v1332 = *(_OWORD *)(v1326 + 48);
            v1333 = *(_OWORD *)(v1326 + 64);
            v1334 = *(_OWORD *)(v1326 + 80);
            *v1330 = *(_OWORD *)v1326;
            v1330[1] = v1329;
            v1335 = (_OWORD *)((char *)v1330 + 8 * v1327);
            *v1335 = v1331;
            v1335[1] = v1332;
            v1336 = &v1330[v1327];
            *v1336 = v1333;
            v1336[1] = v1334;
          }
          else
          {
            v1337 = (int64x2_t *)(v1328 + 8 * (v1324 + (_DWORD)v1327 * v1325));
            v1338 = *(int64x2_t *)(v1326 + 16);
            v1340 = *(int64x2_t *)(v1326 + 32);
            v1339 = *(int64x2_t *)(v1326 + 48);
            v1342 = *(_OWORD *)(v1326 + 64);
            v1341 = *(_OWORD *)(v1326 + 80);
            v1343 = vzip1q_s64(*(int64x2_t *)v1326, v1340);
            v1344 = vzip2q_s64(*(int64x2_t *)v1326, v1340);
            v1337[1].i64[0] = v1342;
            *v1337 = v1343;
            v1345 = (int64x2_t *)((char *)v1337 + 8 * v1327);
            *v1345 = v1344;
            v1345[1].i64[0] = *((_QWORD *)&v1342 + 1);
            v1346 = &v1337[v1327];
            v1346[1].i64[0] = v1341;
            *v1346 = vzip1q_s64(v1338, v1339);
            v1347 = (int64x2_t *)((char *)v1337 + 24 * v1327);
            v1347[1].i64[0] = *((_QWORD *)&v1341 + 1);
            *v1347 = vzip2q_s64(v1338, v1339);
          }
          v1348 = v1319 + 1;
          while (v1348 != v1322)
          {
            ++v1321;
            v1349 = *v1348++;
            v1323 = v1349;
            if (v1349 != -1)
            {
              v1319 = v1348 - 1;
              goto LABEL_648;
            }
          }
          v1314 = *(_DWORD *)(result + 13980);
        }
      }
      ++v1315;
      ++v1316;
    }
    while (v1315 < v1314);
    v5 = *a5;
  }
  v1353 = *(_DWORD *)(result + 876);
  if (v1353)
  {
    v1354 = 0;
    v1355 = *a4;
    do
    {
      v1356 = *(_QWORD *)(result + 952);
      v1357 = *(_DWORD *)(result + 976) * v1354;
      v1358 = (uint64_t *)(v1356 + 8 * v1357);
      v1359 = *(_DWORD *)(result + 872);
      if (v1359 && *v1358 == -1)
      {
        v1360 = 0;
        v1400 = 8 * (v1359 + v1357) - 8 * v1357 - 8;
        v1401 = v1356 + 8 * v1357;
        while (v1400)
        {
          v1358 = (uint64_t *)(v1401 + 8);
          ++v1360;
          v1402 = *(_QWORD *)(v1401 + 8);
          v1400 -= 8;
          v1401 += 8;
          if (v1402 != -1)
            goto LABEL_668;
        }
      }
      else
      {
        v1360 = 0;
LABEL_668:
        v1361 = (uint64_t *)(v1356 + 8 * (v1357 + v1359));
        if (v1358 != v1361)
        {
          v1362 = *v1358;
LABEL_670:
          v1363 = *v1355;
          v1364 = *(_DWORD *)(a3[18] + 4 * v1360);
          v1365 = *(_QWORD *)(result + 880) + 8 * v1362;
          v1366 = *((unsigned int *)a2 + 4);
          v1367 = *a2;
          if (v5 && v1363 < v1364)
          {
            v1368 = *(int64x2_t *)v1365;
            v1369 = (int64x2_t *)(v1367 + 8 * (v1364 + (_DWORD)v1366 * v1363));
            v1370 = *(_OWORD *)(v1365 + 24);
            v1371 = *(_QWORD *)(v1365 + 40);
            v1372 = *(int64x2_t *)(v1365 + 48);
            v1373 = *(_QWORD *)(v1365 + 64);
            v1374 = *(_OWORD *)(v1365 + 72);
            v1375 = *(_QWORD *)(v1365 + 88);
            v1376 = *(int64x2_t *)(v1365 + 96);
            v1377 = *(_QWORD *)(v1365 + 112);
            v1378 = *(_OWORD *)(v1365 + 120);
            v1379 = *(_QWORD *)(v1365 + 136);
            v1369[1].i64[0] = *(_QWORD *)(v1365 + 16);
            *v1369 = v1368;
            v1380 = &v1369->i8[8 * v1366];
            *((_QWORD *)v1380 + 2) = v1371;
            *(_OWORD *)v1380 = v1370;
            v1381 = &v1369[v1366];
            v1381[1].i64[0] = v1373;
            *v1381 = v1372;
            v1382 = &v1369->i8[24 * v1366];
            *((_QWORD *)v1382 + 2) = v1375;
            *(_OWORD *)v1382 = v1374;
            v1383 = &v1369[2 * v1366];
            v1383[1].i64[0] = v1377;
            *v1383 = v1376;
            v1384 = &v1369->i8[40 * v1366];
            *((_QWORD *)v1384 + 2) = v1379;
            *(_OWORD *)v1384 = v1378;
          }
          else
          {
            v1385 = (int64x2_t *)(v1367 + 8 * (v1363 + (_DWORD)v1366 * v1364));
            v1386.i64[0] = *(_QWORD *)(v1365 + 16);
            v1387 = *(int64x2_t *)(v1365 + 24);
            v1388.i64[0] = *(_QWORD *)(v1365 + 64);
            v1389 = *(int64x2_t *)(v1365 + 48);
            v1390 = *(int64x2_t *)(v1365 + 72);
            v1391.i64[0] = *(_QWORD *)(v1365 + 112);
            v1392 = *(int64x2_t *)(v1365 + 96);
            v1393 = *(int64x2_t *)(v1365 + 120);
            v1394 = vzip1q_s64(*(int64x2_t *)v1365, v1387);
            v1395 = vzip2q_s64(*(int64x2_t *)v1365, v1387);
            v1386.i64[1] = *(_QWORD *)(v1365 + 40);
            v1388.i64[1] = *(_QWORD *)(v1365 + 88);
            v1391.i64[1] = *(_QWORD *)(v1365 + 136);
            v1385[1] = vzip1q_s64(v1389, v1390);
            v1385[2] = vzip1q_s64(v1392, v1393);
            *v1385 = v1394;
            v1396 = (int64x2_t *)((char *)v1385 + 8 * v1366);
            v1396[1] = vzip1q_s64(vdupq_laneq_s64(v1389, 1), vdupq_laneq_s64(v1390, 1));
            v1396[2] = vzip2q_s64(v1392, v1393);
            *v1396 = v1395;
            v1397 = &v1385[v1366];
            v1397[1] = v1388;
            v1397[2] = v1391;
            *v1397 = v1386;
          }
          v1398 = v1358 + 1;
          while (v1398 != v1361)
          {
            ++v1360;
            v1399 = *v1398++;
            v1362 = v1399;
            if (v1399 != -1)
            {
              v1358 = v1398 - 1;
              goto LABEL_670;
            }
          }
          v1353 = *(_DWORD *)(result + 876);
        }
      }
      ++v1354;
      ++v1355;
    }
    while (v1354 < v1353);
    v5 = *a5;
  }
  v1403 = *(_DWORD *)(result + 2316);
  if (v1403)
  {
    v1404 = 0;
    v1405 = a4[3];
    do
    {
      v1406 = *(_QWORD *)(result + 2392);
      v1407 = *(_DWORD *)(result + 2416) * v1404;
      v1408 = (uint64_t *)(v1406 + 8 * v1407);
      v1409 = *(_DWORD *)(result + 2312);
      if (v1409 && *v1408 == -1)
      {
        v1410 = 0;
        v1464 = 8 * (v1409 + v1407) - 8 * v1407 - 8;
        v1465 = v1406 + 8 * v1407;
        while (v1464)
        {
          v1408 = (uint64_t *)(v1465 + 8);
          ++v1410;
          v1466 = *(_QWORD *)(v1465 + 8);
          v1464 -= 8;
          v1465 += 8;
          if (v1466 != -1)
            goto LABEL_690;
        }
      }
      else
      {
        v1410 = 0;
LABEL_690:
        v1411 = (uint64_t *)(v1406 + 8 * (v1407 + v1409));
        if (v1408 != v1411)
        {
          v1412 = *v1408;
LABEL_692:
          v1413 = *v1405;
          v1414 = *(_DWORD *)(a3[18] + 4 * v1410);
          v1415 = *(_QWORD *)(result + 2320) + 8 * v1412;
          v1416 = *((unsigned int *)a2 + 4);
          v1417 = *a2;
          if (v5 && v1413 < v1414)
          {
            v1418 = *(int64x2_t *)v1415;
            v1419 = (int64x2_t *)(v1417 + 8 * (v1414 + (_DWORD)v1416 * v1413));
            v1420 = *(_OWORD *)(v1415 + 24);
            v1421 = *(_QWORD *)(v1415 + 40);
            v1422 = *(int64x2_t *)(v1415 + 48);
            v1423 = *(_QWORD *)(v1415 + 64);
            v1424 = *(_OWORD *)(v1415 + 72);
            v1425 = *(_QWORD *)(v1415 + 88);
            v1426 = *(int64x2_t *)(v1415 + 96);
            v1427 = *(_QWORD *)(v1415 + 112);
            v1428 = *(_OWORD *)(v1415 + 120);
            v1429 = *(_QWORD *)(v1415 + 136);
            v1430 = *(int64x2_t *)(v1415 + 144);
            v1431 = *(_QWORD *)(v1415 + 160);
            v1432 = *(_OWORD *)(v1415 + 168);
            v1433 = *(_QWORD *)(v1415 + 184);
            v1434 = *(int64x2_t *)(v1415 + 192);
            v1435 = *(_QWORD *)(v1415 + 208);
            v1419[1].i64[0] = *(_QWORD *)(v1415 + 16);
            *v1419 = v1418;
            v1436 = &v1419->i8[8 * v1416];
            *((_QWORD *)v1436 + 2) = v1421;
            *(_OWORD *)v1436 = v1420;
            v1437 = &v1419[v1416];
            v1437[1].i64[0] = v1423;
            *v1437 = v1422;
            v1438 = &v1419->i8[24 * v1416];
            *((_QWORD *)v1438 + 2) = v1425;
            *(_OWORD *)v1438 = v1424;
            v1439 = &v1419[2 * v1416];
            v1439[1].i64[0] = v1427;
            *v1439 = v1426;
            v1440 = &v1419->i8[40 * v1416];
            *((_QWORD *)v1440 + 2) = v1429;
            *(_OWORD *)v1440 = v1428;
            v1441 = &v1419[3 * v1416];
            v1441[1].i64[0] = v1431;
            *v1441 = v1430;
            v1442 = &v1419->i8[56 * v1416];
            *((_QWORD *)v1442 + 2) = v1433;
            *(_OWORD *)v1442 = v1432;
            v1443 = &v1419[4 * v1416];
            v1443[1].i64[0] = v1435;
            *v1443 = v1434;
          }
          else
          {
            v1444.i64[0] = *(_QWORD *)(v1415 + 16);
            v1445 = (int64x2_t *)(v1417 + 8 * (v1413 + (_DWORD)v1416 * v1414));
            v1446 = *(int64x2_t *)(v1415 + 24);
            v1447.i64[0] = *(_QWORD *)(v1415 + 64);
            v1448 = *(int64x2_t *)(v1415 + 48);
            v1449 = *(int64x2_t *)(v1415 + 72);
            v1450.i64[0] = *(_QWORD *)(v1415 + 112);
            v1451 = *(int64x2_t *)(v1415 + 96);
            v1452 = *(int64x2_t *)(v1415 + 120);
            v1453.i64[0] = *(_QWORD *)(v1415 + 160);
            v1454 = *(int64x2_t *)(v1415 + 144);
            v1455 = *(int64x2_t *)(v1415 + 168);
            v1456 = *(_QWORD *)(v1415 + 208);
            v1457 = *(_OWORD *)(v1415 + 192);
            v1458 = vzip1q_s64(*(int64x2_t *)v1415, v1446);
            v1459 = vzip2q_s64(*(int64x2_t *)v1415, v1446);
            v1444.i64[1] = *(_QWORD *)(v1415 + 40);
            v1447.i64[1] = *(_QWORD *)(v1415 + 88);
            v1450.i64[1] = *(_QWORD *)(v1415 + 136);
            v1453.i64[1] = *(_QWORD *)(v1415 + 184);
            v1445[2] = vzip1q_s64(v1451, v1452);
            v1445[3] = vzip1q_s64(v1454, v1455);
            v1445[4].i64[0] = v1457;
            *v1445 = v1458;
            v1445[1] = vzip1q_s64(v1448, v1449);
            v1460 = (int64x2_t *)((char *)v1445 + 8 * v1416);
            v1460[2] = vzip2q_s64(v1451, v1452);
            v1460[3] = vzip2q_s64(v1454, v1455);
            *v1460 = v1459;
            v1460[1] = vzip2q_s64(v1448, v1449);
            v1460[4].i64[0] = *((_QWORD *)&v1457 + 1);
            v1461 = &v1445[v1416];
            v1461[4].i64[0] = v1456;
            v1461[2] = v1450;
            v1461[3] = v1453;
            *v1461 = v1444;
            v1461[1] = v1447;
          }
          v1462 = v1408 + 1;
          while (v1462 != v1411)
          {
            ++v1410;
            v1463 = *v1462++;
            v1412 = v1463;
            if (v1463 != -1)
            {
              v1408 = v1462 - 1;
              goto LABEL_692;
            }
          }
          v1403 = *(_DWORD *)(result + 2316);
        }
      }
      ++v1404;
      ++v1405;
    }
    while (v1404 < v1403);
    v5 = *a5;
  }
  v1467 = *(_DWORD *)(result + 3756);
  if (v1467)
  {
    v1468 = 0;
    v1469 = a4[6];
    do
    {
      v1470 = *(_QWORD *)(result + 3832);
      v1471 = *(_DWORD *)(result + 3856) * v1468;
      v1472 = (uint64_t *)(v1470 + 8 * v1471);
      v1473 = *(_DWORD *)(result + 3752);
      if (v1473 && *v1472 == -1)
      {
        v1474 = 0;
        v1514 = 8 * (v1473 + v1471) - 8 * v1471 - 8;
        v1515 = v1470 + 8 * v1471;
        while (v1514)
        {
          v1472 = (uint64_t *)(v1515 + 8);
          ++v1474;
          v1516 = *(_QWORD *)(v1515 + 8);
          v1514 -= 8;
          v1515 += 8;
          if (v1516 != -1)
            goto LABEL_712;
        }
      }
      else
      {
        v1474 = 0;
LABEL_712:
        v1475 = (uint64_t *)(v1470 + 8 * (v1471 + v1473));
        if (v1472 != v1475)
        {
          v1476 = *v1472;
LABEL_714:
          v1477 = *v1469;
          v1478 = *(_DWORD *)(a3[18] + 4 * v1474);
          v1479 = *(_QWORD *)(result + 3760) + 8 * v1476;
          v1480 = *((unsigned int *)a2 + 4);
          v1481 = *a2;
          if (v5 && v1477 < v1478)
          {
            v1482 = *(int64x2_t *)v1479;
            v1483 = (int64x2_t *)(v1481 + 8 * (v1478 + (_DWORD)v1480 * v1477));
            v1484 = *(_OWORD *)(v1479 + 24);
            v1485 = *(_QWORD *)(v1479 + 40);
            v1486 = *(int64x2_t *)(v1479 + 48);
            v1487 = *(_QWORD *)(v1479 + 64);
            v1488 = *(_OWORD *)(v1479 + 72);
            v1489 = *(_QWORD *)(v1479 + 88);
            v1490 = *(int64x2_t *)(v1479 + 96);
            v1491 = *(_QWORD *)(v1479 + 112);
            v1492 = *(_OWORD *)(v1479 + 120);
            v1493 = *(_QWORD *)(v1479 + 136);
            v1483[1].i64[0] = *(_QWORD *)(v1479 + 16);
            *v1483 = v1482;
            v1494 = &v1483->i8[8 * v1480];
            *((_QWORD *)v1494 + 2) = v1485;
            *(_OWORD *)v1494 = v1484;
            v1495 = &v1483[v1480];
            v1495[1].i64[0] = v1487;
            *v1495 = v1486;
            v1496 = &v1483->i8[24 * v1480];
            *((_QWORD *)v1496 + 2) = v1489;
            *(_OWORD *)v1496 = v1488;
            v1497 = &v1483[2 * v1480];
            v1497[1].i64[0] = v1491;
            *v1497 = v1490;
            v1498 = &v1483->i8[40 * v1480];
            *((_QWORD *)v1498 + 2) = v1493;
            *(_OWORD *)v1498 = v1492;
          }
          else
          {
            v1499 = (int64x2_t *)(v1481 + 8 * (v1477 + (_DWORD)v1480 * v1478));
            v1500.i64[0] = *(_QWORD *)(v1479 + 16);
            v1501 = *(int64x2_t *)(v1479 + 24);
            v1502.i64[0] = *(_QWORD *)(v1479 + 64);
            v1503 = *(int64x2_t *)(v1479 + 48);
            v1504 = *(int64x2_t *)(v1479 + 72);
            v1505.i64[0] = *(_QWORD *)(v1479 + 112);
            v1506 = *(int64x2_t *)(v1479 + 96);
            v1507 = *(int64x2_t *)(v1479 + 120);
            v1508 = vzip1q_s64(*(int64x2_t *)v1479, v1501);
            v1509 = vzip2q_s64(*(int64x2_t *)v1479, v1501);
            v1500.i64[1] = *(_QWORD *)(v1479 + 40);
            v1502.i64[1] = *(_QWORD *)(v1479 + 88);
            v1505.i64[1] = *(_QWORD *)(v1479 + 136);
            v1499[1] = vzip1q_s64(v1503, v1504);
            v1499[2] = vzip1q_s64(v1506, v1507);
            *v1499 = v1508;
            v1510 = (int64x2_t *)((char *)v1499 + 8 * v1480);
            v1510[1] = vzip1q_s64(vdupq_laneq_s64(v1503, 1), vdupq_laneq_s64(v1504, 1));
            v1510[2] = vzip2q_s64(v1506, v1507);
            *v1510 = v1509;
            v1511 = &v1499[v1480];
            v1511[1] = v1502;
            v1511[2] = v1505;
            *v1511 = v1500;
          }
          v1512 = v1472 + 1;
          while (v1512 != v1475)
          {
            ++v1474;
            v1513 = *v1512++;
            v1476 = v1513;
            if (v1513 != -1)
            {
              v1472 = v1512 - 1;
              goto LABEL_714;
            }
          }
          v1467 = *(_DWORD *)(result + 3756);
        }
      }
      ++v1468;
      ++v1469;
    }
    while (v1468 < v1467);
    v5 = *a5;
  }
  v1517 = *(_DWORD *)(result + 5196);
  if (v1517)
  {
    v1518 = 0;
    v1519 = a4[9];
    do
    {
      v1520 = *(_QWORD *)(result + 5272);
      v1521 = *(_DWORD *)(result + 5296) * v1518;
      v1522 = (uint64_t *)(v1520 + 8 * v1521);
      v1523 = *(_DWORD *)(result + 5192);
      if (v1523 && *v1522 == -1)
      {
        v1524 = 0;
        v1564 = 8 * (v1523 + v1521) - 8 * v1521 - 8;
        v1565 = v1520 + 8 * v1521;
        while (v1564)
        {
          v1522 = (uint64_t *)(v1565 + 8);
          ++v1524;
          v1566 = *(_QWORD *)(v1565 + 8);
          v1564 -= 8;
          v1565 += 8;
          if (v1566 != -1)
            goto LABEL_734;
        }
      }
      else
      {
        v1524 = 0;
LABEL_734:
        v1525 = (uint64_t *)(v1520 + 8 * (v1521 + v1523));
        if (v1522 != v1525)
        {
          v1526 = *v1522;
LABEL_736:
          v1527 = *v1519;
          v1528 = *(_DWORD *)(a3[18] + 4 * v1524);
          v1529 = *(_QWORD *)(result + 5200) + 8 * v1526;
          v1530 = *((unsigned int *)a2 + 4);
          v1531 = *a2;
          if (v5 && v1527 < v1528)
          {
            v1532 = *(int64x2_t *)v1529;
            v1533 = (int64x2_t *)(v1531 + 8 * (v1528 + (_DWORD)v1530 * v1527));
            v1534 = *(_OWORD *)(v1529 + 24);
            v1535 = *(_QWORD *)(v1529 + 40);
            v1536 = *(int64x2_t *)(v1529 + 48);
            v1537 = *(_QWORD *)(v1529 + 64);
            v1538 = *(_OWORD *)(v1529 + 72);
            v1539 = *(_QWORD *)(v1529 + 88);
            v1540 = *(int64x2_t *)(v1529 + 96);
            v1541 = *(_QWORD *)(v1529 + 112);
            v1542 = *(_OWORD *)(v1529 + 120);
            v1543 = *(_QWORD *)(v1529 + 136);
            v1533[1].i64[0] = *(_QWORD *)(v1529 + 16);
            *v1533 = v1532;
            v1544 = &v1533->i8[8 * v1530];
            *((_QWORD *)v1544 + 2) = v1535;
            *(_OWORD *)v1544 = v1534;
            v1545 = &v1533[v1530];
            v1545[1].i64[0] = v1537;
            *v1545 = v1536;
            v1546 = &v1533->i8[24 * v1530];
            *((_QWORD *)v1546 + 2) = v1539;
            *(_OWORD *)v1546 = v1538;
            v1547 = &v1533[2 * v1530];
            v1547[1].i64[0] = v1541;
            *v1547 = v1540;
            v1548 = &v1533->i8[40 * v1530];
            *((_QWORD *)v1548 + 2) = v1543;
            *(_OWORD *)v1548 = v1542;
          }
          else
          {
            v1549 = (int64x2_t *)(v1531 + 8 * (v1527 + (_DWORD)v1530 * v1528));
            v1550.i64[0] = *(_QWORD *)(v1529 + 16);
            v1551 = *(int64x2_t *)(v1529 + 24);
            v1552.i64[0] = *(_QWORD *)(v1529 + 64);
            v1553 = *(int64x2_t *)(v1529 + 48);
            v1554 = *(int64x2_t *)(v1529 + 72);
            v1555.i64[0] = *(_QWORD *)(v1529 + 112);
            v1556 = *(int64x2_t *)(v1529 + 96);
            v1557 = *(int64x2_t *)(v1529 + 120);
            v1558 = vzip1q_s64(*(int64x2_t *)v1529, v1551);
            v1559 = vzip2q_s64(*(int64x2_t *)v1529, v1551);
            v1550.i64[1] = *(_QWORD *)(v1529 + 40);
            v1552.i64[1] = *(_QWORD *)(v1529 + 88);
            v1555.i64[1] = *(_QWORD *)(v1529 + 136);
            v1549[1] = vzip1q_s64(v1553, v1554);
            v1549[2] = vzip1q_s64(v1556, v1557);
            *v1549 = v1558;
            v1560 = (int64x2_t *)((char *)v1549 + 8 * v1530);
            v1560[1] = vzip1q_s64(vdupq_laneq_s64(v1553, 1), vdupq_laneq_s64(v1554, 1));
            v1560[2] = vzip2q_s64(v1556, v1557);
            *v1560 = v1559;
            v1561 = &v1549[v1530];
            v1561[1] = v1552;
            v1561[2] = v1555;
            *v1561 = v1550;
          }
          v1562 = v1522 + 1;
          while (v1562 != v1525)
          {
            ++v1524;
            v1563 = *v1562++;
            v1526 = v1563;
            if (v1563 != -1)
            {
              v1522 = v1562 - 1;
              goto LABEL_736;
            }
          }
          v1517 = *(_DWORD *)(result + 5196);
        }
      }
      ++v1518;
      ++v1519;
    }
    while (v1518 < v1517);
    v5 = *a5;
  }
  v1567 = *(_DWORD *)(result + 6636);
  if (v1567)
  {
    v1568 = 0;
    v1569 = a4[12];
    do
    {
      v1570 = *(_QWORD *)(result + 6712);
      v1571 = *(_DWORD *)(result + 6736) * v1568;
      v1572 = (uint64_t *)(v1570 + 8 * v1571);
      v1573 = *(_DWORD *)(result + 6632);
      if (v1573 && *v1572 == -1)
      {
        v1574 = 0;
        v1600 = 8 * (v1573 + v1571) - 8 * v1571 - 8;
        v1601 = v1570 + 8 * v1571;
        while (v1600)
        {
          v1572 = (uint64_t *)(v1601 + 8);
          ++v1574;
          v1602 = *(_QWORD *)(v1601 + 8);
          v1600 -= 8;
          v1601 += 8;
          if (v1602 != -1)
            goto LABEL_756;
        }
      }
      else
      {
        v1574 = 0;
LABEL_756:
        v1575 = (uint64_t *)(v1570 + 8 * (v1571 + v1573));
        if (v1572 != v1575)
        {
          v1576 = *v1572;
LABEL_758:
          v1577 = *v1569;
          v1578 = *(_DWORD *)(a3[18] + 4 * v1574);
          v1579 = *(_QWORD *)(result + 6640) + 8 * v1576;
          v1580 = *((unsigned int *)a2 + 4);
          v1581 = *a2;
          if (v5 && v1577 < v1578)
          {
            v1582 = v1578 + (_DWORD)v1580 * v1577;
            v1583 = (int64x2_t *)(v1581 + 8 * v1582);
            v1584 = *(int64x2_t *)v1579;
            v1585 = *(_OWORD *)(v1579 + 24);
            v1586 = *(_QWORD *)(v1579 + 40);
            v1587 = *(_QWORD *)(v1579 + 64);
            v1588 = *(int8x16_t *)(v1579 + 48);
            v1589 = vextq_s8(v1588, v1588, 8uLL).u64[0];
            v1583[1].i64[0] = *(_QWORD *)(v1579 + 16);
            *v1583 = v1584;
            v1590 = &v1583->i8[8 * v1580];
            *((_QWORD *)v1590 + 2) = v1586;
            *(_OWORD *)v1590 = v1585;
          }
          else
          {
            v1582 = v1577 + (_DWORD)v1580 * v1578;
            v1591 = (int64x2_t *)(v1581 + 8 * v1582);
            v1588.i64[0] = *(_QWORD *)(v1579 + 16);
            v1589 = *(_QWORD *)(v1579 + 40);
            v1592 = *(int64x2_t *)(v1579 + 24);
            v1587 = *(_QWORD *)(v1579 + 64);
            v1593 = *(_OWORD *)(v1579 + 48);
            v1594 = vzip1q_s64(*(int64x2_t *)v1579, v1592);
            v1595 = vzip2q_s64(*(int64x2_t *)v1579, v1592);
            v1591[1].i64[0] = v1593;
            *v1591 = v1594;
            v1596 = (int64x2_t *)((char *)v1591 + 8 * v1580);
            *v1596 = v1595;
            v1596[1].i64[0] = *((_QWORD *)&v1593 + 1);
          }
          v1597 = v1581 + 8 * v1582 + 16 * v1580;
          *(_QWORD *)(v1597 + 16) = v1587;
          v1588.i64[1] = v1589;
          *(int8x16_t *)v1597 = v1588;
          v1598 = v1572 + 1;
          while (v1598 != v1575)
          {
            ++v1574;
            v1599 = *v1598++;
            v1576 = v1599;
            if (v1599 != -1)
            {
              v1572 = v1598 - 1;
              goto LABEL_758;
            }
          }
          v1567 = *(_DWORD *)(result + 6636);
        }
      }
      ++v1568;
      ++v1569;
    }
    while (v1568 < v1567);
    v5 = *a5;
  }
  v1603 = *(_DWORD *)(result + 8076);
  if (v1603)
  {
    v1604 = 0;
    v1605 = a4[15];
    do
    {
      v1606 = *(_QWORD *)(result + 8152);
      v1607 = *(_DWORD *)(result + 8176) * v1604;
      v1608 = (uint64_t *)(v1606 + 8 * v1607);
      v1609 = *(_DWORD *)(result + 8072);
      if (v1609 && *v1608 == -1)
      {
        v1610 = 0;
        v1625 = 8 * (v1609 + v1607) - 8 * v1607 - 8;
        v1626 = v1606 + 8 * v1607;
        while (v1625)
        {
          v1608 = (uint64_t *)(v1626 + 8);
          ++v1610;
          v1627 = *(_QWORD *)(v1626 + 8);
          v1625 -= 8;
          v1626 += 8;
          if (v1627 != -1)
            goto LABEL_778;
        }
      }
      else
      {
        v1610 = 0;
LABEL_778:
        v1611 = (uint64_t *)(v1606 + 8 * (v1607 + v1609));
        if (v1608 != v1611)
        {
          v1612 = *v1608;
LABEL_780:
          v1613 = *v1605;
          v1614 = *(_DWORD *)(a3[18] + 4 * v1610);
          v1615 = *(_QWORD *)(result + 8080) + 8 * v1612;
          v1616 = *((unsigned int *)a2 + 4);
          v1617 = *a2;
          v1618 = *(int8x16_t *)v1615;
          v1619 = *(_QWORD *)(v1615 + 16);
          v1620 = vextq_s8(v1618, v1618, 8uLL).u64[0];
          if (v5 && v1613 < v1614)
          {
            v1621 = (int8x16_t *)(v1617 + 8 * (v1614 + (_DWORD)v1616 * v1613));
            v1621[1].i64[0] = v1619;
            v1618.i64[1] = v1620;
            *v1621 = v1618;
          }
          else
          {
            v1622 = (_QWORD *)(v1617 + 8 * (v1613 + (_DWORD)v1616 * v1614));
            *v1622 = v1618.i64[0];
            v1622[v1616] = v1620;
            v1622[2 * v1616] = v1619;
          }
          v1623 = v1608 + 1;
          while (v1623 != v1611)
          {
            ++v1610;
            v1624 = *v1623++;
            v1612 = v1624;
            if (v1624 != -1)
            {
              v1608 = v1623 - 1;
              goto LABEL_780;
            }
          }
          v1603 = *(_DWORD *)(result + 8076);
        }
      }
      ++v1604;
      ++v1605;
    }
    while (v1604 < v1603);
    v5 = *a5;
  }
  v1628 = *(_DWORD *)(result + 9516);
  if (v1628)
  {
    v1629 = 0;
    v1630 = a4[18];
    do
    {
      v1631 = *(_QWORD *)(result + 9592);
      v1632 = *(_DWORD *)(result + 9616) * v1629;
      v1633 = (uint64_t *)(v1631 + 8 * v1632);
      v1634 = *(_DWORD *)(result + 9512);
      if (v1634 && *v1633 == -1)
      {
        v1635 = 0;
        v1661 = 8 * (v1634 + v1632) - 8 * v1632 - 8;
        v1662 = v1631 + 8 * v1632;
        while (v1661)
        {
          v1633 = (uint64_t *)(v1662 + 8);
          ++v1635;
          v1663 = *(_QWORD *)(v1662 + 8);
          v1661 -= 8;
          v1662 += 8;
          if (v1663 != -1)
            goto LABEL_800;
        }
      }
      else
      {
        v1635 = 0;
LABEL_800:
        v1636 = (uint64_t *)(v1631 + 8 * (v1632 + v1634));
        if (v1633 != v1636)
        {
          v1637 = *v1633;
LABEL_802:
          v1638 = *v1630;
          v1639 = *(_DWORD *)(a3[18] + 4 * v1635);
          v1640 = *(_QWORD *)(result + 9520) + 8 * v1637;
          v1641 = *((unsigned int *)a2 + 4);
          v1642 = *a2;
          if (v5 && v1638 < v1639)
          {
            v1643 = v1639 + (_DWORD)v1641 * v1638;
            v1644 = (int64x2_t *)(v1642 + 8 * v1643);
            v1645 = *(int64x2_t *)v1640;
            v1646 = *(_OWORD *)(v1640 + 24);
            v1647 = *(_QWORD *)(v1640 + 40);
            v1648 = *(_QWORD *)(v1640 + 64);
            v1649 = *(int8x16_t *)(v1640 + 48);
            v1650 = vextq_s8(v1649, v1649, 8uLL).u64[0];
            v1644[1].i64[0] = *(_QWORD *)(v1640 + 16);
            *v1644 = v1645;
            v1651 = &v1644->i8[8 * v1641];
            *((_QWORD *)v1651 + 2) = v1647;
            *(_OWORD *)v1651 = v1646;
          }
          else
          {
            v1643 = v1638 + (_DWORD)v1641 * v1639;
            v1652 = (int64x2_t *)(v1642 + 8 * v1643);
            v1649.i64[0] = *(_QWORD *)(v1640 + 16);
            v1650 = *(_QWORD *)(v1640 + 40);
            v1653 = *(int64x2_t *)(v1640 + 24);
            v1648 = *(_QWORD *)(v1640 + 64);
            v1654 = *(_OWORD *)(v1640 + 48);
            v1655 = vzip1q_s64(*(int64x2_t *)v1640, v1653);
            v1656 = vzip2q_s64(*(int64x2_t *)v1640, v1653);
            v1652[1].i64[0] = v1654;
            *v1652 = v1655;
            v1657 = (int64x2_t *)((char *)v1652 + 8 * v1641);
            *v1657 = v1656;
            v1657[1].i64[0] = *((_QWORD *)&v1654 + 1);
          }
          v1658 = v1642 + 8 * v1643 + 16 * v1641;
          *(_QWORD *)(v1658 + 16) = v1648;
          v1649.i64[1] = v1650;
          *(int8x16_t *)v1658 = v1649;
          v1659 = v1633 + 1;
          while (v1659 != v1636)
          {
            ++v1635;
            v1660 = *v1659++;
            v1637 = v1660;
            if (v1660 != -1)
            {
              v1633 = v1659 - 1;
              goto LABEL_802;
            }
          }
          v1628 = *(_DWORD *)(result + 9516);
        }
      }
      ++v1629;
      ++v1630;
    }
    while (v1629 < v1628);
    v5 = *a5;
  }
  v1664 = *(_DWORD *)(result + 10956);
  if (v1664)
  {
    v1665 = 0;
    v1666 = a4[21];
    do
    {
      v1667 = *(_QWORD *)(result + 11032);
      v1668 = *(_DWORD *)(result + 11056) * v1665;
      v1669 = (uint64_t *)(v1667 + 8 * v1668);
      v1670 = *(_DWORD *)(result + 10952);
      if (v1670 && *v1669 == -1)
      {
        v1671 = 0;
        v1702 = 8 * (v1670 + v1668) - 8 * v1668 - 8;
        v1703 = v1667 + 8 * v1668;
        while (v1702)
        {
          v1669 = (uint64_t *)(v1703 + 8);
          ++v1671;
          v1704 = *(_QWORD *)(v1703 + 8);
          v1702 -= 8;
          v1703 += 8;
          if (v1704 != -1)
            goto LABEL_822;
        }
      }
      else
      {
        v1671 = 0;
LABEL_822:
        v1672 = (uint64_t *)(v1667 + 8 * (v1668 + v1670));
        if (v1669 != v1672)
        {
          v1673 = *v1669;
LABEL_824:
          v1674 = *v1666;
          v1675 = *(_DWORD *)(a3[18] + 4 * v1671);
          v1676 = *(_QWORD *)(result + 10960) + 8 * v1673;
          v1677 = *((unsigned int *)a2 + 4);
          v1678 = *a2;
          if (v5 && v1674 < v1675)
          {
            v1679 = *(int64x2_t *)v1676;
            v1680 = (int64x2_t *)(v1678 + 8 * (v1675 + (_DWORD)v1677 * v1674));
            v1681 = *(_OWORD *)(v1676 + 24);
            v1682 = *(_QWORD *)(v1676 + 40);
            v1683 = *(int64x2_t *)(v1676 + 48);
            v1684 = *(_QWORD *)(v1676 + 64);
            v1685 = *(_OWORD *)(v1676 + 72);
            v1686 = *(_QWORD *)(v1676 + 88);
            v1680[1].i64[0] = *(_QWORD *)(v1676 + 16);
            *v1680 = v1679;
            v1687 = &v1680->i8[8 * v1677];
            *((_QWORD *)v1687 + 2) = v1682;
            *(_OWORD *)v1687 = v1681;
            v1688 = &v1680[v1677];
            v1688[1].i64[0] = v1684;
            *v1688 = v1683;
            v1689 = &v1680->i8[24 * v1677];
            *((_QWORD *)v1689 + 2) = v1686;
            *(_OWORD *)v1689 = v1685;
          }
          else
          {
            v1690 = (int64x2_t *)(v1678 + 8 * (v1674 + (_DWORD)v1677 * v1675));
            v1691.i64[0] = *(_QWORD *)(v1676 + 16);
            v1692 = *(int64x2_t *)(v1676 + 24);
            v1693.i64[0] = *(_QWORD *)(v1676 + 64);
            v1694 = *(int64x2_t *)(v1676 + 48);
            v1695 = vzip1q_s64(*(int64x2_t *)v1676, v1692);
            v1696 = vzip1q_s64(v1694, *(int64x2_t *)(v1676 + 72));
            v1697 = vzip2q_s64(*(int64x2_t *)v1676, v1692);
            v1692.i64[0] = vdupq_laneq_s64(v1694, 1).u64[0];
            v1692.i64[1] = *(_QWORD *)(v1676 + 80);
            v1691.i64[1] = *(_QWORD *)(v1676 + 40);
            v1693.i64[1] = *(_QWORD *)(v1676 + 88);
            *v1690 = v1695;
            v1690[1] = v1696;
            v1698 = (int64x2_t *)((char *)v1690 + 8 * v1677);
            *v1698 = v1697;
            v1698[1] = v1692;
            v1699 = &v1690[v1677];
            *v1699 = v1691;
            v1699[1] = v1693;
          }
          v1700 = v1669 + 1;
          while (v1700 != v1672)
          {
            ++v1671;
            v1701 = *v1700++;
            v1673 = v1701;
            if (v1701 != -1)
            {
              v1669 = v1700 - 1;
              goto LABEL_824;
            }
          }
          v1664 = *(_DWORD *)(result + 10956);
        }
      }
      ++v1665;
      ++v1666;
    }
    while (v1665 < v1664);
    v5 = *a5;
  }
  v1705 = *(_DWORD *)(result + 12396);
  if (v1705)
  {
    v1706 = 0;
    v1707 = a4[24];
    do
    {
      v1708 = *(_QWORD *)(result + 12472);
      v1709 = *(_DWORD *)(result + 12496) * v1706;
      v1710 = (uint64_t *)(v1708 + 8 * v1709);
      v1711 = *(_DWORD *)(result + 12392);
      if (v1711 && *v1710 == -1)
      {
        v1712 = 0;
        v1743 = 8 * (v1711 + v1709) - 8 * v1709 - 8;
        v1744 = v1708 + 8 * v1709;
        while (v1743)
        {
          v1710 = (uint64_t *)(v1744 + 8);
          ++v1712;
          v1745 = *(_QWORD *)(v1744 + 8);
          v1743 -= 8;
          v1744 += 8;
          if (v1745 != -1)
            goto LABEL_844;
        }
      }
      else
      {
        v1712 = 0;
LABEL_844:
        v1713 = (uint64_t *)(v1708 + 8 * (v1709 + v1711));
        if (v1710 != v1713)
        {
          v1714 = *v1710;
LABEL_846:
          v1715 = *v1707;
          v1716 = *(_DWORD *)(a3[18] + 4 * v1712);
          v1717 = *(_QWORD *)(result + 12400) + 8 * v1714;
          v1718 = *((unsigned int *)a2 + 4);
          v1719 = *a2;
          if (v5 && v1715 < v1716)
          {
            v1720 = *(int64x2_t *)v1717;
            v1721 = (int64x2_t *)(v1719 + 8 * (v1716 + (_DWORD)v1718 * v1715));
            v1722 = *(_OWORD *)(v1717 + 24);
            v1723 = *(_QWORD *)(v1717 + 40);
            v1724 = *(int64x2_t *)(v1717 + 48);
            v1725 = *(_QWORD *)(v1717 + 64);
            v1726 = *(_OWORD *)(v1717 + 72);
            v1727 = *(_QWORD *)(v1717 + 88);
            v1721[1].i64[0] = *(_QWORD *)(v1717 + 16);
            *v1721 = v1720;
            v1728 = &v1721->i8[8 * v1718];
            *((_QWORD *)v1728 + 2) = v1723;
            *(_OWORD *)v1728 = v1722;
            v1729 = &v1721[v1718];
            v1729[1].i64[0] = v1725;
            *v1729 = v1724;
            v1730 = &v1721->i8[24 * v1718];
            *((_QWORD *)v1730 + 2) = v1727;
            *(_OWORD *)v1730 = v1726;
          }
          else
          {
            v1731 = (int64x2_t *)(v1719 + 8 * (v1715 + (_DWORD)v1718 * v1716));
            v1732.i64[0] = *(_QWORD *)(v1717 + 16);
            v1733 = *(int64x2_t *)(v1717 + 24);
            v1734.i64[0] = *(_QWORD *)(v1717 + 64);
            v1735 = *(int64x2_t *)(v1717 + 48);
            v1736 = vzip1q_s64(*(int64x2_t *)v1717, v1733);
            v1737 = vzip1q_s64(v1735, *(int64x2_t *)(v1717 + 72));
            v1738 = vzip2q_s64(*(int64x2_t *)v1717, v1733);
            v1733.i64[0] = vdupq_laneq_s64(v1735, 1).u64[0];
            v1733.i64[1] = *(_QWORD *)(v1717 + 80);
            v1732.i64[1] = *(_QWORD *)(v1717 + 40);
            v1734.i64[1] = *(_QWORD *)(v1717 + 88);
            *v1731 = v1736;
            v1731[1] = v1737;
            v1739 = (int64x2_t *)((char *)v1731 + 8 * v1718);
            *v1739 = v1738;
            v1739[1] = v1733;
            v1740 = &v1731[v1718];
            *v1740 = v1732;
            v1740[1] = v1734;
          }
          v1741 = v1710 + 1;
          while (v1741 != v1713)
          {
            ++v1712;
            v1742 = *v1741++;
            v1714 = v1742;
            if (v1742 != -1)
            {
              v1710 = v1741 - 1;
              goto LABEL_846;
            }
          }
          v1705 = *(_DWORD *)(result + 12396);
        }
      }
      ++v1706;
      ++v1707;
    }
    while (v1706 < v1705);
    v5 = *a5;
  }
  v1746 = *(_DWORD *)(result + 13836);
  if (v1746)
  {
    v1747 = 0;
    v1748 = a4[27];
    do
    {
      v1749 = *(_QWORD *)(result + 13912);
      v1750 = *(_DWORD *)(result + 13936) * v1747;
      v1751 = (uint64_t *)(v1749 + 8 * v1750);
      v1752 = *(_DWORD *)(result + 13832);
      if (v1752 && *v1751 == -1)
      {
        v1753 = 0;
        v1779 = 8 * (v1752 + v1750) - 8 * v1750 - 8;
        v1780 = v1749 + 8 * v1750;
        while (v1779)
        {
          v1751 = (uint64_t *)(v1780 + 8);
          ++v1753;
          v1781 = *(_QWORD *)(v1780 + 8);
          v1779 -= 8;
          v1780 += 8;
          if (v1781 != -1)
            goto LABEL_866;
        }
      }
      else
      {
        v1753 = 0;
LABEL_866:
        v1754 = (uint64_t *)(v1749 + 8 * (v1750 + v1752));
        if (v1751 != v1754)
        {
          v1755 = *v1751;
LABEL_868:
          v1756 = *v1748;
          v1757 = *(_DWORD *)(a3[18] + 4 * v1753);
          v1758 = *(_QWORD *)(result + 13840) + 8 * v1755;
          v1759 = *((unsigned int *)a2 + 4);
          v1760 = *a2;
          if (v5 && v1756 < v1757)
          {
            v1761 = v1757 + (_DWORD)v1759 * v1756;
            v1762 = (int64x2_t *)(v1760 + 8 * v1761);
            v1763 = *(int64x2_t *)v1758;
            v1764 = *(_OWORD *)(v1758 + 24);
            v1765 = *(_QWORD *)(v1758 + 40);
            v1766 = *(_QWORD *)(v1758 + 64);
            v1767 = *(int8x16_t *)(v1758 + 48);
            v1768 = vextq_s8(v1767, v1767, 8uLL).u64[0];
            v1762[1].i64[0] = *(_QWORD *)(v1758 + 16);
            *v1762 = v1763;
            v1769 = &v1762->i8[8 * v1759];
            *((_QWORD *)v1769 + 2) = v1765;
            *(_OWORD *)v1769 = v1764;
          }
          else
          {
            v1761 = v1756 + (_DWORD)v1759 * v1757;
            v1770 = (int64x2_t *)(v1760 + 8 * v1761);
            v1767.i64[0] = *(_QWORD *)(v1758 + 16);
            v1768 = *(_QWORD *)(v1758 + 40);
            v1771 = *(int64x2_t *)(v1758 + 24);
            v1766 = *(_QWORD *)(v1758 + 64);
            v1772 = *(_OWORD *)(v1758 + 48);
            v1773 = vzip1q_s64(*(int64x2_t *)v1758, v1771);
            v1774 = vzip2q_s64(*(int64x2_t *)v1758, v1771);
            v1770[1].i64[0] = v1772;
            *v1770 = v1773;
            v1775 = (int64x2_t *)((char *)v1770 + 8 * v1759);
            *v1775 = v1774;
            v1775[1].i64[0] = *((_QWORD *)&v1772 + 1);
          }
          v1776 = v1760 + 8 * v1761 + 16 * v1759;
          *(_QWORD *)(v1776 + 16) = v1766;
          v1767.i64[1] = v1768;
          *(int8x16_t *)v1776 = v1767;
          v1777 = v1751 + 1;
          while (v1777 != v1754)
          {
            ++v1753;
            v1778 = *v1777++;
            v1755 = v1778;
            if (v1778 != -1)
            {
              v1751 = v1777 - 1;
              goto LABEL_868;
            }
          }
          v1746 = *(_DWORD *)(result + 13836);
        }
      }
      ++v1747;
      ++v1748;
    }
    while (v1747 < v1746);
    v5 = *a5;
  }
  v1782 = *(_DWORD *)(result + 732);
  if (v1782)
  {
    v1783 = 0;
    v1784 = *a4;
    do
    {
      v1785 = *(_QWORD *)(result + 808);
      v1786 = *(_DWORD *)(result + 832) * v1783;
      v1787 = (uint64_t *)(v1785 + 8 * v1786);
      v1788 = *(_DWORD *)(result + 728);
      if (v1788 && *v1787 == -1)
      {
        v1789 = 0;
        v1808 = 8 * (v1788 + v1786) - 8 * v1786 - 8;
        v1809 = v1785 + 8 * v1786;
        while (v1808)
        {
          v1787 = (uint64_t *)(v1809 + 8);
          ++v1789;
          v1810 = *(_QWORD *)(v1809 + 8);
          v1808 -= 8;
          v1809 += 8;
          if (v1810 != -1)
            goto LABEL_888;
        }
      }
      else
      {
        v1789 = 0;
LABEL_888:
        v1790 = (uint64_t *)(v1785 + 8 * (v1786 + v1788));
        if (v1787 != v1790)
        {
          v1791 = *v1787;
LABEL_890:
          v1792 = *(_DWORD *)(a3[15] + 4 * v1789);
          v1793 = *v1784;
          v1794 = (_QWORD *)(*(_QWORD *)(result + 736) + 8 * v1791);
          v1795 = *((unsigned int *)a2 + 4);
          v1796 = *a2;
          v1797 = v1794[3];
          if (v5 && v1793 < v1792)
          {
            v1798 = (_QWORD *)(v1796 + 8 * (v1792 + (_DWORD)v1795 * v1793));
            v1799 = v1794[1];
            v1800 = v1794[2];
            v1801 = v1794[4];
            v1802 = v1794[5];
            *v1798 = *v1794;
            v1798[v1795] = v1799;
            v1798[2 * v1795] = v1800;
            v1798[3 * v1795] = v1797;
            v1798[4 * v1795] = v1801;
            v1798[5 * v1795] = v1802;
          }
          else
          {
            v1803 = (_OWORD *)(v1796 + 8 * (v1793 + (_DWORD)v1795 * v1792));
            v1804 = *(_OWORD *)v1794;
            v1805 = *((_OWORD *)v1794 + 2);
            v1803[1] = *((_OWORD *)v1794 + 1);
            v1803[2] = v1805;
            *v1803 = v1804;
          }
          v1806 = v1787 + 1;
          while (v1806 != v1790)
          {
            ++v1789;
            v1807 = *v1806++;
            v1791 = v1807;
            if (v1807 != -1)
            {
              v1787 = v1806 - 1;
              goto LABEL_890;
            }
          }
          v1782 = *(_DWORD *)(result + 732);
        }
      }
      ++v1783;
      ++v1784;
    }
    while (v1783 < v1782);
    v5 = *a5;
  }
  v1811 = *(_DWORD *)(result + 2172);
  if (v1811)
  {
    v1812 = 0;
    v1813 = a4[3];
    do
    {
      v1814 = *(_QWORD *)(result + 2248);
      v1815 = *(_DWORD *)(result + 2272) * v1812;
      v1816 = (uint64_t *)(v1814 + 8 * v1815);
      v1817 = *(_DWORD *)(result + 2168);
      if (v1817 && *v1816 == -1)
      {
        v1818 = 0;
        v1842 = 8 * (v1817 + v1815) - 8 * v1815 - 8;
        v1843 = v1814 + 8 * v1815;
        while (v1842)
        {
          v1816 = (uint64_t *)(v1843 + 8);
          ++v1818;
          v1844 = *(_QWORD *)(v1843 + 8);
          v1842 -= 8;
          v1843 += 8;
          if (v1844 != -1)
            goto LABEL_910;
        }
      }
      else
      {
        v1818 = 0;
LABEL_910:
        v1819 = (uint64_t *)(v1814 + 8 * (v1815 + v1817));
        if (v1816 != v1819)
        {
          v1820 = *v1816;
LABEL_912:
          v1821 = *(_DWORD *)(a3[15] + 4 * v1818);
          v1822 = *v1813;
          v1823 = (_QWORD *)(*(_QWORD *)(result + 2176) + 8 * v1820);
          v1824 = *((unsigned int *)a2 + 4);
          v1825 = *a2;
          v1826 = v1823[3];
          if (v5 && v1822 < v1821)
          {
            v1827 = v1823[1];
            v1828 = (_QWORD *)(v1825 + 8 * (v1821 + (_DWORD)v1824 * v1822));
            v1829 = v1823[2];
            v1830 = v1823[4];
            v1831 = v1823[5];
            v1832 = v1823[6];
            v1833 = v1823[7];
            v1834 = v1823[8];
            *v1828 = *v1823;
            v1828[v1824] = v1827;
            v1828[2 * v1824] = v1829;
            v1828[3 * v1824] = v1826;
            v1828[4 * v1824] = v1830;
            v1828[5 * v1824] = v1831;
            v1828[6 * v1824] = v1832;
            v1828[7 * v1824] = v1833;
            v1828[8 * v1824] = v1834;
          }
          else
          {
            v1835 = v1825 + 8 * (v1822 + (_DWORD)v1824 * v1821);
            v1836 = *(_OWORD *)v1823;
            v1837 = *((_OWORD *)v1823 + 1);
            v1838 = *((_OWORD *)v1823 + 2);
            v1839 = *((_OWORD *)v1823 + 3);
            *(_QWORD *)(v1835 + 64) = v1823[8];
            *(_OWORD *)(v1835 + 32) = v1838;
            *(_OWORD *)(v1835 + 48) = v1839;
            *(_OWORD *)v1835 = v1836;
            *(_OWORD *)(v1835 + 16) = v1837;
          }
          v1840 = v1816 + 1;
          while (v1840 != v1819)
          {
            ++v1818;
            v1841 = *v1840++;
            v1820 = v1841;
            if (v1841 != -1)
            {
              v1816 = v1840 - 1;
              goto LABEL_912;
            }
          }
          v1811 = *(_DWORD *)(result + 2172);
        }
      }
      ++v1812;
      ++v1813;
    }
    while (v1812 < v1811);
    v5 = *a5;
  }
  v1845 = *(_DWORD *)(result + 3612);
  if (v1845)
  {
    v1846 = 0;
    v1847 = a4[6];
    do
    {
      v1848 = *(_QWORD *)(result + 3688);
      v1849 = *(_DWORD *)(result + 3712) * v1846;
      v1850 = (uint64_t *)(v1848 + 8 * v1849);
      v1851 = *(_DWORD *)(result + 3608);
      if (v1851 && *v1850 == -1)
      {
        v1852 = 0;
        v1871 = 8 * (v1851 + v1849) - 8 * v1849 - 8;
        v1872 = v1848 + 8 * v1849;
        while (v1871)
        {
          v1850 = (uint64_t *)(v1872 + 8);
          ++v1852;
          v1873 = *(_QWORD *)(v1872 + 8);
          v1871 -= 8;
          v1872 += 8;
          if (v1873 != -1)
            goto LABEL_932;
        }
      }
      else
      {
        v1852 = 0;
LABEL_932:
        v1853 = (uint64_t *)(v1848 + 8 * (v1849 + v1851));
        if (v1850 != v1853)
        {
          v1854 = *v1850;
LABEL_934:
          v1855 = *(_DWORD *)(a3[15] + 4 * v1852);
          v1856 = *v1847;
          v1857 = (_QWORD *)(*(_QWORD *)(result + 3616) + 8 * v1854);
          v1858 = *((unsigned int *)a2 + 4);
          v1859 = *a2;
          v1860 = v1857[3];
          if (v5 && v1856 < v1855)
          {
            v1861 = (_QWORD *)(v1859 + 8 * (v1855 + (_DWORD)v1858 * v1856));
            v1862 = v1857[1];
            v1863 = v1857[2];
            v1864 = v1857[4];
            v1865 = v1857[5];
            *v1861 = *v1857;
            v1861[v1858] = v1862;
            v1861[2 * v1858] = v1863;
            v1861[3 * v1858] = v1860;
            v1861[4 * v1858] = v1864;
            v1861[5 * v1858] = v1865;
          }
          else
          {
            v1866 = (_OWORD *)(v1859 + 8 * (v1856 + (_DWORD)v1858 * v1855));
            v1867 = *(_OWORD *)v1857;
            v1868 = *((_OWORD *)v1857 + 2);
            v1866[1] = *((_OWORD *)v1857 + 1);
            v1866[2] = v1868;
            *v1866 = v1867;
          }
          v1869 = v1850 + 1;
          while (v1869 != v1853)
          {
            ++v1852;
            v1870 = *v1869++;
            v1854 = v1870;
            if (v1870 != -1)
            {
              v1850 = v1869 - 1;
              goto LABEL_934;
            }
          }
          v1845 = *(_DWORD *)(result + 3612);
        }
      }
      ++v1846;
      ++v1847;
    }
    while (v1846 < v1845);
    v5 = *a5;
  }
  v1874 = *(_DWORD *)(result + 5052);
  if (v1874)
  {
    v1875 = 0;
    v1876 = a4[9];
    do
    {
      v1877 = *(_QWORD *)(result + 5128);
      v1878 = *(_DWORD *)(result + 5152) * v1875;
      v1879 = (uint64_t *)(v1877 + 8 * v1878);
      v1880 = *(_DWORD *)(result + 5048);
      if (v1880 && *v1879 == -1)
      {
        v1881 = 0;
        v1900 = 8 * (v1880 + v1878) - 8 * v1878 - 8;
        v1901 = v1877 + 8 * v1878;
        while (v1900)
        {
          v1879 = (uint64_t *)(v1901 + 8);
          ++v1881;
          v1902 = *(_QWORD *)(v1901 + 8);
          v1900 -= 8;
          v1901 += 8;
          if (v1902 != -1)
            goto LABEL_954;
        }
      }
      else
      {
        v1881 = 0;
LABEL_954:
        v1882 = (uint64_t *)(v1877 + 8 * (v1878 + v1880));
        if (v1879 != v1882)
        {
          v1883 = *v1879;
LABEL_956:
          v1884 = *(_DWORD *)(a3[15] + 4 * v1881);
          v1885 = *v1876;
          v1886 = (_QWORD *)(*(_QWORD *)(result + 5056) + 8 * v1883);
          v1887 = *((unsigned int *)a2 + 4);
          v1888 = *a2;
          v1889 = v1886[3];
          if (v5 && v1885 < v1884)
          {
            v1890 = (_QWORD *)(v1888 + 8 * (v1884 + (_DWORD)v1887 * v1885));
            v1891 = v1886[1];
            v1892 = v1886[2];
            v1893 = v1886[4];
            v1894 = v1886[5];
            *v1890 = *v1886;
            v1890[v1887] = v1891;
            v1890[2 * v1887] = v1892;
            v1890[3 * v1887] = v1889;
            v1890[4 * v1887] = v1893;
            v1890[5 * v1887] = v1894;
          }
          else
          {
            v1895 = (_OWORD *)(v1888 + 8 * (v1885 + (_DWORD)v1887 * v1884));
            v1896 = *(_OWORD *)v1886;
            v1897 = *((_OWORD *)v1886 + 2);
            v1895[1] = *((_OWORD *)v1886 + 1);
            v1895[2] = v1897;
            *v1895 = v1896;
          }
          v1898 = v1879 + 1;
          while (v1898 != v1882)
          {
            ++v1881;
            v1899 = *v1898++;
            v1883 = v1899;
            if (v1899 != -1)
            {
              v1879 = v1898 - 1;
              goto LABEL_956;
            }
          }
          v1874 = *(_DWORD *)(result + 5052);
        }
      }
      ++v1875;
      ++v1876;
    }
    while (v1875 < v1874);
    v5 = *a5;
  }
  v1903 = *(_DWORD *)(result + 6492);
  if (v1903)
  {
    v1904 = 0;
    v1905 = a4[12];
    do
    {
      v1906 = *(_QWORD *)(result + 6568);
      v1907 = *(_DWORD *)(result + 6592) * v1904;
      v1908 = (uint64_t *)(v1906 + 8 * v1907);
      v1909 = *(_DWORD *)(result + 6488);
      if (v1909 && *v1908 == -1)
      {
        v1910 = 0;
        v1925 = 8 * (v1909 + v1907) - 8 * v1907 - 8;
        v1926 = v1906 + 8 * v1907;
        while (v1925)
        {
          v1908 = (uint64_t *)(v1926 + 8);
          ++v1910;
          v1927 = *(_QWORD *)(v1926 + 8);
          v1925 -= 8;
          v1926 += 8;
          if (v1927 != -1)
            goto LABEL_976;
        }
      }
      else
      {
        v1910 = 0;
LABEL_976:
        v1911 = (uint64_t *)(v1906 + 8 * (v1907 + v1909));
        if (v1908 != v1911)
        {
          v1912 = *v1908;
LABEL_978:
          v1913 = *v1905;
          v1914 = *(_DWORD *)(a3[15] + 4 * v1910);
          v1915 = (_QWORD *)(*(_QWORD *)(result + 6496) + 8 * v1912);
          v1916 = *((unsigned int *)a2 + 4);
          v1917 = *a2;
          if (v5 && v1913 < v1914)
          {
            v1918 = (_QWORD *)(v1917 + 8 * (v1914 + (_DWORD)v1916 * v1913));
            v1919 = v1915[1];
            v1920 = v1915[2];
            *v1918 = *v1915;
            v1918[v1916] = v1919;
            v1918[2 * v1916] = v1920;
          }
          else
          {
            v1921 = v1917 + 8 * (v1913 + (_DWORD)v1916 * v1914);
            v1922 = *(_OWORD *)v1915;
            *(_QWORD *)(v1921 + 16) = v1915[2];
            *(_OWORD *)v1921 = v1922;
          }
          v1923 = v1908 + 1;
          while (v1923 != v1911)
          {
            ++v1910;
            v1924 = *v1923++;
            v1912 = v1924;
            if (v1924 != -1)
            {
              v1908 = v1923 - 1;
              goto LABEL_978;
            }
          }
          v1903 = *(_DWORD *)(result + 6492);
        }
      }
      ++v1904;
      ++v1905;
    }
    while (v1904 < v1903);
    v5 = *a5;
  }
  v1928 = *(_DWORD *)(result + 7932);
  if (v1928)
  {
    v1929 = a4[15];
    if (v5)
    {
      for (i = 0; i < v1928; ++i)
      {
        v1931 = *(_QWORD *)(result + 8008);
        v1932 = *(_DWORD *)(result + 8032) * i;
        v1933 = (uint64_t *)(v1931 + 8 * v1932);
        v1934 = *(_DWORD *)(result + 7928);
        if (v1934 && *v1933 == -1)
        {
          v1935 = 0;
          v1943 = 8 * (v1934 + v1932) - 8 * v1932 - 8;
          v1944 = v1931 + 8 * v1932;
          while (v1943)
          {
            v1933 = (uint64_t *)(v1944 + 8);
            ++v1935;
            v1945 = *(_QWORD *)(v1944 + 8);
            v1943 -= 8;
            v1944 += 8;
            if (v1945 != -1)
              goto LABEL_999;
          }
        }
        else
        {
          v1935 = 0;
LABEL_999:
          v1936 = (uint64_t *)(v1931 + 8 * (v1932 + v1934));
          if (v1933 != v1936)
          {
            v1937 = *v1933;
LABEL_1001:
            v1938 = *v1929;
            v1939 = *(_DWORD *)(a3[15] + 4 * v1935);
            if (*v1929 >= v1939)
              v1940 = *(_DWORD *)(a3[15] + 4 * v1935);
            else
              v1940 = *v1929;
            if (v1938 <= v1939)
              v1938 = *(_DWORD *)(a3[15] + 4 * v1935);
            *(_QWORD *)(*a2 + 8 * (v1938 + *((_DWORD *)a2 + 4) * v1940)) = *(_QWORD *)(*(_QWORD *)(result + 7936)
                                                                                       + 8 * v1937);
            v1941 = v1933 + 1;
            while (v1941 != v1936)
            {
              ++v1935;
              v1942 = *v1941++;
              v1937 = v1942;
              if (v1942 != -1)
              {
                v1933 = v1941 - 1;
                goto LABEL_1001;
              }
            }
            v1928 = *(_DWORD *)(result + 7932);
          }
        }
        ++v1929;
      }
    }
    else
    {
      do
      {
        v1946 = *(_QWORD *)(result + 8008);
        v1947 = *(_DWORD *)(result + 8032) * v5;
        v1948 = (uint64_t *)(v1946 + 8 * v1947);
        v1949 = *(_DWORD *)(result + 7928);
        if (v1949 && *v1948 == -1)
        {
          v1950 = 0;
          v1955 = 8 * (v1949 + v1947) - 8 * v1947 - 8;
          v1956 = v1946 + 8 * v1947;
          while (v1955)
          {
            v1948 = (uint64_t *)(v1956 + 8);
            ++v1950;
            v1957 = *(_QWORD *)(v1956 + 8);
            v1955 -= 8;
            v1956 += 8;
            if (v1957 != -1)
              goto LABEL_1019;
          }
        }
        else
        {
          v1950 = 0;
LABEL_1019:
          v1951 = (uint64_t *)(v1946 + 8 * (v1947 + v1949));
          if (v1948 != v1951)
          {
            v1952 = *v1948;
LABEL_1021:
            *(_QWORD *)(*a2 + 8 * (*v1929 + *((_DWORD *)a2 + 4) * *(_DWORD *)(a3[15] + 4 * v1950))) = *(_QWORD *)(*(_QWORD *)(result + 7936) + 8 * v1952);
            v1953 = v1948 + 1;
            while (v1953 != v1951)
            {
              ++v1950;
              v1954 = *v1953++;
              v1952 = v1954;
              if (v1954 != -1)
              {
                v1948 = v1953 - 1;
                goto LABEL_1021;
              }
            }
            v1928 = *(_DWORD *)(result + 7932);
          }
        }
        ++v5;
        ++v1929;
      }
      while (v5 < v1928);
    }
  }
  v1958 = *a5;
  v1959 = *(_DWORD *)(result + 9372);
  if (v1959)
  {
    v1960 = 0;
    v1961 = a4[18];
    do
    {
      v1962 = *(_QWORD *)(result + 9448);
      v1963 = *(_DWORD *)(result + 9472) * v1960;
      v1964 = (uint64_t *)(v1962 + 8 * v1963);
      v1965 = *(_DWORD *)(result + 9368);
      if (v1965 && *v1964 == -1)
      {
        v1966 = 0;
        v1981 = 8 * (v1965 + v1963) - 8 * v1963 - 8;
        v1982 = v1962 + 8 * v1963;
        while (v1981)
        {
          v1964 = (uint64_t *)(v1982 + 8);
          ++v1966;
          v1983 = *(_QWORD *)(v1982 + 8);
          v1981 -= 8;
          v1982 += 8;
          if (v1983 != -1)
            goto LABEL_1036;
        }
      }
      else
      {
        v1966 = 0;
LABEL_1036:
        v1967 = (uint64_t *)(v1962 + 8 * (v1963 + v1965));
        if (v1964 != v1967)
        {
          v1968 = *v1964;
LABEL_1038:
          v1969 = *v1961;
          v1970 = *(_DWORD *)(a3[15] + 4 * v1966);
          v1971 = (_QWORD *)(*(_QWORD *)(result + 9376) + 8 * v1968);
          v1972 = *((unsigned int *)a2 + 4);
          v1973 = *a2;
          if (v1958 && v1969 < v1970)
          {
            v1974 = (_QWORD *)(v1973 + 8 * (v1970 + (_DWORD)v1972 * v1969));
            v1975 = v1971[1];
            v1976 = v1971[2];
            *v1974 = *v1971;
            v1974[v1972] = v1975;
            v1974[2 * v1972] = v1976;
          }
          else
          {
            v1977 = v1973 + 8 * (v1969 + (_DWORD)v1972 * v1970);
            v1978 = *(_OWORD *)v1971;
            *(_QWORD *)(v1977 + 16) = v1971[2];
            *(_OWORD *)v1977 = v1978;
          }
          v1979 = v1964 + 1;
          while (v1979 != v1967)
          {
            ++v1966;
            v1980 = *v1979++;
            v1968 = v1980;
            if (v1980 != -1)
            {
              v1964 = v1979 - 1;
              goto LABEL_1038;
            }
          }
          v1959 = *(_DWORD *)(result + 9372);
        }
      }
      ++v1960;
      ++v1961;
    }
    while (v1960 < v1959);
    v1958 = *a5;
  }
  v1984 = *(_DWORD *)(result + 10812);
  if (v1984)
  {
    v1985 = 0;
    v1986 = a4[21];
    do
    {
      v1987 = *(_QWORD *)(result + 10888);
      v1988 = *(_DWORD *)(result + 10912) * v1985;
      v1989 = (uint64_t *)(v1987 + 8 * v1988);
      v1990 = *(_DWORD *)(result + 10808);
      if (v1990 && *v1989 == -1)
      {
        v1991 = 0;
        v2007 = 8 * (v1990 + v1988) - 8 * v1988 - 8;
        v2008 = v1987 + 8 * v1988;
        while (v2007)
        {
          v1989 = (uint64_t *)(v2008 + 8);
          ++v1991;
          v2009 = *(_QWORD *)(v2008 + 8);
          v2007 -= 8;
          v2008 += 8;
          if (v2009 != -1)
            goto LABEL_1058;
        }
      }
      else
      {
        v1991 = 0;
LABEL_1058:
        v1992 = (uint64_t *)(v1987 + 8 * (v1988 + v1990));
        if (v1989 != v1992)
        {
          v1993 = *v1989;
LABEL_1060:
          v1994 = *(_DWORD *)(a3[15] + 4 * v1991);
          v1995 = *v1986;
          v1996 = (_QWORD *)(*(_QWORD *)(result + 10816) + 8 * v1993);
          v1997 = *((unsigned int *)a2 + 4);
          v1998 = *a2;
          v1999 = v1996[3];
          if (v1958 && v1995 < v1994)
          {
            v2000 = (_QWORD *)(v1998 + 8 * (v1994 + (_DWORD)v1997 * v1995));
            v2001 = v1996[1];
            v2002 = v1996[2];
            *v2000 = *v1996;
            v2000[v1997] = v2001;
            v2000[2 * v1997] = v2002;
            v2000[3 * v1997] = v1999;
          }
          else
          {
            v2003 = (_OWORD *)(v1998 + 8 * (v1995 + (_DWORD)v1997 * v1994));
            v2004 = *((_OWORD *)v1996 + 1);
            *v2003 = *(_OWORD *)v1996;
            v2003[1] = v2004;
          }
          v2005 = v1989 + 1;
          while (v2005 != v1992)
          {
            ++v1991;
            v2006 = *v2005++;
            v1993 = v2006;
            if (v2006 != -1)
            {
              v1989 = v2005 - 1;
              goto LABEL_1060;
            }
          }
          v1984 = *(_DWORD *)(result + 10812);
        }
      }
      ++v1985;
      ++v1986;
    }
    while (v1985 < v1984);
    v1958 = *a5;
  }
  v2010 = *(_DWORD *)(result + 12252);
  if (v2010)
  {
    v2011 = 0;
    v2012 = a4[24];
    do
    {
      v2013 = *(_QWORD *)(result + 12328);
      v2014 = *(_DWORD *)(result + 12352) * v2011;
      v2015 = (uint64_t *)(v2013 + 8 * v2014);
      v2016 = *(_DWORD *)(result + 12248);
      if (v2016 && *v2015 == -1)
      {
        v2017 = 0;
        v2033 = 8 * (v2016 + v2014) - 8 * v2014 - 8;
        v2034 = v2013 + 8 * v2014;
        while (v2033)
        {
          v2015 = (uint64_t *)(v2034 + 8);
          ++v2017;
          v2035 = *(_QWORD *)(v2034 + 8);
          v2033 -= 8;
          v2034 += 8;
          if (v2035 != -1)
            goto LABEL_1080;
        }
      }
      else
      {
        v2017 = 0;
LABEL_1080:
        v2018 = (uint64_t *)(v2013 + 8 * (v2014 + v2016));
        if (v2015 != v2018)
        {
          v2019 = *v2015;
LABEL_1082:
          v2020 = *(_DWORD *)(a3[15] + 4 * v2017);
          v2021 = *v2012;
          v2022 = (_QWORD *)(*(_QWORD *)(result + 12256) + 8 * v2019);
          v2023 = *((unsigned int *)a2 + 4);
          v2024 = *a2;
          v2025 = v2022[3];
          if (v1958 && v2021 < v2020)
          {
            v2026 = (_QWORD *)(v2024 + 8 * (v2020 + (_DWORD)v2023 * v2021));
            v2027 = v2022[1];
            v2028 = v2022[2];
            *v2026 = *v2022;
            v2026[v2023] = v2027;
            v2026[2 * v2023] = v2028;
            v2026[3 * v2023] = v2025;
          }
          else
          {
            v2029 = (_OWORD *)(v2024 + 8 * (v2021 + (_DWORD)v2023 * v2020));
            v2030 = *((_OWORD *)v2022 + 1);
            *v2029 = *(_OWORD *)v2022;
            v2029[1] = v2030;
          }
          v2031 = v2015 + 1;
          while (v2031 != v2018)
          {
            ++v2017;
            v2032 = *v2031++;
            v2019 = v2032;
            if (v2032 != -1)
            {
              v2015 = v2031 - 1;
              goto LABEL_1082;
            }
          }
          v2010 = *(_DWORD *)(result + 12252);
        }
      }
      ++v2011;
      ++v2012;
    }
    while (v2011 < v2010);
    v1958 = *a5;
  }
  v2036 = *(_DWORD *)(result + 13692);
  if (v2036)
  {
    v2037 = 0;
    v2038 = a4[27];
    do
    {
      v2039 = *(_QWORD *)(result + 13768);
      v2040 = *(_DWORD *)(result + 13792) * v2037;
      v2041 = (uint64_t *)(v2039 + 8 * v2040);
      v2042 = *(_DWORD *)(result + 13688);
      if (v2042 && *v2041 == -1)
      {
        v2043 = 0;
        v2058 = 8 * (v2042 + v2040) - 8 * v2040 - 8;
        v2059 = v2039 + 8 * v2040;
        while (v2058)
        {
          v2041 = (uint64_t *)(v2059 + 8);
          ++v2043;
          v2060 = *(_QWORD *)(v2059 + 8);
          v2058 -= 8;
          v2059 += 8;
          if (v2060 != -1)
            goto LABEL_1102;
        }
      }
      else
      {
        v2043 = 0;
LABEL_1102:
        v2044 = (uint64_t *)(v2039 + 8 * (v2040 + v2042));
        if (v2041 != v2044)
        {
          v2045 = *v2041;
LABEL_1104:
          v2046 = *v2038;
          v2047 = *(_DWORD *)(a3[15] + 4 * v2043);
          v2048 = (_QWORD *)(*(_QWORD *)(result + 13696) + 8 * v2045);
          v2049 = *((unsigned int *)a2 + 4);
          v2050 = *a2;
          if (v1958 && v2046 < v2047)
          {
            v2051 = (_QWORD *)(v2050 + 8 * (v2047 + (_DWORD)v2049 * v2046));
            v2052 = v2048[1];
            v2053 = v2048[2];
            *v2051 = *v2048;
            v2051[v2049] = v2052;
            v2051[2 * v2049] = v2053;
          }
          else
          {
            v2054 = v2050 + 8 * (v2046 + (_DWORD)v2049 * v2047);
            v2055 = *(_OWORD *)v2048;
            *(_QWORD *)(v2054 + 16) = v2048[2];
            *(_OWORD *)v2054 = v2055;
          }
          v2056 = v2041 + 1;
          while (v2056 != v2044)
          {
            ++v2043;
            v2057 = *v2056++;
            v2045 = v2057;
            if (v2057 != -1)
            {
              v2041 = v2056 - 1;
              goto LABEL_1104;
            }
          }
          v2036 = *(_DWORD *)(result + 13692);
        }
      }
      ++v2037;
      ++v2038;
    }
    while (v2037 < v2036);
    v1958 = *a5;
  }
  v2061 = *(_DWORD *)(result + 588);
  if (v2061)
  {
    v2062 = 0;
    v2063 = *a4;
    do
    {
      v2064 = *(_QWORD *)(result + 664);
      v2065 = *(_DWORD *)(result + 688) * v2062;
      v2066 = (uint64_t *)(v2064 + 8 * v2065);
      v2067 = *(_DWORD *)(result + 584);
      if (v2067 && *v2066 == -1)
      {
        v2068 = 0;
        v2108 = 8 * (v2067 + v2065) - 8 * v2065 - 8;
        v2109 = v2064 + 8 * v2065;
        while (v2108)
        {
          v2066 = (uint64_t *)(v2109 + 8);
          ++v2068;
          v2110 = *(_QWORD *)(v2109 + 8);
          v2108 -= 8;
          v2109 += 8;
          if (v2110 != -1)
            goto LABEL_1124;
        }
      }
      else
      {
        v2068 = 0;
LABEL_1124:
        v2069 = (uint64_t *)(v2064 + 8 * (v2065 + v2067));
        if (v2066 != v2069)
        {
          v2070 = *v2066;
LABEL_1126:
          v2071 = *v2063;
          v2072 = *(_DWORD *)(a3[12] + 4 * v2068);
          v2073 = *(_QWORD *)(result + 592) + 8 * v2070;
          v2074 = *((unsigned int *)a2 + 4);
          v2075 = *a2;
          if (v1958 && v2071 < v2072)
          {
            v2076 = *(int64x2_t *)v2073;
            v2077 = (int64x2_t *)(v2075 + 8 * (v2072 + (_DWORD)v2074 * v2071));
            v2078 = *(_OWORD *)(v2073 + 24);
            v2079 = *(_QWORD *)(v2073 + 40);
            v2080 = *(int64x2_t *)(v2073 + 48);
            v2081 = *(_QWORD *)(v2073 + 64);
            v2082 = *(_OWORD *)(v2073 + 72);
            v2083 = *(_QWORD *)(v2073 + 88);
            v2084 = *(int64x2_t *)(v2073 + 96);
            v2085 = *(_QWORD *)(v2073 + 112);
            v2086 = *(_OWORD *)(v2073 + 120);
            v2087 = *(_QWORD *)(v2073 + 136);
            v2077[1].i64[0] = *(_QWORD *)(v2073 + 16);
            *v2077 = v2076;
            v2088 = &v2077->i8[8 * v2074];
            *((_QWORD *)v2088 + 2) = v2079;
            *(_OWORD *)v2088 = v2078;
            v2089 = &v2077[v2074];
            v2089[1].i64[0] = v2081;
            *v2089 = v2080;
            v2090 = &v2077->i8[24 * v2074];
            *((_QWORD *)v2090 + 2) = v2083;
            *(_OWORD *)v2090 = v2082;
            v2091 = &v2077[2 * v2074];
            v2091[1].i64[0] = v2085;
            *v2091 = v2084;
            v2092 = &v2077->i8[40 * v2074];
            *((_QWORD *)v2092 + 2) = v2087;
            *(_OWORD *)v2092 = v2086;
          }
          else
          {
            v2093 = (int64x2_t *)(v2075 + 8 * (v2071 + (_DWORD)v2074 * v2072));
            v2094.i64[0] = *(_QWORD *)(v2073 + 16);
            v2095 = *(int64x2_t *)(v2073 + 24);
            v2096.i64[0] = *(_QWORD *)(v2073 + 64);
            v2097 = *(int64x2_t *)(v2073 + 48);
            v2098 = *(int64x2_t *)(v2073 + 72);
            v2099.i64[0] = *(_QWORD *)(v2073 + 112);
            v2100 = *(int64x2_t *)(v2073 + 96);
            v2101 = *(int64x2_t *)(v2073 + 120);
            v2102 = vzip1q_s64(*(int64x2_t *)v2073, v2095);
            v2103 = vzip2q_s64(*(int64x2_t *)v2073, v2095);
            v2094.i64[1] = *(_QWORD *)(v2073 + 40);
            v2096.i64[1] = *(_QWORD *)(v2073 + 88);
            v2099.i64[1] = *(_QWORD *)(v2073 + 136);
            v2093[1] = vzip1q_s64(v2097, v2098);
            v2093[2] = vzip1q_s64(v2100, v2101);
            *v2093 = v2102;
            v2104 = (int64x2_t *)((char *)v2093 + 8 * v2074);
            v2104[1] = vzip1q_s64(vdupq_laneq_s64(v2097, 1), vdupq_laneq_s64(v2098, 1));
            v2104[2] = vzip2q_s64(v2100, v2101);
            *v2104 = v2103;
            v2105 = &v2093[v2074];
            v2105[1] = v2096;
            v2105[2] = v2099;
            *v2105 = v2094;
          }
          v2106 = v2066 + 1;
          while (v2106 != v2069)
          {
            ++v2068;
            v2107 = *v2106++;
            v2070 = v2107;
            if (v2107 != -1)
            {
              v2066 = v2106 - 1;
              goto LABEL_1126;
            }
          }
          v2061 = *(_DWORD *)(result + 588);
        }
      }
      ++v2062;
      ++v2063;
    }
    while (v2062 < v2061);
    v1958 = *a5;
  }
  v2111 = *(_DWORD *)(result + 2028);
  if (v2111)
  {
    v2112 = 0;
    v2113 = a4[3];
    do
    {
      v2114 = *(_QWORD *)(result + 2104);
      v2115 = *(_DWORD *)(result + 2128) * v2112;
      v2116 = (uint64_t *)(v2114 + 8 * v2115);
      v2117 = *(_DWORD *)(result + 2024);
      if (v2117 && *v2116 == -1)
      {
        v2118 = 0;
        v2172 = 8 * (v2117 + v2115) - 8 * v2115 - 8;
        v2173 = v2114 + 8 * v2115;
        while (v2172)
        {
          v2116 = (uint64_t *)(v2173 + 8);
          ++v2118;
          v2174 = *(_QWORD *)(v2173 + 8);
          v2172 -= 8;
          v2173 += 8;
          if (v2174 != -1)
            goto LABEL_1146;
        }
      }
      else
      {
        v2118 = 0;
LABEL_1146:
        v2119 = (uint64_t *)(v2114 + 8 * (v2115 + v2117));
        if (v2116 != v2119)
        {
          v2120 = *v2116;
LABEL_1148:
          v2121 = *v2113;
          v2122 = *(_DWORD *)(a3[12] + 4 * v2118);
          v2123 = *(_QWORD *)(result + 2032) + 8 * v2120;
          v2124 = *((unsigned int *)a2 + 4);
          v2125 = *a2;
          if (v1958 && v2121 < v2122)
          {
            v2126 = *(int64x2_t *)v2123;
            v2127 = (int64x2_t *)(v2125 + 8 * (v2122 + (_DWORD)v2124 * v2121));
            v2128 = *(_OWORD *)(v2123 + 24);
            v2129 = *(_QWORD *)(v2123 + 40);
            v2130 = *(int64x2_t *)(v2123 + 48);
            v2131 = *(_QWORD *)(v2123 + 64);
            v2132 = *(_OWORD *)(v2123 + 72);
            v2133 = *(_QWORD *)(v2123 + 88);
            v2134 = *(int64x2_t *)(v2123 + 96);
            v2135 = *(_QWORD *)(v2123 + 112);
            v2136 = *(_OWORD *)(v2123 + 120);
            v2137 = *(_QWORD *)(v2123 + 136);
            v2138 = *(int64x2_t *)(v2123 + 144);
            v2139 = *(_QWORD *)(v2123 + 160);
            v2140 = *(_OWORD *)(v2123 + 168);
            v2141 = *(_QWORD *)(v2123 + 184);
            v2142 = *(int64x2_t *)(v2123 + 192);
            v2143 = *(_QWORD *)(v2123 + 208);
            v2127[1].i64[0] = *(_QWORD *)(v2123 + 16);
            *v2127 = v2126;
            v2144 = &v2127->i8[8 * v2124];
            *((_QWORD *)v2144 + 2) = v2129;
            *(_OWORD *)v2144 = v2128;
            v2145 = &v2127[v2124];
            v2145[1].i64[0] = v2131;
            *v2145 = v2130;
            v2146 = &v2127->i8[24 * v2124];
            *((_QWORD *)v2146 + 2) = v2133;
            *(_OWORD *)v2146 = v2132;
            v2147 = &v2127[2 * v2124];
            v2147[1].i64[0] = v2135;
            *v2147 = v2134;
            v2148 = &v2127->i8[40 * v2124];
            *((_QWORD *)v2148 + 2) = v2137;
            *(_OWORD *)v2148 = v2136;
            v2149 = &v2127[3 * v2124];
            v2149[1].i64[0] = v2139;
            *v2149 = v2138;
            v2150 = &v2127->i8[56 * v2124];
            *((_QWORD *)v2150 + 2) = v2141;
            *(_OWORD *)v2150 = v2140;
            v2151 = &v2127[4 * v2124];
            v2151[1].i64[0] = v2143;
            *v2151 = v2142;
          }
          else
          {
            v2152.i64[0] = *(_QWORD *)(v2123 + 16);
            v2153 = (int64x2_t *)(v2125 + 8 * (v2121 + (_DWORD)v2124 * v2122));
            v2154 = *(int64x2_t *)(v2123 + 24);
            v2155.i64[0] = *(_QWORD *)(v2123 + 64);
            v2156 = *(int64x2_t *)(v2123 + 48);
            v2157 = *(int64x2_t *)(v2123 + 72);
            v2158.i64[0] = *(_QWORD *)(v2123 + 112);
            v2159 = *(int64x2_t *)(v2123 + 96);
            v2160 = *(int64x2_t *)(v2123 + 120);
            v2161.i64[0] = *(_QWORD *)(v2123 + 160);
            v2162 = *(int64x2_t *)(v2123 + 144);
            v2163 = *(int64x2_t *)(v2123 + 168);
            v2164 = *(_QWORD *)(v2123 + 208);
            v2165 = *(_OWORD *)(v2123 + 192);
            v2166 = vzip1q_s64(*(int64x2_t *)v2123, v2154);
            v2167 = vzip2q_s64(*(int64x2_t *)v2123, v2154);
            v2152.i64[1] = *(_QWORD *)(v2123 + 40);
            v2155.i64[1] = *(_QWORD *)(v2123 + 88);
            v2158.i64[1] = *(_QWORD *)(v2123 + 136);
            v2161.i64[1] = *(_QWORD *)(v2123 + 184);
            v2153[2] = vzip1q_s64(v2159, v2160);
            v2153[3] = vzip1q_s64(v2162, v2163);
            v2153[4].i64[0] = v2165;
            *v2153 = v2166;
            v2153[1] = vzip1q_s64(v2156, v2157);
            v2168 = (int64x2_t *)((char *)v2153 + 8 * v2124);
            v2168[2] = vzip2q_s64(v2159, v2160);
            v2168[3] = vzip2q_s64(v2162, v2163);
            *v2168 = v2167;
            v2168[1] = vzip2q_s64(v2156, v2157);
            v2168[4].i64[0] = *((_QWORD *)&v2165 + 1);
            v2169 = &v2153[v2124];
            v2169[4].i64[0] = v2164;
            v2169[2] = v2158;
            v2169[3] = v2161;
            *v2169 = v2152;
            v2169[1] = v2155;
          }
          v2170 = v2116 + 1;
          while (v2170 != v2119)
          {
            ++v2118;
            v2171 = *v2170++;
            v2120 = v2171;
            if (v2171 != -1)
            {
              v2116 = v2170 - 1;
              goto LABEL_1148;
            }
          }
          v2111 = *(_DWORD *)(result + 2028);
        }
      }
      ++v2112;
      ++v2113;
    }
    while (v2112 < v2111);
    v1958 = *a5;
  }
  v2175 = *(_DWORD *)(result + 3468);
  if (v2175)
  {
    v2176 = 0;
    v2177 = a4[6];
    do
    {
      v2178 = *(_QWORD *)(result + 3544);
      v2179 = *(_DWORD *)(result + 3568) * v2176;
      v2180 = (uint64_t *)(v2178 + 8 * v2179);
      v2181 = *(_DWORD *)(result + 3464);
      if (v2181 && *v2180 == -1)
      {
        v2182 = 0;
        v2222 = 8 * (v2181 + v2179) - 8 * v2179 - 8;
        v2223 = v2178 + 8 * v2179;
        while (v2222)
        {
          v2180 = (uint64_t *)(v2223 + 8);
          ++v2182;
          v2224 = *(_QWORD *)(v2223 + 8);
          v2222 -= 8;
          v2223 += 8;
          if (v2224 != -1)
            goto LABEL_1168;
        }
      }
      else
      {
        v2182 = 0;
LABEL_1168:
        v2183 = (uint64_t *)(v2178 + 8 * (v2179 + v2181));
        if (v2180 != v2183)
        {
          v2184 = *v2180;
LABEL_1170:
          v2185 = *v2177;
          v2186 = *(_DWORD *)(a3[12] + 4 * v2182);
          v2187 = *(_QWORD *)(result + 3472) + 8 * v2184;
          v2188 = *((unsigned int *)a2 + 4);
          v2189 = *a2;
          if (v1958 && v2185 < v2186)
          {
            v2190 = *(int64x2_t *)v2187;
            v2191 = (int64x2_t *)(v2189 + 8 * (v2186 + (_DWORD)v2188 * v2185));
            v2192 = *(_OWORD *)(v2187 + 24);
            v2193 = *(_QWORD *)(v2187 + 40);
            v2194 = *(int64x2_t *)(v2187 + 48);
            v2195 = *(_QWORD *)(v2187 + 64);
            v2196 = *(_OWORD *)(v2187 + 72);
            v2197 = *(_QWORD *)(v2187 + 88);
            v2198 = *(int64x2_t *)(v2187 + 96);
            v2199 = *(_QWORD *)(v2187 + 112);
            v2200 = *(_OWORD *)(v2187 + 120);
            v2201 = *(_QWORD *)(v2187 + 136);
            v2191[1].i64[0] = *(_QWORD *)(v2187 + 16);
            *v2191 = v2190;
            v2202 = &v2191->i8[8 * v2188];
            *((_QWORD *)v2202 + 2) = v2193;
            *(_OWORD *)v2202 = v2192;
            v2203 = &v2191[v2188];
            v2203[1].i64[0] = v2195;
            *v2203 = v2194;
            v2204 = &v2191->i8[24 * v2188];
            *((_QWORD *)v2204 + 2) = v2197;
            *(_OWORD *)v2204 = v2196;
            v2205 = &v2191[2 * v2188];
            v2205[1].i64[0] = v2199;
            *v2205 = v2198;
            v2206 = &v2191->i8[40 * v2188];
            *((_QWORD *)v2206 + 2) = v2201;
            *(_OWORD *)v2206 = v2200;
          }
          else
          {
            v2207 = (int64x2_t *)(v2189 + 8 * (v2185 + (_DWORD)v2188 * v2186));
            v2208.i64[0] = *(_QWORD *)(v2187 + 16);
            v2209 = *(int64x2_t *)(v2187 + 24);
            v2210.i64[0] = *(_QWORD *)(v2187 + 64);
            v2211 = *(int64x2_t *)(v2187 + 48);
            v2212 = *(int64x2_t *)(v2187 + 72);
            v2213.i64[0] = *(_QWORD *)(v2187 + 112);
            v2214 = *(int64x2_t *)(v2187 + 96);
            v2215 = *(int64x2_t *)(v2187 + 120);
            v2216 = vzip1q_s64(*(int64x2_t *)v2187, v2209);
            v2217 = vzip2q_s64(*(int64x2_t *)v2187, v2209);
            v2208.i64[1] = *(_QWORD *)(v2187 + 40);
            v2210.i64[1] = *(_QWORD *)(v2187 + 88);
            v2213.i64[1] = *(_QWORD *)(v2187 + 136);
            v2207[1] = vzip1q_s64(v2211, v2212);
            v2207[2] = vzip1q_s64(v2214, v2215);
            *v2207 = v2216;
            v2218 = (int64x2_t *)((char *)v2207 + 8 * v2188);
            v2218[1] = vzip1q_s64(vdupq_laneq_s64(v2211, 1), vdupq_laneq_s64(v2212, 1));
            v2218[2] = vzip2q_s64(v2214, v2215);
            *v2218 = v2217;
            v2219 = &v2207[v2188];
            v2219[1] = v2210;
            v2219[2] = v2213;
            *v2219 = v2208;
          }
          v2220 = v2180 + 1;
          while (v2220 != v2183)
          {
            ++v2182;
            v2221 = *v2220++;
            v2184 = v2221;
            if (v2221 != -1)
            {
              v2180 = v2220 - 1;
              goto LABEL_1170;
            }
          }
          v2175 = *(_DWORD *)(result + 3468);
        }
      }
      ++v2176;
      ++v2177;
    }
    while (v2176 < v2175);
    v1958 = *a5;
  }
  v2225 = *(_DWORD *)(result + 4908);
  if (v2225)
  {
    v2226 = 0;
    v2227 = a4[9];
    do
    {
      v2228 = *(_QWORD *)(result + 4984);
      v2229 = *(_DWORD *)(result + 5008) * v2226;
      v2230 = (uint64_t *)(v2228 + 8 * v2229);
      v2231 = *(_DWORD *)(result + 4904);
      if (v2231 && *v2230 == -1)
      {
        v2232 = 0;
        v2272 = 8 * (v2231 + v2229) - 8 * v2229 - 8;
        v2273 = v2228 + 8 * v2229;
        while (v2272)
        {
          v2230 = (uint64_t *)(v2273 + 8);
          ++v2232;
          v2274 = *(_QWORD *)(v2273 + 8);
          v2272 -= 8;
          v2273 += 8;
          if (v2274 != -1)
            goto LABEL_1190;
        }
      }
      else
      {
        v2232 = 0;
LABEL_1190:
        v2233 = (uint64_t *)(v2228 + 8 * (v2229 + v2231));
        if (v2230 != v2233)
        {
          v2234 = *v2230;
LABEL_1192:
          v2235 = *v2227;
          v2236 = *(_DWORD *)(a3[12] + 4 * v2232);
          v2237 = *(_QWORD *)(result + 4912) + 8 * v2234;
          v2238 = *((unsigned int *)a2 + 4);
          v2239 = *a2;
          if (v1958 && v2235 < v2236)
          {
            v2240 = *(int64x2_t *)v2237;
            v2241 = (int64x2_t *)(v2239 + 8 * (v2236 + (_DWORD)v2238 * v2235));
            v2242 = *(_OWORD *)(v2237 + 24);
            v2243 = *(_QWORD *)(v2237 + 40);
            v2244 = *(int64x2_t *)(v2237 + 48);
            v2245 = *(_QWORD *)(v2237 + 64);
            v2246 = *(_OWORD *)(v2237 + 72);
            v2247 = *(_QWORD *)(v2237 + 88);
            v2248 = *(int64x2_t *)(v2237 + 96);
            v2249 = *(_QWORD *)(v2237 + 112);
            v2250 = *(_OWORD *)(v2237 + 120);
            v2251 = *(_QWORD *)(v2237 + 136);
            v2241[1].i64[0] = *(_QWORD *)(v2237 + 16);
            *v2241 = v2240;
            v2252 = &v2241->i8[8 * v2238];
            *((_QWORD *)v2252 + 2) = v2243;
            *(_OWORD *)v2252 = v2242;
            v2253 = &v2241[v2238];
            v2253[1].i64[0] = v2245;
            *v2253 = v2244;
            v2254 = &v2241->i8[24 * v2238];
            *((_QWORD *)v2254 + 2) = v2247;
            *(_OWORD *)v2254 = v2246;
            v2255 = &v2241[2 * v2238];
            v2255[1].i64[0] = v2249;
            *v2255 = v2248;
            v2256 = &v2241->i8[40 * v2238];
            *((_QWORD *)v2256 + 2) = v2251;
            *(_OWORD *)v2256 = v2250;
          }
          else
          {
            v2257 = (int64x2_t *)(v2239 + 8 * (v2235 + (_DWORD)v2238 * v2236));
            v2258.i64[0] = *(_QWORD *)(v2237 + 16);
            v2259 = *(int64x2_t *)(v2237 + 24);
            v2260.i64[0] = *(_QWORD *)(v2237 + 64);
            v2261 = *(int64x2_t *)(v2237 + 48);
            v2262 = *(int64x2_t *)(v2237 + 72);
            v2263.i64[0] = *(_QWORD *)(v2237 + 112);
            v2264 = *(int64x2_t *)(v2237 + 96);
            v2265 = *(int64x2_t *)(v2237 + 120);
            v2266 = vzip1q_s64(*(int64x2_t *)v2237, v2259);
            v2267 = vzip2q_s64(*(int64x2_t *)v2237, v2259);
            v2258.i64[1] = *(_QWORD *)(v2237 + 40);
            v2260.i64[1] = *(_QWORD *)(v2237 + 88);
            v2263.i64[1] = *(_QWORD *)(v2237 + 136);
            v2257[1] = vzip1q_s64(v2261, v2262);
            v2257[2] = vzip1q_s64(v2264, v2265);
            *v2257 = v2266;
            v2268 = (int64x2_t *)((char *)v2257 + 8 * v2238);
            v2268[1] = vzip1q_s64(vdupq_laneq_s64(v2261, 1), vdupq_laneq_s64(v2262, 1));
            v2268[2] = vzip2q_s64(v2264, v2265);
            *v2268 = v2267;
            v2269 = &v2257[v2238];
            v2269[1] = v2260;
            v2269[2] = v2263;
            *v2269 = v2258;
          }
          v2270 = v2230 + 1;
          while (v2270 != v2233)
          {
            ++v2232;
            v2271 = *v2270++;
            v2234 = v2271;
            if (v2271 != -1)
            {
              v2230 = v2270 - 1;
              goto LABEL_1192;
            }
          }
          v2225 = *(_DWORD *)(result + 4908);
        }
      }
      ++v2226;
      ++v2227;
    }
    while (v2226 < v2225);
    v1958 = *a5;
  }
  v2275 = *(_DWORD *)(result + 6348);
  if (v2275)
  {
    v2276 = 0;
    v2277 = a4[12];
    do
    {
      v2278 = *(_QWORD *)(result + 6424);
      v2279 = *(_DWORD *)(result + 6448) * v2276;
      v2280 = (uint64_t *)(v2278 + 8 * v2279);
      v2281 = *(_DWORD *)(result + 6344);
      if (v2281 && *v2280 == -1)
      {
        v2282 = 0;
        v2308 = 8 * (v2281 + v2279) - 8 * v2279 - 8;
        v2309 = v2278 + 8 * v2279;
        while (v2308)
        {
          v2280 = (uint64_t *)(v2309 + 8);
          ++v2282;
          v2310 = *(_QWORD *)(v2309 + 8);
          v2308 -= 8;
          v2309 += 8;
          if (v2310 != -1)
            goto LABEL_1212;
        }
      }
      else
      {
        v2282 = 0;
LABEL_1212:
        v2283 = (uint64_t *)(v2278 + 8 * (v2279 + v2281));
        if (v2280 != v2283)
        {
          v2284 = *v2280;
LABEL_1214:
          v2285 = *v2277;
          v2286 = *(_DWORD *)(a3[12] + 4 * v2282);
          v2287 = *(_QWORD *)(result + 6352) + 8 * v2284;
          v2288 = *((unsigned int *)a2 + 4);
          v2289 = *a2;
          if (v1958 && v2285 < v2286)
          {
            v2290 = v2286 + (_DWORD)v2288 * v2285;
            v2291 = (int64x2_t *)(v2289 + 8 * v2290);
            v2292 = *(int64x2_t *)v2287;
            v2293 = *(_OWORD *)(v2287 + 24);
            v2294 = *(_QWORD *)(v2287 + 40);
            v2295 = *(_QWORD *)(v2287 + 64);
            v2296 = *(int8x16_t *)(v2287 + 48);
            v2297 = vextq_s8(v2296, v2296, 8uLL).u64[0];
            v2291[1].i64[0] = *(_QWORD *)(v2287 + 16);
            *v2291 = v2292;
            v2298 = &v2291->i8[8 * v2288];
            *((_QWORD *)v2298 + 2) = v2294;
            *(_OWORD *)v2298 = v2293;
          }
          else
          {
            v2290 = v2285 + (_DWORD)v2288 * v2286;
            v2299 = (int64x2_t *)(v2289 + 8 * v2290);
            v2296.i64[0] = *(_QWORD *)(v2287 + 16);
            v2297 = *(_QWORD *)(v2287 + 40);
            v2300 = *(int64x2_t *)(v2287 + 24);
            v2295 = *(_QWORD *)(v2287 + 64);
            v2301 = *(_OWORD *)(v2287 + 48);
            v2302 = vzip1q_s64(*(int64x2_t *)v2287, v2300);
            v2303 = vzip2q_s64(*(int64x2_t *)v2287, v2300);
            v2299[1].i64[0] = v2301;
            *v2299 = v2302;
            v2304 = (int64x2_t *)((char *)v2299 + 8 * v2288);
            *v2304 = v2303;
            v2304[1].i64[0] = *((_QWORD *)&v2301 + 1);
          }
          v2305 = v2289 + 8 * v2290 + 16 * v2288;
          *(_QWORD *)(v2305 + 16) = v2295;
          v2296.i64[1] = v2297;
          *(int8x16_t *)v2305 = v2296;
          v2306 = v2280 + 1;
          while (v2306 != v2283)
          {
            ++v2282;
            v2307 = *v2306++;
            v2284 = v2307;
            if (v2307 != -1)
            {
              v2280 = v2306 - 1;
              goto LABEL_1214;
            }
          }
          v2275 = *(_DWORD *)(result + 6348);
        }
      }
      ++v2276;
      ++v2277;
    }
    while (v2276 < v2275);
    v1958 = *a5;
  }
  v2311 = *(_DWORD *)(result + 7788);
  if (v2311)
  {
    v2312 = 0;
    v2313 = a4[15];
    do
    {
      v2314 = *(_QWORD *)(result + 7864);
      v2315 = *(_DWORD *)(result + 7888) * v2312;
      v2316 = (uint64_t *)(v2314 + 8 * v2315);
      v2317 = *(_DWORD *)(result + 7784);
      if (v2317 && *v2316 == -1)
      {
        v2318 = 0;
        v2333 = 8 * (v2317 + v2315) - 8 * v2315 - 8;
        v2334 = v2314 + 8 * v2315;
        while (v2333)
        {
          v2316 = (uint64_t *)(v2334 + 8);
          ++v2318;
          v2335 = *(_QWORD *)(v2334 + 8);
          v2333 -= 8;
          v2334 += 8;
          if (v2335 != -1)
            goto LABEL_1234;
        }
      }
      else
      {
        v2318 = 0;
LABEL_1234:
        v2319 = (uint64_t *)(v2314 + 8 * (v2315 + v2317));
        if (v2316 != v2319)
        {
          v2320 = *v2316;
LABEL_1236:
          v2321 = *v2313;
          v2322 = *(_DWORD *)(a3[12] + 4 * v2318);
          v2323 = *(_QWORD *)(result + 7792) + 8 * v2320;
          v2324 = *((unsigned int *)a2 + 4);
          v2325 = *a2;
          v2326 = *(int8x16_t *)v2323;
          v2327 = *(_QWORD *)(v2323 + 16);
          v2328 = vextq_s8(v2326, v2326, 8uLL).u64[0];
          if (v1958 && v2321 < v2322)
          {
            v2329 = (int8x16_t *)(v2325 + 8 * (v2322 + (_DWORD)v2324 * v2321));
            v2329[1].i64[0] = v2327;
            v2326.i64[1] = v2328;
            *v2329 = v2326;
          }
          else
          {
            v2330 = (_QWORD *)(v2325 + 8 * (v2321 + (_DWORD)v2324 * v2322));
            *v2330 = v2326.i64[0];
            v2330[v2324] = v2328;
            v2330[2 * v2324] = v2327;
          }
          v2331 = v2316 + 1;
          while (v2331 != v2319)
          {
            ++v2318;
            v2332 = *v2331++;
            v2320 = v2332;
            if (v2332 != -1)
            {
              v2316 = v2331 - 1;
              goto LABEL_1236;
            }
          }
          v2311 = *(_DWORD *)(result + 7788);
        }
      }
      ++v2312;
      ++v2313;
    }
    while (v2312 < v2311);
    v1958 = *a5;
  }
  v2336 = *(_DWORD *)(result + 9228);
  if (v2336)
  {
    v2337 = 0;
    v2338 = a4[18];
    do
    {
      v2339 = *(_QWORD *)(result + 9304);
      v2340 = *(_DWORD *)(result + 9328) * v2337;
      v2341 = (uint64_t *)(v2339 + 8 * v2340);
      v2342 = *(_DWORD *)(result + 9224);
      if (v2342 && *v2341 == -1)
      {
        v2343 = 0;
        v2369 = 8 * (v2342 + v2340) - 8 * v2340 - 8;
        v2370 = v2339 + 8 * v2340;
        while (v2369)
        {
          v2341 = (uint64_t *)(v2370 + 8);
          ++v2343;
          v2371 = *(_QWORD *)(v2370 + 8);
          v2369 -= 8;
          v2370 += 8;
          if (v2371 != -1)
            goto LABEL_1256;
        }
      }
      else
      {
        v2343 = 0;
LABEL_1256:
        v2344 = (uint64_t *)(v2339 + 8 * (v2340 + v2342));
        if (v2341 != v2344)
        {
          v2345 = *v2341;
LABEL_1258:
          v2346 = *v2338;
          v2347 = *(_DWORD *)(a3[12] + 4 * v2343);
          v2348 = *(_QWORD *)(result + 9232) + 8 * v2345;
          v2349 = *((unsigned int *)a2 + 4);
          v2350 = *a2;
          if (v1958 && v2346 < v2347)
          {
            v2351 = v2347 + (_DWORD)v2349 * v2346;
            v2352 = (int64x2_t *)(v2350 + 8 * v2351);
            v2353 = *(int64x2_t *)v2348;
            v2354 = *(_OWORD *)(v2348 + 24);
            v2355 = *(_QWORD *)(v2348 + 40);
            v2356 = *(_QWORD *)(v2348 + 64);
            v2357 = *(int8x16_t *)(v2348 + 48);
            v2358 = vextq_s8(v2357, v2357, 8uLL).u64[0];
            v2352[1].i64[0] = *(_QWORD *)(v2348 + 16);
            *v2352 = v2353;
            v2359 = &v2352->i8[8 * v2349];
            *((_QWORD *)v2359 + 2) = v2355;
            *(_OWORD *)v2359 = v2354;
          }
          else
          {
            v2351 = v2346 + (_DWORD)v2349 * v2347;
            v2360 = (int64x2_t *)(v2350 + 8 * v2351);
            v2357.i64[0] = *(_QWORD *)(v2348 + 16);
            v2358 = *(_QWORD *)(v2348 + 40);
            v2361 = *(int64x2_t *)(v2348 + 24);
            v2356 = *(_QWORD *)(v2348 + 64);
            v2362 = *(_OWORD *)(v2348 + 48);
            v2363 = vzip1q_s64(*(int64x2_t *)v2348, v2361);
            v2364 = vzip2q_s64(*(int64x2_t *)v2348, v2361);
            v2360[1].i64[0] = v2362;
            *v2360 = v2363;
            v2365 = (int64x2_t *)((char *)v2360 + 8 * v2349);
            *v2365 = v2364;
            v2365[1].i64[0] = *((_QWORD *)&v2362 + 1);
          }
          v2366 = v2350 + 8 * v2351 + 16 * v2349;
          *(_QWORD *)(v2366 + 16) = v2356;
          v2357.i64[1] = v2358;
          *(int8x16_t *)v2366 = v2357;
          v2367 = v2341 + 1;
          while (v2367 != v2344)
          {
            ++v2343;
            v2368 = *v2367++;
            v2345 = v2368;
            if (v2368 != -1)
            {
              v2341 = v2367 - 1;
              goto LABEL_1258;
            }
          }
          v2336 = *(_DWORD *)(result + 9228);
        }
      }
      ++v2337;
      ++v2338;
    }
    while (v2337 < v2336);
    v1958 = *a5;
  }
  v2372 = *(_DWORD *)(result + 10668);
  if (v2372)
  {
    v2373 = 0;
    v2374 = a4[21];
    do
    {
      v2375 = *(_QWORD *)(result + 10744);
      v2376 = *(_DWORD *)(result + 10768) * v2373;
      v2377 = (uint64_t *)(v2375 + 8 * v2376);
      v2378 = *(_DWORD *)(result + 10664);
      if (v2378 && *v2377 == -1)
      {
        v2379 = 0;
        v2410 = 8 * (v2378 + v2376) - 8 * v2376 - 8;
        v2411 = v2375 + 8 * v2376;
        while (v2410)
        {
          v2377 = (uint64_t *)(v2411 + 8);
          ++v2379;
          v2412 = *(_QWORD *)(v2411 + 8);
          v2410 -= 8;
          v2411 += 8;
          if (v2412 != -1)
            goto LABEL_1278;
        }
      }
      else
      {
        v2379 = 0;
LABEL_1278:
        v2380 = (uint64_t *)(v2375 + 8 * (v2376 + v2378));
        if (v2377 != v2380)
        {
          v2381 = *v2377;
LABEL_1280:
          v2382 = *v2374;
          v2383 = *(_DWORD *)(a3[12] + 4 * v2379);
          v2384 = *(_QWORD *)(result + 10672) + 8 * v2381;
          v2385 = *((unsigned int *)a2 + 4);
          v2386 = *a2;
          if (v1958 && v2382 < v2383)
          {
            v2387 = *(int64x2_t *)v2384;
            v2388 = (int64x2_t *)(v2386 + 8 * (v2383 + (_DWORD)v2385 * v2382));
            v2389 = *(_OWORD *)(v2384 + 24);
            v2390 = *(_QWORD *)(v2384 + 40);
            v2391 = *(int64x2_t *)(v2384 + 48);
            v2392 = *(_QWORD *)(v2384 + 64);
            v2393 = *(_OWORD *)(v2384 + 72);
            v2394 = *(_QWORD *)(v2384 + 88);
            v2388[1].i64[0] = *(_QWORD *)(v2384 + 16);
            *v2388 = v2387;
            v2395 = &v2388->i8[8 * v2385];
            *((_QWORD *)v2395 + 2) = v2390;
            *(_OWORD *)v2395 = v2389;
            v2396 = &v2388[v2385];
            v2396[1].i64[0] = v2392;
            *v2396 = v2391;
            v2397 = &v2388->i8[24 * v2385];
            *((_QWORD *)v2397 + 2) = v2394;
            *(_OWORD *)v2397 = v2393;
          }
          else
          {
            v2398 = (int64x2_t *)(v2386 + 8 * (v2382 + (_DWORD)v2385 * v2383));
            v2399.i64[0] = *(_QWORD *)(v2384 + 16);
            v2400 = *(int64x2_t *)(v2384 + 24);
            v2401.i64[0] = *(_QWORD *)(v2384 + 64);
            v2402 = *(int64x2_t *)(v2384 + 48);
            v2403 = vzip1q_s64(*(int64x2_t *)v2384, v2400);
            v2404 = vzip1q_s64(v2402, *(int64x2_t *)(v2384 + 72));
            v2405 = vzip2q_s64(*(int64x2_t *)v2384, v2400);
            v2400.i64[0] = vdupq_laneq_s64(v2402, 1).u64[0];
            v2400.i64[1] = *(_QWORD *)(v2384 + 80);
            v2399.i64[1] = *(_QWORD *)(v2384 + 40);
            v2401.i64[1] = *(_QWORD *)(v2384 + 88);
            *v2398 = v2403;
            v2398[1] = v2404;
            v2406 = (int64x2_t *)((char *)v2398 + 8 * v2385);
            *v2406 = v2405;
            v2406[1] = v2400;
            v2407 = &v2398[v2385];
            *v2407 = v2399;
            v2407[1] = v2401;
          }
          v2408 = v2377 + 1;
          while (v2408 != v2380)
          {
            ++v2379;
            v2409 = *v2408++;
            v2381 = v2409;
            if (v2409 != -1)
            {
              v2377 = v2408 - 1;
              goto LABEL_1280;
            }
          }
          v2372 = *(_DWORD *)(result + 10668);
        }
      }
      ++v2373;
      ++v2374;
    }
    while (v2373 < v2372);
    v1958 = *a5;
  }
  v2413 = *(_DWORD *)(result + 12108);
  if (v2413)
  {
    v2414 = 0;
    v2415 = a4[24];
    do
    {
      v2416 = *(_QWORD *)(result + 12184);
      v2417 = *(_DWORD *)(result + 12208) * v2414;
      v2418 = (uint64_t *)(v2416 + 8 * v2417);
      v2419 = *(_DWORD *)(result + 12104);
      if (v2419 && *v2418 == -1)
      {
        v2420 = 0;
        v2451 = 8 * (v2419 + v2417) - 8 * v2417 - 8;
        v2452 = v2416 + 8 * v2417;
        while (v2451)
        {
          v2418 = (uint64_t *)(v2452 + 8);
          ++v2420;
          v2453 = *(_QWORD *)(v2452 + 8);
          v2451 -= 8;
          v2452 += 8;
          if (v2453 != -1)
            goto LABEL_1300;
        }
      }
      else
      {
        v2420 = 0;
LABEL_1300:
        v2421 = (uint64_t *)(v2416 + 8 * (v2417 + v2419));
        if (v2418 != v2421)
        {
          v2422 = *v2418;
LABEL_1302:
          v2423 = *v2415;
          v2424 = *(_DWORD *)(a3[12] + 4 * v2420);
          v2425 = *(_QWORD *)(result + 12112) + 8 * v2422;
          v2426 = *((unsigned int *)a2 + 4);
          v2427 = *a2;
          if (v1958 && v2423 < v2424)
          {
            v2428 = *(int64x2_t *)v2425;
            v2429 = (int64x2_t *)(v2427 + 8 * (v2424 + (_DWORD)v2426 * v2423));
            v2430 = *(_OWORD *)(v2425 + 24);
            v2431 = *(_QWORD *)(v2425 + 40);
            v2432 = *(int64x2_t *)(v2425 + 48);
            v2433 = *(_QWORD *)(v2425 + 64);
            v2434 = *(_OWORD *)(v2425 + 72);
            v2435 = *(_QWORD *)(v2425 + 88);
            v2429[1].i64[0] = *(_QWORD *)(v2425 + 16);
            *v2429 = v2428;
            v2436 = &v2429->i8[8 * v2426];
            *((_QWORD *)v2436 + 2) = v2431;
            *(_OWORD *)v2436 = v2430;
            v2437 = &v2429[v2426];
            v2437[1].i64[0] = v2433;
            *v2437 = v2432;
            v2438 = &v2429->i8[24 * v2426];
            *((_QWORD *)v2438 + 2) = v2435;
            *(_OWORD *)v2438 = v2434;
          }
          else
          {
            v2439 = (int64x2_t *)(v2427 + 8 * (v2423 + (_DWORD)v2426 * v2424));
            v2440.i64[0] = *(_QWORD *)(v2425 + 16);
            v2441 = *(int64x2_t *)(v2425 + 24);
            v2442.i64[0] = *(_QWORD *)(v2425 + 64);
            v2443 = *(int64x2_t *)(v2425 + 48);
            v2444 = vzip1q_s64(*(int64x2_t *)v2425, v2441);
            v2445 = vzip1q_s64(v2443, *(int64x2_t *)(v2425 + 72));
            v2446 = vzip2q_s64(*(int64x2_t *)v2425, v2441);
            v2441.i64[0] = vdupq_laneq_s64(v2443, 1).u64[0];
            v2441.i64[1] = *(_QWORD *)(v2425 + 80);
            v2440.i64[1] = *(_QWORD *)(v2425 + 40);
            v2442.i64[1] = *(_QWORD *)(v2425 + 88);
            *v2439 = v2444;
            v2439[1] = v2445;
            v2447 = (int64x2_t *)((char *)v2439 + 8 * v2426);
            *v2447 = v2446;
            v2447[1] = v2441;
            v2448 = &v2439[v2426];
            *v2448 = v2440;
            v2448[1] = v2442;
          }
          v2449 = v2418 + 1;
          while (v2449 != v2421)
          {
            ++v2420;
            v2450 = *v2449++;
            v2422 = v2450;
            if (v2450 != -1)
            {
              v2418 = v2449 - 1;
              goto LABEL_1302;
            }
          }
          v2413 = *(_DWORD *)(result + 12108);
        }
      }
      ++v2414;
      ++v2415;
    }
    while (v2414 < v2413);
    v1958 = *a5;
  }
  v2454 = *(_DWORD *)(result + 13548);
  if (v2454)
  {
    v2455 = 0;
    v2456 = a4[27];
    do
    {
      v2457 = *(_QWORD *)(result + 13624);
      v2458 = *(_DWORD *)(result + 13648) * v2455;
      v2459 = (uint64_t *)(v2457 + 8 * v2458);
      v2460 = *(_DWORD *)(result + 13544);
      if (v2460 && *v2459 == -1)
      {
        v2461 = 0;
        v2487 = 8 * (v2460 + v2458) - 8 * v2458 - 8;
        v2488 = v2457 + 8 * v2458;
        while (v2487)
        {
          v2459 = (uint64_t *)(v2488 + 8);
          ++v2461;
          v2489 = *(_QWORD *)(v2488 + 8);
          v2487 -= 8;
          v2488 += 8;
          if (v2489 != -1)
            goto LABEL_1322;
        }
      }
      else
      {
        v2461 = 0;
LABEL_1322:
        v2462 = (uint64_t *)(v2457 + 8 * (v2458 + v2460));
        if (v2459 != v2462)
        {
          v2463 = *v2459;
LABEL_1324:
          v2464 = *v2456;
          v2465 = *(_DWORD *)(a3[12] + 4 * v2461);
          v2466 = *(_QWORD *)(result + 13552) + 8 * v2463;
          v2467 = *((unsigned int *)a2 + 4);
          v2468 = *a2;
          if (v1958 && v2464 < v2465)
          {
            v2469 = v2465 + (_DWORD)v2467 * v2464;
            v2470 = (int64x2_t *)(v2468 + 8 * v2469);
            v2471 = *(int64x2_t *)v2466;
            v2472 = *(_OWORD *)(v2466 + 24);
            v2473 = *(_QWORD *)(v2466 + 40);
            v2474 = *(_QWORD *)(v2466 + 64);
            v2475 = *(int8x16_t *)(v2466 + 48);
            v2476 = vextq_s8(v2475, v2475, 8uLL).u64[0];
            v2470[1].i64[0] = *(_QWORD *)(v2466 + 16);
            *v2470 = v2471;
            v2477 = &v2470->i8[8 * v2467];
            *((_QWORD *)v2477 + 2) = v2473;
            *(_OWORD *)v2477 = v2472;
          }
          else
          {
            v2469 = v2464 + (_DWORD)v2467 * v2465;
            v2478 = (int64x2_t *)(v2468 + 8 * v2469);
            v2475.i64[0] = *(_QWORD *)(v2466 + 16);
            v2476 = *(_QWORD *)(v2466 + 40);
            v2479 = *(int64x2_t *)(v2466 + 24);
            v2474 = *(_QWORD *)(v2466 + 64);
            v2480 = *(_OWORD *)(v2466 + 48);
            v2481 = vzip1q_s64(*(int64x2_t *)v2466, v2479);
            v2482 = vzip2q_s64(*(int64x2_t *)v2466, v2479);
            v2478[1].i64[0] = v2480;
            *v2478 = v2481;
            v2483 = (int64x2_t *)((char *)v2478 + 8 * v2467);
            *v2483 = v2482;
            v2483[1].i64[0] = *((_QWORD *)&v2480 + 1);
          }
          v2484 = v2468 + 8 * v2469 + 16 * v2467;
          *(_QWORD *)(v2484 + 16) = v2474;
          v2475.i64[1] = v2476;
          *(int8x16_t *)v2484 = v2475;
          v2485 = v2459 + 1;
          while (v2485 != v2462)
          {
            ++v2461;
            v2486 = *v2485++;
            v2463 = v2486;
            if (v2486 != -1)
            {
              v2459 = v2485 - 1;
              goto LABEL_1324;
            }
          }
          v2454 = *(_DWORD *)(result + 13548);
        }
      }
      ++v2455;
      ++v2456;
    }
    while (v2455 < v2454);
    v1958 = *a5;
  }
  v2490 = *(_DWORD *)(result + 444);
  if (v2490)
  {
    v2491 = 0;
    v2492 = *a4;
    do
    {
      v2493 = *(_QWORD *)(result + 520);
      v2494 = *(_DWORD *)(result + 544) * v2491;
      v2495 = (uint64_t *)(v2493 + 8 * v2494);
      v2496 = *(_DWORD *)(result + 440);
      if (v2496 && *v2495 == -1)
      {
        v2497 = 0;
        v2558 = 8 * (v2496 + v2494) - 8 * v2494 - 8;
        v2559 = v2493 + 8 * v2494;
        while (v2558)
        {
          v2495 = (uint64_t *)(v2559 + 8);
          ++v2497;
          v2560 = *(_QWORD *)(v2559 + 8);
          v2558 -= 8;
          v2559 += 8;
          if (v2560 != -1)
            goto LABEL_1344;
        }
      }
      else
      {
        v2497 = 0;
LABEL_1344:
        v2498 = (uint64_t *)(v2493 + 8 * (v2494 + v2496));
        if (v2495 != v2498)
        {
          v2499 = *v2495;
LABEL_1346:
          v2500 = *v2492;
          v2501 = *(_DWORD *)(a3[9] + 4 * v2497);
          v2502 = *(_QWORD *)(result + 448) + 8 * v2499;
          v2503 = *((unsigned int *)a2 + 4);
          v2504 = *a2;
          if (v1958 && v2500 < v2501)
          {
            v2505 = *(int64x2_t *)v2502;
            v2506 = (int64x2_t *)(v2504 + 8 * (v2501 + (_DWORD)v2503 * v2500));
            v2507 = *(int64x2_t *)(v2502 + 32);
            v2508 = *(int64x2_t *)(v2502 + 48);
            v2509 = *(int64x2_t *)(v2502 + 64);
            v2510 = *(int64x2_t *)(v2502 + 80);
            v2512 = *(int8x16_t *)(v2502 + 96);
            v2511 = *(int8x16_t *)(v2502 + 112);
            v2513 = *(int8x16_t *)(v2502 + 128);
            v2514 = *(int8x16_t *)(v2502 + 144);
            v2515 = vextq_s8(v2513, v2513, 8uLL).u64[0];
            v2516 = vextq_s8(v2511, v2511, 8uLL).u64[0];
            v2517 = vextq_s8(v2512, v2512, 8uLL).u64[0];
            v2518 = *(int8x16_t *)(v2502 + 160);
            v2519 = *(int8x16_t *)(v2502 + 176);
            v2520 = vextq_s8(v2519, v2519, 8uLL).u64[0];
            v2521 = vextq_s8(v2518, v2518, 8uLL).u64[0];
            v2522 = vextq_s8(v2514, v2514, 8uLL).u64[0];
            v2524 = *(int8x16_t *)(v2502 + 192);
            v2523 = *(int8x16_t *)(v2502 + 208);
            v2526 = *(int8x16_t *)(v2502 + 224);
            v2525 = *(int8x16_t *)(v2502 + 240);
            v2527 = vextq_s8(v2526, v2526, 8uLL).u64[0];
            v2528 = vextq_s8(v2523, v2523, 8uLL).u64[0];
            v2529 = vextq_s8(v2524, v2524, 8uLL).u64[0];
            v2530 = *(int8x16_t *)(v2502 + 256);
            v2531 = *(int8x16_t *)(v2502 + 272);
            v2532 = vextq_s8(v2531, v2531, 8uLL).u64[0];
            v2533 = vextq_s8(v2530, v2530, 8uLL).u64[0];
            v2534 = vextq_s8(v2525, v2525, 8uLL).u64[0];
            v2506[1] = *(int64x2_t *)(v2502 + 16);
            v2506[2] = v2507;
            *v2506 = v2505;
            v2535 = (int64x2_t *)((char *)v2506 + 8 * v2503);
            v2535[1] = v2509;
            v2535[2] = v2510;
          }
          else
          {
            v2506 = (int64x2_t *)(v2504 + 8 * (v2500 + (_DWORD)v2503 * v2501));
            v2536 = *(int64x2_t *)(v2502 + 16);
            v2537 = *(int64x2_t *)(v2502 + 64);
            v2538 = *(int64x2_t *)(v2502 + 80);
            v2540 = *(int64x2_t *)(v2502 + 32);
            v2539 = *(int64x2_t *)(v2502 + 48);
            v2541 = *(int64x2_t *)(v2502 + 96);
            v2542 = *(int64x2_t *)(v2502 + 112);
            v2543 = *(int64x2_t *)(v2502 + 128);
            v2544 = *(int64x2_t *)(v2502 + 192);
            v2545 = *(int64x2_t *)(v2502 + 208);
            v2546 = *(int64x2_t *)(v2502 + 224);
            v2547 = vzip1q_s64(*(int64x2_t *)v2502, v2539);
            v2548 = vzip1q_s64(v2541, *(int64x2_t *)(v2502 + 144));
            v2549 = vzip1q_s64(v2544, *(int64x2_t *)(v2502 + 240));
            v2550.i64[0] = vdupq_laneq_s64(v2541, 1).u64[0];
            v2550.i64[1] = *(_QWORD *)(v2502 + 152);
            v2508 = vzip2q_s64(*(int64x2_t *)v2502, v2539);
            v2551.i64[0] = vdupq_laneq_s64(v2544, 1).u64[0];
            v2551.i64[1] = *(_QWORD *)(v2502 + 248);
            v2512 = (int8x16_t)vzip1q_s64(v2536, v2537);
            v2511 = (int8x16_t)vzip1q_s64(v2542, *(int64x2_t *)(v2502 + 160));
            v2513 = (int8x16_t)vzip1q_s64(v2545, *(int64x2_t *)(v2502 + 256));
            v2515 = vextq_s8(v2513, v2513, 8uLL).u64[0];
            v2516 = vextq_s8(v2511, v2511, 8uLL).u64[0];
            v2517 = vextq_s8(v2512, v2512, 8uLL).u64[0];
            v2514 = (int8x16_t)vzip2q_s64(v2536, v2537);
            v2518.i64[0] = vdupq_laneq_s64(v2542, 1).u64[0];
            v2518.i64[1] = *(_QWORD *)(v2502 + 168);
            v2519.i64[0] = vdupq_laneq_s64(v2545, 1).u64[0];
            v2519.i64[1] = *(_QWORD *)(v2502 + 264);
            v2522 = vextq_s8(v2514, v2514, 8uLL).u64[0];
            v2520 = vextq_s8(v2519, v2519, 8uLL).u64[0];
            v2521 = vextq_s8(v2518, v2518, 8uLL).u64[0];
            v2524 = (int8x16_t)vzip1q_s64(v2540, v2538);
            v2523 = (int8x16_t)vzip1q_s64(v2543, *(int64x2_t *)(v2502 + 176));
            v2526 = (int8x16_t)vzip1q_s64(v2546, *(int64x2_t *)(v2502 + 272));
            v2527 = vextq_s8(v2526, v2526, 8uLL).u64[0];
            v2528 = vextq_s8(v2523, v2523, 8uLL).u64[0];
            v2529 = vextq_s8(v2524, v2524, 8uLL).u64[0];
            v2525 = (int8x16_t)vzip2q_s64(v2540, v2538);
            v2530.i64[0] = vdupq_laneq_s64(v2543, 1).u64[0];
            v2530.i64[1] = *(_QWORD *)(v2502 + 184);
            v2531.i64[0] = vdupq_laneq_s64(v2546, 1).u64[0];
            v2531.i64[1] = *(_QWORD *)(v2502 + 280);
            v2534 = vextq_s8(v2525, v2525, 8uLL).u64[0];
            v2532 = vextq_s8(v2531, v2531, 8uLL).u64[0];
            v2533 = vextq_s8(v2530, v2530, 8uLL).u64[0];
            v2506[1] = v2548;
            v2506[2] = v2549;
            *v2506 = v2547;
            v2535 = (int64x2_t *)((char *)v2506 + 8 * v2503);
            v2535[1] = v2550;
            v2535[2] = v2551;
          }
          *v2535 = v2508;
          v2512.i64[1] = v2517;
          v2511.i64[1] = v2516;
          v2552 = (int8x16_t *)&v2506[v2503];
          *v2552 = v2512;
          v2552[1] = v2511;
          v2513.i64[1] = v2515;
          v2552[2] = v2513;
          v2553 = (int8x16_t *)((char *)v2506 + 24 * v2503);
          v2519.i64[1] = v2520;
          v2518.i64[1] = v2521;
          v2514.i64[1] = v2522;
          v2553[1] = v2518;
          v2553[2] = v2519;
          *v2553 = v2514;
          v2554 = (int8x16_t *)&v2506[2 * v2503];
          v2526.i64[1] = v2527;
          v2523.i64[1] = v2528;
          v2524.i64[1] = v2529;
          v2554[1] = v2523;
          v2554[2] = v2526;
          *v2554 = v2524;
          v2555 = (int8x16_t *)((char *)v2506 + 40 * v2503);
          v2531.i64[1] = v2532;
          v2530.i64[1] = v2533;
          v2555[1] = v2530;
          v2555[2] = v2531;
          v2525.i64[1] = v2534;
          v2556 = v2495 + 1;
          *v2555 = v2525;
          while (v2556 != v2498)
          {
            ++v2497;
            v2557 = *v2556++;
            v2499 = v2557;
            if (v2557 != -1)
            {
              v2495 = v2556 - 1;
              goto LABEL_1346;
            }
          }
          v2490 = *(_DWORD *)(result + 444);
        }
      }
      ++v2491;
      ++v2492;
    }
    while (v2491 < v2490);
    v1958 = *a5;
  }
  v2561 = *(_DWORD *)(result + 1884);
  if (v2561)
  {
    v2562 = 0;
    v2563 = a4[3];
    do
    {
      v2564 = *(_QWORD *)(result + 1960);
      v2565 = *(_DWORD *)(result + 1984) * v2562;
      v2566 = (uint64_t *)(v2564 + 8 * v2565);
      v2567 = *(_DWORD *)(result + 1880);
      if (v2567 && *v2566 == -1)
      {
        v2568 = 0;
        v2647 = 8 * (v2567 + v2565) - 8 * v2565 - 8;
        v2648 = v2564 + 8 * v2565;
        while (v2647)
        {
          v2566 = (uint64_t *)(v2648 + 8);
          ++v2568;
          v2649 = *(_QWORD *)(v2648 + 8);
          v2647 -= 8;
          v2648 += 8;
          if (v2649 != -1)
            goto LABEL_1366;
        }
      }
      else
      {
        v2568 = 0;
LABEL_1366:
        v2569 = (uint64_t *)(v2564 + 8 * (v2565 + v2567));
        if (v2566 != v2569)
        {
          v2570 = *v2566;
LABEL_1368:
          v2571 = *v2563;
          v2572 = *(_DWORD *)(a3[9] + 4 * v2568);
          v2573 = *(_QWORD *)(result + 1888) + 8 * v2570;
          v2574 = *((unsigned int *)a2 + 4);
          v2575 = *a2;
          if (v1958 && v2571 < v2572)
          {
            v2576 = *(int64x2_t *)v2573;
            v2577 = (int64x2_t *)(v2575 + 8 * (v2572 + (_DWORD)v2574 * v2571));
            v2578 = *(int64x2_t *)(v2573 + 32);
            v2579 = *(_OWORD *)(v2573 + 48);
            v2580 = *(_OWORD *)(v2573 + 64);
            v2581 = *(_OWORD *)(v2573 + 80);
            v2582 = *(int64x2_t *)(v2573 + 96);
            v2583 = *(int64x2_t *)(v2573 + 112);
            v2584 = *(int64x2_t *)(v2573 + 128);
            v2585 = *(_OWORD *)(v2573 + 144);
            v2586 = *(_OWORD *)(v2573 + 160);
            v2587 = *(_OWORD *)(v2573 + 176);
            v2588 = *(int64x2_t *)(v2573 + 192);
            v2589 = *(int64x2_t *)(v2573 + 208);
            v2590 = *(int64x2_t *)(v2573 + 224);
            v2591 = *(_OWORD *)(v2573 + 240);
            v2592 = *(_OWORD *)(v2573 + 256);
            v2593 = *(_OWORD *)(v2573 + 272);
            v2594 = *(int64x2_t *)(v2573 + 288);
            v2595 = *(int64x2_t *)(v2573 + 304);
            v2596 = *(int64x2_t *)(v2573 + 320);
            v2597 = *(_OWORD *)(v2573 + 336);
            v2598 = *(_OWORD *)(v2573 + 352);
            v2599 = *(_OWORD *)(v2573 + 368);
            v2600 = *(int64x2_t *)(v2573 + 384);
            v2601 = *(int64x2_t *)(v2573 + 400);
            v2602 = *(int64x2_t *)(v2573 + 416);
            v2577[1] = *(int64x2_t *)(v2573 + 16);
            v2577[2] = v2578;
            *v2577 = v2576;
            v2603 = &v2577->i8[8 * v2574];
            *((_OWORD *)v2603 + 1) = v2580;
            *((_OWORD *)v2603 + 2) = v2581;
            *(_OWORD *)v2603 = v2579;
            v2604 = &v2577[v2574];
            v2604[1] = v2583;
            v2604[2] = v2584;
            *v2604 = v2582;
            v2605 = &v2577->i8[24 * v2574];
            *((_OWORD *)v2605 + 1) = v2586;
            *((_OWORD *)v2605 + 2) = v2587;
            *(_OWORD *)v2605 = v2585;
            v2606 = &v2577[2 * v2574];
            v2606[1] = v2589;
            v2606[2] = v2590;
            *v2606 = v2588;
            v2607 = &v2577->i8[40 * v2574];
            *((_OWORD *)v2607 + 1) = v2592;
            *((_OWORD *)v2607 + 2) = v2593;
            *(_OWORD *)v2607 = v2591;
            v2608 = &v2577[3 * v2574];
            v2608[1] = v2595;
            v2608[2] = v2596;
            *v2608 = v2594;
            v2609 = &v2577->i8[56 * v2574];
            *((_OWORD *)v2609 + 1) = v2598;
            *((_OWORD *)v2609 + 2) = v2599;
            *(_OWORD *)v2609 = v2597;
            v2610 = &v2577[4 * v2574];
            v2610[1] = v2601;
            v2610[2] = v2602;
            *v2610 = v2600;
          }
          else
          {
            v2611 = *(int64x2_t *)(v2573 + 16);
            v2612 = (int64x2_t *)(v2575 + 8 * (v2571 + (_DWORD)v2574 * v2572));
            v2614 = *(int64x2_t *)(v2573 + 64);
            v2613 = *(int64x2_t *)(v2573 + 80);
            v2615 = *(int64x2_t *)(v2573 + 32);
            v2616 = *(int64x2_t *)(v2573 + 48);
            v2618 = *(int64x2_t *)(v2573 + 96);
            v2617 = *(int64x2_t *)(v2573 + 112);
            v2620 = *(int64x2_t *)(v2573 + 160);
            v2619 = *(int64x2_t *)(v2573 + 176);
            v2621 = *(int64x2_t *)(v2573 + 128);
            v2622 = *(int64x2_t *)(v2573 + 144);
            v2624 = *(int64x2_t *)(v2573 + 192);
            v2623 = *(int64x2_t *)(v2573 + 208);
            v2626 = *(int64x2_t *)(v2573 + 256);
            v2625 = *(int64x2_t *)(v2573 + 272);
            v2627 = *(int64x2_t *)(v2573 + 224);
            v2628 = *(int64x2_t *)(v2573 + 240);
            v2630 = *(int64x2_t *)(v2573 + 288);
            v2629 = *(int64x2_t *)(v2573 + 304);
            v2632 = *(int64x2_t *)(v2573 + 352);
            v2631 = *(int64x2_t *)(v2573 + 368);
            v2634 = *(int64x2_t *)(v2573 + 320);
            v2633 = *(int64x2_t *)(v2573 + 336);
            v2636 = *(_OWORD *)(v2573 + 400);
            v2635 = *(_OWORD *)(v2573 + 416);
            v2637 = *(_OWORD *)(v2573 + 384);
            v2638 = vzip1q_s64(*(int64x2_t *)v2573, v2616);
            v2639 = vzip2q_s64(*(int64x2_t *)v2573, v2616);
            v2612[2] = vzip1q_s64(v2624, v2628);
            v2612[3] = vzip1q_s64(v2630, v2633);
            v2612[4].i64[0] = v2637;
            *v2612 = v2638;
            v2612[1] = vzip1q_s64(v2618, v2622);
            v2640 = (int64x2_t *)((char *)v2612 + 8 * v2574);
            v2640[2] = vzip2q_s64(v2624, v2628);
            v2640[3] = vzip2q_s64(v2630, v2633);
            *v2640 = v2639;
            v2640[1] = vzip2q_s64(v2618, v2622);
            v2640[4].i64[0] = *((_QWORD *)&v2637 + 1);
            v2641 = &v2612[v2574];
            v2641[4].i64[0] = v2636;
            v2641[2] = vzip1q_s64(v2623, v2626);
            v2641[3] = vzip1q_s64(v2629, v2632);
            *v2641 = vzip1q_s64(v2611, v2614);
            v2641[1] = vzip1q_s64(v2617, v2620);
            v2642 = (int64x2_t *)((char *)v2612 + 24 * v2574);
            v2642[4].i64[0] = *((_QWORD *)&v2636 + 1);
            v2642[2] = vzip2q_s64(v2623, v2626);
            v2642[3] = vzip2q_s64(v2629, v2632);
            *v2642 = vzip2q_s64(v2611, v2614);
            v2642[1] = vzip2q_s64(v2617, v2620);
            v2643 = &v2612[2 * v2574];
            v2643[4].i64[0] = v2635;
            v2643[2] = vzip1q_s64(v2627, v2625);
            v2643[3] = vzip1q_s64(v2634, v2631);
            *v2643 = vzip1q_s64(v2615, v2613);
            v2643[1] = vzip1q_s64(v2621, v2619);
            v2644 = (int64x2_t *)((char *)v2612 + 40 * v2574);
            v2644[4].i64[0] = *((_QWORD *)&v2635 + 1);
            v2644[2] = vzip2q_s64(v2627, v2625);
            v2644[3] = vzip2q_s64(v2634, v2631);
            *v2644 = vzip2q_s64(v2615, v2613);
            v2644[1] = vzip2q_s64(v2621, v2619);
          }
          v2645 = v2566 + 1;
          while (v2645 != v2569)
          {
            ++v2568;
            v2646 = *v2645++;
            v2570 = v2646;
            if (v2646 != -1)
            {
              v2566 = v2645 - 1;
              goto LABEL_1368;
            }
          }
          v2561 = *(_DWORD *)(result + 1884);
        }
      }
      ++v2562;
      ++v2563;
    }
    while (v2562 < v2561);
    v1958 = *a5;
  }
  v2650 = *(_DWORD *)(result + 3324);
  if (v2650)
  {
    v2651 = 0;
    v2652 = a4[6];
    do
    {
      v2653 = *(_QWORD *)(result + 3400);
      v2654 = *(_DWORD *)(result + 3424) * v2651;
      v2655 = (uint64_t *)(v2653 + 8 * v2654);
      v2656 = *(_DWORD *)(result + 3320);
      if (v2656 && *v2655 == -1)
      {
        v2657 = 0;
        v2718 = 8 * (v2656 + v2654) - 8 * v2654 - 8;
        v2719 = v2653 + 8 * v2654;
        while (v2718)
        {
          v2655 = (uint64_t *)(v2719 + 8);
          ++v2657;
          v2720 = *(_QWORD *)(v2719 + 8);
          v2718 -= 8;
          v2719 += 8;
          if (v2720 != -1)
            goto LABEL_1388;
        }
      }
      else
      {
        v2657 = 0;
LABEL_1388:
        v2658 = (uint64_t *)(v2653 + 8 * (v2654 + v2656));
        if (v2655 != v2658)
        {
          v2659 = *v2655;
LABEL_1390:
          v2660 = *v2652;
          v2661 = *(_DWORD *)(a3[9] + 4 * v2657);
          v2662 = *(_QWORD *)(result + 3328) + 8 * v2659;
          v2663 = *((unsigned int *)a2 + 4);
          v2664 = *a2;
          if (v1958 && v2660 < v2661)
          {
            v2665 = *(int64x2_t *)v2662;
            v2666 = (int64x2_t *)(v2664 + 8 * (v2661 + (_DWORD)v2663 * v2660));
            v2667 = *(int64x2_t *)(v2662 + 32);
            v2668 = *(int64x2_t *)(v2662 + 48);
            v2669 = *(int64x2_t *)(v2662 + 64);
            v2670 = *(int64x2_t *)(v2662 + 80);
            v2672 = *(int8x16_t *)(v2662 + 96);
            v2671 = *(int8x16_t *)(v2662 + 112);
            v2673 = *(int8x16_t *)(v2662 + 128);
            v2674 = *(int8x16_t *)(v2662 + 144);
            v2675 = vextq_s8(v2673, v2673, 8uLL).u64[0];
            v2676 = vextq_s8(v2671, v2671, 8uLL).u64[0];
            v2677 = vextq_s8(v2672, v2672, 8uLL).u64[0];
            v2678 = *(int8x16_t *)(v2662 + 160);
            v2679 = *(int8x16_t *)(v2662 + 176);
            v2680 = vextq_s8(v2679, v2679, 8uLL).u64[0];
            v2681 = vextq_s8(v2678, v2678, 8uLL).u64[0];
            v2682 = vextq_s8(v2674, v2674, 8uLL).u64[0];
            v2684 = *(int8x16_t *)(v2662 + 192);
            v2683 = *(int8x16_t *)(v2662 + 208);
            v2686 = *(int8x16_t *)(v2662 + 224);
            v2685 = *(int8x16_t *)(v2662 + 240);
            v2687 = vextq_s8(v2686, v2686, 8uLL).u64[0];
            v2688 = vextq_s8(v2683, v2683, 8uLL).u64[0];
            v2689 = vextq_s8(v2684, v2684, 8uLL).u64[0];
            v2690 = *(int8x16_t *)(v2662 + 256);
            v2691 = *(int8x16_t *)(v2662 + 272);
            v2692 = vextq_s8(v2691, v2691, 8uLL).u64[0];
            v2693 = vextq_s8(v2690, v2690, 8uLL).u64[0];
            v2694 = vextq_s8(v2685, v2685, 8uLL).u64[0];
            v2666[1] = *(int64x2_t *)(v2662 + 16);
            v2666[2] = v2667;
            *v2666 = v2665;
            v2695 = (int64x2_t *)((char *)v2666 + 8 * v2663);
            v2695[1] = v2669;
            v2695[2] = v2670;
          }
          else
          {
            v2666 = (int64x2_t *)(v2664 + 8 * (v2660 + (_DWORD)v2663 * v2661));
            v2696 = *(int64x2_t *)(v2662 + 16);
            v2697 = *(int64x2_t *)(v2662 + 64);
            v2698 = *(int64x2_t *)(v2662 + 80);
            v2700 = *(int64x2_t *)(v2662 + 32);
            v2699 = *(int64x2_t *)(v2662 + 48);
            v2701 = *(int64x2_t *)(v2662 + 96);
            v2702 = *(int64x2_t *)(v2662 + 112);
            v2703 = *(int64x2_t *)(v2662 + 128);
            v2704 = *(int64x2_t *)(v2662 + 192);
            v2705 = *(int64x2_t *)(v2662 + 208);
            v2706 = *(int64x2_t *)(v2662 + 224);
            v2707 = vzip1q_s64(*(int64x2_t *)v2662, v2699);
            v2708 = vzip1q_s64(v2701, *(int64x2_t *)(v2662 + 144));
            v2709 = vzip1q_s64(v2704, *(int64x2_t *)(v2662 + 240));
            v2710.i64[0] = vdupq_laneq_s64(v2701, 1).u64[0];
            v2710.i64[1] = *(_QWORD *)(v2662 + 152);
            v2668 = vzip2q_s64(*(int64x2_t *)v2662, v2699);
            v2711.i64[0] = vdupq_laneq_s64(v2704, 1).u64[0];
            v2711.i64[1] = *(_QWORD *)(v2662 + 248);
            v2672 = (int8x16_t)vzip1q_s64(v2696, v2697);
            v2671 = (int8x16_t)vzip1q_s64(v2702, *(int64x2_t *)(v2662 + 160));
            v2673 = (int8x16_t)vzip1q_s64(v2705, *(int64x2_t *)(v2662 + 256));
            v2675 = vextq_s8(v2673, v2673, 8uLL).u64[0];
            v2676 = vextq_s8(v2671, v2671, 8uLL).u64[0];
            v2677 = vextq_s8(v2672, v2672, 8uLL).u64[0];
            v2674 = (int8x16_t)vzip2q_s64(v2696, v2697);
            v2678.i64[0] = vdupq_laneq_s64(v2702, 1).u64[0];
            v2678.i64[1] = *(_QWORD *)(v2662 + 168);
            v2679.i64[0] = vdupq_laneq_s64(v2705, 1).u64[0];
            v2679.i64[1] = *(_QWORD *)(v2662 + 264);
            v2682 = vextq_s8(v2674, v2674, 8uLL).u64[0];
            v2680 = vextq_s8(v2679, v2679, 8uLL).u64[0];
            v2681 = vextq_s8(v2678, v2678, 8uLL).u64[0];
            v2684 = (int8x16_t)vzip1q_s64(v2700, v2698);
            v2683 = (int8x16_t)vzip1q_s64(v2703, *(int64x2_t *)(v2662 + 176));
            v2686 = (int8x16_t)vzip1q_s64(v2706, *(int64x2_t *)(v2662 + 272));
            v2687 = vextq_s8(v2686, v2686, 8uLL).u64[0];
            v2688 = vextq_s8(v2683, v2683, 8uLL).u64[0];
            v2689 = vextq_s8(v2684, v2684, 8uLL).u64[0];
            v2685 = (int8x16_t)vzip2q_s64(v2700, v2698);
            v2690.i64[0] = vdupq_laneq_s64(v2703, 1).u64[0];
            v2690.i64[1] = *(_QWORD *)(v2662 + 184);
            v2691.i64[0] = vdupq_laneq_s64(v2706, 1).u64[0];
            v2691.i64[1] = *(_QWORD *)(v2662 + 280);
            v2694 = vextq_s8(v2685, v2685, 8uLL).u64[0];
            v2692 = vextq_s8(v2691, v2691, 8uLL).u64[0];
            v2693 = vextq_s8(v2690, v2690, 8uLL).u64[0];
            v2666[1] = v2708;
            v2666[2] = v2709;
            *v2666 = v2707;
            v2695 = (int64x2_t *)((char *)v2666 + 8 * v2663);
            v2695[1] = v2710;
            v2695[2] = v2711;
          }
          *v2695 = v2668;
          v2672.i64[1] = v2677;
          v2671.i64[1] = v2676;
          v2712 = (int8x16_t *)&v2666[v2663];
          *v2712 = v2672;
          v2712[1] = v2671;
          v2673.i64[1] = v2675;
          v2712[2] = v2673;
          v2713 = (int8x16_t *)((char *)v2666 + 24 * v2663);
          v2679.i64[1] = v2680;
          v2678.i64[1] = v2681;
          v2674.i64[1] = v2682;
          v2713[1] = v2678;
          v2713[2] = v2679;
          *v2713 = v2674;
          v2714 = (int8x16_t *)&v2666[2 * v2663];
          v2686.i64[1] = v2687;
          v2683.i64[1] = v2688;
          v2684.i64[1] = v2689;
          v2714[1] = v2683;
          v2714[2] = v2686;
          *v2714 = v2684;
          v2715 = (int8x16_t *)((char *)v2666 + 40 * v2663);
          v2691.i64[1] = v2692;
          v2690.i64[1] = v2693;
          v2715[1] = v2690;
          v2715[2] = v2691;
          v2685.i64[1] = v2694;
          v2716 = v2655 + 1;
          *v2715 = v2685;
          while (v2716 != v2658)
          {
            ++v2657;
            v2717 = *v2716++;
            v2659 = v2717;
            if (v2717 != -1)
            {
              v2655 = v2716 - 1;
              goto LABEL_1390;
            }
          }
          v2650 = *(_DWORD *)(result + 3324);
        }
      }
      ++v2651;
      ++v2652;
    }
    while (v2651 < v2650);
    v1958 = *a5;
  }
  v2721 = *(_DWORD *)(result + 4764);
  if (v2721)
  {
    v2722 = 0;
    v2723 = a4[9];
    do
    {
      v2724 = *(_QWORD *)(result + 4840);
      v2725 = *(_DWORD *)(result + 4864) * v2722;
      v2726 = (uint64_t *)(v2724 + 8 * v2725);
      v2727 = *(_DWORD *)(result + 4760);
      if (v2727 && *v2726 == -1)
      {
        v2728 = 0;
        v2789 = 8 * (v2727 + v2725) - 8 * v2725 - 8;
        v2790 = v2724 + 8 * v2725;
        while (v2789)
        {
          v2726 = (uint64_t *)(v2790 + 8);
          ++v2728;
          v2791 = *(_QWORD *)(v2790 + 8);
          v2789 -= 8;
          v2790 += 8;
          if (v2791 != -1)
            goto LABEL_1410;
        }
      }
      else
      {
        v2728 = 0;
LABEL_1410:
        v2729 = (uint64_t *)(v2724 + 8 * (v2725 + v2727));
        if (v2726 != v2729)
        {
          v2730 = *v2726;
LABEL_1412:
          v2731 = *v2723;
          v2732 = *(_DWORD *)(a3[9] + 4 * v2728);
          v2733 = *(_QWORD *)(result + 4768) + 8 * v2730;
          v2734 = *((unsigned int *)a2 + 4);
          v2735 = *a2;
          if (v1958 && v2731 < v2732)
          {
            v2736 = *(int64x2_t *)v2733;
            v2737 = (int64x2_t *)(v2735 + 8 * (v2732 + (_DWORD)v2734 * v2731));
            v2738 = *(int64x2_t *)(v2733 + 32);
            v2739 = *(int64x2_t *)(v2733 + 48);
            v2740 = *(int64x2_t *)(v2733 + 64);
            v2741 = *(int64x2_t *)(v2733 + 80);
            v2743 = *(int8x16_t *)(v2733 + 96);
            v2742 = *(int8x16_t *)(v2733 + 112);
            v2744 = *(int8x16_t *)(v2733 + 128);
            v2745 = *(int8x16_t *)(v2733 + 144);
            v2746 = vextq_s8(v2744, v2744, 8uLL).u64[0];
            v2747 = vextq_s8(v2742, v2742, 8uLL).u64[0];
            v2748 = vextq_s8(v2743, v2743, 8uLL).u64[0];
            v2749 = *(int8x16_t *)(v2733 + 160);
            v2750 = *(int8x16_t *)(v2733 + 176);
            v2751 = vextq_s8(v2750, v2750, 8uLL).u64[0];
            v2752 = vextq_s8(v2749, v2749, 8uLL).u64[0];
            v2753 = vextq_s8(v2745, v2745, 8uLL).u64[0];
            v2755 = *(int8x16_t *)(v2733 + 192);
            v2754 = *(int8x16_t *)(v2733 + 208);
            v2757 = *(int8x16_t *)(v2733 + 224);
            v2756 = *(int8x16_t *)(v2733 + 240);
            v2758 = vextq_s8(v2757, v2757, 8uLL).u64[0];
            v2759 = vextq_s8(v2754, v2754, 8uLL).u64[0];
            v2760 = vextq_s8(v2755, v2755, 8uLL).u64[0];
            v2761 = *(int8x16_t *)(v2733 + 256);
            v2762 = *(int8x16_t *)(v2733 + 272);
            v2763 = vextq_s8(v2762, v2762, 8uLL).u64[0];
            v2764 = vextq_s8(v2761, v2761, 8uLL).u64[0];
            v2765 = vextq_s8(v2756, v2756, 8uLL).u64[0];
            v2737[1] = *(int64x2_t *)(v2733 + 16);
            v2737[2] = v2738;
            *v2737 = v2736;
            v2766 = (int64x2_t *)((char *)v2737 + 8 * v2734);
            v2766[1] = v2740;
            v2766[2] = v2741;
          }
          else
          {
            v2737 = (int64x2_t *)(v2735 + 8 * (v2731 + (_DWORD)v2734 * v2732));
            v2767 = *(int64x2_t *)(v2733 + 16);
            v2768 = *(int64x2_t *)(v2733 + 64);
            v2769 = *(int64x2_t *)(v2733 + 80);
            v2771 = *(int64x2_t *)(v2733 + 32);
            v2770 = *(int64x2_t *)(v2733 + 48);
            v2772 = *(int64x2_t *)(v2733 + 96);
            v2773 = *(int64x2_t *)(v2733 + 112);
            v2774 = *(int64x2_t *)(v2733 + 128);
            v2775 = *(int64x2_t *)(v2733 + 192);
            v2776 = *(int64x2_t *)(v2733 + 208);
            v2777 = *(int64x2_t *)(v2733 + 224);
            v2778 = vzip1q_s64(*(int64x2_t *)v2733, v2770);
            v2779 = vzip1q_s64(v2772, *(int64x2_t *)(v2733 + 144));
            v2780 = vzip1q_s64(v2775, *(int64x2_t *)(v2733 + 240));
            v2781.i64[0] = vdupq_laneq_s64(v2772, 1).u64[0];
            v2781.i64[1] = *(_QWORD *)(v2733 + 152);
            v2739 = vzip2q_s64(*(int64x2_t *)v2733, v2770);
            v2782.i64[0] = vdupq_laneq_s64(v2775, 1).u64[0];
            v2782.i64[1] = *(_QWORD *)(v2733 + 248);
            v2743 = (int8x16_t)vzip1q_s64(v2767, v2768);
            v2742 = (int8x16_t)vzip1q_s64(v2773, *(int64x2_t *)(v2733 + 160));
            v2744 = (int8x16_t)vzip1q_s64(v2776, *(int64x2_t *)(v2733 + 256));
            v2746 = vextq_s8(v2744, v2744, 8uLL).u64[0];
            v2747 = vextq_s8(v2742, v2742, 8uLL).u64[0];
            v2748 = vextq_s8(v2743, v2743, 8uLL).u64[0];
            v2745 = (int8x16_t)vzip2q_s64(v2767, v2768);
            v2749.i64[0] = vdupq_laneq_s64(v2773, 1).u64[0];
            v2749.i64[1] = *(_QWORD *)(v2733 + 168);
            v2750.i64[0] = vdupq_laneq_s64(v2776, 1).u64[0];
            v2750.i64[1] = *(_QWORD *)(v2733 + 264);
            v2753 = vextq_s8(v2745, v2745, 8uLL).u64[0];
            v2751 = vextq_s8(v2750, v2750, 8uLL).u64[0];
            v2752 = vextq_s8(v2749, v2749, 8uLL).u64[0];
            v2755 = (int8x16_t)vzip1q_s64(v2771, v2769);
            v2754 = (int8x16_t)vzip1q_s64(v2774, *(int64x2_t *)(v2733 + 176));
            v2757 = (int8x16_t)vzip1q_s64(v2777, *(int64x2_t *)(v2733 + 272));
            v2758 = vextq_s8(v2757, v2757, 8uLL).u64[0];
            v2759 = vextq_s8(v2754, v2754, 8uLL).u64[0];
            v2760 = vextq_s8(v2755, v2755, 8uLL).u64[0];
            v2756 = (int8x16_t)vzip2q_s64(v2771, v2769);
            v2761.i64[0] = vdupq_laneq_s64(v2774, 1).u64[0];
            v2761.i64[1] = *(_QWORD *)(v2733 + 184);
            v2762.i64[0] = vdupq_laneq_s64(v2777, 1).u64[0];
            v2762.i64[1] = *(_QWORD *)(v2733 + 280);
            v2765 = vextq_s8(v2756, v2756, 8uLL).u64[0];
            v2763 = vextq_s8(v2762, v2762, 8uLL).u64[0];
            v2764 = vextq_s8(v2761, v2761, 8uLL).u64[0];
            v2737[1] = v2779;
            v2737[2] = v2780;
            *v2737 = v2778;
            v2766 = (int64x2_t *)((char *)v2737 + 8 * v2734);
            v2766[1] = v2781;
            v2766[2] = v2782;
          }
          *v2766 = v2739;
          v2743.i64[1] = v2748;
          v2742.i64[1] = v2747;
          v2783 = (int8x16_t *)&v2737[v2734];
          *v2783 = v2743;
          v2783[1] = v2742;
          v2744.i64[1] = v2746;
          v2783[2] = v2744;
          v2784 = (int8x16_t *)((char *)v2737 + 24 * v2734);
          v2750.i64[1] = v2751;
          v2749.i64[1] = v2752;
          v2745.i64[1] = v2753;
          v2784[1] = v2749;
          v2784[2] = v2750;
          *v2784 = v2745;
          v2785 = (int8x16_t *)&v2737[2 * v2734];
          v2757.i64[1] = v2758;
          v2754.i64[1] = v2759;
          v2755.i64[1] = v2760;
          v2785[1] = v2754;
          v2785[2] = v2757;
          *v2785 = v2755;
          v2786 = (int8x16_t *)((char *)v2737 + 40 * v2734);
          v2762.i64[1] = v2763;
          v2761.i64[1] = v2764;
          v2786[1] = v2761;
          v2786[2] = v2762;
          v2756.i64[1] = v2765;
          v2787 = v2726 + 1;
          *v2786 = v2756;
          while (v2787 != v2729)
          {
            ++v2728;
            v2788 = *v2787++;
            v2730 = v2788;
            if (v2788 != -1)
            {
              v2726 = v2787 - 1;
              goto LABEL_1412;
            }
          }
          v2721 = *(_DWORD *)(result + 4764);
        }
      }
      ++v2722;
      ++v2723;
    }
    while (v2722 < v2721);
    v1958 = *a5;
  }
  v2792 = *(_DWORD *)(result + 6204);
  if (v2792)
  {
    v2793 = 0;
    v2794 = a4[12];
    do
    {
      v2795 = *(_QWORD *)(result + 6280);
      v2796 = *(_DWORD *)(result + 6304) * v2793;
      v2797 = (uint64_t *)(v2795 + 8 * v2796);
      v2798 = *(_DWORD *)(result + 6200);
      if (v2798 && *v2797 == -1)
      {
        v2799 = 0;
        v2836 = 8 * (v2798 + v2796) - 8 * v2796 - 8;
        v2837 = v2795 + 8 * v2796;
        while (v2836)
        {
          v2797 = (uint64_t *)(v2837 + 8);
          ++v2799;
          v2838 = *(_QWORD *)(v2837 + 8);
          v2836 -= 8;
          v2837 += 8;
          if (v2838 != -1)
            goto LABEL_1432;
        }
      }
      else
      {
        v2799 = 0;
LABEL_1432:
        v2800 = (uint64_t *)(v2795 + 8 * (v2796 + v2798));
        if (v2797 != v2800)
        {
          v2801 = *v2797;
LABEL_1434:
          v2802 = *v2794;
          v2803 = *(_DWORD *)(a3[9] + 4 * v2799);
          v2804 = *(_QWORD *)(result + 6208) + 8 * v2801;
          v2805 = *((unsigned int *)a2 + 4);
          v2806 = *a2;
          if (v1958 && v2802 < v2803)
          {
            v2807 = *(int64x2_t *)v2804;
            v2808 = (int64x2_t *)(v2806 + 8 * (v2803 + (_DWORD)v2805 * v2802));
            v2809 = *(int64x2_t *)(v2804 + 32);
            v2810 = *(_OWORD *)(v2804 + 48);
            v2811 = *(_OWORD *)(v2804 + 64);
            v2812 = *(_OWORD *)(v2804 + 80);
            v2813 = *(int64x2_t *)(v2804 + 96);
            v2814 = *(int64x2_t *)(v2804 + 112);
            v2815 = *(int64x2_t *)(v2804 + 128);
            v2808[1] = *(int64x2_t *)(v2804 + 16);
            v2808[2] = v2809;
            *v2808 = v2807;
            v2816 = &v2808->i8[8 * v2805];
            *((_OWORD *)v2816 + 1) = v2811;
            *((_OWORD *)v2816 + 2) = v2812;
            *(_OWORD *)v2816 = v2810;
            v2817 = &v2808[v2805];
            v2817[1] = v2814;
            v2817[2] = v2815;
            *v2817 = v2813;
          }
          else
          {
            v2818 = *(int64x2_t *)(v2804 + 16);
            v2819 = (int64x2_t *)(v2806 + 8 * (v2802 + (_DWORD)v2805 * v2803));
            v2821 = *(int64x2_t *)(v2804 + 64);
            v2820 = *(int64x2_t *)(v2804 + 80);
            v2822 = *(int64x2_t *)(v2804 + 32);
            v2823 = *(int64x2_t *)(v2804 + 48);
            v2825 = *(_OWORD *)(v2804 + 112);
            v2824 = *(_OWORD *)(v2804 + 128);
            v2826 = *(_OWORD *)(v2804 + 96);
            v2827 = vzip1q_s64(*(int64x2_t *)v2804, v2823);
            v2828 = vzip2q_s64(*(int64x2_t *)v2804, v2823);
            v2819[1].i64[0] = v2826;
            *v2819 = v2827;
            v2829 = (int64x2_t *)((char *)v2819 + 8 * v2805);
            *v2829 = v2828;
            v2829[1].i64[0] = *((_QWORD *)&v2826 + 1);
            v2830 = &v2819[v2805];
            v2830[1].i64[0] = v2825;
            *v2830 = vzip1q_s64(v2818, v2821);
            v2831 = (int64x2_t *)((char *)v2819 + 24 * v2805);
            v2831[1].i64[0] = *((_QWORD *)&v2825 + 1);
            *v2831 = vzip2q_s64(v2818, v2821);
            v2832 = &v2819[2 * v2805];
            v2832[1].i64[0] = v2824;
            *v2832 = vzip1q_s64(v2822, v2820);
            v2833 = (int64x2_t *)((char *)v2819 + 40 * v2805);
            v2833[1].i64[0] = *((_QWORD *)&v2824 + 1);
            *v2833 = vzip2q_s64(v2822, v2820);
          }
          v2834 = v2797 + 1;
          while (v2834 != v2800)
          {
            ++v2799;
            v2835 = *v2834++;
            v2801 = v2835;
            if (v2835 != -1)
            {
              v2797 = v2834 - 1;
              goto LABEL_1434;
            }
          }
          v2792 = *(_DWORD *)(result + 6204);
        }
      }
      ++v2793;
      ++v2794;
    }
    while (v2793 < v2792);
    v1958 = *a5;
  }
  v2839 = *(_DWORD *)(result + 7644);
  if (v2839)
  {
    v2840 = 0;
    v2841 = a4[15];
    do
    {
      v2842 = *(_QWORD *)(result + 7720);
      v2843 = *(_DWORD *)(result + 7744) * v2840;
      v2844 = (uint64_t *)(v2842 + 8 * v2843);
      v2845 = *(_DWORD *)(result + 7640);
      if (v2845 && *v2844 == -1)
      {
        v2846 = 0;
        v2864 = 8 * (v2845 + v2843) - 8 * v2843 - 8;
        v2865 = v2842 + 8 * v2843;
        while (v2864)
        {
          v2844 = (uint64_t *)(v2865 + 8);
          ++v2846;
          v2866 = *(_QWORD *)(v2865 + 8);
          v2864 -= 8;
          v2865 += 8;
          if (v2866 != -1)
            goto LABEL_1454;
        }
      }
      else
      {
        v2846 = 0;
LABEL_1454:
        v2847 = (uint64_t *)(v2842 + 8 * (v2843 + v2845));
        if (v2844 != v2847)
        {
          v2848 = *v2844;
LABEL_1456:
          v2849 = *v2841;
          v2850 = *(_DWORD *)(a3[9] + 4 * v2846);
          v2851 = (int8x16_t *)(*(_QWORD *)(result + 7648) + 8 * v2848);
          v2852 = *((unsigned int *)a2 + 4);
          v2853 = *a2;
          v2855 = v2851[1];
          v2854 = v2851[2];
          v2856 = *v2851;
          v2857 = vextq_s8(v2854, v2854, 8uLL).u64[0];
          v2858 = vextq_s8(v2855, v2855, 8uLL).u64[0];
          v2859 = vextq_s8(v2856, v2856, 8uLL).u64[0];
          if (v1958 && v2849 < v2850)
          {
            v2856.i64[1] = v2859;
            v2855.i64[1] = v2858;
            v2860 = (int8x16_t *)(v2853 + 8 * (v2850 + (_DWORD)v2852 * v2849));
            *v2860 = v2856;
            v2860[1] = v2855;
            v2854.i64[1] = v2857;
            v2860[2] = v2854;
          }
          else
          {
            v2861 = (_QWORD *)(v2853 + 8 * (v2849 + (_DWORD)v2852 * v2850));
            *v2861 = v2856.i64[0];
            v2861[v2852] = v2859;
            v2861[2 * v2852] = v2855.i64[0];
            v2861[3 * v2852] = v2858;
            v2861[4 * v2852] = v2854.i64[0];
            v2861[5 * v2852] = v2857;
          }
          v2862 = v2844 + 1;
          while (v2862 != v2847)
          {
            ++v2846;
            v2863 = *v2862++;
            v2848 = v2863;
            if (v2863 != -1)
            {
              v2844 = v2862 - 1;
              goto LABEL_1456;
            }
          }
          v2839 = *(_DWORD *)(result + 7644);
        }
      }
      ++v2840;
      ++v2841;
    }
    while (v2840 < v2839);
    v1958 = *a5;
  }
  v2867 = *(_DWORD *)(result + 9084);
  if (v2867)
  {
    v2868 = 0;
    v2869 = a4[18];
    do
    {
      v2870 = *(_QWORD *)(result + 9160);
      v2871 = *(_DWORD *)(result + 9184) * v2868;
      v2872 = (uint64_t *)(v2870 + 8 * v2871);
      v2873 = *(_DWORD *)(result + 9080);
      if (v2873 && *v2872 == -1)
      {
        v2874 = 0;
        v2911 = 8 * (v2873 + v2871) - 8 * v2871 - 8;
        v2912 = v2870 + 8 * v2871;
        while (v2911)
        {
          v2872 = (uint64_t *)(v2912 + 8);
          ++v2874;
          v2913 = *(_QWORD *)(v2912 + 8);
          v2911 -= 8;
          v2912 += 8;
          if (v2913 != -1)
            goto LABEL_1476;
        }
      }
      else
      {
        v2874 = 0;
LABEL_1476:
        v2875 = (uint64_t *)(v2870 + 8 * (v2871 + v2873));
        if (v2872 != v2875)
        {
          v2876 = *v2872;
LABEL_1478:
          v2877 = *v2869;
          v2878 = *(_DWORD *)(a3[9] + 4 * v2874);
          v2879 = *(_QWORD *)(result + 9088) + 8 * v2876;
          v2880 = *((unsigned int *)a2 + 4);
          v2881 = *a2;
          if (v1958 && v2877 < v2878)
          {
            v2882 = *(int64x2_t *)v2879;
            v2883 = (int64x2_t *)(v2881 + 8 * (v2878 + (_DWORD)v2880 * v2877));
            v2884 = *(int64x2_t *)(v2879 + 32);
            v2885 = *(_OWORD *)(v2879 + 48);
            v2886 = *(_OWORD *)(v2879 + 64);
            v2887 = *(_OWORD *)(v2879 + 80);
            v2888 = *(int64x2_t *)(v2879 + 96);
            v2889 = *(int64x2_t *)(v2879 + 112);
            v2890 = *(int64x2_t *)(v2879 + 128);
            v2883[1] = *(int64x2_t *)(v2879 + 16);
            v2883[2] = v2884;
            *v2883 = v2882;
            v2891 = &v2883->i8[8 * v2880];
            *((_OWORD *)v2891 + 1) = v2886;
            *((_OWORD *)v2891 + 2) = v2887;
            *(_OWORD *)v2891 = v2885;
            v2892 = &v2883[v2880];
            v2892[1] = v2889;
            v2892[2] = v2890;
            *v2892 = v2888;
          }
          else
          {
            v2893 = *(int64x2_t *)(v2879 + 16);
            v2894 = (int64x2_t *)(v2881 + 8 * (v2877 + (_DWORD)v2880 * v2878));
            v2896 = *(int64x2_t *)(v2879 + 64);
            v2895 = *(int64x2_t *)(v2879 + 80);
            v2897 = *(int64x2_t *)(v2879 + 32);
            v2898 = *(int64x2_t *)(v2879 + 48);
            v2900 = *(_OWORD *)(v2879 + 112);
            v2899 = *(_OWORD *)(v2879 + 128);
            v2901 = *(_OWORD *)(v2879 + 96);
            v2902 = vzip1q_s64(*(int64x2_t *)v2879, v2898);
            v2903 = vzip2q_s64(*(int64x2_t *)v2879, v2898);
            v2894[1].i64[0] = v2901;
            *v2894 = v2902;
            v2904 = (int64x2_t *)((char *)v2894 + 8 * v2880);
            *v2904 = v2903;
            v2904[1].i64[0] = *((_QWORD *)&v2901 + 1);
            v2905 = &v2894[v2880];
            v2905[1].i64[0] = v2900;
            *v2905 = vzip1q_s64(v2893, v2896);
            v2906 = (int64x2_t *)((char *)v2894 + 24 * v2880);
            v2906[1].i64[0] = *((_QWORD *)&v2900 + 1);
            *v2906 = vzip2q_s64(v2893, v2896);
            v2907 = &v2894[2 * v2880];
            v2907[1].i64[0] = v2899;
            *v2907 = vzip1q_s64(v2897, v2895);
            v2908 = (int64x2_t *)((char *)v2894 + 40 * v2880);
            v2908[1].i64[0] = *((_QWORD *)&v2899 + 1);
            *v2908 = vzip2q_s64(v2897, v2895);
          }
          v2909 = v2872 + 1;
          while (v2909 != v2875)
          {
            ++v2874;
            v2910 = *v2909++;
            v2876 = v2910;
            if (v2910 != -1)
            {
              v2872 = v2909 - 1;
              goto LABEL_1478;
            }
          }
          v2867 = *(_DWORD *)(result + 9084);
        }
      }
      ++v2868;
      ++v2869;
    }
    while (v2868 < v2867);
    v1958 = *a5;
  }
  v2914 = *(_DWORD *)(result + 10524);
  if (v2914)
  {
    v2915 = 0;
    v2916 = a4[21];
    do
    {
      v2917 = *(_QWORD *)(result + 10600);
      v2918 = *(_DWORD *)(result + 10624) * v2915;
      v2919 = (uint64_t *)(v2917 + 8 * v2918);
      v2920 = *(_DWORD *)(result + 10520);
      if (v2920 && *v2919 == -1)
      {
        v2921 = 0;
        v2964 = 8 * (v2920 + v2918) - 8 * v2918 - 8;
        v2965 = v2917 + 8 * v2918;
        while (v2964)
        {
          v2919 = (uint64_t *)(v2965 + 8);
          ++v2921;
          v2966 = *(_QWORD *)(v2965 + 8);
          v2964 -= 8;
          v2965 += 8;
          if (v2966 != -1)
            goto LABEL_1498;
        }
      }
      else
      {
        v2921 = 0;
LABEL_1498:
        v2922 = (uint64_t *)(v2917 + 8 * (v2918 + v2920));
        if (v2919 != v2922)
        {
          v2923 = *v2919;
LABEL_1500:
          v2924 = *v2916;
          v2925 = *(_DWORD *)(a3[9] + 4 * v2921);
          v2926 = *(_QWORD *)(result + 10528) + 8 * v2923;
          v2927 = *((unsigned int *)a2 + 4);
          v2928 = *a2;
          if (v1958 && v2924 < v2925)
          {
            v2929 = *(int64x2_t *)v2926;
            v2930 = (int64x2_t *)(v2928 + 8 * (v2925 + (_DWORD)v2927 * v2924));
            v2931 = *(int64x2_t *)(v2926 + 32);
            v2932 = *(_OWORD *)(v2926 + 48);
            v2933 = *(_OWORD *)(v2926 + 64);
            v2934 = *(_OWORD *)(v2926 + 80);
            v2935 = *(int64x2_t *)(v2926 + 96);
            v2936 = *(int64x2_t *)(v2926 + 112);
            v2937 = *(int64x2_t *)(v2926 + 128);
            v2938 = *(_OWORD *)(v2926 + 144);
            v2939 = *(_OWORD *)(v2926 + 160);
            v2940 = *(_OWORD *)(v2926 + 176);
            v2930[1] = *(int64x2_t *)(v2926 + 16);
            v2930[2] = v2931;
            *v2930 = v2929;
            v2941 = &v2930->i8[8 * v2927];
            *((_OWORD *)v2941 + 1) = v2933;
            *((_OWORD *)v2941 + 2) = v2934;
            *(_OWORD *)v2941 = v2932;
            v2942 = &v2930[v2927];
            v2942[1] = v2936;
            v2942[2] = v2937;
            *v2942 = v2935;
            v2943 = &v2930->i8[24 * v2927];
            *((_OWORD *)v2943 + 1) = v2939;
            *((_OWORD *)v2943 + 2) = v2940;
            *(_OWORD *)v2943 = v2938;
          }
          else
          {
            v2944 = *(int64x2_t *)(v2926 + 16);
            v2945 = (int64x2_t *)(v2928 + 8 * (v2924 + (_DWORD)v2927 * v2925));
            v2947 = *(int64x2_t *)(v2926 + 64);
            v2946 = *(int64x2_t *)(v2926 + 80);
            v2948 = *(int64x2_t *)(v2926 + 32);
            v2949 = *(int64x2_t *)(v2926 + 48);
            v2951 = *(int64x2_t *)(v2926 + 96);
            v2950 = *(int64x2_t *)(v2926 + 112);
            v2953 = *(int64x2_t *)(v2926 + 160);
            v2952 = *(int64x2_t *)(v2926 + 176);
            v2954 = *(int64x2_t *)(v2926 + 128);
            v2955 = *(int64x2_t *)(v2926 + 144);
            v2956 = vzip2q_s64(*(int64x2_t *)v2926, v2949);
            *v2945 = vzip1q_s64(*(int64x2_t *)v2926, v2949);
            v2945[1] = vzip1q_s64(v2951, v2955);
            v2957 = (int64x2_t *)((char *)v2945 + 8 * v2927);
            *v2957 = v2956;
            v2957[1] = vzip2q_s64(v2951, v2955);
            v2958 = &v2945[v2927];
            *v2958 = vzip1q_s64(v2944, v2947);
            v2958[1] = vzip1q_s64(v2950, v2953);
            v2959 = (int64x2_t *)((char *)v2945 + 24 * v2927);
            *v2959 = vzip2q_s64(v2944, v2947);
            v2959[1] = vzip2q_s64(v2950, v2953);
            v2960 = &v2945[2 * v2927];
            *v2960 = vzip1q_s64(v2948, v2946);
            v2960[1] = vzip1q_s64(v2954, v2952);
            v2961 = (int64x2_t *)((char *)v2945 + 40 * v2927);
            *v2961 = vzip2q_s64(v2948, v2946);
            v2961[1] = vzip2q_s64(v2954, v2952);
          }
          v2962 = v2919 + 1;
          while (v2962 != v2922)
          {
            ++v2921;
            v2963 = *v2962++;
            v2923 = v2963;
            if (v2963 != -1)
            {
              v2919 = v2962 - 1;
              goto LABEL_1500;
            }
          }
          v2914 = *(_DWORD *)(result + 10524);
        }
      }
      ++v2915;
      ++v2916;
    }
    while (v2915 < v2914);
    v1958 = *a5;
  }
  v2967 = *(_DWORD *)(result + 11964);
  if (v2967)
  {
    v2968 = 0;
    v2969 = a4[24];
    do
    {
      v2970 = *(_QWORD *)(result + 12040);
      v2971 = *(_DWORD *)(result + 12064) * v2968;
      v2972 = (uint64_t *)(v2970 + 8 * v2971);
      v2973 = *(_DWORD *)(result + 11960);
      if (v2973 && *v2972 == -1)
      {
        v2974 = 0;
        v3017 = 8 * (v2973 + v2971) - 8 * v2971 - 8;
        v3018 = v2970 + 8 * v2971;
        while (v3017)
        {
          v2972 = (uint64_t *)(v3018 + 8);
          ++v2974;
          v3019 = *(_QWORD *)(v3018 + 8);
          v3017 -= 8;
          v3018 += 8;
          if (v3019 != -1)
            goto LABEL_1520;
        }
      }
      else
      {
        v2974 = 0;
LABEL_1520:
        v2975 = (uint64_t *)(v2970 + 8 * (v2971 + v2973));
        if (v2972 != v2975)
        {
          v2976 = *v2972;
LABEL_1522:
          v2977 = *v2969;
          v2978 = *(_DWORD *)(a3[9] + 4 * v2974);
          v2979 = *(_QWORD *)(result + 11968) + 8 * v2976;
          v2980 = *((unsigned int *)a2 + 4);
          v2981 = *a2;
          if (v1958 && v2977 < v2978)
          {
            v2982 = *(int64x2_t *)v2979;
            v2983 = (int64x2_t *)(v2981 + 8 * (v2978 + (_DWORD)v2980 * v2977));
            v2984 = *(int64x2_t *)(v2979 + 32);
            v2985 = *(_OWORD *)(v2979 + 48);
            v2986 = *(_OWORD *)(v2979 + 64);
            v2987 = *(_OWORD *)(v2979 + 80);
            v2988 = *(int64x2_t *)(v2979 + 96);
            v2989 = *(int64x2_t *)(v2979 + 112);
            v2990 = *(int64x2_t *)(v2979 + 128);
            v2991 = *(_OWORD *)(v2979 + 144);
            v2992 = *(_OWORD *)(v2979 + 160);
            v2993 = *(_OWORD *)(v2979 + 176);
            v2983[1] = *(int64x2_t *)(v2979 + 16);
            v2983[2] = v2984;
            *v2983 = v2982;
            v2994 = &v2983->i8[8 * v2980];
            *((_OWORD *)v2994 + 1) = v2986;
            *((_OWORD *)v2994 + 2) = v2987;
            *(_OWORD *)v2994 = v2985;
            v2995 = &v2983[v2980];
            v2995[1] = v2989;
            v2995[2] = v2990;
            *v2995 = v2988;
            v2996 = &v2983->i8[24 * v2980];
            *((_OWORD *)v2996 + 1) = v2992;
            *((_OWORD *)v2996 + 2) = v2993;
            *(_OWORD *)v2996 = v2991;
          }
          else
          {
            v2997 = *(int64x2_t *)(v2979 + 16);
            v2998 = (int64x2_t *)(v2981 + 8 * (v2977 + (_DWORD)v2980 * v2978));
            v3000 = *(int64x2_t *)(v2979 + 64);
            v2999 = *(int64x2_t *)(v2979 + 80);
            v3001 = *(int64x2_t *)(v2979 + 32);
            v3002 = *(int64x2_t *)(v2979 + 48);
            v3004 = *(int64x2_t *)(v2979 + 96);
            v3003 = *(int64x2_t *)(v2979 + 112);
            v3006 = *(int64x2_t *)(v2979 + 160);
            v3005 = *(int64x2_t *)(v2979 + 176);
            v3007 = *(int64x2_t *)(v2979 + 128);
            v3008 = *(int64x2_t *)(v2979 + 144);
            v3009 = vzip2q_s64(*(int64x2_t *)v2979, v3002);
            *v2998 = vzip1q_s64(*(int64x2_t *)v2979, v3002);
            v2998[1] = vzip1q_s64(v3004, v3008);
            v3010 = (int64x2_t *)((char *)v2998 + 8 * v2980);
            *v3010 = v3009;
            v3010[1] = vzip2q_s64(v3004, v3008);
            v3011 = &v2998[v2980];
            *v3011 = vzip1q_s64(v2997, v3000);
            v3011[1] = vzip1q_s64(v3003, v3006);
            v3012 = (int64x2_t *)((char *)v2998 + 24 * v2980);
            *v3012 = vzip2q_s64(v2997, v3000);
            v3012[1] = vzip2q_s64(v3003, v3006);
            v3013 = &v2998[2 * v2980];
            *v3013 = vzip1q_s64(v3001, v2999);
            v3013[1] = vzip1q_s64(v3007, v3005);
            v3014 = (int64x2_t *)((char *)v2998 + 40 * v2980);
            *v3014 = vzip2q_s64(v3001, v2999);
            v3014[1] = vzip2q_s64(v3007, v3005);
          }
          v3015 = v2972 + 1;
          while (v3015 != v2975)
          {
            ++v2974;
            v3016 = *v3015++;
            v2976 = v3016;
            if (v3016 != -1)
            {
              v2972 = v3015 - 1;
              goto LABEL_1522;
            }
          }
          v2967 = *(_DWORD *)(result + 11964);
        }
      }
      ++v2968;
      ++v2969;
    }
    while (v2968 < v2967);
    v1958 = *a5;
  }
  v3020 = *(_DWORD *)(result + 13404);
  if (v3020)
  {
    v3021 = 0;
    v3022 = a4[27];
    do
    {
      v3023 = *(_QWORD *)(result + 13480);
      v3024 = *(_DWORD *)(result + 13504) * v3021;
      v3025 = (uint64_t *)(v3023 + 8 * v3024);
      v3026 = *(_DWORD *)(result + 13400);
      if (v3026 && *v3025 == -1)
      {
        v3027 = 0;
        v3064 = 8 * (v3026 + v3024) - 8 * v3024 - 8;
        v3065 = v3023 + 8 * v3024;
        while (v3064)
        {
          v3025 = (uint64_t *)(v3065 + 8);
          ++v3027;
          v3066 = *(_QWORD *)(v3065 + 8);
          v3064 -= 8;
          v3065 += 8;
          if (v3066 != -1)
            goto LABEL_1542;
        }
      }
      else
      {
        v3027 = 0;
LABEL_1542:
        v3028 = (uint64_t *)(v3023 + 8 * (v3024 + v3026));
        if (v3025 != v3028)
        {
          v3029 = *v3025;
LABEL_1544:
          v3030 = *v3022;
          v3031 = *(_DWORD *)(a3[9] + 4 * v3027);
          v3032 = *(_QWORD *)(result + 13408) + 8 * v3029;
          v3033 = *((unsigned int *)a2 + 4);
          v3034 = *a2;
          if (v1958 && v3030 < v3031)
          {
            v3035 = *(int64x2_t *)v3032;
            v3036 = (int64x2_t *)(v3034 + 8 * (v3031 + (_DWORD)v3033 * v3030));
            v3037 = *(int64x2_t *)(v3032 + 32);
            v3038 = *(_OWORD *)(v3032 + 48);
            v3039 = *(_OWORD *)(v3032 + 64);
            v3040 = *(_OWORD *)(v3032 + 80);
            v3041 = *(int64x2_t *)(v3032 + 96);
            v3042 = *(int64x2_t *)(v3032 + 112);
            v3043 = *(int64x2_t *)(v3032 + 128);
            v3036[1] = *(int64x2_t *)(v3032 + 16);
            v3036[2] = v3037;
            *v3036 = v3035;
            v3044 = &v3036->i8[8 * v3033];
            *((_OWORD *)v3044 + 1) = v3039;
            *((_OWORD *)v3044 + 2) = v3040;
            *(_OWORD *)v3044 = v3038;
            v3045 = &v3036[v3033];
            v3045[1] = v3042;
            v3045[2] = v3043;
            *v3045 = v3041;
          }
          else
          {
            v3046 = *(int64x2_t *)(v3032 + 16);
            v3047 = (int64x2_t *)(v3034 + 8 * (v3030 + (_DWORD)v3033 * v3031));
            v3049 = *(int64x2_t *)(v3032 + 64);
            v3048 = *(int64x2_t *)(v3032 + 80);
            v3050 = *(int64x2_t *)(v3032 + 32);
            v3051 = *(int64x2_t *)(v3032 + 48);
            v3053 = *(_OWORD *)(v3032 + 112);
            v3052 = *(_OWORD *)(v3032 + 128);
            v3054 = *(_OWORD *)(v3032 + 96);
            v3055 = vzip1q_s64(*(int64x2_t *)v3032, v3051);
            v3056 = vzip2q_s64(*(int64x2_t *)v3032, v3051);
            v3047[1].i64[0] = v3054;
            *v3047 = v3055;
            v3057 = (int64x2_t *)((char *)v3047 + 8 * v3033);
            *v3057 = v3056;
            v3057[1].i64[0] = *((_QWORD *)&v3054 + 1);
            v3058 = &v3047[v3033];
            v3058[1].i64[0] = v3053;
            *v3058 = vzip1q_s64(v3046, v3049);
            v3059 = (int64x2_t *)((char *)v3047 + 24 * v3033);
            v3059[1].i64[0] = *((_QWORD *)&v3053 + 1);
            *v3059 = vzip2q_s64(v3046, v3049);
            v3060 = &v3047[2 * v3033];
            v3060[1].i64[0] = v3052;
            *v3060 = vzip1q_s64(v3050, v3048);
            v3061 = (int64x2_t *)((char *)v3047 + 40 * v3033);
            v3061[1].i64[0] = *((_QWORD *)&v3052 + 1);
            *v3061 = vzip2q_s64(v3050, v3048);
          }
          v3062 = v3025 + 1;
          while (v3062 != v3028)
          {
            ++v3027;
            v3063 = *v3062++;
            v3029 = v3063;
            if (v3063 != -1)
            {
              v3025 = v3062 - 1;
              goto LABEL_1544;
            }
          }
          v3020 = *(_DWORD *)(result + 13404);
        }
      }
      ++v3021;
      ++v3022;
    }
    while (v3021 < v3020);
    v1958 = *a5;
  }
  v3067 = *(_DWORD *)(result + 300);
  if (v3067)
  {
    v3068 = 0;
    v3069 = *a4;
    do
    {
      v3070 = *(_QWORD *)(result + 376);
      v3071 = *(_DWORD *)(result + 400) * v3068;
      v3072 = (uint64_t *)(v3070 + 8 * v3071);
      v3073 = *(_DWORD *)(result + 296);
      if (v3073 && *v3072 == -1)
      {
        v3074 = 0;
        v3135 = 8 * (v3073 + v3071) - 8 * v3071 - 8;
        v3136 = v3070 + 8 * v3071;
        while (v3135)
        {
          v3072 = (uint64_t *)(v3136 + 8);
          ++v3074;
          v3137 = *(_QWORD *)(v3136 + 8);
          v3135 -= 8;
          v3136 += 8;
          if (v3137 != -1)
            goto LABEL_1564;
        }
      }
      else
      {
        v3074 = 0;
LABEL_1564:
        v3075 = (uint64_t *)(v3070 + 8 * (v3071 + v3073));
        if (v3072 != v3075)
        {
          v3076 = *v3072;
LABEL_1566:
          v3077 = *v3069;
          v3078 = *(_DWORD *)(a3[6] + 4 * v3074);
          v3079 = *(_QWORD *)(result + 304) + 8 * v3076;
          v3080 = *((unsigned int *)a2 + 4);
          v3081 = *a2;
          if (v1958 && v3077 < v3078)
          {
            v3082 = *(int64x2_t *)v3079;
            v3083 = (int64x2_t *)(v3081 + 8 * (v3078 + (_DWORD)v3080 * v3077));
            v3084 = *(int64x2_t *)(v3079 + 32);
            v3085 = *(int64x2_t *)(v3079 + 48);
            v3086 = *(int64x2_t *)(v3079 + 64);
            v3087 = *(int64x2_t *)(v3079 + 80);
            v3089 = *(int8x16_t *)(v3079 + 96);
            v3088 = *(int8x16_t *)(v3079 + 112);
            v3090 = *(int8x16_t *)(v3079 + 128);
            v3091 = *(int8x16_t *)(v3079 + 144);
            v3092 = vextq_s8(v3090, v3090, 8uLL).u64[0];
            v3093 = vextq_s8(v3088, v3088, 8uLL).u64[0];
            v3094 = vextq_s8(v3089, v3089, 8uLL).u64[0];
            v3095 = *(int8x16_t *)(v3079 + 160);
            v3096 = *(int8x16_t *)(v3079 + 176);
            v3097 = vextq_s8(v3096, v3096, 8uLL).u64[0];
            v3098 = vextq_s8(v3095, v3095, 8uLL).u64[0];
            v3099 = vextq_s8(v3091, v3091, 8uLL).u64[0];
            v3101 = *(int8x16_t *)(v3079 + 192);
            v3100 = *(int8x16_t *)(v3079 + 208);
            v3103 = *(int8x16_t *)(v3079 + 224);
            v3102 = *(int8x16_t *)(v3079 + 240);
            v3104 = vextq_s8(v3103, v3103, 8uLL).u64[0];
            v3105 = vextq_s8(v3100, v3100, 8uLL).u64[0];
            v3106 = vextq_s8(v3101, v3101, 8uLL).u64[0];
            v3107 = *(int8x16_t *)(v3079 + 256);
            v3108 = *(int8x16_t *)(v3079 + 272);
            v3109 = vextq_s8(v3108, v3108, 8uLL).u64[0];
            v3110 = vextq_s8(v3107, v3107, 8uLL).u64[0];
            v3111 = vextq_s8(v3102, v3102, 8uLL).u64[0];
            v3083[1] = *(int64x2_t *)(v3079 + 16);
            v3083[2] = v3084;
            *v3083 = v3082;
            v3112 = (int64x2_t *)((char *)v3083 + 8 * v3080);
            v3112[1] = v3086;
            v3112[2] = v3087;
          }
          else
          {
            v3083 = (int64x2_t *)(v3081 + 8 * (v3077 + (_DWORD)v3080 * v3078));
            v3113 = *(int64x2_t *)(v3079 + 16);
            v3114 = *(int64x2_t *)(v3079 + 64);
            v3115 = *(int64x2_t *)(v3079 + 80);
            v3117 = *(int64x2_t *)(v3079 + 32);
            v3116 = *(int64x2_t *)(v3079 + 48);
            v3118 = *(int64x2_t *)(v3079 + 96);
            v3119 = *(int64x2_t *)(v3079 + 112);
            v3120 = *(int64x2_t *)(v3079 + 128);
            v3121 = *(int64x2_t *)(v3079 + 192);
            v3122 = *(int64x2_t *)(v3079 + 208);
            v3123 = *(int64x2_t *)(v3079 + 224);
            v3124 = vzip1q_s64(*(int64x2_t *)v3079, v3116);
            v3125 = vzip1q_s64(v3118, *(int64x2_t *)(v3079 + 144));
            v3126 = vzip1q_s64(v3121, *(int64x2_t *)(v3079 + 240));
            v3127.i64[0] = vdupq_laneq_s64(v3118, 1).u64[0];
            v3127.i64[1] = *(_QWORD *)(v3079 + 152);
            v3085 = vzip2q_s64(*(int64x2_t *)v3079, v3116);
            v3128.i64[0] = vdupq_laneq_s64(v3121, 1).u64[0];
            v3128.i64[1] = *(_QWORD *)(v3079 + 248);
            v3089 = (int8x16_t)vzip1q_s64(v3113, v3114);
            v3088 = (int8x16_t)vzip1q_s64(v3119, *(int64x2_t *)(v3079 + 160));
            v3090 = (int8x16_t)vzip1q_s64(v3122, *(int64x2_t *)(v3079 + 256));
            v3092 = vextq_s8(v3090, v3090, 8uLL).u64[0];
            v3093 = vextq_s8(v3088, v3088, 8uLL).u64[0];
            v3094 = vextq_s8(v3089, v3089, 8uLL).u64[0];
            v3091 = (int8x16_t)vzip2q_s64(v3113, v3114);
            v3095.i64[0] = vdupq_laneq_s64(v3119, 1).u64[0];
            v3095.i64[1] = *(_QWORD *)(v3079 + 168);
            v3096.i64[0] = vdupq_laneq_s64(v3122, 1).u64[0];
            v3096.i64[1] = *(_QWORD *)(v3079 + 264);
            v3099 = vextq_s8(v3091, v3091, 8uLL).u64[0];
            v3097 = vextq_s8(v3096, v3096, 8uLL).u64[0];
            v3098 = vextq_s8(v3095, v3095, 8uLL).u64[0];
            v3101 = (int8x16_t)vzip1q_s64(v3117, v3115);
            v3100 = (int8x16_t)vzip1q_s64(v3120, *(int64x2_t *)(v3079 + 176));
            v3103 = (int8x16_t)vzip1q_s64(v3123, *(int64x2_t *)(v3079 + 272));
            v3104 = vextq_s8(v3103, v3103, 8uLL).u64[0];
            v3105 = vextq_s8(v3100, v3100, 8uLL).u64[0];
            v3106 = vextq_s8(v3101, v3101, 8uLL).u64[0];
            v3102 = (int8x16_t)vzip2q_s64(v3117, v3115);
            v3107.i64[0] = vdupq_laneq_s64(v3120, 1).u64[0];
            v3107.i64[1] = *(_QWORD *)(v3079 + 184);
            v3108.i64[0] = vdupq_laneq_s64(v3123, 1).u64[0];
            v3108.i64[1] = *(_QWORD *)(v3079 + 280);
            v3111 = vextq_s8(v3102, v3102, 8uLL).u64[0];
            v3109 = vextq_s8(v3108, v3108, 8uLL).u64[0];
            v3110 = vextq_s8(v3107, v3107, 8uLL).u64[0];
            v3083[1] = v3125;
            v3083[2] = v3126;
            *v3083 = v3124;
            v3112 = (int64x2_t *)((char *)v3083 + 8 * v3080);
            v3112[1] = v3127;
            v3112[2] = v3128;
          }
          *v3112 = v3085;
          v3089.i64[1] = v3094;
          v3088.i64[1] = v3093;
          v3129 = (int8x16_t *)&v3083[v3080];
          *v3129 = v3089;
          v3129[1] = v3088;
          v3090.i64[1] = v3092;
          v3129[2] = v3090;
          v3130 = (int8x16_t *)((char *)v3083 + 24 * v3080);
          v3096.i64[1] = v3097;
          v3095.i64[1] = v3098;
          v3091.i64[1] = v3099;
          v3130[1] = v3095;
          v3130[2] = v3096;
          *v3130 = v3091;
          v3131 = (int8x16_t *)&v3083[2 * v3080];
          v3103.i64[1] = v3104;
          v3100.i64[1] = v3105;
          v3101.i64[1] = v3106;
          v3131[1] = v3100;
          v3131[2] = v3103;
          *v3131 = v3101;
          v3132 = (int8x16_t *)((char *)v3083 + 40 * v3080);
          v3108.i64[1] = v3109;
          v3107.i64[1] = v3110;
          v3132[1] = v3107;
          v3132[2] = v3108;
          v3102.i64[1] = v3111;
          v3133 = v3072 + 1;
          *v3132 = v3102;
          while (v3133 != v3075)
          {
            ++v3074;
            v3134 = *v3133++;
            v3076 = v3134;
            if (v3134 != -1)
            {
              v3072 = v3133 - 1;
              goto LABEL_1566;
            }
          }
          v3067 = *(_DWORD *)(result + 300);
        }
      }
      ++v3068;
      ++v3069;
    }
    while (v3068 < v3067);
    v1958 = *a5;
  }
  v3138 = *(_DWORD *)(result + 1740);
  if (v3138)
  {
    v3139 = 0;
    v3140 = a4[3];
    do
    {
      v3141 = *(_QWORD *)(result + 1816);
      v3142 = *(_DWORD *)(result + 1840) * v3139;
      v3143 = (uint64_t *)(v3141 + 8 * v3142);
      v3144 = *(_DWORD *)(result + 1736);
      if (v3144 && *v3143 == -1)
      {
        v3145 = 0;
        v3224 = 8 * (v3144 + v3142) - 8 * v3142 - 8;
        v3225 = v3141 + 8 * v3142;
        while (v3224)
        {
          v3143 = (uint64_t *)(v3225 + 8);
          ++v3145;
          v3226 = *(_QWORD *)(v3225 + 8);
          v3224 -= 8;
          v3225 += 8;
          if (v3226 != -1)
            goto LABEL_1586;
        }
      }
      else
      {
        v3145 = 0;
LABEL_1586:
        v3146 = (uint64_t *)(v3141 + 8 * (v3142 + v3144));
        if (v3143 != v3146)
        {
          v3147 = *v3143;
LABEL_1588:
          v3148 = *v3140;
          v3149 = *(_DWORD *)(a3[6] + 4 * v3145);
          v3150 = *(_QWORD *)(result + 1744) + 8 * v3147;
          v3151 = *((unsigned int *)a2 + 4);
          v3152 = *a2;
          if (v1958 && v3148 < v3149)
          {
            v3153 = *(int64x2_t *)v3150;
            v3154 = (int64x2_t *)(v3152 + 8 * (v3149 + (_DWORD)v3151 * v3148));
            v3155 = *(int64x2_t *)(v3150 + 32);
            v3156 = *(_OWORD *)(v3150 + 48);
            v3157 = *(_OWORD *)(v3150 + 64);
            v3158 = *(_OWORD *)(v3150 + 80);
            v3159 = *(int64x2_t *)(v3150 + 96);
            v3160 = *(int64x2_t *)(v3150 + 112);
            v3161 = *(int64x2_t *)(v3150 + 128);
            v3162 = *(_OWORD *)(v3150 + 144);
            v3163 = *(_OWORD *)(v3150 + 160);
            v3164 = *(_OWORD *)(v3150 + 176);
            v3165 = *(int64x2_t *)(v3150 + 192);
            v3166 = *(int64x2_t *)(v3150 + 208);
            v3167 = *(int64x2_t *)(v3150 + 224);
            v3168 = *(_OWORD *)(v3150 + 240);
            v3169 = *(_OWORD *)(v3150 + 256);
            v3170 = *(_OWORD *)(v3150 + 272);
            v3171 = *(int64x2_t *)(v3150 + 288);
            v3172 = *(int64x2_t *)(v3150 + 304);
            v3173 = *(int64x2_t *)(v3150 + 320);
            v3174 = *(_OWORD *)(v3150 + 336);
            v3175 = *(_OWORD *)(v3150 + 352);
            v3176 = *(_OWORD *)(v3150 + 368);
            v3177 = *(int64x2_t *)(v3150 + 384);
            v3178 = *(int64x2_t *)(v3150 + 400);
            v3179 = *(int64x2_t *)(v3150 + 416);
            v3154[1] = *(int64x2_t *)(v3150 + 16);
            v3154[2] = v3155;
            *v3154 = v3153;
            v3180 = &v3154->i8[8 * v3151];
            *((_OWORD *)v3180 + 1) = v3157;
            *((_OWORD *)v3180 + 2) = v3158;
            *(_OWORD *)v3180 = v3156;
            v3181 = &v3154[v3151];
            v3181[1] = v3160;
            v3181[2] = v3161;
            *v3181 = v3159;
            v3182 = &v3154->i8[24 * v3151];
            *((_OWORD *)v3182 + 1) = v3163;
            *((_OWORD *)v3182 + 2) = v3164;
            *(_OWORD *)v3182 = v3162;
            v3183 = &v3154[2 * v3151];
            v3183[1] = v3166;
            v3183[2] = v3167;
            *v3183 = v3165;
            v3184 = &v3154->i8[40 * v3151];
            *((_OWORD *)v3184 + 1) = v3169;
            *((_OWORD *)v3184 + 2) = v3170;
            *(_OWORD *)v3184 = v3168;
            v3185 = &v3154[3 * v3151];
            v3185[1] = v3172;
            v3185[2] = v3173;
            *v3185 = v3171;
            v3186 = &v3154->i8[56 * v3151];
            *((_OWORD *)v3186 + 1) = v3175;
            *((_OWORD *)v3186 + 2) = v3176;
            *(_OWORD *)v3186 = v3174;
            v3187 = &v3154[4 * v3151];
            v3187[1] = v3178;
            v3187[2] = v3179;
            *v3187 = v3177;
          }
          else
          {
            v3188 = *(int64x2_t *)(v3150 + 16);
            v3189 = (int64x2_t *)(v3152 + 8 * (v3148 + (_DWORD)v3151 * v3149));
            v3191 = *(int64x2_t *)(v3150 + 64);
            v3190 = *(int64x2_t *)(v3150 + 80);
            v3192 = *(int64x2_t *)(v3150 + 32);
            v3193 = *(int64x2_t *)(v3150 + 48);
            v3195 = *(int64x2_t *)(v3150 + 96);
            v3194 = *(int64x2_t *)(v3150 + 112);
            v3197 = *(int64x2_t *)(v3150 + 160);
            v3196 = *(int64x2_t *)(v3150 + 176);
            v3198 = *(int64x2_t *)(v3150 + 128);
            v3199 = *(int64x2_t *)(v3150 + 144);
            v3201 = *(int64x2_t *)(v3150 + 192);
            v3200 = *(int64x2_t *)(v3150 + 208);
            v3203 = *(int64x2_t *)(v3150 + 256);
            v3202 = *(int64x2_t *)(v3150 + 272);
            v3204 = *(int64x2_t *)(v3150 + 224);
            v3205 = *(int64x2_t *)(v3150 + 240);
            v3207 = *(int64x2_t *)(v3150 + 288);
            v3206 = *(int64x2_t *)(v3150 + 304);
            v3209 = *(int64x2_t *)(v3150 + 352);
            v3208 = *(int64x2_t *)(v3150 + 368);
            v3211 = *(int64x2_t *)(v3150 + 320);
            v3210 = *(int64x2_t *)(v3150 + 336);
            v3213 = *(_OWORD *)(v3150 + 400);
            v3212 = *(_OWORD *)(v3150 + 416);
            v3214 = *(_OWORD *)(v3150 + 384);
            v3215 = vzip1q_s64(*(int64x2_t *)v3150, v3193);
            v3216 = vzip2q_s64(*(int64x2_t *)v3150, v3193);
            v3189[2] = vzip1q_s64(v3201, v3205);
            v3189[3] = vzip1q_s64(v3207, v3210);
            v3189[4].i64[0] = v3214;
            *v3189 = v3215;
            v3189[1] = vzip1q_s64(v3195, v3199);
            v3217 = (int64x2_t *)((char *)v3189 + 8 * v3151);
            v3217[2] = vzip2q_s64(v3201, v3205);
            v3217[3] = vzip2q_s64(v3207, v3210);
            *v3217 = v3216;
            v3217[1] = vzip2q_s64(v3195, v3199);
            v3217[4].i64[0] = *((_QWORD *)&v3214 + 1);
            v3218 = &v3189[v3151];
            v3218[4].i64[0] = v3213;
            v3218[2] = vzip1q_s64(v3200, v3203);
            v3218[3] = vzip1q_s64(v3206, v3209);
            *v3218 = vzip1q_s64(v3188, v3191);
            v3218[1] = vzip1q_s64(v3194, v3197);
            v3219 = (int64x2_t *)((char *)v3189 + 24 * v3151);
            v3219[4].i64[0] = *((_QWORD *)&v3213 + 1);
            v3219[2] = vzip2q_s64(v3200, v3203);
            v3219[3] = vzip2q_s64(v3206, v3209);
            *v3219 = vzip2q_s64(v3188, v3191);
            v3219[1] = vzip2q_s64(v3194, v3197);
            v3220 = &v3189[2 * v3151];
            v3220[4].i64[0] = v3212;
            v3220[2] = vzip1q_s64(v3204, v3202);
            v3220[3] = vzip1q_s64(v3211, v3208);
            *v3220 = vzip1q_s64(v3192, v3190);
            v3220[1] = vzip1q_s64(v3198, v3196);
            v3221 = (int64x2_t *)((char *)v3189 + 40 * v3151);
            v3221[4].i64[0] = *((_QWORD *)&v3212 + 1);
            v3221[2] = vzip2q_s64(v3204, v3202);
            v3221[3] = vzip2q_s64(v3211, v3208);
            *v3221 = vzip2q_s64(v3192, v3190);
            v3221[1] = vzip2q_s64(v3198, v3196);
          }
          v3222 = v3143 + 1;
          while (v3222 != v3146)
          {
            ++v3145;
            v3223 = *v3222++;
            v3147 = v3223;
            if (v3223 != -1)
            {
              v3143 = v3222 - 1;
              goto LABEL_1588;
            }
          }
          v3138 = *(_DWORD *)(result + 1740);
        }
      }
      ++v3139;
      ++v3140;
    }
    while (v3139 < v3138);
    v1958 = *a5;
  }
  v3227 = *(_DWORD *)(result + 3180);
  if (v3227)
  {
    v3228 = 0;
    v3229 = a4[6];
    do
    {
      v3230 = *(_QWORD *)(result + 3256);
      v3231 = *(_DWORD *)(result + 3280) * v3228;
      v3232 = (uint64_t *)(v3230 + 8 * v3231);
      v3233 = *(_DWORD *)(result + 3176);
      if (v3233 && *v3232 == -1)
      {
        v3234 = 0;
        v3295 = 8 * (v3233 + v3231) - 8 * v3231 - 8;
        v3296 = v3230 + 8 * v3231;
        while (v3295)
        {
          v3232 = (uint64_t *)(v3296 + 8);
          ++v3234;
          v3297 = *(_QWORD *)(v3296 + 8);
          v3295 -= 8;
          v3296 += 8;
          if (v3297 != -1)
            goto LABEL_1608;
        }
      }
      else
      {
        v3234 = 0;
LABEL_1608:
        v3235 = (uint64_t *)(v3230 + 8 * (v3231 + v3233));
        if (v3232 != v3235)
        {
          v3236 = *v3232;
LABEL_1610:
          v3237 = *v3229;
          v3238 = *(_DWORD *)(a3[6] + 4 * v3234);
          v3239 = *(_QWORD *)(result + 3184) + 8 * v3236;
          v3240 = *((unsigned int *)a2 + 4);
          v3241 = *a2;
          if (v1958 && v3237 < v3238)
          {
            v3242 = *(int64x2_t *)v3239;
            v3243 = (int64x2_t *)(v3241 + 8 * (v3238 + (_DWORD)v3240 * v3237));
            v3244 = *(int64x2_t *)(v3239 + 32);
            v3245 = *(int64x2_t *)(v3239 + 48);
            v3246 = *(int64x2_t *)(v3239 + 64);
            v3247 = *(int64x2_t *)(v3239 + 80);
            v3249 = *(int8x16_t *)(v3239 + 96);
            v3248 = *(int8x16_t *)(v3239 + 112);
            v3250 = *(int8x16_t *)(v3239 + 128);
            v3251 = *(int8x16_t *)(v3239 + 144);
            v3252 = vextq_s8(v3250, v3250, 8uLL).u64[0];
            v3253 = vextq_s8(v3248, v3248, 8uLL).u64[0];
            v3254 = vextq_s8(v3249, v3249, 8uLL).u64[0];
            v3255 = *(int8x16_t *)(v3239 + 160);
            v3256 = *(int8x16_t *)(v3239 + 176);
            v3257 = vextq_s8(v3256, v3256, 8uLL).u64[0];
            v3258 = vextq_s8(v3255, v3255, 8uLL).u64[0];
            v3259 = vextq_s8(v3251, v3251, 8uLL).u64[0];
            v3261 = *(int8x16_t *)(v3239 + 192);
            v3260 = *(int8x16_t *)(v3239 + 208);
            v3263 = *(int8x16_t *)(v3239 + 224);
            v3262 = *(int8x16_t *)(v3239 + 240);
            v3264 = vextq_s8(v3263, v3263, 8uLL).u64[0];
            v3265 = vextq_s8(v3260, v3260, 8uLL).u64[0];
            v3266 = vextq_s8(v3261, v3261, 8uLL).u64[0];
            v3267 = *(int8x16_t *)(v3239 + 256);
            v3268 = *(int8x16_t *)(v3239 + 272);
            v3269 = vextq_s8(v3268, v3268, 8uLL).u64[0];
            v3270 = vextq_s8(v3267, v3267, 8uLL).u64[0];
            v3271 = vextq_s8(v3262, v3262, 8uLL).u64[0];
            v3243[1] = *(int64x2_t *)(v3239 + 16);
            v3243[2] = v3244;
            *v3243 = v3242;
            v3272 = (int64x2_t *)((char *)v3243 + 8 * v3240);
            v3272[1] = v3246;
            v3272[2] = v3247;
          }
          else
          {
            v3243 = (int64x2_t *)(v3241 + 8 * (v3237 + (_DWORD)v3240 * v3238));
            v3273 = *(int64x2_t *)(v3239 + 16);
            v3274 = *(int64x2_t *)(v3239 + 64);
            v3275 = *(int64x2_t *)(v3239 + 80);
            v3277 = *(int64x2_t *)(v3239 + 32);
            v3276 = *(int64x2_t *)(v3239 + 48);
            v3278 = *(int64x2_t *)(v3239 + 96);
            v3279 = *(int64x2_t *)(v3239 + 112);
            v3280 = *(int64x2_t *)(v3239 + 128);
            v3281 = *(int64x2_t *)(v3239 + 192);
            v3282 = *(int64x2_t *)(v3239 + 208);
            v3283 = *(int64x2_t *)(v3239 + 224);
            v3284 = vzip1q_s64(*(int64x2_t *)v3239, v3276);
            v3285 = vzip1q_s64(v3278, *(int64x2_t *)(v3239 + 144));
            v3286 = vzip1q_s64(v3281, *(int64x2_t *)(v3239 + 240));
            v3287.i64[0] = vdupq_laneq_s64(v3278, 1).u64[0];
            v3287.i64[1] = *(_QWORD *)(v3239 + 152);
            v3245 = vzip2q_s64(*(int64x2_t *)v3239, v3276);
            v3288.i64[0] = vdupq_laneq_s64(v3281, 1).u64[0];
            v3288.i64[1] = *(_QWORD *)(v3239 + 248);
            v3249 = (int8x16_t)vzip1q_s64(v3273, v3274);
            v3248 = (int8x16_t)vzip1q_s64(v3279, *(int64x2_t *)(v3239 + 160));
            v3250 = (int8x16_t)vzip1q_s64(v3282, *(int64x2_t *)(v3239 + 256));
            v3252 = vextq_s8(v3250, v3250, 8uLL).u64[0];
            v3253 = vextq_s8(v3248, v3248, 8uLL).u64[0];
            v3254 = vextq_s8(v3249, v3249, 8uLL).u64[0];
            v3251 = (int8x16_t)vzip2q_s64(v3273, v3274);
            v3255.i64[0] = vdupq_laneq_s64(v3279, 1).u64[0];
            v3255.i64[1] = *(_QWORD *)(v3239 + 168);
            v3256.i64[0] = vdupq_laneq_s64(v3282, 1).u64[0];
            v3256.i64[1] = *(_QWORD *)(v3239 + 264);
            v3259 = vextq_s8(v3251, v3251, 8uLL).u64[0];
            v3257 = vextq_s8(v3256, v3256, 8uLL).u64[0];
            v3258 = vextq_s8(v3255, v3255, 8uLL).u64[0];
            v3261 = (int8x16_t)vzip1q_s64(v3277, v3275);
            v3260 = (int8x16_t)vzip1q_s64(v3280, *(int64x2_t *)(v3239 + 176));
            v3263 = (int8x16_t)vzip1q_s64(v3283, *(int64x2_t *)(v3239 + 272));
            v3264 = vextq_s8(v3263, v3263, 8uLL).u64[0];
            v3265 = vextq_s8(v3260, v3260, 8uLL).u64[0];
            v3266 = vextq_s8(v3261, v3261, 8uLL).u64[0];
            v3262 = (int8x16_t)vzip2q_s64(v3277, v3275);
            v3267.i64[0] = vdupq_laneq_s64(v3280, 1).u64[0];
            v3267.i64[1] = *(_QWORD *)(v3239 + 184);
            v3268.i64[0] = vdupq_laneq_s64(v3283, 1).u64[0];
            v3268.i64[1] = *(_QWORD *)(v3239 + 280);
            v3271 = vextq_s8(v3262, v3262, 8uLL).u64[0];
            v3269 = vextq_s8(v3268, v3268, 8uLL).u64[0];
            v3270 = vextq_s8(v3267, v3267, 8uLL).u64[0];
            v3243[1] = v3285;
            v3243[2] = v3286;
            *v3243 = v3284;
            v3272 = (int64x2_t *)((char *)v3243 + 8 * v3240);
            v3272[1] = v3287;
            v3272[2] = v3288;
          }
          *v3272 = v3245;
          v3249.i64[1] = v3254;
          v3248.i64[1] = v3253;
          v3289 = (int8x16_t *)&v3243[v3240];
          *v3289 = v3249;
          v3289[1] = v3248;
          v3250.i64[1] = v3252;
          v3289[2] = v3250;
          v3290 = (int8x16_t *)((char *)v3243 + 24 * v3240);
          v3256.i64[1] = v3257;
          v3255.i64[1] = v3258;
          v3251.i64[1] = v3259;
          v3290[1] = v3255;
          v3290[2] = v3256;
          *v3290 = v3251;
          v3291 = (int8x16_t *)&v3243[2 * v3240];
          v3263.i64[1] = v3264;
          v3260.i64[1] = v3265;
          v3261.i64[1] = v3266;
          v3291[1] = v3260;
          v3291[2] = v3263;
          *v3291 = v3261;
          v3292 = (int8x16_t *)((char *)v3243 + 40 * v3240);
          v3268.i64[1] = v3269;
          v3267.i64[1] = v3270;
          v3292[1] = v3267;
          v3292[2] = v3268;
          v3262.i64[1] = v3271;
          v3293 = v3232 + 1;
          *v3292 = v3262;
          while (v3293 != v3235)
          {
            ++v3234;
            v3294 = *v3293++;
            v3236 = v3294;
            if (v3294 != -1)
            {
              v3232 = v3293 - 1;
              goto LABEL_1610;
            }
          }
          v3227 = *(_DWORD *)(result + 3180);
        }
      }
      ++v3228;
      ++v3229;
    }
    while (v3228 < v3227);
    v1958 = *a5;
  }
  v3298 = *(_DWORD *)(result + 4620);
  if (v3298)
  {
    v3299 = 0;
    v3300 = a4[9];
    do
    {
      v3301 = *(_QWORD *)(result + 4696);
      v3302 = *(_DWORD *)(result + 4720) * v3299;
      v3303 = (uint64_t *)(v3301 + 8 * v3302);
      v3304 = *(_DWORD *)(result + 4616);
      if (v3304 && *v3303 == -1)
      {
        v3305 = 0;
        v3366 = 8 * (v3304 + v3302) - 8 * v3302 - 8;
        v3367 = v3301 + 8 * v3302;
        while (v3366)
        {
          v3303 = (uint64_t *)(v3367 + 8);
          ++v3305;
          v3368 = *(_QWORD *)(v3367 + 8);
          v3366 -= 8;
          v3367 += 8;
          if (v3368 != -1)
            goto LABEL_1630;
        }
      }
      else
      {
        v3305 = 0;
LABEL_1630:
        v3306 = (uint64_t *)(v3301 + 8 * (v3302 + v3304));
        if (v3303 != v3306)
        {
          v3307 = *v3303;
LABEL_1632:
          v3308 = *v3300;
          v3309 = *(_DWORD *)(a3[6] + 4 * v3305);
          v3310 = *(_QWORD *)(result + 4624) + 8 * v3307;
          v3311 = *((unsigned int *)a2 + 4);
          v3312 = *a2;
          if (v1958 && v3308 < v3309)
          {
            v3313 = *(int64x2_t *)v3310;
            v3314 = (int64x2_t *)(v3312 + 8 * (v3309 + (_DWORD)v3311 * v3308));
            v3315 = *(int64x2_t *)(v3310 + 32);
            v3316 = *(int64x2_t *)(v3310 + 48);
            v3317 = *(int64x2_t *)(v3310 + 64);
            v3318 = *(int64x2_t *)(v3310 + 80);
            v3320 = *(int8x16_t *)(v3310 + 96);
            v3319 = *(int8x16_t *)(v3310 + 112);
            v3321 = *(int8x16_t *)(v3310 + 128);
            v3322 = *(int8x16_t *)(v3310 + 144);
            v3323 = vextq_s8(v3321, v3321, 8uLL).u64[0];
            v3324 = vextq_s8(v3319, v3319, 8uLL).u64[0];
            v3325 = vextq_s8(v3320, v3320, 8uLL).u64[0];
            v3326 = *(int8x16_t *)(v3310 + 160);
            v3327 = *(int8x16_t *)(v3310 + 176);
            v3328 = vextq_s8(v3327, v3327, 8uLL).u64[0];
            v3329 = vextq_s8(v3326, v3326, 8uLL).u64[0];
            v3330 = vextq_s8(v3322, v3322, 8uLL).u64[0];
            v3332 = *(int8x16_t *)(v3310 + 192);
            v3331 = *(int8x16_t *)(v3310 + 208);
            v3334 = *(int8x16_t *)(v3310 + 224);
            v3333 = *(int8x16_t *)(v3310 + 240);
            v3335 = vextq_s8(v3334, v3334, 8uLL).u64[0];
            v3336 = vextq_s8(v3331, v3331, 8uLL).u64[0];
            v3337 = vextq_s8(v3332, v3332, 8uLL).u64[0];
            v3338 = *(int8x16_t *)(v3310 + 256);
            v3339 = *(int8x16_t *)(v3310 + 272);
            v3340 = vextq_s8(v3339, v3339, 8uLL).u64[0];
            v3341 = vextq_s8(v3338, v3338, 8uLL).u64[0];
            v3342 = vextq_s8(v3333, v3333, 8uLL).u64[0];
            v3314[1] = *(int64x2_t *)(v3310 + 16);
            v3314[2] = v3315;
            *v3314 = v3313;
            v3343 = (int64x2_t *)((char *)v3314 + 8 * v3311);
            v3343[1] = v3317;
            v3343[2] = v3318;
          }
          else
          {
            v3314 = (int64x2_t *)(v3312 + 8 * (v3308 + (_DWORD)v3311 * v3309));
            v3344 = *(int64x2_t *)(v3310 + 16);
            v3345 = *(int64x2_t *)(v3310 + 64);
            v3346 = *(int64x2_t *)(v3310 + 80);
            v3348 = *(int64x2_t *)(v3310 + 32);
            v3347 = *(int64x2_t *)(v3310 + 48);
            v3349 = *(int64x2_t *)(v3310 + 96);
            v3350 = *(int64x2_t *)(v3310 + 112);
            v3351 = *(int64x2_t *)(v3310 + 128);
            v3352 = *(int64x2_t *)(v3310 + 192);
            v3353 = *(int64x2_t *)(v3310 + 208);
            v3354 = *(int64x2_t *)(v3310 + 224);
            v3355 = vzip1q_s64(*(int64x2_t *)v3310, v3347);
            v3356 = vzip1q_s64(v3349, *(int64x2_t *)(v3310 + 144));
            v3357 = vzip1q_s64(v3352, *(int64x2_t *)(v3310 + 240));
            v3358.i64[0] = vdupq_laneq_s64(v3349, 1).u64[0];
            v3358.i64[1] = *(_QWORD *)(v3310 + 152);
            v3316 = vzip2q_s64(*(int64x2_t *)v3310, v3347);
            v3359.i64[0] = vdupq_laneq_s64(v3352, 1).u64[0];
            v3359.i64[1] = *(_QWORD *)(v3310 + 248);
            v3320 = (int8x16_t)vzip1q_s64(v3344, v3345);
            v3319 = (int8x16_t)vzip1q_s64(v3350, *(int64x2_t *)(v3310 + 160));
            v3321 = (int8x16_t)vzip1q_s64(v3353, *(int64x2_t *)(v3310 + 256));
            v3323 = vextq_s8(v3321, v3321, 8uLL).u64[0];
            v3324 = vextq_s8(v3319, v3319, 8uLL).u64[0];
            v3325 = vextq_s8(v3320, v3320, 8uLL).u64[0];
            v3322 = (int8x16_t)vzip2q_s64(v3344, v3345);
            v3326.i64[0] = vdupq_laneq_s64(v3350, 1).u64[0];
            v3326.i64[1] = *(_QWORD *)(v3310 + 168);
            v3327.i64[0] = vdupq_laneq_s64(v3353, 1).u64[0];
            v3327.i64[1] = *(_QWORD *)(v3310 + 264);
            v3330 = vextq_s8(v3322, v3322, 8uLL).u64[0];
            v3328 = vextq_s8(v3327, v3327, 8uLL).u64[0];
            v3329 = vextq_s8(v3326, v3326, 8uLL).u64[0];
            v3332 = (int8x16_t)vzip1q_s64(v3348, v3346);
            v3331 = (int8x16_t)vzip1q_s64(v3351, *(int64x2_t *)(v3310 + 176));
            v3334 = (int8x16_t)vzip1q_s64(v3354, *(int64x2_t *)(v3310 + 272));
            v3335 = vextq_s8(v3334, v3334, 8uLL).u64[0];
            v3336 = vextq_s8(v3331, v3331, 8uLL).u64[0];
            v3337 = vextq_s8(v3332, v3332, 8uLL).u64[0];
            v3333 = (int8x16_t)vzip2q_s64(v3348, v3346);
            v3338.i64[0] = vdupq_laneq_s64(v3351, 1).u64[0];
            v3338.i64[1] = *(_QWORD *)(v3310 + 184);
            v3339.i64[0] = vdupq_laneq_s64(v3354, 1).u64[0];
            v3339.i64[1] = *(_QWORD *)(v3310 + 280);
            v3342 = vextq_s8(v3333, v3333, 8uLL).u64[0];
            v3340 = vextq_s8(v3339, v3339, 8uLL).u64[0];
            v3341 = vextq_s8(v3338, v3338, 8uLL).u64[0];
            v3314[1] = v3356;
            v3314[2] = v3357;
            *v3314 = v3355;
            v3343 = (int64x2_t *)((char *)v3314 + 8 * v3311);
            v3343[1] = v3358;
            v3343[2] = v3359;
          }
          *v3343 = v3316;
          v3320.i64[1] = v3325;
          v3319.i64[1] = v3324;
          v3360 = (int8x16_t *)&v3314[v3311];
          *v3360 = v3320;
          v3360[1] = v3319;
          v3321.i64[1] = v3323;
          v3360[2] = v3321;
          v3361 = (int8x16_t *)((char *)v3314 + 24 * v3311);
          v3327.i64[1] = v3328;
          v3326.i64[1] = v3329;
          v3322.i64[1] = v3330;
          v3361[1] = v3326;
          v3361[2] = v3327;
          *v3361 = v3322;
          v3362 = (int8x16_t *)&v3314[2 * v3311];
          v3334.i64[1] = v3335;
          v3331.i64[1] = v3336;
          v3332.i64[1] = v3337;
          v3362[1] = v3331;
          v3362[2] = v3334;
          *v3362 = v3332;
          v3363 = (int8x16_t *)((char *)v3314 + 40 * v3311);
          v3339.i64[1] = v3340;
          v3338.i64[1] = v3341;
          v3363[1] = v3338;
          v3363[2] = v3339;
          v3333.i64[1] = v3342;
          v3364 = v3303 + 1;
          *v3363 = v3333;
          while (v3364 != v3306)
          {
            ++v3305;
            v3365 = *v3364++;
            v3307 = v3365;
            if (v3365 != -1)
            {
              v3303 = v3364 - 1;
              goto LABEL_1632;
            }
          }
          v3298 = *(_DWORD *)(result + 4620);
        }
      }
      ++v3299;
      ++v3300;
    }
    while (v3299 < v3298);
    v1958 = *a5;
  }
  v3369 = *(_DWORD *)(result + 6060);
  if (v3369)
  {
    v3370 = 0;
    v3371 = a4[12];
    do
    {
      v3372 = *(_QWORD *)(result + 6136);
      v3373 = *(_DWORD *)(result + 6160) * v3370;
      v3374 = (uint64_t *)(v3372 + 8 * v3373);
      v3375 = *(_DWORD *)(result + 6056);
      if (v3375 && *v3374 == -1)
      {
        v3376 = 0;
        v3413 = 8 * (v3375 + v3373) - 8 * v3373 - 8;
        v3414 = v3372 + 8 * v3373;
        while (v3413)
        {
          v3374 = (uint64_t *)(v3414 + 8);
          ++v3376;
          v3415 = *(_QWORD *)(v3414 + 8);
          v3413 -= 8;
          v3414 += 8;
          if (v3415 != -1)
            goto LABEL_1652;
        }
      }
      else
      {
        v3376 = 0;
LABEL_1652:
        v3377 = (uint64_t *)(v3372 + 8 * (v3373 + v3375));
        if (v3374 != v3377)
        {
          v3378 = *v3374;
LABEL_1654:
          v3379 = *v3371;
          v3380 = *(_DWORD *)(a3[6] + 4 * v3376);
          v3381 = *(_QWORD *)(result + 6064) + 8 * v3378;
          v3382 = *((unsigned int *)a2 + 4);
          v3383 = *a2;
          if (v1958 && v3379 < v3380)
          {
            v3384 = *(int64x2_t *)v3381;
            v3385 = (int64x2_t *)(v3383 + 8 * (v3380 + (_DWORD)v3382 * v3379));
            v3386 = *(int64x2_t *)(v3381 + 32);
            v3387 = *(_OWORD *)(v3381 + 48);
            v3388 = *(_OWORD *)(v3381 + 64);
            v3389 = *(_OWORD *)(v3381 + 80);
            v3390 = *(int64x2_t *)(v3381 + 96);
            v3391 = *(int64x2_t *)(v3381 + 112);
            v3392 = *(int64x2_t *)(v3381 + 128);
            v3385[1] = *(int64x2_t *)(v3381 + 16);
            v3385[2] = v3386;
            *v3385 = v3384;
            v3393 = &v3385->i8[8 * v3382];
            *((_OWORD *)v3393 + 1) = v3388;
            *((_OWORD *)v3393 + 2) = v3389;
            *(_OWORD *)v3393 = v3387;
            v3394 = &v3385[v3382];
            v3394[1] = v3391;
            v3394[2] = v3392;
            *v3394 = v3390;
          }
          else
          {
            v3395 = *(int64x2_t *)(v3381 + 16);
            v3396 = (int64x2_t *)(v3383 + 8 * (v3379 + (_DWORD)v3382 * v3380));
            v3398 = *(int64x2_t *)(v3381 + 64);
            v3397 = *(int64x2_t *)(v3381 + 80);
            v3399 = *(int64x2_t *)(v3381 + 32);
            v3400 = *(int64x2_t *)(v3381 + 48);
            v3402 = *(_OWORD *)(v3381 + 112);
            v3401 = *(_OWORD *)(v3381 + 128);
            v3403 = *(_OWORD *)(v3381 + 96);
            v3404 = vzip1q_s64(*(int64x2_t *)v3381, v3400);
            v3405 = vzip2q_s64(*(int64x2_t *)v3381, v3400);
            v3396[1].i64[0] = v3403;
            *v3396 = v3404;
            v3406 = (int64x2_t *)((char *)v3396 + 8 * v3382);
            *v3406 = v3405;
            v3406[1].i64[0] = *((_QWORD *)&v3403 + 1);
            v3407 = &v3396[v3382];
            v3407[1].i64[0] = v3402;
            *v3407 = vzip1q_s64(v3395, v3398);
            v3408 = (int64x2_t *)((char *)v3396 + 24 * v3382);
            v3408[1].i64[0] = *((_QWORD *)&v3402 + 1);
            *v3408 = vzip2q_s64(v3395, v3398);
            v3409 = &v3396[2 * v3382];
            v3409[1].i64[0] = v3401;
            *v3409 = vzip1q_s64(v3399, v3397);
            v3410 = (int64x2_t *)((char *)v3396 + 40 * v3382);
            v3410[1].i64[0] = *((_QWORD *)&v3401 + 1);
            *v3410 = vzip2q_s64(v3399, v3397);
          }
          v3411 = v3374 + 1;
          while (v3411 != v3377)
          {
            ++v3376;
            v3412 = *v3411++;
            v3378 = v3412;
            if (v3412 != -1)
            {
              v3374 = v3411 - 1;
              goto LABEL_1654;
            }
          }
          v3369 = *(_DWORD *)(result + 6060);
        }
      }
      ++v3370;
      ++v3371;
    }
    while (v3370 < v3369);
    v1958 = *a5;
  }
  v3416 = *(_DWORD *)(result + 7500);
  if (v3416)
  {
    v3417 = 0;
    v3418 = a4[15];
    do
    {
      v3419 = *(_QWORD *)(result + 7576);
      v3420 = *(_DWORD *)(result + 7600) * v3417;
      v3421 = (uint64_t *)(v3419 + 8 * v3420);
      v3422 = *(_DWORD *)(result + 7496);
      if (v3422 && *v3421 == -1)
      {
        v3423 = 0;
        v3441 = 8 * (v3422 + v3420) - 8 * v3420 - 8;
        v3442 = v3419 + 8 * v3420;
        while (v3441)
        {
          v3421 = (uint64_t *)(v3442 + 8);
          ++v3423;
          v3443 = *(_QWORD *)(v3442 + 8);
          v3441 -= 8;
          v3442 += 8;
          if (v3443 != -1)
            goto LABEL_1674;
        }
      }
      else
      {
        v3423 = 0;
LABEL_1674:
        v3424 = (uint64_t *)(v3419 + 8 * (v3420 + v3422));
        if (v3421 != v3424)
        {
          v3425 = *v3421;
LABEL_1676:
          v3426 = *v3418;
          v3427 = *(_DWORD *)(a3[6] + 4 * v3423);
          v3428 = (int8x16_t *)(*(_QWORD *)(result + 7504) + 8 * v3425);
          v3429 = *((unsigned int *)a2 + 4);
          v3430 = *a2;
          v3432 = v3428[1];
          v3431 = v3428[2];
          v3433 = *v3428;
          v3434 = vextq_s8(v3431, v3431, 8uLL).u64[0];
          v3435 = vextq_s8(v3432, v3432, 8uLL).u64[0];
          v3436 = vextq_s8(v3433, v3433, 8uLL).u64[0];
          if (v1958 && v3426 < v3427)
          {
            v3433.i64[1] = v3436;
            v3432.i64[1] = v3435;
            v3437 = (int8x16_t *)(v3430 + 8 * (v3427 + (_DWORD)v3429 * v3426));
            *v3437 = v3433;
            v3437[1] = v3432;
            v3431.i64[1] = v3434;
            v3437[2] = v3431;
          }
          else
          {
            v3438 = (_QWORD *)(v3430 + 8 * (v3426 + (_DWORD)v3429 * v3427));
            *v3438 = v3433.i64[0];
            v3438[v3429] = v3436;
            v3438[2 * v3429] = v3432.i64[0];
            v3438[3 * v3429] = v3435;
            v3438[4 * v3429] = v3431.i64[0];
            v3438[5 * v3429] = v3434;
          }
          v3439 = v3421 + 1;
          while (v3439 != v3424)
          {
            ++v3423;
            v3440 = *v3439++;
            v3425 = v3440;
            if (v3440 != -1)
            {
              v3421 = v3439 - 1;
              goto LABEL_1676;
            }
          }
          v3416 = *(_DWORD *)(result + 7500);
        }
      }
      ++v3417;
      ++v3418;
    }
    while (v3417 < v3416);
    v1958 = *a5;
  }
  v3444 = *(_DWORD *)(result + 8940);
  if (v3444)
  {
    v3445 = 0;
    v3446 = a4[18];
    do
    {
      v3447 = *(_QWORD *)(result + 9016);
      v3448 = *(_DWORD *)(result + 9040) * v3445;
      v3449 = (uint64_t *)(v3447 + 8 * v3448);
      v3450 = *(_DWORD *)(result + 8936);
      if (v3450 && *v3449 == -1)
      {
        v3451 = 0;
        v3488 = 8 * (v3450 + v3448) - 8 * v3448 - 8;
        v3489 = v3447 + 8 * v3448;
        while (v3488)
        {
          v3449 = (uint64_t *)(v3489 + 8);
          ++v3451;
          v3490 = *(_QWORD *)(v3489 + 8);
          v3488 -= 8;
          v3489 += 8;
          if (v3490 != -1)
            goto LABEL_1696;
        }
      }
      else
      {
        v3451 = 0;
LABEL_1696:
        v3452 = (uint64_t *)(v3447 + 8 * (v3448 + v3450));
        if (v3449 != v3452)
        {
          v3453 = *v3449;
LABEL_1698:
          v3454 = *v3446;
          v3455 = *(_DWORD *)(a3[6] + 4 * v3451);
          v3456 = *(_QWORD *)(result + 8944) + 8 * v3453;
          v3457 = *((unsigned int *)a2 + 4);
          v3458 = *a2;
          if (v1958 && v3454 < v3455)
          {
            v3459 = *(int64x2_t *)v3456;
            v3460 = (int64x2_t *)(v3458 + 8 * (v3455 + (_DWORD)v3457 * v3454));
            v3461 = *(int64x2_t *)(v3456 + 32);
            v3462 = *(_OWORD *)(v3456 + 48);
            v3463 = *(_OWORD *)(v3456 + 64);
            v3464 = *(_OWORD *)(v3456 + 80);
            v3465 = *(int64x2_t *)(v3456 + 96);
            v3466 = *(int64x2_t *)(v3456 + 112);
            v3467 = *(int64x2_t *)(v3456 + 128);
            v3460[1] = *(int64x2_t *)(v3456 + 16);
            v3460[2] = v3461;
            *v3460 = v3459;
            v3468 = &v3460->i8[8 * v3457];
            *((_OWORD *)v3468 + 1) = v3463;
            *((_OWORD *)v3468 + 2) = v3464;
            *(_OWORD *)v3468 = v3462;
            v3469 = &v3460[v3457];
            v3469[1] = v3466;
            v3469[2] = v3467;
            *v3469 = v3465;
          }
          else
          {
            v3470 = *(int64x2_t *)(v3456 + 16);
            v3471 = (int64x2_t *)(v3458 + 8 * (v3454 + (_DWORD)v3457 * v3455));
            v3473 = *(int64x2_t *)(v3456 + 64);
            v3472 = *(int64x2_t *)(v3456 + 80);
            v3474 = *(int64x2_t *)(v3456 + 32);
            v3475 = *(int64x2_t *)(v3456 + 48);
            v3477 = *(_OWORD *)(v3456 + 112);
            v3476 = *(_OWORD *)(v3456 + 128);
            v3478 = *(_OWORD *)(v3456 + 96);
            v3479 = vzip1q_s64(*(int64x2_t *)v3456, v3475);
            v3480 = vzip2q_s64(*(int64x2_t *)v3456, v3475);
            v3471[1].i64[0] = v3478;
            *v3471 = v3479;
            v3481 = (int64x2_t *)((char *)v3471 + 8 * v3457);
            *v3481 = v3480;
            v3481[1].i64[0] = *((_QWORD *)&v3478 + 1);
            v3482 = &v3471[v3457];
            v3482[1].i64[0] = v3477;
            *v3482 = vzip1q_s64(v3470, v3473);
            v3483 = (int64x2_t *)((char *)v3471 + 24 * v3457);
            v3483[1].i64[0] = *((_QWORD *)&v3477 + 1);
            *v3483 = vzip2q_s64(v3470, v3473);
            v3484 = &v3471[2 * v3457];
            v3484[1].i64[0] = v3476;
            *v3484 = vzip1q_s64(v3474, v3472);
            v3485 = (int64x2_t *)((char *)v3471 + 40 * v3457);
            v3485[1].i64[0] = *((_QWORD *)&v3476 + 1);
            *v3485 = vzip2q_s64(v3474, v3472);
          }
          v3486 = v3449 + 1;
          while (v3486 != v3452)
          {
            ++v3451;
            v3487 = *v3486++;
            v3453 = v3487;
            if (v3487 != -1)
            {
              v3449 = v3486 - 1;
              goto LABEL_1698;
            }
          }
          v3444 = *(_DWORD *)(result + 8940);
        }
      }
      ++v3445;
      ++v3446;
    }
    while (v3445 < v3444);
    v1958 = *a5;
  }
  v3491 = *(_DWORD *)(result + 10380);
  if (v3491)
  {
    v3492 = 0;
    v3493 = a4[21];
    do
    {
      v3494 = *(_QWORD *)(result + 10456);
      v3495 = *(_DWORD *)(result + 10480) * v3492;
      v3496 = (uint64_t *)(v3494 + 8 * v3495);
      v3497 = *(_DWORD *)(result + 10376);
      if (v3497 && *v3496 == -1)
      {
        v3498 = 0;
        v3541 = 8 * (v3497 + v3495) - 8 * v3495 - 8;
        v3542 = v3494 + 8 * v3495;
        while (v3541)
        {
          v3496 = (uint64_t *)(v3542 + 8);
          ++v3498;
          v3543 = *(_QWORD *)(v3542 + 8);
          v3541 -= 8;
          v3542 += 8;
          if (v3543 != -1)
            goto LABEL_1718;
        }
      }
      else
      {
        v3498 = 0;
LABEL_1718:
        v3499 = (uint64_t *)(v3494 + 8 * (v3495 + v3497));
        if (v3496 != v3499)
        {
          v3500 = *v3496;
LABEL_1720:
          v3501 = *v3493;
          v3502 = *(_DWORD *)(a3[6] + 4 * v3498);
          v3503 = *(_QWORD *)(result + 10384) + 8 * v3500;
          v3504 = *((unsigned int *)a2 + 4);
          v3505 = *a2;
          if (v1958 && v3501 < v3502)
          {
            v3506 = *(int64x2_t *)v3503;
            v3507 = (int64x2_t *)(v3505 + 8 * (v3502 + (_DWORD)v3504 * v3501));
            v3508 = *(int64x2_t *)(v3503 + 32);
            v3509 = *(_OWORD *)(v3503 + 48);
            v3510 = *(_OWORD *)(v3503 + 64);
            v3511 = *(_OWORD *)(v3503 + 80);
            v3512 = *(int64x2_t *)(v3503 + 96);
            v3513 = *(int64x2_t *)(v3503 + 112);
            v3514 = *(int64x2_t *)(v3503 + 128);
            v3515 = *(_OWORD *)(v3503 + 144);
            v3516 = *(_OWORD *)(v3503 + 160);
            v3517 = *(_OWORD *)(v3503 + 176);
            v3507[1] = *(int64x2_t *)(v3503 + 16);
            v3507[2] = v3508;
            *v3507 = v3506;
            v3518 = &v3507->i8[8 * v3504];
            *((_OWORD *)v3518 + 1) = v3510;
            *((_OWORD *)v3518 + 2) = v3511;
            *(_OWORD *)v3518 = v3509;
            v3519 = &v3507[v3504];
            v3519[1] = v3513;
            v3519[2] = v3514;
            *v3519 = v3512;
            v3520 = &v3507->i8[24 * v3504];
            *((_OWORD *)v3520 + 1) = v3516;
            *((_OWORD *)v3520 + 2) = v3517;
            *(_OWORD *)v3520 = v3515;
          }
          else
          {
            v3521 = *(int64x2_t *)(v3503 + 16);
            v3522 = (int64x2_t *)(v3505 + 8 * (v3501 + (_DWORD)v3504 * v3502));
            v3524 = *(int64x2_t *)(v3503 + 64);
            v3523 = *(int64x2_t *)(v3503 + 80);
            v3525 = *(int64x2_t *)(v3503 + 32);
            v3526 = *(int64x2_t *)(v3503 + 48);
            v3528 = *(int64x2_t *)(v3503 + 96);
            v3527 = *(int64x2_t *)(v3503 + 112);
            v3530 = *(int64x2_t *)(v3503 + 160);
            v3529 = *(int64x2_t *)(v3503 + 176);
            v3531 = *(int64x2_t *)(v3503 + 128);
            v3532 = *(int64x2_t *)(v3503 + 144);
            v3533 = vzip2q_s64(*(int64x2_t *)v3503, v3526);
            *v3522 = vzip1q_s64(*(int64x2_t *)v3503, v3526);
            v3522[1] = vzip1q_s64(v3528, v3532);
            v3534 = (int64x2_t *)((char *)v3522 + 8 * v3504);
            *v3534 = v3533;
            v3534[1] = vzip2q_s64(v3528, v3532);
            v3535 = &v3522[v3504];
            *v3535 = vzip1q_s64(v3521, v3524);
            v3535[1] = vzip1q_s64(v3527, v3530);
            v3536 = (int64x2_t *)((char *)v3522 + 24 * v3504);
            *v3536 = vzip2q_s64(v3521, v3524);
            v3536[1] = vzip2q_s64(v3527, v3530);
            v3537 = &v3522[2 * v3504];
            *v3537 = vzip1q_s64(v3525, v3523);
            v3537[1] = vzip1q_s64(v3531, v3529);
            v3538 = (int64x2_t *)((char *)v3522 + 40 * v3504);
            *v3538 = vzip2q_s64(v3525, v3523);
            v3538[1] = vzip2q_s64(v3531, v3529);
          }
          v3539 = v3496 + 1;
          while (v3539 != v3499)
          {
            ++v3498;
            v3540 = *v3539++;
            v3500 = v3540;
            if (v3540 != -1)
            {
              v3496 = v3539 - 1;
              goto LABEL_1720;
            }
          }
          v3491 = *(_DWORD *)(result + 10380);
        }
      }
      ++v3492;
      ++v3493;
    }
    while (v3492 < v3491);
    v1958 = *a5;
  }
  v3544 = *(_DWORD *)(result + 11820);
  if (v3544)
  {
    v3545 = 0;
    v3546 = a4[24];
    do
    {
      v3547 = *(_QWORD *)(result + 11896);
      v3548 = *(_DWORD *)(result + 11920) * v3545;
      v3549 = (uint64_t *)(v3547 + 8 * v3548);
      v3550 = *(_DWORD *)(result + 11816);
      if (v3550 && *v3549 == -1)
      {
        v3551 = 0;
        v3594 = 8 * (v3550 + v3548) - 8 * v3548 - 8;
        v3595 = v3547 + 8 * v3548;
        while (v3594)
        {
          v3549 = (uint64_t *)(v3595 + 8);
          ++v3551;
          v3596 = *(_QWORD *)(v3595 + 8);
          v3594 -= 8;
          v3595 += 8;
          if (v3596 != -1)
            goto LABEL_1740;
        }
      }
      else
      {
        v3551 = 0;
LABEL_1740:
        v3552 = (uint64_t *)(v3547 + 8 * (v3548 + v3550));
        if (v3549 != v3552)
        {
          v3553 = *v3549;
LABEL_1742:
          v3554 = *v3546;
          v3555 = *(_DWORD *)(a3[6] + 4 * v3551);
          v3556 = *(_QWORD *)(result + 11824) + 8 * v3553;
          v3557 = *((unsigned int *)a2 + 4);
          v3558 = *a2;
          if (v1958 && v3554 < v3555)
          {
            v3559 = *(int64x2_t *)v3556;
            v3560 = (int64x2_t *)(v3558 + 8 * (v3555 + (_DWORD)v3557 * v3554));
            v3561 = *(int64x2_t *)(v3556 + 32);
            v3562 = *(_OWORD *)(v3556 + 48);
            v3563 = *(_OWORD *)(v3556 + 64);
            v3564 = *(_OWORD *)(v3556 + 80);
            v3565 = *(int64x2_t *)(v3556 + 96);
            v3566 = *(int64x2_t *)(v3556 + 112);
            v3567 = *(int64x2_t *)(v3556 + 128);
            v3568 = *(_OWORD *)(v3556 + 144);
            v3569 = *(_OWORD *)(v3556 + 160);
            v3570 = *(_OWORD *)(v3556 + 176);
            v3560[1] = *(int64x2_t *)(v3556 + 16);
            v3560[2] = v3561;
            *v3560 = v3559;
            v3571 = &v3560->i8[8 * v3557];
            *((_OWORD *)v3571 + 1) = v3563;
            *((_OWORD *)v3571 + 2) = v3564;
            *(_OWORD *)v3571 = v3562;
            v3572 = &v3560[v3557];
            v3572[1] = v3566;
            v3572[2] = v3567;
            *v3572 = v3565;
            v3573 = &v3560->i8[24 * v3557];
            *((_OWORD *)v3573 + 1) = v3569;
            *((_OWORD *)v3573 + 2) = v3570;
            *(_OWORD *)v3573 = v3568;
          }
          else
          {
            v3574 = *(int64x2_t *)(v3556 + 16);
            v3575 = (int64x2_t *)(v3558 + 8 * (v3554 + (_DWORD)v3557 * v3555));
            v3577 = *(int64x2_t *)(v3556 + 64);
            v3576 = *(int64x2_t *)(v3556 + 80);
            v3578 = *(int64x2_t *)(v3556 + 32);
            v3579 = *(int64x2_t *)(v3556 + 48);
            v3581 = *(int64x2_t *)(v3556 + 96);
            v3580 = *(int64x2_t *)(v3556 + 112);
            v3583 = *(int64x2_t *)(v3556 + 160);
            v3582 = *(int64x2_t *)(v3556 + 176);
            v3584 = *(int64x2_t *)(v3556 + 128);
            v3585 = *(int64x2_t *)(v3556 + 144);
            v3586 = vzip2q_s64(*(int64x2_t *)v3556, v3579);
            *v3575 = vzip1q_s64(*(int64x2_t *)v3556, v3579);
            v3575[1] = vzip1q_s64(v3581, v3585);
            v3587 = (int64x2_t *)((char *)v3575 + 8 * v3557);
            *v3587 = v3586;
            v3587[1] = vzip2q_s64(v3581, v3585);
            v3588 = &v3575[v3557];
            *v3588 = vzip1q_s64(v3574, v3577);
            v3588[1] = vzip1q_s64(v3580, v3583);
            v3589 = (int64x2_t *)((char *)v3575 + 24 * v3557);
            *v3589 = vzip2q_s64(v3574, v3577);
            v3589[1] = vzip2q_s64(v3580, v3583);
            v3590 = &v3575[2 * v3557];
            *v3590 = vzip1q_s64(v3578, v3576);
            v3590[1] = vzip1q_s64(v3584, v3582);
            v3591 = (int64x2_t *)((char *)v3575 + 40 * v3557);
            *v3591 = vzip2q_s64(v3578, v3576);
            v3591[1] = vzip2q_s64(v3584, v3582);
          }
          v3592 = v3549 + 1;
          while (v3592 != v3552)
          {
            ++v3551;
            v3593 = *v3592++;
            v3553 = v3593;
            if (v3593 != -1)
            {
              v3549 = v3592 - 1;
              goto LABEL_1742;
            }
          }
          v3544 = *(_DWORD *)(result + 11820);
        }
      }
      ++v3545;
      ++v3546;
    }
    while (v3545 < v3544);
    v1958 = *a5;
  }
  v3597 = *(_DWORD *)(result + 13260);
  if (v3597)
  {
    v3598 = 0;
    v3599 = a4[27];
    do
    {
      v3600 = *(_QWORD *)(result + 13336);
      v3601 = *(_DWORD *)(result + 13360) * v3598;
      v3602 = (uint64_t *)(v3600 + 8 * v3601);
      v3603 = *(_DWORD *)(result + 13256);
      if (v3603 && *v3602 == -1)
      {
        v3604 = 0;
        v3641 = 8 * (v3603 + v3601) - 8 * v3601 - 8;
        v3642 = v3600 + 8 * v3601;
        while (v3641)
        {
          v3602 = (uint64_t *)(v3642 + 8);
          ++v3604;
          v3643 = *(_QWORD *)(v3642 + 8);
          v3641 -= 8;
          v3642 += 8;
          if (v3643 != -1)
            goto LABEL_1762;
        }
      }
      else
      {
        v3604 = 0;
LABEL_1762:
        v3605 = (uint64_t *)(v3600 + 8 * (v3601 + v3603));
        if (v3602 != v3605)
        {
          v3606 = *v3602;
LABEL_1764:
          v3607 = *v3599;
          v3608 = *(_DWORD *)(a3[6] + 4 * v3604);
          v3609 = *(_QWORD *)(result + 13264) + 8 * v3606;
          v3610 = *((unsigned int *)a2 + 4);
          v3611 = *a2;
          if (v1958 && v3607 < v3608)
          {
            v3612 = *(int64x2_t *)v3609;
            v3613 = (int64x2_t *)(v3611 + 8 * (v3608 + (_DWORD)v3610 * v3607));
            v3614 = *(int64x2_t *)(v3609 + 32);
            v3615 = *(_OWORD *)(v3609 + 48);
            v3616 = *(_OWORD *)(v3609 + 64);
            v3617 = *(_OWORD *)(v3609 + 80);
            v3618 = *(int64x2_t *)(v3609 + 96);
            v3619 = *(int64x2_t *)(v3609 + 112);
            v3620 = *(int64x2_t *)(v3609 + 128);
            v3613[1] = *(int64x2_t *)(v3609 + 16);
            v3613[2] = v3614;
            *v3613 = v3612;
            v3621 = &v3613->i8[8 * v3610];
            *((_OWORD *)v3621 + 1) = v3616;
            *((_OWORD *)v3621 + 2) = v3617;
            *(_OWORD *)v3621 = v3615;
            v3622 = &v3613[v3610];
            v3622[1] = v3619;
            v3622[2] = v3620;
            *v3622 = v3618;
          }
          else
          {
            v3623 = *(int64x2_t *)(v3609 + 16);
            v3624 = (int64x2_t *)(v3611 + 8 * (v3607 + (_DWORD)v3610 * v3608));
            v3626 = *(int64x2_t *)(v3609 + 64);
            v3625 = *(int64x2_t *)(v3609 + 80);
            v3627 = *(int64x2_t *)(v3609 + 32);
            v3628 = *(int64x2_t *)(v3609 + 48);
            v3630 = *(_OWORD *)(v3609 + 112);
            v3629 = *(_OWORD *)(v3609 + 128);
            v3631 = *(_OWORD *)(v3609 + 96);
            v3632 = vzip1q_s64(*(int64x2_t *)v3609, v3628);
            v3633 = vzip2q_s64(*(int64x2_t *)v3609, v3628);
            v3624[1].i64[0] = v3631;
            *v3624 = v3632;
            v3634 = (int64x2_t *)((char *)v3624 + 8 * v3610);
            *v3634 = v3633;
            v3634[1].i64[0] = *((_QWORD *)&v3631 + 1);
            v3635 = &v3624[v3610];
            v3635[1].i64[0] = v3630;
            *v3635 = vzip1q_s64(v3623, v3626);
            v3636 = (int64x2_t *)((char *)v3624 + 24 * v3610);
            v3636[1].i64[0] = *((_QWORD *)&v3630 + 1);
            *v3636 = vzip2q_s64(v3623, v3626);
            v3637 = &v3624[2 * v3610];
            v3637[1].i64[0] = v3629;
            *v3637 = vzip1q_s64(v3627, v3625);
            v3638 = (int64x2_t *)((char *)v3624 + 40 * v3610);
            v3638[1].i64[0] = *((_QWORD *)&v3629 + 1);
            *v3638 = vzip2q_s64(v3627, v3625);
          }
          v3639 = v3602 + 1;
          while (v3639 != v3605)
          {
            ++v3604;
            v3640 = *v3639++;
            v3606 = v3640;
            if (v3640 != -1)
            {
              v3602 = v3639 - 1;
              goto LABEL_1764;
            }
          }
          v3597 = *(_DWORD *)(result + 13260);
        }
      }
      ++v3598;
      ++v3599;
    }
    while (v3598 < v3597);
    v1958 = *a5;
  }
  v3644 = *(_DWORD *)(result + 156);
  if (v3644)
  {
    v3645 = 0;
    v3646 = *a4;
    do
    {
      v3647 = *(_QWORD *)(result + 232);
      v3648 = *(_DWORD *)(result + 256) * v3645;
      v3649 = (uint64_t *)(v3647 + 8 * v3648);
      v3650 = *(_DWORD *)(result + 152);
      if (v3650 && *v3649 == -1)
      {
        v3651 = 0;
        v3736 = 8 * (v3650 + v3648) - 8 * v3648 - 8;
        v3737 = v3647 + 8 * v3648;
        while (v3736)
        {
          v3649 = (uint64_t *)(v3737 + 8);
          ++v3651;
          v3738 = *(_QWORD *)(v3737 + 8);
          v3736 -= 8;
          v3737 += 8;
          if (v3738 != -1)
            goto LABEL_1784;
        }
      }
      else
      {
        v3651 = 0;
LABEL_1784:
        v3652 = (uint64_t *)(v3647 + 8 * (v3648 + v3650));
        if (v3649 != v3652)
        {
          v3653 = *v3649;
LABEL_1786:
          v3654 = *v3646;
          v3655 = *(_DWORD *)(a3[3] + 4 * v3651);
          v3656 = *(_QWORD *)(result + 160) + 8 * v3653;
          v3657 = *((unsigned int *)a2 + 4);
          v3658 = *a2;
          if (v1958 && v3654 < v3655)
          {
            v3659 = *(_QWORD *)(v3656 + 64);
            v3660 = v3658 + 8 * (v3655 + (_DWORD)v3657 * v3654);
            v3661 = *(_OWORD *)(v3656 + 48);
            v3662 = *(int64x2_t *)v3656;
            v3663 = *(_OWORD *)(v3656 + 16);
            v3664 = *(_OWORD *)(v3656 + 72);
            v3665 = *(_OWORD *)(v3656 + 88);
            v3666 = *(_OWORD *)(v3656 + 104);
            v3667 = *(_OWORD *)(v3656 + 120);
            v3668 = *(_QWORD *)(v3656 + 136);
            v3669 = *(_OWORD *)(v3656 + 144);
            v3670 = *(_OWORD *)(v3656 + 160);
            v3671 = *(_OWORD *)(v3656 + 176);
            v3672 = *(_OWORD *)(v3656 + 192);
            v3673 = *(_QWORD *)(v3656 + 208);
            v3674 = *(_OWORD *)(v3656 + 232);
            v3675 = *(_OWORD *)(v3656 + 248);
            v3676 = *(_OWORD *)(v3656 + 216);
            v3677 = *(_OWORD *)(v3656 + 264);
            v3678 = *(_QWORD *)(v3656 + 280);
            v3679 = *(_OWORD *)(v3656 + 288);
            v3680 = *(_OWORD *)(v3656 + 304);
            v3681 = *(_OWORD *)(v3656 + 320);
            v3682 = *(_OWORD *)(v3656 + 336);
            v3683 = *(_QWORD *)(v3656 + 352);
            v3684 = *(_OWORD *)(v3656 + 360);
            v3685 = *(_OWORD *)(v3656 + 376);
            v3686 = *(_OWORD *)(v3656 + 392);
            v3687 = *(_OWORD *)(v3656 + 408);
            v3688 = *(_QWORD *)(v3656 + 424);
            *(_OWORD *)(v3660 + 32) = *(_OWORD *)(v3656 + 32);
            *(_OWORD *)(v3660 + 48) = v3661;
            *(_QWORD *)(v3660 + 64) = v3659;
            *(int64x2_t *)v3660 = v3662;
            *(_OWORD *)(v3660 + 16) = v3663;
            v3689 = v3660 + 8 * v3657;
            *(_QWORD *)(v3689 + 64) = v3668;
            *(_OWORD *)(v3689 + 32) = v3666;
            *(_OWORD *)(v3689 + 48) = v3667;
            *(_OWORD *)v3689 = v3664;
            *(_OWORD *)(v3689 + 16) = v3665;
            v3690 = v3660 + 16 * v3657;
            *(_QWORD *)(v3690 + 64) = v3673;
            *(_OWORD *)(v3690 + 32) = v3671;
            *(_OWORD *)(v3690 + 48) = v3672;
            *(_OWORD *)v3690 = v3669;
            *(_OWORD *)(v3690 + 16) = v3670;
            v3691 = v3660 + 24 * v3657;
            *(_QWORD *)(v3691 + 64) = v3678;
            *(_OWORD *)(v3691 + 32) = v3675;
            *(_OWORD *)(v3691 + 48) = v3677;
            *(_OWORD *)v3691 = v3676;
            *(_OWORD *)(v3691 + 16) = v3674;
            v3692 = v3660 + 32 * v3657;
            *(_QWORD *)(v3692 + 64) = v3683;
            *(_OWORD *)(v3692 + 32) = v3681;
            *(_OWORD *)(v3692 + 48) = v3682;
            *(_OWORD *)v3692 = v3679;
            *(_OWORD *)(v3692 + 16) = v3680;
            v3693 = v3660 + 40 * v3657;
            *(_QWORD *)(v3693 + 64) = v3688;
            *(_OWORD *)(v3693 + 32) = v3686;
            *(_OWORD *)(v3693 + 48) = v3687;
            *(_OWORD *)v3693 = v3684;
            *(_OWORD *)(v3693 + 16) = v3685;
          }
          else
          {
            v3694.i64[0] = *(_QWORD *)(v3656 + 64);
            v3695 = (int64x2_t *)(v3658 + 8 * (v3654 + (_DWORD)v3657 * v3655));
            v3697 = *(int64x2_t *)(v3656 + 32);
            v3696 = *(int64x2_t *)(v3656 + 48);
            v3698 = *(int64x2_t *)(v3656 + 16);
            v3699 = *(int64x2_t *)(v3656 + 120);
            v3700 = *(int64x2_t *)(v3656 + 104);
            v3701 = *(int64x2_t *)(v3656 + 88);
            v3702 = *(int64x2_t *)(v3656 + 72);
            v3703.i64[0] = *(_QWORD *)(v3656 + 208);
            v3705 = *(int64x2_t *)(v3656 + 176);
            v3704 = *(int64x2_t *)(v3656 + 192);
            v3707 = *(int64x2_t *)(v3656 + 144);
            v3706 = *(int64x2_t *)(v3656 + 160);
            v3708 = *(int64x2_t *)(v3656 + 216);
            v3709 = *(int64x2_t *)(v3656 + 264);
            v3710 = *(int64x2_t *)(v3656 + 248);
            v3711 = *(int64x2_t *)(v3656 + 232);
            v3712.i64[0] = *(_QWORD *)(v3656 + 352);
            v3714 = *(int64x2_t *)(v3656 + 320);
            v3713 = *(int64x2_t *)(v3656 + 336);
            v3716 = *(int64x2_t *)(v3656 + 288);
            v3715 = *(int64x2_t *)(v3656 + 304);
            v3717 = *(int64x2_t *)(v3656 + 392);
            v3718 = *(int64x2_t *)(v3656 + 408);
            v3719 = *(int64x2_t *)(v3656 + 376);
            v3720 = vzip1q_s64(*(int64x2_t *)v3656, v3702);
            v3721 = vzip1q_s64(v3716, *(int64x2_t *)(v3656 + 360));
            v3722 = vzip1q_s64(v3707, v3708);
            v3723 = vzip2q_s64(*(int64x2_t *)v3656, v3702);
            v3724 = vzip2q_s64(v3707, v3708);
            v3725 = vzip2q_s64(v3716, *(int64x2_t *)(v3656 + 360));
            v3694.i64[1] = *(_QWORD *)(v3656 + 136);
            v3703.i64[1] = *(_QWORD *)(v3656 + 280);
            v3712.i64[1] = *(_QWORD *)(v3656 + 424);
            v3695[1] = v3722;
            v3695[2] = v3721;
            *v3695 = v3720;
            v3726 = (int64x2_t *)((char *)v3695 + 8 * v3657);
            v3726[1] = v3724;
            v3726[2] = v3725;
            *v3726 = v3723;
            v3727 = &v3695[v3657];
            v3727[1] = vzip1q_s64(v3706, v3711);
            v3727[2] = vzip1q_s64(v3715, v3719);
            *v3727 = vzip1q_s64(v3698, v3701);
            v3728 = (int64x2_t *)((char *)v3695 + 24 * v3657);
            v3728[1] = vzip2q_s64(v3706, v3711);
            v3728[2] = vzip2q_s64(v3715, v3719);
            *v3728 = vzip2q_s64(v3698, v3701);
            v3729 = &v3695[2 * v3657];
            v3729[1] = vzip1q_s64(v3705, v3710);
            v3729[2] = vzip1q_s64(v3714, v3717);
            *v3729 = vzip1q_s64(v3697, v3700);
            v3730 = (int64x2_t *)((char *)v3695 + 40 * v3657);
            v3730[1] = vzip2q_s64(v3705, v3710);
            v3730[2] = vzip2q_s64(v3714, v3717);
            *v3730 = vzip2q_s64(v3697, v3700);
            v3731 = &v3695[3 * v3657];
            v3731[1] = vzip1q_s64(v3704, v3709);
            v3731[2] = vzip1q_s64(v3713, v3718);
            *v3731 = vzip1q_s64(v3696, v3699);
            v3732 = (int64x2_t *)((char *)v3695 + 56 * v3657);
            v3732[1] = vzip2q_s64(v3704, v3709);
            v3732[2] = vzip2q_s64(v3713, v3718);
            *v3732 = vzip2q_s64(v3696, v3699);
            v3733 = &v3695[4 * v3657];
            v3733[1] = v3703;
            v3733[2] = v3712;
            *v3733 = v3694;
          }
          v3734 = v3649 + 1;
          while (v3734 != v3652)
          {
            ++v3651;
            v3735 = *v3734++;
            v3653 = v3735;
            if (v3735 != -1)
            {
              v3649 = v3734 - 1;
              goto LABEL_1786;
            }
          }
          v3644 = *(_DWORD *)(result + 156);
        }
      }
      ++v3645;
      ++v3646;
    }
    while (v3645 < v3644);
    v1958 = *a5;
  }
  v3739 = *(_DWORD *)(result + 1596);
  if (v3739)
  {
    v3740 = 0;
    v3741 = a4[3];
    do
    {
      v3742 = *(_QWORD *)(result + 1672);
      v3743 = *(_DWORD *)(result + 1696) * v3740;
      v3744 = (uint64_t *)(v3742 + 8 * v3743);
      v3745 = *(_DWORD *)(result + 1592);
      if (v3745 && *v3744 == -1)
      {
        v3746 = 0;
        v3875 = 8 * (v3745 + v3743) - 8 * v3743 - 8;
        v3876 = v3742 + 8 * v3743;
        while (v3875)
        {
          v3744 = (uint64_t *)(v3876 + 8);
          ++v3746;
          v3877 = *(_QWORD *)(v3876 + 8);
          v3875 -= 8;
          v3876 += 8;
          if (v3877 != -1)
            goto LABEL_1806;
        }
      }
      else
      {
        v3746 = 0;
LABEL_1806:
        v3747 = (uint64_t *)(v3742 + 8 * (v3743 + v3745));
        if (v3744 != v3747)
        {
          v3748 = *v3744;
LABEL_1808:
          v3749 = *v3741;
          v3750 = *(_DWORD *)(a3[3] + 4 * v3746);
          v3751 = *(_QWORD *)(result + 1600) + 8 * v3748;
          v3752 = *((unsigned int *)a2 + 4);
          v3753 = *a2;
          if (v1958 && v3749 < v3750)
          {
            v5044 = *(_QWORD *)(v3751 + 64);
            v3754 = v3753 + 8 * (v3750 + (_DWORD)v3752 * v3749);
            v3755 = *(_OWORD *)(v3751 + 32);
            v5037 = *(_OWORD *)(v3751 + 48);
            v5039 = *(int64x2_t *)v3751;
            v5047 = *(_OWORD *)(v3751 + 88);
            v5049 = *(int8x16_t *)(v3751 + 72);
            v5042 = *(_OWORD *)(v3751 + 104);
            v3756 = *(_OWORD *)(v3751 + 120);
            v3757 = *(_QWORD *)(v3751 + 136);
            v5028 = *(_QWORD *)(v3751 + 208);
            v3758 = *(int8x16_t *)(v3751 + 176);
            v3759 = *(int8x16_t *)(v3751 + 192);
            v3761 = *(int8x16_t *)(v3751 + 144);
            v3760 = *(int8x16_t *)(v3751 + 160);
            v5020 = *(_QWORD *)(v3751 + 280);
            v3762 = *(int8x16_t *)(v3751 + 248);
            v3763 = *(int8x16_t *)(v3751 + 232);
            v3764 = *(int8x16_t *)(v3751 + 216);
            v3765 = *(int8x16_t *)(v3751 + 264);
            v5022 = *(_QWORD *)(v3751 + 352);
            v3790 = *(int8x16_t *)(v3751 + 320);
            v3786 = *(int64x2_t *)(v3751 + 336);
            v3766 = *(int8x16_t *)(v3751 + 288);
            v3767 = *(int8x16_t *)(v3751 + 304);
            v5019 = *(_QWORD *)(v3751 + 424);
            v3768 = *(int8x16_t *)(v3751 + 392);
            v3795 = *(int8x16_t *)(v3751 + 408);
            v3769 = *(int8x16_t *)(v3751 + 360);
            v3770 = *(int8x16_t *)(v3751 + 376);
            v5024 = *(_QWORD *)(v3751 + 496);
            v3771 = *(int8x16_t *)(v3751 + 464);
            v3772 = *(int8x16_t *)(v3751 + 480);
            v3774 = *(int8x16_t *)(v3751 + 432);
            v3773 = *(int8x16_t *)(v3751 + 448);
            v5018 = *(_QWORD *)(v3751 + 568);
            v3799 = *(int8x16_t *)(v3751 + 536);
            v3775 = *(int8x16_t *)(v3751 + 552);
            v3776 = *(int8x16_t *)(v3751 + 504);
            v3797 = *(int8x16_t *)(v3751 + 520);
            v5030 = *(_QWORD *)(v3751 + 640);
            v3798 = *(int8x16_t *)(v3751 + 608);
            v3777 = *(int8x16_t *)(v3751 + 624);
            v3779 = *(int8x16_t *)(v3751 + 576);
            v3778 = *(int8x16_t *)(v3751 + 592);
            *(_OWORD *)(v3754 + 16) = *(_OWORD *)(v3751 + 16);
            *(_OWORD *)(v3754 + 32) = v3755;
            *(_OWORD *)(v3754 + 48) = v5037;
            *(_QWORD *)(v3754 + 64) = v5044;
            *(int64x2_t *)v3754 = v5039;
            v3780 = v3754 + 8 * v3752;
            *(_QWORD *)(v3780 + 64) = v3757;
            *(_OWORD *)(v3780 + 32) = v5042;
            *(_OWORD *)(v3780 + 48) = v3756;
            *(_OWORD *)(v3780 + 16) = v5047;
            *(int8x16_t *)v3780 = v5049;
            v5048 = v3759.i64[0];
            v5049.i64[0] = v3760.i64[0];
            v3781 = vextq_s8(v3759, v3759, 8uLL).u64[0];
            v5023 = v3758.i64[0];
            v3782 = vextq_s8(v3758, v3758, 8uLL).u64[0];
            v5000 = vextq_s8(v3760, v3760, 8uLL).u64[0];
            v5009 = v3761.i64[0];
            *(_QWORD *)&v3756 = vextq_s8(v3761, v3761, 8uLL).u64[0];
            v5043 = v3762.i64[0];
            v5045 = v3764.i64[0];
            v3783 = vextq_s8(v3762, v3762, 8uLL).u64[0];
            v5038 = v3763.i64[0];
            v5040 = v3767.i64[0];
            v3784 = vextq_s8(v3763, v3763, 8uLL).u64[0];
            v3760.i64[0] = vextq_s8(v3764, v3764, 8uLL).u64[0];
            v5021 = v3765.i64[0];
            v3764.i64[0] = vextq_s8(v3765, v3765, 8uLL).u64[0];
            v5012 = v3786.i64[0];
            v5013 = v3766.i64[0];
            v3785 = vextq_s8((int8x16_t)v3786, (int8x16_t)v3786, 8uLL).u64[0];
            v3786.i64[0] = v3790.i64[0];
            v3787 = vextq_s8(v3790, v3790, 8uLL).u64[0];
            v3788 = vextq_s8(v3767, v3767, 8uLL).u64[0];
            v3789 = vextq_s8(v3766, v3766, 8uLL).u64[0];
            v5026 = v3795.i64[0];
            v3766.i64[0] = vextq_s8(v3795, v3795, 8uLL).u64[0];
            v3790.i64[0] = v3768.i64[0];
            v3791 = vextq_s8(v3768, v3768, 8uLL).u64[0];
            v5010 = v3770.i64[0];
            v5011 = v3774.i64[0];
            v3792 = vextq_s8(v3770, v3770, 8uLL).u64[0];
            v5031 = v3777.i64[0];
            v5032 = v3769.i64[0];
            v3770.i64[0] = vextq_s8(v3769, v3769, 8uLL).u64[0];
            v5007 = v3771.i64[0];
            v5008 = v3772.i64[0];
            v3769.i64[0] = vextq_s8(v3772, v3772, 8uLL).u64[0];
            v3793 = v3760.i64[0];
            v5004 = vextq_s8(v3771, v3771, 8uLL).u64[0];
            v5005 = v3769.i64[0];
            v5006 = v3773.i64[0];
            v5003 = vextq_s8(v3773, v3773, 8uLL).u64[0];
            v5002 = vextq_s8(v3775, v3775, 8uLL).u64[0];
            v3794 = vextq_s8(v3799, v3799, 8uLL).u64[0];
            v3795.i64[0] = v3797.i64[0];
            v3796 = vextq_s8(v3797, v3797, 8uLL).u64[0];
            v3797.i64[0] = v3776.i64[0];
            v5001 = vextq_s8(v3776, v3776, 8uLL).u64[0];
            v5014 = vextq_s8(v3777, v3777, 8uLL).u64[0];
            v5034 = v3798.i64[0];
            v5035 = v3779.i64[0];
            v3760.i64[0] = vextq_s8(v3798, v3798, 8uLL).u64[0];
            v3798.i64[0] = v3799.i64[0];
            v3799.i64[0] = v3775.i64[0];
            v5015 = v3760.i64[0];
            v3800 = v3756;
            v3801 = v3764.i64[0];
            v5036 = v3778.i64[0];
            v5016 = vextq_s8(v3778, v3778, 8uLL).u64[0];
            v3778.i64[0] = vextq_s8(v3779, v3779, 8uLL).u64[0];
            v3802 = v3770.i64[0];
            v3803 = v3766.i64[0];
            v3804 = vextq_s8(v3774, v3774, 8uLL).u64[0];
            v5017 = v3778.i64[0];
          }
          else
          {
            v3805 = *(int64x2_t *)(v3751 + 32);
            v3806 = *(int64x2_t *)(v3751 + 48);
            v3807 = *(int64x2_t *)(v3751 + 16);
            v3808 = *(int64x2_t *)(v3751 + 120);
            v3809 = *(int64x2_t *)(v3751 + 104);
            v3810 = *(int64x2_t *)(v3751 + 88);
            v3811 = *(int64x2_t *)(v3751 + 72);
            v3813 = *(int64x2_t *)(v3751 + 176);
            v3812 = *(int64x2_t *)(v3751 + 192);
            v3814 = *(int64x2_t *)(v3751 + 144);
            v3815 = *(int64x2_t *)(v3751 + 160);
            v3817 = *(int64x2_t *)(v3751 + 320);
            v3816 = *(int64x2_t *)(v3751 + 336);
            v3819 = *(int64x2_t *)(v3751 + 288);
            v3818 = *(int64x2_t *)(v3751 + 304);
            v3820 = *(int64x2_t *)(v3751 + 448);
            v3786 = *(int64x2_t *)(v3751 + 464);
            *(_QWORD *)&v3821 = vdupq_laneq_s64(v3814, 1).u64[0];
            *((_QWORD *)&v3821 + 1) = *(_QWORD *)(v3751 + 224);
            v5046 = v3821;
            v3822 = *(int64x2_t *)(v3751 + 432);
            v5033 = vzip1q_s64(v3814, *(int64x2_t *)(v3751 + 216));
            *(_QWORD *)&v3821 = vdupq_laneq_s64(v3819, 1).u64[0];
            *((_QWORD *)&v3821 + 1) = *(_QWORD *)(v3751 + 368);
            v5025 = vzip1q_s64(v3822, *(int64x2_t *)(v3751 + 504));
            v5027 = vzip1q_s64(v3819, *(int64x2_t *)(v3751 + 360));
            *(_QWORD *)&v3823 = vdupq_laneq_s64(v3822, 1).u64[0];
            *((_QWORD *)&v3823 + 1) = *(_QWORD *)(v3751 + 512);
            v5029 = vzip1q_s64(*(int64x2_t *)v3751, v3811);
            v5041 = vzip2q_s64(*(int64x2_t *)v3751, v3811);
            v5049 = (int8x16_t)vzip1q_s64(v3815, *(int64x2_t *)(v3751 + 232));
            v3822.i64[0] = vdupq_laneq_s64(v3815, 1).u64[0];
            v3822.i64[1] = *(_QWORD *)(v3751 + 240);
            v3824 = (int8x16_t)vzip1q_s64(v3818, *(int64x2_t *)(v3751 + 376));
            v3825.i64[0] = vdupq_laneq_s64(v3818, 1).u64[0];
            v3825.i64[1] = *(_QWORD *)(v3751 + 384);
            v3826 = (int8x16_t)vzip1q_s64(v3807, v3810);
            v3827 = (int8x16_t)vzip2q_s64(v3807, v3810);
            v3828 = (int8x16_t)vzip1q_s64(v3820, *(int64x2_t *)(v3751 + 520));
            v3829.i64[0] = vdupq_laneq_s64(v3820, 1).u64[0];
            v3829.i64[1] = *(_QWORD *)(v3751 + 528);
            v3830 = (int8x16_t)vzip1q_s64(v3813, *(int64x2_t *)(v3751 + 248));
            v3814.i64[0] = vdupq_laneq_s64(v3813, 1).u64[0];
            v3814.i64[1] = *(_QWORD *)(v3751 + 256);
            v3831 = (int8x16_t)vzip1q_s64(v3805, v3809);
            v3790 = (int8x16_t)vzip2q_s64(v3805, v3809);
            v3832 = (int8x16_t)vzip1q_s64(v3817, *(int64x2_t *)(v3751 + 392));
            v3817.i64[0] = vdupq_laneq_s64(v3817, 1).u64[0];
            v3817.i64[1] = *(_QWORD *)(v3751 + 400);
            v3833 = (int8x16_t)vzip1q_s64(v3786, *(int64x2_t *)(v3751 + 536));
            v3834.i64[0] = vdupq_laneq_s64(v3786, 1).u64[0];
            v3834.i64[1] = *(_QWORD *)(v3751 + 544);
            v3835 = (int8x16_t)vzip1q_s64(v3806, v3808);
            v3836 = (int8x16_t)vzip2q_s64(v3806, v3808);
            v3837 = (int8x16_t)vzip1q_s64(v3812, *(int64x2_t *)(v3751 + 264));
            v3812.i64[0] = vdupq_laneq_s64(v3812, 1).u64[0];
            v3812.i64[1] = *(_QWORD *)(v3751 + 272);
            v3838 = (int8x16_t)vzip1q_s64(v3816, *(int64x2_t *)(v3751 + 408));
            v3798.i64[0] = vdupq_laneq_s64(v3816, 1).u64[0];
            v3798.i64[1] = *(_QWORD *)(v3751 + 416);
            v3839 = *(int64x2_t *)(v3751 + 480);
            v3840 = (int8x16_t)vzip1q_s64(v3839, *(int64x2_t *)(v3751 + 552));
            v3799.i64[0] = vdupq_laneq_s64(v3839, 1).u64[0];
            v3799.i64[1] = *(_QWORD *)(v3751 + 560);
            v3754 = v3753 + 8 * (v3749 + (_DWORD)v3752 * v3750);
            v5035 = *(_QWORD *)(v3751 + 64);
            v5017 = *(_QWORD *)(v3751 + 136);
            v5036 = *(_QWORD *)(v3751 + 208);
            v5016 = *(_QWORD *)(v3751 + 280);
            v5034 = *(_QWORD *)(v3751 + 352);
            v5015 = *(_QWORD *)(v3751 + 424);
            v5031 = *(_QWORD *)(v3751 + 496);
            v5014 = *(_QWORD *)(v3751 + 568);
            v5030 = *(_QWORD *)(v3751 + 640);
            v3795 = *(int8x16_t *)(v3751 + 608);
            v3841 = *(int8x16_t *)(v3751 + 624);
            v3797 = *(int8x16_t *)(v3751 + 576);
            v3842 = *(int8x16_t *)(v3751 + 592);
            *(int64x2_t *)(v3754 + 32) = v5027;
            *(int64x2_t *)(v3754 + 48) = v5025;
            *(int64x2_t *)v3754 = v5029;
            *(int64x2_t *)(v3754 + 16) = v5033;
            v3843 = v3754 + 8 * v3752;
            *(_QWORD *)(v3754 + 64) = v3797.i64[0];
            *(_QWORD *)(v3843 + 64) = v3797.i64[1];
            *(_OWORD *)(v3843 + 32) = v3821;
            *(_OWORD *)(v3843 + 48) = v3823;
            *(_OWORD *)(v3843 + 16) = v5046;
            *(int64x2_t *)v3843 = v5041;
            v5000 = vextq_s8(v5049, v5049, 8uLL).u64[0];
            v5009 = v3826.i64[0];
            v4999 = vextq_s8(v3826, v3826, 8uLL).u64[0];
            v5045 = v3827.i64[0];
            v5048 = v3828.i64[0];
            *(_QWORD *)&v3823 = vextq_s8(v3828, v3828, 8uLL).u64[0];
            v5023 = v3824.i64[0];
            v3828.i64[0] = vextq_s8(v3824, v3824, 8uLL).u64[0];
            *(_QWORD *)&v3821 = vextq_s8(v3827, v3827, 8uLL).u64[0];
            v3801 = vextq_s8(v3829, v3829, 8uLL).u64[0];
            v5040 = v3830.i64[0];
            v5043 = v3825.i64[0];
            v3826.i64[0] = vextq_s8(v3825, v3825, 8uLL).u64[0];
            v5038 = v3822.i64[0];
            v3784 = vextq_s8((int8x16_t)v3822, (int8x16_t)v3822, 8uLL).u64[0];
            v5026 = v3834.i64[0];
            v5028 = v3842.i64[0];
            v5020 = vextq_s8(v3842, v3842, 8uLL).u64[0];
            v5021 = v3829.i64[0];
            v3829.i64[0] = vextq_s8(v3830, v3830, 8uLL).u64[0];
            v5012 = v3833.i64[0];
            v5013 = v3831.i64[0];
            v3797.i64[0] = vextq_s8(v3831, v3831, 8uLL).u64[0];
            v3785 = vextq_s8(v3833, v3833, 8uLL).u64[0];
            v3786.i64[0] = v3832.i64[0];
            v5032 = v3790.i64[0];
            v3813.i64[0] = vextq_s8(v3790, v3790, 8uLL).u64[0];
            v3831.i64[0] = vextq_s8(v3834, v3834, 8uLL).u64[0];
            v3789 = v3797.i64[0];
            v3790.i64[0] = v3817.i64[0];
            v3791 = vextq_s8((int8x16_t)v3817, (int8x16_t)v3817, 8uLL).u64[0];
            v3803 = v3831.i64[0];
            v5010 = v3814.i64[0];
            v5011 = v3835.i64[0];
            v3831.i64[0] = vextq_s8((int8x16_t)v3814, (int8x16_t)v3814, 8uLL).u64[0];
            v3783 = v3826.i64[0];
            v5022 = v3795.i64[0];
            v5019 = vextq_s8(v3795, v3795, 8uLL).u64[0];
            v3804 = vextq_s8(v3835, v3835, 8uLL).u64[0];
            v3787 = vextq_s8(v3832, v3832, 8uLL).u64[0];
            v5007 = v3838.i64[0];
            v5008 = v3840.i64[0];
            v5005 = vextq_s8(v3840, v3840, 8uLL).u64[0];
            v5006 = v3837.i64[0];
            v3802 = v3813.i64[0];
            v5004 = vextq_s8(v3838, v3838, 8uLL).u64[0];
            v3792 = v3831.i64[0];
            v3781 = v3823;
            v3782 = v3828.i64[0];
            v5003 = vextq_s8(v3837, v3837, 8uLL).u64[0];
            v3788 = v3829.i64[0];
            v3797.i64[0] = v3836.i64[0];
            v5001 = vextq_s8(v3836, v3836, 8uLL).u64[0];
            v5002 = vextq_s8(v3799, v3799, 8uLL).u64[0];
            v3794 = vextq_s8(v3798, v3798, 8uLL).u64[0];
            v3796 = vextq_s8((int8x16_t)v3812, (int8x16_t)v3812, 8uLL).u64[0];
            v5024 = v3841.i64[0];
            v3832.i64[0] = vextq_s8(v3841, v3841, 8uLL).u64[0];
            v3793 = v3821;
            v5018 = v3832.i64[0];
            v3800 = v4999;
            v3795.i64[0] = v3812.i64[0];
          }
          *(_QWORD *)&v3844 = v5009;
          *((_QWORD *)&v3844 + 1) = v3800;
          *(_QWORD *)&v3845 = v5049.i64[0];
          *((_QWORD *)&v3845 + 1) = v5000;
          *(_QWORD *)&v3846 = v5023;
          *((_QWORD *)&v3846 + 1) = v3782;
          *(_QWORD *)&v3847 = v5045;
          *(_QWORD *)&v3848 = v5048;
          *((_QWORD *)&v3848 + 1) = v3781;
          *(_QWORD *)&v3849 = v5021;
          *((_QWORD *)&v3849 + 1) = v3801;
          *(_QWORD *)&v3850 = v5040;
          *(_QWORD *)&v3851 = v5043;
          *((_QWORD *)&v3851 + 1) = v3783;
          *(_QWORD *)&v3852 = v5038;
          *((_QWORD *)&v3852 + 1) = v3784;
          *((_QWORD *)&v3847 + 1) = v3793;
          *(_QWORD *)&v3854 = v5012;
          *(_QWORD *)&v3853 = v5013;
          *((_QWORD *)&v3854 + 1) = v3785;
          v3786.i64[1] = v3787;
          *((_QWORD *)&v3850 + 1) = v3788;
          *((_QWORD *)&v3853 + 1) = v3789;
          *(_QWORD *)&v3855 = v5026;
          *((_QWORD *)&v3855 + 1) = v3803;
          v3790.i64[1] = v3791;
          *(_QWORD *)&v3856 = v5010;
          *(_QWORD *)&v3857 = v5011;
          *((_QWORD *)&v3856 + 1) = v3792;
          *(_QWORD *)&v3858 = v5032;
          *((_QWORD *)&v3858 + 1) = v3802;
          *(_QWORD *)&v3859 = v5007;
          *(_QWORD *)&v3860 = v5008;
          *(_QWORD *)&v3861 = v5006;
          *((_QWORD *)&v3860 + 1) = v5005;
          *((_QWORD *)&v3859 + 1) = v5004;
          *((_QWORD *)&v3861 + 1) = v5003;
          *((_QWORD *)&v3857 + 1) = v3804;
          v3799.i64[1] = v5002;
          v3798.i64[1] = v3794;
          v3795.i64[1] = v3796;
          v3797.i64[1] = v5001;
          *(_QWORD *)&v3862 = v5031;
          *((_QWORD *)&v3862 + 1) = v5014;
          *(_QWORD *)&v3863 = v5034;
          *((_QWORD *)&v3863 + 1) = v5015;
          *(_QWORD *)&v3864 = v5036;
          *((_QWORD *)&v3864 + 1) = v5016;
          *(_QWORD *)&v3865 = v5035;
          *((_QWORD *)&v3865 + 1) = v5017;
          v3866 = v3754 + 16 * v3752;
          *(_OWORD *)v3866 = v3844;
          *(_OWORD *)(v3866 + 16) = v3845;
          *(_OWORD *)(v3866 + 32) = v3846;
          *(_OWORD *)(v3866 + 48) = v3848;
          *(_QWORD *)(v3866 + 64) = v5028;
          v3867 = v3754 + 24 * v3752;
          *(_QWORD *)(v3867 + 64) = v5020;
          *(_OWORD *)(v3867 + 32) = v3851;
          *(_OWORD *)(v3867 + 48) = v3849;
          *(_OWORD *)v3867 = v3847;
          *(_OWORD *)(v3867 + 16) = v3852;
          v3868 = v3754 + 32 * v3752;
          *(_QWORD *)(v3868 + 64) = v5022;
          *(int64x2_t *)(v3868 + 32) = v3786;
          *(_OWORD *)(v3868 + 48) = v3854;
          *(_OWORD *)v3868 = v3853;
          *(_OWORD *)(v3868 + 16) = v3850;
          v3869 = v3754 + 40 * v3752;
          *(_QWORD *)(v3869 + 64) = v5019;
          *(int8x16_t *)(v3869 + 32) = v3790;
          *(_OWORD *)(v3869 + 48) = v3855;
          *(_OWORD *)v3869 = v3858;
          *(_OWORD *)(v3869 + 16) = v3856;
          v3870 = v3754 + 48 * v3752;
          *(_QWORD *)(v3870 + 64) = v5024;
          *(_OWORD *)(v3870 + 32) = v3859;
          *(_OWORD *)(v3870 + 48) = v3860;
          *(_OWORD *)v3870 = v3857;
          *(_OWORD *)(v3870 + 16) = v3861;
          v3871 = (int8x16_t *)(v3754 + 56 * v3752);
          v3871[4].i64[0] = v5018;
          v3871[2] = v3798;
          v3871[3] = v3799;
          *v3871 = v3797;
          v3871[1] = v3795;
          v3872 = v3754 + (v3752 << 6);
          *(_QWORD *)(v3872 + 64) = v5030;
          *(_OWORD *)(v3872 + 32) = v3863;
          *(_OWORD *)(v3872 + 48) = v3862;
          v3873 = v3744 + 1;
          *(_OWORD *)v3872 = v3865;
          *(_OWORD *)(v3872 + 16) = v3864;
          while (v3873 != v3747)
          {
            ++v3746;
            v3874 = *v3873++;
            v3748 = v3874;
            if (v3874 != -1)
            {
              v3744 = v3873 - 1;
              goto LABEL_1808;
            }
          }
          v3739 = *(_DWORD *)(result + 1596);
        }
      }
      ++v3740;
      ++v3741;
    }
    while (v3740 < v3739);
    v1958 = *a5;
  }
  v3878 = *(_DWORD *)(result + 3036);
  if (v3878)
  {
    v3879 = 0;
    v3880 = a4[6];
    do
    {
      v3881 = *(_QWORD *)(result + 3112);
      v3882 = *(_DWORD *)(result + 3136) * v3879;
      v3883 = (uint64_t *)(v3881 + 8 * v3882);
      v3884 = *(_DWORD *)(result + 3032);
      if (v3884 && *v3883 == -1)
      {
        v3885 = 0;
        v3970 = 8 * (v3884 + v3882) - 8 * v3882 - 8;
        v3971 = v3881 + 8 * v3882;
        while (v3970)
        {
          v3883 = (uint64_t *)(v3971 + 8);
          ++v3885;
          v3972 = *(_QWORD *)(v3971 + 8);
          v3970 -= 8;
          v3971 += 8;
          if (v3972 != -1)
            goto LABEL_1828;
        }
      }
      else
      {
        v3885 = 0;
LABEL_1828:
        v3886 = (uint64_t *)(v3881 + 8 * (v3882 + v3884));
        if (v3883 != v3886)
        {
          v3887 = *v3883;
LABEL_1830:
          v3888 = *v3880;
          v3889 = *(_DWORD *)(a3[3] + 4 * v3885);
          v3890 = *(_QWORD *)(result + 3040) + 8 * v3887;
          v3891 = *((unsigned int *)a2 + 4);
          v3892 = *a2;
          if (v1958 && v3888 < v3889)
          {
            v3893 = *(_QWORD *)(v3890 + 64);
            v3894 = v3892 + 8 * (v3889 + (_DWORD)v3891 * v3888);
            v3895 = *(_OWORD *)(v3890 + 48);
            v3896 = *(int64x2_t *)v3890;
            v3897 = *(_OWORD *)(v3890 + 16);
            v3898 = *(_OWORD *)(v3890 + 72);
            v3899 = *(_OWORD *)(v3890 + 88);
            v3900 = *(_OWORD *)(v3890 + 104);
            v3901 = *(_OWORD *)(v3890 + 120);
            v3902 = *(_QWORD *)(v3890 + 136);
            v3903 = *(_OWORD *)(v3890 + 144);
            v3904 = *(_OWORD *)(v3890 + 160);
            v3905 = *(_OWORD *)(v3890 + 176);
            v3906 = *(_OWORD *)(v3890 + 192);
            v3907 = *(_QWORD *)(v3890 + 208);
            v3908 = *(_OWORD *)(v3890 + 232);
            v3909 = *(_OWORD *)(v3890 + 248);
            v3910 = *(_OWORD *)(v3890 + 216);
            v3911 = *(_OWORD *)(v3890 + 264);
            v3912 = *(_QWORD *)(v3890 + 280);
            v3913 = *(_OWORD *)(v3890 + 288);
            v3914 = *(_OWORD *)(v3890 + 304);
            v3915 = *(_OWORD *)(v3890 + 320);
            v3916 = *(_OWORD *)(v3890 + 336);
            v3917 = *(_QWORD *)(v3890 + 352);
            v3918 = *(_OWORD *)(v3890 + 360);
            v3919 = *(_OWORD *)(v3890 + 376);
            v3920 = *(_OWORD *)(v3890 + 392);
            v3921 = *(_OWORD *)(v3890 + 408);
            v3922 = *(_QWORD *)(v3890 + 424);
            *(_OWORD *)(v3894 + 32) = *(_OWORD *)(v3890 + 32);
            *(_OWORD *)(v3894 + 48) = v3895;
            *(_QWORD *)(v3894 + 64) = v3893;
            *(int64x2_t *)v3894 = v3896;
            *(_OWORD *)(v3894 + 16) = v3897;
            v3923 = v3894 + 8 * v3891;
            *(_QWORD *)(v3923 + 64) = v3902;
            *(_OWORD *)(v3923 + 32) = v3900;
            *(_OWORD *)(v3923 + 48) = v3901;
            *(_OWORD *)v3923 = v3898;
            *(_OWORD *)(v3923 + 16) = v3899;
            v3924 = v3894 + 16 * v3891;
            *(_QWORD *)(v3924 + 64) = v3907;
            *(_OWORD *)(v3924 + 32) = v3905;
            *(_OWORD *)(v3924 + 48) = v3906;
            *(_OWORD *)v3924 = v3903;
            *(_OWORD *)(v3924 + 16) = v3904;
            v3925 = v3894 + 24 * v3891;
            *(_QWORD *)(v3925 + 64) = v3912;
            *(_OWORD *)(v3925 + 32) = v3909;
            *(_OWORD *)(v3925 + 48) = v3911;
            *(_OWORD *)v3925 = v3910;
            *(_OWORD *)(v3925 + 16) = v3908;
            v3926 = v3894 + 32 * v3891;
            *(_QWORD *)(v3926 + 64) = v3917;
            *(_OWORD *)(v3926 + 32) = v3915;
            *(_OWORD *)(v3926 + 48) = v3916;
            *(_OWORD *)v3926 = v3913;
            *(_OWORD *)(v3926 + 16) = v3914;
            v3927 = v3894 + 40 * v3891;
            *(_QWORD *)(v3927 + 64) = v3922;
            *(_OWORD *)(v3927 + 32) = v3920;
            *(_OWORD *)(v3927 + 48) = v3921;
            *(_OWORD *)v3927 = v3918;
            *(_OWORD *)(v3927 + 16) = v3919;
          }
          else
          {
            v3928.i64[0] = *(_QWORD *)(v3890 + 64);
            v3929 = (int64x2_t *)(v3892 + 8 * (v3888 + (_DWORD)v3891 * v3889));
            v3931 = *(int64x2_t *)(v3890 + 32);
            v3930 = *(int64x2_t *)(v3890 + 48);
            v3932 = *(int64x2_t *)(v3890 + 16);
            v3933 = *(int64x2_t *)(v3890 + 120);
            v3934 = *(int64x2_t *)(v3890 + 104);
            v3935 = *(int64x2_t *)(v3890 + 88);
            v3936 = *(int64x2_t *)(v3890 + 72);
            v3937.i64[0] = *(_QWORD *)(v3890 + 208);
            v3939 = *(int64x2_t *)(v3890 + 176);
            v3938 = *(int64x2_t *)(v3890 + 192);
            v3941 = *(int64x2_t *)(v3890 + 144);
            v3940 = *(int64x2_t *)(v3890 + 160);
            v3942 = *(int64x2_t *)(v3890 + 216);
            v3943 = *(int64x2_t *)(v3890 + 264);
            v3944 = *(int64x2_t *)(v3890 + 248);
            v3945 = *(int64x2_t *)(v3890 + 232);
            v3946.i64[0] = *(_QWORD *)(v3890 + 352);
            v3948 = *(int64x2_t *)(v3890 + 320);
            v3947 = *(int64x2_t *)(v3890 + 336);
            v3950 = *(int64x2_t *)(v3890 + 288);
            v3949 = *(int64x2_t *)(v3890 + 304);
            v3951 = *(int64x2_t *)(v3890 + 392);
            v3952 = *(int64x2_t *)(v3890 + 408);
            v3953 = *(int64x2_t *)(v3890 + 376);
            v3954 = vzip1q_s64(*(int64x2_t *)v3890, v3936);
            v3955 = vzip1q_s64(v3950, *(int64x2_t *)(v3890 + 360));
            v3956 = vzip1q_s64(v3941, v3942);
            v3957 = vzip2q_s64(*(int64x2_t *)v3890, v3936);
            v3958 = vzip2q_s64(v3941, v3942);
            v3959 = vzip2q_s64(v3950, *(int64x2_t *)(v3890 + 360));
            v3928.i64[1] = *(_QWORD *)(v3890 + 136);
            v3937.i64[1] = *(_QWORD *)(v3890 + 280);
            v3946.i64[1] = *(_QWORD *)(v3890 + 424);
            v3929[1] = v3956;
            v3929[2] = v3955;
            *v3929 = v3954;
            v3960 = (int64x2_t *)((char *)v3929 + 8 * v3891);
            v3960[1] = v3958;
            v3960[2] = v3959;
            *v3960 = v3957;
            v3961 = &v3929[v3891];
            v3961[1] = vzip1q_s64(v3940, v3945);
            v3961[2] = vzip1q_s64(v3949, v3953);
            *v3961 = vzip1q_s64(v3932, v3935);
            v3962 = (int64x2_t *)((char *)v3929 + 24 * v3891);
            v3962[1] = vzip2q_s64(v3940, v3945);
            v3962[2] = vzip2q_s64(v3949, v3953);
            *v3962 = vzip2q_s64(v3932, v3935);
            v3963 = &v3929[2 * v3891];
            v3963[1] = vzip1q_s64(v3939, v3944);
            v3963[2] = vzip1q_s64(v3948, v3951);
            *v3963 = vzip1q_s64(v3931, v3934);
            v3964 = (int64x2_t *)((char *)v3929 + 40 * v3891);
            v3964[1] = vzip2q_s64(v3939, v3944);
            v3964[2] = vzip2q_s64(v3948, v3951);
            *v3964 = vzip2q_s64(v3931, v3934);
            v3965 = &v3929[3 * v3891];
            v3965[1] = vzip1q_s64(v3938, v3943);
            v3965[2] = vzip1q_s64(v3947, v3952);
            *v3965 = vzip1q_s64(v3930, v3933);
            v3966 = (int64x2_t *)((char *)v3929 + 56 * v3891);
            v3966[1] = vzip2q_s64(v3938, v3943);
            v3966[2] = vzip2q_s64(v3947, v3952);
            *v3966 = vzip2q_s64(v3930, v3933);
            v3967 = &v3929[4 * v3891];
            v3967[1] = v3937;
            v3967[2] = v3946;
            *v3967 = v3928;
          }
          v3968 = v3883 + 1;
          while (v3968 != v3886)
          {
            ++v3885;
            v3969 = *v3968++;
            v3887 = v3969;
            if (v3969 != -1)
            {
              v3883 = v3968 - 1;
              goto LABEL_1830;
            }
          }
          v3878 = *(_DWORD *)(result + 3036);
        }
      }
      ++v3879;
      ++v3880;
    }
    while (v3879 < v3878);
    v1958 = *a5;
  }
  v3973 = *(_DWORD *)(result + 4476);
  if (v3973)
  {
    v3974 = 0;
    v3975 = a4[9];
    do
    {
      v3976 = *(_QWORD *)(result + 4552);
      v3977 = *(_DWORD *)(result + 4576) * v3974;
      v3978 = (uint64_t *)(v3976 + 8 * v3977);
      v3979 = *(_DWORD *)(result + 4472);
      if (v3979 && *v3978 == -1)
      {
        v3980 = 0;
        v4065 = 8 * (v3979 + v3977) - 8 * v3977 - 8;
        v4066 = v3976 + 8 * v3977;
        while (v4065)
        {
          v3978 = (uint64_t *)(v4066 + 8);
          ++v3980;
          v4067 = *(_QWORD *)(v4066 + 8);
          v4065 -= 8;
          v4066 += 8;
          if (v4067 != -1)
            goto LABEL_1850;
        }
      }
      else
      {
        v3980 = 0;
LABEL_1850:
        v3981 = (uint64_t *)(v3976 + 8 * (v3977 + v3979));
        if (v3978 != v3981)
        {
          v3982 = *v3978;
LABEL_1852:
          v3983 = *v3975;
          v3984 = *(_DWORD *)(a3[3] + 4 * v3980);
          v3985 = *(_QWORD *)(result + 4480) + 8 * v3982;
          v3986 = *((unsigned int *)a2 + 4);
          v3987 = *a2;
          if (v1958 && v3983 < v3984)
          {
            v3988 = *(_QWORD *)(v3985 + 64);
            v3989 = v3987 + 8 * (v3984 + (_DWORD)v3986 * v3983);
            v3990 = *(_OWORD *)(v3985 + 48);
            v3991 = *(int64x2_t *)v3985;
            v3992 = *(_OWORD *)(v3985 + 16);
            v3993 = *(_OWORD *)(v3985 + 72);
            v3994 = *(_OWORD *)(v3985 + 88);
            v3995 = *(_OWORD *)(v3985 + 104);
            v3996 = *(_OWORD *)(v3985 + 120);
            v3997 = *(_QWORD *)(v3985 + 136);
            v3998 = *(_OWORD *)(v3985 + 144);
            v3999 = *(_OWORD *)(v3985 + 160);
            v4000 = *(_OWORD *)(v3985 + 176);
            v4001 = *(_OWORD *)(v3985 + 192);
            v4002 = *(_QWORD *)(v3985 + 208);
            v4003 = *(_OWORD *)(v3985 + 232);
            v4004 = *(_OWORD *)(v3985 + 248);
            v4005 = *(_OWORD *)(v3985 + 216);
            v4006 = *(_OWORD *)(v3985 + 264);
            v4007 = *(_QWORD *)(v3985 + 280);
            v4008 = *(_OWORD *)(v3985 + 288);
            v4009 = *(_OWORD *)(v3985 + 304);
            v4010 = *(_OWORD *)(v3985 + 320);
            v4011 = *(_OWORD *)(v3985 + 336);
            v4012 = *(_QWORD *)(v3985 + 352);
            v4013 = *(_OWORD *)(v3985 + 360);
            v4014 = *(_OWORD *)(v3985 + 376);
            v4015 = *(_OWORD *)(v3985 + 392);
            v4016 = *(_OWORD *)(v3985 + 408);
            v4017 = *(_QWORD *)(v3985 + 424);
            *(_OWORD *)(v3989 + 32) = *(_OWORD *)(v3985 + 32);
            *(_OWORD *)(v3989 + 48) = v3990;
            *(_QWORD *)(v3989 + 64) = v3988;
            *(int64x2_t *)v3989 = v3991;
            *(_OWORD *)(v3989 + 16) = v3992;
            v4018 = v3989 + 8 * v3986;
            *(_QWORD *)(v4018 + 64) = v3997;
            *(_OWORD *)(v4018 + 32) = v3995;
            *(_OWORD *)(v4018 + 48) = v3996;
            *(_OWORD *)v4018 = v3993;
            *(_OWORD *)(v4018 + 16) = v3994;
            v4019 = v3989 + 16 * v3986;
            *(_QWORD *)(v4019 + 64) = v4002;
            *(_OWORD *)(v4019 + 32) = v4000;
            *(_OWORD *)(v4019 + 48) = v4001;
            *(_OWORD *)v4019 = v3998;
            *(_OWORD *)(v4019 + 16) = v3999;
            v4020 = v3989 + 24 * v3986;
            *(_QWORD *)(v4020 + 64) = v4007;
            *(_OWORD *)(v4020 + 32) = v4004;
            *(_OWORD *)(v4020 + 48) = v4006;
            *(_OWORD *)v4020 = v4005;
            *(_OWORD *)(v4020 + 16) = v4003;
            v4021 = v3989 + 32 * v3986;
            *(_QWORD *)(v4021 + 64) = v4012;
            *(_OWORD *)(v4021 + 32) = v4010;
            *(_OWORD *)(v4021 + 48) = v4011;
            *(_OWORD *)v4021 = v4008;
            *(_OWORD *)(v4021 + 16) = v4009;
            v4022 = v3989 + 40 * v3986;
            *(_QWORD *)(v4022 + 64) = v4017;
            *(_OWORD *)(v4022 + 32) = v4015;
            *(_OWORD *)(v4022 + 48) = v4016;
            *(_OWORD *)v4022 = v4013;
            *(_OWORD *)(v4022 + 16) = v4014;
          }
          else
          {
            v4023.i64[0] = *(_QWORD *)(v3985 + 64);
            v4024 = (int64x2_t *)(v3987 + 8 * (v3983 + (_DWORD)v3986 * v3984));
            v4026 = *(int64x2_t *)(v3985 + 32);
            v4025 = *(int64x2_t *)(v3985 + 48);
            v4027 = *(int64x2_t *)(v3985 + 16);
            v4028 = *(int64x2_t *)(v3985 + 120);
            v4029 = *(int64x2_t *)(v3985 + 104);
            v4030 = *(int64x2_t *)(v3985 + 88);
            v4031 = *(int64x2_t *)(v3985 + 72);
            v4032.i64[0] = *(_QWORD *)(v3985 + 208);
            v4034 = *(int64x2_t *)(v3985 + 176);
            v4033 = *(int64x2_t *)(v3985 + 192);
            v4036 = *(int64x2_t *)(v3985 + 144);
            v4035 = *(int64x2_t *)(v3985 + 160);
            v4037 = *(int64x2_t *)(v3985 + 216);
            v4038 = *(int64x2_t *)(v3985 + 264);
            v4039 = *(int64x2_t *)(v3985 + 248);
            v4040 = *(int64x2_t *)(v3985 + 232);
            v4041.i64[0] = *(_QWORD *)(v3985 + 352);
            v4043 = *(int64x2_t *)(v3985 + 320);
            v4042 = *(int64x2_t *)(v3985 + 336);
            v4045 = *(int64x2_t *)(v3985 + 288);
            v4044 = *(int64x2_t *)(v3985 + 304);
            v4046 = *(int64x2_t *)(v3985 + 392);
            v4047 = *(int64x2_t *)(v3985 + 408);
            v4048 = *(int64x2_t *)(v3985 + 376);
            v4049 = vzip1q_s64(*(int64x2_t *)v3985, v4031);
            v4050 = vzip1q_s64(v4045, *(int64x2_t *)(v3985 + 360));
            v4051 = vzip1q_s64(v4036, v4037);
            v4052 = vzip2q_s64(*(int64x2_t *)v3985, v4031);
            v4053 = vzip2q_s64(v4036, v4037);
            v4054 = vzip2q_s64(v4045, *(int64x2_t *)(v3985 + 360));
            v4023.i64[1] = *(_QWORD *)(v3985 + 136);
            v4032.i64[1] = *(_QWORD *)(v3985 + 280);
            v4041.i64[1] = *(_QWORD *)(v3985 + 424);
            v4024[1] = v4051;
            v4024[2] = v4050;
            *v4024 = v4049;
            v4055 = (int64x2_t *)((char *)v4024 + 8 * v3986);
            v4055[1] = v4053;
            v4055[2] = v4054;
            *v4055 = v4052;
            v4056 = &v4024[v3986];
            v4056[1] = vzip1q_s64(v4035, v4040);
            v4056[2] = vzip1q_s64(v4044, v4048);
            *v4056 = vzip1q_s64(v4027, v4030);
            v4057 = (int64x2_t *)((char *)v4024 + 24 * v3986);
            v4057[1] = vzip2q_s64(v4035, v4040);
            v4057[2] = vzip2q_s64(v4044, v4048);
            *v4057 = vzip2q_s64(v4027, v4030);
            v4058 = &v4024[2 * v3986];
            v4058[1] = vzip1q_s64(v4034, v4039);
            v4058[2] = vzip1q_s64(v4043, v4046);
            *v4058 = vzip1q_s64(v4026, v4029);
            v4059 = (int64x2_t *)((char *)v4024 + 40 * v3986);
            v4059[1] = vzip2q_s64(v4034, v4039);
            v4059[2] = vzip2q_s64(v4043, v4046);
            *v4059 = vzip2q_s64(v4026, v4029);
            v4060 = &v4024[3 * v3986];
            v4060[1] = vzip1q_s64(v4033, v4038);
            v4060[2] = vzip1q_s64(v4042, v4047);
            *v4060 = vzip1q_s64(v4025, v4028);
            v4061 = (int64x2_t *)((char *)v4024 + 56 * v3986);
            v4061[1] = vzip2q_s64(v4033, v4038);
            v4061[2] = vzip2q_s64(v4042, v4047);
            *v4061 = vzip2q_s64(v4025, v4028);
            v4062 = &v4024[4 * v3986];
            v4062[1] = v4032;
            v4062[2] = v4041;
            *v4062 = v4023;
          }
          v4063 = v3978 + 1;
          while (v4063 != v3981)
          {
            ++v3980;
            v4064 = *v4063++;
            v3982 = v4064;
            if (v4064 != -1)
            {
              v3978 = v4063 - 1;
              goto LABEL_1852;
            }
          }
          v3973 = *(_DWORD *)(result + 4476);
        }
      }
      ++v3974;
      ++v3975;
    }
    while (v3974 < v3973);
    v1958 = *a5;
  }
  v4068 = *(_DWORD *)(result + 5916);
  if (v4068)
  {
    v4069 = 0;
    v4070 = a4[12];
    do
    {
      v4071 = *(_QWORD *)(result + 5992);
      v4072 = *(_DWORD *)(result + 6016) * v4069;
      v4073 = (uint64_t *)(v4071 + 8 * v4072);
      v4074 = *(_DWORD *)(result + 5912);
      if (v4074 && *v4073 == -1)
      {
        v4075 = 0;
        v4126 = 8 * (v4074 + v4072) - 8 * v4072 - 8;
        v4127 = v4071 + 8 * v4072;
        while (v4126)
        {
          v4073 = (uint64_t *)(v4127 + 8);
          ++v4075;
          v4128 = *(_QWORD *)(v4127 + 8);
          v4126 -= 8;
          v4127 += 8;
          if (v4128 != -1)
            goto LABEL_1872;
        }
      }
      else
      {
        v4075 = 0;
LABEL_1872:
        v4076 = (uint64_t *)(v4071 + 8 * (v4072 + v4074));
        if (v4073 != v4076)
        {
          v4077 = *v4073;
LABEL_1874:
          v4078 = *v4070;
          v4079 = *(_DWORD *)(a3[3] + 4 * v4075);
          v4080 = *(_QWORD *)(result + 5920) + 8 * v4077;
          v4081 = *((unsigned int *)a2 + 4);
          v4082 = *a2;
          if (v1958 && v4078 < v4079)
          {
            v4083 = *(_QWORD *)(v4080 + 64);
            v4084 = v4082 + 8 * (v4079 + (_DWORD)v4081 * v4078);
            v4085 = *(_OWORD *)(v4080 + 48);
            v4086 = *(int64x2_t *)v4080;
            v4087 = *(_OWORD *)(v4080 + 16);
            v4088 = *(_OWORD *)(v4080 + 72);
            v4089 = *(_OWORD *)(v4080 + 88);
            v4090 = *(_OWORD *)(v4080 + 104);
            v4091 = *(_OWORD *)(v4080 + 120);
            v4092 = *(_QWORD *)(v4080 + 136);
            v4093 = *(_OWORD *)(v4080 + 144);
            v4094 = *(_OWORD *)(v4080 + 160);
            v4095 = *(_OWORD *)(v4080 + 176);
            v4096 = *(_OWORD *)(v4080 + 192);
            v4097 = *(_QWORD *)(v4080 + 208);
            *(_OWORD *)(v4084 + 32) = *(_OWORD *)(v4080 + 32);
            *(_OWORD *)(v4084 + 48) = v4085;
            *(_QWORD *)(v4084 + 64) = v4083;
            *(int64x2_t *)v4084 = v4086;
            *(_OWORD *)(v4084 + 16) = v4087;
            v4098 = v4084 + 8 * v4081;
            *(_QWORD *)(v4098 + 64) = v4092;
            *(_OWORD *)(v4098 + 32) = v4090;
            *(_OWORD *)(v4098 + 48) = v4091;
            *(_OWORD *)v4098 = v4088;
            *(_OWORD *)(v4098 + 16) = v4089;
            v4099 = v4084 + 16 * v4081;
            *(_QWORD *)(v4099 + 64) = v4097;
            *(_OWORD *)(v4099 + 32) = v4095;
            *(_OWORD *)(v4099 + 48) = v4096;
            *(_OWORD *)v4099 = v4093;
            *(_OWORD *)(v4099 + 16) = v4094;
          }
          else
          {
            v4100.i64[0] = *(_QWORD *)(v4080 + 64);
            v4101 = (int64x2_t *)(v4082 + 8 * (v4078 + (_DWORD)v4081 * v4079));
            v4103 = *(int64x2_t *)(v4080 + 32);
            v4102 = *(int64x2_t *)(v4080 + 48);
            v4104 = *(int64x2_t *)(v4080 + 16);
            v4105 = *(int64x2_t *)(v4080 + 120);
            v4106 = *(int64x2_t *)(v4080 + 104);
            v4107 = *(int64x2_t *)(v4080 + 88);
            v4108 = *(int64x2_t *)(v4080 + 72);
            v4109 = *(_QWORD *)(v4080 + 208);
            v4111 = *(_OWORD *)(v4080 + 176);
            v4110 = *(_OWORD *)(v4080 + 192);
            v4113 = *(_OWORD *)(v4080 + 144);
            v4112 = *(_OWORD *)(v4080 + 160);
            v4114 = vzip1q_s64(*(int64x2_t *)v4080, v4108);
            v4115 = vzip2q_s64(*(int64x2_t *)v4080, v4108);
            v4100.i64[1] = *(_QWORD *)(v4080 + 136);
            v4101[1].i64[0] = v4113;
            *v4101 = v4114;
            v4116 = (int64x2_t *)((char *)v4101 + 8 * v4081);
            *v4116 = v4115;
            v4116[1].i64[0] = *((_QWORD *)&v4113 + 1);
            v4117 = &v4101[v4081];
            v4117[1].i64[0] = v4112;
            *v4117 = vzip1q_s64(v4104, v4107);
            v4118 = (int64x2_t *)((char *)v4101 + 24 * v4081);
            v4118[1].i64[0] = *((_QWORD *)&v4112 + 1);
            *v4118 = vzip2q_s64(v4104, v4107);
            v4119 = &v4101[2 * v4081];
            v4119[1].i64[0] = v4111;
            *v4119 = vzip1q_s64(v4103, v4106);
            v4120 = (int64x2_t *)((char *)v4101 + 40 * v4081);
            v4120[1].i64[0] = *((_QWORD *)&v4111 + 1);
            *v4120 = vzip2q_s64(v4103, v4106);
            v4121 = &v4101[3 * v4081];
            v4121[1].i64[0] = v4110;
            *v4121 = vzip1q_s64(v4102, v4105);
            v4122 = (int64x2_t *)((char *)v4101 + 56 * v4081);
            v4122[1].i64[0] = *((_QWORD *)&v4110 + 1);
            *v4122 = vzip2q_s64(v4102, v4105);
            v4123 = &v4101[4 * v4081];
            v4123[1].i64[0] = v4109;
            *v4123 = v4100;
          }
          v4124 = v4073 + 1;
          while (v4124 != v4076)
          {
            ++v4075;
            v4125 = *v4124++;
            v4077 = v4125;
            if (v4125 != -1)
            {
              v4073 = v4124 - 1;
              goto LABEL_1874;
            }
          }
          v4068 = *(_DWORD *)(result + 5916);
        }
      }
      ++v4069;
      ++v4070;
    }
    while (v4069 < v4068);
    v1958 = *a5;
  }
  v4129 = *(_DWORD *)(result + 7356);
  if (v4129)
  {
    v4130 = 0;
    v4131 = a4[15];
    do
    {
      v4132 = *(_QWORD *)(result + 7432);
      v4133 = *(_DWORD *)(result + 7456) * v4130;
      v4134 = (uint64_t *)(v4132 + 8 * v4133);
      v4135 = *(_DWORD *)(result + 7352);
      if (v4135 && *v4134 == -1)
      {
        v4136 = 0;
        v4157 = 8 * (v4135 + v4133) - 8 * v4133 - 8;
        v4158 = v4132 + 8 * v4133;
        while (v4157)
        {
          v4134 = (uint64_t *)(v4158 + 8);
          ++v4136;
          v4159 = *(_QWORD *)(v4158 + 8);
          v4157 -= 8;
          v4158 += 8;
          if (v4159 != -1)
            goto LABEL_1894;
        }
      }
      else
      {
        v4136 = 0;
LABEL_1894:
        v4137 = (uint64_t *)(v4132 + 8 * (v4133 + v4135));
        if (v4134 != v4137)
        {
          v4138 = *v4134;
LABEL_1896:
          v4139 = *v4131;
          v4140 = *(_DWORD *)(a3[3] + 4 * v4136);
          v4141 = *(_QWORD *)(result + 7360) + 8 * v4138;
          v4142 = *((unsigned int *)a2 + 4);
          v4143 = *a2;
          v4145 = *(int8x16_t *)(v4141 + 32);
          v4144 = *(int8x16_t *)(v4141 + 48);
          v4147 = *(int8x16_t *)v4141;
          v4146 = *(int8x16_t *)(v4141 + 16);
          v4148 = *(_QWORD *)(v4141 + 64);
          v4149 = vextq_s8(v4144, v4144, 8uLL).u64[0];
          v4150 = vextq_s8(v4145, v4145, 8uLL).u64[0];
          v4151 = vextq_s8(v4146, v4146, 8uLL).u64[0];
          v4152 = vextq_s8(v4147, v4147, 8uLL).u64[0];
          if (v1958 && v4139 < v4140)
          {
            v4147.i64[1] = v4152;
            v4153 = (int8x16_t *)(v4143 + 8 * (v4140 + (_DWORD)v4142 * v4139));
            v4146.i64[1] = v4151;
            v4145.i64[1] = v4150;
            *v4153 = v4147;
            v4153[1] = v4146;
            v4153[4].i64[0] = v4148;
            v4144.i64[1] = v4149;
            v4153[2] = v4145;
            v4153[3] = v4144;
          }
          else
          {
            v4154 = (_QWORD *)(v4143 + 8 * (v4139 + (_DWORD)v4142 * v4140));
            *v4154 = v4147.i64[0];
            v4154[v4142] = v4152;
            v4154[2 * v4142] = v4146.i64[0];
            v4154[3 * v4142] = v4151;
            v4154[4 * v4142] = v4145.i64[0];
            v4154[5 * v4142] = v4150;
            v4154[6 * v4142] = v4144.i64[0];
            v4154[7 * v4142] = v4149;
            v4154[8 * v4142] = v4148;
          }
          v4155 = v4134 + 1;
          while (v4155 != v4137)
          {
            ++v4136;
            v4156 = *v4155++;
            v4138 = v4156;
            if (v4156 != -1)
            {
              v4134 = v4155 - 1;
              goto LABEL_1896;
            }
          }
          v4129 = *(_DWORD *)(result + 7356);
        }
      }
      ++v4130;
      ++v4131;
    }
    while (v4130 < v4129);
    v1958 = *a5;
  }
  v4160 = *(_DWORD *)(result + 8796);
  if (v4160)
  {
    v4161 = 0;
    v4162 = a4[18];
    do
    {
      v4163 = *(_QWORD *)(result + 8872);
      v4164 = *(_DWORD *)(result + 8896) * v4161;
      v4165 = (uint64_t *)(v4163 + 8 * v4164);
      v4166 = *(_DWORD *)(result + 8792);
      if (v4166 && *v4165 == -1)
      {
        v4167 = 0;
        v4218 = 8 * (v4166 + v4164) - 8 * v4164 - 8;
        v4219 = v4163 + 8 * v4164;
        while (v4218)
        {
          v4165 = (uint64_t *)(v4219 + 8);
          ++v4167;
          v4220 = *(_QWORD *)(v4219 + 8);
          v4218 -= 8;
          v4219 += 8;
          if (v4220 != -1)
            goto LABEL_1916;
        }
      }
      else
      {
        v4167 = 0;
LABEL_1916:
        v4168 = (uint64_t *)(v4163 + 8 * (v4164 + v4166));
        if (v4165 != v4168)
        {
          v4169 = *v4165;
LABEL_1918:
          v4170 = *v4162;
          v4171 = *(_DWORD *)(a3[3] + 4 * v4167);
          v4172 = *(_QWORD *)(result + 8800) + 8 * v4169;
          v4173 = *((unsigned int *)a2 + 4);
          v4174 = *a2;
          if (v1958 && v4170 < v4171)
          {
            v4175 = *(_QWORD *)(v4172 + 64);
            v4176 = v4174 + 8 * (v4171 + (_DWORD)v4173 * v4170);
            v4177 = *(_OWORD *)(v4172 + 48);
            v4178 = *(int64x2_t *)v4172;
            v4179 = *(_OWORD *)(v4172 + 16);
            v4180 = *(_OWORD *)(v4172 + 72);
            v4181 = *(_OWORD *)(v4172 + 88);
            v4182 = *(_OWORD *)(v4172 + 104);
            v4183 = *(_OWORD *)(v4172 + 120);
            v4184 = *(_QWORD *)(v4172 + 136);
            v4185 = *(_OWORD *)(v4172 + 144);
            v4186 = *(_OWORD *)(v4172 + 160);
            v4187 = *(_OWORD *)(v4172 + 176);
            v4188 = *(_OWORD *)(v4172 + 192);
            v4189 = *(_QWORD *)(v4172 + 208);
            *(_OWORD *)(v4176 + 32) = *(_OWORD *)(v4172 + 32);
            *(_OWORD *)(v4176 + 48) = v4177;
            *(_QWORD *)(v4176 + 64) = v4175;
            *(int64x2_t *)v4176 = v4178;
            *(_OWORD *)(v4176 + 16) = v4179;
            v4190 = v4176 + 8 * v4173;
            *(_QWORD *)(v4190 + 64) = v4184;
            *(_OWORD *)(v4190 + 32) = v4182;
            *(_OWORD *)(v4190 + 48) = v4183;
            *(_OWORD *)v4190 = v4180;
            *(_OWORD *)(v4190 + 16) = v4181;
            v4191 = v4176 + 16 * v4173;
            *(_QWORD *)(v4191 + 64) = v4189;
            *(_OWORD *)(v4191 + 32) = v4187;
            *(_OWORD *)(v4191 + 48) = v4188;
            *(_OWORD *)v4191 = v4185;
            *(_OWORD *)(v4191 + 16) = v4186;
          }
          else
          {
            v4192.i64[0] = *(_QWORD *)(v4172 + 64);
            v4193 = (int64x2_t *)(v4174 + 8 * (v4170 + (_DWORD)v4173 * v4171));
            v4195 = *(int64x2_t *)(v4172 + 32);
            v4194 = *(int64x2_t *)(v4172 + 48);
            v4196 = *(int64x2_t *)(v4172 + 16);
            v4197 = *(int64x2_t *)(v4172 + 120);
            v4198 = *(int64x2_t *)(v4172 + 104);
            v4199 = *(int64x2_t *)(v4172 + 88);
            v4200 = *(int64x2_t *)(v4172 + 72);
            v4201 = *(_QWORD *)(v4172 + 208);
            v4203 = *(_OWORD *)(v4172 + 176);
            v4202 = *(_OWORD *)(v4172 + 192);
            v4205 = *(_OWORD *)(v4172 + 144);
            v4204 = *(_OWORD *)(v4172 + 160);
            v4206 = vzip1q_s64(*(int64x2_t *)v4172, v4200);
            v4207 = vzip2q_s64(*(int64x2_t *)v4172, v4200);
            v4192.i64[1] = *(_QWORD *)(v4172 + 136);
            v4193[1].i64[0] = v4205;
            *v4193 = v4206;
            v4208 = (int64x2_t *)((char *)v4193 + 8 * v4173);
            *v4208 = v4207;
            v4208[1].i64[0] = *((_QWORD *)&v4205 + 1);
            v4209 = &v4193[v4173];
            v4209[1].i64[0] = v4204;
            *v4209 = vzip1q_s64(v4196, v4199);
            v4210 = (int64x2_t *)((char *)v4193 + 24 * v4173);
            v4210[1].i64[0] = *((_QWORD *)&v4204 + 1);
            *v4210 = vzip2q_s64(v4196, v4199);
            v4211 = &v4193[2 * v4173];
            v4211[1].i64[0] = v4203;
            *v4211 = vzip1q_s64(v4195, v4198);
            v4212 = (int64x2_t *)((char *)v4193 + 40 * v4173);
            v4212[1].i64[0] = *((_QWORD *)&v4203 + 1);
            *v4212 = vzip2q_s64(v4195, v4198);
            v4213 = &v4193[3 * v4173];
            v4213[1].i64[0] = v4202;
            *v4213 = vzip1q_s64(v4194, v4197);
            v4214 = (int64x2_t *)((char *)v4193 + 56 * v4173);
            v4214[1].i64[0] = *((_QWORD *)&v4202 + 1);
            *v4214 = vzip2q_s64(v4194, v4197);
            v4215 = &v4193[4 * v4173];
            v4215[1].i64[0] = v4201;
            *v4215 = v4192;
          }
          v4216 = v4165 + 1;
          while (v4216 != v4168)
          {
            ++v4167;
            v4217 = *v4216++;
            v4169 = v4217;
            if (v4217 != -1)
            {
              v4165 = v4216 - 1;
              goto LABEL_1918;
            }
          }
          v4160 = *(_DWORD *)(result + 8796);
        }
      }
      ++v4161;
      ++v4162;
    }
    while (v4161 < v4160);
    v1958 = *a5;
  }
  v4221 = *(_DWORD *)(result + 10236);
  if (v4221)
  {
    v4222 = 0;
    v4223 = a4[21];
    do
    {
      v4224 = *(_QWORD *)(result + 10312);
      v4225 = *(_DWORD *)(result + 10336) * v4222;
      v4226 = (uint64_t *)(v4224 + 8 * v4225);
      v4227 = *(_DWORD *)(result + 10232);
      if (v4227 && *v4226 == -1)
      {
        v4228 = 0;
        v4288 = 8 * (v4227 + v4225) - 8 * v4225 - 8;
        v4289 = v4224 + 8 * v4225;
        while (v4288)
        {
          v4226 = (uint64_t *)(v4289 + 8);
          ++v4228;
          v4290 = *(_QWORD *)(v4289 + 8);
          v4288 -= 8;
          v4289 += 8;
          if (v4290 != -1)
            goto LABEL_1938;
        }
      }
      else
      {
        v4228 = 0;
LABEL_1938:
        v4229 = (uint64_t *)(v4224 + 8 * (v4225 + v4227));
        if (v4226 != v4229)
        {
          v4230 = *v4226;
LABEL_1940:
          v4231 = *v4223;
          v4232 = *(_DWORD *)(a3[3] + 4 * v4228);
          v4233 = *(_QWORD *)(result + 10240) + 8 * v4230;
          v4234 = *((unsigned int *)a2 + 4);
          v4235 = *a2;
          if (v1958 && v4231 < v4232)
          {
            v4236 = *(_QWORD *)(v4233 + 64);
            v4237 = v4235 + 8 * (v4232 + (_DWORD)v4234 * v4231);
            v4238 = *(_OWORD *)(v4233 + 48);
            v4239 = *(int64x2_t *)v4233;
            v4240 = *(_OWORD *)(v4233 + 16);
            v4241 = *(_OWORD *)(v4233 + 72);
            v4242 = *(_OWORD *)(v4233 + 88);
            v4243 = *(_OWORD *)(v4233 + 104);
            v4244 = *(_OWORD *)(v4233 + 120);
            v4245 = *(_QWORD *)(v4233 + 136);
            v4246 = *(_OWORD *)(v4233 + 144);
            v4247 = *(_OWORD *)(v4233 + 160);
            v4248 = *(_OWORD *)(v4233 + 176);
            v4249 = *(_OWORD *)(v4233 + 192);
            v4250 = *(_QWORD *)(v4233 + 208);
            v4251 = *(_OWORD *)(v4233 + 232);
            v4252 = *(_OWORD *)(v4233 + 248);
            v4253 = *(_OWORD *)(v4233 + 216);
            v4254 = *(_OWORD *)(v4233 + 264);
            v4255 = *(_QWORD *)(v4233 + 280);
            *(_OWORD *)(v4237 + 32) = *(_OWORD *)(v4233 + 32);
            *(_OWORD *)(v4237 + 48) = v4238;
            *(_QWORD *)(v4237 + 64) = v4236;
            *(int64x2_t *)v4237 = v4239;
            *(_OWORD *)(v4237 + 16) = v4240;
            v4256 = v4237 + 8 * v4234;
            *(_QWORD *)(v4256 + 64) = v4245;
            *(_OWORD *)(v4256 + 32) = v4243;
            *(_OWORD *)(v4256 + 48) = v4244;
            *(_OWORD *)v4256 = v4241;
            *(_OWORD *)(v4256 + 16) = v4242;
            v4257 = v4237 + 16 * v4234;
            *(_QWORD *)(v4257 + 64) = v4250;
            *(_OWORD *)(v4257 + 32) = v4248;
            *(_OWORD *)(v4257 + 48) = v4249;
            *(_OWORD *)v4257 = v4246;
            *(_OWORD *)(v4257 + 16) = v4247;
            v4258 = v4237 + 24 * v4234;
            *(_QWORD *)(v4258 + 64) = v4255;
            *(_OWORD *)(v4258 + 32) = v4252;
            *(_OWORD *)(v4258 + 48) = v4254;
            *(_OWORD *)v4258 = v4253;
            *(_OWORD *)(v4258 + 16) = v4251;
          }
          else
          {
            v4259.i64[0] = *(_QWORD *)(v4233 + 64);
            v4260 = (int64x2_t *)(v4235 + 8 * (v4231 + (_DWORD)v4234 * v4232));
            v4262 = *(int64x2_t *)(v4233 + 32);
            v4261 = *(int64x2_t *)(v4233 + 48);
            v4263 = *(int64x2_t *)(v4233 + 16);
            v4264 = *(int64x2_t *)(v4233 + 120);
            v4265 = *(int64x2_t *)(v4233 + 104);
            v4266 = *(int64x2_t *)(v4233 + 88);
            v4267 = *(int64x2_t *)(v4233 + 72);
            v4268.i64[0] = *(_QWORD *)(v4233 + 208);
            v4270 = *(int64x2_t *)(v4233 + 176);
            v4269 = *(int64x2_t *)(v4233 + 192);
            v4272 = *(int64x2_t *)(v4233 + 144);
            v4271 = *(int64x2_t *)(v4233 + 160);
            v4273 = *(int64x2_t *)(v4233 + 216);
            v4274 = *(int64x2_t *)(v4233 + 264);
            v4275 = *(int64x2_t *)(v4233 + 248);
            v4276 = *(int64x2_t *)(v4233 + 232);
            v4277 = vzip2q_s64(*(int64x2_t *)v4233, v4267);
            v4259.i64[1] = *(_QWORD *)(v4233 + 136);
            v4268.i64[1] = *(_QWORD *)(v4233 + 280);
            *v4260 = vzip1q_s64(*(int64x2_t *)v4233, v4267);
            v4260[1] = vzip1q_s64(v4272, v4273);
            v4278 = (int64x2_t *)((char *)v4260 + 8 * v4234);
            *v4278 = v4277;
            v4278[1] = vzip2q_s64(v4272, v4273);
            v4279 = &v4260[v4234];
            *v4279 = vzip1q_s64(v4263, v4266);
            v4279[1] = vzip1q_s64(v4271, v4276);
            v4280 = (int64x2_t *)((char *)v4260 + 24 * v4234);
            *v4280 = vzip2q_s64(v4263, v4266);
            v4280[1] = vzip2q_s64(v4271, v4276);
            v4281 = &v4260[2 * v4234];
            *v4281 = vzip1q_s64(v4262, v4265);
            v4281[1] = vzip1q_s64(v4270, v4275);
            v4282 = (int64x2_t *)((char *)v4260 + 40 * v4234);
            *v4282 = vzip2q_s64(v4262, v4265);
            v4282[1] = vzip2q_s64(v4270, v4275);
            v4283 = &v4260[3 * v4234];
            *v4283 = vzip1q_s64(v4261, v4264);
            v4283[1] = vzip1q_s64(v4269, v4274);
            v4284 = (int64x2_t *)((char *)v4260 + 56 * v4234);
            *v4284 = vzip2q_s64(v4261, v4264);
            v4284[1] = vzip2q_s64(v4269, v4274);
            v4285 = &v4260[4 * v4234];
            *v4285 = v4259;
            v4285[1] = v4268;
          }
          v4286 = v4226 + 1;
          while (v4286 != v4229)
          {
            ++v4228;
            v4287 = *v4286++;
            v4230 = v4287;
            if (v4287 != -1)
            {
              v4226 = v4286 - 1;
              goto LABEL_1940;
            }
          }
          v4221 = *(_DWORD *)(result + 10236);
        }
      }
      ++v4222;
      ++v4223;
    }
    while (v4222 < v4221);
    v1958 = *a5;
  }
  v4291 = *(_DWORD *)(result + 11676);
  if (v4291)
  {
    v4292 = 0;
    v4293 = a4[24];
    do
    {
      v4294 = *(_QWORD *)(result + 11752);
      v4295 = *(_DWORD *)(result + 11776) * v4292;
      v4296 = (uint64_t *)(v4294 + 8 * v4295);
      v4297 = *(_DWORD *)(result + 11672);
      if (v4297 && *v4296 == -1)
      {
        v4298 = 0;
        v4358 = 8 * (v4297 + v4295) - 8 * v4295 - 8;
        v4359 = v4294 + 8 * v4295;
        while (v4358)
        {
          v4296 = (uint64_t *)(v4359 + 8);
          ++v4298;
          v4360 = *(_QWORD *)(v4359 + 8);
          v4358 -= 8;
          v4359 += 8;
          if (v4360 != -1)
            goto LABEL_1960;
        }
      }
      else
      {
        v4298 = 0;
LABEL_1960:
        v4299 = (uint64_t *)(v4294 + 8 * (v4295 + v4297));
        if (v4296 != v4299)
        {
          v4300 = *v4296;
LABEL_1962:
          v4301 = *v4293;
          v4302 = *(_DWORD *)(a3[3] + 4 * v4298);
          v4303 = *(_QWORD *)(result + 11680) + 8 * v4300;
          v4304 = *((unsigned int *)a2 + 4);
          v4305 = *a2;
          if (v1958 && v4301 < v4302)
          {
            v4306 = *(_QWORD *)(v4303 + 64);
            v4307 = v4305 + 8 * (v4302 + (_DWORD)v4304 * v4301);
            v4308 = *(_OWORD *)(v4303 + 48);
            v4309 = *(int64x2_t *)v4303;
            v4310 = *(_OWORD *)(v4303 + 16);
            v4311 = *(_OWORD *)(v4303 + 72);
            v4312 = *(_OWORD *)(v4303 + 88);
            v4313 = *(_OWORD *)(v4303 + 104);
            v4314 = *(_OWORD *)(v4303 + 120);
            v4315 = *(_QWORD *)(v4303 + 136);
            v4316 = *(_OWORD *)(v4303 + 144);
            v4317 = *(_OWORD *)(v4303 + 160);
            v4318 = *(_OWORD *)(v4303 + 176);
            v4319 = *(_OWORD *)(v4303 + 192);
            v4320 = *(_QWORD *)(v4303 + 208);
            v4321 = *(_OWORD *)(v4303 + 232);
            v4322 = *(_OWORD *)(v4303 + 248);
            v4323 = *(_OWORD *)(v4303 + 216);
            v4324 = *(_OWORD *)(v4303 + 264);
            v4325 = *(_QWORD *)(v4303 + 280);
            *(_OWORD *)(v4307 + 32) = *(_OWORD *)(v4303 + 32);
            *(_OWORD *)(v4307 + 48) = v4308;
            *(_QWORD *)(v4307 + 64) = v4306;
            *(int64x2_t *)v4307 = v4309;
            *(_OWORD *)(v4307 + 16) = v4310;
            v4326 = v4307 + 8 * v4304;
            *(_QWORD *)(v4326 + 64) = v4315;
            *(_OWORD *)(v4326 + 32) = v4313;
            *(_OWORD *)(v4326 + 48) = v4314;
            *(_OWORD *)v4326 = v4311;
            *(_OWORD *)(v4326 + 16) = v4312;
            v4327 = v4307 + 16 * v4304;
            *(_QWORD *)(v4327 + 64) = v4320;
            *(_OWORD *)(v4327 + 32) = v4318;
            *(_OWORD *)(v4327 + 48) = v4319;
            *(_OWORD *)v4327 = v4316;
            *(_OWORD *)(v4327 + 16) = v4317;
            v4328 = v4307 + 24 * v4304;
            *(_QWORD *)(v4328 + 64) = v4325;
            *(_OWORD *)(v4328 + 32) = v4322;
            *(_OWORD *)(v4328 + 48) = v4324;
            *(_OWORD *)v4328 = v4323;
            *(_OWORD *)(v4328 + 16) = v4321;
          }
          else
          {
            v4329.i64[0] = *(_QWORD *)(v4303 + 64);
            v4330 = (int64x2_t *)(v4305 + 8 * (v4301 + (_DWORD)v4304 * v4302));
            v4332 = *(int64x2_t *)(v4303 + 32);
            v4331 = *(int64x2_t *)(v4303 + 48);
            v4333 = *(int64x2_t *)(v4303 + 16);
            v4334 = *(int64x2_t *)(v4303 + 120);
            v4335 = *(int64x2_t *)(v4303 + 104);
            v4336 = *(int64x2_t *)(v4303 + 88);
            v4337 = *(int64x2_t *)(v4303 + 72);
            v4338.i64[0] = *(_QWORD *)(v4303 + 208);
            v4340 = *(int64x2_t *)(v4303 + 176);
            v4339 = *(int64x2_t *)(v4303 + 192);
            v4342 = *(int64x2_t *)(v4303 + 144);
            v4341 = *(int64x2_t *)(v4303 + 160);
            v4343 = *(int64x2_t *)(v4303 + 216);
            v4344 = *(int64x2_t *)(v4303 + 264);
            v4345 = *(int64x2_t *)(v4303 + 248);
            v4346 = *(int64x2_t *)(v4303 + 232);
            v4347 = vzip2q_s64(*(int64x2_t *)v4303, v4337);
            v4329.i64[1] = *(_QWORD *)(v4303 + 136);
            v4338.i64[1] = *(_QWORD *)(v4303 + 280);
            *v4330 = vzip1q_s64(*(int64x2_t *)v4303, v4337);
            v4330[1] = vzip1q_s64(v4342, v4343);
            v4348 = (int64x2_t *)((char *)v4330 + 8 * v4304);
            *v4348 = v4347;
            v4348[1] = vzip2q_s64(v4342, v4343);
            v4349 = &v4330[v4304];
            *v4349 = vzip1q_s64(v4333, v4336);
            v4349[1] = vzip1q_s64(v4341, v4346);
            v4350 = (int64x2_t *)((char *)v4330 + 24 * v4304);
            *v4350 = vzip2q_s64(v4333, v4336);
            v4350[1] = vzip2q_s64(v4341, v4346);
            v4351 = &v4330[2 * v4304];
            *v4351 = vzip1q_s64(v4332, v4335);
            v4351[1] = vzip1q_s64(v4340, v4345);
            v4352 = (int64x2_t *)((char *)v4330 + 40 * v4304);
            *v4352 = vzip2q_s64(v4332, v4335);
            v4352[1] = vzip2q_s64(v4340, v4345);
            v4353 = &v4330[3 * v4304];
            *v4353 = vzip1q_s64(v4331, v4334);
            v4353[1] = vzip1q_s64(v4339, v4344);
            v4354 = (int64x2_t *)((char *)v4330 + 56 * v4304);
            *v4354 = vzip2q_s64(v4331, v4334);
            v4354[1] = vzip2q_s64(v4339, v4344);
            v4355 = &v4330[4 * v4304];
            *v4355 = v4329;
            v4355[1] = v4338;
          }
          v4356 = v4296 + 1;
          while (v4356 != v4299)
          {
            ++v4298;
            v4357 = *v4356++;
            v4300 = v4357;
            if (v4357 != -1)
            {
              v4296 = v4356 - 1;
              goto LABEL_1962;
            }
          }
          v4291 = *(_DWORD *)(result + 11676);
        }
      }
      ++v4292;
      ++v4293;
    }
    while (v4292 < v4291);
    v1958 = *a5;
  }
  v4361 = *(_DWORD *)(result + 13116);
  if (v4361)
  {
    v4362 = 0;
    v4363 = a4[27];
    do
    {
      v4364 = *(_QWORD *)(result + 13192);
      v4365 = *(_DWORD *)(result + 13216) * v4362;
      v4366 = (uint64_t *)(v4364 + 8 * v4365);
      v4367 = *(_DWORD *)(result + 13112);
      if (v4367 && *v4366 == -1)
      {
        v4368 = 0;
        v4419 = 8 * (v4367 + v4365) - 8 * v4365 - 8;
        v4420 = v4364 + 8 * v4365;
        while (v4419)
        {
          v4366 = (uint64_t *)(v4420 + 8);
          ++v4368;
          v4421 = *(_QWORD *)(v4420 + 8);
          v4419 -= 8;
          v4420 += 8;
          if (v4421 != -1)
            goto LABEL_1982;
        }
      }
      else
      {
        v4368 = 0;
LABEL_1982:
        v4369 = (uint64_t *)(v4364 + 8 * (v4365 + v4367));
        if (v4366 != v4369)
        {
          v4370 = *v4366;
LABEL_1984:
          v4371 = *v4363;
          v4372 = *(_DWORD *)(a3[3] + 4 * v4368);
          v4373 = *(_QWORD *)(result + 13120) + 8 * v4370;
          v4374 = *((unsigned int *)a2 + 4);
          v4375 = *a2;
          if (v1958 && v4371 < v4372)
          {
            v4376 = *(_QWORD *)(v4373 + 64);
            v4377 = v4375 + 8 * (v4372 + (_DWORD)v4374 * v4371);
            v4378 = *(_OWORD *)(v4373 + 48);
            v4379 = *(int64x2_t *)v4373;
            v4380 = *(_OWORD *)(v4373 + 16);
            v4381 = *(_OWORD *)(v4373 + 72);
            v4382 = *(_OWORD *)(v4373 + 88);
            v4383 = *(_OWORD *)(v4373 + 104);
            v4384 = *(_OWORD *)(v4373 + 120);
            v4385 = *(_QWORD *)(v4373 + 136);
            v4386 = *(_OWORD *)(v4373 + 144);
            v4387 = *(_OWORD *)(v4373 + 160);
            v4388 = *(_OWORD *)(v4373 + 176);
            v4389 = *(_OWORD *)(v4373 + 192);
            v4390 = *(_QWORD *)(v4373 + 208);
            *(_OWORD *)(v4377 + 32) = *(_OWORD *)(v4373 + 32);
            *(_OWORD *)(v4377 + 48) = v4378;
            *(_QWORD *)(v4377 + 64) = v4376;
            *(int64x2_t *)v4377 = v4379;
            *(_OWORD *)(v4377 + 16) = v4380;
            v4391 = v4377 + 8 * v4374;
            *(_QWORD *)(v4391 + 64) = v4385;
            *(_OWORD *)(v4391 + 32) = v4383;
            *(_OWORD *)(v4391 + 48) = v4384;
            *(_OWORD *)v4391 = v4381;
            *(_OWORD *)(v4391 + 16) = v4382;
            v4392 = v4377 + 16 * v4374;
            *(_QWORD *)(v4392 + 64) = v4390;
            *(_OWORD *)(v4392 + 32) = v4388;
            *(_OWORD *)(v4392 + 48) = v4389;
            *(_OWORD *)v4392 = v4386;
            *(_OWORD *)(v4392 + 16) = v4387;
          }
          else
          {
            v4393.i64[0] = *(_QWORD *)(v4373 + 64);
            v4394 = (int64x2_t *)(v4375 + 8 * (v4371 + (_DWORD)v4374 * v4372));
            v4396 = *(int64x2_t *)(v4373 + 32);
            v4395 = *(int64x2_t *)(v4373 + 48);
            v4397 = *(int64x2_t *)(v4373 + 16);
            v4398 = *(int64x2_t *)(v4373 + 120);
            v4399 = *(int64x2_t *)(v4373 + 104);
            v4400 = *(int64x2_t *)(v4373 + 88);
            v4401 = *(int64x2_t *)(v4373 + 72);
            v4402 = *(_QWORD *)(v4373 + 208);
            v4404 = *(_OWORD *)(v4373 + 176);
            v4403 = *(_OWORD *)(v4373 + 192);
            v4406 = *(_OWORD *)(v4373 + 144);
            v4405 = *(_OWORD *)(v4373 + 160);
            v4407 = vzip1q_s64(*(int64x2_t *)v4373, v4401);
            v4408 = vzip2q_s64(*(int64x2_t *)v4373, v4401);
            v4393.i64[1] = *(_QWORD *)(v4373 + 136);
            v4394[1].i64[0] = v4406;
            *v4394 = v4407;
            v4409 = (int64x2_t *)((char *)v4394 + 8 * v4374);
            *v4409 = v4408;
            v4409[1].i64[0] = *((_QWORD *)&v4406 + 1);
            v4410 = &v4394[v4374];
            v4410[1].i64[0] = v4405;
            *v4410 = vzip1q_s64(v4397, v4400);
            v4411 = (int64x2_t *)((char *)v4394 + 24 * v4374);
            v4411[1].i64[0] = *((_QWORD *)&v4405 + 1);
            *v4411 = vzip2q_s64(v4397, v4400);
            v4412 = &v4394[2 * v4374];
            v4412[1].i64[0] = v4404;
            *v4412 = vzip1q_s64(v4396, v4399);
            v4413 = (int64x2_t *)((char *)v4394 + 40 * v4374);
            v4413[1].i64[0] = *((_QWORD *)&v4404 + 1);
            *v4413 = vzip2q_s64(v4396, v4399);
            v4414 = &v4394[3 * v4374];
            v4414[1].i64[0] = v4403;
            *v4414 = vzip1q_s64(v4395, v4398);
            v4415 = (int64x2_t *)((char *)v4394 + 56 * v4374);
            v4415[1].i64[0] = *((_QWORD *)&v4403 + 1);
            *v4415 = vzip2q_s64(v4395, v4398);
            v4416 = &v4394[4 * v4374];
            v4416[1].i64[0] = v4402;
            *v4416 = v4393;
          }
          v4417 = v4366 + 1;
          while (v4417 != v4369)
          {
            ++v4368;
            v4418 = *v4417++;
            v4370 = v4418;
            if (v4418 != -1)
            {
              v4366 = v4417 - 1;
              goto LABEL_1984;
            }
          }
          v4361 = *(_DWORD *)(result + 13116);
        }
      }
      ++v4362;
      ++v4363;
    }
    while (v4362 < v4361);
    v1958 = *a5;
  }
  v4422 = *(_DWORD *)(result + 12);
  if (v4422)
  {
    v4423 = 0;
    v4424 = *a4;
    do
    {
      v4425 = *(_QWORD *)(result + 88);
      v4426 = *(_DWORD *)(result + 112) * v4423;
      v4427 = (uint64_t *)(v4425 + 8 * v4426);
      v4428 = *(_DWORD *)(result + 8);
      if (v4428 && *v4427 == -1)
      {
        v4429 = 0;
        v4490 = 8 * (v4428 + v4426) - 8 * v4426 - 8;
        v4491 = v4425 + 8 * v4426;
        while (v4490)
        {
          v4427 = (uint64_t *)(v4491 + 8);
          ++v4429;
          v4492 = *(_QWORD *)(v4491 + 8);
          v4490 -= 8;
          v4491 += 8;
          if (v4492 != -1)
            goto LABEL_2004;
        }
      }
      else
      {
        v4429 = 0;
LABEL_2004:
        v4430 = (uint64_t *)(v4425 + 8 * (v4426 + v4428));
        if (v4427 != v4430)
        {
          v4431 = *v4427;
LABEL_2006:
          v4432 = *v4424;
          v4433 = *(_DWORD *)(*a3 + 4 * v4429);
          v4434 = *(_QWORD *)(result + 16) + 8 * v4431;
          v4435 = *((unsigned int *)a2 + 4);
          v4436 = *a2;
          if (v1958 && v4432 < v4433)
          {
            v4437 = *(int64x2_t *)v4434;
            v4438 = (int64x2_t *)(v4436 + 8 * (v4433 + (_DWORD)v4435 * v4432));
            v4439 = *(int64x2_t *)(v4434 + 32);
            v4440 = *(int64x2_t *)(v4434 + 48);
            v4441 = *(int64x2_t *)(v4434 + 64);
            v4442 = *(int64x2_t *)(v4434 + 80);
            v4444 = *(int8x16_t *)(v4434 + 96);
            v4443 = *(int8x16_t *)(v4434 + 112);
            v4445 = *(int8x16_t *)(v4434 + 128);
            v4446 = *(int8x16_t *)(v4434 + 144);
            v4447 = vextq_s8(v4445, v4445, 8uLL).u64[0];
            v4448 = vextq_s8(v4443, v4443, 8uLL).u64[0];
            v4449 = vextq_s8(v4444, v4444, 8uLL).u64[0];
            v4450 = *(int8x16_t *)(v4434 + 160);
            v4451 = *(int8x16_t *)(v4434 + 176);
            v4452 = vextq_s8(v4451, v4451, 8uLL).u64[0];
            v4453 = vextq_s8(v4450, v4450, 8uLL).u64[0];
            v4454 = vextq_s8(v4446, v4446, 8uLL).u64[0];
            v4456 = *(int8x16_t *)(v4434 + 192);
            v4455 = *(int8x16_t *)(v4434 + 208);
            v4458 = *(int8x16_t *)(v4434 + 224);
            v4457 = *(int8x16_t *)(v4434 + 240);
            v4459 = vextq_s8(v4458, v4458, 8uLL).u64[0];
            v4460 = vextq_s8(v4455, v4455, 8uLL).u64[0];
            v4461 = vextq_s8(v4456, v4456, 8uLL).u64[0];
            v4462 = *(int8x16_t *)(v4434 + 256);
            v4463 = *(int8x16_t *)(v4434 + 272);
            v4464 = vextq_s8(v4463, v4463, 8uLL).u64[0];
            v4465 = vextq_s8(v4462, v4462, 8uLL).u64[0];
            v4466 = vextq_s8(v4457, v4457, 8uLL).u64[0];
            v4438[1] = *(int64x2_t *)(v4434 + 16);
            v4438[2] = v4439;
            *v4438 = v4437;
            v4467 = (int64x2_t *)((char *)v4438 + 8 * v4435);
            v4467[1] = v4441;
            v4467[2] = v4442;
          }
          else
          {
            v4438 = (int64x2_t *)(v4436 + 8 * (v4432 + (_DWORD)v4435 * v4433));
            v4468 = *(int64x2_t *)(v4434 + 16);
            v4469 = *(int64x2_t *)(v4434 + 64);
            v4470 = *(int64x2_t *)(v4434 + 80);
            v4472 = *(int64x2_t *)(v4434 + 32);
            v4471 = *(int64x2_t *)(v4434 + 48);
            v4473 = *(int64x2_t *)(v4434 + 96);
            v4474 = *(int64x2_t *)(v4434 + 112);
            v4475 = *(int64x2_t *)(v4434 + 128);
            v4476 = *(int64x2_t *)(v4434 + 192);
            v4477 = *(int64x2_t *)(v4434 + 208);
            v4478 = *(int64x2_t *)(v4434 + 224);
            v4479 = vzip1q_s64(*(int64x2_t *)v4434, v4471);
            v4480 = vzip1q_s64(v4473, *(int64x2_t *)(v4434 + 144));
            v4481 = vzip1q_s64(v4476, *(int64x2_t *)(v4434 + 240));
            v4482.i64[0] = vdupq_laneq_s64(v4473, 1).u64[0];
            v4482.i64[1] = *(_QWORD *)(v4434 + 152);
            v4440 = vzip2q_s64(*(int64x2_t *)v4434, v4471);
            v4483.i64[0] = vdupq_laneq_s64(v4476, 1).u64[0];
            v4483.i64[1] = *(_QWORD *)(v4434 + 248);
            v4444 = (int8x16_t)vzip1q_s64(v4468, v4469);
            v4443 = (int8x16_t)vzip1q_s64(v4474, *(int64x2_t *)(v4434 + 160));
            v4445 = (int8x16_t)vzip1q_s64(v4477, *(int64x2_t *)(v4434 + 256));
            v4447 = vextq_s8(v4445, v4445, 8uLL).u64[0];
            v4448 = vextq_s8(v4443, v4443, 8uLL).u64[0];
            v4449 = vextq_s8(v4444, v4444, 8uLL).u64[0];
            v4446 = (int8x16_t)vzip2q_s64(v4468, v4469);
            v4450.i64[0] = vdupq_laneq_s64(v4474, 1).u64[0];
            v4450.i64[1] = *(_QWORD *)(v4434 + 168);
            v4451.i64[0] = vdupq_laneq_s64(v4477, 1).u64[0];
            v4451.i64[1] = *(_QWORD *)(v4434 + 264);
            v4454 = vextq_s8(v4446, v4446, 8uLL).u64[0];
            v4452 = vextq_s8(v4451, v4451, 8uLL).u64[0];
            v4453 = vextq_s8(v4450, v4450, 8uLL).u64[0];
            v4456 = (int8x16_t)vzip1q_s64(v4472, v4470);
            v4455 = (int8x16_t)vzip1q_s64(v4475, *(int64x2_t *)(v4434 + 176));
            v4458 = (int8x16_t)vzip1q_s64(v4478, *(int64x2_t *)(v4434 + 272));
            v4459 = vextq_s8(v4458, v4458, 8uLL).u64[0];
            v4460 = vextq_s8(v4455, v4455, 8uLL).u64[0];
            v4461 = vextq_s8(v4456, v4456, 8uLL).u64[0];
            v4457 = (int8x16_t)vzip2q_s64(v4472, v4470);
            v4462.i64[0] = vdupq_laneq_s64(v4475, 1).u64[0];
            v4462.i64[1] = *(_QWORD *)(v4434 + 184);
            v4463.i64[0] = vdupq_laneq_s64(v4478, 1).u64[0];
            v4463.i64[1] = *(_QWORD *)(v4434 + 280);
            v4466 = vextq_s8(v4457, v4457, 8uLL).u64[0];
            v4464 = vextq_s8(v4463, v4463, 8uLL).u64[0];
            v4465 = vextq_s8(v4462, v4462, 8uLL).u64[0];
            v4438[1] = v4480;
            v4438[2] = v4481;
            *v4438 = v4479;
            v4467 = (int64x2_t *)((char *)v4438 + 8 * v4435);
            v4467[1] = v4482;
            v4467[2] = v4483;
          }
          *v4467 = v4440;
          v4444.i64[1] = v4449;
          v4443.i64[1] = v4448;
          v4484 = (int8x16_t *)&v4438[v4435];
          *v4484 = v4444;
          v4484[1] = v4443;
          v4445.i64[1] = v4447;
          v4484[2] = v4445;
          v4485 = (int8x16_t *)((char *)v4438 + 24 * v4435);
          v4451.i64[1] = v4452;
          v4450.i64[1] = v4453;
          v4446.i64[1] = v4454;
          v4485[1] = v4450;
          v4485[2] = v4451;
          *v4485 = v4446;
          v4486 = (int8x16_t *)&v4438[2 * v4435];
          v4458.i64[1] = v4459;
          v4455.i64[1] = v4460;
          v4456.i64[1] = v4461;
          v4486[1] = v4455;
          v4486[2] = v4458;
          *v4486 = v4456;
          v4487 = (int8x16_t *)((char *)v4438 + 40 * v4435);
          v4463.i64[1] = v4464;
          v4462.i64[1] = v4465;
          v4487[1] = v4462;
          v4487[2] = v4463;
          v4457.i64[1] = v4466;
          v4488 = v4427 + 1;
          *v4487 = v4457;
          while (v4488 != v4430)
          {
            ++v4429;
            v4489 = *v4488++;
            v4431 = v4489;
            if (v4489 != -1)
            {
              v4427 = v4488 - 1;
              goto LABEL_2006;
            }
          }
          v4422 = *(_DWORD *)(result + 12);
        }
      }
      ++v4423;
      ++v4424;
    }
    while (v4423 < v4422);
    v1958 = *a5;
  }
  v4493 = *(_DWORD *)(result + 1452);
  if (v4493)
  {
    v4494 = 0;
    v4495 = a4[3];
    do
    {
      v4496 = *(_QWORD *)(result + 1528);
      v4497 = *(_DWORD *)(result + 1552) * v4494;
      v4498 = (uint64_t *)(v4496 + 8 * v4497);
      v4499 = *(_DWORD *)(result + 1448);
      if (v4499 && *v4498 == -1)
      {
        v4500 = 0;
        v4579 = 8 * (v4499 + v4497) - 8 * v4497 - 8;
        v4580 = v4496 + 8 * v4497;
        while (v4579)
        {
          v4498 = (uint64_t *)(v4580 + 8);
          ++v4500;
          v4581 = *(_QWORD *)(v4580 + 8);
          v4579 -= 8;
          v4580 += 8;
          if (v4581 != -1)
            goto LABEL_2026;
        }
      }
      else
      {
        v4500 = 0;
LABEL_2026:
        v4501 = (uint64_t *)(v4496 + 8 * (v4497 + v4499));
        if (v4498 != v4501)
        {
          v4502 = *v4498;
LABEL_2028:
          v4503 = *v4495;
          v4504 = *(_DWORD *)(*a3 + 4 * v4500);
          v4505 = *(_QWORD *)(result + 1456) + 8 * v4502;
          v4506 = *((unsigned int *)a2 + 4);
          v4507 = *a2;
          if (v1958 && v4503 < v4504)
          {
            v4508 = *(int64x2_t *)v4505;
            v4509 = (int64x2_t *)(v4507 + 8 * (v4504 + (_DWORD)v4506 * v4503));
            v4510 = *(int64x2_t *)(v4505 + 32);
            v4511 = *(_OWORD *)(v4505 + 48);
            v4512 = *(_OWORD *)(v4505 + 64);
            v4513 = *(_OWORD *)(v4505 + 80);
            v4514 = *(int64x2_t *)(v4505 + 96);
            v4515 = *(int64x2_t *)(v4505 + 112);
            v4516 = *(int64x2_t *)(v4505 + 128);
            v4517 = *(_OWORD *)(v4505 + 144);
            v4518 = *(_OWORD *)(v4505 + 160);
            v4519 = *(_OWORD *)(v4505 + 176);
            v4520 = *(int64x2_t *)(v4505 + 192);
            v4521 = *(int64x2_t *)(v4505 + 208);
            v4522 = *(int64x2_t *)(v4505 + 224);
            v4523 = *(_OWORD *)(v4505 + 240);
            v4524 = *(_OWORD *)(v4505 + 256);
            v4525 = *(_OWORD *)(v4505 + 272);
            v4526 = *(int64x2_t *)(v4505 + 288);
            v4527 = *(int64x2_t *)(v4505 + 304);
            v4528 = *(int64x2_t *)(v4505 + 320);
            v4529 = *(_OWORD *)(v4505 + 336);
            v4530 = *(_OWORD *)(v4505 + 352);
            v4531 = *(_OWORD *)(v4505 + 368);
            v4532 = *(int64x2_t *)(v4505 + 384);
            v4533 = *(int64x2_t *)(v4505 + 400);
            v4534 = *(int64x2_t *)(v4505 + 416);
            v4509[1] = *(int64x2_t *)(v4505 + 16);
            v4509[2] = v4510;
            *v4509 = v4508;
            v4535 = &v4509->i8[8 * v4506];
            *((_OWORD *)v4535 + 1) = v4512;
            *((_OWORD *)v4535 + 2) = v4513;
            *(_OWORD *)v4535 = v4511;
            v4536 = &v4509[v4506];
            v4536[1] = v4515;
            v4536[2] = v4516;
            *v4536 = v4514;
            v4537 = &v4509->i8[24 * v4506];
            *((_OWORD *)v4537 + 1) = v4518;
            *((_OWORD *)v4537 + 2) = v4519;
            *(_OWORD *)v4537 = v4517;
            v4538 = &v4509[2 * v4506];
            v4538[1] = v4521;
            v4538[2] = v4522;
            *v4538 = v4520;
            v4539 = &v4509->i8[40 * v4506];
            *((_OWORD *)v4539 + 1) = v4524;
            *((_OWORD *)v4539 + 2) = v4525;
            *(_OWORD *)v4539 = v4523;
            v4540 = &v4509[3 * v4506];
            v4540[1] = v4527;
            v4540[2] = v4528;
            *v4540 = v4526;
            v4541 = &v4509->i8[56 * v4506];
            *((_OWORD *)v4541 + 1) = v4530;
            *((_OWORD *)v4541 + 2) = v4531;
            *(_OWORD *)v4541 = v4529;
            v4542 = &v4509[4 * v4506];
            v4542[1] = v4533;
            v4542[2] = v4534;
            *v4542 = v4532;
          }
          else
          {
            v4543 = *(int64x2_t *)(v4505 + 16);
            v4544 = (int64x2_t *)(v4507 + 8 * (v4503 + (_DWORD)v4506 * v4504));
            v4546 = *(int64x2_t *)(v4505 + 64);
            v4545 = *(int64x2_t *)(v4505 + 80);
            v4547 = *(int64x2_t *)(v4505 + 32);
            v4548 = *(int64x2_t *)(v4505 + 48);
            v4550 = *(int64x2_t *)(v4505 + 96);
            v4549 = *(int64x2_t *)(v4505 + 112);
            v4552 = *(int64x2_t *)(v4505 + 160);
            v4551 = *(int64x2_t *)(v4505 + 176);
            v4553 = *(int64x2_t *)(v4505 + 128);
            v4554 = *(int64x2_t *)(v4505 + 144);
            v4556 = *(int64x2_t *)(v4505 + 192);
            v4555 = *(int64x2_t *)(v4505 + 208);
            v4558 = *(int64x2_t *)(v4505 + 256);
            v4557 = *(int64x2_t *)(v4505 + 272);
            v4559 = *(int64x2_t *)(v4505 + 224);
            v4560 = *(int64x2_t *)(v4505 + 240);
            v4562 = *(int64x2_t *)(v4505 + 288);
            v4561 = *(int64x2_t *)(v4505 + 304);
            v4564 = *(int64x2_t *)(v4505 + 352);
            v4563 = *(int64x2_t *)(v4505 + 368);
            v4566 = *(int64x2_t *)(v4505 + 320);
            v4565 = *(int64x2_t *)(v4505 + 336);
            v4568 = *(_OWORD *)(v4505 + 400);
            v4567 = *(_OWORD *)(v4505 + 416);
            v4569 = *(_OWORD *)(v4505 + 384);
            v4570 = vzip1q_s64(*(int64x2_t *)v4505, v4548);
            v4571 = vzip2q_s64(*(int64x2_t *)v4505, v4548);
            v4544[2] = vzip1q_s64(v4556, v4560);
            v4544[3] = vzip1q_s64(v4562, v4565);
            v4544[4].i64[0] = v4569;
            *v4544 = v4570;
            v4544[1] = vzip1q_s64(v4550, v4554);
            v4572 = (int64x2_t *)((char *)v4544 + 8 * v4506);
            v4572[2] = vzip2q_s64(v4556, v4560);
            v4572[3] = vzip2q_s64(v4562, v4565);
            *v4572 = v4571;
            v4572[1] = vzip2q_s64(v4550, v4554);
            v4572[4].i64[0] = *((_QWORD *)&v4569 + 1);
            v4573 = &v4544[v4506];
            v4573[4].i64[0] = v4568;
            v4573[2] = vzip1q_s64(v4555, v4558);
            v4573[3] = vzip1q_s64(v4561, v4564);
            *v4573 = vzip1q_s64(v4543, v4546);
            v4573[1] = vzip1q_s64(v4549, v4552);
            v4574 = (int64x2_t *)((char *)v4544 + 24 * v4506);
            v4574[4].i64[0] = *((_QWORD *)&v4568 + 1);
            v4574[2] = vzip2q_s64(v4555, v4558);
            v4574[3] = vzip2q_s64(v4561, v4564);
            *v4574 = vzip2q_s64(v4543, v4546);
            v4574[1] = vzip2q_s64(v4549, v4552);
            v4575 = &v4544[2 * v4506];
            v4575[4].i64[0] = v4567;
            v4575[2] = vzip1q_s64(v4559, v4557);
            v4575[3] = vzip1q_s64(v4566, v4563);
            *v4575 = vzip1q_s64(v4547, v4545);
            v4575[1] = vzip1q_s64(v4553, v4551);
            v4576 = (int64x2_t *)((char *)v4544 + 40 * v4506);
            v4576[4].i64[0] = *((_QWORD *)&v4567 + 1);
            v4576[2] = vzip2q_s64(v4559, v4557);
            v4576[3] = vzip2q_s64(v4566, v4563);
            *v4576 = vzip2q_s64(v4547, v4545);
            v4576[1] = vzip2q_s64(v4553, v4551);
          }
          v4577 = v4498 + 1;
          while (v4577 != v4501)
          {
            ++v4500;
            v4578 = *v4577++;
            v4502 = v4578;
            if (v4578 != -1)
            {
              v4498 = v4577 - 1;
              goto LABEL_2028;
            }
          }
          v4493 = *(_DWORD *)(result + 1452);
        }
      }
      ++v4494;
      ++v4495;
    }
    while (v4494 < v4493);
    v1958 = *a5;
  }
  v4582 = *(_DWORD *)(result + 2892);
  if (v4582)
  {
    v4583 = 0;
    v4584 = a4[6];
    do
    {
      v4585 = *(_QWORD *)(result + 2968);
      v4586 = *(_DWORD *)(result + 2992) * v4583;
      v4587 = (uint64_t *)(v4585 + 8 * v4586);
      v4588 = *(_DWORD *)(result + 2888);
      if (v4588 && *v4587 == -1)
      {
        v4589 = 0;
        v4650 = 8 * (v4588 + v4586) - 8 * v4586 - 8;
        v4651 = v4585 + 8 * v4586;
        while (v4650)
        {
          v4587 = (uint64_t *)(v4651 + 8);
          ++v4589;
          v4652 = *(_QWORD *)(v4651 + 8);
          v4650 -= 8;
          v4651 += 8;
          if (v4652 != -1)
            goto LABEL_2048;
        }
      }
      else
      {
        v4589 = 0;
LABEL_2048:
        v4590 = (uint64_t *)(v4585 + 8 * (v4586 + v4588));
        if (v4587 != v4590)
        {
          v4591 = *v4587;
LABEL_2050:
          v4592 = *v4584;
          v4593 = *(_DWORD *)(*a3 + 4 * v4589);
          v4594 = *(_QWORD *)(result + 2896) + 8 * v4591;
          v4595 = *((unsigned int *)a2 + 4);
          v4596 = *a2;
          if (v1958 && v4592 < v4593)
          {
            v4597 = *(int64x2_t *)v4594;
            v4598 = (int64x2_t *)(v4596 + 8 * (v4593 + (_DWORD)v4595 * v4592));
            v4599 = *(int64x2_t *)(v4594 + 32);
            v4600 = *(int64x2_t *)(v4594 + 48);
            v4601 = *(int64x2_t *)(v4594 + 64);
            v4602 = *(int64x2_t *)(v4594 + 80);
            v4604 = *(int8x16_t *)(v4594 + 96);
            v4603 = *(int8x16_t *)(v4594 + 112);
            v4605 = *(int8x16_t *)(v4594 + 128);
            v4606 = *(int8x16_t *)(v4594 + 144);
            v4607 = vextq_s8(v4605, v4605, 8uLL).u64[0];
            v4608 = vextq_s8(v4603, v4603, 8uLL).u64[0];
            v4609 = vextq_s8(v4604, v4604, 8uLL).u64[0];
            v4610 = *(int8x16_t *)(v4594 + 160);
            v4611 = *(int8x16_t *)(v4594 + 176);
            v4612 = vextq_s8(v4611, v4611, 8uLL).u64[0];
            v4613 = vextq_s8(v4610, v4610, 8uLL).u64[0];
            v4614 = vextq_s8(v4606, v4606, 8uLL).u64[0];
            v4616 = *(int8x16_t *)(v4594 + 192);
            v4615 = *(int8x16_t *)(v4594 + 208);
            v4618 = *(int8x16_t *)(v4594 + 224);
            v4617 = *(int8x16_t *)(v4594 + 240);
            v4619 = vextq_s8(v4618, v4618, 8uLL).u64[0];
            v4620 = vextq_s8(v4615, v4615, 8uLL).u64[0];
            v4621 = vextq_s8(v4616, v4616, 8uLL).u64[0];
            v4622 = *(int8x16_t *)(v4594 + 256);
            v4623 = *(int8x16_t *)(v4594 + 272);
            v4624 = vextq_s8(v4623, v4623, 8uLL).u64[0];
            v4625 = vextq_s8(v4622, v4622, 8uLL).u64[0];
            v4626 = vextq_s8(v4617, v4617, 8uLL).u64[0];
            v4598[1] = *(int64x2_t *)(v4594 + 16);
            v4598[2] = v4599;
            *v4598 = v4597;
            v4627 = (int64x2_t *)((char *)v4598 + 8 * v4595);
            v4627[1] = v4601;
            v4627[2] = v4602;
          }
          else
          {
            v4598 = (int64x2_t *)(v4596 + 8 * (v4592 + (_DWORD)v4595 * v4593));
            v4628 = *(int64x2_t *)(v4594 + 16);
            v4629 = *(int64x2_t *)(v4594 + 64);
            v4630 = *(int64x2_t *)(v4594 + 80);
            v4632 = *(int64x2_t *)(v4594 + 32);
            v4631 = *(int64x2_t *)(v4594 + 48);
            v4633 = *(int64x2_t *)(v4594 + 96);
            v4634 = *(int64x2_t *)(v4594 + 112);
            v4635 = *(int64x2_t *)(v4594 + 128);
            v4636 = *(int64x2_t *)(v4594 + 192);
            v4637 = *(int64x2_t *)(v4594 + 208);
            v4638 = *(int64x2_t *)(v4594 + 224);
            v4639 = vzip1q_s64(*(int64x2_t *)v4594, v4631);
            v4640 = vzip1q_s64(v4633, *(int64x2_t *)(v4594 + 144));
            v4641 = vzip1q_s64(v4636, *(int64x2_t *)(v4594 + 240));
            v4642.i64[0] = vdupq_laneq_s64(v4633, 1).u64[0];
            v4642.i64[1] = *(_QWORD *)(v4594 + 152);
            v4600 = vzip2q_s64(*(int64x2_t *)v4594, v4631);
            v4643.i64[0] = vdupq_laneq_s64(v4636, 1).u64[0];
            v4643.i64[1] = *(_QWORD *)(v4594 + 248);
            v4604 = (int8x16_t)vzip1q_s64(v4628, v4629);
            v4603 = (int8x16_t)vzip1q_s64(v4634, *(int64x2_t *)(v4594 + 160));
            v4605 = (int8x16_t)vzip1q_s64(v4637, *(int64x2_t *)(v4594 + 256));
            v4607 = vextq_s8(v4605, v4605, 8uLL).u64[0];
            v4608 = vextq_s8(v4603, v4603, 8uLL).u64[0];
            v4609 = vextq_s8(v4604, v4604, 8uLL).u64[0];
            v4606 = (int8x16_t)vzip2q_s64(v4628, v4629);
            v4610.i64[0] = vdupq_laneq_s64(v4634, 1).u64[0];
            v4610.i64[1] = *(_QWORD *)(v4594 + 168);
            v4611.i64[0] = vdupq_laneq_s64(v4637, 1).u64[0];
            v4611.i64[1] = *(_QWORD *)(v4594 + 264);
            v4614 = vextq_s8(v4606, v4606, 8uLL).u64[0];
            v4612 = vextq_s8(v4611, v4611, 8uLL).u64[0];
            v4613 = vextq_s8(v4610, v4610, 8uLL).u64[0];
            v4616 = (int8x16_t)vzip1q_s64(v4632, v4630);
            v4615 = (int8x16_t)vzip1q_s64(v4635, *(int64x2_t *)(v4594 + 176));
            v4618 = (int8x16_t)vzip1q_s64(v4638, *(int64x2_t *)(v4594 + 272));
            v4619 = vextq_s8(v4618, v4618, 8uLL).u64[0];
            v4620 = vextq_s8(v4615, v4615, 8uLL).u64[0];
            v4621 = vextq_s8(v4616, v4616, 8uLL).u64[0];
            v4617 = (int8x16_t)vzip2q_s64(v4632, v4630);
            v4622.i64[0] = vdupq_laneq_s64(v4635, 1).u64[0];
            v4622.i64[1] = *(_QWORD *)(v4594 + 184);
            v4623.i64[0] = vdupq_laneq_s64(v4638, 1).u64[0];
            v4623.i64[1] = *(_QWORD *)(v4594 + 280);
            v4626 = vextq_s8(v4617, v4617, 8uLL).u64[0];
            v4624 = vextq_s8(v4623, v4623, 8uLL).u64[0];
            v4625 = vextq_s8(v4622, v4622, 8uLL).u64[0];
            v4598[1] = v4640;
            v4598[2] = v4641;
            *v4598 = v4639;
            v4627 = (int64x2_t *)((char *)v4598 + 8 * v4595);
            v4627[1] = v4642;
            v4627[2] = v4643;
          }
          *v4627 = v4600;
          v4604.i64[1] = v4609;
          v4603.i64[1] = v4608;
          v4644 = (int8x16_t *)&v4598[v4595];
          *v4644 = v4604;
          v4644[1] = v4603;
          v4605.i64[1] = v4607;
          v4644[2] = v4605;
          v4645 = (int8x16_t *)((char *)v4598 + 24 * v4595);
          v4611.i64[1] = v4612;
          v4610.i64[1] = v4613;
          v4606.i64[1] = v4614;
          v4645[1] = v4610;
          v4645[2] = v4611;
          *v4645 = v4606;
          v4646 = (int8x16_t *)&v4598[2 * v4595];
          v4618.i64[1] = v4619;
          v4615.i64[1] = v4620;
          v4616.i64[1] = v4621;
          v4646[1] = v4615;
          v4646[2] = v4618;
          *v4646 = v4616;
          v4647 = (int8x16_t *)((char *)v4598 + 40 * v4595);
          v4623.i64[1] = v4624;
          v4622.i64[1] = v4625;
          v4647[1] = v4622;
          v4647[2] = v4623;
          v4617.i64[1] = v4626;
          v4648 = v4587 + 1;
          *v4647 = v4617;
          while (v4648 != v4590)
          {
            ++v4589;
            v4649 = *v4648++;
            v4591 = v4649;
            if (v4649 != -1)
            {
              v4587 = v4648 - 1;
              goto LABEL_2050;
            }
          }
          v4582 = *(_DWORD *)(result + 2892);
        }
      }
      ++v4583;
      ++v4584;
    }
    while (v4583 < v4582);
    v1958 = *a5;
  }
  v4653 = *(_DWORD *)(result + 4332);
  if (v4653)
  {
    v4654 = 0;
    v4655 = a4[9];
    do
    {
      v4656 = *(_QWORD *)(result + 4408);
      v4657 = *(_DWORD *)(result + 4432) * v4654;
      v4658 = (uint64_t *)(v4656 + 8 * v4657);
      v4659 = *(_DWORD *)(result + 4328);
      if (v4659 && *v4658 == -1)
      {
        v4660 = 0;
        v4721 = 8 * (v4659 + v4657) - 8 * v4657 - 8;
        v4722 = v4656 + 8 * v4657;
        while (v4721)
        {
          v4658 = (uint64_t *)(v4722 + 8);
          ++v4660;
          v4723 = *(_QWORD *)(v4722 + 8);
          v4721 -= 8;
          v4722 += 8;
          if (v4723 != -1)
            goto LABEL_2070;
        }
      }
      else
      {
        v4660 = 0;
LABEL_2070:
        v4661 = (uint64_t *)(v4656 + 8 * (v4657 + v4659));
        if (v4658 != v4661)
        {
          v4662 = *v4658;
LABEL_2072:
          v4663 = *v4655;
          v4664 = *(_DWORD *)(*a3 + 4 * v4660);
          v4665 = *(_QWORD *)(result + 4336) + 8 * v4662;
          v4666 = *((unsigned int *)a2 + 4);
          v4667 = *a2;
          if (v1958 && v4663 < v4664)
          {
            v4668 = *(int64x2_t *)v4665;
            v4669 = (int64x2_t *)(v4667 + 8 * (v4664 + (_DWORD)v4666 * v4663));
            v4670 = *(int64x2_t *)(v4665 + 32);
            v4671 = *(int64x2_t *)(v4665 + 48);
            v4672 = *(int64x2_t *)(v4665 + 64);
            v4673 = *(int64x2_t *)(v4665 + 80);
            v4675 = *(int8x16_t *)(v4665 + 96);
            v4674 = *(int8x16_t *)(v4665 + 112);
            v4676 = *(int8x16_t *)(v4665 + 128);
            v4677 = *(int8x16_t *)(v4665 + 144);
            v4678 = vextq_s8(v4676, v4676, 8uLL).u64[0];
            v4679 = vextq_s8(v4674, v4674, 8uLL).u64[0];
            v4680 = vextq_s8(v4675, v4675, 8uLL).u64[0];
            v4681 = *(int8x16_t *)(v4665 + 160);
            v4682 = *(int8x16_t *)(v4665 + 176);
            v4683 = vextq_s8(v4682, v4682, 8uLL).u64[0];
            v4684 = vextq_s8(v4681, v4681, 8uLL).u64[0];
            v4685 = vextq_s8(v4677, v4677, 8uLL).u64[0];
            v4687 = *(int8x16_t *)(v4665 + 192);
            v4686 = *(int8x16_t *)(v4665 + 208);
            v4689 = *(int8x16_t *)(v4665 + 224);
            v4688 = *(int8x16_t *)(v4665 + 240);
            v4690 = vextq_s8(v4689, v4689, 8uLL).u64[0];
            v4691 = vextq_s8(v4686, v4686, 8uLL).u64[0];
            v4692 = vextq_s8(v4687, v4687, 8uLL).u64[0];
            v4693 = *(int8x16_t *)(v4665 + 256);
            v4694 = *(int8x16_t *)(v4665 + 272);
            v4695 = vextq_s8(v4694, v4694, 8uLL).u64[0];
            v4696 = vextq_s8(v4693, v4693, 8uLL).u64[0];
            v4697 = vextq_s8(v4688, v4688, 8uLL).u64[0];
            v4669[1] = *(int64x2_t *)(v4665 + 16);
            v4669[2] = v4670;
            *v4669 = v4668;
            v4698 = (int64x2_t *)((char *)v4669 + 8 * v4666);
            v4698[1] = v4672;
            v4698[2] = v4673;
          }
          else
          {
            v4669 = (int64x2_t *)(v4667 + 8 * (v4663 + (_DWORD)v4666 * v4664));
            v4699 = *(int64x2_t *)(v4665 + 16);
            v4700 = *(int64x2_t *)(v4665 + 64);
            v4701 = *(int64x2_t *)(v4665 + 80);
            v4703 = *(int64x2_t *)(v4665 + 32);
            v4702 = *(int64x2_t *)(v4665 + 48);
            v4704 = *(int64x2_t *)(v4665 + 96);
            v4705 = *(int64x2_t *)(v4665 + 112);
            v4706 = *(int64x2_t *)(v4665 + 128);
            v4707 = *(int64x2_t *)(v4665 + 192);
            v4708 = *(int64x2_t *)(v4665 + 208);
            v4709 = *(int64x2_t *)(v4665 + 224);
            v4710 = vzip1q_s64(*(int64x2_t *)v4665, v4702);
            v4711 = vzip1q_s64(v4704, *(int64x2_t *)(v4665 + 144));
            v4712 = vzip1q_s64(v4707, *(int64x2_t *)(v4665 + 240));
            v4713.i64[0] = vdupq_laneq_s64(v4704, 1).u64[0];
            v4713.i64[1] = *(_QWORD *)(v4665 + 152);
            v4671 = vzip2q_s64(*(int64x2_t *)v4665, v4702);
            v4714.i64[0] = vdupq_laneq_s64(v4707, 1).u64[0];
            v4714.i64[1] = *(_QWORD *)(v4665 + 248);
            v4675 = (int8x16_t)vzip1q_s64(v4699, v4700);
            v4674 = (int8x16_t)vzip1q_s64(v4705, *(int64x2_t *)(v4665 + 160));
            v4676 = (int8x16_t)vzip1q_s64(v4708, *(int64x2_t *)(v4665 + 256));
            v4678 = vextq_s8(v4676, v4676, 8uLL).u64[0];
            v4679 = vextq_s8(v4674, v4674, 8uLL).u64[0];
            v4680 = vextq_s8(v4675, v4675, 8uLL).u64[0];
            v4677 = (int8x16_t)vzip2q_s64(v4699, v4700);
            v4681.i64[0] = vdupq_laneq_s64(v4705, 1).u64[0];
            v4681.i64[1] = *(_QWORD *)(v4665 + 168);
            v4682.i64[0] = vdupq_laneq_s64(v4708, 1).u64[0];
            v4682.i64[1] = *(_QWORD *)(v4665 + 264);
            v4685 = vextq_s8(v4677, v4677, 8uLL).u64[0];
            v4683 = vextq_s8(v4682, v4682, 8uLL).u64[0];
            v4684 = vextq_s8(v4681, v4681, 8uLL).u64[0];
            v4687 = (int8x16_t)vzip1q_s64(v4703, v4701);
            v4686 = (int8x16_t)vzip1q_s64(v4706, *(int64x2_t *)(v4665 + 176));
            v4689 = (int8x16_t)vzip1q_s64(v4709, *(int64x2_t *)(v4665 + 272));
            v4690 = vextq_s8(v4689, v4689, 8uLL).u64[0];
            v4691 = vextq_s8(v4686, v4686, 8uLL).u64[0];
            v4692 = vextq_s8(v4687, v4687, 8uLL).u64[0];
            v4688 = (int8x16_t)vzip2q_s64(v4703, v4701);
            v4693.i64[0] = vdupq_laneq_s64(v4706, 1).u64[0];
            v4693.i64[1] = *(_QWORD *)(v4665 + 184);
            v4694.i64[0] = vdupq_laneq_s64(v4709, 1).u64[0];
            v4694.i64[1] = *(_QWORD *)(v4665 + 280);
            v4697 = vextq_s8(v4688, v4688, 8uLL).u64[0];
            v4695 = vextq_s8(v4694, v4694, 8uLL).u64[0];
            v4696 = vextq_s8(v4693, v4693, 8uLL).u64[0];
            v4669[1] = v4711;
            v4669[2] = v4712;
            *v4669 = v4710;
            v4698 = (int64x2_t *)((char *)v4669 + 8 * v4666);
            v4698[1] = v4713;
            v4698[2] = v4714;
          }
          *v4698 = v4671;
          v4675.i64[1] = v4680;
          v4674.i64[1] = v4679;
          v4715 = (int8x16_t *)&v4669[v4666];
          *v4715 = v4675;
          v4715[1] = v4674;
          v4676.i64[1] = v4678;
          v4715[2] = v4676;
          v4716 = (int8x16_t *)((char *)v4669 + 24 * v4666);
          v4682.i64[1] = v4683;
          v4681.i64[1] = v4684;
          v4677.i64[1] = v4685;
          v4716[1] = v4681;
          v4716[2] = v4682;
          *v4716 = v4677;
          v4717 = (int8x16_t *)&v4669[2 * v4666];
          v4689.i64[1] = v4690;
          v4686.i64[1] = v4691;
          v4687.i64[1] = v4692;
          v4717[1] = v4686;
          v4717[2] = v4689;
          *v4717 = v4687;
          v4718 = (int8x16_t *)((char *)v4669 + 40 * v4666);
          v4694.i64[1] = v4695;
          v4693.i64[1] = v4696;
          v4718[1] = v4693;
          v4718[2] = v4694;
          v4688.i64[1] = v4697;
          v4719 = v4658 + 1;
          *v4718 = v4688;
          while (v4719 != v4661)
          {
            ++v4660;
            v4720 = *v4719++;
            v4662 = v4720;
            if (v4720 != -1)
            {
              v4658 = v4719 - 1;
              goto LABEL_2072;
            }
          }
          v4653 = *(_DWORD *)(result + 4332);
        }
      }
      ++v4654;
      ++v4655;
    }
    while (v4654 < v4653);
    v1958 = *a5;
  }
  v4724 = *(_DWORD *)(result + 5772);
  if (v4724)
  {
    v4725 = 0;
    v4726 = a4[12];
    do
    {
      v4727 = *(_QWORD *)(result + 5848);
      v4728 = *(_DWORD *)(result + 5872) * v4725;
      v4729 = (uint64_t *)(v4727 + 8 * v4728);
      v4730 = *(_DWORD *)(result + 5768);
      if (v4730 && *v4729 == -1)
      {
        v4731 = 0;
        v4768 = 8 * (v4730 + v4728) - 8 * v4728 - 8;
        v4769 = v4727 + 8 * v4728;
        while (v4768)
        {
          v4729 = (uint64_t *)(v4769 + 8);
          ++v4731;
          v4770 = *(_QWORD *)(v4769 + 8);
          v4768 -= 8;
          v4769 += 8;
          if (v4770 != -1)
            goto LABEL_2092;
        }
      }
      else
      {
        v4731 = 0;
LABEL_2092:
        v4732 = (uint64_t *)(v4727 + 8 * (v4728 + v4730));
        if (v4729 != v4732)
        {
          v4733 = *v4729;
LABEL_2094:
          v4734 = *v4726;
          v4735 = *(_DWORD *)(*a3 + 4 * v4731);
          v4736 = *(_QWORD *)(result + 5776) + 8 * v4733;
          v4737 = *((unsigned int *)a2 + 4);
          v4738 = *a2;
          if (v1958 && v4734 < v4735)
          {
            v4739 = *(int64x2_t *)v4736;
            v4740 = (int64x2_t *)(v4738 + 8 * (v4735 + (_DWORD)v4737 * v4734));
            v4741 = *(int64x2_t *)(v4736 + 32);
            v4742 = *(_OWORD *)(v4736 + 48);
            v4743 = *(_OWORD *)(v4736 + 64);
            v4744 = *(_OWORD *)(v4736 + 80);
            v4745 = *(int64x2_t *)(v4736 + 96);
            v4746 = *(int64x2_t *)(v4736 + 112);
            v4747 = *(int64x2_t *)(v4736 + 128);
            v4740[1] = *(int64x2_t *)(v4736 + 16);
            v4740[2] = v4741;
            *v4740 = v4739;
            v4748 = &v4740->i8[8 * v4737];
            *((_OWORD *)v4748 + 1) = v4743;
            *((_OWORD *)v4748 + 2) = v4744;
            *(_OWORD *)v4748 = v4742;
            v4749 = &v4740[v4737];
            v4749[1] = v4746;
            v4749[2] = v4747;
            *v4749 = v4745;
          }
          else
          {
            v4750 = *(int64x2_t *)(v4736 + 16);
            v4751 = (int64x2_t *)(v4738 + 8 * (v4734 + (_DWORD)v4737 * v4735));
            v4753 = *(int64x2_t *)(v4736 + 64);
            v4752 = *(int64x2_t *)(v4736 + 80);
            v4754 = *(int64x2_t *)(v4736 + 32);
            v4755 = *(int64x2_t *)(v4736 + 48);
            v4757 = *(_OWORD *)(v4736 + 112);
            v4756 = *(_OWORD *)(v4736 + 128);
            v4758 = *(_OWORD *)(v4736 + 96);
            v4759 = vzip1q_s64(*(int64x2_t *)v4736, v4755);
            v4760 = vzip2q_s64(*(int64x2_t *)v4736, v4755);
            v4751[1].i64[0] = v4758;
            *v4751 = v4759;
            v4761 = (int64x2_t *)((char *)v4751 + 8 * v4737);
            *v4761 = v4760;
            v4761[1].i64[0] = *((_QWORD *)&v4758 + 1);
            v4762 = &v4751[v4737];
            v4762[1].i64[0] = v4757;
            *v4762 = vzip1q_s64(v4750, v4753);
            v4763 = (int64x2_t *)((char *)v4751 + 24 * v4737);
            v4763[1].i64[0] = *((_QWORD *)&v4757 + 1);
            *v4763 = vzip2q_s64(v4750, v4753);
            v4764 = &v4751[2 * v4737];
            v4764[1].i64[0] = v4756;
            *v4764 = vzip1q_s64(v4754, v4752);
            v4765 = (int64x2_t *)((char *)v4751 + 40 * v4737);
            v4765[1].i64[0] = *((_QWORD *)&v4756 + 1);
            *v4765 = vzip2q_s64(v4754, v4752);
          }
          v4766 = v4729 + 1;
          while (v4766 != v4732)
          {
            ++v4731;
            v4767 = *v4766++;
            v4733 = v4767;
            if (v4767 != -1)
            {
              v4729 = v4766 - 1;
              goto LABEL_2094;
            }
          }
          v4724 = *(_DWORD *)(result + 5772);
        }
      }
      ++v4725;
      ++v4726;
    }
    while (v4725 < v4724);
    v1958 = *a5;
  }
  v4771 = *(_DWORD *)(result + 7212);
  if (v4771)
  {
    v4772 = 0;
    v4773 = a4[15];
    do
    {
      v4774 = *(_QWORD *)(result + 7288);
      v4775 = *(_DWORD *)(result + 7312) * v4772;
      v4776 = (uint64_t *)(v4774 + 8 * v4775);
      v4777 = *(_DWORD *)(result + 7208);
      if (v4777 && *v4776 == -1)
      {
        v4778 = 0;
        v4796 = 8 * (v4777 + v4775) - 8 * v4775 - 8;
        v4797 = v4774 + 8 * v4775;
        while (v4796)
        {
          v4776 = (uint64_t *)(v4797 + 8);
          ++v4778;
          v4798 = *(_QWORD *)(v4797 + 8);
          v4796 -= 8;
          v4797 += 8;
          if (v4798 != -1)
            goto LABEL_2114;
        }
      }
      else
      {
        v4778 = 0;
LABEL_2114:
        v4779 = (uint64_t *)(v4774 + 8 * (v4775 + v4777));
        if (v4776 != v4779)
        {
          v4780 = *v4776;
LABEL_2116:
          v4781 = *v4773;
          v4782 = *(_DWORD *)(*a3 + 4 * v4778);
          v4783 = (int8x16_t *)(*(_QWORD *)(result + 7216) + 8 * v4780);
          v4784 = *((unsigned int *)a2 + 4);
          v4785 = *a2;
          v4787 = v4783[1];
          v4786 = v4783[2];
          v4788 = *v4783;
          v4789 = vextq_s8(v4786, v4786, 8uLL).u64[0];
          v4790 = vextq_s8(v4787, v4787, 8uLL).u64[0];
          v4791 = vextq_s8(v4788, v4788, 8uLL).u64[0];
          if (v1958 && v4781 < v4782)
          {
            v4788.i64[1] = v4791;
            v4787.i64[1] = v4790;
            v4792 = (int8x16_t *)(v4785 + 8 * (v4782 + (_DWORD)v4784 * v4781));
            *v4792 = v4788;
            v4792[1] = v4787;
            v4786.i64[1] = v4789;
            v4792[2] = v4786;
          }
          else
          {
            v4793 = (_QWORD *)(v4785 + 8 * (v4781 + (_DWORD)v4784 * v4782));
            *v4793 = v4788.i64[0];
            v4793[v4784] = v4791;
            v4793[2 * v4784] = v4787.i64[0];
            v4793[3 * v4784] = v4790;
            v4793[4 * v4784] = v4786.i64[0];
            v4793[5 * v4784] = v4789;
          }
          v4794 = v4776 + 1;
          while (v4794 != v4779)
          {
            ++v4778;
            v4795 = *v4794++;
            v4780 = v4795;
            if (v4795 != -1)
            {
              v4776 = v4794 - 1;
              goto LABEL_2116;
            }
          }
          v4771 = *(_DWORD *)(result + 7212);
        }
      }
      ++v4772;
      ++v4773;
    }
    while (v4772 < v4771);
    v1958 = *a5;
  }
  v4799 = *(_DWORD *)(result + 8652);
  if (v4799)
  {
    v4800 = 0;
    v4801 = a4[18];
    do
    {
      v4802 = *(_QWORD *)(result + 8728);
      v4803 = *(_DWORD *)(result + 8752) * v4800;
      v4804 = (uint64_t *)(v4802 + 8 * v4803);
      v4805 = *(_DWORD *)(result + 8648);
      if (v4805 && *v4804 == -1)
      {
        v4806 = 0;
        v4843 = 8 * (v4805 + v4803) - 8 * v4803 - 8;
        v4844 = v4802 + 8 * v4803;
        while (v4843)
        {
          v4804 = (uint64_t *)(v4844 + 8);
          ++v4806;
          v4845 = *(_QWORD *)(v4844 + 8);
          v4843 -= 8;
          v4844 += 8;
          if (v4845 != -1)
            goto LABEL_2136;
        }
      }
      else
      {
        v4806 = 0;
LABEL_2136:
        v4807 = (uint64_t *)(v4802 + 8 * (v4803 + v4805));
        if (v4804 != v4807)
        {
          v4808 = *v4804;
LABEL_2138:
          v4809 = *v4801;
          v4810 = *(_DWORD *)(*a3 + 4 * v4806);
          v4811 = *(_QWORD *)(result + 8656) + 8 * v4808;
          v4812 = *((unsigned int *)a2 + 4);
          v4813 = *a2;
          if (v1958 && v4809 < v4810)
          {
            v4814 = *(int64x2_t *)v4811;
            v4815 = (int64x2_t *)(v4813 + 8 * (v4810 + (_DWORD)v4812 * v4809));
            v4816 = *(int64x2_t *)(v4811 + 32);
            v4817 = *(_OWORD *)(v4811 + 48);
            v4818 = *(_OWORD *)(v4811 + 64);
            v4819 = *(_OWORD *)(v4811 + 80);
            v4820 = *(int64x2_t *)(v4811 + 96);
            v4821 = *(int64x2_t *)(v4811 + 112);
            v4822 = *(int64x2_t *)(v4811 + 128);
            v4815[1] = *(int64x2_t *)(v4811 + 16);
            v4815[2] = v4816;
            *v4815 = v4814;
            v4823 = &v4815->i8[8 * v4812];
            *((_OWORD *)v4823 + 1) = v4818;
            *((_OWORD *)v4823 + 2) = v4819;
            *(_OWORD *)v4823 = v4817;
            v4824 = &v4815[v4812];
            v4824[1] = v4821;
            v4824[2] = v4822;
            *v4824 = v4820;
          }
          else
          {
            v4825 = *(int64x2_t *)(v4811 + 16);
            v4826 = (int64x2_t *)(v4813 + 8 * (v4809 + (_DWORD)v4812 * v4810));
            v4828 = *(int64x2_t *)(v4811 + 64);
            v4827 = *(int64x2_t *)(v4811 + 80);
            v4829 = *(int64x2_t *)(v4811 + 32);
            v4830 = *(int64x2_t *)(v4811 + 48);
            v4832 = *(_OWORD *)(v4811 + 112);
            v4831 = *(_OWORD *)(v4811 + 128);
            v4833 = *(_OWORD *)(v4811 + 96);
            v4834 = vzip1q_s64(*(int64x2_t *)v4811, v4830);
            v4835 = vzip2q_s64(*(int64x2_t *)v4811, v4830);
            v4826[1].i64[0] = v4833;
            *v4826 = v4834;
            v4836 = (int64x2_t *)((char *)v4826 + 8 * v4812);
            *v4836 = v4835;
            v4836[1].i64[0] = *((_QWORD *)&v4833 + 1);
            v4837 = &v4826[v4812];
            v4837[1].i64[0] = v4832;
            *v4837 = vzip1q_s64(v4825, v4828);
            v4838 = (int64x2_t *)((char *)v4826 + 24 * v4812);
            v4838[1].i64[0] = *((_QWORD *)&v4832 + 1);
            *v4838 = vzip2q_s64(v4825, v4828);
            v4839 = &v4826[2 * v4812];
            v4839[1].i64[0] = v4831;
            *v4839 = vzip1q_s64(v4829, v4827);
            v4840 = (int64x2_t *)((char *)v4826 + 40 * v4812);
            v4840[1].i64[0] = *((_QWORD *)&v4831 + 1);
            *v4840 = vzip2q_s64(v4829, v4827);
          }
          v4841 = v4804 + 1;
          while (v4841 != v4807)
          {
            ++v4806;
            v4842 = *v4841++;
            v4808 = v4842;
            if (v4842 != -1)
            {
              v4804 = v4841 - 1;
              goto LABEL_2138;
            }
          }
          v4799 = *(_DWORD *)(result + 8652);
        }
      }
      ++v4800;
      ++v4801;
    }
    while (v4800 < v4799);
    v1958 = *a5;
  }
  v4846 = *(_DWORD *)(result + 10092);
  if (v4846)
  {
    v4847 = 0;
    v4848 = a4[21];
    do
    {
      v4849 = *(_QWORD *)(result + 10168);
      v4850 = *(_DWORD *)(result + 10192) * v4847;
      v4851 = (uint64_t *)(v4849 + 8 * v4850);
      v4852 = *(_DWORD *)(result + 10088);
      if (v4852 && *v4851 == -1)
      {
        v4853 = 0;
        v4896 = 8 * (v4852 + v4850) - 8 * v4850 - 8;
        v4897 = v4849 + 8 * v4850;
        while (v4896)
        {
          v4851 = (uint64_t *)(v4897 + 8);
          ++v4853;
          v4898 = *(_QWORD *)(v4897 + 8);
          v4896 -= 8;
          v4897 += 8;
          if (v4898 != -1)
            goto LABEL_2158;
        }
      }
      else
      {
        v4853 = 0;
LABEL_2158:
        v4854 = (uint64_t *)(v4849 + 8 * (v4850 + v4852));
        if (v4851 != v4854)
        {
          v4855 = *v4851;
LABEL_2160:
          v4856 = *v4848;
          v4857 = *(_DWORD *)(*a3 + 4 * v4853);
          v4858 = *(_QWORD *)(result + 10096) + 8 * v4855;
          v4859 = *((unsigned int *)a2 + 4);
          v4860 = *a2;
          if (v1958 && v4856 < v4857)
          {
            v4861 = *(int64x2_t *)v4858;
            v4862 = (int64x2_t *)(v4860 + 8 * (v4857 + (_DWORD)v4859 * v4856));
            v4863 = *(int64x2_t *)(v4858 + 32);
            v4864 = *(_OWORD *)(v4858 + 48);
            v4865 = *(_OWORD *)(v4858 + 64);
            v4866 = *(_OWORD *)(v4858 + 80);
            v4867 = *(int64x2_t *)(v4858 + 96);
            v4868 = *(int64x2_t *)(v4858 + 112);
            v4869 = *(int64x2_t *)(v4858 + 128);
            v4870 = *(_OWORD *)(v4858 + 144);
            v4871 = *(_OWORD *)(v4858 + 160);
            v4872 = *(_OWORD *)(v4858 + 176);
            v4862[1] = *(int64x2_t *)(v4858 + 16);
            v4862[2] = v4863;
            *v4862 = v4861;
            v4873 = &v4862->i8[8 * v4859];
            *((_OWORD *)v4873 + 1) = v4865;
            *((_OWORD *)v4873 + 2) = v4866;
            *(_OWORD *)v4873 = v4864;
            v4874 = &v4862[v4859];
            v4874[1] = v4868;
            v4874[2] = v4869;
            *v4874 = v4867;
            v4875 = &v4862->i8[24 * v4859];
            *((_OWORD *)v4875 + 1) = v4871;
            *((_OWORD *)v4875 + 2) = v4872;
            *(_OWORD *)v4875 = v4870;
          }
          else
          {
            v4876 = *(int64x2_t *)(v4858 + 16);
            v4877 = (int64x2_t *)(v4860 + 8 * (v4856 + (_DWORD)v4859 * v4857));
            v4879 = *(int64x2_t *)(v4858 + 64);
            v4878 = *(int64x2_t *)(v4858 + 80);
            v4880 = *(int64x2_t *)(v4858 + 32);
            v4881 = *(int64x2_t *)(v4858 + 48);
            v4883 = *(int64x2_t *)(v4858 + 96);
            v4882 = *(int64x2_t *)(v4858 + 112);
            v4885 = *(int64x2_t *)(v4858 + 160);
            v4884 = *(int64x2_t *)(v4858 + 176);
            v4886 = *(int64x2_t *)(v4858 + 128);
            v4887 = *(int64x2_t *)(v4858 + 144);
            v4888 = vzip2q_s64(*(int64x2_t *)v4858, v4881);
            *v4877 = vzip1q_s64(*(int64x2_t *)v4858, v4881);
            v4877[1] = vzip1q_s64(v4883, v4887);
            v4889 = (int64x2_t *)((char *)v4877 + 8 * v4859);
            *v4889 = v4888;
            v4889[1] = vzip2q_s64(v4883, v4887);
            v4890 = &v4877[v4859];
            *v4890 = vzip1q_s64(v4876, v4879);
            v4890[1] = vzip1q_s64(v4882, v4885);
            v4891 = (int64x2_t *)((char *)v4877 + 24 * v4859);
            *v4891 = vzip2q_s64(v4876, v4879);
            v4891[1] = vzip2q_s64(v4882, v4885);
            v4892 = &v4877[2 * v4859];
            *v4892 = vzip1q_s64(v4880, v4878);
            v4892[1] = vzip1q_s64(v4886, v4884);
            v4893 = (int64x2_t *)((char *)v4877 + 40 * v4859);
            *v4893 = vzip2q_s64(v4880, v4878);
            v4893[1] = vzip2q_s64(v4886, v4884);
          }
          v4894 = v4851 + 1;
          while (v4894 != v4854)
          {
            ++v4853;
            v4895 = *v4894++;
            v4855 = v4895;
            if (v4895 != -1)
            {
              v4851 = v4894 - 1;
              goto LABEL_2160;
            }
          }
          v4846 = *(_DWORD *)(result + 10092);
        }
      }
      ++v4847;
      ++v4848;
    }
    while (v4847 < v4846);
    v1958 = *a5;
  }
  v4899 = *(_DWORD *)(result + 11532);
  if (v4899)
  {
    v4900 = 0;
    v4901 = a4[24];
    do
    {
      v4902 = *(_QWORD *)(result + 11608);
      v4903 = *(_DWORD *)(result + 11632) * v4900;
      v4904 = (uint64_t *)(v4902 + 8 * v4903);
      v4905 = *(_DWORD *)(result + 11528);
      if (v4905 && *v4904 == -1)
      {
        v4906 = 0;
        v4949 = 8 * (v4905 + v4903) - 8 * v4903 - 8;
        v4950 = v4902 + 8 * v4903;
        while (v4949)
        {
          v4904 = (uint64_t *)(v4950 + 8);
          ++v4906;
          v4951 = *(_QWORD *)(v4950 + 8);
          v4949 -= 8;
          v4950 += 8;
          if (v4951 != -1)
            goto LABEL_2180;
        }
      }
      else
      {
        v4906 = 0;
LABEL_2180:
        v4907 = (uint64_t *)(v4902 + 8 * (v4903 + v4905));
        if (v4904 != v4907)
        {
          v4908 = *v4904;
LABEL_2182:
          v4909 = *v4901;
          v4910 = *(_DWORD *)(*a3 + 4 * v4906);
          v4911 = *(_QWORD *)(result + 11536) + 8 * v4908;
          v4912 = *((unsigned int *)a2 + 4);
          v4913 = *a2;
          if (v1958 && v4909 < v4910)
          {
            v4914 = *(int64x2_t *)v4911;
            v4915 = (int64x2_t *)(v4913 + 8 * (v4910 + (_DWORD)v4912 * v4909));
            v4916 = *(int64x2_t *)(v4911 + 32);
            v4917 = *(_OWORD *)(v4911 + 48);
            v4918 = *(_OWORD *)(v4911 + 64);
            v4919 = *(_OWORD *)(v4911 + 80);
            v4920 = *(int64x2_t *)(v4911 + 96);
            v4921 = *(int64x2_t *)(v4911 + 112);
            v4922 = *(int64x2_t *)(v4911 + 128);
            v4923 = *(_OWORD *)(v4911 + 144);
            v4924 = *(_OWORD *)(v4911 + 160);
            v4925 = *(_OWORD *)(v4911 + 176);
            v4915[1] = *(int64x2_t *)(v4911 + 16);
            v4915[2] = v4916;
            *v4915 = v4914;
            v4926 = &v4915->i8[8 * v4912];
            *((_OWORD *)v4926 + 1) = v4918;
            *((_OWORD *)v4926 + 2) = v4919;
            *(_OWORD *)v4926 = v4917;
            v4927 = &v4915[v4912];
            v4927[1] = v4921;
            v4927[2] = v4922;
            *v4927 = v4920;
            v4928 = &v4915->i8[24 * v4912];
            *((_OWORD *)v4928 + 1) = v4924;
            *((_OWORD *)v4928 + 2) = v4925;
            *(_OWORD *)v4928 = v4923;
          }
          else
          {
            v4929 = *(int64x2_t *)(v4911 + 16);
            v4930 = (int64x2_t *)(v4913 + 8 * (v4909 + (_DWORD)v4912 * v4910));
            v4932 = *(int64x2_t *)(v4911 + 64);
            v4931 = *(int64x2_t *)(v4911 + 80);
            v4933 = *(int64x2_t *)(v4911 + 32);
            v4934 = *(int64x2_t *)(v4911 + 48);
            v4936 = *(int64x2_t *)(v4911 + 96);
            v4935 = *(int64x2_t *)(v4911 + 112);
            v4938 = *(int64x2_t *)(v4911 + 160);
            v4937 = *(int64x2_t *)(v4911 + 176);
            v4939 = *(int64x2_t *)(v4911 + 128);
            v4940 = *(int64x2_t *)(v4911 + 144);
            v4941 = vzip2q_s64(*(int64x2_t *)v4911, v4934);
            *v4930 = vzip1q_s64(*(int64x2_t *)v4911, v4934);
            v4930[1] = vzip1q_s64(v4936, v4940);
            v4942 = (int64x2_t *)((char *)v4930 + 8 * v4912);
            *v4942 = v4941;
            v4942[1] = vzip2q_s64(v4936, v4940);
            v4943 = &v4930[v4912];
            *v4943 = vzip1q_s64(v4929, v4932);
            v4943[1] = vzip1q_s64(v4935, v4938);
            v4944 = (int64x2_t *)((char *)v4930 + 24 * v4912);
            *v4944 = vzip2q_s64(v4929, v4932);
            v4944[1] = vzip2q_s64(v4935, v4938);
            v4945 = &v4930[2 * v4912];
            *v4945 = vzip1q_s64(v4933, v4931);
            v4945[1] = vzip1q_s64(v4939, v4937);
            v4946 = (int64x2_t *)((char *)v4930 + 40 * v4912);
            *v4946 = vzip2q_s64(v4933, v4931);
            v4946[1] = vzip2q_s64(v4939, v4937);
          }
          v4947 = v4904 + 1;
          while (v4947 != v4907)
          {
            ++v4906;
            v4948 = *v4947++;
            v4908 = v4948;
            if (v4948 != -1)
            {
              v4904 = v4947 - 1;
              goto LABEL_2182;
            }
          }
          v4899 = *(_DWORD *)(result + 11532);
        }
      }
      ++v4900;
      ++v4901;
    }
    while (v4900 < v4899);
    v1958 = *a5;
  }
  v4952 = *(_DWORD *)(result + 12972);
  if (v4952)
  {
    v4953 = 0;
    v4954 = a4[27];
    do
    {
      v4955 = *(_QWORD *)(result + 13048);
      v4956 = *(_DWORD *)(result + 13072) * v4953;
      v4957 = (uint64_t *)(v4955 + 8 * v4956);
      v4958 = *(_DWORD *)(result + 12968);
      if (v4958 && *v4957 == -1)
      {
        v4959 = 0;
        v4996 = 8 * (v4958 + v4956) - 8 * v4956 - 8;
        v4997 = v4955 + 8 * v4956;
        while (v4996)
        {
          v4957 = (uint64_t *)(v4997 + 8);
          ++v4959;
          v4998 = *(_QWORD *)(v4997 + 8);
          v4996 -= 8;
          v4997 += 8;
          if (v4998 != -1)
            goto LABEL_2202;
        }
      }
      else
      {
        v4959 = 0;
LABEL_2202:
        v4960 = (uint64_t *)(v4955 + 8 * (v4956 + v4958));
        if (v4957 != v4960)
        {
          v4961 = *v4957;
LABEL_2204:
          v4962 = *v4954;
          v4963 = *(_DWORD *)(*a3 + 4 * v4959);
          v4964 = *(_QWORD *)(result + 12976) + 8 * v4961;
          v4965 = *((unsigned int *)a2 + 4);
          v4966 = *a2;
          if (v1958 && v4962 < v4963)
          {
            v4967 = *(int64x2_t *)v4964;
            v4968 = (int64x2_t *)(v4966 + 8 * (v4963 + (_DWORD)v4965 * v4962));
            v4969 = *(int64x2_t *)(v4964 + 32);
            v4970 = *(_OWORD *)(v4964 + 48);
            v4971 = *(_OWORD *)(v4964 + 64);
            v4972 = *(_OWORD *)(v4964 + 80);
            v4973 = *(int64x2_t *)(v4964 + 96);
            v4974 = *(int64x2_t *)(v4964 + 112);
            v4975 = *(int64x2_t *)(v4964 + 128);
            v4968[1] = *(int64x2_t *)(v4964 + 16);
            v4968[2] = v4969;
            *v4968 = v4967;
            v4976 = &v4968->i8[8 * v4965];
            *((_OWORD *)v4976 + 1) = v4971;
            *((_OWORD *)v4976 + 2) = v4972;
            *(_OWORD *)v4976 = v4970;
            v4977 = &v4968[v4965];
            v4977[1] = v4974;
            v4977[2] = v4975;
            *v4977 = v4973;
          }
          else
          {
            v4978 = *(int64x2_t *)(v4964 + 16);
            v4979 = (int64x2_t *)(v4966 + 8 * (v4962 + (_DWORD)v4965 * v4963));
            v4981 = *(int64x2_t *)(v4964 + 64);
            v4980 = *(int64x2_t *)(v4964 + 80);
            v4982 = *(int64x2_t *)(v4964 + 32);
            v4983 = *(int64x2_t *)(v4964 + 48);
            v4985 = *(_OWORD *)(v4964 + 112);
            v4984 = *(_OWORD *)(v4964 + 128);
            v4986 = *(_OWORD *)(v4964 + 96);
            v4987 = vzip1q_s64(*(int64x2_t *)v4964, v4983);
            v4988 = vzip2q_s64(*(int64x2_t *)v4964, v4983);
            v4979[1].i64[0] = v4986;
            *v4979 = v4987;
            v4989 = (int64x2_t *)((char *)v4979 + 8 * v4965);
            *v4989 = v4988;
            v4989[1].i64[0] = *((_QWORD *)&v4986 + 1);
            v4990 = &v4979[v4965];
            v4990[1].i64[0] = v4985;
            *v4990 = vzip1q_s64(v4978, v4981);
            v4991 = (int64x2_t *)((char *)v4979 + 24 * v4965);
            v4991[1].i64[0] = *((_QWORD *)&v4985 + 1);
            *v4991 = vzip2q_s64(v4978, v4981);
            v4992 = &v4979[2 * v4965];
            v4992[1].i64[0] = v4984;
            *v4992 = vzip1q_s64(v4982, v4980);
            v4993 = (int64x2_t *)((char *)v4979 + 40 * v4965);
            v4993[1].i64[0] = *((_QWORD *)&v4984 + 1);
            *v4993 = vzip2q_s64(v4982, v4980);
          }
          v4994 = v4957 + 1;
          while (v4994 != v4960)
          {
            ++v4959;
            v4995 = *v4994++;
            v4961 = v4995;
            if (v4995 != -1)
            {
              v4957 = v4994 - 1;
              goto LABEL_2204;
            }
          }
          v4952 = *(_DWORD *)(result + 12972);
        }
      }
      ++v4953;
      ++v4954;
    }
    while (v4953 < v4952);
  }
  return result;
}

__n128 sub_20FB40000(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 result;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  __n128 *v38;
  __n128 *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  __n128 *v47;
  __n128 *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  _OWORD *v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  _OWORD *v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  __n128 *v67;
  __n128 *v68;

  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = *(_DWORD *)(a2 + 64);
    v6 = 4 * v3;
    do
    {
      v7 = *(_QWORD *)a2 + 8 * v5;
      v8 = *a3 + 8 * *(unsigned int *)(*a1 + v4);
      result = *(__n128 *)(v7 + 32);
      v10 = *(_OWORD *)v7;
      *(_OWORD *)(v8 + 16) = *(_OWORD *)(v7 + 16);
      *(__n128 *)(v8 + 32) = result;
      *(_OWORD *)v8 = v10;
      v4 += 4;
      v5 += 6;
    }
    while (v6 != v4);
  }
  v11 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v11)
  {
    v12 = 0;
    v13 = *(_DWORD *)(a2 + 68);
    v14 = 4 * v11;
    do
    {
      v15 = *(_QWORD *)a2 + 8 * v13;
      v16 = *a3 + 8 * *(unsigned int *)(a1[3] + v12);
      result.n128_u64[0] = *(_QWORD *)(v15 + 64);
      v17 = *(_OWORD *)(v15 + 48);
      v18 = *(_OWORD *)v15;
      v19 = *(_OWORD *)(v15 + 16);
      *(_OWORD *)(v16 + 32) = *(_OWORD *)(v15 + 32);
      *(_OWORD *)(v16 + 48) = v17;
      *(_QWORD *)(v16 + 64) = result.n128_u64[0];
      *(_OWORD *)v16 = v18;
      *(_OWORD *)(v16 + 16) = v19;
      v12 += 4;
      v13 += 9;
    }
    while (v14 != v12);
  }
  v20 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v20)
  {
    v21 = 0;
    v22 = *(_DWORD *)(a2 + 72);
    v23 = 4 * v20;
    do
    {
      v24 = *(_QWORD *)a2 + 8 * v22;
      v25 = *a3 + 8 * *(unsigned int *)(a1[6] + v21);
      result = *(__n128 *)(v24 + 32);
      v26 = *(_OWORD *)v24;
      *(_OWORD *)(v25 + 16) = *(_OWORD *)(v24 + 16);
      *(__n128 *)(v25 + 32) = result;
      *(_OWORD *)v25 = v26;
      v21 += 4;
      v22 += 6;
    }
    while (v23 != v21);
  }
  v27 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v27)
  {
    v28 = 0;
    v29 = *(_DWORD *)(a2 + 76);
    v30 = 4 * v27;
    do
    {
      v31 = *(_QWORD *)a2 + 8 * v29;
      v32 = *a3 + 8 * *(unsigned int *)(a1[9] + v28);
      result = *(__n128 *)(v31 + 32);
      v33 = *(_OWORD *)v31;
      *(_OWORD *)(v32 + 16) = *(_OWORD *)(v31 + 16);
      *(__n128 *)(v32 + 32) = result;
      *(_OWORD *)v32 = v33;
      v28 += 4;
      v29 += 6;
    }
    while (v30 != v28);
  }
  v34 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v34)
  {
    v35 = 0;
    v36 = *(_DWORD *)(a2 + 80);
    v37 = 4 * v34;
    do
    {
      v38 = (__n128 *)(*(_QWORD *)a2 + 8 * v36);
      v39 = (__n128 *)(*a3 + 8 * *(unsigned int *)(a1[12] + v35));
      result = *v38;
      v39[1].n128_u64[0] = v38[1].n128_u64[0];
      *v39 = result;
      v35 += 4;
      v36 += 3;
    }
    while (v37 != v35);
  }
  v40 = *(unsigned int *)(a2 + 44);
  if ((_DWORD)v40)
  {
    v41 = 0;
    v42 = *(_DWORD *)(a2 + 84);
    do
    {
      result.n128_u64[0] = *(_QWORD *)(*(_QWORD *)a2 + 8 * (v42 + v41));
      *(_QWORD *)(*a3 + 8 * *(unsigned int *)(a1[15] + 4 * v41++)) = result.n128_u64[0];
    }
    while (v40 != v41);
  }
  v43 = *(unsigned int *)(a2 + 48);
  if ((_DWORD)v43)
  {
    v44 = 0;
    v45 = *(_DWORD *)(a2 + 88);
    v46 = 4 * v43;
    do
    {
      v47 = (__n128 *)(*(_QWORD *)a2 + 8 * v45);
      v48 = (__n128 *)(*a3 + 8 * *(unsigned int *)(a1[18] + v44));
      result = *v47;
      v48[1].n128_u64[0] = v47[1].n128_u64[0];
      *v48 = result;
      v44 += 4;
      v45 += 3;
    }
    while (v46 != v44);
  }
  v49 = *(unsigned int *)(a2 + 52);
  if ((_DWORD)v49)
  {
    v50 = 0;
    v51 = *(_DWORD *)(a2 + 92);
    v52 = 4 * v49;
    do
    {
      v53 = *(_QWORD *)a2 + 8 * (v51 + v50);
      v54 = (_OWORD *)(*a3 + 8 * *(unsigned int *)(a1[21] + v50));
      result = *(__n128 *)v53;
      v55 = *(_OWORD *)(v53 + 16);
      *v54 = *(_OWORD *)v53;
      v54[1] = v55;
      v50 += 4;
    }
    while (v52 != v50);
  }
  v56 = *(unsigned int *)(a2 + 56);
  if ((_DWORD)v56)
  {
    v57 = 0;
    v58 = *(_DWORD *)(a2 + 96);
    v59 = 4 * v56;
    do
    {
      v60 = *(_QWORD *)a2 + 8 * (v58 + v57);
      v61 = (_OWORD *)(*a3 + 8 * *(unsigned int *)(a1[24] + v57));
      result = *(__n128 *)v60;
      v62 = *(_OWORD *)(v60 + 16);
      *v61 = *(_OWORD *)v60;
      v61[1] = v62;
      v57 += 4;
    }
    while (v59 != v57);
  }
  v63 = *(unsigned int *)(a2 + 60);
  if ((_DWORD)v63)
  {
    v64 = 0;
    v65 = *(_DWORD *)(a2 + 100);
    v66 = 4 * v63;
    do
    {
      v67 = (__n128 *)(*(_QWORD *)a2 + 8 * v65);
      v68 = (__n128 *)(*a3 + 8 * *(unsigned int *)(a1[27] + v64));
      result = *v67;
      v68[1].n128_u64[0] = v67[1].n128_u64[0];
      *v68 = result;
      v64 += 4;
      v65 += 3;
    }
    while (v66 != v64);
  }
  return result;
}

_QWORD *sub_20FB402E0(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v2 = (void *)a1[79];
  if (v2)
  {
    a1[80] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[73];
  if (v3)
  {
    a1[74] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[62];
  if (v4)
  {
    a1[63] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[56];
  if (v5)
  {
    a1[57] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[45];
  if (v6)
  {
    a1[46] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[39];
  if (v7)
  {
    a1[40] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[28];
  if (v8)
  {
    a1[29] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[22];
  if (v9)
  {
    a1[23] = v9;
    operator delete(v9);
  }
  v10 = (void *)a1[11];
  if (v10)
  {
    a1[12] = v10;
    operator delete(v10);
  }
  v11 = (void *)a1[5];
  if (v11)
  {
    a1[6] = v11;
    operator delete(v11);
  }
  return a1;
}

uint64_t sub_20FB403A0(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v2 = *(_QWORD **)(a1 + 224);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 208);
  *(_QWORD *)(a1 + 208) = 0;
  if (v4)
    operator delete(v4);
  v5 = *(void **)(a1 + 120);
  if (v5)
  {
    *(_QWORD *)(a1 + 128) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 96);
  if (v6)
  {
    *(_QWORD *)(a1 + 104) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 72);
  if (v7)
  {
    *(_QWORD *)(a1 + 80) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 48);
  if (v8)
  {
    *(_QWORD *)(a1 + 56) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 24);
  if (v9)
  {
    *(_QWORD *)(a1 + 32) = v9;
    operator delete(v9);
  }
  v10 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v10;
    operator delete(v10);
  }
  return a1;
}

uint64_t sub_20FB40448(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  _QWORD *v10;
  void *v11;
  void *v12;
  _QWORD *v14;
  void *v15;

  v2 = *(_QWORD **)(a1 + 264);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 248);
  *(_QWORD *)(a1 + 248) = 0;
  if (v4)
    operator delete(v4);
  v5 = *(void **)(a1 + 160);
  if (v5)
  {
    *(_QWORD *)(a1 + 168) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 136);
  if (v6)
  {
    *(_QWORD *)(a1 + 144) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 112);
  if (v7)
  {
    *(_QWORD *)(a1 + 120) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 88);
  if (v8)
  {
    *(_QWORD *)(a1 + 96) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 64);
  if (v9)
  {
    *(_QWORD *)(a1 + 72) = v9;
    operator delete(v9);
  }
  v10 = *(_QWORD **)(a1 + 40);
  if (v10)
  {
    do
    {
      v14 = (_QWORD *)*v10;
      v15 = (void *)v10[3];
      if (v15)
      {
        v10[4] = v15;
        operator delete(v15);
      }
      operator delete(v10);
      v10 = v14;
    }
    while (v14);
  }
  v11 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v11)
    operator delete(v11);
  v12 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v12;
    operator delete(v12);
  }
  return a1;
}

uint64_t sub_20FB40538(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;

  v2 = *(_QWORD **)(a1 + 136);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 120);
  *(_QWORD *)(a1 + 120) = 0;
  if (v4)
    operator delete(v4);
  v5 = *(_QWORD **)(a1 + 96);
  if (v5)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = *(void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v7)
    operator delete(v7);
  v8 = *(_QWORD **)(a1 + 56);
  if (v8)
  {
    do
    {
      v9 = (_QWORD *)*v8;
      operator delete(v8);
      v8 = v9;
    }
    while (v9);
  }
  v10 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v10)
    operator delete(v10);
  v11 = *(_QWORD **)(a1 + 16);
  if (v11)
  {
    do
    {
      v12 = (_QWORD *)*v11;
      operator delete(v11);
      v11 = v12;
    }
    while (v12);
  }
  v13 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v13)
    operator delete(v13);
  return a1;
}

uint64_t sub_20FB405F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 1712);
  *(_QWORD *)(a1 + 1712) = 0;
  if (v2)
  {
    v3 = sub_20F89E430(v2);
    MEMORY[0x212BC6398](v3, 0x10F2C40C02BF4D9);
  }
  v4 = *(_QWORD *)(a1 + 1704);
  *(_QWORD *)(a1 + 1704) = 0;
  if (v4)
  {
    v5 = sub_20FA2A95C(v4);
    MEMORY[0x212BC6398](v5, 0x10F2C40CBD659A7);
  }
  if (*(char *)(a1 + 1479) < 0)
  {
    operator delete(*(void **)(a1 + 1456));
    if ((*(char *)(a1 + 1455) & 0x80000000) == 0)
    {
LABEL_7:
      if ((*(char *)(a1 + 1431) & 0x80000000) == 0)
        goto LABEL_8;
      goto LABEL_18;
    }
  }
  else if ((*(char *)(a1 + 1455) & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 1432));
  if ((*(char *)(a1 + 1431) & 0x80000000) == 0)
  {
LABEL_8:
    if ((*(char *)(a1 + 639) & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  operator delete(*(void **)(a1 + 1408));
  if ((*(char *)(a1 + 639) & 0x80000000) == 0)
  {
LABEL_9:
    if ((*(char *)(a1 + 615) & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  operator delete(*(void **)(a1 + 616));
  if ((*(char *)(a1 + 615) & 0x80000000) == 0)
  {
LABEL_10:
    if ((*(char *)(a1 + 591) & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_21;
  }
LABEL_20:
  operator delete(*(void **)(a1 + 592));
  if ((*(char *)(a1 + 591) & 0x80000000) == 0)
  {
LABEL_11:
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (!v6)
      goto LABEL_13;
    goto LABEL_12;
  }
LABEL_21:
  operator delete(*(void **)(a1 + 568));
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v6)
  {
LABEL_12:
    v7 = sub_20F89E430(v6);
    MEMORY[0x212BC6398](v7, 0x10F2C40C02BF4D9);
  }
LABEL_13:
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v8)
  {
    v9 = sub_20FA2A95C(v8);
    MEMORY[0x212BC6398](v9, 0x10F2C40CBD659A7);
  }
  return a1;
}

uint64_t sub_20FB40740(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  void *v14;

  if (*(_BYTE *)(a1 + 872))
  {
    v2 = *(void **)(a1 + 832);
    if (v2)
    {
      *(_QWORD *)(a1 + 840) = v2;
      operator delete(v2);
    }
    sub_20F04F084((_QWORD *)(a1 + 416));
  }
  *(_QWORD *)(a1 + 400) = 0;
  v3 = *(_QWORD *)(a1 + 384);
  if (v3 == a1 + 248 || v3 == 0)
  {
    *(_QWORD *)(a1 + 240) = 0;
    v5 = *(_QWORD *)(a1 + 224);
    if (v5 != a1 + 184 && v5 != 0)
    {
LABEL_26:
      MEMORY[0x212BC6368]();
      *(_QWORD *)(a1 + 176) = 0;
      v12 = *(_QWORD *)(a1 + 160);
      if (v12 != a1 + 120 && v12 != 0)
        goto LABEL_30;
LABEL_20:
      *(_QWORD *)(a1 + 112) = 0;
      v9 = *(_QWORD *)(a1 + 96);
      if (v9 == a1 + 56)
        goto LABEL_33;
      goto LABEL_31;
    }
  }
  else
  {
    MEMORY[0x212BC6368]();
    *(_QWORD *)(a1 + 240) = 0;
    v10 = *(_QWORD *)(a1 + 224);
    if (v10 != a1 + 184 && v10 != 0)
      goto LABEL_26;
  }
  *(_QWORD *)(a1 + 176) = 0;
  v7 = *(_QWORD *)(a1 + 160);
  if (v7 == a1 + 120 || v7 == 0)
    goto LABEL_20;
LABEL_30:
  MEMORY[0x212BC6368]();
  *(_QWORD *)(a1 + 112) = 0;
  v9 = *(_QWORD *)(a1 + 96);
  if (v9 == a1 + 56)
    goto LABEL_33;
LABEL_31:
  if (v9)
    MEMORY[0x212BC6368](v9, 0x1000C8000313F17);
LABEL_33:
  v14 = *(void **)(a1 + 8);
  if (v14)
  {
    *(_QWORD *)(a1 + 16) = v14;
    operator delete(v14);
  }
  return a1;
}

uint64_t sub_20FB4088C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20FB408F4(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  uint64_t v11;
  uint64_t result;

  v11 = qword_254A6B8B0;
  if (*(_BYTE *)(qword_254A6B8B0 + 24)
    && *(double *)qword_254A6B8B0 == a9
    && *(double *)(qword_254A6B8B0 + 8) == a10
    && *(double *)(qword_254A6B8B0 + 16) == a11)
  {
    return 0;
  }
  *(double *)qword_254A6B8B0 = a9;
  *(double *)(v11 + 8) = a10;
  *(double *)(v11 + 16) = a11;
  result = 1;
  *(_BYTE *)(v11 + 24) = 1;
  return result;
}

void sub_20FB40968(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA04470;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20FB40978(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA04470;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

_OWORD *sub_20FB409B0(void **a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  _OWORD *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;

  v3 = (char *)*a1;
  v2 = (char *)a1[1];
  v4 = (v2 - (_BYTE *)*a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    sub_20E867F44();
  v6 = (_BYTE *)a1[2] - v3;
  if (v6 >> 4 > v5)
    v5 = v6 >> 4;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0)
    v7 = 0x7FFFFFFFFFFFFFFLL;
  else
    v7 = v5;
  if (v7)
  {
    if (v7 >> 59)
      sub_20E877A38();
    v8 = (char *)operator new(32 * v7);
  }
  else
  {
    v8 = 0;
  }
  v9 = &v8[32 * v4];
  v10 = &v8[32 * v7];
  *(_OWORD *)v9 = 0u;
  *((_OWORD *)v9 + 1) = 0u;
  v11 = v9 + 32;
  if (v2 == v3)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
  }
  else
  {
    v12 = 0;
    do
    {
      v13 = &v9[v12];
      v14 = &v2[v12];
      *((_DWORD *)v13 - 8) = *(_DWORD *)&v2[v12 - 32];
      *((_QWORD *)v13 - 2) = 0;
      *((_QWORD *)v13 - 1) = 0;
      *(_OWORD *)(v13 - 24) = *(_OWORD *)&v2[v12 - 24];
      *((_QWORD *)v13 - 1) = *(_QWORD *)&v2[v12 - 8];
      *((_QWORD *)v14 - 3) = 0;
      *((_QWORD *)v14 - 2) = 0;
      *((_QWORD *)v14 - 1) = 0;
      v12 -= 32;
    }
    while (&v2[v12] != v3);
    v2 = (char *)*a1;
    v15 = (char *)a1[1];
    *a1 = &v9[v12];
    a1[1] = v11;
    a1[2] = v10;
    while (v15 != v2)
    {
      v16 = *((_QWORD *)v15 - 3);
      if (v16)
      {
        v17 = *((_QWORD *)v15 - 2);
        v18 = (void *)*((_QWORD *)v15 - 3);
        if (v17 != v16)
        {
          do
            v17 = sub_20EB8188C(v17 - 1664);
          while (v17 != v16);
          v18 = (void *)*((_QWORD *)v15 - 3);
        }
        *((_QWORD *)v15 - 2) = v16;
        operator delete(v18);
      }
      v15 -= 32;
    }
  }
  if (v2)
    operator delete(v2);
  return v11;
}

uint64_t sub_20FB40B10(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;

  v4 = a2;
  v6 = (void *)a1[2];
  v7 = *a1;
  if (v6 == (void *)*a1)
  {
    if (v6)
    {
      v10 = a1[1];
      v11 = v6;
      if ((void *)v10 != v6)
      {
        do
          v10 = sub_20EB8188C(v10 - 1664);
        while ((void *)v10 != v6);
        v11 = (void *)*a1;
      }
      a1[1] = (uint64_t)v6;
      operator delete(v11);
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    result = (uint64_t)operator new(0x680uLL);
    v7 = result;
    *a1 = result;
    a1[1] = result;
    a1[2] = result + 1664;
    if (v4 == a3)
      goto LABEL_20;
    v12 = 0;
    do
    {
      result = sub_20EB81E74(v7 + v12, v4 + v12);
      v12 += 1664;
    }
    while (v4 + v12 != a3);
    goto LABEL_19;
  }
  result = a1[1];
  if (result == v7)
  {
    if (a2 == a3)
    {
LABEL_20:
      a1[1] = v7;
      return result;
    }
    v12 = 0;
    do
    {
      result = sub_20EB81E74(v7 + v12, v4 + v12);
      v12 += 1664;
    }
    while (v4 + v12 != a3);
LABEL_19:
    v7 += v12;
    goto LABEL_20;
  }
  if (a2 == a3)
  {
    v9 = v7;
  }
  else
  {
    v9 = v7;
    do
    {
      sub_20EB8200C(v7, v4);
      v4 += 1664;
      v7 += 1664;
      v9 += 1664;
    }
    while (v4 != a3);
    result = a1[1];
  }
  while (result != v9)
    result = sub_20EB8188C(result - 1664);
  a1[1] = v9;
  return result;
}

void sub_20FB40C74(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  for (; v3; v3 -= 1664)
    sub_20EB8188C(v2 - 1664 + v3);
  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FB40CBC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;

  if (a3 != a2)
  {
    v3 = a1[1];
    if (v3)
    {
      v4 = v3 - 1;
      v5 = *a1;
      if ((v3 & (v3 - 1)) != 0)
      {
        do
        {
          v8 = *(_QWORD *)(a3 - 64);
          a3 -= 64;
          v7 = v8;
          v9 = *(unsigned int *)(a3 + 8);
          v10 = v9;
          if (v3 <= v9)
            v10 = v9 % v3;
          v11 = *(uint64_t **)(v5 + 8 * v10);
          if (v11)
          {
            while (1)
            {
              v11 = (uint64_t *)*v11;
              if (!v11)
                break;
              v12 = v11[1];
              if (v12 == v9)
              {
                if (v11[2] == v7 && *((_DWORD *)v11 + 6) == (_DWORD)v9)
                  return 1;
              }
              else
              {
                if (v12 >= v3)
                  v12 %= v3;
                if (v12 != v10)
                  break;
              }
            }
          }
        }
        while (a3 != a2);
      }
      else
      {
        v6 = v3 + 0xFFFFFFFF;
        do
        {
          v15 = *(_QWORD *)(a3 - 64);
          a3 -= 64;
          v14 = v15;
          v16 = *(unsigned int *)(a3 + 8);
          v17 = *(uint64_t **)(v5 + 8 * (v6 & v16));
          if (v17)
          {
            while (1)
            {
              v17 = (uint64_t *)*v17;
              if (!v17)
                break;
              v18 = v17[1];
              if (v18 == v16)
              {
                if (v17[2] == v14 && *((_DWORD *)v17 + 6) == (_DWORD)v16)
                  return 1;
              }
              else if ((v18 & v4) != (v6 & v16))
              {
                break;
              }
            }
          }
        }
        while (a3 != a2);
      }
    }
  }
  return 0;
}

uint64_t sub_20FB40DC4(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  _BOOL4 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  _BOOL4 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  _BOOL4 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  BOOL v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  BOOL v96;
  char v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int64_t v105;
  int64_t v106;
  int64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _BOOL4 v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  _BOOL4 v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v122;
  uint64_t *v123;
  int64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  int64_t v145;
  uint64_t v146;
  uint64_t *v148;

  v148 = (uint64_t *)result;
LABEL_2:
  v7 = v148;
  while (2)
  {
    v8 = a2;
LABEL_4:
    v148 = v7;
    v9 = (char *)v8 - (char *)v7;
    v10 = v8 - v7;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v80 = *(a2 - 1);
        v81 = *v7;
        result = sub_20FB41A2C(a3, v80, *v7);
        if ((_DWORD)result)
        {
          *v7 = v80;
          *(a2 - 1) = v81;
        }
        return result;
      case 3:
        v82 = *v7;
        v83 = v7[1];
        v84 = sub_20FB41A2C(a3, v83, *v7);
        v85 = *(a2 - 1);
        result = sub_20FB41A2C(a3, v85, v83);
        if (v84)
        {
          if ((_DWORD)result)
          {
            *v148 = v85;
            *(a2 - 1) = v82;
          }
          else
          {
            *v148 = v83;
            v148[1] = v82;
            v140 = *(a2 - 1);
            result = sub_20FB41A2C(a3, v140, v82);
            if ((_DWORD)result)
            {
              v148[1] = v140;
              *(a2 - 1) = v82;
            }
          }
        }
        else if ((_DWORD)result)
        {
          v148[1] = v85;
          *(a2 - 1) = v83;
          v94 = *v148;
          v91 = v148[1];
          goto LABEL_174;
        }
        return result;
      case 4:
        return sub_20FB421B0(v7, v7 + 1, v7 + 2, a2 - 1, a3);
      case 5:
        v86 = v7 + 1;
        v87 = v7 + 2;
        v88 = v7 + 3;
        sub_20FB421B0(v7, v7 + 1, v7 + 2, v7 + 3, a3);
        v89 = *(a2 - 1);
        v90 = v148[3];
        result = sub_20FB41A2C(a3, v89, v90);
        if ((_DWORD)result)
        {
          *v88 = v89;
          *(a2 - 1) = v90;
          v91 = *v88;
          v92 = *v87;
          result = sub_20FB41A2C(a3, *v88, *v87);
          if ((_DWORD)result)
          {
            *v87 = v91;
            *v88 = v92;
            v93 = *v86;
            result = sub_20FB41A2C(a3, v91, v93);
            if ((_DWORD)result)
            {
              v148[1] = v91;
              v148[2] = v93;
              v94 = *v148;
LABEL_174:
              result = sub_20FB41A2C(a3, v91, v94);
              if ((_DWORD)result)
              {
                *v148 = v91;
                v148[1] = v94;
              }
            }
          }
        }
        return result;
      default:
        if (v9 > 191)
        {
          if (!a4)
          {
            if (v7 != v8)
            {
              v142 = (char *)v8 - (char *)v7;
              v143 = v8 - v7;
              v105 = (unint64_t)(v10 - 2) >> 1;
              v106 = v105;
              do
              {
                v107 = v106;
                if (v105 >= v106)
                {
                  v108 = (2 * v106) | 1;
                  v109 = &v148[v108];
                  v110 = 2 * v106 + 2;
                  v145 = v106;
                  if (v110 >= v10)
                  {
                    v112 = *v109;
                  }
                  else
                  {
                    v111 = *v109;
                    v112 = v109[1];
                    v113 = sub_20FB41A2C(a3, *v109, v112);
                    v106 = v145;
                    if (v113)
                      ++v109;
                    else
                      v112 = v111;
                    if (v113)
                      v108 = v110;
                  }
                  v114 = &v148[v106];
                  v115 = *v114;
                  v107 = v106;
                  result = sub_20FB41A2C(a3, v112, *v114);
                  if ((result & 1) == 0)
                  {
                    while (1)
                    {
                      *v114 = v112;
                      v114 = v109;
                      if (v105 < v108)
                        break;
                      v118 = (2 * v108) | 1;
                      v109 = &v148[v118];
                      v119 = 2 * v108 + 2;
                      if (v119 < v10)
                      {
                        v112 = *v109;
                        v116 = v109[1];
                        v117 = sub_20FB41A2C(a3, *v109, v116);
                        if (v117)
                        {
                          v112 = v116;
                          ++v109;
                        }
                        v10 = v143;
                        if (v117)
                          v108 = v119;
                        else
                          v108 = v118;
                        result = sub_20FB41A2C(a3, v112, v115);
                        if ((_DWORD)result)
                          break;
                      }
                      else
                      {
                        v112 = *v109;
                        v108 = (2 * v108) | 1;
                        result = sub_20FB41A2C(a3, *v109, v115);
                        if ((_DWORD)result)
                          break;
                      }
                    }
                    *v114 = v115;
                    v107 = v145;
                  }
                }
                v106 = v107 - 1;
              }
              while (v107);
              v120 = v142 >> 3;
              do
              {
                v122 = 0;
                v123 = v148;
                v146 = *v148;
                v124 = (unint64_t)(v120 - 2) >> 1;
                do
                {
                  while (1)
                  {
                    v128 = &v123[v122 + 1];
                    v129 = (2 * v122) | 1;
                    v130 = 2 * v122 + 2;
                    if (v130 < v120)
                      break;
                    v122 = (2 * v122) | 1;
                    *v123 = *v128;
                    v123 = v128;
                    if (v129 > v124)
                      goto LABEL_166;
                  }
                  v125 = *v128;
                  v126 = v123[v122 + 2];
                  result = sub_20FB41A2C(a3, *v128, v126);
                  if ((_DWORD)result)
                    v127 = v126;
                  else
                    v127 = v125;
                  if ((_DWORD)result)
                  {
                    ++v128;
                    v122 = v130;
                  }
                  else
                  {
                    v122 = v129;
                  }
                  *v123 = v127;
                  v123 = v128;
                }
                while (v122 <= v124);
LABEL_166:
                v131 = a2 - 1;
                v96 = v128 == --a2;
                if (v96)
                {
                  *v128 = v146;
                }
                else
                {
                  *v128 = *v131;
                  *v131 = v146;
                  v132 = (char *)v128 - (char *)v148 + 8;
                  if (v132 >= 9)
                  {
                    v133 = (((unint64_t)v132 >> 3) - 2) >> 1;
                    v134 = &v148[v133];
                    v135 = *v134;
                    v136 = *v128;
                    result = sub_20FB41A2C(a3, *v134, *v128);
                    if ((_DWORD)result)
                    {
                      do
                      {
                        *v128 = v135;
                        v128 = v134;
                        if (!v133)
                          break;
                        v133 = (v133 - 1) >> 1;
                        v134 = &v148[v133];
                        v135 = *v134;
                        result = sub_20FB41A2C(a3, *v134, v136);
                      }
                      while ((result & 1) != 0);
                      *v128 = v136;
                    }
                  }
                }
              }
              while (v120-- > 2);
            }
            return result;
          }
          v11 = (unint64_t)v10 >> 1;
          v12 = &v7[(unint64_t)v10 >> 1];
          if ((unint64_t)v9 < 0x401)
          {
            v18 = *v7;
            v19 = *v12;
            v20 = sub_20FB41A2C(a3, *v148, *v12);
            v21 = *(v8 - 1);
            v22 = sub_20FB41A2C(a3, v21, v18);
            if (!v20)
            {
              if (v22)
              {
                *v148 = v21;
                *(v8 - 1) = v18;
                v25 = *v148;
                v26 = *v12;
                if (sub_20FB41A2C(a3, *v148, *v12))
                {
                  *v12 = v25;
                  *v148 = v26;
                  --a4;
                  v27 = *v148;
                  if ((a5 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
              goto LABEL_33;
            }
            if (v22)
            {
              *v12 = v21;
            }
            else
            {
              *v12 = v18;
              *v148 = v19;
              v39 = *(v8 - 1);
              if (!sub_20FB41A2C(a3, v39, v19))
                goto LABEL_33;
              *v148 = v39;
            }
            *(v8 - 1) = v19;
LABEL_33:
            --a4;
            v27 = *v148;
            if ((a5 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v13 = *v12;
          v14 = *v148;
          v15 = sub_20FB41A2C(a3, *v12, *v148);
          v16 = *(v8 - 1);
          v17 = sub_20FB41A2C(a3, v16, v13);
          v141 = a4;
          if (v15)
          {
            if (v17)
            {
              *v148 = v16;
            }
            else
            {
              *v148 = v13;
              *v12 = v14;
              v28 = *(v8 - 1);
              if (!sub_20FB41A2C(a3, v28, v14))
                goto LABEL_24;
              *v12 = v28;
            }
            *(v8 - 1) = v14;
          }
          else if (v17)
          {
            *v12 = v16;
            *(v8 - 1) = v13;
            v23 = *v12;
            v24 = *v148;
            if (sub_20FB41A2C(a3, *v12, *v148))
            {
              *v148 = v23;
              *v12 = v24;
            }
          }
LABEL_24:
          v29 = &v148[v11];
          v32 = *(v29 - 1);
          v31 = v29 - 1;
          v30 = v32;
          v33 = v148[1];
          v34 = sub_20FB41A2C(a3, v32, v33);
          v35 = *(v8 - 2);
          v36 = sub_20FB41A2C(a3, v35, v32);
          if (v34)
          {
            if (v36)
            {
              v148[1] = v35;
            }
            else
            {
              v148[1] = v30;
              *v31 = v33;
              v40 = *(v8 - 2);
              if (!sub_20FB41A2C(a3, v40, v33))
                goto LABEL_38;
              *v31 = v40;
            }
            *(v8 - 2) = v33;
          }
          else if (v36)
          {
            *v31 = v35;
            *(v8 - 2) = v30;
            v37 = *v31;
            v38 = v148[1];
            if (sub_20FB41A2C(a3, *v31, v38))
            {
              v148[1] = v37;
              *v31 = v38;
            }
          }
LABEL_38:
          v41 = &v148[v11];
          v44 = v41[1];
          v42 = v41 + 1;
          v43 = v44;
          v45 = v148[2];
          v46 = sub_20FB41A2C(a3, v44, v45);
          v47 = *(v8 - 3);
          v48 = sub_20FB41A2C(a3, v47, v44);
          if (v46)
          {
            if (v48)
            {
              v148[2] = v47;
            }
            else
            {
              v148[2] = v43;
              *v42 = v45;
              v51 = *(v8 - 3);
              if (!sub_20FB41A2C(a3, v51, v45))
                goto LABEL_47;
              *v42 = v51;
            }
            *(v8 - 3) = v45;
          }
          else if (v48)
          {
            *v42 = v47;
            *(v8 - 3) = v43;
            v49 = *v42;
            v50 = v148[2];
            if (sub_20FB41A2C(a3, *v42, v50))
            {
              v148[2] = v49;
              *v42 = v50;
            }
          }
LABEL_47:
          v52 = *v12;
          v53 = *v31;
          v54 = sub_20FB41A2C(a3, *v12, *v31);
          v55 = *v42;
          v56 = sub_20FB41A2C(a3, *v42, v52);
          if (v54)
          {
            if (!v56)
            {
              *v31 = v52;
              *v12 = v53;
              v31 = v12;
              v52 = v55;
              if (!sub_20FB41A2C(a3, v55, v53))
              {
                v52 = v53;
                goto LABEL_54;
              }
            }
LABEL_53:
            *v31 = v55;
            *v42 = v53;
            goto LABEL_54;
          }
          if (!v56)
            goto LABEL_54;
          *v12 = v55;
          *v42 = v52;
          v42 = v12;
          v52 = v53;
          if (sub_20FB41A2C(a3, v55, v53))
            goto LABEL_53;
          v52 = v55;
LABEL_54:
          v57 = *v148;
          *v148 = v52;
          *v12 = v57;
          a4 = v141 - 1;
          v27 = *v148;
          if ((a5 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if (!sub_20FB41A2C(a3, *(v148 - 1), v27))
          {
            result = sub_20FB41A2C(a3, v27, *(v8 - 1));
            if ((result & 1) != 0)
            {
              v7 = v148;
              do
              {
                v71 = v7[1];
                ++v7;
                result = sub_20FB41A2C(a3, v27, v71);
              }
              while ((result & 1) == 0);
            }
            else
            {
              v72 = v148 + 1;
              do
              {
                v7 = v72;
                if (v72 >= a2)
                  break;
                ++v72;
                result = sub_20FB41A2C(a3, v27, *v7);
              }
              while (!(_DWORD)result);
            }
            v73 = a2;
            if (v7 < a2)
            {
              v73 = a2;
              do
              {
                v74 = *--v73;
                result = sub_20FB41A2C(a3, v27, v74);
              }
              while ((result & 1) != 0);
            }
            if (v7 < v73)
            {
              v75 = *v7;
              v76 = *v73;
              do
              {
                *v7 = v76;
                *v73 = v75;
                do
                {
                  v77 = v7[1];
                  ++v7;
                  v75 = v77;
                }
                while (!sub_20FB41A2C(a3, v27, v77));
                do
                {
                  v78 = *--v73;
                  v76 = v78;
                  result = sub_20FB41A2C(a3, v27, v78);
                }
                while ((result & 1) != 0);
              }
              while (v7 < v73);
            }
            v79 = v7 - 1;
            if (v7 - 1 != v148)
              *v148 = *v79;
            a5 = 0;
            *v79 = v27;
            continue;
          }
LABEL_56:
          v58 = 0;
          do
            v59 = v148[++v58];
          while (sub_20FB41A2C(a3, v59, v27));
          v60 = &v148[v58];
          v61 = a2;
          v96 = v58 == 1;
          v8 = a2;
          if (v96)
          {
            v61 = a2;
            do
            {
              if (v60 >= v61)
                break;
              v63 = *--v61;
            }
            while (!sub_20FB41A2C(a3, v63, v27));
          }
          else
          {
            do
              v62 = *--v61;
            while (!sub_20FB41A2C(a3, v62, v27));
          }
          if (v60 < v61)
          {
            v64 = *v61;
            v65 = v60;
            v66 = v61;
            do
            {
              *v65 = v64;
              *v66 = v59;
              do
              {
                v67 = v65[1];
                ++v65;
                v59 = v67;
              }
              while (sub_20FB41A2C(a3, v67, v27));
              do
              {
                v68 = *--v66;
                v64 = v68;
              }
              while (!sub_20FB41A2C(a3, v68, v27));
            }
            while (v65 < v66);
            v69 = v65 - 1;
            v8 = a2;
            if (v69 == v148)
              goto LABEL_74;
LABEL_73:
            *v148 = *v69;
            goto LABEL_74;
          }
          v69 = v60 - 1;
          if (v60 - 1 != v148)
            goto LABEL_73;
LABEL_74:
          *v69 = v27;
          if (v60 < v61)
            goto LABEL_77;
          v70 = sub_20FB41E8C(v148, v69, a3);
          v7 = v69 + 1;
          result = sub_20FB41E8C(v69 + 1, v8, a3);
          if (!(_DWORD)result)
          {
            if (v70)
              goto LABEL_4;
LABEL_77:
            result = sub_20FB40DC4(v148, v69, a3, a4, a5 & 1);
            a5 = 0;
            v7 = v69 + 1;
            goto LABEL_4;
          }
          a2 = v69;
          if (v70)
            return result;
          goto LABEL_2;
        }
        v95 = v7 + 1;
        v96 = v7 == v8 || v95 == v8;
        v97 = v96;
        if ((a5 & 1) != 0)
        {
          if ((v97 & 1) == 0)
          {
            v98 = 8;
            v99 = v7;
            do
            {
              v102 = *v99;
              v101 = v99[1];
              v99 = v95;
              result = sub_20FB41A2C(a3, v101, v102);
              if ((_DWORD)result)
              {
                v103 = v98;
                do
                {
                  *(uint64_t *)((char *)v148 + v103) = v102;
                  v104 = v103 - 8;
                  if (v103 == 8)
                  {
                    v100 = v148;
                    goto LABEL_121;
                  }
                  v102 = *(uint64_t *)((char *)v148 + v103 - 16);
                  result = sub_20FB41A2C(a3, v101, v102);
                  v103 = v104;
                }
                while ((result & 1) != 0);
                v100 = (uint64_t *)((char *)v148 + v104);
LABEL_121:
                *v100 = v101;
              }
              v95 = v99 + 1;
              v98 += 8;
            }
            while (v99 + 1 != a2);
          }
        }
        else if ((v97 & 1) == 0)
        {
          do
          {
            v138 = *v148;
            v137 = v148[1];
            v148 = v95;
            result = sub_20FB41A2C(a3, v137, v138);
            if ((_DWORD)result)
            {
              v139 = v148;
              do
              {
                *v139 = v138;
                v138 = *(v139 - 2);
                result = sub_20FB41A2C(a3, v137, v138);
                --v139;
              }
              while ((result & 1) != 0);
              *v139 = v137;
            }
            v95 = v148 + 1;
          }
          while (v148 + 1 != a2);
        }
        return result;
    }
  }
}

BOOL sub_20FB41A2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint8x8_t v19;
  unint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  _QWORD **v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t *v36;
  uint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  BOOL v45;
  unint64_t v46;
  unsigned int v47;
  uint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;

  v3 = **(_QWORD ***)(a1 + 8);
  v4 = *(uint64_t **)(a2 + 496);
  v5 = (uint64_t)(*(_QWORD *)(a2 + 504) - (_QWORD)v4) >> 6;
  v6 = v3[253];
  if (v5 >= v6)
  {
    v9 = v3[1504];
    if (v9)
    {
      v10 = *(_QWORD *)(a2 + 32);
      v11 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
      v11.i16[0] = vaddlv_u8(v11);
      if (v11.u32[0] > 1uLL)
      {
        v12 = *(_QWORD *)(a2 + 32);
        if (v9 <= v10)
          v12 = v10 % v9;
      }
      else
      {
        v12 = ((_DWORD)v9 - 1) & v10;
      }
      v13 = *(uint64_t **)(v3[1503] + 8 * v12);
      if (v13)
      {
        v13 = (uint64_t *)*v13;
        if (v13)
        {
          if (v11.u32[0] < 2uLL)
          {
            v14 = v9 - 1;
            while (1)
            {
              v16 = v13[1];
              if (v16 == v10)
              {
                if (*((_DWORD *)v13 + 4) == (_DWORD)v10)
                  goto LABEL_26;
              }
              else if ((v16 & v14) != v12)
              {
                goto LABEL_25;
              }
              v13 = (uint64_t *)*v13;
              if (!v13)
                goto LABEL_26;
            }
          }
          do
          {
            v15 = v13[1];
            if (v15 == v10)
            {
              if (*((_DWORD *)v13 + 4) == (_DWORD)v10)
                break;
            }
            else
            {
              if (v15 >= v9)
                v15 %= v9;
              if (v15 != v12)
                goto LABEL_25;
            }
            v13 = (uint64_t *)*v13;
          }
          while (v13);
        }
      }
    }
    else
    {
LABEL_25:
      v13 = 0;
    }
LABEL_26:
    if (v13)
      v5 += 20;
    v7 = *(uint64_t **)(a3 + 496);
    v8 = (uint64_t)(*(_QWORD *)(a3 + 504) - (_QWORD)v7) >> 6;
    if (v8 < v6)
    {
LABEL_3:
      if (!**(_BYTE **)a1)
        goto LABEL_59;
      goto LABEL_53;
    }
  }
  else
  {
    v7 = *(uint64_t **)(a3 + 496);
    v8 = (uint64_t)(*(_QWORD *)(a3 + 504) - (_QWORD)v7) >> 6;
    if (v8 < v6)
      goto LABEL_3;
  }
  v17 = v3[1504];
  if (v17)
  {
    v18 = *(_QWORD *)(a3 + 32);
    v19 = (uint8x8_t)vcnt_s8((int8x8_t)v17);
    v19.i16[0] = vaddlv_u8(v19);
    if (v19.u32[0] > 1uLL)
    {
      v20 = *(_QWORD *)(a3 + 32);
      if (v17 <= v18)
        v20 = v18 % v17;
    }
    else
    {
      v20 = ((_DWORD)v17 - 1) & v18;
    }
    v21 = *(uint64_t **)(v3[1503] + 8 * v20);
    if (v21)
    {
      v21 = (uint64_t *)*v21;
      if (v21)
      {
        if (v19.u32[0] < 2uLL)
        {
          v22 = v17 - 1;
          while (1)
          {
            v24 = v21[1];
            if (v24 == v18)
            {
              if (*((_DWORD *)v21 + 4) == (_DWORD)v18)
                goto LABEL_50;
            }
            else if ((v24 & v22) != v20)
            {
              goto LABEL_49;
            }
            v21 = (uint64_t *)*v21;
            if (!v21)
              goto LABEL_50;
          }
        }
        do
        {
          v23 = v21[1];
          if (v23 == v18)
          {
            if (*((_DWORD *)v21 + 4) == (_DWORD)v18)
              break;
          }
          else
          {
            if (v23 >= v17)
              v23 %= v17;
            if (v23 != v20)
              goto LABEL_49;
          }
          v21 = (uint64_t *)*v21;
        }
        while (v21);
      }
    }
  }
  else
  {
LABEL_49:
    v21 = 0;
  }
LABEL_50:
  if (v21)
    v8 += 20;
  if (!**(_BYTE **)a1)
    goto LABEL_59;
LABEL_53:
  v25 = a2 + 40;
  if (!*(_BYTE *)(a2 + 488))
    v25 = 0;
  v26 = *(unsigned __int8 *)(v25 + 432);
  v27 = a3 + 40;
  if (!*(_BYTE *)(a3 + 488))
    v27 = 0;
  if ((v26 != 0) != (*(_BYTE *)(v27 + 432) != 0))
    return v26 == 0;
LABEL_59:
  if (v5 != v8)
    return v5 > v8;
  v29 = *(_QWORD ***)(a1 + 16);
  v30 = *(_QWORD *)(*v29)[994];
  v33 = *(uint64_t **)(v30 + 56);
  v31 = (uint64_t *)(v30 + 56);
  v32 = v33;
  if (!v33)
    goto LABEL_75;
  v34 = *v4;
  v35 = *((_DWORD *)v4 + 2);
  v36 = v31;
  v37 = v32;
  do
  {
    v38 = v37[4];
    if (v38 < v34)
    {
      ++v37;
    }
    else if (v38 == v34)
    {
      if (*((_DWORD *)v37 + 10) < v35)
        ++v37;
      else
        v36 = v37;
    }
    else
    {
      v36 = v37;
    }
    v37 = (uint64_t *)*v37;
  }
  while (v37);
  if (v36 == v31 || (v39 = v36[4], v34 < v39) || v34 == v39 && *((_DWORD *)v36 + 10) > v35)
LABEL_75:
    v36 = v31;
  v40 = (uint64_t *)*v29[1];
  if (v40 == v36)
  {
    v41 = 0;
  }
  else
  {
    v41 = 0;
    v42 = v40;
    do
    {
      v43 = (uint64_t *)v42[1];
      if (v43)
      {
        do
        {
          v44 = v43;
          v43 = (uint64_t *)*v43;
        }
        while (v43);
      }
      else
      {
        do
        {
          v44 = (uint64_t *)v42[2];
          v45 = *v44 == (_QWORD)v42;
          v42 = v44;
        }
        while (!v45);
      }
      ++v41;
      v42 = v44;
    }
    while (v44 != v36);
  }
  if (!v32)
    goto LABEL_100;
  v46 = *v7;
  v47 = *((_DWORD *)v7 + 2);
  v48 = v31;
  do
  {
    v49 = v32[4];
    if (v49 < v46)
    {
      ++v32;
    }
    else if (v49 == v46)
    {
      if (*((_DWORD *)v32 + 10) < v47)
        ++v32;
      else
        v48 = v32;
    }
    else
    {
      v48 = v32;
    }
    v32 = (uint64_t *)*v32;
  }
  while (v32);
  if (v48 == v31 || (v50 = v48[4], v46 < v50) || v46 == v50 && *((_DWORD *)v48 + 10) > v47)
LABEL_100:
    v48 = v31;
  if (v40 == v48)
  {
    v51 = 0;
  }
  else
  {
    v51 = 0;
    do
    {
      v52 = (uint64_t *)v40[1];
      if (v52)
      {
        do
        {
          v53 = v52;
          v52 = (uint64_t *)*v52;
        }
        while (v52);
      }
      else
      {
        do
        {
          v53 = (uint64_t *)v40[2];
          v45 = *v53 == (_QWORD)v40;
          v40 = v53;
        }
        while (!v45);
      }
      ++v51;
      v40 = v53;
    }
    while (v53 != v48);
  }
  return v41 > v51;
}

BOOL sub_20FB41E8C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _BOOL4 v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;
  _BOOL4 v27;
  uint64_t *v28;
  uint64_t *v29;
  _BOOL4 v30;
  uint64_t v31;
  BOOL v32;
  uint64_t *v33;
  int v34;
  uint64_t i;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (sub_20FB41A2C(a3, v8, *a1))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return 1;
    case 3:
      v10 = *a1;
      v11 = a1[1];
      v12 = sub_20FB41A2C(a3, v11, *a1);
      v13 = *(a2 - 1);
      v14 = sub_20FB41A2C(a3, v13, v11);
      if (v12)
      {
        if (v14)
        {
          *a1 = v13;
        }
        else
        {
          *a1 = v11;
          a1[1] = v10;
          v41 = *(a2 - 1);
          if (!sub_20FB41A2C(a3, v41, v10))
            return 1;
          a1[1] = v41;
        }
        *(a2 - 1) = v10;
      }
      else if (v14)
      {
        a1[1] = v13;
        *(a2 - 1) = v11;
        v19 = a1[1];
LABEL_18:
        v31 = *a1;
        if (sub_20FB41A2C(a3, v19, *a1))
        {
          *a1 = v19;
          a1[1] = v31;
        }
      }
      return 1;
    case 4:
      sub_20FB421B0(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      v15 = a1 + 2;
      v16 = a1 + 3;
      sub_20FB421B0(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      v17 = *(a2 - 1);
      v18 = a1[3];
      if (!sub_20FB41A2C(a3, v17, v18))
        return 1;
      *v16 = v17;
      *(a2 - 1) = v18;
      v19 = *v16;
      v20 = *v15;
      if (!sub_20FB41A2C(a3, *v16, *v15))
        return 1;
      *v15 = v19;
      *v16 = v20;
      v21 = a1[1];
      if (!sub_20FB41A2C(a3, v19, v21))
        return 1;
      a1[1] = v19;
      a1[2] = v21;
      goto LABEL_18;
    default:
      v22 = a1[1];
      v23 = *a1;
      v24 = sub_20FB41A2C(a3, v22, *a1);
      v26 = a1 + 2;
      v25 = a1[2];
      v27 = sub_20FB41A2C(a3, v25, v22);
      if (v24)
      {
        v28 = a1;
        v29 = a1 + 2;
        if (!v27)
        {
          *a1 = v22;
          a1[1] = v23;
          v30 = sub_20FB41A2C(a3, v25, v23);
          v28 = a1 + 1;
          v29 = a1 + 2;
          if (!v30)
            goto LABEL_23;
        }
LABEL_22:
        *v28 = v25;
        *v29 = v23;
        goto LABEL_23;
      }
      if (v27)
      {
        a1[1] = v25;
        *v26 = v22;
        v32 = sub_20FB41A2C(a3, v25, v23);
        v28 = a1;
        v29 = a1 + 1;
        if (v32)
          goto LABEL_22;
      }
LABEL_23:
      v33 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v34 = 0;
      for (i = 24; ; i += 8)
      {
        v36 = *v33;
        v37 = *v26;
        if (sub_20FB41A2C(a3, *v33, *v26))
          break;
LABEL_26:
        v26 = v33++;
        if (v33 == a2)
          return 1;
      }
      v38 = i;
      do
      {
        *(uint64_t *)((char *)a1 + v38) = v37;
        v39 = v38 - 8;
        if (v38 == 8)
        {
          *a1 = v36;
          if (++v34 != 8)
            goto LABEL_26;
          return v33 + 1 == a2;
        }
        v37 = *(uint64_t *)((char *)a1 + v38 - 16);
        v40 = sub_20FB41A2C(a3, v36, v37);
        v38 = v39;
      }
      while (v40);
      *(uint64_t *)((char *)a1 + v39) = v36;
      if (++v34 != 8)
        goto LABEL_26;
      return v33 + 1 == a2;
  }
}

BOOL sub_20FB421B0(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL8 result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v10 = *a2;
  v11 = *a1;
  v12 = sub_20FB41A2C(a5, *a2, *a1);
  v13 = *a3;
  v14 = sub_20FB41A2C(a5, *a3, v10);
  if (v12)
  {
    if (v14)
    {
      *a1 = v13;
    }
    else
    {
      *a1 = v10;
      *a2 = v11;
      v10 = *a3;
      if (!sub_20FB41A2C(a5, *a3, v11))
        goto LABEL_11;
      *a2 = v10;
    }
    *a3 = v11;
    v10 = v11;
LABEL_11:
    v17 = *a4;
    result = sub_20FB41A2C(a5, *a4, v10);
    if (!result)
      return result;
    goto LABEL_14;
  }
  if (v14)
  {
    *a2 = v13;
    *a3 = v10;
    v15 = *a2;
    v16 = *a1;
    if (!sub_20FB41A2C(a5, *a2, *a1))
      goto LABEL_11;
    *a1 = v15;
    *a2 = v16;
    v10 = *a3;
    v17 = *a4;
    result = sub_20FB41A2C(a5, *a4, *a3);
    if (!result)
      return result;
  }
  else
  {
    v10 = v13;
    v17 = *a4;
    result = sub_20FB41A2C(a5, *a4, v13);
    if (!result)
      return result;
  }
LABEL_14:
  *a3 = v17;
  *a4 = v10;
  v19 = *a3;
  v20 = *a2;
  result = sub_20FB41A2C(a5, *a3, *a2);
  if (result)
  {
    *a2 = v19;
    *a3 = v20;
    v21 = *a2;
    v22 = *a1;
    result = sub_20FB41A2C(a5, *a2, *a1);
    if (result)
    {
      *a1 = v21;
      *a2 = v22;
    }
  }
  return result;
}

_QWORD *sub_20FB42340(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int v13;
  _QWORD *v14;
  unsigned int v15;
  uint64_t *v17;
  unsigned int v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  _QWORD *v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unsigned int v36;
  BOOL v37;
  uint64_t *v38;
  unsigned int v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t *v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  float v49;
  std::__shared_weak_count *v50;
  unint64_t *p_shared_owners;
  double v52;
  double v53;
  unint64_t v54;
  char v55;
  char v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t *v60;
  unint64_t v61;
  int v62;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  void *v91;
  char v92;
  void *__p;
  char v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  std::__shared_weak_count *v110;
  unsigned int v111;
  int v112;
  char v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  std::__shared_weak_count *v116;
  unint64_t v117;
  float64x2_t v118;
  _QWORD *v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  _BYTE v127[24];
  _BYTE *v128;
  _BYTE v129[24];
  _BYTE *v130;
  _BYTE v131[24];
  _BYTE *v132;
  _BYTE v133[24];
  _BYTE *v134;
  unint64_t v135;
  __int128 v136;
  int v137;
  __int128 v138;
  char v139;
  uint64_t v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  uint64_t v145;
  char v146;
  uint64_t v147;
  _BYTE v148[512];
  _BYTE *v149;
  __int128 v150;
  __int16 v151;
  _BYTE v152[24];
  _BYTE *v153;
  _BYTE v154[24];
  _BYTE *v155;
  _BYTE v156[24];
  _BYTE *v157;
  _BYTE v158[24];
  _BYTE *v159;
  _QWORD v160[5];
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  char v165;
  __int128 v166;
  _BYTE v167[64];
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;

  MEMORY[0x24BDAC7A8](a1);
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v173 = *MEMORY[0x24BDAC8D0];
  sub_20F399FC4((uint64_t)v160);
  memset(&v167[32], 0, 32);
  v166 = 0u;
  memset(v167, 0, 28);
  v168 = 0;
  v160[0] = off_24C9FEA40;
  v169 = 2;
  v170 = 0;
  v172 = 0;
  v171 = 0;
  v7 = *(unsigned __int8 *)(v2 + 488);
  if (*(_BYTE *)(v2 + 488))
    v8 = v2 + 40;
  else
    v8 = 0;
  v112 = 0;
  v113 = 1;
  v114 = v8;
  if (v7
    && (sub_20F3A3F3C((uint64_t)&v112) & 1) == 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 448, (uint64_t)"initializeImpl()", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (sub_20F3A3F3C((uint64_t)&v112))
  {
    sub_20F3A41D0((uint64_t)&v161, &v112);
    if (v9)
    {
      v165 = 0;
      v164 = 0;
    }
  }
  if (*(_BYTE *)(v2 + 488))
    v10 = v2 + 40;
  else
    v10 = 0;
  v11 = v4 + 38;
  v12 = v4[38];
  if (!v12)
    goto LABEL_28;
  v13 = *(_DWORD *)(v10 + 48);
  v14 = v4 + 38;
  do
  {
    v15 = *(_DWORD *)(v12 + 32);
    _CF = v15 >= v13;
    if (v15 >= v13)
      v17 = (uint64_t *)v12;
    else
      v17 = (uint64_t *)(v12 + 8);
    if (_CF)
      v14 = (_QWORD *)v12;
    v12 = *v17;
  }
  while (*v17);
  if (v14 == v11)
  {
LABEL_28:
    v90 = 0;
    v22 = v4 + 7;
    v21 = (uint64_t *)v4[7];
    v88 = v6;
    if (!v21)
      goto LABEL_40;
  }
  else
  {
    v18 = *((_DWORD *)v14 + 8);
    v19 = v14 + 5;
    if (v18 <= v13)
      v20 = v19;
    else
      v20 = 0;
    v90 = v20;
    v22 = v4 + 7;
    v21 = (uint64_t *)v4[7];
    v88 = v6;
    if (!v21)
      goto LABEL_40;
  }
  v24 = *(_QWORD *)(v10 + 32);
  v23 = *(_QWORD *)(v10 + 40);
  v25 = v22;
  do
  {
    v26 = v21[4];
    if (v26 < v24)
    {
      ++v21;
    }
    else if (v26 == v24)
    {
      if (*((_DWORD *)v21 + 10) < v23)
        ++v21;
      else
        v25 = v21;
    }
    else
    {
      v25 = v21;
    }
    v21 = (uint64_t *)*v21;
  }
  while (v21);
  if (v25 != v22)
  {
    v27 = v25[4];
    if (v24 >= v27 && (v24 != v27 || *((_DWORD *)v25 + 10) <= v23))
    {
      v89 = v25[6];
      v28 = *(_QWORD *)(v2 + 496);
      v29 = *(_QWORD *)(v2 + 504);
      if (v28 != v29)
        goto LABEL_41;
      goto LABEL_98;
    }
  }
LABEL_40:
  v89 = 0;
  v28 = *(_QWORD *)(v2 + 496);
  v29 = *(_QWORD *)(v2 + 504);
  if (v28 != v29)
  {
LABEL_41:
    v30 = 0;
    v31 = v4 + 223;
    do
    {
      v32 = *(_OWORD *)v28;
      v33 = *(_QWORD *)(v28 + 16);
      *(_QWORD *)&v144 = v33;
      v143 = v32;
      v34 = *v11;
      if (!*v11)
        goto LABEL_56;
      v35 = v11;
      do
      {
        v36 = *(_DWORD *)(v34 + 32);
        v37 = v36 >= v33;
        if (v36 >= v33)
          v38 = (uint64_t *)v34;
        else
          v38 = (uint64_t *)(v34 + 8);
        if (v37)
          v35 = (_QWORD *)v34;
        v34 = *v38;
      }
      while (*v38);
      if (v35 == v11)
      {
LABEL_56:
        v41 = 0;
      }
      else
      {
        v39 = *((_DWORD *)v35 + 8);
        v40 = v35 + 5;
        if (v39 <= v33)
          v41 = v40;
        else
          v41 = 0;
      }
      v42 = sub_20E9DF85C(v31, (uint64_t *)&v143);
      if (v42)
      {
        v43 = v42[13];
        v44 = (uint64_t *)*v22;
        if (!*v22)
          goto LABEL_72;
      }
      else
      {
        v43 = 0;
        v44 = (uint64_t *)*v22;
        if (!*v22)
          goto LABEL_72;
      }
      v45 = v22;
      do
      {
        v46 = v44[4];
        if (v46 < (unint64_t)v143)
        {
          ++v44;
        }
        else if (v46 == (_QWORD)v143)
        {
          if (*((_DWORD *)v44 + 10) < DWORD2(v143))
            ++v44;
          else
            v45 = v44;
        }
        else
        {
          v45 = v44;
        }
        v44 = (uint64_t *)*v44;
      }
      while (v44);
      if (v45 == v22
        || (v47 = v45[4], (unint64_t)v143 < v47)
        || (_QWORD)v143 == v47 && *((_DWORD *)v45 + 10) > DWORD2(v143))
      {
LABEL_72:
        v48 = 0;
        goto LABEL_73;
      }
      v48 = v45[6];
LABEL_73:
      v118 = vcvtq_f64_f32(*(float32x2_t *)(v28 + 32));
      v117 = v30;
      v119 = v90;
      v120 = v41;
      v121 = v89;
      v122 = v48;
      v123 = v43;
      v111 = 0;
      v49 = *(float *)(v28 + 56);
      v50 = (std::__shared_weak_count *)operator new(0x30uLL);
      v50->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v50->__shared_owners_;
      v50->__shared_weak_owners_ = 0;
      v50->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9FCE10;
      v50[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24C9FCE60;
      v52 = (float)(v49 * v49);
      if (v52 < 1.0e-15)
        v53 = NAN;
      else
        v53 = 1.0 / sqrt(v52);
      ++v30;
      *(double *)&v50[1].__shared_weak_owners_ = v53;
      LOBYTE(v50[1].__shared_owners_) = v52 >= 1.0e-15;
      v109 = v50 + 1;
      v110 = v50;
      v108 = 0;
      v107 = 0;
      v115 = v50 + 1;
      v116 = v50;
      do
        v54 = __ldxr(p_shared_owners);
      while (__stxr(v54 + 1, p_shared_owners));
      sub_20F3A4A18((uint64_t)&v161, (uint64_t *)&v117, &v111, (uint64_t *)&v115);
      v56 = v55;
      v57 = v116;
      if (!v116)
        goto LABEL_82;
      v58 = (unint64_t *)&v116->__shared_owners_;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (v59)
      {
LABEL_82:
        if ((v55 & 1) == 0)
          goto LABEL_84;
LABEL_83:
        v165 = 0;
        v164 = 0;
        goto LABEL_84;
      }
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
      if ((v56 & 1) != 0)
        goto LABEL_83;
LABEL_84:
      if (v110)
      {
        v60 = &v110->__shared_owners_;
        do
          v61 = __ldaxr((unint64_t *)v60);
        while (__stlxr(v61 - 1, (unint64_t *)v60));
        if (!v61)
        {
          ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
          std::__shared_weak_count::__release_weak(v110);
        }
      }
      v28 += 64;
    }
    while (v28 != v29);
  }
LABEL_98:
  BYTE8(v143) = 0;
  v144 = xmmword_21039D460;
  v145 = 0x3EB0C6F7A0B5ED8DLL;
  v146 = 0;
  v147 = 0x3FF7B8BAC710CB29;
  v149 = v148;
  v150 = xmmword_210378040;
  v151 = 0;
  v153 = 0;
  v155 = 0;
  v157 = 0;
  v159 = 0;
  v62 = *(_DWORD *)(v88 + 8);
  LODWORD(v143) = 1;
  DWORD1(v143) = v62;
  v117 = (unint64_t)off_24C9FCF80;
  sub_20F2C2630((uint64_t)&v118, &v143);
  v136 = 0u;
  v137 = 0;
  v135 = 0xBFF0000000000000;
  v117 = (unint64_t)&off_24C9FCEF0;
  v138 = xmmword_2103AB100;
  v139 = 1;
  v140 = 0x3FF0000000000000;
  __asm { FMOV            V0.2D, #2.0 }
  v141 = _Q0;
  v142 = xmmword_210315720;
  LOBYTE(v115) = 0;
  sub_20F3A5290((uint64_t *)&v117, (uint64_t)v160, (unsigned __int8 *)&v115, (uint64_t)&v91);
  v106 = 0;
  if (v105 != &v104 && v105)
    MEMORY[0x212BC6368]();
  v103 = 0;
  if (v102 != &v101 && v102)
    MEMORY[0x212BC6368]();
  v100 = 0;
  if (v99 != &v98 && v99)
    MEMORY[0x212BC6368]();
  v97 = 0;
  if (v96 != &v95 && v96)
    MEMORY[0x212BC6368]();
  if (v94 < 0)
  {
    operator delete(__p);
    if ((v92 & 0x80000000) == 0)
    {
LABEL_112:
      v67 = v162;
      v68 = v163;
      if (v163 == v162)
        goto LABEL_117;
      goto LABEL_116;
    }
  }
  else if ((v92 & 0x80000000) == 0)
  {
    goto LABEL_112;
  }
  operator delete(v91);
  v67 = v162;
  v68 = v163;
  if (v163 == v162)
  {
LABEL_117:
    v69 = v68;
    goto LABEL_118;
  }
LABEL_116:
  v69 = v67;
  if (*(_DWORD *)v67)
    goto LABEL_117;
LABEL_118:
  if (v68 != v67 && *(double *)(*(_QWORD *)(v69 + 8) + 32) >= 0.0)
  {
    do
    {
      v72 = *(_QWORD *)(v67 + 8);
      if (*(_BYTE *)(v72 + 20))
        sub_20F3A7308(v72 + 16);
      v67 += 16;
    }
    while (v67 != v68);
  }
  v117 = (unint64_t)off_24C9FCF80;
  if ((_QWORD)v136)
    MEMORY[0x212BC6368](v136, 0x1000C8000313F17);
  v70 = v134;
  if (v134 == v133)
  {
    v71 = 4;
    v70 = v133;
  }
  else
  {
    if (!v134)
      goto LABEL_130;
    v71 = 5;
  }
  (*(void (**)(void))(*v70 + 8 * v71))();
LABEL_130:
  v73 = v132;
  if (v132 == v131)
  {
    v74 = 4;
    v73 = v131;
  }
  else
  {
    if (!v132)
      goto LABEL_135;
    v74 = 5;
  }
  (*(void (**)(void))(*v73 + 8 * v74))();
LABEL_135:
  v75 = v130;
  if (v130 == v129)
  {
    v76 = 4;
    v75 = v129;
  }
  else
  {
    if (!v130)
      goto LABEL_140;
    v76 = 5;
  }
  (*(void (**)(void))(*v75 + 8 * v76))();
LABEL_140:
  v77 = v128;
  if (v128 == v127)
  {
    v78 = 4;
    v77 = v127;
    goto LABEL_144;
  }
  if (v128)
  {
    v78 = 5;
LABEL_144:
    (*(void (**)(void))(*v77 + 8 * v78))();
  }
  v126 = 0;
  if (v125 != &v124 && v125)
    MEMORY[0x212BC6368]();
  v79 = v159;
  if (v159 == v158)
  {
    v80 = 4;
    v79 = v158;
  }
  else
  {
    if (!v159)
      goto LABEL_153;
    v80 = 5;
  }
  (*(void (**)(void))(*v79 + 8 * v80))();
LABEL_153:
  v81 = v157;
  if (v157 == v156)
  {
    v82 = 4;
    v81 = v156;
  }
  else
  {
    if (!v157)
      goto LABEL_158;
    v82 = 5;
  }
  (*(void (**)(void))(*v81 + 8 * v82))();
LABEL_158:
  v83 = v155;
  if (v155 == v154)
  {
    v84 = 4;
    v83 = v154;
  }
  else
  {
    if (!v155)
      goto LABEL_163;
    v84 = 5;
  }
  (*(void (**)(void))(*v83 + 8 * v84))();
LABEL_163:
  v85 = v153;
  if (v153 == v152)
  {
    v86 = 4;
    v85 = v152;
    goto LABEL_167;
  }
  if (v153)
  {
    v86 = 5;
LABEL_167:
    (*(void (**)(void))(*v85 + 8 * v86))();
  }
  *((_QWORD *)&v150 + 1) = 0;
  if (v149 != v148 && v149)
    MEMORY[0x212BC6368]();
  v160[0] = off_24C9FEA40;
  if (v170)
    MEMORY[0x212BC6368](v170, 0x1000C8000313F17);
  return sub_20F3994C8(v160);
}

void sub_20FB42D60(_Unwind_Exception *a1)
{
  sub_20F2C539C(&STACK[0x990]);
  sub_20F2B116C(&STACK[0xCD0]);
  sub_20F399480(&STACK[0xFA8]);
  _Unwind_Resume(a1);
}

void sub_20FB42DBC(_Unwind_Exception *a1)
{
  sub_20F399480(&STACK[0xFA8]);
  _Unwind_Resume(a1);
}

void sub_20FB42DD0(_Unwind_Exception *a1)
{
  sub_20F399480(&STACK[0xFA8]);
  _Unwind_Resume(a1);
}

void sub_20FB42DE4(_Unwind_Exception *a1)
{
  sub_20E86665C((uint64_t)&STACK[0x980]);
  sub_20E86665C((uint64_t)&STACK[0x8F8]);
  sub_20E86665C((uint64_t)&STACK[0x8E8]);
  sub_20F399480(&STACK[0xFA8]);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FB42E10(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 3)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 61)
      goto LABEL_22;
    v10 = v8 >> 2;
    if (v8 >> 2 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
    v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 61)
LABEL_22:
      sub_20E867F44();
    v13 = v12;
    result = operator new(8 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 3;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[8 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

_QWORD *sub_20FB42F50(_QWORD *result, char *a2, char *a3)
{
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char *v19;
  __int128 *v20;
  _OWORD *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _OWORD *v27;
  __int128 *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;

  v4 = a2;
  v5 = result;
  result[66] = 0;
  v6 = a3 - a2;
  v7 = (unint64_t)(a3 - a2) >> 3;
  v8 = result[65];
  if (v7 <= v8)
  {
    v10 = (_QWORD *)result[64];
  }
  else
  {
    v9 = 2 * v8;
    if (v9 > v7)
      v7 = v9;
    result[65] = v7;
    v10 = (_QWORD *)operator new[]();
    result = (_QWORD *)v5[64];
    if (result != v5 && result != 0)
      result = (_QWORD *)MEMORY[0x212BC6368]();
    v5[64] = v10;
    v12 = v5[66];
    if (v12)
    {
      v13 = v5[66];
      v14 = a3 - v4;
      if (a3 != v4)
      {
        v15 = v6 >> 3;
        if ((unint64_t)(v6 >> 3) <= 1)
          v15 = 1;
        v13 = v12 + v15;
        v5[66] = v13;
      }
      result = memmove(&v10[v13 - v12], v10, 8 * v12);
      if (v4 != a3)
      {
        if ((unint64_t)(v14 - 8) < 0x18)
          goto LABEL_33;
        if ((unint64_t)((char *)v10 - v4) < 0x20)
          goto LABEL_33;
        v16 = ((unint64_t)(v14 - 8) >> 3) + 1;
        v17 = v16 & 0x3FFFFFFFFFFFFFFCLL;
        v18 = &v10[v17];
        v19 = &v4[v17 * 8];
        v20 = (__int128 *)(v4 + 16);
        v21 = v10 + 2;
        v22 = v16 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v23 = *v20;
          *(v21 - 1) = *(v20 - 1);
          *v21 = v23;
          v20 += 2;
          v21 += 2;
          v22 -= 4;
        }
        while (v22);
        v10 = v18;
        v4 = v19;
        if (v16 != (v16 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_33:
          do
          {
            v24 = *(_QWORD *)v4;
            v4 += 8;
            *v10++ = v24;
          }
          while (v4 != a3);
        }
      }
      return result;
    }
  }
  if (v4 != a3)
  {
    v25 = 0;
    if ((unint64_t)(v6 - 8) < 0x18)
      goto LABEL_34;
    if ((unint64_t)((char *)v10 - v4) < 0x20)
      goto LABEL_34;
    v26 = ((unint64_t)(v6 - 8) >> 3) + 1;
    v25 = v26 & 0x3FFFFFFFFFFFFFFCLL;
    v27 = v10 + 2;
    v28 = (__int128 *)(v4 + 16);
    v29 = v26 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v30 = *v28;
      *(v27 - 1) = *(v28 - 1);
      *v27 = v30;
      v27 += 2;
      v28 += 2;
      v29 -= 4;
    }
    while (v29);
    v4 += 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
    if (v26 != v25)
    {
LABEL_34:
      do
      {
        v31 = *(_QWORD *)v4;
        v4 += 8;
        v10[v25++] = v31;
      }
      while (v4 != a3);
    }
    v5[66] = v25;
  }
  return result;
}

__n128 sub_20FB43148(uint64_t a1, unsigned int *a2)
{
  unsigned int v2;
  uint64_t v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  char *v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  char *v15;
  unsigned int v16;
  __n128 *v17;
  __n128 *v18;
  __n128 result;

  v2 = *a2;
  if (*(_BYTE *)a1)
  {
    v3 = **(_QWORD **)(a1 + 8);
    v4 = *(char **)(v3 + 5768);
    v5 = *(char **)(v3 + 5776);
    if (v5 != v4)
    {
      v6 = (v5 - v4) >> 4;
      do
      {
        v7 = v6 >> 1;
        v8 = (unsigned int *)&v4[16 * (v6 >> 1)];
        v10 = *v8;
        v9 = (char *)(v8 + 4);
        v6 += ~(v6 >> 1);
        if (v10 < v2)
          v4 = v9;
        else
          v6 = v7;
      }
      while (v6);
    }
  }
  else
  {
    v11 = **(_QWORD **)(a1 + 16);
    v4 = *(char **)(v11 + 6040);
    v5 = *(char **)(v11 + 6048);
    if (v5 != v4)
    {
      v12 = (v5 - v4) >> 4;
      do
      {
        v13 = v12 >> 1;
        v14 = (unsigned int *)&v4[16 * (v12 >> 1)];
        v16 = *v14;
        v15 = (char *)(v14 + 4);
        v12 += ~(v12 >> 1);
        if (v16 < v2)
          v4 = v15;
        else
          v12 = v13;
      }
      while (v12);
    }
  }
  if (v4 != v5 && *(_DWORD *)v4 == v2)
  {
    v17 = (__n128 *)*((_QWORD *)v4 + 1);
    if (v17[1].n128_u8[4])
    {
      v18 = (__n128 *)v17[1].n128_u64[1];
      if (v18)
      {
        result = *v18;
        v17[3].n128_u64[0] = v18[1].n128_u64[0];
        v17[2] = result;
      }
    }
  }
  return result;
}

uint64_t sub_20FB43214(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 216;
    v4 = *(void **)(i - 24);
    if (v4)
    {
      *(_QWORD *)(i - 16) = v4;
      operator delete(v4);
    }
    v5 = *(void **)(i - 56);
    if (v5)
    {
      *(_QWORD *)(i - 48) = v5;
      operator delete(v5);
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char *sub_20FB43288(char **a1, const void *a2, uint64_t a3)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  int64_t v14;
  char *v15;
  size_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v21;
  void *v22;
  void *v23;
  __int128 v25;

  v5 = *a1;
  v4 = a1[1];
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  if (0x5555555555555556 * ((a1[2] - v5) >> 3) > v7)
    v7 = 0x5555555555555556 * ((a1[2] - v5) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v5) >> 3) >= 0x555555555555555)
    v10 = 0xAAAAAAAAAAAAAAALL;
  else
    v10 = v7;
  if (v10)
  {
    if (v10 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v11 = (char *)operator new(24 * v10);
  }
  else
  {
    v11 = 0;
  }
  v12 = &v11[24 * v6];
  v13 = &v11[24 * v10];
  *((_QWORD *)v12 + 1) = 0;
  *((_QWORD *)&v25 + 1) = v13;
  *((_QWORD *)v12 + 2) = 0;
  *(_QWORD *)v12 = 0;
  v14 = a3 - (_QWORD)a2;
  if (v14)
  {
    if (v14 < 0)
      sub_20E867F44();
    v15 = (char *)operator new(v14);
    *(_QWORD *)v12 = v15;
    *((_QWORD *)v12 + 2) = &v15[16 * (v14 >> 4)];
    v16 = v14 & 0xFFFFFFFFFFFFFFF0;
    memcpy(v15, a2, v16);
    *((_QWORD *)v12 + 1) = &v15[v16];
  }
  v17 = v12 + 24;
  *(_QWORD *)&v25 = v12 + 24;
  if (v4 == v5)
  {
    *a1 = v12;
    a1[1] = v17;
    a1[2] = v13;
  }
  else
  {
    do
    {
      v18 = v12;
      *((_QWORD *)v12 - 2) = 0;
      *((_QWORD *)v12 - 1) = 0;
      v19 = *(_OWORD *)(v4 - 24);
      v4 -= 24;
      *(_OWORD *)(v12 - 24) = v19;
      v12 -= 24;
      *((_QWORD *)v18 - 1) = *((_QWORD *)v4 + 2);
      *(_QWORD *)v4 = 0;
      *((_QWORD *)v4 + 1) = 0;
      *((_QWORD *)v4 + 2) = 0;
    }
    while (v4 != v5);
    v4 = *a1;
    v20 = a1[1];
    *a1 = v12;
    *(_OWORD *)(a1 + 1) = v25;
    v17 = (char *)v25;
    if (v20 != v4)
    {
      v21 = v20;
      do
      {
        v23 = (void *)*((_QWORD *)v21 - 3);
        v21 -= 24;
        v22 = v23;
        if (v23)
        {
          *((_QWORD *)v20 - 2) = v22;
          operator delete(v22);
        }
        v20 = v21;
      }
      while (v21 != v4);
    }
  }
  if (v4)
    operator delete(v4);
  return v17;
}

void sub_20FB43468(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  _QWORD *v3;
  void *v5;
  va_list va;

  va_start(va, a2);
  v5 = *v2;
  if (*v2)
  {
    *v3 = v5;
    operator delete(v5);
  }
  sub_20EB143E8((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_20FB4348C(char *result, char *a2, char *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  _OWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  void **v16;
  _BYTE *v17;
  char *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD *v26;
  _OWORD *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;

  v6 = a2;
  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(_OWORD **)result;
  if (0xEEEEEEEEEEEEEEEFLL * ((v8 - *(_QWORD *)result) >> 3) >= a4)
  {
    v16 = (void **)(result + 8);
    v17 = (_BYTE *)*((_QWORD *)result + 1);
    if (0xEEEEEEEEEEEEEEEFLL * ((v17 - (_BYTE *)v9) >> 3) >= a4)
    {
      v34 = *(_QWORD *)result;
      if (a2 != a3)
      {
        v35 = *(_QWORD *)result;
        do
        {
          v36 = *(_OWORD *)v6;
          v37 = *((_OWORD *)v6 + 1);
          v38 = *((_OWORD *)v6 + 3);
          *(_OWORD *)(v35 + 32) = *((_OWORD *)v6 + 2);
          *(_OWORD *)(v35 + 48) = v38;
          *(_OWORD *)v35 = v36;
          *(_OWORD *)(v35 + 16) = v37;
          v39 = *((_OWORD *)v6 + 4);
          v40 = *((_OWORD *)v6 + 5);
          v41 = *((_OWORD *)v6 + 6);
          *(_QWORD *)(v35 + 112) = *((_QWORD *)v6 + 14);
          *(_OWORD *)(v35 + 80) = v40;
          *(_OWORD *)(v35 + 96) = v41;
          *(_OWORD *)(v35 + 64) = v39;
          v6 += 120;
          v35 += 120;
          v34 += 120;
        }
        while (v6 != a3);
      }
      v15 = v34 - (_QWORD)v9;
    }
    else
    {
      v18 = &a2[8 * ((v17 - (_BYTE *)v9) >> 3)];
      if (v17 != (_BYTE *)v9)
      {
        v19 = 8 * ((v17 - (_BYTE *)v9) >> 3);
        do
        {
          v20 = *(_OWORD *)v6;
          v21 = *((_OWORD *)v6 + 1);
          v22 = *((_OWORD *)v6 + 3);
          v9[2] = *((_OWORD *)v6 + 2);
          v9[3] = v22;
          *v9 = v20;
          v9[1] = v21;
          v23 = *((_OWORD *)v6 + 4);
          v24 = *((_OWORD *)v6 + 5);
          v25 = *((_OWORD *)v6 + 6);
          *((_QWORD *)v9 + 14) = *((_QWORD *)v6 + 14);
          v9[5] = v24;
          v9[6] = v25;
          v9[4] = v23;
          v6 += 120;
          v9 = (_OWORD *)((char *)v9 + 120);
          v19 -= 120;
        }
        while (v19);
        v9 = *v16;
      }
      v26 = v9;
      if (v18 != a3)
      {
        v26 = v9;
        v27 = v9;
        do
        {
          v28 = *(_OWORD *)v18;
          v29 = *((_OWORD *)v18 + 1);
          v30 = *((_OWORD *)v18 + 3);
          v27[2] = *((_OWORD *)v18 + 2);
          v27[3] = v30;
          *v27 = v28;
          v27[1] = v29;
          v31 = *((_OWORD *)v18 + 4);
          v32 = *((_OWORD *)v18 + 5);
          v33 = *((_OWORD *)v18 + 6);
          *((_QWORD *)v27 + 14) = *((_QWORD *)v18 + 14);
          v27[5] = v32;
          v27[6] = v33;
          v27[4] = v31;
          v18 += 120;
          v27 = (_OWORD *)((char *)v27 + 120);
          v26 = (_OWORD *)((char *)v26 + 120);
        }
        while (v18 != a3);
      }
      v15 = (char *)v26 - (char *)v9;
    }
  }
  else
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x222222222222222)
      goto LABEL_28;
    v10 = 0xEEEEEEEEEEEEEEEFLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    v12 = v10 >= 0x111111111111111 ? 0x222222222222222 : v11;
    if (v12 > 0x222222222222222)
LABEL_28:
      sub_20E867F44();
    v13 = 120 * v12;
    result = (char *)operator new(120 * v12);
    v9 = result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = result;
    if (v6 != a3)
    {
      result = (char *)memcpy(result, v6, 120 * ((a3 - v6 - 120) / 0x78uLL) + 120);
      v14 = (char *)v9 + 120 * ((a3 - v6 - 120) / 0x78uLL) + 120;
    }
    v15 = v14 - (char *)v9;
    v16 = (void **)(v7 + 1);
  }
  *v16 = (char *)v9 + v15;
  return result;
}

void sub_20FB436E4(void **a1, unint64_t a2, _OWORD *a3)
{
  _BYTE *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  v7 = a1[1];
  v6 = a1[2];
  if (a2 <= (v6 - (_BYTE *)v7) >> 4)
  {
    if (a2)
    {
      v13 = 16 * a2;
      v14 = (char *)&v7[2 * a2];
      do
      {
        *(_OWORD *)v7 = *a3;
        v7 += 2;
        v13 -= 16;
      }
      while (v13);
      v7 = v14;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = ((char *)v7 - (_BYTE *)*a1) >> 4;
    if ((v8 + a2) >> 60)
      sub_20E867F44();
    v9 = v6 - (_BYTE *)*a1;
    v10 = v9 >> 3;
    if (v9 >> 3 <= v8 + a2)
      v10 = v8 + a2;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
    {
      if (v11 >> 60)
        sub_20E877A38();
      v12 = (char *)operator new(16 * v11);
    }
    else
    {
      v12 = 0;
    }
    v15 = &v12[16 * v8];
    v16 = 16 * a2;
    v17 = &v15[16 * a2];
    v18 = v15;
    do
    {
      *(_OWORD *)v18 = *a3;
      v18 += 16;
      v16 -= 16;
    }
    while (v16);
    v19 = *a1;
    if (v7 != *a1)
    {
      do
      {
        v20 = *(v7 - 2);
        v7 -= 2;
        v21 = *(_QWORD *)((char *)v7 + 5);
        *((_QWORD *)v15 - 2) = v20;
        v15 -= 16;
        *(_QWORD *)(v15 + 5) = v21;
      }
      while (v7 != v19);
      v7 = *a1;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = &v12[16 * v11];
    if (v7)
      operator delete(v7);
  }
}

uint64_t sub_20FB4381C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  char v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  int8x16_t v17;
  int8x16_t v18;
  int32x4_t v19;
  float64x2_t v20;
  uint64_t *v21;
  uint64_t v22;
  float v23;
  float v24;
  unsigned int v25;
  double v26;
  double v27;
  double v28;
  double *v29;
  double *v30;
  float64x2_t *v31;
  _QWORD *v32;
  uint64_t v33;
  float64x2_t *v34;
  float64x2_t *v35;
  float64x2_t *v36;
  uint64_t v37;
  float64x2_t *v38;
  double *v39;
  uint64_t v40;
  _QWORD *v41;
  float64x2_t *v42;
  uint64_t v43;
  double *v44;
  _QWORD *v45;
  uint64_t v46;
  double v47;
  int8x16_t v48;
  __int128 v49;
  double v57;
  int v58;
  float64x2_t *v61;
  _QWORD *f64;
  uint64_t v63;
  double v64;
  float64x2_t **v66;
  uint64_t v67;
  float64x2_t *v68;
  _QWORD *v69;
  uint64_t v70;
  __int128 v71;
  float64x2_t v72;
  int64x2_t v73;
  double v75;
  double v78;
  float64x2_t v79;
  double v80;
  uint64_t v81;
  float64x2_t v82;
  float64x2_t v84;
  double v85;
  float64x2_t v86;
  float64x2_t *v87;
  float64x2_t v91;
  float64x2_t v93;
  float64x2_t v95;
  float64x2_t *v97;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v102;
  double v103;
  float64x2_t v104;
  double v106;
  double v108;
  double v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t *v112;
  float64x2_t *v114;
  float64x2_t v116;
  float64x2_t v118;
  double v119;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v126;
  float64x2_t v128;
  float64x2_t v129;
  int64x2_t v131;
  double v132;
  float64x2_t *v134;
  float64x2_t *v135;
  float64x2_t v137;
  double v140;
  double v142;
  float v143;
  __int128 v144;
  __int128 *v145;
  _QWORD *v146;
  float64x2_t **v147;
  _BYTE v148[24];
  int8x16_t v149;
  double v150;
  float64x2_t *v151;
  float64x2_t *v152;
  float64x2_t *v153;
  float64x2_t *v154;
  uint64_t v155;
  int64x2_t v156;
  float64_t v157;
  int64x2_t v158;
  float64_t v159;
  float64x2_t v160;
  uint64_t v161;
  float64x2_t v162;
  int8x16_t v163;
  int64x2_t v164;
  int64x2_t v165;
  int8x16_t v166;
  uint64_t v167;
  int8x16_t v168;
  float64_t v169;
  __int128 v170;
  unint64_t v171;
  __int128 v172;
  uint64_t v173;
  double v174;
  uint64_t v175;
  uint64_t v176;

  v176 = *MEMORY[0x24BDAC8D0];
  v6 = a3 + 40;
  if ((!*(_BYTE *)(a3 + 488) || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(a3 + 40) & 1) == 0)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/VIODatabaseUtil.hpp", 90, (uint64_t)"track.getStructure() && track.getStructure()->isSetup()", 55, (uint64_t)"track does not has structure or is not setup", 44, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (*(_BYTE *)(a3 + 488))
    v7 = v6;
  else
    v7 = 0;
  if (*(_QWORD *)a1 != *(_QWORD *)(v7 + 32) || *(_DWORD *)(a1 + 8) != *(_DWORD *)(v7 + 40))
    return 1;
  v8 = *(__int128 **)(a3 + 496);
  v145 = *(__int128 **)(a3 + 504);
  if (v8 == v145)
    return 0;
  v146 = (_QWORD *)(a2 + 1784);
  while (1)
  {
    if (*(_QWORD *)v8 == *(_QWORD *)a1 && *((_DWORD *)v8 + 2) == *(_DWORD *)(a1 + 8))
      goto LABEL_13;
    if (*(_BYTE *)(a3 + 488))
      v14 = v6;
    else
      v14 = 0;
    v15 = sub_20E9DF85C(v146, (uint64_t *)(v14 + 32));
    v16 = sub_20E9DF85C(v146, (uint64_t *)v8);
    v21 = v16 + 5;
    if (!v16)
      v21 = 0;
    v147 = (float64x2_t **)v21;
    if (!v15
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/VIODatabaseUtil.hpp", 111, (uint64_t)"old_anchor_pose_ref != nullptr", 30, (uint64_t)"Cannot find the pose ref", 24, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    if (!v16
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/VIODatabaseUtil.hpp", 112, (uint64_t)"new_anchor_pose_ref != nullptr", 30, (uint64_t)"Cannot find the pose ref", 24, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v22 = (uint64_t)v147[8];
    if (v22)
    {
      v23 = *((float *)v8 + 8);
      v24 = *((float *)v8 + 9);
      v25 = *(_DWORD *)(v22 + 992);
      if (v25 != -1)
        goto LABEL_27;
    }
    else
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/VIODatabaseUtil.hpp", 115, (uint64_t)"new_anchor_pose_ref->lens", 25, (uint64_t)"Lens does not exist", 19, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v22 = (uint64_t)v147[8];
      v23 = *((float *)v8 + 8);
      v24 = *((float *)v8 + 9);
      v25 = *(_DWORD *)(v22 + 992);
      if (v25 != -1)
      {
LABEL_27:
        v26 = v23;
        v27 = v24;
        if (v25 <= 7)
          goto LABEL_28;
        goto LABEL_34;
      }
    }
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v25 = *(_DWORD *)(v22 + 992);
    v26 = v23;
    v27 = v24;
    if (v25 <= 7)
    {
LABEL_28:
      if (!v25)
      {
        sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
        abort();
      }
      v10.f64[0] = *(float64_t *)(v22 + 80);
      v174 = *(double *)(v22 + 88) + *(double *)(v22 + 72) * v26 + v10.f64[0] * v27;
      v28 = *(double *)(v22 + 104);
      v18.i64[0] = *(_QWORD *)(v22 + 112);
      *(double *)v17.i64 = v28 * v27 + *(double *)v18.i64;
LABEL_35:
      v175 = v17.i64[0];
LABEL_36:
      v151 = (float64x2_t *)&v149;
      v152 = (float64x2_t *)&v174;
      v153 = (float64x2_t *)v148;
      v154 = 0;
      v155 = 0;
      if (v25 <= 7)
        break;
      goto LABEL_70;
    }
LABEL_34:
    v10.f64[0] = *(float64_t *)(v22 + 80);
    v174 = *(double *)(v22 + 88) + *(double *)(v22 + 72) * v26 + v10.f64[0] * v27;
    v28 = *(double *)(v22 + 104);
    v18.i64[0] = *(_QWORD *)(v22 + 112);
    *(double *)v17.i64 = v28 * v27 + *(double *)v18.i64;
    if (v25 < 0xE)
      goto LABEL_35;
    v175 = v17.i64[0];
    if (v25 == 14)
      goto LABEL_36;
    v34 = (float64x2_t *)&v149;
    v35 = (float64x2_t *)&v174;
    v151 = (float64x2_t *)&v149;
    v152 = (float64x2_t *)&v174;
    v36 = (float64x2_t *)v148;
    v153 = (float64x2_t *)v148;
    v154 = 0;
    v155 = 0;
    if (v25 != -1)
    {
      v37 = 0;
      v38 = 0;
LABEL_97:
      v9 = sub_20EB3CED8(v22, (uint64_t)v34, v35, v36, v38, v37);
LABEL_12:
      if ((v9 & 1) != 0)
        goto LABEL_129;
      goto LABEL_13;
    }
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v25 = *(_DWORD *)(v22 + 992);
    if (v25 <= 7)
      break;
LABEL_70:
    v34 = v151;
    if (v25 > 0xB)
    {
      if (v25 <= 0xD)
      {
        if (v25 != 13)
        {
          f64 = (_QWORD *)v153->f64;
          v61 = v154;
          v63 = v155;
          if (v153)
          {
            v153->f64[0] = 0.0;
            f64[1] = 0;
            f64[2] = 0;
          }
          if (v63)
          {
            *(_QWORD *)(v63 + 64) = 0;
            *(_OWORD *)(v63 + 32) = 0u;
            *(_OWORD *)(v63 + 48) = 0u;
            *(_OWORD *)v63 = 0u;
            *(_OWORD *)(v63 + 16) = 0u;
          }
          v34->f64[0] = 0.0;
          v34->f64[1] = 0.0;
          v34[1].f64[0] = 0.0;
          if (v61)
          {
            v61[1] = 0u;
            v61[2] = 0u;
            *v61 = 0u;
          }
          goto LABEL_13;
        }
        v9 = sub_20EB43734((double *)v22, (uint64_t)v151, (uint64_t)v152, v153, (uint64_t)v154, v155);
        goto LABEL_12;
      }
      v35 = v152;
      v36 = v153;
      v38 = v154;
      v37 = v155;
      if (v25 != 14)
        goto LABEL_97;
      if (v153)
      {
        v153->f64[0] = 0.0;
        v36->f64[1] = 0.0;
        v36[1].f64[0] = 0.0;
      }
      if (v37)
      {
        *(_QWORD *)(v37 + 64) = 0;
        *(_OWORD *)(v37 + 32) = 0u;
        *(_OWORD *)(v37 + 48) = 0u;
        *(_OWORD *)v37 = 0u;
        *(_OWORD *)(v37 + 16) = 0u;
      }
      v57 = (*(double *)v22 + *(double *)(v22 + 32)) * 0.5;
      v58 = sub_20EB253A0((uint64_t)v34, (uint64_t)v35, (double *)(v22 + 168), (double *)(v22 + 392), 0x14u, v57);
      if (v38)
      {
        if ((v58 & 1) != 0)
        {
          if (sub_20EB2498C(&v162, (uint64_t)&v163, &v160, (uint64_t)v34, (double *)(v22 + 168), v57))
          {
            v48.i64[0] = *(_QWORD *)&v34[1].f64[0];
            *(_QWORD *)&v49 = v164.i64[0];
            _Q3 = v163;
            v166 = *(int8x16_t *)v34;
            v167 = v48.i64[0];
            v161 = 0;
            *(_QWORD *)&_Q5.f64[0] = v48.i64[0];
            *(_QWORD *)&_Q5.f64[1] = v166.i64[0];
            _Q5.f64[0] = vmlsq_f64(vmulq_f64(*(float64x2_t *)&v165, _Q5), (float64x2_t)vzip2q_s64(v165, v164), (float64x2_t)vextq_s8(v166, v48, 8uLL)).f64[1];
            __asm { FMLA            D6, D5, V3.D[1] }
            if (fabs(vmlad_n_f64(_D6, vmlsq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vmulq_f64((float64x2_t)v164, (float64x2_t)v166), 1), (float64x2_t)v165, (float64x2_t)v166).f64[0], *(double *)v164.i64)) >= 0.00000001)
            {
LABEL_86:
              *(_QWORD *)&v71 = vextq_s8(v163, v163, 8uLL).u64[0];
              _Q3.i64[1] = vextq_s8((int8x16_t)v164, (int8x16_t)v164, 8uLL).u64[0];
              *((_QWORD *)&v71 + 1) = v165.i64[0];
              *((_QWORD *)&v49 + 1) = vextq_s8((int8x16_t)v165, (int8x16_t)v165, 8uLL).u64[0];
              v168 = _Q3;
              v169 = *(double *)v166.i64;
              v171 = vextq_s8(v166, v166, 8uLL).u64[0];
              v170 = v71;
              v173 = v48.i64[0];
              v172 = v49;
              sub_20E8BE424((uint64_t)&v156);
              v72.f64[0] = v157;
              v10 = (float64x2_t)vzip1q_s64(v156, v158);
              v73 = vzip2q_s64(v156, v158);
              v72.f64[1] = v159;
              *v38 = v10;
              v38[1] = (float64x2_t)v73;
              v38[2] = v72;
LABEL_129:
              v66 = (float64x2_t **)(v15 + 5);
              if (!v15)
                v66 = 0;
              goto LABEL_131;
            }
          }
        }
      }
      else if (v58)
      {
        goto LABEL_129;
      }
    }
    else
    {
      v44 = (double *)v152;
      v45 = (_QWORD *)v153->f64;
      v38 = v154;
      v46 = v155;
      if (v25 <= 9)
      {
        if (v25 == 9)
        {
          v9 = sub_20EB35004(v22, (uint64_t)v151, v152, v153, (unint64_t)v154, v155, *(double *)v17.i64, v28, *(double *)v18.i64, (int32x4_t)v10, v19);
        }
        else
        {
          if (v153)
          {
            v153->f64[0] = 0.0;
            v45[1] = 0;
            v45[2] = 0;
          }
          if (v46)
          {
            *(_QWORD *)(v46 + 64) = 0;
            v17.i64[0] = 0;
            *(_OWORD *)(v46 + 32) = 0u;
            *(_OWORD *)(v46 + 48) = 0u;
            *(_OWORD *)v46 = 0u;
            *(_OWORD *)(v46 + 16) = 0u;
          }
          if (v38)
          {
            v9 = sub_20EB277C4((uint64_t)v34, (uint64_t)v38, v44, v22 + 168, 20, *(double *)v17.i64, v28, *(double *)v18.i64, (int32x4_t)v10, v19);
          }
          else
          {
            v64 = sqrt(*v44 * *v44 + v44[1] * v44[1]);
            v9 = sub_20EB24018((uint64_t)v34, v44, (double *)(v22 + 168), 20, v64, v64, *(double *)v18.i64, (int32x4_t)v10, v19);
          }
        }
        goto LABEL_12;
      }
      if (v25 != 10)
      {
        v9 = sub_20EB38E20(v22, (uint64_t)v151, v152, v153, v154, v155);
        goto LABEL_12;
      }
      if (v153)
      {
        v153->f64[0] = 0.0;
        v45[1] = 0;
        v45[2] = 0;
      }
      if (v46)
      {
        *(_QWORD *)(v46 + 64) = 0;
        *(_OWORD *)(v46 + 32) = 0u;
        *(_OWORD *)(v46 + 48) = 0u;
        *(_OWORD *)v46 = 0u;
        *(_OWORD *)(v46 + 16) = 0u;
      }
      v47 = (*(double *)v22 + *(double *)(v22 + 32)) * 0.5;
      v9 = sub_20EB24F38((uint64_t)v34, (uint64_t)v44, v22 + 168, (double *)(v22 + 280), 0x14u, v47);
      if (!v38)
        goto LABEL_12;
      if ((v9 & 1) != 0)
      {
        if (sub_20EB2450C(&v162, (uint64_t)&v163, &v160, (uint64_t)v34, (double *)(v22 + 168), v47))
        {
          v48.i64[0] = *(_QWORD *)&v34[1].f64[0];
          *(_QWORD *)&v49 = v164.i64[0];
          _Q3 = v163;
          v166 = *(int8x16_t *)v34;
          v167 = v48.i64[0];
          v161 = 0;
          *(_QWORD *)&_Q5.f64[0] = v48.i64[0];
          *(_QWORD *)&_Q5.f64[1] = v166.i64[0];
          _Q5.f64[0] = vmlsq_f64(vmulq_f64(*(float64x2_t *)&v165, _Q5), (float64x2_t)vzip2q_s64(v165, v164), (float64x2_t)vextq_s8(v166, v48, 8uLL)).f64[1];
          __asm { FMLA            D6, D5, V3.D[1] }
          if (fabs(vmlad_n_f64(_D6, vmlsq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vmulq_f64((float64x2_t)v164, (float64x2_t)v166), 1), (float64x2_t)v165, (float64x2_t)v166).f64[0], *(double *)v164.i64)) >= 0.00000001)goto LABEL_86;
        }
      }
    }
LABEL_13:
    v8 += 4;
    if (v8 == v145)
      return 0;
  }
  if (v25 > 3)
  {
    v40 = (uint64_t)v151;
    v39 = (double *)v152;
    v41 = (_QWORD *)v153->f64;
    v42 = v154;
    v43 = v155;
    if (v25 > 5)
    {
      if (v25 == 6)
        v9 = sub_20EB41C58((double *)v22, (uint64_t)v151, v152->f64, v153, (uint64_t)v154, v155);
      else
        v9 = sub_20EB306CC(v22, (uint64_t)v151, v152, v153, (unint64_t)v154, v155, *(double *)v17.i64, v28, v18, (int8x16_t)v10, *(double *)v19.i64, v11.f64[0], v20);
    }
    else if (v25 == 5)
    {
      if (v153)
      {
        v153->f64[0] = 0.0;
        v41[1] = 0;
        v41[2] = 0;
      }
      if (v43)
      {
        *(_QWORD *)(v43 + 64) = 0;
        *(_OWORD *)(v43 + 32) = 0u;
        *(_OWORD *)(v43 + 48) = 0u;
        *(_OWORD *)v43 = 0u;
        *(_OWORD *)(v43 + 16) = 0u;
      }
      if (v42)
        v9 = sub_20EB28F10(v40, (uint64_t)v42, v39, v22 + 168, 5);
      else
        v9 = sub_20EB2886C(v40, v39, v22 + 168, 5);
    }
    else
    {
      if (v153)
      {
        v153->f64[0] = 0.0;
        v41[1] = 0;
        v41[2] = 0;
      }
      if (v43)
      {
        *(_QWORD *)(v43 + 64) = 0;
        v17 = 0uLL;
        *(_OWORD *)(v43 + 32) = 0u;
        *(_OWORD *)(v43 + 48) = 0u;
        *(_OWORD *)v43 = 0u;
        *(_OWORD *)(v43 + 16) = 0u;
      }
      if (v42)
      {
        if (!*(_BYTE *)(v22 + 468))
        {
          v17.i64[0] = sub_20EB27C0C(v22 + 204, (double *)(v22 + 168), 0x32uLL, v17, v28, v18, (int8x16_t)v10).u64[0];
          *(_BYTE *)(v22 + 468) = 1;
        }
        v9 = sub_20EA8D684(v40, (uint64_t)v39, (int64x2_t *)(v22 + 168), (float *)(v22 + 204), v42, 5, *(double *)v17.i64, v28, *(double *)v18.i64, v10.f64[0], *(double *)v19.i64, v11.f64[0], v20);
      }
      else
      {
        if (!*(_BYTE *)(v22 + 468))
        {
          v17.i64[0] = sub_20EB27C0C(v22 + 204, (double *)(v22 + 168), 0x32uLL, v17, v28, v18, (int8x16_t)v10).u64[0];
          *(_BYTE *)(v22 + 468) = 1;
        }
        v9 = sub_20EA8D684(v40, (uint64_t)v39, (int64x2_t *)(v22 + 168), (float *)(v22 + 204), 0, 5, *(double *)v17.i64, v28, *(double *)v18.i64, v10.f64[0], *(double *)v19.i64, v11.f64[0], v20);
      }
    }
    goto LABEL_12;
  }
  if (v25 > 1)
  {
    if (v25 == 2)
    {
      v9 = sub_20EA8D22C((uint64_t)&v151, v22);
    }
    else
    {
      v29 = (double *)v151;
      v30 = (double *)v152;
      v32 = (_QWORD *)v153->f64;
      v31 = v154;
      v33 = v155;
      if (v153)
      {
        v153->f64[0] = 0.0;
        v32[1] = 0;
        v32[2] = 0;
      }
      if (v33)
      {
        *(_QWORD *)(v33 + 64) = 0;
        v17.i64[0] = 0;
        *(_OWORD *)(v33 + 32) = 0u;
        *(_OWORD *)(v33 + 48) = 0u;
        *(_OWORD *)v33 = 0u;
        *(_OWORD *)(v33 + 16) = 0u;
      }
      if (v31)
        v9 = sub_20EB27398(v29, (uint64_t)v31, v30, (int64x2_t *)(v22 + 168), 20, *(double *)v17.i64, v28, *(double *)v18.i64, v10.f64[0], (int64x2_t)v19);
      else
        v9 = sub_20EB23DF0((uint64_t)v29, v30, (int64x2_t *)(v22 + 168), 20, *(double *)v17.i64, v28, *(double *)v18.i64, v10.f64[0], (int64x2_t)v19, v11);
    }
    goto LABEL_12;
  }
  v66 = (float64x2_t **)(v15 + 5);
  if (!v15)
    v66 = 0;
  if (!v25)
  {
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  v67 = (uint64_t)v151;
  v69 = (_QWORD *)v153->f64;
  v68 = v154;
  v70 = v155;
  *v151 = *v152;
  *(_QWORD *)(v67 + 16) = 0x3FF0000000000000;
  if (v69)
  {
    *v69 = 0;
    v69[1] = 0;
    v69[2] = 0;
  }
  if (v68)
  {
    *v68 = (float64x2_t)xmmword_210312EC0;
    v68[1] = (float64x2_t)unk_210312ED0;
    v68[2] = (float64x2_t)xmmword_210312EE0;
  }
  if (v70)
  {
    *(_QWORD *)(v70 + 64) = 0;
    *(_OWORD *)(v70 + 32) = 0u;
    *(_OWORD *)(v70 + 48) = 0u;
    *(_OWORD *)v70 = 0u;
    *(_OWORD *)(v70 + 16) = 0u;
  }
LABEL_131:
  v10.f64[0] = v150;
  _Q1 = v149;
  *(_QWORD *)&v75 = vextq_s8(_Q1, _Q1, 8uLL).u64[0];
  _D2 = *(double *)&v149.i64[1];
  __asm { FMLA            D0, D2, V1.D[1] }
  v11.f64[0] = 1.0 / sqrt(_D0 + v10.f64[0] * v10.f64[0]);
  *(_QWORD *)&v78 = *(_OWORD *)&vmulq_f64(v10, v11);
  v79 = vmulq_n_f64((float64x2_t)v149, v11.f64[0]);
  *(_QWORD *)&v80 = vextq_s8((int8x16_t)v79, (int8x16_t)v79, 8uLL).u64[0];
  v149 = (int8x16_t)v79;
  v150 = v78;
  if (*(_BYTE *)(a3 + 488))
    v81 = v6;
  else
    v81 = 0;
  v12.f64[0] = *(float64_t *)(v81 + 376);
  v82 = **v66;
  _D18 = (*v66)[2].f64[1];
  v84 = *(float64x2_t *)((char *)*v66 + 24);
  v85 = (*v66)[4].f64[0];
  v86 = (*v66)[3];
  v87 = v66[4];
  _Q22 = *v87;
  _Q23 = *(float64x2_t *)((char *)v87 + 24);
  _Q24 = v87[3];
  v91 = vmlaq_laneq_f64(vmulq_n_f64(v82, v87->f64[0]), v84, *v87, 1);
  __asm { FMLA            D26, D18, V22.D[1] }
  v93 = vmlaq_laneq_f64(vmulq_n_f64(v82, _Q23.f64[0]), v84, _Q23, 1);
  __asm { FMLA            D27, D18, V23.D[1] }
  v95 = vmlaq_laneq_f64(vmulq_n_f64(v82, _Q24.f64[0]), v84, _Q24, 1);
  __asm { FMLA            D28, D18, V24.D[1] }
  v97 = v66[6];
  _Q24 = *v97;
  v99 = vmlaq_laneq_f64(vmulq_n_f64(v82, v97->f64[0]), v84, *v97, 1);
  v100 = **v147;
  __asm { FMLA            D17, D18, V24.D[1] }
  _D18 = (*v147)[2].f64[1];
  v102 = vmlaq_n_f64(v91, v86, v87[1].f64[0]);
  v103 = v87[2].f64[1];
  v104 = vmlaq_n_f64(v93, v86, v103);
  _D26 = _D27 + v85 * v103;
  v106 = v87[4].f64[0];
  _Q23 = vmlaq_n_f64(v95, v86, v106);
  v108 = _D28 + v85 * v106;
  v109 = v97[1].f64[0];
  v110 = vmlaq_n_f64(v99, v86, v109);
  v111 = *(float64x2_t *)((char *)*v147 + 24);
  v112 = v147[4];
  _Q17.f64[0] = _Q17.f64[0] + v85 * v109;
  _Q20 = *v112;
  v114 = v147[6];
  _Q28 = vmulq_n_f64(*(float64x2_t *)(v81 + 64), v12.f64[0]);
  v116 = vmlaq_laneq_f64(vmulq_n_f64(v102, _Q28.f64[0]), v104, _Q28, 1);
  _Q22 = *v114;
  __asm { FMLA            D24, D26, V28.D[1] }
  v118 = vmlaq_laneq_f64(vmulq_n_f64(v100, v114->f64[0]), v111, *v114, 1);
  __asm { FMLA            D28, D18, V22.D[1] }
  _Q22.f64[0] = *(float64_t *)(v81 + 80);
  *(_QWORD *)&v119 = *(_OWORD *)&vmulq_f64(v12, _Q22);
  _Q22 = *(float64x2_t *)((char *)v112 + 24);
  v121 = vmlaq_n_f64(v116, _Q23, v119);
  _Q24.f64[0] = vmlad_n_f64(_Q24.f64[0], v108, v119);
  v122 = vmlaq_laneq_f64(vmulq_n_f64(v100, v112->f64[0]), v111, *v112, 1);
  __asm { FMLA            D23, D18, V20.D[1] }
  v123 = vmlaq_laneq_f64(vmulq_n_f64(v100, _Q22.f64[0]), v111, _Q22, 1);
  __asm { FMLA            D27, D18, V22.D[1] }
  _Q22 = v112[3];
  v126 = vmlaq_laneq_f64(vmulq_n_f64(v100, _Q22.f64[0]), v111, _Q22, 1);
  v111.f64[0] = (*v147)[4].f64[0];
  __asm { FMLA            D6, D18, V22.D[1] }
  v128 = (*v147)[3];
  _Q22.f64[0] = v114[1].f64[0];
  v129 = vmlaq_n_f64(v118, v128, _Q22.f64[0]);
  _Q22.f64[0] = _Q28.f64[0] + v111.f64[0] * _Q22.f64[0];
  _Q28.f64[0] = v112[1].f64[0];
  _Q7 = (int64x2_t)vmlaq_n_f64(v122, v128, _Q28.f64[0]);
  _Q23.f64[0] = _Q23.f64[0] + v111.f64[0] * _Q28.f64[0];
  _Q28.f64[0] = v112[2].f64[1];
  v131 = (int64x2_t)vmlaq_n_f64(v123, v128, _Q28.f64[0]);
  v132 = _D27 + v111.f64[0] * _Q28.f64[0];
  _Q28.f64[0] = v112[4].f64[0];
  _Q19 = vmlaq_n_f64(v126, v128, _Q28.f64[0]);
  v134 = v147[2];
  v135 = v66[2];
  _Q16 = vsubq_f64(vaddq_f64(vaddq_f64(v110, *v135), v121), vaddq_f64(v129, *v134));
  v137 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(_Q7, v131), _Q16.f64[0]), (float64x2_t)vzip2q_s64(_Q7, v131), _Q16, 1);
  _Q16.f64[0] = _Q16.f64[1];
  __asm { FMLA            D7, D16, V19.D[1] }
  _Q16.f64[0] = v134[1].f64[0];
  _Q19.f64[0] = v135[1].f64[0];
  *(_QWORD *)&_Q16.f64[0] = *(_OWORD *)&vsubq_f64(vaddq_f64(vaddq_f64(_Q17, _Q19), _Q24), vaddq_f64(_Q22, _Q16));
  _Q23.f64[1] = v132;
  _Q18 = vmlaq_n_f64(v137, _Q23, _Q16.f64[0]);
  _D4 = v75 * v11.f64[0];
  v140 = v10.f64[0] * v11.f64[0];
  __asm { FMLA            D5, D4, V18.D[1] }
  v142 = _D5 + v140 * vmlad_n_f64(*(double *)_Q7.i64, _D6 + v111.f64[0] * _Q28.f64[0], _Q16.f64[0]);
  if (v142 <= 0.0)
  {
    *(_QWORD *)(v81 + 376) = 0x7FF8000000000000;
    *(_QWORD *)(v81 + 384) = 0x7FF8000000000000;
  }
  else
  {
    *(double *)(v81 + 376) = v142;
  }
  v143 = *((float *)v8 + 9);
  if (fabs(sqrt(vmulq_f64(v79, v79).f64[0] + _D4 * v80 + v140 * v78) + -1.0) > 0.000001
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioanchoredpoint3d.hpp", 41, (uint64_t)"std::fabs(vio::math::L2Norm3(anchor_direcrion.data()) - 1) <= 1e-6", 66, (uint64_t)"anchor direction should be normalized to 1", 42, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v144 = *v8;
  *(_DWORD *)(v81 + 48) = *((_DWORD *)v8 + 4);
  *(_OWORD *)(v81 + 32) = v144;
  *(_QWORD *)(v81 + 96) = v147;
  *(int8x16_t *)(v81 + 64) = v149;
  *(double *)(v81 + 80) = v150;
  *(double *)(v81 + 88) = v143;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v81 + 16))(v81) & 1) == 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/VIODatabaseUtil.hpp", 159, (uint64_t)"ret", 3, (uint64_t)"When re-anchoring, failed to set anchor for track using frame ", 62, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  return 1;
}

void sub_20FB4462C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA044C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20FB4463C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA044C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20FB4466C(uint64_t a1)
{
  std::mutex *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  void *v12;

  v2 = *(std::mutex **)(a1 + 72);
  if (v2)
  {
    std::mutex::lock(*(std::mutex **)(a1 + 72));
    v2[1].__m_.__sig = 0;
    std::mutex::unlock(v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = *(_QWORD **)(a1 + 32);
    if (!v6)
      return;
  }
  else
  {
LABEL_7:
    v6 = *(_QWORD **)(a1 + 32);
    if (!v6)
      return;
  }
  v7 = *(_QWORD **)(a1 + 40);
  if (v7 == v6)
  {
    *(_QWORD *)(a1 + 40) = v6;
    operator delete(v6);
  }
  else
  {
    do
    {
      v9 = *--v7;
      v8 = v9;
      *v7 = 0;
      if (v9)
      {
        if (*(_BYTE *)(v8 + 112))
          *(_BYTE *)(v8 + 112) = 0;
        v10 = *(void **)(v8 + 120);
        *(_QWORD *)(v8 + 128) = v10;
        *(_DWORD *)(v8 + 144) = 0;
        if (v10)
          operator delete(v10);
        v11 = *(std::__shared_weak_count **)(v8 + 8);
        if (v11)
          std::__shared_weak_count::__release_weak(v11);
        MEMORY[0x212BC6398](v8, 0x10A2C405D2BE22CLL);
      }
    }
    while (v7 != v6);
    v12 = *(void **)(a1 + 32);
    *(_QWORD *)(a1 + 40) = v6;
    operator delete(v12);
  }
}

void sub_20FB44794(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA04510;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20FB447A4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA04510;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20FB447D4(uint64_t a1)
{
  std::mutex::~mutex((std::mutex *)(a1 + 24));
}

uint64_t *sub_20FB447E0(uint64_t *a1)
{
  uint64_t v2;
  void *v3;
  std::__shared_weak_count *v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(v2 + 112))
      *(_BYTE *)(v2 + 112) = 0;
    v3 = *(void **)(v2 + 120);
    *(_QWORD *)(v2 + 128) = v3;
    *(_DWORD *)(v2 + 144) = 0;
    if (v3)
      operator delete(v3);
    v4 = *(std::__shared_weak_count **)(v2 + 8);
    if (v4)
      std::__shared_weak_count::__release_weak(v4);
    MEMORY[0x212BC6398](v2, 0x10A2C405D2BE22CLL);
  }
  return a1;
}

uint64_t sub_20FB44854(uint64_t a1)
{
  size_t prime;
  unint64_t v3;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_QWORD *)(a1 + 40) = 1000;
  prime = std::__next_prime(0x3E8uLL);
  v3 = prime;
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_2;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (v3 <= v5)
      v3 = v5;
    if (v3 < *(_QWORD *)&v4)
LABEL_2:
      sub_20E8D2B3C(a1, v3);
  }
  return a1;
}

void sub_20FB44928(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8E90DC(v1);
  _Unwind_Resume(a1);
}

void sub_20FB4493C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA04560;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20FB4494C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA04560;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20FB4497C(uint64_t a1)
{
  std::mutex::~mutex((std::mutex *)(a1 + 24));
}

uint64_t *sub_20FB44988(uint64_t *a1)
{
  uint64_t v2;
  void *v3;
  std::__shared_weak_count *v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(v2 + 488))
      *(_BYTE *)(v2 + 488) = 0;
    v3 = *(void **)(v2 + 496);
    *(_QWORD *)(v2 + 504) = v3;
    *(_DWORD *)(v2 + 520) = 0;
    if (v3)
      operator delete(v3);
    v4 = *(std::__shared_weak_count **)(v2 + 8);
    if (v4)
      std::__shared_weak_count::__release_weak(v4);
    MEMORY[0x212BC6398](v2, 0x10E2C401D09A2A5);
  }
  return a1;
}

void sub_20FB449F8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA045B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20FB44A08(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA045B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20FB44A38(uint64_t a1)
{
  std::mutex::~mutex((std::mutex *)(a1 + 24));
}

uint64_t *sub_20FB44A44(uint64_t *a1)
{
  uint64_t v2;
  void *v3;
  std::__shared_weak_count *v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(v2 + 968))
      *(_BYTE *)(v2 + 968) = 0;
    v3 = *(void **)(v2 + 976);
    *(_QWORD *)(v2 + 984) = v3;
    *(_DWORD *)(v2 + 1000) = 0;
    if (v3)
      operator delete(v3);
    v4 = *(std::__shared_weak_count **)(v2 + 8);
    if (v4)
      std::__shared_weak_count::__release_weak(v4);
    MEMORY[0x212BC6398](v2, 0x10E2C408E9A3F00);
  }
  return a1;
}

uint64_t sub_20FB44AB8(uint64_t a1)
{
  std::mutex *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  std::__shared_weak_count *v12;

  v2 = *(std::mutex **)(a1 + 48);
  if (v2)
  {
    std::mutex::lock(*(std::mutex **)(a1 + 48));
    v2[1].__m_.__sig = 0;
    std::mutex::unlock(v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *(_QWORD **)(a1 + 8);
  if (v6)
  {
    v7 = *(_QWORD **)(a1 + 16);
    v8 = *(void **)(a1 + 8);
    if (v7 != v6)
    {
      do
      {
        v10 = *--v7;
        v9 = v10;
        *v7 = 0;
        if (v10)
        {
          if (*(_BYTE *)(v9 + 488))
            *(_BYTE *)(v9 + 488) = 0;
          v11 = *(void **)(v9 + 496);
          *(_QWORD *)(v9 + 504) = v11;
          *(_DWORD *)(v9 + 520) = 0;
          if (v11)
            operator delete(v11);
          v12 = *(std::__shared_weak_count **)(v9 + 8);
          if (v12)
            std::__shared_weak_count::__release_weak(v12);
          MEMORY[0x212BC6398](v9, 0x10E2C401D09A2A5);
        }
      }
      while (v7 != v6);
      v8 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v6;
    operator delete(v8);
  }
  return a1;
}

uint64_t sub_20FB44BBC(uint64_t a1)
{
  std::mutex *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  std::__shared_weak_count *v12;

  v2 = *(std::mutex **)(a1 + 48);
  if (v2)
  {
    std::mutex::lock(*(std::mutex **)(a1 + 48));
    v2[1].__m_.__sig = 0;
    std::mutex::unlock(v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *(_QWORD **)(a1 + 8);
  if (v6)
  {
    v7 = *(_QWORD **)(a1 + 16);
    v8 = *(void **)(a1 + 8);
    if (v7 != v6)
    {
      do
      {
        v10 = *--v7;
        v9 = v10;
        *v7 = 0;
        if (v10)
        {
          if (*(_BYTE *)(v9 + 968))
            *(_BYTE *)(v9 + 968) = 0;
          v11 = *(void **)(v9 + 976);
          *(_QWORD *)(v9 + 984) = v11;
          *(_DWORD *)(v9 + 1000) = 0;
          if (v11)
            operator delete(v11);
          v12 = *(std::__shared_weak_count **)(v9 + 8);
          if (v12)
            std::__shared_weak_count::__release_weak(v12);
          MEMORY[0x212BC6398](v9, 0x10E2C408E9A3F00);
        }
      }
      while (v7 != v6);
      v8 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v6;
    operator delete(v8);
  }
  return a1;
}

_QWORD *sub_20FB44CC0(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  *((_BYTE *)v10 + 20) = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v6 = v3;
  }
  else
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        v19 = std::__next_prime(v19);
      }
      else
      {
        v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2)
          v19 = v21;
      }
      if (prime <= v19)
        prime = v19;
      if (prime < v7)
LABEL_35:
        sub_20E8D2B3C(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v6 %= v7;
    }
    else
    {
      v6 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
  if (v23)
  {
    *v10 = *v23;
LABEL_58:
    *v23 = v10;
    goto LABEL_59;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v22 + 8 * v6) = a1 + 16;
  if (*v10)
  {
    v24 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7)
        v24 %= v7;
    }
    else
    {
      v24 &= v7 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_20FB44F8C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20FB44FA0(uint64_t a1)
{
  uint64_t v1;
  int8x16_t **v2;
  uint64_t v3;
  uint64_t *v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  int8x16_t **v9;
  int8x16_t *v10;
  float64x2_t v11;
  int8x16_t *v12;
  int8x16_t *v13;
  int8x16_t *v14;
  uint64_t v15;
  float64x2_t v16;
  _OWORD *v17;
  __int128 v18;
  int8x16_t *v19;
  int8x16_t *v20;
  float64x2_t *v21;
  float64x2_t *v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  _QWORD *v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  __int128 v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int8x16_t v46;
  unint64_t v47;
  uint64_t v48;
  float64x2_t *v49;
  unint64_t v50;
  unint64_t v51;
  int8x16_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  float64x2_t v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  float64x2_t v61;
  float64x2_t v62;
  char v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  float64x2_t v73;
  double v74;
  float64x2_t v76;
  float64_t v77;
  float64x2_t v80;
  float64x2_t v82;
  float64x2_t v84;
  float64x2_t v86;
  double v92;
  double v93;
  double v94;
  double v95;
  float64x2_t v96;
  float64_t v97;
  double v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v105;
  float64x2_t v107;
  double v109;
  float64x2_t v110;
  float64x2_t v112;
  float64x2_t v115;
  uint64_t v116;
  float64x2_t v118;
  float64x2_t v120;
  float64x2_t v122;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v132;
  float64x2_t v133;
  double v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  uint64_t v163;
  double v164;
  double v165;
  double v166;
  float64x2_t v167;
  float64x2_t v168;
  double v169;
  double v170;
  float64x2_t v171;
  uint64_t v172;
  _BOOL4 v173;
  int v174;
  unint64_t v175;
  uint64_t v176;
  unsigned __int8 v177;
  const char *v178;
  size_t v179;
  void *v180;
  uint64_t v181;
  uint64_t v182;
  void *v183;
  size_t v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  NSObject *v188;
  std::__shared_weak_count *v189;
  unint64_t *p_shared_owners;
  unint64_t v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  uint64_t v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  float64x2_t v230;
  unint64_t v231;
  float64x2_t v232;
  unint64_t v233;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v240;
  int64x2_t v242;
  float64x2_t v243;
  double v244;
  float64_t v245;
  float64x2_t v246;
  float64x2_t v247;
  int64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v251;
  double v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v255;
  float64x2_t v256;
  float64x2_t v257;
  float64x2_t v258;
  float64x2_t v259;
  float64x2_t v260;
  float64x2_t v261;
  float64x2_t v262;
  float64x2_t v263;
  float64x2_t v264;
  float64x2_t v265;
  float64x2_t v266;
  float64x2_t v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  float64x2_t v277;
  double v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  uint64_t v283;
  float64x2_t *v284;
  float64x2_t v285;
  float64x2_t v286;
  float64x2_t v289;
  int8x16_t v291;
  int8x16_t v293;
  float64x2_t v295;
  uint64_t v298;
  int v299;
  unint64_t v300;
  unint64_t v301;
  uint64_t v302;
  uint64_t v303;
  size_t v304;
  const char *v305;
  float64x2_t v306;
  float64x2_t v307;
  float64x2_t v308;
  float64x2_t v309;
  float64x2_t v310;
  float64x2_t v311;
  float64x2_t v312;
  float64x2_t v313;
  float64x2_t v314;
  float64x2_t v315;
  float64x2_t v316;
  float64x2_t v317;
  float64x2_t v318;
  float64x2_t v319;
  float64x2_t v320;
  float64x2_t v321;
  float64x2_t v322;
  float64x2_t v323;
  float64x2_t v324;
  float64x2_t v325;
  float64x2_t v326;
  float64x2_t v327;
  float64x2_t v328;
  float64x2_t v329;
  float64x2_t v330;
  float64x2_t v331;
  float64x2_t v332;
  float64x2_t v333;
  float64x2_t v334;
  float64x2_t v335;
  float64x2_t v336;
  float64x2_t v337;
  float64x2_t v338;
  float64x2_t v339;
  float64x2_t v340;
  float64x2_t v341;
  float64x2_t v342;
  float64x2_t v343;
  float64x2_t v344;
  float64x2_t v345;
  float64x2_t v346;
  float64x2_t v347;
  float64x2_t v348;
  float64x2_t v349;
  float64x2_t v350;
  float64x2_t v351;
  float64x2_t v352;
  float64x2_t v353;
  float64x2_t v354;
  float64x2_t v355;
  float64x2_t v356;
  float64x2_t v357;
  float64x2_t v358;
  float64x2_t v359;
  float64x2_t v360;
  float64x2_t v361;
  float64x2_t v362;
  float64x2_t v363;
  float64x2_t v364;
  float64x2_t v365;
  float64x2_t v366;
  float64x2_t v367;
  float64x2_t v368;
  float64x2_t v369;
  float64x2_t v370;
  float64x2_t v371;
  float64x2_t v372;
  float64x2_t v373;
  float64x2_t v374;
  float64x2_t v375;
  float64x2_t v376;
  float64x2_t v377;
  float64x2_t v378;
  float64x2_t v379;
  float64x2_t v380;
  float64x2_t v381;
  float64x2_t v382;
  float64x2_t v383;
  float64x2_t v384;
  float64x2_t v385;
  uint64_t v386;
  double v387;
  int v388;
  unint64_t v389;
  uint64_t v390;
  uint64_t v392;
  uint64_t *v393;
  void *v394;
  void *v395;
  unsigned __int8 v396;
  const char *v397;
  size_t v398;
  _BYTE *v399;
  unint64_t v400;
  const char *v401;
  uint64_t v402;
  int v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  _BYTE *v407;
  uint64_t v408;
  uint64_t v409;
  NSObject *v410;
  size_t v411;
  std::__shared_weak_count_vtbl *v412;
  std::__shared_weak_count *v413;
  std::__shared_weak_count *v414;
  unint64_t *v415;
  unint64_t v416;
  unint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  float64_t v422;
  std::__shared_weak_count *v423;
  unint64_t *v424;
  unint64_t v425;
  std::__shared_weak_count *v426;
  unint64_t *v427;
  unint64_t v428;
  void *v429;
  std::__shared_weak_count *v430;
  unint64_t *v431;
  unint64_t v432;
  std::__shared_weak_count *v433;
  unint64_t *v434;
  unint64_t v435;
  std::__shared_weak_count *v436;
  unint64_t *v437;
  unint64_t v438;
  std::__shared_weak_count *v439;
  unint64_t *v440;
  unint64_t v441;
  void *v442;
  float64_t v443;
  unint64_t *v444;
  unint64_t v445;
  unsigned __int8 v446;
  float64_t v447;
  const char *v448;
  NSObject *v449;
  float64x2_t v450;
  float64x2_t v451;
  float64x2_t v452;
  float64x2_t v453;
  float64x2_t v454;
  float64x2_t v455;
  float64x2_t v456;
  int8x16_t v457;
  float64x2_t v458;
  int v459;
  unint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t *v463;
  void *v464;
  void *v465;
  int v466;
  unint64_t v467;
  uint64_t v468;
  uint64_t *v469;
  void *v470;
  void *v471;
  unsigned __int8 v472;
  float64_t v473;
  const char *v474;
  NSObject *v475;
  unsigned __int8 v476;
  float64_t v477;
  const char *v478;
  NSObject *v479;
  float64x2_t v480;
  int v481;
  unint64_t v482;
  uint64_t v483;
  uint64_t *v484;
  void *v485;
  void *v486;
  float64x2_t v487;
  float64x2_t v488;
  float64x2_t v489;
  float64x2_t v490;
  float64x2_t v491;
  float64x2_t v492;
  int v493;
  unint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t *v497;
  void *v498;
  void *v499;
  unsigned __int8 v500;
  float64_t v501;
  const char *v502;
  NSObject *v503;
  unsigned __int8 v505;
  float64_t v506;
  const char *v507;
  NSObject *v508;
  std::runtime_error *exception;
  const char *v510;
  uint64_t v511;
  __int128 v512;
  uint64_t v513;
  int64x2_t v514;
  int64x2_t v515;
  int64x2_t v516;
  int64x2_t v517;
  int64x2_t v518;
  int64x2_t v519;
  int64x2_t v520;
  int64x2_t v521;
  int64x2_t v522;
  int64x2_t v523;
  int64x2_t v524;
  int64x2_t v525;
  int64x2_t v526;
  int64x2_t v527;
  int64x2_t v528;
  int64x2_t v529;
  int64x2_t v530;
  int64x2_t v531;
  int64x2_t v532;
  int64x2_t v533;
  int64x2_t v534;
  int64x2_t v535;
  int64x2_t v536;
  int64x2_t v537;
  int64x2_t v538;
  int64x2_t v539;
  int64x2_t v540;
  int64x2_t v541;
  int64x2_t v542;
  __int128 v543;
  __int128 v544;
  int64x2_t v545;
  int64x2_t v546;
  int64x2_t v547;
  int64x2_t v548;
  int64x2_t v549;
  int64x2_t v550;
  __int128 v551;
  __int128 v552;
  int64x2_t v553;
  int64x2_t v554;
  __int128 v555;
  __int128 v556;
  int64x2_t v557;
  int64x2_t v558;
  __int128 v559;
  __int128 v560;
  int64x2_t v561;
  int64x2_t v562;
  __int128 v563;
  __int128 v564;
  int64x2_t v565;
  __int128 v566;
  int64x2_t v567;
  int64x2_t v568;
  int64x2_t v569;
  int64x2_t v570;
  __int128 v571;
  int64x2_t v572;
  __int128 v573;
  int64x2_t v574;
  __int128 v575;
  __int128 v576;
  int64x2_t v577;
  unint64_t v578;
  __int128 v579;
  unint64_t v580;
  int64x2_t v581;
  unint64_t v582;
  __int128 v583;
  unint64_t v584;
  __int128 v585;
  float64_t v586;
  float64_t v587;
  float64_t v588;
  float64_t v589;
  uint64_t v590;
  uint64_t v591;
  unint64_t v592;
  int64x2_t v593;
  int8x16_t v594;
  double v595;
  __int128 v596;
  int8x16_t v597;
  __int128 v598;
  float64x2_t v599;
  int64x2_t v600;
  int8x16_t v601;
  int64x2_t v602;
  void *v603[2];
  const char *v604;
  void *v605[2];
  int8x16_t v606;
  uint64_t *v607;
  int v608[4];
  int8x16_t v609;
  uint64_t v610;
  int64x2_t v611;
  double v612;
  int v613;
  __int128 v614;
  double v615;
  unint64_t v616;
  __int128 v617;
  char *category[2];
  const char *categorya;
  char *categoryb[2];
  float64x2_t v621;
  double v622;
  uint64_t v623;
  int8x16_t v624;
  double v625;
  uint64_t v626;
  double v627;
  uint64_t v628;
  int8x16_t v629;
  int8x16_t v630;
  unint64_t v631;
  int8x16_t v632;
  float64_t v633;
  uint64_t v634;
  float64_t v635;
  float64x2_t v636;
  float64x2_t v637;
  uint64_t v638;
  double v639;
  int8x16_t v640;
  int64x2_t v641;
  double v642;
  int8x16_t v643;
  int64x2_t v644;
  float64x2_t v645;
  int8x16_t v646;
  int64x2_t v647;
  float64_t v648;
  int8x16_t v649;
  float64x2_t v650;
  float64x2_t v651;
  uint64_t v652[3];
  int v653;
  const char *v654;
  int v655;
  const char *v656;
  uint64_t v657;
  std::__shared_weak_count *v658;
  uint64_t v659;
  float64x2_t __src[113];
  float64x2_t v661;
  float64_t v662;
  int64x2_t v663;
  float64_t v664;
  float64x2_t v665;
  double v666;
  float64x2_t v667;
  _BYTE v668[32];
  float64x2_t v669;
  _BYTE v670[32];
  float64x2_t v671;
  float64x2_t v672;
  void *object;
  void *v674;
  size_t v675;
  unint64_t v676;
  char v677;
  void *__p[2];
  unint64_t v679;
  char v680;
  _BYTE __dst[1808];
  uint64_t v682;
  char v683;
  uint64_t v684;

  MEMORY[0x24BDAC7A8](a1);
  v684 = *MEMORY[0x24BDAC8D0];
  v6 = v1 + 3680;
  if (!*(_BYTE *)(v1 + 7681))
    return 0;
  v7 = v1;
  if (!*(_QWORD *)(v1 + 16))
    return 0;
  v8 = v4;
  v9 = v2;
  v590 = v3;
  v10 = v2[1];
  *(_QWORD *)&v5 = (*v2)[3].i64[0];
  *(_OWORD *)category = v5;
  *(int8x16_t *)v603 = (*v2)[2];
  v615 = *(double *)&(*v2)[4].i64[1];
  v606 = *(int8x16_t *)((char *)*v2 + 56);
  v612 = *(double *)(*v2)[6].i64;
  v609 = (*v2)[5];
  v591 = (*v2)[7].i64[1];
  v594 = *(int8x16_t *)((char *)*v2 + 104);
  v627 = *(double *)v10[3].i64;
  v624 = v10[2];
  *(_QWORD *)&v11.f64[1] = v10[2].i64[1];
  *(_QWORD *)&v11.f64[0] = v10[4].i64[1];
  v621 = v11;
  v597 = *(int8x16_t *)((char *)v10 + 56);
  *(_QWORD *)&v11.f64[1] = v10[4].i64[0];
  *(_QWORD *)&v11.f64[0] = v10[6].i64[0];
  v599 = v11;
  v601 = v10[5];
  v12 = v2[2];
  v13 = v2[3];
  v638 = v12[3].i64[0];
  v629 = v12[2];
  *(_QWORD *)&v11.f64[1] = v12[2].i64[1];
  *(_QWORD *)&v11.f64[0] = v12[4].i64[1];
  v636 = v11;
  v630 = *(int8x16_t *)((char *)v12 + 56);
  v634 = v12[6].i64[0];
  v632 = v12[5];
  v589 = *(double *)&v12[7].i64[1];
  v643 = *(int8x16_t *)((char *)v12 + 104);
  v587 = *(double *)v13[3].i64;
  v646 = v13[2];
  v588 = *(double *)&v13[4].i64[1];
  v649 = *(int8x16_t *)((char *)v13 + 56);
  v586 = *(double *)v13[6].i64;
  v640 = v13[5];
  v14 = v2[4];
  v15 = v4[4];
  v16 = *(float64x2_t *)(v15 + 16);
  v671 = *(float64x2_t *)v15;
  v672 = v16;
  if (*(_BYTE *)(v1 + 56))
  {
    v17 = (_OWORD *)(v1 + 24);
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgtzq_f64(*(float64x2_t *)(v1 + 24)), (int32x4_t)vcgtzq_f64(*(float64x2_t *)(v1 + 40)))))) & 1) != 0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/BatchLeastSquares/include/VIO/BatchLeastSquares/Propagator.h", 159, (uint64_t)"(noise.e() > 0.).all()", 22, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v18 = *(_OWORD *)(v7 + 40);
    *(_OWORD *)v15 = *v17;
    *(_OWORD *)(v15 + 16) = v18;
    v15 = v8[4];
  }
  v19 = v9[6];
  v20 = v9[7];
  v21 = (float64x2_t *)v9[8];
  v22 = (float64x2_t *)v9[9];
  *(int8x16_t *)__dst = v20[2];
  v23 = *(_OWORD *)__dst;
  v24 = v20[3].i64[0];
  *(_QWORD *)&__dst[16] = v24;
  __src[0] = v21[2];
  __src[1].f64[0] = v21[3].f64[0];
  v661 = v22[2];
  v662 = v22[3].f64[0];
  v25 = v19[3].i64[0];
  *(int8x16_t *)(v15 + 64) = v19[2];
  *(_QWORD *)(v15 + 80) = v25;
  *(_OWORD *)(v15 + 88) = v23;
  *(_QWORD *)(v15 + 104) = v24;
  *(float64x2_t *)(v15 + 112) = __src[0];
  *(float64_t *)(v15 + 128) = __src[1].f64[0];
  *(float64x2_t *)(v15 + 136) = v661;
  *(float64_t *)(v15 + 152) = v662;
  if ((!(*v9)[8].i8[0] || !v9[1][6].i8[8] || !v9[2][8].i8[0] || !v9[3][6].i8[8] || !v9[4][2].i8[8])
    && *(_BYTE *)(v6 + 3992))
  {
    *(_BYTE *)(v6 + 3992) = 0;
  }
  v26 = *(double *)v14[2].i64;
  v27 = *(double *)(v7 + 64) + v26;
  v28 = v26 + *(double *)(v7 + 72);
  v29 = (_QWORD *)v8[3];
  v30 = *(double *)v9[5][2].i64;
  sub_20FD33470(v29, (uint64_t)v8, v27, v28);
  v31 = *v8;
  if (v30 != 0.0)
  {
    v32 = v8[1];
    if (v31 != v32)
    {
      do
      {
        v33 = *(double *)v31 - v30;
        *(_QWORD *)&__src[0].f64[0] = sub_20FD33354(v29, v33);
        sub_210122B7C(v29 + 6, (uint64_t *)__src, (uint64_t)__dst, v33);
        v34 = *(_OWORD *)&__dst[32];
        *(_QWORD *)(v31 + 48) = *(_QWORD *)&__dst[48];
        *(_OWORD *)(v31 + 32) = v34;
        v31 += 56;
      }
      while (v31 != v32);
      v31 = *v8;
    }
  }
  v35 = v8[1];
  v36 = 0x6DB6DB6DB6DB6DB7 * ((v35 - v31) >> 3);
  if (v36 >= 2)
  {
    v37 = v31 + 56;
    if (*(double *)(v31 + 56) - *(double *)v31 < 0.0001)
    {
      if (v31 + 112 != v35)
      {
        v38 = v31 + 88;
        do
        {
          *(_QWORD *)(v38 - 32) = *(_QWORD *)(v38 + 24);
          *(_OWORD *)(v38 - 24) = *(_OWORD *)(v38 + 32);
          *(_QWORD *)(v38 - 8) = *(_QWORD *)(v38 + 48);
          *(_OWORD *)v38 = *(_OWORD *)(v38 + 56);
          *(_QWORD *)(v38 + 16) = *(_QWORD *)(v38 + 72);
          v39 = v38 + 80;
          v38 += 56;
          v37 += 56;
        }
        while (v39 != v35);
        v31 = *v8;
      }
      v8[1] = v37;
      v36 = 0x6DB6DB6DB6DB6DB7 * ((v37 - v31) >> 3);
      v35 = v37;
    }
    if (v36 >= 3)
    {
      v40 = v31 + 56 * v36;
      v42 = *(double *)(v40 - 112);
      v41 = v40 - 112;
      if (*(double *)(v35 - 56) - v42 < 0.0001)
      {
        if (v41 + 56 == v35)
        {
          v35 = v41;
        }
        else
        {
          v43 = 112 - v31;
          v44 = 56 * v36;
          do
          {
            v45 = v31 + v44;
            *(_QWORD *)(v45 - 112) = *(_QWORD *)(v31 + v44 - 56);
            *(_OWORD *)(v45 - 104) = *(_OWORD *)(v31 + v44 - 48);
            *(_QWORD *)(v45 - 88) = *(_QWORD *)(v31 + v44 - 32);
            *(_OWORD *)(v45 - 80) = *(_OWORD *)(v31 + v44 - 24);
            *(_QWORD *)(v45 - 64) = *(_QWORD *)(v31 + v44 - 8);
            v43 -= 56;
            v31 += 56;
          }
          while (v31 + v44 - 56 != v35);
          v31 = *v8;
          v35 = 56 * v36 - v43;
        }
        v8[1] = v35;
      }
    }
  }
  if (*(double *)v31 != v27 || *(double *)(v35 - 56) != v28)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E8610C0(__dst, "IMU resampler");
    std::runtime_error::runtime_error(exception, (const std::string *)__dst);
    exception->__vftable = (std::runtime_error_vtbl *)&off_24CA04F20;
    __cxa_throw(exception, (struct type_info *)&unk_24CA04F38, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v46 = *(int8x16_t *)v603;
  v47 = vextq_s8(v46, v46, 8uLL).u64[0];
  v46.i64[1] = v47;
  LODWORD(v48) = v14[1].u8[4];
  v49 = (float64x2_t *)(v7 + 1880);
  v661 = (float64x2_t)v46;
  v50 = vextq_s8(v606, v606, 8uLL).u64[0];
  v51 = vextq_s8(v609, v609, 8uLL).u64[0];
  v52 = v594;
  v53 = vextq_s8(v624, v624, 8uLL).u64[0];
  v54 = vextq_s8(v597, v597, 8uLL).u64[0];
  v662 = *(double *)category;
  v664 = v615;
  v55 = vextq_s8(v601, v601, 8uLL).u64[0];
  *(_QWORD *)&v56.f64[0] = v606.i64[0];
  *(_QWORD *)&v56.f64[1] = v50;
  v663 = (int64x2_t)v56;
  *(_QWORD *)&v56.f64[0] = v609.i64[0];
  *(_QWORD *)&v56.f64[1] = v51;
  v665 = v56;
  v666 = v612;
  *(float64_t *)v668 = v621.f64[0];
  *(_QWORD *)&v56.f64[0] = v597.i64[0];
  *(_QWORD *)&v56.f64[1] = v54;
  v667 = v56;
  *(_QWORD *)&v56.f64[0] = v624.i64[0];
  *(_QWORD *)&v56.f64[1] = v53;
  *(float64x2_t *)&v668[8] = v56;
  *(double *)&v668[24] = v627;
  *(float64_t *)v670 = v599.f64[0];
  *(_QWORD *)&v56.f64[0] = v601.i64[0];
  *(_QWORD *)&v56.f64[1] = v55;
  v669 = v56;
  *(_QWORD *)&v670[24] = v591;
  v52.i64[1] = vextq_s8(v52, v52, 8uLL).u64[0];
  *(int8x16_t *)&v670[8] = v52;
  if (*(_BYTE *)(v6 + 4000) && *(_BYTE *)(v6 + 3992) && (!(_DWORD)v48 || *(_BYTE *)(v6 + 2160)))
  {
    sub_20F4BA010((uint64_t)&v661, v8[4], v8);
    v57 = *(_QWORD *)(v7 + 16);
    *(_BYTE *)(v57 + 8) = *(_BYTE *)(v6 + 2176);
    memcpy((void *)(v57 + 16), (const void *)(v7 + 5864), 0x708uLL);
    memcpy((void *)(v7 + 1880), (const void *)(v7 + 3920), 0x708uLL);
    v58 = *(_OWORD *)(v7 + 5800);
    *(_OWORD *)(v7 + 3744) = *(_OWORD *)(v7 + 5784);
    *(_OWORD *)(v7 + 3760) = v58;
    *(_OWORD *)(v7 + 3776) = *(_OWORD *)(v7 + 5816);
    v59 = *(_OWORD *)(v7 + 5736);
    *(_OWORD *)(v7 + 3680) = *(_OWORD *)(v7 + 5720);
    *(_OWORD *)(v7 + 3696) = v59;
    v60 = *(_OWORD *)(v7 + 5768);
    *(_OWORD *)(v7 + 3712) = *(_OWORD *)(v7 + 5752);
    *(_QWORD *)(v7 + 3792) = *(_QWORD *)(v7 + 5832);
    *(_OWORD *)(v7 + 3728) = v60;
    goto LABEL_99;
  }
  v578 = v54;
  v580 = v55;
  v582 = v50;
  v584 = v51;
  v592 = v47;
  v595 = *(double *)&v53;
  bzero(__src, 0x708uLL);
  sub_20F4BAD38();
  if ((_DWORD)v48)
  {
    v65 = v48;
    v66 = *v8;
    v48 = v8[1];
    if (!*v8
      && v48
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v67 = v8[4];
    v68 = *(double *)(v67 + 72);
    v69 = *(double *)(v67 + 96);
    v70 = *(double *)(v67 + 104);
    v72 = *(double *)(v67 + 80);
    v71 = *(double *)(v67 + 88);
    v62.f64[0] = *(float64_t *)(v67 + 176);
    v73 = *(float64x2_t *)(v67 + 160);
    v74 = *(double *)(v67 + 200);
    _Q20 = *(float64x2_t *)(v67 + 184);
    _Q7.f64[0] = *(float64_t *)(v67 + 224);
    v76 = *(float64x2_t *)(v67 + 208);
    v77 = v62.f64[0] * v71 + v74 * v68;
    _Q24 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v73, *(double *)(v67 + 64)), (float64x2_t)0, _Q20), (float64x2_t)0, v76);
    _Q25 = vmlaq_f64(vmlaq_n_f64(vmulq_n_f64(v73, v71), _Q20, v68), (float64x2_t)0, v76);
    v80 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v73, v69), _Q20, v70), v76, v72);
    _Q18.f64[0] = v62.f64[0] * v69 + v74 * v70 + _Q7.f64[0] * v72;
    _Q23 = *(float64x2_t *)(v67 + 232);
    v82 = vmlaq_laneq_f64(vmulq_n_f64(_Q24, _Q23.f64[0]), _Q25, _Q23, 1);
    _Q21 = *(float64x2_t *)(v67 + 256);
    v84 = vmlaq_laneq_f64(vmulq_n_f64(_Q24, _Q21.f64[0]), _Q25, _Q21, 1);
    _Q22 = *(float64x2_t *)(v67 + 280);
    v86 = vmlaq_laneq_f64(vmulq_n_f64(_Q24, _Q22.f64[0]), _Q25, _Q22, 1);
    _D28 = v77 + _Q7.f64[0] * 0.0;
    __asm
    {
      FMLA            D24, D28, V23.D[1]
      FMLA            D25, D28, V21.D[1]
      FMLA            D26, D28, V22.D[1]
    }
    v92 = *(double *)(v67 + 120);
    v93 = *(double *)(v67 + 128);
    v95 = *(double *)(v67 + 136);
    v94 = *(double *)(v67 + 144);
    v96 = vmlaq_n_f64(vmulq_n_f64(v73, v95), _Q20, v92);
    v97 = v62.f64[0] * v95 + v74 * v92;
    v98 = *(double *)(v67 + 152);
    v99 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v73, *(double *)(v67 + 112)), (float64x2_t)0, _Q20), (float64x2_t)0, v76);
    v100 = vmlaq_f64(v96, (float64x2_t)0, v76);
    _Q19 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v73, v94), _Q20, v98), v76, v93);
    v62.f64[0] = v62.f64[0] * v94 + v74 * v98 + _Q7.f64[0] * v93;
    _Q7.f64[0] = v97 + _Q7.f64[0] * 0.0;
    v102 = vmlaq_laneq_f64(vmulq_n_f64(v99, _Q23.f64[0]), v100, _Q23, 1);
    __asm { FMLA            D20, D7, V23.D[1] }
    v103 = vmlaq_laneq_f64(vmulq_n_f64(v99, _Q21.f64[0]), v100, _Q21, 1);
    __asm { FMLA            D27, D7, V21.D[1] }
    v105 = vmlaq_laneq_f64(vmulq_n_f64(v99, _Q22.f64[0]), v100, _Q22, 1);
    __asm { FMLA            D16, D7, V22.D[1] }
    _Q7.f64[0] = *(float64_t *)(v67 + 248);
    v107 = vmlaq_n_f64(v82, v80, _Q7.f64[0]);
    _Q22.f64[0] = *(float64_t *)(v67 + 272);
    _Q5 = vmlaq_n_f64(v84, v80, _Q22.f64[0]);
    v109 = *(double *)(v67 + 296);
    v110 = vmlaq_n_f64(v86, v80, v109);
    _Q25.f64[0] = _Q25.f64[0] + _Q18.f64[0] * _Q22.f64[0];
    _Q18.f64[0] = _D26 + _Q18.f64[0] * v109;
    _Q17 = vmlaq_n_f64(v102, _Q19, _Q7.f64[0]);
    v112 = vmlaq_n_f64(v103, _Q19, _Q22.f64[0]);
    _Q20.f64[0] = _D27 + v62.f64[0] * _Q22.f64[0];
    _Q21 = vmlaq_n_f64(v105, _Q19, v109);
    v62.f64[0] = _D16 + v62.f64[0] * v109;
    _Q2 = *(float64x2_t *)(v66 + 8);
    v115 = vmlaq_laneq_f64(vmulq_n_f64(_Q17, _Q2.f64[0]), v112, _Q2, 1);
    __asm { FMLA            D19, D20, V2.D[1] }
    v116 = v66 + 8 * ((v48 - v66) >> 3);
    _Q22 = *(float64x2_t *)(v116 - 48);
    v118 = vmlaq_laneq_f64(vmulq_n_f64(_Q17, _Q22.f64[0]), v112, _Q22, 1);
    __asm { FMLA            D17, D20, V22.D[1] }
    _Q7.f64[0] = *(float64_t *)(v66 + 24);
    _Q16 = vmlaq_n_f64(v115, _Q21, _Q7.f64[0]);
    _Q7.f64[0] = _Q19.f64[0] + v62.f64[0] * _Q7.f64[0];
    _Q19.f64[0] = *(float64_t *)(v116 - 32);
    v120 = vmlaq_n_f64(v118, _Q21, _Q19.f64[0]);
    v62.f64[0] = _Q17.f64[0] + v62.f64[0] * _Q19.f64[0];
    _Q17 = *(float64x2_t *)(v66 + 32);
    v122 = vmlaq_laneq_f64(vmulq_n_f64(v107, _Q17.f64[0]), _Q5, _Q17, 1);
    __asm { FMLA            D20, D25, V17.D[1] }
    _Q17 = *(float64x2_t *)(v116 - 24);
    v124 = vmlaq_laneq_f64(vmulq_n_f64(v107, _Q17.f64[0]), _Q5, _Q17, 1);
    __asm { FMLA            D5, D25, V17.D[1] }
    _Q17.f64[0] = *(float64_t *)(v66 + 48);
    v125 = vmlaq_n_f64(v122, v110, _Q17.f64[0]);
    _Q20.f64[0] = _Q20.f64[0] + _Q18.f64[0] * _Q17.f64[0];
    _Q17.f64[0] = *(float64_t *)(v116 - 8);
    v126 = vmlaq_n_f64(v124, v110, _Q17.f64[0]);
    _Q17.f64[0] = _Q5.f64[0] + _Q18.f64[0] * _Q17.f64[0];
    _Q6 = vsubq_f64(v126, v669);
    *(_QWORD *)&_Q5.f64[1] = v663.i64[1];
    v128 = vmlaq_laneq_f64(vmulq_n_f64(v661, _Q6.f64[0]), (float64x2_t)v663, _Q6, 1);
    _Q18.f64[0] = v664;
    __asm { FMLA            D5, D18, V6.D[1] }
    _Q18.f64[0] = *(float64_t *)v670;
    _Q6.f64[0] = *(float64_t *)&v668[24];
    *(_QWORD *)&_Q17.f64[0] = *(_OWORD *)&vsubq_f64(_Q17, _Q18);
    v129 = vmlaq_n_f64(v128, v665, _Q17.f64[0]);
    _Q5.f64[0] = vmlad_n_f64(_Q5.f64[0], v666, _Q17.f64[0]);
    *(_QWORD *)&_Q17.f64[0] = v597.i64[0];
    *(_QWORD *)&_Q17.f64[1] = v578;
    _Q17 = vsubq_f64(_Q16, _Q17);
    *(_QWORD *)&_Q20.f64[0] = *(_OWORD *)&vsubq_f64(_Q20, v599);
    *(_QWORD *)&_Q16.f64[0] = v601.i64[0];
    *(_QWORD *)&_Q16.f64[1] = v580;
    _Q19 = vsubq_f64(v125, _Q16);
    *(void **)&_Q16.f64[0] = v603[0];
    *(_QWORD *)&_Q16.f64[1] = v592;
    v132 = vmulq_n_f64(_Q16, _Q19.f64[0]);
    *(_QWORD *)&_Q16.f64[0] = v606.i64[0];
    *(_QWORD *)&_Q16.f64[1] = v582;
    v133 = vmlaq_laneq_f64(v132, _Q16, _Q19, 1);
    *(_QWORD *)&_Q16.f64[0] = v609.i64[0];
    *(_QWORD *)&_Q16.f64[1] = v584;
    _Q18 = vmlaq_n_f64(v133, _Q16, _Q20.f64[0]);
    *(char **)&_Q16.f64[1] = category[1];
    _Q21.f64[0] = v615;
    __asm { FMLA            D16, D21, V19.D[1] }
    _Q16.f64[0] = vmlad_n_f64(_Q16.f64[0], v612, _Q20.f64[0]);
    _D27 = *(_QWORD *)(v7 + 2112);
    __asm { FMLA            D19, D27, V17.D[1] }
    *(_QWORD *)&v136 = *(_OWORD *)&vsubq_f64(_Q7, v621);
    v137 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v49, _Q17.f64[0]), *(float64x2_t *)(v7 + 2000), _Q17, 1), *(float64x2_t *)(v7 + 2120), v136);
    v138 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v7 + 1896), _Q17.f64[0]), *(float64x2_t *)(v7 + 2016), _Q17, 1), *(float64x2_t *)(v7 + 2136), v136);
    v139 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v7 + 1912), _Q17.f64[0]), *(float64x2_t *)(v7 + 2032), _Q17, 1), *(float64x2_t *)(v7 + 2152), v136);
    v140 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v7 + 1928), _Q17.f64[0]), *(float64x2_t *)(v7 + 2048), _Q17, 1), *(float64x2_t *)(v7 + 2168), v136);
    v141 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v7 + 1944), _Q17.f64[0]), *(float64x2_t *)(v7 + 2064), _Q17, 1), *(float64x2_t *)(v7 + 2184), v136);
    v142 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v7 + 1960), _Q17.f64[0]), *(float64x2_t *)(v7 + 2080), _Q17, 1), *(float64x2_t *)(v7 + 2200), v136);
    v143 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v7 + 1976), _Q17.f64[0]), *(float64x2_t *)(v7 + 2096), _Q17, 1), *(float64x2_t *)(v7 + 2216), v136);
    v144 = *(float64x2_t *)(v67 + 32);
    _Q17 = vsubq_f64(_Q18, v144);
    v146 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v137, (float64x2_t)0, *(float64x2_t *)(v7 + 2240)), (float64x2_t)0, *(float64x2_t *)(v7 + 2360)), (float64x2_t)0, *(float64x2_t *)(v7 + 2480)), *(float64x2_t *)(v7 + 2600), _Q17.f64[0]), *(float64x2_t *)(v7 + 2720), _Q17, 1);
    v147 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v138, (float64x2_t)0, *(float64x2_t *)(v7 + 2256)), (float64x2_t)0, *(float64x2_t *)(v7 + 2376)), (float64x2_t)0, *(float64x2_t *)(v7 + 2496)), *(float64x2_t *)(v7 + 2616), _Q17.f64[0]), *(float64x2_t *)(v7 + 2736), _Q17, 1);
    v148 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v139, (float64x2_t)0, *(float64x2_t *)(v7 + 2272)), (float64x2_t)0, *(float64x2_t *)(v7 + 2392)), (float64x2_t)0, *(float64x2_t *)(v7 + 2512)), *(float64x2_t *)(v7 + 2632), _Q17.f64[0]), *(float64x2_t *)(v7 + 2752), _Q17, 1);
    v149 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v140, (float64x2_t)0, *(float64x2_t *)(v7 + 2288)), (float64x2_t)0, *(float64x2_t *)(v7 + 2408)), (float64x2_t)0, *(float64x2_t *)(v7 + 2528)), *(float64x2_t *)(v7 + 2648), _Q17.f64[0]), *(float64x2_t *)(v7 + 2768), _Q17, 1);
    v150 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v141, (float64x2_t)0, *(float64x2_t *)(v7 + 2304)), (float64x2_t)0, *(float64x2_t *)(v7 + 2424)), (float64x2_t)0, *(float64x2_t *)(v7 + 2544)), *(float64x2_t *)(v7 + 2664), _Q17.f64[0]), *(float64x2_t *)(v7 + 2784), _Q17, 1);
    v151 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v142, (float64x2_t)0, *(float64x2_t *)(v7 + 2320)), (float64x2_t)0, *(float64x2_t *)(v7 + 2440)), (float64x2_t)0, *(float64x2_t *)(v7 + 2560)), *(float64x2_t *)(v7 + 2680), _Q17.f64[0]), *(float64x2_t *)(v7 + 2800), _Q17, 1);
    v152 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v143, (float64x2_t)0, *(float64x2_t *)(v7 + 2336)), (float64x2_t)0, *(float64x2_t *)(v7 + 2456)), (float64x2_t)0, *(float64x2_t *)(v7 + 2576)), *(float64x2_t *)(v7 + 2696), _Q17.f64[0]), *(float64x2_t *)(v7 + 2816), _Q17, 1);
    _Q19.f64[0] = *(float64_t *)(v7 + 2832);
    __asm { FMLA            D18, D19, V17.D[1] }
    _Q17.f64[0] = *(float64_t *)(v67 + 48);
    *(_QWORD *)&_Q16.f64[0] = *(_OWORD *)&vsubq_f64(_Q16, _Q17);
    v153 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_n_f64(v146, *(float64x2_t *)(v7 + 2840), _Q16.f64[0]), (float64x2_t)0, *(float64x2_t *)(v7 + 2960)), (float64x2_t)0, *(float64x2_t *)(v7 + 3080)), (float64x2_t)0, *(float64x2_t *)(v7 + 3200)), *(float64x2_t *)(v7 + 3320), *(double *)v624.i64), *(float64x2_t *)(v7 + 3440), v595), *(float64x2_t *)(v7 + 3560), v627);
    v154 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_n_f64(v147, *(float64x2_t *)(v7 + 2856), _Q16.f64[0]), (float64x2_t)0, *(float64x2_t *)(v7 + 2976)), (float64x2_t)0, *(float64x2_t *)(v7 + 3096)), (float64x2_t)0, *(float64x2_t *)(v7 + 3216)), *(float64x2_t *)(v7 + 3336), *(double *)v624.i64), *(float64x2_t *)(v7 + 3456), v595), *(float64x2_t *)(v7 + 3576), v627);
    v155 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_n_f64(v148, *(float64x2_t *)(v7 + 2872), _Q16.f64[0]), (float64x2_t)0, *(float64x2_t *)(v7 + 2992)), (float64x2_t)0, *(float64x2_t *)(v7 + 3112)), (float64x2_t)0, *(float64x2_t *)(v7 + 3232)), *(float64x2_t *)(v7 + 3352), *(double *)v624.i64), *(float64x2_t *)(v7 + 3472), v595), *(float64x2_t *)(v7 + 3592), v627);
    v156 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_n_f64(v149, *(float64x2_t *)(v7 + 2888), _Q16.f64[0]), (float64x2_t)0, *(float64x2_t *)(v7 + 3008)), (float64x2_t)0, *(float64x2_t *)(v7 + 3128)), (float64x2_t)0, *(float64x2_t *)(v7 + 3248)), *(float64x2_t *)(v7 + 3368), *(double *)v624.i64), *(float64x2_t *)(v7 + 3488), v595), *(float64x2_t *)(v7 + 3608), v627);
    v157 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_n_f64(v150, *(float64x2_t *)(v7 + 2904), _Q16.f64[0]), (float64x2_t)0, *(float64x2_t *)(v7 + 3024)), (float64x2_t)0, *(float64x2_t *)(v7 + 3144)), (float64x2_t)0, *(float64x2_t *)(v7 + 3264)), *(float64x2_t *)(v7 + 3384), *(double *)v624.i64), *(float64x2_t *)(v7 + 3504), v595), *(float64x2_t *)(v7 + 3624), v627);
    v158 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_n_f64(v151, *(float64x2_t *)(v7 + 2920), _Q16.f64[0]), (float64x2_t)0, *(float64x2_t *)(v7 + 3040)), (float64x2_t)0, *(float64x2_t *)(v7 + 3160)), (float64x2_t)0, *(float64x2_t *)(v7 + 3280)), *(float64x2_t *)(v7 + 3400), *(double *)v624.i64), *(float64x2_t *)(v7 + 3520), v595), *(float64x2_t *)(v7 + 3640), v627);
    v159 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_n_f64(v152, *(float64x2_t *)(v7 + 2936), _Q16.f64[0]), (float64x2_t)0, *(float64x2_t *)(v7 + 3056)), (float64x2_t)0, *(float64x2_t *)(v7 + 3176)), (float64x2_t)0, *(float64x2_t *)(v7 + 3296)), *(float64x2_t *)(v7 + 3416), *(double *)v624.i64), *(float64x2_t *)(v7 + 3536), v595), *(float64x2_t *)(v7 + 3656), v627);
    v61.f64[0] = vmlad_n_f64(_Q18.f64[0], *(double *)(v7 + 2952), _Q16.f64[0])
               + *(double *)(v7 + 3072) * 0.0
               + *(double *)(v7 + 3192) * 0.0
               + *(double *)(v7 + 3312) * 0.0
               + *(double *)(v7 + 3432) * *(double *)v624.i64
               + *(double *)(v7 + 3552) * v595
               + *(double *)(v7 + 3672) * v627;
    _Q16.f64[1] = v667.f64[1];
    _Q16.f64[0] = *(float64_t *)v668;
    v160 = vsubq_f64(vsubq_f64(v120, v667), v153);
    v161 = vsubq_f64(vsubq_f64(v129, v144), v156);
    v162 = vsubq_f64(*(float64x2_t *)&v668[8], v159);
    *(float64x2_t *)(v6 + 80) = vsubq_f64((float64x2_t)0, v158);
    *(float64x2_t *)(v6 + 96) = v162;
    *(float64x2_t *)(v6 + 48) = v161;
    *(float64x2_t *)(v6 + 64) = vsubq_f64((float64x2_t)(unint64_t)*(_OWORD *)&vsubq_f64(_Q5, _Q17), v157);
    *(float64x2_t *)(v6 + 16) = vsubq_f64((float64x2_t)(unint64_t)*(_OWORD *)&vsubq_f64(v62, _Q16), v154);
    *(float64x2_t *)(v6 + 32) = vsubq_f64((float64x2_t)0, v155);
    *(float64x2_t *)v6 = v160;
    *(_QWORD *)(v6 + 112) = *(_OWORD *)&vsubq_f64(_Q6, v61);
    LOBYTE(v48) = v65;
  }
  v163 = *(_QWORD *)(v7 + 16);
  memcpy(__dst, __src, 0x708uLL);
  bzero((void *)(v163 + 24), 0x6F8uLL);
  *(_QWORD *)(v163 + 16) = 0x3FF0000000000000;
  *(_QWORD *)(v163 + 144) = 0x3FF0000000000000;
  *(_QWORD *)(v163 + 272) = 0x3FF0000000000000;
  *(_QWORD *)(v163 + 400) = 0x3FF0000000000000;
  *(_QWORD *)(v163 + 528) = 0x3FF0000000000000;
  *(_QWORD *)(v163 + 656) = 0x3FF0000000000000;
  *(_QWORD *)(v163 + 784) = 0x3FF0000000000000;
  *(_QWORD *)(v163 + 912) = 0x3FF0000000000000;
  *(_QWORD *)(v163 + 1040) = 0x3FF0000000000000;
  *(_QWORD *)(v163 + 1168) = 0x3FF0000000000000;
  *(_QWORD *)(v163 + 1296) = 0x3FF0000000000000;
  *(_QWORD *)(v163 + 1424) = 0x3FF0000000000000;
  *(_QWORD *)(v163 + 1552) = 0x3FF0000000000000;
  *(_QWORD *)(v163 + 1680) = 0x3FF0000000000000;
  *(_QWORD *)(v163 + 1808) = 0x3FF0000000000000;
  *(_BYTE *)(v163 + 8) = sub_20F4C04B8((float64x2_t *)(v163 + 16), (float64x2_t *)__dst, 0, 0, v164, v165, v166, v167, v168, v169, v170, v171);
  if (!*(_BYTE *)(*(_QWORD *)(v7 + 16) + 8))
  {
    v172 = 0;
    do
    {
      v173 = (*(_QWORD *)&__src[0].f64[v172] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      if ((*(_QWORD *)&__src[0].f64[v172] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        break;
      _ZF = v172++ == 224;
    }
    while (!_ZF);
    if (!v173)
    {
      v510 = "IMU covariance contains NaNs. Time to die.";
      v511 = 468;
      goto LABEL_306;
    }
    __dst[8] = 1;
    *(_QWORD *)__dst = &off_24CA00428;
    bzero(&__dst[24], 0x6F8uLL);
    *(_QWORD *)&__dst[16] = 0x3FF0000000000000;
    *(_QWORD *)&__dst[144] = 0x3FF0000000000000;
    *(_QWORD *)&__dst[272] = 0x3FF0000000000000;
    *(_QWORD *)&__dst[400] = 0x3FF0000000000000;
    *(_QWORD *)&__dst[528] = 0x3FF0000000000000;
    *(_QWORD *)&__dst[656] = 0x3FF0000000000000;
    *(_QWORD *)&__dst[784] = 0x3FF0000000000000;
    *(_QWORD *)&__dst[912] = 0x3FF0000000000000;
    *(_QWORD *)&__dst[1040] = 0x3FF0000000000000;
    *(_QWORD *)&__dst[1168] = 0x3FF0000000000000;
    *(_QWORD *)&__dst[1296] = 0x3FF0000000000000;
    *(_QWORD *)&__dst[1424] = 0x3FF0000000000000;
    *(_QWORD *)&__dst[1552] = 0x3FF0000000000000;
    *(_QWORD *)&__dst[1680] = 0x3FF0000000000000;
    v682 = 0x3FF0000000000000;
    v683 = 1;
    sub_20F4CEBA4((uint64_t)__dst, __src);
    if (!__dst[8])
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOIMUFactor.hpp", 474, (uint64_t)"", 0, (uint64_t)"LP Noise model failed. Fallback noise failed also. Time to die.", 63, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    sub_20F9B2A4C(&v659);
    v622 = v27;
    v625 = v28;
    if (**(int **)(v659 + 56) > 5
      || ((v174 = *(unsigned __int8 *)(v659 + 72), (v175 = sub_20E8C31DC(v659, "OSLogSurrogateAppender", 1, 0)) == 0)
        ? (v176 = 0)
        : (v176 = v175 + 16),
          !v174 && !v175))
    {
LABEL_98:
      *(int64x2_t *)categoryb = vzip1q_s64(*(int64x2_t *)&__dst[256], *(int64x2_t *)&__dst[376]);
      *(_QWORD *)&v192 = vdupq_laneq_s64(*(int64x2_t *)&__dst[256], 1).u64[0];
      *((_QWORD *)&v192 + 1) = *(_QWORD *)&__dst[384];
      v617 = v192;
      v602 = vzip1q_s64(*(int64x2_t *)&__dst[496], *(int64x2_t *)&__dst[616]);
      *(_QWORD *)&v192 = vdupq_laneq_s64(*(int64x2_t *)&__dst[496], 1).u64[0];
      *((_QWORD *)&v192 + 1) = *(_QWORD *)&__dst[624];
      v614 = v192;
      v611 = vzip2q_s64(*(int64x2_t *)&__dst[16], *(int64x2_t *)&__dst[136]);
      v593 = vzip1q_s64(*(int64x2_t *)&__dst[736], *(int64x2_t *)&__dst[856]);
      *(_QWORD *)&v193 = vdupq_laneq_s64(*(int64x2_t *)&__dst[736], 1).u64[0];
      *((_QWORD *)&v193 + 1) = *(_QWORD *)&__dst[864];
      *(_OWORD *)v608 = v193;
      v581 = vzip1q_s64(*(int64x2_t *)&__dst[976], *(int64x2_t *)&__dst[1096]);
      *(_QWORD *)&v193 = vdupq_laneq_s64(*(int64x2_t *)&__dst[976], 1).u64[0];
      *((_QWORD *)&v193 + 1) = *(_QWORD *)&__dst[1104];
      *(_OWORD *)v605 = v193;
      v577 = vzip1q_s64(*(int64x2_t *)&__dst[1216], *(int64x2_t *)&__dst[1336]);
      *(_QWORD *)&v193 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1216], 1).u64[0];
      *((_QWORD *)&v193 + 1) = *(_QWORD *)&__dst[1344];
      v596 = v193;
      *(_QWORD *)&v193 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1456], 1).u64[0];
      *((_QWORD *)&v193 + 1) = *(_QWORD *)&__dst[1584];
      v585 = v193;
      v600 = vzip1q_s64(*(int64x2_t *)&__dst[272], *(int64x2_t *)&__dst[392]);
      *(_QWORD *)&v194 = vdupq_laneq_s64(*(int64x2_t *)&__dst[272], 1).u64[0];
      *((_QWORD *)&v194 + 1) = *(_QWORD *)&__dst[400];
      v598 = v194;
      *(_QWORD *)&v194 = vdupq_laneq_s64(*(int64x2_t *)&__dst[512], 1).u64[0];
      *((_QWORD *)&v194 + 1) = *(_QWORD *)&__dst[640];
      v583 = v194;
      v569 = vzip1q_s64(*(int64x2_t *)&__dst[752], *(int64x2_t *)&__dst[872]);
      v570 = vzip1q_s64(*(int64x2_t *)&__dst[1456], *(int64x2_t *)&__dst[1576]);
      *(_QWORD *)&v194 = vdupq_laneq_s64(*(int64x2_t *)&__dst[752], 1).u64[0];
      *((_QWORD *)&v194 + 1) = *(_QWORD *)&__dst[880];
      v579 = v194;
      v565 = vzip1q_s64(*(int64x2_t *)&__dst[992], *(int64x2_t *)&__dst[1112]);
      *(_QWORD *)&v194 = vdupq_laneq_s64(*(int64x2_t *)&__dst[992], 1).u64[0];
      *((_QWORD *)&v194 + 1) = *(_QWORD *)&__dst[1120];
      v576 = v194;
      v554 = vzip1q_s64(*(int64x2_t *)&__dst[32], *(int64x2_t *)&__dst[152]);
      v567 = vzip1q_s64(*(int64x2_t *)&__dst[512], *(int64x2_t *)&__dst[632]);
      v568 = vzip2q_s64(*(int64x2_t *)&__dst[32], *(int64x2_t *)&__dst[152]);
      *(_QWORD *)&v195 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1232], 1).u64[0];
      *((_QWORD *)&v195 + 1) = *(_QWORD *)&__dst[1360];
      v571 = v195;
      v561 = vzip1q_s64(*(int64x2_t *)&__dst[1472], *(int64x2_t *)&__dst[1592]);
      v562 = vzip1q_s64(*(int64x2_t *)&__dst[1232], *(int64x2_t *)&__dst[1352]);
      *(_QWORD *)&v195 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1472], 1).u64[0];
      *((_QWORD *)&v195 + 1) = *(_QWORD *)&__dst[1600];
      v573 = v195;
      *(_QWORD *)&v195 = vdupq_laneq_s64(*(int64x2_t *)&__dst[288], 1).u64[0];
      *((_QWORD *)&v195 + 1) = *(_QWORD *)&__dst[416];
      v574 = vzip1q_s64(*(int64x2_t *)&__dst[288], *(int64x2_t *)&__dst[408]);
      v575 = v195;
      v572 = vzip2q_s64(*(int64x2_t *)&__dst[48], *(int64x2_t *)&__dst[168]);
      v557 = vzip1q_s64(*(int64x2_t *)&__dst[528], *(int64x2_t *)&__dst[648]);
      v558 = vzip1q_s64(*(int64x2_t *)&__dst[48], *(int64x2_t *)&__dst[168]);
      *(_QWORD *)&v196 = vdupq_laneq_s64(*(int64x2_t *)&__dst[528], 1).u64[0];
      *((_QWORD *)&v196 + 1) = *(_QWORD *)&__dst[656];
      v566 = v196;
      *(_QWORD *)&v197 = vdupq_laneq_s64(*(int64x2_t *)&__dst[768], 1).u64[0];
      v553 = vzip1q_s64(*(int64x2_t *)&__dst[768], *(int64x2_t *)&__dst[888]);
      *((_QWORD *)&v197 + 1) = *(_QWORD *)&__dst[896];
      v564 = v197;
      *(_QWORD *)&v196 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1008], 1).u64[0];
      *((_QWORD *)&v196 + 1) = *(_QWORD *)&__dst[1136];
      v560 = v196;
      *(_QWORD *)&v196 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1248], 1).u64[0];
      *((_QWORD *)&v196 + 1) = *(_QWORD *)&__dst[1376];
      v556 = v196;
      v542 = vzip1q_s64(*(int64x2_t *)&__dst[1488], *(int64x2_t *)&__dst[1608]);
      *(_QWORD *)&v196 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1488], 1).u64[0];
      *((_QWORD *)&v196 + 1) = *(_QWORD *)&__dst[1616];
      v550 = vzip1q_s64(*(int64x2_t *)&__dst[1008], *(int64x2_t *)&__dst[1128]);
      v551 = v196;
      *(_QWORD *)&v197 = vdupq_laneq_s64(*(int64x2_t *)&__dst[304], 1).u64[0];
      *((_QWORD *)&v197 + 1) = *(_QWORD *)&__dst[432];
      v563 = v197;
      v546 = vzip1q_s64(*(int64x2_t *)&__dst[1248], *(int64x2_t *)&__dst[1368]);
      v547 = vzip1q_s64(*(int64x2_t *)&__dst[304], *(int64x2_t *)&__dst[424]);
      v545 = vzip1q_s64(*(int64x2_t *)&__dst[544], *(int64x2_t *)&__dst[664]);
      *(_QWORD *)&v196 = vdupq_laneq_s64(*(int64x2_t *)&__dst[544], 1).u64[0];
      *((_QWORD *)&v196 + 1) = *(_QWORD *)&__dst[672];
      v559 = v196;
      *(_QWORD *)&v197 = vdupq_laneq_s64(*(int64x2_t *)&__dst[784], 1).u64[0];
      *((_QWORD *)&v197 + 1) = *(_QWORD *)&__dst[912];
      v555 = v197;
      v549 = vzip2q_s64(*(int64x2_t *)&__dst[64], *(int64x2_t *)&__dst[184]);
      v540 = vzip1q_s64(*(int64x2_t *)&__dst[1024], *(int64x2_t *)&__dst[1144]);
      v541 = vzip1q_s64(*(int64x2_t *)&__dst[784], *(int64x2_t *)&__dst[904]);
      *(_QWORD *)&v196 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1024], 1).u64[0];
      *((_QWORD *)&v196 + 1) = *(_QWORD *)&__dst[1152];
      v543 = v196;
      *(_QWORD *)&v198 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1264], 1).u64[0];
      v536 = vzip1q_s64(*(int64x2_t *)&__dst[1264], *(int64x2_t *)&__dst[1384]);
      v537 = vzip1q_s64(*(int64x2_t *)&__dst[64], *(int64x2_t *)&__dst[184]);
      *((_QWORD *)&v198 + 1) = *(_QWORD *)&__dst[1392];
      v535 = vzip1q_s64(*(int64x2_t *)&__dst[1504], *(int64x2_t *)&__dst[1624]);
      *(_QWORD *)&v199 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1504], 1).u64[0];
      *((_QWORD *)&v199 + 1) = *(_QWORD *)&__dst[1632];
      v548 = vzip1q_s64(*(int64x2_t *)&__dst[320], *(int64x2_t *)&__dst[440]);
      *(_QWORD *)&v196 = vdupq_laneq_s64(*(int64x2_t *)&__dst[320], 1).u64[0];
      *((_QWORD *)&v196 + 1) = *(_QWORD *)&__dst[448];
      v552 = v196;
      v538 = vzip1q_s64(*(int64x2_t *)&__dst[560], *(int64x2_t *)&__dst[680]);
      *(_QWORD *)&v196 = vdupq_laneq_s64(*(int64x2_t *)&__dst[560], 1).u64[0];
      *((_QWORD *)&v196 + 1) = *(_QWORD *)&__dst[688];
      v544 = v196;
      *(_QWORD *)&v200 = vdupq_laneq_s64(*(int64x2_t *)&__dst[800], 1).u64[0];
      *((_QWORD *)&v200 + 1) = *(_QWORD *)&__dst[928];
      v533 = vzip1q_s64(*(int64x2_t *)&__dst[1040], *(int64x2_t *)&__dst[1160]);
      v534 = vzip1q_s64(*(int64x2_t *)&__dst[800], *(int64x2_t *)&__dst[920]);
      *(_QWORD *)&v201 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1040], 1).u64[0];
      *((_QWORD *)&v201 + 1) = *(_QWORD *)&__dst[1168];
      *(_QWORD *)&v202 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1280], 1).u64[0];
      *((_QWORD *)&v202 + 1) = *(_QWORD *)&__dst[1408];
      v522 = vzip1q_s64(*(int64x2_t *)&__dst[80], *(int64x2_t *)&__dst[200]);
      v532 = vzip2q_s64(*(int64x2_t *)&__dst[80], *(int64x2_t *)&__dst[200]);
      *(_QWORD *)&v203 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1520], 1).u64[0];
      *((_QWORD *)&v203 + 1) = *(_QWORD *)&__dst[1648];
      *(_QWORD *)&v204 = vdupq_laneq_s64(*(int64x2_t *)&__dst[336], 1).u64[0];
      v530 = vzip1q_s64(*(int64x2_t *)&__dst[1280], *(int64x2_t *)&__dst[1400]);
      v531 = vzip1q_s64(*(int64x2_t *)&__dst[336], *(int64x2_t *)&__dst[456]);
      *((_QWORD *)&v204 + 1) = *(_QWORD *)&__dst[464];
      v529 = vzip1q_s64(*(int64x2_t *)&__dst[96], *(int64x2_t *)&__dst[216]);
      v539 = vzip2q_s64(*(int64x2_t *)&__dst[96], *(int64x2_t *)&__dst[216]);
      v527 = vzip1q_s64(*(int64x2_t *)&__dst[1520], *(int64x2_t *)&__dst[1640]);
      v528 = vzip1q_s64(*(int64x2_t *)&__dst[576], *(int64x2_t *)&__dst[696]);
      *(_QWORD *)&v205 = vdupq_laneq_s64(*(int64x2_t *)&__dst[576], 1).u64[0];
      *((_QWORD *)&v205 + 1) = *(_QWORD *)&__dst[704];
      *(_QWORD *)&v206 = vdupq_laneq_s64(*(int64x2_t *)&__dst[816], 1).u64[0];
      v526 = vzip1q_s64(*(int64x2_t *)&__dst[816], *(int64x2_t *)&__dst[936]);
      *((_QWORD *)&v206 + 1) = *(_QWORD *)&__dst[944];
      *(_QWORD *)&v207 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1056], 1).u64[0];
      *((_QWORD *)&v207 + 1) = *(_QWORD *)&__dst[1184];
      *(_QWORD *)&v208 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1296], 1).u64[0];
      *((_QWORD *)&v208 + 1) = *(_QWORD *)&__dst[1424];
      *(_QWORD *)&v209 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1536], 1).u64[0];
      *((_QWORD *)&v209 + 1) = *(_QWORD *)&__dst[1664];
      *(_QWORD *)&v210 = vdupq_laneq_s64(*(int64x2_t *)&__dst[352], 1).u64[0];
      *((_QWORD *)&v210 + 1) = *(_QWORD *)&__dst[480];
      v523 = vzip1q_s64(*(int64x2_t *)&__dst[352], *(int64x2_t *)&__dst[472]);
      v524 = vzip1q_s64(*(int64x2_t *)&__dst[1056], *(int64x2_t *)&__dst[1176]);
      v520 = vzip1q_s64(*(int64x2_t *)&__dst[1296], *(int64x2_t *)&__dst[1416]);
      v521 = vzip1q_s64(*(int64x2_t *)&__dst[592], *(int64x2_t *)&__dst[712]);
      *(_QWORD *)&v211 = vdupq_laneq_s64(*(int64x2_t *)&__dst[592], 1).u64[0];
      *((_QWORD *)&v211 + 1) = *(_QWORD *)&__dst[720];
      *(_QWORD *)&v212 = vdupq_laneq_s64(*(int64x2_t *)&__dst[832], 1).u64[0];
      v518 = vzip1q_s64(*(int64x2_t *)&__dst[1536], *(int64x2_t *)&__dst[1656]);
      v519 = vzip1q_s64(*(int64x2_t *)&__dst[832], *(int64x2_t *)&__dst[952]);
      *((_QWORD *)&v212 + 1) = *(_QWORD *)&__dst[960];
      v525 = vzip2q_s64(*(int64x2_t *)&__dst[112], *(int64x2_t *)&__dst[232]);
      v516 = vzip1q_s64(*(int64x2_t *)&__dst[112], *(int64x2_t *)&__dst[232]);
      v517 = vzip1q_s64(*(int64x2_t *)&__dst[1072], *(int64x2_t *)&__dst[1192]);
      *(_QWORD *)&v213 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1072], 1).u64[0];
      *((_QWORD *)&v213 + 1) = *(_QWORD *)&__dst[1200];
      *(_QWORD *)&v214 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1312], 1).u64[0];
      *((_QWORD *)&v214 + 1) = *(_QWORD *)&__dst[1440];
      v514 = vzip1q_s64(*(int64x2_t *)&__dst[1552], *(int64x2_t *)&__dst[1672]);
      v515 = vzip1q_s64(*(int64x2_t *)&__dst[1312], *(int64x2_t *)&__dst[1432]);
      *(_QWORD *)&v215 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1552], 1).u64[0];
      *((_QWORD *)&v215 + 1) = *(_QWORD *)&__dst[1680];
      v216 = *(_QWORD *)(v7 + 16);
      *(_QWORD *)&v192 = *(_QWORD *)&__dst[128];
      *((_QWORD *)&v192 + 1) = *(_QWORD *)&__dst[248];
      *(_QWORD *)&v217 = *(_QWORD *)&__dst[368];
      *((_QWORD *)&v217 + 1) = *(_QWORD *)&__dst[488];
      *(_QWORD *)&v218 = *(_QWORD *)&__dst[608];
      *((_QWORD *)&v218 + 1) = *(_QWORD *)&__dst[728];
      *(_QWORD *)&v219 = *(_QWORD *)&__dst[848];
      *((_QWORD *)&v219 + 1) = *(_QWORD *)&__dst[968];
      *(_QWORD *)&v220 = *(_QWORD *)&__dst[1088];
      *((_QWORD *)&v220 + 1) = *(_QWORD *)&__dst[1208];
      *(_QWORD *)&v193 = *(_QWORD *)&__dst[1328];
      *((_QWORD *)&v193 + 1) = *(_QWORD *)&__dst[1448];
      *(_QWORD *)&v194 = *(_QWORD *)&__dst[1568];
      *((_QWORD *)&v194 + 1) = *(_QWORD *)&__dst[1688];
      v513 = v682;
      v512 = *(_OWORD *)&__dst[1792];
      v221 = *(_OWORD *)&__dst[1776];
      v222 = *(_OWORD *)&__dst[1760];
      v223 = *(_OWORD *)&__dst[1744];
      v224 = *(_OWORD *)&__dst[1728];
      v225 = *(_OWORD *)&__dst[1712];
      v226 = *(_OWORD *)&__dst[1696];
      *(int64x2_t *)(v216 + 16) = vzip1q_s64(*(int64x2_t *)&__dst[16], *(int64x2_t *)&__dst[136]);
      *(_OWORD *)(v216 + 32) = *(_OWORD *)categoryb;
      *(int64x2_t *)(v216 + 48) = v602;
      *(int64x2_t *)(v216 + 64) = v593;
      *(int64x2_t *)(v216 + 80) = v581;
      *(int64x2_t *)(v216 + 96) = v577;
      *(int64x2_t *)(v216 + 112) = v570;
      *(int64x2_t *)(v216 + 136) = v611;
      *(_OWORD *)(v216 + 152) = v617;
      *(_OWORD *)(v216 + 168) = v614;
      *(_OWORD *)(v216 + 184) = *(_OWORD *)v608;
      *(_OWORD *)(v216 + 200) = *(_OWORD *)v605;
      *(_OWORD *)(v216 + 216) = v596;
      *(_OWORD *)(v216 + 232) = v585;
      *(_QWORD *)(v216 + 128) = v226;
      *(_QWORD *)(v216 + 248) = *((_QWORD *)&v226 + 1);
      *(int64x2_t *)(v216 + 256) = v554;
      *(int64x2_t *)(v216 + 272) = v600;
      *(int64x2_t *)(v216 + 288) = v567;
      *(int64x2_t *)(v216 + 304) = v569;
      *(int64x2_t *)(v216 + 320) = v565;
      *(int64x2_t *)(v216 + 336) = v562;
      *(int64x2_t *)(v216 + 352) = v561;
      *(int64x2_t *)(v216 + 376) = v568;
      *(_OWORD *)(v216 + 392) = v598;
      *(_OWORD *)(v216 + 408) = v583;
      *(_OWORD *)(v216 + 424) = v579;
      *(_OWORD *)(v216 + 440) = v576;
      *(_OWORD *)(v216 + 456) = v571;
      *(_QWORD *)(v216 + 368) = v225;
      *(_QWORD *)(v216 + 488) = *((_QWORD *)&v225 + 1);
      *(_OWORD *)(v216 + 472) = v573;
      *(int64x2_t *)(v216 + 496) = v558;
      *(int64x2_t *)(v216 + 512) = v574;
      *(int64x2_t *)(v216 + 528) = v557;
      *(int64x2_t *)(v216 + 544) = v553;
      *(int64x2_t *)(v216 + 560) = v550;
      *(int64x2_t *)(v216 + 576) = v546;
      *(int64x2_t *)(v216 + 592) = v542;
      *(int64x2_t *)(v216 + 616) = v572;
      *(_OWORD *)(v216 + 632) = v575;
      *(_OWORD *)(v216 + 648) = v566;
      *(_OWORD *)(v216 + 664) = v564;
      *(_OWORD *)(v216 + 680) = v560;
      *(_OWORD *)(v216 + 696) = v556;
      *(_OWORD *)(v216 + 712) = v551;
      *(_QWORD *)(v216 + 608) = v224;
      *(_QWORD *)(v216 + 728) = *((_QWORD *)&v224 + 1);
      *(int64x2_t *)(v216 + 736) = v537;
      *(int64x2_t *)(v216 + 752) = v547;
      *(int64x2_t *)(v216 + 768) = v545;
      *(int64x2_t *)(v216 + 784) = v541;
      *(int64x2_t *)(v216 + 800) = v540;
      *(int64x2_t *)(v216 + 816) = v536;
      *(int64x2_t *)(v216 + 832) = v535;
      *(int64x2_t *)(v216 + 856) = v549;
      *(_OWORD *)(v216 + 872) = v563;
      *(_OWORD *)(v216 + 888) = v559;
      *(_OWORD *)(v216 + 904) = v555;
      *(_OWORD *)(v216 + 920) = v543;
      *(_OWORD *)(v216 + 936) = v198;
      *(_OWORD *)(v216 + 952) = v199;
      *(_QWORD *)(v216 + 848) = v223;
      *(_QWORD *)(v216 + 968) = *((_QWORD *)&v223 + 1);
      *(int64x2_t *)(v216 + 976) = v522;
      *(int64x2_t *)(v216 + 992) = v548;
      *(int64x2_t *)(v216 + 1008) = v538;
      *(int64x2_t *)(v216 + 1024) = v534;
      *(int64x2_t *)(v216 + 1040) = v533;
      *(int64x2_t *)(v216 + 1056) = v530;
      *(int64x2_t *)(v216 + 1072) = v527;
      *(int64x2_t *)(v216 + 1096) = v532;
      *(_OWORD *)(v216 + 1112) = v552;
      *(_OWORD *)(v216 + 1128) = v544;
      *(_OWORD *)(v216 + 1144) = v200;
      *(_OWORD *)(v216 + 1160) = v201;
      *(_OWORD *)(v216 + 1176) = v202;
      *(_OWORD *)(v216 + 1192) = v203;
      *(_QWORD *)(v216 + 1088) = v222;
      *(_QWORD *)(v216 + 1208) = *((_QWORD *)&v222 + 1);
      *(int64x2_t *)(v216 + 1216) = v529;
      *(int64x2_t *)(v216 + 1232) = v531;
      *(int64x2_t *)(v216 + 1248) = v528;
      *(int64x2_t *)(v216 + 1264) = v526;
      *(int64x2_t *)(v216 + 1280) = v524;
      *(int64x2_t *)(v216 + 1296) = v520;
      *(int64x2_t *)(v216 + 1312) = v518;
      *(int64x2_t *)(v216 + 1336) = v539;
      *(_OWORD *)(v216 + 1352) = v204;
      *(_OWORD *)(v216 + 1368) = v205;
      *(_OWORD *)(v216 + 1384) = v206;
      *(_OWORD *)(v216 + 1400) = v207;
      *(_OWORD *)(v216 + 1416) = v208;
      *(_OWORD *)(v216 + 1432) = v209;
      *(_QWORD *)(v216 + 1328) = v221;
      *(_QWORD *)(v216 + 1448) = *((_QWORD *)&v221 + 1);
      *(int64x2_t *)(v216 + 1456) = v516;
      *(int64x2_t *)(v216 + 1472) = v523;
      *(int64x2_t *)(v216 + 1488) = v521;
      *(int64x2_t *)(v216 + 1504) = v519;
      *(int64x2_t *)(v216 + 1520) = v517;
      *(int64x2_t *)(v216 + 1536) = v515;
      *(int64x2_t *)(v216 + 1552) = v514;
      *(int64x2_t *)(v216 + 1576) = v525;
      *(_OWORD *)(v216 + 1592) = v210;
      *(_OWORD *)(v216 + 1608) = v211;
      *(_OWORD *)(v216 + 1624) = v212;
      *(_OWORD *)(v216 + 1640) = v213;
      *(_OWORD *)(v216 + 1656) = v214;
      *(_OWORD *)(v216 + 1672) = v215;
      *(_QWORD *)(v216 + 1568) = v512;
      *(_QWORD *)(v216 + 1688) = *((_QWORD *)&v512 + 1);
      *(_OWORD *)(v216 + 1696) = v192;
      *(_OWORD *)(v216 + 1712) = v217;
      *(_OWORD *)(v216 + 1728) = v218;
      *(_OWORD *)(v216 + 1744) = v219;
      *(_OWORD *)(v216 + 1760) = v220;
      *(_OWORD *)(v216 + 1776) = v193;
      *(_OWORD *)(v216 + 1792) = v194;
      *(_QWORD *)(v216 + 1808) = v513;
      *(_BYTE *)(v216 + 8) = 1;
      v28 = v625;
      v27 = v622;
      if (*(_BYTE *)(*(_QWORD *)(v7 + 16) + 8))
        goto LABEL_99;
      v510 = "IMU factor is in a bad shape. Time to die.";
      v511 = 483;
LABEL_306:
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOIMUFactor.hpp", v511, (uint64_t)"", 0, (uint64_t)v510, 42, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    v652[0] = (uint64_t)&v659;
    v652[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v652[2] = std::chrono::system_clock::now().__d_.__rep_;
    v653 = 5;
    v654 = "unknown file";
    v655 = 476;
    v658 = 0;
    v656 = "unknown function";
    v657 = 0;
    if (*(char *)(v659 + 39) < 0)
    {
      categorya = *(const char **)(v659 + 16);
      v616 = *(_QWORD *)(v659 + 24);
    }
    else
    {
      v616 = *(unsigned __int8 *)(v659 + 39);
      categorya = (const char *)(v659 + 16);
    }
    v613 = v174;
    v607 = (uint64_t *)(v659 + 16);
    v610 = v176;
    v177 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v177 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
      if ((_BYTE)v676 && SHIBYTE(v675) < 0)
        operator delete(object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v178 = byte_254A4A4F8;
    else
      v178 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v179 = byte_254A4A4F8[23];
    else
      v179 = *(_QWORD *)&byte_254A4A4F8[8];
    v604 = v178;
    object = os_log_create(v178, categorya);
    v180 = &v674;
    if (v179 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v179 >= 0x17)
    {
      v181 = (v179 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v179 | 7) != 0x17)
        v181 = v179 | 7;
      v182 = v181 + 1;
      v180 = operator new(v181 + 1);
      v676 = v182 | 0x8000000000000000;
      v674 = v180;
      v675 = v179;
    }
    else
    {
      HIBYTE(v676) = v179;
      if (!v179)
      {
LABEL_76:
        *((_BYTE *)v180 + v179) = 0;
        v677 = 1;
        v183 = __p;
        v184 = v616;
        if (v616 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        v185 = v613;
        if (v616 >= 0x17)
        {
          v186 = (v616 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v616 | 7) != 0x17)
            v186 = v616 | 7;
          v187 = v186 + 1;
          v183 = operator new(v186 + 1);
          v679 = v187 | 0x8000000000000000;
          __p[0] = v183;
          __p[1] = (void *)v616;
          v184 = v616;
          v185 = v613;
        }
        else
        {
          HIBYTE(v679) = v616;
          if (!v616)
            goto LABEL_84;
        }
        memmove(v183, categorya, v184);
        v184 = v616;
LABEL_84:
        *((_BYTE *)v183 + v184) = 0;
        v680 = 1;
        v188 = object;
        if (SHIBYTE(v679) < 0)
          operator delete(__p[0]);
        if (v677 && SHIBYTE(v676) < 0)
          operator delete(v674);
        if (object)
          os_release(object);
        sub_20FB22DA4(v610, v607, v188, OS_LOG_TYPE_ERROR);
        if (v185)
        {
          sub_20E8C003C((uint64_t)v652, "LP Noise model failed. Fallback succeeded.");
          sub_20E863570((uint64_t)v652);
        }
        sub_20E863570((uint64_t)v652);
        v189 = v658;
        if (v658)
        {
          p_shared_owners = (unint64_t *)&v658->__shared_owners_;
          do
            v191 = __ldaxr(p_shared_owners);
          while (__stlxr(v191 - 1, p_shared_owners));
          if (!v191)
          {
            ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
            std::__shared_weak_count::__release_weak(v189);
          }
        }
        goto LABEL_98;
      }
    }
    memmove(v180, v604, v179);
    goto LABEL_76;
  }
LABEL_99:
  *(_QWORD *)&_D26 = vextq_s8(v629, v629, 8uLL).u64[0];
  *(_QWORD *)&_D24 = vextq_s8(v630, v630, 8uLL).u64[0];
  *(_QWORD *)&_D25 = vextq_s8(v632, v632, 8uLL).u64[0];
  *(_QWORD *)&v230.f64[0] = vextq_s8(v643, v643, 8uLL).u64[0];
  v231 = vextq_s8(v640, v640, 8uLL).u64[0];
  *(_QWORD *)&v232.f64[0] = vextq_s8(v646, v646, 8uLL).u64[0];
  v233 = vextq_s8(v649, v649, 8uLL).u64[0];
  _Q16.f64[0] = v662;
  _Q5.f64[1] = v661.f64[1];
  _V19.D[1] = v665.f64[1];
  v236 = (float64x2_t)vzip1q_s64((int64x2_t)v661, v663);
  v237 = (float64x2_t)vzip2q_s64((int64x2_t)v661, v663);
  _Q16.f64[1] = v664;
  v238 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v236, *(double *)v629.i64), v237, _D26), _Q16, *(double *)&v638);
  __asm { FMLA            D5, D26, V19.D[1] }
  _Q5.f64[0] = _Q5.f64[0] + v666 * *(double *)&v638;
  v242.i64[1] = *(_QWORD *)&v636.f64[1];
  v240 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v236, *(double *)v630.i64), v237, _D24), _Q16, v636.f64[0]);
  __asm { FMLA            D6, D24, V19.D[1] }
  *(double *)v242.i64 = _D6 + v666 * v636.f64[0];
  v243 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v236, *(double *)v632.i64), v237, _D25), _Q16, *(double *)&v634);
  __asm { FMLA            D16, D25, V19.D[1] }
  v244 = _Q16.f64[0] + v666 * *(double *)&v634;
  v628 = *(_QWORD *)&_D24;
  v626 = *(_QWORD *)&_D25;
  v623 = *(_QWORD *)&_D26;
  if (v244 >= 0.0)
  {
    if (v238.f64[0] >= -v240.f64[1])
    {
      v250 = (float64x2_t)vzip1q_s64(v242, (int64x2_t)v243);
      *(_QWORD *)&v251.f64[0] = vdupq_laneq_s64((int64x2_t)v243, 1).u64[0];
      v251.f64[1] = _Q5.f64[0];
      v247 = vsubq_f64(v250, v251);
      _Q5 = vsubq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v238, 1), v240);
      v238.f64[0] = v244 + 1.0 + v238.f64[0] + v240.f64[1];
    }
    else
    {
      v247.f64[0] = v243.f64[0] + _Q5.f64[0];
      _Q5.f64[0] = v244 + 1.0 - (v238.f64[0] + v240.f64[1]);
      v247.f64[1] = *(double *)v242.i64 + v243.f64[1];
      v238.f64[0] = _Q5.f64[0];
    }
  }
  else if (v238.f64[0] <= v240.f64[1])
  {
    v248 = (int64x2_t)vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v238, 1), v240);
    *(_QWORD *)&v249.f64[1] = v242.i64[0];
    v249.f64[0] = 1.0 - v244;
    v243.f64[0] = v240.f64[1] - v238.f64[0];
    v238 = vaddq_f64(v249, v243);
    v247 = (float64x2_t)vzip1q_s64(v248, (int64x2_t)v238);
    _Q5 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v238, 1);
  }
  else
  {
    v245 = v238.f64[0] - v240.f64[1];
    v238.f64[0] = 1.0 - v244;
    v246 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v240.f64[0], 0);
    v246.f64[0] = v245;
    v247 = vaddq_f64(v238, v246);
    _Q5.f64[0] = v243.f64[0] + _Q5.f64[0];
    v238.f64[0] = v247.f64[0];
  }
  v252 = 0.5 / sqrt(v238.f64[0]);
  v253 = vmulq_n_f64(_Q5, v252);
  v254 = vmulq_n_f64(v247, v252);
  v255 = vaddq_f64(v254, v254);
  *(_QWORD *)(v6 + 136) = *(_OWORD *)&vaddq_f64(v253, v253);
  *(float64x2_t *)(v6 + 120) = v255;
  v256.f64[0] = v586;
  *(_QWORD *)&v256.f64[1] = v643.i64[0];
  v257 = vsubq_f64(v256, *(float64x2_t *)v670);
  *(_QWORD *)&v258.f64[0] = v640.i64[0];
  *(_QWORD *)&v258.f64[1] = v231;
  v259 = vsubq_f64(v258, v669);
  v232.f64[1] = v587;
  v260 = vsubq_f64(v232, *(float64x2_t *)&v668[16]);
  v261.f64[0] = v588;
  *(_QWORD *)&v261.f64[1] = v646.i64[0];
  v262 = vsubq_f64(v261, *(float64x2_t *)v668);
  *(_QWORD *)&v263.f64[0] = v649.i64[0];
  *(_QWORD *)&v263.f64[1] = v233;
  v230.f64[1] = v589;
  v264 = vsubq_f64(v230, *(float64x2_t *)&v670[16]);
  *(float64x2_t *)(v6 + 144) = vsubq_f64(v263, v667);
  *(float64x2_t *)(v6 + 160) = v262;
  *(float64x2_t *)(v6 + 176) = v260;
  *(float64x2_t *)(v6 + 192) = v259;
  *(float64x2_t *)(v6 + 208) = v257;
  *(float64x2_t *)(v6 + 224) = v264;
  v264.f64[0] = *(float64_t *)(v6 + 232);
  v265 = *(float64x2_t *)(v6 + 152);
  v266 = vnegq_f64(*(float64x2_t *)(v6 + 216));
  v267 = vnegq_f64(*(float64x2_t *)(v6 + 200));
  v268 = vnegq_f64(*(float64x2_t *)(v6 + 184));
  v269 = vnegq_f64(*(float64x2_t *)(v6 + 168));
  v270 = vnegq_f64(*(float64x2_t *)(v6 + 136));
  *(float64x2_t *)(v6 + 120) = vnegq_f64(v255);
  *(float64x2_t *)(v6 + 136) = v270;
  *(float64x2_t *)(v6 + 152) = vnegq_f64(v265);
  *(float64x2_t *)(v6 + 168) = v269;
  *(float64x2_t *)(v6 + 184) = v268;
  *(float64x2_t *)(v6 + 200) = v267;
  *(float64x2_t *)(v6 + 216) = v266;
  *(_QWORD *)(v6 + 232) = *(_OWORD *)&vnegq_f64(v264);
  v271 = *(_OWORD *)(v6 + 184);
  v272 = *(_OWORD *)(v6 + 200);
  v273 = *(_OWORD *)(v6 + 216);
  *(_QWORD *)(v590 + 112) = *(_QWORD *)(v6 + 232);
  *(_OWORD *)(v590 + 80) = v272;
  *(_OWORD *)(v590 + 96) = v273;
  *(_OWORD *)(v590 + 64) = v271;
  v274 = *(_OWORD *)(v6 + 120);
  v275 = *(_OWORD *)(v6 + 136);
  v276 = *(_OWORD *)(v6 + 168);
  *(_OWORD *)(v590 + 32) = *(_OWORD *)(v6 + 152);
  *(_OWORD *)(v590 + 48) = v276;
  *(_OWORD *)v590 = v274;
  *(_OWORD *)(v590 + 16) = v275;
  sub_20FB1D6C4(v7);
  sub_20FB223C4(v7, v9, (double **)v8, v27, v28);
  v277.f64[0] = v662;
  v644 = (int64x2_t)v661;
  v641 = v663;
  v278 = v666;
  v648 = v665.f64[1];
  v277.f64[1] = v664;
  v650 = v277;
  if (*(_BYTE *)(v6 + 4000) && !*(_BYTE *)(v6 + 3992))
  {
    (*v9)[8].i8[0] = 1;
    v9[1][6].i8[8] = 1;
    v9[2][8].i8[0] = 1;
    v9[3][6].i8[8] = 1;
    v9[4][2].i8[8] = 1;
    *(_BYTE *)(v6 + 2176) = 1;
    *(_QWORD *)(v7 + 5848) = &off_24CA00398;
    *(_QWORD *)(v7 + 5864) = 0x3FF0000000000000;
    *(_OWORD *)(v7 + 5872) = 0u;
    *(_OWORD *)(v7 + 5888) = 0u;
    *(_OWORD *)(v7 + 5904) = 0u;
    *(_OWORD *)(v7 + 5920) = 0u;
    *(_OWORD *)(v7 + 5936) = 0u;
    *(_OWORD *)(v7 + 5952) = 0u;
    *(_OWORD *)(v7 + 5968) = 0u;
    *(_QWORD *)(v7 + 5984) = 0;
    *(_QWORD *)(v7 + 5992) = 0x3FF0000000000000;
    *(_OWORD *)(v7 + 6000) = 0u;
    *(_OWORD *)(v7 + 6016) = 0u;
    *(_OWORD *)(v7 + 6032) = 0u;
    *(_OWORD *)(v7 + 6048) = 0u;
    *(_OWORD *)(v7 + 6064) = 0u;
    *(_OWORD *)(v7 + 6080) = 0u;
    *(_OWORD *)(v7 + 6096) = 0u;
    *(_QWORD *)(v7 + 6112) = 0;
    *(_QWORD *)(v7 + 6120) = 0x3FF0000000000000;
    *(_OWORD *)(v7 + 6128) = 0u;
    *(_OWORD *)(v7 + 6144) = 0u;
    *(_OWORD *)(v7 + 6160) = 0u;
    *(_OWORD *)(v7 + 6176) = 0u;
    *(_OWORD *)(v7 + 6192) = 0u;
    *(_OWORD *)(v7 + 6208) = 0u;
    *(_OWORD *)(v7 + 6224) = 0u;
    *(_QWORD *)(v7 + 6240) = 0;
    *(_QWORD *)(v7 + 6248) = 0x3FF0000000000000;
    *(_OWORD *)(v7 + 6256) = 0u;
    *(_OWORD *)(v7 + 6272) = 0u;
    *(_OWORD *)(v7 + 6288) = 0u;
    *(_OWORD *)(v7 + 6304) = 0u;
    *(_OWORD *)(v7 + 6320) = 0u;
    *(_OWORD *)(v7 + 6336) = 0u;
    *(_OWORD *)(v7 + 6352) = 0u;
    *(_QWORD *)(v7 + 6368) = 0;
    *(_QWORD *)(v7 + 6376) = 0x3FF0000000000000;
    *(_OWORD *)(v7 + 6384) = 0u;
    *(_OWORD *)(v7 + 6400) = 0u;
    *(_OWORD *)(v7 + 6416) = 0u;
    *(_OWORD *)(v7 + 6432) = 0u;
    *(_OWORD *)(v7 + 6448) = 0u;
    *(_OWORD *)(v7 + 6464) = 0u;
    *(_OWORD *)(v7 + 6480) = 0u;
    *(_QWORD *)(v7 + 6496) = 0;
    *(_QWORD *)(v7 + 6504) = 0x3FF0000000000000;
    *(_OWORD *)(v7 + 6512) = 0u;
    *(_OWORD *)(v7 + 6528) = 0u;
    *(_OWORD *)(v7 + 6544) = 0u;
    *(_OWORD *)(v7 + 6560) = 0u;
    *(_OWORD *)(v7 + 6576) = 0u;
    *(_OWORD *)(v7 + 6592) = 0u;
    *(_OWORD *)(v7 + 6608) = 0u;
    *(_QWORD *)(v7 + 6624) = 0;
    *(_QWORD *)(v7 + 6632) = 0x3FF0000000000000;
    *(_QWORD *)(v7 + 6752) = 0;
    *(_OWORD *)(v7 + 6736) = 0u;
    *(_OWORD *)(v7 + 6720) = 0u;
    *(_OWORD *)(v7 + 6704) = 0u;
    *(_OWORD *)(v7 + 6688) = 0u;
    *(_OWORD *)(v7 + 6672) = 0u;
    *(_OWORD *)(v7 + 6656) = 0u;
    *(_OWORD *)(v7 + 6640) = 0u;
    *(_QWORD *)(v7 + 6760) = 0x3FF0000000000000;
    *(_QWORD *)(v7 + 6880) = 0;
    *(_OWORD *)(v7 + 6864) = 0u;
    *(_OWORD *)(v7 + 6848) = 0u;
    *(_OWORD *)(v7 + 6832) = 0u;
    *(_OWORD *)(v7 + 6816) = 0u;
    *(_OWORD *)(v7 + 6800) = 0u;
    *(_OWORD *)(v7 + 6784) = 0u;
    *(_OWORD *)(v7 + 6768) = 0u;
    *(_QWORD *)(v7 + 6888) = 0x3FF0000000000000;
    *(_QWORD *)(v7 + 7008) = 0;
    *(_OWORD *)(v7 + 6992) = 0u;
    *(_OWORD *)(v7 + 6976) = 0u;
    *(_OWORD *)(v7 + 6960) = 0u;
    *(_OWORD *)(v7 + 6944) = 0u;
    *(_OWORD *)(v7 + 6928) = 0u;
    *(_OWORD *)(v7 + 6912) = 0u;
    *(_OWORD *)(v7 + 6896) = 0u;
    *(_QWORD *)(v7 + 7016) = 0x3FF0000000000000;
    *(_QWORD *)(v7 + 7136) = 0;
    *(_OWORD *)(v7 + 7120) = 0u;
    *(_OWORD *)(v7 + 7104) = 0u;
    *(_OWORD *)(v7 + 7088) = 0u;
    *(_OWORD *)(v7 + 7072) = 0u;
    *(_OWORD *)(v7 + 7056) = 0u;
    *(_OWORD *)(v7 + 7040) = 0u;
    *(_OWORD *)(v7 + 7024) = 0u;
    *(_QWORD *)(v7 + 7144) = 0x3FF0000000000000;
    *(_QWORD *)(v7 + 7264) = 0;
    *(_OWORD *)(v7 + 7248) = 0u;
    *(_OWORD *)(v7 + 7232) = 0u;
    *(_OWORD *)(v7 + 7216) = 0u;
    *(_OWORD *)(v7 + 7200) = 0u;
    *(_OWORD *)(v7 + 7184) = 0u;
    *(_OWORD *)(v7 + 7168) = 0u;
    *(_OWORD *)(v7 + 7152) = 0u;
    *(_QWORD *)(v7 + 7272) = 0x3FF0000000000000;
    *(_QWORD *)(v7 + 7392) = 0;
    *(_OWORD *)(v7 + 7376) = 0u;
    *(_OWORD *)(v7 + 7360) = 0u;
    *(_OWORD *)(v7 + 7344) = 0u;
    *(_OWORD *)(v7 + 7328) = 0u;
    *(_OWORD *)(v7 + 7312) = 0u;
    *(_OWORD *)(v7 + 7296) = 0u;
    *(_OWORD *)(v7 + 7280) = 0u;
    *(_QWORD *)(v7 + 7400) = 0x3FF0000000000000;
    *(_QWORD *)(v7 + 7520) = 0;
    *(_OWORD *)(v7 + 7504) = 0u;
    *(_OWORD *)(v7 + 7488) = 0u;
    *(_OWORD *)(v7 + 7472) = 0u;
    *(_OWORD *)(v7 + 7456) = 0u;
    *(_OWORD *)(v7 + 7440) = 0u;
    *(_OWORD *)(v7 + 7424) = 0u;
    *(_OWORD *)(v7 + 7408) = 0u;
    *(_QWORD *)(v7 + 7528) = 0x3FF0000000000000;
    *(_QWORD *)(v7 + 7648) = 0;
    *(_OWORD *)(v7 + 7632) = 0u;
    *(_OWORD *)(v7 + 7616) = 0u;
    *(_OWORD *)(v7 + 7600) = 0u;
    *(_OWORD *)(v7 + 7584) = 0u;
    *(_OWORD *)(v7 + 7568) = 0u;
    *(_OWORD *)(v7 + 7552) = 0u;
    *(_OWORD *)(v7 + 7536) = 0u;
    *(_QWORD *)(v7 + 7656) = 0x3FF0000000000000;
    *(_BYTE *)(v6 + 3992) = 1;
    *(_QWORD *)(v7 + 7664) = -1;
    memcpy((void *)(v7 + 3920), (const void *)(v7 + 1880), 0x708uLL);
    v279 = *(_OWORD *)(v7 + 3728);
    *(_OWORD *)(v7 + 5752) = *(_OWORD *)(v7 + 3712);
    *(_OWORD *)(v7 + 5768) = v279;
    v280 = *(_OWORD *)(v7 + 3696);
    *(_OWORD *)(v7 + 5720) = *(_OWORD *)(v7 + 3680);
    *(_OWORD *)(v7 + 5736) = v280;
    *(_QWORD *)(v7 + 5832) = *(_QWORD *)(v7 + 3792);
    v281 = *(_OWORD *)(v7 + 3776);
    v282 = *(_OWORD *)(v7 + 3744);
    *(_OWORD *)(v7 + 5800) = *(_OWORD *)(v7 + 3760);
    *(_OWORD *)(v7 + 5816) = v281;
    *(_OWORD *)(v7 + 5784) = v282;
    *(_BYTE *)(v6 + 2160) = v48;
    v283 = *(_QWORD *)(v7 + 16);
    *(_BYTE *)(v6 + 2176) = *(_BYTE *)(v283 + 8);
    memcpy((void *)(v7 + 5864), (const void *)(v283 + 16), 0x708uLL);
    *(_DWORD *)(v7 + 7664) = (*v9)[1].i32[0];
    *(_DWORD *)(v7 + 7668) = v9[2][1].i32[0];
  }
  v284 = (float64x2_t *)v8[4];
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgtzq_f64(v671), (int32x4_t)vcgtzq_f64(v672))))) & 1) != 0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/BatchLeastSquares/include/VIO/BatchLeastSquares/Propagator.h", 159, (uint64_t)"(noise.e() > 0.).all()", 22, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v285 = v672;
  *v284 = v671;
  v284[1] = v285;
  if (!*(_BYTE *)(*(_QWORD *)(v7 + 16) + 8))
  {
    sub_20F9B2A4C(v652);
    if (**(int **)(v652[0] + 56) > 5)
      return 0;
    v299 = *(unsigned __int8 *)(v652[0] + 72);
    v300 = sub_20E8C31DC(v652[0], "OSLogSurrogateAppender", 1, 0);
    v301 = v300;
    if (!v299 && !v300)
      return 0;
    *(_QWORD *)&__src[0].f64[0] = v652;
    *(std::chrono::steady_clock::time_point *)&__src[0].f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
    *(std::chrono::system_clock::time_point *)&__src[1].f64[0] = (std::chrono::system_clock::time_point)std::chrono::system_clock::now().__d_.__rep_;
    LODWORD(__src[1].f64[1]) = 5;
    *(_QWORD *)&__src[2].f64[0] = "unknown file";
    LODWORD(__src[2].f64[1]) = 200;
    __src[4].f64[0] = 0.0;
    *(_QWORD *)&__src[3].f64[0] = "unknown function";
    __src[3].f64[1] = 0.0;
    v302 = **(_QWORD **)&__src[0].f64[0];
    v303 = **(_QWORD **)&__src[0].f64[0] + 16;
    if (*(char *)(**(_QWORD **)&__src[0].f64[0] + 39) < 0)
    {
      v305 = *(const char **)(v302 + 16);
      v304 = *(_QWORD *)(v302 + 24);
    }
    else
    {
      v304 = *(unsigned __int8 *)(**(_QWORD **)&__src[0].f64[0] + 39);
      v305 = (const char *)(**(_QWORD **)&__src[0].f64[0] + 16);
    }
    v396 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v396 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)__dst);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__dst);
      if (__dst[24] && (__dst[23] & 0x80000000) != 0)
        operator delete(*(void **)__dst);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v397 = byte_254A4A4F8;
    else
      v397 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v398 = byte_254A4A4F8[23];
    else
      v398 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)__dst = os_log_create(v397, v305);
    v399 = &__dst[8];
    if (v398 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v398 >= 0x17)
    {
      v400 = v301;
      v401 = v305;
      v402 = v302;
      v403 = v299;
      v404 = v303;
      v405 = (v398 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v398 | 7) != 0x17)
        v405 = v398 | 7;
      v406 = v405 + 1;
      v399 = operator new(v405 + 1);
      *(_QWORD *)&__dst[24] = v406 | 0x8000000000000000;
      *(_QWORD *)&__dst[8] = v399;
      *(_QWORD *)&__dst[16] = v398;
      v303 = v404;
      v299 = v403;
      v302 = v402;
      v305 = v401;
      v301 = v400;
    }
    else
    {
      __dst[31] = v398;
      if (!v398)
      {
LABEL_151:
        v399[v398] = 0;
        __dst[32] = 1;
        v407 = &__dst[40];
        if (v304 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v304 >= 0x17)
        {
          v408 = (v304 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v304 | 7) != 0x17)
            v408 = v304 | 7;
          v409 = v408 + 1;
          v407 = operator new(v408 + 1);
          *(_QWORD *)&__dst[56] = v409 | 0x8000000000000000;
          *(_QWORD *)&__dst[40] = v407;
          *(_QWORD *)&__dst[48] = v304;
        }
        else
        {
          __dst[63] = v304;
          if (!v304)
            goto LABEL_159;
        }
        memmove(v407, v305, v304);
LABEL_159:
        v407[v304] = 0;
        __dst[64] = 1;
        v410 = *(NSObject **)__dst;
        if ((__dst[63] & 0x80000000) != 0)
          operator delete(*(void **)&__dst[40]);
        if (__dst[32] && (__dst[31] & 0x80000000) != 0)
          operator delete(*(void **)&__dst[8]);
        if (*(_QWORD *)__dst)
          os_release(*(void **)__dst);
        if (v301 && *(_QWORD *)(v301 + 24))
        {
          v411 = _os_log_pack_size();
          v412 = (std::__shared_weak_count_vtbl *)operator new(v411, (std::align_val_t)8uLL);
          v413 = (std::__shared_weak_count *)operator new();
          v414 = v413;
          v413->__shared_owners_ = 0;
          v415 = (unint64_t *)&v413->__shared_owners_;
          v413->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v413->__shared_weak_owners_ = 0;
          v413[1].__vftable = v412;
          *(_QWORD *)__dst = v412;
          *(_QWORD *)&__dst[8] = v412;
          *(_QWORD *)&__dst[16] = v413;
          do
            v416 = __ldxr(v415);
          while (__stxr(v416 + 1, v415));
          memset(&__dst[24], 0, 24);
          do
            v417 = __ldaxr(v415);
          while (__stlxr(v417 - 1, v415));
          if (!v417)
          {
            ((void (*)(std::__shared_weak_count *))v413->__on_zero_shared)(v413);
            std::__shared_weak_count::__release_weak(v414);
          }
          v418 = *(_QWORD *)__dst;
          *(_WORD *)_os_log_pack_fill() = 0;
          v419 = operator new();
          v420 = *(unsigned __int8 *)(v302 + 39);
          if ((v420 & 0x80u) == 0)
            v421 = v303;
          else
            v421 = *(_QWORD *)(v302 + 16);
          if ((v420 & 0x80u) != 0)
            v420 = *(_QWORD *)(v302 + 24);
          *(_QWORD *)v419 = v418;
          *(_OWORD *)(v419 + 8) = *(_OWORD *)&__dst[8];
          *(_QWORD *)&__dst[8] = 0;
          *(_QWORD *)&__dst[16] = 0;
          *(_OWORD *)(v419 + 24) = *(_OWORD *)&__dst[24];
          *(_QWORD *)&__dst[24] = 0;
          *(_QWORD *)&__dst[32] = 0;
          *(_QWORD *)(v419 + 40) = v421;
          *(_QWORD *)(v419 + 48) = v420;
          *(_BYTE *)(v419 + 56) = 16;
          object = 0;
          *(_QWORD *)&v661.f64[0] = v419;
          (*(void (**)(_QWORD, float64x2_t *))(**(_QWORD **)(v301 + 24) + 40))(*(_QWORD *)(v301 + 24), &v661);
          v422 = v661.f64[0];
          v661.f64[0] = 0.0;
          if (v422 != 0.0)
          {
            v423 = *(std::__shared_weak_count **)(*(_QWORD *)&v422 + 32);
            if (v423)
            {
              v424 = (unint64_t *)&v423->__shared_owners_;
              do
                v425 = __ldaxr(v424);
              while (__stlxr(v425 - 1, v424));
              if (!v425)
              {
                ((void (*)(std::__shared_weak_count *))v423->__on_zero_shared)(v423);
                std::__shared_weak_count::__release_weak(v423);
              }
            }
            v426 = *(std::__shared_weak_count **)(*(_QWORD *)&v422 + 16);
            if (v426)
            {
              v427 = (unint64_t *)&v426->__shared_owners_;
              do
                v428 = __ldaxr(v427);
              while (__stlxr(v428 - 1, v427));
              if (!v428)
              {
                ((void (*)(std::__shared_weak_count *))v426->__on_zero_shared)(v426);
                std::__shared_weak_count::__release_weak(v426);
              }
            }
            MEMORY[0x212BC6398](*(_QWORD *)&v422, 0x10F0C40B62ED6C6);
            v429 = object;
            object = 0;
            if (v429)
            {
              v430 = (std::__shared_weak_count *)*((_QWORD *)v429 + 4);
              if (v430)
              {
                v431 = (unint64_t *)&v430->__shared_owners_;
                do
                  v432 = __ldaxr(v431);
                while (__stlxr(v432 - 1, v431));
                if (!v432)
                {
                  ((void (*)(std::__shared_weak_count *))v430->__on_zero_shared)(v430);
                  std::__shared_weak_count::__release_weak(v430);
                }
              }
              v433 = (std::__shared_weak_count *)*((_QWORD *)v429 + 2);
              if (v433)
              {
                v434 = (unint64_t *)&v433->__shared_owners_;
                do
                  v435 = __ldaxr(v434);
                while (__stlxr(v435 - 1, v434));
                if (!v435)
                {
                  ((void (*)(std::__shared_weak_count *))v433->__on_zero_shared)(v433);
                  std::__shared_weak_count::__release_weak(v433);
                }
              }
              MEMORY[0x212BC6398](v429, 0x10F0C40B62ED6C6);
            }
          }
          v436 = *(std::__shared_weak_count **)&__dst[32];
          if (*(_QWORD *)&__dst[32])
          {
            v437 = (unint64_t *)(*(_QWORD *)&__dst[32] + 8);
            do
              v438 = __ldaxr(v437);
            while (__stlxr(v438 - 1, v437));
            if (!v438)
            {
              ((void (*)(std::__shared_weak_count *))v436->__on_zero_shared)(v436);
              std::__shared_weak_count::__release_weak(v436);
            }
          }
          v439 = *(std::__shared_weak_count **)&__dst[16];
          if (*(_QWORD *)&__dst[16])
          {
            v440 = (unint64_t *)(*(_QWORD *)&__dst[16] + 8);
            do
              v441 = __ldaxr(v440);
            while (__stlxr(v441 - 1, v440));
            if (!v441)
            {
              ((void (*)(std::__shared_weak_count *))v439->__on_zero_shared)(v439);
              std::__shared_weak_count::__release_weak(v439);
            }
          }
        }
        else
        {
          os_log_type_enabled(v410, OS_LOG_TYPE_ERROR);
          *(_WORD *)__dst = 0;
          v442 = (void *)_os_log_send_and_compose_impl();
          if (v442)
            free(v442);
        }
        if (v299)
        {
          sub_20E8C003C((uint64_t)__src, "IMU factor failed to factorize the noise model.");
          sub_20E863570((uint64_t)__src);
        }
        sub_20E863570((uint64_t)__src);
        v443 = __src[4].f64[0];
        if (*(_QWORD *)&__src[4].f64[0])
        {
          v444 = (unint64_t *)(*(_QWORD *)&__src[4].f64[0] + 8);
          do
            v445 = __ldaxr(v444);
          while (__stlxr(v445 - 1, v444));
          if (!v445)
          {
            (*(void (**)(float64_t))(**(_QWORD **)&v443 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v443));
            std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v443);
          }
        }
        return 0;
      }
    }
    memmove(v399, v397, v398);
    goto LABEL_151;
  }
  v286 = (float64x2_t)vzip1q_s64(v644, v641);
  _D26 = v623;
  _Q1 = (float64x2_t)vdupq_lane_s64(v623, 0);
  _D25 = v626;
  v289 = (float64x2_t)vzip2q_s64(v644, v641);
  _D24 = v628;
  v291 = (int8x16_t)vmlaq_f64(vmlaq_f64(vmulq_n_f64(v286, *(double *)v629.i64), _Q1, v289), (float64x2_t)vdupq_lane_s64(v638, 0), v650);
  _V4.D[1] = v648;
  v293 = (int8x16_t)vmlaq_f64(vmlaq_f64(vmulq_n_f64(v286, *(double *)v632.i64), (float64x2_t)vdupq_lane_s64(v626, 0), v289), (float64x2_t)vdupq_lane_s64(v634, 0), v650);
  __asm { FMLA            D1, D26, V4.D[1] }
  v295 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v286, *(double *)v630.i64), (float64x2_t)vdupq_lane_s64(v628, 0), v289), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v636.f64[0], 0), v650);
  __asm
  {
    FMLA            D2, D24, V4.D[1]
    FMLA            D3, D25, V4.D[1]
  }
  v651 = (float64x2_t)v293;
  v631 = vextq_s8(v293, v293, 8uLL).u64[0];
  v633 = *(double *)v291.i64;
  v645 = (float64x2_t)vextq_s8(v291, v291, 8uLL);
  v639 = _Q1.f64[0] + v278 * *(double *)&v638;
  v642 = _D2 + v278 * v636.f64[0];
  v647 = (int64x2_t)v295;
  v298 = 1880;
  do
  {
    _ZF = v298 == 3672;
    v298 += 8;
  }
  while (!_ZF);
  _Q1.f64[0] = _D3 + v278 * *(double *)&v634;
  v637 = _Q1;
  v306 = *(float64x2_t *)(v7 + 3640);
  *(float64x2_t *)&__dst[1784] = vabsq_f64(*(float64x2_t *)(v7 + 3656));
  v307 = *(float64x2_t *)(v7 + 3624);
  *(float64x2_t *)&__dst[1768] = vabsq_f64(v306);
  v308 = *(float64x2_t *)(v7 + 3608);
  *(float64x2_t *)&__dst[1752] = vabsq_f64(v307);
  v309 = *(float64x2_t *)(v7 + 3592);
  *(float64x2_t *)&__dst[1736] = vabsq_f64(v308);
  v310 = *(float64x2_t *)(v7 + 3576);
  *(float64x2_t *)&__dst[1720] = vabsq_f64(v309);
  v311 = *(float64x2_t *)(v7 + 3560);
  *(float64x2_t *)&__dst[1704] = vabsq_f64(v310);
  v312 = *(float64x2_t *)(v7 + 3544);
  *(float64x2_t *)&__dst[1688] = vabsq_f64(v311);
  v313 = *(float64x2_t *)(v7 + 3528);
  *(float64x2_t *)&__dst[1672] = vabsq_f64(v312);
  v314 = *(float64x2_t *)(v7 + 3512);
  *(float64x2_t *)&__dst[1656] = vabsq_f64(v313);
  v315 = *(float64x2_t *)(v7 + 3496);
  *(float64x2_t *)&__dst[1640] = vabsq_f64(v314);
  v316 = *(float64x2_t *)(v7 + 3480);
  *(float64x2_t *)&__dst[1624] = vabsq_f64(v315);
  v317 = *(float64x2_t *)(v7 + 3464);
  *(float64x2_t *)&__dst[1608] = vabsq_f64(v316);
  v318 = *(float64x2_t *)(v7 + 3448);
  *(float64x2_t *)&__dst[1592] = vabsq_f64(v317);
  v319 = *(float64x2_t *)(v7 + 3432);
  *(float64x2_t *)&__dst[1576] = vabsq_f64(v318);
  v320 = *(float64x2_t *)(v7 + 3416);
  *(float64x2_t *)&__dst[1560] = vabsq_f64(v319);
  v321 = *(float64x2_t *)(v7 + 3400);
  *(float64x2_t *)&__dst[1544] = vabsq_f64(v320);
  v322 = *(float64x2_t *)(v7 + 3384);
  *(float64x2_t *)&__dst[1528] = vabsq_f64(v321);
  v323 = *(float64x2_t *)(v7 + 3368);
  *(float64x2_t *)&__dst[1512] = vabsq_f64(v322);
  v324 = *(float64x2_t *)(v7 + 3352);
  *(float64x2_t *)&__dst[1496] = vabsq_f64(v323);
  v325 = *(float64x2_t *)(v7 + 3336);
  *(float64x2_t *)&__dst[1480] = vabsq_f64(v324);
  v326 = *(float64x2_t *)(v7 + 3320);
  *(float64x2_t *)&__dst[1464] = vabsq_f64(v325);
  v327 = *(float64x2_t *)(v7 + 3304);
  *(float64x2_t *)&__dst[1448] = vabsq_f64(v326);
  v328 = *(float64x2_t *)(v7 + 3288);
  *(float64x2_t *)&__dst[1432] = vabsq_f64(v327);
  v329 = *(float64x2_t *)(v7 + 3272);
  *(float64x2_t *)&__dst[1416] = vabsq_f64(v328);
  v330 = *(float64x2_t *)(v7 + 3256);
  *(float64x2_t *)&__dst[1400] = vabsq_f64(v329);
  v331 = *(float64x2_t *)(v7 + 3240);
  *(float64x2_t *)&__dst[1384] = vabsq_f64(v330);
  v332 = *(float64x2_t *)(v7 + 3224);
  *(float64x2_t *)&__dst[1368] = vabsq_f64(v331);
  v333 = *(float64x2_t *)(v7 + 3208);
  *(float64x2_t *)&__dst[1352] = vabsq_f64(v332);
  v334 = *(float64x2_t *)(v7 + 3192);
  *(float64x2_t *)&__dst[1336] = vabsq_f64(v333);
  v335 = *(float64x2_t *)(v7 + 3176);
  *(float64x2_t *)&__dst[1320] = vabsq_f64(v334);
  v336 = *(float64x2_t *)(v7 + 3160);
  *(float64x2_t *)&__dst[1304] = vabsq_f64(v335);
  v337 = *(float64x2_t *)(v7 + 3144);
  *(float64x2_t *)&__dst[1288] = vabsq_f64(v336);
  v338 = *(float64x2_t *)(v7 + 3128);
  *(float64x2_t *)&__dst[1272] = vabsq_f64(v337);
  v339 = *(float64x2_t *)(v7 + 3112);
  *(float64x2_t *)&__dst[1256] = vabsq_f64(v338);
  v340 = *(float64x2_t *)(v7 + 3096);
  *(float64x2_t *)&__dst[1240] = vabsq_f64(v339);
  v341 = *(float64x2_t *)(v7 + 3080);
  *(float64x2_t *)&__dst[1224] = vabsq_f64(v340);
  v342 = *(float64x2_t *)(v7 + 3064);
  *(float64x2_t *)&__dst[1208] = vabsq_f64(v341);
  v343 = *(float64x2_t *)(v7 + 3048);
  *(float64x2_t *)&__dst[1192] = vabsq_f64(v342);
  v344 = *(float64x2_t *)(v7 + 3032);
  *(float64x2_t *)&__dst[1176] = vabsq_f64(v343);
  v345 = *(float64x2_t *)(v7 + 3016);
  *(float64x2_t *)&__dst[1160] = vabsq_f64(v344);
  v346 = *(float64x2_t *)(v7 + 3000);
  *(float64x2_t *)&__dst[1144] = vabsq_f64(v345);
  v347 = *(float64x2_t *)(v7 + 2984);
  *(float64x2_t *)&__dst[1128] = vabsq_f64(v346);
  v348 = *(float64x2_t *)(v7 + 2968);
  *(float64x2_t *)&__dst[1112] = vabsq_f64(v347);
  v349 = *(float64x2_t *)(v7 + 2952);
  *(float64x2_t *)&__dst[1096] = vabsq_f64(v348);
  v350 = *(float64x2_t *)(v7 + 2936);
  *(float64x2_t *)&__dst[1080] = vabsq_f64(v349);
  v351 = *(float64x2_t *)(v7 + 2920);
  *(float64x2_t *)&__dst[1064] = vabsq_f64(v350);
  v352 = vabsq_f64(*(float64x2_t *)(v7 + 2904));
  *(float64x2_t *)&__dst[1048] = vabsq_f64(v351);
  v353 = vabsq_f64(*(float64x2_t *)(v7 + 2872));
  *(float64x2_t *)&__dst[1016] = vabsq_f64(*(float64x2_t *)(v7 + 2888));
  *(float64x2_t *)&__dst[1032] = v352;
  v354 = vabsq_f64(*(float64x2_t *)(v7 + 2840));
  *(float64x2_t *)&__dst[984] = vabsq_f64(*(float64x2_t *)(v7 + 2856));
  *(float64x2_t *)&__dst[1000] = v353;
  v355 = vabsq_f64(*(float64x2_t *)(v7 + 2808));
  *(float64x2_t *)&__dst[952] = vabsq_f64(*(float64x2_t *)(v7 + 2824));
  *(float64x2_t *)&__dst[968] = v354;
  v356 = vabsq_f64(*(float64x2_t *)(v7 + 2776));
  *(float64x2_t *)&__dst[920] = vabsq_f64(*(float64x2_t *)(v7 + 2792));
  *(float64x2_t *)&__dst[936] = v355;
  v357 = vabsq_f64(*(float64x2_t *)(v7 + 2744));
  *(float64x2_t *)&__dst[888] = vabsq_f64(*(float64x2_t *)(v7 + 2760));
  *(float64x2_t *)&__dst[904] = v356;
  v358 = vabsq_f64(*(float64x2_t *)(v7 + 2712));
  *(float64x2_t *)&__dst[856] = vabsq_f64(*(float64x2_t *)(v7 + 2728));
  *(float64x2_t *)&__dst[872] = v357;
  v359 = vabsq_f64(*(float64x2_t *)(v7 + 2680));
  *(float64x2_t *)&__dst[824] = vabsq_f64(*(float64x2_t *)(v7 + 2696));
  *(float64x2_t *)&__dst[840] = v358;
  v360 = vabsq_f64(*(float64x2_t *)(v7 + 2648));
  *(float64x2_t *)&__dst[792] = vabsq_f64(*(float64x2_t *)(v7 + 2664));
  *(float64x2_t *)&__dst[808] = v359;
  v361 = vabsq_f64(*(float64x2_t *)(v7 + 2616));
  *(float64x2_t *)&__dst[760] = vabsq_f64(*(float64x2_t *)(v7 + 2632));
  *(float64x2_t *)&__dst[776] = v360;
  v362 = vabsq_f64(*(float64x2_t *)(v7 + 2584));
  *(float64x2_t *)&__dst[728] = vabsq_f64(*(float64x2_t *)(v7 + 2600));
  *(float64x2_t *)&__dst[744] = v361;
  v363 = vabsq_f64(*(float64x2_t *)(v7 + 2552));
  *(float64x2_t *)&__dst[696] = vabsq_f64(*(float64x2_t *)(v7 + 2568));
  *(float64x2_t *)&__dst[712] = v362;
  v364 = vabsq_f64(*(float64x2_t *)(v7 + 2520));
  *(float64x2_t *)&__dst[664] = vabsq_f64(*(float64x2_t *)(v7 + 2536));
  *(float64x2_t *)&__dst[680] = v363;
  v365 = vabsq_f64(*(float64x2_t *)(v7 + 2488));
  *(float64x2_t *)&__dst[632] = vabsq_f64(*(float64x2_t *)(v7 + 2504));
  *(float64x2_t *)&__dst[648] = v364;
  v366 = vabsq_f64(*(float64x2_t *)(v7 + 2456));
  *(float64x2_t *)&__dst[600] = vabsq_f64(*(float64x2_t *)(v7 + 2472));
  *(float64x2_t *)&__dst[616] = v365;
  v367 = vabsq_f64(*(float64x2_t *)(v7 + 2424));
  *(float64x2_t *)&__dst[568] = vabsq_f64(*(float64x2_t *)(v7 + 2440));
  *(float64x2_t *)&__dst[584] = v366;
  v368 = vabsq_f64(*(float64x2_t *)(v7 + 2392));
  *(float64x2_t *)&__dst[536] = vabsq_f64(*(float64x2_t *)(v7 + 2408));
  *(float64x2_t *)&__dst[552] = v367;
  v369 = vabsq_f64(*(float64x2_t *)(v7 + 2360));
  *(float64x2_t *)&__dst[504] = vabsq_f64(*(float64x2_t *)(v7 + 2376));
  *(float64x2_t *)&__dst[520] = v368;
  v370 = vabsq_f64(*(float64x2_t *)(v7 + 2328));
  *(float64x2_t *)&__dst[472] = vabsq_f64(*(float64x2_t *)(v7 + 2344));
  *(float64x2_t *)&__dst[488] = v369;
  v371 = vabsq_f64(*(float64x2_t *)(v7 + 2296));
  *(float64x2_t *)&__dst[440] = vabsq_f64(*(float64x2_t *)(v7 + 2312));
  *(float64x2_t *)&__dst[456] = v370;
  v372 = vabsq_f64(*(float64x2_t *)(v7 + 2264));
  *(float64x2_t *)&__dst[408] = vabsq_f64(*(float64x2_t *)(v7 + 2280));
  *(float64x2_t *)&__dst[424] = v371;
  v373 = vabsq_f64(*(float64x2_t *)(v7 + 2232));
  *(float64x2_t *)&__dst[376] = vabsq_f64(*(float64x2_t *)(v7 + 2248));
  *(float64x2_t *)&__dst[392] = v372;
  v374 = vabsq_f64(*(float64x2_t *)(v7 + 2200));
  *(float64x2_t *)&__dst[344] = vabsq_f64(*(float64x2_t *)(v7 + 2216));
  *(float64x2_t *)&__dst[360] = v373;
  v375 = vabsq_f64(*(float64x2_t *)(v7 + 2168));
  *(float64x2_t *)&__dst[312] = vabsq_f64(*(float64x2_t *)(v7 + 2184));
  *(float64x2_t *)&__dst[328] = v374;
  v376 = vabsq_f64(*(float64x2_t *)(v7 + 2136));
  *(float64x2_t *)&__dst[280] = vabsq_f64(*(float64x2_t *)(v7 + 2152));
  *(float64x2_t *)&__dst[296] = v375;
  *(float64x2_t *)&__dst[264] = v376;
  v377 = vabsq_f64(*(float64x2_t *)(v7 + 2104));
  *(float64x2_t *)&__dst[248] = vabsq_f64(*(float64x2_t *)(v7 + 2120));
  *(float64x2_t *)&__dst[232] = v377;
  v378 = vabsq_f64(*(float64x2_t *)(v7 + 2072));
  *(float64x2_t *)&__dst[216] = vabsq_f64(*(float64x2_t *)(v7 + 2088));
  *(float64x2_t *)&__dst[200] = v378;
  v379 = vabsq_f64(*(float64x2_t *)(v7 + 2040));
  *(float64x2_t *)&__dst[184] = vabsq_f64(*(float64x2_t *)(v7 + 2056));
  *(float64x2_t *)&__dst[168] = v379;
  v380 = vabsq_f64(*(float64x2_t *)(v7 + 2008));
  *(float64x2_t *)&__dst[152] = vabsq_f64(*(float64x2_t *)(v7 + 2024));
  *(float64x2_t *)&__dst[136] = v380;
  v381 = vabsq_f64(*(float64x2_t *)(v7 + 1976));
  *(float64x2_t *)&__dst[120] = vabsq_f64(*(float64x2_t *)(v7 + 1992));
  *(float64x2_t *)&__dst[104] = v381;
  v382 = vabsq_f64(*(float64x2_t *)(v7 + 1944));
  *(float64x2_t *)&__dst[88] = vabsq_f64(*(float64x2_t *)(v7 + 1960));
  *(float64x2_t *)&__dst[72] = v382;
  v383 = vabsq_f64(*(float64x2_t *)(v7 + 1912));
  *(float64x2_t *)&__dst[56] = vabsq_f64(*(float64x2_t *)(v7 + 1928));
  *(float64x2_t *)&__dst[40] = v383;
  v384 = *v49;
  *(float64x2_t *)&__dst[24] = vabsq_f64(*(float64x2_t *)(v7 + 1896));
  v385 = vabsq_f64(v384);
  *(float64x2_t *)&__dst[8] = v385;
  v385.f64[0] = *(float64_t *)(v7 + 3672);
  *(_QWORD *)&__dst[1800] = *(_OWORD *)&vabsq_f64(v385);
  v682 = 0x46293E5939A08CEALL;
  v386 = 8;
  do
  {
    v387 = *(double *)&__dst[v386];
    if (v387 > 1.0e30)
      break;
    _ZF = v386 == 1800;
    v386 += 8;
  }
  while (!_ZF);
  v635 = v295.f64[1];
  if (v387 > 1.0e30)
  {
    sub_20F9B2A4C(v652);
    if (**(int **)(v652[0] + 56) <= 5)
    {
      v388 = *(unsigned __int8 *)(v652[0] + 72);
      v389 = sub_20E8C31DC(v652[0], "OSLogSurrogateAppender", 1, 0);
      v390 = v389 ? v389 + 16 : 0;
      _ZF = !v388 && v389 == 0;
      if (!_ZF)
      {
        *(_QWORD *)&__src[0].f64[0] = v652;
        *(std::chrono::steady_clock::time_point *)&__src[0].f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
        *(std::chrono::system_clock::time_point *)&__src[1].f64[0] = (std::chrono::system_clock::time_point)std::chrono::system_clock::now().__d_.__rep_;
        LODWORD(__src[1].f64[1]) = 5;
        *(_QWORD *)&__src[2].f64[0] = "unknown file";
        LODWORD(__src[2].f64[1]) = 209;
        __src[4].f64[0] = 0.0;
        *(_QWORD *)&__src[3].f64[0] = "unknown function";
        __src[3].f64[1] = 0.0;
        v392 = **(_QWORD **)&__src[0].f64[0];
        v393 = (uint64_t *)(**(_QWORD **)&__src[0].f64[0] + 16);
        if (*(char *)(**(_QWORD **)&__src[0].f64[0] + 39) < 0)
        {
          v395 = *(void **)(v392 + 16);
          v394 = *(void **)(v392 + 24);
        }
        else
        {
          v394 = (void *)*(unsigned __int8 *)(**(_QWORD **)&__src[0].f64[0] + 39);
          v395 = (void *)(**(_QWORD **)&__src[0].f64[0] + 16);
        }
        object = v395;
        v674 = v394;
        v446 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v446 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)__dst);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__dst);
          if (__dst[24] && (__dst[23] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        *(_QWORD *)&v447 = byte_254A4A4F8[23];
        if (byte_254A4A4F8[23] >= 0)
        {
          v448 = byte_254A4A4F8;
        }
        else
        {
          v447 = *(double *)&byte_254A4A4F8[8];
          v448 = *(const char **)byte_254A4A4F8;
        }
        *(_QWORD *)&v661.f64[0] = v448;
        v661.f64[1] = v447;
        *(_QWORD *)__dst = os_log_create(v448, (const char *)object);
        sub_20E86E5A8(&__dst[8], (uint64_t)&v661);
        sub_20E86E5A8(&__dst[40], (uint64_t)&object);
        v449 = *(NSObject **)__dst;
        sub_20E86E44C((uint64_t)__dst);
        sub_20FB4C3FC(v390, v393, v449, OS_LOG_TYPE_ERROR);
        if (v388)
        {
          sub_20E8C003C((uint64_t)__src, "IMU state factor reaches high magnitudes.");
          sub_20E863570((uint64_t)__src);
        }
        sub_20E863714((uint64_t)__src);
      }
    }
  }
  *(_QWORD *)&v450.f64[0] = vdupq_laneq_s64(v647, 1).u64[0];
  v451 = (float64x2_t)vdupq_lane_s64(v647.i64[0], 0);
  v451.f64[0] = v639;
  v450.f64[1] = v642;
  if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f64(v645), (int8x16_t)vcgezq_f64(v645)), (int32x4_t)vorrq_s8((int8x16_t)vcltzq_f64(v451), (int8x16_t)vcgezq_f64(v451))), (int16x8_t)vuzp1q_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f64(v450), (int8x16_t)vcgezq_f64(v450)), (int32x4_t)vorrq_s8((int8x16_t)vcltzq_f64(v651), (int8x16_t)vcgezq_f64(v651))))))) & 1) != 0)
  {
    sub_20F9B2A4C(v652);
    if (**(int **)(v652[0] + 56) > 5)
      return 0;
    v466 = *(unsigned __int8 *)(v652[0] + 72);
    v467 = sub_20E8C31DC(v652[0], "OSLogSurrogateAppender", 1, 0);
    v468 = v467 ? v467 + 16 : 0;
    if (!v466 && !v467)
      return 0;
    *(_QWORD *)&__src[0].f64[0] = v652;
    *(std::chrono::steady_clock::time_point *)&__src[0].f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
    *(std::chrono::system_clock::time_point *)&__src[1].f64[0] = (std::chrono::system_clock::time_point)std::chrono::system_clock::now().__d_.__rep_;
    LODWORD(__src[1].f64[1]) = 5;
    *(_QWORD *)&__src[2].f64[0] = "unknown file";
    LODWORD(__src[2].f64[1]) = 213;
    __src[4].f64[0] = 0.0;
    *(_QWORD *)&__src[3].f64[0] = "unknown function";
    __src[3].f64[1] = 0.0;
    v469 = (uint64_t *)(v652[0] + 16);
    if (*(char *)(v652[0] + 39) < 0)
    {
      v471 = *(void **)(v652[0] + 16);
      v470 = *(void **)(v652[0] + 24);
    }
    else
    {
      v470 = (void *)*(unsigned __int8 *)(v652[0] + 39);
      v471 = (void *)(v652[0] + 16);
    }
    object = v471;
    v674 = v470;
    v472 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v472 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)__dst);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__dst);
      if (__dst[24] && (__dst[23] & 0x80000000) != 0)
        operator delete(*(void **)__dst);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    *(_QWORD *)&v473 = byte_254A4A4F8[23];
    if (byte_254A4A4F8[23] >= 0)
    {
      v474 = byte_254A4A4F8;
    }
    else
    {
      v473 = *(double *)&byte_254A4A4F8[8];
      v474 = *(const char **)byte_254A4A4F8;
    }
    *(_QWORD *)&v661.f64[0] = v474;
    v661.f64[1] = v473;
    *(_QWORD *)__dst = os_log_create(v474, (const char *)object);
    sub_20E86E5A8(&__dst[8], (uint64_t)&v661);
    sub_20E86E5A8(&__dst[40], (uint64_t)&object);
    v475 = *(NSObject **)__dst;
    sub_20E86E44C((uint64_t)__dst);
    sub_20FB4C7E8(v468, v469, v475, OS_LOG_TYPE_ERROR);
    if (v466)
    {
      sub_20E8C003C((uint64_t)__src, "IMU R factor contains NaNs.");
      sub_20E863570((uint64_t)__src);
    }
LABEL_289:
    sub_20E863714((uint64_t)__src);
    return 0;
  }
  v452.f64[0] = v639;
  *(_QWORD *)&v452.f64[1] = v647.i64[0];
  v453 = vabsq_f64(v452);
  v454.f64[0] = v635;
  v454.f64[1] = v642;
  v455 = vabsq_f64(v454);
  v454.f64[0] = v651.f64[0];
  *(_QWORD *)&v454.f64[1] = v631;
  v456.f64[0] = v633;
  v456.f64[1] = v645.f64[0];
  v457 = (int8x16_t)vabsq_f64(v456);
  v458 = (float64x2_t)vdupq_n_s64(0x46293E5939A08CEAuLL);
  if ((vmaxv_u8((uint8x8_t)vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64((float64x2_t)vextq_s8(v457, v457, 8uLL), v458), (int32x4_t)vcgtq_f64(v453, v458)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(v455, v458), (int32x4_t)vcgtq_f64(vabsq_f64(v454), v458))))) & 1) != 0|| vabsq_f64(v637).f64[0] > 1.0e30)
  {
    sub_20F9B2A4C(v652);
    if (**(int **)(v652[0] + 56) <= 5)
    {
      v459 = *(unsigned __int8 *)(v652[0] + 72);
      v460 = sub_20E8C31DC(v652[0], "OSLogSurrogateAppender", 1, 0);
      v461 = v460 ? v460 + 16 : 0;
      if (v459 || v460)
      {
        *(_QWORD *)&__src[0].f64[0] = v652;
        *(std::chrono::steady_clock::time_point *)&__src[0].f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
        *(std::chrono::system_clock::time_point *)&__src[1].f64[0] = (std::chrono::system_clock::time_point)std::chrono::system_clock::now().__d_.__rep_;
        LODWORD(__src[1].f64[1]) = 5;
        *(_QWORD *)&__src[2].f64[0] = "unknown file";
        LODWORD(__src[2].f64[1]) = 217;
        __src[4].f64[0] = 0.0;
        *(_QWORD *)&__src[3].f64[0] = "unknown function";
        __src[3].f64[1] = 0.0;
        v462 = **(_QWORD **)&__src[0].f64[0];
        v463 = (uint64_t *)(**(_QWORD **)&__src[0].f64[0] + 16);
        if (*(char *)(**(_QWORD **)&__src[0].f64[0] + 39) < 0)
        {
          v465 = *(void **)(v462 + 16);
          v464 = *(void **)(v462 + 24);
        }
        else
        {
          v464 = (void *)*(unsigned __int8 *)(**(_QWORD **)&__src[0].f64[0] + 39);
          v465 = (void *)(**(_QWORD **)&__src[0].f64[0] + 16);
        }
        object = v465;
        v674 = v464;
        v476 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v476 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)__dst);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__dst);
          if (__dst[24] && (__dst[23] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        *(_QWORD *)&v477 = byte_254A4A4F8[23];
        if (byte_254A4A4F8[23] >= 0)
        {
          v478 = byte_254A4A4F8;
        }
        else
        {
          v477 = *(double *)&byte_254A4A4F8[8];
          v478 = *(const char **)byte_254A4A4F8;
        }
        *(_QWORD *)&v661.f64[0] = v478;
        v661.f64[1] = v477;
        *(_QWORD *)__dst = os_log_create(v478, (const char *)object);
        sub_20E86E5A8(&__dst[8], (uint64_t)&v661);
        sub_20E86E5A8(&__dst[40], (uint64_t)&object);
        v479 = *(NSObject **)__dst;
        sub_20E86E44C((uint64_t)__dst);
        sub_20FB4CBD4(v461, v463, v479, OS_LOG_TYPE_ERROR);
        if (v459)
        {
          sub_20E8C003C((uint64_t)__src, "IMU R factor reaches high magnitudes.");
          sub_20E863570((uint64_t)__src);
        }
        sub_20E863714((uint64_t)__src);
      }
    }
  }
  if (v9[4][1].i8[4])
  {
    *(_QWORD *)__dst = v6;
    *(_QWORD *)&__dst[8] = v6;
    if (sub_20F4D6FA0((double **)__dst))
    {
      sub_20F9B2A4C(v652);
      if (**(int **)(v652[0] + 56) > 5)
        return 0;
      v481 = *(unsigned __int8 *)(v652[0] + 72);
      v482 = sub_20E8C31DC(v652[0], "OSLogSurrogateAppender", 1, 0);
      v483 = v482 ? v482 + 16 : 0;
      if (!v481 && !v482)
        return 0;
      *(_QWORD *)&__src[0].f64[0] = v652;
      *(std::chrono::steady_clock::time_point *)&__src[0].f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
      *(std::chrono::system_clock::time_point *)&__src[1].f64[0] = (std::chrono::system_clock::time_point)std::chrono::system_clock::now().__d_.__rep_;
      LODWORD(__src[1].f64[1]) = 5;
      *(_QWORD *)&__src[2].f64[0] = "unknown file";
      LODWORD(__src[2].f64[1]) = 221;
      __src[4].f64[0] = 0.0;
      *(_QWORD *)&__src[3].f64[0] = "unknown function";
      __src[3].f64[1] = 0.0;
      v484 = (uint64_t *)(v652[0] + 16);
      if (*(char *)(v652[0] + 39) < 0)
      {
        v486 = *(void **)(v652[0] + 16);
        v485 = *(void **)(v652[0] + 24);
      }
      else
      {
        v485 = (void *)*(unsigned __int8 *)(v652[0] + 39);
        v486 = (void *)(v652[0] + 16);
      }
      object = v486;
      v674 = v485;
      v500 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v500 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)__dst);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__dst);
        if (__dst[24] && (__dst[23] & 0x80000000) != 0)
          operator delete(*(void **)__dst);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      *(_QWORD *)&v501 = byte_254A4A4F8[23];
      if (byte_254A4A4F8[23] >= 0)
      {
        v502 = byte_254A4A4F8;
      }
      else
      {
        v501 = *(double *)&byte_254A4A4F8[8];
        v502 = *(const char **)byte_254A4A4F8;
      }
      *(_QWORD *)&v661.f64[0] = v502;
      v661.f64[1] = v501;
      *(_QWORD *)__dst = os_log_create(v502, (const char *)object);
      sub_20E86E5A8(&__dst[8], (uint64_t)&v661);
      sub_20E86E5A8(&__dst[40], (uint64_t)&object);
      v503 = *(NSObject **)__dst;
      sub_20E86E44C((uint64_t)__dst);
      sub_20FB4CFC0(v483, v484, v503, OS_LOG_TYPE_ERROR);
      if (v481)
      {
        sub_20E8C003C((uint64_t)__src, "IMU dt factor contains NaNs.");
        sub_20E863570((uint64_t)__src);
      }
      goto LABEL_289;
    }
    v480.f64[0] = *(float64_t *)(v6 + 112);
    v487 = vabsq_f64(*(float64x2_t *)v6);
    v488 = vabsq_f64(*(float64x2_t *)(v6 + 16));
    v489 = vabsq_f64(*(float64x2_t *)(v6 + 32));
    v490 = vabsq_f64(*(float64x2_t *)(v6 + 48));
    v491 = vabsq_f64(*(float64x2_t *)(v6 + 64));
    v492 = vabsq_f64(*(float64x2_t *)(v6 + 80));
    *(float64x2_t *)&__dst[104] = vabsq_f64(*(float64x2_t *)(v6 + 96));
    *(float64x2_t *)&__dst[88] = v492;
    *(float64x2_t *)&__dst[72] = v491;
    *(float64x2_t *)&__dst[56] = v490;
    *(float64x2_t *)&__dst[40] = v489;
    *(float64x2_t *)&__dst[24] = v488;
    *(float64x2_t *)&__dst[8] = v487;
    *(_QWORD *)&__dst[120] = *(_OWORD *)&vabsq_f64(v480);
    *(_QWORD *)&__dst[128] = 0x46293E5939A08CEALL;
    if (sub_20F4B473C((double *)__dst))
    {
      sub_20F9B2A4C(v652);
      if (**(int **)(v652[0] + 56) <= 5)
      {
        v493 = *(unsigned __int8 *)(v652[0] + 72);
        v494 = sub_20E8C31DC(v652[0], "OSLogSurrogateAppender", 1, 0);
        v495 = v494 ? v494 + 16 : 0;
        if (v493 || v494)
        {
          *(_QWORD *)&__src[0].f64[0] = v652;
          *(std::chrono::steady_clock::time_point *)&__src[0].f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
          *(std::chrono::system_clock::time_point *)&__src[1].f64[0] = (std::chrono::system_clock::time_point)std::chrono::system_clock::now().__d_.__rep_;
          LODWORD(__src[1].f64[1]) = 5;
          *(_QWORD *)&__src[2].f64[0] = "unknown file";
          LODWORD(__src[2].f64[1]) = 225;
          __src[4].f64[0] = 0.0;
          *(_QWORD *)&__src[3].f64[0] = "unknown function";
          __src[3].f64[1] = 0.0;
          v496 = **(_QWORD **)&__src[0].f64[0];
          v497 = (uint64_t *)(**(_QWORD **)&__src[0].f64[0] + 16);
          if (*(char *)(**(_QWORD **)&__src[0].f64[0] + 39) < 0)
          {
            v499 = *(void **)(v496 + 16);
            v498 = *(void **)(v496 + 24);
          }
          else
          {
            v498 = (void *)*(unsigned __int8 *)(**(_QWORD **)&__src[0].f64[0] + 39);
            v499 = (void *)(**(_QWORD **)&__src[0].f64[0] + 16);
          }
          object = v499;
          v674 = v498;
          v505 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v505 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)__dst);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__dst);
            if (__dst[24] && (__dst[23] & 0x80000000) != 0)
              operator delete(*(void **)__dst);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
          *(_QWORD *)&v506 = byte_254A4A4F8[23];
          if (byte_254A4A4F8[23] >= 0)
          {
            v507 = byte_254A4A4F8;
          }
          else
          {
            v506 = *(double *)&byte_254A4A4F8[8];
            v507 = *(const char **)byte_254A4A4F8;
          }
          *(_QWORD *)&v661.f64[0] = v507;
          v661.f64[1] = v506;
          *(_QWORD *)__dst = os_log_create(v507, (const char *)object);
          sub_20E86E5A8(&__dst[8], (uint64_t)&v661);
          sub_20E86E5A8(&__dst[40], (uint64_t)&object);
          v508 = *(NSObject **)__dst;
          sub_20E86E44C((uint64_t)__dst);
          sub_20FB4D3AC(v495, v497, v508, OS_LOG_TYPE_ERROR);
          if (v493)
          {
            sub_20E8C003C((uint64_t)__src, "IMU dt factor reaches high magnitudes.");
            sub_20E863570((uint64_t)__src);
          }
          sub_20E863714((uint64_t)__src);
        }
      }
    }
  }
  return sub_20FB49440(v7, v9);
}

void sub_20FB48F68(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0xED8]))
  {
    if (SLOBYTE(STACK[0xED7]) < 0)
      operator delete((void *)STACK[0xEC0]);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0x690]);
  _Unwind_Resume(a1);
}

void sub_20FB4900C(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x690]);
  _Unwind_Resume(a1);
}

void sub_20FB49020(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0xEE0]) && SLOBYTE(STACK[0xEDF]) < 0)
    operator delete((void *)STACK[0xEC8]);
  if (STACK[0xEC0])
    os_release((void *)STACK[0xEC0]);
  sub_20E863714((uint64_t)&STACK[0x690]);
  _Unwind_Resume(a1);
}

void sub_20FB49058(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x690]);
  _Unwind_Resume(a1);
}

void sub_20FB4906C(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x690]);
  _Unwind_Resume(a1);
}

void sub_20FB49080(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0xEE0]) && SLOBYTE(STACK[0xEDF]) < 0)
    operator delete((void *)STACK[0xEC8]);
  if (STACK[0xEC0])
    os_release((void *)STACK[0xEC0]);
  sub_20E863714((uint64_t)&STACK[0x690]);
  _Unwind_Resume(a1);
}

void sub_20FB490BC(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x690]);
  _Unwind_Resume(a1);
}

void sub_20FB490D0(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x690]);
  _Unwind_Resume(a1);
}

void sub_20FB490E4(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0xEE0]) && SLOBYTE(STACK[0xEDF]) < 0)
    operator delete((void *)STACK[0xEC8]);
  if (STACK[0xEC0])
    os_release((void *)STACK[0xEC0]);
  sub_20E863714((uint64_t)&STACK[0x690]);
  _Unwind_Resume(a1);
}

void sub_20FB4911C(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x690]);
  _Unwind_Resume(a1);
}

void sub_20FB49134(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x690]);
  _Unwind_Resume(a1);
}

void sub_20FB49148(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0xEE0]) && SLOBYTE(STACK[0xEDF]) < 0)
    operator delete((void *)STACK[0xEC8]);
  if (STACK[0xEC0])
    os_release((void *)STACK[0xEC0]);
  sub_20E863714((uint64_t)&STACK[0x690]);
  _Unwind_Resume(a1);
}

void sub_20FB49194(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0xEE0]) && SLOBYTE(STACK[0xEDF]) < 0)
    operator delete((void *)STACK[0xEC8]);
  if (STACK[0xEC0])
    os_release((void *)STACK[0xEC0]);
  sub_20E863714((uint64_t)&STACK[0x690]);
  _Unwind_Resume(a1);
}

void sub_20FB491D0(_Unwind_Exception *a1)
{
  sub_20E86E8C4((uint64_t *)&STACK[0xDA0]);
  sub_20E86E8C4((uint64_t *)&STACK[0xE78]);
  sub_20E86E658((uint64_t)&STACK[0xEC0]);
  sub_20E863714((uint64_t)&STACK[0x690]);
  _Unwind_Resume(a1);
}

void sub_20FB4928C(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x690]);
  _Unwind_Resume(a1);
}

void sub_20FB492B8()
{
  sub_20E863714(&STACK[0x640]);
  JUMPOUT(0x20FB49418);
}

void sub_20FB492CC()
{
  if (LOBYTE(STACK[0xE98]) && SLOBYTE(STACK[0xE97]) < 0)
    operator delete((void *)STACK[0xE80]);
  if (STACK[0xE78])
    os_release((void *)STACK[0xE78]);
  sub_20E863714((uint64_t)&STACK[0x640]);
  JUMPOUT(0x20FB49418);
}

void sub_20FB4930C(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x690]);
  _Unwind_Resume(a1);
}

void sub_20FB49320(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x690]);
  _Unwind_Resume(a1);
}

void sub_20FB49338(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0xEE0]) && SLOBYTE(STACK[0xEDF]) < 0)
    operator delete((void *)STACK[0xEC8]);
  if (STACK[0xEC0])
    os_release((void *)STACK[0xEC0]);
  sub_20E863714((uint64_t)&STACK[0x690]);
  _Unwind_Resume(a1);
}

void sub_20FB49370(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0xEE0]) && SLOBYTE(STACK[0xEDF]) < 0)
    operator delete((void *)STACK[0xEC8]);
  if (STACK[0xEC0])
    os_release((void *)STACK[0xEC0]);
  sub_20E863714((uint64_t)&STACK[0x690]);
  _Unwind_Resume(a1);
}

void sub_20FB493CC()
{
  void *v0;
  uint64_t v1;
  int v2;

  if (SLOBYTE(STACK[0xED7]) < 0)
  {
    operator delete((void *)STACK[0xEC0]);
    if ((v2 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v2)
  {
LABEL_6:
    sub_20FB237E4(*(float64x2_t **)(v1 + 32), (float64x2_t *)&STACK[0xE50]);
    JUMPOUT(0x20FB49430);
  }
  __cxa_free_exception(v0);
  goto LABEL_6;
}

void sub_20FB49428(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x20FB49430);
  sub_20E860DA4(a1);
}

uint64_t sub_20FB49440(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  int8x16_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  const char *v18;
  size_t v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  const char *v22;
  size_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  size_t v31;
  std::__shared_weak_count_vtbl *v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  char *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  void *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unsigned __int8 v66;
  const char *v67;
  size_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  _OWORD *v72;
  uint64_t v73;
  uint64_t v74;
  NSObject *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  int v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  size_t v106;
  const char *v107;
  int v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  const char *v112;
  size_t v113;
  unsigned __int8 v114;
  const char *v115;
  size_t v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  _OWORD *v120;
  uint64_t v121;
  uint64_t v122;
  NSObject *v123;
  size_t v124;
  std::__shared_weak_count_vtbl *v125;
  std::__shared_weak_count *v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  unint64_t v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  char *v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  void *v155;
  unint64_t *v156;
  unsigned __int8 v157;
  const char *v158;
  size_t v159;
  void *v160;
  int v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _OWORD *v166;
  uint64_t v167;
  uint64_t v168;
  NSObject *v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  int v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t *v199;
  uint64_t v200;
  char *v201;
  int v202;
  unint64_t v203;
  unint64_t v204;
  uint64_t v205;
  const char *v206;
  size_t v207;
  unsigned __int8 v208;
  const char *v209;
  size_t v210;
  void *v211;
  uint64_t v212;
  uint64_t v213;
  _OWORD *v214;
  uint64_t v215;
  uint64_t v216;
  NSObject *v217;
  size_t v218;
  std::__shared_weak_count_vtbl *v219;
  std::__shared_weak_count *v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  unint64_t v224;
  void *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  char *v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  unint64_t v248;
  void *v249;
  unint64_t *v250;
  unsigned __int8 v251;
  uint64_t v252;
  const char *v253;
  NSObject *v254;
  float64x2_t v255;
  float64x2_t v256;
  float64x2_t v257;
  float64x2_t v258;
  float64x2_t v259;
  float64x2_t v260;
  float64x2_t v261;
  float64x2_t v262;
  float64x2_t v263;
  float64x2_t v264;
  float64x2_t v265;
  float64x2_t v266;
  float64x2_t v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  float64x2_t v271;
  float64x2_t v272;
  float64x2_t v273;
  float64x2_t v274;
  float64x2_t v275;
  float64x2_t v276;
  int v277;
  unint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t *v281;
  uint64_t v282;
  char *v283;
  int v284;
  unint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t *v288;
  size_t v289;
  const char *v290;
  unsigned __int8 v291;
  const char *v292;
  size_t v293;
  void *v294;
  uint64_t v295;
  uint64_t v296;
  _OWORD *v297;
  uint64_t v298;
  uint64_t v299;
  NSObject *v300;
  unint64_t *v301;
  unsigned __int8 v302;
  uint64_t v303;
  const char *v304;
  NSObject *v305;
  float64x2_t *v306;
  float64x2_t v307;
  float64x2_t v308;
  float64x2_t v309;
  float64x2_t v310;
  float64x2_t v311;
  float64x2_t v312;
  float64x2_t v313;
  float64x2_t v314;
  float64x2_t v315;
  float64x2_t v316;
  float64x2_t v317;
  float64x2_t v318;
  float64x2_t v319;
  float64x2_t v320;
  float64x2_t v321;
  float64x2_t v322;
  float64x2_t v323;
  float64x2_t v324;
  float64x2_t v325;
  float64x2_t v326;
  float64x2_t v327;
  float64x2_t v328;
  int v329;
  unint64_t v330;
  uint64_t v331;
  uint64_t *v332;
  uint64_t v333;
  char *v334;
  int v335;
  unint64_t v336;
  uint64_t v337;
  uint64_t *v338;
  uint64_t v339;
  char *v340;
  unsigned __int8 v341;
  uint64_t v342;
  const char *v343;
  NSObject *v344;
  unsigned __int8 v346;
  uint64_t v347;
  const char *v348;
  NSObject *v349;
  uint64_t *v350;
  char *category;
  uint64_t v352;
  int v353[2];
  int v354[2];
  int v355[2];
  int v356[2];
  uint64_t *v357;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v359;
  int v360;
  const char *v361;
  int v362;
  const char *v363;
  uint64_t v364;
  std::__shared_weak_count *v365;
  uint64_t v366;
  char *v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  void *object;
  void *__p[2];
  float64x2_t v373;
  float64x2_t v374;
  float64x2_t v375;
  float64x2_t v376;
  float64x2_t v377;
  float64x2_t v378;
  float64x2_t v379;
  float64x2_t v380;
  float64x2_t v381;
  float64x2_t v382;
  float64x2_t v383;
  float64x2_t v384;
  float64x2_t v385;
  float64x2_t v386;
  float64x2_t v387;
  float64x2_t v388;
  float64x2_t v389;
  float64x2_t v390;
  float64x2_t v391;
  float64x2_t v392;
  float64x2_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;

  v396 = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 7688;
  if (!*(_BYTE *)(a2[5] + 20))
    goto LABEL_157;
  if ((*(_QWORD *)v4 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(_QWORD *)(a1 + 7696) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(_QWORD *)(a1 + 7704) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(_QWORD *)(a1 + 7712) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(_QWORD *)(a1 + 7720) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(_QWORD *)(a1 + 7728) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(_QWORD *)(a1 + 7736) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(_QWORD *)(a1 + 7744) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(_QWORD *)(a1 + 7752) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(_QWORD *)(a1 + 7760) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(_QWORD *)(a1 + 7768) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(_QWORD *)(a1 + 7776) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(_QWORD *)(a1 + 7784) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(_QWORD *)(a1 + 7792) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(_QWORD *)(a1 + 7800) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    sub_20F9B2A4C(&v366);
    if (**(int **)(v366 + 56) > 5)
      return 0;
    v13 = *(unsigned __int8 *)(v366 + 72);
    v14 = sub_20E8C31DC(v366, "OSLogSurrogateAppender", 1, 0);
    v15 = v14;
    if (!v13 && v14 == 0)
      return 0;
    v357 = &v366;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v359 = std::chrono::system_clock::now().__d_.__rep_;
    v360 = 5;
    v361 = "unknown file";
    v362 = 563;
    v364 = 0;
    v365 = 0;
    v363 = "unknown function";
    v17 = v366;
    v18 = (const char *)(v366 + 16);
    *(_QWORD *)v353 = v366 + 16;
    if (*(char *)(v366 + 39) < 0)
    {
      v18 = *(const char **)(v366 + 16);
      v19 = *(_QWORD *)(v366 + 24);
      v21 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v21 & 1) != 0)
        goto LABEL_38;
    }
    else
    {
      v19 = *(unsigned __int8 *)(v366 + 39);
      v20 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v20 & 1) != 0)
        goto LABEL_38;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
      if (LOBYTE(v373.f64[0]) && SHIBYTE(__p[1]) < 0)
        operator delete(object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_38:
    if (byte_254A4A4F8[23] >= 0)
      v22 = byte_254A4A4F8;
    else
      v22 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v23 = byte_254A4A4F8[23];
    else
      v23 = *(_QWORD *)&byte_254A4A4F8[8];
    object = os_log_create(v22, v18);
    v24 = __p;
    if (v23 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v23 >= 0x17)
    {
      v25 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v23 | 7) != 0x17)
        v25 = v23 | 7;
      v26 = v25 + 1;
      v24 = operator new(v25 + 1);
      __p[0] = v24;
      __p[1] = (void *)v23;
      *(_QWORD *)&v373.f64[0] = v26 | 0x8000000000000000;
    }
    else
    {
      HIBYTE(v373.f64[0]) = v23;
      if (!v23)
      {
LABEL_52:
        *((_BYTE *)v24 + v23) = 0;
        LOBYTE(v373.f64[1]) = 1;
        v27 = &v374;
        if (v19 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v19 >= 0x17)
        {
          v28 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v19 | 7) != 0x17)
            v28 = v19 | 7;
          v29 = v28 + 1;
          v27 = operator new(v28 + 1);
          *(_QWORD *)&v374.f64[1] = v19;
          *(_QWORD *)&v375.f64[0] = v29 | 0x8000000000000000;
          *(_QWORD *)&v374.f64[0] = v27;
        }
        else
        {
          HIBYTE(v375.f64[0]) = v19;
          if (!v19)
            goto LABEL_60;
        }
        memmove(v27, v18, v19);
LABEL_60:
        *((_BYTE *)v27 + v19) = 0;
        LOBYTE(v375.f64[1]) = 1;
        v30 = object;
        if (SHIBYTE(v375.f64[0]) < 0)
          operator delete(*(void **)&v374.f64[0]);
        if (LOBYTE(v373.f64[1]) && SHIBYTE(v373.f64[0]) < 0)
          operator delete(__p[0]);
        if (object)
          os_release(object);
        if (v15 && *(_QWORD *)(v15 + 24))
        {
          v31 = _os_log_pack_size();
          v32 = (std::__shared_weak_count_vtbl *)operator new(v31, (std::align_val_t)8uLL);
          v33 = (std::__shared_weak_count *)operator new();
          v34 = v33;
          v33->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v33->__shared_owners_;
          v33->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v33->__shared_weak_owners_ = 0;
          v33[1].__vftable = v32;
          object = v32;
          __p[0] = v32;
          __p[1] = v33;
          do
            v36 = __ldxr(p_shared_owners);
          while (__stxr(v36 + 1, p_shared_owners));
          v373 = 0uLL;
          v374.f64[0] = 0.0;
          do
            v37 = __ldaxr(p_shared_owners);
          while (__stlxr(v37 - 1, p_shared_owners));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v34);
          }
          v38 = object;
          *(_WORD *)_os_log_pack_fill() = 0;
          v39 = operator new();
          v40 = *(unsigned __int8 *)(v17 + 39);
          v41 = *(_QWORD *)v353;
          if ((v40 & 0x80u) != 0)
          {
            v41 = *(_QWORD *)(v17 + 16);
            v40 = *(_QWORD *)(v17 + 24);
          }
          *(_QWORD *)v39 = v38;
          *(_OWORD *)(v39 + 8) = *(_OWORD *)__p;
          __p[0] = 0;
          __p[1] = 0;
          *(float64x2_t *)(v39 + 24) = v373;
          v373 = 0uLL;
          *(_QWORD *)(v39 + 40) = v41;
          *(_QWORD *)(v39 + 48) = v40;
          *(_BYTE *)(v39 + 56) = 16;
          v367 = 0;
          v369 = v39;
          (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v15 + 24) + 40))(*(_QWORD *)(v15 + 24), &v369);
          v42 = v369;
          v369 = 0;
          if (v42)
          {
            v43 = *(std::__shared_weak_count **)(v42 + 32);
            if (v43)
            {
              v44 = (unint64_t *)&v43->__shared_owners_;
              do
                v45 = __ldaxr(v44);
              while (__stlxr(v45 - 1, v44));
              if (!v45)
              {
                ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
                std::__shared_weak_count::__release_weak(v43);
              }
            }
            v46 = *(std::__shared_weak_count **)(v42 + 16);
            if (v46)
            {
              v47 = (unint64_t *)&v46->__shared_owners_;
              do
                v48 = __ldaxr(v47);
              while (__stlxr(v48 - 1, v47));
              if (!v48)
              {
                ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                std::__shared_weak_count::__release_weak(v46);
              }
            }
            MEMORY[0x212BC6398](v42, 0x10F0C40B62ED6C6);
            v49 = v367;
            v367 = 0;
            if (v49)
            {
              v50 = (std::__shared_weak_count *)*((_QWORD *)v49 + 4);
              if (v50)
              {
                v51 = (unint64_t *)&v50->__shared_owners_;
                do
                  v52 = __ldaxr(v51);
                while (__stlxr(v52 - 1, v51));
                if (!v52)
                {
                  ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                  std::__shared_weak_count::__release_weak(v50);
                }
              }
              v53 = (std::__shared_weak_count *)*((_QWORD *)v49 + 2);
              if (v53)
              {
                v54 = (unint64_t *)&v53->__shared_owners_;
                do
                  v55 = __ldaxr(v54);
                while (__stlxr(v55 - 1, v54));
                if (!v55)
                {
                  ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                  std::__shared_weak_count::__release_weak(v53);
                }
              }
              MEMORY[0x212BC6398](v49, 0x10F0C40B62ED6C6);
            }
          }
          v56 = *(std::__shared_weak_count **)&v373.f64[1];
          if (*(_QWORD *)&v373.f64[1])
          {
            v57 = (unint64_t *)(*(_QWORD *)&v373.f64[1] + 8);
            do
              v58 = __ldaxr(v57);
            while (__stlxr(v58 - 1, v57));
            if (!v58)
            {
              ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
              std::__shared_weak_count::__release_weak(v56);
            }
          }
          v59 = (std::__shared_weak_count *)__p[1];
          if (__p[1])
          {
            v60 = (unint64_t *)((char *)__p[1] + 8);
            do
              v61 = __ldaxr(v60);
            while (__stlxr(v61 - 1, v60));
            if (!v61)
            {
              ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
              std::__shared_weak_count::__release_weak(v59);
            }
          }
        }
        else
        {
          os_log_type_enabled(v30, OS_LOG_TYPE_ERROR);
          LOWORD(object) = 0;
          v62 = (void *)_os_log_send_and_compose_impl();
          if (v62)
            free(v62);
        }
        if (v13)
        {
          sub_20E8C003C((uint64_t)&v357, "IMU dt factor contains NaNs.");
          sub_20E863570((uint64_t)&v357);
        }
        sub_20E863570((uint64_t)&v357);
        v63 = v365;
        if (!v365)
          return 0;
        v64 = (unint64_t *)&v365->__shared_owners_;
        do
          v65 = __ldaxr(v64);
        while (__stlxr(v65 - 1, v64));
LABEL_117:
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
        return 0;
      }
    }
    memmove(v24, v22, v23);
    goto LABEL_52;
  }
  v5 = (int8x16_t)vabsq_f64(*(float64x2_t *)v4);
  v6 = (float64x2_t)vextq_s8(v5, v5, 8uLL);
  v7 = (float64x2_t)vdupq_n_s64(0x46293E5939A08CEAuLL);
  if ((vmaxv_u8((uint8x8_t)vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(v6, v7), (int32x4_t)vcgtq_f64(vabsq_f64(*(float64x2_t *)(a1 + 7704)), v7)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(vabsq_f64(*(float64x2_t *)(a1 + 7720)), v7), (int32x4_t)vcgtq_f64(vabsq_f64(*(float64x2_t *)(a1 + 7736)), v7))))) & 1) != 0|| (vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgtq_f64(vabsq_f64(*(float64x2_t *)(a1 + 7752)), v7), (int32x4_t)vcgtq_f64(vabsq_f64(*(float64x2_t *)(a1 + 7768)), v7)), (int8x16_t)xmmword_21030C960)) & 0xF) != 0|| (v8 = vabsq_f64(*(float64x2_t *)(a1 + 7784)), v8.f64[0] > 1.0e30)|| v8.f64[1] > 1.0e30|| (v8.f64[0] = *(float64_t *)(a1 + 7800), vabsq_f64(v8).f64[0] > 1.0e30))
  {
    sub_20F9B2A4C(&v369);
    if (**(int **)(v369 + 56) <= 5)
    {
      v9 = *(unsigned __int8 *)(v369 + 72);
      v10 = sub_20E8C31DC(v369, "OSLogSurrogateAppender", 1, 0);
      v11 = v10 + 16;
      if (!v10)
        v11 = 0;
      v352 = v11;
      if (v9 || v10)
      {
        v357 = &v369;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v359 = std::chrono::system_clock::now().__d_.__rep_;
        v360 = 5;
        v361 = "unknown file";
        v362 = 567;
        v364 = 0;
        v365 = 0;
        v363 = "unknown function";
        v350 = (uint64_t *)(v369 + 16);
        if (*(char *)(v369 + 39) < 0)
        {
          v12 = *(_QWORD *)(v369 + 24);
          category = *(char **)(v369 + 16);
        }
        else
        {
          v12 = *(unsigned __int8 *)(v369 + 39);
          category = (char *)(v369 + 16);
        }
        v66 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v66 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)&object);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
          if (LOBYTE(v373.f64[0]) && SHIBYTE(__p[1]) < 0)
            operator delete(object);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        if (byte_254A4A4F8[23] >= 0)
          v67 = byte_254A4A4F8;
        else
          v67 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v68 = byte_254A4A4F8[23];
        else
          v68 = *(_QWORD *)&byte_254A4A4F8[8];
        object = os_log_create(v67, category);
        v69 = __p;
        if (v68 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v68 >= 0x17)
        {
          v70 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v68 | 7) != 0x17)
            v70 = v68 | 7;
          v71 = v70 + 1;
          v69 = operator new(v70 + 1);
          __p[0] = v69;
          __p[1] = (void *)v68;
          *(_QWORD *)&v373.f64[0] = v71 | 0x8000000000000000;
        }
        else
        {
          HIBYTE(v373.f64[0]) = v68;
          if (!v68)
          {
LABEL_135:
            *((_BYTE *)v69 + v68) = 0;
            LOBYTE(v373.f64[1]) = 1;
            v72 = &v374;
            if (v12 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v12 >= 0x17)
            {
              v73 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v12 | 7) != 0x17)
                v73 = v12 | 7;
              v74 = v73 + 1;
              v72 = operator new(v73 + 1);
              *(_QWORD *)&v374.f64[1] = v12;
              *(_QWORD *)&v375.f64[0] = v74 | 0x8000000000000000;
              *(_QWORD *)&v374.f64[0] = v72;
            }
            else
            {
              HIBYTE(v375.f64[0]) = v12;
              if (!v12)
                goto LABEL_143;
            }
            memmove(v72, category, v12);
LABEL_143:
            *((_BYTE *)v72 + v12) = 0;
            LOBYTE(v375.f64[1]) = 1;
            v75 = object;
            if (SHIBYTE(v375.f64[0]) < 0)
              operator delete(*(void **)&v374.f64[0]);
            if (LOBYTE(v373.f64[1]) && SHIBYTE(v373.f64[0]) < 0)
              operator delete(__p[0]);
            if (object)
              os_release(object);
            sub_20FB4D798(v352, v350, v75, OS_LOG_TYPE_ERROR);
            if (v9)
            {
              sub_20E8C003C((uint64_t)&v357, "IMU dt factor reaches high magnitudes.");
              sub_20E863570((uint64_t)&v357);
            }
            sub_20E863570((uint64_t)&v357);
            v76 = v365;
            if (v365)
            {
              v77 = (unint64_t *)&v365->__shared_owners_;
              do
                v78 = __ldaxr(v77);
              while (__stlxr(v78 - 1, v77));
              if (!v78)
              {
                ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                std::__shared_weak_count::__release_weak(v76);
              }
            }
            goto LABEL_157;
          }
        }
        memmove(v69, v67, v68);
        goto LABEL_135;
      }
    }
  }
LABEL_157:
  if (!*(_BYTE *)(a2[6] + 20))
    goto LABEL_293;
  if (!sub_20FB4DB84((_QWORD *)(v4 + 120)))
  {
    sub_20F9B2A4C(&v366);
    if (**(int **)(v366 + 56) > 5)
      return 0;
    v108 = *(unsigned __int8 *)(v366 + 72);
    v109 = sub_20E8C31DC(v366, "OSLogSurrogateAppender", 1, 0);
    v110 = v109;
    if (!v108 && !v109)
      return 0;
    v357 = &v366;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v359 = std::chrono::system_clock::now().__d_.__rep_;
    v360 = 5;
    v361 = "unknown file";
    v362 = 573;
    v364 = 0;
    v365 = 0;
    v363 = "unknown function";
    v111 = *v357;
    v112 = (const char *)(*v357 + 16);
    *(_QWORD *)v354 = v112;
    if (*(char *)(*v357 + 39) < 0)
    {
      v112 = *(const char **)(v111 + 16);
      v113 = *(_QWORD *)(v111 + 24);
    }
    else
    {
      v113 = *(unsigned __int8 *)(*v357 + 39);
    }
    v114 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v114 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
      if (LOBYTE(v373.f64[0]) && SHIBYTE(__p[1]) < 0)
        operator delete(object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v115 = byte_254A4A4F8;
    else
      v115 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v116 = byte_254A4A4F8[23];
    else
      v116 = *(_QWORD *)&byte_254A4A4F8[8];
    object = os_log_create(v115, v112);
    v117 = __p;
    if (v116 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v116 >= 0x17)
    {
      v118 = (v116 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v116 | 7) != 0x17)
        v118 = v116 | 7;
      v119 = v118 + 1;
      v117 = operator new(v118 + 1);
      __p[0] = v117;
      __p[1] = (void *)v116;
      *(_QWORD *)&v373.f64[0] = v119 | 0x8000000000000000;
    }
    else
    {
      HIBYTE(v373.f64[0]) = v116;
      if (!v116)
      {
LABEL_189:
        *((_BYTE *)v117 + v116) = 0;
        LOBYTE(v373.f64[1]) = 1;
        v120 = &v374;
        if (v113 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v113 >= 0x17)
        {
          v121 = (v113 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v113 | 7) != 0x17)
            v121 = v113 | 7;
          v122 = v121 + 1;
          v120 = operator new(v121 + 1);
          *(_QWORD *)&v374.f64[1] = v113;
          *(_QWORD *)&v375.f64[0] = v122 | 0x8000000000000000;
          *(_QWORD *)&v374.f64[0] = v120;
        }
        else
        {
          HIBYTE(v375.f64[0]) = v113;
          if (!v113)
            goto LABEL_197;
        }
        memmove(v120, v112, v113);
LABEL_197:
        *((_BYTE *)v120 + v113) = 0;
        LOBYTE(v375.f64[1]) = 1;
        v123 = object;
        if (SHIBYTE(v375.f64[0]) < 0)
          operator delete(*(void **)&v374.f64[0]);
        if (LOBYTE(v373.f64[1]) && SHIBYTE(v373.f64[0]) < 0)
          operator delete(__p[0]);
        if (object)
          os_release(object);
        if (v110 && *(_QWORD *)(v110 + 24))
        {
          v124 = _os_log_pack_size();
          v125 = (std::__shared_weak_count_vtbl *)operator new(v124, (std::align_val_t)8uLL);
          v126 = (std::__shared_weak_count *)operator new();
          v127 = v126;
          v126->__shared_owners_ = 0;
          v128 = (unint64_t *)&v126->__shared_owners_;
          v126->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v126->__shared_weak_owners_ = 0;
          v126[1].__vftable = v125;
          object = v125;
          __p[0] = v125;
          __p[1] = v126;
          do
            v129 = __ldxr(v128);
          while (__stxr(v129 + 1, v128));
          v373 = 0uLL;
          v374.f64[0] = 0.0;
          do
            v130 = __ldaxr(v128);
          while (__stlxr(v130 - 1, v128));
          if (!v130)
          {
            ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
            std::__shared_weak_count::__release_weak(v127);
          }
          v131 = object;
          *(_WORD *)_os_log_pack_fill() = 0;
          v132 = operator new();
          v133 = *(unsigned __int8 *)(v111 + 39);
          v134 = *(_QWORD *)v354;
          if ((v133 & 0x80u) != 0)
          {
            v134 = *(_QWORD *)(v111 + 16);
            v133 = *(_QWORD *)(v111 + 24);
          }
          *(_QWORD *)v132 = v131;
          *(_OWORD *)(v132 + 8) = *(_OWORD *)__p;
          __p[0] = 0;
          __p[1] = 0;
          *(float64x2_t *)(v132 + 24) = v373;
          v373 = 0uLL;
          *(_QWORD *)(v132 + 40) = v134;
          *(_QWORD *)(v132 + 48) = v133;
          *(_BYTE *)(v132 + 56) = 16;
          v367 = 0;
          v369 = v132;
          (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v110 + 24) + 40))(*(_QWORD *)(v110 + 24), &v369);
          v135 = v369;
          v369 = 0;
          if (v135)
          {
            v136 = *(std::__shared_weak_count **)(v135 + 32);
            if (v136)
            {
              v137 = (unint64_t *)&v136->__shared_owners_;
              do
                v138 = __ldaxr(v137);
              while (__stlxr(v138 - 1, v137));
              if (!v138)
              {
                ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
                std::__shared_weak_count::__release_weak(v136);
              }
            }
            v139 = *(std::__shared_weak_count **)(v135 + 16);
            if (v139)
            {
              v140 = (unint64_t *)&v139->__shared_owners_;
              do
                v141 = __ldaxr(v140);
              while (__stlxr(v141 - 1, v140));
              if (!v141)
              {
                ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
                std::__shared_weak_count::__release_weak(v139);
              }
            }
            MEMORY[0x212BC6398](v135, 0x10F0C40B62ED6C6);
            v142 = v367;
            v367 = 0;
            if (v142)
            {
              v143 = (std::__shared_weak_count *)*((_QWORD *)v142 + 4);
              if (v143)
              {
                v144 = (unint64_t *)&v143->__shared_owners_;
                do
                  v145 = __ldaxr(v144);
                while (__stlxr(v145 - 1, v144));
                if (!v145)
                {
                  ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
                  std::__shared_weak_count::__release_weak(v143);
                }
              }
              v146 = (std::__shared_weak_count *)*((_QWORD *)v142 + 2);
              if (v146)
              {
                v147 = (unint64_t *)&v146->__shared_owners_;
                do
                  v148 = __ldaxr(v147);
                while (__stlxr(v148 - 1, v147));
                if (!v148)
                {
                  ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
                  std::__shared_weak_count::__release_weak(v146);
                }
              }
              MEMORY[0x212BC6398](v142, 0x10F0C40B62ED6C6);
            }
          }
          v149 = *(std::__shared_weak_count **)&v373.f64[1];
          if (*(_QWORD *)&v373.f64[1])
          {
            v150 = (unint64_t *)(*(_QWORD *)&v373.f64[1] + 8);
            do
              v151 = __ldaxr(v150);
            while (__stlxr(v151 - 1, v150));
            if (!v151)
            {
              ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
              std::__shared_weak_count::__release_weak(v149);
            }
          }
          v152 = (std::__shared_weak_count *)__p[1];
          if (__p[1])
          {
            v153 = (unint64_t *)((char *)__p[1] + 8);
            do
              v154 = __ldaxr(v153);
            while (__stlxr(v154 - 1, v153));
            if (!v154)
            {
              ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
              std::__shared_weak_count::__release_weak(v152);
            }
          }
        }
        else
        {
          os_log_type_enabled(v123, OS_LOG_TYPE_ERROR);
          LOWORD(object) = 0;
          v155 = (void *)_os_log_send_and_compose_impl();
          if (v155)
            free(v155);
        }
        if (v108)
        {
          sub_20E8C003C((uint64_t)&v357, "IMU accel scale factor contains NaNs.");
          sub_20E863570((uint64_t)&v357);
        }
        sub_20E863570((uint64_t)&v357);
        v63 = v365;
        if (!v365)
          return 0;
        v156 = (unint64_t *)&v365->__shared_owners_;
        do
          v65 = __ldaxr(v156);
        while (__stlxr(v65 - 1, v156));
        goto LABEL_117;
      }
    }
    memmove(v117, v115, v116);
    goto LABEL_189;
  }
  v79.f64[0] = *(float64_t *)(v4 + 472);
  v80 = vabsq_f64(*(float64x2_t *)(v4 + 120));
  v81 = vabsq_f64(*(float64x2_t *)(v4 + 136));
  v82 = vabsq_f64(*(float64x2_t *)(v4 + 152));
  v83 = vabsq_f64(*(float64x2_t *)(v4 + 168));
  v84 = vabsq_f64(*(float64x2_t *)(v4 + 184));
  v85 = vabsq_f64(*(float64x2_t *)(v4 + 200));
  v86 = vabsq_f64(*(float64x2_t *)(v4 + 216));
  v87 = vabsq_f64(*(float64x2_t *)(v4 + 232));
  v88 = vabsq_f64(*(float64x2_t *)(v4 + 248));
  v89 = vabsq_f64(*(float64x2_t *)(v4 + 264));
  v90 = vabsq_f64(*(float64x2_t *)(v4 + 280));
  v91 = vabsq_f64(*(float64x2_t *)(v4 + 296));
  v92 = vabsq_f64(*(float64x2_t *)(v4 + 312));
  v93 = vabsq_f64(*(float64x2_t *)(v4 + 328));
  v94 = vabsq_f64(*(float64x2_t *)(v4 + 344));
  v95 = vabsq_f64(*(float64x2_t *)(v4 + 360));
  v96 = vabsq_f64(*(float64x2_t *)(v4 + 376));
  v97 = vabsq_f64(*(float64x2_t *)(v4 + 392));
  v98 = vabsq_f64(*(float64x2_t *)(v4 + 408));
  v99 = vabsq_f64(*(float64x2_t *)(v4 + 424));
  v100 = vabsq_f64(*(float64x2_t *)(v4 + 456));
  v392 = vabsq_f64(*(float64x2_t *)(v4 + 440));
  v393 = v100;
  v390 = v98;
  v391 = v99;
  v388 = v96;
  v389 = v97;
  v387 = v95;
  v386 = v94;
  v385 = v93;
  v384 = v92;
  v383 = v91;
  v382 = v90;
  v381 = v89;
  v380 = v88;
  v379 = v87;
  v378 = v86;
  v377 = v85;
  v376 = v84;
  v375 = v83;
  v374 = v82;
  v373 = v81;
  *(float64x2_t *)__p = v80;
  v394 = *(_OWORD *)&vabsq_f64(v79);
  v395 = 0x46293E5939A08CEALL;
  if (!sub_20FB4DEBC((double *)&object))
    goto LABEL_293;
  sub_20F9B2A4C(&v369);
  if (**(int **)(v369 + 56) > 5)
    goto LABEL_293;
  v101 = *(unsigned __int8 *)(v369 + 72);
  v102 = sub_20E8C31DC(v369, "OSLogSurrogateAppender", 1, 0);
  v103 = v102 ? v102 + 16 : 0;
  if (!v101 && !v102)
    goto LABEL_293;
  v357 = &v369;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v359 = std::chrono::system_clock::now().__d_.__rep_;
  v360 = 5;
  v361 = "unknown file";
  v362 = 577;
  v364 = 0;
  v365 = 0;
  v363 = "unknown function";
  v104 = *v357;
  v105 = (uint64_t *)(*v357 + 16);
  if (*(char *)(*v357 + 39) < 0)
  {
    v107 = *(const char **)(v104 + 16);
    v106 = *(_QWORD *)(v104 + 24);
  }
  else
  {
    v106 = *(unsigned __int8 *)(*v357 + 39);
    v107 = (const char *)(*v357 + 16);
  }
  v157 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v157 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)&object);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
    if (LOBYTE(v373.f64[0]) && SHIBYTE(__p[1]) < 0)
      operator delete(object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v158 = byte_254A4A4F8;
  else
    v158 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v159 = byte_254A4A4F8[23];
  else
    v159 = *(_QWORD *)&byte_254A4A4F8[8];
  object = os_log_create(v158, v107);
  v160 = __p;
  if (v159 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v159 >= 0x17)
  {
    *(_QWORD *)v355 = v107;
    v161 = v101;
    v162 = v105;
    v163 = v103;
    v164 = (v159 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v159 | 7) != 0x17)
      v164 = v159 | 7;
    v165 = v164 + 1;
    v160 = operator new(v164 + 1);
    __p[0] = v160;
    __p[1] = (void *)v159;
    *(_QWORD *)&v373.f64[0] = v165 | 0x8000000000000000;
    v103 = v163;
    v105 = v162;
    v101 = v161;
    v107 = *(const char **)v355;
    goto LABEL_270;
  }
  HIBYTE(v373.f64[0]) = v159;
  if (v159)
LABEL_270:
    memmove(v160, v158, v159);
  *((_BYTE *)v160 + v159) = 0;
  LOBYTE(v373.f64[1]) = 1;
  v166 = &v374;
  if (v106 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v106 >= 0x17)
  {
    v167 = (v106 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v106 | 7) != 0x17)
      v167 = v106 | 7;
    v168 = v167 + 1;
    v166 = operator new(v167 + 1);
    *(_QWORD *)&v374.f64[1] = v106;
    *(_QWORD *)&v375.f64[0] = v168 | 0x8000000000000000;
    *(_QWORD *)&v374.f64[0] = v166;
  }
  else
  {
    HIBYTE(v375.f64[0]) = v106;
    if (!v106)
      goto LABEL_279;
  }
  memmove(v166, v107, v106);
LABEL_279:
  *((_BYTE *)v166 + v106) = 0;
  LOBYTE(v375.f64[1]) = 1;
  v169 = object;
  if (SHIBYTE(v375.f64[0]) < 0)
    operator delete(*(void **)&v374.f64[0]);
  if (LOBYTE(v373.f64[1]) && SHIBYTE(v373.f64[0]) < 0)
    operator delete(__p[0]);
  if (object)
    os_release(object);
  sub_20FB4E24C(v103, v105, v169, OS_LOG_TYPE_ERROR);
  if (v101)
  {
    sub_20E8C003C((uint64_t)&v357, "IMU accel scale factor reaches high magnitudes.");
    sub_20E863570((uint64_t)&v357);
  }
  sub_20E863570((uint64_t)&v357);
  v170 = v365;
  if (v365)
  {
    v171 = (unint64_t *)&v365->__shared_owners_;
    do
      v172 = __ldaxr(v171);
    while (__stlxr(v172 - 1, v171));
    if (!v172)
    {
      ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
      std::__shared_weak_count::__release_weak(v170);
    }
  }
LABEL_293:
  if (!*(_BYTE *)(a2[7] + 20))
    goto LABEL_399;
  if (!sub_20FB4DB84((_QWORD *)(a1 + 8168)))
  {
    sub_20F9B2A4C(&v366);
    if (**(int **)(v366 + 56) > 5)
      return 0;
    v202 = *(unsigned __int8 *)(v366 + 72);
    v203 = sub_20E8C31DC(v366, "OSLogSurrogateAppender", 1, 0);
    v204 = v203;
    if (!v202 && !v203)
      return 0;
    v357 = &v366;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v359 = std::chrono::system_clock::now().__d_.__rep_;
    v360 = 5;
    v361 = "unknown file";
    v362 = 583;
    v364 = 0;
    v365 = 0;
    v363 = "unknown function";
    v205 = *v357;
    v206 = (const char *)(*v357 + 16);
    *(_QWORD *)v356 = v206;
    if (*(char *)(*v357 + 39) < 0)
    {
      v206 = *(const char **)(v205 + 16);
      v207 = *(_QWORD *)(v205 + 24);
    }
    else
    {
      v207 = *(unsigned __int8 *)(*v357 + 39);
    }
    v208 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v208 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
      if (LOBYTE(v373.f64[0]) && SHIBYTE(__p[1]) < 0)
        operator delete(object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v209 = byte_254A4A4F8;
    else
      v209 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v210 = byte_254A4A4F8[23];
    else
      v210 = *(_QWORD *)&byte_254A4A4F8[8];
    object = os_log_create(v209, v206);
    v211 = __p;
    if (v210 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v210 >= 0x17)
    {
      v212 = (v210 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v210 | 7) != 0x17)
        v212 = v210 | 7;
      v213 = v212 + 1;
      v211 = operator new(v212 + 1);
      __p[0] = v211;
      __p[1] = (void *)v210;
      *(_QWORD *)&v373.f64[0] = v213 | 0x8000000000000000;
    }
    else
    {
      HIBYTE(v373.f64[0]) = v210;
      if (!v210)
      {
LABEL_325:
        *((_BYTE *)v211 + v210) = 0;
        LOBYTE(v373.f64[1]) = 1;
        v214 = &v374;
        if (v207 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v207 >= 0x17)
        {
          v215 = (v207 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v207 | 7) != 0x17)
            v215 = v207 | 7;
          v216 = v215 + 1;
          v214 = operator new(v215 + 1);
          *(_QWORD *)&v374.f64[1] = v207;
          *(_QWORD *)&v375.f64[0] = v216 | 0x8000000000000000;
          *(_QWORD *)&v374.f64[0] = v214;
        }
        else
        {
          HIBYTE(v375.f64[0]) = v207;
          if (!v207)
            goto LABEL_333;
        }
        memmove(v214, v206, v207);
LABEL_333:
        *((_BYTE *)v214 + v207) = 0;
        LOBYTE(v375.f64[1]) = 1;
        v217 = object;
        if (SHIBYTE(v375.f64[0]) < 0)
          operator delete(*(void **)&v374.f64[0]);
        if (LOBYTE(v373.f64[1]) && SHIBYTE(v373.f64[0]) < 0)
          operator delete(__p[0]);
        if (object)
          os_release(object);
        if (v204 && *(_QWORD *)(v204 + 24))
        {
          v218 = _os_log_pack_size();
          v219 = (std::__shared_weak_count_vtbl *)operator new(v218, (std::align_val_t)8uLL);
          v220 = (std::__shared_weak_count *)operator new();
          v221 = v220;
          v220->__shared_owners_ = 0;
          v222 = (unint64_t *)&v220->__shared_owners_;
          v220->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v220->__shared_weak_owners_ = 0;
          v220[1].__vftable = v219;
          object = v219;
          __p[0] = v219;
          __p[1] = v220;
          do
            v223 = __ldxr(v222);
          while (__stxr(v223 + 1, v222));
          v373 = 0uLL;
          v374.f64[0] = 0.0;
          do
            v224 = __ldaxr(v222);
          while (__stlxr(v224 - 1, v222));
          if (!v224)
          {
            ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
            std::__shared_weak_count::__release_weak(v221);
          }
          v225 = object;
          *(_WORD *)_os_log_pack_fill() = 0;
          v226 = operator new();
          v227 = *(unsigned __int8 *)(v205 + 39);
          v228 = *(_QWORD *)v356;
          if ((v227 & 0x80u) != 0)
          {
            v228 = *(_QWORD *)(v205 + 16);
            v227 = *(_QWORD *)(v205 + 24);
          }
          *(_QWORD *)v226 = v225;
          *(_OWORD *)(v226 + 8) = *(_OWORD *)__p;
          __p[0] = 0;
          __p[1] = 0;
          *(float64x2_t *)(v226 + 24) = v373;
          v373 = 0uLL;
          *(_QWORD *)(v226 + 40) = v228;
          *(_QWORD *)(v226 + 48) = v227;
          *(_BYTE *)(v226 + 56) = 16;
          v367 = 0;
          v369 = v226;
          (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v204 + 24) + 40))(*(_QWORD *)(v204 + 24), &v369);
          v229 = v369;
          v369 = 0;
          if (v229)
          {
            v230 = *(std::__shared_weak_count **)(v229 + 32);
            if (v230)
            {
              v231 = (unint64_t *)&v230->__shared_owners_;
              do
                v232 = __ldaxr(v231);
              while (__stlxr(v232 - 1, v231));
              if (!v232)
              {
                ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
                std::__shared_weak_count::__release_weak(v230);
              }
            }
            v233 = *(std::__shared_weak_count **)(v229 + 16);
            if (v233)
            {
              v234 = (unint64_t *)&v233->__shared_owners_;
              do
                v235 = __ldaxr(v234);
              while (__stlxr(v235 - 1, v234));
              if (!v235)
              {
                ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
                std::__shared_weak_count::__release_weak(v233);
              }
            }
            MEMORY[0x212BC6398](v229, 0x10F0C40B62ED6C6);
            v236 = v367;
            v367 = 0;
            if (v236)
            {
              v237 = (std::__shared_weak_count *)*((_QWORD *)v236 + 4);
              if (v237)
              {
                v238 = (unint64_t *)&v237->__shared_owners_;
                do
                  v239 = __ldaxr(v238);
                while (__stlxr(v239 - 1, v238));
                if (!v239)
                {
                  ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
                  std::__shared_weak_count::__release_weak(v237);
                }
              }
              v240 = (std::__shared_weak_count *)*((_QWORD *)v236 + 2);
              if (v240)
              {
                v241 = (unint64_t *)&v240->__shared_owners_;
                do
                  v242 = __ldaxr(v241);
                while (__stlxr(v242 - 1, v241));
                if (!v242)
                {
                  ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
                  std::__shared_weak_count::__release_weak(v240);
                }
              }
              MEMORY[0x212BC6398](v236, 0x10F0C40B62ED6C6);
            }
          }
          v243 = *(std::__shared_weak_count **)&v373.f64[1];
          if (*(_QWORD *)&v373.f64[1])
          {
            v244 = (unint64_t *)(*(_QWORD *)&v373.f64[1] + 8);
            do
              v245 = __ldaxr(v244);
            while (__stlxr(v245 - 1, v244));
            if (!v245)
            {
              ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
              std::__shared_weak_count::__release_weak(v243);
            }
          }
          v246 = (std::__shared_weak_count *)__p[1];
          if (__p[1])
          {
            v247 = (unint64_t *)((char *)__p[1] + 8);
            do
              v248 = __ldaxr(v247);
            while (__stlxr(v248 - 1, v247));
            if (!v248)
            {
              ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
              std::__shared_weak_count::__release_weak(v246);
            }
          }
        }
        else
        {
          os_log_type_enabled(v217, OS_LOG_TYPE_ERROR);
          LOWORD(object) = 0;
          v249 = (void *)_os_log_send_and_compose_impl();
          if (v249)
            free(v249);
        }
        if (v202)
        {
          sub_20E8C003C((uint64_t)&v357, "IMU accel skewness factor contains NaNs.");
          sub_20E863570((uint64_t)&v357);
        }
        sub_20E863570((uint64_t)&v357);
        v63 = v365;
        if (!v365)
          return 0;
        v250 = (unint64_t *)&v365->__shared_owners_;
        do
          v65 = __ldaxr(v250);
        while (__stlxr(v65 - 1, v250));
        goto LABEL_117;
      }
    }
    memmove(v211, v209, v210);
    goto LABEL_325;
  }
  v173.f64[0] = *(float64_t *)(a1 + 8520);
  v174 = vabsq_f64(*(float64x2_t *)(a1 + 8168));
  v175 = vabsq_f64(*(float64x2_t *)(a1 + 8184));
  v176 = vabsq_f64(*(float64x2_t *)(a1 + 8200));
  v177 = vabsq_f64(*(float64x2_t *)(a1 + 8216));
  v178 = vabsq_f64(*(float64x2_t *)(a1 + 8232));
  v179 = vabsq_f64(*(float64x2_t *)(a1 + 8248));
  v180 = vabsq_f64(*(float64x2_t *)(a1 + 8264));
  v181 = vabsq_f64(*(float64x2_t *)(a1 + 8280));
  v182 = vabsq_f64(*(float64x2_t *)(a1 + 8296));
  v183 = vabsq_f64(*(float64x2_t *)(a1 + 8312));
  v184 = vabsq_f64(*(float64x2_t *)(a1 + 8328));
  v185 = vabsq_f64(*(float64x2_t *)(a1 + 8344));
  v186 = vabsq_f64(*(float64x2_t *)(a1 + 8360));
  v187 = vabsq_f64(*(float64x2_t *)(a1 + 8376));
  v188 = vabsq_f64(*(float64x2_t *)(a1 + 8392));
  v189 = vabsq_f64(*(float64x2_t *)(a1 + 8408));
  v190 = vabsq_f64(*(float64x2_t *)(a1 + 8424));
  v191 = vabsq_f64(*(float64x2_t *)(a1 + 8440));
  v192 = vabsq_f64(*(float64x2_t *)(a1 + 8456));
  v193 = vabsq_f64(*(float64x2_t *)(a1 + 8472));
  v194 = vabsq_f64(*(float64x2_t *)(a1 + 8504));
  v392 = vabsq_f64(*(float64x2_t *)(a1 + 8488));
  v393 = v194;
  v390 = v192;
  v391 = v193;
  v388 = v190;
  v389 = v191;
  v387 = v189;
  v386 = v188;
  v385 = v187;
  v384 = v186;
  v383 = v185;
  v382 = v184;
  v381 = v183;
  v380 = v182;
  v379 = v181;
  v378 = v180;
  v377 = v179;
  v376 = v178;
  v375 = v177;
  v374 = v176;
  v373 = v175;
  *(float64x2_t *)__p = v174;
  v394 = *(_OWORD *)&vabsq_f64(v173);
  v395 = 0x46293E5939A08CEALL;
  if (sub_20FB4DEBC((double *)&object))
  {
    sub_20F9B2A4C(&v366);
    if (**(int **)(v366 + 56) <= 5)
    {
      v195 = *(unsigned __int8 *)(v366 + 72);
      v196 = sub_20E8C31DC(v366, "OSLogSurrogateAppender", 1, 0);
      v197 = v196 ? v196 + 16 : 0;
      if (v195 || v196)
      {
        v357 = &v366;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v359 = std::chrono::system_clock::now().__d_.__rep_;
        v360 = 5;
        v361 = "unknown file";
        v362 = 587;
        v364 = 0;
        v365 = 0;
        v363 = "unknown function";
        v198 = *v357;
        v199 = (uint64_t *)(*v357 + 16);
        if (*(char *)(*v357 + 39) < 0)
        {
          v201 = *(char **)(v198 + 16);
          v200 = *(_QWORD *)(v198 + 24);
        }
        else
        {
          v200 = *(unsigned __int8 *)(*v357 + 39);
          v201 = (char *)(*v357 + 16);
        }
        v367 = v201;
        v368 = v200;
        v251 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v251 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)&object);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
          if (LOBYTE(v373.f64[0]) && SHIBYTE(__p[1]) < 0)
            operator delete(object);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        v252 = byte_254A4A4F8[23];
        if (byte_254A4A4F8[23] >= 0)
        {
          v253 = byte_254A4A4F8;
        }
        else
        {
          v252 = *(_QWORD *)&byte_254A4A4F8[8];
          v253 = *(const char **)byte_254A4A4F8;
        }
        v369 = (uint64_t)v253;
        v370 = v252;
        object = os_log_create(v253, v367);
        sub_20E86E5A8(__p, (uint64_t)&v369);
        sub_20E86E5A8(&v374, (uint64_t)&v367);
        v254 = object;
        sub_20E86E44C((uint64_t)&object);
        sub_20FB4E638(v197, v199, v254, OS_LOG_TYPE_ERROR);
        if (v195)
        {
          sub_20E8C003C((uint64_t)&v357, "IMU accel skewness factor reaches high magnitudes.");
          sub_20E863570((uint64_t)&v357);
        }
        sub_20E863714((uint64_t)&v357);
      }
    }
  }
LABEL_399:
  if (!*(_BYTE *)(a2[8] + 20))
    goto LABEL_463;
  if (!sub_20FB4DB84((_QWORD *)(a1 + 8528)))
  {
    sub_20F9B2A4C(&v369);
    if (**(int **)(v369 + 56) > 5)
      return 0;
    v284 = *(unsigned __int8 *)(v369 + 72);
    v285 = sub_20E8C31DC(v369, "OSLogSurrogateAppender", 1, 0);
    v286 = v285 ? v285 + 16 : 0;
    if (!v284 && !v285)
      return 0;
    v357 = &v369;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v359 = std::chrono::system_clock::now().__d_.__rep_;
    v360 = 5;
    v361 = "unknown file";
    v362 = 593;
    v364 = 0;
    v365 = 0;
    v363 = "unknown function";
    v287 = *v357;
    v288 = (uint64_t *)(*v357 + 16);
    if (*(char *)(*v357 + 39) < 0)
    {
      v290 = *(const char **)(v287 + 16);
      v289 = *(_QWORD *)(v287 + 24);
    }
    else
    {
      v289 = *(unsigned __int8 *)(*v357 + 39);
      v290 = (const char *)(*v357 + 16);
    }
    v291 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v291 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
      if (LOBYTE(v373.f64[0]) && SHIBYTE(__p[1]) < 0)
        operator delete(object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v292 = byte_254A4A4F8;
    else
      v292 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v293 = byte_254A4A4F8[23];
    else
      v293 = *(_QWORD *)&byte_254A4A4F8[8];
    object = os_log_create(v292, v290);
    v294 = __p;
    if (v293 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v293 >= 0x17)
    {
      v295 = (v293 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v293 | 7) != 0x17)
        v295 = v293 | 7;
      v296 = v295 + 1;
      v294 = operator new(v295 + 1);
      __p[0] = v294;
      __p[1] = (void *)v293;
      *(_QWORD *)&v373.f64[0] = v296 | 0x8000000000000000;
    }
    else
    {
      HIBYTE(v373.f64[0]) = v293;
      if (!v293)
      {
LABEL_434:
        *((_BYTE *)v294 + v293) = 0;
        LOBYTE(v373.f64[1]) = 1;
        v297 = &v374;
        if (v289 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v289 >= 0x17)
        {
          v298 = (v289 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v289 | 7) != 0x17)
            v298 = v289 | 7;
          v299 = v298 + 1;
          v297 = operator new(v298 + 1);
          *(_QWORD *)&v374.f64[1] = v289;
          *(_QWORD *)&v375.f64[0] = v299 | 0x8000000000000000;
          *(_QWORD *)&v374.f64[0] = v297;
        }
        else
        {
          HIBYTE(v375.f64[0]) = v289;
          if (!v289)
            goto LABEL_442;
        }
        memmove(v297, v290, v289);
LABEL_442:
        *((_BYTE *)v297 + v289) = 0;
        LOBYTE(v375.f64[1]) = 1;
        v300 = object;
        if (SHIBYTE(v375.f64[0]) < 0)
          operator delete(*(void **)&v374.f64[0]);
        if (LOBYTE(v373.f64[1]) && SHIBYTE(v373.f64[0]) < 0)
          operator delete(__p[0]);
        if (object)
          os_release(object);
        sub_20FB4EA24(v286, v288, v300, OS_LOG_TYPE_ERROR);
        if (v284)
        {
          sub_20E8C003C((uint64_t)&v357, "IMU gyro scale factor contains NaNs.");
          sub_20E863570((uint64_t)&v357);
        }
        sub_20E863570((uint64_t)&v357);
        v63 = v365;
        if (!v365)
          return 0;
        v301 = (unint64_t *)&v365->__shared_owners_;
        do
          v65 = __ldaxr(v301);
        while (__stlxr(v65 - 1, v301));
        goto LABEL_117;
      }
    }
    memmove(v294, v292, v293);
    goto LABEL_434;
  }
  v255.f64[0] = *(float64_t *)(a1 + 8880);
  v256 = vabsq_f64(*(float64x2_t *)(a1 + 8528));
  v257 = vabsq_f64(*(float64x2_t *)(a1 + 8544));
  v258 = vabsq_f64(*(float64x2_t *)(a1 + 8560));
  v259 = vabsq_f64(*(float64x2_t *)(a1 + 8576));
  v260 = vabsq_f64(*(float64x2_t *)(a1 + 8592));
  v261 = vabsq_f64(*(float64x2_t *)(a1 + 8608));
  v262 = vabsq_f64(*(float64x2_t *)(a1 + 8624));
  v263 = vabsq_f64(*(float64x2_t *)(a1 + 8640));
  v264 = vabsq_f64(*(float64x2_t *)(a1 + 8656));
  v265 = vabsq_f64(*(float64x2_t *)(a1 + 8672));
  v266 = vabsq_f64(*(float64x2_t *)(a1 + 8688));
  v267 = vabsq_f64(*(float64x2_t *)(a1 + 8704));
  v268 = vabsq_f64(*(float64x2_t *)(a1 + 8720));
  v269 = vabsq_f64(*(float64x2_t *)(a1 + 8736));
  v270 = vabsq_f64(*(float64x2_t *)(a1 + 8752));
  v271 = vabsq_f64(*(float64x2_t *)(a1 + 8768));
  v272 = vabsq_f64(*(float64x2_t *)(a1 + 8784));
  v273 = vabsq_f64(*(float64x2_t *)(a1 + 8800));
  v274 = vabsq_f64(*(float64x2_t *)(a1 + 8816));
  v275 = vabsq_f64(*(float64x2_t *)(a1 + 8832));
  v276 = vabsq_f64(*(float64x2_t *)(a1 + 8864));
  v392 = vabsq_f64(*(float64x2_t *)(a1 + 8848));
  v393 = v276;
  v390 = v274;
  v391 = v275;
  v388 = v272;
  v389 = v273;
  v387 = v271;
  v386 = v270;
  v385 = v269;
  v384 = v268;
  v383 = v267;
  v382 = v266;
  v381 = v265;
  v380 = v264;
  v379 = v263;
  v378 = v262;
  v377 = v261;
  v376 = v260;
  v375 = v259;
  v374 = v258;
  v373 = v257;
  *(float64x2_t *)__p = v256;
  v394 = *(_OWORD *)&vabsq_f64(v255);
  v395 = 0x46293E5939A08CEALL;
  if (sub_20FB4DEBC((double *)&object))
  {
    sub_20F9B2A4C(&v366);
    if (**(int **)(v366 + 56) <= 5)
    {
      v277 = *(unsigned __int8 *)(v366 + 72);
      v278 = sub_20E8C31DC(v366, "OSLogSurrogateAppender", 1, 0);
      v279 = v278 ? v278 + 16 : 0;
      if (v277 || v278)
      {
        v357 = &v366;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v359 = std::chrono::system_clock::now().__d_.__rep_;
        v360 = 5;
        v361 = "unknown file";
        v362 = 597;
        v364 = 0;
        v365 = 0;
        v363 = "unknown function";
        v280 = *v357;
        v281 = (uint64_t *)(*v357 + 16);
        if (*(char *)(*v357 + 39) < 0)
        {
          v283 = *(char **)(v280 + 16);
          v282 = *(_QWORD *)(v280 + 24);
        }
        else
        {
          v282 = *(unsigned __int8 *)(*v357 + 39);
          v283 = (char *)(*v357 + 16);
        }
        v367 = v283;
        v368 = v282;
        v302 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v302 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)&object);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
          if (LOBYTE(v373.f64[0]) && SHIBYTE(__p[1]) < 0)
            operator delete(object);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        v303 = byte_254A4A4F8[23];
        if (byte_254A4A4F8[23] >= 0)
        {
          v304 = byte_254A4A4F8;
        }
        else
        {
          v303 = *(_QWORD *)&byte_254A4A4F8[8];
          v304 = *(const char **)byte_254A4A4F8;
        }
        v369 = (uint64_t)v304;
        v370 = v303;
        object = os_log_create(v304, v367);
        sub_20E86E5A8(__p, (uint64_t)&v369);
        sub_20E86E5A8(&v374, (uint64_t)&v367);
        v305 = object;
        sub_20E86E44C((uint64_t)&object);
        sub_20FB4EE10(v279, v281, v305, OS_LOG_TYPE_ERROR);
        if (v277)
        {
          sub_20E8C003C((uint64_t)&v357, "IMU gyro scale factor reaches high magnitudes.");
          sub_20E863570((uint64_t)&v357);
        }
        sub_20E863714((uint64_t)&v357);
      }
    }
  }
LABEL_463:
  if (*(_BYTE *)(a2[9] + 20))
  {
    v306 = (float64x2_t *)(a1 + 8888);
    if (sub_20FB4DB84(v306))
    {
      v307.f64[0] = v306[22].f64[0];
      v308 = vabsq_f64(*v306);
      v309 = vabsq_f64(v306[1]);
      v310 = vabsq_f64(v306[2]);
      v311 = vabsq_f64(v306[3]);
      v312 = vabsq_f64(v306[4]);
      v313 = vabsq_f64(v306[5]);
      v314 = vabsq_f64(v306[6]);
      v315 = vabsq_f64(v306[7]);
      v316 = vabsq_f64(v306[8]);
      v317 = vabsq_f64(v306[9]);
      v318 = vabsq_f64(v306[10]);
      v319 = vabsq_f64(v306[11]);
      v320 = vabsq_f64(v306[12]);
      v321 = vabsq_f64(v306[13]);
      v322 = vabsq_f64(v306[14]);
      v323 = vabsq_f64(v306[15]);
      v324 = vabsq_f64(v306[16]);
      v325 = vabsq_f64(v306[17]);
      v326 = vabsq_f64(v306[18]);
      v327 = vabsq_f64(v306[19]);
      v328 = vabsq_f64(v306[21]);
      v392 = vabsq_f64(v306[20]);
      v393 = v328;
      v390 = v326;
      v391 = v327;
      v388 = v324;
      v389 = v325;
      v387 = v323;
      v386 = v322;
      v385 = v321;
      v384 = v320;
      v383 = v319;
      v382 = v318;
      v381 = v317;
      v380 = v316;
      v379 = v315;
      v378 = v314;
      v377 = v313;
      v376 = v312;
      v375 = v311;
      v374 = v310;
      v373 = v309;
      *(float64x2_t *)__p = v308;
      v394 = *(_OWORD *)&vabsq_f64(v307);
      v395 = 0x46293E5939A08CEALL;
      if (sub_20FB4DEBC((double *)&object))
      {
        sub_20F9B2A4C(&v366);
        if (**(int **)(v366 + 56) <= 5)
        {
          v329 = *(unsigned __int8 *)(v366 + 72);
          v330 = sub_20E8C31DC(v366, "OSLogSurrogateAppender", 1, 0);
          v331 = v330 ? v330 + 16 : 0;
          if (v329 || v330)
          {
            v357 = &v366;
            rep = std::chrono::steady_clock::now().__d_.__rep_;
            v359 = std::chrono::system_clock::now().__d_.__rep_;
            v360 = 5;
            v361 = "unknown file";
            v362 = 607;
            v364 = 0;
            v365 = 0;
            v363 = "unknown function";
            v332 = (uint64_t *)(v366 + 16);
            if (*(char *)(v366 + 39) < 0)
            {
              v334 = *(char **)(v366 + 16);
              v333 = *(_QWORD *)(v366 + 24);
            }
            else
            {
              v333 = *(unsigned __int8 *)(v366 + 39);
              v334 = (char *)(v366 + 16);
            }
            v367 = v334;
            v368 = v333;
            v346 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v346 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)&object);
              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
              if (LOBYTE(v373.f64[0]) && SHIBYTE(__p[1]) < 0)
                operator delete(object);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
            }
            v347 = byte_254A4A4F8[23];
            if (byte_254A4A4F8[23] >= 0)
            {
              v348 = byte_254A4A4F8;
            }
            else
            {
              v347 = *(_QWORD *)&byte_254A4A4F8[8];
              v348 = *(const char **)byte_254A4A4F8;
            }
            v369 = (uint64_t)v348;
            v370 = v347;
            object = os_log_create(v348, v367);
            sub_20E86E5A8(__p, (uint64_t)&v369);
            sub_20E86E5A8(&v374, (uint64_t)&v367);
            v349 = object;
            sub_20E86E44C((uint64_t)&object);
            sub_20FB4F5E8(v331, v332, v349, OS_LOG_TYPE_ERROR);
            if (v329)
            {
              sub_20E8C003C((uint64_t)&v357, "IMU gyro skewness factor reaches high magnitudes.");
              sub_20E863570((uint64_t)&v357);
            }
            sub_20E863714((uint64_t)&v357);
          }
        }
      }
      return 1;
    }
    sub_20F9B2A4C(&v366);
    if (**(int **)(v366 + 56) <= 5)
    {
      v335 = *(unsigned __int8 *)(v366 + 72);
      v336 = sub_20E8C31DC(v366, "OSLogSurrogateAppender", 1, 0);
      v337 = v336 ? v336 + 16 : 0;
      if (v335 || v336)
      {
        v357 = &v366;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v359 = std::chrono::system_clock::now().__d_.__rep_;
        v360 = 5;
        v361 = "unknown file";
        v362 = 603;
        v364 = 0;
        v365 = 0;
        v363 = "unknown function";
        v338 = (uint64_t *)(v366 + 16);
        if (*(char *)(v366 + 39) < 0)
        {
          v340 = *(char **)(v366 + 16);
          v339 = *(_QWORD *)(v366 + 24);
        }
        else
        {
          v339 = *(unsigned __int8 *)(v366 + 39);
          v340 = (char *)(v366 + 16);
        }
        v367 = v340;
        v368 = v339;
        v341 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v341 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)&object);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
          if (LOBYTE(v373.f64[0]) && SHIBYTE(__p[1]) < 0)
            operator delete(object);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        v342 = byte_254A4A4F8[23];
        if (byte_254A4A4F8[23] >= 0)
        {
          v343 = byte_254A4A4F8;
        }
        else
        {
          v342 = *(_QWORD *)&byte_254A4A4F8[8];
          v343 = *(const char **)byte_254A4A4F8;
        }
        v369 = (uint64_t)v343;
        v370 = v342;
        object = os_log_create(v343, v367);
        sub_20E86E5A8(__p, (uint64_t)&v369);
        sub_20E86E5A8(&v374, (uint64_t)&v367);
        v344 = object;
        sub_20E86E44C((uint64_t)&object);
        sub_20FB4F1FC(v337, v338, v344, OS_LOG_TYPE_ERROR);
        if (v335)
        {
          sub_20E8C003C((uint64_t)&v357, "IMU gyro skewness factor contains NaNs.");
          sub_20E863570((uint64_t)&v357);
        }
        sub_20E863714((uint64_t)&v357);
      }
    }
    return 0;
  }
  return 1;
}

void sub_20FB4BEAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  if (a35)
  {
    if (a34 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_20FB4BF34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,void *object,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FB4C3FC(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20FB4C78C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FB4C7B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FB4C7C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20FB4C7E8(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20FB4CB78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FB4CB9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FB4CBB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20FB4CBD4(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20FB4CF64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FB4CF88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FB4CF9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20FB4CFC0(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20FB4D350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FB4D374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FB4D388(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20FB4D3AC(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20FB4D73C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FB4D760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FB4D774(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20FB4D798(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20FB4DB28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FB4DB4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FB4DB60(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

BOOL sub_20FB4DB84(_QWORD *a1)
{
  return (*a1 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (a1[1] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (a1[2] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (a1[3] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (a1[4] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (a1[5] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (a1[6] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (a1[7] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (a1[8] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (a1[9] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (a1[10] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (a1[11] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (a1[12] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (a1[13] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (a1[14] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (a1[15] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (a1[16] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (a1[17] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (a1[18] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (a1[19] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (a1[20] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (a1[21] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (a1[22] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (a1[23] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (a1[24] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (a1[25] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (a1[26] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (a1[27] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (a1[28] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (a1[29] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (a1[30] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (a1[31] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (a1[32] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (a1[33] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (a1[34] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (a1[35] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (a1[36] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (a1[37] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (a1[38] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (a1[39] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (a1[40] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (a1[41] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (a1[42] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (a1[43] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (a1[44] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
}

BOOL sub_20FB4DEBC(double *a1)
{
  double v1;

  v1 = a1[46];
  if (a1[1] > v1)
    return 1;
  if (a1[2] > v1)
    return 1;
  if (a1[3] > v1)
    return 1;
  if (a1[4] > v1)
    return 1;
  if (a1[5] > v1)
    return 1;
  if (a1[6] > v1)
    return 1;
  if (a1[7] > v1)
    return 1;
  if (a1[8] > v1)
    return 1;
  if (a1[9] > v1)
    return 1;
  if (a1[10] > v1)
    return 1;
  if (a1[11] > v1)
    return 1;
  if (a1[12] > v1)
    return 1;
  if (a1[13] > v1)
    return 1;
  if (a1[14] > v1)
    return 1;
  if (a1[15] > v1)
    return 1;
  if (a1[16] > v1)
    return 1;
  if (a1[17] > v1)
    return 1;
  if (a1[18] > v1)
    return 1;
  if (a1[19] > v1)
    return 1;
  if (a1[20] > v1)
    return 1;
  if (a1[21] > v1)
    return 1;
  if (a1[22] > v1)
    return 1;
  if (a1[23] > v1)
    return 1;
  if (a1[24] > v1)
    return 1;
  if (a1[25] > v1)
    return 1;
  if (a1[26] > v1)
    return 1;
  if (a1[27] > v1)
    return 1;
  if (a1[28] > v1)
    return 1;
  if (a1[29] > v1)
    return 1;
  if (a1[30] > v1)
    return 1;
  if (a1[31] > v1)
    return 1;
  if (a1[32] > v1)
    return 1;
  if (a1[33] > v1)
    return 1;
  if (a1[34] > v1)
    return 1;
  if (a1[35] > v1)
    return 1;
  if (a1[36] > v1)
    return 1;
  if (a1[37] > v1)
    return 1;
  if (a1[38] > v1)
    return 1;
  if (a1[39] > v1)
    return 1;
  if (a1[40] > v1)
    return 1;
  if (a1[41] > v1)
    return 1;
  if (a1[42] > v1)
    return 1;
  if (a1[43] > v1)
    return 1;
  if (a1[44] <= v1)
    return a1[45] > v1;
  return 1;
}

void sub_20FB4E24C(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20FB4E5DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FB4E600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FB4E614(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20FB4E638(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20FB4E9C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FB4E9EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FB4EA00(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20FB4EA24(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20FB4EDB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FB4EDD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FB4EDEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20FB4EE10(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20FB4F1A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FB4F1C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FB4F1D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20FB4F1FC(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20FB4F58C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FB4F5B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FB4F5C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20FB4F5E8(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20FB4F978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FB4F99C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FB4F9B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

unint64_t sub_20FB4F9D4(_DWORD *a1, uint64_t a2, _DWORD *a3)
{
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  char *v15;
  int64_t v16;
  unint64_t v17;
  unsigned int *v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  _DWORD *v27;
  _DWORD *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v33;
  _OWORD v34[16];

  v33 = a2;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  memset(v34, 0, 240);
  do
  {
    if (v4 < v7)
    {
      *(_DWORD *)v4 = v6;
      v9 = (uint64_t)(v4 + 4);
      goto LABEL_3;
    }
    v10 = (v4 - v8) >> 2;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 62)
      sub_20E867F44();
    if ((v7 - v8) >> 1 > v11)
      v11 = (v7 - v8) >> 1;
    if ((unint64_t)(v7 - v8) >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
    {
      if (v12 >> 62)
        sub_20E877A38();
      v13 = v12;
      v14 = operator new(4 * v12);
      v12 = v13;
      v15 = &v14[4 * v10];
      *(_DWORD *)v15 = v6;
      v9 = (uint64_t)(v15 + 4);
      v16 = v4 - v8;
      if (v4 == v8)
        goto LABEL_19;
    }
    else
    {
      v14 = 0;
      v15 = (char *)(4 * v10);
      *(_DWORD *)(4 * v10) = v6;
      v9 = 4 * v10 + 4;
      v16 = v4 - v8;
      if (v4 == v8)
        goto LABEL_19;
    }
    v17 = v16 - 4;
    if (v17 >= 0xBC)
    {
      v20 = (v4 - 4 - v8) & 0xFFFFFFFFFFFFFFFCLL;
      if (&v14[v4 - v8 - 4 - v20] > &v14[v4 - v8 - 4])
      {
        v18 = (unsigned int *)v4;
      }
      else if (&v4[-v20 - 4] > v4 - 4)
      {
        v18 = (unsigned int *)v4;
      }
      else if ((unint64_t)(v8 - v14) >= 0x20)
      {
        v21 = (v17 >> 2) + 1;
        v22 = 4 * (v21 & 0x7FFFFFFFFFFFFFF8);
        v18 = (unsigned int *)&v4[-v22];
        v15 -= v22;
        v23 = &v14[4 * v10 - 16];
        v24 = v4 - 16;
        v25 = v21 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v26 = *(_OWORD *)v24;
          *(v23 - 1) = *((_OWORD *)v24 - 1);
          *v23 = v26;
          v23 -= 2;
          v24 -= 32;
          v25 -= 8;
        }
        while (v25);
        if (v21 == (v21 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_19;
      }
      else
      {
        v18 = (unsigned int *)v4;
      }
    }
    else
    {
      v18 = (unsigned int *)v4;
    }
    do
    {
      v19 = *--v18;
      *((_DWORD *)v15 - 1) = v19;
      v15 -= 4;
    }
    while (v18 != (unsigned int *)v8);
LABEL_19:
    v7 = &v14[4 * v12];
    if (v8)
      operator delete(v8);
    v8 = v15;
    a2 = v33;
LABEL_3:
    v6 += a3[v5] * ((*(_QWORD *)(a2 + 24 * v5 + 8) - *(_QWORD *)(a2 + 24 * v5)) >> 2);
    ++v5;
    v4 = (char *)v9;
  }
  while (v5 != 10);
  v27 = *(_DWORD **)a2;
  v28 = *(_DWORD **)(a2 + 8);
  if (*(_DWORD **)a2 == v28)
  {
LABEL_36:
    v29 = -1;
    v30 = 0xFFFFFFFFLL;
  }
  else
  {
    v29 = 0;
    v30 = *(unsigned int *)v8;
    while (*v27 != *a1)
    {
      v30 = (v30 + *a3);
      ++v27;
      ++v29;
      if (v27 == v28)
        goto LABEL_36;
    }
  }
  operator delete(v8);
  sub_20F89E908((uint64_t)v34);
  return v29 | (unint64_t)(v30 << 32);
}

void sub_20FB4FC84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  void *v15;

  if (v15)
    operator delete(v15);
  sub_20F89E908((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_20FB4FCBC(unsigned int *a1, uint64_t a2)
{
  double *v4;
  uint64_t v5;
  const double *v6;
  const double *v7;
  uint64_t v8;
  double *v9;
  int v10;
  int v11;
  size_t v12;
  void *v13;
  int v14;
  int v15;
  size_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  size_t v22;
  double *v23;
  void *__src[2];
  int v25;
  int v26;

  v4 = (double *)*((_QWORD *)a1 + 2);
  v5 = a1[6];
  v6 = &v4[-v5];
  v7 = *(const double **)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  if (v7 == v6 || (v9 = *(double **)(v8 + 16), &v9[-*(unsigned int *)(v8 + 24)] == v6))
  {
    v11 = *(_DWORD *)(v8 + 4);
    v12 = (8 * (6 * v11) + 31) & 0xFFFFFFFE0;
    __src[1] = (void *)(v12 >> 3);
    __src[0] = operator new(v12, (std::align_val_t)0x20uLL);
    v25 = 6;
    v26 = v11;
    sub_20FB4FE84((uint64_t)__src, a2);
    v13 = __src[0];
    if (v25)
    {
      v14 = v26;
      if (v26)
      {
        v15 = 0;
        v16 = 8 * v25;
        v17 = 8 * v25;
        v18 = (char *)__src[0];
        do
        {
          memmove((void *)(*((_QWORD *)a1 + 2) - 8 * a1[6] + 8 * (a1[6] + a1[2] * v15++)), v18, v16);
          v18 += v17;
        }
        while (v14 != v15);
      }
    }
    if (v13)
      MEMORY[0x212BC6368](v13, 0x1000C8000313F17);
  }
  else
  {
    v10 = *(_DWORD *)(v8 + 4);
    if (v10 * *(_DWORD *)v8)
    {
      sub_20E8BE654(0, 0, 6, v10, 6, v7, 6, v9, *(double *)(a2 + 24), 0.0, *(_DWORD *)(v8 + 8), v4, a1[2]);
    }
    else
    {
      v19 = *a1;
      if ((_DWORD)v19)
      {
        v20 = a1[1];
        if ((_DWORD)v20)
        {
          v21 = a1[2];
          v22 = 8 * v19;
          v23 = &v4[-v5];
          do
          {
            bzero(&v23[v5], v22);
            LODWORD(v5) = v5 + v21;
            --v20;
          }
          while (v20);
        }
      }
    }
  }
}

void sub_20FB4FE5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    MEMORY[0x212BC6368](a12, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

void sub_20FB4FE84(uint64_t a1, uint64_t a2)
{
  double *v4;
  const double *v5;
  uint64_t v6;
  double *v7;
  int v8;
  int v9;
  size_t v10;
  double *v11;
  size_t v12;
  int v13;
  void *v14;
  size_t v15;
  uint64_t v16;

  v4 = *(double **)a1;
  v5 = *(const double **)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  if (v5 == v4 || (v7 = *(double **)(v6 + 16), &v7[-*(unsigned int *)(v6 + 24)] == v4))
  {
    v9 = *(_DWORD *)(v6 + 4);
    v10 = (8 * (6 * v9) + 31) & 0xFFFFFFFE0;
    v15 = v10 >> 3;
    v14 = operator new(v10, (std::align_val_t)0x20uLL);
    LODWORD(v16) = 6;
    HIDWORD(v16) = v9;
    sub_20FB4FE84(&v14, a2);
    v11 = *(double **)a1;
    v12 = v15;
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v12;
    *(_QWORD *)(a1 + 16) = v16;
    if (v11)
      MEMORY[0x212BC6368](v11, 0x1000C8000313F17);
  }
  else
  {
    v8 = *(_DWORD *)(v6 + 4);
    if (v8 * *(_DWORD *)v6)
    {
      sub_20E8BE654(0, 0, 6, v8, 6, v5, 6, v7, *(double *)(a2 + 24), 0.0, *(_DWORD *)(v6 + 8), v4, *(_DWORD *)(a1 + 16));
    }
    else
    {
      v13 = *(_DWORD *)(a1 + 20);
      if (v13 * *(_DWORD *)(a1 + 16))
        bzero(v4, 8 * (v13 * *(_DWORD *)(a1 + 16)));
    }
  }
}

void sub_20FB4FFBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    MEMORY[0x212BC6368](a12, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

void sub_20FB4FFE4(unsigned int *a1, uint64_t a2)
{
  uint64_t v4;
  double *v5;
  uint64_t v6;
  const double *v7;
  const double *v8;
  double *v9;
  int v10;
  int v11;
  size_t v12;
  void *v13;
  int v14;
  int v15;
  size_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  size_t v22;
  double *v23;
  void *__src[2];
  int v25;
  int v26;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = (double *)*((_QWORD *)a1 + 2);
  v6 = a1[6];
  v7 = &v5[-v6];
  v8 = *(const double **)(v4 + 16);
  if (&v8[-*(unsigned int *)(v4 + 24)] == v7 || (v9 = **(double ***)(a2 + 16), v9 == v7))
  {
    v11 = *(_DWORD *)v4;
    v12 = (8 * (6 * *(_DWORD *)v4) + 31) & 0xFFFFFFFE0;
    __src[1] = (void *)(v12 >> 3);
    __src[0] = operator new(v12, (std::align_val_t)0x20uLL);
    v25 = v11;
    v26 = 6;
    sub_20FB501B0((uint64_t)__src, a2);
    v13 = __src[0];
    if (v25)
    {
      v14 = v26;
      if (v26)
      {
        v15 = 0;
        v16 = 8 * v25;
        v17 = 8 * v25;
        v18 = (char *)__src[0];
        do
        {
          memmove((void *)(*((_QWORD *)a1 + 2) - 8 * a1[6] + 8 * (a1[6] + a1[2] * v15++)), v18, v16);
          v18 += v17;
        }
        while (v14 != v15);
      }
    }
    if (v13)
      MEMORY[0x212BC6368](v13, 0x1000C8000313F17);
  }
  else
  {
    v10 = *(_DWORD *)(v4 + 4);
    if (v10 * *(_DWORD *)v4)
    {
      sub_20E8BE654(0, 1, *(_DWORD *)v4, 6, v10, v8, *(_DWORD *)(v4 + 8), v9, *(double *)(a2 + 24), 0.0, 6, v5, a1[2]);
    }
    else
    {
      v19 = *a1;
      if ((_DWORD)v19)
      {
        v20 = a1[1];
        if ((_DWORD)v20)
        {
          v21 = a1[2];
          v22 = 8 * v19;
          v23 = &v5[-v6];
          do
          {
            bzero(&v23[v6], v22);
            LODWORD(v6) = v6 + v21;
            --v20;
          }
          while (v20);
        }
      }
    }
  }
}

void sub_20FB50188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    MEMORY[0x212BC6368](a12, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

void sub_20FB501B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double *v5;
  const double *v6;
  double *v7;
  int v8;
  unsigned int v9;
  size_t v10;
  double *v11;
  size_t v12;
  int v13;
  void *v14;
  size_t v15;
  uint64_t v16;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(double **)a1;
  v6 = *(const double **)(v4 + 16);
  if (&v6[-*(unsigned int *)(v4 + 24)] == v5 || (v7 = **(double ***)(a2 + 16), v7 == v5))
  {
    v9 = *(_DWORD *)v4;
    v10 = (8 * (6 * *(_DWORD *)v4) + 31) & 0xFFFFFFFE0;
    v15 = v10 >> 3;
    v14 = operator new(v10, (std::align_val_t)0x20uLL);
    v16 = v9 | 0x600000000;
    sub_20FB501B0(&v14, a2);
    v11 = *(double **)a1;
    v12 = v15;
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v12;
    *(_QWORD *)(a1 + 16) = v16;
    if (v11)
      MEMORY[0x212BC6368](v11, 0x1000C8000313F17);
  }
  else
  {
    v8 = *(_DWORD *)(v4 + 4);
    if (v8 * *(_DWORD *)v4)
    {
      sub_20E8BE654(0, 1, *(_DWORD *)v4, 6, v8, v6, *(_DWORD *)(v4 + 8), v7, *(double *)(a2 + 24), 0.0, 6, v5, *(_DWORD *)(a1 + 16));
    }
    else
    {
      v13 = *(_DWORD *)(a1 + 20);
      if (v13 * *(_DWORD *)(a1 + 16))
        bzero(v5, 8 * (v13 * *(_DWORD *)(a1 + 16)));
    }
  }
}

void sub_20FB502EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    MEMORY[0x212BC6368](a12, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

void sub_20FB50314(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  void *v18;
  size_t v19;
  void *v20;
  size_t v21;
  int v22;

  v4 = *(_QWORD *)(a2 + 16);
  if (*(_QWORD *)v4 == *(_QWORD *)a1)
  {
    v16 = *(unsigned int *)(**(_QWORD **)(a2 + 8) + 16);
    v17 = (8 * v16 + 31) & 0xFFFFFFFE0;
    v21 = v17 >> 3;
    v20 = operator new(v17, (std::align_val_t)0x20uLL);
    v22 = v16;
    sub_20FB50314(&v20, a2);
    v18 = *(void **)a1;
    v19 = v21;
    *(_QWORD *)a1 = v20;
    *(_QWORD *)(a1 + 8) = v19;
    *(_DWORD *)(a1 + 16) = v22;
    if (v18)
      MEMORY[0x212BC6368](v18, 0x1000C8000313F17);
  }
  else
  {
    v5 = **(_QWORD **)(a2 + 8);
    v6 = *(_DWORD *)(v5 + 16);
    if (*(_DWORD *)(v5 + 20) * v6 && *(_DWORD *)(v4 + 16))
    {
      v7 = 8 * (*(_DWORD *)(v5 + 20) * v6);
      v8 = (char *)operator new((v7 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v14 = 0;
        if (v10 <= HIDWORD(v10))
          v14 = *(_QWORD *)(*(_QWORD *)v5 + 8 * (v10 + v6 * HIDWORD(v10)));
        *(_QWORD *)&v8[v9] = v14;
        v11 = (v10 + 1);
        v12 = v10 & 0xFFFFFFFF00000000;
        v13 = v12 | v11;
        v10 = v12 + 0x100000000;
        if (v6 > (int)v11)
          v10 = v13;
        v9 += 8;
        if (v7 == v9)
        {
          sub_20E8BE6CC();
          JUMPOUT(0x212BC6368);
        }
      }
    }
    v15 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v15)
      bzero(*(void **)a1, 8 * v15);
  }
}

void sub_20FB504EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6368](v1, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

unint64_t sub_20FB50520(_DWORD *a1, uint64_t a2, _DWORD *a3)
{
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  char *v15;
  int64_t v16;
  unint64_t v17;
  unsigned int *v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  _DWORD *v27;
  _DWORD *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v33;
  _OWORD v34[16];

  v33 = a2;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  memset(v34, 0, 240);
  do
  {
    if (v4 < v7)
    {
      *(_DWORD *)v4 = v6;
      v9 = (uint64_t)(v4 + 4);
      goto LABEL_3;
    }
    v10 = (v4 - v8) >> 2;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 62)
      sub_20E867F44();
    if ((v7 - v8) >> 1 > v11)
      v11 = (v7 - v8) >> 1;
    if ((unint64_t)(v7 - v8) >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
    {
      if (v12 >> 62)
        sub_20E877A38();
      v13 = v12;
      v14 = operator new(4 * v12);
      v12 = v13;
      v15 = &v14[4 * v10];
      *(_DWORD *)v15 = v6;
      v9 = (uint64_t)(v15 + 4);
      v16 = v4 - v8;
      if (v4 == v8)
        goto LABEL_19;
    }
    else
    {
      v14 = 0;
      v15 = (char *)(4 * v10);
      *(_DWORD *)(4 * v10) = v6;
      v9 = 4 * v10 + 4;
      v16 = v4 - v8;
      if (v4 == v8)
        goto LABEL_19;
    }
    v17 = v16 - 4;
    if (v17 >= 0xBC)
    {
      v20 = (v4 - 4 - v8) & 0xFFFFFFFFFFFFFFFCLL;
      if (&v14[v4 - v8 - 4 - v20] > &v14[v4 - v8 - 4])
      {
        v18 = (unsigned int *)v4;
      }
      else if (&v4[-v20 - 4] > v4 - 4)
      {
        v18 = (unsigned int *)v4;
      }
      else if ((unint64_t)(v8 - v14) >= 0x20)
      {
        v21 = (v17 >> 2) + 1;
        v22 = 4 * (v21 & 0x7FFFFFFFFFFFFFF8);
        v18 = (unsigned int *)&v4[-v22];
        v15 -= v22;
        v23 = &v14[4 * v10 - 16];
        v24 = v4 - 16;
        v25 = v21 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v26 = *(_OWORD *)v24;
          *(v23 - 1) = *((_OWORD *)v24 - 1);
          *v23 = v26;
          v23 -= 2;
          v24 -= 32;
          v25 -= 8;
        }
        while (v25);
        if (v21 == (v21 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_19;
      }
      else
      {
        v18 = (unsigned int *)v4;
      }
    }
    else
    {
      v18 = (unsigned int *)v4;
    }
    do
    {
      v19 = *--v18;
      *((_DWORD *)v15 - 1) = v19;
      v15 -= 4;
    }
    while (v18 != (unsigned int *)v8);
LABEL_19:
    v7 = &v14[4 * v12];
    if (v8)
      operator delete(v8);
    v8 = v15;
    a2 = v33;
LABEL_3:
    v6 += a3[v5] * ((*(_QWORD *)(a2 + 24 * v5 + 8) - *(_QWORD *)(a2 + 24 * v5)) >> 2);
    ++v5;
    v4 = (char *)v9;
  }
  while (v5 != 10);
  v27 = *(_DWORD **)a2;
  v28 = *(_DWORD **)(a2 + 8);
  if (*(_DWORD **)a2 == v28)
  {
LABEL_36:
    v29 = -1;
    v30 = 0xFFFFFFFFLL;
  }
  else
  {
    v29 = 0;
    v30 = *(unsigned int *)v8;
    while (*v27 != *a1)
    {
      v30 = (v30 + *a3);
      ++v27;
      ++v29;
      if (v27 == v28)
        goto LABEL_36;
    }
  }
  operator delete(v8);
  sub_20F89E908((uint64_t)v34);
  return v29 | (unint64_t)(v30 << 32);
}

void sub_20FB507D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  void *v15;

  if (v15)
    operator delete(v15);
  sub_20F89E908((uint64_t)&a15);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FB50808(uint64_t a1, _QWORD *a2)
{
  _OWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  const std::string::value_type *v9;
  std::string::size_type v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  const std::string::value_type *v23;
  std::string::size_type v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  const std::string::value_type *v29;
  std::string::size_type v30;
  std::string *v31;
  std::string::size_type size;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _OWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  void *v43;
  const std::string::value_type *v44;
  std::string::size_type v45;
  _OWORD *v46;
  const std::string::value_type *v47;
  std::string::size_type v48;
  _OWORD *v49;
  const std::string::value_type *v50;
  std::string::size_type v51;
  const std::string::value_type *v52;
  std::string::size_type v53;
  std::string *v54;
  std::string::size_type v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _OWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  const std::string::value_type *v65;
  std::string::size_type v66;
  void *v67;
  const std::string::value_type *v68;
  std::string::size_type v69;
  _OWORD *v70;
  const std::string::value_type *v71;
  std::string::size_type v72;
  _OWORD *v73;
  const std::string::value_type *v74;
  std::string::size_type v75;
  _OWORD *v76;
  const std::string::value_type *v77;
  std::string::size_type v78;
  _OWORD *v79;
  const std::string::value_type *v80;
  std::string::size_type v81;
  std::string *v82;
  std::string::size_type v83;
  _QWORD *v84;
  _BYTE *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  _QWORD *v123;
  _QWORD *v124;
  _OWORD *v125;
  uint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  _QWORD *v129;
  const std::string::value_type *v130;
  std::string::size_type v131;
  char *v132;
  const std::string::value_type *v133;
  std::string::size_type v134;
  std::string *v135;
  std::string::size_type v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  _QWORD *v175;
  _QWORD *v176;
  _OWORD *v177;
  uint64_t v178;
  _QWORD *v179;
  _QWORD *v180;
  _QWORD *v181;
  const std::string::value_type *v182;
  std::string::size_type v183;
  _OWORD *v184;
  const std::string::value_type *v185;
  std::string::size_type v186;
  std::string *v187;
  std::string::size_type v188;
  _QWORD *v189;
  _QWORD *v190;
  _QWORD *v191;
  _QWORD *v192;
  _OWORD *v193;
  uint64_t v194;
  _QWORD *v195;
  _QWORD *v196;
  _QWORD *v197;
  _OWORD *v198;
  const std::string::value_type *v199;
  std::string::size_type v200;
  char *v201;
  const std::string::value_type *v202;
  std::string::size_type v203;
  const std::string::value_type *v204;
  std::string::size_type v205;
  std::string *v206;
  std::string::size_type v207;
  _QWORD *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  _QWORD *v245;
  _QWORD *v246;
  _QWORD *v247;
  _OWORD *v248;
  uint64_t v249;
  _QWORD *v250;
  _QWORD *v251;
  _QWORD *v252;
  _OWORD *v253;
  const std::string::value_type *v254;
  std::string::size_type v255;
  const std::string::value_type *v256;
  std::string::size_type v257;
  std::string *v258;
  std::string::size_type v259;
  _QWORD *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  _QWORD *v297;
  _QWORD *v298;
  _QWORD *v299;
  _OWORD *v300;
  uint64_t v301;
  _QWORD *v302;
  _QWORD *v303;
  _QWORD *v304;
  void *v305;
  const std::string::value_type *v306;
  std::string::size_type v307;
  const std::string::value_type *v308;
  std::string::size_type v309;
  _OWORD *v310;
  const std::string::value_type *v311;
  std::string::size_type v312;
  _OWORD *v313;
  const std::string::value_type *v314;
  std::string::size_type v315;
  _OWORD *v316;
  const std::string::value_type *v317;
  std::string::size_type v318;
  _OWORD *v319;
  const std::string::value_type *v320;
  std::string::size_type v321;
  std::string *v322;
  std::string::size_type v323;
  _QWORD *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  _QWORD *v361;
  _QWORD *v362;
  _QWORD *v363;
  _OWORD *v364;
  uint64_t v365;
  _QWORD *v366;
  _QWORD *v367;
  _QWORD *v368;
  void *v369;
  const std::string::value_type *v370;
  std::string::size_type v371;
  const std::string::value_type *v372;
  std::string::size_type v373;
  _OWORD *v374;
  const std::string::value_type *v375;
  std::string::size_type v376;
  _OWORD *v377;
  const std::string::value_type *v378;
  std::string::size_type v379;
  _OWORD *v380;
  const std::string::value_type *v381;
  std::string::size_type v382;
  _OWORD *v383;
  const std::string::value_type *v384;
  std::string::size_type v385;
  std::string *v386;
  std::string::size_type v387;
  _QWORD *v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  _QWORD *v425;
  _QWORD *v426;
  _QWORD *v427;
  _OWORD *v428;
  uint64_t v429;
  _QWORD *v430;
  _QWORD *v431;
  _QWORD *v432;
  const std::string::value_type *v433;
  std::string::size_type v434;
  _OWORD *v435;
  const std::string::value_type *v436;
  std::string::size_type v437;
  _OWORD *v438;
  const std::string::value_type *v439;
  std::string::size_type v440;
  _OWORD *v441;
  const std::string::value_type *v442;
  std::string::size_type v443;
  _OWORD *v444;
  const std::string::value_type *v445;
  std::string::size_type v446;
  std::string *v447;
  std::string::size_type v448;
  _QWORD *v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  _QWORD *v486;
  _QWORD *v487;
  _QWORD *v488;
  _OWORD *v489;
  uint64_t v490;
  _QWORD *v491;
  _QWORD *v492;
  _QWORD *v493;
  _OWORD *v494;
  const std::string::value_type *v495;
  std::string::size_type v496;
  _OWORD *v497;
  const std::string::value_type *v498;
  std::string::size_type v499;
  _OWORD *v500;
  const std::string::value_type *v501;
  std::string::size_type v502;
  std::string *v503;
  std::string::size_type v504;
  _QWORD *v505;
  _QWORD *v506;
  _QWORD *v507;
  _QWORD *v508;
  _OWORD v510[3];
  _OWORD v511[2];
  __int128 v512;
  _BYTE v513[48];
  _BYTE v514[48];
  _OWORD v515[3];
  __int128 v516;
  _BYTE v517[96];
  _BYTE v518[112];
  _BYTE v519[96];
  _BYTE v520[80];
  __int128 v521;
  std::string v522;
  _OWORD v523[3];

  sub_20E86A980(a2, (uint64_t)"Variable stats:\n", 16);
  *(_QWORD *)&v523[0] = operator new(0x28uLL);
  *(_OWORD *)((char *)v523 + 8) = xmmword_2102DCA10;
  strcpy(*(char **)&v523[0], "cv3d::vio::VIOPoseVariable<double>]");
  sub_20E8D1238(v523, 34, 1uLL);
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v4 = v523;
  else
    v4 = *(_OWORD **)&v523[0];
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v5 = BYTE7(v523[1]);
  else
    v5 = *((_QWORD *)&v523[0] + 1);
  v6 = sub_20E86A980(a2, (uint64_t)v4, v5);
  sub_20E86A980(v6, (uint64_t)": ", 2);
  v7 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v7, (uint64_t)"D variable\n", 11);
  if (SBYTE7(v523[1]) < 0)
    operator delete(*(void **)&v523[0]);
  v8 = sub_20E86A980(a2, (uint64_t)"\treferenced by ", 15);
  memset(&v522, 0, sizeof(v522));
  *(_QWORD *)&v523[0] = operator new(0x28uLL);
  v516 = xmmword_2102DCA20;
  *(_OWORD *)((char *)v523 + 8) = xmmword_2102DCA20;
  qmemcpy(v511, "atePriorFactor<dcv3d::vio::VIOSt", sizeof(v511));
  strcpy(*(char **)&v523[0], "cv3d::vio::VIOStatePriorFactor<double>]");
  sub_20E8D1238(v523, 38, 1uLL);
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v9 = (const std::string::value_type *)v523;
  else
    v9 = *(const std::string::value_type **)&v523[0];
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v10 = BYTE7(v523[1]);
  else
    v10 = *((_QWORD *)&v523[0] + 1);
  std::string::append(&v522, v9, v10);
  if (SBYTE7(v523[1]) < 0)
    operator delete(*(void **)&v523[0]);
  std::string::append(&v522, ", ", 2uLL);
  *(_QWORD *)&v523[0] = operator new(0x28uLL);
  *(_OWORD *)((char *)v523 + 8) = xmmword_2102DB450;
  strcpy(*(char **)&v523[0], "cv3d::vio::VIOPosePriorFactor<double>]");
  sub_20E8D1238(v523, 37, 1uLL);
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v11 = (const std::string::value_type *)v523;
  else
    v11 = *(const std::string::value_type **)&v523[0];
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v12 = BYTE7(v523[1]);
  else
    v12 = *((_QWORD *)&v523[0] + 1);
  std::string::append(&v522, v11, v12);
  if (SBYTE7(v523[1]) < 0)
    operator delete(*(void **)&v523[0]);
  std::string::append(&v522, ", ", 2uLL);
  *(_QWORD *)&v523[0] = operator new(0x30uLL);
  v521 = xmmword_2102E3F60;
  *(_OWORD *)((char *)v523 + 8) = xmmword_2102E3F60;
  strcpy(*(char **)&v523[0], "cv3d::vio::VIOIMUWithIntrinsicsCalib<double>]");
  qmemcpy(v515, "csCalib<double>]UWithIntrinsicsCcv3d::vio::VIOIM", sizeof(v515));
  sub_20E8D1238(v523, 44, 1uLL);
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v13 = (const std::string::value_type *)v523;
  else
    v13 = *(const std::string::value_type **)&v523[0];
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v14 = BYTE7(v523[1]);
  else
    v14 = *((_QWORD *)&v523[0] + 1);
  std::string::append(&v522, v13, v14);
  if (SBYTE7(v523[1]) < 0)
    operator delete(*(void **)&v523[0]);
  std::string::append(&v522, ", ", 2uLL);
  *(_QWORD *)&v523[0] = operator new(0x30uLL);
  v512 = xmmword_2102DC900;
  *(_OWORD *)((char *)v523 + 8) = xmmword_2102DC900;
  strcpy(*(char **)&v523[0], "cv3d::vio::VIOPreintegrateIMUFactor<double>]");
  qmemcpy(v510, "UFactor<double>]eintegrateIMUFaccv3d::vio::VIOPr", sizeof(v510));
  sub_20E8D1238(v523, 43, 1uLL);
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v15 = (const std::string::value_type *)v523;
  else
    v15 = *(const std::string::value_type **)&v523[0];
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v16 = BYTE7(v523[1]);
  else
    v16 = *((_QWORD *)&v523[0] + 1);
  std::string::append(&v522, v15, v16);
  if (SBYTE7(v523[1]) < 0)
    operator delete(*(void **)&v523[0]);
  std::string::append(&v522, ", ", 2uLL);
  *(_QWORD *)&v523[0] = operator new(0x30uLL);
  *(_OWORD *)((char *)v523 + 8) = v521;
  strcpy(*(char **)&v523[0], "cv3d::vio::VIOZeroDisplacementFactor<double>]");
  sub_20E8D1238(v523, 44, 1uLL);
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v17 = (const std::string::value_type *)v523;
  else
    v17 = *(const std::string::value_type **)&v523[0];
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v18 = BYTE7(v523[1]);
  else
    v18 = *((_QWORD *)&v523[0] + 1);
  std::string::append(&v522, v17, v18);
  if (SBYTE7(v523[1]) < 0)
    operator delete(*(void **)&v523[0]);
  std::string::append(&v522, ", ", 2uLL);
  *(_QWORD *)&v523[0] = operator new(0x30uLL);
  *(_WORD *)&v514[34] = 0;
  *(_DWORD *)&v514[36] = 0;
  *(_QWORD *)&v514[40] = 0x8000000000000030;
  *(_OWORD *)((char *)v523 + 8) = xmmword_2102DC8D0;
  strcpy(v514, "pLandmarkFactor<cv3d::vio::VIOMa(");
  strcpy(*(char **)&v523[0], "cv3d::vio::VIOMapLandmarkFactor<double>]");
  sub_20E8D1238(v523, 39, 1uLL);
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v19 = (const std::string::value_type *)v523;
  else
    v19 = *(const std::string::value_type **)&v523[0];
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v20 = BYTE7(v523[1]);
  else
    v20 = *((_QWORD *)&v523[0] + 1);
  std::string::append(&v522, v19, v20);
  if (SBYTE7(v523[1]) < 0)
    operator delete(*(void **)&v523[0]);
  std::string::append(&v522, ", ", 2uLL);
  *(_QWORD *)&v523[0] = operator new(0x28uLL);
  *(_WORD *)&v513[34] = 0;
  *(_DWORD *)&v513[36] = 0;
  *(_QWORD *)&v513[40] = 0x8000000000000028;
  *(_OWORD *)((char *)v523 + 8) = xmmword_2102DC8F0;
  strcpy(v513, "aneFactor<doublecv3d::vio::VIOPl\"");
  strcpy(*(char **)&v523[0], "cv3d::vio::VIOPlaneFactor<double>]");
  sub_20E8D1238(v523, 33, 1uLL);
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v21 = (const std::string::value_type *)v523;
  else
    v21 = *(const std::string::value_type **)&v523[0];
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v22 = BYTE7(v523[1]);
  else
    v22 = *((_QWORD *)&v523[0] + 1);
  std::string::append(&v522, v21, v22);
  if (SBYTE7(v523[1]) < 0)
    operator delete(*(void **)&v523[0]);
  std::string::append(&v522, ", ", 2uLL);
  *(_QWORD *)&v523[0] = operator new(0x50uLL);
  *(_WORD *)&v519[82] = 0;
  *(_DWORD *)&v519[84] = 0;
  *(_QWORD *)&v519[88] = 0x8000000000000050;
  *(_OWORD *)((char *)v523 + 8) = xmmword_2102DB430;
  strcpy(v519, "cv3d::vio::VIOLandmarkDepthSqrtCDepth::Regular>]le, true, Depth:auchyFactor<doubJ");
  strcpy(*(char **)&v523[0], "cv3d::vio::VIOLandmarkDepthSqrtCauchyFactor<double, true, Depth::Regular>]");
  sub_20E8D1238(v523, 73, 1uLL);
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v23 = (const std::string::value_type *)v523;
  else
    v23 = *(const std::string::value_type **)&v523[0];
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v24 = BYTE7(v523[1]);
  else
    v24 = *((_QWORD *)&v523[0] + 1);
  std::string::append(&v522, v23, v24);
  if (SBYTE7(v523[1]) < 0)
    operator delete(*(void **)&v523[0]);
  std::string::append(&v522, ", ", 2uLL);
  *(_QWORD *)&v523[0] = operator new(0x40uLL);
  *(_WORD *)&v520[66] = 0;
  *(_DWORD *)&v520[68] = 0;
  *(_QWORD *)&v520[72] = 0x8000000000000040;
  *(_OWORD *)((char *)v523 + 8) = xmmword_2102DBC30;
  strcpy(*(char **)&v523[0], "cv3d::vio::VIOLandmarkCartesianSqrtCauchyFactor<double, true>]");
  strcpy(v520, "r<double, true>]qrtCauchyFactor<ndmarkCartesianScv3d::vio::VIOLa>");
  sub_20E8D1238(v523, 61, 1uLL);
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v25 = (const std::string::value_type *)v523;
  else
    v25 = *(const std::string::value_type **)&v523[0];
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v26 = BYTE7(v523[1]);
  else
    v26 = *((_QWORD *)&v523[0] + 1);
  std::string::append(&v522, v25, v26);
  if (SBYTE7(v523[1]) < 0)
    operator delete(*(void **)&v523[0]);
  std::string::append(&v522, ", ", 2uLL);
  *(_QWORD *)&v523[0] = operator new(0x60uLL);
  *(_WORD *)&v518[98] = 0;
  *(_DWORD *)&v518[100] = 0;
  *(_QWORD *)&v518[104] = 0x8000000000000060;
  *(_OWORD *)((char *)v523 + 8) = xmmword_2103B8460;
  strcpy(v518, "ndmarkDepthSqrtCcv3d::vio::VIOLasurement::Line>]:Regular, Measurle, true, Depth:auchyFactor<doub]");
  strcpy(*(char **)&v523[0], "cv3d::vio::VIOLandmarkDepthSqrtCauchyFactor<double, true, Depth::Regular, Measurement::Line>]");
  sub_20E8D1238(v523, 92, 1uLL);
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v27 = (const std::string::value_type *)v523;
  else
    v27 = *(const std::string::value_type **)&v523[0];
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v28 = BYTE7(v523[1]);
  else
    v28 = *((_QWORD *)&v523[0] + 1);
  std::string::append(&v522, v27, v28);
  if (SBYTE7(v523[1]) < 0)
    operator delete(*(void **)&v523[0]);
  std::string::append(&v522, ", ", 2uLL);
  *(_QWORD *)&v523[0] = operator new(0x50uLL);
  *(_WORD *)&v517[82] = 0;
  *(_DWORD *)&v517[84] = 0;
  *(_QWORD *)&v517[88] = 0x8000000000000050;
  *(_OWORD *)((char *)v523 + 8) = xmmword_2102DBFA0;
  strcpy(v517, "cv3d::vio::VIOLandmarkDepthSqrtCDepth::Regular>]double, true, DeauchyFactorMono<N");
  strcpy(*(char **)&v523[0], "cv3d::vio::VIOLandmarkDepthSqrtCauchyFactorMono<double, true, Depth::Regular>]");
  sub_20E8D1238(v523, 77, 1uLL);
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v29 = (const std::string::value_type *)v523;
  else
    v29 = *(const std::string::value_type **)&v523[0];
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v30 = BYTE7(v523[1]);
  else
    v30 = *((_QWORD *)&v523[0] + 1);
  std::string::append(&v522, v29, v30);
  if (SBYTE7(v523[1]) < 0)
    operator delete(*(void **)&v523[0]);
  if ((v522.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v31 = &v522;
  else
    v31 = (std::string *)v522.__r_.__value_.__r.__words[0];
  if ((v522.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v522.__r_.__value_.__r.__words[2]);
  else
    size = v522.__r_.__value_.__l.__size_;
  v33 = sub_20E86A980(v8, (uint64_t)v31, size);
  sub_20E86A980(v33, (uint64_t)"\n", 1);
  v34 = (_QWORD *)(a1 + 5184);
  if (SHIBYTE(v522.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v522.__r_.__value_.__l.__data_);
  sub_20E86A980(a2, (uint64_t)"\tthere are ", 11);
  sub_20FA558B8(a1 + 5184, 0);
  v35 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v35, (uint64_t)" present in the system\n", 23);
  sub_20E86A980(a2, (uint64_t)"\tout of that ", 13);
  sub_20FB59E1C(a1 + 5184);
  v36 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v36, (uint64_t)" are free (", 11);
  sub_20FB59E1C(a1 + 5184);
  v37 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v37, (uint64_t)" DoF total)\n", 12);
  *(_QWORD *)&v523[0] = operator new(0x38uLL);
  *(_OWORD *)((char *)v523 + 8) = xmmword_2102DCA50;
  strcpy(*(char **)&v523[0], "cv3d::vio::VIOIMUVelocityBiasesVariable<double>]");
  sub_20E8D1238(v523, 47, 1uLL);
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v38 = v523;
  else
    v38 = *(_OWORD **)&v523[0];
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v39 = BYTE7(v523[1]);
  else
    v39 = *((_QWORD *)&v523[0] + 1);
  v40 = sub_20E86A980(a2, (uint64_t)v38, v39);
  sub_20E86A980(v40, (uint64_t)": ", 2);
  v41 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v41, (uint64_t)"D variable\n", 11);
  if (SBYTE7(v523[1]) < 0)
    operator delete(*(void **)&v523[0]);
  v42 = sub_20E86A980(a2, (uint64_t)"\treferenced by ", 15);
  memset(&v522, 0, sizeof(v522));
  v43 = operator new(0x28uLL);
  *(_QWORD *)&v523[0] = v43;
  *(_OWORD *)((char *)v523 + 8) = v516;
  *(_OWORD *)v43 = v511[1];
  *((_OWORD *)v43 + 1) = v511[0];
  strcpy((char *)v43 + 31, "double>]");
  sub_20E8D1238(v523, 38, 1uLL);
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v44 = (const std::string::value_type *)v523;
  else
    v44 = *(const std::string::value_type **)&v523[0];
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v45 = BYTE7(v523[1]);
  else
    v45 = *((_QWORD *)&v523[0] + 1);
  std::string::append(&v522, v44, v45);
  if (SBYTE7(v523[1]) < 0)
    operator delete(*(void **)&v523[0]);
  std::string::append(&v522, ", ", 2uLL);
  v46 = operator new(0x30uLL);
  *(_QWORD *)&v523[0] = v46;
  *(_OWORD *)((char *)v523 + 8) = v521;
  *v46 = v515[2];
  v46[1] = v515[1];
  *(_OWORD *)((char *)v46 + 29) = v515[0];
  *((_BYTE *)v46 + 45) = 0;
  sub_20E8D1238(v523, 44, 1uLL);
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v47 = (const std::string::value_type *)v523;
  else
    v47 = *(const std::string::value_type **)&v523[0];
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v48 = BYTE7(v523[1]);
  else
    v48 = *((_QWORD *)&v523[0] + 1);
  std::string::append(&v522, v47, v48);
  if (SBYTE7(v523[1]) < 0)
    operator delete(*(void **)&v523[0]);
  std::string::append(&v522, ", ", 2uLL);
  v49 = operator new(0x30uLL);
  *(_QWORD *)&v523[0] = v49;
  *(_OWORD *)((char *)v523 + 8) = v512;
  *v49 = v510[2];
  v49[1] = v510[1];
  *(_OWORD *)((char *)v49 + 28) = v510[0];
  *((_BYTE *)v49 + 44) = 0;
  sub_20E8D1238(v523, 43, 1uLL);
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v50 = (const std::string::value_type *)v523;
  else
    v50 = *(const std::string::value_type **)&v523[0];
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v51 = BYTE7(v523[1]);
  else
    v51 = *((_QWORD *)&v523[0] + 1);
  std::string::append(&v522, v50, v51);
  if (SBYTE7(v523[1]) < 0)
    operator delete(*(void **)&v523[0]);
  std::string::append(&v522, ", ", 2uLL);
  *(_QWORD *)&v523[0] = operator new(0x30uLL);
  v511[1] = xmmword_2102DCA00;
  *(_OWORD *)((char *)v523 + 8) = xmmword_2102DCA00;
  strcpy(*(char **)&v523[0], "cv3d::vio::VIOZeroVelocityFactor<double>]");
  sub_20E8D1238(v523, 40, 1uLL);
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v52 = (const std::string::value_type *)v523;
  else
    v52 = *(const std::string::value_type **)&v523[0];
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v53 = BYTE7(v523[1]);
  else
    v53 = *((_QWORD *)&v523[0] + 1);
  std::string::append(&v522, v52, v53);
  if (SBYTE7(v523[1]) < 0)
    operator delete(*(void **)&v523[0]);
  if ((v522.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v54 = &v522;
  else
    v54 = (std::string *)v522.__r_.__value_.__r.__words[0];
  if ((v522.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v55 = HIBYTE(v522.__r_.__value_.__r.__words[2]);
  else
    v55 = v522.__r_.__value_.__l.__size_;
  v56 = sub_20E86A980(v42, (uint64_t)v54, v55);
  sub_20E86A980(v56, (uint64_t)"\n", 1);
  if (SHIBYTE(v522.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v522.__r_.__value_.__l.__data_);
  sub_20E86A980(a2, (uint64_t)"\tthere are ", 11);
  sub_20FA56584(a1 + 5184, 0);
  v57 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v57, (uint64_t)" present in the system\n", 23);
  sub_20E86A980(a2, (uint64_t)"\tout of that ", 13);
  sub_20FB5A768(a1 + 5184);
  v58 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v58, (uint64_t)" are free (", 11);
  sub_20FB5A768(a1 + 5184);
  v59 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v59, (uint64_t)" DoF total)\n", 12);
  *(_QWORD *)&v523[0] = operator new(0x30uLL);
  *(_OWORD *)((char *)v523 + 8) = v511[1];
  strcpy(*(char **)&v523[0], "cv3d::vio::VIOExtrinsicsVariable<double>]");
  sub_20E8D1238(v523, 40, 1uLL);
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v60 = v523;
  else
    v60 = *(_OWORD **)&v523[0];
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v61 = BYTE7(v523[1]);
  else
    v61 = *((_QWORD *)&v523[0] + 1);
  v62 = sub_20E86A980(a2, (uint64_t)v60, v61);
  sub_20E86A980(v62, (uint64_t)": ", 2);
  v63 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v63, (uint64_t)"D variable\n", 11);
  if (SBYTE7(v523[1]) < 0)
    operator delete(*(void **)&v523[0]);
  v64 = sub_20E86A980(a2, (uint64_t)"\treferenced by ", 15);
  memset(&v522, 0, sizeof(v522));
  *(_QWORD *)&v523[0] = operator new(0x60uLL);
  v511[1] = xmmword_2103B84A0;
  *(_OWORD *)((char *)v523 + 8) = xmmword_2103B84A0;
  strcpy(*(char **)&v523[0], "cv3d::vio::VIOCameraExtrinsicPriorFactor<double, cv3d::vio::VIOExtrinsicsVariable<double>>]");
  sub_20E8D1238(v523, 90, 1uLL);
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v65 = (const std::string::value_type *)v523;
  else
    v65 = *(const std::string::value_type **)&v523[0];
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v66 = BYTE7(v523[1]);
  else
    v66 = *((_QWORD *)&v523[0] + 1);
  std::string::append(&v522, v65, v66);
  if (SBYTE7(v523[1]) < 0)
    operator delete(*(void **)&v523[0]);
  std::string::append(&v522, ", ", 2uLL);
  v67 = operator new(0x30uLL);
  *(_QWORD *)&v523[0] = v67;
  *(_OWORD *)((char *)v523 + 8) = *(_OWORD *)&v514[32];
  *(_OWORD *)v67 = *(_OWORD *)&v514[16];
  *((_OWORD *)v67 + 1) = *(_OWORD *)v514;
  strcpy((char *)v67 + 32, "double>]");
  sub_20E8D1238(v523, 39, 1uLL);
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v68 = (const std::string::value_type *)v523;
  else
    v68 = *(const std::string::value_type **)&v523[0];
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v69 = BYTE7(v523[1]);
  else
    v69 = *((_QWORD *)&v523[0] + 1);
  std::string::append(&v522, v68, v69);
  if (SBYTE7(v523[1]) < 0)
    operator delete(*(void **)&v523[0]);
  std::string::append(&v522, ", ", 2uLL);
  v70 = operator new(0x50uLL);
  *(_QWORD *)&v523[0] = v70;
  *(_OWORD *)((char *)v523 + 8) = *(_OWORD *)&v519[80];
  v70[2] = *(_OWORD *)&v519[64];
  v70[3] = *(_OWORD *)&v519[48];
  *(_OWORD *)((char *)v70 + 58) = *(_OWORD *)&v519[32];
  *v70 = *(_OWORD *)v519;
  v70[1] = *(_OWORD *)&v519[16];
  *((_BYTE *)v70 + 74) = 0;
  sub_20E8D1238(v523, 73, 1uLL);
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v71 = (const std::string::value_type *)v523;
  else
    v71 = *(const std::string::value_type **)&v523[0];
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v72 = BYTE7(v523[1]);
  else
    v72 = *((_QWORD *)&v523[0] + 1);
  std::string::append(&v522, v71, v72);
  if (SBYTE7(v523[1]) < 0)
    operator delete(*(void **)&v523[0]);
  std::string::append(&v522, ", ", 2uLL);
  v73 = operator new(0x40uLL);
  *(_QWORD *)&v523[0] = v73;
  *(_OWORD *)((char *)v523 + 8) = *(_OWORD *)&v520[64];
  *v73 = *(_OWORD *)&v520[48];
  v73[1] = *(_OWORD *)&v520[32];
  v73[2] = *(_OWORD *)&v520[16];
  *(_OWORD *)((char *)v73 + 46) = *(_OWORD *)v520;
  *((_BYTE *)v73 + 62) = 0;
  sub_20E8D1238(v523, 61, 1uLL);
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v74 = (const std::string::value_type *)v523;
  else
    v74 = *(const std::string::value_type **)&v523[0];
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v75 = BYTE7(v523[1]);
  else
    v75 = *((_QWORD *)&v523[0] + 1);
  std::string::append(&v522, v74, v75);
  if (SBYTE7(v523[1]) < 0)
    operator delete(*(void **)&v523[0]);
  std::string::append(&v522, ", ", 2uLL);
  v76 = operator new(0x60uLL);
  *(_QWORD *)&v523[0] = v76;
  *(_OWORD *)((char *)v523 + 8) = *(_OWORD *)&v518[96];
  v76[2] = *(_OWORD *)&v518[80];
  v76[3] = *(_OWORD *)&v518[64];
  v76[4] = *(_OWORD *)&v518[48];
  *(_OWORD *)((char *)v76 + 77) = *(_OWORD *)&v518[32];
  *v76 = *(_OWORD *)&v518[16];
  v76[1] = *(_OWORD *)v518;
  *((_BYTE *)v76 + 93) = 0;
  sub_20E8D1238(v523, 92, 1uLL);
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v77 = (const std::string::value_type *)v523;
  else
    v77 = *(const std::string::value_type **)&v523[0];
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v78 = BYTE7(v523[1]);
  else
    v78 = *((_QWORD *)&v523[0] + 1);
  std::string::append(&v522, v77, v78);
  if (SBYTE7(v523[1]) < 0)
    operator delete(*(void **)&v523[0]);
  std::string::append(&v522, ", ", 2uLL);
  v79 = operator new(0x50uLL);
  *(_QWORD *)&v523[0] = v79;
  *(_OWORD *)((char *)v523 + 8) = *(_OWORD *)&v517[80];
  v79[2] = *(_OWORD *)&v517[64];
  v79[3] = *(_OWORD *)&v517[48];
  *(_OWORD *)((char *)v79 + 62) = *(_OWORD *)&v517[32];
  *v79 = *(_OWORD *)v517;
  v79[1] = *(_OWORD *)&v517[16];
  *((_BYTE *)v79 + 78) = 0;
  sub_20E8D1238(v523, 77, 1uLL);
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v80 = (const std::string::value_type *)v523;
  else
    v80 = *(const std::string::value_type **)&v523[0];
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v81 = BYTE7(v523[1]);
  else
    v81 = *((_QWORD *)&v523[0] + 1);
  std::string::append(&v522, v80, v81);
  if (SBYTE7(v523[1]) < 0)
    operator delete(*(void **)&v523[0]);
  if ((v522.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v82 = &v522;
  else
    v82 = (std::string *)v522.__r_.__value_.__r.__words[0];
  if ((v522.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v83 = HIBYTE(v522.__r_.__value_.__r.__words[2]);
  else
    v83 = v522.__r_.__value_.__l.__size_;
  v84 = sub_20E86A980(v64, (uint64_t)v82, v83);
  sub_20E86A980(v84, (uint64_t)"\n", 1);
  if (SHIBYTE(v522.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v522.__r_.__value_.__l.__data_);
  sub_20E86A980(a2, (uint64_t)"\tthere are ", 11);
  v85 = (_BYTE *)(a1 + 6800);
  if (!*(_BYTE *)(a1 + 6800))
  {
    memset(v523, 0, 44);
    if (sub_20F8DEE48((_QWORD *)(a1 + 5184), (int *)v523, &v522, 1))
    {
      *(_QWORD *)(a1 + 7608) = *(_QWORD *)(a1 + 7600);
      *(_QWORD *)(a1 + 7632) = *(_QWORD *)(a1 + 7624);
      *(_QWORD *)(a1 + 7656) = *(_QWORD *)(a1 + 7648);
      *(_QWORD *)(a1 + 7680) = *(_QWORD *)(a1 + 7672);
      *(_QWORD *)(a1 + 7704) = *(_QWORD *)(a1 + 7696);
      *(_QWORD *)(a1 + 7728) = *(_QWORD *)(a1 + 7720);
      *(_QWORD *)(a1 + 7752) = *(_QWORD *)(a1 + 7744);
      *(_QWORD *)(a1 + 7776) = *(_QWORD *)(a1 + 7768);
      *(_QWORD *)(a1 + 7800) = *(_QWORD *)(a1 + 7792);
      *(_QWORD *)(a1 + 7824) = *(_QWORD *)(a1 + 7816);
      *(_QWORD *)(a1 + 7848) = *(_QWORD *)(a1 + 7840);
      v86 = *(_QWORD *)(a1 + 6248);
      v87 = *(_QWORD *)(a1 + 6256);
      while (v86 != v87)
      {
        v88 = *(_QWORD *)(v86 + 208);
        if (*(_BYTE *)(v86 + 496)
          || (*(_BYTE *)(v88 + 4) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v86 + 216) + 4) & 6) != 0)
        {
          sub_20F394A20(a1 + 7600, v88);
          sub_20F3D35E0((_QWORD *)(a1 + 7600), *(_QWORD *)(v86 + 216));
        }
        v86 += 504;
      }
      v89 = *(_QWORD *)(a1 + 6272);
      v90 = *(_QWORD *)(a1 + 6280);
      while (v89 != v90)
      {
        v91 = *(_QWORD *)(v89 + 136);
        if (*(_BYTE *)(v89 + 272) || (*(_BYTE *)(v91 + 4) & 6) != 0)
          sub_20F394A20(a1 + 7600, v91);
        v89 += 280;
      }
      v92 = *(_QWORD *)(a1 + 6296);
      v93 = *(_QWORD *)(a1 + 6304);
      while (v92 != v93)
      {
        v94 = *(_QWORD *)(v92 + 136);
        if (*(_BYTE *)(v92 + 272) || (*(_BYTE *)(v94 + 4) & 6) != 0)
          sub_20F599C88((_QWORD *)(a1 + 7600), v94);
        v92 += 280;
      }
      v95 = *(_QWORD *)(a1 + 6320);
      v96 = *(_QWORD *)(a1 + 6328);
      while (v95 != v96)
      {
        v97 = *(_QWORD *)(v95 + 136);
        if (*(_BYTE *)(v95 + 272) || (*(_BYTE *)(v97 + 4) & 6) != 0)
          sub_20F59A480((_QWORD *)(a1 + 7600), v97);
        v95 += 280;
      }
      v98 = *(_QWORD *)(a1 + 6344);
      v99 = *(_QWORD *)(a1 + 6352);
      while (v98 != v99)
      {
        v100 = *(_QWORD *)(v98 + 64);
        if (*(_BYTE *)(v98 + 152) || (*(_BYTE *)(v100 + 4) & 6) != 0)
          sub_20F59A2E8((_QWORD *)(a1 + 7600), v100);
        v98 += 160;
      }
      sub_20FA5640C(*(_QWORD *)(a1 + 6368), *(_QWORD *)(a1 + 6376), (_QWORD *)(a1 + 7600));
      sub_20F5B85BC(*(_QWORD *)(a1 + 6392), *(_QWORD *)(a1 + 6400), (_QWORD *)(a1 + 7600));
      v101 = *(_QWORD *)(a1 + 6416);
      v102 = *(_QWORD *)(a1 + 6424);
      while (v101 != v102)
      {
        v103 = *(_QWORD *)(v101 + 48);
        if (*(_BYTE *)(v101 + 136) || (*(_BYTE *)(v103 + 4) & 6) != 0)
          sub_20F3D35E0((_QWORD *)(a1 + 7600), v103);
        v101 += 144;
      }
      v104 = *(_QWORD *)(a1 + 6440);
      v105 = *(_QWORD *)(a1 + 6448);
      while (v104 != v105)
      {
        v106 = *(_QWORD *)(v104 + 48);
        if (*(_BYTE *)(v104 + 144)
          || (*(_BYTE *)(v106 + 4) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v104 + 56) + 4) & 6) != 0)
        {
          sub_20F394A20(a1 + 7600, v106);
          sub_20F394A20(a1 + 7600, *(_QWORD *)(v104 + 56));
        }
        v104 += 152;
      }
      sub_20FA56358(*(_QWORD *)(a1 + 6464), *(_QWORD *)(a1 + 6472), (_QWORD *)(a1 + 7600));
      sub_20F8DF65C(*(_QWORD *)(a1 + 6488), *(_QWORD *)(a1 + 6496), (_QWORD *)(a1 + 7600));
      v107 = *(_QWORD *)(a1 + 6512);
      v108 = *(_QWORD *)(a1 + 6520);
      while (v107 != v108)
      {
        v109 = *(_QWORD *)(v107 + 48);
        if (*(_BYTE *)(v107 + 104) || (*(_BYTE *)(v109 + 4) & 6) != 0)
          sub_20F59A150((_QWORD *)(a1 + 7600), v109);
        v107 += 112;
      }
      v110 = *(_QWORD *)(a1 + 6536);
      v111 = *(_QWORD *)(a1 + 6544);
      while (v110 != v111)
      {
        v112 = *(_QWORD *)(v110 + 96);
        if (*(_BYTE *)(v110 + 200) || (*(_BYTE *)(v112 + 4) & 6) != 0)
          sub_20F599E20((_QWORD *)(a1 + 7600), v112);
        v110 += 208;
      }
      v113 = *(_QWORD *)(a1 + 6560);
      v114 = *(_QWORD *)(a1 + 6568);
      while (v113 != v114)
      {
        v115 = *(_QWORD *)(v113 + 96);
        if (*(_BYTE *)(v113 + 200) || (*(_BYTE *)(v115 + 4) & 6) != 0)
          sub_20F8DAC28((_QWORD *)(a1 + 7600), v115);
        v113 += 208;
      }
      v116 = *(_QWORD *)(a1 + 6584);
      v117 = *(_QWORD *)(a1 + 6592);
      while (v116 != v117)
      {
        v118 = *(_QWORD *)(v116 + 80);
        if (*(_BYTE *)(v116 + 168) || (*(_BYTE *)(v118 + 4) & 6) != 0)
          sub_20F8DADC0((_QWORD *)(a1 + 7600), v118);
        v116 += 176;
      }
      v119 = *(_QWORD *)(a1 + 6608);
      v120 = *(_QWORD *)(a1 + 6616);
      while (v119 != v120)
      {
        v121 = *(_QWORD *)(v119 + 80);
        if (*(_BYTE *)(v119 + 168) || (*(_BYTE *)(v121 + 4) & 6) != 0)
          sub_20F599FB8((_QWORD *)(a1 + 7600), v121);
        v119 += 176;
      }
      sub_20FA561E0(*(_QWORD *)(a1 + 6632), *(_QWORD *)(a1 + 6640), (_QWORD *)(a1 + 7600));
      sub_20FA560F4(*(_QWORD *)(a1 + 6656), *(_QWORD *)(a1 + 6664), (_QWORD *)(a1 + 7600));
      sub_20FA55F7C(*(_QWORD *)(a1 + 6680), *(_QWORD *)(a1 + 6688), (_QWORD *)(a1 + 7600));
      sub_20FA55E74(*(_QWORD *)(a1 + 6704), *(_QWORD *)(a1 + 6712), (_QWORD *)(a1 + 7600));
      sub_20FA485B8((_QWORD *)(a1 + 5184));
    }
  }
  v122 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v122, (uint64_t)" present in the system\n", 23);
  sub_20E86A980(a2, (uint64_t)"\tout of that ", 13);
  sub_20FB5AD34(a1 + 5184);
  v123 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v123, (uint64_t)" are free (", 11);
  sub_20FB5AD34(a1 + 5184);
  v124 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v124, (uint64_t)" DoF total)\n", 12);
  *(_QWORD *)&v523[0] = operator new(0x30uLL);
  *(_OWORD *)((char *)v523 + 8) = xmmword_2102DBF00;
  strcpy(*(char **)&v523[0], "cv3d::vio::VIODepthExtrinsicsVariable<double>]");
  sub_20E8D1238(v523, 45, 1uLL);
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v125 = v523;
  else
    v125 = *(_OWORD **)&v523[0];
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v126 = BYTE7(v523[1]);
  else
    v126 = *((_QWORD *)&v523[0] + 1);
  v127 = sub_20E86A980(a2, (uint64_t)v125, v126);
  sub_20E86A980(v127, (uint64_t)": ", 2);
  v128 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v128, (uint64_t)"D variable\n", 11);
  if (SBYTE7(v523[1]) < 0)
    operator delete(*(void **)&v523[0]);
  v129 = sub_20E86A980(a2, (uint64_t)"\treferenced by ", 15);
  memset(&v522, 0, sizeof(v522));
  *(_QWORD *)&v523[0] = operator new(0x68uLL);
  *(_OWORD *)((char *)v523 + 8) = xmmword_2103B8450;
  strcpy(*(char **)&v523[0], "cv3d::vio::VIOCameraExtrinsicPriorFactor<double, cv3d::vio::VIODepthExtrinsicsVariable<double>>]");
  sub_20E8D1238(v523, 95, 1uLL);
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v130 = (const std::string::value_type *)v523;
  else
    v130 = *(const std::string::value_type **)&v523[0];
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v131 = BYTE7(v523[1]);
  else
    v131 = *((_QWORD *)&v523[0] + 1);
  std::string::append(&v522, v130, v131);
  if (SBYTE7(v523[1]) < 0)
    operator delete(*(void **)&v523[0]);
  std::string::append(&v522, ", ", 2uLL);
  v132 = (char *)operator new(0x28uLL);
  *(_QWORD *)&v523[0] = v132;
  *(_OWORD *)((char *)v523 + 8) = *(_OWORD *)&v513[32];
  strcpy(v132 + 32, ">]");
  *(_OWORD *)v132 = *(_OWORD *)&v513[16];
  *((_OWORD *)v132 + 1) = *(_OWORD *)v513;
  sub_20E8D1238(v523, 33, 1uLL);
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v133 = (const std::string::value_type *)v523;
  else
    v133 = *(const std::string::value_type **)&v523[0];
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v134 = BYTE7(v523[1]);
  else
    v134 = *((_QWORD *)&v523[0] + 1);
  std::string::append(&v522, v133, v134);
  if (SBYTE7(v523[1]) < 0)
    operator delete(*(void **)&v523[0]);
  if ((v522.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v135 = &v522;
  else
    v135 = (std::string *)v522.__r_.__value_.__r.__words[0];
  if ((v522.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v136 = HIBYTE(v522.__r_.__value_.__r.__words[2]);
  else
    v136 = v522.__r_.__value_.__l.__size_;
  v137 = sub_20E86A980(v129, (uint64_t)v135, v136);
  sub_20E86A980(v137, (uint64_t)"\n", 1);
  if (SHIBYTE(v522.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v522.__r_.__value_.__l.__data_);
  sub_20E86A980(a2, (uint64_t)"\tforms an independent set (consider using Schur solver)\n", 56);
  sub_20E86A980(a2, (uint64_t)"\tthere are ", 11);
  if (!*v85)
  {
    memset(v523, 0, 44);
    if (sub_20F8DEE48((_QWORD *)(a1 + 5184), (int *)v523, &v522, 1))
    {
      *(_QWORD *)(a1 + 7608) = *(_QWORD *)(a1 + 7600);
      *(_QWORD *)(a1 + 7632) = *(_QWORD *)(a1 + 7624);
      *(_QWORD *)(a1 + 7656) = *(_QWORD *)(a1 + 7648);
      *(_QWORD *)(a1 + 7680) = *(_QWORD *)(a1 + 7672);
      *(_QWORD *)(a1 + 7704) = *(_QWORD *)(a1 + 7696);
      *(_QWORD *)(a1 + 7728) = *(_QWORD *)(a1 + 7720);
      *(_QWORD *)(a1 + 7752) = *(_QWORD *)(a1 + 7744);
      *(_QWORD *)(a1 + 7776) = *(_QWORD *)(a1 + 7768);
      *(_QWORD *)(a1 + 7800) = *(_QWORD *)(a1 + 7792);
      *(_QWORD *)(a1 + 7824) = *(_QWORD *)(a1 + 7816);
      *(_QWORD *)(a1 + 7848) = *(_QWORD *)(a1 + 7840);
      v138 = *(_QWORD *)(a1 + 6248);
      v139 = *(_QWORD *)(a1 + 6256);
      while (v138 != v139)
      {
        v140 = *(_QWORD *)(v138 + 208);
        if (*(_BYTE *)(v138 + 496)
          || (*(_BYTE *)(v140 + 4) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v138 + 216) + 4) & 6) != 0)
        {
          sub_20F394A20(a1 + 7600, v140);
          sub_20F3D35E0((_QWORD *)(a1 + 7600), *(_QWORD *)(v138 + 216));
        }
        v138 += 504;
      }
      v141 = *(_QWORD *)(a1 + 6272);
      v142 = *(_QWORD *)(a1 + 6280);
      while (v141 != v142)
      {
        v143 = *(_QWORD *)(v141 + 136);
        if (*(_BYTE *)(v141 + 272) || (*(_BYTE *)(v143 + 4) & 6) != 0)
          sub_20F394A20(a1 + 7600, v143);
        v141 += 280;
      }
      v144 = *(_QWORD *)(a1 + 6296);
      v145 = *(_QWORD *)(a1 + 6304);
      while (v144 != v145)
      {
        v146 = *(_QWORD *)(v144 + 136);
        if (*(_BYTE *)(v144 + 272) || (*(_BYTE *)(v146 + 4) & 6) != 0)
          sub_20F599C88((_QWORD *)(a1 + 7600), v146);
        v144 += 280;
      }
      v147 = *(_QWORD *)(a1 + 6320);
      v148 = *(_QWORD *)(a1 + 6328);
      while (v147 != v148)
      {
        v149 = *(_QWORD *)(v147 + 136);
        if (*(_BYTE *)(v147 + 272) || (*(_BYTE *)(v149 + 4) & 6) != 0)
          sub_20F59A480((_QWORD *)(a1 + 7600), v149);
        v147 += 280;
      }
      v150 = *(_QWORD *)(a1 + 6344);
      v151 = *(_QWORD *)(a1 + 6352);
      while (v150 != v151)
      {
        v152 = *(_QWORD *)(v150 + 64);
        if (*(_BYTE *)(v150 + 152) || (*(_BYTE *)(v152 + 4) & 6) != 0)
          sub_20F59A2E8((_QWORD *)(a1 + 7600), v152);
        v150 += 160;
      }
      sub_20FA5640C(*(_QWORD *)(a1 + 6368), *(_QWORD *)(a1 + 6376), (_QWORD *)(a1 + 7600));
      sub_20F5B85BC(*(_QWORD *)(a1 + 6392), *(_QWORD *)(a1 + 6400), (_QWORD *)(a1 + 7600));
      v153 = *(_QWORD *)(a1 + 6416);
      v154 = *(_QWORD *)(a1 + 6424);
      while (v153 != v154)
      {
        v155 = *(_QWORD *)(v153 + 48);
        if (*(_BYTE *)(v153 + 136) || (*(_BYTE *)(v155 + 4) & 6) != 0)
          sub_20F3D35E0((_QWORD *)(a1 + 7600), v155);
        v153 += 144;
      }
      v156 = *(_QWORD *)(a1 + 6440);
      v157 = *(_QWORD *)(a1 + 6448);
      while (v156 != v157)
      {
        v158 = *(_QWORD *)(v156 + 48);
        if (*(_BYTE *)(v156 + 144)
          || (*(_BYTE *)(v158 + 4) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v156 + 56) + 4) & 6) != 0)
        {
          sub_20F394A20(a1 + 7600, v158);
          sub_20F394A20(a1 + 7600, *(_QWORD *)(v156 + 56));
        }
        v156 += 152;
      }
      sub_20FA56358(*(_QWORD *)(a1 + 6464), *(_QWORD *)(a1 + 6472), (_QWORD *)(a1 + 7600));
      sub_20F8DF65C(*(_QWORD *)(a1 + 6488), *(_QWORD *)(a1 + 6496), (_QWORD *)(a1 + 7600));
      v159 = *(_QWORD *)(a1 + 6512);
      v160 = *(_QWORD *)(a1 + 6520);
      while (v159 != v160)
      {
        v161 = *(_QWORD *)(v159 + 48);
        if (*(_BYTE *)(v159 + 104) || (*(_BYTE *)(v161 + 4) & 6) != 0)
          sub_20F59A150((_QWORD *)(a1 + 7600), v161);
        v159 += 112;
      }
      v162 = *(_QWORD *)(a1 + 6536);
      v163 = *(_QWORD *)(a1 + 6544);
      while (v162 != v163)
      {
        v164 = *(_QWORD *)(v162 + 96);
        if (*(_BYTE *)(v162 + 200) || (*(_BYTE *)(v164 + 4) & 6) != 0)
          sub_20F599E20((_QWORD *)(a1 + 7600), v164);
        v162 += 208;
      }
      v165 = *(_QWORD *)(a1 + 6560);
      v166 = *(_QWORD *)(a1 + 6568);
      while (v165 != v166)
      {
        v167 = *(_QWORD *)(v165 + 96);
        if (*(_BYTE *)(v165 + 200) || (*(_BYTE *)(v167 + 4) & 6) != 0)
          sub_20F8DAC28((_QWORD *)(a1 + 7600), v167);
        v165 += 208;
      }
      v168 = *(_QWORD *)(a1 + 6584);
      v169 = *(_QWORD *)(a1 + 6592);
      while (v168 != v169)
      {
        v170 = *(_QWORD *)(v168 + 80);
        if (*(_BYTE *)(v168 + 168) || (*(_BYTE *)(v170 + 4) & 6) != 0)
          sub_20F8DADC0((_QWORD *)(a1 + 7600), v170);
        v168 += 176;
      }
      v171 = *(_QWORD *)(a1 + 6608);
      v172 = *(_QWORD *)(a1 + 6616);
      while (v171 != v172)
      {
        v173 = *(_QWORD *)(v171 + 80);
        if (*(_BYTE *)(v171 + 168) || (*(_BYTE *)(v173 + 4) & 6) != 0)
          sub_20F599FB8((_QWORD *)(a1 + 7600), v173);
        v171 += 176;
      }
      sub_20FA561E0(*(_QWORD *)(a1 + 6632), *(_QWORD *)(a1 + 6640), (_QWORD *)(a1 + 7600));
      sub_20FA560F4(*(_QWORD *)(a1 + 6656), *(_QWORD *)(a1 + 6664), (_QWORD *)(a1 + 7600));
      sub_20FA55F7C(*(_QWORD *)(a1 + 6680), *(_QWORD *)(a1 + 6688), (_QWORD *)(a1 + 7600));
      sub_20FA55E74(*(_QWORD *)(a1 + 6704), *(_QWORD *)(a1 + 6712), (_QWORD *)(a1 + 7600));
      sub_20FA485B8((_QWORD *)(a1 + 5184));
    }
  }
  v174 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v174, (uint64_t)" present in the system\n", 23);
  sub_20E86A980(a2, (uint64_t)"\tout of that ", 13);
  sub_20FB5B300(a1 + 5184);
  v175 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v175, (uint64_t)" are free (", 11);
  sub_20FB5B300(a1 + 5184);
  v176 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v176, (uint64_t)" DoF total)\n", 12);
  *(_QWORD *)&v523[0] = operator new(0x28uLL);
  *(_OWORD *)((char *)v523 + 8) = v516;
  strcpy(*(char **)&v523[0], "cv3d::vio::VIOLandmarkVariable<double>]");
  sub_20E8D1238(v523, 38, 1uLL);
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v177 = v523;
  else
    v177 = *(_OWORD **)&v523[0];
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v178 = BYTE7(v523[1]);
  else
    v178 = *((_QWORD *)&v523[0] + 1);
  v179 = sub_20E86A980(a2, (uint64_t)v177, v178);
  sub_20E86A980(v179, (uint64_t)": ", 2);
  v180 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v180, (uint64_t)"D variable\n", 11);
  if (SBYTE7(v523[1]) < 0)
    operator delete(*(void **)&v523[0]);
  v181 = sub_20E86A980(a2, (uint64_t)"\treferenced by ", 15);
  memset(&v522, 0, sizeof(v522));
  *(_QWORD *)&v523[0] = operator new(0x58uLL);
  *(_OWORD *)((char *)v523 + 8) = xmmword_2103134C0;
  strcpy(*(char **)&v523[0], "cv3d::vio::VIOSLAMLandmarkPriorFactor<double, cv3d::vio::VIOLandmarkVariable<double>>]");
  sub_20E8D1238(v523, 85, 1uLL);
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v182 = (const std::string::value_type *)v523;
  else
    v182 = *(const std::string::value_type **)&v523[0];
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v183 = BYTE7(v523[1]);
  else
    v183 = *((_QWORD *)&v523[0] + 1);
  std::string::append(&v522, v182, v183);
  if (SBYTE7(v523[1]) < 0)
    operator delete(*(void **)&v523[0]);
  std::string::append(&v522, ", ", 2uLL);
  v184 = operator new(0x40uLL);
  *(_QWORD *)&v523[0] = v184;
  *(_OWORD *)((char *)v523 + 8) = *(_OWORD *)&v520[64];
  *v184 = *(_OWORD *)&v520[48];
  v184[1] = *(_OWORD *)&v520[32];
  v184[2] = *(_OWORD *)&v520[16];
  *(_OWORD *)((char *)v184 + 46) = *(_OWORD *)v520;
  *((_BYTE *)v184 + 62) = 0;
  sub_20E8D1238(v523, 61, 1uLL);
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v185 = (const std::string::value_type *)v523;
  else
    v185 = *(const std::string::value_type **)&v523[0];
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v186 = BYTE7(v523[1]);
  else
    v186 = *((_QWORD *)&v523[0] + 1);
  std::string::append(&v522, v185, v186);
  if (SBYTE7(v523[1]) < 0)
    operator delete(*(void **)&v523[0]);
  if ((v522.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v187 = &v522;
  else
    v187 = (std::string *)v522.__r_.__value_.__r.__words[0];
  if ((v522.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v188 = HIBYTE(v522.__r_.__value_.__r.__words[2]);
  else
    v188 = v522.__r_.__value_.__l.__size_;
  v189 = sub_20E86A980(v181, (uint64_t)v187, v188);
  sub_20E86A980(v189, (uint64_t)"\n", 1);
  if (SHIBYTE(v522.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v522.__r_.__value_.__l.__data_);
  sub_20E86A980(a2, (uint64_t)"\tforms an independent set (consider using Schur solver)\n", 56);
  sub_20E86A980(a2, (uint64_t)"\tthere are ", 11);
  sub_20FA56B40(a1 + 5184, 0);
  v190 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v190, (uint64_t)" present in the system\n", 23);
  sub_20E86A980(a2, (uint64_t)"\tout of that ", 13);
  sub_20FB5B8CC(a1 + 5184);
  v191 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v191, (uint64_t)" are free (", 11);
  sub_20FB5B8CC(a1 + 5184);
  v192 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v192, (uint64_t)" DoF total)\n", 12);
  *(_QWORD *)&v523[0] = operator new(0x20uLL);
  *(_OWORD *)((char *)v523 + 8) = xmmword_2102DBF70;
  strcpy(*(char **)&v523[0], "cv3d::vio::TimeOffsetVariable]");
  sub_20E8D1238(v523, 29, 1uLL);
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v193 = v523;
  else
    v193 = *(_OWORD **)&v523[0];
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v194 = BYTE7(v523[1]);
  else
    v194 = *((_QWORD *)&v523[0] + 1);
  v195 = sub_20E86A980(a2, (uint64_t)v193, v194);
  sub_20E86A980(v195, (uint64_t)": ", 2);
  v196 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v196, (uint64_t)"D variable\n", 11);
  if (SBYTE7(v523[1]) < 0)
    operator delete(*(void **)&v523[0]);
  v197 = sub_20E86A980(a2, (uint64_t)"\treferenced by ", 15);
  memset(&v522, 0, sizeof(v522));
  v198 = operator new(0x30uLL);
  *(_QWORD *)&v523[0] = v198;
  *(_OWORD *)((char *)v523 + 8) = v521;
  *v198 = v515[2];
  v198[1] = v515[1];
  *(_OWORD *)((char *)v198 + 29) = v515[0];
  *((_BYTE *)v198 + 45) = 0;
  sub_20E8D1238(v523, 44, 1uLL);
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v199 = (const std::string::value_type *)v523;
  else
    v199 = *(const std::string::value_type **)&v523[0];
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v200 = BYTE7(v523[1]);
  else
    v200 = *((_QWORD *)&v523[0] + 1);
  std::string::append(&v522, v199, v200);
  if (SBYTE7(v523[1]) < 0)
    operator delete(*(void **)&v523[0]);
  std::string::append(&v522, ", ", 2uLL);
  v201 = (char *)operator new(0x28uLL);
  *(_QWORD *)&v523[0] = v201;
  *(_OWORD *)((char *)v523 + 8) = *(_OWORD *)&v513[32];
  strcpy(v201 + 32, ">]");
  *(_OWORD *)v201 = *(_OWORD *)&v513[16];
  *((_OWORD *)v201 + 1) = *(_OWORD *)v513;
  sub_20E8D1238(v523, 33, 1uLL);
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v202 = (const std::string::value_type *)v523;
  else
    v202 = *(const std::string::value_type **)&v523[0];
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v203 = BYTE7(v523[1]);
  else
    v203 = *((_QWORD *)&v523[0] + 1);
  std::string::append(&v522, v202, v203);
  if (SBYTE7(v523[1]) < 0)
    operator delete(*(void **)&v523[0]);
  std::string::append(&v522, ", ", 2uLL);
  *(_QWORD *)&v523[0] = operator new(0x38uLL);
  *(_OWORD *)((char *)v523 + 8) = xmmword_2102DBF10;
  strcpy(*(char **)&v523[0], "cv3d::vio::StateAndIMUTimeOffsetPriorFactor<double>]");
  sub_20E8D1238(v523, 51, 1uLL);
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v204 = (const std::string::value_type *)v523;
  else
    v204 = *(const std::string::value_type **)&v523[0];
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v205 = BYTE7(v523[1]);
  else
    v205 = *((_QWORD *)&v523[0] + 1);
  std::string::append(&v522, v204, v205);
  if (SBYTE7(v523[1]) < 0)
    operator delete(*(void **)&v523[0]);
  if ((v522.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v206 = &v522;
  else
    v206 = (std::string *)v522.__r_.__value_.__r.__words[0];
  if ((v522.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v207 = HIBYTE(v522.__r_.__value_.__r.__words[2]);
  else
    v207 = v522.__r_.__value_.__l.__size_;
  v208 = sub_20E86A980(v197, (uint64_t)v206, v207);
  sub_20E86A980(v208, (uint64_t)"\n", 1);
  if (SHIBYTE(v522.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v522.__r_.__value_.__l.__data_);
  sub_20E86A980(a2, (uint64_t)"\tthere are ", 11);
  if (!*v85)
  {
    memset(v523, 0, 44);
    if (sub_20F8DEE48((_QWORD *)(a1 + 5184), (int *)v523, &v522, 1))
    {
      *(_QWORD *)(a1 + 7608) = *(_QWORD *)(a1 + 7600);
      *(_QWORD *)(a1 + 7632) = *(_QWORD *)(a1 + 7624);
      *(_QWORD *)(a1 + 7656) = *(_QWORD *)(a1 + 7648);
      *(_QWORD *)(a1 + 7680) = *(_QWORD *)(a1 + 7672);
      *(_QWORD *)(a1 + 7704) = *(_QWORD *)(a1 + 7696);
      *(_QWORD *)(a1 + 7728) = *(_QWORD *)(a1 + 7720);
      *(_QWORD *)(a1 + 7752) = *(_QWORD *)(a1 + 7744);
      *(_QWORD *)(a1 + 7776) = *(_QWORD *)(a1 + 7768);
      *(_QWORD *)(a1 + 7800) = *(_QWORD *)(a1 + 7792);
      *(_QWORD *)(a1 + 7824) = *(_QWORD *)(a1 + 7816);
      *(_QWORD *)(a1 + 7848) = *(_QWORD *)(a1 + 7840);
      v209 = *(_QWORD *)(a1 + 6248);
      v210 = *(_QWORD *)(a1 + 6256);
      while (v209 != v210)
      {
        v211 = *(_QWORD *)(v209 + 208);
        if (*(_BYTE *)(v209 + 496)
          || (*(_BYTE *)(v211 + 4) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v209 + 216) + 4) & 6) != 0)
        {
          sub_20F394A20(a1 + 7600, v211);
          sub_20F3D35E0((_QWORD *)(a1 + 7600), *(_QWORD *)(v209 + 216));
        }
        v209 += 504;
      }
      v212 = *(_QWORD *)(a1 + 6272);
      v213 = *(_QWORD *)(a1 + 6280);
      while (v212 != v213)
      {
        v214 = *(_QWORD *)(v212 + 136);
        if (*(_BYTE *)(v212 + 272) || (*(_BYTE *)(v214 + 4) & 6) != 0)
          sub_20F394A20(a1 + 7600, v214);
        v212 += 280;
      }
      v215 = *(_QWORD *)(a1 + 6296);
      v216 = *(_QWORD *)(a1 + 6304);
      while (v215 != v216)
      {
        v217 = *(_QWORD *)(v215 + 136);
        if (*(_BYTE *)(v215 + 272) || (*(_BYTE *)(v217 + 4) & 6) != 0)
          sub_20F599C88((_QWORD *)(a1 + 7600), v217);
        v215 += 280;
      }
      v218 = *(_QWORD *)(a1 + 6320);
      v219 = *(_QWORD *)(a1 + 6328);
      while (v218 != v219)
      {
        v220 = *(_QWORD *)(v218 + 136);
        if (*(_BYTE *)(v218 + 272) || (*(_BYTE *)(v220 + 4) & 6) != 0)
          sub_20F59A480((_QWORD *)(a1 + 7600), v220);
        v218 += 280;
      }
      v221 = *(_QWORD *)(a1 + 6344);
      v222 = *(_QWORD *)(a1 + 6352);
      while (v221 != v222)
      {
        v223 = *(_QWORD *)(v221 + 64);
        if (*(_BYTE *)(v221 + 152) || (*(_BYTE *)(v223 + 4) & 6) != 0)
          sub_20F59A2E8((_QWORD *)(a1 + 7600), v223);
        v221 += 160;
      }
      sub_20FA5640C(*(_QWORD *)(a1 + 6368), *(_QWORD *)(a1 + 6376), (_QWORD *)(a1 + 7600));
      sub_20F5B85BC(*(_QWORD *)(a1 + 6392), *(_QWORD *)(a1 + 6400), (_QWORD *)(a1 + 7600));
      v224 = *(_QWORD *)(a1 + 6416);
      v225 = *(_QWORD *)(a1 + 6424);
      while (v224 != v225)
      {
        v226 = *(_QWORD *)(v224 + 48);
        if (*(_BYTE *)(v224 + 136) || (*(_BYTE *)(v226 + 4) & 6) != 0)
          sub_20F3D35E0((_QWORD *)(a1 + 7600), v226);
        v224 += 144;
      }
      v227 = *(_QWORD *)(a1 + 6440);
      v228 = *(_QWORD *)(a1 + 6448);
      while (v227 != v228)
      {
        v229 = *(_QWORD *)(v227 + 48);
        if (*(_BYTE *)(v227 + 144)
          || (*(_BYTE *)(v229 + 4) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v227 + 56) + 4) & 6) != 0)
        {
          sub_20F394A20(a1 + 7600, v229);
          sub_20F394A20(a1 + 7600, *(_QWORD *)(v227 + 56));
        }
        v227 += 152;
      }
      sub_20FA56358(*(_QWORD *)(a1 + 6464), *(_QWORD *)(a1 + 6472), (_QWORD *)(a1 + 7600));
      sub_20F8DF65C(*(_QWORD *)(a1 + 6488), *(_QWORD *)(a1 + 6496), (_QWORD *)(a1 + 7600));
      v230 = *(_QWORD *)(a1 + 6512);
      v231 = *(_QWORD *)(a1 + 6520);
      while (v230 != v231)
      {
        v232 = *(_QWORD *)(v230 + 48);
        if (*(_BYTE *)(v230 + 104) || (*(_BYTE *)(v232 + 4) & 6) != 0)
          sub_20F59A150((_QWORD *)(a1 + 7600), v232);
        v230 += 112;
      }
      v233 = *(_QWORD *)(a1 + 6536);
      v234 = *(_QWORD *)(a1 + 6544);
      while (v233 != v234)
      {
        v235 = *(_QWORD *)(v233 + 96);
        if (*(_BYTE *)(v233 + 200) || (*(_BYTE *)(v235 + 4) & 6) != 0)
          sub_20F599E20((_QWORD *)(a1 + 7600), v235);
        v233 += 208;
      }
      v236 = *(_QWORD *)(a1 + 6560);
      v237 = *(_QWORD *)(a1 + 6568);
      while (v236 != v237)
      {
        v238 = *(_QWORD *)(v236 + 96);
        if (*(_BYTE *)(v236 + 200) || (*(_BYTE *)(v238 + 4) & 6) != 0)
          sub_20F8DAC28((_QWORD *)(a1 + 7600), v238);
        v236 += 208;
      }
      v239 = *(_QWORD *)(a1 + 6584);
      v240 = *(_QWORD *)(a1 + 6592);
      while (v239 != v240)
      {
        v241 = *(_QWORD *)(v239 + 80);
        if (*(_BYTE *)(v239 + 168) || (*(_BYTE *)(v241 + 4) & 6) != 0)
          sub_20F8DADC0((_QWORD *)(a1 + 7600), v241);
        v239 += 176;
      }
      v242 = *(_QWORD *)(a1 + 6608);
      v243 = *(_QWORD *)(a1 + 6616);
      while (v242 != v243)
      {
        v244 = *(_QWORD *)(v242 + 80);
        if (*(_BYTE *)(v242 + 168) || (*(_BYTE *)(v244 + 4) & 6) != 0)
          sub_20F599FB8((_QWORD *)(a1 + 7600), v244);
        v242 += 176;
      }
      sub_20FA561E0(*(_QWORD *)(a1 + 6632), *(_QWORD *)(a1 + 6640), (_QWORD *)(a1 + 7600));
      sub_20FA560F4(*(_QWORD *)(a1 + 6656), *(_QWORD *)(a1 + 6664), (_QWORD *)(a1 + 7600));
      sub_20FA55F7C(*(_QWORD *)(a1 + 6680), *(_QWORD *)(a1 + 6688), (_QWORD *)(a1 + 7600));
      sub_20FA55E74(*(_QWORD *)(a1 + 6704), *(_QWORD *)(a1 + 6712), (_QWORD *)(a1 + 7600));
      sub_20FA485B8((_QWORD *)(a1 + 5184));
    }
  }
  v245 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v245, (uint64_t)" present in the system\n", 23);
  sub_20E86A980(a2, (uint64_t)"\tout of that ", 13);
  sub_20FB5BE98(a1 + 5184);
  v246 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v246, (uint64_t)" are free (", 11);
  sub_20FB5BE98(a1 + 5184);
  v247 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v247, (uint64_t)" DoF total)\n", 12);
  *(_QWORD *)&v523[0] = operator new(0x28uLL);
  *(_OWORD *)((char *)v523 + 8) = v516;
  strcpy(*(char **)&v523[0], "cv3d::vio::Generic3DoFVariable<double>]");
  sub_20E8D1238(v523, 38, 1uLL);
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v248 = v523;
  else
    v248 = *(_OWORD **)&v523[0];
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v249 = BYTE7(v523[1]);
  else
    v249 = *((_QWORD *)&v523[0] + 1);
  v250 = sub_20E86A980(a2, (uint64_t)v248, v249);
  sub_20E86A980(v250, (uint64_t)": ", 2);
  v251 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v251, (uint64_t)"D variable\n", 11);
  if (SBYTE7(v523[1]) < 0)
    operator delete(*(void **)&v523[0]);
  v252 = sub_20E86A980(a2, (uint64_t)"\treferenced by ", 15);
  memset(&v522, 0, sizeof(v522));
  v253 = operator new(0x30uLL);
  *(_QWORD *)&v523[0] = v253;
  *(_OWORD *)((char *)v523 + 8) = v521;
  *v253 = v515[2];
  v253[1] = v515[1];
  *(_OWORD *)((char *)v253 + 29) = v515[0];
  *((_BYTE *)v253 + 45) = 0;
  sub_20E8D1238(v523, 44, 1uLL);
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v254 = (const std::string::value_type *)v523;
  else
    v254 = *(const std::string::value_type **)&v523[0];
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v255 = BYTE7(v523[1]);
  else
    v255 = *((_QWORD *)&v523[0] + 1);
  std::string::append(&v522, v254, v255);
  if (SBYTE7(v523[1]) < 0)
    operator delete(*(void **)&v523[0]);
  std::string::append(&v522, ", ", 2uLL);
  *(_QWORD *)&v523[0] = operator new(0x60uLL);
  *(_OWORD *)((char *)v523 + 8) = v511[1];
  strcpy(*(char **)&v523[0], "cv3d::vio::GenericCalibVariablePriorFactor<double, cv3d::vio::Generic3DoFVariable<double>>]");
  sub_20E8D1238(v523, 90, 1uLL);
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v256 = (const std::string::value_type *)v523;
  else
    v256 = *(const std::string::value_type **)&v523[0];
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v257 = BYTE7(v523[1]);
  else
    v257 = *((_QWORD *)&v523[0] + 1);
  std::string::append(&v522, v256, v257);
  if (SBYTE7(v523[1]) < 0)
    operator delete(*(void **)&v523[0]);
  if ((v522.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v258 = &v522;
  else
    v258 = (std::string *)v522.__r_.__value_.__r.__words[0];
  if ((v522.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v259 = HIBYTE(v522.__r_.__value_.__r.__words[2]);
  else
    v259 = v522.__r_.__value_.__l.__size_;
  v260 = sub_20E86A980(v252, (uint64_t)v258, v259);
  sub_20E86A980(v260, (uint64_t)"\n", 1);
  if (SHIBYTE(v522.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v522.__r_.__value_.__l.__data_);
  sub_20E86A980(a2, (uint64_t)"\tthere are ", 11);
  if (!*v85)
  {
    memset(v523, 0, 44);
    if (sub_20F8DEE48((_QWORD *)(a1 + 5184), (int *)v523, &v522, 1))
    {
      *(_QWORD *)(a1 + 7608) = *(_QWORD *)(a1 + 7600);
      *(_QWORD *)(a1 + 7632) = *(_QWORD *)(a1 + 7624);
      *(_QWORD *)(a1 + 7656) = *(_QWORD *)(a1 + 7648);
      *(_QWORD *)(a1 + 7680) = *(_QWORD *)(a1 + 7672);
      *(_QWORD *)(a1 + 7704) = *(_QWORD *)(a1 + 7696);
      *(_QWORD *)(a1 + 7728) = *(_QWORD *)(a1 + 7720);
      *(_QWORD *)(a1 + 7752) = *(_QWORD *)(a1 + 7744);
      *(_QWORD *)(a1 + 7776) = *(_QWORD *)(a1 + 7768);
      *(_QWORD *)(a1 + 7800) = *(_QWORD *)(a1 + 7792);
      *(_QWORD *)(a1 + 7824) = *(_QWORD *)(a1 + 7816);
      *(_QWORD *)(a1 + 7848) = *(_QWORD *)(a1 + 7840);
      v261 = *(_QWORD *)(a1 + 6248);
      v262 = *(_QWORD *)(a1 + 6256);
      while (v261 != v262)
      {
        v263 = *(_QWORD *)(v261 + 208);
        if (*(_BYTE *)(v261 + 496)
          || (*(_BYTE *)(v263 + 4) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v261 + 216) + 4) & 6) != 0)
        {
          sub_20F394A20(a1 + 7600, v263);
          sub_20F3D35E0((_QWORD *)(a1 + 7600), *(_QWORD *)(v261 + 216));
        }
        v261 += 504;
      }
      v264 = *(_QWORD *)(a1 + 6272);
      v265 = *(_QWORD *)(a1 + 6280);
      while (v264 != v265)
      {
        v266 = *(_QWORD *)(v264 + 136);
        if (*(_BYTE *)(v264 + 272) || (*(_BYTE *)(v266 + 4) & 6) != 0)
          sub_20F394A20(a1 + 7600, v266);
        v264 += 280;
      }
      v267 = *(_QWORD *)(a1 + 6296);
      v268 = *(_QWORD *)(a1 + 6304);
      while (v267 != v268)
      {
        v269 = *(_QWORD *)(v267 + 136);
        if (*(_BYTE *)(v267 + 272) || (*(_BYTE *)(v269 + 4) & 6) != 0)
          sub_20F599C88((_QWORD *)(a1 + 7600), v269);
        v267 += 280;
      }
      v270 = *(_QWORD *)(a1 + 6320);
      v271 = *(_QWORD *)(a1 + 6328);
      while (v270 != v271)
      {
        v272 = *(_QWORD *)(v270 + 136);
        if (*(_BYTE *)(v270 + 272) || (*(_BYTE *)(v272 + 4) & 6) != 0)
          sub_20F59A480((_QWORD *)(a1 + 7600), v272);
        v270 += 280;
      }
      v273 = *(_QWORD *)(a1 + 6344);
      v274 = *(_QWORD *)(a1 + 6352);
      while (v273 != v274)
      {
        v275 = *(_QWORD *)(v273 + 64);
        if (*(_BYTE *)(v273 + 152) || (*(_BYTE *)(v275 + 4) & 6) != 0)
          sub_20F59A2E8((_QWORD *)(a1 + 7600), v275);
        v273 += 160;
      }
      sub_20FA5640C(*(_QWORD *)(a1 + 6368), *(_QWORD *)(a1 + 6376), (_QWORD *)(a1 + 7600));
      sub_20F5B85BC(*(_QWORD *)(a1 + 6392), *(_QWORD *)(a1 + 6400), (_QWORD *)(a1 + 7600));
      v276 = *(_QWORD *)(a1 + 6416);
      v277 = *(_QWORD *)(a1 + 6424);
      while (v276 != v277)
      {
        v278 = *(_QWORD *)(v276 + 48);
        if (*(_BYTE *)(v276 + 136) || (*(_BYTE *)(v278 + 4) & 6) != 0)
          sub_20F3D35E0((_QWORD *)(a1 + 7600), v278);
        v276 += 144;
      }
      v279 = *(_QWORD *)(a1 + 6440);
      v280 = *(_QWORD *)(a1 + 6448);
      while (v279 != v280)
      {
        v281 = *(_QWORD *)(v279 + 48);
        if (*(_BYTE *)(v279 + 144)
          || (*(_BYTE *)(v281 + 4) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v279 + 56) + 4) & 6) != 0)
        {
          sub_20F394A20(a1 + 7600, v281);
          sub_20F394A20(a1 + 7600, *(_QWORD *)(v279 + 56));
        }
        v279 += 152;
      }
      sub_20FA56358(*(_QWORD *)(a1 + 6464), *(_QWORD *)(a1 + 6472), (_QWORD *)(a1 + 7600));
      sub_20F8DF65C(*(_QWORD *)(a1 + 6488), *(_QWORD *)(a1 + 6496), (_QWORD *)(a1 + 7600));
      v282 = *(_QWORD *)(a1 + 6512);
      v283 = *(_QWORD *)(a1 + 6520);
      while (v282 != v283)
      {
        v284 = *(_QWORD *)(v282 + 48);
        if (*(_BYTE *)(v282 + 104) || (*(_BYTE *)(v284 + 4) & 6) != 0)
          sub_20F59A150((_QWORD *)(a1 + 7600), v284);
        v282 += 112;
      }
      v285 = *(_QWORD *)(a1 + 6536);
      v286 = *(_QWORD *)(a1 + 6544);
      while (v285 != v286)
      {
        v287 = *(_QWORD *)(v285 + 96);
        if (*(_BYTE *)(v285 + 200) || (*(_BYTE *)(v287 + 4) & 6) != 0)
          sub_20F599E20((_QWORD *)(a1 + 7600), v287);
        v285 += 208;
      }
      v288 = *(_QWORD *)(a1 + 6560);
      v289 = *(_QWORD *)(a1 + 6568);
      while (v288 != v289)
      {
        v290 = *(_QWORD *)(v288 + 96);
        if (*(_BYTE *)(v288 + 200) || (*(_BYTE *)(v290 + 4) & 6) != 0)
          sub_20F8DAC28((_QWORD *)(a1 + 7600), v290);
        v288 += 208;
      }
      v291 = *(_QWORD *)(a1 + 6584);
      v292 = *(_QWORD *)(a1 + 6592);
      while (v291 != v292)
      {
        v293 = *(_QWORD *)(v291 + 80);
        if (*(_BYTE *)(v291 + 168) || (*(_BYTE *)(v293 + 4) & 6) != 0)
          sub_20F8DADC0((_QWORD *)(a1 + 7600), v293);
        v291 += 176;
      }
      v294 = *(_QWORD *)(a1 + 6608);
      v295 = *(_QWORD *)(a1 + 6616);
      while (v294 != v295)
      {
        v296 = *(_QWORD *)(v294 + 80);
        if (*(_BYTE *)(v294 + 168) || (*(_BYTE *)(v296 + 4) & 6) != 0)
          sub_20F599FB8((_QWORD *)(a1 + 7600), v296);
        v294 += 176;
      }
      sub_20FA561E0(*(_QWORD *)(a1 + 6632), *(_QWORD *)(a1 + 6640), (_QWORD *)(a1 + 7600));
      sub_20FA560F4(*(_QWORD *)(a1 + 6656), *(_QWORD *)(a1 + 6664), (_QWORD *)(a1 + 7600));
      sub_20FA55F7C(*(_QWORD *)(a1 + 6680), *(_QWORD *)(a1 + 6688), (_QWORD *)(a1 + 7600));
      sub_20FA55E74(*(_QWORD *)(a1 + 6704), *(_QWORD *)(a1 + 6712), (_QWORD *)(a1 + 7600));
      sub_20FA485B8((_QWORD *)(a1 + 5184));
    }
  }
  v297 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v297, (uint64_t)" present in the system\n", 23);
  sub_20E86A980(a2, (uint64_t)"\tout of that ", 13);
  sub_20FB5C464(a1 + 5184);
  v298 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v298, (uint64_t)" are free (", 11);
  sub_20FB5C464(a1 + 5184);
  v299 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v299, (uint64_t)" DoF total)\n", 12);
  *(_QWORD *)&v523[0] = operator new(0x30uLL);
  *(_OWORD *)((char *)v523 + 8) = xmmword_2102DC8E0;
  strcpy(*(char **)&v523[0], "cv3d::vio::IntrinsicsCalibVariable<double>]");
  sub_20E8D1238(v523, 42, 1uLL);
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v300 = v523;
  else
    v300 = *(_OWORD **)&v523[0];
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v301 = BYTE7(v523[1]);
  else
    v301 = *((_QWORD *)&v523[0] + 1);
  v302 = sub_20E86A980(a2, (uint64_t)v300, v301);
  sub_20E86A980(v302, (uint64_t)": ", 2);
  v303 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v303, (uint64_t)"D variable\n", 11);
  if (SBYTE7(v523[1]) < 0)
    operator delete(*(void **)&v523[0]);
  v304 = sub_20E86A980(a2, (uint64_t)"\treferenced by ", 15);
  memset(&v522, 0, sizeof(v522));
  v305 = operator new(0x30uLL);
  *(_QWORD *)&v523[0] = v305;
  *(_OWORD *)((char *)v523 + 8) = *(_OWORD *)&v514[32];
  *(_OWORD *)v305 = *(_OWORD *)&v514[16];
  *((_OWORD *)v305 + 1) = *(_OWORD *)v514;
  strcpy((char *)v305 + 32, "double>]");
  sub_20E8D1238(v523, 39, 1uLL);
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v306 = (const std::string::value_type *)v523;
  else
    v306 = *(const std::string::value_type **)&v523[0];
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v307 = BYTE7(v523[1]);
  else
    v307 = *((_QWORD *)&v523[0] + 1);
  std::string::append(&v522, v306, v307);
  if (SBYTE7(v523[1]) < 0)
    operator delete(*(void **)&v523[0]);
  std::string::append(&v522, ", ", 2uLL);
  *(_QWORD *)&v523[0] = operator new(0x60uLL);
  *(_OWORD *)((char *)v523 + 8) = xmmword_2103B84B0;
  strcpy(*(char **)&v523[0], "cv3d::vio::GenericCalibVariablePriorFactor<double, cv3d::vio::IntrinsicsCalibVariable<double>>]");
  sub_20E8D1238(v523, 94, 1uLL);
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v308 = (const std::string::value_type *)v523;
  else
    v308 = *(const std::string::value_type **)&v523[0];
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v309 = BYTE7(v523[1]);
  else
    v309 = *((_QWORD *)&v523[0] + 1);
  std::string::append(&v522, v308, v309);
  if (SBYTE7(v523[1]) < 0)
    operator delete(*(void **)&v523[0]);
  std::string::append(&v522, ", ", 2uLL);
  v310 = operator new(0x50uLL);
  *(_QWORD *)&v523[0] = v310;
  *(_OWORD *)((char *)v523 + 8) = *(_OWORD *)&v519[80];
  v310[2] = *(_OWORD *)&v519[64];
  v310[3] = *(_OWORD *)&v519[48];
  *(_OWORD *)((char *)v310 + 58) = *(_OWORD *)&v519[32];
  *v310 = *(_OWORD *)v519;
  v310[1] = *(_OWORD *)&v519[16];
  *((_BYTE *)v310 + 74) = 0;
  sub_20E8D1238(v523, 73, 1uLL);
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v311 = (const std::string::value_type *)v523;
  else
    v311 = *(const std::string::value_type **)&v523[0];
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v312 = BYTE7(v523[1]);
  else
    v312 = *((_QWORD *)&v523[0] + 1);
  std::string::append(&v522, v311, v312);
  if (SBYTE7(v523[1]) < 0)
    operator delete(*(void **)&v523[0]);
  std::string::append(&v522, ", ", 2uLL);
  v313 = operator new(0x40uLL);
  *(_QWORD *)&v523[0] = v313;
  *(_OWORD *)((char *)v523 + 8) = *(_OWORD *)&v520[64];
  *v313 = *(_OWORD *)&v520[48];
  v313[1] = *(_OWORD *)&v520[32];
  v313[2] = *(_OWORD *)&v520[16];
  *(_OWORD *)((char *)v313 + 46) = *(_OWORD *)v520;
  *((_BYTE *)v313 + 62) = 0;
  sub_20E8D1238(v523, 61, 1uLL);
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v314 = (const std::string::value_type *)v523;
  else
    v314 = *(const std::string::value_type **)&v523[0];
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v315 = BYTE7(v523[1]);
  else
    v315 = *((_QWORD *)&v523[0] + 1);
  std::string::append(&v522, v314, v315);
  if (SBYTE7(v523[1]) < 0)
    operator delete(*(void **)&v523[0]);
  std::string::append(&v522, ", ", 2uLL);
  v316 = operator new(0x60uLL);
  *(_QWORD *)&v523[0] = v316;
  *(_OWORD *)((char *)v523 + 8) = *(_OWORD *)&v518[96];
  v316[2] = *(_OWORD *)&v518[80];
  v316[3] = *(_OWORD *)&v518[64];
  v316[4] = *(_OWORD *)&v518[48];
  *(_OWORD *)((char *)v316 + 77) = *(_OWORD *)&v518[32];
  *v316 = *(_OWORD *)&v518[16];
  v316[1] = *(_OWORD *)v518;
  *((_BYTE *)v316 + 93) = 0;
  sub_20E8D1238(v523, 92, 1uLL);
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v317 = (const std::string::value_type *)v523;
  else
    v317 = *(const std::string::value_type **)&v523[0];
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v318 = BYTE7(v523[1]);
  else
    v318 = *((_QWORD *)&v523[0] + 1);
  std::string::append(&v522, v317, v318);
  if (SBYTE7(v523[1]) < 0)
    operator delete(*(void **)&v523[0]);
  std::string::append(&v522, ", ", 2uLL);
  v319 = operator new(0x50uLL);
  *(_QWORD *)&v523[0] = v319;
  *(_OWORD *)((char *)v523 + 8) = *(_OWORD *)&v517[80];
  v319[2] = *(_OWORD *)&v517[64];
  v319[3] = *(_OWORD *)&v517[48];
  *(_OWORD *)((char *)v319 + 62) = *(_OWORD *)&v517[32];
  *v319 = *(_OWORD *)v517;
  v319[1] = *(_OWORD *)&v517[16];
  *((_BYTE *)v319 + 78) = 0;
  sub_20E8D1238(v523, 77, 1uLL);
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v320 = (const std::string::value_type *)v523;
  else
    v320 = *(const std::string::value_type **)&v523[0];
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v321 = BYTE7(v523[1]);
  else
    v321 = *((_QWORD *)&v523[0] + 1);
  std::string::append(&v522, v320, v321);
  if (SBYTE7(v523[1]) < 0)
    operator delete(*(void **)&v523[0]);
  if ((v522.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v322 = &v522;
  else
    v322 = (std::string *)v522.__r_.__value_.__r.__words[0];
  if ((v522.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v323 = HIBYTE(v522.__r_.__value_.__r.__words[2]);
  else
    v323 = v522.__r_.__value_.__l.__size_;
  v324 = sub_20E86A980(v304, (uint64_t)v322, v323);
  sub_20E86A980(v324, (uint64_t)"\n", 1);
  if (SHIBYTE(v522.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v522.__r_.__value_.__l.__data_);
  sub_20E86A980(a2, (uint64_t)"\tthere are ", 11);
  if (!*v85)
  {
    memset(v523, 0, 44);
    if (sub_20F8DEE48((_QWORD *)(a1 + 5184), (int *)v523, &v522, 1))
    {
      *(_QWORD *)(a1 + 7608) = *(_QWORD *)(a1 + 7600);
      *(_QWORD *)(a1 + 7632) = *(_QWORD *)(a1 + 7624);
      *(_QWORD *)(a1 + 7656) = *(_QWORD *)(a1 + 7648);
      *(_QWORD *)(a1 + 7680) = *(_QWORD *)(a1 + 7672);
      *(_QWORD *)(a1 + 7704) = *(_QWORD *)(a1 + 7696);
      *(_QWORD *)(a1 + 7728) = *(_QWORD *)(a1 + 7720);
      *(_QWORD *)(a1 + 7752) = *(_QWORD *)(a1 + 7744);
      *(_QWORD *)(a1 + 7776) = *(_QWORD *)(a1 + 7768);
      *(_QWORD *)(a1 + 7800) = *(_QWORD *)(a1 + 7792);
      *(_QWORD *)(a1 + 7824) = *(_QWORD *)(a1 + 7816);
      *(_QWORD *)(a1 + 7848) = *(_QWORD *)(a1 + 7840);
      v325 = *(_QWORD *)(a1 + 6248);
      v326 = *(_QWORD *)(a1 + 6256);
      while (v325 != v326)
      {
        v327 = *(_QWORD *)(v325 + 208);
        if (*(_BYTE *)(v325 + 496)
          || (*(_BYTE *)(v327 + 4) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v325 + 216) + 4) & 6) != 0)
        {
          sub_20F394A20(a1 + 7600, v327);
          sub_20F3D35E0((_QWORD *)(a1 + 7600), *(_QWORD *)(v325 + 216));
        }
        v325 += 504;
      }
      v328 = *(_QWORD *)(a1 + 6272);
      v329 = *(_QWORD *)(a1 + 6280);
      while (v328 != v329)
      {
        v330 = *(_QWORD *)(v328 + 136);
        if (*(_BYTE *)(v328 + 272) || (*(_BYTE *)(v330 + 4) & 6) != 0)
          sub_20F394A20(a1 + 7600, v330);
        v328 += 280;
      }
      v331 = *(_QWORD *)(a1 + 6296);
      v332 = *(_QWORD *)(a1 + 6304);
      while (v331 != v332)
      {
        v333 = *(_QWORD *)(v331 + 136);
        if (*(_BYTE *)(v331 + 272) || (*(_BYTE *)(v333 + 4) & 6) != 0)
          sub_20F599C88((_QWORD *)(a1 + 7600), v333);
        v331 += 280;
      }
      v334 = *(_QWORD *)(a1 + 6320);
      v335 = *(_QWORD *)(a1 + 6328);
      while (v334 != v335)
      {
        v336 = *(_QWORD *)(v334 + 136);
        if (*(_BYTE *)(v334 + 272) || (*(_BYTE *)(v336 + 4) & 6) != 0)
          sub_20F59A480((_QWORD *)(a1 + 7600), v336);
        v334 += 280;
      }
      v337 = *(_QWORD *)(a1 + 6344);
      v338 = *(_QWORD *)(a1 + 6352);
      while (v337 != v338)
      {
        v339 = *(_QWORD *)(v337 + 64);
        if (*(_BYTE *)(v337 + 152) || (*(_BYTE *)(v339 + 4) & 6) != 0)
          sub_20F59A2E8((_QWORD *)(a1 + 7600), v339);
        v337 += 160;
      }
      sub_20FA5640C(*(_QWORD *)(a1 + 6368), *(_QWORD *)(a1 + 6376), (_QWORD *)(a1 + 7600));
      sub_20F5B85BC(*(_QWORD *)(a1 + 6392), *(_QWORD *)(a1 + 6400), (_QWORD *)(a1 + 7600));
      v340 = *(_QWORD *)(a1 + 6416);
      v341 = *(_QWORD *)(a1 + 6424);
      while (v340 != v341)
      {
        v342 = *(_QWORD *)(v340 + 48);
        if (*(_BYTE *)(v340 + 136) || (*(_BYTE *)(v342 + 4) & 6) != 0)
          sub_20F3D35E0((_QWORD *)(a1 + 7600), v342);
        v340 += 144;
      }
      v343 = *(_QWORD *)(a1 + 6440);
      v344 = *(_QWORD *)(a1 + 6448);
      while (v343 != v344)
      {
        v345 = *(_QWORD *)(v343 + 48);
        if (*(_BYTE *)(v343 + 144)
          || (*(_BYTE *)(v345 + 4) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v343 + 56) + 4) & 6) != 0)
        {
          sub_20F394A20(a1 + 7600, v345);
          sub_20F394A20(a1 + 7600, *(_QWORD *)(v343 + 56));
        }
        v343 += 152;
      }
      sub_20FA56358(*(_QWORD *)(a1 + 6464), *(_QWORD *)(a1 + 6472), (_QWORD *)(a1 + 7600));
      sub_20F8DF65C(*(_QWORD *)(a1 + 6488), *(_QWORD *)(a1 + 6496), (_QWORD *)(a1 + 7600));
      v346 = *(_QWORD *)(a1 + 6512);
      v347 = *(_QWORD *)(a1 + 6520);
      while (v346 != v347)
      {
        v348 = *(_QWORD *)(v346 + 48);
        if (*(_BYTE *)(v346 + 104) || (*(_BYTE *)(v348 + 4) & 6) != 0)
          sub_20F59A150((_QWORD *)(a1 + 7600), v348);
        v346 += 112;
      }
      v349 = *(_QWORD *)(a1 + 6536);
      v350 = *(_QWORD *)(a1 + 6544);
      while (v349 != v350)
      {
        v351 = *(_QWORD *)(v349 + 96);
        if (*(_BYTE *)(v349 + 200) || (*(_BYTE *)(v351 + 4) & 6) != 0)
          sub_20F599E20((_QWORD *)(a1 + 7600), v351);
        v349 += 208;
      }
      v352 = *(_QWORD *)(a1 + 6560);
      v353 = *(_QWORD *)(a1 + 6568);
      while (v352 != v353)
      {
        v354 = *(_QWORD *)(v352 + 96);
        if (*(_BYTE *)(v352 + 200) || (*(_BYTE *)(v354 + 4) & 6) != 0)
          sub_20F8DAC28((_QWORD *)(a1 + 7600), v354);
        v352 += 208;
      }
      v355 = *(_QWORD *)(a1 + 6584);
      v356 = *(_QWORD *)(a1 + 6592);
      while (v355 != v356)
      {
        v357 = *(_QWORD *)(v355 + 80);
        if (*(_BYTE *)(v355 + 168) || (*(_BYTE *)(v357 + 4) & 6) != 0)
          sub_20F8DADC0((_QWORD *)(a1 + 7600), v357);
        v355 += 176;
      }
      v358 = *(_QWORD *)(a1 + 6608);
      v359 = *(_QWORD *)(a1 + 6616);
      while (v358 != v359)
      {
        v360 = *(_QWORD *)(v358 + 80);
        if (*(_BYTE *)(v358 + 168) || (*(_BYTE *)(v360 + 4) & 6) != 0)
          sub_20F599FB8((_QWORD *)(a1 + 7600), v360);
        v358 += 176;
      }
      sub_20FA561E0(*(_QWORD *)(a1 + 6632), *(_QWORD *)(a1 + 6640), (_QWORD *)(a1 + 7600));
      sub_20FA560F4(*(_QWORD *)(a1 + 6656), *(_QWORD *)(a1 + 6664), (_QWORD *)(a1 + 7600));
      sub_20FA55F7C(*(_QWORD *)(a1 + 6680), *(_QWORD *)(a1 + 6688), (_QWORD *)(a1 + 7600));
      sub_20FA55E74(*(_QWORD *)(a1 + 6704), *(_QWORD *)(a1 + 6712), (_QWORD *)(a1 + 7600));
      sub_20FA485B8((_QWORD *)(a1 + 5184));
    }
  }
  v361 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v361, (uint64_t)" present in the system\n", 23);
  sub_20E86A980(a2, (uint64_t)"\tout of that ", 13);
  sub_20FB5CA34(a1 + 5184);
  v362 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v362, (uint64_t)" are free (", 11);
  sub_20FB5CA34(a1 + 5184);
  v363 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v363, (uint64_t)" DoF total)\n", 12);
  *(_QWORD *)&v523[0] = operator new(0x38uLL);
  *(_OWORD *)((char *)v523 + 8) = xmmword_2102DC7C0;
  strcpy(*(char **)&v523[0], "cv3d::vio::RadialDistortionCalibVariable<double>]");
  sub_20E8D1238(v523, 48, 1uLL);
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v364 = v523;
  else
    v364 = *(_OWORD **)&v523[0];
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v365 = BYTE7(v523[1]);
  else
    v365 = *((_QWORD *)&v523[0] + 1);
  v366 = sub_20E86A980(a2, (uint64_t)v364, v365);
  sub_20E86A980(v366, (uint64_t)": ", 2);
  v367 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v367, (uint64_t)"D variable\n", 11);
  if (SBYTE7(v523[1]) < 0)
    operator delete(*(void **)&v523[0]);
  v368 = sub_20E86A980(a2, (uint64_t)"\treferenced by ", 15);
  memset(&v522, 0, sizeof(v522));
  v369 = operator new(0x30uLL);
  *(_QWORD *)&v523[0] = v369;
  *(_OWORD *)((char *)v523 + 8) = *(_OWORD *)&v514[32];
  *(_OWORD *)v369 = *(_OWORD *)&v514[16];
  *((_OWORD *)v369 + 1) = *(_OWORD *)v514;
  strcpy((char *)v369 + 32, "double>]");
  sub_20E8D1238(v523, 39, 1uLL);
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v370 = (const std::string::value_type *)v523;
  else
    v370 = *(const std::string::value_type **)&v523[0];
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v371 = BYTE7(v523[1]);
  else
    v371 = *((_QWORD *)&v523[0] + 1);
  std::string::append(&v522, v370, v371);
  if (SBYTE7(v523[1]) < 0)
    operator delete(*(void **)&v523[0]);
  std::string::append(&v522, ", ", 2uLL);
  *(_QWORD *)&v523[0] = operator new(0x68uLL);
  *(_OWORD *)((char *)v523 + 8) = xmmword_2102DCFA0;
  strcpy(*(char **)&v523[0], "cv3d::vio::GenericCalibVariablePriorFactor<double, cv3d::vio::RadialDistortionCalibVariable<double>>]");
  sub_20E8D1238(v523, 100, 1uLL);
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v372 = (const std::string::value_type *)v523;
  else
    v372 = *(const std::string::value_type **)&v523[0];
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v373 = BYTE7(v523[1]);
  else
    v373 = *((_QWORD *)&v523[0] + 1);
  std::string::append(&v522, v372, v373);
  if (SBYTE7(v523[1]) < 0)
    operator delete(*(void **)&v523[0]);
  std::string::append(&v522, ", ", 2uLL);
  v374 = operator new(0x50uLL);
  *(_QWORD *)&v523[0] = v374;
  *(_OWORD *)((char *)v523 + 8) = *(_OWORD *)&v519[80];
  v374[2] = *(_OWORD *)&v519[64];
  v374[3] = *(_OWORD *)&v519[48];
  *(_OWORD *)((char *)v374 + 58) = *(_OWORD *)&v519[32];
  *v374 = *(_OWORD *)v519;
  v374[1] = *(_OWORD *)&v519[16];
  *((_BYTE *)v374 + 74) = 0;
  sub_20E8D1238(v523, 73, 1uLL);
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v375 = (const std::string::value_type *)v523;
  else
    v375 = *(const std::string::value_type **)&v523[0];
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v376 = BYTE7(v523[1]);
  else
    v376 = *((_QWORD *)&v523[0] + 1);
  std::string::append(&v522, v375, v376);
  if (SBYTE7(v523[1]) < 0)
    operator delete(*(void **)&v523[0]);
  std::string::append(&v522, ", ", 2uLL);
  v377 = operator new(0x40uLL);
  *(_QWORD *)&v523[0] = v377;
  *(_OWORD *)((char *)v523 + 8) = *(_OWORD *)&v520[64];
  *v377 = *(_OWORD *)&v520[48];
  v377[1] = *(_OWORD *)&v520[32];
  v377[2] = *(_OWORD *)&v520[16];
  *(_OWORD *)((char *)v377 + 46) = *(_OWORD *)v520;
  *((_BYTE *)v377 + 62) = 0;
  sub_20E8D1238(v523, 61, 1uLL);
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v378 = (const std::string::value_type *)v523;
  else
    v378 = *(const std::string::value_type **)&v523[0];
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v379 = BYTE7(v523[1]);
  else
    v379 = *((_QWORD *)&v523[0] + 1);
  std::string::append(&v522, v378, v379);
  if (SBYTE7(v523[1]) < 0)
    operator delete(*(void **)&v523[0]);
  std::string::append(&v522, ", ", 2uLL);
  v380 = operator new(0x60uLL);
  *(_QWORD *)&v523[0] = v380;
  *(_OWORD *)((char *)v523 + 8) = *(_OWORD *)&v518[96];
  v380[2] = *(_OWORD *)&v518[80];
  v380[3] = *(_OWORD *)&v518[64];
  v380[4] = *(_OWORD *)&v518[48];
  *(_OWORD *)((char *)v380 + 77) = *(_OWORD *)&v518[32];
  *v380 = *(_OWORD *)&v518[16];
  v380[1] = *(_OWORD *)v518;
  *((_BYTE *)v380 + 93) = 0;
  sub_20E8D1238(v523, 92, 1uLL);
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v381 = (const std::string::value_type *)v523;
  else
    v381 = *(const std::string::value_type **)&v523[0];
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v382 = BYTE7(v523[1]);
  else
    v382 = *((_QWORD *)&v523[0] + 1);
  std::string::append(&v522, v381, v382);
  if (SBYTE7(v523[1]) < 0)
    operator delete(*(void **)&v523[0]);
  std::string::append(&v522, ", ", 2uLL);
  v383 = operator new(0x50uLL);
  *(_QWORD *)&v523[0] = v383;
  *(_OWORD *)((char *)v523 + 8) = *(_OWORD *)&v517[80];
  v383[2] = *(_OWORD *)&v517[64];
  v383[3] = *(_OWORD *)&v517[48];
  *(_OWORD *)((char *)v383 + 62) = *(_OWORD *)&v517[32];
  *v383 = *(_OWORD *)v517;
  v383[1] = *(_OWORD *)&v517[16];
  *((_BYTE *)v383 + 78) = 0;
  sub_20E8D1238(v523, 77, 1uLL);
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v384 = (const std::string::value_type *)v523;
  else
    v384 = *(const std::string::value_type **)&v523[0];
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v385 = BYTE7(v523[1]);
  else
    v385 = *((_QWORD *)&v523[0] + 1);
  std::string::append(&v522, v384, v385);
  if (SBYTE7(v523[1]) < 0)
    operator delete(*(void **)&v523[0]);
  if ((v522.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v386 = &v522;
  else
    v386 = (std::string *)v522.__r_.__value_.__r.__words[0];
  if ((v522.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v387 = HIBYTE(v522.__r_.__value_.__r.__words[2]);
  else
    v387 = v522.__r_.__value_.__l.__size_;
  v388 = sub_20E86A980(v368, (uint64_t)v386, v387);
  sub_20E86A980(v388, (uint64_t)"\n", 1);
  if (SHIBYTE(v522.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v522.__r_.__value_.__l.__data_);
  sub_20E86A980(a2, (uint64_t)"\tthere are ", 11);
  if (!*v85)
  {
    memset(v523, 0, 44);
    if (sub_20F8DEE48((_QWORD *)(a1 + 5184), (int *)v523, &v522, 1))
    {
      *(_QWORD *)(a1 + 7608) = *(_QWORD *)(a1 + 7600);
      *(_QWORD *)(a1 + 7632) = *(_QWORD *)(a1 + 7624);
      *(_QWORD *)(a1 + 7656) = *(_QWORD *)(a1 + 7648);
      *(_QWORD *)(a1 + 7680) = *(_QWORD *)(a1 + 7672);
      *(_QWORD *)(a1 + 7704) = *(_QWORD *)(a1 + 7696);
      *(_QWORD *)(a1 + 7728) = *(_QWORD *)(a1 + 7720);
      *(_QWORD *)(a1 + 7752) = *(_QWORD *)(a1 + 7744);
      *(_QWORD *)(a1 + 7776) = *(_QWORD *)(a1 + 7768);
      *(_QWORD *)(a1 + 7800) = *(_QWORD *)(a1 + 7792);
      *(_QWORD *)(a1 + 7824) = *(_QWORD *)(a1 + 7816);
      *(_QWORD *)(a1 + 7848) = *(_QWORD *)(a1 + 7840);
      v389 = *(_QWORD *)(a1 + 6248);
      v390 = *(_QWORD *)(a1 + 6256);
      while (v389 != v390)
      {
        v391 = *(_QWORD *)(v389 + 208);
        if (*(_BYTE *)(v389 + 496)
          || (*(_BYTE *)(v391 + 4) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v389 + 216) + 4) & 6) != 0)
        {
          sub_20F394A20(a1 + 7600, v391);
          sub_20F3D35E0((_QWORD *)(a1 + 7600), *(_QWORD *)(v389 + 216));
        }
        v389 += 504;
      }
      v392 = *(_QWORD *)(a1 + 6272);
      v393 = *(_QWORD *)(a1 + 6280);
      while (v392 != v393)
      {
        v394 = *(_QWORD *)(v392 + 136);
        if (*(_BYTE *)(v392 + 272) || (*(_BYTE *)(v394 + 4) & 6) != 0)
          sub_20F394A20(a1 + 7600, v394);
        v392 += 280;
      }
      v395 = *(_QWORD *)(a1 + 6296);
      v396 = *(_QWORD *)(a1 + 6304);
      while (v395 != v396)
      {
        v397 = *(_QWORD *)(v395 + 136);
        if (*(_BYTE *)(v395 + 272) || (*(_BYTE *)(v397 + 4) & 6) != 0)
          sub_20F599C88((_QWORD *)(a1 + 7600), v397);
        v395 += 280;
      }
      v398 = *(_QWORD *)(a1 + 6320);
      v399 = *(_QWORD *)(a1 + 6328);
      while (v398 != v399)
      {
        v400 = *(_QWORD *)(v398 + 136);
        if (*(_BYTE *)(v398 + 272) || (*(_BYTE *)(v400 + 4) & 6) != 0)
          sub_20F59A480((_QWORD *)(a1 + 7600), v400);
        v398 += 280;
      }
      v401 = *(_QWORD *)(a1 + 6344);
      v402 = *(_QWORD *)(a1 + 6352);
      while (v401 != v402)
      {
        v403 = *(_QWORD *)(v401 + 64);
        if (*(_BYTE *)(v401 + 152) || (*(_BYTE *)(v403 + 4) & 6) != 0)
          sub_20F59A2E8((_QWORD *)(a1 + 7600), v403);
        v401 += 160;
      }
      sub_20FA5640C(*(_QWORD *)(a1 + 6368), *(_QWORD *)(a1 + 6376), (_QWORD *)(a1 + 7600));
      sub_20F5B85BC(*(_QWORD *)(a1 + 6392), *(_QWORD *)(a1 + 6400), (_QWORD *)(a1 + 7600));
      v404 = *(_QWORD *)(a1 + 6416);
      v405 = *(_QWORD *)(a1 + 6424);
      while (v404 != v405)
      {
        v406 = *(_QWORD *)(v404 + 48);
        if (*(_BYTE *)(v404 + 136) || (*(_BYTE *)(v406 + 4) & 6) != 0)
          sub_20F3D35E0((_QWORD *)(a1 + 7600), v406);
        v404 += 144;
      }
      v407 = *(_QWORD *)(a1 + 6440);
      v408 = *(_QWORD *)(a1 + 6448);
      while (v407 != v408)
      {
        v409 = *(_QWORD *)(v407 + 48);
        if (*(_BYTE *)(v407 + 144)
          || (*(_BYTE *)(v409 + 4) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v407 + 56) + 4) & 6) != 0)
        {
          sub_20F394A20(a1 + 7600, v409);
          sub_20F394A20(a1 + 7600, *(_QWORD *)(v407 + 56));
        }
        v407 += 152;
      }
      sub_20FA56358(*(_QWORD *)(a1 + 6464), *(_QWORD *)(a1 + 6472), (_QWORD *)(a1 + 7600));
      sub_20F8DF65C(*(_QWORD *)(a1 + 6488), *(_QWORD *)(a1 + 6496), (_QWORD *)(a1 + 7600));
      v410 = *(_QWORD *)(a1 + 6512);
      v411 = *(_QWORD *)(a1 + 6520);
      while (v410 != v411)
      {
        v412 = *(_QWORD *)(v410 + 48);
        if (*(_BYTE *)(v410 + 104) || (*(_BYTE *)(v412 + 4) & 6) != 0)
          sub_20F59A150((_QWORD *)(a1 + 7600), v412);
        v410 += 112;
      }
      v413 = *(_QWORD *)(a1 + 6536);
      v414 = *(_QWORD *)(a1 + 6544);
      while (v413 != v414)
      {
        v415 = *(_QWORD *)(v413 + 96);
        if (*(_BYTE *)(v413 + 200) || (*(_BYTE *)(v415 + 4) & 6) != 0)
          sub_20F599E20((_QWORD *)(a1 + 7600), v415);
        v413 += 208;
      }
      v416 = *(_QWORD *)(a1 + 6560);
      v417 = *(_QWORD *)(a1 + 6568);
      while (v416 != v417)
      {
        v418 = *(_QWORD *)(v416 + 96);
        if (*(_BYTE *)(v416 + 200) || (*(_BYTE *)(v418 + 4) & 6) != 0)
          sub_20F8DAC28((_QWORD *)(a1 + 7600), v418);
        v416 += 208;
      }
      v419 = *(_QWORD *)(a1 + 6584);
      v420 = *(_QWORD *)(a1 + 6592);
      while (v419 != v420)
      {
        v421 = *(_QWORD *)(v419 + 80);
        if (*(_BYTE *)(v419 + 168) || (*(_BYTE *)(v421 + 4) & 6) != 0)
          sub_20F8DADC0((_QWORD *)(a1 + 7600), v421);
        v419 += 176;
      }
      v422 = *(_QWORD *)(a1 + 6608);
      v423 = *(_QWORD *)(a1 + 6616);
      while (v422 != v423)
      {
        v424 = *(_QWORD *)(v422 + 80);
        if (*(_BYTE *)(v422 + 168) || (*(_BYTE *)(v424 + 4) & 6) != 0)
          sub_20F599FB8((_QWORD *)(a1 + 7600), v424);
        v422 += 176;
      }
      sub_20FA561E0(*(_QWORD *)(a1 + 6632), *(_QWORD *)(a1 + 6640), (_QWORD *)(a1 + 7600));
      sub_20FA560F4(*(_QWORD *)(a1 + 6656), *(_QWORD *)(a1 + 6664), (_QWORD *)(a1 + 7600));
      sub_20FA55F7C(*(_QWORD *)(a1 + 6680), *(_QWORD *)(a1 + 6688), (_QWORD *)(a1 + 7600));
      sub_20FA55E74(*(_QWORD *)(a1 + 6704), *(_QWORD *)(a1 + 6712), (_QWORD *)(a1 + 7600));
      sub_20FA485B8((_QWORD *)(a1 + 5184));
    }
  }
  v425 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v425, (uint64_t)" present in the system\n", 23);
  sub_20E86A980(a2, (uint64_t)"\tout of that ", 13);
  sub_20FB5D004(a1 + 5184);
  v426 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v426, (uint64_t)" are free (", 11);
  sub_20FB5D004(a1 + 5184);
  v427 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v427, (uint64_t)" DoF total)\n", 12);
  *(_QWORD *)&v523[0] = operator new(0x30uLL);
  *(_OWORD *)((char *)v523 + 8) = v521;
  strcpy(*(char **)&v523[0], "cv3d::vio::ExternalLensCalibVariable<double>]");
  sub_20E8D1238(v523, 44, 1uLL);
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v428 = v523;
  else
    v428 = *(_OWORD **)&v523[0];
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v429 = BYTE7(v523[1]);
  else
    v429 = *((_QWORD *)&v523[0] + 1);
  v430 = sub_20E86A980(a2, (uint64_t)v428, v429);
  sub_20E86A980(v430, (uint64_t)": ", 2);
  v431 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v431, (uint64_t)"D variable\n", 11);
  if (SBYTE7(v523[1]) < 0)
    operator delete(*(void **)&v523[0]);
  v432 = sub_20E86A980(a2, (uint64_t)"\treferenced by ", 15);
  memset(&v522, 0, sizeof(v522));
  *(_QWORD *)&v523[0] = operator new(0x68uLL);
  *(_OWORD *)((char *)v523 + 8) = xmmword_210312DD0;
  strcpy(*(char **)&v523[0], "cv3d::vio::GenericCalibVariablePriorFactor<double, cv3d::vio::ExternalLensCalibVariable<double>>]");
  sub_20E8D1238(v523, 96, 1uLL);
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v433 = (const std::string::value_type *)v523;
  else
    v433 = *(const std::string::value_type **)&v523[0];
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v434 = BYTE7(v523[1]);
  else
    v434 = *((_QWORD *)&v523[0] + 1);
  std::string::append(&v522, v433, v434);
  if (SBYTE7(v523[1]) < 0)
    operator delete(*(void **)&v523[0]);
  std::string::append(&v522, ", ", 2uLL);
  v435 = operator new(0x50uLL);
  *(_QWORD *)&v523[0] = v435;
  *(_OWORD *)((char *)v523 + 8) = *(_OWORD *)&v519[80];
  v435[2] = *(_OWORD *)&v519[64];
  v435[3] = *(_OWORD *)&v519[48];
  *(_OWORD *)((char *)v435 + 58) = *(_OWORD *)&v519[32];
  *v435 = *(_OWORD *)v519;
  v435[1] = *(_OWORD *)&v519[16];
  *((_BYTE *)v435 + 74) = 0;
  sub_20E8D1238(v523, 73, 1uLL);
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v436 = (const std::string::value_type *)v523;
  else
    v436 = *(const std::string::value_type **)&v523[0];
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v437 = BYTE7(v523[1]);
  else
    v437 = *((_QWORD *)&v523[0] + 1);
  std::string::append(&v522, v436, v437);
  if (SBYTE7(v523[1]) < 0)
    operator delete(*(void **)&v523[0]);
  std::string::append(&v522, ", ", 2uLL);
  v438 = operator new(0x40uLL);
  *(_QWORD *)&v523[0] = v438;
  *(_OWORD *)((char *)v523 + 8) = *(_OWORD *)&v520[64];
  *v438 = *(_OWORD *)&v520[48];
  v438[1] = *(_OWORD *)&v520[32];
  v438[2] = *(_OWORD *)&v520[16];
  *(_OWORD *)((char *)v438 + 46) = *(_OWORD *)v520;
  *((_BYTE *)v438 + 62) = 0;
  sub_20E8D1238(v523, 61, 1uLL);
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v439 = (const std::string::value_type *)v523;
  else
    v439 = *(const std::string::value_type **)&v523[0];
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v440 = BYTE7(v523[1]);
  else
    v440 = *((_QWORD *)&v523[0] + 1);
  std::string::append(&v522, v439, v440);
  if (SBYTE7(v523[1]) < 0)
    operator delete(*(void **)&v523[0]);
  std::string::append(&v522, ", ", 2uLL);
  v441 = operator new(0x60uLL);
  *(_QWORD *)&v523[0] = v441;
  *(_OWORD *)((char *)v523 + 8) = *(_OWORD *)&v518[96];
  v441[2] = *(_OWORD *)&v518[80];
  v441[3] = *(_OWORD *)&v518[64];
  v441[4] = *(_OWORD *)&v518[48];
  *(_OWORD *)((char *)v441 + 77) = *(_OWORD *)&v518[32];
  *v441 = *(_OWORD *)&v518[16];
  v441[1] = *(_OWORD *)v518;
  *((_BYTE *)v441 + 93) = 0;
  sub_20E8D1238(v523, 92, 1uLL);
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v442 = (const std::string::value_type *)v523;
  else
    v442 = *(const std::string::value_type **)&v523[0];
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v443 = BYTE7(v523[1]);
  else
    v443 = *((_QWORD *)&v523[0] + 1);
  std::string::append(&v522, v442, v443);
  if (SBYTE7(v523[1]) < 0)
    operator delete(*(void **)&v523[0]);
  std::string::append(&v522, ", ", 2uLL);
  v444 = operator new(0x50uLL);
  *(_QWORD *)&v523[0] = v444;
  *(_OWORD *)((char *)v523 + 8) = *(_OWORD *)&v517[80];
  v444[2] = *(_OWORD *)&v517[64];
  v444[3] = *(_OWORD *)&v517[48];
  *(_OWORD *)((char *)v444 + 62) = *(_OWORD *)&v517[32];
  *v444 = *(_OWORD *)v517;
  v444[1] = *(_OWORD *)&v517[16];
  *((_BYTE *)v444 + 78) = 0;
  sub_20E8D1238(v523, 77, 1uLL);
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v445 = (const std::string::value_type *)v523;
  else
    v445 = *(const std::string::value_type **)&v523[0];
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v446 = BYTE7(v523[1]);
  else
    v446 = *((_QWORD *)&v523[0] + 1);
  std::string::append(&v522, v445, v446);
  if (SBYTE7(v523[1]) < 0)
    operator delete(*(void **)&v523[0]);
  if ((v522.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v447 = &v522;
  else
    v447 = (std::string *)v522.__r_.__value_.__r.__words[0];
  if ((v522.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v448 = HIBYTE(v522.__r_.__value_.__r.__words[2]);
  else
    v448 = v522.__r_.__value_.__l.__size_;
  v449 = sub_20E86A980(v432, (uint64_t)v447, v448);
  sub_20E86A980(v449, (uint64_t)"\n", 1);
  if (SHIBYTE(v522.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v522.__r_.__value_.__l.__data_);
  sub_20E86A980(a2, (uint64_t)"\tthere are ", 11);
  if (!*v85)
  {
    memset(v523, 0, 44);
    if (sub_20F8DEE48((_QWORD *)(a1 + 5184), (int *)v523, &v522, 1))
    {
      *(_QWORD *)(a1 + 7608) = *(_QWORD *)(a1 + 7600);
      *(_QWORD *)(a1 + 7632) = *(_QWORD *)(a1 + 7624);
      *(_QWORD *)(a1 + 7656) = *(_QWORD *)(a1 + 7648);
      *(_QWORD *)(a1 + 7680) = *(_QWORD *)(a1 + 7672);
      *(_QWORD *)(a1 + 7704) = *(_QWORD *)(a1 + 7696);
      *(_QWORD *)(a1 + 7728) = *(_QWORD *)(a1 + 7720);
      *(_QWORD *)(a1 + 7752) = *(_QWORD *)(a1 + 7744);
      *(_QWORD *)(a1 + 7776) = *(_QWORD *)(a1 + 7768);
      *(_QWORD *)(a1 + 7800) = *(_QWORD *)(a1 + 7792);
      *(_QWORD *)(a1 + 7824) = *(_QWORD *)(a1 + 7816);
      *(_QWORD *)(a1 + 7848) = *(_QWORD *)(a1 + 7840);
      v450 = *(_QWORD *)(a1 + 6248);
      v451 = *(_QWORD *)(a1 + 6256);
      while (v450 != v451)
      {
        v452 = *(_QWORD *)(v450 + 208);
        if (*(_BYTE *)(v450 + 496)
          || (*(_BYTE *)(v452 + 4) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v450 + 216) + 4) & 6) != 0)
        {
          sub_20F394A20(a1 + 7600, v452);
          sub_20F3D35E0((_QWORD *)(a1 + 7600), *(_QWORD *)(v450 + 216));
        }
        v450 += 504;
      }
      v453 = *(_QWORD *)(a1 + 6272);
      v454 = *(_QWORD *)(a1 + 6280);
      while (v453 != v454)
      {
        v455 = *(_QWORD *)(v453 + 136);
        if (*(_BYTE *)(v453 + 272) || (*(_BYTE *)(v455 + 4) & 6) != 0)
          sub_20F394A20(a1 + 7600, v455);
        v453 += 280;
      }
      v456 = *(_QWORD *)(a1 + 6296);
      v457 = *(_QWORD *)(a1 + 6304);
      while (v456 != v457)
      {
        v458 = *(_QWORD *)(v456 + 136);
        if (*(_BYTE *)(v456 + 272) || (*(_BYTE *)(v458 + 4) & 6) != 0)
          sub_20F599C88((_QWORD *)(a1 + 7600), v458);
        v456 += 280;
      }
      v459 = *(_QWORD *)(a1 + 6320);
      v460 = *(_QWORD *)(a1 + 6328);
      while (v459 != v460)
      {
        v461 = *(_QWORD *)(v459 + 136);
        if (*(_BYTE *)(v459 + 272) || (*(_BYTE *)(v461 + 4) & 6) != 0)
          sub_20F59A480((_QWORD *)(a1 + 7600), v461);
        v459 += 280;
      }
      v462 = *(_QWORD *)(a1 + 6344);
      v463 = *(_QWORD *)(a1 + 6352);
      while (v462 != v463)
      {
        v464 = *(_QWORD *)(v462 + 64);
        if (*(_BYTE *)(v462 + 152) || (*(_BYTE *)(v464 + 4) & 6) != 0)
          sub_20F59A2E8((_QWORD *)(a1 + 7600), v464);
        v462 += 160;
      }
      sub_20FA5640C(*(_QWORD *)(a1 + 6368), *(_QWORD *)(a1 + 6376), (_QWORD *)(a1 + 7600));
      sub_20F5B85BC(*(_QWORD *)(a1 + 6392), *(_QWORD *)(a1 + 6400), (_QWORD *)(a1 + 7600));
      v465 = *(_QWORD *)(a1 + 6416);
      v466 = *(_QWORD *)(a1 + 6424);
      while (v465 != v466)
      {
        v467 = *(_QWORD *)(v465 + 48);
        if (*(_BYTE *)(v465 + 136) || (*(_BYTE *)(v467 + 4) & 6) != 0)
          sub_20F3D35E0((_QWORD *)(a1 + 7600), v467);
        v465 += 144;
      }
      v468 = *(_QWORD *)(a1 + 6440);
      v469 = *(_QWORD *)(a1 + 6448);
      while (v468 != v469)
      {
        v470 = *(_QWORD *)(v468 + 48);
        if (*(_BYTE *)(v468 + 144)
          || (*(_BYTE *)(v470 + 4) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v468 + 56) + 4) & 6) != 0)
        {
          sub_20F394A20(a1 + 7600, v470);
          sub_20F394A20(a1 + 7600, *(_QWORD *)(v468 + 56));
        }
        v468 += 152;
      }
      sub_20FA56358(*(_QWORD *)(a1 + 6464), *(_QWORD *)(a1 + 6472), (_QWORD *)(a1 + 7600));
      sub_20F8DF65C(*(_QWORD *)(a1 + 6488), *(_QWORD *)(a1 + 6496), (_QWORD *)(a1 + 7600));
      v471 = *(_QWORD *)(a1 + 6512);
      v472 = *(_QWORD *)(a1 + 6520);
      while (v471 != v472)
      {
        v473 = *(_QWORD *)(v471 + 48);
        if (*(_BYTE *)(v471 + 104) || (*(_BYTE *)(v473 + 4) & 6) != 0)
          sub_20F59A150((_QWORD *)(a1 + 7600), v473);
        v471 += 112;
      }
      v474 = *(_QWORD *)(a1 + 6536);
      v475 = *(_QWORD *)(a1 + 6544);
      while (v474 != v475)
      {
        v476 = *(_QWORD *)(v474 + 96);
        if (*(_BYTE *)(v474 + 200) || (*(_BYTE *)(v476 + 4) & 6) != 0)
          sub_20F599E20((_QWORD *)(a1 + 7600), v476);
        v474 += 208;
      }
      v477 = *(_QWORD *)(a1 + 6560);
      v478 = *(_QWORD *)(a1 + 6568);
      while (v477 != v478)
      {
        v479 = *(_QWORD *)(v477 + 96);
        if (*(_BYTE *)(v477 + 200) || (*(_BYTE *)(v479 + 4) & 6) != 0)
          sub_20F8DAC28((_QWORD *)(a1 + 7600), v479);
        v477 += 208;
      }
      v480 = *(_QWORD *)(a1 + 6584);
      v481 = *(_QWORD *)(a1 + 6592);
      while (v480 != v481)
      {
        v482 = *(_QWORD *)(v480 + 80);
        if (*(_BYTE *)(v480 + 168) || (*(_BYTE *)(v482 + 4) & 6) != 0)
          sub_20F8DADC0((_QWORD *)(a1 + 7600), v482);
        v480 += 176;
      }
      v483 = *(_QWORD *)(a1 + 6608);
      v484 = *(_QWORD *)(a1 + 6616);
      while (v483 != v484)
      {
        v485 = *(_QWORD *)(v483 + 80);
        if (*(_BYTE *)(v483 + 168) || (*(_BYTE *)(v485 + 4) & 6) != 0)
          sub_20F599FB8((_QWORD *)(a1 + 7600), v485);
        v483 += 176;
      }
      sub_20FA561E0(*(_QWORD *)(a1 + 6632), *(_QWORD *)(a1 + 6640), (_QWORD *)(a1 + 7600));
      sub_20FA560F4(*(_QWORD *)(a1 + 6656), *(_QWORD *)(a1 + 6664), (_QWORD *)(a1 + 7600));
      sub_20FA55F7C(*(_QWORD *)(a1 + 6680), *(_QWORD *)(a1 + 6688), (_QWORD *)(a1 + 7600));
      sub_20FA55E74(*(_QWORD *)(a1 + 6704), *(_QWORD *)(a1 + 6712), (_QWORD *)(a1 + 7600));
      sub_20FA485B8(v34);
    }
  }
  v486 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v486, (uint64_t)" present in the system\n", 23);
  sub_20E86A980(a2, (uint64_t)"\tout of that ", 13);
  sub_20FB5D5D4((uint64_t)v34);
  v487 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v487, (uint64_t)" are free (", 11);
  sub_20FB5D5D4((uint64_t)v34);
  v488 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v488, (uint64_t)" DoF total)\n", 12);
  *(_QWORD *)&v523[0] = operator new(0x30uLL);
  *(_OWORD *)((char *)v523 + 8) = v512;
  strcpy(*(char **)&v523[0], "cv3d::vio::VIOLandmarkDepthVariable<double>]");
  sub_20E8D1238(v523, 43, 1uLL);
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v489 = v523;
  else
    v489 = *(_OWORD **)&v523[0];
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v490 = BYTE7(v523[1]);
  else
    v490 = *((_QWORD *)&v523[0] + 1);
  v491 = sub_20E86A980(a2, (uint64_t)v489, v490);
  sub_20E86A980(v491, (uint64_t)": ", 2);
  v492 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v492, (uint64_t)"D variable\n", 11);
  if (SBYTE7(v523[1]) < 0)
    operator delete(*(void **)&v523[0]);
  v493 = sub_20E86A980(a2, (uint64_t)"\treferenced by ", 15);
  memset(&v522, 0, sizeof(v522));
  v494 = operator new(0x50uLL);
  *(_QWORD *)&v523[0] = v494;
  *(_OWORD *)((char *)v523 + 8) = *(_OWORD *)&v519[80];
  v494[2] = *(_OWORD *)&v519[64];
  v494[3] = *(_OWORD *)&v519[48];
  *(_OWORD *)((char *)v494 + 58) = *(_OWORD *)&v519[32];
  *v494 = *(_OWORD *)v519;
  v494[1] = *(_OWORD *)&v519[16];
  *((_BYTE *)v494 + 74) = 0;
  sub_20E8D1238(v523, 73, 1uLL);
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v495 = (const std::string::value_type *)v523;
  else
    v495 = *(const std::string::value_type **)&v523[0];
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v496 = BYTE7(v523[1]);
  else
    v496 = *((_QWORD *)&v523[0] + 1);
  std::string::append(&v522, v495, v496);
  if (SBYTE7(v523[1]) < 0)
    operator delete(*(void **)&v523[0]);
  std::string::append(&v522, ", ", 2uLL);
  v497 = operator new(0x60uLL);
  *(_QWORD *)&v523[0] = v497;
  *(_OWORD *)((char *)v523 + 8) = *(_OWORD *)&v518[96];
  v497[2] = *(_OWORD *)&v518[80];
  v497[3] = *(_OWORD *)&v518[64];
  v497[4] = *(_OWORD *)&v518[48];
  *(_OWORD *)((char *)v497 + 77) = *(_OWORD *)&v518[32];
  *v497 = *(_OWORD *)&v518[16];
  v497[1] = *(_OWORD *)v518;
  *((_BYTE *)v497 + 93) = 0;
  sub_20E8D1238(v523, 92, 1uLL);
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v498 = (const std::string::value_type *)v523;
  else
    v498 = *(const std::string::value_type **)&v523[0];
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v499 = BYTE7(v523[1]);
  else
    v499 = *((_QWORD *)&v523[0] + 1);
  std::string::append(&v522, v498, v499);
  if (SBYTE7(v523[1]) < 0)
    operator delete(*(void **)&v523[0]);
  std::string::append(&v522, ", ", 2uLL);
  v500 = operator new(0x50uLL);
  *(_QWORD *)&v523[0] = v500;
  *(_OWORD *)((char *)v523 + 8) = *(_OWORD *)&v517[80];
  v500[2] = *(_OWORD *)&v517[64];
  v500[3] = *(_OWORD *)&v517[48];
  *(_OWORD *)((char *)v500 + 62) = *(_OWORD *)&v517[32];
  *v500 = *(_OWORD *)v517;
  v500[1] = *(_OWORD *)&v517[16];
  *((_BYTE *)v500 + 78) = 0;
  sub_20E8D1238(v523, 77, 1uLL);
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v501 = (const std::string::value_type *)v523;
  else
    v501 = *(const std::string::value_type **)&v523[0];
  if ((SBYTE7(v523[1]) & 0x80u) == 0)
    v502 = BYTE7(v523[1]);
  else
    v502 = *((_QWORD *)&v523[0] + 1);
  std::string::append(&v522, v501, v502);
  if (SBYTE7(v523[1]) < 0)
    operator delete(*(void **)&v523[0]);
  if ((v522.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v503 = &v522;
  else
    v503 = (std::string *)v522.__r_.__value_.__r.__words[0];
  if ((v522.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v504 = HIBYTE(v522.__r_.__value_.__r.__words[2]);
  else
    v504 = v522.__r_.__value_.__l.__size_;
  v505 = sub_20E86A980(v493, (uint64_t)v503, v504);
  sub_20E86A980(v505, (uint64_t)"\n", 1);
  if (SHIBYTE(v522.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v522.__r_.__value_.__l.__data_);
  sub_20E86A980(a2, (uint64_t)"\tforms an independent set (consider using Schur solver)\n", 56);
  sub_20E86A980(a2, (uint64_t)"\tthere are ", 11);
  sub_20FA59E8C((uint64_t)v34, 0);
  v506 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v506, (uint64_t)" present in the system\n", 23);
  sub_20E86A980(a2, (uint64_t)"\tout of that ", 13);
  sub_20FB5DBA4((uint64_t)v34);
  v507 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v507, (uint64_t)" are free (", 11);
  sub_20FB5DBA4((uint64_t)v34);
  v508 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v508, (uint64_t)" DoF total)\n", 12);
  sub_20E86A980(a2, (uint64_t)"\nFactor stats:\n", 15);
  return sub_20FB55D2C((uint64_t)v34, a2);
}

void sub_20FB55388(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 105) < 0)
    operator delete(*(void **)(v1 - 128));
  if (*(char *)(v1 - 153) < 0)
    operator delete(*(void **)(v1 - 176));
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20FB55D2C(uint64_t a1, _QWORD *a2)
{
  std::string *v4;
  std::string::size_type size;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  std::string *v9;
  std::string::size_type v10;
  std::string *v11;
  std::string::size_type v12;
  std::string *v13;
  std::string::size_type v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  std::string *v21;
  std::string::size_type v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  char *v26;
  std::string *v27;
  std::string::size_type v28;
  std::string *v29;
  std::string::size_type v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  std::string *v37;
  std::string::size_type v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  std::string *v42;
  std::string::size_type v43;
  std::string *v44;
  std::string::size_type v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  std::string *v52;
  std::string::size_type v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  std::string *v57;
  std::string::size_type v58;
  std::string *v59;
  std::string::size_type v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  std::string *v67;
  std::string::size_type v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  std::string *v72;
  std::string::size_type v73;
  std::string *v74;
  std::string::size_type v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  std::string *v82;
  std::string::size_type v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  char *v87;
  std::string *v88;
  std::string::size_type v89;
  _OWORD *v90;
  std::string *v91;
  std::string::size_type v92;
  char *v93;
  std::string *v94;
  std::string::size_type v95;
  _OWORD *v96;
  std::string *v97;
  std::string::size_type v98;
  std::string *v99;
  std::string::size_type v100;
  char *v101;
  std::string *v102;
  std::string::size_type v103;
  std::string *v104;
  std::string::size_type v105;
  void *v106;
  std::string *v107;
  std::string::size_type v108;
  void *v109;
  std::string *v110;
  std::string::size_type v111;
  void *v112;
  std::string *v113;
  std::string::size_type v114;
  std::string *v115;
  std::string::size_type v116;
  _QWORD *v117;
  _QWORD *v118;
  _QWORD *v119;
  std::string *v120;
  std::string::size_type v121;
  _QWORD *v122;
  _QWORD *v123;
  _QWORD *v124;
  char *v125;
  std::string *v126;
  std::string::size_type v127;
  _OWORD *v128;
  std::string *v129;
  std::string::size_type v130;
  char *v131;
  std::string *v132;
  std::string::size_type v133;
  _OWORD *v134;
  std::string *v135;
  std::string::size_type v136;
  std::string *v137;
  std::string::size_type v138;
  _QWORD *v139;
  _QWORD *v140;
  _QWORD *v141;
  uint64_t v142;
  _QWORD *v143;
  _QWORD *v144;
  std::string *v145;
  std::string::size_type v146;
  _QWORD *v147;
  _QWORD *v148;
  _QWORD *v149;
  _OWORD *v150;
  std::string *v151;
  std::string::size_type v152;
  std::string *v153;
  std::string::size_type v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  _QWORD *v160;
  std::string *v161;
  std::string::size_type v162;
  _QWORD *v163;
  _QWORD *v164;
  _QWORD *v165;
  char *v166;
  std::string *v167;
  std::string::size_type v168;
  char *v169;
  std::string *v170;
  std::string::size_type v171;
  std::string *v172;
  std::string::size_type v173;
  _QWORD *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  _QWORD *v178;
  _QWORD *v179;
  std::string *v180;
  std::string::size_type v181;
  _QWORD *v182;
  _QWORD *v183;
  _QWORD *v184;
  _OWORD *v185;
  std::string *v186;
  std::string::size_type v187;
  char *v188;
  std::string *v189;
  std::string::size_type v190;
  std::string *v191;
  std::string::size_type v192;
  std::string *v193;
  std::string::size_type v194;
  std::string *v195;
  std::string::size_type v196;
  _QWORD *v197;
  _QWORD *v198;
  _QWORD *v199;
  uint64_t v200;
  _QWORD *v201;
  _QWORD *v202;
  std::string *v203;
  std::string::size_type v204;
  _QWORD *v205;
  _QWORD *v206;
  _QWORD *v207;
  char *v208;
  std::string *v209;
  std::string::size_type v210;
  char *v211;
  std::string *v212;
  std::string::size_type v213;
  char *v214;
  std::string *v215;
  std::string::size_type v216;
  char *v217;
  std::string *v218;
  std::string::size_type v219;
  _OWORD *v220;
  std::string *v221;
  std::string::size_type v222;
  char *v223;
  std::string *v224;
  std::string::size_type v225;
  std::string *v226;
  std::string::size_type v227;
  _QWORD *v228;
  _QWORD *v229;
  _QWORD *v230;
  uint64_t v231;
  _QWORD *v232;
  _QWORD *v233;
  std::string *v234;
  std::string::size_type v235;
  _QWORD *v236;
  _QWORD *v237;
  _QWORD *v238;
  char *v239;
  std::string *v240;
  std::string::size_type v241;
  std::string *v242;
  std::string::size_type v243;
  _QWORD *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  _QWORD *v248;
  _QWORD *v249;
  std::string *v250;
  std::string::size_type v251;
  _QWORD *v252;
  _QWORD *v253;
  _QWORD *v254;
  _OWORD *v255;
  std::string *v256;
  std::string::size_type v257;
  std::string *v258;
  std::string::size_type v259;
  _QWORD *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  _QWORD *v264;
  _QWORD *v265;
  std::string *v266;
  std::string::size_type v267;
  _QWORD *v268;
  _QWORD *v269;
  _QWORD *v270;
  _WORD *v271;
  std::string *v272;
  std::string::size_type v273;
  std::string *v274;
  std::string::size_type v275;
  _QWORD *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  _QWORD *v280;
  _QWORD *v281;
  std::string *v282;
  std::string::size_type v283;
  _QWORD *v284;
  _QWORD *v285;
  _QWORD *v286;
  std::string *v287;
  std::string::size_type v288;
  std::string *v289;
  std::string::size_type v290;
  _QWORD *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  _QWORD *v295;
  _QWORD *v296;
  std::string *v297;
  std::string::size_type v298;
  _QWORD *v299;
  _QWORD *v300;
  _QWORD *v301;
  void *v302;
  std::string *v303;
  std::string::size_type v304;
  std::string *v305;
  std::string::size_type v306;
  _QWORD *v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  _QWORD *v311;
  _QWORD *v312;
  std::string *v313;
  std::string::size_type v314;
  _QWORD *v315;
  _QWORD *v316;
  _QWORD *v317;
  std::string *v318;
  std::string::size_type v319;
  _QWORD *v320;
  _QWORD *v321;
  _QWORD *v322;
  std::string *v323;
  std::string::size_type v324;
  _QWORD *v325;
  _QWORD *v326;
  _QWORD *v327;
  _OWORD *v328;
  std::string *v329;
  std::string::size_type v330;
  char *v331;
  std::string *v332;
  std::string::size_type v333;
  _OWORD *v334;
  std::string *v335;
  std::string::size_type v336;
  _WORD *v337;
  std::string *v338;
  std::string::size_type v339;
  _OWORD *v340;
  std::string *v341;
  std::string::size_type v342;
  void *v343;
  std::string *v344;
  std::string::size_type v345;
  std::string *v346;
  std::string::size_type v347;
  _QWORD *v348;
  _QWORD *v349;
  _QWORD *v350;
  uint64_t v351;
  _QWORD *v352;
  _QWORD *v353;
  std::string *v354;
  std::string::size_type v355;
  _QWORD *v356;
  _QWORD *v357;
  _QWORD *v358;
  std::string *v359;
  std::string::size_type v360;
  _QWORD *v361;
  _QWORD *v362;
  _QWORD *v363;
  std::string *v364;
  std::string::size_type v365;
  _QWORD *v366;
  _QWORD *v367;
  _QWORD *v368;
  _OWORD *v369;
  std::string *v370;
  std::string::size_type v371;
  char *v372;
  std::string *v373;
  std::string::size_type v374;
  char *v375;
  std::string *v376;
  std::string::size_type v377;
  _OWORD *v378;
  std::string *v379;
  std::string::size_type v380;
  _WORD *v381;
  std::string *v382;
  std::string::size_type v383;
  _OWORD *v384;
  std::string *v385;
  std::string::size_type v386;
  std::string *v387;
  std::string::size_type v388;
  std::string *v389;
  std::string::size_type v390;
  _QWORD *v391;
  _QWORD *v392;
  _QWORD *v393;
  _OWORD v395[2];
  __int128 v396;
  _BYTE v397[64];
  _BYTE v398[64];
  _OWORD v399[3];
  _OWORD v400[3];
  __int128 v401;
  __int128 v402;
  _OWORD v403[2];
  _BYTE v404[64];
  __int128 v405;
  _BYTE v406[48];
  std::string v407;
  std::string v408[5];
  uint64_t v409;

  v409 = *MEMORY[0x24BDAC8D0];
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
  v405 = xmmword_2102DCA20;
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = xmmword_2102DCA20;
  strcpy(v408[0].__r_.__value_.__l.__data_, "cv3d::vio::VIOStatePriorFactor<double>]");
  sub_20E8D1238(v408, 38, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = v408;
  else
    v4 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    size = v408[0].__r_.__value_.__l.__size_;
  v6 = sub_20E86A980(a2, (uint64_t)v4, size);
  sub_20E86A980(v6, (uint64_t)": ", 2);
  v7 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v7, (uint64_t)"D factor\n", 9);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  v8 = sub_20E86A980(a2, (uint64_t)"\tconstrains ", 12);
  memset(&v407, 0, sizeof(v407));
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
  *(_WORD *)&v406[34] = 0;
  *(_DWORD *)&v406[36] = 0;
  *(_QWORD *)&v406[40] = 0x8000000000000028;
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = xmmword_2102DCA10;
  strcpy(v406, "seVariable<doublcv3d::vio::VIOPo#");
  strcpy(v408[0].__r_.__value_.__l.__data_, "cv3d::vio::VIOPoseVariable<double>]");
  sub_20E8D1238(v408, 34, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = v408;
  else
    v9 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v10 = v408[0].__r_.__value_.__l.__size_;
  std::string::append(&v407, (const std::string::value_type *)v9, v10);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  std::string::append(&v407, ", ", 2uLL);
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
  *(_WORD *)&v404[50] = 0;
  *(_DWORD *)&v404[52] = 0;
  *(_QWORD *)&v404[56] = 0x8000000000000038;
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = xmmword_2102DCA50;
  strcpy(v408[0].__r_.__value_.__l.__data_, "cv3d::vio::VIOIMUVelocityBiasesVariable<double>]");
  strcpy(v404, "ariable<double>]UVelocityBiasesVcv3d::vio::VIOIM0");
  sub_20E8D1238(v408, 47, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = v408;
  else
    v11 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v12 = v408[0].__r_.__value_.__l.__size_;
  std::string::append(&v407, (const std::string::value_type *)v11, v12);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  if ((v407.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = &v407;
  else
    v13 = (std::string *)v407.__r_.__value_.__r.__words[0];
  if ((v407.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = HIBYTE(v407.__r_.__value_.__r.__words[2]);
  else
    v14 = v407.__r_.__value_.__l.__size_;
  v15 = sub_20E86A980(v8, (uint64_t)v13, v14);
  sub_20E86A980(v15, (uint64_t)"\n", 1);
  if (SHIBYTE(v407.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v407.__r_.__value_.__l.__data_);
    if (*(_BYTE *)(a1 + 1616))
      goto LABEL_43;
  }
  else if (*(_BYTE *)(a1 + 1616))
  {
    goto LABEL_43;
  }
  if (sub_20F9210FC((_QWORD *)a1))
  {
    v16 = *(_QWORD *)(a1 + 1064);
    v17 = *(_QWORD *)(a1 + 1072);
    if (v16 != v17)
    {
      v18 = 0;
      do
      {
        if ((*(_BYTE *)(*(_QWORD *)(v16 + 208) + 4) & 6) == 0 && (*(_BYTE *)(*(_QWORD *)(v16 + 216) + 4) & 6) == 0)
          ++v18;
        v16 += 504;
      }
      while (v16 != v17);
    }
  }
LABEL_43:
  sub_20E86A980(a2, (uint64_t)"\tthere are ", 11);
  v19 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v19, (uint64_t)" present in the system (", 24);
  v20 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v20, (uint64_t)" DoF total)\n", 12);
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = xmmword_2102DB450;
  strcpy(v408[0].__r_.__value_.__l.__data_, "cv3d::vio::VIOPosePriorFactor<double>]");
  sub_20E8D1238(v408, 37, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v21 = v408;
  else
    v21 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v22 = v408[0].__r_.__value_.__l.__size_;
  v23 = sub_20E86A980(a2, (uint64_t)v21, v22);
  sub_20E86A980(v23, (uint64_t)": ", 2);
  v24 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v24, (uint64_t)"D factor\n", 9);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  v25 = sub_20E86A980(a2, (uint64_t)"\tconstrains ", 12);
  memset(&v407, 0, sizeof(v407));
  v26 = (char *)operator new(0x28uLL);
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = *(_OWORD *)&v406[32];
  strcpy(v26 + 31, "le>]");
  *(_OWORD *)v26 = *(_OWORD *)&v406[16];
  *((_OWORD *)v26 + 1) = *(_OWORD *)v406;
  sub_20E8D1238(v408, 34, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v27 = v408;
  else
    v27 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v28 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v28 = v408[0].__r_.__value_.__l.__size_;
  std::string::append(&v407, (const std::string::value_type *)v27, v28);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  if ((v407.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v29 = &v407;
  else
    v29 = (std::string *)v407.__r_.__value_.__r.__words[0];
  if ((v407.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v30 = HIBYTE(v407.__r_.__value_.__r.__words[2]);
  else
    v30 = v407.__r_.__value_.__l.__size_;
  v31 = sub_20E86A980(v25, (uint64_t)v29, v30);
  sub_20E86A980(v31, (uint64_t)"\n", 1);
  if (SHIBYTE(v407.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v407.__r_.__value_.__l.__data_);
    if (*(_BYTE *)(a1 + 1616))
      goto LABEL_75;
  }
  else if (*(_BYTE *)(a1 + 1616))
  {
    goto LABEL_75;
  }
  if (sub_20F9210FC((_QWORD *)a1))
  {
    v32 = *(_QWORD *)(a1 + 1088);
    v33 = *(_QWORD *)(a1 + 1096);
    if (v32 != v33)
    {
      v34 = 0;
      do
      {
        if ((*(_BYTE *)(*(_QWORD *)(v32 + 136) + 4) & 6) == 0)
          ++v34;
        v32 += 280;
      }
      while (v32 != v33);
    }
  }
LABEL_75:
  sub_20E86A980(a2, (uint64_t)"\tthere are ", 11);
  v35 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v35, (uint64_t)" present in the system (", 24);
  v36 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v36, (uint64_t)" DoF total)\n", 12);
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x60uLL);
  v396 = xmmword_2103B84A0;
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = xmmword_2103B84A0;
  strcpy(v408[0].__r_.__value_.__l.__data_, "cv3d::vio::VIOCameraExtrinsicPriorFactor<double, cv3d::vio::VIOExtrinsicsVariable<double>>]");
  sub_20E8D1238(v408, 90, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v37 = v408;
  else
    v37 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v38 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v38 = v408[0].__r_.__value_.__l.__size_;
  v39 = sub_20E86A980(a2, (uint64_t)v37, v38);
  sub_20E86A980(v39, (uint64_t)": ", 2);
  v40 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v40, (uint64_t)"D factor\n", 9);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  v41 = sub_20E86A980(a2, (uint64_t)"\tconstrains ", 12);
  memset(&v407, 0, sizeof(v407));
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
  v402 = xmmword_2102DCA00;
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = xmmword_2102DCA00;
  strcpy(v408[0].__r_.__value_.__l.__data_, "cv3d::vio::VIOExtrinsicsVariable<double>]");
  qmemcpy(v399, "ariable<double>]trinsicsVariablecv3d::vio::VIOEx", sizeof(v399));
  sub_20E8D1238(v408, 40, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v42 = v408;
  else
    v42 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v43 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v43 = v408[0].__r_.__value_.__l.__size_;
  std::string::append(&v407, (const std::string::value_type *)v42, v43);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  if ((v407.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v44 = &v407;
  else
    v44 = (std::string *)v407.__r_.__value_.__r.__words[0];
  if ((v407.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v45 = HIBYTE(v407.__r_.__value_.__r.__words[2]);
  else
    v45 = v407.__r_.__value_.__l.__size_;
  v46 = sub_20E86A980(v41, (uint64_t)v44, v45);
  sub_20E86A980(v46, (uint64_t)"\n", 1);
  if (SHIBYTE(v407.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v407.__r_.__value_.__l.__data_);
    if (*(_BYTE *)(a1 + 1616))
      goto LABEL_107;
  }
  else if (*(_BYTE *)(a1 + 1616))
  {
    goto LABEL_107;
  }
  if (sub_20F9210FC((_QWORD *)a1))
  {
    v47 = *(_QWORD *)(a1 + 1112);
    v48 = *(_QWORD *)(a1 + 1120);
    if (v47 != v48)
    {
      v49 = 0;
      do
      {
        if ((*(_BYTE *)(*(_QWORD *)(v47 + 136) + 4) & 6) == 0)
          ++v49;
        v47 += 280;
      }
      while (v47 != v48);
    }
  }
LABEL_107:
  sub_20E86A980(a2, (uint64_t)"\tthere are ", 11);
  v50 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v50, (uint64_t)" present in the system (", 24);
  v51 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v51, (uint64_t)" DoF total)\n", 12);
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x68uLL);
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = xmmword_2103B8450;
  strcpy(v408[0].__r_.__value_.__l.__data_, "cv3d::vio::VIOCameraExtrinsicPriorFactor<double, cv3d::vio::VIODepthExtrinsicsVariable<double>>]");
  sub_20E8D1238(v408, 95, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v52 = v408;
  else
    v52 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v53 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v53 = v408[0].__r_.__value_.__l.__size_;
  v54 = sub_20E86A980(a2, (uint64_t)v52, v53);
  sub_20E86A980(v54, (uint64_t)": ", 2);
  v55 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v55, (uint64_t)"D factor\n", 9);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  v56 = sub_20E86A980(a2, (uint64_t)"\tconstrains ", 12);
  memset(&v407, 0, sizeof(v407));
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
  *(_WORD *)&v397[50] = 0;
  *(_DWORD *)&v397[52] = 0;
  *(_QWORD *)&v397[56] = 0x8000000000000030;
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = xmmword_2102DBF00;
  strcpy(v408[0].__r_.__value_.__l.__data_, "cv3d::vio::VIODepthExtrinsicsVariable<double>]");
  strcpy(v397, "ariable<double>]pthExtrinsicsVarcv3d::vio::VIODe.");
  sub_20E8D1238(v408, 45, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v57 = v408;
  else
    v57 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v58 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v58 = v408[0].__r_.__value_.__l.__size_;
  std::string::append(&v407, (const std::string::value_type *)v57, v58);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  if ((v407.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v59 = &v407;
  else
    v59 = (std::string *)v407.__r_.__value_.__r.__words[0];
  if ((v407.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v60 = HIBYTE(v407.__r_.__value_.__r.__words[2]);
  else
    v60 = v407.__r_.__value_.__l.__size_;
  v61 = sub_20E86A980(v56, (uint64_t)v59, v60);
  sub_20E86A980(v61, (uint64_t)"\n", 1);
  if (SHIBYTE(v407.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v407.__r_.__value_.__l.__data_);
    if (*(_BYTE *)(a1 + 1616))
      goto LABEL_139;
  }
  else if (*(_BYTE *)(a1 + 1616))
  {
    goto LABEL_139;
  }
  if (sub_20F9210FC((_QWORD *)a1))
  {
    v62 = *(_QWORD *)(a1 + 1136);
    v63 = *(_QWORD *)(a1 + 1144);
    if (v62 != v63)
    {
      v64 = 0;
      do
      {
        if ((*(_BYTE *)(*(_QWORD *)(v62 + 136) + 4) & 6) == 0)
          ++v64;
        v62 += 280;
      }
      while (v62 != v63);
    }
  }
LABEL_139:
  sub_20E86A980(a2, (uint64_t)"\tthere are ", 11);
  v65 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v65, (uint64_t)" present in the system (", 24);
  v66 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v66, (uint64_t)" DoF total)\n", 12);
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x58uLL);
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = xmmword_2103134C0;
  strcpy(v408[0].__r_.__value_.__l.__data_, "cv3d::vio::VIOSLAMLandmarkPriorFactor<double, cv3d::vio::VIOLandmarkVariable<double>>]");
  sub_20E8D1238(v408, 85, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v67 = v408;
  else
    v67 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v68 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v68 = v408[0].__r_.__value_.__l.__size_;
  v69 = sub_20E86A980(a2, (uint64_t)v67, v68);
  sub_20E86A980(v69, (uint64_t)": ", 2);
  v70 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v70, (uint64_t)"D factor\n", 9);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  v71 = sub_20E86A980(a2, (uint64_t)"\tconstrains ", 12);
  memset(&v407, 0, sizeof(v407));
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = v405;
  qmemcpy(v395, "ndmarkVariable<dcv3d::vio::VIOLa", sizeof(v395));
  strcpy(v408[0].__r_.__value_.__l.__data_, "cv3d::vio::VIOLandmarkVariable<double>]");
  sub_20E8D1238(v408, 38, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v72 = v408;
  else
    v72 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v73 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v73 = v408[0].__r_.__value_.__l.__size_;
  std::string::append(&v407, (const std::string::value_type *)v72, v73);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  if ((v407.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v74 = &v407;
  else
    v74 = (std::string *)v407.__r_.__value_.__r.__words[0];
  if ((v407.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v75 = HIBYTE(v407.__r_.__value_.__r.__words[2]);
  else
    v75 = v407.__r_.__value_.__l.__size_;
  v76 = sub_20E86A980(v71, (uint64_t)v74, v75);
  sub_20E86A980(v76, (uint64_t)"\n", 1);
  if (SHIBYTE(v407.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v407.__r_.__value_.__l.__data_);
    if (*(_BYTE *)(a1 + 1616))
      goto LABEL_171;
  }
  else if (*(_BYTE *)(a1 + 1616))
  {
    goto LABEL_171;
  }
  if (sub_20F9210FC((_QWORD *)a1))
  {
    v77 = *(_QWORD *)(a1 + 1160);
    v78 = *(_QWORD *)(a1 + 1168);
    if (v77 != v78)
    {
      v79 = 0;
      do
      {
        if ((*(_BYTE *)(*(_QWORD *)(v77 + 64) + 4) & 6) == 0)
          ++v79;
        v77 += 160;
      }
      while (v77 != v78);
    }
  }
LABEL_171:
  sub_20E86A980(a2, (uint64_t)"\tthere are ", 11);
  v80 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v80, (uint64_t)" present in the system (", 24);
  v81 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v81, (uint64_t)" DoF total)\n", 12);
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
  v401 = xmmword_2102E3F60;
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = xmmword_2102E3F60;
  strcpy(v408[0].__r_.__value_.__l.__data_, "cv3d::vio::VIOIMUWithIntrinsicsCalib<double>]");
  sub_20E8D1238(v408, 44, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v82 = v408;
  else
    v82 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v83 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v83 = v408[0].__r_.__value_.__l.__size_;
  v84 = sub_20E86A980(a2, (uint64_t)v82, v83);
  sub_20E86A980(v84, (uint64_t)": ", 2);
  v85 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v85, (uint64_t)"D factor\n", 9);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  v86 = sub_20E86A980(a2, (uint64_t)"\tconstrains ", 12);
  memset(&v407, 0, sizeof(v407));
  v87 = (char *)operator new(0x28uLL);
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v87;
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = *(_OWORD *)&v406[32];
  strcpy(v87 + 31, "le>]");
  *(_OWORD *)v87 = *(_OWORD *)&v406[16];
  *((_OWORD *)v87 + 1) = *(_OWORD *)v406;
  sub_20E8D1238(v408, 34, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v88 = v408;
  else
    v88 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v89 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v89 = v408[0].__r_.__value_.__l.__size_;
  std::string::append(&v407, (const std::string::value_type *)v88, v89);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  std::string::append(&v407, ", ", 2uLL);
  v90 = operator new(0x38uLL);
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v90;
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = *(_OWORD *)&v404[48];
  *v90 = *(_OWORD *)&v404[32];
  v90[1] = *(_OWORD *)&v404[16];
  v90[2] = *(_OWORD *)v404;
  *((_BYTE *)v90 + 48) = 0;
  sub_20E8D1238(v408, 47, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v91 = v408;
  else
    v91 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v92 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v92 = v408[0].__r_.__value_.__l.__size_;
  std::string::append(&v407, (const std::string::value_type *)v91, v92);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  std::string::append(&v407, ", ", 2uLL);
  v93 = (char *)operator new(0x28uLL);
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v93;
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = *(_OWORD *)&v406[32];
  strcpy(v93 + 31, "le>]");
  *(_OWORD *)v93 = *(_OWORD *)&v406[16];
  *((_OWORD *)v93 + 1) = *(_OWORD *)v406;
  sub_20E8D1238(v408, 34, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v94 = v408;
  else
    v94 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v95 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v95 = v408[0].__r_.__value_.__l.__size_;
  std::string::append(&v407, (const std::string::value_type *)v94, v95);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  std::string::append(&v407, ", ", 2uLL);
  v96 = operator new(0x38uLL);
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v96;
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = *(_OWORD *)&v404[48];
  *v96 = *(_OWORD *)&v404[32];
  v96[1] = *(_OWORD *)&v404[16];
  v96[2] = *(_OWORD *)v404;
  *((_BYTE *)v96 + 48) = 0;
  sub_20E8D1238(v408, 47, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v97 = v408;
  else
    v97 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v98 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v98 = v408[0].__r_.__value_.__l.__size_;
  std::string::append(&v407, (const std::string::value_type *)v97, v98);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  std::string::append(&v407, ", ", 2uLL);
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  v400[2] = xmmword_2102DBF70;
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = xmmword_2102DBF70;
  strcpy(v408[0].__r_.__value_.__l.__data_, "cv3d::vio::TimeOffsetVariable]");
  qmemcpy(v400, "eOffsetVariable]cv3d::vio::TimeO", 32);
  sub_20E8D1238(v408, 29, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v99 = v408;
  else
    v99 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v100 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v100 = v408[0].__r_.__value_.__l.__size_;
  std::string::append(&v407, (const std::string::value_type *)v99, v100);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  std::string::append(&v407, ", ", 2uLL);
  v101 = (char *)operator new(0x20uLL);
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v101;
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = v400[2];
  *(_OWORD *)v101 = v400[1];
  *(_OWORD *)(v101 + 14) = v400[0];
  v101[30] = 0;
  sub_20E8D1238(v408, 29, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v102 = v408;
  else
    v102 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v103 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v103 = v408[0].__r_.__value_.__l.__size_;
  std::string::append(&v407, (const std::string::value_type *)v102, v103);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  std::string::append(&v407, ", ", 2uLL);
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = v405;
  qmemcpy(v403, "ic3DoFVariable<dcv3d::vio::Gener", sizeof(v403));
  strcpy(v408[0].__r_.__value_.__l.__data_, "cv3d::vio::Generic3DoFVariable<double>]");
  sub_20E8D1238(v408, 38, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v104 = v408;
  else
    v104 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v105 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v105 = v408[0].__r_.__value_.__l.__size_;
  std::string::append(&v407, (const std::string::value_type *)v104, v105);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  std::string::append(&v407, ", ", 2uLL);
  v106 = operator new(0x28uLL);
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v106;
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = v405;
  *(_OWORD *)v106 = v403[1];
  *((_OWORD *)v106 + 1) = v403[0];
  strcpy((char *)v106 + 31, "double>]");
  sub_20E8D1238(v408, 38, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v107 = v408;
  else
    v107 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v108 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v108 = v408[0].__r_.__value_.__l.__size_;
  std::string::append(&v407, (const std::string::value_type *)v107, v108);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  std::string::append(&v407, ", ", 2uLL);
  v109 = operator new(0x28uLL);
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v109;
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = v405;
  *(_OWORD *)v109 = v403[1];
  *((_OWORD *)v109 + 1) = v403[0];
  strcpy((char *)v109 + 31, "double>]");
  sub_20E8D1238(v408, 38, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v110 = v408;
  else
    v110 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v111 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v111 = v408[0].__r_.__value_.__l.__size_;
  std::string::append(&v407, (const std::string::value_type *)v110, v111);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  std::string::append(&v407, ", ", 2uLL);
  v112 = operator new(0x28uLL);
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v112;
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = v405;
  *(_OWORD *)v112 = v403[1];
  *((_OWORD *)v112 + 1) = v403[0];
  strcpy((char *)v112 + 31, "double>]");
  sub_20E8D1238(v408, 38, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v113 = v408;
  else
    v113 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v114 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v114 = v408[0].__r_.__value_.__l.__size_;
  std::string::append(&v407, (const std::string::value_type *)v113, v114);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  if ((v407.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v115 = &v407;
  else
    v115 = (std::string *)v407.__r_.__value_.__r.__words[0];
  if ((v407.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v116 = HIBYTE(v407.__r_.__value_.__r.__words[2]);
  else
    v116 = v407.__r_.__value_.__l.__size_;
  v117 = sub_20E86A980(v86, (uint64_t)v115, v116);
  sub_20E86A980(v117, (uint64_t)"\n", 1);
  if (SHIBYTE(v407.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v407.__r_.__value_.__l.__data_);
  sub_20FB5E174(a1, 0);
  sub_20E86A980(a2, (uint64_t)"\tthere are ", 11);
  v118 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v118, (uint64_t)" present in the system (", 24);
  v119 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v119, (uint64_t)" DoF total)\n", 12);
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = xmmword_2102DC900;
  strcpy(v408[0].__r_.__value_.__l.__data_, "cv3d::vio::VIOPreintegrateIMUFactor<double>]");
  sub_20E8D1238(v408, 43, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v120 = v408;
  else
    v120 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v121 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v121 = v408[0].__r_.__value_.__l.__size_;
  v122 = sub_20E86A980(a2, (uint64_t)v120, v121);
  sub_20E86A980(v122, (uint64_t)": ", 2);
  v123 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v123, (uint64_t)"D factor\n", 9);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  v124 = sub_20E86A980(a2, (uint64_t)"\tconstrains ", 12);
  memset(&v407, 0, sizeof(v407));
  v125 = (char *)operator new(0x28uLL);
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v125;
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = *(_OWORD *)&v406[32];
  strcpy(v125 + 31, "le>]");
  *(_OWORD *)v125 = *(_OWORD *)&v406[16];
  *((_OWORD *)v125 + 1) = *(_OWORD *)v406;
  sub_20E8D1238(v408, 34, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v126 = v408;
  else
    v126 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v127 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v127 = v408[0].__r_.__value_.__l.__size_;
  std::string::append(&v407, (const std::string::value_type *)v126, v127);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  std::string::append(&v407, ", ", 2uLL);
  v128 = operator new(0x38uLL);
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v128;
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = *(_OWORD *)&v404[48];
  *v128 = *(_OWORD *)&v404[32];
  v128[1] = *(_OWORD *)&v404[16];
  v128[2] = *(_OWORD *)v404;
  *((_BYTE *)v128 + 48) = 0;
  sub_20E8D1238(v408, 47, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v129 = v408;
  else
    v129 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v130 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v130 = v408[0].__r_.__value_.__l.__size_;
  std::string::append(&v407, (const std::string::value_type *)v129, v130);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  std::string::append(&v407, ", ", 2uLL);
  v131 = (char *)operator new(0x28uLL);
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v131;
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = *(_OWORD *)&v406[32];
  strcpy(v131 + 31, "le>]");
  *(_OWORD *)v131 = *(_OWORD *)&v406[16];
  *((_OWORD *)v131 + 1) = *(_OWORD *)v406;
  sub_20E8D1238(v408, 34, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v132 = v408;
  else
    v132 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v133 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v133 = v408[0].__r_.__value_.__l.__size_;
  std::string::append(&v407, (const std::string::value_type *)v132, v133);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  std::string::append(&v407, ", ", 2uLL);
  v134 = operator new(0x38uLL);
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v134;
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = *(_OWORD *)&v404[48];
  *v134 = *(_OWORD *)&v404[32];
  v134[1] = *(_OWORD *)&v404[16];
  v134[2] = *(_OWORD *)v404;
  *((_BYTE *)v134 + 48) = 0;
  sub_20E8D1238(v408, 47, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v135 = v408;
  else
    v135 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v136 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v136 = v408[0].__r_.__value_.__l.__size_;
  std::string::append(&v407, (const std::string::value_type *)v135, v136);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  if ((v407.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v137 = &v407;
  else
    v137 = (std::string *)v407.__r_.__value_.__r.__words[0];
  if ((v407.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v138 = HIBYTE(v407.__r_.__value_.__r.__words[2]);
  else
    v138 = v407.__r_.__value_.__l.__size_;
  v139 = sub_20E86A980(v124, (uint64_t)v137, v138);
  sub_20E86A980(v139, (uint64_t)"\n", 1);
  if (SHIBYTE(v407.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v407.__r_.__value_.__l.__data_);
    if (*(_BYTE *)(a1 + 1616))
      goto LABEL_327;
  }
  else if (*(_BYTE *)(a1 + 1616))
  {
    goto LABEL_327;
  }
  if (sub_20F9210FC((_QWORD *)a1))
  {
    v140 = *(_QWORD **)(a1 + 1208);
    v141 = *(_QWORD **)(a1 + 1216);
    if (v140 != v141)
    {
      v142 = 0;
      do
      {
        if ((*(_BYTE *)(v140[628] + 4) & 6) == 0
          && (*(_BYTE *)(v140[629] + 4) & 6) == 0
          && (*(_BYTE *)(v140[630] + 4) & 6) == 0
          && (*(_BYTE *)(v140[631] + 4) & 6) == 0)
        {
          ++v142;
        }
        v140 += 667;
      }
      while (v140 != v141);
    }
  }
LABEL_327:
  sub_20E86A980(a2, (uint64_t)"\tthere are ", 11);
  v143 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v143, (uint64_t)" present in the system (", 24);
  v144 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v144, (uint64_t)" DoF total)\n", 12);
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = v402;
  strcpy(v408[0].__r_.__value_.__l.__data_, "cv3d::vio::VIOZeroVelocityFactor<double>]");
  sub_20E8D1238(v408, 40, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v145 = v408;
  else
    v145 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v146 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v146 = v408[0].__r_.__value_.__l.__size_;
  v147 = sub_20E86A980(a2, (uint64_t)v145, v146);
  sub_20E86A980(v147, (uint64_t)": ", 2);
  v148 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v148, (uint64_t)"D factor\n", 9);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  v149 = sub_20E86A980(a2, (uint64_t)"\tconstrains ", 12);
  memset(&v407, 0, sizeof(v407));
  v150 = operator new(0x38uLL);
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v150;
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = *(_OWORD *)&v404[48];
  *v150 = *(_OWORD *)&v404[32];
  v150[1] = *(_OWORD *)&v404[16];
  v150[2] = *(_OWORD *)v404;
  *((_BYTE *)v150 + 48) = 0;
  sub_20E8D1238(v408, 47, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v151 = v408;
  else
    v151 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v152 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v152 = v408[0].__r_.__value_.__l.__size_;
  std::string::append(&v407, (const std::string::value_type *)v151, v152);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  if ((v407.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v153 = &v407;
  else
    v153 = (std::string *)v407.__r_.__value_.__r.__words[0];
  if ((v407.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v154 = HIBYTE(v407.__r_.__value_.__r.__words[2]);
  else
    v154 = v407.__r_.__value_.__l.__size_;
  v155 = sub_20E86A980(v149, (uint64_t)v153, v154);
  sub_20E86A980(v155, (uint64_t)"\n", 1);
  if (SHIBYTE(v407.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v407.__r_.__value_.__l.__data_);
    if (*(_BYTE *)(a1 + 1616))
      goto LABEL_359;
  }
  else if (*(_BYTE *)(a1 + 1616))
  {
    goto LABEL_359;
  }
  if (sub_20F9210FC((_QWORD *)a1))
  {
    v156 = *(_QWORD *)(a1 + 1232);
    v157 = *(_QWORD *)(a1 + 1240);
    if (v156 != v157)
    {
      v158 = 0;
      do
      {
        if ((*(_BYTE *)(*(_QWORD *)(v156 + 48) + 4) & 6) == 0)
          ++v158;
        v156 += 144;
      }
      while (v156 != v157);
    }
  }
LABEL_359:
  sub_20E86A980(a2, (uint64_t)"\tthere are ", 11);
  v159 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v159, (uint64_t)" present in the system (", 24);
  v160 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v160, (uint64_t)" DoF total)\n", 12);
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = v401;
  strcpy(v408[0].__r_.__value_.__l.__data_, "cv3d::vio::VIOZeroDisplacementFactor<double>]");
  sub_20E8D1238(v408, 44, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v161 = v408;
  else
    v161 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v162 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v162 = v408[0].__r_.__value_.__l.__size_;
  v163 = sub_20E86A980(a2, (uint64_t)v161, v162);
  sub_20E86A980(v163, (uint64_t)": ", 2);
  v164 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v164, (uint64_t)"D factor\n", 9);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  v165 = sub_20E86A980(a2, (uint64_t)"\tconstrains ", 12);
  memset(&v407, 0, sizeof(v407));
  v166 = (char *)operator new(0x28uLL);
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v166;
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = *(_OWORD *)&v406[32];
  strcpy(v166 + 31, "le>]");
  *(_OWORD *)v166 = *(_OWORD *)&v406[16];
  *((_OWORD *)v166 + 1) = *(_OWORD *)v406;
  sub_20E8D1238(v408, 34, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v167 = v408;
  else
    v167 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v168 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v168 = v408[0].__r_.__value_.__l.__size_;
  std::string::append(&v407, (const std::string::value_type *)v167, v168);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  std::string::append(&v407, ", ", 2uLL);
  v169 = (char *)operator new(0x28uLL);
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v169;
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = *(_OWORD *)&v406[32];
  strcpy(v169 + 31, "le>]");
  *(_OWORD *)v169 = *(_OWORD *)&v406[16];
  *((_OWORD *)v169 + 1) = *(_OWORD *)v406;
  sub_20E8D1238(v408, 34, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v170 = v408;
  else
    v170 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v171 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v171 = v408[0].__r_.__value_.__l.__size_;
  std::string::append(&v407, (const std::string::value_type *)v170, v171);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  if ((v407.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v172 = &v407;
  else
    v172 = (std::string *)v407.__r_.__value_.__r.__words[0];
  if ((v407.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v173 = HIBYTE(v407.__r_.__value_.__r.__words[2]);
  else
    v173 = v407.__r_.__value_.__l.__size_;
  v174 = sub_20E86A980(v165, (uint64_t)v172, v173);
  sub_20E86A980(v174, (uint64_t)"\n", 1);
  if (SHIBYTE(v407.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v407.__r_.__value_.__l.__data_);
    if (*(_BYTE *)(a1 + 1616))
      goto LABEL_401;
  }
  else if (*(_BYTE *)(a1 + 1616))
  {
    goto LABEL_401;
  }
  if (sub_20F9210FC((_QWORD *)a1))
  {
    v175 = *(_QWORD *)(a1 + 1256);
    v176 = *(_QWORD *)(a1 + 1264);
    if (v175 != v176)
    {
      v177 = 0;
      do
      {
        if ((*(_BYTE *)(*(_QWORD *)(v175 + 48) + 4) & 6) == 0 && (*(_BYTE *)(*(_QWORD *)(v175 + 56) + 4) & 6) == 0)
          ++v177;
        v175 += 152;
      }
      while (v175 != v176);
    }
  }
LABEL_401:
  sub_20E86A980(a2, (uint64_t)"\tthere are ", 11);
  v178 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v178, (uint64_t)" present in the system (", 24);
  v179 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v179, (uint64_t)" DoF total)\n", 12);
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = xmmword_2102DC8D0;
  strcpy(v408[0].__r_.__value_.__l.__data_, "cv3d::vio::VIOMapLandmarkFactor<double>]");
  sub_20E8D1238(v408, 39, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v180 = v408;
  else
    v180 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v181 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v181 = v408[0].__r_.__value_.__l.__size_;
  v182 = sub_20E86A980(a2, (uint64_t)v180, v181);
  sub_20E86A980(v182, (uint64_t)": ", 2);
  v183 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v183, (uint64_t)"D factor\n", 9);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  v184 = sub_20E86A980(a2, (uint64_t)"\tconstrains ", 12);
  memset(&v407, 0, sizeof(v407));
  v185 = operator new(0x30uLL);
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v185;
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = v402;
  *v185 = v399[2];
  v185[1] = v399[1];
  *(_OWORD *)((char *)v185 + 25) = v399[0];
  *((_BYTE *)v185 + 41) = 0;
  sub_20E8D1238(v408, 40, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v186 = v408;
  else
    v186 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v187 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v187 = v408[0].__r_.__value_.__l.__size_;
  std::string::append(&v407, (const std::string::value_type *)v186, v187);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  std::string::append(&v407, ", ", 2uLL);
  v188 = (char *)operator new(0x28uLL);
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v188;
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = *(_OWORD *)&v406[32];
  strcpy(v188 + 31, "le>]");
  *(_OWORD *)v188 = *(_OWORD *)&v406[16];
  *((_OWORD *)v188 + 1) = *(_OWORD *)v406;
  sub_20E8D1238(v408, 34, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v189 = v408;
  else
    v189 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v190 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v190 = v408[0].__r_.__value_.__l.__size_;
  std::string::append(&v407, (const std::string::value_type *)v189, v190);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  std::string::append(&v407, ", ", 2uLL);
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
  *(_WORD *)&v404[50] = 0;
  *(_DWORD *)&v404[52] = 0;
  *(_QWORD *)&v404[56] = 0x8000000000000030;
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = xmmword_2102DC8E0;
  strcpy(v408[0].__r_.__value_.__l.__data_, "cv3d::vio::IntrinsicsCalibVariable<double>]");
  strcpy(v404, "ariable<double>]nsicsCalibVariabcv3d::vio::Intri+");
  sub_20E8D1238(v408, 42, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v191 = v408;
  else
    v191 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v192 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v192 = v408[0].__r_.__value_.__l.__size_;
  std::string::append(&v407, (const std::string::value_type *)v191, v192);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  std::string::append(&v407, ", ", 2uLL);
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
  *(_WORD *)&v398[50] = 0;
  *(_DWORD *)&v398[52] = 0;
  *(_QWORD *)&v398[56] = 0x8000000000000038;
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = xmmword_2102DC7C0;
  strcpy(v408[0].__r_.__value_.__l.__data_, "cv3d::vio::RadialDistortionCalibVariable<double>]");
  strcpy(v398, "Variable<double>lDistortionCalibcv3d::vio::Radia1");
  sub_20E8D1238(v408, 48, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v193 = v408;
  else
    v193 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v194 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v194 = v408[0].__r_.__value_.__l.__size_;
  std::string::append(&v407, (const std::string::value_type *)v193, v194);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  if ((v407.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v195 = &v407;
  else
    v195 = (std::string *)v407.__r_.__value_.__r.__words[0];
  if ((v407.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v196 = HIBYTE(v407.__r_.__value_.__r.__words[2]);
  else
    v196 = v407.__r_.__value_.__l.__size_;
  v197 = sub_20E86A980(v184, (uint64_t)v195, v196);
  sub_20E86A980(v197, (uint64_t)"\n", 1);
  if (SHIBYTE(v407.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v407.__r_.__value_.__l.__data_);
    if (*(_BYTE *)(a1 + 1616))
      goto LABEL_461;
  }
  else if (*(_BYTE *)(a1 + 1616))
  {
    goto LABEL_461;
  }
  if (sub_20F9210FC((_QWORD *)a1))
  {
    v198 = *(_QWORD **)(a1 + 1280);
    v199 = *(_QWORD **)(a1 + 1288);
    if (v198 != v199)
    {
      v200 = 0;
      do
      {
        if ((*(_BYTE *)(v198[25] + 4) & 6) == 0
          && (*(_BYTE *)(v198[26] + 4) & 6) == 0
          && (*(_BYTE *)(v198[27] + 4) & 6) == 0
          && (*(_BYTE *)(v198[28] + 4) & 6) == 0)
        {
          ++v200;
        }
        v198 += 38;
      }
      while (v198 != v199);
    }
  }
LABEL_461:
  sub_20E86A980(a2, (uint64_t)"\tthere are ", 11);
  v201 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v201, (uint64_t)" present in the system (", 24);
  v202 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v202, (uint64_t)" DoF total)\n", 12);
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = xmmword_2102DC8F0;
  strcpy(v408[0].__r_.__value_.__l.__data_, "cv3d::vio::VIOPlaneFactor<double>]");
  sub_20E8D1238(v408, 33, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v203 = v408;
  else
    v203 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v204 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v204 = v408[0].__r_.__value_.__l.__size_;
  v205 = sub_20E86A980(a2, (uint64_t)v203, v204);
  sub_20E86A980(v205, (uint64_t)": ", 2);
  v206 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v206, (uint64_t)"D factor\n", 9);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  v207 = sub_20E86A980(a2, (uint64_t)"\tconstrains ", 12);
  memset(&v407, 0, sizeof(v407));
  v208 = (char *)operator new(0x28uLL);
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v208;
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = *(_OWORD *)&v406[32];
  strcpy(v208 + 31, "le>]");
  *(_OWORD *)v208 = *(_OWORD *)&v406[16];
  *((_OWORD *)v208 + 1) = *(_OWORD *)v406;
  sub_20E8D1238(v408, 34, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v209 = v408;
  else
    v209 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v210 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v210 = v408[0].__r_.__value_.__l.__size_;
  std::string::append(&v407, (const std::string::value_type *)v209, v210);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  std::string::append(&v407, ", ", 2uLL);
  v211 = (char *)operator new(0x28uLL);
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v211;
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = *(_OWORD *)&v406[32];
  strcpy(v211 + 31, "le>]");
  *(_OWORD *)v211 = *(_OWORD *)&v406[16];
  *((_OWORD *)v211 + 1) = *(_OWORD *)v406;
  sub_20E8D1238(v408, 34, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v212 = v408;
  else
    v212 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v213 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v213 = v408[0].__r_.__value_.__l.__size_;
  std::string::append(&v407, (const std::string::value_type *)v212, v213);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  std::string::append(&v407, ", ", 2uLL);
  v214 = (char *)operator new(0x28uLL);
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v214;
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = *(_OWORD *)&v406[32];
  strcpy(v214 + 31, "le>]");
  *(_OWORD *)v214 = *(_OWORD *)&v406[16];
  *((_OWORD *)v214 + 1) = *(_OWORD *)v406;
  sub_20E8D1238(v408, 34, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v215 = v408;
  else
    v215 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v216 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v216 = v408[0].__r_.__value_.__l.__size_;
  std::string::append(&v407, (const std::string::value_type *)v215, v216);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  std::string::append(&v407, ", ", 2uLL);
  v217 = (char *)operator new(0x28uLL);
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v217;
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = *(_OWORD *)&v406[32];
  strcpy(v217 + 31, "le>]");
  *(_OWORD *)v217 = *(_OWORD *)&v406[16];
  *((_OWORD *)v217 + 1) = *(_OWORD *)v406;
  sub_20E8D1238(v408, 34, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v218 = v408;
  else
    v218 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v219 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v219 = v408[0].__r_.__value_.__l.__size_;
  std::string::append(&v407, (const std::string::value_type *)v218, v219);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  std::string::append(&v407, ", ", 2uLL);
  v220 = operator new(0x30uLL);
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v220;
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = *(_OWORD *)&v397[48];
  *v220 = *(_OWORD *)&v397[32];
  v220[1] = *(_OWORD *)&v397[16];
  *(_OWORD *)((char *)v220 + 30) = *(_OWORD *)v397;
  *((_BYTE *)v220 + 46) = 0;
  sub_20E8D1238(v408, 45, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v221 = v408;
  else
    v221 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v222 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v222 = v408[0].__r_.__value_.__l.__size_;
  std::string::append(&v407, (const std::string::value_type *)v221, v222);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  std::string::append(&v407, ", ", 2uLL);
  v223 = (char *)operator new(0x20uLL);
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v223;
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = v400[2];
  *(_OWORD *)v223 = v400[1];
  *(_OWORD *)(v223 + 14) = v400[0];
  v223[30] = 0;
  sub_20E8D1238(v408, 29, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v224 = v408;
  else
    v224 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v225 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v225 = v408[0].__r_.__value_.__l.__size_;
  std::string::append(&v407, (const std::string::value_type *)v224, v225);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  if ((v407.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v226 = &v407;
  else
    v226 = (std::string *)v407.__r_.__value_.__r.__words[0];
  if ((v407.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v227 = HIBYTE(v407.__r_.__value_.__r.__words[2]);
  else
    v227 = v407.__r_.__value_.__l.__size_;
  v228 = sub_20E86A980(v207, (uint64_t)v226, v227);
  sub_20E86A980(v228, (uint64_t)"\n", 1);
  if (SHIBYTE(v407.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v407.__r_.__value_.__l.__data_);
    if (*(_BYTE *)(a1 + 1616))
      goto LABEL_539;
  }
  else if (*(_BYTE *)(a1 + 1616))
  {
    goto LABEL_539;
  }
  if (sub_20F9210FC((_QWORD *)a1))
  {
    v229 = *(_QWORD **)(a1 + 1304);
    v230 = *(_QWORD **)(a1 + 1312);
    if (v229 != v230)
    {
      v231 = 0;
      do
      {
        if ((*(_BYTE *)(v229[28] + 4) & 6) == 0
          && (*(_BYTE *)(v229[29] + 4) & 6) == 0
          && (*(_BYTE *)(v229[30] + 4) & 6) == 0
          && (*(_BYTE *)(v229[31] + 4) & 6) == 0
          && (*(_BYTE *)(v229[32] + 4) & 6) == 0
          && (*(_BYTE *)(v229[33] + 4) & 6) == 0)
        {
          ++v231;
        }
        v229 += 45;
      }
      while (v229 != v230);
    }
  }
LABEL_539:
  sub_20E86A980(a2, (uint64_t)"\tthere are ", 11);
  v232 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v232, (uint64_t)" present in the system (", 24);
  v233 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v233, (uint64_t)" DoF total)\n", 12);
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = xmmword_2102DBF10;
  strcpy(v408[0].__r_.__value_.__l.__data_, "cv3d::vio::StateAndIMUTimeOffsetPriorFactor<double>]");
  sub_20E8D1238(v408, 51, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v234 = v408;
  else
    v234 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v235 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v235 = v408[0].__r_.__value_.__l.__size_;
  v236 = sub_20E86A980(a2, (uint64_t)v234, v235);
  sub_20E86A980(v236, (uint64_t)": ", 2);
  v237 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v237, (uint64_t)"D factor\n", 9);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  v238 = sub_20E86A980(a2, (uint64_t)"\tconstrains ", 12);
  memset(&v407, 0, sizeof(v407));
  v239 = (char *)operator new(0x20uLL);
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v239;
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = v400[2];
  *(_OWORD *)v239 = v400[1];
  *(_OWORD *)(v239 + 14) = v400[0];
  v239[30] = 0;
  sub_20E8D1238(v408, 29, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v240 = v408;
  else
    v240 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v241 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v241 = v408[0].__r_.__value_.__l.__size_;
  std::string::append(&v407, (const std::string::value_type *)v240, v241);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  if ((v407.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v242 = &v407;
  else
    v242 = (std::string *)v407.__r_.__value_.__r.__words[0];
  if ((v407.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v243 = HIBYTE(v407.__r_.__value_.__r.__words[2]);
  else
    v243 = v407.__r_.__value_.__l.__size_;
  v244 = sub_20E86A980(v238, (uint64_t)v242, v243);
  sub_20E86A980(v244, (uint64_t)"\n", 1);
  if (SHIBYTE(v407.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v407.__r_.__value_.__l.__data_);
    if (*(_BYTE *)(a1 + 1616))
      goto LABEL_571;
  }
  else if (*(_BYTE *)(a1 + 1616))
  {
    goto LABEL_571;
  }
  if (sub_20F9210FC((_QWORD *)a1))
  {
    v245 = *(_QWORD *)(a1 + 1328);
    v246 = *(_QWORD *)(a1 + 1336);
    if (v245 != v246)
    {
      v247 = 0;
      do
      {
        if ((*(_BYTE *)(*(_QWORD *)(v245 + 48) + 4) & 6) == 0)
          ++v247;
        v245 += 112;
      }
      while (v245 != v246);
    }
  }
LABEL_571:
  sub_20E86A980(a2, (uint64_t)"\tthere are ", 11);
  v248 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v248, (uint64_t)" present in the system (", 24);
  v249 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v249, (uint64_t)" DoF total)\n", 12);
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x60uLL);
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = xmmword_2103B84B0;
  strcpy(v408[0].__r_.__value_.__l.__data_, "cv3d::vio::GenericCalibVariablePriorFactor<double, cv3d::vio::IntrinsicsCalibVariable<double>>]");
  sub_20E8D1238(v408, 94, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v250 = v408;
  else
    v250 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v251 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v251 = v408[0].__r_.__value_.__l.__size_;
  v252 = sub_20E86A980(a2, (uint64_t)v250, v251);
  sub_20E86A980(v252, (uint64_t)": ", 2);
  v253 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v253, (uint64_t)"D factor\n", 9);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  v254 = sub_20E86A980(a2, (uint64_t)"\tconstrains ", 12);
  memset(&v407, 0, sizeof(v407));
  v255 = operator new(0x30uLL);
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v255;
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = *(_OWORD *)&v404[48];
  *v255 = *(_OWORD *)&v404[32];
  v255[1] = *(_OWORD *)&v404[16];
  *(_OWORD *)((char *)v255 + 27) = *(_OWORD *)v404;
  *((_BYTE *)v255 + 43) = 0;
  sub_20E8D1238(v408, 42, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v256 = v408;
  else
    v256 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v257 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v257 = v408[0].__r_.__value_.__l.__size_;
  std::string::append(&v407, (const std::string::value_type *)v256, v257);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  if ((v407.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v258 = &v407;
  else
    v258 = (std::string *)v407.__r_.__value_.__r.__words[0];
  if ((v407.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v259 = HIBYTE(v407.__r_.__value_.__r.__words[2]);
  else
    v259 = v407.__r_.__value_.__l.__size_;
  v260 = sub_20E86A980(v254, (uint64_t)v258, v259);
  sub_20E86A980(v260, (uint64_t)"\n", 1);
  if (SHIBYTE(v407.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v407.__r_.__value_.__l.__data_);
    if (*(_BYTE *)(a1 + 1616))
      goto LABEL_603;
  }
  else if (*(_BYTE *)(a1 + 1616))
  {
    goto LABEL_603;
  }
  if (sub_20F9210FC((_QWORD *)a1))
  {
    v261 = *(_QWORD *)(a1 + 1352);
    v262 = *(_QWORD *)(a1 + 1360);
    if (v261 != v262)
    {
      v263 = 0;
      do
      {
        if ((*(_BYTE *)(*(_QWORD *)(v261 + 96) + 4) & 6) == 0)
          ++v263;
        v261 += 208;
      }
      while (v261 != v262);
    }
  }
LABEL_603:
  sub_20E86A980(a2, (uint64_t)"\tthere are ", 11);
  v264 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v264, (uint64_t)" present in the system (", 24);
  v265 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v265, (uint64_t)" DoF total)\n", 12);
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x68uLL);
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = xmmword_2102DCFA0;
  strcpy(v408[0].__r_.__value_.__l.__data_, "cv3d::vio::GenericCalibVariablePriorFactor<double, cv3d::vio::RadialDistortionCalibVariable<double>>]");
  sub_20E8D1238(v408, 100, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v266 = v408;
  else
    v266 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v267 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v267 = v408[0].__r_.__value_.__l.__size_;
  v268 = sub_20E86A980(a2, (uint64_t)v266, v267);
  sub_20E86A980(v268, (uint64_t)": ", 2);
  v269 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v269, (uint64_t)"D factor\n", 9);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  v270 = sub_20E86A980(a2, (uint64_t)"\tconstrains ", 12);
  memset(&v407, 0, sizeof(v407));
  v271 = operator new(0x38uLL);
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v271;
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = *(_OWORD *)&v398[48];
  v271[24] = 93;
  *(_OWORD *)v271 = *(_OWORD *)&v398[32];
  *((_OWORD *)v271 + 1) = *(_OWORD *)&v398[16];
  *((_OWORD *)v271 + 2) = *(_OWORD *)v398;
  sub_20E8D1238(v408, 48, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v272 = v408;
  else
    v272 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v273 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v273 = v408[0].__r_.__value_.__l.__size_;
  std::string::append(&v407, (const std::string::value_type *)v272, v273);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  if ((v407.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v274 = &v407;
  else
    v274 = (std::string *)v407.__r_.__value_.__r.__words[0];
  if ((v407.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v275 = HIBYTE(v407.__r_.__value_.__r.__words[2]);
  else
    v275 = v407.__r_.__value_.__l.__size_;
  v276 = sub_20E86A980(v270, (uint64_t)v274, v275);
  sub_20E86A980(v276, (uint64_t)"\n", 1);
  if (SHIBYTE(v407.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v407.__r_.__value_.__l.__data_);
    if (*(_BYTE *)(a1 + 1616))
      goto LABEL_635;
  }
  else if (*(_BYTE *)(a1 + 1616))
  {
    goto LABEL_635;
  }
  if (sub_20F9210FC((_QWORD *)a1))
  {
    v277 = *(_QWORD *)(a1 + 1376);
    v278 = *(_QWORD *)(a1 + 1384);
    if (v277 != v278)
    {
      v279 = 0;
      do
      {
        if ((*(_BYTE *)(*(_QWORD *)(v277 + 96) + 4) & 6) == 0)
          ++v279;
        v277 += 208;
      }
      while (v277 != v278);
    }
  }
LABEL_635:
  sub_20E86A980(a2, (uint64_t)"\tthere are ", 11);
  v280 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v280, (uint64_t)" present in the system (", 24);
  v281 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v281, (uint64_t)" DoF total)\n", 12);
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x68uLL);
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = xmmword_210312DD0;
  strcpy(v408[0].__r_.__value_.__l.__data_, "cv3d::vio::GenericCalibVariablePriorFactor<double, cv3d::vio::ExternalLensCalibVariable<double>>]");
  sub_20E8D1238(v408, 96, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v282 = v408;
  else
    v282 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v283 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v283 = v408[0].__r_.__value_.__l.__size_;
  v284 = sub_20E86A980(a2, (uint64_t)v282, v283);
  sub_20E86A980(v284, (uint64_t)": ", 2);
  v285 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v285, (uint64_t)"D factor\n", 9);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  v286 = sub_20E86A980(a2, (uint64_t)"\tconstrains ", 12);
  memset(&v407, 0, sizeof(v407));
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = v401;
  strcpy(v408[0].__r_.__value_.__l.__data_, "cv3d::vio::ExternalLensCalibVariable<double>]");
  qmemcpy(v400, "ariable<double>]nalLensCalibVaricv3d::vio::Exter", sizeof(v400));
  sub_20E8D1238(v408, 44, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v287 = v408;
  else
    v287 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v288 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v288 = v408[0].__r_.__value_.__l.__size_;
  std::string::append(&v407, (const std::string::value_type *)v287, v288);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  if ((v407.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v289 = &v407;
  else
    v289 = (std::string *)v407.__r_.__value_.__r.__words[0];
  if ((v407.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v290 = HIBYTE(v407.__r_.__value_.__r.__words[2]);
  else
    v290 = v407.__r_.__value_.__l.__size_;
  v291 = sub_20E86A980(v286, (uint64_t)v289, v290);
  sub_20E86A980(v291, (uint64_t)"\n", 1);
  if (SHIBYTE(v407.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v407.__r_.__value_.__l.__data_);
    if (*(_BYTE *)(a1 + 1616))
      goto LABEL_667;
  }
  else if (*(_BYTE *)(a1 + 1616))
  {
    goto LABEL_667;
  }
  if (sub_20F9210FC((_QWORD *)a1))
  {
    v292 = *(_QWORD *)(a1 + 1400);
    v293 = *(_QWORD *)(a1 + 1408);
    if (v292 != v293)
    {
      v294 = 0;
      do
      {
        if ((*(_BYTE *)(*(_QWORD *)(v292 + 80) + 4) & 6) == 0)
          ++v294;
        v292 += 176;
      }
      while (v292 != v293);
    }
  }
LABEL_667:
  sub_20E86A980(a2, (uint64_t)"\tthere are ", 11);
  v295 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v295, (uint64_t)" present in the system (", 24);
  v296 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v296, (uint64_t)" DoF total)\n", 12);
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x60uLL);
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = v396;
  strcpy(v408[0].__r_.__value_.__l.__data_, "cv3d::vio::GenericCalibVariablePriorFactor<double, cv3d::vio::Generic3DoFVariable<double>>]");
  sub_20E8D1238(v408, 90, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v297 = v408;
  else
    v297 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v298 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v298 = v408[0].__r_.__value_.__l.__size_;
  v299 = sub_20E86A980(a2, (uint64_t)v297, v298);
  sub_20E86A980(v299, (uint64_t)": ", 2);
  v300 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v300, (uint64_t)"D factor\n", 9);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  v301 = sub_20E86A980(a2, (uint64_t)"\tconstrains ", 12);
  memset(&v407, 0, sizeof(v407));
  v302 = operator new(0x28uLL);
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v302;
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = v405;
  *(_OWORD *)v302 = v403[1];
  *((_OWORD *)v302 + 1) = v403[0];
  strcpy((char *)v302 + 31, "double>]");
  sub_20E8D1238(v408, 38, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v303 = v408;
  else
    v303 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v304 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v304 = v408[0].__r_.__value_.__l.__size_;
  std::string::append(&v407, (const std::string::value_type *)v303, v304);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  if ((v407.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v305 = &v407;
  else
    v305 = (std::string *)v407.__r_.__value_.__r.__words[0];
  if ((v407.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v306 = HIBYTE(v407.__r_.__value_.__r.__words[2]);
  else
    v306 = v407.__r_.__value_.__l.__size_;
  v307 = sub_20E86A980(v301, (uint64_t)v305, v306);
  sub_20E86A980(v307, (uint64_t)"\n", 1);
  if (SHIBYTE(v407.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v407.__r_.__value_.__l.__data_);
    if (*(_BYTE *)(a1 + 1616))
      goto LABEL_699;
  }
  else if (*(_BYTE *)(a1 + 1616))
  {
    goto LABEL_699;
  }
  if (sub_20F9210FC((_QWORD *)a1))
  {
    v308 = *(_QWORD *)(a1 + 1424);
    v309 = *(_QWORD *)(a1 + 1432);
    if (v308 != v309)
    {
      v310 = 0;
      do
      {
        if ((*(_BYTE *)(*(_QWORD *)(v308 + 80) + 4) & 6) == 0)
          ++v310;
        v308 += 176;
      }
      while (v308 != v309);
    }
  }
LABEL_699:
  sub_20E86A980(a2, (uint64_t)"\tthere are ", 11);
  v311 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v311, (uint64_t)" present in the system (", 24);
  v312 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v312, (uint64_t)" DoF total)\n", 12);
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x50uLL);
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = xmmword_2102DB430;
  strcpy(v408[0].__r_.__value_.__l.__data_, "cv3d::vio::VIOLandmarkDepthSqrtCauchyFactor<double, true, Depth::Regular>]");
  sub_20E8D1238(v408, 73, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v313 = v408;
  else
    v313 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v314 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v314 = v408[0].__r_.__value_.__l.__size_;
  v315 = sub_20E86A980(a2, (uint64_t)v313, v314);
  sub_20E86A980(v315, (uint64_t)": ", 2);
  v316 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v316, (uint64_t)"D factor\n", 9);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  v317 = sub_20E86A980(a2, (uint64_t)"\tconstrains ", 12);
  sub_20FB5E2B4(v408);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v318 = v408;
  else
    v318 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v319 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v319 = v408[0].__r_.__value_.__l.__size_;
  v320 = sub_20E86A980(v317, (uint64_t)v318, v319);
  sub_20E86A980(v320, (uint64_t)"\n", 1);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v408[0].__r_.__value_.__l.__data_);
    if (*(_BYTE *)(a1 + 1616))
      goto LABEL_719;
  }
  else if (*(_BYTE *)(a1 + 1616))
  {
    goto LABEL_719;
  }
  if (sub_20F9210FC((_QWORD *)a1))
    sub_20F9235BC(*(_QWORD **)(a1 + 1448), *(_QWORD **)(a1 + 1456), (uint64_t)v408);
LABEL_719:
  sub_20E86A980(a2, (uint64_t)"\tthere are ", 11);
  v321 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v321, (uint64_t)" present in the system (", 24);
  v322 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v322, (uint64_t)" DoF total)\n", 12);
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = xmmword_2102DBC30;
  strcpy(v408[0].__r_.__value_.__l.__data_, "cv3d::vio::VIOLandmarkCartesianSqrtCauchyFactor<double, true>]");
  sub_20E8D1238(v408, 61, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v323 = v408;
  else
    v323 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v324 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v324 = v408[0].__r_.__value_.__l.__size_;
  v325 = sub_20E86A980(a2, (uint64_t)v323, v324);
  sub_20E86A980(v325, (uint64_t)": ", 2);
  v326 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v326, (uint64_t)"D factor\n", 9);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  v327 = sub_20E86A980(a2, (uint64_t)"\tconstrains ", 12);
  memset(&v407, 0, sizeof(v407));
  v328 = operator new(0x30uLL);
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v328;
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = v402;
  *v328 = v399[2];
  v328[1] = v399[1];
  *(_OWORD *)((char *)v328 + 25) = v399[0];
  *((_BYTE *)v328 + 41) = 0;
  sub_20E8D1238(v408, 40, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v329 = v408;
  else
    v329 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v330 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v330 = v408[0].__r_.__value_.__l.__size_;
  std::string::append(&v407, (const std::string::value_type *)v329, v330);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  std::string::append(&v407, ", ", 2uLL);
  v331 = (char *)operator new(0x28uLL);
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v331;
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = *(_OWORD *)&v406[32];
  strcpy(v331 + 31, "le>]");
  *(_OWORD *)v331 = *(_OWORD *)&v406[16];
  *((_OWORD *)v331 + 1) = *(_OWORD *)v406;
  sub_20E8D1238(v408, 34, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v332 = v408;
  else
    v332 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v333 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v333 = v408[0].__r_.__value_.__l.__size_;
  std::string::append(&v407, (const std::string::value_type *)v332, v333);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  std::string::append(&v407, ", ", 2uLL);
  v334 = operator new(0x30uLL);
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v334;
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = *(_OWORD *)&v404[48];
  *v334 = *(_OWORD *)&v404[32];
  v334[1] = *(_OWORD *)&v404[16];
  *(_OWORD *)((char *)v334 + 27) = *(_OWORD *)v404;
  *((_BYTE *)v334 + 43) = 0;
  sub_20E8D1238(v408, 42, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v335 = v408;
  else
    v335 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v336 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v336 = v408[0].__r_.__value_.__l.__size_;
  std::string::append(&v407, (const std::string::value_type *)v335, v336);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  std::string::append(&v407, ", ", 2uLL);
  v337 = operator new(0x38uLL);
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v337;
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = *(_OWORD *)&v398[48];
  v337[24] = 93;
  *(_OWORD *)v337 = *(_OWORD *)&v398[32];
  *((_OWORD *)v337 + 1) = *(_OWORD *)&v398[16];
  *((_OWORD *)v337 + 2) = *(_OWORD *)v398;
  sub_20E8D1238(v408, 48, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v338 = v408;
  else
    v338 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v339 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v339 = v408[0].__r_.__value_.__l.__size_;
  std::string::append(&v407, (const std::string::value_type *)v338, v339);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  std::string::append(&v407, ", ", 2uLL);
  v340 = operator new(0x30uLL);
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v340;
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = v401;
  *v340 = v400[2];
  v340[1] = v400[1];
  *(_OWORD *)((char *)v340 + 29) = v400[0];
  *((_BYTE *)v340 + 45) = 0;
  sub_20E8D1238(v408, 44, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v341 = v408;
  else
    v341 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v342 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v342 = v408[0].__r_.__value_.__l.__size_;
  std::string::append(&v407, (const std::string::value_type *)v341, v342);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  std::string::append(&v407, ", ", 2uLL);
  v343 = operator new(0x28uLL);
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v343;
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = v405;
  *(_OWORD *)v343 = v395[1];
  *((_OWORD *)v343 + 1) = v395[0];
  strcpy((char *)v343 + 31, "double>]");
  sub_20E8D1238(v408, 38, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v344 = v408;
  else
    v344 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v345 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v345 = v408[0].__r_.__value_.__l.__size_;
  std::string::append(&v407, (const std::string::value_type *)v344, v345);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  if ((v407.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v346 = &v407;
  else
    v346 = (std::string *)v407.__r_.__value_.__r.__words[0];
  if ((v407.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v347 = HIBYTE(v407.__r_.__value_.__r.__words[2]);
  else
    v347 = v407.__r_.__value_.__l.__size_;
  v348 = sub_20E86A980(v327, (uint64_t)v346, v347);
  sub_20E86A980(v348, (uint64_t)"\n", 1);
  if (SHIBYTE(v407.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v407.__r_.__value_.__l.__data_);
    if (*(_BYTE *)(a1 + 1616))
      goto LABEL_797;
  }
  else if (*(_BYTE *)(a1 + 1616))
  {
    goto LABEL_797;
  }
  if (sub_20F9210FC((_QWORD *)a1))
  {
    v349 = *(_QWORD **)(a1 + 1472);
    v350 = *(_QWORD **)(a1 + 1480);
    if (v349 != v350)
    {
      v351 = 0;
      do
      {
        if ((*(_BYTE *)(v349[8] + 4) & 6) == 0
          && (*(_BYTE *)(v349[9] + 4) & 6) == 0
          && (*(_BYTE *)(v349[10] + 4) & 6) == 0
          && (*(_BYTE *)(v349[11] + 4) & 6) == 0
          && (*(_BYTE *)(v349[12] + 4) & 6) == 0
          && (*(_BYTE *)(v349[13] + 4) & 6) == 0)
        {
          ++v351;
        }
        v349 += 23;
      }
      while (v349 != v350);
    }
  }
LABEL_797:
  sub_20E86A980(a2, (uint64_t)"\tthere are ", 11);
  v352 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v352, (uint64_t)" present in the system (", 24);
  v353 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v353, (uint64_t)" DoF total)\n", 12);
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x60uLL);
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = xmmword_2103B8460;
  strcpy(v408[0].__r_.__value_.__l.__data_, "cv3d::vio::VIOLandmarkDepthSqrtCauchyFactor<double, true, Depth::Regular, Measurement::Line>]");
  sub_20E8D1238(v408, 92, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v354 = v408;
  else
    v354 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v355 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v355 = v408[0].__r_.__value_.__l.__size_;
  v356 = sub_20E86A980(a2, (uint64_t)v354, v355);
  sub_20E86A980(v356, (uint64_t)": ", 2);
  v357 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v357, (uint64_t)"D factor\n", 9);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  v358 = sub_20E86A980(a2, (uint64_t)"\tconstrains ", 12);
  sub_20FB5E2B4(v408);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v359 = v408;
  else
    v359 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v360 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v360 = v408[0].__r_.__value_.__l.__size_;
  v361 = sub_20E86A980(v358, (uint64_t)v359, v360);
  sub_20E86A980(v361, (uint64_t)"\n", 1);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v408[0].__r_.__value_.__l.__data_);
    if (*(_BYTE *)(a1 + 1616))
      goto LABEL_817;
  }
  else if (*(_BYTE *)(a1 + 1616))
  {
    goto LABEL_817;
  }
  if (sub_20F9210FC((_QWORD *)a1))
    sub_20F921AD8(*(_QWORD **)(a1 + 1496), *(_QWORD **)(a1 + 1504), (uint64_t)v408);
LABEL_817:
  sub_20E86A980(a2, (uint64_t)"\tthere are ", 11);
  v362 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v362, (uint64_t)" present in the system (", 24);
  v363 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v363, (uint64_t)" DoF total)\n", 12);
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x50uLL);
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = xmmword_2102DBFA0;
  strcpy(v408[0].__r_.__value_.__l.__data_, "cv3d::vio::VIOLandmarkDepthSqrtCauchyFactorMono<double, true, Depth::Regular>]");
  sub_20E8D1238(v408, 77, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v364 = v408;
  else
    v364 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v365 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v365 = v408[0].__r_.__value_.__l.__size_;
  v366 = sub_20E86A980(a2, (uint64_t)v364, v365);
  sub_20E86A980(v366, (uint64_t)": ", 2);
  v367 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v367, (uint64_t)"D factor\n", 9);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  v368 = sub_20E86A980(a2, (uint64_t)"\tconstrains ", 12);
  memset(&v407, 0, sizeof(v407));
  v369 = operator new(0x30uLL);
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v369;
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = v402;
  *v369 = v399[2];
  v369[1] = v399[1];
  *(_OWORD *)((char *)v369 + 25) = v399[0];
  *((_BYTE *)v369 + 41) = 0;
  sub_20E8D1238(v408, 40, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v370 = v408;
  else
    v370 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v371 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v371 = v408[0].__r_.__value_.__l.__size_;
  std::string::append(&v407, (const std::string::value_type *)v370, v371);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  std::string::append(&v407, ", ", 2uLL);
  v372 = (char *)operator new(0x28uLL);
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v372;
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = *(_OWORD *)&v406[32];
  strcpy(v372 + 31, "le>]");
  *(_OWORD *)v372 = *(_OWORD *)&v406[16];
  *((_OWORD *)v372 + 1) = *(_OWORD *)v406;
  sub_20E8D1238(v408, 34, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v373 = v408;
  else
    v373 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v374 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v374 = v408[0].__r_.__value_.__l.__size_;
  std::string::append(&v407, (const std::string::value_type *)v373, v374);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  std::string::append(&v407, ", ", 2uLL);
  v375 = (char *)operator new(0x28uLL);
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v375;
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = *(_OWORD *)&v406[32];
  strcpy(v375 + 31, "le>]");
  *(_OWORD *)v375 = *(_OWORD *)&v406[16];
  *((_OWORD *)v375 + 1) = *(_OWORD *)v406;
  sub_20E8D1238(v408, 34, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v376 = v408;
  else
    v376 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v377 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v377 = v408[0].__r_.__value_.__l.__size_;
  std::string::append(&v407, (const std::string::value_type *)v376, v377);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  std::string::append(&v407, ", ", 2uLL);
  v378 = operator new(0x30uLL);
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v378;
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = *(_OWORD *)&v404[48];
  *v378 = *(_OWORD *)&v404[32];
  v378[1] = *(_OWORD *)&v404[16];
  *(_OWORD *)((char *)v378 + 27) = *(_OWORD *)v404;
  *((_BYTE *)v378 + 43) = 0;
  sub_20E8D1238(v408, 42, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v379 = v408;
  else
    v379 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v380 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v380 = v408[0].__r_.__value_.__l.__size_;
  std::string::append(&v407, (const std::string::value_type *)v379, v380);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  std::string::append(&v407, ", ", 2uLL);
  v381 = operator new(0x38uLL);
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v381;
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = *(_OWORD *)&v398[48];
  v381[24] = 93;
  *(_OWORD *)v381 = *(_OWORD *)&v398[32];
  *((_OWORD *)v381 + 1) = *(_OWORD *)&v398[16];
  *((_OWORD *)v381 + 2) = *(_OWORD *)v398;
  sub_20E8D1238(v408, 48, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v382 = v408;
  else
    v382 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v383 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v383 = v408[0].__r_.__value_.__l.__size_;
  std::string::append(&v407, (const std::string::value_type *)v382, v383);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  std::string::append(&v407, ", ", 2uLL);
  v384 = operator new(0x30uLL);
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v384;
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = v401;
  *v384 = v400[2];
  v384[1] = v400[1];
  *(_OWORD *)((char *)v384 + 29) = v400[0];
  *((_BYTE *)v384 + 45) = 0;
  sub_20E8D1238(v408, 44, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v385 = v408;
  else
    v385 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v386 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v386 = v408[0].__r_.__value_.__l.__size_;
  std::string::append(&v407, (const std::string::value_type *)v385, v386);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  std::string::append(&v407, ", ", 2uLL);
  v408[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
  *(_OWORD *)&v408[0].__r_.__value_.__r.__words[1] = xmmword_2102DC900;
  strcpy(v408[0].__r_.__value_.__l.__data_, "cv3d::vio::VIOLandmarkDepthVariable<double>]");
  sub_20E8D1238(v408, 43, 1uLL);
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v387 = v408;
  else
    v387 = (std::string *)v408[0].__r_.__value_.__r.__words[0];
  if ((v408[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v388 = HIBYTE(v408[0].__r_.__value_.__r.__words[2]);
  else
    v388 = v408[0].__r_.__value_.__l.__size_;
  std::string::append(&v407, (const std::string::value_type *)v387, v388);
  if (SHIBYTE(v408[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v408[0].__r_.__value_.__l.__data_);
  if ((v407.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v389 = &v407;
  else
    v389 = (std::string *)v407.__r_.__value_.__r.__words[0];
  if ((v407.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v390 = HIBYTE(v407.__r_.__value_.__r.__words[2]);
  else
    v390 = v407.__r_.__value_.__l.__size_;
  v391 = sub_20E86A980(v368, (uint64_t)v389, v390);
  sub_20E86A980(v391, (uint64_t)"\n", 1);
  if (SHIBYTE(v407.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v407.__r_.__value_.__l.__data_);
  sub_20FB5E964(a1, 0);
  sub_20E86A980(a2, (uint64_t)"\tthere are ", 11);
  v392 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v392, (uint64_t)" present in the system (", 24);
  v393 = (_QWORD *)std::ostream::operator<<();
  return sub_20E86A980(v393, (uint64_t)" DoF total)\n", 12);
}

void sub_20FB59B18(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 209) < 0)
    operator delete(*(void **)(v1 - 232));
  if (*(char *)(v1 - 233) < 0)
  {
    operator delete(*(void **)(v1 - 256));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FB59E1C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _DWORD v45[11];

  if (*(_BYTE *)(a1 + 1616))
  {
    v2 = *(_QWORD *)(a1 + 8);
    v3 = *(_QWORD *)(a1 + 16);
    if (v2 == v3)
      return 0;
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(v2 + 8);
      if ((*(_BYTE *)(v5 + 4) & 6) == 0)
        v4 = v4 + *(unsigned __int8 *)(v5 + 20);
      v2 += 16;
    }
    while (v2 != v3);
    return v4;
  }
  else if (sub_20FB5A3E8((_QWORD *)a1, v45))
  {
    *(_QWORD *)(a1 + 2424) = *(_QWORD *)(a1 + 2416);
    *(_QWORD *)(a1 + 2448) = *(_QWORD *)(a1 + 2440);
    *(_QWORD *)(a1 + 2472) = *(_QWORD *)(a1 + 2464);
    *(_QWORD *)(a1 + 2496) = *(_QWORD *)(a1 + 2488);
    *(_QWORD *)(a1 + 2520) = *(_QWORD *)(a1 + 2512);
    *(_QWORD *)(a1 + 2544) = *(_QWORD *)(a1 + 2536);
    *(_QWORD *)(a1 + 2568) = *(_QWORD *)(a1 + 2560);
    *(_QWORD *)(a1 + 2592) = *(_QWORD *)(a1 + 2584);
    *(_QWORD *)(a1 + 2616) = *(_QWORD *)(a1 + 2608);
    *(_QWORD *)(a1 + 2640) = *(_QWORD *)(a1 + 2632);
    *(_QWORD *)(a1 + 2664) = *(_QWORD *)(a1 + 2656);
    v6 = *(_QWORD *)(a1 + 1064);
    v7 = *(_QWORD *)(a1 + 1072);
    while (v6 != v7)
    {
      v8 = *(_QWORD *)(v6 + 208);
      if (*(_BYTE *)(v6 + 496) || (*(_BYTE *)(v8 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v6 + 216) + 4) & 6) != 0)
      {
        sub_20F394A20(a1 + 2416, v8);
        sub_20F3D35E0((_QWORD *)(a1 + 2416), *(_QWORD *)(v6 + 216));
      }
      v6 += 504;
    }
    v10 = *(_QWORD *)(a1 + 1088);
    v11 = *(_QWORD *)(a1 + 1096);
    while (v10 != v11)
    {
      v12 = *(_QWORD *)(v10 + 136);
      if (*(_BYTE *)(v10 + 272) || (*(_BYTE *)(v12 + 4) & 6) != 0)
        sub_20F394A20(a1 + 2416, v12);
      v10 += 280;
    }
    v13 = *(_QWORD *)(a1 + 1112);
    v14 = *(_QWORD *)(a1 + 1120);
    while (v13 != v14)
    {
      v15 = *(_QWORD *)(v13 + 136);
      if (*(_BYTE *)(v13 + 272) || (*(_BYTE *)(v15 + 4) & 6) != 0)
        sub_20F599C88((_QWORD *)(a1 + 2416), v15);
      v13 += 280;
    }
    v16 = *(_QWORD *)(a1 + 1136);
    v17 = *(_QWORD *)(a1 + 1144);
    while (v16 != v17)
    {
      v18 = *(_QWORD *)(v16 + 136);
      if (*(_BYTE *)(v16 + 272) || (*(_BYTE *)(v18 + 4) & 6) != 0)
        sub_20F59A480((_QWORD *)(a1 + 2416), v18);
      v16 += 280;
    }
    v19 = *(_QWORD *)(a1 + 1160);
    v20 = *(_QWORD *)(a1 + 1168);
    while (v19 != v20)
    {
      v21 = *(_QWORD *)(v19 + 64);
      if (*(_BYTE *)(v19 + 152) || (*(_BYTE *)(v21 + 4) & 6) != 0)
        sub_20F59A2E8((_QWORD *)(a1 + 2416), v21);
      v19 += 160;
    }
    sub_20FA5640C(*(_QWORD *)(a1 + 1184), *(_QWORD *)(a1 + 1192), (_QWORD *)(a1 + 2416));
    sub_20F5B85BC(*(_QWORD *)(a1 + 1208), *(_QWORD *)(a1 + 1216), (_QWORD *)(a1 + 2416));
    v22 = *(_QWORD *)(a1 + 1232);
    v23 = *(_QWORD *)(a1 + 1240);
    while (v22 != v23)
    {
      v24 = *(_QWORD *)(v22 + 48);
      if (*(_BYTE *)(v22 + 136) || (*(_BYTE *)(v24 + 4) & 6) != 0)
        sub_20F3D35E0((_QWORD *)(a1 + 2416), v24);
      v22 += 144;
    }
    v25 = *(_QWORD *)(a1 + 1256);
    v26 = *(_QWORD *)(a1 + 1264);
    while (v25 != v26)
    {
      v27 = *(_QWORD *)(v25 + 48);
      if (*(_BYTE *)(v25 + 144) || (*(_BYTE *)(v27 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v25 + 56) + 4) & 6) != 0)
      {
        sub_20F394A20(a1 + 2416, v27);
        sub_20F394A20(a1 + 2416, *(_QWORD *)(v25 + 56));
      }
      v25 += 152;
    }
    sub_20FA56358(*(_QWORD *)(a1 + 1280), *(_QWORD *)(a1 + 1288), (_QWORD *)(a1 + 2416));
    sub_20F8DF65C(*(_QWORD *)(a1 + 1304), *(_QWORD *)(a1 + 1312), (_QWORD *)(a1 + 2416));
    v28 = *(_QWORD *)(a1 + 1328);
    v29 = *(_QWORD *)(a1 + 1336);
    while (v28 != v29)
    {
      v30 = *(_QWORD *)(v28 + 48);
      if (*(_BYTE *)(v28 + 104) || (*(_BYTE *)(v30 + 4) & 6) != 0)
        sub_20F59A150((_QWORD *)(a1 + 2416), v30);
      v28 += 112;
    }
    v31 = *(_QWORD *)(a1 + 1352);
    v32 = *(_QWORD *)(a1 + 1360);
    while (v31 != v32)
    {
      v33 = *(_QWORD *)(v31 + 96);
      if (*(_BYTE *)(v31 + 200) || (*(_BYTE *)(v33 + 4) & 6) != 0)
        sub_20F599E20((_QWORD *)(a1 + 2416), v33);
      v31 += 208;
    }
    v34 = *(_QWORD *)(a1 + 1376);
    v35 = *(_QWORD *)(a1 + 1384);
    while (v34 != v35)
    {
      v36 = *(_QWORD *)(v34 + 96);
      if (*(_BYTE *)(v34 + 200) || (*(_BYTE *)(v36 + 4) & 6) != 0)
        sub_20F8DAC28((_QWORD *)(a1 + 2416), v36);
      v34 += 208;
    }
    v37 = *(_QWORD *)(a1 + 1400);
    v38 = *(_QWORD *)(a1 + 1408);
    while (v37 != v38)
    {
      v39 = *(_QWORD *)(v37 + 80);
      if (*(_BYTE *)(v37 + 168) || (*(_BYTE *)(v39 + 4) & 6) != 0)
        sub_20F8DADC0((_QWORD *)(a1 + 2416), v39);
      v37 += 176;
    }
    v40 = *(_QWORD *)(a1 + 1424);
    v41 = *(_QWORD *)(a1 + 1432);
    while (v40 != v41)
    {
      v42 = *(_QWORD *)(v40 + 80);
      if (*(_BYTE *)(v40 + 168) || (*(_BYTE *)(v42 + 4) & 6) != 0)
        sub_20F599FB8((_QWORD *)(a1 + 2416), v42);
      v40 += 176;
    }
    sub_20FA561E0(*(_QWORD *)(a1 + 1448), *(_QWORD *)(a1 + 1456), (_QWORD *)(a1 + 2416));
    sub_20FA560F4(*(_QWORD *)(a1 + 1472), *(_QWORD *)(a1 + 1480), (_QWORD *)(a1 + 2416));
    sub_20FA55F7C(*(_QWORD *)(a1 + 1496), *(_QWORD *)(a1 + 1504), (_QWORD *)(a1 + 2416));
    sub_20FA55E74(*(_QWORD *)(a1 + 1520), *(_QWORD *)(a1 + 1528), (_QWORD *)(a1 + 2416));
    v43 = (uint64_t)(*(_QWORD *)(a1 + 2424) - *(_QWORD *)(a1 + 2416)) >> 2;
    if (v43 <= v45[0])
      v44 = (v45[0] - v43);
    else
      v44 = 0;
    sub_20FA485B8((_QWORD *)a1);
    return v44;
  }
  else
  {
    return v45[0];
  }
}

void sub_20FB5A2E4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5A2F8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5A30C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5A320(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5A334(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5A348(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5A35C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5A370(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5A384(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5A398(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5A3AC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5A3C0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5A3D4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

BOOL sub_20FB5A3E8(_QWORD *a1, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;

  v2 = a1[1];
  v3 = a1[2];
  if (v2 == v3)
  {
    v4 = 0;
    *a2 = 0;
    v7 = a1[13];
    v8 = a1[14];
    if (v7 != v8)
      goto LABEL_7;
LABEL_58:
    a2[1] = 0;
    v11 = a1[25];
    v12 = a1[26];
    if (v11 != v12)
      goto LABEL_12;
LABEL_59:
    a2[2] = 0;
    v15 = a1[37];
    v16 = a1[38];
    if (v15 != v16)
      goto LABEL_17;
LABEL_60:
    a2[3] = 0;
    v19 = a1[49];
    v20 = a1[50];
    if (v19 != v20)
      goto LABEL_22;
LABEL_61:
    a2[4] = 0;
    v23 = a1[61];
    v24 = a1[62];
    if (v23 != v24)
      goto LABEL_27;
LABEL_62:
    a2[5] = 0;
    v27 = a1[73];
    v28 = a1[74];
    if (v27 != v28)
      goto LABEL_32;
LABEL_63:
    a2[6] = 0;
    v31 = a1[85];
    v32 = a1[86];
    if (v31 != v32)
      goto LABEL_37;
LABEL_64:
    a2[7] = 0;
    v35 = a1[97];
    v36 = a1[98];
    if (v35 != v36)
      goto LABEL_42;
LABEL_65:
    a2[8] = 0;
    v39 = a1[109];
    v40 = a1[110];
    if (v39 != v40)
      goto LABEL_47;
    goto LABEL_66;
  }
  v4 = 0;
  v5 = 0;
  do
  {
    v6 = *(_QWORD *)(v2 + 8);
    if ((*(_BYTE *)(v6 + 4) & 6) != 0)
      v4 = 1;
    v5 += *(unsigned __int8 *)(v6 + 20);
    v2 += 16;
  }
  while (v2 != v3);
  *a2 = v5;
  v7 = a1[13];
  v8 = a1[14];
  if (v7 == v8)
    goto LABEL_58;
LABEL_7:
  v9 = 0;
  do
  {
    v10 = *(_QWORD *)(v7 + 8);
    if ((*(_BYTE *)(v10 + 4) & 6) != 0)
      v4 = 1;
    v9 += *(unsigned __int8 *)(v10 + 20);
    v7 += 16;
  }
  while (v7 != v8);
  a2[1] = v9;
  v11 = a1[25];
  v12 = a1[26];
  if (v11 == v12)
    goto LABEL_59;
LABEL_12:
  v13 = 0;
  do
  {
    v14 = *(_QWORD *)(v11 + 8);
    if ((*(_BYTE *)(v14 + 4) & 6) != 0)
      v4 = 1;
    v13 += *(unsigned __int8 *)(v14 + 20);
    v11 += 16;
  }
  while (v11 != v12);
  a2[2] = v13;
  v15 = a1[37];
  v16 = a1[38];
  if (v15 == v16)
    goto LABEL_60;
LABEL_17:
  v17 = 0;
  do
  {
    v18 = *(_QWORD *)(v15 + 8);
    if ((*(_BYTE *)(v18 + 4) & 6) != 0)
      v4 = 1;
    v17 += *(unsigned __int8 *)(v18 + 20);
    v15 += 16;
  }
  while (v15 != v16);
  a2[3] = v17;
  v19 = a1[49];
  v20 = a1[50];
  if (v19 == v20)
    goto LABEL_61;
LABEL_22:
  v21 = 0;
  do
  {
    v22 = *(_QWORD *)(v19 + 8);
    if ((*(_BYTE *)(v22 + 4) & 6) != 0)
      v4 = 1;
    v21 += *(unsigned __int8 *)(v22 + 20);
    v19 += 16;
  }
  while (v19 != v20);
  a2[4] = v21;
  v23 = a1[61];
  v24 = a1[62];
  if (v23 == v24)
    goto LABEL_62;
LABEL_27:
  v25 = 0;
  do
  {
    v26 = *(_QWORD *)(v23 + 8);
    if ((*(_BYTE *)(v26 + 4) & 6) != 0)
      v4 = 1;
    v25 += *(unsigned __int8 *)(v26 + 20);
    v23 += 16;
  }
  while (v23 != v24);
  a2[5] = v25;
  v27 = a1[73];
  v28 = a1[74];
  if (v27 == v28)
    goto LABEL_63;
LABEL_32:
  v29 = 0;
  do
  {
    v30 = *(_QWORD *)(v27 + 8);
    if ((*(_BYTE *)(v30 + 4) & 6) != 0)
      v4 = 1;
    v29 += *(unsigned __int8 *)(v30 + 20);
    v27 += 16;
  }
  while (v27 != v28);
  a2[6] = v29;
  v31 = a1[85];
  v32 = a1[86];
  if (v31 == v32)
    goto LABEL_64;
LABEL_37:
  v33 = 0;
  do
  {
    v34 = *(_QWORD *)(v31 + 8);
    if ((*(_BYTE *)(v34 + 4) & 6) != 0)
      v4 = 1;
    v33 += *(unsigned __int8 *)(v34 + 20);
    v31 += 16;
  }
  while (v31 != v32);
  a2[7] = v33;
  v35 = a1[97];
  v36 = a1[98];
  if (v35 == v36)
    goto LABEL_65;
LABEL_42:
  v37 = 0;
  do
  {
    v38 = *(_QWORD *)(v35 + 8);
    if ((*(_BYTE *)(v38 + 4) & 6) != 0)
      v4 = 1;
    v37 += *(unsigned __int8 *)(v38 + 20);
    v35 += 16;
  }
  while (v35 != v36);
  a2[8] = v37;
  v39 = a1[109];
  v40 = a1[110];
  if (v39 != v40)
  {
LABEL_47:
    v41 = 0;
    do
    {
      v42 = *(_QWORD *)(v39 + 8);
      if ((*(_BYTE *)(v42 + 4) & 6) != 0)
        v4 = 1;
      v41 += *(unsigned __int8 *)(v42 + 20);
      v39 += 16;
    }
    while (v39 != v40);
    a2[9] = v41;
    v43 = a1[121];
    v44 = a1[122];
    if (v43 != v44)
      goto LABEL_52;
LABEL_67:
    a2[10] = 0;
    return v4 != 0;
  }
LABEL_66:
  a2[9] = 0;
  v43 = a1[121];
  v44 = a1[122];
  if (v43 == v44)
    goto LABEL_67;
LABEL_52:
  v45 = 0;
  do
  {
    v46 = *(_QWORD *)(v43 + 8);
    if ((*(_BYTE *)(v46 + 4) & 6) != 0)
      v4 = 1;
    v45 += *(unsigned __int8 *)(v46 + 20);
    v43 += 16;
  }
  while (v43 != v44);
  a2[10] = v45;
  return v4 != 0;
}

uint64_t sub_20FB5A768(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  unsigned int v46;

  if (*(_BYTE *)(a1 + 1616))
  {
    v2 = *(_QWORD *)(a1 + 104);
    v3 = *(_QWORD *)(a1 + 112);
    if (v2 == v3)
      return 0;
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(v2 + 8);
      if ((*(_BYTE *)(v5 + 4) & 6) == 0)
        v4 = v4 + *(unsigned __int8 *)(v5 + 20);
      v2 += 16;
    }
    while (v2 != v3);
    return v4;
  }
  else if (sub_20FB5A3E8((_QWORD *)a1, &v45))
  {
    *(_QWORD *)(a1 + 2424) = *(_QWORD *)(a1 + 2416);
    *(_QWORD *)(a1 + 2448) = *(_QWORD *)(a1 + 2440);
    *(_QWORD *)(a1 + 2472) = *(_QWORD *)(a1 + 2464);
    *(_QWORD *)(a1 + 2496) = *(_QWORD *)(a1 + 2488);
    *(_QWORD *)(a1 + 2520) = *(_QWORD *)(a1 + 2512);
    *(_QWORD *)(a1 + 2544) = *(_QWORD *)(a1 + 2536);
    *(_QWORD *)(a1 + 2568) = *(_QWORD *)(a1 + 2560);
    *(_QWORD *)(a1 + 2592) = *(_QWORD *)(a1 + 2584);
    *(_QWORD *)(a1 + 2616) = *(_QWORD *)(a1 + 2608);
    *(_QWORD *)(a1 + 2640) = *(_QWORD *)(a1 + 2632);
    *(_QWORD *)(a1 + 2664) = *(_QWORD *)(a1 + 2656);
    v6 = *(_QWORD *)(a1 + 1064);
    v7 = *(_QWORD *)(a1 + 1072);
    while (v6 != v7)
    {
      v8 = *(_QWORD *)(v6 + 208);
      if (*(_BYTE *)(v6 + 496) || (*(_BYTE *)(v8 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v6 + 216) + 4) & 6) != 0)
      {
        sub_20F394A20(a1 + 2416, v8);
        sub_20F3D35E0((_QWORD *)(a1 + 2416), *(_QWORD *)(v6 + 216));
      }
      v6 += 504;
    }
    v10 = *(_QWORD *)(a1 + 1088);
    v11 = *(_QWORD *)(a1 + 1096);
    while (v10 != v11)
    {
      v12 = *(_QWORD *)(v10 + 136);
      if (*(_BYTE *)(v10 + 272) || (*(_BYTE *)(v12 + 4) & 6) != 0)
        sub_20F394A20(a1 + 2416, v12);
      v10 += 280;
    }
    v13 = *(_QWORD *)(a1 + 1112);
    v14 = *(_QWORD *)(a1 + 1120);
    while (v13 != v14)
    {
      v15 = *(_QWORD *)(v13 + 136);
      if (*(_BYTE *)(v13 + 272) || (*(_BYTE *)(v15 + 4) & 6) != 0)
        sub_20F599C88((_QWORD *)(a1 + 2416), v15);
      v13 += 280;
    }
    v16 = *(_QWORD *)(a1 + 1136);
    v17 = *(_QWORD *)(a1 + 1144);
    while (v16 != v17)
    {
      v18 = *(_QWORD *)(v16 + 136);
      if (*(_BYTE *)(v16 + 272) || (*(_BYTE *)(v18 + 4) & 6) != 0)
        sub_20F59A480((_QWORD *)(a1 + 2416), v18);
      v16 += 280;
    }
    v19 = *(_QWORD *)(a1 + 1160);
    v20 = *(_QWORD *)(a1 + 1168);
    while (v19 != v20)
    {
      v21 = *(_QWORD *)(v19 + 64);
      if (*(_BYTE *)(v19 + 152) || (*(_BYTE *)(v21 + 4) & 6) != 0)
        sub_20F59A2E8((_QWORD *)(a1 + 2416), v21);
      v19 += 160;
    }
    sub_20FA5640C(*(_QWORD *)(a1 + 1184), *(_QWORD *)(a1 + 1192), (_QWORD *)(a1 + 2416));
    sub_20F5B85BC(*(_QWORD *)(a1 + 1208), *(_QWORD *)(a1 + 1216), (_QWORD *)(a1 + 2416));
    v22 = *(_QWORD *)(a1 + 1232);
    v23 = *(_QWORD *)(a1 + 1240);
    while (v22 != v23)
    {
      v24 = *(_QWORD *)(v22 + 48);
      if (*(_BYTE *)(v22 + 136) || (*(_BYTE *)(v24 + 4) & 6) != 0)
        sub_20F3D35E0((_QWORD *)(a1 + 2416), v24);
      v22 += 144;
    }
    v25 = *(_QWORD *)(a1 + 1256);
    v26 = *(_QWORD *)(a1 + 1264);
    while (v25 != v26)
    {
      v27 = *(_QWORD *)(v25 + 48);
      if (*(_BYTE *)(v25 + 144) || (*(_BYTE *)(v27 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v25 + 56) + 4) & 6) != 0)
      {
        sub_20F394A20(a1 + 2416, v27);
        sub_20F394A20(a1 + 2416, *(_QWORD *)(v25 + 56));
      }
      v25 += 152;
    }
    sub_20FA56358(*(_QWORD *)(a1 + 1280), *(_QWORD *)(a1 + 1288), (_QWORD *)(a1 + 2416));
    sub_20F8DF65C(*(_QWORD *)(a1 + 1304), *(_QWORD *)(a1 + 1312), (_QWORD *)(a1 + 2416));
    v28 = *(_QWORD *)(a1 + 1328);
    v29 = *(_QWORD *)(a1 + 1336);
    while (v28 != v29)
    {
      v30 = *(_QWORD *)(v28 + 48);
      if (*(_BYTE *)(v28 + 104) || (*(_BYTE *)(v30 + 4) & 6) != 0)
        sub_20F59A150((_QWORD *)(a1 + 2416), v30);
      v28 += 112;
    }
    v31 = *(_QWORD *)(a1 + 1352);
    v32 = *(_QWORD *)(a1 + 1360);
    while (v31 != v32)
    {
      v33 = *(_QWORD *)(v31 + 96);
      if (*(_BYTE *)(v31 + 200) || (*(_BYTE *)(v33 + 4) & 6) != 0)
        sub_20F599E20((_QWORD *)(a1 + 2416), v33);
      v31 += 208;
    }
    v34 = *(_QWORD *)(a1 + 1376);
    v35 = *(_QWORD *)(a1 + 1384);
    while (v34 != v35)
    {
      v36 = *(_QWORD *)(v34 + 96);
      if (*(_BYTE *)(v34 + 200) || (*(_BYTE *)(v36 + 4) & 6) != 0)
        sub_20F8DAC28((_QWORD *)(a1 + 2416), v36);
      v34 += 208;
    }
    v37 = *(_QWORD *)(a1 + 1400);
    v38 = *(_QWORD *)(a1 + 1408);
    while (v37 != v38)
    {
      v39 = *(_QWORD *)(v37 + 80);
      if (*(_BYTE *)(v37 + 168) || (*(_BYTE *)(v39 + 4) & 6) != 0)
        sub_20F8DADC0((_QWORD *)(a1 + 2416), v39);
      v37 += 176;
    }
    v40 = *(_QWORD *)(a1 + 1424);
    v41 = *(_QWORD *)(a1 + 1432);
    while (v40 != v41)
    {
      v42 = *(_QWORD *)(v40 + 80);
      if (*(_BYTE *)(v40 + 168) || (*(_BYTE *)(v42 + 4) & 6) != 0)
        sub_20F599FB8((_QWORD *)(a1 + 2416), v42);
      v40 += 176;
    }
    sub_20FA561E0(*(_QWORD *)(a1 + 1448), *(_QWORD *)(a1 + 1456), (_QWORD *)(a1 + 2416));
    sub_20FA560F4(*(_QWORD *)(a1 + 1472), *(_QWORD *)(a1 + 1480), (_QWORD *)(a1 + 2416));
    sub_20FA55F7C(*(_QWORD *)(a1 + 1496), *(_QWORD *)(a1 + 1504), (_QWORD *)(a1 + 2416));
    sub_20FA55E74(*(_QWORD *)(a1 + 1520), *(_QWORD *)(a1 + 1528), (_QWORD *)(a1 + 2416));
    v43 = (uint64_t)(*(_QWORD *)(a1 + 2448) - *(_QWORD *)(a1 + 2440)) >> 2;
    if (v43 <= v46)
      v44 = v46 - v43;
    else
      v44 = 0;
    sub_20FA485B8((_QWORD *)a1);
    return v44;
  }
  else
  {
    return v46;
  }
}

void sub_20FB5AC30(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5AC44(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5AC58(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5AC6C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5AC80(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5AC94(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5ACA8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5ACBC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5ACD0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5ACE4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5ACF8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5AD0C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5AD20(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20FB5AD34(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  unsigned int v46;

  if (*(_BYTE *)(a1 + 1616))
  {
    v2 = *(_QWORD *)(a1 + 200);
    v3 = *(_QWORD *)(a1 + 208);
    if (v2 == v3)
      return 0;
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(v2 + 8);
      if ((*(_BYTE *)(v5 + 4) & 6) == 0)
        v4 = v4 + *(unsigned __int8 *)(v5 + 20);
      v2 += 16;
    }
    while (v2 != v3);
    return v4;
  }
  else if (sub_20FB5A3E8((_QWORD *)a1, &v45))
  {
    *(_QWORD *)(a1 + 2424) = *(_QWORD *)(a1 + 2416);
    *(_QWORD *)(a1 + 2448) = *(_QWORD *)(a1 + 2440);
    *(_QWORD *)(a1 + 2472) = *(_QWORD *)(a1 + 2464);
    *(_QWORD *)(a1 + 2496) = *(_QWORD *)(a1 + 2488);
    *(_QWORD *)(a1 + 2520) = *(_QWORD *)(a1 + 2512);
    *(_QWORD *)(a1 + 2544) = *(_QWORD *)(a1 + 2536);
    *(_QWORD *)(a1 + 2568) = *(_QWORD *)(a1 + 2560);
    *(_QWORD *)(a1 + 2592) = *(_QWORD *)(a1 + 2584);
    *(_QWORD *)(a1 + 2616) = *(_QWORD *)(a1 + 2608);
    *(_QWORD *)(a1 + 2640) = *(_QWORD *)(a1 + 2632);
    *(_QWORD *)(a1 + 2664) = *(_QWORD *)(a1 + 2656);
    v6 = *(_QWORD *)(a1 + 1064);
    v7 = *(_QWORD *)(a1 + 1072);
    while (v6 != v7)
    {
      v8 = *(_QWORD *)(v6 + 208);
      if (*(_BYTE *)(v6 + 496) || (*(_BYTE *)(v8 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v6 + 216) + 4) & 6) != 0)
      {
        sub_20F394A20(a1 + 2416, v8);
        sub_20F3D35E0((_QWORD *)(a1 + 2416), *(_QWORD *)(v6 + 216));
      }
      v6 += 504;
    }
    v10 = *(_QWORD *)(a1 + 1088);
    v11 = *(_QWORD *)(a1 + 1096);
    while (v10 != v11)
    {
      v12 = *(_QWORD *)(v10 + 136);
      if (*(_BYTE *)(v10 + 272) || (*(_BYTE *)(v12 + 4) & 6) != 0)
        sub_20F394A20(a1 + 2416, v12);
      v10 += 280;
    }
    v13 = *(_QWORD *)(a1 + 1112);
    v14 = *(_QWORD *)(a1 + 1120);
    while (v13 != v14)
    {
      v15 = *(_QWORD *)(v13 + 136);
      if (*(_BYTE *)(v13 + 272) || (*(_BYTE *)(v15 + 4) & 6) != 0)
        sub_20F599C88((_QWORD *)(a1 + 2416), v15);
      v13 += 280;
    }
    v16 = *(_QWORD *)(a1 + 1136);
    v17 = *(_QWORD *)(a1 + 1144);
    while (v16 != v17)
    {
      v18 = *(_QWORD *)(v16 + 136);
      if (*(_BYTE *)(v16 + 272) || (*(_BYTE *)(v18 + 4) & 6) != 0)
        sub_20F59A480((_QWORD *)(a1 + 2416), v18);
      v16 += 280;
    }
    v19 = *(_QWORD *)(a1 + 1160);
    v20 = *(_QWORD *)(a1 + 1168);
    while (v19 != v20)
    {
      v21 = *(_QWORD *)(v19 + 64);
      if (*(_BYTE *)(v19 + 152) || (*(_BYTE *)(v21 + 4) & 6) != 0)
        sub_20F59A2E8((_QWORD *)(a1 + 2416), v21);
      v19 += 160;
    }
    sub_20FA5640C(*(_QWORD *)(a1 + 1184), *(_QWORD *)(a1 + 1192), (_QWORD *)(a1 + 2416));
    sub_20F5B85BC(*(_QWORD *)(a1 + 1208), *(_QWORD *)(a1 + 1216), (_QWORD *)(a1 + 2416));
    v22 = *(_QWORD *)(a1 + 1232);
    v23 = *(_QWORD *)(a1 + 1240);
    while (v22 != v23)
    {
      v24 = *(_QWORD *)(v22 + 48);
      if (*(_BYTE *)(v22 + 136) || (*(_BYTE *)(v24 + 4) & 6) != 0)
        sub_20F3D35E0((_QWORD *)(a1 + 2416), v24);
      v22 += 144;
    }
    v25 = *(_QWORD *)(a1 + 1256);
    v26 = *(_QWORD *)(a1 + 1264);
    while (v25 != v26)
    {
      v27 = *(_QWORD *)(v25 + 48);
      if (*(_BYTE *)(v25 + 144) || (*(_BYTE *)(v27 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v25 + 56) + 4) & 6) != 0)
      {
        sub_20F394A20(a1 + 2416, v27);
        sub_20F394A20(a1 + 2416, *(_QWORD *)(v25 + 56));
      }
      v25 += 152;
    }
    sub_20FA56358(*(_QWORD *)(a1 + 1280), *(_QWORD *)(a1 + 1288), (_QWORD *)(a1 + 2416));
    sub_20F8DF65C(*(_QWORD *)(a1 + 1304), *(_QWORD *)(a1 + 1312), (_QWORD *)(a1 + 2416));
    v28 = *(_QWORD *)(a1 + 1328);
    v29 = *(_QWORD *)(a1 + 1336);
    while (v28 != v29)
    {
      v30 = *(_QWORD *)(v28 + 48);
      if (*(_BYTE *)(v28 + 104) || (*(_BYTE *)(v30 + 4) & 6) != 0)
        sub_20F59A150((_QWORD *)(a1 + 2416), v30);
      v28 += 112;
    }
    v31 = *(_QWORD *)(a1 + 1352);
    v32 = *(_QWORD *)(a1 + 1360);
    while (v31 != v32)
    {
      v33 = *(_QWORD *)(v31 + 96);
      if (*(_BYTE *)(v31 + 200) || (*(_BYTE *)(v33 + 4) & 6) != 0)
        sub_20F599E20((_QWORD *)(a1 + 2416), v33);
      v31 += 208;
    }
    v34 = *(_QWORD *)(a1 + 1376);
    v35 = *(_QWORD *)(a1 + 1384);
    while (v34 != v35)
    {
      v36 = *(_QWORD *)(v34 + 96);
      if (*(_BYTE *)(v34 + 200) || (*(_BYTE *)(v36 + 4) & 6) != 0)
        sub_20F8DAC28((_QWORD *)(a1 + 2416), v36);
      v34 += 208;
    }
    v37 = *(_QWORD *)(a1 + 1400);
    v38 = *(_QWORD *)(a1 + 1408);
    while (v37 != v38)
    {
      v39 = *(_QWORD *)(v37 + 80);
      if (*(_BYTE *)(v37 + 168) || (*(_BYTE *)(v39 + 4) & 6) != 0)
        sub_20F8DADC0((_QWORD *)(a1 + 2416), v39);
      v37 += 176;
    }
    v40 = *(_QWORD *)(a1 + 1424);
    v41 = *(_QWORD *)(a1 + 1432);
    while (v40 != v41)
    {
      v42 = *(_QWORD *)(v40 + 80);
      if (*(_BYTE *)(v40 + 168) || (*(_BYTE *)(v42 + 4) & 6) != 0)
        sub_20F599FB8((_QWORD *)(a1 + 2416), v42);
      v40 += 176;
    }
    sub_20FA561E0(*(_QWORD *)(a1 + 1448), *(_QWORD *)(a1 + 1456), (_QWORD *)(a1 + 2416));
    sub_20FA560F4(*(_QWORD *)(a1 + 1472), *(_QWORD *)(a1 + 1480), (_QWORD *)(a1 + 2416));
    sub_20FA55F7C(*(_QWORD *)(a1 + 1496), *(_QWORD *)(a1 + 1504), (_QWORD *)(a1 + 2416));
    sub_20FA55E74(*(_QWORD *)(a1 + 1520), *(_QWORD *)(a1 + 1528), (_QWORD *)(a1 + 2416));
    v43 = (uint64_t)(*(_QWORD *)(a1 + 2472) - *(_QWORD *)(a1 + 2464)) >> 2;
    if (v43 <= v46)
      v44 = v46 - v43;
    else
      v44 = 0;
    sub_20FA485B8((_QWORD *)a1);
    return v44;
  }
  else
  {
    return v46;
  }
}

void sub_20FB5B1FC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5B210(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5B224(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5B238(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5B24C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5B260(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5B274(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5B288(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5B29C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5B2B0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5B2C4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5B2D8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5B2EC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20FB5B300(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _DWORD v45[3];
  unsigned int v46;

  if (*(_BYTE *)(a1 + 1616))
  {
    v2 = *(_QWORD *)(a1 + 296);
    v3 = *(_QWORD *)(a1 + 304);
    if (v2 == v3)
      return 0;
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(v2 + 8);
      if ((*(_BYTE *)(v5 + 4) & 6) == 0)
        v4 = v4 + *(unsigned __int8 *)(v5 + 20);
      v2 += 16;
    }
    while (v2 != v3);
    return v4;
  }
  else if (sub_20FB5A3E8((_QWORD *)a1, v45))
  {
    *(_QWORD *)(a1 + 2424) = *(_QWORD *)(a1 + 2416);
    *(_QWORD *)(a1 + 2448) = *(_QWORD *)(a1 + 2440);
    *(_QWORD *)(a1 + 2472) = *(_QWORD *)(a1 + 2464);
    *(_QWORD *)(a1 + 2496) = *(_QWORD *)(a1 + 2488);
    *(_QWORD *)(a1 + 2520) = *(_QWORD *)(a1 + 2512);
    *(_QWORD *)(a1 + 2544) = *(_QWORD *)(a1 + 2536);
    *(_QWORD *)(a1 + 2568) = *(_QWORD *)(a1 + 2560);
    *(_QWORD *)(a1 + 2592) = *(_QWORD *)(a1 + 2584);
    *(_QWORD *)(a1 + 2616) = *(_QWORD *)(a1 + 2608);
    *(_QWORD *)(a1 + 2640) = *(_QWORD *)(a1 + 2632);
    *(_QWORD *)(a1 + 2664) = *(_QWORD *)(a1 + 2656);
    v6 = *(_QWORD *)(a1 + 1064);
    v7 = *(_QWORD *)(a1 + 1072);
    while (v6 != v7)
    {
      v8 = *(_QWORD *)(v6 + 208);
      if (*(_BYTE *)(v6 + 496) || (*(_BYTE *)(v8 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v6 + 216) + 4) & 6) != 0)
      {
        sub_20F394A20(a1 + 2416, v8);
        sub_20F3D35E0((_QWORD *)(a1 + 2416), *(_QWORD *)(v6 + 216));
      }
      v6 += 504;
    }
    v10 = *(_QWORD *)(a1 + 1088);
    v11 = *(_QWORD *)(a1 + 1096);
    while (v10 != v11)
    {
      v12 = *(_QWORD *)(v10 + 136);
      if (*(_BYTE *)(v10 + 272) || (*(_BYTE *)(v12 + 4) & 6) != 0)
        sub_20F394A20(a1 + 2416, v12);
      v10 += 280;
    }
    v13 = *(_QWORD *)(a1 + 1112);
    v14 = *(_QWORD *)(a1 + 1120);
    while (v13 != v14)
    {
      v15 = *(_QWORD *)(v13 + 136);
      if (*(_BYTE *)(v13 + 272) || (*(_BYTE *)(v15 + 4) & 6) != 0)
        sub_20F599C88((_QWORD *)(a1 + 2416), v15);
      v13 += 280;
    }
    v16 = *(_QWORD *)(a1 + 1136);
    v17 = *(_QWORD *)(a1 + 1144);
    while (v16 != v17)
    {
      v18 = *(_QWORD *)(v16 + 136);
      if (*(_BYTE *)(v16 + 272) || (*(_BYTE *)(v18 + 4) & 6) != 0)
        sub_20F59A480((_QWORD *)(a1 + 2416), v18);
      v16 += 280;
    }
    v19 = *(_QWORD *)(a1 + 1160);
    v20 = *(_QWORD *)(a1 + 1168);
    while (v19 != v20)
    {
      v21 = *(_QWORD *)(v19 + 64);
      if (*(_BYTE *)(v19 + 152) || (*(_BYTE *)(v21 + 4) & 6) != 0)
        sub_20F59A2E8((_QWORD *)(a1 + 2416), v21);
      v19 += 160;
    }
    sub_20FA5640C(*(_QWORD *)(a1 + 1184), *(_QWORD *)(a1 + 1192), (_QWORD *)(a1 + 2416));
    sub_20F5B85BC(*(_QWORD *)(a1 + 1208), *(_QWORD *)(a1 + 1216), (_QWORD *)(a1 + 2416));
    v22 = *(_QWORD *)(a1 + 1232);
    v23 = *(_QWORD *)(a1 + 1240);
    while (v22 != v23)
    {
      v24 = *(_QWORD *)(v22 + 48);
      if (*(_BYTE *)(v22 + 136) || (*(_BYTE *)(v24 + 4) & 6) != 0)
        sub_20F3D35E0((_QWORD *)(a1 + 2416), v24);
      v22 += 144;
    }
    v25 = *(_QWORD *)(a1 + 1256);
    v26 = *(_QWORD *)(a1 + 1264);
    while (v25 != v26)
    {
      v27 = *(_QWORD *)(v25 + 48);
      if (*(_BYTE *)(v25 + 144) || (*(_BYTE *)(v27 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v25 + 56) + 4) & 6) != 0)
      {
        sub_20F394A20(a1 + 2416, v27);
        sub_20F394A20(a1 + 2416, *(_QWORD *)(v25 + 56));
      }
      v25 += 152;
    }
    sub_20FA56358(*(_QWORD *)(a1 + 1280), *(_QWORD *)(a1 + 1288), (_QWORD *)(a1 + 2416));
    sub_20F8DF65C(*(_QWORD *)(a1 + 1304), *(_QWORD *)(a1 + 1312), (_QWORD *)(a1 + 2416));
    v28 = *(_QWORD *)(a1 + 1328);
    v29 = *(_QWORD *)(a1 + 1336);
    while (v28 != v29)
    {
      v30 = *(_QWORD *)(v28 + 48);
      if (*(_BYTE *)(v28 + 104) || (*(_BYTE *)(v30 + 4) & 6) != 0)
        sub_20F59A150((_QWORD *)(a1 + 2416), v30);
      v28 += 112;
    }
    v31 = *(_QWORD *)(a1 + 1352);
    v32 = *(_QWORD *)(a1 + 1360);
    while (v31 != v32)
    {
      v33 = *(_QWORD *)(v31 + 96);
      if (*(_BYTE *)(v31 + 200) || (*(_BYTE *)(v33 + 4) & 6) != 0)
        sub_20F599E20((_QWORD *)(a1 + 2416), v33);
      v31 += 208;
    }
    v34 = *(_QWORD *)(a1 + 1376);
    v35 = *(_QWORD *)(a1 + 1384);
    while (v34 != v35)
    {
      v36 = *(_QWORD *)(v34 + 96);
      if (*(_BYTE *)(v34 + 200) || (*(_BYTE *)(v36 + 4) & 6) != 0)
        sub_20F8DAC28((_QWORD *)(a1 + 2416), v36);
      v34 += 208;
    }
    v37 = *(_QWORD *)(a1 + 1400);
    v38 = *(_QWORD *)(a1 + 1408);
    while (v37 != v38)
    {
      v39 = *(_QWORD *)(v37 + 80);
      if (*(_BYTE *)(v37 + 168) || (*(_BYTE *)(v39 + 4) & 6) != 0)
        sub_20F8DADC0((_QWORD *)(a1 + 2416), v39);
      v37 += 176;
    }
    v40 = *(_QWORD *)(a1 + 1424);
    v41 = *(_QWORD *)(a1 + 1432);
    while (v40 != v41)
    {
      v42 = *(_QWORD *)(v40 + 80);
      if (*(_BYTE *)(v40 + 168) || (*(_BYTE *)(v42 + 4) & 6) != 0)
        sub_20F599FB8((_QWORD *)(a1 + 2416), v42);
      v40 += 176;
    }
    sub_20FA561E0(*(_QWORD *)(a1 + 1448), *(_QWORD *)(a1 + 1456), (_QWORD *)(a1 + 2416));
    sub_20FA560F4(*(_QWORD *)(a1 + 1472), *(_QWORD *)(a1 + 1480), (_QWORD *)(a1 + 2416));
    sub_20FA55F7C(*(_QWORD *)(a1 + 1496), *(_QWORD *)(a1 + 1504), (_QWORD *)(a1 + 2416));
    sub_20FA55E74(*(_QWORD *)(a1 + 1520), *(_QWORD *)(a1 + 1528), (_QWORD *)(a1 + 2416));
    v43 = (uint64_t)(*(_QWORD *)(a1 + 2496) - *(_QWORD *)(a1 + 2488)) >> 2;
    if (v43 <= v46)
      v44 = v46 - v43;
    else
      v44 = 0;
    sub_20FA485B8((_QWORD *)a1);
    return v44;
  }
  else
  {
    return v46;
  }
}

void sub_20FB5B7C8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5B7DC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5B7F0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5B804(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5B818(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5B82C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5B840(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5B854(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5B868(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5B87C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5B890(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5B8A4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5B8B8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20FB5B8CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _DWORD v45[4];
  unsigned int v46;

  if (*(_BYTE *)(a1 + 1616))
  {
    v2 = *(_QWORD *)(a1 + 392);
    v3 = *(_QWORD *)(a1 + 400);
    if (v2 == v3)
      return 0;
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(v2 + 8);
      if ((*(_BYTE *)(v5 + 4) & 6) == 0)
        v4 = v4 + *(unsigned __int8 *)(v5 + 20);
      v2 += 16;
    }
    while (v2 != v3);
    return v4;
  }
  else if (sub_20FB5A3E8((_QWORD *)a1, v45))
  {
    *(_QWORD *)(a1 + 2424) = *(_QWORD *)(a1 + 2416);
    *(_QWORD *)(a1 + 2448) = *(_QWORD *)(a1 + 2440);
    *(_QWORD *)(a1 + 2472) = *(_QWORD *)(a1 + 2464);
    *(_QWORD *)(a1 + 2496) = *(_QWORD *)(a1 + 2488);
    *(_QWORD *)(a1 + 2520) = *(_QWORD *)(a1 + 2512);
    *(_QWORD *)(a1 + 2544) = *(_QWORD *)(a1 + 2536);
    *(_QWORD *)(a1 + 2568) = *(_QWORD *)(a1 + 2560);
    *(_QWORD *)(a1 + 2592) = *(_QWORD *)(a1 + 2584);
    *(_QWORD *)(a1 + 2616) = *(_QWORD *)(a1 + 2608);
    *(_QWORD *)(a1 + 2640) = *(_QWORD *)(a1 + 2632);
    *(_QWORD *)(a1 + 2664) = *(_QWORD *)(a1 + 2656);
    v6 = *(_QWORD *)(a1 + 1064);
    v7 = *(_QWORD *)(a1 + 1072);
    while (v6 != v7)
    {
      v8 = *(_QWORD *)(v6 + 208);
      if (*(_BYTE *)(v6 + 496) || (*(_BYTE *)(v8 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v6 + 216) + 4) & 6) != 0)
      {
        sub_20F394A20(a1 + 2416, v8);
        sub_20F3D35E0((_QWORD *)(a1 + 2416), *(_QWORD *)(v6 + 216));
      }
      v6 += 504;
    }
    v10 = *(_QWORD *)(a1 + 1088);
    v11 = *(_QWORD *)(a1 + 1096);
    while (v10 != v11)
    {
      v12 = *(_QWORD *)(v10 + 136);
      if (*(_BYTE *)(v10 + 272) || (*(_BYTE *)(v12 + 4) & 6) != 0)
        sub_20F394A20(a1 + 2416, v12);
      v10 += 280;
    }
    v13 = *(_QWORD *)(a1 + 1112);
    v14 = *(_QWORD *)(a1 + 1120);
    while (v13 != v14)
    {
      v15 = *(_QWORD *)(v13 + 136);
      if (*(_BYTE *)(v13 + 272) || (*(_BYTE *)(v15 + 4) & 6) != 0)
        sub_20F599C88((_QWORD *)(a1 + 2416), v15);
      v13 += 280;
    }
    v16 = *(_QWORD *)(a1 + 1136);
    v17 = *(_QWORD *)(a1 + 1144);
    while (v16 != v17)
    {
      v18 = *(_QWORD *)(v16 + 136);
      if (*(_BYTE *)(v16 + 272) || (*(_BYTE *)(v18 + 4) & 6) != 0)
        sub_20F59A480((_QWORD *)(a1 + 2416), v18);
      v16 += 280;
    }
    v19 = *(_QWORD *)(a1 + 1160);
    v20 = *(_QWORD *)(a1 + 1168);
    while (v19 != v20)
    {
      v21 = *(_QWORD *)(v19 + 64);
      if (*(_BYTE *)(v19 + 152) || (*(_BYTE *)(v21 + 4) & 6) != 0)
        sub_20F59A2E8((_QWORD *)(a1 + 2416), v21);
      v19 += 160;
    }
    sub_20FA5640C(*(_QWORD *)(a1 + 1184), *(_QWORD *)(a1 + 1192), (_QWORD *)(a1 + 2416));
    sub_20F5B85BC(*(_QWORD *)(a1 + 1208), *(_QWORD *)(a1 + 1216), (_QWORD *)(a1 + 2416));
    v22 = *(_QWORD *)(a1 + 1232);
    v23 = *(_QWORD *)(a1 + 1240);
    while (v22 != v23)
    {
      v24 = *(_QWORD *)(v22 + 48);
      if (*(_BYTE *)(v22 + 136) || (*(_BYTE *)(v24 + 4) & 6) != 0)
        sub_20F3D35E0((_QWORD *)(a1 + 2416), v24);
      v22 += 144;
    }
    v25 = *(_QWORD *)(a1 + 1256);
    v26 = *(_QWORD *)(a1 + 1264);
    while (v25 != v26)
    {
      v27 = *(_QWORD *)(v25 + 48);
      if (*(_BYTE *)(v25 + 144) || (*(_BYTE *)(v27 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v25 + 56) + 4) & 6) != 0)
      {
        sub_20F394A20(a1 + 2416, v27);
        sub_20F394A20(a1 + 2416, *(_QWORD *)(v25 + 56));
      }
      v25 += 152;
    }
    sub_20FA56358(*(_QWORD *)(a1 + 1280), *(_QWORD *)(a1 + 1288), (_QWORD *)(a1 + 2416));
    sub_20F8DF65C(*(_QWORD *)(a1 + 1304), *(_QWORD *)(a1 + 1312), (_QWORD *)(a1 + 2416));
    v28 = *(_QWORD *)(a1 + 1328);
    v29 = *(_QWORD *)(a1 + 1336);
    while (v28 != v29)
    {
      v30 = *(_QWORD *)(v28 + 48);
      if (*(_BYTE *)(v28 + 104) || (*(_BYTE *)(v30 + 4) & 6) != 0)
        sub_20F59A150((_QWORD *)(a1 + 2416), v30);
      v28 += 112;
    }
    v31 = *(_QWORD *)(a1 + 1352);
    v32 = *(_QWORD *)(a1 + 1360);
    while (v31 != v32)
    {
      v33 = *(_QWORD *)(v31 + 96);
      if (*(_BYTE *)(v31 + 200) || (*(_BYTE *)(v33 + 4) & 6) != 0)
        sub_20F599E20((_QWORD *)(a1 + 2416), v33);
      v31 += 208;
    }
    v34 = *(_QWORD *)(a1 + 1376);
    v35 = *(_QWORD *)(a1 + 1384);
    while (v34 != v35)
    {
      v36 = *(_QWORD *)(v34 + 96);
      if (*(_BYTE *)(v34 + 200) || (*(_BYTE *)(v36 + 4) & 6) != 0)
        sub_20F8DAC28((_QWORD *)(a1 + 2416), v36);
      v34 += 208;
    }
    v37 = *(_QWORD *)(a1 + 1400);
    v38 = *(_QWORD *)(a1 + 1408);
    while (v37 != v38)
    {
      v39 = *(_QWORD *)(v37 + 80);
      if (*(_BYTE *)(v37 + 168) || (*(_BYTE *)(v39 + 4) & 6) != 0)
        sub_20F8DADC0((_QWORD *)(a1 + 2416), v39);
      v37 += 176;
    }
    v40 = *(_QWORD *)(a1 + 1424);
    v41 = *(_QWORD *)(a1 + 1432);
    while (v40 != v41)
    {
      v42 = *(_QWORD *)(v40 + 80);
      if (*(_BYTE *)(v40 + 168) || (*(_BYTE *)(v42 + 4) & 6) != 0)
        sub_20F599FB8((_QWORD *)(a1 + 2416), v42);
      v40 += 176;
    }
    sub_20FA561E0(*(_QWORD *)(a1 + 1448), *(_QWORD *)(a1 + 1456), (_QWORD *)(a1 + 2416));
    sub_20FA560F4(*(_QWORD *)(a1 + 1472), *(_QWORD *)(a1 + 1480), (_QWORD *)(a1 + 2416));
    sub_20FA55F7C(*(_QWORD *)(a1 + 1496), *(_QWORD *)(a1 + 1504), (_QWORD *)(a1 + 2416));
    sub_20FA55E74(*(_QWORD *)(a1 + 1520), *(_QWORD *)(a1 + 1528), (_QWORD *)(a1 + 2416));
    v43 = (uint64_t)(*(_QWORD *)(a1 + 2520) - *(_QWORD *)(a1 + 2512)) >> 2;
    if (v43 <= v46)
      v44 = v46 - v43;
    else
      v44 = 0;
    sub_20FA485B8((_QWORD *)a1);
    return v44;
  }
  else
  {
    return v46;
  }
}

void sub_20FB5BD94(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5BDA8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5BDBC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5BDD0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5BDE4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5BDF8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5BE0C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5BE20(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5BE34(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5BE48(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5BE5C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5BE70(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5BE84(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20FB5BE98(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _DWORD v45[5];
  unsigned int v46;

  if (*(_BYTE *)(a1 + 1616))
  {
    v2 = *(_QWORD *)(a1 + 488);
    v3 = *(_QWORD *)(a1 + 496);
    if (v2 == v3)
      return 0;
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(v2 + 8);
      if ((*(_BYTE *)(v5 + 4) & 6) == 0)
        v4 = v4 + *(unsigned __int8 *)(v5 + 20);
      v2 += 16;
    }
    while (v2 != v3);
    return v4;
  }
  else if (sub_20FB5A3E8((_QWORD *)a1, v45))
  {
    *(_QWORD *)(a1 + 2424) = *(_QWORD *)(a1 + 2416);
    *(_QWORD *)(a1 + 2448) = *(_QWORD *)(a1 + 2440);
    *(_QWORD *)(a1 + 2472) = *(_QWORD *)(a1 + 2464);
    *(_QWORD *)(a1 + 2496) = *(_QWORD *)(a1 + 2488);
    *(_QWORD *)(a1 + 2520) = *(_QWORD *)(a1 + 2512);
    *(_QWORD *)(a1 + 2544) = *(_QWORD *)(a1 + 2536);
    *(_QWORD *)(a1 + 2568) = *(_QWORD *)(a1 + 2560);
    *(_QWORD *)(a1 + 2592) = *(_QWORD *)(a1 + 2584);
    *(_QWORD *)(a1 + 2616) = *(_QWORD *)(a1 + 2608);
    *(_QWORD *)(a1 + 2640) = *(_QWORD *)(a1 + 2632);
    *(_QWORD *)(a1 + 2664) = *(_QWORD *)(a1 + 2656);
    v6 = *(_QWORD *)(a1 + 1064);
    v7 = *(_QWORD *)(a1 + 1072);
    while (v6 != v7)
    {
      v8 = *(_QWORD *)(v6 + 208);
      if (*(_BYTE *)(v6 + 496) || (*(_BYTE *)(v8 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v6 + 216) + 4) & 6) != 0)
      {
        sub_20F394A20(a1 + 2416, v8);
        sub_20F3D35E0((_QWORD *)(a1 + 2416), *(_QWORD *)(v6 + 216));
      }
      v6 += 504;
    }
    v10 = *(_QWORD *)(a1 + 1088);
    v11 = *(_QWORD *)(a1 + 1096);
    while (v10 != v11)
    {
      v12 = *(_QWORD *)(v10 + 136);
      if (*(_BYTE *)(v10 + 272) || (*(_BYTE *)(v12 + 4) & 6) != 0)
        sub_20F394A20(a1 + 2416, v12);
      v10 += 280;
    }
    v13 = *(_QWORD *)(a1 + 1112);
    v14 = *(_QWORD *)(a1 + 1120);
    while (v13 != v14)
    {
      v15 = *(_QWORD *)(v13 + 136);
      if (*(_BYTE *)(v13 + 272) || (*(_BYTE *)(v15 + 4) & 6) != 0)
        sub_20F599C88((_QWORD *)(a1 + 2416), v15);
      v13 += 280;
    }
    v16 = *(_QWORD *)(a1 + 1136);
    v17 = *(_QWORD *)(a1 + 1144);
    while (v16 != v17)
    {
      v18 = *(_QWORD *)(v16 + 136);
      if (*(_BYTE *)(v16 + 272) || (*(_BYTE *)(v18 + 4) & 6) != 0)
        sub_20F59A480((_QWORD *)(a1 + 2416), v18);
      v16 += 280;
    }
    v19 = *(_QWORD *)(a1 + 1160);
    v20 = *(_QWORD *)(a1 + 1168);
    while (v19 != v20)
    {
      v21 = *(_QWORD *)(v19 + 64);
      if (*(_BYTE *)(v19 + 152) || (*(_BYTE *)(v21 + 4) & 6) != 0)
        sub_20F59A2E8((_QWORD *)(a1 + 2416), v21);
      v19 += 160;
    }
    sub_20FA5640C(*(_QWORD *)(a1 + 1184), *(_QWORD *)(a1 + 1192), (_QWORD *)(a1 + 2416));
    sub_20F5B85BC(*(_QWORD *)(a1 + 1208), *(_QWORD *)(a1 + 1216), (_QWORD *)(a1 + 2416));
    v22 = *(_QWORD *)(a1 + 1232);
    v23 = *(_QWORD *)(a1 + 1240);
    while (v22 != v23)
    {
      v24 = *(_QWORD *)(v22 + 48);
      if (*(_BYTE *)(v22 + 136) || (*(_BYTE *)(v24 + 4) & 6) != 0)
        sub_20F3D35E0((_QWORD *)(a1 + 2416), v24);
      v22 += 144;
    }
    v25 = *(_QWORD *)(a1 + 1256);
    v26 = *(_QWORD *)(a1 + 1264);
    while (v25 != v26)
    {
      v27 = *(_QWORD *)(v25 + 48);
      if (*(_BYTE *)(v25 + 144) || (*(_BYTE *)(v27 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v25 + 56) + 4) & 6) != 0)
      {
        sub_20F394A20(a1 + 2416, v27);
        sub_20F394A20(a1 + 2416, *(_QWORD *)(v25 + 56));
      }
      v25 += 152;
    }
    sub_20FA56358(*(_QWORD *)(a1 + 1280), *(_QWORD *)(a1 + 1288), (_QWORD *)(a1 + 2416));
    sub_20F8DF65C(*(_QWORD *)(a1 + 1304), *(_QWORD *)(a1 + 1312), (_QWORD *)(a1 + 2416));
    v28 = *(_QWORD *)(a1 + 1328);
    v29 = *(_QWORD *)(a1 + 1336);
    while (v28 != v29)
    {
      v30 = *(_QWORD *)(v28 + 48);
      if (*(_BYTE *)(v28 + 104) || (*(_BYTE *)(v30 + 4) & 6) != 0)
        sub_20F59A150((_QWORD *)(a1 + 2416), v30);
      v28 += 112;
    }
    v31 = *(_QWORD *)(a1 + 1352);
    v32 = *(_QWORD *)(a1 + 1360);
    while (v31 != v32)
    {
      v33 = *(_QWORD *)(v31 + 96);
      if (*(_BYTE *)(v31 + 200) || (*(_BYTE *)(v33 + 4) & 6) != 0)
        sub_20F599E20((_QWORD *)(a1 + 2416), v33);
      v31 += 208;
    }
    v34 = *(_QWORD *)(a1 + 1376);
    v35 = *(_QWORD *)(a1 + 1384);
    while (v34 != v35)
    {
      v36 = *(_QWORD *)(v34 + 96);
      if (*(_BYTE *)(v34 + 200) || (*(_BYTE *)(v36 + 4) & 6) != 0)
        sub_20F8DAC28((_QWORD *)(a1 + 2416), v36);
      v34 += 208;
    }
    v37 = *(_QWORD *)(a1 + 1400);
    v38 = *(_QWORD *)(a1 + 1408);
    while (v37 != v38)
    {
      v39 = *(_QWORD *)(v37 + 80);
      if (*(_BYTE *)(v37 + 168) || (*(_BYTE *)(v39 + 4) & 6) != 0)
        sub_20F8DADC0((_QWORD *)(a1 + 2416), v39);
      v37 += 176;
    }
    v40 = *(_QWORD *)(a1 + 1424);
    v41 = *(_QWORD *)(a1 + 1432);
    while (v40 != v41)
    {
      v42 = *(_QWORD *)(v40 + 80);
      if (*(_BYTE *)(v40 + 168) || (*(_BYTE *)(v42 + 4) & 6) != 0)
        sub_20F599FB8((_QWORD *)(a1 + 2416), v42);
      v40 += 176;
    }
    sub_20FA561E0(*(_QWORD *)(a1 + 1448), *(_QWORD *)(a1 + 1456), (_QWORD *)(a1 + 2416));
    sub_20FA560F4(*(_QWORD *)(a1 + 1472), *(_QWORD *)(a1 + 1480), (_QWORD *)(a1 + 2416));
    sub_20FA55F7C(*(_QWORD *)(a1 + 1496), *(_QWORD *)(a1 + 1504), (_QWORD *)(a1 + 2416));
    sub_20FA55E74(*(_QWORD *)(a1 + 1520), *(_QWORD *)(a1 + 1528), (_QWORD *)(a1 + 2416));
    v43 = (uint64_t)(*(_QWORD *)(a1 + 2544) - *(_QWORD *)(a1 + 2536)) >> 2;
    if (v43 <= v46)
      v44 = v46 - v43;
    else
      v44 = 0;
    sub_20FA485B8((_QWORD *)a1);
    return v44;
  }
  else
  {
    return v46;
  }
}

void sub_20FB5C360(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5C374(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5C388(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5C39C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5C3B0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5C3C4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5C3D8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5C3EC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5C400(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5C414(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5C428(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5C43C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5C450(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20FB5C464(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _DWORD v45[6];
  unsigned int v46;

  if (*(_BYTE *)(a1 + 1616))
  {
    v2 = *(_QWORD *)(a1 + 584);
    v3 = *(_QWORD *)(a1 + 592);
    if (v2 == v3)
      return 0;
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(v2 + 8);
      if ((*(_BYTE *)(v5 + 4) & 6) == 0)
        v4 = v4 + *(unsigned __int8 *)(v5 + 20);
      v2 += 16;
    }
    while (v2 != v3);
    return v4;
  }
  else if (sub_20FB5A3E8((_QWORD *)a1, v45))
  {
    *(_QWORD *)(a1 + 2424) = *(_QWORD *)(a1 + 2416);
    *(_QWORD *)(a1 + 2448) = *(_QWORD *)(a1 + 2440);
    *(_QWORD *)(a1 + 2472) = *(_QWORD *)(a1 + 2464);
    *(_QWORD *)(a1 + 2496) = *(_QWORD *)(a1 + 2488);
    *(_QWORD *)(a1 + 2520) = *(_QWORD *)(a1 + 2512);
    *(_QWORD *)(a1 + 2544) = *(_QWORD *)(a1 + 2536);
    *(_QWORD *)(a1 + 2568) = *(_QWORD *)(a1 + 2560);
    *(_QWORD *)(a1 + 2592) = *(_QWORD *)(a1 + 2584);
    *(_QWORD *)(a1 + 2616) = *(_QWORD *)(a1 + 2608);
    *(_QWORD *)(a1 + 2640) = *(_QWORD *)(a1 + 2632);
    *(_QWORD *)(a1 + 2664) = *(_QWORD *)(a1 + 2656);
    v6 = *(_QWORD *)(a1 + 1064);
    v7 = *(_QWORD *)(a1 + 1072);
    while (v6 != v7)
    {
      v8 = *(_QWORD *)(v6 + 208);
      if (*(_BYTE *)(v6 + 496) || (*(_BYTE *)(v8 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v6 + 216) + 4) & 6) != 0)
      {
        sub_20F394A20(a1 + 2416, v8);
        sub_20F3D35E0((_QWORD *)(a1 + 2416), *(_QWORD *)(v6 + 216));
      }
      v6 += 504;
    }
    v10 = *(_QWORD *)(a1 + 1088);
    v11 = *(_QWORD *)(a1 + 1096);
    while (v10 != v11)
    {
      v12 = *(_QWORD *)(v10 + 136);
      if (*(_BYTE *)(v10 + 272) || (*(_BYTE *)(v12 + 4) & 6) != 0)
        sub_20F394A20(a1 + 2416, v12);
      v10 += 280;
    }
    v13 = *(_QWORD *)(a1 + 1112);
    v14 = *(_QWORD *)(a1 + 1120);
    while (v13 != v14)
    {
      v15 = *(_QWORD *)(v13 + 136);
      if (*(_BYTE *)(v13 + 272) || (*(_BYTE *)(v15 + 4) & 6) != 0)
        sub_20F599C88((_QWORD *)(a1 + 2416), v15);
      v13 += 280;
    }
    v16 = *(_QWORD *)(a1 + 1136);
    v17 = *(_QWORD *)(a1 + 1144);
    while (v16 != v17)
    {
      v18 = *(_QWORD *)(v16 + 136);
      if (*(_BYTE *)(v16 + 272) || (*(_BYTE *)(v18 + 4) & 6) != 0)
        sub_20F59A480((_QWORD *)(a1 + 2416), v18);
      v16 += 280;
    }
    v19 = *(_QWORD *)(a1 + 1160);
    v20 = *(_QWORD *)(a1 + 1168);
    while (v19 != v20)
    {
      v21 = *(_QWORD *)(v19 + 64);
      if (*(_BYTE *)(v19 + 152) || (*(_BYTE *)(v21 + 4) & 6) != 0)
        sub_20F59A2E8((_QWORD *)(a1 + 2416), v21);
      v19 += 160;
    }
    sub_20FA5640C(*(_QWORD *)(a1 + 1184), *(_QWORD *)(a1 + 1192), (_QWORD *)(a1 + 2416));
    sub_20F5B85BC(*(_QWORD *)(a1 + 1208), *(_QWORD *)(a1 + 1216), (_QWORD *)(a1 + 2416));
    v22 = *(_QWORD *)(a1 + 1232);
    v23 = *(_QWORD *)(a1 + 1240);
    while (v22 != v23)
    {
      v24 = *(_QWORD *)(v22 + 48);
      if (*(_BYTE *)(v22 + 136) || (*(_BYTE *)(v24 + 4) & 6) != 0)
        sub_20F3D35E0((_QWORD *)(a1 + 2416), v24);
      v22 += 144;
    }
    v25 = *(_QWORD *)(a1 + 1256);
    v26 = *(_QWORD *)(a1 + 1264);
    while (v25 != v26)
    {
      v27 = *(_QWORD *)(v25 + 48);
      if (*(_BYTE *)(v25 + 144) || (*(_BYTE *)(v27 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v25 + 56) + 4) & 6) != 0)
      {
        sub_20F394A20(a1 + 2416, v27);
        sub_20F394A20(a1 + 2416, *(_QWORD *)(v25 + 56));
      }
      v25 += 152;
    }
    sub_20FA56358(*(_QWORD *)(a1 + 1280), *(_QWORD *)(a1 + 1288), (_QWORD *)(a1 + 2416));
    sub_20F8DF65C(*(_QWORD *)(a1 + 1304), *(_QWORD *)(a1 + 1312), (_QWORD *)(a1 + 2416));
    v28 = *(_QWORD *)(a1 + 1328);
    v29 = *(_QWORD *)(a1 + 1336);
    while (v28 != v29)
    {
      v30 = *(_QWORD *)(v28 + 48);
      if (*(_BYTE *)(v28 + 104) || (*(_BYTE *)(v30 + 4) & 6) != 0)
        sub_20F59A150((_QWORD *)(a1 + 2416), v30);
      v28 += 112;
    }
    v31 = *(_QWORD *)(a1 + 1352);
    v32 = *(_QWORD *)(a1 + 1360);
    while (v31 != v32)
    {
      v33 = *(_QWORD *)(v31 + 96);
      if (*(_BYTE *)(v31 + 200) || (*(_BYTE *)(v33 + 4) & 6) != 0)
        sub_20F599E20((_QWORD *)(a1 + 2416), v33);
      v31 += 208;
    }
    v34 = *(_QWORD *)(a1 + 1376);
    v35 = *(_QWORD *)(a1 + 1384);
    while (v34 != v35)
    {
      v36 = *(_QWORD *)(v34 + 96);
      if (*(_BYTE *)(v34 + 200) || (*(_BYTE *)(v36 + 4) & 6) != 0)
        sub_20F8DAC28((_QWORD *)(a1 + 2416), v36);
      v34 += 208;
    }
    v37 = *(_QWORD *)(a1 + 1400);
    v38 = *(_QWORD *)(a1 + 1408);
    while (v37 != v38)
    {
      v39 = *(_QWORD *)(v37 + 80);
      if (*(_BYTE *)(v37 + 168) || (*(_BYTE *)(v39 + 4) & 6) != 0)
        sub_20F8DADC0((_QWORD *)(a1 + 2416), v39);
      v37 += 176;
    }
    v40 = *(_QWORD *)(a1 + 1424);
    v41 = *(_QWORD *)(a1 + 1432);
    while (v40 != v41)
    {
      v42 = *(_QWORD *)(v40 + 80);
      if (*(_BYTE *)(v40 + 168) || (*(_BYTE *)(v42 + 4) & 6) != 0)
        sub_20F599FB8((_QWORD *)(a1 + 2416), v42);
      v40 += 176;
    }
    sub_20FA561E0(*(_QWORD *)(a1 + 1448), *(_QWORD *)(a1 + 1456), (_QWORD *)(a1 + 2416));
    sub_20FA560F4(*(_QWORD *)(a1 + 1472), *(_QWORD *)(a1 + 1480), (_QWORD *)(a1 + 2416));
    sub_20FA55F7C(*(_QWORD *)(a1 + 1496), *(_QWORD *)(a1 + 1504), (_QWORD *)(a1 + 2416));
    sub_20FA55E74(*(_QWORD *)(a1 + 1520), *(_QWORD *)(a1 + 1528), (_QWORD *)(a1 + 2416));
    v43 = (uint64_t)(*(_QWORD *)(a1 + 2568) - *(_QWORD *)(a1 + 2560)) >> 2;
    if (v43 <= v46)
      v44 = v46 - v43;
    else
      v44 = 0;
    sub_20FA485B8((_QWORD *)a1);
    return v44;
  }
  else
  {
    return v46;
  }
}

void sub_20FB5C930(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5C944(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5C958(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5C96C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5C980(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5C994(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5C9A8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5C9BC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5C9D0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5C9E4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5C9F8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5CA0C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5CA20(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20FB5CA34(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _DWORD v45[7];
  unsigned int v46;

  if (*(_BYTE *)(a1 + 1616))
  {
    v2 = *(_QWORD *)(a1 + 680);
    v3 = *(_QWORD *)(a1 + 688);
    if (v2 == v3)
      return 0;
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(v2 + 8);
      if ((*(_BYTE *)(v5 + 4) & 6) == 0)
        v4 = v4 + *(unsigned __int8 *)(v5 + 20);
      v2 += 16;
    }
    while (v2 != v3);
    return v4;
  }
  else if (sub_20FB5A3E8((_QWORD *)a1, v45))
  {
    *(_QWORD *)(a1 + 2424) = *(_QWORD *)(a1 + 2416);
    *(_QWORD *)(a1 + 2448) = *(_QWORD *)(a1 + 2440);
    *(_QWORD *)(a1 + 2472) = *(_QWORD *)(a1 + 2464);
    *(_QWORD *)(a1 + 2496) = *(_QWORD *)(a1 + 2488);
    *(_QWORD *)(a1 + 2520) = *(_QWORD *)(a1 + 2512);
    *(_QWORD *)(a1 + 2544) = *(_QWORD *)(a1 + 2536);
    *(_QWORD *)(a1 + 2568) = *(_QWORD *)(a1 + 2560);
    *(_QWORD *)(a1 + 2592) = *(_QWORD *)(a1 + 2584);
    *(_QWORD *)(a1 + 2616) = *(_QWORD *)(a1 + 2608);
    *(_QWORD *)(a1 + 2640) = *(_QWORD *)(a1 + 2632);
    *(_QWORD *)(a1 + 2664) = *(_QWORD *)(a1 + 2656);
    v6 = *(_QWORD *)(a1 + 1064);
    v7 = *(_QWORD *)(a1 + 1072);
    while (v6 != v7)
    {
      v8 = *(_QWORD *)(v6 + 208);
      if (*(_BYTE *)(v6 + 496) || (*(_BYTE *)(v8 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v6 + 216) + 4) & 6) != 0)
      {
        sub_20F394A20(a1 + 2416, v8);
        sub_20F3D35E0((_QWORD *)(a1 + 2416), *(_QWORD *)(v6 + 216));
      }
      v6 += 504;
    }
    v10 = *(_QWORD *)(a1 + 1088);
    v11 = *(_QWORD *)(a1 + 1096);
    while (v10 != v11)
    {
      v12 = *(_QWORD *)(v10 + 136);
      if (*(_BYTE *)(v10 + 272) || (*(_BYTE *)(v12 + 4) & 6) != 0)
        sub_20F394A20(a1 + 2416, v12);
      v10 += 280;
    }
    v13 = *(_QWORD *)(a1 + 1112);
    v14 = *(_QWORD *)(a1 + 1120);
    while (v13 != v14)
    {
      v15 = *(_QWORD *)(v13 + 136);
      if (*(_BYTE *)(v13 + 272) || (*(_BYTE *)(v15 + 4) & 6) != 0)
        sub_20F599C88((_QWORD *)(a1 + 2416), v15);
      v13 += 280;
    }
    v16 = *(_QWORD *)(a1 + 1136);
    v17 = *(_QWORD *)(a1 + 1144);
    while (v16 != v17)
    {
      v18 = *(_QWORD *)(v16 + 136);
      if (*(_BYTE *)(v16 + 272) || (*(_BYTE *)(v18 + 4) & 6) != 0)
        sub_20F59A480((_QWORD *)(a1 + 2416), v18);
      v16 += 280;
    }
    v19 = *(_QWORD *)(a1 + 1160);
    v20 = *(_QWORD *)(a1 + 1168);
    while (v19 != v20)
    {
      v21 = *(_QWORD *)(v19 + 64);
      if (*(_BYTE *)(v19 + 152) || (*(_BYTE *)(v21 + 4) & 6) != 0)
        sub_20F59A2E8((_QWORD *)(a1 + 2416), v21);
      v19 += 160;
    }
    sub_20FA5640C(*(_QWORD *)(a1 + 1184), *(_QWORD *)(a1 + 1192), (_QWORD *)(a1 + 2416));
    sub_20F5B85BC(*(_QWORD *)(a1 + 1208), *(_QWORD *)(a1 + 1216), (_QWORD *)(a1 + 2416));
    v22 = *(_QWORD *)(a1 + 1232);
    v23 = *(_QWORD *)(a1 + 1240);
    while (v22 != v23)
    {
      v24 = *(_QWORD *)(v22 + 48);
      if (*(_BYTE *)(v22 + 136) || (*(_BYTE *)(v24 + 4) & 6) != 0)
        sub_20F3D35E0((_QWORD *)(a1 + 2416), v24);
      v22 += 144;
    }
    v25 = *(_QWORD *)(a1 + 1256);
    v26 = *(_QWORD *)(a1 + 1264);
    while (v25 != v26)
    {
      v27 = *(_QWORD *)(v25 + 48);
      if (*(_BYTE *)(v25 + 144) || (*(_BYTE *)(v27 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v25 + 56) + 4) & 6) != 0)
      {
        sub_20F394A20(a1 + 2416, v27);
        sub_20F394A20(a1 + 2416, *(_QWORD *)(v25 + 56));
      }
      v25 += 152;
    }
    sub_20FA56358(*(_QWORD *)(a1 + 1280), *(_QWORD *)(a1 + 1288), (_QWORD *)(a1 + 2416));
    sub_20F8DF65C(*(_QWORD *)(a1 + 1304), *(_QWORD *)(a1 + 1312), (_QWORD *)(a1 + 2416));
    v28 = *(_QWORD *)(a1 + 1328);
    v29 = *(_QWORD *)(a1 + 1336);
    while (v28 != v29)
    {
      v30 = *(_QWORD *)(v28 + 48);
      if (*(_BYTE *)(v28 + 104) || (*(_BYTE *)(v30 + 4) & 6) != 0)
        sub_20F59A150((_QWORD *)(a1 + 2416), v30);
      v28 += 112;
    }
    v31 = *(_QWORD *)(a1 + 1352);
    v32 = *(_QWORD *)(a1 + 1360);
    while (v31 != v32)
    {
      v33 = *(_QWORD *)(v31 + 96);
      if (*(_BYTE *)(v31 + 200) || (*(_BYTE *)(v33 + 4) & 6) != 0)
        sub_20F599E20((_QWORD *)(a1 + 2416), v33);
      v31 += 208;
    }
    v34 = *(_QWORD *)(a1 + 1376);
    v35 = *(_QWORD *)(a1 + 1384);
    while (v34 != v35)
    {
      v36 = *(_QWORD *)(v34 + 96);
      if (*(_BYTE *)(v34 + 200) || (*(_BYTE *)(v36 + 4) & 6) != 0)
        sub_20F8DAC28((_QWORD *)(a1 + 2416), v36);
      v34 += 208;
    }
    v37 = *(_QWORD *)(a1 + 1400);
    v38 = *(_QWORD *)(a1 + 1408);
    while (v37 != v38)
    {
      v39 = *(_QWORD *)(v37 + 80);
      if (*(_BYTE *)(v37 + 168) || (*(_BYTE *)(v39 + 4) & 6) != 0)
        sub_20F8DADC0((_QWORD *)(a1 + 2416), v39);
      v37 += 176;
    }
    v40 = *(_QWORD *)(a1 + 1424);
    v41 = *(_QWORD *)(a1 + 1432);
    while (v40 != v41)
    {
      v42 = *(_QWORD *)(v40 + 80);
      if (*(_BYTE *)(v40 + 168) || (*(_BYTE *)(v42 + 4) & 6) != 0)
        sub_20F599FB8((_QWORD *)(a1 + 2416), v42);
      v40 += 176;
    }
    sub_20FA561E0(*(_QWORD *)(a1 + 1448), *(_QWORD *)(a1 + 1456), (_QWORD *)(a1 + 2416));
    sub_20FA560F4(*(_QWORD *)(a1 + 1472), *(_QWORD *)(a1 + 1480), (_QWORD *)(a1 + 2416));
    sub_20FA55F7C(*(_QWORD *)(a1 + 1496), *(_QWORD *)(a1 + 1504), (_QWORD *)(a1 + 2416));
    sub_20FA55E74(*(_QWORD *)(a1 + 1520), *(_QWORD *)(a1 + 1528), (_QWORD *)(a1 + 2416));
    v43 = (uint64_t)(*(_QWORD *)(a1 + 2592) - *(_QWORD *)(a1 + 2584)) >> 2;
    if (v43 <= v46)
      v44 = v46 - v43;
    else
      v44 = 0;
    sub_20FA485B8((_QWORD *)a1);
    return v44;
  }
  else
  {
    return v46;
  }
}

void sub_20FB5CF00(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5CF14(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5CF28(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5CF3C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5CF50(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5CF64(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5CF78(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5CF8C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5CFA0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5CFB4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5CFC8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5CFDC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5CFF0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20FB5D004(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _DWORD v45[8];
  unsigned int v46;

  if (*(_BYTE *)(a1 + 1616))
  {
    v2 = *(_QWORD *)(a1 + 776);
    v3 = *(_QWORD *)(a1 + 784);
    if (v2 == v3)
      return 0;
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(v2 + 8);
      if ((*(_BYTE *)(v5 + 4) & 6) == 0)
        v4 = v4 + *(unsigned __int8 *)(v5 + 20);
      v2 += 16;
    }
    while (v2 != v3);
    return v4;
  }
  else if (sub_20FB5A3E8((_QWORD *)a1, v45))
  {
    *(_QWORD *)(a1 + 2424) = *(_QWORD *)(a1 + 2416);
    *(_QWORD *)(a1 + 2448) = *(_QWORD *)(a1 + 2440);
    *(_QWORD *)(a1 + 2472) = *(_QWORD *)(a1 + 2464);
    *(_QWORD *)(a1 + 2496) = *(_QWORD *)(a1 + 2488);
    *(_QWORD *)(a1 + 2520) = *(_QWORD *)(a1 + 2512);
    *(_QWORD *)(a1 + 2544) = *(_QWORD *)(a1 + 2536);
    *(_QWORD *)(a1 + 2568) = *(_QWORD *)(a1 + 2560);
    *(_QWORD *)(a1 + 2592) = *(_QWORD *)(a1 + 2584);
    *(_QWORD *)(a1 + 2616) = *(_QWORD *)(a1 + 2608);
    *(_QWORD *)(a1 + 2640) = *(_QWORD *)(a1 + 2632);
    *(_QWORD *)(a1 + 2664) = *(_QWORD *)(a1 + 2656);
    v6 = *(_QWORD *)(a1 + 1064);
    v7 = *(_QWORD *)(a1 + 1072);
    while (v6 != v7)
    {
      v8 = *(_QWORD *)(v6 + 208);
      if (*(_BYTE *)(v6 + 496) || (*(_BYTE *)(v8 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v6 + 216) + 4) & 6) != 0)
      {
        sub_20F394A20(a1 + 2416, v8);
        sub_20F3D35E0((_QWORD *)(a1 + 2416), *(_QWORD *)(v6 + 216));
      }
      v6 += 504;
    }
    v10 = *(_QWORD *)(a1 + 1088);
    v11 = *(_QWORD *)(a1 + 1096);
    while (v10 != v11)
    {
      v12 = *(_QWORD *)(v10 + 136);
      if (*(_BYTE *)(v10 + 272) || (*(_BYTE *)(v12 + 4) & 6) != 0)
        sub_20F394A20(a1 + 2416, v12);
      v10 += 280;
    }
    v13 = *(_QWORD *)(a1 + 1112);
    v14 = *(_QWORD *)(a1 + 1120);
    while (v13 != v14)
    {
      v15 = *(_QWORD *)(v13 + 136);
      if (*(_BYTE *)(v13 + 272) || (*(_BYTE *)(v15 + 4) & 6) != 0)
        sub_20F599C88((_QWORD *)(a1 + 2416), v15);
      v13 += 280;
    }
    v16 = *(_QWORD *)(a1 + 1136);
    v17 = *(_QWORD *)(a1 + 1144);
    while (v16 != v17)
    {
      v18 = *(_QWORD *)(v16 + 136);
      if (*(_BYTE *)(v16 + 272) || (*(_BYTE *)(v18 + 4) & 6) != 0)
        sub_20F59A480((_QWORD *)(a1 + 2416), v18);
      v16 += 280;
    }
    v19 = *(_QWORD *)(a1 + 1160);
    v20 = *(_QWORD *)(a1 + 1168);
    while (v19 != v20)
    {
      v21 = *(_QWORD *)(v19 + 64);
      if (*(_BYTE *)(v19 + 152) || (*(_BYTE *)(v21 + 4) & 6) != 0)
        sub_20F59A2E8((_QWORD *)(a1 + 2416), v21);
      v19 += 160;
    }
    sub_20FA5640C(*(_QWORD *)(a1 + 1184), *(_QWORD *)(a1 + 1192), (_QWORD *)(a1 + 2416));
    sub_20F5B85BC(*(_QWORD *)(a1 + 1208), *(_QWORD *)(a1 + 1216), (_QWORD *)(a1 + 2416));
    v22 = *(_QWORD *)(a1 + 1232);
    v23 = *(_QWORD *)(a1 + 1240);
    while (v22 != v23)
    {
      v24 = *(_QWORD *)(v22 + 48);
      if (*(_BYTE *)(v22 + 136) || (*(_BYTE *)(v24 + 4) & 6) != 0)
        sub_20F3D35E0((_QWORD *)(a1 + 2416), v24);
      v22 += 144;
    }
    v25 = *(_QWORD *)(a1 + 1256);
    v26 = *(_QWORD *)(a1 + 1264);
    while (v25 != v26)
    {
      v27 = *(_QWORD *)(v25 + 48);
      if (*(_BYTE *)(v25 + 144) || (*(_BYTE *)(v27 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v25 + 56) + 4) & 6) != 0)
      {
        sub_20F394A20(a1 + 2416, v27);
        sub_20F394A20(a1 + 2416, *(_QWORD *)(v25 + 56));
      }
      v25 += 152;
    }
    sub_20FA56358(*(_QWORD *)(a1 + 1280), *(_QWORD *)(a1 + 1288), (_QWORD *)(a1 + 2416));
    sub_20F8DF65C(*(_QWORD *)(a1 + 1304), *(_QWORD *)(a1 + 1312), (_QWORD *)(a1 + 2416));
    v28 = *(_QWORD *)(a1 + 1328);
    v29 = *(_QWORD *)(a1 + 1336);
    while (v28 != v29)
    {
      v30 = *(_QWORD *)(v28 + 48);
      if (*(_BYTE *)(v28 + 104) || (*(_BYTE *)(v30 + 4) & 6) != 0)
        sub_20F59A150((_QWORD *)(a1 + 2416), v30);
      v28 += 112;
    }
    v31 = *(_QWORD *)(a1 + 1352);
    v32 = *(_QWORD *)(a1 + 1360);
    while (v31 != v32)
    {
      v33 = *(_QWORD *)(v31 + 96);
      if (*(_BYTE *)(v31 + 200) || (*(_BYTE *)(v33 + 4) & 6) != 0)
        sub_20F599E20((_QWORD *)(a1 + 2416), v33);
      v31 += 208;
    }
    v34 = *(_QWORD *)(a1 + 1376);
    v35 = *(_QWORD *)(a1 + 1384);
    while (v34 != v35)
    {
      v36 = *(_QWORD *)(v34 + 96);
      if (*(_BYTE *)(v34 + 200) || (*(_BYTE *)(v36 + 4) & 6) != 0)
        sub_20F8DAC28((_QWORD *)(a1 + 2416), v36);
      v34 += 208;
    }
    v37 = *(_QWORD *)(a1 + 1400);
    v38 = *(_QWORD *)(a1 + 1408);
    while (v37 != v38)
    {
      v39 = *(_QWORD *)(v37 + 80);
      if (*(_BYTE *)(v37 + 168) || (*(_BYTE *)(v39 + 4) & 6) != 0)
        sub_20F8DADC0((_QWORD *)(a1 + 2416), v39);
      v37 += 176;
    }
    v40 = *(_QWORD *)(a1 + 1424);
    v41 = *(_QWORD *)(a1 + 1432);
    while (v40 != v41)
    {
      v42 = *(_QWORD *)(v40 + 80);
      if (*(_BYTE *)(v40 + 168) || (*(_BYTE *)(v42 + 4) & 6) != 0)
        sub_20F599FB8((_QWORD *)(a1 + 2416), v42);
      v40 += 176;
    }
    sub_20FA561E0(*(_QWORD *)(a1 + 1448), *(_QWORD *)(a1 + 1456), (_QWORD *)(a1 + 2416));
    sub_20FA560F4(*(_QWORD *)(a1 + 1472), *(_QWORD *)(a1 + 1480), (_QWORD *)(a1 + 2416));
    sub_20FA55F7C(*(_QWORD *)(a1 + 1496), *(_QWORD *)(a1 + 1504), (_QWORD *)(a1 + 2416));
    sub_20FA55E74(*(_QWORD *)(a1 + 1520), *(_QWORD *)(a1 + 1528), (_QWORD *)(a1 + 2416));
    v43 = (uint64_t)(*(_QWORD *)(a1 + 2616) - *(_QWORD *)(a1 + 2608)) >> 2;
    if (v43 <= v46)
      v44 = v46 - v43;
    else
      v44 = 0;
    sub_20FA485B8((_QWORD *)a1);
    return v44;
  }
  else
  {
    return v46;
  }
}

void sub_20FB5D4D0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5D4E4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5D4F8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5D50C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5D520(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5D534(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5D548(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5D55C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5D570(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5D584(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5D598(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5D5AC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5D5C0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20FB5D5D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _DWORD v45[9];
  unsigned int v46;

  if (*(_BYTE *)(a1 + 1616))
  {
    v2 = *(_QWORD *)(a1 + 872);
    v3 = *(_QWORD *)(a1 + 880);
    if (v2 == v3)
      return 0;
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(v2 + 8);
      if ((*(_BYTE *)(v5 + 4) & 6) == 0)
        v4 = v4 + *(unsigned __int8 *)(v5 + 20);
      v2 += 16;
    }
    while (v2 != v3);
    return v4;
  }
  else if (sub_20FB5A3E8((_QWORD *)a1, v45))
  {
    *(_QWORD *)(a1 + 2424) = *(_QWORD *)(a1 + 2416);
    *(_QWORD *)(a1 + 2448) = *(_QWORD *)(a1 + 2440);
    *(_QWORD *)(a1 + 2472) = *(_QWORD *)(a1 + 2464);
    *(_QWORD *)(a1 + 2496) = *(_QWORD *)(a1 + 2488);
    *(_QWORD *)(a1 + 2520) = *(_QWORD *)(a1 + 2512);
    *(_QWORD *)(a1 + 2544) = *(_QWORD *)(a1 + 2536);
    *(_QWORD *)(a1 + 2568) = *(_QWORD *)(a1 + 2560);
    *(_QWORD *)(a1 + 2592) = *(_QWORD *)(a1 + 2584);
    *(_QWORD *)(a1 + 2616) = *(_QWORD *)(a1 + 2608);
    *(_QWORD *)(a1 + 2640) = *(_QWORD *)(a1 + 2632);
    *(_QWORD *)(a1 + 2664) = *(_QWORD *)(a1 + 2656);
    v6 = *(_QWORD *)(a1 + 1064);
    v7 = *(_QWORD *)(a1 + 1072);
    while (v6 != v7)
    {
      v8 = *(_QWORD *)(v6 + 208);
      if (*(_BYTE *)(v6 + 496) || (*(_BYTE *)(v8 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v6 + 216) + 4) & 6) != 0)
      {
        sub_20F394A20(a1 + 2416, v8);
        sub_20F3D35E0((_QWORD *)(a1 + 2416), *(_QWORD *)(v6 + 216));
      }
      v6 += 504;
    }
    v10 = *(_QWORD *)(a1 + 1088);
    v11 = *(_QWORD *)(a1 + 1096);
    while (v10 != v11)
    {
      v12 = *(_QWORD *)(v10 + 136);
      if (*(_BYTE *)(v10 + 272) || (*(_BYTE *)(v12 + 4) & 6) != 0)
        sub_20F394A20(a1 + 2416, v12);
      v10 += 280;
    }
    v13 = *(_QWORD *)(a1 + 1112);
    v14 = *(_QWORD *)(a1 + 1120);
    while (v13 != v14)
    {
      v15 = *(_QWORD *)(v13 + 136);
      if (*(_BYTE *)(v13 + 272) || (*(_BYTE *)(v15 + 4) & 6) != 0)
        sub_20F599C88((_QWORD *)(a1 + 2416), v15);
      v13 += 280;
    }
    v16 = *(_QWORD *)(a1 + 1136);
    v17 = *(_QWORD *)(a1 + 1144);
    while (v16 != v17)
    {
      v18 = *(_QWORD *)(v16 + 136);
      if (*(_BYTE *)(v16 + 272) || (*(_BYTE *)(v18 + 4) & 6) != 0)
        sub_20F59A480((_QWORD *)(a1 + 2416), v18);
      v16 += 280;
    }
    v19 = *(_QWORD *)(a1 + 1160);
    v20 = *(_QWORD *)(a1 + 1168);
    while (v19 != v20)
    {
      v21 = *(_QWORD *)(v19 + 64);
      if (*(_BYTE *)(v19 + 152) || (*(_BYTE *)(v21 + 4) & 6) != 0)
        sub_20F59A2E8((_QWORD *)(a1 + 2416), v21);
      v19 += 160;
    }
    sub_20FA5640C(*(_QWORD *)(a1 + 1184), *(_QWORD *)(a1 + 1192), (_QWORD *)(a1 + 2416));
    sub_20F5B85BC(*(_QWORD *)(a1 + 1208), *(_QWORD *)(a1 + 1216), (_QWORD *)(a1 + 2416));
    v22 = *(_QWORD *)(a1 + 1232);
    v23 = *(_QWORD *)(a1 + 1240);
    while (v22 != v23)
    {
      v24 = *(_QWORD *)(v22 + 48);
      if (*(_BYTE *)(v22 + 136) || (*(_BYTE *)(v24 + 4) & 6) != 0)
        sub_20F3D35E0((_QWORD *)(a1 + 2416), v24);
      v22 += 144;
    }
    v25 = *(_QWORD *)(a1 + 1256);
    v26 = *(_QWORD *)(a1 + 1264);
    while (v25 != v26)
    {
      v27 = *(_QWORD *)(v25 + 48);
      if (*(_BYTE *)(v25 + 144) || (*(_BYTE *)(v27 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v25 + 56) + 4) & 6) != 0)
      {
        sub_20F394A20(a1 + 2416, v27);
        sub_20F394A20(a1 + 2416, *(_QWORD *)(v25 + 56));
      }
      v25 += 152;
    }
    sub_20FA56358(*(_QWORD *)(a1 + 1280), *(_QWORD *)(a1 + 1288), (_QWORD *)(a1 + 2416));
    sub_20F8DF65C(*(_QWORD *)(a1 + 1304), *(_QWORD *)(a1 + 1312), (_QWORD *)(a1 + 2416));
    v28 = *(_QWORD *)(a1 + 1328);
    v29 = *(_QWORD *)(a1 + 1336);
    while (v28 != v29)
    {
      v30 = *(_QWORD *)(v28 + 48);
      if (*(_BYTE *)(v28 + 104) || (*(_BYTE *)(v30 + 4) & 6) != 0)
        sub_20F59A150((_QWORD *)(a1 + 2416), v30);
      v28 += 112;
    }
    v31 = *(_QWORD *)(a1 + 1352);
    v32 = *(_QWORD *)(a1 + 1360);
    while (v31 != v32)
    {
      v33 = *(_QWORD *)(v31 + 96);
      if (*(_BYTE *)(v31 + 200) || (*(_BYTE *)(v33 + 4) & 6) != 0)
        sub_20F599E20((_QWORD *)(a1 + 2416), v33);
      v31 += 208;
    }
    v34 = *(_QWORD *)(a1 + 1376);
    v35 = *(_QWORD *)(a1 + 1384);
    while (v34 != v35)
    {
      v36 = *(_QWORD *)(v34 + 96);
      if (*(_BYTE *)(v34 + 200) || (*(_BYTE *)(v36 + 4) & 6) != 0)
        sub_20F8DAC28((_QWORD *)(a1 + 2416), v36);
      v34 += 208;
    }
    v37 = *(_QWORD *)(a1 + 1400);
    v38 = *(_QWORD *)(a1 + 1408);
    while (v37 != v38)
    {
      v39 = *(_QWORD *)(v37 + 80);
      if (*(_BYTE *)(v37 + 168) || (*(_BYTE *)(v39 + 4) & 6) != 0)
        sub_20F8DADC0((_QWORD *)(a1 + 2416), v39);
      v37 += 176;
    }
    v40 = *(_QWORD *)(a1 + 1424);
    v41 = *(_QWORD *)(a1 + 1432);
    while (v40 != v41)
    {
      v42 = *(_QWORD *)(v40 + 80);
      if (*(_BYTE *)(v40 + 168) || (*(_BYTE *)(v42 + 4) & 6) != 0)
        sub_20F599FB8((_QWORD *)(a1 + 2416), v42);
      v40 += 176;
    }
    sub_20FA561E0(*(_QWORD *)(a1 + 1448), *(_QWORD *)(a1 + 1456), (_QWORD *)(a1 + 2416));
    sub_20FA560F4(*(_QWORD *)(a1 + 1472), *(_QWORD *)(a1 + 1480), (_QWORD *)(a1 + 2416));
    sub_20FA55F7C(*(_QWORD *)(a1 + 1496), *(_QWORD *)(a1 + 1504), (_QWORD *)(a1 + 2416));
    sub_20FA55E74(*(_QWORD *)(a1 + 1520), *(_QWORD *)(a1 + 1528), (_QWORD *)(a1 + 2416));
    v43 = (uint64_t)(*(_QWORD *)(a1 + 2640) - *(_QWORD *)(a1 + 2632)) >> 2;
    if (v43 <= v46)
      v44 = v46 - v43;
    else
      v44 = 0;
    sub_20FA485B8((_QWORD *)a1);
    return v44;
  }
  else
  {
    return v46;
  }
}

void sub_20FB5DAA0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5DAB4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5DAC8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5DADC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5DAF0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5DB04(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5DB18(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5DB2C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5DB40(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5DB54(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5DB68(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5DB7C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5DB90(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20FB5DBA4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _DWORD v45[10];
  unsigned int v46;

  if (*(_BYTE *)(a1 + 1616))
  {
    v2 = *(_QWORD *)(a1 + 968);
    v3 = *(_QWORD *)(a1 + 976);
    if (v2 == v3)
      return 0;
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(v2 + 8);
      if ((*(_BYTE *)(v5 + 4) & 6) == 0)
        v4 = v4 + *(unsigned __int8 *)(v5 + 20);
      v2 += 16;
    }
    while (v2 != v3);
    return v4;
  }
  else if (sub_20FB5A3E8((_QWORD *)a1, v45))
  {
    *(_QWORD *)(a1 + 2424) = *(_QWORD *)(a1 + 2416);
    *(_QWORD *)(a1 + 2448) = *(_QWORD *)(a1 + 2440);
    *(_QWORD *)(a1 + 2472) = *(_QWORD *)(a1 + 2464);
    *(_QWORD *)(a1 + 2496) = *(_QWORD *)(a1 + 2488);
    *(_QWORD *)(a1 + 2520) = *(_QWORD *)(a1 + 2512);
    *(_QWORD *)(a1 + 2544) = *(_QWORD *)(a1 + 2536);
    *(_QWORD *)(a1 + 2568) = *(_QWORD *)(a1 + 2560);
    *(_QWORD *)(a1 + 2592) = *(_QWORD *)(a1 + 2584);
    *(_QWORD *)(a1 + 2616) = *(_QWORD *)(a1 + 2608);
    *(_QWORD *)(a1 + 2640) = *(_QWORD *)(a1 + 2632);
    *(_QWORD *)(a1 + 2664) = *(_QWORD *)(a1 + 2656);
    v6 = *(_QWORD *)(a1 + 1064);
    v7 = *(_QWORD *)(a1 + 1072);
    while (v6 != v7)
    {
      v8 = *(_QWORD *)(v6 + 208);
      if (*(_BYTE *)(v6 + 496) || (*(_BYTE *)(v8 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v6 + 216) + 4) & 6) != 0)
      {
        sub_20F394A20(a1 + 2416, v8);
        sub_20F3D35E0((_QWORD *)(a1 + 2416), *(_QWORD *)(v6 + 216));
      }
      v6 += 504;
    }
    v10 = *(_QWORD *)(a1 + 1088);
    v11 = *(_QWORD *)(a1 + 1096);
    while (v10 != v11)
    {
      v12 = *(_QWORD *)(v10 + 136);
      if (*(_BYTE *)(v10 + 272) || (*(_BYTE *)(v12 + 4) & 6) != 0)
        sub_20F394A20(a1 + 2416, v12);
      v10 += 280;
    }
    v13 = *(_QWORD *)(a1 + 1112);
    v14 = *(_QWORD *)(a1 + 1120);
    while (v13 != v14)
    {
      v15 = *(_QWORD *)(v13 + 136);
      if (*(_BYTE *)(v13 + 272) || (*(_BYTE *)(v15 + 4) & 6) != 0)
        sub_20F599C88((_QWORD *)(a1 + 2416), v15);
      v13 += 280;
    }
    v16 = *(_QWORD *)(a1 + 1136);
    v17 = *(_QWORD *)(a1 + 1144);
    while (v16 != v17)
    {
      v18 = *(_QWORD *)(v16 + 136);
      if (*(_BYTE *)(v16 + 272) || (*(_BYTE *)(v18 + 4) & 6) != 0)
        sub_20F59A480((_QWORD *)(a1 + 2416), v18);
      v16 += 280;
    }
    v19 = *(_QWORD *)(a1 + 1160);
    v20 = *(_QWORD *)(a1 + 1168);
    while (v19 != v20)
    {
      v21 = *(_QWORD *)(v19 + 64);
      if (*(_BYTE *)(v19 + 152) || (*(_BYTE *)(v21 + 4) & 6) != 0)
        sub_20F59A2E8((_QWORD *)(a1 + 2416), v21);
      v19 += 160;
    }
    sub_20FA5640C(*(_QWORD *)(a1 + 1184), *(_QWORD *)(a1 + 1192), (_QWORD *)(a1 + 2416));
    sub_20F5B85BC(*(_QWORD *)(a1 + 1208), *(_QWORD *)(a1 + 1216), (_QWORD *)(a1 + 2416));
    v22 = *(_QWORD *)(a1 + 1232);
    v23 = *(_QWORD *)(a1 + 1240);
    while (v22 != v23)
    {
      v24 = *(_QWORD *)(v22 + 48);
      if (*(_BYTE *)(v22 + 136) || (*(_BYTE *)(v24 + 4) & 6) != 0)
        sub_20F3D35E0((_QWORD *)(a1 + 2416), v24);
      v22 += 144;
    }
    v25 = *(_QWORD *)(a1 + 1256);
    v26 = *(_QWORD *)(a1 + 1264);
    while (v25 != v26)
    {
      v27 = *(_QWORD *)(v25 + 48);
      if (*(_BYTE *)(v25 + 144) || (*(_BYTE *)(v27 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v25 + 56) + 4) & 6) != 0)
      {
        sub_20F394A20(a1 + 2416, v27);
        sub_20F394A20(a1 + 2416, *(_QWORD *)(v25 + 56));
      }
      v25 += 152;
    }
    sub_20FA56358(*(_QWORD *)(a1 + 1280), *(_QWORD *)(a1 + 1288), (_QWORD *)(a1 + 2416));
    sub_20F8DF65C(*(_QWORD *)(a1 + 1304), *(_QWORD *)(a1 + 1312), (_QWORD *)(a1 + 2416));
    v28 = *(_QWORD *)(a1 + 1328);
    v29 = *(_QWORD *)(a1 + 1336);
    while (v28 != v29)
    {
      v30 = *(_QWORD *)(v28 + 48);
      if (*(_BYTE *)(v28 + 104) || (*(_BYTE *)(v30 + 4) & 6) != 0)
        sub_20F59A150((_QWORD *)(a1 + 2416), v30);
      v28 += 112;
    }
    v31 = *(_QWORD *)(a1 + 1352);
    v32 = *(_QWORD *)(a1 + 1360);
    while (v31 != v32)
    {
      v33 = *(_QWORD *)(v31 + 96);
      if (*(_BYTE *)(v31 + 200) || (*(_BYTE *)(v33 + 4) & 6) != 0)
        sub_20F599E20((_QWORD *)(a1 + 2416), v33);
      v31 += 208;
    }
    v34 = *(_QWORD *)(a1 + 1376);
    v35 = *(_QWORD *)(a1 + 1384);
    while (v34 != v35)
    {
      v36 = *(_QWORD *)(v34 + 96);
      if (*(_BYTE *)(v34 + 200) || (*(_BYTE *)(v36 + 4) & 6) != 0)
        sub_20F8DAC28((_QWORD *)(a1 + 2416), v36);
      v34 += 208;
    }
    v37 = *(_QWORD *)(a1 + 1400);
    v38 = *(_QWORD *)(a1 + 1408);
    while (v37 != v38)
    {
      v39 = *(_QWORD *)(v37 + 80);
      if (*(_BYTE *)(v37 + 168) || (*(_BYTE *)(v39 + 4) & 6) != 0)
        sub_20F8DADC0((_QWORD *)(a1 + 2416), v39);
      v37 += 176;
    }
    v40 = *(_QWORD *)(a1 + 1424);
    v41 = *(_QWORD *)(a1 + 1432);
    while (v40 != v41)
    {
      v42 = *(_QWORD *)(v40 + 80);
      if (*(_BYTE *)(v40 + 168) || (*(_BYTE *)(v42 + 4) & 6) != 0)
        sub_20F599FB8((_QWORD *)(a1 + 2416), v42);
      v40 += 176;
    }
    sub_20FA561E0(*(_QWORD *)(a1 + 1448), *(_QWORD *)(a1 + 1456), (_QWORD *)(a1 + 2416));
    sub_20FA560F4(*(_QWORD *)(a1 + 1472), *(_QWORD *)(a1 + 1480), (_QWORD *)(a1 + 2416));
    sub_20FA55F7C(*(_QWORD *)(a1 + 1496), *(_QWORD *)(a1 + 1504), (_QWORD *)(a1 + 2416));
    sub_20FA55E74(*(_QWORD *)(a1 + 1520), *(_QWORD *)(a1 + 1528), (_QWORD *)(a1 + 2416));
    v43 = (uint64_t)(*(_QWORD *)(a1 + 2664) - *(_QWORD *)(a1 + 2656)) >> 2;
    if (v43 <= v46)
      v44 = v46 - v43;
    else
      v44 = 0;
    sub_20FA485B8((_QWORD *)a1);
    return v44;
  }
  else
  {
    return v46;
  }
}

void sub_20FB5E070(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5E084(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5E098(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5E0AC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5E0C0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5E0D4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5E0E8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5E0FC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5E110(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5E124(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5E138(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5E14C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FB5E160(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_20FB5E174(uint64_t a1, int a2)
{
  BOOL v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t result;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 1616))
    v3 = 0;
  else
    v3 = a2 == 0;
  if (!v3 || !sub_20F9210FC((_QWORD *)a1))
    return 0x97A3FE4BD1FF25E9 * ((uint64_t)(*(_QWORD *)(a1 + 1192) - *(_QWORD *)(a1 + 1184)) >> 4);
  v4 = *(_QWORD **)(a1 + 1184);
  v5 = *(_QWORD **)(a1 + 1192);
  if (v4 == v5)
    return 0;
  result = 0;
  v7 = 0;
  do
  {
    if ((*(_BYTE *)(v4[1157] + 4) & 6) == 0
      && (*(_BYTE *)(v4[1158] + 4) & 6) == 0
      && (*(_BYTE *)(v4[1159] + 4) & 6) == 0
      && (*(_BYTE *)(v4[1160] + 4) & 6) == 0
      && (*(_BYTE *)(v4[1161] + 4) & 6) == 0
      && (*(_BYTE *)(v4[1162] + 4) & 6) == 0
      && (*(_BYTE *)(v4[1163] + 4) & 6) == 0
      && (*(_BYTE *)(v4[1164] + 4) & 6) == 0
      && (*(_BYTE *)(v4[1165] + 4) & 6) == 0
      && (*(_BYTE *)(v4[1166] + 4) & 6) == 0)
    {
      result = ++v7;
    }
    v4 += 1202;
  }
  while (v4 != v5);
  return result;
}

void sub_20FB5E2B4(std::string *a1)
{
  const std::string::value_type *v2;
  std::string::size_type v3;
  _OWORD *v4;
  const std::string::value_type *v5;
  std::string::size_type v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  char *v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  _OWORD *v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  char *v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  const std::string::value_type *v22;
  std::string::size_type v23;
  _OWORD *v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  _BYTE v29[64];
  char *v30;
  __int128 v31;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  v30 = (char *)operator new(0x30uLL);
  *(_WORD *)&v29[50] = 0;
  *(_DWORD *)&v29[52] = 0;
  *(_QWORD *)&v29[56] = 0x8000000000000030;
  v31 = xmmword_2102DCA00;
  strcpy(v30, "cv3d::vio::VIOExtrinsicsVariable<double>]");
  strcpy(v29, "ariable<double>]trinsicsVariablecv3d::vio::VIOEx)");
  sub_20E8D1238(&v30, 40, 1uLL);
  if (v31 >= 0)
    v2 = (const std::string::value_type *)&v30;
  else
    v2 = v30;
  if (v31 >= 0)
    v3 = HIBYTE(v31);
  else
    v3 = v31;
  std::string::append(a1, v2, v3);
  if (SHIBYTE(v31) < 0)
    operator delete(v30);
  std::string::append(a1, ", ", 2uLL);
  v4 = operator new(0x30uLL);
  v30 = (char *)v4;
  v31 = *(_OWORD *)&v29[48];
  *v4 = *(_OWORD *)&v29[32];
  v4[1] = *(_OWORD *)&v29[16];
  *(_OWORD *)((char *)v4 + 25) = *(_OWORD *)v29;
  *((_BYTE *)v4 + 41) = 0;
  sub_20E8D1238(&v30, 40, 1uLL);
  if (v31 >= 0)
    v5 = (const std::string::value_type *)&v30;
  else
    v5 = v30;
  if (v31 >= 0)
    v6 = HIBYTE(v31);
  else
    v6 = v31;
  std::string::append(a1, v5, v6);
  if (SHIBYTE(v31) < 0)
    operator delete(v30);
  std::string::append(a1, ", ", 2uLL);
  v30 = (char *)operator new(0x28uLL);
  *(_WORD *)&v29[50] = 0;
  *(_DWORD *)&v29[52] = 0;
  *(_QWORD *)&v29[56] = 0x8000000000000028;
  v31 = xmmword_2102DCA10;
  strcpy(&v29[16], "seVariable<doublcv3d::vio::VIOPo#");
  strcpy(v30, "cv3d::vio::VIOPoseVariable<double>]");
  sub_20E8D1238(&v30, 34, 1uLL);
  if (v31 >= 0)
    v7 = (const std::string::value_type *)&v30;
  else
    v7 = v30;
  if (v31 >= 0)
    v8 = HIBYTE(v31);
  else
    v8 = v31;
  std::string::append(a1, v7, v8);
  if (SHIBYTE(v31) < 0)
    operator delete(v30);
  std::string::append(a1, ", ", 2uLL);
  v9 = (char *)operator new(0x28uLL);
  v30 = v9;
  v31 = *(_OWORD *)&v29[48];
  strcpy(v9 + 31, "le>]");
  *(_OWORD *)v9 = *(_OWORD *)&v29[32];
  *((_OWORD *)v9 + 1) = *(_OWORD *)&v29[16];
  sub_20E8D1238(&v30, 34, 1uLL);
  if (v31 >= 0)
    v10 = (const std::string::value_type *)&v30;
  else
    v10 = v30;
  if (v31 >= 0)
    v11 = HIBYTE(v31);
  else
    v11 = v31;
  std::string::append(a1, v10, v11);
  if (SHIBYTE(v31) < 0)
    operator delete(v30);
  std::string::append(a1, ", ", 2uLL);
  v30 = (char *)operator new(0x30uLL);
  *(_WORD *)&v29[50] = 0;
  *(_DWORD *)&v29[52] = 0;
  *(_QWORD *)&v29[56] = 0x8000000000000030;
  v31 = xmmword_2102DC8E0;
  strcpy(v30, "cv3d::vio::IntrinsicsCalibVariable<double>]");
  strcpy(v29, "ariable<double>]nsicsCalibVariabcv3d::vio::Intri+");
  sub_20E8D1238(&v30, 42, 1uLL);
  if (v31 >= 0)
    v12 = (const std::string::value_type *)&v30;
  else
    v12 = v30;
  if (v31 >= 0)
    v13 = HIBYTE(v31);
  else
    v13 = v31;
  std::string::append(a1, v12, v13);
  if (SHIBYTE(v31) < 0)
    operator delete(v30);
  std::string::append(a1, ", ", 2uLL);
  v14 = operator new(0x30uLL);
  v30 = (char *)v14;
  v31 = *(_OWORD *)&v29[48];
  *v14 = *(_OWORD *)&v29[32];
  v14[1] = *(_OWORD *)&v29[16];
  *(_OWORD *)((char *)v14 + 27) = *(_OWORD *)v29;
  *((_BYTE *)v14 + 43) = 0;
  sub_20E8D1238(&v30, 42, 1uLL);
  if (v31 >= 0)
    v15 = (const std::string::value_type *)&v30;
  else
    v15 = v30;
  if (v31 >= 0)
    v16 = HIBYTE(v31);
  else
    v16 = v31;
  std::string::append(a1, v15, v16);
  if (SHIBYTE(v31) < 0)
    operator delete(v30);
  std::string::append(a1, ", ", 2uLL);
  v30 = (char *)operator new(0x38uLL);
  *(_WORD *)&v29[50] = 0;
  *(_DWORD *)&v29[52] = 0;
  *(_QWORD *)&v29[56] = 0x8000000000000038;
  v31 = xmmword_2102DC7C0;
  strcpy(v30, "cv3d::vio::RadialDistortionCalibVariable<double>]");
  strcpy(v29, "Variable<double>lDistortionCalibcv3d::vio::Radia1");
  sub_20E8D1238(&v30, 48, 1uLL);
  if (v31 >= 0)
    v17 = (const std::string::value_type *)&v30;
  else
    v17 = v30;
  if (v31 >= 0)
    v18 = HIBYTE(v31);
  else
    v18 = v31;
  std::string::append(a1, v17, v18);
  if (SHIBYTE(v31) < 0)
    operator delete(v30);
  std::string::append(a1, ", ", 2uLL);
  v19 = (char *)operator new(0x38uLL);
  v30 = v19;
  v31 = *(_OWORD *)&v29[48];
  *((_WORD *)v19 + 24) = 93;
  *(_OWORD *)v19 = *(_OWORD *)&v29[32];
  *((_OWORD *)v19 + 1) = *(_OWORD *)&v29[16];
  *((_OWORD *)v19 + 2) = *(_OWORD *)v29;
  sub_20E8D1238(&v30, 48, 1uLL);
  if (v31 >= 0)
    v20 = (const std::string::value_type *)&v30;
  else
    v20 = v30;
  if (v31 >= 0)
    v21 = HIBYTE(v31);
  else
    v21 = v31;
  std::string::append(a1, v20, v21);
  if (SHIBYTE(v31) < 0)
    operator delete(v30);
  std::string::append(a1, ", ", 2uLL);
  v30 = (char *)operator new(0x30uLL);
  *(_WORD *)&v29[50] = 0;
  *(_DWORD *)&v29[52] = 0;
  *(_QWORD *)&v29[56] = 0x8000000000000030;
  v31 = xmmword_2102E3F60;
  strcpy(v30, "cv3d::vio::ExternalLensCalibVariable<double>]");
  strcpy(v29, "ariable<double>]nalLensCalibVaricv3d::vio::Exter-");
  sub_20E8D1238(&v30, 44, 1uLL);
  if (v31 >= 0)
    v22 = (const std::string::value_type *)&v30;
  else
    v22 = v30;
  if (v31 >= 0)
    v23 = HIBYTE(v31);
  else
    v23 = v31;
  std::string::append(a1, v22, v23);
  if (SHIBYTE(v31) < 0)
    operator delete(v30);
  std::string::append(a1, ", ", 2uLL);
  v24 = operator new(0x30uLL);
  v30 = (char *)v24;
  v31 = *(_OWORD *)&v29[48];
  *v24 = *(_OWORD *)&v29[32];
  v24[1] = *(_OWORD *)&v29[16];
  *(_OWORD *)((char *)v24 + 29) = *(_OWORD *)v29;
  *((_BYTE *)v24 + 45) = 0;
  sub_20E8D1238(&v30, 44, 1uLL);
  if (v31 >= 0)
    v25 = (const std::string::value_type *)&v30;
  else
    v25 = v30;
  if (v31 >= 0)
    v26 = HIBYTE(v31);
  else
    v26 = v31;
  std::string::append(a1, v25, v26);
  if (SHIBYTE(v31) < 0)
    operator delete(v30);
  std::string::append(a1, ", ", 2uLL);
  v30 = (char *)operator new(0x30uLL);
  v31 = xmmword_2102DC900;
  strcpy(v30, "cv3d::vio::VIOLandmarkDepthVariable<double>]");
  sub_20E8D1238(&v30, 43, 1uLL);
  if (v31 >= 0)
    v27 = (const std::string::value_type *)&v30;
  else
    v27 = v30;
  if (v31 >= 0)
    v28 = HIBYTE(v31);
  else
    v28 = v31;
  std::string::append(a1, v27, v28);
  if (SHIBYTE(v31) < 0)
    operator delete(v30);
}

void sub_20FB5E8C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  if (*(char *)(v2 - 17) < 0)
  {
    operator delete(*(void **)(v2 - 40));
    if ((*(char *)(v1 + 23) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v1 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

unint64_t sub_20FB5E964(uint64_t a1, int a2)
{
  BOOL v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t result;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 1616))
    v3 = 0;
  else
    v3 = a2 == 0;
  if (!v3 || !sub_20F9210FC((_QWORD *)a1))
    return 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(_QWORD *)(a1 + 1528) - *(_QWORD *)(a1 + 1520)) >> 3);
  v4 = *(_QWORD **)(a1 + 1520);
  v5 = *(_QWORD **)(a1 + 1528);
  if (v4 == v5)
    return 0;
  result = 0;
  v7 = 0;
  do
  {
    if ((*(_BYTE *)(v4[7] + 4) & 6) == 0
      && (*(_BYTE *)(v4[8] + 4) & 6) == 0
      && (*(_BYTE *)(v4[9] + 4) & 6) == 0
      && (*(_BYTE *)(v4[10] + 4) & 6) == 0
      && (*(_BYTE *)(v4[11] + 4) & 6) == 0
      && (*(_BYTE *)(v4[12] + 4) & 6) == 0
      && (*(_BYTE *)(v4[13] + 4) & 6) == 0)
    {
      result = ++v7;
    }
    v4 += 23;
  }
  while (v4 != v5);
  return result;
}

_QWORD *sub_20FB5EA70(uint64_t a1, _QWORD *a2)
{
  _OWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  const std::string::value_type *v9;
  std::string::size_type v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  const std::string::value_type *v23;
  std::string::size_type v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  std::string *v29;
  std::string::size_type size;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _OWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  void *v41;
  const std::string::value_type *v42;
  std::string::size_type v43;
  _OWORD *v44;
  const std::string::value_type *v45;
  std::string::size_type v46;
  _OWORD *v47;
  const std::string::value_type *v48;
  std::string::size_type v49;
  const std::string::value_type *v50;
  std::string::size_type v51;
  std::string *v52;
  std::string::size_type v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _OWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  const std::string::value_type *v63;
  std::string::size_type v64;
  void *v65;
  const std::string::value_type *v66;
  std::string::size_type v67;
  _OWORD *v68;
  const std::string::value_type *v69;
  std::string::size_type v70;
  _OWORD *v71;
  const std::string::value_type *v72;
  std::string::size_type v73;
  _OWORD *v74;
  const std::string::value_type *v75;
  std::string::size_type v76;
  std::string *v77;
  std::string::size_type v78;
  _QWORD *v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  _QWORD *v119;
  _OWORD *v120;
  uint64_t v121;
  _QWORD *v122;
  _QWORD *v123;
  _QWORD *v124;
  const std::string::value_type *v125;
  std::string::size_type v126;
  char *v127;
  const std::string::value_type *v128;
  std::string::size_type v129;
  std::string *v130;
  std::string::size_type v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  _QWORD *v170;
  _QWORD *v171;
  _OWORD *v172;
  uint64_t v173;
  _QWORD *v174;
  _QWORD *v175;
  _QWORD *v176;
  const std::string::value_type *v177;
  std::string::size_type v178;
  _OWORD *v179;
  const std::string::value_type *v180;
  std::string::size_type v181;
  std::string *v182;
  std::string::size_type v183;
  _QWORD *v184;
  _QWORD *v185;
  _QWORD *v186;
  _QWORD *v187;
  _OWORD *v188;
  uint64_t v189;
  _QWORD *v190;
  _QWORD *v191;
  _QWORD *v192;
  _OWORD *v193;
  const std::string::value_type *v194;
  std::string::size_type v195;
  char *v196;
  const std::string::value_type *v197;
  std::string::size_type v198;
  const std::string::value_type *v199;
  std::string::size_type v200;
  std::string *v201;
  std::string::size_type v202;
  _QWORD *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  _QWORD *v240;
  _QWORD *v241;
  _QWORD *v242;
  _OWORD *v243;
  uint64_t v244;
  _QWORD *v245;
  _QWORD *v246;
  _QWORD *v247;
  void *v248;
  const std::string::value_type *v249;
  std::string::size_type v250;
  const std::string::value_type *v251;
  std::string::size_type v252;
  _OWORD *v253;
  const std::string::value_type *v254;
  std::string::size_type v255;
  _OWORD *v256;
  const std::string::value_type *v257;
  std::string::size_type v258;
  _OWORD *v259;
  const std::string::value_type *v260;
  std::string::size_type v261;
  std::string *v262;
  std::string::size_type v263;
  _QWORD *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  _QWORD *v301;
  _QWORD *v302;
  _QWORD *v303;
  _OWORD *v304;
  uint64_t v305;
  _QWORD *v306;
  _QWORD *v307;
  _QWORD *v308;
  void *v309;
  const std::string::value_type *v310;
  std::string::size_type v311;
  const std::string::value_type *v312;
  std::string::size_type v313;
  _OWORD *v314;
  const std::string::value_type *v315;
  std::string::size_type v316;
  _OWORD *v317;
  const std::string::value_type *v318;
  std::string::size_type v319;
  _OWORD *v320;
  const std::string::value_type *v321;
  std::string::size_type v322;
  std::string *v323;
  std::string::size_type v324;
  _QWORD *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  _QWORD *v362;
  _QWORD *v363;
  _QWORD *v364;
  _OWORD *v365;
  uint64_t v366;
  _QWORD *v367;
  _QWORD *v368;
  _QWORD *v369;
  const std::string::value_type *v370;
  std::string::size_type v371;
  _OWORD *v372;
  const std::string::value_type *v373;
  std::string::size_type v374;
  _OWORD *v375;
  const std::string::value_type *v376;
  std::string::size_type v377;
  _OWORD *v378;
  const std::string::value_type *v379;
  std::string::size_type v380;
  std::string *v381;
  std::string::size_type v382;
  _QWORD *v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  _QWORD *v420;
  _QWORD *v421;
  _QWORD *v422;
  _OWORD *v423;
  uint64_t v424;
  _QWORD *v425;
  _QWORD *v426;
  _QWORD *v427;
  const std::string::value_type *v428;
  std::string::size_type v429;
  std::string *v430;
  std::string::size_type v431;
  _QWORD *v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  _QWORD *v469;
  _QWORD *v470;
  _QWORD *v471;
  _OWORD *v472;
  uint64_t v473;
  _QWORD *v474;
  _QWORD *v475;
  _QWORD *v476;
  _OWORD *v477;
  const std::string::value_type *v478;
  std::string::size_type v479;
  _OWORD *v480;
  const std::string::value_type *v481;
  std::string::size_type v482;
  std::string *v483;
  std::string::size_type v484;
  _QWORD *v485;
  _QWORD *v486;
  _QWORD *v487;
  _QWORD *v488;
  _OWORD v490[3];
  _OWORD v491[2];
  __int128 v492;
  _BYTE v493[48];
  _OWORD v494[3];
  __int128 v495;
  _BYTE v496[48];
  __int128 v497;
  _BYTE v498[112];
  _BYTE v499[96];
  _BYTE v500[80];
  std::string v501;
  _OWORD v502[3];

  sub_20E86A980(a2, (uint64_t)"Variable stats:\n", 16);
  *(_QWORD *)&v502[0] = operator new(0x28uLL);
  *(_OWORD *)((char *)v502 + 8) = xmmword_2102DCA10;
  strcpy(*(char **)&v502[0], "cv3d::vio::VIOPoseVariable<double>]");
  sub_20E8D1238(v502, 34, 1uLL);
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v4 = v502;
  else
    v4 = *(_OWORD **)&v502[0];
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v5 = BYTE7(v502[1]);
  else
    v5 = *((_QWORD *)&v502[0] + 1);
  v6 = sub_20E86A980(a2, (uint64_t)v4, v5);
  sub_20E86A980(v6, (uint64_t)": ", 2);
  v7 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v7, (uint64_t)"D variable\n", 11);
  if (SBYTE7(v502[1]) < 0)
    operator delete(*(void **)&v502[0]);
  v8 = sub_20E86A980(a2, (uint64_t)"\treferenced by ", 15);
  memset(&v501, 0, sizeof(v501));
  *(_QWORD *)&v502[0] = operator new(0x28uLL);
  v495 = xmmword_2102DCA20;
  *(_OWORD *)((char *)v502 + 8) = xmmword_2102DCA20;
  qmemcpy(v491, "atePriorFactor<dcv3d::vio::VIOSt", sizeof(v491));
  strcpy(*(char **)&v502[0], "cv3d::vio::VIOStatePriorFactor<double>]");
  sub_20E8D1238(v502, 38, 1uLL);
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v9 = (const std::string::value_type *)v502;
  else
    v9 = *(const std::string::value_type **)&v502[0];
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v10 = BYTE7(v502[1]);
  else
    v10 = *((_QWORD *)&v502[0] + 1);
  std::string::append(&v501, v9, v10);
  if (SBYTE7(v502[1]) < 0)
    operator delete(*(void **)&v502[0]);
  std::string::append(&v501, ", ", 2uLL);
  *(_QWORD *)&v502[0] = operator new(0x28uLL);
  *(_OWORD *)((char *)v502 + 8) = xmmword_2102DB450;
  strcpy(*(char **)&v502[0], "cv3d::vio::VIOPosePriorFactor<double>]");
  sub_20E8D1238(v502, 37, 1uLL);
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v11 = (const std::string::value_type *)v502;
  else
    v11 = *(const std::string::value_type **)&v502[0];
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v12 = BYTE7(v502[1]);
  else
    v12 = *((_QWORD *)&v502[0] + 1);
  std::string::append(&v501, v11, v12);
  if (SBYTE7(v502[1]) < 0)
    operator delete(*(void **)&v502[0]);
  std::string::append(&v501, ", ", 2uLL);
  *(_QWORD *)&v502[0] = operator new(0x30uLL);
  v497 = xmmword_2102E3F60;
  *(_OWORD *)((char *)v502 + 8) = xmmword_2102E3F60;
  strcpy(*(char **)&v502[0], "cv3d::vio::VIOIMUWithDeltaTimeFactor<double>]");
  qmemcpy(v494, "eFactor<double>]UWithDeltaTimeFacv3d::vio::VIOIM", sizeof(v494));
  sub_20E8D1238(v502, 44, 1uLL);
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v13 = (const std::string::value_type *)v502;
  else
    v13 = *(const std::string::value_type **)&v502[0];
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v14 = BYTE7(v502[1]);
  else
    v14 = *((_QWORD *)&v502[0] + 1);
  std::string::append(&v501, v13, v14);
  if (SBYTE7(v502[1]) < 0)
    operator delete(*(void **)&v502[0]);
  std::string::append(&v501, ", ", 2uLL);
  *(_QWORD *)&v502[0] = operator new(0x30uLL);
  v492 = xmmword_2102DC900;
  *(_OWORD *)((char *)v502 + 8) = xmmword_2102DC900;
  strcpy(*(char **)&v502[0], "cv3d::vio::VIOPreintegrateIMUFactor<double>]");
  qmemcpy(v490, "UFactor<double>]eintegrateIMUFaccv3d::vio::VIOPr", sizeof(v490));
  sub_20E8D1238(v502, 43, 1uLL);
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v15 = (const std::string::value_type *)v502;
  else
    v15 = *(const std::string::value_type **)&v502[0];
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v16 = BYTE7(v502[1]);
  else
    v16 = *((_QWORD *)&v502[0] + 1);
  std::string::append(&v501, v15, v16);
  if (SBYTE7(v502[1]) < 0)
    operator delete(*(void **)&v502[0]);
  std::string::append(&v501, ", ", 2uLL);
  *(_QWORD *)&v502[0] = operator new(0x30uLL);
  *(_OWORD *)((char *)v502 + 8) = v497;
  strcpy(*(char **)&v502[0], "cv3d::vio::VIOZeroDisplacementFactor<double>]");
  sub_20E8D1238(v502, 44, 1uLL);
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v17 = (const std::string::value_type *)v502;
  else
    v17 = *(const std::string::value_type **)&v502[0];
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v18 = BYTE7(v502[1]);
  else
    v18 = *((_QWORD *)&v502[0] + 1);
  std::string::append(&v501, v17, v18);
  if (SBYTE7(v502[1]) < 0)
    operator delete(*(void **)&v502[0]);
  std::string::append(&v501, ", ", 2uLL);
  *(_QWORD *)&v502[0] = operator new(0x30uLL);
  *(_WORD *)&v496[34] = 0;
  *(_DWORD *)&v496[36] = 0;
  *(_QWORD *)&v496[40] = 0x8000000000000030;
  *(_OWORD *)((char *)v502 + 8) = xmmword_2102DC8D0;
  strcpy(v496, "pLandmarkFactor<cv3d::vio::VIOMa(");
  strcpy(*(char **)&v502[0], "cv3d::vio::VIOMapLandmarkFactor<double>]");
  sub_20E8D1238(v502, 39, 1uLL);
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v19 = (const std::string::value_type *)v502;
  else
    v19 = *(const std::string::value_type **)&v502[0];
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v20 = BYTE7(v502[1]);
  else
    v20 = *((_QWORD *)&v502[0] + 1);
  std::string::append(&v501, v19, v20);
  if (SBYTE7(v502[1]) < 0)
    operator delete(*(void **)&v502[0]);
  std::string::append(&v501, ", ", 2uLL);
  *(_QWORD *)&v502[0] = operator new(0x28uLL);
  *(_WORD *)&v493[34] = 0;
  *(_DWORD *)&v493[36] = 0;
  *(_QWORD *)&v493[40] = 0x8000000000000028;
  *(_OWORD *)((char *)v502 + 8) = xmmword_2102DC8F0;
  strcpy(v493, "aneFactor<doublecv3d::vio::VIOPl\"");
  strcpy(*(char **)&v502[0], "cv3d::vio::VIOPlaneFactor<double>]");
  sub_20E8D1238(v502, 33, 1uLL);
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v21 = (const std::string::value_type *)v502;
  else
    v21 = *(const std::string::value_type **)&v502[0];
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v22 = BYTE7(v502[1]);
  else
    v22 = *((_QWORD *)&v502[0] + 1);
  std::string::append(&v501, v21, v22);
  if (SBYTE7(v502[1]) < 0)
    operator delete(*(void **)&v502[0]);
  std::string::append(&v501, ", ", 2uLL);
  *(_QWORD *)&v502[0] = operator new(0x50uLL);
  *(_WORD *)&v499[82] = 0;
  *(_DWORD *)&v499[84] = 0;
  *(_QWORD *)&v499[88] = 0x8000000000000050;
  *(_OWORD *)((char *)v502 + 8) = xmmword_2102DB430;
  strcpy(v499, "cv3d::vio::VIOLandmarkDepthSqrtCDepth::Regular>]le, true, Depth:auchyFactor<doubJ");
  strcpy(*(char **)&v502[0], "cv3d::vio::VIOLandmarkDepthSqrtCauchyFactor<double, true, Depth::Regular>]");
  sub_20E8D1238(v502, 73, 1uLL);
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v23 = (const std::string::value_type *)v502;
  else
    v23 = *(const std::string::value_type **)&v502[0];
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v24 = BYTE7(v502[1]);
  else
    v24 = *((_QWORD *)&v502[0] + 1);
  std::string::append(&v501, v23, v24);
  if (SBYTE7(v502[1]) < 0)
    operator delete(*(void **)&v502[0]);
  std::string::append(&v501, ", ", 2uLL);
  *(_QWORD *)&v502[0] = operator new(0x40uLL);
  *(_WORD *)&v500[66] = 0;
  *(_DWORD *)&v500[68] = 0;
  *(_QWORD *)&v500[72] = 0x8000000000000040;
  *(_OWORD *)((char *)v502 + 8) = xmmword_2102DBC30;
  strcpy(*(char **)&v502[0], "cv3d::vio::VIOLandmarkCartesianSqrtCauchyFactor<double, true>]");
  strcpy(v500, "r<double, true>]qrtCauchyFactor<ndmarkCartesianScv3d::vio::VIOLa>");
  sub_20E8D1238(v502, 61, 1uLL);
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v25 = (const std::string::value_type *)v502;
  else
    v25 = *(const std::string::value_type **)&v502[0];
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v26 = BYTE7(v502[1]);
  else
    v26 = *((_QWORD *)&v502[0] + 1);
  std::string::append(&v501, v25, v26);
  if (SBYTE7(v502[1]) < 0)
    operator delete(*(void **)&v502[0]);
  std::string::append(&v501, ", ", 2uLL);
  *(_QWORD *)&v502[0] = operator new(0x60uLL);
  *(_WORD *)&v498[98] = 0;
  *(_DWORD *)&v498[100] = 0;
  *(_QWORD *)&v498[104] = 0x8000000000000060;
  *(_OWORD *)((char *)v502 + 8) = xmmword_2103B8460;
  strcpy(v498, "ndmarkDepthSqrtCcv3d::vio::VIOLasurement::Line>]:Regular, Measurle, true, Depth:auchyFactor<doub]");
  strcpy(*(char **)&v502[0], "cv3d::vio::VIOLandmarkDepthSqrtCauchyFactor<double, true, Depth::Regular, Measurement::Line>]");
  sub_20E8D1238(v502, 92, 1uLL);
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v27 = (const std::string::value_type *)v502;
  else
    v27 = *(const std::string::value_type **)&v502[0];
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v28 = BYTE7(v502[1]);
  else
    v28 = *((_QWORD *)&v502[0] + 1);
  std::string::append(&v501, v27, v28);
  if (SBYTE7(v502[1]) < 0)
    operator delete(*(void **)&v502[0]);
  if ((v501.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v29 = &v501;
  else
    v29 = (std::string *)v501.__r_.__value_.__r.__words[0];
  if ((v501.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v501.__r_.__value_.__r.__words[2]);
  else
    size = v501.__r_.__value_.__l.__size_;
  v31 = sub_20E86A980(v8, (uint64_t)v29, size);
  sub_20E86A980(v31, (uint64_t)"\n", 1);
  v32 = (_QWORD *)(a1 + 5168);
  if (SHIBYTE(v501.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v501.__r_.__value_.__l.__data_);
  sub_20E86A980(a2, (uint64_t)"\tthere are ", 11);
  sub_20F921D44(a1 + 5168, 0);
  v33 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v33, (uint64_t)" present in the system\n", 23);
  sub_20E86A980(a2, (uint64_t)"\tout of that ", 13);
  sub_20FB675CC(a1 + 5168, 0);
  v34 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v34, (uint64_t)" are free (", 11);
  sub_20FB675CC(a1 + 5168, 0);
  v35 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v35, (uint64_t)" DoF total)\n", 12);
  *(_QWORD *)&v502[0] = operator new(0x38uLL);
  *(_OWORD *)((char *)v502 + 8) = xmmword_2102DCA50;
  strcpy(*(char **)&v502[0], "cv3d::vio::VIOIMUVelocityBiasesVariable<double>]");
  sub_20E8D1238(v502, 47, 1uLL);
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v36 = v502;
  else
    v36 = *(_OWORD **)&v502[0];
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v37 = BYTE7(v502[1]);
  else
    v37 = *((_QWORD *)&v502[0] + 1);
  v38 = sub_20E86A980(a2, (uint64_t)v36, v37);
  sub_20E86A980(v38, (uint64_t)": ", 2);
  v39 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v39, (uint64_t)"D variable\n", 11);
  if (SBYTE7(v502[1]) < 0)
    operator delete(*(void **)&v502[0]);
  v40 = sub_20E86A980(a2, (uint64_t)"\treferenced by ", 15);
  memset(&v501, 0, sizeof(v501));
  v41 = operator new(0x28uLL);
  *(_QWORD *)&v502[0] = v41;
  *(_OWORD *)((char *)v502 + 8) = v495;
  *(_OWORD *)v41 = v491[1];
  *((_OWORD *)v41 + 1) = v491[0];
  strcpy((char *)v41 + 31, "double>]");
  sub_20E8D1238(v502, 38, 1uLL);
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v42 = (const std::string::value_type *)v502;
  else
    v42 = *(const std::string::value_type **)&v502[0];
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v43 = BYTE7(v502[1]);
  else
    v43 = *((_QWORD *)&v502[0] + 1);
  std::string::append(&v501, v42, v43);
  if (SBYTE7(v502[1]) < 0)
    operator delete(*(void **)&v502[0]);
  std::string::append(&v501, ", ", 2uLL);
  v44 = operator new(0x30uLL);
  *(_QWORD *)&v502[0] = v44;
  *(_OWORD *)((char *)v502 + 8) = v497;
  *v44 = v494[2];
  v44[1] = v494[1];
  *(_OWORD *)((char *)v44 + 29) = v494[0];
  *((_BYTE *)v44 + 45) = 0;
  sub_20E8D1238(v502, 44, 1uLL);
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v45 = (const std::string::value_type *)v502;
  else
    v45 = *(const std::string::value_type **)&v502[0];
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v46 = BYTE7(v502[1]);
  else
    v46 = *((_QWORD *)&v502[0] + 1);
  std::string::append(&v501, v45, v46);
  if (SBYTE7(v502[1]) < 0)
    operator delete(*(void **)&v502[0]);
  std::string::append(&v501, ", ", 2uLL);
  v47 = operator new(0x30uLL);
  *(_QWORD *)&v502[0] = v47;
  *(_OWORD *)((char *)v502 + 8) = v492;
  *v47 = v490[2];
  v47[1] = v490[1];
  *(_OWORD *)((char *)v47 + 28) = v490[0];
  *((_BYTE *)v47 + 44) = 0;
  sub_20E8D1238(v502, 43, 1uLL);
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v48 = (const std::string::value_type *)v502;
  else
    v48 = *(const std::string::value_type **)&v502[0];
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v49 = BYTE7(v502[1]);
  else
    v49 = *((_QWORD *)&v502[0] + 1);
  std::string::append(&v501, v48, v49);
  if (SBYTE7(v502[1]) < 0)
    operator delete(*(void **)&v502[0]);
  std::string::append(&v501, ", ", 2uLL);
  *(_QWORD *)&v502[0] = operator new(0x30uLL);
  v491[1] = xmmword_2102DCA00;
  *(_OWORD *)((char *)v502 + 8) = xmmword_2102DCA00;
  strcpy(*(char **)&v502[0], "cv3d::vio::VIOZeroVelocityFactor<double>]");
  sub_20E8D1238(v502, 40, 1uLL);
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v50 = (const std::string::value_type *)v502;
  else
    v50 = *(const std::string::value_type **)&v502[0];
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v51 = BYTE7(v502[1]);
  else
    v51 = *((_QWORD *)&v502[0] + 1);
  std::string::append(&v501, v50, v51);
  if (SBYTE7(v502[1]) < 0)
    operator delete(*(void **)&v502[0]);
  if ((v501.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v52 = &v501;
  else
    v52 = (std::string *)v501.__r_.__value_.__r.__words[0];
  if ((v501.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v53 = HIBYTE(v501.__r_.__value_.__r.__words[2]);
  else
    v53 = v501.__r_.__value_.__l.__size_;
  v54 = sub_20E86A980(v40, (uint64_t)v52, v53);
  sub_20E86A980(v54, (uint64_t)"\n", 1);
  if (SHIBYTE(v501.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v501.__r_.__value_.__l.__data_);
  sub_20E86A980(a2, (uint64_t)"\tthere are ", 11);
  sub_20F9222F0(a1 + 5168, 0);
  v55 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v55, (uint64_t)" present in the system\n", 23);
  sub_20E86A980(a2, (uint64_t)"\tout of that ", 13);
  sub_20FB67F20(a1 + 5168, 0);
  v56 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v56, (uint64_t)" are free (", 11);
  sub_20FB67F20(a1 + 5168, 0);
  v57 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v57, (uint64_t)" DoF total)\n", 12);
  *(_QWORD *)&v502[0] = operator new(0x30uLL);
  *(_OWORD *)((char *)v502 + 8) = v491[1];
  strcpy(*(char **)&v502[0], "cv3d::vio::VIOExtrinsicsVariable<double>]");
  sub_20E8D1238(v502, 40, 1uLL);
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v58 = v502;
  else
    v58 = *(_OWORD **)&v502[0];
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v59 = BYTE7(v502[1]);
  else
    v59 = *((_QWORD *)&v502[0] + 1);
  v60 = sub_20E86A980(a2, (uint64_t)v58, v59);
  sub_20E86A980(v60, (uint64_t)": ", 2);
  v61 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v61, (uint64_t)"D variable\n", 11);
  if (SBYTE7(v502[1]) < 0)
    operator delete(*(void **)&v502[0]);
  v62 = sub_20E86A980(a2, (uint64_t)"\treferenced by ", 15);
  memset(&v501, 0, sizeof(v501));
  *(_QWORD *)&v502[0] = operator new(0x60uLL);
  v491[1] = xmmword_2103B84A0;
  *(_OWORD *)((char *)v502 + 8) = xmmword_2103B84A0;
  strcpy(*(char **)&v502[0], "cv3d::vio::VIOCameraExtrinsicPriorFactor<double, cv3d::vio::VIOExtrinsicsVariable<double>>]");
  sub_20E8D1238(v502, 90, 1uLL);
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v63 = (const std::string::value_type *)v502;
  else
    v63 = *(const std::string::value_type **)&v502[0];
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v64 = BYTE7(v502[1]);
  else
    v64 = *((_QWORD *)&v502[0] + 1);
  std::string::append(&v501, v63, v64);
  if (SBYTE7(v502[1]) < 0)
    operator delete(*(void **)&v502[0]);
  std::string::append(&v501, ", ", 2uLL);
  v65 = operator new(0x30uLL);
  *(_QWORD *)&v502[0] = v65;
  *(_OWORD *)((char *)v502 + 8) = *(_OWORD *)&v496[32];
  *(_OWORD *)v65 = *(_OWORD *)&v496[16];
  *((_OWORD *)v65 + 1) = *(_OWORD *)v496;
  strcpy((char *)v65 + 32, "double>]");
  sub_20E8D1238(v502, 39, 1uLL);
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v66 = (const std::string::value_type *)v502;
  else
    v66 = *(const std::string::value_type **)&v502[0];
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v67 = BYTE7(v502[1]);
  else
    v67 = *((_QWORD *)&v502[0] + 1);
  std::string::append(&v501, v66, v67);
  if (SBYTE7(v502[1]) < 0)
    operator delete(*(void **)&v502[0]);
  std::string::append(&v501, ", ", 2uLL);
  v68 = operator new(0x50uLL);
  *(_QWORD *)&v502[0] = v68;
  *(_OWORD *)((char *)v502 + 8) = *(_OWORD *)&v499[80];
  v68[2] = *(_OWORD *)&v499[64];
  v68[3] = *(_OWORD *)&v499[48];
  *(_OWORD *)((char *)v68 + 58) = *(_OWORD *)&v499[32];
  *v68 = *(_OWORD *)v499;
  v68[1] = *(_OWORD *)&v499[16];
  *((_BYTE *)v68 + 74) = 0;
  sub_20E8D1238(v502, 73, 1uLL);
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v69 = (const std::string::value_type *)v502;
  else
    v69 = *(const std::string::value_type **)&v502[0];
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v70 = BYTE7(v502[1]);
  else
    v70 = *((_QWORD *)&v502[0] + 1);
  std::string::append(&v501, v69, v70);
  if (SBYTE7(v502[1]) < 0)
    operator delete(*(void **)&v502[0]);
  std::string::append(&v501, ", ", 2uLL);
  v71 = operator new(0x40uLL);
  *(_QWORD *)&v502[0] = v71;
  *(_OWORD *)((char *)v502 + 8) = *(_OWORD *)&v500[64];
  *v71 = *(_OWORD *)&v500[48];
  v71[1] = *(_OWORD *)&v500[32];
  v71[2] = *(_OWORD *)&v500[16];
  *(_OWORD *)((char *)v71 + 46) = *(_OWORD *)v500;
  *((_BYTE *)v71 + 62) = 0;
  sub_20E8D1238(v502, 61, 1uLL);
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v72 = (const std::string::value_type *)v502;
  else
    v72 = *(const std::string::value_type **)&v502[0];
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v73 = BYTE7(v502[1]);
  else
    v73 = *((_QWORD *)&v502[0] + 1);
  std::string::append(&v501, v72, v73);
  if (SBYTE7(v502[1]) < 0)
    operator delete(*(void **)&v502[0]);
  std::string::append(&v501, ", ", 2uLL);
  v74 = operator new(0x60uLL);
  *(_QWORD *)&v502[0] = v74;
  *(_OWORD *)((char *)v502 + 8) = *(_OWORD *)&v498[96];
  v74[2] = *(_OWORD *)&v498[80];
  v74[3] = *(_OWORD *)&v498[64];
  v74[4] = *(_OWORD *)&v498[48];
  *(_OWORD *)((char *)v74 + 77) = *(_OWORD *)&v498[32];
  *v74 = *(_OWORD *)&v498[16];
  v74[1] = *(_OWORD *)v498;
  *((_BYTE *)v74 + 93) = 0;
  sub_20E8D1238(v502, 92, 1uLL);
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v75 = (const std::string::value_type *)v502;
  else
    v75 = *(const std::string::value_type **)&v502[0];
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v76 = BYTE7(v502[1]);
  else
    v76 = *((_QWORD *)&v502[0] + 1);
  std::string::append(&v501, v75, v76);
  if (SBYTE7(v502[1]) < 0)
    operator delete(*(void **)&v502[0]);
  if ((v501.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v77 = &v501;
  else
    v77 = (std::string *)v501.__r_.__value_.__r.__words[0];
  if ((v501.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v78 = HIBYTE(v501.__r_.__value_.__r.__words[2]);
  else
    v78 = v501.__r_.__value_.__l.__size_;
  v79 = sub_20E86A980(v62, (uint64_t)v77, v78);
  sub_20E86A980(v79, (uint64_t)"\n", 1);
  if (SHIBYTE(v501.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v501.__r_.__value_.__l.__data_);
  sub_20E86A980(a2, (uint64_t)"\tthere are ", 11);
  v80 = (_BYTE *)(a1 + 6760);
  if (!*(_BYTE *)(a1 + 6760))
  {
    memset(v502, 0, 44);
    if (sub_20F8DEE48((_QWORD *)(a1 + 5168), (int *)v502, &v501, 1))
    {
      *(_QWORD *)(a1 + 7568) = *(_QWORD *)(a1 + 7560);
      *(_QWORD *)(a1 + 7592) = *(_QWORD *)(a1 + 7584);
      *(_QWORD *)(a1 + 7616) = *(_QWORD *)(a1 + 7608);
      *(_QWORD *)(a1 + 7640) = *(_QWORD *)(a1 + 7632);
      *(_QWORD *)(a1 + 7664) = *(_QWORD *)(a1 + 7656);
      *(_QWORD *)(a1 + 7688) = *(_QWORD *)(a1 + 7680);
      *(_QWORD *)(a1 + 7712) = *(_QWORD *)(a1 + 7704);
      *(_QWORD *)(a1 + 7736) = *(_QWORD *)(a1 + 7728);
      *(_QWORD *)(a1 + 7760) = *(_QWORD *)(a1 + 7752);
      *(_QWORD *)(a1 + 7784) = *(_QWORD *)(a1 + 7776);
      *(_QWORD *)(a1 + 7808) = *(_QWORD *)(a1 + 7800);
      v81 = *(_QWORD *)(a1 + 6232);
      v82 = *(_QWORD *)(a1 + 6240);
      while (v81 != v82)
      {
        v83 = *(_QWORD *)(v81 + 208);
        if (*(_BYTE *)(v81 + 496)
          || (*(_BYTE *)(v83 + 4) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v81 + 216) + 4) & 6) != 0)
        {
          sub_20F394A20(a1 + 7560, v83);
          sub_20F3D35E0((_QWORD *)(a1 + 7560), *(_QWORD *)(v81 + 216));
        }
        v81 += 504;
      }
      v84 = *(_QWORD *)(a1 + 6256);
      v85 = *(_QWORD *)(a1 + 6264);
      while (v84 != v85)
      {
        v86 = *(_QWORD *)(v84 + 136);
        if (*(_BYTE *)(v84 + 272) || (*(_BYTE *)(v86 + 4) & 6) != 0)
          sub_20F394A20(a1 + 7560, v86);
        v84 += 280;
      }
      v87 = *(_QWORD *)(a1 + 6280);
      v88 = *(_QWORD *)(a1 + 6288);
      while (v87 != v88)
      {
        v89 = *(_QWORD *)(v87 + 136);
        if (*(_BYTE *)(v87 + 272) || (*(_BYTE *)(v89 + 4) & 6) != 0)
          sub_20F599C88((_QWORD *)(a1 + 7560), v89);
        v87 += 280;
      }
      v90 = *(_QWORD *)(a1 + 6304);
      v91 = *(_QWORD *)(a1 + 6312);
      while (v90 != v91)
      {
        v92 = *(_QWORD *)(v90 + 136);
        if (*(_BYTE *)(v90 + 272) || (*(_BYTE *)(v92 + 4) & 6) != 0)
          sub_20F59A480((_QWORD *)(a1 + 7560), v92);
        v90 += 280;
      }
      v93 = *(_QWORD *)(a1 + 6328);
      v94 = *(_QWORD *)(a1 + 6336);
      while (v93 != v94)
      {
        v95 = *(_QWORD *)(v93 + 64);
        if (*(_BYTE *)(v93 + 152) || (*(_BYTE *)(v95 + 4) & 6) != 0)
          sub_20F59A2E8((_QWORD *)(a1 + 7560), v95);
        v93 += 160;
      }
      sub_20F8DF7FC(*(_QWORD *)(a1 + 6352), *(_QWORD *)(a1 + 6360), (_QWORD *)(a1 + 7560));
      sub_20F5B85BC(*(_QWORD *)(a1 + 6376), *(_QWORD *)(a1 + 6384), (_QWORD *)(a1 + 7560));
      v96 = *(_QWORD *)(a1 + 6400);
      v97 = *(_QWORD *)(a1 + 6408);
      while (v96 != v97)
      {
        v98 = *(_QWORD *)(v96 + 48);
        if (*(_BYTE *)(v96 + 136) || (*(_BYTE *)(v98 + 4) & 6) != 0)
          sub_20F3D35E0((_QWORD *)(a1 + 7560), v98);
        v96 += 144;
      }
      v99 = *(_QWORD *)(a1 + 6424);
      v100 = *(_QWORD *)(a1 + 6432);
      while (v99 != v100)
      {
        v101 = *(_QWORD *)(v99 + 48);
        if (*(_BYTE *)(v99 + 144)
          || (*(_BYTE *)(v101 + 4) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v99 + 56) + 4) & 6) != 0)
        {
          sub_20F394A20(a1 + 7560, v101);
          sub_20F394A20(a1 + 7560, *(_QWORD *)(v99 + 56));
        }
        v99 += 152;
      }
      sub_20F8DF748(*(_QWORD *)(a1 + 6448), *(_QWORD *)(a1 + 6456), (_QWORD *)(a1 + 7560));
      sub_20F8DF65C(*(_QWORD *)(a1 + 6472), *(_QWORD *)(a1 + 6480), (_QWORD *)(a1 + 7560));
      v102 = *(_QWORD *)(a1 + 6496);
      v103 = *(_QWORD *)(a1 + 6504);
      while (v102 != v103)
      {
        v104 = *(_QWORD *)(v102 + 48);
        if (*(_BYTE *)(v102 + 104) || (*(_BYTE *)(v104 + 4) & 6) != 0)
          sub_20F59A150((_QWORD *)(a1 + 7560), v104);
        v102 += 112;
      }
      v105 = *(_QWORD *)(a1 + 6520);
      v106 = *(_QWORD *)(a1 + 6528);
      while (v105 != v106)
      {
        v107 = *(_QWORD *)(v105 + 96);
        if (*(_BYTE *)(v105 + 200) || (*(_BYTE *)(v107 + 4) & 6) != 0)
          sub_20F599FB8((_QWORD *)(a1 + 7560), v107);
        v105 += 208;
      }
      v108 = *(_QWORD *)(a1 + 6544);
      v109 = *(_QWORD *)(a1 + 6552);
      while (v108 != v109)
      {
        v110 = *(_QWORD *)(v108 + 96);
        if (*(_BYTE *)(v108 + 200) || (*(_BYTE *)(v110 + 4) & 6) != 0)
          sub_20F599E20((_QWORD *)(a1 + 7560), v110);
        v108 += 208;
      }
      v111 = *(_QWORD *)(a1 + 6568);
      v112 = *(_QWORD *)(a1 + 6576);
      while (v111 != v112)
      {
        v113 = *(_QWORD *)(v111 + 80);
        if (*(_BYTE *)(v111 + 168) || (*(_BYTE *)(v113 + 4) & 6) != 0)
          sub_20F8DAC28((_QWORD *)(a1 + 7560), v113);
        v111 += 176;
      }
      v114 = *(_QWORD *)(a1 + 6592);
      v115 = *(_QWORD *)(a1 + 6600);
      while (v114 != v115)
      {
        v116 = *(_QWORD *)(v114 + 80);
        if (*(_BYTE *)(v114 + 168) || (*(_BYTE *)(v116 + 4) & 6) != 0)
          sub_20F8DADC0((_QWORD *)(a1 + 7560), v116);
        v114 += 176;
      }
      sub_20F8DF4E4(*(_QWORD *)(a1 + 6616), *(_QWORD *)(a1 + 6624), (_QWORD *)(a1 + 7560));
      sub_20F8DF3F8(*(_QWORD *)(a1 + 6640), *(_QWORD *)(a1 + 6648), (_QWORD *)(a1 + 7560));
      sub_20F8DF280(*(_QWORD *)(a1 + 6664), *(_QWORD *)(a1 + 6672), (_QWORD *)(a1 + 7560));
      sub_20F8DB0F0((_QWORD *)(a1 + 5168));
    }
  }
  v117 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v117, (uint64_t)" present in the system\n", 23);
  sub_20E86A980(a2, (uint64_t)"\tout of that ", 13);
  sub_20FB68508(a1 + 5168, 0);
  v118 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v118, (uint64_t)" are free (", 11);
  sub_20FB68508(a1 + 5168, 0);
  v119 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v119, (uint64_t)" DoF total)\n", 12);
  *(_QWORD *)&v502[0] = operator new(0x30uLL);
  *(_OWORD *)((char *)v502 + 8) = xmmword_2102DBF00;
  strcpy(*(char **)&v502[0], "cv3d::vio::VIODepthExtrinsicsVariable<double>]");
  sub_20E8D1238(v502, 45, 1uLL);
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v120 = v502;
  else
    v120 = *(_OWORD **)&v502[0];
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v121 = BYTE7(v502[1]);
  else
    v121 = *((_QWORD *)&v502[0] + 1);
  v122 = sub_20E86A980(a2, (uint64_t)v120, v121);
  sub_20E86A980(v122, (uint64_t)": ", 2);
  v123 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v123, (uint64_t)"D variable\n", 11);
  if (SBYTE7(v502[1]) < 0)
    operator delete(*(void **)&v502[0]);
  v124 = sub_20E86A980(a2, (uint64_t)"\treferenced by ", 15);
  memset(&v501, 0, sizeof(v501));
  *(_QWORD *)&v502[0] = operator new(0x68uLL);
  *(_OWORD *)((char *)v502 + 8) = xmmword_2103B8450;
  strcpy(*(char **)&v502[0], "cv3d::vio::VIOCameraExtrinsicPriorFactor<double, cv3d::vio::VIODepthExtrinsicsVariable<double>>]");
  sub_20E8D1238(v502, 95, 1uLL);
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v125 = (const std::string::value_type *)v502;
  else
    v125 = *(const std::string::value_type **)&v502[0];
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v126 = BYTE7(v502[1]);
  else
    v126 = *((_QWORD *)&v502[0] + 1);
  std::string::append(&v501, v125, v126);
  if (SBYTE7(v502[1]) < 0)
    operator delete(*(void **)&v502[0]);
  std::string::append(&v501, ", ", 2uLL);
  v127 = (char *)operator new(0x28uLL);
  *(_QWORD *)&v502[0] = v127;
  *(_OWORD *)((char *)v502 + 8) = *(_OWORD *)&v493[32];
  strcpy(v127 + 32, ">]");
  *(_OWORD *)v127 = *(_OWORD *)&v493[16];
  *((_OWORD *)v127 + 1) = *(_OWORD *)v493;
  sub_20E8D1238(v502, 33, 1uLL);
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v128 = (const std::string::value_type *)v502;
  else
    v128 = *(const std::string::value_type **)&v502[0];
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v129 = BYTE7(v502[1]);
  else
    v129 = *((_QWORD *)&v502[0] + 1);
  std::string::append(&v501, v128, v129);
  if (SBYTE7(v502[1]) < 0)
    operator delete(*(void **)&v502[0]);
  if ((v501.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v130 = &v501;
  else
    v130 = (std::string *)v501.__r_.__value_.__r.__words[0];
  if ((v501.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v131 = HIBYTE(v501.__r_.__value_.__r.__words[2]);
  else
    v131 = v501.__r_.__value_.__l.__size_;
  v132 = sub_20E86A980(v124, (uint64_t)v130, v131);
  sub_20E86A980(v132, (uint64_t)"\n", 1);
  if (SHIBYTE(v501.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v501.__r_.__value_.__l.__data_);
  sub_20E86A980(a2, (uint64_t)"\tforms an independent set (consider using Schur solver)\n", 56);
  sub_20E86A980(a2, (uint64_t)"\tthere are ", 11);
  if (!*v80)
  {
    memset(v502, 0, 44);
    if (sub_20F8DEE48((_QWORD *)(a1 + 5168), (int *)v502, &v501, 1))
    {
      *(_QWORD *)(a1 + 7568) = *(_QWORD *)(a1 + 7560);
      *(_QWORD *)(a1 + 7592) = *(_QWORD *)(a1 + 7584);
      *(_QWORD *)(a1 + 7616) = *(_QWORD *)(a1 + 7608);
      *(_QWORD *)(a1 + 7640) = *(_QWORD *)(a1 + 7632);
      *(_QWORD *)(a1 + 7664) = *(_QWORD *)(a1 + 7656);
      *(_QWORD *)(a1 + 7688) = *(_QWORD *)(a1 + 7680);
      *(_QWORD *)(a1 + 7712) = *(_QWORD *)(a1 + 7704);
      *(_QWORD *)(a1 + 7736) = *(_QWORD *)(a1 + 7728);
      *(_QWORD *)(a1 + 7760) = *(_QWORD *)(a1 + 7752);
      *(_QWORD *)(a1 + 7784) = *(_QWORD *)(a1 + 7776);
      *(_QWORD *)(a1 + 7808) = *(_QWORD *)(a1 + 7800);
      v133 = *(_QWORD *)(a1 + 6232);
      v134 = *(_QWORD *)(a1 + 6240);
      while (v133 != v134)
      {
        v135 = *(_QWORD *)(v133 + 208);
        if (*(_BYTE *)(v133 + 496)
          || (*(_BYTE *)(v135 + 4) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v133 + 216) + 4) & 6) != 0)
        {
          sub_20F394A20(a1 + 7560, v135);
          sub_20F3D35E0((_QWORD *)(a1 + 7560), *(_QWORD *)(v133 + 216));
        }
        v133 += 504;
      }
      v136 = *(_QWORD *)(a1 + 6256);
      v137 = *(_QWORD *)(a1 + 6264);
      while (v136 != v137)
      {
        v138 = *(_QWORD *)(v136 + 136);
        if (*(_BYTE *)(v136 + 272) || (*(_BYTE *)(v138 + 4) & 6) != 0)
          sub_20F394A20(a1 + 7560, v138);
        v136 += 280;
      }
      v139 = *(_QWORD *)(a1 + 6280);
      v140 = *(_QWORD *)(a1 + 6288);
      while (v139 != v140)
      {
        v141 = *(_QWORD *)(v139 + 136);
        if (*(_BYTE *)(v139 + 272) || (*(_BYTE *)(v141 + 4) & 6) != 0)
          sub_20F599C88((_QWORD *)(a1 + 7560), v141);
        v139 += 280;
      }
      v142 = *(_QWORD *)(a1 + 6304);
      v143 = *(_QWORD *)(a1 + 6312);
      while (v142 != v143)
      {
        v144 = *(_QWORD *)(v142 + 136);
        if (*(_BYTE *)(v142 + 272) || (*(_BYTE *)(v144 + 4) & 6) != 0)
          sub_20F59A480((_QWORD *)(a1 + 7560), v144);
        v142 += 280;
      }
      v145 = *(_QWORD *)(a1 + 6328);
      v146 = *(_QWORD *)(a1 + 6336);
      while (v145 != v146)
      {
        v147 = *(_QWORD *)(v145 + 64);
        if (*(_BYTE *)(v145 + 152) || (*(_BYTE *)(v147 + 4) & 6) != 0)
          sub_20F59A2E8((_QWORD *)(a1 + 7560), v147);
        v145 += 160;
      }
      sub_20F8DF7FC(*(_QWORD *)(a1 + 6352), *(_QWORD *)(a1 + 6360), (_QWORD *)(a1 + 7560));
      sub_20F5B85BC(*(_QWORD *)(a1 + 6376), *(_QWORD *)(a1 + 6384), (_QWORD *)(a1 + 7560));
      v148 = *(_QWORD *)(a1 + 6400);
      v149 = *(_QWORD *)(a1 + 6408);
      while (v148 != v149)
      {
        v150 = *(_QWORD *)(v148 + 48);
        if (*(_BYTE *)(v148 + 136) || (*(_BYTE *)(v150 + 4) & 6) != 0)
          sub_20F3D35E0((_QWORD *)(a1 + 7560), v150);
        v148 += 144;
      }
      v151 = *(_QWORD *)(a1 + 6424);
      v152 = *(_QWORD *)(a1 + 6432);
      while (v151 != v152)
      {
        v153 = *(_QWORD *)(v151 + 48);
        if (*(_BYTE *)(v151 + 144)
          || (*(_BYTE *)(v153 + 4) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v151 + 56) + 4) & 6) != 0)
        {
          sub_20F394A20(a1 + 7560, v153);
          sub_20F394A20(a1 + 7560, *(_QWORD *)(v151 + 56));
        }
        v151 += 152;
      }
      sub_20F8DF748(*(_QWORD *)(a1 + 6448), *(_QWORD *)(a1 + 6456), (_QWORD *)(a1 + 7560));
      sub_20F8DF65C(*(_QWORD *)(a1 + 6472), *(_QWORD *)(a1 + 6480), (_QWORD *)(a1 + 7560));
      v154 = *(_QWORD *)(a1 + 6496);
      v155 = *(_QWORD *)(a1 + 6504);
      while (v154 != v155)
      {
        v156 = *(_QWORD *)(v154 + 48);
        if (*(_BYTE *)(v154 + 104) || (*(_BYTE *)(v156 + 4) & 6) != 0)
          sub_20F59A150((_QWORD *)(a1 + 7560), v156);
        v154 += 112;
      }
      v157 = *(_QWORD *)(a1 + 6520);
      v158 = *(_QWORD *)(a1 + 6528);
      while (v157 != v158)
      {
        v159 = *(_QWORD *)(v157 + 96);
        if (*(_BYTE *)(v157 + 200) || (*(_BYTE *)(v159 + 4) & 6) != 0)
          sub_20F599FB8((_QWORD *)(a1 + 7560), v159);
        v157 += 208;
      }
      v160 = *(_QWORD *)(a1 + 6544);
      v161 = *(_QWORD *)(a1 + 6552);
      while (v160 != v161)
      {
        v162 = *(_QWORD *)(v160 + 96);
        if (*(_BYTE *)(v160 + 200) || (*(_BYTE *)(v162 + 4) & 6) != 0)
          sub_20F599E20((_QWORD *)(a1 + 7560), v162);
        v160 += 208;
      }
      v163 = *(_QWORD *)(a1 + 6568);
      v164 = *(_QWORD *)(a1 + 6576);
      while (v163 != v164)
      {
        v165 = *(_QWORD *)(v163 + 80);
        if (*(_BYTE *)(v163 + 168) || (*(_BYTE *)(v165 + 4) & 6) != 0)
          sub_20F8DAC28((_QWORD *)(a1 + 7560), v165);
        v163 += 176;
      }
      v166 = *(_QWORD *)(a1 + 6592);
      v167 = *(_QWORD *)(a1 + 6600);
      while (v166 != v167)
      {
        v168 = *(_QWORD *)(v166 + 80);
        if (*(_BYTE *)(v166 + 168) || (*(_BYTE *)(v168 + 4) & 6) != 0)
          sub_20F8DADC0((_QWORD *)(a1 + 7560), v168);
        v166 += 176;
      }
      sub_20F8DF4E4(*(_QWORD *)(a1 + 6616), *(_QWORD *)(a1 + 6624), (_QWORD *)(a1 + 7560));
      sub_20F8DF3F8(*(_QWORD *)(a1 + 6640), *(_QWORD *)(a1 + 6648), (_QWORD *)(a1 + 7560));
      sub_20F8DF280(*(_QWORD *)(a1 + 6664), *(_QWORD *)(a1 + 6672), (_QWORD *)(a1 + 7560));
      sub_20F8DB0F0((_QWORD *)(a1 + 5168));
    }
  }
  v169 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v169, (uint64_t)" present in the system\n", 23);
  sub_20E86A980(a2, (uint64_t)"\tout of that ", 13);
  sub_20FB68AF0(a1 + 5168, 0);
  v170 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v170, (uint64_t)" are free (", 11);
  sub_20FB68AF0(a1 + 5168, 0);
  v171 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v171, (uint64_t)" DoF total)\n", 12);
  *(_QWORD *)&v502[0] = operator new(0x28uLL);
  *(_OWORD *)((char *)v502 + 8) = v495;
  strcpy(*(char **)&v502[0], "cv3d::vio::VIOLandmarkVariable<double>]");
  sub_20E8D1238(v502, 38, 1uLL);
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v172 = v502;
  else
    v172 = *(_OWORD **)&v502[0];
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v173 = BYTE7(v502[1]);
  else
    v173 = *((_QWORD *)&v502[0] + 1);
  v174 = sub_20E86A980(a2, (uint64_t)v172, v173);
  sub_20E86A980(v174, (uint64_t)": ", 2);
  v175 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v175, (uint64_t)"D variable\n", 11);
  if (SBYTE7(v502[1]) < 0)
    operator delete(*(void **)&v502[0]);
  v176 = sub_20E86A980(a2, (uint64_t)"\treferenced by ", 15);
  memset(&v501, 0, sizeof(v501));
  *(_QWORD *)&v502[0] = operator new(0x58uLL);
  *(_OWORD *)((char *)v502 + 8) = xmmword_2103134C0;
  strcpy(*(char **)&v502[0], "cv3d::vio::VIOSLAMLandmarkPriorFactor<double, cv3d::vio::VIOLandmarkVariable<double>>]");
  sub_20E8D1238(v502, 85, 1uLL);
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v177 = (const std::string::value_type *)v502;
  else
    v177 = *(const std::string::value_type **)&v502[0];
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v178 = BYTE7(v502[1]);
  else
    v178 = *((_QWORD *)&v502[0] + 1);
  std::string::append(&v501, v177, v178);
  if (SBYTE7(v502[1]) < 0)
    operator delete(*(void **)&v502[0]);
  std::string::append(&v501, ", ", 2uLL);
  v179 = operator new(0x40uLL);
  *(_QWORD *)&v502[0] = v179;
  *(_OWORD *)((char *)v502 + 8) = *(_OWORD *)&v500[64];
  *v179 = *(_OWORD *)&v500[48];
  v179[1] = *(_OWORD *)&v500[32];
  v179[2] = *(_OWORD *)&v500[16];
  *(_OWORD *)((char *)v179 + 46) = *(_OWORD *)v500;
  *((_BYTE *)v179 + 62) = 0;
  sub_20E8D1238(v502, 61, 1uLL);
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v180 = (const std::string::value_type *)v502;
  else
    v180 = *(const std::string::value_type **)&v502[0];
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v181 = BYTE7(v502[1]);
  else
    v181 = *((_QWORD *)&v502[0] + 1);
  std::string::append(&v501, v180, v181);
  if (SBYTE7(v502[1]) < 0)
    operator delete(*(void **)&v502[0]);
  if ((v501.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v182 = &v501;
  else
    v182 = (std::string *)v501.__r_.__value_.__r.__words[0];
  if ((v501.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v183 = HIBYTE(v501.__r_.__value_.__r.__words[2]);
  else
    v183 = v501.__r_.__value_.__l.__size_;
  v184 = sub_20E86A980(v176, (uint64_t)v182, v183);
  sub_20E86A980(v184, (uint64_t)"\n", 1);
  if (SHIBYTE(v501.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v501.__r_.__value_.__l.__data_);
  sub_20E86A980(a2, (uint64_t)"\tforms an independent set (consider using Schur solver)\n", 56);
  sub_20E86A980(a2, (uint64_t)"\tthere are ", 11);
  sub_20F92289C(a1 + 5168, 0);
  v185 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v185, (uint64_t)" present in the system\n", 23);
  sub_20E86A980(a2, (uint64_t)"\tout of that ", 13);
  sub_20FB690D8(a1 + 5168, 0);
  v186 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v186, (uint64_t)" are free (", 11);
  sub_20FB690D8(a1 + 5168, 0);
  v187 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v187, (uint64_t)" DoF total)\n", 12);
  *(_QWORD *)&v502[0] = operator new(0x20uLL);
  *(_OWORD *)((char *)v502 + 8) = xmmword_2102DBF70;
  strcpy(*(char **)&v502[0], "cv3d::vio::TimeOffsetVariable]");
  sub_20E8D1238(v502, 29, 1uLL);
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v188 = v502;
  else
    v188 = *(_OWORD **)&v502[0];
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v189 = BYTE7(v502[1]);
  else
    v189 = *((_QWORD *)&v502[0] + 1);
  v190 = sub_20E86A980(a2, (uint64_t)v188, v189);
  sub_20E86A980(v190, (uint64_t)": ", 2);
  v191 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v191, (uint64_t)"D variable\n", 11);
  if (SBYTE7(v502[1]) < 0)
    operator delete(*(void **)&v502[0]);
  v192 = sub_20E86A980(a2, (uint64_t)"\treferenced by ", 15);
  memset(&v501, 0, sizeof(v501));
  v193 = operator new(0x30uLL);
  *(_QWORD *)&v502[0] = v193;
  *(_OWORD *)((char *)v502 + 8) = v497;
  *v193 = v494[2];
  v193[1] = v494[1];
  *(_OWORD *)((char *)v193 + 29) = v494[0];
  *((_BYTE *)v193 + 45) = 0;
  sub_20E8D1238(v502, 44, 1uLL);
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v194 = (const std::string::value_type *)v502;
  else
    v194 = *(const std::string::value_type **)&v502[0];
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v195 = BYTE7(v502[1]);
  else
    v195 = *((_QWORD *)&v502[0] + 1);
  std::string::append(&v501, v194, v195);
  if (SBYTE7(v502[1]) < 0)
    operator delete(*(void **)&v502[0]);
  std::string::append(&v501, ", ", 2uLL);
  v196 = (char *)operator new(0x28uLL);
  *(_QWORD *)&v502[0] = v196;
  *(_OWORD *)((char *)v502 + 8) = *(_OWORD *)&v493[32];
  strcpy(v196 + 32, ">]");
  *(_OWORD *)v196 = *(_OWORD *)&v493[16];
  *((_OWORD *)v196 + 1) = *(_OWORD *)v493;
  sub_20E8D1238(v502, 33, 1uLL);
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v197 = (const std::string::value_type *)v502;
  else
    v197 = *(const std::string::value_type **)&v502[0];
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v198 = BYTE7(v502[1]);
  else
    v198 = *((_QWORD *)&v502[0] + 1);
  std::string::append(&v501, v197, v198);
  if (SBYTE7(v502[1]) < 0)
    operator delete(*(void **)&v502[0]);
  std::string::append(&v501, ", ", 2uLL);
  *(_QWORD *)&v502[0] = operator new(0x38uLL);
  *(_OWORD *)((char *)v502 + 8) = xmmword_2102DBF10;
  strcpy(*(char **)&v502[0], "cv3d::vio::StateAndIMUTimeOffsetPriorFactor<double>]");
  sub_20E8D1238(v502, 51, 1uLL);
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v199 = (const std::string::value_type *)v502;
  else
    v199 = *(const std::string::value_type **)&v502[0];
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v200 = BYTE7(v502[1]);
  else
    v200 = *((_QWORD *)&v502[0] + 1);
  std::string::append(&v501, v199, v200);
  if (SBYTE7(v502[1]) < 0)
    operator delete(*(void **)&v502[0]);
  if ((v501.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v201 = &v501;
  else
    v201 = (std::string *)v501.__r_.__value_.__r.__words[0];
  if ((v501.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v202 = HIBYTE(v501.__r_.__value_.__r.__words[2]);
  else
    v202 = v501.__r_.__value_.__l.__size_;
  v203 = sub_20E86A980(v192, (uint64_t)v201, v202);
  sub_20E86A980(v203, (uint64_t)"\n", 1);
  if (SHIBYTE(v501.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v501.__r_.__value_.__l.__data_);
  sub_20E86A980(a2, (uint64_t)"\tforms an independent set (consider using Schur solver)\n", 56);
  sub_20E86A980(a2, (uint64_t)"\tthere are ", 11);
  if (!*v80)
  {
    memset(v502, 0, 44);
    if (sub_20F8DEE48((_QWORD *)(a1 + 5168), (int *)v502, &v501, 1))
    {
      *(_QWORD *)(a1 + 7568) = *(_QWORD *)(a1 + 7560);
      *(_QWORD *)(a1 + 7592) = *(_QWORD *)(a1 + 7584);
      *(_QWORD *)(a1 + 7616) = *(_QWORD *)(a1 + 7608);
      *(_QWORD *)(a1 + 7640) = *(_QWORD *)(a1 + 7632);
      *(_QWORD *)(a1 + 7664) = *(_QWORD *)(a1 + 7656);
      *(_QWORD *)(a1 + 7688) = *(_QWORD *)(a1 + 7680);
      *(_QWORD *)(a1 + 7712) = *(_QWORD *)(a1 + 7704);
      *(_QWORD *)(a1 + 7736) = *(_QWORD *)(a1 + 7728);
      *(_QWORD *)(a1 + 7760) = *(_QWORD *)(a1 + 7752);
      *(_QWORD *)(a1 + 7784) = *(_QWORD *)(a1 + 7776);
      *(_QWORD *)(a1 + 7808) = *(_QWORD *)(a1 + 7800);
      v204 = *(_QWORD *)(a1 + 6232);
      v205 = *(_QWORD *)(a1 + 6240);
      while (v204 != v205)
      {
        v206 = *(_QWORD *)(v204 + 208);
        if (*(_BYTE *)(v204 + 496)
          || (*(_BYTE *)(v206 + 4) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v204 + 216) + 4) & 6) != 0)
        {
          sub_20F394A20(a1 + 7560, v206);
          sub_20F3D35E0((_QWORD *)(a1 + 7560), *(_QWORD *)(v204 + 216));
        }
        v204 += 504;
      }
      v207 = *(_QWORD *)(a1 + 6256);
      v208 = *(_QWORD *)(a1 + 6264);
      while (v207 != v208)
      {
        v209 = *(_QWORD *)(v207 + 136);
        if (*(_BYTE *)(v207 + 272) || (*(_BYTE *)(v209 + 4) & 6) != 0)
          sub_20F394A20(a1 + 7560, v209);
        v207 += 280;
      }
      v210 = *(_QWORD *)(a1 + 6280);
      v211 = *(_QWORD *)(a1 + 6288);
      while (v210 != v211)
      {
        v212 = *(_QWORD *)(v210 + 136);
        if (*(_BYTE *)(v210 + 272) || (*(_BYTE *)(v212 + 4) & 6) != 0)
          sub_20F599C88((_QWORD *)(a1 + 7560), v212);
        v210 += 280;
      }
      v213 = *(_QWORD *)(a1 + 6304);
      v214 = *(_QWORD *)(a1 + 6312);
      while (v213 != v214)
      {
        v215 = *(_QWORD *)(v213 + 136);
        if (*(_BYTE *)(v213 + 272) || (*(_BYTE *)(v215 + 4) & 6) != 0)
          sub_20F59A480((_QWORD *)(a1 + 7560), v215);
        v213 += 280;
      }
      v216 = *(_QWORD *)(a1 + 6328);
      v217 = *(_QWORD *)(a1 + 6336);
      while (v216 != v217)
      {
        v218 = *(_QWORD *)(v216 + 64);
        if (*(_BYTE *)(v216 + 152) || (*(_BYTE *)(v218 + 4) & 6) != 0)
          sub_20F59A2E8((_QWORD *)(a1 + 7560), v218);
        v216 += 160;
      }
      sub_20F8DF7FC(*(_QWORD *)(a1 + 6352), *(_QWORD *)(a1 + 6360), (_QWORD *)(a1 + 7560));
      sub_20F5B85BC(*(_QWORD *)(a1 + 6376), *(_QWORD *)(a1 + 6384), (_QWORD *)(a1 + 7560));
      v219 = *(_QWORD *)(a1 + 6400);
      v220 = *(_QWORD *)(a1 + 6408);
      while (v219 != v220)
      {
        v221 = *(_QWORD *)(v219 + 48);
        if (*(_BYTE *)(v219 + 136) || (*(_BYTE *)(v221 + 4) & 6) != 0)
          sub_20F3D35E0((_QWORD *)(a1 + 7560), v221);
        v219 += 144;
      }
      v222 = *(_QWORD *)(a1 + 6424);
      v223 = *(_QWORD *)(a1 + 6432);
      while (v222 != v223)
      {
        v224 = *(_QWORD *)(v222 + 48);
        if (*(_BYTE *)(v222 + 144)
          || (*(_BYTE *)(v224 + 4) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v222 + 56) + 4) & 6) != 0)
        {
          sub_20F394A20(a1 + 7560, v224);
          sub_20F394A20(a1 + 7560, *(_QWORD *)(v222 + 56));
        }
        v222 += 152;
      }
      sub_20F8DF748(*(_QWORD *)(a1 + 6448), *(_QWORD *)(a1 + 6456), (_QWORD *)(a1 + 7560));
      sub_20F8DF65C(*(_QWORD *)(a1 + 6472), *(_QWORD *)(a1 + 6480), (_QWORD *)(a1 + 7560));
      v225 = *(_QWORD *)(a1 + 6496);
      v226 = *(_QWORD *)(a1 + 6504);
      while (v225 != v226)
      {
        v227 = *(_QWORD *)(v225 + 48);
        if (*(_BYTE *)(v225 + 104) || (*(_BYTE *)(v227 + 4) & 6) != 0)
          sub_20F59A150((_QWORD *)(a1 + 7560), v227);
        v225 += 112;
      }
      v228 = *(_QWORD *)(a1 + 6520);
      v229 = *(_QWORD *)(a1 + 6528);
      while (v228 != v229)
      {
        v230 = *(_QWORD *)(v228 + 96);
        if (*(_BYTE *)(v228 + 200) || (*(_BYTE *)(v230 + 4) & 6) != 0)
          sub_20F599FB8((_QWORD *)(a1 + 7560), v230);
        v228 += 208;
      }
      v231 = *(_QWORD *)(a1 + 6544);
      v232 = *(_QWORD *)(a1 + 6552);
      while (v231 != v232)
      {
        v233 = *(_QWORD *)(v231 + 96);
        if (*(_BYTE *)(v231 + 200) || (*(_BYTE *)(v233 + 4) & 6) != 0)
          sub_20F599E20((_QWORD *)(a1 + 7560), v233);
        v231 += 208;
      }
      v234 = *(_QWORD *)(a1 + 6568);
      v235 = *(_QWORD *)(a1 + 6576);
      while (v234 != v235)
      {
        v236 = *(_QWORD *)(v234 + 80);
        if (*(_BYTE *)(v234 + 168) || (*(_BYTE *)(v236 + 4) & 6) != 0)
          sub_20F8DAC28((_QWORD *)(a1 + 7560), v236);
        v234 += 176;
      }
      v237 = *(_QWORD *)(a1 + 6592);
      v238 = *(_QWORD *)(a1 + 6600);
      while (v237 != v238)
      {
        v239 = *(_QWORD *)(v237 + 80);
        if (*(_BYTE *)(v237 + 168) || (*(_BYTE *)(v239 + 4) & 6) != 0)
          sub_20F8DADC0((_QWORD *)(a1 + 7560), v239);
        v237 += 176;
      }
      sub_20F8DF4E4(*(_QWORD *)(a1 + 6616), *(_QWORD *)(a1 + 6624), (_QWORD *)(a1 + 7560));
      sub_20F8DF3F8(*(_QWORD *)(a1 + 6640), *(_QWORD *)(a1 + 6648), (_QWORD *)(a1 + 7560));
      sub_20F8DF280(*(_QWORD *)(a1 + 6664), *(_QWORD *)(a1 + 6672), (_QWORD *)(a1 + 7560));
      sub_20F8DB0F0((_QWORD *)(a1 + 5168));
    }
  }
  v240 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v240, (uint64_t)" present in the system\n", 23);
  sub_20E86A980(a2, (uint64_t)"\tout of that ", 13);
  sub_20FB696C0(a1 + 5168, 0);
  v241 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v241, (uint64_t)" are free (", 11);
  sub_20FB696C0(a1 + 5168, 0);
  v242 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v242, (uint64_t)" DoF total)\n", 12);
  *(_QWORD *)&v502[0] = operator new(0x30uLL);
  *(_OWORD *)((char *)v502 + 8) = xmmword_2102DC8E0;
  strcpy(*(char **)&v502[0], "cv3d::vio::IntrinsicsCalibVariable<double>]");
  sub_20E8D1238(v502, 42, 1uLL);
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v243 = v502;
  else
    v243 = *(_OWORD **)&v502[0];
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v244 = BYTE7(v502[1]);
  else
    v244 = *((_QWORD *)&v502[0] + 1);
  v245 = sub_20E86A980(a2, (uint64_t)v243, v244);
  sub_20E86A980(v245, (uint64_t)": ", 2);
  v246 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v246, (uint64_t)"D variable\n", 11);
  if (SBYTE7(v502[1]) < 0)
    operator delete(*(void **)&v502[0]);
  v247 = sub_20E86A980(a2, (uint64_t)"\treferenced by ", 15);
  memset(&v501, 0, sizeof(v501));
  v248 = operator new(0x30uLL);
  *(_QWORD *)&v502[0] = v248;
  *(_OWORD *)((char *)v502 + 8) = *(_OWORD *)&v496[32];
  *(_OWORD *)v248 = *(_OWORD *)&v496[16];
  *((_OWORD *)v248 + 1) = *(_OWORD *)v496;
  strcpy((char *)v248 + 32, "double>]");
  sub_20E8D1238(v502, 39, 1uLL);
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v249 = (const std::string::value_type *)v502;
  else
    v249 = *(const std::string::value_type **)&v502[0];
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v250 = BYTE7(v502[1]);
  else
    v250 = *((_QWORD *)&v502[0] + 1);
  std::string::append(&v501, v249, v250);
  if (SBYTE7(v502[1]) < 0)
    operator delete(*(void **)&v502[0]);
  std::string::append(&v501, ", ", 2uLL);
  *(_QWORD *)&v502[0] = operator new(0x60uLL);
  *(_OWORD *)((char *)v502 + 8) = xmmword_2103B84B0;
  strcpy(*(char **)&v502[0], "cv3d::vio::GenericCalibVariablePriorFactor<double, cv3d::vio::IntrinsicsCalibVariable<double>>]");
  sub_20E8D1238(v502, 94, 1uLL);
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v251 = (const std::string::value_type *)v502;
  else
    v251 = *(const std::string::value_type **)&v502[0];
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v252 = BYTE7(v502[1]);
  else
    v252 = *((_QWORD *)&v502[0] + 1);
  std::string::append(&v501, v251, v252);
  if (SBYTE7(v502[1]) < 0)
    operator delete(*(void **)&v502[0]);
  std::string::append(&v501, ", ", 2uLL);
  v253 = operator new(0x50uLL);
  *(_QWORD *)&v502[0] = v253;
  *(_OWORD *)((char *)v502 + 8) = *(_OWORD *)&v499[80];
  v253[2] = *(_OWORD *)&v499[64];
  v253[3] = *(_OWORD *)&v499[48];
  *(_OWORD *)((char *)v253 + 58) = *(_OWORD *)&v499[32];
  *v253 = *(_OWORD *)v499;
  v253[1] = *(_OWORD *)&v499[16];
  *((_BYTE *)v253 + 74) = 0;
  sub_20E8D1238(v502, 73, 1uLL);
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v254 = (const std::string::value_type *)v502;
  else
    v254 = *(const std::string::value_type **)&v502[0];
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v255 = BYTE7(v502[1]);
  else
    v255 = *((_QWORD *)&v502[0] + 1);
  std::string::append(&v501, v254, v255);
  if (SBYTE7(v502[1]) < 0)
    operator delete(*(void **)&v502[0]);
  std::string::append(&v501, ", ", 2uLL);
  v256 = operator new(0x40uLL);
  *(_QWORD *)&v502[0] = v256;
  *(_OWORD *)((char *)v502 + 8) = *(_OWORD *)&v500[64];
  *v256 = *(_OWORD *)&v500[48];
  v256[1] = *(_OWORD *)&v500[32];
  v256[2] = *(_OWORD *)&v500[16];
  *(_OWORD *)((char *)v256 + 46) = *(_OWORD *)v500;
  *((_BYTE *)v256 + 62) = 0;
  sub_20E8D1238(v502, 61, 1uLL);
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v257 = (const std::string::value_type *)v502;
  else
    v257 = *(const std::string::value_type **)&v502[0];
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v258 = BYTE7(v502[1]);
  else
    v258 = *((_QWORD *)&v502[0] + 1);
  std::string::append(&v501, v257, v258);
  if (SBYTE7(v502[1]) < 0)
    operator delete(*(void **)&v502[0]);
  std::string::append(&v501, ", ", 2uLL);
  v259 = operator new(0x60uLL);
  *(_QWORD *)&v502[0] = v259;
  *(_OWORD *)((char *)v502 + 8) = *(_OWORD *)&v498[96];
  v259[2] = *(_OWORD *)&v498[80];
  v259[3] = *(_OWORD *)&v498[64];
  v259[4] = *(_OWORD *)&v498[48];
  *(_OWORD *)((char *)v259 + 77) = *(_OWORD *)&v498[32];
  *v259 = *(_OWORD *)&v498[16];
  v259[1] = *(_OWORD *)v498;
  *((_BYTE *)v259 + 93) = 0;
  sub_20E8D1238(v502, 92, 1uLL);
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v260 = (const std::string::value_type *)v502;
  else
    v260 = *(const std::string::value_type **)&v502[0];
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v261 = BYTE7(v502[1]);
  else
    v261 = *((_QWORD *)&v502[0] + 1);
  std::string::append(&v501, v260, v261);
  if (SBYTE7(v502[1]) < 0)
    operator delete(*(void **)&v502[0]);
  if ((v501.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v262 = &v501;
  else
    v262 = (std::string *)v501.__r_.__value_.__r.__words[0];
  if ((v501.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v263 = HIBYTE(v501.__r_.__value_.__r.__words[2]);
  else
    v263 = v501.__r_.__value_.__l.__size_;
  v264 = sub_20E86A980(v247, (uint64_t)v262, v263);
  sub_20E86A980(v264, (uint64_t)"\n", 1);
  if (SHIBYTE(v501.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v501.__r_.__value_.__l.__data_);
  sub_20E86A980(a2, (uint64_t)"\tthere are ", 11);
  if (!*v80)
  {
    memset(v502, 0, 44);
    if (sub_20F8DEE48((_QWORD *)(a1 + 5168), (int *)v502, &v501, 1))
    {
      *(_QWORD *)(a1 + 7568) = *(_QWORD *)(a1 + 7560);
      *(_QWORD *)(a1 + 7592) = *(_QWORD *)(a1 + 7584);
      *(_QWORD *)(a1 + 7616) = *(_QWORD *)(a1 + 7608);
      *(_QWORD *)(a1 + 7640) = *(_QWORD *)(a1 + 7632);
      *(_QWORD *)(a1 + 7664) = *(_QWORD *)(a1 + 7656);
      *(_QWORD *)(a1 + 7688) = *(_QWORD *)(a1 + 7680);
      *(_QWORD *)(a1 + 7712) = *(_QWORD *)(a1 + 7704);
      *(_QWORD *)(a1 + 7736) = *(_QWORD *)(a1 + 7728);
      *(_QWORD *)(a1 + 7760) = *(_QWORD *)(a1 + 7752);
      *(_QWORD *)(a1 + 7784) = *(_QWORD *)(a1 + 7776);
      *(_QWORD *)(a1 + 7808) = *(_QWORD *)(a1 + 7800);
      v265 = *(_QWORD *)(a1 + 6232);
      v266 = *(_QWORD *)(a1 + 6240);
      while (v265 != v266)
      {
        v267 = *(_QWORD *)(v265 + 208);
        if (*(_BYTE *)(v265 + 496)
          || (*(_BYTE *)(v267 + 4) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v265 + 216) + 4) & 6) != 0)
        {
          sub_20F394A20(a1 + 7560, v267);
          sub_20F3D35E0((_QWORD *)(a1 + 7560), *(_QWORD *)(v265 + 216));
        }
        v265 += 504;
      }
      v268 = *(_QWORD *)(a1 + 6256);
      v269 = *(_QWORD *)(a1 + 6264);
      while (v268 != v269)
      {
        v270 = *(_QWORD *)(v268 + 136);
        if (*(_BYTE *)(v268 + 272) || (*(_BYTE *)(v270 + 4) & 6) != 0)
          sub_20F394A20(a1 + 7560, v270);
        v268 += 280;
      }
      v271 = *(_QWORD *)(a1 + 6280);
      v272 = *(_QWORD *)(a1 + 6288);
      while (v271 != v272)
      {
        v273 = *(_QWORD *)(v271 + 136);
        if (*(_BYTE *)(v271 + 272) || (*(_BYTE *)(v273 + 4) & 6) != 0)
          sub_20F599C88((_QWORD *)(a1 + 7560), v273);
        v271 += 280;
      }
      v274 = *(_QWORD *)(a1 + 6304);
      v275 = *(_QWORD *)(a1 + 6312);
      while (v274 != v275)
      {
        v276 = *(_QWORD *)(v274 + 136);
        if (*(_BYTE *)(v274 + 272) || (*(_BYTE *)(v276 + 4) & 6) != 0)
          sub_20F59A480((_QWORD *)(a1 + 7560), v276);
        v274 += 280;
      }
      v277 = *(_QWORD *)(a1 + 6328);
      v278 = *(_QWORD *)(a1 + 6336);
      while (v277 != v278)
      {
        v279 = *(_QWORD *)(v277 + 64);
        if (*(_BYTE *)(v277 + 152) || (*(_BYTE *)(v279 + 4) & 6) != 0)
          sub_20F59A2E8((_QWORD *)(a1 + 7560), v279);
        v277 += 160;
      }
      sub_20F8DF7FC(*(_QWORD *)(a1 + 6352), *(_QWORD *)(a1 + 6360), (_QWORD *)(a1 + 7560));
      sub_20F5B85BC(*(_QWORD *)(a1 + 6376), *(_QWORD *)(a1 + 6384), (_QWORD *)(a1 + 7560));
      v280 = *(_QWORD *)(a1 + 6400);
      v281 = *(_QWORD *)(a1 + 6408);
      while (v280 != v281)
      {
        v282 = *(_QWORD *)(v280 + 48);
        if (*(_BYTE *)(v280 + 136) || (*(_BYTE *)(v282 + 4) & 6) != 0)
          sub_20F3D35E0((_QWORD *)(a1 + 7560), v282);
        v280 += 144;
      }
      v283 = *(_QWORD *)(a1 + 6424);
      v284 = *(_QWORD *)(a1 + 6432);
      while (v283 != v284)
      {
        v285 = *(_QWORD *)(v283 + 48);
        if (*(_BYTE *)(v283 + 144)
          || (*(_BYTE *)(v285 + 4) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v283 + 56) + 4) & 6) != 0)
        {
          sub_20F394A20(a1 + 7560, v285);
          sub_20F394A20(a1 + 7560, *(_QWORD *)(v283 + 56));
        }
        v283 += 152;
      }
      sub_20F8DF748(*(_QWORD *)(a1 + 6448), *(_QWORD *)(a1 + 6456), (_QWORD *)(a1 + 7560));
      sub_20F8DF65C(*(_QWORD *)(a1 + 6472), *(_QWORD *)(a1 + 6480), (_QWORD *)(a1 + 7560));
      v286 = *(_QWORD *)(a1 + 6496);
      v287 = *(_QWORD *)(a1 + 6504);
      while (v286 != v287)
      {
        v288 = *(_QWORD *)(v286 + 48);
        if (*(_BYTE *)(v286 + 104) || (*(_BYTE *)(v288 + 4) & 6) != 0)
          sub_20F59A150((_QWORD *)(a1 + 7560), v288);
        v286 += 112;
      }
      v289 = *(_QWORD *)(a1 + 6520);
      v290 = *(_QWORD *)(a1 + 6528);
      while (v289 != v290)
      {
        v291 = *(_QWORD *)(v289 + 96);
        if (*(_BYTE *)(v289 + 200) || (*(_BYTE *)(v291 + 4) & 6) != 0)
          sub_20F599FB8((_QWORD *)(a1 + 7560), v291);
        v289 += 208;
      }
      v292 = *(_QWORD *)(a1 + 6544);
      v293 = *(_QWORD *)(a1 + 6552);
      while (v292 != v293)
      {
        v294 = *(_QWORD *)(v292 + 96);
        if (*(_BYTE *)(v292 + 200) || (*(_BYTE *)(v294 + 4) & 6) != 0)
          sub_20F599E20((_QWORD *)(a1 + 7560), v294);
        v292 += 208;
      }
      v295 = *(_QWORD *)(a1 + 6568);
      v296 = *(_QWORD *)(a1 + 6576);
      while (v295 != v296)
      {
        v297 = *(_QWORD *)(v295 + 80);
        if (*(_BYTE *)(v295 + 168) || (*(_BYTE *)(v297 + 4) & 6) != 0)
          sub_20F8DAC28((_QWORD *)(a1 + 7560), v297);
        v295 += 176;
      }
      v298 = *(_QWORD *)(a1 + 6592);
      v299 = *(_QWORD *)(a1 + 6600);
      while (v298 != v299)
      {
        v300 = *(_QWORD *)(v298 + 80);
        if (*(_BYTE *)(v298 + 168) || (*(_BYTE *)(v300 + 4) & 6) != 0)
          sub_20F8DADC0((_QWORD *)(a1 + 7560), v300);
        v298 += 176;
      }
      sub_20F8DF4E4(*(_QWORD *)(a1 + 6616), *(_QWORD *)(a1 + 6624), (_QWORD *)(a1 + 7560));
      sub_20F8DF3F8(*(_QWORD *)(a1 + 6640), *(_QWORD *)(a1 + 6648), (_QWORD *)(a1 + 7560));
      sub_20F8DF280(*(_QWORD *)(a1 + 6664), *(_QWORD *)(a1 + 6672), (_QWORD *)(a1 + 7560));
      sub_20F8DB0F0((_QWORD *)(a1 + 5168));
    }
  }
  v301 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v301, (uint64_t)" present in the system\n", 23);
  sub_20E86A980(a2, (uint64_t)"\tout of that ", 13);
  sub_20FB69CA8(a1 + 5168, 0);
  v302 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v302, (uint64_t)" are free (", 11);
  sub_20FB69CA8(a1 + 5168, 0);
  v303 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v303, (uint64_t)" DoF total)\n", 12);
  *(_QWORD *)&v502[0] = operator new(0x38uLL);
  *(_OWORD *)((char *)v502 + 8) = xmmword_2102DC7C0;
  strcpy(*(char **)&v502[0], "cv3d::vio::RadialDistortionCalibVariable<double>]");
  sub_20E8D1238(v502, 48, 1uLL);
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v304 = v502;
  else
    v304 = *(_OWORD **)&v502[0];
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v305 = BYTE7(v502[1]);
  else
    v305 = *((_QWORD *)&v502[0] + 1);
  v306 = sub_20E86A980(a2, (uint64_t)v304, v305);
  sub_20E86A980(v306, (uint64_t)": ", 2);
  v307 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v307, (uint64_t)"D variable\n", 11);
  if (SBYTE7(v502[1]) < 0)
    operator delete(*(void **)&v502[0]);
  v308 = sub_20E86A980(a2, (uint64_t)"\treferenced by ", 15);
  memset(&v501, 0, sizeof(v501));
  v309 = operator new(0x30uLL);
  *(_QWORD *)&v502[0] = v309;
  *(_OWORD *)((char *)v502 + 8) = *(_OWORD *)&v496[32];
  *(_OWORD *)v309 = *(_OWORD *)&v496[16];
  *((_OWORD *)v309 + 1) = *(_OWORD *)v496;
  strcpy((char *)v309 + 32, "double>]");
  sub_20E8D1238(v502, 39, 1uLL);
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v310 = (const std::string::value_type *)v502;
  else
    v310 = *(const std::string::value_type **)&v502[0];
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v311 = BYTE7(v502[1]);
  else
    v311 = *((_QWORD *)&v502[0] + 1);
  std::string::append(&v501, v310, v311);
  if (SBYTE7(v502[1]) < 0)
    operator delete(*(void **)&v502[0]);
  std::string::append(&v501, ", ", 2uLL);
  *(_QWORD *)&v502[0] = operator new(0x68uLL);
  *(_OWORD *)((char *)v502 + 8) = xmmword_2102DCFA0;
  strcpy(*(char **)&v502[0], "cv3d::vio::GenericCalibVariablePriorFactor<double, cv3d::vio::RadialDistortionCalibVariable<double>>]");
  sub_20E8D1238(v502, 100, 1uLL);
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v312 = (const std::string::value_type *)v502;
  else
    v312 = *(const std::string::value_type **)&v502[0];
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v313 = BYTE7(v502[1]);
  else
    v313 = *((_QWORD *)&v502[0] + 1);
  std::string::append(&v501, v312, v313);
  if (SBYTE7(v502[1]) < 0)
    operator delete(*(void **)&v502[0]);
  std::string::append(&v501, ", ", 2uLL);
  v314 = operator new(0x50uLL);
  *(_QWORD *)&v502[0] = v314;
  *(_OWORD *)((char *)v502 + 8) = *(_OWORD *)&v499[80];
  v314[2] = *(_OWORD *)&v499[64];
  v314[3] = *(_OWORD *)&v499[48];
  *(_OWORD *)((char *)v314 + 58) = *(_OWORD *)&v499[32];
  *v314 = *(_OWORD *)v499;
  v314[1] = *(_OWORD *)&v499[16];
  *((_BYTE *)v314 + 74) = 0;
  sub_20E8D1238(v502, 73, 1uLL);
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v315 = (const std::string::value_type *)v502;
  else
    v315 = *(const std::string::value_type **)&v502[0];
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v316 = BYTE7(v502[1]);
  else
    v316 = *((_QWORD *)&v502[0] + 1);
  std::string::append(&v501, v315, v316);
  if (SBYTE7(v502[1]) < 0)
    operator delete(*(void **)&v502[0]);
  std::string::append(&v501, ", ", 2uLL);
  v317 = operator new(0x40uLL);
  *(_QWORD *)&v502[0] = v317;
  *(_OWORD *)((char *)v502 + 8) = *(_OWORD *)&v500[64];
  *v317 = *(_OWORD *)&v500[48];
  v317[1] = *(_OWORD *)&v500[32];
  v317[2] = *(_OWORD *)&v500[16];
  *(_OWORD *)((char *)v317 + 46) = *(_OWORD *)v500;
  *((_BYTE *)v317 + 62) = 0;
  sub_20E8D1238(v502, 61, 1uLL);
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v318 = (const std::string::value_type *)v502;
  else
    v318 = *(const std::string::value_type **)&v502[0];
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v319 = BYTE7(v502[1]);
  else
    v319 = *((_QWORD *)&v502[0] + 1);
  std::string::append(&v501, v318, v319);
  if (SBYTE7(v502[1]) < 0)
    operator delete(*(void **)&v502[0]);
  std::string::append(&v501, ", ", 2uLL);
  v320 = operator new(0x60uLL);
  *(_QWORD *)&v502[0] = v320;
  *(_OWORD *)((char *)v502 + 8) = *(_OWORD *)&v498[96];
  v320[2] = *(_OWORD *)&v498[80];
  v320[3] = *(_OWORD *)&v498[64];
  v320[4] = *(_OWORD *)&v498[48];
  *(_OWORD *)((char *)v320 + 77) = *(_OWORD *)&v498[32];
  *v320 = *(_OWORD *)&v498[16];
  v320[1] = *(_OWORD *)v498;
  *((_BYTE *)v320 + 93) = 0;
  sub_20E8D1238(v502, 92, 1uLL);
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v321 = (const std::string::value_type *)v502;
  else
    v321 = *(const std::string::value_type **)&v502[0];
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v322 = BYTE7(v502[1]);
  else
    v322 = *((_QWORD *)&v502[0] + 1);
  std::string::append(&v501, v321, v322);
  if (SBYTE7(v502[1]) < 0)
    operator delete(*(void **)&v502[0]);
  if ((v501.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v323 = &v501;
  else
    v323 = (std::string *)v501.__r_.__value_.__r.__words[0];
  if ((v501.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v324 = HIBYTE(v501.__r_.__value_.__r.__words[2]);
  else
    v324 = v501.__r_.__value_.__l.__size_;
  v325 = sub_20E86A980(v308, (uint64_t)v323, v324);
  sub_20E86A980(v325, (uint64_t)"\n", 1);
  if (SHIBYTE(v501.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v501.__r_.__value_.__l.__data_);
  sub_20E86A980(a2, (uint64_t)"\tthere are ", 11);
  if (!*v80)
  {
    memset(v502, 0, 44);
    if (sub_20F8DEE48((_QWORD *)(a1 + 5168), (int *)v502, &v501, 1))
    {
      *(_QWORD *)(a1 + 7568) = *(_QWORD *)(a1 + 7560);
      *(_QWORD *)(a1 + 7592) = *(_QWORD *)(a1 + 7584);
      *(_QWORD *)(a1 + 7616) = *(_QWORD *)(a1 + 7608);
      *(_QWORD *)(a1 + 7640) = *(_QWORD *)(a1 + 7632);
      *(_QWORD *)(a1 + 7664) = *(_QWORD *)(a1 + 7656);
      *(_QWORD *)(a1 + 7688) = *(_QWORD *)(a1 + 7680);
      *(_QWORD *)(a1 + 7712) = *(_QWORD *)(a1 + 7704);
      *(_QWORD *)(a1 + 7736) = *(_QWORD *)(a1 + 7728);
      *(_QWORD *)(a1 + 7760) = *(_QWORD *)(a1 + 7752);
      *(_QWORD *)(a1 + 7784) = *(_QWORD *)(a1 + 7776);
      *(_QWORD *)(a1 + 7808) = *(_QWORD *)(a1 + 7800);
      v326 = *(_QWORD *)(a1 + 6232);
      v327 = *(_QWORD *)(a1 + 6240);
      while (v326 != v327)
      {
        v328 = *(_QWORD *)(v326 + 208);
        if (*(_BYTE *)(v326 + 496)
          || (*(_BYTE *)(v328 + 4) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v326 + 216) + 4) & 6) != 0)
        {
          sub_20F394A20(a1 + 7560, v328);
          sub_20F3D35E0((_QWORD *)(a1 + 7560), *(_QWORD *)(v326 + 216));
        }
        v326 += 504;
      }
      v329 = *(_QWORD *)(a1 + 6256);
      v330 = *(_QWORD *)(a1 + 6264);
      while (v329 != v330)
      {
        v331 = *(_QWORD *)(v329 + 136);
        if (*(_BYTE *)(v329 + 272) || (*(_BYTE *)(v331 + 4) & 6) != 0)
          sub_20F394A20(a1 + 7560, v331);
        v329 += 280;
      }
      v332 = *(_QWORD *)(a1 + 6280);
      v333 = *(_QWORD *)(a1 + 6288);
      while (v332 != v333)
      {
        v334 = *(_QWORD *)(v332 + 136);
        if (*(_BYTE *)(v332 + 272) || (*(_BYTE *)(v334 + 4) & 6) != 0)
          sub_20F599C88((_QWORD *)(a1 + 7560), v334);
        v332 += 280;
      }
      v335 = *(_QWORD *)(a1 + 6304);
      v336 = *(_QWORD *)(a1 + 6312);
      while (v335 != v336)
      {
        v337 = *(_QWORD *)(v335 + 136);
        if (*(_BYTE *)(v335 + 272) || (*(_BYTE *)(v337 + 4) & 6) != 0)
          sub_20F59A480((_QWORD *)(a1 + 7560), v337);
        v335 += 280;
      }
      v338 = *(_QWORD *)(a1 + 6328);
      v339 = *(_QWORD *)(a1 + 6336);
      while (v338 != v339)
      {
        v340 = *(_QWORD *)(v338 + 64);
        if (*(_BYTE *)(v338 + 152) || (*(_BYTE *)(v340 + 4) & 6) != 0)
          sub_20F59A2E8((_QWORD *)(a1 + 7560), v340);
        v338 += 160;
      }
      sub_20F8DF7FC(*(_QWORD *)(a1 + 6352), *(_QWORD *)(a1 + 6360), (_QWORD *)(a1 + 7560));
      sub_20F5B85BC(*(_QWORD *)(a1 + 6376), *(_QWORD *)(a1 + 6384), (_QWORD *)(a1 + 7560));
      v341 = *(_QWORD *)(a1 + 6400);
      v342 = *(_QWORD *)(a1 + 6408);
      while (v341 != v342)
      {
        v343 = *(_QWORD *)(v341 + 48);
        if (*(_BYTE *)(v341 + 136) || (*(_BYTE *)(v343 + 4) & 6) != 0)
          sub_20F3D35E0((_QWORD *)(a1 + 7560), v343);
        v341 += 144;
      }
      v344 = *(_QWORD *)(a1 + 6424);
      v345 = *(_QWORD *)(a1 + 6432);
      while (v344 != v345)
      {
        v346 = *(_QWORD *)(v344 + 48);
        if (*(_BYTE *)(v344 + 144)
          || (*(_BYTE *)(v346 + 4) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v344 + 56) + 4) & 6) != 0)
        {
          sub_20F394A20(a1 + 7560, v346);
          sub_20F394A20(a1 + 7560, *(_QWORD *)(v344 + 56));
        }
        v344 += 152;
      }
      sub_20F8DF748(*(_QWORD *)(a1 + 6448), *(_QWORD *)(a1 + 6456), (_QWORD *)(a1 + 7560));
      sub_20F8DF65C(*(_QWORD *)(a1 + 6472), *(_QWORD *)(a1 + 6480), (_QWORD *)(a1 + 7560));
      v347 = *(_QWORD *)(a1 + 6496);
      v348 = *(_QWORD *)(a1 + 6504);
      while (v347 != v348)
      {
        v349 = *(_QWORD *)(v347 + 48);
        if (*(_BYTE *)(v347 + 104) || (*(_BYTE *)(v349 + 4) & 6) != 0)
          sub_20F59A150((_QWORD *)(a1 + 7560), v349);
        v347 += 112;
      }
      v350 = *(_QWORD *)(a1 + 6520);
      v351 = *(_QWORD *)(a1 + 6528);
      while (v350 != v351)
      {
        v352 = *(_QWORD *)(v350 + 96);
        if (*(_BYTE *)(v350 + 200) || (*(_BYTE *)(v352 + 4) & 6) != 0)
          sub_20F599FB8((_QWORD *)(a1 + 7560), v352);
        v350 += 208;
      }
      v353 = *(_QWORD *)(a1 + 6544);
      v354 = *(_QWORD *)(a1 + 6552);
      while (v353 != v354)
      {
        v355 = *(_QWORD *)(v353 + 96);
        if (*(_BYTE *)(v353 + 200) || (*(_BYTE *)(v355 + 4) & 6) != 0)
          sub_20F599E20((_QWORD *)(a1 + 7560), v355);
        v353 += 208;
      }
      v356 = *(_QWORD *)(a1 + 6568);
      v357 = *(_QWORD *)(a1 + 6576);
      while (v356 != v357)
      {
        v358 = *(_QWORD *)(v356 + 80);
        if (*(_BYTE *)(v356 + 168) || (*(_BYTE *)(v358 + 4) & 6) != 0)
          sub_20F8DAC28((_QWORD *)(a1 + 7560), v358);
        v356 += 176;
      }
      v359 = *(_QWORD *)(a1 + 6592);
      v360 = *(_QWORD *)(a1 + 6600);
      while (v359 != v360)
      {
        v361 = *(_QWORD *)(v359 + 80);
        if (*(_BYTE *)(v359 + 168) || (*(_BYTE *)(v361 + 4) & 6) != 0)
          sub_20F8DADC0((_QWORD *)(a1 + 7560), v361);
        v359 += 176;
      }
      sub_20F8DF4E4(*(_QWORD *)(a1 + 6616), *(_QWORD *)(a1 + 6624), (_QWORD *)(a1 + 7560));
      sub_20F8DF3F8(*(_QWORD *)(a1 + 6640), *(_QWORD *)(a1 + 6648), (_QWORD *)(a1 + 7560));
      sub_20F8DF280(*(_QWORD *)(a1 + 6664), *(_QWORD *)(a1 + 6672), (_QWORD *)(a1 + 7560));
      sub_20F8DB0F0((_QWORD *)(a1 + 5168));
    }
  }
  v362 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v362, (uint64_t)" present in the system\n", 23);
  sub_20E86A980(a2, (uint64_t)"\tout of that ", 13);
  sub_20FB6A294(a1 + 5168, 0);
  v363 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v363, (uint64_t)" are free (", 11);
  sub_20FB6A294(a1 + 5168, 0);
  v364 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v364, (uint64_t)" DoF total)\n", 12);
  *(_QWORD *)&v502[0] = operator new(0x30uLL);
  *(_OWORD *)((char *)v502 + 8) = v497;
  strcpy(*(char **)&v502[0], "cv3d::vio::ExternalLensCalibVariable<double>]");
  sub_20E8D1238(v502, 44, 1uLL);
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v365 = v502;
  else
    v365 = *(_OWORD **)&v502[0];
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v366 = BYTE7(v502[1]);
  else
    v366 = *((_QWORD *)&v502[0] + 1);
  v367 = sub_20E86A980(a2, (uint64_t)v365, v366);
  sub_20E86A980(v367, (uint64_t)": ", 2);
  v368 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v368, (uint64_t)"D variable\n", 11);
  if (SBYTE7(v502[1]) < 0)
    operator delete(*(void **)&v502[0]);
  v369 = sub_20E86A980(a2, (uint64_t)"\treferenced by ", 15);
  memset(&v501, 0, sizeof(v501));
  *(_QWORD *)&v502[0] = operator new(0x68uLL);
  *(_OWORD *)((char *)v502 + 8) = xmmword_210312DD0;
  strcpy(*(char **)&v502[0], "cv3d::vio::GenericCalibVariablePriorFactor<double, cv3d::vio::ExternalLensCalibVariable<double>>]");
  sub_20E8D1238(v502, 96, 1uLL);
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v370 = (const std::string::value_type *)v502;
  else
    v370 = *(const std::string::value_type **)&v502[0];
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v371 = BYTE7(v502[1]);
  else
    v371 = *((_QWORD *)&v502[0] + 1);
  std::string::append(&v501, v370, v371);
  if (SBYTE7(v502[1]) < 0)
    operator delete(*(void **)&v502[0]);
  std::string::append(&v501, ", ", 2uLL);
  v372 = operator new(0x50uLL);
  *(_QWORD *)&v502[0] = v372;
  *(_OWORD *)((char *)v502 + 8) = *(_OWORD *)&v499[80];
  v372[2] = *(_OWORD *)&v499[64];
  v372[3] = *(_OWORD *)&v499[48];
  *(_OWORD *)((char *)v372 + 58) = *(_OWORD *)&v499[32];
  *v372 = *(_OWORD *)v499;
  v372[1] = *(_OWORD *)&v499[16];
  *((_BYTE *)v372 + 74) = 0;
  sub_20E8D1238(v502, 73, 1uLL);
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v373 = (const std::string::value_type *)v502;
  else
    v373 = *(const std::string::value_type **)&v502[0];
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v374 = BYTE7(v502[1]);
  else
    v374 = *((_QWORD *)&v502[0] + 1);
  std::string::append(&v501, v373, v374);
  if (SBYTE7(v502[1]) < 0)
    operator delete(*(void **)&v502[0]);
  std::string::append(&v501, ", ", 2uLL);
  v375 = operator new(0x40uLL);
  *(_QWORD *)&v502[0] = v375;
  *(_OWORD *)((char *)v502 + 8) = *(_OWORD *)&v500[64];
  *v375 = *(_OWORD *)&v500[48];
  v375[1] = *(_OWORD *)&v500[32];
  v375[2] = *(_OWORD *)&v500[16];
  *(_OWORD *)((char *)v375 + 46) = *(_OWORD *)v500;
  *((_BYTE *)v375 + 62) = 0;
  sub_20E8D1238(v502, 61, 1uLL);
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v376 = (const std::string::value_type *)v502;
  else
    v376 = *(const std::string::value_type **)&v502[0];
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v377 = BYTE7(v502[1]);
  else
    v377 = *((_QWORD *)&v502[0] + 1);
  std::string::append(&v501, v376, v377);
  if (SBYTE7(v502[1]) < 0)
    operator delete(*(void **)&v502[0]);
  std::string::append(&v501, ", ", 2uLL);
  v378 = operator new(0x60uLL);
  *(_QWORD *)&v502[0] = v378;
  *(_OWORD *)((char *)v502 + 8) = *(_OWORD *)&v498[96];
  v378[2] = *(_OWORD *)&v498[80];
  v378[3] = *(_OWORD *)&v498[64];
  v378[4] = *(_OWORD *)&v498[48];
  *(_OWORD *)((char *)v378 + 77) = *(_OWORD *)&v498[32];
  *v378 = *(_OWORD *)&v498[16];
  v378[1] = *(_OWORD *)v498;
  *((_BYTE *)v378 + 93) = 0;
  sub_20E8D1238(v502, 92, 1uLL);
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v379 = (const std::string::value_type *)v502;
  else
    v379 = *(const std::string::value_type **)&v502[0];
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v380 = BYTE7(v502[1]);
  else
    v380 = *((_QWORD *)&v502[0] + 1);
  std::string::append(&v501, v379, v380);
  if (SBYTE7(v502[1]) < 0)
    operator delete(*(void **)&v502[0]);
  if ((v501.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v381 = &v501;
  else
    v381 = (std::string *)v501.__r_.__value_.__r.__words[0];
  if ((v501.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v382 = HIBYTE(v501.__r_.__value_.__r.__words[2]);
  else
    v382 = v501.__r_.__value_.__l.__size_;
  v383 = sub_20E86A980(v369, (uint64_t)v381, v382);
  sub_20E86A980(v383, (uint64_t)"\n", 1);
  if (SHIBYTE(v501.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v501.__r_.__value_.__l.__data_);
  sub_20E86A980(a2, (uint64_t)"\tthere are ", 11);
  if (!*v80)
  {
    memset(v502, 0, 44);
    if (sub_20F8DEE48((_QWORD *)(a1 + 5168), (int *)v502, &v501, 1))
    {
      *(_QWORD *)(a1 + 7568) = *(_QWORD *)(a1 + 7560);
      *(_QWORD *)(a1 + 7592) = *(_QWORD *)(a1 + 7584);
      *(_QWORD *)(a1 + 7616) = *(_QWORD *)(a1 + 7608);
      *(_QWORD *)(a1 + 7640) = *(_QWORD *)(a1 + 7632);
      *(_QWORD *)(a1 + 7664) = *(_QWORD *)(a1 + 7656);
      *(_QWORD *)(a1 + 7688) = *(_QWORD *)(a1 + 7680);
      *(_QWORD *)(a1 + 7712) = *(_QWORD *)(a1 + 7704);
      *(_QWORD *)(a1 + 7736) = *(_QWORD *)(a1 + 7728);
      *(_QWORD *)(a1 + 7760) = *(_QWORD *)(a1 + 7752);
      *(_QWORD *)(a1 + 7784) = *(_QWORD *)(a1 + 7776);
      *(_QWORD *)(a1 + 7808) = *(_QWORD *)(a1 + 7800);
      v384 = *(_QWORD *)(a1 + 6232);
      v385 = *(_QWORD *)(a1 + 6240);
      while (v384 != v385)
      {
        v386 = *(_QWORD *)(v384 + 208);
        if (*(_BYTE *)(v384 + 496)
          || (*(_BYTE *)(v386 + 4) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v384 + 216) + 4) & 6) != 0)
        {
          sub_20F394A20(a1 + 7560, v386);
          sub_20F3D35E0((_QWORD *)(a1 + 7560), *(_QWORD *)(v384 + 216));
        }
        v384 += 504;
      }
      v387 = *(_QWORD *)(a1 + 6256);
      v388 = *(_QWORD *)(a1 + 6264);
      while (v387 != v388)
      {
        v389 = *(_QWORD *)(v387 + 136);
        if (*(_BYTE *)(v387 + 272) || (*(_BYTE *)(v389 + 4) & 6) != 0)
          sub_20F394A20(a1 + 7560, v389);
        v387 += 280;
      }
      v390 = *(_QWORD *)(a1 + 6280);
      v391 = *(_QWORD *)(a1 + 6288);
      while (v390 != v391)
      {
        v392 = *(_QWORD *)(v390 + 136);
        if (*(_BYTE *)(v390 + 272) || (*(_BYTE *)(v392 + 4) & 6) != 0)
          sub_20F599C88((_QWORD *)(a1 + 7560), v392);
        v390 += 280;
      }
      v393 = *(_QWORD *)(a1 + 6304);
      v394 = *(_QWORD *)(a1 + 6312);
      while (v393 != v394)
      {
        v395 = *(_QWORD *)(v393 + 136);
        if (*(_BYTE *)(v393 + 272) || (*(_BYTE *)(v395 + 4) & 6) != 0)
          sub_20F59A480((_QWORD *)(a1 + 7560), v395);
        v393 += 280;
      }
      v396 = *(_QWORD *)(a1 + 6328);
      v397 = *(_QWORD *)(a1 + 6336);
      while (v396 != v397)
      {
        v398 = *(_QWORD *)(v396 + 64);
        if (*(_BYTE *)(v396 + 152) || (*(_BYTE *)(v398 + 4) & 6) != 0)
          sub_20F59A2E8((_QWORD *)(a1 + 7560), v398);
        v396 += 160;
      }
      sub_20F8DF7FC(*(_QWORD *)(a1 + 6352), *(_QWORD *)(a1 + 6360), (_QWORD *)(a1 + 7560));
      sub_20F5B85BC(*(_QWORD *)(a1 + 6376), *(_QWORD *)(a1 + 6384), (_QWORD *)(a1 + 7560));
      v399 = *(_QWORD *)(a1 + 6400);
      v400 = *(_QWORD *)(a1 + 6408);
      while (v399 != v400)
      {
        v401 = *(_QWORD *)(v399 + 48);
        if (*(_BYTE *)(v399 + 136) || (*(_BYTE *)(v401 + 4) & 6) != 0)
          sub_20F3D35E0((_QWORD *)(a1 + 7560), v401);
        v399 += 144;
      }
      v402 = *(_QWORD *)(a1 + 6424);
      v403 = *(_QWORD *)(a1 + 6432);
      while (v402 != v403)
      {
        v404 = *(_QWORD *)(v402 + 48);
        if (*(_BYTE *)(v402 + 144)
          || (*(_BYTE *)(v404 + 4) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v402 + 56) + 4) & 6) != 0)
        {
          sub_20F394A20(a1 + 7560, v404);
          sub_20F394A20(a1 + 7560, *(_QWORD *)(v402 + 56));
        }
        v402 += 152;
      }
      sub_20F8DF748(*(_QWORD *)(a1 + 6448), *(_QWORD *)(a1 + 6456), (_QWORD *)(a1 + 7560));
      sub_20F8DF65C(*(_QWORD *)(a1 + 6472), *(_QWORD *)(a1 + 6480), (_QWORD *)(a1 + 7560));
      v405 = *(_QWORD *)(a1 + 6496);
      v406 = *(_QWORD *)(a1 + 6504);
      while (v405 != v406)
      {
        v407 = *(_QWORD *)(v405 + 48);
        if (*(_BYTE *)(v405 + 104) || (*(_BYTE *)(v407 + 4) & 6) != 0)
          sub_20F59A150((_QWORD *)(a1 + 7560), v407);
        v405 += 112;
      }
      v408 = *(_QWORD *)(a1 + 6520);
      v409 = *(_QWORD *)(a1 + 6528);
      while (v408 != v409)
      {
        v410 = *(_QWORD *)(v408 + 96);
        if (*(_BYTE *)(v408 + 200) || (*(_BYTE *)(v410 + 4) & 6) != 0)
          sub_20F599FB8((_QWORD *)(a1 + 7560), v410);
        v408 += 208;
      }
      v411 = *(_QWORD *)(a1 + 6544);
      v412 = *(_QWORD *)(a1 + 6552);
      while (v411 != v412)
      {
        v413 = *(_QWORD *)(v411 + 96);
        if (*(_BYTE *)(v411 + 200) || (*(_BYTE *)(v413 + 4) & 6) != 0)
          sub_20F599E20((_QWORD *)(a1 + 7560), v413);
        v411 += 208;
      }
      v414 = *(_QWORD *)(a1 + 6568);
      v415 = *(_QWORD *)(a1 + 6576);
      while (v414 != v415)
      {
        v416 = *(_QWORD *)(v414 + 80);
        if (*(_BYTE *)(v414 + 168) || (*(_BYTE *)(v416 + 4) & 6) != 0)
          sub_20F8DAC28((_QWORD *)(a1 + 7560), v416);
        v414 += 176;
      }
      v417 = *(_QWORD *)(a1 + 6592);
      v418 = *(_QWORD *)(a1 + 6600);
      while (v417 != v418)
      {
        v419 = *(_QWORD *)(v417 + 80);
        if (*(_BYTE *)(v417 + 168) || (*(_BYTE *)(v419 + 4) & 6) != 0)
          sub_20F8DADC0((_QWORD *)(a1 + 7560), v419);
        v417 += 176;
      }
      sub_20F8DF4E4(*(_QWORD *)(a1 + 6616), *(_QWORD *)(a1 + 6624), (_QWORD *)(a1 + 7560));
      sub_20F8DF3F8(*(_QWORD *)(a1 + 6640), *(_QWORD *)(a1 + 6648), (_QWORD *)(a1 + 7560));
      sub_20F8DF280(*(_QWORD *)(a1 + 6664), *(_QWORD *)(a1 + 6672), (_QWORD *)(a1 + 7560));
      sub_20F8DB0F0((_QWORD *)(a1 + 5168));
    }
  }
  v420 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v420, (uint64_t)" present in the system\n", 23);
  sub_20E86A980(a2, (uint64_t)"\tout of that ", 13);
  sub_20FB6A880(a1 + 5168, 0);
  v421 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v421, (uint64_t)" are free (", 11);
  sub_20FB6A880(a1 + 5168, 0);
  v422 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v422, (uint64_t)" DoF total)\n", 12);
  *(_QWORD *)&v502[0] = operator new(0x28uLL);
  *(_OWORD *)((char *)v502 + 8) = v495;
  strcpy(*(char **)&v502[0], "cv3d::vio::Generic3DoFVariable<double>]");
  sub_20E8D1238(v502, 38, 1uLL);
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v423 = v502;
  else
    v423 = *(_OWORD **)&v502[0];
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v424 = BYTE7(v502[1]);
  else
    v424 = *((_QWORD *)&v502[0] + 1);
  v425 = sub_20E86A980(a2, (uint64_t)v423, v424);
  sub_20E86A980(v425, (uint64_t)": ", 2);
  v426 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v426, (uint64_t)"D variable\n", 11);
  if (SBYTE7(v502[1]) < 0)
    operator delete(*(void **)&v502[0]);
  v427 = sub_20E86A980(a2, (uint64_t)"\treferenced by ", 15);
  memset(&v501, 0, sizeof(v501));
  *(_QWORD *)&v502[0] = operator new(0x60uLL);
  *(_OWORD *)((char *)v502 + 8) = v491[1];
  strcpy(*(char **)&v502[0], "cv3d::vio::GenericCalibVariablePriorFactor<double, cv3d::vio::Generic3DoFVariable<double>>]");
  sub_20E8D1238(v502, 90, 1uLL);
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v428 = (const std::string::value_type *)v502;
  else
    v428 = *(const std::string::value_type **)&v502[0];
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v429 = BYTE7(v502[1]);
  else
    v429 = *((_QWORD *)&v502[0] + 1);
  std::string::append(&v501, v428, v429);
  if (SBYTE7(v502[1]) < 0)
    operator delete(*(void **)&v502[0]);
  if ((v501.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v430 = &v501;
  else
    v430 = (std::string *)v501.__r_.__value_.__r.__words[0];
  if ((v501.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v431 = HIBYTE(v501.__r_.__value_.__r.__words[2]);
  else
    v431 = v501.__r_.__value_.__l.__size_;
  v432 = sub_20E86A980(v427, (uint64_t)v430, v431);
  sub_20E86A980(v432, (uint64_t)"\n", 1);
  if (SHIBYTE(v501.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v501.__r_.__value_.__l.__data_);
  sub_20E86A980(a2, (uint64_t)"\tforms an independent set (consider using Schur solver)\n", 56);
  sub_20E86A980(a2, (uint64_t)"\tthere are ", 11);
  if (!*v80)
  {
    memset(v502, 0, 44);
    if (sub_20F8DEE48((_QWORD *)(a1 + 5168), (int *)v502, &v501, 1))
    {
      *(_QWORD *)(a1 + 7568) = *(_QWORD *)(a1 + 7560);
      *(_QWORD *)(a1 + 7592) = *(_QWORD *)(a1 + 7584);
      *(_QWORD *)(a1 + 7616) = *(_QWORD *)(a1 + 7608);
      *(_QWORD *)(a1 + 7640) = *(_QWORD *)(a1 + 7632);
      *(_QWORD *)(a1 + 7664) = *(_QWORD *)(a1 + 7656);
      *(_QWORD *)(a1 + 7688) = *(_QWORD *)(a1 + 7680);
      *(_QWORD *)(a1 + 7712) = *(_QWORD *)(a1 + 7704);
      *(_QWORD *)(a1 + 7736) = *(_QWORD *)(a1 + 7728);
      *(_QWORD *)(a1 + 7760) = *(_QWORD *)(a1 + 7752);
      *(_QWORD *)(a1 + 7784) = *(_QWORD *)(a1 + 7776);
      *(_QWORD *)(a1 + 7808) = *(_QWORD *)(a1 + 7800);
      v433 = *(_QWORD *)(a1 + 6232);
      v434 = *(_QWORD *)(a1 + 6240);
      while (v433 != v434)
      {
        v435 = *(_QWORD *)(v433 + 208);
        if (*(_BYTE *)(v433 + 496)
          || (*(_BYTE *)(v435 + 4) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v433 + 216) + 4) & 6) != 0)
        {
          sub_20F394A20(a1 + 7560, v435);
          sub_20F3D35E0((_QWORD *)(a1 + 7560), *(_QWORD *)(v433 + 216));
        }
        v433 += 504;
      }
      v436 = *(_QWORD *)(a1 + 6256);
      v437 = *(_QWORD *)(a1 + 6264);
      while (v436 != v437)
      {
        v438 = *(_QWORD *)(v436 + 136);
        if (*(_BYTE *)(v436 + 272) || (*(_BYTE *)(v438 + 4) & 6) != 0)
          sub_20F394A20(a1 + 7560, v438);
        v436 += 280;
      }
      v439 = *(_QWORD *)(a1 + 6280);
      v440 = *(_QWORD *)(a1 + 6288);
      while (v439 != v440)
      {
        v441 = *(_QWORD *)(v439 + 136);
        if (*(_BYTE *)(v439 + 272) || (*(_BYTE *)(v441 + 4) & 6) != 0)
          sub_20F599C88((_QWORD *)(a1 + 7560), v441);
        v439 += 280;
      }
      v442 = *(_QWORD *)(a1 + 6304);
      v443 = *(_QWORD *)(a1 + 6312);
      while (v442 != v443)
      {
        v444 = *(_QWORD *)(v442 + 136);
        if (*(_BYTE *)(v442 + 272) || (*(_BYTE *)(v444 + 4) & 6) != 0)
          sub_20F59A480((_QWORD *)(a1 + 7560), v444);
        v442 += 280;
      }
      v445 = *(_QWORD *)(a1 + 6328);
      v446 = *(_QWORD *)(a1 + 6336);
      while (v445 != v446)
      {
        v447 = *(_QWORD *)(v445 + 64);
        if (*(_BYTE *)(v445 + 152) || (*(_BYTE *)(v447 + 4) & 6) != 0)
          sub_20F59A2E8((_QWORD *)(a1 + 7560), v447);
        v445 += 160;
      }
      sub_20F8DF7FC(*(_QWORD *)(a1 + 6352), *(_QWORD *)(a1 + 6360), (_QWORD *)(a1 + 7560));
      sub_20F5B85BC(*(_QWORD *)(a1 + 6376), *(_QWORD *)(a1 + 6384), (_QWORD *)(a1 + 7560));
      v448 = *(_QWORD *)(a1 + 6400);
      v449 = *(_QWORD *)(a1 + 6408);
      while (v448 != v449)
      {
        v450 = *(_QWORD *)(v448 + 48);
        if (*(_BYTE *)(v448 + 136) || (*(_BYTE *)(v450 + 4) & 6) != 0)
          sub_20F3D35E0((_QWORD *)(a1 + 7560), v450);
        v448 += 144;
      }
      v451 = *(_QWORD *)(a1 + 6424);
      v452 = *(_QWORD *)(a1 + 6432);
      while (v451 != v452)
      {
        v453 = *(_QWORD *)(v451 + 48);
        if (*(_BYTE *)(v451 + 144)
          || (*(_BYTE *)(v453 + 4) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v451 + 56) + 4) & 6) != 0)
        {
          sub_20F394A20(a1 + 7560, v453);
          sub_20F394A20(a1 + 7560, *(_QWORD *)(v451 + 56));
        }
        v451 += 152;
      }
      sub_20F8DF748(*(_QWORD *)(a1 + 6448), *(_QWORD *)(a1 + 6456), (_QWORD *)(a1 + 7560));
      sub_20F8DF65C(*(_QWORD *)(a1 + 6472), *(_QWORD *)(a1 + 6480), (_QWORD *)(a1 + 7560));
      v454 = *(_QWORD *)(a1 + 6496);
      v455 = *(_QWORD *)(a1 + 6504);
      while (v454 != v455)
      {
        v456 = *(_QWORD *)(v454 + 48);
        if (*(_BYTE *)(v454 + 104) || (*(_BYTE *)(v456 + 4) & 6) != 0)
          sub_20F59A150((_QWORD *)(a1 + 7560), v456);
        v454 += 112;
      }
      v457 = *(_QWORD *)(a1 + 6520);
      v458 = *(_QWORD *)(a1 + 6528);
      while (v457 != v458)
      {
        v459 = *(_QWORD *)(v457 + 96);
        if (*(_BYTE *)(v457 + 200) || (*(_BYTE *)(v459 + 4) & 6) != 0)
          sub_20F599FB8((_QWORD *)(a1 + 7560), v459);
        v457 += 208;
      }
      v460 = *(_QWORD *)(a1 + 6544);
      v461 = *(_QWORD *)(a1 + 6552);
      while (v460 != v461)
      {
        v462 = *(_QWORD *)(v460 + 96);
        if (*(_BYTE *)(v460 + 200) || (*(_BYTE *)(v462 + 4) & 6) != 0)
          sub_20F599E20((_QWORD *)(a1 + 7560), v462);
        v460 += 208;
      }
      v463 = *(_QWORD *)(a1 + 6568);
      v464 = *(_QWORD *)(a1 + 6576);
      while (v463 != v464)
      {
        v465 = *(_QWORD *)(v463 + 80);
        if (*(_BYTE *)(v463 + 168) || (*(_BYTE *)(v465 + 4) & 6) != 0)
          sub_20F8DAC28((_QWORD *)(a1 + 7560), v465);
        v463 += 176;
      }
      v466 = *(_QWORD *)(a1 + 6592);
      v467 = *(_QWORD *)(a1 + 6600);
      while (v466 != v467)
      {
        v468 = *(_QWORD *)(v466 + 80);
        if (*(_BYTE *)(v466 + 168) || (*(_BYTE *)(v468 + 4) & 6) != 0)
          sub_20F8DADC0((_QWORD *)(a1 + 7560), v468);
        v466 += 176;
      }
      sub_20F8DF4E4(*(_QWORD *)(a1 + 6616), *(_QWORD *)(a1 + 6624), (_QWORD *)(a1 + 7560));
      sub_20F8DF3F8(*(_QWORD *)(a1 + 6640), *(_QWORD *)(a1 + 6648), (_QWORD *)(a1 + 7560));
      sub_20F8DF280(*(_QWORD *)(a1 + 6664), *(_QWORD *)(a1 + 6672), (_QWORD *)(a1 + 7560));
      sub_20F8DB0F0(v32);
    }
  }
  v469 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v469, (uint64_t)" present in the system\n", 23);
  sub_20E86A980(a2, (uint64_t)"\tout of that ", 13);
  sub_20FB6AE6C((uint64_t)v32, 0);
  v470 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v470, (uint64_t)" are free (", 11);
  sub_20FB6AE6C((uint64_t)v32, 0);
  v471 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v471, (uint64_t)" DoF total)\n", 12);
  *(_QWORD *)&v502[0] = operator new(0x30uLL);
  *(_OWORD *)((char *)v502 + 8) = v492;
  strcpy(*(char **)&v502[0], "cv3d::vio::VIOLandmarkDepthVariable<double>]");
  sub_20E8D1238(v502, 43, 1uLL);
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v472 = v502;
  else
    v472 = *(_OWORD **)&v502[0];
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v473 = BYTE7(v502[1]);
  else
    v473 = *((_QWORD *)&v502[0] + 1);
  v474 = sub_20E86A980(a2, (uint64_t)v472, v473);
  sub_20E86A980(v474, (uint64_t)": ", 2);
  v475 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v475, (uint64_t)"D variable\n", 11);
  if (SBYTE7(v502[1]) < 0)
    operator delete(*(void **)&v502[0]);
  v476 = sub_20E86A980(a2, (uint64_t)"\treferenced by ", 15);
  memset(&v501, 0, sizeof(v501));
  v477 = operator new(0x50uLL);
  *(_QWORD *)&v502[0] = v477;
  *(_OWORD *)((char *)v502 + 8) = *(_OWORD *)&v499[80];
  v477[2] = *(_OWORD *)&v499[64];
  v477[3] = *(_OWORD *)&v499[48];
  *(_OWORD *)((char *)v477 + 58) = *(_OWORD *)&v499[32];
  *v477 = *(_OWORD *)v499;
  v477[1] = *(_OWORD *)&v499[16];
  *((_BYTE *)v477 + 74) = 0;
  sub_20E8D1238(v502, 73, 1uLL);
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v478 = (const std::string::value_type *)v502;
  else
    v478 = *(const std::string::value_type **)&v502[0];
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v479 = BYTE7(v502[1]);
  else
    v479 = *((_QWORD *)&v502[0] + 1);
  std::string::append(&v501, v478, v479);
  if (SBYTE7(v502[1]) < 0)
    operator delete(*(void **)&v502[0]);
  std::string::append(&v501, ", ", 2uLL);
  v480 = operator new(0x60uLL);
  *(_QWORD *)&v502[0] = v480;
  *(_OWORD *)((char *)v502 + 8) = *(_OWORD *)&v498[96];
  v480[2] = *(_OWORD *)&v498[80];
  v480[3] = *(_OWORD *)&v498[64];
  v480[4] = *(_OWORD *)&v498[48];
  *(_OWORD *)((char *)v480 + 77) = *(_OWORD *)&v498[32];
  *v480 = *(_OWORD *)&v498[16];
  v480[1] = *(_OWORD *)v498;
  *((_BYTE *)v480 + 93) = 0;
  sub_20E8D1238(v502, 92, 1uLL);
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v481 = (const std::string::value_type *)v502;
  else
    v481 = *(const std::string::value_type **)&v502[0];
  if ((SBYTE7(v502[1]) & 0x80u) == 0)
    v482 = BYTE7(v502[1]);
  else
    v482 = *((_QWORD *)&v502[0] + 1);
  std::string::append(&v501, v481, v482);
  if (SBYTE7(v502[1]) < 0)
    operator delete(*(void **)&v502[0]);
  if ((v501.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v483 = &v501;
  else
    v483 = (std::string *)v501.__r_.__value_.__r.__words[0];
  if ((v501.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v484 = HIBYTE(v501.__r_.__value_.__r.__words[2]);
  else
    v484 = v501.__r_.__value_.__l.__size_;
  v485 = sub_20E86A980(v476, (uint64_t)v483, v484);
  sub_20E86A980(v485, (uint64_t)"\n", 1);
  if (SHIBYTE(v501.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v501.__r_.__value_.__l.__data_);
  sub_20E86A980(a2, (uint64_t)"\tforms an independent set (consider using Schur solver)\n", 56);
  sub_20E86A980(a2, (uint64_t)"\tthere are ", 11);
  sub_20F8DE898((uint64_t)v32, 0);
  v486 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v486, (uint64_t)" present in the system\n", 23);
  sub_20E86A980(a2, (uint64_t)"\tout of that ", 13);
  sub_20FB6B458((uint64_t)v32, 0);
  v487 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v487, (uint64_t)" are free (", 11);
  sub_20FB6B458((uint64_t)v32, 0);
  v488 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v488, (uint64_t)" DoF total)\n", 12);
  sub_20E86A980(a2, (uint64_t)"\nFactor stats:\n", 15);
  return sub_20FB63BBC((uint64_t)v32, a2);
}

void sub_20FB63250(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 105) < 0)
    operator delete(*(void **)(v1 - 128));
  if (*(char *)(v1 - 153) < 0)
    operator delete(*(void **)(v1 - 176));
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20FB63BBC(uint64_t a1, _QWORD *a2)
{
  std::string *v4;
  std::string::size_type size;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  std::string *v9;
  std::string::size_type v10;
  std::string *v11;
  std::string::size_type v12;
  std::string *v13;
  std::string::size_type v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  std::string *v21;
  std::string::size_type v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  char *v26;
  std::string *v27;
  std::string::size_type v28;
  std::string *v29;
  std::string::size_type v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  std::string *v37;
  std::string::size_type v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  std::string *v42;
  std::string::size_type v43;
  std::string *v44;
  std::string::size_type v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  std::string *v52;
  std::string::size_type v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  std::string *v57;
  std::string::size_type v58;
  std::string *v59;
  std::string::size_type v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  std::string *v67;
  std::string::size_type v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  std::string *v72;
  std::string::size_type v73;
  std::string *v74;
  std::string::size_type v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  std::string *v82;
  std::string::size_type v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  char *v87;
  std::string *v88;
  std::string::size_type v89;
  _OWORD *v90;
  std::string *v91;
  std::string::size_type v92;
  char *v93;
  std::string *v94;
  std::string::size_type v95;
  _OWORD *v96;
  std::string *v97;
  std::string::size_type v98;
  std::string *v99;
  std::string::size_type v100;
  std::string *v101;
  std::string::size_type v102;
  _QWORD *v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  _QWORD *v107;
  _QWORD *v108;
  std::string *v109;
  std::string::size_type v110;
  _QWORD *v111;
  _QWORD *v112;
  _QWORD *v113;
  char *v114;
  std::string *v115;
  std::string::size_type v116;
  _OWORD *v117;
  std::string *v118;
  std::string::size_type v119;
  char *v120;
  std::string *v121;
  std::string::size_type v122;
  _OWORD *v123;
  std::string *v124;
  std::string::size_type v125;
  std::string *v126;
  std::string::size_type v127;
  _QWORD *v128;
  _QWORD *v129;
  _QWORD *v130;
  uint64_t v131;
  _QWORD *v132;
  _QWORD *v133;
  std::string *v134;
  std::string::size_type v135;
  _QWORD *v136;
  _QWORD *v137;
  _QWORD *v138;
  _OWORD *v139;
  std::string *v140;
  std::string::size_type v141;
  std::string *v142;
  std::string::size_type v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  _QWORD *v149;
  std::string *v150;
  std::string::size_type v151;
  _QWORD *v152;
  _QWORD *v153;
  _QWORD *v154;
  char *v155;
  std::string *v156;
  std::string::size_type v157;
  char *v158;
  std::string *v159;
  std::string::size_type v160;
  std::string *v161;
  std::string::size_type v162;
  _QWORD *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD *v167;
  _QWORD *v168;
  std::string *v169;
  std::string::size_type v170;
  _QWORD *v171;
  _QWORD *v172;
  _QWORD *v173;
  _OWORD *v174;
  std::string *v175;
  std::string::size_type v176;
  char *v177;
  std::string *v178;
  std::string::size_type v179;
  std::string *v180;
  std::string::size_type v181;
  std::string *v182;
  std::string::size_type v183;
  std::string *v184;
  std::string::size_type v185;
  _QWORD *v186;
  _QWORD *v187;
  _QWORD *v188;
  uint64_t v189;
  _QWORD *v190;
  _QWORD *v191;
  std::string *v192;
  std::string::size_type v193;
  _QWORD *v194;
  _QWORD *v195;
  _QWORD *v196;
  char *v197;
  std::string *v198;
  std::string::size_type v199;
  char *v200;
  std::string *v201;
  std::string::size_type v202;
  char *v203;
  std::string *v204;
  std::string::size_type v205;
  char *v206;
  std::string *v207;
  std::string::size_type v208;
  _OWORD *v209;
  std::string *v210;
  std::string::size_type v211;
  char *v212;
  std::string *v213;
  std::string::size_type v214;
  std::string *v215;
  std::string::size_type v216;
  _QWORD *v217;
  _QWORD *v218;
  _QWORD *v219;
  uint64_t v220;
  _QWORD *v221;
  _QWORD *v222;
  std::string *v223;
  std::string::size_type v224;
  _QWORD *v225;
  _QWORD *v226;
  _QWORD *v227;
  char *v228;
  std::string *v229;
  std::string::size_type v230;
  std::string *v231;
  std::string::size_type v232;
  _QWORD *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  _QWORD *v237;
  _QWORD *v238;
  std::string *v239;
  std::string::size_type v240;
  _QWORD *v241;
  _QWORD *v242;
  _QWORD *v243;
  _OWORD *v244;
  std::string *v245;
  std::string::size_type v246;
  std::string *v247;
  std::string::size_type v248;
  _QWORD *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  _QWORD *v253;
  _QWORD *v254;
  std::string *v255;
  std::string::size_type v256;
  _QWORD *v257;
  _QWORD *v258;
  _QWORD *v259;
  _WORD *v260;
  std::string *v261;
  std::string::size_type v262;
  std::string *v263;
  std::string::size_type v264;
  _QWORD *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  _QWORD *v269;
  _QWORD *v270;
  std::string *v271;
  std::string::size_type v272;
  _QWORD *v273;
  _QWORD *v274;
  _QWORD *v275;
  std::string *v276;
  std::string::size_type v277;
  std::string *v278;
  std::string::size_type v279;
  _QWORD *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  _QWORD *v284;
  _QWORD *v285;
  std::string *v286;
  std::string::size_type v287;
  _QWORD *v288;
  _QWORD *v289;
  _QWORD *v290;
  std::string *v291;
  std::string::size_type v292;
  std::string *v293;
  std::string::size_type v294;
  _QWORD *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  _QWORD *v299;
  _QWORD *v300;
  std::string *v301;
  std::string::size_type v302;
  _QWORD *v303;
  _QWORD *v304;
  _QWORD *v305;
  std::string *v306;
  std::string::size_type v307;
  _QWORD *v308;
  _QWORD *v309;
  _QWORD *v310;
  std::string *v311;
  std::string::size_type v312;
  _QWORD *v313;
  _QWORD *v314;
  _QWORD *v315;
  _OWORD *v316;
  std::string *v317;
  std::string::size_type v318;
  char *v319;
  std::string *v320;
  std::string::size_type v321;
  _OWORD *v322;
  std::string *v323;
  std::string::size_type v324;
  _WORD *v325;
  std::string *v326;
  std::string::size_type v327;
  _OWORD *v328;
  std::string *v329;
  std::string::size_type v330;
  void *v331;
  std::string *v332;
  std::string::size_type v333;
  std::string *v334;
  std::string::size_type v335;
  _QWORD *v336;
  _QWORD *v337;
  _QWORD *v338;
  uint64_t v339;
  _QWORD *v340;
  _QWORD *v341;
  std::string *v342;
  std::string::size_type v343;
  _QWORD *v344;
  _QWORD *v345;
  _QWORD *v346;
  std::string *v347;
  std::string::size_type v348;
  _QWORD *v349;
  _QWORD *v350;
  _QWORD *v351;
  _OWORD v353[2];
  __int128 v354;
  _BYTE v355[64];
  _BYTE v356[64];
  _OWORD v357[3];
  _OWORD v358[3];
  __int128 v359;
  __int128 v360;
  __int128 v361;
  _BYTE v362[64];
  _BYTE v363[48];
  std::string v364;
  std::string v365[5];
  uint64_t v366;

  v366 = *MEMORY[0x24BDAC8D0];
  v365[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
  v360 = xmmword_2102DCA20;
  *(_OWORD *)&v365[0].__r_.__value_.__r.__words[1] = xmmword_2102DCA20;
  strcpy(v365[0].__r_.__value_.__l.__data_, "cv3d::vio::VIOStatePriorFactor<double>]");
  sub_20E8D1238(v365, 38, 1uLL);
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = v365;
  else
    v4 = (std::string *)v365[0].__r_.__value_.__r.__words[0];
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v365[0].__r_.__value_.__r.__words[2]);
  else
    size = v365[0].__r_.__value_.__l.__size_;
  v6 = sub_20E86A980(a2, (uint64_t)v4, size);
  sub_20E86A980(v6, (uint64_t)": ", 2);
  v7 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v7, (uint64_t)"D factor\n", 9);
  if (SHIBYTE(v365[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v365[0].__r_.__value_.__l.__data_);
  v8 = sub_20E86A980(a2, (uint64_t)"\tconstrains ", 12);
  memset(&v364, 0, sizeof(v364));
  v365[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
  *(_WORD *)&v363[34] = 0;
  *(_DWORD *)&v363[36] = 0;
  *(_QWORD *)&v363[40] = 0x8000000000000028;
  *(_OWORD *)&v365[0].__r_.__value_.__r.__words[1] = xmmword_2102DCA10;
  strcpy(v363, "seVariable<doublcv3d::vio::VIOPo#");
  strcpy(v365[0].__r_.__value_.__l.__data_, "cv3d::vio::VIOPoseVariable<double>]");
  sub_20E8D1238(v365, 34, 1uLL);
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = v365;
  else
    v9 = (std::string *)v365[0].__r_.__value_.__r.__words[0];
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = HIBYTE(v365[0].__r_.__value_.__r.__words[2]);
  else
    v10 = v365[0].__r_.__value_.__l.__size_;
  std::string::append(&v364, (const std::string::value_type *)v9, v10);
  if (SHIBYTE(v365[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v365[0].__r_.__value_.__l.__data_);
  std::string::append(&v364, ", ", 2uLL);
  v365[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
  *(_WORD *)&v362[50] = 0;
  *(_DWORD *)&v362[52] = 0;
  *(_QWORD *)&v362[56] = 0x8000000000000038;
  *(_OWORD *)&v365[0].__r_.__value_.__r.__words[1] = xmmword_2102DCA50;
  strcpy(v365[0].__r_.__value_.__l.__data_, "cv3d::vio::VIOIMUVelocityBiasesVariable<double>]");
  strcpy(v362, "ariable<double>]UVelocityBiasesVcv3d::vio::VIOIM0");
  sub_20E8D1238(v365, 47, 1uLL);
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = v365;
  else
    v11 = (std::string *)v365[0].__r_.__value_.__r.__words[0];
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = HIBYTE(v365[0].__r_.__value_.__r.__words[2]);
  else
    v12 = v365[0].__r_.__value_.__l.__size_;
  std::string::append(&v364, (const std::string::value_type *)v11, v12);
  if (SHIBYTE(v365[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v365[0].__r_.__value_.__l.__data_);
  if ((v364.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = &v364;
  else
    v13 = (std::string *)v364.__r_.__value_.__r.__words[0];
  if ((v364.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = HIBYTE(v364.__r_.__value_.__r.__words[2]);
  else
    v14 = v364.__r_.__value_.__l.__size_;
  v15 = sub_20E86A980(v8, (uint64_t)v13, v14);
  sub_20E86A980(v15, (uint64_t)"\n", 1);
  if (SHIBYTE(v364.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v364.__r_.__value_.__l.__data_);
    if (*(_BYTE *)(a1 + 1592))
      goto LABEL_43;
  }
  else if (*(_BYTE *)(a1 + 1592))
  {
    goto LABEL_43;
  }
  if (sub_20F9210FC((_QWORD *)a1))
  {
    v16 = *(_QWORD *)(a1 + 1064);
    v17 = *(_QWORD *)(a1 + 1072);
    if (v16 != v17)
    {
      v18 = 0;
      do
      {
        if ((*(_BYTE *)(*(_QWORD *)(v16 + 208) + 4) & 6) == 0 && (*(_BYTE *)(*(_QWORD *)(v16 + 216) + 4) & 6) == 0)
          ++v18;
        v16 += 504;
      }
      while (v16 != v17);
    }
  }
LABEL_43:
  sub_20E86A980(a2, (uint64_t)"\tthere are ", 11);
  v19 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v19, (uint64_t)" present in the system (", 24);
  v20 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v20, (uint64_t)" DoF total)\n", 12);
  v365[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
  *(_OWORD *)&v365[0].__r_.__value_.__r.__words[1] = xmmword_2102DB450;
  strcpy(v365[0].__r_.__value_.__l.__data_, "cv3d::vio::VIOPosePriorFactor<double>]");
  sub_20E8D1238(v365, 37, 1uLL);
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v21 = v365;
  else
    v21 = (std::string *)v365[0].__r_.__value_.__r.__words[0];
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = HIBYTE(v365[0].__r_.__value_.__r.__words[2]);
  else
    v22 = v365[0].__r_.__value_.__l.__size_;
  v23 = sub_20E86A980(a2, (uint64_t)v21, v22);
  sub_20E86A980(v23, (uint64_t)": ", 2);
  v24 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v24, (uint64_t)"D factor\n", 9);
  if (SHIBYTE(v365[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v365[0].__r_.__value_.__l.__data_);
  v25 = sub_20E86A980(a2, (uint64_t)"\tconstrains ", 12);
  memset(&v364, 0, sizeof(v364));
  v26 = (char *)operator new(0x28uLL);
  v365[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
  *(_OWORD *)&v365[0].__r_.__value_.__r.__words[1] = *(_OWORD *)&v363[32];
  strcpy(v26 + 31, "le>]");
  *(_OWORD *)v26 = *(_OWORD *)&v363[16];
  *((_OWORD *)v26 + 1) = *(_OWORD *)v363;
  sub_20E8D1238(v365, 34, 1uLL);
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v27 = v365;
  else
    v27 = (std::string *)v365[0].__r_.__value_.__r.__words[0];
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v28 = HIBYTE(v365[0].__r_.__value_.__r.__words[2]);
  else
    v28 = v365[0].__r_.__value_.__l.__size_;
  std::string::append(&v364, (const std::string::value_type *)v27, v28);
  if (SHIBYTE(v365[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v365[0].__r_.__value_.__l.__data_);
  if ((v364.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v29 = &v364;
  else
    v29 = (std::string *)v364.__r_.__value_.__r.__words[0];
  if ((v364.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v30 = HIBYTE(v364.__r_.__value_.__r.__words[2]);
  else
    v30 = v364.__r_.__value_.__l.__size_;
  v31 = sub_20E86A980(v25, (uint64_t)v29, v30);
  sub_20E86A980(v31, (uint64_t)"\n", 1);
  if (SHIBYTE(v364.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v364.__r_.__value_.__l.__data_);
    if (*(_BYTE *)(a1 + 1592))
      goto LABEL_75;
  }
  else if (*(_BYTE *)(a1 + 1592))
  {
    goto LABEL_75;
  }
  if (sub_20F9210FC((_QWORD *)a1))
  {
    v32 = *(_QWORD *)(a1 + 1088);
    v33 = *(_QWORD *)(a1 + 1096);
    if (v32 != v33)
    {
      v34 = 0;
      do
      {
        if ((*(_BYTE *)(*(_QWORD *)(v32 + 136) + 4) & 6) == 0)
          ++v34;
        v32 += 280;
      }
      while (v32 != v33);
    }
  }
LABEL_75:
  sub_20E86A980(a2, (uint64_t)"\tthere are ", 11);
  v35 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v35, (uint64_t)" present in the system (", 24);
  v36 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v36, (uint64_t)" DoF total)\n", 12);
  v365[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x60uLL);
  v354 = xmmword_2103B84A0;
  *(_OWORD *)&v365[0].__r_.__value_.__r.__words[1] = xmmword_2103B84A0;
  strcpy(v365[0].__r_.__value_.__l.__data_, "cv3d::vio::VIOCameraExtrinsicPriorFactor<double, cv3d::vio::VIOExtrinsicsVariable<double>>]");
  sub_20E8D1238(v365, 90, 1uLL);
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v37 = v365;
  else
    v37 = (std::string *)v365[0].__r_.__value_.__r.__words[0];
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v38 = HIBYTE(v365[0].__r_.__value_.__r.__words[2]);
  else
    v38 = v365[0].__r_.__value_.__l.__size_;
  v39 = sub_20E86A980(a2, (uint64_t)v37, v38);
  sub_20E86A980(v39, (uint64_t)": ", 2);
  v40 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v40, (uint64_t)"D factor\n", 9);
  if (SHIBYTE(v365[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v365[0].__r_.__value_.__l.__data_);
  v41 = sub_20E86A980(a2, (uint64_t)"\tconstrains ", 12);
  memset(&v364, 0, sizeof(v364));
  v365[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
  v361 = xmmword_2102DCA00;
  *(_OWORD *)&v365[0].__r_.__value_.__r.__words[1] = xmmword_2102DCA00;
  strcpy(v365[0].__r_.__value_.__l.__data_, "cv3d::vio::VIOExtrinsicsVariable<double>]");
  qmemcpy(v358, "ariable<double>]trinsicsVariablecv3d::vio::VIOEx", sizeof(v358));
  sub_20E8D1238(v365, 40, 1uLL);
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v42 = v365;
  else
    v42 = (std::string *)v365[0].__r_.__value_.__r.__words[0];
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v43 = HIBYTE(v365[0].__r_.__value_.__r.__words[2]);
  else
    v43 = v365[0].__r_.__value_.__l.__size_;
  std::string::append(&v364, (const std::string::value_type *)v42, v43);
  if (SHIBYTE(v365[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v365[0].__r_.__value_.__l.__data_);
  if ((v364.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v44 = &v364;
  else
    v44 = (std::string *)v364.__r_.__value_.__r.__words[0];
  if ((v364.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v45 = HIBYTE(v364.__r_.__value_.__r.__words[2]);
  else
    v45 = v364.__r_.__value_.__l.__size_;
  v46 = sub_20E86A980(v41, (uint64_t)v44, v45);
  sub_20E86A980(v46, (uint64_t)"\n", 1);
  if (SHIBYTE(v364.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v364.__r_.__value_.__l.__data_);
    if (*(_BYTE *)(a1 + 1592))
      goto LABEL_107;
  }
  else if (*(_BYTE *)(a1 + 1592))
  {
    goto LABEL_107;
  }
  if (sub_20F9210FC((_QWORD *)a1))
  {
    v47 = *(_QWORD *)(a1 + 1112);
    v48 = *(_QWORD *)(a1 + 1120);
    if (v47 != v48)
    {
      v49 = 0;
      do
      {
        if ((*(_BYTE *)(*(_QWORD *)(v47 + 136) + 4) & 6) == 0)
          ++v49;
        v47 += 280;
      }
      while (v47 != v48);
    }
  }
LABEL_107:
  sub_20E86A980(a2, (uint64_t)"\tthere are ", 11);
  v50 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v50, (uint64_t)" present in the system (", 24);
  v51 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v51, (uint64_t)" DoF total)\n", 12);
  v365[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x68uLL);
  *(_OWORD *)&v365[0].__r_.__value_.__r.__words[1] = xmmword_2103B8450;
  strcpy(v365[0].__r_.__value_.__l.__data_, "cv3d::vio::VIOCameraExtrinsicPriorFactor<double, cv3d::vio::VIODepthExtrinsicsVariable<double>>]");
  sub_20E8D1238(v365, 95, 1uLL);
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v52 = v365;
  else
    v52 = (std::string *)v365[0].__r_.__value_.__r.__words[0];
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v53 = HIBYTE(v365[0].__r_.__value_.__r.__words[2]);
  else
    v53 = v365[0].__r_.__value_.__l.__size_;
  v54 = sub_20E86A980(a2, (uint64_t)v52, v53);
  sub_20E86A980(v54, (uint64_t)": ", 2);
  v55 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v55, (uint64_t)"D factor\n", 9);
  if (SHIBYTE(v365[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v365[0].__r_.__value_.__l.__data_);
  v56 = sub_20E86A980(a2, (uint64_t)"\tconstrains ", 12);
  memset(&v364, 0, sizeof(v364));
  v365[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
  *(_WORD *)&v355[50] = 0;
  *(_DWORD *)&v355[52] = 0;
  *(_QWORD *)&v355[56] = 0x8000000000000030;
  *(_OWORD *)&v365[0].__r_.__value_.__r.__words[1] = xmmword_2102DBF00;
  strcpy(v365[0].__r_.__value_.__l.__data_, "cv3d::vio::VIODepthExtrinsicsVariable<double>]");
  strcpy(v355, "ariable<double>]pthExtrinsicsVarcv3d::vio::VIODe.");
  sub_20E8D1238(v365, 45, 1uLL);
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v57 = v365;
  else
    v57 = (std::string *)v365[0].__r_.__value_.__r.__words[0];
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v58 = HIBYTE(v365[0].__r_.__value_.__r.__words[2]);
  else
    v58 = v365[0].__r_.__value_.__l.__size_;
  std::string::append(&v364, (const std::string::value_type *)v57, v58);
  if (SHIBYTE(v365[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v365[0].__r_.__value_.__l.__data_);
  if ((v364.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v59 = &v364;
  else
    v59 = (std::string *)v364.__r_.__value_.__r.__words[0];
  if ((v364.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v60 = HIBYTE(v364.__r_.__value_.__r.__words[2]);
  else
    v60 = v364.__r_.__value_.__l.__size_;
  v61 = sub_20E86A980(v56, (uint64_t)v59, v60);
  sub_20E86A980(v61, (uint64_t)"\n", 1);
  if (SHIBYTE(v364.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v364.__r_.__value_.__l.__data_);
    if (*(_BYTE *)(a1 + 1592))
      goto LABEL_139;
  }
  else if (*(_BYTE *)(a1 + 1592))
  {
    goto LABEL_139;
  }
  if (sub_20F9210FC((_QWORD *)a1))
  {
    v62 = *(_QWORD *)(a1 + 1136);
    v63 = *(_QWORD *)(a1 + 1144);
    if (v62 != v63)
    {
      v64 = 0;
      do
      {
        if ((*(_BYTE *)(*(_QWORD *)(v62 + 136) + 4) & 6) == 0)
          ++v64;
        v62 += 280;
      }
      while (v62 != v63);
    }
  }
LABEL_139:
  sub_20E86A980(a2, (uint64_t)"\tthere are ", 11);
  v65 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v65, (uint64_t)" present in the system (", 24);
  v66 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v66, (uint64_t)" DoF total)\n", 12);
  v365[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x58uLL);
  *(_OWORD *)&v365[0].__r_.__value_.__r.__words[1] = xmmword_2103134C0;
  strcpy(v365[0].__r_.__value_.__l.__data_, "cv3d::vio::VIOSLAMLandmarkPriorFactor<double, cv3d::vio::VIOLandmarkVariable<double>>]");
  sub_20E8D1238(v365, 85, 1uLL);
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v67 = v365;
  else
    v67 = (std::string *)v365[0].__r_.__value_.__r.__words[0];
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v68 = HIBYTE(v365[0].__r_.__value_.__r.__words[2]);
  else
    v68 = v365[0].__r_.__value_.__l.__size_;
  v69 = sub_20E86A980(a2, (uint64_t)v67, v68);
  sub_20E86A980(v69, (uint64_t)": ", 2);
  v70 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v70, (uint64_t)"D factor\n", 9);
  if (SHIBYTE(v365[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v365[0].__r_.__value_.__l.__data_);
  v71 = sub_20E86A980(a2, (uint64_t)"\tconstrains ", 12);
  memset(&v364, 0, sizeof(v364));
  v365[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
  *(_OWORD *)&v365[0].__r_.__value_.__r.__words[1] = v360;
  qmemcpy(v353, "ndmarkVariable<dcv3d::vio::VIOLa", sizeof(v353));
  strcpy(v365[0].__r_.__value_.__l.__data_, "cv3d::vio::VIOLandmarkVariable<double>]");
  sub_20E8D1238(v365, 38, 1uLL);
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v72 = v365;
  else
    v72 = (std::string *)v365[0].__r_.__value_.__r.__words[0];
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v73 = HIBYTE(v365[0].__r_.__value_.__r.__words[2]);
  else
    v73 = v365[0].__r_.__value_.__l.__size_;
  std::string::append(&v364, (const std::string::value_type *)v72, v73);
  if (SHIBYTE(v365[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v365[0].__r_.__value_.__l.__data_);
  if ((v364.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v74 = &v364;
  else
    v74 = (std::string *)v364.__r_.__value_.__r.__words[0];
  if ((v364.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v75 = HIBYTE(v364.__r_.__value_.__r.__words[2]);
  else
    v75 = v364.__r_.__value_.__l.__size_;
  v76 = sub_20E86A980(v71, (uint64_t)v74, v75);
  sub_20E86A980(v76, (uint64_t)"\n", 1);
  if (SHIBYTE(v364.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v364.__r_.__value_.__l.__data_);
    if (*(_BYTE *)(a1 + 1592))
      goto LABEL_171;
  }
  else if (*(_BYTE *)(a1 + 1592))
  {
    goto LABEL_171;
  }
  if (sub_20F9210FC((_QWORD *)a1))
  {
    v77 = *(_QWORD *)(a1 + 1160);
    v78 = *(_QWORD *)(a1 + 1168);
    if (v77 != v78)
    {
      v79 = 0;
      do
      {
        if ((*(_BYTE *)(*(_QWORD *)(v77 + 64) + 4) & 6) == 0)
          ++v79;
        v77 += 160;
      }
      while (v77 != v78);
    }
  }
LABEL_171:
  sub_20E86A980(a2, (uint64_t)"\tthere are ", 11);
  v80 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v80, (uint64_t)" present in the system (", 24);
  v81 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v81, (uint64_t)" DoF total)\n", 12);
  v365[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
  v359 = xmmword_2102E3F60;
  *(_OWORD *)&v365[0].__r_.__value_.__r.__words[1] = xmmword_2102E3F60;
  strcpy(v365[0].__r_.__value_.__l.__data_, "cv3d::vio::VIOIMUWithDeltaTimeFactor<double>]");
  sub_20E8D1238(v365, 44, 1uLL);
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v82 = v365;
  else
    v82 = (std::string *)v365[0].__r_.__value_.__r.__words[0];
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v83 = HIBYTE(v365[0].__r_.__value_.__r.__words[2]);
  else
    v83 = v365[0].__r_.__value_.__l.__size_;
  v84 = sub_20E86A980(a2, (uint64_t)v82, v83);
  sub_20E86A980(v84, (uint64_t)": ", 2);
  v85 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v85, (uint64_t)"D factor\n", 9);
  if (SHIBYTE(v365[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v365[0].__r_.__value_.__l.__data_);
  v86 = sub_20E86A980(a2, (uint64_t)"\tconstrains ", 12);
  memset(&v364, 0, sizeof(v364));
  v87 = (char *)operator new(0x28uLL);
  v365[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v87;
  *(_OWORD *)&v365[0].__r_.__value_.__r.__words[1] = *(_OWORD *)&v363[32];
  strcpy(v87 + 31, "le>]");
  *(_OWORD *)v87 = *(_OWORD *)&v363[16];
  *((_OWORD *)v87 + 1) = *(_OWORD *)v363;
  sub_20E8D1238(v365, 34, 1uLL);
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v88 = v365;
  else
    v88 = (std::string *)v365[0].__r_.__value_.__r.__words[0];
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v89 = HIBYTE(v365[0].__r_.__value_.__r.__words[2]);
  else
    v89 = v365[0].__r_.__value_.__l.__size_;
  std::string::append(&v364, (const std::string::value_type *)v88, v89);
  if (SHIBYTE(v365[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v365[0].__r_.__value_.__l.__data_);
  std::string::append(&v364, ", ", 2uLL);
  v90 = operator new(0x38uLL);
  v365[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v90;
  *(_OWORD *)&v365[0].__r_.__value_.__r.__words[1] = *(_OWORD *)&v362[48];
  *v90 = *(_OWORD *)&v362[32];
  v90[1] = *(_OWORD *)&v362[16];
  v90[2] = *(_OWORD *)v362;
  *((_BYTE *)v90 + 48) = 0;
  sub_20E8D1238(v365, 47, 1uLL);
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v91 = v365;
  else
    v91 = (std::string *)v365[0].__r_.__value_.__r.__words[0];
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v92 = HIBYTE(v365[0].__r_.__value_.__r.__words[2]);
  else
    v92 = v365[0].__r_.__value_.__l.__size_;
  std::string::append(&v364, (const std::string::value_type *)v91, v92);
  if (SHIBYTE(v365[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v365[0].__r_.__value_.__l.__data_);
  std::string::append(&v364, ", ", 2uLL);
  v93 = (char *)operator new(0x28uLL);
  v365[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v93;
  *(_OWORD *)&v365[0].__r_.__value_.__r.__words[1] = *(_OWORD *)&v363[32];
  strcpy(v93 + 31, "le>]");
  *(_OWORD *)v93 = *(_OWORD *)&v363[16];
  *((_OWORD *)v93 + 1) = *(_OWORD *)v363;
  sub_20E8D1238(v365, 34, 1uLL);
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v94 = v365;
  else
    v94 = (std::string *)v365[0].__r_.__value_.__r.__words[0];
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v95 = HIBYTE(v365[0].__r_.__value_.__r.__words[2]);
  else
    v95 = v365[0].__r_.__value_.__l.__size_;
  std::string::append(&v364, (const std::string::value_type *)v94, v95);
  if (SHIBYTE(v365[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v365[0].__r_.__value_.__l.__data_);
  std::string::append(&v364, ", ", 2uLL);
  v96 = operator new(0x38uLL);
  v365[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v96;
  *(_OWORD *)&v365[0].__r_.__value_.__r.__words[1] = *(_OWORD *)&v362[48];
  *v96 = *(_OWORD *)&v362[32];
  v96[1] = *(_OWORD *)&v362[16];
  v96[2] = *(_OWORD *)v362;
  *((_BYTE *)v96 + 48) = 0;
  sub_20E8D1238(v365, 47, 1uLL);
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v97 = v365;
  else
    v97 = (std::string *)v365[0].__r_.__value_.__r.__words[0];
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v98 = HIBYTE(v365[0].__r_.__value_.__r.__words[2]);
  else
    v98 = v365[0].__r_.__value_.__l.__size_;
  std::string::append(&v364, (const std::string::value_type *)v97, v98);
  if (SHIBYTE(v365[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v365[0].__r_.__value_.__l.__data_);
  std::string::append(&v364, ", ", 2uLL);
  v365[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  v357[2] = xmmword_2102DBF70;
  *(_OWORD *)&v365[0].__r_.__value_.__r.__words[1] = xmmword_2102DBF70;
  strcpy(v365[0].__r_.__value_.__l.__data_, "cv3d::vio::TimeOffsetVariable]");
  qmemcpy(v357, "eOffsetVariable]cv3d::vio::TimeO", 32);
  sub_20E8D1238(v365, 29, 1uLL);
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v99 = v365;
  else
    v99 = (std::string *)v365[0].__r_.__value_.__r.__words[0];
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v100 = HIBYTE(v365[0].__r_.__value_.__r.__words[2]);
  else
    v100 = v365[0].__r_.__value_.__l.__size_;
  std::string::append(&v364, (const std::string::value_type *)v99, v100);
  if (SHIBYTE(v365[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v365[0].__r_.__value_.__l.__data_);
  if ((v364.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v101 = &v364;
  else
    v101 = (std::string *)v364.__r_.__value_.__r.__words[0];
  if ((v364.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v102 = HIBYTE(v364.__r_.__value_.__r.__words[2]);
  else
    v102 = v364.__r_.__value_.__l.__size_;
  v103 = sub_20E86A980(v86, (uint64_t)v101, v102);
  sub_20E86A980(v103, (uint64_t)"\n", 1);
  if (SHIBYTE(v364.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v364.__r_.__value_.__l.__data_);
    if (*(_BYTE *)(a1 + 1592))
      goto LABEL_240;
  }
  else if (*(_BYTE *)(a1 + 1592))
  {
    goto LABEL_240;
  }
  if (sub_20F9210FC((_QWORD *)a1))
  {
    v104 = *(_QWORD **)(a1 + 1184);
    v105 = *(_QWORD **)(a1 + 1192);
    if (v104 != v105)
    {
      v106 = 0;
      do
      {
        if ((*(_BYTE *)(v104[962] + 4) & 6) == 0
          && (*(_BYTE *)(v104[963] + 4) & 6) == 0
          && (*(_BYTE *)(v104[964] + 4) & 6) == 0
          && (*(_BYTE *)(v104[965] + 4) & 6) == 0
          && (*(_BYTE *)(v104[966] + 4) & 6) == 0)
        {
          ++v106;
        }
        v104 += 1002;
      }
      while (v104 != v105);
    }
  }
LABEL_240:
  sub_20E86A980(a2, (uint64_t)"\tthere are ", 11);
  v107 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v107, (uint64_t)" present in the system (", 24);
  v108 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v108, (uint64_t)" DoF total)\n", 12);
  v365[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
  *(_OWORD *)&v365[0].__r_.__value_.__r.__words[1] = xmmword_2102DC900;
  strcpy(v365[0].__r_.__value_.__l.__data_, "cv3d::vio::VIOPreintegrateIMUFactor<double>]");
  sub_20E8D1238(v365, 43, 1uLL);
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v109 = v365;
  else
    v109 = (std::string *)v365[0].__r_.__value_.__r.__words[0];
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v110 = HIBYTE(v365[0].__r_.__value_.__r.__words[2]);
  else
    v110 = v365[0].__r_.__value_.__l.__size_;
  v111 = sub_20E86A980(a2, (uint64_t)v109, v110);
  sub_20E86A980(v111, (uint64_t)": ", 2);
  v112 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v112, (uint64_t)"D factor\n", 9);
  if (SHIBYTE(v365[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v365[0].__r_.__value_.__l.__data_);
  v113 = sub_20E86A980(a2, (uint64_t)"\tconstrains ", 12);
  memset(&v364, 0, sizeof(v364));
  v114 = (char *)operator new(0x28uLL);
  v365[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v114;
  *(_OWORD *)&v365[0].__r_.__value_.__r.__words[1] = *(_OWORD *)&v363[32];
  strcpy(v114 + 31, "le>]");
  *(_OWORD *)v114 = *(_OWORD *)&v363[16];
  *((_OWORD *)v114 + 1) = *(_OWORD *)v363;
  sub_20E8D1238(v365, 34, 1uLL);
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v115 = v365;
  else
    v115 = (std::string *)v365[0].__r_.__value_.__r.__words[0];
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v116 = HIBYTE(v365[0].__r_.__value_.__r.__words[2]);
  else
    v116 = v365[0].__r_.__value_.__l.__size_;
  std::string::append(&v364, (const std::string::value_type *)v115, v116);
  if (SHIBYTE(v365[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v365[0].__r_.__value_.__l.__data_);
  std::string::append(&v364, ", ", 2uLL);
  v117 = operator new(0x38uLL);
  v365[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v117;
  *(_OWORD *)&v365[0].__r_.__value_.__r.__words[1] = *(_OWORD *)&v362[48];
  *v117 = *(_OWORD *)&v362[32];
  v117[1] = *(_OWORD *)&v362[16];
  v117[2] = *(_OWORD *)v362;
  *((_BYTE *)v117 + 48) = 0;
  sub_20E8D1238(v365, 47, 1uLL);
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v118 = v365;
  else
    v118 = (std::string *)v365[0].__r_.__value_.__r.__words[0];
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v119 = HIBYTE(v365[0].__r_.__value_.__r.__words[2]);
  else
    v119 = v365[0].__r_.__value_.__l.__size_;
  std::string::append(&v364, (const std::string::value_type *)v118, v119);
  if (SHIBYTE(v365[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v365[0].__r_.__value_.__l.__data_);
  std::string::append(&v364, ", ", 2uLL);
  v120 = (char *)operator new(0x28uLL);
  v365[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v120;
  *(_OWORD *)&v365[0].__r_.__value_.__r.__words[1] = *(_OWORD *)&v363[32];
  strcpy(v120 + 31, "le>]");
  *(_OWORD *)v120 = *(_OWORD *)&v363[16];
  *((_OWORD *)v120 + 1) = *(_OWORD *)v363;
  sub_20E8D1238(v365, 34, 1uLL);
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v121 = v365;
  else
    v121 = (std::string *)v365[0].__r_.__value_.__r.__words[0];
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v122 = HIBYTE(v365[0].__r_.__value_.__r.__words[2]);
  else
    v122 = v365[0].__r_.__value_.__l.__size_;
  std::string::append(&v364, (const std::string::value_type *)v121, v122);
  if (SHIBYTE(v365[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v365[0].__r_.__value_.__l.__data_);
  std::string::append(&v364, ", ", 2uLL);
  v123 = operator new(0x38uLL);
  v365[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v123;
  *(_OWORD *)&v365[0].__r_.__value_.__r.__words[1] = *(_OWORD *)&v362[48];
  *v123 = *(_OWORD *)&v362[32];
  v123[1] = *(_OWORD *)&v362[16];
  v123[2] = *(_OWORD *)v362;
  *((_BYTE *)v123 + 48) = 0;
  sub_20E8D1238(v365, 47, 1uLL);
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v124 = v365;
  else
    v124 = (std::string *)v365[0].__r_.__value_.__r.__words[0];
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v125 = HIBYTE(v365[0].__r_.__value_.__r.__words[2]);
  else
    v125 = v365[0].__r_.__value_.__l.__size_;
  std::string::append(&v364, (const std::string::value_type *)v124, v125);
  if (SHIBYTE(v365[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v365[0].__r_.__value_.__l.__data_);
  if ((v364.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v126 = &v364;
  else
    v126 = (std::string *)v364.__r_.__value_.__r.__words[0];
  if ((v364.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v127 = HIBYTE(v364.__r_.__value_.__r.__words[2]);
  else
    v127 = v364.__r_.__value_.__l.__size_;
  v128 = sub_20E86A980(v113, (uint64_t)v126, v127);
  sub_20E86A980(v128, (uint64_t)"\n", 1);
  if (SHIBYTE(v364.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v364.__r_.__value_.__l.__data_);
    if (*(_BYTE *)(a1 + 1592))
      goto LABEL_300;
  }
  else if (*(_BYTE *)(a1 + 1592))
  {
    goto LABEL_300;
  }
  if (sub_20F9210FC((_QWORD *)a1))
  {
    v129 = *(_QWORD **)(a1 + 1208);
    v130 = *(_QWORD **)(a1 + 1216);
    if (v129 != v130)
    {
      v131 = 0;
      do
      {
        if ((*(_BYTE *)(v129[628] + 4) & 6) == 0
          && (*(_BYTE *)(v129[629] + 4) & 6) == 0
          && (*(_BYTE *)(v129[630] + 4) & 6) == 0
          && (*(_BYTE *)(v129[631] + 4) & 6) == 0)
        {
          ++v131;
        }
        v129 += 667;
      }
      while (v129 != v130);
    }
  }
LABEL_300:
  sub_20E86A980(a2, (uint64_t)"\tthere are ", 11);
  v132 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v132, (uint64_t)" present in the system (", 24);
  v133 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v133, (uint64_t)" DoF total)\n", 12);
  v365[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
  *(_OWORD *)&v365[0].__r_.__value_.__r.__words[1] = v361;
  strcpy(v365[0].__r_.__value_.__l.__data_, "cv3d::vio::VIOZeroVelocityFactor<double>]");
  sub_20E8D1238(v365, 40, 1uLL);
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v134 = v365;
  else
    v134 = (std::string *)v365[0].__r_.__value_.__r.__words[0];
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v135 = HIBYTE(v365[0].__r_.__value_.__r.__words[2]);
  else
    v135 = v365[0].__r_.__value_.__l.__size_;
  v136 = sub_20E86A980(a2, (uint64_t)v134, v135);
  sub_20E86A980(v136, (uint64_t)": ", 2);
  v137 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v137, (uint64_t)"D factor\n", 9);
  if (SHIBYTE(v365[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v365[0].__r_.__value_.__l.__data_);
  v138 = sub_20E86A980(a2, (uint64_t)"\tconstrains ", 12);
  memset(&v364, 0, sizeof(v364));
  v139 = operator new(0x38uLL);
  v365[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v139;
  *(_OWORD *)&v365[0].__r_.__value_.__r.__words[1] = *(_OWORD *)&v362[48];
  *v139 = *(_OWORD *)&v362[32];
  v139[1] = *(_OWORD *)&v362[16];
  v139[2] = *(_OWORD *)v362;
  *((_BYTE *)v139 + 48) = 0;
  sub_20E8D1238(v365, 47, 1uLL);
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v140 = v365;
  else
    v140 = (std::string *)v365[0].__r_.__value_.__r.__words[0];
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v141 = HIBYTE(v365[0].__r_.__value_.__r.__words[2]);
  else
    v141 = v365[0].__r_.__value_.__l.__size_;
  std::string::append(&v364, (const std::string::value_type *)v140, v141);
  if (SHIBYTE(v365[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v365[0].__r_.__value_.__l.__data_);
  if ((v364.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v142 = &v364;
  else
    v142 = (std::string *)v364.__r_.__value_.__r.__words[0];
  if ((v364.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v143 = HIBYTE(v364.__r_.__value_.__r.__words[2]);
  else
    v143 = v364.__r_.__value_.__l.__size_;
  v144 = sub_20E86A980(v138, (uint64_t)v142, v143);
  sub_20E86A980(v144, (uint64_t)"\n", 1);
  if (SHIBYTE(v364.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v364.__r_.__value_.__l.__data_);
    if (*(_BYTE *)(a1 + 1592))
      goto LABEL_332;
  }
  else if (*(_BYTE *)(a1 + 1592))
  {
    goto LABEL_332;
  }
  if (sub_20F9210FC((_QWORD *)a1))
  {
    v145 = *(_QWORD *)(a1 + 1232);
    v146 = *(_QWORD *)(a1 + 1240);
    if (v145 != v146)
    {
      v147 = 0;
      do
      {
        if ((*(_BYTE *)(*(_QWORD *)(v145 + 48) + 4) & 6) == 0)
          ++v147;
        v145 += 144;
      }
      while (v145 != v146);
    }
  }
LABEL_332:
  sub_20E86A980(a2, (uint64_t)"\tthere are ", 11);
  v148 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v148, (uint64_t)" present in the system (", 24);
  v149 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v149, (uint64_t)" DoF total)\n", 12);
  v365[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
  *(_OWORD *)&v365[0].__r_.__value_.__r.__words[1] = v359;
  strcpy(v365[0].__r_.__value_.__l.__data_, "cv3d::vio::VIOZeroDisplacementFactor<double>]");
  sub_20E8D1238(v365, 44, 1uLL);
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v150 = v365;
  else
    v150 = (std::string *)v365[0].__r_.__value_.__r.__words[0];
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v151 = HIBYTE(v365[0].__r_.__value_.__r.__words[2]);
  else
    v151 = v365[0].__r_.__value_.__l.__size_;
  v152 = sub_20E86A980(a2, (uint64_t)v150, v151);
  sub_20E86A980(v152, (uint64_t)": ", 2);
  v153 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v153, (uint64_t)"D factor\n", 9);
  if (SHIBYTE(v365[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v365[0].__r_.__value_.__l.__data_);
  v154 = sub_20E86A980(a2, (uint64_t)"\tconstrains ", 12);
  memset(&v364, 0, sizeof(v364));
  v155 = (char *)operator new(0x28uLL);
  v365[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v155;
  *(_OWORD *)&v365[0].__r_.__value_.__r.__words[1] = *(_OWORD *)&v363[32];
  strcpy(v155 + 31, "le>]");
  *(_OWORD *)v155 = *(_OWORD *)&v363[16];
  *((_OWORD *)v155 + 1) = *(_OWORD *)v363;
  sub_20E8D1238(v365, 34, 1uLL);
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v156 = v365;
  else
    v156 = (std::string *)v365[0].__r_.__value_.__r.__words[0];
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v157 = HIBYTE(v365[0].__r_.__value_.__r.__words[2]);
  else
    v157 = v365[0].__r_.__value_.__l.__size_;
  std::string::append(&v364, (const std::string::value_type *)v156, v157);
  if (SHIBYTE(v365[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v365[0].__r_.__value_.__l.__data_);
  std::string::append(&v364, ", ", 2uLL);
  v158 = (char *)operator new(0x28uLL);
  v365[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v158;
  *(_OWORD *)&v365[0].__r_.__value_.__r.__words[1] = *(_OWORD *)&v363[32];
  strcpy(v158 + 31, "le>]");
  *(_OWORD *)v158 = *(_OWORD *)&v363[16];
  *((_OWORD *)v158 + 1) = *(_OWORD *)v363;
  sub_20E8D1238(v365, 34, 1uLL);
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v159 = v365;
  else
    v159 = (std::string *)v365[0].__r_.__value_.__r.__words[0];
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v160 = HIBYTE(v365[0].__r_.__value_.__r.__words[2]);
  else
    v160 = v365[0].__r_.__value_.__l.__size_;
  std::string::append(&v364, (const std::string::value_type *)v159, v160);
  if (SHIBYTE(v365[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v365[0].__r_.__value_.__l.__data_);
  if ((v364.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v161 = &v364;
  else
    v161 = (std::string *)v364.__r_.__value_.__r.__words[0];
  if ((v364.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v162 = HIBYTE(v364.__r_.__value_.__r.__words[2]);
  else
    v162 = v364.__r_.__value_.__l.__size_;
  v163 = sub_20E86A980(v154, (uint64_t)v161, v162);
  sub_20E86A980(v163, (uint64_t)"\n", 1);
  if (SHIBYTE(v364.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v364.__r_.__value_.__l.__data_);
    if (*(_BYTE *)(a1 + 1592))
      goto LABEL_374;
  }
  else if (*(_BYTE *)(a1 + 1592))
  {
    goto LABEL_374;
  }
  if (sub_20F9210FC((_QWORD *)a1))
  {
    v164 = *(_QWORD *)(a1 + 1256);
    v165 = *(_QWORD *)(a1 + 1264);
    if (v164 != v165)
    {
      v166 = 0;
      do
      {
        if ((*(_BYTE *)(*(_QWORD *)(v164 + 48) + 4) & 6) == 0 && (*(_BYTE *)(*(_QWORD *)(v164 + 56) + 4) & 6) == 0)
          ++v166;
        v164 += 152;
      }
      while (v164 != v165);
    }
  }
LABEL_374:
  sub_20E86A980(a2, (uint64_t)"\tthere are ", 11);
  v167 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v167, (uint64_t)" present in the system (", 24);
  v168 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v168, (uint64_t)" DoF total)\n", 12);
  v365[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
  *(_OWORD *)&v365[0].__r_.__value_.__r.__words[1] = xmmword_2102DC8D0;
  strcpy(v365[0].__r_.__value_.__l.__data_, "cv3d::vio::VIOMapLandmarkFactor<double>]");
  sub_20E8D1238(v365, 39, 1uLL);
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v169 = v365;
  else
    v169 = (std::string *)v365[0].__r_.__value_.__r.__words[0];
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v170 = HIBYTE(v365[0].__r_.__value_.__r.__words[2]);
  else
    v170 = v365[0].__r_.__value_.__l.__size_;
  v171 = sub_20E86A980(a2, (uint64_t)v169, v170);
  sub_20E86A980(v171, (uint64_t)": ", 2);
  v172 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v172, (uint64_t)"D factor\n", 9);
  if (SHIBYTE(v365[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v365[0].__r_.__value_.__l.__data_);
  v173 = sub_20E86A980(a2, (uint64_t)"\tconstrains ", 12);
  memset(&v364, 0, sizeof(v364));
  v174 = operator new(0x30uLL);
  v365[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v174;
  *(_OWORD *)&v365[0].__r_.__value_.__r.__words[1] = v361;
  *v174 = v358[2];
  v174[1] = v358[1];
  *(_OWORD *)((char *)v174 + 25) = v358[0];
  *((_BYTE *)v174 + 41) = 0;
  sub_20E8D1238(v365, 40, 1uLL);
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v175 = v365;
  else
    v175 = (std::string *)v365[0].__r_.__value_.__r.__words[0];
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v176 = HIBYTE(v365[0].__r_.__value_.__r.__words[2]);
  else
    v176 = v365[0].__r_.__value_.__l.__size_;
  std::string::append(&v364, (const std::string::value_type *)v175, v176);
  if (SHIBYTE(v365[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v365[0].__r_.__value_.__l.__data_);
  std::string::append(&v364, ", ", 2uLL);
  v177 = (char *)operator new(0x28uLL);
  v365[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v177;
  *(_OWORD *)&v365[0].__r_.__value_.__r.__words[1] = *(_OWORD *)&v363[32];
  strcpy(v177 + 31, "le>]");
  *(_OWORD *)v177 = *(_OWORD *)&v363[16];
  *((_OWORD *)v177 + 1) = *(_OWORD *)v363;
  sub_20E8D1238(v365, 34, 1uLL);
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v178 = v365;
  else
    v178 = (std::string *)v365[0].__r_.__value_.__r.__words[0];
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v179 = HIBYTE(v365[0].__r_.__value_.__r.__words[2]);
  else
    v179 = v365[0].__r_.__value_.__l.__size_;
  std::string::append(&v364, (const std::string::value_type *)v178, v179);
  if (SHIBYTE(v365[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v365[0].__r_.__value_.__l.__data_);
  std::string::append(&v364, ", ", 2uLL);
  v365[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
  *(_WORD *)&v362[50] = 0;
  *(_DWORD *)&v362[52] = 0;
  *(_QWORD *)&v362[56] = 0x8000000000000030;
  *(_OWORD *)&v365[0].__r_.__value_.__r.__words[1] = xmmword_2102DC8E0;
  strcpy(v365[0].__r_.__value_.__l.__data_, "cv3d::vio::IntrinsicsCalibVariable<double>]");
  strcpy(v362, "ariable<double>]nsicsCalibVariabcv3d::vio::Intri+");
  sub_20E8D1238(v365, 42, 1uLL);
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v180 = v365;
  else
    v180 = (std::string *)v365[0].__r_.__value_.__r.__words[0];
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v181 = HIBYTE(v365[0].__r_.__value_.__r.__words[2]);
  else
    v181 = v365[0].__r_.__value_.__l.__size_;
  std::string::append(&v364, (const std::string::value_type *)v180, v181);
  if (SHIBYTE(v365[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v365[0].__r_.__value_.__l.__data_);
  std::string::append(&v364, ", ", 2uLL);
  v365[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
  *(_WORD *)&v356[50] = 0;
  *(_DWORD *)&v356[52] = 0;
  *(_QWORD *)&v356[56] = 0x8000000000000038;
  *(_OWORD *)&v365[0].__r_.__value_.__r.__words[1] = xmmword_2102DC7C0;
  strcpy(v365[0].__r_.__value_.__l.__data_, "cv3d::vio::RadialDistortionCalibVariable<double>]");
  strcpy(v356, "Variable<double>lDistortionCalibcv3d::vio::Radia1");
  sub_20E8D1238(v365, 48, 1uLL);
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v182 = v365;
  else
    v182 = (std::string *)v365[0].__r_.__value_.__r.__words[0];
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v183 = HIBYTE(v365[0].__r_.__value_.__r.__words[2]);
  else
    v183 = v365[0].__r_.__value_.__l.__size_;
  std::string::append(&v364, (const std::string::value_type *)v182, v183);
  if (SHIBYTE(v365[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v365[0].__r_.__value_.__l.__data_);
  if ((v364.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v184 = &v364;
  else
    v184 = (std::string *)v364.__r_.__value_.__r.__words[0];
  if ((v364.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v185 = HIBYTE(v364.__r_.__value_.__r.__words[2]);
  else
    v185 = v364.__r_.__value_.__l.__size_;
  v186 = sub_20E86A980(v173, (uint64_t)v184, v185);
  sub_20E86A980(v186, (uint64_t)"\n", 1);
  if (SHIBYTE(v364.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v364.__r_.__value_.__l.__data_);
    if (*(_BYTE *)(a1 + 1592))
      goto LABEL_434;
  }
  else if (*(_BYTE *)(a1 + 1592))
  {
    goto LABEL_434;
  }
  if (sub_20F9210FC((_QWORD *)a1))
  {
    v187 = *(_QWORD **)(a1 + 1280);
    v188 = *(_QWORD **)(a1 + 1288);
    if (v187 != v188)
    {
      v189 = 0;
      do
      {
        if ((*(_BYTE *)(v187[25] + 4) & 6) == 0
          && (*(_BYTE *)(v187[26] + 4) & 6) == 0
          && (*(_BYTE *)(v187[27] + 4) & 6) == 0
          && (*(_BYTE *)(v187[28] + 4) & 6) == 0)
        {
          ++v189;
        }
        v187 += 38;
      }
      while (v187 != v188);
    }
  }
LABEL_434:
  sub_20E86A980(a2, (uint64_t)"\tthere are ", 11);
  v190 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v190, (uint64_t)" present in the system (", 24);
  v191 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v191, (uint64_t)" DoF total)\n", 12);
  v365[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
  *(_OWORD *)&v365[0].__r_.__value_.__r.__words[1] = xmmword_2102DC8F0;
  strcpy(v365[0].__r_.__value_.__l.__data_, "cv3d::vio::VIOPlaneFactor<double>]");
  sub_20E8D1238(v365, 33, 1uLL);
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v192 = v365;
  else
    v192 = (std::string *)v365[0].__r_.__value_.__r.__words[0];
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v193 = HIBYTE(v365[0].__r_.__value_.__r.__words[2]);
  else
    v193 = v365[0].__r_.__value_.__l.__size_;
  v194 = sub_20E86A980(a2, (uint64_t)v192, v193);
  sub_20E86A980(v194, (uint64_t)": ", 2);
  v195 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v195, (uint64_t)"D factor\n", 9);
  if (SHIBYTE(v365[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v365[0].__r_.__value_.__l.__data_);
  v196 = sub_20E86A980(a2, (uint64_t)"\tconstrains ", 12);
  memset(&v364, 0, sizeof(v364));
  v197 = (char *)operator new(0x28uLL);
  v365[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v197;
  *(_OWORD *)&v365[0].__r_.__value_.__r.__words[1] = *(_OWORD *)&v363[32];
  strcpy(v197 + 31, "le>]");
  *(_OWORD *)v197 = *(_OWORD *)&v363[16];
  *((_OWORD *)v197 + 1) = *(_OWORD *)v363;
  sub_20E8D1238(v365, 34, 1uLL);
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v198 = v365;
  else
    v198 = (std::string *)v365[0].__r_.__value_.__r.__words[0];
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v199 = HIBYTE(v365[0].__r_.__value_.__r.__words[2]);
  else
    v199 = v365[0].__r_.__value_.__l.__size_;
  std::string::append(&v364, (const std::string::value_type *)v198, v199);
  if (SHIBYTE(v365[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v365[0].__r_.__value_.__l.__data_);
  std::string::append(&v364, ", ", 2uLL);
  v200 = (char *)operator new(0x28uLL);
  v365[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v200;
  *(_OWORD *)&v365[0].__r_.__value_.__r.__words[1] = *(_OWORD *)&v363[32];
  strcpy(v200 + 31, "le>]");
  *(_OWORD *)v200 = *(_OWORD *)&v363[16];
  *((_OWORD *)v200 + 1) = *(_OWORD *)v363;
  sub_20E8D1238(v365, 34, 1uLL);
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v201 = v365;
  else
    v201 = (std::string *)v365[0].__r_.__value_.__r.__words[0];
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v202 = HIBYTE(v365[0].__r_.__value_.__r.__words[2]);
  else
    v202 = v365[0].__r_.__value_.__l.__size_;
  std::string::append(&v364, (const std::string::value_type *)v201, v202);
  if (SHIBYTE(v365[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v365[0].__r_.__value_.__l.__data_);
  std::string::append(&v364, ", ", 2uLL);
  v203 = (char *)operator new(0x28uLL);
  v365[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v203;
  *(_OWORD *)&v365[0].__r_.__value_.__r.__words[1] = *(_OWORD *)&v363[32];
  strcpy(v203 + 31, "le>]");
  *(_OWORD *)v203 = *(_OWORD *)&v363[16];
  *((_OWORD *)v203 + 1) = *(_OWORD *)v363;
  sub_20E8D1238(v365, 34, 1uLL);
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v204 = v365;
  else
    v204 = (std::string *)v365[0].__r_.__value_.__r.__words[0];
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v205 = HIBYTE(v365[0].__r_.__value_.__r.__words[2]);
  else
    v205 = v365[0].__r_.__value_.__l.__size_;
  std::string::append(&v364, (const std::string::value_type *)v204, v205);
  if (SHIBYTE(v365[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v365[0].__r_.__value_.__l.__data_);
  std::string::append(&v364, ", ", 2uLL);
  v206 = (char *)operator new(0x28uLL);
  v365[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v206;
  *(_OWORD *)&v365[0].__r_.__value_.__r.__words[1] = *(_OWORD *)&v363[32];
  strcpy(v206 + 31, "le>]");
  *(_OWORD *)v206 = *(_OWORD *)&v363[16];
  *((_OWORD *)v206 + 1) = *(_OWORD *)v363;
  sub_20E8D1238(v365, 34, 1uLL);
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v207 = v365;
  else
    v207 = (std::string *)v365[0].__r_.__value_.__r.__words[0];
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v208 = HIBYTE(v365[0].__r_.__value_.__r.__words[2]);
  else
    v208 = v365[0].__r_.__value_.__l.__size_;
  std::string::append(&v364, (const std::string::value_type *)v207, v208);
  if (SHIBYTE(v365[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v365[0].__r_.__value_.__l.__data_);
  std::string::append(&v364, ", ", 2uLL);
  v209 = operator new(0x30uLL);
  v365[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v209;
  *(_OWORD *)&v365[0].__r_.__value_.__r.__words[1] = *(_OWORD *)&v355[48];
  *v209 = *(_OWORD *)&v355[32];
  v209[1] = *(_OWORD *)&v355[16];
  *(_OWORD *)((char *)v209 + 30) = *(_OWORD *)v355;
  *((_BYTE *)v209 + 46) = 0;
  sub_20E8D1238(v365, 45, 1uLL);
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v210 = v365;
  else
    v210 = (std::string *)v365[0].__r_.__value_.__r.__words[0];
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v211 = HIBYTE(v365[0].__r_.__value_.__r.__words[2]);
  else
    v211 = v365[0].__r_.__value_.__l.__size_;
  std::string::append(&v364, (const std::string::value_type *)v210, v211);
  if (SHIBYTE(v365[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v365[0].__r_.__value_.__l.__data_);
  std::string::append(&v364, ", ", 2uLL);
  v212 = (char *)operator new(0x20uLL);
  v365[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v212;
  *(_OWORD *)&v365[0].__r_.__value_.__r.__words[1] = v357[2];
  *(_OWORD *)v212 = v357[1];
  *(_OWORD *)(v212 + 14) = v357[0];
  v212[30] = 0;
  sub_20E8D1238(v365, 29, 1uLL);
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v213 = v365;
  else
    v213 = (std::string *)v365[0].__r_.__value_.__r.__words[0];
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v214 = HIBYTE(v365[0].__r_.__value_.__r.__words[2]);
  else
    v214 = v365[0].__r_.__value_.__l.__size_;
  std::string::append(&v364, (const std::string::value_type *)v213, v214);
  if (SHIBYTE(v365[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v365[0].__r_.__value_.__l.__data_);
  if ((v364.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v215 = &v364;
  else
    v215 = (std::string *)v364.__r_.__value_.__r.__words[0];
  if ((v364.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v216 = HIBYTE(v364.__r_.__value_.__r.__words[2]);
  else
    v216 = v364.__r_.__value_.__l.__size_;
  v217 = sub_20E86A980(v196, (uint64_t)v215, v216);
  sub_20E86A980(v217, (uint64_t)"\n", 1);
  if (SHIBYTE(v364.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v364.__r_.__value_.__l.__data_);
    if (*(_BYTE *)(a1 + 1592))
      goto LABEL_512;
  }
  else if (*(_BYTE *)(a1 + 1592))
  {
    goto LABEL_512;
  }
  if (sub_20F9210FC((_QWORD *)a1))
  {
    v218 = *(_QWORD **)(a1 + 1304);
    v219 = *(_QWORD **)(a1 + 1312);
    if (v218 != v219)
    {
      v220 = 0;
      do
      {
        if ((*(_BYTE *)(v218[28] + 4) & 6) == 0
          && (*(_BYTE *)(v218[29] + 4) & 6) == 0
          && (*(_BYTE *)(v218[30] + 4) & 6) == 0
          && (*(_BYTE *)(v218[31] + 4) & 6) == 0
          && (*(_BYTE *)(v218[32] + 4) & 6) == 0
          && (*(_BYTE *)(v218[33] + 4) & 6) == 0)
        {
          ++v220;
        }
        v218 += 45;
      }
      while (v218 != v219);
    }
  }
LABEL_512:
  sub_20E86A980(a2, (uint64_t)"\tthere are ", 11);
  v221 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v221, (uint64_t)" present in the system (", 24);
  v222 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v222, (uint64_t)" DoF total)\n", 12);
  v365[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
  *(_OWORD *)&v365[0].__r_.__value_.__r.__words[1] = xmmword_2102DBF10;
  strcpy(v365[0].__r_.__value_.__l.__data_, "cv3d::vio::StateAndIMUTimeOffsetPriorFactor<double>]");
  sub_20E8D1238(v365, 51, 1uLL);
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v223 = v365;
  else
    v223 = (std::string *)v365[0].__r_.__value_.__r.__words[0];
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v224 = HIBYTE(v365[0].__r_.__value_.__r.__words[2]);
  else
    v224 = v365[0].__r_.__value_.__l.__size_;
  v225 = sub_20E86A980(a2, (uint64_t)v223, v224);
  sub_20E86A980(v225, (uint64_t)": ", 2);
  v226 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v226, (uint64_t)"D factor\n", 9);
  if (SHIBYTE(v365[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v365[0].__r_.__value_.__l.__data_);
  v227 = sub_20E86A980(a2, (uint64_t)"\tconstrains ", 12);
  memset(&v364, 0, sizeof(v364));
  v228 = (char *)operator new(0x20uLL);
  v365[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v228;
  *(_OWORD *)&v365[0].__r_.__value_.__r.__words[1] = v357[2];
  *(_OWORD *)v228 = v357[1];
  *(_OWORD *)(v228 + 14) = v357[0];
  v228[30] = 0;
  sub_20E8D1238(v365, 29, 1uLL);
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v229 = v365;
  else
    v229 = (std::string *)v365[0].__r_.__value_.__r.__words[0];
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v230 = HIBYTE(v365[0].__r_.__value_.__r.__words[2]);
  else
    v230 = v365[0].__r_.__value_.__l.__size_;
  std::string::append(&v364, (const std::string::value_type *)v229, v230);
  if (SHIBYTE(v365[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v365[0].__r_.__value_.__l.__data_);
  if ((v364.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v231 = &v364;
  else
    v231 = (std::string *)v364.__r_.__value_.__r.__words[0];
  if ((v364.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v232 = HIBYTE(v364.__r_.__value_.__r.__words[2]);
  else
    v232 = v364.__r_.__value_.__l.__size_;
  v233 = sub_20E86A980(v227, (uint64_t)v231, v232);
  sub_20E86A980(v233, (uint64_t)"\n", 1);
  if (SHIBYTE(v364.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v364.__r_.__value_.__l.__data_);
    if (*(_BYTE *)(a1 + 1592))
      goto LABEL_544;
  }
  else if (*(_BYTE *)(a1 + 1592))
  {
    goto LABEL_544;
  }
  if (sub_20F9210FC((_QWORD *)a1))
  {
    v234 = *(_QWORD *)(a1 + 1328);
    v235 = *(_QWORD *)(a1 + 1336);
    if (v234 != v235)
    {
      v236 = 0;
      do
      {
        if ((*(_BYTE *)(*(_QWORD *)(v234 + 48) + 4) & 6) == 0)
          ++v236;
        v234 += 112;
      }
      while (v234 != v235);
    }
  }
LABEL_544:
  sub_20E86A980(a2, (uint64_t)"\tthere are ", 11);
  v237 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v237, (uint64_t)" present in the system (", 24);
  v238 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v238, (uint64_t)" DoF total)\n", 12);
  v365[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x60uLL);
  *(_OWORD *)&v365[0].__r_.__value_.__r.__words[1] = xmmword_2103B84B0;
  strcpy(v365[0].__r_.__value_.__l.__data_, "cv3d::vio::GenericCalibVariablePriorFactor<double, cv3d::vio::IntrinsicsCalibVariable<double>>]");
  sub_20E8D1238(v365, 94, 1uLL);
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v239 = v365;
  else
    v239 = (std::string *)v365[0].__r_.__value_.__r.__words[0];
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v240 = HIBYTE(v365[0].__r_.__value_.__r.__words[2]);
  else
    v240 = v365[0].__r_.__value_.__l.__size_;
  v241 = sub_20E86A980(a2, (uint64_t)v239, v240);
  sub_20E86A980(v241, (uint64_t)": ", 2);
  v242 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v242, (uint64_t)"D factor\n", 9);
  if (SHIBYTE(v365[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v365[0].__r_.__value_.__l.__data_);
  v243 = sub_20E86A980(a2, (uint64_t)"\tconstrains ", 12);
  memset(&v364, 0, sizeof(v364));
  v244 = operator new(0x30uLL);
  v365[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v244;
  *(_OWORD *)&v365[0].__r_.__value_.__r.__words[1] = *(_OWORD *)&v362[48];
  *v244 = *(_OWORD *)&v362[32];
  v244[1] = *(_OWORD *)&v362[16];
  *(_OWORD *)((char *)v244 + 27) = *(_OWORD *)v362;
  *((_BYTE *)v244 + 43) = 0;
  sub_20E8D1238(v365, 42, 1uLL);
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v245 = v365;
  else
    v245 = (std::string *)v365[0].__r_.__value_.__r.__words[0];
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v246 = HIBYTE(v365[0].__r_.__value_.__r.__words[2]);
  else
    v246 = v365[0].__r_.__value_.__l.__size_;
  std::string::append(&v364, (const std::string::value_type *)v245, v246);
  if (SHIBYTE(v365[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v365[0].__r_.__value_.__l.__data_);
  if ((v364.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v247 = &v364;
  else
    v247 = (std::string *)v364.__r_.__value_.__r.__words[0];
  if ((v364.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v248 = HIBYTE(v364.__r_.__value_.__r.__words[2]);
  else
    v248 = v364.__r_.__value_.__l.__size_;
  v249 = sub_20E86A980(v243, (uint64_t)v247, v248);
  sub_20E86A980(v249, (uint64_t)"\n", 1);
  if (SHIBYTE(v364.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v364.__r_.__value_.__l.__data_);
    if (*(_BYTE *)(a1 + 1592))
      goto LABEL_576;
  }
  else if (*(_BYTE *)(a1 + 1592))
  {
    goto LABEL_576;
  }
  if (sub_20F9210FC((_QWORD *)a1))
  {
    v250 = *(_QWORD *)(a1 + 1352);
    v251 = *(_QWORD *)(a1 + 1360);
    if (v250 != v251)
    {
      v252 = 0;
      do
      {
        if ((*(_BYTE *)(*(_QWORD *)(v250 + 96) + 4) & 6) == 0)
          ++v252;
        v250 += 208;
      }
      while (v250 != v251);
    }
  }
LABEL_576:
  sub_20E86A980(a2, (uint64_t)"\tthere are ", 11);
  v253 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v253, (uint64_t)" present in the system (", 24);
  v254 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v254, (uint64_t)" DoF total)\n", 12);
  v365[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x68uLL);
  *(_OWORD *)&v365[0].__r_.__value_.__r.__words[1] = xmmword_2102DCFA0;
  strcpy(v365[0].__r_.__value_.__l.__data_, "cv3d::vio::GenericCalibVariablePriorFactor<double, cv3d::vio::RadialDistortionCalibVariable<double>>]");
  sub_20E8D1238(v365, 100, 1uLL);
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v255 = v365;
  else
    v255 = (std::string *)v365[0].__r_.__value_.__r.__words[0];
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v256 = HIBYTE(v365[0].__r_.__value_.__r.__words[2]);
  else
    v256 = v365[0].__r_.__value_.__l.__size_;
  v257 = sub_20E86A980(a2, (uint64_t)v255, v256);
  sub_20E86A980(v257, (uint64_t)": ", 2);
  v258 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v258, (uint64_t)"D factor\n", 9);
  if (SHIBYTE(v365[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v365[0].__r_.__value_.__l.__data_);
  v259 = sub_20E86A980(a2, (uint64_t)"\tconstrains ", 12);
  memset(&v364, 0, sizeof(v364));
  v260 = operator new(0x38uLL);
  v365[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v260;
  *(_OWORD *)&v365[0].__r_.__value_.__r.__words[1] = *(_OWORD *)&v356[48];
  v260[24] = 93;
  *(_OWORD *)v260 = *(_OWORD *)&v356[32];
  *((_OWORD *)v260 + 1) = *(_OWORD *)&v356[16];
  *((_OWORD *)v260 + 2) = *(_OWORD *)v356;
  sub_20E8D1238(v365, 48, 1uLL);
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v261 = v365;
  else
    v261 = (std::string *)v365[0].__r_.__value_.__r.__words[0];
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v262 = HIBYTE(v365[0].__r_.__value_.__r.__words[2]);
  else
    v262 = v365[0].__r_.__value_.__l.__size_;
  std::string::append(&v364, (const std::string::value_type *)v261, v262);
  if (SHIBYTE(v365[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v365[0].__r_.__value_.__l.__data_);
  if ((v364.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v263 = &v364;
  else
    v263 = (std::string *)v364.__r_.__value_.__r.__words[0];
  if ((v364.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v264 = HIBYTE(v364.__r_.__value_.__r.__words[2]);
  else
    v264 = v364.__r_.__value_.__l.__size_;
  v265 = sub_20E86A980(v259, (uint64_t)v263, v264);
  sub_20E86A980(v265, (uint64_t)"\n", 1);
  if (SHIBYTE(v364.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v364.__r_.__value_.__l.__data_);
    if (*(_BYTE *)(a1 + 1592))
      goto LABEL_608;
  }
  else if (*(_BYTE *)(a1 + 1592))
  {
    goto LABEL_608;
  }
  if (sub_20F9210FC((_QWORD *)a1))
  {
    v266 = *(_QWORD *)(a1 + 1376);
    v267 = *(_QWORD *)(a1 + 1384);
    if (v266 != v267)
    {
      v268 = 0;
      do
      {
        if ((*(_BYTE *)(*(_QWORD *)(v266 + 96) + 4) & 6) == 0)
          ++v268;
        v266 += 208;
      }
      while (v266 != v267);
    }
  }
LABEL_608:
  sub_20E86A980(a2, (uint64_t)"\tthere are ", 11);
  v269 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v269, (uint64_t)" present in the system (", 24);
  v270 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v270, (uint64_t)" DoF total)\n", 12);
  v365[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x68uLL);
  *(_OWORD *)&v365[0].__r_.__value_.__r.__words[1] = xmmword_210312DD0;
  strcpy(v365[0].__r_.__value_.__l.__data_, "cv3d::vio::GenericCalibVariablePriorFactor<double, cv3d::vio::ExternalLensCalibVariable<double>>]");
  sub_20E8D1238(v365, 96, 1uLL);
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v271 = v365;
  else
    v271 = (std::string *)v365[0].__r_.__value_.__r.__words[0];
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v272 = HIBYTE(v365[0].__r_.__value_.__r.__words[2]);
  else
    v272 = v365[0].__r_.__value_.__l.__size_;
  v273 = sub_20E86A980(a2, (uint64_t)v271, v272);
  sub_20E86A980(v273, (uint64_t)": ", 2);
  v274 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v274, (uint64_t)"D factor\n", 9);
  if (SHIBYTE(v365[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v365[0].__r_.__value_.__l.__data_);
  v275 = sub_20E86A980(a2, (uint64_t)"\tconstrains ", 12);
  memset(&v364, 0, sizeof(v364));
  v365[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
  *(_OWORD *)&v365[0].__r_.__value_.__r.__words[1] = v359;
  strcpy(v365[0].__r_.__value_.__l.__data_, "cv3d::vio::ExternalLensCalibVariable<double>]");
  qmemcpy(v357, "ariable<double>]nalLensCalibVaricv3d::vio::Exter", sizeof(v357));
  sub_20E8D1238(v365, 44, 1uLL);
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v276 = v365;
  else
    v276 = (std::string *)v365[0].__r_.__value_.__r.__words[0];
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v277 = HIBYTE(v365[0].__r_.__value_.__r.__words[2]);
  else
    v277 = v365[0].__r_.__value_.__l.__size_;
  std::string::append(&v364, (const std::string::value_type *)v276, v277);
  if (SHIBYTE(v365[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v365[0].__r_.__value_.__l.__data_);
  if ((v364.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v278 = &v364;
  else
    v278 = (std::string *)v364.__r_.__value_.__r.__words[0];
  if ((v364.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v279 = HIBYTE(v364.__r_.__value_.__r.__words[2]);
  else
    v279 = v364.__r_.__value_.__l.__size_;
  v280 = sub_20E86A980(v275, (uint64_t)v278, v279);
  sub_20E86A980(v280, (uint64_t)"\n", 1);
  if (SHIBYTE(v364.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v364.__r_.__value_.__l.__data_);
    if (*(_BYTE *)(a1 + 1592))
      goto LABEL_640;
  }
  else if (*(_BYTE *)(a1 + 1592))
  {
    goto LABEL_640;
  }
  if (sub_20F9210FC((_QWORD *)a1))
  {
    v281 = *(_QWORD *)(a1 + 1400);
    v282 = *(_QWORD *)(a1 + 1408);
    if (v281 != v282)
    {
      v283 = 0;
      do
      {
        if ((*(_BYTE *)(*(_QWORD *)(v281 + 80) + 4) & 6) == 0)
          ++v283;
        v281 += 176;
      }
      while (v281 != v282);
    }
  }
LABEL_640:
  sub_20E86A980(a2, (uint64_t)"\tthere are ", 11);
  v284 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v284, (uint64_t)" present in the system (", 24);
  v285 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v285, (uint64_t)" DoF total)\n", 12);
  v365[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x60uLL);
  *(_OWORD *)&v365[0].__r_.__value_.__r.__words[1] = v354;
  strcpy(v365[0].__r_.__value_.__l.__data_, "cv3d::vio::GenericCalibVariablePriorFactor<double, cv3d::vio::Generic3DoFVariable<double>>]");
  sub_20E8D1238(v365, 90, 1uLL);
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v286 = v365;
  else
    v286 = (std::string *)v365[0].__r_.__value_.__r.__words[0];
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v287 = HIBYTE(v365[0].__r_.__value_.__r.__words[2]);
  else
    v287 = v365[0].__r_.__value_.__l.__size_;
  v288 = sub_20E86A980(a2, (uint64_t)v286, v287);
  sub_20E86A980(v288, (uint64_t)": ", 2);
  v289 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v289, (uint64_t)"D factor\n", 9);
  if (SHIBYTE(v365[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v365[0].__r_.__value_.__l.__data_);
  v290 = sub_20E86A980(a2, (uint64_t)"\tconstrains ", 12);
  memset(&v364, 0, sizeof(v364));
  v365[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
  *(_OWORD *)&v365[0].__r_.__value_.__r.__words[1] = v360;
  strcpy(v365[0].__r_.__value_.__l.__data_, "cv3d::vio::Generic3DoFVariable<double>]");
  sub_20E8D1238(v365, 38, 1uLL);
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v291 = v365;
  else
    v291 = (std::string *)v365[0].__r_.__value_.__r.__words[0];
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v292 = HIBYTE(v365[0].__r_.__value_.__r.__words[2]);
  else
    v292 = v365[0].__r_.__value_.__l.__size_;
  std::string::append(&v364, (const std::string::value_type *)v291, v292);
  if (SHIBYTE(v365[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v365[0].__r_.__value_.__l.__data_);
  if ((v364.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v293 = &v364;
  else
    v293 = (std::string *)v364.__r_.__value_.__r.__words[0];
  if ((v364.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v294 = HIBYTE(v364.__r_.__value_.__r.__words[2]);
  else
    v294 = v364.__r_.__value_.__l.__size_;
  v295 = sub_20E86A980(v290, (uint64_t)v293, v294);
  sub_20E86A980(v295, (uint64_t)"\n", 1);
  if (SHIBYTE(v364.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v364.__r_.__value_.__l.__data_);
    if (*(_BYTE *)(a1 + 1592))
      goto LABEL_672;
  }
  else if (*(_BYTE *)(a1 + 1592))
  {
    goto LABEL_672;
  }
  if (sub_20F9210FC((_QWORD *)a1))
  {
    v296 = *(_QWORD *)(a1 + 1424);
    v297 = *(_QWORD *)(a1 + 1432);
    if (v296 != v297)
    {
      v298 = 0;
      do
      {
        if ((*(_BYTE *)(*(_QWORD *)(v296 + 80) + 4) & 6) == 0)
          ++v298;
        v296 += 176;
      }
      while (v296 != v297);
    }
  }
LABEL_672:
  sub_20E86A980(a2, (uint64_t)"\tthere are ", 11);
  v299 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v299, (uint64_t)" present in the system (", 24);
  v300 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v300, (uint64_t)" DoF total)\n", 12);
  v365[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x50uLL);
  *(_OWORD *)&v365[0].__r_.__value_.__r.__words[1] = xmmword_2102DB430;
  strcpy(v365[0].__r_.__value_.__l.__data_, "cv3d::vio::VIOLandmarkDepthSqrtCauchyFactor<double, true, Depth::Regular>]");
  sub_20E8D1238(v365, 73, 1uLL);
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v301 = v365;
  else
    v301 = (std::string *)v365[0].__r_.__value_.__r.__words[0];
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v302 = HIBYTE(v365[0].__r_.__value_.__r.__words[2]);
  else
    v302 = v365[0].__r_.__value_.__l.__size_;
  v303 = sub_20E86A980(a2, (uint64_t)v301, v302);
  sub_20E86A980(v303, (uint64_t)": ", 2);
  v304 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v304, (uint64_t)"D factor\n", 9);
  if (SHIBYTE(v365[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v365[0].__r_.__value_.__l.__data_);
  v305 = sub_20E86A980(a2, (uint64_t)"\tconstrains ", 12);
  sub_20FB6BA44(v365);
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v306 = v365;
  else
    v306 = (std::string *)v365[0].__r_.__value_.__r.__words[0];
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v307 = HIBYTE(v365[0].__r_.__value_.__r.__words[2]);
  else
    v307 = v365[0].__r_.__value_.__l.__size_;
  v308 = sub_20E86A980(v305, (uint64_t)v306, v307);
  sub_20E86A980(v308, (uint64_t)"\n", 1);
  if (SHIBYTE(v365[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v365[0].__r_.__value_.__l.__data_);
    if (*(_BYTE *)(a1 + 1592))
      goto LABEL_692;
  }
  else if (*(_BYTE *)(a1 + 1592))
  {
    goto LABEL_692;
  }
  if (sub_20F9210FC((_QWORD *)a1))
    sub_20F9235BC(*(_QWORD **)(a1 + 1448), *(_QWORD **)(a1 + 1456), (uint64_t)v365);
LABEL_692:
  sub_20E86A980(a2, (uint64_t)"\tthere are ", 11);
  v309 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v309, (uint64_t)" present in the system (", 24);
  v310 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v310, (uint64_t)" DoF total)\n", 12);
  v365[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
  *(_OWORD *)&v365[0].__r_.__value_.__r.__words[1] = xmmword_2102DBC30;
  strcpy(v365[0].__r_.__value_.__l.__data_, "cv3d::vio::VIOLandmarkCartesianSqrtCauchyFactor<double, true>]");
  sub_20E8D1238(v365, 61, 1uLL);
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v311 = v365;
  else
    v311 = (std::string *)v365[0].__r_.__value_.__r.__words[0];
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v312 = HIBYTE(v365[0].__r_.__value_.__r.__words[2]);
  else
    v312 = v365[0].__r_.__value_.__l.__size_;
  v313 = sub_20E86A980(a2, (uint64_t)v311, v312);
  sub_20E86A980(v313, (uint64_t)": ", 2);
  v314 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v314, (uint64_t)"D factor\n", 9);
  if (SHIBYTE(v365[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v365[0].__r_.__value_.__l.__data_);
  v315 = sub_20E86A980(a2, (uint64_t)"\tconstrains ", 12);
  memset(&v364, 0, sizeof(v364));
  v316 = operator new(0x30uLL);
  v365[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v316;
  *(_OWORD *)&v365[0].__r_.__value_.__r.__words[1] = v361;
  *v316 = v358[2];
  v316[1] = v358[1];
  *(_OWORD *)((char *)v316 + 25) = v358[0];
  *((_BYTE *)v316 + 41) = 0;
  sub_20E8D1238(v365, 40, 1uLL);
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v317 = v365;
  else
    v317 = (std::string *)v365[0].__r_.__value_.__r.__words[0];
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v318 = HIBYTE(v365[0].__r_.__value_.__r.__words[2]);
  else
    v318 = v365[0].__r_.__value_.__l.__size_;
  std::string::append(&v364, (const std::string::value_type *)v317, v318);
  if (SHIBYTE(v365[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v365[0].__r_.__value_.__l.__data_);
  std::string::append(&v364, ", ", 2uLL);
  v319 = (char *)operator new(0x28uLL);
  v365[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v319;
  *(_OWORD *)&v365[0].__r_.__value_.__r.__words[1] = *(_OWORD *)&v363[32];
  strcpy(v319 + 31, "le>]");
  *(_OWORD *)v319 = *(_OWORD *)&v363[16];
  *((_OWORD *)v319 + 1) = *(_OWORD *)v363;
  sub_20E8D1238(v365, 34, 1uLL);
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v320 = v365;
  else
    v320 = (std::string *)v365[0].__r_.__value_.__r.__words[0];
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v321 = HIBYTE(v365[0].__r_.__value_.__r.__words[2]);
  else
    v321 = v365[0].__r_.__value_.__l.__size_;
  std::string::append(&v364, (const std::string::value_type *)v320, v321);
  if (SHIBYTE(v365[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v365[0].__r_.__value_.__l.__data_);
  std::string::append(&v364, ", ", 2uLL);
  v322 = operator new(0x30uLL);
  v365[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v322;
  *(_OWORD *)&v365[0].__r_.__value_.__r.__words[1] = *(_OWORD *)&v362[48];
  *v322 = *(_OWORD *)&v362[32];
  v322[1] = *(_OWORD *)&v362[16];
  *(_OWORD *)((char *)v322 + 27) = *(_OWORD *)v362;
  *((_BYTE *)v322 + 43) = 0;
  sub_20E8D1238(v365, 42, 1uLL);
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v323 = v365;
  else
    v323 = (std::string *)v365[0].__r_.__value_.__r.__words[0];
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v324 = HIBYTE(v365[0].__r_.__value_.__r.__words[2]);
  else
    v324 = v365[0].__r_.__value_.__l.__size_;
  std::string::append(&v364, (const std::string::value_type *)v323, v324);
  if (SHIBYTE(v365[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v365[0].__r_.__value_.__l.__data_);
  std::string::append(&v364, ", ", 2uLL);
  v325 = operator new(0x38uLL);
  v365[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v325;
  *(_OWORD *)&v365[0].__r_.__value_.__r.__words[1] = *(_OWORD *)&v356[48];
  v325[24] = 93;
  *(_OWORD *)v325 = *(_OWORD *)&v356[32];
  *((_OWORD *)v325 + 1) = *(_OWORD *)&v356[16];
  *((_OWORD *)v325 + 2) = *(_OWORD *)v356;
  sub_20E8D1238(v365, 48, 1uLL);
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v326 = v365;
  else
    v326 = (std::string *)v365[0].__r_.__value_.__r.__words[0];
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v327 = HIBYTE(v365[0].__r_.__value_.__r.__words[2]);
  else
    v327 = v365[0].__r_.__value_.__l.__size_;
  std::string::append(&v364, (const std::string::value_type *)v326, v327);
  if (SHIBYTE(v365[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v365[0].__r_.__value_.__l.__data_);
  std::string::append(&v364, ", ", 2uLL);
  v328 = operator new(0x30uLL);
  v365[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v328;
  *(_OWORD *)&v365[0].__r_.__value_.__r.__words[1] = v359;
  *v328 = v357[2];
  v328[1] = v357[1];
  *(_OWORD *)((char *)v328 + 29) = v357[0];
  *((_BYTE *)v328 + 45) = 0;
  sub_20E8D1238(v365, 44, 1uLL);
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v329 = v365;
  else
    v329 = (std::string *)v365[0].__r_.__value_.__r.__words[0];
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v330 = HIBYTE(v365[0].__r_.__value_.__r.__words[2]);
  else
    v330 = v365[0].__r_.__value_.__l.__size_;
  std::string::append(&v364, (const std::string::value_type *)v329, v330);
  if (SHIBYTE(v365[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v365[0].__r_.__value_.__l.__data_);
  std::string::append(&v364, ", ", 2uLL);
  v331 = operator new(0x28uLL);
  v365[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v331;
  *(_OWORD *)&v365[0].__r_.__value_.__r.__words[1] = v360;
  *(_OWORD *)v331 = v353[1];
  *((_OWORD *)v331 + 1) = v353[0];
  strcpy((char *)v331 + 31, "double>]");
  sub_20E8D1238(v365, 38, 1uLL);
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v332 = v365;
  else
    v332 = (std::string *)v365[0].__r_.__value_.__r.__words[0];
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v333 = HIBYTE(v365[0].__r_.__value_.__r.__words[2]);
  else
    v333 = v365[0].__r_.__value_.__l.__size_;
  std::string::append(&v364, (const std::string::value_type *)v332, v333);
  if (SHIBYTE(v365[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v365[0].__r_.__value_.__l.__data_);
  if ((v364.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v334 = &v364;
  else
    v334 = (std::string *)v364.__r_.__value_.__r.__words[0];
  if ((v364.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v335 = HIBYTE(v364.__r_.__value_.__r.__words[2]);
  else
    v335 = v364.__r_.__value_.__l.__size_;
  v336 = sub_20E86A980(v315, (uint64_t)v334, v335);
  sub_20E86A980(v336, (uint64_t)"\n", 1);
  if (SHIBYTE(v364.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v364.__r_.__value_.__l.__data_);
    if (*(_BYTE *)(a1 + 1592))
      goto LABEL_770;
  }
  else if (*(_BYTE *)(a1 + 1592))
  {
    goto LABEL_770;
  }
  if (sub_20F9210FC((_QWORD *)a1))
  {
    v337 = *(_QWORD **)(a1 + 1472);
    v338 = *(_QWORD **)(a1 + 1480);
    if (v337 != v338)
    {
      v339 = 0;
      do
      {
        if ((*(_BYTE *)(v337[8] + 4) & 6) == 0
          && (*(_BYTE *)(v337[9] + 4) & 6) == 0
          && (*(_BYTE *)(v337[10] + 4) & 6) == 0
          && (*(_BYTE *)(v337[11] + 4) & 6) == 0
          && (*(_BYTE *)(v337[12] + 4) & 6) == 0
          && (*(_BYTE *)(v337[13] + 4) & 6) == 0)
        {
          ++v339;
        }
        v337 += 23;
      }
      while (v337 != v338);
    }
  }
LABEL_770:
  sub_20E86A980(a2, (uint64_t)"\tthere are ", 11);
  v340 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v340, (uint64_t)" present in the system (", 24);
  v341 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v341, (uint64_t)" DoF total)\n", 12);
  v365[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x60uLL);
  *(_OWORD *)&v365[0].__r_.__value_.__r.__words[1] = xmmword_2103B8460;
  strcpy(v365[0].__r_.__value_.__l.__data_, "cv3d::vio::VIOLandmarkDepthSqrtCauchyFactor<double, true, Depth::Regular, Measurement::Line>]");
  sub_20E8D1238(v365, 92, 1uLL);
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v342 = v365;
  else
    v342 = (std::string *)v365[0].__r_.__value_.__r.__words[0];
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v343 = HIBYTE(v365[0].__r_.__value_.__r.__words[2]);
  else
    v343 = v365[0].__r_.__value_.__l.__size_;
  v344 = sub_20E86A980(a2, (uint64_t)v342, v343);
  sub_20E86A980(v344, (uint64_t)": ", 2);
  v345 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v345, (uint64_t)"D factor\n", 9);
  if (SHIBYTE(v365[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v365[0].__r_.__value_.__l.__data_);
  v346 = sub_20E86A980(a2, (uint64_t)"\tconstrains ", 12);
  sub_20FB6BA44(v365);
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v347 = v365;
  else
    v347 = (std::string *)v365[0].__r_.__value_.__r.__words[0];
  if ((v365[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v348 = HIBYTE(v365[0].__r_.__value_.__r.__words[2]);
  else
    v348 = v365[0].__r_.__value_.__l.__size_;
  v349 = sub_20E86A980(v346, (uint64_t)v347, v348);
  sub_20E86A980(v349, (uint64_t)"\n", 1);
  if (SHIBYTE(v365[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v365[0].__r_.__value_.__l.__data_);
    if (*(_BYTE *)(a1 + 1592))
      goto LABEL_790;
  }
  else if (*(_BYTE *)(a1 + 1592))
  {
    goto LABEL_790;
  }
  if (sub_20F9210FC((_QWORD *)a1))
    sub_20F921AD8(*(_QWORD **)(a1 + 1496), *(_QWORD **)(a1 + 1504), (uint64_t)v365);
LABEL_790:
  sub_20E86A980(a2, (uint64_t)"\tthere are ", 11);
  v350 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v350, (uint64_t)" present in the system (", 24);
  v351 = (_QWORD *)std::ostream::operator<<();
  return sub_20E86A980(v351, (uint64_t)" DoF total)\n", 12);
}

void sub_20FB67338(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 185) < 0)
  {
    operator delete(*(void **)(v1 - 208));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FB675CC(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _DWORD v47[11];

  if (*(_BYTE *)(a1 + 1592))
  {
    v3 = *(_QWORD *)(a1 + 8);
    v4 = *(_QWORD *)(a1 + 16);
    if (v3 == v4)
      return 0;
    v5 = 0;
    if ((a2 & 1) != 0)
    {
      do
      {
        v6 = *(_QWORD *)(v3 + 8);
        if ((*(_BYTE *)(v6 + 4) & 2) == 0)
          v5 = v5 + *(unsigned __int8 *)(v6 + 20);
        v3 += 16;
      }
      while (v3 != v4);
    }
    else
    {
      do
      {
        v7 = *(_QWORD *)(v3 + 8);
        if ((*(_BYTE *)(v7 + 4) & 6) == 0)
          v5 = v5 + *(unsigned __int8 *)(v7 + 20);
        v3 += 16;
      }
      while (v3 != v4);
    }
    return v5;
  }
  else if (sub_20FB67BB4((_QWORD *)a1, v47, a2))
  {
    *(_QWORD *)(a1 + 2400) = *(_QWORD *)(a1 + 2392);
    *(_QWORD *)(a1 + 2424) = *(_QWORD *)(a1 + 2416);
    *(_QWORD *)(a1 + 2448) = *(_QWORD *)(a1 + 2440);
    *(_QWORD *)(a1 + 2472) = *(_QWORD *)(a1 + 2464);
    *(_QWORD *)(a1 + 2496) = *(_QWORD *)(a1 + 2488);
    *(_QWORD *)(a1 + 2520) = *(_QWORD *)(a1 + 2512);
    *(_QWORD *)(a1 + 2544) = *(_QWORD *)(a1 + 2536);
    *(_QWORD *)(a1 + 2568) = *(_QWORD *)(a1 + 2560);
    *(_QWORD *)(a1 + 2592) = *(_QWORD *)(a1 + 2584);
    *(_QWORD *)(a1 + 2616) = *(_QWORD *)(a1 + 2608);
    *(_QWORD *)(a1 + 2640) = *(_QWORD *)(a1 + 2632);
    v8 = *(_QWORD *)(a1 + 1064);
    v9 = *(_QWORD *)(a1 + 1072);
    while (v8 != v9)
    {
      v10 = *(_QWORD *)(v8 + 208);
      if (*(_BYTE *)(v8 + 496) || (*(_BYTE *)(v10 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v8 + 216) + 4) & 6) != 0)
      {
        sub_20F394A20(a1 + 2392, v10);
        sub_20F3D35E0((_QWORD *)(a1 + 2392), *(_QWORD *)(v8 + 216));
      }
      v8 += 504;
    }
    v12 = *(_QWORD *)(a1 + 1088);
    v13 = *(_QWORD *)(a1 + 1096);
    while (v12 != v13)
    {
      v14 = *(_QWORD *)(v12 + 136);
      if (*(_BYTE *)(v12 + 272) || (*(_BYTE *)(v14 + 4) & 6) != 0)
        sub_20F394A20(a1 + 2392, v14);
      v12 += 280;
    }
    v15 = *(_QWORD *)(a1 + 1112);
    v16 = *(_QWORD *)(a1 + 1120);
    while (v15 != v16)
    {
      v17 = *(_QWORD *)(v15 + 136);
      if (*(_BYTE *)(v15 + 272) || (*(_BYTE *)(v17 + 4) & 6) != 0)
        sub_20F599C88((_QWORD *)(a1 + 2392), v17);
      v15 += 280;
    }
    v18 = *(_QWORD *)(a1 + 1136);
    v19 = *(_QWORD *)(a1 + 1144);
    while (v18 != v19)
    {
      v20 = *(_QWORD *)(v18 + 136);
      if (*(_BYTE *)(v18 + 272) || (*(_BYTE *)(v20 + 4) & 6) != 0)
        sub_20F59A480((_QWORD *)(a1 + 2392), v20);
      v18 += 280;
    }
    v21 = *(_QWORD *)(a1 + 1160);
    v22 = *(_QWORD *)(a1 + 1168);
    while (v21 != v22)
    {
      v23 = *(_QWORD *)(v21 + 64);
      if (*(_BYTE *)(v21 + 152) || (*(_BYTE *)(v23 + 4) & 6) != 0)
        sub_20F59A2E8((_QWORD *)(a1 + 2392), v23);
      v21 += 160;
    }
    sub_20F8DF7FC(*(_QWORD *)(a1 + 1184), *(_QWORD *)(a1 + 1192), (_QWORD *)(a1 + 2392));
    sub_20F5B85BC(*(_QWORD *)(a1 + 1208), *(_QWORD *)(a1 + 1216), (_QWORD *)(a1 + 2392));
    v24 = *(_QWORD *)(a1 + 1232);
    v25 = *(_QWORD *)(a1 + 1240);
    while (v24 != v25)
    {
      v26 = *(_QWORD *)(v24 + 48);
      if (*(_BYTE *)(v24 + 136) || (*(_BYTE *)(v26 + 4) & 6) != 0)
        sub_20F3D35E0((_QWORD *)(a1 + 2392), v26);
      v24 += 144;
    }
    v27 = *(_QWORD *)(a1 + 1256);
    v28 = *(_QWORD *)(a1 + 1264);
    while (v27 != v28)
    {
      v29 = *(_QWORD *)(v27 + 48);
      if (*(_BYTE *)(v27 + 144) || (*(_BYTE *)(v29 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v27 + 56) + 4) & 6) != 0)
      {
        sub_20F394A20(a1 + 2392, v29);
        sub_20F394A20(a1 + 2392, *(_QWORD *)(v27 + 56));
      }
      v27 += 152;
    }
    sub_20F8DF748(*(_QWORD *)(a1 + 1280), *(_QWORD *)(a1 + 1288), (_QWORD *)(a1 + 2392));
    sub_20F8DF65C(*(_QWORD *)(a1 + 1304), *(_QWORD *)(a1 + 1312), (_QWORD *)(a1 + 2392));
    v30 = *(_QWORD *)(a1 + 1328);
    v31 = *(_QWORD *)(a1 + 1336);
    while (v30 != v31)
    {
      v32 = *(_QWORD *)(v30 + 48);
      if (*(_BYTE *)(v30 + 104) || (*(_BYTE *)(v32 + 4) & 6) != 0)
        sub_20F59A150((_QWORD *)(a1 + 2392), v32);
      v30 += 112;
    }
    v33 = *(_QWORD *)(a1 + 1352);
    v34 = *(_QWORD *)(a1 + 1360);
    while (v33 != v34)
    {
      v35 = *(_QWORD *)(v33 + 96);
      if (*(_BYTE *)(v33 + 200) || (*(_BYTE *)(v35 + 4) & 6) != 0)
        sub_20F599FB8((_QWORD *)(a1 + 2392), v35);
      v33 += 208;
    }
    v36 = *(_QWORD *)(a1 + 1376);
    v37 = *(_QWORD *)(a1 + 1384);
    while (v36 != v37)
    {
      v38 = *(_QWORD *)(v36 + 96);
      if (*(_BYTE *)(v36 + 200) || (*(_BYTE *)(v38 + 4) & 6) != 0)
        sub_20F599E20((_QWORD *)(a1 + 2392), v38);
      v36 += 208;
    }
    v39 = *(_QWORD *)(a1 + 1400);
    v40 = *(_QWORD *)(a1 + 1408);
    while (v39 != v40)
    {
      v41 = *(_QWORD *)(v39 + 80);
      if (*(_BYTE *)(v39 + 168) || (*(_BYTE *)(v41 + 4) & 6) != 0)
        sub_20F8DAC28((_QWORD *)(a1 + 2392), v41);
      v39 += 176;
    }
    v42 = *(_QWORD *)(a1 + 1424);
    v43 = *(_QWORD *)(a1 + 1432);
    while (v42 != v43)
    {
      v44 = *(_QWORD *)(v42 + 80);
      if (*(_BYTE *)(v42 + 168) || (*(_BYTE *)(v44 + 4) & 6) != 0)
        sub_20F8DADC0((_QWORD *)(a1 + 2392), v44);
      v42 += 176;
    }
    sub_20F8DF4E4(*(_QWORD *)(a1 + 1448), *(_QWORD *)(a1 + 1456), (_QWORD *)(a1 + 2392));
    sub_20F8DF3F8(*(_QWORD *)(a1 + 1472), *(_QWORD *)(a1 + 1480), (_QWORD *)(a1 + 2392));
    sub_20F8DF280(*(_QWORD *)(a1 + 1496), *(_QWORD *)(a1 + 1504), (_QWORD *)(a1 + 2392));
    v45 = (uint64_t)(*(_QWORD *)(a1 + 2400) - *(_QWORD *)(a1 + 2392)) >> 2;
    if (v45 <= v47[0])
      v46 = (v47[0] - v45);
    else
      v46 = 0;
    sub_20F8DB0F0((_QWORD *)a1);
    return v46;
  }
  else
  {
    return v47[0];
  }
}

void sub_20FB67AB0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB67AC4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB67AD8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB67AEC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB67B00(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB67B14(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB67B28(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB67B3C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB67B50(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB67B64(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB67B78(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB67B8C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB67BA0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

BOOL sub_20FB67BB4(_QWORD *a1, _DWORD *a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;

  v3 = a1[1];
  v4 = a1[2];
  if (v3 == v4)
  {
    v5 = 0;
    v6 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(v3 + 8);
      if ((*(_BYTE *)(v7 + 4) & 2) != 0 || (*(_BYTE *)(v7 + 4) & 4) != 0 && (a3 & 1) == 0)
        v5 = 1;
      v6 += *(unsigned __int8 *)(v7 + 20);
      v3 += 16;
    }
    while (v3 != v4);
  }
  *a2 = v6;
  v8 = a1[13];
  v9 = a1[14];
  if (v8 == v9)
  {
    v10 = 0;
  }
  else
  {
    v10 = 0;
    do
    {
      v11 = *(_QWORD *)(v8 + 8);
      if ((*(_BYTE *)(v11 + 4) & 2) != 0 || (*(_BYTE *)(v11 + 4) & 4) != 0 && (a3 & 1) == 0)
        v5 = 1;
      v10 += *(unsigned __int8 *)(v11 + 20);
      v8 += 16;
    }
    while (v8 != v9);
  }
  a2[1] = v10;
  v12 = a1[25];
  v13 = a1[26];
  if (v12 == v13)
  {
    v14 = 0;
  }
  else
  {
    v14 = 0;
    do
    {
      v15 = *(_QWORD *)(v12 + 8);
      if ((*(_BYTE *)(v15 + 4) & 2) != 0 || (*(_BYTE *)(v15 + 4) & 4) != 0 && (a3 & 1) == 0)
        v5 = 1;
      v14 += *(unsigned __int8 *)(v15 + 20);
      v12 += 16;
    }
    while (v12 != v13);
  }
  a2[2] = v14;
  v16 = a1[37];
  v17 = a1[38];
  if (v16 == v17)
  {
    v18 = 0;
  }
  else
  {
    v18 = 0;
    do
    {
      v19 = *(_QWORD *)(v16 + 8);
      if ((*(_BYTE *)(v19 + 4) & 2) != 0 || (*(_BYTE *)(v19 + 4) & 4) != 0 && (a3 & 1) == 0)
        v5 = 1;
      v18 += *(unsigned __int8 *)(v19 + 20);
      v16 += 16;
    }
    while (v16 != v17);
  }
  a2[3] = v18;
  v20 = a1[49];
  v21 = a1[50];
  if (v20 == v21)
  {
    v22 = 0;
  }
  else
  {
    v22 = 0;
    do
    {
      v23 = *(_QWORD *)(v20 + 8);
      if ((*(_BYTE *)(v23 + 4) & 2) != 0 || (*(_BYTE *)(v23 + 4) & 4) != 0 && (a3 & 1) == 0)
        v5 = 1;
      v22 += *(unsigned __int8 *)(v23 + 20);
      v20 += 16;
    }
    while (v20 != v21);
  }
  a2[4] = v22;
  v24 = a1[61];
  v25 = a1[62];
  if (v24 == v25)
  {
    v26 = 0;
  }
  else
  {
    v26 = 0;
    do
    {
      v27 = *(_QWORD *)(v24 + 8);
      if ((*(_BYTE *)(v27 + 4) & 2) != 0 || (*(_BYTE *)(v27 + 4) & 4) != 0 && (a3 & 1) == 0)
        v5 = 1;
      v26 += *(unsigned __int8 *)(v27 + 20);
      v24 += 16;
    }
    while (v24 != v25);
  }
  a2[5] = v26;
  v28 = a1[73];
  v29 = a1[74];
  if (v28 == v29)
  {
    v30 = 0;
  }
  else
  {
    v30 = 0;
    do
    {
      v31 = *(_QWORD *)(v28 + 8);
      if ((*(_BYTE *)(v31 + 4) & 2) != 0 || (*(_BYTE *)(v31 + 4) & 4) != 0 && (a3 & 1) == 0)
        v5 = 1;
      v30 += *(unsigned __int8 *)(v31 + 20);
      v28 += 16;
    }
    while (v28 != v29);
  }
  a2[6] = v30;
  v32 = a1[85];
  v33 = a1[86];
  if (v32 == v33)
  {
    v34 = 0;
  }
  else
  {
    v34 = 0;
    do
    {
      v35 = *(_QWORD *)(v32 + 8);
      if ((*(_BYTE *)(v35 + 4) & 2) != 0 || (*(_BYTE *)(v35 + 4) & 4) != 0 && (a3 & 1) == 0)
        v5 = 1;
      v34 += *(unsigned __int8 *)(v35 + 20);
      v32 += 16;
    }
    while (v32 != v33);
  }
  a2[7] = v34;
  v36 = a1[97];
  v37 = a1[98];
  if (v36 == v37)
  {
    v38 = 0;
  }
  else
  {
    v38 = 0;
    do
    {
      v39 = *(_QWORD *)(v36 + 8);
      if ((*(_BYTE *)(v39 + 4) & 2) != 0 || (*(_BYTE *)(v39 + 4) & 4) != 0 && (a3 & 1) == 0)
        v5 = 1;
      v38 += *(unsigned __int8 *)(v39 + 20);
      v36 += 16;
    }
    while (v36 != v37);
  }
  a2[8] = v38;
  v40 = a1[109];
  v41 = a1[110];
  if (v40 == v41)
  {
    v42 = 0;
  }
  else
  {
    v42 = 0;
    do
    {
      v43 = *(_QWORD *)(v40 + 8);
      if ((*(_BYTE *)(v43 + 4) & 2) != 0 || (*(_BYTE *)(v43 + 4) & 4) != 0 && (a3 & 1) == 0)
        v5 = 1;
      v42 += *(unsigned __int8 *)(v43 + 20);
      v40 += 16;
    }
    while (v40 != v41);
  }
  a2[9] = v42;
  v44 = a1[121];
  v45 = a1[122];
  if (v44 == v45)
  {
    v46 = 0;
  }
  else
  {
    v46 = 0;
    do
    {
      v47 = *(_QWORD *)(v44 + 8);
      if ((*(_BYTE *)(v47 + 4) & 2) != 0 || (*(_BYTE *)(v47 + 4) & 4) != 0 && (a3 & 1) == 0)
        v5 = 1;
      v46 += *(unsigned __int8 *)(v47 + 20);
      v44 += 16;
    }
    while (v44 != v45);
  }
  a2[10] = v46;
  return v5 != 0;
}

uint64_t sub_20FB67F20(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  int v47;
  unsigned int v48;

  if (*(_BYTE *)(a1 + 1592))
  {
    v3 = *(_QWORD *)(a1 + 104);
    v4 = *(_QWORD *)(a1 + 112);
    if (v3 == v4)
      return 0;
    v5 = 0;
    if ((a2 & 1) != 0)
    {
      do
      {
        v6 = *(_QWORD *)(v3 + 8);
        if ((*(_BYTE *)(v6 + 4) & 2) == 0)
          v5 = v5 + *(unsigned __int8 *)(v6 + 20);
        v3 += 16;
      }
      while (v3 != v4);
    }
    else
    {
      do
      {
        v7 = *(_QWORD *)(v3 + 8);
        if ((*(_BYTE *)(v7 + 4) & 6) == 0)
          v5 = v5 + *(unsigned __int8 *)(v7 + 20);
        v3 += 16;
      }
      while (v3 != v4);
    }
    return v5;
  }
  else if (sub_20FB67BB4((_QWORD *)a1, &v47, a2))
  {
    *(_QWORD *)(a1 + 2400) = *(_QWORD *)(a1 + 2392);
    *(_QWORD *)(a1 + 2424) = *(_QWORD *)(a1 + 2416);
    *(_QWORD *)(a1 + 2448) = *(_QWORD *)(a1 + 2440);
    *(_QWORD *)(a1 + 2472) = *(_QWORD *)(a1 + 2464);
    *(_QWORD *)(a1 + 2496) = *(_QWORD *)(a1 + 2488);
    *(_QWORD *)(a1 + 2520) = *(_QWORD *)(a1 + 2512);
    *(_QWORD *)(a1 + 2544) = *(_QWORD *)(a1 + 2536);
    *(_QWORD *)(a1 + 2568) = *(_QWORD *)(a1 + 2560);
    *(_QWORD *)(a1 + 2592) = *(_QWORD *)(a1 + 2584);
    *(_QWORD *)(a1 + 2616) = *(_QWORD *)(a1 + 2608);
    *(_QWORD *)(a1 + 2640) = *(_QWORD *)(a1 + 2632);
    v8 = *(_QWORD *)(a1 + 1064);
    v9 = *(_QWORD *)(a1 + 1072);
    while (v8 != v9)
    {
      v10 = *(_QWORD *)(v8 + 208);
      if (*(_BYTE *)(v8 + 496) || (*(_BYTE *)(v10 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v8 + 216) + 4) & 6) != 0)
      {
        sub_20F394A20(a1 + 2392, v10);
        sub_20F3D35E0((_QWORD *)(a1 + 2392), *(_QWORD *)(v8 + 216));
      }
      v8 += 504;
    }
    v12 = *(_QWORD *)(a1 + 1088);
    v13 = *(_QWORD *)(a1 + 1096);
    while (v12 != v13)
    {
      v14 = *(_QWORD *)(v12 + 136);
      if (*(_BYTE *)(v12 + 272) || (*(_BYTE *)(v14 + 4) & 6) != 0)
        sub_20F394A20(a1 + 2392, v14);
      v12 += 280;
    }
    v15 = *(_QWORD *)(a1 + 1112);
    v16 = *(_QWORD *)(a1 + 1120);
    while (v15 != v16)
    {
      v17 = *(_QWORD *)(v15 + 136);
      if (*(_BYTE *)(v15 + 272) || (*(_BYTE *)(v17 + 4) & 6) != 0)
        sub_20F599C88((_QWORD *)(a1 + 2392), v17);
      v15 += 280;
    }
    v18 = *(_QWORD *)(a1 + 1136);
    v19 = *(_QWORD *)(a1 + 1144);
    while (v18 != v19)
    {
      v20 = *(_QWORD *)(v18 + 136);
      if (*(_BYTE *)(v18 + 272) || (*(_BYTE *)(v20 + 4) & 6) != 0)
        sub_20F59A480((_QWORD *)(a1 + 2392), v20);
      v18 += 280;
    }
    v21 = *(_QWORD *)(a1 + 1160);
    v22 = *(_QWORD *)(a1 + 1168);
    while (v21 != v22)
    {
      v23 = *(_QWORD *)(v21 + 64);
      if (*(_BYTE *)(v21 + 152) || (*(_BYTE *)(v23 + 4) & 6) != 0)
        sub_20F59A2E8((_QWORD *)(a1 + 2392), v23);
      v21 += 160;
    }
    sub_20F8DF7FC(*(_QWORD *)(a1 + 1184), *(_QWORD *)(a1 + 1192), (_QWORD *)(a1 + 2392));
    sub_20F5B85BC(*(_QWORD *)(a1 + 1208), *(_QWORD *)(a1 + 1216), (_QWORD *)(a1 + 2392));
    v24 = *(_QWORD *)(a1 + 1232);
    v25 = *(_QWORD *)(a1 + 1240);
    while (v24 != v25)
    {
      v26 = *(_QWORD *)(v24 + 48);
      if (*(_BYTE *)(v24 + 136) || (*(_BYTE *)(v26 + 4) & 6) != 0)
        sub_20F3D35E0((_QWORD *)(a1 + 2392), v26);
      v24 += 144;
    }
    v27 = *(_QWORD *)(a1 + 1256);
    v28 = *(_QWORD *)(a1 + 1264);
    while (v27 != v28)
    {
      v29 = *(_QWORD *)(v27 + 48);
      if (*(_BYTE *)(v27 + 144) || (*(_BYTE *)(v29 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v27 + 56) + 4) & 6) != 0)
      {
        sub_20F394A20(a1 + 2392, v29);
        sub_20F394A20(a1 + 2392, *(_QWORD *)(v27 + 56));
      }
      v27 += 152;
    }
    sub_20F8DF748(*(_QWORD *)(a1 + 1280), *(_QWORD *)(a1 + 1288), (_QWORD *)(a1 + 2392));
    sub_20F8DF65C(*(_QWORD *)(a1 + 1304), *(_QWORD *)(a1 + 1312), (_QWORD *)(a1 + 2392));
    v30 = *(_QWORD *)(a1 + 1328);
    v31 = *(_QWORD *)(a1 + 1336);
    while (v30 != v31)
    {
      v32 = *(_QWORD *)(v30 + 48);
      if (*(_BYTE *)(v30 + 104) || (*(_BYTE *)(v32 + 4) & 6) != 0)
        sub_20F59A150((_QWORD *)(a1 + 2392), v32);
      v30 += 112;
    }
    v33 = *(_QWORD *)(a1 + 1352);
    v34 = *(_QWORD *)(a1 + 1360);
    while (v33 != v34)
    {
      v35 = *(_QWORD *)(v33 + 96);
      if (*(_BYTE *)(v33 + 200) || (*(_BYTE *)(v35 + 4) & 6) != 0)
        sub_20F599FB8((_QWORD *)(a1 + 2392), v35);
      v33 += 208;
    }
    v36 = *(_QWORD *)(a1 + 1376);
    v37 = *(_QWORD *)(a1 + 1384);
    while (v36 != v37)
    {
      v38 = *(_QWORD *)(v36 + 96);
      if (*(_BYTE *)(v36 + 200) || (*(_BYTE *)(v38 + 4) & 6) != 0)
        sub_20F599E20((_QWORD *)(a1 + 2392), v38);
      v36 += 208;
    }
    v39 = *(_QWORD *)(a1 + 1400);
    v40 = *(_QWORD *)(a1 + 1408);
    while (v39 != v40)
    {
      v41 = *(_QWORD *)(v39 + 80);
      if (*(_BYTE *)(v39 + 168) || (*(_BYTE *)(v41 + 4) & 6) != 0)
        sub_20F8DAC28((_QWORD *)(a1 + 2392), v41);
      v39 += 176;
    }
    v42 = *(_QWORD *)(a1 + 1424);
    v43 = *(_QWORD *)(a1 + 1432);
    while (v42 != v43)
    {
      v44 = *(_QWORD *)(v42 + 80);
      if (*(_BYTE *)(v42 + 168) || (*(_BYTE *)(v44 + 4) & 6) != 0)
        sub_20F8DADC0((_QWORD *)(a1 + 2392), v44);
      v42 += 176;
    }
    sub_20F8DF4E4(*(_QWORD *)(a1 + 1448), *(_QWORD *)(a1 + 1456), (_QWORD *)(a1 + 2392));
    sub_20F8DF3F8(*(_QWORD *)(a1 + 1472), *(_QWORD *)(a1 + 1480), (_QWORD *)(a1 + 2392));
    sub_20F8DF280(*(_QWORD *)(a1 + 1496), *(_QWORD *)(a1 + 1504), (_QWORD *)(a1 + 2392));
    v45 = (uint64_t)(*(_QWORD *)(a1 + 2424) - *(_QWORD *)(a1 + 2416)) >> 2;
    if (v45 <= v48)
      v46 = v48 - v45;
    else
      v46 = 0;
    sub_20F8DB0F0((_QWORD *)a1);
    return v46;
  }
  else
  {
    return v48;
  }
}

void sub_20FB68404(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB68418(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6842C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB68440(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB68454(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB68468(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6847C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB68490(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB684A4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB684B8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB684CC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB684E0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB684F4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20FB68508(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  int v47;
  unsigned int v48;

  if (*(_BYTE *)(a1 + 1592))
  {
    v3 = *(_QWORD *)(a1 + 200);
    v4 = *(_QWORD *)(a1 + 208);
    if (v3 == v4)
      return 0;
    v5 = 0;
    if ((a2 & 1) != 0)
    {
      do
      {
        v6 = *(_QWORD *)(v3 + 8);
        if ((*(_BYTE *)(v6 + 4) & 2) == 0)
          v5 = v5 + *(unsigned __int8 *)(v6 + 20);
        v3 += 16;
      }
      while (v3 != v4);
    }
    else
    {
      do
      {
        v7 = *(_QWORD *)(v3 + 8);
        if ((*(_BYTE *)(v7 + 4) & 6) == 0)
          v5 = v5 + *(unsigned __int8 *)(v7 + 20);
        v3 += 16;
      }
      while (v3 != v4);
    }
    return v5;
  }
  else if (sub_20FB67BB4((_QWORD *)a1, &v47, a2))
  {
    *(_QWORD *)(a1 + 2400) = *(_QWORD *)(a1 + 2392);
    *(_QWORD *)(a1 + 2424) = *(_QWORD *)(a1 + 2416);
    *(_QWORD *)(a1 + 2448) = *(_QWORD *)(a1 + 2440);
    *(_QWORD *)(a1 + 2472) = *(_QWORD *)(a1 + 2464);
    *(_QWORD *)(a1 + 2496) = *(_QWORD *)(a1 + 2488);
    *(_QWORD *)(a1 + 2520) = *(_QWORD *)(a1 + 2512);
    *(_QWORD *)(a1 + 2544) = *(_QWORD *)(a1 + 2536);
    *(_QWORD *)(a1 + 2568) = *(_QWORD *)(a1 + 2560);
    *(_QWORD *)(a1 + 2592) = *(_QWORD *)(a1 + 2584);
    *(_QWORD *)(a1 + 2616) = *(_QWORD *)(a1 + 2608);
    *(_QWORD *)(a1 + 2640) = *(_QWORD *)(a1 + 2632);
    v8 = *(_QWORD *)(a1 + 1064);
    v9 = *(_QWORD *)(a1 + 1072);
    while (v8 != v9)
    {
      v10 = *(_QWORD *)(v8 + 208);
      if (*(_BYTE *)(v8 + 496) || (*(_BYTE *)(v10 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v8 + 216) + 4) & 6) != 0)
      {
        sub_20F394A20(a1 + 2392, v10);
        sub_20F3D35E0((_QWORD *)(a1 + 2392), *(_QWORD *)(v8 + 216));
      }
      v8 += 504;
    }
    v12 = *(_QWORD *)(a1 + 1088);
    v13 = *(_QWORD *)(a1 + 1096);
    while (v12 != v13)
    {
      v14 = *(_QWORD *)(v12 + 136);
      if (*(_BYTE *)(v12 + 272) || (*(_BYTE *)(v14 + 4) & 6) != 0)
        sub_20F394A20(a1 + 2392, v14);
      v12 += 280;
    }
    v15 = *(_QWORD *)(a1 + 1112);
    v16 = *(_QWORD *)(a1 + 1120);
    while (v15 != v16)
    {
      v17 = *(_QWORD *)(v15 + 136);
      if (*(_BYTE *)(v15 + 272) || (*(_BYTE *)(v17 + 4) & 6) != 0)
        sub_20F599C88((_QWORD *)(a1 + 2392), v17);
      v15 += 280;
    }
    v18 = *(_QWORD *)(a1 + 1136);
    v19 = *(_QWORD *)(a1 + 1144);
    while (v18 != v19)
    {
      v20 = *(_QWORD *)(v18 + 136);
      if (*(_BYTE *)(v18 + 272) || (*(_BYTE *)(v20 + 4) & 6) != 0)
        sub_20F59A480((_QWORD *)(a1 + 2392), v20);
      v18 += 280;
    }
    v21 = *(_QWORD *)(a1 + 1160);
    v22 = *(_QWORD *)(a1 + 1168);
    while (v21 != v22)
    {
      v23 = *(_QWORD *)(v21 + 64);
      if (*(_BYTE *)(v21 + 152) || (*(_BYTE *)(v23 + 4) & 6) != 0)
        sub_20F59A2E8((_QWORD *)(a1 + 2392), v23);
      v21 += 160;
    }
    sub_20F8DF7FC(*(_QWORD *)(a1 + 1184), *(_QWORD *)(a1 + 1192), (_QWORD *)(a1 + 2392));
    sub_20F5B85BC(*(_QWORD *)(a1 + 1208), *(_QWORD *)(a1 + 1216), (_QWORD *)(a1 + 2392));
    v24 = *(_QWORD *)(a1 + 1232);
    v25 = *(_QWORD *)(a1 + 1240);
    while (v24 != v25)
    {
      v26 = *(_QWORD *)(v24 + 48);
      if (*(_BYTE *)(v24 + 136) || (*(_BYTE *)(v26 + 4) & 6) != 0)
        sub_20F3D35E0((_QWORD *)(a1 + 2392), v26);
      v24 += 144;
    }
    v27 = *(_QWORD *)(a1 + 1256);
    v28 = *(_QWORD *)(a1 + 1264);
    while (v27 != v28)
    {
      v29 = *(_QWORD *)(v27 + 48);
      if (*(_BYTE *)(v27 + 144) || (*(_BYTE *)(v29 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v27 + 56) + 4) & 6) != 0)
      {
        sub_20F394A20(a1 + 2392, v29);
        sub_20F394A20(a1 + 2392, *(_QWORD *)(v27 + 56));
      }
      v27 += 152;
    }
    sub_20F8DF748(*(_QWORD *)(a1 + 1280), *(_QWORD *)(a1 + 1288), (_QWORD *)(a1 + 2392));
    sub_20F8DF65C(*(_QWORD *)(a1 + 1304), *(_QWORD *)(a1 + 1312), (_QWORD *)(a1 + 2392));
    v30 = *(_QWORD *)(a1 + 1328);
    v31 = *(_QWORD *)(a1 + 1336);
    while (v30 != v31)
    {
      v32 = *(_QWORD *)(v30 + 48);
      if (*(_BYTE *)(v30 + 104) || (*(_BYTE *)(v32 + 4) & 6) != 0)
        sub_20F59A150((_QWORD *)(a1 + 2392), v32);
      v30 += 112;
    }
    v33 = *(_QWORD *)(a1 + 1352);
    v34 = *(_QWORD *)(a1 + 1360);
    while (v33 != v34)
    {
      v35 = *(_QWORD *)(v33 + 96);
      if (*(_BYTE *)(v33 + 200) || (*(_BYTE *)(v35 + 4) & 6) != 0)
        sub_20F599FB8((_QWORD *)(a1 + 2392), v35);
      v33 += 208;
    }
    v36 = *(_QWORD *)(a1 + 1376);
    v37 = *(_QWORD *)(a1 + 1384);
    while (v36 != v37)
    {
      v38 = *(_QWORD *)(v36 + 96);
      if (*(_BYTE *)(v36 + 200) || (*(_BYTE *)(v38 + 4) & 6) != 0)
        sub_20F599E20((_QWORD *)(a1 + 2392), v38);
      v36 += 208;
    }
    v39 = *(_QWORD *)(a1 + 1400);
    v40 = *(_QWORD *)(a1 + 1408);
    while (v39 != v40)
    {
      v41 = *(_QWORD *)(v39 + 80);
      if (*(_BYTE *)(v39 + 168) || (*(_BYTE *)(v41 + 4) & 6) != 0)
        sub_20F8DAC28((_QWORD *)(a1 + 2392), v41);
      v39 += 176;
    }
    v42 = *(_QWORD *)(a1 + 1424);
    v43 = *(_QWORD *)(a1 + 1432);
    while (v42 != v43)
    {
      v44 = *(_QWORD *)(v42 + 80);
      if (*(_BYTE *)(v42 + 168) || (*(_BYTE *)(v44 + 4) & 6) != 0)
        sub_20F8DADC0((_QWORD *)(a1 + 2392), v44);
      v42 += 176;
    }
    sub_20F8DF4E4(*(_QWORD *)(a1 + 1448), *(_QWORD *)(a1 + 1456), (_QWORD *)(a1 + 2392));
    sub_20F8DF3F8(*(_QWORD *)(a1 + 1472), *(_QWORD *)(a1 + 1480), (_QWORD *)(a1 + 2392));
    sub_20F8DF280(*(_QWORD *)(a1 + 1496), *(_QWORD *)(a1 + 1504), (_QWORD *)(a1 + 2392));
    v45 = (uint64_t)(*(_QWORD *)(a1 + 2448) - *(_QWORD *)(a1 + 2440)) >> 2;
    if (v45 <= v48)
      v46 = v48 - v45;
    else
      v46 = 0;
    sub_20F8DB0F0((_QWORD *)a1);
    return v46;
  }
  else
  {
    return v48;
  }
}

void sub_20FB689EC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB68A00(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB68A14(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB68A28(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB68A3C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB68A50(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB68A64(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB68A78(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB68A8C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB68AA0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB68AB4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB68AC8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB68ADC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20FB68AF0(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _DWORD v47[3];
  unsigned int v48;

  if (*(_BYTE *)(a1 + 1592))
  {
    v3 = *(_QWORD *)(a1 + 296);
    v4 = *(_QWORD *)(a1 + 304);
    if (v3 == v4)
      return 0;
    v5 = 0;
    if ((a2 & 1) != 0)
    {
      do
      {
        v6 = *(_QWORD *)(v3 + 8);
        if ((*(_BYTE *)(v6 + 4) & 2) == 0)
          v5 = v5 + *(unsigned __int8 *)(v6 + 20);
        v3 += 16;
      }
      while (v3 != v4);
    }
    else
    {
      do
      {
        v7 = *(_QWORD *)(v3 + 8);
        if ((*(_BYTE *)(v7 + 4) & 6) == 0)
          v5 = v5 + *(unsigned __int8 *)(v7 + 20);
        v3 += 16;
      }
      while (v3 != v4);
    }
    return v5;
  }
  else if (sub_20FB67BB4((_QWORD *)a1, v47, a2))
  {
    *(_QWORD *)(a1 + 2400) = *(_QWORD *)(a1 + 2392);
    *(_QWORD *)(a1 + 2424) = *(_QWORD *)(a1 + 2416);
    *(_QWORD *)(a1 + 2448) = *(_QWORD *)(a1 + 2440);
    *(_QWORD *)(a1 + 2472) = *(_QWORD *)(a1 + 2464);
    *(_QWORD *)(a1 + 2496) = *(_QWORD *)(a1 + 2488);
    *(_QWORD *)(a1 + 2520) = *(_QWORD *)(a1 + 2512);
    *(_QWORD *)(a1 + 2544) = *(_QWORD *)(a1 + 2536);
    *(_QWORD *)(a1 + 2568) = *(_QWORD *)(a1 + 2560);
    *(_QWORD *)(a1 + 2592) = *(_QWORD *)(a1 + 2584);
    *(_QWORD *)(a1 + 2616) = *(_QWORD *)(a1 + 2608);
    *(_QWORD *)(a1 + 2640) = *(_QWORD *)(a1 + 2632);
    v8 = *(_QWORD *)(a1 + 1064);
    v9 = *(_QWORD *)(a1 + 1072);
    while (v8 != v9)
    {
      v10 = *(_QWORD *)(v8 + 208);
      if (*(_BYTE *)(v8 + 496) || (*(_BYTE *)(v10 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v8 + 216) + 4) & 6) != 0)
      {
        sub_20F394A20(a1 + 2392, v10);
        sub_20F3D35E0((_QWORD *)(a1 + 2392), *(_QWORD *)(v8 + 216));
      }
      v8 += 504;
    }
    v12 = *(_QWORD *)(a1 + 1088);
    v13 = *(_QWORD *)(a1 + 1096);
    while (v12 != v13)
    {
      v14 = *(_QWORD *)(v12 + 136);
      if (*(_BYTE *)(v12 + 272) || (*(_BYTE *)(v14 + 4) & 6) != 0)
        sub_20F394A20(a1 + 2392, v14);
      v12 += 280;
    }
    v15 = *(_QWORD *)(a1 + 1112);
    v16 = *(_QWORD *)(a1 + 1120);
    while (v15 != v16)
    {
      v17 = *(_QWORD *)(v15 + 136);
      if (*(_BYTE *)(v15 + 272) || (*(_BYTE *)(v17 + 4) & 6) != 0)
        sub_20F599C88((_QWORD *)(a1 + 2392), v17);
      v15 += 280;
    }
    v18 = *(_QWORD *)(a1 + 1136);
    v19 = *(_QWORD *)(a1 + 1144);
    while (v18 != v19)
    {
      v20 = *(_QWORD *)(v18 + 136);
      if (*(_BYTE *)(v18 + 272) || (*(_BYTE *)(v20 + 4) & 6) != 0)
        sub_20F59A480((_QWORD *)(a1 + 2392), v20);
      v18 += 280;
    }
    v21 = *(_QWORD *)(a1 + 1160);
    v22 = *(_QWORD *)(a1 + 1168);
    while (v21 != v22)
    {
      v23 = *(_QWORD *)(v21 + 64);
      if (*(_BYTE *)(v21 + 152) || (*(_BYTE *)(v23 + 4) & 6) != 0)
        sub_20F59A2E8((_QWORD *)(a1 + 2392), v23);
      v21 += 160;
    }
    sub_20F8DF7FC(*(_QWORD *)(a1 + 1184), *(_QWORD *)(a1 + 1192), (_QWORD *)(a1 + 2392));
    sub_20F5B85BC(*(_QWORD *)(a1 + 1208), *(_QWORD *)(a1 + 1216), (_QWORD *)(a1 + 2392));
    v24 = *(_QWORD *)(a1 + 1232);
    v25 = *(_QWORD *)(a1 + 1240);
    while (v24 != v25)
    {
      v26 = *(_QWORD *)(v24 + 48);
      if (*(_BYTE *)(v24 + 136) || (*(_BYTE *)(v26 + 4) & 6) != 0)
        sub_20F3D35E0((_QWORD *)(a1 + 2392), v26);
      v24 += 144;
    }
    v27 = *(_QWORD *)(a1 + 1256);
    v28 = *(_QWORD *)(a1 + 1264);
    while (v27 != v28)
    {
      v29 = *(_QWORD *)(v27 + 48);
      if (*(_BYTE *)(v27 + 144) || (*(_BYTE *)(v29 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v27 + 56) + 4) & 6) != 0)
      {
        sub_20F394A20(a1 + 2392, v29);
        sub_20F394A20(a1 + 2392, *(_QWORD *)(v27 + 56));
      }
      v27 += 152;
    }
    sub_20F8DF748(*(_QWORD *)(a1 + 1280), *(_QWORD *)(a1 + 1288), (_QWORD *)(a1 + 2392));
    sub_20F8DF65C(*(_QWORD *)(a1 + 1304), *(_QWORD *)(a1 + 1312), (_QWORD *)(a1 + 2392));
    v30 = *(_QWORD *)(a1 + 1328);
    v31 = *(_QWORD *)(a1 + 1336);
    while (v30 != v31)
    {
      v32 = *(_QWORD *)(v30 + 48);
      if (*(_BYTE *)(v30 + 104) || (*(_BYTE *)(v32 + 4) & 6) != 0)
        sub_20F59A150((_QWORD *)(a1 + 2392), v32);
      v30 += 112;
    }
    v33 = *(_QWORD *)(a1 + 1352);
    v34 = *(_QWORD *)(a1 + 1360);
    while (v33 != v34)
    {
      v35 = *(_QWORD *)(v33 + 96);
      if (*(_BYTE *)(v33 + 200) || (*(_BYTE *)(v35 + 4) & 6) != 0)
        sub_20F599FB8((_QWORD *)(a1 + 2392), v35);
      v33 += 208;
    }
    v36 = *(_QWORD *)(a1 + 1376);
    v37 = *(_QWORD *)(a1 + 1384);
    while (v36 != v37)
    {
      v38 = *(_QWORD *)(v36 + 96);
      if (*(_BYTE *)(v36 + 200) || (*(_BYTE *)(v38 + 4) & 6) != 0)
        sub_20F599E20((_QWORD *)(a1 + 2392), v38);
      v36 += 208;
    }
    v39 = *(_QWORD *)(a1 + 1400);
    v40 = *(_QWORD *)(a1 + 1408);
    while (v39 != v40)
    {
      v41 = *(_QWORD *)(v39 + 80);
      if (*(_BYTE *)(v39 + 168) || (*(_BYTE *)(v41 + 4) & 6) != 0)
        sub_20F8DAC28((_QWORD *)(a1 + 2392), v41);
      v39 += 176;
    }
    v42 = *(_QWORD *)(a1 + 1424);
    v43 = *(_QWORD *)(a1 + 1432);
    while (v42 != v43)
    {
      v44 = *(_QWORD *)(v42 + 80);
      if (*(_BYTE *)(v42 + 168) || (*(_BYTE *)(v44 + 4) & 6) != 0)
        sub_20F8DADC0((_QWORD *)(a1 + 2392), v44);
      v42 += 176;
    }
    sub_20F8DF4E4(*(_QWORD *)(a1 + 1448), *(_QWORD *)(a1 + 1456), (_QWORD *)(a1 + 2392));
    sub_20F8DF3F8(*(_QWORD *)(a1 + 1472), *(_QWORD *)(a1 + 1480), (_QWORD *)(a1 + 2392));
    sub_20F8DF280(*(_QWORD *)(a1 + 1496), *(_QWORD *)(a1 + 1504), (_QWORD *)(a1 + 2392));
    v45 = (uint64_t)(*(_QWORD *)(a1 + 2472) - *(_QWORD *)(a1 + 2464)) >> 2;
    if (v45 <= v48)
      v46 = v48 - v45;
    else
      v46 = 0;
    sub_20F8DB0F0((_QWORD *)a1);
    return v46;
  }
  else
  {
    return v48;
  }
}

void sub_20FB68FD4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB68FE8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB68FFC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB69010(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB69024(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB69038(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6904C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB69060(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB69074(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB69088(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6909C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB690B0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB690C4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20FB690D8(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _DWORD v47[4];
  unsigned int v48;

  if (*(_BYTE *)(a1 + 1592))
  {
    v3 = *(_QWORD *)(a1 + 392);
    v4 = *(_QWORD *)(a1 + 400);
    if (v3 == v4)
      return 0;
    v5 = 0;
    if ((a2 & 1) != 0)
    {
      do
      {
        v6 = *(_QWORD *)(v3 + 8);
        if ((*(_BYTE *)(v6 + 4) & 2) == 0)
          v5 = v5 + *(unsigned __int8 *)(v6 + 20);
        v3 += 16;
      }
      while (v3 != v4);
    }
    else
    {
      do
      {
        v7 = *(_QWORD *)(v3 + 8);
        if ((*(_BYTE *)(v7 + 4) & 6) == 0)
          v5 = v5 + *(unsigned __int8 *)(v7 + 20);
        v3 += 16;
      }
      while (v3 != v4);
    }
    return v5;
  }
  else if (sub_20FB67BB4((_QWORD *)a1, v47, a2))
  {
    *(_QWORD *)(a1 + 2400) = *(_QWORD *)(a1 + 2392);
    *(_QWORD *)(a1 + 2424) = *(_QWORD *)(a1 + 2416);
    *(_QWORD *)(a1 + 2448) = *(_QWORD *)(a1 + 2440);
    *(_QWORD *)(a1 + 2472) = *(_QWORD *)(a1 + 2464);
    *(_QWORD *)(a1 + 2496) = *(_QWORD *)(a1 + 2488);
    *(_QWORD *)(a1 + 2520) = *(_QWORD *)(a1 + 2512);
    *(_QWORD *)(a1 + 2544) = *(_QWORD *)(a1 + 2536);
    *(_QWORD *)(a1 + 2568) = *(_QWORD *)(a1 + 2560);
    *(_QWORD *)(a1 + 2592) = *(_QWORD *)(a1 + 2584);
    *(_QWORD *)(a1 + 2616) = *(_QWORD *)(a1 + 2608);
    *(_QWORD *)(a1 + 2640) = *(_QWORD *)(a1 + 2632);
    v8 = *(_QWORD *)(a1 + 1064);
    v9 = *(_QWORD *)(a1 + 1072);
    while (v8 != v9)
    {
      v10 = *(_QWORD *)(v8 + 208);
      if (*(_BYTE *)(v8 + 496) || (*(_BYTE *)(v10 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v8 + 216) + 4) & 6) != 0)
      {
        sub_20F394A20(a1 + 2392, v10);
        sub_20F3D35E0((_QWORD *)(a1 + 2392), *(_QWORD *)(v8 + 216));
      }
      v8 += 504;
    }
    v12 = *(_QWORD *)(a1 + 1088);
    v13 = *(_QWORD *)(a1 + 1096);
    while (v12 != v13)
    {
      v14 = *(_QWORD *)(v12 + 136);
      if (*(_BYTE *)(v12 + 272) || (*(_BYTE *)(v14 + 4) & 6) != 0)
        sub_20F394A20(a1 + 2392, v14);
      v12 += 280;
    }
    v15 = *(_QWORD *)(a1 + 1112);
    v16 = *(_QWORD *)(a1 + 1120);
    while (v15 != v16)
    {
      v17 = *(_QWORD *)(v15 + 136);
      if (*(_BYTE *)(v15 + 272) || (*(_BYTE *)(v17 + 4) & 6) != 0)
        sub_20F599C88((_QWORD *)(a1 + 2392), v17);
      v15 += 280;
    }
    v18 = *(_QWORD *)(a1 + 1136);
    v19 = *(_QWORD *)(a1 + 1144);
    while (v18 != v19)
    {
      v20 = *(_QWORD *)(v18 + 136);
      if (*(_BYTE *)(v18 + 272) || (*(_BYTE *)(v20 + 4) & 6) != 0)
        sub_20F59A480((_QWORD *)(a1 + 2392), v20);
      v18 += 280;
    }
    v21 = *(_QWORD *)(a1 + 1160);
    v22 = *(_QWORD *)(a1 + 1168);
    while (v21 != v22)
    {
      v23 = *(_QWORD *)(v21 + 64);
      if (*(_BYTE *)(v21 + 152) || (*(_BYTE *)(v23 + 4) & 6) != 0)
        sub_20F59A2E8((_QWORD *)(a1 + 2392), v23);
      v21 += 160;
    }
    sub_20F8DF7FC(*(_QWORD *)(a1 + 1184), *(_QWORD *)(a1 + 1192), (_QWORD *)(a1 + 2392));
    sub_20F5B85BC(*(_QWORD *)(a1 + 1208), *(_QWORD *)(a1 + 1216), (_QWORD *)(a1 + 2392));
    v24 = *(_QWORD *)(a1 + 1232);
    v25 = *(_QWORD *)(a1 + 1240);
    while (v24 != v25)
    {
      v26 = *(_QWORD *)(v24 + 48);
      if (*(_BYTE *)(v24 + 136) || (*(_BYTE *)(v26 + 4) & 6) != 0)
        sub_20F3D35E0((_QWORD *)(a1 + 2392), v26);
      v24 += 144;
    }
    v27 = *(_QWORD *)(a1 + 1256);
    v28 = *(_QWORD *)(a1 + 1264);
    while (v27 != v28)
    {
      v29 = *(_QWORD *)(v27 + 48);
      if (*(_BYTE *)(v27 + 144) || (*(_BYTE *)(v29 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v27 + 56) + 4) & 6) != 0)
      {
        sub_20F394A20(a1 + 2392, v29);
        sub_20F394A20(a1 + 2392, *(_QWORD *)(v27 + 56));
      }
      v27 += 152;
    }
    sub_20F8DF748(*(_QWORD *)(a1 + 1280), *(_QWORD *)(a1 + 1288), (_QWORD *)(a1 + 2392));
    sub_20F8DF65C(*(_QWORD *)(a1 + 1304), *(_QWORD *)(a1 + 1312), (_QWORD *)(a1 + 2392));
    v30 = *(_QWORD *)(a1 + 1328);
    v31 = *(_QWORD *)(a1 + 1336);
    while (v30 != v31)
    {
      v32 = *(_QWORD *)(v30 + 48);
      if (*(_BYTE *)(v30 + 104) || (*(_BYTE *)(v32 + 4) & 6) != 0)
        sub_20F59A150((_QWORD *)(a1 + 2392), v32);
      v30 += 112;
    }
    v33 = *(_QWORD *)(a1 + 1352);
    v34 = *(_QWORD *)(a1 + 1360);
    while (v33 != v34)
    {
      v35 = *(_QWORD *)(v33 + 96);
      if (*(_BYTE *)(v33 + 200) || (*(_BYTE *)(v35 + 4) & 6) != 0)
        sub_20F599FB8((_QWORD *)(a1 + 2392), v35);
      v33 += 208;
    }
    v36 = *(_QWORD *)(a1 + 1376);
    v37 = *(_QWORD *)(a1 + 1384);
    while (v36 != v37)
    {
      v38 = *(_QWORD *)(v36 + 96);
      if (*(_BYTE *)(v36 + 200) || (*(_BYTE *)(v38 + 4) & 6) != 0)
        sub_20F599E20((_QWORD *)(a1 + 2392), v38);
      v36 += 208;
    }
    v39 = *(_QWORD *)(a1 + 1400);
    v40 = *(_QWORD *)(a1 + 1408);
    while (v39 != v40)
    {
      v41 = *(_QWORD *)(v39 + 80);
      if (*(_BYTE *)(v39 + 168) || (*(_BYTE *)(v41 + 4) & 6) != 0)
        sub_20F8DAC28((_QWORD *)(a1 + 2392), v41);
      v39 += 176;
    }
    v42 = *(_QWORD *)(a1 + 1424);
    v43 = *(_QWORD *)(a1 + 1432);
    while (v42 != v43)
    {
      v44 = *(_QWORD *)(v42 + 80);
      if (*(_BYTE *)(v42 + 168) || (*(_BYTE *)(v44 + 4) & 6) != 0)
        sub_20F8DADC0((_QWORD *)(a1 + 2392), v44);
      v42 += 176;
    }
    sub_20F8DF4E4(*(_QWORD *)(a1 + 1448), *(_QWORD *)(a1 + 1456), (_QWORD *)(a1 + 2392));
    sub_20F8DF3F8(*(_QWORD *)(a1 + 1472), *(_QWORD *)(a1 + 1480), (_QWORD *)(a1 + 2392));
    sub_20F8DF280(*(_QWORD *)(a1 + 1496), *(_QWORD *)(a1 + 1504), (_QWORD *)(a1 + 2392));
    v45 = (uint64_t)(*(_QWORD *)(a1 + 2496) - *(_QWORD *)(a1 + 2488)) >> 2;
    if (v45 <= v48)
      v46 = v48 - v45;
    else
      v46 = 0;
    sub_20F8DB0F0((_QWORD *)a1);
    return v46;
  }
  else
  {
    return v48;
  }
}

void sub_20FB695BC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB695D0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB695E4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB695F8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6960C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB69620(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB69634(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB69648(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6965C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB69670(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB69684(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB69698(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB696AC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20FB696C0(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _DWORD v47[5];
  unsigned int v48;

  if (*(_BYTE *)(a1 + 1592))
  {
    v3 = *(_QWORD *)(a1 + 488);
    v4 = *(_QWORD *)(a1 + 496);
    if (v3 == v4)
      return 0;
    v5 = 0;
    if ((a2 & 1) != 0)
    {
      do
      {
        v6 = *(_QWORD *)(v3 + 8);
        if ((*(_BYTE *)(v6 + 4) & 2) == 0)
          v5 = v5 + *(unsigned __int8 *)(v6 + 20);
        v3 += 16;
      }
      while (v3 != v4);
    }
    else
    {
      do
      {
        v7 = *(_QWORD *)(v3 + 8);
        if ((*(_BYTE *)(v7 + 4) & 6) == 0)
          v5 = v5 + *(unsigned __int8 *)(v7 + 20);
        v3 += 16;
      }
      while (v3 != v4);
    }
    return v5;
  }
  else if (sub_20FB67BB4((_QWORD *)a1, v47, a2))
  {
    *(_QWORD *)(a1 + 2400) = *(_QWORD *)(a1 + 2392);
    *(_QWORD *)(a1 + 2424) = *(_QWORD *)(a1 + 2416);
    *(_QWORD *)(a1 + 2448) = *(_QWORD *)(a1 + 2440);
    *(_QWORD *)(a1 + 2472) = *(_QWORD *)(a1 + 2464);
    *(_QWORD *)(a1 + 2496) = *(_QWORD *)(a1 + 2488);
    *(_QWORD *)(a1 + 2520) = *(_QWORD *)(a1 + 2512);
    *(_QWORD *)(a1 + 2544) = *(_QWORD *)(a1 + 2536);
    *(_QWORD *)(a1 + 2568) = *(_QWORD *)(a1 + 2560);
    *(_QWORD *)(a1 + 2592) = *(_QWORD *)(a1 + 2584);
    *(_QWORD *)(a1 + 2616) = *(_QWORD *)(a1 + 2608);
    *(_QWORD *)(a1 + 2640) = *(_QWORD *)(a1 + 2632);
    v8 = *(_QWORD *)(a1 + 1064);
    v9 = *(_QWORD *)(a1 + 1072);
    while (v8 != v9)
    {
      v10 = *(_QWORD *)(v8 + 208);
      if (*(_BYTE *)(v8 + 496) || (*(_BYTE *)(v10 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v8 + 216) + 4) & 6) != 0)
      {
        sub_20F394A20(a1 + 2392, v10);
        sub_20F3D35E0((_QWORD *)(a1 + 2392), *(_QWORD *)(v8 + 216));
      }
      v8 += 504;
    }
    v12 = *(_QWORD *)(a1 + 1088);
    v13 = *(_QWORD *)(a1 + 1096);
    while (v12 != v13)
    {
      v14 = *(_QWORD *)(v12 + 136);
      if (*(_BYTE *)(v12 + 272) || (*(_BYTE *)(v14 + 4) & 6) != 0)
        sub_20F394A20(a1 + 2392, v14);
      v12 += 280;
    }
    v15 = *(_QWORD *)(a1 + 1112);
    v16 = *(_QWORD *)(a1 + 1120);
    while (v15 != v16)
    {
      v17 = *(_QWORD *)(v15 + 136);
      if (*(_BYTE *)(v15 + 272) || (*(_BYTE *)(v17 + 4) & 6) != 0)
        sub_20F599C88((_QWORD *)(a1 + 2392), v17);
      v15 += 280;
    }
    v18 = *(_QWORD *)(a1 + 1136);
    v19 = *(_QWORD *)(a1 + 1144);
    while (v18 != v19)
    {
      v20 = *(_QWORD *)(v18 + 136);
      if (*(_BYTE *)(v18 + 272) || (*(_BYTE *)(v20 + 4) & 6) != 0)
        sub_20F59A480((_QWORD *)(a1 + 2392), v20);
      v18 += 280;
    }
    v21 = *(_QWORD *)(a1 + 1160);
    v22 = *(_QWORD *)(a1 + 1168);
    while (v21 != v22)
    {
      v23 = *(_QWORD *)(v21 + 64);
      if (*(_BYTE *)(v21 + 152) || (*(_BYTE *)(v23 + 4) & 6) != 0)
        sub_20F59A2E8((_QWORD *)(a1 + 2392), v23);
      v21 += 160;
    }
    sub_20F8DF7FC(*(_QWORD *)(a1 + 1184), *(_QWORD *)(a1 + 1192), (_QWORD *)(a1 + 2392));
    sub_20F5B85BC(*(_QWORD *)(a1 + 1208), *(_QWORD *)(a1 + 1216), (_QWORD *)(a1 + 2392));
    v24 = *(_QWORD *)(a1 + 1232);
    v25 = *(_QWORD *)(a1 + 1240);
    while (v24 != v25)
    {
      v26 = *(_QWORD *)(v24 + 48);
      if (*(_BYTE *)(v24 + 136) || (*(_BYTE *)(v26 + 4) & 6) != 0)
        sub_20F3D35E0((_QWORD *)(a1 + 2392), v26);
      v24 += 144;
    }
    v27 = *(_QWORD *)(a1 + 1256);
    v28 = *(_QWORD *)(a1 + 1264);
    while (v27 != v28)
    {
      v29 = *(_QWORD *)(v27 + 48);
      if (*(_BYTE *)(v27 + 144) || (*(_BYTE *)(v29 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v27 + 56) + 4) & 6) != 0)
      {
        sub_20F394A20(a1 + 2392, v29);
        sub_20F394A20(a1 + 2392, *(_QWORD *)(v27 + 56));
      }
      v27 += 152;
    }
    sub_20F8DF748(*(_QWORD *)(a1 + 1280), *(_QWORD *)(a1 + 1288), (_QWORD *)(a1 + 2392));
    sub_20F8DF65C(*(_QWORD *)(a1 + 1304), *(_QWORD *)(a1 + 1312), (_QWORD *)(a1 + 2392));
    v30 = *(_QWORD *)(a1 + 1328);
    v31 = *(_QWORD *)(a1 + 1336);
    while (v30 != v31)
    {
      v32 = *(_QWORD *)(v30 + 48);
      if (*(_BYTE *)(v30 + 104) || (*(_BYTE *)(v32 + 4) & 6) != 0)
        sub_20F59A150((_QWORD *)(a1 + 2392), v32);
      v30 += 112;
    }
    v33 = *(_QWORD *)(a1 + 1352);
    v34 = *(_QWORD *)(a1 + 1360);
    while (v33 != v34)
    {
      v35 = *(_QWORD *)(v33 + 96);
      if (*(_BYTE *)(v33 + 200) || (*(_BYTE *)(v35 + 4) & 6) != 0)
        sub_20F599FB8((_QWORD *)(a1 + 2392), v35);
      v33 += 208;
    }
    v36 = *(_QWORD *)(a1 + 1376);
    v37 = *(_QWORD *)(a1 + 1384);
    while (v36 != v37)
    {
      v38 = *(_QWORD *)(v36 + 96);
      if (*(_BYTE *)(v36 + 200) || (*(_BYTE *)(v38 + 4) & 6) != 0)
        sub_20F599E20((_QWORD *)(a1 + 2392), v38);
      v36 += 208;
    }
    v39 = *(_QWORD *)(a1 + 1400);
    v40 = *(_QWORD *)(a1 + 1408);
    while (v39 != v40)
    {
      v41 = *(_QWORD *)(v39 + 80);
      if (*(_BYTE *)(v39 + 168) || (*(_BYTE *)(v41 + 4) & 6) != 0)
        sub_20F8DAC28((_QWORD *)(a1 + 2392), v41);
      v39 += 176;
    }
    v42 = *(_QWORD *)(a1 + 1424);
    v43 = *(_QWORD *)(a1 + 1432);
    while (v42 != v43)
    {
      v44 = *(_QWORD *)(v42 + 80);
      if (*(_BYTE *)(v42 + 168) || (*(_BYTE *)(v44 + 4) & 6) != 0)
        sub_20F8DADC0((_QWORD *)(a1 + 2392), v44);
      v42 += 176;
    }
    sub_20F8DF4E4(*(_QWORD *)(a1 + 1448), *(_QWORD *)(a1 + 1456), (_QWORD *)(a1 + 2392));
    sub_20F8DF3F8(*(_QWORD *)(a1 + 1472), *(_QWORD *)(a1 + 1480), (_QWORD *)(a1 + 2392));
    sub_20F8DF280(*(_QWORD *)(a1 + 1496), *(_QWORD *)(a1 + 1504), (_QWORD *)(a1 + 2392));
    v45 = (uint64_t)(*(_QWORD *)(a1 + 2520) - *(_QWORD *)(a1 + 2512)) >> 2;
    if (v45 <= v48)
      v46 = v48 - v45;
    else
      v46 = 0;
    sub_20F8DB0F0((_QWORD *)a1);
    return v46;
  }
  else
  {
    return v48;
  }
}

void sub_20FB69BA4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB69BB8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB69BCC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB69BE0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB69BF4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB69C08(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB69C1C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB69C30(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB69C44(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB69C58(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB69C6C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB69C80(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB69C94(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20FB69CA8(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _DWORD v47[6];
  unsigned int v48;

  if (*(_BYTE *)(a1 + 1592))
  {
    v3 = *(_QWORD *)(a1 + 584);
    v4 = *(_QWORD *)(a1 + 592);
    if (v3 == v4)
      return 0;
    v5 = 0;
    if ((a2 & 1) != 0)
    {
      do
      {
        v6 = *(_QWORD *)(v3 + 8);
        if ((*(_BYTE *)(v6 + 4) & 2) == 0)
          v5 = v5 + *(unsigned __int8 *)(v6 + 20);
        v3 += 16;
      }
      while (v3 != v4);
    }
    else
    {
      do
      {
        v7 = *(_QWORD *)(v3 + 8);
        if ((*(_BYTE *)(v7 + 4) & 6) == 0)
          v5 = v5 + *(unsigned __int8 *)(v7 + 20);
        v3 += 16;
      }
      while (v3 != v4);
    }
    return v5;
  }
  else if (sub_20FB67BB4((_QWORD *)a1, v47, a2))
  {
    *(_QWORD *)(a1 + 2400) = *(_QWORD *)(a1 + 2392);
    *(_QWORD *)(a1 + 2424) = *(_QWORD *)(a1 + 2416);
    *(_QWORD *)(a1 + 2448) = *(_QWORD *)(a1 + 2440);
    *(_QWORD *)(a1 + 2472) = *(_QWORD *)(a1 + 2464);
    *(_QWORD *)(a1 + 2496) = *(_QWORD *)(a1 + 2488);
    *(_QWORD *)(a1 + 2520) = *(_QWORD *)(a1 + 2512);
    *(_QWORD *)(a1 + 2544) = *(_QWORD *)(a1 + 2536);
    *(_QWORD *)(a1 + 2568) = *(_QWORD *)(a1 + 2560);
    *(_QWORD *)(a1 + 2592) = *(_QWORD *)(a1 + 2584);
    *(_QWORD *)(a1 + 2616) = *(_QWORD *)(a1 + 2608);
    *(_QWORD *)(a1 + 2640) = *(_QWORD *)(a1 + 2632);
    v8 = *(_QWORD *)(a1 + 1064);
    v9 = *(_QWORD *)(a1 + 1072);
    while (v8 != v9)
    {
      v10 = *(_QWORD *)(v8 + 208);
      if (*(_BYTE *)(v8 + 496) || (*(_BYTE *)(v10 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v8 + 216) + 4) & 6) != 0)
      {
        sub_20F394A20(a1 + 2392, v10);
        sub_20F3D35E0((_QWORD *)(a1 + 2392), *(_QWORD *)(v8 + 216));
      }
      v8 += 504;
    }
    v12 = *(_QWORD *)(a1 + 1088);
    v13 = *(_QWORD *)(a1 + 1096);
    while (v12 != v13)
    {
      v14 = *(_QWORD *)(v12 + 136);
      if (*(_BYTE *)(v12 + 272) || (*(_BYTE *)(v14 + 4) & 6) != 0)
        sub_20F394A20(a1 + 2392, v14);
      v12 += 280;
    }
    v15 = *(_QWORD *)(a1 + 1112);
    v16 = *(_QWORD *)(a1 + 1120);
    while (v15 != v16)
    {
      v17 = *(_QWORD *)(v15 + 136);
      if (*(_BYTE *)(v15 + 272) || (*(_BYTE *)(v17 + 4) & 6) != 0)
        sub_20F599C88((_QWORD *)(a1 + 2392), v17);
      v15 += 280;
    }
    v18 = *(_QWORD *)(a1 + 1136);
    v19 = *(_QWORD *)(a1 + 1144);
    while (v18 != v19)
    {
      v20 = *(_QWORD *)(v18 + 136);
      if (*(_BYTE *)(v18 + 272) || (*(_BYTE *)(v20 + 4) & 6) != 0)
        sub_20F59A480((_QWORD *)(a1 + 2392), v20);
      v18 += 280;
    }
    v21 = *(_QWORD *)(a1 + 1160);
    v22 = *(_QWORD *)(a1 + 1168);
    while (v21 != v22)
    {
      v23 = *(_QWORD *)(v21 + 64);
      if (*(_BYTE *)(v21 + 152) || (*(_BYTE *)(v23 + 4) & 6) != 0)
        sub_20F59A2E8((_QWORD *)(a1 + 2392), v23);
      v21 += 160;
    }
    sub_20F8DF7FC(*(_QWORD *)(a1 + 1184), *(_QWORD *)(a1 + 1192), (_QWORD *)(a1 + 2392));
    sub_20F5B85BC(*(_QWORD *)(a1 + 1208), *(_QWORD *)(a1 + 1216), (_QWORD *)(a1 + 2392));
    v24 = *(_QWORD *)(a1 + 1232);
    v25 = *(_QWORD *)(a1 + 1240);
    while (v24 != v25)
    {
      v26 = *(_QWORD *)(v24 + 48);
      if (*(_BYTE *)(v24 + 136) || (*(_BYTE *)(v26 + 4) & 6) != 0)
        sub_20F3D35E0((_QWORD *)(a1 + 2392), v26);
      v24 += 144;
    }
    v27 = *(_QWORD *)(a1 + 1256);
    v28 = *(_QWORD *)(a1 + 1264);
    while (v27 != v28)
    {
      v29 = *(_QWORD *)(v27 + 48);
      if (*(_BYTE *)(v27 + 144) || (*(_BYTE *)(v29 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v27 + 56) + 4) & 6) != 0)
      {
        sub_20F394A20(a1 + 2392, v29);
        sub_20F394A20(a1 + 2392, *(_QWORD *)(v27 + 56));
      }
      v27 += 152;
    }
    sub_20F8DF748(*(_QWORD *)(a1 + 1280), *(_QWORD *)(a1 + 1288), (_QWORD *)(a1 + 2392));
    sub_20F8DF65C(*(_QWORD *)(a1 + 1304), *(_QWORD *)(a1 + 1312), (_QWORD *)(a1 + 2392));
    v30 = *(_QWORD *)(a1 + 1328);
    v31 = *(_QWORD *)(a1 + 1336);
    while (v30 != v31)
    {
      v32 = *(_QWORD *)(v30 + 48);
      if (*(_BYTE *)(v30 + 104) || (*(_BYTE *)(v32 + 4) & 6) != 0)
        sub_20F59A150((_QWORD *)(a1 + 2392), v32);
      v30 += 112;
    }
    v33 = *(_QWORD *)(a1 + 1352);
    v34 = *(_QWORD *)(a1 + 1360);
    while (v33 != v34)
    {
      v35 = *(_QWORD *)(v33 + 96);
      if (*(_BYTE *)(v33 + 200) || (*(_BYTE *)(v35 + 4) & 6) != 0)
        sub_20F599FB8((_QWORD *)(a1 + 2392), v35);
      v33 += 208;
    }
    v36 = *(_QWORD *)(a1 + 1376);
    v37 = *(_QWORD *)(a1 + 1384);
    while (v36 != v37)
    {
      v38 = *(_QWORD *)(v36 + 96);
      if (*(_BYTE *)(v36 + 200) || (*(_BYTE *)(v38 + 4) & 6) != 0)
        sub_20F599E20((_QWORD *)(a1 + 2392), v38);
      v36 += 208;
    }
    v39 = *(_QWORD *)(a1 + 1400);
    v40 = *(_QWORD *)(a1 + 1408);
    while (v39 != v40)
    {
      v41 = *(_QWORD *)(v39 + 80);
      if (*(_BYTE *)(v39 + 168) || (*(_BYTE *)(v41 + 4) & 6) != 0)
        sub_20F8DAC28((_QWORD *)(a1 + 2392), v41);
      v39 += 176;
    }
    v42 = *(_QWORD *)(a1 + 1424);
    v43 = *(_QWORD *)(a1 + 1432);
    while (v42 != v43)
    {
      v44 = *(_QWORD *)(v42 + 80);
      if (*(_BYTE *)(v42 + 168) || (*(_BYTE *)(v44 + 4) & 6) != 0)
        sub_20F8DADC0((_QWORD *)(a1 + 2392), v44);
      v42 += 176;
    }
    sub_20F8DF4E4(*(_QWORD *)(a1 + 1448), *(_QWORD *)(a1 + 1456), (_QWORD *)(a1 + 2392));
    sub_20F8DF3F8(*(_QWORD *)(a1 + 1472), *(_QWORD *)(a1 + 1480), (_QWORD *)(a1 + 2392));
    sub_20F8DF280(*(_QWORD *)(a1 + 1496), *(_QWORD *)(a1 + 1504), (_QWORD *)(a1 + 2392));
    v45 = (uint64_t)(*(_QWORD *)(a1 + 2544) - *(_QWORD *)(a1 + 2536)) >> 2;
    if (v45 <= v48)
      v46 = v48 - v45;
    else
      v46 = 0;
    sub_20F8DB0F0((_QWORD *)a1);
    return v46;
  }
  else
  {
    return v48;
  }
}

void sub_20FB6A190(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6A1A4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6A1B8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6A1CC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6A1E0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6A1F4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6A208(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6A21C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6A230(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6A244(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6A258(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6A26C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6A280(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20FB6A294(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _DWORD v47[7];
  unsigned int v48;

  if (*(_BYTE *)(a1 + 1592))
  {
    v3 = *(_QWORD *)(a1 + 680);
    v4 = *(_QWORD *)(a1 + 688);
    if (v3 == v4)
      return 0;
    v5 = 0;
    if ((a2 & 1) != 0)
    {
      do
      {
        v6 = *(_QWORD *)(v3 + 8);
        if ((*(_BYTE *)(v6 + 4) & 2) == 0)
          v5 = v5 + *(unsigned __int8 *)(v6 + 20);
        v3 += 16;
      }
      while (v3 != v4);
    }
    else
    {
      do
      {
        v7 = *(_QWORD *)(v3 + 8);
        if ((*(_BYTE *)(v7 + 4) & 6) == 0)
          v5 = v5 + *(unsigned __int8 *)(v7 + 20);
        v3 += 16;
      }
      while (v3 != v4);
    }
    return v5;
  }
  else if (sub_20FB67BB4((_QWORD *)a1, v47, a2))
  {
    *(_QWORD *)(a1 + 2400) = *(_QWORD *)(a1 + 2392);
    *(_QWORD *)(a1 + 2424) = *(_QWORD *)(a1 + 2416);
    *(_QWORD *)(a1 + 2448) = *(_QWORD *)(a1 + 2440);
    *(_QWORD *)(a1 + 2472) = *(_QWORD *)(a1 + 2464);
    *(_QWORD *)(a1 + 2496) = *(_QWORD *)(a1 + 2488);
    *(_QWORD *)(a1 + 2520) = *(_QWORD *)(a1 + 2512);
    *(_QWORD *)(a1 + 2544) = *(_QWORD *)(a1 + 2536);
    *(_QWORD *)(a1 + 2568) = *(_QWORD *)(a1 + 2560);
    *(_QWORD *)(a1 + 2592) = *(_QWORD *)(a1 + 2584);
    *(_QWORD *)(a1 + 2616) = *(_QWORD *)(a1 + 2608);
    *(_QWORD *)(a1 + 2640) = *(_QWORD *)(a1 + 2632);
    v8 = *(_QWORD *)(a1 + 1064);
    v9 = *(_QWORD *)(a1 + 1072);
    while (v8 != v9)
    {
      v10 = *(_QWORD *)(v8 + 208);
      if (*(_BYTE *)(v8 + 496) || (*(_BYTE *)(v10 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v8 + 216) + 4) & 6) != 0)
      {
        sub_20F394A20(a1 + 2392, v10);
        sub_20F3D35E0((_QWORD *)(a1 + 2392), *(_QWORD *)(v8 + 216));
      }
      v8 += 504;
    }
    v12 = *(_QWORD *)(a1 + 1088);
    v13 = *(_QWORD *)(a1 + 1096);
    while (v12 != v13)
    {
      v14 = *(_QWORD *)(v12 + 136);
      if (*(_BYTE *)(v12 + 272) || (*(_BYTE *)(v14 + 4) & 6) != 0)
        sub_20F394A20(a1 + 2392, v14);
      v12 += 280;
    }
    v15 = *(_QWORD *)(a1 + 1112);
    v16 = *(_QWORD *)(a1 + 1120);
    while (v15 != v16)
    {
      v17 = *(_QWORD *)(v15 + 136);
      if (*(_BYTE *)(v15 + 272) || (*(_BYTE *)(v17 + 4) & 6) != 0)
        sub_20F599C88((_QWORD *)(a1 + 2392), v17);
      v15 += 280;
    }
    v18 = *(_QWORD *)(a1 + 1136);
    v19 = *(_QWORD *)(a1 + 1144);
    while (v18 != v19)
    {
      v20 = *(_QWORD *)(v18 + 136);
      if (*(_BYTE *)(v18 + 272) || (*(_BYTE *)(v20 + 4) & 6) != 0)
        sub_20F59A480((_QWORD *)(a1 + 2392), v20);
      v18 += 280;
    }
    v21 = *(_QWORD *)(a1 + 1160);
    v22 = *(_QWORD *)(a1 + 1168);
    while (v21 != v22)
    {
      v23 = *(_QWORD *)(v21 + 64);
      if (*(_BYTE *)(v21 + 152) || (*(_BYTE *)(v23 + 4) & 6) != 0)
        sub_20F59A2E8((_QWORD *)(a1 + 2392), v23);
      v21 += 160;
    }
    sub_20F8DF7FC(*(_QWORD *)(a1 + 1184), *(_QWORD *)(a1 + 1192), (_QWORD *)(a1 + 2392));
    sub_20F5B85BC(*(_QWORD *)(a1 + 1208), *(_QWORD *)(a1 + 1216), (_QWORD *)(a1 + 2392));
    v24 = *(_QWORD *)(a1 + 1232);
    v25 = *(_QWORD *)(a1 + 1240);
    while (v24 != v25)
    {
      v26 = *(_QWORD *)(v24 + 48);
      if (*(_BYTE *)(v24 + 136) || (*(_BYTE *)(v26 + 4) & 6) != 0)
        sub_20F3D35E0((_QWORD *)(a1 + 2392), v26);
      v24 += 144;
    }
    v27 = *(_QWORD *)(a1 + 1256);
    v28 = *(_QWORD *)(a1 + 1264);
    while (v27 != v28)
    {
      v29 = *(_QWORD *)(v27 + 48);
      if (*(_BYTE *)(v27 + 144) || (*(_BYTE *)(v29 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v27 + 56) + 4) & 6) != 0)
      {
        sub_20F394A20(a1 + 2392, v29);
        sub_20F394A20(a1 + 2392, *(_QWORD *)(v27 + 56));
      }
      v27 += 152;
    }
    sub_20F8DF748(*(_QWORD *)(a1 + 1280), *(_QWORD *)(a1 + 1288), (_QWORD *)(a1 + 2392));
    sub_20F8DF65C(*(_QWORD *)(a1 + 1304), *(_QWORD *)(a1 + 1312), (_QWORD *)(a1 + 2392));
    v30 = *(_QWORD *)(a1 + 1328);
    v31 = *(_QWORD *)(a1 + 1336);
    while (v30 != v31)
    {
      v32 = *(_QWORD *)(v30 + 48);
      if (*(_BYTE *)(v30 + 104) || (*(_BYTE *)(v32 + 4) & 6) != 0)
        sub_20F59A150((_QWORD *)(a1 + 2392), v32);
      v30 += 112;
    }
    v33 = *(_QWORD *)(a1 + 1352);
    v34 = *(_QWORD *)(a1 + 1360);
    while (v33 != v34)
    {
      v35 = *(_QWORD *)(v33 + 96);
      if (*(_BYTE *)(v33 + 200) || (*(_BYTE *)(v35 + 4) & 6) != 0)
        sub_20F599FB8((_QWORD *)(a1 + 2392), v35);
      v33 += 208;
    }
    v36 = *(_QWORD *)(a1 + 1376);
    v37 = *(_QWORD *)(a1 + 1384);
    while (v36 != v37)
    {
      v38 = *(_QWORD *)(v36 + 96);
      if (*(_BYTE *)(v36 + 200) || (*(_BYTE *)(v38 + 4) & 6) != 0)
        sub_20F599E20((_QWORD *)(a1 + 2392), v38);
      v36 += 208;
    }
    v39 = *(_QWORD *)(a1 + 1400);
    v40 = *(_QWORD *)(a1 + 1408);
    while (v39 != v40)
    {
      v41 = *(_QWORD *)(v39 + 80);
      if (*(_BYTE *)(v39 + 168) || (*(_BYTE *)(v41 + 4) & 6) != 0)
        sub_20F8DAC28((_QWORD *)(a1 + 2392), v41);
      v39 += 176;
    }
    v42 = *(_QWORD *)(a1 + 1424);
    v43 = *(_QWORD *)(a1 + 1432);
    while (v42 != v43)
    {
      v44 = *(_QWORD *)(v42 + 80);
      if (*(_BYTE *)(v42 + 168) || (*(_BYTE *)(v44 + 4) & 6) != 0)
        sub_20F8DADC0((_QWORD *)(a1 + 2392), v44);
      v42 += 176;
    }
    sub_20F8DF4E4(*(_QWORD *)(a1 + 1448), *(_QWORD *)(a1 + 1456), (_QWORD *)(a1 + 2392));
    sub_20F8DF3F8(*(_QWORD *)(a1 + 1472), *(_QWORD *)(a1 + 1480), (_QWORD *)(a1 + 2392));
    sub_20F8DF280(*(_QWORD *)(a1 + 1496), *(_QWORD *)(a1 + 1504), (_QWORD *)(a1 + 2392));
    v45 = (uint64_t)(*(_QWORD *)(a1 + 2568) - *(_QWORD *)(a1 + 2560)) >> 2;
    if (v45 <= v48)
      v46 = v48 - v45;
    else
      v46 = 0;
    sub_20F8DB0F0((_QWORD *)a1);
    return v46;
  }
  else
  {
    return v48;
  }
}

void sub_20FB6A77C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6A790(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6A7A4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6A7B8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6A7CC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6A7E0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6A7F4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6A808(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6A81C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6A830(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6A844(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6A858(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6A86C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20FB6A880(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _DWORD v47[8];
  unsigned int v48;

  if (*(_BYTE *)(a1 + 1592))
  {
    v3 = *(_QWORD *)(a1 + 776);
    v4 = *(_QWORD *)(a1 + 784);
    if (v3 == v4)
      return 0;
    v5 = 0;
    if ((a2 & 1) != 0)
    {
      do
      {
        v6 = *(_QWORD *)(v3 + 8);
        if ((*(_BYTE *)(v6 + 4) & 2) == 0)
          v5 = v5 + *(unsigned __int8 *)(v6 + 20);
        v3 += 16;
      }
      while (v3 != v4);
    }
    else
    {
      do
      {
        v7 = *(_QWORD *)(v3 + 8);
        if ((*(_BYTE *)(v7 + 4) & 6) == 0)
          v5 = v5 + *(unsigned __int8 *)(v7 + 20);
        v3 += 16;
      }
      while (v3 != v4);
    }
    return v5;
  }
  else if (sub_20FB67BB4((_QWORD *)a1, v47, a2))
  {
    *(_QWORD *)(a1 + 2400) = *(_QWORD *)(a1 + 2392);
    *(_QWORD *)(a1 + 2424) = *(_QWORD *)(a1 + 2416);
    *(_QWORD *)(a1 + 2448) = *(_QWORD *)(a1 + 2440);
    *(_QWORD *)(a1 + 2472) = *(_QWORD *)(a1 + 2464);
    *(_QWORD *)(a1 + 2496) = *(_QWORD *)(a1 + 2488);
    *(_QWORD *)(a1 + 2520) = *(_QWORD *)(a1 + 2512);
    *(_QWORD *)(a1 + 2544) = *(_QWORD *)(a1 + 2536);
    *(_QWORD *)(a1 + 2568) = *(_QWORD *)(a1 + 2560);
    *(_QWORD *)(a1 + 2592) = *(_QWORD *)(a1 + 2584);
    *(_QWORD *)(a1 + 2616) = *(_QWORD *)(a1 + 2608);
    *(_QWORD *)(a1 + 2640) = *(_QWORD *)(a1 + 2632);
    v8 = *(_QWORD *)(a1 + 1064);
    v9 = *(_QWORD *)(a1 + 1072);
    while (v8 != v9)
    {
      v10 = *(_QWORD *)(v8 + 208);
      if (*(_BYTE *)(v8 + 496) || (*(_BYTE *)(v10 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v8 + 216) + 4) & 6) != 0)
      {
        sub_20F394A20(a1 + 2392, v10);
        sub_20F3D35E0((_QWORD *)(a1 + 2392), *(_QWORD *)(v8 + 216));
      }
      v8 += 504;
    }
    v12 = *(_QWORD *)(a1 + 1088);
    v13 = *(_QWORD *)(a1 + 1096);
    while (v12 != v13)
    {
      v14 = *(_QWORD *)(v12 + 136);
      if (*(_BYTE *)(v12 + 272) || (*(_BYTE *)(v14 + 4) & 6) != 0)
        sub_20F394A20(a1 + 2392, v14);
      v12 += 280;
    }
    v15 = *(_QWORD *)(a1 + 1112);
    v16 = *(_QWORD *)(a1 + 1120);
    while (v15 != v16)
    {
      v17 = *(_QWORD *)(v15 + 136);
      if (*(_BYTE *)(v15 + 272) || (*(_BYTE *)(v17 + 4) & 6) != 0)
        sub_20F599C88((_QWORD *)(a1 + 2392), v17);
      v15 += 280;
    }
    v18 = *(_QWORD *)(a1 + 1136);
    v19 = *(_QWORD *)(a1 + 1144);
    while (v18 != v19)
    {
      v20 = *(_QWORD *)(v18 + 136);
      if (*(_BYTE *)(v18 + 272) || (*(_BYTE *)(v20 + 4) & 6) != 0)
        sub_20F59A480((_QWORD *)(a1 + 2392), v20);
      v18 += 280;
    }
    v21 = *(_QWORD *)(a1 + 1160);
    v22 = *(_QWORD *)(a1 + 1168);
    while (v21 != v22)
    {
      v23 = *(_QWORD *)(v21 + 64);
      if (*(_BYTE *)(v21 + 152) || (*(_BYTE *)(v23 + 4) & 6) != 0)
        sub_20F59A2E8((_QWORD *)(a1 + 2392), v23);
      v21 += 160;
    }
    sub_20F8DF7FC(*(_QWORD *)(a1 + 1184), *(_QWORD *)(a1 + 1192), (_QWORD *)(a1 + 2392));
    sub_20F5B85BC(*(_QWORD *)(a1 + 1208), *(_QWORD *)(a1 + 1216), (_QWORD *)(a1 + 2392));
    v24 = *(_QWORD *)(a1 + 1232);
    v25 = *(_QWORD *)(a1 + 1240);
    while (v24 != v25)
    {
      v26 = *(_QWORD *)(v24 + 48);
      if (*(_BYTE *)(v24 + 136) || (*(_BYTE *)(v26 + 4) & 6) != 0)
        sub_20F3D35E0((_QWORD *)(a1 + 2392), v26);
      v24 += 144;
    }
    v27 = *(_QWORD *)(a1 + 1256);
    v28 = *(_QWORD *)(a1 + 1264);
    while (v27 != v28)
    {
      v29 = *(_QWORD *)(v27 + 48);
      if (*(_BYTE *)(v27 + 144) || (*(_BYTE *)(v29 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v27 + 56) + 4) & 6) != 0)
      {
        sub_20F394A20(a1 + 2392, v29);
        sub_20F394A20(a1 + 2392, *(_QWORD *)(v27 + 56));
      }
      v27 += 152;
    }
    sub_20F8DF748(*(_QWORD *)(a1 + 1280), *(_QWORD *)(a1 + 1288), (_QWORD *)(a1 + 2392));
    sub_20F8DF65C(*(_QWORD *)(a1 + 1304), *(_QWORD *)(a1 + 1312), (_QWORD *)(a1 + 2392));
    v30 = *(_QWORD *)(a1 + 1328);
    v31 = *(_QWORD *)(a1 + 1336);
    while (v30 != v31)
    {
      v32 = *(_QWORD *)(v30 + 48);
      if (*(_BYTE *)(v30 + 104) || (*(_BYTE *)(v32 + 4) & 6) != 0)
        sub_20F59A150((_QWORD *)(a1 + 2392), v32);
      v30 += 112;
    }
    v33 = *(_QWORD *)(a1 + 1352);
    v34 = *(_QWORD *)(a1 + 1360);
    while (v33 != v34)
    {
      v35 = *(_QWORD *)(v33 + 96);
      if (*(_BYTE *)(v33 + 200) || (*(_BYTE *)(v35 + 4) & 6) != 0)
        sub_20F599FB8((_QWORD *)(a1 + 2392), v35);
      v33 += 208;
    }
    v36 = *(_QWORD *)(a1 + 1376);
    v37 = *(_QWORD *)(a1 + 1384);
    while (v36 != v37)
    {
      v38 = *(_QWORD *)(v36 + 96);
      if (*(_BYTE *)(v36 + 200) || (*(_BYTE *)(v38 + 4) & 6) != 0)
        sub_20F599E20((_QWORD *)(a1 + 2392), v38);
      v36 += 208;
    }
    v39 = *(_QWORD *)(a1 + 1400);
    v40 = *(_QWORD *)(a1 + 1408);
    while (v39 != v40)
    {
      v41 = *(_QWORD *)(v39 + 80);
      if (*(_BYTE *)(v39 + 168) || (*(_BYTE *)(v41 + 4) & 6) != 0)
        sub_20F8DAC28((_QWORD *)(a1 + 2392), v41);
      v39 += 176;
    }
    v42 = *(_QWORD *)(a1 + 1424);
    v43 = *(_QWORD *)(a1 + 1432);
    while (v42 != v43)
    {
      v44 = *(_QWORD *)(v42 + 80);
      if (*(_BYTE *)(v42 + 168) || (*(_BYTE *)(v44 + 4) & 6) != 0)
        sub_20F8DADC0((_QWORD *)(a1 + 2392), v44);
      v42 += 176;
    }
    sub_20F8DF4E4(*(_QWORD *)(a1 + 1448), *(_QWORD *)(a1 + 1456), (_QWORD *)(a1 + 2392));
    sub_20F8DF3F8(*(_QWORD *)(a1 + 1472), *(_QWORD *)(a1 + 1480), (_QWORD *)(a1 + 2392));
    sub_20F8DF280(*(_QWORD *)(a1 + 1496), *(_QWORD *)(a1 + 1504), (_QWORD *)(a1 + 2392));
    v45 = (uint64_t)(*(_QWORD *)(a1 + 2592) - *(_QWORD *)(a1 + 2584)) >> 2;
    if (v45 <= v48)
      v46 = v48 - v45;
    else
      v46 = 0;
    sub_20F8DB0F0((_QWORD *)a1);
    return v46;
  }
  else
  {
    return v48;
  }
}

void sub_20FB6AD68(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6AD7C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6AD90(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6ADA4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6ADB8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6ADCC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6ADE0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6ADF4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6AE08(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6AE1C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6AE30(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6AE44(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6AE58(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20FB6AE6C(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _DWORD v47[9];
  unsigned int v48;

  if (*(_BYTE *)(a1 + 1592))
  {
    v3 = *(_QWORD *)(a1 + 872);
    v4 = *(_QWORD *)(a1 + 880);
    if (v3 == v4)
      return 0;
    v5 = 0;
    if ((a2 & 1) != 0)
    {
      do
      {
        v6 = *(_QWORD *)(v3 + 8);
        if ((*(_BYTE *)(v6 + 4) & 2) == 0)
          v5 = v5 + *(unsigned __int8 *)(v6 + 20);
        v3 += 16;
      }
      while (v3 != v4);
    }
    else
    {
      do
      {
        v7 = *(_QWORD *)(v3 + 8);
        if ((*(_BYTE *)(v7 + 4) & 6) == 0)
          v5 = v5 + *(unsigned __int8 *)(v7 + 20);
        v3 += 16;
      }
      while (v3 != v4);
    }
    return v5;
  }
  else if (sub_20FB67BB4((_QWORD *)a1, v47, a2))
  {
    *(_QWORD *)(a1 + 2400) = *(_QWORD *)(a1 + 2392);
    *(_QWORD *)(a1 + 2424) = *(_QWORD *)(a1 + 2416);
    *(_QWORD *)(a1 + 2448) = *(_QWORD *)(a1 + 2440);
    *(_QWORD *)(a1 + 2472) = *(_QWORD *)(a1 + 2464);
    *(_QWORD *)(a1 + 2496) = *(_QWORD *)(a1 + 2488);
    *(_QWORD *)(a1 + 2520) = *(_QWORD *)(a1 + 2512);
    *(_QWORD *)(a1 + 2544) = *(_QWORD *)(a1 + 2536);
    *(_QWORD *)(a1 + 2568) = *(_QWORD *)(a1 + 2560);
    *(_QWORD *)(a1 + 2592) = *(_QWORD *)(a1 + 2584);
    *(_QWORD *)(a1 + 2616) = *(_QWORD *)(a1 + 2608);
    *(_QWORD *)(a1 + 2640) = *(_QWORD *)(a1 + 2632);
    v8 = *(_QWORD *)(a1 + 1064);
    v9 = *(_QWORD *)(a1 + 1072);
    while (v8 != v9)
    {
      v10 = *(_QWORD *)(v8 + 208);
      if (*(_BYTE *)(v8 + 496) || (*(_BYTE *)(v10 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v8 + 216) + 4) & 6) != 0)
      {
        sub_20F394A20(a1 + 2392, v10);
        sub_20F3D35E0((_QWORD *)(a1 + 2392), *(_QWORD *)(v8 + 216));
      }
      v8 += 504;
    }
    v12 = *(_QWORD *)(a1 + 1088);
    v13 = *(_QWORD *)(a1 + 1096);
    while (v12 != v13)
    {
      v14 = *(_QWORD *)(v12 + 136);
      if (*(_BYTE *)(v12 + 272) || (*(_BYTE *)(v14 + 4) & 6) != 0)
        sub_20F394A20(a1 + 2392, v14);
      v12 += 280;
    }
    v15 = *(_QWORD *)(a1 + 1112);
    v16 = *(_QWORD *)(a1 + 1120);
    while (v15 != v16)
    {
      v17 = *(_QWORD *)(v15 + 136);
      if (*(_BYTE *)(v15 + 272) || (*(_BYTE *)(v17 + 4) & 6) != 0)
        sub_20F599C88((_QWORD *)(a1 + 2392), v17);
      v15 += 280;
    }
    v18 = *(_QWORD *)(a1 + 1136);
    v19 = *(_QWORD *)(a1 + 1144);
    while (v18 != v19)
    {
      v20 = *(_QWORD *)(v18 + 136);
      if (*(_BYTE *)(v18 + 272) || (*(_BYTE *)(v20 + 4) & 6) != 0)
        sub_20F59A480((_QWORD *)(a1 + 2392), v20);
      v18 += 280;
    }
    v21 = *(_QWORD *)(a1 + 1160);
    v22 = *(_QWORD *)(a1 + 1168);
    while (v21 != v22)
    {
      v23 = *(_QWORD *)(v21 + 64);
      if (*(_BYTE *)(v21 + 152) || (*(_BYTE *)(v23 + 4) & 6) != 0)
        sub_20F59A2E8((_QWORD *)(a1 + 2392), v23);
      v21 += 160;
    }
    sub_20F8DF7FC(*(_QWORD *)(a1 + 1184), *(_QWORD *)(a1 + 1192), (_QWORD *)(a1 + 2392));
    sub_20F5B85BC(*(_QWORD *)(a1 + 1208), *(_QWORD *)(a1 + 1216), (_QWORD *)(a1 + 2392));
    v24 = *(_QWORD *)(a1 + 1232);
    v25 = *(_QWORD *)(a1 + 1240);
    while (v24 != v25)
    {
      v26 = *(_QWORD *)(v24 + 48);
      if (*(_BYTE *)(v24 + 136) || (*(_BYTE *)(v26 + 4) & 6) != 0)
        sub_20F3D35E0((_QWORD *)(a1 + 2392), v26);
      v24 += 144;
    }
    v27 = *(_QWORD *)(a1 + 1256);
    v28 = *(_QWORD *)(a1 + 1264);
    while (v27 != v28)
    {
      v29 = *(_QWORD *)(v27 + 48);
      if (*(_BYTE *)(v27 + 144) || (*(_BYTE *)(v29 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v27 + 56) + 4) & 6) != 0)
      {
        sub_20F394A20(a1 + 2392, v29);
        sub_20F394A20(a1 + 2392, *(_QWORD *)(v27 + 56));
      }
      v27 += 152;
    }
    sub_20F8DF748(*(_QWORD *)(a1 + 1280), *(_QWORD *)(a1 + 1288), (_QWORD *)(a1 + 2392));
    sub_20F8DF65C(*(_QWORD *)(a1 + 1304), *(_QWORD *)(a1 + 1312), (_QWORD *)(a1 + 2392));
    v30 = *(_QWORD *)(a1 + 1328);
    v31 = *(_QWORD *)(a1 + 1336);
    while (v30 != v31)
    {
      v32 = *(_QWORD *)(v30 + 48);
      if (*(_BYTE *)(v30 + 104) || (*(_BYTE *)(v32 + 4) & 6) != 0)
        sub_20F59A150((_QWORD *)(a1 + 2392), v32);
      v30 += 112;
    }
    v33 = *(_QWORD *)(a1 + 1352);
    v34 = *(_QWORD *)(a1 + 1360);
    while (v33 != v34)
    {
      v35 = *(_QWORD *)(v33 + 96);
      if (*(_BYTE *)(v33 + 200) || (*(_BYTE *)(v35 + 4) & 6) != 0)
        sub_20F599FB8((_QWORD *)(a1 + 2392), v35);
      v33 += 208;
    }
    v36 = *(_QWORD *)(a1 + 1376);
    v37 = *(_QWORD *)(a1 + 1384);
    while (v36 != v37)
    {
      v38 = *(_QWORD *)(v36 + 96);
      if (*(_BYTE *)(v36 + 200) || (*(_BYTE *)(v38 + 4) & 6) != 0)
        sub_20F599E20((_QWORD *)(a1 + 2392), v38);
      v36 += 208;
    }
    v39 = *(_QWORD *)(a1 + 1400);
    v40 = *(_QWORD *)(a1 + 1408);
    while (v39 != v40)
    {
      v41 = *(_QWORD *)(v39 + 80);
      if (*(_BYTE *)(v39 + 168) || (*(_BYTE *)(v41 + 4) & 6) != 0)
        sub_20F8DAC28((_QWORD *)(a1 + 2392), v41);
      v39 += 176;
    }
    v42 = *(_QWORD *)(a1 + 1424);
    v43 = *(_QWORD *)(a1 + 1432);
    while (v42 != v43)
    {
      v44 = *(_QWORD *)(v42 + 80);
      if (*(_BYTE *)(v42 + 168) || (*(_BYTE *)(v44 + 4) & 6) != 0)
        sub_20F8DADC0((_QWORD *)(a1 + 2392), v44);
      v42 += 176;
    }
    sub_20F8DF4E4(*(_QWORD *)(a1 + 1448), *(_QWORD *)(a1 + 1456), (_QWORD *)(a1 + 2392));
    sub_20F8DF3F8(*(_QWORD *)(a1 + 1472), *(_QWORD *)(a1 + 1480), (_QWORD *)(a1 + 2392));
    sub_20F8DF280(*(_QWORD *)(a1 + 1496), *(_QWORD *)(a1 + 1504), (_QWORD *)(a1 + 2392));
    v45 = (uint64_t)(*(_QWORD *)(a1 + 2616) - *(_QWORD *)(a1 + 2608)) >> 2;
    if (v45 <= v48)
      v46 = v48 - v45;
    else
      v46 = 0;
    sub_20F8DB0F0((_QWORD *)a1);
    return v46;
  }
  else
  {
    return v48;
  }
}

void sub_20FB6B354(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6B368(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6B37C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6B390(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6B3A4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6B3B8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6B3CC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6B3E0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6B3F4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6B408(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6B41C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6B430(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6B444(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20FB6B458(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _DWORD v47[10];
  unsigned int v48;

  if (*(_BYTE *)(a1 + 1592))
  {
    v3 = *(_QWORD *)(a1 + 968);
    v4 = *(_QWORD *)(a1 + 976);
    if (v3 == v4)
      return 0;
    v5 = 0;
    if ((a2 & 1) != 0)
    {
      do
      {
        v6 = *(_QWORD *)(v3 + 8);
        if ((*(_BYTE *)(v6 + 4) & 2) == 0)
          v5 = v5 + *(unsigned __int8 *)(v6 + 20);
        v3 += 16;
      }
      while (v3 != v4);
    }
    else
    {
      do
      {
        v7 = *(_QWORD *)(v3 + 8);
        if ((*(_BYTE *)(v7 + 4) & 6) == 0)
          v5 = v5 + *(unsigned __int8 *)(v7 + 20);
        v3 += 16;
      }
      while (v3 != v4);
    }
    return v5;
  }
  else if (sub_20FB67BB4((_QWORD *)a1, v47, a2))
  {
    *(_QWORD *)(a1 + 2400) = *(_QWORD *)(a1 + 2392);
    *(_QWORD *)(a1 + 2424) = *(_QWORD *)(a1 + 2416);
    *(_QWORD *)(a1 + 2448) = *(_QWORD *)(a1 + 2440);
    *(_QWORD *)(a1 + 2472) = *(_QWORD *)(a1 + 2464);
    *(_QWORD *)(a1 + 2496) = *(_QWORD *)(a1 + 2488);
    *(_QWORD *)(a1 + 2520) = *(_QWORD *)(a1 + 2512);
    *(_QWORD *)(a1 + 2544) = *(_QWORD *)(a1 + 2536);
    *(_QWORD *)(a1 + 2568) = *(_QWORD *)(a1 + 2560);
    *(_QWORD *)(a1 + 2592) = *(_QWORD *)(a1 + 2584);
    *(_QWORD *)(a1 + 2616) = *(_QWORD *)(a1 + 2608);
    *(_QWORD *)(a1 + 2640) = *(_QWORD *)(a1 + 2632);
    v8 = *(_QWORD *)(a1 + 1064);
    v9 = *(_QWORD *)(a1 + 1072);
    while (v8 != v9)
    {
      v10 = *(_QWORD *)(v8 + 208);
      if (*(_BYTE *)(v8 + 496) || (*(_BYTE *)(v10 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v8 + 216) + 4) & 6) != 0)
      {
        sub_20F394A20(a1 + 2392, v10);
        sub_20F3D35E0((_QWORD *)(a1 + 2392), *(_QWORD *)(v8 + 216));
      }
      v8 += 504;
    }
    v12 = *(_QWORD *)(a1 + 1088);
    v13 = *(_QWORD *)(a1 + 1096);
    while (v12 != v13)
    {
      v14 = *(_QWORD *)(v12 + 136);
      if (*(_BYTE *)(v12 + 272) || (*(_BYTE *)(v14 + 4) & 6) != 0)
        sub_20F394A20(a1 + 2392, v14);
      v12 += 280;
    }
    v15 = *(_QWORD *)(a1 + 1112);
    v16 = *(_QWORD *)(a1 + 1120);
    while (v15 != v16)
    {
      v17 = *(_QWORD *)(v15 + 136);
      if (*(_BYTE *)(v15 + 272) || (*(_BYTE *)(v17 + 4) & 6) != 0)
        sub_20F599C88((_QWORD *)(a1 + 2392), v17);
      v15 += 280;
    }
    v18 = *(_QWORD *)(a1 + 1136);
    v19 = *(_QWORD *)(a1 + 1144);
    while (v18 != v19)
    {
      v20 = *(_QWORD *)(v18 + 136);
      if (*(_BYTE *)(v18 + 272) || (*(_BYTE *)(v20 + 4) & 6) != 0)
        sub_20F59A480((_QWORD *)(a1 + 2392), v20);
      v18 += 280;
    }
    v21 = *(_QWORD *)(a1 + 1160);
    v22 = *(_QWORD *)(a1 + 1168);
    while (v21 != v22)
    {
      v23 = *(_QWORD *)(v21 + 64);
      if (*(_BYTE *)(v21 + 152) || (*(_BYTE *)(v23 + 4) & 6) != 0)
        sub_20F59A2E8((_QWORD *)(a1 + 2392), v23);
      v21 += 160;
    }
    sub_20F8DF7FC(*(_QWORD *)(a1 + 1184), *(_QWORD *)(a1 + 1192), (_QWORD *)(a1 + 2392));
    sub_20F5B85BC(*(_QWORD *)(a1 + 1208), *(_QWORD *)(a1 + 1216), (_QWORD *)(a1 + 2392));
    v24 = *(_QWORD *)(a1 + 1232);
    v25 = *(_QWORD *)(a1 + 1240);
    while (v24 != v25)
    {
      v26 = *(_QWORD *)(v24 + 48);
      if (*(_BYTE *)(v24 + 136) || (*(_BYTE *)(v26 + 4) & 6) != 0)
        sub_20F3D35E0((_QWORD *)(a1 + 2392), v26);
      v24 += 144;
    }
    v27 = *(_QWORD *)(a1 + 1256);
    v28 = *(_QWORD *)(a1 + 1264);
    while (v27 != v28)
    {
      v29 = *(_QWORD *)(v27 + 48);
      if (*(_BYTE *)(v27 + 144) || (*(_BYTE *)(v29 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v27 + 56) + 4) & 6) != 0)
      {
        sub_20F394A20(a1 + 2392, v29);
        sub_20F394A20(a1 + 2392, *(_QWORD *)(v27 + 56));
      }
      v27 += 152;
    }
    sub_20F8DF748(*(_QWORD *)(a1 + 1280), *(_QWORD *)(a1 + 1288), (_QWORD *)(a1 + 2392));
    sub_20F8DF65C(*(_QWORD *)(a1 + 1304), *(_QWORD *)(a1 + 1312), (_QWORD *)(a1 + 2392));
    v30 = *(_QWORD *)(a1 + 1328);
    v31 = *(_QWORD *)(a1 + 1336);
    while (v30 != v31)
    {
      v32 = *(_QWORD *)(v30 + 48);
      if (*(_BYTE *)(v30 + 104) || (*(_BYTE *)(v32 + 4) & 6) != 0)
        sub_20F59A150((_QWORD *)(a1 + 2392), v32);
      v30 += 112;
    }
    v33 = *(_QWORD *)(a1 + 1352);
    v34 = *(_QWORD *)(a1 + 1360);
    while (v33 != v34)
    {
      v35 = *(_QWORD *)(v33 + 96);
      if (*(_BYTE *)(v33 + 200) || (*(_BYTE *)(v35 + 4) & 6) != 0)
        sub_20F599FB8((_QWORD *)(a1 + 2392), v35);
      v33 += 208;
    }
    v36 = *(_QWORD *)(a1 + 1376);
    v37 = *(_QWORD *)(a1 + 1384);
    while (v36 != v37)
    {
      v38 = *(_QWORD *)(v36 + 96);
      if (*(_BYTE *)(v36 + 200) || (*(_BYTE *)(v38 + 4) & 6) != 0)
        sub_20F599E20((_QWORD *)(a1 + 2392), v38);
      v36 += 208;
    }
    v39 = *(_QWORD *)(a1 + 1400);
    v40 = *(_QWORD *)(a1 + 1408);
    while (v39 != v40)
    {
      v41 = *(_QWORD *)(v39 + 80);
      if (*(_BYTE *)(v39 + 168) || (*(_BYTE *)(v41 + 4) & 6) != 0)
        sub_20F8DAC28((_QWORD *)(a1 + 2392), v41);
      v39 += 176;
    }
    v42 = *(_QWORD *)(a1 + 1424);
    v43 = *(_QWORD *)(a1 + 1432);
    while (v42 != v43)
    {
      v44 = *(_QWORD *)(v42 + 80);
      if (*(_BYTE *)(v42 + 168) || (*(_BYTE *)(v44 + 4) & 6) != 0)
        sub_20F8DADC0((_QWORD *)(a1 + 2392), v44);
      v42 += 176;
    }
    sub_20F8DF4E4(*(_QWORD *)(a1 + 1448), *(_QWORD *)(a1 + 1456), (_QWORD *)(a1 + 2392));
    sub_20F8DF3F8(*(_QWORD *)(a1 + 1472), *(_QWORD *)(a1 + 1480), (_QWORD *)(a1 + 2392));
    sub_20F8DF280(*(_QWORD *)(a1 + 1496), *(_QWORD *)(a1 + 1504), (_QWORD *)(a1 + 2392));
    v45 = (uint64_t)(*(_QWORD *)(a1 + 2640) - *(_QWORD *)(a1 + 2632)) >> 2;
    if (v45 <= v48)
      v46 = v48 - v45;
    else
      v46 = 0;
    sub_20F8DB0F0((_QWORD *)a1);
    return v46;
  }
  else
  {
    return v48;
  }
}

void sub_20FB6B940(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6B954(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6B968(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6B97C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6B990(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6B9A4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6B9B8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6B9CC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6B9E0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6B9F4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6BA08(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6BA1C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6BA30(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F8DB0F0(v1);
  _Unwind_Resume(a1);
}

void sub_20FB6BA44(std::string *a1)
{
  const std::string::value_type *v2;
  std::string::size_type v3;
  _OWORD *v4;
  const std::string::value_type *v5;
  std::string::size_type v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  char *v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  _OWORD *v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  char *v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  const std::string::value_type *v22;
  std::string::size_type v23;
  _OWORD *v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  _BYTE v29[64];
  char *v30;
  __int128 v31;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  v30 = (char *)operator new(0x30uLL);
  *(_WORD *)&v29[50] = 0;
  *(_DWORD *)&v29[52] = 0;
  *(_QWORD *)&v29[56] = 0x8000000000000030;
  v31 = xmmword_2102DCA00;
  strcpy(v30, "cv3d::vio::VIOExtrinsicsVariable<double>]");
  strcpy(v29, "ariable<double>]trinsicsVariablecv3d::vio::VIOEx)");
  sub_20E8D1238(&v30, 40, 1uLL);
  if (v31 >= 0)
    v2 = (const std::string::value_type *)&v30;
  else
    v2 = v30;
  if (v31 >= 0)
    v3 = HIBYTE(v31);
  else
    v3 = v31;
  std::string::append(a1, v2, v3);
  if (SHIBYTE(v31) < 0)
    operator delete(v30);
  std::string::append(a1, ", ", 2uLL);
  v4 = operator new(0x30uLL);
  v30 = (char *)v4;
  v31 = *(_OWORD *)&v29[48];
  *v4 = *(_OWORD *)&v29[32];
  v4[1] = *(_OWORD *)&v29[16];
  *(_OWORD *)((char *)v4 + 25) = *(_OWORD *)v29;
  *((_BYTE *)v4 + 41) = 0;
  sub_20E8D1238(&v30, 40, 1uLL);
  if (v31 >= 0)
    v5 = (const std::string::value_type *)&v30;
  else
    v5 = v30;
  if (v31 >= 0)
    v6 = HIBYTE(v31);
  else
    v6 = v31;
  std::string::append(a1, v5, v6);
  if (SHIBYTE(v31) < 0)
    operator delete(v30);
  std::string::append(a1, ", ", 2uLL);
  v30 = (char *)operator new(0x28uLL);
  *(_WORD *)&v29[50] = 0;
  *(_DWORD *)&v29[52] = 0;
  *(_QWORD *)&v29[56] = 0x8000000000000028;
  v31 = xmmword_2102DCA10;
  strcpy(&v29[16], "seVariable<doublcv3d::vio::VIOPo#");
  strcpy(v30, "cv3d::vio::VIOPoseVariable<double>]");
  sub_20E8D1238(&v30, 34, 1uLL);
  if (v31 >= 0)
    v7 = (const std::string::value_type *)&v30;
  else
    v7 = v30;
  if (v31 >= 0)
    v8 = HIBYTE(v31);
  else
    v8 = v31;
  std::string::append(a1, v7, v8);
  if (SHIBYTE(v31) < 0)
    operator delete(v30);
  std::string::append(a1, ", ", 2uLL);
  v9 = (char *)operator new(0x28uLL);
  v30 = v9;
  v31 = *(_OWORD *)&v29[48];
  strcpy(v9 + 31, "le>]");
  *(_OWORD *)v9 = *(_OWORD *)&v29[32];
  *((_OWORD *)v9 + 1) = *(_OWORD *)&v29[16];
  sub_20E8D1238(&v30, 34, 1uLL);
  if (v31 >= 0)
    v10 = (const std::string::value_type *)&v30;
  else
    v10 = v30;
  if (v31 >= 0)
    v11 = HIBYTE(v31);
  else
    v11 = v31;
  std::string::append(a1, v10, v11);
  if (SHIBYTE(v31) < 0)
    operator delete(v30);
  std::string::append(a1, ", ", 2uLL);
  v30 = (char *)operator new(0x30uLL);
  *(_WORD *)&v29[50] = 0;
  *(_DWORD *)&v29[52] = 0;
  *(_QWORD *)&v29[56] = 0x8000000000000030;
  v31 = xmmword_2102DC8E0;
  strcpy(v30, "cv3d::vio::IntrinsicsCalibVariable<double>]");
  strcpy(v29, "ariable<double>]nsicsCalibVariabcv3d::vio::Intri+");
  sub_20E8D1238(&v30, 42, 1uLL);
  if (v31 >= 0)
    v12 = (const std::string::value_type *)&v30;
  else
    v12 = v30;
  if (v31 >= 0)
    v13 = HIBYTE(v31);
  else
    v13 = v31;
  std::string::append(a1, v12, v13);
  if (SHIBYTE(v31) < 0)
    operator delete(v30);
  std::string::append(a1, ", ", 2uLL);
  v14 = operator new(0x30uLL);
  v30 = (char *)v14;
  v31 = *(_OWORD *)&v29[48];
  *v14 = *(_OWORD *)&v29[32];
  v14[1] = *(_OWORD *)&v29[16];
  *(_OWORD *)((char *)v14 + 27) = *(_OWORD *)v29;
  *((_BYTE *)v14 + 43) = 0;
  sub_20E8D1238(&v30, 42, 1uLL);
  if (v31 >= 0)
    v15 = (const std::string::value_type *)&v30;
  else
    v15 = v30;
  if (v31 >= 0)
    v16 = HIBYTE(v31);
  else
    v16 = v31;
  std::string::append(a1, v15, v16);
  if (SHIBYTE(v31) < 0)
    operator delete(v30);
  std::string::append(a1, ", ", 2uLL);
  v30 = (char *)operator new(0x38uLL);
  *(_WORD *)&v29[50] = 0;
  *(_DWORD *)&v29[52] = 0;
  *(_QWORD *)&v29[56] = 0x8000000000000038;
  v31 = xmmword_2102DC7C0;
  strcpy(v30, "cv3d::vio::RadialDistortionCalibVariable<double>]");
  strcpy(v29, "Variable<double>lDistortionCalibcv3d::vio::Radia1");
  sub_20E8D1238(&v30, 48, 1uLL);
  if (v31 >= 0)
    v17 = (const std::string::value_type *)&v30;
  else
    v17 = v30;
  if (v31 >= 0)
    v18 = HIBYTE(v31);
  else
    v18 = v31;
  std::string::append(a1, v17, v18);
  if (SHIBYTE(v31) < 0)
    operator delete(v30);
  std::string::append(a1, ", ", 2uLL);
  v19 = (char *)operator new(0x38uLL);
  v30 = v19;
  v31 = *(_OWORD *)&v29[48];
  *((_WORD *)v19 + 24) = 93;
  *(_OWORD *)v19 = *(_OWORD *)&v29[32];
  *((_OWORD *)v19 + 1) = *(_OWORD *)&v29[16];
  *((_OWORD *)v19 + 2) = *(_OWORD *)v29;
  sub_20E8D1238(&v30, 48, 1uLL);
  if (v31 >= 0)
    v20 = (const std::string::value_type *)&v30;
  else
    v20 = v30;
  if (v31 >= 0)
    v21 = HIBYTE(v31);
  else
    v21 = v31;
  std::string::append(a1, v20, v21);
  if (SHIBYTE(v31) < 0)
    operator delete(v30);
  std::string::append(a1, ", ", 2uLL);
  v30 = (char *)operator new(0x30uLL);
  *(_WORD *)&v29[50] = 0;
  *(_DWORD *)&v29[52] = 0;
  *(_QWORD *)&v29[56] = 0x8000000000000030;
  v31 = xmmword_2102E3F60;
  strcpy(v30, "cv3d::vio::ExternalLensCalibVariable<double>]");
  strcpy(v29, "ariable<double>]nalLensCalibVaricv3d::vio::Exter-");
  sub_20E8D1238(&v30, 44, 1uLL);
  if (v31 >= 0)
    v22 = (const std::string::value_type *)&v30;
  else
    v22 = v30;
  if (v31 >= 0)
    v23 = HIBYTE(v31);
  else
    v23 = v31;
  std::string::append(a1, v22, v23);
  if (SHIBYTE(v31) < 0)
    operator delete(v30);
  std::string::append(a1, ", ", 2uLL);
  v24 = operator new(0x30uLL);
  v30 = (char *)v24;
  v31 = *(_OWORD *)&v29[48];
  *v24 = *(_OWORD *)&v29[32];
  v24[1] = *(_OWORD *)&v29[16];
  *(_OWORD *)((char *)v24 + 29) = *(_OWORD *)v29;
  *((_BYTE *)v24 + 45) = 0;
  sub_20E8D1238(&v30, 44, 1uLL);
  if (v31 >= 0)
    v25 = (const std::string::value_type *)&v30;
  else
    v25 = v30;
  if (v31 >= 0)
    v26 = HIBYTE(v31);
  else
    v26 = v31;
  std::string::append(a1, v25, v26);
  if (SHIBYTE(v31) < 0)
    operator delete(v30);
  std::string::append(a1, ", ", 2uLL);
  v30 = (char *)operator new(0x30uLL);
  v31 = xmmword_2102DC900;
  strcpy(v30, "cv3d::vio::VIOLandmarkDepthVariable<double>]");
  sub_20E8D1238(&v30, 43, 1uLL);
  if (v31 >= 0)
    v27 = (const std::string::value_type *)&v30;
  else
    v27 = v30;
  if (v31 >= 0)
    v28 = HIBYTE(v31);
  else
    v28 = v31;
  std::string::append(a1, v27, v28);
  if (SHIBYTE(v31) < 0)
    operator delete(v30);
}

void sub_20FB6C054(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  if (*(char *)(v2 - 17) < 0)
  {
    operator delete(*(void **)(v2 - 40));
    if ((*(char *)(v1 + 23) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v1 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FB6C0F4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float64x2_t *v10;
  float64x2_t *v11;
  size_t v12;
  int v13;
  __int128 *v14;
  uint64_t v15;
  __int128 *v16;
  unsigned int v17;
  __int128 v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  int32x4_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  int v46;
  unsigned int v47;
  unint64_t v48;
  int32x4_t v49;
  int32x4_t v50;
  unsigned int v51;
  unint64_t v52;
  _QWORD *v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  BOOL v60;
  uint64_t v61;
  int v62;
  int v63;
  unsigned int v64;
  int32x4_t v65;
  int32x4_t v66;
  unsigned int v67;
  unint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  int32x4_t v73;
  unint64_t v74;
  int v75;
  uint64_t v76;
  unint64_t v77;
  unsigned int v78;
  int v79;
  int v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  int v88;
  int v89;
  unsigned int v90;
  unint64_t v91;
  int32x4_t v92;
  int32x4_t v93;
  unsigned int v94;
  unint64_t v95;
  char *v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  BOOL v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  int v107;
  unsigned int v108;
  int32x4_t v109;
  int32x4_t v110;
  unsigned int v111;
  unint64_t v112;
  float64x2_t v119;
  double v125;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  int8x16_t v132;
  int8x16_t v133;
  int8x16_t v134;
  uint64_t v137;
  uint64_t v138;
  int8x16_t *v139;
  uint64_t v140;
  uint64_t result;
  char *__dst;
  float64x2_t v143;
  float64x2_t v144;
  double v145;
  float64x2_t v146;
  double v147;
  float64x2_t v148;
  double v149;
  double v150;
  float64x2_t v151;
  double v152;
  float64x2_t v153;
  double v154;
  int v155;
  _DWORD v156[2];
  uint64_t v157;
  int v158;
  _QWORD v159[2];
  unsigned int v160;
  char v161[8];
  uint64_t v162;
  _DWORD *v163;
  uint64_t v164;
  uint64_t v165;

  v165 = *MEMORY[0x24BDAC8D0];
  v6 = *((_DWORD *)a3 + 4);
  if (v6 != *((_DWORD *)a3 + 5))
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOPriorUtil.h", 166, (uint64_t)"prior.rows() == prior.columns()", 31, (uint64_t)"Prior has to be symmetric", 25, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_143;
    }
    v6 = *((_DWORD *)a3 + 4);
  }
  v7 = v6;
  if (a2 + 3 <= (unint64_t)v6)
    goto LABEL_7;
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOPriorUtil.h", 167, (uint64_t)"prior.rows() >= state_offset + 3", 32, (uint64_t)"state offset exceeds matrix size", 32, (void (*)(void **))sub_21023DDB0))
  {
LABEL_143:
    abort();
  }
  v7 = *((unsigned int *)a3 + 4);
  v6 = *((_DWORD *)a3 + 4);
LABEL_7:
  v8 = *a3;
  v9 = *a3 + 8 * (a2 + (_DWORD)a2 * v6);
  v145 = *(double *)(v9 + 16);
  v10 = (float64x2_t *)(v9 + 8 * v7);
  v147 = v10[1].f64[0];
  v143 = *(float64x2_t *)v9;
  v144 = *v10;
  v11 = (float64x2_t *)(v9 + 16 * v7);
  v150 = v11[1].f64[0];
  v146 = *v11;
  v149 = *(double *)(a1 + 16);
  v148 = *(float64x2_t *)a1;
  v152 = *(double *)(a1 + 40);
  v151 = *(float64x2_t *)(a1 + 24);
  v154 = *(double *)(a1 + 64);
  v153 = *(float64x2_t *)(a1 + 48);
  v156[0] = *((_DWORD *)a3 + 5);
  v156[1] = v6;
  v157 = v8 + 8 * a2;
  v158 = a2;
  v12 = (8 * (3 * v156[0]) + 31) & 0xFFFFFFFE0;
  v159[1] = v12 >> 3;
  v159[0] = operator new(v12, (std::align_val_t)0x20uLL);
  v160 = v156[0];
  v162 = a1;
  v163 = v156;
  v164 = 0x3FF0000000000000;
  sub_20F20B08C((uint64_t)v159, (uint64_t)v161);
  v13 = *((_DWORD *)a3 + 4);
  v14 = (__int128 *)*a3;
  v15 = v160;
  v16 = (__int128 *)v159[0];
  if (v160)
  {
    v17 = a2;
    do
    {
      v18 = *v16;
      v19 = (uint64_t)v14 + 8 * v17;
      *(_QWORD *)(v19 + 16) = *((_QWORD *)v16 + 2);
      *(_OWORD *)v19 = v18;
      v16 = (__int128 *)((char *)v16 + 24);
      v17 += v13;
      --v15;
    }
    while (v15);
    v13 = *((_DWORD *)a3 + 4);
    v14 = (__int128 *)*a3;
    v16 = (__int128 *)v159[0];
  }
  v155 = a2;
  v20 = v13 * a2;
  v21 = v160;
  v22 = v160;
  if (v16 == v14)
  {
    v69 = (char *)operator new((24 * v160 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
    v70 = v69;
    if (3 * v21 > ((24 * v22 + 31) & 0xFFFFFFFE0uLL) >> 3)
    {
      MEMORY[0x212BC6368](v69, 0x1000C8000313F17);
      v70 = (char *)operator new((24 * v21 + 31) & 0x3FFFFFFFE0, (std::align_val_t)0x20uLL);
    }
    if (!(_DWORD)v21)
    {
LABEL_139:
      MEMORY[0x212BC6368](v70, 0x1000C8000313F17);
      goto LABEL_140;
    }
    v71 = 0;
    v72 = v159[0];
    v73.i64[0] = -1;
    v73.i64[1] = -1;
    __dst = (char *)v14 + 8 * v20;
    while (1)
    {
      v74 = v71 + 8;
      v75 = v22 - v71;
      if (v71 + 8 <= v21)
        v75 = 8;
      if (v75)
        break;
LABEL_78:
      v71 += 8;
      if (v74 >= v21)
      {
        memmove(__dst, v70, 8 * v21);
        memmove((char *)v16 + 8 * v20 + 8 * v13, &v70[8 * (int)v21], 8 * v21);
        memmove((char *)v16 + 8 * (v13 * (a2 + 2)), &v70[8 * (int)v21 + 8 * (int)v21], 8 * v21);
        goto LABEL_139;
      }
    }
    v76 = 0;
    v77 = 0;
    if (v75 >= 0)
      v78 = v75;
    else
      v78 = -v75;
    v79 = 2 * v75;
    v80 = -2 * v75;
    while (1)
    {
      v81 = HIDWORD(v77);
      if (v78 >> 4 >= 0x271)
      {
        v84 = v75 + v77 + v75 * HIDWORD(v77);
        v85 = (v84 / v75);
        v86 = (v84 % v75);
        v87 = v86 | (v85 << 32);
        v83 = (v86 + v75) | ((unint64_t)(v85 - 1) << 32);
        if ((int)v86 >= 0)
          v83 = v87;
        goto LABEL_108;
      }
      v82 = (v75 + v77);
      if (v75 + (int)v77 >= 0)
      {
        v83 = v77 & 0xFFFFFFFF00000000 | v82;
        if ((int)v82 >= v75)
          goto LABEL_105;
        goto LABEL_108;
      }
      v88 = v80 + ((v79 + v77) & ~((v79 + (int)v77) >> 31));
      v89 = v88 == (_DWORD)v77 ? 1 : 2;
      v90 = v89 + (v88 - (v88 != (_DWORD)v77) - v77) / v75;
      if (v90 < 8)
        break;
      LODWORD(v82) = v82 + (v90 & 0xFFFFFFF8) * v75;
      v92 = 0uLL;
      v93 = (int32x4_t)HIDWORD(v77);
      v94 = v90 & 0xFFFFFFF8;
      do
      {
        v93 = vaddq_s32(v93, v73);
        v92 = vaddq_s32(v92, v73);
        v94 -= 8;
      }
      while (v94);
      v91 = vaddvq_s32(vaddq_s32(v92, v93));
      if (v90 != (v90 & 0xFFFFFFF8))
        goto LABEL_103;
LABEL_104:
      v83 = v82 | (v91 << 32);
      if ((int)v82 >= v75)
      {
LABEL_105:
        v95 = HIDWORD(v83);
        do
        {
          v82 = (v82 - v75);
          v95 = (v95 + 1);
        }
        while ((int)v82 >= v75);
        v83 = v82 | (v95 << 32);
      }
LABEL_108:
      if ((_DWORD)v77 != (_DWORD)v83 || HIDWORD(v77) != HIDWORD(v83))
      {
        v97 = &v70[8 * (v71 + v21 * v76)];
        LODWORD(v98) = v77;
        v99 = v77;
        do
        {
          *(_QWORD *)v97 = *(_QWORD *)(v72
                                     + 8 * ((3 * (_DWORD)v71) & 0xFFFFFFF8)
                                     + 8 * (3 * v99 + HIDWORD(v99)));
          v97 += 8;
          v100 = (v98 + 1);
          v98 = v99 & 0xFFFFFFFF00000000 | v100;
          if (v75 <= (int)v100)
            v98 = (v99 & 0xFFFFFFFF00000000) + 0x100000000;
          v101 = (_DWORD)v98 == (_DWORD)v83 && HIDWORD(v98) == HIDWORD(v83);
          v99 = v98;
        }
        while (!v101);
      }
      if (v78 >> 4 >= 0x271)
      {
        v103 = v75 + v77 + v75 * HIDWORD(v77);
        v104 = (v103 / v75);
        v105 = (v103 % v75);
        if ((v105 & 0x80000000) != 0)
          v77 = (v105 + v75) | ((unint64_t)(v104 - 1) << 32);
        else
          v77 = v105 | (v104 << 32);
        goto LABEL_87;
      }
      v102 = (v75 + v77);
      if (v75 + (int)v77 < 0)
      {
        v106 = v80 + ((v79 + v77) & ~((v79 + (int)v77) >> 31));
        if (v106 == (_DWORD)v77)
          v107 = 1;
        else
          v107 = 2;
        v108 = v107 + (v106 - (v106 != (_DWORD)v77) - v77) / v75;
        if (v108 < 8)
          goto LABEL_146;
        LODWORD(v102) = v102 + (v108 & 0xFFFFFFF8) * v75;
        v109 = 0uLL;
        v110 = (int32x4_t)v81;
        v111 = v108 & 0xFFFFFFF8;
        do
        {
          v110 = vaddq_s32(v110, v73);
          v109 = vaddq_s32(v109, v73);
          v111 -= 8;
        }
        while (v111);
        v81 = vaddvq_s32(vaddq_s32(v109, v110));
        if (v108 != (v108 & 0xFFFFFFF8))
        {
LABEL_146:
          do
          {
            LODWORD(v102) = v102 + v75;
            v81 = (v81 - 1);
          }
          while ((v102 & 0x80000000) != 0);
        }
        v77 = v102 | (v81 << 32);
        if ((int)v102 < v75)
          goto LABEL_87;
LABEL_135:
        v112 = HIDWORD(v77);
        do
        {
          v102 = (v102 - v75);
          v112 = (v112 + 1);
        }
        while ((int)v102 >= v75);
        v77 = v102 | (v112 << 32);
        goto LABEL_87;
      }
      v77 = v77 & 0xFFFFFFFF00000000 | v102;
      if ((int)v102 >= v75)
        goto LABEL_135;
LABEL_87:
      if (++v76 == 3)
        goto LABEL_78;
    }
    v91 = HIDWORD(v77);
    do
    {
LABEL_103:
      LODWORD(v82) = v82 + v75;
      v91 = (v91 - 1);
    }
    while ((v82 & 0x80000000) != 0);
    goto LABEL_104;
  }
  if (v160)
  {
    v23 = 0;
    v24 = v160;
    v25.i64[0] = -1;
    v25.i64[1] = -1;
    while (1)
    {
      v26 = v23 + 8;
      v27 = v22 - v23;
      if (v23 + 8 <= v24)
        v27 = 8;
      if (v27)
        break;
LABEL_14:
      v23 = v26;
      if (v26 >= v24)
        goto LABEL_140;
    }
    v28 = 0;
    v29 = 0;
    v30 = (uint64_t)v16 + 8 * ((3 * (_DWORD)v23) & 0xFFFFFFF8);
    v31 = v20 + v23;
    if (v27 >= 0)
      v32 = v27;
    else
      v32 = -v27;
    v33 = 2 * v27;
    v34 = -2 * v27;
    while (1)
    {
      v38 = HIDWORD(v29);
      if (v32 >> 4 >= 0x271)
      {
        v41 = v27 + v29 + v27 * HIDWORD(v29);
        v42 = (v41 / v27);
        v43 = (v41 % v27);
        v44 = v43 | (v42 << 32);
        v40 = (v43 + v27) | ((unint64_t)(v42 - 1) << 32);
        if ((int)v43 >= 0)
          v40 = v44;
        goto LABEL_46;
      }
      v39 = (v27 + v29);
      if (v27 + (int)v29 >= 0)
      {
        v40 = v29 & 0xFFFFFFFF00000000 | v39;
        if ((int)v39 >= v27)
          goto LABEL_43;
        goto LABEL_46;
      }
      v45 = v34 + ((v33 + v29) & ~((v33 + (int)v29) >> 31));
      v46 = v45 == (_DWORD)v29 ? 1 : 2;
      v47 = v46 + (v45 - (v45 != (_DWORD)v29) - v29) / v27;
      if (v47 < 8)
        break;
      LODWORD(v39) = v39 + (v47 & 0xFFFFFFF8) * v27;
      v49 = 0uLL;
      v50 = (int32x4_t)HIDWORD(v29);
      v51 = v47 & 0xFFFFFFF8;
      do
      {
        v50 = vaddq_s32(v50, v25);
        v49 = vaddq_s32(v49, v25);
        v51 -= 8;
      }
      while (v51);
      v48 = vaddvq_s32(vaddq_s32(v49, v50));
      if (v47 != (v47 & 0xFFFFFFF8))
        goto LABEL_41;
LABEL_42:
      v40 = v39 | (v48 << 32);
      if ((int)v39 >= v27)
      {
LABEL_43:
        v52 = HIDWORD(v40);
        do
        {
          v39 = (v39 - v27);
          v52 = (v52 + 1);
        }
        while ((int)v39 >= v27);
        v40 = v39 | (v52 << 32);
      }
LABEL_46:
      if ((_DWORD)v29 != (_DWORD)v40 || HIDWORD(v29) != HIDWORD(v40))
      {
        v54 = (_QWORD *)v14 + (v31 + v13 * v28);
        LODWORD(v55) = v29;
        v56 = v29;
        do
        {
          *v54++ = *(_QWORD *)(v30 + 8 * (3 * v56 + HIDWORD(v56)));
          v57 = (v55 + 1);
          v58 = v56 & 0xFFFFFFFF00000000;
          v59 = v56 & 0xFFFFFFFF00000000 | v57;
          v55 = v58 + 0x100000000;
          if (v27 > (int)v57)
            v55 = v59;
          v60 = (_DWORD)v55 == (_DWORD)v40 && HIDWORD(v55) == HIDWORD(v40);
          v56 = v55;
        }
        while (!v60);
      }
      if (v32 >> 4 >= 0x271)
      {
        v35 = v27 + v29 + v27 * HIDWORD(v29);
        v36 = (v35 / v27);
        v37 = (v35 % v27);
        if ((v37 & 0x80000000) != 0)
        {
          v37 = (v37 + v27);
          v36 = (v36 - 1);
        }
        v29 = v37 | (v36 << 32);
        goto LABEL_25;
      }
      v61 = (v27 + v29);
      if (v27 + (int)v29 < 0)
      {
        v62 = v34 + ((v33 + v29) & ~((v33 + (int)v29) >> 31));
        if (v62 == (_DWORD)v29)
          v63 = 1;
        else
          v63 = 2;
        v64 = v63 + (v62 - (v62 != (_DWORD)v29) - v29) / v27;
        if (v64 < 8)
          goto LABEL_147;
        LODWORD(v61) = v61 + (v64 & 0xFFFFFFF8) * v27;
        v65 = 0uLL;
        v66 = (int32x4_t)v38;
        v67 = v64 & 0xFFFFFFF8;
        do
        {
          v66 = vaddq_s32(v66, v25);
          v65 = vaddq_s32(v65, v25);
          v67 -= 8;
        }
        while (v67);
        v38 = vaddvq_s32(vaddq_s32(v65, v66));
        if (v64 != (v64 & 0xFFFFFFF8))
        {
LABEL_147:
          do
          {
            LODWORD(v61) = v61 + v27;
            v38 = (v38 - 1);
          }
          while ((v61 & 0x80000000) != 0);
        }
        v29 = v61 | (v38 << 32);
        if ((int)v61 < v27)
          goto LABEL_25;
LABEL_71:
        v68 = HIDWORD(v29);
        do
        {
          v61 = (v61 - v27);
          v68 = (v68 + 1);
        }
        while ((int)v61 >= v27);
        v29 = v61 | (v68 << 32);
        goto LABEL_25;
      }
      v29 = v29 & 0xFFFFFFFF00000000 | v61;
      if ((int)v61 >= v27)
        goto LABEL_71;
LABEL_25:
      if (++v28 == 3)
        goto LABEL_14;
    }
    v48 = HIDWORD(v29);
    do
    {
LABEL_41:
      LODWORD(v39) = v39 + v27;
      v48 = (v48 - 1);
    }
    while ((v39 & 0x80000000) != 0);
    goto LABEL_42;
  }
LABEL_140:
  _V1.D[1] = v143.f64[1];
  _V21.D[1] = v144.f64[1];
  _V17.D[1] = v151.f64[1];
  _D20 = v152;
  _V19.D[1] = v153.f64[1];
  _V24.D[1] = v146.f64[1];
  v119 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v148, v143.f64[0]), v151, v143, 1), v153, v145);
  __asm { FMLA            D3, D20, V1.D[1] }
  _Q2 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v148, v144.f64[0]), v151, v144, 1), v153, v147);
  v125 = _D3 + v154 * v145;
  __asm { FMLA            D5, D20, V21.D[1] }
  _Q4 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v148, v146.f64[0]), v151, v146, 1), v153, v150);
  v128 = vmlaq_n_f64(vmulq_n_f64(v119, v148.f64[0]), _Q2, v151.f64[0]);
  v129 = vmlaq_laneq_f64(vmulq_laneq_f64(v119, v148, 1), _Q2, v151, 1);
  v130 = vmlaq_n_f64(vmulq_n_f64(v119, v149), _Q2, v152);
  _Q2.f64[0] = _D5 + v154 * v147;
  __asm { FMLA            D7, D20, V24.D[1] }
  v132 = (int8x16_t)vmlaq_n_f64(v128, _Q4, v153.f64[0]);
  v133 = (int8x16_t)vmlaq_laneq_f64(v129, _Q4, v153, 1);
  v134 = (int8x16_t)vmlaq_n_f64(v130, _Q4, v154);
  _Q4.f64[0] = _D7 + v154 * v150;
  __asm
  {
    FMLA            D16, D2, V17.D[1]
    FMLA            D16, D4, V19.D[1]
  }
  v137 = *((unsigned int *)a3 + 4);
  v138 = *a3 + 8 * (v155 + v155 * v137);
  *(double *)(v138 + 16) = vmlad_n_f64(vmlad_n_f64(v125 * v148.f64[0], _Q2.f64[0], v151.f64[0]), _Q4.f64[0], v153.f64[0]);
  v132.i64[1] = vextq_s8(v132, v132, 8uLL).u64[0];
  *(int8x16_t *)v138 = v132;
  v139 = (int8x16_t *)(v138 + 8 * v137);
  v139[1].i64[0] = _D16;
  v133.i64[1] = vextq_s8(v133, v133, 8uLL).u64[0];
  *v139 = v133;
  v140 = v138 + 16 * v137;
  *(double *)(v140 + 16) = v125 * v149 + _Q2.f64[0] * v152 + _Q4.f64[0] * v154;
  v134.i64[1] = vextq_s8(v134, v134, 8uLL).u64[0];
  *(int8x16_t *)v140 = v134;
  result = v159[0];
  if (v159[0])
    return MEMORY[0x212BC6368](v159[0], 0x1000C8000313F17);
  return result;
}

void sub_20FB6CA90(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_QWORD *)(v1 - 152))
    MEMORY[0x212BC6368](*(_QWORD *)(v1 - 152), 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FB6CAD4(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  int *v6;
  float64x2_t v7;
  int64x2_t v8;
  float64_t v9;
  __int128 v10;
  int64x2_t v11;
  int64x2_t v12;
  uint64_t v13;
  int8x16_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  unint64_t v21;
  int8x16_t *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  float64x2_t *v27;
  float64x2_t *v28;
  float64x2_t *v29;
  float64x2_t *v30;
  float64x2_t *v31;
  float64x2_t *v32;
  uint64_t *v33;
  uint64_t v34;
  size_t v35;
  unsigned int v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  size_t v41;
  uint64_t v42;
  int v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  size_t v47;
  uint64_t v48;
  uint64_t v49;
  size_t v50;
  uint64_t v51;
  char *v52;
  size_t v53;
  uint64_t v54;
  size_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  int8x16_t v114;
  int8x16_t v115;
  int8x16_t v116;
  int8x16_t v117;
  int8x16_t v118;
  int8x16_t v119;
  int8x16_t v120;
  int8x16_t v121;
  int8x16_t v122;
  int8x16_t v123;
  int8x16_t v124;
  int8x16_t v125;
  int8x16_t v126;
  int8x16_t v127;
  int8x16_t v128;
  int8x16_t v129;
  int8x16_t v130;
  int8x16_t v131;
  uint64_t v132;
  int8x16_t *v133;
  int8x16_t *v134;
  int8x16_t v135;
  int8x16_t v136;
  int8x16_t *v137;
  int8x16_t *v138;
  int8x16_t v139;
  int8x16_t *v140;
  int8x16_t *v141;
  char *v142;
  uint64_t v143;
  int v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  _BYTE *v151;
  char *v152;
  int64_t v153;
  unint64_t v154;
  char *v155;
  int v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _OWORD *v160;
  char *v161;
  uint64_t v162;
  __int128 v163;
  _DWORD *v164;
  _DWORD *v165;
  unsigned int v166;
  _QWORD *v167;
  uint64_t v168;
  __int128 v169;
  __int128 v170;
  uint64_t v171;
  _QWORD *v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  float64x2_t *v177;
  uint64_t v178;
  float64x2_t v179;
  float64x2_t *v180;
  uint64_t v181;
  float64x2_t v182;
  float64x2_t *v183;
  float64x2_t *v184;
  float64x2_t *v185;
  uint64_t v186;
  uint64_t *v187;
  float64x2_t v188;
  uint64_t v189;
  size_t v190;
  unsigned int v191;
  char *v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  size_t v196;
  uint64_t v197;
  unsigned int v198;
  unsigned int v199;
  unsigned int v200;
  unsigned int v201;
  size_t v202;
  uint64_t v203;
  uint64_t v204;
  size_t v205;
  uint64_t v206;
  char *v207;
  size_t v208;
  uint64_t v209;
  size_t v210;
  float64x2_t v213;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v227;
  float64x2_t v228;
  float64x2_t v231;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v244;
  float64x2_t v245;
  float64x2_t v246;
  float64x2_t v247;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v254;
  float64x2_t v256;
  float64x2_t v258;
  float64x2_t v263;
  float64x2_t v264;
  float64x2_t v265;
  float64x2_t v270;
  float64x2_t v271;
  float64x2_t v280;
  float64x2_t v284;
  float64x2_t v288;
  float64x2_t v289;
  float64x2_t v299;
  float64x2_t v300;
  float64x2_t v301;
  float64x2_t v302;
  float64x2_t v304;
  float64x2_t v305;
  float64x2_t v312;
  float64x2_t v313;
  float64x2_t v314;
  float64x2_t v316;
  float64x2_t v317;
  float64x2_t v320;
  float64x2_t v321;
  float64x2_t v322;
  float64x2_t v323;
  float64x2_t v331;
  float64x2_t v332;
  float64x2_t v334;
  float64x2_t v335;
  float64x2_t v336;
  float64x2_t v337;
  float64x2_t v343;
  int8x16_t v344;
  float64x2_t v345;
  float64x2_t v346;
  float64x2_t v348;
  float64x2_t v349;
  float64x2_t v351;
  float64x2_t v352;
  float64x2_t v353;
  float64x2_t v356;
  float64x2_t v358;
  float64x2_t v359;
  float64x2_t v360;
  float64x2_t v363;
  float64x2_t v364;
  float64x2_t v365;
  float64x2_t v366;
  float64x2_t v367;
  float64x2_t v368;
  float64x2_t v369;
  float64x2_t v371;
  float64x2_t v372;
  float64x2_t v373;
  float64x2_t v374;
  int8x16_t v375;
  float64x2_t v376;
  int8x16_t v377;
  int8x16_t v378;
  int8x16_t v379;
  int8x16_t v380;
  int8x16_t v381;
  int8x16_t v382;
  int8x16_t v383;
  int8x16_t v384;
  int8x16_t v385;
  int8x16_t v386;
  float64x2_t v387;
  int8x16_t v388;
  int8x16_t v389;
  int8x16_t v390;
  int8x16_t v391;
  int8x16_t v392;
  int8x16_t v393;
  int8x16_t v394;
  int8x16_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  int8x16_t v401;
  int8x16_t v402;
  uint64_t v403;
  int8x16_t v404;
  int8x16_t v405;
  int8x16_t v406;
  int8x16_t v407;
  uint64_t v408;
  int8x16_t v409;
  int8x16_t v410;
  int8x16_t v411;
  int8x16_t v412;
  int8x16_t v413;
  uint64_t v414;
  int8x16_t v415;
  int8x16_t v416;
  int8x16_t v417;
  int8x16_t v418;
  int8x16_t v419;
  int8x16_t v420;
  uint64_t v421;
  int8x16_t v422;
  int8x16_t v423;
  int8x16_t v424;
  int8x16_t v425;
  uint64_t v426;
  int8x16_t v427;
  int8x16_t v428;
  _DWORD *v429;
  float64x2_t v432;
  float64x2_t v435;
  float64x2_t v439;
  int8x16_t v444;
  int8x16_t v446;
  int8x16_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  int8x16_t *v453;
  _DWORD *v454;
  char *v455;
  uint64_t v456;
  int v457;
  char *v458;
  char *v459;
  uint64_t v460;
  uint64_t v461;
  unint64_t v462;
  unint64_t v463;
  _BYTE *v464;
  char *v465;
  int64_t v466;
  unint64_t v467;
  char *v468;
  int v469;
  unint64_t v470;
  uint64_t v471;
  uint64_t v472;
  _OWORD *v473;
  char *v474;
  uint64_t v475;
  __int128 v476;
  _DWORD *v477;
  _DWORD *v478;
  unsigned int v479;
  uint64_t v480;
  uint64_t v481;
  __int128 v482;
  uint64_t v483;
  uint64_t v484;
  char *v485;
  uint64_t v486;
  float64x2_t *v487;
  float64x2_t *v488;
  uint64_t v489;
  size_t v490;
  unsigned int v491;
  char *v492;
  uint64_t v493;
  char *v494;
  uint64_t v495;
  size_t v496;
  uint64_t v497;
  unsigned int v498;
  unsigned int v499;
  unsigned int v500;
  unsigned int v501;
  size_t v502;
  uint64_t v503;
  uint64_t v504;
  size_t v505;
  uint64_t v506;
  char *v507;
  size_t v508;
  uint64_t v509;
  size_t v510;
  float64x2_t v511;
  float64x2_t v512;
  float64x2_t v513;
  float64x2_t v514;
  float64x2_t v515;
  float64x2_t v516;
  float64x2_t v517;
  float64x2_t v518;
  float64x2_t v519;
  float64x2_t v520;
  float64x2_t v521;
  float64x2_t v522;
  float64x2_t v523;
  float64x2_t v524;
  float64x2_t v525;
  float64x2_t v526;
  float64x2_t v527;
  float64x2_t v528;
  float64x2_t v529;
  float64x2_t v530;
  float64x2_t v531;
  double v532;
  float64x2_t v533;
  float64x2_t v534;
  double v535;
  float64x2_t v536;
  float64x2_t v537;
  float64x2_t v538;
  float64x2_t v539;
  float64x2_t v540;
  double v541;
  float64x2_t v542;
  float64x2_t v543;
  double v544;
  float64x2_t v545;
  float64x2_t v546;
  double v547;
  float64x2_t v548;
  float64x2_t v549;
  float64x2_t v550;
  float64x2_t v551;
  float64x2_t v552;
  float64x2_t v553;
  float64x2_t v554;
  float64x2_t v555;
  float64x2_t v556;
  float64x2_t v557;
  float64x2_t v558;
  float64x2_t v559;
  float64x2_t v560;
  float64x2_t v561;
  float64x2_t v562;
  float64x2_t v563;
  float64x2_t v564;
  float64x2_t v565;
  float64x2_t v566;
  float64x2_t v567;
  float64x2_t v568;
  float64x2_t v569;
  float64x2_t v570;
  double v571;
  double v572;
  double v573;
  double v574;
  double v575;
  double v576;
  double v577;
  double v578;
  float64x2_t v579;
  float64x2_t v580;
  float64x2_t v581;
  float64x2_t v582;
  float64x2_t v583;
  float64x2_t v584;
  float64x2_t v585;
  float64x2_t v586;
  float64x2_t v587;
  float64x2_t v588;
  float64x2_t v589;
  float64x2_t v590;
  float64x2_t v591;
  float64x2_t v592;
  float64x2_t v593;
  float64x2_t v594;
  float64x2_t v595;
  float64x2_t v596;
  double v597;
  double v598;
  float64x2_t v599;
  float64x2_t v600;
  float64x2_t v601;
  float64x2_t v602;
  float64x2_t v603;
  float64x2_t v604;
  float64x2_t v605;
  float64x2_t v606;
  float64x2_t v607;
  float64x2_t v608;
  float64x2_t v609;
  float64x2_t v610;
  float64x2_t v611;
  float64x2_t v612;
  float64x2_t v613;
  float64x2_t v614;
  float64x2_t v615;
  float64x2_t v616;
  float64x2_t v617;
  float64x2_t v618;
  double v619;
  float64x2_t v620;
  double v621;
  float64x2_t v622;
  float64x2_t v623;
  float64x2_t v624;
  double v625;
  float64x2_t v626;
  float64x2_t v627;
  double v628;
  float64x2_t v629;
  float64x2_t v630;
  float64x2_t v631;
  double v632;
  double v633;
  double v634;
  float64x2_t v635;
  float64x2_t v636;
  float64x2_t v637;
  float64x2_t v638;
  float64x2_t v639;
  float64x2_t v640;
  float64x2_t v641;
  float64x2_t v642;
  float64x2_t v643;
  float64x2_t v644;
  float64x2_t v645;
  float64x2_t v646;
  float64x2_t v647;
  float64x2_t v648;
  float64x2_t v649;
  float64x2_t v650;
  float64x2_t v651;
  float64x2_t v652;
  float64x2_t v653;
  float64x2_t v654;
  float64x2_t v655;
  float64x2_t v656;
  float64x2_t v657;
  float64x2_t v658;
  float64x2_t v659;
  float64x2_t v660;
  float64x2_t v661;
  float64x2_t v662;
  float64x2_t v663;
  float64x2_t v664;
  float64x2_t v665;
  float64x2_t v666;
  float64x2_t v667;
  float64x2_t v668;
  float64x2_t v669;
  float64x2_t v670;
  double v671;
  float64x2_t v672;
  float64x2_t v673;
  float64x2_t v674;
  float64x2_t v675;
  float64x2_t v676;
  float64x2_t v677;
  float64x2_t v678;
  float64x2_t v679;
  float64x2_t v680;
  float64x2_t v681;
  float64x2_t v682;
  float64x2_t v683;
  float64x2_t v684;
  float64x2_t v685;
  float64x2_t v686;
  float64x2_t v687;
  float64x2_t v688;
  float64x2_t v689;
  float64x2_t v690;
  float64x2_t v691;
  float64x2_t v692;
  float64x2_t v693;
  float64x2_t v694;
  float64x2_t v695;
  float64x2_t v696;
  float64x2_t v697;
  float64x2_t v698;
  float64x2_t v699;
  float64x2_t v700;
  float64x2_t v701;
  float64x2_t v702;
  float64x2_t v703;
  uint64_t v704;
  float64x2_t v705;
  float64x2_t v706;
  float64x2_t v707;
  int v708;
  float64x2_t v709;
  float64x2_t v710;
  float64x2_t v711;
  float64x2_t v712;
  int8x16_t v713;
  float64x2_t v714;
  float64x2_t v715;
  float64x2_t v716;
  float64x2_t v717;
  float64x2_t v718;
  float64x2_t v719;
  float64x2_t v720;
  float64x2_t v721;
  float64x2_t v722;
  float64x2_t v723;
  float64x2_t v724;
  float64x2_t v725;
  float64x2_t v726;
  float64x2_t v727;
  float64x2_t v728;
  float64x2_t v729;
  float64x2_t v730;
  float64x2_t v731;
  float64x2_t v732;
  float64x2_t v733;
  float64x2_t v734;
  float64x2_t v735;
  float64x2_t v736;
  float64x2_t v737;
  float64x2_t v738;
  float64x2_t v739;
  float64x2_t v740;
  float64x2_t v741;
  float64x2_t v742;
  float64x2_t v743;
  float64x2_t v744;
  float64x2_t v745;
  float64x2_t v746;
  float64x2_t v747;
  float64x2_t v748;
  float64x2_t v749;
  float64x2_t v750;
  float64x2_t v751;
  float64x2_t v752;
  float64x2_t v753;
  float64x2_t v754;
  float64x2_t v755;
  float64x2_t v756;
  float64x2_t v757;
  float64x2_t v758;
  float64x2_t v759;
  float64x2_t v760;
  float64x2_t v761;
  float64x2_t v762;
  float64x2_t v763;
  float64x2_t v764;
  float64x2_t v765;
  float64x2_t v766;
  float64x2_t v767;
  float64x2_t v768;
  float64x2_t v769;
  float64x2_t v770;
  float64x2_t v771;
  int64x2_t v772;
  uint64_t v773;
  uint64_t v774;
  float64x2_t v775;
  float64x2_t v776;
  float64x2_t v777;
  float64x2_t v778;
  float64x2_t v779;
  float64x2_t v780;
  float64x2_t v781;
  float64x2_t v782;
  float64x2_t v783;
  float64x2_t v784;
  float64x2_t v785;
  float64x2_t v786;
  float64x2_t v787;
  float64x2_t v788;
  float64x2_t v789;
  double v790;
  float64x2_t v791;
  float64x2_t v792;
  float64x2_t v793;
  float64x2_t v794;
  float64x2_t v795;
  float64x2_t v796;
  float64x2_t v797;
  float64x2_t v798;
  float64x2_t v799;
  float64x2_t v800;
  float64x2_t v801;
  float64x2_t v802;
  float64x2_t v803;
  float64x2_t v804;
  float64x2_t v805;
  double v806;
  float64x2_t v807;
  float64x2_t v808;
  float64x2_t v809;
  float64x2_t v810;
  float64x2_t v811;
  float64x2_t v812;
  float64x2_t v813;
  float64x2_t v814;
  float64x2_t v815;
  float64x2_t v816;
  float64x2_t v817;
  float64x2_t v818;
  float64x2_t v819;
  float64x2_t v820;
  int8x16_t v821;
  double v822;
  float64x2_t v823;
  float64x2_t v824;
  float64x2_t v825;
  float64x2_t v826;
  float64x2_t v827;
  float64x2_t v828;
  float64x2_t v829;
  float64x2_t v830;
  float64x2_t v831;
  float64x2_t v832;
  float64x2_t v833;
  float64x2_t v834;
  float64x2_t v835;
  double v836;
  int8x16_t v837;
  float64x2_t v838;
  float64x2_t v839;
  unint64_t v840;
  float64x2_t v841;
  float64x2_t v842;
  float64x2_t v843;
  float64x2_t v844;
  float64x2_t v845;
  float64x2_t v846;
  _QWORD *v847;
  char **v848;
  uint64_t v849;
  float64x2_t v850;
  unint64_t v851;
  float64x2_t v852;
  float64x2_t v853;
  float64x2_t v854;
  float64x2_t v855;
  float64x2_t v856;
  float64x2_t v857;
  uint64_t *v858;
  int8x16_t v859;
  float64x2_t v860;
  float64x2_t v861;
  unint64_t v862;
  float64x2_t v863;
  float64x2_t v864;
  float64x2_t v865;
  float64x2_t v866;
  int v867;
  float64x2_t v868;
  uint64_t v869;
  float64x2_t v870;
  float64x2_t v871;
  unint64_t v872;
  float64x2_t v873;
  float64x2_t v874;
  float64x2_t v875;
  float64x2_t v876;
  unint64_t v877;
  double v878;
  int8x16_t v879;
  float64x2_t v880;
  float64x2_t v881;
  float64x2_t v882;
  float64x2_t v883;
  float64x2_t v884;
  float64x2_t v885;
  uint64_t v886;
  float64x2_t v887;
  __int128 v888;
  int8x16_t v889;
  float64x2_t v890;
  float64x2_t v891;
  float64x2_t v892;
  float64x2_t v893;
  float64x2_t v894;
  int8x16_t v895;
  double v896;
  float64x2_t v897;
  int8x16_t v898;
  double v899;
  float64x2_t v900;
  float64x2_t v901;
  float64x2_t v902;
  float64x2_t v903;
  _DWORD *v904;
  int64x2_t v905;
  int8x16_t v906;
  float64x2_t v907;
  float64x2_t v908;
  float64x2_t v909;
  float64x2_t v910;
  float64x2_t v911;
  float64x2_t v912;
  _DWORD *v913;
  int64x2_t v914;
  uint64_t v915;
  float64x2_t v916;
  double v917;
  float64x2_t v918;
  double v919;
  float64x2_t v920;
  double v921;
  float64x2_t v922;
  float64x2_t v923;
  float64x2_t v924;
  float64x2_t v925;
  double v926;
  float64x2_t v927;
  float64x2_t v928;
  float64x2_t v929;
  float64x2_t v930;
  double v931;
  float64x2_t v932;
  float64x2_t v933;
  float64x2_t v934;
  float64x2_t v935;
  double v936;
  float64x2_t v937;
  float64x2_t v938;
  float64x2_t v939;
  float64x2_t v940;
  double v941;
  float64x2_t v942;
  float64x2_t v943;
  float64x2_t v944;
  float64x2_t v945;
  double v946;
  float64x2_t v947;
  float64x2_t v948;
  float64x2_t v949;
  float64x2_t v950;
  double v951;
  float64x2_t v952;
  float64x2_t v953;
  float64x2_t v954;
  float64x2_t v955;
  double v956;
  float64x2_t v957;
  float64x2_t v958;
  float64x2_t v959;
  float64x2_t v960;
  double v961;
  float64x2_t v962;
  float64x2_t v963;
  float64x2_t v964;
  float64x2_t v965;
  uint64_t v966;
  _BYTE v967[112];
  _BYTE v968[176];
  int v969;
  float64x2_t *v970;
  void *v971;
  size_t v972;
  uint64_t v973;
  __int128 __src;
  __int128 v975;
  __int128 v976;
  __int128 v977;
  __int128 v978;
  int8x16_t v979;
  __int128 v980;
  __int128 v981;
  __int128 v982;
  __int128 v983;
  __int128 v984;
  __int128 v985;
  __int128 v986;
  __int128 v987;
  __int128 v988;
  __int128 v989;
  __int128 v990;
  __int128 v991;
  __int128 v992;
  __int128 v993;
  uint64_t v994;

  result = MEMORY[0x24BDAC7A8](a1);
  v994 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(result + 5200) == *(_QWORD *)(result + 5192))
    return result;
  v3 = v2;
  v4 = result;
  result = sub_20FB59E1C(result + 5184);
  if ((_DWORD)result != 1)
    return result;
  v5 = *(int **)(v4 + 5192);
  v774 = v4;
  v6 = *(int **)(v4 + 5288);
  v969 = *v5;
  v708 = *v6;
  if (v969 != *v6
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 3177, (uint64_t)"pose_variable_id == vel_and_bias_variable_id", 44, (uint64_t)"First pose ID different", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v7.f64[0] = *(float64_t *)(v3 + 16);
  v8 = *(int64x2_t *)(v3 + 24);
  v9 = *(double *)(v3 + 64);
  v10 = *(_OWORD *)(v3 + 48);
  v11 = vzip1q_s64(*(int64x2_t *)v3, v8);
  v12 = vzip2q_s64(*(int64x2_t *)v3, v8);
  v7.f64[1] = *(float64_t *)(v3 + 40);
  v917 = *(double *)(v3 + 48);
  v916 = (float64x2_t)v11;
  v905 = v11;
  v919 = *((double *)&v10 + 1);
  v918 = (float64x2_t)v12;
  v914 = v12;
  v921 = v9;
  v920 = v7;
  v897 = v7;
  memset(&v967[8], 0, 104);
  memset(&v968[8], 0, 48);
  memset(&v968[72], 0, 32);
  memset(&v968[120], 0, 32);
  *(_QWORD *)v967 = 0x3FF0000000000000;
  *(_QWORD *)&v967[56] = 0x3FF0000000000000;
  *(_QWORD *)v968 = 0x3FF0000000000000;
  *(int64x2_t *)&v968[56] = v11;
  v888 = v10;
  *(_QWORD *)&v968[120] = *((_QWORD *)&v10 + 1);
  *(int64x2_t *)&v968[104] = v12;
  *(float64x2_t *)&v968[152] = v7;
  *(_QWORD *)&v968[72] = v10;
  *(float64_t *)&v968[168] = v9;
  bzero(&v922.f64[1], 0x278uLL);
  v938.f64[1] = 1.0;
  v944.f64[0] = 1.0;
  v949.f64[1] = 1.0;
  v955.f64[0] = 1.0;
  v960.f64[1] = 1.0;
  *(double *)&v966 = 1.0;
  v922 = (float64x2_t)v905;
  v928.f64[0] = *((float64_t *)&v888 + 1);
  v927 = (float64x2_t)v914;
  v932 = v897;
  *(_QWORD *)&v923.f64[0] = v888;
  v933.f64[0] = v9;
  v13 = *((_QWORD *)v5 + 1);
  LODWORD(__src) = 3;
  *((_QWORD *)&__src + 1) = v13 + 32;
  LODWORD(v975) = 0;
  *(_QWORD *)&v980 = 0;
  v979 = 0uLL;
  sub_20F053450((unsigned int *)&__src, (double *)v979.i64);
  v869 = v980;
  v859 = v979;
  v849 = *(_QWORD *)(v13 + 120);
  v837 = *(int8x16_t *)(v13 + 104);
  v14 = (int8x16_t *)*((_QWORD *)v6 + 1);
  v704 = v14[6].i64[0];
  v906 = v14[5];
  v898 = v14[4];
  v889 = v14[3];
  v879 = v14[2];
  v915 = v774 + 40560;
  v15 = sub_20FB4F9D4(&v969, v774 + 40560, dword_2103B9910);
  v16 = v774;
  v17 = v774 + 42304;
  v848 = (char **)(v774 + 42304);
  if ((v15 & 0x8000000000000000) != 0)
    goto LABEL_32;
  v18 = v859;
  v19.i64[0] = vextq_s8(v837, v837, 8uLL).u64[0];
  v20.i64[0] = v869;
  v20.i64[1] = v837.i64[0];
  v19.i64[1] = v849;
  v18.i64[1] = vextq_s8(v18, v18, 8uLL).u64[0];
  v21 = HIDWORD(v15);
  v22 = (int8x16_t *)(*(_QWORD *)(v774 + 25232) + 8 * HIDWORD(v15));
  v22[1] = v20;
  v22[2] = v19;
  *v22 = v18;
  v23 = (_QWORD *)(v774 + 25360);
  sub_20FA5A44C((_QWORD *)(v774 + 25360), (void **)v17);
  sub_20F20B6B0(v17);
  v24 = *(unsigned int *)(v774 + 42320);
  v25 = *(unsigned int *)(v774 + 42324);
  v26 = *(char **)v17;
  v27 = (float64x2_t *)(*(_QWORD *)v17 + 8 * (v21 + v21 * v24));
  v664 = v27[2];
  v714 = v27[1];
  v652 = *v27;
  v28 = (float64x2_t *)((char *)v27 + 8 * v24);
  v667 = v28[2];
  v721 = v28[1];
  v654 = *v28;
  v29 = &v27[v24];
  v685 = v29[2];
  v670 = v29[1];
  v659 = *v29;
  v30 = (float64x2_t *)((char *)v27 + 24 * v24);
  v690 = v30[2];
  v672 = v30[1];
  v870 = *v30;
  v31 = &v27[2 * v24];
  v695 = v31[2];
  v676 = v31[1];
  v860 = *v31;
  v32 = (float64x2_t *)((char *)v27 + 40 * v24);
  v700 = v32[2];
  v680 = v32[1];
  v662 = *v32;
  v753 = *(float64x2_t *)&v967[16];
  v850 = *(float64x2_t *)v967;
  v799 = *(float64x2_t *)&v967[80];
  v759 = *(float64x2_t *)&v967[64];
  v791 = *(float64x2_t *)&v967[32];
  v838 = *(float64x2_t *)&v967[48];
  v765 = *(float64x2_t *)v968;
  v728 = *(float64x2_t *)&v967[96];
  v823 = *(float64x2_t *)&v968[64];
  v772 = *(int64x2_t *)&v968[48];
  v807 = *(float64x2_t *)&v968[16];
  v735 = *(float64x2_t *)&v968[32];
  v783 = *(float64x2_t *)&v968[96];
  v747 = *(float64x2_t *)&v968[80];
  v33 = (uint64_t *)(v774 + 42376);
  v970 = (float64x2_t *)v967;
  LODWORD(__src) = 6;
  *(_QWORD *)((char *)&__src + 4) = __PAIR64__(v24, v25);
  *(_QWORD *)&v975 = &v26[8 * v21];
  DWORD2(v975) = v21;
  v830 = *(float64x2_t *)&v968[160];
  v775 = *(float64x2_t *)&v968[144];
  v815 = *(float64x2_t *)&v968[112];
  v740 = *(float64x2_t *)&v968[128];
  if (*(_DWORD *)(v774 + 42392) != 6 || (_DWORD)v25 != *(_DWORD *)(v774 + 42396))
  {
    v34 = *v33;
    if (v26 == (char *)*v33)
    {
      v53 = (8 * (6 * v25) + 31) & 0xFFFFFFFE0;
      v972 = v53 >> 3;
      v971 = operator new(v53, (std::align_val_t)0x20uLL);
      LODWORD(v973) = 6;
      HIDWORD(v973) = v25;
      v979.i64[1] = (uint64_t)&v970;
      *(_QWORD *)&v980 = &__src;
      *((_QWORD *)&v980 + 1) = 0x3FF0000000000000;
      sub_20FB70B10((uint64_t)&v971, (uint64_t)&v979);
      v54 = *(_QWORD *)(v774 + 42376);
      v55 = v972;
      *(_QWORD *)(v774 + 42376) = v971;
      *(_QWORD *)(v774 + 42384) = v55;
      *(_QWORD *)(v774 + 42392) = v973;
      if (v54)
        MEMORY[0x212BC6368](v54, 0x1000C8000313F17);
      goto LABEL_14;
    }
    *(_DWORD *)(v774 + 42392) = 6;
    *(_DWORD *)(v774 + 42396) = v25;
    if (*(_QWORD *)(v774 + 42384) < (unint64_t)(6 * v25))
    {
      if (v34)
        MEMORY[0x212BC6368](v34, 0x1000C8000313F17);
      v35 = (48 * v25 + 31) & 0x7FFFFFFFE0;
      *(_QWORD *)(v774 + 42376) = 0;
      *(_QWORD *)(v774 + 42384) = v35 >> 3;
      *(_QWORD *)(v774 + 42376) = operator new(v35, (std::align_val_t)0x20uLL);
    }
  }
  v979.i64[1] = (uint64_t)&v970;
  *(_QWORD *)&v980 = &__src;
  *((_QWORD *)&v980 + 1) = 0x3FF0000000000000;
  sub_20FB70B10(v774 + 42376, (uint64_t)&v979);
LABEL_14:
  v36 = *(_DWORD *)(v774 + 42320);
  v37 = *(char **)v17;
  v38 = *(unsigned int *)(v774 + 42392);
  v39 = *(char **)(v774 + 42376);
  if ((_DWORD)v38)
  {
    v40 = *(unsigned int *)(v774 + 42396);
    if ((_DWORD)v40)
    {
      v41 = 8 * v38;
      v42 = 8 * (int)v38;
      v43 = v21;
      do
      {
        memmove(&v37[8 * v43], v39, v41);
        v43 += v36;
        v39 += v42;
        --v40;
      }
      while (v40);
      v17 = v774 + 42304;
      v36 = *(_DWORD *)(v774 + 42320);
      v37 = *v848;
      v39 = *(char **)(v774 + 42376);
    }
  }
  v44 = v36 * v21;
  v979.i64[0] = v36 | 0x600000000;
  v979.i32[2] = v36;
  *(_QWORD *)&v980 = &v37[8 * v36 * v21];
  DWORD2(v980) = v36 * v21;
  if (v39 == v37)
  {
    v46 = *(_DWORD *)(v17 + 88);
    v45 = *(_DWORD *)(v17 + 92);
    v47 = (8 * v46 * v45 + 31) & 0xFFFFFFFE0;
    *((_QWORD *)&__src + 1) = v47 >> 3;
    *(_QWORD *)&__src = operator new(v47, (std::align_val_t)0x20uLL);
    *(_QWORD *)&v975 = __PAIR64__(v46, v45);
    sub_20F2B8274((unint64_t)&__src, v33);
    if ((_DWORD)v975)
    {
      v48 = DWORD1(v975);
      v49 = __src;
      if (DWORD1(v975))
      {
        v50 = 8 * v975;
        v51 = 8 * (int)v975;
        v52 = (char *)__src;
        do
        {
          memmove(&v39[8 * v44], v52, v50);
          v44 += v36;
          v52 += v51;
          --v48;
        }
        while (v48);
        v17 = v774 + 42304;
      }
    }
    else
    {
      v49 = __src;
    }
    if (v49)
      MEMORY[0x212BC6368](v49, 0x1000C8000313F17);
  }
  else
  {
    sub_20FB70C74((uint64_t)&v979, v33);
  }
  v56 = (float64x2_t)vzip1q_s64((int64x2_t)v850, (int64x2_t)v838);
  v57 = (float64x2_t)vzip2q_s64((int64x2_t)v850, (int64x2_t)v838);
  v58 = vmlaq_laneq_f64(vmulq_n_f64(v56, v652.f64[0]), v57, v652, 1);
  *(_QWORD *)&v59.f64[0] = vdupq_laneq_s64((int64x2_t)v728, 1).u64[0];
  v59.f64[1] = v735.f64[1];
  v60 = (float64x2_t)vzip1q_s64((int64x2_t)v728, (int64x2_t)v735);
  *(_QWORD *)&v61.f64[0] = vdupq_laneq_s64((int64x2_t)v747, 1).u64[0];
  v62 = vmlaq_laneq_f64(vmulq_n_f64(v60, v652.f64[0]), v59, v652, 1);
  v61.f64[1] = v740.f64[1];
  v63 = (float64x2_t)vzip1q_s64((int64x2_t)v747, (int64x2_t)v740);
  v64 = vmlaq_laneq_f64(vmulq_n_f64(v56, v654.f64[0]), v57, v654, 1);
  v65 = vmlaq_laneq_f64(vmulq_n_f64(v60, v654.f64[0]), v59, v654, 1);
  v66 = vmlaq_laneq_f64(vmulq_n_f64(v56, v659.f64[0]), v57, v659, 1);
  v67 = vmlaq_laneq_f64(vmulq_n_f64(v60, v659.f64[0]), v59, v659, 1);
  v68 = vmlaq_laneq_f64(vmulq_n_f64(v63, v659.f64[0]), v61, v659, 1);
  v660 = vmlaq_laneq_f64(vmulq_n_f64(v56, v870.f64[0]), v57, v870, 1);
  v69 = vmlaq_laneq_f64(vmulq_n_f64(v60, v870.f64[0]), v59, v870, 1);
  v70 = vmlaq_laneq_f64(vmulq_n_f64(v63, v870.f64[0]), v61, v870, 1);
  v871 = vmlaq_laneq_f64(vmulq_n_f64(v56, v860.f64[0]), v57, v860, 1);
  v71 = vmlaq_laneq_f64(vmulq_n_f64(v60, v860.f64[0]), v59, v860, 1);
  v72 = vmlaq_laneq_f64(vmulq_n_f64(v63, v860.f64[0]), v61, v860, 1);
  v861 = vmlaq_laneq_f64(vmulq_n_f64(v56, v662.f64[0]), v57, v662, 1);
  v73 = vmlaq_laneq_f64(vmulq_n_f64(v60, v662.f64[0]), v59, v662, 1);
  v74 = vmlaq_laneq_f64(vmulq_n_f64(v63, v662.f64[0]), v61, v662, 1);
  *(_QWORD *)&v57.f64[0] = vdupq_laneq_s64((int64x2_t)v765, 1).u64[0];
  *(_QWORD *)&v57.f64[1] = v772.i64[1];
  *(_QWORD *)&v59.f64[0] = vdupq_laneq_s64((int64x2_t)v783, 1).u64[0];
  v59.f64[1] = v775.f64[1];
  v75 = (float64x2_t)vzip1q_s64((int64x2_t)v753, (int64x2_t)v759);
  v76 = (float64x2_t)vzip1q_s64((int64x2_t)v765, v772);
  v77 = (float64x2_t)vzip1q_s64((int64x2_t)v783, (int64x2_t)v775);
  v78 = (float64x2_t)vzip2q_s64((int64x2_t)v753, (int64x2_t)v759);
  v79 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v63, v652.f64[0]), v61, v652, 1), v77, v714.f64[0]), v59, v714, 1);
  v80 = vmlaq_laneq_f64(vmlaq_n_f64(v64, v75, v721.f64[0]), v78, v721, 1);
  v81 = vmlaq_laneq_f64(vmlaq_n_f64(v65, v76, v721.f64[0]), v57, v721, 1);
  v82 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v63, v654.f64[0]), v61, v654, 1), v77, v721.f64[0]), v59, v721, 1);
  *(_QWORD *)&v61.f64[0] = vdupq_laneq_s64((int64x2_t)v807, 1).u64[0];
  v61.f64[1] = v823.f64[1];
  *(_QWORD *)&v60.f64[0] = vdupq_laneq_s64((int64x2_t)v815, 1).u64[0];
  v60.f64[1] = v830.f64[1];
  v83 = (float64x2_t)vzip1q_s64((int64x2_t)v791, (int64x2_t)v799);
  v84 = (float64x2_t)vzip1q_s64((int64x2_t)v807, (int64x2_t)v823);
  v722 = (float64x2_t)vzip1q_s64((int64x2_t)v815, (int64x2_t)v830);
  v663 = (float64x2_t)vzip2q_s64((int64x2_t)v791, (int64x2_t)v799);
  v85 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v58, v75, v714.f64[0]), v78, v714, 1), v83, v664.f64[0]), v663, v664, 1);
  v86 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v62, v76, v714.f64[0]), v57, v714, 1), v84, v664.f64[0]), v61, v664, 1);
  v715 = v60;
  v87 = vmlaq_laneq_f64(vmlaq_n_f64(v79, v722, v664.f64[0]), v60, v664, 1);
  v88 = vmlaq_laneq_f64(vmlaq_n_f64(v80, v83, v667.f64[0]), v663, v667, 1);
  v89 = vmlaq_laneq_f64(vmlaq_n_f64(v81, v84, v667.f64[0]), v61, v667, 1);
  v90 = v61;
  v91 = vmlaq_laneq_f64(vmlaq_n_f64(v82, v722, v667.f64[0]), v60, v667, 1);
  v92 = vmlaq_laneq_f64(vmulq_n_f64(v85, v850.f64[0]), v88, v850, 1);
  v93 = vmlaq_laneq_f64(vmulq_n_f64(v86, v850.f64[0]), v89, v850, 1);
  v94 = vmlaq_laneq_f64(vmulq_n_f64(v87, v850.f64[0]), v91, v850, 1);
  v653 = vmlaq_laneq_f64(vmulq_n_f64(v85, v838.f64[0]), v88, v838, 1);
  v665 = vmlaq_laneq_f64(vmulq_n_f64(v86, v838.f64[0]), v89, v838, 1);
  v668 = vmlaq_laneq_f64(vmulq_n_f64(v87, v838.f64[0]), v91, v838, 1);
  v646 = vmlaq_laneq_f64(vmulq_n_f64(v85, v728.f64[0]), v88, v728, 1);
  v839 = vmlaq_laneq_f64(vmulq_n_f64(v86, v728.f64[0]), v89, v728, 1);
  v729 = vmlaq_laneq_f64(vmulq_n_f64(v87, v728.f64[0]), v91, v728, 1);
  v645 = vmlaq_laneq_f64(vmulq_n_f64(v85, v735.f64[0]), v88, v735, 1);
  v641 = vmlaq_laneq_f64(vmulq_n_f64(v86, v735.f64[0]), v89, v735, 1);
  v643 = vmlaq_laneq_f64(vmulq_n_f64(v87, v735.f64[0]), v91, v735, 1);
  v95 = vmlaq_laneq_f64(vmulq_n_f64(v85, v747.f64[0]), v88, v747, 1);
  v736 = vmlaq_laneq_f64(vmulq_n_f64(v86, v747.f64[0]), v89, v747, 1);
  v748 = vmlaq_laneq_f64(vmulq_n_f64(v87, v747.f64[0]), v91, v747, 1);
  v96 = vmlaq_laneq_f64(vmulq_n_f64(v85, v740.f64[0]), v88, v740, 1);
  v97 = vmlaq_laneq_f64(vmulq_n_f64(v86, v740.f64[0]), v89, v740, 1);
  v98 = vmlaq_laneq_f64(vmulq_n_f64(v87, v740.f64[0]), v91, v740, 1);
  v99 = vmlaq_laneq_f64(vmlaq_n_f64(v71, v76, v676.f64[0]), v57, v676, 1);
  v100 = vmlaq_laneq_f64(vmlaq_n_f64(v73, v76, v680.f64[0]), v57, v680, 1);
  v101 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v66, v75, v670.f64[0]), v78, v670, 1), v83, v685.f64[0]), v663, v685, 1);
  v655 = v90;
  v102 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v67, v76, v670.f64[0]), v57, v670, 1), v84, v685.f64[0]), v90, v685, 1);
  v103 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v68, v77, v670.f64[0]), v59, v670, 1), v722, v685.f64[0]), v715, v685, 1);
  v104 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v660, v75, v672.f64[0]), v78, v672, 1), v83, v690.f64[0]), v663, v690, 1);
  v105 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v69, v76, v672.f64[0]), v57, v672, 1), v84, v690.f64[0]), v90, v690, 1);
  v106 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v70, v77, v672.f64[0]), v59, v672, 1), v722, v690.f64[0]), v715, v690, 1);
  v741 = vmlaq_n_f64(v95, v101, v783.f64[0]);
  v107 = vmlaq_n_f64(v97, v102, v775.f64[0]);
  v108 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v871, v75, v676.f64[0]), v78, v676, 1), v83, v695.f64[0]), v663, v695, 1);
  v109 = vmlaq_laneq_f64(vmlaq_n_f64(v99, v84, v695.f64[0]), v90, v695, 1);
  v110 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v72, v77, v676.f64[0]), v59, v676, 1), v722, v695.f64[0]), v715, v695, 1);
  v111 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v861, v75, v680.f64[0]), v78, v680, 1), v83, v700.f64[0]), v663, v700, 1);
  v112 = vmlaq_laneq_f64(vmlaq_n_f64(v100, v84, v700.f64[0]), v655, v700, 1);
  v113 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v74, v77, v680.f64[0]), v59, v680, 1), v722, v700.f64[0]), v715, v700, 1);
  v114 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v92, v101, v753.f64[0]), v104, v753, 1), v108, v791.f64[0]), v111, v791, 1);
  v115 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v93, v102, v753.f64[0]), v105, v753, 1), v109, v791.f64[0]), v112, v791, 1);
  v116 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v94, v103, v753.f64[0]), v106, v753, 1), v110, v791.f64[0]), v113, v791, 1);
  v117 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v653, v101, v759.f64[0]), v104, v759, 1), v108, v799.f64[0]), v111, v799, 1);
  v118 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v665, v102, v759.f64[0]), v105, v759, 1), v109, v799.f64[0]), v112, v799, 1);
  v119 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v668, v103, v759.f64[0]), v106, v759, 1), v110, v799.f64[0]), v113, v799, 1);
  v120 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v646, v101, v765.f64[0]), v104, v765, 1), v108, v807.f64[0]), v111, v807, 1);
  v121 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v839, v102, v765.f64[0]), v105, v765, 1), v109, v807.f64[0]), v112, v807, 1);
  v122 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v729, v103, v765.f64[0]), v106, v765, 1), v110, v807.f64[0]), v113, v807, 1);
  v123 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v645, v101, *(double *)v772.i64), v104, (float64x2_t)v772, 1), v108, v823.f64[0]), v111, v823, 1);
  v124 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v641, v102, *(double *)v772.i64), v105, (float64x2_t)v772, 1), v109, v823.f64[0]), v112, v823, 1);
  v125 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v643, v103, *(double *)v772.i64), v106, (float64x2_t)v772, 1), v110, v823.f64[0]), v113, v823, 1);
  v126 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v741, v104, v783, 1), v108, v815.f64[0]), v111, v815, 1);
  v127 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v736, v102, v783.f64[0]), v105, v783, 1), v109, v815.f64[0]), v112, v815, 1);
  v128 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v748, v103, v783.f64[0]), v106, v783, 1), v110, v815.f64[0]), v113, v815, 1);
  v129 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v96, v101, v775.f64[0]), v104, v775, 1), v108, v830.f64[0]), v111, v830, 1);
  v130 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v107, v105, v775, 1), v109, v830.f64[0]), v112, v830, 1);
  v131 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v98, v103, v775.f64[0]), v106, v775, 1), v110, v830.f64[0]), v113, v830, 1);
  v115.i64[1] = vextq_s8(v115, v115, 8uLL).u64[0];
  v114.i64[1] = vextq_s8(v114, v114, 8uLL).u64[0];
  v132 = *(unsigned int *)(v17 + 16);
  v133 = (int8x16_t *)(*(_QWORD *)v17 + 8 * (v21 + v21 * v132));
  *v133 = v114;
  v133[1] = v115;
  v114.i64[0] = v116.i64[0];
  v114.i64[1] = vextq_s8(v116, v116, 8uLL).u64[0];
  v119.i64[1] = vextq_s8(v119, v119, 8uLL).u64[0];
  v133[2] = v114;
  v134 = (int8x16_t *)((char *)v133 + 8 * v132);
  v114.i64[0] = v118.i64[0];
  v114.i64[1] = vextq_s8(v118, v118, 8uLL).u64[0];
  v135 = v114;
  v114.i64[0] = v117.i64[0];
  v114.i64[1] = vextq_s8(v117, v117, 8uLL).u64[0];
  v134[1] = v135;
  v134[2] = v119;
  *v134 = v114;
  v114.i64[0] = v122.i64[0];
  v114.i64[1] = vextq_s8(v122, v122, 8uLL).u64[0];
  v136 = v114;
  v114.i64[0] = v121.i64[0];
  v114.i64[1] = vextq_s8(v121, v121, 8uLL).u64[0];
  v137 = &v133[v132];
  v137[1] = v114;
  v137[2] = v136;
  v120.i64[1] = vextq_s8(v120, v120, 8uLL).u64[0];
  *v137 = v120;
  v125.i64[1] = vextq_s8(v125, v125, 8uLL).u64[0];
  v138 = (int8x16_t *)((char *)v133 + 24 * v132);
  v114.i64[0] = v124.i64[0];
  v114.i64[1] = vextq_s8(v124, v124, 8uLL).u64[0];
  v139 = v114;
  v114.i64[0] = v123.i64[0];
  v114.i64[1] = vextq_s8(v123, v123, 8uLL).u64[0];
  v138[1] = v139;
  v138[2] = v125;
  *v138 = v114;
  v128.i64[1] = vextq_s8(v128, v128, 8uLL).u64[0];
  v127.i64[1] = vextq_s8(v127, v127, 8uLL).u64[0];
  v114.i64[0] = v126.i64[0];
  v114.i64[1] = vextq_s8(v126, v126, 8uLL).u64[0];
  v140 = &v133[2 * v132];
  v140[1] = v127;
  v140[2] = v128;
  *v140 = v114;
  v131.i64[1] = vextq_s8(v131, v131, 8uLL).u64[0];
  v141 = (int8x16_t *)((char *)v133 + 40 * v132);
  v130.i64[1] = vextq_s8(v130, v130, 8uLL).u64[0];
  v114.i64[0] = v129.i64[0];
  v114.i64[1] = vextq_s8(v129, v129, 8uLL).u64[0];
  v141[1] = v130;
  v141[2] = v131;
  *v141 = v114;
  v982 = 0u;
  v983 = 0u;
  v980 = 0u;
  v981 = 0u;
  v978 = 0u;
  v979 = 0u;
  v976 = 0u;
  v977 = 0u;
  __src = 0u;
  v975 = 0u;
  LODWORD(v971) = 0;
  LODWORD(v970) = 0;
  sub_20FA51FC8(v23, (int *)&v971, &v970, &v979, &__src);
  sub_20FA52288((uint64_t)v23, (uint64_t *)v17, (unsigned int *)&v979, (unsigned int *)&__src);
  v16 = v774;
LABEL_32:
  v142 = 0;
  v143 = 0;
  v144 = 0;
  v145 = 0;
  v146 = 0;
  v992 = 0u;
  v993 = 0u;
  v990 = 0u;
  v991 = 0u;
  v773 = v16 + 40584;
  v988 = 0u;
  v989 = 0u;
  v872 = vextq_s8(v906, v906, 8uLL).u64[0];
  v862 = vextq_s8(v898, v898, 8uLL).u64[0];
  v851 = vextq_s8(v889, v889, 8uLL).u64[0];
  v840 = vextq_s8(v879, v879, 8uLL).u64[0];
  v986 = 0u;
  v987 = 0u;
  v984 = 0u;
  v985 = 0u;
  v982 = 0u;
  v983 = 0u;
  v980 = 0u;
  v981 = 0u;
  v979 = 0u;
  __src = 0uLL;
  *(_QWORD *)&v975 = 0;
  do
  {
    if (v142 < v145)
    {
      *(_DWORD *)v142 = v144;
      v147 = (uint64_t)(v142 + 4);
      goto LABEL_34;
    }
    v148 = (v142 - v146) >> 2;
    v149 = v148 + 1;
    if ((unint64_t)(v148 + 1) >> 62)
    {
      *(_QWORD *)&v975 = v145;
      *((_QWORD *)&__src + 1) = v142;
      *(_QWORD *)&__src = v146;
      sub_20E867F44();
    }
    if ((v145 - v146) >> 1 > v149)
      v149 = (v145 - v146) >> 1;
    if ((unint64_t)(v145 - v146) >= 0x7FFFFFFFFFFFFFFCLL)
      v150 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v150 = v149;
    if (v150)
    {
      if (v150 >> 62)
      {
        *(_QWORD *)&v975 = v145;
        *(_QWORD *)&__src = v146;
        sub_20E877A38();
      }
      v151 = operator new(4 * v150);
      v152 = &v151[4 * v148];
      *(_DWORD *)v152 = v144;
      v147 = (uint64_t)(v152 + 4);
      v153 = v142 - v146;
      if (v142 == v146)
        goto LABEL_50;
    }
    else
    {
      v151 = 0;
      v152 = (char *)(4 * v148);
      *(_DWORD *)(4 * v148) = v144;
      v147 = 4 * v148 + 4;
      v153 = v142 - v146;
      if (v142 == v146)
        goto LABEL_50;
    }
    v154 = v153 - 4;
    if (v154 >= 0xBC)
    {
      v157 = (v142 - 4 - v146) & 0xFFFFFFFFFFFFFFFCLL;
      if (&v151[v142 - v146 - 4 - v157] > &v151[v142 - v146 - 4])
      {
        v155 = v142;
      }
      else if (&v142[-v157 - 4] > v142 - 4)
      {
        v155 = v142;
      }
      else if ((unint64_t)(v146 - v151) >= 0x20)
      {
        v158 = (v154 >> 2) + 1;
        v159 = 4 * (v158 & 0x7FFFFFFFFFFFFFF8);
        v155 = &v142[-v159];
        v152 -= v159;
        v160 = &v151[4 * v148 - 16];
        v161 = v142 - 16;
        v162 = v158 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v163 = *(_OWORD *)v161;
          *(v160 - 1) = *((_OWORD *)v161 - 1);
          *v160 = v163;
          v160 -= 2;
          v161 -= 32;
          v162 -= 8;
        }
        while (v162);
        if (v158 == (v158 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_50;
      }
      else
      {
        v155 = v142;
      }
    }
    else
    {
      v155 = v142;
    }
    do
    {
      v156 = *((_DWORD *)v155 - 1);
      v155 -= 4;
      *((_DWORD *)v152 - 1) = v156;
      v152 -= 4;
    }
    while (v155 != v146);
LABEL_50:
    v145 = &v151[4 * v150];
    if (v146)
      operator delete(v146);
    v146 = v152;
LABEL_34:
    v144 += dword_2103B9910[v143] * ((*(_QWORD *)(v915 + 24 * v143 + 8) - *(_QWORD *)(v915 + 24 * v143)) >> 2);
    ++v143;
    v142 = (char *)v147;
  }
  while (v143 != 10);
  v164 = *(_DWORD **)v773;
  v165 = *(_DWORD **)(v773 + 8);
  if (*(_DWORD **)v773 == v165)
  {
    v166 = -1;
    v167 = (_QWORD *)v774;
    v168 = v774 + 42304;
    if (v146)
      goto LABEL_69;
  }
  else
  {
    v166 = *((_DWORD *)v146 + 1);
    v167 = (_QWORD *)v774;
    v168 = v774 + 42304;
    while (*v164 != v708)
    {
      v166 += 9;
      if (++v164 == v165)
      {
        v166 = -1;
        break;
      }
    }
    if (v146)
LABEL_69:
      operator delete(v146);
  }
  result = sub_20F89E908((uint64_t)&v979);
  if ((v166 & 0x80000000) == 0)
  {
    *(_QWORD *)&v169 = v879.i64[0];
    *((_QWORD *)&v169 + 1) = v840;
    *(_QWORD *)&v170 = v889.i64[0];
    *((_QWORD *)&v170 + 1) = v851;
    v171 = v167[3154] + 8 * v166;
    *(_OWORD *)v171 = v169;
    *(_OWORD *)(v171 + 16) = v170;
    *(_QWORD *)&v169 = v898.i64[0];
    *((_QWORD *)&v169 + 1) = v862;
    *(_QWORD *)(v171 + 64) = v704;
    *(_QWORD *)&v170 = v906.i64[0];
    *((_QWORD *)&v170 + 1) = v872;
    *(_OWORD *)(v171 + 32) = v169;
    *(_OWORD *)(v171 + 48) = v170;
    v172 = v167 + 3170;
    sub_20FA5A44C(v167 + 3170, (void **)v168);
    sub_20F20B6B0(v168);
    v173 = *(unsigned int *)(v168 + 16);
    v174 = *(unsigned int *)(v168 + 20);
    v175 = *(char **)v168;
    v176 = *(_QWORD *)v168 + 8 * (v166 + v166 * (_DWORD)v173);
    v899 = *(double *)(v176 + 64);
    v880 = *(float64x2_t *)(v176 + 48);
    v824 = *(float64x2_t *)(v176 + 32);
    v792 = *(float64x2_t *)(v176 + 16);
    v776 = *(float64x2_t *)v176;
    v177 = (float64x2_t *)(v176 + 8 * v173);
    v633 = v177[4].f64[0];
    v907 = v177[3];
    v852 = v177[2];
    v808 = v177[1];
    v784 = *v177;
    v178 = v176 + 16 * v173;
    v532 = *(double *)(v178 + 64);
    v530 = *(float64x2_t *)(v178 + 48);
    v179 = *(float64x2_t *)(v178 + 16);
    v526 = *(float64x2_t *)(v178 + 32);
    v800 = *(float64x2_t *)v178;
    v180 = (float64x2_t *)(v176 + 24 * v173);
    v535 = v180[4].f64[0];
    v533 = v180[3];
    v528 = v180[2];
    v523 = v179;
    v524 = v180[1];
    v816 = *v180;
    v181 = v176 + 32 * v173;
    v541 = *(double *)(v181 + 64);
    v182 = *(float64x2_t *)(v181 + 32);
    v539 = *(float64x2_t *)(v181 + 48);
    v525 = *(float64x2_t *)(v181 + 16);
    v841 = *(float64x2_t *)v181;
    v183 = (float64x2_t *)(v176 + 40 * v173);
    v544 = v183[4].f64[0];
    v542 = v183[3];
    v536 = v182;
    v537 = v183[2];
    v527 = v183[1];
    v863 = *v183;
    v184 = (float64x2_t *)(v176 + 48 * v173);
    v547 = v184[4].f64[0];
    v185 = (float64x2_t *)(v176 + 56 * v173);
    v186 = v176 + (v173 << 6);
    v970 = &v922;
    v187 = (uint64_t *)(v168 + 72);
    v538 = v184[2];
    v529 = v184[1];
    v873 = *v184;
    v597 = v185[4].f64[0];
    v545 = v184[3];
    v546 = v185[3];
    v540 = v185[2];
    v531 = v185[1];
    v890 = *v185;
    v578 = *(double *)(v186 + 64);
    v188 = *(float64x2_t *)(v186 + 48);
    v543 = *(float64x2_t *)(v186 + 32);
    v534 = *(float64x2_t *)(v186 + 16);
    v522 = *(float64x2_t *)v186;
    LODWORD(__src) = 9;
    *(_QWORD *)((char *)&__src + 4) = __PAIR64__(v173, v174);
    *(_QWORD *)&v975 = &v175[8 * v166];
    DWORD2(v975) = v166;
    v569 = v940;
    v570 = v188;
    v596 = v925;
    v591 = v924;
    v585 = v923;
    v631 = v922;
    v598 = v926;
    v577 = v931;
    v592 = v929;
    v586 = v928;
    v630 = v927;
    v567 = v935;
    v568 = v930;
    v593 = v934;
    v587 = v933;
    v629 = v932;
    v575 = v936;
    v576 = v941;
    v594 = v939;
    v556 = v938;
    v627 = v937;
    v574 = v946;
    v588 = v943;
    v626 = v942;
    v573 = v951;
    v565 = v950;
    v566 = v945;
    v559 = v944;
    v560 = v949;
    v589 = v948;
    v624 = v947;
    v572 = v956;
    v623 = v952;
    v571 = v961;
    v622 = v957;
    v563 = v960;
    v564 = v955;
    v561 = v954;
    v562 = v959;
    v590 = v958;
    v619 = *(double *)&v966;
    v618 = v965;
    v595 = v964;
    v557 = v953;
    v558 = v963;
    v620 = v962;
    if (*(_DWORD *)(v168 + 88) == 9 && (_DWORD)v174 == *(_DWORD *)(v168 + 92))
      goto LABEL_78;
    v189 = *v187;
    if (v175 == (char *)*v187)
    {
      v208 = (8 * (9 * v174) + 31) & 0xFFFFFFFE0;
      v972 = v208 >> 3;
      v971 = operator new(v208, (std::align_val_t)0x20uLL);
      LODWORD(v973) = 9;
      HIDWORD(v973) = v174;
      v979.i64[1] = (uint64_t)&v970;
      *(_QWORD *)&v980 = &__src;
      *((_QWORD *)&v980 + 1) = 0x3FF0000000000000;
      sub_20FB71440((uint64_t)&v971, (uint64_t)&v979);
      v209 = *(_QWORD *)(v168 + 72);
      v210 = v972;
      *(_QWORD *)(v168 + 72) = v971;
      *(_QWORD *)(v168 + 80) = v210;
      *(_QWORD *)(v168 + 88) = v973;
      if (v209)
        MEMORY[0x212BC6368](v209, 0x1000C8000313F17);
    }
    else
    {
      *(_DWORD *)(v168 + 88) = 9;
      *(_DWORD *)(v168 + 92) = v174;
      if (*(_QWORD *)(v168 + 80) < (unint64_t)(9 * v174))
      {
        if (v189)
          MEMORY[0x212BC6368](v189, 0x1000C8000313F17);
        v190 = (72 * v174 + 31) & 0xFFFFFFFFE0;
        *(_QWORD *)(v168 + 72) = 0;
        *(_QWORD *)(v168 + 80) = v190 >> 3;
        *(_QWORD *)(v168 + 72) = operator new(v190, (std::align_val_t)0x20uLL);
      }
LABEL_78:
      v979.i64[1] = (uint64_t)&v970;
      *(_QWORD *)&v980 = &__src;
      *((_QWORD *)&v980 + 1) = 0x3FF0000000000000;
      sub_20FB71440(v168 + 72, (uint64_t)&v979);
    }
    v191 = *(_DWORD *)(v168 + 16);
    v192 = *(char **)v168;
    v193 = *(unsigned int *)(v168 + 88);
    v194 = *(char **)(v168 + 72);
    if ((_DWORD)v193)
    {
      v195 = *(unsigned int *)(v168 + 92);
      if ((_DWORD)v195)
      {
        v196 = 8 * v193;
        v197 = 8 * (int)v193;
        v198 = v166;
        do
        {
          memmove(&v192[8 * v198], v194, v196);
          v198 += v191;
          v194 += v197;
          --v195;
        }
        while (v195);
        v168 = v774 + 42304;
        v191 = *(_DWORD *)(v774 + 42320);
        v192 = *v848;
        v194 = *(char **)(v774 + 42376);
      }
    }
    v199 = v191 * v166;
    v979.i64[0] = v191 | 0x900000000;
    v979.i32[2] = v191;
    *(_QWORD *)&v980 = &v192[8 * v191 * v166];
    DWORD2(v980) = v191 * v166;
    if (v194 == v192)
    {
      v201 = *(_DWORD *)(v168 + 88);
      v200 = *(_DWORD *)(v168 + 92);
      v202 = (8 * v201 * v200 + 31) & 0xFFFFFFFE0;
      *((_QWORD *)&__src + 1) = v202 >> 3;
      *(_QWORD *)&__src = operator new(v202, (std::align_val_t)0x20uLL);
      *(_QWORD *)&v975 = __PAIR64__(v201, v200);
      sub_20F2B8274((unint64_t)&__src, v187);
      if ((_DWORD)v975)
      {
        v203 = DWORD1(v975);
        v204 = __src;
        if (DWORD1(v975))
        {
          v205 = 8 * v975;
          v206 = 8 * (int)v975;
          v207 = (char *)__src;
          do
          {
            memmove(&v194[8 * v199], v207, v205);
            v199 += v191;
            v207 += v206;
            --v203;
          }
          while (v203);
          v168 = v774 + 42304;
        }
      }
      else
      {
        v204 = __src;
      }
      if (v204)
        MEMORY[0x212BC6368](v204, 0x1000C8000313F17);
    }
    else
    {
      sub_20FB70C74((uint64_t)&v979, v187);
    }
    _Q28 = (float64x2_t)vzip1q_s64((int64x2_t)v631, (int64x2_t)v630);
    _Q9 = (float64x2_t)vzip2q_s64((int64x2_t)v631, (int64x2_t)v630);
    *(_QWORD *)&v213.f64[0] = vdupq_laneq_s64((int64x2_t)v629, 1).u64[0];
    v213.f64[1] = v627.f64[1];
    _Q19 = (float64x2_t)vzip1q_s64((int64x2_t)v629, (int64x2_t)v627);
    v215 = vmlaq_laneq_f64(vmulq_n_f64(_Q19, v776.f64[0]), v213, v776, 1);
    v216 = v213;
    v766 = v213;
    *(_QWORD *)&v213.f64[0] = vdupq_laneq_s64((int64x2_t)v626, 1).u64[0];
    v213.f64[1] = v624.f64[1];
    v217 = (float64x2_t)vzip1q_s64((int64x2_t)v626, (int64x2_t)v624);
    v831 = v213;
    *(_QWORD *)&_Q30.f64[0] = vdupq_laneq_s64((int64x2_t)v623, 1).u64[0];
    _Q30.f64[1] = v622.f64[1];
    _Q31 = (float64x2_t)vzip1q_s64((int64x2_t)v623, (int64x2_t)v622);
    _V22.D[1] = v620.f64[1];
    _D1 = v776.f64[1];
    __asm { FMLA            D24, D1, V22.D[1] }
    v227 = vmlaq_laneq_f64(vmulq_n_f64(_Q19, v784.f64[0]), v216, v784, 1);
    v228 = vmlaq_laneq_f64(vmulq_n_f64(v217, v784.f64[0]), v213, v784, 1);
    _D4 = v784.f64[1];
    __asm { FMLA            D27, D4, V22.D[1] }
    v513 = (float64x2_t)vzip1q_s64((int64x2_t)v585, (int64x2_t)v586);
    v514 = (float64x2_t)vzip1q_s64((int64x2_t)v587, (int64x2_t)v556);
    v515 = (float64x2_t)vzip1q_s64((int64x2_t)v588, (int64x2_t)v589);
    *(_QWORD *)&v231.f64[0] = vdupq_laneq_s64((int64x2_t)v587, 1).u64[0];
    v231.f64[1] = v556.f64[1];
    _Q0 = (float64x2_t)vzip2q_s64((int64x2_t)v585, (int64x2_t)v586);
    v233 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q28, v776.f64[0]), _Q9, v776, 1), v513, v792.f64[0]), _Q0, v792, 1);
    v234 = _Q0;
    v516 = (float64x2_t)vzip1q_s64((int64x2_t)v557, (int64x2_t)v590);
    v517 = _Q0;
    *(_QWORD *)&_Q0.f64[0] = vdupq_laneq_s64((int64x2_t)v588, 1).u64[0];
    _Q0.f64[1] = v589.f64[1];
    v235 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v217, v776.f64[0]), v213, v776, 1), v515, v792.f64[0]), _Q0, v792, 1);
    v236 = _Q0;
    v518 = v231;
    v519 = _Q0;
    *(_QWORD *)&_Q0.f64[0] = vdupq_laneq_s64((int64x2_t)v557, 1).u64[0];
    _Q0.f64[1] = v590.f64[1];
    v237 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q31, v776.f64[0]), _Q30, v776, 1), v516, v792.f64[0]), _Q0, v792, 1);
    _Q17 = _Q0;
    v520 = _Q0;
    _Q0.f64[1] = v558.f64[1];
    _D4 = v792.f64[1];
    __asm { FMLA            D24, D4, V0.D[1] }
    _Q29 = vmlaq_laneq_f64(vmulq_n_f64(_Q28, v800.f64[0]), _Q9, v800, 1);
    v511 = vmlaq_laneq_f64(vmulq_n_f64(_Q19, v800.f64[0]), v766, v800, 1);
    v512 = vmlaq_laneq_f64(vmulq_n_f64(v217, v800.f64[0]), v831, v800, 1);
    v521 = vmlaq_laneq_f64(vmulq_n_f64(_Q31, v800.f64[0]), _Q30, v800, 1);
    _D4 = v800.f64[1];
    __asm { FMLA            D18, D4, V22.D[1] }
    v244 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q28, v784.f64[0]), _Q9, v784, 1), v513, v808.f64[0]), v234, v808, 1);
    v245 = vmlaq_laneq_f64(vmlaq_n_f64(v227, v514, v808.f64[0]), v231, v808, 1);
    v246 = vmlaq_laneq_f64(vmlaq_n_f64(v228, v515, v808.f64[0]), v236, v808, 1);
    v247 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q31, v784.f64[0]), _Q30, v784, 1), v516, v808.f64[0]), _Q17, v808, 1);
    _D4 = v808.f64[1];
    __asm { FMLA            D27, D4, V0.D[1] }
    v583 = vmlaq_laneq_f64(vmulq_n_f64(_Q28, v816.f64[0]), _Q9, v816, 1);
    v610 = vmlaq_laneq_f64(vmulq_n_f64(_Q19, v816.f64[0]), v766, v816, 1);
    v611 = vmlaq_laneq_f64(vmulq_n_f64(v217, v816.f64[0]), v831, v816, 1);
    v584 = vmlaq_laneq_f64(vmulq_n_f64(_Q31, v816.f64[0]), _Q30, v816, 1);
    _D21 = v816.f64[1];
    __asm { FMLA            D0, D21, V22.D[1] }
    v548 = (float64x2_t)vzip1q_s64((int64x2_t)v591, (int64x2_t)v592);
    v549 = (float64x2_t)vzip1q_s64((int64x2_t)v593, (int64x2_t)v594);
    v550 = (float64x2_t)vzip1q_s64((int64x2_t)v559, (int64x2_t)v560);
    v551 = (float64x2_t)vzip1q_s64((int64x2_t)v561, (int64x2_t)v562);
    v251 = (float64x2_t)vzip2q_s64((int64x2_t)v591, (int64x2_t)v592);
    v252 = vmlaq_laneq_f64(vmlaq_n_f64(v233, v548, v824.f64[0]), v251, v824, 1);
    _Q2 = v251;
    v552 = v251;
    *(_QWORD *)&v251.f64[0] = vdupq_laneq_s64((int64x2_t)v593, 1).u64[0];
    v251.f64[1] = v594.f64[1];
    *(_QWORD *)&_Q0.f64[0] = vdupq_laneq_s64((int64x2_t)v559, 1).u64[0];
    _Q0.f64[1] = v560.f64[1];
    v254 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v215, v514, v792.f64[0]), v231, v792, 1), v549, v824.f64[0]), v251, v824, 1);
    _Q4 = v251;
    v553 = v251;
    v554 = _Q0;
    v256 = vmlaq_laneq_f64(vmlaq_n_f64(v235, v550, v824.f64[0]), _Q0, v824, 1);
    _Q1 = _Q0;
    *(_QWORD *)&_Q0.f64[0] = vdupq_laneq_s64((int64x2_t)v561, 1).u64[0];
    _Q0.f64[1] = v562.f64[1];
    v258 = vmlaq_laneq_f64(vmlaq_n_f64(v237, v551, v824.f64[0]), _Q0, v824, 1);
    _Q7 = _Q0;
    v555 = _Q0;
    _Q0.f64[1] = v595.f64[1];
    _D21 = v824.f64[1];
    __asm { FMLA            D24, D21, V0.D[1] }
    v579 = vmlaq_laneq_f64(vmulq_n_f64(_Q28, v841.f64[0]), _Q9, v841, 1);
    v580 = vmlaq_laneq_f64(vmulq_n_f64(_Q19, v841.f64[0]), v766, v841, 1);
    v581 = vmlaq_laneq_f64(vmulq_n_f64(_Q31, v841.f64[0]), _Q30, v841, 1);
    _D21 = v841.f64[1];
    __asm { FMLA            D17, D21, V22.D[1] }
    v263 = vmlaq_laneq_f64(vmlaq_n_f64(v244, v548, v852.f64[0]), _Q2, v852, 1);
    v264 = vmlaq_laneq_f64(vmlaq_n_f64(v245, v549, v852.f64[0]), _Q4, v852, 1);
    v265 = vmlaq_laneq_f64(vmlaq_n_f64(v246, v550, v852.f64[0]), _Q1, v852, 1);
    _D21 = v852.f64[1];
    __asm { FMLA            D27, D21, V0.D[1] }
    *(_QWORD *)&_Q0.f64[0] = vdupq_laneq_s64((int64x2_t)v567, 1).u64[0];
    _Q0.f64[1] = v569.f64[1];
    v617 = _Q0;
    v607 = vmlaq_laneq_f64(vmulq_n_f64(_Q28, v863.f64[0]), _Q9, v863, 1);
    v606 = vmlaq_laneq_f64(vmulq_n_f64(_Q19, v863.f64[0]), v766, v863, 1);
    v669 = vmlaq_laneq_f64(vmulq_n_f64(v217, v863.f64[0]), v831, v863, 1);
    v666 = vmlaq_laneq_f64(vmulq_n_f64(_Q31, v863.f64[0]), _Q30, v863, 1);
    _D10 = v863.f64[1];
    *(_QWORD *)&_Q23.f64[0] = vdupq_laneq_s64((int64x2_t)v566, 1).u64[0];
    __asm { FMLA            D4, D10, V22.D[1] }
    _Q23.f64[1] = v565.f64[1];
    v613 = (float64x2_t)vzip1q_s64((int64x2_t)v596, (int64x2_t)v568);
    v600 = (float64x2_t)vzip1q_s64((int64x2_t)v567, (int64x2_t)v569);
    v614 = (float64x2_t)vzip1q_s64((int64x2_t)v566, (int64x2_t)v565);
    v601 = (float64x2_t)vzip1q_s64((int64x2_t)v564, (int64x2_t)v563);
    v599 = (float64x2_t)vzip2q_s64((int64x2_t)v596, (int64x2_t)v568);
    v270 = vmlaq_laneq_f64(vmlaq_n_f64(v254, v600, v880.f64[0]), _Q0, v880, 1);
    *(_QWORD *)&_Q0.f64[0] = vdupq_laneq_s64((int64x2_t)v564, 1).u64[0];
    _Q0.f64[1] = v563.f64[1];
    v609 = _Q0;
    v602 = _Q23;
    v271 = vmlaq_laneq_f64(vmlaq_n_f64(v258, v601, v880.f64[0]), _Q0, v880, 1);
    _Q17.f64[1] = v618.f64[1];
    _D10 = v880.f64[1];
    __asm { FMLA            D24, D10, V17.D[1] }
    v603 = vmlaq_laneq_f64(vmulq_n_f64(_Q28, v873.f64[0]), _Q9, v873, 1);
    v604 = vmlaq_laneq_f64(vmulq_n_f64(_Q19, v873.f64[0]), v766, v873, 1);
    v605 = vmlaq_laneq_f64(vmulq_n_f64(v217, v873.f64[0]), v831, v873, 1);
    v661 = vmlaq_laneq_f64(vmulq_n_f64(_Q31, v873.f64[0]), _Q30, v873, 1);
    _D10 = v873.f64[1];
    __asm { FMLA            D0, D10, V22.D[1] }
    v642 = vmlaq_laneq_f64(vmulq_n_f64(_Q28, v890.f64[0]), _Q9, v890, 1);
    v644 = vmlaq_laneq_f64(vmulq_n_f64(_Q28, v522.f64[0]), _Q9, v522, 1);
    v639 = vmlaq_laneq_f64(vmulq_n_f64(_Q19, v890.f64[0]), v766, v890, 1);
    v637 = vmlaq_laneq_f64(vmulq_n_f64(_Q19, v522.f64[0]), v766, v522, 1);
    v636 = vmlaq_laneq_f64(vmulq_n_f64(v217, v890.f64[0]), v831, v890, 1);
    v635 = vmlaq_laneq_f64(vmulq_n_f64(v217, v522.f64[0]), v831, v522, 1);
    v651 = vmlaq_laneq_f64(vmulq_n_f64(_Q31, v890.f64[0]), _Q30, v890, 1);
    v650 = vmlaq_laneq_f64(vmulq_n_f64(_Q31, v522.f64[0]), _Q30, v522, 1);
    _Q1.f64[0] = v575;
    _Q1.f64[1] = v576;
    _Q4 = _Q1;
    v608 = _Q1;
    _Q2.f64[0] = v574;
    _Q2.f64[1] = v573;
    v616 = _Q2;
    _Q1.f64[0] = v572;
    _Q1.f64[1] = v571;
    v615 = _Q1;
    _Q19.f64[0] = v598;
    _Q19.f64[1] = v577;
    _Q3 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v252, v613, v880.f64[0]), v599, v880, 1), _Q19, v899);
    v612 = _Q19;
    _Q14 = vmlaq_n_f64(v270, _Q4, v899);
    _Q13 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v256, v614, v880.f64[0]), _Q23, v880, 1), _Q2, v899);
    _Q12 = vmlaq_n_f64(v271, _Q1, v899);
    v280 = vmlaq_laneq_f64(vmlaq_n_f64(v265, v614, v907.f64[0]), _Q23, v907, 1);
    _Q30.f64[0] = v907.f64[1];
    __asm { FMLA            D27, D30, V17.D[1] }
    _Q30.f64[0] = v890.f64[1];
    __asm { FMLA            D0, D30, V22.D[1] }
    _Q5 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v263, v613, v907.f64[0]), v599, v907, 1), _Q19, v633);
    _Q30.f64[1] = v631.f64[1];
    _V8.D[1] = v629.f64[1];
    _Q31.f64[1] = v630.f64[1];
    _Q28.f64[1] = v623.f64[1];
    v284 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v264, v600, v907.f64[0]), v617, v907, 1), v608, v633);
    v709 = vmlaq_laneq_f64(vmulq_n_f64(_Q14, v631.f64[0]), v284, v631, 1);
    v777 = vmlaq_laneq_f64(vmulq_n_f64(_Q14, v630.f64[0]), v284, v630, 1);
    v785 = vmlaq_laneq_f64(vmulq_n_f64(_Q14, v629.f64[0]), v284, v629, 1);
    v673 = vmlaq_laneq_f64(vmulq_n_f64(_Q14, v627.f64[0]), v284, v627, 1);
    v801 = vmlaq_laneq_f64(vmulq_n_f64(_Q14, v626.f64[0]), v284, v626, 1);
    v809 = vmlaq_laneq_f64(vmulq_n_f64(_Q14, v624.f64[0]), v284, v624, 1);
    v742 = vmlaq_laneq_f64(vmulq_n_f64(_Q14, v623.f64[0]), v284, v623, 1);
    _Q23.f64[1] = v622.f64[1];
    v767 = vmlaq_laneq_f64(vmulq_n_f64(_Q14, v622.f64[0]), v284, v622, 1);
    v793 = vmlaq_laneq_f64(vmulq_n_f64(_Q14, v620.f64[0]), v284, v620, 1);
    _Q16 = vmlaq_n_f64(v280, _Q2, v633);
    _V27.D[1] = v627.f64[1];
    _V26.D[1] = v626.f64[1];
    _Q19.f64[1] = v624.f64[1];
    v288 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v247, v551, v852.f64[0]), _Q7, v852, 1), v601, v907.f64[0]), v609, v907, 1), _Q1, v633);
    v656 = vmlaq_laneq_f64(vmulq_n_f64(_Q12, v631.f64[0]), v288, v631, 1);
    v705 = vmlaq_laneq_f64(vmulq_n_f64(_Q12, v630.f64[0]), v288, v630, 1);
    v686 = vmlaq_laneq_f64(vmulq_n_f64(_Q12, v629.f64[0]), v288, v629, 1);
    v691 = vmlaq_laneq_f64(vmulq_n_f64(_Q12, v627.f64[0]), v288, v627, 1);
    v749 = vmlaq_laneq_f64(vmulq_n_f64(_Q12, v626.f64[0]), v288, v626, 1);
    v696 = vmlaq_laneq_f64(vmulq_n_f64(_Q12, v624.f64[0]), v288, v624, 1);
    v681 = vmlaq_laneq_f64(vmulq_n_f64(_Q12, v623.f64[0]), v288, v623, 1);
    v730 = vmlaq_laneq_f64(vmulq_n_f64(_Q12, v622.f64[0]), v288, v622, 1);
    v647 = vmlaq_laneq_f64(vmulq_n_f64(_Q12, v620.f64[0]), v288, v620, 1);
    _Q0.f64[0] = _D27 + v619 * v633;
    _Q1.f64[0] = v522.f64[1];
    __asm
    {
      FMLA            D7, D1, V22.D[1]
      FMLA            D1, D0, V30.D[1]
      FMLA            D1, D0, V31.D[1]
      FMLA            D1, D0, V8.D[1]
      FMLA            D1, D0, V27.D[1]
      FMLA            D1, D0, V26.D[1]
      FMLA            D1, D0, V19.D[1]
      FMLA            D1, D0, V28.D[1]
      FMLA            D1, D0, V23.D[1]
      FMLA            D1, D0, V22.D[1]
    }
    v289 = vmlaq_laneq_f64(vmlaq_n_f64(_Q29, v513, v523.f64[0]), v517, v523, 1);
    _V25.D[1] = v558.f64[1];
    _Q0.f64[0] = v523.f64[1];
    __asm { FMLA            D29, D0, V25.D[1] }
    _Q0.f64[0] = v524.f64[1];
    __asm { FMLA            D1, D0, V25.D[1] }
    _Q9.f64[1] = v595.f64[1];
    _Q0.f64[0] = v526.f64[1];
    __asm { FMLA            D29, D0, V9.D[1] }
    v582 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v217, v841.f64[0]), v831, v841, 1), v515, v525.f64[0]), v519, v525, 1);
    _Q0.f64[0] = v525.f64[1];
    __asm { FMLA            D7, D0, V25.D[1] }
    _Q0.f64[0] = v528.f64[1];
    __asm { FMLA            D8, D0, V9.D[1] }
    _Q0.f64[0] = v527.f64[1];
    __asm { FMLA            D1, D0, V25.D[1] }
    _Q31.f64[1] = v558.f64[1];
    _V21.D[1] = v618.f64[1];
    _Q0.f64[0] = v530.f64[1];
    __asm { FMLA            D29, D0, V21.D[1] }
    _Q0.f64[0] = v529.f64[1];
    __asm { FMLA            D4, D0, V31.D[1] }
    _Q1 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v289, v548, v526.f64[0]), v552, v526, 1), v613, v530.f64[0]), v599, v530, 1), v612, v532);
    _Q25 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q3, v631.f64[0]), _Q5, v631, 1), _Q1, v585.f64[0]);
    _Q6 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q3, v630.f64[0]), _Q5, v630, 1), _Q1, v586.f64[0]);
    v842 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q3, v629.f64[0]), _Q5, v629, 1), _Q1, v587.f64[0]);
    v853 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q3, v627.f64[0]), _Q5, v627, 1), _Q1, v556.f64[0]);
    _Q10 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q3, v626.f64[0]), _Q5, v626, 1), _Q1, v588.f64[0]);
    _Q22 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q3, v624.f64[0]), _Q5, v624, 1), _Q1, v589.f64[0]);
    _Q4 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q3, v623.f64[0]), _Q5, v623, 1), _Q1, v557.f64[0]);
    v874 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q3, v622.f64[0]), _Q5, v622, 1), _Q1, v590.f64[0]);
    v881 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q3, v620.f64[0]), _Q5, v620, 1), _Q1, v558.f64[0]);
    v299 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v511, v514, v523.f64[0]), v518, v523, 1), v549, v526.f64[0]), v553, v526, 1), v600, v530.f64[0]), v617, v530, 1), v608, v532);
    v710 = vmlaq_n_f64(v709, v299, v585.f64[0]);
    v778 = vmlaq_n_f64(v777, v299, v586.f64[0]);
    v786 = vmlaq_n_f64(v785, v299, v587.f64[0]);
    v300 = vmlaq_n_f64(v673, v299, v556.f64[0]);
    v301 = vmlaq_n_f64(v801, v299, v588.f64[0]);
    v302 = vmlaq_n_f64(v809, v299, v589.f64[0]);
    _Q7 = vmlaq_n_f64(v742, v299, v557.f64[0]);
    v768 = vmlaq_n_f64(v767, v299, v590.f64[0]);
    v304 = vmlaq_n_f64(v793, v299, v558.f64[0]);
    v305 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v512, v515, v523.f64[0]), v519, v523, 1), v550, v526.f64[0]), v554, v526, 1), v614, v530.f64[0]), v602, v530, 1), _Q2, v532);
    v832 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q13, v631.f64[0]), _Q16, v631, 1), v305, v585.f64[0]);
    v677 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q13, v630.f64[0]), _Q16, v630, 1), v305, v586.f64[0]);
    v701 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q13, v629.f64[0]), _Q16, v629, 1), v305, v587.f64[0]);
    v891 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q13, v627.f64[0]), _Q16, v627, 1), v305, v556.f64[0]);
    v754 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q13, v626.f64[0]), _Q16, v626, 1), v305, v588.f64[0]);
    v760 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q13, v624.f64[0]), _Q16, v624, 1), v305, v589.f64[0]);
    v900 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q13, v623.f64[0]), _Q16, v623, 1), v305, v557.f64[0]);
    _Q20 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q13, v622.f64[0]), _Q16, v622, 1), v305, v590.f64[0]);
    v908 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q13, v620.f64[0]), _Q16, v620, 1), v305, v558.f64[0]);
    _Q19 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v521, v516, v523.f64[0]), v520, v523, 1), v551, v526.f64[0]), v555, v526, 1), v601, v530.f64[0]), v609, v530, 1), v615, v532);
    _Q13.f64[1] = v556.f64[1];
    _V18.D[1] = v557.f64[1];
    _Q14.f64[1] = v558.f64[1];
    _V8.D[1] = v618.f64[1];
    _Q0.f64[0] = v533.f64[1];
    __asm { FMLA            D1, D0, V8.D[1] }
    v671 = _Q1.f64[0];
    _Q0.f64[0] = v531.f64[1];
    __asm { FMLA            D8, D0, V14.D[1] }
    _Q8 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v583, v513, v524.f64[0]), v517, v524, 1), v548, v528.f64[0]), v552, v528, 1), v613, v533.f64[0]), v599, v533, 1), v612, v535);
    _Q3.f64[1] = v585.f64[1];
    v817 = vmlaq_laneq_f64(_Q25, _Q8, v585, 1);
    _Q31.f64[1] = v586.f64[1];
    v716 = vmlaq_laneq_f64(_Q6, _Q8, v586, 1);
    _Q25.f64[1] = v587.f64[1];
    v843 = vmlaq_laneq_f64(v842, _Q8, v587, 1);
    v854 = vmlaq_laneq_f64(v853, _Q8, v556, 1);
    _Q12.f64[1] = v588.f64[1];
    v825 = vmlaq_laneq_f64(_Q10, _Q8, v588, 1);
    _Q9.f64[1] = v589.f64[1];
    v723 = vmlaq_laneq_f64(_Q22, _Q8, v589, 1);
    v864 = vmlaq_laneq_f64(_Q4, _Q8, v557, 1);
    _Q10.f64[1] = v590.f64[1];
    v875 = vmlaq_laneq_f64(v874, _Q8, v590, 1);
    v882 = vmlaq_laneq_f64(v881, _Q8, v558, 1);
    v312 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v610, v514, v524.f64[0]), v518, v524, 1), v549, v528.f64[0]), v553, v528, 1), v600, v533.f64[0]), v617, v533, 1), v608, v535);
    v711 = vmlaq_laneq_f64(v710, v312, v585, 1);
    v779 = vmlaq_laneq_f64(v778, v312, v586, 1);
    v787 = vmlaq_laneq_f64(v786, v312, v587, 1);
    v313 = vmlaq_laneq_f64(v300, v312, v556, 1);
    v802 = vmlaq_laneq_f64(v301, v312, v588, 1);
    v810 = vmlaq_laneq_f64(v302, v312, v589, 1);
    v743 = vmlaq_laneq_f64(_Q7, v312, v557, 1);
    v769 = vmlaq_laneq_f64(v768, v312, v590, 1);
    v794 = vmlaq_laneq_f64(v304, v312, v558, 1);
    v314 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v611, v515, v524.f64[0]), v519, v524, 1), v550, v528.f64[0]), v554, v528, 1), v614, v533.f64[0]), v602, v533, 1), _Q2, v535);
    v833 = vmlaq_laneq_f64(v832, v314, v585, 1);
    v678 = vmlaq_laneq_f64(v677, v314, v586, 1);
    v702 = vmlaq_laneq_f64(v701, v314, v587, 1);
    v892 = vmlaq_laneq_f64(v891, v314, v556, 1);
    v755 = vmlaq_laneq_f64(v754, v314, v588, 1);
    v761 = vmlaq_laneq_f64(v760, v314, v589, 1);
    v901 = vmlaq_laneq_f64(v900, v314, v557, 1);
    v737 = vmlaq_laneq_f64(_Q20, v314, v590, 1);
    v909 = vmlaq_laneq_f64(v908, v314, v558, 1);
    _Q1 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v584, v516, v524.f64[0]), v520, v524, 1), v551, v528.f64[0]), v555, v528, 1), v601, v533.f64[0]), v609, v533, 1), v615, v535);
    v657 = vmlaq_laneq_f64(vmlaq_n_f64(v656, _Q19, v585.f64[0]), _Q1, v585, 1);
    v706 = vmlaq_laneq_f64(vmlaq_n_f64(v705, _Q19, v586.f64[0]), _Q1, v586, 1);
    v687 = vmlaq_laneq_f64(vmlaq_n_f64(v686, _Q19, v587.f64[0]), _Q1, v587, 1);
    v692 = vmlaq_laneq_f64(vmlaq_n_f64(v691, _Q19, v556.f64[0]), _Q1, v556, 1);
    v750 = vmlaq_laneq_f64(vmlaq_n_f64(v749, _Q19, v588.f64[0]), _Q1, v588, 1);
    v697 = vmlaq_laneq_f64(vmlaq_n_f64(v696, _Q19, v589.f64[0]), _Q1, v589, 1);
    v682 = vmlaq_laneq_f64(vmlaq_n_f64(v681, _Q19, v557.f64[0]), _Q1, v557, 1);
    v731 = vmlaq_laneq_f64(vmlaq_n_f64(v730, _Q19, v590.f64[0]), _Q1, v590, 1);
    v648 = vmlaq_laneq_f64(vmlaq_n_f64(v647, _Q19, v558.f64[0]), _Q1, v558, 1);
    _Q0.f64[0] = v671 + v619 * v535;
    _Q2.f64[0] = v534.f64[1];
    __asm
    {
      FMLA            D1, D2, V14.D[1]
      FMLA            D1, D0, V3.D[1]
      FMLA            D2, D0, V31.D[1]
      FMLA            D5, D0, V25.D[1]
      FMLA            D6, D0, V13.D[1]
      FMLA            D7, D0, V12.D[1]
      FMLA            D17, D0, V9.D[1]
      FMLA            D19, D0, V18.D[1]
      FMLA            D20, D0, V10.D[1]
      FMLA            D16, D0, V14.D[1]
    }
    _Q5.f64[1] = v595.f64[1];
    _Q0.f64[0] = v536.f64[1];
    __asm { FMLA            D8, D0, V5.D[1] }
    _Q0.f64[0] = v537.f64[1];
    __asm { FMLA            D1, D0, V5.D[1] }
    _Q3.f64[1] = v618.f64[1];
    _Q0.f64[0] = v539.f64[1];
    __asm { FMLA            D8, D0, V3.D[1] }
    _Q0.f64[0] = v538.f64[1];
    __asm { FMLA            D4, D0, V5.D[1] }
    v316 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v579, v513, v525.f64[0]), v517, v525, 1), v548, v536.f64[0]), v552, v536, 1), v613, v539.f64[0]), v599, v539, 1), v612, v541);
    v818 = vmlaq_n_f64(v817, v316, v591.f64[0]);
    v717 = vmlaq_n_f64(v716, v316, v592.f64[0]);
    v317 = vmlaq_n_f64(v843, v316, v593.f64[0]);
    _Q25 = vmlaq_n_f64(v854, v316, v594.f64[0]);
    _V18.D[1] = v560.f64[1];
    v826 = vmlaq_n_f64(v825, v316, v559.f64[0]);
    v724 = vmlaq_n_f64(v723, v316, v560.f64[0]);
    _Q7.f64[1] = v562.f64[1];
    v320 = vmlaq_n_f64(v864, v316, v561.f64[0]);
    v321 = vmlaq_n_f64(v875, v316, v562.f64[0]);
    v322 = vmlaq_n_f64(v882, v316, v595.f64[0]);
    v323 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v580, v514, v525.f64[0]), v518, v525, 1), v549, v536.f64[0]), v553, v536, 1), v600, v539.f64[0]), v617, v539, 1), v608, v541);
    v712 = vmlaq_n_f64(v711, v323, v591.f64[0]);
    _Q12 = vmlaq_n_f64(v779, v323, v592.f64[0]);
    _Q28 = vmlaq_n_f64(v787, v323, v593.f64[0]);
    v674 = vmlaq_n_f64(v313, v323, v594.f64[0]);
    v803 = vmlaq_n_f64(v802, v323, v559.f64[0]);
    v811 = vmlaq_n_f64(v810, v323, v560.f64[0]);
    v744 = vmlaq_n_f64(v743, v323, v561.f64[0]);
    _Q19 = vmlaq_n_f64(v769, v323, v562.f64[0]);
    v795 = vmlaq_n_f64(v794, v323, v595.f64[0]);
    _Q20 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v582, v550, v536.f64[0]), v554, v536, 1), v614, v539.f64[0]), v602, v539, 1), v616, v541);
    _Q4 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v581, v516, v525.f64[0]), v520, v525, 1), v551, v536.f64[0]), v555, v536, 1), v601, v539.f64[0]), v609, v539, 1), v615, v541);
    _V24.D[1] = v618.f64[1];
    _Q0.f64[0] = v542.f64[1];
    __asm { FMLA            D2, D0, V24.D[1] }
    _Q0.f64[0] = v540.f64[1];
    __asm { FMLA            D24, D0, V5.D[1] }
    v331 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v607, v513, v527.f64[0]), v517, v527, 1), v548, v537.f64[0]), v552, v537, 1), v613, v542.f64[0]), v599, v542, 1), v612, v544);
    v819 = vmlaq_laneq_f64(v818, v331, v591, 1);
    v718 = vmlaq_laneq_f64(v717, v331, v592, 1);
    v844 = vmlaq_laneq_f64(v317, v331, v593, 1);
    v855 = vmlaq_laneq_f64(_Q25, v331, v594, 1);
    v827 = vmlaq_laneq_f64(v826, v331, v559, 1);
    v725 = vmlaq_laneq_f64(v724, v331, v560, 1);
    v865 = vmlaq_laneq_f64(v320, v331, v561, 1);
    v332 = vmlaq_laneq_f64(v321, v331, v562, 1);
    v883 = vmlaq_laneq_f64(v322, v331, v595, 1);
    _Q1 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v606, v514, v527.f64[0]), v518, v527, 1), v549, v537.f64[0]), v553, v537, 1), v600, v542.f64[0]), v617, v542, 1), v608, v544);
    v334 = vmlaq_laneq_f64(v712, _Q1, v591, 1);
    v780 = vmlaq_laneq_f64(_Q12, _Q1, v592, 1);
    _Q12.f64[1] = v593.f64[1];
    v788 = vmlaq_laneq_f64(_Q28, _Q1, v593, 1);
    v335 = vmlaq_laneq_f64(v674, _Q1, v594, 1);
    v804 = vmlaq_laneq_f64(v803, _Q1, v559, 1);
    v812 = vmlaq_laneq_f64(v811, _Q1, v560, 1);
    v745 = vmlaq_laneq_f64(v744, _Q1, v561, 1);
    v770 = vmlaq_laneq_f64(_Q19, _Q1, v562, 1);
    v796 = vmlaq_laneq_f64(v795, _Q1, v595, 1);
    v336 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v669, v515, v527.f64[0]), v519, v527, 1), v550, v537.f64[0]), v554, v537, 1), v614, v542.f64[0]), v602, v542, 1), v616, v544);
    v834 = vmlaq_laneq_f64(vmlaq_n_f64(v833, _Q20, v591.f64[0]), v336, v591, 1);
    v679 = vmlaq_laneq_f64(vmlaq_n_f64(v678, _Q20, v592.f64[0]), v336, v592, 1);
    v337 = vmlaq_laneq_f64(vmlaq_n_f64(v702, _Q20, v593.f64[0]), v336, v593, 1);
    v893 = vmlaq_laneq_f64(vmlaq_n_f64(v892, _Q20, v594.f64[0]), v336, v594, 1);
    v756 = vmlaq_laneq_f64(vmlaq_n_f64(v755, _Q20, v559.f64[0]), v336, v559, 1);
    v762 = vmlaq_laneq_f64(vmlaq_n_f64(v761, _Q20, v560.f64[0]), v336, v560, 1);
    v902 = vmlaq_laneq_f64(vmlaq_n_f64(v901, _Q20, v561.f64[0]), v336, v561, 1);
    v738 = vmlaq_laneq_f64(vmlaq_n_f64(v737, _Q20, v562.f64[0]), v336, v562, 1);
    v910 = vmlaq_laneq_f64(vmlaq_n_f64(v909, _Q20, v595.f64[0]), v336, v595, 1);
    _Q6 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v666, v516, v527.f64[0]), v520, v527, 1), v551, v537.f64[0]), v555, v537, 1), v601, v542.f64[0]), v609, v542, 1), v615, v544);
    _Q28.f64[1] = v591.f64[1];
    v658 = vmlaq_laneq_f64(vmlaq_n_f64(v657, _Q4, v591.f64[0]), _Q6, v591, 1);
    v707 = vmlaq_laneq_f64(vmlaq_n_f64(v706, _Q4, v592.f64[0]), _Q6, v592, 1);
    _Q22.f64[1] = v592.f64[1];
    _Q13 = vmlaq_laneq_f64(vmlaq_n_f64(v687, _Q4, v593.f64[0]), _Q6, v593, 1);
    v693 = vmlaq_laneq_f64(vmlaq_n_f64(v692, _Q4, v594.f64[0]), _Q6, v594, 1);
    _Q1.f64[1] = v594.f64[1];
    v751 = vmlaq_laneq_f64(vmlaq_n_f64(v750, _Q4, v559.f64[0]), _Q6, v559, 1);
    _Q19.f64[1] = v559.f64[1];
    v698 = vmlaq_laneq_f64(vmlaq_n_f64(v697, _Q4, v560.f64[0]), _Q6, v560, 1);
    v683 = vmlaq_laneq_f64(vmlaq_n_f64(v682, _Q4, v561.f64[0]), _Q6, v561, 1);
    _Q16.f64[1] = v561.f64[1];
    v732 = vmlaq_laneq_f64(vmlaq_n_f64(v731, _Q4, v562.f64[0]), _Q6, v562, 1);
    v649 = vmlaq_laneq_f64(vmlaq_n_f64(v648, _Q4, v595.f64[0]), _Q6, v595, 1);
    _Q0.f64[0] = _Q2.f64[0] + v619 * v544;
    _Q3.f64[1] = v595.f64[1];
    _Q2.f64[0] = v543.f64[1];
    __asm
    {
      FMLA            D4, D2, V5.D[1]
      FMLA            D2, D0, V28.D[1]
      FMLA            D4, D0, V22.D[1]
      FMLA            D5, D0, V12.D[1]
      FMLA            D6, D0, V1.D[1]
      FMLA            D17, D0, V19.D[1]
      FMLA            D21, D0, V18.D[1]
      FMLA            D23, D0, V16.D[1]
      FMLA            D25, D0, V7.D[1]
      FMLA            D24, D0, V3.D[1]
    }
    _V21.D[1] = v618.f64[1];
    _Q0.f64[0] = v545.f64[1];
    __asm { FMLA            D22, D0, V21.D[1] }
    v343 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v604, v514, v529.f64[0]), v518, v529, 1), v549, v538.f64[0]), v553, v538, 1), v600, v545.f64[0]), v617, v545, 1), v608, v547);
    v640 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v639, v514, v531.f64[0]), v518, v531, 1), v549, v540.f64[0]), v553, v540, 1), v600, v546.f64[0]), v617, v546, 1), v608, v597);
    v638 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v637, v514, v534.f64[0]), v518, v534, 1), v549, v543.f64[0]), v553, v543, 1), v600, v570.f64[0]), v617, v570, 1), v608, v578);
    v344 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v334, v343, v596.f64[0]), v640, v596, 1), v638, v598);
    v344.i64[1] = vextq_s8(v344, v344, 8uLL).u64[0];
    v713 = v344;
    v345 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v603, v513, v529.f64[0]), v517, v529, 1), v548, v538.f64[0]), v552, v538, 1), v613, v545.f64[0]), v599, v545, 1), v612, v547);
    v346 = vmlaq_n_f64(v819, v345, v596.f64[0]);
    _Q7.f64[1] = v567.f64[1];
    _V18.D[1] = v568.f64[1];
    v719 = vmlaq_n_f64(v718, v345, v568.f64[0]);
    v845 = vmlaq_n_f64(v844, v345, v567.f64[0]);
    _Q6.f64[1] = v569.f64[1];
    v856 = vmlaq_n_f64(v855, v345, v569.f64[0]);
    _Q17.f64[1] = v565.f64[1];
    _Q16.f64[1] = v566.f64[1];
    v348 = vmlaq_n_f64(v827, v345, v566.f64[0]);
    v726 = vmlaq_n_f64(v725, v345, v565.f64[0]);
    _Q20.f64[1] = v563.f64[1];
    _Q22.f64[1] = v564.f64[1];
    v349 = vmlaq_n_f64(v865, v345, v564.f64[0]);
    _Q27 = vmlaq_n_f64(v332, v345, v563.f64[0]);
    v351 = vmlaq_n_f64(v883, v345, v618.f64[0]);
    v781 = vmlaq_n_f64(v780, v343, v568.f64[0]);
    v789 = vmlaq_n_f64(v788, v343, v567.f64[0]);
    v675 = vmlaq_n_f64(v335, v343, v569.f64[0]);
    v352 = vmlaq_n_f64(v804, v343, v566.f64[0]);
    v353 = vmlaq_n_f64(v812, v343, v565.f64[0]);
    _Q19 = vmlaq_n_f64(v745, v343, v564.f64[0]);
    v771 = vmlaq_n_f64(v770, v343, v563.f64[0]);
    _Q2 = vmlaq_n_f64(v796, v343, v618.f64[0]);
    v356 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v605, v515, v529.f64[0]), v519, v529, 1), v550, v538.f64[0]), v554, v538, 1), v614, v545.f64[0]), v602, v545, 1), v616, v547);
    _Q30 = vmlaq_n_f64(v834, v356, v596.f64[0]);
    v358 = vmlaq_n_f64(v679, v356, v568.f64[0]);
    v359 = vmlaq_n_f64(v337, v356, v567.f64[0]);
    v360 = vmlaq_n_f64(v893, v356, v569.f64[0]);
    v757 = vmlaq_n_f64(v756, v356, v566.f64[0]);
    v763 = vmlaq_n_f64(v762, v356, v565.f64[0]);
    _Q31 = vmlaq_n_f64(v902, v356, v564.f64[0]);
    _Q8 = vmlaq_n_f64(v738, v356, v563.f64[0]);
    v911 = vmlaq_n_f64(v910, v356, v618.f64[0]);
    v363 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v661, v516, v529.f64[0]), v520, v529, 1), v551, v538.f64[0]), v555, v538, 1), v601, v545.f64[0]), v609, v545, 1), v615, v547);
    v688 = vmlaq_n_f64(_Q13, v363, v567.f64[0]);
    _Q1.f64[0] = v546.f64[1];
    __asm { FMLA            D13, D1, V21.D[1] }
    v364 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v642, v513, v531.f64[0]), v517, v531, 1), v548, v540.f64[0]), v552, v540, 1), v613, v546.f64[0]), v599, v546, 1), v612, v597);
    v820 = vmlaq_laneq_f64(v346, v364, v596, 1);
    v720 = vmlaq_laneq_f64(v719, v364, v568, 1);
    v846 = vmlaq_laneq_f64(v845, v364, v567, 1);
    v857 = vmlaq_laneq_f64(v856, v364, v569, 1);
    v828 = vmlaq_laneq_f64(v348, v364, v566, 1);
    v365 = vmlaq_laneq_f64(v726, v364, v565, 1);
    v866 = vmlaq_laneq_f64(v349, v364, v564, 1);
    v876 = vmlaq_laneq_f64(_Q27, v364, v563, 1);
    v884 = vmlaq_laneq_f64(v351, v364, v618, 1);
    v805 = vmlaq_laneq_f64(v352, v640, v566, 1);
    v746 = vmlaq_laneq_f64(_Q19, v640, v564, 1);
    v797 = vmlaq_laneq_f64(_Q2, v640, v618, 1);
    v366 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v636, v515, v531.f64[0]), v519, v531, 1), v550, v540.f64[0]), v554, v540, 1), v614, v546.f64[0]), v602, v546, 1), v616, v597);
    _Q27.f64[1] = v596.f64[1];
    v835 = vmlaq_laneq_f64(_Q30, v366, v596, 1);
    v367 = vmlaq_laneq_f64(v358, v366, v568, 1);
    v703 = vmlaq_laneq_f64(v359, v366, v567, 1);
    v894 = vmlaq_laneq_f64(v360, v366, v569, 1);
    v368 = vmlaq_laneq_f64(v757, v366, v566, 1);
    v369 = vmlaq_laneq_f64(v763, v366, v565, 1);
    v903 = vmlaq_laneq_f64(_Q31, v366, v564, 1);
    v739 = vmlaq_laneq_f64(_Q8, v366, v563, 1);
    v912 = vmlaq_laneq_f64(v911, v366, v618, 1);
    _Q1 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v651, v516, v531.f64[0]), v520, v531, 1), v551, v540.f64[0]), v555, v540, 1), v601, v546.f64[0]), v609, v546, 1), v615, v597);
    v371 = vmlaq_laneq_f64(vmlaq_n_f64(v658, v363, v596.f64[0]), _Q1, v596, 1);
    v372 = vmlaq_laneq_f64(vmlaq_n_f64(v707, v363, v568.f64[0]), _Q1, v568, 1);
    v689 = vmlaq_laneq_f64(v688, _Q1, v567, 1);
    v694 = vmlaq_laneq_f64(vmlaq_n_f64(v693, v363, v569.f64[0]), _Q1, v569, 1);
    v752 = vmlaq_laneq_f64(vmlaq_n_f64(v751, v363, v566.f64[0]), _Q1, v566, 1);
    v699 = vmlaq_laneq_f64(vmlaq_n_f64(v698, v363, v565.f64[0]), _Q1, v565, 1);
    v684 = vmlaq_laneq_f64(vmlaq_n_f64(v683, v363, v564.f64[0]), _Q1, v564, 1);
    v733 = vmlaq_laneq_f64(vmlaq_n_f64(v732, v363, v563.f64[0]), _Q1, v563, 1);
    v373 = vmlaq_laneq_f64(vmlaq_n_f64(v649, v363, v618.f64[0]), _Q1, v618, 1);
    _Q1.f64[0] = _Q13.f64[0] + v619 * v597;
    _Q2.f64[0] = v570.f64[1];
    __asm { FMLA            D3, D2, V21.D[1] }
    v634 = _Q3.f64[0];
    __asm { FMLA            D30, D1, V27.D[1] }
    v632 = _Q30.f64[0];
    __asm
    {
      FMLA            D25, D1, V18.D[1]
      FMLA            D4, D1, V7.D[1]
      FMLA            D5, D1, V6.D[1]
    }
    v628 = _Q5.f64[0];
    __asm
    {
      FMLA            D31, D1, V16.D[1]
      FMLA            D8, D1, V17.D[1]
    }
    v625 = _Q8.f64[0];
    __asm
    {
      FMLA            D19, D1, V22.D[1]
      FMLA            D2, D1, V20.D[1]
      FMLA            D3, D1, V21.D[1]
    }
    v621 = _Q3.f64[0];
    v374 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v644, v513, v534.f64[0]), v517, v534, 1), v548, v543.f64[0]), v552, v543, 1), v613, v570.f64[0]), v599, v570, 1), v612, v578);
    v375 = (int8x16_t)vmlaq_n_f64(v820, v374, v598);
    v375.i64[1] = vextq_s8(v375, v375, 8uLL).u64[0];
    v821 = v375;
    v376 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v635, v515, v534.f64[0]), v519, v534, 1), v550, v543.f64[0]), v554, v543, 1), v614, v570.f64[0]), v602, v570, 1), v616, v578);
    v377 = (int8x16_t)vmlaq_n_f64(v835, v376, v598);
    v377.i64[1] = vextq_s8(v377, v377, 8uLL).u64[0];
    v378 = v377;
    v379 = (int8x16_t)vmlaq_n_f64(v720, v374, v577);
    v380 = (int8x16_t)vmlaq_n_f64(v846, v374, v575);
    v381 = (int8x16_t)vmlaq_n_f64(v857, v374, v576);
    v727 = vmlaq_n_f64(v365, v374, v573);
    v885 = vmlaq_n_f64(v884, v374, v619);
    v382 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(v781, v640, v568, 1), v638, v577);
    v383 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(v789, v640, v567, 1), v638, v575);
    v384 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(v675, v640, v569, 1), v638, v576);
    v813 = vmlaq_n_f64(vmlaq_laneq_f64(v353, v640, v565, 1), v638, v573);
    v385 = (int8x16_t)vmlaq_n_f64(v367, v376, v577);
    v386 = (int8x16_t)vmlaq_n_f64(v703, v376, v575);
    v758 = vmlaq_n_f64(v368, v376, v574);
    v764 = vmlaq_n_f64(v369, v376, v573);
    v387 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v650, v516, v534.f64[0]), v520, v534, 1), v551, v543.f64[0]), v555, v543, 1), v601, v570.f64[0]), v609, v570, 1), v615, v578);
    v388 = (int8x16_t)vmlaq_n_f64(v371, v387, v598);
    v389 = (int8x16_t)vmlaq_n_f64(v372, v387, v577);
    v390 = (int8x16_t)vmlaq_n_f64(v689, v387, v575);
    v391 = (int8x16_t)vmlaq_n_f64(v694, v387, v576);
    v392 = (int8x16_t)vmlaq_n_f64(v752, v387, v574);
    v393 = (int8x16_t)vmlaq_n_f64(v699, v387, v573);
    v394 = (int8x16_t)vmlaq_n_f64(v684, v387, v572);
    v734 = vmlaq_n_f64(v733, v387, v571);
    v395 = (int8x16_t)vmlaq_n_f64(v373, v387, v619);
    v387.f64[0] = v634 + v619 * v578;
    v396 = *(unsigned int *)(v168 + 16);
    v397 = *(_QWORD *)v168 + 8 * (v166 + v166 * (_DWORD)v396);
    *(int8x16_t *)(v397 + 16) = v713;
    *(int8x16_t *)(v397 + 32) = v378;
    *(int8x16_t *)v397 = v821;
    *(double *)(v397 + 64) = v632 + v387.f64[0] * v598;
    v388.i64[1] = vextq_s8(v388, v388, 8uLL).u64[0];
    *(int8x16_t *)(v397 + 48) = v388;
    v398 = v397 + 8 * v396;
    *(double *)(v398 + 64) = _Q25.f64[0] + v387.f64[0] * v577;
    v389.i64[1] = vextq_s8(v389, v389, 8uLL).u64[0];
    v385.i64[1] = vextq_s8(v385, v385, 8uLL).u64[0];
    *(int8x16_t *)(v398 + 32) = v385;
    *(int8x16_t *)(v398 + 48) = v389;
    v382.i64[1] = vextq_s8(v382, v382, 8uLL).u64[0];
    *(_QWORD *)&_Q5.f64[0] = v379.i64[0];
    *(_QWORD *)&_Q5.f64[1] = vextq_s8(v379, v379, 8uLL).u64[0];
    *(float64x2_t *)v398 = _Q5;
    *(int8x16_t *)(v398 + 16) = v382;
    v399 = v397 + 16 * v396;
    *(double *)(v399 + 64) = _Q4.f64[0] + v387.f64[0] * v575;
    *(_QWORD *)&_Q5.f64[0] = v390.i64[0];
    *(_QWORD *)&_Q5.f64[1] = vextq_s8(v390, v390, 8uLL).u64[0];
    v386.i64[1] = vextq_s8(v386, v386, 8uLL).u64[0];
    *(int8x16_t *)(v399 + 32) = v386;
    *(float64x2_t *)(v399 + 48) = _Q5;
    v383.i64[1] = vextq_s8(v383, v383, 8uLL).u64[0];
    v380.i64[1] = vextq_s8(v380, v380, 8uLL).u64[0];
    *(int8x16_t *)v399 = v380;
    *(int8x16_t *)(v399 + 16) = v383;
    v391.i64[1] = vextq_s8(v391, v391, 8uLL).u64[0];
    v400 = v397 + 24 * v396;
    *(double *)(v400 + 64) = v628 + v387.f64[0] * v576;
    v401 = (int8x16_t)vmlaq_n_f64(v894, v376, v576);
    v401.i64[1] = vextq_s8(v401, v401, 8uLL).u64[0];
    *(int8x16_t *)(v400 + 32) = v401;
    *(int8x16_t *)(v400 + 48) = v391;
    v401.i64[0] = v384.i64[0];
    v401.i64[1] = vextq_s8(v384, v384, 8uLL).u64[0];
    v402 = v401;
    v401.i64[0] = v381.i64[0];
    v401.i64[1] = vextq_s8(v381, v381, 8uLL).u64[0];
    *(int8x16_t *)v400 = v401;
    *(int8x16_t *)(v400 + 16) = v402;
    v392.i64[1] = vextq_s8(v392, v392, 8uLL).u64[0];
    v403 = v397 + 32 * v396;
    *(double *)(v403 + 64) = _Q31.f64[0] + v387.f64[0] * v574;
    v404 = (int8x16_t)v758;
    v404.i64[1] = vextq_s8(v404, v404, 8uLL).u64[0];
    *(int8x16_t *)(v403 + 32) = v404;
    *(int8x16_t *)(v403 + 48) = v392;
    v405 = (int8x16_t)vmlaq_n_f64(v805, v638, v574);
    v405.i64[1] = vextq_s8(v405, v405, 8uLL).u64[0];
    v406 = v405;
    v407 = (int8x16_t)vmlaq_n_f64(v828, v374, v574);
    v407.i64[1] = vextq_s8(v407, v407, 8uLL).u64[0];
    *(int8x16_t *)v403 = v407;
    *(int8x16_t *)(v403 + 16) = v406;
    v408 = v397 + 40 * v396;
    *(double *)(v408 + 64) = v625 + v387.f64[0] * v573;
    v393.i64[1] = vextq_s8(v393, v393, 8uLL).u64[0];
    v409 = (int8x16_t)v764;
    v409.i64[1] = vextq_s8(v409, v409, 8uLL).u64[0];
    v410 = v409;
    v411 = (int8x16_t)v813;
    v411.i64[1] = vextq_s8(v411, v411, 8uLL).u64[0];
    v412 = v411;
    v413 = (int8x16_t)v727;
    v413.i64[1] = vextq_s8(v413, v413, 8uLL).u64[0];
    *(int8x16_t *)(v408 + 32) = v410;
    *(int8x16_t *)(v408 + 48) = v393;
    *(int8x16_t *)v408 = v413;
    *(int8x16_t *)(v408 + 16) = v412;
    v414 = v397 + 48 * v396;
    *(double *)(v414 + 64) = _Q19.f64[0] + v387.f64[0] * v572;
    v394.i64[1] = vextq_s8(v394, v394, 8uLL).u64[0];
    v415 = (int8x16_t)vmlaq_n_f64(v903, v376, v572);
    v415.i64[1] = vextq_s8(v415, v415, 8uLL).u64[0];
    *(int8x16_t *)(v414 + 32) = v415;
    *(int8x16_t *)(v414 + 48) = v394;
    v416 = (int8x16_t)vmlaq_n_f64(v746, v638, v572);
    v416.i64[1] = vextq_s8(v416, v416, 8uLL).u64[0];
    v417 = v416;
    v418 = (int8x16_t)vmlaq_n_f64(v866, v374, v572);
    v418.i64[1] = vextq_s8(v418, v418, 8uLL).u64[0];
    v419 = (int8x16_t)v734;
    v419.i64[1] = vextq_s8(v419, v419, 8uLL).u64[0];
    *(int8x16_t *)v414 = v418;
    *(int8x16_t *)(v414 + 16) = v417;
    v420 = (int8x16_t)vmlaq_n_f64(v739, v376, v571);
    v420.i64[1] = vextq_s8(v420, v420, 8uLL).u64[0];
    v421 = v397 + 56 * v396;
    *(double *)(v421 + 64) = _Q2.f64[0] + v387.f64[0] * v571;
    *(int8x16_t *)(v421 + 32) = v420;
    *(int8x16_t *)(v421 + 48) = v419;
    v422 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(v771, v640, v563, 1), v638, v571);
    v422.i64[1] = vextq_s8(v422, v422, 8uLL).u64[0];
    v423 = v422;
    v424 = (int8x16_t)vmlaq_n_f64(v876, v374, v571);
    v424.i64[1] = vextq_s8(v424, v424, 8uLL).u64[0];
    *(int8x16_t *)v421 = v424;
    *(int8x16_t *)(v421 + 16) = v423;
    v395.i64[1] = vextq_s8(v395, v395, 8uLL).u64[0];
    v425 = (int8x16_t)vmlaq_n_f64(v912, v376, v619);
    v425.i64[1] = vextq_s8(v425, v425, 8uLL).u64[0];
    v426 = v397 + (v396 << 6);
    *(double *)(v426 + 64) = v621 + v387.f64[0] * v619;
    *(int8x16_t *)(v426 + 32) = v425;
    *(int8x16_t *)(v426 + 48) = v395;
    v427 = (int8x16_t)vmlaq_n_f64(v797, v638, v619);
    v427.i64[1] = vextq_s8(v427, v427, 8uLL).u64[0];
    v428 = (int8x16_t)v885;
    v428.i64[1] = vextq_s8(v428, v428, 8uLL).u64[0];
    *(int8x16_t *)v426 = v428;
    *(int8x16_t *)(v426 + 16) = v427;
    v982 = 0u;
    v983 = 0u;
    v980 = 0u;
    v981 = 0u;
    v978 = 0u;
    v979 = 0u;
    v976 = 0u;
    v977 = 0u;
    __src = 0u;
    v975 = 0u;
    LODWORD(v971) = 0;
    LODWORD(v970) = 0;
    sub_20FA51FC8(v172, (int *)&v971, &v970, &v979, &__src);
    result = sub_20FA52288((uint64_t)v172, (uint64_t *)v168, (unsigned int *)&v979, (unsigned int *)&__src);
    v167 = (_QWORD *)v774;
  }
  v429 = (_DWORD *)v167[697];
  v913 = (_DWORD *)v167[698];
  if (v429 == v913)
    return result;
  v847 = (_QWORD *)(v774 + 25360);
  v858 = (uint64_t *)(v168 + 72);
  while (2)
  {
    v453 = (int8x16_t *)*((_QWORD *)v429 + 1);
    if ((v453->i8[4] & 2) != 0)
      goto LABEL_103;
    v454 = v429;
    v455 = 0;
    v456 = 0;
    v457 = 0;
    v458 = 0;
    v459 = 0;
    v886 = v453[3].i64[0];
    v904 = v454;
    v867 = *v454;
    v895 = v453[2];
    v877 = vextq_s8(v895, v895, 8uLL).u64[0];
    v992 = 0u;
    v993 = 0u;
    v990 = 0u;
    v991 = 0u;
    v988 = 0u;
    v989 = 0u;
    v986 = 0u;
    v987 = 0u;
    v984 = 0u;
    v985 = 0u;
    v982 = 0u;
    v983 = 0u;
    v980 = 0u;
    v981 = 0u;
    v979 = 0u;
    __src = 0uLL;
    *(_QWORD *)&v975 = 0;
    while (2)
    {
      if (v455 < v458)
      {
        *(_DWORD *)v455 = v457;
        v460 = (uint64_t)(v455 + 4);
        goto LABEL_107;
      }
      v461 = (v455 - v459) >> 2;
      v462 = v461 + 1;
      if ((unint64_t)(v461 + 1) >> 62)
      {
        *(_QWORD *)&v975 = v458;
        *((_QWORD *)&__src + 1) = v455;
        *(_QWORD *)&__src = v459;
        sub_20E867F44();
      }
      if ((v458 - v459) >> 1 > v462)
        v462 = (v458 - v459) >> 1;
      if ((unint64_t)(v458 - v459) >= 0x7FFFFFFFFFFFFFFCLL)
        v463 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v463 = v462;
      if (!v463)
      {
        v464 = 0;
        v465 = (char *)(4 * v461);
        *(_DWORD *)(4 * v461) = v457;
        v460 = 4 * v461 + 4;
        v466 = v455 - v459;
        if (v455 == v459)
          goto LABEL_123;
LABEL_120:
        v467 = v466 - 4;
        if (v467 >= 0xBC)
        {
          v470 = (v455 - 4 - v459) & 0xFFFFFFFFFFFFFFFCLL;
          if (&v464[v455 - v459 - 4 - v470] > &v464[v455 - v459 - 4])
          {
            v468 = v455;
          }
          else if (&v455[-v470 - 4] > v455 - 4)
          {
            v468 = v455;
          }
          else if ((unint64_t)(v459 - v464) >= 0x20)
          {
            v471 = (v467 >> 2) + 1;
            v472 = 4 * (v471 & 0x7FFFFFFFFFFFFFF8);
            v468 = &v455[-v472];
            v465 -= v472;
            v473 = &v464[4 * v461 - 16];
            v474 = v455 - 16;
            v475 = v471 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v476 = *(_OWORD *)v474;
              *(v473 - 1) = *((_OWORD *)v474 - 1);
              *v473 = v476;
              v473 -= 2;
              v474 -= 32;
              v475 -= 8;
            }
            while (v475);
            if (v471 == (v471 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_123;
          }
          else
          {
            v468 = v455;
          }
        }
        else
        {
          v468 = v455;
        }
        do
        {
          v469 = *((_DWORD *)v468 - 1);
          v468 -= 4;
          *((_DWORD *)v465 - 1) = v469;
          v465 -= 4;
        }
        while (v468 != v459);
        goto LABEL_123;
      }
      if (v463 >> 62)
      {
        *(_QWORD *)&v975 = v458;
        *(_QWORD *)&__src = v459;
        sub_20E877A38();
      }
      v464 = operator new(4 * v463);
      v465 = &v464[4 * v461];
      *(_DWORD *)v465 = v457;
      v460 = (uint64_t)(v465 + 4);
      v466 = v455 - v459;
      if (v455 != v459)
        goto LABEL_120;
LABEL_123:
      v458 = &v464[4 * v463];
      if (v459)
        operator delete(v459);
      v459 = v465;
LABEL_107:
      v457 += dword_2103B9910[v456] * ((*(_QWORD *)(v915 + 24 * v456 + 8) - *(_QWORD *)(v915 + 24 * v456)) >> 2);
      ++v456;
      v455 = (char *)v460;
      if (v456 != 10)
        continue;
      break;
    }
    v477 = *(_DWORD **)(v773 + 72);
    v478 = *(_DWORD **)(v773 + 80);
    if (v477 == v478)
    {
      v479 = -1;
      v480 = v774 + 42304;
      v429 = v904;
      if (v459)
        goto LABEL_142;
    }
    else
    {
      v479 = *((_DWORD *)v459 + 4);
      v480 = v774 + 42304;
      v429 = v904;
      while (*v477 != v867)
      {
        v479 += 3;
        if (++v477 == v478)
        {
          v479 = -1;
          break;
        }
      }
      if (v459)
LABEL_142:
        operator delete(v459);
    }
    result = sub_20F89E908((uint64_t)&v979);
    if ((v479 & 0x80000000) == 0)
    {
      v481 = *(_QWORD *)(v774 + 25232) + 8 * v479;
      *(_QWORD *)(v481 + 16) = v886;
      *(_QWORD *)&v482 = v895.i64[0];
      *((_QWORD *)&v482 + 1) = v877;
      *(_OWORD *)v481 = v482;
      sub_20FA5A44C(v847, (void **)v480);
      sub_20F20B6B0(v480);
      v483 = *(unsigned int *)(v480 + 16);
      v484 = *(unsigned int *)(v480 + 20);
      v485 = *(char **)v480;
      v486 = *(_QWORD *)v480 + 8 * (v479 + v479 * (_DWORD)v483);
      v790 = *(double *)(v486 + 16);
      v782 = *(float64x2_t *)v486;
      v487 = (float64x2_t *)(v486 + 8 * v483);
      v806 = v487[1].f64[0];
      v798 = *v487;
      v488 = (float64x2_t *)(v486 + 16 * v483);
      v822 = v488[1].f64[0];
      v814 = *v488;
      v836 = v917;
      v829 = v916;
      v878 = v919;
      v868 = v918;
      v896 = v921;
      v887 = v920;
      v970 = &v916;
      LODWORD(__src) = 3;
      *(_QWORD *)((char *)&__src + 4) = __PAIR64__(v483, v484);
      *(_QWORD *)&v975 = &v485[8 * v479];
      DWORD2(v975) = v479;
      if (*(_DWORD *)(v480 + 88) == 3 && (_DWORD)v484 == *(_DWORD *)(v480 + 92))
        goto LABEL_151;
      v489 = *v858;
      if (v485 == (char *)*v858)
      {
        v508 = (8 * (3 * v484) + 31) & 0xFFFFFFFE0;
        v972 = v508 >> 3;
        v971 = operator new(v508, (std::align_val_t)0x20uLL);
        LODWORD(v973) = 3;
        HIDWORD(v973) = v484;
        v979.i64[1] = (uint64_t)&v970;
        *(_QWORD *)&v980 = &__src;
        *((_QWORD *)&v980 + 1) = 0x3FF0000000000000;
        sub_20FB715A0((uint64_t)&v971, (uint64_t)&v979);
        v509 = *(_QWORD *)(v480 + 72);
        v510 = v972;
        *(_QWORD *)(v480 + 72) = v971;
        *(_QWORD *)(v480 + 80) = v510;
        *(_QWORD *)(v480 + 88) = v973;
        if (v509)
          MEMORY[0x212BC6368](v509, 0x1000C8000313F17);
      }
      else
      {
        *(_DWORD *)(v480 + 88) = 3;
        *(_DWORD *)(v480 + 92) = v484;
        if (*(_QWORD *)(v480 + 80) < (unint64_t)(3 * v484))
        {
          if (v489)
            MEMORY[0x212BC6368](v489, 0x1000C8000313F17);
          v490 = (24 * v484 + 31) & 0x3FFFFFFFE0;
          *(_QWORD *)(v480 + 72) = 0;
          *(_QWORD *)(v480 + 80) = v490 >> 3;
          *(_QWORD *)(v480 + 72) = operator new(v490, (std::align_val_t)0x20uLL);
        }
LABEL_151:
        v979.i64[1] = (uint64_t)&v970;
        *(_QWORD *)&v980 = &__src;
        *((_QWORD *)&v980 + 1) = 0x3FF0000000000000;
        sub_20FB715A0((uint64_t)v858, (uint64_t)&v979);
      }
      v491 = *(_DWORD *)(v480 + 16);
      v492 = *(char **)v480;
      v493 = *(unsigned int *)(v480 + 88);
      v494 = *(char **)(v480 + 72);
      if ((_DWORD)v493)
      {
        v495 = *(unsigned int *)(v480 + 92);
        if ((_DWORD)v495)
        {
          v496 = 8 * v493;
          v497 = 8 * (int)v493;
          v498 = v479;
          do
          {
            memmove(&v492[8 * v498], v494, v496);
            v498 += v491;
            v494 += v497;
            --v495;
          }
          while (v495);
          v491 = *(_DWORD *)(v480 + 16);
          v492 = *(char **)v480;
          v494 = *(char **)(v480 + 72);
        }
      }
      v499 = v491 * v479;
      v979.i64[0] = v491 | 0x300000000;
      v979.i32[2] = v491;
      *(_QWORD *)&v980 = &v492[8 * v491 * v479];
      DWORD2(v980) = v491 * v479;
      if (v494 != v492)
      {
        sub_20FB70C74((uint64_t)&v979, v858);
        goto LABEL_102;
      }
      v501 = *(_DWORD *)(v480 + 88);
      v500 = *(_DWORD *)(v480 + 92);
      v502 = (8 * v501 * v500 + 31) & 0xFFFFFFFE0;
      *((_QWORD *)&__src + 1) = v502 >> 3;
      *(_QWORD *)&__src = operator new(v502, (std::align_val_t)0x20uLL);
      *(_QWORD *)&v975 = __PAIR64__(v501, v500);
      sub_20F2B8274((unint64_t)&__src, v858);
      if ((_DWORD)v975)
      {
        v503 = DWORD1(v975);
        v504 = __src;
        if (DWORD1(v975))
        {
          v505 = 8 * v975;
          v506 = 8 * (int)v975;
          v507 = (char *)__src;
          do
          {
            memmove(&v494[8 * v499], v507, v505);
            v499 += v491;
            v507 += v506;
            --v503;
          }
          while (v503);
          v480 = v774 + 42304;
          v429 = v904;
        }
        if (!v504)
        {
LABEL_102:
          _V22.D[1] = v868.f64[1];
          _V17.D[1] = v829.f64[1];
          v432 = (float64x2_t)vzip1q_s64((int64x2_t)v829, (int64x2_t)v868);
          _Q2 = (float64x2_t)vzip2q_s64((int64x2_t)v829, (int64x2_t)v868);
          _Q3.f64[0] = v836;
          _Q3.f64[1] = v878;
          v435 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v432, v782.f64[0]), _Q2, v782, 1), _Q3, v790);
          _V21.D[1] = v887.f64[1];
          _D5 = v782.f64[1];
          __asm { FMLA            D4, D5, V21.D[1] }
          v439 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v432, v798.f64[0]), _Q2, v798, 1), _Q3, v806);
          _D7 = v798.f64[1];
          __asm { FMLA            D6, D7, V21.D[1] }
          _D6 = _D6 + v896 * v806;
          _Q1 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v432, v814.f64[0]), _Q2, v814, 1), _Q3, v822);
          _Q3.f64[0] = v814.f64[1];
          __asm { FMLA            D2, D3, V21.D[1] }
          _Q2.f64[0] = _Q2.f64[0] + v896 * v822;
          v444 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v435, v829.f64[0]), v439, v829, 1), _Q1, v836);
          __asm { FMLA            D7, D6, V17.D[1] }
          v446 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v435, v868.f64[0]), v439, v868, 1), _Q1, v878);
          __asm { FMLA            D18, D6, V22.D[1] }
          v448 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v435, v887.f64[0]), v439, v887, 1), _Q1, v896);
          v449 = *(unsigned int *)(v480 + 16);
          __asm { FMLA            D1, D6, V21.D[1] }
          v450 = *(_QWORD *)v480 + 8 * (v479 + v479 * (_DWORD)v449);
          *(double *)(v450 + 16) = _D7 + _Q2.f64[0] * v836;
          v444.i64[1] = vextq_s8(v444, v444, 8uLL).u64[0];
          *(int8x16_t *)v450 = v444;
          v451 = v450 + 8 * v449;
          *(double *)(v451 + 16) = _D18 + _Q2.f64[0] * v878;
          v446.i64[1] = vextq_s8(v446, v446, 8uLL).u64[0];
          *(int8x16_t *)v451 = v446;
          v452 = v450 + 16 * v449;
          *(double *)(v452 + 16) = _Q1.f64[0] + _Q2.f64[0] * v896;
          v448.i64[1] = vextq_s8(v448, v448, 8uLL).u64[0];
          *(int8x16_t *)v452 = v448;
          LODWORD(v971) = 0;
          LODWORD(v970) = 0;
          v982 = 0u;
          v983 = 0u;
          v980 = 0u;
          v981 = 0u;
          v978 = 0u;
          v979 = 0u;
          v976 = 0u;
          v977 = 0u;
          __src = 0u;
          v975 = 0u;
          sub_20FA51FC8(v847, (int *)&v971, &v970, &v979, &__src);
          result = sub_20FA52288((uint64_t)v847, (uint64_t *)v480, (unsigned int *)&v979, (unsigned int *)&__src);
          goto LABEL_103;
        }
      }
      else
      {
        v504 = __src;
        if (!(_QWORD)__src)
          goto LABEL_102;
      }
      MEMORY[0x212BC6368](v504, 0x1000C8000313F17);
      goto LABEL_102;
    }
LABEL_103:
    v429 += 4;
    if (v429 != v913)
      continue;
    return result;
  }
}

void sub_20FB70A60(_Unwind_Exception *a1)
{
  if (STACK[0xF08])
  {
    MEMORY[0x212BC6368](STACK[0xF08], 0x1000C8000313F17);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20FB70AD4(_Unwind_Exception *a1)
{
  unint64_t v1;
  void *v2;

  STACK[0xF30] = v1;
  STACK[0xF20] = (unint64_t)v2;
  if (v2)
  {
    STACK[0xF28] = (unint64_t)v2;
    operator delete(v2);
  }
  sub_20F89E908(&STACK[0xF70]);
  _Unwind_Resume(a1);
}

void sub_20FB70AE8()
{
  if (STACK[0xF20])
    JUMPOUT(0x20FB70AF4);
  JUMPOUT(0x20FB70B00);
}

void sub_20FB70B10(uint64_t a1, uint64_t a2)
{
  double *v4;
  uint64_t v5;
  const double *v6;
  double *v7;
  int v8;
  int v9;
  size_t v10;
  double *v11;
  size_t v12;
  int v13;
  void *v14;
  size_t v15;
  uint64_t v16;

  v4 = *(double **)a1;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = **(const double ***)(a2 + 8);
  if (v6 == v4 || (v7 = *(double **)(v5 + 16), &v7[-*(unsigned int *)(v5 + 24)] == v4))
  {
    v9 = *(_DWORD *)(v5 + 4);
    v10 = (8 * (6 * v9) + 31) & 0xFFFFFFFE0;
    v15 = v10 >> 3;
    v14 = operator new(v10, (std::align_val_t)0x20uLL);
    LODWORD(v16) = 6;
    HIDWORD(v16) = v9;
    sub_20FB70B10(&v14, a2);
    v11 = *(double **)a1;
    v12 = v15;
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v12;
    *(_QWORD *)(a1 + 16) = v16;
    if (v11)
      MEMORY[0x212BC6368](v11, 0x1000C8000313F17);
  }
  else
  {
    v8 = *(_DWORD *)(v5 + 4);
    if (v8 * *(_DWORD *)v5)
    {
      sub_20E8BE654(1, 0, 6, v8, 6, v6, 6, v7, *(double *)(a2 + 24), 0.0, *(_DWORD *)(v5 + 8), v4, *(_DWORD *)(a1 + 16));
    }
    else
    {
      v13 = *(_DWORD *)(a1 + 20);
      if (v13 * *(_DWORD *)(a1 + 16))
        bzero(v4, 8 * (v13 * *(_DWORD *)(a1 + 16)));
    }
  }
}

void sub_20FB70C4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    MEMORY[0x212BC6368](a12, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FB70C74(uint64_t result, uint64_t *a2)
{
  unsigned int v2;
  int v3;
  unint64_t v4;
  int v5;
  int32x4_t v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  int v34;
  unsigned int v35;
  unint64_t v36;
  int32x4_t v37;
  int32x4_t v38;
  unsigned int v39;
  unint64_t v40;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  BOOL v49;
  uint64_t v50;
  int v51;
  int v52;
  unsigned int v53;
  int32x4_t v54;
  int32x4_t v55;
  unsigned int v56;
  unint64_t v57;
  int v58;
  uint64_t v59;
  int64x2_t *v60;
  int64x2_t v61;
  int64x2_t v62;
  int64x2_t v63;
  int64x2_t *v64;
  int64x2_t v65;
  int64x2_t v66;
  int64x2_t v67;
  int64x2_t v68;
  int64x2_t *v69;
  int64x2_t v70;
  int64x2_t v71;
  int64x2_t v72;
  int64x2_t v73;
  int64x2_t *v74;
  int64x2_t v75;
  int64x2_t v76;
  int64x2_t v77;
  int64x2_t v78;
  int64x2_t *v79;
  int64x2_t v80;
  int64x2_t v81;
  int64x2_t v82;
  int64x2_t v83;
  int64x2_t *v84;
  int64x2_t v85;
  int64x2_t v86;
  int64x2_t v87;
  int64x2_t v88;
  int64x2_t *v89;
  int64x2_t v90;
  int64x2_t v91;
  int64x2_t v92;
  int64x2_t *v93;
  int64x2_t v94;
  int64x2_t v95;
  int64x2_t v96;
  int64x2_t v97;
  int64x2_t v98;
  int64x2_t v99;
  int64x2_t v100;
  int64x2_t v101;
  int64x2_t v102;
  int64x2_t v103;
  int64x2_t v104;
  int64x2_t v105;
  int64x2_t v106;
  int64x2_t v107;
  int64x2_t v108;
  int64x2_t v109;
  int64x2_t v110;
  int64x2_t v111;
  int64x2_t v112;
  uint64_t v113;
  int64x2_t *v114;
  int64x2_t *v115;
  int64x2_t *v116;
  int64x2_t *v117;
  int64x2_t *v118;
  int64x2_t *v119;
  int64x2_t *v120;
  int64x2_t *v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  int v127;
  uint64_t v128;
  int v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  int v137;
  int v138;
  unsigned int v139;
  unint64_t v140;
  int32x4_t v141;
  int32x4_t v142;
  unsigned int v143;
  unint64_t v144;
  _QWORD *v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  BOOL v153;
  int v154;
  int v155;
  unsigned int v156;
  int32x4_t v157;
  int32x4_t v158;
  unsigned int v159;
  unint64_t v160;
  int v161;
  unsigned int v162;
  unsigned int v163;
  unsigned int v164;
  int v165;
  int v166;
  int64x2_t v167;
  int64x2_t v168;
  uint64_t v169;
  int64x2_t v170;

  v2 = *((_DWORD *)a2 + 4);
  if (v2)
  {
    v3 = 0;
    v4 = *((unsigned int *)a2 + 5);
    v5 = *((_DWORD *)a2 + 5) & 7;
    v161 = v4 & 0xFFFFFFF8;
    v162 = *((_DWORD *)a2 + 4);
    v166 = 2 * v5;
    v165 = -2 * v5;
    v6.i64[0] = -1;
    v6.i64[1] = -1;
    v7 = v162;
    while (1)
    {
      v8 = v7 <= 1 ? 1 : v7;
      v163 = v3 + 8;
      v164 = v7;
      if (v3 + 8 <= v2 || v2 - v3 == 8)
        break;
      if ((_DWORD)v4)
      {
        v9 = 0;
        v10 = *(unsigned int *)(result + 24);
        v11 = *(_QWORD *)(result + 16) - 8 * v10;
        v12 = *(_DWORD *)(result + 8);
        v169 = *a2;
        v13 = *((_DWORD *)a2 + 4);
        while (1)
        {
          v14 = v9 + 8;
          v15 = v9 + 8 <= v4 ? 8 : v4 - v9;
          if (v15)
            break;
LABEL_11:
          v9 = v14;
          if (v14 >= v4)
            goto LABEL_3;
        }
        v16 = 0;
        v17 = 0;
        v18 = v169 + 8 * (v3 + v13 * v9);
        v19 = v10 + v9;
        if (v15 >= 0)
          v20 = v15;
        else
          v20 = -v15;
        v21 = 2 * v15;
        v22 = -2 * v15;
        while (1)
        {
          v26 = HIDWORD(v17);
          if (v20 >> 4 >= 0x271)
          {
            v29 = v15 + v17 + v15 * HIDWORD(v17);
            v30 = (v29 / v15);
            v31 = (v29 % v15);
            v32 = v31 | (v30 << 32);
            v28 = (v31 + v15) | ((unint64_t)(v30 - 1) << 32);
            if ((int)v31 >= 0)
              v28 = v32;
            goto LABEL_44;
          }
          v27 = (v15 + v17);
          if (v15 + (int)v17 >= 0)
          {
            v28 = v17 & 0xFFFFFFFF00000000 | v27;
            if ((int)v27 >= v15)
              goto LABEL_41;
            goto LABEL_44;
          }
          v33 = v22 + ((v21 + v17) & ~((v21 + (int)v17) >> 31));
          v34 = v33 == (_DWORD)v17 ? 1 : 2;
          v35 = v34 + (v33 - (v33 != (_DWORD)v17) - v17) / v15;
          if (v35 < 8)
            break;
          LODWORD(v27) = v27 + (v35 & 0xFFFFFFF8) * v15;
          v37 = 0uLL;
          v38 = (int32x4_t)HIDWORD(v17);
          v39 = v35 & 0xFFFFFFF8;
          do
          {
            v38 = vaddq_s32(v38, v6);
            v37 = vaddq_s32(v37, v6);
            v39 -= 8;
          }
          while (v39);
          v36 = vaddvq_s32(vaddq_s32(v37, v38));
          if (v35 != (v35 & 0xFFFFFFF8))
            goto LABEL_39;
LABEL_40:
          v28 = v27 | (v36 << 32);
          if ((int)v27 >= v15)
          {
LABEL_41:
            v40 = HIDWORD(v28);
            do
            {
              v27 = (v27 - v15);
              v40 = (v40 + 1);
            }
            while ((int)v27 >= v15);
            v28 = v27 | (v40 << 32);
          }
LABEL_44:
          if ((_DWORD)v17 != (_DWORD)v28 || HIDWORD(v17) != HIDWORD(v28))
          {
            v42 = (_QWORD *)(v11 + 8 * (v19 + (v3 + v16) * v12));
            LODWORD(v43) = v17;
            v44 = v17;
            do
            {
              *v42++ = *(_QWORD *)(v18 + 8 * (HIDWORD(v44) + v43 * v13));
              v45 = (v43 + 1);
              v46 = v44 & 0xFFFFFFFF00000000;
              v47 = v46 | v45;
              v48 = v46 + 0x100000000;
              if (v15 <= (int)v45)
                v43 = v48;
              else
                v43 = v47;
              v49 = (_DWORD)v43 == (_DWORD)v28 && HIDWORD(v43) == HIDWORD(v28);
              v44 = v43;
            }
            while (!v49);
          }
          if (v20 >> 4 >= 0x271)
          {
            v23 = v15 + v17 + v15 * HIDWORD(v17);
            v24 = (v23 / v15);
            v25 = (v23 % v15);
            if ((v25 & 0x80000000) != 0)
            {
              v25 = (v25 + v15);
              v24 = (v24 - 1);
            }
            v17 = v25 | (v24 << 32);
            goto LABEL_23;
          }
          v50 = (v15 + v17);
          if (v15 + (int)v17 < 0)
          {
            v51 = v22 + ((v21 + v17) & ~((v21 + (int)v17) >> 31));
            if (v51 == (_DWORD)v17)
              v52 = 1;
            else
              v52 = 2;
            v53 = v52 + (v51 - (v51 != (_DWORD)v17) - v17) / v15;
            if (v53 < 8)
              goto LABEL_129;
            LODWORD(v50) = v50 + (v53 & 0xFFFFFFF8) * v15;
            v54 = 0uLL;
            v55 = (int32x4_t)HIDWORD(v17);
            v56 = v53 & 0xFFFFFFF8;
            do
            {
              v55 = vaddq_s32(v55, v6);
              v54 = vaddq_s32(v54, v6);
              v56 -= 8;
            }
            while (v56);
            v26 = vaddvq_s32(vaddq_s32(v54, v55));
            if (v53 != (v53 & 0xFFFFFFF8))
            {
LABEL_129:
              do
              {
                LODWORD(v50) = v50 + v15;
                v26 = (v26 - 1);
              }
              while ((v50 & 0x80000000) != 0);
            }
            v17 = v50 | (v26 << 32);
            if ((int)v50 < v15)
              goto LABEL_23;
LABEL_70:
            v57 = HIDWORD(v17);
            do
            {
              v50 = (v50 - v15);
              v57 = (v57 + 1);
            }
            while ((int)v50 >= v15);
            v17 = v50 | (v57 << 32);
            goto LABEL_23;
          }
          v17 = v17 & 0xFFFFFFFF00000000 | v50;
          if ((int)v50 >= v15)
            goto LABEL_70;
LABEL_23:
          if (++v16 == v8)
            goto LABEL_11;
        }
        v36 = HIDWORD(v17);
        do
        {
LABEL_39:
          LODWORD(v27) = v27 + v15;
          v36 = (v36 - 1);
        }
        while ((v27 & 0x80000000) != 0);
        goto LABEL_40;
      }
LABEL_3:
      v7 = v164 - 8;
      v3 += 8;
      v2 = v162;
      if (v163 >= v162)
        return result;
    }
    if (v4 >= 8)
    {
      v58 = 0;
      do
      {
        v59 = *((unsigned int *)a2 + 4);
        v60 = (int64x2_t *)(*a2 + 8 * (v3 + v59 * v58));
        v61 = v60[2];
        v168 = v60[3];
        v63 = *v60;
        v62 = v60[1];
        v64 = (int64x2_t *)((char *)v60 + 8 * v59);
        v66 = v64[2];
        v65 = v64[3];
        v68 = *v64;
        v67 = v64[1];
        v69 = &v60[v59];
        v71 = v69[2];
        v70 = v69[3];
        v73 = *v69;
        v72 = v69[1];
        v74 = (int64x2_t *)((char *)v60 + 24 * v59);
        v76 = v74[2];
        v75 = v74[3];
        v78 = *v74;
        v77 = v74[1];
        v79 = &v60[2 * v59];
        v81 = v79[2];
        v80 = v79[3];
        v83 = *v79;
        v82 = v79[1];
        v84 = (int64x2_t *)((char *)v60 + 40 * v59);
        v86 = v84[2];
        v85 = v84[3];
        v87 = *v84;
        v88 = v84[1];
        v89 = &v60[3 * v59];
        v91 = v89[2];
        v90 = v89[3];
        v92 = v89[1];
        v93 = (int64x2_t *)((char *)v60 + 56 * v59);
        v170 = vzip1q_s64(v73, v78);
        v73.i64[0] = vdupq_laneq_s64(v73, 1).u64[0];
        v73.i64[1] = v78.i64[1];
        v167 = vzip1q_s64(v83, v87);
        v83.i64[0] = vdupq_laneq_s64(v83, 1).u64[0];
        v83.i64[1] = v87.i64[1];
        v94 = vzip1q_s64(v63, v68);
        v95 = vzip2q_s64(v63, v68);
        v96 = vzip1q_s64(*v89, *v93);
        v97.i64[0] = vdupq_laneq_s64(*v89, 1).u64[0];
        v97.i64[1] = v93->i64[1];
        v98 = vzip1q_s64(v72, v77);
        v72.i64[0] = vdupq_laneq_s64(v72, 1).u64[0];
        v72.i64[1] = v77.i64[1];
        v99 = vzip1q_s64(v62, v67);
        v100 = vzip2q_s64(v62, v67);
        v101 = vzip1q_s64(v82, v88);
        v82.i64[0] = vdupq_laneq_s64(v82, 1).u64[0];
        v82.i64[1] = v88.i64[1];
        v102 = vzip1q_s64(v92, v93[1]);
        v92.i64[0] = vdupq_laneq_s64(v92, 1).u64[0];
        v92.i64[1] = v93[1].i64[1];
        v103 = vzip1q_s64(v61, v66);
        v104 = vzip2q_s64(v61, v66);
        v105 = vzip1q_s64(v71, v76);
        v71.i64[0] = vdupq_laneq_s64(v71, 1).u64[0];
        v71.i64[1] = v76.i64[1];
        v106 = vzip1q_s64(v81, v86);
        v81.i64[0] = vdupq_laneq_s64(v81, 1).u64[0];
        v81.i64[1] = v86.i64[1];
        v107 = vzip1q_s64(v91, v93[2]);
        v91.i64[0] = vdupq_laneq_s64(v91, 1).u64[0];
        v91.i64[1] = v93[2].i64[1];
        v108 = vzip1q_s64(v168, v65);
        v109 = vzip2q_s64(v168, v65);
        v110 = vzip1q_s64(v70, v75);
        v70.i64[0] = vdupq_laneq_s64(v70, 1).u64[0];
        v70.i64[1] = v75.i64[1];
        v111 = vzip1q_s64(v80, v85);
        v80.i64[0] = vdupq_laneq_s64(v80, 1).u64[0];
        v80.i64[1] = v85.i64[1];
        v112 = vzip1q_s64(v90, v93[3]);
        v90.i64[0] = vdupq_laneq_s64(v90, 1).u64[0];
        v90.i64[1] = v93[3].i64[1];
        v113 = *(unsigned int *)(result + 8);
        v114 = (int64x2_t *)(*(_QWORD *)(result + 16)
                           - 8 * *(unsigned int *)(result + 24)
                           + 8 * (v58 + *(_DWORD *)(result + 24) + v3 * v113));
        v114[2] = v167;
        v114[3] = v96;
        *v114 = v94;
        v114[1] = v170;
        v115 = (int64x2_t *)((char *)v114 + 8 * v113);
        *v115 = v95;
        v115[1] = v73;
        v115[2] = v83;
        v115[3] = v97;
        v116 = &v114[v113];
        *v116 = v99;
        v116[1] = v98;
        v116[2] = v101;
        v116[3] = v102;
        v117 = (int64x2_t *)((char *)v114 + 24 * v113);
        *v117 = v100;
        v117[1] = v72;
        v117[2] = v82;
        v117[3] = v92;
        v118 = &v114[2 * v113];
        *v118 = v103;
        v118[1] = v105;
        v118[2] = v106;
        v118[3] = v107;
        v119 = (int64x2_t *)((char *)v114 + 40 * v113);
        *v119 = v104;
        v119[1] = v71;
        v119[2] = v81;
        v119[3] = v91;
        v120 = &v114[3 * v113];
        *v120 = v108;
        v120[1] = v110;
        v120[2] = v111;
        v120[3] = v112;
        v121 = (int64x2_t *)((char *)v114 + 56 * v113);
        v121[2] = v80;
        v121[3] = v90;
        *v121 = v109;
        v121[1] = v70;
        LODWORD(v121) = v58 + 16;
        v58 += 8;
      }
      while (v121 <= v4);
    }
    if (!v5)
      goto LABEL_3;
    v122 = 0;
    v123 = 0;
    v124 = *(unsigned int *)(result + 24);
    v125 = *(_QWORD *)(result + 16) - 8 * v124;
    v126 = *(_DWORD *)(result + 8);
    v127 = *((_DWORD *)a2 + 4);
    v128 = *a2 + 8 * (v3 + v127 * v161);
    v129 = v124 + v161;
    while (1)
    {
      v130 = HIDWORD(v123);
      v131 = (v5 + v123);
      v132 = v123 & 0xFFFFFFFF00000000 | v131;
      v133 = v132;
      LODWORD(v134) = v5 + v123;
      if (v5 + (int)v123 >= 0)
      {
        if ((int)v134 < v5)
          goto LABEL_81;
        goto LABEL_97;
      }
      v137 = v165 + ((v166 + v123) & ~((v166 + (int)v123) >> 31));
      v138 = v137 == (_DWORD)v123 ? 1 : 2;
      v139 = v138 + (v137 - (v137 != (_DWORD)v123) - v123) / v5;
      if (v139 < 8)
        break;
      LODWORD(v134) = v131 + (v139 & 0xFFFFFFF8) * v5;
      v141 = 0uLL;
      v142 = (int32x4_t)HIDWORD(v123);
      v143 = v139 & 0xFFFFFFF8;
      do
      {
        v142 = vaddq_s32(v142, v6);
        v141 = vaddq_s32(v141, v6);
        v143 -= 8;
      }
      while (v143);
      v140 = vaddvq_s32(vaddq_s32(v141, v142));
      if (v139 != (v139 & 0xFFFFFFF8))
        goto LABEL_95;
LABEL_96:
      v133 = v134 | (v140 << 32);
      if ((int)v134 < v5)
      {
LABEL_81:
        v135 = HIDWORD(v133);
        if ((_DWORD)v123 == (_DWORD)v133 && HIDWORD(v123) == HIDWORD(v133))
          goto LABEL_112;
        goto LABEL_103;
      }
LABEL_97:
      v144 = HIDWORD(v133);
      do
      {
        v134 = (v134 - v5);
        v144 = (v144 + 1);
      }
      while ((int)v134 >= v5);
      v133 = v134 | (v144 << 32);
      v135 = HIDWORD(v133);
      if ((_DWORD)v123 == (_DWORD)v133 && HIDWORD(v123) == HIDWORD(v133))
        goto LABEL_112;
LABEL_103:
      v146 = (_QWORD *)(v125 + 8 * (v129 + (v3 + v122) * v126));
      LODWORD(v147) = v123;
      v148 = v123;
      do
      {
        *v146++ = *(_QWORD *)(v128 + 8 * (HIDWORD(v148) + v147 * v127));
        v149 = (v147 + 1);
        v150 = v148 & 0xFFFFFFFF00000000;
        v151 = v150 | v149;
        v152 = v150 + 0x100000000;
        if (v5 <= (int)v149)
          v147 = v152;
        else
          v147 = v151;
        v153 = (_DWORD)v147 == (_DWORD)v133 && HIDWORD(v147) == (_DWORD)v135;
        v148 = v147;
      }
      while (!v153);
LABEL_112:
      if ((v131 & 0x80000000) != 0)
      {
        v154 = v165 + ((v166 + v123) & ~((v166 + (int)v123) >> 31));
        if (v154 == (_DWORD)v123)
          v155 = 1;
        else
          v155 = 2;
        v156 = v155 + (v154 - (v154 != (_DWORD)v123) - v123) / v5;
        if (v156 < 8)
          goto LABEL_130;
        LODWORD(v131) = v131 + (v156 & 0xFFFFFFF8) * v5;
        v157 = 0uLL;
        v158 = (int32x4_t)HIDWORD(v123);
        v159 = v156 & 0xFFFFFFF8;
        do
        {
          v158 = vaddq_s32(v158, v6);
          v157 = vaddq_s32(v157, v6);
          v159 -= 8;
        }
        while (v159);
        v130 = vaddvq_s32(vaddq_s32(v157, v158));
        if (v156 != (v156 & 0xFFFFFFF8))
        {
LABEL_130:
          do
          {
            LODWORD(v131) = v131 + v5;
            v130 = (v130 - 1);
          }
          while ((v131 & 0x80000000) != 0);
        }
        v132 = v131 | (v130 << 32);
        if ((int)v131 < v5)
          goto LABEL_78;
LABEL_124:
        v160 = HIDWORD(v132);
        do
        {
          v131 = (v131 - v5);
          v160 = (v160 + 1);
        }
        while ((int)v131 >= v5);
        v132 = v131 | (v160 << 32);
        goto LABEL_78;
      }
      if ((int)v131 >= v5)
        goto LABEL_124;
LABEL_78:
      ++v122;
      v123 = v132;
      if (v122 == 8)
        goto LABEL_3;
    }
    v140 = HIDWORD(v123);
    LODWORD(v134) = v5 + v123;
    do
    {
LABEL_95:
      LODWORD(v134) = v134 + v5;
      v140 = (v140 - 1);
    }
    while ((v134 & 0x80000000) != 0);
    goto LABEL_96;
  }
  return result;
}

void sub_20FB71440(uint64_t a1, uint64_t a2)
{
  double *v4;
  uint64_t v5;
  const double *v6;
  double *v7;
  int v8;
  int v9;
  size_t v10;
  double *v11;
  size_t v12;
  int v13;
  void *v14;
  size_t v15;
  uint64_t v16;

  v4 = *(double **)a1;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = **(const double ***)(a2 + 8);
  if (v6 == v4 || (v7 = *(double **)(v5 + 16), &v7[-*(unsigned int *)(v5 + 24)] == v4))
  {
    v9 = *(_DWORD *)(v5 + 4);
    v10 = (8 * (9 * v9) + 31) & 0xFFFFFFFE0;
    v15 = v10 >> 3;
    v14 = operator new(v10, (std::align_val_t)0x20uLL);
    LODWORD(v16) = 9;
    HIDWORD(v16) = v9;
    sub_20FB71440(&v14, a2);
    v11 = *(double **)a1;
    v12 = v15;
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v12;
    *(_QWORD *)(a1 + 16) = v16;
    if (v11)
      MEMORY[0x212BC6368](v11, 0x1000C8000313F17);
  }
  else
  {
    v8 = *(_DWORD *)(v5 + 4);
    if (v8 * *(_DWORD *)v5)
    {
      sub_20E8BE654(1, 0, 9, v8, 9, v6, 9, v7, *(double *)(a2 + 24), 0.0, *(_DWORD *)(v5 + 8), v4, *(_DWORD *)(a1 + 16));
    }
    else
    {
      v13 = *(_DWORD *)(a1 + 20);
      if (v13 * *(_DWORD *)(a1 + 16))
        bzero(v4, 8 * (v13 * *(_DWORD *)(a1 + 16)));
    }
  }
}

void sub_20FB71578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    MEMORY[0x212BC6368](a12, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

void sub_20FB715A0(uint64_t a1, uint64_t a2)
{
  double *v4;
  uint64_t v5;
  const double *v6;
  double *v7;
  int v8;
  int v9;
  size_t v10;
  double *v11;
  size_t v12;
  int v13;
  void *v14;
  size_t v15;
  uint64_t v16;

  v4 = *(double **)a1;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = **(const double ***)(a2 + 8);
  if (v6 == v4 || (v7 = *(double **)(v5 + 16), &v7[-*(unsigned int *)(v5 + 24)] == v4))
  {
    v9 = *(_DWORD *)(v5 + 4);
    v10 = (8 * (3 * v9) + 31) & 0xFFFFFFFE0;
    v15 = v10 >> 3;
    v14 = operator new(v10, (std::align_val_t)0x20uLL);
    LODWORD(v16) = 3;
    HIDWORD(v16) = v9;
    sub_20FB715A0(&v14, a2);
    v11 = *(double **)a1;
    v12 = v15;
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v12;
    *(_QWORD *)(a1 + 16) = v16;
    if (v11)
      MEMORY[0x212BC6368](v11, 0x1000C8000313F17);
  }
  else
  {
    v8 = *(_DWORD *)(v5 + 4);
    if (v8 * *(_DWORD *)v5)
    {
      sub_20E8BE654(1, 0, 3, v8, 3, v6, 3, v7, *(double *)(a2 + 24), 0.0, *(_DWORD *)(v5 + 8), v4, *(_DWORD *)(a1 + 16));
    }
    else
    {
      v13 = *(_DWORD *)(a1 + 20);
      if (v13 * *(_DWORD *)(a1 + 16))
        bzero(v4, 8 * (v13 * *(_DWORD *)(a1 + 16)));
    }
  }
}

void sub_20FB716D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    MEMORY[0x212BC6368](a12, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FB71700(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  int *v6;
  float64x2_t v7;
  int64x2_t v8;
  float64_t v9;
  __int128 v10;
  int64x2_t v11;
  int64x2_t v12;
  uint64_t v13;
  int8x16_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  unint64_t v21;
  int8x16_t *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  float64x2_t *v27;
  float64x2_t *v28;
  float64x2_t *v29;
  float64x2_t *v30;
  float64x2_t *v31;
  float64x2_t *v32;
  uint64_t *v33;
  uint64_t v34;
  size_t v35;
  unsigned int v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  size_t v41;
  uint64_t v42;
  int v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  size_t v47;
  uint64_t v48;
  uint64_t v49;
  size_t v50;
  uint64_t v51;
  char *v52;
  size_t v53;
  uint64_t v54;
  size_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  int8x16_t v114;
  int8x16_t v115;
  int8x16_t v116;
  int8x16_t v117;
  int8x16_t v118;
  int8x16_t v119;
  int8x16_t v120;
  int8x16_t v121;
  int8x16_t v122;
  int8x16_t v123;
  int8x16_t v124;
  int8x16_t v125;
  int8x16_t v126;
  int8x16_t v127;
  int8x16_t v128;
  int8x16_t v129;
  int8x16_t v130;
  int8x16_t v131;
  uint64_t v132;
  int8x16_t *v133;
  int8x16_t *v134;
  int8x16_t v135;
  int8x16_t v136;
  int8x16_t *v137;
  int8x16_t *v138;
  int8x16_t v139;
  int8x16_t *v140;
  int8x16_t *v141;
  char *v142;
  uint64_t v143;
  int v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  _BYTE *v151;
  char *v152;
  int64_t v153;
  unint64_t v154;
  char *v155;
  int v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _OWORD *v160;
  char *v161;
  uint64_t v162;
  __int128 v163;
  _DWORD *v164;
  _DWORD *v165;
  unsigned int v166;
  _QWORD *v167;
  uint64_t v168;
  __int128 v169;
  __int128 v170;
  uint64_t v171;
  _QWORD *v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  float64x2_t *v177;
  uint64_t v178;
  float64x2_t v179;
  float64x2_t *v180;
  uint64_t v181;
  float64x2_t v182;
  float64x2_t *v183;
  float64x2_t *v184;
  float64x2_t *v185;
  uint64_t v186;
  uint64_t *v187;
  float64x2_t v188;
  uint64_t v189;
  size_t v190;
  unsigned int v191;
  char *v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  size_t v196;
  uint64_t v197;
  unsigned int v198;
  unsigned int v199;
  unsigned int v200;
  unsigned int v201;
  size_t v202;
  uint64_t v203;
  uint64_t v204;
  size_t v205;
  uint64_t v206;
  char *v207;
  size_t v208;
  uint64_t v209;
  size_t v210;
  float64x2_t v213;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v227;
  float64x2_t v228;
  float64x2_t v231;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v244;
  float64x2_t v245;
  float64x2_t v246;
  float64x2_t v247;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v254;
  float64x2_t v256;
  float64x2_t v258;
  float64x2_t v263;
  float64x2_t v264;
  float64x2_t v265;
  float64x2_t v270;
  float64x2_t v271;
  float64x2_t v280;
  float64x2_t v284;
  float64x2_t v288;
  float64x2_t v289;
  float64x2_t v299;
  float64x2_t v300;
  float64x2_t v301;
  float64x2_t v302;
  float64x2_t v304;
  float64x2_t v305;
  float64x2_t v312;
  float64x2_t v313;
  float64x2_t v314;
  float64x2_t v316;
  float64x2_t v317;
  float64x2_t v320;
  float64x2_t v321;
  float64x2_t v322;
  float64x2_t v323;
  float64x2_t v331;
  float64x2_t v332;
  float64x2_t v334;
  float64x2_t v335;
  float64x2_t v336;
  float64x2_t v337;
  float64x2_t v343;
  int8x16_t v344;
  float64x2_t v345;
  float64x2_t v346;
  float64x2_t v348;
  float64x2_t v349;
  float64x2_t v351;
  float64x2_t v352;
  float64x2_t v353;
  float64x2_t v356;
  float64x2_t v358;
  float64x2_t v359;
  float64x2_t v360;
  float64x2_t v363;
  float64x2_t v364;
  float64x2_t v365;
  float64x2_t v366;
  float64x2_t v367;
  float64x2_t v368;
  float64x2_t v369;
  float64x2_t v371;
  float64x2_t v372;
  float64x2_t v373;
  float64x2_t v374;
  int8x16_t v375;
  float64x2_t v376;
  int8x16_t v377;
  int8x16_t v378;
  int8x16_t v379;
  int8x16_t v380;
  int8x16_t v381;
  int8x16_t v382;
  int8x16_t v383;
  int8x16_t v384;
  int8x16_t v385;
  int8x16_t v386;
  float64x2_t v387;
  int8x16_t v388;
  int8x16_t v389;
  int8x16_t v390;
  int8x16_t v391;
  int8x16_t v392;
  int8x16_t v393;
  int8x16_t v394;
  int8x16_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  int8x16_t v401;
  int8x16_t v402;
  uint64_t v403;
  int8x16_t v404;
  int8x16_t v405;
  int8x16_t v406;
  int8x16_t v407;
  uint64_t v408;
  int8x16_t v409;
  int8x16_t v410;
  int8x16_t v411;
  int8x16_t v412;
  int8x16_t v413;
  uint64_t v414;
  int8x16_t v415;
  int8x16_t v416;
  int8x16_t v417;
  int8x16_t v418;
  int8x16_t v419;
  int8x16_t v420;
  uint64_t v421;
  int8x16_t v422;
  int8x16_t v423;
  int8x16_t v424;
  int8x16_t v425;
  uint64_t v426;
  int8x16_t v427;
  int8x16_t v428;
  _DWORD *v429;
  float64x2_t v432;
  float64x2_t v435;
  float64x2_t v439;
  int8x16_t v444;
  int8x16_t v446;
  int8x16_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  int8x16_t *v453;
  _DWORD *v454;
  char *v455;
  uint64_t v456;
  int v457;
  char *v458;
  char *v459;
  uint64_t v460;
  uint64_t v461;
  unint64_t v462;
  unint64_t v463;
  _BYTE *v464;
  char *v465;
  int64_t v466;
  unint64_t v467;
  char *v468;
  int v469;
  unint64_t v470;
  uint64_t v471;
  uint64_t v472;
  _OWORD *v473;
  char *v474;
  uint64_t v475;
  __int128 v476;
  _DWORD *v477;
  _DWORD *v478;
  unsigned int v479;
  uint64_t v480;
  uint64_t v481;
  __int128 v482;
  uint64_t v483;
  uint64_t v484;
  char *v485;
  uint64_t v486;
  float64x2_t *v487;
  float64x2_t *v488;
  uint64_t v489;
  size_t v490;
  unsigned int v491;
  char *v492;
  uint64_t v493;
  char *v494;
  uint64_t v495;
  size_t v496;
  uint64_t v497;
  unsigned int v498;
  unsigned int v499;
  unsigned int v500;
  unsigned int v501;
  size_t v502;
  uint64_t v503;
  uint64_t v504;
  size_t v505;
  uint64_t v506;
  char *v507;
  size_t v508;
  uint64_t v509;
  size_t v510;
  float64x2_t v511;
  float64x2_t v512;
  float64x2_t v513;
  float64x2_t v514;
  float64x2_t v515;
  float64x2_t v516;
  float64x2_t v517;
  float64x2_t v518;
  float64x2_t v519;
  float64x2_t v520;
  float64x2_t v521;
  float64x2_t v522;
  float64x2_t v523;
  float64x2_t v524;
  float64x2_t v525;
  float64x2_t v526;
  float64x2_t v527;
  float64x2_t v528;
  float64x2_t v529;
  float64x2_t v530;
  float64x2_t v531;
  double v532;
  float64x2_t v533;
  float64x2_t v534;
  double v535;
  float64x2_t v536;
  float64x2_t v537;
  float64x2_t v538;
  float64x2_t v539;
  float64x2_t v540;
  double v541;
  float64x2_t v542;
  float64x2_t v543;
  double v544;
  float64x2_t v545;
  float64x2_t v546;
  double v547;
  float64x2_t v548;
  float64x2_t v549;
  float64x2_t v550;
  float64x2_t v551;
  float64x2_t v552;
  float64x2_t v553;
  float64x2_t v554;
  float64x2_t v555;
  float64x2_t v556;
  float64x2_t v557;
  float64x2_t v558;
  float64x2_t v559;
  float64x2_t v560;
  float64x2_t v561;
  float64x2_t v562;
  float64x2_t v563;
  float64x2_t v564;
  float64x2_t v565;
  float64x2_t v566;
  float64x2_t v567;
  float64x2_t v568;
  float64x2_t v569;
  float64x2_t v570;
  double v571;
  double v572;
  double v573;
  double v574;
  double v575;
  double v576;
  double v577;
  double v578;
  float64x2_t v579;
  float64x2_t v580;
  float64x2_t v581;
  float64x2_t v582;
  float64x2_t v583;
  float64x2_t v584;
  float64x2_t v585;
  float64x2_t v586;
  float64x2_t v587;
  float64x2_t v588;
  float64x2_t v589;
  float64x2_t v590;
  float64x2_t v591;
  float64x2_t v592;
  float64x2_t v593;
  float64x2_t v594;
  float64x2_t v595;
  float64x2_t v596;
  double v597;
  double v598;
  float64x2_t v599;
  float64x2_t v600;
  float64x2_t v601;
  float64x2_t v602;
  float64x2_t v603;
  float64x2_t v604;
  float64x2_t v605;
  float64x2_t v606;
  float64x2_t v607;
  float64x2_t v608;
  float64x2_t v609;
  float64x2_t v610;
  float64x2_t v611;
  float64x2_t v612;
  float64x2_t v613;
  float64x2_t v614;
  float64x2_t v615;
  float64x2_t v616;
  float64x2_t v617;
  float64x2_t v618;
  double v619;
  float64x2_t v620;
  double v621;
  float64x2_t v622;
  float64x2_t v623;
  float64x2_t v624;
  double v625;
  float64x2_t v626;
  float64x2_t v627;
  double v628;
  float64x2_t v629;
  float64x2_t v630;
  float64x2_t v631;
  double v632;
  double v633;
  double v634;
  float64x2_t v635;
  float64x2_t v636;
  float64x2_t v637;
  float64x2_t v638;
  float64x2_t v639;
  float64x2_t v640;
  float64x2_t v641;
  float64x2_t v642;
  float64x2_t v643;
  float64x2_t v644;
  float64x2_t v645;
  float64x2_t v646;
  float64x2_t v647;
  float64x2_t v648;
  float64x2_t v649;
  float64x2_t v650;
  float64x2_t v651;
  float64x2_t v652;
  float64x2_t v653;
  float64x2_t v654;
  float64x2_t v655;
  float64x2_t v656;
  float64x2_t v657;
  float64x2_t v658;
  float64x2_t v659;
  float64x2_t v660;
  float64x2_t v661;
  float64x2_t v662;
  float64x2_t v663;
  float64x2_t v664;
  float64x2_t v665;
  float64x2_t v666;
  float64x2_t v667;
  float64x2_t v668;
  float64x2_t v669;
  float64x2_t v670;
  double v671;
  float64x2_t v672;
  float64x2_t v673;
  float64x2_t v674;
  float64x2_t v675;
  float64x2_t v676;
  float64x2_t v677;
  float64x2_t v678;
  float64x2_t v679;
  float64x2_t v680;
  float64x2_t v681;
  float64x2_t v682;
  float64x2_t v683;
  float64x2_t v684;
  float64x2_t v685;
  float64x2_t v686;
  float64x2_t v687;
  float64x2_t v688;
  float64x2_t v689;
  float64x2_t v690;
  float64x2_t v691;
  float64x2_t v692;
  float64x2_t v693;
  float64x2_t v694;
  float64x2_t v695;
  float64x2_t v696;
  float64x2_t v697;
  float64x2_t v698;
  float64x2_t v699;
  float64x2_t v700;
  float64x2_t v701;
  float64x2_t v702;
  float64x2_t v703;
  uint64_t v704;
  float64x2_t v705;
  float64x2_t v706;
  float64x2_t v707;
  int v708;
  float64x2_t v709;
  float64x2_t v710;
  float64x2_t v711;
  float64x2_t v712;
  int8x16_t v713;
  float64x2_t v714;
  float64x2_t v715;
  float64x2_t v716;
  float64x2_t v717;
  float64x2_t v718;
  float64x2_t v719;
  float64x2_t v720;
  float64x2_t v721;
  float64x2_t v722;
  float64x2_t v723;
  float64x2_t v724;
  float64x2_t v725;
  float64x2_t v726;
  float64x2_t v727;
  float64x2_t v728;
  float64x2_t v729;
  float64x2_t v730;
  float64x2_t v731;
  float64x2_t v732;
  float64x2_t v733;
  float64x2_t v734;
  float64x2_t v735;
  float64x2_t v736;
  float64x2_t v737;
  float64x2_t v738;
  float64x2_t v739;
  float64x2_t v740;
  float64x2_t v741;
  float64x2_t v742;
  float64x2_t v743;
  float64x2_t v744;
  float64x2_t v745;
  float64x2_t v746;
  float64x2_t v747;
  float64x2_t v748;
  float64x2_t v749;
  float64x2_t v750;
  float64x2_t v751;
  float64x2_t v752;
  float64x2_t v753;
  float64x2_t v754;
  float64x2_t v755;
  float64x2_t v756;
  float64x2_t v757;
  float64x2_t v758;
  float64x2_t v759;
  float64x2_t v760;
  float64x2_t v761;
  float64x2_t v762;
  float64x2_t v763;
  float64x2_t v764;
  float64x2_t v765;
  float64x2_t v766;
  float64x2_t v767;
  float64x2_t v768;
  float64x2_t v769;
  float64x2_t v770;
  float64x2_t v771;
  int64x2_t v772;
  uint64_t v773;
  uint64_t v774;
  float64x2_t v775;
  float64x2_t v776;
  float64x2_t v777;
  float64x2_t v778;
  float64x2_t v779;
  float64x2_t v780;
  float64x2_t v781;
  float64x2_t v782;
  float64x2_t v783;
  float64x2_t v784;
  float64x2_t v785;
  float64x2_t v786;
  float64x2_t v787;
  float64x2_t v788;
  float64x2_t v789;
  double v790;
  float64x2_t v791;
  float64x2_t v792;
  float64x2_t v793;
  float64x2_t v794;
  float64x2_t v795;
  float64x2_t v796;
  float64x2_t v797;
  float64x2_t v798;
  float64x2_t v799;
  float64x2_t v800;
  float64x2_t v801;
  float64x2_t v802;
  float64x2_t v803;
  float64x2_t v804;
  float64x2_t v805;
  double v806;
  float64x2_t v807;
  float64x2_t v808;
  float64x2_t v809;
  float64x2_t v810;
  float64x2_t v811;
  float64x2_t v812;
  float64x2_t v813;
  float64x2_t v814;
  float64x2_t v815;
  float64x2_t v816;
  float64x2_t v817;
  float64x2_t v818;
  float64x2_t v819;
  float64x2_t v820;
  int8x16_t v821;
  double v822;
  float64x2_t v823;
  float64x2_t v824;
  float64x2_t v825;
  float64x2_t v826;
  float64x2_t v827;
  float64x2_t v828;
  float64x2_t v829;
  float64x2_t v830;
  float64x2_t v831;
  float64x2_t v832;
  float64x2_t v833;
  float64x2_t v834;
  float64x2_t v835;
  double v836;
  int8x16_t v837;
  float64x2_t v838;
  float64x2_t v839;
  unint64_t v840;
  float64x2_t v841;
  float64x2_t v842;
  float64x2_t v843;
  float64x2_t v844;
  float64x2_t v845;
  float64x2_t v846;
  _QWORD *v847;
  char **v848;
  uint64_t v849;
  float64x2_t v850;
  unint64_t v851;
  float64x2_t v852;
  float64x2_t v853;
  float64x2_t v854;
  float64x2_t v855;
  float64x2_t v856;
  float64x2_t v857;
  uint64_t *v858;
  int8x16_t v859;
  float64x2_t v860;
  float64x2_t v861;
  unint64_t v862;
  float64x2_t v863;
  float64x2_t v864;
  float64x2_t v865;
  float64x2_t v866;
  int v867;
  float64x2_t v868;
  uint64_t v869;
  float64x2_t v870;
  float64x2_t v871;
  unint64_t v872;
  float64x2_t v873;
  float64x2_t v874;
  float64x2_t v875;
  float64x2_t v876;
  unint64_t v877;
  double v878;
  int8x16_t v879;
  float64x2_t v880;
  float64x2_t v881;
  float64x2_t v882;
  float64x2_t v883;
  float64x2_t v884;
  float64x2_t v885;
  uint64_t v886;
  float64x2_t v887;
  __int128 v888;
  int8x16_t v889;
  float64x2_t v890;
  float64x2_t v891;
  float64x2_t v892;
  float64x2_t v893;
  float64x2_t v894;
  int8x16_t v895;
  double v896;
  float64x2_t v897;
  int8x16_t v898;
  double v899;
  float64x2_t v900;
  float64x2_t v901;
  float64x2_t v902;
  float64x2_t v903;
  _DWORD *v904;
  int64x2_t v905;
  int8x16_t v906;
  float64x2_t v907;
  float64x2_t v908;
  float64x2_t v909;
  float64x2_t v910;
  float64x2_t v911;
  float64x2_t v912;
  _DWORD *v913;
  int64x2_t v914;
  uint64_t v915;
  float64x2_t v916;
  double v917;
  float64x2_t v918;
  double v919;
  float64x2_t v920;
  double v921;
  float64x2_t v922;
  float64x2_t v923;
  float64x2_t v924;
  float64x2_t v925;
  double v926;
  float64x2_t v927;
  float64x2_t v928;
  float64x2_t v929;
  float64x2_t v930;
  double v931;
  float64x2_t v932;
  float64x2_t v933;
  float64x2_t v934;
  float64x2_t v935;
  double v936;
  float64x2_t v937;
  float64x2_t v938;
  float64x2_t v939;
  float64x2_t v940;
  double v941;
  float64x2_t v942;
  float64x2_t v943;
  float64x2_t v944;
  float64x2_t v945;
  double v946;
  float64x2_t v947;
  float64x2_t v948;
  float64x2_t v949;
  float64x2_t v950;
  double v951;
  float64x2_t v952;
  float64x2_t v953;
  float64x2_t v954;
  float64x2_t v955;
  double v956;
  float64x2_t v957;
  float64x2_t v958;
  float64x2_t v959;
  float64x2_t v960;
  double v961;
  float64x2_t v962;
  float64x2_t v963;
  float64x2_t v964;
  float64x2_t v965;
  uint64_t v966;
  _BYTE v967[112];
  _BYTE v968[176];
  int v969;
  float64x2_t *v970;
  void *v971;
  size_t v972;
  uint64_t v973;
  __int128 __src;
  __int128 v975;
  __int128 v976;
  __int128 v977;
  __int128 v978;
  int8x16_t v979;
  __int128 v980;
  __int128 v981;
  __int128 v982;
  __int128 v983;
  __int128 v984;
  __int128 v985;
  __int128 v986;
  __int128 v987;
  __int128 v988;
  __int128 v989;
  __int128 v990;
  __int128 v991;
  __int128 v992;
  __int128 v993;
  uint64_t v994;

  result = MEMORY[0x24BDAC7A8](a1);
  v994 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(result + 5184) == *(_QWORD *)(result + 5176))
    return result;
  v3 = v2;
  v4 = result;
  result = sub_20FB675CC(result + 5168, 0);
  if ((_DWORD)result != 1)
    return result;
  v5 = *(int **)(v4 + 5176);
  v774 = v4;
  v6 = *(int **)(v4 + 5272);
  v969 = *v5;
  v708 = *v6;
  if (v969 != *v6
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 3177, (uint64_t)"pose_variable_id == vel_and_bias_variable_id", 44, (uint64_t)"First pose ID different", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v7.f64[0] = *(float64_t *)(v3 + 16);
  v8 = *(int64x2_t *)(v3 + 24);
  v9 = *(double *)(v3 + 64);
  v10 = *(_OWORD *)(v3 + 48);
  v11 = vzip1q_s64(*(int64x2_t *)v3, v8);
  v12 = vzip2q_s64(*(int64x2_t *)v3, v8);
  v7.f64[1] = *(float64_t *)(v3 + 40);
  v917 = *(double *)(v3 + 48);
  v916 = (float64x2_t)v11;
  v905 = v11;
  v919 = *((double *)&v10 + 1);
  v918 = (float64x2_t)v12;
  v914 = v12;
  v921 = v9;
  v920 = v7;
  v897 = v7;
  memset(&v967[8], 0, 104);
  memset(&v968[8], 0, 48);
  memset(&v968[72], 0, 32);
  memset(&v968[120], 0, 32);
  *(_QWORD *)v967 = 0x3FF0000000000000;
  *(_QWORD *)&v967[56] = 0x3FF0000000000000;
  *(_QWORD *)v968 = 0x3FF0000000000000;
  *(int64x2_t *)&v968[56] = v11;
  v888 = v10;
  *(_QWORD *)&v968[120] = *((_QWORD *)&v10 + 1);
  *(int64x2_t *)&v968[104] = v12;
  *(float64x2_t *)&v968[152] = v7;
  *(_QWORD *)&v968[72] = v10;
  *(float64_t *)&v968[168] = v9;
  bzero(&v922.f64[1], 0x278uLL);
  v938.f64[1] = 1.0;
  v944.f64[0] = 1.0;
  v949.f64[1] = 1.0;
  v955.f64[0] = 1.0;
  v960.f64[1] = 1.0;
  *(double *)&v966 = 1.0;
  v922 = (float64x2_t)v905;
  v928.f64[0] = *((float64_t *)&v888 + 1);
  v927 = (float64x2_t)v914;
  v932 = v897;
  *(_QWORD *)&v923.f64[0] = v888;
  v933.f64[0] = v9;
  v13 = *((_QWORD *)v5 + 1);
  LODWORD(__src) = 3;
  *((_QWORD *)&__src + 1) = v13 + 32;
  LODWORD(v975) = 0;
  *(_QWORD *)&v980 = 0;
  v979 = 0uLL;
  sub_20F053450((unsigned int *)&__src, (double *)v979.i64);
  v869 = v980;
  v859 = v979;
  v849 = *(_QWORD *)(v13 + 120);
  v837 = *(int8x16_t *)(v13 + 104);
  v14 = (int8x16_t *)*((_QWORD *)v6 + 1);
  v704 = v14[6].i64[0];
  v906 = v14[5];
  v898 = v14[4];
  v889 = v14[3];
  v879 = v14[2];
  v915 = v774 + 43056;
  v15 = sub_20FB50520(&v969, v774 + 43056, dword_2103B93C4);
  v16 = v774;
  v17 = v774 + 44800;
  v848 = (char **)(v774 + 44800);
  if ((v15 & 0x8000000000000000) != 0)
    goto LABEL_32;
  v18 = v859;
  v19.i64[0] = vextq_s8(v837, v837, 8uLL).u64[0];
  v20.i64[0] = v869;
  v20.i64[1] = v837.i64[0];
  v19.i64[1] = v849;
  v18.i64[1] = vextq_s8(v18, v18, 8uLL).u64[0];
  v21 = HIDWORD(v15);
  v22 = (int8x16_t *)(*(_QWORD *)(v774 + 27728) + 8 * HIDWORD(v15));
  v22[1] = v20;
  v22[2] = v19;
  *v22 = v18;
  v23 = (_QWORD *)(v774 + 27856);
  sub_20F926890((_QWORD *)(v774 + 27856), (void **)v17);
  sub_20F20B6B0(v17);
  v24 = *(unsigned int *)(v774 + 44816);
  v25 = *(unsigned int *)(v774 + 44820);
  v26 = *(char **)v17;
  v27 = (float64x2_t *)(*(_QWORD *)v17 + 8 * (v21 + v21 * v24));
  v664 = v27[2];
  v714 = v27[1];
  v652 = *v27;
  v28 = (float64x2_t *)((char *)v27 + 8 * v24);
  v667 = v28[2];
  v721 = v28[1];
  v654 = *v28;
  v29 = &v27[v24];
  v685 = v29[2];
  v670 = v29[1];
  v659 = *v29;
  v30 = (float64x2_t *)((char *)v27 + 24 * v24);
  v690 = v30[2];
  v672 = v30[1];
  v870 = *v30;
  v31 = &v27[2 * v24];
  v695 = v31[2];
  v676 = v31[1];
  v860 = *v31;
  v32 = (float64x2_t *)((char *)v27 + 40 * v24);
  v700 = v32[2];
  v680 = v32[1];
  v662 = *v32;
  v753 = *(float64x2_t *)&v967[16];
  v850 = *(float64x2_t *)v967;
  v799 = *(float64x2_t *)&v967[80];
  v759 = *(float64x2_t *)&v967[64];
  v791 = *(float64x2_t *)&v967[32];
  v838 = *(float64x2_t *)&v967[48];
  v765 = *(float64x2_t *)v968;
  v728 = *(float64x2_t *)&v967[96];
  v823 = *(float64x2_t *)&v968[64];
  v772 = *(int64x2_t *)&v968[48];
  v807 = *(float64x2_t *)&v968[16];
  v735 = *(float64x2_t *)&v968[32];
  v783 = *(float64x2_t *)&v968[96];
  v747 = *(float64x2_t *)&v968[80];
  v33 = (uint64_t *)(v774 + 44872);
  v970 = (float64x2_t *)v967;
  LODWORD(__src) = 6;
  *(_QWORD *)((char *)&__src + 4) = __PAIR64__(v24, v25);
  *(_QWORD *)&v975 = &v26[8 * v21];
  DWORD2(v975) = v21;
  v830 = *(float64x2_t *)&v968[160];
  v775 = *(float64x2_t *)&v968[144];
  v815 = *(float64x2_t *)&v968[112];
  v740 = *(float64x2_t *)&v968[128];
  if (*(_DWORD *)(v774 + 44888) != 6 || (_DWORD)v25 != *(_DWORD *)(v774 + 44892))
  {
    v34 = *v33;
    if (v26 == (char *)*v33)
    {
      v53 = (8 * (6 * v25) + 31) & 0xFFFFFFFE0;
      v972 = v53 >> 3;
      v971 = operator new(v53, (std::align_val_t)0x20uLL);
      LODWORD(v973) = 6;
      HIDWORD(v973) = v25;
      v979.i64[1] = (uint64_t)&v970;
      *(_QWORD *)&v980 = &__src;
      *((_QWORD *)&v980 + 1) = 0x3FF0000000000000;
      sub_20FB70B10((uint64_t)&v971, (uint64_t)&v979);
      v54 = *(_QWORD *)(v774 + 44872);
      v55 = v972;
      *(_QWORD *)(v774 + 44872) = v971;
      *(_QWORD *)(v774 + 44880) = v55;
      *(_QWORD *)(v774 + 44888) = v973;
      if (v54)
        MEMORY[0x212BC6368](v54, 0x1000C8000313F17);
      goto LABEL_14;
    }
    *(_DWORD *)(v774 + 44888) = 6;
    *(_DWORD *)(v774 + 44892) = v25;
    if (*(_QWORD *)(v774 + 44880) < (unint64_t)(6 * v25))
    {
      if (v34)
        MEMORY[0x212BC6368](v34, 0x1000C8000313F17);
      v35 = (48 * v25 + 31) & 0x7FFFFFFFE0;
      *(_QWORD *)(v774 + 44872) = 0;
      *(_QWORD *)(v774 + 44880) = v35 >> 3;
      *(_QWORD *)(v774 + 44872) = operator new(v35, (std::align_val_t)0x20uLL);
    }
  }
  v979.i64[1] = (uint64_t)&v970;
  *(_QWORD *)&v980 = &__src;
  *((_QWORD *)&v980 + 1) = 0x3FF0000000000000;
  sub_20FB70B10(v774 + 44872, (uint64_t)&v979);
LABEL_14:
  v36 = *(_DWORD *)(v774 + 44816);
  v37 = *(char **)v17;
  v38 = *(unsigned int *)(v774 + 44888);
  v39 = *(char **)(v774 + 44872);
  if ((_DWORD)v38)
  {
    v40 = *(unsigned int *)(v774 + 44892);
    if ((_DWORD)v40)
    {
      v41 = 8 * v38;
      v42 = 8 * (int)v38;
      v43 = v21;
      do
      {
        memmove(&v37[8 * v43], v39, v41);
        v43 += v36;
        v39 += v42;
        --v40;
      }
      while (v40);
      v17 = v774 + 44800;
      v36 = *(_DWORD *)(v774 + 44816);
      v37 = *v848;
      v39 = *(char **)(v774 + 44872);
    }
  }
  v44 = v36 * v21;
  v979.i64[0] = v36 | 0x600000000;
  v979.i32[2] = v36;
  *(_QWORD *)&v980 = &v37[8 * v36 * v21];
  DWORD2(v980) = v36 * v21;
  if (v39 == v37)
  {
    v46 = *(_DWORD *)(v17 + 88);
    v45 = *(_DWORD *)(v17 + 92);
    v47 = (8 * v46 * v45 + 31) & 0xFFFFFFFE0;
    *((_QWORD *)&__src + 1) = v47 >> 3;
    *(_QWORD *)&__src = operator new(v47, (std::align_val_t)0x20uLL);
    *(_QWORD *)&v975 = __PAIR64__(v46, v45);
    sub_20F2B8274((unint64_t)&__src, v33);
    if ((_DWORD)v975)
    {
      v48 = DWORD1(v975);
      v49 = __src;
      if (DWORD1(v975))
      {
        v50 = 8 * v975;
        v51 = 8 * (int)v975;
        v52 = (char *)__src;
        do
        {
          memmove(&v39[8 * v44], v52, v50);
          v44 += v36;
          v52 += v51;
          --v48;
        }
        while (v48);
        v17 = v774 + 44800;
      }
    }
    else
    {
      v49 = __src;
    }
    if (v49)
      MEMORY[0x212BC6368](v49, 0x1000C8000313F17);
  }
  else
  {
    sub_20FB70C74((uint64_t)&v979, v33);
  }
  v56 = (float64x2_t)vzip1q_s64((int64x2_t)v850, (int64x2_t)v838);
  v57 = (float64x2_t)vzip2q_s64((int64x2_t)v850, (int64x2_t)v838);
  v58 = vmlaq_laneq_f64(vmulq_n_f64(v56, v652.f64[0]), v57, v652, 1);
  *(_QWORD *)&v59.f64[0] = vdupq_laneq_s64((int64x2_t)v728, 1).u64[0];
  v59.f64[1] = v735.f64[1];
  v60 = (float64x2_t)vzip1q_s64((int64x2_t)v728, (int64x2_t)v735);
  *(_QWORD *)&v61.f64[0] = vdupq_laneq_s64((int64x2_t)v747, 1).u64[0];
  v62 = vmlaq_laneq_f64(vmulq_n_f64(v60, v652.f64[0]), v59, v652, 1);
  v61.f64[1] = v740.f64[1];
  v63 = (float64x2_t)vzip1q_s64((int64x2_t)v747, (int64x2_t)v740);
  v64 = vmlaq_laneq_f64(vmulq_n_f64(v56, v654.f64[0]), v57, v654, 1);
  v65 = vmlaq_laneq_f64(vmulq_n_f64(v60, v654.f64[0]), v59, v654, 1);
  v66 = vmlaq_laneq_f64(vmulq_n_f64(v56, v659.f64[0]), v57, v659, 1);
  v67 = vmlaq_laneq_f64(vmulq_n_f64(v60, v659.f64[0]), v59, v659, 1);
  v68 = vmlaq_laneq_f64(vmulq_n_f64(v63, v659.f64[0]), v61, v659, 1);
  v660 = vmlaq_laneq_f64(vmulq_n_f64(v56, v870.f64[0]), v57, v870, 1);
  v69 = vmlaq_laneq_f64(vmulq_n_f64(v60, v870.f64[0]), v59, v870, 1);
  v70 = vmlaq_laneq_f64(vmulq_n_f64(v63, v870.f64[0]), v61, v870, 1);
  v871 = vmlaq_laneq_f64(vmulq_n_f64(v56, v860.f64[0]), v57, v860, 1);
  v71 = vmlaq_laneq_f64(vmulq_n_f64(v60, v860.f64[0]), v59, v860, 1);
  v72 = vmlaq_laneq_f64(vmulq_n_f64(v63, v860.f64[0]), v61, v860, 1);
  v861 = vmlaq_laneq_f64(vmulq_n_f64(v56, v662.f64[0]), v57, v662, 1);
  v73 = vmlaq_laneq_f64(vmulq_n_f64(v60, v662.f64[0]), v59, v662, 1);
  v74 = vmlaq_laneq_f64(vmulq_n_f64(v63, v662.f64[0]), v61, v662, 1);
  *(_QWORD *)&v57.f64[0] = vdupq_laneq_s64((int64x2_t)v765, 1).u64[0];
  *(_QWORD *)&v57.f64[1] = v772.i64[1];
  *(_QWORD *)&v59.f64[0] = vdupq_laneq_s64((int64x2_t)v783, 1).u64[0];
  v59.f64[1] = v775.f64[1];
  v75 = (float64x2_t)vzip1q_s64((int64x2_t)v753, (int64x2_t)v759);
  v76 = (float64x2_t)vzip1q_s64((int64x2_t)v765, v772);
  v77 = (float64x2_t)vzip1q_s64((int64x2_t)v783, (int64x2_t)v775);
  v78 = (float64x2_t)vzip2q_s64((int64x2_t)v753, (int64x2_t)v759);
  v79 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v63, v652.f64[0]), v61, v652, 1), v77, v714.f64[0]), v59, v714, 1);
  v80 = vmlaq_laneq_f64(vmlaq_n_f64(v64, v75, v721.f64[0]), v78, v721, 1);
  v81 = vmlaq_laneq_f64(vmlaq_n_f64(v65, v76, v721.f64[0]), v57, v721, 1);
  v82 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v63, v654.f64[0]), v61, v654, 1), v77, v721.f64[0]), v59, v721, 1);
  *(_QWORD *)&v61.f64[0] = vdupq_laneq_s64((int64x2_t)v807, 1).u64[0];
  v61.f64[1] = v823.f64[1];
  *(_QWORD *)&v60.f64[0] = vdupq_laneq_s64((int64x2_t)v815, 1).u64[0];
  v60.f64[1] = v830.f64[1];
  v83 = (float64x2_t)vzip1q_s64((int64x2_t)v791, (int64x2_t)v799);
  v84 = (float64x2_t)vzip1q_s64((int64x2_t)v807, (int64x2_t)v823);
  v722 = (float64x2_t)vzip1q_s64((int64x2_t)v815, (int64x2_t)v830);
  v663 = (float64x2_t)vzip2q_s64((int64x2_t)v791, (int64x2_t)v799);
  v85 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v58, v75, v714.f64[0]), v78, v714, 1), v83, v664.f64[0]), v663, v664, 1);
  v86 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v62, v76, v714.f64[0]), v57, v714, 1), v84, v664.f64[0]), v61, v664, 1);
  v715 = v60;
  v87 = vmlaq_laneq_f64(vmlaq_n_f64(v79, v722, v664.f64[0]), v60, v664, 1);
  v88 = vmlaq_laneq_f64(vmlaq_n_f64(v80, v83, v667.f64[0]), v663, v667, 1);
  v89 = vmlaq_laneq_f64(vmlaq_n_f64(v81, v84, v667.f64[0]), v61, v667, 1);
  v90 = v61;
  v91 = vmlaq_laneq_f64(vmlaq_n_f64(v82, v722, v667.f64[0]), v60, v667, 1);
  v92 = vmlaq_laneq_f64(vmulq_n_f64(v85, v850.f64[0]), v88, v850, 1);
  v93 = vmlaq_laneq_f64(vmulq_n_f64(v86, v850.f64[0]), v89, v850, 1);
  v94 = vmlaq_laneq_f64(vmulq_n_f64(v87, v850.f64[0]), v91, v850, 1);
  v653 = vmlaq_laneq_f64(vmulq_n_f64(v85, v838.f64[0]), v88, v838, 1);
  v665 = vmlaq_laneq_f64(vmulq_n_f64(v86, v838.f64[0]), v89, v838, 1);
  v668 = vmlaq_laneq_f64(vmulq_n_f64(v87, v838.f64[0]), v91, v838, 1);
  v646 = vmlaq_laneq_f64(vmulq_n_f64(v85, v728.f64[0]), v88, v728, 1);
  v839 = vmlaq_laneq_f64(vmulq_n_f64(v86, v728.f64[0]), v89, v728, 1);
  v729 = vmlaq_laneq_f64(vmulq_n_f64(v87, v728.f64[0]), v91, v728, 1);
  v645 = vmlaq_laneq_f64(vmulq_n_f64(v85, v735.f64[0]), v88, v735, 1);
  v641 = vmlaq_laneq_f64(vmulq_n_f64(v86, v735.f64[0]), v89, v735, 1);
  v643 = vmlaq_laneq_f64(vmulq_n_f64(v87, v735.f64[0]), v91, v735, 1);
  v95 = vmlaq_laneq_f64(vmulq_n_f64(v85, v747.f64[0]), v88, v747, 1);
  v736 = vmlaq_laneq_f64(vmulq_n_f64(v86, v747.f64[0]), v89, v747, 1);
  v748 = vmlaq_laneq_f64(vmulq_n_f64(v87, v747.f64[0]), v91, v747, 1);
  v96 = vmlaq_laneq_f64(vmulq_n_f64(v85, v740.f64[0]), v88, v740, 1);
  v97 = vmlaq_laneq_f64(vmulq_n_f64(v86, v740.f64[0]), v89, v740, 1);
  v98 = vmlaq_laneq_f64(vmulq_n_f64(v87, v740.f64[0]), v91, v740, 1);
  v99 = vmlaq_laneq_f64(vmlaq_n_f64(v71, v76, v676.f64[0]), v57, v676, 1);
  v100 = vmlaq_laneq_f64(vmlaq_n_f64(v73, v76, v680.f64[0]), v57, v680, 1);
  v101 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v66, v75, v670.f64[0]), v78, v670, 1), v83, v685.f64[0]), v663, v685, 1);
  v655 = v90;
  v102 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v67, v76, v670.f64[0]), v57, v670, 1), v84, v685.f64[0]), v90, v685, 1);
  v103 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v68, v77, v670.f64[0]), v59, v670, 1), v722, v685.f64[0]), v715, v685, 1);
  v104 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v660, v75, v672.f64[0]), v78, v672, 1), v83, v690.f64[0]), v663, v690, 1);
  v105 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v69, v76, v672.f64[0]), v57, v672, 1), v84, v690.f64[0]), v90, v690, 1);
  v106 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v70, v77, v672.f64[0]), v59, v672, 1), v722, v690.f64[0]), v715, v690, 1);
  v741 = vmlaq_n_f64(v95, v101, v783.f64[0]);
  v107 = vmlaq_n_f64(v97, v102, v775.f64[0]);
  v108 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v871, v75, v676.f64[0]), v78, v676, 1), v83, v695.f64[0]), v663, v695, 1);
  v109 = vmlaq_laneq_f64(vmlaq_n_f64(v99, v84, v695.f64[0]), v90, v695, 1);
  v110 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v72, v77, v676.f64[0]), v59, v676, 1), v722, v695.f64[0]), v715, v695, 1);
  v111 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v861, v75, v680.f64[0]), v78, v680, 1), v83, v700.f64[0]), v663, v700, 1);
  v112 = vmlaq_laneq_f64(vmlaq_n_f64(v100, v84, v700.f64[0]), v655, v700, 1);
  v113 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v74, v77, v680.f64[0]), v59, v680, 1), v722, v700.f64[0]), v715, v700, 1);
  v114 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v92, v101, v753.f64[0]), v104, v753, 1), v108, v791.f64[0]), v111, v791, 1);
  v115 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v93, v102, v753.f64[0]), v105, v753, 1), v109, v791.f64[0]), v112, v791, 1);
  v116 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v94, v103, v753.f64[0]), v106, v753, 1), v110, v791.f64[0]), v113, v791, 1);
  v117 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v653, v101, v759.f64[0]), v104, v759, 1), v108, v799.f64[0]), v111, v799, 1);
  v118 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v665, v102, v759.f64[0]), v105, v759, 1), v109, v799.f64[0]), v112, v799, 1);
  v119 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v668, v103, v759.f64[0]), v106, v759, 1), v110, v799.f64[0]), v113, v799, 1);
  v120 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v646, v101, v765.f64[0]), v104, v765, 1), v108, v807.f64[0]), v111, v807, 1);
  v121 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v839, v102, v765.f64[0]), v105, v765, 1), v109, v807.f64[0]), v112, v807, 1);
  v122 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v729, v103, v765.f64[0]), v106, v765, 1), v110, v807.f64[0]), v113, v807, 1);
  v123 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v645, v101, *(double *)v772.i64), v104, (float64x2_t)v772, 1), v108, v823.f64[0]), v111, v823, 1);
  v124 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v641, v102, *(double *)v772.i64), v105, (float64x2_t)v772, 1), v109, v823.f64[0]), v112, v823, 1);
  v125 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v643, v103, *(double *)v772.i64), v106, (float64x2_t)v772, 1), v110, v823.f64[0]), v113, v823, 1);
  v126 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v741, v104, v783, 1), v108, v815.f64[0]), v111, v815, 1);
  v127 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v736, v102, v783.f64[0]), v105, v783, 1), v109, v815.f64[0]), v112, v815, 1);
  v128 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v748, v103, v783.f64[0]), v106, v783, 1), v110, v815.f64[0]), v113, v815, 1);
  v129 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v96, v101, v775.f64[0]), v104, v775, 1), v108, v830.f64[0]), v111, v830, 1);
  v130 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v107, v105, v775, 1), v109, v830.f64[0]), v112, v830, 1);
  v131 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v98, v103, v775.f64[0]), v106, v775, 1), v110, v830.f64[0]), v113, v830, 1);
  v115.i64[1] = vextq_s8(v115, v115, 8uLL).u64[0];
  v114.i64[1] = vextq_s8(v114, v114, 8uLL).u64[0];
  v132 = *(unsigned int *)(v17 + 16);
  v133 = (int8x16_t *)(*(_QWORD *)v17 + 8 * (v21 + v21 * v132));
  *v133 = v114;
  v133[1] = v115;
  v114.i64[0] = v116.i64[0];
  v114.i64[1] = vextq_s8(v116, v116, 8uLL).u64[0];
  v119.i64[1] = vextq_s8(v119, v119, 8uLL).u64[0];
  v133[2] = v114;
  v134 = (int8x16_t *)((char *)v133 + 8 * v132);
  v114.i64[0] = v118.i64[0];
  v114.i64[1] = vextq_s8(v118, v118, 8uLL).u64[0];
  v135 = v114;
  v114.i64[0] = v117.i64[0];
  v114.i64[1] = vextq_s8(v117, v117, 8uLL).u64[0];
  v134[1] = v135;
  v134[2] = v119;
  *v134 = v114;
  v114.i64[0] = v122.i64[0];
  v114.i64[1] = vextq_s8(v122, v122, 8uLL).u64[0];
  v136 = v114;
  v114.i64[0] = v121.i64[0];
  v114.i64[1] = vextq_s8(v121, v121, 8uLL).u64[0];
  v137 = &v133[v132];
  v137[1] = v114;
  v137[2] = v136;
  v120.i64[1] = vextq_s8(v120, v120, 8uLL).u64[0];
  *v137 = v120;
  v125.i64[1] = vextq_s8(v125, v125, 8uLL).u64[0];
  v138 = (int8x16_t *)((char *)v133 + 24 * v132);
  v114.i64[0] = v124.i64[0];
  v114.i64[1] = vextq_s8(v124, v124, 8uLL).u64[0];
  v139 = v114;
  v114.i64[0] = v123.i64[0];
  v114.i64[1] = vextq_s8(v123, v123, 8uLL).u64[0];
  v138[1] = v139;
  v138[2] = v125;
  *v138 = v114;
  v128.i64[1] = vextq_s8(v128, v128, 8uLL).u64[0];
  v127.i64[1] = vextq_s8(v127, v127, 8uLL).u64[0];
  v114.i64[0] = v126.i64[0];
  v114.i64[1] = vextq_s8(v126, v126, 8uLL).u64[0];
  v140 = &v133[2 * v132];
  v140[1] = v127;
  v140[2] = v128;
  *v140 = v114;
  v131.i64[1] = vextq_s8(v131, v131, 8uLL).u64[0];
  v141 = (int8x16_t *)((char *)v133 + 40 * v132);
  v130.i64[1] = vextq_s8(v130, v130, 8uLL).u64[0];
  v114.i64[0] = v129.i64[0];
  v114.i64[1] = vextq_s8(v129, v129, 8uLL).u64[0];
  v141[1] = v130;
  v141[2] = v131;
  *v141 = v114;
  v982 = 0u;
  v983 = 0u;
  v980 = 0u;
  v981 = 0u;
  v978 = 0u;
  v979 = 0u;
  v976 = 0u;
  v977 = 0u;
  __src = 0u;
  v975 = 0u;
  LODWORD(v971) = 0;
  LODWORD(v970) = 0;
  sub_20F8E03B8(v23, (int *)&v971, &v970, &v979, &__src);
  sub_20FB75740((uint64_t)v23, (uint64_t *)v17, (unsigned int *)&v979, (unsigned int *)&__src);
  v16 = v774;
LABEL_32:
  v142 = 0;
  v143 = 0;
  v144 = 0;
  v145 = 0;
  v146 = 0;
  v992 = 0u;
  v993 = 0u;
  v990 = 0u;
  v991 = 0u;
  v773 = v16 + 43080;
  v988 = 0u;
  v989 = 0u;
  v872 = vextq_s8(v906, v906, 8uLL).u64[0];
  v862 = vextq_s8(v898, v898, 8uLL).u64[0];
  v851 = vextq_s8(v889, v889, 8uLL).u64[0];
  v840 = vextq_s8(v879, v879, 8uLL).u64[0];
  v986 = 0u;
  v987 = 0u;
  v984 = 0u;
  v985 = 0u;
  v982 = 0u;
  v983 = 0u;
  v980 = 0u;
  v981 = 0u;
  v979 = 0u;
  __src = 0uLL;
  *(_QWORD *)&v975 = 0;
  do
  {
    if (v142 < v145)
    {
      *(_DWORD *)v142 = v144;
      v147 = (uint64_t)(v142 + 4);
      goto LABEL_34;
    }
    v148 = (v142 - v146) >> 2;
    v149 = v148 + 1;
    if ((unint64_t)(v148 + 1) >> 62)
    {
      *(_QWORD *)&v975 = v145;
      *((_QWORD *)&__src + 1) = v142;
      *(_QWORD *)&__src = v146;
      sub_20E867F44();
    }
    if ((v145 - v146) >> 1 > v149)
      v149 = (v145 - v146) >> 1;
    if ((unint64_t)(v145 - v146) >= 0x7FFFFFFFFFFFFFFCLL)
      v150 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v150 = v149;
    if (v150)
    {
      if (v150 >> 62)
      {
        *(_QWORD *)&v975 = v145;
        *(_QWORD *)&__src = v146;
        sub_20E877A38();
      }
      v151 = operator new(4 * v150);
      v152 = &v151[4 * v148];
      *(_DWORD *)v152 = v144;
      v147 = (uint64_t)(v152 + 4);
      v153 = v142 - v146;
      if (v142 == v146)
        goto LABEL_50;
    }
    else
    {
      v151 = 0;
      v152 = (char *)(4 * v148);
      *(_DWORD *)(4 * v148) = v144;
      v147 = 4 * v148 + 4;
      v153 = v142 - v146;
      if (v142 == v146)
        goto LABEL_50;
    }
    v154 = v153 - 4;
    if (v154 >= 0xBC)
    {
      v157 = (v142 - 4 - v146) & 0xFFFFFFFFFFFFFFFCLL;
      if (&v151[v142 - v146 - 4 - v157] > &v151[v142 - v146 - 4])
      {
        v155 = v142;
      }
      else if (&v142[-v157 - 4] > v142 - 4)
      {
        v155 = v142;
      }
      else if ((unint64_t)(v146 - v151) >= 0x20)
      {
        v158 = (v154 >> 2) + 1;
        v159 = 4 * (v158 & 0x7FFFFFFFFFFFFFF8);
        v155 = &v142[-v159];
        v152 -= v159;
        v160 = &v151[4 * v148 - 16];
        v161 = v142 - 16;
        v162 = v158 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v163 = *(_OWORD *)v161;
          *(v160 - 1) = *((_OWORD *)v161 - 1);
          *v160 = v163;
          v160 -= 2;
          v161 -= 32;
          v162 -= 8;
        }
        while (v162);
        if (v158 == (v158 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_50;
      }
      else
      {
        v155 = v142;
      }
    }
    else
    {
      v155 = v142;
    }
    do
    {
      v156 = *((_DWORD *)v155 - 1);
      v155 -= 4;
      *((_DWORD *)v152 - 1) = v156;
      v152 -= 4;
    }
    while (v155 != v146);
LABEL_50:
    v145 = &v151[4 * v150];
    if (v146)
      operator delete(v146);
    v146 = v152;
LABEL_34:
    v144 += dword_2103B93C4[v143] * ((*(_QWORD *)(v915 + 24 * v143 + 8) - *(_QWORD *)(v915 + 24 * v143)) >> 2);
    ++v143;
    v142 = (char *)v147;
  }
  while (v143 != 10);
  v164 = *(_DWORD **)v773;
  v165 = *(_DWORD **)(v773 + 8);
  if (*(_DWORD **)v773 == v165)
  {
    v166 = -1;
    v167 = (_QWORD *)v774;
    v168 = v774 + 44800;
    if (v146)
      goto LABEL_69;
  }
  else
  {
    v166 = *((_DWORD *)v146 + 1);
    v167 = (_QWORD *)v774;
    v168 = v774 + 44800;
    while (*v164 != v708)
    {
      v166 += 9;
      if (++v164 == v165)
      {
        v166 = -1;
        break;
      }
    }
    if (v146)
LABEL_69:
      operator delete(v146);
  }
  result = sub_20F89E908((uint64_t)&v979);
  if ((v166 & 0x80000000) == 0)
  {
    *(_QWORD *)&v169 = v879.i64[0];
    *((_QWORD *)&v169 + 1) = v840;
    *(_QWORD *)&v170 = v889.i64[0];
    *((_QWORD *)&v170 + 1) = v851;
    v171 = v167[3466] + 8 * v166;
    *(_OWORD *)v171 = v169;
    *(_OWORD *)(v171 + 16) = v170;
    *(_QWORD *)&v169 = v898.i64[0];
    *((_QWORD *)&v169 + 1) = v862;
    *(_QWORD *)(v171 + 64) = v704;
    *(_QWORD *)&v170 = v906.i64[0];
    *((_QWORD *)&v170 + 1) = v872;
    *(_OWORD *)(v171 + 32) = v169;
    *(_OWORD *)(v171 + 48) = v170;
    v172 = v167 + 3482;
    sub_20F926890(v167 + 3482, (void **)v168);
    sub_20F20B6B0(v168);
    v173 = *(unsigned int *)(v168 + 16);
    v174 = *(unsigned int *)(v168 + 20);
    v175 = *(char **)v168;
    v176 = *(_QWORD *)v168 + 8 * (v166 + v166 * (_DWORD)v173);
    v899 = *(double *)(v176 + 64);
    v880 = *(float64x2_t *)(v176 + 48);
    v824 = *(float64x2_t *)(v176 + 32);
    v792 = *(float64x2_t *)(v176 + 16);
    v776 = *(float64x2_t *)v176;
    v177 = (float64x2_t *)(v176 + 8 * v173);
    v633 = v177[4].f64[0];
    v907 = v177[3];
    v852 = v177[2];
    v808 = v177[1];
    v784 = *v177;
    v178 = v176 + 16 * v173;
    v532 = *(double *)(v178 + 64);
    v530 = *(float64x2_t *)(v178 + 48);
    v179 = *(float64x2_t *)(v178 + 16);
    v526 = *(float64x2_t *)(v178 + 32);
    v800 = *(float64x2_t *)v178;
    v180 = (float64x2_t *)(v176 + 24 * v173);
    v535 = v180[4].f64[0];
    v533 = v180[3];
    v528 = v180[2];
    v523 = v179;
    v524 = v180[1];
    v816 = *v180;
    v181 = v176 + 32 * v173;
    v541 = *(double *)(v181 + 64);
    v182 = *(float64x2_t *)(v181 + 32);
    v539 = *(float64x2_t *)(v181 + 48);
    v525 = *(float64x2_t *)(v181 + 16);
    v841 = *(float64x2_t *)v181;
    v183 = (float64x2_t *)(v176 + 40 * v173);
    v544 = v183[4].f64[0];
    v542 = v183[3];
    v536 = v182;
    v537 = v183[2];
    v527 = v183[1];
    v863 = *v183;
    v184 = (float64x2_t *)(v176 + 48 * v173);
    v547 = v184[4].f64[0];
    v185 = (float64x2_t *)(v176 + 56 * v173);
    v186 = v176 + (v173 << 6);
    v970 = &v922;
    v187 = (uint64_t *)(v168 + 72);
    v538 = v184[2];
    v529 = v184[1];
    v873 = *v184;
    v597 = v185[4].f64[0];
    v545 = v184[3];
    v546 = v185[3];
    v540 = v185[2];
    v531 = v185[1];
    v890 = *v185;
    v578 = *(double *)(v186 + 64);
    v188 = *(float64x2_t *)(v186 + 48);
    v543 = *(float64x2_t *)(v186 + 32);
    v534 = *(float64x2_t *)(v186 + 16);
    v522 = *(float64x2_t *)v186;
    LODWORD(__src) = 9;
    *(_QWORD *)((char *)&__src + 4) = __PAIR64__(v173, v174);
    *(_QWORD *)&v975 = &v175[8 * v166];
    DWORD2(v975) = v166;
    v569 = v940;
    v570 = v188;
    v596 = v925;
    v591 = v924;
    v585 = v923;
    v631 = v922;
    v598 = v926;
    v577 = v931;
    v592 = v929;
    v586 = v928;
    v630 = v927;
    v567 = v935;
    v568 = v930;
    v593 = v934;
    v587 = v933;
    v629 = v932;
    v575 = v936;
    v576 = v941;
    v594 = v939;
    v556 = v938;
    v627 = v937;
    v574 = v946;
    v588 = v943;
    v626 = v942;
    v573 = v951;
    v565 = v950;
    v566 = v945;
    v559 = v944;
    v560 = v949;
    v589 = v948;
    v624 = v947;
    v572 = v956;
    v623 = v952;
    v571 = v961;
    v622 = v957;
    v563 = v960;
    v564 = v955;
    v561 = v954;
    v562 = v959;
    v590 = v958;
    v619 = *(double *)&v966;
    v618 = v965;
    v595 = v964;
    v557 = v953;
    v558 = v963;
    v620 = v962;
    if (*(_DWORD *)(v168 + 88) == 9 && (_DWORD)v174 == *(_DWORD *)(v168 + 92))
      goto LABEL_78;
    v189 = *v187;
    if (v175 == (char *)*v187)
    {
      v208 = (8 * (9 * v174) + 31) & 0xFFFFFFFE0;
      v972 = v208 >> 3;
      v971 = operator new(v208, (std::align_val_t)0x20uLL);
      LODWORD(v973) = 9;
      HIDWORD(v973) = v174;
      v979.i64[1] = (uint64_t)&v970;
      *(_QWORD *)&v980 = &__src;
      *((_QWORD *)&v980 + 1) = 0x3FF0000000000000;
      sub_20FB71440((uint64_t)&v971, (uint64_t)&v979);
      v209 = *(_QWORD *)(v168 + 72);
      v210 = v972;
      *(_QWORD *)(v168 + 72) = v971;
      *(_QWORD *)(v168 + 80) = v210;
      *(_QWORD *)(v168 + 88) = v973;
      if (v209)
        MEMORY[0x212BC6368](v209, 0x1000C8000313F17);
    }
    else
    {
      *(_DWORD *)(v168 + 88) = 9;
      *(_DWORD *)(v168 + 92) = v174;
      if (*(_QWORD *)(v168 + 80) < (unint64_t)(9 * v174))
      {
        if (v189)
          MEMORY[0x212BC6368](v189, 0x1000C8000313F17);
        v190 = (72 * v174 + 31) & 0xFFFFFFFFE0;
        *(_QWORD *)(v168 + 72) = 0;
        *(_QWORD *)(v168 + 80) = v190 >> 3;
        *(_QWORD *)(v168 + 72) = operator new(v190, (std::align_val_t)0x20uLL);
      }
LABEL_78:
      v979.i64[1] = (uint64_t)&v970;
      *(_QWORD *)&v980 = &__src;
      *((_QWORD *)&v980 + 1) = 0x3FF0000000000000;
      sub_20FB71440(v168 + 72, (uint64_t)&v979);
    }
    v191 = *(_DWORD *)(v168 + 16);
    v192 = *(char **)v168;
    v193 = *(unsigned int *)(v168 + 88);
    v194 = *(char **)(v168 + 72);
    if ((_DWORD)v193)
    {
      v195 = *(unsigned int *)(v168 + 92);
      if ((_DWORD)v195)
      {
        v196 = 8 * v193;
        v197 = 8 * (int)v193;
        v198 = v166;
        do
        {
          memmove(&v192[8 * v198], v194, v196);
          v198 += v191;
          v194 += v197;
          --v195;
        }
        while (v195);
        v168 = v774 + 44800;
        v191 = *(_DWORD *)(v774 + 44816);
        v192 = *v848;
        v194 = *(char **)(v774 + 44872);
      }
    }
    v199 = v191 * v166;
    v979.i64[0] = v191 | 0x900000000;
    v979.i32[2] = v191;
    *(_QWORD *)&v980 = &v192[8 * v191 * v166];
    DWORD2(v980) = v191 * v166;
    if (v194 == v192)
    {
      v201 = *(_DWORD *)(v168 + 88);
      v200 = *(_DWORD *)(v168 + 92);
      v202 = (8 * v201 * v200 + 31) & 0xFFFFFFFE0;
      *((_QWORD *)&__src + 1) = v202 >> 3;
      *(_QWORD *)&__src = operator new(v202, (std::align_val_t)0x20uLL);
      *(_QWORD *)&v975 = __PAIR64__(v201, v200);
      sub_20F2B8274((unint64_t)&__src, v187);
      if ((_DWORD)v975)
      {
        v203 = DWORD1(v975);
        v204 = __src;
        if (DWORD1(v975))
        {
          v205 = 8 * v975;
          v206 = 8 * (int)v975;
          v207 = (char *)__src;
          do
          {
            memmove(&v194[8 * v199], v207, v205);
            v199 += v191;
            v207 += v206;
            --v203;
          }
          while (v203);
          v168 = v774 + 44800;
        }
      }
      else
      {
        v204 = __src;
      }
      if (v204)
        MEMORY[0x212BC6368](v204, 0x1000C8000313F17);
    }
    else
    {
      sub_20FB70C74((uint64_t)&v979, v187);
    }
    _Q28 = (float64x2_t)vzip1q_s64((int64x2_t)v631, (int64x2_t)v630);
    _Q9 = (float64x2_t)vzip2q_s64((int64x2_t)v631, (int64x2_t)v630);
    *(_QWORD *)&v213.f64[0] = vdupq_laneq_s64((int64x2_t)v629, 1).u64[0];
    v213.f64[1] = v627.f64[1];
    _Q19 = (float64x2_t)vzip1q_s64((int64x2_t)v629, (int64x2_t)v627);
    v215 = vmlaq_laneq_f64(vmulq_n_f64(_Q19, v776.f64[0]), v213, v776, 1);
    v216 = v213;
    v766 = v213;
    *(_QWORD *)&v213.f64[0] = vdupq_laneq_s64((int64x2_t)v626, 1).u64[0];
    v213.f64[1] = v624.f64[1];
    v217 = (float64x2_t)vzip1q_s64((int64x2_t)v626, (int64x2_t)v624);
    v831 = v213;
    *(_QWORD *)&_Q30.f64[0] = vdupq_laneq_s64((int64x2_t)v623, 1).u64[0];
    _Q30.f64[1] = v622.f64[1];
    _Q31 = (float64x2_t)vzip1q_s64((int64x2_t)v623, (int64x2_t)v622);
    _V22.D[1] = v620.f64[1];
    _D1 = v776.f64[1];
    __asm { FMLA            D24, D1, V22.D[1] }
    v227 = vmlaq_laneq_f64(vmulq_n_f64(_Q19, v784.f64[0]), v216, v784, 1);
    v228 = vmlaq_laneq_f64(vmulq_n_f64(v217, v784.f64[0]), v213, v784, 1);
    _D4 = v784.f64[1];
    __asm { FMLA            D27, D4, V22.D[1] }
    v513 = (float64x2_t)vzip1q_s64((int64x2_t)v585, (int64x2_t)v586);
    v514 = (float64x2_t)vzip1q_s64((int64x2_t)v587, (int64x2_t)v556);
    v515 = (float64x2_t)vzip1q_s64((int64x2_t)v588, (int64x2_t)v589);
    *(_QWORD *)&v231.f64[0] = vdupq_laneq_s64((int64x2_t)v587, 1).u64[0];
    v231.f64[1] = v556.f64[1];
    _Q0 = (float64x2_t)vzip2q_s64((int64x2_t)v585, (int64x2_t)v586);
    v233 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q28, v776.f64[0]), _Q9, v776, 1), v513, v792.f64[0]), _Q0, v792, 1);
    v234 = _Q0;
    v516 = (float64x2_t)vzip1q_s64((int64x2_t)v557, (int64x2_t)v590);
    v517 = _Q0;
    *(_QWORD *)&_Q0.f64[0] = vdupq_laneq_s64((int64x2_t)v588, 1).u64[0];
    _Q0.f64[1] = v589.f64[1];
    v235 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v217, v776.f64[0]), v213, v776, 1), v515, v792.f64[0]), _Q0, v792, 1);
    v236 = _Q0;
    v518 = v231;
    v519 = _Q0;
    *(_QWORD *)&_Q0.f64[0] = vdupq_laneq_s64((int64x2_t)v557, 1).u64[0];
    _Q0.f64[1] = v590.f64[1];
    v237 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q31, v776.f64[0]), _Q30, v776, 1), v516, v792.f64[0]), _Q0, v792, 1);
    _Q17 = _Q0;
    v520 = _Q0;
    _Q0.f64[1] = v558.f64[1];
    _D4 = v792.f64[1];
    __asm { FMLA            D24, D4, V0.D[1] }
    _Q29 = vmlaq_laneq_f64(vmulq_n_f64(_Q28, v800.f64[0]), _Q9, v800, 1);
    v511 = vmlaq_laneq_f64(vmulq_n_f64(_Q19, v800.f64[0]), v766, v800, 1);
    v512 = vmlaq_laneq_f64(vmulq_n_f64(v217, v800.f64[0]), v831, v800, 1);
    v521 = vmlaq_laneq_f64(vmulq_n_f64(_Q31, v800.f64[0]), _Q30, v800, 1);
    _D4 = v800.f64[1];
    __asm { FMLA            D18, D4, V22.D[1] }
    v244 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q28, v784.f64[0]), _Q9, v784, 1), v513, v808.f64[0]), v234, v808, 1);
    v245 = vmlaq_laneq_f64(vmlaq_n_f64(v227, v514, v808.f64[0]), v231, v808, 1);
    v246 = vmlaq_laneq_f64(vmlaq_n_f64(v228, v515, v808.f64[0]), v236, v808, 1);
    v247 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q31, v784.f64[0]), _Q30, v784, 1), v516, v808.f64[0]), _Q17, v808, 1);
    _D4 = v808.f64[1];
    __asm { FMLA            D27, D4, V0.D[1] }
    v583 = vmlaq_laneq_f64(vmulq_n_f64(_Q28, v816.f64[0]), _Q9, v816, 1);
    v610 = vmlaq_laneq_f64(vmulq_n_f64(_Q19, v816.f64[0]), v766, v816, 1);
    v611 = vmlaq_laneq_f64(vmulq_n_f64(v217, v816.f64[0]), v831, v816, 1);
    v584 = vmlaq_laneq_f64(vmulq_n_f64(_Q31, v816.f64[0]), _Q30, v816, 1);
    _D21 = v816.f64[1];
    __asm { FMLA            D0, D21, V22.D[1] }
    v548 = (float64x2_t)vzip1q_s64((int64x2_t)v591, (int64x2_t)v592);
    v549 = (float64x2_t)vzip1q_s64((int64x2_t)v593, (int64x2_t)v594);
    v550 = (float64x2_t)vzip1q_s64((int64x2_t)v559, (int64x2_t)v560);
    v551 = (float64x2_t)vzip1q_s64((int64x2_t)v561, (int64x2_t)v562);
    v251 = (float64x2_t)vzip2q_s64((int64x2_t)v591, (int64x2_t)v592);
    v252 = vmlaq_laneq_f64(vmlaq_n_f64(v233, v548, v824.f64[0]), v251, v824, 1);
    _Q2 = v251;
    v552 = v251;
    *(_QWORD *)&v251.f64[0] = vdupq_laneq_s64((int64x2_t)v593, 1).u64[0];
    v251.f64[1] = v594.f64[1];
    *(_QWORD *)&_Q0.f64[0] = vdupq_laneq_s64((int64x2_t)v559, 1).u64[0];
    _Q0.f64[1] = v560.f64[1];
    v254 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v215, v514, v792.f64[0]), v231, v792, 1), v549, v824.f64[0]), v251, v824, 1);
    _Q4 = v251;
    v553 = v251;
    v554 = _Q0;
    v256 = vmlaq_laneq_f64(vmlaq_n_f64(v235, v550, v824.f64[0]), _Q0, v824, 1);
    _Q1 = _Q0;
    *(_QWORD *)&_Q0.f64[0] = vdupq_laneq_s64((int64x2_t)v561, 1).u64[0];
    _Q0.f64[1] = v562.f64[1];
    v258 = vmlaq_laneq_f64(vmlaq_n_f64(v237, v551, v824.f64[0]), _Q0, v824, 1);
    _Q7 = _Q0;
    v555 = _Q0;
    _Q0.f64[1] = v595.f64[1];
    _D21 = v824.f64[1];
    __asm { FMLA            D24, D21, V0.D[1] }
    v579 = vmlaq_laneq_f64(vmulq_n_f64(_Q28, v841.f64[0]), _Q9, v841, 1);
    v580 = vmlaq_laneq_f64(vmulq_n_f64(_Q19, v841.f64[0]), v766, v841, 1);
    v581 = vmlaq_laneq_f64(vmulq_n_f64(_Q31, v841.f64[0]), _Q30, v841, 1);
    _D21 = v841.f64[1];
    __asm { FMLA            D17, D21, V22.D[1] }
    v263 = vmlaq_laneq_f64(vmlaq_n_f64(v244, v548, v852.f64[0]), _Q2, v852, 1);
    v264 = vmlaq_laneq_f64(vmlaq_n_f64(v245, v549, v852.f64[0]), _Q4, v852, 1);
    v265 = vmlaq_laneq_f64(vmlaq_n_f64(v246, v550, v852.f64[0]), _Q1, v852, 1);
    _D21 = v852.f64[1];
    __asm { FMLA            D27, D21, V0.D[1] }
    *(_QWORD *)&_Q0.f64[0] = vdupq_laneq_s64((int64x2_t)v567, 1).u64[0];
    _Q0.f64[1] = v569.f64[1];
    v617 = _Q0;
    v607 = vmlaq_laneq_f64(vmulq_n_f64(_Q28, v863.f64[0]), _Q9, v863, 1);
    v606 = vmlaq_laneq_f64(vmulq_n_f64(_Q19, v863.f64[0]), v766, v863, 1);
    v669 = vmlaq_laneq_f64(vmulq_n_f64(v217, v863.f64[0]), v831, v863, 1);
    v666 = vmlaq_laneq_f64(vmulq_n_f64(_Q31, v863.f64[0]), _Q30, v863, 1);
    _D10 = v863.f64[1];
    *(_QWORD *)&_Q23.f64[0] = vdupq_laneq_s64((int64x2_t)v566, 1).u64[0];
    __asm { FMLA            D4, D10, V22.D[1] }
    _Q23.f64[1] = v565.f64[1];
    v613 = (float64x2_t)vzip1q_s64((int64x2_t)v596, (int64x2_t)v568);
    v600 = (float64x2_t)vzip1q_s64((int64x2_t)v567, (int64x2_t)v569);
    v614 = (float64x2_t)vzip1q_s64((int64x2_t)v566, (int64x2_t)v565);
    v601 = (float64x2_t)vzip1q_s64((int64x2_t)v564, (int64x2_t)v563);
    v599 = (float64x2_t)vzip2q_s64((int64x2_t)v596, (int64x2_t)v568);
    v270 = vmlaq_laneq_f64(vmlaq_n_f64(v254, v600, v880.f64[0]), _Q0, v880, 1);
    *(_QWORD *)&_Q0.f64[0] = vdupq_laneq_s64((int64x2_t)v564, 1).u64[0];
    _Q0.f64[1] = v563.f64[1];
    v609 = _Q0;
    v602 = _Q23;
    v271 = vmlaq_laneq_f64(vmlaq_n_f64(v258, v601, v880.f64[0]), _Q0, v880, 1);
    _Q17.f64[1] = v618.f64[1];
    _D10 = v880.f64[1];
    __asm { FMLA            D24, D10, V17.D[1] }
    v603 = vmlaq_laneq_f64(vmulq_n_f64(_Q28, v873.f64[0]), _Q9, v873, 1);
    v604 = vmlaq_laneq_f64(vmulq_n_f64(_Q19, v873.f64[0]), v766, v873, 1);
    v605 = vmlaq_laneq_f64(vmulq_n_f64(v217, v873.f64[0]), v831, v873, 1);
    v661 = vmlaq_laneq_f64(vmulq_n_f64(_Q31, v873.f64[0]), _Q30, v873, 1);
    _D10 = v873.f64[1];
    __asm { FMLA            D0, D10, V22.D[1] }
    v642 = vmlaq_laneq_f64(vmulq_n_f64(_Q28, v890.f64[0]), _Q9, v890, 1);
    v644 = vmlaq_laneq_f64(vmulq_n_f64(_Q28, v522.f64[0]), _Q9, v522, 1);
    v639 = vmlaq_laneq_f64(vmulq_n_f64(_Q19, v890.f64[0]), v766, v890, 1);
    v637 = vmlaq_laneq_f64(vmulq_n_f64(_Q19, v522.f64[0]), v766, v522, 1);
    v636 = vmlaq_laneq_f64(vmulq_n_f64(v217, v890.f64[0]), v831, v890, 1);
    v635 = vmlaq_laneq_f64(vmulq_n_f64(v217, v522.f64[0]), v831, v522, 1);
    v651 = vmlaq_laneq_f64(vmulq_n_f64(_Q31, v890.f64[0]), _Q30, v890, 1);
    v650 = vmlaq_laneq_f64(vmulq_n_f64(_Q31, v522.f64[0]), _Q30, v522, 1);
    _Q1.f64[0] = v575;
    _Q1.f64[1] = v576;
    _Q4 = _Q1;
    v608 = _Q1;
    _Q2.f64[0] = v574;
    _Q2.f64[1] = v573;
    v616 = _Q2;
    _Q1.f64[0] = v572;
    _Q1.f64[1] = v571;
    v615 = _Q1;
    _Q19.f64[0] = v598;
    _Q19.f64[1] = v577;
    _Q3 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v252, v613, v880.f64[0]), v599, v880, 1), _Q19, v899);
    v612 = _Q19;
    _Q14 = vmlaq_n_f64(v270, _Q4, v899);
    _Q13 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v256, v614, v880.f64[0]), _Q23, v880, 1), _Q2, v899);
    _Q12 = vmlaq_n_f64(v271, _Q1, v899);
    v280 = vmlaq_laneq_f64(vmlaq_n_f64(v265, v614, v907.f64[0]), _Q23, v907, 1);
    _Q30.f64[0] = v907.f64[1];
    __asm { FMLA            D27, D30, V17.D[1] }
    _Q30.f64[0] = v890.f64[1];
    __asm { FMLA            D0, D30, V22.D[1] }
    _Q5 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v263, v613, v907.f64[0]), v599, v907, 1), _Q19, v633);
    _Q30.f64[1] = v631.f64[1];
    _V8.D[1] = v629.f64[1];
    _Q31.f64[1] = v630.f64[1];
    _Q28.f64[1] = v623.f64[1];
    v284 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v264, v600, v907.f64[0]), v617, v907, 1), v608, v633);
    v709 = vmlaq_laneq_f64(vmulq_n_f64(_Q14, v631.f64[0]), v284, v631, 1);
    v777 = vmlaq_laneq_f64(vmulq_n_f64(_Q14, v630.f64[0]), v284, v630, 1);
    v785 = vmlaq_laneq_f64(vmulq_n_f64(_Q14, v629.f64[0]), v284, v629, 1);
    v673 = vmlaq_laneq_f64(vmulq_n_f64(_Q14, v627.f64[0]), v284, v627, 1);
    v801 = vmlaq_laneq_f64(vmulq_n_f64(_Q14, v626.f64[0]), v284, v626, 1);
    v809 = vmlaq_laneq_f64(vmulq_n_f64(_Q14, v624.f64[0]), v284, v624, 1);
    v742 = vmlaq_laneq_f64(vmulq_n_f64(_Q14, v623.f64[0]), v284, v623, 1);
    _Q23.f64[1] = v622.f64[1];
    v767 = vmlaq_laneq_f64(vmulq_n_f64(_Q14, v622.f64[0]), v284, v622, 1);
    v793 = vmlaq_laneq_f64(vmulq_n_f64(_Q14, v620.f64[0]), v284, v620, 1);
    _Q16 = vmlaq_n_f64(v280, _Q2, v633);
    _V27.D[1] = v627.f64[1];
    _V26.D[1] = v626.f64[1];
    _Q19.f64[1] = v624.f64[1];
    v288 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v247, v551, v852.f64[0]), _Q7, v852, 1), v601, v907.f64[0]), v609, v907, 1), _Q1, v633);
    v656 = vmlaq_laneq_f64(vmulq_n_f64(_Q12, v631.f64[0]), v288, v631, 1);
    v705 = vmlaq_laneq_f64(vmulq_n_f64(_Q12, v630.f64[0]), v288, v630, 1);
    v686 = vmlaq_laneq_f64(vmulq_n_f64(_Q12, v629.f64[0]), v288, v629, 1);
    v691 = vmlaq_laneq_f64(vmulq_n_f64(_Q12, v627.f64[0]), v288, v627, 1);
    v749 = vmlaq_laneq_f64(vmulq_n_f64(_Q12, v626.f64[0]), v288, v626, 1);
    v696 = vmlaq_laneq_f64(vmulq_n_f64(_Q12, v624.f64[0]), v288, v624, 1);
    v681 = vmlaq_laneq_f64(vmulq_n_f64(_Q12, v623.f64[0]), v288, v623, 1);
    v730 = vmlaq_laneq_f64(vmulq_n_f64(_Q12, v622.f64[0]), v288, v622, 1);
    v647 = vmlaq_laneq_f64(vmulq_n_f64(_Q12, v620.f64[0]), v288, v620, 1);
    _Q0.f64[0] = _D27 + v619 * v633;
    _Q1.f64[0] = v522.f64[1];
    __asm
    {
      FMLA            D7, D1, V22.D[1]
      FMLA            D1, D0, V30.D[1]
      FMLA            D1, D0, V31.D[1]
      FMLA            D1, D0, V8.D[1]
      FMLA            D1, D0, V27.D[1]
      FMLA            D1, D0, V26.D[1]
      FMLA            D1, D0, V19.D[1]
      FMLA            D1, D0, V28.D[1]
      FMLA            D1, D0, V23.D[1]
      FMLA            D1, D0, V22.D[1]
    }
    v289 = vmlaq_laneq_f64(vmlaq_n_f64(_Q29, v513, v523.f64[0]), v517, v523, 1);
    _V25.D[1] = v558.f64[1];
    _Q0.f64[0] = v523.f64[1];
    __asm { FMLA            D29, D0, V25.D[1] }
    _Q0.f64[0] = v524.f64[1];
    __asm { FMLA            D1, D0, V25.D[1] }
    _Q9.f64[1] = v595.f64[1];
    _Q0.f64[0] = v526.f64[1];
    __asm { FMLA            D29, D0, V9.D[1] }
    v582 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v217, v841.f64[0]), v831, v841, 1), v515, v525.f64[0]), v519, v525, 1);
    _Q0.f64[0] = v525.f64[1];
    __asm { FMLA            D7, D0, V25.D[1] }
    _Q0.f64[0] = v528.f64[1];
    __asm { FMLA            D8, D0, V9.D[1] }
    _Q0.f64[0] = v527.f64[1];
    __asm { FMLA            D1, D0, V25.D[1] }
    _Q31.f64[1] = v558.f64[1];
    _V21.D[1] = v618.f64[1];
    _Q0.f64[0] = v530.f64[1];
    __asm { FMLA            D29, D0, V21.D[1] }
    _Q0.f64[0] = v529.f64[1];
    __asm { FMLA            D4, D0, V31.D[1] }
    _Q1 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v289, v548, v526.f64[0]), v552, v526, 1), v613, v530.f64[0]), v599, v530, 1), v612, v532);
    _Q25 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q3, v631.f64[0]), _Q5, v631, 1), _Q1, v585.f64[0]);
    _Q6 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q3, v630.f64[0]), _Q5, v630, 1), _Q1, v586.f64[0]);
    v842 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q3, v629.f64[0]), _Q5, v629, 1), _Q1, v587.f64[0]);
    v853 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q3, v627.f64[0]), _Q5, v627, 1), _Q1, v556.f64[0]);
    _Q10 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q3, v626.f64[0]), _Q5, v626, 1), _Q1, v588.f64[0]);
    _Q22 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q3, v624.f64[0]), _Q5, v624, 1), _Q1, v589.f64[0]);
    _Q4 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q3, v623.f64[0]), _Q5, v623, 1), _Q1, v557.f64[0]);
    v874 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q3, v622.f64[0]), _Q5, v622, 1), _Q1, v590.f64[0]);
    v881 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q3, v620.f64[0]), _Q5, v620, 1), _Q1, v558.f64[0]);
    v299 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v511, v514, v523.f64[0]), v518, v523, 1), v549, v526.f64[0]), v553, v526, 1), v600, v530.f64[0]), v617, v530, 1), v608, v532);
    v710 = vmlaq_n_f64(v709, v299, v585.f64[0]);
    v778 = vmlaq_n_f64(v777, v299, v586.f64[0]);
    v786 = vmlaq_n_f64(v785, v299, v587.f64[0]);
    v300 = vmlaq_n_f64(v673, v299, v556.f64[0]);
    v301 = vmlaq_n_f64(v801, v299, v588.f64[0]);
    v302 = vmlaq_n_f64(v809, v299, v589.f64[0]);
    _Q7 = vmlaq_n_f64(v742, v299, v557.f64[0]);
    v768 = vmlaq_n_f64(v767, v299, v590.f64[0]);
    v304 = vmlaq_n_f64(v793, v299, v558.f64[0]);
    v305 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v512, v515, v523.f64[0]), v519, v523, 1), v550, v526.f64[0]), v554, v526, 1), v614, v530.f64[0]), v602, v530, 1), _Q2, v532);
    v832 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q13, v631.f64[0]), _Q16, v631, 1), v305, v585.f64[0]);
    v677 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q13, v630.f64[0]), _Q16, v630, 1), v305, v586.f64[0]);
    v701 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q13, v629.f64[0]), _Q16, v629, 1), v305, v587.f64[0]);
    v891 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q13, v627.f64[0]), _Q16, v627, 1), v305, v556.f64[0]);
    v754 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q13, v626.f64[0]), _Q16, v626, 1), v305, v588.f64[0]);
    v760 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q13, v624.f64[0]), _Q16, v624, 1), v305, v589.f64[0]);
    v900 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q13, v623.f64[0]), _Q16, v623, 1), v305, v557.f64[0]);
    _Q20 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q13, v622.f64[0]), _Q16, v622, 1), v305, v590.f64[0]);
    v908 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q13, v620.f64[0]), _Q16, v620, 1), v305, v558.f64[0]);
    _Q19 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v521, v516, v523.f64[0]), v520, v523, 1), v551, v526.f64[0]), v555, v526, 1), v601, v530.f64[0]), v609, v530, 1), v615, v532);
    _Q13.f64[1] = v556.f64[1];
    _V18.D[1] = v557.f64[1];
    _Q14.f64[1] = v558.f64[1];
    _V8.D[1] = v618.f64[1];
    _Q0.f64[0] = v533.f64[1];
    __asm { FMLA            D1, D0, V8.D[1] }
    v671 = _Q1.f64[0];
    _Q0.f64[0] = v531.f64[1];
    __asm { FMLA            D8, D0, V14.D[1] }
    _Q8 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v583, v513, v524.f64[0]), v517, v524, 1), v548, v528.f64[0]), v552, v528, 1), v613, v533.f64[0]), v599, v533, 1), v612, v535);
    _Q3.f64[1] = v585.f64[1];
    v817 = vmlaq_laneq_f64(_Q25, _Q8, v585, 1);
    _Q31.f64[1] = v586.f64[1];
    v716 = vmlaq_laneq_f64(_Q6, _Q8, v586, 1);
    _Q25.f64[1] = v587.f64[1];
    v843 = vmlaq_laneq_f64(v842, _Q8, v587, 1);
    v854 = vmlaq_laneq_f64(v853, _Q8, v556, 1);
    _Q12.f64[1] = v588.f64[1];
    v825 = vmlaq_laneq_f64(_Q10, _Q8, v588, 1);
    _Q9.f64[1] = v589.f64[1];
    v723 = vmlaq_laneq_f64(_Q22, _Q8, v589, 1);
    v864 = vmlaq_laneq_f64(_Q4, _Q8, v557, 1);
    _Q10.f64[1] = v590.f64[1];
    v875 = vmlaq_laneq_f64(v874, _Q8, v590, 1);
    v882 = vmlaq_laneq_f64(v881, _Q8, v558, 1);
    v312 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v610, v514, v524.f64[0]), v518, v524, 1), v549, v528.f64[0]), v553, v528, 1), v600, v533.f64[0]), v617, v533, 1), v608, v535);
    v711 = vmlaq_laneq_f64(v710, v312, v585, 1);
    v779 = vmlaq_laneq_f64(v778, v312, v586, 1);
    v787 = vmlaq_laneq_f64(v786, v312, v587, 1);
    v313 = vmlaq_laneq_f64(v300, v312, v556, 1);
    v802 = vmlaq_laneq_f64(v301, v312, v588, 1);
    v810 = vmlaq_laneq_f64(v302, v312, v589, 1);
    v743 = vmlaq_laneq_f64(_Q7, v312, v557, 1);
    v769 = vmlaq_laneq_f64(v768, v312, v590, 1);
    v794 = vmlaq_laneq_f64(v304, v312, v558, 1);
    v314 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v611, v515, v524.f64[0]), v519, v524, 1), v550, v528.f64[0]), v554, v528, 1), v614, v533.f64[0]), v602, v533, 1), _Q2, v535);
    v833 = vmlaq_laneq_f64(v832, v314, v585, 1);
    v678 = vmlaq_laneq_f64(v677, v314, v586, 1);
    v702 = vmlaq_laneq_f64(v701, v314, v587, 1);
    v892 = vmlaq_laneq_f64(v891, v314, v556, 1);
    v755 = vmlaq_laneq_f64(v754, v314, v588, 1);
    v761 = vmlaq_laneq_f64(v760, v314, v589, 1);
    v901 = vmlaq_laneq_f64(v900, v314, v557, 1);
    v737 = vmlaq_laneq_f64(_Q20, v314, v590, 1);
    v909 = vmlaq_laneq_f64(v908, v314, v558, 1);
    _Q1 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v584, v516, v524.f64[0]), v520, v524, 1), v551, v528.f64[0]), v555, v528, 1), v601, v533.f64[0]), v609, v533, 1), v615, v535);
    v657 = vmlaq_laneq_f64(vmlaq_n_f64(v656, _Q19, v585.f64[0]), _Q1, v585, 1);
    v706 = vmlaq_laneq_f64(vmlaq_n_f64(v705, _Q19, v586.f64[0]), _Q1, v586, 1);
    v687 = vmlaq_laneq_f64(vmlaq_n_f64(v686, _Q19, v587.f64[0]), _Q1, v587, 1);
    v692 = vmlaq_laneq_f64(vmlaq_n_f64(v691, _Q19, v556.f64[0]), _Q1, v556, 1);
    v750 = vmlaq_laneq_f64(vmlaq_n_f64(v749, _Q19, v588.f64[0]), _Q1, v588, 1);
    v697 = vmlaq_laneq_f64(vmlaq_n_f64(v696, _Q19, v589.f64[0]), _Q1, v589, 1);
    v682 = vmlaq_laneq_f64(vmlaq_n_f64(v681, _Q19, v557.f64[0]), _Q1, v557, 1);
    v731 = vmlaq_laneq_f64(vmlaq_n_f64(v730, _Q19, v590.f64[0]), _Q1, v590, 1);
    v648 = vmlaq_laneq_f64(vmlaq_n_f64(v647, _Q19, v558.f64[0]), _Q1, v558, 1);
    _Q0.f64[0] = v671 + v619 * v535;
    _Q2.f64[0] = v534.f64[1];
    __asm
    {
      FMLA            D1, D2, V14.D[1]
      FMLA            D1, D0, V3.D[1]
      FMLA            D2, D0, V31.D[1]
      FMLA            D5, D0, V25.D[1]
      FMLA            D6, D0, V13.D[1]
      FMLA            D7, D0, V12.D[1]
      FMLA            D17, D0, V9.D[1]
      FMLA            D19, D0, V18.D[1]
      FMLA            D20, D0, V10.D[1]
      FMLA            D16, D0, V14.D[1]
    }
    _Q5.f64[1] = v595.f64[1];
    _Q0.f64[0] = v536.f64[1];
    __asm { FMLA            D8, D0, V5.D[1] }
    _Q0.f64[0] = v537.f64[1];
    __asm { FMLA            D1, D0, V5.D[1] }
    _Q3.f64[1] = v618.f64[1];
    _Q0.f64[0] = v539.f64[1];
    __asm { FMLA            D8, D0, V3.D[1] }
    _Q0.f64[0] = v538.f64[1];
    __asm { FMLA            D4, D0, V5.D[1] }
    v316 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v579, v513, v525.f64[0]), v517, v525, 1), v548, v536.f64[0]), v552, v536, 1), v613, v539.f64[0]), v599, v539, 1), v612, v541);
    v818 = vmlaq_n_f64(v817, v316, v591.f64[0]);
    v717 = vmlaq_n_f64(v716, v316, v592.f64[0]);
    v317 = vmlaq_n_f64(v843, v316, v593.f64[0]);
    _Q25 = vmlaq_n_f64(v854, v316, v594.f64[0]);
    _V18.D[1] = v560.f64[1];
    v826 = vmlaq_n_f64(v825, v316, v559.f64[0]);
    v724 = vmlaq_n_f64(v723, v316, v560.f64[0]);
    _Q7.f64[1] = v562.f64[1];
    v320 = vmlaq_n_f64(v864, v316, v561.f64[0]);
    v321 = vmlaq_n_f64(v875, v316, v562.f64[0]);
    v322 = vmlaq_n_f64(v882, v316, v595.f64[0]);
    v323 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v580, v514, v525.f64[0]), v518, v525, 1), v549, v536.f64[0]), v553, v536, 1), v600, v539.f64[0]), v617, v539, 1), v608, v541);
    v712 = vmlaq_n_f64(v711, v323, v591.f64[0]);
    _Q12 = vmlaq_n_f64(v779, v323, v592.f64[0]);
    _Q28 = vmlaq_n_f64(v787, v323, v593.f64[0]);
    v674 = vmlaq_n_f64(v313, v323, v594.f64[0]);
    v803 = vmlaq_n_f64(v802, v323, v559.f64[0]);
    v811 = vmlaq_n_f64(v810, v323, v560.f64[0]);
    v744 = vmlaq_n_f64(v743, v323, v561.f64[0]);
    _Q19 = vmlaq_n_f64(v769, v323, v562.f64[0]);
    v795 = vmlaq_n_f64(v794, v323, v595.f64[0]);
    _Q20 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v582, v550, v536.f64[0]), v554, v536, 1), v614, v539.f64[0]), v602, v539, 1), v616, v541);
    _Q4 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v581, v516, v525.f64[0]), v520, v525, 1), v551, v536.f64[0]), v555, v536, 1), v601, v539.f64[0]), v609, v539, 1), v615, v541);
    _V24.D[1] = v618.f64[1];
    _Q0.f64[0] = v542.f64[1];
    __asm { FMLA            D2, D0, V24.D[1] }
    _Q0.f64[0] = v540.f64[1];
    __asm { FMLA            D24, D0, V5.D[1] }
    v331 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v607, v513, v527.f64[0]), v517, v527, 1), v548, v537.f64[0]), v552, v537, 1), v613, v542.f64[0]), v599, v542, 1), v612, v544);
    v819 = vmlaq_laneq_f64(v818, v331, v591, 1);
    v718 = vmlaq_laneq_f64(v717, v331, v592, 1);
    v844 = vmlaq_laneq_f64(v317, v331, v593, 1);
    v855 = vmlaq_laneq_f64(_Q25, v331, v594, 1);
    v827 = vmlaq_laneq_f64(v826, v331, v559, 1);
    v725 = vmlaq_laneq_f64(v724, v331, v560, 1);
    v865 = vmlaq_laneq_f64(v320, v331, v561, 1);
    v332 = vmlaq_laneq_f64(v321, v331, v562, 1);
    v883 = vmlaq_laneq_f64(v322, v331, v595, 1);
    _Q1 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v606, v514, v527.f64[0]), v518, v527, 1), v549, v537.f64[0]), v553, v537, 1), v600, v542.f64[0]), v617, v542, 1), v608, v544);
    v334 = vmlaq_laneq_f64(v712, _Q1, v591, 1);
    v780 = vmlaq_laneq_f64(_Q12, _Q1, v592, 1);
    _Q12.f64[1] = v593.f64[1];
    v788 = vmlaq_laneq_f64(_Q28, _Q1, v593, 1);
    v335 = vmlaq_laneq_f64(v674, _Q1, v594, 1);
    v804 = vmlaq_laneq_f64(v803, _Q1, v559, 1);
    v812 = vmlaq_laneq_f64(v811, _Q1, v560, 1);
    v745 = vmlaq_laneq_f64(v744, _Q1, v561, 1);
    v770 = vmlaq_laneq_f64(_Q19, _Q1, v562, 1);
    v796 = vmlaq_laneq_f64(v795, _Q1, v595, 1);
    v336 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v669, v515, v527.f64[0]), v519, v527, 1), v550, v537.f64[0]), v554, v537, 1), v614, v542.f64[0]), v602, v542, 1), v616, v544);
    v834 = vmlaq_laneq_f64(vmlaq_n_f64(v833, _Q20, v591.f64[0]), v336, v591, 1);
    v679 = vmlaq_laneq_f64(vmlaq_n_f64(v678, _Q20, v592.f64[0]), v336, v592, 1);
    v337 = vmlaq_laneq_f64(vmlaq_n_f64(v702, _Q20, v593.f64[0]), v336, v593, 1);
    v893 = vmlaq_laneq_f64(vmlaq_n_f64(v892, _Q20, v594.f64[0]), v336, v594, 1);
    v756 = vmlaq_laneq_f64(vmlaq_n_f64(v755, _Q20, v559.f64[0]), v336, v559, 1);
    v762 = vmlaq_laneq_f64(vmlaq_n_f64(v761, _Q20, v560.f64[0]), v336, v560, 1);
    v902 = vmlaq_laneq_f64(vmlaq_n_f64(v901, _Q20, v561.f64[0]), v336, v561, 1);
    v738 = vmlaq_laneq_f64(vmlaq_n_f64(v737, _Q20, v562.f64[0]), v336, v562, 1);
    v910 = vmlaq_laneq_f64(vmlaq_n_f64(v909, _Q20, v595.f64[0]), v336, v595, 1);
    _Q6 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v666, v516, v527.f64[0]), v520, v527, 1), v551, v537.f64[0]), v555, v537, 1), v601, v542.f64[0]), v609, v542, 1), v615, v544);
    _Q28.f64[1] = v591.f64[1];
    v658 = vmlaq_laneq_f64(vmlaq_n_f64(v657, _Q4, v591.f64[0]), _Q6, v591, 1);
    v707 = vmlaq_laneq_f64(vmlaq_n_f64(v706, _Q4, v592.f64[0]), _Q6, v592, 1);
    _Q22.f64[1] = v592.f64[1];
    _Q13 = vmlaq_laneq_f64(vmlaq_n_f64(v687, _Q4, v593.f64[0]), _Q6, v593, 1);
    v693 = vmlaq_laneq_f64(vmlaq_n_f64(v692, _Q4, v594.f64[0]), _Q6, v594, 1);
    _Q1.f64[1] = v594.f64[1];
    v751 = vmlaq_laneq_f64(vmlaq_n_f64(v750, _Q4, v559.f64[0]), _Q6, v559, 1);
    _Q19.f64[1] = v559.f64[1];
    v698 = vmlaq_laneq_f64(vmlaq_n_f64(v697, _Q4, v560.f64[0]), _Q6, v560, 1);
    v683 = vmlaq_laneq_f64(vmlaq_n_f64(v682, _Q4, v561.f64[0]), _Q6, v561, 1);
    _Q16.f64[1] = v561.f64[1];
    v732 = vmlaq_laneq_f64(vmlaq_n_f64(v731, _Q4, v562.f64[0]), _Q6, v562, 1);
    v649 = vmlaq_laneq_f64(vmlaq_n_f64(v648, _Q4, v595.f64[0]), _Q6, v595, 1);
    _Q0.f64[0] = _Q2.f64[0] + v619 * v544;
    _Q3.f64[1] = v595.f64[1];
    _Q2.f64[0] = v543.f64[1];
    __asm
    {
      FMLA            D4, D2, V5.D[1]
      FMLA            D2, D0, V28.D[1]
      FMLA            D4, D0, V22.D[1]
      FMLA            D5, D0, V12.D[1]
      FMLA            D6, D0, V1.D[1]
      FMLA            D17, D0, V19.D[1]
      FMLA            D21, D0, V18.D[1]
      FMLA            D23, D0, V16.D[1]
      FMLA            D25, D0, V7.D[1]
      FMLA            D24, D0, V3.D[1]
    }
    _V21.D[1] = v618.f64[1];
    _Q0.f64[0] = v545.f64[1];
    __asm { FMLA            D22, D0, V21.D[1] }
    v343 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v604, v514, v529.f64[0]), v518, v529, 1), v549, v538.f64[0]), v553, v538, 1), v600, v545.f64[0]), v617, v545, 1), v608, v547);
    v640 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v639, v514, v531.f64[0]), v518, v531, 1), v549, v540.f64[0]), v553, v540, 1), v600, v546.f64[0]), v617, v546, 1), v608, v597);
    v638 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v637, v514, v534.f64[0]), v518, v534, 1), v549, v543.f64[0]), v553, v543, 1), v600, v570.f64[0]), v617, v570, 1), v608, v578);
    v344 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v334, v343, v596.f64[0]), v640, v596, 1), v638, v598);
    v344.i64[1] = vextq_s8(v344, v344, 8uLL).u64[0];
    v713 = v344;
    v345 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v603, v513, v529.f64[0]), v517, v529, 1), v548, v538.f64[0]), v552, v538, 1), v613, v545.f64[0]), v599, v545, 1), v612, v547);
    v346 = vmlaq_n_f64(v819, v345, v596.f64[0]);
    _Q7.f64[1] = v567.f64[1];
    _V18.D[1] = v568.f64[1];
    v719 = vmlaq_n_f64(v718, v345, v568.f64[0]);
    v845 = vmlaq_n_f64(v844, v345, v567.f64[0]);
    _Q6.f64[1] = v569.f64[1];
    v856 = vmlaq_n_f64(v855, v345, v569.f64[0]);
    _Q17.f64[1] = v565.f64[1];
    _Q16.f64[1] = v566.f64[1];
    v348 = vmlaq_n_f64(v827, v345, v566.f64[0]);
    v726 = vmlaq_n_f64(v725, v345, v565.f64[0]);
    _Q20.f64[1] = v563.f64[1];
    _Q22.f64[1] = v564.f64[1];
    v349 = vmlaq_n_f64(v865, v345, v564.f64[0]);
    _Q27 = vmlaq_n_f64(v332, v345, v563.f64[0]);
    v351 = vmlaq_n_f64(v883, v345, v618.f64[0]);
    v781 = vmlaq_n_f64(v780, v343, v568.f64[0]);
    v789 = vmlaq_n_f64(v788, v343, v567.f64[0]);
    v675 = vmlaq_n_f64(v335, v343, v569.f64[0]);
    v352 = vmlaq_n_f64(v804, v343, v566.f64[0]);
    v353 = vmlaq_n_f64(v812, v343, v565.f64[0]);
    _Q19 = vmlaq_n_f64(v745, v343, v564.f64[0]);
    v771 = vmlaq_n_f64(v770, v343, v563.f64[0]);
    _Q2 = vmlaq_n_f64(v796, v343, v618.f64[0]);
    v356 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v605, v515, v529.f64[0]), v519, v529, 1), v550, v538.f64[0]), v554, v538, 1), v614, v545.f64[0]), v602, v545, 1), v616, v547);
    _Q30 = vmlaq_n_f64(v834, v356, v596.f64[0]);
    v358 = vmlaq_n_f64(v679, v356, v568.f64[0]);
    v359 = vmlaq_n_f64(v337, v356, v567.f64[0]);
    v360 = vmlaq_n_f64(v893, v356, v569.f64[0]);
    v757 = vmlaq_n_f64(v756, v356, v566.f64[0]);
    v763 = vmlaq_n_f64(v762, v356, v565.f64[0]);
    _Q31 = vmlaq_n_f64(v902, v356, v564.f64[0]);
    _Q8 = vmlaq_n_f64(v738, v356, v563.f64[0]);
    v911 = vmlaq_n_f64(v910, v356, v618.f64[0]);
    v363 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v661, v516, v529.f64[0]), v520, v529, 1), v551, v538.f64[0]), v555, v538, 1), v601, v545.f64[0]), v609, v545, 1), v615, v547);
    v688 = vmlaq_n_f64(_Q13, v363, v567.f64[0]);
    _Q1.f64[0] = v546.f64[1];
    __asm { FMLA            D13, D1, V21.D[1] }
    v364 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v642, v513, v531.f64[0]), v517, v531, 1), v548, v540.f64[0]), v552, v540, 1), v613, v546.f64[0]), v599, v546, 1), v612, v597);
    v820 = vmlaq_laneq_f64(v346, v364, v596, 1);
    v720 = vmlaq_laneq_f64(v719, v364, v568, 1);
    v846 = vmlaq_laneq_f64(v845, v364, v567, 1);
    v857 = vmlaq_laneq_f64(v856, v364, v569, 1);
    v828 = vmlaq_laneq_f64(v348, v364, v566, 1);
    v365 = vmlaq_laneq_f64(v726, v364, v565, 1);
    v866 = vmlaq_laneq_f64(v349, v364, v564, 1);
    v876 = vmlaq_laneq_f64(_Q27, v364, v563, 1);
    v884 = vmlaq_laneq_f64(v351, v364, v618, 1);
    v805 = vmlaq_laneq_f64(v352, v640, v566, 1);
    v746 = vmlaq_laneq_f64(_Q19, v640, v564, 1);
    v797 = vmlaq_laneq_f64(_Q2, v640, v618, 1);
    v366 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v636, v515, v531.f64[0]), v519, v531, 1), v550, v540.f64[0]), v554, v540, 1), v614, v546.f64[0]), v602, v546, 1), v616, v597);
    _Q27.f64[1] = v596.f64[1];
    v835 = vmlaq_laneq_f64(_Q30, v366, v596, 1);
    v367 = vmlaq_laneq_f64(v358, v366, v568, 1);
    v703 = vmlaq_laneq_f64(v359, v366, v567, 1);
    v894 = vmlaq_laneq_f64(v360, v366, v569, 1);
    v368 = vmlaq_laneq_f64(v757, v366, v566, 1);
    v369 = vmlaq_laneq_f64(v763, v366, v565, 1);
    v903 = vmlaq_laneq_f64(_Q31, v366, v564, 1);
    v739 = vmlaq_laneq_f64(_Q8, v366, v563, 1);
    v912 = vmlaq_laneq_f64(v911, v366, v618, 1);
    _Q1 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v651, v516, v531.f64[0]), v520, v531, 1), v551, v540.f64[0]), v555, v540, 1), v601, v546.f64[0]), v609, v546, 1), v615, v597);
    v371 = vmlaq_laneq_f64(vmlaq_n_f64(v658, v363, v596.f64[0]), _Q1, v596, 1);
    v372 = vmlaq_laneq_f64(vmlaq_n_f64(v707, v363, v568.f64[0]), _Q1, v568, 1);
    v689 = vmlaq_laneq_f64(v688, _Q1, v567, 1);
    v694 = vmlaq_laneq_f64(vmlaq_n_f64(v693, v363, v569.f64[0]), _Q1, v569, 1);
    v752 = vmlaq_laneq_f64(vmlaq_n_f64(v751, v363, v566.f64[0]), _Q1, v566, 1);
    v699 = vmlaq_laneq_f64(vmlaq_n_f64(v698, v363, v565.f64[0]), _Q1, v565, 1);
    v684 = vmlaq_laneq_f64(vmlaq_n_f64(v683, v363, v564.f64[0]), _Q1, v564, 1);
    v733 = vmlaq_laneq_f64(vmlaq_n_f64(v732, v363, v563.f64[0]), _Q1, v563, 1);
    v373 = vmlaq_laneq_f64(vmlaq_n_f64(v649, v363, v618.f64[0]), _Q1, v618, 1);
    _Q1.f64[0] = _Q13.f64[0] + v619 * v597;
    _Q2.f64[0] = v570.f64[1];
    __asm { FMLA            D3, D2, V21.D[1] }
    v634 = _Q3.f64[0];
    __asm { FMLA            D30, D1, V27.D[1] }
    v632 = _Q30.f64[0];
    __asm
    {
      FMLA            D25, D1, V18.D[1]
      FMLA            D4, D1, V7.D[1]
      FMLA            D5, D1, V6.D[1]
    }
    v628 = _Q5.f64[0];
    __asm
    {
      FMLA            D31, D1, V16.D[1]
      FMLA            D8, D1, V17.D[1]
    }
    v625 = _Q8.f64[0];
    __asm
    {
      FMLA            D19, D1, V22.D[1]
      FMLA            D2, D1, V20.D[1]
      FMLA            D3, D1, V21.D[1]
    }
    v621 = _Q3.f64[0];
    v374 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v644, v513, v534.f64[0]), v517, v534, 1), v548, v543.f64[0]), v552, v543, 1), v613, v570.f64[0]), v599, v570, 1), v612, v578);
    v375 = (int8x16_t)vmlaq_n_f64(v820, v374, v598);
    v375.i64[1] = vextq_s8(v375, v375, 8uLL).u64[0];
    v821 = v375;
    v376 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v635, v515, v534.f64[0]), v519, v534, 1), v550, v543.f64[0]), v554, v543, 1), v614, v570.f64[0]), v602, v570, 1), v616, v578);
    v377 = (int8x16_t)vmlaq_n_f64(v835, v376, v598);
    v377.i64[1] = vextq_s8(v377, v377, 8uLL).u64[0];
    v378 = v377;
    v379 = (int8x16_t)vmlaq_n_f64(v720, v374, v577);
    v380 = (int8x16_t)vmlaq_n_f64(v846, v374, v575);
    v381 = (int8x16_t)vmlaq_n_f64(v857, v374, v576);
    v727 = vmlaq_n_f64(v365, v374, v573);
    v885 = vmlaq_n_f64(v884, v374, v619);
    v382 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(v781, v640, v568, 1), v638, v577);
    v383 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(v789, v640, v567, 1), v638, v575);
    v384 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(v675, v640, v569, 1), v638, v576);
    v813 = vmlaq_n_f64(vmlaq_laneq_f64(v353, v640, v565, 1), v638, v573);
    v385 = (int8x16_t)vmlaq_n_f64(v367, v376, v577);
    v386 = (int8x16_t)vmlaq_n_f64(v703, v376, v575);
    v758 = vmlaq_n_f64(v368, v376, v574);
    v764 = vmlaq_n_f64(v369, v376, v573);
    v387 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v650, v516, v534.f64[0]), v520, v534, 1), v551, v543.f64[0]), v555, v543, 1), v601, v570.f64[0]), v609, v570, 1), v615, v578);
    v388 = (int8x16_t)vmlaq_n_f64(v371, v387, v598);
    v389 = (int8x16_t)vmlaq_n_f64(v372, v387, v577);
    v390 = (int8x16_t)vmlaq_n_f64(v689, v387, v575);
    v391 = (int8x16_t)vmlaq_n_f64(v694, v387, v576);
    v392 = (int8x16_t)vmlaq_n_f64(v752, v387, v574);
    v393 = (int8x16_t)vmlaq_n_f64(v699, v387, v573);
    v394 = (int8x16_t)vmlaq_n_f64(v684, v387, v572);
    v734 = vmlaq_n_f64(v733, v387, v571);
    v395 = (int8x16_t)vmlaq_n_f64(v373, v387, v619);
    v387.f64[0] = v634 + v619 * v578;
    v396 = *(unsigned int *)(v168 + 16);
    v397 = *(_QWORD *)v168 + 8 * (v166 + v166 * (_DWORD)v396);
    *(int8x16_t *)(v397 + 16) = v713;
    *(int8x16_t *)(v397 + 32) = v378;
    *(int8x16_t *)v397 = v821;
    *(double *)(v397 + 64) = v632 + v387.f64[0] * v598;
    v388.i64[1] = vextq_s8(v388, v388, 8uLL).u64[0];
    *(int8x16_t *)(v397 + 48) = v388;
    v398 = v397 + 8 * v396;
    *(double *)(v398 + 64) = _Q25.f64[0] + v387.f64[0] * v577;
    v389.i64[1] = vextq_s8(v389, v389, 8uLL).u64[0];
    v385.i64[1] = vextq_s8(v385, v385, 8uLL).u64[0];
    *(int8x16_t *)(v398 + 32) = v385;
    *(int8x16_t *)(v398 + 48) = v389;
    v382.i64[1] = vextq_s8(v382, v382, 8uLL).u64[0];
    *(_QWORD *)&_Q5.f64[0] = v379.i64[0];
    *(_QWORD *)&_Q5.f64[1] = vextq_s8(v379, v379, 8uLL).u64[0];
    *(float64x2_t *)v398 = _Q5;
    *(int8x16_t *)(v398 + 16) = v382;
    v399 = v397 + 16 * v396;
    *(double *)(v399 + 64) = _Q4.f64[0] + v387.f64[0] * v575;
    *(_QWORD *)&_Q5.f64[0] = v390.i64[0];
    *(_QWORD *)&_Q5.f64[1] = vextq_s8(v390, v390, 8uLL).u64[0];
    v386.i64[1] = vextq_s8(v386, v386, 8uLL).u64[0];
    *(int8x16_t *)(v399 + 32) = v386;
    *(float64x2_t *)(v399 + 48) = _Q5;
    v383.i64[1] = vextq_s8(v383, v383, 8uLL).u64[0];
    v380.i64[1] = vextq_s8(v380, v380, 8uLL).u64[0];
    *(int8x16_t *)v399 = v380;
    *(int8x16_t *)(v399 + 16) = v383;
    v391.i64[1] = vextq_s8(v391, v391, 8uLL).u64[0];
    v400 = v397 + 24 * v396;
    *(double *)(v400 + 64) = v628 + v387.f64[0] * v576;
    v401 = (int8x16_t)vmlaq_n_f64(v894, v376, v576);
    v401.i64[1] = vextq_s8(v401, v401, 8uLL).u64[0];
    *(int8x16_t *)(v400 + 32) = v401;
    *(int8x16_t *)(v400 + 48) = v391;
    v401.i64[0] = v384.i64[0];
    v401.i64[1] = vextq_s8(v384, v384, 8uLL).u64[0];
    v402 = v401;
    v401.i64[0] = v381.i64[0];
    v401.i64[1] = vextq_s8(v381, v381, 8uLL).u64[0];
    *(int8x16_t *)v400 = v401;
    *(int8x16_t *)(v400 + 16) = v402;
    v392.i64[1] = vextq_s8(v392, v392, 8uLL).u64[0];
    v403 = v397 + 32 * v396;
    *(double *)(v403 + 64) = _Q31.f64[0] + v387.f64[0] * v574;
    v404 = (int8x16_t)v758;
    v404.i64[1] = vextq_s8(v404, v404, 8uLL).u64[0];
    *(int8x16_t *)(v403 + 32) = v404;
    *(int8x16_t *)(v403 + 48) = v392;
    v405 = (int8x16_t)vmlaq_n_f64(v805, v638, v574);
    v405.i64[1] = vextq_s8(v405, v405, 8uLL).u64[0];
    v406 = v405;
    v407 = (int8x16_t)vmlaq_n_f64(v828, v374, v574);
    v407.i64[1] = vextq_s8(v407, v407, 8uLL).u64[0];
    *(int8x16_t *)v403 = v407;
    *(int8x16_t *)(v403 + 16) = v406;
    v408 = v397 + 40 * v396;
    *(double *)(v408 + 64) = v625 + v387.f64[0] * v573;
    v393.i64[1] = vextq_s8(v393, v393, 8uLL).u64[0];
    v409 = (int8x16_t)v764;
    v409.i64[1] = vextq_s8(v409, v409, 8uLL).u64[0];
    v410 = v409;
    v411 = (int8x16_t)v813;
    v411.i64[1] = vextq_s8(v411, v411, 8uLL).u64[0];
    v412 = v411;
    v413 = (int8x16_t)v727;
    v413.i64[1] = vextq_s8(v413, v413, 8uLL).u64[0];
    *(int8x16_t *)(v408 + 32) = v410;
    *(int8x16_t *)(v408 + 48) = v393;
    *(int8x16_t *)v408 = v413;
    *(int8x16_t *)(v408 + 16) = v412;
    v414 = v397 + 48 * v396;
    *(double *)(v414 + 64) = _Q19.f64[0] + v387.f64[0] * v572;
    v394.i64[1] = vextq_s8(v394, v394, 8uLL).u64[0];
    v415 = (int8x16_t)vmlaq_n_f64(v903, v376, v572);
    v415.i64[1] = vextq_s8(v415, v415, 8uLL).u64[0];
    *(int8x16_t *)(v414 + 32) = v415;
    *(int8x16_t *)(v414 + 48) = v394;
    v416 = (int8x16_t)vmlaq_n_f64(v746, v638, v572);
    v416.i64[1] = vextq_s8(v416, v416, 8uLL).u64[0];
    v417 = v416;
    v418 = (int8x16_t)vmlaq_n_f64(v866, v374, v572);
    v418.i64[1] = vextq_s8(v418, v418, 8uLL).u64[0];
    v419 = (int8x16_t)v734;
    v419.i64[1] = vextq_s8(v419, v419, 8uLL).u64[0];
    *(int8x16_t *)v414 = v418;
    *(int8x16_t *)(v414 + 16) = v417;
    v420 = (int8x16_t)vmlaq_n_f64(v739, v376, v571);
    v420.i64[1] = vextq_s8(v420, v420, 8uLL).u64[0];
    v421 = v397 + 56 * v396;
    *(double *)(v421 + 64) = _Q2.f64[0] + v387.f64[0] * v571;
    *(int8x16_t *)(v421 + 32) = v420;
    *(int8x16_t *)(v421 + 48) = v419;
    v422 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(v771, v640, v563, 1), v638, v571);
    v422.i64[1] = vextq_s8(v422, v422, 8uLL).u64[0];
    v423 = v422;
    v424 = (int8x16_t)vmlaq_n_f64(v876, v374, v571);
    v424.i64[1] = vextq_s8(v424, v424, 8uLL).u64[0];
    *(int8x16_t *)v421 = v424;
    *(int8x16_t *)(v421 + 16) = v423;
    v395.i64[1] = vextq_s8(v395, v395, 8uLL).u64[0];
    v425 = (int8x16_t)vmlaq_n_f64(v912, v376, v619);
    v425.i64[1] = vextq_s8(v425, v425, 8uLL).u64[0];
    v426 = v397 + (v396 << 6);
    *(double *)(v426 + 64) = v621 + v387.f64[0] * v619;
    *(int8x16_t *)(v426 + 32) = v425;
    *(int8x16_t *)(v426 + 48) = v395;
    v427 = (int8x16_t)vmlaq_n_f64(v797, v638, v619);
    v427.i64[1] = vextq_s8(v427, v427, 8uLL).u64[0];
    v428 = (int8x16_t)v885;
    v428.i64[1] = vextq_s8(v428, v428, 8uLL).u64[0];
    *(int8x16_t *)v426 = v428;
    *(int8x16_t *)(v426 + 16) = v427;
    v982 = 0u;
    v983 = 0u;
    v980 = 0u;
    v981 = 0u;
    v978 = 0u;
    v979 = 0u;
    v976 = 0u;
    v977 = 0u;
    __src = 0u;
    v975 = 0u;
    LODWORD(v971) = 0;
    LODWORD(v970) = 0;
    sub_20F8E03B8(v172, (int *)&v971, &v970, &v979, &__src);
    result = sub_20FB75740((uint64_t)v172, (uint64_t *)v168, (unsigned int *)&v979, (unsigned int *)&__src);
    v167 = (_QWORD *)v774;
  }
  v429 = (_DWORD *)v167[695];
  v913 = (_DWORD *)v167[696];
  if (v429 == v913)
    return result;
  v847 = (_QWORD *)(v774 + 27856);
  v858 = (uint64_t *)(v168 + 72);
  while (2)
  {
    v453 = (int8x16_t *)*((_QWORD *)v429 + 1);
    if ((v453->i8[4] & 2) != 0)
      goto LABEL_103;
    v454 = v429;
    v455 = 0;
    v456 = 0;
    v457 = 0;
    v458 = 0;
    v459 = 0;
    v886 = v453[3].i64[0];
    v904 = v454;
    v867 = *v454;
    v895 = v453[2];
    v877 = vextq_s8(v895, v895, 8uLL).u64[0];
    v992 = 0u;
    v993 = 0u;
    v990 = 0u;
    v991 = 0u;
    v988 = 0u;
    v989 = 0u;
    v986 = 0u;
    v987 = 0u;
    v984 = 0u;
    v985 = 0u;
    v982 = 0u;
    v983 = 0u;
    v980 = 0u;
    v981 = 0u;
    v979 = 0u;
    __src = 0uLL;
    *(_QWORD *)&v975 = 0;
    while (2)
    {
      if (v455 < v458)
      {
        *(_DWORD *)v455 = v457;
        v460 = (uint64_t)(v455 + 4);
        goto LABEL_107;
      }
      v461 = (v455 - v459) >> 2;
      v462 = v461 + 1;
      if ((unint64_t)(v461 + 1) >> 62)
      {
        *(_QWORD *)&v975 = v458;
        *((_QWORD *)&__src + 1) = v455;
        *(_QWORD *)&__src = v459;
        sub_20E867F44();
      }
      if ((v458 - v459) >> 1 > v462)
        v462 = (v458 - v459) >> 1;
      if ((unint64_t)(v458 - v459) >= 0x7FFFFFFFFFFFFFFCLL)
        v463 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v463 = v462;
      if (!v463)
      {
        v464 = 0;
        v465 = (char *)(4 * v461);
        *(_DWORD *)(4 * v461) = v457;
        v460 = 4 * v461 + 4;
        v466 = v455 - v459;
        if (v455 == v459)
          goto LABEL_123;
LABEL_120:
        v467 = v466 - 4;
        if (v467 >= 0xBC)
        {
          v470 = (v455 - 4 - v459) & 0xFFFFFFFFFFFFFFFCLL;
          if (&v464[v455 - v459 - 4 - v470] > &v464[v455 - v459 - 4])
          {
            v468 = v455;
          }
          else if (&v455[-v470 - 4] > v455 - 4)
          {
            v468 = v455;
          }
          else if ((unint64_t)(v459 - v464) >= 0x20)
          {
            v471 = (v467 >> 2) + 1;
            v472 = 4 * (v471 & 0x7FFFFFFFFFFFFFF8);
            v468 = &v455[-v472];
            v465 -= v472;
            v473 = &v464[4 * v461 - 16];
            v474 = v455 - 16;
            v475 = v471 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v476 = *(_OWORD *)v474;
              *(v473 - 1) = *((_OWORD *)v474 - 1);
              *v473 = v476;
              v473 -= 2;
              v474 -= 32;
              v475 -= 8;
            }
            while (v475);
            if (v471 == (v471 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_123;
          }
          else
          {
            v468 = v455;
          }
        }
        else
        {
          v468 = v455;
        }
        do
        {
          v469 = *((_DWORD *)v468 - 1);
          v468 -= 4;
          *((_DWORD *)v465 - 1) = v469;
          v465 -= 4;
        }
        while (v468 != v459);
        goto LABEL_123;
      }
      if (v463 >> 62)
      {
        *(_QWORD *)&v975 = v458;
        *(_QWORD *)&__src = v459;
        sub_20E877A38();
      }
      v464 = operator new(4 * v463);
      v465 = &v464[4 * v461];
      *(_DWORD *)v465 = v457;
      v460 = (uint64_t)(v465 + 4);
      v466 = v455 - v459;
      if (v455 != v459)
        goto LABEL_120;
LABEL_123:
      v458 = &v464[4 * v463];
      if (v459)
        operator delete(v459);
      v459 = v465;
LABEL_107:
      v457 += dword_2103B93C4[v456] * ((*(_QWORD *)(v915 + 24 * v456 + 8) - *(_QWORD *)(v915 + 24 * v456)) >> 2);
      ++v456;
      v455 = (char *)v460;
      if (v456 != 10)
        continue;
      break;
    }
    v477 = *(_DWORD **)(v773 + 72);
    v478 = *(_DWORD **)(v773 + 80);
    if (v477 == v478)
    {
      v479 = -1;
      v480 = v774 + 44800;
      v429 = v904;
      if (v459)
        goto LABEL_142;
    }
    else
    {
      v479 = *((_DWORD *)v459 + 4);
      v480 = v774 + 44800;
      v429 = v904;
      while (*v477 != v867)
      {
        v479 += 3;
        if (++v477 == v478)
        {
          v479 = -1;
          break;
        }
      }
      if (v459)
LABEL_142:
        operator delete(v459);
    }
    result = sub_20F89E908((uint64_t)&v979);
    if ((v479 & 0x80000000) == 0)
    {
      v481 = *(_QWORD *)(v774 + 27728) + 8 * v479;
      *(_QWORD *)(v481 + 16) = v886;
      *(_QWORD *)&v482 = v895.i64[0];
      *((_QWORD *)&v482 + 1) = v877;
      *(_OWORD *)v481 = v482;
      sub_20F926890(v847, (void **)v480);
      sub_20F20B6B0(v480);
      v483 = *(unsigned int *)(v480 + 16);
      v484 = *(unsigned int *)(v480 + 20);
      v485 = *(char **)v480;
      v486 = *(_QWORD *)v480 + 8 * (v479 + v479 * (_DWORD)v483);
      v790 = *(double *)(v486 + 16);
      v782 = *(float64x2_t *)v486;
      v487 = (float64x2_t *)(v486 + 8 * v483);
      v806 = v487[1].f64[0];
      v798 = *v487;
      v488 = (float64x2_t *)(v486 + 16 * v483);
      v822 = v488[1].f64[0];
      v814 = *v488;
      v836 = v917;
      v829 = v916;
      v878 = v919;
      v868 = v918;
      v896 = v921;
      v887 = v920;
      v970 = &v916;
      LODWORD(__src) = 3;
      *(_QWORD *)((char *)&__src + 4) = __PAIR64__(v483, v484);
      *(_QWORD *)&v975 = &v485[8 * v479];
      DWORD2(v975) = v479;
      if (*(_DWORD *)(v480 + 88) == 3 && (_DWORD)v484 == *(_DWORD *)(v480 + 92))
        goto LABEL_151;
      v489 = *v858;
      if (v485 == (char *)*v858)
      {
        v508 = (8 * (3 * v484) + 31) & 0xFFFFFFFE0;
        v972 = v508 >> 3;
        v971 = operator new(v508, (std::align_val_t)0x20uLL);
        LODWORD(v973) = 3;
        HIDWORD(v973) = v484;
        v979.i64[1] = (uint64_t)&v970;
        *(_QWORD *)&v980 = &__src;
        *((_QWORD *)&v980 + 1) = 0x3FF0000000000000;
        sub_20FB715A0((uint64_t)&v971, (uint64_t)&v979);
        v509 = *(_QWORD *)(v480 + 72);
        v510 = v972;
        *(_QWORD *)(v480 + 72) = v971;
        *(_QWORD *)(v480 + 80) = v510;
        *(_QWORD *)(v480 + 88) = v973;
        if (v509)
          MEMORY[0x212BC6368](v509, 0x1000C8000313F17);
      }
      else
      {
        *(_DWORD *)(v480 + 88) = 3;
        *(_DWORD *)(v480 + 92) = v484;
        if (*(_QWORD *)(v480 + 80) < (unint64_t)(3 * v484))
        {
          if (v489)
            MEMORY[0x212BC6368](v489, 0x1000C8000313F17);
          v490 = (24 * v484 + 31) & 0x3FFFFFFFE0;
          *(_QWORD *)(v480 + 72) = 0;
          *(_QWORD *)(v480 + 80) = v490 >> 3;
          *(_QWORD *)(v480 + 72) = operator new(v490, (std::align_val_t)0x20uLL);
        }
LABEL_151:
        v979.i64[1] = (uint64_t)&v970;
        *(_QWORD *)&v980 = &__src;
        *((_QWORD *)&v980 + 1) = 0x3FF0000000000000;
        sub_20FB715A0((uint64_t)v858, (uint64_t)&v979);
      }
      v491 = *(_DWORD *)(v480 + 16);
      v492 = *(char **)v480;
      v493 = *(unsigned int *)(v480 + 88);
      v494 = *(char **)(v480 + 72);
      if ((_DWORD)v493)
      {
        v495 = *(unsigned int *)(v480 + 92);
        if ((_DWORD)v495)
        {
          v496 = 8 * v493;
          v497 = 8 * (int)v493;
          v498 = v479;
          do
          {
            memmove(&v492[8 * v498], v494, v496);
            v498 += v491;
            v494 += v497;
            --v495;
          }
          while (v495);
          v491 = *(_DWORD *)(v480 + 16);
          v492 = *(char **)v480;
          v494 = *(char **)(v480 + 72);
        }
      }
      v499 = v491 * v479;
      v979.i64[0] = v491 | 0x300000000;
      v979.i32[2] = v491;
      *(_QWORD *)&v980 = &v492[8 * v491 * v479];
      DWORD2(v980) = v491 * v479;
      if (v494 != v492)
      {
        sub_20FB70C74((uint64_t)&v979, v858);
        goto LABEL_102;
      }
      v501 = *(_DWORD *)(v480 + 88);
      v500 = *(_DWORD *)(v480 + 92);
      v502 = (8 * v501 * v500 + 31) & 0xFFFFFFFE0;
      *((_QWORD *)&__src + 1) = v502 >> 3;
      *(_QWORD *)&__src = operator new(v502, (std::align_val_t)0x20uLL);
      *(_QWORD *)&v975 = __PAIR64__(v501, v500);
      sub_20F2B8274((unint64_t)&__src, v858);
      if ((_DWORD)v975)
      {
        v503 = DWORD1(v975);
        v504 = __src;
        if (DWORD1(v975))
        {
          v505 = 8 * v975;
          v506 = 8 * (int)v975;
          v507 = (char *)__src;
          do
          {
            memmove(&v494[8 * v499], v507, v505);
            v499 += v491;
            v507 += v506;
            --v503;
          }
          while (v503);
          v480 = v774 + 44800;
          v429 = v904;
        }
        if (!v504)
        {
LABEL_102:
          _V22.D[1] = v868.f64[1];
          _V17.D[1] = v829.f64[1];
          v432 = (float64x2_t)vzip1q_s64((int64x2_t)v829, (int64x2_t)v868);
          _Q2 = (float64x2_t)vzip2q_s64((int64x2_t)v829, (int64x2_t)v868);
          _Q3.f64[0] = v836;
          _Q3.f64[1] = v878;
          v435 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v432, v782.f64[0]), _Q2, v782, 1), _Q3, v790);
          _V21.D[1] = v887.f64[1];
          _D5 = v782.f64[1];
          __asm { FMLA            D4, D5, V21.D[1] }
          v439 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v432, v798.f64[0]), _Q2, v798, 1), _Q3, v806);
          _D7 = v798.f64[1];
          __asm { FMLA            D6, D7, V21.D[1] }
          _D6 = _D6 + v896 * v806;
          _Q1 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v432, v814.f64[0]), _Q2, v814, 1), _Q3, v822);
          _Q3.f64[0] = v814.f64[1];
          __asm { FMLA            D2, D3, V21.D[1] }
          _Q2.f64[0] = _Q2.f64[0] + v896 * v822;
          v444 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v435, v829.f64[0]), v439, v829, 1), _Q1, v836);
          __asm { FMLA            D7, D6, V17.D[1] }
          v446 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v435, v868.f64[0]), v439, v868, 1), _Q1, v878);
          __asm { FMLA            D18, D6, V22.D[1] }
          v448 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v435, v887.f64[0]), v439, v887, 1), _Q1, v896);
          v449 = *(unsigned int *)(v480 + 16);
          __asm { FMLA            D1, D6, V21.D[1] }
          v450 = *(_QWORD *)v480 + 8 * (v479 + v479 * (_DWORD)v449);
          *(double *)(v450 + 16) = _D7 + _Q2.f64[0] * v836;
          v444.i64[1] = vextq_s8(v444, v444, 8uLL).u64[0];
          *(int8x16_t *)v450 = v444;
          v451 = v450 + 8 * v449;
          *(double *)(v451 + 16) = _D18 + _Q2.f64[0] * v878;
          v446.i64[1] = vextq_s8(v446, v446, 8uLL).u64[0];
          *(int8x16_t *)v451 = v446;
          v452 = v450 + 16 * v449;
          *(double *)(v452 + 16) = _Q1.f64[0] + _Q2.f64[0] * v896;
          v448.i64[1] = vextq_s8(v448, v448, 8uLL).u64[0];
          *(int8x16_t *)v452 = v448;
          LODWORD(v971) = 0;
          LODWORD(v970) = 0;
          v982 = 0u;
          v983 = 0u;
          v980 = 0u;
          v981 = 0u;
          v978 = 0u;
          v979 = 0u;
          v976 = 0u;
          v977 = 0u;
          __src = 0u;
          v975 = 0u;
          sub_20F8E03B8(v847, (int *)&v971, &v970, &v979, &__src);
          result = sub_20FB75740((uint64_t)v847, (uint64_t *)v480, (unsigned int *)&v979, (unsigned int *)&__src);
          goto LABEL_103;
        }
      }
      else
      {
        v504 = __src;
        if (!(_QWORD)__src)
          goto LABEL_102;
      }
      MEMORY[0x212BC6368](v504, 0x1000C8000313F17);
      goto LABEL_102;
    }
LABEL_103:
    v429 += 4;
    if (v429 != v913)
      continue;
    return result;
  }
}

void sub_20FB75690(_Unwind_Exception *a1)
{
  if (STACK[0xF08])
  {
    MEMORY[0x212BC6368](STACK[0xF08], 0x1000C8000313F17);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20FB75704(_Unwind_Exception *a1)
{
  unint64_t v1;
  void *v2;

  STACK[0xF30] = v1;
  STACK[0xF20] = (unint64_t)v2;
  if (v2)
  {
    STACK[0xF28] = (unint64_t)v2;
    operator delete(v2);
  }
  sub_20F89E908(&STACK[0xF70]);
  _Unwind_Resume(a1);
}

void sub_20FB75718()
{
  if (STACK[0xF20])
    JUMPOUT(0x20FB75724);
  JUMPOUT(0x20FB75730);
}

uint64_t sub_20FB75740(uint64_t a1, uint64_t *a2, unsigned int *a3, unsigned int *a4)
{
  sub_20FA49BBC(a1 + 1296);
  sub_20FA49BBC(a1 + 2736);
  sub_20FA49BBC(a1 + 4176);
  sub_20FA49BBC(a1 + 5616);
  sub_20FA49BBC(a1 + 7056);
  sub_20FA49BBC(a1 + 8496);
  sub_20FA49BBC(a1 + 9936);
  sub_20FA49BBC(a1 + 11376);
  sub_20FA49BBC(a1 + 12816);
  sub_20FA52A60(a1 + 14256, a2, a3[18] | ((unint64_t)a4[18] << 32));
  sub_20FA49BBC(a1 + 1152);
  sub_20FA49BBC(a1 + 2592);
  sub_20FA49BBC(a1 + 4032);
  sub_20FA49BBC(a1 + 5472);
  sub_20FA49BBC(a1 + 6912);
  sub_20FA49BBC(a1 + 8352);
  sub_20FA49BBC(a1 + 9792);
  sub_20FA49BBC(a1 + 11232);
  sub_20FA52A60(a1 + 12672, a2, a3[16] | ((unint64_t)a4[16] << 32));
  sub_20F8E1E24(a1 + 14112, a2, a3[16] | ((unint64_t)a4[18] << 32));
  sub_20FA49BBC(a1 + 1008);
  sub_20FA49BBC(a1 + 2448);
  sub_20FA49BBC(a1 + 3888);
  sub_20FA49BBC(a1 + 5328);
  sub_20FA49BBC(a1 + 6768);
  sub_20FA49BBC(a1 + 8208);
  sub_20FA49BBC(a1 + 9648);
  sub_20FA5312C(a1 + 11088, a2, a3[14] | ((unint64_t)a4[14] << 32));
  sub_20F8E3C4C(a1 + 12528, a2, a3[14] | ((unint64_t)a4[16] << 32));
  sub_20F8E3C4C(a1 + 13968, a2, a3[14] | ((unint64_t)a4[18] << 32));
  sub_20FA49BBC(a1 + 864);
  sub_20FA49BBC(a1 + 2304);
  sub_20FA49BBC(a1 + 3744);
  sub_20FA49BBC(a1 + 5184);
  sub_20FA49BBC(a1 + 6624);
  sub_20FA49BBC(a1 + 8064);
  sub_20FA5312C(a1 + 9504, a2, a3[12] | ((unint64_t)a4[12] << 32));
  sub_20F8E47B4(a1 + 10944, a2, a3[12] | ((unint64_t)a4[14] << 32));
  sub_20F8E3C4C(a1 + 12384, a2, a3[12] | ((unint64_t)a4[16] << 32));
  sub_20F8E3C4C(a1 + 13824, a2, a3[12] | ((unint64_t)a4[18] << 32));
  sub_20FA49BBC(a1 + 720);
  sub_20FA49BBC(a1 + 2160);
  sub_20FA49BBC(a1 + 3600);
  sub_20FA49BBC(a1 + 5040);
  sub_20FA49BBC(a1 + 6480);
  sub_20FA537FC(a1 + 7920, a2, a3[10] | ((unint64_t)a4[10] << 32));
  sub_20F8E6434(a1 + 9360, a2, a3[10] | ((unint64_t)a4[12] << 32));
  sub_20F8E6434(a1 + 10800, a2, a3[10] | ((unint64_t)a4[14] << 32));
  sub_20F8E59EC(a1 + 12240, a2, a3[10] | ((unint64_t)a4[16] << 32));
  sub_20F8E59EC(a1 + 13680, a2, a3[10] | ((unint64_t)a4[18] << 32));
  sub_20FA49BBC(a1 + 576);
  sub_20FA49BBC(a1 + 2016);
  sub_20FA49BBC(a1 + 3456);
  sub_20FA49BBC(a1 + 4896);
  sub_20FA52A60(a1 + 6336, a2, a3[8] | ((unint64_t)a4[8] << 32));
  sub_20F8E2400(a1 + 7776, a2, a3[8] | ((unint64_t)a4[10] << 32));
  sub_20F8E29B8(a1 + 9216, a2, a3[8] | ((unint64_t)a4[12] << 32));
  sub_20F8E29B8(a1 + 10656, a2, a3[8] | ((unint64_t)a4[14] << 32));
  sub_20F8E1E24(a1 + 12096, a2, a3[8] | ((unint64_t)a4[16] << 32));
  sub_20F8E1E24(a1 + 13536, a2, a3[8] | ((unint64_t)a4[18] << 32));
  sub_20FA49BBC(a1 + 432);
  sub_20FA49BBC(a1 + 1872);
  sub_20FA49BBC(a1 + 3312);
  sub_20FA53D84(a1 + 4752, a2, a3[6] | ((unint64_t)a4[6] << 32));
  sub_20F8E7748(a1 + 6192, a2, a3[6] | ((unint64_t)a4[8] << 32));
  sub_20F8E7D3C(a1 + 7632, a2, a3[6] | ((unint64_t)a4[10] << 32));
  sub_20F8E8310(a1 + 9072, a2, a3[6] | ((unint64_t)a4[12] << 32));
  sub_20F8E8310(a1 + 10512, a2, a3[6] | ((unint64_t)a4[14] << 32));
  sub_20F8E7748(a1 + 11952, a2, a3[6] | ((unint64_t)a4[16] << 32));
  sub_20F8E7748(a1 + 13392, a2, a3[6] | ((unint64_t)a4[18] << 32));
  sub_20FA49BBC(a1 + 288);
  sub_20FA49BBC(a1 + 1728);
  sub_20FA53D84(a1 + 3168, a2, a3[4] | ((unint64_t)a4[4] << 32));
  sub_20F8E6A0C(a1 + 4608, a2, a3[4] | ((unint64_t)a4[6] << 32));
  sub_20F8E7748(a1 + 6048, a2, a3[4] | ((unint64_t)a4[8] << 32));
  sub_20F8E7D3C(a1 + 7488, a2, a3[4] | ((unint64_t)a4[10] << 32));
  sub_20F8E8310(a1 + 8928, a2, a3[4] | ((unint64_t)a4[12] << 32));
  sub_20F8E8310(a1 + 10368, a2, a3[4] | ((unint64_t)a4[14] << 32));
  sub_20F8E7748(a1 + 11808, a2, a3[4] | ((unint64_t)a4[16] << 32));
  sub_20F8E7748(a1 + 13248, a2, a3[4] | ((unint64_t)a4[18] << 32));
  sub_20FA49BBC(a1 + 144);
  sub_20FA544C4(a1 + 1584, a2, a3[2] | ((unint64_t)a4[2] << 32));
  sub_20F8E8924(a1 + 3024, a2, a3[2] | ((unint64_t)a4[4] << 32));
  sub_20F8E8924(a1 + 4464, a2, a3[2] | ((unint64_t)a4[6] << 32));
  sub_20F8E97D8(a1 + 5904, a2, a3[2] | ((unint64_t)a4[8] << 32));
  sub_20F8E9DE4(a1 + 7344, a2, a3[2] | ((unint64_t)a4[10] << 32));
  sub_20F8EA39C(a1 + 8784, a2, a3[2] | ((unint64_t)a4[12] << 32));
  sub_20F8EA39C(a1 + 10224, a2, a3[2] | ((unint64_t)a4[14] << 32));
  sub_20F8E97D8(a1 + 11664, a2, a3[2] | ((unint64_t)a4[16] << 32));
  sub_20F8E97D8(a1 + 13104, a2, a3[2] | ((unint64_t)a4[18] << 32));
  sub_20FA53D84(a1, a2, *a3 | ((unint64_t)*a4 << 32));
  sub_20F8E7068(a1 + 1440, a2, *a3 | ((unint64_t)a4[2] << 32));
  sub_20F8E6A0C(a1 + 2880, a2, *a3 | ((unint64_t)a4[4] << 32));
  sub_20F8E6A0C(a1 + 4320, a2, *a3 | ((unint64_t)a4[6] << 32));
  sub_20F8E7748(a1 + 5760, a2, *a3 | ((unint64_t)a4[8] << 32));
  sub_20F8E7D3C(a1 + 7200, a2, *a3 | ((unint64_t)a4[10] << 32));
  sub_20F8E8310(a1 + 8640, a2, *a3 | ((unint64_t)a4[12] << 32));
  sub_20F8E8310(a1 + 10080, a2, *a3 | ((unint64_t)a4[14] << 32));
  sub_20F8E7748(a1 + 11520, a2, *a3 | ((unint64_t)a4[16] << 32));
  return sub_20F8E7748(a1 + 12960, a2, *a3 | ((unint64_t)a4[18] << 32));
}

void sub_20FB75F1C()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20FB75F30(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24CA04630;
  result[1] = v3;
  return result;
}

uint64_t sub_20FB75F64(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24CA04630;
  a2[1] = v2;
  return result;
}

unint64_t sub_20FB75F80(uint64_t a1, uint64_t a2)
{
  return sub_20FB76000(a2);
}

uint64_t sub_20FB75F88(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3cva20MarginalizeLPFGSchurIN4cv3d3vio27VIOBATraits_SlidingWindowLP8LSTraitsENS2_24VIOLandmarkDept"
                     "hVariableIdLb1ELNS2_5DepthE0EEEE17setLoggerCallbackIRZZNS2_31batch_least_squares_unsanitized10BAFil"
                     "terFG13PrepareUpdateERKNSA_26SparseVisualInertialWindowEbRKNS2_19batch_least_squares25LowTextureDet"
                     "ectionResultEENK3$_0clINSt3__110unique_ptrINS2_24VIOBASlidingWindowSolverINS2_11VIOBATraitsILNS2_15"
                     "VIOBATraitsTypeE14ELb1EEEEENSL_14default_deleteISR_EEEEEEDaRT_EUlRKNSL_12basic_stringIcNSL_11char_t"
                     "raitsIcEENSL_9allocatorIcEEEEE_EEvOSW_EUlS15_E_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN3cva20MarginalizeLPFGSchurIN4cv3d3vio27VIOBATraits_SlidingWindowLP8LSTraitsENS2_24VIOL"
                                "andmarkDepthVariableIdLb1ELNS2_5DepthE0EEEE17setLoggerCallbackIRZZNS2_31batch_least_squa"
                                "res_unsanitized10BAFilterFG13PrepareUpdateERKNSA_26SparseVisualInertialWindowEbRKNS2_19b"
                                "atch_least_squares25LowTextureDetectionResultEENK3$_0clINSt3__110unique_ptrINS2_24VIOBAS"
                                "lidingWindowSolverINS2_11VIOBATraitsILNS2_15VIOBATraitsTypeE14ELb1EEEEENSL_14default_del"
                                "eteISR_EEEEEEDaRT_EUlRKNSL_12basic_stringIcNSL_11char_traitsIcEENSL_9allocatorIcEEEEE_EEvOSW_EUlS15_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3cva20MarginalizeLPFGSchurIN4cv3d3vio27VIOBATraits_SlidingWindowLP8LSTraitsENS2_24VIOLandmarkDepthVariableIdLb1ELNS2_5DepthE0EEEE17setLoggerCallbackIRZZNS2_31batch_least_squares_unsanitized10BAFilterFG13PrepareUpdateERKNSA_26SparseVisualInertialWindowEbRKNS2_19batch_least_squares25LowTextureDetectionResultEENK3$_0clINSt3__110unique_ptrINS2_24VIOBASlidingWindowSolverINS2_11VIOBATraitsILNS2_15VIOBATraitsTypeE14ELb1EEEEENSL_14default_deleteISR_EEEEEEDaRT_EUlRKNSL_12basic_stringIcNSL_11char_traitsIcEENSL_9allocatorIcEEEEE_EEvOSW_EUlS15_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3cva20MarginalizeLPFGSchurIN4cv3d3vio27VIOBATraits_SlidingWindowLP8LSTraitsENS2_24VIOLandmarkDepthVariableIdLb1ELNS2_5DepthE0EEEE17setLoggerCallbackIRZZNS2_31batch_least_squares_unsanitized10BAFilterFG13PrepareUpdateERKNSA_26SparseVisualInertialWindowEbRKNS2_19batch_least_squares25LowTextureDetectionResultEENK3$_0clINSt3__110unique_ptrINS2_24VIOBASlidingWindowSolverINS2_11VIOBATraitsILNS2_15VIOBATraitsTypeE14ELb1EEEEENSL_14default_deleteISR_EEEEEEDaRT_EUlRKNSL_12basic_stringIcNSL_11char_traitsIcEENSL_9allocatorIcEEEEE_EEvOSW_EUlS15_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20FB75FF4()
{
  return &unk_24CA046A0;
}

unint64_t sub_20FB76000(uint64_t a1)
{
  unint64_t result;
  int v3;
  unint64_t v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  void **v11;
  unint64_t v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  const char *v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  const char *v23;
  size_t v24;
  _BYTE *v25;
  unint64_t v26;
  uint64_t v27;
  const char *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void **v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  size_t v37;
  std::__shared_weak_count_vtbl *v38;
  std::__shared_weak_count *v39;
  size_t v40;
  size_t v41;
  _QWORD *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  char v47;
  _QWORD *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *p_shared_owners;
  unint64_t v52;
  void *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  _QWORD *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  const char *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  const char *v96;
  _QWORD v97[3];
  int v98;
  const char *v99;
  int v100;
  const char *v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  void *__dst[2];
  int64_t v105;
  _QWORD v106[2];
  _QWORD v107[3];
  const void *v108;
  uint64_t v109;
  const void *v110;
  unint64_t v111;
  void *__p;
  char v113;
  unint64_t v114;
  int v115;
  uint64_t v116;
  unint64_t v117;
  __int128 v118;
  std::__shared_weak_count *v119;
  char *v120;
  std::__shared_weak_count *v121;
  _QWORD *v122;
  __int128 v123;
  _BYTE v124[24];
  __int128 v125;
  void *v126[2];
  unint64_t v127;
  char v128;
  _QWORD v129[5];

  v129[2] = *MEMORY[0x24BDAC8D0];
  sub_20F82FD50(&v117);
  result = v117;
  if (**(int **)(v117 + 56) > 2)
    return result;
  v3 = *(unsigned __int8 *)(v117 + 72);
  result = sub_20E8C31DC(v117, "OSLogSurrogateAppender", 1, 0);
  if (!v3 && result == 0)
    return result;
  v5 = result;
  sub_20E863438((uint64_t)v106);
  v6 = sub_20E86A980(v107, (uint64_t)"[LS]: ", 6);
  v7 = *(char *)(a1 + 23);
  if (v7 >= 0)
    v8 = a1;
  else
    v8 = *(_QWORD *)a1;
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(a1 + 23);
  else
    v9 = *(_QWORD *)(a1 + 8);
  sub_20E86A980(v6, v8, v9);
  if ((v115 & 0x10) != 0)
  {
    v12 = v114;
    if (v114 < v111)
    {
      v114 = v111;
      v12 = v111;
    }
    v13 = v110;
    v10 = v12 - (_QWORD)v110;
    if (v12 - (unint64_t)v110 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_70;
  }
  else
  {
    if ((v115 & 8) == 0)
    {
      v10 = 0;
      HIBYTE(v105) = 0;
      v11 = __dst;
      goto LABEL_25;
    }
    v13 = v108;
    v10 = v109 - (_QWORD)v108;
    if ((unint64_t)(v109 - (_QWORD)v108) > 0x7FFFFFFFFFFFFFF7)
LABEL_70:
      sub_20E860B7C();
  }
  if (v10 >= 0x17)
  {
    v14 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v14 = v10 | 7;
    v15 = v14 + 1;
    v11 = (void **)operator new(v14 + 1);
    __dst[1] = (void *)v10;
    v105 = v15 | 0x8000000000000000;
    __dst[0] = v11;
    goto LABEL_24;
  }
  HIBYTE(v105) = v10;
  v11 = __dst;
  if (v10)
LABEL_24:
    memmove(v11, v13, v10);
LABEL_25:
  *((_BYTE *)v11 + v10) = 0;
  v97[0] = &v117;
  v97[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v97[2] = std::chrono::system_clock::now().__d_.__rep_;
  v98 = 2;
  v99 = "unknown file";
  v100 = 1073;
  v102 = 0;
  v103 = 0;
  v101 = "unknown function";
  if (v105 >= 0)
    v16 = (const char *)__dst;
  else
    v16 = (const char *)__dst[0];
  v17 = *(_QWORD *)v97[0];
  v18 = *(_QWORD *)v97[0] + 16;
  if (*(char *)(*(_QWORD *)v97[0] + 39) < 0)
  {
    v20 = *(const char **)(v17 + 16);
    v19 = *(_QWORD *)(v17 + 24);
    v22 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v22 & 1) != 0)
      goto LABEL_32;
  }
  else
  {
    v19 = *(unsigned __int8 *)(*(_QWORD *)v97[0] + 39);
    v20 = (const char *)(*(_QWORD *)v97[0] + 16);
    v21 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v21 & 1) != 0)
      goto LABEL_32;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v124);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v124);
    if ((_BYTE)v125 && (v124[23] & 0x80000000) != 0)
      operator delete(*(void **)v124);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_32:
  if (byte_254A4A4F8[23] >= 0)
    v23 = byte_254A4A4F8;
  else
    v23 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v24 = byte_254A4A4F8[23];
  else
    v24 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)v124 = os_log_create(v23, v20);
  v25 = &v124[8];
  if (v24 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v24 >= 0x17)
  {
    v96 = v20;
    v26 = v5;
    v27 = v17;
    v28 = v16;
    v29 = v3;
    v30 = v18;
    v31 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v24 | 7) != 0x17)
      v31 = v24 | 7;
    v32 = v31 + 1;
    v25 = operator new(v31 + 1);
    *(_QWORD *)&v124[16] = v24;
    *(_QWORD *)&v125 = v32 | 0x8000000000000000;
    *(_QWORD *)&v124[8] = v25;
    v18 = v30;
    v3 = v29;
    v16 = v28;
    v17 = v27;
    v5 = v26;
    v20 = v96;
    goto LABEL_45;
  }
  BYTE7(v125) = v24;
  if (v24)
LABEL_45:
    memmove(v25, v23, v24);
  v25[v24] = 0;
  BYTE8(v125) = 1;
  v33 = v126;
  if (v19 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v19 >= 0x17)
  {
    v35 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v35 = v19 | 7;
    v36 = v35 + 1;
    v33 = (void **)operator new(v35 + 1);
    v126[1] = (void *)v19;
    v127 = v36 | 0x8000000000000000;
    v126[0] = v33;
  }
  else
  {
    HIBYTE(v127) = v19;
    if (!v19)
    {
      LOBYTE(v126[0]) = 0;
      v128 = 1;
      v34 = *(NSObject **)v124;
      if ((SHIBYTE(v127) & 0x80000000) == 0)
        goto LABEL_50;
      goto LABEL_56;
    }
  }
  memmove(v33, v20, v19);
  *((_BYTE *)v33 + v19) = 0;
  v128 = 1;
  v34 = *(NSObject **)v124;
  if ((SHIBYTE(v127) & 0x80000000) == 0)
  {
LABEL_50:
    if (!BYTE8(v125))
      goto LABEL_59;
    goto LABEL_57;
  }
LABEL_56:
  operator delete(v126[0]);
  if (!BYTE8(v125))
    goto LABEL_59;
LABEL_57:
  if (SBYTE7(v125) < 0)
    operator delete(*(void **)&v124[8]);
LABEL_59:
  if (*(_QWORD *)v124)
    os_release(*(void **)v124);
  if (!v5 || !*(_QWORD *)(v5 + 24))
  {
    os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG);
    *(_DWORD *)v124 = 136315138;
    *(_QWORD *)&v124[4] = v16;
    v43 = (void *)_os_log_send_and_compose_impl();
    if (v43)
      free(v43);
    goto LABEL_135;
  }
  v37 = _os_log_pack_size();
  v38 = (std::__shared_weak_count_vtbl *)operator new(v37, (std::align_val_t)8uLL);
  v39 = (std::__shared_weak_count *)operator new();
  v39->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
  v39->__shared_owners_ = 0;
  v39->__shared_weak_owners_ = 0;
  v39[1].__vftable = v38;
  *(_QWORD *)&v118 = v38;
  *((_QWORD *)&v118 + 1) = v38;
  v120 = 0;
  v121 = 0;
  v119 = v39;
  v40 = strlen(v16);
  if (v40 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v41 = v40;
  if (v40 >= 0x17)
  {
    v44 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v40 | 7) != 0x17)
      v44 = v40 | 7;
    v45 = v44 + 1;
    v42 = operator new(v44 + 1);
    *(_QWORD *)&v123 = v41;
    *((_QWORD *)&v123 + 1) = v45 | 0x8000000000000000;
    v122 = v42;
    goto LABEL_74;
  }
  HIBYTE(v123) = v40;
  v42 = &v122;
  if (v40)
LABEL_74:
    memcpy(v42, v16, v41);
  *((_BYTE *)v42 + v41) = 0;
  v46 = v122;
  v129[0] = v123;
  *(_QWORD *)((char *)v129 + 7) = *(_QWORD *)((char *)&v123 + 7);
  v47 = HIBYTE(v123);
  v48 = operator new(0x38uLL);
  v48[1] = 0;
  v48[2] = 0;
  v48[3] = off_24C9ABC20;
  *v48 = &off_24C9ABBD0;
  v49 = v129[0];
  v48[4] = v46;
  v48[5] = v49;
  *(_QWORD *)((char *)v48 + 47) = *(_QWORD *)((char *)v129 + 7);
  *((_BYTE *)v48 + 55) = v47;
  v129[0] = 0;
  *(_QWORD *)((char *)v129 + 7) = 0;
  v50 = v121;
  v120 = (char *)(v48 + 3);
  v121 = (std::__shared_weak_count *)v48;
  if (v50)
  {
    p_shared_owners = (unint64_t *)&v50->__shared_owners_;
    do
      v52 = __ldaxr(p_shared_owners);
    while (__stlxr(v52 - 1, p_shared_owners));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  *(_OWORD *)v124 = v118;
  v53 = v120;
  *(_QWORD *)&v124[16] = v119;
  if (v119)
  {
    v54 = (unint64_t *)&v119->__shared_owners_;
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
  }
  v56 = v121;
  *(_QWORD *)&v125 = v53;
  *((_QWORD *)&v125 + 1) = v121;
  if (v121)
  {
    v57 = (unint64_t *)&v121->__shared_owners_;
    do
      v58 = __ldxr(v57);
    while (__stxr(v58 + 1, v57));
    v126[0] = v53;
    do
      v59 = __ldaxr(v57);
    while (__stlxr(v59 - 1, v57));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  else
  {
    v126[0] = v53;
  }
  v60 = v119;
  if (v119)
  {
    v61 = (unint64_t *)&v119->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v63 = *(_QWORD *)v124;
  if (*((char *)v126[0] + 31) >= 0)
    v64 = (char *)v126[0] + 8;
  else
    v64 = (char *)*((_QWORD *)v126[0] + 1);
  v65 = _os_log_pack_fill();
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)(v65 + 4) = v64;
  v66 = operator new();
  v67 = *(unsigned __int8 *)(v17 + 39);
  v68 = *(_QWORD *)(v17 + 16);
  v69 = *(_QWORD *)(v17 + 24);
  v70 = v125;
  *(_OWORD *)(v66 + 8) = *(_OWORD *)&v124[8];
  if ((v67 & 0x80u) != 0)
    v67 = v69;
  else
    v68 = v18;
  *(_QWORD *)v66 = v63;
  *(_QWORD *)&v124[8] = 0;
  *(_QWORD *)&v124[16] = 0;
  *(_OWORD *)(v66 + 24) = v70;
  v125 = 0uLL;
  *(_QWORD *)(v66 + 40) = v68;
  *(_QWORD *)(v66 + 48) = v67;
  *(_BYTE *)(v66 + 56) = 2;
  v122 = 0;
  *(_QWORD *)&v118 = v66;
  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v5 + 24) + 40))(*(_QWORD *)(v5 + 24), &v118);
  v71 = v118;
  *(_QWORD *)&v118 = 0;
  if (v71)
  {
    v72 = *(std::__shared_weak_count **)(v71 + 32);
    if (v72)
    {
      v73 = (unint64_t *)&v72->__shared_owners_;
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
      }
    }
    v75 = *(std::__shared_weak_count **)(v71 + 16);
    if (v75)
    {
      v76 = (unint64_t *)&v75->__shared_owners_;
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
      }
    }
    MEMORY[0x212BC6398](v71, 0x10F0C40B62ED6C6);
    v78 = v122;
    v122 = 0;
    if (v78)
    {
      v79 = (std::__shared_weak_count *)v78[4];
      if (v79)
      {
        v80 = (unint64_t *)&v79->__shared_owners_;
        do
          v81 = __ldaxr(v80);
        while (__stlxr(v81 - 1, v80));
        if (!v81)
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
      }
      v82 = (std::__shared_weak_count *)v78[2];
      if (v82)
      {
        v83 = (unint64_t *)&v82->__shared_owners_;
        do
          v84 = __ldaxr(v83);
        while (__stlxr(v84 - 1, v83));
        if (!v84)
        {
          ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
          std::__shared_weak_count::__release_weak(v82);
        }
      }
      MEMORY[0x212BC6398](v78, 0x10F0C40B62ED6C6);
    }
  }
  v85 = (std::__shared_weak_count *)*((_QWORD *)&v125 + 1);
  if (*((_QWORD *)&v125 + 1))
  {
    v86 = (unint64_t *)(*((_QWORD *)&v125 + 1) + 8);
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = *(std::__shared_weak_count **)&v124[16];
  if (*(_QWORD *)&v124[16])
  {
    v89 = (unint64_t *)(*(_QWORD *)&v124[16] + 8);
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
LABEL_135:
  if (v3)
  {
    v91 = (const char *)__dst;
    if (v105 < 0)
      v91 = (const char *)__dst[0];
    sub_20E8C003C((uint64_t)v97, "%s", v91);
    sub_20E863570((uint64_t)v97);
  }
  sub_20E863570((uint64_t)v97);
  v92 = v103;
  if (v103)
  {
    v93 = (unint64_t *)&v103->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  if (SHIBYTE(v105) < 0)
    operator delete(__dst[0]);
  v106[0] = *MEMORY[0x24BEDB7F0];
  v95 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v106 + *(_QWORD *)(v106[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v107[0] = v95;
  v107[1] = MEMORY[0x24BEDB848] + 16;
  if (v113 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x212BC6290](&v116);
}

void sub_20FB76A7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  uint64_t v28;

  if (*(_BYTE *)(v28 - 168) && *(char *)(v28 - 169) < 0)
    operator delete(*(void **)(v28 - 192));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a13);
  if (a27 < 0)
  {
    operator delete(__p);
    sub_20E863784((uint64_t)&a28);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&a28);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FB76BD0(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_20FB76D64(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_20E860DA4(a1);
}

void sub_20FB76D74()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20FB76D88(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24CA046C0;
  result[1] = v3;
  return result;
}

uint64_t sub_20FB76DBC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24CA046C0;
  a2[1] = v2;
  return result;
}

unint64_t sub_20FB76DD8(uint64_t a1, uint64_t a2)
{
  return sub_20FB76000(a2);
}

uint64_t sub_20FB76DE0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3cva20DenseSchurLPCholeskyIN4cv3d3vio27VIOBATraits_SlidingWindowLP8LSTraitsENS2_24VIOLandmarkDept"
                     "hVariableIdLb1ELNS2_5DepthE0EEEE17setLoggerCallbackIZZNS2_31batch_least_squares_unsanitized10BAFilt"
                     "erFG13PrepareUpdateERKNSA_26SparseVisualInertialWindowEbRKNS2_19batch_least_squares25LowTextureDete"
                     "ctionResultEENK3$_0clINSt3__110unique_ptrINS2_24VIOBASlidingWindowSolverINS2_11VIOBATraitsILNS2_15V"
                     "IOBATraitsTypeE14ELb1EEEEENSL_14default_deleteISR_EEEEEEDaRT_EUlRKNSL_12basic_stringIcNSL_11char_tr"
                     "aitsIcEENSL_9allocatorIcEEEEE_EEvOSW_EUlS15_E_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN3cva20DenseSchurLPCholeskyIN4cv3d3vio27VIOBATraits_SlidingWindowLP8LSTraitsENS2_24VIOL"
                                "andmarkDepthVariableIdLb1ELNS2_5DepthE0EEEE17setLoggerCallbackIZZNS2_31batch_least_squar"
                                "es_unsanitized10BAFilterFG13PrepareUpdateERKNSA_26SparseVisualInertialWindowEbRKNS2_19ba"
                                "tch_least_squares25LowTextureDetectionResultEENK3$_0clINSt3__110unique_ptrINS2_24VIOBASl"
                                "idingWindowSolverINS2_11VIOBATraitsILNS2_15VIOBATraitsTypeE14ELb1EEEEENSL_14default_dele"
                                "teISR_EEEEEEDaRT_EUlRKNSL_12basic_stringIcNSL_11char_traitsIcEENSL_9allocatorIcEEEEE_EEvOSW_EUlS15_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3cva20DenseSchurLPCholeskyIN4cv3d3vio27VIOBATraits_SlidingWindowLP8LSTraitsENS2_24VIOLandmarkDepthVariableIdLb1ELNS2_5DepthE0EEEE17setLoggerCallbackIZZNS2_31batch_least_squares_unsanitized10BAFilterFG13PrepareUpdateERKNSA_26SparseVisualInertialWindowEbRKNS2_19batch_least_squares25LowTextureDetectionResultEENK3$_0clINSt3__110unique_ptrINS2_24VIOBASlidingWindowSolverINS2_11VIOBATraitsILNS2_15VIOBATraitsTypeE14ELb1EEEEENSL_14default_deleteISR_EEEEEEDaRT_EUlRKNSL_12basic_stringIcNSL_11char_traitsIcEENSL_9allocatorIcEEEEE_EEvOSW_EUlS15_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3cva20DenseSchurLPCholeskyIN4cv3d3vio27VIOBATraits_SlidingWindowLP8LSTraitsENS2_24VIOLandmarkDepthVariableIdLb1ELNS2_5DepthE0EEEE17setLoggerCallbackIZZNS2_31batch_least_squares_unsanitized10BAFilterFG13PrepareUpdateERKNSA_26SparseVisualInertialWindowEbRKNS2_19batch_least_squares25LowTextureDetectionResultEENK3$_0clINSt3__110unique_ptrINS2_24VIOBASlidingWindowSolverINS2_11VIOBATraitsILNS2_15VIOBATraitsTypeE14ELb1EEEEENSL_14default_deleteISR_EEEEEEDaRT_EUlRKNSL_12basic_stringIcNSL_11char_traitsIcEENSL_9allocatorIcEEEEE_EEvOSW_EUlS15_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20FB76E4C()
{
  return &unk_24CA04720;
}

uint64_t *sub_20FB76E58(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (uint64_t *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v15 = operator new(0x18uLL);
  *v15 = 0;
  v15[1] = v7;
  *((_DWORD *)v15 + 4) = **a4;
  *((_BYTE *)v15 + 20) = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    v7 = v4;
  }
  else
  {
    v18 = 1;
    if (v8 >= 3)
      v18 = (v8 & (v8 - 1)) != 0;
    v19 = v18 | (2 * v8);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      prime = v20;
    else
      prime = v19;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_36;
    if (prime < v8)
    {
      v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v23 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
      {
        v22 = std::__next_prime(v22);
      }
      else
      {
        v24 = 1 << -(char)__clz(v22 - 1);
        if (v22 >= 2)
          v22 = v24;
      }
      if (prime <= v22)
        prime = v22;
      if (prime < v8)
LABEL_36:
        sub_20E8D2B3C(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v7 %= v8;
    }
    else
    {
      v7 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
  if (v26)
  {
    *v15 = *v26;
LABEL_59:
    *v26 = v15;
    goto LABEL_60;
  }
  *v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v25 + 8 * v7) = a1 + 16;
  if (*v15)
  {
    v27 = *(_QWORD *)(*v15 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v27 >= v8)
        v27 %= v8;
    }
    else
    {
      v27 &= v8 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_20FB7714C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20FB77160(uint64_t a1, uint64_t a2, unsigned int **a3, _DWORD **a4, char *a5)
{
  unsigned int **v10;

  v10 = a3 + 27;
  sub_20FB77A50(a1 + 1296, a2, a3 + 27, *a4, a4[1], *a5);
  sub_20FB77A50(a1 + 4176, a2, v10, a4[6], a4[7], *a5);
  sub_20FB77A50(a1 + 5616, a2, v10, a4[9], a4[10], *a5);
  sub_20FB77DE4(a1 + 7056, a2, v10, a4[12], a4[13], *a5);
  sub_20FB780E4(a1 + 8496, a2, v10, a4[15], a4[16], *a5);
  sub_20FB77DE4(a1 + 9936, a2, v10, a4[18], a4[19], *a5);
  sub_20FB78380(a1 + 11376, a2, v10, a4[21], a4[22], *a5);
  sub_20FB78380(a1 + 12816, a2, v10, a4[24], a4[25], *a5);
  sub_20FB77DE4(a1 + 14256, a2, v10, a4[27], a4[28], *a5);
  sub_20FB786AC(a1 + 1152, a2, a3 + 24, *a4, a4[1], *a5);
  sub_20FB786AC(a1 + 4032, a2, a3 + 24, a4[6], a4[7], *a5);
  sub_20FB786AC(a1 + 5472, a2, a3 + 24, a4[9], a4[10], *a5);
  sub_20FB789BC(a1 + 6912, a2, a3 + 24, a4[12], a4[13], *a5);
  sub_20FB78C8C(a1 + 8352, a2, a3 + 24, a4[15], a4[16], *a5);
  sub_20FB789BC(a1 + 9792, a2, a3 + 24, a4[18], a4[19], *a5);
  sub_20FB78F1C(a1 + 11232, a2, a3 + 24, a4[21], a4[22], *a5);
  sub_20FB78F1C(a1 + 12672, a2, a3 + 24, a4[24], a4[25], *a5);
  sub_20FB789BC(a1 + 14112, a2, a3 + 24, a4[27], a4[28], *a5);
  sub_20FB786AC(a1 + 1008, a2, a3 + 21, *a4, a4[1], *a5);
  sub_20FB786AC(a1 + 3888, a2, a3 + 21, a4[6], a4[7], *a5);
  sub_20FB786AC(a1 + 5328, a2, a3 + 21, a4[9], a4[10], *a5);
  sub_20FB789BC(a1 + 6768, a2, a3 + 21, a4[12], a4[13], *a5);
  sub_20FB78C8C(a1 + 8208, a2, a3 + 21, a4[15], a4[16], *a5);
  sub_20FB789BC(a1 + 9648, a2, a3 + 21, a4[18], a4[19], *a5);
  sub_20FB78F1C(a1 + 11088, a2, a3 + 21, a4[21], a4[22], *a5);
  sub_20FB78F1C(a1 + 12528, a2, a3 + 21, a4[24], a4[25], *a5);
  sub_20FB789BC(a1 + 13968, a2, a3 + 21, a4[27], a4[28], *a5);
  sub_20FB77A50(a1 + 864, a2, a3 + 18, *a4, a4[1], *a5);
  sub_20FB77A50(a1 + 3744, a2, a3 + 18, a4[6], a4[7], *a5);
  sub_20FB77A50(a1 + 5184, a2, a3 + 18, a4[9], a4[10], *a5);
  sub_20FB77DE4(a1 + 6624, a2, a3 + 18, a4[12], a4[13], *a5);
  sub_20FB780E4(a1 + 8064, a2, a3 + 18, a4[15], a4[16], *a5);
  sub_20FB77DE4(a1 + 9504, a2, a3 + 18, a4[18], a4[19], *a5);
  sub_20FB78380(a1 + 10944, a2, a3 + 18, a4[21], a4[22], *a5);
  sub_20FB78380(a1 + 12384, a2, a3 + 18, a4[24], a4[25], *a5);
  sub_20FB77DE4(a1 + 13824, a2, a3 + 18, a4[27], a4[28], *a5);
  sub_20FB791F8(a1 + 720, a2, a3 + 15, *a4, a4[1], *a5);
  sub_20FB791F8(a1 + 3600, a2, a3 + 15, a4[6], a4[7], *a5);
  sub_20FB791F8(a1 + 5040, a2, a3 + 15, a4[9], a4[10], *a5);
  sub_20FB794BC(a1 + 6480, a2, a3 + 15, a4[12], a4[13], *a5);
  sub_20FB79758(a1 + 7920, a2, a3 + 15, a4[15], a4[16], *a5);
  sub_20FB794BC(a1 + 9360, a2, a3 + 15, a4[18], a4[19], *a5);
  sub_20FB799B8(a1 + 10800, a2, a3 + 15, a4[21], a4[22], *a5);
  sub_20FB799B8(a1 + 12240, a2, a3 + 15, a4[24], a4[25], *a5);
  sub_20FB794BC(a1 + 13680, a2, a3 + 15, a4[27], a4[28], *a5);
  sub_20FB77A50(a1 + 576, a2, a3 + 12, *a4, a4[1], *a5);
  sub_20FB77A50(a1 + 3456, a2, a3 + 12, a4[6], a4[7], *a5);
  sub_20FB77A50(a1 + 4896, a2, a3 + 12, a4[9], a4[10], *a5);
  sub_20FB77DE4(a1 + 6336, a2, a3 + 12, a4[12], a4[13], *a5);
  sub_20FB780E4(a1 + 7776, a2, a3 + 12, a4[15], a4[16], *a5);
  sub_20FB77DE4(a1 + 9216, a2, a3 + 12, a4[18], a4[19], *a5);
  sub_20FB78380(a1 + 10656, a2, a3 + 12, a4[21], a4[22], *a5);
  sub_20FB78380(a1 + 12096, a2, a3 + 12, a4[24], a4[25], *a5);
  sub_20FB77DE4(a1 + 13536, a2, a3 + 12, a4[27], a4[28], *a5);
  sub_20FB79C5C(a1 + 432, a2, a3 + 9, *a4, a4[1], *a5);
  sub_20FB79C5C(a1 + 3312, a2, a3 + 9, a4[6], a4[7], *a5);
  sub_20FB79C5C(a1 + 4752, a2, a3 + 9, a4[9], a4[10], *a5);
  sub_20FB7A100(a1 + 6192, a2, a3 + 9, a4[12], a4[13], *a5);
  sub_20FB7A44C(a1 + 7632, a2, a3 + 9, a4[15], a4[16], *a5);
  sub_20FB7A100(a1 + 9072, a2, a3 + 9, a4[18], a4[19], *a5);
  sub_20FB7A704(a1 + 10512, a2, a3 + 9, a4[21], a4[22], *a5);
  sub_20FB7A704(a1 + 11952, a2, a3 + 9, a4[24], a4[25], *a5);
  sub_20FB7A100(a1 + 13392, a2, a3 + 9, a4[27], a4[28], *a5);
  sub_20FB79C5C(a1 + 288, a2, a3 + 6, *a4, a4[1], *a5);
  sub_20FB79C5C(a1 + 3168, a2, a3 + 6, a4[6], a4[7], *a5);
  sub_20FB79C5C(a1 + 4608, a2, a3 + 6, a4[9], a4[10], *a5);
  sub_20FB7A100(a1 + 6048, a2, a3 + 6, a4[12], a4[13], *a5);
  sub_20FB7A44C(a1 + 7488, a2, a3 + 6, a4[15], a4[16], *a5);
  sub_20FB7A100(a1 + 8928, a2, a3 + 6, a4[18], a4[19], *a5);
  sub_20FB7A704(a1 + 10368, a2, a3 + 6, a4[21], a4[22], *a5);
  sub_20FB7A704(a1 + 11808, a2, a3 + 6, a4[24], a4[25], *a5);
  sub_20FB7A100(a1 + 13248, a2, a3 + 6, a4[27], a4[28], *a5);
  sub_20FB79C5C(a1, a2, a3, *a4, a4[1], *a5);
  sub_20FB79C5C(a1 + 2880, a2, a3, a4[6], a4[7], *a5);
  sub_20FB79C5C(a1 + 4320, a2, a3, a4[9], a4[10], *a5);
  sub_20FB7A100(a1 + 5760, a2, a3, a4[12], a4[13], *a5);
  sub_20FB7A44C(a1 + 7200, a2, a3, a4[15], a4[16], *a5);
  sub_20FB7A100(a1 + 8640, a2, a3, a4[18], a4[19], *a5);
  sub_20FB7A704(a1 + 10080, a2, a3, a4[21], a4[22], *a5);
  sub_20FB7A704(a1 + 11520, a2, a3, a4[24], a4[25], *a5);
  return sub_20FB7A100(a1 + 12960, a2, a3, a4[27], a4[28], *a5);
}

uint64_t sub_20FB77A50(uint64_t result, uint64_t a2, unsigned int **a3, _DWORD *a4, _DWORD *a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  uint64_t v27;
  unint64_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  uint64_t v33;
  unint64_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  uint64_t v39;
  unint64_t v40;
  int8x16_t *v41;
  uint64_t *v42;
  uint64_t v43;
  int8x16_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  int v48;
  uint64_t v49;
  uint64_t *v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int *v53;
  unsigned int v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  int v72;
  uint64_t *v73;
  uint64_t v74;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *(_QWORD *)(result + 88);
        v7 = (*(_DWORD *)(result + 112) * *a4);
        v8 = (uint64_t *)(v6 + 8 * v7);
        v9 = *(_DWORD *)(result + 8);
        v10 = v7 + v9;
        v11 = (uint64_t *)(v6 + 8 * v10);
        if (v9)
        {
          if (*v8 == -1)
          {
            v14 = 8 * v10 - 8 * v7 - 8;
            v15 = 1;
            v16 = v8;
            while (1)
            {
              v9 = v15;
              if (!v14)
                break;
              v8 = v16 + 1;
              v17 = v16[1];
              ++v15;
              v14 -= 8;
              ++v16;
              if (v17 != -1)
                goto LABEL_13;
            }
            v8 = v11;
            v12 = *a3;
            v13 = a3[1];
            if (*a3 != v13)
            {
LABEL_14:
              while (v8 != v11)
              {
                v18 = *v12;
                if (*v12 == v9)
                {
                  v19 = *v8;
LABEL_17:
                  v20 = a4[1];
                  v21 = v12[1];
                  v22 = *(_QWORD *)(result + 16) + 8 * v19;
                  v23 = *(int8x16_t *)v22;
                  v24.i64[0] = *(_QWORD *)(v22 + 16);
                  v25.i64[0] = vextq_s8(v23, v23, 8uLL).u64[0];
                  v26 = *(int8x16_t *)(v22 + 24);
                  v27 = *(_QWORD *)(v22 + 40);
                  v28 = vextq_s8(v26, v26, 8uLL).u64[0];
                  v29 = *(int8x16_t *)(v22 + 48);
                  v30.i64[0] = *(_QWORD *)(v22 + 64);
                  v31.i64[0] = vextq_s8(v29, v29, 8uLL).u64[0];
                  v32 = *(int8x16_t *)(v22 + 72);
                  v33 = *(_QWORD *)(v22 + 88);
                  v34 = vextq_s8(v32, v32, 8uLL).u64[0];
                  v35 = *(int8x16_t *)(v22 + 96);
                  v36.i64[0] = *(_QWORD *)(v22 + 112);
                  v37.i64[0] = vextq_s8(v35, v35, 8uLL).u64[0];
                  v38 = *(int8x16_t *)(v22 + 120);
                  v39 = *(_QWORD *)(v22 + 136);
                  v40 = vextq_s8(v38, v38, 8uLL).u64[0];
                  if (v20 >= v21)
                  {
                    v44 = (int8x16_t *)(a2 + 8 * (v21 + 6 * v20));
                    v44[1].i64[0] = v24.i64[0];
                    v23.i64[1] = v25.i64[0];
                    *v44 = v23;
                    v44[4].i64[0] = v27;
                    v26.i64[1] = v28;
                    v44[3] = v26;
                    v44[7].i64[0] = v30.i64[0];
                    v29.i64[1] = v31.i64[0];
                    v44[6] = v29;
                    v44[10].i64[0] = v33;
                    v32.i64[1] = v34;
                    v44[9] = v32;
                    v44[13].i64[0] = v36.i64[0];
                    v35.i64[1] = v37.i64[0];
                    v44[12] = v35;
                    v44[16].i64[0] = v39;
                    v38.i64[1] = v40;
                    v9 = v18;
                    v44[15] = v38;
                  }
                  else
                  {
                    v23.i64[1] = *(_QWORD *)(v22 + 24);
                    v29.i64[1] = *(_QWORD *)(v22 + 72);
                    v41 = (int8x16_t *)(a2 + 8 * (v20 + 6 * v21));
                    v35.i64[1] = *(_QWORD *)(v22 + 120);
                    v25.i64[1] = v28;
                    v31.i64[1] = v34;
                    v37.i64[1] = v40;
                    v24.i64[1] = *(_QWORD *)(v22 + 40);
                    v30.i64[1] = *(_QWORD *)(v22 + 88);
                    v36.i64[1] = *(_QWORD *)(v22 + 136);
                    *v41 = v23;
                    v41[1] = v29;
                    v41[4] = v31;
                    v41[5] = v37;
                    v41[2] = v35;
                    v41[3] = v25;
                    v41[7] = v30;
                    v41[8] = v36;
                    v9 = v18;
                    v41[6] = v24;
                  }
                }
                else
                {
LABEL_19:
                  if (v18 >= v9)
                  {
                    v42 = v8 + 1;
                    while (v42 != v11)
                    {
                      ++v9;
                      v43 = *v42++;
                      v19 = v43;
                      if (v43 != -1)
                      {
                        v8 = v42 - 1;
                        if (v18 != v9)
                          goto LABEL_19;
                        goto LABEL_17;
                      }
                    }
                    break;
                  }
                }
                if (v8 != v11)
                {
                  v12 += 2;
                  if (v12 != v13)
                    continue;
                }
                break;
              }
            }
          }
          else
          {
            v9 = 0;
            v12 = *a3;
            v13 = a3[1];
            if (*a3 != v13)
              goto LABEL_14;
          }
        }
        else
        {
LABEL_13:
          v12 = *a3;
          v13 = a3[1];
          if (*a3 != v13)
            goto LABEL_14;
        }
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v45 = *(_QWORD *)(result + 88);
        v46 = (*(_DWORD *)(result + 112) * *a4);
        v47 = (uint64_t *)(v45 + 8 * v46);
        v48 = *(_DWORD *)(result + 8);
        v49 = (v46 + v48);
        v50 = (uint64_t *)(v45 + 8 * v49);
        if (v48 && *v47 == -1)
        {
          v71 = 8 * v49 - 8 * v46 - 8;
          v72 = 1;
          v73 = v47;
          while (1)
          {
            v51 = v72;
            if (!v71)
              break;
            v47 = v73 + 1;
            v74 = v73[1];
            ++v72;
            v71 -= 8;
            ++v73;
            if (v74 != -1)
              goto LABEL_37;
          }
          v47 = v50;
        }
        else
        {
          v51 = 0;
        }
LABEL_37:
        v52 = *a3;
        v53 = a3[1];
        while (v52 != v53 && v47 != v50)
        {
          v54 = *v52;
          if (*v52 > v51)
          {
            v55 = v47 + 1;
            while (v55 != v50)
            {
              ++v51;
              v56 = *v55++;
              if (v56 != -1 && v54 <= v51)
              {
                v47 = v55 - 1;
                goto LABEL_49;
              }
            }
            break;
          }
LABEL_49:
          if (v54 == v51)
          {
            v58 = *(_QWORD *)(result + 16) + 8 * *v47;
            v59 = a2 + 8 * (v52[1] + 6 * a4[1]);
            v60 = *(_QWORD *)(v58 + 16);
            v61 = *(_QWORD *)(v58 + 40);
            v62 = *(_OWORD *)(v58 + 24);
            v63 = *(_QWORD *)(v58 + 64);
            v64 = *(_OWORD *)(v58 + 48);
            v65 = *(_QWORD *)(v58 + 88);
            v66 = *(_OWORD *)(v58 + 72);
            v67 = *(_QWORD *)(v58 + 112);
            v68 = *(_OWORD *)(v58 + 96);
            v69 = *(_QWORD *)(v58 + 136);
            v70 = *(_OWORD *)(v58 + 120);
            *(_OWORD *)v59 = *(_OWORD *)v58;
            *(_QWORD *)(v59 + 16) = v60;
            *(_OWORD *)(v59 + 48) = v62;
            *(_QWORD *)(v59 + 64) = v61;
            *(_OWORD *)(v59 + 96) = v64;
            *(_QWORD *)(v59 + 112) = v63;
            *(_OWORD *)(v59 + 144) = v66;
            *(_QWORD *)(v59 + 160) = v65;
            *(_OWORD *)(v59 + 192) = v68;
            *(_QWORD *)(v59 + 208) = v67;
            *(_OWORD *)(v59 + 240) = v70;
            v51 = v54;
            *(_QWORD *)(v59 + 256) = v69;
          }
          v52 += 2;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20FB77DE4(uint64_t result, uint64_t a2, unsigned int **a3, _DWORD *a4, _DWORD *a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  int8x16_t v23;
  uint64_t v24;
  __int128 v25;
  int8x16_t v26;
  unint64_t v27;
  int8x16_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int v38;
  uint64_t v39;
  uint64_t *v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int *v43;
  unsigned int v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  int v56;
  uint64_t *v57;
  uint64_t v58;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *(_QWORD *)(result + 88);
        v7 = (*(_DWORD *)(result + 112) * *a4);
        v8 = (uint64_t *)(v6 + 8 * v7);
        v9 = *(_DWORD *)(result + 8);
        v10 = v7 + v9;
        v11 = (uint64_t *)(v6 + 8 * v10);
        if (v9)
        {
          if (*v8 == -1)
          {
            v14 = 8 * v10 - 8 * v7 - 8;
            v15 = 1;
            v16 = v8;
            while (1)
            {
              v9 = v15;
              if (!v14)
                break;
              v8 = v16 + 1;
              v17 = v16[1];
              ++v15;
              v14 -= 8;
              ++v16;
              if (v17 != -1)
                goto LABEL_13;
            }
            v8 = v11;
            v12 = *a3;
            v13 = a3[1];
            if (*a3 != v13)
            {
LABEL_14:
              while (v8 != v11)
              {
                v18 = *v12;
                if (*v12 == v9)
                {
                  v19 = *v8;
LABEL_17:
                  v20 = a4[1];
                  v21 = v12[1];
                  v22 = *(_QWORD *)(result + 16) + 8 * v19;
                  v23 = *(int8x16_t *)v22;
                  v24 = *(_QWORD *)(v22 + 16);
                  *(_QWORD *)&v25 = vextq_s8(v23, v23, 8uLL).u64[0];
                  v26 = *(int8x16_t *)(v22 + 24);
                  v27 = *(_QWORD *)(v22 + 40);
                  v28 = *(int8x16_t *)(v22 + 48);
                  v29 = *(_QWORD *)(v22 + 64);
                  v30 = vextq_s8(v28, v28, 8uLL).u64[0];
                  if (v20 >= v21)
                  {
                    v31 = a2 + 8 * (v21 + 6 * v20);
                    *(_QWORD *)(v31 + 16) = v24;
                    v23.i64[1] = v25;
                    *(int8x16_t *)v31 = v23;
                    *(_QWORD *)&v25 = v26.i64[0];
                  }
                  else
                  {
                    v31 = a2 + 8 * (v20 + 6 * v21);
                    v23.i64[1] = *(_QWORD *)(v22 + 24);
                    v32 = *(_QWORD *)(v22 + 40);
                    *(_QWORD *)(v31 + 16) = v28.i64[0];
                    *(int8x16_t *)v31 = v23;
                    v27 = v30;
                    v28.i64[0] = v24;
                    v30 = v32;
                  }
                  *(_QWORD *)(v31 + 64) = v27;
                  *((_QWORD *)&v25 + 1) = vextq_s8(v26, v26, 8uLL).u64[0];
                  *(_OWORD *)(v31 + 48) = v25;
                  *(_QWORD *)(v31 + 112) = v29;
                  v28.i64[1] = v30;
                  *(int8x16_t *)(v31 + 96) = v28;
                  v9 = v18;
                }
                else
                {
LABEL_19:
                  if (v18 >= v9)
                  {
                    v33 = v8 + 1;
                    while (v33 != v11)
                    {
                      ++v9;
                      v34 = *v33++;
                      v19 = v34;
                      if (v34 != -1)
                      {
                        v8 = v33 - 1;
                        if (v18 != v9)
                          goto LABEL_19;
                        goto LABEL_17;
                      }
                    }
                    break;
                  }
                }
                if (v8 != v11)
                {
                  v12 += 2;
                  if (v12 != v13)
                    continue;
                }
                break;
              }
            }
          }
          else
          {
            v9 = 0;
            v12 = *a3;
            v13 = a3[1];
            if (*a3 != v13)
              goto LABEL_14;
          }
        }
        else
        {
LABEL_13:
          v12 = *a3;
          v13 = a3[1];
          if (*a3 != v13)
            goto LABEL_14;
        }
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v35 = *(_QWORD *)(result + 88);
        v36 = (*(_DWORD *)(result + 112) * *a4);
        v37 = (uint64_t *)(v35 + 8 * v36);
        v38 = *(_DWORD *)(result + 8);
        v39 = (v36 + v38);
        v40 = (uint64_t *)(v35 + 8 * v39);
        if (v38 && *v37 == -1)
        {
          v55 = 8 * v39 - 8 * v36 - 8;
          v56 = 1;
          v57 = v37;
          while (1)
          {
            v41 = v56;
            if (!v55)
              break;
            v37 = v57 + 1;
            v58 = v57[1];
            ++v56;
            v55 -= 8;
            ++v57;
            if (v58 != -1)
              goto LABEL_38;
          }
          v37 = v40;
        }
        else
        {
          v41 = 0;
        }
LABEL_38:
        v42 = *a3;
        v43 = a3[1];
        while (v42 != v43 && v37 != v40)
        {
          v44 = *v42;
          if (*v42 > v41)
          {
            v45 = v37 + 1;
            while (v45 != v40)
            {
              ++v41;
              v46 = *v45++;
              if (v46 != -1 && v44 <= v41)
              {
                v37 = v45 - 1;
                goto LABEL_50;
              }
            }
            break;
          }
LABEL_50:
          if (v44 == v41)
          {
            v48 = *(_QWORD *)(result + 16) + 8 * *v37;
            v49 = a2 + 8 * (v42[1] + 6 * a4[1]);
            v50 = *(_QWORD *)(v48 + 16);
            v51 = *(_QWORD *)(v48 + 40);
            v52 = *(_OWORD *)(v48 + 24);
            v53 = *(_QWORD *)(v48 + 64);
            v54 = *(_OWORD *)(v48 + 48);
            *(_OWORD *)v49 = *(_OWORD *)v48;
            *(_QWORD *)(v49 + 16) = v50;
            *(_OWORD *)(v49 + 48) = v52;
            *(_QWORD *)(v49 + 64) = v51;
            *(_OWORD *)(v49 + 96) = v54;
            *(_QWORD *)(v49 + 112) = v53;
            v41 = v44;
          }
          v42 += 2;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20FB780E4(uint64_t result, uint64_t a2, unsigned int **a3, _DWORD *a4, _DWORD *a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  int8x16_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  int8x16_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int v34;
  uint64_t v35;
  uint64_t *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  int v48;
  uint64_t *v49;
  uint64_t v50;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *(_QWORD *)(result + 88);
        v7 = (*(_DWORD *)(result + 112) * *a4);
        v8 = (uint64_t *)(v6 + 8 * v7);
        v9 = *(_DWORD *)(result + 8);
        v10 = (v7 + v9);
        v11 = (uint64_t *)(v6 + 8 * v10);
        if (v9 && *v8 == -1)
        {
          v15 = 8 * v10 - 8 * v7 - 8;
          v16 = 1;
          v17 = v8;
          while (1)
          {
            v12 = v16;
            if (!v15)
              break;
            v8 = v17 + 1;
            v18 = v17[1];
            ++v16;
            v15 -= 8;
            ++v17;
            if (v18 != -1)
            {
              v13 = *a3;
              v14 = a3[1];
              if (*a3 != v14)
                goto LABEL_14;
              goto LABEL_5;
            }
          }
          v8 = v11;
          v13 = *a3;
          v14 = a3[1];
          if (*a3 != v14)
          {
LABEL_14:
            while (v8 != v11)
            {
              v19 = *v13;
              if (*v13 == v12)
              {
                v20 = *v8;
LABEL_17:
                v21 = a4[1];
                v22 = v13[1];
                v23 = *(_QWORD *)(result + 16) + 8 * v20;
                v24 = *(int8x16_t *)v23;
                v25 = *(_QWORD *)(v23 + 16);
                v26 = vextq_s8(v24, v24, 8uLL).u64[0];
                if (v21 >= v22)
                {
                  v30 = (int8x16_t *)(a2 + 8 * (v22 + 6 * v21));
                  v30[1].i64[0] = v25;
                  v24.i64[1] = v26;
                  *v30 = v24;
                }
                else
                {
                  v27 = (_QWORD *)(a2 + 8 * (v21 + 6 * v22));
                  *v27 = v24.i64[0];
                  v27[6] = v26;
                  v27[12] = v25;
                }
                v12 = v19;
              }
              else
              {
LABEL_19:
                if (v19 >= v12)
                {
                  v28 = v8 + 1;
                  while (v28 != v11)
                  {
                    ++v12;
                    v29 = *v28++;
                    v20 = v29;
                    if (v29 != -1)
                    {
                      v8 = v28 - 1;
                      if (v19 != v12)
                        goto LABEL_19;
                      goto LABEL_17;
                    }
                  }
                  break;
                }
              }
              if (v8 != v11)
              {
                v13 += 2;
                if (v13 != v14)
                  continue;
              }
              break;
            }
          }
        }
        else
        {
          v12 = 0;
          v13 = *a3;
          v14 = a3[1];
          if (*a3 != v14)
            goto LABEL_14;
        }
LABEL_5:
        ;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v31 = *(_QWORD *)(result + 88);
        v32 = (*(_DWORD *)(result + 112) * *a4);
        v33 = (uint64_t *)(v31 + 8 * v32);
        v34 = *(_DWORD *)(result + 8);
        v35 = (v32 + v34);
        v36 = (uint64_t *)(v31 + 8 * v35);
        if (v34 && *v33 == -1)
        {
          v47 = 8 * v35 - 8 * v32 - 8;
          v48 = 1;
          v49 = v33;
          while (1)
          {
            v37 = v48;
            if (!v47)
              break;
            v33 = v49 + 1;
            v50 = v49[1];
            ++v48;
            v47 -= 8;
            ++v49;
            if (v50 != -1)
              goto LABEL_38;
          }
          v33 = v36;
        }
        else
        {
          v37 = 0;
        }
LABEL_38:
        v38 = *a3;
        v39 = a3[1];
        while (v38 != v39 && v33 != v36)
        {
          v40 = *v38;
          if (*v38 > v37)
          {
            v41 = v33 + 1;
            while (v41 != v36)
            {
              ++v37;
              v42 = *v41++;
              if (v42 != -1 && v40 <= v37)
              {
                v33 = v41 - 1;
                goto LABEL_50;
              }
            }
            break;
          }
LABEL_50:
          if (v40 == v37)
          {
            v44 = *(_QWORD *)(result + 16) + 8 * *v33;
            v45 = a2 + 8 * (v38[1] + 6 * a4[1]);
            v46 = *(_OWORD *)v44;
            *(_QWORD *)(v45 + 16) = *(_QWORD *)(v44 + 16);
            *(_OWORD *)v45 = v46;
            v37 = v40;
          }
          v38 += 2;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20FB78380(uint64_t result, uint64_t a2, unsigned int **a3, _DWORD *a4, _DWORD *a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  uint64_t v27;
  unint64_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  uint64_t v33;
  unint64_t v34;
  int8x16_t *v35;
  uint64_t *v36;
  uint64_t v37;
  int8x16_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int v42;
  uint64_t v43;
  uint64_t *v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int *v47;
  unsigned int v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  int v62;
  uint64_t *v63;
  uint64_t v64;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *(_QWORD *)(result + 88);
        v7 = (*(_DWORD *)(result + 112) * *a4);
        v8 = (uint64_t *)(v6 + 8 * v7);
        v9 = *(_DWORD *)(result + 8);
        v10 = v7 + v9;
        v11 = (uint64_t *)(v6 + 8 * v10);
        if (v9)
        {
          if (*v8 == -1)
          {
            v14 = 8 * v10 - 8 * v7 - 8;
            v15 = 1;
            v16 = v8;
            while (1)
            {
              v9 = v15;
              if (!v14)
                break;
              v8 = v16 + 1;
              v17 = v16[1];
              ++v15;
              v14 -= 8;
              ++v16;
              if (v17 != -1)
                goto LABEL_13;
            }
            v8 = v11;
            v12 = *a3;
            v13 = a3[1];
            if (*a3 != v13)
            {
LABEL_14:
              while (v8 != v11)
              {
                v18 = *v12;
                if (*v12 == v9)
                {
                  v19 = *v8;
LABEL_17:
                  v20 = a4[1];
                  v21 = v12[1];
                  v22 = *(_QWORD *)(result + 16) + 8 * v19;
                  v23 = *(int8x16_t *)v22;
                  v24.i64[0] = *(_QWORD *)(v22 + 16);
                  v25.i64[0] = vextq_s8(v23, v23, 8uLL).u64[0];
                  v26 = *(int8x16_t *)(v22 + 24);
                  v27 = *(_QWORD *)(v22 + 40);
                  v28 = vextq_s8(v26, v26, 8uLL).u64[0];
                  v29 = *(int8x16_t *)(v22 + 48);
                  v30.i64[0] = *(_QWORD *)(v22 + 64);
                  v31.i64[0] = vextq_s8(v29, v29, 8uLL).u64[0];
                  v32 = *(int8x16_t *)(v22 + 72);
                  v33 = *(_QWORD *)(v22 + 88);
                  v34 = vextq_s8(v32, v32, 8uLL).u64[0];
                  if (v20 >= v21)
                  {
                    v38 = (int8x16_t *)(a2 + 8 * (v21 + 6 * v20));
                    v38[1].i64[0] = v24.i64[0];
                    v23.i64[1] = v25.i64[0];
                    *v38 = v23;
                    v38[4].i64[0] = v27;
                    v26.i64[1] = v28;
                    v38[3] = v26;
                    v38[7].i64[0] = v30.i64[0];
                    v29.i64[1] = v31.i64[0];
                    v38[6] = v29;
                    v38[10].i64[0] = v33;
                    v32.i64[1] = v34;
                    v38[9] = v32;
                  }
                  else
                  {
                    v23.i64[1] = *(_QWORD *)(v22 + 24);
                    v29.i64[1] = *(_QWORD *)(v22 + 72);
                    v25.i64[1] = v28;
                    v31.i64[1] = v34;
                    v35 = (int8x16_t *)(a2 + 8 * (v20 + 6 * v21));
                    v24.i64[1] = *(_QWORD *)(v22 + 40);
                    v30.i64[1] = *(_QWORD *)(v22 + 88);
                    *v35 = v23;
                    v35[1] = v29;
                    v35[3] = v25;
                    v35[4] = v31;
                    v35[6] = v24;
                    v35[7] = v30;
                  }
                  v9 = v18;
                }
                else
                {
LABEL_19:
                  if (v18 >= v9)
                  {
                    v36 = v8 + 1;
                    while (v36 != v11)
                    {
                      ++v9;
                      v37 = *v36++;
                      v19 = v37;
                      if (v37 != -1)
                      {
                        v8 = v36 - 1;
                        if (v18 != v9)
                          goto LABEL_19;
                        goto LABEL_17;
                      }
                    }
                    break;
                  }
                }
                if (v8 != v11)
                {
                  v12 += 2;
                  if (v12 != v13)
                    continue;
                }
                break;
              }
            }
          }
          else
          {
            v9 = 0;
            v12 = *a3;
            v13 = a3[1];
            if (*a3 != v13)
              goto LABEL_14;
          }
        }
        else
        {
LABEL_13:
          v12 = *a3;
          v13 = a3[1];
          if (*a3 != v13)
            goto LABEL_14;
        }
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v39 = *(_QWORD *)(result + 88);
        v40 = (*(_DWORD *)(result + 112) * *a4);
        v41 = (uint64_t *)(v39 + 8 * v40);
        v42 = *(_DWORD *)(result + 8);
        v43 = (v40 + v42);
        v44 = (uint64_t *)(v39 + 8 * v43);
        if (v42 && *v41 == -1)
        {
          v61 = 8 * v43 - 8 * v40 - 8;
          v62 = 1;
          v63 = v41;
          while (1)
          {
            v45 = v62;
            if (!v61)
              break;
            v41 = v63 + 1;
            v64 = v63[1];
            ++v62;
            v61 -= 8;
            ++v63;
            if (v64 != -1)
              goto LABEL_38;
          }
          v41 = v44;
        }
        else
        {
          v45 = 0;
        }
LABEL_38:
        v46 = *a3;
        v47 = a3[1];
        while (v46 != v47 && v41 != v44)
        {
          v48 = *v46;
          if (*v46 > v45)
          {
            v49 = v41 + 1;
            while (v49 != v44)
            {
              ++v45;
              v50 = *v49++;
              if (v50 != -1 && v48 <= v45)
              {
                v41 = v49 - 1;
                goto LABEL_50;
              }
            }
            break;
          }
LABEL_50:
          if (v48 == v45)
          {
            v52 = *(_QWORD *)(result + 16) + 8 * *v41;
            v53 = a2 + 8 * (v46[1] + 6 * a4[1]);
            v54 = *(_QWORD *)(v52 + 16);
            v55 = *(_QWORD *)(v52 + 40);
            v56 = *(_OWORD *)(v52 + 24);
            v57 = *(_QWORD *)(v52 + 64);
            v58 = *(_OWORD *)(v52 + 48);
            v59 = *(_QWORD *)(v52 + 88);
            v60 = *(_OWORD *)(v52 + 72);
            *(_OWORD *)v53 = *(_OWORD *)v52;
            *(_QWORD *)(v53 + 16) = v54;
            *(_OWORD *)(v53 + 48) = v56;
            *(_QWORD *)(v53 + 64) = v55;
            *(_OWORD *)(v53 + 96) = v58;
            *(_QWORD *)(v53 + 112) = v57;
            *(_OWORD *)(v53 + 144) = v60;
            *(_QWORD *)(v53 + 160) = v59;
            v45 = v48;
          }
          v46 += 2;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20FB786AC(uint64_t result, uint64_t a2, unsigned int **a3, _DWORD *a4, _DWORD *a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  int64x2_t *v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t *v35;
  uint64_t *v36;
  uint64_t v37;
  int64x2_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int v42;
  uint64_t v43;
  uint64_t *v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int *v47;
  unsigned int v48;
  uint64_t *v49;
  uint64_t v50;
  _OWORD *v52;
  _OWORD *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  int v66;
  uint64_t *v67;
  uint64_t v68;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *(_QWORD *)(result + 88);
        v7 = (*(_DWORD *)(result + 112) * *a4);
        v8 = (uint64_t *)(v6 + 8 * v7);
        v9 = *(_DWORD *)(result + 8);
        v10 = v7 + v9;
        v11 = (uint64_t *)(v6 + 8 * v10);
        if (v9)
        {
          if (*v8 == -1)
          {
            v14 = 8 * v10 - 8 * v7 - 8;
            v15 = 1;
            v16 = v8;
            while (1)
            {
              v9 = v15;
              if (!v14)
                break;
              v8 = v16 + 1;
              v17 = v16[1];
              ++v15;
              v14 -= 8;
              ++v16;
              if (v17 != -1)
                goto LABEL_13;
            }
            v8 = v11;
            v12 = *a3;
            v13 = a3[1];
            if (*a3 != v13)
            {
LABEL_14:
              while (v8 != v11)
              {
                v18 = *v12;
                if (*v12 == v9)
                {
                  v19 = *v8;
LABEL_17:
                  v20 = a4[1];
                  v21 = v12[1];
                  v22 = (int64x2_t *)(*(_QWORD *)(result + 16) + 8 * v19);
                  v24 = *v22;
                  v23 = v22[1];
                  v26 = v22[2];
                  v25 = v22[3];
                  v28 = v22[4];
                  v27 = v22[5];
                  v30 = v22[6];
                  v29 = v22[7];
                  v32 = v22[8];
                  v31 = v22[9];
                  v34 = v22[10];
                  v33 = v22[11];
                  if (v20 >= v21)
                  {
                    v38 = (int64x2_t *)(a2 + 8 * (v21 + 6 * v20));
                    *v38 = v24;
                    v38[1] = v23;
                    v38[3] = v26;
                    v38[4] = v25;
                    v38[6] = v28;
                    v38[7] = v27;
                    v38[9] = v30;
                    v38[10] = v29;
                    v38[12] = v32;
                    v38[13] = v31;
                    v38[15] = v34;
                    v38[16] = v33;
                  }
                  else
                  {
                    v35 = (int64x2_t *)(a2 + 8 * (v20 + 6 * v21));
                    *v35 = vzip1q_s64(v24, v26);
                    v35[1] = vzip1q_s64(v28, v30);
                    v35[4] = vzip2q_s64(v28, v30);
                    v35[5] = vzip2q_s64(v32, v34);
                    v35[2] = vzip1q_s64(v32, v34);
                    v35[3] = vzip2q_s64(v24, v26);
                    v35[6] = vzip1q_s64(v23, v25);
                    v35[7] = vzip1q_s64(v27, v29);
                    v35[10] = vzip2q_s64(v27, v29);
                    v35[11] = vzip2q_s64(v31, v33);
                    v35[8] = vzip1q_s64(v31, v33);
                    v35[9] = vzip2q_s64(v23, v25);
                  }
                  v9 = v18;
                }
                else
                {
LABEL_19:
                  if (v18 >= v9)
                  {
                    v36 = v8 + 1;
                    while (v36 != v11)
                    {
                      ++v9;
                      v37 = *v36++;
                      v19 = v37;
                      if (v37 != -1)
                      {
                        v8 = v36 - 1;
                        if (v18 != v9)
                          goto LABEL_19;
                        goto LABEL_17;
                      }
                    }
                    break;
                  }
                }
                if (v8 != v11)
                {
                  v12 += 2;
                  if (v12 != v13)
                    continue;
                }
                break;
              }
            }
          }
          else
          {
            v9 = 0;
            v12 = *a3;
            v13 = a3[1];
            if (*a3 != v13)
              goto LABEL_14;
          }
        }
        else
        {
LABEL_13:
          v12 = *a3;
          v13 = a3[1];
          if (*a3 != v13)
            goto LABEL_14;
        }
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v39 = *(_QWORD *)(result + 88);
        v40 = (*(_DWORD *)(result + 112) * *a4);
        v41 = (uint64_t *)(v39 + 8 * v40);
        v42 = *(_DWORD *)(result + 8);
        v43 = (v40 + v42);
        v44 = (uint64_t *)(v39 + 8 * v43);
        if (v42 && *v41 == -1)
        {
          v65 = 8 * v43 - 8 * v40 - 8;
          v66 = 1;
          v67 = v41;
          while (1)
          {
            v45 = v66;
            if (!v65)
              break;
            v41 = v67 + 1;
            v68 = v67[1];
            ++v66;
            v65 -= 8;
            ++v67;
            if (v68 != -1)
              goto LABEL_38;
          }
          v41 = v44;
        }
        else
        {
          v45 = 0;
        }
LABEL_38:
        v46 = *a3;
        v47 = a3[1];
        while (v46 != v47 && v41 != v44)
        {
          v48 = *v46;
          if (*v46 > v45)
          {
            v49 = v41 + 1;
            while (v49 != v44)
            {
              ++v45;
              v50 = *v49++;
              if (v50 != -1 && v48 <= v45)
              {
                v41 = v49 - 1;
                goto LABEL_50;
              }
            }
            break;
          }
LABEL_50:
          if (v48 == v45)
          {
            v52 = (_OWORD *)(*(_QWORD *)(result + 16) + 8 * *v41);
            v53 = (_OWORD *)(a2 + 8 * (v46[1] + 6 * a4[1]));
            v54 = v52[1];
            v56 = v52[2];
            v55 = v52[3];
            v58 = v52[4];
            v57 = v52[5];
            v60 = v52[6];
            v59 = v52[7];
            v62 = v52[8];
            v61 = v52[9];
            v64 = v52[10];
            v63 = v52[11];
            *v53 = *v52;
            v53[1] = v54;
            v53[3] = v56;
            v53[4] = v55;
            v53[6] = v58;
            v53[7] = v57;
            v53[9] = v60;
            v53[10] = v59;
            v53[12] = v62;
            v53[13] = v61;
            v45 = v48;
            v53[15] = v64;
            v53[16] = v63;
          }
          v46 += 2;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20FB789BC(uint64_t result, uint64_t a2, unsigned int **a3, _DWORD *a4, _DWORD *a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  int64x2_t *v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t *v30;
  uint64_t *v31;
  uint64_t v32;
  int64x2_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int v37;
  uint64_t v38;
  uint64_t *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t *v44;
  uint64_t v45;
  _OWORD *v47;
  _OWORD *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  int v55;
  uint64_t *v56;
  uint64_t v57;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *(_QWORD *)(result + 88);
        v7 = (*(_DWORD *)(result + 112) * *a4);
        v8 = (uint64_t *)(v6 + 8 * v7);
        v9 = *(_DWORD *)(result + 8);
        v10 = (v7 + v9);
        v11 = (uint64_t *)(v6 + 8 * v10);
        if (v9 && *v8 == -1)
        {
          v15 = 8 * v10 - 8 * v7 - 8;
          v16 = 1;
          v17 = v8;
          while (1)
          {
            v12 = v16;
            if (!v15)
              break;
            v8 = v17 + 1;
            v18 = v17[1];
            ++v16;
            v15 -= 8;
            ++v17;
            if (v18 != -1)
            {
              v13 = *a3;
              v14 = a3[1];
              if (*a3 != v14)
                goto LABEL_14;
              goto LABEL_5;
            }
          }
          v8 = v11;
          v13 = *a3;
          v14 = a3[1];
          if (*a3 != v14)
          {
LABEL_14:
            while (v8 != v11)
            {
              v19 = *v13;
              if (*v13 == v12)
              {
                v20 = *v8;
LABEL_17:
                v21 = a4[1];
                v22 = v13[1];
                v23 = (int64x2_t *)(*(_QWORD *)(result + 16) + 8 * v20);
                v25 = *v23;
                v24 = v23[1];
                v27 = v23[2];
                v26 = v23[3];
                v29 = v23[4];
                v28 = v23[5];
                if (v21 >= v22)
                {
                  v33 = (int64x2_t *)(a2 + 8 * (v22 + 6 * v21));
                  *v33 = v25;
                  v33[1] = v24;
                  v33[3] = v27;
                  v33[4] = v26;
                  v33[6] = v29;
                  v33[7] = v28;
                }
                else
                {
                  v30 = (int64x2_t *)(a2 + 8 * (v21 + 6 * v22));
                  v30[1].i64[0] = v29.i64[0];
                  *v30 = vzip1q_s64(v25, v27);
                  v30[3] = vzip2q_s64(v25, v27);
                  v30[4].i64[0] = v29.i64[1];
                  v30[7].i64[0] = v28.i64[0];
                  v30[6] = vzip1q_s64(v24, v26);
                  v30[9] = vzip2q_s64(v24, v26);
                  v30[10].i64[0] = v28.i64[1];
                }
                v12 = v19;
              }
              else
              {
LABEL_19:
                if (v19 >= v12)
                {
                  v31 = v8 + 1;
                  while (v31 != v11)
                  {
                    ++v12;
                    v32 = *v31++;
                    v20 = v32;
                    if (v32 != -1)
                    {
                      v8 = v31 - 1;
                      if (v19 != v12)
                        goto LABEL_19;
                      goto LABEL_17;
                    }
                  }
                  break;
                }
              }
              if (v8 != v11)
              {
                v13 += 2;
                if (v13 != v14)
                  continue;
              }
              break;
            }
          }
        }
        else
        {
          v12 = 0;
          v13 = *a3;
          v14 = a3[1];
          if (*a3 != v14)
            goto LABEL_14;
        }
LABEL_5:
        ;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v34 = *(_QWORD *)(result + 88);
        v35 = (*(_DWORD *)(result + 112) * *a4);
        v36 = (uint64_t *)(v34 + 8 * v35);
        v37 = *(_DWORD *)(result + 8);
        v38 = (v35 + v37);
        v39 = (uint64_t *)(v34 + 8 * v38);
        if (v37 && *v36 == -1)
        {
          v54 = 8 * v38 - 8 * v35 - 8;
          v55 = 1;
          v56 = v36;
          while (1)
          {
            v40 = v55;
            if (!v54)
              break;
            v36 = v56 + 1;
            v57 = v56[1];
            ++v55;
            v54 -= 8;
            ++v56;
            if (v57 != -1)
              goto LABEL_38;
          }
          v36 = v39;
        }
        else
        {
          v40 = 0;
        }
LABEL_38:
        v41 = *a3;
        v42 = a3[1];
        while (v41 != v42 && v36 != v39)
        {
          v43 = *v41;
          if (*v41 > v40)
          {
            v44 = v36 + 1;
            while (v44 != v39)
            {
              ++v40;
              v45 = *v44++;
              if (v45 != -1 && v43 <= v40)
              {
                v36 = v44 - 1;
                goto LABEL_50;
              }
            }
            break;
          }
LABEL_50:
          if (v43 == v40)
          {
            v47 = (_OWORD *)(*(_QWORD *)(result + 16) + 8 * *v36);
            v48 = (_OWORD *)(a2 + 8 * (v41[1] + 6 * a4[1]));
            v49 = v47[1];
            v51 = v47[2];
            v50 = v47[3];
            v53 = v47[4];
            v52 = v47[5];
            *v48 = *v47;
            v48[1] = v49;
            v48[3] = v51;
            v48[4] = v50;
            v48[6] = v53;
            v48[7] = v52;
            v40 = v43;
          }
          v41 += 2;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20FB78C8C(uint64_t result, uint64_t a2, unsigned int **a3, _DWORD *a4, _DWORD *a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  int8x16_t *v23;
  int8x16_t v24;
  int8x16_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  int8x16_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  int v33;
  uint64_t v34;
  uint64_t *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int v39;
  uint64_t *v40;
  uint64_t v41;
  _OWORD *v43;
  _OWORD *v44;
  __int128 v45;
  uint64_t v46;
  int v47;
  uint64_t *v48;
  uint64_t v49;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *(_QWORD *)(result + 88);
        v7 = (*(_DWORD *)(result + 112) * *a4);
        v8 = (uint64_t *)(v6 + 8 * v7);
        v9 = *(_DWORD *)(result + 8);
        v10 = (v7 + v9);
        v11 = (uint64_t *)(v6 + 8 * v10);
        if (v9 && *v8 == -1)
        {
          v15 = 8 * v10 - 8 * v7 - 8;
          v16 = 1;
          v17 = v8;
          while (1)
          {
            v12 = v16;
            if (!v15)
              break;
            v8 = v17 + 1;
            v18 = v17[1];
            ++v16;
            v15 -= 8;
            ++v17;
            if (v18 != -1)
            {
              v13 = *a3;
              v14 = a3[1];
              if (*a3 != v14)
                goto LABEL_14;
              goto LABEL_5;
            }
          }
          v8 = v11;
          v13 = *a3;
          v14 = a3[1];
          if (*a3 != v14)
          {
LABEL_14:
            while (v8 != v11)
            {
              v19 = *v13;
              if (*v13 == v12)
              {
                v20 = *v8;
LABEL_17:
                v21 = a4[1];
                v22 = v13[1];
                v23 = (int8x16_t *)(*(_QWORD *)(result + 16) + 8 * v20);
                v25 = *v23;
                v24 = v23[1];
                if (v21 >= v22)
                {
                  v29 = (int8x16_t *)(a2 + 8 * (v22 + 6 * v21));
                  *v29 = v25;
                  v29[1] = v24;
                }
                else
                {
                  v26 = (_QWORD *)(a2 + 8 * (v21 + 6 * v22));
                  *v26 = v25.i64[0];
                  v26[6] = vextq_s8(v25, v25, 8uLL).u64[0];
                  v26[12] = v24.i64[0];
                  v26[18] = vextq_s8(v24, v24, 8uLL).u64[0];
                }
                v12 = v19;
              }
              else
              {
LABEL_19:
                if (v19 >= v12)
                {
                  v27 = v8 + 1;
                  while (v27 != v11)
                  {
                    ++v12;
                    v28 = *v27++;
                    v20 = v28;
                    if (v28 != -1)
                    {
                      v8 = v27 - 1;
                      if (v19 != v12)
                        goto LABEL_19;
                      goto LABEL_17;
                    }
                  }
                  break;
                }
              }
              if (v8 != v11)
              {
                v13 += 2;
                if (v13 != v14)
                  continue;
              }
              break;
            }
          }
        }
        else
        {
          v12 = 0;
          v13 = *a3;
          v14 = a3[1];
          if (*a3 != v14)
            goto LABEL_14;
        }
LABEL_5:
        ;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v30 = *(_QWORD *)(result + 88);
        v31 = (*(_DWORD *)(result + 112) * *a4);
        v32 = (uint64_t *)(v30 + 8 * v31);
        v33 = *(_DWORD *)(result + 8);
        v34 = (v31 + v33);
        v35 = (uint64_t *)(v30 + 8 * v34);
        if (v33 && *v32 == -1)
        {
          v46 = 8 * v34 - 8 * v31 - 8;
          v47 = 1;
          v48 = v32;
          while (1)
          {
            v36 = v47;
            if (!v46)
              break;
            v32 = v48 + 1;
            v49 = v48[1];
            ++v47;
            v46 -= 8;
            ++v48;
            if (v49 != -1)
              goto LABEL_38;
          }
          v32 = v35;
        }
        else
        {
          v36 = 0;
        }
LABEL_38:
        v37 = *a3;
        v38 = a3[1];
        while (v37 != v38 && v32 != v35)
        {
          v39 = *v37;
          if (*v37 > v36)
          {
            v40 = v32 + 1;
            while (v40 != v35)
            {
              ++v36;
              v41 = *v40++;
              if (v41 != -1 && v39 <= v36)
              {
                v32 = v40 - 1;
                goto LABEL_50;
              }
            }
            break;
          }
LABEL_50:
          if (v39 == v36)
          {
            v43 = (_OWORD *)(*(_QWORD *)(result + 16) + 8 * *v32);
            v44 = (_OWORD *)(a2 + 8 * (v37[1] + 6 * a4[1]));
            v45 = v43[1];
            *v44 = *v43;
            v44[1] = v45;
            v36 = v39;
          }
          v37 += 2;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20FB78F1C(uint64_t result, uint64_t a2, unsigned int **a3, _DWORD *a4, _DWORD *a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  int64x2_t *v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t *v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int v41;
  uint64_t v42;
  uint64_t *v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int v47;
  uint64_t *v48;
  uint64_t v49;
  _OWORD *v51;
  _OWORD *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  int v61;
  uint64_t *v62;
  uint64_t v63;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *(_QWORD *)(result + 88);
        v7 = (*(_DWORD *)(result + 112) * *a4);
        v8 = (uint64_t *)(v6 + 8 * v7);
        v9 = *(_DWORD *)(result + 8);
        v10 = v7 + v9;
        v11 = (uint64_t *)(v6 + 8 * v10);
        if (v9)
        {
          if (*v8 == -1)
          {
            v14 = 8 * v10 - 8 * v7 - 8;
            v15 = 1;
            v16 = v8;
            while (1)
            {
              v9 = v15;
              if (!v14)
                break;
              v8 = v16 + 1;
              v17 = v16[1];
              ++v15;
              v14 -= 8;
              ++v16;
              if (v17 != -1)
                goto LABEL_13;
            }
            v8 = v11;
            v12 = *a3;
            v13 = a3[1];
            if (*a3 != v13)
            {
LABEL_14:
              while (v8 != v11)
              {
                v18 = *v12;
                if (*v12 == v9)
                {
                  v19 = *v8;
LABEL_17:
                  v20 = a4[1];
                  v21 = v12[1];
                  v22 = (int64x2_t *)(*(_QWORD *)(result + 16) + 8 * v19);
                  v24 = *v22;
                  v23 = v22[1];
                  v25 = v22[2];
                  v26 = v22[3];
                  v27 = v22[4];
                  v28 = v22[5];
                  v29 = v22[6];
                  v30 = v22[7];
                  if (v20 >= v21)
                  {
                    v31 = (int64x2_t *)(a2 + 8 * (v21 + 6 * v20));
                    *v31 = v24;
                    v31[1] = v23;
                  }
                  else
                  {
                    v31 = (int64x2_t *)(a2 + 8 * (v20 + 6 * v21));
                    v32 = vzip1q_s64(v24, v25);
                    v33 = vzip1q_s64(v27, v29);
                    v25 = vzip2q_s64(v24, v25);
                    v34.i64[0] = vdupq_laneq_s64(v27, 1).u64[0];
                    v34.i64[1] = v29.i64[1];
                    v27 = vzip1q_s64(v23, v26);
                    v35.i64[0] = vdupq_laneq_s64(v28, 1).u64[0];
                    v28 = vzip1q_s64(v28, v30);
                    v35.i64[1] = v30.i64[1];
                    v29 = vzip2q_s64(v23, v26);
                    *v31 = v32;
                    v31[1] = v33;
                    v26 = v34;
                    v30 = v35;
                  }
                  v31[3] = v25;
                  v31[4] = v26;
                  v31[6] = v27;
                  v31[7] = v28;
                  v9 = v18;
                  v31[9] = v29;
                  v31[10] = v30;
                }
                else
                {
LABEL_19:
                  if (v18 >= v9)
                  {
                    v36 = v8 + 1;
                    while (v36 != v11)
                    {
                      ++v9;
                      v37 = *v36++;
                      v19 = v37;
                      if (v37 != -1)
                      {
                        v8 = v36 - 1;
                        if (v18 != v9)
                          goto LABEL_19;
                        goto LABEL_17;
                      }
                    }
                    break;
                  }
                }
                if (v8 != v11)
                {
                  v12 += 2;
                  if (v12 != v13)
                    continue;
                }
                break;
              }
            }
          }
          else
          {
            v9 = 0;
            v12 = *a3;
            v13 = a3[1];
            if (*a3 != v13)
              goto LABEL_14;
          }
        }
        else
        {
LABEL_13:
          v12 = *a3;
          v13 = a3[1];
          if (*a3 != v13)
            goto LABEL_14;
        }
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v38 = *(_QWORD *)(result + 88);
        v39 = (*(_DWORD *)(result + 112) * *a4);
        v40 = (uint64_t *)(v38 + 8 * v39);
        v41 = *(_DWORD *)(result + 8);
        v42 = (v39 + v41);
        v43 = (uint64_t *)(v38 + 8 * v42);
        if (v41 && *v40 == -1)
        {
          v60 = 8 * v42 - 8 * v39 - 8;
          v61 = 1;
          v62 = v40;
          while (1)
          {
            v44 = v61;
            if (!v60)
              break;
            v40 = v62 + 1;
            v63 = v62[1];
            ++v61;
            v60 -= 8;
            ++v62;
            if (v63 != -1)
              goto LABEL_38;
          }
          v40 = v43;
        }
        else
        {
          v44 = 0;
        }
LABEL_38:
        v45 = *a3;
        v46 = a3[1];
        while (v45 != v46 && v40 != v43)
        {
          v47 = *v45;
          if (*v45 > v44)
          {
            v48 = v40 + 1;
            while (v48 != v43)
            {
              ++v44;
              v49 = *v48++;
              if (v49 != -1 && v47 <= v44)
              {
                v40 = v48 - 1;
                goto LABEL_50;
              }
            }
            break;
          }
LABEL_50:
          if (v47 == v44)
          {
            v51 = (_OWORD *)(*(_QWORD *)(result + 16) + 8 * *v40);
            v52 = (_OWORD *)(a2 + 8 * (v45[1] + 6 * a4[1]));
            v53 = v51[1];
            v55 = v51[2];
            v54 = v51[3];
            v57 = v51[4];
            v56 = v51[5];
            v59 = v51[6];
            v58 = v51[7];
            *v52 = *v51;
            v52[1] = v53;
            v52[3] = v55;
            v52[4] = v54;
            v52[6] = v57;
            v52[7] = v56;
            v52[9] = v59;
            v52[10] = v58;
            v44 = v47;
          }
          v45 += 2;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20FB791F8(uint64_t result, uint64_t a2, unsigned int **a3, _DWORD *a4, _DWORD *a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _OWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int v37;
  uint64_t v38;
  uint64_t *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t *v44;
  uint64_t v45;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t *v56;
  uint64_t v57;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *(_QWORD *)(result + 88);
        v7 = (*(_DWORD *)(result + 112) * *a4);
        v8 = (uint64_t *)(v6 + 8 * v7);
        v9 = *(_DWORD *)(result + 8);
        v10 = (v7 + v9);
        v11 = (uint64_t *)(v6 + 8 * v10);
        if (v9 && *v8 == -1)
        {
          v15 = 8 * v10 - 8 * v7 - 8;
          v16 = 1;
          v17 = v8;
          while (1)
          {
            v12 = v16;
            if (!v15)
              break;
            v8 = v17 + 1;
            v18 = v17[1];
            ++v16;
            v15 -= 8;
            ++v17;
            if (v18 != -1)
            {
              v13 = *a3;
              v14 = a3[1];
              if (*a3 != v14)
                goto LABEL_14;
              goto LABEL_5;
            }
          }
          v8 = v11;
          v13 = *a3;
          v14 = a3[1];
          if (*a3 != v14)
          {
LABEL_14:
            while (v8 != v11)
            {
              v19 = *v13;
              if (*v13 == v12)
              {
                v20 = *v8;
LABEL_17:
                v21 = a4[1];
                v22 = v13[1];
                v23 = (_QWORD *)(*(_QWORD *)(result + 16) + 8 * v20);
                *(_QWORD *)&v24 = *v23;
                v25 = v23[1];
                *(_QWORD *)&v26 = v23[2];
                v27 = v23[3];
                *(_QWORD *)&v28 = v23[4];
                v29 = v23[5];
                if (v21 >= v22)
                {
                  v33 = (_QWORD *)(a2 + 8 * (v22 + 6 * v21));
                  *v33 = v24;
                  v33[6] = v25;
                  v33[12] = v26;
                  v33[18] = v27;
                  v33[24] = v28;
                  v33[30] = v29;
                }
                else
                {
                  v30 = (_OWORD *)(a2 + 8 * (v21 + 6 * v22));
                  *((_QWORD *)&v24 + 1) = v23[1];
                  *((_QWORD *)&v26 + 1) = v23[3];
                  *((_QWORD *)&v28 + 1) = v23[5];
                  v30[1] = v26;
                  v30[2] = v28;
                  *v30 = v24;
                }
                v12 = v19;
              }
              else
              {
LABEL_19:
                if (v19 >= v12)
                {
                  v31 = v8 + 1;
                  while (v31 != v11)
                  {
                    ++v12;
                    v32 = *v31++;
                    v20 = v32;
                    if (v32 != -1)
                    {
                      v8 = v31 - 1;
                      if (v19 != v12)
                        goto LABEL_19;
                      goto LABEL_17;
                    }
                  }
                  break;
                }
              }
              if (v8 != v11)
              {
                v13 += 2;
                if (v13 != v14)
                  continue;
              }
              break;
            }
          }
        }
        else
        {
          v12 = 0;
          v13 = *a3;
          v14 = a3[1];
          if (*a3 != v14)
            goto LABEL_14;
        }
LABEL_5:
        ;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v34 = *(_QWORD *)(result + 88);
        v35 = (*(_DWORD *)(result + 112) * *a4);
        v36 = (uint64_t *)(v34 + 8 * v35);
        v37 = *(_DWORD *)(result + 8);
        v38 = (v35 + v37);
        v39 = (uint64_t *)(v34 + 8 * v38);
        if (v37 && *v36 == -1)
        {
          v54 = 8 * v38 - 8 * v35 - 8;
          v55 = 1;
          v56 = v36;
          while (1)
          {
            v40 = v55;
            if (!v54)
              break;
            v36 = v56 + 1;
            v57 = v56[1];
            ++v55;
            v54 -= 8;
            ++v56;
            if (v57 != -1)
              goto LABEL_38;
          }
          v36 = v39;
        }
        else
        {
          v40 = 0;
        }
LABEL_38:
        v41 = *a3;
        v42 = a3[1];
        while (v41 != v42 && v36 != v39)
        {
          v43 = *v41;
          if (*v41 > v40)
          {
            v44 = v36 + 1;
            while (v44 != v39)
            {
              ++v40;
              v45 = *v44++;
              if (v45 != -1 && v43 <= v40)
              {
                v36 = v44 - 1;
                goto LABEL_50;
              }
            }
            break;
          }
LABEL_50:
          if (v43 == v40)
          {
            v47 = (_QWORD *)(*(_QWORD *)(result + 16) + 8 * *v36);
            v48 = (_QWORD *)(a2 + 8 * (v41[1] + 6 * a4[1]));
            v49 = v47[1];
            v50 = v47[2];
            v51 = v47[3];
            v52 = v47[4];
            v53 = v47[5];
            *v48 = *v47;
            v48[6] = v49;
            v48[12] = v50;
            v48[18] = v51;
            v48[24] = v52;
            v48[30] = v53;
            v40 = v43;
          }
          v41 += 2;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20FB794BC(uint64_t result, uint64_t a2, unsigned int **a3, _DWORD *a4, _DWORD *a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int v34;
  uint64_t v35;
  uint64_t *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t *v41;
  uint64_t v42;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t *v50;
  uint64_t v51;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *(_QWORD *)(result + 88);
        v7 = (*(_DWORD *)(result + 112) * *a4);
        v8 = (uint64_t *)(v6 + 8 * v7);
        v9 = *(_DWORD *)(result + 8);
        v10 = (v7 + v9);
        v11 = (uint64_t *)(v6 + 8 * v10);
        if (v9 && *v8 == -1)
        {
          v15 = 8 * v10 - 8 * v7 - 8;
          v16 = 1;
          v17 = v8;
          while (1)
          {
            v12 = v16;
            if (!v15)
              break;
            v8 = v17 + 1;
            v18 = v17[1];
            ++v16;
            v15 -= 8;
            ++v17;
            if (v18 != -1)
            {
              v13 = *a3;
              v14 = a3[1];
              if (*a3 != v14)
                goto LABEL_14;
              goto LABEL_5;
            }
          }
          v8 = v11;
          v13 = *a3;
          v14 = a3[1];
          if (*a3 != v14)
          {
LABEL_14:
            while (v8 != v11)
            {
              v19 = *v13;
              if (*v13 == v12)
              {
                v20 = *v8;
LABEL_17:
                v21 = a4[1];
                v22 = v13[1];
                v23 = (_QWORD *)(*(_QWORD *)(result + 16) + 8 * v20);
                *(_QWORD *)&v24 = *v23;
                v25 = v23[1];
                v26 = v23[2];
                if (v21 >= v22)
                {
                  v30 = (_QWORD *)(a2 + 8 * (v22 + 6 * v21));
                  *v30 = v24;
                  v30[6] = v25;
                  v30[12] = v26;
                }
                else
                {
                  *((_QWORD *)&v24 + 1) = v23[1];
                  v27 = a2 + 8 * (v21 + 6 * v22);
                  *(_QWORD *)(v27 + 16) = v26;
                  *(_OWORD *)v27 = v24;
                }
                v12 = v19;
              }
              else
              {
LABEL_19:
                if (v19 >= v12)
                {
                  v28 = v8 + 1;
                  while (v28 != v11)
                  {
                    ++v12;
                    v29 = *v28++;
                    v20 = v29;
                    if (v29 != -1)
                    {
                      v8 = v28 - 1;
                      if (v19 != v12)
                        goto LABEL_19;
                      goto LABEL_17;
                    }
                  }
                  break;
                }
              }
              if (v8 != v11)
              {
                v13 += 2;
                if (v13 != v14)
                  continue;
              }
              break;
            }
          }
        }
        else
        {
          v12 = 0;
          v13 = *a3;
          v14 = a3[1];
          if (*a3 != v14)
            goto LABEL_14;
        }
LABEL_5:
        ;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v31 = *(_QWORD *)(result + 88);
        v32 = (*(_DWORD *)(result + 112) * *a4);
        v33 = (uint64_t *)(v31 + 8 * v32);
        v34 = *(_DWORD *)(result + 8);
        v35 = (v32 + v34);
        v36 = (uint64_t *)(v31 + 8 * v35);
        if (v34 && *v33 == -1)
        {
          v48 = 8 * v35 - 8 * v32 - 8;
          v49 = 1;
          v50 = v33;
          while (1)
          {
            v37 = v49;
            if (!v48)
              break;
            v33 = v50 + 1;
            v51 = v50[1];
            ++v49;
            v48 -= 8;
            ++v50;
            if (v51 != -1)
              goto LABEL_38;
          }
          v33 = v36;
        }
        else
        {
          v37 = 0;
        }
LABEL_38:
        v38 = *a3;
        v39 = a3[1];
        while (v38 != v39 && v33 != v36)
        {
          v40 = *v38;
          if (*v38 > v37)
          {
            v41 = v33 + 1;
            while (v41 != v36)
            {
              ++v37;
              v42 = *v41++;
              if (v42 != -1 && v40 <= v37)
              {
                v33 = v41 - 1;
                goto LABEL_50;
              }
            }
            break;
          }
LABEL_50:
          if (v40 == v37)
          {
            v44 = (_QWORD *)(*(_QWORD *)(result + 16) + 8 * *v33);
            v45 = (_QWORD *)(a2 + 8 * (v38[1] + 6 * a4[1]));
            v46 = v44[1];
            v47 = v44[2];
            *v45 = *v44;
            v45[6] = v46;
            v45[12] = v47;
            v37 = v40;
          }
          v38 += 2;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20FB79758(uint64_t result, uint64_t a2, unsigned int **a3, _DWORD *a4, _DWORD *a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  int v30;
  uint64_t v31;
  uint64_t *v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v40;
  int v41;
  uint64_t *v42;
  uint64_t v43;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *(_QWORD *)(result + 88);
        v7 = (*(_DWORD *)(result + 112) * *a4);
        v8 = (uint64_t *)(v6 + 8 * v7);
        v9 = *(_DWORD *)(result + 8);
        v10 = (v7 + v9);
        v11 = (uint64_t *)(v6 + 8 * v10);
        if (v9 && *v8 == -1)
        {
          v15 = 8 * v10 - 8 * v7 - 8;
          v16 = 1;
          v17 = v8;
          while (1)
          {
            v12 = v16;
            if (!v15)
              break;
            v8 = v17 + 1;
            v18 = v17[1];
            ++v16;
            v15 -= 8;
            ++v17;
            if (v18 != -1)
            {
              v13 = *a3;
              v14 = a3[1];
              if (*a3 != v14)
                goto LABEL_14;
              goto LABEL_5;
            }
          }
          v8 = v11;
          v13 = *a3;
          v14 = a3[1];
          if (*a3 != v14)
          {
LABEL_14:
            while (v8 != v11)
            {
              v19 = *v13;
              if (*v13 == v12)
              {
                v20 = *v8;
LABEL_17:
                v21 = a4[1];
                v22 = v13[1];
                v23 = *(_QWORD *)(*(_QWORD *)(result + 16) + 8 * v20);
                if (v21 <= v22)
                  v24 = v13[1];
                else
                  v24 = a4[1];
                if (v21 >= v22)
                  v21 = v13[1];
                *(_QWORD *)(a2 + 8 * (v21 + 6 * v24)) = v23;
                v12 = v19;
              }
              else
              {
LABEL_26:
                if (v19 >= v12)
                {
                  v25 = v8 + 1;
                  while (v25 != v11)
                  {
                    ++v12;
                    v26 = *v25++;
                    v20 = v26;
                    if (v26 != -1)
                    {
                      v8 = v25 - 1;
                      if (v19 != v12)
                        goto LABEL_26;
                      goto LABEL_17;
                    }
                  }
                  break;
                }
              }
              if (v8 != v11)
              {
                v13 += 2;
                if (v13 != v14)
                  continue;
              }
              break;
            }
          }
        }
        else
        {
          v12 = 0;
          v13 = *a3;
          v14 = a3[1];
          if (*a3 != v14)
            goto LABEL_14;
        }
LABEL_5:
        ;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v27 = *(_QWORD *)(result + 88);
        v28 = (*(_DWORD *)(result + 112) * *a4);
        v29 = (uint64_t *)(v27 + 8 * v28);
        v30 = *(_DWORD *)(result + 8);
        v31 = (v28 + v30);
        v32 = (uint64_t *)(v27 + 8 * v31);
        if (v30 && *v29 == -1)
        {
          v40 = 8 * v31 - 8 * v28 - 8;
          v41 = 1;
          v42 = v29;
          while (1)
          {
            v33 = v41;
            if (!v40)
              break;
            v29 = v42 + 1;
            v43 = v42[1];
            ++v41;
            v40 -= 8;
            ++v42;
            if (v43 != -1)
              goto LABEL_40;
          }
          v29 = v32;
        }
        else
        {
          v33 = 0;
        }
LABEL_40:
        v34 = *a3;
        v35 = a3[1];
        while (v34 != v35 && v29 != v32)
        {
          v36 = *v34;
          if (*v34 > v33)
          {
            v37 = v29 + 1;
            while (v37 != v32)
            {
              ++v33;
              v38 = *v37++;
              if (v38 != -1 && v36 <= v33)
              {
                v29 = v37 - 1;
                goto LABEL_52;
              }
            }
            break;
          }
LABEL_52:
          if (v36 == v33)
          {
            *(_QWORD *)(a2 + 8 * (v34[1] + 6 * a4[1])) = *(_QWORD *)(*(_QWORD *)(result + 16) + 8 * *v29);
            v33 = v36;
          }
          v34 += 2;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20FB799B8(uint64_t result, uint64_t a2, unsigned int **a3, _DWORD *a4, _DWORD *a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  _OWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int v35;
  uint64_t v36;
  uint64_t *v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int *v40;
  unsigned int v41;
  uint64_t *v42;
  uint64_t v43;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t *v52;
  uint64_t v53;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *(_QWORD *)(result + 88);
        v7 = (*(_DWORD *)(result + 112) * *a4);
        v8 = (uint64_t *)(v6 + 8 * v7);
        v9 = *(_DWORD *)(result + 8);
        v10 = (v7 + v9);
        v11 = (uint64_t *)(v6 + 8 * v10);
        if (v9 && *v8 == -1)
        {
          v15 = 8 * v10 - 8 * v7 - 8;
          v16 = 1;
          v17 = v8;
          while (1)
          {
            v12 = v16;
            if (!v15)
              break;
            v8 = v17 + 1;
            v18 = v17[1];
            ++v16;
            v15 -= 8;
            ++v17;
            if (v18 != -1)
            {
              v13 = *a3;
              v14 = a3[1];
              if (*a3 != v14)
                goto LABEL_14;
              goto LABEL_5;
            }
          }
          v8 = v11;
          v13 = *a3;
          v14 = a3[1];
          if (*a3 != v14)
          {
LABEL_14:
            while (v8 != v11)
            {
              v19 = *v13;
              if (*v13 == v12)
              {
                v20 = *v8;
LABEL_17:
                v21 = a4[1];
                v22 = v13[1];
                v23 = (_QWORD *)(*(_QWORD *)(result + 16) + 8 * v20);
                *(_QWORD *)&v24 = *v23;
                v25 = v23[1];
                *(_QWORD *)&v26 = v23[2];
                v27 = v23[3];
                if (v21 >= v22)
                {
                  v31 = (_QWORD *)(a2 + 8 * (v22 + 6 * v21));
                  *v31 = v24;
                  v31[6] = v25;
                  v31[12] = v26;
                  v31[18] = v27;
                }
                else
                {
                  *((_QWORD *)&v24 + 1) = v23[1];
                  *((_QWORD *)&v26 + 1) = v23[3];
                  v28 = (_OWORD *)(a2 + 8 * (v21 + 6 * v22));
                  *v28 = v24;
                  v28[1] = v26;
                }
                v12 = v19;
              }
              else
              {
LABEL_19:
                if (v19 >= v12)
                {
                  v29 = v8 + 1;
                  while (v29 != v11)
                  {
                    ++v12;
                    v30 = *v29++;
                    v20 = v30;
                    if (v30 != -1)
                    {
                      v8 = v29 - 1;
                      if (v19 != v12)
                        goto LABEL_19;
                      goto LABEL_17;
                    }
                  }
                  break;
                }
              }
              if (v8 != v11)
              {
                v13 += 2;
                if (v13 != v14)
                  continue;
              }
              break;
            }
          }
        }
        else
        {
          v12 = 0;
          v13 = *a3;
          v14 = a3[1];
          if (*a3 != v14)
            goto LABEL_14;
        }
LABEL_5:
        ;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v32 = *(_QWORD *)(result + 88);
        v33 = (*(_DWORD *)(result + 112) * *a4);
        v34 = (uint64_t *)(v32 + 8 * v33);
        v35 = *(_DWORD *)(result + 8);
        v36 = (v33 + v35);
        v37 = (uint64_t *)(v32 + 8 * v36);
        if (v35 && *v34 == -1)
        {
          v50 = 8 * v36 - 8 * v33 - 8;
          v51 = 1;
          v52 = v34;
          while (1)
          {
            v38 = v51;
            if (!v50)
              break;
            v34 = v52 + 1;
            v53 = v52[1];
            ++v51;
            v50 -= 8;
            ++v52;
            if (v53 != -1)
              goto LABEL_38;
          }
          v34 = v37;
        }
        else
        {
          v38 = 0;
        }
LABEL_38:
        v39 = *a3;
        v40 = a3[1];
        while (v39 != v40 && v34 != v37)
        {
          v41 = *v39;
          if (*v39 > v38)
          {
            v42 = v34 + 1;
            while (v42 != v37)
            {
              ++v38;
              v43 = *v42++;
              if (v43 != -1 && v41 <= v38)
              {
                v34 = v42 - 1;
                goto LABEL_50;
              }
            }
            break;
          }
LABEL_50:
          if (v41 == v38)
          {
            v45 = (_QWORD *)(*(_QWORD *)(result + 16) + 8 * *v34);
            v46 = (_QWORD *)(a2 + 8 * (v39[1] + 6 * a4[1]));
            v47 = v45[1];
            v48 = v45[2];
            v49 = v45[3];
            *v46 = *v45;
            v46[6] = v47;
            v46[12] = v48;
            v46[18] = v49;
            v38 = v41;
          }
          v39 += 2;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20FB79C5C(uint64_t result, uint64_t a2, unsigned int **a3, _DWORD *a4, _DWORD *a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  int8x16_t *v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  unint64_t v28;
  int8x16_t v29;
  int8x16_t v30;
  unint64_t v31;
  unint64_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int8x16_t v40;
  int8x16_t v41;
  unint64_t v42;
  unint64_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  int8x16_t v51;
  int8x16_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  int8x16_t *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  int v79;
  uint64_t v80;
  uint64_t *v81;
  unsigned int v82;
  unsigned int *v83;
  unsigned int *v84;
  unsigned int v85;
  uint64_t *v86;
  uint64_t v87;
  __int128 *v89;
  _OWORD *v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  int v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *(_QWORD *)(result + 88);
        v7 = (*(_DWORD *)(result + 112) * *a4);
        v8 = (uint64_t *)(v6 + 8 * v7);
        v9 = *(_DWORD *)(result + 8);
        v10 = (v7 + v9);
        v11 = (uint64_t *)(v6 + 8 * v10);
        if (v9 && *v8 == -1)
        {
          v15 = 8 * v10 - 8 * v7 - 8;
          v16 = 1;
          v17 = v8;
          while (1)
          {
            v12 = v16;
            if (!v15)
              break;
            v8 = v17 + 1;
            v18 = v17[1];
            ++v16;
            v15 -= 8;
            ++v17;
            if (v18 != -1)
            {
              v13 = *a3;
              v14 = a3[1];
              if (*a3 != v14)
                goto LABEL_14;
              goto LABEL_5;
            }
          }
          v8 = v11;
          v13 = *a3;
          v14 = a3[1];
          if (*a3 != v14)
          {
LABEL_14:
            while (v8 != v11)
            {
              v19 = *v13;
              if (*v13 == v12)
              {
                v20 = *v8;
LABEL_17:
                v21 = a4[1];
                v22 = v13[1];
                v23 = (int8x16_t *)(*(_QWORD *)(result + 16) + 8 * v20);
                v25 = *v23;
                v24 = v23[1];
                v27 = v23[2];
                v26 = v23[3];
                v116 = vextq_s8(v24, v24, 8uLL).u64[0];
                v117 = vextq_s8(v27, v27, 8uLL).u64[0];
                v28 = vextq_s8(v25, v25, 8uLL).u64[0];
                v29 = v23[4];
                v30 = v23[5];
                v31 = vextq_s8(v29, v29, 8uLL).u64[0];
                v32 = vextq_s8(v26, v26, 8uLL).u64[0];
                v34 = v23[6];
                v33 = v23[7];
                v35 = v23[8];
                v36 = v23[9];
                v37 = vextq_s8(v35, v35, 8uLL).u64[0];
                v38 = vextq_s8(v33, v33, 8uLL).u64[0];
                v39 = vextq_s8(v34, v34, 8uLL).u64[0];
                v40 = v23[10];
                v41 = v23[11];
                v118 = vextq_s8(v30, v30, 8uLL).u64[0];
                v119 = vextq_s8(v41, v41, 8uLL).u64[0];
                v42 = vextq_s8(v40, v40, 8uLL).u64[0];
                v43 = vextq_s8(v36, v36, 8uLL).u64[0];
                v45 = v23[12];
                v44 = v23[13];
                v46 = v23[14];
                v47 = v23[15];
                v48 = vextq_s8(v46, v46, 8uLL).u64[0];
                v49 = vextq_s8(v44, v44, 8uLL).u64[0];
                v50 = vextq_s8(v45, v45, 8uLL).u64[0];
                v52 = v23[16];
                v51 = v23[17];
                v53 = vextq_s8(v51, v51, 8uLL).u64[0];
                v54 = vextq_s8(v52, v52, 8uLL).u64[0];
                v55 = vextq_s8(v47, v47, 8uLL).u64[0];
                if (v21 >= v22)
                {
                  v25.i64[1] = v28;
                  v24.i64[1] = v116;
                  v56 = (int8x16_t *)(a2 + 8 * (v22 + 6 * v21));
                  *v56 = v25;
                  v56[1] = v24;
                  v27.i64[1] = v117;
                  v56[2] = v27;
                  v73 = v38;
                }
                else
                {
                  v56 = (int8x16_t *)(a2 + 8 * (v21 + 6 * v22));
                  v25.i64[1] = v23[3].i64[0];
                  v114 = v42;
                  v115 = v53;
                  v57 = v23[4].u64[0];
                  v58 = v38;
                  v59 = v48;
                  v60 = v54;
                  v61 = v31;
                  v34.i64[1] = v23[9].i64[0];
                  v113 = v32;
                  v62 = v23[11].u64[0];
                  v63 = v43;
                  v64 = v23[8].i64[0];
                  v65 = v55;
                  v66 = v23[5].u64[0];
                  v112 = v59;
                  v45.i64[1] = v23[15].i64[0];
                  v67 = v119;
                  v30.i64[0] = v50;
                  v68 = v37;
                  v26.i64[0] = v28;
                  v69 = v118;
                  v56[1] = v34;
                  v56[2] = v45;
                  v29.i64[0] = v39;
                  v31 = v63;
                  *v56 = v25;
                  v118 = v65;
                  v34.i64[0] = v24.i64[0];
                  v39 = v57;
                  v53 = v115;
                  v36.i64[0] = v116;
                  v70 = v40.i64[0];
                  v35.i64[0] = v44.i64[0];
                  v37 = v52.i64[0];
                  v71 = v61;
                  v40.i64[0] = v58;
                  v41.i64[0] = v49;
                  v119 = v60;
                  v45.i64[0] = v27.i64[0];
                  v72 = v66;
                  v44.i64[0] = v64;
                  v43 = v71;
                  v73 = v70;
                  v49 = v62;
                  v32 = v113;
                  v42 = v114;
                  v47.i64[0] = v117;
                  v55 = v69;
                  v52.i64[0] = v68;
                  v50 = v72;
                  v54 = v67;
                  v48 = v51.i64[0];
                  v51.i64[0] = v112;
                }
                v26.i64[1] = v32;
                v29.i64[1] = v31;
                v56[3] = v26;
                v56[4] = v29;
                v30.i64[1] = v118;
                v34.i64[1] = v39;
                v56[5] = v30;
                v56[6] = v34;
                v33.i64[1] = v73;
                v35.i64[1] = v37;
                v56[7] = v33;
                v56[8] = v35;
                v36.i64[1] = v43;
                v40.i64[1] = v42;
                v56[9] = v36;
                v56[10] = v40;
                v41.i64[1] = v119;
                v45.i64[1] = v50;
                v56[11] = v41;
                v56[12] = v45;
                v44.i64[1] = v49;
                v46.i64[1] = v48;
                v56[13] = v44;
                v56[14] = v46;
                v47.i64[1] = v55;
                v52.i64[1] = v54;
                v56[15] = v47;
                v56[16] = v52;
                v51.i64[1] = v53;
                v12 = v19;
                v56[17] = v51;
              }
              else
              {
LABEL_19:
                if (v19 >= v12)
                {
                  v74 = v8 + 1;
                  while (v74 != v11)
                  {
                    ++v12;
                    v75 = *v74++;
                    v20 = v75;
                    if (v75 != -1)
                    {
                      v8 = v74 - 1;
                      if (v19 != v12)
                        goto LABEL_19;
                      goto LABEL_17;
                    }
                  }
                  break;
                }
              }
              if (v8 != v11)
              {
                v13 += 2;
                if (v13 != v14)
                  continue;
              }
              break;
            }
          }
        }
        else
        {
          v12 = 0;
          v13 = *a3;
          v14 = a3[1];
          if (*a3 != v14)
            goto LABEL_14;
        }
LABEL_5:
        ;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v76 = *(_QWORD *)(result + 88);
        v77 = (*(_DWORD *)(result + 112) * *a4);
        v78 = (uint64_t *)(v76 + 8 * v77);
        v79 = *(_DWORD *)(result + 8);
        v80 = (v77 + v79);
        v81 = (uint64_t *)(v76 + 8 * v80);
        if (v79 && *v78 == -1)
        {
          v108 = 8 * v80 - 8 * v77 - 8;
          v109 = 1;
          v110 = v78;
          while (1)
          {
            v82 = v109;
            if (!v108)
              break;
            v78 = v110 + 1;
            v111 = v110[1];
            ++v109;
            v108 -= 8;
            ++v110;
            if (v111 != -1)
              goto LABEL_38;
          }
          v78 = v81;
        }
        else
        {
          v82 = 0;
        }
LABEL_38:
        v83 = *a3;
        v84 = a3[1];
        while (v83 != v84 && v78 != v81)
        {
          v85 = *v83;
          if (*v83 > v82)
          {
            v86 = v78 + 1;
            while (v86 != v81)
            {
              ++v82;
              v87 = *v86++;
              if (v87 != -1 && v85 <= v82)
              {
                v78 = v86 - 1;
                goto LABEL_50;
              }
            }
            break;
          }
LABEL_50:
          if (v85 == v82)
          {
            v89 = (__int128 *)(*(_QWORD *)(result + 16) + 8 * *v78);
            v90 = (_OWORD *)(a2 + 8 * (v83[1] + 6 * a4[1]));
            v91 = *v89;
            v92 = v89[1];
            v93 = v89[2];
            v94 = v89[3];
            v95 = v89[4];
            v96 = v89[5];
            v97 = v89[6];
            v98 = v89[7];
            v99 = v89[8];
            v100 = v89[9];
            v101 = v89[10];
            v102 = v89[11];
            v103 = v89[12];
            v104 = v89[13];
            v105 = v89[14];
            v106 = v89[15];
            v107 = v89[17];
            v90[16] = v89[16];
            v90[17] = v107;
            v90[14] = v105;
            v90[15] = v106;
            v90[12] = v103;
            v90[13] = v104;
            v90[10] = v101;
            v90[11] = v102;
            v90[8] = v99;
            v90[9] = v100;
            v90[6] = v97;
            v90[7] = v98;
            v90[4] = v95;
            v90[5] = v96;
            v90[2] = v93;
            v90[3] = v94;
            v82 = v85;
            *v90 = v91;
            v90[1] = v92;
          }
          v83 += 2;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20FB7A100(uint64_t result, uint64_t a2, unsigned int **a3, _DWORD *a4, _DWORD *a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  int8x16_t *v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  int8x16_t v30;
  int8x16_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  int8x16_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  int v48;
  uint64_t v49;
  uint64_t *v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int *v53;
  unsigned int v54;
  uint64_t *v55;
  uint64_t v56;
  __int128 *v58;
  _OWORD *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  int v69;
  uint64_t *v70;
  uint64_t v71;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *(_QWORD *)(result + 88);
        v7 = (*(_DWORD *)(result + 112) * *a4);
        v8 = (uint64_t *)(v6 + 8 * v7);
        v9 = *(_DWORD *)(result + 8);
        v10 = v7 + v9;
        v11 = (uint64_t *)(v6 + 8 * v10);
        if (v9)
        {
          if (*v8 == -1)
          {
            v14 = 8 * v10 - 8 * v7 - 8;
            v15 = 1;
            v16 = v8;
            while (1)
            {
              v9 = v15;
              if (!v14)
                break;
              v8 = v16 + 1;
              v17 = v16[1];
              ++v15;
              v14 -= 8;
              ++v16;
              if (v17 != -1)
                goto LABEL_13;
            }
            v8 = v11;
            v12 = *a3;
            v13 = a3[1];
            if (*a3 != v13)
            {
LABEL_14:
              while (v8 != v11)
              {
                v18 = *v12;
                if (*v12 == v9)
                {
                  v19 = *v8;
LABEL_17:
                  v20 = a4[1];
                  v21 = v12[1];
                  v22 = (int8x16_t *)(*(_QWORD *)(result + 16) + 8 * v19);
                  v24 = *v22;
                  v23 = v22[1];
                  v25 = v22[2];
                  v26 = v22[3];
                  *(_QWORD *)&v27 = vextq_s8(v25, v25, 8uLL).u64[0];
                  *(_QWORD *)&v28 = vextq_s8(v23, v23, 8uLL).u64[0];
                  *(_QWORD *)&v29 = vextq_s8(v24, v24, 8uLL).u64[0];
                  v31 = v22[4];
                  v30 = v22[5];
                  v32 = vextq_s8(v30, v30, 8uLL).u64[0];
                  v33 = vextq_s8(v31, v31, 8uLL).u64[0];
                  v34 = vextq_s8(v26, v26, 8uLL).u64[0];
                  v36 = v22[7];
                  v35 = v22[8];
                  v37 = v22[6];
                  v38 = vextq_s8(v35, v35, 8uLL).u64[0];
                  v39 = vextq_s8(v36, v36, 8uLL).u64[0];
                  v40 = vextq_s8(v37, v37, 8uLL).u64[0];
                  if (v20 >= v21)
                  {
                    v24.i64[1] = v29;
                    v23.i64[1] = v28;
                    v44 = (int8x16_t *)(a2 + 8 * (v21 + 6 * v20));
                    *v44 = v24;
                    v44[1] = v23;
                    v25.i64[1] = v27;
                    v26.i64[1] = v34;
                    v44[2] = v25;
                    v44[3] = v26;
                    v31.i64[1] = v33;
                    v30.i64[1] = v32;
                    v44[4] = v31;
                    v44[5] = v30;
                    v37.i64[1] = v40;
                    v36.i64[1] = v39;
                    v44[6] = v37;
                    v44[7] = v36;
                    v35.i64[1] = v38;
                    v9 = v18;
                    v44[8] = v35;
                  }
                  else
                  {
                    v24.i64[1] = v22[3].i64[0];
                    *((_QWORD *)&v29 + 1) = v34;
                    v23.i64[1] = v22[4].i64[0];
                    *((_QWORD *)&v28 + 1) = v33;
                    v41 = a2 + 8 * (v20 + 6 * v21);
                    v25.i64[1] = v22[5].i64[0];
                    *((_QWORD *)&v27 + 1) = v32;
                    *(_QWORD *)(v41 + 16) = v37.i64[0];
                    *(int8x16_t *)v41 = v24;
                    *(_QWORD *)(v41 + 64) = v40;
                    *(_OWORD *)(v41 + 48) = v29;
                    *(_QWORD *)(v41 + 112) = v36.i64[0];
                    *(int8x16_t *)(v41 + 96) = v23;
                    *(_QWORD *)(v41 + 160) = v39;
                    *(_OWORD *)(v41 + 144) = v28;
                    *(_QWORD *)(v41 + 208) = v35.i64[0];
                    *(int8x16_t *)(v41 + 192) = v25;
                    *(_QWORD *)(v41 + 256) = v38;
                    v9 = v18;
                    *(_OWORD *)(v41 + 240) = v27;
                  }
                }
                else
                {
LABEL_19:
                  if (v18 >= v9)
                  {
                    v42 = v8 + 1;
                    while (v42 != v11)
                    {
                      ++v9;
                      v43 = *v42++;
                      v19 = v43;
                      if (v43 != -1)
                      {
                        v8 = v42 - 1;
                        if (v18 != v9)
                          goto LABEL_19;
                        goto LABEL_17;
                      }
                    }
                    break;
                  }
                }
                if (v8 != v11)
                {
                  v12 += 2;
                  if (v12 != v13)
                    continue;
                }
                break;
              }
            }
          }
          else
          {
            v9 = 0;
            v12 = *a3;
            v13 = a3[1];
            if (*a3 != v13)
              goto LABEL_14;
          }
        }
        else
        {
LABEL_13:
          v12 = *a3;
          v13 = a3[1];
          if (*a3 != v13)
            goto LABEL_14;
        }
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v45 = *(_QWORD *)(result + 88);
        v46 = (*(_DWORD *)(result + 112) * *a4);
        v47 = (uint64_t *)(v45 + 8 * v46);
        v48 = *(_DWORD *)(result + 8);
        v49 = (v46 + v48);
        v50 = (uint64_t *)(v45 + 8 * v49);
        if (v48 && *v47 == -1)
        {
          v68 = 8 * v49 - 8 * v46 - 8;
          v69 = 1;
          v70 = v47;
          while (1)
          {
            v51 = v69;
            if (!v68)
              break;
            v47 = v70 + 1;
            v71 = v70[1];
            ++v69;
            v68 -= 8;
            ++v70;
            if (v71 != -1)
              goto LABEL_37;
          }
          v47 = v50;
        }
        else
        {
          v51 = 0;
        }
LABEL_37:
        v52 = *a3;
        v53 = a3[1];
        while (v52 != v53 && v47 != v50)
        {
          v54 = *v52;
          if (*v52 > v51)
          {
            v55 = v47 + 1;
            while (v55 != v50)
            {
              ++v51;
              v56 = *v55++;
              if (v56 != -1 && v54 <= v51)
              {
                v47 = v55 - 1;
                goto LABEL_49;
              }
            }
            break;
          }
LABEL_49:
          if (v54 == v51)
          {
            v58 = (__int128 *)(*(_QWORD *)(result + 16) + 8 * *v47);
            v59 = (_OWORD *)(a2 + 8 * (v52[1] + 6 * a4[1]));
            v61 = v58[7];
            v60 = v58[8];
            v63 = v58[5];
            v62 = v58[6];
            v65 = v58[3];
            v64 = v58[4];
            v66 = v58[1];
            v67 = *v58;
            v59[2] = v58[2];
            v59[3] = v65;
            v59[4] = v64;
            v59[5] = v63;
            v59[6] = v62;
            v59[7] = v61;
            v59[8] = v60;
            *v59 = v67;
            v59[1] = v66;
            v51 = v54;
          }
          v52 += 2;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20FB7A44C(uint64_t result, uint64_t a2, unsigned int **a3, _DWORD *a4, _DWORD *a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  int8x16_t *v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  int8x16_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int v37;
  uint64_t v38;
  uint64_t *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t *v44;
  uint64_t v45;
  __int128 *v47;
  _OWORD *v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  int v52;
  uint64_t *v53;
  uint64_t v54;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *(_QWORD *)(result + 88);
        v7 = (*(_DWORD *)(result + 112) * *a4);
        v8 = (uint64_t *)(v6 + 8 * v7);
        v9 = *(_DWORD *)(result + 8);
        v10 = (v7 + v9);
        v11 = (uint64_t *)(v6 + 8 * v10);
        if (v9 && *v8 == -1)
        {
          v15 = 8 * v10 - 8 * v7 - 8;
          v16 = 1;
          v17 = v8;
          while (1)
          {
            v12 = v16;
            if (!v15)
              break;
            v8 = v17 + 1;
            v18 = v17[1];
            ++v16;
            v15 -= 8;
            ++v17;
            if (v18 != -1)
            {
              v13 = *a3;
              v14 = a3[1];
              if (*a3 != v14)
                goto LABEL_14;
              goto LABEL_5;
            }
          }
          v8 = v11;
          v13 = *a3;
          v14 = a3[1];
          if (*a3 != v14)
          {
LABEL_14:
            while (v8 != v11)
            {
              v19 = *v13;
              if (*v13 == v12)
              {
                v20 = *v8;
LABEL_17:
                v21 = a4[1];
                v22 = v13[1];
                v23 = (int8x16_t *)(*(_QWORD *)(result + 16) + 8 * v20);
                v25 = v23[1];
                v24 = v23[2];
                v26 = *v23;
                v27 = vextq_s8(v24, v24, 8uLL).u64[0];
                v28 = vextq_s8(v25, v25, 8uLL).u64[0];
                v29 = vextq_s8(v26, v26, 8uLL).u64[0];
                if (v21 >= v22)
                {
                  v33 = (int8x16_t *)(a2 + 8 * (v22 + 6 * v21));
                  v26.i64[1] = v29;
                  v25.i64[1] = v28;
                  *v33 = v26;
                  v33[1] = v25;
                  v24.i64[1] = v27;
                  v33[2] = v24;
                }
                else
                {
                  v30 = (_QWORD *)(a2 + 8 * (v21 + 6 * v22));
                  *v30 = v26.i64[0];
                  v30[6] = v29;
                  v30[12] = v25.i64[0];
                  v30[18] = v28;
                  v30[24] = v24.i64[0];
                  v30[30] = v27;
                }
                v12 = v19;
              }
              else
              {
LABEL_19:
                if (v19 >= v12)
                {
                  v31 = v8 + 1;
                  while (v31 != v11)
                  {
                    ++v12;
                    v32 = *v31++;
                    v20 = v32;
                    if (v32 != -1)
                    {
                      v8 = v31 - 1;
                      if (v19 != v12)
                        goto LABEL_19;
                      goto LABEL_17;
                    }
                  }
                  break;
                }
              }
              if (v8 != v11)
              {
                v13 += 2;
                if (v13 != v14)
                  continue;
              }
              break;
            }
          }
        }
        else
        {
          v12 = 0;
          v13 = *a3;
          v14 = a3[1];
          if (*a3 != v14)
            goto LABEL_14;
        }
LABEL_5:
        ;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v34 = *(_QWORD *)(result + 88);
        v35 = (*(_DWORD *)(result + 112) * *a4);
        v36 = (uint64_t *)(v34 + 8 * v35);
        v37 = *(_DWORD *)(result + 8);
        v38 = (v35 + v37);
        v39 = (uint64_t *)(v34 + 8 * v38);
        if (v37 && *v36 == -1)
        {
          v51 = 8 * v38 - 8 * v35 - 8;
          v52 = 1;
          v53 = v36;
          while (1)
          {
            v40 = v52;
            if (!v51)
              break;
            v36 = v53 + 1;
            v54 = v53[1];
            ++v52;
            v51 -= 8;
            ++v53;
            if (v54 != -1)
              goto LABEL_38;
          }
          v36 = v39;
        }
        else
        {
          v40 = 0;
        }
LABEL_38:
        v41 = *a3;
        v42 = a3[1];
        while (v41 != v42 && v36 != v39)
        {
          v43 = *v41;
          if (*v41 > v40)
          {
            v44 = v36 + 1;
            while (v44 != v39)
            {
              ++v40;
              v45 = *v44++;
              if (v45 != -1 && v43 <= v40)
              {
                v36 = v44 - 1;
                goto LABEL_50;
              }
            }
            break;
          }
LABEL_50:
          if (v43 == v40)
          {
            v47 = (__int128 *)(*(_QWORD *)(result + 16) + 8 * *v36);
            v48 = (_OWORD *)(a2 + 8 * (v41[1] + 6 * a4[1]));
            v49 = v47[2];
            v50 = *v47;
            v48[1] = v47[1];
            v48[2] = v49;
            *v48 = v50;
            v40 = v43;
          }
          v41 += 2;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20FB7A704(uint64_t result, uint64_t a2, unsigned int **a3, _DWORD *a4, _DWORD *a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  int8x16_t *v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int8x16_t *v47;
  uint64_t *v48;
  uint64_t v49;
  int8x16_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  int v54;
  uint64_t v55;
  uint64_t *v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int *v59;
  unsigned int v60;
  uint64_t *v61;
  uint64_t v62;
  __int128 *v64;
  _OWORD *v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  int v78;
  uint64_t *v79;
  uint64_t v80;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *(_QWORD *)(result + 88);
        v7 = (*(_DWORD *)(result + 112) * *a4);
        v8 = (uint64_t *)(v6 + 8 * v7);
        v9 = *(_DWORD *)(result + 8);
        v10 = v7 + v9;
        v11 = (uint64_t *)(v6 + 8 * v10);
        if (v9)
        {
          if (*v8 == -1)
          {
            v14 = 8 * v10 - 8 * v7 - 8;
            v15 = 1;
            v16 = v8;
            while (1)
            {
              v9 = v15;
              if (!v14)
                break;
              v8 = v16 + 1;
              v17 = v16[1];
              ++v15;
              v14 -= 8;
              ++v16;
              if (v17 != -1)
                goto LABEL_13;
            }
            v8 = v11;
            v12 = *a3;
            v13 = a3[1];
            if (*a3 != v13)
            {
LABEL_14:
              while (v8 != v11)
              {
                v18 = *v12;
                if (*v12 == v9)
                {
                  v19 = *v8;
LABEL_17:
                  v20 = a4[1];
                  v21 = v12[1];
                  v22 = (int8x16_t *)(*(_QWORD *)(result + 16) + 8 * v19);
                  v24 = *v22;
                  v23 = v22[1];
                  v25 = v22[2];
                  v26 = v22[3];
                  v27.i64[0] = vextq_s8(v25, v25, 8uLL).u64[0];
                  v28.i64[0] = vextq_s8(v23, v23, 8uLL).u64[0];
                  v29.i64[0] = vextq_s8(v24, v24, 8uLL).u64[0];
                  v31 = v22[4];
                  v30 = v22[5];
                  v32 = vextq_s8(v30, v30, 8uLL).u64[0];
                  v33 = vextq_s8(v31, v31, 8uLL).u64[0];
                  v34 = vextq_s8(v26, v26, 8uLL).u64[0];
                  v36 = v22[6];
                  v35 = v22[7];
                  v37 = v22[8];
                  v38 = v22[9];
                  v39.i64[0] = vextq_s8(v37, v37, 8uLL).u64[0];
                  v40.i64[0] = vextq_s8(v35, v35, 8uLL).u64[0];
                  v41.i64[0] = vextq_s8(v36, v36, 8uLL).u64[0];
                  v43 = v22[10];
                  v42 = v22[11];
                  v44 = vextq_s8(v42, v42, 8uLL).u64[0];
                  v45 = vextq_s8(v43, v43, 8uLL).u64[0];
                  v46 = vextq_s8(v38, v38, 8uLL).u64[0];
                  if (v20 >= v21)
                  {
                    v24.i64[1] = v29.i64[0];
                    v23.i64[1] = v28.i64[0];
                    v50 = (int8x16_t *)(a2 + 8 * (v21 + 6 * v20));
                    v25.i64[1] = v27.i64[0];
                    *v50 = v24;
                    v50[1] = v23;
                    v26.i64[1] = v34;
                    v31.i64[1] = v33;
                    v50[2] = v25;
                    v50[3] = v26;
                    v30.i64[1] = v32;
                    v36.i64[1] = v41.i64[0];
                    v50[4] = v31;
                    v50[5] = v30;
                    v35.i64[1] = v40.i64[0];
                    v37.i64[1] = v39.i64[0];
                    v50[6] = v36;
                    v50[7] = v35;
                    v38.i64[1] = v46;
                    v43.i64[1] = v45;
                    v50[8] = v37;
                    v50[9] = v38;
                    v42.i64[1] = v44;
                    v9 = v18;
                    v50[10] = v43;
                    v50[11] = v42;
                  }
                  else
                  {
                    v24.i64[1] = v22[3].i64[0];
                    v36.i64[1] = v22[9].i64[0];
                    v29.i64[1] = v34;
                    v41.i64[1] = v46;
                    v23.i64[1] = v22[4].i64[0];
                    v35.i64[1] = v22[10].i64[0];
                    v28.i64[1] = v33;
                    v40.i64[1] = v45;
                    v25.i64[1] = v22[5].i64[0];
                    v37.i64[1] = v22[11].i64[0];
                    v47 = (int8x16_t *)(a2 + 8 * (v20 + 6 * v21));
                    v27.i64[1] = v32;
                    v39.i64[1] = v44;
                    *v47 = v24;
                    v47[1] = v36;
                    v47[3] = v29;
                    v47[4] = v41;
                    v47[6] = v23;
                    v47[7] = v35;
                    v47[9] = v28;
                    v47[10] = v40;
                    v47[12] = v25;
                    v47[13] = v37;
                    v9 = v18;
                    v47[15] = v27;
                    v47[16] = v39;
                  }
                }
                else
                {
LABEL_19:
                  if (v18 >= v9)
                  {
                    v48 = v8 + 1;
                    while (v48 != v11)
                    {
                      ++v9;
                      v49 = *v48++;
                      v19 = v49;
                      if (v49 != -1)
                      {
                        v8 = v48 - 1;
                        if (v18 != v9)
                          goto LABEL_19;
                        goto LABEL_17;
                      }
                    }
                    break;
                  }
                }
                if (v8 != v11)
                {
                  v12 += 2;
                  if (v12 != v13)
                    continue;
                }
                break;
              }
            }
          }
          else
          {
            v9 = 0;
            v12 = *a3;
            v13 = a3[1];
            if (*a3 != v13)
              goto LABEL_14;
          }
        }
        else
        {
LABEL_13:
          v12 = *a3;
          v13 = a3[1];
          if (*a3 != v13)
            goto LABEL_14;
        }
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v51 = *(_QWORD *)(result + 88);
        v52 = (*(_DWORD *)(result + 112) * *a4);
        v53 = (uint64_t *)(v51 + 8 * v52);
        v54 = *(_DWORD *)(result + 8);
        v55 = (v52 + v54);
        v56 = (uint64_t *)(v51 + 8 * v55);
        if (v54 && *v53 == -1)
        {
          v77 = 8 * v55 - 8 * v52 - 8;
          v78 = 1;
          v79 = v53;
          while (1)
          {
            v57 = v78;
            if (!v77)
              break;
            v53 = v79 + 1;
            v80 = v79[1];
            ++v78;
            v77 -= 8;
            ++v79;
            if (v80 != -1)
              goto LABEL_37;
          }
          v53 = v56;
        }
        else
        {
          v57 = 0;
        }
LABEL_37:
        v58 = *a3;
        v59 = a3[1];
        while (v58 != v59 && v53 != v56)
        {
          v60 = *v58;
          if (*v58 > v57)
          {
            v61 = v53 + 1;
            while (v61 != v56)
            {
              ++v57;
              v62 = *v61++;
              if (v62 != -1 && v60 <= v57)
              {
                v53 = v61 - 1;
                goto LABEL_49;
              }
            }
            break;
          }
LABEL_49:
          if (v60 == v57)
          {
            v64 = (__int128 *)(*(_QWORD *)(result + 16) + 8 * *v53);
            v65 = (_OWORD *)(a2 + 8 * (v58[1] + 6 * a4[1]));
            v67 = v64[10];
            v66 = v64[11];
            v69 = v64[8];
            v68 = v64[9];
            v71 = v64[6];
            v70 = v64[7];
            v73 = v64[4];
            v72 = v64[5];
            v74 = v64[3];
            v75 = *v64;
            v76 = v64[1];
            v65[2] = v64[2];
            v65[3] = v74;
            v65[4] = v73;
            v65[5] = v72;
            v65[6] = v71;
            v65[7] = v70;
            v65[8] = v69;
            v65[9] = v68;
            v65[10] = v67;
            v65[11] = v66;
            v57 = v60;
            *v65 = v75;
            v65[1] = v76;
          }
          v58 += 2;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20FB7AA78(uint64_t a1, uint64_t a2, unsigned int **a3, _DWORD **a4, char *a5)
{
  unsigned int **v10;

  v10 = a3 + 27;
  sub_20FB77A50(a1 + 1296, a2, a3 + 27, *a4, a4[1], *a5);
  sub_20FB77A50(a1 + 4176, a2, v10, a4[6], a4[7], *a5);
  sub_20FB77A50(a1 + 5616, a2, v10, a4[9], a4[10], *a5);
  sub_20FB77DE4(a1 + 7056, a2, v10, a4[12], a4[13], *a5);
  sub_20FB780E4(a1 + 8496, a2, v10, a4[15], a4[16], *a5);
  sub_20FB78380(a1 + 9936, a2, v10, a4[18], a4[19], *a5);
  sub_20FB78380(a1 + 11376, a2, v10, a4[21], a4[22], *a5);
  sub_20FB77DE4(a1 + 12816, a2, v10, a4[24], a4[25], *a5);
  sub_20FB77DE4(a1 + 14256, a2, v10, a4[27], a4[28], *a5);
  sub_20FB77A50(a1 + 1152, a2, a3 + 24, *a4, a4[1], *a5);
  sub_20FB77A50(a1 + 4032, a2, a3 + 24, a4[6], a4[7], *a5);
  sub_20FB77A50(a1 + 5472, a2, a3 + 24, a4[9], a4[10], *a5);
  sub_20FB77DE4(a1 + 6912, a2, a3 + 24, a4[12], a4[13], *a5);
  sub_20FB780E4(a1 + 8352, a2, a3 + 24, a4[15], a4[16], *a5);
  sub_20FB78380(a1 + 9792, a2, a3 + 24, a4[18], a4[19], *a5);
  sub_20FB78380(a1 + 11232, a2, a3 + 24, a4[21], a4[22], *a5);
  sub_20FB77DE4(a1 + 12672, a2, a3 + 24, a4[24], a4[25], *a5);
  sub_20FB77DE4(a1 + 14112, a2, a3 + 24, a4[27], a4[28], *a5);
  sub_20FB786AC(a1 + 1008, a2, a3 + 21, *a4, a4[1], *a5);
  sub_20FB786AC(a1 + 3888, a2, a3 + 21, a4[6], a4[7], *a5);
  sub_20FB786AC(a1 + 5328, a2, a3 + 21, a4[9], a4[10], *a5);
  sub_20FB789BC(a1 + 6768, a2, a3 + 21, a4[12], a4[13], *a5);
  sub_20FB78C8C(a1 + 8208, a2, a3 + 21, a4[15], a4[16], *a5);
  sub_20FB78F1C(a1 + 9648, a2, a3 + 21, a4[18], a4[19], *a5);
  sub_20FB78F1C(a1 + 11088, a2, a3 + 21, a4[21], a4[22], *a5);
  sub_20FB789BC(a1 + 12528, a2, a3 + 21, a4[24], a4[25], *a5);
  sub_20FB789BC(a1 + 13968, a2, a3 + 21, a4[27], a4[28], *a5);
  sub_20FB786AC(a1 + 864, a2, a3 + 18, *a4, a4[1], *a5);
  sub_20FB786AC(a1 + 3744, a2, a3 + 18, a4[6], a4[7], *a5);
  sub_20FB786AC(a1 + 5184, a2, a3 + 18, a4[9], a4[10], *a5);
  sub_20FB789BC(a1 + 6624, a2, a3 + 18, a4[12], a4[13], *a5);
  sub_20FB78C8C(a1 + 8064, a2, a3 + 18, a4[15], a4[16], *a5);
  sub_20FB78F1C(a1 + 9504, a2, a3 + 18, a4[18], a4[19], *a5);
  sub_20FB78F1C(a1 + 10944, a2, a3 + 18, a4[21], a4[22], *a5);
  sub_20FB789BC(a1 + 12384, a2, a3 + 18, a4[24], a4[25], *a5);
  sub_20FB789BC(a1 + 13824, a2, a3 + 18, a4[27], a4[28], *a5);
  sub_20FB791F8(a1 + 720, a2, a3 + 15, *a4, a4[1], *a5);
  sub_20FB791F8(a1 + 3600, a2, a3 + 15, a4[6], a4[7], *a5);
  sub_20FB791F8(a1 + 5040, a2, a3 + 15, a4[9], a4[10], *a5);
  sub_20FB794BC(a1 + 6480, a2, a3 + 15, a4[12], a4[13], *a5);
  sub_20FB79758(a1 + 7920, a2, a3 + 15, a4[15], a4[16], *a5);
  sub_20FB799B8(a1 + 9360, a2, a3 + 15, a4[18], a4[19], *a5);
  sub_20FB799B8(a1 + 10800, a2, a3 + 15, a4[21], a4[22], *a5);
  sub_20FB794BC(a1 + 12240, a2, a3 + 15, a4[24], a4[25], *a5);
  sub_20FB794BC(a1 + 13680, a2, a3 + 15, a4[27], a4[28], *a5);
  sub_20FB77A50(a1 + 576, a2, a3 + 12, *a4, a4[1], *a5);
  sub_20FB77A50(a1 + 3456, a2, a3 + 12, a4[6], a4[7], *a5);
  sub_20FB77A50(a1 + 4896, a2, a3 + 12, a4[9], a4[10], *a5);
  sub_20FB77DE4(a1 + 6336, a2, a3 + 12, a4[12], a4[13], *a5);
  sub_20FB780E4(a1 + 7776, a2, a3 + 12, a4[15], a4[16], *a5);
  sub_20FB78380(a1 + 9216, a2, a3 + 12, a4[18], a4[19], *a5);
  sub_20FB78380(a1 + 10656, a2, a3 + 12, a4[21], a4[22], *a5);
  sub_20FB77DE4(a1 + 12096, a2, a3 + 12, a4[24], a4[25], *a5);
  sub_20FB77DE4(a1 + 13536, a2, a3 + 12, a4[27], a4[28], *a5);
  sub_20FB79C5C(a1 + 432, a2, a3 + 9, *a4, a4[1], *a5);
  sub_20FB79C5C(a1 + 3312, a2, a3 + 9, a4[6], a4[7], *a5);
  sub_20FB79C5C(a1 + 4752, a2, a3 + 9, a4[9], a4[10], *a5);
  sub_20FB7A100(a1 + 6192, a2, a3 + 9, a4[12], a4[13], *a5);
  sub_20FB7A44C(a1 + 7632, a2, a3 + 9, a4[15], a4[16], *a5);
  sub_20FB7A704(a1 + 9072, a2, a3 + 9, a4[18], a4[19], *a5);
  sub_20FB7A704(a1 + 10512, a2, a3 + 9, a4[21], a4[22], *a5);
  sub_20FB7A100(a1 + 11952, a2, a3 + 9, a4[24], a4[25], *a5);
  sub_20FB7A100(a1 + 13392, a2, a3 + 9, a4[27], a4[28], *a5);
  sub_20FB79C5C(a1 + 288, a2, a3 + 6, *a4, a4[1], *a5);
  sub_20FB79C5C(a1 + 3168, a2, a3 + 6, a4[6], a4[7], *a5);
  sub_20FB79C5C(a1 + 4608, a2, a3 + 6, a4[9], a4[10], *a5);
  sub_20FB7A100(a1 + 6048, a2, a3 + 6, a4[12], a4[13], *a5);
  sub_20FB7A44C(a1 + 7488, a2, a3 + 6, a4[15], a4[16], *a5);
  sub_20FB7A704(a1 + 8928, a2, a3 + 6, a4[18], a4[19], *a5);
  sub_20FB7A704(a1 + 10368, a2, a3 + 6, a4[21], a4[22], *a5);
  sub_20FB7A100(a1 + 11808, a2, a3 + 6, a4[24], a4[25], *a5);
  sub_20FB7A100(a1 + 13248, a2, a3 + 6, a4[27], a4[28], *a5);
  sub_20FB79C5C(a1, a2, a3, *a4, a4[1], *a5);
  sub_20FB79C5C(a1 + 2880, a2, a3, a4[6], a4[7], *a5);
  sub_20FB79C5C(a1 + 4320, a2, a3, a4[9], a4[10], *a5);
  sub_20FB7A100(a1 + 5760, a2, a3, a4[12], a4[13], *a5);
  sub_20FB7A44C(a1 + 7200, a2, a3, a4[15], a4[16], *a5);
  sub_20FB7A704(a1 + 8640, a2, a3, a4[18], a4[19], *a5);
  sub_20FB7A704(a1 + 10080, a2, a3, a4[21], a4[22], *a5);
  sub_20FB7A100(a1 + 11520, a2, a3, a4[24], a4[25], *a5);
  return sub_20FB7A100(a1 + 12960, a2, a3, a4[27], a4[28], *a5);
}

uint64_t sub_20FB7B368(uint64_t a1, uint64_t a2, unsigned int **a3, _DWORD **a4, char *a5)
{
  unsigned int **v7;
  unsigned int **v10;

  v7 = a3;
  v10 = a3 + 27;
  sub_20FB7B7A8(a1 + 7056, a2, a3 + 27, a4[12], a4[13], *a5);
  sub_20FB7BA9C(a1 + 8496, a2, v10, a4[15], a4[16], *a5);
  sub_20FB7B7A8(a1 + 9936, a2, v10, a4[18], a4[19], *a5);
  sub_20FB7BD2C(a1 + 11376, a2, v10, a4[21], a4[22], *a5);
  sub_20FB7BD2C(a1 + 12816, a2, v10, a4[24], a4[25], *a5);
  sub_20FB7B7A8(a1 + 14256, a2, v10, a4[27], a4[28], *a5);
  sub_20FB7C04C(a1 + 6912, a2, v7 + 24, a4[12], a4[13], *a5);
  sub_20FB7C310(a1 + 8352, a2, v7 + 24, a4[15], a4[16], *a5);
  sub_20FB7C04C(a1 + 9792, a2, v7 + 24, a4[18], a4[19], *a5);
  sub_20FB7C594(a1 + 11232, a2, v7 + 24, a4[21], a4[22], *a5);
  sub_20FB7C594(a1 + 12672, a2, v7 + 24, a4[24], a4[25], *a5);
  sub_20FB7C04C(a1 + 14112, a2, v7 + 24, a4[27], a4[28], *a5);
  sub_20FB7C04C(a1 + 6768, a2, v7 + 21, a4[12], a4[13], *a5);
  sub_20FB7C310(a1 + 8208, a2, v7 + 21, a4[15], a4[16], *a5);
  sub_20FB7C04C(a1 + 9648, a2, v7 + 21, a4[18], a4[19], *a5);
  sub_20FB7C594(a1 + 11088, a2, v7 + 21, a4[21], a4[22], *a5);
  sub_20FB7C594(a1 + 12528, a2, v7 + 21, a4[24], a4[25], *a5);
  sub_20FB7C04C(a1 + 13968, a2, v7 + 21, a4[27], a4[28], *a5);
  sub_20FB7B7A8(a1 + 6624, a2, v7 + 18, a4[12], a4[13], *a5);
  sub_20FB7BA9C(a1 + 8064, a2, v7 + 18, a4[15], a4[16], *a5);
  sub_20FB7B7A8(a1 + 9504, a2, v7 + 18, a4[18], a4[19], *a5);
  sub_20FB7BD2C(a1 + 10944, a2, v7 + 18, a4[21], a4[22], *a5);
  sub_20FB7BD2C(a1 + 12384, a2, v7 + 18, a4[24], a4[25], *a5);
  sub_20FB7B7A8(a1 + 13824, a2, v7 + 18, a4[27], a4[28], *a5);
  sub_20FB7C864(a1 + 6480, a2, v7 + 15, a4[12], a4[13], *a5);
  sub_20FB7CAF4(a1 + 7920, a2, v7 + 15, a4[15], a4[16], *a5);
  sub_20FB7C864(a1 + 9360, a2, v7 + 15, a4[18], a4[19], *a5);
  sub_20FB7CD48(a1 + 10800, a2, v7 + 15, a4[21], a4[22], *a5);
  sub_20FB7CD48(a1 + 12240, a2, v7 + 15, a4[24], a4[25], *a5);
  sub_20FB7C864(a1 + 13680, a2, v7 + 15, a4[27], a4[28], *a5);
  v7 += 12;
  sub_20FB7B7A8(a1 + 6336, a2, v7, a4[12], a4[13], *a5);
  sub_20FB7BA9C(a1 + 7776, a2, v7, a4[15], a4[16], *a5);
  sub_20FB7B7A8(a1 + 9216, a2, v7, a4[18], a4[19], *a5);
  sub_20FB7BD2C(a1 + 10656, a2, v7, a4[21], a4[22], *a5);
  sub_20FB7BD2C(a1 + 12096, a2, v7, a4[24], a4[25], *a5);
  return sub_20FB7B7A8(a1 + 13536, a2, v7, a4[27], a4[28], *a5);
}

uint64_t sub_20FB7B7A8(uint64_t result, uint64_t a2, unsigned int **a3, _DWORD *a4, _DWORD *a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  int8x16_t v23;
  uint64_t v24;
  __int128 v25;
  int8x16_t v26;
  unint64_t v27;
  int8x16_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int v38;
  uint64_t v39;
  uint64_t *v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int *v43;
  unsigned int v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  int v56;
  uint64_t *v57;
  uint64_t v58;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *(_QWORD *)(result + 88);
        v7 = (*(_DWORD *)(result + 112) * *a4);
        v8 = (uint64_t *)(v6 + 8 * v7);
        v9 = *(_DWORD *)(result + 8);
        v10 = v7 + v9;
        v11 = (uint64_t *)(v6 + 8 * v10);
        if (v9)
        {
          if (*v8 == -1)
          {
            v14 = 8 * v10 - 8 * v7 - 8;
            v15 = 1;
            v16 = v8;
            while (1)
            {
              v9 = v15;
              if (!v14)
                break;
              v8 = v16 + 1;
              v17 = v16[1];
              ++v15;
              v14 -= 8;
              ++v16;
              if (v17 != -1)
                goto LABEL_13;
            }
            v8 = v11;
            v12 = *a3;
            v13 = a3[1];
            if (*a3 != v13)
            {
LABEL_14:
              while (v8 != v11)
              {
                v18 = *v12;
                if (*v12 == v9)
                {
                  v19 = *v8;
LABEL_17:
                  v20 = a4[1];
                  v21 = v12[1];
                  v22 = *(_QWORD *)(result + 16) + 8 * v19;
                  v23 = *(int8x16_t *)v22;
                  v24 = *(_QWORD *)(v22 + 16);
                  *(_QWORD *)&v25 = vextq_s8(v23, v23, 8uLL).u64[0];
                  v26 = *(int8x16_t *)(v22 + 24);
                  v27 = *(_QWORD *)(v22 + 40);
                  v28 = *(int8x16_t *)(v22 + 48);
                  v29 = *(_QWORD *)(v22 + 64);
                  v30 = vextq_s8(v28, v28, 8uLL).u64[0];
                  if (v20 >= v21)
                  {
                    v31 = a2 + 8 * (v21 + 4 * v20);
                    *(_QWORD *)(v31 + 16) = v24;
                    v23.i64[1] = v25;
                    *(int8x16_t *)v31 = v23;
                    *(_QWORD *)&v25 = v26.i64[0];
                  }
                  else
                  {
                    v31 = a2 + 8 * (v20 + 4 * v21);
                    v23.i64[1] = *(_QWORD *)(v22 + 24);
                    v32 = *(_QWORD *)(v22 + 40);
                    *(_QWORD *)(v31 + 16) = v28.i64[0];
                    *(int8x16_t *)v31 = v23;
                    v27 = v30;
                    v28.i64[0] = v24;
                    v30 = v32;
                  }
                  *(_QWORD *)(v31 + 48) = v27;
                  *((_QWORD *)&v25 + 1) = vextq_s8(v26, v26, 8uLL).u64[0];
                  *(_OWORD *)(v31 + 32) = v25;
                  *(_QWORD *)(v31 + 80) = v29;
                  v28.i64[1] = v30;
                  *(int8x16_t *)(v31 + 64) = v28;
                  v9 = v18;
                }
                else
                {
LABEL_19:
                  if (v18 >= v9)
                  {
                    v33 = v8 + 1;
                    while (v33 != v11)
                    {
                      ++v9;
                      v34 = *v33++;
                      v19 = v34;
                      if (v34 != -1)
                      {
                        v8 = v33 - 1;
                        if (v18 != v9)
                          goto LABEL_19;
                        goto LABEL_17;
                      }
                    }
                    break;
                  }
                }
                if (v8 != v11)
                {
                  v12 += 2;
                  if (v12 != v13)
                    continue;
                }
                break;
              }
            }
          }
          else
          {
            v9 = 0;
            v12 = *a3;
            v13 = a3[1];
            if (*a3 != v13)
              goto LABEL_14;
          }
        }
        else
        {
LABEL_13:
          v12 = *a3;
          v13 = a3[1];
          if (*a3 != v13)
            goto LABEL_14;
        }
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v35 = *(_QWORD *)(result + 88);
        v36 = (*(_DWORD *)(result + 112) * *a4);
        v37 = (uint64_t *)(v35 + 8 * v36);
        v38 = *(_DWORD *)(result + 8);
        v39 = (v36 + v38);
        v40 = (uint64_t *)(v35 + 8 * v39);
        if (v38 && *v37 == -1)
        {
          v55 = 8 * v39 - 8 * v36 - 8;
          v56 = 1;
          v57 = v37;
          while (1)
          {
            v41 = v56;
            if (!v55)
              break;
            v37 = v57 + 1;
            v58 = v57[1];
            ++v56;
            v55 -= 8;
            ++v57;
            if (v58 != -1)
              goto LABEL_38;
          }
          v37 = v40;
        }
        else
        {
          v41 = 0;
        }
LABEL_38:
        v42 = *a3;
        v43 = a3[1];
        while (v42 != v43 && v37 != v40)
        {
          v44 = *v42;
          if (*v42 > v41)
          {
            v45 = v37 + 1;
            while (v45 != v40)
            {
              ++v41;
              v46 = *v45++;
              if (v46 != -1 && v44 <= v41)
              {
                v37 = v45 - 1;
                goto LABEL_50;
              }
            }
            break;
          }
LABEL_50:
          if (v44 == v41)
          {
            v48 = *(_QWORD *)(result + 16) + 8 * *v37;
            v49 = *(_QWORD *)(v48 + 16);
            v50 = a2 + 8 * (v42[1] + 4 * a4[1]);
            v51 = *(_QWORD *)(v48 + 40);
            v52 = *(_OWORD *)(v48 + 24);
            v53 = *(_QWORD *)(v48 + 64);
            v54 = *(_OWORD *)(v48 + 48);
            *(_OWORD *)v50 = *(_OWORD *)v48;
            *(_QWORD *)(v50 + 16) = v49;
            *(_OWORD *)(v50 + 32) = v52;
            *(_QWORD *)(v50 + 48) = v51;
            *(_OWORD *)(v50 + 64) = v54;
            *(_QWORD *)(v50 + 80) = v53;
            v41 = v44;
          }
          v42 += 2;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20FB7BA9C(uint64_t result, uint64_t a2, unsigned int **a3, _DWORD *a4, _DWORD *a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  int8x16_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  int8x16_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int v34;
  uint64_t v35;
  uint64_t *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t *v50;
  uint64_t v51;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *(_QWORD *)(result + 88);
        v7 = (*(_DWORD *)(result + 112) * *a4);
        v8 = (uint64_t *)(v6 + 8 * v7);
        v9 = *(_DWORD *)(result + 8);
        v10 = (v7 + v9);
        v11 = (uint64_t *)(v6 + 8 * v10);
        if (v9 && *v8 == -1)
        {
          v15 = 8 * v10 - 8 * v7 - 8;
          v16 = 1;
          v17 = v8;
          while (1)
          {
            v12 = v16;
            if (!v15)
              break;
            v8 = v17 + 1;
            v18 = v17[1];
            ++v16;
            v15 -= 8;
            ++v17;
            if (v18 != -1)
            {
              v13 = *a3;
              v14 = a3[1];
              if (*a3 != v14)
                goto LABEL_14;
              goto LABEL_5;
            }
          }
          v8 = v11;
          v13 = *a3;
          v14 = a3[1];
          if (*a3 != v14)
          {
LABEL_14:
            while (v8 != v11)
            {
              v19 = *v13;
              if (*v13 == v12)
              {
                v20 = *v8;
LABEL_17:
                v21 = a4[1];
                v22 = v13[1];
                v23 = *(_QWORD *)(result + 16) + 8 * v20;
                v24 = *(int8x16_t *)v23;
                v25 = *(_QWORD *)(v23 + 16);
                v26 = vextq_s8(v24, v24, 8uLL).u64[0];
                if (v21 >= v22)
                {
                  v30 = (int8x16_t *)(a2 + 8 * (v22 + 4 * v21));
                  v30[1].i64[0] = v25;
                  v24.i64[1] = v26;
                  *v30 = v24;
                }
                else
                {
                  v27 = (_QWORD *)(a2 + 8 * (v21 + 4 * v22));
                  *v27 = v24.i64[0];
                  v27[4] = v26;
                  v27[8] = v25;
                }
                v12 = v19;
              }
              else
              {
LABEL_19:
                if (v19 >= v12)
                {
                  v28 = v8 + 1;
                  while (v28 != v11)
                  {
                    ++v12;
                    v29 = *v28++;
                    v20 = v29;
                    if (v29 != -1)
                    {
                      v8 = v28 - 1;
                      if (v19 != v12)
                        goto LABEL_19;
                      goto LABEL_17;
                    }
                  }
                  break;
                }
              }
              if (v8 != v11)
              {
                v13 += 2;
                if (v13 != v14)
                  continue;
              }
              break;
            }
          }
        }
        else
        {
          v12 = 0;
          v13 = *a3;
          v14 = a3[1];
          if (*a3 != v14)
            goto LABEL_14;
        }
LABEL_5:
        ;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v31 = *(_QWORD *)(result + 88);
        v32 = (*(_DWORD *)(result + 112) * *a4);
        v33 = (uint64_t *)(v31 + 8 * v32);
        v34 = *(_DWORD *)(result + 8);
        v35 = (v32 + v34);
        v36 = (uint64_t *)(v31 + 8 * v35);
        if (v34 && *v33 == -1)
        {
          v48 = 8 * v35 - 8 * v32 - 8;
          v49 = 1;
          v50 = v33;
          while (1)
          {
            v37 = v49;
            if (!v48)
              break;
            v33 = v50 + 1;
            v51 = v50[1];
            ++v49;
            v48 -= 8;
            ++v50;
            if (v51 != -1)
              goto LABEL_38;
          }
          v33 = v36;
        }
        else
        {
          v37 = 0;
        }
LABEL_38:
        v38 = *a3;
        v39 = a3[1];
        while (v38 != v39 && v33 != v36)
        {
          v40 = *v38;
          if (*v38 > v37)
          {
            v41 = v33 + 1;
            while (v41 != v36)
            {
              ++v37;
              v42 = *v41++;
              if (v42 != -1 && v40 <= v37)
              {
                v33 = v41 - 1;
                goto LABEL_50;
              }
            }
            break;
          }
LABEL_50:
          if (v40 == v37)
          {
            v44 = *(_QWORD *)(result + 16) + 8 * *v33;
            v45 = *(_OWORD *)v44;
            v46 = *(_QWORD *)(v44 + 16);
            v47 = a2 + 8 * (v38[1] + 4 * a4[1]);
            *(_QWORD *)(v47 + 16) = v46;
            *(_OWORD *)v47 = v45;
            v37 = v40;
          }
          v38 += 2;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20FB7BD2C(uint64_t result, uint64_t a2, unsigned int **a3, _DWORD *a4, _DWORD *a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  uint64_t v27;
  unint64_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  uint64_t v33;
  unint64_t v34;
  int8x16_t *v35;
  uint64_t *v36;
  uint64_t v37;
  int8x16_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int v42;
  uint64_t v43;
  uint64_t *v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int *v47;
  unsigned int v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  int v62;
  uint64_t *v63;
  uint64_t v64;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *(_QWORD *)(result + 88);
        v7 = (*(_DWORD *)(result + 112) * *a4);
        v8 = (uint64_t *)(v6 + 8 * v7);
        v9 = *(_DWORD *)(result + 8);
        v10 = v7 + v9;
        v11 = (uint64_t *)(v6 + 8 * v10);
        if (v9)
        {
          if (*v8 == -1)
          {
            v14 = 8 * v10 - 8 * v7 - 8;
            v15 = 1;
            v16 = v8;
            while (1)
            {
              v9 = v15;
              if (!v14)
                break;
              v8 = v16 + 1;
              v17 = v16[1];
              ++v15;
              v14 -= 8;
              ++v16;
              if (v17 != -1)
                goto LABEL_13;
            }
            v8 = v11;
            v12 = *a3;
            v13 = a3[1];
            if (*a3 != v13)
            {
LABEL_14:
              while (v8 != v11)
              {
                v18 = *v12;
                if (*v12 == v9)
                {
                  v19 = *v8;
LABEL_17:
                  v20 = a4[1];
                  v21 = v12[1];
                  v22 = *(_QWORD *)(result + 16) + 8 * v19;
                  v23 = *(int8x16_t *)v22;
                  v24.i64[0] = *(_QWORD *)(v22 + 16);
                  v25.i64[0] = vextq_s8(v23, v23, 8uLL).u64[0];
                  v26 = *(int8x16_t *)(v22 + 24);
                  v27 = *(_QWORD *)(v22 + 40);
                  v28 = vextq_s8(v26, v26, 8uLL).u64[0];
                  v29 = *(int8x16_t *)(v22 + 48);
                  v30.i64[0] = *(_QWORD *)(v22 + 64);
                  v31.i64[0] = vextq_s8(v29, v29, 8uLL).u64[0];
                  v32 = *(int8x16_t *)(v22 + 72);
                  v33 = *(_QWORD *)(v22 + 88);
                  v34 = vextq_s8(v32, v32, 8uLL).u64[0];
                  if (v20 >= v21)
                  {
                    v38 = (int8x16_t *)(a2 + 8 * (v21 + 4 * v20));
                    v38[1].i64[0] = v24.i64[0];
                    v23.i64[1] = v25.i64[0];
                    *v38 = v23;
                    v38[3].i64[0] = v27;
                    v26.i64[1] = v28;
                    v38[2] = v26;
                    v38[5].i64[0] = v30.i64[0];
                    v29.i64[1] = v31.i64[0];
                    v38[4] = v29;
                    v38[7].i64[0] = v33;
                    v32.i64[1] = v34;
                    v38[6] = v32;
                  }
                  else
                  {
                    v23.i64[1] = *(_QWORD *)(v22 + 24);
                    v29.i64[1] = *(_QWORD *)(v22 + 72);
                    v25.i64[1] = v28;
                    v31.i64[1] = v34;
                    v35 = (int8x16_t *)(a2 + 8 * (v20 + 4 * v21));
                    v24.i64[1] = *(_QWORD *)(v22 + 40);
                    v30.i64[1] = *(_QWORD *)(v22 + 88);
                    *v35 = v23;
                    v35[1] = v29;
                    v35[2] = v25;
                    v35[3] = v31;
                    v35[4] = v24;
                    v35[5] = v30;
                  }
                  v9 = v18;
                }
                else
                {
LABEL_19:
                  if (v18 >= v9)
                  {
                    v36 = v8 + 1;
                    while (v36 != v11)
                    {
                      ++v9;
                      v37 = *v36++;
                      v19 = v37;
                      if (v37 != -1)
                      {
                        v8 = v36 - 1;
                        if (v18 != v9)
                          goto LABEL_19;
                        goto LABEL_17;
                      }
                    }
                    break;
                  }
                }
                if (v8 != v11)
                {
                  v12 += 2;
                  if (v12 != v13)
                    continue;
                }
                break;
              }
            }
          }
          else
          {
            v9 = 0;
            v12 = *a3;
            v13 = a3[1];
            if (*a3 != v13)
              goto LABEL_14;
          }
        }
        else
        {
LABEL_13:
          v12 = *a3;
          v13 = a3[1];
          if (*a3 != v13)
            goto LABEL_14;
        }
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v39 = *(_QWORD *)(result + 88);
        v40 = (*(_DWORD *)(result + 112) * *a4);
        v41 = (uint64_t *)(v39 + 8 * v40);
        v42 = *(_DWORD *)(result + 8);
        v43 = (v40 + v42);
        v44 = (uint64_t *)(v39 + 8 * v43);
        if (v42 && *v41 == -1)
        {
          v61 = 8 * v43 - 8 * v40 - 8;
          v62 = 1;
          v63 = v41;
          while (1)
          {
            v45 = v62;
            if (!v61)
              break;
            v41 = v63 + 1;
            v64 = v63[1];
            ++v62;
            v61 -= 8;
            ++v63;
            if (v64 != -1)
              goto LABEL_38;
          }
          v41 = v44;
        }
        else
        {
          v45 = 0;
        }
LABEL_38:
        v46 = *a3;
        v47 = a3[1];
        while (v46 != v47 && v41 != v44)
        {
          v48 = *v46;
          if (*v46 > v45)
          {
            v49 = v41 + 1;
            while (v49 != v44)
            {
              ++v45;
              v50 = *v49++;
              if (v50 != -1 && v48 <= v45)
              {
                v41 = v49 - 1;
                goto LABEL_50;
              }
            }
            break;
          }
LABEL_50:
          if (v48 == v45)
          {
            v52 = *(_QWORD *)(result + 16) + 8 * *v41;
            v53 = *(_QWORD *)(v52 + 16);
            v54 = a2 + 8 * (v46[1] + 4 * a4[1]);
            v55 = *(_QWORD *)(v52 + 40);
            v56 = *(_OWORD *)(v52 + 24);
            v57 = *(_QWORD *)(v52 + 64);
            v58 = *(_OWORD *)(v52 + 48);
            v59 = *(_QWORD *)(v52 + 88);
            v60 = *(_OWORD *)(v52 + 72);
            *(_OWORD *)v54 = *(_OWORD *)v52;
            *(_QWORD *)(v54 + 16) = v53;
            *(_OWORD *)(v54 + 32) = v56;
            *(_QWORD *)(v54 + 48) = v55;
            *(_OWORD *)(v54 + 64) = v58;
            *(_QWORD *)(v54 + 80) = v57;
            *(_OWORD *)(v54 + 96) = v60;
            *(_QWORD *)(v54 + 112) = v59;
            v45 = v48;
          }
          v46 += 2;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20FB7C04C(uint64_t result, uint64_t a2, unsigned int **a3, _DWORD *a4, _DWORD *a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  int64x2_t *v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t *v30;
  uint64_t *v31;
  uint64_t v32;
  int64x2_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int v37;
  uint64_t v38;
  uint64_t *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t *v44;
  uint64_t v45;
  __int128 *v47;
  __int128 v48;
  __int128 v49;
  _OWORD *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  int v55;
  uint64_t *v56;
  uint64_t v57;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *(_QWORD *)(result + 88);
        v7 = (*(_DWORD *)(result + 112) * *a4);
        v8 = (uint64_t *)(v6 + 8 * v7);
        v9 = *(_DWORD *)(result + 8);
        v10 = (v7 + v9);
        v11 = (uint64_t *)(v6 + 8 * v10);
        if (v9 && *v8 == -1)
        {
          v15 = 8 * v10 - 8 * v7 - 8;
          v16 = 1;
          v17 = v8;
          while (1)
          {
            v12 = v16;
            if (!v15)
              break;
            v8 = v17 + 1;
            v18 = v17[1];
            ++v16;
            v15 -= 8;
            ++v17;
            if (v18 != -1)
            {
              v13 = *a3;
              v14 = a3[1];
              if (*a3 != v14)
                goto LABEL_14;
              goto LABEL_5;
            }
          }
          v8 = v11;
          v13 = *a3;
          v14 = a3[1];
          if (*a3 != v14)
          {
LABEL_14:
            while (v8 != v11)
            {
              v19 = *v13;
              if (*v13 == v12)
              {
                v20 = *v8;
LABEL_17:
                v21 = a4[1];
                v22 = v13[1];
                v23 = (int64x2_t *)(*(_QWORD *)(result + 16) + 8 * v20);
                v25 = *v23;
                v24 = v23[1];
                v27 = v23[2];
                v26 = v23[3];
                v29 = v23[4];
                v28 = v23[5];
                if (v21 >= v22)
                {
                  v33 = (int64x2_t *)(a2 + 8 * (v22 + 4 * v21));
                  *v33 = v25;
                  v33[1] = v24;
                  v33[2] = v27;
                  v33[3] = v26;
                  v33[4] = v29;
                  v33[5] = v28;
                }
                else
                {
                  v30 = (int64x2_t *)(a2 + 8 * (v21 + 4 * v22));
                  v30[1].i64[0] = v29.i64[0];
                  *v30 = vzip1q_s64(v25, v27);
                  v30[2] = vzip2q_s64(v25, v27);
                  v30[3].i64[0] = v29.i64[1];
                  v30[5].i64[0] = v28.i64[0];
                  v30[4] = vzip1q_s64(v24, v26);
                  v30[6] = vzip2q_s64(v24, v26);
                  v30[7].i64[0] = v28.i64[1];
                }
                v12 = v19;
              }
              else
              {
LABEL_19:
                if (v19 >= v12)
                {
                  v31 = v8 + 1;
                  while (v31 != v11)
                  {
                    ++v12;
                    v32 = *v31++;
                    v20 = v32;
                    if (v32 != -1)
                    {
                      v8 = v31 - 1;
                      if (v19 != v12)
                        goto LABEL_19;
                      goto LABEL_17;
                    }
                  }
                  break;
                }
              }
              if (v8 != v11)
              {
                v13 += 2;
                if (v13 != v14)
                  continue;
              }
              break;
            }
          }
        }
        else
        {
          v12 = 0;
          v13 = *a3;
          v14 = a3[1];
          if (*a3 != v14)
            goto LABEL_14;
        }
LABEL_5:
        ;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v34 = *(_QWORD *)(result + 88);
        v35 = (*(_DWORD *)(result + 112) * *a4);
        v36 = (uint64_t *)(v34 + 8 * v35);
        v37 = *(_DWORD *)(result + 8);
        v38 = (v35 + v37);
        v39 = (uint64_t *)(v34 + 8 * v38);
        if (v37 && *v36 == -1)
        {
          v54 = 8 * v38 - 8 * v35 - 8;
          v55 = 1;
          v56 = v36;
          while (1)
          {
            v40 = v55;
            if (!v54)
              break;
            v36 = v56 + 1;
            v57 = v56[1];
            ++v55;
            v54 -= 8;
            ++v56;
            if (v57 != -1)
              goto LABEL_38;
          }
          v36 = v39;
        }
        else
        {
          v40 = 0;
        }
LABEL_38:
        v41 = *a3;
        v42 = a3[1];
        while (v41 != v42 && v36 != v39)
        {
          v43 = *v41;
          if (*v41 > v40)
          {
            v44 = v36 + 1;
            while (v44 != v39)
            {
              ++v40;
              v45 = *v44++;
              if (v45 != -1 && v43 <= v40)
              {
                v36 = v44 - 1;
                goto LABEL_50;
              }
            }
            break;
          }
LABEL_50:
          if (v43 == v40)
          {
            v47 = (__int128 *)(*(_QWORD *)(result + 16) + 8 * *v36);
            v49 = v47[4];
            v48 = v47[5];
            v50 = (_OWORD *)(a2 + 8 * (v41[1] + 4 * a4[1]));
            v51 = v47[3];
            v52 = *v47;
            v53 = v47[1];
            v50[2] = v47[2];
            v50[3] = v51;
            v50[4] = v49;
            v50[5] = v48;
            *v50 = v52;
            v50[1] = v53;
            v40 = v43;
          }
          v41 += 2;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20FB7C310(uint64_t result, uint64_t a2, unsigned int **a3, _DWORD *a4, _DWORD *a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  int8x16_t *v23;
  int8x16_t v24;
  int8x16_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  int8x16_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  int v33;
  uint64_t v34;
  uint64_t *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int v39;
  uint64_t *v40;
  uint64_t v41;
  __int128 *v43;
  __int128 v44;
  __int128 v45;
  _OWORD *v46;
  uint64_t v47;
  int v48;
  uint64_t *v49;
  uint64_t v50;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *(_QWORD *)(result + 88);
        v7 = (*(_DWORD *)(result + 112) * *a4);
        v8 = (uint64_t *)(v6 + 8 * v7);
        v9 = *(_DWORD *)(result + 8);
        v10 = (v7 + v9);
        v11 = (uint64_t *)(v6 + 8 * v10);
        if (v9 && *v8 == -1)
        {
          v15 = 8 * v10 - 8 * v7 - 8;
          v16 = 1;
          v17 = v8;
          while (1)
          {
            v12 = v16;
            if (!v15)
              break;
            v8 = v17 + 1;
            v18 = v17[1];
            ++v16;
            v15 -= 8;
            ++v17;
            if (v18 != -1)
            {
              v13 = *a3;
              v14 = a3[1];
              if (*a3 != v14)
                goto LABEL_14;
              goto LABEL_5;
            }
          }
          v8 = v11;
          v13 = *a3;
          v14 = a3[1];
          if (*a3 != v14)
          {
LABEL_14:
            while (v8 != v11)
            {
              v19 = *v13;
              if (*v13 == v12)
              {
                v20 = *v8;
LABEL_17:
                v21 = a4[1];
                v22 = v13[1];
                v23 = (int8x16_t *)(*(_QWORD *)(result + 16) + 8 * v20);
                v25 = *v23;
                v24 = v23[1];
                if (v21 >= v22)
                {
                  v29 = (int8x16_t *)(a2 + 8 * (v22 + 4 * v21));
                  *v29 = v25;
                  v29[1] = v24;
                }
                else
                {
                  v26 = (_QWORD *)(a2 + 8 * (v21 + 4 * v22));
                  *v26 = v25.i64[0];
                  v26[4] = vextq_s8(v25, v25, 8uLL).u64[0];
                  v26[8] = v24.i64[0];
                  v26[12] = vextq_s8(v24, v24, 8uLL).u64[0];
                }
                v12 = v19;
              }
              else
              {
LABEL_19:
                if (v19 >= v12)
                {
                  v27 = v8 + 1;
                  while (v27 != v11)
                  {
                    ++v12;
                    v28 = *v27++;
                    v20 = v28;
                    if (v28 != -1)
                    {
                      v8 = v27 - 1;
                      if (v19 != v12)
                        goto LABEL_19;
                      goto LABEL_17;
                    }
                  }
                  break;
                }
              }
              if (v8 != v11)
              {
                v13 += 2;
                if (v13 != v14)
                  continue;
              }
              break;
            }
          }
        }
        else
        {
          v12 = 0;
          v13 = *a3;
          v14 = a3[1];
          if (*a3 != v14)
            goto LABEL_14;
        }
LABEL_5:
        ;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v30 = *(_QWORD *)(result + 88);
        v31 = (*(_DWORD *)(result + 112) * *a4);
        v32 = (uint64_t *)(v30 + 8 * v31);
        v33 = *(_DWORD *)(result + 8);
        v34 = (v31 + v33);
        v35 = (uint64_t *)(v30 + 8 * v34);
        if (v33 && *v32 == -1)
        {
          v47 = 8 * v34 - 8 * v31 - 8;
          v48 = 1;
          v49 = v32;
          while (1)
          {
            v36 = v48;
            if (!v47)
              break;
            v32 = v49 + 1;
            v50 = v49[1];
            ++v48;
            v47 -= 8;
            ++v49;
            if (v50 != -1)
              goto LABEL_38;
          }
          v32 = v35;
        }
        else
        {
          v36 = 0;
        }
LABEL_38:
        v37 = *a3;
        v38 = a3[1];
        while (v37 != v38 && v32 != v35)
        {
          v39 = *v37;
          if (*v37 > v36)
          {
            v40 = v32 + 1;
            while (v40 != v35)
            {
              ++v36;
              v41 = *v40++;
              if (v41 != -1 && v39 <= v36)
              {
                v32 = v40 - 1;
                goto LABEL_50;
              }
            }
            break;
          }
LABEL_50:
          if (v39 == v36)
          {
            v43 = (__int128 *)(*(_QWORD *)(result + 16) + 8 * *v32);
            v44 = *v43;
            v45 = v43[1];
            v46 = (_OWORD *)(a2 + 8 * (v37[1] + 4 * a4[1]));
            *v46 = v44;
            v46[1] = v45;
            v36 = v39;
          }
          v37 += 2;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20FB7C594(uint64_t result, uint64_t a2, unsigned int **a3, _DWORD *a4, _DWORD *a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  int64x2_t *v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t *v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int v41;
  uint64_t v42;
  uint64_t *v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int v47;
  uint64_t *v48;
  uint64_t v49;
  __int128 *v51;
  __int128 v52;
  __int128 v53;
  _OWORD *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  int v61;
  uint64_t *v62;
  uint64_t v63;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *(_QWORD *)(result + 88);
        v7 = (*(_DWORD *)(result + 112) * *a4);
        v8 = (uint64_t *)(v6 + 8 * v7);
        v9 = *(_DWORD *)(result + 8);
        v10 = v7 + v9;
        v11 = (uint64_t *)(v6 + 8 * v10);
        if (v9)
        {
          if (*v8 == -1)
          {
            v14 = 8 * v10 - 8 * v7 - 8;
            v15 = 1;
            v16 = v8;
            while (1)
            {
              v9 = v15;
              if (!v14)
                break;
              v8 = v16 + 1;
              v17 = v16[1];
              ++v15;
              v14 -= 8;
              ++v16;
              if (v17 != -1)
                goto LABEL_13;
            }
            v8 = v11;
            v12 = *a3;
            v13 = a3[1];
            if (*a3 != v13)
            {
LABEL_14:
              while (v8 != v11)
              {
                v18 = *v12;
                if (*v12 == v9)
                {
                  v19 = *v8;
LABEL_17:
                  v20 = a4[1];
                  v21 = v12[1];
                  v22 = (int64x2_t *)(*(_QWORD *)(result + 16) + 8 * v19);
                  v24 = *v22;
                  v23 = v22[1];
                  v25 = v22[2];
                  v26 = v22[3];
                  v27 = v22[4];
                  v28 = v22[5];
                  v29 = v22[6];
                  v30 = v22[7];
                  if (v20 >= v21)
                  {
                    v31 = (int64x2_t *)(a2 + 8 * (v21 + 4 * v20));
                    *v31 = v24;
                    v31[1] = v23;
                  }
                  else
                  {
                    v31 = (int64x2_t *)(a2 + 8 * (v20 + 4 * v21));
                    v32 = vzip1q_s64(v24, v25);
                    v33 = vzip1q_s64(v27, v29);
                    v25 = vzip2q_s64(v24, v25);
                    v34.i64[0] = vdupq_laneq_s64(v27, 1).u64[0];
                    v34.i64[1] = v29.i64[1];
                    v27 = vzip1q_s64(v23, v26);
                    v35.i64[0] = vdupq_laneq_s64(v28, 1).u64[0];
                    v28 = vzip1q_s64(v28, v30);
                    v35.i64[1] = v30.i64[1];
                    v29 = vzip2q_s64(v23, v26);
                    *v31 = v32;
                    v31[1] = v33;
                    v26 = v34;
                    v30 = v35;
                  }
                  v31[2] = v25;
                  v31[3] = v26;
                  v31[4] = v27;
                  v31[5] = v28;
                  v9 = v18;
                  v31[6] = v29;
                  v31[7] = v30;
                }
                else
                {
LABEL_19:
                  if (v18 >= v9)
                  {
                    v36 = v8 + 1;
                    while (v36 != v11)
                    {
                      ++v9;
                      v37 = *v36++;
                      v19 = v37;
                      if (v37 != -1)
                      {
                        v8 = v36 - 1;
                        if (v18 != v9)
                          goto LABEL_19;
                        goto LABEL_17;
                      }
                    }
                    break;
                  }
                }
                if (v8 != v11)
                {
                  v12 += 2;
                  if (v12 != v13)
                    continue;
                }
                break;
              }
            }
          }
          else
          {
            v9 = 0;
            v12 = *a3;
            v13 = a3[1];
            if (*a3 != v13)
              goto LABEL_14;
          }
        }
        else
        {
LABEL_13:
          v12 = *a3;
          v13 = a3[1];
          if (*a3 != v13)
            goto LABEL_14;
        }
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v38 = *(_QWORD *)(result + 88);
        v39 = (*(_DWORD *)(result + 112) * *a4);
        v40 = (uint64_t *)(v38 + 8 * v39);
        v41 = *(_DWORD *)(result + 8);
        v42 = (v39 + v41);
        v43 = (uint64_t *)(v38 + 8 * v42);
        if (v41 && *v40 == -1)
        {
          v60 = 8 * v42 - 8 * v39 - 8;
          v61 = 1;
          v62 = v40;
          while (1)
          {
            v44 = v61;
            if (!v60)
              break;
            v40 = v62 + 1;
            v63 = v62[1];
            ++v61;
            v60 -= 8;
            ++v62;
            if (v63 != -1)
              goto LABEL_38;
          }
          v40 = v43;
        }
        else
        {
          v44 = 0;
        }
LABEL_38:
        v45 = *a3;
        v46 = a3[1];
        while (v45 != v46 && v40 != v43)
        {
          v47 = *v45;
          if (*v45 > v44)
          {
            v48 = v40 + 1;
            while (v48 != v43)
            {
              ++v44;
              v49 = *v48++;
              if (v49 != -1 && v47 <= v44)
              {
                v40 = v48 - 1;
                goto LABEL_50;
              }
            }
            break;
          }
LABEL_50:
          if (v47 == v44)
          {
            v51 = (__int128 *)(*(_QWORD *)(result + 16) + 8 * *v40);
            v53 = *v51;
            v52 = v51[1];
            v54 = (_OWORD *)(a2 + 8 * (v45[1] + 4 * a4[1]));
            v56 = v51[2];
            v55 = v51[3];
            v58 = v51[4];
            v57 = v51[5];
            v59 = v51[7];
            v54[6] = v51[6];
            v54[7] = v59;
            v54[4] = v58;
            v54[5] = v57;
            v54[2] = v56;
            v54[3] = v55;
            *v54 = v53;
            v54[1] = v52;
            v44 = v47;
          }
          v45 += 2;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20FB7C864(uint64_t result, uint64_t a2, unsigned int **a3, _DWORD *a4, _DWORD *a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int v34;
  uint64_t v35;
  uint64_t *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t *v41;
  uint64_t v42;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t *v50;
  uint64_t v51;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *(_QWORD *)(result + 88);
        v7 = (*(_DWORD *)(result + 112) * *a4);
        v8 = (uint64_t *)(v6 + 8 * v7);
        v9 = *(_DWORD *)(result + 8);
        v10 = (v7 + v9);
        v11 = (uint64_t *)(v6 + 8 * v10);
        if (v9 && *v8 == -1)
        {
          v15 = 8 * v10 - 8 * v7 - 8;
          v16 = 1;
          v17 = v8;
          while (1)
          {
            v12 = v16;
            if (!v15)
              break;
            v8 = v17 + 1;
            v18 = v17[1];
            ++v16;
            v15 -= 8;
            ++v17;
            if (v18 != -1)
            {
              v13 = *a3;
              v14 = a3[1];
              if (*a3 != v14)
                goto LABEL_14;
              goto LABEL_5;
            }
          }
          v8 = v11;
          v13 = *a3;
          v14 = a3[1];
          if (*a3 != v14)
          {
LABEL_14:
            while (v8 != v11)
            {
              v19 = *v13;
              if (*v13 == v12)
              {
                v20 = *v8;
LABEL_17:
                v21 = a4[1];
                v22 = v13[1];
                v23 = (_QWORD *)(*(_QWORD *)(result + 16) + 8 * v20);
                *(_QWORD *)&v24 = *v23;
                v25 = v23[1];
                v26 = v23[2];
                if (v21 >= v22)
                {
                  v30 = (_QWORD *)(a2 + 8 * (v22 + 4 * v21));
                  *v30 = v24;
                  v30[4] = v25;
                  v30[8] = v26;
                }
                else
                {
                  *((_QWORD *)&v24 + 1) = v23[1];
                  v27 = a2 + 8 * (v21 + 4 * v22);
                  *(_QWORD *)(v27 + 16) = v26;
                  *(_OWORD *)v27 = v24;
                }
                v12 = v19;
              }
              else
              {
LABEL_19:
                if (v19 >= v12)
                {
                  v28 = v8 + 1;
                  while (v28 != v11)
                  {
                    ++v12;
                    v29 = *v28++;
                    v20 = v29;
                    if (v29 != -1)
                    {
                      v8 = v28 - 1;
                      if (v19 != v12)
                        goto LABEL_19;
                      goto LABEL_17;
                    }
                  }
                  break;
                }
              }
              if (v8 != v11)
              {
                v13 += 2;
                if (v13 != v14)
                  continue;
              }
              break;
            }
          }
        }
        else
        {
          v12 = 0;
          v13 = *a3;
          v14 = a3[1];
          if (*a3 != v14)
            goto LABEL_14;
        }
LABEL_5:
        ;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v31 = *(_QWORD *)(result + 88);
        v32 = (*(_DWORD *)(result + 112) * *a4);
        v33 = (uint64_t *)(v31 + 8 * v32);
        v34 = *(_DWORD *)(result + 8);
        v35 = (v32 + v34);
        v36 = (uint64_t *)(v31 + 8 * v35);
        if (v34 && *v33 == -1)
        {
          v48 = 8 * v35 - 8 * v32 - 8;
          v49 = 1;
          v50 = v33;
          while (1)
          {
            v37 = v49;
            if (!v48)
              break;
            v33 = v50 + 1;
            v51 = v50[1];
            ++v49;
            v48 -= 8;
            ++v50;
            if (v51 != -1)
              goto LABEL_38;
          }
          v33 = v36;
        }
        else
        {
          v37 = 0;
        }
LABEL_38:
        v38 = *a3;
        v39 = a3[1];
        while (v38 != v39 && v33 != v36)
        {
          v40 = *v38;
          if (*v38 > v37)
          {
            v41 = v33 + 1;
            while (v41 != v36)
            {
              ++v37;
              v42 = *v41++;
              if (v42 != -1 && v40 <= v37)
              {
                v33 = v41 - 1;
                goto LABEL_50;
              }
            }
            break;
          }
LABEL_50:
          if (v40 == v37)
          {
            v44 = (_QWORD *)(*(_QWORD *)(result + 16) + 8 * *v33);
            v45 = (_QWORD *)(a2 + 8 * (v38[1] + 4 * a4[1]));
            v46 = v44[1];
            v47 = v44[2];
            *v45 = *v44;
            v45[4] = v46;
            v45[8] = v47;
            v37 = v40;
          }
          v38 += 2;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20FB7CAF4(uint64_t result, uint64_t a2, unsigned int **a3, _DWORD *a4, _DWORD *a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  int v30;
  uint64_t v31;
  uint64_t *v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v40;
  int v41;
  uint64_t *v42;
  uint64_t v43;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *(_QWORD *)(result + 88);
        v7 = (*(_DWORD *)(result + 112) * *a4);
        v8 = (uint64_t *)(v6 + 8 * v7);
        v9 = *(_DWORD *)(result + 8);
        v10 = (v7 + v9);
        v11 = (uint64_t *)(v6 + 8 * v10);
        if (v9 && *v8 == -1)
        {
          v15 = 8 * v10 - 8 * v7 - 8;
          v16 = 1;
          v17 = v8;
          while (1)
          {
            v12 = v16;
            if (!v15)
              break;
            v8 = v17 + 1;
            v18 = v17[1];
            ++v16;
            v15 -= 8;
            ++v17;
            if (v18 != -1)
            {
              v13 = *a3;
              v14 = a3[1];
              if (*a3 != v14)
                goto LABEL_14;
              goto LABEL_5;
            }
          }
          v8 = v11;
          v13 = *a3;
          v14 = a3[1];
          if (*a3 != v14)
          {
LABEL_14:
            while (v8 != v11)
            {
              v19 = *v13;
              if (*v13 == v12)
              {
                v20 = *v8;
LABEL_17:
                v21 = a4[1];
                v22 = v13[1];
                v23 = *(_QWORD *)(*(_QWORD *)(result + 16) + 8 * v20);
                if (v21 <= v22)
                  v24 = v13[1];
                else
                  v24 = a4[1];
                if (v21 >= v22)
                  v21 = v13[1];
                *(_QWORD *)(a2 + 8 * (v21 + 4 * v24)) = v23;
                v12 = v19;
              }
              else
              {
LABEL_26:
                if (v19 >= v12)
                {
                  v25 = v8 + 1;
                  while (v25 != v11)
                  {
                    ++v12;
                    v26 = *v25++;
                    v20 = v26;
                    if (v26 != -1)
                    {
                      v8 = v25 - 1;
                      if (v19 != v12)
                        goto LABEL_26;
                      goto LABEL_17;
                    }
                  }
                  break;
                }
              }
              if (v8 != v11)
              {
                v13 += 2;
                if (v13 != v14)
                  continue;
              }
              break;
            }
          }
        }
        else
        {
          v12 = 0;
          v13 = *a3;
          v14 = a3[1];
          if (*a3 != v14)
            goto LABEL_14;
        }
LABEL_5:
        ;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v27 = *(_QWORD *)(result + 88);
        v28 = (*(_DWORD *)(result + 112) * *a4);
        v29 = (uint64_t *)(v27 + 8 * v28);
        v30 = *(_DWORD *)(result + 8);
        v31 = (v28 + v30);
        v32 = (uint64_t *)(v27 + 8 * v31);
        if (v30 && *v29 == -1)
        {
          v40 = 8 * v31 - 8 * v28 - 8;
          v41 = 1;
          v42 = v29;
          while (1)
          {
            v33 = v41;
            if (!v40)
              break;
            v29 = v42 + 1;
            v43 = v42[1];
            ++v41;
            v40 -= 8;
            ++v42;
            if (v43 != -1)
              goto LABEL_40;
          }
          v29 = v32;
        }
        else
        {
          v33 = 0;
        }
LABEL_40:
        v34 = *a3;
        v35 = a3[1];
        while (v34 != v35 && v29 != v32)
        {
          v36 = *v34;
          if (*v34 > v33)
          {
            v37 = v29 + 1;
            while (v37 != v32)
            {
              ++v33;
              v38 = *v37++;
              if (v38 != -1 && v36 <= v33)
              {
                v29 = v37 - 1;
                goto LABEL_52;
              }
            }
            break;
          }
LABEL_52:
          if (v36 == v33)
          {
            *(_QWORD *)(a2 + 8 * (v34[1] + 4 * a4[1])) = *(_QWORD *)(*(_QWORD *)(result + 16) + 8 * *v29);
            v33 = v36;
          }
          v34 += 2;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20FB7CD48(uint64_t result, uint64_t a2, unsigned int **a3, _DWORD *a4, _DWORD *a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  _OWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int v35;
  uint64_t v36;
  uint64_t *v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int *v40;
  unsigned int v41;
  uint64_t *v42;
  uint64_t v43;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t *v52;
  uint64_t v53;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *(_QWORD *)(result + 88);
        v7 = (*(_DWORD *)(result + 112) * *a4);
        v8 = (uint64_t *)(v6 + 8 * v7);
        v9 = *(_DWORD *)(result + 8);
        v10 = (v7 + v9);
        v11 = (uint64_t *)(v6 + 8 * v10);
        if (v9 && *v8 == -1)
        {
          v15 = 8 * v10 - 8 * v7 - 8;
          v16 = 1;
          v17 = v8;
          while (1)
          {
            v12 = v16;
            if (!v15)
              break;
            v8 = v17 + 1;
            v18 = v17[1];
            ++v16;
            v15 -= 8;
            ++v17;
            if (v18 != -1)
            {
              v13 = *a3;
              v14 = a3[1];
              if (*a3 != v14)
                goto LABEL_14;
              goto LABEL_5;
            }
          }
          v8 = v11;
          v13 = *a3;
          v14 = a3[1];
          if (*a3 != v14)
          {
LABEL_14:
            while (v8 != v11)
            {
              v19 = *v13;
              if (*v13 == v12)
              {
                v20 = *v8;
LABEL_17:
                v21 = a4[1];
                v22 = v13[1];
                v23 = (_QWORD *)(*(_QWORD *)(result + 16) + 8 * v20);
                *(_QWORD *)&v24 = *v23;
                v25 = v23[1];
                *(_QWORD *)&v26 = v23[2];
                v27 = v23[3];
                if (v21 >= v22)
                {
                  v31 = (_QWORD *)(a2 + 8 * (v22 + 4 * v21));
                  *v31 = v24;
                  v31[4] = v25;
                  v31[8] = v26;
                  v31[12] = v27;
                }
                else
                {
                  *((_QWORD *)&v24 + 1) = v23[1];
                  *((_QWORD *)&v26 + 1) = v23[3];
                  v28 = (_OWORD *)(a2 + 8 * (v21 + 4 * v22));
                  *v28 = v24;
                  v28[1] = v26;
                }
                v12 = v19;
              }
              else
              {
LABEL_19:
                if (v19 >= v12)
                {
                  v29 = v8 + 1;
                  while (v29 != v11)
                  {
                    ++v12;
                    v30 = *v29++;
                    v20 = v30;
                    if (v30 != -1)
                    {
                      v8 = v29 - 1;
                      if (v19 != v12)
                        goto LABEL_19;
                      goto LABEL_17;
                    }
                  }
                  break;
                }
              }
              if (v8 != v11)
              {
                v13 += 2;
                if (v13 != v14)
                  continue;
              }
              break;
            }
          }
        }
        else
        {
          v12 = 0;
          v13 = *a3;
          v14 = a3[1];
          if (*a3 != v14)
            goto LABEL_14;
        }
LABEL_5:
        ;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v32 = *(_QWORD *)(result + 88);
        v33 = (*(_DWORD *)(result + 112) * *a4);
        v34 = (uint64_t *)(v32 + 8 * v33);
        v35 = *(_DWORD *)(result + 8);
        v36 = (v33 + v35);
        v37 = (uint64_t *)(v32 + 8 * v36);
        if (v35 && *v34 == -1)
        {
          v50 = 8 * v36 - 8 * v33 - 8;
          v51 = 1;
          v52 = v34;
          while (1)
          {
            v38 = v51;
            if (!v50)
              break;
            v34 = v52 + 1;
            v53 = v52[1];
            ++v51;
            v50 -= 8;
            ++v52;
            if (v53 != -1)
              goto LABEL_38;
          }
          v34 = v37;
        }
        else
        {
          v38 = 0;
        }
LABEL_38:
        v39 = *a3;
        v40 = a3[1];
        while (v39 != v40 && v34 != v37)
        {
          v41 = *v39;
          if (*v39 > v38)
          {
            v42 = v34 + 1;
            while (v42 != v37)
            {
              ++v38;
              v43 = *v42++;
              if (v43 != -1 && v41 <= v38)
              {
                v34 = v42 - 1;
                goto LABEL_50;
              }
            }
            break;
          }
LABEL_50:
          if (v41 == v38)
          {
            v45 = (_QWORD *)(*(_QWORD *)(result + 16) + 8 * *v34);
            v46 = (_QWORD *)(a2 + 8 * (v39[1] + 4 * a4[1]));
            v47 = v45[1];
            v48 = v45[2];
            v49 = v45[3];
            *v46 = *v45;
            v46[4] = v47;
            v46[8] = v48;
            v46[12] = v49;
            v38 = v41;
          }
          v39 += 2;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20FB7CFE0(uint64_t a1, uint64_t a2, unsigned int **a3, _DWORD **a4, char *a5)
{
  unsigned int **v7;
  unsigned int **v10;

  v7 = a3;
  v10 = a3 + 27;
  sub_20FB7B7A8(a1 + 7056, a2, a3 + 27, a4[12], a4[13], *a5);
  sub_20FB7BA9C(a1 + 8496, a2, v10, a4[15], a4[16], *a5);
  sub_20FB7BD2C(a1 + 9936, a2, v10, a4[18], a4[19], *a5);
  sub_20FB7BD2C(a1 + 11376, a2, v10, a4[21], a4[22], *a5);
  sub_20FB7B7A8(a1 + 12816, a2, v10, a4[24], a4[25], *a5);
  sub_20FB7B7A8(a1 + 14256, a2, v10, a4[27], a4[28], *a5);
  sub_20FB7B7A8(a1 + 6912, a2, v7 + 24, a4[12], a4[13], *a5);
  sub_20FB7BA9C(a1 + 8352, a2, v7 + 24, a4[15], a4[16], *a5);
  sub_20FB7BD2C(a1 + 9792, a2, v7 + 24, a4[18], a4[19], *a5);
  sub_20FB7BD2C(a1 + 11232, a2, v7 + 24, a4[21], a4[22], *a5);
  sub_20FB7B7A8(a1 + 12672, a2, v7 + 24, a4[24], a4[25], *a5);
  sub_20FB7B7A8(a1 + 14112, a2, v7 + 24, a4[27], a4[28], *a5);
  sub_20FB7C04C(a1 + 6768, a2, v7 + 21, a4[12], a4[13], *a5);
  sub_20FB7C310(a1 + 8208, a2, v7 + 21, a4[15], a4[16], *a5);
  sub_20FB7C594(a1 + 9648, a2, v7 + 21, a4[18], a4[19], *a5);
  sub_20FB7C594(a1 + 11088, a2, v7 + 21, a4[21], a4[22], *a5);
  sub_20FB7C04C(a1 + 12528, a2, v7 + 21, a4[24], a4[25], *a5);
  sub_20FB7C04C(a1 + 13968, a2, v7 + 21, a4[27], a4[28], *a5);
  sub_20FB7C04C(a1 + 6624, a2, v7 + 18, a4[12], a4[13], *a5);
  sub_20FB7C310(a1 + 8064, a2, v7 + 18, a4[15], a4[16], *a5);
  sub_20FB7C594(a1 + 9504, a2, v7 + 18, a4[18], a4[19], *a5);
  sub_20FB7C594(a1 + 10944, a2, v7 + 18, a4[21], a4[22], *a5);
  sub_20FB7C04C(a1 + 12384, a2, v7 + 18, a4[24], a4[25], *a5);
  sub_20FB7C04C(a1 + 13824, a2, v7 + 18, a4[27], a4[28], *a5);
  sub_20FB7C864(a1 + 6480, a2, v7 + 15, a4[12], a4[13], *a5);
  sub_20FB7CAF4(a1 + 7920, a2, v7 + 15, a4[15], a4[16], *a5);
  sub_20FB7CD48(a1 + 9360, a2, v7 + 15, a4[18], a4[19], *a5);
  sub_20FB7CD48(a1 + 10800, a2, v7 + 15, a4[21], a4[22], *a5);
  sub_20FB7C864(a1 + 12240, a2, v7 + 15, a4[24], a4[25], *a5);
  sub_20FB7C864(a1 + 13680, a2, v7 + 15, a4[27], a4[28], *a5);
  v7 += 12;
  sub_20FB7B7A8(a1 + 6336, a2, v7, a4[12], a4[13], *a5);
  sub_20FB7BA9C(a1 + 7776, a2, v7, a4[15], a4[16], *a5);
  sub_20FB7BD2C(a1 + 9216, a2, v7, a4[18], a4[19], *a5);
  sub_20FB7BD2C(a1 + 10656, a2, v7, a4[21], a4[22], *a5);
  sub_20FB7B7A8(a1 + 12096, a2, v7, a4[24], a4[25], *a5);
  return sub_20FB7B7A8(a1 + 13536, a2, v7, a4[27], a4[28], *a5);
}

void sub_20FB7D420(uint64_t a1, unsigned __int32 a2, int a3, float64x2_t *a4, float64x2_t *a5)
{
  float64x2_t *v5;
  uint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int32 *v13;
  char *v14;
  unsigned __int32 v15;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  unsigned __int8 v23;
  int64x2_t *v24;
  int v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  unsigned __int8 v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  size_t v35;
  const char *v36;
  char *v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  char *v42;
  unint64_t v43;
  unsigned __int8 v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t *v49;
  uint64_t *v50;
  size_t v51;
  const char *v52;
  char *v53;
  char *v54;
  unint64_t v55;
  unint64_t v56;
  unsigned __int32 *v57;
  char *v58;
  unsigned __int32 v59;
  __int32 **v60;
  _DWORD *v61;
  _DWORD *v62;
  __int32 *v63;
  __int32 *v64;
  int64x2_t v65;
  float64x2_t v66;
  unsigned __int8 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  unsigned __int8 v72;
  uint64_t v73;
  uint64_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  __int32 *v79;
  __int32 *v80;
  __int32 *v81;
  unsigned __int8 v82;
  uint64_t v83;
  uint64_t i;
  unsigned __int8 v85;
  unsigned int v86;
  void **v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  unsigned __int8 v91;
  const char *v92;
  size_t v93;
  void **v94;
  unint64_t v95;
  const char *v96;
  uint64_t *v97;
  int v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  void **v102;
  uint64_t v103;
  uint64_t v104;
  NSObject *v105;
  size_t v106;
  std::__shared_weak_count_vtbl *v107;
  std::__shared_weak_count *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t *v115;
  void *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  void *v123;
  uint64_t *v124;
  float64_t v125;
  _QWORD *v126;
  int64x2_t v127;
  __int32 v128;
  uint64_t v129;
  __int32 v130;
  float64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  uint64_t *v145;
  float64_t v146;
  _QWORD *v147;
  int64x2_t v148;
  __int32 v149;
  uint64_t v150;
  __int32 v151;
  float64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  unint64_t *v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  char *v169;
  char *v170;
  char *v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  int64x2_t v177;
  int64x2_t *v178;
  int64x2_t v179;
  int64x2_t *v180;
  int64x2_t v181;
  int64x2_t v182;
  __int128 v183;
  int64x2_t v184;
  int64x2_t v185;
  unsigned int v186;
  uint64_t v187;
  uint64_t v188;
  _QWORD *v189;
  int v190;
  int v191;
  char *v192;
  size_t v193;
  uint64_t v194;
  _OWORD *v195;
  __int128 v196;
  __int128 v197;
  uint64_t *v198;
  __n128 v199;
  _BOOL4 v200;
  uint8x8_t v201;
  unsigned __int8 v202;
  int v203;
  unint64_t v204;
  unint64_t v205;
  uint64_t v206;
  size_t v207;
  const char *v208;
  size_t v209;
  char *v210;
  char *v211;
  size_t v212;
  uint64_t v213;
  unsigned __int8 v214;
  const char *v215;
  size_t v216;
  void **v217;
  const char *v218;
  uint64_t *v219;
  int v220;
  uint64_t *v221;
  uint64_t v222;
  uint64_t v223;
  void **v224;
  uint64_t v225;
  uint64_t v226;
  NSObject *v227;
  size_t v228;
  std::__shared_weak_count_vtbl *v229;
  std::__shared_weak_count *v230;
  std::__shared_weak_count *v231;
  unint64_t *p_shared_owners;
  unint64_t v233;
  unint64_t v234;
  _QWORD *v235;
  uint64_t v236;
  uint64_t *v237;
  void *v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  void *v245;
  uint64_t *v246;
  float64_t v247;
  _QWORD *v248;
  int64x2_t v249;
  __int32 v250;
  uint64_t v251;
  __int32 v252;
  float64_t v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  unint64_t *v257;
  unint64_t v258;
  std::__shared_weak_count *v259;
  unint64_t *v260;
  unint64_t v261;
  unint64_t *v262;
  unint64_t v263;
  std::__shared_weak_count *v264;
  unint64_t *v265;
  unint64_t v266;
  uint64_t *v267;
  float64_t v268;
  _QWORD *v269;
  int64x2_t v270;
  __int32 v271;
  uint64_t v272;
  __int32 v273;
  float64_t v274;
  std::__shared_weak_count *v275;
  unint64_t *v276;
  unint64_t v277;
  unint64_t *v278;
  unint64_t v279;
  std::__shared_weak_count *v280;
  unint64_t *v281;
  unint64_t v282;
  unint64_t *v283;
  unint64_t v284;
  std::__shared_weak_count *v285;
  unint64_t *v286;
  unint64_t v287;
  unint64_t *v288;
  unsigned __int8 v289;
  size_t v290;
  const char *v291;
  const char *v292;
  unint64_t *p_p_src;
  uint64_t v294;
  uint64_t v295;
  void **v296;
  uint64_t v297;
  uint64_t v298;
  NSObject *v299;
  size_t v300;
  std::__shared_weak_count_vtbl *v301;
  std::__shared_weak_count *v302;
  std::__shared_weak_count *v303;
  unint64_t *v304;
  unint64_t v305;
  unint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t *v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  std::__shared_weak_count *v314;
  unint64_t *v315;
  unint64_t v316;
  void *v317;
  uint64_t *v318;
  double v319;
  _QWORD *v320;
  __int128 v321;
  int v322;
  const char *v323;
  int v324;
  const char *v325;
  std::__shared_weak_count *v326;
  unint64_t *v327;
  unint64_t v328;
  unint64_t *v329;
  unint64_t v330;
  std::__shared_weak_count *v331;
  unint64_t *v332;
  unint64_t v333;
  unint64_t *v334;
  unint64_t v335;
  std::__shared_weak_count *v336;
  unint64_t *v337;
  unint64_t v338;
  uint64_t *v339;
  double v340;
  _QWORD *v341;
  __int128 v342;
  int v343;
  const char *v344;
  int v345;
  const char *v346;
  std::__shared_weak_count *v347;
  unint64_t *v348;
  unint64_t v349;
  unint64_t *v350;
  unint64_t v351;
  std::__shared_weak_count *v352;
  unint64_t *v353;
  unint64_t v354;
  unint64_t *v355;
  unint64_t v356;
  std::__shared_weak_count *v357;
  unint64_t *v358;
  unint64_t v359;
  std::__shared_weak_count *v360;
  unint64_t *v361;
  unint64_t v362;
  unsigned int v363;
  uint64_t *v364;
  int8x16_t v365;
  int8x16_t v366;
  uint32x4_t v367;
  int64x2_t v368;
  int8x16_t v369;
  _QWORD *v370;
  int v371;
  uint64_t v372;
  unint64_t v373;
  uint64_t v374;
  uint64_t v375;
  _QWORD *v376;
  uint64_t v377;
  unint64_t v378;
  unint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  int v383;
  int v384;
  int v385;
  int v386;
  int v387;
  int v388;
  unsigned int v389;
  int v390;
  int v391;
  int v392;
  unsigned int v393;
  int v394;
  int v395;
  int v396;
  int v397;
  int v398;
  int v399;
  int v400;
  int v401;
  uint64_t v402;
  int v403;
  int v404;
  int v405;
  int v406;
  uint64_t v407;
  int v408;
  unsigned int v409;
  unsigned int v410;
  unsigned int v411;
  uint64_t v412;
  int v413;
  unsigned int v414;
  int v415;
  unsigned int v416;
  uint64_t v417;
  int v418;
  unsigned __int8 v419;
  unsigned __int8 v420;
  unsigned __int8 v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  int v429;
  _QWORD *v430;
  float64x2_t v431;
  float64x2_t v432;
  float64x2_t v434;
  float64x2_t v435;
  void *__src;
  __int128 v437;
  int v438;
  const char *v439;
  int v440;
  const char *v441;
  double v442;
  std::__shared_weak_count *v443;
  uint64_t v444;
  _BYTE v445[32];
  const char *v446;
  int v447;
  int v448;
  const char *v449;
  double v450;
  unint64_t v451;
  int v452;
  int v453;
  void *object[2];
  int64x2_t v455;
  void *__p[2];
  float64x2_t v457;
  int64x2_t v458;
  float64_t v459;
  uint64_t v460;
  int64x2_t v461;
  uint64_t v462;
  float64_t v463;
  int64x2_t v464[2];
  int64x2_t v465;
  float64x2_t v466;
  int64x2_t v467;
  int64x2_t v468;
  int64x2_t v469;
  int64x2_t v470;
  uint64_t *v471;
  unint64_t p_src;
  uint64_t *v473;
  unint64_t v474;
  int v475;
  int v476;
  void **v477;
  unint64_t v478;
  unint64_t v479;
  unsigned int v480;
  int v481;
  unsigned int v482;
  int v483;
  uint64_t v484;

  v5 = a5;
  v8 = a1;
  v484 = *MEMORY[0x24BDAC8D0];
  v9 = *(char **)(a1 + 5864);
  v10 = *(char **)(a1 + 5872);
  if (v10 != v9)
  {
    v11 = (v10 - v9) >> 4;
    do
    {
      v12 = v11 >> 1;
      v13 = (unsigned __int32 *)&v9[16 * (v11 >> 1)];
      v15 = *v13;
      v14 = (char *)(v13 + 4);
      v11 += ~(v11 >> 1);
      if (v15 < a2)
        v9 = v14;
      else
        v11 = v12;
    }
    while (v11);
  }
  if (v9 == v10 || *(_DWORD *)v9 != a2)
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 269, (uint64_t)"var_iter != this->linear_system_.template endVariable<IntrinsicsCalibVariable<Float>>()", 87, (uint64_t)"invalid intrinsics calib iterator.", 34, (void (*)(void **))sub_21023DDB0);
    v18 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68 || byte_254A6DE70)
    {
      v20 = qword_254A6DE40;
      v19 = qword_254A6DE48;
      while (v20 != v19)
      {
        v22 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v20;
        v21 = *(_QWORD *)(v20 + 8);
        v20 += 16;
        v22(v21, "var_iter != this->linear_system_.template endVariable<IntrinsicsCalibVariable<Float>>()", 87, "invalid intrinsics calib iterator.", 34);
      }
    }
    v23 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v23 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      goto LABEL_477;
    v8 = a1;
    qword_254A6DE58(unk_254A6DE60, "var_iter != this->linear_system_.template endVariable<IntrinsicsCalibVariable<Float>>()", 87, "invalid intrinsics calib iterator.", 34);
    v9 = v10;
    v5 = a5;
  }
  v24 = (int64x2_t *)*((_QWORD *)v9 + 1);
  if (!a3)
  {
    v24[9].i8[0] = 0;
    return;
  }
  v25 = v24[1].u8[4];
  v24[1].i8[4] = 1;
  v24[9].i8[0] = 1;
  if (!v25)
  {
    v37 = *(char **)(v8 + 6536);
    v38 = *(char **)(v8 + 6544);
    if (v38 != v37)
    {
      v39 = 0x4EC4EC4EC4EC4EC5 * ((v38 - v37) >> 4);
      do
      {
        v40 = v39 >> 1;
        v41 = (unint64_t *)&v37[208 * (v39 >> 1)];
        v43 = *v41;
        v42 = (char *)(v41 + 26);
        v39 += ~(v39 >> 1);
        if (v43 < a2)
          v37 = v42;
        else
          v39 = v40;
      }
      while (v39);
      if (v38 != v37 && *(_QWORD *)v37 == a2)
      {
        v44 = atomic_load((unsigned __int8 *)&qword_254A6B820);
        if ((v44 & 1) == 0 && __cxa_guard_acquire(&qword_254A6B820))
        {
          v420 = atomic_load((unsigned __int8 *)&qword_254A6DDE0);
          if ((v420 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDE0))
          {
            sub_20E8BFCE4(&qword_254A6DDD8);
            __cxa_guard_release(&qword_254A6DDE0);
          }
          object[0] = (void *)qword_254A6DDD8;
          v464[1].i8[7] = 8;
          strcpy(v464[0].i8, "cv3d.vio");
          sub_20E8C4068((uint64_t **)object, (uint64_t)v464, &qword_254A6B818);
          if (v464[1].i8[7] < 0)
            operator delete((void *)v464[0].i64[0]);
          __cxa_guard_release(&qword_254A6B820);
        }
        v471 = (uint64_t *)qword_254A6B818;
        if (**(int **)(qword_254A6B818 + 56) > 2)
          return;
        v45 = *(unsigned __int8 *)(qword_254A6B818 + 72);
        v46 = sub_20E8C31DC(qword_254A6B818, "OSLogSurrogateAppender", 1, 0);
        v47 = v46;
        if (!v45 && v46 == 0)
          return;
        *(_QWORD *)v445 = &v471;
        *(std::chrono::steady_clock::time_point *)&v445[8] = std::chrono::steady_clock::now();
        *(std::chrono::system_clock::time_point *)&v445[16] = std::chrono::system_clock::now();
        *(_DWORD *)&v445[24] = 2;
        v446 = "unknown file";
        v447 = 297;
        v450 = 0.0;
        v451 = 0;
        *(double *)&v449 = COERCE_DOUBLE("unknown function");
        v49 = v471;
        v50 = v471 + 2;
        if (*((char *)v471 + 39) < 0)
        {
          v52 = (const char *)v471[2];
          v51 = v471[3];
        }
        else
        {
          v51 = *((unsigned __int8 *)v471 + 39);
          v52 = (const char *)(**(_QWORD **)v445 + 16);
        }
        v214 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v214 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)v464);
          if (v464[1].i8[8])
          {
            *(int64x2_t *)byte_254A4A4F8 = v464[0];
            *(_QWORD *)&byte_254A4A4F8[16] = v464[1].i64[0];
          }
          else
          {
            byte_254A4A4F8[23] = 14;
            strcpy(byte_254A4A4F8, "com.apple.cv3d");
          }
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        if (byte_254A4A4F8[23] >= 0)
          v215 = byte_254A4A4F8;
        else
          v215 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v216 = byte_254A4A4F8[23];
        else
          v216 = *(_QWORD *)&byte_254A4A4F8[8];
        object[0] = os_log_create(v215, v52);
        v217 = &object[1];
        if (v216 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v216 >= 0x17)
        {
          v218 = v52;
          v219 = v49;
          v220 = v45;
          v221 = v50;
          v222 = (v216 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v216 | 7) != 0x17)
            v222 = v216 | 7;
          v223 = v222 + 1;
          v217 = (void **)operator new(v222 + 1);
          v455.i64[0] = v216;
          v455.i64[1] = v223 | 0x8000000000000000;
          object[1] = v217;
          v50 = v221;
          v45 = v220;
          v49 = v219;
          v52 = v218;
        }
        else
        {
          v455.i8[15] = v216;
          if (!v216)
          {
LABEL_254:
            *((_BYTE *)v217 + v216) = 0;
            LOBYTE(__p[0]) = 1;
            v224 = &__p[1];
            if (v51 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v51 >= 0x17)
            {
              v225 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v51 | 7) != 0x17)
                v225 = v51 | 7;
              v226 = v225 + 1;
              v224 = (void **)operator new(v225 + 1);
              *(_QWORD *)&v457.f64[0] = v51;
              *(_QWORD *)&v457.f64[1] = v226 | 0x8000000000000000;
              __p[1] = v224;
            }
            else
            {
              HIBYTE(v457.f64[1]) = v51;
              if (!v51)
              {
LABEL_262:
                *((_BYTE *)v224 + v51) = 0;
                v458.i8[0] = 1;
                v227 = object[0];
                if (SHIBYTE(v457.f64[1]) < 0)
                  operator delete(__p[1]);
                if (LOBYTE(__p[0]) && v455.i8[15] < 0)
                  operator delete(object[1]);
                if (object[0])
                  os_release(object[0]);
                if (v47 && *(_QWORD *)(v47 + 24))
                {
                  v228 = _os_log_pack_size();
                  v229 = (std::__shared_weak_count_vtbl *)operator new(v228, (std::align_val_t)8uLL);
                  v230 = (std::__shared_weak_count *)operator new();
                  v231 = v230;
                  v230->__shared_owners_ = 0;
                  p_shared_owners = (unint64_t *)&v230->__shared_owners_;
                  v230->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                  v230->__shared_weak_owners_ = 0;
                  v230[1].__vftable = v229;
                  do
                    v233 = __ldxr(p_shared_owners);
                  while (__stxr(v233 + 1, p_shared_owners));
                  do
                    v234 = __ldaxr(p_shared_owners);
                  while (__stlxr(v234 - 1, p_shared_owners));
                  if (!v234)
                  {
                    ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
                    std::__shared_weak_count::__release_weak(v231);
                  }
                  *(_WORD *)_os_log_pack_fill() = 0;
                  v235 = (_QWORD *)operator new();
                  v236 = *((unsigned __int8 *)v49 + 39);
                  if ((v236 & 0x80u) == 0)
                    v237 = v50;
                  else
                    v237 = (uint64_t *)v49[2];
                  if ((v236 & 0x80u) != 0)
                    v236 = v49[3];
                  *v235 = v229;
                  v235[1] = v229;
                  v235[2] = v231;
                  v235[3] = 0;
                  v235[4] = 0;
                  v235[5] = v237;
                  v235[6] = v236;
                  *((_BYTE *)v235 + 56) = 2;
                  object[0] = v235;
                  (*(void (**)(_QWORD, void **))(**(_QWORD **)(v47 + 24) + 40))(*(_QWORD *)(v47 + 24), object);
                  v238 = object[0];
                  object[0] = 0;
                  if (v238)
                  {
                    v239 = (std::__shared_weak_count *)*((_QWORD *)v238 + 4);
                    if (v239)
                    {
                      v240 = (unint64_t *)&v239->__shared_owners_;
                      do
                        v241 = __ldaxr(v240);
                      while (__stlxr(v241 - 1, v240));
                      if (!v241)
                      {
                        ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
                        std::__shared_weak_count::__release_weak(v239);
                      }
                    }
                    v242 = (std::__shared_weak_count *)*((_QWORD *)v238 + 2);
                    if (v242)
                    {
                      v243 = (unint64_t *)&v242->__shared_owners_;
                      do
                        v244 = __ldaxr(v243);
                      while (__stlxr(v244 - 1, v243));
                      if (!v244)
                      {
                        ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
                        std::__shared_weak_count::__release_weak(v242);
                      }
                    }
                    MEMORY[0x212BC6398](v238, 0x10F0C40B62ED6C6);
                  }
                }
                else
                {
                  os_log_type_enabled(v227, OS_LOG_TYPE_DEBUG);
                  v464[0].i16[0] = 0;
                  v245 = (void *)_os_log_send_and_compose_impl();
                  if (v245)
                    free(v245);
                }
                if (v45)
                {
                  sub_20E8C003C((uint64_t)v445, "Attempting to add existing intrinsics calib. prior factor");
                  v246 = *(uint64_t **)v445;
                  if (!*(_QWORD *)v445 || (v247 = v450, v450 == 0.0))
                  {
LABEL_350:
                    v166 = (std::__shared_weak_count *)v451;
                    if (!v451)
                      return;
                    v288 = (unint64_t *)(v451 + 8);
                    do
                      v168 = __ldaxr(v288);
                    while (__stlxr(v168 - 1, v288));
                    goto LABEL_201;
                  }
                  v248 = (_QWORD *)(**(_QWORD **)v445 + 16);
                  if (*(char *)(**(_QWORD **)v445 + 39) < 0)
                    v248 = (_QWORD *)*v248;
                  v249 = *(int64x2_t *)&v445[8];
                  v250 = *(_DWORD *)&v445[24];
                  v251 = (uint64_t)v446;
                  v252 = v447;
                  v253 = *(double *)&v449;
                  v254 = (std::__shared_weak_count *)v451;
                  if (v451)
                  {
                    v255 = (unint64_t *)(v451 + 8);
                    do
                      v256 = __ldxr(v255);
                    while (__stxr(v256 + 1, v255));
                  }
                  v464[0].i64[0] = (uint64_t)v248;
                  *(int64x2_t *)((char *)v464 + 8) = v249;
                  v464[1].i32[2] = v250;
                  v465.i64[0] = v251;
                  v465.i32[2] = v252;
                  v466.f64[0] = v253;
                  v466.f64[1] = v247;
                  v467.i64[0] = (uint64_t)v254;
                  if (v254)
                  {
                    v257 = (unint64_t *)&v254->__shared_owners_;
                    do
                      v258 = __ldxr(v257);
                    while (__stxr(v258 + 1, v257));
                  }
                  v259 = v254;
                  if (v250 >= **(_DWORD **)(*v246 + 56))
                  {
                    sub_20E8C3FC4(*v246, (uint64_t)v464);
                    v259 = (std::__shared_weak_count *)v467.i64[0];
                  }
                  if (v259)
                  {
                    v260 = (unint64_t *)&v259->__shared_owners_;
                    do
                      v261 = __ldaxr(v260);
                    while (__stlxr(v261 - 1, v260));
                    if (!v261)
                    {
                      ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
                      std::__shared_weak_count::__release_weak(v259);
                    }
                  }
                  if (v254)
                  {
                    v262 = (unint64_t *)&v254->__shared_owners_;
                    do
                      v263 = __ldaxr(v262);
                    while (__stlxr(v263 - 1, v262));
                    if (!v263)
                    {
                      ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
                      std::__shared_weak_count::__release_weak(v254);
                    }
                  }
                  v264 = (std::__shared_weak_count *)v451;
                  v450 = 0.0;
                  v451 = 0;
                  if (v264)
                  {
                    v265 = (unint64_t *)&v264->__shared_owners_;
                    do
                      v266 = __ldaxr(v265);
                    while (__stlxr(v266 - 1, v265));
                    if (!v266)
                    {
                      ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
                      std::__shared_weak_count::__release_weak(v264);
                    }
                  }
                }
                v267 = *(uint64_t **)v445;
                if (*(_QWORD *)v445)
                {
                  v268 = v450;
                  if (v450 != 0.0)
                  {
                    v269 = (_QWORD *)(**(_QWORD **)v445 + 16);
                    if (*(char *)(**(_QWORD **)v445 + 39) < 0)
                      v269 = (_QWORD *)*v269;
                    v270 = *(int64x2_t *)&v445[8];
                    v271 = *(_DWORD *)&v445[24];
                    v272 = (uint64_t)v446;
                    v273 = v447;
                    v274 = *(double *)&v449;
                    v275 = (std::__shared_weak_count *)v451;
                    if (v451)
                    {
                      v276 = (unint64_t *)(v451 + 8);
                      do
                        v277 = __ldxr(v276);
                      while (__stxr(v277 + 1, v276));
                    }
                    v464[0].i64[0] = (uint64_t)v269;
                    *(int64x2_t *)((char *)v464 + 8) = v270;
                    v464[1].i32[2] = v271;
                    v465.i64[0] = v272;
                    v465.i32[2] = v273;
                    v466.f64[0] = v274;
                    v466.f64[1] = v268;
                    v467.i64[0] = (uint64_t)v275;
                    if (v275)
                    {
                      v278 = (unint64_t *)&v275->__shared_owners_;
                      do
                        v279 = __ldxr(v278);
                      while (__stxr(v279 + 1, v278));
                    }
                    v280 = v275;
                    if (v271 >= **(_DWORD **)(*v267 + 56))
                    {
                      sub_20E8C3FC4(*v267, (uint64_t)v464);
                      v280 = (std::__shared_weak_count *)v467.i64[0];
                    }
                    if (v280)
                    {
                      v281 = (unint64_t *)&v280->__shared_owners_;
                      do
                        v282 = __ldaxr(v281);
                      while (__stlxr(v282 - 1, v281));
                      if (!v282)
                      {
                        ((void (*)(std::__shared_weak_count *))v280->__on_zero_shared)(v280);
                        std::__shared_weak_count::__release_weak(v280);
                      }
                    }
                    if (v275)
                    {
                      v283 = (unint64_t *)&v275->__shared_owners_;
                      do
                        v284 = __ldaxr(v283);
                      while (__stlxr(v284 - 1, v283));
                      if (!v284)
                      {
                        ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
                        std::__shared_weak_count::__release_weak(v275);
                      }
                    }
                    v285 = (std::__shared_weak_count *)v451;
                    v450 = 0.0;
                    v451 = 0;
                    if (v285)
                    {
                      v286 = (unint64_t *)&v285->__shared_owners_;
                      do
                        v287 = __ldaxr(v286);
                      while (__stlxr(v287 - 1, v286));
                      if (!v287)
                      {
                        ((void (*)(std::__shared_weak_count *))v285->__on_zero_shared)(v285);
                        std::__shared_weak_count::__release_weak(v285);
                      }
                    }
                  }
                }
                goto LABEL_350;
              }
            }
            memmove(v224, v52, v51);
            goto LABEL_262;
          }
        }
        memmove(v217, v215, v216);
        goto LABEL_254;
      }
    }
    v464[0].i64[0] = a2;
    v65 = v24[3];
    v464[1] = v24[2];
    v465 = v65;
    v66 = a4[1];
    v466 = *a4;
    v467 = (int64x2_t)v66;
    v468.i8[0] = 1;
    if (vminnmvq_f64(vminnmq_f64(v466, v66)) > 0.0)
    {
LABEL_69:
      LODWORD(object[0]) = a2;
      if ((sub_20FB80AC8((int64x2_t *)(v8 + 5184), (__int128 *)v464[0].i8, (unsigned int *)object, 0, 0) & 1) != 0)
      {
        *(_BYTE *)(v8 + 7868) = 0;
        *(_DWORD *)(v8 + 7864) = 0;
      }
      goto LABEL_19;
    }
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOPriorFactor.hpp", 564, (uint64_t)"prior_inverse_sigma->min() > 0", 30, (uint64_t)"The prior variance cannot be smaller than 0", 43, (void (*)(void **))sub_21023DDB0);
    v67 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v67 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68 || byte_254A6DE70)
    {
      v69 = qword_254A6DE40;
      v68 = qword_254A6DE48;
      while (v69 != v68)
      {
        v71 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v69;
        v70 = *(_QWORD *)(v69 + 8);
        v69 += 16;
        v71(v70, "prior_inverse_sigma->min() > 0", 30, "The prior variance cannot be smaller than 0", 43);
      }
    }
    v72 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v72 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (byte_254A6DE68)
    {
      qword_254A6DE58(unk_254A6DE60, "prior_inverse_sigma->min() > 0", 30, "The prior variance cannot be smaller than 0", 43);
      goto LABEL_69;
    }
LABEL_477:
    abort();
  }
LABEL_19:
  v26 = vmulq_f64(v5[1], v5[1]);
  v27 = vmulq_f64(*v5, *v5);
  v28 = (float64x2_t)vdupq_n_s64(0x3CB0000000000000uLL);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vcgtq_f64(v28, v27), (int32x4_t)vcgtq_f64(v28, v26)))) & 1) == 0)
  {
    v53 = *(char **)(v8 + 5864);
    v54 = *(char **)(v8 + 5872);
    if (v54 != v53)
    {
      v55 = (v54 - v53) >> 4;
      do
      {
        v56 = v55 >> 1;
        v57 = (unsigned __int32 *)&v53[16 * (v55 >> 1)];
        v59 = *v57;
        v58 = (char *)(v57 + 4);
        v55 += ~(v55 >> 1);
        if (v59 < a2)
          v53 = v58;
        else
          v55 = v56;
      }
      while (v55);
    }
    if (v53 == v54 || *(_DWORD *)v53 != a2)
      return;
    *(_QWORD *)(v8 + 47608) = *(_QWORD *)(v8 + 47600);
    v60 = (__int32 **)(v8 + 40728);
    *(_QWORD *)(v8 + 47632) = *(_QWORD *)(v8 + 47624);
    *(_QWORD *)(v8 + 47656) = *(_QWORD *)(v8 + 47648);
    *(_QWORD *)(v8 + 47680) = *(_QWORD *)(v8 + 47672);
    *(_QWORD *)(v8 + 47704) = *(_QWORD *)(v8 + 47696);
    *(_QWORD *)(v8 + 47728) = *(_QWORD *)(v8 + 47720);
    *(_QWORD *)(v8 + 47752) = *(_QWORD *)(v8 + 47744);
    v61 = *(_DWORD **)(v8 + 47784);
    *(_QWORD *)(v8 + 47800) = *(_QWORD *)(v8 + 47792);
    *(_QWORD *)(v8 + 47824) = *(_QWORD *)(v8 + 47816);
    v62 = *(_DWORD **)(v8 + 47768);
    *(_QWORD *)(v8 + 47776) = v62;
    if (v61 == v62)
    {
      v431 = v27;
      v434 = v26;
      if (v62)
      {
        *(_QWORD *)(v8 + 47776) = v62;
        operator delete(v62);
        *(_QWORD *)(v8 + 47768) = 0;
        *(_QWORD *)(v8 + 47776) = 0;
        *(_QWORD *)(v8 + 47784) = 0;
      }
      v62 = operator new(4uLL);
      *(_QWORD *)(v8 + 47768) = v62;
      *(_QWORD *)(v8 + 47776) = v62;
      *(_QWORD *)(v8 + 47784) = v62 + 1;
      v27 = v431;
      v26 = v434;
    }
    *v62 = a2;
    *(_QWORD *)(v8 + 47776) = v62 + 1;
    v63 = *v60;
    v64 = *(__int32 **)(v8 + 40736);
    if (*v60 != v64)
    {
      while (*v63 != a2)
      {
        if (++v63 == v64)
          return;
      }
    }
    if (v63 == v64)
      return;
    v432 = v27;
    v435 = v26;
    sub_20F8F2BC0(v8 + 47600, v8 + 40560, (uint64_t)dword_2103B9910, v8 + 47840);
    LOBYTE(object[0]) = 0;
    v73 = v8 + 48080;
    v74 = v8 + 25360;
    memset(v464, 0, sizeof(v464));
    v465 = 0u;
    v466 = 0u;
    v467 = 0u;
    v468 = 0u;
    v469 = 0u;
    v470 = 0u;
    sub_20FB7B368(v8 + 25360, (uint64_t)v464, (unsigned int **)(v8 + 47840), (_DWORD **)(v8 + 47840), (char *)object);
    *(_QWORD *)&v75.f64[0] = vdupq_laneq_s64(v467, 1).u64[0];
    *(_QWORD *)&v75.f64[1] = v469.i64[1];
    v464[1] = vzip1q_s64(v467, v469);
    v466 = v75;
    v426 = v464[0].i64[0];
    v428 = v468.i64[0];
    v423 = v465.i64[1];
    v425 = v470.i64[1];
    v468 = vzip1q_s64(v468, v470);
    v464[0] = vzip1q_s64(v464[0], v465);
    object[1] = (void *)v464[0].i64[1];
    v455 = v464[1];
    v458 = v467;
    v460 = v468.i64[1];
    v461 = v469;
    v462 = v470.i64[0];
    __p[0] = (void *)v465.i64[0];
    v457 = v75;
    *(_QWORD *)&v75.f64[0] = v464[0].i64[0];
    *(_QWORD *)&v76.f64[0] = v468.i64[0];
    *(_QWORD *)&v75.f64[1] = v465.i64[1];
    *(_QWORD *)&v76.f64[1] = v470.i64[1];
    v77 = vaddq_f64(v432, v75);
    __p[1] = *(void **)&v77.f64[1];
    object[0] = *(void **)&v77.f64[0];
    v78 = vaddq_f64(v435, v76);
    v463 = v78.f64[1];
    v459 = v78.f64[0];
    sub_20FA5A44C((_QWORD *)(v8 + 25360), (void **)(v8 + 48080));
    v79 = *(__int32 **)(v8 + 40736);
    v80 = wmemchr(*v60, a2, v79 - *v60);
    if (v80)
      v81 = v80;
    else
      v81 = v79;
    if (v81 == *(__int32 **)(v8 + 40736))
    {
      sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 535, (uint64_t)"prior_var_iter != variable_ids.end()", 36, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
      v82 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
      if ((v82 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
      {
        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DE78);
      }
      if (!byte_254A6DE68 || byte_254A6DE70)
      {
        v83 = qword_254A6DE40;
        for (i = qword_254A6DE48; v83 != i; v83 += 16)
          (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v83)(*(_QWORD *)(v83 + 8), "prior_var_iter != variable_ids.end()", 36, "", 0);
      }
      v85 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
      if ((v85 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
      {
        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DE78);
      }
      if (!byte_254A6DE68)
        abort();
      v74 = v8 + 25360;
      qword_254A6DE58(unk_254A6DE60, "prior_var_iter != variable_ids.end()", 36, "", 0);
    }
    v430 = (_QWORD *)v8;
    v86 = (((_DWORD)v81 - *(_DWORD *)v60) & 0xFFFFFFFC) + *(_DWORD *)(v8 + 25348);
    v87 = (void **)(v8 + 48104);
    v88 = *(unsigned int *)(v8 + 48096);
    v89 = *(_QWORD *)v73;
    if (*(_QWORD *)(v73 + 40) == (v88 | 0x400000000))
    {
      v90 = (char *)*v87;
    }
    else
    {
      v90 = (char *)*v87;
      if ((void *)v89 == *v87)
      {
        v171 = (char *)operator new(8 * (4 * v88), (std::align_val_t)0x20uLL);
        v172 = v171;
        if ((_DWORD)v88)
        {
          v173 = 8 * v88;
          memmove(v171, (const void *)(v89 + 8 * v86 * v88), 8 * v88);
          memmove(&v172[8 * v88], (const void *)(v89 + 8 * (v88 + v86 * (_DWORD)v88)), 8 * v88);
          memmove(&v172[v173 + v173], (const void *)(v89 + 8 * (v86 + 2) * v88), 8 * v88);
          memmove(&v172[v173 + v173 + v173], (const void *)(v89 + 8 * (v86 + 3) * v88), 8 * v88);
        }
        *(_QWORD *)(v73 + 24) = v172;
        *(_QWORD *)(v73 + 32) = (4 * v88);
        *(_DWORD *)(v73 + 40) = v88;
        *(_DWORD *)(v73 + 44) = 4;
        if (!v89)
          goto LABEL_215;
        goto LABEL_214;
      }
      *(_DWORD *)(v73 + 40) = v88;
      *(_DWORD *)(v73 + 44) = 4;
      if (*(_QWORD *)(v73 + 32) < (unint64_t)(4 * v88))
      {
        if (v90)
          MEMORY[0x212BC6368](v90, 0x1000C8000313F17);
        *(_QWORD *)(v73 + 24) = 0;
        *(_QWORD *)(v73 + 32) = 4 * v88;
        v90 = (char *)operator new(32 * v88, (std::align_val_t)0x20uLL);
        *v87 = v90;
      }
    }
    if ((char *)v89 != v90)
    {
      if ((_DWORD)v88)
      {
        memmove(v90, (const void *)(v89 + 8 * v86 * v88), 8 * v88);
        v169 = &v90[8 * v88];
        memmove(v169, (const void *)(v89 + 8 * (v88 + v86 * (_DWORD)v88)), 8 * v88);
        v170 = &v169[8 * v88];
        memmove(v170, (const void *)(v89 + 8 * (v86 + 2) * v88), 8 * v88);
        memmove(&v170[8 * v88], (const void *)(v89 + 8 * (v86 + 3) * v88), 8 * v88);
      }
      goto LABEL_215;
    }
    v209 = (8 * (*(_DWORD *)(v73 + 44) * *(_DWORD *)(v73 + 40)) + 31) & 0xFFFFFFFE0;
    v210 = (char *)operator new(v209, (std::align_val_t)0x20uLL);
    v211 = v210;
    v212 = v209 >> 3;
    if ((_DWORD)v88)
    {
      v213 = 8 * v88;
      memmove(v210, (const void *)(v89 + 8 * v86 * v88), 8 * v88);
      memmove(&v211[8 * v88], (const void *)(v89 + 8 * (v88 + v86 * (_DWORD)v88)), 8 * v88);
      memmove(&v211[v213 + v213], (const void *)(v89 + 8 * (v86 + 2) * v88), 8 * v88);
      memmove(&v211[v213 + v213 + v213], (const void *)(v89 + 8 * (v86 + 3) * v88), 8 * v88);
    }
    *(_QWORD *)(v73 + 24) = v211;
    *(_QWORD *)(v73 + 32) = v212;
    if (!v89)
    {
LABEL_215:
      v174 = *(unsigned int *)(v73 + 40);
      v175 = *(_QWORD *)(v73 + 24) + 8 * v86;
      v176 = v175 + 8 * v174;
      v177 = *(int64x2_t *)v176;
      v178 = (int64x2_t *)(v175 + 16 * v174);
      v179 = *v178;
      v180 = (int64x2_t *)(v175 + 24 * v174);
      v182 = *v180;
      v181 = v180[1];
      *(_QWORD *)&v183 = vdupq_laneq_s64(*v178, 1).u64[0];
      *((_QWORD *)&v183 + 1) = v180->i64[1];
      v184 = vzip1q_s64(v178[1], v181);
      v185 = vzip1q_s64(*v178, *v180);
      *(int64x2_t *)v175 = vzip1q_s64(*(int64x2_t *)v175, *(int64x2_t *)v176);
      *(int64x2_t *)(v175 + 16) = v185;
      *(int64x2_t *)v176 = v177;
      *(_OWORD *)(v176 + 16) = v183;
      *v178 = v179;
      v178[1] = v184;
      *v180 = v182;
      v180[1] = v181;
      LODWORD(v175) = *(_DWORD *)(v73 + 40);
      v186 = v175 - v86 - 4;
      LODWORD(v176) = *(_DWORD *)(v73 + 16);
      v187 = *(_QWORD *)v73;
      *(_DWORD *)v445 = 4;
      *(_DWORD *)&v445[4] = v186;
      *(_DWORD *)&v445[8] = v176;
      *(_QWORD *)&v445[16] = v187 + 8 * (v86 + (_DWORD)v176 * (v86 + 4));
      *(_DWORD *)&v445[24] = v86 + v176 * (v86 + 4);
      v188 = *(_QWORD *)(v73 + 24);
      v471 = (uint64_t *)(v186 | 0x400000000);
      LODWORD(p_src) = v175;
      v473 = (uint64_t *)(v188 + 8 * (v86 + 4));
      LODWORD(v474) = v86 + 4;
      if (v187 == v188)
      {
        *(_QWORD *)&v437 = 4 * v186;
        v189 = v430;
        __src = operator new(8 * v437, (std::align_val_t)0x20uLL);
        *((_QWORD *)&v437 + 1) = v186 | 0x400000000;
        sub_20F208630((int64x2_t *)&__src, (uint64_t)v445);
        if (DWORD2(v437))
        {
          v190 = HIDWORD(v437);
          if (HIDWORD(v437))
          {
            v191 = 0;
            v192 = (char *)__src;
            v193 = 8 * DWORD2(v437);
            v194 = 8 * SDWORD2(v437);
            do
            {
              memmove(&v473[(v474 + p_src * v191++) - v474], v192, v193);
              v192 += v194;
            }
            while (v190 != v191);
          }
        }
        if (__src)
          MEMORY[0x212BC6368](__src, 0x1000C8000313F17);
      }
      else
      {
        sub_20F208E50((uint64_t)&v471, (uint64_t)v445);
        v189 = v430;
      }
      sub_20E8BE4D4(v445);
      __src = (void *)(v73 + 24);
      *(_QWORD *)&v437 = v445;
      v444 = v73 + 24;
      p_src = (unint64_t)&__src;
      v473 = &v444;
      v474 = 0x3FF0000000000000;
      sub_20FB81B48(v73, (uint64_t)&v471);
      *(_QWORD *)&v445[8] = 4;
      v195 = operator new(0x20uLL, (std::align_val_t)0x20uLL);
      *(_QWORD *)v445 = v195;
      *(_QWORD *)&v196 = v426;
      *((_QWORD *)&v196 + 1) = v423;
      *(_DWORD *)&v445[16] = 4;
      *(_QWORD *)&v197 = v428;
      *((_QWORD *)&v197 + 1) = v425;
      *v195 = v196;
      v195[1] = v197;
      p_src = 4;
      v198 = (uint64_t *)operator new(0x20uLL, (std::align_val_t)0x20uLL);
      v471 = v198;
      LODWORD(v473) = 4;
      v199.n128_u64[1] = *(_QWORD *)&v435.f64[1];
      *(float64x2_t *)v198 = v432;
      *((float64x2_t *)v198 + 1) = v435;
      v199.n128_u64[0] = v189[260];
      v200 = sub_20FC8C504((uint64_t)v445, (double **)&v471, v73 + 48, v199);
      if (v471)
        MEMORY[0x212BC6368](v471, 0x1000C8000313F17);
      if (*(_QWORD *)v445)
        MEMORY[0x212BC6368](*(_QWORD *)v445, 0x1000C8000313F17);
      if (!v200)
        goto LABEL_469;
      v202 = atomic_load((unsigned __int8 *)&qword_254A6B820);
      if ((v202 & 1) == 0 && __cxa_guard_acquire(&qword_254A6B820))
      {
        v421 = atomic_load((unsigned __int8 *)&qword_254A6DDE0);
        if ((v421 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDE0))
        {
          sub_20E8BFCE4(&qword_254A6DDD8);
          __cxa_guard_release(&qword_254A6DDE0);
        }
        v471 = (uint64_t *)qword_254A6DDD8;
        v445[23] = 8;
        strcpy(v445, "cv3d.vio");
        sub_20E8C4068(&v471, (uint64_t)v445, &qword_254A6B818);
        if ((v445[23] & 0x80000000) != 0)
          operator delete(*(void **)v445);
        __cxa_guard_release(&qword_254A6B820);
        v189 = v430;
      }
      v444 = qword_254A6B818;
      if (**(int **)(qword_254A6B818 + 56) > 3
        || (v203 = *(unsigned __int8 *)(qword_254A6B818 + 72),
            v204 = sub_20E8C31DC(qword_254A6B818, "OSLogSurrogateAppender", 1, 0),
            v205 = v204,
            !v203)
        && !v204)
      {
LABEL_468:
        v363 = *(_DWORD *)(v73 + 16) + 1;
        v364 = (uint64_t *)(*(_QWORD *)v73 + 8 * v363 * v86);
        v365.i64[0] = v364[2 * v363];
        v365.i64[1] = v364[3 * v363];
        v366.i64[0] = *v364;
        v366.i64[1] = v364[v363];
        v201.i32[0] = **(_DWORD **)(v73 + 48);
        v367 = vmovl_u16((uint16x4_t)vceqz_s16((int16x4_t)*(_OWORD *)&vmovl_u8(v201)));
        v368.i64[0] = v367.u32[2];
        v368.i64[1] = v367.u32[3];
        v369 = (int8x16_t)vshrq_n_s64(vshlq_n_s64(v368, 0x38uLL), 0x38uLL);
        v368.i64[0] = v367.u32[0];
        v368.i64[1] = v367.u32[1];
        *(int8x16_t *)v445 = vbslq_s8((int8x16_t)vshrq_n_s64(vshlq_n_s64(v368, 0x38uLL), 0x38uLL), v366, (int8x16_t)v432);
        *(int8x16_t *)&v445[16] = vbslq_s8(v369, v365, (int8x16_t)v435);
        sub_20FB81834(v86, (__int128 *)v445, (uint64_t *)v73);
LABEL_469:
        v370 = v189 + 4970;
        v371 = *(_DWORD *)(v73 + 16);
        v372 = (*(_DWORD *)(v73 + 20) * v371);
        if ((_DWORD)v372)
        {
          v373 = 0;
          v374 = *(_QWORD *)v73;
          v375 = 8 * v372;
          v376 = *(_QWORD **)v73;
          do
          {
            v380 = 0;
            if (v373 <= HIDWORD(v373))
              v380 = *(_QWORD *)(v374 + 8 * (v373 + v371 * HIDWORD(v373)));
            *v376++ = v380;
            v377 = (v373 + 1);
            v378 = v373 & 0xFFFFFFFF00000000;
            v379 = v378 | v377;
            v373 = v378 + 0x100000000;
            if (v371 > (int)v377)
              v373 = v379;
            v375 -= 8;
          }
          while (v375);
        }
        v381 = *v370;
        v382 = v189[4971];
        v383 = 6 * *(_DWORD *)(*v370 + 8);
        *(_DWORD *)v445 = 0;
        *(_DWORD *)&v445[4] = v383;
        v384 = 9 * *(_DWORD *)(v189[4980] + 8);
        *(_DWORD *)&v445[8] = v383;
        *(_DWORD *)&v445[12] = v384;
        v385 = v384 + v383;
        v386 = 6 * *(_DWORD *)(v189[4990] + 8);
        *(_DWORD *)&v445[16] = v385;
        *(_DWORD *)&v445[20] = v386;
        v387 = v386 + v385;
        v388 = 6 * *(_DWORD *)(v189[5000] + 8);
        *(_DWORD *)&v445[24] = v387;
        *(_DWORD *)&v445[28] = v388;
        v389 = v388 + v387;
        v390 = 3 * *(_DWORD *)(v189[5010] + 8);
        v446 = (const char *)__PAIR64__(v390, v389);
        v391 = v390 + v389;
        v392 = *(_DWORD *)(v189[5020] + 8);
        v447 = v391;
        v448 = v392;
        v393 = v392 + v391;
        v394 = 3 * *(_DWORD *)(v189[5030] + 8);
        *(double *)&v449 = COERCE_DOUBLE(__PAIR64__(v394, v393));
        v395 = 4 * *(_DWORD *)(v189[5040] + 8);
        LODWORD(v450) = v394 + v393;
        HIDWORD(v450) = v395;
        v396 = v395 + v394 + v393;
        v397 = 4 * *(_DWORD *)(v189[5050] + 8);
        v451 = __PAIR64__(v397, v396);
        v398 = 3 * *(_DWORD *)(v189[5060] + 8);
        v452 = v397 + v396;
        v453 = v398;
        v399 = 6 * *(_DWORD *)(v381 + 12);
        LODWORD(v471) = 0;
        HIDWORD(v471) = v399;
        v400 = 9 * *(_DWORD *)(v382 + 12);
        p_src = __PAIR64__(v400, v399);
        v401 = v400 + v399;
        v402 = v189[4973];
        v403 = 6 * *(_DWORD *)(v189[4972] + 12);
        v473 = (uint64_t *)__PAIR64__(v403, v401);
        v404 = v403 + v401;
        v405 = 6 * *(_DWORD *)(v402 + 12);
        v474 = __PAIR64__(v405, v404);
        v406 = v405 + v404;
        v407 = v189[4975];
        v408 = 3 * *(_DWORD *)(v189[4974] + 12);
        v475 = v406;
        v476 = v408;
        v409 = v408 + v406;
        v410 = *(_DWORD *)(v407 + 12);
        v477 = (void **)__PAIR64__(v410, v409);
        v411 = v410 + v409;
        v412 = v189[4977];
        v413 = 3 * *(_DWORD *)(v189[4976] + 12);
        v478 = __PAIR64__(v413, v411);
        v414 = v413 + v411;
        v415 = 4 * *(_DWORD *)(v412 + 12);
        v479 = __PAIR64__(v415, v414);
        v416 = v415 + v414;
        v417 = v189[4979];
        v418 = 4 * *(_DWORD *)(v189[4978] + 12);
        v480 = v416;
        v481 = v418;
        LODWORD(v417) = 3 * *(_DWORD *)(v417 + 12);
        v482 = v418 + v416;
        v483 = v417;
        sub_20FB82144(v74, (uint64_t *)v73, (unsigned int *)v445, (unsigned int *)&v471);
        return;
      }
      v429 = v203;
      __src = &v444;
      *(std::chrono::steady_clock::time_point *)&v437 = std::chrono::steady_clock::now();
      *((std::chrono::system_clock::time_point *)&v437 + 1) = std::chrono::system_clock::now();
      v438 = 3;
      v439 = "unknown file";
      v440 = 570;
      v442 = 0.0;
      v443 = 0;
      *(double *)&v441 = COERCE_DOUBLE("unknown function");
      v206 = *(_QWORD *)__src;
      v427 = *(_QWORD *)__src;
      if (*(char *)(*(_QWORD *)__src + 39) < 0)
      {
        v208 = *(const char **)(v206 + 16);
        v207 = *(_QWORD *)(v206 + 24);
      }
      else
      {
        v207 = *(unsigned __int8 *)(*(_QWORD *)__src + 39);
        v208 = (const char *)(*(_QWORD *)__src + 16);
      }
      v424 = *(_QWORD *)__src + 16;
      v422 = v74;
      v289 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v289 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)v445);
        if (v445[24])
        {
          *(_OWORD *)byte_254A4A4F8 = *(_OWORD *)v445;
          *(_QWORD *)&byte_254A4A4F8[16] = *(_QWORD *)&v445[16];
        }
        else
        {
          byte_254A4A4F8[23] = 14;
          strcpy(byte_254A4A4F8, "com.apple.cv3d");
        }
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v290 = byte_254A4A4F8[23];
      else
        v290 = *(_QWORD *)&byte_254A4A4F8[8];
      if (byte_254A4A4F8[23] >= 0)
        v291 = byte_254A4A4F8;
      else
        v291 = *(const char **)byte_254A4A4F8;
      v292 = v208;
      v471 = (uint64_t *)os_log_create(v291, v208);
      p_p_src = &p_src;
      if (v290 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v290 >= 0x17)
      {
        v294 = (v290 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v290 | 7) != 0x17)
          v294 = v290 | 7;
        v295 = v294 + 1;
        p_p_src = (unint64_t *)operator new(v294 + 1);
        v473 = (uint64_t *)v290;
        v474 = v295 | 0x8000000000000000;
        p_src = (unint64_t)p_p_src;
      }
      else
      {
        HIBYTE(v474) = v290;
        if (!v290)
        {
LABEL_370:
          *((_BYTE *)p_p_src + v290) = 0;
          LOBYTE(v475) = 1;
          v296 = (void **)&v477;
          if (v207 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          v189 = v430;
          if (v207 >= 0x17)
          {
            v297 = (v207 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v207 | 7) != 0x17)
              v297 = v207 | 7;
            v298 = v297 + 1;
            v296 = (void **)operator new(v297 + 1);
            v478 = v207;
            v479 = v298 | 0x8000000000000000;
            v477 = v296;
          }
          else
          {
            HIBYTE(v479) = v207;
            if (!v207)
            {
LABEL_378:
              *((_BYTE *)v296 + v207) = 0;
              LOBYTE(v480) = 1;
              v299 = v471;
              if (SHIBYTE(v479) < 0)
                operator delete(v477);
              v74 = v422;
              if ((_BYTE)v475 && SHIBYTE(v474) < 0)
                operator delete((void *)p_src);
              if (v471)
                os_release(v471);
              if (v205 && *(_QWORD *)(v205 + 24))
              {
                v300 = _os_log_pack_size();
                v301 = (std::__shared_weak_count_vtbl *)operator new(v300, (std::align_val_t)8uLL);
                v302 = (std::__shared_weak_count *)operator new();
                v303 = v302;
                v302->__shared_owners_ = 0;
                v304 = (unint64_t *)&v302->__shared_owners_;
                v302->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v302->__shared_weak_owners_ = 0;
                v302[1].__vftable = v301;
                do
                  v305 = __ldxr(v304);
                while (__stxr(v305 + 1, v304));
                do
                  v306 = __ldaxr(v304);
                while (__stlxr(v306 - 1, v304));
                if (!v306)
                {
                  ((void (*)(std::__shared_weak_count *))v302->__on_zero_shared)(v302);
                  std::__shared_weak_count::__release_weak(v303);
                }
                *(_WORD *)_os_log_pack_fill() = 0;
                v307 = operator new();
                v308 = *(unsigned __int8 *)(v427 + 39);
                v309 = v424;
                if ((v308 & 0x80u) != 0)
                {
                  v309 = *(_QWORD *)(v427 + 16);
                  v308 = *(_QWORD *)(v427 + 24);
                }
                *(_QWORD *)v307 = v301;
                *(_QWORD *)(v307 + 8) = v301;
                *(_QWORD *)(v307 + 16) = v303;
                *(_QWORD *)(v307 + 24) = 0;
                *(_QWORD *)(v307 + 32) = 0;
                *(_QWORD *)(v307 + 40) = v309;
                *(_QWORD *)(v307 + 48) = v308;
                *(_BYTE *)(v307 + 56) = 1;
                v471 = (uint64_t *)v307;
                (*(void (**)(_QWORD, uint64_t **))(**(_QWORD **)(v205 + 24) + 40))(*(_QWORD *)(v205 + 24), &v471);
                v74 = v422;
                v310 = v471;
                v471 = 0;
                if (v310)
                {
                  v311 = (std::__shared_weak_count *)v310[4];
                  if (v311)
                  {
                    v312 = (unint64_t *)&v311->__shared_owners_;
                    do
                      v313 = __ldaxr(v312);
                    while (__stlxr(v313 - 1, v312));
                    if (!v313)
                    {
                      ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
                      std::__shared_weak_count::__release_weak(v311);
                    }
                  }
                  v314 = (std::__shared_weak_count *)v310[2];
                  if (v314)
                  {
                    v315 = (unint64_t *)&v314->__shared_owners_;
                    do
                      v316 = __ldaxr(v315);
                    while (__stlxr(v316 - 1, v315));
                    if (!v316)
                    {
                      ((void (*)(std::__shared_weak_count *))v314->__on_zero_shared)(v314);
                      std::__shared_weak_count::__release_weak(v314);
                    }
                  }
                  MEMORY[0x212BC6398](v310, 0x10F0C40B62ED6C6);
                }
              }
              else
              {
                os_log_type_enabled(v299, OS_LOG_TYPE_INFO);
                *(_WORD *)v445 = 0;
                v317 = (void *)_os_log_send_and_compose_impl();
                if (v317)
                  free(v317);
              }
              if (v429)
              {
                sub_20E8C003C((uint64_t)&__src, "Special case to handle Err. Propagation order of magnitude disparity.");
                v318 = (uint64_t *)__src;
                if (!__src || (v319 = v442, v442 == 0.0))
                {
LABEL_463:
                  v360 = v443;
                  if (v443)
                  {
                    v361 = (unint64_t *)&v443->__shared_owners_;
                    do
                      v362 = __ldaxr(v361);
                    while (__stlxr(v362 - 1, v361));
                    if (!v362)
                    {
                      ((void (*)(std::__shared_weak_count *))v360->__on_zero_shared)(v360);
                      std::__shared_weak_count::__release_weak(v360);
                    }
                  }
                  goto LABEL_468;
                }
                v320 = (_QWORD *)(*(_QWORD *)__src + 16);
                if (*(char *)(*(_QWORD *)__src + 39) < 0)
                  v320 = (_QWORD *)*v320;
                v321 = v437;
                v322 = v438;
                v323 = v439;
                v324 = v440;
                v325 = v441;
                v326 = v443;
                if (v443)
                {
                  v327 = (unint64_t *)&v443->__shared_owners_;
                  do
                    v328 = __ldxr(v327);
                  while (__stxr(v328 + 1, v327));
                }
                *(_QWORD *)v445 = v320;
                *(_OWORD *)&v445[8] = v321;
                *(_DWORD *)&v445[24] = v322;
                v446 = v323;
                v447 = v324;
                v449 = v325;
                v450 = v319;
                v451 = (unint64_t)v326;
                if (v326)
                {
                  v329 = (unint64_t *)&v326->__shared_owners_;
                  do
                    v330 = __ldxr(v329);
                  while (__stxr(v330 + 1, v329));
                }
                v331 = v326;
                if (v322 >= **(_DWORD **)(*v318 + 56))
                {
                  sub_20E8C3FC4(*v318, (uint64_t)v445);
                  v331 = (std::__shared_weak_count *)v451;
                }
                if (v331)
                {
                  v332 = (unint64_t *)&v331->__shared_owners_;
                  do
                    v333 = __ldaxr(v332);
                  while (__stlxr(v333 - 1, v332));
                  if (!v333)
                  {
                    ((void (*)(std::__shared_weak_count *))v331->__on_zero_shared)(v331);
                    std::__shared_weak_count::__release_weak(v331);
                  }
                }
                if (v326)
                {
                  v334 = (unint64_t *)&v326->__shared_owners_;
                  do
                    v335 = __ldaxr(v334);
                  while (__stlxr(v335 - 1, v334));
                  if (!v335)
                  {
                    ((void (*)(std::__shared_weak_count *))v326->__on_zero_shared)(v326);
                    std::__shared_weak_count::__release_weak(v326);
                  }
                }
                v336 = v443;
                v442 = 0.0;
                v443 = 0;
                if (v336)
                {
                  v337 = (unint64_t *)&v336->__shared_owners_;
                  do
                    v338 = __ldaxr(v337);
                  while (__stlxr(v338 - 1, v337));
                  if (!v338)
                  {
                    ((void (*)(std::__shared_weak_count *))v336->__on_zero_shared)(v336);
                    std::__shared_weak_count::__release_weak(v336);
                  }
                }
              }
              v339 = (uint64_t *)__src;
              if (__src)
              {
                v340 = v442;
                if (v442 != 0.0)
                {
                  v341 = (_QWORD *)(*(_QWORD *)__src + 16);
                  if (*(char *)(*(_QWORD *)__src + 39) < 0)
                    v341 = (_QWORD *)*v341;
                  v342 = v437;
                  v343 = v438;
                  v344 = v439;
                  v345 = v440;
                  v346 = v441;
                  v347 = v443;
                  if (v443)
                  {
                    v348 = (unint64_t *)&v443->__shared_owners_;
                    do
                      v349 = __ldxr(v348);
                    while (__stxr(v349 + 1, v348));
                  }
                  *(_QWORD *)v445 = v341;
                  *(_OWORD *)&v445[8] = v342;
                  *(_DWORD *)&v445[24] = v343;
                  v446 = v344;
                  v447 = v345;
                  v449 = v346;
                  v450 = v340;
                  v451 = (unint64_t)v347;
                  if (v347)
                  {
                    v350 = (unint64_t *)&v347->__shared_owners_;
                    do
                      v351 = __ldxr(v350);
                    while (__stxr(v351 + 1, v350));
                  }
                  v352 = v347;
                  if (v343 >= **(_DWORD **)(*v339 + 56))
                  {
                    sub_20E8C3FC4(*v339, (uint64_t)v445);
                    v352 = (std::__shared_weak_count *)v451;
                  }
                  if (v352)
                  {
                    v353 = (unint64_t *)&v352->__shared_owners_;
                    do
                      v354 = __ldaxr(v353);
                    while (__stlxr(v354 - 1, v353));
                    if (!v354)
                    {
                      ((void (*)(std::__shared_weak_count *))v352->__on_zero_shared)(v352);
                      std::__shared_weak_count::__release_weak(v352);
                    }
                  }
                  if (v347)
                  {
                    v355 = (unint64_t *)&v347->__shared_owners_;
                    do
                      v356 = __ldaxr(v355);
                    while (__stlxr(v356 - 1, v355));
                    if (!v356)
                    {
                      ((void (*)(std::__shared_weak_count *))v347->__on_zero_shared)(v347);
                      std::__shared_weak_count::__release_weak(v347);
                    }
                  }
                  v357 = v443;
                  v442 = 0.0;
                  v443 = 0;
                  if (v357)
                  {
                    v358 = (unint64_t *)&v357->__shared_owners_;
                    do
                      v359 = __ldaxr(v358);
                    while (__stlxr(v359 - 1, v358));
                    if (!v359)
                    {
                      ((void (*)(std::__shared_weak_count *))v357->__on_zero_shared)(v357);
                      std::__shared_weak_count::__release_weak(v357);
                    }
                  }
                }
              }
              goto LABEL_463;
            }
          }
          memmove(v296, v292, v207);
          goto LABEL_378;
        }
      }
      memmove(p_p_src, v291, v290);
      goto LABEL_370;
    }
LABEL_214:
    MEMORY[0x212BC6368](v89, 0x1000C8000313F17);
    goto LABEL_215;
  }
  v29 = atomic_load((unsigned __int8 *)&qword_254A6B820);
  if ((v29 & 1) == 0 && __cxa_guard_acquire(&qword_254A6B820))
  {
    v419 = atomic_load((unsigned __int8 *)&qword_254A6DDE0);
    if ((v419 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDE0))
    {
      sub_20E8BFCE4(&qword_254A6DDD8);
      __cxa_guard_release(&qword_254A6DDE0);
    }
    object[0] = (void *)qword_254A6DDD8;
    v464[1].i8[7] = 8;
    strcpy(v464[0].i8, "cv3d.vio");
    sub_20E8C4068((uint64_t **)object, (uint64_t)v464, &qword_254A6B818);
    if (v464[1].i8[7] < 0)
      operator delete((void *)v464[0].i64[0]);
    __cxa_guard_release(&qword_254A6B820);
  }
  v471 = (uint64_t *)qword_254A6B818;
  if (**(int **)(qword_254A6B818 + 56) <= 2)
  {
    v30 = *(unsigned __int8 *)(qword_254A6B818 + 72);
    v31 = sub_20E8C31DC(qword_254A6B818, "OSLogSurrogateAppender", 1, 0);
    v32 = v31;
    if (v30 || v31)
    {
      *(_QWORD *)v445 = &v471;
      *(std::chrono::steady_clock::time_point *)&v445[8] = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&v445[16] = std::chrono::system_clock::now();
      *(_DWORD *)&v445[24] = 2;
      v446 = "unknown file";
      v447 = 476;
      v450 = 0.0;
      v451 = 0;
      *(double *)&v449 = COERCE_DOUBLE("unknown function");
      v33 = v471;
      v34 = v471 + 2;
      if (*((char *)v471 + 39) < 0)
      {
        v36 = (const char *)v471[2];
        v35 = v471[3];
      }
      else
      {
        v35 = *((unsigned __int8 *)v471 + 39);
        v36 = (const char *)(**(_QWORD **)v445 + 16);
      }
      v91 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v91 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)v464);
        if (v464[1].i8[8])
        {
          *(int64x2_t *)byte_254A4A4F8 = v464[0];
          *(_QWORD *)&byte_254A4A4F8[16] = v464[1].i64[0];
        }
        else
        {
          byte_254A4A4F8[23] = 14;
          strcpy(byte_254A4A4F8, "com.apple.cv3d");
        }
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v92 = byte_254A4A4F8;
      else
        v92 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v93 = byte_254A4A4F8[23];
      else
        v93 = *(_QWORD *)&byte_254A4A4F8[8];
      object[0] = os_log_create(v92, v36);
      v94 = &object[1];
      if (v93 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v93 >= 0x17)
      {
        v95 = v32;
        v96 = v36;
        v97 = v33;
        v98 = v30;
        v99 = v34;
        v100 = (v93 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v93 | 7) != 0x17)
          v100 = v93 | 7;
        v101 = v100 + 1;
        v94 = (void **)operator new(v100 + 1);
        v455.i64[0] = v93;
        v455.i64[1] = v101 | 0x8000000000000000;
        object[1] = v94;
        v34 = v99;
        v30 = v98;
        v33 = v97;
        v36 = v96;
        v32 = v95;
      }
      else
      {
        v455.i8[15] = v93;
        if (!v93)
        {
LABEL_102:
          *((_BYTE *)v94 + v93) = 0;
          LOBYTE(__p[0]) = 1;
          v102 = &__p[1];
          if (v35 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v35 >= 0x17)
          {
            v103 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v35 | 7) != 0x17)
              v103 = v35 | 7;
            v104 = v103 + 1;
            v102 = (void **)operator new(v103 + 1);
            *(_QWORD *)&v457.f64[0] = v35;
            *(_QWORD *)&v457.f64[1] = v104 | 0x8000000000000000;
            __p[1] = v102;
          }
          else
          {
            HIBYTE(v457.f64[1]) = v35;
            if (!v35)
            {
LABEL_110:
              *((_BYTE *)v102 + v35) = 0;
              v458.i8[0] = 1;
              v105 = object[0];
              if (SHIBYTE(v457.f64[1]) < 0)
                operator delete(__p[1]);
              if (LOBYTE(__p[0]) && v455.i8[15] < 0)
                operator delete(object[1]);
              if (object[0])
                os_release(object[0]);
              if (v32 && *(_QWORD *)(v32 + 24))
              {
                v106 = _os_log_pack_size();
                v107 = (std::__shared_weak_count_vtbl *)operator new(v106, (std::align_val_t)8uLL);
                v108 = (std::__shared_weak_count *)operator new();
                v109 = v108;
                v108->__shared_owners_ = 0;
                v110 = (unint64_t *)&v108->__shared_owners_;
                v108->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v108->__shared_weak_owners_ = 0;
                v108[1].__vftable = v107;
                do
                  v111 = __ldxr(v110);
                while (__stxr(v111 + 1, v110));
                do
                  v112 = __ldaxr(v110);
                while (__stlxr(v112 - 1, v110));
                if (!v112)
                {
                  ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                  std::__shared_weak_count::__release_weak(v109);
                }
                *(_WORD *)_os_log_pack_fill() = 0;
                v113 = (_QWORD *)operator new();
                v114 = *((unsigned __int8 *)v33 + 39);
                if ((v114 & 0x80u) == 0)
                  v115 = v34;
                else
                  v115 = (uint64_t *)v33[2];
                if ((v114 & 0x80u) != 0)
                  v114 = v33[3];
                *v113 = v107;
                v113[1] = v107;
                v113[2] = v109;
                v113[3] = 0;
                v113[4] = 0;
                v113[5] = v115;
                v113[6] = v114;
                *((_BYTE *)v113 + 56) = 2;
                object[0] = v113;
                (*(void (**)(_QWORD, void **))(**(_QWORD **)(v32 + 24) + 40))(*(_QWORD *)(v32 + 24), object);
                v116 = object[0];
                object[0] = 0;
                if (v116)
                {
                  v117 = (std::__shared_weak_count *)*((_QWORD *)v116 + 4);
                  if (v117)
                  {
                    v118 = (unint64_t *)&v117->__shared_owners_;
                    do
                      v119 = __ldaxr(v118);
                    while (__stlxr(v119 - 1, v118));
                    if (!v119)
                    {
                      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                      std::__shared_weak_count::__release_weak(v117);
                    }
                  }
                  v120 = (std::__shared_weak_count *)*((_QWORD *)v116 + 2);
                  if (v120)
                  {
                    v121 = (unint64_t *)&v120->__shared_owners_;
                    do
                      v122 = __ldaxr(v121);
                    while (__stlxr(v122 - 1, v121));
                    if (!v122)
                    {
                      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
                      std::__shared_weak_count::__release_weak(v120);
                    }
                  }
                  MEMORY[0x212BC6398](v116, 0x10F0C40B62ED6C6);
                }
              }
              else
              {
                os_log_type_enabled(v105, OS_LOG_TYPE_DEBUG);
                v464[0].i16[0] = 0;
                v123 = (void *)_os_log_send_and_compose_impl();
                if (v123)
                  free(v123);
              }
              if (v30)
              {
                sub_20E8C003C((uint64_t)v445, "Limit the amount of noise used in error propagation; inverse noise should be GT 0.");
                v124 = *(uint64_t **)v445;
                if (!*(_QWORD *)v445 || (v125 = v450, v450 == 0.0))
                {
LABEL_198:
                  v166 = (std::__shared_weak_count *)v451;
                  if (!v451)
                    return;
                  v167 = (unint64_t *)(v451 + 8);
                  do
                    v168 = __ldaxr(v167);
                  while (__stlxr(v168 - 1, v167));
LABEL_201:
                  if (!v168)
                  {
                    ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
                    std::__shared_weak_count::__release_weak(v166);
                  }
                  return;
                }
                v126 = (_QWORD *)(**(_QWORD **)v445 + 16);
                if (*(char *)(**(_QWORD **)v445 + 39) < 0)
                  v126 = (_QWORD *)*v126;
                v127 = *(int64x2_t *)&v445[8];
                v128 = *(_DWORD *)&v445[24];
                v129 = (uint64_t)v446;
                v130 = v447;
                v131 = *(double *)&v449;
                v132 = (std::__shared_weak_count *)v451;
                if (v451)
                {
                  v133 = (unint64_t *)(v451 + 8);
                  do
                    v134 = __ldxr(v133);
                  while (__stxr(v134 + 1, v133));
                }
                v464[0].i64[0] = (uint64_t)v126;
                *(int64x2_t *)((char *)v464 + 8) = v127;
                v464[1].i32[2] = v128;
                v465.i64[0] = v129;
                v465.i32[2] = v130;
                v466.f64[0] = v131;
                v466.f64[1] = v125;
                v467.i64[0] = (uint64_t)v132;
                if (v132)
                {
                  v135 = (unint64_t *)&v132->__shared_owners_;
                  do
                    v136 = __ldxr(v135);
                  while (__stxr(v136 + 1, v135));
                }
                v137 = v132;
                if (v128 >= **(_DWORD **)(*v124 + 56))
                {
                  sub_20E8C3FC4(*v124, (uint64_t)v464);
                  v137 = (std::__shared_weak_count *)v467.i64[0];
                }
                if (v137)
                {
                  v138 = (unint64_t *)&v137->__shared_owners_;
                  do
                    v139 = __ldaxr(v138);
                  while (__stlxr(v139 - 1, v138));
                  if (!v139)
                  {
                    ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
                    std::__shared_weak_count::__release_weak(v137);
                  }
                }
                if (v132)
                {
                  v140 = (unint64_t *)&v132->__shared_owners_;
                  do
                    v141 = __ldaxr(v140);
                  while (__stlxr(v141 - 1, v140));
                  if (!v141)
                  {
                    ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
                    std::__shared_weak_count::__release_weak(v132);
                  }
                }
                v142 = (std::__shared_weak_count *)v451;
                v450 = 0.0;
                v451 = 0;
                if (v142)
                {
                  v143 = (unint64_t *)&v142->__shared_owners_;
                  do
                    v144 = __ldaxr(v143);
                  while (__stlxr(v144 - 1, v143));
                  if (!v144)
                  {
                    ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
                    std::__shared_weak_count::__release_weak(v142);
                  }
                }
              }
              v145 = *(uint64_t **)v445;
              if (*(_QWORD *)v445)
              {
                v146 = v450;
                if (v450 != 0.0)
                {
                  v147 = (_QWORD *)(**(_QWORD **)v445 + 16);
                  if (*(char *)(**(_QWORD **)v445 + 39) < 0)
                    v147 = (_QWORD *)*v147;
                  v148 = *(int64x2_t *)&v445[8];
                  v149 = *(_DWORD *)&v445[24];
                  v150 = (uint64_t)v446;
                  v151 = v447;
                  v152 = *(double *)&v449;
                  v153 = (std::__shared_weak_count *)v451;
                  if (v451)
                  {
                    v154 = (unint64_t *)(v451 + 8);
                    do
                      v155 = __ldxr(v154);
                    while (__stxr(v155 + 1, v154));
                  }
                  v464[0].i64[0] = (uint64_t)v147;
                  *(int64x2_t *)((char *)v464 + 8) = v148;
                  v464[1].i32[2] = v149;
                  v465.i64[0] = v150;
                  v465.i32[2] = v151;
                  v466.f64[0] = v152;
                  v466.f64[1] = v146;
                  v467.i64[0] = (uint64_t)v153;
                  if (v153)
                  {
                    v156 = (unint64_t *)&v153->__shared_owners_;
                    do
                      v157 = __ldxr(v156);
                    while (__stxr(v157 + 1, v156));
                  }
                  v158 = v153;
                  if (v149 >= **(_DWORD **)(*v145 + 56))
                  {
                    sub_20E8C3FC4(*v145, (uint64_t)v464);
                    v158 = (std::__shared_weak_count *)v467.i64[0];
                  }
                  if (v158)
                  {
                    v159 = (unint64_t *)&v158->__shared_owners_;
                    do
                      v160 = __ldaxr(v159);
                    while (__stlxr(v160 - 1, v159));
                    if (!v160)
                    {
                      ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
                      std::__shared_weak_count::__release_weak(v158);
                    }
                  }
                  if (v153)
                  {
                    v161 = (unint64_t *)&v153->__shared_owners_;
                    do
                      v162 = __ldaxr(v161);
                    while (__stlxr(v162 - 1, v161));
                    if (!v162)
                    {
                      ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
                      std::__shared_weak_count::__release_weak(v153);
                    }
                  }
                  v163 = (std::__shared_weak_count *)v451;
                  v450 = 0.0;
                  v451 = 0;
                  if (v163)
                  {
                    v164 = (unint64_t *)&v163->__shared_owners_;
                    do
                      v165 = __ldaxr(v164);
                    while (__stlxr(v165 - 1, v164));
                    if (!v165)
                    {
                      ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
                      std::__shared_weak_count::__release_weak(v163);
                    }
                  }
                }
              }
              goto LABEL_198;
            }
          }
          memmove(v102, v36, v35);
          goto LABEL_110;
        }
      }
      memmove(v94, v92, v93);
      goto LABEL_102;
    }
  }
}

void sub_20FB7FDB8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A6DDE0);
  __cxa_guard_abort(&qword_254A6B820);
  _Unwind_Resume(a1);
}

void sub_20FB7FDE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t *a27,__int128 a28,int a29,uint64_t a30,int a31,uint64_t a32,uint64_t a33,std::__shared_weak_count *a34,uint64_t a35,void *__p,__int128 a37,int a38,uint64_t a39,int a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  _QWORD *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;

  __cxa_guard_abort(&qword_254A4A510);
  if (a27 && a33)
  {
    v44 = (_QWORD *)(*a27 + 16);
    if (*(char *)(*a27 + 39) < 0)
      v44 = (_QWORD *)*v44;
    if (a34)
    {
      p_shared_owners = (unint64_t *)&a34->__shared_owners_;
      do
        v46 = __ldxr(p_shared_owners);
      while (__stxr(v46 + 1, p_shared_owners));
    }
    __p = v44;
    a37 = a28;
    a38 = a29;
    a39 = a30;
    a40 = a31;
    a41 = a32;
    a42 = a33;
    a43 = (uint64_t)a34;
    if (a34)
    {
      v47 = (unint64_t *)&a34->__shared_owners_;
      do
        v48 = __ldxr(v47);
      while (__stxr(v48 + 1, v47));
    }
    v49 = a34;
    if (a29 >= **(_DWORD **)(*a27 + 56))
    {
      sub_20E8C3FC4(*a27, (uint64_t)&__p);
      v49 = (std::__shared_weak_count *)a43;
    }
    if (v49)
    {
      v50 = (unint64_t *)&v49->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    if (a34)
    {
      v52 = (unint64_t *)&a34->__shared_owners_;
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))a34->__on_zero_shared)(a34);
        std::__shared_weak_count::__release_weak(a34);
      }
    }
    v54 = a34;
    a34 = 0;
    if (v54)
    {
      v55 = (unint64_t *)&v54->__shared_owners_;
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
  }
  if (a34)
  {
    v57 = (unint64_t *)&a34->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))a34->__on_zero_shared)(a34);
      std::__shared_weak_count::__release_weak(a34);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20FB80AC8(int64x2_t *a1, __int128 *a2, unsigned int *a3, uint64_t a4, std::__shared_weak_count *a5)
{
  unint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int *v27;
  _DWORD *v28;
  unsigned int v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  char *v60;
  char *v61;
  __int128 v62;
  __int128 v63;
  char *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  _OWORD *v68;
  _OWORD *v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  char *v80;
  _BYTE *v81;
  int v82;
  int v83;
  _BYTE *v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  char *v98;
  char *v99;
  __int128 v100;
  __int128 v101;
  char *v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  __int128 v109;
  __int128 v110;
  char *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  __int128 v116;
  char *v117;
  __int128 v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  char v127;
  int v128;
  char *v129;
  uint64_t v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  char v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  _OWORD v144[2];
  char v145;
  uint64_t v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  unint64_t v151;
  char v152;
  __int128 v153;
  char v154;
  __int128 v155;
  __int128 v156;
  __int8 *v157;
  unint64_t v158;
  char v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  _OWORD v165[2];
  uint64_t v166;

  v166 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)a2;
  v9 = (char *)a1[84].i64[1];
  v10 = (char *)a1[85].i64[0];
  if (v9 == v10)
  {
    v10 = (char *)a1[84].i64[1];
  }
  else if (*((_QWORD *)v10 - 26) >= v8)
  {
    v11 = 0x4EC4EC4EC4EC4EC5 * ((v10 - v9) >> 4);
    do
    {
      v12 = v11 >> 1;
      v13 = &v9[208 * (v11 >> 1)];
      v15 = *(_QWORD *)v13;
      v14 = v13 + 208;
      v11 += ~(v11 >> 1);
      if (v15 < v8)
        v9 = v14;
      else
        v11 = v12;
    }
    while (v11);
    if (v9 != v10)
    {
      v10 = v9;
      if (*(_QWORD *)v9 == v8)
        return 0;
    }
  }
  if (a5)
  {
    p_shared_owners = (unint64_t *)&a5->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  v131 = *a2;
  v132 = a2[1];
  v133 = a2[2];
  LOBYTE(v134) = 0;
  v136 = 0;
  if (*((_BYTE *)a2 + 80))
  {
    v134 = a2[3];
    v135 = a2[4];
    v136 = 1;
  }
  *(_QWORD *)&v141 = a4;
  *((_QWORD *)&v141 + 1) = a5;
  if (a5)
  {
    v19 = (unint64_t *)&a5->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))a5->__on_zero_shared)(a5);
      std::__shared_weak_count::__release_weak(a5);
    }
  }
  v22 = *a3;
  v23 = a1[42].i64[1];
  v24 = a1[43].i64[0];
  if (v24 != v23)
  {
    v25 = (v24 - v23) >> 4;
    do
    {
      v26 = v25 >> 1;
      v27 = (unsigned int *)(v23 + 16 * (v25 >> 1));
      v29 = *v27;
      v28 = v27 + 4;
      v25 += ~(v25 >> 1);
      if (v29 < v22)
        v23 = (uint64_t)v28;
      else
        v25 = v26;
    }
    while (v25);
  }
  if (v23 == v24 || *(_DWORD *)v23 != v22)
  {
    v16 = 0;
  }
  else
  {
    v30 = *(_QWORD *)(v23 + 8);
    ++*(_DWORD *)(v30 + 8);
    if (*(_BYTE *)(v30 + 20))
    {
      v142 = v132;
      v143 = v133;
      LOBYTE(v144[0]) = 0;
      v145 = 0;
      if (v136)
      {
        v144[0] = v134;
        v144[1] = v135;
        v145 = 1;
      }
      v147 = v137;
      v148 = v138;
      v149 = v139;
      v150 = v140;
      v146 = v30;
      v151 = 0xBFF0000000000000;
      v152 = 0;
      v31 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
      v153 = v141;
      *((_QWORD *)&v141 + 1) = 0;
      v154 = 0;
      v32 = (char *)a1[85].i64[0];
      if (v32 == v10 || *(_QWORD *)v10 != v8)
      {
        a2 = &v142;
        v33 = a1[84].i64[1];
        v34 = (uint64_t)&v10[-v33];
        v129 = (char *)v33;
        v130 = (uint64_t)&v10[-v33] / 208;
        v35 = (char *)(v33 + 208 * v130);
        v36 = a1[85].u64[1];
        if ((unint64_t)v32 >= v36)
        {
          v37 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)&v32[-v33] >> 4) + 1;
          if (v37 > 0x13B13B13B13B13BLL)
            sub_20E867F44();
          if (0x9D89D89D89D89D8ALL * ((uint64_t)(v36 - v33) >> 4) > v37)
            v37 = 0x9D89D89D89D89D8ALL * ((uint64_t)(v36 - v33) >> 4);
          if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v36 - v33) >> 4)) >= 0x9D89D89D89D89DLL)
            v38 = 0x13B13B13B13B13BLL;
          else
            v38 = v37;
          v157 = &a1[85].i8[8];
          if (v38)
          {
            if (v38 > 0x13B13B13B13B13BLL)
              sub_20E877A38();
            v39 = (char *)operator new(208 * v38);
            v40 = v130;
            a2 = &v142;
          }
          else
          {
            v39 = 0;
            v40 = (uint64_t)&v10[-v33] / 208;
          }
          v50 = &v39[208 * v40];
          *(_QWORD *)&v155 = v39;
          *((_QWORD *)&v155 + 1) = v50;
          *(_QWORD *)&v156 = v50;
          *((_QWORD *)&v156 + 1) = &v39[208 * v38];
          if (v40 == v38)
          {
            if (v34 < 1)
            {
              if (v129 == v10)
                v86 = 1;
              else
                v86 = 2 * v40;
              if (v86 > 0x13B13B13B13B13BLL)
                sub_20E877A38();
              v87 = (char *)operator new(208 * v86);
              v50 = &v87[208 * (v86 >> 2)];
              *(_QWORD *)&v155 = v87;
              *((_QWORD *)&v155 + 1) = v50;
              *(_QWORD *)&v156 = v50;
              *((_QWORD *)&v156 + 1) = &v87[208 * v86];
              if (v39)
                operator delete(v39);
              a2 = &v142;
            }
            else
            {
              v51 = v40 + 2;
              if (v40 >= -1)
                v51 = v40 + 1;
              v50 -= 208 * (v51 >> 1);
              *((_QWORD *)&v155 + 1) = v50;
              *(_QWORD *)&v156 = v50;
            }
          }
          *(_QWORD *)v50 = v8;
          *(_OWORD *)(v50 + 8) = v131;
          v88 = v143;
          *(_OWORD *)(v50 + 24) = v142;
          *(_OWORD *)(v50 + 40) = v88;
          v50[56] = 0;
          v50[88] = 0;
          if (v145)
          {
            v89 = v144[1];
            *(_OWORD *)(v50 + 56) = v144[0];
            *(_OWORD *)(v50 + 72) = v89;
            v50[88] = 1;
          }
          *((_QWORD *)v50 + 12) = v146;
          v90 = v148;
          *(_OWORD *)(v50 + 104) = v147;
          *(_OWORD *)(v50 + 120) = v90;
          v91 = v149;
          *(_OWORD *)(v50 + 152) = v150;
          *(_OWORD *)(v50 + 136) = v91;
          *((_QWORD *)v50 + 21) = v151;
          v50[176] = v152;
          *(_OWORD *)(v50 + 184) = v153;
          v153 = 0uLL;
          v50[200] = v154;
          v92 = (uint64_t)(v50 + 208);
          *(_QWORD *)&v156 = v50 + 208;
          v93 = (char *)a1[84].i64[1];
          if (v93 != v35)
          {
            v94 = 0;
            do
            {
              v98 = &v50[v94];
              v99 = &v35[v94];
              *((_QWORD *)v98 - 26) = *(_QWORD *)&v35[v94 - 208];
              *(_OWORD *)(v98 - 200) = *(_OWORD *)&v35[v94 - 200];
              v100 = *(_OWORD *)&v35[v94 - 184];
              *(_OWORD *)(v98 - 168) = *(_OWORD *)&v35[v94 - 168];
              *(_OWORD *)(v98 - 184) = v100;
              v50[v94 - 152] = 0;
              *(v98 - 120) = 0;
              if (v35[v94 - 120])
              {
                v101 = *(_OWORD *)(v99 - 136);
                *(_OWORD *)&v50[v94 - 152] = *(_OWORD *)(v99 - 152);
                *(_OWORD *)&v50[v94 - 136] = v101;
                *(v98 - 120) = 1;
              }
              *((_QWORD *)v98 - 14) = *((_QWORD *)v99 - 14);
              v95 = *(_OWORD *)(v99 - 104);
              *(_OWORD *)(v98 - 88) = *(_OWORD *)(v99 - 88);
              *(_OWORD *)(v98 - 104) = v95;
              v96 = *(_OWORD *)(v99 - 72);
              *(_OWORD *)(v98 - 56) = *(_OWORD *)(v99 - 56);
              *(_OWORD *)(v98 - 72) = v96;
              v97 = *((_QWORD *)v99 - 5);
              *(v98 - 32) = *(v99 - 32);
              *((_QWORD *)v98 - 5) = v97;
              *(_OWORD *)(v98 - 24) = *(_OWORD *)(v99 - 24);
              *((_QWORD *)v99 - 3) = 0;
              *((_QWORD *)v99 - 2) = 0;
              *(v98 - 8) = *(v99 - 8);
              v94 -= 208;
            }
            while (&v35[v94] != v93);
            v92 = v156;
            v50 += v94;
          }
          v102 = (char *)a1[85].i64[0];
          if (v102 != v35)
          {
            v103 = 0;
            do
            {
              v107 = &v35[v103];
              v108 = v92 + v103;
              *(_QWORD *)v108 = *(_QWORD *)&v35[v103];
              *(_OWORD *)(v108 + 8) = *(_OWORD *)&v35[v103 + 8];
              v109 = *(_OWORD *)&v35[v103 + 24];
              *(_OWORD *)(v108 + 40) = *(_OWORD *)&v35[v103 + 40];
              *(_OWORD *)(v108 + 24) = v109;
              *(_BYTE *)(v92 + v103 + 56) = 0;
              *(_BYTE *)(v108 + 88) = 0;
              if (v35[v103 + 88])
              {
                v110 = *(_OWORD *)(v107 + 72);
                *(_OWORD *)(v92 + v103 + 56) = *(_OWORD *)(v107 + 56);
                *(_OWORD *)(v92 + v103 + 72) = v110;
                *(_BYTE *)(v108 + 88) = 1;
              }
              *(_QWORD *)(v108 + 96) = *((_QWORD *)v107 + 12);
              v104 = *(_OWORD *)(v107 + 104);
              *(_OWORD *)(v108 + 120) = *(_OWORD *)(v107 + 120);
              *(_OWORD *)(v108 + 104) = v104;
              v105 = *(_OWORD *)(v107 + 136);
              *(_OWORD *)(v108 + 152) = *(_OWORD *)(v107 + 152);
              *(_OWORD *)(v108 + 136) = v105;
              v106 = *((_QWORD *)v107 + 21);
              *(_BYTE *)(v108 + 176) = v107[176];
              *(_QWORD *)(v108 + 168) = v106;
              *(_OWORD *)(v108 + 184) = *(_OWORD *)(v107 + 184);
              *((_QWORD *)v107 + 23) = 0;
              *((_QWORD *)v107 + 24) = 0;
              *(_BYTE *)(v108 + 200) = v107[200];
              v103 += 208;
            }
            while (v107 + 208 != v102);
            v35 = (char *)a1[85].i64[0];
            v92 += v103;
          }
          v111 = (char *)a1[84].i64[1];
          a1[84].i64[1] = (uint64_t)v50;
          a1[85].i64[0] = v92;
          v112 = a1[85].i64[1];
          a1[85].i64[1] = *((_QWORD *)&v156 + 1);
          *((_QWORD *)&v156 + 1) = v112;
          *(_QWORD *)&v155 = v111;
          *((_QWORD *)&v155 + 1) = v111;
          if (v35 != v111)
          {
            do
            {
              *(_QWORD *)&v156 = v35 - 208;
              v113 = (std::__shared_weak_count *)*((_QWORD *)v35 - 2);
              if (v113)
              {
                v114 = (unint64_t *)&v113->__shared_owners_;
                do
                  v115 = __ldaxr(v114);
                while (__stlxr(v115 - 1, v114));
                if (!v115)
                {
                  ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                  std::__shared_weak_count::__release_weak(v113);
                }
              }
              v35 = (char *)v156;
            }
            while ((char *)v156 != v111);
            v35 = (char *)v155;
          }
          if (v35)
            operator delete(v35);
        }
        else if (v35 == v32)
        {
          *(_QWORD *)v32 = v8;
          v41 = v33 + 208 * v130;
          *(_OWORD *)(v41 + 8) = v131;
          v42 = v142;
          v43 = v143;
          *(_BYTE *)(v41 + 56) = 0;
          v44 = v41 + 56;
          *(_OWORD *)(v44 - 32) = v42;
          *(_OWORD *)(v44 - 16) = v43;
          *(_BYTE *)(v44 + 32) = 0;
          if (v136)
          {
            v45 = v144[1];
            *(_OWORD *)v44 = v144[0];
            *(_OWORD *)(v44 + 16) = v45;
            *(_BYTE *)(v44 + 32) = 1;
          }
          v46 = v33 + 208 * v130;
          *(_QWORD *)(v46 + 96) = v30;
          v47 = v147;
          *(_OWORD *)(v46 + 120) = v148;
          *(_OWORD *)(v46 + 104) = v47;
          v48 = v149;
          *(_OWORD *)(v46 + 152) = v150;
          *(_OWORD *)(v46 + 136) = v48;
          v49 = v151;
          *(_BYTE *)(v46 + 176) = v152;
          *(_QWORD *)(v46 + 168) = v49;
          *(_QWORD *)(v46 + 184) = v141;
          *(_QWORD *)(v46 + 192) = v31;
          v153 = 0uLL;
          *(_BYTE *)(v46 + 200) = 0;
          a1[85].i64[0] = (uint64_t)(v32 + 208);
        }
        else
        {
          v164 = v131;
          v155 = v132;
          v156 = v133;
          if (v136)
          {
            v127 = v144[0];
            v165[0] = *(_OWORD *)((char *)v144 + 1);
            *(_OWORD *)((char *)v165 + 15) = v144[1];
            v128 = 1;
          }
          else
          {
            v127 = 0;
            v128 = 0;
          }
          v162 = v137;
          v163 = v138;
          v160 = v139;
          v161 = v140;
          v158 = v151;
          v159 = v152;
          v52 = v35 + 208;
          v53 = v32 - 208;
          v54 = v32;
          v153 = 0uLL;
          if ((unint64_t)v32 >= 0xD0)
          {
            v55 = 0;
            v56 = v33 + 16 * ((v32 - v52) >> 4) + 208 * v130;
            do
            {
              v60 = &v53[v55];
              v61 = &v32[v55];
              *(_QWORD *)v61 = *(_QWORD *)&v53[v55];
              *(_OWORD *)(v61 + 8) = *(_OWORD *)&v53[v55 + 8];
              v62 = *(_OWORD *)&v53[v55 + 24];
              *(_OWORD *)(v61 + 40) = *(_OWORD *)&v53[v55 + 40];
              *(_OWORD *)(v61 + 24) = v62;
              v32[v55 + 56] = 0;
              v61[88] = 0;
              if (v53[v55 + 88])
              {
                v63 = *(_OWORD *)(v56 + v55 + 72);
                *(_OWORD *)&v32[v55 + 56] = *(_OWORD *)(v56 + v55 + 56);
                *(_OWORD *)&v32[v55 + 72] = v63;
                v61[88] = 1;
              }
              *((_QWORD *)v61 + 12) = *((_QWORD *)v60 + 12);
              v57 = *(_OWORD *)(v60 + 104);
              *(_OWORD *)(v61 + 120) = *(_OWORD *)(v60 + 120);
              *(_OWORD *)(v61 + 104) = v57;
              v58 = *(_OWORD *)(v60 + 136);
              *(_OWORD *)(v61 + 152) = *(_OWORD *)(v60 + 152);
              *(_OWORD *)(v61 + 136) = v58;
              v59 = *((_QWORD *)v60 + 21);
              v61[176] = v60[176];
              *((_QWORD *)v61 + 21) = v59;
              *(_OWORD *)(v61 + 184) = *(_OWORD *)(v60 + 184);
              *((_QWORD *)v60 + 23) = 0;
              *((_QWORD *)v60 + 24) = 0;
              v61[200] = v60[200];
              v55 += 208;
            }
            while (v60 + 208 < v32);
            v54 = &v32[v55];
          }
          a1[85].i64[0] = (uint64_t)v54;
          if (v32 != v52)
          {
            v64 = v32 - 208;
            v65 = v32;
            do
            {
              v66 = *((_QWORD *)v64 - 26);
              v64 -= 208;
              *((_QWORD *)v65 - 26) = v66;
              v65 -= 208;
              *(_OWORD *)(v65 + 8) = *(_OWORD *)(v64 + 8);
              v67 = *(_OWORD *)(v64 + 24);
              *(_OWORD *)(v65 + 40) = *(_OWORD *)(v64 + 40);
              *(_OWORD *)(v65 + 24) = v67;
              v68 = v65 + 56;
              v69 = v64 + 56;
              if (v65[88] == v64[88])
              {
                if (v65[88])
                {
                  v70 = *(_OWORD *)(v64 + 72);
                  *v68 = *v69;
                  *(_OWORD *)(v65 + 72) = v70;
                }
              }
              else if (v65[88])
              {
                *(v32 - 120) = 0;
              }
              else
              {
                v71 = *(_OWORD *)(v64 + 72);
                *v68 = *v69;
                *(_OWORD *)(v65 + 72) = v71;
                *(v32 - 120) = 1;
              }
              *((_QWORD *)v32 - 14) = *((_QWORD *)v53 - 14);
              v72 = *(_OWORD *)(v53 - 104);
              *(_OWORD *)(v32 - 88) = *(_OWORD *)(v53 - 88);
              *(_OWORD *)(v32 - 104) = v72;
              v73 = *(_OWORD *)(v53 - 72);
              *(_OWORD *)(v32 - 56) = *(_OWORD *)(v53 - 56);
              *(_OWORD *)(v32 - 72) = v73;
              v74 = *((_QWORD *)v53 - 5);
              *(v32 - 32) = *(v53 - 32);
              *((_QWORD *)v32 - 5) = v74;
              v75 = *(_OWORD *)(v53 - 24);
              *((_QWORD *)v53 - 3) = 0;
              *((_QWORD *)v53 - 2) = 0;
              v76 = (std::__shared_weak_count *)*((_QWORD *)v32 - 2);
              *(_OWORD *)(v32 - 24) = v75;
              if (v76)
              {
                v77 = (unint64_t *)&v76->__shared_owners_;
                do
                  v78 = __ldaxr(v77);
                while (__stlxr(v78 - 1, v77));
                if (!v78)
                {
                  ((void (*)(std::__shared_weak_count *, __int128 *))v76->__on_zero_shared)(v76, a2);
                  std::__shared_weak_count::__release_weak(v76);
                }
              }
              *(v32 - 8) = *(v53 - 8);
              v32 = v65;
              v53 = v64;
            }
            while (v64 != v35);
          }
          *(_QWORD *)v35 = v8;
          v79 = v130;
          v80 = &v129[208 * v130];
          v83 = v80[88];
          v81 = v80 + 88;
          v82 = v83;
          *((_OWORD *)v81 - 5) = v164;
          *((_OWORD *)v81 - 4) = v155;
          *((_OWORD *)v81 - 3) = v156;
          v84 = v81 - 32;
          if (v83 == v128)
          {
            v85 = v141;
            if (v82)
            {
              *v84 = v127;
              *(_OWORD *)(v81 - 31) = v165[0];
              *((_OWORD *)v81 - 1) = *(_OWORD *)((char *)v165 + 15);
            }
          }
          else
          {
            v85 = v141;
            if (v82)
            {
              *v81 = 0;
            }
            else
            {
              *v84 = v127;
              *(_OWORD *)(v81 - 31) = v165[0];
              *((_OWORD *)v81 - 1) = *(_OWORD *)((char *)v165 + 15);
              *v81 = 1;
            }
          }
          v116 = v163;
          v117 = &v129[208 * v130];
          *(_OWORD *)(v117 + 104) = v162;
          *(_OWORD *)(v117 + 120) = v116;
          v118 = v161;
          *(_OWORD *)(v117 + 136) = v160;
          *((_QWORD *)v117 + 12) = v30;
          *(_OWORD *)(v117 + 152) = v118;
          *((_QWORD *)v117 + 21) = v158;
          v117[176] = v159;
          v119 = (std::__shared_weak_count *)*((_QWORD *)v117 + 24);
          *((_QWORD *)v117 + 23) = v85;
          *((_QWORD *)v117 + 24) = v31;
          if (v119)
          {
            v120 = (unint64_t *)&v119->__shared_owners_;
            do
              v121 = __ldaxr(v120);
            while (__stlxr(v121 - 1, v120));
            v79 = v130;
            if (!v121)
            {
              ((void (*)(std::__shared_weak_count *, __int128 *))v119->__on_zero_shared)(v119, a2);
              std::__shared_weak_count::__release_weak(v119);
              v79 = v130;
            }
          }
          v129[208 * v79 + 200] = 0;
        }
        v31 = (std::__shared_weak_count *)*((_QWORD *)&v153 + 1);
      }
      if (v31)
      {
        v122 = (unint64_t *)&v31->__shared_owners_;
        do
          v123 = __ldaxr(v122);
        while (__stlxr(v123 - 1, v122));
        if (!v123)
        {
          ((void (*)(std::__shared_weak_count *, __int128 *))v31->__on_zero_shared)(v31, a2);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      a1[101].i8[2] = 0;
      a1[101].i8[0] = 0;
      a1[100] = vaddq_s64(a1[100], (int64x2_t)xmmword_2103B84C0);
      v16 = 1;
    }
    else
    {
      v16 = 0;
      --*(_DWORD *)(v30 + 8);
    }
  }
  if (*((_QWORD *)&v141 + 1))
  {
    v124 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v141 + 1) + 16))(*((_QWORD *)&v141 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v141 + 1));
    }
  }
  return v16;
}

void sub_20FB81768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;

  sub_20FB817A8((uint64_t)&a67);
  sub_20F4ACD60((uint64_t)&a41);
  sub_20F8AEE9C((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_20FB8178C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  sub_20F4ACD60((uint64_t)&a41);
  sub_20F8AEE9C((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_20FB817A8(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 208;
    v4 = *(std::__shared_weak_count **)(i - 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20FB81834(unsigned int a1, __int128 *a2, uint64_t *a3)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  __int128 *v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  BOOL v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  _OWORD *v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  BOOL v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;

  v6 = *((_DWORD *)a3 + 4);
  if (v6 != *((_DWORD *)a3 + 5))
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOPriorUtil.h", 322, (uint64_t)"hessian.rows() == hessian.columns()", 35, (uint64_t)"Hessian matrix should be square.", 32, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_31;
    }
    v6 = *((_DWORD *)a3 + 4);
  }
  v7 = a1 + 4;
  if (a1 + 4 <= v6)
    goto LABEL_7;
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOPriorUtil.h", 323, (uint64_t)"(variable_offset + DIM) <= hessian.rows()", 41, (uint64_t)"Indices exceed matrix bounds.", 29, (void (*)(void **))sub_21023DDB0))
  {
LABEL_31:
    abort();
  }
  v6 = *((_DWORD *)a3 + 4);
LABEL_7:
  v8 = v6 * a1;
  v9 = (__int128 *)*a3;
  v10 = (_QWORD *)v9 + v6 * a1 + a1;
  if (v9 == a2)
  {
    v22 = *a2;
    v21 = a2[1];
    if (4 * v6)
    {
      v23 = (unint64_t)(v6 - 4) << 32;
      v24 = (_QWORD *)v9 + v8 + a1;
      do
      {
        *v24 = 0;
        v25 = HIDWORD(v23);
        v26 = (int)v23 < 3;
        if ((int)v23 < 3)
          v25 = 0;
        v27 = &v24[v25];
        v28 = (v23 + 1);
        v29 = v23 & 0xFFFFFFFF00000000;
        if (!v26)
          v28 = 0;
        v23 = v28 | v29;
        v24 = v27 + 1;
      }
      while (v24 != &v10[4 * v6]);
    }
    *v10 = v22;
    v10[v6 + 1] = *((_QWORD *)&v22 + 1);
    v10[2 * v6 + 2] = v21;
    v10[3 * v6 + 3] = *((_QWORD *)&v21 + 1);
    if (a1)
      goto LABEL_16;
  }
  else
  {
    if (4 * v6)
    {
      v11 = (unint64_t)(v6 - 4) << 32;
      v12 = (_QWORD *)v9 + v8 + a1;
      do
      {
        *v12 = 0;
        v13 = HIDWORD(v11);
        v14 = (int)v11 < 3;
        if ((int)v11 < 3)
          v13 = 0;
        v15 = &v12[v13];
        v16 = (v11 + 1);
        v17 = v11 & 0xFFFFFFFF00000000;
        if (!v14)
          v16 = 0;
        v11 = v16 | v17;
        v12 = v15 + 1;
      }
      while (v12 != &v10[4 * v6]);
    }
    *v10 = *(_QWORD *)a2;
    v10[v6 + 1] = *((_QWORD *)a2 + 1);
    v10[2 * v6 + 2] = *((_QWORD *)a2 + 2);
    v10[3 * v6 + 3] = *((_QWORD *)a2 + 3);
    if (a1)
    {
LABEL_16:
      bzero((char *)v9 + 8 * v8, 8 * a1);
      bzero((char *)v9 + 8 * v6 + 8 * v6 * a1, 8 * a1);
      bzero((char *)v9 + 8 * v6 * (a1 + 2), 8 * a1);
      bzero((char *)v9 + 8 * v6 * (a1 + 3), 8 * a1);
    }
  }
  if (v6 > v7)
  {
    v18 = v6 - a1 - 4;
    if (v6 - a1 != 4)
    {
      v19 = a1 + v6 * v7;
      do
      {
        v20 = (__int128 *)((char *)v9 + 8 * v19);
        *v20 = 0uLL;
        v20[1] = 0uLL;
        v19 += v6;
        --v18;
      }
      while (v18);
    }
  }
}

char *sub_20FB81A74(char **a1, _BYTE *__src, _BYTE *a3)
{
  char *result;
  char *v7;
  char *v8;
  _QWORD *v9;
  int64_t v10;

  result = a1[2];
  v7 = *a1;
  if (result == *a1)
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    result = (char *)operator new(4uLL);
    v7 = result;
    *a1 = result;
    a1[1] = result;
    v9 = a1 + 1;
    a1[2] = result + 4;
    v10 = a3 - __src;
    if (a3 != __src)
      result = (char *)memcpy(result, __src, a3 - __src);
  }
  else
  {
    v8 = a1[1];
    v9 = a1 + 1;
    v10 = a3 - __src;
    if (v8 != v7)
    {
      if (a3 == __src)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (__src != a3)
LABEL_10:
      result = (char *)memmove(v7, __src, a3 - __src);
  }
LABEL_11:
  *v9 = &v7[v10];
  return result;
}

void sub_20FB81B48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  size_t *v5;
  size_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  double v11;
  const double *v12;
  float64x2_t *v13;
  unsigned int v14;
  unsigned int v15;
  size_t v16;
  uint64_t v17;
  double *v18;
  unint64_t v19;
  double *v20;
  double *v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  float64x2_t *v25;
  float64x2_t *v26;
  uint64_t v27;
  float64x2_t v28;
  double *v29;
  double v30;
  int v31[2];
  uint64_t v32;
  int __lda;
  float64x2_t *v34;
  size_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v4 = **(_QWORD **)(a2 + 16);
  if (*(_QWORD *)v4 == *(_QWORD *)a1)
  {
    v14 = *(_DWORD *)(**(_QWORD **)(a2 + 8) + 16);
    v15 = *(_DWORD *)(v4 + 16);
    v16 = (8 * v15 * v14 + 31) & 0xFFFFFFFE0;
    v35 = v16 >> 3;
    v34 = (float64x2_t *)operator new(v16, (std::align_val_t)0x20uLL);
    v36 = __PAIR64__(v15, v14);
    sub_20FB81DD8((uint64_t)&v34, a2);
    v17 = (*(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
    v13 = v34;
    if (!(_DWORD)v17)
      goto LABEL_19;
    v18 = *(double **)a1;
    v19 = (v17 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v19 >= 9)
    {
      v22 = v18 >= &v34->f64[v17] || v34 >= (float64x2_t *)&v18[v17];
      v20 = (double *)v34;
      v21 = *(double **)a1;
      if (v22)
      {
        v23 = v19 + 1;
        v24 = v23 & 0x3FFFFFFFFFFFFFFCLL;
        v20 = &v34->f64[v24];
        v21 = &v18[v24];
        v25 = (float64x2_t *)(v18 + 2);
        v26 = v34 + 1;
        v27 = v23 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = vsubq_f64(*v25, *v26);
          v25[-1] = vsubq_f64(v25[-1], v26[-1]);
          *v25 = v28;
          v25 += 2;
          v26 += 2;
          v27 -= 4;
        }
        while (v27);
        if (v23 == (v23 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_19:
          if (!v13)
            return;
          goto LABEL_20;
        }
      }
    }
    else
    {
      v20 = (double *)v34;
      v21 = *(double **)a1;
    }
    v29 = &v18[v17];
    do
    {
      v30 = *v20++;
      *v21 = *v21 - v30;
      ++v21;
    }
    while (v21 != v29);
    goto LABEL_19;
  }
  v5 = *(size_t **)(a2 + 8);
  v6 = *v5;
  v7 = *(_DWORD *)(*v5 + 16);
  if ((v7 & 0x3FFFFFFF) != 0)
  {
    if (*(_DWORD *)(v4 + 16) * *(_DWORD *)(v4 + 20))
    {
      v32 = (4 * v7);
      *(_QWORD *)v31 = operator new(8 * v32, (std::align_val_t)0x20uLL);
      __lda = v7;
      v8 = v5[1];
      v35 = v6;
      v36 = v8;
      v37 = 0x3FF0000000000000;
      sub_20FB82000((uint64_t)v31, (uint64_t)&v34);
      v9 = **(_QWORD **)(a2 + 16);
      v10 = *(_DWORD *)(**(_QWORD **)(a2 + 8) + 16);
      v11 = -*(double *)(a2 + 24);
      v12 = *(const double **)v31;
      sub_20E8BE654(0, 1, v10, *(_DWORD *)(v9 + 16), 4, *(const double **)v31, __lda, *(double **)v9, v11, 1.0, *(_DWORD *)(v9 + 16), *(double **)a1, *(_DWORD *)(a1 + 16));
      if (v12)
      {
        v13 = (float64x2_t *)v12;
LABEL_20:
        MEMORY[0x212BC6368](v13, 0x1000C8000313F17);
      }
    }
  }
}

void sub_20FB81D90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;

  if (v16)
    MEMORY[0x212BC6368](v16, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

void sub_20FB81DD8(uint64_t a1, uint64_t a2)
{
  double *v4;
  uint64_t v5;
  size_t *v6;
  size_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  double v12;
  const double *v13;
  void *v14;
  unsigned int v15;
  unsigned int v16;
  size_t v17;
  size_t v18;
  int v19[2];
  uint64_t v20;
  int __lda;
  void *v22;
  size_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v4 = *(double **)a1;
  v5 = **(_QWORD **)(a2 + 16);
  if (*(double **)v5 == v4)
  {
    v15 = *(_DWORD *)(**(_QWORD **)(a2 + 8) + 16);
    v16 = *(_DWORD *)(v5 + 16);
    v17 = (8 * v16 * v15 + 31) & 0xFFFFFFFE0;
    v23 = v17 >> 3;
    v22 = operator new(v17, (std::align_val_t)0x20uLL);
    v24 = __PAIR64__(v16, v15);
    sub_20FB81DD8(&v22, a2);
    v14 = *(void **)a1;
    v18 = v23;
    *(_QWORD *)a1 = v22;
    *(_QWORD *)(a1 + 8) = v18;
    *(_QWORD *)(a1 + 16) = v24;
    if (!v14)
      return;
    goto LABEL_9;
  }
  v6 = *(size_t **)(a2 + 8);
  v7 = *v6;
  v8 = *(_DWORD *)(*v6 + 16);
  if ((v8 & 0x3FFFFFFF) != 0 && *(_DWORD *)(v5 + 16) * *(_DWORD *)(v5 + 20))
  {
    v20 = (4 * v8);
    *(_QWORD *)v19 = operator new(8 * v20, (std::align_val_t)0x20uLL);
    __lda = v8;
    v9 = v6[1];
    v23 = v7;
    v24 = v9;
    v25 = 0x3FF0000000000000;
    sub_20FB82000((uint64_t)v19, (uint64_t)&v22);
    v10 = **(_QWORD **)(a2 + 16);
    v11 = *(_DWORD *)(**(_QWORD **)(a2 + 8) + 16);
    v12 = *(double *)(a2 + 24);
    v13 = *(const double **)v19;
    sub_20E8BE654(0, 1, v11, *(_DWORD *)(v10 + 16), 4, *(const double **)v19, __lda, *(double **)v10, v12, 0.0, *(_DWORD *)(v10 + 16), *(double **)a1, *(_DWORD *)(a1 + 16));
    if (!v13)
      return;
    v14 = (void *)v13;
LABEL_9:
    MEMORY[0x212BC6368](v14, 0x1000C8000313F17);
    return;
  }
  if (*(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16))
    bzero(v4, 8 * (*(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16)));
}

void sub_20FB81FB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;

  if (v16)
    MEMORY[0x212BC6368](v16, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

void sub_20FB82000(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double *v5;
  double *v6;
  int v7;
  int v8;
  int v9;
  double *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  int v14;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(double **)a1;
  if (*(double **)v4 == v5 || (v6 = *(double **)(a2 + 16), v6 == v5))
  {
    v9 = *(_DWORD *)(v4 + 16);
    v13 = (4 * v9);
    v12 = operator new(8 * v13, (std::align_val_t)0x20uLL);
    v14 = v9;
    sub_20FB82000(&v12, a2);
    v10 = *(double **)a1;
    v11 = v13;
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v11;
    *(_DWORD *)(a1 + 16) = v14;
    if (v10)
      MEMORY[0x212BC6368](v10, 0x1000C8000313F17);
  }
  else
  {
    v7 = *(_DWORD *)(v4 + 16);
    v8 = *(_DWORD *)(v4 + 20);
    if (v8 * v7)
    {
      sub_20E8BE654(0, 0, v7, 4, v8, *(const double **)v4, v7, v6, *(double *)(a2 + 24), 0.0, 4, v5, *(_DWORD *)(a1 + 16));
    }
    else if (4 * *(_DWORD *)(a1 + 16))
    {
      bzero(v5, 8 * (4 * *(_DWORD *)(a1 + 16)));
    }
  }
}

void sub_20FB8211C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    MEMORY[0x212BC6368](a12, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FB82144(uint64_t a1, uint64_t *a2, unsigned int *a3, unsigned int *a4)
{
  sub_20F8E111C(a1 + 1296, a2, a3[18] | ((unint64_t)*a4 << 32));
  sub_20F8E1768(a1 + 2736, a2, a3[18] | ((unint64_t)a4[2] << 32));
  sub_20F8E111C(a1 + 4176, a2, a3[18] | ((unint64_t)a4[4] << 32));
  sub_20F8E111C(a1 + 5616, a2, a3[18] | ((unint64_t)a4[6] << 32));
  sub_20F8E1E24(a1 + 7056, a2, a3[18] | ((unint64_t)a4[8] << 32));
  sub_20F8E2400(a1 + 8496, a2, a3[18] | ((unint64_t)a4[10] << 32));
  sub_20F8E1E24(a1 + 9936, a2, a3[18] | ((unint64_t)a4[12] << 32));
  sub_20F8E29B8(a1 + 11376, a2, a3[18] | ((unint64_t)a4[14] << 32));
  sub_20F8E29B8(a1 + 12816, a2, a3[18] | ((unint64_t)a4[16] << 32));
  sub_20F8E1E24(a1 + 14256, a2, a3[18] | ((unint64_t)a4[18] << 32));
  sub_20F8E2FBC(a1 + 1152, a2, a3[16] | ((unint64_t)*a4 << 32));
  sub_20F8E35D8(a1 + 2592, a2, a3[16] | ((unint64_t)a4[2] << 32));
  sub_20F8E2FBC(a1 + 4032, a2, a3[16] | ((unint64_t)a4[4] << 32));
  sub_20F8E2FBC(a1 + 5472, a2, a3[16] | ((unint64_t)a4[6] << 32));
  sub_20F8E3C4C(a1 + 6912, a2, a3[16] | ((unint64_t)a4[8] << 32));
  sub_20F8E420C(a1 + 8352, a2, a3[16] | ((unint64_t)a4[10] << 32));
  sub_20F8E3C4C(a1 + 9792, a2, a3[16] | ((unint64_t)a4[12] << 32));
  sub_20F8E47B4(a1 + 11232, a2, a3[16] | ((unint64_t)a4[14] << 32));
  sub_20F8E47B4(a1 + 12672, a2, a3[16] | ((unint64_t)a4[16] << 32));
  sub_20F8E3C4C(a1 + 14112, a2, a3[16] | ((unint64_t)a4[18] << 32));
  sub_20F8E2FBC(a1 + 1008, a2, a3[14] | ((unint64_t)*a4 << 32));
  sub_20F8E35D8(a1 + 2448, a2, a3[14] | ((unint64_t)a4[2] << 32));
  sub_20F8E2FBC(a1 + 3888, a2, a3[14] | ((unint64_t)a4[4] << 32));
  sub_20F8E2FBC(a1 + 5328, a2, a3[14] | ((unint64_t)a4[6] << 32));
  sub_20F8E3C4C(a1 + 6768, a2, a3[14] | ((unint64_t)a4[8] << 32));
  sub_20F8E420C(a1 + 8208, a2, a3[14] | ((unint64_t)a4[10] << 32));
  sub_20F8E3C4C(a1 + 9648, a2, a3[14] | ((unint64_t)a4[12] << 32));
  sub_20F8E47B4(a1 + 11088, a2, a3[14] | ((unint64_t)a4[14] << 32));
  sub_20F8E47B4(a1 + 12528, a2, a3[14] | ((unint64_t)a4[16] << 32));
  sub_20F8E3C4C(a1 + 13968, a2, a3[14] | ((unint64_t)a4[18] << 32));
  sub_20F8E111C(a1 + 864, a2, a3[12] | ((unint64_t)*a4 << 32));
  sub_20F8E1768(a1 + 2304, a2, a3[12] | ((unint64_t)a4[2] << 32));
  sub_20F8E111C(a1 + 3744, a2, a3[12] | ((unint64_t)a4[4] << 32));
  sub_20F8E111C(a1 + 5184, a2, a3[12] | ((unint64_t)a4[6] << 32));
  sub_20F8E1E24(a1 + 6624, a2, a3[12] | ((unint64_t)a4[8] << 32));
  sub_20F8E2400(a1 + 8064, a2, a3[12] | ((unint64_t)a4[10] << 32));
  sub_20F8E1E24(a1 + 9504, a2, a3[12] | ((unint64_t)a4[12] << 32));
  sub_20F8E29B8(a1 + 10944, a2, a3[12] | ((unint64_t)a4[14] << 32));
  sub_20F8E29B8(a1 + 12384, a2, a3[12] | ((unint64_t)a4[16] << 32));
  sub_20F8E1E24(a1 + 13824, a2, a3[12] | ((unint64_t)a4[18] << 32));
  sub_20F8E4D94(a1 + 720, a2, a3[10] | ((unint64_t)*a4 << 32));
  sub_20F8E53A4(a1 + 2160, a2, a3[10] | ((unint64_t)a4[2] << 32));
  sub_20F8E4D94(a1 + 3600, a2, a3[10] | ((unint64_t)a4[4] << 32));
  sub_20F8E4D94(a1 + 5040, a2, a3[10] | ((unint64_t)a4[6] << 32));
  sub_20F8E59EC(a1 + 6480, a2, a3[10] | ((unint64_t)a4[8] << 32));
  sub_20F8E5FAC(a1 + 7920, a2, a3[10] | ((unint64_t)a4[10] << 32));
  sub_20F8E59EC(a1 + 9360, a2, a3[10] | ((unint64_t)a4[12] << 32));
  sub_20F8E6434(a1 + 10800, a2, a3[10] | ((unint64_t)a4[14] << 32));
  sub_20F8E6434(a1 + 12240, a2, a3[10] | ((unint64_t)a4[16] << 32));
  sub_20F8E59EC(a1 + 13680, a2, a3[10] | ((unint64_t)a4[18] << 32));
  sub_20F8E111C(a1 + 576, a2, a3[8] | ((unint64_t)*a4 << 32));
  sub_20F8E1768(a1 + 2016, a2, a3[8] | ((unint64_t)a4[2] << 32));
  sub_20F8E111C(a1 + 3456, a2, a3[8] | ((unint64_t)a4[4] << 32));
  sub_20F8E111C(a1 + 4896, a2, a3[8] | ((unint64_t)a4[6] << 32));
  sub_20F8E1E24(a1 + 6336, a2, a3[8] | ((unint64_t)a4[8] << 32));
  sub_20F8E2400(a1 + 7776, a2, a3[8] | ((unint64_t)a4[10] << 32));
  sub_20F8E1E24(a1 + 9216, a2, a3[8] | ((unint64_t)a4[12] << 32));
  sub_20F8E29B8(a1 + 10656, a2, a3[8] | ((unint64_t)a4[14] << 32));
  sub_20F8E29B8(a1 + 12096, a2, a3[8] | ((unint64_t)a4[16] << 32));
  sub_20F8E1E24(a1 + 13536, a2, a3[8] | ((unint64_t)a4[18] << 32));
  sub_20F8E6A0C(a1 + 432, a2, a3[6] | ((unint64_t)*a4 << 32));
  sub_20F8E7068(a1 + 1872, a2, a3[6] | ((unint64_t)a4[2] << 32));
  sub_20F8E6A0C(a1 + 3312, a2, a3[6] | ((unint64_t)a4[4] << 32));
  sub_20F8E6A0C(a1 + 4752, a2, a3[6] | ((unint64_t)a4[6] << 32));
  sub_20F8E7748(a1 + 6192, a2, a3[6] | ((unint64_t)a4[8] << 32));
  sub_20F8E7D3C(a1 + 7632, a2, a3[6] | ((unint64_t)a4[10] << 32));
  sub_20F8E7748(a1 + 9072, a2, a3[6] | ((unint64_t)a4[12] << 32));
  sub_20F8E8310(a1 + 10512, a2, a3[6] | ((unint64_t)a4[14] << 32));
  sub_20F8E8310(a1 + 11952, a2, a3[6] | ((unint64_t)a4[16] << 32));
  sub_20F8E7748(a1 + 13392, a2, a3[6] | ((unint64_t)a4[18] << 32));
  sub_20F8E6A0C(a1 + 288, a2, a3[4] | ((unint64_t)*a4 << 32));
  sub_20F8E7068(a1 + 1728, a2, a3[4] | ((unint64_t)a4[2] << 32));
  sub_20F8E6A0C(a1 + 3168, a2, a3[4] | ((unint64_t)a4[4] << 32));
  sub_20F8E6A0C(a1 + 4608, a2, a3[4] | ((unint64_t)a4[6] << 32));
  sub_20F8E7748(a1 + 6048, a2, a3[4] | ((unint64_t)a4[8] << 32));
  sub_20F8E7D3C(a1 + 7488, a2, a3[4] | ((unint64_t)a4[10] << 32));
  sub_20F8E7748(a1 + 8928, a2, a3[4] | ((unint64_t)a4[12] << 32));
  sub_20F8E8310(a1 + 10368, a2, a3[4] | ((unint64_t)a4[14] << 32));
  sub_20F8E8310(a1 + 11808, a2, a3[4] | ((unint64_t)a4[16] << 32));
  sub_20F8E7748(a1 + 13248, a2, a3[4] | ((unint64_t)a4[18] << 32));
  sub_20F8E8924(a1 + 144, a2, a3[2] | ((unint64_t)*a4 << 32));
  sub_20F8E8FF8(a1 + 1584, a2, a3[2] | ((unint64_t)a4[2] << 32));
  sub_20F8E8924(a1 + 3024, a2, a3[2] | ((unint64_t)a4[4] << 32));
  sub_20F8E8924(a1 + 4464, a2, a3[2] | ((unint64_t)a4[6] << 32));
  sub_20F8E97D8(a1 + 5904, a2, a3[2] | ((unint64_t)a4[8] << 32));
  sub_20F8E9DE4(a1 + 7344, a2, a3[2] | ((unint64_t)a4[10] << 32));
  sub_20F8E97D8(a1 + 8784, a2, a3[2] | ((unint64_t)a4[12] << 32));
  sub_20F8EA39C(a1 + 10224, a2, a3[2] | ((unint64_t)a4[14] << 32));
  sub_20F8EA39C(a1 + 11664, a2, a3[2] | ((unint64_t)a4[16] << 32));
  sub_20F8E97D8(a1 + 13104, a2, a3[2] | ((unint64_t)a4[18] << 32));
  sub_20F8E6A0C(a1, a2, *a3 | ((unint64_t)*a4 << 32));
  sub_20F8E7068(a1 + 1440, a2, *a3 | ((unint64_t)a4[2] << 32));
  sub_20F8E6A0C(a1 + 2880, a2, *a3 | ((unint64_t)a4[4] << 32));
  sub_20F8E6A0C(a1 + 4320, a2, *a3 | ((unint64_t)a4[6] << 32));
  sub_20F8E7748(a1 + 5760, a2, *a3 | ((unint64_t)a4[8] << 32));
  sub_20F8E7D3C(a1 + 7200, a2, *a3 | ((unint64_t)a4[10] << 32));
  sub_20F8E7748(a1 + 8640, a2, *a3 | ((unint64_t)a4[12] << 32));
  sub_20F8E8310(a1 + 10080, a2, *a3 | ((unint64_t)a4[14] << 32));
  sub_20F8E8310(a1 + 11520, a2, *a3 | ((unint64_t)a4[16] << 32));
  return sub_20F8E7748(a1 + 12960, a2, *a3 | ((unint64_t)a4[18] << 32));
}

void sub_20FB82BE8(uint64_t a1, unsigned __int32 a2, int a3, float64x2_t *a4, float64x2_t *a5)
{
  float64x2_t *v5;
  uint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int32 *v13;
  char *v14;
  unsigned __int32 v15;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  unsigned __int8 v23;
  int64x2_t *v24;
  int v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  unsigned __int8 v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  size_t v35;
  const char *v36;
  char *v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  char *v42;
  unint64_t v43;
  unsigned __int8 v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t *v49;
  uint64_t *v50;
  size_t v51;
  const char *v52;
  char *v53;
  char *v54;
  unint64_t v55;
  unint64_t v56;
  unsigned __int32 *v57;
  char *v58;
  unsigned __int32 v59;
  __int32 **v60;
  _DWORD *v61;
  _DWORD *v62;
  __int32 *v63;
  __int32 *v64;
  int64x2_t v65;
  float64x2_t v66;
  unsigned __int8 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  unsigned __int8 v72;
  uint64_t v73;
  uint64_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  __int32 *v79;
  __int32 *v80;
  __int32 *v81;
  unsigned __int8 v82;
  uint64_t v83;
  uint64_t i;
  unsigned __int8 v85;
  unsigned int v86;
  void **v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  unsigned __int8 v91;
  const char *v92;
  size_t v93;
  void **v94;
  unint64_t v95;
  const char *v96;
  uint64_t *v97;
  int v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  void **v102;
  uint64_t v103;
  uint64_t v104;
  NSObject *v105;
  size_t v106;
  std::__shared_weak_count_vtbl *v107;
  std::__shared_weak_count *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t *v115;
  void *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  void *v123;
  uint64_t *v124;
  float64_t v125;
  _QWORD *v126;
  int64x2_t v127;
  __int32 v128;
  uint64_t v129;
  __int32 v130;
  float64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  uint64_t *v145;
  float64_t v146;
  _QWORD *v147;
  int64x2_t v148;
  __int32 v149;
  uint64_t v150;
  __int32 v151;
  float64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  unint64_t *v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  char *v169;
  char *v170;
  char *v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  int64x2_t v177;
  int64x2_t *v178;
  int64x2_t v179;
  int64x2_t *v180;
  int64x2_t v181;
  int64x2_t v182;
  __int128 v183;
  int64x2_t v184;
  int64x2_t v185;
  unsigned int v186;
  uint64_t v187;
  uint64_t v188;
  _QWORD *v189;
  int v190;
  int v191;
  char *v192;
  size_t v193;
  uint64_t v194;
  _OWORD *v195;
  __int128 v196;
  __int128 v197;
  uint64_t *v198;
  __n128 v199;
  _BOOL4 v200;
  uint8x8_t v201;
  unsigned __int8 v202;
  int v203;
  unint64_t v204;
  unint64_t v205;
  uint64_t v206;
  size_t v207;
  const char *v208;
  size_t v209;
  char *v210;
  char *v211;
  size_t v212;
  uint64_t v213;
  unsigned __int8 v214;
  const char *v215;
  size_t v216;
  void **v217;
  const char *v218;
  uint64_t *v219;
  int v220;
  uint64_t *v221;
  uint64_t v222;
  uint64_t v223;
  void **v224;
  uint64_t v225;
  uint64_t v226;
  NSObject *v227;
  size_t v228;
  std::__shared_weak_count_vtbl *v229;
  std::__shared_weak_count *v230;
  std::__shared_weak_count *v231;
  unint64_t *p_shared_owners;
  unint64_t v233;
  unint64_t v234;
  _QWORD *v235;
  uint64_t v236;
  uint64_t *v237;
  void *v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  void *v245;
  uint64_t *v246;
  float64_t v247;
  _QWORD *v248;
  int64x2_t v249;
  __int32 v250;
  uint64_t v251;
  __int32 v252;
  float64_t v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  unint64_t *v257;
  unint64_t v258;
  std::__shared_weak_count *v259;
  unint64_t *v260;
  unint64_t v261;
  unint64_t *v262;
  unint64_t v263;
  std::__shared_weak_count *v264;
  unint64_t *v265;
  unint64_t v266;
  uint64_t *v267;
  float64_t v268;
  _QWORD *v269;
  int64x2_t v270;
  __int32 v271;
  uint64_t v272;
  __int32 v273;
  float64_t v274;
  std::__shared_weak_count *v275;
  unint64_t *v276;
  unint64_t v277;
  unint64_t *v278;
  unint64_t v279;
  std::__shared_weak_count *v280;
  unint64_t *v281;
  unint64_t v282;
  unint64_t *v283;
  unint64_t v284;
  std::__shared_weak_count *v285;
  unint64_t *v286;
  unint64_t v287;
  unint64_t *v288;
  unsigned __int8 v289;
  size_t v290;
  const char *v291;
  const char *v292;
  unint64_t *p_p_src;
  uint64_t v294;
  uint64_t v295;
  void **v296;
  uint64_t v297;
  uint64_t v298;
  NSObject *v299;
  size_t v300;
  std::__shared_weak_count_vtbl *v301;
  std::__shared_weak_count *v302;
  std::__shared_weak_count *v303;
  unint64_t *v304;
  unint64_t v305;
  unint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t *v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  std::__shared_weak_count *v314;
  unint64_t *v315;
  unint64_t v316;
  void *v317;
  uint64_t *v318;
  double v319;
  _QWORD *v320;
  __int128 v321;
  int v322;
  const char *v323;
  int v324;
  const char *v325;
  std::__shared_weak_count *v326;
  unint64_t *v327;
  unint64_t v328;
  unint64_t *v329;
  unint64_t v330;
  std::__shared_weak_count *v331;
  unint64_t *v332;
  unint64_t v333;
  unint64_t *v334;
  unint64_t v335;
  std::__shared_weak_count *v336;
  unint64_t *v337;
  unint64_t v338;
  uint64_t *v339;
  double v340;
  _QWORD *v341;
  __int128 v342;
  int v343;
  const char *v344;
  int v345;
  const char *v346;
  std::__shared_weak_count *v347;
  unint64_t *v348;
  unint64_t v349;
  unint64_t *v350;
  unint64_t v351;
  std::__shared_weak_count *v352;
  unint64_t *v353;
  unint64_t v354;
  unint64_t *v355;
  unint64_t v356;
  std::__shared_weak_count *v357;
  unint64_t *v358;
  unint64_t v359;
  std::__shared_weak_count *v360;
  unint64_t *v361;
  unint64_t v362;
  unsigned int v363;
  uint64_t *v364;
  int8x16_t v365;
  int8x16_t v366;
  uint32x4_t v367;
  int64x2_t v368;
  int8x16_t v369;
  _QWORD *v370;
  int v371;
  uint64_t v372;
  unint64_t v373;
  uint64_t v374;
  uint64_t v375;
  _QWORD *v376;
  uint64_t v377;
  unint64_t v378;
  unint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  int v383;
  int v384;
  int v385;
  int v386;
  int v387;
  int v388;
  unsigned int v389;
  int v390;
  int v391;
  int v392;
  unsigned int v393;
  int v394;
  int v395;
  int v396;
  int v397;
  int v398;
  int v399;
  int v400;
  int v401;
  uint64_t v402;
  int v403;
  int v404;
  int v405;
  int v406;
  uint64_t v407;
  int v408;
  unsigned int v409;
  unsigned int v410;
  unsigned int v411;
  uint64_t v412;
  int v413;
  unsigned int v414;
  int v415;
  unsigned int v416;
  uint64_t v417;
  int v418;
  unsigned __int8 v419;
  unsigned __int8 v420;
  unsigned __int8 v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  int v429;
  _QWORD *v430;
  float64x2_t v431;
  float64x2_t v432;
  float64x2_t v434;
  float64x2_t v435;
  void *__src;
  __int128 v437;
  int v438;
  const char *v439;
  int v440;
  const char *v441;
  double v442;
  std::__shared_weak_count *v443;
  uint64_t v444;
  _BYTE v445[32];
  const char *v446;
  int v447;
  int v448;
  const char *v449;
  double v450;
  unint64_t v451;
  int v452;
  int v453;
  void *object[2];
  int64x2_t v455;
  void *__p[2];
  float64x2_t v457;
  int64x2_t v458;
  float64_t v459;
  uint64_t v460;
  int64x2_t v461;
  uint64_t v462;
  float64_t v463;
  int64x2_t v464[2];
  int64x2_t v465;
  float64x2_t v466;
  int64x2_t v467;
  int64x2_t v468;
  int64x2_t v469;
  int64x2_t v470;
  uint64_t *v471;
  unint64_t p_src;
  uint64_t *v473;
  unint64_t v474;
  int v475;
  int v476;
  void **v477;
  unint64_t v478;
  unint64_t v479;
  unsigned int v480;
  int v481;
  unsigned int v482;
  int v483;
  uint64_t v484;

  v5 = a5;
  v8 = a1;
  v484 = *MEMORY[0x24BDAC8D0];
  v9 = *(char **)(a1 + 5752);
  v10 = *(char **)(a1 + 5760);
  if (v10 != v9)
  {
    v11 = (v10 - v9) >> 4;
    do
    {
      v12 = v11 >> 1;
      v13 = (unsigned __int32 *)&v9[16 * (v11 >> 1)];
      v15 = *v13;
      v14 = (char *)(v13 + 4);
      v11 += ~(v11 >> 1);
      if (v15 < a2)
        v9 = v14;
      else
        v11 = v12;
    }
    while (v11);
  }
  if (v9 == v10 || *(_DWORD *)v9 != a2)
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 269, (uint64_t)"var_iter != this->linear_system_.template endVariable<IntrinsicsCalibVariable<Float>>()", 87, (uint64_t)"invalid intrinsics calib iterator.", 34, (void (*)(void **))sub_21023DDB0);
    v18 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68 || byte_254A6DE70)
    {
      v20 = qword_254A6DE40;
      v19 = qword_254A6DE48;
      while (v20 != v19)
      {
        v22 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v20;
        v21 = *(_QWORD *)(v20 + 8);
        v20 += 16;
        v22(v21, "var_iter != this->linear_system_.template endVariable<IntrinsicsCalibVariable<Float>>()", 87, "invalid intrinsics calib iterator.", 34);
      }
    }
    v23 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v23 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      goto LABEL_477;
    v8 = a1;
    qword_254A6DE58(unk_254A6DE60, "var_iter != this->linear_system_.template endVariable<IntrinsicsCalibVariable<Float>>()", 87, "invalid intrinsics calib iterator.", 34);
    v9 = v10;
    v5 = a5;
  }
  v24 = (int64x2_t *)*((_QWORD *)v9 + 1);
  if (!a3)
  {
    v24[9].i8[0] = 0;
    return;
  }
  v25 = v24[1].u8[4];
  v24[1].i8[4] = 1;
  v24[9].i8[0] = 1;
  if (!v25)
  {
    v37 = *(char **)(v8 + 6520);
    v38 = *(char **)(v8 + 6528);
    if (v38 != v37)
    {
      v39 = 0x4EC4EC4EC4EC4EC5 * ((v38 - v37) >> 4);
      do
      {
        v40 = v39 >> 1;
        v41 = (unint64_t *)&v37[208 * (v39 >> 1)];
        v43 = *v41;
        v42 = (char *)(v41 + 26);
        v39 += ~(v39 >> 1);
        if (v43 < a2)
          v37 = v42;
        else
          v39 = v40;
      }
      while (v39);
      if (v38 != v37 && *(_QWORD *)v37 == a2)
      {
        v44 = atomic_load((unsigned __int8 *)&qword_254A6B820);
        if ((v44 & 1) == 0 && __cxa_guard_acquire(&qword_254A6B820))
        {
          v420 = atomic_load((unsigned __int8 *)&qword_254A6DDE0);
          if ((v420 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDE0))
          {
            sub_20E8BFCE4(&qword_254A6DDD8);
            __cxa_guard_release(&qword_254A6DDE0);
          }
          object[0] = (void *)qword_254A6DDD8;
          v464[1].i8[7] = 8;
          strcpy(v464[0].i8, "cv3d.vio");
          sub_20E8C4068((uint64_t **)object, (uint64_t)v464, &qword_254A6B818);
          if (v464[1].i8[7] < 0)
            operator delete((void *)v464[0].i64[0]);
          __cxa_guard_release(&qword_254A6B820);
        }
        v471 = (uint64_t *)qword_254A6B818;
        if (**(int **)(qword_254A6B818 + 56) > 2)
          return;
        v45 = *(unsigned __int8 *)(qword_254A6B818 + 72);
        v46 = sub_20E8C31DC(qword_254A6B818, "OSLogSurrogateAppender", 1, 0);
        v47 = v46;
        if (!v45 && v46 == 0)
          return;
        *(_QWORD *)v445 = &v471;
        *(std::chrono::steady_clock::time_point *)&v445[8] = std::chrono::steady_clock::now();
        *(std::chrono::system_clock::time_point *)&v445[16] = std::chrono::system_clock::now();
        *(_DWORD *)&v445[24] = 2;
        v446 = "unknown file";
        v447 = 297;
        v450 = 0.0;
        v451 = 0;
        *(double *)&v449 = COERCE_DOUBLE("unknown function");
        v49 = v471;
        v50 = v471 + 2;
        if (*((char *)v471 + 39) < 0)
        {
          v52 = (const char *)v471[2];
          v51 = v471[3];
        }
        else
        {
          v51 = *((unsigned __int8 *)v471 + 39);
          v52 = (const char *)(**(_QWORD **)v445 + 16);
        }
        v214 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v214 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)v464);
          if (v464[1].i8[8])
          {
            *(int64x2_t *)byte_254A4A4F8 = v464[0];
            *(_QWORD *)&byte_254A4A4F8[16] = v464[1].i64[0];
          }
          else
          {
            byte_254A4A4F8[23] = 14;
            strcpy(byte_254A4A4F8, "com.apple.cv3d");
          }
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        if (byte_254A4A4F8[23] >= 0)
          v215 = byte_254A4A4F8;
        else
          v215 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v216 = byte_254A4A4F8[23];
        else
          v216 = *(_QWORD *)&byte_254A4A4F8[8];
        object[0] = os_log_create(v215, v52);
        v217 = &object[1];
        if (v216 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v216 >= 0x17)
        {
          v218 = v52;
          v219 = v49;
          v220 = v45;
          v221 = v50;
          v222 = (v216 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v216 | 7) != 0x17)
            v222 = v216 | 7;
          v223 = v222 + 1;
          v217 = (void **)operator new(v222 + 1);
          v455.i64[0] = v216;
          v455.i64[1] = v223 | 0x8000000000000000;
          object[1] = v217;
          v50 = v221;
          v45 = v220;
          v49 = v219;
          v52 = v218;
        }
        else
        {
          v455.i8[15] = v216;
          if (!v216)
          {
LABEL_254:
            *((_BYTE *)v217 + v216) = 0;
            LOBYTE(__p[0]) = 1;
            v224 = &__p[1];
            if (v51 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v51 >= 0x17)
            {
              v225 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v51 | 7) != 0x17)
                v225 = v51 | 7;
              v226 = v225 + 1;
              v224 = (void **)operator new(v225 + 1);
              *(_QWORD *)&v457.f64[0] = v51;
              *(_QWORD *)&v457.f64[1] = v226 | 0x8000000000000000;
              __p[1] = v224;
            }
            else
            {
              HIBYTE(v457.f64[1]) = v51;
              if (!v51)
              {
LABEL_262:
                *((_BYTE *)v224 + v51) = 0;
                v458.i8[0] = 1;
                v227 = object[0];
                if (SHIBYTE(v457.f64[1]) < 0)
                  operator delete(__p[1]);
                if (LOBYTE(__p[0]) && v455.i8[15] < 0)
                  operator delete(object[1]);
                if (object[0])
                  os_release(object[0]);
                if (v47 && *(_QWORD *)(v47 + 24))
                {
                  v228 = _os_log_pack_size();
                  v229 = (std::__shared_weak_count_vtbl *)operator new(v228, (std::align_val_t)8uLL);
                  v230 = (std::__shared_weak_count *)operator new();
                  v231 = v230;
                  v230->__shared_owners_ = 0;
                  p_shared_owners = (unint64_t *)&v230->__shared_owners_;
                  v230->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                  v230->__shared_weak_owners_ = 0;
                  v230[1].__vftable = v229;
                  do
                    v233 = __ldxr(p_shared_owners);
                  while (__stxr(v233 + 1, p_shared_owners));
                  do
                    v234 = __ldaxr(p_shared_owners);
                  while (__stlxr(v234 - 1, p_shared_owners));
                  if (!v234)
                  {
                    ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
                    std::__shared_weak_count::__release_weak(v231);
                  }
                  *(_WORD *)_os_log_pack_fill() = 0;
                  v235 = (_QWORD *)operator new();
                  v236 = *((unsigned __int8 *)v49 + 39);
                  if ((v236 & 0x80u) == 0)
                    v237 = v50;
                  else
                    v237 = (uint64_t *)v49[2];
                  if ((v236 & 0x80u) != 0)
                    v236 = v49[3];
                  *v235 = v229;
                  v235[1] = v229;
                  v235[2] = v231;
                  v235[3] = 0;
                  v235[4] = 0;
                  v235[5] = v237;
                  v235[6] = v236;
                  *((_BYTE *)v235 + 56) = 2;
                  object[0] = v235;
                  (*(void (**)(_QWORD, void **))(**(_QWORD **)(v47 + 24) + 40))(*(_QWORD *)(v47 + 24), object);
                  v238 = object[0];
                  object[0] = 0;
                  if (v238)
                  {
                    v239 = (std::__shared_weak_count *)*((_QWORD *)v238 + 4);
                    if (v239)
                    {
                      v240 = (unint64_t *)&v239->__shared_owners_;
                      do
                        v241 = __ldaxr(v240);
                      while (__stlxr(v241 - 1, v240));
                      if (!v241)
                      {
                        ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
                        std::__shared_weak_count::__release_weak(v239);
                      }
                    }
                    v242 = (std::__shared_weak_count *)*((_QWORD *)v238 + 2);
                    if (v242)
                    {
                      v243 = (unint64_t *)&v242->__shared_owners_;
                      do
                        v244 = __ldaxr(v243);
                      while (__stlxr(v244 - 1, v243));
                      if (!v244)
                      {
                        ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
                        std::__shared_weak_count::__release_weak(v242);
                      }
                    }
                    MEMORY[0x212BC6398](v238, 0x10F0C40B62ED6C6);
                  }
                }
                else
                {
                  os_log_type_enabled(v227, OS_LOG_TYPE_DEBUG);
                  v464[0].i16[0] = 0;
                  v245 = (void *)_os_log_send_and_compose_impl();
                  if (v245)
                    free(v245);
                }
                if (v45)
                {
                  sub_20E8C003C((uint64_t)v445, "Attempting to add existing intrinsics calib. prior factor");
                  v246 = *(uint64_t **)v445;
                  if (!*(_QWORD *)v445 || (v247 = v450, v450 == 0.0))
                  {
LABEL_350:
                    v166 = (std::__shared_weak_count *)v451;
                    if (!v451)
                      return;
                    v288 = (unint64_t *)(v451 + 8);
                    do
                      v168 = __ldaxr(v288);
                    while (__stlxr(v168 - 1, v288));
                    goto LABEL_201;
                  }
                  v248 = (_QWORD *)(**(_QWORD **)v445 + 16);
                  if (*(char *)(**(_QWORD **)v445 + 39) < 0)
                    v248 = (_QWORD *)*v248;
                  v249 = *(int64x2_t *)&v445[8];
                  v250 = *(_DWORD *)&v445[24];
                  v251 = (uint64_t)v446;
                  v252 = v447;
                  v253 = *(double *)&v449;
                  v254 = (std::__shared_weak_count *)v451;
                  if (v451)
                  {
                    v255 = (unint64_t *)(v451 + 8);
                    do
                      v256 = __ldxr(v255);
                    while (__stxr(v256 + 1, v255));
                  }
                  v464[0].i64[0] = (uint64_t)v248;
                  *(int64x2_t *)((char *)v464 + 8) = v249;
                  v464[1].i32[2] = v250;
                  v465.i64[0] = v251;
                  v465.i32[2] = v252;
                  v466.f64[0] = v253;
                  v466.f64[1] = v247;
                  v467.i64[0] = (uint64_t)v254;
                  if (v254)
                  {
                    v257 = (unint64_t *)&v254->__shared_owners_;
                    do
                      v258 = __ldxr(v257);
                    while (__stxr(v258 + 1, v257));
                  }
                  v259 = v254;
                  if (v250 >= **(_DWORD **)(*v246 + 56))
                  {
                    sub_20E8C3FC4(*v246, (uint64_t)v464);
                    v259 = (std::__shared_weak_count *)v467.i64[0];
                  }
                  if (v259)
                  {
                    v260 = (unint64_t *)&v259->__shared_owners_;
                    do
                      v261 = __ldaxr(v260);
                    while (__stlxr(v261 - 1, v260));
                    if (!v261)
                    {
                      ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
                      std::__shared_weak_count::__release_weak(v259);
                    }
                  }
                  if (v254)
                  {
                    v262 = (unint64_t *)&v254->__shared_owners_;
                    do
                      v263 = __ldaxr(v262);
                    while (__stlxr(v263 - 1, v262));
                    if (!v263)
                    {
                      ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
                      std::__shared_weak_count::__release_weak(v254);
                    }
                  }
                  v264 = (std::__shared_weak_count *)v451;
                  v450 = 0.0;
                  v451 = 0;
                  if (v264)
                  {
                    v265 = (unint64_t *)&v264->__shared_owners_;
                    do
                      v266 = __ldaxr(v265);
                    while (__stlxr(v266 - 1, v265));
                    if (!v266)
                    {
                      ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
                      std::__shared_weak_count::__release_weak(v264);
                    }
                  }
                }
                v267 = *(uint64_t **)v445;
                if (*(_QWORD *)v445)
                {
                  v268 = v450;
                  if (v450 != 0.0)
                  {
                    v269 = (_QWORD *)(**(_QWORD **)v445 + 16);
                    if (*(char *)(**(_QWORD **)v445 + 39) < 0)
                      v269 = (_QWORD *)*v269;
                    v270 = *(int64x2_t *)&v445[8];
                    v271 = *(_DWORD *)&v445[24];
                    v272 = (uint64_t)v446;
                    v273 = v447;
                    v274 = *(double *)&v449;
                    v275 = (std::__shared_weak_count *)v451;
                    if (v451)
                    {
                      v276 = (unint64_t *)(v451 + 8);
                      do
                        v277 = __ldxr(v276);
                      while (__stxr(v277 + 1, v276));
                    }
                    v464[0].i64[0] = (uint64_t)v269;
                    *(int64x2_t *)((char *)v464 + 8) = v270;
                    v464[1].i32[2] = v271;
                    v465.i64[0] = v272;
                    v465.i32[2] = v273;
                    v466.f64[0] = v274;
                    v466.f64[1] = v268;
                    v467.i64[0] = (uint64_t)v275;
                    if (v275)
                    {
                      v278 = (unint64_t *)&v275->__shared_owners_;
                      do
                        v279 = __ldxr(v278);
                      while (__stxr(v279 + 1, v278));
                    }
                    v280 = v275;
                    if (v271 >= **(_DWORD **)(*v267 + 56))
                    {
                      sub_20E8C3FC4(*v267, (uint64_t)v464);
                      v280 = (std::__shared_weak_count *)v467.i64[0];
                    }
                    if (v280)
                    {
                      v281 = (unint64_t *)&v280->__shared_owners_;
                      do
                        v282 = __ldaxr(v281);
                      while (__stlxr(v282 - 1, v281));
                      if (!v282)
                      {
                        ((void (*)(std::__shared_weak_count *))v280->__on_zero_shared)(v280);
                        std::__shared_weak_count::__release_weak(v280);
                      }
                    }
                    if (v275)
                    {
                      v283 = (unint64_t *)&v275->__shared_owners_;
                      do
                        v284 = __ldaxr(v283);
                      while (__stlxr(v284 - 1, v283));
                      if (!v284)
                      {
                        ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
                        std::__shared_weak_count::__release_weak(v275);
                      }
                    }
                    v285 = (std::__shared_weak_count *)v451;
                    v450 = 0.0;
                    v451 = 0;
                    if (v285)
                    {
                      v286 = (unint64_t *)&v285->__shared_owners_;
                      do
                        v287 = __ldaxr(v286);
                      while (__stlxr(v287 - 1, v286));
                      if (!v287)
                      {
                        ((void (*)(std::__shared_weak_count *))v285->__on_zero_shared)(v285);
                        std::__shared_weak_count::__release_weak(v285);
                      }
                    }
                  }
                }
                goto LABEL_350;
              }
            }
            memmove(v224, v52, v51);
            goto LABEL_262;
          }
        }
        memmove(v217, v215, v216);
        goto LABEL_254;
      }
    }
    v464[0].i64[0] = a2;
    v65 = v24[3];
    v464[1] = v24[2];
    v465 = v65;
    v66 = a4[1];
    v466 = *a4;
    v467 = (int64x2_t)v66;
    v468.i8[0] = 1;
    if (vminnmvq_f64(vminnmq_f64(v466, v66)) > 0.0)
    {
LABEL_69:
      LODWORD(object[0]) = a2;
      if ((sub_20FB86290(v8 + 5168, (__int128 *)v464[0].i8, (unsigned int *)object, 0, 0) & 1) != 0)
      {
        *(_BYTE *)(v8 + 7828) = 0;
        *(_DWORD *)(v8 + 7824) = 0;
      }
      goto LABEL_19;
    }
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOPriorFactor.hpp", 564, (uint64_t)"prior_inverse_sigma->min() > 0", 30, (uint64_t)"The prior variance cannot be smaller than 0", 43, (void (*)(void **))sub_21023DDB0);
    v67 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v67 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68 || byte_254A6DE70)
    {
      v69 = qword_254A6DE40;
      v68 = qword_254A6DE48;
      while (v69 != v68)
      {
        v71 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v69;
        v70 = *(_QWORD *)(v69 + 8);
        v69 += 16;
        v71(v70, "prior_inverse_sigma->min() > 0", 30, "The prior variance cannot be smaller than 0", 43);
      }
    }
    v72 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v72 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (byte_254A6DE68)
    {
      qword_254A6DE58(unk_254A6DE60, "prior_inverse_sigma->min() > 0", 30, "The prior variance cannot be smaller than 0", 43);
      goto LABEL_69;
    }
LABEL_477:
    abort();
  }
LABEL_19:
  v26 = vmulq_f64(v5[1], v5[1]);
  v27 = vmulq_f64(*v5, *v5);
  v28 = (float64x2_t)vdupq_n_s64(0x3CB0000000000000uLL);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vcgtq_f64(v28, v27), (int32x4_t)vcgtq_f64(v28, v26)))) & 1) == 0)
  {
    v53 = *(char **)(v8 + 5752);
    v54 = *(char **)(v8 + 5760);
    if (v54 != v53)
    {
      v55 = (v54 - v53) >> 4;
      do
      {
        v56 = v55 >> 1;
        v57 = (unsigned __int32 *)&v53[16 * (v55 >> 1)];
        v59 = *v57;
        v58 = (char *)(v57 + 4);
        v55 += ~(v55 >> 1);
        if (v59 < a2)
          v53 = v58;
        else
          v55 = v56;
      }
      while (v55);
    }
    if (v53 == v54 || *(_DWORD *)v53 != a2)
      return;
    *(_QWORD *)(v8 + 67696) = *(_QWORD *)(v8 + 67688);
    v60 = (__int32 **)(v8 + 43200);
    *(_QWORD *)(v8 + 67720) = *(_QWORD *)(v8 + 67712);
    *(_QWORD *)(v8 + 67744) = *(_QWORD *)(v8 + 67736);
    *(_QWORD *)(v8 + 67768) = *(_QWORD *)(v8 + 67760);
    *(_QWORD *)(v8 + 67792) = *(_QWORD *)(v8 + 67784);
    *(_QWORD *)(v8 + 67816) = *(_QWORD *)(v8 + 67808);
    v61 = *(_DWORD **)(v8 + 67848);
    *(_QWORD *)(v8 + 67864) = *(_QWORD *)(v8 + 67856);
    *(_QWORD *)(v8 + 67888) = *(_QWORD *)(v8 + 67880);
    *(_QWORD *)(v8 + 67912) = *(_QWORD *)(v8 + 67904);
    v62 = *(_DWORD **)(v8 + 67832);
    *(_QWORD *)(v8 + 67840) = v62;
    if (v61 == v62)
    {
      v431 = v27;
      v434 = v26;
      if (v62)
      {
        *(_QWORD *)(v8 + 67840) = v62;
        operator delete(v62);
        *(_QWORD *)(v8 + 67832) = 0;
        *(_QWORD *)(v8 + 67840) = 0;
        *(_QWORD *)(v8 + 67848) = 0;
      }
      v62 = operator new(4uLL);
      *(_QWORD *)(v8 + 67832) = v62;
      *(_QWORD *)(v8 + 67840) = v62;
      *(_QWORD *)(v8 + 67848) = v62 + 1;
      v27 = v431;
      v26 = v434;
    }
    *v62 = a2;
    *(_QWORD *)(v8 + 67840) = v62 + 1;
    v63 = *v60;
    v64 = *(__int32 **)(v8 + 43208);
    if (*v60 != v64)
    {
      while (*v63 != a2)
      {
        if (++v63 == v64)
          return;
      }
    }
    if (v63 == v64)
      return;
    v432 = v27;
    v435 = v26;
    sub_20F8F2BC0(v8 + 67688, v8 + 43056, (uint64_t)dword_2103B93C4, v8 + 67928);
    LOBYTE(object[0]) = 0;
    v73 = v8 + 68168;
    v74 = v8 + 27856;
    memset(v464, 0, sizeof(v464));
    v465 = 0u;
    v466 = 0u;
    v467 = 0u;
    v468 = 0u;
    v469 = 0u;
    v470 = 0u;
    sub_20FB7CFE0(v8 + 27856, (uint64_t)v464, (unsigned int **)(v8 + 67928), (_DWORD **)(v8 + 67928), (char *)object);
    *(_QWORD *)&v75.f64[0] = vdupq_laneq_s64(v467, 1).u64[0];
    *(_QWORD *)&v75.f64[1] = v469.i64[1];
    v464[1] = vzip1q_s64(v467, v469);
    v466 = v75;
    v426 = v464[0].i64[0];
    v428 = v468.i64[0];
    v423 = v465.i64[1];
    v425 = v470.i64[1];
    v468 = vzip1q_s64(v468, v470);
    v464[0] = vzip1q_s64(v464[0], v465);
    object[1] = (void *)v464[0].i64[1];
    v455 = v464[1];
    v458 = v467;
    v460 = v468.i64[1];
    v461 = v469;
    v462 = v470.i64[0];
    __p[0] = (void *)v465.i64[0];
    v457 = v75;
    *(_QWORD *)&v75.f64[0] = v464[0].i64[0];
    *(_QWORD *)&v76.f64[0] = v468.i64[0];
    *(_QWORD *)&v75.f64[1] = v465.i64[1];
    *(_QWORD *)&v76.f64[1] = v470.i64[1];
    v77 = vaddq_f64(v432, v75);
    __p[1] = *(void **)&v77.f64[1];
    object[0] = *(void **)&v77.f64[0];
    v78 = vaddq_f64(v435, v76);
    v463 = v78.f64[1];
    v459 = v78.f64[0];
    sub_20F926890((_QWORD *)(v8 + 27856), (void **)(v8 + 68168));
    v79 = *(__int32 **)(v8 + 43208);
    v80 = wmemchr(*v60, a2, v79 - *v60);
    if (v80)
      v81 = v80;
    else
      v81 = v79;
    if (v81 == *(__int32 **)(v8 + 43208))
    {
      sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 535, (uint64_t)"prior_var_iter != variable_ids.end()", 36, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
      v82 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
      if ((v82 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
      {
        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DE78);
      }
      if (!byte_254A6DE68 || byte_254A6DE70)
      {
        v83 = qword_254A6DE40;
        for (i = qword_254A6DE48; v83 != i; v83 += 16)
          (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v83)(*(_QWORD *)(v83 + 8), "prior_var_iter != variable_ids.end()", 36, "", 0);
      }
      v85 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
      if ((v85 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
      {
        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DE78);
      }
      if (!byte_254A6DE68)
        abort();
      v74 = v8 + 27856;
      qword_254A6DE58(unk_254A6DE60, "prior_var_iter != variable_ids.end()", 36, "", 0);
    }
    v430 = (_QWORD *)v8;
    v86 = (((_DWORD)v81 - *(_DWORD *)v60) & 0xFFFFFFFC) + *(_DWORD *)(v8 + 27840);
    v87 = (void **)(v8 + 68192);
    v88 = *(unsigned int *)(v8 + 68184);
    v89 = *(_QWORD *)v73;
    if (*(_QWORD *)(v73 + 40) == (v88 | 0x400000000))
    {
      v90 = (char *)*v87;
    }
    else
    {
      v90 = (char *)*v87;
      if ((void *)v89 == *v87)
      {
        v171 = (char *)operator new(8 * (4 * v88), (std::align_val_t)0x20uLL);
        v172 = v171;
        if ((_DWORD)v88)
        {
          v173 = 8 * v88;
          memmove(v171, (const void *)(v89 + 8 * v86 * v88), 8 * v88);
          memmove(&v172[8 * v88], (const void *)(v89 + 8 * (v88 + v86 * (_DWORD)v88)), 8 * v88);
          memmove(&v172[v173 + v173], (const void *)(v89 + 8 * (v86 + 2) * v88), 8 * v88);
          memmove(&v172[v173 + v173 + v173], (const void *)(v89 + 8 * (v86 + 3) * v88), 8 * v88);
        }
        *(_QWORD *)(v73 + 24) = v172;
        *(_QWORD *)(v73 + 32) = (4 * v88);
        *(_DWORD *)(v73 + 40) = v88;
        *(_DWORD *)(v73 + 44) = 4;
        if (!v89)
          goto LABEL_215;
        goto LABEL_214;
      }
      *(_DWORD *)(v73 + 40) = v88;
      *(_DWORD *)(v73 + 44) = 4;
      if (*(_QWORD *)(v73 + 32) < (unint64_t)(4 * v88))
      {
        if (v90)
          MEMORY[0x212BC6368](v90, 0x1000C8000313F17);
        *(_QWORD *)(v73 + 24) = 0;
        *(_QWORD *)(v73 + 32) = 4 * v88;
        v90 = (char *)operator new(32 * v88, (std::align_val_t)0x20uLL);
        *v87 = v90;
      }
    }
    if ((char *)v89 != v90)
    {
      if ((_DWORD)v88)
      {
        memmove(v90, (const void *)(v89 + 8 * v86 * v88), 8 * v88);
        v169 = &v90[8 * v88];
        memmove(v169, (const void *)(v89 + 8 * (v88 + v86 * (_DWORD)v88)), 8 * v88);
        v170 = &v169[8 * v88];
        memmove(v170, (const void *)(v89 + 8 * (v86 + 2) * v88), 8 * v88);
        memmove(&v170[8 * v88], (const void *)(v89 + 8 * (v86 + 3) * v88), 8 * v88);
      }
      goto LABEL_215;
    }
    v209 = (8 * (*(_DWORD *)(v73 + 44) * *(_DWORD *)(v73 + 40)) + 31) & 0xFFFFFFFE0;
    v210 = (char *)operator new(v209, (std::align_val_t)0x20uLL);
    v211 = v210;
    v212 = v209 >> 3;
    if ((_DWORD)v88)
    {
      v213 = 8 * v88;
      memmove(v210, (const void *)(v89 + 8 * v86 * v88), 8 * v88);
      memmove(&v211[8 * v88], (const void *)(v89 + 8 * (v88 + v86 * (_DWORD)v88)), 8 * v88);
      memmove(&v211[v213 + v213], (const void *)(v89 + 8 * (v86 + 2) * v88), 8 * v88);
      memmove(&v211[v213 + v213 + v213], (const void *)(v89 + 8 * (v86 + 3) * v88), 8 * v88);
    }
    *(_QWORD *)(v73 + 24) = v211;
    *(_QWORD *)(v73 + 32) = v212;
    if (!v89)
    {
LABEL_215:
      v174 = *(unsigned int *)(v73 + 40);
      v175 = *(_QWORD *)(v73 + 24) + 8 * v86;
      v176 = v175 + 8 * v174;
      v177 = *(int64x2_t *)v176;
      v178 = (int64x2_t *)(v175 + 16 * v174);
      v179 = *v178;
      v180 = (int64x2_t *)(v175 + 24 * v174);
      v182 = *v180;
      v181 = v180[1];
      *(_QWORD *)&v183 = vdupq_laneq_s64(*v178, 1).u64[0];
      *((_QWORD *)&v183 + 1) = v180->i64[1];
      v184 = vzip1q_s64(v178[1], v181);
      v185 = vzip1q_s64(*v178, *v180);
      *(int64x2_t *)v175 = vzip1q_s64(*(int64x2_t *)v175, *(int64x2_t *)v176);
      *(int64x2_t *)(v175 + 16) = v185;
      *(int64x2_t *)v176 = v177;
      *(_OWORD *)(v176 + 16) = v183;
      *v178 = v179;
      v178[1] = v184;
      *v180 = v182;
      v180[1] = v181;
      LODWORD(v175) = *(_DWORD *)(v73 + 40);
      v186 = v175 - v86 - 4;
      LODWORD(v176) = *(_DWORD *)(v73 + 16);
      v187 = *(_QWORD *)v73;
      *(_DWORD *)v445 = 4;
      *(_DWORD *)&v445[4] = v186;
      *(_DWORD *)&v445[8] = v176;
      *(_QWORD *)&v445[16] = v187 + 8 * (v86 + (_DWORD)v176 * (v86 + 4));
      *(_DWORD *)&v445[24] = v86 + v176 * (v86 + 4);
      v188 = *(_QWORD *)(v73 + 24);
      v471 = (uint64_t *)(v186 | 0x400000000);
      LODWORD(p_src) = v175;
      v473 = (uint64_t *)(v188 + 8 * (v86 + 4));
      LODWORD(v474) = v86 + 4;
      if (v187 == v188)
      {
        *(_QWORD *)&v437 = 4 * v186;
        v189 = v430;
        __src = operator new(8 * v437, (std::align_val_t)0x20uLL);
        *((_QWORD *)&v437 + 1) = v186 | 0x400000000;
        sub_20F208630((int64x2_t *)&__src, (uint64_t)v445);
        if (DWORD2(v437))
        {
          v190 = HIDWORD(v437);
          if (HIDWORD(v437))
          {
            v191 = 0;
            v192 = (char *)__src;
            v193 = 8 * DWORD2(v437);
            v194 = 8 * SDWORD2(v437);
            do
            {
              memmove(&v473[(v474 + p_src * v191++) - v474], v192, v193);
              v192 += v194;
            }
            while (v190 != v191);
          }
        }
        if (__src)
          MEMORY[0x212BC6368](__src, 0x1000C8000313F17);
      }
      else
      {
        sub_20F208E50((uint64_t)&v471, (uint64_t)v445);
        v189 = v430;
      }
      sub_20E8BE4D4(v445);
      __src = (void *)(v73 + 24);
      *(_QWORD *)&v437 = v445;
      v444 = v73 + 24;
      p_src = (unint64_t)&__src;
      v473 = &v444;
      v474 = 0x3FF0000000000000;
      sub_20FB81B48(v73, (uint64_t)&v471);
      *(_QWORD *)&v445[8] = 4;
      v195 = operator new(0x20uLL, (std::align_val_t)0x20uLL);
      *(_QWORD *)v445 = v195;
      *(_QWORD *)&v196 = v426;
      *((_QWORD *)&v196 + 1) = v423;
      *(_DWORD *)&v445[16] = 4;
      *(_QWORD *)&v197 = v428;
      *((_QWORD *)&v197 + 1) = v425;
      *v195 = v196;
      v195[1] = v197;
      p_src = 4;
      v198 = (uint64_t *)operator new(0x20uLL, (std::align_val_t)0x20uLL);
      v471 = v198;
      LODWORD(v473) = 4;
      v199.n128_u64[1] = *(_QWORD *)&v435.f64[1];
      *(float64x2_t *)v198 = v432;
      *((float64x2_t *)v198 + 1) = v435;
      v199.n128_u64[0] = v189[260];
      v200 = sub_20FC8C504((uint64_t)v445, (double **)&v471, v73 + 48, v199);
      if (v471)
        MEMORY[0x212BC6368](v471, 0x1000C8000313F17);
      if (*(_QWORD *)v445)
        MEMORY[0x212BC6368](*(_QWORD *)v445, 0x1000C8000313F17);
      if (!v200)
        goto LABEL_469;
      v202 = atomic_load((unsigned __int8 *)&qword_254A6B820);
      if ((v202 & 1) == 0 && __cxa_guard_acquire(&qword_254A6B820))
      {
        v421 = atomic_load((unsigned __int8 *)&qword_254A6DDE0);
        if ((v421 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDE0))
        {
          sub_20E8BFCE4(&qword_254A6DDD8);
          __cxa_guard_release(&qword_254A6DDE0);
        }
        v471 = (uint64_t *)qword_254A6DDD8;
        v445[23] = 8;
        strcpy(v445, "cv3d.vio");
        sub_20E8C4068(&v471, (uint64_t)v445, &qword_254A6B818);
        if ((v445[23] & 0x80000000) != 0)
          operator delete(*(void **)v445);
        __cxa_guard_release(&qword_254A6B820);
        v189 = v430;
      }
      v444 = qword_254A6B818;
      if (**(int **)(qword_254A6B818 + 56) > 3
        || (v203 = *(unsigned __int8 *)(qword_254A6B818 + 72),
            v204 = sub_20E8C31DC(qword_254A6B818, "OSLogSurrogateAppender", 1, 0),
            v205 = v204,
            !v203)
        && !v204)
      {
LABEL_468:
        v363 = *(_DWORD *)(v73 + 16) + 1;
        v364 = (uint64_t *)(*(_QWORD *)v73 + 8 * v363 * v86);
        v365.i64[0] = v364[2 * v363];
        v365.i64[1] = v364[3 * v363];
        v366.i64[0] = *v364;
        v366.i64[1] = v364[v363];
        v201.i32[0] = **(_DWORD **)(v73 + 48);
        v367 = vmovl_u16((uint16x4_t)vceqz_s16((int16x4_t)*(_OWORD *)&vmovl_u8(v201)));
        v368.i64[0] = v367.u32[2];
        v368.i64[1] = v367.u32[3];
        v369 = (int8x16_t)vshrq_n_s64(vshlq_n_s64(v368, 0x38uLL), 0x38uLL);
        v368.i64[0] = v367.u32[0];
        v368.i64[1] = v367.u32[1];
        *(int8x16_t *)v445 = vbslq_s8((int8x16_t)vshrq_n_s64(vshlq_n_s64(v368, 0x38uLL), 0x38uLL), v366, (int8x16_t)v432);
        *(int8x16_t *)&v445[16] = vbslq_s8(v369, v365, (int8x16_t)v435);
        sub_20FB81834(v86, (__int128 *)v445, (uint64_t *)v73);
LABEL_469:
        v370 = v189 + 5282;
        v371 = *(_DWORD *)(v73 + 16);
        v372 = (*(_DWORD *)(v73 + 20) * v371);
        if ((_DWORD)v372)
        {
          v373 = 0;
          v374 = *(_QWORD *)v73;
          v375 = 8 * v372;
          v376 = *(_QWORD **)v73;
          do
          {
            v380 = 0;
            if (v373 <= HIDWORD(v373))
              v380 = *(_QWORD *)(v374 + 8 * (v373 + v371 * HIDWORD(v373)));
            *v376++ = v380;
            v377 = (v373 + 1);
            v378 = v373 & 0xFFFFFFFF00000000;
            v379 = v378 | v377;
            v373 = v378 + 0x100000000;
            if (v371 > (int)v377)
              v373 = v379;
            v375 -= 8;
          }
          while (v375);
        }
        v381 = *v370;
        v382 = v189[5283];
        v383 = 6 * *(_DWORD *)(*v370 + 8);
        *(_DWORD *)v445 = 0;
        *(_DWORD *)&v445[4] = v383;
        v384 = 9 * *(_DWORD *)(v189[5292] + 8);
        *(_DWORD *)&v445[8] = v383;
        *(_DWORD *)&v445[12] = v384;
        v385 = v384 + v383;
        v386 = 6 * *(_DWORD *)(v189[5302] + 8);
        *(_DWORD *)&v445[16] = v385;
        *(_DWORD *)&v445[20] = v386;
        v387 = v386 + v385;
        v388 = 6 * *(_DWORD *)(v189[5312] + 8);
        *(_DWORD *)&v445[24] = v387;
        *(_DWORD *)&v445[28] = v388;
        v389 = v388 + v387;
        v390 = 3 * *(_DWORD *)(v189[5322] + 8);
        v446 = (const char *)__PAIR64__(v390, v389);
        v391 = v390 + v389;
        v392 = *(_DWORD *)(v189[5332] + 8);
        v447 = v391;
        v448 = v392;
        v393 = v392 + v391;
        v394 = 4 * *(_DWORD *)(v189[5342] + 8);
        *(double *)&v449 = COERCE_DOUBLE(__PAIR64__(v394, v393));
        v395 = 4 * *(_DWORD *)(v189[5352] + 8);
        LODWORD(v450) = v394 + v393;
        HIDWORD(v450) = v395;
        v396 = v395 + v394 + v393;
        v397 = 3 * *(_DWORD *)(v189[5362] + 8);
        v451 = __PAIR64__(v397, v396);
        v398 = 3 * *(_DWORD *)(v189[5372] + 8);
        v452 = v397 + v396;
        v453 = v398;
        v399 = 6 * *(_DWORD *)(v381 + 12);
        LODWORD(v471) = 0;
        HIDWORD(v471) = v399;
        v400 = 9 * *(_DWORD *)(v382 + 12);
        p_src = __PAIR64__(v400, v399);
        v401 = v400 + v399;
        v402 = v189[5285];
        v403 = 6 * *(_DWORD *)(v189[5284] + 12);
        v473 = (uint64_t *)__PAIR64__(v403, v401);
        v404 = v403 + v401;
        v405 = 6 * *(_DWORD *)(v402 + 12);
        v474 = __PAIR64__(v405, v404);
        v406 = v405 + v404;
        v407 = v189[5287];
        v408 = 3 * *(_DWORD *)(v189[5286] + 12);
        v475 = v406;
        v476 = v408;
        v409 = v408 + v406;
        v410 = *(_DWORD *)(v407 + 12);
        v477 = (void **)__PAIR64__(v410, v409);
        v411 = v410 + v409;
        v412 = v189[5289];
        v413 = 4 * *(_DWORD *)(v189[5288] + 12);
        v478 = __PAIR64__(v413, v411);
        v414 = v413 + v411;
        v415 = 4 * *(_DWORD *)(v412 + 12);
        v479 = __PAIR64__(v415, v414);
        v416 = v415 + v414;
        v417 = v189[5291];
        v418 = 3 * *(_DWORD *)(v189[5290] + 12);
        v480 = v416;
        v481 = v418;
        LODWORD(v417) = 3 * *(_DWORD *)(v417 + 12);
        v482 = v418 + v416;
        v483 = v417;
        sub_20F8E0678(v74, (uint64_t *)v73, (unsigned int *)v445, (unsigned int *)&v471);
        return;
      }
      v429 = v203;
      __src = &v444;
      *(std::chrono::steady_clock::time_point *)&v437 = std::chrono::steady_clock::now();
      *((std::chrono::system_clock::time_point *)&v437 + 1) = std::chrono::system_clock::now();
      v438 = 3;
      v439 = "unknown file";
      v440 = 570;
      v442 = 0.0;
      v443 = 0;
      *(double *)&v441 = COERCE_DOUBLE("unknown function");
      v206 = *(_QWORD *)__src;
      v427 = *(_QWORD *)__src;
      if (*(char *)(*(_QWORD *)__src + 39) < 0)
      {
        v208 = *(const char **)(v206 + 16);
        v207 = *(_QWORD *)(v206 + 24);
      }
      else
      {
        v207 = *(unsigned __int8 *)(*(_QWORD *)__src + 39);
        v208 = (const char *)(*(_QWORD *)__src + 16);
      }
      v424 = *(_QWORD *)__src + 16;
      v422 = v74;
      v289 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v289 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)v445);
        if (v445[24])
        {
          *(_OWORD *)byte_254A4A4F8 = *(_OWORD *)v445;
          *(_QWORD *)&byte_254A4A4F8[16] = *(_QWORD *)&v445[16];
        }
        else
        {
          byte_254A4A4F8[23] = 14;
          strcpy(byte_254A4A4F8, "com.apple.cv3d");
        }
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v290 = byte_254A4A4F8[23];
      else
        v290 = *(_QWORD *)&byte_254A4A4F8[8];
      if (byte_254A4A4F8[23] >= 0)
        v291 = byte_254A4A4F8;
      else
        v291 = *(const char **)byte_254A4A4F8;
      v292 = v208;
      v471 = (uint64_t *)os_log_create(v291, v208);
      p_p_src = &p_src;
      if (v290 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v290 >= 0x17)
      {
        v294 = (v290 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v290 | 7) != 0x17)
          v294 = v290 | 7;
        v295 = v294 + 1;
        p_p_src = (unint64_t *)operator new(v294 + 1);
        v473 = (uint64_t *)v290;
        v474 = v295 | 0x8000000000000000;
        p_src = (unint64_t)p_p_src;
      }
      else
      {
        HIBYTE(v474) = v290;
        if (!v290)
        {
LABEL_370:
          *((_BYTE *)p_p_src + v290) = 0;
          LOBYTE(v475) = 1;
          v296 = (void **)&v477;
          if (v207 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          v189 = v430;
          if (v207 >= 0x17)
          {
            v297 = (v207 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v207 | 7) != 0x17)
              v297 = v207 | 7;
            v298 = v297 + 1;
            v296 = (void **)operator new(v297 + 1);
            v478 = v207;
            v479 = v298 | 0x8000000000000000;
            v477 = v296;
          }
          else
          {
            HIBYTE(v479) = v207;
            if (!v207)
            {
LABEL_378:
              *((_BYTE *)v296 + v207) = 0;
              LOBYTE(v480) = 1;
              v299 = v471;
              if (SHIBYTE(v479) < 0)
                operator delete(v477);
              v74 = v422;
              if ((_BYTE)v475 && SHIBYTE(v474) < 0)
                operator delete((void *)p_src);
              if (v471)
                os_release(v471);
              if (v205 && *(_QWORD *)(v205 + 24))
              {
                v300 = _os_log_pack_size();
                v301 = (std::__shared_weak_count_vtbl *)operator new(v300, (std::align_val_t)8uLL);
                v302 = (std::__shared_weak_count *)operator new();
                v303 = v302;
                v302->__shared_owners_ = 0;
                v304 = (unint64_t *)&v302->__shared_owners_;
                v302->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v302->__shared_weak_owners_ = 0;
                v302[1].__vftable = v301;
                do
                  v305 = __ldxr(v304);
                while (__stxr(v305 + 1, v304));
                do
                  v306 = __ldaxr(v304);
                while (__stlxr(v306 - 1, v304));
                if (!v306)
                {
                  ((void (*)(std::__shared_weak_count *))v302->__on_zero_shared)(v302);
                  std::__shared_weak_count::__release_weak(v303);
                }
                *(_WORD *)_os_log_pack_fill() = 0;
                v307 = operator new();
                v308 = *(unsigned __int8 *)(v427 + 39);
                v309 = v424;
                if ((v308 & 0x80u) != 0)
                {
                  v309 = *(_QWORD *)(v427 + 16);
                  v308 = *(_QWORD *)(v427 + 24);
                }
                *(_QWORD *)v307 = v301;
                *(_QWORD *)(v307 + 8) = v301;
                *(_QWORD *)(v307 + 16) = v303;
                *(_QWORD *)(v307 + 24) = 0;
                *(_QWORD *)(v307 + 32) = 0;
                *(_QWORD *)(v307 + 40) = v309;
                *(_QWORD *)(v307 + 48) = v308;
                *(_BYTE *)(v307 + 56) = 1;
                v471 = (uint64_t *)v307;
                (*(void (**)(_QWORD, uint64_t **))(**(_QWORD **)(v205 + 24) + 40))(*(_QWORD *)(v205 + 24), &v471);
                v74 = v422;
                v310 = v471;
                v471 = 0;
                if (v310)
                {
                  v311 = (std::__shared_weak_count *)v310[4];
                  if (v311)
                  {
                    v312 = (unint64_t *)&v311->__shared_owners_;
                    do
                      v313 = __ldaxr(v312);
                    while (__stlxr(v313 - 1, v312));
                    if (!v313)
                    {
                      ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
                      std::__shared_weak_count::__release_weak(v311);
                    }
                  }
                  v314 = (std::__shared_weak_count *)v310[2];
                  if (v314)
                  {
                    v315 = (unint64_t *)&v314->__shared_owners_;
                    do
                      v316 = __ldaxr(v315);
                    while (__stlxr(v316 - 1, v315));
                    if (!v316)
                    {
                      ((void (*)(std::__shared_weak_count *))v314->__on_zero_shared)(v314);
                      std::__shared_weak_count::__release_weak(v314);
                    }
                  }
                  MEMORY[0x212BC6398](v310, 0x10F0C40B62ED6C6);
                }
              }
              else
              {
                os_log_type_enabled(v299, OS_LOG_TYPE_INFO);
                *(_WORD *)v445 = 0;
                v317 = (void *)_os_log_send_and_compose_impl();
                if (v317)
                  free(v317);
              }
              if (v429)
              {
                sub_20E8C003C((uint64_t)&__src, "Special case to handle Err. Propagation order of magnitude disparity.");
                v318 = (uint64_t *)__src;
                if (!__src || (v319 = v442, v442 == 0.0))
                {
LABEL_463:
                  v360 = v443;
                  if (v443)
                  {
                    v361 = (unint64_t *)&v443->__shared_owners_;
                    do
                      v362 = __ldaxr(v361);
                    while (__stlxr(v362 - 1, v361));
                    if (!v362)
                    {
                      ((void (*)(std::__shared_weak_count *))v360->__on_zero_shared)(v360);
                      std::__shared_weak_count::__release_weak(v360);
                    }
                  }
                  goto LABEL_468;
                }
                v320 = (_QWORD *)(*(_QWORD *)__src + 16);
                if (*(char *)(*(_QWORD *)__src + 39) < 0)
                  v320 = (_QWORD *)*v320;
                v321 = v437;
                v322 = v438;
                v323 = v439;
                v324 = v440;
                v325 = v441;
                v326 = v443;
                if (v443)
                {
                  v327 = (unint64_t *)&v443->__shared_owners_;
                  do
                    v328 = __ldxr(v327);
                  while (__stxr(v328 + 1, v327));
                }
                *(_QWORD *)v445 = v320;
                *(_OWORD *)&v445[8] = v321;
                *(_DWORD *)&v445[24] = v322;
                v446 = v323;
                v447 = v324;
                v449 = v325;
                v450 = v319;
                v451 = (unint64_t)v326;
                if (v326)
                {
                  v329 = (unint64_t *)&v326->__shared_owners_;
                  do
                    v330 = __ldxr(v329);
                  while (__stxr(v330 + 1, v329));
                }
                v331 = v326;
                if (v322 >= **(_DWORD **)(*v318 + 56))
                {
                  sub_20E8C3FC4(*v318, (uint64_t)v445);
                  v331 = (std::__shared_weak_count *)v451;
                }
                if (v331)
                {
                  v332 = (unint64_t *)&v331->__shared_owners_;
                  do
                    v333 = __ldaxr(v332);
                  while (__stlxr(v333 - 1, v332));
                  if (!v333)
                  {
                    ((void (*)(std::__shared_weak_count *))v331->__on_zero_shared)(v331);
                    std::__shared_weak_count::__release_weak(v331);
                  }
                }
                if (v326)
                {
                  v334 = (unint64_t *)&v326->__shared_owners_;
                  do
                    v335 = __ldaxr(v334);
                  while (__stlxr(v335 - 1, v334));
                  if (!v335)
                  {
                    ((void (*)(std::__shared_weak_count *))v326->__on_zero_shared)(v326);
                    std::__shared_weak_count::__release_weak(v326);
                  }
                }
                v336 = v443;
                v442 = 0.0;
                v443 = 0;
                if (v336)
                {
                  v337 = (unint64_t *)&v336->__shared_owners_;
                  do
                    v338 = __ldaxr(v337);
                  while (__stlxr(v338 - 1, v337));
                  if (!v338)
                  {
                    ((void (*)(std::__shared_weak_count *))v336->__on_zero_shared)(v336);
                    std::__shared_weak_count::__release_weak(v336);
                  }
                }
              }
              v339 = (uint64_t *)__src;
              if (__src)
              {
                v340 = v442;
                if (v442 != 0.0)
                {
                  v341 = (_QWORD *)(*(_QWORD *)__src + 16);
                  if (*(char *)(*(_QWORD *)__src + 39) < 0)
                    v341 = (_QWORD *)*v341;
                  v342 = v437;
                  v343 = v438;
                  v344 = v439;
                  v345 = v440;
                  v346 = v441;
                  v347 = v443;
                  if (v443)
                  {
                    v348 = (unint64_t *)&v443->__shared_owners_;
                    do
                      v349 = __ldxr(v348);
                    while (__stxr(v349 + 1, v348));
                  }
                  *(_QWORD *)v445 = v341;
                  *(_OWORD *)&v445[8] = v342;
                  *(_DWORD *)&v445[24] = v343;
                  v446 = v344;
                  v447 = v345;
                  v449 = v346;
                  v450 = v340;
                  v451 = (unint64_t)v347;
                  if (v347)
                  {
                    v350 = (unint64_t *)&v347->__shared_owners_;
                    do
                      v351 = __ldxr(v350);
                    while (__stxr(v351 + 1, v350));
                  }
                  v352 = v347;
                  if (v343 >= **(_DWORD **)(*v339 + 56))
                  {
                    sub_20E8C3FC4(*v339, (uint64_t)v445);
                    v352 = (std::__shared_weak_count *)v451;
                  }
                  if (v352)
                  {
                    v353 = (unint64_t *)&v352->__shared_owners_;
                    do
                      v354 = __ldaxr(v353);
                    while (__stlxr(v354 - 1, v353));
                    if (!v354)
                    {
                      ((void (*)(std::__shared_weak_count *))v352->__on_zero_shared)(v352);
                      std::__shared_weak_count::__release_weak(v352);
                    }
                  }
                  if (v347)
                  {
                    v355 = (unint64_t *)&v347->__shared_owners_;
                    do
                      v356 = __ldaxr(v355);
                    while (__stlxr(v356 - 1, v355));
                    if (!v356)
                    {
                      ((void (*)(std::__shared_weak_count *))v347->__on_zero_shared)(v347);
                      std::__shared_weak_count::__release_weak(v347);
                    }
                  }
                  v357 = v443;
                  v442 = 0.0;
                  v443 = 0;
                  if (v357)
                  {
                    v358 = (unint64_t *)&v357->__shared_owners_;
                    do
                      v359 = __ldaxr(v358);
                    while (__stlxr(v359 - 1, v358));
                    if (!v359)
                    {
                      ((void (*)(std::__shared_weak_count *))v357->__on_zero_shared)(v357);
                      std::__shared_weak_count::__release_weak(v357);
                    }
                  }
                }
              }
              goto LABEL_463;
            }
          }
          memmove(v296, v292, v207);
          goto LABEL_378;
        }
      }
      memmove(p_p_src, v291, v290);
      goto LABEL_370;
    }
LABEL_214:
    MEMORY[0x212BC6368](v89, 0x1000C8000313F17);
    goto LABEL_215;
  }
  v29 = atomic_load((unsigned __int8 *)&qword_254A6B820);
  if ((v29 & 1) == 0 && __cxa_guard_acquire(&qword_254A6B820))
  {
    v419 = atomic_load((unsigned __int8 *)&qword_254A6DDE0);
    if ((v419 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDE0))
    {
      sub_20E8BFCE4(&qword_254A6DDD8);
      __cxa_guard_release(&qword_254A6DDE0);
    }
    object[0] = (void *)qword_254A6DDD8;
    v464[1].i8[7] = 8;
    strcpy(v464[0].i8, "cv3d.vio");
    sub_20E8C4068((uint64_t **)object, (uint64_t)v464, &qword_254A6B818);
    if (v464[1].i8[7] < 0)
      operator delete((void *)v464[0].i64[0]);
    __cxa_guard_release(&qword_254A6B820);
  }
  v471 = (uint64_t *)qword_254A6B818;
  if (**(int **)(qword_254A6B818 + 56) <= 2)
  {
    v30 = *(unsigned __int8 *)(qword_254A6B818 + 72);
    v31 = sub_20E8C31DC(qword_254A6B818, "OSLogSurrogateAppender", 1, 0);
    v32 = v31;
    if (v30 || v31)
    {
      *(_QWORD *)v445 = &v471;
      *(std::chrono::steady_clock::time_point *)&v445[8] = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&v445[16] = std::chrono::system_clock::now();
      *(_DWORD *)&v445[24] = 2;
      v446 = "unknown file";
      v447 = 476;
      v450 = 0.0;
      v451 = 0;
      *(double *)&v449 = COERCE_DOUBLE("unknown function");
      v33 = v471;
      v34 = v471 + 2;
      if (*((char *)v471 + 39) < 0)
      {
        v36 = (const char *)v471[2];
        v35 = v471[3];
      }
      else
      {
        v35 = *((unsigned __int8 *)v471 + 39);
        v36 = (const char *)(**(_QWORD **)v445 + 16);
      }
      v91 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v91 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)v464);
        if (v464[1].i8[8])
        {
          *(int64x2_t *)byte_254A4A4F8 = v464[0];
          *(_QWORD *)&byte_254A4A4F8[16] = v464[1].i64[0];
        }
        else
        {
          byte_254A4A4F8[23] = 14;
          strcpy(byte_254A4A4F8, "com.apple.cv3d");
        }
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v92 = byte_254A4A4F8;
      else
        v92 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v93 = byte_254A4A4F8[23];
      else
        v93 = *(_QWORD *)&byte_254A4A4F8[8];
      object[0] = os_log_create(v92, v36);
      v94 = &object[1];
      if (v93 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v93 >= 0x17)
      {
        v95 = v32;
        v96 = v36;
        v97 = v33;
        v98 = v30;
        v99 = v34;
        v100 = (v93 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v93 | 7) != 0x17)
          v100 = v93 | 7;
        v101 = v100 + 1;
        v94 = (void **)operator new(v100 + 1);
        v455.i64[0] = v93;
        v455.i64[1] = v101 | 0x8000000000000000;
        object[1] = v94;
        v34 = v99;
        v30 = v98;
        v33 = v97;
        v36 = v96;
        v32 = v95;
      }
      else
      {
        v455.i8[15] = v93;
        if (!v93)
        {
LABEL_102:
          *((_BYTE *)v94 + v93) = 0;
          LOBYTE(__p[0]) = 1;
          v102 = &__p[1];
          if (v35 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v35 >= 0x17)
          {
            v103 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v35 | 7) != 0x17)
              v103 = v35 | 7;
            v104 = v103 + 1;
            v102 = (void **)operator new(v103 + 1);
            *(_QWORD *)&v457.f64[0] = v35;
            *(_QWORD *)&v457.f64[1] = v104 | 0x8000000000000000;
            __p[1] = v102;
          }
          else
          {
            HIBYTE(v457.f64[1]) = v35;
            if (!v35)
            {
LABEL_110:
              *((_BYTE *)v102 + v35) = 0;
              v458.i8[0] = 1;
              v105 = object[0];
              if (SHIBYTE(v457.f64[1]) < 0)
                operator delete(__p[1]);
              if (LOBYTE(__p[0]) && v455.i8[15] < 0)
                operator delete(object[1]);
              if (object[0])
                os_release(object[0]);
              if (v32 && *(_QWORD *)(v32 + 24))
              {
                v106 = _os_log_pack_size();
                v107 = (std::__shared_weak_count_vtbl *)operator new(v106, (std::align_val_t)8uLL);
                v108 = (std::__shared_weak_count *)operator new();
                v109 = v108;
                v108->__shared_owners_ = 0;
                v110 = (unint64_t *)&v108->__shared_owners_;
                v108->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v108->__shared_weak_owners_ = 0;
                v108[1].__vftable = v107;
                do
                  v111 = __ldxr(v110);
                while (__stxr(v111 + 1, v110));
                do
                  v112 = __ldaxr(v110);
                while (__stlxr(v112 - 1, v110));
                if (!v112)
                {
                  ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                  std::__shared_weak_count::__release_weak(v109);
                }
                *(_WORD *)_os_log_pack_fill() = 0;
                v113 = (_QWORD *)operator new();
                v114 = *((unsigned __int8 *)v33 + 39);
                if ((v114 & 0x80u) == 0)
                  v115 = v34;
                else
                  v115 = (uint64_t *)v33[2];
                if ((v114 & 0x80u) != 0)
                  v114 = v33[3];
                *v113 = v107;
                v113[1] = v107;
                v113[2] = v109;
                v113[3] = 0;
                v113[4] = 0;
                v113[5] = v115;
                v113[6] = v114;
                *((_BYTE *)v113 + 56) = 2;
                object[0] = v113;
                (*(void (**)(_QWORD, void **))(**(_QWORD **)(v32 + 24) + 40))(*(_QWORD *)(v32 + 24), object);
                v116 = object[0];
                object[0] = 0;
                if (v116)
                {
                  v117 = (std::__shared_weak_count *)*((_QWORD *)v116 + 4);
                  if (v117)
                  {
                    v118 = (unint64_t *)&v117->__shared_owners_;
                    do
                      v119 = __ldaxr(v118);
                    while (__stlxr(v119 - 1, v118));
                    if (!v119)
                    {
                      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                      std::__shared_weak_count::__release_weak(v117);
                    }
                  }
                  v120 = (std::__shared_weak_count *)*((_QWORD *)v116 + 2);
                  if (v120)
                  {
                    v121 = (unint64_t *)&v120->__shared_owners_;
                    do
                      v122 = __ldaxr(v121);
                    while (__stlxr(v122 - 1, v121));
                    if (!v122)
                    {
                      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
                      std::__shared_weak_count::__release_weak(v120);
                    }
                  }
                  MEMORY[0x212BC6398](v116, 0x10F0C40B62ED6C6);
                }
              }
              else
              {
                os_log_type_enabled(v105, OS_LOG_TYPE_DEBUG);
                v464[0].i16[0] = 0;
                v123 = (void *)_os_log_send_and_compose_impl();
                if (v123)
                  free(v123);
              }
              if (v30)
              {
                sub_20E8C003C((uint64_t)v445, "Limit the amount of noise used in error propagation; inverse noise should be GT 0.");
                v124 = *(uint64_t **)v445;
                if (!*(_QWORD *)v445 || (v125 = v450, v450 == 0.0))
                {
LABEL_198:
                  v166 = (std::__shared_weak_count *)v451;
                  if (!v451)
                    return;
                  v167 = (unint64_t *)(v451 + 8);
                  do
                    v168 = __ldaxr(v167);
                  while (__stlxr(v168 - 1, v167));
LABEL_201:
                  if (!v168)
                  {
                    ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
                    std::__shared_weak_count::__release_weak(v166);
                  }
                  return;
                }
                v126 = (_QWORD *)(**(_QWORD **)v445 + 16);
                if (*(char *)(**(_QWORD **)v445 + 39) < 0)
                  v126 = (_QWORD *)*v126;
                v127 = *(int64x2_t *)&v445[8];
                v128 = *(_DWORD *)&v445[24];
                v129 = (uint64_t)v446;
                v130 = v447;
                v131 = *(double *)&v449;
                v132 = (std::__shared_weak_count *)v451;
                if (v451)
                {
                  v133 = (unint64_t *)(v451 + 8);
                  do
                    v134 = __ldxr(v133);
                  while (__stxr(v134 + 1, v133));
                }
                v464[0].i64[0] = (uint64_t)v126;
                *(int64x2_t *)((char *)v464 + 8) = v127;
                v464[1].i32[2] = v128;
                v465.i64[0] = v129;
                v465.i32[2] = v130;
                v466.f64[0] = v131;
                v466.f64[1] = v125;
                v467.i64[0] = (uint64_t)v132;
                if (v132)
                {
                  v135 = (unint64_t *)&v132->__shared_owners_;
                  do
                    v136 = __ldxr(v135);
                  while (__stxr(v136 + 1, v135));
                }
                v137 = v132;
                if (v128 >= **(_DWORD **)(*v124 + 56))
                {
                  sub_20E8C3FC4(*v124, (uint64_t)v464);
                  v137 = (std::__shared_weak_count *)v467.i64[0];
                }
                if (v137)
                {
                  v138 = (unint64_t *)&v137->__shared_owners_;
                  do
                    v139 = __ldaxr(v138);
                  while (__stlxr(v139 - 1, v138));
                  if (!v139)
                  {
                    ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
                    std::__shared_weak_count::__release_weak(v137);
                  }
                }
                if (v132)
                {
                  v140 = (unint64_t *)&v132->__shared_owners_;
                  do
                    v141 = __ldaxr(v140);
                  while (__stlxr(v141 - 1, v140));
                  if (!v141)
                  {
                    ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
                    std::__shared_weak_count::__release_weak(v132);
                  }
                }
                v142 = (std::__shared_weak_count *)v451;
                v450 = 0.0;
                v451 = 0;
                if (v142)
                {
                  v143 = (unint64_t *)&v142->__shared_owners_;
                  do
                    v144 = __ldaxr(v143);
                  while (__stlxr(v144 - 1, v143));
                  if (!v144)
                  {
                    ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
                    std::__shared_weak_count::__release_weak(v142);
                  }
                }
              }
              v145 = *(uint64_t **)v445;
              if (*(_QWORD *)v445)
              {
                v146 = v450;
                if (v450 != 0.0)
                {
                  v147 = (_QWORD *)(**(_QWORD **)v445 + 16);
                  if (*(char *)(**(_QWORD **)v445 + 39) < 0)
                    v147 = (_QWORD *)*v147;
                  v148 = *(int64x2_t *)&v445[8];
                  v149 = *(_DWORD *)&v445[24];
                  v150 = (uint64_t)v446;
                  v151 = v447;
                  v152 = *(double *)&v449;
                  v153 = (std::__shared_weak_count *)v451;
                  if (v451)
                  {
                    v154 = (unint64_t *)(v451 + 8);
                    do
                      v155 = __ldxr(v154);
                    while (__stxr(v155 + 1, v154));
                  }
                  v464[0].i64[0] = (uint64_t)v147;
                  *(int64x2_t *)((char *)v464 + 8) = v148;
                  v464[1].i32[2] = v149;
                  v465.i64[0] = v150;
                  v465.i32[2] = v151;
                  v466.f64[0] = v152;
                  v466.f64[1] = v146;
                  v467.i64[0] = (uint64_t)v153;
                  if (v153)
                  {
                    v156 = (unint64_t *)&v153->__shared_owners_;
                    do
                      v157 = __ldxr(v156);
                    while (__stxr(v157 + 1, v156));
                  }
                  v158 = v153;
                  if (v149 >= **(_DWORD **)(*v145 + 56))
                  {
                    sub_20E8C3FC4(*v145, (uint64_t)v464);
                    v158 = (std::__shared_weak_count *)v467.i64[0];
                  }
                  if (v158)
                  {
                    v159 = (unint64_t *)&v158->__shared_owners_;
                    do
                      v160 = __ldaxr(v159);
                    while (__stlxr(v160 - 1, v159));
                    if (!v160)
                    {
                      ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
                      std::__shared_weak_count::__release_weak(v158);
                    }
                  }
                  if (v153)
                  {
                    v161 = (unint64_t *)&v153->__shared_owners_;
                    do
                      v162 = __ldaxr(v161);
                    while (__stlxr(v162 - 1, v161));
                    if (!v162)
                    {
                      ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
                      std::__shared_weak_count::__release_weak(v153);
                    }
                  }
                  v163 = (std::__shared_weak_count *)v451;
                  v450 = 0.0;
                  v451 = 0;
                  if (v163)
                  {
                    v164 = (unint64_t *)&v163->__shared_owners_;
                    do
                      v165 = __ldaxr(v164);
                    while (__stlxr(v165 - 1, v164));
                    if (!v165)
                    {
                      ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
                      std::__shared_weak_count::__release_weak(v163);
                    }
                  }
                }
              }
              goto LABEL_198;
            }
          }
          memmove(v102, v36, v35);
          goto LABEL_110;
        }
      }
      memmove(v94, v92, v93);
      goto LABEL_102;
    }
  }
}

void sub_20FB85580(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A6DDE0);
  __cxa_guard_abort(&qword_254A6B820);
  _Unwind_Resume(a1);
}

void sub_20FB855AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t *a27,__int128 a28,int a29,uint64_t a30,int a31,uint64_t a32,uint64_t a33,std::__shared_weak_count *a34,uint64_t a35,void *__p,__int128 a37,int a38,uint64_t a39,int a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  _QWORD *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;

  __cxa_guard_abort(&qword_254A4A510);
  if (a27 && a33)
  {
    v44 = (_QWORD *)(*a27 + 16);
    if (*(char *)(*a27 + 39) < 0)
      v44 = (_QWORD *)*v44;
    if (a34)
    {
      p_shared_owners = (unint64_t *)&a34->__shared_owners_;
      do
        v46 = __ldxr(p_shared_owners);
      while (__stxr(v46 + 1, p_shared_owners));
    }
    __p = v44;
    a37 = a28;
    a38 = a29;
    a39 = a30;
    a40 = a31;
    a41 = a32;
    a42 = a33;
    a43 = (uint64_t)a34;
    if (a34)
    {
      v47 = (unint64_t *)&a34->__shared_owners_;
      do
        v48 = __ldxr(v47);
      while (__stxr(v48 + 1, v47));
    }
    v49 = a34;
    if (a29 >= **(_DWORD **)(*a27 + 56))
    {
      sub_20E8C3FC4(*a27, (uint64_t)&__p);
      v49 = (std::__shared_weak_count *)a43;
    }
    if (v49)
    {
      v50 = (unint64_t *)&v49->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    if (a34)
    {
      v52 = (unint64_t *)&a34->__shared_owners_;
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))a34->__on_zero_shared)(a34);
        std::__shared_weak_count::__release_weak(a34);
      }
    }
    v54 = a34;
    a34 = 0;
    if (v54)
    {
      v55 = (unint64_t *)&v54->__shared_owners_;
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
  }
  if (a34)
  {
    v57 = (unint64_t *)&a34->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))a34->__on_zero_shared)(a34);
      std::__shared_weak_count::__release_weak(a34);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20FB86290(uint64_t a1, __int128 *a2, unsigned int *a3, uint64_t a4, std::__shared_weak_count *a5)
{
  unint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  char *v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int *v27;
  char *v28;
  unsigned int v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  __int128 v42;
  __int128 v43;
  _QWORD *v44;
  __int128 v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  unint64_t v55;
  char *v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  char *v60;
  char *v61;
  __int128 v62;
  __int128 v63;
  char *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  _OWORD *v68;
  _OWORD *v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  char *v80;
  _BYTE *v81;
  int v82;
  int v83;
  _BYTE *v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  char *v92;
  char *v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  char *v98;
  char *v99;
  __int128 v100;
  __int128 v101;
  char *v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  char *v107;
  char *v108;
  __int128 v109;
  __int128 v110;
  char *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  __int128 v116;
  char *v117;
  __int128 v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  char v127;
  int v128;
  char *v129;
  uint64_t v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  char v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  _OWORD v144[2];
  char v145;
  uint64_t v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  unint64_t v151;
  char v152;
  __int128 v153;
  char v154;
  __int128 v155;
  __int128 v156;
  uint64_t v157;
  unint64_t v158;
  char v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  _OWORD v165[2];
  uint64_t v166;

  v166 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)a2;
  v9 = *(char **)(a1 + 1352);
  v10 = *(char **)(a1 + 1360);
  if (v9 == v10)
  {
    v10 = *(char **)(a1 + 1352);
  }
  else if (*((_QWORD *)v10 - 26) >= v8)
  {
    v11 = 0x4EC4EC4EC4EC4EC5 * ((v10 - v9) >> 4);
    do
    {
      v12 = v11 >> 1;
      v13 = &v9[208 * (v11 >> 1)];
      v15 = *(_QWORD *)v13;
      v14 = v13 + 208;
      v11 += ~(v11 >> 1);
      if (v15 < v8)
        v9 = v14;
      else
        v11 = v12;
    }
    while (v11);
    if (v9 != v10)
    {
      v10 = v9;
      if (*(_QWORD *)v9 == v8)
        return 0;
    }
  }
  if (a5)
  {
    p_shared_owners = (unint64_t *)&a5->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  v131 = *a2;
  v132 = a2[1];
  v133 = a2[2];
  LOBYTE(v134) = 0;
  v136 = 0;
  if (*((_BYTE *)a2 + 80))
  {
    v134 = a2[3];
    v135 = a2[4];
    v136 = 1;
  }
  *(_QWORD *)&v141 = a4;
  *((_QWORD *)&v141 + 1) = a5;
  if (a5)
  {
    v19 = (unint64_t *)&a5->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))a5->__on_zero_shared)(a5);
      std::__shared_weak_count::__release_weak(a5);
    }
  }
  v22 = *a3;
  v23 = *(char **)(a1 + 584);
  v24 = *(char **)(a1 + 592);
  if (v24 != v23)
  {
    v25 = (v24 - v23) >> 4;
    do
    {
      v26 = v25 >> 1;
      v27 = (unsigned int *)&v23[16 * (v25 >> 1)];
      v29 = *v27;
      v28 = (char *)(v27 + 4);
      v25 += ~(v25 >> 1);
      if (v29 < v22)
        v23 = v28;
      else
        v25 = v26;
    }
    while (v25);
  }
  if (v23 == v24 || *(_DWORD *)v23 != v22)
  {
    v16 = 0;
  }
  else
  {
    v30 = *((_QWORD *)v23 + 1);
    ++*(_DWORD *)(v30 + 8);
    if (*(_BYTE *)(v30 + 20))
    {
      v142 = v132;
      v143 = v133;
      LOBYTE(v144[0]) = 0;
      v145 = 0;
      if (v136)
      {
        v144[0] = v134;
        v144[1] = v135;
        v145 = 1;
      }
      v147 = v137;
      v148 = v138;
      v149 = v139;
      v150 = v140;
      v146 = v30;
      v151 = 0xBFF0000000000000;
      v152 = 0;
      v31 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
      v153 = v141;
      *((_QWORD *)&v141 + 1) = 0;
      v154 = 0;
      v32 = *(char **)(a1 + 1360);
      if (v32 == v10 || *(_QWORD *)v10 != v8)
      {
        a2 = &v142;
        v33 = *(char **)(a1 + 1352);
        v34 = v10 - v33;
        v129 = v33;
        v130 = (v10 - v33) / 208;
        v35 = &v33[208 * v130];
        v36 = *(_QWORD *)(a1 + 1368);
        if ((unint64_t)v32 >= v36)
        {
          v37 = 0x4EC4EC4EC4EC4EC5 * ((v32 - v33) >> 4) + 1;
          if (v37 > 0x13B13B13B13B13BLL)
            sub_20E867F44();
          if (0x9D89D89D89D89D8ALL * ((uint64_t)(v36 - (_QWORD)v33) >> 4) > v37)
            v37 = 0x9D89D89D89D89D8ALL * ((uint64_t)(v36 - (_QWORD)v33) >> 4);
          if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v36 - (_QWORD)v33) >> 4)) >= 0x9D89D89D89D89DLL)
            v38 = 0x13B13B13B13B13BLL;
          else
            v38 = v37;
          v157 = a1 + 1368;
          if (v38)
          {
            if (v38 > 0x13B13B13B13B13BLL)
              sub_20E877A38();
            v39 = (char *)operator new(208 * v38);
            v40 = v130;
            a2 = &v142;
          }
          else
          {
            v39 = 0;
            v40 = (v10 - v33) / 208;
          }
          v50 = &v39[208 * v40];
          *(_QWORD *)&v155 = v39;
          *((_QWORD *)&v155 + 1) = v50;
          *(_QWORD *)&v156 = v50;
          *((_QWORD *)&v156 + 1) = &v39[208 * v38];
          if (v40 == v38)
          {
            if (v34 < 1)
            {
              if (v129 == v10)
                v86 = 1;
              else
                v86 = 2 * v40;
              if (v86 > 0x13B13B13B13B13BLL)
                sub_20E877A38();
              v87 = (char *)operator new(208 * v86);
              v50 = &v87[208 * (v86 >> 2)];
              *(_QWORD *)&v155 = v87;
              *((_QWORD *)&v155 + 1) = v50;
              *(_QWORD *)&v156 = v50;
              *((_QWORD *)&v156 + 1) = &v87[208 * v86];
              if (v39)
                operator delete(v39);
              a2 = &v142;
            }
            else
            {
              v51 = v40 + 2;
              if (v40 >= -1)
                v51 = v40 + 1;
              v50 -= 208 * (v51 >> 1);
              *((_QWORD *)&v155 + 1) = v50;
              *(_QWORD *)&v156 = v50;
            }
          }
          *(_QWORD *)v50 = v8;
          *(_OWORD *)(v50 + 8) = v131;
          v88 = v143;
          *(_OWORD *)(v50 + 24) = v142;
          *(_OWORD *)(v50 + 40) = v88;
          v50[56] = 0;
          v50[88] = 0;
          if (v145)
          {
            v89 = v144[1];
            *(_OWORD *)(v50 + 56) = v144[0];
            *(_OWORD *)(v50 + 72) = v89;
            v50[88] = 1;
          }
          *((_QWORD *)v50 + 12) = v146;
          v90 = v148;
          *(_OWORD *)(v50 + 104) = v147;
          *(_OWORD *)(v50 + 120) = v90;
          v91 = v149;
          *(_OWORD *)(v50 + 152) = v150;
          *(_OWORD *)(v50 + 136) = v91;
          *((_QWORD *)v50 + 21) = v151;
          v50[176] = v152;
          *(_OWORD *)(v50 + 184) = v153;
          v153 = 0uLL;
          v50[200] = v154;
          v92 = v50 + 208;
          *(_QWORD *)&v156 = v50 + 208;
          v93 = *(char **)(a1 + 1352);
          if (v93 != v35)
          {
            v94 = 0;
            do
            {
              v98 = &v50[v94];
              v99 = &v35[v94];
              *((_QWORD *)v98 - 26) = *(_QWORD *)&v35[v94 - 208];
              *(_OWORD *)(v98 - 200) = *(_OWORD *)&v35[v94 - 200];
              v100 = *(_OWORD *)&v35[v94 - 184];
              *(_OWORD *)(v98 - 168) = *(_OWORD *)&v35[v94 - 168];
              *(_OWORD *)(v98 - 184) = v100;
              v50[v94 - 152] = 0;
              *(v98 - 120) = 0;
              if (v35[v94 - 120])
              {
                v101 = *(_OWORD *)(v99 - 136);
                *(_OWORD *)&v50[v94 - 152] = *(_OWORD *)(v99 - 152);
                *(_OWORD *)&v50[v94 - 136] = v101;
                *(v98 - 120) = 1;
              }
              *((_QWORD *)v98 - 14) = *((_QWORD *)v99 - 14);
              v95 = *(_OWORD *)(v99 - 104);
              *(_OWORD *)(v98 - 88) = *(_OWORD *)(v99 - 88);
              *(_OWORD *)(v98 - 104) = v95;
              v96 = *(_OWORD *)(v99 - 72);
              *(_OWORD *)(v98 - 56) = *(_OWORD *)(v99 - 56);
              *(_OWORD *)(v98 - 72) = v96;
              v97 = *((_QWORD *)v99 - 5);
              *(v98 - 32) = *(v99 - 32);
              *((_QWORD *)v98 - 5) = v97;
              *(_OWORD *)(v98 - 24) = *(_OWORD *)(v99 - 24);
              *((_QWORD *)v99 - 3) = 0;
              *((_QWORD *)v99 - 2) = 0;
              *(v98 - 8) = *(v99 - 8);
              v94 -= 208;
            }
            while (&v35[v94] != v93);
            v92 = (char *)v156;
            v50 += v94;
          }
          v102 = *(char **)(a1 + 1360);
          if (v102 != v35)
          {
            v103 = 0;
            do
            {
              v107 = &v35[v103];
              v108 = &v92[v103];
              *(_QWORD *)v108 = *(_QWORD *)&v35[v103];
              *(_OWORD *)(v108 + 8) = *(_OWORD *)&v35[v103 + 8];
              v109 = *(_OWORD *)&v35[v103 + 24];
              *(_OWORD *)(v108 + 40) = *(_OWORD *)&v35[v103 + 40];
              *(_OWORD *)(v108 + 24) = v109;
              v92[v103 + 56] = 0;
              v108[88] = 0;
              if (v35[v103 + 88])
              {
                v110 = *(_OWORD *)(v107 + 72);
                *(_OWORD *)&v92[v103 + 56] = *(_OWORD *)(v107 + 56);
                *(_OWORD *)&v92[v103 + 72] = v110;
                v108[88] = 1;
              }
              *((_QWORD *)v108 + 12) = *((_QWORD *)v107 + 12);
              v104 = *(_OWORD *)(v107 + 104);
              *(_OWORD *)(v108 + 120) = *(_OWORD *)(v107 + 120);
              *(_OWORD *)(v108 + 104) = v104;
              v105 = *(_OWORD *)(v107 + 136);
              *(_OWORD *)(v108 + 152) = *(_OWORD *)(v107 + 152);
              *(_OWORD *)(v108 + 136) = v105;
              v106 = *((_QWORD *)v107 + 21);
              v108[176] = v107[176];
              *((_QWORD *)v108 + 21) = v106;
              *(_OWORD *)(v108 + 184) = *(_OWORD *)(v107 + 184);
              *((_QWORD *)v107 + 23) = 0;
              *((_QWORD *)v107 + 24) = 0;
              v108[200] = v107[200];
              v103 += 208;
            }
            while (v107 + 208 != v102);
            v35 = *(char **)(a1 + 1360);
            v92 += v103;
          }
          v111 = *(char **)(a1 + 1352);
          *(_QWORD *)(a1 + 1352) = v50;
          *(_QWORD *)(a1 + 1360) = v92;
          v112 = *(_QWORD *)(a1 + 1368);
          *(_QWORD *)(a1 + 1368) = *((_QWORD *)&v156 + 1);
          *((_QWORD *)&v156 + 1) = v112;
          *(_QWORD *)&v155 = v111;
          *((_QWORD *)&v155 + 1) = v111;
          if (v35 != v111)
          {
            do
            {
              *(_QWORD *)&v156 = v35 - 208;
              v113 = (std::__shared_weak_count *)*((_QWORD *)v35 - 2);
              if (v113)
              {
                v114 = (unint64_t *)&v113->__shared_owners_;
                do
                  v115 = __ldaxr(v114);
                while (__stlxr(v115 - 1, v114));
                if (!v115)
                {
                  ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                  std::__shared_weak_count::__release_weak(v113);
                }
              }
              v35 = (char *)v156;
            }
            while ((char *)v156 != v111);
            v35 = (char *)v155;
          }
          if (v35)
            operator delete(v35);
        }
        else if (v35 == v32)
        {
          *(_QWORD *)v32 = v8;
          v41 = &v33[208 * v130];
          *(_OWORD *)(v41 + 8) = v131;
          v42 = v142;
          v43 = v143;
          v41[56] = 0;
          v44 = v41 + 56;
          *((_OWORD *)v44 - 2) = v42;
          *((_OWORD *)v44 - 1) = v43;
          *((_BYTE *)v44 + 32) = 0;
          if (v136)
          {
            v45 = v144[1];
            *(_OWORD *)v44 = v144[0];
            *((_OWORD *)v44 + 1) = v45;
            *((_BYTE *)v44 + 32) = 1;
          }
          v46 = &v33[208 * v130];
          *((_QWORD *)v46 + 12) = v30;
          v47 = v147;
          *(_OWORD *)(v46 + 120) = v148;
          *(_OWORD *)(v46 + 104) = v47;
          v48 = v149;
          *(_OWORD *)(v46 + 152) = v150;
          *(_OWORD *)(v46 + 136) = v48;
          v49 = v151;
          v46[176] = v152;
          *((_QWORD *)v46 + 21) = v49;
          *((_QWORD *)v46 + 23) = v141;
          *((_QWORD *)v46 + 24) = v31;
          v153 = 0uLL;
          v46[200] = 0;
          *(_QWORD *)(a1 + 1360) = v32 + 208;
        }
        else
        {
          v164 = v131;
          v155 = v132;
          v156 = v133;
          if (v136)
          {
            v127 = v144[0];
            v165[0] = *(_OWORD *)((char *)v144 + 1);
            *(_OWORD *)((char *)v165 + 15) = v144[1];
            v128 = 1;
          }
          else
          {
            v127 = 0;
            v128 = 0;
          }
          v162 = v137;
          v163 = v138;
          v160 = v139;
          v161 = v140;
          v158 = v151;
          v159 = v152;
          v52 = v35 + 208;
          v53 = v32 - 208;
          v54 = v32;
          v153 = 0uLL;
          if ((unint64_t)v32 >= 0xD0)
          {
            v55 = 0;
            v56 = &v33[208 * v130 + 16 * ((v32 - v52) >> 4)];
            do
            {
              v60 = &v53[v55];
              v61 = &v32[v55];
              *(_QWORD *)v61 = *(_QWORD *)&v53[v55];
              *(_OWORD *)(v61 + 8) = *(_OWORD *)&v53[v55 + 8];
              v62 = *(_OWORD *)&v53[v55 + 24];
              *(_OWORD *)(v61 + 40) = *(_OWORD *)&v53[v55 + 40];
              *(_OWORD *)(v61 + 24) = v62;
              v32[v55 + 56] = 0;
              v61[88] = 0;
              if (v53[v55 + 88])
              {
                v63 = *(_OWORD *)&v56[v55 + 72];
                *(_OWORD *)&v32[v55 + 56] = *(_OWORD *)&v56[v55 + 56];
                *(_OWORD *)&v32[v55 + 72] = v63;
                v61[88] = 1;
              }
              *((_QWORD *)v61 + 12) = *((_QWORD *)v60 + 12);
              v57 = *(_OWORD *)(v60 + 104);
              *(_OWORD *)(v61 + 120) = *(_OWORD *)(v60 + 120);
              *(_OWORD *)(v61 + 104) = v57;
              v58 = *(_OWORD *)(v60 + 136);
              *(_OWORD *)(v61 + 152) = *(_OWORD *)(v60 + 152);
              *(_OWORD *)(v61 + 136) = v58;
              v59 = *((_QWORD *)v60 + 21);
              v61[176] = v60[176];
              *((_QWORD *)v61 + 21) = v59;
              *(_OWORD *)(v61 + 184) = *(_OWORD *)(v60 + 184);
              *((_QWORD *)v60 + 23) = 0;
              *((_QWORD *)v60 + 24) = 0;
              v61[200] = v60[200];
              v55 += 208;
            }
            while (v60 + 208 < v32);
            v54 = &v32[v55];
          }
          *(_QWORD *)(a1 + 1360) = v54;
          if (v32 != v52)
          {
            v64 = v32 - 208;
            v65 = v32;
            do
            {
              v66 = *((_QWORD *)v64 - 26);
              v64 -= 208;
              *((_QWORD *)v65 - 26) = v66;
              v65 -= 208;
              *(_OWORD *)(v65 + 8) = *(_OWORD *)(v64 + 8);
              v67 = *(_OWORD *)(v64 + 24);
              *(_OWORD *)(v65 + 40) = *(_OWORD *)(v64 + 40);
              *(_OWORD *)(v65 + 24) = v67;
              v68 = v65 + 56;
              v69 = v64 + 56;
              if (v65[88] == v64[88])
              {
                if (v65[88])
                {
                  v70 = *(_OWORD *)(v64 + 72);
                  *v68 = *v69;
                  *(_OWORD *)(v65 + 72) = v70;
                }
              }
              else if (v65[88])
              {
                *(v32 - 120) = 0;
              }
              else
              {
                v71 = *(_OWORD *)(v64 + 72);
                *v68 = *v69;
                *(_OWORD *)(v65 + 72) = v71;
                *(v32 - 120) = 1;
              }
              *((_QWORD *)v32 - 14) = *((_QWORD *)v53 - 14);
              v72 = *(_OWORD *)(v53 - 104);
              *(_OWORD *)(v32 - 88) = *(_OWORD *)(v53 - 88);
              *(_OWORD *)(v32 - 104) = v72;
              v73 = *(_OWORD *)(v53 - 72);
              *(_OWORD *)(v32 - 56) = *(_OWORD *)(v53 - 56);
              *(_OWORD *)(v32 - 72) = v73;
              v74 = *((_QWORD *)v53 - 5);
              *(v32 - 32) = *(v53 - 32);
              *((_QWORD *)v32 - 5) = v74;
              v75 = *(_OWORD *)(v53 - 24);
              *((_QWORD *)v53 - 3) = 0;
              *((_QWORD *)v53 - 2) = 0;
              v76 = (std::__shared_weak_count *)*((_QWORD *)v32 - 2);
              *(_OWORD *)(v32 - 24) = v75;
              if (v76)
              {
                v77 = (unint64_t *)&v76->__shared_owners_;
                do
                  v78 = __ldaxr(v77);
                while (__stlxr(v78 - 1, v77));
                if (!v78)
                {
                  ((void (*)(std::__shared_weak_count *, __int128 *))v76->__on_zero_shared)(v76, a2);
                  std::__shared_weak_count::__release_weak(v76);
                }
              }
              *(v32 - 8) = *(v53 - 8);
              v32 = v65;
              v53 = v64;
            }
            while (v64 != v35);
          }
          *(_QWORD *)v35 = v8;
          v79 = v130;
          v80 = &v129[208 * v130];
          v83 = v80[88];
          v81 = v80 + 88;
          v82 = v83;
          *((_OWORD *)v81 - 5) = v164;
          *((_OWORD *)v81 - 4) = v155;
          *((_OWORD *)v81 - 3) = v156;
          v84 = v81 - 32;
          if (v83 == v128)
          {
            v85 = v141;
            if (v82)
            {
              *v84 = v127;
              *(_OWORD *)(v81 - 31) = v165[0];
              *((_OWORD *)v81 - 1) = *(_OWORD *)((char *)v165 + 15);
            }
          }
          else
          {
            v85 = v141;
            if (v82)
            {
              *v81 = 0;
            }
            else
            {
              *v84 = v127;
              *(_OWORD *)(v81 - 31) = v165[0];
              *((_OWORD *)v81 - 1) = *(_OWORD *)((char *)v165 + 15);
              *v81 = 1;
            }
          }
          v116 = v163;
          v117 = &v129[208 * v130];
          *(_OWORD *)(v117 + 104) = v162;
          *(_OWORD *)(v117 + 120) = v116;
          v118 = v161;
          *(_OWORD *)(v117 + 136) = v160;
          *((_QWORD *)v117 + 12) = v30;
          *(_OWORD *)(v117 + 152) = v118;
          *((_QWORD *)v117 + 21) = v158;
          v117[176] = v159;
          v119 = (std::__shared_weak_count *)*((_QWORD *)v117 + 24);
          *((_QWORD *)v117 + 23) = v85;
          *((_QWORD *)v117 + 24) = v31;
          if (v119)
          {
            v120 = (unint64_t *)&v119->__shared_owners_;
            do
              v121 = __ldaxr(v120);
            while (__stlxr(v121 - 1, v120));
            v79 = v130;
            if (!v121)
            {
              ((void (*)(std::__shared_weak_count *, __int128 *))v119->__on_zero_shared)(v119, a2);
              std::__shared_weak_count::__release_weak(v119);
              v79 = v130;
            }
          }
          v129[208 * v79 + 200] = 0;
        }
        v31 = (std::__shared_weak_count *)*((_QWORD *)&v153 + 1);
      }
      if (v31)
      {
        v122 = (unint64_t *)&v31->__shared_owners_;
        do
          v123 = __ldaxr(v122);
        while (__stlxr(v123 - 1, v122));
        if (!v123)
        {
          ((void (*)(std::__shared_weak_count *, __int128 *))v31->__on_zero_shared)(v31, a2);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      *(_BYTE *)(a1 + 1594) = 0;
      *(_BYTE *)(a1 + 1592) = 0;
      *(int64x2_t *)(a1 + 1576) = vaddq_s64(*(int64x2_t *)(a1 + 1576), (int64x2_t)xmmword_2103B84C0);
      v16 = 1;
    }
    else
    {
      v16 = 0;
      --*(_DWORD *)(v30 + 8);
    }
  }
  if (*((_QWORD *)&v141 + 1))
  {
    v124 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v141 + 1) + 16))(*((_QWORD *)&v141 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v141 + 1));
    }
  }
  return v16;
}

void sub_20FB86F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;

  sub_20FB817A8((uint64_t)&a67);
  sub_20F4ACD60((uint64_t)&a41);
  sub_20F8AEE9C((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_20FB86F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  sub_20F4ACD60((uint64_t)&a41);
  sub_20F8AEE9C((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_20FB86F74(uint64_t a1)
{
  uint64_t v1;
  unsigned __int32 v2;
  float64x2_t *v3;
  float64x2_t *v4;
  double *v5;
  int v6;
  int v7;
  unsigned __int32 v8;
  uint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unsigned __int32 *v14;
  char *v15;
  unsigned __int32 v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  unsigned __int8 v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  unsigned __int8 v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v38;
  const char *v39;
  size_t v40;
  char *v41;
  __int128 *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  int64x2_t v50;
  __int128 v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  char *v61;
  char *v62;
  unint64_t v63;
  unint64_t v64;
  unsigned __int32 *v65;
  char *v66;
  unsigned __int32 v67;
  _QWORD *v68;
  _DWORD *v69;
  _DWORD *v70;
  _DWORD *v71;
  _DWORD *v72;
  unsigned __int8 v73;
  int v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v78;
  const char *v79;
  size_t v80;
  uint64_t v81;
  __int128 v82;
  float64x2_t v83;
  float64x2_t v84;
  __int32 *v85;
  __int32 *v86;
  __int32 *v87;
  unsigned __int8 v88;
  uint64_t v89;
  uint64_t i;
  unsigned __int8 v91;
  unsigned int v92;
  void **v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  size_t v97;
  unsigned int v98;
  unsigned int v99;
  char *v100;
  unsigned int v101;
  char *v102;
  char *v103;
  char *v104;
  unsigned __int8 v105;
  const char *v106;
  size_t v107;
  void **v108;
  uint64_t v109;
  uint64_t v110;
  void **v111;
  uint64_t v112;
  uint64_t v113;
  NSObject *v114;
  size_t v115;
  std::__shared_weak_count_vtbl *v116;
  std::__shared_weak_count *v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  unint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  const char *v124;
  void *v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  void *v132;
  uint64_t *v133;
  uint64_t v134;
  _QWORD *v135;
  __int128 v136;
  __int32 v137;
  uint64_t v138;
  __int32 v139;
  uint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  uint64_t *v154;
  uint64_t v155;
  _QWORD *v156;
  __int128 v157;
  __int32 v158;
  uint64_t v159;
  __int32 v160;
  uint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  size_t v178;
  char *v179;
  char *v180;
  size_t v181;
  uint64_t v182;
  _QWORD *v183;
  unsigned int v184;
  unsigned int v185;
  unsigned int v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  int64x2_t v190;
  int64x2_t *v191;
  int64x2_t v192;
  int64x2_t *v193;
  int64x2_t v194;
  int64x2_t v195;
  int64x2_t *v196;
  int64x2_t v197;
  int64x2_t v198;
  int64x2_t *v199;
  int64x2_t v200;
  int64x2_t v201;
  int64x2_t v202;
  __int128 v203;
  int64x2_t v204;
  int64x2_t v205;
  int64x2_t v206;
  int64x2_t v207;
  int64x2_t v208;
  unsigned int v209;
  uint64_t v210;
  uint64_t v211;
  _QWORD *v212;
  size_t v213;
  unsigned int v214;
  __int32 v215;
  int v216;
  char *v217;
  size_t v218;
  uint64_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  double v226;
  size_t v227;
  char *v228;
  char *v229;
  size_t v230;
  uint64_t v231;
  _QWORD *v232;
  unsigned int v233;
  unsigned int v234;
  unsigned int v235;
  unsigned __int8 v236;
  const char *v237;
  size_t v238;
  void **v239;
  uint64_t v240;
  uint64_t v241;
  void **v242;
  uint64_t v243;
  uint64_t v244;
  NSObject *v245;
  size_t v246;
  std::__shared_weak_count_vtbl *v247;
  std::__shared_weak_count *v248;
  std::__shared_weak_count *v249;
  unint64_t *v250;
  unint64_t v251;
  unint64_t v252;
  _QWORD *v253;
  uint64_t v254;
  const char *v255;
  void *v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  void *v263;
  uint64_t *v264;
  uint64_t v265;
  _QWORD *v266;
  __int128 v267;
  __int32 v268;
  uint64_t v269;
  __int32 v270;
  uint64_t v271;
  std::__shared_weak_count *v272;
  unint64_t *v273;
  unint64_t v274;
  unint64_t *v275;
  unint64_t v276;
  std::__shared_weak_count *v277;
  unint64_t *v278;
  unint64_t v279;
  unint64_t *v280;
  unint64_t v281;
  std::__shared_weak_count *v282;
  unint64_t *v283;
  unint64_t v284;
  uint64_t *v285;
  uint64_t v286;
  _QWORD *v287;
  __int128 v288;
  __int32 v289;
  uint64_t v290;
  __int32 v291;
  uint64_t v292;
  std::__shared_weak_count *v293;
  unint64_t *v294;
  unint64_t v295;
  unint64_t *v296;
  unint64_t v297;
  std::__shared_weak_count *v298;
  unint64_t *v299;
  unint64_t v300;
  unint64_t *v301;
  unint64_t v302;
  std::__shared_weak_count *v303;
  unint64_t *v304;
  unint64_t v305;
  unint64_t *v306;
  void *v307;
  _QWORD *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  _OWORD *v312;
  __n128 v313;
  __int128 v314;
  __int128 v315;
  _BOOL4 v316;
  uint8x8_t v317;
  unsigned __int8 v318;
  int v319;
  unint64_t v320;
  unint64_t v321;
  uint64_t v322;
  size_t v323;
  const char *v324;
  unsigned __int8 v325;
  size_t v326;
  const char *v327;
  void **v328;
  uint64_t v329;
  uint64_t v330;
  void **v331;
  uint64_t v332;
  uint64_t v333;
  NSObject *v334;
  size_t v335;
  std::__shared_weak_count_vtbl *v336;
  std::__shared_weak_count *v337;
  std::__shared_weak_count *v338;
  unint64_t *p_shared_owners;
  unint64_t v340;
  unint64_t v341;
  _QWORD *v342;
  uint64_t v343;
  uint64_t v344;
  void *v345;
  std::__shared_weak_count *v346;
  unint64_t *v347;
  unint64_t v348;
  std::__shared_weak_count *v349;
  unint64_t *v350;
  unint64_t v351;
  void *v352;
  uint64_t *v353;
  uint64_t v354;
  _QWORD *v355;
  __int128 v356;
  __int32 v357;
  uint64_t v358;
  __int32 v359;
  uint64_t v360;
  std::__shared_weak_count *v361;
  unint64_t *v362;
  unint64_t v363;
  unint64_t *v364;
  unint64_t v365;
  std::__shared_weak_count *v366;
  unint64_t *v367;
  unint64_t v368;
  unint64_t *v369;
  unint64_t v370;
  std::__shared_weak_count *v371;
  unint64_t *v372;
  unint64_t v373;
  uint64_t *v374;
  uint64_t v375;
  _QWORD *v376;
  __int128 v377;
  __int32 v378;
  uint64_t v379;
  __int32 v380;
  uint64_t v381;
  std::__shared_weak_count *v382;
  unint64_t *v383;
  unint64_t v384;
  unint64_t *v385;
  unint64_t v386;
  std::__shared_weak_count *v387;
  unint64_t *v388;
  unint64_t v389;
  unint64_t *v390;
  unint64_t v391;
  std::__shared_weak_count *v392;
  unint64_t *v393;
  unint64_t v394;
  std::__shared_weak_count *v395;
  unint64_t *v396;
  unint64_t v397;
  unsigned int v398;
  uint64_t *v399;
  int8x16_t v400;
  int8x16_t v401;
  int8x16_t v402;
  unsigned __int8 *v403;
  int64x2_t v404;
  uint32x4_t v405;
  int8x16_t v406;
  int8x16_t v407;
  int8x16_t v408;
  int8x16_t v409;
  int8x16_t v410;
  int8x16_t v411;
  _QWORD *v412;
  int v413;
  uint64_t v414;
  unint64_t v415;
  uint64_t v416;
  uint64_t v417;
  _QWORD *v418;
  uint64_t v419;
  unint64_t v420;
  unint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  int v425;
  int v426;
  int v427;
  int v428;
  int v429;
  int v430;
  unsigned int v431;
  int v432;
  unsigned int v433;
  unsigned int v434;
  unsigned int v435;
  int v436;
  int v437;
  int v438;
  int v439;
  int v440;
  unsigned int v441;
  uint64_t v442;
  unsigned int v443;
  unsigned int v444;
  uint64_t v445;
  unsigned int v446;
  unsigned int v447;
  uint64_t v448;
  unsigned int v449;
  unsigned int v450;
  uint64_t v451;
  unsigned __int8 v452;
  unsigned __int8 v453;
  unsigned __int8 v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  void *v458[2];
  const char *v459;
  float64x2_t v460;
  unint64_t v461;
  _QWORD *v462;
  float64x2_t v463;
  unint64_t v464;
  uint64_t v465;
  unint64_t v466;
  float64x2_t v467;
  int8x16_t v468;
  float64x2_t v469;
  double *v470;
  const char *v471;
  float64x2_t v472;
  const char *v473;
  int64x2_t __src[18];
  _QWORD v475[2];
  int64x2_t v476[4];
  __int128 v477;
  int64x2_t v478;
  int64x2_t v479;
  int64x2_t v480[4];
  int64x2_t v481;
  int64x2_t v482;
  int64x2_t v483;
  int64x2_t v484[4];
  int v485;
  double v486;
  uint64_t v487;
  void *object[36];
  __int128 v489;
  __int128 v490;
  __int128 v491;
  int64x2_t v492;
  int64x2_t v493;
  int64x2_t v494;
  __int128 v495;
  __int128 v496;
  __int128 v497;
  __int128 v498;
  int64x2_t v499;
  int64x2_t v500;
  __int128 v501;
  __int128 v502;
  __int128 v503;
  _BYTE v504[32];
  int8x16_t v505;
  __int128 v506;
  __int128 v507;
  uint64_t v508;
  __int128 v509;
  uint64_t v510;
  char *v511;
  std::__shared_weak_count *v512;
  uint64_t v513;

  MEMORY[0x24BDAC7A8](a1);
  v4 = v3;
  v470 = v5;
  v7 = v6;
  v8 = v2;
  v9 = v1;
  v513 = *MEMORY[0x24BDAC8D0];
  v10 = *(char **)(v1 + 5384);
  v11 = *(char **)(v1 + 5392);
  if (v11 != v10)
  {
    v12 = (v11 - v10) >> 4;
    do
    {
      v13 = v12 >> 1;
      v14 = (unsigned __int32 *)&v10[16 * (v12 >> 1)];
      v16 = *v14;
      v15 = (char *)(v14 + 4);
      v12 += ~(v12 >> 1);
      if (v16 < v2)
        v10 = v15;
      else
        v12 = v13;
    }
    while (v12);
  }
  if (v10 == v11 || *(_DWORD *)v10 != v2)
  {
    v17 = v1;
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 411, (uint64_t)"var_iter != this->linear_system_.template endVariable<VIOExtrinsicsVariable<Float>>()", 85, (uint64_t)"invalid extrinsics calib iterator.", 34, (void (*)(void **))sub_21023DDB0);
    v18 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68 || byte_254A6DE70)
    {
      v20 = qword_254A6DE40;
      v19 = qword_254A6DE48;
      while (v20 != v19)
      {
        v22 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v20;
        v21 = *(_QWORD *)(v20 + 8);
        v20 += 16;
        v22(v21, "var_iter != this->linear_system_.template endVariable<VIOExtrinsicsVariable<Float>>()", 85, "invalid extrinsics calib iterator.", 34);
      }
    }
    v23 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v23 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      abort();
    v9 = v17;
    qword_254A6DE58(unk_254A6DE60, "var_iter != this->linear_system_.template endVariable<VIOExtrinsicsVariable<Float>>()", 85, "invalid extrinsics calib iterator.", 34);
    v10 = v11;
  }
  v24 = *((_QWORD *)v10 + 1);
  if (!v7)
  {
    *(_BYTE *)(v24 + 129) = 0;
    return;
  }
  v25 = *(unsigned __int8 *)(v24 + 20);
  *(_BYTE *)(v24 + 20) = 1;
  *(_BYTE *)(v24 + 129) = 1;
  if (v25)
  {
LABEL_56:
    v57 = vmulq_f64(*v4, *v4);
    v58 = (float64x2_t)vdupq_n_s64(0x3CB0000000000000uLL);
    v472 = vmulq_f64(v4[1], v4[1]);
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vcgtq_f64(v58, v57), (int32x4_t)vcgtq_f64(v58, v472)))) & 1) == 0)
    {
      v59 = vmulq_f64(v4[2], v4[2]);
      v469 = v59;
      if (v59.f64[0] >= 2.22044605e-16 && v59.f64[1] >= 2.22044605e-16)
      {
        v61 = *(char **)(v9 + 5384);
        v62 = *(char **)(v9 + 5392);
        if (v62 != v61)
        {
          v63 = (v62 - v61) >> 4;
          do
          {
            v64 = v63 >> 1;
            v65 = (unsigned __int32 *)&v61[16 * (v63 >> 1)];
            v67 = *v65;
            v66 = (char *)(v65 + 4);
            v63 += ~(v63 >> 1);
            if (v67 < v8)
              v61 = v66;
            else
              v63 = v64;
          }
          while (v63);
        }
        if (v61 == v62 || *(_DWORD *)v61 != v8)
          return;
        *(_QWORD *)(v9 + 47608) = *(_QWORD *)(v9 + 47600);
        v68 = (_QWORD *)(v9 + 40400);
        *(_QWORD *)(v9 + 47632) = *(_QWORD *)(v9 + 47624);
        v69 = *(_DWORD **)(v9 + 47664);
        *(_QWORD *)(v9 + 47680) = *(_QWORD *)(v9 + 47672);
        *(_QWORD *)(v9 + 47704) = *(_QWORD *)(v9 + 47696);
        *(_QWORD *)(v9 + 47728) = *(_QWORD *)(v9 + 47720);
        *(_QWORD *)(v9 + 47752) = *(_QWORD *)(v9 + 47744);
        *(_QWORD *)(v9 + 47776) = *(_QWORD *)(v9 + 47768);
        *(_QWORD *)(v9 + 47800) = *(_QWORD *)(v9 + 47792);
        *(_QWORD *)(v9 + 47824) = *(_QWORD *)(v9 + 47816);
        v70 = *(_DWORD **)(v9 + 47648);
        *(_QWORD *)(v9 + 47656) = v70;
        if (v69 == v70)
        {
          v467 = v57;
          if (v70)
          {
            *(_QWORD *)(v9 + 47656) = v70;
            operator delete(v70);
            *(_QWORD *)(v9 + 47648) = 0;
            *(_QWORD *)(v9 + 47656) = 0;
            *(_QWORD *)(v9 + 47664) = 0;
          }
          v70 = operator new(4uLL);
          *(_QWORD *)(v9 + 47648) = v70;
          *(_QWORD *)(v9 + 47656) = v70;
          *(_QWORD *)(v9 + 47664) = v70 + 1;
          v57 = v467;
        }
        *v70 = v8;
        *(_QWORD *)(v9 + 47656) = v70 + 1;
        v71 = *(_DWORD **)(v9 + 40608);
        v72 = *(_DWORD **)(v9 + 40616);
        if (v71 != v72)
        {
          while (*v71 != v8)
          {
            if (++v71 == v72)
              return;
          }
        }
        if (v71 == v72)
          return;
        v468 = (int8x16_t)v57;
        sub_20F8F2BC0(v9 + 47600, v9 + 40560, (uint64_t)dword_2103B9910, v9 + 47840);
        v504[0] = 0;
        v81 = v9 + 48080;
        memset(v476, 0, sizeof(v476));
        v477 = 0u;
        v478 = 0u;
        v479 = 0u;
        memset(v480, 0, sizeof(v480));
        v481 = 0u;
        v482 = 0u;
        v483 = 0u;
        memset(v484, 0, sizeof(v484));
        sub_20FB77160(v9 + 25360, (uint64_t)v476, (unsigned int **)(v9 + 47840), (_DWORD **)(v9 + 47840), v504);
        *(_QWORD *)&v82 = vdupq_laneq_s64(v479, 1).u64[0];
        *((_QWORD *)&v82 + 1) = v480[2].i64[1];
        v481 = vzip2q_s64(v483, v484[2]);
        v476[0] = vzip1q_s64(v476[0], v476[3]);
        v476[1] = vzip1q_s64(v479, v480[2]);
        v476[2] = vzip1q_s64(v482, v484[1]);
        v477 = v82;
        v478 = vzip2q_s64(v482, v484[1]);
        v480[0] = vzip1q_s64(v480[0], v480[3]);
        v480[1] = vzip1q_s64(v483, v484[2]);
        v484[0] = vzip1q_s64(v484[0], v484[3]);
        *(_QWORD *)&v83.f64[0] = v476[0].i64[0];
        v501 = *(__int128 *)((char *)v476 + 8);
        v502 = *(__int128 *)((char *)&v476[1] + 8);
        *(_QWORD *)&v83.f64[1] = v476[3].i64[1];
        v460 = v83;
        v503 = *(__int128 *)((char *)&v476[2] + 8);
        v498 = v82;
        v499 = v478;
        v500 = v479;
        *(_QWORD *)&v84.f64[0] = v480[0].i64[0];
        v497 = *(__int128 *)((char *)&v480[2] + 8);
        v496 = *(__int128 *)((char *)&v480[1] + 8);
        v495 = *(__int128 *)((char *)v480 + 8);
        *(_QWORD *)&v84.f64[1] = v480[3].i64[1];
        *(float64x2_t *)v458 = v84;
        v494 = v483;
        v493 = v482;
        v492 = v481;
        *(_QWORD *)&v84.f64[0] = v484[0].i64[0];
        v491 = *(__int128 *)((char *)&v484[2] + 8);
        v490 = *(__int128 *)((char *)&v484[1] + 8);
        v489 = *(__int128 *)((char *)v484 + 8);
        *(_QWORD *)&v84.f64[1] = v484[3].i64[1];
        v463 = v84;
        v457 = v9 + 25360;
        sub_20FA5A44C((_QWORD *)(v9 + 25360), (void **)(v9 + 48080));
        v85 = *(__int32 **)(v9 + 40616);
        v86 = wmemchr(*(__int32 **)(v9 + 40608), v8, ((uint64_t)v85 - *(_QWORD *)(v9 + 40608)) >> 2);
        if (v86)
          v87 = v86;
        else
          v87 = v85;
        if (v87 == *(__int32 **)(v9 + 40616))
        {
          sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 535, (uint64_t)"prior_var_iter != variable_ids.end()", 36, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
          v88 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v88 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68 || byte_254A6DE70)
          {
            v89 = qword_254A6DE40;
            for (i = qword_254A6DE48; v89 != i; v89 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v89)(*(_QWORD *)(v89 + 8), "prior_var_iter != variable_ids.end()", 36, "", 0);
          }
          v91 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v91 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68)
            abort();
          qword_254A6DE58(unk_254A6DE60, "prior_var_iter != variable_ids.end()", 36, "", 0);
        }
        v462 = (_QWORD *)v9;
        v92 = *(_DWORD *)(v9 + 25328) + 6 * (((unint64_t)v87 - *(_QWORD *)(v9 + 40608)) >> 2);
        v93 = (void **)(v9 + 48104);
        v94 = *(unsigned int *)(v9 + 48096);
        v95 = *(_QWORD *)v81;
        if (*(_QWORD *)(v81 + 40) == (v94 | 0x600000000))
        {
          v96 = (char *)*v93;
        }
        else
        {
          v96 = (char *)*v93;
          if ((void *)v95 == *v93)
          {
            v178 = (8 * (6 * v94) + 31) & 0xFFFFFFFE0;
            v179 = (char *)operator new(v178, (std::align_val_t)0x20uLL);
            v180 = v179;
            v181 = v178 >> 3;
            if ((_DWORD)v94)
            {
              v182 = 8 * v94;
              v183 = v68;
              v184 = v92;
              v185 = v92 * v94;
              memmove(v179, (const void *)(v95 + 8 * v185), 8 * v94);
              v186 = v94 + v185;
              v92 = v184;
              v68 = v183;
              v93 = (void **)(v81 + 24);
              memmove(&v180[8 * v94], (const void *)(v95 + 8 * v186), 8 * v94);
              memmove(&v180[v182 + v182], (const void *)(v95 + 8 * (v92 + 2) * v94), 8 * v94);
              memmove(&v180[v182 + v182 + v182], (const void *)(v95 + 8 * (v92 + 3) * v94), 8 * v94);
              memmove(&v180[v182 + v182 + v182 + v182], (const void *)(v95 + 8 * (v92 + 4) * v94), 8 * v94);
              memmove(&v180[v182 + v182 + v182 + v182 + v182], (const void *)(v95 + 8 * (v92 + 5) * v94), 8 * v94);
              v181 = v178 >> 3;
            }
            *(_QWORD *)(v81 + 24) = v180;
            *(_QWORD *)(v81 + 32) = v181;
            *(_DWORD *)(v81 + 40) = v94;
            *(_DWORD *)(v81 + 44) = 6;
            if (!v95)
              goto LABEL_226;
            goto LABEL_225;
          }
          *(_DWORD *)(v81 + 40) = v94;
          *(_DWORD *)(v81 + 44) = 6;
          if (*(_QWORD *)(v81 + 32) < (unint64_t)(6 * v94))
          {
            if (v96)
              MEMORY[0x212BC6368](v96, 0x1000C8000313F17);
            v97 = (48 * v94 + 31) & 0x7FFFFFFFE0;
            *(_QWORD *)(v81 + 24) = 0;
            *(_QWORD *)(v81 + 32) = v97 >> 3;
            v96 = (char *)operator new(v97, (std::align_val_t)0x20uLL);
            *v93 = v96;
          }
        }
        if ((char *)v95 != v96)
        {
          if ((_DWORD)v94)
          {
            v98 = v92;
            v99 = v92 * v94;
            memmove(v96, (const void *)(v95 + 8 * v99), 8 * v94);
            v100 = &v96[8 * v94];
            v101 = v94 + v99;
            v92 = v98;
            memmove(v100, (const void *)(v95 + 8 * v101), 8 * v94);
            v102 = &v100[8 * v94];
            memmove(v102, (const void *)(v95 + 8 * (v98 + 2) * v94), 8 * v94);
            v103 = &v102[8 * v94];
            memmove(v103, (const void *)(v95 + 8 * (v98 + 3) * v94), 8 * v94);
            v104 = &v103[8 * v94];
            memmove(v104, (const void *)(v95 + 8 * (v98 + 4) * v94), 8 * v94);
            memmove(&v104[8 * v94], (const void *)(v95 + 8 * (v98 + 5) * v94), 8 * v94);
          }
          goto LABEL_226;
        }
        v227 = (8 * (*(_DWORD *)(v81 + 44) * *(_DWORD *)(v81 + 40)) + 31) & 0xFFFFFFFE0;
        v228 = (char *)operator new(v227, (std::align_val_t)0x20uLL);
        v229 = v228;
        v230 = v227 >> 3;
        if ((_DWORD)v94)
        {
          v231 = 8 * v94;
          v232 = v68;
          v233 = v92;
          v234 = v92 * v94;
          memmove(v228, (const void *)(v95 + 8 * v234), 8 * v94);
          v235 = v94 + v234;
          v92 = v233;
          v68 = v232;
          v93 = (void **)(v81 + 24);
          memmove(&v229[8 * v94], (const void *)(v95 + 8 * v235), 8 * v94);
          memmove(&v229[v231 + v231], (const void *)(v95 + 8 * (v92 + 2) * v94), 8 * v94);
          memmove(&v229[v231 + v231 + v231], (const void *)(v95 + 8 * (v92 + 3) * v94), 8 * v94);
          memmove(&v229[v231 + v231 + v231 + v231], (const void *)(v95 + 8 * (v92 + 4) * v94), 8 * v94);
          memmove(&v229[v231 + v231 + v231 + v231 + v231], (const void *)(v95 + 8 * (v92 + 5) * v94), 8 * v94);
          v230 = v227 >> 3;
        }
        *(_QWORD *)(v81 + 24) = v229;
        *(_QWORD *)(v81 + 32) = v230;
        if (!v95)
        {
LABEL_226:
          v187 = *(unsigned int *)(v81 + 40);
          v188 = *(_QWORD *)(v81 + 24) + 8 * v92;
          v189 = v188 + 8 * v187;
          v190 = *(int64x2_t *)v189;
          v191 = (int64x2_t *)(v188 + 16 * v187);
          v192 = *v191;
          v193 = (int64x2_t *)(v188 + 24 * v187);
          v195 = *v193;
          v194 = v193[1];
          v196 = (int64x2_t *)(v188 + 32 * v187);
          v197 = v196[1];
          v198 = *v196;
          v199 = (int64x2_t *)(v188 + 40 * v187);
          v201 = v199[1];
          v200 = v199[2];
          v202 = *v199;
          *(_QWORD *)&v203 = vdupq_laneq_s64(*v191, 1).u64[0];
          *((_QWORD *)&v203 + 1) = v193->i64[1];
          v204 = vzip1q_s64(v191[1], v194);
          v205 = vzip1q_s64(*v191, *v193);
          v206 = vzip1q_s64(*v196, *v199);
          v207 = vzip2q_s64(*v196, *v199);
          v208 = vzip1q_s64(v196[2], v200);
          *(int64x2_t *)v188 = vzip1q_s64(*(int64x2_t *)v188, *(int64x2_t *)v189);
          *(int64x2_t *)(v188 + 16) = v205;
          *(int64x2_t *)(v188 + 32) = v206;
          *(_OWORD *)(v189 + 16) = v203;
          *(int64x2_t *)(v189 + 32) = v207;
          *(int64x2_t *)v189 = v190;
          v191[1] = v204;
          v191[2] = vzip1q_s64(v197, v201);
          *v191 = v192;
          v193[1] = v194;
          v193[2] = vzip2q_s64(v197, v201);
          *v193 = v195;
          v196[1] = v197;
          v196[2] = v208;
          *v196 = v198;
          v199[1] = v201;
          v199[2] = v200;
          *v199 = v202;
          LODWORD(v188) = *(_DWORD *)(v81 + 40);
          v209 = v188 - v92 - 6;
          LODWORD(v189) = *(_DWORD *)(v81 + 16);
          v210 = *(_QWORD *)v81;
          *(_DWORD *)v504 = 6;
          *(_DWORD *)&v504[4] = v209;
          *(_DWORD *)&v504[8] = v189;
          *(_QWORD *)&v504[16] = v210 + 8 * (v92 + (_DWORD)v189 * (v92 + 6));
          *(_DWORD *)&v504[24] = v92 + v189 * (v92 + 6);
          v211 = *(_QWORD *)(v81 + 24);
          object[0] = (void *)(v209 | 0x600000000);
          LODWORD(object[1]) = v188;
          object[2] = (void *)(v211 + 8 * (v92 + 6));
          LODWORD(object[3]) = v92 + 6;
          if (v210 == v211)
          {
            v213 = (48 * v209 + 31) & 0xFFFFFFFE0;
            __src[0].i64[1] = v213 >> 3;
            v212 = v462;
            v214 = v92;
            __src[0].i64[0] = (uint64_t)operator new(v213, (std::align_val_t)0x20uLL);
            __src[1].i64[0] = v209 | 0x600000000;
            sub_20F208630(__src, (uint64_t)v504);
            if (__src[1].i32[0])
            {
              v215 = __src[1].i32[1];
              if (__src[1].i32[1])
              {
                v216 = 0;
                v217 = (char *)__src[0].i64[0];
                v218 = 8 * __src[1].u32[0];
                v219 = 8 * __src[1].i32[0];
                do
                {
                  memmove((char *)object[2] + 8 * (LODWORD(object[3]) + LODWORD(object[1]) * v216++) + -8 * LODWORD(object[3]), v217, v218);
                  v217 += v219;
                }
                while (v215 != v216);
              }
            }
            if (__src[0].i64[0])
              MEMORY[0x212BC6368](__src[0].i64[0], 0x1000C8000313F17);
            v92 = v214;
          }
          else
          {
            sub_20F208E50((uint64_t)object, (uint64_t)v504);
            v212 = v462;
          }
          v220 = v469;
          v466 = vextq_s8((int8x16_t)v220, (int8x16_t)v220, 8uLL).u64[0];
          *(_QWORD *)&v220.f64[1] = v466;
          v221 = v472;
          v465 = vextq_s8((int8x16_t)v221, (int8x16_t)v221, 8uLL).u64[0];
          *(_QWORD *)&v221.f64[1] = v465;
          v222 = vaddq_f64(v220, v463);
          *(_OWORD *)&object[1] = v501;
          *(_QWORD *)&v223.f64[0] = v468.i64[0];
          v464 = vextq_s8(v468, v468, 8uLL).u64[0];
          *(_QWORD *)&v223.f64[1] = v464;
          *(_OWORD *)&object[3] = v502;
          *(_OWORD *)&object[5] = v503;
          v224 = vaddq_f64(v223, v460);
          object[7] = *(void **)&v224.f64[1];
          object[0] = *(void **)&v224.f64[0];
          *(_OWORD *)&object[8] = v498;
          *(int64x2_t *)&object[10] = v499;
          *(int64x2_t *)&object[12] = v500;
          *(_OWORD *)&object[19] = v497;
          *(_OWORD *)&object[17] = v496;
          *(_OWORD *)&object[15] = v495;
          v225 = vaddq_f64(v221, *(float64x2_t *)v458);
          object[21] = *(void **)&v225.f64[1];
          object[14] = *(void **)&v225.f64[0];
          *(int64x2_t *)&object[26] = v494;
          *(int64x2_t *)&object[22] = v492;
          *(int64x2_t *)&object[24] = v493;
          *(_OWORD *)&object[33] = v491;
          *(_OWORD *)&object[31] = v490;
          *(_OWORD *)&object[29] = v489;
          object[35] = *(void **)&v222.f64[1];
          object[28] = *(void **)&v222.f64[0];
          v486 = 0.0;
          v485 = 0;
          sub_20E8BED80();
          if (v485)
            goto LABEL_359;
          v226 = v486;
          sub_20E8BEDB0();
          if (v485 >= 1)
            goto LABEL_359;
          if ((int)v226 > 0x180)
          {
            v307 = operator new((8 * (int)v226 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
            sub_20E8BED80();
            MEMORY[0x212BC6368](v307, 0x1000C8000313F17);
          }
          else
          {
            sub_20E8BED80();
          }
          if (v485 >= 1)
LABEL_359:
            memset(__src, 0, sizeof(__src));
          else
            memcpy(__src, object, sizeof(__src));
          v475[0] = v93;
          v475[1] = __src;
          object[0] = v93;
          *(_QWORD *)&v504[8] = v475;
          *(_QWORD *)&v504[16] = object;
          *(_QWORD *)&v504[24] = 0x3FF0000000000000;
          sub_20FB8BBE0(v81, (uint64_t)v504);
          *(_QWORD *)&v504[8] = 8;
          v308 = operator new(0x40uLL, (std::align_val_t)0x20uLL);
          *(_QWORD *)v504 = v308;
          *(_DWORD *)&v504[16] = 6;
          v309 = v476[3].i64[1];
          *v308 = v476[0].i64[0];
          v308[1] = v309;
          v310 = v480[3].i64[1];
          v308[2] = v480[0].i64[0];
          v308[3] = v310;
          v311 = v484[3].i64[1];
          v308[4] = v484[0].i64[0];
          v308[5] = v311;
          object[1] = (void *)8;
          v312 = operator new(0x40uLL, (std::align_val_t)0x20uLL);
          object[0] = v312;
          LODWORD(object[2]) = 6;
          v313.n128_u64[0] = *(_QWORD *)&v469.f64[0];
          v313.n128_u64[1] = v466;
          *(float64_t *)&v314 = v472.f64[0];
          *((_QWORD *)&v314 + 1) = v465;
          *(_QWORD *)&v315 = v468.i64[0];
          *((_QWORD *)&v315 + 1) = v464;
          *v312 = v315;
          v312[1] = v314;
          v312[2] = v313;
          v313.n128_u64[0] = v212[260];
          v316 = sub_20FC8C504((uint64_t)v504, (double **)object, v81 + 48, v313);
          if (object[0])
            MEMORY[0x212BC6368](object[0], 0x1000C8000313F17);
          if (*(_QWORD *)v504)
            MEMORY[0x212BC6368](*(_QWORD *)v504, 0x1000C8000313F17);
          if (!v316)
            goto LABEL_487;
          v318 = atomic_load((unsigned __int8 *)&qword_254A6B820);
          if ((v318 & 1) == 0 && __cxa_guard_acquire(&qword_254A6B820))
          {
            v454 = atomic_load((unsigned __int8 *)&qword_254A6DDE0);
            if ((v454 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDE0))
            {
              sub_20E8BFCE4(&qword_254A6DDD8);
              __cxa_guard_release(&qword_254A6DDE0);
            }
            object[0] = (void *)qword_254A6DDD8;
            v504[23] = 8;
            strcpy(v504, "cv3d.vio");
            sub_20E8C4068((uint64_t **)object, (uint64_t)v504, &qword_254A6B818);
            if ((v504[23] & 0x80000000) != 0)
              operator delete(*(void **)v504);
            __cxa_guard_release(&qword_254A6B820);
            v212 = v462;
          }
          v487 = qword_254A6B818;
          if (**(int **)(qword_254A6B818 + 56) > 3
            || (v319 = *(unsigned __int8 *)(qword_254A6B818 + 72),
                v320 = sub_20E8C31DC(qword_254A6B818, "OSLogSurrogateAppender", 1, 0),
                v321 = v320,
                !v319)
            && !v320)
          {
LABEL_486:
            v398 = *(_DWORD *)(v81 + 16) + 1;
            v399 = (uint64_t *)(*(_QWORD *)v81 + 8 * v398 * v92);
            v400.i64[0] = *v399;
            v400.i64[1] = v399[v398];
            v401.i64[0] = v399[4 * v398];
            v401.i64[1] = v399[5 * v398];
            v402.i64[0] = v399[2 * v398];
            v402.i64[1] = v399[3 * v398];
            v403 = *(unsigned __int8 **)(v81 + 48);
            v404.i64[0] = *v403;
            v404.i64[1] = v403[1];
            v317.i32[0] = *(_DWORD *)(v403 + 2);
            v405 = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v317));
            v406.i64[0] = v405.u32[0];
            v406.i64[1] = v405.u32[1];
            v407.i64[0] = 255;
            v407.i64[1] = 255;
            v408 = vandq_s8(v406, v407);
            v406.i64[0] = v405.u32[2];
            v406.i64[1] = v405.u32[3];
            v409 = (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v406, v407));
            v407.i64[0] = *(_QWORD *)&v472.f64[0];
            v407.i64[1] = v465;
            v410 = vbslq_s8((int8x16_t)vceqzq_s64((int64x2_t)v408), v402, v407);
            v408.i64[0] = *(_QWORD *)&v469.f64[0];
            v408.i64[1] = v466;
            v411 = vbslq_s8(v409, v401, v408);
            v409.i64[0] = v468.i64[0];
            v409.i64[1] = v464;
            v505 = v411;
            *(int8x16_t *)v504 = vbslq_s8((int8x16_t)vceqzq_s64(v404), v400, v409);
            *(int8x16_t *)&v504[16] = v410;
            sub_20FB8B93C(v92, (int8x16_t *)v504, v81);
LABEL_487:
            v412 = v212 + 4970;
            v413 = *(_DWORD *)(v81 + 16);
            v414 = (*(_DWORD *)(v81 + 20) * v413);
            if ((_DWORD)v414)
            {
              v415 = 0;
              v416 = *(_QWORD *)v81;
              v417 = 8 * v414;
              v418 = *(_QWORD **)v81;
              do
              {
                v422 = 0;
                if (v415 <= HIDWORD(v415))
                  v422 = *(_QWORD *)(v416 + 8 * (v415 + v413 * HIDWORD(v415)));
                *v418++ = v422;
                v419 = (v415 + 1);
                v420 = v415 & 0xFFFFFFFF00000000;
                v421 = v420 | v419;
                v415 = v420 + 0x100000000;
                if (v413 > (int)v419)
                  v415 = v421;
                v417 -= 8;
              }
              while (v417);
            }
            v423 = *v412;
            v424 = v212[4971];
            v425 = 6 * *(_DWORD *)(*v412 + 8);
            *(_DWORD *)v504 = 0;
            *(_DWORD *)&v504[4] = v425;
            v426 = 9 * *(_DWORD *)(v212[4980] + 8);
            *(_DWORD *)&v504[8] = v425;
            *(_DWORD *)&v504[12] = v426;
            v427 = v426 + v425;
            v428 = 6 * *(_DWORD *)(v212[4990] + 8);
            *(_DWORD *)&v504[16] = v427;
            *(_DWORD *)&v504[20] = v428;
            v429 = v428 + v427;
            v430 = 6 * *(_DWORD *)(v212[5000] + 8);
            *(_DWORD *)&v504[24] = v429;
            *(_DWORD *)&v504[28] = v430;
            v431 = v430 + v429;
            v432 = 3 * *(_DWORD *)(v212[5010] + 8);
            v505.i64[0] = __PAIR64__(v432, v431);
            v433 = v432 + v431;
            v434 = *(_DWORD *)(v212[5020] + 8);
            v505.i64[1] = __PAIR64__(v434, v433);
            v435 = v434 + v433;
            v436 = 3 * *(_DWORD *)(v212[5030] + 8);
            *(_QWORD *)&v506 = __PAIR64__(v436, v435);
            v437 = 4 * *(_DWORD *)(v212[5040] + 8);
            DWORD2(v506) = v436 + v435;
            HIDWORD(v506) = v437;
            v438 = v437 + v436 + v435;
            v439 = 4 * *(_DWORD *)(*v68 + 8);
            *(_QWORD *)&v507 = __PAIR64__(v439, v438);
            *((_QWORD *)&v507 + 1) = __PAIR64__(3 * *(_DWORD *)(v68[10] + 8), v439 + v438);
            v440 = 6 * *(_DWORD *)(v423 + 12);
            LODWORD(object[0]) = 0;
            HIDWORD(object[0]) = v440;
            LODWORD(v423) = 9 * *(_DWORD *)(v424 + 12);
            object[1] = (void *)__PAIR64__(v423, v440);
            v441 = v423 + v440;
            v442 = v212[4973];
            LODWORD(v423) = 6 * *(_DWORD *)(v212[4972] + 12);
            object[2] = (void *)__PAIR64__(v423, v441);
            v443 = v423 + v441;
            LODWORD(v423) = 6 * *(_DWORD *)(v442 + 12);
            object[3] = (void *)__PAIR64__(v423, v443);
            v444 = v423 + v443;
            v445 = v212[4975];
            LODWORD(v423) = 3 * *(_DWORD *)(v212[4974] + 12);
            object[4] = (void *)__PAIR64__(v423, v444);
            v446 = v423 + v444;
            LODWORD(v423) = *(_DWORD *)(v445 + 12);
            object[5] = (void *)__PAIR64__(v423, v446);
            v447 = v423 + v446;
            v448 = v212[4977];
            LODWORD(v423) = 3 * *(_DWORD *)(v212[4976] + 12);
            object[6] = (void *)__PAIR64__(v423, v447);
            v449 = v423 + v447;
            LODWORD(v423) = 4 * *(_DWORD *)(v448 + 12);
            object[7] = (void *)__PAIR64__(v423, v449);
            v450 = v423 + v449;
            v451 = v212[4979];
            LODWORD(v423) = 4 * *(_DWORD *)(v212[4978] + 12);
            object[8] = (void *)__PAIR64__(v423, v450);
            LODWORD(v451) = 3 * *(_DWORD *)(v451 + 12);
            LODWORD(object[9]) = v423 + v450;
            HIDWORD(object[9]) = v451;
            sub_20FB82144(v457, (uint64_t *)v81, (unsigned int *)v504, (unsigned int *)object);
            return;
          }
          __src[0].i64[0] = (uint64_t)&v487;
          __src[0].u64[1] = std::chrono::steady_clock::now().__d_.__rep_;
          *(std::chrono::system_clock::time_point *)__src[1].i8 = std::chrono::system_clock::now();
          __src[1].i32[2] = 3;
          __src[2].i64[0] = (uint64_t)"unknown file";
          __src[2].i32[2] = 570;
          __src[3].i64[1] = 0;
          __src[4].i64[0] = 0;
          __src[3].i64[0] = (uint64_t)"unknown function";
          v322 = *(_QWORD *)__src[0].i64[0];
          if (*(char *)(*(_QWORD *)__src[0].i64[0] + 39) < 0)
          {
            v324 = *(const char **)(v322 + 16);
            v323 = *(_QWORD *)(v322 + 24);
          }
          else
          {
            v323 = *(unsigned __int8 *)(*(_QWORD *)__src[0].i64[0] + 39);
            v324 = (const char *)(*(_QWORD *)__src[0].i64[0] + 16);
          }
          v455 = *(_QWORD *)__src[0].i64[0] + 16;
          v456 = *(_QWORD *)__src[0].i64[0];
          v461 = v321;
          v325 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v325 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)v504);
            if (v504[24])
            {
              *(_OWORD *)byte_254A4A4F8 = *(_OWORD *)v504;
              *(_QWORD *)&byte_254A4A4F8[16] = *(_QWORD *)&v504[16];
            }
            else
            {
              byte_254A4A4F8[23] = 14;
              strcpy(byte_254A4A4F8, "com.apple.cv3d");
            }
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
          if (byte_254A4A4F8[23] >= 0)
            v326 = byte_254A4A4F8[23];
          else
            v326 = *(_QWORD *)&byte_254A4A4F8[8];
          if (byte_254A4A4F8[23] >= 0)
            v327 = byte_254A4A4F8;
          else
            v327 = *(const char **)byte_254A4A4F8;
          v459 = v324;
          object[0] = os_log_create(v327, v324);
          v328 = &object[1];
          if (v326 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v326 >= 0x17)
          {
            v329 = (v326 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v326 | 7) != 0x17)
              v329 = v326 | 7;
            v330 = v329 + 1;
            v328 = (void **)operator new(v329 + 1);
            object[3] = (void *)(v330 | 0x8000000000000000);
            object[1] = v328;
            object[2] = (void *)v326;
          }
          else
          {
            HIBYTE(object[3]) = v326;
            if (!v326)
            {
LABEL_388:
              *((_BYTE *)v328 + v326) = 0;
              LOBYTE(object[4]) = 1;
              v331 = &object[5];
              if (v323 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              v212 = v462;
              if (v323 >= 0x17)
              {
                v332 = (v323 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v323 | 7) != 0x17)
                  v332 = v323 | 7;
                v333 = v332 + 1;
                v331 = (void **)operator new(v332 + 1);
                object[7] = (void *)(v333 | 0x8000000000000000);
                object[5] = v331;
                object[6] = (void *)v323;
              }
              else
              {
                HIBYTE(object[7]) = v323;
                if (!v323)
                {
LABEL_396:
                  *((_BYTE *)v331 + v323) = 0;
                  LOBYTE(object[8]) = 1;
                  v334 = object[0];
                  if (SHIBYTE(object[7]) < 0)
                    operator delete(object[5]);
                  if (LOBYTE(object[4]) && SHIBYTE(object[3]) < 0)
                    operator delete(object[1]);
                  if (object[0])
                    os_release(object[0]);
                  if (v461 && *(_QWORD *)(v461 + 24))
                  {
                    v335 = _os_log_pack_size();
                    v336 = (std::__shared_weak_count_vtbl *)operator new(v335, (std::align_val_t)8uLL);
                    v337 = (std::__shared_weak_count *)operator new();
                    v338 = v337;
                    v337->__shared_owners_ = 0;
                    p_shared_owners = (unint64_t *)&v337->__shared_owners_;
                    v337->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                    v337->__shared_weak_owners_ = 0;
                    v337[1].__vftable = v336;
                    do
                      v340 = __ldxr(p_shared_owners);
                    while (__stxr(v340 + 1, p_shared_owners));
                    do
                      v341 = __ldaxr(p_shared_owners);
                    while (__stlxr(v341 - 1, p_shared_owners));
                    if (!v341)
                    {
                      ((void (*)(std::__shared_weak_count *))v337->__on_zero_shared)(v337);
                      std::__shared_weak_count::__release_weak(v338);
                    }
                    *(_WORD *)_os_log_pack_fill() = 0;
                    v342 = (_QWORD *)operator new();
                    v343 = *(unsigned __int8 *)(v456 + 39);
                    v344 = v455;
                    if ((v343 & 0x80u) != 0)
                    {
                      v344 = *(_QWORD *)(v456 + 16);
                      v343 = *(_QWORD *)(v456 + 24);
                    }
                    *v342 = v336;
                    v342[1] = v336;
                    v342[2] = v338;
                    v342[3] = 0;
                    v342[4] = 0;
                    v342[5] = v344;
                    v342[6] = v343;
                    *((_BYTE *)v342 + 56) = 1;
                    object[0] = v342;
                    (*(void (**)(_QWORD, void **))(**(_QWORD **)(v461 + 24) + 40))(*(_QWORD *)(v461 + 24), object);
                    v345 = object[0];
                    object[0] = 0;
                    if (v345)
                    {
                      v346 = (std::__shared_weak_count *)*((_QWORD *)v345 + 4);
                      if (v346)
                      {
                        v347 = (unint64_t *)&v346->__shared_owners_;
                        do
                          v348 = __ldaxr(v347);
                        while (__stlxr(v348 - 1, v347));
                        if (!v348)
                        {
                          ((void (*)(std::__shared_weak_count *))v346->__on_zero_shared)(v346);
                          std::__shared_weak_count::__release_weak(v346);
                        }
                      }
                      v349 = (std::__shared_weak_count *)*((_QWORD *)v345 + 2);
                      if (v349)
                      {
                        v350 = (unint64_t *)&v349->__shared_owners_;
                        do
                          v351 = __ldaxr(v350);
                        while (__stlxr(v351 - 1, v350));
                        if (!v351)
                        {
                          ((void (*)(std::__shared_weak_count *))v349->__on_zero_shared)(v349);
                          std::__shared_weak_count::__release_weak(v349);
                        }
                      }
                      MEMORY[0x212BC6398](v345, 0x10F0C40B62ED6C6);
                    }
                  }
                  else
                  {
                    os_log_type_enabled(v334, OS_LOG_TYPE_INFO);
                    *(_WORD *)v504 = 0;
                    v352 = (void *)_os_log_send_and_compose_impl();
                    if (v352)
                      free(v352);
                  }
                  if (v319)
                  {
                    sub_20E8C003C((uint64_t)__src, "Special case to handle Err. Propagation order of magnitude disparity.");
                    v353 = (uint64_t *)__src[0].i64[0];
                    if (!__src[0].i64[0] || (v354 = __src[3].i64[1]) == 0)
                    {
LABEL_481:
                      v395 = (std::__shared_weak_count *)__src[4].i64[0];
                      if (__src[4].i64[0])
                      {
                        v396 = (unint64_t *)(__src[4].i64[0] + 8);
                        do
                          v397 = __ldaxr(v396);
                        while (__stlxr(v397 - 1, v396));
                        if (!v397)
                        {
                          ((void (*)(std::__shared_weak_count *))v395->__on_zero_shared)(v395);
                          std::__shared_weak_count::__release_weak(v395);
                        }
                      }
                      goto LABEL_486;
                    }
                    v355 = (_QWORD *)(*(_QWORD *)__src[0].i64[0] + 16);
                    if (*(char *)(*(_QWORD *)__src[0].i64[0] + 39) < 0)
                      v355 = (_QWORD *)*v355;
                    v356 = *(__int128 *)((char *)__src + 8);
                    v357 = __src[1].i32[2];
                    v358 = __src[2].i64[0];
                    v359 = __src[2].i32[2];
                    v360 = __src[3].i64[0];
                    v361 = (std::__shared_weak_count *)__src[4].i64[0];
                    if (__src[4].i64[0])
                    {
                      v362 = (unint64_t *)(__src[4].i64[0] + 8);
                      do
                        v363 = __ldxr(v362);
                      while (__stxr(v363 + 1, v362));
                    }
                    *(_QWORD *)v504 = v355;
                    *(_OWORD *)&v504[8] = v356;
                    *(_DWORD *)&v504[24] = v357;
                    v505.i64[0] = v358;
                    v505.i32[2] = v359;
                    *(_QWORD *)&v506 = v360;
                    *((_QWORD *)&v506 + 1) = v354;
                    *(_QWORD *)&v507 = v361;
                    if (v361)
                    {
                      v364 = (unint64_t *)&v361->__shared_owners_;
                      do
                        v365 = __ldxr(v364);
                      while (__stxr(v365 + 1, v364));
                    }
                    v366 = v361;
                    if (v357 >= **(_DWORD **)(*v353 + 56))
                    {
                      sub_20E8C3FC4(*v353, (uint64_t)v504);
                      v366 = (std::__shared_weak_count *)v507;
                    }
                    if (v366)
                    {
                      v367 = (unint64_t *)&v366->__shared_owners_;
                      do
                        v368 = __ldaxr(v367);
                      while (__stlxr(v368 - 1, v367));
                      if (!v368)
                      {
                        ((void (*)(std::__shared_weak_count *))v366->__on_zero_shared)(v366);
                        std::__shared_weak_count::__release_weak(v366);
                      }
                    }
                    if (v361)
                    {
                      v369 = (unint64_t *)&v361->__shared_owners_;
                      do
                        v370 = __ldaxr(v369);
                      while (__stlxr(v370 - 1, v369));
                      if (!v370)
                      {
                        ((void (*)(std::__shared_weak_count *))v361->__on_zero_shared)(v361);
                        std::__shared_weak_count::__release_weak(v361);
                      }
                    }
                    v371 = (std::__shared_weak_count *)__src[4].i64[0];
                    __src[3].i64[1] = 0;
                    __src[4].i64[0] = 0;
                    if (v371)
                    {
                      v372 = (unint64_t *)&v371->__shared_owners_;
                      do
                        v373 = __ldaxr(v372);
                      while (__stlxr(v373 - 1, v372));
                      if (!v373)
                      {
                        ((void (*)(std::__shared_weak_count *))v371->__on_zero_shared)(v371);
                        std::__shared_weak_count::__release_weak(v371);
                      }
                    }
                  }
                  v374 = (uint64_t *)__src[0].i64[0];
                  if (__src[0].i64[0])
                  {
                    v375 = __src[3].i64[1];
                    if (__src[3].i64[1])
                    {
                      v376 = (_QWORD *)(*(_QWORD *)__src[0].i64[0] + 16);
                      if (*(char *)(*(_QWORD *)__src[0].i64[0] + 39) < 0)
                        v376 = (_QWORD *)*v376;
                      v377 = *(__int128 *)((char *)__src + 8);
                      v378 = __src[1].i32[2];
                      v379 = __src[2].i64[0];
                      v380 = __src[2].i32[2];
                      v381 = __src[3].i64[0];
                      v382 = (std::__shared_weak_count *)__src[4].i64[0];
                      if (__src[4].i64[0])
                      {
                        v383 = (unint64_t *)(__src[4].i64[0] + 8);
                        do
                          v384 = __ldxr(v383);
                        while (__stxr(v384 + 1, v383));
                      }
                      *(_QWORD *)v504 = v376;
                      *(_OWORD *)&v504[8] = v377;
                      *(_DWORD *)&v504[24] = v378;
                      v505.i64[0] = v379;
                      v505.i32[2] = v380;
                      *(_QWORD *)&v506 = v381;
                      *((_QWORD *)&v506 + 1) = v375;
                      *(_QWORD *)&v507 = v382;
                      if (v382)
                      {
                        v385 = (unint64_t *)&v382->__shared_owners_;
                        do
                          v386 = __ldxr(v385);
                        while (__stxr(v386 + 1, v385));
                      }
                      v387 = v382;
                      if (v378 >= **(_DWORD **)(*v374 + 56))
                      {
                        sub_20E8C3FC4(*v374, (uint64_t)v504);
                        v387 = (std::__shared_weak_count *)v507;
                      }
                      if (v387)
                      {
                        v388 = (unint64_t *)&v387->__shared_owners_;
                        do
                          v389 = __ldaxr(v388);
                        while (__stlxr(v389 - 1, v388));
                        if (!v389)
                        {
                          ((void (*)(std::__shared_weak_count *))v387->__on_zero_shared)(v387);
                          std::__shared_weak_count::__release_weak(v387);
                        }
                      }
                      if (v382)
                      {
                        v390 = (unint64_t *)&v382->__shared_owners_;
                        do
                          v391 = __ldaxr(v390);
                        while (__stlxr(v391 - 1, v390));
                        if (!v391)
                        {
                          ((void (*)(std::__shared_weak_count *))v382->__on_zero_shared)(v382);
                          std::__shared_weak_count::__release_weak(v382);
                        }
                      }
                      v392 = (std::__shared_weak_count *)__src[4].i64[0];
                      __src[3].i64[1] = 0;
                      __src[4].i64[0] = 0;
                      if (v392)
                      {
                        v393 = (unint64_t *)&v392->__shared_owners_;
                        do
                          v394 = __ldaxr(v393);
                        while (__stlxr(v394 - 1, v393));
                        if (!v394)
                        {
                          ((void (*)(std::__shared_weak_count *))v392->__on_zero_shared)(v392);
                          std::__shared_weak_count::__release_weak(v392);
                        }
                      }
                    }
                  }
                  goto LABEL_481;
                }
              }
              memmove(v331, v459, v323);
              goto LABEL_396;
            }
          }
          memmove(v328, v327, v326);
          goto LABEL_388;
        }
LABEL_225:
        MEMORY[0x212BC6368](v95, 0x1000C8000313F17);
        goto LABEL_226;
      }
    }
    v73 = atomic_load((unsigned __int8 *)&qword_254A6B820);
    if ((v73 & 1) == 0 && __cxa_guard_acquire(&qword_254A6B820))
    {
      v452 = atomic_load((unsigned __int8 *)&qword_254A6DDE0);
      if ((v452 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDE0))
      {
        sub_20E8BFCE4(&qword_254A6DDD8);
        __cxa_guard_release(&qword_254A6DDE0);
      }
      object[0] = (void *)qword_254A6DDD8;
      v504[23] = 8;
      strcpy(v504, "cv3d.vio");
      sub_20E8C4068((uint64_t **)object, (uint64_t)v504, &qword_254A6B818);
      if ((v504[23] & 0x80000000) != 0)
        operator delete(*(void **)v504);
      __cxa_guard_release(&qword_254A6B820);
    }
    __src[0].i64[0] = qword_254A6B818;
    if (**(int **)(qword_254A6B818 + 56) > 2)
      return;
    v74 = *(unsigned __int8 *)(qword_254A6B818 + 72);
    v75 = sub_20E8C31DC(qword_254A6B818, "OSLogSurrogateAppender", 1, 0);
    v76 = v75;
    if (!v74 && v75 == 0)
      return;
    v476[0].i64[0] = (uint64_t)__src;
    v476[0].u64[1] = std::chrono::steady_clock::now().__d_.__rep_;
    *(std::chrono::system_clock::time_point *)v476[1].i8 = std::chrono::system_clock::now();
    v476[1].i32[2] = 2;
    v476[2].i64[0] = (uint64_t)"unknown file";
    v476[2].i32[2] = 476;
    *(_QWORD *)&v477 = 0;
    v476[3].i64[0] = (uint64_t)"unknown function";
    v476[3].i64[1] = 0;
    v78 = *(_QWORD *)v476[0].i64[0];
    v79 = (const char *)(*(_QWORD *)v476[0].i64[0] + 16);
    v473 = v79;
    if (*(char *)(*(_QWORD *)v476[0].i64[0] + 39) < 0)
    {
      v79 = *(const char **)(v78 + 16);
      v80 = *(_QWORD *)(v78 + 24);
    }
    else
    {
      v80 = *(unsigned __int8 *)(*(_QWORD *)v476[0].i64[0] + 39);
    }
    v105 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v105 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)v504);
      if (v504[24])
      {
        *(_OWORD *)byte_254A4A4F8 = *(_OWORD *)v504;
        *(_QWORD *)&byte_254A4A4F8[16] = *(_QWORD *)&v504[16];
      }
      else
      {
        byte_254A4A4F8[23] = 14;
        strcpy(byte_254A4A4F8, "com.apple.cv3d");
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v106 = byte_254A4A4F8;
    else
      v106 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v107 = byte_254A4A4F8[23];
    else
      v107 = *(_QWORD *)&byte_254A4A4F8[8];
    object[0] = os_log_create(v106, v79);
    v108 = &object[1];
    if (v107 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v107 >= 0x17)
    {
      v109 = (v107 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v107 | 7) != 0x17)
        v109 = v107 | 7;
      v110 = v109 + 1;
      v108 = (void **)operator new(v109 + 1);
      object[3] = (void *)(v110 | 0x8000000000000000);
      object[1] = v108;
      object[2] = (void *)v107;
    }
    else
    {
      HIBYTE(object[3]) = v107;
      if (!v107)
      {
LABEL_124:
        *((_BYTE *)v108 + v107) = 0;
        LOBYTE(object[4]) = 1;
        v111 = &object[5];
        if (v80 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v80 >= 0x17)
        {
          v112 = (v80 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v80 | 7) != 0x17)
            v112 = v80 | 7;
          v113 = v112 + 1;
          v111 = (void **)operator new(v112 + 1);
          object[7] = (void *)(v113 | 0x8000000000000000);
          object[5] = v111;
          object[6] = (void *)v80;
        }
        else
        {
          HIBYTE(object[7]) = v80;
          if (!v80)
          {
LABEL_132:
            *((_BYTE *)v111 + v80) = 0;
            LOBYTE(object[8]) = 1;
            v114 = object[0];
            if (SHIBYTE(object[7]) < 0)
              operator delete(object[5]);
            if (LOBYTE(object[4]) && SHIBYTE(object[3]) < 0)
              operator delete(object[1]);
            if (object[0])
              os_release(object[0]);
            if (v76 && *(_QWORD *)(v76 + 24))
            {
              v115 = _os_log_pack_size();
              v116 = (std::__shared_weak_count_vtbl *)operator new(v115, (std::align_val_t)8uLL);
              v117 = (std::__shared_weak_count *)operator new();
              v118 = v117;
              v117->__shared_owners_ = 0;
              v119 = (unint64_t *)&v117->__shared_owners_;
              v117->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v117->__shared_weak_owners_ = 0;
              v117[1].__vftable = v116;
              do
                v120 = __ldxr(v119);
              while (__stxr(v120 + 1, v119));
              do
                v121 = __ldaxr(v119);
              while (__stlxr(v121 - 1, v119));
              if (!v121)
              {
                ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                std::__shared_weak_count::__release_weak(v118);
              }
              *(_WORD *)_os_log_pack_fill() = 0;
              v122 = (_QWORD *)operator new();
              v123 = *(unsigned __int8 *)(v78 + 39);
              v124 = v473;
              if ((v123 & 0x80u) != 0)
              {
                v124 = *(const char **)(v78 + 16);
                v123 = *(_QWORD *)(v78 + 24);
              }
              *v122 = v116;
              v122[1] = v116;
              v122[2] = v118;
              v122[3] = 0;
              v122[4] = 0;
              v122[5] = v124;
              v122[6] = v123;
              *((_BYTE *)v122 + 56) = 2;
              object[0] = v122;
              (*(void (**)(_QWORD, void **))(**(_QWORD **)(v76 + 24) + 40))(*(_QWORD *)(v76 + 24), object);
              v125 = object[0];
              object[0] = 0;
              if (v125)
              {
                v126 = (std::__shared_weak_count *)*((_QWORD *)v125 + 4);
                if (v126)
                {
                  v127 = (unint64_t *)&v126->__shared_owners_;
                  do
                    v128 = __ldaxr(v127);
                  while (__stlxr(v128 - 1, v127));
                  if (!v128)
                  {
                    ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
                    std::__shared_weak_count::__release_weak(v126);
                  }
                }
                v129 = (std::__shared_weak_count *)*((_QWORD *)v125 + 2);
                if (v129)
                {
                  v130 = (unint64_t *)&v129->__shared_owners_;
                  do
                    v131 = __ldaxr(v130);
                  while (__stlxr(v131 - 1, v130));
                  if (!v131)
                  {
                    ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
                    std::__shared_weak_count::__release_weak(v129);
                  }
                }
                MEMORY[0x212BC6398](v125, 0x10F0C40B62ED6C6);
              }
            }
            else
            {
              os_log_type_enabled(v114, OS_LOG_TYPE_DEBUG);
              *(_WORD *)v504 = 0;
              v132 = (void *)_os_log_send_and_compose_impl();
              if (v132)
                free(v132);
            }
            if (v74)
            {
              sub_20E8C003C((uint64_t)v476, "Limit the amount of noise used in error propagation; inverse noise should be GT 0.");
              v133 = (uint64_t *)v476[0].i64[0];
              if (!v476[0].i64[0] || (v134 = v476[3].i64[1]) == 0)
              {
LABEL_217:
                v175 = (std::__shared_weak_count *)v477;
                if (!(_QWORD)v477)
                  return;
                v176 = (unint64_t *)(v477 + 8);
                do
                  v177 = __ldaxr(v176);
                while (__stlxr(v177 - 1, v176));
LABEL_220:
                if (!v177)
                {
                  ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
                  std::__shared_weak_count::__release_weak(v175);
                }
                return;
              }
              v135 = (_QWORD *)(*(_QWORD *)v476[0].i64[0] + 16);
              if (*(char *)(*(_QWORD *)v476[0].i64[0] + 39) < 0)
                v135 = (_QWORD *)*v135;
              v136 = *(__int128 *)((char *)v476 + 8);
              v137 = v476[1].i32[2];
              v138 = v476[2].i64[0];
              v139 = v476[2].i32[2];
              v140 = v476[3].i64[0];
              v141 = (std::__shared_weak_count *)v477;
              if ((_QWORD)v477)
              {
                v142 = (unint64_t *)(v477 + 8);
                do
                  v143 = __ldxr(v142);
                while (__stxr(v143 + 1, v142));
              }
              *(_QWORD *)v504 = v135;
              *(_OWORD *)&v504[8] = v136;
              *(_DWORD *)&v504[24] = v137;
              v505.i64[0] = v138;
              v505.i32[2] = v139;
              *(_QWORD *)&v506 = v140;
              *((_QWORD *)&v506 + 1) = v134;
              *(_QWORD *)&v507 = v141;
              if (v141)
              {
                v144 = (unint64_t *)&v141->__shared_owners_;
                do
                  v145 = __ldxr(v144);
                while (__stxr(v145 + 1, v144));
              }
              v146 = v141;
              if (v137 >= **(_DWORD **)(*v133 + 56))
              {
                sub_20E8C3FC4(*v133, (uint64_t)v504);
                v146 = (std::__shared_weak_count *)v507;
              }
              if (v146)
              {
                v147 = (unint64_t *)&v146->__shared_owners_;
                do
                  v148 = __ldaxr(v147);
                while (__stlxr(v148 - 1, v147));
                if (!v148)
                {
                  ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
                  std::__shared_weak_count::__release_weak(v146);
                }
              }
              if (v141)
              {
                v149 = (unint64_t *)&v141->__shared_owners_;
                do
                  v150 = __ldaxr(v149);
                while (__stlxr(v150 - 1, v149));
                if (!v150)
                {
                  ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
                  std::__shared_weak_count::__release_weak(v141);
                }
              }
              v151 = (std::__shared_weak_count *)v477;
              *(_QWORD *)&v477 = 0;
              v476[3].i64[1] = 0;
              if (v151)
              {
                v152 = (unint64_t *)&v151->__shared_owners_;
                do
                  v153 = __ldaxr(v152);
                while (__stlxr(v153 - 1, v152));
                if (!v153)
                {
                  ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
                  std::__shared_weak_count::__release_weak(v151);
                }
              }
            }
            v154 = (uint64_t *)v476[0].i64[0];
            if (v476[0].i64[0])
            {
              v155 = v476[3].i64[1];
              if (v476[3].i64[1])
              {
                v156 = (_QWORD *)(*(_QWORD *)v476[0].i64[0] + 16);
                if (*(char *)(*(_QWORD *)v476[0].i64[0] + 39) < 0)
                  v156 = (_QWORD *)*v156;
                v157 = *(__int128 *)((char *)v476 + 8);
                v158 = v476[1].i32[2];
                v159 = v476[2].i64[0];
                v160 = v476[2].i32[2];
                v161 = v476[3].i64[0];
                v162 = (std::__shared_weak_count *)v477;
                if ((_QWORD)v477)
                {
                  v163 = (unint64_t *)(v477 + 8);
                  do
                    v164 = __ldxr(v163);
                  while (__stxr(v164 + 1, v163));
                }
                *(_QWORD *)v504 = v156;
                *(_OWORD *)&v504[8] = v157;
                *(_DWORD *)&v504[24] = v158;
                v505.i64[0] = v159;
                v505.i32[2] = v160;
                *(_QWORD *)&v506 = v161;
                *((_QWORD *)&v506 + 1) = v155;
                *(_QWORD *)&v507 = v162;
                if (v162)
                {
                  v165 = (unint64_t *)&v162->__shared_owners_;
                  do
                    v166 = __ldxr(v165);
                  while (__stxr(v166 + 1, v165));
                }
                v167 = v162;
                if (v158 >= **(_DWORD **)(*v154 + 56))
                {
                  sub_20E8C3FC4(*v154, (uint64_t)v504);
                  v167 = (std::__shared_weak_count *)v507;
                }
                if (v167)
                {
                  v168 = (unint64_t *)&v167->__shared_owners_;
                  do
                    v169 = __ldaxr(v168);
                  while (__stlxr(v169 - 1, v168));
                  if (!v169)
                  {
                    ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
                    std::__shared_weak_count::__release_weak(v167);
                  }
                }
                if (v162)
                {
                  v170 = (unint64_t *)&v162->__shared_owners_;
                  do
                    v171 = __ldaxr(v170);
                  while (__stlxr(v171 - 1, v170));
                  if (!v171)
                  {
                    ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
                    std::__shared_weak_count::__release_weak(v162);
                  }
                }
                v172 = (std::__shared_weak_count *)v477;
                *(_QWORD *)&v477 = 0;
                v476[3].i64[1] = 0;
                if (v172)
                {
                  v173 = (unint64_t *)&v172->__shared_owners_;
                  do
                    v174 = __ldaxr(v173);
                  while (__stlxr(v174 - 1, v173));
                  if (!v174)
                  {
                    ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
                    std::__shared_weak_count::__release_weak(v172);
                  }
                }
              }
            }
            goto LABEL_217;
          }
        }
        memmove(v111, v79, v80);
        goto LABEL_132;
      }
    }
    memmove(v108, v106, v107);
    goto LABEL_124;
  }
  v26 = *(_QWORD **)(v9 + 6296);
  v27 = *(_QWORD **)(v9 + 6304);
  if (v27 == v26)
    goto LABEL_37;
  v28 = 0xAF8AF8AF8AF8AF8BLL * (v27 - v26);
  do
  {
    v29 = v28 >> 1;
    v30 = &v26[35 * (v28 >> 1)];
    v31 = *v30;
    v32 = v30 + 35;
    v28 += ~(v28 >> 1);
    if (v31 < v8)
      v26 = v32;
    else
      v28 = v29;
  }
  while (v28);
  if (v27 == v26 || *v26 != v8)
  {
LABEL_37:
    v41 = (char *)operator new(0x58uLL);
    v43 = (std::__shared_weak_count *)v41;
    *((_QWORD *)v41 + 1) = 0;
    v44 = (unint64_t *)(v41 + 8);
    *((_QWORD *)v41 + 2) = 0;
    *(_QWORD *)v41 = &off_24CA016C8;
    *((_QWORD *)v41 + 3) = &off_24CA01718;
    v41[32] = 1;
    if (*v470 < 1.0e-15)
      goto LABEL_43;
    *((double *)v41 + 5) = sqrt(*v470);
    v45 = v470[1];
    if (v45 < 1.0e-15)
      goto LABEL_43;
    *((double *)v41 + 6) = sqrt(v45);
    v46 = v470[2];
    if (v46 < 1.0e-15)
      goto LABEL_43;
    *((double *)v41 + 7) = sqrt(v46);
    v47 = v470[3];
    if (v47 >= 1.0e-15
      && (*((double *)v41 + 8) = sqrt(v47), v48 = v470[4], v48 >= 1.0e-15)
      && (*((double *)v41 + 9) = sqrt(v48), v49 = v470[5], v49 >= 1.0e-15))
    {
      *((double *)v41 + 10) = sqrt(v49);
      v41[32] = 1;
    }
    else
    {
LABEL_43:
      v41[32] = 0;
      v50 = vdupq_n_s64(0x7FF8000000000000uLL);
      *(int64x2_t *)(v41 + 40) = v50;
      *(int64x2_t *)(v41 + 56) = v50;
      *(int64x2_t *)(v41 + 72) = v50;
    }
    *(_QWORD *)v504 = v8;
    v51 = *(_OWORD *)(v24 + 64);
    v505 = *(int8x16_t *)(v24 + 48);
    v506 = v51;
    v507 = *(_OWORD *)(v24 + 80);
    v508 = *(_QWORD *)(v24 + 96);
    *(_OWORD *)&v504[16] = *(_OWORD *)(v24 + 32);
    v509 = *(_OWORD *)(v24 + 104);
    v510 = *(_QWORD *)(v24 + 120);
    v511 = v41 + 24;
    v512 = (std::__shared_weak_count *)v41;
    do
      v52 = __ldxr(v44);
    while (__stxr(v52 + 1, v44));
    LODWORD(object[0]) = v8;
    if ((sub_20FB8AB84((int64x2_t *)(v9 + 5184), (__int128 *)v504, (__int128 *)object, 0, 0, v42) & 1) != 0)
    {
      *(_BYTE *)(v9 + 7868) = 0;
      *(_DWORD *)(v9 + 7864) = 0;
    }
    v53 = v512;
    if (v512)
    {
      v54 = (unint64_t *)&v512->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    do
      v56 = __ldaxr(v44);
    while (__stlxr(v56 - 1, v44));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
    goto LABEL_56;
  }
  v33 = atomic_load((unsigned __int8 *)&qword_254A6B820);
  if ((v33 & 1) == 0 && __cxa_guard_acquire(&qword_254A6B820))
  {
    v453 = atomic_load((unsigned __int8 *)&qword_254A6DDE0);
    if ((v453 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDE0))
    {
      sub_20E8BFCE4(&qword_254A6DDD8);
      __cxa_guard_release(&qword_254A6DDE0);
    }
    object[0] = (void *)qword_254A6DDD8;
    v504[23] = 8;
    strcpy(v504, "cv3d.vio");
    sub_20E8C4068((uint64_t **)object, (uint64_t)v504, &qword_254A6B818);
    if ((v504[23] & 0x80000000) != 0)
      operator delete(*(void **)v504);
    __cxa_guard_release(&qword_254A6B820);
  }
  __src[0].i64[0] = qword_254A6B818;
  if (**(int **)(qword_254A6B818 + 56) <= 2)
  {
    v34 = *(unsigned __int8 *)(qword_254A6B818 + 72);
    v35 = sub_20E8C31DC(qword_254A6B818, "OSLogSurrogateAppender", 1, 0);
    v36 = v35;
    if (v34 || v35 != 0)
    {
      v476[0].i64[0] = (uint64_t)__src;
      v476[0].u64[1] = std::chrono::steady_clock::now().__d_.__rep_;
      *(std::chrono::system_clock::time_point *)v476[1].i8 = std::chrono::system_clock::now();
      v476[1].i32[2] = 2;
      v476[2].i64[0] = (uint64_t)"unknown file";
      v476[2].i32[2] = 439;
      *(_QWORD *)&v477 = 0;
      v476[3].i64[0] = (uint64_t)"unknown function";
      v476[3].i64[1] = 0;
      v38 = *(_QWORD *)v476[0].i64[0];
      v39 = (const char *)(*(_QWORD *)v476[0].i64[0] + 16);
      v471 = v39;
      if (*(char *)(*(_QWORD *)v476[0].i64[0] + 39) < 0)
      {
        v39 = *(const char **)(v38 + 16);
        v40 = *(_QWORD *)(v38 + 24);
      }
      else
      {
        v40 = *(unsigned __int8 *)(*(_QWORD *)v476[0].i64[0] + 39);
      }
      v236 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v236 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)v504);
        if (v504[24])
        {
          *(_OWORD *)byte_254A4A4F8 = *(_OWORD *)v504;
          *(_QWORD *)&byte_254A4A4F8[16] = *(_QWORD *)&v504[16];
        }
        else
        {
          byte_254A4A4F8[23] = 14;
          strcpy(byte_254A4A4F8, "com.apple.cv3d");
        }
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v237 = byte_254A4A4F8;
      else
        v237 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v238 = byte_254A4A4F8[23];
      else
        v238 = *(_QWORD *)&byte_254A4A4F8[8];
      object[0] = os_log_create(v237, v39);
      v239 = &object[1];
      if (v238 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v238 >= 0x17)
      {
        v240 = (v238 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v238 | 7) != 0x17)
          v240 = v238 | 7;
        v241 = v240 + 1;
        v239 = (void **)operator new(v240 + 1);
        object[3] = (void *)(v241 | 0x8000000000000000);
        object[1] = v239;
        object[2] = (void *)v238;
      }
      else
      {
        HIBYTE(object[3]) = v238;
        if (!v238)
        {
LABEL_259:
          *((_BYTE *)v239 + v238) = 0;
          LOBYTE(object[4]) = 1;
          v242 = &object[5];
          if (v40 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v40 >= 0x17)
          {
            v243 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v40 | 7) != 0x17)
              v243 = v40 | 7;
            v244 = v243 + 1;
            v242 = (void **)operator new(v243 + 1);
            object[7] = (void *)(v244 | 0x8000000000000000);
            object[5] = v242;
            object[6] = (void *)v40;
          }
          else
          {
            HIBYTE(object[7]) = v40;
            if (!v40)
            {
LABEL_267:
              *((_BYTE *)v242 + v40) = 0;
              LOBYTE(object[8]) = 1;
              v245 = object[0];
              if (SHIBYTE(object[7]) < 0)
                operator delete(object[5]);
              if (LOBYTE(object[4]) && SHIBYTE(object[3]) < 0)
                operator delete(object[1]);
              if (object[0])
                os_release(object[0]);
              if (v36 && *(_QWORD *)(v36 + 24))
              {
                v246 = _os_log_pack_size();
                v247 = (std::__shared_weak_count_vtbl *)operator new(v246, (std::align_val_t)8uLL);
                v248 = (std::__shared_weak_count *)operator new();
                v249 = v248;
                v248->__shared_owners_ = 0;
                v250 = (unint64_t *)&v248->__shared_owners_;
                v248->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v248->__shared_weak_owners_ = 0;
                v248[1].__vftable = v247;
                do
                  v251 = __ldxr(v250);
                while (__stxr(v251 + 1, v250));
                do
                  v252 = __ldaxr(v250);
                while (__stlxr(v252 - 1, v250));
                if (!v252)
                {
                  ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
                  std::__shared_weak_count::__release_weak(v249);
                }
                *(_WORD *)_os_log_pack_fill() = 0;
                v253 = (_QWORD *)operator new();
                v254 = *(unsigned __int8 *)(v38 + 39);
                v255 = v471;
                if ((v254 & 0x80u) != 0)
                {
                  v255 = *(const char **)(v38 + 16);
                  v254 = *(_QWORD *)(v38 + 24);
                }
                *v253 = v247;
                v253[1] = v247;
                v253[2] = v249;
                v253[3] = 0;
                v253[4] = 0;
                v253[5] = v255;
                v253[6] = v254;
                *((_BYTE *)v253 + 56) = 2;
                object[0] = v253;
                (*(void (**)(_QWORD, void **))(**(_QWORD **)(v36 + 24) + 40))(*(_QWORD *)(v36 + 24), object);
                v256 = object[0];
                object[0] = 0;
                if (v256)
                {
                  v257 = (std::__shared_weak_count *)*((_QWORD *)v256 + 4);
                  if (v257)
                  {
                    v258 = (unint64_t *)&v257->__shared_owners_;
                    do
                      v259 = __ldaxr(v258);
                    while (__stlxr(v259 - 1, v258));
                    if (!v259)
                    {
                      ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
                      std::__shared_weak_count::__release_weak(v257);
                    }
                  }
                  v260 = (std::__shared_weak_count *)*((_QWORD *)v256 + 2);
                  if (v260)
                  {
                    v261 = (unint64_t *)&v260->__shared_owners_;
                    do
                      v262 = __ldaxr(v261);
                    while (__stlxr(v262 - 1, v261));
                    if (!v262)
                    {
                      ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
                      std::__shared_weak_count::__release_weak(v260);
                    }
                  }
                  MEMORY[0x212BC6398](v256, 0x10F0C40B62ED6C6);
                }
              }
              else
              {
                os_log_type_enabled(v245, OS_LOG_TYPE_DEBUG);
                *(_WORD *)v504 = 0;
                v263 = (void *)_os_log_send_and_compose_impl();
                if (v263)
                  free(v263);
              }
              if (v34)
              {
                sub_20E8C003C((uint64_t)v476, "Attempting to add existing extrinsics calib. prior factor");
                v264 = (uint64_t *)v476[0].i64[0];
                if (!v476[0].i64[0] || (v265 = v476[3].i64[1]) == 0)
                {
LABEL_352:
                  v175 = (std::__shared_weak_count *)v477;
                  if (!(_QWORD)v477)
                    return;
                  v306 = (unint64_t *)(v477 + 8);
                  do
                    v177 = __ldaxr(v306);
                  while (__stlxr(v177 - 1, v306));
                  goto LABEL_220;
                }
                v266 = (_QWORD *)(*(_QWORD *)v476[0].i64[0] + 16);
                if (*(char *)(*(_QWORD *)v476[0].i64[0] + 39) < 0)
                  v266 = (_QWORD *)*v266;
                v267 = *(__int128 *)((char *)v476 + 8);
                v268 = v476[1].i32[2];
                v269 = v476[2].i64[0];
                v270 = v476[2].i32[2];
                v271 = v476[3].i64[0];
                v272 = (std::__shared_weak_count *)v477;
                if ((_QWORD)v477)
                {
                  v273 = (unint64_t *)(v477 + 8);
                  do
                    v274 = __ldxr(v273);
                  while (__stxr(v274 + 1, v273));
                }
                *(_QWORD *)v504 = v266;
                *(_OWORD *)&v504[8] = v267;
                *(_DWORD *)&v504[24] = v268;
                v505.i64[0] = v269;
                v505.i32[2] = v270;
                *(_QWORD *)&v506 = v271;
                *((_QWORD *)&v506 + 1) = v265;
                *(_QWORD *)&v507 = v272;
                if (v272)
                {
                  v275 = (unint64_t *)&v272->__shared_owners_;
                  do
                    v276 = __ldxr(v275);
                  while (__stxr(v276 + 1, v275));
                }
                v277 = v272;
                if (v268 >= **(_DWORD **)(*v264 + 56))
                {
                  sub_20E8C3FC4(*v264, (uint64_t)v504);
                  v277 = (std::__shared_weak_count *)v507;
                }
                if (v277)
                {
                  v278 = (unint64_t *)&v277->__shared_owners_;
                  do
                    v279 = __ldaxr(v278);
                  while (__stlxr(v279 - 1, v278));
                  if (!v279)
                  {
                    ((void (*)(std::__shared_weak_count *))v277->__on_zero_shared)(v277);
                    std::__shared_weak_count::__release_weak(v277);
                  }
                }
                if (v272)
                {
                  v280 = (unint64_t *)&v272->__shared_owners_;
                  do
                    v281 = __ldaxr(v280);
                  while (__stlxr(v281 - 1, v280));
                  if (!v281)
                  {
                    ((void (*)(std::__shared_weak_count *))v272->__on_zero_shared)(v272);
                    std::__shared_weak_count::__release_weak(v272);
                  }
                }
                v282 = (std::__shared_weak_count *)v477;
                *(_QWORD *)&v477 = 0;
                v476[3].i64[1] = 0;
                if (v282)
                {
                  v283 = (unint64_t *)&v282->__shared_owners_;
                  do
                    v284 = __ldaxr(v283);
                  while (__stlxr(v284 - 1, v283));
                  if (!v284)
                  {
                    ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
                    std::__shared_weak_count::__release_weak(v282);
                  }
                }
              }
              v285 = (uint64_t *)v476[0].i64[0];
              if (v476[0].i64[0])
              {
                v286 = v476[3].i64[1];
                if (v476[3].i64[1])
                {
                  v287 = (_QWORD *)(*(_QWORD *)v476[0].i64[0] + 16);
                  if (*(char *)(*(_QWORD *)v476[0].i64[0] + 39) < 0)
                    v287 = (_QWORD *)*v287;
                  v288 = *(__int128 *)((char *)v476 + 8);
                  v289 = v476[1].i32[2];
                  v290 = v476[2].i64[0];
                  v291 = v476[2].i32[2];
                  v292 = v476[3].i64[0];
                  v293 = (std::__shared_weak_count *)v477;
                  if ((_QWORD)v477)
                  {
                    v294 = (unint64_t *)(v477 + 8);
                    do
                      v295 = __ldxr(v294);
                    while (__stxr(v295 + 1, v294));
                  }
                  *(_QWORD *)v504 = v287;
                  *(_OWORD *)&v504[8] = v288;
                  *(_DWORD *)&v504[24] = v289;
                  v505.i64[0] = v290;
                  v505.i32[2] = v291;
                  *(_QWORD *)&v506 = v292;
                  *((_QWORD *)&v506 + 1) = v286;
                  *(_QWORD *)&v507 = v293;
                  if (v293)
                  {
                    v296 = (unint64_t *)&v293->__shared_owners_;
                    do
                      v297 = __ldxr(v296);
                    while (__stxr(v297 + 1, v296));
                  }
                  v298 = v293;
                  if (v289 >= **(_DWORD **)(*v285 + 56))
                  {
                    sub_20E8C3FC4(*v285, (uint64_t)v504);
                    v298 = (std::__shared_weak_count *)v507;
                  }
                  if (v298)
                  {
                    v299 = (unint64_t *)&v298->__shared_owners_;
                    do
                      v300 = __ldaxr(v299);
                    while (__stlxr(v300 - 1, v299));
                    if (!v300)
                    {
                      ((void (*)(std::__shared_weak_count *))v298->__on_zero_shared)(v298);
                      std::__shared_weak_count::__release_weak(v298);
                    }
                  }
                  if (v293)
                  {
                    v301 = (unint64_t *)&v293->__shared_owners_;
                    do
                      v302 = __ldaxr(v301);
                    while (__stlxr(v302 - 1, v301));
                    if (!v302)
                    {
                      ((void (*)(std::__shared_weak_count *))v293->__on_zero_shared)(v293);
                      std::__shared_weak_count::__release_weak(v293);
                    }
                  }
                  v303 = (std::__shared_weak_count *)v477;
                  *(_QWORD *)&v477 = 0;
                  v476[3].i64[1] = 0;
                  if (v303)
                  {
                    v304 = (unint64_t *)&v303->__shared_owners_;
                    do
                      v305 = __ldaxr(v304);
                    while (__stlxr(v305 - 1, v304));
                    if (!v305)
                    {
                      ((void (*)(std::__shared_weak_count *))v303->__on_zero_shared)(v303);
                      std::__shared_weak_count::__release_weak(v303);
                    }
                  }
                }
              }
              goto LABEL_352;
            }
          }
          memmove(v242, v39, v40);
          goto LABEL_267;
        }
      }
      memmove(v239, v237, v238);
      goto LABEL_259;
    }
  }
}

void sub_20FB89E0C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A6DDE0);
  __cxa_guard_abort(&qword_254A6B820);
  _Unwind_Resume(a1);
}

void sub_20FB89E94(_Unwind_Exception *a1, int a2)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  if (a2)
  {
    v4 = (std::__shared_weak_count *)STACK[0x590];
    if (STACK[0x590])
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    if (v2)
    {
      v7 = (unint64_t *)&v2->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        sub_20E860DA4(a1);
      }
    }
    sub_20E860DA4(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20FB89F10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t *a33,__int128 a34,int a35,unint64_t a36,int a37,unint64_t a38,unint64_t a39,std::__shared_weak_count *a40)
{
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;

  v41 = (std::__shared_weak_count *)STACK[0x590];
  if (STACK[0x590])
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldaxr(p_shared_owners);
    while (__stlxr(v43 - 1, p_shared_owners));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v40)
  {
    v44 = (unint64_t *)&v40->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  if (a33 && a39)
  {
    v46 = (_QWORD *)(*a33 + 16);
    if (*(char *)(*a33 + 39) < 0)
      v46 = (_QWORD *)*v46;
    if (a40)
    {
      v47 = (unint64_t *)&a40->__shared_owners_;
      do
        v48 = __ldxr(v47);
      while (__stxr(v48 + 1, v47));
    }
    STACK[0x550] = (unint64_t)v46;
    *(_OWORD *)&STACK[0x558] = a34;
    LODWORD(STACK[0x568]) = a35;
    STACK[0x570] = a36;
    LODWORD(STACK[0x578]) = a37;
    STACK[0x580] = a38;
    STACK[0x588] = a39;
    STACK[0x590] = (unint64_t)a40;
    if (a40)
    {
      v49 = (unint64_t *)&a40->__shared_owners_;
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
    }
    v51 = a40;
    if (a35 >= **(_DWORD **)(*a33 + 56))
    {
      sub_20E8C3FC4(*a33, (uint64_t)&STACK[0x550]);
      v51 = (std::__shared_weak_count *)STACK[0x590];
    }
    if (v51)
    {
      v52 = (unint64_t *)&v51->__shared_owners_;
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    if (a40)
    {
      v54 = (unint64_t *)&a40->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))a40->__on_zero_shared)(a40);
        std::__shared_weak_count::__release_weak(a40);
      }
    }
    v56 = a40;
    a40 = 0;
    if (v56)
    {
      v57 = (unint64_t *)&v56->__shared_owners_;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
  }
  if (a40)
  {
    v59 = (unint64_t *)&a40->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    JUMPOUT(0x20FB8AA5CLL);
  }
  JUMPOUT(0x20FB8AB7CLL);
}

void sub_20FB89F84(_Unwind_Exception *a1, int a2)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  if (a2)
  {
    v4 = (std::__shared_weak_count *)STACK[0x590];
    if (STACK[0x590])
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    if (v2)
    {
      v7 = (unint64_t *)&v2->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        sub_20E860DA4(a1);
      }
    }
    sub_20E860DA4(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20FB89FE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t *a71;
  __int128 a72;
  std::__shared_weak_count *v72;
  std::__shared_weak_count *v73;
  unint64_t *p_shared_owners;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  _QWORD *v79;
  __int128 v80;
  int v81;
  unint64_t v82;
  int v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t *v98;
  unint64_t v99;

  v73 = (std::__shared_weak_count *)STACK[0x590];
  if (STACK[0x590])
  {
    p_shared_owners = (unint64_t *)&v73->__shared_owners_;
    do
      v75 = __ldaxr(p_shared_owners);
    while (__stlxr(v75 - 1, p_shared_owners));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  if (v72)
  {
    v76 = (unint64_t *)&v72->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  if (a71)
  {
    v78 = STACK[0x228];
    if (STACK[0x228])
    {
      v79 = (_QWORD *)(*a71 + 16);
      if (*(char *)(*a71 + 39) < 0)
        v79 = (_QWORD *)*v79;
      v80 = a72;
      v81 = STACK[0x208];
      v82 = STACK[0x210];
      v83 = STACK[0x218];
      v84 = STACK[0x220];
      v85 = (std::__shared_weak_count *)STACK[0x230];
      if (STACK[0x230])
      {
        v86 = (unint64_t *)&v85->__shared_owners_;
        do
          v87 = __ldxr(v86);
        while (__stxr(v87 + 1, v86));
      }
      STACK[0x550] = (unint64_t)v79;
      *(_OWORD *)&STACK[0x558] = v80;
      LODWORD(STACK[0x568]) = v81;
      STACK[0x570] = v82;
      LODWORD(STACK[0x578]) = v83;
      STACK[0x580] = v84;
      STACK[0x588] = v78;
      STACK[0x590] = (unint64_t)v85;
      if (v85)
      {
        v88 = (unint64_t *)&v85->__shared_owners_;
        do
          v89 = __ldxr(v88);
        while (__stxr(v89 + 1, v88));
      }
      v90 = v85;
      if (v81 >= **(_DWORD **)(*a71 + 56))
      {
        sub_20E8C3FC4(*a71, (uint64_t)&STACK[0x550]);
        v90 = (std::__shared_weak_count *)STACK[0x590];
      }
      if (v90)
      {
        v91 = (unint64_t *)&v90->__shared_owners_;
        do
          v92 = __ldaxr(v91);
        while (__stlxr(v92 - 1, v91));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v90);
        }
      }
      if (v85)
      {
        v93 = (unint64_t *)&v85->__shared_owners_;
        do
          v94 = __ldaxr(v93);
        while (__stlxr(v94 - 1, v93));
        if (!v94)
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
        }
      }
      v95 = (std::__shared_weak_count *)STACK[0x230];
      STACK[0x230] = 0;
      STACK[0x228] = 0;
      if (v95)
      {
        v96 = (unint64_t *)&v95->__shared_owners_;
        do
          v97 = __ldaxr(v96);
        while (__stlxr(v97 - 1, v96));
        if (!v97)
        {
          ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
          std::__shared_weak_count::__release_weak(v95);
        }
      }
    }
  }
  if (STACK[0x230])
  {
    v98 = (unint64_t *)(STACK[0x230] + 8);
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    JUMPOUT(0x20FB8AA5CLL);
  }
  JUMPOUT(0x20FB8AB7CLL);
}

void sub_20FB8A21C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t *a71;
  __int128 a72;
  uint64_t v72;
  unint64_t v73;
  _QWORD *v74;
  __int128 v75;
  int v76;
  unint64_t v77;
  int v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *p_shared_owners;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;

  MEMORY[0x212BC6398](v72, 0x10D0C40B950D02ALL);
  if (a71)
  {
    v73 = STACK[0x228];
    if (STACK[0x228])
    {
      v74 = (_QWORD *)(*a71 + 16);
      if (*(char *)(*a71 + 39) < 0)
        v74 = (_QWORD *)*v74;
      v75 = a72;
      v76 = STACK[0x208];
      v77 = STACK[0x210];
      v78 = STACK[0x218];
      v79 = STACK[0x220];
      v80 = (std::__shared_weak_count *)STACK[0x230];
      if (STACK[0x230])
      {
        p_shared_owners = (unint64_t *)&v80->__shared_owners_;
        do
          v82 = __ldxr(p_shared_owners);
        while (__stxr(v82 + 1, p_shared_owners));
      }
      STACK[0x550] = (unint64_t)v74;
      *(_OWORD *)&STACK[0x558] = v75;
      LODWORD(STACK[0x568]) = v76;
      STACK[0x570] = v77;
      LODWORD(STACK[0x578]) = v78;
      STACK[0x580] = v79;
      STACK[0x588] = v73;
      STACK[0x590] = (unint64_t)v80;
      if (v80)
      {
        v83 = (unint64_t *)&v80->__shared_owners_;
        do
          v84 = __ldxr(v83);
        while (__stxr(v84 + 1, v83));
      }
      v85 = v80;
      if (v76 >= **(_DWORD **)(*a71 + 56))
      {
        sub_20E8C3FC4(*a71, (uint64_t)&STACK[0x550]);
        v85 = (std::__shared_weak_count *)STACK[0x590];
      }
      if (v85)
      {
        v86 = (unint64_t *)&v85->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
        }
      }
      if (v80)
      {
        v88 = (unint64_t *)&v80->__shared_owners_;
        do
          v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (!v89)
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
      }
      v90 = (std::__shared_weak_count *)STACK[0x230];
      STACK[0x230] = 0;
      STACK[0x228] = 0;
      if (v90)
      {
        v91 = (unint64_t *)&v90->__shared_owners_;
        do
          v92 = __ldaxr(v91);
        while (__stlxr(v92 - 1, v91));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v90);
        }
      }
    }
  }
  if (STACK[0x230])
  {
    v93 = (unint64_t *)(STACK[0x230] + 8);
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    JUMPOUT(0x20FB8AA5CLL);
  }
  JUMPOUT(0x20FB8AB7CLL);
}

void sub_20FB8A23C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t *a71;
  __int128 a72;
  unint64_t v72;
  _QWORD *v73;
  __int128 v74;
  int v75;
  unint64_t v76;
  int v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *p_shared_owners;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;

  if (a71)
  {
    v72 = STACK[0x228];
    if (STACK[0x228])
    {
      v73 = (_QWORD *)(*a71 + 16);
      if (*(char *)(*a71 + 39) < 0)
        v73 = (_QWORD *)*v73;
      v74 = a72;
      v75 = STACK[0x208];
      v76 = STACK[0x210];
      v77 = STACK[0x218];
      v78 = STACK[0x220];
      v79 = (std::__shared_weak_count *)STACK[0x230];
      if (STACK[0x230])
      {
        p_shared_owners = (unint64_t *)&v79->__shared_owners_;
        do
          v81 = __ldxr(p_shared_owners);
        while (__stxr(v81 + 1, p_shared_owners));
      }
      STACK[0x550] = (unint64_t)v73;
      *(_OWORD *)&STACK[0x558] = v74;
      LODWORD(STACK[0x568]) = v75;
      STACK[0x570] = v76;
      LODWORD(STACK[0x578]) = v77;
      STACK[0x580] = v78;
      STACK[0x588] = v72;
      STACK[0x590] = (unint64_t)v79;
      if (v79)
      {
        v82 = (unint64_t *)&v79->__shared_owners_;
        do
          v83 = __ldxr(v82);
        while (__stxr(v83 + 1, v82));
      }
      v84 = v79;
      if (v75 >= **(_DWORD **)(*a71 + 56))
      {
        sub_20E8C3FC4(*a71, (uint64_t)&STACK[0x550]);
        v84 = (std::__shared_weak_count *)STACK[0x590];
      }
      if (v84)
      {
        v85 = (unint64_t *)&v84->__shared_owners_;
        do
          v86 = __ldaxr(v85);
        while (__stlxr(v86 - 1, v85));
        if (!v86)
        {
          ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
          std::__shared_weak_count::__release_weak(v84);
        }
      }
      if (v79)
      {
        v87 = (unint64_t *)&v79->__shared_owners_;
        do
          v88 = __ldaxr(v87);
        while (__stlxr(v88 - 1, v87));
        if (!v88)
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
      }
      v89 = (std::__shared_weak_count *)STACK[0x230];
      STACK[0x230] = 0;
      STACK[0x228] = 0;
      if (v89)
      {
        v90 = (unint64_t *)&v89->__shared_owners_;
        do
          v91 = __ldaxr(v90);
        while (__stlxr(v91 - 1, v90));
        if (!v91)
        {
          ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
          std::__shared_weak_count::__release_weak(v89);
        }
      }
    }
  }
  if (STACK[0x230])
  {
    v92 = (unint64_t *)(STACK[0x230] + 8);
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    JUMPOUT(0x20FB8AA5CLL);
  }
  JUMPOUT(0x20FB8AB7CLL);
}

void sub_20FB8A244(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t *a71;
  __int128 a72;
  unint64_t v72;
  _QWORD *v73;
  __int128 v74;
  int v75;
  unint64_t v76;
  int v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *p_shared_owners;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;

  if (a71)
  {
    v72 = STACK[0x228];
    if (STACK[0x228])
    {
      v73 = (_QWORD *)(*a71 + 16);
      if (*(char *)(*a71 + 39) < 0)
        v73 = (_QWORD *)*v73;
      v74 = a72;
      v75 = STACK[0x208];
      v76 = STACK[0x210];
      v77 = STACK[0x218];
      v78 = STACK[0x220];
      v79 = (std::__shared_weak_count *)STACK[0x230];
      if (STACK[0x230])
      {
        p_shared_owners = (unint64_t *)&v79->__shared_owners_;
        do
          v81 = __ldxr(p_shared_owners);
        while (__stxr(v81 + 1, p_shared_owners));
      }
      STACK[0x550] = (unint64_t)v73;
      *(_OWORD *)&STACK[0x558] = v74;
      LODWORD(STACK[0x568]) = v75;
      STACK[0x570] = v76;
      LODWORD(STACK[0x578]) = v77;
      STACK[0x580] = v78;
      STACK[0x588] = v72;
      STACK[0x590] = (unint64_t)v79;
      if (v79)
      {
        v82 = (unint64_t *)&v79->__shared_owners_;
        do
          v83 = __ldxr(v82);
        while (__stxr(v83 + 1, v82));
      }
      v84 = v79;
      if (v75 >= **(_DWORD **)(*a71 + 56))
      {
        sub_20E8C3FC4(*a71, (uint64_t)&STACK[0x550]);
        v84 = (std::__shared_weak_count *)STACK[0x590];
      }
      if (v84)
      {
        v85 = (unint64_t *)&v84->__shared_owners_;
        do
          v86 = __ldaxr(v85);
        while (__stlxr(v86 - 1, v85));
        if (!v86)
        {
          ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
          std::__shared_weak_count::__release_weak(v84);
        }
      }
      if (v79)
      {
        v87 = (unint64_t *)&v79->__shared_owners_;
        do
          v88 = __ldaxr(v87);
        while (__stlxr(v88 - 1, v87));
        if (!v88)
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
      }
      v89 = (std::__shared_weak_count *)STACK[0x230];
      STACK[0x230] = 0;
      STACK[0x228] = 0;
      if (v89)
      {
        v90 = (unint64_t *)&v89->__shared_owners_;
        do
          v91 = __ldaxr(v90);
        while (__stlxr(v91 - 1, v90));
        if (!v91)
        {
          ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
          std::__shared_weak_count::__release_weak(v89);
        }
      }
    }
  }
  if (STACK[0x230])
  {
    v92 = (unint64_t *)(STACK[0x230] + 8);
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    JUMPOUT(0x20FB8AA5CLL);
  }
  JUMPOUT(0x20FB8AB7CLL);
}

void sub_20FB8A250(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t *a33,__int128 a34,int a35,unint64_t a36,int a37,unint64_t a38,unint64_t a39,std::__shared_weak_count *a40)
{
  _QWORD *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;

  if (LOBYTE(STACK[0x360]) && SLOBYTE(STACK[0x35F]) < 0)
    operator delete((void *)STACK[0x348]);
  if (STACK[0x340])
    os_release((void *)STACK[0x340]);
  if (a33 && a39)
  {
    v40 = (_QWORD *)(*a33 + 16);
    if (*(char *)(*a33 + 39) < 0)
      v40 = (_QWORD *)*v40;
    if (a40)
    {
      p_shared_owners = (unint64_t *)&a40->__shared_owners_;
      do
        v42 = __ldxr(p_shared_owners);
      while (__stxr(v42 + 1, p_shared_owners));
    }
    STACK[0x550] = (unint64_t)v40;
    *(_OWORD *)&STACK[0x558] = a34;
    LODWORD(STACK[0x568]) = a35;
    STACK[0x570] = a36;
    LODWORD(STACK[0x578]) = a37;
    STACK[0x580] = a38;
    STACK[0x588] = a39;
    STACK[0x590] = (unint64_t)a40;
    if (a40)
    {
      v43 = (unint64_t *)&a40->__shared_owners_;
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
    v45 = a40;
    if (a35 >= **(_DWORD **)(*a33 + 56))
    {
      sub_20E8C3FC4(*a33, (uint64_t)&STACK[0x550]);
      v45 = (std::__shared_weak_count *)STACK[0x590];
    }
    if (v45)
    {
      v46 = (unint64_t *)&v45->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    if (a40)
    {
      v48 = (unint64_t *)&a40->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))a40->__on_zero_shared)(a40);
        std::__shared_weak_count::__release_weak(a40);
      }
    }
    v50 = a40;
    a40 = 0;
    if (v50)
    {
      v51 = (unint64_t *)&v50->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
  }
  if (a40)
  {
    v53 = (unint64_t *)&a40->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    JUMPOUT(0x20FB8AA5CLL);
  }
  JUMPOUT(0x20FB8AB7CLL);
}

void sub_20FB8A3F8(_Unwind_Exception *a1, int a2)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  if (a2)
  {
    v4 = (std::__shared_weak_count *)STACK[0x590];
    if (STACK[0x590])
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    if (v2)
    {
      v7 = (unint64_t *)&v2->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        sub_20E860DA4(a1);
      }
    }
    sub_20E860DA4(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20FB8A458(_Unwind_Exception *a1, int a2)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  if (a2)
  {
    v4 = (std::__shared_weak_count *)STACK[0x590];
    if (STACK[0x590])
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    if (v2)
    {
      v7 = (unint64_t *)&v2->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        sub_20E860DA4(a1);
      }
    }
    sub_20E860DA4(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20FB8A4B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t *a71;
  __int128 a72;
  std::__shared_weak_count *v72;
  std::__shared_weak_count *v74;
  unint64_t *p_shared_owners;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  __int128 v81;
  int v82;
  unint64_t v83;
  int v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;

  v74 = (std::__shared_weak_count *)STACK[0x590];
  if (STACK[0x590])
  {
    p_shared_owners = (unint64_t *)&v74->__shared_owners_;
    do
      v76 = __ldaxr(p_shared_owners);
    while (__stlxr(v76 - 1, p_shared_owners));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  if (v72)
  {
    v77 = (unint64_t *)&v72->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  if (a71)
  {
    v79 = STACK[0x228];
    if (STACK[0x228])
    {
      v80 = (_QWORD *)(*a71 + 16);
      if (*(char *)(*a71 + 39) < 0)
        v80 = (_QWORD *)*v80;
      v81 = a72;
      v82 = STACK[0x208];
      v83 = STACK[0x210];
      v84 = STACK[0x218];
      v85 = STACK[0x220];
      v86 = (std::__shared_weak_count *)STACK[0x230];
      if (STACK[0x230])
      {
        v87 = (unint64_t *)&v86->__shared_owners_;
        do
          v88 = __ldxr(v87);
        while (__stxr(v88 + 1, v87));
      }
      STACK[0x550] = (unint64_t)v80;
      *(_OWORD *)&STACK[0x558] = v81;
      LODWORD(STACK[0x568]) = v82;
      STACK[0x570] = v83;
      LODWORD(STACK[0x578]) = v84;
      STACK[0x580] = v85;
      STACK[0x588] = v79;
      STACK[0x590] = (unint64_t)v86;
      if (v86)
      {
        v89 = (unint64_t *)&v86->__shared_owners_;
        do
          v90 = __ldxr(v89);
        while (__stxr(v90 + 1, v89));
      }
      v91 = v86;
      if (v82 >= **(_DWORD **)(*a71 + 56))
      {
        sub_20E8C3FC4(*a71, (uint64_t)&STACK[0x550]);
        v91 = (std::__shared_weak_count *)STACK[0x590];
      }
      if (v91)
      {
        v92 = (unint64_t *)&v91->__shared_owners_;
        do
          v93 = __ldaxr(v92);
        while (__stlxr(v93 - 1, v92));
        if (!v93)
        {
          ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
          std::__shared_weak_count::__release_weak(v91);
        }
      }
      if (v86)
      {
        v94 = (unint64_t *)&v86->__shared_owners_;
        do
          v95 = __ldaxr(v94);
        while (__stlxr(v95 - 1, v94));
        if (!v95)
        {
          ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
          std::__shared_weak_count::__release_weak(v86);
        }
      }
      v96 = (std::__shared_weak_count *)STACK[0x230];
      STACK[0x230] = 0;
      STACK[0x228] = 0;
      if (v96)
      {
        v97 = (unint64_t *)&v96->__shared_owners_;
        do
          v98 = __ldaxr(v97);
        while (__stlxr(v98 - 1, v97));
        if (!v98)
        {
          ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
          std::__shared_weak_count::__release_weak(v96);
        }
      }
    }
  }
  v99 = (std::__shared_weak_count *)STACK[0x230];
  if (STACK[0x230])
  {
    v100 = (unint64_t *)&v99->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
      _Unwind_Resume(a1);
    }
  }
  JUMPOUT(0x20FB8AB7CLL);
}

void sub_20FB8A514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (a33)
  {
    MEMORY[0x212BC6368](a33, 0x1000C8000313F17);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20FB8A524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t *a71;
  __int128 a72;
  unint64_t v72;
  _QWORD *v73;
  __int128 v74;
  int v75;
  unint64_t v76;
  int v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *p_shared_owners;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;

  if (LOBYTE(STACK[0x360]) && SLOBYTE(STACK[0x35F]) < 0)
    operator delete((void *)STACK[0x348]);
  if (STACK[0x340])
    os_release((void *)STACK[0x340]);
  if (a71)
  {
    v72 = STACK[0x228];
    if (STACK[0x228])
    {
      v73 = (_QWORD *)(*a71 + 16);
      if (*(char *)(*a71 + 39) < 0)
        v73 = (_QWORD *)*v73;
      v74 = a72;
      v75 = STACK[0x208];
      v76 = STACK[0x210];
      v77 = STACK[0x218];
      v78 = STACK[0x220];
      v79 = (std::__shared_weak_count *)STACK[0x230];
      if (STACK[0x230])
      {
        p_shared_owners = (unint64_t *)&v79->__shared_owners_;
        do
          v81 = __ldxr(p_shared_owners);
        while (__stxr(v81 + 1, p_shared_owners));
      }
      STACK[0x550] = (unint64_t)v73;
      *(_OWORD *)&STACK[0x558] = v74;
      LODWORD(STACK[0x568]) = v75;
      STACK[0x570] = v76;
      LODWORD(STACK[0x578]) = v77;
      STACK[0x580] = v78;
      STACK[0x588] = v72;
      STACK[0x590] = (unint64_t)v79;
      if (v79)
      {
        v82 = (unint64_t *)&v79->__shared_owners_;
        do
          v83 = __ldxr(v82);
        while (__stxr(v83 + 1, v82));
      }
      v84 = v79;
      if (v75 >= **(_DWORD **)(*a71 + 56))
      {
        sub_20E8C3FC4(*a71, (uint64_t)&STACK[0x550]);
        v84 = (std::__shared_weak_count *)STACK[0x590];
      }
      if (v84)
      {
        v85 = (unint64_t *)&v84->__shared_owners_;
        do
          v86 = __ldaxr(v85);
        while (__stlxr(v86 - 1, v85));
        if (!v86)
        {
          ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
          std::__shared_weak_count::__release_weak(v84);
        }
      }
      if (v79)
      {
        v87 = (unint64_t *)&v79->__shared_owners_;
        do
          v88 = __ldaxr(v87);
        while (__stlxr(v88 - 1, v87));
        if (!v88)
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
      }
      v89 = (std::__shared_weak_count *)STACK[0x230];
      STACK[0x230] = 0;
      STACK[0x228] = 0;
      if (v89)
      {
        v90 = (unint64_t *)&v89->__shared_owners_;
        do
          v91 = __ldaxr(v90);
        while (__stlxr(v91 - 1, v90));
        if (!v91)
        {
          ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
          std::__shared_weak_count::__release_weak(v89);
        }
      }
    }
  }
  if (STACK[0x230])
  {
    v92 = (unint64_t *)(STACK[0x230] + 8);
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    JUMPOUT(0x20FB8AA5CLL);
  }
  JUMPOUT(0x20FB8AB7CLL);
}

void sub_20FB8A6D4(_Unwind_Exception *a1, int a2)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  if (a2)
  {
    v4 = (std::__shared_weak_count *)STACK[0x590];
    if (STACK[0x590])
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    if (v2)
    {
      v7 = (unint64_t *)&v2->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        sub_20E860DA4(a1);
      }
    }
    sub_20E860DA4(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20FB8A73C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t *a71;
  __int128 a72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *p_shared_owners;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  _QWORD *v81;
  __int128 v82;
  int v83;
  unint64_t v84;
  int v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;

  v73 = STACK[0x340];
  STACK[0x340] = 0;
  if (v73)
  {
    v74 = *(std::__shared_weak_count **)(v73 + 32);
    if (v74)
    {
      p_shared_owners = (unint64_t *)&v74->__shared_owners_;
      do
        v76 = __ldaxr(p_shared_owners);
      while (__stlxr(v76 - 1, p_shared_owners));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
      }
    }
    v77 = *(std::__shared_weak_count **)(v73 + 16);
    if (v77)
    {
      v78 = (unint64_t *)&v77->__shared_owners_;
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
    }
    MEMORY[0x212BC6398](v73, 0x10F0C40B62ED6C6);
  }
  if (a71)
  {
    v80 = STACK[0x228];
    if (STACK[0x228])
    {
      v81 = (_QWORD *)(*a71 + 16);
      if (*(char *)(*a71 + 39) < 0)
        v81 = (_QWORD *)*v81;
      v82 = a72;
      v83 = STACK[0x208];
      v84 = STACK[0x210];
      v85 = STACK[0x218];
      v86 = STACK[0x220];
      v87 = (std::__shared_weak_count *)STACK[0x230];
      if (STACK[0x230])
      {
        v88 = (unint64_t *)&v87->__shared_owners_;
        do
          v89 = __ldxr(v88);
        while (__stxr(v89 + 1, v88));
      }
      STACK[0x550] = (unint64_t)v81;
      *(_OWORD *)&STACK[0x558] = v82;
      LODWORD(STACK[0x568]) = v83;
      STACK[0x570] = v84;
      LODWORD(STACK[0x578]) = v85;
      STACK[0x580] = v86;
      STACK[0x588] = v80;
      STACK[0x590] = (unint64_t)v87;
      if (v87)
      {
        v90 = (unint64_t *)&v87->__shared_owners_;
        do
          v91 = __ldxr(v90);
        while (__stxr(v91 + 1, v90));
      }
      v92 = v87;
      if (v83 >= **(_DWORD **)(*a71 + 56))
      {
        sub_20E8C3FC4(*a71, (uint64_t)&STACK[0x550]);
        v92 = (std::__shared_weak_count *)STACK[0x590];
      }
      if (v92)
      {
        v93 = (unint64_t *)&v92->__shared_owners_;
        do
          v94 = __ldaxr(v93);
        while (__stlxr(v94 - 1, v93));
        if (!v94)
        {
          ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
          std::__shared_weak_count::__release_weak(v92);
        }
      }
      if (v87)
      {
        v95 = (unint64_t *)&v87->__shared_owners_;
        do
          v96 = __ldaxr(v95);
        while (__stlxr(v96 - 1, v95));
        if (!v96)
        {
          ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
          std::__shared_weak_count::__release_weak(v87);
        }
      }
      v97 = (std::__shared_weak_count *)STACK[0x230];
      STACK[0x230] = 0;
      STACK[0x228] = 0;
      if (v97)
      {
        v98 = (unint64_t *)&v97->__shared_owners_;
        do
          v99 = __ldaxr(v98);
        while (__stlxr(v99 - 1, v98));
        if (!v99)
        {
          ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
          std::__shared_weak_count::__release_weak(v97);
        }
      }
    }
  }
  v100 = (std::__shared_weak_count *)STACK[0x230];
  if (STACK[0x230])
  {
    v101 = (unint64_t *)&v100->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
      _Unwind_Resume(a1);
    }
  }
  JUMPOUT(0x20FB8AB7CLL);
}

void sub_20FB8A7D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t *a71;
  __int128 a72;
  unint64_t *v72;
  unint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  __int128 v77;
  int v78;
  unint64_t v79;
  int v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *p_shared_owners;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;

  do
    v74 = __ldaxr(v72);
  while (__stlxr(v74 - 1, v72));
  if (!v74)
    JUMPOUT(0x20FB8A7F0);
  if (a71)
  {
    v75 = STACK[0x228];
    if (STACK[0x228])
    {
      v76 = (_QWORD *)(*a71 + 16);
      if (*(char *)(*a71 + 39) < 0)
        v76 = (_QWORD *)*v76;
      v77 = a72;
      v78 = STACK[0x208];
      v79 = STACK[0x210];
      v80 = STACK[0x218];
      v81 = STACK[0x220];
      v82 = (std::__shared_weak_count *)STACK[0x230];
      if (STACK[0x230])
      {
        p_shared_owners = (unint64_t *)&v82->__shared_owners_;
        do
          v84 = __ldxr(p_shared_owners);
        while (__stxr(v84 + 1, p_shared_owners));
      }
      STACK[0x550] = (unint64_t)v76;
      *(_OWORD *)&STACK[0x558] = v77;
      LODWORD(STACK[0x568]) = v78;
      STACK[0x570] = v79;
      LODWORD(STACK[0x578]) = v80;
      STACK[0x580] = v81;
      STACK[0x588] = v75;
      STACK[0x590] = (unint64_t)v82;
      if (v82)
      {
        v85 = (unint64_t *)&v82->__shared_owners_;
        do
          v86 = __ldxr(v85);
        while (__stxr(v86 + 1, v85));
      }
      v87 = v82;
      if (v78 >= **(_DWORD **)(*a71 + 56))
      {
        sub_20E8C3FC4(*a71, (uint64_t)&STACK[0x550]);
        v87 = (std::__shared_weak_count *)STACK[0x590];
      }
      if (v87)
      {
        v88 = (unint64_t *)&v87->__shared_owners_;
        do
          v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (!v89)
        {
          ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
          std::__shared_weak_count::__release_weak(v87);
        }
      }
      if (v82)
      {
        v90 = (unint64_t *)&v82->__shared_owners_;
        do
          v91 = __ldaxr(v90);
        while (__stlxr(v91 - 1, v90));
        if (!v91)
        {
          ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
          std::__shared_weak_count::__release_weak(v82);
        }
      }
      v92 = (std::__shared_weak_count *)STACK[0x230];
      STACK[0x230] = 0;
      STACK[0x228] = 0;
      if (v92)
      {
        v93 = (unint64_t *)&v92->__shared_owners_;
        do
          v94 = __ldaxr(v93);
        while (__stlxr(v94 - 1, v93));
        if (!v94)
        {
          ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
          std::__shared_weak_count::__release_weak(v92);
        }
      }
    }
  }
  v95 = (std::__shared_weak_count *)STACK[0x230];
  if (STACK[0x230])
  {
    v96 = (unint64_t *)&v95->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
      _Unwind_Resume(a1);
    }
  }
  JUMPOUT(0x20FB8AB7CLL);
}

void sub_20FB8A80C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t *a71;
  __int128 a72;
  uint64_t v72;
  unint64_t v74;
  _QWORD *v75;
  __int128 v76;
  int v77;
  unint64_t v78;
  int v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *p_shared_owners;
  unint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;

  MEMORY[0x212BC6398](v72, 0x10D0C40B950D02ALL);
  if (a71)
  {
    v74 = STACK[0x228];
    if (STACK[0x228])
    {
      v75 = (_QWORD *)(*a71 + 16);
      if (*(char *)(*a71 + 39) < 0)
        v75 = (_QWORD *)*v75;
      v76 = a72;
      v77 = STACK[0x208];
      v78 = STACK[0x210];
      v79 = STACK[0x218];
      v80 = STACK[0x220];
      v81 = (std::__shared_weak_count *)STACK[0x230];
      if (STACK[0x230])
      {
        p_shared_owners = (unint64_t *)&v81->__shared_owners_;
        do
          v83 = __ldxr(p_shared_owners);
        while (__stxr(v83 + 1, p_shared_owners));
      }
      STACK[0x550] = (unint64_t)v75;
      *(_OWORD *)&STACK[0x558] = v76;
      LODWORD(STACK[0x568]) = v77;
      STACK[0x570] = v78;
      LODWORD(STACK[0x578]) = v79;
      STACK[0x580] = v80;
      STACK[0x588] = v74;
      STACK[0x590] = (unint64_t)v81;
      if (v81)
      {
        v84 = (unint64_t *)&v81->__shared_owners_;
        do
          v85 = __ldxr(v84);
        while (__stxr(v85 + 1, v84));
      }
      v86 = v81;
      if (v77 >= **(_DWORD **)(*a71 + 56))
      {
        sub_20E8C3FC4(*a71, (uint64_t)&STACK[0x550]);
        v86 = (std::__shared_weak_count *)STACK[0x590];
      }
      if (v86)
      {
        v87 = (unint64_t *)&v86->__shared_owners_;
        do
          v88 = __ldaxr(v87);
        while (__stlxr(v88 - 1, v87));
        if (!v88)
        {
          ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
          std::__shared_weak_count::__release_weak(v86);
        }
      }
      if (v81)
      {
        v89 = (unint64_t *)&v81->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
        }
      }
      v91 = (std::__shared_weak_count *)STACK[0x230];
      STACK[0x230] = 0;
      STACK[0x228] = 0;
      if (v91)
      {
        v92 = (unint64_t *)&v91->__shared_owners_;
        do
          v93 = __ldaxr(v92);
        while (__stlxr(v93 - 1, v92));
        if (!v93)
        {
          ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
          std::__shared_weak_count::__release_weak(v91);
        }
      }
    }
  }
  v94 = (std::__shared_weak_count *)STACK[0x230];
  if (STACK[0x230])
  {
    v95 = (unint64_t *)&v94->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
      _Unwind_Resume(a1);
    }
  }
  JUMPOUT(0x20FB8AB7CLL);
}

void sub_20FB8A82C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t *a71;
  __int128 a72;
  unint64_t v73;
  _QWORD *v74;
  __int128 v75;
  int v76;
  unint64_t v77;
  int v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *p_shared_owners;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;

  if (a71)
  {
    v73 = STACK[0x228];
    if (STACK[0x228])
    {
      v74 = (_QWORD *)(*a71 + 16);
      if (*(char *)(*a71 + 39) < 0)
        v74 = (_QWORD *)*v74;
      v75 = a72;
      v76 = STACK[0x208];
      v77 = STACK[0x210];
      v78 = STACK[0x218];
      v79 = STACK[0x220];
      v80 = (std::__shared_weak_count *)STACK[0x230];
      if (STACK[0x230])
      {
        p_shared_owners = (unint64_t *)&v80->__shared_owners_;
        do
          v82 = __ldxr(p_shared_owners);
        while (__stxr(v82 + 1, p_shared_owners));
      }
      STACK[0x550] = (unint64_t)v74;
      *(_OWORD *)&STACK[0x558] = v75;
      LODWORD(STACK[0x568]) = v76;
      STACK[0x570] = v77;
      LODWORD(STACK[0x578]) = v78;
      STACK[0x580] = v79;
      STACK[0x588] = v73;
      STACK[0x590] = (unint64_t)v80;
      if (v80)
      {
        v83 = (unint64_t *)&v80->__shared_owners_;
        do
          v84 = __ldxr(v83);
        while (__stxr(v84 + 1, v83));
      }
      v85 = v80;
      if (v76 >= **(_DWORD **)(*a71 + 56))
      {
        sub_20E8C3FC4(*a71, (uint64_t)&STACK[0x550]);
        v85 = (std::__shared_weak_count *)STACK[0x590];
      }
      if (v85)
      {
        v86 = (unint64_t *)&v85->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
        }
      }
      if (v80)
      {
        v88 = (unint64_t *)&v80->__shared_owners_;
        do
          v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (!v89)
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
      }
      v90 = (std::__shared_weak_count *)STACK[0x230];
      STACK[0x230] = 0;
      STACK[0x228] = 0;
      if (v90)
      {
        v91 = (unint64_t *)&v90->__shared_owners_;
        do
          v92 = __ldaxr(v91);
        while (__stlxr(v92 - 1, v91));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v90);
        }
      }
    }
  }
  v93 = (std::__shared_weak_count *)STACK[0x230];
  if (STACK[0x230])
  {
    v94 = (unint64_t *)&v93->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
      _Unwind_Resume(a1);
    }
  }
  JUMPOUT(0x20FB8AB7CLL);
}

void sub_20FB8A83C(_Unwind_Exception *a1)
{
  if (STACK[0x340])
    MEMORY[0x212BC6368](STACK[0x340], 0x1000C8000313F17);
  if (STACK[0x550])
    JUMPOUT(0x20FB8A86CLL);
  _Unwind_Resume(a1);
}

void sub_20FB8A8A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t *a71;
  __int128 a72;
  unint64_t v73;
  _QWORD *v74;
  __int128 v75;
  int v76;
  unint64_t v77;
  int v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *p_shared_owners;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;

  if (a71)
  {
    v73 = STACK[0x228];
    if (STACK[0x228])
    {
      v74 = (_QWORD *)(*a71 + 16);
      if (*(char *)(*a71 + 39) < 0)
        v74 = (_QWORD *)*v74;
      v75 = a72;
      v76 = STACK[0x208];
      v77 = STACK[0x210];
      v78 = STACK[0x218];
      v79 = STACK[0x220];
      v80 = (std::__shared_weak_count *)STACK[0x230];
      if (STACK[0x230])
      {
        p_shared_owners = (unint64_t *)&v80->__shared_owners_;
        do
          v82 = __ldxr(p_shared_owners);
        while (__stxr(v82 + 1, p_shared_owners));
      }
      STACK[0x550] = (unint64_t)v74;
      *(_OWORD *)&STACK[0x558] = v75;
      LODWORD(STACK[0x568]) = v76;
      STACK[0x570] = v77;
      LODWORD(STACK[0x578]) = v78;
      STACK[0x580] = v79;
      STACK[0x588] = v73;
      STACK[0x590] = (unint64_t)v80;
      if (v80)
      {
        v83 = (unint64_t *)&v80->__shared_owners_;
        do
          v84 = __ldxr(v83);
        while (__stxr(v84 + 1, v83));
      }
      v85 = v80;
      if (v76 >= **(_DWORD **)(*a71 + 56))
      {
        sub_20E8C3FC4(*a71, (uint64_t)&STACK[0x550]);
        v85 = (std::__shared_weak_count *)STACK[0x590];
      }
      if (v85)
      {
        v86 = (unint64_t *)&v85->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
        }
      }
      if (v80)
      {
        v88 = (unint64_t *)&v80->__shared_owners_;
        do
          v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (!v89)
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
      }
      v90 = (std::__shared_weak_count *)STACK[0x230];
      STACK[0x230] = 0;
      STACK[0x228] = 0;
      if (v90)
      {
        v91 = (unint64_t *)&v90->__shared_owners_;
        do
          v92 = __ldaxr(v91);
        while (__stlxr(v92 - 1, v91));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v90);
        }
      }
    }
  }
  v93 = (std::__shared_weak_count *)STACK[0x230];
  if (STACK[0x230])
  {
    v94 = (unint64_t *)&v93->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
      _Unwind_Resume(a1);
    }
  }
  JUMPOUT(0x20FB8AB7CLL);
}

void sub_20FB8A8B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t *a71;
  __int128 a72;
  unint64_t v73;
  _QWORD *v74;
  __int128 v75;
  int v76;
  unint64_t v77;
  int v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *p_shared_owners;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;

  if (LOBYTE(STACK[0x360]) && SLOBYTE(STACK[0x35F]) < 0)
    operator delete((void *)STACK[0x348]);
  if (STACK[0x340])
    os_release((void *)STACK[0x340]);
  if (a71)
  {
    v73 = STACK[0x228];
    if (STACK[0x228])
    {
      v74 = (_QWORD *)(*a71 + 16);
      if (*(char *)(*a71 + 39) < 0)
        v74 = (_QWORD *)*v74;
      v75 = a72;
      v76 = STACK[0x208];
      v77 = STACK[0x210];
      v78 = STACK[0x218];
      v79 = STACK[0x220];
      v80 = (std::__shared_weak_count *)STACK[0x230];
      if (STACK[0x230])
      {
        p_shared_owners = (unint64_t *)&v80->__shared_owners_;
        do
          v82 = __ldxr(p_shared_owners);
        while (__stxr(v82 + 1, p_shared_owners));
      }
      STACK[0x550] = (unint64_t)v74;
      *(_OWORD *)&STACK[0x558] = v75;
      LODWORD(STACK[0x568]) = v76;
      STACK[0x570] = v77;
      LODWORD(STACK[0x578]) = v78;
      STACK[0x580] = v79;
      STACK[0x588] = v73;
      STACK[0x590] = (unint64_t)v80;
      if (v80)
      {
        v83 = (unint64_t *)&v80->__shared_owners_;
        do
          v84 = __ldxr(v83);
        while (__stxr(v84 + 1, v83));
      }
      v85 = v80;
      if (v76 >= **(_DWORD **)(*a71 + 56))
      {
        sub_20E8C3FC4(*a71, (uint64_t)&STACK[0x550]);
        v85 = (std::__shared_weak_count *)STACK[0x590];
      }
      if (v85)
      {
        v86 = (unint64_t *)&v85->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
        }
      }
      if (v80)
      {
        v88 = (unint64_t *)&v80->__shared_owners_;
        do
          v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (!v89)
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
      }
      v90 = (std::__shared_weak_count *)STACK[0x230];
      STACK[0x230] = 0;
      STACK[0x228] = 0;
      if (v90)
      {
        v91 = (unint64_t *)&v90->__shared_owners_;
        do
          v92 = __ldaxr(v91);
        while (__stlxr(v92 - 1, v91));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v90);
        }
      }
    }
  }
  v93 = (std::__shared_weak_count *)STACK[0x230];
  if (STACK[0x230])
  {
    v94 = (unint64_t *)&v93->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
      _Unwind_Resume(a1);
    }
  }
  JUMPOUT(0x20FB8AB7CLL);
}

void sub_20FB8AA80(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  if (a2)
  {
    v4 = (std::__shared_weak_count *)STACK[0x590];
    if (STACK[0x590])
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    if (v2)
    {
      v7 = (unint64_t *)(v2 + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      JUMPOUT(0x20FB8AAD8);
    }
    sub_20E860DA4(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20FB8AAFC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x20FB8AB04);
  _Unwind_Resume(a1);
}

void sub_20FB8AB14(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;

  v4 = (std::__shared_weak_count *)STACK[0x5C8];
  if (STACK[0x5C8])
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  do
    v7 = __ldaxr(v2);
  while (__stlxr(v7 - 1, v2));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20FB8AB84(int64x2_t *a1, __int128 *a2, __int128 *a3, __int128 *a4, std::__shared_weak_count *a5, __int128 *a6)
{
  std::__shared_weak_count *v6;
  unsigned int *v7;
  unint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int *v28;
  _DWORD *v29;
  unsigned int v30;
  uint64_t v31;
  __int128 v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t *v39;
  unint64_t *v40;
  __int128 v41;
  __int128 v42;
  unint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  unint64_t v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t *v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  unint64_t v76;
  __int128 v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  unint64_t v121;
  unint64_t *v122;
  __int128 v123;
  __int128 v124;
  unint64_t v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  unint64_t v131;
  unint64_t *v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t *v145;
  unint64_t v146;
  unint64_t *v147;
  unint64_t v148;
  uint64_t v150;
  unint64_t *v151;
  int64_t v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  uint64_t v158;
  __int128 v159;
  uint64_t v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  uint64_t v174;
  __int128 v175;
  uint64_t v176;
  __int128 v177;
  uint64_t v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  unint64_t v185;
  char v186;
  __int128 v187;
  char v188;
  unint64_t v189;
  char v190;
  __int128 v191;
  uint64_t v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  uint64_t v204;
  uint64_t v205;

  v6 = a5;
  v7 = (unsigned int *)a3;
  v205 = *MEMORY[0x24BDAC8D0];
  v9 = *(_QWORD *)a2;
  v10 = (unint64_t *)a1[69].i64[1];
  v11 = (unint64_t *)a1[70].i64[0];
  if (v10 == v11)
  {
    v11 = (unint64_t *)a1[69].i64[1];
  }
  else if (*(v11 - 35) >= v9)
  {
    v12 = 0xAF8AF8AF8AF8AF8BLL * (v11 - v10);
    do
    {
      v13 = v12 >> 1;
      v14 = &v10[35 * (v12 >> 1)];
      v15 = *v14;
      v16 = v14 + 35;
      v12 += ~(v12 >> 1);
      if (v15 < v9)
        v10 = v16;
      else
        v12 = v13;
    }
    while (v12);
    if (v10 != v11)
    {
      v11 = v10;
      if (*v10 == v9)
        return 0;
    }
  }
  if (a5)
  {
    p_shared_owners = (unint64_t *)&a5->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  v155 = a2[2];
  v156 = a2[3];
  v157 = a2[4];
  v158 = *((_QWORD *)a2 + 10);
  v153 = *a2;
  v154 = a2[1];
  v159 = *(__int128 *)((char *)a2 + 88);
  v160 = *((_QWORD *)a2 + 13);
  v161 = a2[7];
  *((_QWORD *)a2 + 14) = 0;
  *((_QWORD *)a2 + 15) = 0;
  *(_QWORD *)&v168 = a4;
  *((_QWORD *)&v168 + 1) = a5;
  if (a5)
  {
    v20 = (unint64_t *)&a5->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))a5->__on_zero_shared)(a5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v23 = *v7;
  v24 = a1[12].i64[1];
  v25 = a1[13].i64[0];
  if (v25 != v24)
  {
    v26 = (v25 - v24) >> 4;
    do
    {
      v27 = v26 >> 1;
      v28 = (unsigned int *)(v24 + 16 * (v26 >> 1));
      v30 = *v28;
      v29 = v28 + 4;
      v26 += ~(v26 >> 1);
      if (v30 < v23)
        v24 = (uint64_t)v29;
      else
        v26 = v27;
    }
    while (v26);
  }
  if (v24 == v25 || *(_DWORD *)v24 != v23)
  {
    v17 = 0;
  }
  else
  {
    v31 = *(_QWORD *)(v24 + 8);
    ++*(_DWORD *)(v31 + 8);
    if (*(_BYTE *)(v31 + 20))
    {
      v169 = v153;
      v171 = v155;
      v172 = v156;
      v173 = v157;
      v174 = v158;
      v170 = v154;
      v175 = v159;
      v32 = v161;
      v176 = v160;
      v177 = v161;
      v161 = 0uLL;
      v178 = v31;
      v179 = v162;
      v180 = v163;
      v181 = v164;
      v182 = v165;
      v183 = v166;
      v184 = v167;
      v186 = 0;
      v185 = 0xBFF0000000000000;
      v33 = (std::__shared_weak_count *)*((_QWORD *)&v168 + 1);
      v187 = v168;
      *((_QWORD *)&v168 + 1) = 0;
      v188 = 0;
      v34 = (unint64_t *)a1[70].i64[0];
      if (v34 != v11 && *v11 == v9)
        goto LABEL_109;
      a6 = &v169;
      a5 = (std::__shared_weak_count *)&v175;
      a3 = &v177;
      a4 = &v179;
      a2 = &v187;
      v35 = a1[69].i64[1];
      v36 = (uint64_t)v11 - v35;
      v152 = 0xAF8AF8AF8AF8AF8BLL * (((uint64_t)v11 - v35) >> 3);
      v37 = a1[70].u64[1];
      if ((unint64_t)v34 < v37)
      {
        if (v11 == v34)
        {
          *v34 = v9;
          v85 = v35 + 8 * (((uint64_t)v11 - v35) >> 3);
          *(_OWORD *)(v85 + 8) = v169;
          v87 = v172;
          v86 = v173;
          v88 = v174;
          *(_OWORD *)(v85 + 40) = v171;
          *(_QWORD *)(v85 + 88) = v88;
          *(_OWORD *)(v85 + 72) = v86;
          *(_OWORD *)(v85 + 56) = v87;
          *(_OWORD *)(v85 + 24) = v170;
          v89 = v176;
          *(_OWORD *)(v85 + 96) = v175;
          *(_QWORD *)(v85 + 112) = v89;
          *(_OWORD *)(v85 + 120) = v32;
          v177 = 0uLL;
          *(_QWORD *)(v85 + 136) = v31;
          v90 = v179;
          v91 = v181;
          *(_OWORD *)(v85 + 160) = v180;
          *(_OWORD *)(v85 + 176) = v91;
          *(_OWORD *)(v85 + 144) = v90;
          v92 = v182;
          v93 = v184;
          *(_OWORD *)(v85 + 208) = v183;
          *(_OWORD *)(v85 + 224) = v93;
          *(_OWORD *)(v85 + 192) = v92;
          v94 = v185;
          *(_BYTE *)(v85 + 248) = v186;
          *(_QWORD *)(v85 + 240) = v94;
          *(_QWORD *)(v85 + 256) = v168;
          *(_QWORD *)(v85 + 264) = v33;
          v187 = 0uLL;
          *(_BYTE *)(v85 + 272) = 0;
          a1[70].i64[0] = (uint64_t)(v34 + 35);
        }
        else
        {
          v202 = v156;
          v203 = v157;
          v204 = v158;
          v200 = v154;
          v201 = v155;
          v192 = v160;
          v191 = v159;
          v177 = 0uLL;
          v198 = v163;
          v199 = v164;
          v197 = v162;
          v195 = v166;
          v196 = v167;
          v193 = v153;
          v194 = v165;
          v190 = 0;
          v189 = 0xBFF0000000000000;
          v38 = v34 - 35;
          v39 = v34;
          v187 = 0uLL;
          if ((unint64_t)v34 >= 0x118)
          {
            v40 = v34 - 35;
            v39 = v34;
            do
            {
              *v39 = *v40;
              *(_OWORD *)(v39 + 1) = *(_OWORD *)(v40 + 1);
              v41 = *(_OWORD *)(v40 + 7);
              v42 = *(_OWORD *)(v40 + 9);
              v43 = v40[11];
              *(_OWORD *)(v39 + 5) = *(_OWORD *)(v40 + 5);
              v39[11] = v43;
              *(_OWORD *)(v39 + 9) = v42;
              *(_OWORD *)(v39 + 7) = v41;
              *(_OWORD *)(v39 + 3) = *(_OWORD *)(v40 + 3);
              v44 = *((_OWORD *)v40 + 6);
              v39[14] = v40[14];
              *((_OWORD *)v39 + 6) = v44;
              *(_OWORD *)(v39 + 15) = *(_OWORD *)(v40 + 15);
              v40[15] = 0;
              v40[16] = 0;
              v39[17] = v40[17];
              v45 = *((_OWORD *)v40 + 9);
              v46 = *((_OWORD *)v40 + 11);
              *((_OWORD *)v39 + 10) = *((_OWORD *)v40 + 10);
              *((_OWORD *)v39 + 11) = v46;
              *((_OWORD *)v39 + 9) = v45;
              v47 = *((_OWORD *)v40 + 12);
              v48 = *((_OWORD *)v40 + 14);
              *((_OWORD *)v39 + 13) = *((_OWORD *)v40 + 13);
              *((_OWORD *)v39 + 14) = v48;
              *((_OWORD *)v39 + 12) = v47;
              v49 = v40[30];
              *((_BYTE *)v39 + 248) = *((_BYTE *)v40 + 248);
              v39[30] = v49;
              *((_OWORD *)v39 + 16) = *((_OWORD *)v40 + 16);
              v40[32] = 0;
              v40[33] = 0;
              *((_BYTE *)v39 + 272) = *((_BYTE *)v40 + 272);
              v39 += 35;
              v40 += 35;
            }
            while (v40 < v34);
          }
          v150 = v35;
          a1[70].i64[0] = (uint64_t)v39;
          if (v34 != v11 + 35)
          {
            do
            {
              v62 = v38 - 35;
              v63 = v34 - 35;
              *v63 = *(v38 - 35);
              *(_OWORD *)(v63 + 1) = *((_OWORD *)v38 - 17);
              v65 = *((_OWORD *)v38 - 14);
              v64 = *((_OWORD *)v38 - 13);
              v66 = *((_OWORD *)v38 - 15);
              *(v34 - 24) = *(v38 - 24);
              *((_OWORD *)v34 - 14) = v65;
              *((_OWORD *)v34 - 13) = v64;
              *((_OWORD *)v34 - 15) = v66;
              *((_OWORD *)v34 - 16) = *((_OWORD *)v38 - 16);
              v67 = *(_OWORD *)(v38 - 23);
              *(v34 - 21) = *(v38 - 21);
              *(_OWORD *)(v34 - 23) = v67;
              v68 = *((_OWORD *)v38 - 10);
              *(v38 - 20) = 0;
              *(v38 - 19) = 0;
              v69 = (std::__shared_weak_count *)*(v34 - 19);
              *((_OWORD *)v34 - 10) = v68;
              if (v69)
              {
                v70 = (unint64_t *)&v69->__shared_owners_;
                do
                  v71 = __ldaxr(v70);
                while (__stlxr(v71 - 1, v70));
                if (!v71)
                {
                  ((void (*)(std::__shared_weak_count *, __int128 *, __int128 *, __int128 *, std::__shared_weak_count *, __int128 *))v69->__on_zero_shared)(v69, a2, a3, a4, a5, a6);
                  std::__shared_weak_count::__release_weak(v69);
                }
              }
              *(v34 - 18) = *(v38 - 18);
              v72 = *(_OWORD *)(v38 - 17);
              v73 = *(_OWORD *)(v38 - 15);
              *(_OWORD *)(v34 - 13) = *(_OWORD *)(v38 - 13);
              *(_OWORD *)(v34 - 15) = v73;
              *(_OWORD *)(v34 - 17) = v72;
              v74 = *(_OWORD *)(v38 - 11);
              v75 = *(_OWORD *)(v38 - 9);
              *(_OWORD *)(v34 - 7) = *(_OWORD *)(v38 - 7);
              *(_OWORD *)(v34 - 9) = v75;
              *(_OWORD *)(v34 - 11) = v74;
              v76 = *(v38 - 5);
              *((_BYTE *)v34 - 32) = *((_BYTE *)v38 - 32);
              *(v34 - 5) = v76;
              v77 = *(_OWORD *)(v38 - 3);
              *(v38 - 3) = 0;
              *(v38 - 2) = 0;
              v78 = (std::__shared_weak_count *)*(v34 - 2);
              *(_OWORD *)(v34 - 3) = v77;
              if (v78)
              {
                v79 = (unint64_t *)&v78->__shared_owners_;
                do
                  v80 = __ldaxr(v79);
                while (__stlxr(v80 - 1, v79));
                if (!v80)
                {
                  ((void (*)(std::__shared_weak_count *, __int128 *, __int128 *, __int128 *, std::__shared_weak_count *, __int128 *))v78->__on_zero_shared)(v78, a2, a3, a4, a5, a6);
                  std::__shared_weak_count::__release_weak(v78);
                }
              }
              *((_BYTE *)v34 - 8) = *((_BYTE *)v38 - 8);
              v34 -= 35;
              v38 -= 35;
            }
            while (v62 != v11);
          }
          *v11 = v9;
          v50 = v150 + 280 * v152;
          *(_OWORD *)(v50 + 8) = v193;
          *(_OWORD *)(v50 + 40) = v201;
          *(_OWORD *)(v50 + 56) = v202;
          *(_OWORD *)(v50 + 72) = v203;
          *(_QWORD *)(v50 + 88) = v204;
          *(_OWORD *)(v50 + 24) = v200;
          *(_OWORD *)(v50 + 96) = v191;
          *(_QWORD *)(v50 + 112) = v192;
          *(_QWORD *)(v50 + 120) = v32;
          v51 = *(std::__shared_weak_count **)(v50 + 128);
          *(_QWORD *)(v50 + 128) = *((_QWORD *)&v32 + 1);
          if (v51)
          {
            v52 = (unint64_t *)&v51->__shared_owners_;
            do
              v53 = __ldaxr(v52);
            while (__stlxr(v53 - 1, v52));
            if (!v53)
            {
              ((void (*)(std::__shared_weak_count *, __int128 *, __int128 *, __int128 *, std::__shared_weak_count *, __int128 *))v51->__on_zero_shared)(v51, a2, a3, a4, a5, a6);
              std::__shared_weak_count::__release_weak(v51);
            }
          }
          v54 = v150 + 280 * v152;
          *(_QWORD *)(v54 + 136) = v31;
          v55 = v198;
          *(_OWORD *)(v54 + 144) = v197;
          *(_OWORD *)(v54 + 160) = v55;
          v56 = v194;
          v57 = v195;
          *(_OWORD *)(v54 + 176) = v199;
          *(_OWORD *)(v54 + 192) = v56;
          v58 = v196;
          *(_OWORD *)(v54 + 208) = v57;
          *(_OWORD *)(v54 + 224) = v58;
          *(_QWORD *)(v54 + 240) = v189;
          *(_BYTE *)(v54 + 248) = v190;
          v59 = *(std::__shared_weak_count **)(v54 + 264);
          *(_QWORD *)(v54 + 256) = v168;
          *(_QWORD *)(v54 + 264) = v33;
          if (v59)
          {
            v60 = (unint64_t *)&v59->__shared_owners_;
            do
              v61 = __ldaxr(v60);
            while (__stlxr(v61 - 1, v60));
            if (!v61)
            {
              ((void (*)(std::__shared_weak_count *, __int128 *, __int128 *, __int128 *, std::__shared_weak_count *, __int128 *))v59->__on_zero_shared)(v59, a2, a3, a4, a5, a6);
              std::__shared_weak_count::__release_weak(v59);
            }
          }
          *(_BYTE *)(v150 + 280 * v152 + 272) = 0;
        }
LABEL_108:
        v33 = (std::__shared_weak_count *)*((_QWORD *)&v187 + 1);
LABEL_109:
        if (v33)
        {
          v140 = (unint64_t *)&v33->__shared_owners_;
          do
            v141 = __ldaxr(v140);
          while (__stlxr(v141 - 1, v140));
          if (!v141)
          {
            ((void (*)(std::__shared_weak_count *, __int128 *, __int128 *, __int128 *, std::__shared_weak_count *, __int128 *))v33->__on_zero_shared)(v33, a2, a3, a4, a5, a6);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        v142 = (std::__shared_weak_count *)*((_QWORD *)&v177 + 1);
        if (*((_QWORD *)&v177 + 1))
        {
          v143 = (unint64_t *)(*((_QWORD *)&v177 + 1) + 8);
          do
            v144 = __ldaxr(v143);
          while (__stlxr(v144 - 1, v143));
          if (!v144)
          {
            ((void (*)(std::__shared_weak_count *, __int128 *, __int128 *, __int128 *, std::__shared_weak_count *, __int128 *))v142->__on_zero_shared)(v142, a2, a3, a4, a5, a6);
            std::__shared_weak_count::__release_weak(v142);
          }
        }
        a1[101].i8[2] = 0;
        a1[101].i8[0] = 0;
        a1[100] = vaddq_s64(a1[100], (int64x2_t)xmmword_2103B2300);
        v17 = 1;
        goto LABEL_120;
      }
      v81 = 0xAF8AF8AF8AF8AF8BLL * (((uint64_t)v34 - v35) >> 3) + 1;
      if (v81 > 0xEA0EA0EA0EA0EALL)
        sub_20E867F44();
      v82 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(v37 - v35) >> 3);
      if (2 * v82 > v81)
        v81 = 2 * v82;
      if (v82 >= 0x75075075075075)
        v83 = 0xEA0EA0EA0EA0EALL;
      else
        v83 = v81;
      *(_QWORD *)&v202 = (char *)a1 + 1128;
      v151 = (unint64_t *)v35;
      if (v83)
      {
        if (v83 > 0xEA0EA0EA0EA0EALL)
          sub_20E877A38();
        v84 = (char *)operator new(280 * v83);
      }
      else
      {
        v84 = 0;
      }
      v95 = (uint64_t)&v84[280 * v152];
      *(_QWORD *)&v200 = v84;
      *((_QWORD *)&v200 + 1) = v95;
      *(_QWORD *)&v201 = v95;
      *((_QWORD *)&v201 + 1) = &v84[280 * v83];
      if (v152 == v83)
      {
        if (v36 >= 1)
        {
          v96 = v152 + 2;
          if (v152 >= -1)
            v96 = v152 + 1;
          v97 = v96 >> 1;
          v98 = sub_20F5B6660(v95, v95, v95 - 280 * (v96 >> 1));
          v95 = *((_QWORD *)&v200 + 1) - 280 * v97;
          *((_QWORD *)&v200 + 1) = v95;
          goto LABEL_85;
        }
        if (v151 == v11)
          v99 = 1;
        else
          v99 = 2 * v152;
        if (v99 > 0xEA0EA0EA0EA0EALL)
          sub_20E877A38();
        v100 = (char *)operator new(280 * v99);
        v95 = (uint64_t)&v100[280 * (v99 >> 2)];
        *(_QWORD *)&v200 = v100;
        *((_QWORD *)&v200 + 1) = v95;
        *((_QWORD *)&v201 + 1) = &v100[280 * v99];
        if (v84)
          operator delete(v84);
      }
      v98 = v95;
LABEL_85:
      *(_QWORD *)v98 = v9;
      *(_OWORD *)(v98 + 8) = v169;
      v101 = v170;
      *(_OWORD *)(v98 + 40) = v171;
      v102 = v173;
      *(_OWORD *)(v98 + 56) = v172;
      *(_OWORD *)(v98 + 72) = v102;
      *(_QWORD *)(v98 + 88) = v174;
      *(_OWORD *)(v98 + 24) = v101;
      *(_QWORD *)(v98 + 112) = v176;
      *(_OWORD *)(v98 + 96) = v175;
      *(_OWORD *)(v98 + 120) = v177;
      v177 = 0uLL;
      *(_QWORD *)(v98 + 136) = v178;
      v103 = v179;
      v104 = v181;
      *(_OWORD *)(v98 + 160) = v180;
      *(_OWORD *)(v98 + 176) = v104;
      *(_OWORD *)(v98 + 144) = v103;
      v105 = v182;
      v106 = v184;
      *(_OWORD *)(v98 + 208) = v183;
      *(_OWORD *)(v98 + 224) = v106;
      *(_OWORD *)(v98 + 192) = v105;
      v107 = v185;
      *(_BYTE *)(v98 + 248) = v186;
      *(_QWORD *)(v98 + 240) = v107;
      *(_OWORD *)(v98 + 256) = v187;
      v187 = 0uLL;
      *(_BYTE *)(v98 + 272) = v188;
      v108 = v98 + 280;
      *(_QWORD *)&v201 = v98 + 280;
      v109 = (unint64_t *)a1[69].i64[1];
      if (v109 != v11)
      {
        v110 = 0;
        do
        {
          v111 = v95 + v110 * 8;
          v112 = (char *)&v11[v110];
          *(_QWORD *)(v95 + v110 * 8 - 280) = v11[v110 - 35];
          *(_OWORD *)(v95 + v110 * 8 - 272) = *(_OWORD *)&v11[v110 - 34];
          v114 = *(_OWORD *)&v11[v110 - 28];
          v113 = *(_OWORD *)&v11[v110 - 26];
          v115 = *(_OWORD *)&v11[v110 - 30];
          *(_QWORD *)(v111 - 192) = v11[v110 - 24];
          *(_OWORD *)(v111 - 224) = v114;
          *(_OWORD *)(v111 - 208) = v113;
          *(_OWORD *)(v111 - 240) = v115;
          *(_OWORD *)(v111 - 256) = *(_OWORD *)&v11[v110 - 32];
          v116 = *(_OWORD *)&v11[v110 - 23];
          *(_QWORD *)(v111 - 168) = v11[v110 - 21];
          *(_OWORD *)(v111 - 184) = v116;
          *(_OWORD *)(v111 - 160) = *(_OWORD *)&v11[v110 - 20];
          *((_QWORD *)v112 - 20) = 0;
          *((_QWORD *)v112 - 19) = 0;
          *(_QWORD *)(v111 - 144) = v11[v110 - 18];
          v117 = *(_OWORD *)&v11[v110 - 17];
          v118 = *(_OWORD *)&v11[v110 - 15];
          *(_OWORD *)(v111 - 104) = *(_OWORD *)&v11[v110 - 13];
          *(_OWORD *)(v111 - 120) = v118;
          *(_OWORD *)(v111 - 136) = v117;
          v119 = *(_OWORD *)&v11[v110 - 11];
          v120 = *(_OWORD *)&v11[v110 - 9];
          *(_OWORD *)(v111 - 56) = *(_OWORD *)&v11[v110 - 7];
          *(_OWORD *)(v111 - 72) = v120;
          *(_OWORD *)(v111 - 88) = v119;
          v121 = v11[v110 - 5];
          *(_BYTE *)(v111 - 32) = v11[v110 - 4];
          *(_QWORD *)(v111 - 40) = v121;
          *(_OWORD *)(v111 - 24) = *(_OWORD *)&v11[v110 - 3];
          *((_QWORD *)v112 - 3) = 0;
          *((_QWORD *)v112 - 2) = 0;
          *(_BYTE *)(v111 - 8) = v11[v110 - 1];
          v110 -= 35;
        }
        while (&v11[v110] != v109);
        v108 = v201;
        v95 += v110 * 8;
      }
      *((_QWORD *)&v200 + 1) = v95;
      v122 = (unint64_t *)a1[70].i64[0];
      if (v122 != v11)
      {
        do
        {
          *(_QWORD *)v108 = *v11;
          *(_OWORD *)(v108 + 8) = *(_OWORD *)(v11 + 1);
          v123 = *(_OWORD *)(v11 + 7);
          v124 = *(_OWORD *)(v11 + 9);
          v125 = v11[11];
          *(_OWORD *)(v108 + 40) = *(_OWORD *)(v11 + 5);
          *(_QWORD *)(v108 + 88) = v125;
          *(_OWORD *)(v108 + 72) = v124;
          *(_OWORD *)(v108 + 56) = v123;
          *(_OWORD *)(v108 + 24) = *(_OWORD *)(v11 + 3);
          v126 = *((_OWORD *)v11 + 6);
          *(_QWORD *)(v108 + 112) = v11[14];
          *(_OWORD *)(v108 + 96) = v126;
          *(_OWORD *)(v108 + 120) = *(_OWORD *)(v11 + 15);
          v11[15] = 0;
          v11[16] = 0;
          *(_QWORD *)(v108 + 136) = v11[17];
          v127 = *((_OWORD *)v11 + 9);
          v128 = *((_OWORD *)v11 + 11);
          *(_OWORD *)(v108 + 160) = *((_OWORD *)v11 + 10);
          *(_OWORD *)(v108 + 176) = v128;
          *(_OWORD *)(v108 + 144) = v127;
          v129 = *((_OWORD *)v11 + 12);
          v130 = *((_OWORD *)v11 + 14);
          *(_OWORD *)(v108 + 208) = *((_OWORD *)v11 + 13);
          *(_OWORD *)(v108 + 224) = v130;
          *(_OWORD *)(v108 + 192) = v129;
          v131 = v11[30];
          *(_BYTE *)(v108 + 248) = *((_BYTE *)v11 + 248);
          *(_QWORD *)(v108 + 240) = v131;
          *(_OWORD *)(v108 + 256) = *((_OWORD *)v11 + 16);
          v11[32] = 0;
          v11[33] = 0;
          *(_BYTE *)(v108 + 272) = *((_BYTE *)v11 + 272);
          v108 += 280;
          v11 += 35;
        }
        while (v11 != v122);
        v95 = *((_QWORD *)&v200 + 1);
        v11 = (unint64_t *)a1[70].i64[0];
      }
      v132 = (unint64_t *)a1[69].i64[1];
      a1[69].i64[1] = v95;
      a1[70].i64[0] = v108;
      v133 = a1[70].i64[1];
      a1[70].i64[1] = *((_QWORD *)&v201 + 1);
      *((_QWORD *)&v201 + 1) = v133;
      *(_QWORD *)&v200 = v132;
      *((_QWORD *)&v200 + 1) = v132;
      if (v11 != v132)
      {
        do
        {
          *(_QWORD *)&v201 = v11 - 35;
          v134 = (std::__shared_weak_count *)*(v11 - 2);
          if (v134)
          {
            v135 = (unint64_t *)&v134->__shared_owners_;
            do
              v136 = __ldaxr(v135);
            while (__stlxr(v136 - 1, v135));
            if (!v136)
            {
              ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
              std::__shared_weak_count::__release_weak(v134);
            }
          }
          v137 = (std::__shared_weak_count *)*(v11 - 19);
          if (v137)
          {
            v138 = (unint64_t *)&v137->__shared_owners_;
            do
              v139 = __ldaxr(v138);
            while (__stlxr(v139 - 1, v138));
            if (!v139)
            {
              ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
              std::__shared_weak_count::__release_weak(v137);
            }
          }
          v11 = (unint64_t *)v201;
        }
        while ((unint64_t *)v201 != v132);
        v11 = (unint64_t *)v200;
      }
      if (v11)
        operator delete(v11);
      goto LABEL_108;
    }
    v17 = 0;
    --*(_DWORD *)(v31 + 8);
  }
LABEL_120:
  if (*((_QWORD *)&v168 + 1))
  {
    v145 = (unint64_t *)(*((_QWORD *)&v168 + 1) + 8);
    do
      v146 = __ldaxr(v145);
    while (__stlxr(v146 - 1, v145));
    if (!v146)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v168 + 1) + 16))(*((_QWORD *)&v168 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v168 + 1));
    }
  }
  if (*((_QWORD *)&v161 + 1))
  {
    v147 = (unint64_t *)(*((_QWORD *)&v161 + 1) + 8);
    do
      v148 = __ldaxr(v147);
    while (__stlxr(v148 - 1, v147));
    if (!v148)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v161 + 1) + 16))(*((_QWORD *)&v161 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v161 + 1));
    }
  }
  return v17;
}

void sub_20FB8B8FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  uint64_t v54;

  sub_20F626C38(v54 - 176);
  sub_20F4EE658((uint64_t)&a54);
  sub_20F4EE704((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20FB8B920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  sub_20F4EE658((uint64_t)&a54);
  sub_20F4EE704((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20FB8B93C(unsigned int a1, int8x16_t *a2, uint64_t a3)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int8x16_t *v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  __int8 *v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  BOOL v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;

  v6 = *(_DWORD *)(a3 + 16);
  if (v6 != *(_DWORD *)(a3 + 20))
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOPriorUtil.h", 322, (uint64_t)"hessian.rows() == hessian.columns()", 35, (uint64_t)"Hessian matrix should be square.", 32, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_31;
    }
    v6 = *(_DWORD *)(a3 + 16);
  }
  v7 = a1 + 6;
  if (a1 + 6 <= v6)
    goto LABEL_7;
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOPriorUtil.h", 323, (uint64_t)"(variable_offset + DIM) <= hessian.rows()", 41, (uint64_t)"Indices exceed matrix bounds.", 29, (void (*)(void **))sub_21023DDB0))
  {
LABEL_31:
    abort();
  }
  v6 = *(_DWORD *)(a3 + 16);
LABEL_7:
  v8 = v6 * a1;
  v9 = *(int8x16_t **)a3;
  v10 = &v9->i64[v6 * a1 + a1];
  if (v9 == a2)
  {
    v22 = a2[1];
    v21 = a2[2];
    v23 = *a2;
    v24 = vextq_s8(v21, v21, 8uLL).u64[0];
    v25 = vextq_s8(v22, v22, 8uLL).u64[0];
    v26 = vextq_s8(v23, v23, 8uLL).u64[0];
    if (6 * v6)
    {
      v27 = (unint64_t)(v6 - 6) << 32;
      v28 = &v9->i64[v8 + a1];
      do
      {
        *v28 = 0;
        v29 = HIDWORD(v27);
        v30 = (int)v27 < 5;
        if ((int)v27 < 5)
          v29 = 0;
        v31 = &v28[v29];
        v32 = (v27 + 1);
        v33 = v27 & 0xFFFFFFFF00000000;
        if (!v30)
          v32 = 0;
        v27 = v32 | v33;
        v28 = v31 + 1;
      }
      while (v28 != &v10[6 * v6]);
    }
    *v10 = v23.i64[0];
    v10[v6 + 1] = v26;
    v10[2 * v6 + 2] = v22.i64[0];
    v10[3 * v6 + 3] = v25;
    v10[4 * v6 + 4] = v21.i64[0];
    v10[5 * v6 + 5] = v24;
    if (a1)
      goto LABEL_16;
  }
  else
  {
    if (6 * v6)
    {
      v11 = (unint64_t)(v6 - 6) << 32;
      v12 = &v9->i64[v8 + a1];
      do
      {
        *v12 = 0;
        v13 = HIDWORD(v11);
        v14 = (int)v11 < 5;
        if ((int)v11 < 5)
          v13 = 0;
        v15 = &v12[v13];
        v16 = (v11 + 1);
        v17 = v11 & 0xFFFFFFFF00000000;
        if (!v14)
          v16 = 0;
        v11 = v16 | v17;
        v12 = v15 + 1;
      }
      while (v12 != &v10[6 * v6]);
    }
    *v10 = a2->i64[0];
    v10[v6 + 1] = a2->i64[1];
    v10[2 * v6 + 2] = a2[1].i64[0];
    v10[3 * v6 + 3] = a2[1].i64[1];
    v10[4 * v6 + 4] = a2[2].i64[0];
    v10[5 * v6 + 5] = a2[2].i64[1];
    if (a1)
    {
LABEL_16:
      bzero((char *)v9 + 8 * v8, 8 * a1);
      bzero((char *)v9 + 8 * v6 + 8 * v6 * a1, 8 * a1);
      bzero((char *)v9 + 8 * v6 * (a1 + 2), 8 * a1);
      bzero((char *)v9 + 8 * v6 * (a1 + 3), 8 * a1);
      bzero((char *)v9 + 8 * v6 * (a1 + 4), 8 * a1);
      bzero((char *)v9 + 8 * v6 * (a1 + 5), 8 * a1);
    }
  }
  if (v6 > v7)
  {
    v18 = v6 - a1 - 6;
    if (v6 - a1 != 6)
    {
      v19 = a1 + v6 * v7;
      do
      {
        v20 = &v9->i8[8 * v19];
        *((_OWORD *)v20 + 1) = 0uLL;
        *((_OWORD *)v20 + 2) = 0uLL;
        *(_OWORD *)v20 = 0uLL;
        v19 += v6;
        --v18;
      }
      while (v18);
    }
  }
}

void sub_20FB8BBE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  size_t *v5;
  size_t v6;
  int v7;
  size_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  double v12;
  const double *v13;
  float64x2_t *v14;
  unsigned int v15;
  unsigned int v16;
  size_t v17;
  uint64_t v18;
  double *v19;
  unint64_t v20;
  double *v21;
  double *v22;
  BOOL v23;
  unint64_t v24;
  uint64_t v25;
  float64x2_t *v26;
  float64x2_t *v27;
  uint64_t v28;
  float64x2_t v29;
  double *v30;
  double v31;
  int v32[2];
  size_t v33;
  int __lda;
  float64x2_t *v35;
  size_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = **(_QWORD **)(a2 + 16);
  if (*(_QWORD *)v4 == *(_QWORD *)a1)
  {
    v15 = *(_DWORD *)(**(_QWORD **)(a2 + 8) + 16);
    v16 = *(_DWORD *)(v4 + 16);
    v17 = (8 * v16 * v15 + 31) & 0xFFFFFFFE0;
    v36 = v17 >> 3;
    v35 = (float64x2_t *)operator new(v17, (std::align_val_t)0x20uLL);
    v37 = __PAIR64__(v16, v15);
    sub_20FB8BE7C((uint64_t)&v35, a2);
    v18 = (*(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
    v14 = v35;
    if (!(_DWORD)v18)
      goto LABEL_19;
    v19 = *(double **)a1;
    v20 = (v18 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v20 >= 9)
    {
      v23 = v19 >= &v35->f64[v18] || v35 >= (float64x2_t *)&v19[v18];
      v21 = (double *)v35;
      v22 = *(double **)a1;
      if (v23)
      {
        v24 = v20 + 1;
        v25 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        v21 = &v35->f64[v25];
        v22 = &v19[v25];
        v26 = (float64x2_t *)(v19 + 2);
        v27 = v35 + 1;
        v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v29 = vsubq_f64(*v26, *v27);
          v26[-1] = vsubq_f64(v26[-1], v27[-1]);
          *v26 = v29;
          v26 += 2;
          v27 += 2;
          v28 -= 4;
        }
        while (v28);
        if (v24 == (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_19:
          if (!v14)
            return;
          goto LABEL_20;
        }
      }
    }
    else
    {
      v21 = (double *)v35;
      v22 = *(double **)a1;
    }
    v30 = &v19[v18];
    do
    {
      v31 = *v21++;
      *v22 = *v22 - v31;
      ++v22;
    }
    while (v22 != v30);
    goto LABEL_19;
  }
  v5 = *(size_t **)(a2 + 8);
  v6 = *v5;
  v7 = *(_DWORD *)(*v5 + 16);
  if (6 * v7)
  {
    if (*(_DWORD *)(v4 + 16) * *(_DWORD *)(v4 + 20))
    {
      v8 = (8 * (6 * v7) + 31) & 0xFFFFFFFE0;
      v33 = v8 >> 3;
      *(_QWORD *)v32 = operator new(v8, (std::align_val_t)0x20uLL);
      __lda = v7;
      v9 = v5[1];
      v36 = v6;
      v37 = v9;
      v38 = 0x3FF0000000000000;
      sub_20FB8C0B0((uint64_t)v32, (uint64_t)&v35);
      v10 = **(_QWORD **)(a2 + 16);
      v11 = *(_DWORD *)(**(_QWORD **)(a2 + 8) + 16);
      v12 = -*(double *)(a2 + 24);
      v13 = *(const double **)v32;
      sub_20E8BE654(0, 1, v11, *(_DWORD *)(v10 + 16), 6, *(const double **)v32, __lda, *(double **)v10, v12, 1.0, *(_DWORD *)(v10 + 16), *(double **)a1, *(_DWORD *)(a1 + 16));
      if (v13)
      {
        v14 = (float64x2_t *)v13;
LABEL_20:
        MEMORY[0x212BC6368](v14, 0x1000C8000313F17);
      }
    }
  }
}

void sub_20FB8BE34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;

  if (v16)
    MEMORY[0x212BC6368](v16, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

void sub_20FB8BE7C(uint64_t a1, uint64_t a2)
{
  double *v4;
  uint64_t v5;
  size_t *v6;
  size_t v7;
  int v8;
  size_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  double v13;
  const double *v14;
  void *v15;
  unsigned int v16;
  unsigned int v17;
  size_t v18;
  size_t v19;
  int v20[2];
  size_t v21;
  int __lda;
  void *v23;
  size_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v4 = *(double **)a1;
  v5 = **(_QWORD **)(a2 + 16);
  if (*(double **)v5 == v4)
  {
    v16 = *(_DWORD *)(**(_QWORD **)(a2 + 8) + 16);
    v17 = *(_DWORD *)(v5 + 16);
    v18 = (8 * v17 * v16 + 31) & 0xFFFFFFFE0;
    v24 = v18 >> 3;
    v23 = operator new(v18, (std::align_val_t)0x20uLL);
    v25 = __PAIR64__(v17, v16);
    sub_20FB8BE7C(&v23, a2);
    v15 = *(void **)a1;
    v19 = v24;
    *(_QWORD *)a1 = v23;
    *(_QWORD *)(a1 + 8) = v19;
    *(_QWORD *)(a1 + 16) = v25;
    if (!v15)
      return;
    goto LABEL_9;
  }
  v6 = *(size_t **)(a2 + 8);
  v7 = *v6;
  v8 = *(_DWORD *)(*v6 + 16);
  if (6 * v8 && *(_DWORD *)(v5 + 16) * *(_DWORD *)(v5 + 20))
  {
    v9 = (8 * (6 * v8) + 31) & 0xFFFFFFFE0;
    v21 = v9 >> 3;
    *(_QWORD *)v20 = operator new(v9, (std::align_val_t)0x20uLL);
    __lda = v8;
    v10 = v6[1];
    v24 = v7;
    v25 = v10;
    v26 = 0x3FF0000000000000;
    sub_20FB8C0B0((uint64_t)v20, (uint64_t)&v23);
    v11 = **(_QWORD **)(a2 + 16);
    v12 = *(_DWORD *)(**(_QWORD **)(a2 + 8) + 16);
    v13 = *(double *)(a2 + 24);
    v14 = *(const double **)v20;
    sub_20E8BE654(0, 1, v12, *(_DWORD *)(v11 + 16), 6, *(const double **)v20, __lda, *(double **)v11, v13, 0.0, *(_DWORD *)(v11 + 16), *(double **)a1, *(_DWORD *)(a1 + 16));
    if (!v14)
      return;
    v15 = (void *)v14;
LABEL_9:
    MEMORY[0x212BC6368](v15, 0x1000C8000313F17);
    return;
  }
  if (*(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16))
    bzero(v4, 8 * (*(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16)));
}

void sub_20FB8C068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;

  if (v16)
    MEMORY[0x212BC6368](v16, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

void sub_20FB8C0B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double *v5;
  double *v6;
  int v7;
  int v8;
  int v9;
  size_t v10;
  double *v11;
  size_t v12;
  void *v13;
  size_t v14;
  int v15;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(double **)a1;
  if (*(double **)v4 == v5 || (v6 = *(double **)(a2 + 16), v6 == v5))
  {
    v9 = *(_DWORD *)(v4 + 16);
    v10 = (8 * (6 * v9) + 31) & 0xFFFFFFFE0;
    v14 = v10 >> 3;
    v13 = operator new(v10, (std::align_val_t)0x20uLL);
    v15 = v9;
    sub_20FB8C0B0(&v13, a2);
    v11 = *(double **)a1;
    v12 = v14;
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = v12;
    *(_DWORD *)(a1 + 16) = v15;
    if (v11)
      MEMORY[0x212BC6368](v11, 0x1000C8000313F17);
  }
  else
  {
    v7 = *(_DWORD *)(v4 + 16);
    v8 = *(_DWORD *)(v4 + 20);
    if (v8 * v7)
    {
      sub_20E8BE654(0, 0, v7, 6, v8, *(const double **)v4, v7, v6, *(double *)(a2 + 24), 0.0, 6, v5, *(_DWORD *)(a1 + 16));
    }
    else if (6 * *(_DWORD *)(a1 + 16))
    {
      bzero(v5, 8 * (6 * *(_DWORD *)(a1 + 16)));
    }
  }
}

void sub_20FB8C1E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    MEMORY[0x212BC6368](a12, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

void sub_20FB8C208(uint64_t a1)
{
  uint64_t v1;
  unsigned __int32 v2;
  float64x2_t *v3;
  float64x2_t *v4;
  double *v5;
  int v6;
  int v7;
  unsigned __int32 v8;
  uint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unsigned __int32 *v14;
  char *v15;
  unsigned __int32 v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  unsigned __int8 v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  unsigned __int8 v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v38;
  const char *v39;
  size_t v40;
  char *v41;
  __int128 *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  int64x2_t v50;
  __int128 v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  char *v61;
  char *v62;
  unint64_t v63;
  unint64_t v64;
  unsigned __int32 *v65;
  char *v66;
  unsigned __int32 v67;
  _QWORD *v68;
  _DWORD *v69;
  _DWORD *v70;
  _DWORD *v71;
  _DWORD *v72;
  unsigned __int8 v73;
  int v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v78;
  const char *v79;
  size_t v80;
  uint64_t v81;
  __int128 v82;
  float64x2_t v83;
  float64x2_t v84;
  __int32 *v85;
  __int32 *v86;
  __int32 *v87;
  unsigned __int8 v88;
  uint64_t v89;
  uint64_t i;
  unsigned __int8 v91;
  unsigned int v92;
  void **v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  size_t v97;
  unsigned int v98;
  unsigned int v99;
  char *v100;
  unsigned int v101;
  char *v102;
  char *v103;
  char *v104;
  unsigned __int8 v105;
  const char *v106;
  size_t v107;
  void **v108;
  uint64_t v109;
  uint64_t v110;
  void **v111;
  uint64_t v112;
  uint64_t v113;
  NSObject *v114;
  size_t v115;
  std::__shared_weak_count_vtbl *v116;
  std::__shared_weak_count *v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  unint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  const char *v124;
  void *v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  void *v132;
  uint64_t *v133;
  uint64_t v134;
  _QWORD *v135;
  __int128 v136;
  __int32 v137;
  uint64_t v138;
  __int32 v139;
  uint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  uint64_t *v154;
  uint64_t v155;
  _QWORD *v156;
  __int128 v157;
  __int32 v158;
  uint64_t v159;
  __int32 v160;
  uint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  size_t v178;
  char *v179;
  char *v180;
  size_t v181;
  uint64_t v182;
  _QWORD *v183;
  unsigned int v184;
  unsigned int v185;
  unsigned int v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  int64x2_t v190;
  int64x2_t *v191;
  int64x2_t v192;
  int64x2_t *v193;
  int64x2_t v194;
  int64x2_t v195;
  int64x2_t *v196;
  int64x2_t v197;
  int64x2_t v198;
  int64x2_t *v199;
  int64x2_t v200;
  int64x2_t v201;
  int64x2_t v202;
  __int128 v203;
  int64x2_t v204;
  int64x2_t v205;
  int64x2_t v206;
  int64x2_t v207;
  int64x2_t v208;
  unsigned int v209;
  uint64_t v210;
  uint64_t v211;
  _QWORD *v212;
  size_t v213;
  unsigned int v214;
  __int32 v215;
  int v216;
  char *v217;
  size_t v218;
  uint64_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  double v226;
  size_t v227;
  char *v228;
  char *v229;
  size_t v230;
  uint64_t v231;
  _QWORD *v232;
  unsigned int v233;
  unsigned int v234;
  unsigned int v235;
  unsigned __int8 v236;
  const char *v237;
  size_t v238;
  void **v239;
  uint64_t v240;
  uint64_t v241;
  void **v242;
  uint64_t v243;
  uint64_t v244;
  NSObject *v245;
  size_t v246;
  std::__shared_weak_count_vtbl *v247;
  std::__shared_weak_count *v248;
  std::__shared_weak_count *v249;
  unint64_t *v250;
  unint64_t v251;
  unint64_t v252;
  _QWORD *v253;
  uint64_t v254;
  const char *v255;
  void *v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  void *v263;
  uint64_t *v264;
  uint64_t v265;
  _QWORD *v266;
  __int128 v267;
  __int32 v268;
  uint64_t v269;
  __int32 v270;
  uint64_t v271;
  std::__shared_weak_count *v272;
  unint64_t *v273;
  unint64_t v274;
  unint64_t *v275;
  unint64_t v276;
  std::__shared_weak_count *v277;
  unint64_t *v278;
  unint64_t v279;
  unint64_t *v280;
  unint64_t v281;
  std::__shared_weak_count *v282;
  unint64_t *v283;
  unint64_t v284;
  uint64_t *v285;
  uint64_t v286;
  _QWORD *v287;
  __int128 v288;
  __int32 v289;
  uint64_t v290;
  __int32 v291;
  uint64_t v292;
  std::__shared_weak_count *v293;
  unint64_t *v294;
  unint64_t v295;
  unint64_t *v296;
  unint64_t v297;
  std::__shared_weak_count *v298;
  unint64_t *v299;
  unint64_t v300;
  unint64_t *v301;
  unint64_t v302;
  std::__shared_weak_count *v303;
  unint64_t *v304;
  unint64_t v305;
  unint64_t *v306;
  void *v307;
  _QWORD *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  _OWORD *v312;
  __n128 v313;
  __int128 v314;
  __int128 v315;
  _BOOL4 v316;
  uint8x8_t v317;
  unsigned __int8 v318;
  int v319;
  unint64_t v320;
  unint64_t v321;
  uint64_t v322;
  size_t v323;
  const char *v324;
  unsigned __int8 v325;
  size_t v326;
  const char *v327;
  void **v328;
  uint64_t v329;
  uint64_t v330;
  void **v331;
  uint64_t v332;
  uint64_t v333;
  NSObject *v334;
  size_t v335;
  std::__shared_weak_count_vtbl *v336;
  std::__shared_weak_count *v337;
  std::__shared_weak_count *v338;
  unint64_t *p_shared_owners;
  unint64_t v340;
  unint64_t v341;
  _QWORD *v342;
  uint64_t v343;
  uint64_t v344;
  void *v345;
  std::__shared_weak_count *v346;
  unint64_t *v347;
  unint64_t v348;
  std::__shared_weak_count *v349;
  unint64_t *v350;
  unint64_t v351;
  void *v352;
  uint64_t *v353;
  uint64_t v354;
  _QWORD *v355;
  __int128 v356;
  __int32 v357;
  uint64_t v358;
  __int32 v359;
  uint64_t v360;
  std::__shared_weak_count *v361;
  unint64_t *v362;
  unint64_t v363;
  unint64_t *v364;
  unint64_t v365;
  std::__shared_weak_count *v366;
  unint64_t *v367;
  unint64_t v368;
  unint64_t *v369;
  unint64_t v370;
  std::__shared_weak_count *v371;
  unint64_t *v372;
  unint64_t v373;
  uint64_t *v374;
  uint64_t v375;
  _QWORD *v376;
  __int128 v377;
  __int32 v378;
  uint64_t v379;
  __int32 v380;
  uint64_t v381;
  std::__shared_weak_count *v382;
  unint64_t *v383;
  unint64_t v384;
  unint64_t *v385;
  unint64_t v386;
  std::__shared_weak_count *v387;
  unint64_t *v388;
  unint64_t v389;
  unint64_t *v390;
  unint64_t v391;
  std::__shared_weak_count *v392;
  unint64_t *v393;
  unint64_t v394;
  std::__shared_weak_count *v395;
  unint64_t *v396;
  unint64_t v397;
  unsigned int v398;
  uint64_t *v399;
  int8x16_t v400;
  int8x16_t v401;
  int8x16_t v402;
  unsigned __int8 *v403;
  int64x2_t v404;
  uint32x4_t v405;
  int8x16_t v406;
  int8x16_t v407;
  int8x16_t v408;
  int8x16_t v409;
  int8x16_t v410;
  int8x16_t v411;
  _QWORD *v412;
  int v413;
  uint64_t v414;
  unint64_t v415;
  uint64_t v416;
  uint64_t v417;
  _QWORD *v418;
  uint64_t v419;
  unint64_t v420;
  unint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  int v425;
  int v426;
  int v427;
  int v428;
  int v429;
  int v430;
  unsigned int v431;
  int v432;
  unsigned int v433;
  unsigned int v434;
  unsigned int v435;
  int v436;
  int v437;
  int v438;
  int v439;
  int v440;
  unsigned int v441;
  uint64_t v442;
  unsigned int v443;
  unsigned int v444;
  uint64_t v445;
  unsigned int v446;
  unsigned int v447;
  uint64_t v448;
  unsigned int v449;
  unsigned int v450;
  uint64_t v451;
  unsigned __int8 v452;
  unsigned __int8 v453;
  unsigned __int8 v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  void *v458[2];
  const char *v459;
  float64x2_t v460;
  unint64_t v461;
  _QWORD *v462;
  float64x2_t v463;
  unint64_t v464;
  uint64_t v465;
  unint64_t v466;
  float64x2_t v467;
  int8x16_t v468;
  float64x2_t v469;
  double *v470;
  const char *v471;
  float64x2_t v472;
  const char *v473;
  int64x2_t __src[18];
  _QWORD v475[2];
  int64x2_t v476[4];
  __int128 v477;
  int64x2_t v478;
  int64x2_t v479;
  int64x2_t v480[4];
  int64x2_t v481;
  int64x2_t v482;
  int64x2_t v483;
  int64x2_t v484[4];
  int v485;
  double v486;
  uint64_t v487;
  void *object[36];
  __int128 v489;
  __int128 v490;
  __int128 v491;
  int64x2_t v492;
  int64x2_t v493;
  int64x2_t v494;
  __int128 v495;
  __int128 v496;
  __int128 v497;
  __int128 v498;
  int64x2_t v499;
  int64x2_t v500;
  __int128 v501;
  __int128 v502;
  __int128 v503;
  _BYTE v504[32];
  int8x16_t v505;
  __int128 v506;
  __int128 v507;
  uint64_t v508;
  __int128 v509;
  uint64_t v510;
  char *v511;
  std::__shared_weak_count *v512;
  uint64_t v513;

  MEMORY[0x24BDAC7A8](a1);
  v4 = v3;
  v470 = v5;
  v7 = v6;
  v8 = v2;
  v9 = v1;
  v513 = *MEMORY[0x24BDAC8D0];
  v10 = *(char **)(v1 + 5368);
  v11 = *(char **)(v1 + 5376);
  if (v11 != v10)
  {
    v12 = (v11 - v10) >> 4;
    do
    {
      v13 = v12 >> 1;
      v14 = (unsigned __int32 *)&v10[16 * (v12 >> 1)];
      v16 = *v14;
      v15 = (char *)(v14 + 4);
      v12 += ~(v12 >> 1);
      if (v16 < v2)
        v10 = v15;
      else
        v12 = v13;
    }
    while (v12);
  }
  if (v10 == v11 || *(_DWORD *)v10 != v2)
  {
    v17 = v1;
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 411, (uint64_t)"var_iter != this->linear_system_.template endVariable<VIOExtrinsicsVariable<Float>>()", 85, (uint64_t)"invalid extrinsics calib iterator.", 34, (void (*)(void **))sub_21023DDB0);
    v18 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68 || byte_254A6DE70)
    {
      v20 = qword_254A6DE40;
      v19 = qword_254A6DE48;
      while (v20 != v19)
      {
        v22 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v20;
        v21 = *(_QWORD *)(v20 + 8);
        v20 += 16;
        v22(v21, "var_iter != this->linear_system_.template endVariable<VIOExtrinsicsVariable<Float>>()", 85, "invalid extrinsics calib iterator.", 34);
      }
    }
    v23 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v23 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      abort();
    v9 = v17;
    qword_254A6DE58(unk_254A6DE60, "var_iter != this->linear_system_.template endVariable<VIOExtrinsicsVariable<Float>>()", 85, "invalid extrinsics calib iterator.", 34);
    v10 = v11;
  }
  v24 = *((_QWORD *)v10 + 1);
  if (!v7)
  {
    *(_BYTE *)(v24 + 129) = 0;
    return;
  }
  v25 = *(unsigned __int8 *)(v24 + 20);
  *(_BYTE *)(v24 + 20) = 1;
  *(_BYTE *)(v24 + 129) = 1;
  if (v25)
  {
LABEL_56:
    v57 = vmulq_f64(*v4, *v4);
    v58 = (float64x2_t)vdupq_n_s64(0x3CB0000000000000uLL);
    v472 = vmulq_f64(v4[1], v4[1]);
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vcgtq_f64(v58, v57), (int32x4_t)vcgtq_f64(v58, v472)))) & 1) == 0)
    {
      v59 = vmulq_f64(v4[2], v4[2]);
      v469 = v59;
      if (v59.f64[0] >= 2.22044605e-16 && v59.f64[1] >= 2.22044605e-16)
      {
        v61 = *(char **)(v9 + 5368);
        v62 = *(char **)(v9 + 5376);
        if (v62 != v61)
        {
          v63 = (v62 - v61) >> 4;
          do
          {
            v64 = v63 >> 1;
            v65 = (unsigned __int32 *)&v61[16 * (v63 >> 1)];
            v67 = *v65;
            v66 = (char *)(v65 + 4);
            v63 += ~(v63 >> 1);
            if (v67 < v8)
              v61 = v66;
            else
              v63 = v64;
          }
          while (v63);
        }
        if (v61 == v62 || *(_DWORD *)v61 != v8)
          return;
        *(_QWORD *)(v9 + 67696) = *(_QWORD *)(v9 + 67688);
        v68 = (_QWORD *)(v9 + 42896);
        *(_QWORD *)(v9 + 67720) = *(_QWORD *)(v9 + 67712);
        v69 = *(_DWORD **)(v9 + 67752);
        *(_QWORD *)(v9 + 67768) = *(_QWORD *)(v9 + 67760);
        *(_QWORD *)(v9 + 67792) = *(_QWORD *)(v9 + 67784);
        *(_QWORD *)(v9 + 67816) = *(_QWORD *)(v9 + 67808);
        *(_QWORD *)(v9 + 67840) = *(_QWORD *)(v9 + 67832);
        *(_QWORD *)(v9 + 67864) = *(_QWORD *)(v9 + 67856);
        *(_QWORD *)(v9 + 67888) = *(_QWORD *)(v9 + 67880);
        *(_QWORD *)(v9 + 67912) = *(_QWORD *)(v9 + 67904);
        v70 = *(_DWORD **)(v9 + 67736);
        *(_QWORD *)(v9 + 67744) = v70;
        if (v69 == v70)
        {
          v467 = v57;
          if (v70)
          {
            *(_QWORD *)(v9 + 67744) = v70;
            operator delete(v70);
            *(_QWORD *)(v9 + 67736) = 0;
            *(_QWORD *)(v9 + 67744) = 0;
            *(_QWORD *)(v9 + 67752) = 0;
          }
          v70 = operator new(4uLL);
          *(_QWORD *)(v9 + 67736) = v70;
          *(_QWORD *)(v9 + 67744) = v70;
          *(_QWORD *)(v9 + 67752) = v70 + 1;
          v57 = v467;
        }
        *v70 = v8;
        *(_QWORD *)(v9 + 67744) = v70 + 1;
        v71 = *(_DWORD **)(v9 + 43104);
        v72 = *(_DWORD **)(v9 + 43112);
        if (v71 != v72)
        {
          while (*v71 != v8)
          {
            if (++v71 == v72)
              return;
          }
        }
        if (v71 == v72)
          return;
        v468 = (int8x16_t)v57;
        sub_20F8F2BC0(v9 + 67688, v9 + 43056, (uint64_t)dword_2103B93C4, v9 + 67928);
        v504[0] = 0;
        v81 = v9 + 68168;
        memset(v476, 0, sizeof(v476));
        v477 = 0u;
        v478 = 0u;
        v479 = 0u;
        memset(v480, 0, sizeof(v480));
        v481 = 0u;
        v482 = 0u;
        v483 = 0u;
        memset(v484, 0, sizeof(v484));
        sub_20FB7AA78(v9 + 27856, (uint64_t)v476, (unsigned int **)(v9 + 67928), (_DWORD **)(v9 + 67928), v504);
        *(_QWORD *)&v82 = vdupq_laneq_s64(v479, 1).u64[0];
        *((_QWORD *)&v82 + 1) = v480[2].i64[1];
        v481 = vzip2q_s64(v483, v484[2]);
        v476[0] = vzip1q_s64(v476[0], v476[3]);
        v476[1] = vzip1q_s64(v479, v480[2]);
        v476[2] = vzip1q_s64(v482, v484[1]);
        v477 = v82;
        v478 = vzip2q_s64(v482, v484[1]);
        v480[0] = vzip1q_s64(v480[0], v480[3]);
        v480[1] = vzip1q_s64(v483, v484[2]);
        v484[0] = vzip1q_s64(v484[0], v484[3]);
        *(_QWORD *)&v83.f64[0] = v476[0].i64[0];
        v501 = *(__int128 *)((char *)v476 + 8);
        v502 = *(__int128 *)((char *)&v476[1] + 8);
        *(_QWORD *)&v83.f64[1] = v476[3].i64[1];
        v460 = v83;
        v503 = *(__int128 *)((char *)&v476[2] + 8);
        v498 = v82;
        v499 = v478;
        v500 = v479;
        *(_QWORD *)&v84.f64[0] = v480[0].i64[0];
        v497 = *(__int128 *)((char *)&v480[2] + 8);
        v496 = *(__int128 *)((char *)&v480[1] + 8);
        v495 = *(__int128 *)((char *)v480 + 8);
        *(_QWORD *)&v84.f64[1] = v480[3].i64[1];
        *(float64x2_t *)v458 = v84;
        v494 = v483;
        v493 = v482;
        v492 = v481;
        *(_QWORD *)&v84.f64[0] = v484[0].i64[0];
        v491 = *(__int128 *)((char *)&v484[2] + 8);
        v490 = *(__int128 *)((char *)&v484[1] + 8);
        v489 = *(__int128 *)((char *)v484 + 8);
        *(_QWORD *)&v84.f64[1] = v484[3].i64[1];
        v463 = v84;
        v457 = v9 + 27856;
        sub_20F926890((_QWORD *)(v9 + 27856), (void **)(v9 + 68168));
        v85 = *(__int32 **)(v9 + 43112);
        v86 = wmemchr(*(__int32 **)(v9 + 43104), v8, ((uint64_t)v85 - *(_QWORD *)(v9 + 43104)) >> 2);
        if (v86)
          v87 = v86;
        else
          v87 = v85;
        if (v87 == *(__int32 **)(v9 + 43112))
        {
          sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 535, (uint64_t)"prior_var_iter != variable_ids.end()", 36, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
          v88 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v88 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68 || byte_254A6DE70)
          {
            v89 = qword_254A6DE40;
            for (i = qword_254A6DE48; v89 != i; v89 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v89)(*(_QWORD *)(v89 + 8), "prior_var_iter != variable_ids.end()", 36, "", 0);
          }
          v91 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v91 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68)
            abort();
          qword_254A6DE58(unk_254A6DE60, "prior_var_iter != variable_ids.end()", 36, "", 0);
        }
        v462 = (_QWORD *)v9;
        v92 = *(_DWORD *)(v9 + 27824) + 6 * (((unint64_t)v87 - *(_QWORD *)(v9 + 43104)) >> 2);
        v93 = (void **)(v9 + 68192);
        v94 = *(unsigned int *)(v9 + 68184);
        v95 = *(_QWORD *)v81;
        if (*(_QWORD *)(v81 + 40) == (v94 | 0x600000000))
        {
          v96 = (char *)*v93;
        }
        else
        {
          v96 = (char *)*v93;
          if ((void *)v95 == *v93)
          {
            v178 = (8 * (6 * v94) + 31) & 0xFFFFFFFE0;
            v179 = (char *)operator new(v178, (std::align_val_t)0x20uLL);
            v180 = v179;
            v181 = v178 >> 3;
            if ((_DWORD)v94)
            {
              v182 = 8 * v94;
              v183 = v68;
              v184 = v92;
              v185 = v92 * v94;
              memmove(v179, (const void *)(v95 + 8 * v185), 8 * v94);
              v186 = v94 + v185;
              v92 = v184;
              v68 = v183;
              v93 = (void **)(v81 + 24);
              memmove(&v180[8 * v94], (const void *)(v95 + 8 * v186), 8 * v94);
              memmove(&v180[v182 + v182], (const void *)(v95 + 8 * (v92 + 2) * v94), 8 * v94);
              memmove(&v180[v182 + v182 + v182], (const void *)(v95 + 8 * (v92 + 3) * v94), 8 * v94);
              memmove(&v180[v182 + v182 + v182 + v182], (const void *)(v95 + 8 * (v92 + 4) * v94), 8 * v94);
              memmove(&v180[v182 + v182 + v182 + v182 + v182], (const void *)(v95 + 8 * (v92 + 5) * v94), 8 * v94);
              v181 = v178 >> 3;
            }
            *(_QWORD *)(v81 + 24) = v180;
            *(_QWORD *)(v81 + 32) = v181;
            *(_DWORD *)(v81 + 40) = v94;
            *(_DWORD *)(v81 + 44) = 6;
            if (!v95)
              goto LABEL_226;
            goto LABEL_225;
          }
          *(_DWORD *)(v81 + 40) = v94;
          *(_DWORD *)(v81 + 44) = 6;
          if (*(_QWORD *)(v81 + 32) < (unint64_t)(6 * v94))
          {
            if (v96)
              MEMORY[0x212BC6368](v96, 0x1000C8000313F17);
            v97 = (48 * v94 + 31) & 0x7FFFFFFFE0;
            *(_QWORD *)(v81 + 24) = 0;
            *(_QWORD *)(v81 + 32) = v97 >> 3;
            v96 = (char *)operator new(v97, (std::align_val_t)0x20uLL);
            *v93 = v96;
          }
        }
        if ((char *)v95 != v96)
        {
          if ((_DWORD)v94)
          {
            v98 = v92;
            v99 = v92 * v94;
            memmove(v96, (const void *)(v95 + 8 * v99), 8 * v94);
            v100 = &v96[8 * v94];
            v101 = v94 + v99;
            v92 = v98;
            memmove(v100, (const void *)(v95 + 8 * v101), 8 * v94);
            v102 = &v100[8 * v94];
            memmove(v102, (const void *)(v95 + 8 * (v98 + 2) * v94), 8 * v94);
            v103 = &v102[8 * v94];
            memmove(v103, (const void *)(v95 + 8 * (v98 + 3) * v94), 8 * v94);
            v104 = &v103[8 * v94];
            memmove(v104, (const void *)(v95 + 8 * (v98 + 4) * v94), 8 * v94);
            memmove(&v104[8 * v94], (const void *)(v95 + 8 * (v98 + 5) * v94), 8 * v94);
          }
          goto LABEL_226;
        }
        v227 = (8 * (*(_DWORD *)(v81 + 44) * *(_DWORD *)(v81 + 40)) + 31) & 0xFFFFFFFE0;
        v228 = (char *)operator new(v227, (std::align_val_t)0x20uLL);
        v229 = v228;
        v230 = v227 >> 3;
        if ((_DWORD)v94)
        {
          v231 = 8 * v94;
          v232 = v68;
          v233 = v92;
          v234 = v92 * v94;
          memmove(v228, (const void *)(v95 + 8 * v234), 8 * v94);
          v235 = v94 + v234;
          v92 = v233;
          v68 = v232;
          v93 = (void **)(v81 + 24);
          memmove(&v229[8 * v94], (const void *)(v95 + 8 * v235), 8 * v94);
          memmove(&v229[v231 + v231], (const void *)(v95 + 8 * (v92 + 2) * v94), 8 * v94);
          memmove(&v229[v231 + v231 + v231], (const void *)(v95 + 8 * (v92 + 3) * v94), 8 * v94);
          memmove(&v229[v231 + v231 + v231 + v231], (const void *)(v95 + 8 * (v92 + 4) * v94), 8 * v94);
          memmove(&v229[v231 + v231 + v231 + v231 + v231], (const void *)(v95 + 8 * (v92 + 5) * v94), 8 * v94);
          v230 = v227 >> 3;
        }
        *(_QWORD *)(v81 + 24) = v229;
        *(_QWORD *)(v81 + 32) = v230;
        if (!v95)
        {
LABEL_226:
          v187 = *(unsigned int *)(v81 + 40);
          v188 = *(_QWORD *)(v81 + 24) + 8 * v92;
          v189 = v188 + 8 * v187;
          v190 = *(int64x2_t *)v189;
          v191 = (int64x2_t *)(v188 + 16 * v187);
          v192 = *v191;
          v193 = (int64x2_t *)(v188 + 24 * v187);
          v195 = *v193;
          v194 = v193[1];
          v196 = (int64x2_t *)(v188 + 32 * v187);
          v197 = v196[1];
          v198 = *v196;
          v199 = (int64x2_t *)(v188 + 40 * v187);
          v201 = v199[1];
          v200 = v199[2];
          v202 = *v199;
          *(_QWORD *)&v203 = vdupq_laneq_s64(*v191, 1).u64[0];
          *((_QWORD *)&v203 + 1) = v193->i64[1];
          v204 = vzip1q_s64(v191[1], v194);
          v205 = vzip1q_s64(*v191, *v193);
          v206 = vzip1q_s64(*v196, *v199);
          v207 = vzip2q_s64(*v196, *v199);
          v208 = vzip1q_s64(v196[2], v200);
          *(int64x2_t *)v188 = vzip1q_s64(*(int64x2_t *)v188, *(int64x2_t *)v189);
          *(int64x2_t *)(v188 + 16) = v205;
          *(int64x2_t *)(v188 + 32) = v206;
          *(_OWORD *)(v189 + 16) = v203;
          *(int64x2_t *)(v189 + 32) = v207;
          *(int64x2_t *)v189 = v190;
          v191[1] = v204;
          v191[2] = vzip1q_s64(v197, v201);
          *v191 = v192;
          v193[1] = v194;
          v193[2] = vzip2q_s64(v197, v201);
          *v193 = v195;
          v196[1] = v197;
          v196[2] = v208;
          *v196 = v198;
          v199[1] = v201;
          v199[2] = v200;
          *v199 = v202;
          LODWORD(v188) = *(_DWORD *)(v81 + 40);
          v209 = v188 - v92 - 6;
          LODWORD(v189) = *(_DWORD *)(v81 + 16);
          v210 = *(_QWORD *)v81;
          *(_DWORD *)v504 = 6;
          *(_DWORD *)&v504[4] = v209;
          *(_DWORD *)&v504[8] = v189;
          *(_QWORD *)&v504[16] = v210 + 8 * (v92 + (_DWORD)v189 * (v92 + 6));
          *(_DWORD *)&v504[24] = v92 + v189 * (v92 + 6);
          v211 = *(_QWORD *)(v81 + 24);
          object[0] = (void *)(v209 | 0x600000000);
          LODWORD(object[1]) = v188;
          object[2] = (void *)(v211 + 8 * (v92 + 6));
          LODWORD(object[3]) = v92 + 6;
          if (v210 == v211)
          {
            v213 = (48 * v209 + 31) & 0xFFFFFFFE0;
            __src[0].i64[1] = v213 >> 3;
            v212 = v462;
            v214 = v92;
            __src[0].i64[0] = (uint64_t)operator new(v213, (std::align_val_t)0x20uLL);
            __src[1].i64[0] = v209 | 0x600000000;
            sub_20F208630(__src, (uint64_t)v504);
            if (__src[1].i32[0])
            {
              v215 = __src[1].i32[1];
              if (__src[1].i32[1])
              {
                v216 = 0;
                v217 = (char *)__src[0].i64[0];
                v218 = 8 * __src[1].u32[0];
                v219 = 8 * __src[1].i32[0];
                do
                {
                  memmove((char *)object[2] + 8 * (LODWORD(object[3]) + LODWORD(object[1]) * v216++) + -8 * LODWORD(object[3]), v217, v218);
                  v217 += v219;
                }
                while (v215 != v216);
              }
            }
            if (__src[0].i64[0])
              MEMORY[0x212BC6368](__src[0].i64[0], 0x1000C8000313F17);
            v92 = v214;
          }
          else
          {
            sub_20F208E50((uint64_t)object, (uint64_t)v504);
            v212 = v462;
          }
          v220 = v469;
          v466 = vextq_s8((int8x16_t)v220, (int8x16_t)v220, 8uLL).u64[0];
          *(_QWORD *)&v220.f64[1] = v466;
          v221 = v472;
          v465 = vextq_s8((int8x16_t)v221, (int8x16_t)v221, 8uLL).u64[0];
          *(_QWORD *)&v221.f64[1] = v465;
          v222 = vaddq_f64(v220, v463);
          *(_OWORD *)&object[1] = v501;
          *(_QWORD *)&v223.f64[0] = v468.i64[0];
          v464 = vextq_s8(v468, v468, 8uLL).u64[0];
          *(_QWORD *)&v223.f64[1] = v464;
          *(_OWORD *)&object[3] = v502;
          *(_OWORD *)&object[5] = v503;
          v224 = vaddq_f64(v223, v460);
          object[7] = *(void **)&v224.f64[1];
          object[0] = *(void **)&v224.f64[0];
          *(_OWORD *)&object[8] = v498;
          *(int64x2_t *)&object[10] = v499;
          *(int64x2_t *)&object[12] = v500;
          *(_OWORD *)&object[19] = v497;
          *(_OWORD *)&object[17] = v496;
          *(_OWORD *)&object[15] = v495;
          v225 = vaddq_f64(v221, *(float64x2_t *)v458);
          object[21] = *(void **)&v225.f64[1];
          object[14] = *(void **)&v225.f64[0];
          *(int64x2_t *)&object[26] = v494;
          *(int64x2_t *)&object[22] = v492;
          *(int64x2_t *)&object[24] = v493;
          *(_OWORD *)&object[33] = v491;
          *(_OWORD *)&object[31] = v490;
          *(_OWORD *)&object[29] = v489;
          object[35] = *(void **)&v222.f64[1];
          object[28] = *(void **)&v222.f64[0];
          v486 = 0.0;
          v485 = 0;
          sub_20E8BED80();
          if (v485)
            goto LABEL_359;
          v226 = v486;
          sub_20E8BEDB0();
          if (v485 >= 1)
            goto LABEL_359;
          if ((int)v226 > 0x180)
          {
            v307 = operator new((8 * (int)v226 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
            sub_20E8BED80();
            MEMORY[0x212BC6368](v307, 0x1000C8000313F17);
          }
          else
          {
            sub_20E8BED80();
          }
          if (v485 >= 1)
LABEL_359:
            memset(__src, 0, sizeof(__src));
          else
            memcpy(__src, object, sizeof(__src));
          v475[0] = v93;
          v475[1] = __src;
          object[0] = v93;
          *(_QWORD *)&v504[8] = v475;
          *(_QWORD *)&v504[16] = object;
          *(_QWORD *)&v504[24] = 0x3FF0000000000000;
          sub_20FB8BBE0(v81, (uint64_t)v504);
          *(_QWORD *)&v504[8] = 8;
          v308 = operator new(0x40uLL, (std::align_val_t)0x20uLL);
          *(_QWORD *)v504 = v308;
          *(_DWORD *)&v504[16] = 6;
          v309 = v476[3].i64[1];
          *v308 = v476[0].i64[0];
          v308[1] = v309;
          v310 = v480[3].i64[1];
          v308[2] = v480[0].i64[0];
          v308[3] = v310;
          v311 = v484[3].i64[1];
          v308[4] = v484[0].i64[0];
          v308[5] = v311;
          object[1] = (void *)8;
          v312 = operator new(0x40uLL, (std::align_val_t)0x20uLL);
          object[0] = v312;
          LODWORD(object[2]) = 6;
          v313.n128_u64[0] = *(_QWORD *)&v469.f64[0];
          v313.n128_u64[1] = v466;
          *(float64_t *)&v314 = v472.f64[0];
          *((_QWORD *)&v314 + 1) = v465;
          *(_QWORD *)&v315 = v468.i64[0];
          *((_QWORD *)&v315 + 1) = v464;
          *v312 = v315;
          v312[1] = v314;
          v312[2] = v313;
          v313.n128_u64[0] = v212[260];
          v316 = sub_20FC8C504((uint64_t)v504, (double **)object, v81 + 48, v313);
          if (object[0])
            MEMORY[0x212BC6368](object[0], 0x1000C8000313F17);
          if (*(_QWORD *)v504)
            MEMORY[0x212BC6368](*(_QWORD *)v504, 0x1000C8000313F17);
          if (!v316)
            goto LABEL_487;
          v318 = atomic_load((unsigned __int8 *)&qword_254A6B820);
          if ((v318 & 1) == 0 && __cxa_guard_acquire(&qword_254A6B820))
          {
            v454 = atomic_load((unsigned __int8 *)&qword_254A6DDE0);
            if ((v454 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDE0))
            {
              sub_20E8BFCE4(&qword_254A6DDD8);
              __cxa_guard_release(&qword_254A6DDE0);
            }
            object[0] = (void *)qword_254A6DDD8;
            v504[23] = 8;
            strcpy(v504, "cv3d.vio");
            sub_20E8C4068((uint64_t **)object, (uint64_t)v504, &qword_254A6B818);
            if ((v504[23] & 0x80000000) != 0)
              operator delete(*(void **)v504);
            __cxa_guard_release(&qword_254A6B820);
            v212 = v462;
          }
          v487 = qword_254A6B818;
          if (**(int **)(qword_254A6B818 + 56) > 3
            || (v319 = *(unsigned __int8 *)(qword_254A6B818 + 72),
                v320 = sub_20E8C31DC(qword_254A6B818, "OSLogSurrogateAppender", 1, 0),
                v321 = v320,
                !v319)
            && !v320)
          {
LABEL_486:
            v398 = *(_DWORD *)(v81 + 16) + 1;
            v399 = (uint64_t *)(*(_QWORD *)v81 + 8 * v398 * v92);
            v400.i64[0] = *v399;
            v400.i64[1] = v399[v398];
            v401.i64[0] = v399[4 * v398];
            v401.i64[1] = v399[5 * v398];
            v402.i64[0] = v399[2 * v398];
            v402.i64[1] = v399[3 * v398];
            v403 = *(unsigned __int8 **)(v81 + 48);
            v404.i64[0] = *v403;
            v404.i64[1] = v403[1];
            v317.i32[0] = *(_DWORD *)(v403 + 2);
            v405 = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v317));
            v406.i64[0] = v405.u32[0];
            v406.i64[1] = v405.u32[1];
            v407.i64[0] = 255;
            v407.i64[1] = 255;
            v408 = vandq_s8(v406, v407);
            v406.i64[0] = v405.u32[2];
            v406.i64[1] = v405.u32[3];
            v409 = (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v406, v407));
            v407.i64[0] = *(_QWORD *)&v472.f64[0];
            v407.i64[1] = v465;
            v410 = vbslq_s8((int8x16_t)vceqzq_s64((int64x2_t)v408), v402, v407);
            v408.i64[0] = *(_QWORD *)&v469.f64[0];
            v408.i64[1] = v466;
            v411 = vbslq_s8(v409, v401, v408);
            v409.i64[0] = v468.i64[0];
            v409.i64[1] = v464;
            v505 = v411;
            *(int8x16_t *)v504 = vbslq_s8((int8x16_t)vceqzq_s64(v404), v400, v409);
            *(int8x16_t *)&v504[16] = v410;
            sub_20FB8B93C(v92, (int8x16_t *)v504, v81);
LABEL_487:
            v412 = v212 + 5282;
            v413 = *(_DWORD *)(v81 + 16);
            v414 = (*(_DWORD *)(v81 + 20) * v413);
            if ((_DWORD)v414)
            {
              v415 = 0;
              v416 = *(_QWORD *)v81;
              v417 = 8 * v414;
              v418 = *(_QWORD **)v81;
              do
              {
                v422 = 0;
                if (v415 <= HIDWORD(v415))
                  v422 = *(_QWORD *)(v416 + 8 * (v415 + v413 * HIDWORD(v415)));
                *v418++ = v422;
                v419 = (v415 + 1);
                v420 = v415 & 0xFFFFFFFF00000000;
                v421 = v420 | v419;
                v415 = v420 + 0x100000000;
                if (v413 > (int)v419)
                  v415 = v421;
                v417 -= 8;
              }
              while (v417);
            }
            v423 = *v412;
            v424 = v212[5283];
            v425 = 6 * *(_DWORD *)(*v412 + 8);
            *(_DWORD *)v504 = 0;
            *(_DWORD *)&v504[4] = v425;
            v426 = 9 * *(_DWORD *)(v212[5292] + 8);
            *(_DWORD *)&v504[8] = v425;
            *(_DWORD *)&v504[12] = v426;
            v427 = v426 + v425;
            v428 = 6 * *(_DWORD *)(v212[5302] + 8);
            *(_DWORD *)&v504[16] = v427;
            *(_DWORD *)&v504[20] = v428;
            v429 = v428 + v427;
            v430 = 6 * *(_DWORD *)(v212[5312] + 8);
            *(_DWORD *)&v504[24] = v429;
            *(_DWORD *)&v504[28] = v430;
            v431 = v430 + v429;
            v432 = 3 * *(_DWORD *)(v212[5322] + 8);
            v505.i64[0] = __PAIR64__(v432, v431);
            v433 = v432 + v431;
            v434 = *(_DWORD *)(v212[5332] + 8);
            v505.i64[1] = __PAIR64__(v434, v433);
            v435 = v434 + v433;
            v436 = 4 * *(_DWORD *)(v212[5342] + 8);
            *(_QWORD *)&v506 = __PAIR64__(v436, v435);
            v437 = 4 * *(_DWORD *)(v212[5352] + 8);
            DWORD2(v506) = v436 + v435;
            HIDWORD(v506) = v437;
            v438 = v437 + v436 + v435;
            v439 = 3 * *(_DWORD *)(*v68 + 8);
            *(_QWORD *)&v507 = __PAIR64__(v439, v438);
            *((_QWORD *)&v507 + 1) = __PAIR64__(3 * *(_DWORD *)(v68[10] + 8), v439 + v438);
            v440 = 6 * *(_DWORD *)(v423 + 12);
            LODWORD(object[0]) = 0;
            HIDWORD(object[0]) = v440;
            LODWORD(v423) = 9 * *(_DWORD *)(v424 + 12);
            object[1] = (void *)__PAIR64__(v423, v440);
            v441 = v423 + v440;
            v442 = v212[5285];
            LODWORD(v423) = 6 * *(_DWORD *)(v212[5284] + 12);
            object[2] = (void *)__PAIR64__(v423, v441);
            v443 = v423 + v441;
            LODWORD(v423) = 6 * *(_DWORD *)(v442 + 12);
            object[3] = (void *)__PAIR64__(v423, v443);
            v444 = v423 + v443;
            v445 = v212[5287];
            LODWORD(v423) = 3 * *(_DWORD *)(v212[5286] + 12);
            object[4] = (void *)__PAIR64__(v423, v444);
            v446 = v423 + v444;
            LODWORD(v423) = *(_DWORD *)(v445 + 12);
            object[5] = (void *)__PAIR64__(v423, v446);
            v447 = v423 + v446;
            v448 = v212[5289];
            LODWORD(v423) = 4 * *(_DWORD *)(v212[5288] + 12);
            object[6] = (void *)__PAIR64__(v423, v447);
            v449 = v423 + v447;
            LODWORD(v423) = 4 * *(_DWORD *)(v448 + 12);
            object[7] = (void *)__PAIR64__(v423, v449);
            v450 = v423 + v449;
            v451 = v212[5291];
            LODWORD(v423) = 3 * *(_DWORD *)(v212[5290] + 12);
            object[8] = (void *)__PAIR64__(v423, v450);
            LODWORD(v451) = 3 * *(_DWORD *)(v451 + 12);
            LODWORD(object[9]) = v423 + v450;
            HIDWORD(object[9]) = v451;
            sub_20F8E0678(v457, (uint64_t *)v81, (unsigned int *)v504, (unsigned int *)object);
            return;
          }
          __src[0].i64[0] = (uint64_t)&v487;
          __src[0].u64[1] = std::chrono::steady_clock::now().__d_.__rep_;
          *(std::chrono::system_clock::time_point *)__src[1].i8 = std::chrono::system_clock::now();
          __src[1].i32[2] = 3;
          __src[2].i64[0] = (uint64_t)"unknown file";
          __src[2].i32[2] = 570;
          __src[3].i64[1] = 0;
          __src[4].i64[0] = 0;
          __src[3].i64[0] = (uint64_t)"unknown function";
          v322 = *(_QWORD *)__src[0].i64[0];
          if (*(char *)(*(_QWORD *)__src[0].i64[0] + 39) < 0)
          {
            v324 = *(const char **)(v322 + 16);
            v323 = *(_QWORD *)(v322 + 24);
          }
          else
          {
            v323 = *(unsigned __int8 *)(*(_QWORD *)__src[0].i64[0] + 39);
            v324 = (const char *)(*(_QWORD *)__src[0].i64[0] + 16);
          }
          v455 = *(_QWORD *)__src[0].i64[0] + 16;
          v456 = *(_QWORD *)__src[0].i64[0];
          v461 = v321;
          v325 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v325 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)v504);
            if (v504[24])
            {
              *(_OWORD *)byte_254A4A4F8 = *(_OWORD *)v504;
              *(_QWORD *)&byte_254A4A4F8[16] = *(_QWORD *)&v504[16];
            }
            else
            {
              byte_254A4A4F8[23] = 14;
              strcpy(byte_254A4A4F8, "com.apple.cv3d");
            }
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
          if (byte_254A4A4F8[23] >= 0)
            v326 = byte_254A4A4F8[23];
          else
            v326 = *(_QWORD *)&byte_254A4A4F8[8];
          if (byte_254A4A4F8[23] >= 0)
            v327 = byte_254A4A4F8;
          else
            v327 = *(const char **)byte_254A4A4F8;
          v459 = v324;
          object[0] = os_log_create(v327, v324);
          v328 = &object[1];
          if (v326 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v326 >= 0x17)
          {
            v329 = (v326 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v326 | 7) != 0x17)
              v329 = v326 | 7;
            v330 = v329 + 1;
            v328 = (void **)operator new(v329 + 1);
            object[3] = (void *)(v330 | 0x8000000000000000);
            object[1] = v328;
            object[2] = (void *)v326;
          }
          else
          {
            HIBYTE(object[3]) = v326;
            if (!v326)
            {
LABEL_388:
              *((_BYTE *)v328 + v326) = 0;
              LOBYTE(object[4]) = 1;
              v331 = &object[5];
              if (v323 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              v212 = v462;
              if (v323 >= 0x17)
              {
                v332 = (v323 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v323 | 7) != 0x17)
                  v332 = v323 | 7;
                v333 = v332 + 1;
                v331 = (void **)operator new(v332 + 1);
                object[7] = (void *)(v333 | 0x8000000000000000);
                object[5] = v331;
                object[6] = (void *)v323;
              }
              else
              {
                HIBYTE(object[7]) = v323;
                if (!v323)
                {
LABEL_396:
                  *((_BYTE *)v331 + v323) = 0;
                  LOBYTE(object[8]) = 1;
                  v334 = object[0];
                  if (SHIBYTE(object[7]) < 0)
                    operator delete(object[5]);
                  if (LOBYTE(object[4]) && SHIBYTE(object[3]) < 0)
                    operator delete(object[1]);
                  if (object[0])
                    os_release(object[0]);
                  if (v461 && *(_QWORD *)(v461 + 24))
                  {
                    v335 = _os_log_pack_size();
                    v336 = (std::__shared_weak_count_vtbl *)operator new(v335, (std::align_val_t)8uLL);
                    v337 = (std::__shared_weak_count *)operator new();
                    v338 = v337;
                    v337->__shared_owners_ = 0;
                    p_shared_owners = (unint64_t *)&v337->__shared_owners_;
                    v337->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                    v337->__shared_weak_owners_ = 0;
                    v337[1].__vftable = v336;
                    do
                      v340 = __ldxr(p_shared_owners);
                    while (__stxr(v340 + 1, p_shared_owners));
                    do
                      v341 = __ldaxr(p_shared_owners);
                    while (__stlxr(v341 - 1, p_shared_owners));
                    if (!v341)
                    {
                      ((void (*)(std::__shared_weak_count *))v337->__on_zero_shared)(v337);
                      std::__shared_weak_count::__release_weak(v338);
                    }
                    *(_WORD *)_os_log_pack_fill() = 0;
                    v342 = (_QWORD *)operator new();
                    v343 = *(unsigned __int8 *)(v456 + 39);
                    v344 = v455;
                    if ((v343 & 0x80u) != 0)
                    {
                      v344 = *(_QWORD *)(v456 + 16);
                      v343 = *(_QWORD *)(v456 + 24);
                    }
                    *v342 = v336;
                    v342[1] = v336;
                    v342[2] = v338;
                    v342[3] = 0;
                    v342[4] = 0;
                    v342[5] = v344;
                    v342[6] = v343;
                    *((_BYTE *)v342 + 56) = 1;
                    object[0] = v342;
                    (*(void (**)(_QWORD, void **))(**(_QWORD **)(v461 + 24) + 40))(*(_QWORD *)(v461 + 24), object);
                    v345 = object[0];
                    object[0] = 0;
                    if (v345)
                    {
                      v346 = (std::__shared_weak_count *)*((_QWORD *)v345 + 4);
                      if (v346)
                      {
                        v347 = (unint64_t *)&v346->__shared_owners_;
                        do
                          v348 = __ldaxr(v347);
                        while (__stlxr(v348 - 1, v347));
                        if (!v348)
                        {
                          ((void (*)(std::__shared_weak_count *))v346->__on_zero_shared)(v346);
                          std::__shared_weak_count::__release_weak(v346);
                        }
                      }
                      v349 = (std::__shared_weak_count *)*((_QWORD *)v345 + 2);
                      if (v349)
                      {
                        v350 = (unint64_t *)&v349->__shared_owners_;
                        do
                          v351 = __ldaxr(v350);
                        while (__stlxr(v351 - 1, v350));
                        if (!v351)
                        {
                          ((void (*)(std::__shared_weak_count *))v349->__on_zero_shared)(v349);
                          std::__shared_weak_count::__release_weak(v349);
                        }
                      }
                      MEMORY[0x212BC6398](v345, 0x10F0C40B62ED6C6);
                    }
                  }
                  else
                  {
                    os_log_type_enabled(v334, OS_LOG_TYPE_INFO);
                    *(_WORD *)v504 = 0;
                    v352 = (void *)_os_log_send_and_compose_impl();
                    if (v352)
                      free(v352);
                  }
                  if (v319)
                  {
                    sub_20E8C003C((uint64_t)__src, "Special case to handle Err. Propagation order of magnitude disparity.");
                    v353 = (uint64_t *)__src[0].i64[0];
                    if (!__src[0].i64[0] || (v354 = __src[3].i64[1]) == 0)
                    {
LABEL_481:
                      v395 = (std::__shared_weak_count *)__src[4].i64[0];
                      if (__src[4].i64[0])
                      {
                        v396 = (unint64_t *)(__src[4].i64[0] + 8);
                        do
                          v397 = __ldaxr(v396);
                        while (__stlxr(v397 - 1, v396));
                        if (!v397)
                        {
                          ((void (*)(std::__shared_weak_count *))v395->__on_zero_shared)(v395);
                          std::__shared_weak_count::__release_weak(v395);
                        }
                      }
                      goto LABEL_486;
                    }
                    v355 = (_QWORD *)(*(_QWORD *)__src[0].i64[0] + 16);
                    if (*(char *)(*(_QWORD *)__src[0].i64[0] + 39) < 0)
                      v355 = (_QWORD *)*v355;
                    v356 = *(__int128 *)((char *)__src + 8);
                    v357 = __src[1].i32[2];
                    v358 = __src[2].i64[0];
                    v359 = __src[2].i32[2];
                    v360 = __src[3].i64[0];
                    v361 = (std::__shared_weak_count *)__src[4].i64[0];
                    if (__src[4].i64[0])
                    {
                      v362 = (unint64_t *)(__src[4].i64[0] + 8);
                      do
                        v363 = __ldxr(v362);
                      while (__stxr(v363 + 1, v362));
                    }
                    *(_QWORD *)v504 = v355;
                    *(_OWORD *)&v504[8] = v356;
                    *(_DWORD *)&v504[24] = v357;
                    v505.i64[0] = v358;
                    v505.i32[2] = v359;
                    *(_QWORD *)&v506 = v360;
                    *((_QWORD *)&v506 + 1) = v354;
                    *(_QWORD *)&v507 = v361;
                    if (v361)
                    {
                      v364 = (unint64_t *)&v361->__shared_owners_;
                      do
                        v365 = __ldxr(v364);
                      while (__stxr(v365 + 1, v364));
                    }
                    v366 = v361;
                    if (v357 >= **(_DWORD **)(*v353 + 56))
                    {
                      sub_20E8C3FC4(*v353, (uint64_t)v504);
                      v366 = (std::__shared_weak_count *)v507;
                    }
                    if (v366)
                    {
                      v367 = (unint64_t *)&v366->__shared_owners_;
                      do
                        v368 = __ldaxr(v367);
                      while (__stlxr(v368 - 1, v367));
                      if (!v368)
                      {
                        ((void (*)(std::__shared_weak_count *))v366->__on_zero_shared)(v366);
                        std::__shared_weak_count::__release_weak(v366);
                      }
                    }
                    if (v361)
                    {
                      v369 = (unint64_t *)&v361->__shared_owners_;
                      do
                        v370 = __ldaxr(v369);
                      while (__stlxr(v370 - 1, v369));
                      if (!v370)
                      {
                        ((void (*)(std::__shared_weak_count *))v361->__on_zero_shared)(v361);
                        std::__shared_weak_count::__release_weak(v361);
                      }
                    }
                    v371 = (std::__shared_weak_count *)__src[4].i64[0];
                    __src[3].i64[1] = 0;
                    __src[4].i64[0] = 0;
                    if (v371)
                    {
                      v372 = (unint64_t *)&v371->__shared_owners_;
                      do
                        v373 = __ldaxr(v372);
                      while (__stlxr(v373 - 1, v372));
                      if (!v373)
                      {
                        ((void (*)(std::__shared_weak_count *))v371->__on_zero_shared)(v371);
                        std::__shared_weak_count::__release_weak(v371);
                      }
                    }
                  }
                  v374 = (uint64_t *)__src[0].i64[0];
                  if (__src[0].i64[0])
                  {
                    v375 = __src[3].i64[1];
                    if (__src[3].i64[1])
                    {
                      v376 = (_QWORD *)(*(_QWORD *)__src[0].i64[0] + 16);
                      if (*(char *)(*(_QWORD *)__src[0].i64[0] + 39) < 0)
                        v376 = (_QWORD *)*v376;
                      v377 = *(__int128 *)((char *)__src + 8);
                      v378 = __src[1].i32[2];
                      v379 = __src[2].i64[0];
                      v380 = __src[2].i32[2];
                      v381 = __src[3].i64[0];
                      v382 = (std::__shared_weak_count *)__src[4].i64[0];
                      if (__src[4].i64[0])
                      {
                        v383 = (unint64_t *)(__src[4].i64[0] + 8);
                        do
                          v384 = __ldxr(v383);
                        while (__stxr(v384 + 1, v383));
                      }
                      *(_QWORD *)v504 = v376;
                      *(_OWORD *)&v504[8] = v377;
                      *(_DWORD *)&v504[24] = v378;
                      v505.i64[0] = v379;
                      v505.i32[2] = v380;
                      *(_QWORD *)&v506 = v381;
                      *((_QWORD *)&v506 + 1) = v375;
                      *(_QWORD *)&v507 = v382;
                      if (v382)
                      {
                        v385 = (unint64_t *)&v382->__shared_owners_;
                        do
                          v386 = __ldxr(v385);
                        while (__stxr(v386 + 1, v385));
                      }
                      v387 = v382;
                      if (v378 >= **(_DWORD **)(*v374 + 56))
                      {
                        sub_20E8C3FC4(*v374, (uint64_t)v504);
                        v387 = (std::__shared_weak_count *)v507;
                      }
                      if (v387)
                      {
                        v388 = (unint64_t *)&v387->__shared_owners_;
                        do
                          v389 = __ldaxr(v388);
                        while (__stlxr(v389 - 1, v388));
                        if (!v389)
                        {
                          ((void (*)(std::__shared_weak_count *))v387->__on_zero_shared)(v387);
                          std::__shared_weak_count::__release_weak(v387);
                        }
                      }
                      if (v382)
                      {
                        v390 = (unint64_t *)&v382->__shared_owners_;
                        do
                          v391 = __ldaxr(v390);
                        while (__stlxr(v391 - 1, v390));
                        if (!v391)
                        {
                          ((void (*)(std::__shared_weak_count *))v382->__on_zero_shared)(v382);
                          std::__shared_weak_count::__release_weak(v382);
                        }
                      }
                      v392 = (std::__shared_weak_count *)__src[4].i64[0];
                      __src[3].i64[1] = 0;
                      __src[4].i64[0] = 0;
                      if (v392)
                      {
                        v393 = (unint64_t *)&v392->__shared_owners_;
                        do
                          v394 = __ldaxr(v393);
                        while (__stlxr(v394 - 1, v393));
                        if (!v394)
                        {
                          ((void (*)(std::__shared_weak_count *))v392->__on_zero_shared)(v392);
                          std::__shared_weak_count::__release_weak(v392);
                        }
                      }
                    }
                  }
                  goto LABEL_481;
                }
              }
              memmove(v331, v459, v323);
              goto LABEL_396;
            }
          }
          memmove(v328, v327, v326);
          goto LABEL_388;
        }
LABEL_225:
        MEMORY[0x212BC6368](v95, 0x1000C8000313F17);
        goto LABEL_226;
      }
    }
    v73 = atomic_load((unsigned __int8 *)&qword_254A6B820);
    if ((v73 & 1) == 0 && __cxa_guard_acquire(&qword_254A6B820))
    {
      v452 = atomic_load((unsigned __int8 *)&qword_254A6DDE0);
      if ((v452 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDE0))
      {
        sub_20E8BFCE4(&qword_254A6DDD8);
        __cxa_guard_release(&qword_254A6DDE0);
      }
      object[0] = (void *)qword_254A6DDD8;
      v504[23] = 8;
      strcpy(v504, "cv3d.vio");
      sub_20E8C4068((uint64_t **)object, (uint64_t)v504, &qword_254A6B818);
      if ((v504[23] & 0x80000000) != 0)
        operator delete(*(void **)v504);
      __cxa_guard_release(&qword_254A6B820);
    }
    __src[0].i64[0] = qword_254A6B818;
    if (**(int **)(qword_254A6B818 + 56) > 2)
      return;
    v74 = *(unsigned __int8 *)(qword_254A6B818 + 72);
    v75 = sub_20E8C31DC(qword_254A6B818, "OSLogSurrogateAppender", 1, 0);
    v76 = v75;
    if (!v74 && v75 == 0)
      return;
    v476[0].i64[0] = (uint64_t)__src;
    v476[0].u64[1] = std::chrono::steady_clock::now().__d_.__rep_;
    *(std::chrono::system_clock::time_point *)v476[1].i8 = std::chrono::system_clock::now();
    v476[1].i32[2] = 2;
    v476[2].i64[0] = (uint64_t)"unknown file";
    v476[2].i32[2] = 476;
    *(_QWORD *)&v477 = 0;
    v476[3].i64[0] = (uint64_t)"unknown function";
    v476[3].i64[1] = 0;
    v78 = *(_QWORD *)v476[0].i64[0];
    v79 = (const char *)(*(_QWORD *)v476[0].i64[0] + 16);
    v473 = v79;
    if (*(char *)(*(_QWORD *)v476[0].i64[0] + 39) < 0)
    {
      v79 = *(const char **)(v78 + 16);
      v80 = *(_QWORD *)(v78 + 24);
    }
    else
    {
      v80 = *(unsigned __int8 *)(*(_QWORD *)v476[0].i64[0] + 39);
    }
    v105 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v105 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)v504);
      if (v504[24])
      {
        *(_OWORD *)byte_254A4A4F8 = *(_OWORD *)v504;
        *(_QWORD *)&byte_254A4A4F8[16] = *(_QWORD *)&v504[16];
      }
      else
      {
        byte_254A4A4F8[23] = 14;
        strcpy(byte_254A4A4F8, "com.apple.cv3d");
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v106 = byte_254A4A4F8;
    else
      v106 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v107 = byte_254A4A4F8[23];
    else
      v107 = *(_QWORD *)&byte_254A4A4F8[8];
    object[0] = os_log_create(v106, v79);
    v108 = &object[1];
    if (v107 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v107 >= 0x17)
    {
      v109 = (v107 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v107 | 7) != 0x17)
        v109 = v107 | 7;
      v110 = v109 + 1;
      v108 = (void **)operator new(v109 + 1);
      object[3] = (void *)(v110 | 0x8000000000000000);
      object[1] = v108;
      object[2] = (void *)v107;
    }
    else
    {
      HIBYTE(object[3]) = v107;
      if (!v107)
      {
LABEL_124:
        *((_BYTE *)v108 + v107) = 0;
        LOBYTE(object[4]) = 1;
        v111 = &object[5];
        if (v80 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v80 >= 0x17)
        {
          v112 = (v80 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v80 | 7) != 0x17)
            v112 = v80 | 7;
          v113 = v112 + 1;
          v111 = (void **)operator new(v112 + 1);
          object[7] = (void *)(v113 | 0x8000000000000000);
          object[5] = v111;
          object[6] = (void *)v80;
        }
        else
        {
          HIBYTE(object[7]) = v80;
          if (!v80)
          {
LABEL_132:
            *((_BYTE *)v111 + v80) = 0;
            LOBYTE(object[8]) = 1;
            v114 = object[0];
            if (SHIBYTE(object[7]) < 0)
              operator delete(object[5]);
            if (LOBYTE(object[4]) && SHIBYTE(object[3]) < 0)
              operator delete(object[1]);
            if (object[0])
              os_release(object[0]);
            if (v76 && *(_QWORD *)(v76 + 24))
            {
              v115 = _os_log_pack_size();
              v116 = (std::__shared_weak_count_vtbl *)operator new(v115, (std::align_val_t)8uLL);
              v117 = (std::__shared_weak_count *)operator new();
              v118 = v117;
              v117->__shared_owners_ = 0;
              v119 = (unint64_t *)&v117->__shared_owners_;
              v117->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v117->__shared_weak_owners_ = 0;
              v117[1].__vftable = v116;
              do
                v120 = __ldxr(v119);
              while (__stxr(v120 + 1, v119));
              do
                v121 = __ldaxr(v119);
              while (__stlxr(v121 - 1, v119));
              if (!v121)
              {
                ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                std::__shared_weak_count::__release_weak(v118);
              }
              *(_WORD *)_os_log_pack_fill() = 0;
              v122 = (_QWORD *)operator new();
              v123 = *(unsigned __int8 *)(v78 + 39);
              v124 = v473;
              if ((v123 & 0x80u) != 0)
              {
                v124 = *(const char **)(v78 + 16);
                v123 = *(_QWORD *)(v78 + 24);
              }
              *v122 = v116;
              v122[1] = v116;
              v122[2] = v118;
              v122[3] = 0;
              v122[4] = 0;
              v122[5] = v124;
              v122[6] = v123;
              *((_BYTE *)v122 + 56) = 2;
              object[0] = v122;
              (*(void (**)(_QWORD, void **))(**(_QWORD **)(v76 + 24) + 40))(*(_QWORD *)(v76 + 24), object);
              v125 = object[0];
              object[0] = 0;
              if (v125)
              {
                v126 = (std::__shared_weak_count *)*((_QWORD *)v125 + 4);
                if (v126)
                {
                  v127 = (unint64_t *)&v126->__shared_owners_;
                  do
                    v128 = __ldaxr(v127);
                  while (__stlxr(v128 - 1, v127));
                  if (!v128)
                  {
                    ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
                    std::__shared_weak_count::__release_weak(v126);
                  }
                }
                v129 = (std::__shared_weak_count *)*((_QWORD *)v125 + 2);
                if (v129)
                {
                  v130 = (unint64_t *)&v129->__shared_owners_;
                  do
                    v131 = __ldaxr(v130);
                  while (__stlxr(v131 - 1, v130));
                  if (!v131)
                  {
                    ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
                    std::__shared_weak_count::__release_weak(v129);
                  }
                }
                MEMORY[0x212BC6398](v125, 0x10F0C40B62ED6C6);
              }
            }
            else
            {
              os_log_type_enabled(v114, OS_LOG_TYPE_DEBUG);
              *(_WORD *)v504 = 0;
              v132 = (void *)_os_log_send_and_compose_impl();
              if (v132)
                free(v132);
            }
            if (v74)
            {
              sub_20E8C003C((uint64_t)v476, "Limit the amount of noise used in error propagation; inverse noise should be GT 0.");
              v133 = (uint64_t *)v476[0].i64[0];
              if (!v476[0].i64[0] || (v134 = v476[3].i64[1]) == 0)
              {
LABEL_217:
                v175 = (std::__shared_weak_count *)v477;
                if (!(_QWORD)v477)
                  return;
                v176 = (unint64_t *)(v477 + 8);
                do
                  v177 = __ldaxr(v176);
                while (__stlxr(v177 - 1, v176));
LABEL_220:
                if (!v177)
                {
                  ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
                  std::__shared_weak_count::__release_weak(v175);
                }
                return;
              }
              v135 = (_QWORD *)(*(_QWORD *)v476[0].i64[0] + 16);
              if (*(char *)(*(_QWORD *)v476[0].i64[0] + 39) < 0)
                v135 = (_QWORD *)*v135;
              v136 = *(__int128 *)((char *)v476 + 8);
              v137 = v476[1].i32[2];
              v138 = v476[2].i64[0];
              v139 = v476[2].i32[2];
              v140 = v476[3].i64[0];
              v141 = (std::__shared_weak_count *)v477;
              if ((_QWORD)v477)
              {
                v142 = (unint64_t *)(v477 + 8);
                do
                  v143 = __ldxr(v142);
                while (__stxr(v143 + 1, v142));
              }
              *(_QWORD *)v504 = v135;
              *(_OWORD *)&v504[8] = v136;
              *(_DWORD *)&v504[24] = v137;
              v505.i64[0] = v138;
              v505.i32[2] = v139;
              *(_QWORD *)&v506 = v140;
              *((_QWORD *)&v506 + 1) = v134;
              *(_QWORD *)&v507 = v141;
              if (v141)
              {
                v144 = (unint64_t *)&v141->__shared_owners_;
                do
                  v145 = __ldxr(v144);
                while (__stxr(v145 + 1, v144));
              }
              v146 = v141;
              if (v137 >= **(_DWORD **)(*v133 + 56))
              {
                sub_20E8C3FC4(*v133, (uint64_t)v504);
                v146 = (std::__shared_weak_count *)v507;
              }
              if (v146)
              {
                v147 = (unint64_t *)&v146->__shared_owners_;
                do
                  v148 = __ldaxr(v147);
                while (__stlxr(v148 - 1, v147));
                if (!v148)
                {
                  ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
                  std::__shared_weak_count::__release_weak(v146);
                }
              }
              if (v141)
              {
                v149 = (unint64_t *)&v141->__shared_owners_;
                do
                  v150 = __ldaxr(v149);
                while (__stlxr(v150 - 1, v149));
                if (!v150)
                {
                  ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
                  std::__shared_weak_count::__release_weak(v141);
                }
              }
              v151 = (std::__shared_weak_count *)v477;
              *(_QWORD *)&v477 = 0;
              v476[3].i64[1] = 0;
              if (v151)
              {
                v152 = (unint64_t *)&v151->__shared_owners_;
                do
                  v153 = __ldaxr(v152);
                while (__stlxr(v153 - 1, v152));
                if (!v153)
                {
                  ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
                  std::__shared_weak_count::__release_weak(v151);
                }
              }
            }
            v154 = (uint64_t *)v476[0].i64[0];
            if (v476[0].i64[0])
            {
              v155 = v476[3].i64[1];
              if (v476[3].i64[1])
              {
                v156 = (_QWORD *)(*(_QWORD *)v476[0].i64[0] + 16);
                if (*(char *)(*(_QWORD *)v476[0].i64[0] + 39) < 0)
                  v156 = (_QWORD *)*v156;
                v157 = *(__int128 *)((char *)v476 + 8);
                v158 = v476[1].i32[2];
                v159 = v476[2].i64[0];
                v160 = v476[2].i32[2];
                v161 = v476[3].i64[0];
                v162 = (std::__shared_weak_count *)v477;
                if ((_QWORD)v477)
                {
                  v163 = (unint64_t *)(v477 + 8);
                  do
                    v164 = __ldxr(v163);
                  while (__stxr(v164 + 1, v163));
                }
                *(_QWORD *)v504 = v156;
                *(_OWORD *)&v504[8] = v157;
                *(_DWORD *)&v504[24] = v158;
                v505.i64[0] = v159;
                v505.i32[2] = v160;
                *(_QWORD *)&v506 = v161;
                *((_QWORD *)&v506 + 1) = v155;
                *(_QWORD *)&v507 = v162;
                if (v162)
                {
                  v165 = (unint64_t *)&v162->__shared_owners_;
                  do
                    v166 = __ldxr(v165);
                  while (__stxr(v166 + 1, v165));
                }
                v167 = v162;
                if (v158 >= **(_DWORD **)(*v154 + 56))
                {
                  sub_20E8C3FC4(*v154, (uint64_t)v504);
                  v167 = (std::__shared_weak_count *)v507;
                }
                if (v167)
                {
                  v168 = (unint64_t *)&v167->__shared_owners_;
                  do
                    v169 = __ldaxr(v168);
                  while (__stlxr(v169 - 1, v168));
                  if (!v169)
                  {
                    ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
                    std::__shared_weak_count::__release_weak(v167);
                  }
                }
                if (v162)
                {
                  v170 = (unint64_t *)&v162->__shared_owners_;
                  do
                    v171 = __ldaxr(v170);
                  while (__stlxr(v171 - 1, v170));
                  if (!v171)
                  {
                    ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
                    std::__shared_weak_count::__release_weak(v162);
                  }
                }
                v172 = (std::__shared_weak_count *)v477;
                *(_QWORD *)&v477 = 0;
                v476[3].i64[1] = 0;
                if (v172)
                {
                  v173 = (unint64_t *)&v172->__shared_owners_;
                  do
                    v174 = __ldaxr(v173);
                  while (__stlxr(v174 - 1, v173));
                  if (!v174)
                  {
                    ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
                    std::__shared_weak_count::__release_weak(v172);
                  }
                }
              }
            }
            goto LABEL_217;
          }
        }
        memmove(v111, v79, v80);
        goto LABEL_132;
      }
    }
    memmove(v108, v106, v107);
    goto LABEL_124;
  }
  v26 = *(_QWORD **)(v9 + 6280);
  v27 = *(_QWORD **)(v9 + 6288);
  if (v27 == v26)
    goto LABEL_37;
  v28 = 0xAF8AF8AF8AF8AF8BLL * (v27 - v26);
  do
  {
    v29 = v28 >> 1;
    v30 = &v26[35 * (v28 >> 1)];
    v31 = *v30;
    v32 = v30 + 35;
    v28 += ~(v28 >> 1);
    if (v31 < v8)
      v26 = v32;
    else
      v28 = v29;
  }
  while (v28);
  if (v27 == v26 || *v26 != v8)
  {
LABEL_37:
    v41 = (char *)operator new(0x58uLL);
    v43 = (std::__shared_weak_count *)v41;
    *((_QWORD *)v41 + 1) = 0;
    v44 = (unint64_t *)(v41 + 8);
    *((_QWORD *)v41 + 2) = 0;
    *(_QWORD *)v41 = &off_24CA016C8;
    *((_QWORD *)v41 + 3) = &off_24CA01718;
    v41[32] = 1;
    if (*v470 < 1.0e-15)
      goto LABEL_43;
    *((double *)v41 + 5) = sqrt(*v470);
    v45 = v470[1];
    if (v45 < 1.0e-15)
      goto LABEL_43;
    *((double *)v41 + 6) = sqrt(v45);
    v46 = v470[2];
    if (v46 < 1.0e-15)
      goto LABEL_43;
    *((double *)v41 + 7) = sqrt(v46);
    v47 = v470[3];
    if (v47 >= 1.0e-15
      && (*((double *)v41 + 8) = sqrt(v47), v48 = v470[4], v48 >= 1.0e-15)
      && (*((double *)v41 + 9) = sqrt(v48), v49 = v470[5], v49 >= 1.0e-15))
    {
      *((double *)v41 + 10) = sqrt(v49);
      v41[32] = 1;
    }
    else
    {
LABEL_43:
      v41[32] = 0;
      v50 = vdupq_n_s64(0x7FF8000000000000uLL);
      *(int64x2_t *)(v41 + 40) = v50;
      *(int64x2_t *)(v41 + 56) = v50;
      *(int64x2_t *)(v41 + 72) = v50;
    }
    *(_QWORD *)v504 = v8;
    v51 = *(_OWORD *)(v24 + 64);
    v505 = *(int8x16_t *)(v24 + 48);
    v506 = v51;
    v507 = *(_OWORD *)(v24 + 80);
    v508 = *(_QWORD *)(v24 + 96);
    *(_OWORD *)&v504[16] = *(_OWORD *)(v24 + 32);
    v509 = *(_OWORD *)(v24 + 104);
    v510 = *(_QWORD *)(v24 + 120);
    v511 = v41 + 24;
    v512 = (std::__shared_weak_count *)v41;
    do
      v52 = __ldxr(v44);
    while (__stxr(v52 + 1, v44));
    LODWORD(object[0]) = v8;
    if ((sub_20FB8FE18(v9 + 5168, (__int128 *)v504, (__int128 *)object, 0, 0, v42) & 1) != 0)
    {
      *(_BYTE *)(v9 + 7828) = 0;
      *(_DWORD *)(v9 + 7824) = 0;
    }
    v53 = v512;
    if (v512)
    {
      v54 = (unint64_t *)&v512->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    do
      v56 = __ldaxr(v44);
    while (__stlxr(v56 - 1, v44));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
    goto LABEL_56;
  }
  v33 = atomic_load((unsigned __int8 *)&qword_254A6B820);
  if ((v33 & 1) == 0 && __cxa_guard_acquire(&qword_254A6B820))
  {
    v453 = atomic_load((unsigned __int8 *)&qword_254A6DDE0);
    if ((v453 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDE0))
    {
      sub_20E8BFCE4(&qword_254A6DDD8);
      __cxa_guard_release(&qword_254A6DDE0);
    }
    object[0] = (void *)qword_254A6DDD8;
    v504[23] = 8;
    strcpy(v504, "cv3d.vio");
    sub_20E8C4068((uint64_t **)object, (uint64_t)v504, &qword_254A6B818);
    if ((v504[23] & 0x80000000) != 0)
      operator delete(*(void **)v504);
    __cxa_guard_release(&qword_254A6B820);
  }
  __src[0].i64[0] = qword_254A6B818;
  if (**(int **)(qword_254A6B818 + 56) <= 2)
  {
    v34 = *(unsigned __int8 *)(qword_254A6B818 + 72);
    v35 = sub_20E8C31DC(qword_254A6B818, "OSLogSurrogateAppender", 1, 0);
    v36 = v35;
    if (v34 || v35 != 0)
    {
      v476[0].i64[0] = (uint64_t)__src;
      v476[0].u64[1] = std::chrono::steady_clock::now().__d_.__rep_;
      *(std::chrono::system_clock::time_point *)v476[1].i8 = std::chrono::system_clock::now();
      v476[1].i32[2] = 2;
      v476[2].i64[0] = (uint64_t)"unknown file";
      v476[2].i32[2] = 439;
      *(_QWORD *)&v477 = 0;
      v476[3].i64[0] = (uint64_t)"unknown function";
      v476[3].i64[1] = 0;
      v38 = *(_QWORD *)v476[0].i64[0];
      v39 = (const char *)(*(_QWORD *)v476[0].i64[0] + 16);
      v471 = v39;
      if (*(char *)(*(_QWORD *)v476[0].i64[0] + 39) < 0)
      {
        v39 = *(const char **)(v38 + 16);
        v40 = *(_QWORD *)(v38 + 24);
      }
      else
      {
        v40 = *(unsigned __int8 *)(*(_QWORD *)v476[0].i64[0] + 39);
      }
      v236 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v236 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)v504);
        if (v504[24])
        {
          *(_OWORD *)byte_254A4A4F8 = *(_OWORD *)v504;
          *(_QWORD *)&byte_254A4A4F8[16] = *(_QWORD *)&v504[16];
        }
        else
        {
          byte_254A4A4F8[23] = 14;
          strcpy(byte_254A4A4F8, "com.apple.cv3d");
        }
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v237 = byte_254A4A4F8;
      else
        v237 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v238 = byte_254A4A4F8[23];
      else
        v238 = *(_QWORD *)&byte_254A4A4F8[8];
      object[0] = os_log_create(v237, v39);
      v239 = &object[1];
      if (v238 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v238 >= 0x17)
      {
        v240 = (v238 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v238 | 7) != 0x17)
          v240 = v238 | 7;
        v241 = v240 + 1;
        v239 = (void **)operator new(v240 + 1);
        object[3] = (void *)(v241 | 0x8000000000000000);
        object[1] = v239;
        object[2] = (void *)v238;
      }
      else
      {
        HIBYTE(object[3]) = v238;
        if (!v238)
        {
LABEL_259:
          *((_BYTE *)v239 + v238) = 0;
          LOBYTE(object[4]) = 1;
          v242 = &object[5];
          if (v40 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v40 >= 0x17)
          {
            v243 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v40 | 7) != 0x17)
              v243 = v40 | 7;
            v244 = v243 + 1;
            v242 = (void **)operator new(v243 + 1);
            object[7] = (void *)(v244 | 0x8000000000000000);
            object[5] = v242;
            object[6] = (void *)v40;
          }
          else
          {
            HIBYTE(object[7]) = v40;
            if (!v40)
            {
LABEL_267:
              *((_BYTE *)v242 + v40) = 0;
              LOBYTE(object[8]) = 1;
              v245 = object[0];
              if (SHIBYTE(object[7]) < 0)
                operator delete(object[5]);
              if (LOBYTE(object[4]) && SHIBYTE(object[3]) < 0)
                operator delete(object[1]);
              if (object[0])
                os_release(object[0]);
              if (v36 && *(_QWORD *)(v36 + 24))
              {
                v246 = _os_log_pack_size();
                v247 = (std::__shared_weak_count_vtbl *)operator new(v246, (std::align_val_t)8uLL);
                v248 = (std::__shared_weak_count *)operator new();
                v249 = v248;
                v248->__shared_owners_ = 0;
                v250 = (unint64_t *)&v248->__shared_owners_;
                v248->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v248->__shared_weak_owners_ = 0;
                v248[1].__vftable = v247;
                do
                  v251 = __ldxr(v250);
                while (__stxr(v251 + 1, v250));
                do
                  v252 = __ldaxr(v250);
                while (__stlxr(v252 - 1, v250));
                if (!v252)
                {
                  ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
                  std::__shared_weak_count::__release_weak(v249);
                }
                *(_WORD *)_os_log_pack_fill() = 0;
                v253 = (_QWORD *)operator new();
                v254 = *(unsigned __int8 *)(v38 + 39);
                v255 = v471;
                if ((v254 & 0x80u) != 0)
                {
                  v255 = *(const char **)(v38 + 16);
                  v254 = *(_QWORD *)(v38 + 24);
                }
                *v253 = v247;
                v253[1] = v247;
                v253[2] = v249;
                v253[3] = 0;
                v253[4] = 0;
                v253[5] = v255;
                v253[6] = v254;
                *((_BYTE *)v253 + 56) = 2;
                object[0] = v253;
                (*(void (**)(_QWORD, void **))(**(_QWORD **)(v36 + 24) + 40))(*(_QWORD *)(v36 + 24), object);
                v256 = object[0];
                object[0] = 0;
                if (v256)
                {
                  v257 = (std::__shared_weak_count *)*((_QWORD *)v256 + 4);
                  if (v257)
                  {
                    v258 = (unint64_t *)&v257->__shared_owners_;
                    do
                      v259 = __ldaxr(v258);
                    while (__stlxr(v259 - 1, v258));
                    if (!v259)
                    {
                      ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
                      std::__shared_weak_count::__release_weak(v257);
                    }
                  }
                  v260 = (std::__shared_weak_count *)*((_QWORD *)v256 + 2);
                  if (v260)
                  {
                    v261 = (unint64_t *)&v260->__shared_owners_;
                    do
                      v262 = __ldaxr(v261);
                    while (__stlxr(v262 - 1, v261));
                    if (!v262)
                    {
                      ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
                      std::__shared_weak_count::__release_weak(v260);
                    }
                  }
                  MEMORY[0x212BC6398](v256, 0x10F0C40B62ED6C6);
                }
              }
              else
              {
                os_log_type_enabled(v245, OS_LOG_TYPE_DEBUG);
                *(_WORD *)v504 = 0;
                v263 = (void *)_os_log_send_and_compose_impl();
                if (v263)
                  free(v263);
              }
              if (v34)
              {
                sub_20E8C003C((uint64_t)v476, "Attempting to add existing extrinsics calib. prior factor");
                v264 = (uint64_t *)v476[0].i64[0];
                if (!v476[0].i64[0] || (v265 = v476[3].i64[1]) == 0)
                {
LABEL_352:
                  v175 = (std::__shared_weak_count *)v477;
                  if (!(_QWORD)v477)
                    return;
                  v306 = (unint64_t *)(v477 + 8);
                  do
                    v177 = __ldaxr(v306);
                  while (__stlxr(v177 - 1, v306));
                  goto LABEL_220;
                }
                v266 = (_QWORD *)(*(_QWORD *)v476[0].i64[0] + 16);
                if (*(char *)(*(_QWORD *)v476[0].i64[0] + 39) < 0)
                  v266 = (_QWORD *)*v266;
                v267 = *(__int128 *)((char *)v476 + 8);
                v268 = v476[1].i32[2];
                v269 = v476[2].i64[0];
                v270 = v476[2].i32[2];
                v271 = v476[3].i64[0];
                v272 = (std::__shared_weak_count *)v477;
                if ((_QWORD)v477)
                {
                  v273 = (unint64_t *)(v477 + 8);
                  do
                    v274 = __ldxr(v273);
                  while (__stxr(v274 + 1, v273));
                }
                *(_QWORD *)v504 = v266;
                *(_OWORD *)&v504[8] = v267;
                *(_DWORD *)&v504[24] = v268;
                v505.i64[0] = v269;
                v505.i32[2] = v270;
                *(_QWORD *)&v506 = v271;
                *((_QWORD *)&v506 + 1) = v265;
                *(_QWORD *)&v507 = v272;
                if (v272)
                {
                  v275 = (unint64_t *)&v272->__shared_owners_;
                  do
                    v276 = __ldxr(v275);
                  while (__stxr(v276 + 1, v275));
                }
                v277 = v272;
                if (v268 >= **(_DWORD **)(*v264 + 56))
                {
                  sub_20E8C3FC4(*v264, (uint64_t)v504);
                  v277 = (std::__shared_weak_count *)v507;
                }
                if (v277)
                {
                  v278 = (unint64_t *)&v277->__shared_owners_;
                  do
                    v279 = __ldaxr(v278);
                  while (__stlxr(v279 - 1, v278));
                  if (!v279)
                  {
                    ((void (*)(std::__shared_weak_count *))v277->__on_zero_shared)(v277);
                    std::__shared_weak_count::__release_weak(v277);
                  }
                }
                if (v272)
                {
                  v280 = (unint64_t *)&v272->__shared_owners_;
                  do
                    v281 = __ldaxr(v280);
                  while (__stlxr(v281 - 1, v280));
                  if (!v281)
                  {
                    ((void (*)(std::__shared_weak_count *))v272->__on_zero_shared)(v272);
                    std::__shared_weak_count::__release_weak(v272);
                  }
                }
                v282 = (std::__shared_weak_count *)v477;
                *(_QWORD *)&v477 = 0;
                v476[3].i64[1] = 0;
                if (v282)
                {
                  v283 = (unint64_t *)&v282->__shared_owners_;
                  do
                    v284 = __ldaxr(v283);
                  while (__stlxr(v284 - 1, v283));
                  if (!v284)
                  {
                    ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
                    std::__shared_weak_count::__release_weak(v282);
                  }
                }
              }
              v285 = (uint64_t *)v476[0].i64[0];
              if (v476[0].i64[0])
              {
                v286 = v476[3].i64[1];
                if (v476[3].i64[1])
                {
                  v287 = (_QWORD *)(*(_QWORD *)v476[0].i64[0] + 16);
                  if (*(char *)(*(_QWORD *)v476[0].i64[0] + 39) < 0)
                    v287 = (_QWORD *)*v287;
                  v288 = *(__int128 *)((char *)v476 + 8);
                  v289 = v476[1].i32[2];
                  v290 = v476[2].i64[0];
                  v291 = v476[2].i32[2];
                  v292 = v476[3].i64[0];
                  v293 = (std::__shared_weak_count *)v477;
                  if ((_QWORD)v477)
                  {
                    v294 = (unint64_t *)(v477 + 8);
                    do
                      v295 = __ldxr(v294);
                    while (__stxr(v295 + 1, v294));
                  }
                  *(_QWORD *)v504 = v287;
                  *(_OWORD *)&v504[8] = v288;
                  *(_DWORD *)&v504[24] = v289;
                  v505.i64[0] = v290;
                  v505.i32[2] = v291;
                  *(_QWORD *)&v506 = v292;
                  *((_QWORD *)&v506 + 1) = v286;
                  *(_QWORD *)&v507 = v293;
                  if (v293)
                  {
                    v296 = (unint64_t *)&v293->__shared_owners_;
                    do
                      v297 = __ldxr(v296);
                    while (__stxr(v297 + 1, v296));
                  }
                  v298 = v293;
                  if (v289 >= **(_DWORD **)(*v285 + 56))
                  {
                    sub_20E8C3FC4(*v285, (uint64_t)v504);
                    v298 = (std::__shared_weak_count *)v507;
                  }
                  if (v298)
                  {
                    v299 = (unint64_t *)&v298->__shared_owners_;
                    do
                      v300 = __ldaxr(v299);
                    while (__stlxr(v300 - 1, v299));
                    if (!v300)
                    {
                      ((void (*)(std::__shared_weak_count *))v298->__on_zero_shared)(v298);
                      std::__shared_weak_count::__release_weak(v298);
                    }
                  }
                  if (v293)
                  {
                    v301 = (unint64_t *)&v293->__shared_owners_;
                    do
                      v302 = __ldaxr(v301);
                    while (__stlxr(v302 - 1, v301));
                    if (!v302)
                    {
                      ((void (*)(std::__shared_weak_count *))v293->__on_zero_shared)(v293);
                      std::__shared_weak_count::__release_weak(v293);
                    }
                  }
                  v303 = (std::__shared_weak_count *)v477;
                  *(_QWORD *)&v477 = 0;
                  v476[3].i64[1] = 0;
                  if (v303)
                  {
                    v304 = (unint64_t *)&v303->__shared_owners_;
                    do
                      v305 = __ldaxr(v304);
                    while (__stlxr(v305 - 1, v304));
                    if (!v305)
                    {
                      ((void (*)(std::__shared_weak_count *))v303->__on_zero_shared)(v303);
                      std::__shared_weak_count::__release_weak(v303);
                    }
                  }
                }
              }
              goto LABEL_352;
            }
          }
          memmove(v242, v39, v40);
          goto LABEL_267;
        }
      }
      memmove(v239, v237, v238);
      goto LABEL_259;
    }
  }
}

void sub_20FB8F0A0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A6DDE0);
  __cxa_guard_abort(&qword_254A6B820);
  _Unwind_Resume(a1);
}

void sub_20FB8F128(_Unwind_Exception *a1, int a2)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  if (a2)
  {
    v4 = (std::__shared_weak_count *)STACK[0x590];
    if (STACK[0x590])
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    if (v2)
    {
      v7 = (unint64_t *)&v2->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        sub_20E860DA4(a1);
      }
    }
    sub_20E860DA4(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20FB8F1A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t *a33,__int128 a34,int a35,unint64_t a36,int a37,unint64_t a38,unint64_t a39,std::__shared_weak_count *a40)
{
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;

  v41 = (std::__shared_weak_count *)STACK[0x590];
  if (STACK[0x590])
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldaxr(p_shared_owners);
    while (__stlxr(v43 - 1, p_shared_owners));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v40)
  {
    v44 = (unint64_t *)&v40->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  if (a33 && a39)
  {
    v46 = (_QWORD *)(*a33 + 16);
    if (*(char *)(*a33 + 39) < 0)
      v46 = (_QWORD *)*v46;
    if (a40)
    {
      v47 = (unint64_t *)&a40->__shared_owners_;
      do
        v48 = __ldxr(v47);
      while (__stxr(v48 + 1, v47));
    }
    STACK[0x550] = (unint64_t)v46;
    *(_OWORD *)&STACK[0x558] = a34;
    LODWORD(STACK[0x568]) = a35;
    STACK[0x570] = a36;
    LODWORD(STACK[0x578]) = a37;
    STACK[0x580] = a38;
    STACK[0x588] = a39;
    STACK[0x590] = (unint64_t)a40;
    if (a40)
    {
      v49 = (unint64_t *)&a40->__shared_owners_;
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
    }
    v51 = a40;
    if (a35 >= **(_DWORD **)(*a33 + 56))
    {
      sub_20E8C3FC4(*a33, (uint64_t)&STACK[0x550]);
      v51 = (std::__shared_weak_count *)STACK[0x590];
    }
    if (v51)
    {
      v52 = (unint64_t *)&v51->__shared_owners_;
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    if (a40)
    {
      v54 = (unint64_t *)&a40->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))a40->__on_zero_shared)(a40);
        std::__shared_weak_count::__release_weak(a40);
      }
    }
    v56 = a40;
    a40 = 0;
    if (v56)
    {
      v57 = (unint64_t *)&v56->__shared_owners_;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
  }
  if (a40)
  {
    v59 = (unint64_t *)&a40->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    JUMPOUT(0x20FB8FCF0);
  }
  JUMPOUT(0x20FB8FE10);
}

void sub_20FB8F218(_Unwind_Exception *a1, int a2)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  if (a2)
  {
    v4 = (std::__shared_weak_count *)STACK[0x590];
    if (STACK[0x590])
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    if (v2)
    {
      v7 = (unint64_t *)&v2->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        sub_20E860DA4(a1);
      }
    }
    sub_20E860DA4(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20FB8F274(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t *a71;
  __int128 a72;
  std::__shared_weak_count *v72;
  std::__shared_weak_count *v73;
  unint64_t *p_shared_owners;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  _QWORD *v79;
  __int128 v80;
  int v81;
  unint64_t v82;
  int v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t *v98;
  unint64_t v99;

  v73 = (std::__shared_weak_count *)STACK[0x590];
  if (STACK[0x590])
  {
    p_shared_owners = (unint64_t *)&v73->__shared_owners_;
    do
      v75 = __ldaxr(p_shared_owners);
    while (__stlxr(v75 - 1, p_shared_owners));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  if (v72)
  {
    v76 = (unint64_t *)&v72->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  if (a71)
  {
    v78 = STACK[0x228];
    if (STACK[0x228])
    {
      v79 = (_QWORD *)(*a71 + 16);
      if (*(char *)(*a71 + 39) < 0)
        v79 = (_QWORD *)*v79;
      v80 = a72;
      v81 = STACK[0x208];
      v82 = STACK[0x210];
      v83 = STACK[0x218];
      v84 = STACK[0x220];
      v85 = (std::__shared_weak_count *)STACK[0x230];
      if (STACK[0x230])
      {
        v86 = (unint64_t *)&v85->__shared_owners_;
        do
          v87 = __ldxr(v86);
        while (__stxr(v87 + 1, v86));
      }
      STACK[0x550] = (unint64_t)v79;
      *(_OWORD *)&STACK[0x558] = v80;
      LODWORD(STACK[0x568]) = v81;
      STACK[0x570] = v82;
      LODWORD(STACK[0x578]) = v83;
      STACK[0x580] = v84;
      STACK[0x588] = v78;
      STACK[0x590] = (unint64_t)v85;
      if (v85)
      {
        v88 = (unint64_t *)&v85->__shared_owners_;
        do
          v89 = __ldxr(v88);
        while (__stxr(v89 + 1, v88));
      }
      v90 = v85;
      if (v81 >= **(_DWORD **)(*a71 + 56))
      {
        sub_20E8C3FC4(*a71, (uint64_t)&STACK[0x550]);
        v90 = (std::__shared_weak_count *)STACK[0x590];
      }
      if (v90)
      {
        v91 = (unint64_t *)&v90->__shared_owners_;
        do
          v92 = __ldaxr(v91);
        while (__stlxr(v92 - 1, v91));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v90);
        }
      }
      if (v85)
      {
        v93 = (unint64_t *)&v85->__shared_owners_;
        do
          v94 = __ldaxr(v93);
        while (__stlxr(v94 - 1, v93));
        if (!v94)
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
        }
      }
      v95 = (std::__shared_weak_count *)STACK[0x230];
      STACK[0x230] = 0;
      STACK[0x228] = 0;
      if (v95)
      {
        v96 = (unint64_t *)&v95->__shared_owners_;
        do
          v97 = __ldaxr(v96);
        while (__stlxr(v97 - 1, v96));
        if (!v97)
        {
          ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
          std::__shared_weak_count::__release_weak(v95);
        }
      }
    }
  }
  if (STACK[0x230])
  {
    v98 = (unint64_t *)(STACK[0x230] + 8);
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    JUMPOUT(0x20FB8FCF0);
  }
  JUMPOUT(0x20FB8FE10);
}

void sub_20FB8F4B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t *a71;
  __int128 a72;
  uint64_t v72;
  unint64_t v73;
  _QWORD *v74;
  __int128 v75;
  int v76;
  unint64_t v77;
  int v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *p_shared_owners;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;

  MEMORY[0x212BC6398](v72, 0x10D0C40B950D02ALL);
  if (a71)
  {
    v73 = STACK[0x228];
    if (STACK[0x228])
    {
      v74 = (_QWORD *)(*a71 + 16);
      if (*(char *)(*a71 + 39) < 0)
        v74 = (_QWORD *)*v74;
      v75 = a72;
      v76 = STACK[0x208];
      v77 = STACK[0x210];
      v78 = STACK[0x218];
      v79 = STACK[0x220];
      v80 = (std::__shared_weak_count *)STACK[0x230];
      if (STACK[0x230])
      {
        p_shared_owners = (unint64_t *)&v80->__shared_owners_;
        do
          v82 = __ldxr(p_shared_owners);
        while (__stxr(v82 + 1, p_shared_owners));
      }
      STACK[0x550] = (unint64_t)v74;
      *(_OWORD *)&STACK[0x558] = v75;
      LODWORD(STACK[0x568]) = v76;
      STACK[0x570] = v77;
      LODWORD(STACK[0x578]) = v78;
      STACK[0x580] = v79;
      STACK[0x588] = v73;
      STACK[0x590] = (unint64_t)v80;
      if (v80)
      {
        v83 = (unint64_t *)&v80->__shared_owners_;
        do
          v84 = __ldxr(v83);
        while (__stxr(v84 + 1, v83));
      }
      v85 = v80;
      if (v76 >= **(_DWORD **)(*a71 + 56))
      {
        sub_20E8C3FC4(*a71, (uint64_t)&STACK[0x550]);
        v85 = (std::__shared_weak_count *)STACK[0x590];
      }
      if (v85)
      {
        v86 = (unint64_t *)&v85->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
        }
      }
      if (v80)
      {
        v88 = (unint64_t *)&v80->__shared_owners_;
        do
          v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (!v89)
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
      }
      v90 = (std::__shared_weak_count *)STACK[0x230];
      STACK[0x230] = 0;
      STACK[0x228] = 0;
      if (v90)
      {
        v91 = (unint64_t *)&v90->__shared_owners_;
        do
          v92 = __ldaxr(v91);
        while (__stlxr(v92 - 1, v91));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v90);
        }
      }
    }
  }
  if (STACK[0x230])
  {
    v93 = (unint64_t *)(STACK[0x230] + 8);
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    JUMPOUT(0x20FB8FCF0);
  }
  JUMPOUT(0x20FB8FE10);
}

void sub_20FB8F4D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t *a71;
  __int128 a72;
  unint64_t v72;
  _QWORD *v73;
  __int128 v74;
  int v75;
  unint64_t v76;
  int v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *p_shared_owners;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;

  if (a71)
  {
    v72 = STACK[0x228];
    if (STACK[0x228])
    {
      v73 = (_QWORD *)(*a71 + 16);
      if (*(char *)(*a71 + 39) < 0)
        v73 = (_QWORD *)*v73;
      v74 = a72;
      v75 = STACK[0x208];
      v76 = STACK[0x210];
      v77 = STACK[0x218];
      v78 = STACK[0x220];
      v79 = (std::__shared_weak_count *)STACK[0x230];
      if (STACK[0x230])
      {
        p_shared_owners = (unint64_t *)&v79->__shared_owners_;
        do
          v81 = __ldxr(p_shared_owners);
        while (__stxr(v81 + 1, p_shared_owners));
      }
      STACK[0x550] = (unint64_t)v73;
      *(_OWORD *)&STACK[0x558] = v74;
      LODWORD(STACK[0x568]) = v75;
      STACK[0x570] = v76;
      LODWORD(STACK[0x578]) = v77;
      STACK[0x580] = v78;
      STACK[0x588] = v72;
      STACK[0x590] = (unint64_t)v79;
      if (v79)
      {
        v82 = (unint64_t *)&v79->__shared_owners_;
        do
          v83 = __ldxr(v82);
        while (__stxr(v83 + 1, v82));
      }
      v84 = v79;
      if (v75 >= **(_DWORD **)(*a71 + 56))
      {
        sub_20E8C3FC4(*a71, (uint64_t)&STACK[0x550]);
        v84 = (std::__shared_weak_count *)STACK[0x590];
      }
      if (v84)
      {
        v85 = (unint64_t *)&v84->__shared_owners_;
        do
          v86 = __ldaxr(v85);
        while (__stlxr(v86 - 1, v85));
        if (!v86)
        {
          ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
          std::__shared_weak_count::__release_weak(v84);
        }
      }
      if (v79)
      {
        v87 = (unint64_t *)&v79->__shared_owners_;
        do
          v88 = __ldaxr(v87);
        while (__stlxr(v88 - 1, v87));
        if (!v88)
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
      }
      v89 = (std::__shared_weak_count *)STACK[0x230];
      STACK[0x230] = 0;
      STACK[0x228] = 0;
      if (v89)
      {
        v90 = (unint64_t *)&v89->__shared_owners_;
        do
          v91 = __ldaxr(v90);
        while (__stlxr(v91 - 1, v90));
        if (!v91)
        {
          ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
          std::__shared_weak_count::__release_weak(v89);
        }
      }
    }
  }
  if (STACK[0x230])
  {
    v92 = (unint64_t *)(STACK[0x230] + 8);
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    JUMPOUT(0x20FB8FCF0);
  }
  JUMPOUT(0x20FB8FE10);
}

void sub_20FB8F4D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t *a71;
  __int128 a72;
  unint64_t v72;
  _QWORD *v73;
  __int128 v74;
  int v75;
  unint64_t v76;
  int v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *p_shared_owners;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;

  if (a71)
  {
    v72 = STACK[0x228];
    if (STACK[0x228])
    {
      v73 = (_QWORD *)(*a71 + 16);
      if (*(char *)(*a71 + 39) < 0)
        v73 = (_QWORD *)*v73;
      v74 = a72;
      v75 = STACK[0x208];
      v76 = STACK[0x210];
      v77 = STACK[0x218];
      v78 = STACK[0x220];
      v79 = (std::__shared_weak_count *)STACK[0x230];
      if (STACK[0x230])
      {
        p_shared_owners = (unint64_t *)&v79->__shared_owners_;
        do
          v81 = __ldxr(p_shared_owners);
        while (__stxr(v81 + 1, p_shared_owners));
      }
      STACK[0x550] = (unint64_t)v73;
      *(_OWORD *)&STACK[0x558] = v74;
      LODWORD(STACK[0x568]) = v75;
      STACK[0x570] = v76;
      LODWORD(STACK[0x578]) = v77;
      STACK[0x580] = v78;
      STACK[0x588] = v72;
      STACK[0x590] = (unint64_t)v79;
      if (v79)
      {
        v82 = (unint64_t *)&v79->__shared_owners_;
        do
          v83 = __ldxr(v82);
        while (__stxr(v83 + 1, v82));
      }
      v84 = v79;
      if (v75 >= **(_DWORD **)(*a71 + 56))
      {
        sub_20E8C3FC4(*a71, (uint64_t)&STACK[0x550]);
        v84 = (std::__shared_weak_count *)STACK[0x590];
      }
      if (v84)
      {
        v85 = (unint64_t *)&v84->__shared_owners_;
        do
          v86 = __ldaxr(v85);
        while (__stlxr(v86 - 1, v85));
        if (!v86)
        {
          ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
          std::__shared_weak_count::__release_weak(v84);
        }
      }
      if (v79)
      {
        v87 = (unint64_t *)&v79->__shared_owners_;
        do
          v88 = __ldaxr(v87);
        while (__stlxr(v88 - 1, v87));
        if (!v88)
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
      }
      v89 = (std::__shared_weak_count *)STACK[0x230];
      STACK[0x230] = 0;
      STACK[0x228] = 0;
      if (v89)
      {
        v90 = (unint64_t *)&v89->__shared_owners_;
        do
          v91 = __ldaxr(v90);
        while (__stlxr(v91 - 1, v90));
        if (!v91)
        {
          ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
          std::__shared_weak_count::__release_weak(v89);
        }
      }
    }
  }
  if (STACK[0x230])
  {
    v92 = (unint64_t *)(STACK[0x230] + 8);
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    JUMPOUT(0x20FB8FCF0);
  }
  JUMPOUT(0x20FB8FE10);
}

void sub_20FB8F4E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t *a33,__int128 a34,int a35,unint64_t a36,int a37,unint64_t a38,unint64_t a39,std::__shared_weak_count *a40)
{
  _QWORD *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;

  if (LOBYTE(STACK[0x360]) && SLOBYTE(STACK[0x35F]) < 0)
    operator delete((void *)STACK[0x348]);
  if (STACK[0x340])
    os_release((void *)STACK[0x340]);
  if (a33 && a39)
  {
    v40 = (_QWORD *)(*a33 + 16);
    if (*(char *)(*a33 + 39) < 0)
      v40 = (_QWORD *)*v40;
    if (a40)
    {
      p_shared_owners = (unint64_t *)&a40->__shared_owners_;
      do
        v42 = __ldxr(p_shared_owners);
      while (__stxr(v42 + 1, p_shared_owners));
    }
    STACK[0x550] = (unint64_t)v40;
    *(_OWORD *)&STACK[0x558] = a34;
    LODWORD(STACK[0x568]) = a35;
    STACK[0x570] = a36;
    LODWORD(STACK[0x578]) = a37;
    STACK[0x580] = a38;
    STACK[0x588] = a39;
    STACK[0x590] = (unint64_t)a40;
    if (a40)
    {
      v43 = (unint64_t *)&a40->__shared_owners_;
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
    v45 = a40;
    if (a35 >= **(_DWORD **)(*a33 + 56))
    {
      sub_20E8C3FC4(*a33, (uint64_t)&STACK[0x550]);
      v45 = (std::__shared_weak_count *)STACK[0x590];
    }
    if (v45)
    {
      v46 = (unint64_t *)&v45->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    if (a40)
    {
      v48 = (unint64_t *)&a40->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))a40->__on_zero_shared)(a40);
        std::__shared_weak_count::__release_weak(a40);
      }
    }
    v50 = a40;
    a40 = 0;
    if (v50)
    {
      v51 = (unint64_t *)&v50->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
  }
  if (a40)
  {
    v53 = (unint64_t *)&a40->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    JUMPOUT(0x20FB8FCF0);
  }
  JUMPOUT(0x20FB8FE10);
}

void sub_20FB8F68C(_Unwind_Exception *a1, int a2)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  if (a2)
  {
    v4 = (std::__shared_weak_count *)STACK[0x590];
    if (STACK[0x590])
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    if (v2)
    {
      v7 = (unint64_t *)&v2->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        sub_20E860DA4(a1);
      }
    }
    sub_20E860DA4(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20FB8F6EC(_Unwind_Exception *a1, int a2)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  if (a2)
  {
    v4 = (std::__shared_weak_count *)STACK[0x590];
    if (STACK[0x590])
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    if (v2)
    {
      v7 = (unint64_t *)&v2->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        sub_20E860DA4(a1);
      }
    }
    sub_20E860DA4(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20FB8F748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t *a71;
  __int128 a72;
  std::__shared_weak_count *v72;
  std::__shared_weak_count *v74;
  unint64_t *p_shared_owners;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  __int128 v81;
  int v82;
  unint64_t v83;
  int v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;

  v74 = (std::__shared_weak_count *)STACK[0x590];
  if (STACK[0x590])
  {
    p_shared_owners = (unint64_t *)&v74->__shared_owners_;
    do
      v76 = __ldaxr(p_shared_owners);
    while (__stlxr(v76 - 1, p_shared_owners));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  if (v72)
  {
    v77 = (unint64_t *)&v72->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  if (a71)
  {
    v79 = STACK[0x228];
    if (STACK[0x228])
    {
      v80 = (_QWORD *)(*a71 + 16);
      if (*(char *)(*a71 + 39) < 0)
        v80 = (_QWORD *)*v80;
      v81 = a72;
      v82 = STACK[0x208];
      v83 = STACK[0x210];
      v84 = STACK[0x218];
      v85 = STACK[0x220];
      v86 = (std::__shared_weak_count *)STACK[0x230];
      if (STACK[0x230])
      {
        v87 = (unint64_t *)&v86->__shared_owners_;
        do
          v88 = __ldxr(v87);
        while (__stxr(v88 + 1, v87));
      }
      STACK[0x550] = (unint64_t)v80;
      *(_OWORD *)&STACK[0x558] = v81;
      LODWORD(STACK[0x568]) = v82;
      STACK[0x570] = v83;
      LODWORD(STACK[0x578]) = v84;
      STACK[0x580] = v85;
      STACK[0x588] = v79;
      STACK[0x590] = (unint64_t)v86;
      if (v86)
      {
        v89 = (unint64_t *)&v86->__shared_owners_;
        do
          v90 = __ldxr(v89);
        while (__stxr(v90 + 1, v89));
      }
      v91 = v86;
      if (v82 >= **(_DWORD **)(*a71 + 56))
      {
        sub_20E8C3FC4(*a71, (uint64_t)&STACK[0x550]);
        v91 = (std::__shared_weak_count *)STACK[0x590];
      }
      if (v91)
      {
        v92 = (unint64_t *)&v91->__shared_owners_;
        do
          v93 = __ldaxr(v92);
        while (__stlxr(v93 - 1, v92));
        if (!v93)
        {
          ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
          std::__shared_weak_count::__release_weak(v91);
        }
      }
      if (v86)
      {
        v94 = (unint64_t *)&v86->__shared_owners_;
        do
          v95 = __ldaxr(v94);
        while (__stlxr(v95 - 1, v94));
        if (!v95)
        {
          ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
          std::__shared_weak_count::__release_weak(v86);
        }
      }
      v96 = (std::__shared_weak_count *)STACK[0x230];
      STACK[0x230] = 0;
      STACK[0x228] = 0;
      if (v96)
      {
        v97 = (unint64_t *)&v96->__shared_owners_;
        do
          v98 = __ldaxr(v97);
        while (__stlxr(v98 - 1, v97));
        if (!v98)
        {
          ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
          std::__shared_weak_count::__release_weak(v96);
        }
      }
    }
  }
  v99 = (std::__shared_weak_count *)STACK[0x230];
  if (STACK[0x230])
  {
    v100 = (unint64_t *)&v99->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
      _Unwind_Resume(a1);
    }
  }
  JUMPOUT(0x20FB8FE10);
}

void sub_20FB8F7A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (a33)
  {
    MEMORY[0x212BC6368](a33, 0x1000C8000313F17);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20FB8F7B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t *a71;
  __int128 a72;
  unint64_t v72;
  _QWORD *v73;
  __int128 v74;
  int v75;
  unint64_t v76;
  int v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *p_shared_owners;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;

  if (LOBYTE(STACK[0x360]) && SLOBYTE(STACK[0x35F]) < 0)
    operator delete((void *)STACK[0x348]);
  if (STACK[0x340])
    os_release((void *)STACK[0x340]);
  if (a71)
  {
    v72 = STACK[0x228];
    if (STACK[0x228])
    {
      v73 = (_QWORD *)(*a71 + 16);
      if (*(char *)(*a71 + 39) < 0)
        v73 = (_QWORD *)*v73;
      v74 = a72;
      v75 = STACK[0x208];
      v76 = STACK[0x210];
      v77 = STACK[0x218];
      v78 = STACK[0x220];
      v79 = (std::__shared_weak_count *)STACK[0x230];
      if (STACK[0x230])
      {
        p_shared_owners = (unint64_t *)&v79->__shared_owners_;
        do
          v81 = __ldxr(p_shared_owners);
        while (__stxr(v81 + 1, p_shared_owners));
      }
      STACK[0x550] = (unint64_t)v73;
      *(_OWORD *)&STACK[0x558] = v74;
      LODWORD(STACK[0x568]) = v75;
      STACK[0x570] = v76;
      LODWORD(STACK[0x578]) = v77;
      STACK[0x580] = v78;
      STACK[0x588] = v72;
      STACK[0x590] = (unint64_t)v79;
      if (v79)
      {
        v82 = (unint64_t *)&v79->__shared_owners_;
        do
          v83 = __ldxr(v82);
        while (__stxr(v83 + 1, v82));
      }
      v84 = v79;
      if (v75 >= **(_DWORD **)(*a71 + 56))
      {
        sub_20E8C3FC4(*a71, (uint64_t)&STACK[0x550]);
        v84 = (std::__shared_weak_count *)STACK[0x590];
      }
      if (v84)
      {
        v85 = (unint64_t *)&v84->__shared_owners_;
        do
          v86 = __ldaxr(v85);
        while (__stlxr(v86 - 1, v85));
        if (!v86)
        {
          ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
          std::__shared_weak_count::__release_weak(v84);
        }
      }
      if (v79)
      {
        v87 = (unint64_t *)&v79->__shared_owners_;
        do
          v88 = __ldaxr(v87);
        while (__stlxr(v88 - 1, v87));
        if (!v88)
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
      }
      v89 = (std::__shared_weak_count *)STACK[0x230];
      STACK[0x230] = 0;
      STACK[0x228] = 0;
      if (v89)
      {
        v90 = (unint64_t *)&v89->__shared_owners_;
        do
          v91 = __ldaxr(v90);
        while (__stlxr(v91 - 1, v90));
        if (!v91)
        {
          ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
          std::__shared_weak_count::__release_weak(v89);
        }
      }
    }
  }
  if (STACK[0x230])
  {
    v92 = (unint64_t *)(STACK[0x230] + 8);
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    JUMPOUT(0x20FB8FCF0);
  }
  JUMPOUT(0x20FB8FE10);
}

void sub_20FB8F968(_Unwind_Exception *a1, int a2)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  if (a2)
  {
    v4 = (std::__shared_weak_count *)STACK[0x590];
    if (STACK[0x590])
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    if (v2)
    {
      v7 = (unint64_t *)&v2->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        sub_20E860DA4(a1);
      }
    }
    sub_20E860DA4(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20FB8F9D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t *a71;
  __int128 a72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *p_shared_owners;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  _QWORD *v81;
  __int128 v82;
  int v83;
  unint64_t v84;
  int v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;

  v73 = STACK[0x340];
  STACK[0x340] = 0;
  if (v73)
  {
    v74 = *(std::__shared_weak_count **)(v73 + 32);
    if (v74)
    {
      p_shared_owners = (unint64_t *)&v74->__shared_owners_;
      do
        v76 = __ldaxr(p_shared_owners);
      while (__stlxr(v76 - 1, p_shared_owners));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
      }
    }
    v77 = *(std::__shared_weak_count **)(v73 + 16);
    if (v77)
    {
      v78 = (unint64_t *)&v77->__shared_owners_;
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
    }
    MEMORY[0x212BC6398](v73, 0x10F0C40B62ED6C6);
  }
  if (a71)
  {
    v80 = STACK[0x228];
    if (STACK[0x228])
    {
      v81 = (_QWORD *)(*a71 + 16);
      if (*(char *)(*a71 + 39) < 0)
        v81 = (_QWORD *)*v81;
      v82 = a72;
      v83 = STACK[0x208];
      v84 = STACK[0x210];
      v85 = STACK[0x218];
      v86 = STACK[0x220];
      v87 = (std::__shared_weak_count *)STACK[0x230];
      if (STACK[0x230])
      {
        v88 = (unint64_t *)&v87->__shared_owners_;
        do
          v89 = __ldxr(v88);
        while (__stxr(v89 + 1, v88));
      }
      STACK[0x550] = (unint64_t)v81;
      *(_OWORD *)&STACK[0x558] = v82;
      LODWORD(STACK[0x568]) = v83;
      STACK[0x570] = v84;
      LODWORD(STACK[0x578]) = v85;
      STACK[0x580] = v86;
      STACK[0x588] = v80;
      STACK[0x590] = (unint64_t)v87;
      if (v87)
      {
        v90 = (unint64_t *)&v87->__shared_owners_;
        do
          v91 = __ldxr(v90);
        while (__stxr(v91 + 1, v90));
      }
      v92 = v87;
      if (v83 >= **(_DWORD **)(*a71 + 56))
      {
        sub_20E8C3FC4(*a71, (uint64_t)&STACK[0x550]);
        v92 = (std::__shared_weak_count *)STACK[0x590];
      }
      if (v92)
      {
        v93 = (unint64_t *)&v92->__shared_owners_;
        do
          v94 = __ldaxr(v93);
        while (__stlxr(v94 - 1, v93));
        if (!v94)
        {
          ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
          std::__shared_weak_count::__release_weak(v92);
        }
      }
      if (v87)
      {
        v95 = (unint64_t *)&v87->__shared_owners_;
        do
          v96 = __ldaxr(v95);
        while (__stlxr(v96 - 1, v95));
        if (!v96)
        {
          ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
          std::__shared_weak_count::__release_weak(v87);
        }
      }
      v97 = (std::__shared_weak_count *)STACK[0x230];
      STACK[0x230] = 0;
      STACK[0x228] = 0;
      if (v97)
      {
        v98 = (unint64_t *)&v97->__shared_owners_;
        do
          v99 = __ldaxr(v98);
        while (__stlxr(v99 - 1, v98));
        if (!v99)
        {
          ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
          std::__shared_weak_count::__release_weak(v97);
        }
      }
    }
  }
  v100 = (std::__shared_weak_count *)STACK[0x230];
  if (STACK[0x230])
  {
    v101 = (unint64_t *)&v100->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
      _Unwind_Resume(a1);
    }
  }
  JUMPOUT(0x20FB8FE10);
}

void sub_20FB8FA6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t *a71;
  __int128 a72;
  unint64_t *v72;
  unint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  __int128 v77;
  int v78;
  unint64_t v79;
  int v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *p_shared_owners;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;

  do
    v74 = __ldaxr(v72);
  while (__stlxr(v74 - 1, v72));
  if (!v74)
    JUMPOUT(0x20FB8FA84);
  if (a71)
  {
    v75 = STACK[0x228];
    if (STACK[0x228])
    {
      v76 = (_QWORD *)(*a71 + 16);
      if (*(char *)(*a71 + 39) < 0)
        v76 = (_QWORD *)*v76;
      v77 = a72;
      v78 = STACK[0x208];
      v79 = STACK[0x210];
      v80 = STACK[0x218];
      v81 = STACK[0x220];
      v82 = (std::__shared_weak_count *)STACK[0x230];
      if (STACK[0x230])
      {
        p_shared_owners = (unint64_t *)&v82->__shared_owners_;
        do
          v84 = __ldxr(p_shared_owners);
        while (__stxr(v84 + 1, p_shared_owners));
      }
      STACK[0x550] = (unint64_t)v76;
      *(_OWORD *)&STACK[0x558] = v77;
      LODWORD(STACK[0x568]) = v78;
      STACK[0x570] = v79;
      LODWORD(STACK[0x578]) = v80;
      STACK[0x580] = v81;
      STACK[0x588] = v75;
      STACK[0x590] = (unint64_t)v82;
      if (v82)
      {
        v85 = (unint64_t *)&v82->__shared_owners_;
        do
          v86 = __ldxr(v85);
        while (__stxr(v86 + 1, v85));
      }
      v87 = v82;
      if (v78 >= **(_DWORD **)(*a71 + 56))
      {
        sub_20E8C3FC4(*a71, (uint64_t)&STACK[0x550]);
        v87 = (std::__shared_weak_count *)STACK[0x590];
      }
      if (v87)
      {
        v88 = (unint64_t *)&v87->__shared_owners_;
        do
          v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (!v89)
        {
          ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
          std::__shared_weak_count::__release_weak(v87);
        }
      }
      if (v82)
      {
        v90 = (unint64_t *)&v82->__shared_owners_;
        do
          v91 = __ldaxr(v90);
        while (__stlxr(v91 - 1, v90));
        if (!v91)
        {
          ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
          std::__shared_weak_count::__release_weak(v82);
        }
      }
      v92 = (std::__shared_weak_count *)STACK[0x230];
      STACK[0x230] = 0;
      STACK[0x228] = 0;
      if (v92)
      {
        v93 = (unint64_t *)&v92->__shared_owners_;
        do
          v94 = __ldaxr(v93);
        while (__stlxr(v94 - 1, v93));
        if (!v94)
        {
          ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
          std::__shared_weak_count::__release_weak(v92);
        }
      }
    }
  }
  v95 = (std::__shared_weak_count *)STACK[0x230];
  if (STACK[0x230])
  {
    v96 = (unint64_t *)&v95->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
      _Unwind_Resume(a1);
    }
  }
  JUMPOUT(0x20FB8FE10);
}

void sub_20FB8FAA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t *a71;
  __int128 a72;
  uint64_t v72;
  unint64_t v74;
  _QWORD *v75;
  __int128 v76;
  int v77;
  unint64_t v78;
  int v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *p_shared_owners;
  unint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;

  MEMORY[0x212BC6398](v72, 0x10D0C40B950D02ALL);
  if (a71)
  {
    v74 = STACK[0x228];
    if (STACK[0x228])
    {
      v75 = (_QWORD *)(*a71 + 16);
      if (*(char *)(*a71 + 39) < 0)
        v75 = (_QWORD *)*v75;
      v76 = a72;
      v77 = STACK[0x208];
      v78 = STACK[0x210];
      v79 = STACK[0x218];
      v80 = STACK[0x220];
      v81 = (std::__shared_weak_count *)STACK[0x230];
      if (STACK[0x230])
      {
        p_shared_owners = (unint64_t *)&v81->__shared_owners_;
        do
          v83 = __ldxr(p_shared_owners);
        while (__stxr(v83 + 1, p_shared_owners));
      }
      STACK[0x550] = (unint64_t)v75;
      *(_OWORD *)&STACK[0x558] = v76;
      LODWORD(STACK[0x568]) = v77;
      STACK[0x570] = v78;
      LODWORD(STACK[0x578]) = v79;
      STACK[0x580] = v80;
      STACK[0x588] = v74;
      STACK[0x590] = (unint64_t)v81;
      if (v81)
      {
        v84 = (unint64_t *)&v81->__shared_owners_;
        do
          v85 = __ldxr(v84);
        while (__stxr(v85 + 1, v84));
      }
      v86 = v81;
      if (v77 >= **(_DWORD **)(*a71 + 56))
      {
        sub_20E8C3FC4(*a71, (uint64_t)&STACK[0x550]);
        v86 = (std::__shared_weak_count *)STACK[0x590];
      }
      if (v86)
      {
        v87 = (unint64_t *)&v86->__shared_owners_;
        do
          v88 = __ldaxr(v87);
        while (__stlxr(v88 - 1, v87));
        if (!v88)
        {
          ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
          std::__shared_weak_count::__release_weak(v86);
        }
      }
      if (v81)
      {
        v89 = (unint64_t *)&v81->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
        }
      }
      v91 = (std::__shared_weak_count *)STACK[0x230];
      STACK[0x230] = 0;
      STACK[0x228] = 0;
      if (v91)
      {
        v92 = (unint64_t *)&v91->__shared_owners_;
        do
          v93 = __ldaxr(v92);
        while (__stlxr(v93 - 1, v92));
        if (!v93)
        {
          ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
          std::__shared_weak_count::__release_weak(v91);
        }
      }
    }
  }
  v94 = (std::__shared_weak_count *)STACK[0x230];
  if (STACK[0x230])
  {
    v95 = (unint64_t *)&v94->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
      _Unwind_Resume(a1);
    }
  }
  JUMPOUT(0x20FB8FE10);
}

void sub_20FB8FAC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t *a71;
  __int128 a72;
  unint64_t v73;
  _QWORD *v74;
  __int128 v75;
  int v76;
  unint64_t v77;
  int v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *p_shared_owners;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;

  if (a71)
  {
    v73 = STACK[0x228];
    if (STACK[0x228])
    {
      v74 = (_QWORD *)(*a71 + 16);
      if (*(char *)(*a71 + 39) < 0)
        v74 = (_QWORD *)*v74;
      v75 = a72;
      v76 = STACK[0x208];
      v77 = STACK[0x210];
      v78 = STACK[0x218];
      v79 = STACK[0x220];
      v80 = (std::__shared_weak_count *)STACK[0x230];
      if (STACK[0x230])
      {
        p_shared_owners = (unint64_t *)&v80->__shared_owners_;
        do
          v82 = __ldxr(p_shared_owners);
        while (__stxr(v82 + 1, p_shared_owners));
      }
      STACK[0x550] = (unint64_t)v74;
      *(_OWORD *)&STACK[0x558] = v75;
      LODWORD(STACK[0x568]) = v76;
      STACK[0x570] = v77;
      LODWORD(STACK[0x578]) = v78;
      STACK[0x580] = v79;
      STACK[0x588] = v73;
      STACK[0x590] = (unint64_t)v80;
      if (v80)
      {
        v83 = (unint64_t *)&v80->__shared_owners_;
        do
          v84 = __ldxr(v83);
        while (__stxr(v84 + 1, v83));
      }
      v85 = v80;
      if (v76 >= **(_DWORD **)(*a71 + 56))
      {
        sub_20E8C3FC4(*a71, (uint64_t)&STACK[0x550]);
        v85 = (std::__shared_weak_count *)STACK[0x590];
      }
      if (v85)
      {
        v86 = (unint64_t *)&v85->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
        }
      }
      if (v80)
      {
        v88 = (unint64_t *)&v80->__shared_owners_;
        do
          v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (!v89)
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
      }
      v90 = (std::__shared_weak_count *)STACK[0x230];
      STACK[0x230] = 0;
      STACK[0x228] = 0;
      if (v90)
      {
        v91 = (unint64_t *)&v90->__shared_owners_;
        do
          v92 = __ldaxr(v91);
        while (__stlxr(v92 - 1, v91));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v90);
        }
      }
    }
  }
  v93 = (std::__shared_weak_count *)STACK[0x230];
  if (STACK[0x230])
  {
    v94 = (unint64_t *)&v93->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
      _Unwind_Resume(a1);
    }
  }
  JUMPOUT(0x20FB8FE10);
}

void sub_20FB8FAD0(_Unwind_Exception *a1)
{
  if (STACK[0x340])
    MEMORY[0x212BC6368](STACK[0x340], 0x1000C8000313F17);
  if (STACK[0x550])
    JUMPOUT(0x20FB8FB00);
  _Unwind_Resume(a1);
}

void sub_20FB8FB34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t *a71;
  __int128 a72;
  unint64_t v73;
  _QWORD *v74;
  __int128 v75;
  int v76;
  unint64_t v77;
  int v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *p_shared_owners;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;

  if (a71)
  {
    v73 = STACK[0x228];
    if (STACK[0x228])
    {
      v74 = (_QWORD *)(*a71 + 16);
      if (*(char *)(*a71 + 39) < 0)
        v74 = (_QWORD *)*v74;
      v75 = a72;
      v76 = STACK[0x208];
      v77 = STACK[0x210];
      v78 = STACK[0x218];
      v79 = STACK[0x220];
      v80 = (std::__shared_weak_count *)STACK[0x230];
      if (STACK[0x230])
      {
        p_shared_owners = (unint64_t *)&v80->__shared_owners_;
        do
          v82 = __ldxr(p_shared_owners);
        while (__stxr(v82 + 1, p_shared_owners));
      }
      STACK[0x550] = (unint64_t)v74;
      *(_OWORD *)&STACK[0x558] = v75;
      LODWORD(STACK[0x568]) = v76;
      STACK[0x570] = v77;
      LODWORD(STACK[0x578]) = v78;
      STACK[0x580] = v79;
      STACK[0x588] = v73;
      STACK[0x590] = (unint64_t)v80;
      if (v80)
      {
        v83 = (unint64_t *)&v80->__shared_owners_;
        do
          v84 = __ldxr(v83);
        while (__stxr(v84 + 1, v83));
      }
      v85 = v80;
      if (v76 >= **(_DWORD **)(*a71 + 56))
      {
        sub_20E8C3FC4(*a71, (uint64_t)&STACK[0x550]);
        v85 = (std::__shared_weak_count *)STACK[0x590];
      }
      if (v85)
      {
        v86 = (unint64_t *)&v85->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
        }
      }
      if (v80)
      {
        v88 = (unint64_t *)&v80->__shared_owners_;
        do
          v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (!v89)
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
      }
      v90 = (std::__shared_weak_count *)STACK[0x230];
      STACK[0x230] = 0;
      STACK[0x228] = 0;
      if (v90)
      {
        v91 = (unint64_t *)&v90->__shared_owners_;
        do
          v92 = __ldaxr(v91);
        while (__stlxr(v92 - 1, v91));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v90);
        }
      }
    }
  }
  v93 = (std::__shared_weak_count *)STACK[0x230];
  if (STACK[0x230])
  {
    v94 = (unint64_t *)&v93->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
      _Unwind_Resume(a1);
    }
  }
  JUMPOUT(0x20FB8FE10);
}

void sub_20FB8FB44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t *a71;
  __int128 a72;
  unint64_t v73;
  _QWORD *v74;
  __int128 v75;
  int v76;
  unint64_t v77;
  int v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *p_shared_owners;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;

  if (LOBYTE(STACK[0x360]) && SLOBYTE(STACK[0x35F]) < 0)
    operator delete((void *)STACK[0x348]);
  if (STACK[0x340])
    os_release((void *)STACK[0x340]);
  if (a71)
  {
    v73 = STACK[0x228];
    if (STACK[0x228])
    {
      v74 = (_QWORD *)(*a71 + 16);
      if (*(char *)(*a71 + 39) < 0)
        v74 = (_QWORD *)*v74;
      v75 = a72;
      v76 = STACK[0x208];
      v77 = STACK[0x210];
      v78 = STACK[0x218];
      v79 = STACK[0x220];
      v80 = (std::__shared_weak_count *)STACK[0x230];
      if (STACK[0x230])
      {
        p_shared_owners = (unint64_t *)&v80->__shared_owners_;
        do
          v82 = __ldxr(p_shared_owners);
        while (__stxr(v82 + 1, p_shared_owners));
      }
      STACK[0x550] = (unint64_t)v74;
      *(_OWORD *)&STACK[0x558] = v75;
      LODWORD(STACK[0x568]) = v76;
      STACK[0x570] = v77;
      LODWORD(STACK[0x578]) = v78;
      STACK[0x580] = v79;
      STACK[0x588] = v73;
      STACK[0x590] = (unint64_t)v80;
      if (v80)
      {
        v83 = (unint64_t *)&v80->__shared_owners_;
        do
          v84 = __ldxr(v83);
        while (__stxr(v84 + 1, v83));
      }
      v85 = v80;
      if (v76 >= **(_DWORD **)(*a71 + 56))
      {
        sub_20E8C3FC4(*a71, (uint64_t)&STACK[0x550]);
        v85 = (std::__shared_weak_count *)STACK[0x590];
      }
      if (v85)
      {
        v86 = (unint64_t *)&v85->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
        }
      }
      if (v80)
      {
        v88 = (unint64_t *)&v80->__shared_owners_;
        do
          v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (!v89)
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
      }
      v90 = (std::__shared_weak_count *)STACK[0x230];
      STACK[0x230] = 0;
      STACK[0x228] = 0;
      if (v90)
      {
        v91 = (unint64_t *)&v90->__shared_owners_;
        do
          v92 = __ldaxr(v91);
        while (__stlxr(v92 - 1, v91));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v90);
        }
      }
    }
  }
  v93 = (std::__shared_weak_count *)STACK[0x230];
  if (STACK[0x230])
  {
    v94 = (unint64_t *)&v93->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
      _Unwind_Resume(a1);
    }
  }
  JUMPOUT(0x20FB8FE10);
}

void sub_20FB8FD14(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  if (a2)
  {
    v4 = (std::__shared_weak_count *)STACK[0x590];
    if (STACK[0x590])
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    if (v2)
    {
      v7 = (unint64_t *)(v2 + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      JUMPOUT(0x20FB8FD6CLL);
    }
    sub_20E860DA4(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20FB8FD90(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x20FB8FD98);
  _Unwind_Resume(a1);
}

void sub_20FB8FDA8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;

  v4 = (std::__shared_weak_count *)STACK[0x5C8];
  if (STACK[0x5C8])
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  do
    v7 = __ldaxr(v2);
  while (__stlxr(v7 - 1, v2));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20FB8FE18(uint64_t a1, __int128 *a2, __int128 *a3, __int128 *a4, std::__shared_weak_count *a5, __int128 *a6)
{
  std::__shared_weak_count *v6;
  unsigned int *v7;
  unint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  char *v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int *v28;
  char *v29;
  unsigned int v30;
  uint64_t v31;
  __int128 v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  _BYTE *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t *v39;
  unint64_t *v40;
  __int128 v41;
  __int128 v42;
  unint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  unint64_t v49;
  _BYTE *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  _BYTE *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t *v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  unint64_t v76;
  __int128 v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  _BYTE *v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  unint64_t v121;
  unint64_t *v122;
  __int128 v123;
  __int128 v124;
  unint64_t v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  unint64_t v131;
  unint64_t *v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t *v145;
  unint64_t v146;
  unint64_t *v147;
  unint64_t v148;
  _BYTE *v150;
  unint64_t *v151;
  int64_t v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  uint64_t v158;
  __int128 v159;
  uint64_t v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  uint64_t v174;
  __int128 v175;
  uint64_t v176;
  __int128 v177;
  uint64_t v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  unint64_t v185;
  char v186;
  __int128 v187;
  char v188;
  unint64_t v189;
  char v190;
  __int128 v191;
  uint64_t v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  uint64_t v204;
  uint64_t v205;

  v6 = a5;
  v7 = (unsigned int *)a3;
  v205 = *MEMORY[0x24BDAC8D0];
  v9 = *(_QWORD *)a2;
  v10 = *(unint64_t **)(a1 + 1112);
  v11 = *(unint64_t **)(a1 + 1120);
  if (v10 == v11)
  {
    v11 = *(unint64_t **)(a1 + 1112);
  }
  else if (*(v11 - 35) >= v9)
  {
    v12 = 0xAF8AF8AF8AF8AF8BLL * (v11 - v10);
    do
    {
      v13 = v12 >> 1;
      v14 = &v10[35 * (v12 >> 1)];
      v15 = *v14;
      v16 = v14 + 35;
      v12 += ~(v12 >> 1);
      if (v15 < v9)
        v10 = v16;
      else
        v12 = v13;
    }
    while (v12);
    if (v10 != v11)
    {
      v11 = v10;
      if (*v10 == v9)
        return 0;
    }
  }
  if (a5)
  {
    p_shared_owners = (unint64_t *)&a5->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  v155 = a2[2];
  v156 = a2[3];
  v157 = a2[4];
  v158 = *((_QWORD *)a2 + 10);
  v153 = *a2;
  v154 = a2[1];
  v159 = *(__int128 *)((char *)a2 + 88);
  v160 = *((_QWORD *)a2 + 13);
  v161 = a2[7];
  *((_QWORD *)a2 + 14) = 0;
  *((_QWORD *)a2 + 15) = 0;
  *(_QWORD *)&v168 = a4;
  *((_QWORD *)&v168 + 1) = a5;
  if (a5)
  {
    v20 = (unint64_t *)&a5->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))a5->__on_zero_shared)(a5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v23 = *v7;
  v24 = *(char **)(a1 + 200);
  v25 = *(char **)(a1 + 208);
  if (v25 != v24)
  {
    v26 = (v25 - v24) >> 4;
    do
    {
      v27 = v26 >> 1;
      v28 = (unsigned int *)&v24[16 * (v26 >> 1)];
      v30 = *v28;
      v29 = (char *)(v28 + 4);
      v26 += ~(v26 >> 1);
      if (v30 < v23)
        v24 = v29;
      else
        v26 = v27;
    }
    while (v26);
  }
  if (v24 == v25 || *(_DWORD *)v24 != v23)
  {
    v17 = 0;
  }
  else
  {
    v31 = *((_QWORD *)v24 + 1);
    ++*(_DWORD *)(v31 + 8);
    if (*(_BYTE *)(v31 + 20))
    {
      v169 = v153;
      v171 = v155;
      v172 = v156;
      v173 = v157;
      v174 = v158;
      v170 = v154;
      v175 = v159;
      v32 = v161;
      v176 = v160;
      v177 = v161;
      v161 = 0uLL;
      v178 = v31;
      v179 = v162;
      v180 = v163;
      v181 = v164;
      v182 = v165;
      v183 = v166;
      v184 = v167;
      v186 = 0;
      v185 = 0xBFF0000000000000;
      v33 = (std::__shared_weak_count *)*((_QWORD *)&v168 + 1);
      v187 = v168;
      *((_QWORD *)&v168 + 1) = 0;
      v188 = 0;
      v34 = *(unint64_t **)(a1 + 1120);
      if (v34 != v11 && *v11 == v9)
        goto LABEL_109;
      a6 = &v169;
      a5 = (std::__shared_weak_count *)&v175;
      a3 = &v177;
      a4 = &v179;
      a2 = &v187;
      v35 = *(_BYTE **)(a1 + 1112);
      v36 = (char *)v11 - v35;
      v152 = 0xAF8AF8AF8AF8AF8BLL * (((char *)v11 - v35) >> 3);
      v37 = *(_QWORD *)(a1 + 1128);
      if ((unint64_t)v34 < v37)
      {
        if (v11 == v34)
        {
          *v34 = v9;
          v85 = &v35[8 * (((char *)v11 - v35) >> 3)];
          *(_OWORD *)(v85 + 8) = v169;
          v87 = v172;
          v86 = v173;
          v88 = v174;
          *(_OWORD *)(v85 + 40) = v171;
          *((_QWORD *)v85 + 11) = v88;
          *(_OWORD *)(v85 + 72) = v86;
          *(_OWORD *)(v85 + 56) = v87;
          *(_OWORD *)(v85 + 24) = v170;
          v89 = v176;
          *((_OWORD *)v85 + 6) = v175;
          *((_QWORD *)v85 + 14) = v89;
          *(_OWORD *)(v85 + 120) = v32;
          v177 = 0uLL;
          *((_QWORD *)v85 + 17) = v31;
          v90 = v179;
          v91 = v181;
          *((_OWORD *)v85 + 10) = v180;
          *((_OWORD *)v85 + 11) = v91;
          *((_OWORD *)v85 + 9) = v90;
          v92 = v182;
          v93 = v184;
          *((_OWORD *)v85 + 13) = v183;
          *((_OWORD *)v85 + 14) = v93;
          *((_OWORD *)v85 + 12) = v92;
          v94 = v185;
          v85[248] = v186;
          *((_QWORD *)v85 + 30) = v94;
          *((_QWORD *)v85 + 32) = v168;
          *((_QWORD *)v85 + 33) = v33;
          v187 = 0uLL;
          v85[272] = 0;
          *(_QWORD *)(a1 + 1120) = v34 + 35;
        }
        else
        {
          v202 = v156;
          v203 = v157;
          v204 = v158;
          v200 = v154;
          v201 = v155;
          v192 = v160;
          v191 = v159;
          v177 = 0uLL;
          v198 = v163;
          v199 = v164;
          v197 = v162;
          v195 = v166;
          v196 = v167;
          v193 = v153;
          v194 = v165;
          v190 = 0;
          v189 = 0xBFF0000000000000;
          v38 = v34 - 35;
          v39 = v34;
          v187 = 0uLL;
          if ((unint64_t)v34 >= 0x118)
          {
            v40 = v34 - 35;
            v39 = v34;
            do
            {
              *v39 = *v40;
              *(_OWORD *)(v39 + 1) = *(_OWORD *)(v40 + 1);
              v41 = *(_OWORD *)(v40 + 7);
              v42 = *(_OWORD *)(v40 + 9);
              v43 = v40[11];
              *(_OWORD *)(v39 + 5) = *(_OWORD *)(v40 + 5);
              v39[11] = v43;
              *(_OWORD *)(v39 + 9) = v42;
              *(_OWORD *)(v39 + 7) = v41;
              *(_OWORD *)(v39 + 3) = *(_OWORD *)(v40 + 3);
              v44 = *((_OWORD *)v40 + 6);
              v39[14] = v40[14];
              *((_OWORD *)v39 + 6) = v44;
              *(_OWORD *)(v39 + 15) = *(_OWORD *)(v40 + 15);
              v40[15] = 0;
              v40[16] = 0;
              v39[17] = v40[17];
              v45 = *((_OWORD *)v40 + 9);
              v46 = *((_OWORD *)v40 + 11);
              *((_OWORD *)v39 + 10) = *((_OWORD *)v40 + 10);
              *((_OWORD *)v39 + 11) = v46;
              *((_OWORD *)v39 + 9) = v45;
              v47 = *((_OWORD *)v40 + 12);
              v48 = *((_OWORD *)v40 + 14);
              *((_OWORD *)v39 + 13) = *((_OWORD *)v40 + 13);
              *((_OWORD *)v39 + 14) = v48;
              *((_OWORD *)v39 + 12) = v47;
              v49 = v40[30];
              *((_BYTE *)v39 + 248) = *((_BYTE *)v40 + 248);
              v39[30] = v49;
              *((_OWORD *)v39 + 16) = *((_OWORD *)v40 + 16);
              v40[32] = 0;
              v40[33] = 0;
              *((_BYTE *)v39 + 272) = *((_BYTE *)v40 + 272);
              v39 += 35;
              v40 += 35;
            }
            while (v40 < v34);
          }
          v150 = v35;
          *(_QWORD *)(a1 + 1120) = v39;
          if (v34 != v11 + 35)
          {
            do
            {
              v62 = v38 - 35;
              v63 = v34 - 35;
              *v63 = *(v38 - 35);
              *(_OWORD *)(v63 + 1) = *((_OWORD *)v38 - 17);
              v65 = *((_OWORD *)v38 - 14);
              v64 = *((_OWORD *)v38 - 13);
              v66 = *((_OWORD *)v38 - 15);
              *(v34 - 24) = *(v38 - 24);
              *((_OWORD *)v34 - 14) = v65;
              *((_OWORD *)v34 - 13) = v64;
              *((_OWORD *)v34 - 15) = v66;
              *((_OWORD *)v34 - 16) = *((_OWORD *)v38 - 16);
              v67 = *(_OWORD *)(v38 - 23);
              *(v34 - 21) = *(v38 - 21);
              *(_OWORD *)(v34 - 23) = v67;
              v68 = *((_OWORD *)v38 - 10);
              *(v38 - 20) = 0;
              *(v38 - 19) = 0;
              v69 = (std::__shared_weak_count *)*(v34 - 19);
              *((_OWORD *)v34 - 10) = v68;
              if (v69)
              {
                v70 = (unint64_t *)&v69->__shared_owners_;
                do
                  v71 = __ldaxr(v70);
                while (__stlxr(v71 - 1, v70));
                if (!v71)
                {
                  ((void (*)(std::__shared_weak_count *, __int128 *, __int128 *, __int128 *, std::__shared_weak_count *, __int128 *))v69->__on_zero_shared)(v69, a2, a3, a4, a5, a6);
                  std::__shared_weak_count::__release_weak(v69);
                }
              }
              *(v34 - 18) = *(v38 - 18);
              v72 = *(_OWORD *)(v38 - 17);
              v73 = *(_OWORD *)(v38 - 15);
              *(_OWORD *)(v34 - 13) = *(_OWORD *)(v38 - 13);
              *(_OWORD *)(v34 - 15) = v73;
              *(_OWORD *)(v34 - 17) = v72;
              v74 = *(_OWORD *)(v38 - 11);
              v75 = *(_OWORD *)(v38 - 9);
              *(_OWORD *)(v34 - 7) = *(_OWORD *)(v38 - 7);
              *(_OWORD *)(v34 - 9) = v75;
              *(_OWORD *)(v34 - 11) = v74;
              v76 = *(v38 - 5);
              *((_BYTE *)v34 - 32) = *((_BYTE *)v38 - 32);
              *(v34 - 5) = v76;
              v77 = *(_OWORD *)(v38 - 3);
              *(v38 - 3) = 0;
              *(v38 - 2) = 0;
              v78 = (std::__shared_weak_count *)*(v34 - 2);
              *(_OWORD *)(v34 - 3) = v77;
              if (v78)
              {
                v79 = (unint64_t *)&v78->__shared_owners_;
                do
                  v80 = __ldaxr(v79);
                while (__stlxr(v80 - 1, v79));
                if (!v80)
                {
                  ((void (*)(std::__shared_weak_count *, __int128 *, __int128 *, __int128 *, std::__shared_weak_count *, __int128 *))v78->__on_zero_shared)(v78, a2, a3, a4, a5, a6);
                  std::__shared_weak_count::__release_weak(v78);
                }
              }
              *((_BYTE *)v34 - 8) = *((_BYTE *)v38 - 8);
              v34 -= 35;
              v38 -= 35;
            }
            while (v62 != v11);
          }
          *v11 = v9;
          v50 = &v150[280 * v152];
          *(_OWORD *)(v50 + 8) = v193;
          *(_OWORD *)(v50 + 40) = v201;
          *(_OWORD *)(v50 + 56) = v202;
          *(_OWORD *)(v50 + 72) = v203;
          *((_QWORD *)v50 + 11) = v204;
          *(_OWORD *)(v50 + 24) = v200;
          *((_OWORD *)v50 + 6) = v191;
          *((_QWORD *)v50 + 14) = v192;
          *((_QWORD *)v50 + 15) = v32;
          v51 = (std::__shared_weak_count *)*((_QWORD *)v50 + 16);
          *((_QWORD *)v50 + 16) = *((_QWORD *)&v32 + 1);
          if (v51)
          {
            v52 = (unint64_t *)&v51->__shared_owners_;
            do
              v53 = __ldaxr(v52);
            while (__stlxr(v53 - 1, v52));
            if (!v53)
            {
              ((void (*)(std::__shared_weak_count *, __int128 *, __int128 *, __int128 *, std::__shared_weak_count *, __int128 *))v51->__on_zero_shared)(v51, a2, a3, a4, a5, a6);
              std::__shared_weak_count::__release_weak(v51);
            }
          }
          v54 = &v150[280 * v152];
          *((_QWORD *)v54 + 17) = v31;
          v55 = v198;
          *((_OWORD *)v54 + 9) = v197;
          *((_OWORD *)v54 + 10) = v55;
          v56 = v194;
          v57 = v195;
          *((_OWORD *)v54 + 11) = v199;
          *((_OWORD *)v54 + 12) = v56;
          v58 = v196;
          *((_OWORD *)v54 + 13) = v57;
          *((_OWORD *)v54 + 14) = v58;
          *((_QWORD *)v54 + 30) = v189;
          v54[248] = v190;
          v59 = (std::__shared_weak_count *)*((_QWORD *)v54 + 33);
          *((_QWORD *)v54 + 32) = v168;
          *((_QWORD *)v54 + 33) = v33;
          if (v59)
          {
            v60 = (unint64_t *)&v59->__shared_owners_;
            do
              v61 = __ldaxr(v60);
            while (__stlxr(v61 - 1, v60));
            if (!v61)
            {
              ((void (*)(std::__shared_weak_count *, __int128 *, __int128 *, __int128 *, std::__shared_weak_count *, __int128 *))v59->__on_zero_shared)(v59, a2, a3, a4, a5, a6);
              std::__shared_weak_count::__release_weak(v59);
            }
          }
          v150[280 * v152 + 272] = 0;
        }
LABEL_108:
        v33 = (std::__shared_weak_count *)*((_QWORD *)&v187 + 1);
LABEL_109:
        if (v33)
        {
          v140 = (unint64_t *)&v33->__shared_owners_;
          do
            v141 = __ldaxr(v140);
          while (__stlxr(v141 - 1, v140));
          if (!v141)
          {
            ((void (*)(std::__shared_weak_count *, __int128 *, __int128 *, __int128 *, std::__shared_weak_count *, __int128 *))v33->__on_zero_shared)(v33, a2, a3, a4, a5, a6);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        v142 = (std::__shared_weak_count *)*((_QWORD *)&v177 + 1);
        if (*((_QWORD *)&v177 + 1))
        {
          v143 = (unint64_t *)(*((_QWORD *)&v177 + 1) + 8);
          do
            v144 = __ldaxr(v143);
          while (__stlxr(v144 - 1, v143));
          if (!v144)
          {
            ((void (*)(std::__shared_weak_count *, __int128 *, __int128 *, __int128 *, std::__shared_weak_count *, __int128 *))v142->__on_zero_shared)(v142, a2, a3, a4, a5, a6);
            std::__shared_weak_count::__release_weak(v142);
          }
        }
        *(_BYTE *)(a1 + 1594) = 0;
        *(_BYTE *)(a1 + 1592) = 0;
        *(int64x2_t *)(a1 + 1576) = vaddq_s64(*(int64x2_t *)(a1 + 1576), (int64x2_t)xmmword_2103B2300);
        v17 = 1;
        goto LABEL_120;
      }
      v81 = 0xAF8AF8AF8AF8AF8BLL * (((char *)v34 - v35) >> 3) + 1;
      if (v81 > 0xEA0EA0EA0EA0EALL)
        sub_20E867F44();
      v82 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(v37 - (_QWORD)v35) >> 3);
      if (2 * v82 > v81)
        v81 = 2 * v82;
      if (v82 >= 0x75075075075075)
        v83 = 0xEA0EA0EA0EA0EALL;
      else
        v83 = v81;
      *(_QWORD *)&v202 = a1 + 1128;
      v151 = (unint64_t *)v35;
      if (v83)
      {
        if (v83 > 0xEA0EA0EA0EA0EALL)
          sub_20E877A38();
        v84 = (char *)operator new(280 * v83);
      }
      else
      {
        v84 = 0;
      }
      v95 = (uint64_t)&v84[280 * v152];
      *(_QWORD *)&v200 = v84;
      *((_QWORD *)&v200 + 1) = v95;
      *(_QWORD *)&v201 = v95;
      *((_QWORD *)&v201 + 1) = &v84[280 * v83];
      if (v152 == v83)
      {
        if (v36 >= 1)
        {
          v96 = v152 + 2;
          if (v152 >= -1)
            v96 = v152 + 1;
          v97 = v96 >> 1;
          v98 = sub_20F5B6660(v95, v95, v95 - 280 * (v96 >> 1));
          v95 = *((_QWORD *)&v200 + 1) - 280 * v97;
          *((_QWORD *)&v200 + 1) = v95;
          goto LABEL_85;
        }
        if (v151 == v11)
          v99 = 1;
        else
          v99 = 2 * v152;
        if (v99 > 0xEA0EA0EA0EA0EALL)
          sub_20E877A38();
        v100 = (char *)operator new(280 * v99);
        v95 = (uint64_t)&v100[280 * (v99 >> 2)];
        *(_QWORD *)&v200 = v100;
        *((_QWORD *)&v200 + 1) = v95;
        *((_QWORD *)&v201 + 1) = &v100[280 * v99];
        if (v84)
          operator delete(v84);
      }
      v98 = v95;
LABEL_85:
      *(_QWORD *)v98 = v9;
      *(_OWORD *)(v98 + 8) = v169;
      v101 = v170;
      *(_OWORD *)(v98 + 40) = v171;
      v102 = v173;
      *(_OWORD *)(v98 + 56) = v172;
      *(_OWORD *)(v98 + 72) = v102;
      *(_QWORD *)(v98 + 88) = v174;
      *(_OWORD *)(v98 + 24) = v101;
      *(_QWORD *)(v98 + 112) = v176;
      *(_OWORD *)(v98 + 96) = v175;
      *(_OWORD *)(v98 + 120) = v177;
      v177 = 0uLL;
      *(_QWORD *)(v98 + 136) = v178;
      v103 = v179;
      v104 = v181;
      *(_OWORD *)(v98 + 160) = v180;
      *(_OWORD *)(v98 + 176) = v104;
      *(_OWORD *)(v98 + 144) = v103;
      v105 = v182;
      v106 = v184;
      *(_OWORD *)(v98 + 208) = v183;
      *(_OWORD *)(v98 + 224) = v106;
      *(_OWORD *)(v98 + 192) = v105;
      v107 = v185;
      *(_BYTE *)(v98 + 248) = v186;
      *(_QWORD *)(v98 + 240) = v107;
      *(_OWORD *)(v98 + 256) = v187;
      v187 = 0uLL;
      *(_BYTE *)(v98 + 272) = v188;
      v108 = v98 + 280;
      *(_QWORD *)&v201 = v98 + 280;
      v109 = *(unint64_t **)(a1 + 1112);
      if (v109 != v11)
      {
        v110 = 0;
        do
        {
          v111 = v95 + v110 * 8;
          v112 = (char *)&v11[v110];
          *(_QWORD *)(v95 + v110 * 8 - 280) = v11[v110 - 35];
          *(_OWORD *)(v95 + v110 * 8 - 272) = *(_OWORD *)&v11[v110 - 34];
          v114 = *(_OWORD *)&v11[v110 - 28];
          v113 = *(_OWORD *)&v11[v110 - 26];
          v115 = *(_OWORD *)&v11[v110 - 30];
          *(_QWORD *)(v111 - 192) = v11[v110 - 24];
          *(_OWORD *)(v111 - 224) = v114;
          *(_OWORD *)(v111 - 208) = v113;
          *(_OWORD *)(v111 - 240) = v115;
          *(_OWORD *)(v111 - 256) = *(_OWORD *)&v11[v110 - 32];
          v116 = *(_OWORD *)&v11[v110 - 23];
          *(_QWORD *)(v111 - 168) = v11[v110 - 21];
          *(_OWORD *)(v111 - 184) = v116;
          *(_OWORD *)(v111 - 160) = *(_OWORD *)&v11[v110 - 20];
          *((_QWORD *)v112 - 20) = 0;
          *((_QWORD *)v112 - 19) = 0;
          *(_QWORD *)(v111 - 144) = v11[v110 - 18];
          v117 = *(_OWORD *)&v11[v110 - 17];
          v118 = *(_OWORD *)&v11[v110 - 15];
          *(_OWORD *)(v111 - 104) = *(_OWORD *)&v11[v110 - 13];
          *(_OWORD *)(v111 - 120) = v118;
          *(_OWORD *)(v111 - 136) = v117;
          v119 = *(_OWORD *)&v11[v110 - 11];
          v120 = *(_OWORD *)&v11[v110 - 9];
          *(_OWORD *)(v111 - 56) = *(_OWORD *)&v11[v110 - 7];
          *(_OWORD *)(v111 - 72) = v120;
          *(_OWORD *)(v111 - 88) = v119;
          v121 = v11[v110 - 5];
          *(_BYTE *)(v111 - 32) = v11[v110 - 4];
          *(_QWORD *)(v111 - 40) = v121;
          *(_OWORD *)(v111 - 24) = *(_OWORD *)&v11[v110 - 3];
          *((_QWORD *)v112 - 3) = 0;
          *((_QWORD *)v112 - 2) = 0;
          *(_BYTE *)(v111 - 8) = v11[v110 - 1];
          v110 -= 35;
        }
        while (&v11[v110] != v109);
        v108 = v201;
        v95 += v110 * 8;
      }
      *((_QWORD *)&v200 + 1) = v95;
      v122 = *(unint64_t **)(a1 + 1120);
      if (v122 != v11)
      {
        do
        {
          *(_QWORD *)v108 = *v11;
          *(_OWORD *)(v108 + 8) = *(_OWORD *)(v11 + 1);
          v123 = *(_OWORD *)(v11 + 7);
          v124 = *(_OWORD *)(v11 + 9);
          v125 = v11[11];
          *(_OWORD *)(v108 + 40) = *(_OWORD *)(v11 + 5);
          *(_QWORD *)(v108 + 88) = v125;
          *(_OWORD *)(v108 + 72) = v124;
          *(_OWORD *)(v108 + 56) = v123;
          *(_OWORD *)(v108 + 24) = *(_OWORD *)(v11 + 3);
          v126 = *((_OWORD *)v11 + 6);
          *(_QWORD *)(v108 + 112) = v11[14];
          *(_OWORD *)(v108 + 96) = v126;
          *(_OWORD *)(v108 + 120) = *(_OWORD *)(v11 + 15);
          v11[15] = 0;
          v11[16] = 0;
          *(_QWORD *)(v108 + 136) = v11[17];
          v127 = *((_OWORD *)v11 + 9);
          v128 = *((_OWORD *)v11 + 11);
          *(_OWORD *)(v108 + 160) = *((_OWORD *)v11 + 10);
          *(_OWORD *)(v108 + 176) = v128;
          *(_OWORD *)(v108 + 144) = v127;
          v129 = *((_OWORD *)v11 + 12);
          v130 = *((_OWORD *)v11 + 14);
          *(_OWORD *)(v108 + 208) = *((_OWORD *)v11 + 13);
          *(_OWORD *)(v108 + 224) = v130;
          *(_OWORD *)(v108 + 192) = v129;
          v131 = v11[30];
          *(_BYTE *)(v108 + 248) = *((_BYTE *)v11 + 248);
          *(_QWORD *)(v108 + 240) = v131;
          *(_OWORD *)(v108 + 256) = *((_OWORD *)v11 + 16);
          v11[32] = 0;
          v11[33] = 0;
          *(_BYTE *)(v108 + 272) = *((_BYTE *)v11 + 272);
          v108 += 280;
          v11 += 35;
        }
        while (v11 != v122);
        v95 = *((_QWORD *)&v200 + 1);
        v11 = *(unint64_t **)(a1 + 1120);
      }
      v132 = *(unint64_t **)(a1 + 1112);
      *(_QWORD *)(a1 + 1112) = v95;
      *(_QWORD *)(a1 + 1120) = v108;
      v133 = *(_QWORD *)(a1 + 1128);
      *(_QWORD *)(a1 + 1128) = *((_QWORD *)&v201 + 1);
      *((_QWORD *)&v201 + 1) = v133;
      *(_QWORD *)&v200 = v132;
      *((_QWORD *)&v200 + 1) = v132;
      if (v11 != v132)
      {
        do
        {
          *(_QWORD *)&v201 = v11 - 35;
          v134 = (std::__shared_weak_count *)*(v11 - 2);
          if (v134)
          {
            v135 = (unint64_t *)&v134->__shared_owners_;
            do
              v136 = __ldaxr(v135);
            while (__stlxr(v136 - 1, v135));
            if (!v136)
            {
              ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
              std::__shared_weak_count::__release_weak(v134);
            }
          }
          v137 = (std::__shared_weak_count *)*(v11 - 19);
          if (v137)
          {
            v138 = (unint64_t *)&v137->__shared_owners_;
            do
              v139 = __ldaxr(v138);
            while (__stlxr(v139 - 1, v138));
            if (!v139)
            {
              ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
              std::__shared_weak_count::__release_weak(v137);
            }
          }
          v11 = (unint64_t *)v201;
        }
        while ((unint64_t *)v201 != v132);
        v11 = (unint64_t *)v200;
      }
      if (v11)
        operator delete(v11);
      goto LABEL_108;
    }
    v17 = 0;
    --*(_DWORD *)(v31 + 8);
  }
LABEL_120:
  if (*((_QWORD *)&v168 + 1))
  {
    v145 = (unint64_t *)(*((_QWORD *)&v168 + 1) + 8);
    do
      v146 = __ldaxr(v145);
    while (__stlxr(v146 - 1, v145));
    if (!v146)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v168 + 1) + 16))(*((_QWORD *)&v168 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v168 + 1));
    }
  }
  if (*((_QWORD *)&v161 + 1))
  {
    v147 = (unint64_t *)(*((_QWORD *)&v161 + 1) + 8);
    do
      v148 = __ldaxr(v147);
    while (__stlxr(v148 - 1, v147));
    if (!v148)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v161 + 1) + 16))(*((_QWORD *)&v161 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v161 + 1));
    }
  }
  return v17;
}

void sub_20FB90B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  uint64_t v54;

  sub_20F626C38(v54 - 176);
  sub_20F4EE658((uint64_t)&a54);
  sub_20F4EE704((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20FB90BB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  sub_20F4EE658((uint64_t)&a54);
  sub_20F4EE704((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20FB90BD4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA04740;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20FB90BE4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA04740;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20FB90C14(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;

  v2 = (void *)a1[13];
  if (v2)
  {
    a1[14] = v2;
    operator delete(v2);
  }
  v3 = a1[12];
  a1[12] = 0;
  if (v3)
  {
    v4 = *(void **)(v3 + 48);
    if (v4)
    {
      *(_QWORD *)(v3 + 56) = v4;
      operator delete(v4);
    }
    v5 = *(void **)v3;
    if (*(_QWORD *)v3)
    {
      *(_QWORD *)(v3 + 8) = v5;
      operator delete(v5);
    }
    MEMORY[0x212BC6398](v3, 0x1030C40F7208886);
  }
  v6 = a1[11];
  a1[11] = 0;
  if (v6)
    MEMORY[0x212BC6398](v6, 0x1000C40FDACBBE0);
  v7 = a1[8];
  if (v7)
  {
    v8 = a1[9];
    v9 = (void *)a1[8];
    if (v8 != v7)
    {
      do
      {
        v10 = *(std::__shared_weak_count **)(v8 - 8);
        if (v10)
        {
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            v12 = __ldaxr(p_shared_owners);
          while (__stlxr(v12 - 1, p_shared_owners));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
        v8 -= 16;
      }
      while (v8 != v7);
      v9 = (void *)a1[8];
    }
    a1[9] = v7;
    operator delete(v9);
  }
  v13 = a1[7];
  a1[7] = 0;
  if (v13)
  {
    if (*(_QWORD *)(v13 + 24))
    {
      v14 = 0;
      v15 = (_QWORD *)(v13 + 8);
      do
      {
        if ((*(char *)(*(_QWORD *)v13 + v14) & 0x80000000) == 0)
        {
          v16 = *(std::__shared_weak_count **)(*v15 + 32 * v14 + 24);
          if (v16)
          {
            v17 = (unint64_t *)&v16->__shared_owners_;
            do
              v18 = __ldaxr(v17);
            while (__stlxr(v18 - 1, v17));
            if (!v18)
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
          }
        }
        ++v14;
      }
      while (v14 != *(_QWORD *)(v13 + 24));
      operator delete(*(void **)v13);
      *(_QWORD *)v13 = &unk_2102DAFF0;
      *(_OWORD *)v15 = 0u;
      *(_OWORD *)(v13 + 24) = 0u;
    }
    MEMORY[0x212BC6398](v13, 0x10A0C40EE0660CCLL);
  }
  v19 = a1[6];
  a1[6] = 0;
  if (v19)
  {
    if (*(_QWORD *)(v19 + 24))
    {
      v20 = 0;
      v21 = (_QWORD *)(v19 + 8);
      do
      {
        if ((*(char *)(*(_QWORD *)v19 + v20) & 0x80000000) == 0)
        {
          v22 = *(std::__shared_weak_count **)(*v21 + 32 * v20 + 24);
          if (v22)
          {
            v23 = (unint64_t *)&v22->__shared_owners_;
            do
              v24 = __ldaxr(v23);
            while (__stlxr(v24 - 1, v23));
            if (!v24)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
            }
          }
        }
        ++v20;
      }
      while (v20 != *(_QWORD *)(v19 + 24));
      operator delete(*(void **)v19);
      *(_QWORD *)v19 = &unk_2102DAFF0;
      *(_OWORD *)v21 = 0u;
      *(_OWORD *)(v19 + 24) = 0u;
    }
    MEMORY[0x212BC6398](v19, 0x10A0C40EE0660CCLL);
  }
  v25 = a1[5];
  a1[5] = 0;
  if (v25)
  {
    if (*(_QWORD *)(v25 + 24))
    {
      v26 = 0;
      v27 = (_QWORD *)(v25 + 8);
      do
      {
        if ((*(char *)(*(_QWORD *)v25 + v26) & 0x80000000) == 0)
        {
          v28 = *(std::__shared_weak_count **)(*v27 + 32 * v26 + 24);
          if (v28)
          {
            v29 = (unint64_t *)&v28->__shared_owners_;
            do
              v30 = __ldaxr(v29);
            while (__stlxr(v30 - 1, v29));
            if (!v30)
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v28);
            }
          }
        }
        ++v26;
      }
      while (v26 != *(_QWORD *)(v25 + 24));
      operator delete(*(void **)v25);
      *(_QWORD *)v25 = &unk_2102DAFF0;
      *(_OWORD *)v27 = 0u;
      *(_OWORD *)(v25 + 24) = 0u;
    }
    MEMORY[0x212BC6398](v25, 0x10A0C40EE0660CCLL);
  }
  v31 = a1 + 3;
  v32 = a1[4];
  a1[4] = 0;
  if (v32)
  {
    v33 = *(std::__shared_weak_count **)(v32 + 80);
    if (v33)
    {
      v34 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    sub_20E8E90DC(v32 + 24);
    sub_20EE7D0A8(*(_QWORD **)(v32 + 8));
    MEMORY[0x212BC6398](v32, 0x10A0C40F3FF88D7);
  }
  v36 = *v31;
  *v31 = 0;
  if (v36)
    sub_20E8E922C((uint64_t)v31, v36);
}

void sub_20FB90FD8(char **a1, char *a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *i;
  unint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[3];
  a1[3] = a2;
  v7 = (unint64_t)(a2 + 11) & 0xFFFFFFFFFFFFFFFCLL;
  v8 = (char *)operator new((unint64_t)&a2[4 * (_QWORD)a2 + 11] & 0xFFFFFFFFFFFFFFFCLL);
  v9 = &v8[v7];
  *a1 = v8;
  a1[1] = v9;
  memset(v8, 128, (size_t)(a2 + 8));
  a2[(_QWORD)v8] = -1;
  v10 = (uint64_t)&a2[-((unint64_t)a2 >> 3)];
  if (a2 == (char *)7)
    v10 = 6;
  a1[4] = (char *)(v10 - (_QWORD)a1[2]);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
    {
      if ((i[(_QWORD)v4] & 0x80000000) == 0)
      {
        v14 = *(unsigned int *)&v5[4 * (_QWORD)i];
        v15 = (0x376ADF16980614E5 - 0x622015F714C7D297 * v14) ^ ((unint64_t)(0x376ADF16980614E5
                                                                                      - 0x622015F714C7D297 * v14) >> 32);
        v16 = ((v15 >> 7) ^ 0x13701D) & (unint64_t)a2;
        v17 = *(_QWORD *)&v8[v16] & (~*(_QWORD *)&v8[v16] << 7) & 0x8080808080808080;
        if (!v17)
        {
          v18 = 8;
          do
          {
            v16 = (v16 + v18) & (unint64_t)a2;
            v18 += 8;
            v17 = *(_QWORD *)&v8[v16] & (~*(_QWORD *)&v8[v16] << 7) & 0x8080808080808080;
          }
          while (!v17);
        }
        v12 = (v16 + (__clz(__rbit64(v17)) >> 3)) & (unint64_t)a2;
        v13 = v15 & 0x7F;
        v8[v12] = v13;
        v8[((v12 - 7) & (unint64_t)a2) + (a2 & 7)] = v13;
        *(_DWORD *)&v9[4 * v12] = v14;
      }
    }
    operator delete(v4);
  }
}

unint64_t sub_20FB91150(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t result;
  uint64_t v10;

  v4 = *a1;
  v5 = a1[3];
  v6 = v5 & ((a2 >> 7) ^ 0x13701D);
  v7 = *(_QWORD *)(*a1 + v6) & (~*(_QWORD *)(*a1 + v6) << 7) & 0x8080808080808080;
  if (!v7)
  {
    v8 = 8;
    do
    {
      v6 = (v6 + v8) & v5;
      v8 += 8;
      v7 = *(_QWORD *)(v4 + v6) & (~*(_QWORD *)(v4 + v6) << 7) & 0x8080808080808080;
    }
    while (!v7);
  }
  result = (v6 + (__clz(__rbit64(v7)) >> 3)) & v5;
  v10 = a1[4];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + result) == 254)
    {
      v10 = 0;
    }
    else
    {
      sub_20FB91248((uint64_t)a1);
      result = sub_20E8D7E78(*a1, a2, a1[3]);
      v4 = *a1;
      v5 = a1[3];
      v10 = a1[4];
    }
  }
  ++a1[2];
  a1[4] = v10 - (*(unsigned __int8 *)(v4 + result) == 128);
  *(_BYTE *)(v4 + result) = a2 & 0x7F;
  *(_BYTE *)(v4 + ((result - 7) & v5) + (v5 & 7)) = a2 & 0x7F;
  return result;
}

void sub_20FB91248(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
  {
    v2 = 1;
    goto LABEL_5;
  }
  if (v1 < 9 || 25 * v1 < 32 * *(_QWORD *)(a1 + 16))
  {
    v2 = (2 * v1) | 1;
LABEL_5:
    sub_20FB90FD8((char **)a1, (char *)v2);
    return;
  }
  sub_20FB91284((unint64_t *)a1);
}

unint64_t sub_20FB91284(unint64_t *a1)
{
  unint64_t result;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  result = sub_20E8D7ED4(*a1, a1[3]);
  v3 = a1[3];
  if (v3)
  {
    v4 = 0;
    v5 = a1[3] & 7;
    v6 = *a1;
    do
    {
      if (*(unsigned __int8 *)(v6 + v4) == 254)
      {
        v9 = a1[1];
        v10 = *(unsigned int *)(v9 + 4 * v4);
        result = (0x376ADF16980614E5 - 0x622015F714C7D297 * v10) ^ ((unint64_t)(0x376ADF16980614E5
                                                                                         - 0x622015F714C7D297 * v10) >> 32);
        v11 = ((result >> 7) ^ 0x13701D) & v3;
        v12 = *(_QWORD *)(v6 + v11) & (~*(_QWORD *)(v6 + v11) << 7) & 0x8080808080808080;
        if (v12)
        {
          v7 = ((result >> 7) ^ 0x13701D) & v3;
        }
        else
        {
          v13 = 8;
          v7 = ((result >> 7) ^ 0x13701D) & v3;
          do
          {
            v7 = (v7 + v13) & v3;
            v13 += 8;
            v12 = *(_QWORD *)(v6 + v7) & (~*(_QWORD *)(v6 + v7) << 7) & 0x8080808080808080;
          }
          while (!v12);
        }
        v8 = (v7 + (__clz(__rbit64(v12)) >> 3)) & v3;
        if ((((v8 - v11) ^ (v4 - v11)) & v3) > 7)
        {
          v14 = *(unsigned __int8 *)(v6 + v8);
          result &= 0x7Fu;
          *(_BYTE *)(v6 + v8) = result;
          *(_BYTE *)(v6 + ((v8 - 7) & v3) + v5) = result;
          if (v14 == 128)
          {
            *(_DWORD *)(v9 + 4 * v8) = v10;
            *(_BYTE *)(v6 + v4) = 0x80;
            *(_BYTE *)(v6 + ((v4 - 7) & v3) + v5) = 0x80;
          }
          else
          {
            result = 4 * v8;
            *(_DWORD *)(v9 + 4 * v4--) = *(_DWORD *)(v9 + 4 * v8);
            *(_DWORD *)(v9 + 4 * v8) = v10;
          }
        }
        else
        {
          *(_BYTE *)(v6 + v4) = result & 0x7F;
          *(_BYTE *)(v6 + ((v4 - 7) & v3) + v5) = result & 0x7F;
        }
      }
      ++v4;
    }
    while (v4 != v3);
  }
  v15 = v3 - (v3 >> 3);
  v16 = v3 == 7;
  v17 = 6;
  if (!v16)
    v17 = v15;
  a1[4] = v17 - a1[2];
  return result;
}

BOOL sub_20FB91418(std::mutex *a1, uint64_t a2)
{
  _BOOL8 result;
  void *v4;
  std::__shared_weak_count *v5;

  result = sub_20FB916A4(a1, a2);
  if (a2 && !result)
  {
    if (*(_BYTE *)(a2 + 488))
      *(_BYTE *)(a2 + 488) = 0;
    v4 = *(void **)(a2 + 496);
    *(_QWORD *)(a2 + 504) = v4;
    *(_DWORD *)(a2 + 520) = 0;
    if (v4)
      operator delete(v4);
    v5 = *(std::__shared_weak_count **)(a2 + 8);
    if (v5)
      std::__shared_weak_count::__release_weak(v5);
    JUMPOUT(0x212BC6398);
  }
  return result;
}

void sub_20FB9148C(std::__shared_weak_count *this)
{
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v4;

  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA04790;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (!shared_weak_owners)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&shared_weak_owners->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
    std::__shared_weak_count::__release_weak(shared_weak_owners);
    std::__shared_weak_count::~__shared_weak_count(this);
  }
  else
  {
LABEL_5:
    std::__shared_weak_count::~__shared_weak_count(this);
  }
}

void sub_20FB91500(std::__shared_weak_count *this)
{
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v4;

  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA04790;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    p_shared_owners = (unint64_t *)&shared_weak_owners->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
      std::__shared_weak_count::__release_weak(shared_weak_owners);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(this);
  JUMPOUT(0x212BC6398);
}

void sub_20FB91578(uint64_t a1)
{
  uint64_t v2;
  BOOL v3;
  char v4;
  void *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = sub_20FB916A4(*(std::mutex **)(a1 + 32), v2);
  if (v2)
    v4 = v3;
  else
    v4 = 1;
  if ((v4 & 1) == 0)
  {
    if (*(_BYTE *)(v2 + 488))
      *(_BYTE *)(v2 + 488) = 0;
    v5 = *(void **)(v2 + 496);
    *(_QWORD *)(v2 + 504) = v5;
    *(_DWORD *)(v2 + 520) = 0;
    if (v5)
      operator delete(v5);
    v6 = *(std::__shared_weak_count **)(v2 + 8);
    if (v6)
      std::__shared_weak_count::__release_weak(v6);
    MEMORY[0x212BC6398](v2, 0x10E2C401D09A2A5);
  }
  v7 = *(std::__shared_weak_count **)(a1 + 40);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

uint64_t sub_20FB91634(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3kit6memory10ObjectPoolIN3cva5TrackINS_3vio13VIOPoint2DNSPENS5_18VIOAnchoredPoint3DIdLb1EEELb"
                     "1EEENS1_18AutoReturningMakeTIS9_NS1_21PoolObjectInitializerIS9_EENS1_23PoolObjectDeinitializerIS9_E"
                     "EEENSt3__110shared_ptrIS9_EENS1_19ObjectBorrowingPoolINSG_10unique_ptrIS9_NSG_14default_deleteIS9_E"
                     "EEESF_EEE13ObjectDeleterE")
    return a1 + 32;
  if (((v3 & (unint64_t)"N4cv3d3kit6memory10ObjectPoolIN3cva5TrackINS_3vio13VIOPoint2DNSPENS5_18VIOAnchoredPoint3"
                                "DIdLb1EEELb1EEENS1_18AutoReturningMakeTIS9_NS1_21PoolObjectInitializerIS9_EENS1_23PoolOb"
                                "jectDeinitializerIS9_EEEENSt3__110shared_ptrIS9_EENS1_19ObjectBorrowingPoolINSG_10unique"
                                "_ptrIS9_NSG_14default_deleteIS9_EEEESF_EEE13ObjectDeleterE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3kit6memory10ObjectPoolIN3cva5TrackINS_3vio13VIOPoint2DNSPENS5_18VIOAnchoredPoint3DIdLb1EEELb1EEENS1_18AutoReturningMakeTIS9_NS1_21PoolObjectInitializerIS9_EENS1_23PoolObjectDeinitializerIS9_EEEENSt3__110shared_ptrIS9_EENS1_19ObjectBorrowingPoolINSG_10unique_ptrIS9_NSG_14default_deleteIS9_EEEESF_EEE13ObjectDeleterE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit6memory10ObjectPoolIN3cva5TrackINS_3vio13VIOPoint2DNSPENS5_18VIOAnchoredPoint3DIdLb1EEELb1EEENS1_18AutoReturningMakeTIS9_NS1_21PoolObjectInitializerIS9_EENS1_23PoolObjectDeinitializerIS9_EEEENSt3__110shared_ptrIS9_EENS1_19ObjectBorrowingPoolINSG_10unique_ptrIS9_NSG_14default_deleteIS9_EEEESF_EEE13ObjectDeleterE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 32;
  return 0;
}

BOOL sub_20FB916A4(std::mutex *a1, uint64_t a2)
{
  _QWORD *sig;
  unint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  std::__shared_weak_count *v31;

  std::mutex::lock(a1);
  sig = (_QWORD *)a1[1].__m_.__sig;
  if (sig)
  {
    v6 = (char *)sig[2];
    v5 = sig[3];
    if ((unint64_t)v6 >= v5)
    {
      v7 = (char *)sig[1];
      v8 = (v6 - v7) >> 3;
      v9 = v8 + 1;
      if ((unint64_t)(v8 + 1) >> 61)
        sub_20E867F44();
      v10 = v5 - (_QWORD)v7;
      if (v10 >> 2 > v9)
        v9 = v10 >> 2;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
        v11 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v11 = v9;
      if (v11)
      {
        if (v11 >> 61)
          sub_20E877A38();
        v12 = (char *)operator new(8 * v11);
      }
      else
      {
        v12 = 0;
      }
      v13 = &v12[8 * v8];
      v14 = &v12[8 * v11];
      *(_QWORD *)v13 = a2;
      v15 = v13 + 8;
      if (v6 == v7)
      {
        sig[1] = v13;
        sig[2] = v15;
        sig[3] = v14;
      }
      else
      {
        v16 = v6 - v7 - 8;
        if (v16 < 0x78)
          goto LABEL_44;
        if (&v6[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v13 && &v12[v6 - v7 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v6)
          goto LABEL_44;
        v18 = (v16 >> 3) + 1;
        v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
        v13 -= v19;
        v20 = &v6[-v19];
        v21 = v6 - 16;
        v22 = &v12[8 * v8 - 16];
        v23 = v18 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v25 = *((_OWORD *)v21 - 1);
          v24 = *(_OWORD *)v21;
          *((_OWORD *)v21 - 1) = 0uLL;
          *(_OWORD *)v21 = 0uLL;
          *((_OWORD *)v22 - 1) = v25;
          *(_OWORD *)v22 = v24;
          v21 -= 32;
          v22 -= 32;
          v23 -= 4;
        }
        while (v23);
        v6 = v20;
        if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_44:
          do
          {
            v26 = *((_QWORD *)v6 - 1);
            v6 -= 8;
            *(_QWORD *)v6 = 0;
            *((_QWORD *)v13 - 1) = v26;
            v13 -= 8;
          }
          while (v6 != v7);
        }
        v6 = (char *)sig[1];
        v27 = (char *)sig[2];
        sig[1] = v13;
        sig[2] = v15;
        sig[3] = v14;
        while (v27 != v6)
        {
          v29 = *((_QWORD *)v27 - 1);
          v27 -= 8;
          v28 = v29;
          *(_QWORD *)v27 = 0;
          if (v29)
          {
            if (*(_BYTE *)(v28 + 488))
              *(_BYTE *)(v28 + 488) = 0;
            v30 = *(void **)(v28 + 496);
            *(_QWORD *)(v28 + 504) = v30;
            *(_DWORD *)(v28 + 520) = 0;
            if (v30)
              operator delete(v30);
            v31 = *(std::__shared_weak_count **)(v28 + 8);
            if (v31)
              std::__shared_weak_count::__release_weak(v31);
            MEMORY[0x212BC6398](v28, 0x10E2C401D09A2A5);
          }
        }
      }
      if (v6)
        operator delete(v6);
      sig[2] = v15;
    }
    else
    {
      *(_QWORD *)v6 = a2;
      sig[2] = v6 + 8;
    }
  }
  std::mutex::unlock(a1);
  return sig != 0;
}

void sub_20FB91908(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::mutex *v2;
  va_list va;

  va_start(va, a2);
  sub_20FB44988((uint64_t *)va);
  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

void sub_20FB91924()
{
  JUMPOUT(0x212BC6398);
}

BOOL sub_20FB91938(std::mutex *a1, uint64_t a2)
{
  _BOOL8 result;
  void *v4;
  std::__shared_weak_count *v5;

  result = sub_20FB91BC4(a1, a2);
  if (a2 && !result)
  {
    if (*(_BYTE *)(a2 + 968))
      *(_BYTE *)(a2 + 968) = 0;
    v4 = *(void **)(a2 + 976);
    *(_QWORD *)(a2 + 984) = v4;
    *(_DWORD *)(a2 + 1000) = 0;
    if (v4)
      operator delete(v4);
    v5 = *(std::__shared_weak_count **)(a2 + 8);
    if (v5)
      std::__shared_weak_count::__release_weak(v5);
    JUMPOUT(0x212BC6398);
  }
  return result;
}

void sub_20FB919AC(std::__shared_weak_count *this)
{
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v4;

  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA047E0;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (!shared_weak_owners)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&shared_weak_owners->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
    std::__shared_weak_count::__release_weak(shared_weak_owners);
    std::__shared_weak_count::~__shared_weak_count(this);
  }
  else
  {
LABEL_5:
    std::__shared_weak_count::~__shared_weak_count(this);
  }
}

void sub_20FB91A20(std::__shared_weak_count *this)
{
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v4;

  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA047E0;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    p_shared_owners = (unint64_t *)&shared_weak_owners->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
      std::__shared_weak_count::__release_weak(shared_weak_owners);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(this);
  JUMPOUT(0x212BC6398);
}

void sub_20FB91A98(uint64_t a1)
{
  uint64_t v2;
  BOOL v3;
  char v4;
  void *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = sub_20FB91BC4(*(std::mutex **)(a1 + 32), v2);
  if (v2)
    v4 = v3;
  else
    v4 = 1;
  if ((v4 & 1) == 0)
  {
    if (*(_BYTE *)(v2 + 968))
      *(_BYTE *)(v2 + 968) = 0;
    v5 = *(void **)(v2 + 976);
    *(_QWORD *)(v2 + 984) = v5;
    *(_DWORD *)(v2 + 1000) = 0;
    if (v5)
      operator delete(v5);
    v6 = *(std::__shared_weak_count **)(v2 + 8);
    if (v6)
      std::__shared_weak_count::__release_weak(v6);
    MEMORY[0x212BC6398](v2, 0x10E2C408E9A3F00);
  }
  v7 = *(std::__shared_weak_count **)(a1 + 40);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

uint64_t sub_20FB91B54(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3kit6memory10ObjectPoolIN3cva5TrackINS_3vio12VIOLine2DNSPENS5_17VIOAnchoredLine3DIdEELb1EEENS"
                     "1_18AutoReturningMakeTIS9_NS1_21PoolObjectInitializerIS9_EENS1_23PoolObjectDeinitializerIS9_EEEENSt"
                     "3__110shared_ptrIS9_EENS1_19ObjectBorrowingPoolINSG_10unique_ptrIS9_NSG_14default_deleteIS9_EEEESF_"
                     "EEE13ObjectDeleterE")
    return a1 + 32;
  if (((v3 & (unint64_t)"N4cv3d3kit6memory10ObjectPoolIN3cva5TrackINS_3vio12VIOLine2DNSPENS5_17VIOAnchoredLine3DI"
                                "dEELb1EEENS1_18AutoReturningMakeTIS9_NS1_21PoolObjectInitializerIS9_EENS1_23PoolObjectDe"
                                "initializerIS9_EEEENSt3__110shared_ptrIS9_EENS1_19ObjectBorrowingPoolINSG_10unique_ptrIS"
                                "9_NSG_14default_deleteIS9_EEEESF_EEE13ObjectDeleterE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3kit6memory10ObjectPoolIN3cva5TrackINS_3vio12VIOLine2DNSPENS5_17VIOAnchoredLine3DIdEELb1EEENS1_18AutoReturningMakeTIS9_NS1_21PoolObjectInitializerIS9_EENS1_23PoolObjectDeinitializerIS9_EEEENSt3__110shared_ptrIS9_EENS1_19ObjectBorrowingPoolINSG_10unique_ptrIS9_NSG_14default_deleteIS9_EEEESF_EEE13ObjectDeleterE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit6memory10ObjectPoolIN3cva5TrackINS_3vio12VIOLine2DNSPENS5_17VIOAnchoredLine3DIdEELb1EEENS1_18AutoReturningMakeTIS9_NS1_21PoolObjectInitializerIS9_EENS1_23PoolObjectDeinitializerIS9_EEEENSt3__110shared_ptrIS9_EENS1_19ObjectBorrowingPoolINSG_10unique_ptrIS9_NSG_14default_deleteIS9_EEEESF_EEE13ObjectDeleterE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 32;
  return 0;
}

BOOL sub_20FB91BC4(std::mutex *a1, uint64_t a2)
{
  _QWORD *sig;
  unint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  std::__shared_weak_count *v31;

  std::mutex::lock(a1);
  sig = (_QWORD *)a1[1].__m_.__sig;
  if (sig)
  {
    v6 = (char *)sig[2];
    v5 = sig[3];
    if ((unint64_t)v6 >= v5)
    {
      v7 = (char *)sig[1];
      v8 = (v6 - v7) >> 3;
      v9 = v8 + 1;
      if ((unint64_t)(v8 + 1) >> 61)
        sub_20E867F44();
      v10 = v5 - (_QWORD)v7;
      if (v10 >> 2 > v9)
        v9 = v10 >> 2;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
        v11 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v11 = v9;
      if (v11)
      {
        if (v11 >> 61)
          sub_20E877A38();
        v12 = (char *)operator new(8 * v11);
      }
      else
      {
        v12 = 0;
      }
      v13 = &v12[8 * v8];
      v14 = &v12[8 * v11];
      *(_QWORD *)v13 = a2;
      v15 = v13 + 8;
      if (v6 == v7)
      {
        sig[1] = v13;
        sig[2] = v15;
        sig[3] = v14;
      }
      else
      {
        v16 = v6 - v7 - 8;
        if (v16 < 0x78)
          goto LABEL_44;
        if (&v6[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v13 && &v12[v6 - v7 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v6)
          goto LABEL_44;
        v18 = (v16 >> 3) + 1;
        v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
        v13 -= v19;
        v20 = &v6[-v19];
        v21 = v6 - 16;
        v22 = &v12[8 * v8 - 16];
        v23 = v18 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v25 = *((_OWORD *)v21 - 1);
          v24 = *(_OWORD *)v21;
          *((_OWORD *)v21 - 1) = 0uLL;
          *(_OWORD *)v21 = 0uLL;
          *((_OWORD *)v22 - 1) = v25;
          *(_OWORD *)v22 = v24;
          v21 -= 32;
          v22 -= 32;
          v23 -= 4;
        }
        while (v23);
        v6 = v20;
        if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_44:
          do
          {
            v26 = *((_QWORD *)v6 - 1);
            v6 -= 8;
            *(_QWORD *)v6 = 0;
            *((_QWORD *)v13 - 1) = v26;
            v13 -= 8;
          }
          while (v6 != v7);
        }
        v6 = (char *)sig[1];
        v27 = (char *)sig[2];
        sig[1] = v13;
        sig[2] = v15;
        sig[3] = v14;
        while (v27 != v6)
        {
          v29 = *((_QWORD *)v27 - 1);
          v27 -= 8;
          v28 = v29;
          *(_QWORD *)v27 = 0;
          if (v29)
          {
            if (*(_BYTE *)(v28 + 968))
              *(_BYTE *)(v28 + 968) = 0;
            v30 = *(void **)(v28 + 976);
            *(_QWORD *)(v28 + 984) = v30;
            *(_DWORD *)(v28 + 1000) = 0;
            if (v30)
              operator delete(v30);
            v31 = *(std::__shared_weak_count **)(v28 + 8);
            if (v31)
              std::__shared_weak_count::__release_weak(v31);
            MEMORY[0x212BC6398](v28, 0x10E2C408E9A3F00);
          }
        }
      }
      if (v6)
        operator delete(v6);
      sig[2] = v15;
    }
    else
    {
      *(_QWORD *)v6 = a2;
      sig[2] = v6 + 8;
    }
  }
  std::mutex::unlock(a1);
  return sig != 0;
}

void sub_20FB91E28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::mutex *v2;
  va_list va;

  va_start(va, a2);
  sub_20FB44A44((uint64_t *)va);
  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

void sub_20FB91E44(unsigned int a1, unsigned int a2, uint64_t a3, _QWORD *a4, int a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9)
{
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *i;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  uint64_t v30;
  uint64_t v31;
  int v32;

  v13 = a7 + a5;
  if (a7 + a5 < 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioflintconverter.hpp", 1858, (uint64_t)"fo + obs_offset >= 0", 20, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_20;
  }
  v14 = *(unsigned int *)(*a4 + 4 * v13);
  if (a1 >= 0x10000
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_20;
  }
  if (a2 >= 0x10000
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 39, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0)|| a1 >= 0x10000&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0)|| a2 >= 0x10000
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_20;
  }
  v15 = *(_QWORD *)(*(_QWORD *)(a3 + 152) + 8 * a6);
  v16 = *(_QWORD *)(a3 + 224) + 8 * v15;
  v17 = *(_QWORD *)(a3 + 32) + 16 * v15;
  v18 = *(_QWORD *)(a3 + 56) + 4 * v15;
  v30 = 0;
  v31 = v14;
  v32 = (unsigned __int16)a2 | ((unsigned __int16)a1 << 16);
  sub_20FB92124(v16, v17, v18, a7, (uint64_t)&v30, a8, a9);
  v19 = *(unsigned int *)(a3 + 488);
  if ((_DWORD)v19)
  {
    for (i = (_QWORD *)(a3 + 304); ; i += 10)
    {
      v21 = *(_QWORD *)(*(_QWORD *)(a3 + 152) + 8 * a6);
      v22 = *i + 8 * v21;
      v23 = *(i - 7);
      v24 = *(i - 4);
      if (*((_DWORD *)i - 2) >= 0x10000u
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v25 = *((_DWORD *)i - 1);
      if (v25 >= 0x10000)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
        {
          break;
        }
        LOWORD(v25) = *((_WORD *)i - 2);
      }
      v26 = (unsigned __int16)v25 | ((unsigned __int16)*((_DWORD *)i - 2) << 16);
      v30 = 0;
      v31 = v14;
      v32 = v26;
      sub_20FB92124(v22, v23 + 16 * v21, v24 + 4 * v21, a7, (uint64_t)&v30, a8, a9);
      if (!--v19)
        return;
    }
LABEL_20:
    abort();
  }
}

