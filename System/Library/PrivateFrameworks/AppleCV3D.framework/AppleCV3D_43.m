void sub_20FB92124(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v20;
  uint64_t *v21;
  int8x16_t v22;
  int8x16_t v23;
  int32x4_t v24;
  int32x4_t v25;
  float64x2_t v26;
  float64x2_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  double v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  size_t v40;
  const char *v41;
  unsigned __int8 v42;
  unsigned __int8 v43;
  const char *v44;
  size_t v45;
  _BYTE *v46;
  unint64_t v47;
  const char *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  __int128 *p_p;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  size_t v57;
  std::__shared_weak_count_vtbl *v58;
  std::__shared_weak_count *v59;
  std::__shared_weak_count *v60;
  unint64_t *p_shared_owners;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  __darwin_time_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  void *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unsigned int v92;
  uint64_t v93;
  _QWORD *v94;
  __int128 v95;
  float64x2_t v96;
  _QWORD *v97;
  char v98;
  uint64_t v99;
  __int128 v100;
  float64x2_t v107;
  double v108;
  uint64_t *v109;
  unsigned __int8 v110;
  char *v112;
  size_t v113;
  __darwin_time_t tv_sec;
  uint64_t v115;
  uint64_t i;
  uint64_t v117;
  __int128 v118;
  uint64_t v119;
  _QWORD v120[3];
  uint64_t v121[2];
  float64x2_t v122;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v124;
  const char *v125;
  int v126;
  const char *v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  uint64_t v130;
  uint64_t v131;
  __int128 v132;
  int v133;
  _BYTE object[24];
  __int128 v135;
  __int128 __p;
  unint64_t v137;
  void *v138;
  char v139;
  char v140;
  void *v141;
  char v142;
  void *v143;
  char v144;
  timespec v145;
  uint64_t v146;

  v146 = *MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD *)(a1 + 8 * a4);
  v133 = *(_DWORD *)(a3 + 4 * a4);
  v130 = 2139095039;
  v131 = v10;
  v11 = 16 * a4;
  v132 = *(_OWORD *)(a2 + v11);
  *(_OWORD *)object = *(_OWORD *)a5;
  *(_QWORD *)&object[16] = *(_QWORD *)(a5 + 16);
  *(_QWORD *)&v135 = 2139095039;
  v12 = *(_OWORD *)(a2 + v11);
  *((_QWORD *)&v135 + 1) = v10;
  __p = v12;
  LODWORD(v137) = v133;
  v13 = *(_QWORD *)(a7 + 496);
  v14 = *(_QWORD *)(a7 + 504);
  if (v14 != v13)
  {
    v15 = (v14 - v13) >> 6;
    while (1)
    {
      v16 = v15 >> 1;
      v17 = v13 + (v15 >> 1 << 6);
      v18 = *(_DWORD *)(v17 + 16);
      _CF = v18 >= *(_DWORD *)&object[16];
      if (v18 != *(_DWORD *)&object[16])
        goto LABEL_9;
      if (*(_QWORD *)v17 >= *(_QWORD *)object)
        break;
LABEL_3:
      v13 = v17 + 64;
      v16 = v15 + ~v16;
LABEL_4:
      v15 = v16;
      if (!v16)
        goto LABEL_12;
    }
    if (*(_QWORD *)v17 != *(_QWORD *)object)
      goto LABEL_4;
    _CF = *(_DWORD *)(v17 + 8) >= *(_DWORD *)&object[8];
LABEL_9:
    if (_CF)
      goto LABEL_4;
    goto LABEL_3;
  }
LABEL_12:
  if (v13 == v14
    || *(_DWORD *)(v13 + 16) != *(_DWORD *)(a5 + 16)
    || *(_QWORD *)v13 != *(_QWORD *)a5
    || (v20 = *(_QWORD *)(a7 + 504), *(_DWORD *)(v13 + 8) != *(_DWORD *)(a5 + 8)))
  {
    v20 = sub_20FB97990((char **)(a7 + 496), (char *)v13, (__int128 *)object);
    v14 = *(_QWORD *)(a7 + 504);
  }
  if (v14 != v20)
  {
    sub_20FB97204((uint64_t *)a7, a5, (uint64_t)&v130);
    v14 = *(_QWORD *)(a7 + 504);
  }
  if (v14 != v20)
  {
    if (*(_BYTE *)(a7 + 488)
      || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioflintconverter.hpp", 1705, (uint64_t)"track.hasStructure()", 20, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)(a7 + 40) + 24))(a7 + 40) & 1) != 0)
        return;
      v21 = sub_20E9DF85C((_QWORD *)(a6 + 1784), (uint64_t *)a5);
      v28 = v21 ? (uint64_t)(v21 + 5) : 0;
      if (v21
        || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioflintconverter.hpp", 1714, (uint64_t)"pose_ref != nullptr", 19, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        v29 = *(_QWORD *)(v28 + 64);
        if (v29)
          goto LABEL_31;
        if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioflintconverter.hpp", 1715, (uint64_t)"pose_ref->lens", 14, (uint64_t)"Lens does not exist", 19, (void (*)(void **))sub_21023DDB0))
        {
          v29 = *(_QWORD *)(v28 + 64);
LABEL_31:
          v30 = *((float *)&v10 + 1);
          *(double *)v121 = *(float *)&v10;
          *(double *)&v121[1] = *((float *)&v10 + 1);
          *(_QWORD *)object = &v145;
          *(_QWORD *)&object[8] = v121;
          *(_QWORD *)&object[16] = 0;
          v31 = *(_DWORD *)(v29 + 992);
          if (v31 == -1)
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
            v31 = *(_DWORD *)(v29 + 992);
            if (v31 > 7)
              goto LABEL_45;
          }
          else if (v31 > 7)
          {
            goto LABEL_45;
          }
          if (v31 <= 1)
          {
            if (!v31)
            {
              sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
              abort();
            }
            v32 = *(_QWORD *)object;
            v33 = *(_QWORD *)&object[8];
            v24.i64[0] = *(_QWORD *)(*(_QWORD *)&object[8] + 8);
            v34 = *(_QWORD **)&object[16];
            **(double **)object = *(double *)(v29 + 88)
                                + *(double *)(v29 + 72) * **(double **)&object[8]
                                + *(double *)(v29 + 80) * *(double *)v24.i64;
            v35 = *(double *)(v29 + 104);
            v23.i64[0] = *(_QWORD *)(v29 + 112);
            *(double *)v22.i64 = v35 * *(double *)(v33 + 8) + *(double *)v23.i64;
            *(_QWORD *)(v32 + 8) = v22.i64[0];
            if (v34)
            {
              *v34 = *(_QWORD *)(v29 + 72);
              v34[1] = *(_QWORD *)(v29 + 80);
              v34[2] = 0;
              v22.i64[0] = *(_QWORD *)(v29 + 104);
              v34[3] = v22.i64[0];
            }
LABEL_128:
            *(_QWORD *)object = &v122;
            *(_QWORD *)&object[8] = &v145;
            v135 = 0uLL;
            *(_QWORD *)&object[16] = v120;
            v92 = *(_DWORD *)(v29 + 992);
            if (v92 == -1)
            {
              if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
              {
                abort();
              }
              v92 = *(_DWORD *)(v29 + 992);
              if (v92 <= 7)
              {
LABEL_130:
                if (v92 > 3)
                {
                  if (v92 > 5)
                  {
                    if (v92 == 6)
                      v98 = sub_20EB41C58((double *)v29, *(uint64_t *)object, *(double **)&object[8], *(_QWORD **)&object[16], v135, *((uint64_t *)&v135 + 1));
                    else
                      v98 = sub_20EB306CC(v29, *(uint64_t *)object, *(float64x2_t **)&object[8], *(float64x2_t **)&object[16], v135, *((uint64_t *)&v135 + 1), *(double *)v22.i64, v35, v23, (int8x16_t)v24, *(double *)v25.i64, v26.f64[0], v27);
                  }
                  else if (v92 == 5)
                  {
                    v98 = sub_20FA2A308((uint64_t *)object, v29);
                  }
                  else
                  {
                    v98 = sub_20FA2A228((uint64_t *)object, v29, v22, v35, v23, (int8x16_t)v24, *(double *)v25.i64, v26.f64[0], v27);
                  }
                }
                else
                {
                  if (v92 <= 1)
                  {
                    if (!v92)
                    {
                      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
                      abort();
                    }
                    v93 = *(_QWORD *)object;
                    v94 = *(_QWORD **)&object[16];
                    v95 = v135;
                    v96 = **(float64x2_t **)&object[8];
                    **(_OWORD **)object = **(_OWORD **)&object[8];
                    *(_QWORD *)(v93 + 16) = 0x3FF0000000000000;
                    if (v94)
                    {
                      *v94 = 0;
                      v94[1] = 0;
                      v94[2] = 0;
                    }
                    if ((_QWORD)v95)
                    {
                      *(_OWORD *)v95 = xmmword_210312EC0;
                      *(_OWORD *)(v95 + 16) = unk_210312ED0;
                      v96.f64[1] = 0.0;
                      *(_OWORD *)(v95 + 32) = xmmword_210312EE0;
                    }
                    if (*((_QWORD *)&v95 + 1))
                    {
                      *(_QWORD *)(*((_QWORD *)&v95 + 1) + 64) = 0;
                      v96.f64[1] = 0.0;
                      *(_OWORD *)(*((_QWORD *)&v95 + 1) + 32) = 0u;
                      *(_OWORD *)(*((_QWORD *)&v95 + 1) + 48) = 0u;
                      **((_OWORD **)&v95 + 1) = 0u;
                      *(_OWORD *)(*((_QWORD *)&v95 + 1) + 16) = 0u;
                    }
                    goto LABEL_172;
                  }
                  if (v92 == 2)
                    v98 = sub_20EA8D22C((uint64_t)object, v29);
                  else
                    v98 = sub_20FA2A1D4((uint64_t)object, v29, *(double *)v22.i64, v35, *(double *)v23.i64, *(double *)v24.i64, (int64x2_t)v25, v26);
                }
                goto LABEL_171;
              }
            }
            else if (v92 <= 7)
            {
              goto LABEL_130;
            }
            if (v92 > 0xB)
            {
              if (v92 > 0xD)
              {
                if (v92 == 14)
                  v98 = sub_20FA2A57C((uint64_t *)object, (double *)v29);
                else
                  v98 = sub_20EB3CED8(v29, *(uint64_t *)object, *(float64x2_t **)&object[8], *(float64x2_t **)&object[16], (float64x2_t *)v135, *((uint64_t *)&v135 + 1));
              }
              else
              {
                v97 = *(_QWORD **)object;
                if (v92 != 13)
                {
                  v99 = *(_QWORD *)&object[16];
                  v100 = v135;
                  if (*(_QWORD *)&object[16])
                  {
                    **(_QWORD **)&object[16] = 0;
                    *(_QWORD *)(v99 + 8) = 0;
                    *(_QWORD *)(v99 + 16) = 0;
                  }
                  if (*((_QWORD *)&v100 + 1))
                  {
                    *(_QWORD *)(*((_QWORD *)&v100 + 1) + 64) = 0;
                    *(_OWORD *)(*((_QWORD *)&v100 + 1) + 32) = 0u;
                    *(_OWORD *)(*((_QWORD *)&v100 + 1) + 48) = 0u;
                    **((_OWORD **)&v100 + 1) = 0u;
                    *(_OWORD *)(*((_QWORD *)&v100 + 1) + 16) = 0u;
                  }
                  *v97 = 0;
                  v97[1] = 0;
                  v97[2] = 0;
                  if ((_QWORD)v100)
                  {
                    *(_OWORD *)(v100 + 16) = 0u;
                    *(_OWORD *)(v100 + 32) = 0u;
                    *(_OWORD *)v100 = 0u;
                  }
                  goto LABEL_173;
                }
                v98 = sub_20EB43734((double *)v29, *(uint64_t *)object, *(uint64_t *)&object[8], *(_QWORD **)&object[16], v135, *((uint64_t *)&v135 + 1));
              }
            }
            else if (v92 > 9)
            {
              if (v92 == 10)
                v98 = sub_20FA2A3C8((uint64_t *)object, (double *)v29);
              else
                v98 = sub_20EB38E20(v29, *(uint64_t *)object, *(float64x2_t **)&object[8], *(float64x2_t **)&object[16], (float64x2_t *)v135, *((uint64_t *)&v135 + 1));
            }
            else if (v92 == 9)
            {
              v98 = sub_20EB35004(v29, *(uint64_t *)object, *(float64x2_t **)&object[8], *(float64x2_t **)&object[16], v135, *((uint64_t *)&v135 + 1), *(double *)v22.i64, v35, *(double *)v23.i64, v24, v25);
            }
            else
            {
              v98 = sub_20FA2A35C((uint64_t *)object, v29, *(double *)v22.i64, v35, *(double *)v23.i64, v24, v25);
            }
LABEL_171:
            if ((v98 & 1) != 0)
            {
LABEL_172:
              *(_QWORD *)&v96.f64[0] = rep;
              _Q1 = v122;
              _Q2 = vmulq_f64(_Q1, _Q1);
              _D3 = v122.f64[1];
              __asm { FMLA            D2, D3, V1.D[1] }
              _Q2.f64[0] = 1.0 / sqrt(_Q2.f64[0] + v96.f64[0] * v96.f64[0]);
              *(_QWORD *)&v96.f64[0] = *(_OWORD *)&vmulq_f64(v96, _Q2);
              v107 = vmulq_n_f64(v122, _Q2.f64[0]);
              *(_QWORD *)&v108 = vextq_s8((int8x16_t)v107, (int8x16_t)v107, 8uLL).u64[0];
              v122 = v107;
              rep = *(_QWORD *)&v96.f64[0];
LABEL_196:
              v107.f64[1] = v108;
              if (fabs(sqrt(vmulq_f64(v107, v107).f64[0] + v108 * v108 + v96.f64[0] * v96.f64[0]) + -1.0) > 0.000001
                && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioanchoredpoint3d.hpp", 41, (uint64_t)"std::fabs(vio::math::L2Norm3(anchor_direcrion.data()) - 1) <= 1e-6", 66, (uint64_t)"anchor direction should be normalized to 1", 42, (void (*)(void **))sub_21023DDB0))
              {
                abort();
              }
              v118 = *(_OWORD *)a5;
              *(_DWORD *)(a7 + 88) = *(_DWORD *)(a5 + 16);
              *(_OWORD *)(a7 + 72) = v118;
              *(_QWORD *)(a7 + 136) = v28;
              *(float64x2_t *)(a7 + 104) = v122;
              *(_QWORD *)(a7 + 120) = rep;
              *(double *)(a7 + 128) = v30;
              if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)(a7 + 40) + 16))(a7 + 40) & 1) == 0
                && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioflintconverter.hpp", 1731, (uint64_t)"ret", 3, (uint64_t)"Fail to set anchor", 18, (void (*)(void **))sub_21023DDB0))
              {
                abort();
              }
              return;
            }
LABEL_173:
            v109 = sub_210219C18();
            v110 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
            if ((v110 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
            {
              __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DDD0);
            }
            if (!atomic_load(&qword_254A5A450))
              goto LABEL_193;
            *(_WORD *)object = 0;
            v112 = (char *)_os_log_send_and_compose_impl();
            v113 = strlen(v112);
            v145.tv_sec = 0;
            pthread_threadid_np(0, (__uint64_t *)&v145);
            tv_sec = v145.tv_sec;
            timespec_get(&v145, 1);
            sub_210219E20(object, 0xEEEEB0B5B2B2EEEELL, "AddObservationToTrack", 0x15uLL, (__int128 *)(v109 + 1), (__int128 *)(v109 + 5), "Fail to compute calibrated measurement", 0x26uLL, v112, v113, tv_sec, &v145);
            std::mutex::lock(&stru_254A5A410);
            v115 = qword_254A5A458;
            for (i = unk_254A5A460; v115 != i; v115 += 40)
            {
              v117 = *(_QWORD *)(v115 + 32);
              if (!v117)
                sub_20E86D37C();
              (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v117 + 48))(v117, object);
            }
            std::mutex::unlock(&stru_254A5A410);
            if (v144 < 0)
            {
              operator delete(v143);
              if ((v142 & 0x80000000) == 0)
              {
LABEL_180:
                if (!v140)
                {
LABEL_186:
                  if ((_BYTE)v137 && SHIBYTE(__p) < 0)
                    operator delete(*((void **)&v135 + 1));
                  if (SBYTE7(v135) < 0)
                    operator delete(*(void **)&object[8]);
                  if (v112)
                    free(v112);
LABEL_193:
                  if (os_signpost_enabled((os_log_t)*v109))
                  {
                    *(_WORD *)object = 0;
                    _os_signpost_emit_unreliably_with_name_impl();
                  }
                  v122 = (float64x2_t)xmmword_2103BAF08;
                  rep = 0xBFF0000000000000;
                  v30 = *((float *)&v131 + 1);
                  v96.f64[0] = -1.0;
                  v107.f64[0] = 0.0;
                  v108 = 0.0;
                  goto LABEL_196;
                }
LABEL_184:
                if (v139 < 0)
                  operator delete(v138);
                goto LABEL_186;
              }
            }
            else if ((v142 & 0x80000000) == 0)
            {
              goto LABEL_180;
            }
            operator delete(v141);
            if (!v140)
              goto LABEL_186;
            goto LABEL_184;
          }
LABEL_45:
          *(double *)v22.i64 = sub_20F3A76B4((uint64_t)object, (double *)v29);
          goto LABEL_128;
        }
      }
    }
    abort();
  }
  sub_20FB93440(v121);
  if (**(int **)(v121[0] + 56) > 4)
    return;
  v36 = *(unsigned __int8 *)(v121[0] + 72);
  v37 = sub_20E8C31DC(v121[0], "OSLogSurrogateAppender", 1, 0);
  v38 = v37;
  if (!v36 && !v37)
    return;
  *(_QWORD *)&v122.f64[0] = v121;
  *(std::chrono::steady_clock::time_point *)&v122.f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
  rep = std::chrono::system_clock::now().__d_.__rep_;
  v124 = 4;
  v125 = "unknown file";
  v126 = 1701;
  v128 = 0;
  v129 = 0;
  v127 = "unknown function";
  v39 = **(_QWORD **)&v122.f64[0];
  if (*(char *)(**(_QWORD **)&v122.f64[0] + 39) < 0)
  {
    v41 = *(const char **)(v39 + 16);
    v40 = *(_QWORD *)(v39 + 24);
    v119 = **(_QWORD **)&v122.f64[0] + 16;
    v43 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v43 & 1) != 0)
      goto LABEL_47;
  }
  else
  {
    v40 = *(unsigned __int8 *)(**(_QWORD **)&v122.f64[0] + 39);
    v41 = (const char *)(**(_QWORD **)&v122.f64[0] + 16);
    v119 = (uint64_t)v41;
    v42 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v42 & 1) != 0)
      goto LABEL_47;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
    if ((_BYTE)v135 && (object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_47:
  if (byte_254A4A4F8[23] >= 0)
    v44 = byte_254A4A4F8;
  else
    v44 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v45 = byte_254A4A4F8[23];
  else
    v45 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)object = os_log_create(v44, v41);
  v46 = &object[8];
  if (v45 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v45 >= 0x17)
  {
    v47 = v38;
    v48 = v41;
    v49 = v39;
    v50 = v36;
    v51 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v45 | 7) != 0x17)
      v51 = v45 | 7;
    v52 = v51 + 1;
    v46 = operator new(v51 + 1);
    *(_QWORD *)&object[16] = v45;
    *(_QWORD *)&v135 = v52 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v46;
    v36 = v50;
    v39 = v49;
    v41 = v48;
    v38 = v47;
    goto LABEL_60;
  }
  BYTE7(v135) = v45;
  if (v45)
LABEL_60:
    memmove(v46, v44, v45);
  v46[v45] = 0;
  BYTE8(v135) = 1;
  p_p = &__p;
  if (v40 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v40 >= 0x17)
  {
    v54 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v40 | 7) != 0x17)
      v54 = v40 | 7;
    v55 = v54 + 1;
    p_p = (__int128 *)operator new(v54 + 1);
    *((_QWORD *)&__p + 1) = v40;
    v137 = v55 | 0x8000000000000000;
    *(_QWORD *)&__p = p_p;
  }
  else
  {
    HIBYTE(v137) = v40;
    if (!v40)
      goto LABEL_69;
  }
  memmove(p_p, v41, v40);
LABEL_69:
  *((_BYTE *)p_p + v40) = 0;
  LOBYTE(v138) = 1;
  v56 = *(NSObject **)object;
  if (SHIBYTE(v137) < 0)
    operator delete((void *)__p);
  if (BYTE8(v135) && SBYTE7(v135) < 0)
    operator delete(*(void **)&object[8]);
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  if (v38 && *(_QWORD *)(v38 + 24))
  {
    v57 = _os_log_pack_size();
    v58 = (std::__shared_weak_count_vtbl *)operator new(v57, (std::align_val_t)8uLL);
    v59 = (std::__shared_weak_count *)operator new();
    v60 = v59;
    v59->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v59->__shared_owners_;
    v59->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v59->__shared_weak_owners_ = 0;
    v59[1].__vftable = v58;
    *(_QWORD *)object = v58;
    *(_QWORD *)&object[8] = v58;
    *(_QWORD *)&object[16] = v59;
    do
      v62 = __ldxr(p_shared_owners);
    while (__stxr(v62 + 1, p_shared_owners));
    v135 = 0uLL;
    *(_QWORD *)&__p = 0;
    do
      v63 = __ldaxr(p_shared_owners);
    while (__stlxr(v63 - 1, p_shared_owners));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v60);
    }
    v64 = *(_QWORD *)object;
    *(_WORD *)_os_log_pack_fill() = 0;
    v65 = operator new();
    v66 = *(unsigned __int8 *)(v39 + 39);
    v67 = v119;
    if ((v66 & 0x80u) != 0)
    {
      v67 = *(_QWORD *)(v39 + 16);
      v66 = *(_QWORD *)(v39 + 24);
    }
    *(_QWORD *)v65 = v64;
    *(_OWORD *)(v65 + 8) = *(_OWORD *)&object[8];
    *(_QWORD *)&object[8] = 0;
    *(_QWORD *)&object[16] = 0;
    *(_OWORD *)(v65 + 24) = v135;
    v135 = 0uLL;
    *(_QWORD *)(v65 + 40) = v67;
    *(_QWORD *)(v65 + 48) = v66;
    *(_BYTE *)(v65 + 56) = 16;
    v145.tv_sec = 0;
    v120[0] = v65;
    (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v38 + 24) + 40))(*(_QWORD *)(v38 + 24), v120);
    v68 = v120[0];
    v120[0] = 0;
    if (v68)
    {
      v69 = *(std::__shared_weak_count **)(v68 + 32);
      if (v69)
      {
        v70 = (unint64_t *)&v69->__shared_owners_;
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
        }
      }
      v72 = *(std::__shared_weak_count **)(v68 + 16);
      if (v72)
      {
        v73 = (unint64_t *)&v72->__shared_owners_;
        do
          v74 = __ldaxr(v73);
        while (__stlxr(v74 - 1, v73));
        if (!v74)
        {
          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
          std::__shared_weak_count::__release_weak(v72);
        }
      }
      MEMORY[0x212BC6398](v68, 0x10F0C40B62ED6C6);
      v75 = v145.tv_sec;
      v145.tv_sec = 0;
      if (v75)
      {
        v76 = *(std::__shared_weak_count **)(v75 + 32);
        if (v76)
        {
          v77 = (unint64_t *)&v76->__shared_owners_;
          do
            v78 = __ldaxr(v77);
          while (__stlxr(v78 - 1, v77));
          if (!v78)
          {
            ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
            std::__shared_weak_count::__release_weak(v76);
          }
        }
        v79 = *(std::__shared_weak_count **)(v75 + 16);
        if (v79)
        {
          v80 = (unint64_t *)&v79->__shared_owners_;
          do
            v81 = __ldaxr(v80);
          while (__stlxr(v81 - 1, v80));
          if (!v81)
          {
            ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
            std::__shared_weak_count::__release_weak(v79);
          }
        }
        MEMORY[0x212BC6398](v75, 0x10F0C40B62ED6C6);
      }
    }
    v82 = (std::__shared_weak_count *)*((_QWORD *)&v135 + 1);
    if (*((_QWORD *)&v135 + 1))
    {
      v83 = (unint64_t *)(*((_QWORD *)&v135 + 1) + 8);
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v84 - 1, v83));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
      }
    }
    v85 = *(std::__shared_weak_count **)&object[16];
    if (*(_QWORD *)&object[16])
    {
      v86 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 - 1, v86));
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
      }
    }
  }
  else
  {
    os_log_type_enabled(v56, OS_LOG_TYPE_ERROR);
    *(_WORD *)object = 0;
    v88 = (void *)_os_log_send_and_compose_impl();
    if (v88)
      free(v88);
  }
  if (v36)
  {
    sub_20E8C003C((uint64_t)&v122, "Duplicate id detected. Not adding as node.");
    sub_20E863570((uint64_t)&v122);
  }
  sub_20E863570((uint64_t)&v122);
  v89 = v129;
  if (v129)
  {
    v90 = (unint64_t *)&v129->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
}

void sub_20FB932C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39)
{
  if (a39)
  {
    if (a38 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20FB93300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  sub_20E86E8C4(&a14);
  sub_20E86E8C4((uint64_t *)(v33 - 144));
  sub_20E86E658((uint64_t)&a33);
  sub_20E863714((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20FB9332C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_20E86E658((uint64_t)&a33);
  sub_20E863714((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20FB93348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  MEMORY[0x212BC6398](v11, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FB93374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FB93388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *object,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FB93440(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A6B878);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A6B878))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.flintToVio");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A6B870);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A6B878);
  }
  *a1 = qword_254A6B870;
}

void sub_20FB934DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A6B878);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A6B878);
  _Unwind_Resume(a1);
}

void sub_20FB93534(unsigned int a1, unsigned int a2, _QWORD *a3, _QWORD *a4, int a5, uint64_t a6, int a7, uint64_t a8, float32x4_t a9, _QWORD *a10)
{
  int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[2];
  int v27;

  v17 = a7 + a5;
  if (a7 + a5 < 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioflintconverter.hpp", 1899, (uint64_t)"fo + obs_offset >= 0", 20, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| (v18 = *(unsigned int *)(*a4 + 4 * v17), v19 = (uint64_t *)(a3[19] + 8 * a6), v20 = a3[28], v21 = *v19, v22 = v19[1], v23 = a3[7], v24 = a3[4], a1 >= 0x10000)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38,
         (uint64_t)"camera_id <= 0xffff",
         19,
         (uint64_t)"Camera ID cannot exceeds 16 bits",
         32,
         (void (*)(void **))sub_21023DDB0)
    || a2 >= 0x10000
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 39, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0)|| a1 >= 0x10000&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0)|| a2 >= 0x10000
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v25 = v20 + 12 * v22;
  v26[0] = 0;
  v26[1] = v18;
  v27 = (unsigned __int16)a2 | ((unsigned __int16)a1 << 16);
  a9.i64[0] = *(_QWORD *)v25;
  a9.i32[2] = *(_DWORD *)(v25 + 8);
  sub_20FB93724(v20 + 12 * v21, v24 + 16 * v21, v24 + 16 * v22, v23 + 4 * v21, a7, (uint64_t)v26, a8, a10, a9);
}

void sub_20FB93724(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, _QWORD *a8, float32x4_t a9)
{
  float32x2_t *v10;
  double v11;
  float v12;
  float32x4_t v13;
  uint64_t v14;
  float32x4_t v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v18;
  float64x2_t v19;
  float64x2_t v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v30;
  double v35;
  float64x2_t v38;
  double v39;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  int v48;
  int v49;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  int v58;
  int v59;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  int v68;
  int v69;
  float64x2_t v70;
  double v71;
  double v72;
  float64x2_t v73;
  double v74;
  double v75;
  float64x2_t v76;
  float64x2_t v77;
  double v78;
  double v79;
  float64x2_t v80;
  double v81;
  double v82;
  char v86;
  double v87;
  double v88;
  double v90;
  double v93;
  float64x2_t v97;
  double v98;
  unsigned int v99;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  int v108;
  int v109;
  float64x2_t v110;
  float64x2_t v111;
  double v113;
  double v115;
  int v116;
  double v117;
  int v118;
  double v119;
  double v120;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  int v129;
  int v130;
  BOOL v131;
  float64x2_t v132;
  double v133;
  double v135;
  int v136;
  double v137;
  int v138;
  double v139;
  float64x2_t v140;
  double v141;
  double v145;
  double v146;
  double v147;
  double v148;
  double v149;
  int v150;
  int v151;
  BOOL v152;
  float64x2_t v153;
  double v154;
  double v156;
  int v157;
  double v158;
  int v159;
  double v160;
  float64x2_t v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  __int128 v167;
  _QWORD *v168;
  unint64_t v169;
  int v170;
  unsigned int v171;
  int v172;
  unsigned int v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  unsigned int v182;
  double v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  __int128 v198;
  uint64_t v199;
  __int128 v200;
  __int128 v201;
  uint64_t v202;
  __int128 v203;
  float64x2_t v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  uint64_t v208;
  char *v209;
  uint64_t v210;
  char *v211;
  uint64_t v212;
  __int128 v213;
  float64x2_t v214;
  int64_t v215;
  uint64_t v216;
  unint64_t v217;
  int v218;
  uint64_t v219;
  char *v220;
  char *v221;
  __int128 v222;
  float64x2_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  uint64_t i;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  void *v236;
  uint64_t *v237;
  std::__shared_weak_count *v238;
  float64_t v239;
  std::__shared_weak_count *v240;
  float64_t v241;
  unsigned int v242;
  unint64_t *v243;
  unint64_t v244;
  uint64_t *v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  unint64_t v248;
  int v249;
  unsigned int v250;
  unint64_t v251;
  unint64_t v252;
  uint8x8_t v253;
  void **v254;
  char *v255;
  uint64_t v256;
  unint64_t v257;
  uint64_t v258;
  float v259;
  float v260;
  _BOOL8 v261;
  unint64_t v262;
  unint64_t v263;
  size_t prime;
  void *v265;
  void *v266;
  uint64_t v267;
  _QWORD *v268;
  size_t v269;
  size_t v270;
  size_t v271;
  _QWORD *j;
  size_t v273;
  uint64_t v274;
  unint64_t v275;
  uint8x8_t v276;
  uint64_t v277;
  float64x2_t v278;
  _QWORD *v279;
  uint64_t v280;
  size_t v281;
  uint64_t v282;
  _QWORD *v283;
  unint64_t v284;
  unint64_t v285;
  int8x8_t v286;
  unint64_t v287;
  uint8x8_t v288;
  uint64_t v289;
  unint64_t *v290;
  float64_t v291;
  unint64_t *v292;
  unint64_t v293;
  std::__shared_weak_count *v294;
  unint64_t *v295;
  unint64_t v296;
  std::__shared_weak_count *v297;
  unint64_t *v298;
  unint64_t v299;
  uint64_t v300;
  int v301;
  int v302;
  unint64_t v303;
  uint64_t v304;
  uint64_t v305;
  size_t v306;
  const char *v307;
  unsigned __int8 v308;
  uint64_t v309;
  uint64_t *v310;
  uint64_t v311;
  double v315;
  unsigned __int8 v319;
  const char *v320;
  size_t v321;
  _BYTE *v322;
  unint64_t v323;
  const char *v324;
  uint64_t v325;
  int v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  void **v330;
  uint64_t v331;
  uint64_t v332;
  NSObject *v333;
  size_t v334;
  std::__shared_weak_count_vtbl *v335;
  std::__shared_weak_count *v336;
  std::__shared_weak_count *v337;
  unint64_t *p_shared_owners;
  unint64_t v339;
  unint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  std::__shared_weak_count *v346;
  unint64_t *v347;
  unint64_t v348;
  std::__shared_weak_count *v349;
  unint64_t *v350;
  unint64_t v351;
  float64_t v352;
  std::__shared_weak_count *v353;
  unint64_t *v354;
  unint64_t v355;
  std::__shared_weak_count *v356;
  unint64_t *v357;
  unint64_t v358;
  std::__shared_weak_count *v359;
  unint64_t *v360;
  unint64_t v361;
  std::__shared_weak_count *v362;
  unint64_t *v363;
  unint64_t v364;
  void *v365;
  std::__shared_weak_count *v366;
  unint64_t *v367;
  unint64_t v368;
  double v369;
  void *v370;
  float64x2_t v371;
  int v372;
  int v373;
  int v374;
  unsigned int v375;
  unsigned int v376;
  _QWORD *v377;
  float64x2_t v378;
  _QWORD *v379;
  float64x2_t v382;
  double v383;
  float64x2_t v384;
  uint64_t v385;
  uint64_t v386;
  float32x4_t v387;
  double v388;
  float64x2_t v389;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v390;
  __int128 v391;
  __int128 v392;
  float64x2_t v393;
  float64x2_t v394;
  double v395;
  float64x2_t v396;
  float64x2_t v397;
  __int128 v398;
  __int128 v399;
  float64x2_t v400;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v401;
  float32x4_t v402;
  double v403;
  float64x2_t v404;
  float64x2_t v405;
  __int128 v406;
  __int128 v407;
  float64x2_t v408;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v410;
  const char *v411;
  int v412;
  const char *v413;
  uint64_t v414;
  std::__shared_weak_count *v415;
  _BYTE v416[24];
  __int128 v417;
  void *v418[2];
  unint64_t v419;
  char v420;
  uint64_t v421;

  v421 = *MEMORY[0x24BDAC8D0];
  v10 = (float32x2_t *)(a1 + 12 * a5);
  v11 = v10[1].f32[0];
  v12 = *(float *)(a4 + 4 * a5);
  v386 = 0;
  v13 = (float32x4_t)vcvtq_f64_f32(*v10);
  v387 = v13;
  v388 = v11;
  v391 = 0u;
  v392 = 0u;
  v14 = 16 * a5;
  v393 = *(float64x2_t *)(a2 + v14);
  v13.i64[0] = *(_QWORD *)a1;
  v13.i32[2] = *(_DWORD *)(a1 + 8);
  v394 = *(float64x2_t *)(a3 + v14);
  v15 = vabdq_f32(v13, a9);
  v15.i32[3] = -4194304;
  v395 = v12;
  if (vmaxnmvq_f32(v15) >= 0.000001
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioflintconverter.hpp", 1754, (uint64_t)"(*src_measurements - *end_measurements).e().abs().max() < 1e-6", 62, (uint64_t)"lines equal", 11, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_598;
  }
  v379 = (_QWORD *)(a7 + 1784);
  v16 = sub_20E9DF85C((_QWORD *)(a7 + 1784), (uint64_t *)a6);
  if (v16)
    v17 = v16[13];
  else
    v17 = 0;
  v18 = a8;
  v19 = v393;
  v384 = v393;
  v385 = 0x3FF0000000000000;
  v20.f64[1] = v394.f64[1];
  v382 = v394;
  v383 = 1.0;
  v21 = *(_DWORD *)(v17 + 992);
  if (v21 != -1)
  {
    if (v21 <= 7)
      goto LABEL_8;
LABEL_21:
    if (v21 > 0xB)
    {
      if (v21 <= 0xD)
      {
        if (v21 != 13)
          goto LABEL_272;
        _V0.D[1] = v384.f64[1];
        v30 = (*(double *)v17 + *(double *)(v17 + 32)) * 0.5;
        _D3 = v384.f64[1];
        __asm { FMLA            D2, D3, V0.D[1] }
        v35 = v30 * (_D2 * v30);
        v20 = vdivq_f64(v384, (float64x2_t)vdupq_lane_s64(COERCE__INT64(v35* (*(double *)(v17 + 168)+ v30 * *(double *)(v17 + 224)+ v35* (*(double *)(v17 + 176)+ v30 * *(double *)(v17 + 232)+ v35* (*(double *)(v17 + 184)+ v30 * *(double *)(v17 + 240)+ v35* (*(double *)(v17 + 192)+ v30 * *(double *)(v17 + 248)+ v35* (*(double *)(v17 + 200)+ v30 * *(double *)(v17 + 256)+ v35
                                    * (*(double *)(v17 + 208)
                                     + v30 * *(double *)(v17 + 264)
                                     + v35 * (*(double *)(v17 + 216) + *(double *)(v17 + 272) * v30 + v35 * 0.0)))))))
                               / 100.0
                               + 1.0),
                               0));
        *(float64x2_t *)v416 = v20;
        v22 = *(_DWORD *)(v17 + 992);
        if (v22 == -1)
          goto LABEL_12;
        goto LABEL_74;
      }
      if (v21 == 14)
        v23 = sub_20EB247C0((float64x2_t *)v416, (uint64_t)&v384, (double *)(v17 + 168), (*(double *)v17 + *(double *)(v17 + 32)) * 0.5);
      else
        v23 = sub_20EB3E39C(v17, (float64x2_t *)v416, &v384);
    }
    else if (v21 > 9)
    {
      if (v21 == 10)
        v23 = sub_20EB24288((float64x2_t *)v416, (uint64_t)&v384, (double *)(v17 + 168), (*(double *)v17 + *(double *)(v17 + 32)) * 0.5);
      else
        v23 = sub_20EB3A2E4(v17, (float64x2_t *)v416, &v384);
    }
    else
    {
      if (v21 != 9)
      {
        _V0.D[1] = v384.f64[1];
        _D1 = v384.f64[1];
        __asm { FMLA            D5, D1, V0.D[1] }
        v43 = sqrt(_D5);
        v44 = fabs(v43);
        v45 = 1.0;
        if (v44 <= 1.0)
          v46 = v44;
        else
          v46 = 1.0 / v44;
        if (v46 <= 0.414213562)
        {
          v48 = 1;
          v49 = 2;
          v47 = v46;
        }
        else
        {
          v47 = (v44 + -1.0) / (v44 + 1.0);
          if (v44 <= 1.0)
            v47 = -v47;
          v48 = -1;
          v49 = 1;
        }
        if (_D5 >= 0.00000001)
        {
          if (v44 > 1.0)
            v48 = -v48;
          else
            v49 = v46 > 0.414213562;
          if (v43 < 0.0)
            v49 = -v49;
          v70 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v47 * v47), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v47 * v47), (float64x2_t)xmmword_210315370), v47 * v47 * (v47 * v47))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v47 * v47), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v47 * v47), (float64x2_t)xmmword_210315380), v47 * v47 * (v47 * v47))), v47 * v47 * (v47 * v47) * (v47 * v47 * (v47 * v47))));
          v71 = v47 + v47 * vdivq_f64(v70, (float64x2_t)vdupq_laneq_s64((int64x2_t)v70, 1)).f64[0];
          if (v43 < 0.0)
            v48 = -v48;
          v72 = (double)v49 * 3.061617e-17 + (double)v49 * 0.785398163 + v71 * (double)v48;
          v45 = 1.0
              / v43
              * (v72
               * (v72
                * v72
                * (*(double *)(v17 + 168)
                 + v72
                 * v72
                 * (*(double *)(v17 + 176)
                  + v72
                  * v72
                  * (*(double *)(v17 + 184)
                   + v72
                   * v72
                   * (*(double *)(v17 + 192)
                    + v72
                    * v72
                    * (*(double *)(v17 + 200) + v72
                                              * v72
                                              * (*(double *)(v17 + 208) + v72 * v72 * *(double *)(v17 + 216)))))))
                + 1.0));
        }
        v20 = vmulq_n_f64(v384, v45);
        *(float64x2_t *)v416 = v20;
        v81 = v20.f64[1];
LABEL_129:
        *(double *)&v391 = *(double *)(v17 + 16) + *(double *)v17 * v20.f64[0] + *(double *)(v17 + 8) * v81;
        *((double *)&v391 + 1) = v81 * *(double *)(v17 + 32) + *(double *)(v17 + 40);
        v22 = 8;
        goto LABEL_134;
      }
      v23 = sub_20EB3641C(v17, (float64x2_t *)v416, &v384);
    }
LABEL_72:
    if ((v23 & 1) == 0)
      goto LABEL_272;
    v22 = *(_DWORD *)(v17 + 992);
    if (v22 == -1)
      goto LABEL_12;
    goto LABEL_74;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_598:
    abort();
  }
  v21 = *(_DWORD *)(v17 + 992);
  v19 = v393;
  if (v21 > 7)
    goto LABEL_21;
LABEL_8:
  if (v21 <= 3)
  {
    if (v21 > 1)
    {
      if (v21 == 2)
      {
        if (*(_DWORD *)(v17 + 212))
        {
          _D2 = v384.f64[1];
          __asm { FMLA            D1, D2, V0.D[1] }
          v20 = vaddq_f64(vaddq_f64(vmulq_f64((float64x2_t)vextq_s8(*(int8x16_t *)(v17 + 192), *(int8x16_t *)(v17 + 192), 8uLL), vaddq_f64((float64x2_t)vdupq_lane_s64(_D1, 0), vmulq_f64(v384, vaddq_f64(v384, v384)))), vmulq_laneq_f64(vmulq_n_f64(vaddq_f64(*(float64x2_t *)(v17 + 192), *(float64x2_t *)(v17 + 192)), v384.f64[0]), v384, 1)), vmulq_n_f64(v384, *(double *)(v17 + 168) * *(double *)&_D1+ 1.0+ *(double *)&_D1 * (*(double *)(v17 + 176) * *(double *)&_D1)+ *(double *)&_D1 * (*(double *)&_D1 * (*(double *)(v17 + 184) * *(double *)&_D1))));
        }
        else
        {
          _V0.D[1] = v384.f64[1];
          _D2 = v384.f64[1];
          __asm { FMLA            D1, D2, V0.D[1] }
          v20 = vmulq_n_f64(v384, *(double *)(v17 + 168) * _D1+ 1.0+ _D1 * _D1 * (*(double *)(v17 + 176) + *(double *)(v17 + 184) * _D1));
        }
        *(float64x2_t *)v416 = v20;
        goto LABEL_133;
      }
      _V0.D[1] = v384.f64[1];
      _D1 = v384.f64[1];
      __asm { FMLA            D5, D1, V0.D[1] }
      v63 = sqrt(_D5);
      v64 = fabs(v63);
      v65 = 1.0;
      if (v64 <= 1.0)
        v66 = v64;
      else
        v66 = 1.0 / v64;
      if (v66 <= 0.414213562)
      {
        v68 = 1;
        v69 = 2;
        v67 = v66;
      }
      else
      {
        v67 = (v64 + -1.0) / (v64 + 1.0);
        if (v64 <= 1.0)
          v67 = -v67;
        v68 = -1;
        v69 = 1;
      }
      if (_D5 >= 0.00000001)
      {
        if (v64 > 1.0)
          v68 = -v68;
        else
          v69 = v66 > 0.414213562;
        if (v63 < 0.0)
          v69 = -v69;
        v77 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v67 * v67), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v67 * v67), (float64x2_t)xmmword_210315370), v67 * v67 * (v67 * v67))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v67 * v67), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v67 * v67), (float64x2_t)xmmword_210315380), v67 * v67 * (v67 * v67))), v67 * v67 * (v67 * v67) * (v67 * v67 * (v67 * v67))));
        v78 = v67 + v67 * vdivq_f64(v77, (float64x2_t)vdupq_laneq_s64((int64x2_t)v77, 1)).f64[0];
        if (v63 < 0.0)
          v68 = -v68;
        v79 = (double)v69 * 3.061617e-17 + (double)v69 * 0.785398163 + v78 * (double)v68;
        v80 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v17 + 168), *(int64x2_t *)(v17 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v17 + 168), *(int64x2_t *)(v17 + 184)), v79 * v79)), v79 * v79);
        v65 = 1.0 / v63 * (v79 + v79 * (v80.f64[0] + vmuld_lane_f64(v79 * v79 * (v79 * v79), v80, 1)));
      }
      v20 = vmulq_n_f64(v384, v65);
      *(float64x2_t *)v416 = v20;
LABEL_128:
      *(double *)&v391 = *(double *)(v17 + 16)
                       + *(double *)v17 * v20.f64[0]
                       + vmuld_lane_f64(*(double *)(v17 + 8), v20, 1);
      *((double *)&v391 + 1) = vmuld_lane_f64(*(double *)(v17 + 32), v20, 1) + *(double *)(v17 + 40);
      v22 = 3;
      goto LABEL_134;
    }
    if (!v21)
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    v20.f64[1] = v384.f64[1];
    *(float64x2_t *)v416 = v384;
    v22 = *(_DWORD *)(v17 + 992);
    if (v22 == -1)
      goto LABEL_12;
LABEL_74:
    if (v22 > 7)
      goto LABEL_14;
    goto LABEL_75;
  }
  if (v21 > 5)
  {
    if (v21 == 6)
    {
      v19.f64[0] = v384.f64[0];
      v38 = vaddq_f64(v19, *(float64x2_t *)(v17 + 192));
      v39 = sqrt(vaddvq_f64(vmulq_f64(v38, v38)));
      v20 = vaddq_f64(*(float64x2_t *)(v17 + 208), vmulq_n_f64(v38, v39 * (v39 * (*(double *)(v17 + 168) + v39 * (*(double *)(v17 + 176) + *(double *)(v17 + 184) * v39)))+ 1.0));
      *(float64x2_t *)v416 = v20;
      v22 = *(_DWORD *)(v17 + 992);
      if (v22 == -1)
        goto LABEL_12;
      goto LABEL_74;
    }
    v23 = sub_20EB31FFC(v17, (float64x2_t *)v416, &v384);
    goto LABEL_72;
  }
  if (v21 != 5)
  {
    _V0.D[1] = v384.f64[1];
    _D1 = v384.f64[1];
    __asm { FMLA            D5, D1, V0.D[1] }
    v53 = sqrt(_D5);
    v54 = fabs(v53);
    v55 = 1.0;
    if (v54 <= 1.0)
      v56 = v54;
    else
      v56 = 1.0 / v54;
    if (v56 <= 0.414213562)
    {
      v58 = 1;
      v59 = 2;
      v57 = v56;
    }
    else
    {
      v57 = (v54 + -1.0) / (v54 + 1.0);
      if (v54 <= 1.0)
        v57 = -v57;
      v58 = -1;
      v59 = 1;
    }
    if (_D5 >= 0.00000001)
    {
      if (v54 > 1.0)
        v58 = -v58;
      else
        v59 = v56 > 0.414213562;
      if (v53 < 0.0)
        v59 = -v59;
      v73 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v57 * v57), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v57 * v57), (float64x2_t)xmmword_210315370), v57 * v57 * (v57 * v57))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v57 * v57), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v57 * v57), (float64x2_t)xmmword_210315380), v57 * v57 * (v57 * v57))), v57 * v57 * (v57 * v57) * (v57 * v57 * (v57 * v57))));
      v74 = v57 + v57 * vdivq_f64(v73, (float64x2_t)vdupq_laneq_s64((int64x2_t)v73, 1)).f64[0];
      if (v53 < 0.0)
        v58 = -v58;
      v75 = (double)v59 * 3.061617e-17 + (double)v59 * 0.785398163 + v74 * (double)v58;
      v76 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v17 + 168), *(int64x2_t *)(v17 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v17 + 168), *(int64x2_t *)(v17 + 184)), v75 * v75)), v75 * v75);
      v55 = 1.0 / v53 * (v75 + v75 * (v76.f64[0] + vmuld_lane_f64(v75 * v75 * (v75 * v75), v76, 1)));
    }
    v20 = vmulq_n_f64(v384, v55);
    *(float64x2_t *)v416 = v20;
    v82 = v20.f64[1];
    goto LABEL_130;
  }
  v24 = v384.f64[0] * v384.f64[0] + vmuld_lane_f64(v19.f64[1], v19, 1);
  v25 = 1.0;
  if (v24 >= 0.00000001)
  {
    v26 = sqrt(v24);
    if (v26 <= 1.0)
    {
      v28 = v26 * 0.785398163 - v26 * (v26 + -1.0) * (v26 * 0.0663008339 + 0.244711287);
    }
    else
    {
      v27 = fabs(1.0 / v26);
      v28 = 1.0 / v26 * (v27 + -1.0) * (v27 * 0.0663008339 + 0.244711287) + 1.0 / v26 * -0.785398163 + 1.57079633;
    }
    v278 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v17 + 168), *(int64x2_t *)(v17 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v17 + 168), *(int64x2_t *)(v17 + 184)), v28 * v28)), v28 * v28);
    v25 = (v28 + v28 * (v278.f64[0] + vmuld_lane_f64(v28 * v28 * (v28 * v28), v278, 1))) / v26;
  }
  *(double *)v416 = v384.f64[0] * v25;
  *(double *)&v416[8] = v19.f64[1] * v25;
  v22 = *(_DWORD *)(v17 + 992);
  if (v22 != -1)
    goto LABEL_74;
LABEL_12:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v22 = *(_DWORD *)(v17 + 992);
  if (v22 <= 7)
  {
LABEL_75:
    if (v22 <= 3)
    {
      if (v22 <= 1)
      {
        if (!v22)
        {
          sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
          abort();
        }
        *(double *)&v391 = *(double *)(v17 + 16)
                         + *(double *)v17 * *(double *)v416
                         + *(double *)(v17 + 8) * *(double *)&v416[8];
        *((double *)&v391 + 1) = *(double *)&v416[8] * *(double *)(v17 + 32) + *(double *)(v17 + 40);
        v22 = 1;
        goto LABEL_134;
      }
      v20 = *(float64x2_t *)v416;
      if (v22 == 2)
      {
LABEL_133:
        *(double *)&v391 = *(double *)(v17 + 16)
                         + *(double *)v17 * v20.f64[0]
                         + vmuld_lane_f64(*(double *)(v17 + 8), v20, 1);
        *((double *)&v391 + 1) = vmuld_lane_f64(*(double *)(v17 + 32), v20, 1) + *(double *)(v17 + 40);
        v22 = 2;
        goto LABEL_134;
      }
      goto LABEL_128;
    }
    if (v22 > 5)
    {
      *(double *)&v391 = *(double *)(v17 + 16)
                       + *(double *)v17 * *(double *)v416
                       + *(double *)(v17 + 8) * *(double *)&v416[8];
      *((double *)&v391 + 1) = *(double *)&v416[8] * *(double *)(v17 + 32) + *(double *)(v17 + 40);
      if (v22 == 6)
        v22 = 6;
      else
        v22 = 7;
      goto LABEL_134;
    }
    v20.f64[0] = *(float64_t *)v416;
    if (v22 == 5)
    {
      *(double *)&v391 = *(double *)(v17 + 16)
                       + *(double *)v17 * *(double *)v416
                       + *(double *)(v17 + 8) * *(double *)&v416[8];
      *((double *)&v391 + 1) = *(double *)&v416[8] * *(double *)(v17 + 32) + *(double *)(v17 + 40);
      v22 = 5;
      goto LABEL_134;
    }
    v82 = *(double *)&v416[8];
LABEL_130:
    *(double *)&v391 = *(double *)(v17 + 16) + *(double *)v17 * v20.f64[0] + *(double *)(v17 + 8) * v82;
    *((double *)&v391 + 1) = v82 * *(double *)(v17 + 32) + *(double *)(v17 + 40);
    v22 = 4;
    goto LABEL_134;
  }
LABEL_14:
  if (v22 > 0xB)
  {
    *(double *)&v391 = *(double *)(v17 + 16)
                     + *(double *)v17 * *(double *)v416
                     + *(double *)(v17 + 8) * *(double *)&v416[8];
    *((double *)&v391 + 1) = *(double *)&v416[8] * *(double *)(v17 + 32) + *(double *)(v17 + 40);
    if (v22 > 0xD)
    {
      if (v22 != 14)
      {
        if (v22 != -1)
          goto LABEL_167;
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v22 = *(_DWORD *)(v17 + 992);
      }
    }
    else if (v22 == 13)
    {
      v22 = 13;
    }
    else
    {
      v22 = 12;
    }
  }
  else
  {
    if (v22 <= 9)
    {
      v20.f64[0] = *(float64_t *)v416;
      if (v22 == 9)
      {
        *(double *)&v391 = *(double *)(v17 + 16)
                         + *(double *)v17 * *(double *)v416
                         + *(double *)(v17 + 8) * *(double *)&v416[8];
        *((double *)&v391 + 1) = *(double *)&v416[8] * *(double *)(v17 + 32) + *(double *)(v17 + 40);
        v22 = 9;
        goto LABEL_134;
      }
      v81 = *(double *)&v416[8];
      goto LABEL_129;
    }
    *(double *)&v391 = *(double *)(v17 + 16)
                     + *(double *)v17 * *(double *)v416
                     + *(double *)(v17 + 8) * *(double *)&v416[8];
    *((double *)&v391 + 1) = *(double *)&v416[8] * *(double *)(v17 + 32) + *(double *)(v17 + 40);
    if (v22 == 10)
      v22 = 10;
    else
      v22 = 11;
  }
LABEL_134:
  if (v22 > 7)
  {
    if (v22 <= 0xB)
    {
      if (v22 > 9)
      {
        if (v22 == 10)
          v86 = sub_20EB24288(&v408, (uint64_t)&v382, (double *)(v17 + 168), (*(double *)v17 + *(double *)(v17 + 32)) * 0.5);
        else
          v86 = sub_20EB3A2E4(v17, &v408, &v382);
        goto LABEL_265;
      }
      if (v22 == 9)
      {
        v86 = sub_20EB3641C(v17, &v408, &v382);
        goto LABEL_265;
      }
      _V0.D[1] = v382.f64[1];
      _D1 = v382.f64[1];
      __asm { FMLA            D6, D1, V0.D[1] }
      v103 = sqrt(_D6);
      v104 = fabs(v383);
      v105 = fabs(v103);
      v106 = v104 / v105;
      if (v104 >= v105)
        v106 = v105 / v104;
      if (v106 <= 0.414213562)
      {
        v108 = 1;
        v109 = 2;
        v107 = v106;
        if (_D6 >= 0.00000001)
        {
LABEL_174:
          if (v104 < v105)
            v108 = -v108;
          else
            v109 = v106 > 0.414213562;
          v110 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v107 * v107), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v107 * v107), (float64x2_t)xmmword_210315370), v107 * v107 * (v107 * v107))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v107 * v107), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v107 * v107), (float64x2_t)xmmword_210315380), v107 * v107 * (v107 * v107))), v107 * v107 * (v107 * v107) * (v107 * v107 * (v107 * v107))));
          v111 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v110, 1);
          _ZF = v103 == INFINITY && v104 == INFINITY;
          v113 = v107 + v107 * vdivq_f64(v110, v111).f64[0];
          if (_ZF)
            v113 = 0.785398163;
          if (v103 == 0.0 && v383 == 0.0)
            v115 = 0.0;
          else
            v115 = v113;
          if (v103 >= 0.0)
            v116 = v109;
          else
            v116 = -v109;
          v117 = (double)v116;
          if (v103 >= 0.0)
            v118 = v108;
          else
            v118 = -v108;
          v119 = v117 * 3.061617e-17 + v117 * 0.785398163 + v115 * (double)v118;
          v120 = 1.0
               / v103
               * (v119
                * (v119
                 * v119
                 * (*(double *)(v17 + 168)
                  + v119
                  * v119
                  * (*(double *)(v17 + 176)
                   + v119
                   * v119
                   * (*(double *)(v17 + 184)
                    + v119
                    * v119
                    * (*(double *)(v17 + 192)
                     + v119
                     * v119
                     * (*(double *)(v17 + 200)
                      + v119 * v119 * (*(double *)(v17 + 208) + v119 * v119 * *(double *)(v17 + 216)))))))
                 + 1.0));
          goto LABEL_256;
        }
      }
      else
      {
        v107 = (v105 - v104) / (v104 + v105);
        if (v104 >= v105)
          v107 = -v107;
        v108 = -1;
        v109 = 1;
        if (_D6 >= 0.00000001)
          goto LABEL_174;
      }
      v120 = 1.0 / v383;
LABEL_256:
      v408 = vmulq_n_f64(v382, v120);
      *(_QWORD *)v416 = &v392;
      *(_QWORD *)&v416[8] = &v408;
      *(_QWORD *)&v416[16] = 0;
      goto LABEL_273;
    }
    if (v22 <= 0xD)
    {
      if (v22 != 13 || v383 < 0.00000001)
        goto LABEL_272;
      _Q0 = vdivq_f64(v382, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v383, 0));
      v90 = (*(double *)v17 + *(double *)(v17 + 32)) * 0.5;
      _D3 = _Q0.f64[1];
      __asm { FMLA            D2, D3, V0.D[1] }
      v93 = v90 * (_D2 * v90);
      v20 = vdivq_f64(_Q0, (float64x2_t)vdupq_lane_s64(COERCE__INT64(v93* (*(double *)(v17 + 168)+ v90 * *(double *)(v17 + 224)+ v93* (*(double *)(v17 + 176)+ v90 * *(double *)(v17 + 232)+ v93* (*(double *)(v17 + 184)+ v90 * *(double *)(v17 + 240)+ v93* (*(double *)(v17 + 192)+ v90 * *(double *)(v17 + 248)+ v93* (*(double *)(v17 + 200)+ v90 * *(double *)(v17 + 256)+ v93
                                  * (*(double *)(v17 + 208)
                                   + v90 * *(double *)(v17 + 264)
                                   + v93 * (*(double *)(v17 + 216) + *(double *)(v17 + 272) * v90 + v93 * 0.0)))))))
                             / 100.0
                             + 1.0),
                             0));
      goto LABEL_161;
    }
    if (v22 == 14)
    {
      v86 = sub_20EB247C0(&v408, (uint64_t)&v382, (double *)(v17 + 168), (*(double *)v17 + *(double *)(v17 + 32)) * 0.5);
      goto LABEL_265;
    }
LABEL_167:
    v86 = sub_20EB3E39C(v17, &v408, &v382);
    goto LABEL_265;
  }
  if (v22 > 3)
  {
    if (v22 <= 5)
    {
      if (v22 == 5)
      {
        v87 = v382.f64[0] * v382.f64[0] + v382.f64[1] * v382.f64[1];
        if (v87 >= 0.00000001)
        {
          v163 = sqrt(v87);
          if (v163 <= v383)
          {
            v369 = v163 / v383 * 0.785398163
                 - v163 / v383 * (v163 / v383 + -1.0) * (v163 / v383 * 0.0663008339 + 0.244711287);
          }
          else
          {
            if (v163 <= -v383)
            {
              v165 = v163 / v383 * 0.785398163
                   - v163 / v383 * (-1.0 - v163 / v383) * (v163 / v383 * -0.0663008339 + 0.244711287);
              v166 = 3.14159265;
            }
            else
            {
              v164 = fabs(v383 / v163);
              v165 = v383 / v163 * (v164 + -1.0) * (v164 * 0.0663008339 + 0.244711287) + v383 / v163 * -0.785398163;
              v166 = 1.57079633;
            }
            v369 = v165 + v166;
          }
          v371 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v17 + 168), *(int64x2_t *)(v17 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v17 + 168), *(int64x2_t *)(v17 + 184)), v369 * v369)), v369 * v369);
          v88 = (v369 + v369 * (v371.f64[0] + vmuld_lane_f64(v369 * v369 * (v369 * v369), v371, 1))) / v163;
        }
        else
        {
          if (v383 == 0.0)
            goto LABEL_272;
          v88 = 1.0 / v383;
        }
        v408.f64[0] = v382.f64[0] * v88;
        v408.f64[1] = v382.f64[1] * v88;
        v99 = *(_DWORD *)(v17 + 992);
        *(_QWORD *)v416 = &v392;
        *(_QWORD *)&v416[8] = &v408;
        *(_QWORD *)&v416[16] = 0;
        if (v99 != -1)
          goto LABEL_267;
LABEL_162:
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v99 = *(_DWORD *)(v17 + 992);
        if (v99 > 7)
          goto LABEL_273;
        goto LABEL_268;
      }
      _V0.D[1] = v382.f64[1];
      _D1 = v382.f64[1];
      __asm { FMLA            D6, D1, V0.D[1] }
      v124 = sqrt(_D6);
      v125 = fabs(v383);
      v126 = fabs(v124);
      v127 = v125 / v126;
      if (v125 >= v126)
        v127 = v126 / v125;
      if (v127 <= 0.414213562)
      {
        v129 = 1;
        v130 = 2;
        v128 = v127;
        if (_D6 >= 0.00000001)
        {
LABEL_201:
          if (v125 < v126)
            v129 = -v129;
          else
            v130 = v127 > 0.414213562;
          v131 = v124 == INFINITY && v125 == INFINITY;
          v132 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v128 * v128), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v128 * v128), (float64x2_t)xmmword_210315370), v128 * v128 * (v128 * v128))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v128 * v128), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v128 * v128), (float64x2_t)xmmword_210315380), v128 * v128 * (v128 * v128))), v128 * v128 * (v128 * v128) * (v128 * v128 * (v128 * v128))));
          v133 = v128 + v128 * vdivq_f64(v132, (float64x2_t)vdupq_laneq_s64((int64x2_t)v132, 1)).f64[0];
          if (v131)
            v133 = 0.785398163;
          if (v124 == 0.0 && v383 == 0.0)
            v135 = 0.0;
          else
            v135 = v133;
          if (v124 >= 0.0)
            v136 = v130;
          else
            v136 = -v130;
          v137 = (double)v136;
          if (v124 >= 0.0)
            v138 = v129;
          else
            v138 = -v129;
          v139 = v137 * 3.061617e-17 + v137 * 0.785398163 + v135 * (double)v138;
          v140 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v17 + 168), *(int64x2_t *)(v17 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v17 + 168), *(int64x2_t *)(v17 + 184)), v139 * v139)), v139 * v139);
          v141 = 1.0 / v124 * (v139 + v139 * (v140.f64[0] + vmuld_lane_f64(v139 * v139 * (v139 * v139), v140, 1)));
          goto LABEL_259;
        }
      }
      else
      {
        v128 = (v126 - v125) / (v125 + v126);
        if (v125 >= v126)
          v128 = -v128;
        v129 = -1;
        v130 = 1;
        if (_D6 >= 0.00000001)
          goto LABEL_201;
      }
      v141 = 1.0 / v383;
LABEL_259:
      v20 = vmulq_n_f64(v382, v141);
      v408 = v20;
      v99 = 4;
      *(_QWORD *)v416 = &v392;
      *(_QWORD *)&v416[8] = &v408;
      *(_QWORD *)&v416[16] = 0;
      goto LABEL_268;
    }
    if (v22 == 6)
    {
      v97 = vaddq_f64(vdivq_f64(v382, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v383, 0)), *(float64x2_t *)(v17 + 192));
      v98 = sqrt(vaddvq_f64(vmulq_f64(v97, v97)));
      v20 = vaddq_f64(*(float64x2_t *)(v17 + 208), vmulq_n_f64(v97, v98 * (v98 * (*(double *)(v17 + 168) + v98 * (*(double *)(v17 + 176) + *(double *)(v17 + 184) * v98)))+ 1.0));
      goto LABEL_161;
    }
    v86 = sub_20EB31FFC(v17, &v408, &v382);
LABEL_265:
    if ((v86 & 1) == 0)
      goto LABEL_272;
    v99 = *(_DWORD *)(v17 + 992);
    *(_QWORD *)v416 = &v392;
    *(_QWORD *)&v416[8] = &v408;
    *(_QWORD *)&v416[16] = 0;
    if (v99 != -1)
      goto LABEL_267;
    goto LABEL_162;
  }
  if (v22 <= 1)
  {
    if (!v22)
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    if (v383 >= 0.00000001)
    {
      v20 = vmulq_n_f64(v382, 1.0 / v383);
      goto LABEL_161;
    }
LABEL_272:
    v391 = xmmword_21030D330;
    v392 = xmmword_21030D340;
    v20 = (float64x2_t)COERCE_UNSIGNED_INT64(-1.0);
    goto LABEL_275;
  }
  if (v22 == 2)
  {
    if (*(_DWORD *)(v17 + 212))
    {
      if (v383 < 0.00000001)
        goto LABEL_272;
      _Q3 = vmulq_n_f64(v382, 1.0 / v383);
      _D0 = vmuld_lane_f64(1.0 / v383, v382, 1);
      __asm { FMLA            D2, D0, V3.D[1] }
      v20 = vaddq_f64(vaddq_f64(vmulq_f64(vaddq_f64((float64x2_t)vdupq_lane_s64(_D2, 0), vmulq_f64(_Q3, vaddq_f64(_Q3, _Q3))), (float64x2_t)vextq_s8(*(int8x16_t *)(v17 + 192), *(int8x16_t *)(v17 + 192), 8uLL)), vmulq_laneq_f64(vmulq_n_f64(vaddq_f64(*(float64x2_t *)(v17 + 192), *(float64x2_t *)(v17 + 192)), _Q3.f64[0]), _Q3, 1)), vmulq_n_f64(_Q3, *(double *)(v17 + 168) * *(double *)&_D2+ 1.0+ *(double *)&_D2 * (*(double *)(v17 + 176) * *(double *)&_D2)+ *(double *)&_D2 * (*(double *)&_D2 * (*(double *)(v17 + 184) * *(double *)&_D2))));
LABEL_161:
      v408 = v20;
      v99 = *(_DWORD *)(v17 + 992);
      *(_QWORD *)v416 = &v392;
      *(_QWORD *)&v416[8] = &v408;
      *(_QWORD *)&v416[16] = 0;
      if (v99 == -1)
        goto LABEL_162;
LABEL_267:
      if (v99 > 7)
        goto LABEL_273;
      goto LABEL_268;
    }
    v86 = sub_20EB14380(&v408, &v382, (double *)(v17 + 168));
    goto LABEL_265;
  }
  _V0.D[1] = v382.f64[1];
  _D1 = v382.f64[1];
  __asm { FMLA            D6, D1, V0.D[1] }
  v145 = sqrt(_D6);
  v146 = fabs(v383);
  v147 = fabs(v145);
  v148 = v146 / v147;
  if (v146 >= v147)
    v148 = v147 / v146;
  if (v148 <= 0.414213562)
  {
    v150 = 1;
    v151 = 2;
    v149 = v148;
    if (_D6 >= 0.00000001)
    {
LABEL_228:
      if (v146 < v147)
        v150 = -v150;
      else
        v151 = v148 > 0.414213562;
      v152 = v145 == INFINITY && v146 == INFINITY;
      v153 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v149 * v149), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v149 * v149), (float64x2_t)xmmword_210315370), v149 * v149 * (v149 * v149))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v149 * v149), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v149 * v149), (float64x2_t)xmmword_210315380), v149 * v149 * (v149 * v149))), v149 * v149 * (v149 * v149) * (v149 * v149 * (v149 * v149))));
      v154 = v149 + v149 * vdivq_f64(v153, (float64x2_t)vdupq_laneq_s64((int64x2_t)v153, 1)).f64[0];
      if (v152)
        v154 = 0.785398163;
      if (v145 == 0.0 && v383 == 0.0)
        v156 = 0.0;
      else
        v156 = v154;
      if (v145 >= 0.0)
        v157 = v151;
      else
        v157 = -v151;
      v158 = (double)v157;
      if (v145 >= 0.0)
        v159 = v150;
      else
        v159 = -v150;
      v160 = v158 * 3.061617e-17 + v158 * 0.785398163 + v156 * (double)v159;
      v161 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v17 + 168), *(int64x2_t *)(v17 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v17 + 168), *(int64x2_t *)(v17 + 184)), v160 * v160)), v160 * v160);
      v162 = 1.0 / v145 * (v160 + v160 * (v161.f64[0] + vmuld_lane_f64(v160 * v160 * (v160 * v160), v161, 1)));
      goto LABEL_262;
    }
  }
  else
  {
    v149 = (v147 - v146) / (v146 + v147);
    if (v146 >= v147)
      v149 = -v149;
    v150 = -1;
    v151 = 1;
    if (_D6 >= 0.00000001)
      goto LABEL_228;
  }
  v162 = 1.0 / v383;
LABEL_262:
  v20 = vmulq_n_f64(v382, v162);
  v408 = v20;
  v99 = 3;
  *(_QWORD *)v416 = &v392;
  *(_QWORD *)&v416[8] = &v408;
  *(_QWORD *)&v416[16] = 0;
LABEL_268:
  if (v99 <= 1)
  {
    if (!v99)
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    v167 = *(_OWORD *)v416;
    v168 = *(_QWORD **)&v416[16];
    **(double **)v416 = *(double *)(v17 + 16)
                      + *(double *)v17 * **(double **)&v416[8]
                      + *(double *)(v17 + 8) * *(double *)(*(_QWORD *)&v416[8] + 8);
    *(double *)(v167 + 8) = *(double *)(v17 + 32) * *(double *)(*((_QWORD *)&v167 + 1) + 8) + *(double *)(v17 + 40);
    if (v168)
    {
      *v168 = *(_QWORD *)v17;
      v168[1] = *(_QWORD *)(v17 + 8);
      v168[2] = 0;
      v168[3] = *(_QWORD *)(v17 + 32);
    }
    goto LABEL_274;
  }
LABEL_273:
  sub_20FB971A4((uint64_t)v416, (double *)v17);
LABEL_274:
  v20.f64[0] = 1.0;
LABEL_275:
  v378 = v20;
  v169 = *(_QWORD *)a6;
  v171 = *(_DWORD *)(a6 + 8);
  v170 = *(_DWORD *)(a6 + 12);
  v173 = *(_DWORD *)(a6 + 16);
  v172 = *(_DWORD *)(a6 + 20);
  v174 = v386;
  v402 = v387;
  v403 = v388;
  v401 = v390;
  v399 = v391;
  v400 = v389;
  v397 = v393;
  v398 = v392;
  v396 = v394;
  v175 = a8[122];
  v176 = a8[123];
  v177 = v176 - v175;
  if (v176 != v175)
  {
    v178 = 0x86BCA1AF286BCA1BLL * (v177 >> 3);
    v179 = a8[122];
    while (1)
    {
      v180 = v178 >> 1;
      v181 = v179 + 152 * (v178 >> 1);
      v182 = *(_DWORD *)(v181 + 16);
      _CF = v182 >= v173;
      if (v182 != v173)
        goto LABEL_283;
      if (*(_QWORD *)v181 >= v169)
        break;
LABEL_277:
      v179 = v181 + 152;
      v180 = v178 + ~v180;
LABEL_278:
      v178 = v180;
      if (!v180)
        goto LABEL_287;
    }
    if (*(_QWORD *)v181 != v169)
      goto LABEL_278;
    _CF = *(_DWORD *)(v181 + 8) >= v171;
LABEL_283:
    if (_CF)
      goto LABEL_278;
    goto LABEL_277;
  }
  v179 = a8[122];
LABEL_287:
  v184 = v395;
  if (v179 != v176 && *(_DWORD *)(v179 + 16) == v173 && *(_QWORD *)v179 == v169 && *(_DWORD *)(v179 + 8) == v171)
    goto LABEL_474;
  v185 = (v179 - v175) / 152;
  v186 = v175 + 152 * v185;
  v187 = a8[124];
  if (v176 >= v187)
  {
    v206 = 0x86BCA1AF286BCA1BLL * (v177 >> 3) + 1;
    if (v206 > 0x1AF286BCA1AF286)
      sub_20E867F44();
    if (0xD79435E50D79436 * ((uint64_t)(v187 - v175) >> 3) > v206)
      v206 = 0xD79435E50D79436 * ((uint64_t)(v187 - v175) >> 3);
    if (0x86BCA1AF286BCA1BLL * ((uint64_t)(v187 - v175) >> 3) >= 0xD79435E50D7943)
      v207 = 0x1AF286BCA1AF286;
    else
      v207 = v206;
    if (v207)
    {
      v373 = v172;
      v375 = v171;
      v372 = v170;
      if (v207 > 0x1AF286BCA1AF286)
        sub_20E877A38();
      v208 = v386;
      v209 = (char *)operator new(152 * v207);
      v174 = v208;
      v170 = v372;
      v172 = v373;
      v171 = v375;
      v210 = (uint64_t)&v209[152 * v185];
      v211 = &v209[152 * v207];
      if (v185 != v207)
      {
LABEL_325:
        *(_QWORD *)v210 = v169;
        *(_DWORD *)(v210 + 8) = v171;
        *(_DWORD *)(v210 + 12) = v170;
        *(_DWORD *)(v210 + 16) = v173;
        *(_DWORD *)(v210 + 20) = v172;
        *(_QWORD *)(v210 + 24) = v174;
        *(float32x4_t *)(v210 + 32) = v402;
        *(double *)(v210 + 48) = v403;
        *(float64x2_t *)(v210 + 56) = v400;
        *(_QWORD *)(v210 + 72) = v401;
        v222 = v398;
        *(_OWORD *)(v210 + 80) = v399;
        *(_OWORD *)(v210 + 96) = v222;
        v223 = v396;
        *(float64x2_t *)(v210 + 112) = v397;
        *(float64x2_t *)(v210 + 128) = v223;
        *(double *)(v210 + 144) = v184;
        v224 = v210 + 152;
        v225 = v210;
        v226 = a8[122];
        if (v226 != v186)
        {
          v227 = 0;
          do
          {
            v228 = v210 + v227;
            v229 = *(_OWORD *)(v186 + v227 - 152);
            *(_QWORD *)(v228 - 136) = *(_QWORD *)(v186 + v227 - 136);
            *(_OWORD *)(v228 - 152) = v229;
            *(_QWORD *)(v228 - 128) = *(_QWORD *)(v186 + v227 - 128);
            v230 = *(_OWORD *)(v186 + v227 - 120);
            *(_QWORD *)(v228 - 104) = *(_QWORD *)(v186 + v227 - 104);
            *(_OWORD *)(v228 - 120) = v230;
            v231 = *(_OWORD *)(v186 + v227 - 96);
            *(_QWORD *)(v228 - 80) = *(_QWORD *)(v186 + v227 - 80);
            *(_OWORD *)(v228 - 96) = v231;
            *(_OWORD *)(v228 - 72) = *(_OWORD *)(v186 + v227 - 72);
            *(_OWORD *)(v228 - 56) = *(_OWORD *)(v186 + v227 - 56);
            *(_OWORD *)(v228 - 40) = *(_OWORD *)(v186 + v227 - 40);
            *(_OWORD *)(v228 - 24) = *(_OWORD *)(v186 + v227 - 24);
            *(_QWORD *)(v228 - 8) = *(_QWORD *)(v186 + v227 - 8);
            v227 -= 152;
          }
          while (v186 + v227 != v226);
          v225 = v210 + v227;
        }
        for (i = a8[123]; v186 != i; v186 += 152)
        {
          v233 = *(_OWORD *)v186;
          *(_QWORD *)(v224 + 16) = *(_QWORD *)(v186 + 16);
          *(_OWORD *)v224 = v233;
          *(_QWORD *)(v224 + 24) = *(_QWORD *)(v186 + 24);
          v234 = *(_OWORD *)(v186 + 32);
          *(_QWORD *)(v224 + 48) = *(_QWORD *)(v186 + 48);
          *(_OWORD *)(v224 + 32) = v234;
          v235 = *(_OWORD *)(v186 + 56);
          *(_QWORD *)(v224 + 72) = *(_QWORD *)(v186 + 72);
          *(_OWORD *)(v224 + 56) = v235;
          *(_OWORD *)(v224 + 80) = *(_OWORD *)(v186 + 80);
          *(_OWORD *)(v224 + 96) = *(_OWORD *)(v186 + 96);
          *(_OWORD *)(v224 + 112) = *(_OWORD *)(v186 + 112);
          *(_OWORD *)(v224 + 128) = *(_OWORD *)(v186 + 128);
          *(_QWORD *)(v224 + 144) = *(_QWORD *)(v186 + 144);
          v224 += 152;
        }
        v236 = (void *)a8[122];
        a8[122] = v225;
        a8[123] = v224;
        a8[124] = v211;
        if (v236)
          operator delete(v236);
        v186 = v210;
        v18 = a8;
        v205 = a8[123];
        if (v205 != v186)
          goto LABEL_334;
LABEL_474:
        sub_20FB93440(&v407);
        if (**(int **)(v407 + 56) > 4)
          return;
        v301 = *(unsigned __int8 *)(v407 + 72);
        v302 = *(_BYTE *)(v407 + 72) != 0;
        v303 = sub_20E8C31DC(v407, "OSLogSurrogateAppender", 1, 0);
        if (((v303 == 0) & ~v302) != 0)
          return;
        *(_QWORD *)&v408.f64[0] = &v407;
        *(std::chrono::steady_clock::time_point *)&v408.f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
        rep = std::chrono::system_clock::now().__d_.__rep_;
        v410 = 4;
        v411 = "unknown file";
        v412 = 1774;
        v415 = 0;
        v413 = "unknown function";
        v414 = 0;
        v304 = **(_QWORD **)&v408.f64[0];
        v305 = **(_QWORD **)&v408.f64[0] + 16;
        if (*(char *)(**(_QWORD **)&v408.f64[0] + 39) < 0)
        {
          v307 = *(const char **)(v304 + 16);
          v306 = *(_QWORD *)(v304 + 24);
          v319 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v319 & 1) != 0)
            goto LABEL_498;
        }
        else
        {
          v306 = *(unsigned __int8 *)(**(_QWORD **)&v408.f64[0] + 39);
          v307 = (const char *)(**(_QWORD **)&v408.f64[0] + 16);
          v308 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v308 & 1) != 0)
            goto LABEL_498;
        }
        if (__cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)v416);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v416);
          if ((_BYTE)v417 && (v416[23] & 0x80000000) != 0)
            operator delete(*(void **)v416);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
LABEL_498:
        if (byte_254A4A4F8[23] >= 0)
          v320 = byte_254A4A4F8;
        else
          v320 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v321 = byte_254A4A4F8[23];
        else
          v321 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)v416 = os_log_create(v320, v307);
        v322 = &v416[8];
        if (v321 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v321 >= 0x17)
        {
          v323 = v303;
          v324 = v307;
          v325 = v304;
          v326 = v301;
          v327 = v305;
          v328 = (v321 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v321 | 7) != 0x17)
            v328 = v321 | 7;
          v329 = v328 + 1;
          v322 = operator new(v328 + 1);
          *(_QWORD *)&v416[16] = v321;
          *(_QWORD *)&v417 = v329 | 0x8000000000000000;
          *(_QWORD *)&v416[8] = v322;
          v305 = v327;
          v301 = v326;
          v304 = v325;
          v307 = v324;
          v303 = v323;
        }
        else
        {
          BYTE7(v417) = v321;
          if (!v321)
          {
LABEL_512:
            v322[v321] = 0;
            BYTE8(v417) = 1;
            v330 = v418;
            if (v306 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v306 >= 0x17)
            {
              v331 = (v306 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v306 | 7) != 0x17)
                v331 = v306 | 7;
              v332 = v331 + 1;
              v330 = (void **)operator new(v331 + 1);
              v418[1] = (void *)v306;
              v419 = v332 | 0x8000000000000000;
              v418[0] = v330;
            }
            else
            {
              HIBYTE(v419) = v306;
              if (!v306)
                goto LABEL_520;
            }
            memmove(v330, v307, v306);
LABEL_520:
            *((_BYTE *)v330 + v306) = 0;
            v420 = 1;
            v333 = *(NSObject **)v416;
            if (SHIBYTE(v419) < 0)
              operator delete(v418[0]);
            if (BYTE8(v417) && SBYTE7(v417) < 0)
              operator delete(*(void **)&v416[8]);
            if (*(_QWORD *)v416)
              os_release(*(void **)v416);
            if (v303 && *(_QWORD *)(v303 + 24))
            {
              v334 = _os_log_pack_size();
              v335 = (std::__shared_weak_count_vtbl *)operator new(v334, (std::align_val_t)8uLL);
              v336 = (std::__shared_weak_count *)operator new();
              v337 = v336;
              v336->__shared_owners_ = 0;
              p_shared_owners = (unint64_t *)&v336->__shared_owners_;
              v336->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v336->__shared_weak_owners_ = 0;
              v336[1].__vftable = v335;
              *(_QWORD *)v416 = v335;
              *(_QWORD *)&v416[8] = v335;
              *(_QWORD *)&v416[16] = v336;
              do
                v339 = __ldxr(p_shared_owners);
              while (__stxr(v339 + 1, p_shared_owners));
              v417 = 0uLL;
              v418[0] = 0;
              do
                v340 = __ldaxr(p_shared_owners);
              while (__stlxr(v340 - 1, p_shared_owners));
              if (!v340)
              {
                ((void (*)(std::__shared_weak_count *))v336->__on_zero_shared)(v336);
                std::__shared_weak_count::__release_weak(v337);
              }
              v341 = *(_QWORD *)v416;
              *(_WORD *)_os_log_pack_fill() = 0;
              v342 = operator new();
              v343 = *(unsigned __int8 *)(v304 + 39);
              if ((v343 & 0x80u) == 0)
                v344 = v305;
              else
                v344 = *(_QWORD *)(v304 + 16);
              if ((v343 & 0x80u) != 0)
                v343 = *(_QWORD *)(v304 + 24);
              *(_QWORD *)v342 = v341;
              *(_OWORD *)(v342 + 8) = *(_OWORD *)&v416[8];
              *(_QWORD *)&v416[8] = 0;
              *(_QWORD *)&v416[16] = 0;
              *(_OWORD *)(v342 + 24) = v417;
              v417 = 0uLL;
              *(_QWORD *)(v342 + 40) = v344;
              *(_QWORD *)(v342 + 48) = v343;
              *(_BYTE *)(v342 + 56) = 16;
              v400.f64[0] = 0.0;
              v402.i64[0] = v342;
              (*(void (**)(_QWORD, float32x4_t *))(**(_QWORD **)(v303 + 24) + 40))(*(_QWORD *)(v303 + 24), &v402);
              v345 = v402.i64[0];
              v402.i64[0] = 0;
              if (v345)
              {
                v346 = *(std::__shared_weak_count **)(v345 + 32);
                if (v346)
                {
                  v347 = (unint64_t *)&v346->__shared_owners_;
                  do
                    v348 = __ldaxr(v347);
                  while (__stlxr(v348 - 1, v347));
                  if (!v348)
                  {
                    ((void (*)(std::__shared_weak_count *))v346->__on_zero_shared)(v346);
                    std::__shared_weak_count::__release_weak(v346);
                  }
                }
                v349 = *(std::__shared_weak_count **)(v345 + 16);
                if (v349)
                {
                  v350 = (unint64_t *)&v349->__shared_owners_;
                  do
                    v351 = __ldaxr(v350);
                  while (__stlxr(v351 - 1, v350));
                  if (!v351)
                  {
                    ((void (*)(std::__shared_weak_count *))v349->__on_zero_shared)(v349);
                    std::__shared_weak_count::__release_weak(v349);
                  }
                }
                MEMORY[0x212BC6398](v345, 0x10F0C40B62ED6C6);
                v352 = v400.f64[0];
                v400.f64[0] = 0.0;
                if (v352 != 0.0)
                {
                  v353 = *(std::__shared_weak_count **)(*(_QWORD *)&v352 + 32);
                  if (v353)
                  {
                    v354 = (unint64_t *)&v353->__shared_owners_;
                    do
                      v355 = __ldaxr(v354);
                    while (__stlxr(v355 - 1, v354));
                    if (!v355)
                    {
                      ((void (*)(std::__shared_weak_count *))v353->__on_zero_shared)(v353);
                      std::__shared_weak_count::__release_weak(v353);
                    }
                  }
                  v356 = *(std::__shared_weak_count **)(*(_QWORD *)&v352 + 16);
                  if (v356)
                  {
                    v357 = (unint64_t *)&v356->__shared_owners_;
                    do
                      v358 = __ldaxr(v357);
                    while (__stlxr(v358 - 1, v357));
                    if (!v358)
                    {
                      ((void (*)(std::__shared_weak_count *))v356->__on_zero_shared)(v356);
                      std::__shared_weak_count::__release_weak(v356);
                    }
                  }
                  MEMORY[0x212BC6398](*(_QWORD *)&v352, 0x10F0C40B62ED6C6);
                }
              }
              v359 = (std::__shared_weak_count *)*((_QWORD *)&v417 + 1);
              if (*((_QWORD *)&v417 + 1))
              {
                v360 = (unint64_t *)(*((_QWORD *)&v417 + 1) + 8);
                do
                  v361 = __ldaxr(v360);
                while (__stlxr(v361 - 1, v360));
                if (!v361)
                {
                  ((void (*)(std::__shared_weak_count *))v359->__on_zero_shared)(v359);
                  std::__shared_weak_count::__release_weak(v359);
                }
              }
              v362 = *(std::__shared_weak_count **)&v416[16];
              if (*(_QWORD *)&v416[16])
              {
                v363 = (unint64_t *)(*(_QWORD *)&v416[16] + 8);
                do
                  v364 = __ldaxr(v363);
                while (__stlxr(v364 - 1, v363));
                if (!v364)
                {
                  ((void (*)(std::__shared_weak_count *))v362->__on_zero_shared)(v362);
                  std::__shared_weak_count::__release_weak(v362);
                }
              }
            }
            else
            {
              os_log_type_enabled(v333, OS_LOG_TYPE_ERROR);
              *(_WORD *)v416 = 0;
              v365 = (void *)_os_log_send_and_compose_impl();
              if (v365)
                free(v365);
            }
            if (v301)
            {
              sub_20E8C003C((uint64_t)&v408, "Duplicate id detected. Not adding as node.");
              sub_20E863570((uint64_t)&v408);
            }
            sub_20E863570((uint64_t)&v408);
            v366 = v415;
            if (v415)
            {
              v367 = (unint64_t *)&v415->__shared_owners_;
              do
                v368 = __ldaxr(v367);
              while (__stlxr(v368 - 1, v367));
              if (!v368)
              {
                ((void (*)(std::__shared_weak_count *))v366->__on_zero_shared)(v366);
                std::__shared_weak_count::__release_weak(v366);
              }
            }
            return;
          }
        }
        memmove(v322, v320, v321);
        goto LABEL_512;
      }
    }
    else
    {
      v209 = 0;
      v210 = 152 * v185;
      v211 = 0;
      if (v185)
        goto LABEL_325;
    }
    if (v179 - v175 < 1)
    {
      v374 = v172;
      v376 = v171;
      if (v175 == v179)
        v217 = 1;
      else
        v217 = 2 * v185;
      if (v217 > 0x1AF286BCA1AF286)
        sub_20E877A38();
      v218 = v170;
      v219 = v174;
      v220 = (char *)operator new(152 * v217);
      v210 = (uint64_t)&v220[152 * (v217 >> 2)];
      v211 = &v220[152 * v217];
      if (v209)
      {
        v221 = &v220[152 * v217];
        operator delete(v209);
        v211 = v221;
      }
      v174 = v219;
      v170 = v218;
      v172 = v374;
      v171 = v376;
    }
    else
    {
      v215 = 0x86BCA1AF286BCA1BLL * ((v210 - (uint64_t)v209) >> 3);
      if (v215 >= -1)
        v216 = v215 + 1;
      else
        v216 = v215 + 2;
      v210 -= 152 * (v216 >> 1);
    }
    goto LABEL_325;
  }
  if (v186 == v176)
  {
    *(_QWORD *)v176 = v169;
    *(_DWORD *)(v176 + 8) = v171;
    *(_DWORD *)(v176 + 12) = v170;
    *(_DWORD *)(v176 + 16) = v173;
    *(_DWORD *)(v176 + 20) = v172;
    v212 = v175 + 152 * v185;
    *(_QWORD *)(v212 + 24) = v174;
    *(float32x4_t *)(v212 + 32) = v402;
    *(double *)(v212 + 48) = v403;
    *(float64x2_t *)(v212 + 56) = v400;
    *(_QWORD *)(v212 + 72) = v401;
    v213 = v398;
    *(_OWORD *)(v212 + 80) = v399;
    *(_OWORD *)(v212 + 96) = v213;
    v214 = v396;
    *(float64x2_t *)(v212 + 112) = v397;
    *(float64x2_t *)(v212 + 128) = v214;
    *(double *)(v212 + 144) = v184;
    a8[123] = v176 + 152;
    v186 = v176;
    v205 = v176 + 152;
    if (v205 == v186)
      goto LABEL_474;
  }
  else
  {
    *(float32x4_t *)v416 = v387;
    *(double *)&v416[16] = v388;
    rep = v390;
    v407 = v391;
    v408 = v389;
    v405 = v393;
    v406 = v392;
    v188 = v186 + 152;
    v189 = v176 - 152;
    v404 = v394;
    v190 = v176;
    if (v176 >= 0x98)
    {
      do
      {
        v191 = *(_OWORD *)v189;
        *(_QWORD *)(v190 + 16) = *(_QWORD *)(v189 + 16);
        *(_OWORD *)v190 = v191;
        *(_QWORD *)(v190 + 24) = *(_QWORD *)(v189 + 24);
        v192 = *(_OWORD *)(v189 + 32);
        *(_QWORD *)(v190 + 48) = *(_QWORD *)(v189 + 48);
        *(_OWORD *)(v190 + 32) = v192;
        v193 = *(_OWORD *)(v189 + 56);
        *(_QWORD *)(v190 + 72) = *(_QWORD *)(v189 + 72);
        *(_OWORD *)(v190 + 56) = v193;
        *(_OWORD *)(v190 + 80) = *(_OWORD *)(v189 + 80);
        *(_OWORD *)(v190 + 96) = *(_OWORD *)(v189 + 96);
        *(_OWORD *)(v190 + 112) = *(_OWORD *)(v189 + 112);
        *(_OWORD *)(v190 + 128) = *(_OWORD *)(v189 + 128);
        *(_QWORD *)(v190 + 144) = *(_QWORD *)(v189 + 144);
        v190 += 152;
        v189 += 152;
      }
      while (v189 < v176);
    }
    a8[123] = v190;
    if (v176 != v188)
    {
      v194 = 0;
      v195 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v176 - v188) >> 3);
      v196 = -8 * ((uint64_t)(v176 - v188) >> 3);
      v197 = v175 + 152 * v185 + 152 * v195;
      do
      {
        v198 = *(_OWORD *)(v197 + v194 - 152);
        v199 = v176 + v194;
        *(_DWORD *)(v199 - 136) = *(_DWORD *)(v197 + v194 - 136);
        *(_OWORD *)(v199 - 152) = v198;
        *(_QWORD *)(v199 - 128) = *(_QWORD *)(v197 + v194 - 128);
        v200 = *(_OWORD *)(v197 + v194 - 120);
        *(_QWORD *)(v199 - 104) = *(_QWORD *)(v197 + v194 - 104);
        *(_OWORD *)(v199 - 120) = v200;
        v201 = *(_OWORD *)(v197 + v194 - 96);
        *(_QWORD *)(v199 - 80) = *(_QWORD *)(v197 + v194 - 80);
        *(_OWORD *)(v199 - 96) = v201;
        *(_OWORD *)(v199 - 72) = *(_OWORD *)(v197 + v194 - 72);
        *(_OWORD *)(v199 - 56) = *(_OWORD *)(v197 + v194 - 56);
        *(_OWORD *)(v199 - 40) = *(_OWORD *)(v197 + v194 - 40);
        *(_OWORD *)(v199 - 24) = *(_OWORD *)(v197 + v194 - 24);
        *(_QWORD *)(v199 - 8) = *(_QWORD *)(v197 + v194 - 8);
        v194 -= 152;
      }
      while (v196 != v194);
    }
    *(_QWORD *)v186 = v169;
    *(_DWORD *)(v186 + 8) = v171;
    *(_DWORD *)(v186 + 12) = v170;
    *(_DWORD *)(v186 + 16) = v173;
    v202 = v175 + 152 * v185;
    *(_QWORD *)(v202 + 24) = v174;
    *(_OWORD *)(v202 + 32) = *(_OWORD *)v416;
    *(_QWORD *)(v202 + 48) = *(_QWORD *)&v416[16];
    *(float64x2_t *)(v202 + 56) = v408;
    *(_QWORD *)(v202 + 72) = rep;
    v203 = v406;
    *(_OWORD *)(v202 + 80) = v407;
    *(_OWORD *)(v202 + 96) = v203;
    v204 = v404;
    *(float64x2_t *)(v202 + 112) = v405;
    *(float64x2_t *)(v202 + 128) = v204;
    *(double *)(v202 + 144) = v184;
    v205 = a8[123];
    if (v205 == v186)
      goto LABEL_474;
  }
LABEL_334:
  v237 = (uint64_t *)v18[2];
  if (!v237)
    goto LABEL_471;
  v238 = (std::__shared_weak_count *)v18[1];
  if (!v238
    || (v239 = *(double *)v18,
        *(double *)&v240 = COERCE_DOUBLE(std::__shared_weak_count::lock(v238)),
        *(double *)&v240 == 0.0))
  {
    sub_20EE6CA64();
  }
  v241 = *(double *)&v240;
  *(float64_t *)v402.i64 = v239;
  v402.i64[1] = (uint64_t)v240;
  v400 = 0uLL;
  v242 = HIDWORD(v386);
  v243 = (unint64_t *)&v240->__shared_owners_;
  v408.f64[0] = v239;
  *(_QWORD *)&v408.f64[1] = v240;
  do
    v244 = __ldxr(v243);
  while (__stxr(v244 + 1, v243));
  LODWORD(rep) = v242;
  v245 = sub_20E9DF85C(v237, (uint64_t *)a6);
  if (!v245)
  {
    v249 = *(_DWORD *)(a6 + 16);
    v250 = *(_DWORD *)(a6 + 8);
    v251 = v250 ^ __ROR4__(v249, 13);
    v252 = v237[1];
    if (v252)
    {
      v253 = (uint8x8_t)vcnt_s8((int8x8_t)v252);
      v253.i16[0] = vaddlv_u8(v253);
      if (v253.u32[0] > 1uLL)
      {
        v185 = v251;
        if (v252 <= v251)
          v185 = v251 % v252;
      }
      else
      {
        v185 = ((_DWORD)v252 - 1) & v251;
      }
      v254 = *(void ***)(*v237 + 8 * v185);
      if (v254)
      {
        v255 = (char *)*v254;
        if (*v254)
        {
          v256 = *(_QWORD *)a6;
          if (v253.u32[0] < 2uLL)
          {
            while (1)
            {
              v258 = *((_QWORD *)v255 + 1);
              if (v258 == v251)
              {
                if (*((_DWORD *)v255 + 8) == v249 && *((_QWORD *)v255 + 2) == v256 && *((_DWORD *)v255 + 6) == v250)
                  goto LABEL_434;
              }
              else if ((v258 & (v252 - 1)) != v185)
              {
                goto LABEL_370;
              }
              v255 = *(char **)v255;
              if (!v255)
                goto LABEL_370;
            }
          }
          do
          {
            v257 = *((_QWORD *)v255 + 1);
            if (v257 == v251)
            {
              if (*((_DWORD *)v255 + 8) == v249 && *((_QWORD *)v255 + 2) == v256 && *((_DWORD *)v255 + 6) == v250)
                goto LABEL_434;
            }
            else
            {
              if (v257 >= v252)
                v257 %= v252;
              if (v257 != v185)
                break;
            }
            v255 = *(char **)v255;
          }
          while (v255);
        }
      }
    }
LABEL_370:
    v255 = (char *)operator new(0x50uLL);
    *(_QWORD *)v416 = v255;
    *(_QWORD *)&v416[8] = v237 + 2;
    v377 = v237 + 2;
    *(_QWORD *)v255 = 0;
    *((_QWORD *)v255 + 1) = v251;
    *((_OWORD *)v255 + 1) = *(_OWORD *)a6;
    *((_QWORD *)v255 + 4) = *(_QWORD *)(a6 + 16);
    *(_OWORD *)(v255 + 40) = 0u;
    *(_OWORD *)(v255 + 56) = 0u;
    *((_DWORD *)v255 + 18) = 1065353216;
    v416[16] = 1;
    v259 = (float)(unint64_t)(v237[3] + 1);
    v260 = *((float *)v237 + 8);
    if (v252 && (float)(v260 * (float)v252) >= v259)
    {
      v251 = v185;
      goto LABEL_424;
    }
    v261 = 1;
    if (v252 >= 3)
      v261 = (v252 & (v252 - 1)) != 0;
    v262 = v261 | (2 * v252);
    v263 = vcvtps_u32_f32(v259 / v260);
    if (v262 <= v263)
      prime = v263;
    else
      prime = v262;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v252 = v237[1];
    }
    if (prime <= v252)
    {
      if (prime >= v252)
        goto LABEL_420;
      v275 = vcvtps_u32_f32((float)(unint64_t)v237[3] / *((float *)v237 + 8));
      if (v252 < 3 || (v276 = (uint8x8_t)vcnt_s8((int8x8_t)v252), v276.i16[0] = vaddlv_u8(v276), v276.u32[0] > 1uLL))
      {
        v275 = std::__next_prime(v275);
      }
      else
      {
        v277 = 1 << -(char)__clz(v275 - 1);
        if (v275 >= 2)
          v275 = v277;
      }
      if (prime <= v275)
        prime = v275;
      if (prime >= v252)
      {
        v252 = v237[1];
LABEL_420:
        if ((v252 & (v252 - 1)) != 0)
        {
          if (v252 <= v251)
            v251 %= v252;
        }
        else
        {
          v251 = ((_DWORD)v252 - 1) & v251;
        }
LABEL_424:
        v282 = *v237;
        v283 = *(_QWORD **)(*v237 + 8 * v251);
        if (v283)
        {
          *(_QWORD *)v255 = *v283;
        }
        else
        {
          *(_QWORD *)v255 = *v377;
          *v377 = v255;
          *(_QWORD *)(v282 + 8 * v251) = v377;
          if (!*(_QWORD *)v255)
            goto LABEL_433;
          v284 = *(_QWORD *)(*(_QWORD *)v255 + 8);
          if ((v252 & (v252 - 1)) != 0)
          {
            if (v284 >= v252)
              v284 %= v252;
          }
          else
          {
            v284 &= v252 - 1;
          }
          v283 = (_QWORD *)(*v237 + 8 * v284);
        }
        *v283 = v255;
LABEL_433:
        ++v237[3];
LABEL_434:
        v285 = vcvtps_u32_f32((float)(unint64_t)v237[5] / *((float *)v255 + 18));
        if (v285 == 1)
        {
          v285 = 2;
        }
        else if ((v285 & (v285 - 1)) != 0)
        {
          v285 = std::__next_prime(v285);
        }
        v286 = *(int8x8_t *)(v255 + 48);
        if (v285 > *(_QWORD *)&v286)
          goto LABEL_439;
        if (v285 < *(_QWORD *)&v286)
        {
          v287 = vcvtps_u32_f32((float)*((unint64_t *)v255 + 8) / *((float *)v255 + 18));
          if (*(_QWORD *)&v286 < 3uLL
            || (v288 = (uint8x8_t)vcnt_s8(v286), v288.i16[0] = vaddlv_u8(v288), v288.u32[0] > 1uLL))
          {
            v287 = std::__next_prime(v287);
          }
          else
          {
            v289 = 1 << -(char)__clz(v287 - 1);
            if (v287 >= 2)
              v287 = v289;
          }
          if (v285 <= v287)
            v285 = v287;
          if (v285 < *(_QWORD *)&v286)
          {
LABEL_439:
            sub_20E8D2B3C((uint64_t)(v255 + 40), v285);
            v242 = rep;
            v241 = v408.f64[1];
            v239 = v408.f64[0];
          }
        }
        *(_DWORD *)v416 = v242;
        *(float64_t *)&v416[8] = v239;
        *(float64_t *)&v416[16] = v241;
        v408 = 0uLL;
        LODWORD(v417) = v242;
        sub_20FB96C54((uint64_t)(v255 + 40), v242, (uint64_t)v416);
        v246 = *(std::__shared_weak_count **)&v416[16];
        v18 = a8;
        if (!*(_QWORD *)&v416[16])
          goto LABEL_455;
        v290 = (unint64_t *)(*(_QWORD *)&v416[16] + 8);
        do
          v248 = __ldaxr(v290);
        while (__stlxr(v248 - 1, v290));
        goto LABEL_453;
      }
      if (!prime)
      {
        v370 = (void *)*v237;
        *v237 = 0;
        if (v370)
          operator delete(v370);
        v252 = 0;
        v237[1] = 0;
        goto LABEL_420;
      }
    }
    if (prime >> 61)
      sub_20E877A38();
    v265 = operator new(8 * prime);
    v266 = (void *)*v237;
    *v237 = (uint64_t)v265;
    if (v266)
      operator delete(v266);
    v267 = 0;
    v237[1] = prime;
    do
      *(_QWORD *)(*v237 + 8 * v267++) = 0;
    while (prime != v267);
    v268 = (_QWORD *)*v377;
    if (!*v377)
    {
LABEL_419:
      v252 = prime;
      goto LABEL_420;
    }
    v269 = v268[1];
    v270 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v271 = v269 & v270;
      *(_QWORD *)(*v237 + 8 * v271) = v377;
      for (j = (_QWORD *)*v268; *v268; j = (_QWORD *)*v268)
      {
        v273 = j[1] & v270;
        if (v273 == v271)
        {
          v268 = j;
        }
        else if (*(_QWORD *)(*v237 + 8 * v273))
        {
          *v268 = *j;
          v274 = 8 * v273;
          *j = **(_QWORD **)(*v237 + v274);
          **(_QWORD **)(*v237 + v274) = j;
        }
        else
        {
          *(_QWORD *)(*v237 + 8 * v273) = v268;
          v268 = j;
          v271 = v273;
        }
      }
      goto LABEL_419;
    }
    if (v269 >= prime)
      v269 %= prime;
    *(_QWORD *)(*v237 + 8 * v269) = v377;
    v279 = (_QWORD *)*v268;
    if (!*v268)
      goto LABEL_419;
    while (1)
    {
      v281 = v279[1];
      if (v281 >= prime)
        v281 %= prime;
      if (v281 == v269)
        goto LABEL_413;
      if (*(_QWORD *)(*v237 + 8 * v281))
      {
        *v268 = *v279;
        v280 = 8 * v281;
        *v279 = **(_QWORD **)(*v237 + v280);
        **(_QWORD **)(*v237 + v280) = v279;
        v279 = v268;
LABEL_413:
        v268 = v279;
        v279 = (_QWORD *)*v279;
        if (!v279)
          goto LABEL_419;
      }
      else
      {
        *(_QWORD *)(*v237 + 8 * v281) = v268;
        v268 = v279;
        v279 = (_QWORD *)*v279;
        v269 = v281;
        if (!v279)
          goto LABEL_419;
      }
    }
  }
  *(_DWORD *)v416 = v242;
  *(float64_t *)&v416[8] = v239;
  *(float64_t *)&v416[16] = v241;
  v408 = 0uLL;
  LODWORD(v417) = v242;
  sub_20FB96C54((uint64_t)(v245 + 5), v242, (uint64_t)v416);
  v246 = *(std::__shared_weak_count **)&v416[16];
  v18 = a8;
  if (*(_QWORD *)&v416[16])
  {
    v247 = (unint64_t *)(*(_QWORD *)&v416[16] + 8);
    do
      v248 = __ldaxr(v247);
    while (__stlxr(v248 - 1, v247));
LABEL_453:
    if (!v248)
    {
      ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
      std::__shared_weak_count::__release_weak(v246);
    }
  }
LABEL_455:
  v291 = v408.f64[1];
  if (*(_QWORD *)&v408.f64[1])
  {
    v292 = (unint64_t *)(*(_QWORD *)&v408.f64[1] + 8);
    do
      v293 = __ldaxr(v292);
    while (__stlxr(v293 - 1, v292));
    if (!v293)
    {
      (*(void (**)(float64_t))(**(_QWORD **)&v291 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v291));
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v291);
    }
  }
  v294 = (std::__shared_weak_count *)v402.i64[1];
  if (v402.i64[1])
  {
    v295 = (unint64_t *)(v402.i64[1] + 8);
    do
      v296 = __ldaxr(v295);
    while (__stlxr(v296 - 1, v295));
    if (!v296)
    {
      ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
      std::__shared_weak_count::__release_weak(v294);
    }
  }
  v297 = *(std::__shared_weak_count **)&v400.f64[1];
  if (*(_QWORD *)&v400.f64[1])
  {
    v298 = (unint64_t *)(*(_QWORD *)&v400.f64[1] + 8);
    do
      v299 = __ldaxr(v298);
    while (__stlxr(v299 - 1, v298));
    if (!v299)
    {
      ((void (*)(std::__shared_weak_count *))v297->__on_zero_shared)(v297);
      std::__shared_weak_count::__release_weak(v297);
    }
  }
  v205 = v18[123];
LABEL_471:
  if (v205 == v186)
    goto LABEL_474;
  if (*((_BYTE *)v18 + 968))
  {
    v300 = (uint64_t)(v18 + 5);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioflintconverter.hpp", 1778, (uint64_t)"track.hasStructure()", 20, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    if (*((_BYTE *)v18 + 968))
      v300 = (uint64_t)(v18 + 5);
    else
      v300 = 0;
  }
  v309 = *(_QWORD *)(v300 + 96);
  if ((v309 != 0) != (*(_QWORD *)(v300 + 544) != 0))
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioflintconverter.hpp", 1783, (uint64_t)"X->src_point.isSetup() == X->end_point.isSetup()", 48, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v309 = *(_QWORD *)(v300 + 96);
  }
  if (!v309)
  {
    v310 = sub_20E9DF85C(v379, (uint64_t *)a6);
    if (v310)
      v311 = (uint64_t)(v310 + 5);
    else
      v311 = 0;
    if (!v310
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioflintconverter.hpp", 1788, (uint64_t)"pose_ref != nullptr", 19, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    if (!*(_QWORD *)(v311 + 64)
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioflintconverter.hpp", 1789, (uint64_t)"pose_ref->lens", 14, (uint64_t)"Lens does not exist", 19, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    _Q0 = v393;
    _Q1 = vmulq_f64(_Q0, _Q0);
    _D2 = v393.f64[1];
    __asm { FMLA            D1, D2, V0.D[1] }
    v315 = v378.f64[0];
    _Q1.f64[0] = 1.0 / sqrt(_Q1.f64[0] + v315 * v315);
    *(float64x2_t *)v416 = vmulq_n_f64(v393, _Q1.f64[0]);
    *(_QWORD *)&v416[16] = *(_OWORD *)&vmulq_f64(v378, _Q1);
    _Q0 = v394;
    _Q1 = vmulq_f64(_Q0, _Q0);
    _D3 = v394.f64[1];
    __asm { FMLA            D1, D3, V0.D[1] }
    _Q1.f64[0] = 1.0 / sqrt(_Q1.f64[0] + v315 * v315);
    v408 = vmulq_n_f64(v394, _Q1.f64[0]);
    rep = *(_OWORD *)&vmulq_f64(v378, _Q1);
    if (!sub_20FCCD298(v300, (__int128 *)v416, (__int128 *)&v408, (__int128 *)a6, v311)
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioflintconverter.hpp", 1802, (uint64_t)"ret", 3, (uint64_t)"Fail to set anchor", 18, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
  }
}

void sub_20FB96AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;
  uint64_t v67;

  if (*(_BYTE *)(v67 - 168))
  {
    if (*(char *)(v67 - 169) < 0)
      operator delete(*(void **)(v67 - 192));
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a67);
  _Unwind_Resume(a1);
}

void sub_20FB96AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;
  uint64_t v67;

  sub_20E86E8C4(&a55);
  sub_20E86E8C4(&a51);
  sub_20E86E658(v67 - 192);
  sub_20E863714((uint64_t)&a67);
  _Unwind_Resume(a1);
}

void sub_20FB96B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;
  uint64_t v67;

  sub_20E86E658(v67 - 192);
  sub_20E863714((uint64_t)&a67);
  _Unwind_Resume(a1);
}

void sub_20FB96B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;
  uint64_t v67;

  MEMORY[0x212BC6398](v67, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)&a67);
  _Unwind_Resume(a1);
}

void sub_20FB96B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;

  sub_20E863714((uint64_t)&a67);
  _Unwind_Resume(a1);
}

void sub_20FB96B7C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  _Unwind_Resume(a1);
}

void sub_20FB96C54(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  int8x8_t v21;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2)
                return;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (uint64_t *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = (_QWORD *)(a1 + 16);
  v14 = (char *)operator new(0x30uLL);
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v6;
  *((_DWORD *)v14 + 4) = *(_DWORD *)a3;
  *(_OWORD *)(v14 + 24) = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *((_DWORD *)v14 + 10) = *(_DWORD *)(a3 + 24);
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
    goto LABEL_50;
  v17 = 1;
  if (v7 >= 3)
    v17 = (v7 & (v7 - 1)) != 0;
  v18 = v17 | (2 * v7);
  v19 = vcvtps_u32_f32(v15 / v16);
  if (v18 <= v19)
    prime = v19;
  else
    prime = v18;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
  }
  v21 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v21)
    goto LABEL_34;
  if (prime < *(_QWORD *)&v21)
  {
    v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v21 < 3uLL || (v23 = (uint8x8_t)vcnt_s8(v21), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
    {
      v22 = std::__next_prime(v22);
    }
    else
    {
      v24 = 1 << -(char)__clz(v22 - 1);
      if (v22 >= 2)
        v22 = v24;
    }
    if (prime <= v22)
      prime = v22;
    if (prime < *(_QWORD *)&v21)
LABEL_34:
      sub_20E8D2B3C(a1, prime);
  }
  v7 = *(_QWORD *)(a1 + 8);
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6)
    {
      v3 = v6 % v7;
      v25 = *(_QWORD *)a1;
      v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
      if (!v26)
        goto LABEL_53;
LABEL_51:
      *(_QWORD *)v14 = *v26;
LABEL_59:
      *v26 = v14;
      goto LABEL_60;
    }
    v3 = v6;
LABEL_50:
    v25 = *(_QWORD *)a1;
    v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (!v26)
      goto LABEL_53;
    goto LABEL_51;
  }
  v3 = ((_DWORD)v7 - 1) & v6;
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v26)
    goto LABEL_51;
LABEL_53:
  *(_QWORD *)v14 = *v13;
  *v13 = v14;
  *(_QWORD *)(v25 + 8 * v3) = v13;
  if (*(_QWORD *)v14)
  {
    v27 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v27 >= v7)
        v27 %= v7;
    }
    else
    {
      v27 &= v7 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
}

void sub_20FB96F5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EC3E960((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FB96F70(_QWORD *a1, uint64_t *a2, unsigned int a3)
{
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;

  v4 = sub_20E9DF85C(a1, a2);
  if (v4)
  {
    v5 = v4[6];
    if (v5)
    {
      v6 = a3;
      v7 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
      v7.i16[0] = vaddlv_u8(v7);
      if (v7.u32[0] > 1uLL)
      {
        v8 = a3;
        if (v5 <= a3)
          v8 = a3 % v5;
      }
      else
      {
        v8 = ((_DWORD)v5 - 1) & a3;
      }
      v9 = v4[5];
      v10 = *(uint64_t ***)(v9 + 8 * v8);
      if (v10)
      {
        v11 = *v10;
        if (*v10)
        {
          v12 = v5 - 1;
          if (v7.u32[0] < 2uLL)
          {
            while (1)
            {
              v13 = v11[1];
              if (v13 == a3)
              {
                if (*((_DWORD *)v11 + 4) == a3)
                  goto LABEL_23;
              }
              else if ((v13 & v12) != v8)
              {
                return;
              }
              v11 = (uint64_t *)*v11;
              if (!v11)
                return;
            }
          }
          do
          {
            v14 = v11[1];
            if (v14 == a3)
            {
              if (*((_DWORD *)v11 + 4) == a3)
              {
LABEL_23:
                if (v7.u32[0] > 1uLL)
                {
                  if (v5 <= a3)
                    v6 = a3 % v5;
                }
                else
                {
                  v6 = v12 & a3;
                }
                v15 = *(uint64_t **)(v9 + 8 * v6);
                do
                {
                  v16 = v15;
                  v15 = (uint64_t *)*v15;
                }
                while (v15 != v11);
                if (v16 == v4 + 7)
                  goto LABEL_40;
                v17 = v16[1];
                if (v7.u32[0] > 1uLL)
                {
                  if (v17 >= v5)
                    v17 %= v5;
                }
                else
                {
                  v17 &= v12;
                }
                if (v17 != v6)
                {
LABEL_40:
                  if (!*v11)
                    goto LABEL_41;
                  v18 = *(_QWORD *)(*v11 + 8);
                  if (v7.u32[0] > 1uLL)
                  {
                    if (v18 >= v5)
                      v18 %= v5;
                  }
                  else
                  {
                    v18 &= v12;
                  }
                  if (v18 != v6)
LABEL_41:
                    *(_QWORD *)(v9 + 8 * v6) = 0;
                }
                v19 = *v11;
                if (*v11)
                {
                  v20 = *(_QWORD *)(v19 + 8);
                  if (v7.u32[0] > 1uLL)
                  {
                    if (v20 >= v5)
                      v20 %= v5;
                  }
                  else
                  {
                    v20 &= v12;
                  }
                  if (v20 != v6)
                  {
                    *(_QWORD *)(v4[5] + 8 * v20) = v16;
                    v19 = *v11;
                  }
                }
                *v16 = v19;
                *v11 = 0;
                --v4[8];
                v21 = (std::__shared_weak_count *)v11[4];
                if (v21)
                {
                  p_shared_owners = (unint64_t *)&v21->__shared_owners_;
                  do
                    v23 = __ldaxr(p_shared_owners);
                  while (__stlxr(v23 - 1, p_shared_owners));
                  if (!v23)
                  {
                    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
                    std::__shared_weak_count::__release_weak(v21);
                  }
                }
                operator delete(v11);
                return;
              }
            }
            else
            {
              if (v14 >= v5)
                v14 %= v5;
              if (v14 != v8)
                return;
            }
            v11 = (uint64_t *)*v11;
          }
          while (v11);
        }
      }
    }
  }
}

double sub_20FB971A4(uint64_t a1, double *a2)
{
  double *v2;
  double *v3;
  uint64_t v4;
  double result;

  v2 = *(double **)a1;
  v3 = *(double **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = a2[2] + *a2 * *v3 + a2[1] * v3[1];
  result = a2[4] * v3[1] + a2[5];
  v2[1] = result;
  if (v4)
  {
    *(double *)v4 = *a2;
    *(double *)(v4 + 8) = a2[1];
    *(_QWORD *)(v4 + 16) = 0;
    result = a2[4];
    *(double *)(v4 + 24) = result;
  }
  return result;
}

void sub_20FB97204(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t *v4;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unsigned int v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  uint8x8_t v21;
  void **v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  float v28;
  float v29;
  _BOOL8 v30;
  unint64_t v31;
  unint64_t v32;
  size_t prime;
  void *v34;
  void *v35;
  uint64_t v36;
  _QWORD *v37;
  size_t v38;
  size_t v39;
  size_t v40;
  _QWORD *i;
  size_t v42;
  uint64_t v43;
  unint64_t v44;
  uint8x8_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  size_t v49;
  uint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  unint64_t v53;
  int8x8_t v54;
  unint64_t v55;
  uint8x8_t v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t *v59;
  unint64_t v60;
  void *v61;
  std::__shared_weak_count *v62;
  std::__shared_weak_count *v63;
  char *v64;
  uint64_t *v65;
  std::__shared_weak_count *v66;
  unsigned int v67;

  v4 = (uint64_t *)a1[2];
  if (v4)
  {
    if (!a1[1]
      || (v7 = (uint64_t *)*a1, (v8 = std::__shared_weak_count::lock((std::__shared_weak_count *)a1[1])) == 0))
    {
      sub_20EE6CA64();
    }
    v9 = v8;
    v62 = v8;
    v10 = *(_DWORD *)(a3 + 4);
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    v63 = v8;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    v13 = sub_20E9DF85C(v4, (uint64_t *)a2);
    if (v13)
    {
      LODWORD(v64) = v10;
      v65 = v7;
      v66 = v9;
      v67 = v10;
      sub_20FB97D34((uint64_t)(v13 + 5), v10, (uint64_t)&v64);
      v14 = v66;
      if (!v66)
      {
LABEL_118:
        v59 = (unint64_t *)&v62->__shared_owners_;
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
        }
        return;
      }
      v15 = (unint64_t *)&v66->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
LABEL_116:
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
      goto LABEL_118;
    }
    v17 = *(_DWORD *)(a2 + 16);
    v18 = *(_DWORD *)(a2 + 8);
    v19 = v18 ^ __ROR4__(v17, 13);
    v20 = v4[1];
    if (v20)
    {
      v21 = (uint8x8_t)vcnt_s8((int8x8_t)v20);
      v21.i16[0] = vaddlv_u8(v21);
      if (v21.u32[0] > 1uLL)
      {
        v3 = v19;
        if (v20 <= v19)
          v3 = v19 % v20;
      }
      else
      {
        v3 = ((_DWORD)v20 - 1) & v19;
      }
      v22 = *(void ***)(*v4 + 8 * v3);
      if (v22)
      {
        v23 = (char *)*v22;
        if (*v22)
        {
          v24 = *(_QWORD *)a2;
          if (v21.u32[0] < 2uLL)
          {
            while (1)
            {
              v26 = *((_QWORD *)v23 + 1);
              if (v26 == v19)
              {
                if (*((_DWORD *)v23 + 8) == v17 && *((_QWORD *)v23 + 2) == v24 && *((_DWORD *)v23 + 6) == v18)
                  goto LABEL_97;
              }
              else if ((v26 & (v20 - 1)) != v3)
              {
                goto LABEL_37;
              }
              v23 = *(char **)v23;
              if (!v23)
                goto LABEL_37;
            }
          }
          do
          {
            v25 = *((_QWORD *)v23 + 1);
            if (v25 == v19)
            {
              if (*((_DWORD *)v23 + 8) == v17 && *((_QWORD *)v23 + 2) == v24 && *((_DWORD *)v23 + 6) == v18)
                goto LABEL_97;
            }
            else
            {
              if (v25 >= v20)
                v25 %= v20;
              if (v25 != v3)
                break;
            }
            v23 = *(char **)v23;
          }
          while (v23);
        }
      }
    }
LABEL_37:
    v23 = (char *)operator new(0x50uLL);
    v27 = v4 + 2;
    v64 = v23;
    v65 = v4 + 2;
    *(_QWORD *)v23 = 0;
    *((_QWORD *)v23 + 1) = v19;
    *((_OWORD *)v23 + 1) = *(_OWORD *)a2;
    *((_QWORD *)v23 + 4) = *(_QWORD *)(a2 + 16);
    *(_OWORD *)(v23 + 40) = 0u;
    *(_OWORD *)(v23 + 56) = 0u;
    *((_DWORD *)v23 + 18) = 1065353216;
    LOBYTE(v66) = 1;
    v28 = (float)(unint64_t)(v4[3] + 1);
    v29 = *((float *)v4 + 8);
    if (v20 && (float)(v29 * (float)v20) >= v28)
    {
      v19 = v3;
      goto LABEL_87;
    }
    v30 = 1;
    if (v20 >= 3)
      v30 = (v20 & (v20 - 1)) != 0;
    v31 = v30 | (2 * v20);
    v32 = vcvtps_u32_f32(v28 / v29);
    if (v31 <= v32)
      prime = v32;
    else
      prime = v31;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v20 = v4[1];
    }
    if (prime <= v20)
    {
      if (prime >= v20)
        goto LABEL_83;
      v44 = vcvtps_u32_f32((float)(unint64_t)v4[3] / *((float *)v4 + 8));
      if (v20 < 3 || (v45 = (uint8x8_t)vcnt_s8((int8x8_t)v20), v45.i16[0] = vaddlv_u8(v45), v45.u32[0] > 1uLL))
      {
        v44 = std::__next_prime(v44);
      }
      else
      {
        v46 = 1 << -(char)__clz(v44 - 1);
        if (v44 >= 2)
          v44 = v46;
      }
      if (prime <= v44)
        prime = v44;
      if (prime >= v20)
      {
        v20 = v4[1];
LABEL_83:
        if ((v20 & (v20 - 1)) != 0)
        {
          if (v20 <= v19)
            v19 %= v20;
        }
        else
        {
          v19 = ((_DWORD)v20 - 1) & v19;
        }
LABEL_87:
        v50 = *v4;
        v51 = *(_QWORD **)(*v4 + 8 * v19);
        if (v51)
        {
          *(_QWORD *)v23 = *v51;
        }
        else
        {
          *(_QWORD *)v23 = *v27;
          *v27 = v23;
          *(_QWORD *)(v50 + 8 * v19) = v27;
          if (!*(_QWORD *)v23)
            goto LABEL_96;
          v52 = *(_QWORD *)(*(_QWORD *)v23 + 8);
          if ((v20 & (v20 - 1)) != 0)
          {
            if (v52 >= v20)
              v52 %= v20;
          }
          else
          {
            v52 &= v20 - 1;
          }
          v51 = (_QWORD *)(*v4 + 8 * v52);
        }
        *v51 = v23;
LABEL_96:
        ++v4[3];
LABEL_97:
        v53 = vcvtps_u32_f32((float)(unint64_t)v4[5] / *((float *)v23 + 18));
        if (v53 == 1)
        {
          v53 = 2;
        }
        else if ((v53 & (v53 - 1)) != 0)
        {
          v53 = std::__next_prime(v53);
        }
        v54 = *(int8x8_t *)(v23 + 48);
        if (v53 > *(_QWORD *)&v54)
          goto LABEL_102;
        if (v53 < *(_QWORD *)&v54)
        {
          v55 = vcvtps_u32_f32((float)*((unint64_t *)v23 + 8) / *((float *)v23 + 18));
          if (*(_QWORD *)&v54 < 3uLL || (v56 = (uint8x8_t)vcnt_s8(v54), v56.i16[0] = vaddlv_u8(v56), v56.u32[0] > 1uLL))
          {
            v55 = std::__next_prime(v55);
          }
          else
          {
            v57 = 1 << -(char)__clz(v55 - 1);
            if (v55 >= 2)
              v55 = v57;
          }
          if (v53 <= v55)
            v53 = v55;
          if (v53 < *(_QWORD *)&v54)
          {
LABEL_102:
            sub_20E8D2B3C((uint64_t)(v23 + 40), v53);
            v9 = v63;
          }
        }
        LODWORD(v64) = v10;
        v65 = v7;
        v66 = v9;
        v67 = v10;
        sub_20FB97D34((uint64_t)(v23 + 40), v10, (uint64_t)&v64);
        v14 = v66;
        if (!v66)
          goto LABEL_118;
        v58 = (unint64_t *)&v66->__shared_owners_;
        do
          v16 = __ldaxr(v58);
        while (__stlxr(v16 - 1, v58));
        goto LABEL_116;
      }
      if (!prime)
      {
        v61 = (void *)*v4;
        *v4 = 0;
        if (v61)
          operator delete(v61);
        v20 = 0;
        v4[1] = 0;
        goto LABEL_83;
      }
    }
    if (prime >> 61)
      sub_20E877A38();
    v34 = operator new(8 * prime);
    v35 = (void *)*v4;
    *v4 = (uint64_t)v34;
    if (v35)
      operator delete(v35);
    v36 = 0;
    v4[1] = prime;
    do
      *(_QWORD *)(*v4 + 8 * v36++) = 0;
    while (prime != v36);
    v37 = (_QWORD *)*v27;
    if (!*v27)
    {
LABEL_82:
      v20 = prime;
      goto LABEL_83;
    }
    v38 = v37[1];
    v39 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v40 = v38 & v39;
      *(_QWORD *)(*v4 + 8 * v40) = v27;
      for (i = (_QWORD *)*v37; *v37; i = (_QWORD *)*v37)
      {
        v42 = i[1] & v39;
        if (v42 == v40)
        {
          v37 = i;
        }
        else if (*(_QWORD *)(*v4 + 8 * v42))
        {
          *v37 = *i;
          v43 = 8 * v42;
          *i = **(_QWORD **)(*v4 + v43);
          **(_QWORD **)(*v4 + v43) = i;
        }
        else
        {
          *(_QWORD *)(*v4 + 8 * v42) = v37;
          v37 = i;
          v40 = v42;
        }
      }
      goto LABEL_82;
    }
    if (v38 >= prime)
      v38 %= prime;
    *(_QWORD *)(*v4 + 8 * v38) = v27;
    v47 = (_QWORD *)*v37;
    if (!*v37)
      goto LABEL_82;
    while (1)
    {
      v49 = v47[1];
      if (v49 >= prime)
        v49 %= prime;
      if (v49 == v38)
        goto LABEL_76;
      if (*(_QWORD *)(*v4 + 8 * v49))
      {
        *v37 = *v47;
        v48 = 8 * v49;
        *v47 = **(_QWORD **)(*v4 + v48);
        **(_QWORD **)(*v4 + v48) = v47;
        v47 = v37;
LABEL_76:
        v37 = v47;
        v47 = (_QWORD *)*v47;
        if (!v47)
          goto LABEL_82;
      }
      else
      {
        *(_QWORD *)(*v4 + 8 * v49) = v37;
        v37 = v47;
        v47 = (_QWORD *)*v47;
        v38 = v49;
        if (!v47)
          goto LABEL_82;
      }
    }
  }
}

void sub_20FB97948(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  uint64_t v9;
  va_list va2;
  uint64_t v11;
  uint64_t v12;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v9 = va_arg(va3, _QWORD);
  v11 = va_arg(va3, _QWORD);
  v12 = va_arg(va3, _QWORD);
  sub_20EE6C9B0((uint64_t)va3);
  sub_20E86665C((uint64_t)va2);
  sub_20E86665C((uint64_t)va1);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_20FB97990(char **a1, char *a2, __int128 *a3)
{
  unint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  char *v23;
  unint64_t v24;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  __int128 v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  __int128 v43;
  char *i;
  __int128 v45;
  char *v46;
  __int128 v48;
  __int128 v49;
  uint64_t v50;

  v6 = *a1;
  v5 = (unint64_t)a1[1];
  v7 = a2 - *a1;
  v8 = v7 >> 6;
  v9 = (unint64_t)&(*a1)[v7 & 0xFFFFFFFFFFFFFFC0];
  v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == v5)
    {
      v31 = *a3;
      *(_QWORD *)(v9 + 16) = *((_QWORD *)a3 + 2);
      *(_OWORD *)v9 = v31;
      v32 = &v6[64 * v8];
      *((_QWORD *)v32 + 3) = *((_QWORD *)a3 + 3);
      *((_QWORD *)v32 + 4) = *((_QWORD *)a3 + 4);
      *(_OWORD *)(v32 + 40) = *(__int128 *)((char *)a3 + 40);
      *((_DWORD *)v32 + 14) = *((_DWORD *)a3 + 14);
      a1[1] = (char *)(v9 + 64);
    }
    else
    {
      v50 = *((_QWORD *)a3 + 2);
      v11 = *(__int128 *)((char *)a3 + 24);
      v48 = *(__int128 *)((char *)a3 + 40);
      v49 = *a3;
      v12 = *((_DWORD *)a3 + 14);
      v13 = v9 + 64;
      v14 = v5 - 64;
      v15 = a1[1];
      if (v5 >= 0x40)
      {
        do
        {
          v16 = *(_OWORD *)v14;
          *((_QWORD *)v15 + 2) = *(_QWORD *)(v14 + 16);
          *(_OWORD *)v15 = v16;
          *((_QWORD *)v15 + 3) = *(_QWORD *)(v14 + 24);
          *((_QWORD *)v15 + 4) = *(_QWORD *)(v14 + 32);
          *(_OWORD *)(v15 + 40) = *(_OWORD *)(v14 + 40);
          *((_DWORD *)v15 + 14) = *(_DWORD *)(v14 + 56);
          v15 += 64;
          v14 += 64;
        }
        while (v14 < v5);
      }
      a1[1] = v15;
      if (v5 != v13)
      {
        v17 = 0;
        v18 = (uint64_t)(v5 - v13) >> 6 << 6;
        v19 = &v6[64 * v8 + v18];
        v20 = -v18;
        do
        {
          v21 = v5 + v17;
          v22 = *(_OWORD *)&v19[v17 - 64];
          *(_DWORD *)(v21 - 48) = *(_DWORD *)&v19[v17 - 48];
          *(_OWORD *)(v21 - 64) = v22;
          *(_QWORD *)(v21 - 40) = *(_QWORD *)&v19[v17 - 40];
          *(_QWORD *)(v21 - 32) = *(_QWORD *)&v19[v17 - 32];
          *(_OWORD *)(v21 - 24) = *(_OWORD *)&v19[v17 - 24];
          *(_DWORD *)(v21 - 8) = *(_DWORD *)&v19[v17 - 8];
          v17 -= 64;
        }
        while (v20 != v17);
      }
      *(_OWORD *)v9 = v49;
      *(_DWORD *)(v9 + 16) = v50;
      v23 = &v6[64 * v8];
      *(_OWORD *)(v23 + 24) = v11;
      *(_OWORD *)(v23 + 40) = v48;
      *((_DWORD *)v23 + 14) = v12;
    }
    return v9;
  }
  v24 = ((uint64_t)(v5 - (_QWORD)v6) >> 6) + 1;
  if (v24 >> 58)
    sub_20E867F44();
  v26 = v10 - (_QWORD)v6;
  if (v26 >> 5 > v24)
    v24 = v26 >> 5;
  if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFC0)
    v27 = 0x3FFFFFFFFFFFFFFLL;
  else
    v27 = v24;
  if (v27)
  {
    if (v27 >> 58)
      sub_20E877A38();
    v28 = (char *)operator new(v27 << 6);
    v29 = &v28[64 * v8];
    v30 = &v28[64 * v27];
    if (v8 != v27)
      goto LABEL_31;
    goto LABEL_21;
  }
  v28 = 0;
  v29 = (char *)(v8 << 6);
  v30 = 0;
  if (!v8)
  {
LABEL_21:
    if (v7 < 1)
    {
      if (v6 == a2)
        v34 = 1;
      else
        v34 = v7 >> 5;
      if (v34 >> 58)
        sub_20E877A38();
      v35 = (char *)operator new(v34 << 6);
      v29 = &v35[64 * (v34 >> 2)];
      v30 = &v35[64 * v34];
      if (v28)
      {
        v36 = &v35[64 * v34];
        operator delete(v28);
        v30 = v36;
      }
    }
    else
    {
      v33 = v8 + 2;
      if (v8 >= -1)
        v33 = v8 + 1;
      v29 -= 64 * (v33 >> 1);
    }
  }
LABEL_31:
  *(_OWORD *)v29 = *a3;
  v37 = *((_QWORD *)a3 + 3);
  *((_QWORD *)v29 + 2) = *((_QWORD *)a3 + 2);
  *((_QWORD *)v29 + 3) = v37;
  *((_QWORD *)v29 + 4) = *((_QWORD *)a3 + 4);
  *(_OWORD *)(v29 + 40) = *(__int128 *)((char *)a3 + 40);
  *((_DWORD *)v29 + 14) = *((_DWORD *)a3 + 14);
  v38 = v29 + 64;
  v39 = *a1;
  v40 = v29;
  if (*a1 != (char *)v9)
  {
    v41 = 0;
    do
    {
      v42 = &v29[v41];
      v43 = *(_OWORD *)(v9 + v41 - 64);
      *((_QWORD *)v42 - 6) = *(_QWORD *)(v9 + v41 - 48);
      *((_OWORD *)v42 - 4) = v43;
      *((_QWORD *)v42 - 5) = *(_QWORD *)(v9 + v41 - 40);
      *((_QWORD *)v42 - 4) = *(_QWORD *)(v9 + v41 - 32);
      *(_OWORD *)(v42 - 24) = *(_OWORD *)(v9 + v41 - 24);
      *((_DWORD *)v42 - 2) = *(_DWORD *)(v9 + v41 - 8);
      v41 -= 64;
    }
    while ((char *)(v9 + v41) != v39);
    v40 = &v29[v41];
  }
  for (i = a1[1]; (char *)v9 != i; v9 += 64)
  {
    v45 = *(_OWORD *)v9;
    *((_QWORD *)v38 + 2) = *(_QWORD *)(v9 + 16);
    *(_OWORD *)v38 = v45;
    *((_QWORD *)v38 + 3) = *(_QWORD *)(v9 + 24);
    *((_QWORD *)v38 + 4) = *(_QWORD *)(v9 + 32);
    *(_OWORD *)(v38 + 40) = *(_OWORD *)(v9 + 40);
    *((_DWORD *)v38 + 14) = *(_DWORD *)(v9 + 56);
    v38 += 64;
  }
  v46 = *a1;
  *a1 = v40;
  a1[1] = v38;
  a1[2] = v30;
  if (v46)
    operator delete(v46);
  return (unint64_t)v29;
}

void sub_20FB97D1C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_20FB97D34(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  int8x8_t v21;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2)
                return;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (uint64_t *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = (_QWORD *)(a1 + 16);
  v14 = (char *)operator new(0x30uLL);
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v6;
  *((_DWORD *)v14 + 4) = *(_DWORD *)a3;
  *(_OWORD *)(v14 + 24) = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *((_DWORD *)v14 + 10) = *(_DWORD *)(a3 + 24);
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
    goto LABEL_50;
  v17 = 1;
  if (v7 >= 3)
    v17 = (v7 & (v7 - 1)) != 0;
  v18 = v17 | (2 * v7);
  v19 = vcvtps_u32_f32(v15 / v16);
  if (v18 <= v19)
    prime = v19;
  else
    prime = v18;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
  }
  v21 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v21)
    goto LABEL_34;
  if (prime < *(_QWORD *)&v21)
  {
    v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v21 < 3uLL || (v23 = (uint8x8_t)vcnt_s8(v21), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
    {
      v22 = std::__next_prime(v22);
    }
    else
    {
      v24 = 1 << -(char)__clz(v22 - 1);
      if (v22 >= 2)
        v22 = v24;
    }
    if (prime <= v22)
      prime = v22;
    if (prime < *(_QWORD *)&v21)
LABEL_34:
      sub_20E8D2B3C(a1, prime);
  }
  v7 = *(_QWORD *)(a1 + 8);
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6)
    {
      v3 = v6 % v7;
      v25 = *(_QWORD *)a1;
      v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
      if (!v26)
        goto LABEL_53;
LABEL_51:
      *(_QWORD *)v14 = *v26;
LABEL_59:
      *v26 = v14;
      goto LABEL_60;
    }
    v3 = v6;
LABEL_50:
    v25 = *(_QWORD *)a1;
    v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (!v26)
      goto LABEL_53;
    goto LABEL_51;
  }
  v3 = ((_DWORD)v7 - 1) & v6;
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v26)
    goto LABEL_51;
LABEL_53:
  *(_QWORD *)v14 = *v13;
  *v13 = v14;
  *(_QWORD *)(v25 + 8 * v3) = v13;
  if (*(_QWORD *)v14)
  {
    v27 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v27 >= v7)
        v27 %= v7;
    }
    else
    {
      v27 &= v7 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
}

void sub_20FB9803C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EC3E960((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FB98050(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = (_QWORD *)(a1 + 16);
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v10[4] = 0;
  v10[5] = 0;
  v10[3] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v6 = v3;
  }
  else
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v21 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        v20 = std::__next_prime(v20);
      }
      else
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
      }
      if (prime <= v20)
        prime = v20;
      if (prime < v7)
LABEL_35:
        sub_20E8D2B3C(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v6 %= v7;
    }
    else
    {
      v6 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
  if (v24)
  {
    *v10 = *v24;
LABEL_58:
    *v24 = v10;
    goto LABEL_59;
  }
  *v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v23 + 8 * v6) = v13;
  if (*v10)
  {
    v25 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v25 >= v7)
        v25 %= v7;
    }
    else
    {
      v25 &= v7 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_20FB9833C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EAFA1EC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20FB98350(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int *a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t *v16;
  float64x2_t v17;
  uint64_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  double v22;
  float64x2_t v23;
  float64x2_t v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  float64x2_t v29;
  uint64_t *v30;
  float64x2_t v31;
  float64x2_t v32;
  double v33;
  float64x2_t v34;
  float64x2_t v35;
  double v36;
  float64x2_t v37;
  float64x2_t v38;
  double v39;
  float v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  double v46;
  uint64_t *v47;
  float64x2_t v48;
  float64x2_t v49;
  float v50;
  float32x2_t v51;
  int v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  double v56;
  char v57;
  double v59;
  double v65;
  float64x2_t v69;
  float64x2_t v70;
  double v71;
  float64x2_t v72;
  double v73;
  double v74;
  double v75;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  int v84;
  int v85;
  double v86;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  int v95;
  int v96;
  double v97;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  int v106;
  int v107;
  double v108;
  float64x2_t v109;
  float64x2_t v110;
  double v111;
  float64x2_t v112;
  double v113;
  double v114;
  double v115;
  double v116;
  float64x2_t v118;
  double v119;
  double v121;
  double v122;
  int v123;
  double v124;
  float64x2_t v125;
  float64x2_t v126;
  double v127;
  double v128;
  BOOL v129;
  float64x2_t v130;
  double v131;
  double v133;
  double v134;
  int v135;
  double v136;
  BOOL v137;
  float64x2_t v138;
  double v139;
  double v141;
  double v142;
  int v143;
  double v144;
  float64x2_t v145;
  double v151;
  int v152;
  int v153;
  double v154;
  float64x2_t v155;
  double v156;
  BOOL v157;
  float64x2_t v158;
  float64x2_t v159;
  double v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  double v165;
  float64x2_t v166;
  uint64_t v167;
  float64x2_t v168;
  uint64_t v169;

  v169 = *MEMORY[0x24BDAC8D0];
  *((_BYTE *)a5 + 23) = 0;
  *(_WORD *)((char *)a5 + 21) = 0;
  *(_QWORD *)a5 = 0;
  *((_QWORD *)a5 + 1) = 0;
  a5[4] = 0;
  *((_BYTE *)a5 + 20) = 1;
  if (*(unsigned int *)(a3 + 40) > (unint64_t)((uint64_t)(*(_QWORD *)(a2 + 504) - *(_QWORD *)(a2 + 496)) >> 6))
  {
    result = 0;
    *((_BYTE *)a5 + 20) = 0;
    *((_BYTE *)a5 + 4) = 0;
    return result;
  }
  v11 = a2 + 40;
  if (*(_BYTE *)(a2 + 488))
  {
    v12 = a2 + 40;
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viotriangulator.hpp", 771, (uint64_t)"track.getStructure()", 20, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    if (*(_BYTE *)(a2 + 488))
      v12 = v11;
    else
      v12 = 0;
  }
  v166 = *(float64x2_t *)(v12 + 32);
  v13 = *(uint64_t *)(v12 + 48);
  v167 = v13;
  v14 = (_QWORD *)(a1 + 64);
  v15 = sub_20E9DF85C(v14, (uint64_t *)&v166);
  v16 = sub_20E9DF85C(v14, (uint64_t *)(*(_QWORD *)(a2 + 504) - 64));
  if (*(_BYTE *)(a2 + 488))
    v18 = v11;
  else
    v18 = 0;
  v19 = *(float64x2_t *)(v18 + 8);
  v17.f64[0] = *(float64_t *)(v18 + 24);
  v20 = (float64x2_t)vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL);
  v160 = v19.f64[0];
  v161 = v20;
  *(_QWORD *)&v20.f64[0] = v15[47];
  v21 = vsubq_f64(*(float64x2_t *)(v15 + 45), v19);
  v162 = v17;
  *(_QWORD *)&v22 = *(_OWORD *)&vsubq_f64(v20, v17);
  if ((fabs(v21.f64[0]) >= 1.0e-10 || fabs(v21.f64[1]) >= 1.0e-10 || fabs(v22) >= 1.0e-10)
    && ((*(_QWORD *)&v17.f64[0] = v16[47],
         *(_QWORD *)&v17.f64[0] = *(_OWORD *)&vsubq_f64(v17, v162),
         v23.f64[0] = v19.f64[0],
         v23.f64[1] = v161.f64[0],
         v24 = vsubq_f64(*(float64x2_t *)(v16 + 45), v23),
         fabs(v24.f64[0]) >= 1.0e-10)
     || fabs(v24.f64[1]) >= 1.0e-10
     || fabs(v17.f64[0]) >= 1.0e-10))
  {
    v21.f64[1] = *(double *)vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL).i64;
    v24.f64[1] = *(double *)vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).i64;
    v25 = *(double *)(a3 + 16);
    v26 = fmin((vmulq_f64(v21, v24).f64[0] + v21.f64[1] * v24.f64[1] + v22 * v17.f64[0])/ sqrt((vmulq_f64(v21, v21).f64[0] + v21.f64[1] * v21.f64[1] + v22 * v22)* (vmulq_f64(v24, v24).f64[0] + v24.f64[1] * v24.f64[1] + v17.f64[0] * v17.f64[0])), 1.0);
    *((double *)a5 + 1) = v26;
    if (*(_BYTE *)(a3 + 44))
    {
LABEL_19:
      v164 = v166;
      v165 = *(double *)&v167;
      v27 = *(_QWORD *)(a2 + 496);
      v28 = *(_QWORD *)(a2 + 504);
      while (v27 != v28)
      {
        if (*(_DWORD *)(v27 + 16) == (_DWORD)v13)
        {
          v29 = *(float64x2_t *)v27;
          LODWORD(v165) = *(_DWORD *)(v27 + 16);
          v164 = v29;
        }
        v27 += 64;
      }
      v30 = sub_20E9DF85C(v14, (uint64_t *)&v164);
      *(_QWORD *)&v31.f64[0] = v15[47];
      v32.f64[1] = v161.f64[1];
      *(_QWORD *)&v33 = *(_OWORD *)&vsubq_f64(v31, v162);
      v34.f64[0] = v160;
      v34.f64[1] = v161.f64[0];
      v35 = vsubq_f64(*(float64x2_t *)(v15 + 45), v34);
      v36 = 1.0;
      if (fabs(v35.f64[0]) >= 1.0e-10 || fabs(v35.f64[1]) >= 1.0e-10 || fabs(v33) >= 1.0e-10)
      {
        *(_QWORD *)&v32.f64[0] = v30[47];
        *(_QWORD *)&v32.f64[0] = *(_OWORD *)&vsubq_f64(v32, v162);
        v37.f64[0] = v160;
        v37.f64[1] = v161.f64[0];
        v38 = vsubq_f64(*(float64x2_t *)(v30 + 45), v37);
        if (fabs(v38.f64[0]) >= 1.0e-10 || fabs(v38.f64[1]) >= 1.0e-10 || fabs(v32.f64[0]) >= 1.0e-10)
        {
          v35.f64[1] = *(double *)vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL).i64;
          v38.f64[1] = *(double *)vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL).i64;
          v36 = (vmulq_f64(v35, v38).f64[0] + v35.f64[1] * v38.f64[1] + v33 * v32.f64[0])
              / sqrt((vmulq_f64(v35, v35).f64[0] + v35.f64[1] * v35.f64[1] + v33 * v33)* (vmulq_f64(v38, v38).f64[0] + v38.f64[1] * v38.f64[1] + v32.f64[0] * v32.f64[0]));
        }
      }
      v39 = 1.0;
      if (v36 <= 1.0)
        v39 = v36;
      v40 = v39;
      *((float *)a5 + 4) = v40;
    }
  }
  else
  {
    v25 = *(double *)(a3 + 16);
    v26 = fmin(1.0, 1.0);
    *((double *)a5 + 1) = v26;
    if (*(_BYTE *)(a3 + 44))
      goto LABEL_19;
  }
  v41 = v26 <= v25;
  if (v26 > v25)
  {
    result = 0;
    *((_BYTE *)a5 + 4) = 0;
    *((_BYTE *)a5 + 20) = 0;
    if ((a4 & 1) != 0)
      return result;
    v42 = 1;
    v43 = *(_QWORD *)(a2 + 496);
    v44 = *(_QWORD *)(a2 + 504);
    if (v43 == v44)
      goto LABEL_241;
  }
  else
  {
    v42 = a4 ^ 1;
    v43 = *(_QWORD *)(a2 + 496);
    v44 = *(_QWORD *)(a2 + 504);
    if (v43 == v44)
      goto LABEL_241;
  }
  v45 = 0;
  v46 = *(double *)(a3 + 24);
  v158 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v162.f64[0], 0);
  v159 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v161.f64[0], 0);
  do
  {
    v47 = sub_20E9DF85C(v14, (uint64_t *)v43);
    if (!v47
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viotriangulator.hpp", 829, (uint64_t)"camPoseIter != camera_data_.end()", 33, (uint64_t)"Cannot find camera pose.", 24, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v49.f64[1] = v162.f64[1];
    v48.f64[0] = *((double *)v47 + 19) * v160
               + *((double *)v47 + 23) * v161.f64[0]
               + *((double *)v47 + 27) * v162.f64[0];
    *(_QWORD *)&v49.f64[0] = v47[31];
    v48.f64[0] = vaddq_f64(v48, v49).f64[0];
    v164 = vaddq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(*(float64x2_t *)(v47 + 17), v160), v159, *(float64x2_t *)(v47 + 21)), v158, *(float64x2_t *)(v47 + 25)), *(float64x2_t *)(v47 + 29));
    v165 = v48.f64[0];
    v50 = *(float *)(v43 + 56);
    v51 = *(float32x2_t *)(v43 + 32);
    if (v48.f64[0] >= 0.0 && v48.f64[0] >= *(double *)(a3 + 8) && v48.f64[0] <= *(double *)(a3 + 32))
    {
      v52 = 1;
      v53 = v47[49];
      v54 = *(_DWORD *)(v53 + 992);
      if (v54 != -1)
      {
LABEL_46:
        if (v54 > 7)
          goto LABEL_62;
        goto LABEL_47;
      }
    }
    else
    {
      LOBYTE(v41) = 0;
      v52 = 0;
      v53 = v47[49];
      v54 = *(_DWORD *)(v53 + 992);
      if (v54 != -1)
        goto LABEL_46;
    }
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v54 = *(_DWORD *)(v53 + 992);
    if (v54 > 7)
    {
LABEL_62:
      if (v54 > 0xB)
      {
        if (v54 <= 0xD)
        {
          if (v54 != 13 || v165 < 0.00000001)
            goto LABEL_222;
          _Q0 = vdivq_f64(v164, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v165, 0));
          v59 = (*(double *)v53 + *(double *)(v53 + 32)) * 0.5;
          _D3 = _Q0.f64[1];
          __asm { FMLA            D2, D3, V0.D[1] }
          v65 = v59 * (_D2 * v59);
          v168 = vdivq_f64(_Q0, (float64x2_t)vdupq_lane_s64(COERCE__INT64(v65* (*(double *)(v53 + 168)+ v59 * *(double *)(v53 + 224)+ v65* (*(double *)(v53 + 176)+ v59 * *(double *)(v53 + 232)+ v65* (*(double *)(v53 + 184)+ v59 * *(double *)(v53 + 240)+ v65* (*(double *)(v53 + 192)+ v59 * *(double *)(v53 + 248)+ v65* (*(double *)(v53 + 200)+ v59 * *(double *)(v53 + 256)+ v65
                                       * (*(double *)(v53 + 208)
                                        + v59 * *(double *)(v53 + 264)
                                        + v65 * (*(double *)(v53 + 216) + *(double *)(v53 + 272) * v59 + v65 * 0.0)))))))
                                  / 100.0
                                  + 1.0),
                                  0));
          v55 = *(_DWORD *)(v53 + 992);
          if (v55 != -1)
            goto LABEL_133;
          goto LABEL_77;
        }
        if (v54 == 14)
          v57 = sub_20EB247C0(&v168, (uint64_t)&v164, (double *)(v53 + 168), (*(double *)v53 + *(double *)(v53 + 32)) * 0.5);
        else
          v57 = sub_20EB3E39C(v53, &v168, &v164);
      }
      else if (v54 > 9)
      {
        if (v54 == 10)
          v57 = sub_20EB24288(&v168, (uint64_t)&v164, (double *)(v53 + 168), (*(double *)v53 + *(double *)(v53 + 32)) * 0.5);
        else
          v57 = sub_20EB3A2E4(v53, &v168, &v164);
      }
      else
      {
        if (v54 != 9)
        {
          _V0.D[1] = v164.f64[1];
          _D1 = v164.f64[1];
          __asm { FMLA            D7, D1, V0.D[1] }
          v90 = sqrt(_D7);
          v91 = fabs(v165);
          v92 = fabs(v90);
          v93 = v91 / v92;
          if (v91 >= v92)
            v93 = v92 / v91;
          v94 = (v92 - v91) / (v91 + v92);
          if (v91 >= v92)
            v94 = -v94;
          if (v93 > 0.414213562)
            v95 = 1;
          else
            v95 = 2;
          if (v93 > 0.414213562)
            v96 = -1;
          else
            v96 = 1;
          if (v93 <= 0.414213562)
            v94 = v93;
          if (_D7 >= 0.00000001)
          {
            if (v91 < v92)
              v96 = -v96;
            else
              v95 = v93 > 0.414213562;
            v129 = v90 == INFINITY && v91 == INFINITY;
            v130 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v94 * v94), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v94 * v94), (float64x2_t)xmmword_210315370), v94 * v94 * (v94 * v94))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v94 * v94), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v94 * v94), (float64x2_t)xmmword_210315380), v94 * v94 * (v94 * v94))), v94 * v94 * (v94 * v94) * (v94 * v94 * (v94 * v94))));
            v131 = v94 + v94 * vdivq_f64(v130, (float64x2_t)vdupq_laneq_s64((int64x2_t)v130, 1)).f64[0];
            if (v129)
              v131 = 0.785398163;
            if (v90 == 0.0 && v165 == 0.0)
              v133 = 0.0;
            else
              v133 = v131;
            if (v165 < 0.0)
            {
              v95 = 4 - v95;
              v96 = -v96;
            }
            if (v90 < 0.0)
              v95 = -v95;
            v134 = (double)v95;
            if (v90 >= 0.0)
              v135 = v96;
            else
              v135 = -v96;
            v136 = v134 * 3.061617e-17 + v134 * 0.785398163 + v133 * (double)v135;
            v97 = 1.0
                / v90
                * (v136
                 * (v136
                  * v136
                  * (*(double *)(v53 + 168)
                   + v136
                   * v136
                   * (*(double *)(v53 + 176)
                    + v136
                    * v136
                    * (*(double *)(v53 + 184)
                     + v136
                     * v136
                     * (*(double *)(v53 + 192)
                      + v136
                      * v136
                      * (*(double *)(v53 + 200)
                       + v136 * v136 * (*(double *)(v53 + 208) + v136 * v136 * *(double *)(v53 + 216)))))))
                  + 1.0));
          }
          else
          {
            v97 = 1.0 / v165;
          }
          v72 = vmulq_n_f64(v164, v97);
          v168 = v72;
          v73 = v72.f64[1];
          goto LABEL_193;
        }
        v57 = sub_20EB3641C(v53, &v168, &v164);
      }
LABEL_131:
      if ((v57 & 1) == 0)
        goto LABEL_222;
      v55 = *(_DWORD *)(v53 + 992);
      if (v55 != -1)
        goto LABEL_133;
      goto LABEL_77;
    }
LABEL_47:
    if (v54 > 3)
    {
      if (v54 <= 5)
      {
        if (v54 != 5)
        {
          _V0.D[1] = v164.f64[1];
          _D1 = v164.f64[1];
          __asm { FMLA            D7, D1, V0.D[1] }
          v79 = sqrt(_D7);
          v80 = fabs(v165);
          v81 = fabs(v79);
          v82 = v80 / v81;
          if (v80 >= v81)
            v82 = v81 / v80;
          v83 = (v81 - v80) / (v80 + v81);
          if (v80 >= v81)
            v83 = -v83;
          if (v82 > 0.414213562)
            v84 = 1;
          else
            v84 = 2;
          if (v82 > 0.414213562)
            v85 = -1;
          else
            v85 = 1;
          if (v82 <= 0.414213562)
            v83 = v82;
          if (_D7 >= 0.00000001)
          {
            if (v80 < v81)
              v85 = -v85;
            else
              v84 = v82 > 0.414213562;
            _ZF = v79 == INFINITY && v80 == INFINITY;
            v118 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v83 * v83), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v83 * v83), (float64x2_t)xmmword_210315370), v83 * v83 * (v83 * v83))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v83 * v83), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v83 * v83), (float64x2_t)xmmword_210315380), v83 * v83 * (v83 * v83))), v83 * v83 * (v83 * v83) * (v83 * v83 * (v83 * v83))));
            v119 = v83 + v83 * vdivq_f64(v118, (float64x2_t)vdupq_laneq_s64((int64x2_t)v118, 1)).f64[0];
            if (_ZF)
              v119 = 0.785398163;
            if (v79 == 0.0 && v165 == 0.0)
              v121 = 0.0;
            else
              v121 = v119;
            if (v165 < 0.0)
            {
              v84 = 4 - v84;
              v85 = -v85;
            }
            if (v79 < 0.0)
              v84 = -v84;
            v122 = (double)v84;
            if (v79 >= 0.0)
              v123 = v85;
            else
              v123 = -v85;
            v124 = v122 * 3.061617e-17 + v122 * 0.785398163 + v121 * (double)v123;
            v125 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v53 + 168), *(int64x2_t *)(v53 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v53 + 168), *(int64x2_t *)(v53 + 184)), v124 * v124)), v124 * v124);
            v86 = 1.0 / v79 * (v124 + v124 * (v125.f64[0] + vmuld_lane_f64(v124 * v124 * (v124 * v124), v125, 1)));
          }
          else
          {
            v86 = 1.0 / v165;
          }
          v110 = vmulq_n_f64(v164, v86);
          v168 = v110;
          v111 = v110.f64[1];
          goto LABEL_169;
        }
        v56 = v164.f64[0] * v164.f64[0] + v164.f64[1] * v164.f64[1];
        if (v56 >= 0.00000001)
        {
          v113 = sqrt(v56);
          if (v113 <= v165)
          {
            v154 = v113 / v165 * 0.785398163
                 - v113 / v165 * (v113 / v165 + -1.0) * (v113 / v165 * 0.0663008339 + 0.244711287);
          }
          else
          {
            if (v113 <= -v165)
            {
              v115 = v113 / v165 * 0.785398163
                   - v113 / v165 * (-1.0 - v113 / v165) * (v113 / v165 * -0.0663008339 + 0.244711287);
              v116 = 3.14159265;
            }
            else
            {
              v114 = fabs(v165 / v113);
              v115 = v165 / v113 * (v114 + -1.0) * (v114 * 0.0663008339 + 0.244711287) + v165 / v113 * -0.785398163;
              v116 = 1.57079633;
            }
            v154 = v115 + v116;
          }
          v155 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v53 + 168), *(int64x2_t *)(v53 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v53 + 168), *(int64x2_t *)(v53 + 184)), v154 * v154)), v154 * v154);
          v156 = (v154 + v154 * (v155.f64[0] + vmuld_lane_f64(v154 * v154 * (v154 * v154), v155, 1))) / v113;
          v168.f64[0] = v164.f64[0] * v156;
          v168.f64[1] = v164.f64[1] * v156;
          v55 = *(_DWORD *)(v53 + 992);
          if (v55 != -1)
            goto LABEL_133;
        }
        else
        {
          if (v165 == 0.0)
            goto LABEL_222;
          v168.f64[0] = v164.f64[0] * (1.0 / v165);
          v168.f64[1] = v164.f64[1] * (1.0 / v165);
          v55 = *(_DWORD *)(v53 + 992);
          if (v55 != -1)
            goto LABEL_133;
        }
        goto LABEL_77;
      }
      if (v54 == 6)
      {
        v70 = vaddq_f64(vdivq_f64(v164, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v165, 0)), *(float64x2_t *)(v53 + 192));
        v71 = sqrt(vaddvq_f64(vmulq_f64(v70, v70)));
        v168 = vaddq_f64(*(float64x2_t *)(v53 + 208), vmulq_n_f64(v70, v71* (v71* (*(double *)(v53 + 168) + v71 * (*(double *)(v53 + 176) + *(double *)(v53 + 184) * v71)))+ 1.0));
        v55 = *(_DWORD *)(v53 + 992);
        if (v55 != -1)
          goto LABEL_133;
        goto LABEL_77;
      }
      v57 = sub_20EB31FFC(v53, &v168, &v164);
      goto LABEL_131;
    }
    if (v54 > 1)
    {
      if (v54 != 2)
      {
        _V0.D[1] = v164.f64[1];
        _D1 = v164.f64[1];
        __asm { FMLA            D7, D1, V0.D[1] }
        v101 = sqrt(_D7);
        v102 = fabs(v165);
        v103 = fabs(v101);
        v104 = v102 / v103;
        if (v102 >= v103)
          v104 = v103 / v102;
        v105 = (v103 - v102) / (v102 + v103);
        if (v102 >= v103)
          v105 = -v105;
        if (v104 > 0.414213562)
          v106 = 1;
        else
          v106 = 2;
        if (v104 > 0.414213562)
          v107 = -1;
        else
          v107 = 1;
        if (v104 <= 0.414213562)
          v105 = v104;
        if (_D7 >= 0.00000001)
        {
          if (v102 < v103)
            v107 = -v107;
          else
            v106 = v104 > 0.414213562;
          v137 = v101 == INFINITY && v102 == INFINITY;
          v138 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v105 * v105), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v105 * v105), (float64x2_t)xmmword_210315370), v105 * v105 * (v105 * v105))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v105 * v105), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v105 * v105), (float64x2_t)xmmword_210315380), v105 * v105 * (v105 * v105))), v105 * v105 * (v105 * v105) * (v105 * v105 * (v105 * v105))));
          v139 = v105 + v105 * vdivq_f64(v138, (float64x2_t)vdupq_laneq_s64((int64x2_t)v138, 1)).f64[0];
          if (v137)
            v139 = 0.785398163;
          if (v101 == 0.0 && v165 == 0.0)
            v141 = 0.0;
          else
            v141 = v139;
          if (v165 < 0.0)
          {
            v106 = 4 - v106;
            v107 = -v107;
          }
          if (v101 < 0.0)
            v106 = -v106;
          v142 = (double)v106;
          if (v101 >= 0.0)
            v143 = v107;
          else
            v143 = -v107;
          v144 = v142 * 3.061617e-17 + v142 * 0.785398163 + v141 * (double)v143;
          v145 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v53 + 168), *(int64x2_t *)(v53 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v53 + 168), *(int64x2_t *)(v53 + 184)), v144 * v144)), v144 * v144);
          v108 = 1.0 / v101 * (v144 + v144 * (v145.f64[0] + vmuld_lane_f64(v144 * v144 * (v144 * v144), v145, 1)));
        }
        else
        {
          v108 = 1.0 / v165;
        }
        v69 = vmulq_n_f64(v164, v108);
        goto LABEL_217;
      }
      if (*(_DWORD *)(v53 + 212))
      {
        if (v165 >= 0.00000001)
        {
          _Q2 = vmulq_n_f64(v164, 1.0 / v165);
          _D0 = vmuld_lane_f64(1.0 / v165, v164, 1);
          __asm { FMLA            D1, D0, V2.D[1] }
          v69 = vaddq_f64(vaddq_f64(vmulq_f64((float64x2_t)vextq_s8(*(int8x16_t *)(v53 + 192), *(int8x16_t *)(v53 + 192), 8uLL), vaddq_f64((float64x2_t)vdupq_lane_s64(_D1, 0), vmulq_f64(_Q2, vaddq_f64(_Q2, _Q2)))), vmulq_laneq_f64(vmulq_n_f64(vaddq_f64(*(float64x2_t *)(v53 + 192), *(float64x2_t *)(v53 + 192)), _Q2.f64[0]), _Q2, 1)), vmulq_n_f64(_Q2, *(double *)(v53 + 168) * *(double *)&_D1+ 1.0+ *(double *)&_D1 * (*(double *)(v53 + 176) * *(double *)&_D1)+ *(double *)&_D1 * (*(double *)&_D1 * (*(double *)(v53 + 184) * *(double *)&_D1))));
LABEL_217:
          v168 = v69;
          goto LABEL_218;
        }
      }
      else if (v165 >= 0.00000001)
      {
        _Q2 = vmulq_n_f64(v164, 1.0 / v165);
        _D0 = vmuld_lane_f64(1.0 / v165, v164, 1);
        __asm { FMLA            D1, D0, V2.D[1] }
        v69 = vmulq_n_f64(_Q2, *(double *)(v53 + 168) * _D1 + 1.0 + _D1 * _D1 * (*(double *)(v53 + 176) + *(double *)(v53 + 184) * _D1));
        goto LABEL_217;
      }
LABEL_222:
      LOBYTE(v41) = 0;
      v52 = 0;
      goto LABEL_223;
    }
    if (!v54)
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    if (v165 < 0.00000001)
      goto LABEL_222;
    v168 = vmulq_n_f64(v164, 1.0 / v165);
    v55 = *(_DWORD *)(v53 + 992);
    if (v55 != -1)
    {
LABEL_133:
      if (v55 > 7)
        goto LABEL_79;
      goto LABEL_134;
    }
LABEL_77:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v55 = *(_DWORD *)(v53 + 992);
    if (v55 > 7)
    {
LABEL_79:
      v72.f64[0] = v168.f64[0];
      if (v55 <= 9)
      {
        v73 = v168.f64[1];
LABEL_193:
        v126.f64[0] = *(double *)(v53 + 16) + *(double *)v53 * v72.f64[0] + *(double *)(v53 + 8) * v73;
        v127 = *(double *)(v53 + 40);
        v128 = v73 * *(double *)(v53 + 32);
        goto LABEL_219;
      }
      v74 = *(double *)(v53 + 8);
      v75 = *(double *)v53 * v168.f64[0];
LABEL_142:
      v112.f64[0] = *(double *)(v53 + 16) + v75 + v74 * v168.f64[1];
      v112.f64[1] = *(double *)(v53 + 40) + *(double *)(v53 + 32) * v168.f64[1];
      v163 = v112;
      goto LABEL_223;
    }
LABEL_134:
    if (v55 > 3)
    {
      v110.f64[0] = v168.f64[0];
      if (v55 > 5)
      {
        v74 = *(double *)(v53 + 8);
        v75 = *(double *)v53 * v168.f64[0];
        goto LABEL_142;
      }
      v111 = v168.f64[1];
LABEL_169:
      v126.f64[0] = *(double *)(v53 + 16) + *(double *)v53 * v110.f64[0] + *(double *)(v53 + 8) * v111;
      v127 = *(double *)(v53 + 40);
      v128 = v111 * *(double *)(v53 + 32);
LABEL_219:
      v126.f64[1] = v128 + v127;
      v163 = v126;
      goto LABEL_223;
    }
    if (v55 > 1)
    {
      v69 = v168;
LABEL_218:
      v126.f64[0] = *(double *)(v53 + 16) + *(double *)v53 * v69.f64[0] + vmuld_lane_f64(*(double *)(v53 + 8), v69, 1);
      v127 = *(double *)(v53 + 40);
      v128 = vmuld_lane_f64(*(double *)(v53 + 32), v69, 1);
      goto LABEL_219;
    }
    if (!v55)
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    v109.f64[0] = *(double *)(v53 + 16) + *(double *)v53 * v168.f64[0] + *(double *)(v53 + 8) * v168.f64[1];
    v109.f64[1] = v168.f64[1] * *(double *)(v53 + 32) + *(double *)(v53 + 40);
    v163 = v109;
LABEL_223:
    _D3 = vsubq_f64(v163, vcvtq_f64_f32(v51)).f64[1];
    __asm { FMLA            D0, D3, V2.D[1] }
    v151 = *(double *)a3 * v50 * (*(double *)a3 * v50);
    v41 = (_D0 <= v151) & v41;
    v152 = *a5;
    if (_D0 < v46)
      ++v152;
    *a5 = v152;
    if ((v42 | v41) != 1)
    {
      result = 0;
      *((_BYTE *)a5 + 4) = 0;
      *((_BYTE *)a5 + 20) = 0;
      return result;
    }
    if (_D0 > v151)
      v153 = 0;
    else
      v153 = v52;
    v45 += v153;
    v43 += 64;
  }
  while (v43 != v44);
  if (v45)
  {
    v157 = v45 >= *(_DWORD *)(a3 + 40);
    goto LABEL_242;
  }
LABEL_241:
  v157 = 0;
LABEL_242:
  *((_BYTE *)a5 + 4) = v157;
  *((_BYTE *)a5 + 20) = v41;
  return v41;
}

uint64_t sub_20FB99654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 v11;
  int v12;
  __int128 v13;
  __int128 v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  float64x2_t v19;
  uint64_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  double v24;
  double v25;
  float64x2_t v26;
  float64x2_t v27;
  double v28;
  double v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  float64x2_t v33;
  uint64_t *v34;
  float64x2_t v35;
  float64x2_t v36;
  double v37;
  float64x2_t v38;
  float64x2_t v39;
  double v40;
  float64x2_t v41;
  float64x2_t v42;
  double v43;
  float v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  double v48;
  _BOOL4 v49;
  float64x2_t v50;
  double v56;
  int v57;
  int v58;
  uint64_t *v59;
  float64x2_t v60;
  float64x2_t v61;
  float v62;
  float32x2_t v63;
  unsigned int v64;
  double v65;
  uint64_t v66;
  unsigned int v67;
  char v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v75;
  double v78;
  float64x2_t v82;
  float64x2_t v83;
  double v84;
  float64x2_t v85;
  double v86;
  double v87;
  double v88;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  int v97;
  int v98;
  double v99;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  int v108;
  int v109;
  double v110;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  int v119;
  int v120;
  double v121;
  float64x2_t v122;
  double v123;
  float64x2_t v125;
  double v126;
  double v128;
  double v129;
  int v130;
  double v131;
  double v132;
  double v133;
  BOOL v134;
  float64x2_t v135;
  double v136;
  double v138;
  double v139;
  int v140;
  double v141;
  float64x2_t v142;
  BOOL v143;
  float64x2_t v144;
  double v145;
  double v147;
  double v148;
  int v149;
  double v150;
  float64x2_t v151;
  double v155;
  float64x2_t v156;
  double v157;
  BOOL v158;
  float64x2_t v160;
  float64x2_t v161;
  double v162;
  _QWORD *v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  double v168;
  _OWORD v169[3];
  _OWORD v170[3];
  float64x2_t v171;
  uint64_t v172;
  float64x2_t v173;
  uint64_t v174;

  v174 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(a5 + 23) = 0;
  *(_WORD *)(a5 + 21) = 0;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_DWORD *)(a5 + 16) = 0;
  *(_BYTE *)(a5 + 20) = 1;
  v9 = (uint64_t)(*(_QWORD *)(a2 + 504) - *(_QWORD *)(a2 + 496)) >> 6;
  v10 = *(unsigned int *)(a4 + 40);
  if (v9 < *(unsigned int *)(a3 + 40))
  {
    v11 = 0;
    v12 = 0;
    *(_BYTE *)(a5 + 20) = 0;
    *(_BYTE *)(a5 + 4) = 0;
    if (v9 >= v10)
    {
      LODWORD(v171.f64[0]) = 0;
      BYTE4(v171.f64[0]) = 0;
      v171.f64[1] = 0.0;
      LODWORD(v172) = 0;
      BYTE4(v172) = 1;
      v13 = *(_OWORD *)(a4 + 16);
      v170[0] = *(_OWORD *)a4;
      v170[1] = v13;
      v170[2] = *(_OWORD *)(a4 + 32);
      v12 = sub_20FB98350(a1, a2, (uint64_t)v170, 1, (int *)&v171);
      v11 = 0;
    }
    return v11 | (v12 << 8);
  }
  if (v9 < v10)
  {
    v15 = *(_OWORD *)(a3 + 16);
    v169[0] = *(_OWORD *)a3;
    v169[1] = v15;
    v169[2] = *(_OWORD *)(a3 + 32);
    v11 = sub_20FB98350(a1, a2, (uint64_t)v169, 0, (int *)a5);
    v12 = 0;
    return v11 | (v12 << 8);
  }
  v16 = a2 + 40;
  if (!*(_BYTE *)(a2 + 488))
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viotriangulator.hpp", 918, (uint64_t)"track.getStructure()", 20, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    if (*(_BYTE *)(a2 + 488))
      v16 = a2 + 40;
    else
      v16 = 0;
  }
  v171 = *(float64x2_t *)(v16 + 32);
  v172 = *(uint64_t *)(v16 + 48);
  v163 = (_QWORD *)(a1 + 64);
  v17 = sub_20E9DF85C((_QWORD *)(a1 + 64), (uint64_t *)&v171);
  v18 = sub_20E9DF85C((_QWORD *)(a1 + 64), (uint64_t *)(*(_QWORD *)(a2 + 504) - 64));
  if (*(_BYTE *)(a2 + 488))
    v20 = a2 + 40;
  else
    v20 = 0;
  v21 = *(float64x2_t *)(v20 + 8);
  v19.f64[0] = *(float64_t *)(v20 + 24);
  v22 = (float64x2_t)vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL);
  v164 = v22;
  v165 = v19;
  *(_QWORD *)&v22.f64[0] = v17[47];
  v162 = v21.f64[0];
  v23 = vsubq_f64(*(float64x2_t *)(v17 + 45), v21);
  *(_QWORD *)&v24 = *(_OWORD *)&vsubq_f64(v22, v19);
  v25 = 1.0;
  if (fabs(v23.f64[0]) >= 1.0e-10 || fabs(v23.f64[1]) >= 1.0e-10 || fabs(v24) >= 1.0e-10)
  {
    *(_QWORD *)&v19.f64[0] = v18[47];
    *(_QWORD *)&v19.f64[0] = *(_OWORD *)&vsubq_f64(v19, v165);
    v26.f64[0] = v162;
    v26.f64[1] = v164.f64[0];
    v27 = vsubq_f64(*(float64x2_t *)(v18 + 45), v26);
    if (fabs(v27.f64[0]) >= 1.0e-10 || fabs(v27.f64[1]) >= 1.0e-10 || fabs(v19.f64[0]) >= 1.0e-10)
    {
      v23.f64[1] = *(double *)vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL).i64;
      v27.f64[1] = *(double *)vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL).i64;
      v25 = (vmulq_f64(v23, v27).f64[0] + v23.f64[1] * v27.f64[1] + v24 * v19.f64[0])
          / sqrt((vmulq_f64(v23, v23).f64[0] + v23.f64[1] * v23.f64[1] + v24 * v24)* (vmulq_f64(v27, v27).f64[0] + v27.f64[1] * v27.f64[1] + v19.f64[0] * v19.f64[0]));
    }
  }
  v28 = *(double *)(a3 + 16);
  v29 = *(double *)(a4 + 16);
  v30 = fmin(v25, 1.0);
  *(double *)(a5 + 8) = v30;
  if (*(_BYTE *)(a3 + 44))
  {
    v167 = v171;
    v168 = *(double *)&v172;
    v31 = *(_QWORD *)(a2 + 496);
    v32 = *(_QWORD *)(a2 + 504);
    while (v31 != v32)
    {
      if (*(_DWORD *)(v31 + 16) == (_DWORD)v172)
      {
        v33 = *(float64x2_t *)v31;
        LODWORD(v168) = *(_DWORD *)(v31 + 16);
        v167 = v33;
      }
      v31 += 64;
    }
    v34 = sub_20E9DF85C(v163, (uint64_t *)&v167);
    *(_QWORD *)&v35.f64[0] = v17[47];
    v36.f64[1] = v164.f64[1];
    *(_QWORD *)&v37 = *(_OWORD *)&vsubq_f64(v35, v165);
    v38.f64[0] = v162;
    v38.f64[1] = v164.f64[0];
    v39 = vsubq_f64(*(float64x2_t *)(v17 + 45), v38);
    v40 = 1.0;
    if (fabs(v39.f64[0]) >= 1.0e-10 || fabs(v39.f64[1]) >= 1.0e-10 || fabs(v37) >= 1.0e-10)
    {
      *(_QWORD *)&v36.f64[0] = v34[47];
      *(_QWORD *)&v36.f64[0] = *(_OWORD *)&vsubq_f64(v36, v165);
      v41.f64[0] = v162;
      v41.f64[1] = v164.f64[0];
      v42 = vsubq_f64(*(float64x2_t *)(v34 + 45), v41);
      if (fabs(v42.f64[0]) >= 1.0e-10 || fabs(v42.f64[1]) >= 1.0e-10 || fabs(v36.f64[0]) >= 1.0e-10)
      {
        v39.f64[1] = *(double *)vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL).i64;
        v42.f64[1] = *(double *)vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL).i64;
        v40 = (vmulq_f64(v39, v42).f64[0] + v39.f64[1] * v42.f64[1] + v37 * v36.f64[0])
            / sqrt((vmulq_f64(v39, v39).f64[0] + v39.f64[1] * v39.f64[1] + v37 * v37)* (vmulq_f64(v42, v42).f64[0] + v42.f64[1] * v42.f64[1] + v36.f64[0] * v36.f64[0]));
      }
    }
    v43 = 1.0;
    if (v40 <= 1.0)
      v43 = v40;
    v44 = v43;
    *(float *)(a5 + 16) = v44;
  }
  if (v30 <= v28)
  {
    v11 = 1;
    v12 = v30 <= v29;
    v45 = *(_QWORD *)(a2 + 496);
    v46 = *(_QWORD *)(a2 + 504);
    if (v45 == v46)
      goto LABEL_244;
  }
  else
  {
    v11 = 0;
    *(_BYTE *)(a5 + 4) = 0;
    *(_BYTE *)(a5 + 20) = 0;
    v12 = v30 <= v29;
    v45 = *(_QWORD *)(a2 + 496);
    v46 = *(_QWORD *)(a2 + 504);
    if (v45 == v46)
      goto LABEL_244;
  }
  v47 = 0;
  v48 = *(double *)(a3 + 24);
  v160 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v165.f64[0], 0);
  v161 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v164.f64[0], 0);
  do
  {
    v59 = sub_20E9DF85C(v163, (uint64_t *)v45);
    if (!v59
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viotriangulator.hpp", 973, (uint64_t)"camPoseIter != camera_data_.end()", 33, (uint64_t)"Cannot find camera pose.", 24, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v61.f64[1] = v165.f64[1];
    v60.f64[0] = *((double *)v59 + 19) * v162
               + *((double *)v59 + 23) * v164.f64[0]
               + *((double *)v59 + 27) * v165.f64[0];
    *(_QWORD *)&v61.f64[0] = v59[31];
    v60.f64[0] = vaddq_f64(v60, v61).f64[0];
    v167 = vaddq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(*(float64x2_t *)(v59 + 17), v162), v161, *(float64x2_t *)(v59 + 21)), v160, *(float64x2_t *)(v59 + 25)), *(float64x2_t *)(v59 + 29));
    v168 = v60.f64[0];
    v62 = *(float *)(v45 + 56);
    v63 = *(float32x2_t *)(v45 + 32);
    if (v60.f64[0] < 0.0)
    {
      v49 = 0;
      v11 = 0;
LABEL_63:
      v12 = 0;
      goto LABEL_64;
    }
    v65 = *(double *)(a3 + 8);
    v49 = v60.f64[0] >= v65;
    if (v60.f64[0] < v65)
      v11 = 0;
    if (v60.f64[0] < *(double *)(a4 + 8))
      goto LABEL_63;
LABEL_64:
    v66 = v59[49];
    v67 = *(_DWORD *)(v66 + 992);
    if (v67 == -1)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v67 = *(_DWORD *)(v66 + 992);
      if (v67 > 7)
      {
LABEL_74:
        if (v67 > 0xB)
        {
          if (v67 <= 0xD)
          {
            if (v67 != 13 || v168 < 0.00000001)
              goto LABEL_43;
            _Q0 = vdivq_f64(v167, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v168, 0));
            v75 = (*(double *)v66 + *(double *)(v66 + 32)) * 0.5;
            _D3 = _Q0.f64[1];
            __asm { FMLA            D2, D3, V0.D[1] }
            v78 = v75 * (_D2 * v75);
            v173 = vdivq_f64(_Q0, (float64x2_t)vdupq_lane_s64(COERCE__INT64(v78* (*(double *)(v66 + 168)+ v75 * *(double *)(v66 + 224)+ v78* (*(double *)(v66 + 176)+ v75 * *(double *)(v66 + 232)+ v78* (*(double *)(v66 + 184)+ v75 * *(double *)(v66 + 240)+ v78* (*(double *)(v66 + 192)+ v75 * *(double *)(v66 + 248)+ v78* (*(double *)(v66 + 200)+ v75 * *(double *)(v66 + 256)+ v78
                                         * (*(double *)(v66 + 208)
                                          + v75 * *(double *)(v66 + 264)
                                          + v78 * (*(double *)(v66 + 216) + *(double *)(v66 + 272) * v75 + v78 * 0.0)))))))
                                    / 100.0
                                    + 1.0),
                                    0));
            v64 = *(_DWORD *)(v66 + 992);
            if (v64 != -1)
              goto LABEL_151;
            goto LABEL_97;
          }
          if (v67 == 14)
            v68 = sub_20EB247C0(&v173, (uint64_t)&v167, (double *)(v66 + 168), (*(double *)v66 + *(double *)(v66 + 32)) * 0.5);
          else
            v68 = sub_20EB3E39C(v66, &v173, &v167);
        }
        else if (v67 > 9)
        {
          if (v67 == 10)
            v68 = sub_20EB24288(&v173, (uint64_t)&v167, (double *)(v66 + 168), (*(double *)v66 + *(double *)(v66 + 32)) * 0.5);
          else
            v68 = sub_20EB3A2E4(v66, &v173, &v167);
        }
        else
        {
          if (v67 != 9)
          {
            _V0.D[1] = v167.f64[1];
            _D1 = v167.f64[1];
            __asm { FMLA            D7, D1, V0.D[1] }
            v92 = sqrt(_D7);
            v93 = fabs(v168);
            v94 = fabs(v92);
            v95 = v93 / v94;
            if (v93 >= v94)
              v95 = v94 / v93;
            v96 = (v94 - v93) / (v93 + v94);
            if (v93 >= v94)
              v96 = -v96;
            if (v95 > 0.414213562)
              v97 = 1;
            else
              v97 = 2;
            if (v95 > 0.414213562)
              v98 = -1;
            else
              v98 = 1;
            if (v95 <= 0.414213562)
              v96 = v95;
            if (_D7 >= 0.00000001)
            {
              if (v93 < v94)
                v98 = -v98;
              else
                v97 = v95 > 0.414213562;
              _ZF = v92 == INFINITY && v93 == INFINITY;
              v125 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v96 * v96), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v96 * v96), (float64x2_t)xmmword_210315370), v96 * v96 * (v96 * v96))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v96 * v96), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v96 * v96), (float64x2_t)xmmword_210315380), v96 * v96 * (v96 * v96))),
                         v96 * v96 * (v96 * v96) * (v96 * v96 * (v96 * v96))));
              v126 = v96 + v96 * vdivq_f64(v125, (float64x2_t)vdupq_laneq_s64((int64x2_t)v125, 1)).f64[0];
              if (_ZF)
                v126 = 0.785398163;
              if (v92 == 0.0 && v168 == 0.0)
                v128 = 0.0;
              else
                v128 = v126;
              if (v168 < 0.0)
              {
                v97 = 4 - v97;
                v98 = -v98;
              }
              if (v92 < 0.0)
                v97 = -v97;
              v129 = (double)v97;
              if (v92 >= 0.0)
                v130 = v98;
              else
                v130 = -v98;
              v131 = v129 * 3.061617e-17 + v129 * 0.785398163 + v128 * (double)v130;
              v99 = 1.0
                  / v92
                  * (v131
                   * (v131
                    * v131
                    * (*(double *)(v66 + 168)
                     + v131
                     * v131
                     * (*(double *)(v66 + 176)
                      + v131
                      * v131
                      * (*(double *)(v66 + 184)
                       + v131
                       * v131
                       * (*(double *)(v66 + 192)
                        + v131
                        * v131
                        * (*(double *)(v66 + 200)
                         + v131 * v131 * (*(double *)(v66 + 208) + v131 * v131 * *(double *)(v66 + 216)))))))
                    + 1.0));
            }
            else
            {
              v99 = 1.0 / v168;
            }
            v85 = vmulq_n_f64(v167, v99);
            v173 = v85;
            v86 = v85.f64[1];
            goto LABEL_184;
          }
          v68 = sub_20EB3641C(v66, &v173, &v167);
        }
LABEL_149:
        if ((v68 & 1) == 0)
          goto LABEL_43;
        v64 = *(_DWORD *)(v66 + 992);
        if (v64 != -1)
          goto LABEL_151;
        goto LABEL_97;
      }
    }
    else if (v67 > 7)
    {
      goto LABEL_74;
    }
    if (v67 > 3)
    {
      if (v67 <= 5)
      {
        if (v67 != 5)
        {
          _V0.D[1] = v167.f64[1];
          _D1 = v167.f64[1];
          __asm { FMLA            D7, D1, V0.D[1] }
          v103 = sqrt(_D7);
          v104 = fabs(v168);
          v105 = fabs(v103);
          v106 = v104 / v105;
          if (v104 >= v105)
            v106 = v105 / v104;
          v107 = (v105 - v104) / (v104 + v105);
          if (v104 >= v105)
            v107 = -v107;
          if (v106 > 0.414213562)
            v108 = 1;
          else
            v108 = 2;
          if (v106 > 0.414213562)
            v109 = -1;
          else
            v109 = 1;
          if (v106 <= 0.414213562)
            v107 = v106;
          if (_D7 >= 0.00000001)
          {
            if (v104 < v105)
              v109 = -v109;
            else
              v108 = v106 > 0.414213562;
            v134 = v103 == INFINITY && v104 == INFINITY;
            v135 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v107 * v107), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v107 * v107), (float64x2_t)xmmword_210315370), v107 * v107 * (v107 * v107))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v107 * v107), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v107 * v107), (float64x2_t)xmmword_210315380), v107 * v107 * (v107 * v107))),
                       v107 * v107 * (v107 * v107) * (v107 * v107 * (v107 * v107))));
            v136 = v107 + v107 * vdivq_f64(v135, (float64x2_t)vdupq_laneq_s64((int64x2_t)v135, 1)).f64[0];
            if (v134)
              v136 = 0.785398163;
            if (v103 == 0.0 && v168 == 0.0)
              v138 = 0.0;
            else
              v138 = v136;
            if (v168 < 0.0)
            {
              v108 = 4 - v108;
              v109 = -v109;
            }
            if (v103 < 0.0)
              v108 = -v108;
            v139 = (double)v108;
            if (v103 >= 0.0)
              v140 = v109;
            else
              v140 = -v109;
            v141 = v139 * 3.061617e-17 + v139 * 0.785398163 + v138 * (double)v140;
            v142 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v66 + 168), *(int64x2_t *)(v66 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v66 + 168), *(int64x2_t *)(v66 + 184)), v141 * v141)), v141 * v141);
            v110 = 1.0 / v103 * (v141 + v141 * (v142.f64[0] + vmuld_lane_f64(v141 * v141 * (v141 * v141), v142, 1)));
          }
          else
          {
            v110 = 1.0 / v168;
          }
          v122 = vmulq_n_f64(v167, v110);
          v173 = v122;
          v123 = v122.f64[1];
          goto LABEL_208;
        }
        v69 = v167.f64[0] * v167.f64[0] + v167.f64[1] * v167.f64[1];
        if (v69 < 0.00000001)
        {
          if (v168 == 0.0)
            goto LABEL_43;
          v173.f64[0] = v167.f64[0] * (1.0 / v168);
          v173.f64[1] = v167.f64[1] * (1.0 / v168);
          v64 = *(_DWORD *)(v66 + 992);
          if (v64 != -1)
            goto LABEL_151;
        }
        else
        {
          v70 = sqrt(v69);
          if (v70 <= v168)
          {
            v155 = v70 / v168 * 0.785398163
                 - v70 / v168 * (v70 / v168 + -1.0) * (v70 / v168 * 0.0663008339 + 0.244711287);
          }
          else
          {
            if (v70 <= -v168)
            {
              v72 = v70 / v168 * 0.785398163
                  - v70 / v168 * (-1.0 - v70 / v168) * (v70 / v168 * -0.0663008339 + 0.244711287);
              v73 = 3.14159265;
            }
            else
            {
              v71 = fabs(v168 / v70);
              v72 = v168 / v70 * (v71 + -1.0) * (v71 * 0.0663008339 + 0.244711287) + v168 / v70 * -0.785398163;
              v73 = 1.57079633;
            }
            v155 = v72 + v73;
          }
          v156 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v66 + 168), *(int64x2_t *)(v66 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v66 + 168), *(int64x2_t *)(v66 + 184)), v155 * v155)), v155 * v155);
          v157 = (v155 + v155 * (v156.f64[0] + vmuld_lane_f64(v155 * v155 * (v155 * v155), v156, 1))) / v70;
          v173.f64[0] = v167.f64[0] * v157;
          v173.f64[1] = v167.f64[1] * v157;
          v64 = *(_DWORD *)(v66 + 992);
          if (v64 != -1)
            goto LABEL_151;
        }
        goto LABEL_97;
      }
      if (v67 == 6)
      {
        v83 = vaddq_f64(vdivq_f64(v167, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v168, 0)), *(float64x2_t *)(v66 + 192));
        v84 = sqrt(vaddvq_f64(vmulq_f64(v83, v83)));
        v173 = vaddq_f64(*(float64x2_t *)(v66 + 208), vmulq_n_f64(v83, v84* (v84* (*(double *)(v66 + 168) + v84 * (*(double *)(v66 + 176) + *(double *)(v66 + 184) * v84)))+ 1.0));
        v64 = *(_DWORD *)(v66 + 992);
        if (v64 != -1)
          goto LABEL_151;
        goto LABEL_97;
      }
      v68 = sub_20EB31FFC(v66, &v173, &v167);
      goto LABEL_149;
    }
    if (v67 > 1)
    {
      if (v67 == 2)
      {
        if (*(_DWORD *)(v66 + 212))
        {
          if (v168 < 0.00000001)
            goto LABEL_43;
          _Q2 = vmulq_n_f64(v167, 1.0 / v168);
          _D0 = vmuld_lane_f64(1.0 / v168, v167, 1);
          __asm { FMLA            D1, D0, V2.D[1] }
          v82 = vaddq_f64(vaddq_f64(vmulq_f64((float64x2_t)vextq_s8(*(int8x16_t *)(v66 + 192), *(int8x16_t *)(v66 + 192), 8uLL), vaddq_f64((float64x2_t)vdupq_lane_s64(_D1, 0), vmulq_f64(_Q2, vaddq_f64(_Q2, _Q2)))), vmulq_laneq_f64(vmulq_n_f64(vaddq_f64(*(float64x2_t *)(v66 + 192), *(float64x2_t *)(v66 + 192)), _Q2.f64[0]), _Q2, 1)), vmulq_n_f64(_Q2, *(double *)(v66 + 168) * *(double *)&_D1+ 1.0+ *(double *)&_D1 * (*(double *)(v66 + 176) * *(double *)&_D1)+ *(double *)&_D1 * (*(double *)&_D1 * (*(double *)(v66 + 184) * *(double *)&_D1))));
        }
        else
        {
          if (v168 < 0.00000001)
            goto LABEL_43;
          _Q2 = vmulq_n_f64(v167, 1.0 / v168);
          _D0 = vmuld_lane_f64(1.0 / v168, v167, 1);
          __asm { FMLA            D1, D0, V2.D[1] }
          v82 = vmulq_n_f64(_Q2, *(double *)(v66 + 168) * _D1+ 1.0+ _D1 * _D1 * (*(double *)(v66 + 176) + *(double *)(v66 + 184) * _D1));
        }
      }
      else
      {
        _V0.D[1] = v167.f64[1];
        _D1 = v167.f64[1];
        __asm { FMLA            D7, D1, V0.D[1] }
        v114 = sqrt(_D7);
        v115 = fabs(v168);
        v116 = fabs(v114);
        v117 = v115 / v116;
        if (v115 >= v116)
          v117 = v116 / v115;
        v118 = (v116 - v115) / (v115 + v116);
        if (v115 >= v116)
          v118 = -v118;
        if (v117 > 0.414213562)
          v119 = 1;
        else
          v119 = 2;
        if (v117 > 0.414213562)
          v120 = -1;
        else
          v120 = 1;
        if (v117 <= 0.414213562)
          v118 = v117;
        if (_D7 >= 0.00000001)
        {
          if (v115 < v116)
            v120 = -v120;
          else
            v119 = v117 > 0.414213562;
          v143 = v114 == INFINITY && v115 == INFINITY;
          v144 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v118 * v118), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v118 * v118), (float64x2_t)xmmword_210315370), v118 * v118 * (v118 * v118))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v118 * v118), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v118 * v118), (float64x2_t)xmmword_210315380), v118 * v118 * (v118 * v118))), v118 * v118 * (v118 * v118) * (v118 * v118 * (v118 * v118))));
          v145 = v118 + v118 * vdivq_f64(v144, (float64x2_t)vdupq_laneq_s64((int64x2_t)v144, 1)).f64[0];
          if (v143)
            v145 = 0.785398163;
          if (v114 == 0.0 && v168 == 0.0)
            v147 = 0.0;
          else
            v147 = v145;
          if (v168 < 0.0)
          {
            v119 = 4 - v119;
            v120 = -v120;
          }
          if (v114 < 0.0)
            v119 = -v119;
          v148 = (double)v119;
          if (v114 >= 0.0)
            v149 = v120;
          else
            v149 = -v120;
          v150 = v148 * 3.061617e-17 + v148 * 0.785398163 + v147 * (double)v149;
          v151 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v66 + 168), *(int64x2_t *)(v66 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v66 + 168), *(int64x2_t *)(v66 + 184)), v150 * v150)), v150 * v150);
          v121 = 1.0 / v114 * (v150 + v150 * (v151.f64[0] + vmuld_lane_f64(v150 * v150 * (v150 * v150), v151, 1)));
        }
        else
        {
          v121 = 1.0 / v168;
        }
        v82 = vmulq_n_f64(v167, v121);
      }
      v173 = v82;
      goto LABEL_233;
    }
    if (!v67)
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    if (v168 < 0.00000001)
    {
LABEL_43:
      v12 = 0;
      v11 = 0;
      v49 = 0;
      v50 = v166;
      goto LABEL_44;
    }
    v173 = vmulq_n_f64(v167, 1.0 / v168);
    v64 = *(_DWORD *)(v66 + 992);
    if (v64 != -1)
    {
LABEL_151:
      if (v64 > 7)
        goto LABEL_99;
      goto LABEL_152;
    }
LABEL_97:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v64 = *(_DWORD *)(v66 + 992);
    if (v64 > 7)
    {
LABEL_99:
      v85.f64[0] = v173.f64[0];
      if (v64 <= 9)
      {
        v86 = v173.f64[1];
LABEL_184:
        v50.f64[0] = *(double *)(v66 + 16) + *(double *)v66 * v85.f64[0] + *(double *)(v66 + 8) * v86;
        v132 = *(double *)(v66 + 40);
        v133 = v86 * *(double *)(v66 + 32);
LABEL_234:
        v50.f64[1] = v133 + v132;
        goto LABEL_44;
      }
      v87 = *(double *)(v66 + 8);
      v88 = *(double *)v66 * v173.f64[0];
LABEL_160:
      v50.f64[0] = *(double *)(v66 + 16) + v88 + v87 * v173.f64[1];
      v50.f64[1] = *(double *)(v66 + 40) + *(double *)(v66 + 32) * v173.f64[1];
      goto LABEL_44;
    }
LABEL_152:
    if (v64 > 3)
    {
      v122.f64[0] = v173.f64[0];
      if (v64 > 5)
      {
        v87 = *(double *)(v66 + 8);
        v88 = *(double *)v66 * v173.f64[0];
        goto LABEL_160;
      }
      v123 = v173.f64[1];
LABEL_208:
      v50.f64[0] = *(double *)(v66 + 16) + *(double *)v66 * v122.f64[0] + *(double *)(v66 + 8) * v123;
      v132 = *(double *)(v66 + 40);
      v133 = v123 * *(double *)(v66 + 32);
      goto LABEL_234;
    }
    if (v64 > 1)
    {
      v82 = v173;
LABEL_233:
      v50.f64[0] = *(double *)(v66 + 16) + *(double *)v66 * v82.f64[0] + vmuld_lane_f64(*(double *)(v66 + 8), v82, 1);
      v132 = *(double *)(v66 + 40);
      v133 = vmuld_lane_f64(*(double *)(v66 + 32), v82, 1);
      goto LABEL_234;
    }
    if (!v64)
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    v50.f64[0] = *(double *)(v66 + 16) + *(double *)v66 * v173.f64[0] + *(double *)(v66 + 8) * v173.f64[1];
    v50.f64[1] = v173.f64[1] * *(double *)(v66 + 32) + *(double *)(v66 + 40);
LABEL_44:
    v166 = v50;
    _D3 = vsubq_f64(v50, vcvtq_f64_f32(v63)).f64[1];
    __asm { FMLA            D2, D3, V1.D[1] }
    v56 = *(double *)a3 * v62 * (*(double *)a3 * v62);
    if (_D2 > *(double *)a4 * v62 * (*(double *)a4 * v62))
      v12 = 0;
    v57 = *(_DWORD *)a5;
    if (_D2 < v48)
      ++v57;
    if (_D2 > v56)
      v11 = 0;
    *(_DWORD *)a5 = v57;
    v58 = _D2 <= v56 && v49;
    v47 += v58;
    v45 += 64;
  }
  while (v45 != v46);
  if (v47)
  {
    v158 = v47 >= *(_DWORD *)(a3 + 40);
    goto LABEL_245;
  }
LABEL_244:
  v158 = 0;
LABEL_245:
  *(_BYTE *)(a5 + 4) = v158;
  *(_BYTE *)(a5 + 20) = v11;
  return v11 | (v12 << 8);
}

double sub_20FB9A9C0(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  float64x2_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int8x16_t v13;
  double v14;
  float64x2_t v15;
  double v16;
  uint64_t *v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  __int128 v26;
  uint64_t v27;

  v5 = a2 + 40;
  if (*(_BYTE *)(a2 + 968))
    v6 = a2 + 40;
  else
    v6 = 0;
  v26 = *(_OWORD *)(v6 + 896);
  v27 = *(_QWORD *)(v6 + 912);
  v7 = (_QWORD *)(a1 + 64);
  v8 = sub_20E9DF85C((_QWORD *)(a1 + 64), (uint64_t *)&v26);
  if (!v8
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viotriangulator.hpp", 464, (uint64_t)"anchorCameraIter != camera_data_.end()", 38, (uint64_t)"Cannot find camera pose.", 24, (void (*)(void **))sub_21023DDB0))
  {
LABEL_31:
    abort();
  }
  if (*(_BYTE *)(a2 + 968))
    v10 = v5;
  else
    v10 = 0;
  if (a3)
    v10 += 448;
  v11 = *(_QWORD *)(a2 + 976);
  v12 = *(_QWORD *)(a2 + 984);
  if (v11 != v12)
  {
    v13 = *(int8x16_t *)(v10 + 8);
    v9.f64[0] = *(float64_t *)(v10 + 24);
    v25 = v9;
    v14 = 1.0;
    v15.f64[0] = *(float64_t *)(v10 + 8);
    *(_QWORD *)&v15.f64[1] = vextq_s8(v13, v13, 8uLL).u64[0];
    v24 = v15;
    v13.i64[1] = *(_QWORD *)&v15.f64[1];
    v23 = (float64x2_t)v13;
    while (1)
    {
      if ((_DWORD)v27 != *(_DWORD *)(v11 + 16) || (_QWORD)v26 != *(_QWORD *)v11 || DWORD2(v26) != *(_DWORD *)(v11 + 8))
      {
        v17 = sub_20E9DF85C(v7, (uint64_t *)v11);
        if (!v17
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viotriangulator.hpp", 477, (uint64_t)"inv_cam_pose_iter != camera_data_.end()", 39, (uint64_t)"Cannot find camera pose.", 24, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_31;
        }
        *(_QWORD *)&v18.f64[0] = v8[47];
        *(_QWORD *)&v18.f64[0] = *(_OWORD *)&vsubq_f64(v18, v25);
        v20 = vsubq_f64(*(float64x2_t *)(v8 + 45), v24);
        v16 = 1.0;
        if (fabs(v20.f64[0]) >= 1.0e-10 || fabs(v20.f64[1]) >= 1.0e-10 || fabs(v18.f64[0]) >= 1.0e-10)
        {
          *(_QWORD *)&v19.f64[0] = v17[47];
          *(_QWORD *)&v19.f64[0] = *(_OWORD *)&vsubq_f64(v19, v25);
          v21 = vsubq_f64(*(float64x2_t *)(v17 + 45), v23);
          if (fabs(v21.f64[0]) >= 1.0e-10 || fabs(v21.f64[1]) >= 1.0e-10 || fabs(v19.f64[0]) >= 1.0e-10)
          {
            v20.f64[1] = *(double *)vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL).i64;
            v21.f64[1] = *(double *)vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL).i64;
            v16 = (vmulq_f64(v20, v21).f64[0] + v20.f64[1] * v21.f64[1] + v18.f64[0] * v19.f64[0])
                / sqrt((vmulq_f64(v20, v20).f64[0] + v20.f64[1] * v20.f64[1] + v18.f64[0] * v18.f64[0])* (vmulq_f64(v21, v21).f64[0] + v21.f64[1] * v21.f64[1] + v19.f64[0] * v19.f64[0]));
          }
        }
        if (v16 < v14)
          v14 = v16;
      }
      v11 += 152;
      if (v11 == v12)
        return v14;
    }
  }
  return 1.0;
}

uint64_t sub_20FB9AC50(uint64_t a1, uint64_t a2, unint64_t a3, int a4, int *a5, uint64_t a6, uint64_t a7, double a8, double a9, double a10, double a11)
{
  uint64_t v12;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t *v25;
  float64x2_t v26;
  uint64_t v27;
  double v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t *v31;
  float64x2_t v32;
  float64x2_t v33;
  double v34;
  double v35;
  double *v36;
  float64x2_t v37;
  float64_t v38;
  float64_t v39;
  double v40;
  double v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  double v50;
  double v51;
  uint64_t *v52;
  uint64_t v55;
  double v56;
  uint64_t v57;
  double v58;
  float64x2_t v63;
  double v66;
  _BOOL4 v68;
  unsigned int v69;
  unsigned int v70;
  char v71;
  double v72;
  double v74;
  double v77;
  float64x2_t v81;
  float64x2_t v82;
  double v83;
  double v84;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  int v93;
  int v94;
  double v95;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  int v104;
  int v105;
  double v106;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  int v115;
  int v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  float64x2_t v124;
  double v125;
  double v127;
  double v128;
  int v129;
  double v130;
  BOOL v131;
  float64x2_t v132;
  double v133;
  double v135;
  double v136;
  int v137;
  double v138;
  float64x2_t v139;
  BOOL v140;
  float64x2_t v141;
  double v142;
  double v144;
  double v145;
  int v146;
  double v147;
  float64x2_t v148;
  unsigned int v149;
  double v150;
  float64x2_t v154;
  float64x2_t v155;
  double v156;
  double v157;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  int v166;
  int v167;
  double v168;
  double v172;
  double v173;
  double v174;
  double v175;
  double v176;
  int v177;
  int v178;
  double v179;
  char v180;
  double v185;
  double v188;
  double v192;
  double v193;
  double v194;
  double v195;
  double v196;
  int v197;
  int v198;
  double v199;
  double v200;
  double v201;
  double v202;
  double v203;
  double v204;
  BOOL v205;
  float64x2_t v206;
  double v207;
  double v209;
  double v210;
  int v211;
  double v212;
  float64x2_t v213;
  double v214;
  double v215;
  BOOL v216;
  float64x2_t v217;
  double v218;
  double v220;
  double v221;
  int v222;
  double v223;
  float64x2_t v224;
  BOOL v225;
  float64x2_t v226;
  double v227;
  double v229;
  double v230;
  int v231;
  double v232;
  unsigned int v233;
  double v234;
  double v241;
  int v242;
  double v243;
  float64x2_t v244;
  double v245;
  float64x2_t v246;
  double v247;
  float64x2_t v248;
  float64x2_t v249;
  unint64_t v250;
  float64x2_t v251;
  uint64_t v252;
  int8x16_t v254;
  __int128 v255;
  float64x2_t v256;
  double v257;
  float64x2_t v258;
  double v259;
  __int128 v260;
  uint64_t v261;
  float64x2_t v262;
  uint64_t v263;

  v263 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a6 = 0;
  *(_DWORD *)(a6 + 8) = 0;
  *(_BYTE *)(a6 + 12) = 1;
  *(_QWORD *)a7 = 0;
  *(_DWORD *)(a7 + 8) = 0;
  *(_BYTE *)(a7 + 12) = 1;
  *a5 = 0;
  if (0x86BCA1AF286BCA1BLL * ((uint64_t)(*(_QWORD *)(a2 + 984) - *(_QWORD *)(a2 + 976)) >> 3) >= a3)
  {
    if (*(_BYTE *)(a2 + 968)
      || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viotriangulator.hpp", 1086, (uint64_t)"track.getStructure()", 20, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      v22 = a2 + 40;
      if (*(_QWORD *)(a2 + 136))
        goto LABEL_11;
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viotriangulator.hpp", 1089, (uint64_t)"track.getStructure()->src_point.isSetup() && track.getStructure()->src_point.isSetup()", 86, (uint64_t)"Both end points should be valid.", 32, (void (*)(void **))sub_21023DDB0))
      {
        if (*(_BYTE *)(a2 + 968))
          v22 = a2 + 40;
        else
          v22 = 0;
LABEL_11:
        v252 = a6;
        v260 = *(_OWORD *)(v22 + 896);
        v261 = *(_QWORD *)(v22 + 912);
        v23 = (_QWORD *)(a1 + 64);
        v24 = sub_20E9DF85C(v23, (uint64_t *)&v260);
        v25 = sub_20E9DF85C(v23, (uint64_t *)(*(_QWORD *)(a2 + 984) - 152));
        if (*(_BYTE *)(a2 + 968))
          v27 = a2 + 40;
        else
          v27 = 0;
        v26.f64[0] = *(float64_t *)(v27 + 24);
        v248 = v26;
        v249 = *(float64x2_t *)(v27 + 8);
        v26.f64[0] = *(float64_t *)(v27 + 472);
        v251 = v26;
        v254 = *(int8x16_t *)(v27 + 456);
        v250 = vextq_s8(v254, v254, 8uLL).u64[0];
        v28 = cos(a10 * 0.0174532925);
        v30.f64[0] = v249.f64[0];
        v31 = (float64x2_t *)(v25 + 45);
        *(_QWORD *)&v32.f64[0] = v24[47];
        v33 = vsubq_f64(*(float64x2_t *)(v24 + 45), v249);
        *(_QWORD *)&v34 = *(_OWORD *)&vsubq_f64(v32, v248);
        v35 = 1.0;
        if (fabs(v33.f64[0]) >= 1.0e-10 || fabs(v33.f64[1]) >= 1.0e-10 || fabs(v34) >= 1.0e-10)
        {
          *(_QWORD *)&v29.f64[0] = v25[47];
          *(_QWORD *)&v29.f64[0] = *(_OWORD *)&vsubq_f64(v29, v248);
          *(_QWORD *)&v30.f64[1] = vextq_s8((int8x16_t)v249, (int8x16_t)v249, 8uLL).u64[0];
          v37 = vsubq_f64(*v31, v30);
          v36 = (double *)a6;
          if (fabs(v37.f64[0]) >= 1.0e-10 || fabs(v37.f64[1]) >= 1.0e-10 || fabs(v29.f64[0]) >= 1.0e-10)
          {
            v33.f64[1] = *(double *)vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL).i64;
            v37.f64[1] = *(double *)vextq_s8((int8x16_t)v37, (int8x16_t)v37, 8uLL).i64;
            v38 = vmulq_f64(v33, v37).f64[0] + v33.f64[1] * v37.f64[1] + v34 * v29.f64[0];
            v39 = vmulq_f64(v33, v33).f64[0] + v33.f64[1] * v33.f64[1] + v34 * v34;
            v33 = vmulq_f64(v37, v37);
            v35 = v38 / sqrt(v39 * (v33.f64[0] + v37.f64[1] * v37.f64[1] + v29.f64[0] * v29.f64[0]));
          }
        }
        else
        {
          v36 = (double *)a6;
        }
        v40 = 1.0;
        v41 = fmin(v35, 1.0);
        *v36 = v41;
        *(_QWORD *)&v33.f64[0] = v24[47];
        *(_QWORD *)&v42.f64[0] = v254.i64[0];
        *(_QWORD *)&v43.f64[0] = v254.i64[0];
        *(_QWORD *)&v43.f64[1] = v250;
        v44 = vsubq_f64(*(float64x2_t *)(v24 + 45), v43);
        *(_QWORD *)&v33.f64[0] = *(_OWORD *)&vsubq_f64(v33, v251);
        if (fabs(v44.f64[0]) >= 1.0e-10 || fabs(v44.f64[1]) >= 1.0e-10 || fabs(v33.f64[0]) >= 1.0e-10)
        {
          *(_QWORD *)&v43.f64[0] = v25[47];
          *(_QWORD *)&v43.f64[0] = *(_OWORD *)&vsubq_f64(v43, v251);
          *(_QWORD *)&v42.f64[1] = v250;
          v45 = vsubq_f64(*v31, v42);
          if (fabs(v45.f64[0]) >= 1.0e-10 || fabs(v45.f64[1]) >= 1.0e-10 || fabs(v43.f64[0]) >= 1.0e-10)
          {
            v44.f64[1] = *(double *)vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).i64;
            v45.f64[1] = *(double *)vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL).i64;
            v40 = (vmulq_f64(v44, v45).f64[0] + v44.f64[1] * v45.f64[1] + v33.f64[0] * v43.f64[0])
                / sqrt((vmulq_f64(v44, v44).f64[0] + v44.f64[1] * v44.f64[1] + v33.f64[0] * v33.f64[0])* (vmulq_f64(v45, v45).f64[0] + v45.f64[1] * v45.f64[1] + v43.f64[0] * v43.f64[0]));
          }
        }
        v46 = fmin(v40, 1.0);
        *(double *)a7 = v46;
        v12 = v46 <= v28 && v41 <= v28;
        v47 = *(_QWORD *)(a2 + 976);
        v48 = *(_QWORD *)(a2 + 984);
        if (v47 == v48)
        {
LABEL_424:
          *(_BYTE *)(v252 + 12) = v12;
          *(_BYTE *)(a7 + 12) = v12;
          return v12;
        }
        v49 = a4 ^ 1;
        v50 = a11 * a11;
        v51 = fmax(a9, 0.0);
        v255 = 0u;
        while (1)
        {
          v52 = sub_20E9DF85C(v23, (uint64_t *)v47);
          v55 = v52[49];
          v56 = *(double *)(v47 + 144);
          if (*(_BYTE *)(a2 + 968))
            v57 = a2 + 40;
          else
            v57 = 0;
          *(_QWORD *)&_Q2.f64[0] = v52[23];
          v58 = *(double *)(v57 + 24);
          _Q7 = *(float64x2_t *)(v57 + 8);
          __asm { FMLA            D0, D2, V7.D[1] }
          _Q0.f64[0] = _Q0.f64[0] + *((double *)v52 + 27) * v58;
          *(_QWORD *)&_Q2.f64[0] = v52[31];
          v63 = *(float64x2_t *)(v52 + 29);
          _Q1 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v52 + 17), _Q7.f64[0]), *(float64x2_t *)(v52 + 21), _Q7, 1), *(float64x2_t *)(v52 + 25), v58), v63);
          v258 = _Q1;
          v259 = vaddq_f64(_Q0, _Q2).f64[0];
          _D5 = v52[23];
          v66 = *(double *)(v57 + 472);
          _Q18 = *(float64x2_t *)(v57 + 456);
          __asm { FMLA            D1, D5, V18.D[1] }
          _Q1.f64[0] = _Q1.f64[0] + *((double *)v52 + 27) * v66;
          v256 = vaddq_f64(v63, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v52 + 17), _Q18.f64[0]), *(float64x2_t *)(v52 + 21), _Q18, 1), *(float64x2_t *)(v52 + 25), v66));
          v257 = vaddq_f64(_Q2, _Q1).f64[0];
          v68 = v257 >= v51 && v259 >= v51;
          v69 = *(_DWORD *)(v55 + 992);
          if (v69 == -1)
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
            v69 = *(_DWORD *)(v55 + 992);
            if (v69 > 7)
            {
LABEL_50:
              if (v69 > 0xB)
              {
                if (v69 <= 0xD)
                {
                  if (v69 != 13 || v259 < 0.00000001)
                    goto LABEL_406;
                  _Q0 = vdivq_f64(v258, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v259, 0));
                  v74 = (*(double *)v55 + *(double *)(v55 + 32)) * 0.5;
                  _D3 = _Q0.f64[1];
                  __asm { FMLA            D2, D3, V0.D[1] }
                  v77 = v74 * (_D2 * v74);
                  v262 = vdivq_f64(_Q0, (float64x2_t)vdupq_lane_s64(COERCE__INT64(v77* (*(double *)(v55 + 168)+ v74 * *(double *)(v55 + 224)+ v77* (*(double *)(v55 + 176)+ v74 * *(double *)(v55 + 232)+ v77* (*(double *)(v55 + 184)+ v74 * *(double *)(v55 + 240)+ v77* (*(double *)(v55 + 192)+ v74 * *(double *)(v55 + 248)+ v77* (*(double *)(v55 + 200)+ v74 * *(double *)(v55 + 256)+ v77
                                               * (*(double *)(v55 + 208)
                                                + v74 * *(double *)(v55 + 264)
                                                + v77
                                                * (*(double *)(v55 + 216) + *(double *)(v55 + 272) * v74 + v77 * 0.0)))))))
                                          / 100.0
                                          + 1.0),
                                          0));
                  v70 = *(_DWORD *)(v55 + 992);
                  if (v70 != -1)
                    goto LABEL_132;
                  goto LABEL_73;
                }
                if (v69 == 14)
                  v71 = sub_20EB247C0(&v262, (uint64_t)&v258, (double *)(v55 + 168), (*(double *)v55 + *(double *)(v55 + 32)) * 0.5);
                else
                  v71 = sub_20EB3E39C(v55, &v262, &v258);
              }
              else if (v69 > 9)
              {
                if (v69 == 10)
                  v71 = sub_20EB24288(&v262, (uint64_t)&v258, (double *)(v55 + 168), (*(double *)v55 + *(double *)(v55 + 32)) * 0.5);
                else
                  v71 = sub_20EB3A2E4(v55, &v262, &v258);
              }
              else
              {
                if (v69 != 9)
                {
                  _V0.D[1] = v258.f64[1];
                  _D1 = v258.f64[1];
                  __asm { FMLA            D16, D1, V0.D[1] }
                  v88 = sqrt(_D16);
                  v89 = fabs(v259);
                  v90 = fabs(v88);
                  v91 = v89 / v90;
                  if (v89 >= v90)
                    v91 = v90 / v89;
                  v92 = (v90 - v89) / (v89 + v90);
                  if (v89 >= v90)
                    v92 = -v92;
                  if (v91 > 0.414213562)
                    v93 = 1;
                  else
                    v93 = 2;
                  if (v91 > 0.414213562)
                    v94 = -1;
                  else
                    v94 = 1;
                  if (v91 <= 0.414213562)
                    v92 = v91;
                  if (_D16 >= 0.00000001)
                  {
                    if (v89 < v90)
                      v94 = -v94;
                    else
                      v93 = v91 > 0.414213562;
                    _ZF = v88 == INFINITY && v89 == INFINITY;
                    v124 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v92 * v92), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v92 * v92), (float64x2_t)xmmword_210315370), v92 * v92 * (v92 * v92))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v92 * v92), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v92 * v92), (float64x2_t)xmmword_210315380), v92 * v92 * (v92 * v92))),
                               v92 * v92 * (v92 * v92) * (v92 * v92 * (v92 * v92))));
                    v125 = v92 + v92 * vdivq_f64(v124, (float64x2_t)vdupq_laneq_s64((int64x2_t)v124, 1)).f64[0];
                    if (_ZF)
                      v125 = 0.785398163;
                    if (v88 == 0.0 && v259 == 0.0)
                      v127 = 0.0;
                    else
                      v127 = v125;
                    if (v259 < 0.0)
                    {
                      v93 = 4 - v93;
                      v94 = -v94;
                    }
                    if (v88 < 0.0)
                      v93 = -v93;
                    v128 = (double)v93;
                    if (v88 >= 0.0)
                      v129 = v94;
                    else
                      v129 = -v94;
                    v130 = v128 * 3.061617e-17 + v128 * 0.785398163 + v127 * (double)v129;
                    v95 = 1.0
                        / v88
                        * (v130
                         * (v130
                          * v130
                          * (*(double *)(v55 + 168)
                           + v130
                           * v130
                           * (*(double *)(v55 + 176)
                            + v130
                            * v130
                            * (*(double *)(v55 + 184)
                             + v130
                             * v130
                             * (*(double *)(v55 + 192)
                              + v130
                              * v130
                              * (*(double *)(v55 + 200)
                               + v130 * v130 * (*(double *)(v55 + 208) + v130 * v130 * *(double *)(v55 + 216)))))))
                          + 1.0));
                  }
                  else
                  {
                    v95 = 1.0 / v259;
                  }
                  v262 = vmulq_n_f64(v258, v95);
                  v84 = v262.f64[1];
                  goto LABEL_179;
                }
                v71 = sub_20EB3641C(v55, &v262, &v258);
              }
              goto LABEL_130;
            }
          }
          else if (v69 > 7)
          {
            goto LABEL_50;
          }
          if (v69 > 3)
          {
            if (v69 > 5)
            {
              if (v69 == 6)
              {
                v82 = vaddq_f64(vdivq_f64(v258, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v259, 0)), *(float64x2_t *)(v55 + 192));
                v83 = sqrt(vaddvq_f64(vmulq_f64(v82, v82)));
                v262 = vaddq_f64(*(float64x2_t *)(v55 + 208), vmulq_n_f64(v82, v83* (v83* (*(double *)(v55 + 168) + v83 * (*(double *)(v55 + 176) + *(double *)(v55 + 184) * v83)))+ 1.0));
                v70 = *(_DWORD *)(v55 + 992);
                if (v70 != -1)
                  goto LABEL_132;
                goto LABEL_73;
              }
              v71 = sub_20EB31FFC(v55, &v262, &v258);
LABEL_130:
              if ((v71 & 1) == 0)
                goto LABEL_406;
              v70 = *(_DWORD *)(v55 + 992);
              if (v70 != -1)
                goto LABEL_132;
              goto LABEL_73;
            }
            if (v69 != 5)
            {
              _V0.D[1] = v258.f64[1];
              _D1 = v258.f64[1];
              __asm { FMLA            D16, D1, V0.D[1] }
              v99 = sqrt(_D16);
              v100 = fabs(v259);
              v101 = fabs(v99);
              v102 = v100 / v101;
              if (v100 >= v101)
                v102 = v101 / v100;
              v103 = (v101 - v100) / (v100 + v101);
              if (v100 >= v101)
                v103 = -v103;
              if (v102 > 0.414213562)
                v104 = 1;
              else
                v104 = 2;
              if (v102 > 0.414213562)
                v105 = -1;
              else
                v105 = 1;
              if (v102 <= 0.414213562)
                v103 = v102;
              if (_D16 >= 0.00000001)
              {
                if (v100 < v101)
                  v105 = -v105;
                else
                  v104 = v102 > 0.414213562;
                v131 = v99 == INFINITY && v100 == INFINITY;
                v132 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v103 * v103), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v103 * v103), (float64x2_t)xmmword_210315370), v103 * v103 * (v103 * v103))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v103 * v103), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v103 * v103), (float64x2_t)xmmword_210315380), v103 * v103 * (v103 * v103))),
                           v103 * v103 * (v103 * v103) * (v103 * v103 * (v103 * v103))));
                v133 = v103 + v103 * vdivq_f64(v132, (float64x2_t)vdupq_laneq_s64((int64x2_t)v132, 1)).f64[0];
                if (v131)
                  v133 = 0.785398163;
                if (v99 == 0.0 && v259 == 0.0)
                  v135 = 0.0;
                else
                  v135 = v133;
                if (v259 < 0.0)
                {
                  v104 = 4 - v104;
                  v105 = -v105;
                }
                if (v99 < 0.0)
                  v104 = -v104;
                v136 = (double)v104;
                if (v99 >= 0.0)
                  v137 = v105;
                else
                  v137 = -v105;
                v138 = v136 * 3.061617e-17 + v136 * 0.785398163 + v135 * (double)v137;
                v139 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v55 + 168), *(int64x2_t *)(v55 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v55 + 168), *(int64x2_t *)(v55 + 184)), v138 * v138)), v138 * v138);
                v106 = 1.0 / v99 * (v138 + v138 * (v139.f64[0] + vmuld_lane_f64(v138 * v138 * (v138 * v138), v139, 1)));
              }
              else
              {
                v106 = 1.0 / v259;
              }
              v262 = vmulq_n_f64(v258, v106);
              v118 = v262.f64[1];
LABEL_203:
              *((double *)&v255 + 1) = v118 * *(double *)(v55 + 32) + *(double *)(v55 + 40);
              v70 = 4;
              goto LABEL_229;
            }
            v72 = v258.f64[0] * v258.f64[0] + v258.f64[1] * v258.f64[1];
            if (v72 >= 0.00000001)
            {
              v119 = sqrt(v72);
              if (v119 <= v259)
              {
                v234 = v119 / v259 * 0.785398163
                     - v119 / v259 * (v119 / v259 + -1.0) * (v119 / v259 * 0.0663008339 + 0.244711287);
              }
              else
              {
                if (v119 <= -v259)
                {
                  v121 = v119 / v259 * 0.785398163
                       - v119 / v259 * (-1.0 - v119 / v259) * (v119 / v259 * -0.0663008339 + 0.244711287);
                  v122 = 3.14159265;
                }
                else
                {
                  v120 = fabs(v259 / v119);
                  v121 = v259 / v119 * (v120 + -1.0) * (v120 * 0.0663008339 + 0.244711287) + v259 / v119 * -0.785398163;
                  v122 = 1.57079633;
                }
                v234 = v121 + v122;
              }
              v244 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v55 + 168), *(int64x2_t *)(v55 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v55 + 168), *(int64x2_t *)(v55 + 184)), v234 * v234)), v234 * v234);
              v245 = (v234 + v234 * (v244.f64[0] + vmuld_lane_f64(v234 * v234 * (v234 * v234), v244, 1))) / v119;
              v262.f64[0] = v258.f64[0] * v245;
              v262.f64[1] = v258.f64[1] * v245;
              v70 = *(_DWORD *)(v55 + 992);
              if (v70 != -1)
                goto LABEL_132;
            }
            else
            {
              if (v259 == 0.0)
                goto LABEL_406;
              v262.f64[0] = v258.f64[0] * (1.0 / v259);
              v262.f64[1] = v258.f64[1] * (1.0 / v259);
              v70 = *(_DWORD *)(v55 + 992);
              if (v70 != -1)
                goto LABEL_132;
            }
          }
          else
          {
            if (v69 > 1)
            {
              if (v69 == 2)
              {
                if (*(_DWORD *)(v55 + 212))
                {
                  if (v259 < 0.00000001)
                    goto LABEL_406;
                  _Q2 = vmulq_n_f64(v258, 1.0 / v259);
                  _D0 = vmuld_lane_f64(1.0 / v259, v258, 1);
                  __asm { FMLA            D1, D0, V2.D[1] }
                  v81 = vaddq_f64(vaddq_f64(vmulq_f64((float64x2_t)vextq_s8(*(int8x16_t *)(v55 + 192), *(int8x16_t *)(v55 + 192), 8uLL), vaddq_f64((float64x2_t)vdupq_lane_s64(_D1, 0), vmulq_f64(_Q2, vaddq_f64(_Q2, _Q2)))), vmulq_laneq_f64(vmulq_n_f64(vaddq_f64(*(float64x2_t *)(v55 + 192), *(float64x2_t *)(v55 + 192)), _Q2.f64[0]), _Q2, 1)), vmulq_n_f64(_Q2, *(double *)(v55 + 168) * *(double *)&_D1+ 1.0+ *(double *)&_D1 * (*(double *)(v55 + 176) * *(double *)&_D1)+ *(double *)&_D1 * (*(double *)&_D1 * (*(double *)(v55 + 184) * *(double *)&_D1))));
                }
                else
                {
                  if (v259 < 0.00000001)
                    goto LABEL_406;
                  _Q2 = vmulq_n_f64(v258, 1.0 / v259);
                  _D0 = vmuld_lane_f64(1.0 / v259, v258, 1);
                  __asm { FMLA            D1, D0, V2.D[1] }
                  v81 = vmulq_n_f64(_Q2, *(double *)(v55 + 168) * _D1+ 1.0+ _D1 * _D1 * (*(double *)(v55 + 176) + *(double *)(v55 + 184) * _D1));
                }
                v262 = v81;
LABEL_284:
                *((double *)&v255 + 1) = vmuld_lane_f64(*(double *)(v55 + 32), v81, 1) + *(double *)(v55 + 40);
                v70 = 2;
                goto LABEL_229;
              }
              _V0.D[1] = v258.f64[1];
              _D1 = v258.f64[1];
              __asm { FMLA            D16, D1, V0.D[1] }
              v110 = sqrt(_D16);
              v111 = fabs(v259);
              v112 = fabs(v110);
              v113 = v111 / v112;
              if (v111 >= v112)
                v113 = v112 / v111;
              v114 = (v112 - v111) / (v111 + v112);
              if (v111 >= v112)
                v114 = -v114;
              if (v113 > 0.414213562)
                v115 = 1;
              else
                v115 = 2;
              if (v113 > 0.414213562)
                v116 = -1;
              else
                v116 = 1;
              if (v113 <= 0.414213562)
                v114 = v113;
              if (_D16 >= 0.00000001)
              {
                if (v111 < v112)
                  v116 = -v116;
                else
                  v115 = v113 > 0.414213562;
                v140 = v110 == INFINITY && v111 == INFINITY;
                v141 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v114 * v114), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v114 * v114), (float64x2_t)xmmword_210315370), v114 * v114 * (v114 * v114))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v114 * v114), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v114 * v114), (float64x2_t)xmmword_210315380), v114 * v114 * (v114 * v114))),
                           v114 * v114 * (v114 * v114) * (v114 * v114 * (v114 * v114))));
                v142 = v114 + v114 * vdivq_f64(v141, (float64x2_t)vdupq_laneq_s64((int64x2_t)v141, 1)).f64[0];
                if (v140)
                  v142 = 0.785398163;
                if (v110 == 0.0 && v259 == 0.0)
                  v144 = 0.0;
                else
                  v144 = v142;
                if (v259 < 0.0)
                {
                  v115 = 4 - v115;
                  v116 = -v116;
                }
                if (v110 < 0.0)
                  v115 = -v115;
                v145 = (double)v115;
                if (v110 >= 0.0)
                  v146 = v116;
                else
                  v146 = -v116;
                v147 = v145 * 3.061617e-17 + v145 * 0.785398163 + v144 * (double)v146;
                v148 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v55 + 168), *(int64x2_t *)(v55 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v55 + 168), *(int64x2_t *)(v55 + 184)), v147 * v147)), v147 * v147);
                v117 = 1.0 / v110 * (v147 + v147 * (v148.f64[0] + vmuld_lane_f64(v147 * v147 * (v147 * v147), v148, 1)));
              }
              else
              {
                v117 = 1.0 / v259;
              }
              v81 = vmulq_n_f64(v258, v117);
              v262 = v81;
LABEL_227:
              *((double *)&v255 + 1) = vmuld_lane_f64(*(double *)(v55 + 32), v81, 1) + *(double *)(v55 + 40);
              v70 = 3;
LABEL_228:
              if (v70 > 7)
                goto LABEL_285;
              goto LABEL_229;
            }
            if (!v69)
            {
              sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
              abort();
            }
            if (v259 < 0.00000001)
              goto LABEL_406;
            v262 = vmulq_n_f64(v258, 1.0 / v259);
            v70 = *(_DWORD *)(v55 + 992);
            if (v70 != -1)
            {
LABEL_132:
              if (v70 > 7)
                goto LABEL_75;
              goto LABEL_133;
            }
          }
LABEL_73:
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v70 = *(_DWORD *)(v55 + 992);
          if (v70 > 7)
          {
LABEL_75:
            if (v70 <= 0xB)
            {
              if (v70 > 9)
              {
                *((double *)&v255 + 1) = *(double *)(v55 + 40) + *(double *)(v55 + 32) * v262.f64[1];
                if (v70 == 10)
                  v70 = 10;
                else
                  v70 = 11;
                goto LABEL_285;
              }
              v84 = v262.f64[1];
              if (v70 == 9)
              {
                *((double *)&v255 + 1) = v262.f64[1] * *(double *)(v55 + 32) + *(double *)(v55 + 40);
                v70 = 9;
LABEL_285:
                if (v70 <= 0xB)
                {
                  if (v70 > 9)
                  {
                    if (v70 == 10)
                      v180 = sub_20EB24288(&v262, (uint64_t)&v256, (double *)(v55 + 168), (*(double *)v55 + *(double *)(v55 + 32)) * 0.5);
                    else
                      v180 = sub_20EB3A2E4(v55, &v262, &v256);
                  }
                  else
                  {
                    if (v70 != 9)
                    {
                      _V0.D[1] = v256.f64[1];
                      _D1 = v256.f64[1];
                      __asm { FMLA            D16, D1, V0.D[1] }
                      v192 = sqrt(_D16);
                      v193 = fabs(v257);
                      v194 = fabs(v192);
                      v195 = v193 / v194;
                      if (v193 >= v194)
                        v195 = v194 / v193;
                      v196 = (v194 - v193) / (v193 + v194);
                      if (v193 >= v194)
                        v196 = -v196;
                      if (v195 > 0.414213562)
                        v197 = 1;
                      else
                        v197 = 2;
                      if (v195 > 0.414213562)
                        v198 = -1;
                      else
                        v198 = 1;
                      if (v195 <= 0.414213562)
                        v196 = v195;
                      if (_D16 >= 0.00000001)
                      {
                        if (v193 < v194)
                          v198 = -v198;
                        else
                          v197 = v195 > 0.414213562;
                        v225 = v192 == INFINITY && v193 == INFINITY;
                        v226 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v196 * v196), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v196 * v196), (float64x2_t)xmmword_210315370), v196 * v196 * (v196 * v196))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v196 * v196), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v196 * v196), (float64x2_t)xmmword_210315380), v196 * v196 * (v196 * v196))),
                                   v196 * v196 * (v196 * v196) * (v196 * v196 * (v196 * v196))));
                        v227 = v196 + v196 * vdivq_f64(v226, (float64x2_t)vdupq_laneq_s64((int64x2_t)v226, 1)).f64[0];
                        if (v225)
                          v227 = 0.785398163;
                        if (v192 == 0.0 && v257 == 0.0)
                          v229 = 0.0;
                        else
                          v229 = v227;
                        if (v257 < 0.0)
                        {
                          v197 = 4 - v197;
                          v198 = -v198;
                        }
                        if (v192 < 0.0)
                          v197 = -v197;
                        v230 = (double)v197;
                        if (v192 >= 0.0)
                          v231 = v198;
                        else
                          v231 = -v198;
                        v232 = v230 * 3.061617e-17 + v230 * 0.785398163 + v229 * (double)v231;
                        v199 = 1.0
                             / v192
                             * (v232
                              * (v232
                               * v232
                               * (*(double *)(v55 + 168)
                                + v232
                                * v232
                                * (*(double *)(v55 + 176)
                                 + v232
                                 * v232
                                 * (*(double *)(v55 + 184)
                                  + v232
                                  * v232
                                  * (*(double *)(v55 + 192)
                                   + v232
                                   * v232
                                   * (*(double *)(v55 + 200)
                                    + v232 * v232 * (*(double *)(v55 + 208) + v232 * v232 * *(double *)(v55 + 216)))))))
                               + 1.0));
                      }
                      else
                      {
                        v199 = 1.0 / v257;
                      }
                      v262 = vmulq_n_f64(v256, v199);
                      v157 = v262.f64[1];
                      goto LABEL_400;
                    }
                    v180 = sub_20EB3641C(v55, &v262, &v256);
                  }
                  goto LABEL_314;
                }
                if (v70 > 0xD)
                {
                  if (v70 == 14)
                    v180 = sub_20EB247C0(&v262, (uint64_t)&v256, (double *)(v55 + 168), (*(double *)v55 + *(double *)(v55 + 32)) * 0.5);
                  else
LABEL_298:
                    v180 = sub_20EB3E39C(v55, &v262, &v256);
LABEL_314:
                  if ((v180 & 1) != 0)
                  {
                    v149 = *(_DWORD *)(v55 + 992);
                    if (v149 == -1)
                      goto LABEL_247;
                    goto LABEL_316;
                  }
                  goto LABEL_406;
                }
                if (v70 == 13 && v257 >= 0.00000001)
                {
                  _Q0 = vdivq_f64(v256, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v257, 0));
                  v185 = (*(double *)v55 + *(double *)(v55 + 32)) * 0.5;
                  _D3 = _Q0.f64[1];
                  __asm { FMLA            D2, D3, V0.D[1] }
                  v188 = v185 * (_D2 * v185);
                  v262 = vdivq_f64(_Q0, (float64x2_t)vdupq_lane_s64(COERCE__INT64(v188* (*(double *)(v55 + 168)+ v185 * *(double *)(v55 + 224)+ v188* (*(double *)(v55 + 176)+ v185 * *(double *)(v55 + 232)+ v188* (*(double *)(v55 + 184)+ v185 * *(double *)(v55 + 240)+ v188* (*(double *)(v55 + 192)+ v185 * *(double *)(v55 + 248)+ v188* (*(double *)(v55 + 200)+ v185 * *(double *)(v55 + 256)+ v188
                                               * (*(double *)(v55 + 208)
                                                + v185 * *(double *)(v55 + 264)
                                                + v188
                                                * (*(double *)(v55 + 216) + *(double *)(v55 + 272) * v185 + v188 * 0.0)))))))
                                          / 100.0
                                          + 1.0),
                                          0));
                  v149 = *(_DWORD *)(v55 + 992);
                  if (v149 != -1)
                    goto LABEL_316;
                  goto LABEL_247;
                }
                goto LABEL_406;
              }
LABEL_179:
              *((double *)&v255 + 1) = v84 * *(double *)(v55 + 32) + *(double *)(v55 + 40);
              v70 = 8;
              goto LABEL_285;
            }
            *((double *)&v255 + 1) = *(double *)(v55 + 40) + *(double *)(v55 + 32) * v262.f64[1];
            if (v70 <= 0xD)
            {
              if (v70 == 13)
                v70 = 13;
              else
                v70 = 12;
              goto LABEL_285;
            }
            if (v70 == 14)
              goto LABEL_228;
            if (v70 != -1)
              goto LABEL_298;
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
            v70 = *(_DWORD *)(v55 + 992);
            if (v70 > 7)
              goto LABEL_285;
            goto LABEL_229;
          }
LABEL_133:
          if (v70 <= 3)
          {
            if (v70 <= 1)
            {
              if (!v70)
              {
                sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
                abort();
              }
              *((double *)&v255 + 1) = v262.f64[1] * *(double *)(v55 + 32) + *(double *)(v55 + 40);
              v70 = 1;
              goto LABEL_229;
            }
            v81 = v262;
            if (v70 == 2)
              goto LABEL_284;
            goto LABEL_227;
          }
          if (v70 <= 5)
          {
            v118 = v262.f64[1];
            if (v70 == 5)
            {
              *((double *)&v255 + 1) = v262.f64[1] * *(double *)(v55 + 32) + *(double *)(v55 + 40);
              v70 = 5;
              goto LABEL_229;
            }
            goto LABEL_203;
          }
          *((double *)&v255 + 1) = *(double *)(v55 + 40) + *(double *)(v55 + 32) * v262.f64[1];
          if (v70 == 6)
            v70 = 6;
          else
            v70 = 7;
LABEL_229:
          if (v70 > 3)
          {
            if (v70 > 5)
            {
              if (v70 == 6)
              {
                v155 = vaddq_f64(vdivq_f64(v256, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v257, 0)), *(float64x2_t *)(v55 + 192));
                v156 = sqrt(vaddvq_f64(vmulq_f64(v155, v155)));
                v262 = vaddq_f64(*(float64x2_t *)(v55 + 208), vmulq_n_f64(v155, v156* (v156* (*(double *)(v55 + 168) + v156 * (*(double *)(v55 + 176) + *(double *)(v55 + 184) * v156)))+ 1.0));
                v149 = *(_DWORD *)(v55 + 992);
                if (v149 == -1)
                  goto LABEL_247;
                goto LABEL_316;
              }
              v180 = sub_20EB31FFC(v55, &v262, &v256);
              goto LABEL_314;
            }
            if (v70 != 5)
            {
              _V0.D[1] = v256.f64[1];
              _D1 = v256.f64[1];
              __asm { FMLA            D16, D1, V0.D[1] }
              v161 = sqrt(_D16);
              v162 = fabs(v257);
              v163 = fabs(v161);
              v164 = v162 / v163;
              if (v162 >= v163)
                v164 = v163 / v162;
              v165 = (v163 - v162) / (v162 + v163);
              if (v162 >= v163)
                v165 = -v165;
              if (v164 > 0.414213562)
                v166 = 1;
              else
                v166 = 2;
              if (v164 > 0.414213562)
                v167 = -1;
              else
                v167 = 1;
              if (v164 <= 0.414213562)
                v165 = v164;
              if (_D16 >= 0.00000001)
              {
                if (v162 < v163)
                  v167 = -v167;
                else
                  v166 = v164 > 0.414213562;
                v205 = v161 == INFINITY && v162 == INFINITY;
                v206 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v165 * v165), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v165 * v165), (float64x2_t)xmmword_210315370), v165 * v165 * (v165 * v165))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v165 * v165), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v165 * v165), (float64x2_t)xmmword_210315380), v165 * v165 * (v165 * v165))),
                           v165 * v165 * (v165 * v165) * (v165 * v165 * (v165 * v165))));
                v207 = v165 + v165 * vdivq_f64(v206, (float64x2_t)vdupq_laneq_s64((int64x2_t)v206, 1)).f64[0];
                if (v205)
                  v207 = 0.785398163;
                if (v161 == 0.0 && v257 == 0.0)
                  v209 = 0.0;
                else
                  v209 = v207;
                if (v257 < 0.0)
                {
                  v166 = 4 - v166;
                  v167 = -v167;
                }
                if (v161 < 0.0)
                  v166 = -v166;
                v210 = (double)v166;
                if (v161 >= 0.0)
                  v211 = v167;
                else
                  v211 = -v167;
                v212 = v210 * 3.061617e-17 + v210 * 0.785398163 + v209 * (double)v211;
                v213 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v55 + 168), *(int64x2_t *)(v55 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v55 + 168), *(int64x2_t *)(v55 + 184)), v212 * v212)), v212 * v212);
                v168 = 1.0 / v161 * (v212 + v212 * (v213.f64[0] + vmuld_lane_f64(v212 * v212 * (v212 * v212), v213, 1)));
              }
              else
              {
                v168 = 1.0 / v257;
              }
              v262 = vmulq_n_f64(v256, v168);
              v200 = v262.f64[1];
              goto LABEL_351;
            }
            v150 = v256.f64[0] * v256.f64[0] + v256.f64[1] * v256.f64[1];
            if (v150 >= 0.00000001)
            {
              v201 = sqrt(v150);
              if (v201 <= v257)
              {
                v243 = v201 / v257 * 0.785398163
                     - v201 / v257 * (v201 / v257 + -1.0) * (v201 / v257 * 0.0663008339 + 0.244711287);
              }
              else
              {
                if (v201 <= -v257)
                {
                  v203 = v201 / v257 * 0.785398163
                       - v201 / v257 * (-1.0 - v201 / v257) * (v201 / v257 * -0.0663008339 + 0.244711287);
                  v204 = 3.14159265;
                }
                else
                {
                  v202 = fabs(v257 / v201);
                  v203 = v257 / v201 * (v202 + -1.0) * (v202 * 0.0663008339 + 0.244711287) + v257 / v201 * -0.785398163;
                  v204 = 1.57079633;
                }
                v243 = v203 + v204;
              }
              v246 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v55 + 168), *(int64x2_t *)(v55 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v55 + 168), *(int64x2_t *)(v55 + 184)), v243 * v243)), v243 * v243);
              v247 = (v243 + v243 * (v246.f64[0] + vmuld_lane_f64(v243 * v243 * (v243 * v243), v246, 1))) / v201;
              v262.f64[0] = v256.f64[0] * v247;
              v262.f64[1] = v256.f64[1] * v247;
              v149 = *(_DWORD *)(v55 + 992);
              if (v149 != -1)
                goto LABEL_316;
              goto LABEL_247;
            }
            if (v257 != 0.0)
            {
              v262.f64[0] = v256.f64[0] * (1.0 / v257);
              v262.f64[1] = v256.f64[1] * (1.0 / v257);
              v149 = *(_DWORD *)(v55 + 992);
              if (v149 != -1)
                goto LABEL_316;
LABEL_247:
              if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
              {
                abort();
              }
              v149 = *(_DWORD *)(v55 + 992);
              if (v149 <= 7)
                goto LABEL_317;
LABEL_249:
              if (v149 <= 9)
              {
                v157 = v262.f64[1];
LABEL_400:
                v214 = *(double *)(v55 + 40);
                v215 = v157 * *(double *)(v55 + 32);
                goto LABEL_401;
              }
LABEL_324:
              *((double *)&v255 + 1) = *(double *)(v55 + 40) + *(double *)(v55 + 32) * v262.f64[1];
              goto LABEL_402;
            }
          }
          else if (v70 > 1)
          {
            if (v70 != 2)
            {
              _V0.D[1] = v256.f64[1];
              _D1 = v256.f64[1];
              __asm { FMLA            D16, D1, V0.D[1] }
              v172 = sqrt(_D16);
              v173 = fabs(v257);
              v174 = fabs(v172);
              v175 = v173 / v174;
              if (v173 >= v174)
                v175 = v174 / v173;
              v176 = (v174 - v173) / (v173 + v174);
              if (v173 >= v174)
                v176 = -v176;
              if (v175 > 0.414213562)
                v177 = 1;
              else
                v177 = 2;
              if (v175 > 0.414213562)
                v178 = -1;
              else
                v178 = 1;
              if (v175 <= 0.414213562)
                v176 = v175;
              if (_D16 >= 0.00000001)
              {
                if (v173 < v174)
                  v178 = -v178;
                else
                  v177 = v175 > 0.414213562;
                v216 = v172 == INFINITY && v173 == INFINITY;
                v217 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v176 * v176), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v176 * v176), (float64x2_t)xmmword_210315370), v176 * v176 * (v176 * v176))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v176 * v176), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v176 * v176), (float64x2_t)xmmword_210315380), v176 * v176 * (v176 * v176))),
                           v176 * v176 * (v176 * v176) * (v176 * v176 * (v176 * v176))));
                v218 = v176 + v176 * vdivq_f64(v217, (float64x2_t)vdupq_laneq_s64((int64x2_t)v217, 1)).f64[0];
                if (v216)
                  v218 = 0.785398163;
                if (v172 == 0.0 && v257 == 0.0)
                  v220 = 0.0;
                else
                  v220 = v218;
                if (v257 < 0.0)
                {
                  v177 = 4 - v177;
                  v178 = -v178;
                }
                if (v172 < 0.0)
                  v177 = -v177;
                v221 = (double)v177;
                if (v172 >= 0.0)
                  v222 = v178;
                else
                  v222 = -v178;
                v223 = v221 * 3.061617e-17 + v221 * 0.785398163 + v220 * (double)v222;
                v224 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v55 + 168), *(int64x2_t *)(v55 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v55 + 168), *(int64x2_t *)(v55 + 184)), v223 * v223)), v223 * v223);
                v179 = 1.0 / v172 * (v223 + v223 * (v224.f64[0] + vmuld_lane_f64(v223 * v223 * (v223 * v223), v224, 1)));
              }
              else
              {
                v179 = 1.0 / v257;
              }
              v154 = vmulq_n_f64(v256, v179);
              goto LABEL_375;
            }
            if (*(_DWORD *)(v55 + 212))
            {
              if (v257 >= 0.00000001)
              {
                _Q2 = vmulq_n_f64(v256, 1.0 / v257);
                _D0 = vmuld_lane_f64(1.0 / v257, v256, 1);
                __asm { FMLA            D1, D0, V2.D[1] }
                v154 = vaddq_f64(vaddq_f64(vmulq_f64((float64x2_t)vextq_s8(*(int8x16_t *)(v55 + 192), *(int8x16_t *)(v55 + 192), 8uLL), vaddq_f64((float64x2_t)vdupq_lane_s64(_D1, 0), vmulq_f64(_Q2, vaddq_f64(_Q2, _Q2)))), vmulq_laneq_f64(vmulq_n_f64(vaddq_f64(*(float64x2_t *)(v55 + 192), *(float64x2_t *)(v55 + 192)), _Q2.f64[0]), _Q2, 1)), vmulq_n_f64(_Q2, *(double *)(v55 + 168) * *(double *)&_D1+ 1.0+ *(double *)&_D1 * (*(double *)(v55 + 176) * *(double *)&_D1)+ *(double *)&_D1 * (*(double *)&_D1 * (*(double *)(v55 + 184) * *(double *)&_D1))));
LABEL_375:
                v262 = v154;
                goto LABEL_376;
              }
            }
            else if (v257 >= 0.00000001)
            {
              _Q2 = vmulq_n_f64(v256, 1.0 / v257);
              _D0 = vmuld_lane_f64(1.0 / v257, v256, 1);
              __asm { FMLA            D1, D0, V2.D[1] }
              v154 = vmulq_n_f64(_Q2, *(double *)(v55 + 168) * _D1+ 1.0+ _D1 * _D1 * (*(double *)(v55 + 176) + *(double *)(v55 + 184) * _D1));
              goto LABEL_375;
            }
          }
          else
          {
            if (!v70)
            {
              sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
              abort();
            }
            if (v257 >= 0.00000001)
            {
              v262 = vmulq_n_f64(v256, 1.0 / v257);
              v149 = *(_DWORD *)(v55 + 992);
              if (v149 == -1)
                goto LABEL_247;
LABEL_316:
              if (v149 > 7)
                goto LABEL_249;
LABEL_317:
              if (v149 <= 3)
              {
                if (v149 <= 1)
                {
                  if (!v149)
                  {
                    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
                    abort();
                  }
                  *((double *)&v255 + 1) = v262.f64[1] * *(double *)(v55 + 32) + *(double *)(v55 + 40);
                  goto LABEL_402;
                }
                v154 = v262;
LABEL_376:
                v214 = *(double *)(v55 + 40);
                v215 = vmuld_lane_f64(*(double *)(v55 + 32), v154, 1);
LABEL_401:
                *((double *)&v255 + 1) = v215 + v214;
LABEL_402:
                v233 = v68 & v12;
                goto LABEL_407;
              }
              if (v149 <= 5)
              {
                v200 = v262.f64[1];
LABEL_351:
                v214 = *(double *)(v55 + 40);
                v215 = v200 * *(double *)(v55 + 32);
                goto LABEL_401;
              }
              goto LABEL_324;
            }
          }
LABEL_406:
          v233 = 0;
LABEL_407:
          _V2.D[1] = *((_QWORD *)&v255 + 1);
          _D0 = *(_QWORD *)(v47 + 40);
          __asm { FMLA            D1, D0, V2.D[1] }
          v241 = (_D1 - *(double *)(v47 + 48)) * (_D1 - *(double *)(v47 + 48));
          if (v241 <= v56 * a8 * (v56 * a8))
            v12 = v233;
          else
            v12 = 0;
          v242 = *a5;
          if (v241 < v50)
            ++v242;
          *a5 = v242;
          if ((v49 | v12) != 1)
          {
            v12 = 0;
            *(_BYTE *)(v252 + 12) = 0;
            *(_BYTE *)(a7 + 12) = 0;
            return v12;
          }
          v47 += 152;
          if (v47 == v48)
            goto LABEL_424;
        }
      }
    }
    abort();
  }
  v12 = 0;
  *(_BYTE *)(a6 + 12) = 0;
  *(_BYTE *)(a7 + 12) = 0;
  return v12;
}

_QWORD *sub_20FB9CDC0(_QWORD *result)
{
  _BYTE *v1;
  uint64_t (***v2)();
  uint64_t v3;
  uint64_t (***v4)();
  uint64_t v5;
  uint64_t (***v6)();
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  _QWORD v11[3];
  _QWORD *v12;
  _QWORD v13[3];
  _QWORD *v14;
  uint64_t (**v15)();
  void *v16;
  uint64_t (***v17)();
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  *((_DWORD *)result + 1965) = 1;
  *((_BYTE *)result + 43296) = 1;
  v1 = result + 7771;
  switch(*((_DWORD *)result + 518))
  {
    case 0:
      *v1 = 0;
      return result;
    case 1:
      v13[0] = &off_24CA04830;
      v13[1] = sub_20FB9EB04;
      v14 = v13;
      v17 = &v15;
      v15 = &off_24CA04830;
      v16 = sub_20FB9EB04;
      sub_20FBA9474(&v15, result + 7772);
      v2 = v17;
      if (v17 == &v15)
      {
        v3 = 4;
        v2 = &v15;
      }
      else
      {
        if (!v17)
        {
LABEL_14:
          *v1 = 1;
          result = v14;
          if (v14 != v13)
            goto LABEL_23;
          v8 = 4;
          result = v13;
          return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
        }
        v3 = 5;
      }
      (*v2)[v3]();
      goto LABEL_14;
    case 2:
      v11[0] = &off_24CA04830;
      v11[1] = sub_20FBA3C5C;
      v12 = v11;
      v17 = &v15;
      v15 = &off_24CA04830;
      v16 = sub_20FBA3C5C;
      sub_20FBA9474(&v15, result + 7772);
      v4 = v17;
      if (v17 == &v15)
      {
        v5 = 4;
        v4 = &v15;
      }
      else
      {
        if (!v17)
          goto LABEL_18;
        v5 = 5;
      }
      (*v4)[v5]();
LABEL_18:
      *v1 = 1;
      result = v12;
      if (v12 != v11)
        goto LABEL_23;
      v8 = 4;
      result = v11;
      return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
    case 3:
      v9[0] = &off_24CA04830;
      v9[1] = sub_20FBA8CEC;
      v10 = v9;
      v17 = &v15;
      v15 = &off_24CA04830;
      v16 = sub_20FBA8CEC;
      sub_20FBA9474(&v15, result + 7772);
      v6 = v17;
      if (v17 == &v15)
      {
        v7 = 4;
        v6 = &v15;
      }
      else
      {
        if (!v17)
          goto LABEL_22;
        v7 = 5;
      }
      (*v6)[v7]();
LABEL_22:
      *v1 = 1;
      result = v10;
      if (v10 == v9)
      {
        v8 = 4;
        result = v9;
      }
      else
      {
LABEL_23:
        if (!result)
          return result;
        v8 = 5;
      }
      return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
    default:
      return result;
  }
}

void sub_20FB9CFFC(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6)
{
  _QWORD *v6;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int *v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  _QWORD *v45;
  char v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unsigned int *v53;
  unsigned int *v54;
  unint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  _QWORD *v62;
  char v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unsigned int *v70;
  unsigned int *i;
  unsigned int *v72;
  unsigned int *j;
  unsigned int *v74;
  unsigned int *k;
  unsigned int *v76;
  unsigned int *m;
  unsigned int *v78;
  unsigned int *n;
  unsigned int *v80;
  unsigned int *v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t *v84;
  unint64_t *v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t *v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t *v97;
  unint64_t *v98;
  unint64_t v99;
  char *v100;
  char *v101;
  unint64_t v102;
  unint64_t v103;
  unsigned int *v104;
  char *v105;
  unsigned int v106;
  unint64_t v107;
  unint64_t *v108;
  unint64_t *v109;
  unint64_t *v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  unint64_t v114;
  unint64_t *v115;
  unint64_t *v116;
  unint64_t v117;
  __int128 v118;
  __int128 v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  __int128 v123;
  __int128 v124;
  unint64_t v125;
  __int128 v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  char v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  int v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  unint64_t v147;
  unsigned int *v148;
  unint64_t v149;
  char *v150;
  unint64_t *v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  unint64_t *v160;
  unint64_t v161;
  __int128 v162;
  __int128 v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  char *v170;
  __int128 v171;
  __int128 v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t *v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t *v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  unint64_t v182;
  unint64_t *v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  unint64_t v187;
  unint64_t *v188;
  char *v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  unsigned int *v205;
  unint64_t v206;
  int64_t v207;
  int64x2_t *v208;
  _QWORD *v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v213;
  _BYTE v214[40];
  __int128 v215;
  _OWORD v216[2];
  __int128 v217;
  __int128 v218;
  _OWORD v219[3];
  uint64_t v220;
  uint64_t v221;
  std::__shared_weak_count *v222;
  uint64_t v223;
  std::__shared_weak_count *v224;
  uint64_t v225;
  std::__shared_weak_count *v226;
  __int128 v227[2];
  uint64_t v228;
  std::__shared_weak_count *v229;
  uint64_t v230;
  std::__shared_weak_count *v231;
  __int128 v232;
  __int128 v233;
  unint64_t *v234;
  uint64_t v235;
  std::__shared_weak_count *v236;
  unint64_t v237;
  __int128 v238;
  unint64_t v239;
  __int128 v240;
  __int128 v241;
  char v242;
  uint64_t v243;
  std::__shared_weak_count *v244;
  char v245;
  __int128 v246;
  unint64_t *v247;
  char *v248;
  _QWORD *v249;
  unint64_t v250;
  char v251;
  __int128 v252;
  unint64_t v253;
  __int128 v254;
  unint64_t v255;
  __int128 v256;

  v6 = *(_QWORD **)(a1 + 8);
  if (!*(_BYTE *)(a1 + 2146))
  {
    v15 = (_QWORD *)v6[6];
    v16 = v6 + 7;
    if (v15 == v6 + 7)
      goto LABEL_48;
    v17 = a1 + 5168;
    v18 = a1 + 7824;
    while (1)
    {
      v19 = *(_QWORD *)(a1 + 6264);
      if (v19 == *(_QWORD *)(a1 + 6256))
        LODWORD(v20) = 0;
      else
        v20 = *(_QWORD *)(v19 - 272) + 1;
      v21 = *((_DWORD *)v15 + 10);
      *(_OWORD *)&v214[24] = 0uLL;
      v216[0] = 0uLL;
      v217 = 0uLL;
      v213 = v20;
      *(_OWORD *)&v214[8] = 0x3FF0000000000000uLL;
      v215 = 0x3FF0000000000000uLL;
      v216[1] = 0x3FF0000000000000uLL;
      v218 = 0uLL;
      LODWORD(v227[0]) = v21;
      v232 = 0uLL;
      if ((sub_20FBAFAA8(v17, (__int128 *)&v213, v227, 0, 0, a6) & 1) != 0)
      {
        *(_BYTE *)(v18 + 4) = 0;
        *(_DWORD *)v18 = 0;
        v22 = (std::__shared_weak_count *)*((_QWORD *)&v218 + 1);
        if (!*((_QWORD *)&v218 + 1))
          goto LABEL_28;
      }
      else
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 2057, (uint64_t)"ret.second", 10, (uint64_t)"Failed to add Pose prior factor", 31, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v22 = (std::__shared_weak_count *)*((_QWORD *)&v218 + 1);
        if (!*((_QWORD *)&v218 + 1))
        {
LABEL_28:
          v25 = (_QWORD *)v15[1];
          if (!v25)
            goto LABEL_32;
          goto LABEL_29;
        }
      }
      p_shared_owners = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldaxr(p_shared_owners);
      while (__stlxr(v24 - 1, p_shared_owners));
      if (v24)
        goto LABEL_28;
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
      v25 = (_QWORD *)v15[1];
      if (!v25)
      {
        do
        {
LABEL_32:
          v26 = (_QWORD *)v15[2];
          v14 = *v26 == (_QWORD)v15;
          v15 = v26;
        }
        while (!v14);
        goto LABEL_16;
      }
      do
      {
LABEL_29:
        v26 = v25;
        v25 = (_QWORD *)*v25;
      }
      while (v25);
LABEL_16:
      v15 = v26;
      if (v26 == v16)
        goto LABEL_48;
    }
  }
  if (v6[8] < (unint64_t)(a2 + 1))
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 2028, (uint64_t)"this->viobadata_ref_.state_set->size() >= 1 + kept_idx", 54, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_101;
    }
    v6 = *(_QWORD **)(a1 + 8);
  }
  v9 = (_QWORD *)v6[6];
  if (a2)
  {
    v10 = a2;
    do
    {
      v12 = (_QWORD *)v9[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v9[2];
          v14 = *v13 == (_QWORD)v9;
          v9 = v13;
        }
        while (!v14);
      }
      v9 = v13;
    }
    while (v10-- > 1);
  }
  else
  {
    v13 = (_QWORD *)v6[6];
  }
  v27 = *((unsigned int *)v13 + 10);
  v220 = 0;
  v221 = 0;
  v218 = 0u;
  memset(v219, 0, sizeof(v219));
  v217 = 0u;
  v215 = 0u;
  memset(v216, 0, sizeof(v216));
  memset(&v214[8], 0, 32);
  v227[0] = 0uLL;
  v213 = v27;
  v222 = 0;
  *(_QWORD *)&v246 = v27 | (v27 << 32);
  v232 = 0uLL;
  if ((sub_20FBAE870(a1 + 5168, &v213, &v246, 0, 0, a6) & 1) != 0)
  {
    *(_BYTE *)(a1 + 7828) = 0;
    *(_DWORD *)(a1 + 7824) = 0;
  }
  v28 = v222;
  if (v222)
  {
    v29 = (unint64_t *)&v222->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = (std::__shared_weak_count *)*((_QWORD *)&v227[0] + 1);
  if (*((_QWORD *)&v227[0] + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v227[0] + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
LABEL_48:
  v34 = a1;
  v35 = a1 + 5168;
  v36 = *(unsigned int **)(a1 + 5368);
  v37 = *(unsigned int **)(a1 + 5376);
  if (v36 != v37)
  {
    while (1)
    {
      if (*(_BYTE *)(*((_QWORD *)v36 + 1) + 20))
      {
        v38 = *v36;
        v39 = *(_QWORD **)(v34 + 6280);
        v40 = *(_QWORD **)(v34 + 6288);
        if (v40 == v39)
          break;
        v41 = 0xAF8AF8AF8AF8AF8BLL * (v40 - v39);
        do
        {
          v42 = v41 >> 1;
          v43 = &v39[35 * (v41 >> 1)];
          v44 = *v43;
          v45 = v43 + 35;
          v41 += ~(v41 >> 1);
          if (v44 < v38)
            v39 = v45;
          else
            v41 = v42;
        }
        while (v41);
        if (v40 == v39 || *v39 != v38)
          break;
      }
LABEL_50:
      v36 += 4;
      if (v36 == v37)
        goto LABEL_75;
    }
    *(_OWORD *)&v214[24] = 0uLL;
    v216[0] = 0uLL;
    v217 = 0uLL;
    v227[0] = 0uLL;
    v213 = v38;
    *(_OWORD *)&v214[8] = 0x3FF0000000000000uLL;
    v215 = 0x3FF0000000000000uLL;
    v216[1] = 0x3FF0000000000000uLL;
    v218 = 0uLL;
    LODWORD(v246) = v38;
    v232 = 0uLL;
    v46 = sub_20FB8FE18(v35, (__int128 *)&v213, &v246, 0, 0, a6);
    if ((v46 & 1) != 0)
    {
      *(_BYTE *)(a1 + 7828) = 0;
      *(_DWORD *)(a1 + 7824) = 0;
    }
    v47 = (std::__shared_weak_count *)*((_QWORD *)&v218 + 1);
    if (!*((_QWORD *)&v218 + 1))
      goto LABEL_66;
    v48 = (unint64_t *)(*((_QWORD *)&v218 + 1) + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
      v50 = (std::__shared_weak_count *)*((_QWORD *)&v227[0] + 1);
      if (!*((_QWORD *)&v227[0] + 1))
        goto LABEL_72;
    }
    else
    {
LABEL_66:
      v50 = (std::__shared_weak_count *)*((_QWORD *)&v227[0] + 1);
      if (!*((_QWORD *)&v227[0] + 1))
        goto LABEL_72;
    }
    v51 = (unint64_t *)&v50->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
LABEL_72:
    v34 = a1;
    if ((v46 & 1) == 0
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 2089, (uint64_t)"result", 6, (uint64_t)"Failed to add the factor.", 25, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_101;
    }
    goto LABEL_50;
  }
LABEL_75:
  v53 = *(unsigned int **)(v34 + 5464);
  v54 = *(unsigned int **)(v34 + 5472);
  if (v53 != v54)
  {
    v211 = v34 + 7824;
    while (1)
    {
      if (*(_BYTE *)(*((_QWORD *)v53 + 1) + 20))
      {
        v55 = *v53;
        v56 = *(_QWORD **)(v34 + 6304);
        v57 = *(_QWORD **)(v34 + 6312);
        if (v57 == v56)
          break;
        v58 = 0xAF8AF8AF8AF8AF8BLL * (v57 - v56);
        do
        {
          v59 = v58 >> 1;
          v60 = &v56[35 * (v58 >> 1)];
          v61 = *v60;
          v62 = v60 + 35;
          v58 += ~(v58 >> 1);
          if (v61 < v55)
            v56 = v62;
          else
            v58 = v59;
        }
        while (v58);
        if (v57 == v56 || *v56 != v55)
          break;
      }
LABEL_77:
      v53 += 4;
      if (v53 == v54)
        goto LABEL_102;
    }
    *(_OWORD *)&v214[24] = 0uLL;
    v216[0] = 0uLL;
    v217 = 0uLL;
    v227[0] = 0uLL;
    v213 = v55;
    *(_OWORD *)&v214[8] = 0x3FF0000000000000uLL;
    v215 = 0x3FF0000000000000uLL;
    v216[1] = 0x3FF0000000000000uLL;
    v218 = 0uLL;
    LODWORD(v246) = v55;
    v232 = 0uLL;
    v63 = sub_20FBB0864(v35, (__int128 *)&v213, &v246, 0, 0, a6);
    if ((v63 & 1) != 0)
    {
      *(_BYTE *)(v211 + 4) = 0;
      *(_DWORD *)v211 = 0;
    }
    v64 = (std::__shared_weak_count *)*((_QWORD *)&v218 + 1);
    if (!*((_QWORD *)&v218 + 1))
      goto LABEL_93;
    v65 = (unint64_t *)(*((_QWORD *)&v218 + 1) + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
      v67 = (std::__shared_weak_count *)*((_QWORD *)&v227[0] + 1);
      if (!*((_QWORD *)&v227[0] + 1))
        goto LABEL_99;
    }
    else
    {
LABEL_93:
      v67 = (std::__shared_weak_count *)*((_QWORD *)&v227[0] + 1);
      if (!*((_QWORD *)&v227[0] + 1))
        goto LABEL_99;
    }
    v68 = (unint64_t *)&v67->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
LABEL_99:
    v34 = a1;
    if ((v63 & 1) == 0
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 2119, (uint64_t)"result", 6, (uint64_t)"Failed to add the factor.", 25, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_101;
    }
    goto LABEL_77;
  }
LABEL_102:
  v70 = *(unsigned int **)(v34 + 5656);
  for (i = *(unsigned int **)(v34 + 5664); v70 != i; v70 += 4)
  {
    if (*(_BYTE *)(*((_QWORD *)v70 + 1) + 20))
    {
      v213 = *v70;
      *(_QWORD *)&v214[8] = 0;
      v214[16] = 0;
      v214[24] = 0;
      LODWORD(v227[0]) = v213;
      v232 = 0uLL;
      if ((sub_20FBB1620(v35, &v213, (unsigned int *)v227, 0, 0) & 1) != 0)
      {
        *(_BYTE *)(v34 + 7828) = 0;
        *(_DWORD *)(v34 + 7824) = 0;
      }
    }
  }
  v72 = *(unsigned int **)(v34 + 5752);
  for (j = *(unsigned int **)(v34 + 5760); v72 != j; v72 += 4)
  {
    if (*(_BYTE *)(*((_QWORD *)v72 + 1) + 20))
    {
      v213 = *v72;
      LOBYTE(v215) = 0;
      LOBYTE(v216[1]) = 0;
      LODWORD(v227[0]) = v213;
      v232 = 0uLL;
      if ((sub_20FB86290(v35, (__int128 *)&v213, (unsigned int *)v227, 0, 0) & 1) != 0)
      {
        *(_BYTE *)(v34 + 7828) = 0;
        *(_DWORD *)(v34 + 7824) = 0;
      }
    }
  }
  v74 = *(unsigned int **)(v34 + 5848);
  for (k = *(unsigned int **)(v34 + 5856); v74 != k; v74 += 4)
  {
    if (*(_BYTE *)(*((_QWORD *)v74 + 1) + 20))
    {
      v213 = *v74;
      LOBYTE(v215) = 0;
      LOBYTE(v216[1]) = 0;
      LODWORD(v227[0]) = v213;
      v232 = 0uLL;
      if ((sub_20FBB2014(v35, (__int128 *)&v213, (unsigned int *)v227, 0, 0) & 1) != 0)
      {
        *(_BYTE *)(v34 + 7828) = 0;
        *(_DWORD *)(v34 + 7824) = 0;
      }
    }
  }
  v76 = *(unsigned int **)(v34 + 5944);
  for (m = *(unsigned int **)(v34 + 5952); v76 != m; v76 += 4)
  {
    if (*(_BYTE *)(*((_QWORD *)v76 + 1) + 20))
    {
      v213 = *v76;
      v214[32] = 0;
      LOBYTE(v216[0]) = 0;
      LODWORD(v246) = v213;
      v227[0] = 0uLL;
      v232 = 0uLL;
      if ((sub_20FBB2CF8(v35, (__int128 *)&v213, (unsigned int *)&v246, 0, 0) & 1) != 0)
      {
        *(_BYTE *)(v34 + 7828) = 0;
        *(_DWORD *)(v34 + 7824) = 0;
      }
    }
  }
  v78 = *(unsigned int **)(v34 + 6040);
  for (n = *(unsigned int **)(v34 + 6048); v78 != n; v78 += 4)
  {
    if (*(_BYTE *)(*((_QWORD *)v78 + 1) + 20))
    {
      v213 = *v78;
      v214[32] = 0;
      LOBYTE(v216[0]) = 0;
      LODWORD(v227[0]) = v213;
      v232 = 0uLL;
      if ((sub_20FBB3AE0(v35, (__int128 *)&v213, (unsigned int *)v227, 0, 0) & 1) != 0)
      {
        *(_BYTE *)(v34 + 7828) = 0;
        *(_DWORD *)(v34 + 7824) = 0;
      }
    }
  }
  v80 = *(unsigned int **)(v34 + 5560);
  v81 = *(unsigned int **)(v34 + 5568);
  if (v80 != v81)
  {
    v208 = (int64x2_t *)(v34 + 6744);
    v210 = v34 + 7824;
    v209 = (_QWORD *)(v34 + 6344);
    do
    {
      v82 = *((_QWORD *)v80 + 1);
      if ((*(_BYTE *)(v82 + 4) & 6) != 0 || !*(_BYTE *)(v82 + 20))
        goto LABEL_134;
      v83 = *v80;
      v84 = *(unint64_t **)(v34 + 6328);
      v85 = *(unint64_t **)(v34 + 6336);
      v86 = (char *)v85 - (char *)v84;
      if (v85 == v84)
      {
        v226 = 0;
        v225 = 0;
        *(_QWORD *)&v227[0] = v83;
        v224 = 0;
        v223 = 0;
        v94 = v84;
        v231 = 0;
        v230 = 0;
      }
      else
      {
        v87 = 0xCCCCCCCCCCCCCCCDLL * (v86 >> 5);
        v88 = *(unint64_t **)(v34 + 6328);
        v89 = v87;
        do
        {
          v90 = v89 >> 1;
          v91 = &v88[20 * (v89 >> 1)];
          v93 = *v91;
          v92 = v91 + 20;
          v89 += ~(v89 >> 1);
          if (v93 < v83)
            v88 = v92;
          else
            v89 = v90;
        }
        while (v89);
        if (v85 != v88 && *v88 == v83)
          goto LABEL_134;
        v226 = 0;
        v225 = 0;
        *(_QWORD *)&v227[0] = v83;
        v228 = 0;
        v229 = 0;
        v224 = 0;
        v223 = 0;
        v231 = 0;
        v230 = 0;
        v94 = v85;
        if (*(v85 - 20) >= v83)
        {
          v95 = v84;
          do
          {
            v96 = v87 >> 1;
            v97 = &v95[20 * (v87 >> 1)];
            v99 = *v97;
            v98 = v97 + 20;
            v87 += ~(v87 >> 1);
            if (v99 < v83)
              v95 = v98;
            else
              v87 = v96;
          }
          while (v87);
          v94 = v85;
          if (v95 != v85)
          {
            v94 = v95;
            if (*v95 == v83)
              goto LABEL_194;
          }
        }
      }
      v232 = v227[0];
      v235 = 0;
      v236 = 0;
      v228 = 0;
      v229 = 0;
      v243 = 0;
      v244 = 0;
      v237 = 0;
      *((_QWORD *)&v241 + 1) = 0xBFF0000000000000;
      v242 = 0;
      v245 = 0;
      v100 = *(char **)(v34 + 5560);
      v101 = *(char **)(v34 + 5568);
      if (v101 == v100)
        goto LABEL_184;
      v102 = (v101 - v100) >> 4;
      do
      {
        v103 = v102 >> 1;
        v104 = (unsigned int *)&v100[16 * (v102 >> 1)];
        v106 = *v104;
        v105 = (char *)(v104 + 4);
        v102 += ~(v102 >> 1);
        if (v106 < v83)
          v100 = v105;
        else
          v102 = v103;
      }
      while (v102);
      if (v100 == v101 || *(_DWORD *)v100 != (_DWORD)v83)
        goto LABEL_184;
      v237 = *((_QWORD *)v100 + 1);
      v107 = v237;
      ++*(_DWORD *)(*((_QWORD *)v100 + 1) + 8);
      if (!*(_BYTE *)(v107 + 20))
      {
        --*(_DWORD *)(v107 + 8);
        v237 = 0;
LABEL_184:
        v130 = 1;
        v131 = v236;
        if (v236)
          goto LABEL_185;
        goto LABEL_189;
      }
      *(_OWORD *)v214 = v232;
      *(_OWORD *)&v214[16] = v233;
      *(_QWORD *)&v214[32] = v234;
      v215 = 0uLL;
      v235 = 0;
      v236 = 0;
      v213 = v83;
      *(_QWORD *)&v216[0] = v107;
      *(_OWORD *)((char *)v216 + 8) = v238;
      *((_QWORD *)&v216[1] + 1) = v239;
      v218 = v241;
      v217 = v240;
      LOBYTE(v219[0]) = v242;
      memset((char *)v219 + 8, 0, 17);
      v243 = 0;
      v244 = 0;
      if (v85 != v94 && *v94 == v83)
        goto LABEL_280;
      v206 = v107;
      v207 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v94 - (char *)v84) >> 5);
      if ((unint64_t)v85 < *v209)
      {
        if (v94 == v85)
        {
          *v85 = v83;
          v160 = &v84[4 * (((char *)v94 - (char *)v84) >> 5)];
          *(_OWORD *)(v160 + 1) = *(_OWORD *)v214;
          v161 = *(_QWORD *)&v214[32];
          *(_OWORD *)(v160 + 3) = *(_OWORD *)&v214[16];
          v160[6] = 0;
          v160[7] = 0;
          v160[5] = v161;
          v215 = 0uLL;
          v160[8] = v107;
          v162 = *(_OWORD *)((char *)v216 + 8);
          v160[11] = *((_QWORD *)&v216[1] + 1);
          *(_OWORD *)(v160 + 9) = v162;
          v163 = v217;
          v160[14] = v218;
          *((_OWORD *)v160 + 6) = v163;
          v164 = *((_QWORD *)&v218 + 1);
          *((_BYTE *)v160 + 128) = v219[0];
          v160[15] = v164;
          v160[17] = 0;
          v160[18] = 0;
          *((_QWORD *)&v219[0] + 1) = 0;
          *(_QWORD *)&v219[1] = 0;
          *((_BYTE *)v160 + 152) = 0;
          *(_QWORD *)(v34 + 6336) = v85 + 20;
        }
        else
        {
          v205 = v81;
          v256 = v232;
          v246 = v233;
          v247 = v234;
          v215 = 0uLL;
          v254 = v238;
          v255 = v239;
          v253 = v241;
          v252 = v240;
          v251 = v242;
          v250 = *((_QWORD *)&v241 + 1);
          v108 = v85 - 20;
          v109 = v85;
          v110 = v85 - 20;
          *((_QWORD *)&v219[0] + 1) = 0;
          *(_QWORD *)&v219[1] = 0;
          if ((unint64_t)v85 >= 0xA0)
          {
            do
            {
              *v109 = *v110;
              *(_OWORD *)(v109 + 1) = *(_OWORD *)(v110 + 1);
              v111 = *(_OWORD *)(v110 + 3);
              v109[5] = v110[5];
              *(_OWORD *)(v109 + 3) = v111;
              *((_OWORD *)v109 + 3) = *((_OWORD *)v110 + 3);
              v110[6] = 0;
              v110[7] = 0;
              v109[8] = v110[8];
              v112 = *(_OWORD *)(v110 + 9);
              v109[11] = v110[11];
              *(_OWORD *)(v109 + 9) = v112;
              v113 = *((_OWORD *)v110 + 6);
              v109[14] = v110[14];
              *((_OWORD *)v109 + 6) = v113;
              v114 = v110[15];
              *((_BYTE *)v109 + 128) = *((_BYTE *)v110 + 128);
              v109[15] = v114;
              *(_OWORD *)(v109 + 17) = *(_OWORD *)(v110 + 17);
              v110[17] = 0;
              v110[18] = 0;
              *((_BYTE *)v109 + 152) = *((_BYTE *)v110 + 152);
              v109 += 20;
              v110 += 20;
            }
            while (v110 < v85);
          }
          *(_QWORD *)(v34 + 6336) = v109;
          if (v85 != v94 + 20)
          {
            v115 = v85 - 20;
            v116 = v85;
            do
            {
              v117 = *(v115 - 20);
              v115 -= 20;
              *(v116 - 20) = v117;
              v116 -= 20;
              *(_OWORD *)(v116 + 1) = *(_OWORD *)(v115 + 1);
              v118 = *(_OWORD *)(v115 + 3);
              v116[5] = v115[5];
              *(_OWORD *)(v116 + 3) = v118;
              v119 = *((_OWORD *)v115 + 3);
              v115[6] = 0;
              v115[7] = 0;
              v120 = (std::__shared_weak_count *)v116[7];
              *((_OWORD *)v116 + 3) = v119;
              if (v120)
              {
                v121 = (unint64_t *)&v120->__shared_owners_;
                do
                  v122 = __ldaxr(v121);
                while (__stlxr(v122 - 1, v121));
                if (!v122)
                {
                  ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
                  std::__shared_weak_count::__release_weak(v120);
                }
              }
              *(v85 - 12) = *(v108 - 12);
              v123 = *(_OWORD *)(v108 - 11);
              *(v85 - 9) = *(v108 - 9);
              *(_OWORD *)(v85 - 11) = v123;
              v124 = *((_OWORD *)v108 - 4);
              *(v85 - 6) = *(v108 - 6);
              *((_OWORD *)v85 - 4) = v124;
              v125 = *(v108 - 5);
              *((_BYTE *)v85 - 32) = *((_BYTE *)v108 - 32);
              *(v85 - 5) = v125;
              v126 = *(_OWORD *)(v108 - 3);
              *(v108 - 3) = 0;
              *(v108 - 2) = 0;
              v127 = (std::__shared_weak_count *)*(v85 - 2);
              *(_OWORD *)(v85 - 3) = v126;
              if (v127)
              {
                v128 = (unint64_t *)&v127->__shared_owners_;
                do
                  v129 = __ldaxr(v128);
                while (__stlxr(v129 - 1, v128));
                if (!v129)
                {
                  ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
                  std::__shared_weak_count::__release_weak(v127);
                }
              }
              *((_BYTE *)v85 - 8) = *((_BYTE *)v108 - 8);
              v85 = v116;
              v108 = v115;
            }
            while (v115 != v94);
          }
          *v94 = v83;
          v151 = &v84[4 * (((char *)v94 - (char *)v84) >> 5)];
          *(_OWORD *)(v151 + 1) = v256;
          *(_OWORD *)(v151 + 3) = v246;
          v152 = (std::__shared_weak_count *)v151[7];
          v151[5] = (unint64_t)v247;
          v151[6] = 0;
          v151[7] = 0;
          v81 = v205;
          if (v152)
          {
            v153 = (unint64_t *)&v152->__shared_owners_;
            do
              v154 = __ldaxr(v153);
            while (__stlxr(v154 - 1, v153));
            if (!v154)
            {
              ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
              std::__shared_weak_count::__release_weak(v152);
            }
          }
          v155 = &v84[20 * v207];
          v155[8] = v206;
          *(_OWORD *)(v155 + 9) = v254;
          v155[11] = v255;
          *((_OWORD *)v155 + 6) = v252;
          v156 = v250;
          v155[14] = v253;
          v155[15] = v156;
          *((_BYTE *)v155 + 128) = v251;
          v157 = (std::__shared_weak_count *)v155[18];
          v155[17] = 0;
          v155[18] = 0;
          v34 = a1;
          if (v157)
          {
            v158 = (unint64_t *)&v157->__shared_owners_;
            do
              v159 = __ldaxr(v158);
            while (__stlxr(v159 - 1, v158));
            if (!v159)
            {
              ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
              std::__shared_weak_count::__release_weak(v157);
            }
          }
          LOBYTE(v84[20 * v207 + 19]) = 0;
        }
        goto LABEL_275;
      }
      v147 = 0xCCCCCCCCCCCCCCCDLL * (v86 >> 5) + 1;
      if (v147 > 0x199999999999999)
        sub_20E867F44();
      v148 = v81;
      if (0x999999999999999ALL * ((uint64_t)(*v209 - (_QWORD)v84) >> 5) > v147)
        v147 = 0x999999999999999ALL * ((uint64_t)(*v209 - (_QWORD)v84) >> 5);
      if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*v209 - (_QWORD)v84) >> 5) >= 0xCCCCCCCCCCCCCCLL)
        v149 = 0x199999999999999;
      else
        v149 = v147;
      v249 = v209;
      if (v149)
      {
        if (v149 > 0x199999999999999)
          sub_20E877A38();
        v150 = (char *)operator new(160 * v149);
      }
      else
      {
        v150 = 0;
      }
      v165 = (uint64_t)&v150[32 * (((char *)v94 - (char *)v84) >> 5)];
      *(_QWORD *)&v246 = v150;
      *((_QWORD *)&v246 + 1) = v165;
      v247 = (unint64_t *)v165;
      v248 = &v150[160 * v149];
      if (v207 == v149)
      {
        v81 = v148;
        if ((char *)v94 - (char *)v84 < 1)
        {
          if (v84 == v94)
            v169 = 1;
          else
            v169 = 0x999999999999999ALL * (((char *)v94 - (char *)v84) >> 5);
          if (v169 > 0x199999999999999)
            sub_20E877A38();
          v170 = (char *)operator new(160 * v169);
          v165 = (uint64_t)&v170[160 * (v169 >> 2)];
          *(_QWORD *)&v246 = v170;
          *((_QWORD *)&v246 + 1) = v165;
          v248 = &v170[160 * v169];
          if (v150)
            operator delete(v150);
          v168 = v165;
        }
        else
        {
          v166 = v207 + 2;
          if (v207 >= -1)
            v166 = v207 + 1;
          v167 = v166 >> 1;
          v168 = sub_20F91EB0C((uint64_t)&v150[32 * (((char *)v94 - (char *)v84) >> 5)], (uint64_t)&v150[32 * (((char *)v94 - (char *)v84) >> 5)], v165 - 160 * (v166 >> 1));
          v165 = *((_QWORD *)&v246 + 1) - 160 * v167;
          *((_QWORD *)&v246 + 1) = v165;
          v83 = v213;
        }
      }
      else
      {
        v168 = (uint64_t)&v150[32 * (((char *)v94 - (char *)v84) >> 5)];
        v81 = v148;
      }
      *(_QWORD *)v168 = v83;
      *(_OWORD *)(v168 + 8) = *(_OWORD *)v214;
      *(_QWORD *)(v168 + 40) = *(_QWORD *)&v214[32];
      *(_OWORD *)(v168 + 24) = *(_OWORD *)&v214[16];
      *(_OWORD *)(v168 + 48) = v215;
      v215 = 0uLL;
      *(_QWORD *)(v168 + 64) = *(_QWORD *)&v216[0];
      v171 = *(_OWORD *)((char *)v216 + 8);
      *(_QWORD *)(v168 + 88) = *((_QWORD *)&v216[1] + 1);
      *(_OWORD *)(v168 + 72) = v171;
      v172 = v217;
      *(_QWORD *)(v168 + 112) = v218;
      *(_OWORD *)(v168 + 96) = v172;
      v173 = *((_QWORD *)&v218 + 1);
      *(_BYTE *)(v168 + 128) = v219[0];
      *(_QWORD *)(v168 + 120) = v173;
      *(_OWORD *)(v168 + 136) = *(_OWORD *)((char *)v219 + 8);
      *((_QWORD *)&v219[0] + 1) = 0;
      *(_QWORD *)&v219[1] = 0;
      *(_BYTE *)(v168 + 152) = BYTE8(v219[1]);
      v174 = v168 + 160;
      v247 = (unint64_t *)(v168 + 160);
      v34 = a1;
      v175 = *(unint64_t **)(a1 + 6328);
      if (v175 != v94)
      {
        v176 = 0;
        do
        {
          v177 = v165 + v176 * 8;
          v178 = &v94[v176];
          *(_QWORD *)(v177 - 160) = v94[v176 - 20];
          *(_OWORD *)(v177 - 152) = *(_OWORD *)&v94[v176 - 19];
          v179 = *(_OWORD *)&v94[v176 - 17];
          *(_QWORD *)(v177 - 120) = v94[v176 - 15];
          *(_OWORD *)(v177 - 136) = v179;
          *(_OWORD *)(v177 - 112) = *(_OWORD *)&v94[v176 - 14];
          *(v178 - 14) = 0;
          *(v178 - 13) = 0;
          *(_QWORD *)(v177 - 96) = v94[v176 - 12];
          v180 = *(_OWORD *)&v94[v176 - 11];
          *(_QWORD *)(v177 - 72) = v94[v176 - 9];
          *(_OWORD *)(v177 - 88) = v180;
          v181 = *(_OWORD *)&v94[v176 - 8];
          *(_QWORD *)(v177 - 48) = v94[v176 - 6];
          *(_OWORD *)(v177 - 64) = v181;
          v182 = v94[v176 - 5];
          *(_BYTE *)(v177 - 32) = v94[v176 - 4];
          *(_QWORD *)(v177 - 40) = v182;
          *(_OWORD *)(v177 - 24) = *(_OWORD *)&v94[v176 - 3];
          *(v178 - 3) = 0;
          *(v178 - 2) = 0;
          *(_BYTE *)(v177 - 8) = v94[v176 - 1];
          v176 -= 20;
        }
        while (&v94[v176] != v175);
        v174 = (uint64_t)v247;
        v165 += v176 * 8;
      }
      *((_QWORD *)&v246 + 1) = v165;
      v183 = *(unint64_t **)(a1 + 6336);
      if (v183 != v94)
      {
        do
        {
          *(_QWORD *)v174 = *v94;
          *(_OWORD *)(v174 + 8) = *(_OWORD *)(v94 + 1);
          v184 = *(_OWORD *)(v94 + 3);
          *(_QWORD *)(v174 + 40) = v94[5];
          *(_OWORD *)(v174 + 24) = v184;
          *(_OWORD *)(v174 + 48) = *((_OWORD *)v94 + 3);
          v94[6] = 0;
          v94[7] = 0;
          *(_QWORD *)(v174 + 64) = v94[8];
          v185 = *(_OWORD *)(v94 + 9);
          *(_QWORD *)(v174 + 88) = v94[11];
          *(_OWORD *)(v174 + 72) = v185;
          v186 = *((_OWORD *)v94 + 6);
          *(_QWORD *)(v174 + 112) = v94[14];
          *(_OWORD *)(v174 + 96) = v186;
          v187 = v94[15];
          *(_BYTE *)(v174 + 128) = *((_BYTE *)v94 + 128);
          *(_QWORD *)(v174 + 120) = v187;
          *(_OWORD *)(v174 + 136) = *(_OWORD *)(v94 + 17);
          v94[17] = 0;
          v94[18] = 0;
          *(_BYTE *)(v174 + 152) = *((_BYTE *)v94 + 152);
          v174 += 160;
          v94 += 20;
        }
        while (v94 != v183);
        v165 = *((_QWORD *)&v246 + 1);
        v94 = *(unint64_t **)(a1 + 6336);
      }
      v188 = *(unint64_t **)(a1 + 6328);
      *(_QWORD *)(a1 + 6328) = v165;
      *(_QWORD *)(a1 + 6336) = v174;
      v189 = *(char **)(a1 + 6344);
      *(_QWORD *)(a1 + 6344) = v248;
      v248 = v189;
      *(_QWORD *)&v246 = v188;
      *((_QWORD *)&v246 + 1) = v188;
      if (v94 == v188)
      {
        if (v94)
          goto LABEL_274;
        goto LABEL_275;
      }
      do
      {
        v247 = v94 - 20;
        v190 = (std::__shared_weak_count *)*(v94 - 2);
        if (!v190)
          goto LABEL_266;
        v191 = (unint64_t *)&v190->__shared_owners_;
        do
          v192 = __ldaxr(v191);
        while (__stlxr(v192 - 1, v191));
        if (!v192)
        {
          ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
          std::__shared_weak_count::__release_weak(v190);
          v193 = (std::__shared_weak_count *)*(v94 - 13);
          if (!v193)
            goto LABEL_261;
        }
        else
        {
LABEL_266:
          v193 = (std::__shared_weak_count *)*(v94 - 13);
          if (!v193)
            goto LABEL_261;
        }
        v194 = (unint64_t *)&v193->__shared_owners_;
        do
          v195 = __ldaxr(v194);
        while (__stlxr(v195 - 1, v194));
        if (!v195)
        {
          ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
          std::__shared_weak_count::__release_weak(v193);
        }
LABEL_261:
        v94 = v247;
      }
      while (v247 != v188);
      v94 = (unint64_t *)v246;
      if ((_QWORD)v246)
LABEL_274:
        operator delete(v94);
LABEL_275:
      v196 = *(std::__shared_weak_count **)&v219[1];
      if (*(_QWORD *)&v219[1])
      {
        v197 = (unint64_t *)(*(_QWORD *)&v219[1] + 8);
        do
          v198 = __ldaxr(v197);
        while (__stlxr(v198 - 1, v197));
        if (!v198)
        {
          ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
          std::__shared_weak_count::__release_weak(v196);
        }
      }
LABEL_280:
      v199 = (std::__shared_weak_count *)*((_QWORD *)&v215 + 1);
      if (*((_QWORD *)&v215 + 1))
      {
        v200 = (unint64_t *)(*((_QWORD *)&v215 + 1) + 8);
        do
          v201 = __ldaxr(v200);
        while (__stlxr(v201 - 1, v200));
        if (!v201)
        {
          ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
          std::__shared_weak_count::__release_weak(v199);
        }
      }
      v208[1].i8[2] = 0;
      v208[1].i8[0] = 0;
      *v208 = vaddq_s64(*v208, (int64x2_t)xmmword_2103B84D0);
      v202 = v244;
      if (!v244)
        goto LABEL_289;
      v203 = (unint64_t *)&v244->__shared_owners_;
      do
        v204 = __ldaxr(v203);
      while (__stlxr(v204 - 1, v203));
      if (!v204)
      {
        ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
        std::__shared_weak_count::__release_weak(v202);
        v130 = 0;
        v131 = v236;
        if (!v236)
          goto LABEL_189;
      }
      else
      {
LABEL_289:
        v130 = 0;
        v131 = v236;
        if (!v236)
          goto LABEL_189;
      }
LABEL_185:
      v132 = (unint64_t *)&v131->__shared_owners_;
      do
        v133 = __ldaxr(v132);
      while (__stlxr(v133 - 1, v132));
      if (!v133)
      {
        ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
        std::__shared_weak_count::__release_weak(v131);
      }
LABEL_189:
      v134 = v231;
      if (v231)
      {
        v135 = (unint64_t *)&v231->__shared_owners_;
        do
          v136 = __ldaxr(v135);
        while (__stlxr(v136 - 1, v135));
        if (!v136)
        {
          ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
          std::__shared_weak_count::__release_weak(v134);
          if ((v130 & 1) == 0)
            goto LABEL_197;
LABEL_194:
          v137 = 1;
          v138 = v224;
          if (v224)
            goto LABEL_198;
LABEL_201:
          v141 = v229;
          if (!v229)
            goto LABEL_207;
LABEL_202:
          v142 = (unint64_t *)&v141->__shared_owners_;
          do
            v143 = __ldaxr(v142);
          while (__stlxr(v143 - 1, v142));
          if (!v143)
          {
            ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
            std::__shared_weak_count::__release_weak(v141);
          }
          goto LABEL_207;
        }
      }
      if ((v130 & 1) != 0)
        goto LABEL_194;
LABEL_197:
      v137 = 0;
      *(_BYTE *)(v210 + 4) = 0;
      *(_DWORD *)v210 = 0;
      v138 = v224;
      if (!v224)
        goto LABEL_201;
LABEL_198:
      v139 = (unint64_t *)&v138->__shared_owners_;
      do
        v140 = __ldaxr(v139);
      while (__stlxr(v140 - 1, v139));
      if (v140)
        goto LABEL_201;
      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
      std::__shared_weak_count::__release_weak(v138);
      v141 = v229;
      if (v229)
        goto LABEL_202;
LABEL_207:
      v144 = v226;
      if (v226)
      {
        v145 = (unint64_t *)&v226->__shared_owners_;
        do
          v146 = __ldaxr(v145);
        while (__stlxr(v146 - 1, v145));
        if (!v146)
        {
          ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
          std::__shared_weak_count::__release_weak(v144);
          if (!v137)
            goto LABEL_134;
LABEL_212:
          if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 2009, (uint64_t)"result", 6, (uint64_t)"Failed to add the factor.", 25, (void (*)(void **))sub_21023DDB0))goto LABEL_134;
LABEL_101:
          abort();
        }
      }
      if (v137)
        goto LABEL_212;
LABEL_134:
      v80 += 4;
    }
    while (v80 != v81);
  }
}

void sub_20FB9E730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  uint64_t v49;

  sub_20FBB483C(v49 - 240);
  sub_20F8AF4F8((uint64_t)&a49);
  sub_20F8AF5A4((uint64_t)&STACK[0x270]);
  sub_20E86665C((uint64_t)&STACK[0x260]);
  sub_20E86665C((uint64_t)&STACK[0x208]);
  sub_20EEF0364((uint64_t)&STACK[0x228]);
  sub_20E86665C((uint64_t)&STACK[0x218]);
  _Unwind_Resume(a1);
}

void sub_20FB9E784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,char a49)
{
  sub_20E86665C((uint64_t)&STACK[0x270]);
  sub_20E86665C((uint64_t)&a47);
  sub_20F4ACD60((uint64_t)&a49);
  sub_20E86665C((uint64_t)&STACK[0x228]);
  _Unwind_Resume(a1);
}

void sub_20FB9E7B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20F4EE7B0((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20FB9E7C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20F4EE7B0((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20FB9E7D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20E86665C((uint64_t)&STACK[0x270]);
  sub_20E86665C((uint64_t)&a45);
  sub_20F4EE7B0((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20FB9E7FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20E86665C((uint64_t)&STACK[0x270]);
  sub_20E86665C((uint64_t)&a41);
  sub_20F4EE7B0((uint64_t)&a49);
  sub_20E86665C((uint64_t)&STACK[0x228]);
  _Unwind_Resume(a1);
}

void sub_20FB9E828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20E86665C((uint64_t)&STACK[0x270]);
  sub_20E86665C((uint64_t)&a43);
  sub_20F4EE7B0((uint64_t)&a49);
  sub_20E86665C((uint64_t)&STACK[0x228]);
  _Unwind_Resume(a1);
}

void sub_20FB9E854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_20E86665C((uint64_t)&STACK[0x270]);
  sub_20E86665C((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_20FB9E870(_Unwind_Exception *a1)
{
  sub_20E86665C((uint64_t)&STACK[0x270]);
  sub_20E86665C((uint64_t)&STACK[0x228]);
  _Unwind_Resume(a1);
}

void sub_20FB9E88C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  sub_20E86665C((uint64_t)&STACK[0x270]);
  sub_20E86665C((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void sub_20FB9E8A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  sub_20E86665C((uint64_t)&STACK[0x270]);
  sub_20E86665C((uint64_t)&a37);
  _Unwind_Resume(a1);
}

void sub_20FB9E8C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  sub_20E86665C((uint64_t)&STACK[0x270]);
  sub_20E86665C((uint64_t)&a39);
  _Unwind_Resume(a1);
}

float64_t sub_20FB9E8E0(_QWORD *a1, void **a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v12;
  float64x2_t v13;
  float64x2_t v14;
  char *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int *v20;
  char *v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int *v25;
  char *v26;
  unsigned int v27;
  uint64_t v28;
  double v29;
  double v31;
  uint64_t v33;
  int64x2_t v35;
  float64x2_t v37;
  int64x2_t v38;
  int64x2_t v39;
  int64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v50;

  v6 = a1[1];
  if (*(_QWORD *)(v6 + 64) <= 1uLL)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 2513, (uint64_t)"this->viobadata_ref_.state_set->size() >= 2", 43, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = a1[1];
  }
  v7 = *(_QWORD **)(v6 + 48);
  v8 = v7[5];
  v9 = (_QWORD *)v7[1];
  if (v9)
  {
    do
    {
      v10 = v9;
      v9 = (_QWORD *)*v9;
    }
    while (v9);
  }
  else
  {
    do
    {
      v10 = (_QWORD *)v7[2];
      _ZF = *v10 == (_QWORD)v7;
      v7 = v10;
    }
    while (!_ZF);
  }
  v12 = v10[5];
  sub_20F926890(a1 + 3482, a2);
  v15 = (char *)a1[647];
  v16 = (char *)a1[648];
  v17 = v15;
  if (v16 != v15)
  {
    v18 = (v16 - v15) >> 4;
    v17 = (char *)a1[647];
    do
    {
      v19 = v18 >> 1;
      v20 = (unsigned int *)&v17[16 * (v18 >> 1)];
      v22 = *v20;
      v21 = (char *)(v20 + 4);
      v18 += ~(v18 >> 1);
      if (v22 < v8)
        v17 = v21;
      else
        v18 = v19;
    }
    while (v18);
  }
  if (v17 == v16 || *(_DWORD *)v17 != (_DWORD)v8)
    v17 = (char *)a1[648];
  if (v16 != v15)
  {
    v23 = (v16 - v15) >> 4;
    do
    {
      v24 = v23 >> 1;
      v25 = (unsigned int *)&v15[16 * (v23 >> 1)];
      v27 = *v25;
      v26 = (char *)(v25 + 4);
      v23 += ~(v23 >> 1);
      if (v27 < v12)
        v15 = v26;
      else
        v23 = v24;
    }
    while (v23);
  }
  if (v15 == v16 || *(_DWORD *)v15 != (_DWORD)v12)
    v15 = (char *)a1[648];
  v28 = *(_QWORD *)(*((_QWORD *)v17 + 1) + 24);
  v13.f64[0] = *(float64_t *)(v28 + 16);
  v29 = *(double *)(v28 + 40);
  _Q3 = *(float64x2_t *)(v28 + 24);
  v31 = *(double *)(v28 + 64);
  _Q5 = *(float64x2_t *)(v28 + 48);
  v33 = *(_QWORD *)(*((_QWORD *)v15 + 1) + 24);
  v14.f64[0] = *(float64_t *)(v33 + 16);
  _D16 = *(double *)(v33 + 40);
  v35 = *(int64x2_t *)(v33 + 24);
  _D18 = *(double *)(v33 + 64);
  v37 = *(float64x2_t *)(v33 + 48);
  v38 = vzip2q_s64(*(int64x2_t *)v33, v35);
  v39 = (int64x2_t)vextq_s8((int8x16_t)vdupq_lane_s64(v38.i64[0], 0), (int8x16_t)vdupq_laneq_s64(v38, 1), 8uLL);
  v40 = vzip1q_s64(*(int64x2_t *)v33, v35);
  v41 = (float64x2_t)vzip1q_s64(v40, v39);
  v42 = (float64x2_t)vzip2q_s64(v40, v39);
  v43 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v41, *(double *)v28), v42, _Q3.f64[0]), v37, _Q5.f64[0]);
  *(double *)v39.i64 = vmlad_n_f64(vmlad_n_f64(vmulq_f64(v14, *(float64x2_t *)v28).f64[0], _D16, _Q3.f64[0]), _D18, _Q5.f64[0]);
  v44 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v41, *(float64x2_t *)v28, 1), v42, _Q3, 1), v37, _Q5, 1);
  __asm
  {
    FMLA            D1, D16, V3.D[1]
    FMLA            D1, D18, V5.D[1]
  }
  v50 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v41, v13.f64[0]), v42, v29), v37, v31);
  v13.f64[0] = vmulq_f64(v14, v13).f64[0] + _D16 * v29 + _D18 * v31;
  *(_QWORD *)(a3 + 16) = v39.i64[0];
  *(float64x2_t *)a3 = v43;
  *(_QWORD *)(a3 + 40) = _D1;
  *(float64x2_t *)(a3 + 24) = v44;
  *(float64_t *)(a3 + 64) = v13.f64[0];
  *(float64x2_t *)(a3 + 48) = v50;
  return v13.f64[0];
}

uint64_t sub_20FB9EB04(uint64_t a1)
{
  unint64_t *v1;
  unint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  std::string::size_type v9;
  std::string::size_type v10;
  uint64_t v11;
  int **v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  int v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  int v29;
  size_t v30;
  int64x2_t *v31;
  float64_t v32;
  float64_t v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  int64x2_t *v37;
  int v38;
  int v39;
  uint64_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  uint64_t v47;
  int64x2_t *v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  int8x16_t v66;
  float64x2_t v67;
  int8x16_t v68;
  unint64_t v69;
  int8x16_t v70;
  unint64_t v71;
  float64x2_t v72;
  float64x2_t *v73;
  float64x2_t v74;
  float64x2_t *v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t *v78;
  float64x2_t v79;
  float64x2_t *v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t *v83;
  float64x2_t v84;
  float64x2_t *v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t *v88;
  float64x2_t v89;
  float64x2_t *v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t *v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t *v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  int64x2_t *v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  int64x2_t *v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  int64x2_t *v222;
  float64x2_t v223;
  float64x2_t v225;
  float64x2_t v231;
  float64x2_t v233;
  float64x2_t v234;
  __int128 v236;
  float64x2_t v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  float64x2_t v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  float64x2_t v271;
  float64x2_t v272;
  float64x2_t v273;
  float64x2_t v274;
  float64x2_t v275;
  float64x2_t v276;
  float64x2_t v277;
  float64x2_t v278;
  float64x2_t v279;
  float64x2_t v280;
  float64x2_t v281;
  float64x2_t v282;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  float64x2_t v286;
  float64x2_t v287;
  float64x2_t v288;
  float64x2_t v289;
  float64x2_t v290;
  float64x2_t v291;
  float64x2_t v292;
  float64x2_t v293;
  float64x2_t v294;
  float64x2_t v295;
  float64x2_t v296;
  float64x2_t v297;
  unint64_t v298;
  uint64_t v299;
  int64x2_t *v300;
  int v301;
  int v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  int64x2_t *v310;
  float64x2_t v311;
  float64x2_t v312;
  float64x2_t v313;
  float64x2_t v314;
  float64x2_t v315;
  float64x2_t v316;
  int8x16_t v317;
  int8x16_t v318;
  unint64_t v319;
  int8x16_t v320;
  unint64_t v321;
  unint64_t v322;
  int8x16_t v323;
  unint64_t v324;
  unint64_t v325;
  int8x16_t v326;
  int8x16_t v327;
  unint64_t v328;
  unint64_t v329;
  int8x16_t v330;
  uint64_t v331;
  uint64_t v332;
  float64x2_t v333;
  int64x2_t *v334;
  float64x2_t v335;
  float64x2_t v336;
  float64x2_t v337;
  float64x2_t *v338;
  float64x2_t v339;
  float64x2_t v340;
  float64x2_t *v341;
  float64x2_t v342;
  float64x2_t *v343;
  float64x2_t v344;
  float64x2_t *v345;
  float64x2_t v346;
  float64x2_t *v347;
  float64x2_t v348;
  float64x2_t v349;
  float64x2_t v350;
  float64x2_t v351;
  float64x2_t v352;
  float64x2_t v353;
  float64x2_t v354;
  float64x2_t v355;
  float64x2_t v356;
  float64x2_t v357;
  float64x2_t v358;
  float64x2_t v359;
  float64x2_t v360;
  float64x2_t v361;
  float64x2_t v362;
  float64x2_t v363;
  float64x2_t v364;
  float64x2_t *v365;
  float64x2_t v366;
  float64x2_t v367;
  float64x2_t *v368;
  float64x2_t v369;
  float64x2_t v370;
  float64x2_t *v371;
  float64x2_t *v372;
  float64x2_t *v373;
  float64x2_t *v374;
  float64x2_t *v375;
  float64x2_t *v376;
  float64x2_t *v377;
  float64x2_t *v378;
  float64x2_t *v379;
  float64x2_t v380;
  float64x2_t v381;
  float64x2_t v382;
  float64x2_t v383;
  float64x2_t v384;
  float64x2_t v385;
  float64x2_t v386;
  float64x2_t v387;
  float64x2_t v388;
  float64x2_t v389;
  float64x2_t v390;
  float64x2_t v391;
  float64x2_t v392;
  float64x2_t v393;
  float64x2_t v394;
  float64x2_t v395;
  float64x2_t v396;
  int64x2_t *v397;
  float64x2_t v398;
  float64x2_t v399;
  float64x2_t v400;
  float64x2_t v401;
  float64x2_t v402;
  float64x2_t v403;
  float64x2_t v404;
  float64x2_t v405;
  float64x2_t v406;
  float64x2_t v407;
  float64x2_t v408;
  float64x2_t v409;
  float64x2_t v410;
  float64x2_t v411;
  float64x2_t v412;
  float64x2_t v413;
  float64x2_t v414;
  float64x2_t v415;
  float64x2_t v416;
  float64x2_t v417;
  float64x2_t v418;
  float64x2_t v419;
  float64x2_t v420;
  float64x2_t v421;
  float64x2_t v422;
  float64x2_t v423;
  float64x2_t v424;
  float64x2_t v425;
  float64x2_t v426;
  float64x2_t v427;
  float64x2_t v428;
  float64x2_t v429;
  float64x2_t v430;
  float64x2_t v431;
  float64x2_t v432;
  float64x2_t v433;
  float64x2_t v434;
  float64x2_t v435;
  float64x2_t v436;
  float64x2_t v437;
  float64x2_t v438;
  float64x2_t v439;
  int64x2_t *v440;
  float64x2_t v441;
  float64x2_t v442;
  float64x2_t v443;
  float64x2_t v444;
  float64x2_t v445;
  float64x2_t v446;
  float64x2_t v447;
  float64x2_t v448;
  float64x2_t v449;
  float64x2_t v450;
  float64x2_t v451;
  float64x2_t v452;
  float64x2_t v453;
  float64x2_t v454;
  float64x2_t v455;
  float64x2_t v456;
  float64x2_t v457;
  float64x2_t v458;
  float64x2_t v459;
  float64x2_t v460;
  float64x2_t v461;
  float64x2_t v462;
  float64x2_t v463;
  float64x2_t v464;
  float64x2_t v465;
  float64x2_t v466;
  float64x2_t v467;
  float64x2_t v468;
  float64x2_t v469;
  float64x2_t v470;
  float64x2_t v471;
  float64x2_t v472;
  float64x2_t v473;
  float64x2_t v474;
  float64x2_t v475;
  float64x2_t v476;
  float64x2_t v477;
  float64x2_t v478;
  float64x2_t v479;
  float64x2_t v480;
  float64x2_t v481;
  float64x2_t v482;
  float64x2_t v483;
  float64x2_t v484;
  float64x2_t v485;
  float64x2_t v486;
  float64x2_t v487;
  float64x2_t v488;
  float64x2_t v489;
  int64x2_t *v490;
  float64x2_t v491;
  float64x2_t v492;
  float64x2_t v493;
  float64x2_t v494;
  float64x2_t v495;
  float64x2_t v496;
  float64x2_t v497;
  float64x2_t v498;
  float64x2_t v499;
  float64x2_t v500;
  float64x2_t v501;
  float64x2_t v502;
  float64x2_t v503;
  float64x2_t v504;
  float64x2_t v505;
  float64x2_t v506;
  float64x2_t v507;
  float64x2_t v508;
  float64x2_t v509;
  float64x2_t v511;
  float64x2_t v512;
  float64x2_t v513;
  float64x2_t v514;
  float64x2_t v515;
  float64x2_t v516;
  float64x2_t v520;
  float64x2_t v521;
  float64x2_t v522;
  float64x2_t v523;
  float64x2_t v524;
  float64x2_t v525;
  float64x2_t v526;
  float64x2_t v527;
  int64x2_t *v528;
  float64x2_t v530;
  float64x2_t v531;
  float64x2_t v533;
  float64x2_t v534;
  float64x2_t v535;
  float64x2_t v537;
  float64x2_t v539;
  float64x2_t v541;
  float64x2_t v543;
  float64x2_t v544;
  float64x2_t v545;
  float64x2_t v546;
  float64x2_t v547;
  float64x2_t v548;
  float64x2_t v549;
  int8x16_t v551;
  int8x16_t v552;
  int8x16_t v553;
  int8x16_t v554;
  unint64_t v555;
  uint64_t v556;
  int64x2_t *v557;
  int v558;
  int v559;
  uint64_t v560;
  uint64_t v561;
  int64x2_t *v562;
  float64x2_t v563;
  float64x2_t v564;
  float64x2_t v565;
  float64x2_t v566;
  float64x2_t v567;
  float64x2_t v568;
  float64x2_t v569;
  float64x2_t v570;
  float64x2_t v571;
  float64x2_t v572;
  float64x2_t v573;
  float64x2_t v574;
  float64x2_t v575;
  float64x2_t v576;
  float64x2_t v577;
  float64x2_t v578;
  float64x2_t v579;
  float64x2_t v580;
  float64x2_t v581;
  float64x2_t v582;
  float64x2_t v583;
  float64x2_t v584;
  float64x2_t v585;
  float64x2_t v586;
  float64x2_t v587;
  float64x2_t v588;
  float64x2_t v589;
  float64x2_t v590;
  float64x2_t v591;
  float64x2_t *v592;
  float64x2_t v593;
  float64x2_t *v594;
  float64x2_t v595;
  float64x2_t v596;
  float64x2_t *v597;
  float64x2_t v598;
  float64x2_t *v599;
  float64x2_t v600;
  float64x2_t v601;
  float64x2_t *v602;
  float64x2_t v603;
  float64x2_t *v604;
  float64x2_t v605;
  float64x2_t *v606;
  float64x2_t v607;
  float64x2_t *v608;
  float64x2_t v609;
  float64x2_t *v610;
  float64x2_t v611;
  float64x2_t *v612;
  float64x2_t v613;
  float64x2_t *v614;
  float64x2_t v615;
  float64x2_t *v616;
  float64x2_t v617;
  float64x2_t v618;
  float64x2_t v619;
  float64x2_t v620;
  float64x2_t v621;
  float64x2_t v622;
  float64x2_t v623;
  float64x2_t v624;
  float64x2_t v625;
  float64x2_t v626;
  float64x2_t v627;
  float64x2_t v628;
  float64x2_t v629;
  float64x2_t v630;
  float64x2_t v631;
  float64x2_t v632;
  float64x2_t v633;
  float64x2_t v634;
  float64x2_t v635;
  float64x2_t v636;
  float64x2_t v637;
  float64x2_t v638;
  float64x2_t *v639;
  float64x2_t *v640;
  float64x2_t *v641;
  float64x2_t *v642;
  float64x2_t *v643;
  float64x2_t *v644;
  float64x2_t *v645;
  float64x2_t v646;
  float64x2_t v647;
  float64x2_t v648;
  float64x2_t v649;
  float64x2_t v650;
  float64x2_t v651;
  float64x2_t v652;
  int64x2_t *v653;
  float64x2_t v654;
  float64x2_t v655;
  float64x2_t v656;
  float64x2_t v657;
  float64x2_t v658;
  float64x2_t v659;
  float64x2_t v660;
  float64x2_t v661;
  float64x2_t v662;
  float64x2_t v663;
  float64x2_t v664;
  float64x2_t v665;
  float64x2_t v666;
  float64x2_t v667;
  float64x2_t v668;
  float64x2_t v669;
  float64x2_t v670;
  float64x2_t v671;
  float64x2_t v672;
  float64x2_t v673;
  float64x2_t v674;
  float64x2_t v675;
  float64x2_t v676;
  float64x2_t v677;
  float64x2_t v678;
  float64x2_t v679;
  float64x2_t v680;
  float64x2_t v681;
  float64x2_t v682;
  float64x2_t v683;
  float64x2_t v684;
  float64x2_t v685;
  float64x2_t v686;
  float64x2_t v687;
  float64x2_t v688;
  float64x2_t v689;
  float64x2_t v690;
  int64x2_t *v691;
  float64x2_t v692;
  float64x2_t v693;
  float64x2_t v694;
  float64x2_t v695;
  float64x2_t v696;
  float64x2_t v697;
  float64x2_t v698;
  float64x2_t v699;
  float64x2_t v700;
  float64x2_t v701;
  float64x2_t v702;
  float64x2_t v703;
  float64x2_t v704;
  float64x2_t v705;
  float64x2_t v706;
  float64x2_t v707;
  float64x2_t v708;
  float64x2_t v709;
  float64x2_t v710;
  float64x2_t v711;
  float64x2_t v712;
  float64x2_t v713;
  float64x2_t v714;
  float64x2_t v715;
  float64x2_t v716;
  float64x2_t v717;
  float64x2_t v718;
  float64x2_t v719;
  float64x2_t v720;
  float64x2_t v721;
  float64x2_t v722;
  float64x2_t v723;
  float64x2_t v724;
  float64x2_t v725;
  float64x2_t v726;
  float64x2_t v727;
  float64x2_t v728;
  float64x2_t v729;
  float64x2_t v730;
  float64x2_t v731;
  float64x2_t v732;
  float64x2_t v733;
  float64x2_t v734;
  float64x2_t v735;
  float64x2_t v736;
  float64x2_t v737;
  float64x2_t v738;
  float64x2_t v739;
  float64x2_t v740;
  float64x2_t v741;
  float64x2_t v742;
  float64x2_t v743;
  float64x2_t v744;
  float64x2_t v745;
  float64x2_t v746;
  float64x2_t v747;
  float64x2_t v748;
  int64x2_t *v749;
  float64x2_t v750;
  float64x2_t v751;
  float64x2_t v752;
  float64x2_t v753;
  float64x2_t v754;
  float64x2_t v755;
  float64x2_t v756;
  float64x2_t v757;
  float64x2_t v758;
  float64x2_t v759;
  float64x2_t v760;
  float64x2_t v761;
  float64x2_t v762;
  float64x2_t v763;
  float64x2_t v764;
  float64x2_t v765;
  float64x2_t v766;
  float64x2_t v767;
  float64x2_t v768;
  float64x2_t v769;
  float64x2_t v770;
  float64x2_t v771;
  float64x2_t v772;
  float64x2_t v773;
  float64x2_t v774;
  float64x2_t v775;
  float64x2_t v776;
  float64x2_t v777;
  float64x2_t v778;
  float64x2_t v779;
  float64x2_t v780;
  float64x2_t v781;
  float64x2_t v782;
  float64x2_t v783;
  float64x2_t v784;
  float64x2_t v785;
  float64x2_t v786;
  float64x2_t v787;
  float64x2_t v788;
  float64x2_t v789;
  int64x2_t *v790;
  float64x2_t v791;
  float64x2_t v792;
  float64x2_t v793;
  float64x2_t v794;
  float64x2_t v795;
  float64x2_t v796;
  float64x2_t v797;
  float64x2_t v798;
  float64x2_t v799;
  float64x2_t v800;
  float64x2_t v801;
  float64x2_t v802;
  float64x2_t v803;
  float64x2_t v804;
  float64x2_t v805;
  float64x2_t v806;
  float64x2_t v807;
  float64x2_t v808;
  float64x2_t v809;
  float64x2_t v810;
  float64x2_t v811;
  int64x2_t *v812;
  float64x2_t v813;
  float64x2_t v814;
  float64x2_t v815;
  double *p_p;
  uint64_t v818;
  uint64_t j;
  unint64_t v820;
  float64x2_t *v821;
  float64x2_t v822;
  uint64_t v823;
  double v824;
  unint64_t i;
  float64x2_t *v826;
  float64x2_t v827;
  int v828;
  unint64_t v829;
  uint64_t v830;
  std::runtime_error *v831;
  uint64_t v832;
  uint64_t *v833;
  char *v834;
  char *v835;
  unsigned __int8 v836;
  uint64_t v837;
  char *v838;
  NSObject *v839;
  unsigned __int8 v840;
  __int8 *v841;
  const char *v842;
  NSObject *v843;
  std::runtime_error *exception;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  int v852;
  int v853;
  int v854;
  int v855;
  unsigned int __lda;
  float64x2_t v857;
  float64x2_t v858;
  float64x2_t v859;
  float64x2_t v860;
  float64x2_t v861;
  float64x2_t v862;
  float64x2_t v863;
  float64x2_t v864;
  float64x2_t v865;
  float64x2_t v866;
  float64x2_t v867;
  float64x2_t v868;
  float64x2_t v869;
  float64x2_t v870;
  float64x2_t v871;
  float64x2_t v872;
  float64x2_t v873;
  float64x2_t v874;
  float64x2_t v875;
  float64x2_t v876;
  float64x2_t v877;
  float64x2_t v878;
  float64x2_t v879;
  float64x2_t v880;
  float64x2_t v881;
  float64x2_t v882;
  float64x2_t v883;
  float64x2_t v884;
  float64x2_t v885;
  float64x2_t v886;
  float64x2_t v887;
  float64x2_t v888;
  float64x2_t v889;
  float64x2_t v890;
  float64x2_t v891;
  float64x2_t v892;
  float64x2_t v893;
  float64x2_t v894;
  float64x2_t v895;
  float64x2_t v896;
  float64x2_t v897;
  float64x2_t v898;
  float64x2_t v899;
  float64x2_t v900;
  float64x2_t v901;
  float64x2_t v902;
  float64x2_t v903;
  float64x2_t v904;
  float64x2_t v905;
  float64x2_t v906;
  float64x2_t v907;
  float64x2_t v908;
  float64x2_t v909;
  float64x2_t v910;
  float64x2_t v911;
  float64x2_t v912;
  float64x2_t v913;
  float64x2_t v914;
  float64x2_t v915;
  float64x2_t v916;
  unint64_t v917;
  float64x2_t v918;
  unint64_t v919;
  unint64_t v920;
  float64x2_t v921;
  float64x2_t v922;
  unint64_t v923;
  float64x2_t v924;
  unint64_t v925;
  float64x2_t v926;
  unint64_t v927;
  float64x2_t v928;
  unint64_t v929;
  float64x2_t v930;
  float64x2_t v931;
  float64x2_t v932;
  uint64_t v933;
  float64x2_t v934;
  uint64_t v935;
  float64x2_t v936;
  uint64_t v937;
  float64x2_t v938;
  float64x2_t v939;
  float64x2_t v940;
  uint64_t v941;
  float64x2_t v942;
  float64x2_t v943;
  float64x2_t v944;
  float64x2_t v945;
  float64x2_t v946;
  uint64_t v947;
  float64x2_t v948;
  uint64_t v949;
  float64x2_t v950;
  float64x2_t v951;
  float64x2_t v952;
  float64x2_t v953;
  float64x2_t v954;
  float64x2_t v955;
  float64x2_t v956;
  float64x2_t v957;
  float64x2_t v958;
  float64x2_t v959;
  float64x2_t v960;
  float64x2_t v961;
  float64x2_t v962;
  float64x2_t v963;
  float64x2_t v964;
  unint64_t v965;
  float64x2_t v966;
  unint64_t v967;
  float64x2_t v968;
  unint64_t v969;
  float64x2_t v970;
  uint64_t v971;
  float64x2_t v972;
  int8x16_t v973;
  float64x2_t v974;
  int8x16_t v975;
  float64x2_t v976;
  int8x16_t v977;
  float64x2_t v978;
  float64x2_t v979;
  float64x2_t v980;
  float64x2_t v981;
  float64x2_t v982;
  float64x2_t v983;
  float64x2_t v984;
  float64x2_t v985;
  float64x2_t v986;
  float64x2_t v987;
  float64x2_t v988;
  float64x2_t v989;
  float64x2_t v990;
  float64x2_t v991;
  float64x2_t v992;
  float64x2_t v993;
  float64x2_t v994;
  float64x2_t v995;
  float64x2_t v996;
  float64x2_t v997;
  float64x2_t v998;
  float64x2_t v999;
  float64x2_t v1000;
  float64x2_t v1001;
  float64x2_t v1002;
  float64x2_t v1003;
  float64x2_t v1004;
  float64x2_t v1005;
  float64x2_t v1006;
  float64x2_t v1007;
  float64x2_t v1008;
  float64x2_t v1009;
  float64x2_t v1010;
  float64x2_t v1011;
  float64x2_t v1012;
  float64x2_t v1013;
  float64x2_t v1014;
  float64x2_t v1015;
  float64x2_t v1016;
  float64x2_t v1017;
  float64x2_t v1018;
  float64x2_t v1019;
  float64x2_t v1020;
  float64x2_t v1021;
  float64x2_t v1022;
  float64x2_t v1023;
  float64x2_t v1024;
  float64x2_t v1025;
  float64x2_t v1026;
  float64x2_t v1027;
  float64x2_t v1028;
  float64x2_t v1029;
  float64x2_t v1030;
  float64x2_t v1031;
  float64x2_t v1032;
  float64x2_t v1033;
  float64x2_t v1034;
  float64x2_t v1035;
  float64x2_t v1036;
  float64x2_t v1037;
  float64x2_t v1038;
  float64x2_t v1039;
  float64x2_t v1040;
  float64x2_t v1041;
  float64x2_t v1042;
  float64x2_t v1043;
  float64x2_t v1044;
  float64x2_t v1045;
  __int128 v1046;
  float64x2_t v1047;
  float64x2_t v1048;
  float64x2_t v1049;
  __int128 v1050;
  float64x2_t v1051;
  float64x2_t v1052;
  float64x2_t v1053;
  float64x2_t v1054;
  __int128 v1055;
  float64x2_t v1056;
  float64x2_t v1057;
  float64x2_t v1058;
  float64x2_t v1059;
  __int128 v1060;
  float64x2_t v1061;
  float64x2_t v1062;
  float64x2_t v1063;
  float64x2_t v1064;
  __int128 v1065;
  float64x2_t v1066;
  float64x2_t v1067;
  float64x2_t v1068;
  float64x2_t v1069;
  __int128 v1070;
  float64x2_t v1071;
  float64x2_t v1072;
  float64x2_t v1073;
  float64x2_t v1074;
  __int128 v1075;
  float64x2_t v1076;
  float64x2_t v1077;
  float64x2_t v1078;
  unint64_t v1079;
  __int128 v1080;
  float64x2_t v1081;
  float64x2_t v1082;
  float64x2_t v1083;
  unint64_t v1084;
  __int128 v1085;
  float64x2_t v1086;
  float64x2_t v1087;
  float64x2_t v1088;
  uint64_t v1089;
  __int128 v1090;
  float64x2_t v1091;
  float64x2_t v1092;
  float64x2_t v1093;
  uint64_t v1094;
  __int128 v1095;
  float64x2_t v1096;
  float64x2_t v1097;
  float64x2_t v1098;
  uint64_t v1099;
  __int128 v1100;
  float64x2_t v1101;
  float64x2_t v1102;
  float64x2_t v1103;
  float64x2_t v1104;
  __int128 v1105;
  float64x2_t v1106;
  float64x2_t v1107;
  float64x2_t v1108;
  float64x2_t v1109;
  __int128 v1110;
  float64x2_t v1111;
  float64x2_t v1112;
  float64x2_t v1113;
  float64x2_t v1114;
  __int128 v1115;
  float64x2_t v1116;
  float64x2_t v1117;
  float64x2_t v1118;
  float64x2_t v1119;
  __int128 v1120;
  float64x2_t v1121;
  float64x2_t v1122;
  float64x2_t v1123;
  float64x2_t v1124;
  __int128 v1125;
  float64x2_t v1126;
  float64x2_t v1127;
  float64x2_t v1128;
  float64x2_t v1129;
  __int128 v1130;
  float64x2_t v1131;
  float64x2_t v1132;
  float64x2_t v1133;
  float64x2_t v1134;
  __int128 v1135;
  float64x2_t v1136;
  float64x2_t v1137;
  float64x2_t v1138;
  float64x2_t v1139;
  __int128 v1140;
  float64x2_t v1141;
  float64x2_t v1142;
  float64x2_t v1143;
  float64x2_t v1144;
  __int128 v1145;
  float64x2_t v1146;
  float64x2_t v1147;
  float64x2_t v1148;
  float64x2_t v1149;
  __int128 v1150;
  float64x2_t v1151;
  float64x2_t v1152;
  float64x2_t v1153;
  unint64_t v1154;
  __int128 v1155;
  float64x2_t v1156;
  float64x2_t v1157;
  float64x2_t v1158;
  float64x2_t v1159;
  __int128 v1160;
  float64x2_t v1161;
  float64x2_t v1162;
  float64x2_t v1163;
  float64x2_t v1164;
  __int128 v1165;
  float64x2_t v1166;
  float64x2_t v1167;
  float64x2_t v1168;
  float64x2_t v1169;
  __int128 v1170;
  float64x2_t v1171;
  float64x2_t v1172;
  float64x2_t v1173;
  float64x2_t v1174;
  __int128 v1175;
  float64x2_t v1176;
  float64x2_t v1177;
  float64x2_t v1178;
  float64x2_t v1179;
  __int128 v1180;
  float64x2_t v1181;
  float64x2_t v1182;
  float64x2_t v1183;
  float64x2_t v1184;
  __int128 v1185;
  float64x2_t v1186;
  float64x2_t v1187;
  float64x2_t v1188;
  float64x2_t v1189;
  __int128 v1190;
  float64x2_t v1191;
  float64x2_t v1192;
  float64x2_t v1193;
  float64x2_t v1194;
  __int128 v1195;
  float64x2_t v1196;
  float64x2_t v1197;
  float64x2_t v1198;
  float64x2_t v1199;
  __int128 v1200;
  float64x2_t v1201;
  float64x2_t v1202;
  float64x2_t v1203;
  float64x2_t v1204;
  __int128 v1205;
  float64x2_t v1206;
  float64x2_t v1207;
  float64x2_t v1208;
  float64x2_t v1209;
  __int128 v1210;
  float64x2_t v1211;
  float64x2_t v1212;
  float64x2_t v1213;
  float64x2_t v1214;
  __int128 v1215;
  float64x2_t v1216;
  float64x2_t v1217;
  float64x2_t v1218;
  float64x2_t v1219;
  __int128 v1220;
  float64x2_t v1221;
  float64x2_t v1222;
  float64x2_t v1223;
  float64x2_t v1224;
  __int128 v1225;
  float64x2_t v1226;
  float64x2_t v1227;
  float64x2_t v1228;
  float64x2_t v1229;
  __int128 v1230;
  float64x2_t v1231;
  float64x2_t v1232;
  float64x2_t v1233;
  float64x2_t v1234;
  __int128 v1235;
  float64x2_t v1236;
  float64x2_t v1237;
  float64x2_t v1238;
  float64x2_t v1239;
  __int128 v1240;
  float64x2_t v1241;
  float64x2_t v1242;
  float64x2_t v1243;
  float64x2_t v1244;
  __int128 v1245;
  float64x2_t v1246;
  float64x2_t v1247;
  float64x2_t v1248;
  float64x2_t v1249;
  __int128 v1250;
  float64x2_t v1251;
  float64x2_t v1252;
  float64x2_t v1253;
  float64x2_t v1254;
  __int128 v1255;
  float64x2_t v1256;
  float64x2_t v1257;
  float64x2_t v1258;
  float64x2_t v1259;
  __int128 v1260;
  float64x2_t v1261;
  float64x2_t v1262;
  float64x2_t v1263;
  float64x2_t v1264;
  __int128 v1265;
  float64x2_t v1266;
  float64x2_t v1267;
  float64x2_t v1268;
  float64x2_t v1269;
  __int128 v1270;
  float64x2_t v1271;
  float64x2_t v1272;
  float64x2_t v1273;
  float64x2_t v1274;
  __int128 v1275;
  float64x2_t v1276;
  float64x2_t v1277;
  float64x2_t v1278;
  float64x2_t v1279;
  __int128 v1280;
  float64x2_t v1281;
  float64x2_t v1282;
  float64x2_t v1283;
  float64x2_t v1284;
  __int128 v1285;
  float64x2_t v1286;
  float64x2_t v1287;
  float64x2_t v1288;
  float64x2_t v1289;
  __int128 v1290;
  float64x2_t v1291;
  float64x2_t v1292;
  float64x2_t v1293;
  float64x2_t v1294;
  __int128 v1295;
  float64x2_t v1296;
  float64x2_t v1297;
  float64x2_t v1298;
  float64x2_t v1299;
  __int128 v1300;
  float64x2_t v1301;
  float64x2_t v1302;
  float64x2_t v1303;
  float64x2_t v1304;
  __int128 v1305;
  float64x2_t v1306;
  float64x2_t v1307;
  float64x2_t v1308;
  float64x2_t v1309;
  __int128 v1310;
  float64x2_t v1311;
  float64x2_t v1312;
  float64x2_t v1313;
  float64x2_t v1314;
  __int128 v1315;
  float64x2_t v1316;
  float64x2_t v1317;
  float64x2_t v1318;
  float64x2_t v1319;
  __int128 v1320;
  float64x2_t v1321;
  float64x2_t v1322;
  float64x2_t v1323;
  float64x2_t v1324;
  __int128 v1325;
  float64x2_t v1326;
  float64x2_t v1327;
  float64x2_t v1328;
  float64x2_t v1329;
  __int128 v1330;
  float64x2_t v1331;
  float64x2_t v1332;
  float64x2_t v1333;
  float64x2_t v1334;
  __int128 v1335;
  float64x2_t v1336;
  float64x2_t v1337;
  float64x2_t v1338;
  float64x2_t v1339;
  __int128 v1340;
  float64x2_t v1341;
  float64x2_t v1342;
  float64x2_t v1343;
  float64x2_t v1344;
  __int128 v1345;
  float64x2_t v1346;
  float64x2_t v1347;
  float64x2_t v1348;
  float64x2_t v1349;
  __int128 v1350;
  float64x2_t v1351;
  float64x2_t v1352;
  float64x2_t v1353;
  float64x2_t v1354;
  __int128 v1355;
  float64x2_t v1356;
  float64x2_t v1357;
  float64x2_t v1358;
  float64x2_t v1359;
  __int128 v1360;
  float64x2_t v1361;
  float64x2_t v1362;
  float64x2_t v1363;
  float64x2_t v1364;
  __int128 v1365;
  float64x2_t v1366;
  float64x2_t v1367;
  float64x2_t v1368;
  float64x2_t v1369;
  __int128 v1370;
  float64x2_t v1371;
  float64x2_t v1372;
  float64x2_t v1373;
  float64x2_t v1374;
  __int128 v1375;
  float64x2_t v1376;
  float64x2_t v1377;
  float64x2_t v1378;
  float64x2_t v1379;
  __int128 v1380;
  float64x2_t v1381;
  float64x2_t v1382;
  float64x2_t v1383;
  float64x2_t v1384;
  __int128 v1385;
  float64x2_t v1386;
  float64x2_t v1387;
  float64x2_t v1388;
  float64x2_t v1389;
  __int128 v1390;
  float64x2_t v1391;
  float64x2_t v1392;
  float64x2_t v1393;
  float64x2_t v1394;
  __int128 v1395;
  float64x2_t v1396;
  float64x2_t v1397;
  float64x2_t v1398;
  float64x2_t v1399;
  __int128 v1400;
  float64x2_t v1401;
  float64x2_t v1402;
  float64x2_t v1403;
  float64x2_t v1404;
  __int128 v1405;
  float64x2_t v1406;
  float64x2_t v1407;
  float64x2_t v1408;
  float64x2_t v1409;
  __int128 v1410;
  float64x2_t v1411;
  float64x2_t v1412;
  float64x2_t v1413;
  float64x2_t v1414;
  __int128 v1415;
  float64x2_t v1416;
  float64x2_t v1417;
  float64x2_t v1418;
  float64x2_t v1419;
  __int128 v1420;
  float64x2_t v1421;
  float64x2_t v1422;
  float64x2_t v1423;
  float64x2_t v1424;
  __int128 v1425;
  float64x2_t v1426;
  float64x2_t v1427;
  float64x2_t v1428;
  float64x2_t v1429;
  __int128 v1430;
  float64x2_t v1431;
  float64x2_t v1432;
  float64x2_t v1433;
  float64x2_t v1434;
  __int128 v1435;
  float64x2_t v1436;
  float64x2_t v1437;
  float64x2_t v1438;
  float64x2_t v1439;
  __int128 v1440;
  float64x2_t v1441;
  float64x2_t v1442;
  float64x2_t v1443;
  float64x2_t v1444;
  float64x2_t v1445;
  float64x2_t v1446;
  float64x2_t v1447;
  char **v1448;
  int *v1449;
  __int8 *v1450;
  int v1451;
  char v1452;
  char *category[2];
  char *v1454;
  uint64_t v1455;
  float64x2_t v1456;
  __int128 v1457;
  __int128 v1458;
  __int128 v1459;
  __int128 v1460;
  __int128 v1461;
  __int128 v1462;
  __int128 v1463;
  __int128 v1464;
  __int128 v1465;
  __int128 v1466;
  __int128 v1467;
  __int128 v1468;
  __int128 v1469;
  __int128 v1470;
  __int128 v1471;
  __int128 v1472;
  __int128 v1473;
  __int128 v1474;
  __int128 v1475;
  __int128 v1476;
  __int128 v1477;
  __int128 v1478;
  __int128 v1479;
  __int128 v1480;
  __int128 v1481;
  __int128 v1482;
  __int128 v1483;
  __int128 v1484;
  __int128 v1485;
  __int128 v1486;
  __int128 v1487;
  __int128 v1488;
  __int128 v1489;
  __int128 v1490;
  __int128 v1491;
  __int128 v1492;
  __int128 v1493;
  __int128 v1494;
  __int128 v1495;
  __int128 v1496;
  __int128 v1497;
  __int128 v1498;
  __int128 v1499;
  __int128 v1500;
  __int128 v1501;
  __int128 v1502;
  __int128 v1503;
  __int128 v1504;
  __int128 v1505;
  __int128 v1506;
  __int128 v1507;
  __int128 v1508;
  __int128 v1509;
  __int128 v1510;
  __int128 v1511;
  __int128 v1512;
  __int128 v1513;
  __int128 v1514;
  __int128 v1515;
  __int128 v1516;
  __int128 v1517;
  __int128 v1518;
  __int128 v1519;
  __int128 v1520;
  __int128 v1521;
  __int128 v1522;
  __int128 v1523;
  __int128 v1524;
  __int128 v1525;
  __int128 v1526;
  __int128 v1527;
  __int128 v1528;
  __int128 v1529;
  __int128 v1530;
  __int128 v1531;
  __int128 v1532;
  __int128 v1533;
  __int128 v1534;
  __int128 v1535;
  __int128 v1536;
  __int128 v1537;
  float64x2_t v1538;
  __int128 v1539;
  __int128 v1540;
  __int128 v1541;
  __int128 v1542;
  __int128 v1543;
  __int128 v1544;
  __int128 v1545;
  __int128 v1546;
  __int128 v1547;
  __int128 v1548;
  __int128 v1549;
  __int128 v1550;
  __int128 v1551;
  __int128 v1552;
  __int128 v1553;
  __int128 v1554;
  __int128 v1555;
  __int128 v1556;
  __int128 v1557;
  __int128 v1558;
  __int128 v1559;
  __int128 v1560;
  __int128 v1561;
  __int128 v1562;
  __int128 v1563;
  __int128 v1564;
  __int128 v1565;
  __int128 v1566;
  __int128 v1567;
  uint64_t v1568;
  int v1569;
  int v1570;
  char **v1571;
  int **v1572;
  uint64_t v1573;
  std::string __p;
  float64x2_t v1575;
  float64x2_t v1576[110];
  float64_t v1577;
  uint64_t v1578;
  uint64_t v1579;
  uint64_t v1580;

  MEMORY[0x24BDAC7A8](a1);
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v1580 = *MEMORY[0x24BDAC8D0];
  v1569 = 2;
  v12 = *(int ***)(v11 + 8);
  v1571 = *(char ***)v11;
  v1572 = v12;
  v1573 = *(_QWORD *)(v11 + 16);
  LODWORD(v9) = v1573;
  *(_QWORD *)v11 = 0;
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 16) = 0;
  if ((_DWORD)v9)
  {
    v13 = sub_20E8BE940();
    v1569 = v13 != 0;
    if (v13)
    {
      sub_20F9B2A4C(category);
      if (**((int **)category[0] + 7) <= 4)
      {
        v14 = *((unsigned __int8 *)category[0] + 72);
        v15 = sub_20E8C31DC((uint64_t)category[0], "OSLogSurrogateAppender", 1, 0);
        v16 = v15 ? v15 + 16 : 0;
        if (v14 || v15 != 0)
        {
          *(_QWORD *)&v1456.f64[0] = category;
          *(std::chrono::steady_clock::time_point *)&v1456.f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
          *(std::chrono::system_clock::time_point *)&v1457 = std::chrono::system_clock::now();
          DWORD2(v1457) = 4;
          *(_QWORD *)&v1458 = "unknown file";
          DWORD2(v1458) = 3333;
          *(_QWORD *)&v1460 = 0;
          *(_QWORD *)&v1459 = "unknown function";
          *((_QWORD *)&v1459 + 1) = 0;
          v18 = **(_QWORD **)&v1456.f64[0];
          v19 = (uint64_t *)(**(_QWORD **)&v1456.f64[0] + 16);
          if (*(char *)(**(_QWORD **)&v1456.f64[0] + 39) < 0)
          {
            v21 = *(char **)(v18 + 16);
            v20 = *(_QWORD *)(v18 + 24);
          }
          else
          {
            v20 = *(unsigned __int8 *)(**(_QWORD **)&v1456.f64[0] + 39);
            v21 = (char *)(**(_QWORD **)&v1456.f64[0] + 16);
          }
          v1454 = v21;
          v1455 = v20;
          v840 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v840 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)&__p);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&__p);
            if (LOBYTE(v1575.f64[0]) && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
          v841 = (__int8 *)byte_254A4A4F8[23];
          if (byte_254A4A4F8[23] >= 0)
          {
            v842 = byte_254A4A4F8;
          }
          else
          {
            v841 = *(__int8 **)&byte_254A4A4F8[8];
            v842 = *(const char **)byte_254A4A4F8;
          }
          v1449 = (int *)v842;
          v1450 = v841;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v842, v1454);
          sub_20E86E5A8(&__p.__r_.__value_.__l.__size_, (uint64_t)&v1449);
          sub_20E86E5A8(v1576, (uint64_t)&v1454);
          v843 = __p.__r_.__value_.__r.__words[0];
          sub_20E86E44C((uint64_t)&__p);
          sub_20FBA9614(v16, v19, v843, OS_LOG_TYPE_ERROR);
          if (v14)
          {
            sub_20E8C003C((uint64_t)&v1456, "Failed to factorize the marginalized component of the information matrix.");
            sub_20E863570((uint64_t)&v1456);
          }
          sub_20E863714((uint64_t)&v1456);
        }
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_20E8610C0(&__p, "marginalize SW f");
      std::runtime_error::runtime_error(exception, &__p);
      exception->__vftable = (std::runtime_error_vtbl *)&off_24CA04F20;
      __cxa_throw(exception, (struct type_info *)&unk_24CA04F38, (void (*)(void *))std::runtime_error::~runtime_error);
    }
  }
  else
  {
    v1569 = 0;
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1571;
  sub_20FBA9A00((uint64_t)&v1449, (uint64_t *)&__p);
  if (!v1452)
  {
    sub_20F9B2A4C(&v1448);
    if (*(int *)v1448[7] <= 4)
    {
      v828 = *((unsigned __int8 *)v1448 + 72);
      v829 = sub_20E8C31DC((uint64_t)v1448, "OSLogSurrogateAppender", 1, 0);
      v830 = v829 ? v829 + 16 : 0;
      if (v828 || v829)
      {
        *(_QWORD *)&v1456.f64[0] = &v1448;
        *(std::chrono::steady_clock::time_point *)&v1456.f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
        *(std::chrono::system_clock::time_point *)&v1457 = std::chrono::system_clock::now();
        DWORD2(v1457) = 4;
        *(_QWORD *)&v1458 = "unknown file";
        DWORD2(v1458) = 3345;
        *(_QWORD *)&v1460 = 0;
        *(_QWORD *)&v1459 = "unknown function";
        *((_QWORD *)&v1459 + 1) = 0;
        v832 = **(_QWORD **)&v1456.f64[0];
        v833 = (uint64_t *)(**(_QWORD **)&v1456.f64[0] + 16);
        if (*(char *)(**(_QWORD **)&v1456.f64[0] + 39) < 0)
        {
          v835 = *(char **)(v832 + 16);
          v834 = *(char **)(v832 + 24);
        }
        else
        {
          v834 = (char *)*(unsigned __int8 *)(**(_QWORD **)&v1456.f64[0] + 39);
          v835 = (char *)(**(_QWORD **)&v1456.f64[0] + 16);
        }
        category[0] = v835;
        category[1] = v834;
        v836 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v836 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)&__p);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&__p);
          if (LOBYTE(v1575.f64[0]) && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        v837 = byte_254A4A4F8[23];
        if (byte_254A4A4F8[23] >= 0)
        {
          v838 = byte_254A4A4F8;
        }
        else
        {
          v837 = *(_QWORD *)&byte_254A4A4F8[8];
          v838 = *(char **)byte_254A4A4F8;
        }
        v1454 = v838;
        v1455 = v837;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v838, category[0]);
        sub_20E86E5A8(&__p.__r_.__value_.__l.__size_, (uint64_t)&v1454);
        sub_20E86E5A8(v1576, (uint64_t)category);
        v839 = __p.__r_.__value_.__r.__words[0];
        sub_20E86E44C((uint64_t)&__p);
        sub_20FBA9C80(v830, v833, v839, OS_LOG_TYPE_ERROR);
        if (v828)
        {
          sub_20E8C003C((uint64_t)&v1456, "Failed to invert the factorization of the marginalized component of the information matrix.");
          sub_20E863570((uint64_t)&v1456);
        }
        sub_20E863714((uint64_t)&v1456);
      }
    }
    v831 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E8610C0(&__p, "marginalize SW i");
    std::runtime_error::runtime_error(v831, &__p);
    v831->__vftable = (std::runtime_error_vtbl *)&off_24CA04F20;
    __cxa_throw(v831, (struct type_info *)&unk_24CA04F38, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v22 = (char *)&v1449;
  v1454 = (char *)&v1449;
  if ((v6 & 1) == 0)
  {
    category[0] = (char *)v8;
    v1448 = &v1454;
    *(_QWORD *)&v1456.f64[0] = category;
    *(_QWORD *)&v1456.f64[1] = &v1448;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v1456;
    __p.__r_.__value_.__r.__words[2] = v10;
    v1575.f64[0] = 1.0;
    sub_20FBAA06C(v2, (uint64_t)&__p);
    v22 = v1454;
  }
  category[0] = (char *)&v1454;
  v23 = *((_DWORD *)v22 + 5);
  if (v23 == *(_DWORD *)(v8 + 16))
  {
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)category;
    __p.__r_.__value_.__r.__words[2] = v8;
    v1575.f64[0] = 1.0;
    sub_20FBAA740(v8, (uint64_t)&__p);
  }
  else
  {
    v29 = *(_DWORD *)(v8 + 20);
    v30 = (8 * (v29 * v23) + 31) & 0xFFFFFFFE0;
    *(_QWORD *)&v1456.f64[1] = v30 >> 3;
    *(_QWORD *)&v1456.f64[0] = operator new(v30, (std::align_val_t)0x20uLL);
    LODWORD(v1457) = *((_DWORD *)v22 + 5);
    DWORD1(v1457) = v29;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)category;
    __p.__r_.__value_.__r.__words[2] = v8;
    v1575.f64[0] = 1.0;
    sub_20FBAA740((uint64_t)&v1456, (uint64_t)&__p);
    v31 = *(int64x2_t **)v8;
    v32 = *(double *)(v8 + 8);
    v33 = v1456.f64[1];
    *(float64_t *)v8 = v1456.f64[0];
    *(float64_t *)(v8 + 8) = v33;
    *(_QWORD *)&v1456.f64[0] = v31;
    v1456.f64[1] = v32;
    *(_QWORD *)(v8 + 16) = v1457;
    if (v31)
      MEMORY[0x212BC6368](v31, 0x1000C8000313F17);
  }
  if (v1449)
    MEMORY[0x212BC6368](v1449, 0x1000C8000313F17);
  if (v1571)
    MEMORY[0x212BC6368](v1571, 0x1000C8000313F17);
  v34 = *(_DWORD *)(v4 + 16);
  switch(v34)
  {
    case 22:
      v555 = *(_QWORD *)v4;
      v556 = *(unsigned int *)(v8 + 16);
      v557 = *(int64x2_t **)v8;
      LOBYTE(v558) = *(_DWORD *)(v8 + 16);
      if (v556 >= 2)
      {
        v559 = 0;
        v1323 = *(float64x2_t *)(v555 + 16);
        v1318 = *(float64x2_t *)v555;
        v1313 = *(float64x2_t *)(v555 + 192);
        v1308 = *(float64x2_t *)(v555 + 176);
        v560 = 8 * v556;
        v1303 = *(float64x2_t *)(v555 + 368);
        v1298 = *(float64x2_t *)(v555 + 352);
        v1293 = *(float64x2_t *)(v555 + 544);
        v1288 = *(float64x2_t *)(v555 + 528);
        v1283 = *(float64x2_t *)(v555 + 720);
        v1413 = *(float64x2_t *)(v555 + 704);
        v1408 = *(float64x2_t *)(v555 + 896);
        v1403 = *(float64x2_t *)(v555 + 880);
        v1278 = *(float64x2_t *)(v555 + 1072);
        v1273 = *(float64x2_t *)(v555 + 1056);
        v1268 = *(float64x2_t *)(v555 + 1248);
        v1263 = *(float64x2_t *)(v555 + 1232);
        v1398 = *(float64x2_t *)(v555 + 1424);
        v1258 = *(float64x2_t *)(v555 + 1408);
        v1253 = *(float64x2_t *)(v555 + 1600);
        v1248 = *(float64x2_t *)(v555 + 1584);
        v1243 = *(float64x2_t *)(v555 + 1776);
        v1238 = *(float64x2_t *)(v555 + 1760);
        v1233 = *(float64x2_t *)(v555 + 1952);
        v1228 = *(float64x2_t *)(v555 + 1936);
        v1223 = *(float64x2_t *)(v555 + 2128);
        v1218 = *(float64x2_t *)(v555 + 2112);
        v1213 = *(float64x2_t *)(v555 + 2304);
        v1208 = *(float64x2_t *)(v555 + 2288);
        v1203 = *(float64x2_t *)(v555 + 2480);
        v1198 = *(float64x2_t *)(v555 + 2464);
        v1193 = *(float64x2_t *)(v555 + 2656);
        v1188 = *(float64x2_t *)(v555 + 2640);
        v561 = 3 * v556;
        v562 = *(int64x2_t **)v8;
        v1183 = *(float64x2_t *)(v555 + 2832);
        v1393 = *(float64x2_t *)(v555 + 2816);
        v1388 = *(float64x2_t *)(v555 + 3008);
        v1383 = *(float64x2_t *)(v555 + 2992);
        v1378 = *(float64x2_t *)(v555 + 3184);
        v1373 = *(float64x2_t *)(v555 + 3168);
        v1368 = *(float64x2_t *)(v555 + 3360);
        v1363 = *(float64x2_t *)(v555 + 3344);
        v1358 = *(float64x2_t *)(v555 + 3536);
        v1178 = *(float64x2_t *)(v555 + 3520);
        v1353 = *(float64x2_t *)(v555 + 3712);
        v1173 = *(float64x2_t *)(v555 + 3696);
        v1168 = *(float64x2_t *)(v555 + 752);
        v1163 = *(float64x2_t *)(v555 + 736);
        v1158 = *(float64x2_t *)(v555 + 928);
        v1348 = *(float64x2_t *)(v555 + 912);
        v1153 = *(float64x2_t *)(v555 + 1104);
        v1148 = *(float64x2_t *)(v555 + 1088);
        v1143 = *(float64x2_t *)(v555 + 1280);
        v1138 = *(float64x2_t *)(v555 + 1264);
        v1133 = *(float64x2_t *)(v555 + 1456);
        v1343 = *(float64x2_t *)(v555 + 1440);
        v1128 = *(float64x2_t *)(v555 + 1632);
        v1123 = *(float64x2_t *)(v555 + 1616);
        v1118 = *(float64x2_t *)(v555 + 1808);
        v1113 = *(float64x2_t *)(v555 + 1792);
        v1108 = *(float64x2_t *)(v555 + 1984);
        v1103 = *(float64x2_t *)(v555 + 1968);
        v1098 = *(float64x2_t *)(v555 + 2160);
        v1338 = *(float64x2_t *)(v555 + 2144);
        v1093 = *(float64x2_t *)(v555 + 2336);
        v1088 = *(float64x2_t *)(v555 + 2320);
        v1083 = *(float64x2_t *)(v555 + 2512);
        v1078 = *(float64x2_t *)(v555 + 2496);
        v1073 = *(float64x2_t *)(v555 + 2688);
        v1068 = *(float64x2_t *)(v555 + 2672);
        v1063 = *(float64x2_t *)(v555 + 2864);
        v1058 = *(float64x2_t *)(v555 + 2848);
        v1053 = *(float64x2_t *)(v555 + 3040);
        v1049 = *(float64x2_t *)(v555 + 3024);
        v1045 = *(float64x2_t *)(v555 + 3216);
        v1042 = *(float64x2_t *)(v555 + 3200);
        v1040 = *(float64x2_t *)(v555 + 3392);
        v1038 = *(float64x2_t *)(v555 + 3376);
        v1036 = *(float64x2_t *)(v555 + 3568);
        v1333 = *(float64x2_t *)(v555 + 3552);
        v1034 = *(float64x2_t *)(v555 + 3744);
        v1328 = *(float64x2_t *)(v555 + 3728);
        v563 = *(float64x2_t *)(v555 + 1488);
        v1032 = *(float64x2_t *)(v555 + 1472);
        v1030 = *(float64x2_t *)(v555 + 1664);
        v1028 = *(float64x2_t *)(v555 + 1648);
        v1026 = *(float64x2_t *)(v555 + 1840);
        v1024 = *(float64x2_t *)(v555 + 1824);
        v1022 = *(float64x2_t *)(v555 + 2016);
        v1020 = *(float64x2_t *)(v555 + 2000);
        v1018 = *(float64x2_t *)(v555 + 2192);
        v1016 = *(float64x2_t *)(v555 + 2176);
        v1014 = *(float64x2_t *)(v555 + 2368);
        v1012 = *(float64x2_t *)(v555 + 2352);
        v564 = *(float64x2_t *)(v555 + 2544);
        v1010 = *(float64x2_t *)(v555 + 2528);
        v565 = *(float64x2_t *)(v555 + 2720);
        v1008 = *(float64x2_t *)(v555 + 2704);
        v566 = *(float64x2_t *)(v555 + 2896);
        v1006 = *(float64x2_t *)(v555 + 2880);
        v567 = *(float64x2_t *)(v555 + 3072);
        v568 = *(float64x2_t *)(v555 + 3056);
        v569 = *(float64x2_t *)(v555 + 3248);
        v1004 = *(float64x2_t *)(v555 + 3232);
        v570 = *(float64x2_t *)(v555 + 3424);
        v1002 = *(float64x2_t *)(v555 + 3408);
        v571 = *(float64x2_t *)(v555 + 3600);
        v1000 = *(float64x2_t *)(v555 + 3584);
        v998 = *(float64x2_t *)(v555 + 3776);
        v996 = *(float64x2_t *)(v555 + 3760);
        v994 = *(float64x2_t *)(v555 + 2224);
        v992 = *(float64x2_t *)(v555 + 2208);
        v572 = *(float64x2_t *)(v555 + 2400);
        v990 = *(float64x2_t *)(v555 + 2384);
        v573 = *(float64x2_t *)(v555 + 2576);
        v988 = *(float64x2_t *)(v555 + 2560);
        v574 = *(float64x2_t *)(v555 + 2752);
        v986 = *(float64x2_t *)(v555 + 2736);
        v575 = *(float64x2_t *)(v555 + 2928);
        v984 = *(float64x2_t *)(v555 + 2912);
        v576 = *(float64x2_t *)(v555 + 3104);
        v982 = *(float64x2_t *)(v555 + 3088);
        v577 = *(float64x2_t *)(v555 + 3280);
        v980 = *(float64x2_t *)(v555 + 3264);
        v578 = *(float64x2_t *)(v555 + 3456);
        v978 = *(float64x2_t *)(v555 + 3440);
        v579 = *(float64x2_t *)(v555 + 3632);
        v976 = *(float64x2_t *)(v555 + 3616);
        v974 = *(float64x2_t *)(v555 + 3808);
        v972 = *(float64x2_t *)(v555 + 3792);
        v580 = *(float64x2_t *)(v555 + 2960);
        v581 = *(float64x2_t *)(v555 + 2944);
        v582 = *(float64x2_t *)(v555 + 3136);
        v583 = *(float64x2_t *)(v555 + 3120);
        v584 = *(float64x2_t *)(v555 + 3312);
        v970 = *(float64x2_t *)(v555 + 3296);
        v585 = *(float64x2_t *)(v555 + 3488);
        v586 = *(float64x2_t *)(v555 + 3472);
        v587 = *(float64x2_t *)(v555 + 3664);
        v968 = *(float64x2_t *)(v555 + 3648);
        v588 = *(float64x2_t *)(v555 + 3840);
        v966 = *(float64x2_t *)(v555 + 3824);
        v589 = *(float64x2_t *)(v555 + 3680);
        v590 = *(float64x2_t *)(v555 + 3856);
        do
        {
          v1418 = v590;
          v924 = v589;
          v926 = v587;
          v1423 = v588;
          v1428 = v586;
          v928 = v585;
          v930 = v584;
          v932 = v583;
          v934 = v582;
          v1433 = v581;
          v936 = v580;
          v938 = v578;
          v1438 = v579;
          v940 = v577;
          v942 = v576;
          v944 = v575;
          v946 = v574;
          v948 = v573;
          v950 = v572;
          v952 = v571;
          v954 = v570;
          v956 = v569;
          v958 = v566;
          v1443 = v568;
          v1447 = v567;
          v960 = v565;
          v962 = v564;
          v964 = v563;
          v591 = *(float64x2_t *)((char *)v562 + 8 * v556);
          v592 = (float64x2_t *)&v562->i8[v560 + v560];
          v593 = *v592;
          v594 = (float64x2_t *)((char *)v592 + v560);
          *(_QWORD *)&v595.f64[0] = vdupq_laneq_s64((int64x2_t)v593, 1).u64[0];
          v596 = *v594;
          v597 = (float64x2_t *)((char *)v594 + v560);
          v598 = *v597;
          v599 = (float64x2_t *)((char *)v597 + v560);
          v600 = *v599;
          v601 = (float64x2_t)vzip1q_s64((int64x2_t)v593, (int64x2_t)v596);
          v602 = (float64x2_t *)((char *)v599 + v560);
          v603 = *v602;
          v604 = (float64x2_t *)((char *)v602 + v560);
          v605 = *v604;
          v606 = (float64x2_t *)((char *)v604 + v560);
          v607 = *v606;
          v608 = (float64x2_t *)((char *)v606 + v560);
          v609 = *v608;
          v610 = (float64x2_t *)((char *)v608 + v560);
          v611 = *v610;
          v595.f64[1] = v596.f64[1];
          v612 = (float64x2_t *)((char *)v610 + v560);
          v613 = *v612;
          v614 = (float64x2_t *)((char *)v612 + v560);
          v615 = *v614;
          v616 = (float64x2_t *)((char *)v614 + v560);
          v617 = (float64x2_t)vzip1q_s64(*v562, (int64x2_t)v591);
          v618 = (float64x2_t)vzip2q_s64(*v562, (int64x2_t)v591);
          v619 = vmlaq_laneq_f64(vmulq_n_f64(v601, *(double *)v562->i64), v595, *(float64x2_t *)v562, 1);
          v620 = vmlaq_laneq_f64(vmulq_n_f64(v617, v591.f64[0]), v618, v591, 1);
          v621 = vmlaq_laneq_f64(vmulq_n_f64(v617, v593.f64[0]), v618, v593, 1);
          v622 = vmlaq_laneq_f64(vmulq_n_f64(v601, v591.f64[0]), v595, v591, 1);
          v623 = vmlaq_laneq_f64(vmulq_n_f64(v601, v593.f64[0]), v595, v593, 1);
          v624 = vmlaq_laneq_f64(vmulq_n_f64(v617, v596.f64[0]), v618, v596, 1);
          v625 = vmlaq_laneq_f64(vmulq_n_f64(v601, v596.f64[0]), v595, v596, 1);
          v626 = vmlaq_laneq_f64(vmulq_n_f64(v617, v598.f64[0]), v618, v598, 1);
          v627 = vmlaq_laneq_f64(vmulq_n_f64(v617, v600.f64[0]), v618, v600, 1);
          v628 = vmlaq_laneq_f64(vmulq_n_f64(v601, v598.f64[0]), v595, v598, 1);
          v629 = vmlaq_laneq_f64(vmulq_n_f64(v601, v600.f64[0]), v595, v600, 1);
          v630 = vmlaq_laneq_f64(vmulq_n_f64(v617, v603.f64[0]), v618, v603, 1);
          v631 = vmlaq_laneq_f64(vmulq_n_f64(v601, v603.f64[0]), v595, v603, 1);
          v632 = vmlaq_laneq_f64(vmulq_n_f64(v617, v605.f64[0]), v618, v605, 1);
          v633 = vmlaq_laneq_f64(vmulq_n_f64(v617, v607.f64[0]), v618, v607, 1);
          v634 = vmlaq_laneq_f64(vmulq_n_f64(v601, v605.f64[0]), v595, v605, 1);
          v635 = vmlaq_laneq_f64(vmulq_n_f64(v601, v607.f64[0]), v595, v607, 1);
          v636 = vmlaq_laneq_f64(vmulq_n_f64(v617, v609.f64[0]), v618, v609, 1);
          v637 = vmlaq_laneq_f64(vmulq_n_f64(v601, v609.f64[0]), v595, v609, 1);
          v638 = vmlaq_laneq_f64(vmulq_n_f64(v617, v611.f64[0]), v618, v611, 1);
          v921 = vmlaq_laneq_f64(vmulq_n_f64(v601, v611.f64[0]), v595, v611, 1);
          v916 = vmlaq_laneq_f64(vmulq_n_f64(v601, v613.f64[0]), v595, v613, 1);
          v909 = vmlaq_laneq_f64(vmulq_n_f64(v601, v615.f64[0]), v595, v615, 1);
          v913 = vmlaq_laneq_f64(vmulq_n_f64(v617, v616->f64[0]), v618, *v616, 1);
          v905 = vmlaq_laneq_f64(vmulq_n_f64(v601, v616->f64[0]), v595, *v616, 1);
          v639 = (float64x2_t *)((char *)v616 + v560);
          v901 = vmlaq_laneq_f64(vmulq_n_f64(v617, v639->f64[0]), v618, *v639, 1);
          v897 = vmlaq_laneq_f64(vmulq_n_f64(v601, v639->f64[0]), v595, *v639, 1);
          v640 = (float64x2_t *)((char *)v639 + v560);
          v893 = vmlaq_laneq_f64(vmulq_n_f64(v617, v640->f64[0]), v618, *v640, 1);
          v889 = vmlaq_laneq_f64(vmulq_n_f64(v601, v640->f64[0]), v595, *v640, 1);
          v641 = (float64x2_t *)((char *)v640 + v560);
          v885 = vmlaq_laneq_f64(vmulq_n_f64(v617, v641->f64[0]), v618, *v641, 1);
          v881 = vmlaq_laneq_f64(vmulq_n_f64(v601, v641->f64[0]), v595, *v641, 1);
          v642 = (float64x2_t *)((char *)v641 + v560);
          v877 = vmlaq_laneq_f64(vmulq_n_f64(v617, v642->f64[0]), v618, *v642, 1);
          v874 = vmlaq_laneq_f64(vmulq_n_f64(v601, v642->f64[0]), v595, *v642, 1);
          v643 = (float64x2_t *)((char *)v642 + v560);
          v871 = vmlaq_laneq_f64(vmulq_n_f64(v617, v643->f64[0]), v618, *v643, 1);
          v868 = vmlaq_laneq_f64(vmulq_n_f64(v601, v643->f64[0]), v595, *v643, 1);
          v644 = (float64x2_t *)((char *)v643 + v560);
          v866 = vmlaq_laneq_f64(vmulq_n_f64(v617, v644->f64[0]), v618, *v644, 1);
          v864 = vmlaq_laneq_f64(vmulq_n_f64(v601, v644->f64[0]), v595, *v644, 1);
          v645 = (float64x2_t *)((char *)v644 + v560);
          v862 = vmlaq_laneq_f64(vmulq_n_f64(v617, v645->f64[0]), v618, *v645, 1);
          v860 = vmlaq_laneq_f64(vmulq_n_f64(v601, v645->f64[0]), v595, *v645, 1);
          v646 = *(float64x2_t *)((char *)v645 + 8 * v556);
          v647 = vmlaq_laneq_f64(vmulq_n_f64(v601, v646.f64[0]), v595, v646, 1);
          v648 = vsubq_f64(v1318, vmlaq_laneq_f64(vmulq_n_f64(v617, *(double *)v562->i64), v618, *(float64x2_t *)v562, 1));
          v649 = vsubq_f64(v1308, v620);
          v650 = vsubq_f64(v1298, v621);
          v651 = vsubq_f64(v1288, v624);
          v1413 = vsubq_f64(v1413, v626);
          v1408 = vsubq_f64(v1408, v629);
          v1403 = vsubq_f64(v1403, v627);
          v652 = vsubq_f64(v1263, v632);
          v1398 = vsubq_f64(v1398, v635);
          v1393 = vsubq_f64(v1393, v885);
          v1388 = vsubq_f64(v1388, v874);
          v1383 = vsubq_f64(v1383, v877);
          v1378 = vsubq_f64(v1378, v868);
          v1373 = vsubq_f64(v1373, v871);
          v1368 = vsubq_f64(v1368, v864);
          v1363 = vsubq_f64(v1363, v866);
          v1358 = vsubq_f64(v1358, v860);
          v1353 = vsubq_f64(v1353, v647);
          v1323 = vsubq_f64(v1323, v619);
          *(float64x2_t *)v555 = v648;
          *(float64x2_t *)(v555 + 16) = v1323;
          v1318 = v648;
          v1313 = vsubq_f64(v1313, v622);
          *(float64x2_t *)(v555 + 176) = v649;
          *(float64x2_t *)(v555 + 192) = v1313;
          v1308 = v649;
          v1303 = vsubq_f64(v1303, v623);
          *(float64x2_t *)(v555 + 352) = v650;
          *(float64x2_t *)(v555 + 368) = v1303;
          v1298 = v650;
          v1293 = vsubq_f64(v1293, v625);
          *(float64x2_t *)(v555 + 528) = v651;
          *(float64x2_t *)(v555 + 544) = v1293;
          v1288 = v651;
          v1283 = vsubq_f64(v1283, v628);
          *(float64x2_t *)(v555 + 704) = v1413;
          *(float64x2_t *)(v555 + 720) = v1283;
          *(float64x2_t *)(v555 + 896) = v1408;
          *(float64x2_t *)(v555 + 880) = v1403;
          v1278 = vsubq_f64(v1278, v631);
          *(float64x2_t *)(v555 + 1072) = v1278;
          v1273 = vsubq_f64(v1273, v630);
          *(float64x2_t *)(v555 + 1056) = v1273;
          v1268 = vsubq_f64(v1268, v634);
          *(float64x2_t *)(v555 + 1232) = v652;
          *(float64x2_t *)(v555 + 1248) = v1268;
          v1263 = v652;
          v1258 = vsubq_f64(v1258, v633);
          *(float64x2_t *)(v555 + 1408) = v1258;
          *(float64x2_t *)(v555 + 1424) = v1398;
          v1253 = vsubq_f64(v1253, v637);
          *(float64x2_t *)(v555 + 1600) = v1253;
          v1248 = vsubq_f64(v1248, v636);
          *(float64x2_t *)(v555 + 1584) = v1248;
          v1243 = vsubq_f64(v1243, v921);
          *(float64x2_t *)(v555 + 1776) = v1243;
          v1238 = vsubq_f64(v1238, v638);
          *(float64x2_t *)(v555 + 1760) = v1238;
          v1233 = vsubq_f64(v1233, v916);
          *(float64x2_t *)(v555 + 1952) = v1233;
          v1228 = vsubq_f64(v1228, vmlaq_laneq_f64(vmulq_n_f64(v617, v613.f64[0]), v618, v613, 1));
          *(float64x2_t *)(v555 + 1936) = v1228;
          v1223 = vsubq_f64(v1223, v909);
          *(float64x2_t *)(v555 + 2128) = v1223;
          v1218 = vsubq_f64(v1218, vmlaq_laneq_f64(vmulq_n_f64(v617, v615.f64[0]), v618, v615, 1));
          *(float64x2_t *)(v555 + 2112) = v1218;
          v1213 = vsubq_f64(v1213, v905);
          *(float64x2_t *)(v555 + 2304) = v1213;
          v1208 = vsubq_f64(v1208, v913);
          *(float64x2_t *)(v555 + 2288) = v1208;
          v1203 = vsubq_f64(v1203, v897);
          *(float64x2_t *)(v555 + 2480) = v1203;
          v1198 = vsubq_f64(v1198, v901);
          *(float64x2_t *)(v555 + 2464) = v1198;
          v1193 = vsubq_f64(v1193, v889);
          *(float64x2_t *)(v555 + 2656) = v1193;
          v1188 = vsubq_f64(v1188, v893);
          *(float64x2_t *)(v555 + 2640) = v1188;
          v1183 = vsubq_f64(v1183, v881);
          *(float64x2_t *)(v555 + 2832) = v1183;
          *(float64x2_t *)(v555 + 2816) = v1393;
          *(float64x2_t *)(v555 + 3008) = v1388;
          *(float64x2_t *)(v555 + 2992) = v1383;
          *(float64x2_t *)(v555 + 3184) = v1378;
          *(float64x2_t *)(v555 + 3168) = v1373;
          *(float64x2_t *)(v555 + 3360) = v1368;
          *(float64x2_t *)(v555 + 3344) = v1363;
          v1178 = vsubq_f64(v1178, v862);
          *(float64x2_t *)(v555 + 3520) = v1178;
          *(float64x2_t *)(v555 + 3536) = v1358;
          v1173 = vsubq_f64(v1173, vmlaq_laneq_f64(vmulq_n_f64(v617, v646.f64[0]), v618, v646, 1));
          *(float64x2_t *)(v555 + 3696) = v1173;
          *(float64x2_t *)(v555 + 3712) = v1353;
          v653 = (int64x2_t *)((char *)v557 + 8 * (4 * v556 + v559));
          v654 = *(float64x2_t *)((char *)v653 + 8 * v556);
          v655 = (float64x2_t)v653[v556];
          *(_QWORD *)&v648.f64[0] = vdupq_laneq_s64((int64x2_t)v655, 1).u64[0];
          v656 = *(float64x2_t *)((char *)v653 + 24 * v556);
          v657 = (float64x2_t)v653[2 * v556];
          v658 = *(float64x2_t *)((char *)v653 + 40 * v556);
          v659 = (float64x2_t)v653[3 * v556];
          v660 = *(float64x2_t *)((char *)v653 + 56 * v556);
          v661 = (float64x2_t)v653[4 * v556];
          v662 = *(float64x2_t *)((char *)v653 + 72 * v556);
          v663 = (float64x2_t)v653[5 * v556];
          v664 = (float64x2_t)vzip1q_s64((int64x2_t)v655, (int64x2_t)v656);
          v665 = *(float64x2_t *)((char *)v653 + 88 * v556);
          v666 = (float64x2_t)v653[6 * v556];
          *(_QWORD *)&v648.f64[1] = v653->i64[v561 + 1];
          v667 = *(float64x2_t *)((char *)v653 + 104 * v556);
          v668 = (float64x2_t)vzip1q_s64(*v653, (int64x2_t)v654);
          v669 = (float64x2_t)vzip2q_s64(*v653, (int64x2_t)v654);
          v670 = vmlaq_laneq_f64(vmulq_n_f64(v668, v654.f64[0]), v669, v654, 1);
          v671 = vmlaq_laneq_f64(vmulq_n_f64(v664, v654.f64[0]), v648, v654, 1);
          v672 = vmlaq_laneq_f64(vmulq_n_f64(v668, v655.f64[0]), v669, v655, 1);
          v673 = vmlaq_laneq_f64(vmulq_n_f64(v668, v656.f64[0]), v669, v656, 1);
          v674 = vmlaq_laneq_f64(vmulq_n_f64(v664, v655.f64[0]), v648, v655, 1);
          v675 = vmlaq_laneq_f64(vmulq_n_f64(v664, v656.f64[0]), v648, v656, 1);
          v676 = vmlaq_laneq_f64(vmulq_n_f64(v668, v657.f64[0]), v669, v657, 1);
          v677 = vmlaq_laneq_f64(vmulq_n_f64(v664, v657.f64[0]), v648, v657, 1);
          v678 = vmlaq_laneq_f64(vmulq_n_f64(v668, v658.f64[0]), v669, v658, 1);
          v679 = vmlaq_laneq_f64(vmulq_n_f64(v668, v659.f64[0]), v669, v659, 1);
          v680 = vmlaq_laneq_f64(vmulq_n_f64(v664, v658.f64[0]), v648, v658, 1);
          v681 = vmlaq_laneq_f64(vmulq_n_f64(v664, v659.f64[0]), v648, v659, 1);
          v922 = vmlaq_laneq_f64(vmulq_n_f64(v668, v662.f64[0]), v669, v662, 1);
          v918 = vmlaq_laneq_f64(vmulq_n_f64(v664, v662.f64[0]), v648, v662, 1);
          v910 = vmlaq_laneq_f64(vmulq_n_f64(v668, v665.f64[0]), v669, v665, 1);
          v902 = vmlaq_laneq_f64(vmulq_n_f64(v664, v665.f64[0]), v648, v665, 1);
          v906 = vmlaq_laneq_f64(vmulq_n_f64(v668, v666.f64[0]), v669, v666, 1);
          v682 = vmlaq_laneq_f64(vmulq_n_f64(v664, v666.f64[0]), v648, v666, 1);
          v898 = vmlaq_laneq_f64(vmulq_n_f64(v668, v667.f64[0]), v669, v667, 1);
          v894 = vmlaq_laneq_f64(vmulq_n_f64(v664, v667.f64[0]), v648, v667, 1);
          v683 = (float64x2_t)v653[7 * v556];
          v890 = vmlaq_laneq_f64(vmulq_n_f64(v668, v683.f64[0]), v669, v683, 1);
          v886 = vmlaq_laneq_f64(vmulq_n_f64(v664, v683.f64[0]), v648, v683, 1);
          v684 = *(float64x2_t *)((char *)v653 + 120 * v556);
          v882 = vmlaq_laneq_f64(vmulq_n_f64(v668, v684.f64[0]), v669, v684, 1);
          v878 = vmlaq_laneq_f64(vmulq_n_f64(v664, v684.f64[0]), v648, v684, 1);
          v685 = (float64x2_t)v653[8 * v556];
          v686 = vmlaq_laneq_f64(vmulq_n_f64(v668, v685.f64[0]), v669, v685, 1);
          v687 = vmlaq_laneq_f64(vmulq_n_f64(v664, v685.f64[0]), v648, v685, 1);
          v688 = *(float64x2_t *)((char *)v653 + 136 * v556);
          v689 = vsubq_f64(v1163, vmlaq_laneq_f64(vmulq_n_f64(v668, *(double *)v653->i64), v669, *(float64x2_t *)v653, 1));
          v1348 = vsubq_f64(v1348, v670);
          v690 = vsubq_f64(v1138, v673);
          v1343 = vsubq_f64(v1343, v676);
          v1338 = vsubq_f64(v1338, vmlaq_laneq_f64(vmulq_n_f64(v668, v661.f64[0]), v669, v661, 1));
          v1333 = vsubq_f64(v1333, v686);
          v1328 = vsubq_f64(v1328, vmlaq_laneq_f64(vmulq_n_f64(v668, v688.f64[0]), v669, v688, 1));
          v1168 = vsubq_f64(v1168, vmlaq_laneq_f64(vmulq_n_f64(v664, *(double *)v653->i64), v648, *(float64x2_t *)v653, 1));
          *(float64x2_t *)(v555 + 736) = v689;
          *(float64x2_t *)(v555 + 752) = v1168;
          v1163 = v689;
          v1158 = vsubq_f64(v1158, v671);
          *(float64x2_t *)(v555 + 912) = v1348;
          *(float64x2_t *)(v555 + 928) = v1158;
          v1148 = vsubq_f64(v1148, v672);
          *(float64x2_t *)(v555 + 1088) = v1148;
          v1153 = vsubq_f64(v1153, v674);
          *(float64x2_t *)(v555 + 1104) = v1153;
          v1143 = vsubq_f64(v1143, v675);
          *(float64x2_t *)(v555 + 1264) = v690;
          *(float64x2_t *)(v555 + 1280) = v1143;
          v1138 = v690;
          v1133 = vsubq_f64(v1133, v677);
          *(float64x2_t *)(v555 + 1456) = v1133;
          *(float64x2_t *)(v555 + 1440) = v1343;
          v1123 = vsubq_f64(v1123, v678);
          *(float64x2_t *)(v555 + 1616) = v1123;
          v1128 = vsubq_f64(v1128, v680);
          *(float64x2_t *)(v555 + 1632) = v1128;
          v1118 = vsubq_f64(v1118, v681);
          *(float64x2_t *)(v555 + 1808) = v1118;
          v1113 = vsubq_f64(v1113, v679);
          *(float64x2_t *)(v555 + 1792) = v1113;
          v1108 = vsubq_f64(v1108, vmlaq_laneq_f64(vmulq_n_f64(v664, v660.f64[0]), v648, v660, 1));
          *(float64x2_t *)(v555 + 1984) = v1108;
          v1103 = vsubq_f64(v1103, vmlaq_laneq_f64(vmulq_n_f64(v668, v660.f64[0]), v669, v660, 1));
          *(float64x2_t *)(v555 + 1968) = v1103;
          *(float64x2_t *)(v555 + 2144) = v1338;
          v1098 = vsubq_f64(v1098, vmlaq_laneq_f64(vmulq_n_f64(v664, v661.f64[0]), v648, v661, 1));
          *(float64x2_t *)(v555 + 2160) = v1098;
          v1093 = vsubq_f64(v1093, v918);
          *(float64x2_t *)(v555 + 2336) = v1093;
          v1088 = vsubq_f64(v1088, v922);
          *(float64x2_t *)(v555 + 2320) = v1088;
          v1083 = vsubq_f64(v1083, vmlaq_laneq_f64(vmulq_n_f64(v664, v663.f64[0]), v648, v663, 1));
          *(float64x2_t *)(v555 + 2512) = v1083;
          v1078 = vsubq_f64(v1078, vmlaq_laneq_f64(vmulq_n_f64(v668, v663.f64[0]), v669, v663, 1));
          *(float64x2_t *)(v555 + 2496) = v1078;
          v1068 = vsubq_f64(v1068, v910);
          *(float64x2_t *)(v555 + 2672) = v1068;
          v1073 = vsubq_f64(v1073, v902);
          *(float64x2_t *)(v555 + 2688) = v1073;
          v1063 = vsubq_f64(v1063, v682);
          *(float64x2_t *)(v555 + 2864) = v1063;
          v1058 = vsubq_f64(v1058, v906);
          *(float64x2_t *)(v555 + 2848) = v1058;
          v1053 = vsubq_f64(v1053, v894);
          *(float64x2_t *)(v555 + 3040) = v1053;
          v1049 = vsubq_f64(v1049, v898);
          *(float64x2_t *)(v555 + 3024) = v1049;
          v1042 = vsubq_f64(v1042, v890);
          *(float64x2_t *)(v555 + 3200) = v1042;
          v1045 = vsubq_f64(v1045, v886);
          *(float64x2_t *)(v555 + 3216) = v1045;
          v1040 = vsubq_f64(v1040, v878);
          *(float64x2_t *)(v555 + 3392) = v1040;
          v1038 = vsubq_f64(v1038, v882);
          *(float64x2_t *)(v555 + 3376) = v1038;
          v1036 = vsubq_f64(v1036, v687);
          *(float64x2_t *)(v555 + 3568) = v1036;
          *(float64x2_t *)(v555 + 3552) = v1333;
          *(float64x2_t *)(v555 + 3728) = v1328;
          v1034 = vsubq_f64(v1034, vmlaq_laneq_f64(vmulq_n_f64(v664, v688.f64[0]), v648, v688, 1));
          *(float64x2_t *)(v555 + 3744) = v1034;
          v691 = (int64x2_t *)((char *)v557 + 8 * (8 * v556 + v559));
          v692 = (float64x2_t)v691[v556];
          v693 = *(float64x2_t *)((char *)v691 + 8 * v556);
          v694 = *(float64x2_t *)((char *)v691 + 24 * v556);
          *(_QWORD *)&v668.f64[0] = vdupq_laneq_s64((int64x2_t)v692, 1).u64[0];
          v695 = (float64x2_t)v691[2 * v556];
          v696 = *(float64x2_t *)((char *)v691 + 40 * v556);
          v697 = (float64x2_t)v691[3 * v556];
          v698 = *(float64x2_t *)((char *)v691 + 56 * v556);
          v699 = (float64x2_t)v691[4 * v556];
          v700 = *(float64x2_t *)((char *)v691 + 72 * v556);
          v701 = (float64x2_t)v691[5 * v556];
          v702 = *(float64x2_t *)((char *)v691 + 88 * v556);
          v703 = (float64x2_t)v691[6 * v556];
          v704 = (float64x2_t)vzip1q_s64((int64x2_t)v692, (int64x2_t)v694);
          v705 = (float64x2_t)vzip1q_s64(*v691, (int64x2_t)v693);
          v706 = (float64x2_t)vzip2q_s64(*v691, (int64x2_t)v693);
          *(_QWORD *)&v668.f64[1] = v691->i64[v561 + 1];
          v707 = vmlaq_laneq_f64(vmulq_n_f64(v705, *(double *)v691->i64), v706, *(float64x2_t *)v691, 1);
          v708 = vmlaq_laneq_f64(vmulq_n_f64(v705, v693.f64[0]), v706, v693, 1);
          v709 = vmlaq_laneq_f64(vmulq_n_f64(v704, *(double *)v691->i64), v668, *(float64x2_t *)v691, 1);
          v710 = vmlaq_laneq_f64(vmulq_n_f64(v704, v693.f64[0]), v668, v693, 1);
          v711 = vmlaq_laneq_f64(vmulq_n_f64(v705, v692.f64[0]), v706, v692, 1);
          v712 = vmlaq_laneq_f64(vmulq_n_f64(v704, v692.f64[0]), v668, v692, 1);
          v713 = vmlaq_laneq_f64(vmulq_n_f64(v705, v694.f64[0]), v706, v694, 1);
          v714 = vmlaq_laneq_f64(vmulq_n_f64(v705, v695.f64[0]), v706, v695, 1);
          v715 = vmlaq_laneq_f64(vmulq_n_f64(v704, v694.f64[0]), v668, v694, 1);
          v716 = vmlaq_laneq_f64(vmulq_n_f64(v704, v695.f64[0]), v668, v695, 1);
          v717 = vmlaq_laneq_f64(vmulq_n_f64(v705, v696.f64[0]), v706, v696, 1);
          v718 = vmlaq_laneq_f64(vmulq_n_f64(v704, v696.f64[0]), v668, v696, 1);
          v719 = vmlaq_laneq_f64(vmulq_n_f64(v705, v697.f64[0]), v706, v697, 1);
          v720 = vmlaq_laneq_f64(vmulq_n_f64(v705, v698.f64[0]), v706, v698, 1);
          v721 = vmlaq_laneq_f64(vmulq_n_f64(v704, v697.f64[0]), v668, v697, 1);
          v722 = vmlaq_laneq_f64(vmulq_n_f64(v704, v698.f64[0]), v668, v698, 1);
          v723 = vmlaq_laneq_f64(vmulq_n_f64(v705, v699.f64[0]), v706, v699, 1);
          v724 = vmlaq_laneq_f64(vmulq_n_f64(v704, v699.f64[0]), v668, v699, 1);
          v725 = vmlaq_laneq_f64(vmulq_n_f64(v705, v700.f64[0]), v706, v700, 1);
          v726 = vmlaq_laneq_f64(vmulq_n_f64(v705, v701.f64[0]), v706, v701, 1);
          v727 = vmlaq_laneq_f64(vmulq_n_f64(v704, v700.f64[0]), v668, v700, 1);
          v728 = vmlaq_laneq_f64(vmulq_n_f64(v704, v701.f64[0]), v668, v701, 1);
          v729 = vmlaq_laneq_f64(vmulq_n_f64(v705, v702.f64[0]), v706, v702, 1);
          v730 = vmlaq_laneq_f64(vmulq_n_f64(v704, v702.f64[0]), v668, v702, 1);
          v731 = vmlaq_laneq_f64(vmulq_n_f64(v705, v703.f64[0]), v706, v703, 1);
          v732 = vmlaq_laneq_f64(vmulq_n_f64(v704, v703.f64[0]), v668, v703, 1);
          v733 = *(float64x2_t *)((char *)v691 + 104 * v556);
          v734 = vmlaq_laneq_f64(vmulq_n_f64(v705, v733.f64[0]), v706, v733, 1);
          v735 = vmlaq_laneq_f64(vmulq_n_f64(v704, v733.f64[0]), v668, v733, 1);
          v736 = vsubq_f64(v1032, v707);
          v563 = vsubq_f64(v964, v709);
          v737 = vsubq_f64(v1030, v710);
          v738 = vsubq_f64(v1024, v711);
          v739 = vsubq_f64(v1026, v712);
          v740 = vsubq_f64(v1020, v713);
          v741 = vsubq_f64(v1016, v714);
          v742 = vsubq_f64(v1018, v716);
          v743 = vsubq_f64(v1014, v718);
          v744 = vsubq_f64(v1010, v719);
          v745 = vsubq_f64(v1008, v720);
          v564 = vsubq_f64(v962, v721);
          v565 = vsubq_f64(v960, v722);
          v566 = vsubq_f64(v958, v724);
          v568 = vsubq_f64(v1443, v725);
          v746 = vsubq_f64(v1004, v726);
          v567 = vsubq_f64(v1447, v727);
          v569 = vsubq_f64(v956, v728);
          v747 = vsubq_f64(v1002, v729);
          v570 = vsubq_f64(v954, v730);
          v748 = vsubq_f64(v1000, v731);
          v571 = vsubq_f64(v952, v732);
          *(float64x2_t *)(v555 + 1488) = v563;
          v1032 = v736;
          *(float64x2_t *)(v555 + 1472) = v736;
          v1030 = v737;
          *(float64x2_t *)(v555 + 1664) = v737;
          v1028 = vsubq_f64(v1028, v708);
          *(float64x2_t *)(v555 + 1648) = v1028;
          v1026 = v739;
          *(float64x2_t *)(v555 + 1840) = v739;
          v1024 = v738;
          *(float64x2_t *)(v555 + 1824) = v738;
          v1022 = vsubq_f64(v1022, v715);
          *(float64x2_t *)(v555 + 2016) = v1022;
          v1020 = v740;
          *(float64x2_t *)(v555 + 2000) = v740;
          v1018 = v742;
          *(float64x2_t *)(v555 + 2192) = v742;
          v1016 = v741;
          *(float64x2_t *)(v555 + 2176) = v741;
          v1014 = v743;
          *(float64x2_t *)(v555 + 2368) = v743;
          v1012 = vsubq_f64(v1012, v717);
          *(float64x2_t *)(v555 + 2352) = v1012;
          *(float64x2_t *)(v555 + 2544) = v564;
          v1010 = v744;
          *(float64x2_t *)(v555 + 2528) = v744;
          *(float64x2_t *)(v555 + 2720) = v565;
          v1008 = v745;
          *(float64x2_t *)(v555 + 2704) = v745;
          *(float64x2_t *)(v555 + 2896) = v566;
          v1006 = vsubq_f64(v1006, v723);
          *(float64x2_t *)(v555 + 2880) = v1006;
          *(float64x2_t *)(v555 + 3072) = v567;
          *(float64x2_t *)(v555 + 3056) = v568;
          *(float64x2_t *)(v555 + 3248) = v569;
          v1004 = v746;
          *(float64x2_t *)(v555 + 3232) = v746;
          *(float64x2_t *)(v555 + 3424) = v570;
          v1002 = v747;
          *(float64x2_t *)(v555 + 3408) = v747;
          *(float64x2_t *)(v555 + 3600) = v571;
          v1000 = v748;
          *(float64x2_t *)(v555 + 3584) = v748;
          v996 = vsubq_f64(v996, v734);
          *(float64x2_t *)(v555 + 3760) = v996;
          v998 = vsubq_f64(v998, v735);
          *(float64x2_t *)(v555 + 3776) = v998;
          v749 = (int64x2_t *)((char *)v557 + 8 * (12 * v556 + v559));
          v750 = (float64x2_t)v749[v556];
          v751 = *(float64x2_t *)((char *)v749 + 8 * v556);
          v752 = *(float64x2_t *)((char *)v749 + 24 * v556);
          *(_QWORD *)&v736.f64[0] = vdupq_laneq_s64((int64x2_t)v750, 1).u64[0];
          v753 = (float64x2_t)v749[2 * v556];
          v754 = *(float64x2_t *)((char *)v749 + 40 * v556);
          v755 = (float64x2_t)v749[3 * v556];
          v756 = *(float64x2_t *)((char *)v749 + 56 * v556);
          v757 = (float64x2_t)vzip1q_s64((int64x2_t)v750, (int64x2_t)v752);
          v758 = (float64x2_t)v749[4 * v556];
          v759 = (float64x2_t)vzip1q_s64(*v749, (int64x2_t)v751);
          *(_QWORD *)&v736.f64[1] = v749->i64[v561 + 1];
          v760 = (float64x2_t)vzip2q_s64(*v749, (int64x2_t)v751);
          v761 = vmlaq_laneq_f64(vmulq_n_f64(v759, *(double *)v749->i64), v760, *(float64x2_t *)v749, 1);
          v762 = vmlaq_laneq_f64(vmulq_n_f64(v757, *(double *)v749->i64), v736, *(float64x2_t *)v749, 1);
          v763 = vmlaq_laneq_f64(vmulq_n_f64(v759, v751.f64[0]), v760, v751, 1);
          v764 = vmlaq_laneq_f64(vmulq_n_f64(v759, v750.f64[0]), v760, v750, 1);
          v765 = vmlaq_laneq_f64(vmulq_n_f64(v757, v751.f64[0]), v736, v751, 1);
          v766 = vmlaq_laneq_f64(vmulq_n_f64(v757, v750.f64[0]), v736, v750, 1);
          v767 = vmlaq_laneq_f64(vmulq_n_f64(v759, v752.f64[0]), v760, v752, 1);
          v768 = vmlaq_laneq_f64(vmulq_n_f64(v757, v752.f64[0]), v736, v752, 1);
          v769 = vmlaq_laneq_f64(vmulq_n_f64(v759, v753.f64[0]), v760, v753, 1);
          v770 = vmlaq_laneq_f64(vmulq_n_f64(v759, v754.f64[0]), v760, v754, 1);
          v771 = vmlaq_laneq_f64(vmulq_n_f64(v757, v753.f64[0]), v736, v753, 1);
          v772 = vmlaq_laneq_f64(vmulq_n_f64(v757, v754.f64[0]), v736, v754, 1);
          v773 = vmlaq_laneq_f64(vmulq_n_f64(v759, v755.f64[0]), v760, v755, 1);
          v774 = vmlaq_laneq_f64(vmulq_n_f64(v757, v755.f64[0]), v736, v755, 1);
          v775 = vmlaq_laneq_f64(vmulq_n_f64(v759, v756.f64[0]), v760, v756, 1);
          v776 = vmlaq_laneq_f64(vmulq_n_f64(v757, v756.f64[0]), v736, v756, 1);
          v777 = vmlaq_laneq_f64(vmulq_n_f64(v759, v758.f64[0]), v760, v758, 1);
          v778 = vmlaq_laneq_f64(vmulq_n_f64(v757, v758.f64[0]), v736, v758, 1);
          v779 = *(float64x2_t *)((char *)v749 + 72 * v556);
          v780 = vmlaq_laneq_f64(vmulq_n_f64(v759, v779.f64[0]), v760, v779, 1);
          v781 = vmlaq_laneq_f64(vmulq_n_f64(v757, v779.f64[0]), v736, v779, 1);
          v782 = vsubq_f64(v992, v761);
          v783 = vsubq_f64(v990, v763);
          v784 = vsubq_f64(v988, v764);
          v572 = vsubq_f64(v950, v765);
          v573 = vsubq_f64(v948, v766);
          v785 = vsubq_f64(v986, v767);
          v574 = vsubq_f64(v946, v768);
          v786 = vsubq_f64(v984, v769);
          v787 = vsubq_f64(v982, v770);
          v575 = vsubq_f64(v944, v771);
          v576 = vsubq_f64(v942, v772);
          v788 = vsubq_f64(v980, v773);
          v577 = vsubq_f64(v940, v774);
          v789 = vsubq_f64(v978, v775);
          v578 = vsubq_f64(v938, v776);
          v579 = vsubq_f64(v1438, v778);
          v994 = vsubq_f64(v994, v762);
          *(float64x2_t *)(v555 + 2224) = v994;
          v992 = v782;
          *(float64x2_t *)(v555 + 2208) = v782;
          *(float64x2_t *)(v555 + 2400) = v572;
          v990 = v783;
          *(float64x2_t *)(v555 + 2384) = v783;
          *(float64x2_t *)(v555 + 2576) = v573;
          v988 = v784;
          *(float64x2_t *)(v555 + 2560) = v784;
          *(float64x2_t *)(v555 + 2752) = v574;
          v986 = v785;
          *(float64x2_t *)(v555 + 2736) = v785;
          *(float64x2_t *)(v555 + 2928) = v575;
          v984 = v786;
          *(float64x2_t *)(v555 + 2912) = v786;
          *(float64x2_t *)(v555 + 3104) = v576;
          v982 = v787;
          *(float64x2_t *)(v555 + 3088) = v787;
          *(float64x2_t *)(v555 + 3280) = v577;
          v980 = v788;
          *(float64x2_t *)(v555 + 3264) = v788;
          *(float64x2_t *)(v555 + 3456) = v578;
          v978 = v789;
          *(float64x2_t *)(v555 + 3440) = v789;
          *(float64x2_t *)(v555 + 3632) = v579;
          v976 = vsubq_f64(v976, v777);
          *(float64x2_t *)(v555 + 3616) = v976;
          v972 = vsubq_f64(v972, v780);
          *(float64x2_t *)(v555 + 3792) = v972;
          v974 = vsubq_f64(v974, v781);
          *(float64x2_t *)(v555 + 3808) = v974;
          v790 = (int64x2_t *)((char *)v557 + 8 * (16 * v556 + v559));
          v791 = (float64x2_t)v790[v556];
          v792 = *(float64x2_t *)((char *)v790 + 8 * v556);
          v793 = *(float64x2_t *)((char *)v790 + 24 * v556);
          *(_QWORD *)&v788.f64[0] = vdupq_laneq_s64((int64x2_t)v791, 1).u64[0];
          v794 = (float64x2_t)v790[2 * v556];
          v795 = (float64x2_t)vzip1q_s64((int64x2_t)v791, (int64x2_t)v793);
          v796 = (float64x2_t)vzip1q_s64(*v790, (int64x2_t)v792);
          v797 = (float64x2_t)vzip2q_s64(*v790, (int64x2_t)v792);
          *(_QWORD *)&v788.f64[1] = v790->i64[v561 + 1];
          v798 = vmlaq_laneq_f64(vmulq_n_f64(v796, *(double *)v790->i64), v797, *(float64x2_t *)v790, 1);
          v799 = vmlaq_laneq_f64(vmulq_n_f64(v796, v792.f64[0]), v797, v792, 1);
          v800 = vmlaq_laneq_f64(vmulq_n_f64(v795, *(double *)v790->i64), v788, *(float64x2_t *)v790, 1);
          v801 = vmlaq_laneq_f64(vmulq_n_f64(v795, v792.f64[0]), v788, v792, 1);
          v802 = vmlaq_laneq_f64(vmulq_n_f64(v796, v791.f64[0]), v797, v791, 1);
          v803 = vmlaq_laneq_f64(vmulq_n_f64(v795, v791.f64[0]), v788, v791, 1);
          v804 = vmlaq_laneq_f64(vmulq_n_f64(v796, v793.f64[0]), v797, v793, 1);
          v805 = vmlaq_laneq_f64(vmulq_n_f64(v795, v793.f64[0]), v788, v793, 1);
          v806 = vmlaq_laneq_f64(vmulq_n_f64(v796, v794.f64[0]), v797, v794, 1);
          v807 = vmlaq_laneq_f64(vmulq_n_f64(v795, v794.f64[0]), v788, v794, 1);
          v808 = *(float64x2_t *)((char *)v790 + 40 * v556);
          v809 = vmlaq_laneq_f64(vmulq_n_f64(v796, v808.f64[0]), v797, v808, 1);
          v810 = vmlaq_laneq_f64(vmulq_n_f64(v795, v808.f64[0]), v788, v808, 1);
          v581 = vsubq_f64(v1433, v798);
          v580 = vsubq_f64(v936, v800);
          v583 = vsubq_f64(v932, v799);
          v582 = vsubq_f64(v934, v801);
          v584 = vsubq_f64(v930, v803);
          v586 = vsubq_f64(v1428, v804);
          v585 = vsubq_f64(v928, v805);
          v811 = vsubq_f64(v966, v809);
          v587 = vsubq_f64(v926, v807);
          v588 = vsubq_f64(v1423, v810);
          *(float64x2_t *)(v555 + 2960) = v580;
          *(float64x2_t *)(v555 + 2944) = v581;
          *(float64x2_t *)(v555 + 3136) = v582;
          *(float64x2_t *)(v555 + 3120) = v583;
          *(float64x2_t *)(v555 + 3312) = v584;
          v970 = vsubq_f64(v970, v802);
          *(float64x2_t *)(v555 + 3296) = v970;
          *(float64x2_t *)(v555 + 3488) = v585;
          *(float64x2_t *)(v555 + 3472) = v586;
          *(float64x2_t *)(v555 + 3664) = v587;
          v968 = vsubq_f64(v968, v806);
          *(float64x2_t *)(v555 + 3648) = v968;
          *(float64x2_t *)(v555 + 3840) = v588;
          v966 = v811;
          *(float64x2_t *)(v555 + 3824) = v811;
          v812 = (int64x2_t *)((char *)v557 + 8 * (20 * v556 + v559));
          v813 = *(float64x2_t *)((char *)v812 + 8 * v556);
          v814 = (float64x2_t)vzip1q_s64(*v812, (int64x2_t)v813);
          *(_QWORD *)&v806.f64[0] = vdupq_laneq_s64(*v812, 1).u64[0];
          *(_QWORD *)&v806.f64[1] = v812->i64[(unint64_t)v560 / 8 + 1];
          v815 = vmlaq_laneq_f64(vmulq_n_f64(v814, v813.f64[0]), v806, v813, 1);
          v589 = vsubq_f64(v924, vmlaq_laneq_f64(vmulq_n_f64(v814, *(double *)v812->i64), v806, *(float64x2_t *)v812, 1));
          v590 = vsubq_f64(v1418, v815);
          *(float64x2_t *)(v555 + 3680) = v589;
          *(float64x2_t *)(v555 + 3856) = v590;
          LODWORD(v812) = v559 + 4;
          v559 += 2;
          ++v562;
        }
        while (v812 <= v556);
        v558 = *(_DWORD *)(v8 + 16);
      }
      if ((v558 & 1) != 0)
      {
        v1569 = 1;
        v1570 = v556;
        v1571 = (char **)v557 + (v556 - 1);
        LODWORD(v1572) = v556 - 1;
        v1449 = &v1569;
        *(_QWORD *)&v1456.f64[1] = &v1449;
        *(_QWORD *)&v1457 = &v1569;
        *((_QWORD *)&v1457 + 1) = 0x3FF0000000000000;
        if (v557 == (int64x2_t *)v555)
        {
          sub_20FBAAB3C((double *)&__p, (uint64_t)&v1456);
          if (v555 >= (unint64_t)&v1580 || (unint64_t)&__p >= v555 + 3872)
          {
            for (i = 0; i != 3872; i += 32)
            {
              v826 = (float64x2_t *)(v555 + i);
              v827 = vsubq_f64(*(float64x2_t *)(v555 + i + 16), *(float64x2_t *)&__p.__r_.__value_.__r.__words[i / 8 + 2]);
              *v826 = vsubq_f64(*(float64x2_t *)(v555 + i), *(float64x2_t *)((char *)&__p.__r_.__value_.__l.__data_ + i));
              v826[1] = v827;
            }
          }
          else
          {
            for (j = 0; j != 3872; j += 8)
              *(double *)(v555 + j) = *(double *)(v555 + j) - *(double *)((char *)&__p.__r_.__value_.__l.__data_ + j);
          }
        }
        else
        {
          sub_20E8BE654(1, 0, 22, 22, 1, (const double *)&v557->i64[(v556 - 1)], v556, (double *)&v557->i64[(v556 - 1)], -1.0, 1.0, v556, (double *)v555, 22);
        }
      }
      break;
    case 21:
      v298 = *(_QWORD *)v4;
      v299 = *(unsigned int *)(v8 + 16);
      v300 = *(int64x2_t **)v8;
      LOBYTE(v301) = *(_DWORD *)(v8 + 16);
      if (v299 >= 2)
      {
        v845 = v8;
        v302 = 0;
        v1357 = *(float64x2_t *)(v298 + 16);
        v1352 = *(float64x2_t *)v298;
        v855 = 4 * v299;
        v854 = 8 * v299;
        v1347 = *(float64x2_t *)(v298 + 184);
        v1342 = *(float64x2_t *)(v298 + 168);
        v853 = 12 * v299;
        v1337 = *(float64x2_t *)(v298 + 352);
        v1332 = *(float64x2_t *)(v298 + 336);
        v852 = 16 * v299;
        v1327 = *(float64x2_t *)(v298 + 520);
        v1322 = *(float64x2_t *)(v298 + 504);
        v1317 = *(float64x2_t *)(v298 + 688);
        v1312 = *(float64x2_t *)(v298 + 672);
        v303 = 8 * v299;
        v1307 = *(float64x2_t *)(v298 + 856);
        v1302 = *(float64x2_t *)(v298 + 840);
        v1297 = *(float64x2_t *)(v298 + 1024);
        v1292 = *(float64x2_t *)(v298 + 1008);
        v1287 = *(float64x2_t *)(v298 + 1192);
        v1282 = *(float64x2_t *)(v298 + 1176);
        v1277 = *(float64x2_t *)(v298 + 1360);
        __lda = *(_DWORD *)(v8 + 16);
        v1272 = *(float64x2_t *)(v298 + 1344);
        v1267 = *(float64x2_t *)(v298 + 1528);
        v1446 = *(float64x2_t *)(v298 + 1512);
        v1442 = *(float64x2_t *)(v298 + 1696);
        v1262 = *(float64x2_t *)(v298 + 1680);
        v1257 = *(float64x2_t *)(v298 + 1864);
        v1252 = *(float64x2_t *)(v298 + 1848);
        v1247 = *(float64x2_t *)(v298 + 2032);
        v1242 = *(float64x2_t *)(v298 + 2016);
        v1237 = *(float64x2_t *)(v298 + 2200);
        v1232 = *(float64x2_t *)(v298 + 2184);
        v1227 = *(float64x2_t *)(v298 + 2368);
        v1222 = *(float64x2_t *)(v298 + 2352);
        v1217 = *(float64x2_t *)(v298 + 2536);
        v1212 = *(float64x2_t *)(v298 + 2520);
        v304 = v299;
        v305 = 3 * v299;
        v306 = 2 * v299;
        v307 = 40 * v299;
        v308 = 3 * v299;
        v309 = 56 * v299;
        v850 = 6 * v299;
        v851 = 88 * v299;
        v848 = 7 * v299;
        v849 = 104 * v299;
        v846 = v299 << 7;
        v847 = 120 * v299;
        v310 = v300;
        v1437 = *(float64x2_t *)(v298 + 2704);
        v1432 = *(float64x2_t *)(v298 + 2688);
        v1427 = *(float64x2_t *)(v298 + 2872);
        v1422 = *(float64x2_t *)(v298 + 2856);
        v1417 = *(float64x2_t *)(v298 + 3040);
        v1412 = *(float64x2_t *)(v298 + 3024);
        v1407 = *(float64x2_t *)(v298 + 3208);
        v1402 = *(float64x2_t *)(v298 + 3192);
        v1397 = *(float64x2_t *)(v298 + 3376);
        v1207 = *(float64x2_t *)(v298 + 3360);
        v1202 = *(float64x2_t *)(v298 + 720);
        v1197 = *(float64x2_t *)(v298 + 704);
        v1192 = *(float64x2_t *)(v298 + 888);
        v1187 = *(float64x2_t *)(v298 + 872);
        v1182 = *(float64x2_t *)(v298 + 1056);
        v1177 = *(float64x2_t *)(v298 + 1040);
        v1172 = *(float64x2_t *)(v298 + 1224);
        v1167 = *(float64x2_t *)(v298 + 1208);
        v1162 = *(float64x2_t *)(v298 + 1392);
        v1157 = *(float64x2_t *)(v298 + 1376);
        v1152 = *(float64x2_t *)(v298 + 1560);
        v1392 = *(float64x2_t *)(v298 + 1544);
        v1147 = *(float64x2_t *)(v298 + 1728);
        v1142 = *(float64x2_t *)(v298 + 1712);
        v1137 = *(float64x2_t *)(v298 + 1896);
        v1132 = *(float64x2_t *)(v298 + 1880);
        v1127 = *(float64x2_t *)(v298 + 2064);
        v1387 = *(float64x2_t *)(v298 + 2048);
        v1122 = *(float64x2_t *)(v298 + 2232);
        v1117 = *(float64x2_t *)(v298 + 2216);
        v1112 = *(float64x2_t *)(v298 + 2400);
        v1107 = *(float64x2_t *)(v298 + 2384);
        v1102 = *(float64x2_t *)(v298 + 2568);
        v1382 = *(float64x2_t *)(v298 + 2552);
        v1097 = *(float64x2_t *)(v298 + 2736);
        v1092 = *(float64x2_t *)(v298 + 2720);
        v1087 = *(float64x2_t *)(v298 + 2904);
        v1082 = *(float64x2_t *)(v298 + 2888);
        v1077 = *(float64x2_t *)(v298 + 3072);
        v1072 = *(float64x2_t *)(v298 + 3056);
        v1067 = *(float64x2_t *)(v298 + 3240);
        v1062 = *(float64x2_t *)(v298 + 3224);
        v1057 = *(float64x2_t *)(v298 + 3408);
        v1052 = *(float64x2_t *)(v298 + 3392);
        v311 = *(float64x2_t *)(v298 + 1424);
        v312 = *(float64x2_t *)(v298 + 1408);
        v313 = *(float64x2_t *)(v298 + 1576);
        v1048 = *(float64x2_t *)(v298 + 1592);
        v1044 = *(float64x2_t *)(v298 + 1760);
        v1041 = *(float64x2_t *)(v298 + 1744);
        v1039 = *(float64x2_t *)(v298 + 1928);
        v1037 = *(float64x2_t *)(v298 + 1912);
        v1035 = *(float64x2_t *)(v298 + 2096);
        v1033 = *(float64x2_t *)(v298 + 2080);
        v1031 = *(float64x2_t *)(v298 + 2264);
        v1029 = *(float64x2_t *)(v298 + 2248);
        v1027 = *(float64x2_t *)(v298 + 2432);
        v1025 = *(float64x2_t *)(v298 + 2416);
        v1377 = *(float64x2_t *)(v298 + 2600);
        v1023 = *(float64x2_t *)(v298 + 2584);
        v1372 = *(float64x2_t *)(v298 + 2768);
        v1021 = *(float64x2_t *)(v298 + 2752);
        v314 = *(float64x2_t *)(v298 + 2936);
        v1019 = *(float64x2_t *)(v298 + 2920);
        v315 = *(float64x2_t *)(v298 + 3104);
        v1367 = *(float64x2_t *)(v298 + 3088);
        v316 = *(float64x2_t *)(v298 + 3272);
        v1362 = *(float64x2_t *)(v298 + 3256);
        v1017 = *(float64x2_t *)(v298 + 3440);
        v1015 = *(float64x2_t *)(v298 + 3424);
        v1013 = *(float64x2_t *)(v298 + 2128);
        v1011 = *(float64x2_t *)(v298 + 2112);
        v1009 = *(float64x2_t *)(v298 + 2296);
        v1007 = *(float64x2_t *)(v298 + 2280);
        v1005 = *(float64x2_t *)(v298 + 2464);
        v1003 = *(float64x2_t *)(v298 + 2448);
        v1001 = *(float64x2_t *)(v298 + 2632);
        v999 = *(float64x2_t *)(v298 + 2616);
        v997 = *(float64x2_t *)(v298 + 2800);
        v995 = *(float64x2_t *)(v298 + 2784);
        v993 = *(float64x2_t *)(v298 + 2968);
        v991 = *(float64x2_t *)(v298 + 2952);
        v989 = *(float64x2_t *)(v298 + 3136);
        v987 = *(float64x2_t *)(v298 + 3120);
        v985 = *(float64x2_t *)(v298 + 3304);
        v983 = *(float64x2_t *)(v298 + 3288);
        v981 = *(float64x2_t *)(v298 + 3472);
        v979 = *(float64x2_t *)(v298 + 3456);
        v25.f64[0] = *(float64_t *)(v298 + 2848);
        v317 = *(int8x16_t *)(v298 + 2832);
        v318 = *(int8x16_t *)(v298 + 2816);
        v965 = vextq_s8(v317, v317, 8uLL).u64[0];
        v967 = vextq_s8(v318, v318, 8uLL).u64[0];
        v26.f64[0] = *(float64_t *)(v298 + 3016);
        v977 = *(int8x16_t *)(v298 + 3000);
        v969 = vextq_s8(v977, v977, 8uLL).u64[0];
        v975 = *(int8x16_t *)(v298 + 2984);
        v319 = vextq_s8(v975, v975, 8uLL).u64[0];
        v28.f64[0] = *(float64_t *)(v298 + 3184);
        v320 = *(int8x16_t *)(v298 + 3168);
        v321 = vextq_s8(v320, v320, 8uLL).u64[0];
        v973 = *(int8x16_t *)(v298 + 3152);
        v322 = vextq_s8(v973, v973, 8uLL).u64[0];
        v27.f64[0] = *(float64_t *)(v298 + 3352);
        v330 = *(int8x16_t *)(v298 + 3320);
        v323 = *(int8x16_t *)(v298 + 3336);
        v324 = vextq_s8(v323, v323, 8uLL).u64[0];
        v971 = *(_QWORD *)(v298 + 3320);
        v325 = vextq_s8(v330, v330, 8uLL).u64[0];
        v326 = *(int8x16_t *)(v298 + 3504);
        v327 = *(int8x16_t *)(v298 + 3488);
        v328 = vextq_s8(v326, v326, 8uLL).u64[0];
        v329 = vextq_s8(v327, v327, 8uLL).u64[0];
        v330.i64[0] = *(_QWORD *)(v298 + 3520);
        v331 = 5 * v299;
        v332 = 72 * v299;
        do
        {
          v917 = v319;
          v919 = v321;
          v920 = v322;
          v923 = v328;
          v925 = v324;
          v927 = v325;
          v929 = v329;
          v931 = (float64x2_t)v330;
          v933 = v327.i64[0];
          v935 = v326.i64[0];
          v937 = v323.i64[0];
          v939 = v27;
          v941 = v320.i64[0];
          v943 = v28;
          v945 = v26;
          v947 = v318.i64[0];
          v949 = v317.i64[0];
          v951 = v25;
          v953 = v316;
          v955 = v315;
          v957 = v314;
          v959 = v313;
          v961 = v312;
          v963 = v311;
          v333 = *(float64x2_t *)((char *)v310 + v303);
          v334 = (int64x2_t *)((char *)v310 + v303 + v303);
          v335 = *(float64x2_t *)v334;
          v336 = *(float64x2_t *)((char *)v334 + v303);
          *(_QWORD *)&v337.f64[0] = vdupq_laneq_s64(*v334, 1).u64[0];
          v338 = (float64x2_t *)&v334->i8[v303 + v303];
          v339 = *v338;
          v340 = (float64x2_t)vzip1q_s64((int64x2_t)v335, (int64x2_t)v336);
          v341 = (float64x2_t *)((char *)v338 + v303);
          v342 = *v341;
          v343 = (float64x2_t *)((char *)v341 + v303);
          v344 = *v343;
          v345 = (float64x2_t *)((char *)v343 + v303);
          v346 = *v345;
          v347 = (float64x2_t *)((char *)v345 + v303);
          v348 = (float64x2_t)vzip1q_s64(*v310, (int64x2_t)v333);
          v337.f64[1] = v336.f64[1];
          v349 = (float64x2_t)vzip2q_s64(*v310, (int64x2_t)v333);
          v350 = vmlaq_laneq_f64(vmulq_n_f64(v348, v333.f64[0]), v349, v333, 1);
          v351 = vmlaq_laneq_f64(vmulq_n_f64(v340, v333.f64[0]), v337, v333, 1);
          v352 = vmlaq_laneq_f64(vmulq_n_f64(v348, v335.f64[0]), v349, v335, 1);
          v353 = vmlaq_laneq_f64(vmulq_n_f64(v340, v335.f64[0]), v337, v335, 1);
          v354 = vmlaq_laneq_f64(vmulq_n_f64(v348, v336.f64[0]), v349, v336, 1);
          v355 = vmlaq_laneq_f64(vmulq_n_f64(v348, v339.f64[0]), v349, v339, 1);
          v356 = vmlaq_laneq_f64(vmulq_n_f64(v340, v336.f64[0]), v337, v336, 1);
          v357 = vmlaq_laneq_f64(vmulq_n_f64(v340, v339.f64[0]), v337, v339, 1);
          v358 = vmlaq_laneq_f64(vmulq_n_f64(v348, v342.f64[0]), v349, v342, 1);
          v359 = vmlaq_laneq_f64(vmulq_n_f64(v340, v342.f64[0]), v337, v342, 1);
          v360 = vmlaq_laneq_f64(vmulq_n_f64(v348, v346.f64[0]), v349, v346, 1);
          v361 = vmlaq_laneq_f64(vmulq_n_f64(v340, v344.f64[0]), v337, v344, 1);
          v362 = vmlaq_laneq_f64(vmulq_n_f64(v340, v346.f64[0]), v337, v346, 1);
          v363 = vmlaq_laneq_f64(vmulq_n_f64(v348, v347->f64[0]), v349, *v347, 1);
          v364 = vmlaq_laneq_f64(vmulq_n_f64(v340, v347->f64[0]), v337, *v347, 1);
          v365 = (float64x2_t *)((char *)v347 + v303);
          v366 = vmlaq_laneq_f64(vmulq_n_f64(v348, v365->f64[0]), v349, *v365, 1);
          v367 = vmlaq_laneq_f64(vmulq_n_f64(v340, v365->f64[0]), v337, *v365, 1);
          v368 = (float64x2_t *)((char *)v365 + v303);
          v369 = vmlaq_laneq_f64(vmulq_n_f64(v348, v368->f64[0]), v349, *v368, 1);
          v370 = vmlaq_laneq_f64(vmulq_n_f64(v340, v368->f64[0]), v337, *v368, 1);
          v371 = (float64x2_t *)((char *)v368 + v303);
          v914 = vmlaq_laneq_f64(vmulq_n_f64(v348, v371->f64[0]), v349, *v371, 1);
          v907 = vmlaq_laneq_f64(vmulq_n_f64(v340, v371->f64[0]), v337, *v371, 1);
          v372 = (float64x2_t *)((char *)v371 + v303);
          v911 = vmlaq_laneq_f64(vmulq_n_f64(v348, v372->f64[0]), v349, *v372, 1);
          v903 = vmlaq_laneq_f64(vmulq_n_f64(v340, v372->f64[0]), v337, *v372, 1);
          v373 = (float64x2_t *)((char *)v372 + v303);
          v899 = vmlaq_laneq_f64(vmulq_n_f64(v348, v373->f64[0]), v349, *v373, 1);
          v895 = vmlaq_laneq_f64(vmulq_n_f64(v340, v373->f64[0]), v337, *v373, 1);
          v374 = (float64x2_t *)((char *)v373 + v303);
          v891 = vmlaq_laneq_f64(vmulq_n_f64(v348, v374->f64[0]), v349, *v374, 1);
          v887 = vmlaq_laneq_f64(vmulq_n_f64(v340, v374->f64[0]), v337, *v374, 1);
          v375 = (float64x2_t *)((char *)v374 + v303);
          v883 = vmlaq_laneq_f64(vmulq_n_f64(v348, v375->f64[0]), v349, *v375, 1);
          v879 = vmlaq_laneq_f64(vmulq_n_f64(v340, v375->f64[0]), v337, *v375, 1);
          v376 = (float64x2_t *)((char *)v375 + v303);
          v875 = vmlaq_laneq_f64(vmulq_n_f64(v348, v376->f64[0]), v349, *v376, 1);
          v872 = vmlaq_laneq_f64(vmulq_n_f64(v340, v376->f64[0]), v337, *v376, 1);
          v377 = (float64x2_t *)((char *)v376 + v303);
          v869 = vmlaq_laneq_f64(vmulq_n_f64(v348, v377->f64[0]), v349, *v377, 1);
          v867 = vmlaq_laneq_f64(vmulq_n_f64(v340, v377->f64[0]), v337, *v377, 1);
          v378 = (float64x2_t *)((char *)v377 + v303);
          v865 = vmlaq_laneq_f64(vmulq_n_f64(v348, v378->f64[0]), v349, *v378, 1);
          v863 = vmlaq_laneq_f64(vmulq_n_f64(v340, v378->f64[0]), v337, *v378, 1);
          v379 = (float64x2_t *)((char *)v378 + v303);
          v861 = vmlaq_laneq_f64(vmulq_n_f64(v348, v379->f64[0]), v349, *v379, 1);
          v859 = vmlaq_laneq_f64(vmulq_n_f64(v340, v379->f64[0]), v337, *v379, 1);
          v380 = *(float64x2_t *)((char *)v379 + v303);
          v858 = vmlaq_laneq_f64(vmulq_n_f64(v348, v380.f64[0]), v349, v380, 1);
          v857 = vmlaq_laneq_f64(vmulq_n_f64(v340, v380.f64[0]), v337, v380, 1);
          v381 = vsubq_f64(v1357, vmlaq_laneq_f64(vmulq_n_f64(v340, *(double *)v310->i64), v337, *(float64x2_t *)v310, 1));
          v382 = vsubq_f64(v1352, vmlaq_laneq_f64(vmulq_n_f64(v348, *(double *)v310->i64), v349, *(float64x2_t *)v310, 1));
          v383 = vsubq_f64(v1332, v352);
          v384 = vsubq_f64(v1337, v353);
          v385 = vsubq_f64(v1327, v356);
          v386 = vsubq_f64(v1322, v354);
          v387 = vsubq_f64(v1317, v357);
          v388 = vsubq_f64(v1312, v355);
          v389 = vsubq_f64(v1302, v358);
          v390 = vsubq_f64(v1297, v361);
          v391 = vsubq_f64(v1292, vmlaq_laneq_f64(vmulq_n_f64(v348, v344.f64[0]), v349, v344, 1));
          v392 = vsubq_f64(v1282, v360);
          v393 = vsubq_f64(v1272, v363);
          v1446 = vsubq_f64(v1446, v366);
          v1442 = vsubq_f64(v1442, v370);
          v394 = vsubq_f64(v1252, v914);
          v395 = vsubq_f64(v1232, v899);
          v396 = vsubq_f64(v1212, v883);
          v1437 = vsubq_f64(v1437, v872);
          v1432 = vsubq_f64(v1432, v875);
          v1427 = vsubq_f64(v1427, v867);
          v1422 = vsubq_f64(v1422, v869);
          v1417 = vsubq_f64(v1417, v863);
          v1412 = vsubq_f64(v1412, v865);
          v1407 = vsubq_f64(v1407, v859);
          v1402 = vsubq_f64(v1402, v861);
          v1397 = vsubq_f64(v1397, v857);
          v1357 = v381;
          *(float64x2_t *)v298 = v382;
          *(float64x2_t *)(v298 + 16) = v381;
          v1352 = v382;
          v1347 = vsubq_f64(v1347, v351);
          *(float64x2_t *)(v298 + 184) = v1347;
          v1342 = vsubq_f64(v1342, v350);
          *(float64x2_t *)(v298 + 168) = v1342;
          v1337 = v384;
          *(float64x2_t *)(v298 + 336) = v383;
          *(float64x2_t *)(v298 + 352) = v384;
          v1332 = v383;
          v1327 = v385;
          *(float64x2_t *)(v298 + 520) = v385;
          v1322 = v386;
          *(float64x2_t *)(v298 + 504) = v386;
          v1317 = v387;
          *(float64x2_t *)(v298 + 672) = v388;
          *(float64x2_t *)(v298 + 688) = v387;
          v1312 = v388;
          v1307 = vsubq_f64(v1307, v359);
          *(float64x2_t *)(v298 + 840) = v389;
          *(float64x2_t *)(v298 + 856) = v1307;
          v1302 = v389;
          v1297 = v390;
          *(float64x2_t *)(v298 + 1008) = v391;
          *(float64x2_t *)(v298 + 1024) = v390;
          v1292 = v391;
          v1287 = vsubq_f64(v1287, v362);
          *(float64x2_t *)(v298 + 1176) = v392;
          *(float64x2_t *)(v298 + 1192) = v1287;
          v1282 = v392;
          v1272 = v393;
          *(float64x2_t *)(v298 + 1344) = v393;
          v1277 = vsubq_f64(v1277, v364);
          *(float64x2_t *)(v298 + 1360) = v1277;
          v1267 = vsubq_f64(v1267, v367);
          *(float64x2_t *)(v298 + 1512) = v1446;
          *(float64x2_t *)(v298 + 1528) = v1267;
          *(float64x2_t *)(v298 + 1696) = v1442;
          v1262 = vsubq_f64(v1262, v369);
          *(float64x2_t *)(v298 + 1680) = v1262;
          v1257 = vsubq_f64(v1257, v907);
          *(float64x2_t *)(v298 + 1848) = v394;
          *(float64x2_t *)(v298 + 1864) = v1257;
          v1252 = v394;
          v1247 = vsubq_f64(v1247, v903);
          *(float64x2_t *)(v298 + 2032) = v1247;
          v1242 = vsubq_f64(v1242, v911);
          *(float64x2_t *)(v298 + 2016) = v1242;
          v1237 = vsubq_f64(v1237, v895);
          *(float64x2_t *)(v298 + 2184) = v395;
          *(float64x2_t *)(v298 + 2200) = v1237;
          v1232 = v395;
          v1227 = vsubq_f64(v1227, v887);
          *(float64x2_t *)(v298 + 2368) = v1227;
          v1222 = vsubq_f64(v1222, v891);
          *(float64x2_t *)(v298 + 2352) = v1222;
          v1217 = vsubq_f64(v1217, v879);
          *(float64x2_t *)(v298 + 2520) = v396;
          *(float64x2_t *)(v298 + 2536) = v1217;
          v1212 = v396;
          *(float64x2_t *)(v298 + 2704) = v1437;
          *(float64x2_t *)(v298 + 2688) = v1432;
          *(float64x2_t *)(v298 + 2856) = v1422;
          *(float64x2_t *)(v298 + 2872) = v1427;
          *(float64x2_t *)(v298 + 3040) = v1417;
          *(float64x2_t *)(v298 + 3024) = v1412;
          *(float64x2_t *)(v298 + 3192) = v1402;
          *(float64x2_t *)(v298 + 3208) = v1407;
          v1207 = vsubq_f64(v1207, v858);
          *(float64x2_t *)(v298 + 3360) = v1207;
          *(float64x2_t *)(v298 + 3376) = v1397;
          v397 = (int64x2_t *)((char *)v300 + 8 * (v855 + v302));
          v398 = (float64x2_t)v397[v304];
          v399 = *(float64x2_t *)((char *)v397 + v303);
          v400 = *(float64x2_t *)((char *)v397 + v305 * 8);
          *(_QWORD *)&v382.f64[0] = vdupq_laneq_s64((int64x2_t)v398, 1).u64[0];
          v401 = (float64x2_t)v397[v306];
          v402 = *(float64x2_t *)((char *)v397 + v307);
          v403 = (float64x2_t)v397[v308];
          v404 = (float64x2_t)vzip1q_s64((int64x2_t)v398, (int64x2_t)v400);
          v405 = *(float64x2_t *)((char *)v397 + v309);
          *(_QWORD *)&v382.f64[1] = v397->i64[v305 + 1];
          v406 = (float64x2_t)v397[(unint64_t)v303 / 2];
          v407 = (float64x2_t)vzip1q_s64(*v397, (int64x2_t)v399);
          v408 = (float64x2_t)vzip2q_s64(*v397, (int64x2_t)v399);
          v409 = vmlaq_laneq_f64(vmulq_n_f64(v407, v400.f64[0]), v408, v400, 1);
          v410 = vmlaq_laneq_f64(vmulq_n_f64(v404, v400.f64[0]), v382, v400, 1);
          v411 = vmlaq_laneq_f64(vmulq_n_f64(v407, v401.f64[0]), v408, v401, 1);
          v412 = vmlaq_laneq_f64(vmulq_n_f64(v404, v401.f64[0]), v382, v401, 1);
          v413 = vmlaq_laneq_f64(vmulq_n_f64(v407, v402.f64[0]), v408, v402, 1);
          v414 = vmlaq_laneq_f64(vmulq_n_f64(v407, v403.f64[0]), v408, v403, 1);
          v415 = vmlaq_laneq_f64(vmulq_n_f64(v404, v402.f64[0]), v382, v402, 1);
          v416 = vmlaq_laneq_f64(vmulq_n_f64(v404, v403.f64[0]), v382, v403, 1);
          v417 = vmlaq_laneq_f64(vmulq_n_f64(v407, v405.f64[0]), v408, v405, 1);
          v418 = vmlaq_laneq_f64(vmulq_n_f64(v404, v405.f64[0]), v382, v405, 1);
          v419 = vmlaq_laneq_f64(vmulq_n_f64(v407, v406.f64[0]), v408, v406, 1);
          v420 = vmlaq_laneq_f64(vmulq_n_f64(v404, v406.f64[0]), v382, v406, 1);
          v421 = *(float64x2_t *)((char *)v397 + v332);
          v422 = vmlaq_laneq_f64(vmulq_n_f64(v407, v421.f64[0]), v408, v421, 1);
          v915 = vmlaq_laneq_f64(vmulq_n_f64(v404, v421.f64[0]), v382, v421, 1);
          v423 = (float64x2_t)v397[v331];
          v912 = vmlaq_laneq_f64(vmulq_n_f64(v407, v423.f64[0]), v408, v423, 1);
          v908 = vmlaq_laneq_f64(vmulq_n_f64(v404, v423.f64[0]), v382, v423, 1);
          v424 = *(float64x2_t *)((char *)v397 + v851);
          v904 = vmlaq_laneq_f64(vmulq_n_f64(v407, v424.f64[0]), v408, v424, 1);
          v900 = vmlaq_laneq_f64(vmulq_n_f64(v404, v424.f64[0]), v382, v424, 1);
          v425 = (float64x2_t)v397[v850];
          v896 = vmlaq_laneq_f64(vmulq_n_f64(v407, v425.f64[0]), v408, v425, 1);
          v892 = vmlaq_laneq_f64(vmulq_n_f64(v404, v425.f64[0]), v382, v425, 1);
          v426 = *(float64x2_t *)((char *)v397 + v849);
          v888 = vmlaq_laneq_f64(vmulq_n_f64(v407, v426.f64[0]), v408, v426, 1);
          v884 = vmlaq_laneq_f64(vmulq_n_f64(v404, v426.f64[0]), v382, v426, 1);
          v427 = (float64x2_t)v397[v848];
          v880 = vmlaq_laneq_f64(vmulq_n_f64(v407, v427.f64[0]), v408, v427, 1);
          v876 = vmlaq_laneq_f64(vmulq_n_f64(v404, v427.f64[0]), v382, v427, 1);
          v428 = *(float64x2_t *)((char *)v397 + v847);
          v873 = vmlaq_laneq_f64(vmulq_n_f64(v407, v428.f64[0]), v408, v428, 1);
          v870 = vmlaq_laneq_f64(vmulq_n_f64(v404, v428.f64[0]), v382, v428, 1);
          v429 = *(float64x2_t *)((char *)v397 + v846);
          v430 = vsubq_f64(v1197, vmlaq_laneq_f64(vmulq_n_f64(v407, *(double *)v397->i64), v408, *(float64x2_t *)v397, 1));
          v431 = vsubq_f64(v1187, vmlaq_laneq_f64(vmulq_n_f64(v407, v399.f64[0]), v408, v399, 1));
          v432 = vsubq_f64(v1177, vmlaq_laneq_f64(vmulq_n_f64(v407, v398.f64[0]), v408, v398, 1));
          v433 = vsubq_f64(v1167, v409);
          v1392 = vsubq_f64(v1392, v413);
          v434 = vsubq_f64(v1142, v414);
          v435 = vsubq_f64(v1132, v417);
          v436 = vsubq_f64(v1137, v418);
          v1387 = vsubq_f64(v1387, v419);
          v437 = vsubq_f64(v1117, v422);
          v1382 = vsubq_f64(v1382, v904);
          v438 = vsubq_f64(v1082, v888);
          v439 = vsubq_f64(v1062, v873);
          v1202 = vsubq_f64(v1202, vmlaq_laneq_f64(vmulq_n_f64(v404, *(double *)v397->i64), v382, *(float64x2_t *)v397, 1));
          *(float64x2_t *)(v298 + 704) = v430;
          *(float64x2_t *)(v298 + 720) = v1202;
          v1197 = v430;
          v1192 = vsubq_f64(v1192, vmlaq_laneq_f64(vmulq_n_f64(v404, v399.f64[0]), v382, v399, 1));
          *(float64x2_t *)(v298 + 872) = v431;
          *(float64x2_t *)(v298 + 888) = v1192;
          v1187 = v431;
          v1182 = vsubq_f64(v1182, vmlaq_laneq_f64(vmulq_n_f64(v404, v398.f64[0]), v382, v398, 1));
          *(float64x2_t *)(v298 + 1040) = v432;
          *(float64x2_t *)(v298 + 1056) = v1182;
          v1177 = v432;
          v1172 = vsubq_f64(v1172, v410);
          *(float64x2_t *)(v298 + 1208) = v433;
          *(float64x2_t *)(v298 + 1224) = v1172;
          v1167 = v433;
          v1157 = vsubq_f64(v1157, v411);
          *(float64x2_t *)(v298 + 1376) = v1157;
          v1162 = vsubq_f64(v1162, v412);
          *(float64x2_t *)(v298 + 1392) = v1162;
          v1152 = vsubq_f64(v1152, v415);
          *(float64x2_t *)(v298 + 1544) = v1392;
          *(float64x2_t *)(v298 + 1560) = v1152;
          v1147 = vsubq_f64(v1147, v416);
          *(float64x2_t *)(v298 + 1728) = v1147;
          v1142 = v434;
          *(float64x2_t *)(v298 + 1712) = v434;
          v1137 = v436;
          *(float64x2_t *)(v298 + 1880) = v435;
          *(float64x2_t *)(v298 + 1896) = v436;
          v1132 = v435;
          v1127 = vsubq_f64(v1127, v420);
          *(float64x2_t *)(v298 + 2064) = v1127;
          *(float64x2_t *)(v298 + 2048) = v1387;
          v1122 = vsubq_f64(v1122, v915);
          *(float64x2_t *)(v298 + 2216) = v437;
          *(float64x2_t *)(v298 + 2232) = v1122;
          v1117 = v437;
          v1107 = vsubq_f64(v1107, v912);
          *(float64x2_t *)(v298 + 2384) = v1107;
          v1112 = vsubq_f64(v1112, v908);
          *(float64x2_t *)(v298 + 2400) = v1112;
          v1102 = vsubq_f64(v1102, v900);
          *(float64x2_t *)(v298 + 2552) = v1382;
          *(float64x2_t *)(v298 + 2568) = v1102;
          v1097 = vsubq_f64(v1097, v892);
          *(float64x2_t *)(v298 + 2736) = v1097;
          v1092 = vsubq_f64(v1092, v896);
          *(float64x2_t *)(v298 + 2720) = v1092;
          v1087 = vsubq_f64(v1087, v884);
          *(float64x2_t *)(v298 + 2888) = v438;
          *(float64x2_t *)(v298 + 2904) = v1087;
          v1082 = v438;
          v1077 = vsubq_f64(v1077, v876);
          *(float64x2_t *)(v298 + 3072) = v1077;
          v1072 = vsubq_f64(v1072, v880);
          *(float64x2_t *)(v298 + 3056) = v1072;
          v1067 = vsubq_f64(v1067, v870);
          *(float64x2_t *)(v298 + 3224) = v439;
          *(float64x2_t *)(v298 + 3240) = v1067;
          v1062 = v439;
          v1052 = vsubq_f64(v1052, vmlaq_laneq_f64(vmulq_n_f64(v407, v429.f64[0]), v408, v429, 1));
          *(float64x2_t *)(v298 + 3392) = v1052;
          v1057 = vsubq_f64(v1057, vmlaq_laneq_f64(vmulq_n_f64(v404, v429.f64[0]), v382, v429, 1));
          *(float64x2_t *)(v298 + 3408) = v1057;
          v440 = (int64x2_t *)((char *)v300 + 8 * (v854 + v302));
          v441 = (float64x2_t)v440[v304];
          v442 = *(float64x2_t *)((char *)v440 + v303);
          v443 = *(float64x2_t *)((char *)v440 + v305 * 8);
          *(_QWORD *)&v399.f64[0] = vdupq_laneq_s64((int64x2_t)v441, 1).u64[0];
          v444 = (float64x2_t)v440[v306];
          v445 = *(float64x2_t *)((char *)v440 + v307);
          v446 = (float64x2_t)v440[v308];
          v447 = (float64x2_t)vzip1q_s64((int64x2_t)v441, (int64x2_t)v443);
          v448 = *(float64x2_t *)((char *)v440 + v309);
          v449 = (float64x2_t)v440[(unint64_t)v303 / 2];
          *(_QWORD *)&v399.f64[1] = v440->i64[v305 + 1];
          v450 = (float64x2_t)vzip1q_s64(*v440, (int64x2_t)v442);
          v451 = (float64x2_t)vzip2q_s64(*v440, (int64x2_t)v442);
          v452 = vmlaq_laneq_f64(vmulq_n_f64(v450, *(double *)v440->i64), v451, *(float64x2_t *)v440, 1);
          v453 = vmlaq_laneq_f64(vmulq_n_f64(v447, *(double *)v440->i64), v399, *(float64x2_t *)v440, 1);
          v454 = vmlaq_laneq_f64(vmulq_n_f64(v450, v442.f64[0]), v451, v442, 1);
          v455 = vmlaq_laneq_f64(vmulq_n_f64(v450, v441.f64[0]), v451, v441, 1);
          v456 = vmlaq_laneq_f64(vmulq_n_f64(v447, v442.f64[0]), v399, v442, 1);
          v457 = vmlaq_laneq_f64(vmulq_n_f64(v447, v441.f64[0]), v399, v441, 1);
          v458 = vmlaq_laneq_f64(vmulq_n_f64(v450, v443.f64[0]), v451, v443, 1);
          v459 = vmlaq_laneq_f64(vmulq_n_f64(v447, v443.f64[0]), v399, v443, 1);
          v460 = vmlaq_laneq_f64(vmulq_n_f64(v450, v444.f64[0]), v451, v444, 1);
          v461 = vmlaq_laneq_f64(vmulq_n_f64(v450, v445.f64[0]), v451, v445, 1);
          v462 = vmlaq_laneq_f64(vmulq_n_f64(v447, v444.f64[0]), v399, v444, 1);
          v463 = vmlaq_laneq_f64(vmulq_n_f64(v447, v445.f64[0]), v399, v445, 1);
          v464 = vmlaq_laneq_f64(vmulq_n_f64(v450, v446.f64[0]), v451, v446, 1);
          v465 = vmlaq_laneq_f64(vmulq_n_f64(v447, v446.f64[0]), v399, v446, 1);
          v466 = vmlaq_laneq_f64(vmulq_n_f64(v450, v448.f64[0]), v451, v448, 1);
          v467 = vmlaq_laneq_f64(vmulq_n_f64(v447, v448.f64[0]), v399, v448, 1);
          v468 = vmlaq_laneq_f64(vmulq_n_f64(v450, v449.f64[0]), v451, v449, 1);
          v469 = vmlaq_laneq_f64(vmulq_n_f64(v447, v449.f64[0]), v399, v449, 1);
          v470 = *(float64x2_t *)((char *)v440 + v332);
          v471 = vmlaq_laneq_f64(vmulq_n_f64(v450, v470.f64[0]), v451, v470, 1);
          v472 = vmlaq_laneq_f64(vmulq_n_f64(v447, v470.f64[0]), v399, v470, 1);
          v473 = (float64x2_t)v440[v331];
          v474 = vmlaq_laneq_f64(vmulq_n_f64(v450, v473.f64[0]), v451, v473, 1);
          v475 = vmlaq_laneq_f64(vmulq_n_f64(v447, v473.f64[0]), v399, v473, 1);
          v476 = *(float64x2_t *)((char *)v440 + v851);
          v477 = vmlaq_laneq_f64(vmulq_n_f64(v450, v476.f64[0]), v451, v476, 1);
          v478 = (float64x2_t)v440[v850];
          v479 = vmlaq_laneq_f64(vmulq_n_f64(v450, v478.f64[0]), v451, v478, 1);
          v480 = vmlaq_laneq_f64(vmulq_n_f64(v447, v476.f64[0]), v399, v476, 1);
          v481 = vmlaq_laneq_f64(vmulq_n_f64(v447, v478.f64[0]), v399, v478, 1);
          v312 = vsubq_f64(v961, v452);
          v311 = vsubq_f64(v963, v453);
          v313 = vsubq_f64(v959, v454);
          v482 = vsubq_f64(v1041, v455);
          v483 = vsubq_f64(v1044, v457);
          v484 = vsubq_f64(v1037, v458);
          v485 = vsubq_f64(v1029, v461);
          v486 = vsubq_f64(v1031, v463);
          v487 = vsubq_f64(v1025, v464);
          v488 = vsubq_f64(v1023, v466);
          v1377 = vsubq_f64(v1377, v467);
          v1372 = vsubq_f64(v1372, v469);
          v489 = vsubq_f64(v1019, v471);
          v314 = vsubq_f64(v957, v472);
          v1367 = vsubq_f64(v1367, v474);
          v315 = vsubq_f64(v955, v475);
          v1362 = vsubq_f64(v1362, v477);
          v316 = vsubq_f64(v953, v480);
          *(float64x2_t *)(v298 + 1408) = v312;
          *(float64x2_t *)(v298 + 1424) = v311;
          v1048 = vsubq_f64(v1048, v456);
          *(float64x2_t *)(v298 + 1576) = v313;
          *(float64x2_t *)(v298 + 1592) = v1048;
          v1044 = v483;
          *(float64x2_t *)(v298 + 1760) = v483;
          v1041 = v482;
          *(float64x2_t *)(v298 + 1744) = v482;
          v1039 = vsubq_f64(v1039, v459);
          *(float64x2_t *)(v298 + 1912) = v484;
          *(float64x2_t *)(v298 + 1928) = v1039;
          v1037 = v484;
          v1035 = vsubq_f64(v1035, v462);
          *(float64x2_t *)(v298 + 2096) = v1035;
          v1033 = vsubq_f64(v1033, v460);
          *(float64x2_t *)(v298 + 2080) = v1033;
          v1031 = v486;
          *(float64x2_t *)(v298 + 2248) = v485;
          *(float64x2_t *)(v298 + 2264) = v486;
          v1029 = v485;
          v1025 = v487;
          *(float64x2_t *)(v298 + 2416) = v487;
          v1027 = vsubq_f64(v1027, v465);
          *(float64x2_t *)(v298 + 2432) = v1027;
          *(float64x2_t *)(v298 + 2584) = v488;
          *(float64x2_t *)(v298 + 2600) = v1377;
          v1023 = v488;
          *(float64x2_t *)(v298 + 2768) = v1372;
          v1021 = vsubq_f64(v1021, v468);
          *(float64x2_t *)(v298 + 2752) = v1021;
          *(float64x2_t *)(v298 + 2920) = v489;
          *(float64x2_t *)(v298 + 2936) = v314;
          v1019 = v489;
          *(float64x2_t *)(v298 + 3104) = v315;
          *(float64x2_t *)(v298 + 3088) = v1367;
          *(float64x2_t *)(v298 + 3256) = v1362;
          *(float64x2_t *)(v298 + 3272) = v316;
          v1015 = vsubq_f64(v1015, v479);
          *(float64x2_t *)(v298 + 3424) = v1015;
          v1017 = vsubq_f64(v1017, v481);
          *(float64x2_t *)(v298 + 3440) = v1017;
          v490 = (int64x2_t *)((char *)v300 + 8 * (v853 + v302));
          v491 = (float64x2_t)v490[(unint64_t)v303 / 2];
          v492 = *(float64x2_t *)((char *)v490 + v303);
          v493 = (float64x2_t)v490[v304];
          *(_QWORD *)&v479.f64[0] = vdupq_laneq_s64((int64x2_t)v493, 1).u64[0];
          v494 = *(float64x2_t *)((char *)v490 + v305 * 8);
          v495 = (float64x2_t)v490[v306];
          v496 = *(float64x2_t *)((char *)v490 + v307);
          v497 = (float64x2_t)vzip1q_s64((int64x2_t)v493, (int64x2_t)v494);
          v498 = (float64x2_t)v490[v308];
          v499 = *(float64x2_t *)((char *)v490 + v309);
          *(_QWORD *)&v479.f64[1] = v490->i64[v305 + 1];
          v500 = (float64x2_t)vzip1q_s64(*v490, (int64x2_t)v492);
          v501 = (float64x2_t)vzip2q_s64(*v490, (int64x2_t)v492);
          v502 = vmlaq_laneq_f64(vmulq_n_f64(v500, *(double *)v490->i64), v501, *(float64x2_t *)v490, 1);
          v503 = vmlaq_laneq_f64(vmulq_n_f64(v497, *(double *)v490->i64), v479, *(float64x2_t *)v490, 1);
          v504 = vmlaq_laneq_f64(vmulq_n_f64(v500, v492.f64[0]), v501, v492, 1);
          v505 = vmlaq_laneq_f64(vmulq_n_f64(v500, v493.f64[0]), v501, v493, 1);
          v506 = vmlaq_laneq_f64(vmulq_n_f64(v497, v492.f64[0]), v479, v492, 1);
          v507 = vmlaq_laneq_f64(vmulq_n_f64(v497, v493.f64[0]), v479, v493, 1);
          v508 = vmlaq_laneq_f64(vmulq_n_f64(v500, v494.f64[0]), v501, v494, 1);
          v509 = vmlaq_laneq_f64(vmulq_n_f64(v497, v494.f64[0]), v479, v494, 1);
          _Q4 = vmlaq_laneq_f64(vmulq_n_f64(v500, v495.f64[0]), v501, v495, 1);
          v511 = vmlaq_laneq_f64(vmulq_n_f64(v500, v496.f64[0]), v501, v496, 1);
          v512 = vmlaq_laneq_f64(vmulq_n_f64(v497, v495.f64[0]), v479, v495, 1);
          v513 = vmlaq_laneq_f64(vmulq_n_f64(v497, v496.f64[0]), v479, v496, 1);
          v514 = vmlaq_laneq_f64(vmulq_n_f64(v500, v498.f64[0]), v501, v498, 1);
          v515 = vmlaq_laneq_f64(vmulq_n_f64(v497, v498.f64[0]), v479, v498, 1);
          v516 = vmlaq_laneq_f64(vmulq_n_f64(v500, v499.f64[0]), v501, v499, 1);
          _Q19 = vmlaq_laneq_f64(vmulq_n_f64(v500, v491.f64[0]), v501, v491, 1);
          _Q21 = vmlaq_laneq_f64(vmulq_n_f64(v497, v499.f64[0]), v479, v499, 1);
          _Q16 = vmlaq_laneq_f64(vmulq_n_f64(v497, v491.f64[0]), v479, v491, 1);
          v520 = vsubq_f64(v1011, v502);
          v521 = vsubq_f64(v1007, v504);
          v522 = vsubq_f64(v1009, v506);
          v523 = vsubq_f64(v1005, v507);
          v524 = vsubq_f64(v999, v508);
          v525 = vsubq_f64(v1001, v509);
          v526 = vsubq_f64(v991, v511);
          v527 = vsubq_f64(v983, v516);
          v1013 = vsubq_f64(v1013, v503);
          *(float64x2_t *)(v298 + 2128) = v1013;
          v1011 = v520;
          *(float64x2_t *)(v298 + 2112) = v520;
          v1009 = v522;
          *(float64x2_t *)(v298 + 2280) = v521;
          *(float64x2_t *)(v298 + 2296) = v522;
          v1007 = v521;
          v1005 = v523;
          *(float64x2_t *)(v298 + 2464) = v523;
          v1003 = vsubq_f64(v1003, v505);
          *(float64x2_t *)(v298 + 2448) = v1003;
          v1001 = v525;
          *(float64x2_t *)(v298 + 2616) = v524;
          *(float64x2_t *)(v298 + 2632) = v525;
          v999 = v524;
          v995 = vsubq_f64(v995, _Q4);
          *(float64x2_t *)(v298 + 2784) = v995;
          v997 = vsubq_f64(v997, v512);
          *(float64x2_t *)(v298 + 2800) = v997;
          v993 = vsubq_f64(v993, v513);
          *(float64x2_t *)(v298 + 2952) = v526;
          *(float64x2_t *)(v298 + 2968) = v993;
          v991 = v526;
          v989 = vsubq_f64(v989, v515);
          *(float64x2_t *)(v298 + 3136) = v989;
          v987 = vsubq_f64(v987, v514);
          *(float64x2_t *)(v298 + 3120) = v987;
          v985 = vsubq_f64(v985, _Q21);
          *(float64x2_t *)(v298 + 3288) = v527;
          *(float64x2_t *)(v298 + 3304) = v985;
          v983 = v527;
          v981 = vsubq_f64(v981, _Q16);
          *(float64x2_t *)(v298 + 3472) = v981;
          v979 = vsubq_f64(v979, _Q19);
          *(float64x2_t *)(v298 + 3456) = v979;
          v528 = (int64x2_t *)((char *)v300 + 8 * (v852 + v302));
          _Q2 = *(float64x2_t *)((char *)v528 + v303);
          v530 = (float64x2_t)v528[v304];
          v531 = *(float64x2_t *)((char *)v528 + v305 * 8);
          _Q24 = (float64x2_t)v528[v306];
          v533 = (float64x2_t)vzip1q_s64((int64x2_t)v530, (int64x2_t)v531);
          *(_QWORD *)&v515.f64[0] = vdupq_laneq_s64((int64x2_t)v530, 1).u64[0];
          *(_QWORD *)&v515.f64[1] = v528->i64[v305 + 1];
          v534 = (float64x2_t)vzip1q_s64(*v528, (int64x2_t)_Q2);
          v535 = (float64x2_t)vzip2q_s64(*v528, (int64x2_t)_Q2);
          _Q22 = vmulq_f64(_Q24, *(float64x2_t *)v528);
          v537 = vmlaq_laneq_f64(vmulq_n_f64(v534, *(double *)v528->i64), v535, *(float64x2_t *)v528, 1);
          *(_QWORD *)&_Q16.f64[0] = v528->i64[1];
          __asm { FMLA            D22, D16, V24.D[1] }
          _Q16 = vmulq_f64(_Q24, _Q2);
          v539 = vmlaq_laneq_f64(vmulq_n_f64(v534, _Q2.f64[0]), v535, _Q2, 1);
          *(_QWORD *)&_Q19.f64[0] = v528->i64[(unint64_t)v303 / 8 + 1];
          __asm { FMLA            D16, D19, V24.D[1] }
          _Q19 = vmulq_f64(_Q24, v530);
          *(_QWORD *)&_Q21.f64[0] = v528[v304].i64[1];
          __asm { FMLA            D19, D21, V24.D[1] }
          v541 = vmlaq_laneq_f64(vmulq_n_f64(v533, *(double *)v528->i64), v515, *(float64x2_t *)v528, 1);
          _Q23 = vmulq_f64(_Q24, v531);
          _Q4.f64[0] = v515.f64[1];
          __asm { FMLA            D23, D4, V24.D[1] }
          v543 = vmlaq_laneq_f64(vmulq_n_f64(v534, v530.f64[0]), v535, v530, 1);
          v544 = vmlaq_laneq_f64(vmulq_n_f64(v533, _Q2.f64[0]), v515, _Q2, 1);
          v545 = vmlaq_laneq_f64(vmulq_n_f64(v534, v531.f64[0]), v535, v531, 1);
          *(_QWORD *)&_Q4.f64[0] = v947;
          v546 = vmlaq_laneq_f64(vmulq_n_f64(v534, _Q24.f64[0]), v535, _Q24, 1);
          v547 = vmlaq_laneq_f64(vmulq_n_f64(v533, v530.f64[0]), v515, v530, 1);
          *(_QWORD *)&v530.f64[0] = v949;
          *(_QWORD *)&v530.f64[1] = v965;
          *(_QWORD *)&_Q4.f64[1] = v967;
          v548 = vmlaq_laneq_f64(vmulq_n_f64(v533, v531.f64[0]), v515, v531, 1);
          *(_QWORD *)&v467.f64[0] = v977.i64[0];
          *(_QWORD *)&v467.f64[1] = v969;
          *(_QWORD *)&v477.f64[0] = v975.i64[0];
          *(_QWORD *)&v477.f64[1] = v917;
          v549 = vmlaq_laneq_f64(vmulq_n_f64(v533, _Q24.f64[0]), v515, _Q24, 1);
          *(_QWORD *)&v515.f64[0] = v941;
          *(_QWORD *)&v515.f64[1] = v919;
          _Q1 = vmulq_f64(_Q24, _Q24);
          *(_QWORD *)&v469.f64[0] = v973.i64[0];
          *(_QWORD *)&v469.f64[1] = v920;
          *(_QWORD *)&_Q2.f64[0] = v528[v306].i64[1];
          __asm { FMLA            D1, D2, V24.D[1] }
          *(_QWORD *)&_Q24.f64[0] = v937;
          *(_QWORD *)&_Q24.f64[1] = v925;
          *(_QWORD *)&v474.f64[0] = v971;
          *(_QWORD *)&v474.f64[1] = v927;
          v318 = (int8x16_t)vsubq_f64(_Q4, v537);
          v25 = vsubq_f64(v951, _Q22);
          *(_QWORD *)&_Q22.f64[0] = v933;
          *(_QWORD *)&v537.f64[0] = v935;
          *(_QWORD *)&v537.f64[1] = v923;
          *(_QWORD *)&_Q22.f64[1] = v929;
          v317 = (int8x16_t)vsubq_f64(v530, v541);
          v551 = (int8x16_t)vsubq_f64(v467, v544);
          v552 = (int8x16_t)vsubq_f64(v477, v539);
          *(int8x16_t *)(v298 + 2816) = v318;
          v26 = vsubq_f64(v945, _Q16);
          v320 = (int8x16_t)vsubq_f64(v515, v547);
          v965 = vextq_s8(v317, v317, 8uLL).u64[0];
          v967 = vextq_s8(v318, v318, 8uLL).u64[0];
          v553 = (int8x16_t)vsubq_f64(v469, v543);
          v319 = vextq_s8(v552, v552, 8uLL).u64[0];
          v28 = vsubq_f64(v943, _Q19);
          v323 = (int8x16_t)vsubq_f64(_Q24, v548);
          v969 = vextq_s8(v551, v551, 8uLL).u64[0];
          v321 = vextq_s8(v320, v320, 8uLL).u64[0];
          v554 = (int8x16_t)vsubq_f64(v474, v545);
          v322 = vextq_s8(v553, v553, 8uLL).u64[0];
          v27 = vsubq_f64(v939, _Q23);
          v326 = (int8x16_t)vsubq_f64(v537, v549);
          v324 = vextq_s8(v323, v323, 8uLL).u64[0];
          v325 = vextq_s8(v554, v554, 8uLL).u64[0];
          v330 = (int8x16_t)vsubq_f64(v931, _Q1);
          *(float64_t *)(v298 + 2848) = v25.f64[0];
          v975.i64[0] = v552.i64[0];
          *(int8x16_t *)(v298 + 2984) = v552;
          *(int8x16_t *)(v298 + 3000) = v551;
          *(float64_t *)(v298 + 3016) = v26.f64[0];
          v973.i64[0] = v553.i64[0];
          *(int8x16_t *)(v298 + 3152) = v553;
          *(int8x16_t *)(v298 + 3168) = v320;
          *(float64_t *)(v298 + 3184) = v28.f64[0];
          v971 = v554.i64[0];
          *(int8x16_t *)(v298 + 3320) = v554;
          *(int8x16_t *)(v298 + 3336) = v323;
          *(float64_t *)(v298 + 3352) = v27.f64[0];
          *(_QWORD *)(v298 + 3520) = v330.i64[0];
          v327 = (int8x16_t)vsubq_f64(_Q22, v546);
          *(int8x16_t *)(v298 + 3488) = v327;
          *(int8x16_t *)(v298 + 3504) = v326;
          v329 = vextq_s8(v327, v327, 8uLL).u64[0];
          LODWORD(v528) = v302 + 4;
          v302 += 2;
          ++v310;
          v328 = vextq_s8(v326, v326, 8uLL).u64[0];
          *(int8x16_t *)(v298 + 2832) = v317;
          v977.i64[0] = v551.i64[0];
        }
        while (v528 <= __lda);
        v301 = *(_DWORD *)(v845 + 16);
        LODWORD(v299) = __lda;
      }
      if ((v301 & 1) != 0)
      {
        v1569 = 1;
        v1570 = v299;
        v1571 = (char **)v300 + (v299 - 1);
        LODWORD(v1572) = v299 - 1;
        v1449 = &v1569;
        *(_QWORD *)&v1456.f64[1] = &v1449;
        *(_QWORD *)&v1457 = &v1569;
        *((_QWORD *)&v1457 + 1) = 0x3FF0000000000000;
        if (v300 == (int64x2_t *)v298)
        {
          p_p = (double *)&__p;
          sub_20FBAAA60((double *)&__p, (uint64_t)&v1456);
          if (v298 >= (unint64_t)&v1579 || (unint64_t)&__p >= v298 + 3528)
          {
            v820 = 0;
            p_p = (double *)&v1578;
            v818 = 440;
            do
            {
              v821 = (float64x2_t *)(v298 + v820);
              v822 = vsubq_f64(*(float64x2_t *)(v298 + v820 + 16), *(float64x2_t *)&__p.__r_.__value_.__r.__words[v820 / 8 + 2]);
              *v821 = vsubq_f64(*(float64x2_t *)(v298 + v820), *(float64x2_t *)((char *)&__p.__r_.__value_.__l.__data_ + v820));
              v821[1] = v822;
              v820 += 32;
            }
            while (v820 != 3520);
          }
          else
          {
            v818 = 0;
          }
          v823 = 8 * v818;
          do
          {
            v824 = *p_p++;
            *(double *)(v298 + v823) = *(double *)(v298 + v823) - v824;
            v823 += 8;
          }
          while (v823 != 3528);
        }
        else
        {
          sub_20E8BE654(1, 0, 21, 21, 1, (const double *)&v300->i64[(v299 - 1)], v299, (double *)&v300->i64[(v299 - 1)], -1.0, 1.0, v299, (double *)v298, 21);
        }
      }
      break;
    case 15:
      v35 = *(_QWORD *)v4;
      v36 = *(unsigned int *)(v8 + 16);
      v37 = *(int64x2_t **)v8;
      LOBYTE(v38) = *(_DWORD *)(v8 + 16);
      if (v36 >= 2)
      {
        v39 = 0;
        v1364 = *(float64x2_t *)(v35 + 16);
        v1359 = *(float64x2_t *)v35;
        v1354 = *(float64x2_t *)(v35 + 136);
        v1349 = *(float64x2_t *)(v35 + 120);
        v1344 = *(float64x2_t *)(v35 + 256);
        v1339 = *(float64x2_t *)(v35 + 240);
        v1334 = *(float64x2_t *)(v35 + 376);
        v1329 = *(float64x2_t *)(v35 + 360);
        v40 = 8 * v36;
        v1324 = *(float64x2_t *)(v35 + 496);
        v1319 = *(float64x2_t *)(v35 + 480);
        v41 = *(float64x2_t *)(v35 + 600);
        v42 = *(float64x2_t *)(v35 + 616);
        v43 = *(float64x2_t *)(v35 + 720);
        v1149 = *(float64x2_t *)(v35 + 736);
        v44 = *(float64x2_t *)(v35 + 856);
        v1314 = *(float64x2_t *)(v35 + 840);
        v45 = *(float64x2_t *)(v35 + 960);
        v1309 = *(float64x2_t *)(v35 + 976);
        v46 = *(float64x2_t *)(v35 + 1080);
        v1304 = *(float64x2_t *)(v35 + 1096);
        v1299 = *(float64x2_t *)(v35 + 1216);
        v1294 = *(float64x2_t *)(v35 + 1200);
        v1289 = *(float64x2_t *)(v35 + 1336);
        v1284 = *(float64x2_t *)(v35 + 1320);
        v1279 = *(float64x2_t *)(v35 + 1456);
        v1274 = *(float64x2_t *)(v35 + 1440);
        v1269 = *(float64x2_t *)(v35 + 1576);
        v1264 = *(float64x2_t *)(v35 + 1560);
        v1259 = *(float64x2_t *)(v35 + 1696);
        v1254 = *(float64x2_t *)(v35 + 1680);
        v1249 = *(float64x2_t *)(v35 + 528);
        v1244 = *(float64x2_t *)(v35 + 512);
        v47 = 3 * v36;
        v48 = *(int64x2_t **)v8;
        v49 = *(float64x2_t *)(v35 + 648);
        v1239 = *(float64x2_t *)(v35 + 632);
        v50 = *(float64x2_t *)(v35 + 768);
        v1234 = *(float64x2_t *)(v35 + 752);
        v51 = *(float64x2_t *)(v35 + 888);
        v1229 = *(float64x2_t *)(v35 + 872);
        v52 = *(float64x2_t *)(v35 + 1008);
        v1224 = *(float64x2_t *)(v35 + 992);
        v53 = *(float64x2_t *)(v35 + 1128);
        v1219 = *(float64x2_t *)(v35 + 1112);
        v54 = *(float64x2_t *)(v35 + 1248);
        v1214 = *(float64x2_t *)(v35 + 1232);
        v55 = *(float64x2_t *)(v35 + 1368);
        v1209 = *(float64x2_t *)(v35 + 1352);
        v56 = *(float64x2_t *)(v35 + 1488);
        v1204 = *(float64x2_t *)(v35 + 1472);
        v1199 = *(float64x2_t *)(v35 + 1608);
        v1194 = *(float64x2_t *)(v35 + 1592);
        v1189 = *(float64x2_t *)(v35 + 1728);
        v1184 = *(float64x2_t *)(v35 + 1712);
        v57 = *(float64x2_t *)(v35 + 1040);
        v58 = *(float64x2_t *)(v35 + 1024);
        v60 = *(float64x2_t *)(v35 + 1144);
        v59 = *(float64x2_t *)(v35 + 1160);
        v61 = *(float64x2_t *)(v35 + 1280);
        v1179 = *(float64x2_t *)(v35 + 1264);
        v62 = *(float64x2_t *)(v35 + 1400);
        v1174 = *(float64x2_t *)(v35 + 1384);
        v63 = *(float64x2_t *)(v35 + 1520);
        v1169 = *(float64x2_t *)(v35 + 1504);
        v64 = *(float64x2_t *)(v35 + 1640);
        v1164 = *(float64x2_t *)(v35 + 1624);
        v65 = *(float64x2_t *)(v35 + 1760);
        v1159 = *(float64x2_t *)(v35 + 1744);
        v25.f64[0] = *(float64_t *)(v35 + 1552);
        v66 = *(int8x16_t *)(v35 + 1536);
        v67 = (float64x2_t)vextq_s8(v66, v66, 8uLL);
        v1154 = *(_QWORD *)&v67.f64[0];
        v67.f64[0] = *(float64_t *)(v35 + 1672);
        v68 = *(int8x16_t *)(v35 + 1656);
        v69 = vextq_s8(v68, v68, 8uLL).u64[0];
        v70 = *(int8x16_t *)(v35 + 1776);
        v71 = vextq_s8(v70, v70, 8uLL).u64[0];
        v24.f64[0] = *(float64_t *)(v35 + 1792);
        do
        {
          v1079 = v69;
          v1084 = v71;
          v1369 = v24;
          v1089 = v70.i64[0];
          v1094 = v68.i64[0];
          v1374 = v67;
          v1099 = v66.i64[0];
          v1104 = v25;
          v1109 = v65;
          v1379 = v64;
          v1114 = v63;
          v1384 = v62;
          v1389 = v61;
          v1394 = v60;
          v1119 = v59;
          v1124 = v58;
          v1129 = v57;
          v1399 = v56;
          v1134 = v55;
          v1404 = v54;
          v1409 = v53;
          v1139 = v52;
          v1414 = v51;
          v1419 = v50;
          v1144 = v49;
          v1424 = v46;
          v1429 = v45;
          v1434 = v44;
          v1439 = v43;
          v1444 = v41;
          v72 = *(float64x2_t *)((char *)v48 + 8 * v36);
          v73 = (float64x2_t *)&v48->i8[v40 + v40];
          v74 = *v73;
          v75 = (float64x2_t *)((char *)v73 + v40);
          v76 = *v75;
          *(_QWORD *)&v77.f64[0] = vdupq_laneq_s64((int64x2_t)v74, 1).u64[0];
          v78 = (float64x2_t *)((char *)v75 + v40);
          v79 = *v78;
          v80 = (float64x2_t *)((char *)v78 + v40);
          v81 = (float64x2_t)vzip1q_s64((int64x2_t)v74, (int64x2_t)v76);
          v82 = *v80;
          v83 = (float64x2_t *)((char *)v80 + v40);
          v84 = *v83;
          v85 = (float64x2_t *)((char *)v83 + v40);
          v86 = *v85;
          v87 = *(float64x2_t *)((char *)v85 + 8 * v36);
          v88 = (float64x2_t *)((char *)v85 + v40 + v40);
          v89 = *v88;
          v90 = (float64x2_t *)((char *)v88 + v40);
          v91 = *v90;
          v92 = *(float64x2_t *)((char *)v90 + 8 * v36);
          v93 = (float64x2_t *)((char *)v90 + v40 + v40);
          v94 = (float64x2_t)vzip1q_s64(*v48, (int64x2_t)v72);
          v77.f64[1] = v76.f64[1];
          v95 = (float64x2_t)vzip2q_s64(*v48, (int64x2_t)v72);
          v1074 = vmlaq_laneq_f64(vmulq_n_f64(v94, *(double *)v48->i64), v95, *(float64x2_t *)v48, 1);
          v96 = vmlaq_laneq_f64(vmulq_n_f64(v94, v72.f64[0]), v95, v72, 1);
          v1069 = vmlaq_laneq_f64(vmulq_n_f64(v81, *(double *)v48->i64), v77, *(float64x2_t *)v48, 1);
          v97 = vmlaq_laneq_f64(vmulq_n_f64(v81, v72.f64[0]), v77, v72, 1);
          v1064 = vmlaq_laneq_f64(vmulq_n_f64(v94, v74.f64[0]), v95, v74, 1);
          v98 = vmlaq_laneq_f64(vmulq_n_f64(v81, v74.f64[0]), v77, v74, 1);
          v99 = vmlaq_laneq_f64(vmulq_n_f64(v94, v76.f64[0]), v95, v76, 1);
          v1059 = vmlaq_laneq_f64(vmulq_n_f64(v94, v79.f64[0]), v95, v79, 1);
          v100 = vmlaq_laneq_f64(vmulq_n_f64(v81, v76.f64[0]), v77, v76, 1);
          v101 = vmlaq_laneq_f64(vmulq_n_f64(v81, v79.f64[0]), v77, v79, 1);
          v1054 = vmlaq_laneq_f64(vmulq_n_f64(v94, v82.f64[0]), v95, v82, 1);
          v102 = v42;
          v103 = vmlaq_laneq_f64(vmulq_n_f64(v81, v82.f64[0]), v77, v82, 1);
          v104 = vmlaq_laneq_f64(vmulq_n_f64(v94, v84.f64[0]), v95, v84, 1);
          v105 = vmlaq_laneq_f64(vmulq_n_f64(v94, v86.f64[0]), v95, v86, 1);
          v106 = vmlaq_laneq_f64(vmulq_n_f64(v81, v84.f64[0]), v77, v84, 1);
          v107 = vmlaq_laneq_f64(vmulq_n_f64(v81, v86.f64[0]), v77, v86, 1);
          v108 = vmlaq_laneq_f64(vmulq_n_f64(v94, v87.f64[0]), v95, v87, 1);
          v109 = vmlaq_laneq_f64(vmulq_n_f64(v81, v87.f64[0]), v77, v87, 1);
          v110 = vmlaq_laneq_f64(vmulq_n_f64(v94, v89.f64[0]), v95, v89, 1);
          v111 = vmlaq_laneq_f64(vmulq_n_f64(v94, v91.f64[0]), v95, v91, 1);
          v112 = vmlaq_laneq_f64(vmulq_n_f64(v81, v89.f64[0]), v77, v89, 1);
          v113 = vmlaq_laneq_f64(vmulq_n_f64(v81, v91.f64[0]), v77, v91, 1);
          v114 = vmlaq_laneq_f64(vmulq_n_f64(v94, v92.f64[0]), v95, v92, 1);
          v115 = vmlaq_laneq_f64(vmulq_n_f64(v81, v92.f64[0]), v77, v92, 1);
          v116 = vmlaq_laneq_f64(vmulq_n_f64(v94, v93->f64[0]), v95, *v93, 1);
          v117 = vmlaq_laneq_f64(vmulq_n_f64(v81, v93->f64[0]), v77, *v93, 1);
          v118 = (float64x2_t *)((char *)v93 + v40);
          v119 = vmlaq_laneq_f64(vmulq_n_f64(v94, v118->f64[0]), v95, *v118, 1);
          v120 = *(float64x2_t *)((char *)v118 + 8 * v36);
          v121 = vmlaq_laneq_f64(vmulq_n_f64(v81, v118->f64[0]), v77, *v118, 1);
          v122 = vmlaq_laneq_f64(vmulq_n_f64(v94, v120.f64[0]), v95, v120, 1);
          v123 = vmlaq_laneq_f64(vmulq_n_f64(v81, v120.f64[0]), v77, v120, 1);
          v124 = vsubq_f64(v1359, v1074);
          v125 = vsubq_f64(v1354, v97);
          v126 = vsubq_f64(v1349, v96);
          v127 = vsubq_f64(v1344, v98);
          v128 = vsubq_f64(v1339, v1064);
          v129 = vsubq_f64(v1334, v100);
          v130 = vsubq_f64(v1329, v99);
          v131 = vsubq_f64(v1324, v101);
          v132 = vsubq_f64(v1319, v1059);
          v42 = vsubq_f64(v102, v103);
          v41 = vsubq_f64(v1444, v1054);
          v43 = vsubq_f64(v1439, v104);
          v44 = vsubq_f64(v1434, v107);
          v133 = vsubq_f64(v1314, v105);
          v134 = vsubq_f64(v1309, v109);
          v45 = vsubq_f64(v1429, v108);
          v135 = vsubq_f64(v1304, v112);
          v46 = vsubq_f64(v1424, v110);
          v136 = vsubq_f64(v1299, v113);
          v137 = vsubq_f64(v1294, v111);
          v138 = vsubq_f64(v1289, v115);
          v139 = vsubq_f64(v1284, v114);
          v140 = vsubq_f64(v1279, v117);
          v141 = vsubq_f64(v1274, v116);
          v142 = vsubq_f64(v1269, v121);
          v143 = vsubq_f64(v1264, v119);
          v144 = vsubq_f64(v1259, v123);
          v145 = vsubq_f64(v1254, v122);
          v1364 = vsubq_f64(v1364, v1069);
          *(float64x2_t *)v35 = v124;
          *(float64x2_t *)(v35 + 16) = v1364;
          v1359 = v124;
          v1354 = v125;
          *(float64x2_t *)(v35 + 136) = v125;
          v1349 = v126;
          *(float64x2_t *)(v35 + 120) = v126;
          v1344 = v127;
          *(float64x2_t *)(v35 + 240) = v128;
          *(float64x2_t *)(v35 + 256) = v127;
          v1339 = v128;
          v1334 = v129;
          *(float64x2_t *)(v35 + 360) = v130;
          *(float64x2_t *)(v35 + 376) = v129;
          v1329 = v130;
          v1324 = v131;
          *(float64x2_t *)(v35 + 480) = v132;
          *(float64x2_t *)(v35 + 496) = v131;
          v1319 = v132;
          *(float64x2_t *)(v35 + 600) = v41;
          *(float64x2_t *)(v35 + 616) = v42;
          v1149 = vsubq_f64(v1149, v106);
          *(float64x2_t *)(v35 + 720) = v43;
          *(float64x2_t *)(v35 + 736) = v1149;
          *(float64x2_t *)(v35 + 840) = v133;
          *(float64x2_t *)(v35 + 856) = v44;
          v1314 = v133;
          v1309 = v134;
          *(float64x2_t *)(v35 + 960) = v45;
          *(float64x2_t *)(v35 + 976) = v134;
          v1304 = v135;
          *(float64x2_t *)(v35 + 1080) = v46;
          *(float64x2_t *)(v35 + 1096) = v135;
          v1299 = v136;
          *(float64x2_t *)(v35 + 1200) = v137;
          *(float64x2_t *)(v35 + 1216) = v136;
          v1294 = v137;
          v1289 = v138;
          *(float64x2_t *)(v35 + 1320) = v139;
          *(float64x2_t *)(v35 + 1336) = v138;
          v1284 = v139;
          v1279 = v140;
          *(float64x2_t *)(v35 + 1456) = v140;
          v1274 = v141;
          *(float64x2_t *)(v35 + 1440) = v141;
          v1269 = v142;
          *(float64x2_t *)(v35 + 1560) = v143;
          *(float64x2_t *)(v35 + 1576) = v142;
          v1264 = v143;
          v1259 = v144;
          *(float64x2_t *)(v35 + 1680) = v145;
          *(float64x2_t *)(v35 + 1696) = v144;
          v1254 = v145;
          v146 = (int64x2_t *)((char *)v37 + 8 * (4 * v36 + v39));
          v147 = (float64x2_t)v146[4 * v36];
          v148 = *(float64x2_t *)((char *)v146 + 8 * v36);
          v149 = (float64x2_t)v146[v36];
          *(_QWORD *)&v124.f64[0] = vdupq_laneq_s64((int64x2_t)v149, 1).u64[0];
          v150 = *(float64x2_t *)((char *)v146 + 24 * v36);
          v151 = (float64x2_t)v146[2 * v36];
          v152 = *(float64x2_t *)((char *)v146 + 40 * v36);
          v153 = (float64x2_t)vzip1q_s64((int64x2_t)v149, (int64x2_t)v150);
          v154 = (float64x2_t)v146[3 * v36];
          v155 = *(float64x2_t *)((char *)v146 + 56 * v36);
          *(_QWORD *)&v124.f64[1] = v146->i64[v47 + 1];
          v156 = *(float64x2_t *)((char *)v146 + 72 * v36);
          v157 = (float64x2_t)v146[5 * v36];
          v158 = (float64x2_t)vzip1q_s64(*v146, (int64x2_t)v148);
          v159 = (float64x2_t)vzip2q_s64(*v146, (int64x2_t)v148);
          v160 = vmlaq_laneq_f64(vmulq_n_f64(v158, *(double *)v146->i64), v159, *(float64x2_t *)v146, 1);
          v161 = vmlaq_laneq_f64(vmulq_n_f64(v158, v148.f64[0]), v159, v148, 1);
          v162 = vmlaq_laneq_f64(vmulq_n_f64(v153, *(double *)v146->i64), v124, *(float64x2_t *)v146, 1);
          v163 = vmlaq_laneq_f64(vmulq_n_f64(v153, v148.f64[0]), v124, v148, 1);
          v164 = vmlaq_laneq_f64(vmulq_n_f64(v158, v149.f64[0]), v159, v149, 1);
          v165 = vmlaq_laneq_f64(vmulq_n_f64(v153, v149.f64[0]), v124, v149, 1);
          v166 = vmlaq_laneq_f64(vmulq_n_f64(v158, v150.f64[0]), v159, v150, 1);
          v167 = vmlaq_laneq_f64(vmulq_n_f64(v158, v151.f64[0]), v159, v151, 1);
          v168 = vmlaq_laneq_f64(vmulq_n_f64(v153, v150.f64[0]), v124, v150, 1);
          v169 = vmlaq_laneq_f64(vmulq_n_f64(v153, v151.f64[0]), v124, v151, 1);
          v170 = vmlaq_laneq_f64(vmulq_n_f64(v158, v152.f64[0]), v159, v152, 1);
          v171 = vmlaq_laneq_f64(vmulq_n_f64(v153, v152.f64[0]), v124, v152, 1);
          v172 = vmlaq_laneq_f64(vmulq_n_f64(v158, v154.f64[0]), v159, v154, 1);
          v173 = vmlaq_laneq_f64(vmulq_n_f64(v158, v155.f64[0]), v159, v155, 1);
          v174 = vmlaq_laneq_f64(vmulq_n_f64(v153, v154.f64[0]), v124, v154, 1);
          v175 = vmlaq_laneq_f64(vmulq_n_f64(v153, v155.f64[0]), v124, v155, 1);
          v176 = vmlaq_laneq_f64(vmulq_n_f64(v158, v147.f64[0]), v159, v147, 1);
          v177 = vmlaq_laneq_f64(vmulq_n_f64(v153, v147.f64[0]), v124, v147, 1);
          v178 = vmlaq_laneq_f64(vmulq_n_f64(v158, v156.f64[0]), v159, v156, 1);
          v179 = vmlaq_laneq_f64(vmulq_n_f64(v158, v157.f64[0]), v159, v157, 1);
          v180 = vmlaq_laneq_f64(vmulq_n_f64(v153, v156.f64[0]), v124, v156, 1);
          v181 = vmlaq_laneq_f64(vmulq_n_f64(v153, v157.f64[0]), v124, v157, 1);
          v182 = vsubq_f64(v1244, v160);
          v183 = vsubq_f64(v1239, v161);
          v49 = vsubq_f64(v1144, v163);
          v184 = vsubq_f64(v1234, v164);
          v50 = vsubq_f64(v1419, v165);
          v185 = vsubq_f64(v1229, v166);
          v51 = vsubq_f64(v1414, v168);
          v186 = vsubq_f64(v1224, v167);
          v52 = vsubq_f64(v1139, v169);
          v187 = vsubq_f64(v1219, v170);
          v53 = vsubq_f64(v1409, v171);
          v188 = vsubq_f64(v1214, v172);
          v54 = vsubq_f64(v1404, v174);
          v189 = vsubq_f64(v1209, v173);
          v55 = vsubq_f64(v1134, v175);
          v56 = vsubq_f64(v1399, v177);
          v190 = vsubq_f64(v1194, v178);
          v191 = vsubq_f64(v1199, v180);
          v192 = vsubq_f64(v1184, v179);
          v1249 = vsubq_f64(v1249, v162);
          *(float64x2_t *)(v35 + 512) = v182;
          *(float64x2_t *)(v35 + 528) = v1249;
          v1244 = v182;
          *(float64x2_t *)(v35 + 632) = v183;
          *(float64x2_t *)(v35 + 648) = v49;
          v1239 = v183;
          *(float64x2_t *)(v35 + 752) = v184;
          *(float64x2_t *)(v35 + 768) = v50;
          v1234 = v184;
          *(float64x2_t *)(v35 + 872) = v185;
          *(float64x2_t *)(v35 + 888) = v51;
          v1229 = v185;
          *(float64x2_t *)(v35 + 992) = v186;
          *(float64x2_t *)(v35 + 1008) = v52;
          v1224 = v186;
          *(float64x2_t *)(v35 + 1112) = v187;
          *(float64x2_t *)(v35 + 1128) = v53;
          v1219 = v187;
          *(float64x2_t *)(v35 + 1232) = v188;
          *(float64x2_t *)(v35 + 1248) = v54;
          v1214 = v188;
          *(float64x2_t *)(v35 + 1352) = v189;
          *(float64x2_t *)(v35 + 1368) = v55;
          v1209 = v189;
          v1204 = vsubq_f64(v1204, v176);
          *(float64x2_t *)(v35 + 1472) = v1204;
          *(float64x2_t *)(v35 + 1488) = v56;
          v1199 = v191;
          *(float64x2_t *)(v35 + 1592) = v190;
          *(float64x2_t *)(v35 + 1608) = v191;
          v1194 = v190;
          v193 = (int64x2_t *)((char *)v37 + 8 * (8 * v36 + v39));
          v1189 = vsubq_f64(v1189, v181);
          *(float64x2_t *)(v35 + 1712) = v192;
          *(float64x2_t *)(v35 + 1728) = v1189;
          v1184 = v192;
          v194 = *(float64x2_t *)((char *)v193 + 8 * v36);
          v195 = (float64x2_t)v193[v36];
          v196 = *(float64x2_t *)((char *)v193 + 24 * v36);
          *(_QWORD *)&v184.f64[0] = vdupq_laneq_s64((int64x2_t)v195, 1).u64[0];
          v197 = (float64x2_t)v193[2 * v36];
          v198 = (float64x2_t)vzip1q_s64((int64x2_t)v195, (int64x2_t)v196);
          v199 = *(float64x2_t *)((char *)v193 + 40 * v36);
          v200 = (float64x2_t)vzip1q_s64(*v193, (int64x2_t)v194);
          *(_QWORD *)&v184.f64[1] = v193->i64[v47 + 1];
          v201 = (float64x2_t)vzip2q_s64(*v193, (int64x2_t)v194);
          v202 = vmlaq_laneq_f64(vmulq_n_f64(v200, *(double *)v193->i64), v201, *(float64x2_t *)v193, 1);
          v203 = vmlaq_laneq_f64(vmulq_n_f64(v200, v194.f64[0]), v201, v194, 1);
          v204 = vmlaq_laneq_f64(vmulq_n_f64(v198, *(double *)v193->i64), v184, *(float64x2_t *)v193, 1);
          v205 = vmlaq_laneq_f64(vmulq_n_f64(v198, v194.f64[0]), v184, v194, 1);
          v206 = vmlaq_laneq_f64(vmulq_n_f64(v200, v195.f64[0]), v201, v195, 1);
          v207 = vmlaq_laneq_f64(vmulq_n_f64(v198, v195.f64[0]), v184, v195, 1);
          v208 = vmlaq_laneq_f64(vmulq_n_f64(v200, v196.f64[0]), v201, v196, 1);
          v209 = vmlaq_laneq_f64(vmulq_n_f64(v200, v197.f64[0]), v201, v197, 1);
          v210 = vmlaq_laneq_f64(vmulq_n_f64(v198, v196.f64[0]), v184, v196, 1);
          v211 = vmlaq_laneq_f64(vmulq_n_f64(v198, v197.f64[0]), v184, v197, 1);
          v212 = vmlaq_laneq_f64(vmulq_n_f64(v200, v199.f64[0]), v201, v199, 1);
          v213 = vmlaq_laneq_f64(vmulq_n_f64(v198, v199.f64[0]), v184, v199, 1);
          _Q7 = (float64x2_t)v193[3 * v36];
          v215 = vmlaq_laneq_f64(vmulq_n_f64(v200, _Q7.f64[0]), v201, _Q7, 1);
          v216 = vmlaq_laneq_f64(vmulq_n_f64(v198, _Q7.f64[0]), v184, _Q7, 1);
          v58 = vsubq_f64(v1124, v202);
          v57 = vsubq_f64(v1129, v204);
          v60 = vsubq_f64(v1394, v203);
          v59 = vsubq_f64(v1119, v205);
          v217 = vsubq_f64(v1179, v206);
          v61 = vsubq_f64(v1389, v207);
          v218 = vsubq_f64(v1174, v208);
          v62 = vsubq_f64(v1384, v210);
          v219 = vsubq_f64(v1169, v209);
          v63 = vsubq_f64(v1114, v211);
          v220 = vsubq_f64(v1164, v212);
          v64 = vsubq_f64(v1379, v213);
          v221 = vsubq_f64(v1159, v215);
          v65 = vsubq_f64(v1109, v216);
          *(float64x2_t *)(v35 + 1040) = v57;
          *(float64x2_t *)(v35 + 1024) = v58;
          *(float64x2_t *)(v35 + 1144) = v60;
          *(float64x2_t *)(v35 + 1160) = v59;
          *(float64x2_t *)(v35 + 1264) = v217;
          *(float64x2_t *)(v35 + 1280) = v61;
          v1179 = v217;
          *(float64x2_t *)(v35 + 1400) = v62;
          v1174 = v218;
          *(float64x2_t *)(v35 + 1384) = v218;
          v1169 = v219;
          *(float64x2_t *)(v35 + 1504) = v219;
          *(float64x2_t *)(v35 + 1520) = v63;
          *(float64x2_t *)(v35 + 1624) = v220;
          *(float64x2_t *)(v35 + 1640) = v64;
          v1164 = v220;
          v222 = (int64x2_t *)((char *)v37 + 8 * (12 * v36 + v39));
          *(float64x2_t *)(v35 + 1744) = v221;
          *(float64x2_t *)(v35 + 1760) = v65;
          v1159 = v221;
          v223 = *(float64x2_t *)((char *)v222 + 8 * v36);
          _Q2 = (float64x2_t)v222[v36];
          v225 = (float64x2_t)vzip1q_s64(*v222, (int64x2_t)v223);
          _Q5 = (float64x2_t)vzip2q_s64(*v222, (int64x2_t)v223);
          _Q6 = vmulq_f64(_Q2, *(float64x2_t *)v222);
          *(_QWORD *)&_Q7.f64[0] = v222->i64[1];
          __asm { FMLA            D6, D7, V2.D[1] }
          v231 = vmlaq_laneq_f64(vmulq_n_f64(v225, *(double *)v222->i64), _Q5, *(float64x2_t *)v222, 1);
          _Q0 = vmulq_f64(_Q2, v223);
          *(_QWORD *)&_Q7.f64[0] = v222->i64[(unint64_t)v40 / 8 + 1];
          __asm { FMLA            D0, D7, V2.D[1] }
          v233 = vmlaq_laneq_f64(vmulq_n_f64(v225, v223.f64[0]), _Q5, v223, 1);
          v234 = vmlaq_laneq_f64(vmulq_n_f64(v225, _Q2.f64[0]), _Q5, _Q2, 1);
          _Q1 = vmulq_f64(_Q2, _Q2);
          *(_QWORD *)&_Q5.f64[0] = v222[v36].i64[1];
          __asm { FMLA            D1, D5, V2.D[1] }
          *(_QWORD *)&_Q5.f64[0] = v1099;
          *(_QWORD *)&_Q5.f64[1] = v1154;
          v66 = (int8x16_t)vsubq_f64(_Q5, v231);
          v25 = vsubq_f64(v1104, _Q6);
          *(_QWORD *)&_Q6.f64[0] = v1094;
          *(_QWORD *)&_Q6.f64[1] = v1079;
          *(_QWORD *)&v231.f64[0] = v1089;
          v67 = vsubq_f64(v1374, _Q0);
          v68 = (int8x16_t)vsubq_f64(_Q6, v233);
          *(_QWORD *)&v231.f64[1] = v1084;
          v1154 = vextq_s8(v66, v66, 8uLL).u64[0];
          v70 = (int8x16_t)vsubq_f64(v231, v234);
          v69 = vextq_s8(v68, v68, 8uLL).u64[0];
          *(int8x16_t *)(v35 + 1536) = v66;
          *(float64_t *)(v35 + 1552) = v25.f64[0];
          v24 = vsubq_f64(v1369, _Q1);
          v71 = vextq_s8(v70, v70, 8uLL).u64[0];
          *(int8x16_t *)(v35 + 1656) = v68;
          *(float64_t *)(v35 + 1672) = v67.f64[0];
          *(int8x16_t *)(v35 + 1776) = v70;
          *(float64_t *)(v35 + 1792) = v24.f64[0];
          LODWORD(v222) = v39 + 4;
          v39 += 2;
          ++v48;
        }
        while (v222 <= v36);
        v38 = *(_DWORD *)(v8 + 16);
      }
      if ((v38 & 1) != 0)
      {
        LODWORD(v1449) = 1;
        HIDWORD(v1449) = v36;
        v1450 = &v37->i8[8 * (v36 - 1)];
        v1451 = v36 - 1;
        v1454 = (char *)&v1449;
        v1445 = *(float64x2_t *)v35;
        v1440 = *(_OWORD *)(v35 + 16);
        v1435 = *(_OWORD *)(v35 + 32);
        v1430 = *(_OWORD *)(v35 + 48);
        v1425 = *(_OWORD *)(v35 + 64);
        v1420 = *(_OWORD *)(v35 + 80);
        v1415 = *(_OWORD *)(v35 + 96);
        v1410 = *(_OWORD *)(v35 + 112);
        v1405 = *(_OWORD *)(v35 + 128);
        v1400 = *(_OWORD *)(v35 + 144);
        v1395 = *(_OWORD *)(v35 + 160);
        v1390 = *(_OWORD *)(v35 + 176);
        v1385 = *(_OWORD *)(v35 + 192);
        v1380 = *(_OWORD *)(v35 + 208);
        v1375 = *(_OWORD *)(v35 + 224);
        v1370 = *(_OWORD *)(v35 + 240);
        v1365 = *(_OWORD *)(v35 + 256);
        v1360 = *(_OWORD *)(v35 + 272);
        v1355 = *(_OWORD *)(v35 + 288);
        v1350 = *(_OWORD *)(v35 + 304);
        v1345 = *(_OWORD *)(v35 + 320);
        v1340 = *(_OWORD *)(v35 + 336);
        v1335 = *(_OWORD *)(v35 + 352);
        v1330 = *(_OWORD *)(v35 + 368);
        v1325 = *(_OWORD *)(v35 + 384);
        v1320 = *(_OWORD *)(v35 + 400);
        v1315 = *(_OWORD *)(v35 + 416);
        v1310 = *(_OWORD *)(v35 + 432);
        v1305 = *(_OWORD *)(v35 + 448);
        v1300 = *(_OWORD *)(v35 + 464);
        v1295 = *(_OWORD *)(v35 + 480);
        v1290 = *(_OWORD *)(v35 + 496);
        v1285 = *(_OWORD *)(v35 + 512);
        v1280 = *(_OWORD *)(v35 + 528);
        v1275 = *(_OWORD *)(v35 + 544);
        v1270 = *(_OWORD *)(v35 + 560);
        v1265 = *(_OWORD *)(v35 + 576);
        v1260 = *(_OWORD *)(v35 + 592);
        v1255 = *(_OWORD *)(v35 + 608);
        v1250 = *(_OWORD *)(v35 + 624);
        v1245 = *(_OWORD *)(v35 + 640);
        v1240 = *(_OWORD *)(v35 + 656);
        v1235 = *(_OWORD *)(v35 + 672);
        v1230 = *(_OWORD *)(v35 + 688);
        v1225 = *(_OWORD *)(v35 + 704);
        v1220 = *(_OWORD *)(v35 + 720);
        v1215 = *(_OWORD *)(v35 + 736);
        v1210 = *(_OWORD *)(v35 + 752);
        v1205 = *(_OWORD *)(v35 + 768);
        v1200 = *(_OWORD *)(v35 + 784);
        v1195 = *(_OWORD *)(v35 + 800);
        v1190 = *(_OWORD *)(v35 + 816);
        v1185 = *(_OWORD *)(v35 + 832);
        v1180 = *(_OWORD *)(v35 + 848);
        v1175 = *(_OWORD *)(v35 + 864);
        v1170 = *(_OWORD *)(v35 + 880);
        v1165 = *(_OWORD *)(v35 + 896);
        v1160 = *(_OWORD *)(v35 + 912);
        v1155 = *(_OWORD *)(v35 + 928);
        v1150 = *(_OWORD *)(v35 + 944);
        v1145 = *(_OWORD *)(v35 + 960);
        v1140 = *(_OWORD *)(v35 + 976);
        v1135 = *(_OWORD *)(v35 + 992);
        v1130 = *(_OWORD *)(v35 + 1008);
        v1125 = *(_OWORD *)(v35 + 1024);
        v1120 = *(_OWORD *)(v35 + 1040);
        v1115 = *(_OWORD *)(v35 + 1056);
        v1110 = *(_OWORD *)(v35 + 1072);
        v1105 = *(_OWORD *)(v35 + 1088);
        v1100 = *(_OWORD *)(v35 + 1104);
        v1095 = *(_OWORD *)(v35 + 1120);
        v1090 = *(_OWORD *)(v35 + 1136);
        v1085 = *(_OWORD *)(v35 + 1152);
        v1080 = *(_OWORD *)(v35 + 1168);
        v1075 = *(_OWORD *)(v35 + 1184);
        v1070 = *(_OWORD *)(v35 + 1200);
        v1065 = *(_OWORD *)(v35 + 1216);
        v1060 = *(_OWORD *)(v35 + 1232);
        v1055 = *(_OWORD *)(v35 + 1248);
        v1050 = *(_OWORD *)(v35 + 1264);
        v1046 = *(_OWORD *)(v35 + 1280);
        v236 = *(_OWORD *)(v35 + 1296);
        v237 = *(float64x2_t *)(v35 + 1312);
        v238 = *(_OWORD *)(v35 + 1328);
        v239 = *(_OWORD *)(v35 + 1344);
        v240 = *(_OWORD *)(v35 + 1360);
        v241 = *(_OWORD *)(v35 + 1376);
        v242 = *(_OWORD *)(v35 + 1392);
        v243 = *(_OWORD *)(v35 + 1408);
        v244 = *(_OWORD *)(v35 + 1424);
        v245 = *(_OWORD *)(v35 + 1440);
        v246 = *(_OWORD *)(v35 + 1456);
        v247 = *(_OWORD *)(v35 + 1472);
        v248 = *(_OWORD *)(v35 + 1488);
        v249 = *(_OWORD *)(v35 + 1504);
        v250 = *(_OWORD *)(v35 + 1520);
        v251 = *(_OWORD *)(v35 + 1536);
        v252 = *(_OWORD *)(v35 + 1552);
        v253 = *(_OWORD *)(v35 + 1568);
        v254 = *(_OWORD *)(v35 + 1584);
        v255 = *(_OWORD *)(v35 + 1600);
        v256 = *(_OWORD *)(v35 + 1616);
        v257 = *(_OWORD *)(v35 + 1632);
        v258 = *(_OWORD *)(v35 + 1648);
        v259 = *(_OWORD *)(v35 + 1664);
        v260 = *(_OWORD *)(v35 + 1680);
        v261 = *(_OWORD *)(v35 + 1696);
        v262 = *(_OWORD *)(v35 + 1712);
        v263 = *(_OWORD *)(v35 + 1728);
        v264 = *(_OWORD *)(v35 + 1744);
        v265 = *(_OWORD *)(v35 + 1760);
        v266 = *(_OWORD *)(v35 + 1776);
        v1568 = *(_QWORD *)(v35 + 1792);
        v1567 = v266;
        v1566 = v265;
        v1565 = v264;
        v1564 = v263;
        v1563 = v262;
        v1562 = v261;
        v1561 = v260;
        v1560 = v259;
        v1559 = v258;
        v1558 = v257;
        v1557 = v256;
        v1556 = v255;
        v1555 = v254;
        v1554 = v253;
        v1553 = v252;
        v1552 = v251;
        v1551 = v250;
        v1550 = v249;
        v1549 = v248;
        v1548 = v247;
        v1547 = v246;
        v1546 = v245;
        v1545 = v244;
        v1544 = v243;
        v1543 = v242;
        v1542 = v241;
        v1541 = v240;
        v1540 = v239;
        v1539 = v238;
        v1538 = v237;
        v1537 = v236;
        v1536 = v1046;
        v1535 = v1050;
        v1534 = v1055;
        v1533 = v1060;
        v1532 = v1065;
        v1531 = v1070;
        v1530 = v1075;
        v1529 = v1080;
        v1528 = v1085;
        v1527 = v1090;
        v1526 = v1095;
        v1525 = v1100;
        v1524 = v1105;
        v1523 = v1110;
        v1522 = v1115;
        v1521 = v1120;
        v1519 = v1130;
        v1520 = v1125;
        v1517 = v1140;
        v1518 = v1135;
        v1515 = v1150;
        v1516 = v1145;
        v1513 = v1160;
        v1514 = v1155;
        v1511 = v1170;
        v1512 = v1165;
        v1509 = v1180;
        v1510 = v1175;
        v1507 = v1190;
        v1508 = v1185;
        v1505 = v1200;
        v1506 = v1195;
        v1503 = v1210;
        v1504 = v1205;
        v1501 = v1220;
        v1502 = v1215;
        v1499 = v1230;
        v1500 = v1225;
        v1497 = v1240;
        v1498 = v1235;
        v1495 = v1250;
        v1496 = v1245;
        v1493 = v1260;
        v1494 = v1255;
        v1491 = v1270;
        v1492 = v1265;
        v1489 = v1280;
        v1490 = v1275;
        v1487 = v1290;
        v1488 = v1285;
        v1485 = v1300;
        v1486 = v1295;
        v1483 = v1310;
        v1484 = v1305;
        v1481 = v1320;
        v1482 = v1315;
        v1479 = v1330;
        v1480 = v1325;
        v1477 = v1340;
        v1478 = v1335;
        v1475 = v1350;
        v1476 = v1345;
        v1473 = v1360;
        v1474 = v1355;
        v1471 = v1370;
        v1472 = v1365;
        v1469 = v1380;
        v1470 = v1375;
        v1467 = v1390;
        v1468 = v1385;
        v1465 = v1400;
        v1466 = v1395;
        v1463 = v1410;
        v1464 = v1405;
        v1461 = v1420;
        v1462 = v1415;
        v1460 = v1425;
        v1459 = v1430;
        v1458 = v1435;
        v1457 = v1440;
        v1456 = v1445;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1456;
        v1571 = &v1454;
        v1572 = &v1449;
        v1573 = 0x3FF0000000000000;
        sub_20FBAA984((double *)&__p.__r_.__value_.__l.__size_, (uint64_t)&v1569);
        v267.f64[0] = *(float64_t *)(__p.__r_.__value_.__r.__words[0] + 1792);
        v237.f64[0] = v1577;
        *(_QWORD *)&v1445.f64[0] = *(_OWORD *)&vsubq_f64(v267, v237);
        v1441 = vsubq_f64(*(float64x2_t *)__p.__r_.__value_.__l.__data_, *(float64x2_t *)&__p.__r_.__value_.__r.__words[1]);
        v1436 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 16), v1575);
        v1431 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 32), v1576[0]);
        v1426 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 48), v1576[1]);
        v1421 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 64), v1576[2]);
        v1416 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 80), v1576[3]);
        v1411 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 96), v1576[4]);
        v1406 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 112), v1576[5]);
        v1401 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 128), v1576[6]);
        v1396 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 144), v1576[7]);
        v1391 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 160), v1576[8]);
        v1386 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 176), v1576[9]);
        v1381 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 192), v1576[10]);
        v1376 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 208), v1576[11]);
        v1371 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 224), v1576[12]);
        v1366 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 240), v1576[13]);
        v1361 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 256), v1576[14]);
        v1356 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 272), v1576[15]);
        v1351 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 288), v1576[16]);
        v1346 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 304), v1576[17]);
        v1341 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 320), v1576[18]);
        v1336 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 336), v1576[19]);
        v1331 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 352), v1576[20]);
        v1326 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 368), v1576[21]);
        v1321 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 384), v1576[22]);
        v1316 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 400), v1576[23]);
        v1311 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 416), v1576[24]);
        v1306 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 432), v1576[25]);
        v1301 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 448), v1576[26]);
        v1296 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 464), v1576[27]);
        v1291 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 480), v1576[28]);
        v1286 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 496), v1576[29]);
        v1281 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 512), v1576[30]);
        v1276 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 528), v1576[31]);
        v1271 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 544), v1576[32]);
        v1266 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 560), v1576[33]);
        v1261 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 576), v1576[34]);
        v1256 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 592), v1576[35]);
        v1251 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 608), v1576[36]);
        v1246 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 624), v1576[37]);
        v1241 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 640), v1576[38]);
        v1236 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 656), v1576[39]);
        v1231 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 672), v1576[40]);
        v1226 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 688), v1576[41]);
        v1221 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 704), v1576[42]);
        v1216 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 720), v1576[43]);
        v1211 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 736), v1576[44]);
        v1206 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 752), v1576[45]);
        v1201 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 768), v1576[46]);
        v1196 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 784), v1576[47]);
        v1191 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 800), v1576[48]);
        v1186 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 816), v1576[49]);
        v1181 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 832), v1576[50]);
        v1176 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 848), v1576[51]);
        v1171 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 864), v1576[52]);
        v1166 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 880), v1576[53]);
        v1161 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 896), v1576[54]);
        v1156 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 912), v1576[55]);
        v1151 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 928), v1576[56]);
        v1146 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 944), v1576[57]);
        v1141 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 960), v1576[58]);
        v1136 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 976), v1576[59]);
        v1131 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 992), v1576[60]);
        v1126 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1008), v1576[61]);
        v1121 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1024), v1576[62]);
        v1116 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1040), v1576[63]);
        v1111 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1056), v1576[64]);
        v1106 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1072), v1576[65]);
        v1101 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1088), v1576[66]);
        v1096 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1104), v1576[67]);
        v1091 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1120), v1576[68]);
        v1086 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1136), v1576[69]);
        v1081 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1152), v1576[70]);
        v1076 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1168), v1576[71]);
        v1071 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1184), v1576[72]);
        v1066 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1200), v1576[73]);
        v1061 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1216), v1576[74]);
        v1056 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1232), v1576[75]);
        v1051 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1248), v1576[76]);
        v1047 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1264), v1576[77]);
        v1043 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1280), v1576[78]);
        v268 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1296), v1576[79]);
        v269 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1312), v1576[80]);
        v270 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1328), v1576[81]);
        v271 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1344), v1576[82]);
        v272 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1360), v1576[83]);
        v273 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1376), v1576[84]);
        v274 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1392), v1576[85]);
        v275 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1408), v1576[86]);
        v276 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1424), v1576[87]);
        v277 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1440), v1576[88]);
        v278 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1456), v1576[89]);
        v279 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1472), v1576[90]);
        v280 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1488), v1576[91]);
        v281 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1504), v1576[92]);
        v282 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1520), v1576[93]);
        v283 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1536), v1576[94]);
        v284 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1552), v1576[95]);
        v285 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1568), v1576[96]);
        v286 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1584), v1576[97]);
        v287 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1600), v1576[98]);
        v288 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1616), v1576[99]);
        v289 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1632), v1576[100]);
        v290 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1648), v1576[101]);
        v291 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1664), v1576[102]);
        v292 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1680), v1576[103]);
        v293 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1696), v1576[104]);
        v294 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1712), v1576[105]);
        v295 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1728), v1576[106]);
        v296 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1744), v1576[107]);
        v297 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1760), v1576[108]);
        *(float64x2_t *)(v35 + 1776) = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1776), v1576[109]);
        *(float64x2_t *)(v35 + 1760) = v297;
        *(float64x2_t *)(v35 + 1744) = v296;
        *(float64x2_t *)(v35 + 1728) = v295;
        *(float64x2_t *)(v35 + 1712) = v294;
        *(float64x2_t *)(v35 + 1696) = v293;
        *(float64x2_t *)(v35 + 1680) = v292;
        *(float64x2_t *)(v35 + 1664) = v291;
        *(float64x2_t *)(v35 + 1648) = v290;
        *(float64x2_t *)(v35 + 1632) = v289;
        *(float64x2_t *)(v35 + 1616) = v288;
        *(float64x2_t *)(v35 + 1600) = v287;
        *(float64x2_t *)(v35 + 1584) = v286;
        *(float64x2_t *)(v35 + 1568) = v285;
        *(float64x2_t *)(v35 + 1552) = v284;
        *(float64x2_t *)(v35 + 1536) = v283;
        *(float64x2_t *)(v35 + 1520) = v282;
        *(float64x2_t *)(v35 + 1504) = v281;
        *(float64x2_t *)(v35 + 1488) = v280;
        *(float64x2_t *)(v35 + 1472) = v279;
        *(float64x2_t *)(v35 + 1456) = v278;
        *(float64x2_t *)(v35 + 1440) = v277;
        *(float64x2_t *)(v35 + 1424) = v276;
        *(float64x2_t *)(v35 + 1408) = v275;
        *(float64x2_t *)(v35 + 1392) = v274;
        *(float64x2_t *)(v35 + 1376) = v273;
        *(float64x2_t *)(v35 + 1360) = v272;
        *(float64x2_t *)(v35 + 1344) = v271;
        *(float64x2_t *)(v35 + 1328) = v270;
        *(float64x2_t *)(v35 + 1312) = v269;
        *(float64x2_t *)(v35 + 1296) = v268;
        *(float64x2_t *)(v35 + 1280) = v1043;
        *(float64x2_t *)(v35 + 1264) = v1047;
        *(float64x2_t *)(v35 + 1248) = v1051;
        *(float64x2_t *)(v35 + 1232) = v1056;
        *(float64x2_t *)(v35 + 1216) = v1061;
        *(float64x2_t *)(v35 + 1200) = v1066;
        *(float64x2_t *)(v35 + 1184) = v1071;
        *(float64x2_t *)(v35 + 1168) = v1076;
        *(float64x2_t *)(v35 + 1152) = v1081;
        *(float64x2_t *)(v35 + 1136) = v1086;
        *(float64x2_t *)(v35 + 1120) = v1091;
        *(float64x2_t *)(v35 + 1104) = v1096;
        *(float64x2_t *)(v35 + 1088) = v1101;
        *(float64x2_t *)(v35 + 1072) = v1106;
        *(float64x2_t *)(v35 + 1056) = v1111;
        *(float64x2_t *)(v35 + 1040) = v1116;
        *(float64x2_t *)(v35 + 1008) = v1126;
        *(float64x2_t *)(v35 + 1024) = v1121;
        *(float64x2_t *)(v35 + 976) = v1136;
        *(float64x2_t *)(v35 + 992) = v1131;
        *(float64x2_t *)(v35 + 944) = v1146;
        *(float64x2_t *)(v35 + 960) = v1141;
        *(float64x2_t *)(v35 + 912) = v1156;
        *(float64x2_t *)(v35 + 928) = v1151;
        *(float64x2_t *)(v35 + 880) = v1166;
        *(float64x2_t *)(v35 + 896) = v1161;
        *(float64x2_t *)(v35 + 848) = v1176;
        *(float64x2_t *)(v35 + 864) = v1171;
        *(float64x2_t *)(v35 + 816) = v1186;
        *(float64x2_t *)(v35 + 832) = v1181;
        *(float64x2_t *)(v35 + 784) = v1196;
        *(float64x2_t *)(v35 + 800) = v1191;
        *(float64x2_t *)(v35 + 752) = v1206;
        *(float64x2_t *)(v35 + 768) = v1201;
        *(float64x2_t *)(v35 + 720) = v1216;
        *(float64x2_t *)(v35 + 736) = v1211;
        *(float64x2_t *)(v35 + 688) = v1226;
        *(float64x2_t *)(v35 + 704) = v1221;
        *(float64x2_t *)(v35 + 656) = v1236;
        *(float64x2_t *)(v35 + 672) = v1231;
        *(float64x2_t *)(v35 + 624) = v1246;
        *(float64x2_t *)(v35 + 640) = v1241;
        *(float64x2_t *)(v35 + 592) = v1256;
        *(float64x2_t *)(v35 + 608) = v1251;
        *(float64x2_t *)(v35 + 560) = v1266;
        *(float64x2_t *)(v35 + 576) = v1261;
        *(float64x2_t *)(v35 + 528) = v1276;
        *(float64x2_t *)(v35 + 544) = v1271;
        *(float64x2_t *)(v35 + 496) = v1286;
        *(float64x2_t *)(v35 + 512) = v1281;
        *(float64x2_t *)(v35 + 464) = v1296;
        *(float64x2_t *)(v35 + 480) = v1291;
        *(float64x2_t *)(v35 + 432) = v1306;
        *(float64x2_t *)(v35 + 448) = v1301;
        *(float64x2_t *)(v35 + 400) = v1316;
        *(float64x2_t *)(v35 + 416) = v1311;
        *(float64x2_t *)(v35 + 368) = v1326;
        *(float64x2_t *)(v35 + 384) = v1321;
        *(float64x2_t *)(v35 + 336) = v1336;
        *(float64x2_t *)(v35 + 352) = v1331;
        *(float64x2_t *)(v35 + 304) = v1346;
        *(float64x2_t *)(v35 + 320) = v1341;
        *(float64x2_t *)(v35 + 272) = v1356;
        *(float64x2_t *)(v35 + 288) = v1351;
        *(float64x2_t *)(v35 + 240) = v1366;
        *(float64x2_t *)(v35 + 256) = v1361;
        *(float64x2_t *)(v35 + 208) = v1376;
        *(float64x2_t *)(v35 + 224) = v1371;
        *(float64x2_t *)(v35 + 176) = v1386;
        *(float64x2_t *)(v35 + 192) = v1381;
        *(float64x2_t *)(v35 + 144) = v1396;
        *(float64x2_t *)(v35 + 160) = v1391;
        *(float64x2_t *)(v35 + 112) = v1406;
        *(float64x2_t *)(v35 + 128) = v1401;
        *(float64x2_t *)(v35 + 80) = v1416;
        *(float64x2_t *)(v35 + 96) = v1411;
        *(float64x2_t *)(v35 + 48) = v1426;
        *(float64x2_t *)(v35 + 64) = v1421;
        *(float64x2_t *)(v35 + 16) = v1436;
        *(float64x2_t *)(v35 + 32) = v1431;
        *(float64x2_t *)v35 = v1441;
        *(float64_t *)(v35 + 1792) = v1445.f64[0];
      }
      break;
    default:
      *(_QWORD *)&v1456.f64[0] = v8;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v1456;
      __p.__r_.__value_.__r.__words[2] = v8;
      v1575.f64[0] = 1.0;
      sub_20F2B8D98(v4, (uint64_t)&__p);
      break;
  }
  return 1;
}

void sub_20FBA3A2C(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x1328]) && SLOBYTE(STACK[0x1327]) < 0)
    operator delete((void *)STACK[0x1310]);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0xBE8]);
  if (!STACK[0x12F8])
    _Unwind_Resume(a1);
  MEMORY[0x212BC6368](STACK[0x12F8], 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

uint64_t sub_20FBA3C5C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  std::string::size_type v3;
  std::string::size_type v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  __CLPK_doublereal *v10;
  int v11;
  int v12;
  double *v13;
  double *__B;
  uint64_t __lda;
  uint64_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  double *v25;
  int v26;
  int v27;
  uint64_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  uint64_t v35;
  int64x2_t *v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  int8x16_t v54;
  float64x2_t v55;
  int8x16_t v56;
  unint64_t v57;
  int8x16_t v58;
  unint64_t v59;
  float64x2_t v60;
  float64x2_t *v61;
  float64x2_t v62;
  float64x2_t *v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t *v66;
  float64x2_t v67;
  float64x2_t *v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t *v71;
  float64x2_t v72;
  float64x2_t *v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t *v76;
  float64x2_t v77;
  float64x2_t *v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t *v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t *v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  int64x2_t *v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  int64x2_t *v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  int64x2_t *v210;
  float64x2_t v211;
  float64x2_t v213;
  float64x2_t v219;
  float64x2_t v221;
  float64x2_t v222;
  __int128 v224;
  float64x2_t v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  float64x2_t v255;
  float64x2_t v256;
  float64x2_t v257;
  float64x2_t v258;
  float64x2_t v259;
  float64x2_t v260;
  float64x2_t v261;
  float64x2_t v262;
  float64x2_t v263;
  float64x2_t v264;
  float64x2_t v265;
  float64x2_t v266;
  float64x2_t v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  float64x2_t v271;
  float64x2_t v272;
  float64x2_t v273;
  float64x2_t v274;
  float64x2_t v275;
  float64x2_t v276;
  float64x2_t v277;
  float64x2_t v278;
  float64x2_t v279;
  float64x2_t v280;
  float64x2_t v281;
  float64x2_t v282;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  unint64_t v286;
  uint64_t v287;
  double *v288;
  int v289;
  int v290;
  uint64_t v291;
  uint64_t v292;
  int64x2_t *v293;
  float64x2_t v294;
  float64x2_t v295;
  float64x2_t v296;
  float64x2_t v297;
  float64x2_t v298;
  float64x2_t v299;
  int8x16_t v300;
  int8x16_t v301;
  unint64_t v302;
  int8x16_t v303;
  unint64_t v304;
  unint64_t v305;
  int8x16_t v306;
  unint64_t v307;
  unint64_t v308;
  int8x16_t v309;
  int8x16_t v310;
  unint64_t v311;
  unint64_t v312;
  int8x16_t v313;
  float64x2_t v314;
  int64x2_t *v315;
  float64x2_t v316;
  float64x2_t v317;
  float64x2_t v318;
  float64x2_t *v319;
  float64x2_t v320;
  float64x2_t v321;
  float64x2_t *v322;
  float64x2_t v323;
  float64x2_t *v324;
  float64x2_t v325;
  float64x2_t *v326;
  float64x2_t v327;
  float64x2_t *v328;
  float64x2_t v329;
  float64x2_t v330;
  float64x2_t v331;
  float64x2_t v332;
  float64x2_t v333;
  float64x2_t v334;
  float64x2_t v335;
  float64x2_t v336;
  float64x2_t v337;
  float64x2_t v338;
  float64x2_t v339;
  float64x2_t v340;
  float64x2_t v341;
  float64x2_t v342;
  float64x2_t v343;
  float64x2_t v344;
  float64x2_t v345;
  float64x2_t *v346;
  float64x2_t v347;
  float64x2_t v348;
  float64x2_t *v349;
  float64x2_t v350;
  float64x2_t v351;
  float64x2_t *v352;
  float64x2_t *v353;
  float64x2_t *v354;
  float64x2_t *v355;
  float64x2_t *v356;
  float64x2_t *v357;
  float64x2_t *v358;
  float64x2_t *v359;
  float64x2_t *v360;
  float64x2_t v361;
  float64x2_t v362;
  float64x2_t v363;
  float64x2_t v364;
  float64x2_t v365;
  float64x2_t v366;
  float64x2_t v367;
  float64x2_t v368;
  float64x2_t v369;
  float64x2_t v370;
  float64x2_t v371;
  float64x2_t v372;
  float64x2_t v373;
  float64x2_t v374;
  float64x2_t v375;
  float64x2_t v376;
  float64x2_t v377;
  int64x2_t *v378;
  float64x2_t v379;
  float64x2_t v380;
  float64x2_t v381;
  float64x2_t v382;
  float64x2_t v383;
  float64x2_t v384;
  float64x2_t v385;
  float64x2_t v386;
  float64x2_t v387;
  float64x2_t v388;
  float64x2_t v389;
  float64x2_t v390;
  float64x2_t v391;
  float64x2_t v392;
  float64x2_t v393;
  float64x2_t v394;
  float64x2_t v395;
  float64x2_t v396;
  float64x2_t v397;
  float64x2_t v398;
  float64x2_t v399;
  float64x2_t v400;
  float64x2_t v401;
  float64x2_t v402;
  float64x2_t v403;
  float64x2_t v404;
  float64x2_t v405;
  float64x2_t v406;
  float64x2_t v407;
  float64x2_t v408;
  float64x2_t v409;
  float64x2_t v410;
  float64x2_t v411;
  float64x2_t v412;
  float64x2_t v413;
  float64x2_t v414;
  float64x2_t v415;
  float64x2_t v416;
  float64x2_t v417;
  float64x2_t v418;
  float64x2_t v419;
  float64x2_t v420;
  int64x2_t *v421;
  float64x2_t v422;
  float64x2_t v423;
  float64x2_t v424;
  float64x2_t v425;
  float64x2_t v426;
  float64x2_t v427;
  float64x2_t v428;
  float64x2_t v429;
  float64x2_t v430;
  float64x2_t v431;
  float64x2_t v432;
  float64x2_t v433;
  float64x2_t v434;
  float64x2_t v435;
  float64x2_t v436;
  float64x2_t v437;
  float64x2_t v438;
  float64x2_t v439;
  float64x2_t v440;
  float64x2_t v441;
  float64x2_t v442;
  float64x2_t v443;
  float64x2_t v444;
  float64x2_t v445;
  float64x2_t v446;
  float64x2_t v447;
  float64x2_t v448;
  float64x2_t v449;
  float64x2_t v450;
  float64x2_t v451;
  float64x2_t v452;
  float64x2_t v453;
  float64x2_t v454;
  float64x2_t v455;
  float64x2_t v456;
  float64x2_t v457;
  float64x2_t v458;
  float64x2_t v459;
  float64x2_t v460;
  float64x2_t v461;
  float64x2_t v462;
  float64x2_t v463;
  float64x2_t v464;
  float64x2_t v465;
  float64x2_t v466;
  float64x2_t v467;
  float64x2_t v468;
  float64x2_t v469;
  float64x2_t v470;
  int64x2_t *v471;
  float64x2_t v472;
  float64x2_t v473;
  float64x2_t v474;
  float64x2_t v475;
  float64x2_t v476;
  float64x2_t v477;
  float64x2_t v478;
  float64x2_t v479;
  float64x2_t v480;
  float64x2_t v481;
  float64x2_t v482;
  float64x2_t v483;
  float64x2_t v484;
  float64x2_t v485;
  float64x2_t v486;
  float64x2_t v487;
  float64x2_t v488;
  float64x2_t v489;
  float64x2_t v490;
  float64x2_t v492;
  float64x2_t v493;
  float64x2_t v494;
  float64x2_t v495;
  float64x2_t v496;
  float64x2_t v497;
  float64x2_t v501;
  float64x2_t v502;
  float64x2_t v503;
  float64x2_t v504;
  float64x2_t v505;
  float64x2_t v506;
  float64x2_t v507;
  float64x2_t v508;
  int64x2_t *v509;
  float64x2_t v511;
  float64x2_t v512;
  float64x2_t v514;
  float64x2_t v515;
  float64x2_t v516;
  float64x2_t v518;
  float64x2_t v520;
  float64x2_t v522;
  float64x2_t v524;
  float64x2_t v525;
  float64x2_t v526;
  float64x2_t v527;
  float64x2_t v528;
  float64x2_t v529;
  float64x2_t v530;
  int8x16_t v532;
  int8x16_t v533;
  int8x16_t v534;
  int8x16_t v535;
  unint64_t v536;
  uint64_t v537;
  double *v538;
  int v539;
  int v540;
  uint64_t v541;
  uint64_t v542;
  int64x2_t *v543;
  float64x2_t v544;
  float64x2_t v545;
  float64x2_t v546;
  float64x2_t v547;
  float64x2_t v548;
  float64x2_t v549;
  float64x2_t v550;
  float64x2_t v551;
  float64x2_t v552;
  float64x2_t v553;
  float64x2_t v554;
  float64x2_t v555;
  float64x2_t v556;
  float64x2_t v557;
  float64x2_t v558;
  float64x2_t v559;
  float64x2_t v560;
  float64x2_t v561;
  float64x2_t v562;
  float64x2_t v563;
  float64x2_t v564;
  float64x2_t v565;
  float64x2_t v566;
  float64x2_t v567;
  float64x2_t v568;
  float64x2_t v569;
  float64x2_t v570;
  float64x2_t v571;
  float64x2_t v572;
  float64x2_t *v573;
  float64x2_t v574;
  float64x2_t *v575;
  float64x2_t v576;
  float64x2_t v577;
  float64x2_t *v578;
  float64x2_t v579;
  float64x2_t *v580;
  float64x2_t v581;
  float64x2_t v582;
  float64x2_t *v583;
  float64x2_t v584;
  float64x2_t *v585;
  float64x2_t v586;
  float64x2_t *v587;
  float64x2_t v588;
  float64x2_t *v589;
  float64x2_t v590;
  float64x2_t *v591;
  float64x2_t v592;
  float64x2_t *v593;
  float64x2_t v594;
  float64x2_t *v595;
  float64x2_t v596;
  float64x2_t *v597;
  float64x2_t v598;
  float64x2_t v599;
  float64x2_t v600;
  float64x2_t v601;
  float64x2_t v602;
  float64x2_t v603;
  float64x2_t v604;
  float64x2_t v605;
  float64x2_t v606;
  float64x2_t v607;
  float64x2_t v608;
  float64x2_t v609;
  float64x2_t v610;
  float64x2_t v611;
  float64x2_t v612;
  float64x2_t v613;
  float64x2_t v614;
  float64x2_t v615;
  float64x2_t v616;
  float64x2_t v617;
  float64x2_t v618;
  float64x2_t v619;
  float64x2_t *v620;
  float64x2_t *v621;
  float64x2_t *v622;
  float64x2_t *v623;
  float64x2_t *v624;
  float64x2_t *v625;
  float64x2_t *v626;
  float64x2_t v627;
  float64x2_t v628;
  float64x2_t v629;
  float64x2_t v630;
  float64x2_t v631;
  float64x2_t v632;
  float64x2_t v633;
  int64x2_t *v634;
  float64x2_t v635;
  float64x2_t v636;
  float64x2_t v637;
  float64x2_t v638;
  float64x2_t v639;
  float64x2_t v640;
  float64x2_t v641;
  float64x2_t v642;
  float64x2_t v643;
  float64x2_t v644;
  float64x2_t v645;
  float64x2_t v646;
  float64x2_t v647;
  float64x2_t v648;
  float64x2_t v649;
  float64x2_t v650;
  float64x2_t v651;
  float64x2_t v652;
  float64x2_t v653;
  float64x2_t v654;
  float64x2_t v655;
  float64x2_t v656;
  float64x2_t v657;
  float64x2_t v658;
  float64x2_t v659;
  float64x2_t v660;
  float64x2_t v661;
  float64x2_t v662;
  float64x2_t v663;
  float64x2_t v664;
  float64x2_t v665;
  float64x2_t v666;
  float64x2_t v667;
  float64x2_t v668;
  float64x2_t v669;
  float64x2_t v670;
  float64x2_t v671;
  int64x2_t *v672;
  float64x2_t v673;
  float64x2_t v674;
  float64x2_t v675;
  float64x2_t v676;
  float64x2_t v677;
  float64x2_t v678;
  float64x2_t v679;
  float64x2_t v680;
  float64x2_t v681;
  float64x2_t v682;
  float64x2_t v683;
  float64x2_t v684;
  float64x2_t v685;
  float64x2_t v686;
  float64x2_t v687;
  float64x2_t v688;
  float64x2_t v689;
  float64x2_t v690;
  float64x2_t v691;
  float64x2_t v692;
  float64x2_t v693;
  float64x2_t v694;
  float64x2_t v695;
  float64x2_t v696;
  float64x2_t v697;
  float64x2_t v698;
  float64x2_t v699;
  float64x2_t v700;
  float64x2_t v701;
  float64x2_t v702;
  float64x2_t v703;
  float64x2_t v704;
  float64x2_t v705;
  float64x2_t v706;
  float64x2_t v707;
  float64x2_t v708;
  float64x2_t v709;
  float64x2_t v710;
  float64x2_t v711;
  float64x2_t v712;
  float64x2_t v713;
  float64x2_t v714;
  float64x2_t v715;
  float64x2_t v716;
  float64x2_t v717;
  float64x2_t v718;
  float64x2_t v719;
  float64x2_t v720;
  float64x2_t v721;
  float64x2_t v722;
  float64x2_t v723;
  float64x2_t v724;
  float64x2_t v725;
  float64x2_t v726;
  float64x2_t v727;
  float64x2_t v728;
  float64x2_t v729;
  int64x2_t *v730;
  float64x2_t v731;
  float64x2_t v732;
  float64x2_t v733;
  float64x2_t v734;
  float64x2_t v735;
  float64x2_t v736;
  float64x2_t v737;
  float64x2_t v738;
  float64x2_t v739;
  float64x2_t v740;
  float64x2_t v741;
  float64x2_t v742;
  float64x2_t v743;
  float64x2_t v744;
  float64x2_t v745;
  float64x2_t v746;
  float64x2_t v747;
  float64x2_t v748;
  float64x2_t v749;
  float64x2_t v750;
  float64x2_t v751;
  float64x2_t v752;
  float64x2_t v753;
  float64x2_t v754;
  float64x2_t v755;
  float64x2_t v756;
  float64x2_t v757;
  float64x2_t v758;
  float64x2_t v759;
  float64x2_t v760;
  float64x2_t v761;
  float64x2_t v762;
  float64x2_t v763;
  float64x2_t v764;
  float64x2_t v765;
  float64x2_t v766;
  float64x2_t v767;
  float64x2_t v768;
  float64x2_t v769;
  float64x2_t v770;
  int64x2_t *v771;
  float64x2_t v772;
  float64x2_t v773;
  float64x2_t v774;
  float64x2_t v775;
  float64x2_t v776;
  float64x2_t v777;
  float64x2_t v778;
  float64x2_t v779;
  float64x2_t v780;
  float64x2_t v781;
  float64x2_t v782;
  float64x2_t v783;
  float64x2_t v784;
  float64x2_t v785;
  float64x2_t v786;
  float64x2_t v787;
  float64x2_t v788;
  float64x2_t v789;
  float64x2_t v790;
  float64x2_t v791;
  float64x2_t v792;
  int64x2_t *v793;
  float64x2_t v794;
  float64x2_t v795;
  float64x2_t v796;
  double *p_p;
  uint64_t v799;
  uint64_t j;
  unint64_t v801;
  float64x2_t *v802;
  float64x2_t v803;
  uint64_t v804;
  double v805;
  unint64_t i;
  float64x2_t *v807;
  float64x2_t v808;
  int v809;
  unint64_t v810;
  uint64_t v811;
  uint64_t v813;
  uint64_t *v814;
  double *v815;
  char *v816;
  int v817;
  unint64_t v818;
  uint64_t v819;
  std::runtime_error *v820;
  uint64_t v821;
  uint64_t *v822;
  double *v823;
  char *v824;
  unsigned __int8 v825;
  char ***v826;
  const char *v827;
  NSObject *v828;
  std::runtime_error *exception;
  unsigned __int8 v830;
  char ***v831;
  const char *v832;
  NSObject *v833;
  float64x2_t v834;
  float64x2_t v835;
  float64x2_t v836;
  float64x2_t v837;
  float64x2_t v838;
  float64x2_t v839;
  float64x2_t v840;
  float64x2_t v841;
  float64x2_t v842;
  float64x2_t v843;
  float64x2_t v844;
  float64x2_t v845;
  float64x2_t v846;
  float64x2_t v847;
  float64x2_t v848;
  float64x2_t v849;
  float64x2_t v850;
  float64x2_t v851;
  float64x2_t v852;
  float64x2_t v853;
  float64x2_t v854;
  float64x2_t v855;
  float64x2_t v856;
  float64x2_t v857;
  float64x2_t v858;
  float64x2_t v859;
  float64x2_t v860;
  float64x2_t v861;
  float64x2_t v862;
  float64x2_t v863;
  float64x2_t v864;
  float64x2_t v865;
  float64x2_t v866;
  float64x2_t v867;
  float64x2_t v868;
  float64x2_t v869;
  float64x2_t v870;
  float64x2_t v871;
  float64x2_t v872;
  float64x2_t v873;
  float64x2_t v874;
  float64x2_t v875;
  float64x2_t v876;
  float64x2_t v877;
  float64x2_t v878;
  float64x2_t v879;
  float64x2_t v880;
  float64x2_t v881;
  float64x2_t v882;
  float64x2_t v883;
  float64x2_t v884;
  float64x2_t v885;
  float64x2_t v886;
  float64x2_t v887;
  float64x2_t v888;
  float64x2_t v889;
  float64x2_t v890;
  float64x2_t v891;
  float64x2_t v892;
  float64x2_t v893;
  unint64_t v894;
  float64x2_t v895;
  unint64_t v896;
  unint64_t v897;
  float64x2_t v898;
  float64x2_t v899;
  unint64_t v900;
  float64x2_t v901;
  unint64_t v902;
  float64x2_t v903;
  unint64_t v904;
  float64x2_t v905;
  unint64_t v906;
  float64x2_t v907;
  float64x2_t v908;
  float64x2_t v909;
  uint64_t v910;
  float64x2_t v911;
  uint64_t v912;
  float64x2_t v913;
  uint64_t v914;
  float64x2_t v915;
  float64x2_t v916;
  float64x2_t v917;
  uint64_t v918;
  float64x2_t v919;
  float64x2_t v920;
  float64x2_t v921;
  float64x2_t v922;
  float64x2_t v923;
  uint64_t v924;
  float64x2_t v925;
  uint64_t v926;
  float64x2_t v927;
  float64x2_t v928;
  float64x2_t v929;
  float64x2_t v930;
  float64x2_t v931;
  float64x2_t v932;
  float64x2_t v933;
  float64x2_t v934;
  float64x2_t v935;
  float64x2_t v936;
  float64x2_t v937;
  float64x2_t v938;
  float64x2_t v939;
  float64x2_t v940;
  float64x2_t v941;
  unint64_t v942;
  float64x2_t v943;
  unint64_t v944;
  float64x2_t v945;
  unint64_t v946;
  float64x2_t v947;
  uint64_t v948;
  float64x2_t v949;
  int8x16_t v950;
  float64x2_t v951;
  int8x16_t v952;
  float64x2_t v953;
  int8x16_t v954;
  float64x2_t v955;
  float64x2_t v956;
  float64x2_t v957;
  float64x2_t v958;
  float64x2_t v959;
  float64x2_t v960;
  float64x2_t v961;
  float64x2_t v962;
  float64x2_t v963;
  float64x2_t v964;
  float64x2_t v965;
  float64x2_t v966;
  float64x2_t v967;
  float64x2_t v968;
  float64x2_t v969;
  float64x2_t v970;
  float64x2_t v971;
  float64x2_t v972;
  float64x2_t v973;
  float64x2_t v974;
  float64x2_t v975;
  float64x2_t v976;
  float64x2_t v977;
  float64x2_t v978;
  float64x2_t v979;
  float64x2_t v980;
  float64x2_t v981;
  float64x2_t v982;
  float64x2_t v983;
  float64x2_t v984;
  float64x2_t v985;
  float64x2_t v986;
  float64x2_t v987;
  float64x2_t v988;
  float64x2_t v989;
  float64x2_t v990;
  float64x2_t v991;
  float64x2_t v992;
  float64x2_t v993;
  float64x2_t v994;
  float64x2_t v995;
  float64x2_t v996;
  float64x2_t v997;
  float64x2_t v998;
  float64x2_t v999;
  float64x2_t v1000;
  float64x2_t v1001;
  float64x2_t v1002;
  float64x2_t v1003;
  float64x2_t v1004;
  float64x2_t v1005;
  float64x2_t v1006;
  float64x2_t v1007;
  float64x2_t v1008;
  float64x2_t v1009;
  float64x2_t v1010;
  float64x2_t v1011;
  float64x2_t v1012;
  float64x2_t v1013;
  float64x2_t v1014;
  float64x2_t v1015;
  float64x2_t v1016;
  float64x2_t v1017;
  float64x2_t v1018;
  float64x2_t v1019;
  float64x2_t v1020;
  float64x2_t v1021;
  float64x2_t v1022;
  __int128 v1023;
  float64x2_t v1024;
  float64x2_t v1025;
  float64x2_t v1026;
  __int128 v1027;
  float64x2_t v1028;
  float64x2_t v1029;
  float64x2_t v1030;
  float64x2_t v1031;
  __int128 v1032;
  float64x2_t v1033;
  float64x2_t v1034;
  float64x2_t v1035;
  float64x2_t v1036;
  __int128 v1037;
  float64x2_t v1038;
  float64x2_t v1039;
  float64x2_t v1040;
  float64x2_t v1041;
  __int128 v1042;
  float64x2_t v1043;
  float64x2_t v1044;
  float64x2_t v1045;
  float64x2_t v1046;
  __int128 v1047;
  float64x2_t v1048;
  float64x2_t v1049;
  float64x2_t v1050;
  float64x2_t v1051;
  __int128 v1052;
  float64x2_t v1053;
  float64x2_t v1054;
  float64x2_t v1055;
  unint64_t v1056;
  __int128 v1057;
  float64x2_t v1058;
  float64x2_t v1059;
  float64x2_t v1060;
  unint64_t v1061;
  __int128 v1062;
  float64x2_t v1063;
  float64x2_t v1064;
  float64x2_t v1065;
  uint64_t v1066;
  __int128 v1067;
  float64x2_t v1068;
  float64x2_t v1069;
  float64x2_t v1070;
  uint64_t v1071;
  __int128 v1072;
  float64x2_t v1073;
  float64x2_t v1074;
  float64x2_t v1075;
  uint64_t v1076;
  __int128 v1077;
  float64x2_t v1078;
  float64x2_t v1079;
  float64x2_t v1080;
  float64x2_t v1081;
  __int128 v1082;
  float64x2_t v1083;
  float64x2_t v1084;
  float64x2_t v1085;
  float64x2_t v1086;
  __int128 v1087;
  float64x2_t v1088;
  float64x2_t v1089;
  float64x2_t v1090;
  float64x2_t v1091;
  __int128 v1092;
  float64x2_t v1093;
  float64x2_t v1094;
  float64x2_t v1095;
  float64x2_t v1096;
  __int128 v1097;
  float64x2_t v1098;
  float64x2_t v1099;
  float64x2_t v1100;
  float64x2_t v1101;
  __int128 v1102;
  float64x2_t v1103;
  float64x2_t v1104;
  float64x2_t v1105;
  float64x2_t v1106;
  __int128 v1107;
  float64x2_t v1108;
  float64x2_t v1109;
  float64x2_t v1110;
  float64x2_t v1111;
  __int128 v1112;
  float64x2_t v1113;
  float64x2_t v1114;
  float64x2_t v1115;
  float64x2_t v1116;
  __int128 v1117;
  float64x2_t v1118;
  float64x2_t v1119;
  float64x2_t v1120;
  float64x2_t v1121;
  __int128 v1122;
  float64x2_t v1123;
  float64x2_t v1124;
  float64x2_t v1125;
  float64x2_t v1126;
  __int128 v1127;
  float64x2_t v1128;
  float64x2_t v1129;
  float64x2_t v1130;
  unint64_t v1131;
  __int128 v1132;
  float64x2_t v1133;
  float64x2_t v1134;
  float64x2_t v1135;
  float64x2_t v1136;
  __int128 v1137;
  float64x2_t v1138;
  float64x2_t v1139;
  float64x2_t v1140;
  float64x2_t v1141;
  __int128 v1142;
  float64x2_t v1143;
  float64x2_t v1144;
  float64x2_t v1145;
  float64x2_t v1146;
  __int128 v1147;
  float64x2_t v1148;
  float64x2_t v1149;
  float64x2_t v1150;
  float64x2_t v1151;
  __int128 v1152;
  float64x2_t v1153;
  float64x2_t v1154;
  float64x2_t v1155;
  float64x2_t v1156;
  __int128 v1157;
  float64x2_t v1158;
  float64x2_t v1159;
  float64x2_t v1160;
  float64x2_t v1161;
  __int128 v1162;
  float64x2_t v1163;
  float64x2_t v1164;
  float64x2_t v1165;
  float64x2_t v1166;
  __int128 v1167;
  float64x2_t v1168;
  float64x2_t v1169;
  float64x2_t v1170;
  float64x2_t v1171;
  __int128 v1172;
  float64x2_t v1173;
  float64x2_t v1174;
  float64x2_t v1175;
  float64x2_t v1176;
  __int128 v1177;
  float64x2_t v1178;
  float64x2_t v1179;
  float64x2_t v1180;
  float64x2_t v1181;
  __int128 v1182;
  float64x2_t v1183;
  float64x2_t v1184;
  float64x2_t v1185;
  float64x2_t v1186;
  __int128 v1187;
  float64x2_t v1188;
  float64x2_t v1189;
  float64x2_t v1190;
  float64x2_t v1191;
  __int128 v1192;
  float64x2_t v1193;
  float64x2_t v1194;
  float64x2_t v1195;
  float64x2_t v1196;
  __int128 v1197;
  float64x2_t v1198;
  float64x2_t v1199;
  float64x2_t v1200;
  float64x2_t v1201;
  __int128 v1202;
  float64x2_t v1203;
  float64x2_t v1204;
  float64x2_t v1205;
  float64x2_t v1206;
  __int128 v1207;
  float64x2_t v1208;
  float64x2_t v1209;
  float64x2_t v1210;
  float64x2_t v1211;
  __int128 v1212;
  float64x2_t v1213;
  float64x2_t v1214;
  float64x2_t v1215;
  float64x2_t v1216;
  __int128 v1217;
  float64x2_t v1218;
  float64x2_t v1219;
  float64x2_t v1220;
  float64x2_t v1221;
  __int128 v1222;
  float64x2_t v1223;
  float64x2_t v1224;
  float64x2_t v1225;
  float64x2_t v1226;
  __int128 v1227;
  float64x2_t v1228;
  float64x2_t v1229;
  float64x2_t v1230;
  float64x2_t v1231;
  __int128 v1232;
  float64x2_t v1233;
  float64x2_t v1234;
  float64x2_t v1235;
  float64x2_t v1236;
  __int128 v1237;
  float64x2_t v1238;
  float64x2_t v1239;
  float64x2_t v1240;
  float64x2_t v1241;
  __int128 v1242;
  float64x2_t v1243;
  float64x2_t v1244;
  float64x2_t v1245;
  float64x2_t v1246;
  __int128 v1247;
  float64x2_t v1248;
  float64x2_t v1249;
  float64x2_t v1250;
  float64x2_t v1251;
  __int128 v1252;
  float64x2_t v1253;
  float64x2_t v1254;
  float64x2_t v1255;
  float64x2_t v1256;
  __int128 v1257;
  float64x2_t v1258;
  float64x2_t v1259;
  float64x2_t v1260;
  float64x2_t v1261;
  __int128 v1262;
  float64x2_t v1263;
  float64x2_t v1264;
  float64x2_t v1265;
  float64x2_t v1266;
  __int128 v1267;
  float64x2_t v1268;
  float64x2_t v1269;
  float64x2_t v1270;
  float64x2_t v1271;
  __int128 v1272;
  float64x2_t v1273;
  float64x2_t v1274;
  float64x2_t v1275;
  float64x2_t v1276;
  __int128 v1277;
  float64x2_t v1278;
  float64x2_t v1279;
  float64x2_t v1280;
  float64x2_t v1281;
  __int128 v1282;
  float64x2_t v1283;
  float64x2_t v1284;
  float64x2_t v1285;
  float64x2_t v1286;
  __int128 v1287;
  float64x2_t v1288;
  float64x2_t v1289;
  float64x2_t v1290;
  float64x2_t v1291;
  __int128 v1292;
  float64x2_t v1293;
  float64x2_t v1294;
  float64x2_t v1295;
  float64x2_t v1296;
  __int128 v1297;
  float64x2_t v1298;
  float64x2_t v1299;
  float64x2_t v1300;
  float64x2_t v1301;
  __int128 v1302;
  float64x2_t v1303;
  float64x2_t v1304;
  float64x2_t v1305;
  float64x2_t v1306;
  __int128 v1307;
  float64x2_t v1308;
  float64x2_t v1309;
  float64x2_t v1310;
  float64x2_t v1311;
  __int128 v1312;
  float64x2_t v1313;
  float64x2_t v1314;
  float64x2_t v1315;
  float64x2_t v1316;
  __int128 v1317;
  float64x2_t v1318;
  float64x2_t v1319;
  float64x2_t v1320;
  float64x2_t v1321;
  __int128 v1322;
  float64x2_t v1323;
  float64x2_t v1324;
  float64x2_t v1325;
  float64x2_t v1326;
  __int128 v1327;
  float64x2_t v1328;
  float64x2_t v1329;
  float64x2_t v1330;
  float64x2_t v1331;
  __int128 v1332;
  float64x2_t v1333;
  float64x2_t v1334;
  float64x2_t v1335;
  float64x2_t v1336;
  __int128 v1337;
  float64x2_t v1338;
  float64x2_t v1339;
  float64x2_t v1340;
  float64x2_t v1341;
  __int128 v1342;
  float64x2_t v1343;
  float64x2_t v1344;
  float64x2_t v1345;
  float64x2_t v1346;
  __int128 v1347;
  float64x2_t v1348;
  float64x2_t v1349;
  float64x2_t v1350;
  float64x2_t v1351;
  __int128 v1352;
  float64x2_t v1353;
  float64x2_t v1354;
  float64x2_t v1355;
  float64x2_t v1356;
  __int128 v1357;
  float64x2_t v1358;
  float64x2_t v1359;
  float64x2_t v1360;
  float64x2_t v1361;
  __int128 v1362;
  float64x2_t v1363;
  float64x2_t v1364;
  float64x2_t v1365;
  float64x2_t v1366;
  __int128 v1367;
  float64x2_t v1368;
  float64x2_t v1369;
  float64x2_t v1370;
  float64x2_t v1371;
  __int128 v1372;
  float64x2_t v1373;
  float64x2_t v1374;
  float64x2_t v1375;
  float64x2_t v1376;
  __int128 v1377;
  float64x2_t v1378;
  float64x2_t v1379;
  float64x2_t v1380;
  float64x2_t v1381;
  __int128 v1382;
  float64x2_t v1383;
  float64x2_t v1384;
  float64x2_t v1385;
  float64x2_t v1386;
  __int128 v1387;
  float64x2_t v1388;
  float64x2_t v1389;
  float64x2_t v1390;
  float64x2_t v1391;
  __int128 v1392;
  float64x2_t v1393;
  float64x2_t v1394;
  float64x2_t v1395;
  float64x2_t v1396;
  __int128 v1397;
  float64x2_t v1398;
  float64x2_t v1399;
  float64x2_t v1400;
  float64x2_t v1401;
  __int128 v1402;
  float64x2_t v1403;
  float64x2_t v1404;
  float64x2_t v1405;
  float64x2_t v1406;
  __int128 v1407;
  float64x2_t v1408;
  float64x2_t v1409;
  float64x2_t v1410;
  float64x2_t v1411;
  __int128 v1412;
  float64x2_t v1413;
  float64x2_t v1414;
  float64x2_t v1415;
  float64x2_t v1416;
  __int128 v1417;
  float64x2_t v1418;
  float64x2_t v1419;
  float64x2_t v1420;
  float64x2_t v1421;
  float64x2_t v1422;
  float64x2_t v1423;
  float64x2_t v1424;
  char *category;
  double *v1426;
  int v1427;
  char **p_category;
  int v1429;
  float64x2_t v1430;
  __int128 v1431;
  __int128 v1432;
  __int128 v1433;
  __int128 v1434;
  __int128 v1435;
  __int128 v1436;
  __int128 v1437;
  __int128 v1438;
  __int128 v1439;
  __int128 v1440;
  __int128 v1441;
  __int128 v1442;
  __int128 v1443;
  __int128 v1444;
  __int128 v1445;
  __int128 v1446;
  __int128 v1447;
  __int128 v1448;
  __int128 v1449;
  __int128 v1450;
  __int128 v1451;
  __int128 v1452;
  __int128 v1453;
  __int128 v1454;
  __int128 v1455;
  __int128 v1456;
  __int128 v1457;
  __int128 v1458;
  __int128 v1459;
  __int128 v1460;
  __int128 v1461;
  __int128 v1462;
  __int128 v1463;
  __int128 v1464;
  __int128 v1465;
  __int128 v1466;
  __int128 v1467;
  __int128 v1468;
  __int128 v1469;
  __int128 v1470;
  __int128 v1471;
  __int128 v1472;
  __int128 v1473;
  __int128 v1474;
  __int128 v1475;
  __int128 v1476;
  __int128 v1477;
  __int128 v1478;
  __int128 v1479;
  __int128 v1480;
  __int128 v1481;
  __int128 v1482;
  __int128 v1483;
  __int128 v1484;
  __int128 v1485;
  __int128 v1486;
  __int128 v1487;
  __int128 v1488;
  __int128 v1489;
  __int128 v1490;
  __int128 v1491;
  __int128 v1492;
  __int128 v1493;
  __int128 v1494;
  __int128 v1495;
  __int128 v1496;
  __int128 v1497;
  __int128 v1498;
  __int128 v1499;
  __int128 v1500;
  __int128 v1501;
  __int128 v1502;
  __int128 v1503;
  __int128 v1504;
  __int128 v1505;
  __int128 v1506;
  __int128 v1507;
  __int128 v1508;
  __int128 v1509;
  __int128 v1510;
  __int128 v1511;
  float64x2_t v1512;
  __int128 v1513;
  __int128 v1514;
  __int128 v1515;
  __int128 v1516;
  __int128 v1517;
  __int128 v1518;
  __int128 v1519;
  __int128 v1520;
  __int128 v1521;
  __int128 v1522;
  __int128 v1523;
  __int128 v1524;
  __int128 v1525;
  __int128 v1526;
  __int128 v1527;
  __int128 v1528;
  __int128 v1529;
  __int128 v1530;
  __int128 v1531;
  __int128 v1532;
  __int128 v1533;
  __int128 v1534;
  __int128 v1535;
  __int128 v1536;
  __int128 v1537;
  __int128 v1538;
  __int128 v1539;
  __int128 v1540;
  __int128 v1541;
  uint64_t v1542;
  const char *v1543;
  char ***p_p_category;
  char **v1545;
  uint64_t v1546;
  std::string __p;
  float64x2_t v1548;
  float64x2_t v1549[110];
  float64_t v1550;
  uint64_t v1551;
  uint64_t v1552;
  uint64_t v1553;

  MEMORY[0x24BDAC7A8](a1);
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v1553 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)v5;
  v8 = *(_DWORD *)(v5 + 20);
  LOBYTE(category) = 117;
  LODWORD(v1430.f64[0]) = v8;
  LODWORD(v1543) = -1;
  __p.__r_.__value_.__r.__words[0] = 0x100000001;
  sub_20E83455C(&__p, (uint64_t)&category, (int *)&v1430, v7, (int *)&v1430, (int *)&v1543);
  v9 = (int)v1543;
  v1429 = (int)v1543;
  if ((_DWORD)v1543)
  {
    sub_20F9B2A4C(&p_category);
    if (*(int *)p_category[7] <= 4)
    {
      v809 = *((unsigned __int8 *)p_category + 72);
      v810 = sub_20E8C31DC((uint64_t)p_category, "OSLogSurrogateAppender", 1, 0);
      v811 = v810 ? v810 + 16 : 0;
      if (v809 || v810 != 0)
      {
        *(_QWORD *)&v1430.f64[0] = &p_category;
        *(std::chrono::steady_clock::time_point *)&v1430.f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
        *(std::chrono::system_clock::time_point *)&v1431 = std::chrono::system_clock::now();
        DWORD2(v1431) = 4;
        *(_QWORD *)&v1432 = "unknown file";
        DWORD2(v1432) = 3373;
        *(_QWORD *)&v1434 = 0;
        *(_QWORD *)&v1433 = "unknown function";
        *((_QWORD *)&v1433 + 1) = 0;
        v813 = **(_QWORD **)&v1430.f64[0];
        v814 = (uint64_t *)(**(_QWORD **)&v1430.f64[0] + 16);
        if (*(char *)(**(_QWORD **)&v1430.f64[0] + 39) < 0)
        {
          v816 = *(char **)(v813 + 16);
          v815 = *(double **)(v813 + 24);
        }
        else
        {
          v815 = (double *)*(unsigned __int8 *)(**(_QWORD **)&v1430.f64[0] + 39);
          v816 = (char *)(**(_QWORD **)&v1430.f64[0] + 16);
        }
        category = v816;
        v1426 = v815;
        v825 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v825 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)&__p);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&__p);
          if (LOBYTE(v1548.f64[0]) && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        v826 = (char ***)byte_254A4A4F8[23];
        if (byte_254A4A4F8[23] >= 0)
        {
          v827 = byte_254A4A4F8;
        }
        else
        {
          v826 = *(char ****)&byte_254A4A4F8[8];
          v827 = *(const char **)byte_254A4A4F8;
        }
        v1543 = v827;
        p_p_category = v826;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v827, category);
        sub_20E86E5A8(&__p.__r_.__value_.__l.__size_, (uint64_t)&v1543);
        sub_20E86E5A8(v1549, (uint64_t)&category);
        v828 = __p.__r_.__value_.__r.__words[0];
        sub_20E86E44C((uint64_t)&__p);
        sub_20FBAAD28(v811, v814, v828, OS_LOG_TYPE_ERROR, &v1429);
        v9 = v1429;
        if (v809)
        {
          sub_20E8C003C((uint64_t)&v1430, "Failed to factorize the marginalized component of the information matrix (result = %d).", v1429);
          sub_20E863570((uint64_t)&v1430);
        }
        sub_20E863714((uint64_t)&v1430);
      }
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string((std::string *)&v1430, v9);
    sub_20E8B0848("marginalize SW f ", (std::string *)&v1430, &__p);
    std::runtime_error::runtime_error(exception, &__p);
    exception->__vftable = (std::runtime_error_vtbl *)&off_24CA04F20;
    __cxa_throw(exception, (struct type_info *)&unk_24CA04F38, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v10 = *(__CLPK_doublereal **)v6;
  v11 = *(_DWORD *)(v6 + 20);
  LOBYTE(category) = 117;
  LOBYTE(p_category) = 110;
  LODWORD(v1430.f64[0]) = v11;
  LODWORD(v1543) = -1;
  __p.__r_.__value_.__r.__words[0] = 0x100000001;
  sub_20E8346D4(&__p, (char *)&category, (char *)&p_category, (__CLPK_integer *)&v1430, v10, (int *)&v1430, (__CLPK_integer *)&v1543);
  v12 = (int)v1543;
  v1429 = (int)v1543;
  if ((_DWORD)v1543)
  {
    sub_20F9B2A4C(&p_category);
    if (*(int *)p_category[7] <= 4)
    {
      v817 = *((unsigned __int8 *)p_category + 72);
      v818 = sub_20E8C31DC((uint64_t)p_category, "OSLogSurrogateAppender", 1, 0);
      v819 = v818 ? v818 + 16 : 0;
      if (v817 || v818)
      {
        *(_QWORD *)&v1430.f64[0] = &p_category;
        *(std::chrono::steady_clock::time_point *)&v1430.f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
        *(std::chrono::system_clock::time_point *)&v1431 = std::chrono::system_clock::now();
        DWORD2(v1431) = 4;
        *(_QWORD *)&v1432 = "unknown file";
        DWORD2(v1432) = 3382;
        *(_QWORD *)&v1434 = 0;
        *(_QWORD *)&v1433 = "unknown function";
        *((_QWORD *)&v1433 + 1) = 0;
        v821 = **(_QWORD **)&v1430.f64[0];
        v822 = (uint64_t *)(**(_QWORD **)&v1430.f64[0] + 16);
        if (*(char *)(**(_QWORD **)&v1430.f64[0] + 39) < 0)
        {
          v824 = *(char **)(v821 + 16);
          v823 = *(double **)(v821 + 24);
        }
        else
        {
          v823 = (double *)*(unsigned __int8 *)(**(_QWORD **)&v1430.f64[0] + 39);
          v824 = (char *)(**(_QWORD **)&v1430.f64[0] + 16);
        }
        category = v824;
        v1426 = v823;
        v830 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v830 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)&__p);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&__p);
          if (LOBYTE(v1548.f64[0]) && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        v831 = (char ***)byte_254A4A4F8[23];
        if (byte_254A4A4F8[23] >= 0)
        {
          v832 = byte_254A4A4F8;
        }
        else
        {
          v831 = *(char ****)&byte_254A4A4F8[8];
          v832 = *(const char **)byte_254A4A4F8;
        }
        v1543 = v832;
        p_p_category = v831;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v832, category);
        sub_20E86E5A8(&__p.__r_.__value_.__l.__size_, (uint64_t)&v1543);
        sub_20E86E5A8(v1549, (uint64_t)&category);
        v833 = __p.__r_.__value_.__r.__words[0];
        sub_20E86E44C((uint64_t)&__p);
        sub_20FBAB168(v819, v822, v833, OS_LOG_TYPE_ERROR, &v1429);
        v12 = v1429;
        if (v817)
        {
          sub_20E8C003C((uint64_t)&v1430, "Failed to invert the marginalized component of the information matrix (result = %d).", v1429);
          sub_20E863570((uint64_t)&v1430);
        }
        sub_20E863714((uint64_t)&v1430);
      }
    }
    v820 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string((std::string *)&v1430, v12);
    sub_20E8B0848("marginalize SW i ", (std::string *)&v1430, &__p);
    std::runtime_error::runtime_error(v820, &__p);
    v820->__vftable = (std::runtime_error_vtbl *)&off_24CA04F20;
    __cxa_throw(v820, (struct type_info *)&unk_24CA04F38, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = *(double **)v6;
  __B = *(double **)v4;
  __lda = *(unsigned int *)(v4 + 16);
  v16 = *(unsigned int *)(v4 + 20);
  __p.__r_.__value_.__r.__words[0] = 0x100000001;
  sub_20E85E36C(&__p, CblasColMajor, 141, CblasUpper, CblasTrans, CblasNonUnit, __lda, v16, 1.0, v13, __lda, __B, __lda);
  v22 = *(_DWORD *)(v2 + 16);
  switch(v22)
  {
    case 22:
      v536 = *(_QWORD *)v2;
      v537 = *(unsigned int *)(v4 + 16);
      v538 = *(double **)v4;
      LOBYTE(v539) = *(_DWORD *)(v4 + 16);
      if (v537 >= 2)
      {
        v540 = 0;
        v1300 = *(float64x2_t *)(v536 + 16);
        v1295 = *(float64x2_t *)v536;
        v1290 = *(float64x2_t *)(v536 + 192);
        v1285 = *(float64x2_t *)(v536 + 176);
        v541 = 8 * v537;
        v1280 = *(float64x2_t *)(v536 + 368);
        v1275 = *(float64x2_t *)(v536 + 352);
        v1270 = *(float64x2_t *)(v536 + 544);
        v1265 = *(float64x2_t *)(v536 + 528);
        v1260 = *(float64x2_t *)(v536 + 720);
        v1390 = *(float64x2_t *)(v536 + 704);
        v1385 = *(float64x2_t *)(v536 + 896);
        v1380 = *(float64x2_t *)(v536 + 880);
        v1255 = *(float64x2_t *)(v536 + 1072);
        v1250 = *(float64x2_t *)(v536 + 1056);
        v1245 = *(float64x2_t *)(v536 + 1248);
        v1240 = *(float64x2_t *)(v536 + 1232);
        v1375 = *(float64x2_t *)(v536 + 1424);
        v1235 = *(float64x2_t *)(v536 + 1408);
        v1230 = *(float64x2_t *)(v536 + 1600);
        v1225 = *(float64x2_t *)(v536 + 1584);
        v1220 = *(float64x2_t *)(v536 + 1776);
        v1215 = *(float64x2_t *)(v536 + 1760);
        v1210 = *(float64x2_t *)(v536 + 1952);
        v1205 = *(float64x2_t *)(v536 + 1936);
        v1200 = *(float64x2_t *)(v536 + 2128);
        v1195 = *(float64x2_t *)(v536 + 2112);
        v1190 = *(float64x2_t *)(v536 + 2304);
        v1185 = *(float64x2_t *)(v536 + 2288);
        v1180 = *(float64x2_t *)(v536 + 2480);
        v1175 = *(float64x2_t *)(v536 + 2464);
        v1170 = *(float64x2_t *)(v536 + 2656);
        v1165 = *(float64x2_t *)(v536 + 2640);
        v542 = 3 * v537;
        v543 = *(int64x2_t **)v4;
        v1160 = *(float64x2_t *)(v536 + 2832);
        v1370 = *(float64x2_t *)(v536 + 2816);
        v1365 = *(float64x2_t *)(v536 + 3008);
        v1360 = *(float64x2_t *)(v536 + 2992);
        v1355 = *(float64x2_t *)(v536 + 3184);
        v1350 = *(float64x2_t *)(v536 + 3168);
        v1345 = *(float64x2_t *)(v536 + 3360);
        v1340 = *(float64x2_t *)(v536 + 3344);
        v1335 = *(float64x2_t *)(v536 + 3536);
        v1155 = *(float64x2_t *)(v536 + 3520);
        v1330 = *(float64x2_t *)(v536 + 3712);
        v1150 = *(float64x2_t *)(v536 + 3696);
        v1145 = *(float64x2_t *)(v536 + 752);
        v1140 = *(float64x2_t *)(v536 + 736);
        v1135 = *(float64x2_t *)(v536 + 928);
        v1325 = *(float64x2_t *)(v536 + 912);
        v1130 = *(float64x2_t *)(v536 + 1104);
        v1125 = *(float64x2_t *)(v536 + 1088);
        v1120 = *(float64x2_t *)(v536 + 1280);
        v1115 = *(float64x2_t *)(v536 + 1264);
        v1110 = *(float64x2_t *)(v536 + 1456);
        v1320 = *(float64x2_t *)(v536 + 1440);
        v1105 = *(float64x2_t *)(v536 + 1632);
        v1100 = *(float64x2_t *)(v536 + 1616);
        v1095 = *(float64x2_t *)(v536 + 1808);
        v1090 = *(float64x2_t *)(v536 + 1792);
        v1085 = *(float64x2_t *)(v536 + 1984);
        v1080 = *(float64x2_t *)(v536 + 1968);
        v1075 = *(float64x2_t *)(v536 + 2160);
        v1315 = *(float64x2_t *)(v536 + 2144);
        v1070 = *(float64x2_t *)(v536 + 2336);
        v1065 = *(float64x2_t *)(v536 + 2320);
        v1060 = *(float64x2_t *)(v536 + 2512);
        v1055 = *(float64x2_t *)(v536 + 2496);
        v1050 = *(float64x2_t *)(v536 + 2688);
        v1045 = *(float64x2_t *)(v536 + 2672);
        v1040 = *(float64x2_t *)(v536 + 2864);
        v1035 = *(float64x2_t *)(v536 + 2848);
        v1030 = *(float64x2_t *)(v536 + 3040);
        v1026 = *(float64x2_t *)(v536 + 3024);
        v1022 = *(float64x2_t *)(v536 + 3216);
        v1019 = *(float64x2_t *)(v536 + 3200);
        v1017 = *(float64x2_t *)(v536 + 3392);
        v1015 = *(float64x2_t *)(v536 + 3376);
        v1013 = *(float64x2_t *)(v536 + 3568);
        v1310 = *(float64x2_t *)(v536 + 3552);
        v1011 = *(float64x2_t *)(v536 + 3744);
        v1305 = *(float64x2_t *)(v536 + 3728);
        v544 = *(float64x2_t *)(v536 + 1488);
        v1009 = *(float64x2_t *)(v536 + 1472);
        v1007 = *(float64x2_t *)(v536 + 1664);
        v1005 = *(float64x2_t *)(v536 + 1648);
        v1003 = *(float64x2_t *)(v536 + 1840);
        v1001 = *(float64x2_t *)(v536 + 1824);
        v999 = *(float64x2_t *)(v536 + 2016);
        v997 = *(float64x2_t *)(v536 + 2000);
        v995 = *(float64x2_t *)(v536 + 2192);
        v993 = *(float64x2_t *)(v536 + 2176);
        v991 = *(float64x2_t *)(v536 + 2368);
        v989 = *(float64x2_t *)(v536 + 2352);
        v545 = *(float64x2_t *)(v536 + 2544);
        v987 = *(float64x2_t *)(v536 + 2528);
        v546 = *(float64x2_t *)(v536 + 2720);
        v985 = *(float64x2_t *)(v536 + 2704);
        v547 = *(float64x2_t *)(v536 + 2896);
        v983 = *(float64x2_t *)(v536 + 2880);
        v548 = *(float64x2_t *)(v536 + 3072);
        v549 = *(float64x2_t *)(v536 + 3056);
        v550 = *(float64x2_t *)(v536 + 3248);
        v981 = *(float64x2_t *)(v536 + 3232);
        v551 = *(float64x2_t *)(v536 + 3424);
        v979 = *(float64x2_t *)(v536 + 3408);
        v552 = *(float64x2_t *)(v536 + 3600);
        v977 = *(float64x2_t *)(v536 + 3584);
        v975 = *(float64x2_t *)(v536 + 3776);
        v973 = *(float64x2_t *)(v536 + 3760);
        v971 = *(float64x2_t *)(v536 + 2224);
        v969 = *(float64x2_t *)(v536 + 2208);
        v553 = *(float64x2_t *)(v536 + 2400);
        v967 = *(float64x2_t *)(v536 + 2384);
        v554 = *(float64x2_t *)(v536 + 2576);
        v965 = *(float64x2_t *)(v536 + 2560);
        v555 = *(float64x2_t *)(v536 + 2752);
        v963 = *(float64x2_t *)(v536 + 2736);
        v556 = *(float64x2_t *)(v536 + 2928);
        v961 = *(float64x2_t *)(v536 + 2912);
        v557 = *(float64x2_t *)(v536 + 3104);
        v959 = *(float64x2_t *)(v536 + 3088);
        v558 = *(float64x2_t *)(v536 + 3280);
        v957 = *(float64x2_t *)(v536 + 3264);
        v559 = *(float64x2_t *)(v536 + 3456);
        v955 = *(float64x2_t *)(v536 + 3440);
        v560 = *(float64x2_t *)(v536 + 3632);
        v953 = *(float64x2_t *)(v536 + 3616);
        v951 = *(float64x2_t *)(v536 + 3808);
        v949 = *(float64x2_t *)(v536 + 3792);
        v561 = *(float64x2_t *)(v536 + 2960);
        v562 = *(float64x2_t *)(v536 + 2944);
        v563 = *(float64x2_t *)(v536 + 3136);
        v564 = *(float64x2_t *)(v536 + 3120);
        v565 = *(float64x2_t *)(v536 + 3312);
        v947 = *(float64x2_t *)(v536 + 3296);
        v566 = *(float64x2_t *)(v536 + 3488);
        v567 = *(float64x2_t *)(v536 + 3472);
        v568 = *(float64x2_t *)(v536 + 3664);
        v945 = *(float64x2_t *)(v536 + 3648);
        v569 = *(float64x2_t *)(v536 + 3840);
        v943 = *(float64x2_t *)(v536 + 3824);
        v570 = *(float64x2_t *)(v536 + 3680);
        v571 = *(float64x2_t *)(v536 + 3856);
        do
        {
          v1395 = v571;
          v901 = v570;
          v903 = v568;
          v1400 = v569;
          v1405 = v567;
          v905 = v566;
          v907 = v565;
          v909 = v564;
          v911 = v563;
          v1410 = v562;
          v913 = v561;
          v915 = v559;
          v1415 = v560;
          v917 = v558;
          v919 = v557;
          v921 = v556;
          v923 = v555;
          v925 = v554;
          v927 = v553;
          v929 = v552;
          v931 = v551;
          v933 = v550;
          v935 = v547;
          v1420 = v549;
          v1424 = v548;
          v937 = v546;
          v939 = v545;
          v941 = v544;
          v572 = *(float64x2_t *)((char *)v543 + 8 * v537);
          v573 = (float64x2_t *)&v543->i8[v541 + v541];
          v574 = *v573;
          v575 = (float64x2_t *)((char *)v573 + v541);
          *(_QWORD *)&v576.f64[0] = vdupq_laneq_s64((int64x2_t)v574, 1).u64[0];
          v577 = *v575;
          v578 = (float64x2_t *)((char *)v575 + v541);
          v579 = *v578;
          v580 = (float64x2_t *)((char *)v578 + v541);
          v581 = *v580;
          v582 = (float64x2_t)vzip1q_s64((int64x2_t)v574, (int64x2_t)v577);
          v583 = (float64x2_t *)((char *)v580 + v541);
          v584 = *v583;
          v585 = (float64x2_t *)((char *)v583 + v541);
          v586 = *v585;
          v587 = (float64x2_t *)((char *)v585 + v541);
          v588 = *v587;
          v589 = (float64x2_t *)((char *)v587 + v541);
          v590 = *v589;
          v591 = (float64x2_t *)((char *)v589 + v541);
          v592 = *v591;
          v576.f64[1] = v577.f64[1];
          v593 = (float64x2_t *)((char *)v591 + v541);
          v594 = *v593;
          v595 = (float64x2_t *)((char *)v593 + v541);
          v596 = *v595;
          v597 = (float64x2_t *)((char *)v595 + v541);
          v598 = (float64x2_t)vzip1q_s64(*v543, (int64x2_t)v572);
          v599 = (float64x2_t)vzip2q_s64(*v543, (int64x2_t)v572);
          v600 = vmlaq_laneq_f64(vmulq_n_f64(v582, *(double *)v543->i64), v576, *(float64x2_t *)v543, 1);
          v601 = vmlaq_laneq_f64(vmulq_n_f64(v598, v572.f64[0]), v599, v572, 1);
          v602 = vmlaq_laneq_f64(vmulq_n_f64(v598, v574.f64[0]), v599, v574, 1);
          v603 = vmlaq_laneq_f64(vmulq_n_f64(v582, v572.f64[0]), v576, v572, 1);
          v604 = vmlaq_laneq_f64(vmulq_n_f64(v582, v574.f64[0]), v576, v574, 1);
          v605 = vmlaq_laneq_f64(vmulq_n_f64(v598, v577.f64[0]), v599, v577, 1);
          v606 = vmlaq_laneq_f64(vmulq_n_f64(v582, v577.f64[0]), v576, v577, 1);
          v607 = vmlaq_laneq_f64(vmulq_n_f64(v598, v579.f64[0]), v599, v579, 1);
          v608 = vmlaq_laneq_f64(vmulq_n_f64(v598, v581.f64[0]), v599, v581, 1);
          v609 = vmlaq_laneq_f64(vmulq_n_f64(v582, v579.f64[0]), v576, v579, 1);
          v610 = vmlaq_laneq_f64(vmulq_n_f64(v582, v581.f64[0]), v576, v581, 1);
          v611 = vmlaq_laneq_f64(vmulq_n_f64(v598, v584.f64[0]), v599, v584, 1);
          v612 = vmlaq_laneq_f64(vmulq_n_f64(v582, v584.f64[0]), v576, v584, 1);
          v613 = vmlaq_laneq_f64(vmulq_n_f64(v598, v586.f64[0]), v599, v586, 1);
          v614 = vmlaq_laneq_f64(vmulq_n_f64(v598, v588.f64[0]), v599, v588, 1);
          v615 = vmlaq_laneq_f64(vmulq_n_f64(v582, v586.f64[0]), v576, v586, 1);
          v616 = vmlaq_laneq_f64(vmulq_n_f64(v582, v588.f64[0]), v576, v588, 1);
          v617 = vmlaq_laneq_f64(vmulq_n_f64(v598, v590.f64[0]), v599, v590, 1);
          v618 = vmlaq_laneq_f64(vmulq_n_f64(v582, v590.f64[0]), v576, v590, 1);
          v619 = vmlaq_laneq_f64(vmulq_n_f64(v598, v592.f64[0]), v599, v592, 1);
          v898 = vmlaq_laneq_f64(vmulq_n_f64(v582, v592.f64[0]), v576, v592, 1);
          v893 = vmlaq_laneq_f64(vmulq_n_f64(v582, v594.f64[0]), v576, v594, 1);
          v886 = vmlaq_laneq_f64(vmulq_n_f64(v582, v596.f64[0]), v576, v596, 1);
          v890 = vmlaq_laneq_f64(vmulq_n_f64(v598, v597->f64[0]), v599, *v597, 1);
          v882 = vmlaq_laneq_f64(vmulq_n_f64(v582, v597->f64[0]), v576, *v597, 1);
          v620 = (float64x2_t *)((char *)v597 + v541);
          v878 = vmlaq_laneq_f64(vmulq_n_f64(v598, v620->f64[0]), v599, *v620, 1);
          v874 = vmlaq_laneq_f64(vmulq_n_f64(v582, v620->f64[0]), v576, *v620, 1);
          v621 = (float64x2_t *)((char *)v620 + v541);
          v870 = vmlaq_laneq_f64(vmulq_n_f64(v598, v621->f64[0]), v599, *v621, 1);
          v866 = vmlaq_laneq_f64(vmulq_n_f64(v582, v621->f64[0]), v576, *v621, 1);
          v622 = (float64x2_t *)((char *)v621 + v541);
          v862 = vmlaq_laneq_f64(vmulq_n_f64(v598, v622->f64[0]), v599, *v622, 1);
          v858 = vmlaq_laneq_f64(vmulq_n_f64(v582, v622->f64[0]), v576, *v622, 1);
          v623 = (float64x2_t *)((char *)v622 + v541);
          v854 = vmlaq_laneq_f64(vmulq_n_f64(v598, v623->f64[0]), v599, *v623, 1);
          v851 = vmlaq_laneq_f64(vmulq_n_f64(v582, v623->f64[0]), v576, *v623, 1);
          v624 = (float64x2_t *)((char *)v623 + v541);
          v848 = vmlaq_laneq_f64(vmulq_n_f64(v598, v624->f64[0]), v599, *v624, 1);
          v845 = vmlaq_laneq_f64(vmulq_n_f64(v582, v624->f64[0]), v576, *v624, 1);
          v625 = (float64x2_t *)((char *)v624 + v541);
          v843 = vmlaq_laneq_f64(vmulq_n_f64(v598, v625->f64[0]), v599, *v625, 1);
          v841 = vmlaq_laneq_f64(vmulq_n_f64(v582, v625->f64[0]), v576, *v625, 1);
          v626 = (float64x2_t *)((char *)v625 + v541);
          v839 = vmlaq_laneq_f64(vmulq_n_f64(v598, v626->f64[0]), v599, *v626, 1);
          v837 = vmlaq_laneq_f64(vmulq_n_f64(v582, v626->f64[0]), v576, *v626, 1);
          v627 = *(float64x2_t *)((char *)v626 + 8 * v537);
          v628 = vmlaq_laneq_f64(vmulq_n_f64(v582, v627.f64[0]), v576, v627, 1);
          v629 = vsubq_f64(v1295, vmlaq_laneq_f64(vmulq_n_f64(v598, *(double *)v543->i64), v599, *(float64x2_t *)v543, 1));
          v630 = vsubq_f64(v1285, v601);
          v631 = vsubq_f64(v1275, v602);
          v632 = vsubq_f64(v1265, v605);
          v1390 = vsubq_f64(v1390, v607);
          v1385 = vsubq_f64(v1385, v610);
          v1380 = vsubq_f64(v1380, v608);
          v633 = vsubq_f64(v1240, v613);
          v1375 = vsubq_f64(v1375, v616);
          v1370 = vsubq_f64(v1370, v862);
          v1365 = vsubq_f64(v1365, v851);
          v1360 = vsubq_f64(v1360, v854);
          v1355 = vsubq_f64(v1355, v845);
          v1350 = vsubq_f64(v1350, v848);
          v1345 = vsubq_f64(v1345, v841);
          v1340 = vsubq_f64(v1340, v843);
          v1335 = vsubq_f64(v1335, v837);
          v1330 = vsubq_f64(v1330, v628);
          v1300 = vsubq_f64(v1300, v600);
          *(float64x2_t *)v536 = v629;
          *(float64x2_t *)(v536 + 16) = v1300;
          v1295 = v629;
          v1290 = vsubq_f64(v1290, v603);
          *(float64x2_t *)(v536 + 176) = v630;
          *(float64x2_t *)(v536 + 192) = v1290;
          v1285 = v630;
          v1280 = vsubq_f64(v1280, v604);
          *(float64x2_t *)(v536 + 352) = v631;
          *(float64x2_t *)(v536 + 368) = v1280;
          v1275 = v631;
          v1270 = vsubq_f64(v1270, v606);
          *(float64x2_t *)(v536 + 528) = v632;
          *(float64x2_t *)(v536 + 544) = v1270;
          v1265 = v632;
          v1260 = vsubq_f64(v1260, v609);
          *(float64x2_t *)(v536 + 704) = v1390;
          *(float64x2_t *)(v536 + 720) = v1260;
          *(float64x2_t *)(v536 + 896) = v1385;
          *(float64x2_t *)(v536 + 880) = v1380;
          v1255 = vsubq_f64(v1255, v612);
          *(float64x2_t *)(v536 + 1072) = v1255;
          v1250 = vsubq_f64(v1250, v611);
          *(float64x2_t *)(v536 + 1056) = v1250;
          v1245 = vsubq_f64(v1245, v615);
          *(float64x2_t *)(v536 + 1232) = v633;
          *(float64x2_t *)(v536 + 1248) = v1245;
          v1240 = v633;
          v1235 = vsubq_f64(v1235, v614);
          *(float64x2_t *)(v536 + 1408) = v1235;
          *(float64x2_t *)(v536 + 1424) = v1375;
          v1230 = vsubq_f64(v1230, v618);
          *(float64x2_t *)(v536 + 1600) = v1230;
          v1225 = vsubq_f64(v1225, v617);
          *(float64x2_t *)(v536 + 1584) = v1225;
          v1220 = vsubq_f64(v1220, v898);
          *(float64x2_t *)(v536 + 1776) = v1220;
          v1215 = vsubq_f64(v1215, v619);
          *(float64x2_t *)(v536 + 1760) = v1215;
          v1210 = vsubq_f64(v1210, v893);
          *(float64x2_t *)(v536 + 1952) = v1210;
          v1205 = vsubq_f64(v1205, vmlaq_laneq_f64(vmulq_n_f64(v598, v594.f64[0]), v599, v594, 1));
          *(float64x2_t *)(v536 + 1936) = v1205;
          v1200 = vsubq_f64(v1200, v886);
          *(float64x2_t *)(v536 + 2128) = v1200;
          v1195 = vsubq_f64(v1195, vmlaq_laneq_f64(vmulq_n_f64(v598, v596.f64[0]), v599, v596, 1));
          *(float64x2_t *)(v536 + 2112) = v1195;
          v1190 = vsubq_f64(v1190, v882);
          *(float64x2_t *)(v536 + 2304) = v1190;
          v1185 = vsubq_f64(v1185, v890);
          *(float64x2_t *)(v536 + 2288) = v1185;
          v1180 = vsubq_f64(v1180, v874);
          *(float64x2_t *)(v536 + 2480) = v1180;
          v1175 = vsubq_f64(v1175, v878);
          *(float64x2_t *)(v536 + 2464) = v1175;
          v1170 = vsubq_f64(v1170, v866);
          *(float64x2_t *)(v536 + 2656) = v1170;
          v1165 = vsubq_f64(v1165, v870);
          *(float64x2_t *)(v536 + 2640) = v1165;
          v1160 = vsubq_f64(v1160, v858);
          *(float64x2_t *)(v536 + 2832) = v1160;
          *(float64x2_t *)(v536 + 2816) = v1370;
          *(float64x2_t *)(v536 + 3008) = v1365;
          *(float64x2_t *)(v536 + 2992) = v1360;
          *(float64x2_t *)(v536 + 3184) = v1355;
          *(float64x2_t *)(v536 + 3168) = v1350;
          *(float64x2_t *)(v536 + 3360) = v1345;
          *(float64x2_t *)(v536 + 3344) = v1340;
          v1155 = vsubq_f64(v1155, v839);
          *(float64x2_t *)(v536 + 3520) = v1155;
          *(float64x2_t *)(v536 + 3536) = v1335;
          v1150 = vsubq_f64(v1150, vmlaq_laneq_f64(vmulq_n_f64(v598, v627.f64[0]), v599, v627, 1));
          *(float64x2_t *)(v536 + 3696) = v1150;
          *(float64x2_t *)(v536 + 3712) = v1330;
          v634 = (int64x2_t *)&v538[(4 * v537 + v540)];
          v635 = *(float64x2_t *)((char *)v634 + 8 * v537);
          v636 = (float64x2_t)v634[v537];
          *(_QWORD *)&v629.f64[0] = vdupq_laneq_s64((int64x2_t)v636, 1).u64[0];
          v637 = *(float64x2_t *)((char *)v634 + 24 * v537);
          v638 = (float64x2_t)v634[2 * v537];
          v639 = *(float64x2_t *)((char *)v634 + 40 * v537);
          v640 = (float64x2_t)v634[3 * v537];
          v641 = *(float64x2_t *)((char *)v634 + 56 * v537);
          v642 = (float64x2_t)v634[4 * v537];
          v643 = *(float64x2_t *)((char *)v634 + 72 * v537);
          v644 = (float64x2_t)v634[5 * v537];
          v645 = (float64x2_t)vzip1q_s64((int64x2_t)v636, (int64x2_t)v637);
          v646 = *(float64x2_t *)((char *)v634 + 88 * v537);
          v647 = (float64x2_t)v634[6 * v537];
          *(_QWORD *)&v629.f64[1] = v634->i64[v542 + 1];
          v648 = *(float64x2_t *)((char *)v634 + 104 * v537);
          v649 = (float64x2_t)vzip1q_s64(*v634, (int64x2_t)v635);
          v650 = (float64x2_t)vzip2q_s64(*v634, (int64x2_t)v635);
          v651 = vmlaq_laneq_f64(vmulq_n_f64(v649, v635.f64[0]), v650, v635, 1);
          v652 = vmlaq_laneq_f64(vmulq_n_f64(v645, v635.f64[0]), v629, v635, 1);
          v653 = vmlaq_laneq_f64(vmulq_n_f64(v649, v636.f64[0]), v650, v636, 1);
          v654 = vmlaq_laneq_f64(vmulq_n_f64(v649, v637.f64[0]), v650, v637, 1);
          v655 = vmlaq_laneq_f64(vmulq_n_f64(v645, v636.f64[0]), v629, v636, 1);
          v656 = vmlaq_laneq_f64(vmulq_n_f64(v645, v637.f64[0]), v629, v637, 1);
          v657 = vmlaq_laneq_f64(vmulq_n_f64(v649, v638.f64[0]), v650, v638, 1);
          v658 = vmlaq_laneq_f64(vmulq_n_f64(v645, v638.f64[0]), v629, v638, 1);
          v659 = vmlaq_laneq_f64(vmulq_n_f64(v649, v639.f64[0]), v650, v639, 1);
          v660 = vmlaq_laneq_f64(vmulq_n_f64(v649, v640.f64[0]), v650, v640, 1);
          v661 = vmlaq_laneq_f64(vmulq_n_f64(v645, v639.f64[0]), v629, v639, 1);
          v662 = vmlaq_laneq_f64(vmulq_n_f64(v645, v640.f64[0]), v629, v640, 1);
          v899 = vmlaq_laneq_f64(vmulq_n_f64(v649, v643.f64[0]), v650, v643, 1);
          v895 = vmlaq_laneq_f64(vmulq_n_f64(v645, v643.f64[0]), v629, v643, 1);
          v887 = vmlaq_laneq_f64(vmulq_n_f64(v649, v646.f64[0]), v650, v646, 1);
          v879 = vmlaq_laneq_f64(vmulq_n_f64(v645, v646.f64[0]), v629, v646, 1);
          v883 = vmlaq_laneq_f64(vmulq_n_f64(v649, v647.f64[0]), v650, v647, 1);
          v663 = vmlaq_laneq_f64(vmulq_n_f64(v645, v647.f64[0]), v629, v647, 1);
          v875 = vmlaq_laneq_f64(vmulq_n_f64(v649, v648.f64[0]), v650, v648, 1);
          v871 = vmlaq_laneq_f64(vmulq_n_f64(v645, v648.f64[0]), v629, v648, 1);
          v664 = (float64x2_t)v634[7 * v537];
          v867 = vmlaq_laneq_f64(vmulq_n_f64(v649, v664.f64[0]), v650, v664, 1);
          v863 = vmlaq_laneq_f64(vmulq_n_f64(v645, v664.f64[0]), v629, v664, 1);
          v665 = *(float64x2_t *)((char *)v634 + 120 * v537);
          v859 = vmlaq_laneq_f64(vmulq_n_f64(v649, v665.f64[0]), v650, v665, 1);
          v855 = vmlaq_laneq_f64(vmulq_n_f64(v645, v665.f64[0]), v629, v665, 1);
          v666 = (float64x2_t)v634[8 * v537];
          v667 = vmlaq_laneq_f64(vmulq_n_f64(v649, v666.f64[0]), v650, v666, 1);
          v668 = vmlaq_laneq_f64(vmulq_n_f64(v645, v666.f64[0]), v629, v666, 1);
          v669 = *(float64x2_t *)((char *)v634 + 136 * v537);
          v670 = vsubq_f64(v1140, vmlaq_laneq_f64(vmulq_n_f64(v649, *(double *)v634->i64), v650, *(float64x2_t *)v634, 1));
          v1325 = vsubq_f64(v1325, v651);
          v671 = vsubq_f64(v1115, v654);
          v1320 = vsubq_f64(v1320, v657);
          v1315 = vsubq_f64(v1315, vmlaq_laneq_f64(vmulq_n_f64(v649, v642.f64[0]), v650, v642, 1));
          v1310 = vsubq_f64(v1310, v667);
          v1305 = vsubq_f64(v1305, vmlaq_laneq_f64(vmulq_n_f64(v649, v669.f64[0]), v650, v669, 1));
          v1145 = vsubq_f64(v1145, vmlaq_laneq_f64(vmulq_n_f64(v645, *(double *)v634->i64), v629, *(float64x2_t *)v634, 1));
          *(float64x2_t *)(v536 + 736) = v670;
          *(float64x2_t *)(v536 + 752) = v1145;
          v1140 = v670;
          v1135 = vsubq_f64(v1135, v652);
          *(float64x2_t *)(v536 + 912) = v1325;
          *(float64x2_t *)(v536 + 928) = v1135;
          v1125 = vsubq_f64(v1125, v653);
          *(float64x2_t *)(v536 + 1088) = v1125;
          v1130 = vsubq_f64(v1130, v655);
          *(float64x2_t *)(v536 + 1104) = v1130;
          v1120 = vsubq_f64(v1120, v656);
          *(float64x2_t *)(v536 + 1264) = v671;
          *(float64x2_t *)(v536 + 1280) = v1120;
          v1115 = v671;
          v1110 = vsubq_f64(v1110, v658);
          *(float64x2_t *)(v536 + 1456) = v1110;
          *(float64x2_t *)(v536 + 1440) = v1320;
          v1100 = vsubq_f64(v1100, v659);
          *(float64x2_t *)(v536 + 1616) = v1100;
          v1105 = vsubq_f64(v1105, v661);
          *(float64x2_t *)(v536 + 1632) = v1105;
          v1095 = vsubq_f64(v1095, v662);
          *(float64x2_t *)(v536 + 1808) = v1095;
          v1090 = vsubq_f64(v1090, v660);
          *(float64x2_t *)(v536 + 1792) = v1090;
          v1085 = vsubq_f64(v1085, vmlaq_laneq_f64(vmulq_n_f64(v645, v641.f64[0]), v629, v641, 1));
          *(float64x2_t *)(v536 + 1984) = v1085;
          v1080 = vsubq_f64(v1080, vmlaq_laneq_f64(vmulq_n_f64(v649, v641.f64[0]), v650, v641, 1));
          *(float64x2_t *)(v536 + 1968) = v1080;
          *(float64x2_t *)(v536 + 2144) = v1315;
          v1075 = vsubq_f64(v1075, vmlaq_laneq_f64(vmulq_n_f64(v645, v642.f64[0]), v629, v642, 1));
          *(float64x2_t *)(v536 + 2160) = v1075;
          v1070 = vsubq_f64(v1070, v895);
          *(float64x2_t *)(v536 + 2336) = v1070;
          v1065 = vsubq_f64(v1065, v899);
          *(float64x2_t *)(v536 + 2320) = v1065;
          v1060 = vsubq_f64(v1060, vmlaq_laneq_f64(vmulq_n_f64(v645, v644.f64[0]), v629, v644, 1));
          *(float64x2_t *)(v536 + 2512) = v1060;
          v1055 = vsubq_f64(v1055, vmlaq_laneq_f64(vmulq_n_f64(v649, v644.f64[0]), v650, v644, 1));
          *(float64x2_t *)(v536 + 2496) = v1055;
          v1045 = vsubq_f64(v1045, v887);
          *(float64x2_t *)(v536 + 2672) = v1045;
          v1050 = vsubq_f64(v1050, v879);
          *(float64x2_t *)(v536 + 2688) = v1050;
          v1040 = vsubq_f64(v1040, v663);
          *(float64x2_t *)(v536 + 2864) = v1040;
          v1035 = vsubq_f64(v1035, v883);
          *(float64x2_t *)(v536 + 2848) = v1035;
          v1030 = vsubq_f64(v1030, v871);
          *(float64x2_t *)(v536 + 3040) = v1030;
          v1026 = vsubq_f64(v1026, v875);
          *(float64x2_t *)(v536 + 3024) = v1026;
          v1019 = vsubq_f64(v1019, v867);
          *(float64x2_t *)(v536 + 3200) = v1019;
          v1022 = vsubq_f64(v1022, v863);
          *(float64x2_t *)(v536 + 3216) = v1022;
          v1017 = vsubq_f64(v1017, v855);
          *(float64x2_t *)(v536 + 3392) = v1017;
          v1015 = vsubq_f64(v1015, v859);
          *(float64x2_t *)(v536 + 3376) = v1015;
          v1013 = vsubq_f64(v1013, v668);
          *(float64x2_t *)(v536 + 3568) = v1013;
          *(float64x2_t *)(v536 + 3552) = v1310;
          *(float64x2_t *)(v536 + 3728) = v1305;
          v1011 = vsubq_f64(v1011, vmlaq_laneq_f64(vmulq_n_f64(v645, v669.f64[0]), v629, v669, 1));
          *(float64x2_t *)(v536 + 3744) = v1011;
          v672 = (int64x2_t *)&v538[(8 * v537 + v540)];
          v673 = (float64x2_t)v672[v537];
          v674 = *(float64x2_t *)((char *)v672 + 8 * v537);
          v675 = *(float64x2_t *)((char *)v672 + 24 * v537);
          *(_QWORD *)&v649.f64[0] = vdupq_laneq_s64((int64x2_t)v673, 1).u64[0];
          v676 = (float64x2_t)v672[2 * v537];
          v677 = *(float64x2_t *)((char *)v672 + 40 * v537);
          v678 = (float64x2_t)v672[3 * v537];
          v679 = *(float64x2_t *)((char *)v672 + 56 * v537);
          v680 = (float64x2_t)v672[4 * v537];
          v681 = *(float64x2_t *)((char *)v672 + 72 * v537);
          v682 = (float64x2_t)v672[5 * v537];
          v683 = *(float64x2_t *)((char *)v672 + 88 * v537);
          v684 = (float64x2_t)v672[6 * v537];
          v685 = (float64x2_t)vzip1q_s64((int64x2_t)v673, (int64x2_t)v675);
          v686 = (float64x2_t)vzip1q_s64(*v672, (int64x2_t)v674);
          v687 = (float64x2_t)vzip2q_s64(*v672, (int64x2_t)v674);
          *(_QWORD *)&v649.f64[1] = v672->i64[v542 + 1];
          v688 = vmlaq_laneq_f64(vmulq_n_f64(v686, *(double *)v672->i64), v687, *(float64x2_t *)v672, 1);
          v689 = vmlaq_laneq_f64(vmulq_n_f64(v686, v674.f64[0]), v687, v674, 1);
          v690 = vmlaq_laneq_f64(vmulq_n_f64(v685, *(double *)v672->i64), v649, *(float64x2_t *)v672, 1);
          v691 = vmlaq_laneq_f64(vmulq_n_f64(v685, v674.f64[0]), v649, v674, 1);
          v692 = vmlaq_laneq_f64(vmulq_n_f64(v686, v673.f64[0]), v687, v673, 1);
          v693 = vmlaq_laneq_f64(vmulq_n_f64(v685, v673.f64[0]), v649, v673, 1);
          v694 = vmlaq_laneq_f64(vmulq_n_f64(v686, v675.f64[0]), v687, v675, 1);
          v695 = vmlaq_laneq_f64(vmulq_n_f64(v686, v676.f64[0]), v687, v676, 1);
          v696 = vmlaq_laneq_f64(vmulq_n_f64(v685, v675.f64[0]), v649, v675, 1);
          v697 = vmlaq_laneq_f64(vmulq_n_f64(v685, v676.f64[0]), v649, v676, 1);
          v698 = vmlaq_laneq_f64(vmulq_n_f64(v686, v677.f64[0]), v687, v677, 1);
          v699 = vmlaq_laneq_f64(vmulq_n_f64(v685, v677.f64[0]), v649, v677, 1);
          v700 = vmlaq_laneq_f64(vmulq_n_f64(v686, v678.f64[0]), v687, v678, 1);
          v701 = vmlaq_laneq_f64(vmulq_n_f64(v686, v679.f64[0]), v687, v679, 1);
          v702 = vmlaq_laneq_f64(vmulq_n_f64(v685, v678.f64[0]), v649, v678, 1);
          v703 = vmlaq_laneq_f64(vmulq_n_f64(v685, v679.f64[0]), v649, v679, 1);
          v704 = vmlaq_laneq_f64(vmulq_n_f64(v686, v680.f64[0]), v687, v680, 1);
          v705 = vmlaq_laneq_f64(vmulq_n_f64(v685, v680.f64[0]), v649, v680, 1);
          v706 = vmlaq_laneq_f64(vmulq_n_f64(v686, v681.f64[0]), v687, v681, 1);
          v707 = vmlaq_laneq_f64(vmulq_n_f64(v686, v682.f64[0]), v687, v682, 1);
          v708 = vmlaq_laneq_f64(vmulq_n_f64(v685, v681.f64[0]), v649, v681, 1);
          v709 = vmlaq_laneq_f64(vmulq_n_f64(v685, v682.f64[0]), v649, v682, 1);
          v710 = vmlaq_laneq_f64(vmulq_n_f64(v686, v683.f64[0]), v687, v683, 1);
          v711 = vmlaq_laneq_f64(vmulq_n_f64(v685, v683.f64[0]), v649, v683, 1);
          v712 = vmlaq_laneq_f64(vmulq_n_f64(v686, v684.f64[0]), v687, v684, 1);
          v713 = vmlaq_laneq_f64(vmulq_n_f64(v685, v684.f64[0]), v649, v684, 1);
          v714 = *(float64x2_t *)((char *)v672 + 104 * v537);
          v715 = vmlaq_laneq_f64(vmulq_n_f64(v686, v714.f64[0]), v687, v714, 1);
          v716 = vmlaq_laneq_f64(vmulq_n_f64(v685, v714.f64[0]), v649, v714, 1);
          v717 = vsubq_f64(v1009, v688);
          v544 = vsubq_f64(v941, v690);
          v718 = vsubq_f64(v1007, v691);
          v719 = vsubq_f64(v1001, v692);
          v720 = vsubq_f64(v1003, v693);
          v721 = vsubq_f64(v997, v694);
          v722 = vsubq_f64(v993, v695);
          v723 = vsubq_f64(v995, v697);
          v724 = vsubq_f64(v991, v699);
          v725 = vsubq_f64(v987, v700);
          v726 = vsubq_f64(v985, v701);
          v545 = vsubq_f64(v939, v702);
          v546 = vsubq_f64(v937, v703);
          v547 = vsubq_f64(v935, v705);
          v549 = vsubq_f64(v1420, v706);
          v727 = vsubq_f64(v981, v707);
          v548 = vsubq_f64(v1424, v708);
          v550 = vsubq_f64(v933, v709);
          v728 = vsubq_f64(v979, v710);
          v551 = vsubq_f64(v931, v711);
          v729 = vsubq_f64(v977, v712);
          v552 = vsubq_f64(v929, v713);
          *(float64x2_t *)(v536 + 1488) = v544;
          v1009 = v717;
          *(float64x2_t *)(v536 + 1472) = v717;
          v1007 = v718;
          *(float64x2_t *)(v536 + 1664) = v718;
          v1005 = vsubq_f64(v1005, v689);
          *(float64x2_t *)(v536 + 1648) = v1005;
          v1003 = v720;
          *(float64x2_t *)(v536 + 1840) = v720;
          v1001 = v719;
          *(float64x2_t *)(v536 + 1824) = v719;
          v999 = vsubq_f64(v999, v696);
          *(float64x2_t *)(v536 + 2016) = v999;
          v997 = v721;
          *(float64x2_t *)(v536 + 2000) = v721;
          v995 = v723;
          *(float64x2_t *)(v536 + 2192) = v723;
          v993 = v722;
          *(float64x2_t *)(v536 + 2176) = v722;
          v991 = v724;
          *(float64x2_t *)(v536 + 2368) = v724;
          v989 = vsubq_f64(v989, v698);
          *(float64x2_t *)(v536 + 2352) = v989;
          *(float64x2_t *)(v536 + 2544) = v545;
          v987 = v725;
          *(float64x2_t *)(v536 + 2528) = v725;
          *(float64x2_t *)(v536 + 2720) = v546;
          v985 = v726;
          *(float64x2_t *)(v536 + 2704) = v726;
          *(float64x2_t *)(v536 + 2896) = v547;
          v983 = vsubq_f64(v983, v704);
          *(float64x2_t *)(v536 + 2880) = v983;
          *(float64x2_t *)(v536 + 3072) = v548;
          *(float64x2_t *)(v536 + 3056) = v549;
          *(float64x2_t *)(v536 + 3248) = v550;
          v981 = v727;
          *(float64x2_t *)(v536 + 3232) = v727;
          *(float64x2_t *)(v536 + 3424) = v551;
          v979 = v728;
          *(float64x2_t *)(v536 + 3408) = v728;
          *(float64x2_t *)(v536 + 3600) = v552;
          v977 = v729;
          *(float64x2_t *)(v536 + 3584) = v729;
          v973 = vsubq_f64(v973, v715);
          *(float64x2_t *)(v536 + 3760) = v973;
          v975 = vsubq_f64(v975, v716);
          *(float64x2_t *)(v536 + 3776) = v975;
          v730 = (int64x2_t *)&v538[(12 * v537 + v540)];
          v731 = (float64x2_t)v730[v537];
          v732 = *(float64x2_t *)((char *)v730 + 8 * v537);
          v733 = *(float64x2_t *)((char *)v730 + 24 * v537);
          *(_QWORD *)&v717.f64[0] = vdupq_laneq_s64((int64x2_t)v731, 1).u64[0];
          v734 = (float64x2_t)v730[2 * v537];
          v735 = *(float64x2_t *)((char *)v730 + 40 * v537);
          v736 = (float64x2_t)v730[3 * v537];
          v737 = *(float64x2_t *)((char *)v730 + 56 * v537);
          v738 = (float64x2_t)vzip1q_s64((int64x2_t)v731, (int64x2_t)v733);
          v739 = (float64x2_t)v730[4 * v537];
          v740 = (float64x2_t)vzip1q_s64(*v730, (int64x2_t)v732);
          *(_QWORD *)&v717.f64[1] = v730->i64[v542 + 1];
          v741 = (float64x2_t)vzip2q_s64(*v730, (int64x2_t)v732);
          v742 = vmlaq_laneq_f64(vmulq_n_f64(v740, *(double *)v730->i64), v741, *(float64x2_t *)v730, 1);
          v743 = vmlaq_laneq_f64(vmulq_n_f64(v738, *(double *)v730->i64), v717, *(float64x2_t *)v730, 1);
          v744 = vmlaq_laneq_f64(vmulq_n_f64(v740, v732.f64[0]), v741, v732, 1);
          v745 = vmlaq_laneq_f64(vmulq_n_f64(v740, v731.f64[0]), v741, v731, 1);
          v746 = vmlaq_laneq_f64(vmulq_n_f64(v738, v732.f64[0]), v717, v732, 1);
          v747 = vmlaq_laneq_f64(vmulq_n_f64(v738, v731.f64[0]), v717, v731, 1);
          v748 = vmlaq_laneq_f64(vmulq_n_f64(v740, v733.f64[0]), v741, v733, 1);
          v749 = vmlaq_laneq_f64(vmulq_n_f64(v738, v733.f64[0]), v717, v733, 1);
          v750 = vmlaq_laneq_f64(vmulq_n_f64(v740, v734.f64[0]), v741, v734, 1);
          v751 = vmlaq_laneq_f64(vmulq_n_f64(v740, v735.f64[0]), v741, v735, 1);
          v752 = vmlaq_laneq_f64(vmulq_n_f64(v738, v734.f64[0]), v717, v734, 1);
          v753 = vmlaq_laneq_f64(vmulq_n_f64(v738, v735.f64[0]), v717, v735, 1);
          v754 = vmlaq_laneq_f64(vmulq_n_f64(v740, v736.f64[0]), v741, v736, 1);
          v755 = vmlaq_laneq_f64(vmulq_n_f64(v738, v736.f64[0]), v717, v736, 1);
          v756 = vmlaq_laneq_f64(vmulq_n_f64(v740, v737.f64[0]), v741, v737, 1);
          v757 = vmlaq_laneq_f64(vmulq_n_f64(v738, v737.f64[0]), v717, v737, 1);
          v758 = vmlaq_laneq_f64(vmulq_n_f64(v740, v739.f64[0]), v741, v739, 1);
          v759 = vmlaq_laneq_f64(vmulq_n_f64(v738, v739.f64[0]), v717, v739, 1);
          v760 = *(float64x2_t *)((char *)v730 + 72 * v537);
          v761 = vmlaq_laneq_f64(vmulq_n_f64(v740, v760.f64[0]), v741, v760, 1);
          v762 = vmlaq_laneq_f64(vmulq_n_f64(v738, v760.f64[0]), v717, v760, 1);
          v763 = vsubq_f64(v969, v742);
          v764 = vsubq_f64(v967, v744);
          v765 = vsubq_f64(v965, v745);
          v553 = vsubq_f64(v927, v746);
          v554 = vsubq_f64(v925, v747);
          v766 = vsubq_f64(v963, v748);
          v555 = vsubq_f64(v923, v749);
          v767 = vsubq_f64(v961, v750);
          v768 = vsubq_f64(v959, v751);
          v556 = vsubq_f64(v921, v752);
          v557 = vsubq_f64(v919, v753);
          v769 = vsubq_f64(v957, v754);
          v558 = vsubq_f64(v917, v755);
          v770 = vsubq_f64(v955, v756);
          v559 = vsubq_f64(v915, v757);
          v560 = vsubq_f64(v1415, v759);
          v971 = vsubq_f64(v971, v743);
          *(float64x2_t *)(v536 + 2224) = v971;
          v969 = v763;
          *(float64x2_t *)(v536 + 2208) = v763;
          *(float64x2_t *)(v536 + 2400) = v553;
          v967 = v764;
          *(float64x2_t *)(v536 + 2384) = v764;
          *(float64x2_t *)(v536 + 2576) = v554;
          v965 = v765;
          *(float64x2_t *)(v536 + 2560) = v765;
          *(float64x2_t *)(v536 + 2752) = v555;
          v963 = v766;
          *(float64x2_t *)(v536 + 2736) = v766;
          *(float64x2_t *)(v536 + 2928) = v556;
          v961 = v767;
          *(float64x2_t *)(v536 + 2912) = v767;
          *(float64x2_t *)(v536 + 3104) = v557;
          v959 = v768;
          *(float64x2_t *)(v536 + 3088) = v768;
          *(float64x2_t *)(v536 + 3280) = v558;
          v957 = v769;
          *(float64x2_t *)(v536 + 3264) = v769;
          *(float64x2_t *)(v536 + 3456) = v559;
          v955 = v770;
          *(float64x2_t *)(v536 + 3440) = v770;
          *(float64x2_t *)(v536 + 3632) = v560;
          v953 = vsubq_f64(v953, v758);
          *(float64x2_t *)(v536 + 3616) = v953;
          v949 = vsubq_f64(v949, v761);
          *(float64x2_t *)(v536 + 3792) = v949;
          v951 = vsubq_f64(v951, v762);
          *(float64x2_t *)(v536 + 3808) = v951;
          v771 = (int64x2_t *)&v538[(16 * v537 + v540)];
          v772 = (float64x2_t)v771[v537];
          v773 = *(float64x2_t *)((char *)v771 + 8 * v537);
          v774 = *(float64x2_t *)((char *)v771 + 24 * v537);
          *(_QWORD *)&v769.f64[0] = vdupq_laneq_s64((int64x2_t)v772, 1).u64[0];
          v775 = (float64x2_t)v771[2 * v537];
          v776 = (float64x2_t)vzip1q_s64((int64x2_t)v772, (int64x2_t)v774);
          v777 = (float64x2_t)vzip1q_s64(*v771, (int64x2_t)v773);
          v778 = (float64x2_t)vzip2q_s64(*v771, (int64x2_t)v773);
          *(_QWORD *)&v769.f64[1] = v771->i64[v542 + 1];
          v779 = vmlaq_laneq_f64(vmulq_n_f64(v777, *(double *)v771->i64), v778, *(float64x2_t *)v771, 1);
          v780 = vmlaq_laneq_f64(vmulq_n_f64(v777, v773.f64[0]), v778, v773, 1);
          v781 = vmlaq_laneq_f64(vmulq_n_f64(v776, *(double *)v771->i64), v769, *(float64x2_t *)v771, 1);
          v782 = vmlaq_laneq_f64(vmulq_n_f64(v776, v773.f64[0]), v769, v773, 1);
          v783 = vmlaq_laneq_f64(vmulq_n_f64(v777, v772.f64[0]), v778, v772, 1);
          v784 = vmlaq_laneq_f64(vmulq_n_f64(v776, v772.f64[0]), v769, v772, 1);
          v785 = vmlaq_laneq_f64(vmulq_n_f64(v777, v774.f64[0]), v778, v774, 1);
          v786 = vmlaq_laneq_f64(vmulq_n_f64(v776, v774.f64[0]), v769, v774, 1);
          v787 = vmlaq_laneq_f64(vmulq_n_f64(v777, v775.f64[0]), v778, v775, 1);
          v788 = vmlaq_laneq_f64(vmulq_n_f64(v776, v775.f64[0]), v769, v775, 1);
          v789 = *(float64x2_t *)((char *)v771 + 40 * v537);
          v790 = vmlaq_laneq_f64(vmulq_n_f64(v777, v789.f64[0]), v778, v789, 1);
          v791 = vmlaq_laneq_f64(vmulq_n_f64(v776, v789.f64[0]), v769, v789, 1);
          v562 = vsubq_f64(v1410, v779);
          v561 = vsubq_f64(v913, v781);
          v564 = vsubq_f64(v909, v780);
          v563 = vsubq_f64(v911, v782);
          v565 = vsubq_f64(v907, v784);
          v567 = vsubq_f64(v1405, v785);
          v566 = vsubq_f64(v905, v786);
          v792 = vsubq_f64(v943, v790);
          v568 = vsubq_f64(v903, v788);
          v569 = vsubq_f64(v1400, v791);
          *(float64x2_t *)(v536 + 2960) = v561;
          *(float64x2_t *)(v536 + 2944) = v562;
          *(float64x2_t *)(v536 + 3136) = v563;
          *(float64x2_t *)(v536 + 3120) = v564;
          *(float64x2_t *)(v536 + 3312) = v565;
          v947 = vsubq_f64(v947, v783);
          *(float64x2_t *)(v536 + 3296) = v947;
          *(float64x2_t *)(v536 + 3488) = v566;
          *(float64x2_t *)(v536 + 3472) = v567;
          *(float64x2_t *)(v536 + 3664) = v568;
          v945 = vsubq_f64(v945, v787);
          *(float64x2_t *)(v536 + 3648) = v945;
          *(float64x2_t *)(v536 + 3840) = v569;
          v943 = v792;
          *(float64x2_t *)(v536 + 3824) = v792;
          v793 = (int64x2_t *)&v538[(20 * v537 + v540)];
          v794 = *(float64x2_t *)((char *)v793 + 8 * v537);
          v795 = (float64x2_t)vzip1q_s64(*v793, (int64x2_t)v794);
          *(_QWORD *)&v787.f64[0] = vdupq_laneq_s64(*v793, 1).u64[0];
          *(_QWORD *)&v787.f64[1] = v793->i64[(unint64_t)v541 / 8 + 1];
          v796 = vmlaq_laneq_f64(vmulq_n_f64(v795, v794.f64[0]), v787, v794, 1);
          v570 = vsubq_f64(v901, vmlaq_laneq_f64(vmulq_n_f64(v795, *(double *)v793->i64), v787, *(float64x2_t *)v793, 1));
          v571 = vsubq_f64(v1395, v796);
          *(float64x2_t *)(v536 + 3680) = v570;
          *(float64x2_t *)(v536 + 3856) = v571;
          LODWORD(v793) = v540 + 4;
          v540 += 2;
          ++v543;
        }
        while (v793 <= v537);
        v539 = *(_DWORD *)(v4 + 16);
      }
      if ((v539 & 1) != 0)
      {
        LODWORD(v1543) = 1;
        HIDWORD(v1543) = v537;
        p_p_category = (char ***)&v538[(v537 - 1)];
        LODWORD(v1545) = v537 - 1;
        category = (char *)&v1543;
        *(_QWORD *)&v1430.f64[1] = &category;
        *(_QWORD *)&v1431 = &v1543;
        *((_QWORD *)&v1431 + 1) = 0x3FF0000000000000;
        if (v538 == (double *)v536)
        {
          sub_20FBAAB3C((double *)&__p, (uint64_t)&v1430);
          if (v536 >= (unint64_t)&v1553 || (unint64_t)&__p >= v536 + 3872)
          {
            for (i = 0; i != 3872; i += 32)
            {
              v807 = (float64x2_t *)(v536 + i);
              v808 = vsubq_f64(*(float64x2_t *)(v536 + i + 16), *(float64x2_t *)&__p.__r_.__value_.__r.__words[i / 8 + 2]);
              *v807 = vsubq_f64(*(float64x2_t *)(v536 + i), *(float64x2_t *)((char *)&__p.__r_.__value_.__l.__data_ + i));
              v807[1] = v808;
            }
          }
          else
          {
            for (j = 0; j != 3872; j += 8)
              *(double *)(v536 + j) = *(double *)(v536 + j) - *(double *)((char *)&__p.__r_.__value_.__l.__data_ + j);
          }
        }
        else
        {
          sub_20E8BE654(1, 0, 22, 22, 1, &v538[(v537 - 1)], v537, &v538[(v537 - 1)], -1.0, 1.0, v537, (double *)v536, 22);
        }
      }
      break;
    case 21:
      v286 = *(_QWORD *)v2;
      v287 = *(unsigned int *)(v4 + 16);
      v288 = *(double **)v4;
      LOBYTE(v289) = *(_DWORD *)(v4 + 16);
      if (v287 >= 2)
      {
        v290 = 0;
        v1334 = *(float64x2_t *)(v286 + 16);
        v1329 = *(float64x2_t *)v286;
        v1324 = *(float64x2_t *)(v286 + 184);
        v1319 = *(float64x2_t *)(v286 + 168);
        v1314 = *(float64x2_t *)(v286 + 352);
        v1309 = *(float64x2_t *)(v286 + 336);
        v1304 = *(float64x2_t *)(v286 + 520);
        v1299 = *(float64x2_t *)(v286 + 504);
        v1294 = *(float64x2_t *)(v286 + 688);
        v1289 = *(float64x2_t *)(v286 + 672);
        v291 = 8 * v287;
        v1284 = *(float64x2_t *)(v286 + 856);
        v1279 = *(float64x2_t *)(v286 + 840);
        v1274 = *(float64x2_t *)(v286 + 1024);
        v1269 = *(float64x2_t *)(v286 + 1008);
        v1264 = *(float64x2_t *)(v286 + 1192);
        v1259 = *(float64x2_t *)(v286 + 1176);
        v1254 = *(float64x2_t *)(v286 + 1360);
        v1249 = *(float64x2_t *)(v286 + 1344);
        v1244 = *(float64x2_t *)(v286 + 1528);
        v1423 = *(float64x2_t *)(v286 + 1512);
        v1419 = *(float64x2_t *)(v286 + 1696);
        v1239 = *(float64x2_t *)(v286 + 1680);
        v1234 = *(float64x2_t *)(v286 + 1864);
        v1229 = *(float64x2_t *)(v286 + 1848);
        v1224 = *(float64x2_t *)(v286 + 2032);
        v1219 = *(float64x2_t *)(v286 + 2016);
        v1214 = *(float64x2_t *)(v286 + 2200);
        v1209 = *(float64x2_t *)(v286 + 2184);
        v1204 = *(float64x2_t *)(v286 + 2368);
        v1199 = *(float64x2_t *)(v286 + 2352);
        v1194 = *(float64x2_t *)(v286 + 2536);
        v1189 = *(float64x2_t *)(v286 + 2520);
        v292 = 3 * v287;
        v293 = *(int64x2_t **)v4;
        v1414 = *(float64x2_t *)(v286 + 2704);
        v1409 = *(float64x2_t *)(v286 + 2688);
        v1404 = *(float64x2_t *)(v286 + 2872);
        v1399 = *(float64x2_t *)(v286 + 2856);
        v1394 = *(float64x2_t *)(v286 + 3040);
        v1389 = *(float64x2_t *)(v286 + 3024);
        v1384 = *(float64x2_t *)(v286 + 3208);
        v1379 = *(float64x2_t *)(v286 + 3192);
        v1374 = *(float64x2_t *)(v286 + 3376);
        v1184 = *(float64x2_t *)(v286 + 3360);
        v1179 = *(float64x2_t *)(v286 + 720);
        v1174 = *(float64x2_t *)(v286 + 704);
        v1169 = *(float64x2_t *)(v286 + 888);
        v1164 = *(float64x2_t *)(v286 + 872);
        v1159 = *(float64x2_t *)(v286 + 1056);
        v1154 = *(float64x2_t *)(v286 + 1040);
        v1149 = *(float64x2_t *)(v286 + 1224);
        v1144 = *(float64x2_t *)(v286 + 1208);
        v1139 = *(float64x2_t *)(v286 + 1392);
        v1134 = *(float64x2_t *)(v286 + 1376);
        v1129 = *(float64x2_t *)(v286 + 1560);
        v1369 = *(float64x2_t *)(v286 + 1544);
        v1124 = *(float64x2_t *)(v286 + 1728);
        v1119 = *(float64x2_t *)(v286 + 1712);
        v1114 = *(float64x2_t *)(v286 + 1896);
        v1109 = *(float64x2_t *)(v286 + 1880);
        v1104 = *(float64x2_t *)(v286 + 2064);
        v1364 = *(float64x2_t *)(v286 + 2048);
        v1099 = *(float64x2_t *)(v286 + 2232);
        v1094 = *(float64x2_t *)(v286 + 2216);
        v1089 = *(float64x2_t *)(v286 + 2400);
        v1084 = *(float64x2_t *)(v286 + 2384);
        v1079 = *(float64x2_t *)(v286 + 2568);
        v1359 = *(float64x2_t *)(v286 + 2552);
        v1074 = *(float64x2_t *)(v286 + 2736);
        v1069 = *(float64x2_t *)(v286 + 2720);
        v1064 = *(float64x2_t *)(v286 + 2904);
        v1059 = *(float64x2_t *)(v286 + 2888);
        v1054 = *(float64x2_t *)(v286 + 3072);
        v1049 = *(float64x2_t *)(v286 + 3056);
        v1044 = *(float64x2_t *)(v286 + 3240);
        v1039 = *(float64x2_t *)(v286 + 3224);
        v1034 = *(float64x2_t *)(v286 + 3408);
        v1029 = *(float64x2_t *)(v286 + 3392);
        v294 = *(float64x2_t *)(v286 + 1424);
        v295 = *(float64x2_t *)(v286 + 1408);
        v296 = *(float64x2_t *)(v286 + 1576);
        v1025 = *(float64x2_t *)(v286 + 1592);
        v1021 = *(float64x2_t *)(v286 + 1760);
        v1018 = *(float64x2_t *)(v286 + 1744);
        v1016 = *(float64x2_t *)(v286 + 1928);
        v1014 = *(float64x2_t *)(v286 + 1912);
        v1012 = *(float64x2_t *)(v286 + 2096);
        v1010 = *(float64x2_t *)(v286 + 2080);
        v1008 = *(float64x2_t *)(v286 + 2264);
        v1006 = *(float64x2_t *)(v286 + 2248);
        v1004 = *(float64x2_t *)(v286 + 2432);
        v1002 = *(float64x2_t *)(v286 + 2416);
        v1354 = *(float64x2_t *)(v286 + 2600);
        v1000 = *(float64x2_t *)(v286 + 2584);
        v1349 = *(float64x2_t *)(v286 + 2768);
        v998 = *(float64x2_t *)(v286 + 2752);
        v297 = *(float64x2_t *)(v286 + 2936);
        v996 = *(float64x2_t *)(v286 + 2920);
        v298 = *(float64x2_t *)(v286 + 3104);
        v1344 = *(float64x2_t *)(v286 + 3088);
        v299 = *(float64x2_t *)(v286 + 3272);
        v1339 = *(float64x2_t *)(v286 + 3256);
        v994 = *(float64x2_t *)(v286 + 3440);
        v992 = *(float64x2_t *)(v286 + 3424);
        v990 = *(float64x2_t *)(v286 + 2128);
        v988 = *(float64x2_t *)(v286 + 2112);
        v986 = *(float64x2_t *)(v286 + 2296);
        v984 = *(float64x2_t *)(v286 + 2280);
        v982 = *(float64x2_t *)(v286 + 2464);
        v980 = *(float64x2_t *)(v286 + 2448);
        v978 = *(float64x2_t *)(v286 + 2632);
        v976 = *(float64x2_t *)(v286 + 2616);
        v974 = *(float64x2_t *)(v286 + 2800);
        v972 = *(float64x2_t *)(v286 + 2784);
        v970 = *(float64x2_t *)(v286 + 2968);
        v968 = *(float64x2_t *)(v286 + 2952);
        v966 = *(float64x2_t *)(v286 + 3136);
        v964 = *(float64x2_t *)(v286 + 3120);
        v962 = *(float64x2_t *)(v286 + 3304);
        v960 = *(float64x2_t *)(v286 + 3288);
        v958 = *(float64x2_t *)(v286 + 3472);
        v956 = *(float64x2_t *)(v286 + 3456);
        v18.f64[0] = *(float64_t *)(v286 + 2848);
        v300 = *(int8x16_t *)(v286 + 2832);
        v301 = *(int8x16_t *)(v286 + 2816);
        v942 = vextq_s8(v300, v300, 8uLL).u64[0];
        v944 = vextq_s8(v301, v301, 8uLL).u64[0];
        v19.f64[0] = *(float64_t *)(v286 + 3016);
        v954 = *(int8x16_t *)(v286 + 3000);
        v946 = vextq_s8(v954, v954, 8uLL).u64[0];
        v952 = *(int8x16_t *)(v286 + 2984);
        v302 = vextq_s8(v952, v952, 8uLL).u64[0];
        v21.f64[0] = *(float64_t *)(v286 + 3184);
        v303 = *(int8x16_t *)(v286 + 3168);
        v304 = vextq_s8(v303, v303, 8uLL).u64[0];
        v950 = *(int8x16_t *)(v286 + 3152);
        v305 = vextq_s8(v950, v950, 8uLL).u64[0];
        v20.f64[0] = *(float64_t *)(v286 + 3352);
        v313 = *(int8x16_t *)(v286 + 3320);
        v306 = *(int8x16_t *)(v286 + 3336);
        v307 = vextq_s8(v306, v306, 8uLL).u64[0];
        v948 = *(_QWORD *)(v286 + 3320);
        v308 = vextq_s8(v313, v313, 8uLL).u64[0];
        v309 = *(int8x16_t *)(v286 + 3504);
        v310 = *(int8x16_t *)(v286 + 3488);
        v311 = vextq_s8(v309, v309, 8uLL).u64[0];
        v312 = vextq_s8(v310, v310, 8uLL).u64[0];
        v313.i64[0] = *(_QWORD *)(v286 + 3520);
        do
        {
          v894 = v302;
          v896 = v304;
          v897 = v305;
          v900 = v311;
          v902 = v307;
          v904 = v308;
          v906 = v312;
          v908 = (float64x2_t)v313;
          v910 = v310.i64[0];
          v912 = v309.i64[0];
          v914 = v306.i64[0];
          v916 = v20;
          v918 = v303.i64[0];
          v920 = v21;
          v922 = v19;
          v924 = v301.i64[0];
          v926 = v300.i64[0];
          v928 = v18;
          v930 = v299;
          v932 = v298;
          v934 = v297;
          v936 = v296;
          v938 = v295;
          v940 = v294;
          v314 = *(float64x2_t *)((char *)v293 + 8 * v287);
          v315 = (int64x2_t *)((char *)v293 + v291 + v291);
          v316 = *(float64x2_t *)v315;
          v317 = *(float64x2_t *)((char *)v315 + 8 * v287);
          *(_QWORD *)&v318.f64[0] = vdupq_laneq_s64(*v315, 1).u64[0];
          v319 = (float64x2_t *)&v315->i8[v291 + v291];
          v320 = *v319;
          v321 = (float64x2_t)vzip1q_s64((int64x2_t)v316, (int64x2_t)v317);
          v322 = (float64x2_t *)((char *)v319 + v291);
          v323 = *v322;
          v324 = (float64x2_t *)((char *)v322 + v291);
          v325 = *v324;
          v326 = (float64x2_t *)((char *)v324 + v291);
          v327 = *v326;
          v328 = (float64x2_t *)((char *)v326 + v291);
          v329 = (float64x2_t)vzip1q_s64(*v293, (int64x2_t)v314);
          v318.f64[1] = v317.f64[1];
          v330 = (float64x2_t)vzip2q_s64(*v293, (int64x2_t)v314);
          v331 = vmlaq_laneq_f64(vmulq_n_f64(v329, v314.f64[0]), v330, v314, 1);
          v332 = vmlaq_laneq_f64(vmulq_n_f64(v321, v314.f64[0]), v318, v314, 1);
          v333 = vmlaq_laneq_f64(vmulq_n_f64(v329, v316.f64[0]), v330, v316, 1);
          v334 = vmlaq_laneq_f64(vmulq_n_f64(v321, v316.f64[0]), v318, v316, 1);
          v335 = vmlaq_laneq_f64(vmulq_n_f64(v329, v317.f64[0]), v330, v317, 1);
          v336 = vmlaq_laneq_f64(vmulq_n_f64(v329, v320.f64[0]), v330, v320, 1);
          v337 = vmlaq_laneq_f64(vmulq_n_f64(v321, v317.f64[0]), v318, v317, 1);
          v338 = vmlaq_laneq_f64(vmulq_n_f64(v321, v320.f64[0]), v318, v320, 1);
          v339 = vmlaq_laneq_f64(vmulq_n_f64(v329, v323.f64[0]), v330, v323, 1);
          v340 = vmlaq_laneq_f64(vmulq_n_f64(v321, v323.f64[0]), v318, v323, 1);
          v341 = vmlaq_laneq_f64(vmulq_n_f64(v329, v327.f64[0]), v330, v327, 1);
          v342 = vmlaq_laneq_f64(vmulq_n_f64(v321, v325.f64[0]), v318, v325, 1);
          v343 = vmlaq_laneq_f64(vmulq_n_f64(v321, v327.f64[0]), v318, v327, 1);
          v344 = vmlaq_laneq_f64(vmulq_n_f64(v329, v328->f64[0]), v330, *v328, 1);
          v345 = vmlaq_laneq_f64(vmulq_n_f64(v321, v328->f64[0]), v318, *v328, 1);
          v346 = (float64x2_t *)((char *)v328 + v291);
          v347 = vmlaq_laneq_f64(vmulq_n_f64(v329, v346->f64[0]), v330, *v346, 1);
          v348 = vmlaq_laneq_f64(vmulq_n_f64(v321, v346->f64[0]), v318, *v346, 1);
          v349 = (float64x2_t *)((char *)v346 + v291);
          v350 = vmlaq_laneq_f64(vmulq_n_f64(v329, v349->f64[0]), v330, *v349, 1);
          v351 = vmlaq_laneq_f64(vmulq_n_f64(v321, v349->f64[0]), v318, *v349, 1);
          v352 = (float64x2_t *)((char *)v349 + v291);
          v891 = vmlaq_laneq_f64(vmulq_n_f64(v329, v352->f64[0]), v330, *v352, 1);
          v884 = vmlaq_laneq_f64(vmulq_n_f64(v321, v352->f64[0]), v318, *v352, 1);
          v353 = (float64x2_t *)((char *)v352 + v291);
          v888 = vmlaq_laneq_f64(vmulq_n_f64(v329, v353->f64[0]), v330, *v353, 1);
          v880 = vmlaq_laneq_f64(vmulq_n_f64(v321, v353->f64[0]), v318, *v353, 1);
          v354 = (float64x2_t *)((char *)v353 + v291);
          v876 = vmlaq_laneq_f64(vmulq_n_f64(v329, v354->f64[0]), v330, *v354, 1);
          v872 = vmlaq_laneq_f64(vmulq_n_f64(v321, v354->f64[0]), v318, *v354, 1);
          v355 = (float64x2_t *)((char *)v354 + v291);
          v868 = vmlaq_laneq_f64(vmulq_n_f64(v329, v355->f64[0]), v330, *v355, 1);
          v864 = vmlaq_laneq_f64(vmulq_n_f64(v321, v355->f64[0]), v318, *v355, 1);
          v356 = (float64x2_t *)((char *)v355 + v291);
          v860 = vmlaq_laneq_f64(vmulq_n_f64(v329, v356->f64[0]), v330, *v356, 1);
          v856 = vmlaq_laneq_f64(vmulq_n_f64(v321, v356->f64[0]), v318, *v356, 1);
          v357 = (float64x2_t *)((char *)v356 + v291);
          v852 = vmlaq_laneq_f64(vmulq_n_f64(v329, v357->f64[0]), v330, *v357, 1);
          v849 = vmlaq_laneq_f64(vmulq_n_f64(v321, v357->f64[0]), v318, *v357, 1);
          v358 = (float64x2_t *)((char *)v357 + v291);
          v846 = vmlaq_laneq_f64(vmulq_n_f64(v329, v358->f64[0]), v330, *v358, 1);
          v844 = vmlaq_laneq_f64(vmulq_n_f64(v321, v358->f64[0]), v318, *v358, 1);
          v359 = (float64x2_t *)((char *)v358 + v291);
          v842 = vmlaq_laneq_f64(vmulq_n_f64(v329, v359->f64[0]), v330, *v359, 1);
          v840 = vmlaq_laneq_f64(vmulq_n_f64(v321, v359->f64[0]), v318, *v359, 1);
          v360 = (float64x2_t *)((char *)v359 + v291);
          v838 = vmlaq_laneq_f64(vmulq_n_f64(v329, v360->f64[0]), v330, *v360, 1);
          v836 = vmlaq_laneq_f64(vmulq_n_f64(v321, v360->f64[0]), v318, *v360, 1);
          v361 = *(float64x2_t *)((char *)v360 + 8 * v287);
          v835 = vmlaq_laneq_f64(vmulq_n_f64(v329, v361.f64[0]), v330, v361, 1);
          v834 = vmlaq_laneq_f64(vmulq_n_f64(v321, v361.f64[0]), v318, v361, 1);
          v362 = vsubq_f64(v1334, vmlaq_laneq_f64(vmulq_n_f64(v321, *(double *)v293->i64), v318, *(float64x2_t *)v293, 1));
          v363 = vsubq_f64(v1329, vmlaq_laneq_f64(vmulq_n_f64(v329, *(double *)v293->i64), v330, *(float64x2_t *)v293, 1));
          v364 = vsubq_f64(v1309, v333);
          v365 = vsubq_f64(v1314, v334);
          v366 = vsubq_f64(v1304, v337);
          v367 = vsubq_f64(v1299, v335);
          v368 = vsubq_f64(v1294, v338);
          v369 = vsubq_f64(v1289, v336);
          v370 = vsubq_f64(v1279, v339);
          v371 = vsubq_f64(v1274, v342);
          v372 = vsubq_f64(v1269, vmlaq_laneq_f64(vmulq_n_f64(v329, v325.f64[0]), v330, v325, 1));
          v373 = vsubq_f64(v1259, v341);
          v374 = vsubq_f64(v1249, v344);
          v1423 = vsubq_f64(v1423, v347);
          v1419 = vsubq_f64(v1419, v351);
          v375 = vsubq_f64(v1229, v891);
          v376 = vsubq_f64(v1209, v876);
          v377 = vsubq_f64(v1189, v860);
          v1414 = vsubq_f64(v1414, v849);
          v1409 = vsubq_f64(v1409, v852);
          v1404 = vsubq_f64(v1404, v844);
          v1399 = vsubq_f64(v1399, v846);
          v1394 = vsubq_f64(v1394, v840);
          v1389 = vsubq_f64(v1389, v842);
          v1384 = vsubq_f64(v1384, v836);
          v1379 = vsubq_f64(v1379, v838);
          v1374 = vsubq_f64(v1374, v834);
          v1334 = v362;
          *(float64x2_t *)v286 = v363;
          *(float64x2_t *)(v286 + 16) = v362;
          v1329 = v363;
          v1324 = vsubq_f64(v1324, v332);
          *(float64x2_t *)(v286 + 184) = v1324;
          v1319 = vsubq_f64(v1319, v331);
          *(float64x2_t *)(v286 + 168) = v1319;
          v1314 = v365;
          *(float64x2_t *)(v286 + 336) = v364;
          *(float64x2_t *)(v286 + 352) = v365;
          v1309 = v364;
          v1304 = v366;
          *(float64x2_t *)(v286 + 520) = v366;
          v1299 = v367;
          *(float64x2_t *)(v286 + 504) = v367;
          v1294 = v368;
          *(float64x2_t *)(v286 + 672) = v369;
          *(float64x2_t *)(v286 + 688) = v368;
          v1289 = v369;
          v1284 = vsubq_f64(v1284, v340);
          *(float64x2_t *)(v286 + 840) = v370;
          *(float64x2_t *)(v286 + 856) = v1284;
          v1279 = v370;
          v1274 = v371;
          *(float64x2_t *)(v286 + 1008) = v372;
          *(float64x2_t *)(v286 + 1024) = v371;
          v1269 = v372;
          v1264 = vsubq_f64(v1264, v343);
          *(float64x2_t *)(v286 + 1176) = v373;
          *(float64x2_t *)(v286 + 1192) = v1264;
          v1259 = v373;
          v1249 = v374;
          *(float64x2_t *)(v286 + 1344) = v374;
          v1254 = vsubq_f64(v1254, v345);
          *(float64x2_t *)(v286 + 1360) = v1254;
          v1244 = vsubq_f64(v1244, v348);
          *(float64x2_t *)(v286 + 1512) = v1423;
          *(float64x2_t *)(v286 + 1528) = v1244;
          *(float64x2_t *)(v286 + 1696) = v1419;
          v1239 = vsubq_f64(v1239, v350);
          *(float64x2_t *)(v286 + 1680) = v1239;
          v1234 = vsubq_f64(v1234, v884);
          *(float64x2_t *)(v286 + 1848) = v375;
          *(float64x2_t *)(v286 + 1864) = v1234;
          v1229 = v375;
          v1224 = vsubq_f64(v1224, v880);
          *(float64x2_t *)(v286 + 2032) = v1224;
          v1219 = vsubq_f64(v1219, v888);
          *(float64x2_t *)(v286 + 2016) = v1219;
          v1214 = vsubq_f64(v1214, v872);
          *(float64x2_t *)(v286 + 2184) = v376;
          *(float64x2_t *)(v286 + 2200) = v1214;
          v1209 = v376;
          v1204 = vsubq_f64(v1204, v864);
          *(float64x2_t *)(v286 + 2368) = v1204;
          v1199 = vsubq_f64(v1199, v868);
          *(float64x2_t *)(v286 + 2352) = v1199;
          v1194 = vsubq_f64(v1194, v856);
          *(float64x2_t *)(v286 + 2520) = v377;
          *(float64x2_t *)(v286 + 2536) = v1194;
          v1189 = v377;
          *(float64x2_t *)(v286 + 2704) = v1414;
          *(float64x2_t *)(v286 + 2688) = v1409;
          *(float64x2_t *)(v286 + 2856) = v1399;
          *(float64x2_t *)(v286 + 2872) = v1404;
          *(float64x2_t *)(v286 + 3040) = v1394;
          *(float64x2_t *)(v286 + 3024) = v1389;
          *(float64x2_t *)(v286 + 3192) = v1379;
          *(float64x2_t *)(v286 + 3208) = v1384;
          v1184 = vsubq_f64(v1184, v835);
          *(float64x2_t *)(v286 + 3360) = v1184;
          *(float64x2_t *)(v286 + 3376) = v1374;
          v378 = (int64x2_t *)&v288[(4 * v287 + v290)];
          v379 = (float64x2_t)v378[v287];
          v380 = *(float64x2_t *)((char *)v378 + 8 * v287);
          v381 = *(float64x2_t *)((char *)v378 + 24 * v287);
          *(_QWORD *)&v363.f64[0] = vdupq_laneq_s64((int64x2_t)v379, 1).u64[0];
          v382 = (float64x2_t)v378[2 * v287];
          v383 = *(float64x2_t *)((char *)v378 + 40 * v287);
          v384 = (float64x2_t)v378[3 * v287];
          v385 = (float64x2_t)vzip1q_s64((int64x2_t)v379, (int64x2_t)v381);
          v386 = *(float64x2_t *)((char *)v378 + 56 * v287);
          *(_QWORD *)&v363.f64[1] = v378->i64[v292 + 1];
          v387 = (float64x2_t)v378[4 * v287];
          v388 = (float64x2_t)vzip1q_s64(*v378, (int64x2_t)v380);
          v389 = (float64x2_t)vzip2q_s64(*v378, (int64x2_t)v380);
          v390 = vmlaq_laneq_f64(vmulq_n_f64(v388, v381.f64[0]), v389, v381, 1);
          v391 = vmlaq_laneq_f64(vmulq_n_f64(v385, v381.f64[0]), v363, v381, 1);
          v392 = vmlaq_laneq_f64(vmulq_n_f64(v388, v382.f64[0]), v389, v382, 1);
          v393 = vmlaq_laneq_f64(vmulq_n_f64(v385, v382.f64[0]), v363, v382, 1);
          v394 = vmlaq_laneq_f64(vmulq_n_f64(v388, v383.f64[0]), v389, v383, 1);
          v395 = vmlaq_laneq_f64(vmulq_n_f64(v388, v384.f64[0]), v389, v384, 1);
          v396 = vmlaq_laneq_f64(vmulq_n_f64(v385, v383.f64[0]), v363, v383, 1);
          v397 = vmlaq_laneq_f64(vmulq_n_f64(v385, v384.f64[0]), v363, v384, 1);
          v398 = vmlaq_laneq_f64(vmulq_n_f64(v388, v386.f64[0]), v389, v386, 1);
          v399 = vmlaq_laneq_f64(vmulq_n_f64(v385, v386.f64[0]), v363, v386, 1);
          v400 = vmlaq_laneq_f64(vmulq_n_f64(v388, v387.f64[0]), v389, v387, 1);
          v401 = vmlaq_laneq_f64(vmulq_n_f64(v385, v387.f64[0]), v363, v387, 1);
          v402 = *(float64x2_t *)((char *)v378 + 72 * v287);
          v403 = vmlaq_laneq_f64(vmulq_n_f64(v388, v402.f64[0]), v389, v402, 1);
          v892 = vmlaq_laneq_f64(vmulq_n_f64(v385, v402.f64[0]), v363, v402, 1);
          v404 = (float64x2_t)v378[5 * v287];
          v889 = vmlaq_laneq_f64(vmulq_n_f64(v388, v404.f64[0]), v389, v404, 1);
          v885 = vmlaq_laneq_f64(vmulq_n_f64(v385, v404.f64[0]), v363, v404, 1);
          v405 = *(float64x2_t *)((char *)v378 + 88 * v287);
          v881 = vmlaq_laneq_f64(vmulq_n_f64(v388, v405.f64[0]), v389, v405, 1);
          v877 = vmlaq_laneq_f64(vmulq_n_f64(v385, v405.f64[0]), v363, v405, 1);
          v406 = (float64x2_t)v378[6 * v287];
          v873 = vmlaq_laneq_f64(vmulq_n_f64(v388, v406.f64[0]), v389, v406, 1);
          v869 = vmlaq_laneq_f64(vmulq_n_f64(v385, v406.f64[0]), v363, v406, 1);
          v407 = *(float64x2_t *)((char *)v378 + 104 * v287);
          v865 = vmlaq_laneq_f64(vmulq_n_f64(v388, v407.f64[0]), v389, v407, 1);
          v861 = vmlaq_laneq_f64(vmulq_n_f64(v385, v407.f64[0]), v363, v407, 1);
          v408 = (float64x2_t)v378[7 * v287];
          v857 = vmlaq_laneq_f64(vmulq_n_f64(v388, v408.f64[0]), v389, v408, 1);
          v853 = vmlaq_laneq_f64(vmulq_n_f64(v385, v408.f64[0]), v363, v408, 1);
          v409 = *(float64x2_t *)((char *)v378 + 120 * v287);
          v850 = vmlaq_laneq_f64(vmulq_n_f64(v388, v409.f64[0]), v389, v409, 1);
          v847 = vmlaq_laneq_f64(vmulq_n_f64(v385, v409.f64[0]), v363, v409, 1);
          v410 = (float64x2_t)v378[8 * v287];
          v411 = vsubq_f64(v1174, vmlaq_laneq_f64(vmulq_n_f64(v388, *(double *)v378->i64), v389, *(float64x2_t *)v378, 1));
          v412 = vsubq_f64(v1164, vmlaq_laneq_f64(vmulq_n_f64(v388, v380.f64[0]), v389, v380, 1));
          v413 = vsubq_f64(v1154, vmlaq_laneq_f64(vmulq_n_f64(v388, v379.f64[0]), v389, v379, 1));
          v414 = vsubq_f64(v1144, v390);
          v1369 = vsubq_f64(v1369, v394);
          v415 = vsubq_f64(v1119, v395);
          v416 = vsubq_f64(v1109, v398);
          v417 = vsubq_f64(v1114, v399);
          v1364 = vsubq_f64(v1364, v400);
          v418 = vsubq_f64(v1094, v403);
          v1359 = vsubq_f64(v1359, v881);
          v419 = vsubq_f64(v1059, v865);
          v420 = vsubq_f64(v1039, v850);
          v1179 = vsubq_f64(v1179, vmlaq_laneq_f64(vmulq_n_f64(v385, *(double *)v378->i64), v363, *(float64x2_t *)v378, 1));
          *(float64x2_t *)(v286 + 704) = v411;
          *(float64x2_t *)(v286 + 720) = v1179;
          v1174 = v411;
          v1169 = vsubq_f64(v1169, vmlaq_laneq_f64(vmulq_n_f64(v385, v380.f64[0]), v363, v380, 1));
          *(float64x2_t *)(v286 + 872) = v412;
          *(float64x2_t *)(v286 + 888) = v1169;
          v1164 = v412;
          v1159 = vsubq_f64(v1159, vmlaq_laneq_f64(vmulq_n_f64(v385, v379.f64[0]), v363, v379, 1));
          *(float64x2_t *)(v286 + 1040) = v413;
          *(float64x2_t *)(v286 + 1056) = v1159;
          v1154 = v413;
          v1149 = vsubq_f64(v1149, v391);
          *(float64x2_t *)(v286 + 1208) = v414;
          *(float64x2_t *)(v286 + 1224) = v1149;
          v1144 = v414;
          v1134 = vsubq_f64(v1134, v392);
          *(float64x2_t *)(v286 + 1376) = v1134;
          v1139 = vsubq_f64(v1139, v393);
          *(float64x2_t *)(v286 + 1392) = v1139;
          v1129 = vsubq_f64(v1129, v396);
          *(float64x2_t *)(v286 + 1544) = v1369;
          *(float64x2_t *)(v286 + 1560) = v1129;
          v1124 = vsubq_f64(v1124, v397);
          *(float64x2_t *)(v286 + 1728) = v1124;
          v1119 = v415;
          *(float64x2_t *)(v286 + 1712) = v415;
          v1114 = v417;
          *(float64x2_t *)(v286 + 1880) = v416;
          *(float64x2_t *)(v286 + 1896) = v417;
          v1109 = v416;
          v1104 = vsubq_f64(v1104, v401);
          *(float64x2_t *)(v286 + 2064) = v1104;
          *(float64x2_t *)(v286 + 2048) = v1364;
          v1099 = vsubq_f64(v1099, v892);
          *(float64x2_t *)(v286 + 2216) = v418;
          *(float64x2_t *)(v286 + 2232) = v1099;
          v1094 = v418;
          v1084 = vsubq_f64(v1084, v889);
          *(float64x2_t *)(v286 + 2384) = v1084;
          v1089 = vsubq_f64(v1089, v885);
          *(float64x2_t *)(v286 + 2400) = v1089;
          v1079 = vsubq_f64(v1079, v877);
          *(float64x2_t *)(v286 + 2552) = v1359;
          *(float64x2_t *)(v286 + 2568) = v1079;
          v1074 = vsubq_f64(v1074, v869);
          *(float64x2_t *)(v286 + 2736) = v1074;
          v1069 = vsubq_f64(v1069, v873);
          *(float64x2_t *)(v286 + 2720) = v1069;
          v1064 = vsubq_f64(v1064, v861);
          *(float64x2_t *)(v286 + 2888) = v419;
          *(float64x2_t *)(v286 + 2904) = v1064;
          v1059 = v419;
          v1054 = vsubq_f64(v1054, v853);
          *(float64x2_t *)(v286 + 3072) = v1054;
          v1049 = vsubq_f64(v1049, v857);
          *(float64x2_t *)(v286 + 3056) = v1049;
          v1044 = vsubq_f64(v1044, v847);
          *(float64x2_t *)(v286 + 3224) = v420;
          *(float64x2_t *)(v286 + 3240) = v1044;
          v1039 = v420;
          v1029 = vsubq_f64(v1029, vmlaq_laneq_f64(vmulq_n_f64(v388, v410.f64[0]), v389, v410, 1));
          *(float64x2_t *)(v286 + 3392) = v1029;
          v1034 = vsubq_f64(v1034, vmlaq_laneq_f64(vmulq_n_f64(v385, v410.f64[0]), v363, v410, 1));
          *(float64x2_t *)(v286 + 3408) = v1034;
          v421 = (int64x2_t *)&v288[(8 * v287 + v290)];
          v422 = (float64x2_t)v421[v287];
          v423 = *(float64x2_t *)((char *)v421 + 8 * v287);
          v424 = *(float64x2_t *)((char *)v421 + 24 * v287);
          *(_QWORD *)&v380.f64[0] = vdupq_laneq_s64((int64x2_t)v422, 1).u64[0];
          v425 = (float64x2_t)v421[2 * v287];
          v426 = *(float64x2_t *)((char *)v421 + 40 * v287);
          v427 = (float64x2_t)v421[3 * v287];
          v428 = (float64x2_t)vzip1q_s64((int64x2_t)v422, (int64x2_t)v424);
          v429 = *(float64x2_t *)((char *)v421 + 56 * v287);
          v430 = (float64x2_t)v421[4 * v287];
          *(_QWORD *)&v380.f64[1] = v421->i64[v292 + 1];
          v431 = (float64x2_t)vzip1q_s64(*v421, (int64x2_t)v423);
          v432 = (float64x2_t)vzip2q_s64(*v421, (int64x2_t)v423);
          v433 = vmlaq_laneq_f64(vmulq_n_f64(v431, *(double *)v421->i64), v432, *(float64x2_t *)v421, 1);
          v434 = vmlaq_laneq_f64(vmulq_n_f64(v428, *(double *)v421->i64), v380, *(float64x2_t *)v421, 1);
          v435 = vmlaq_laneq_f64(vmulq_n_f64(v431, v423.f64[0]), v432, v423, 1);
          v436 = vmlaq_laneq_f64(vmulq_n_f64(v431, v422.f64[0]), v432, v422, 1);
          v437 = vmlaq_laneq_f64(vmulq_n_f64(v428, v423.f64[0]), v380, v423, 1);
          v438 = vmlaq_laneq_f64(vmulq_n_f64(v428, v422.f64[0]), v380, v422, 1);
          v439 = vmlaq_laneq_f64(vmulq_n_f64(v431, v424.f64[0]), v432, v424, 1);
          v440 = vmlaq_laneq_f64(vmulq_n_f64(v428, v424.f64[0]), v380, v424, 1);
          v441 = vmlaq_laneq_f64(vmulq_n_f64(v431, v425.f64[0]), v432, v425, 1);
          v442 = vmlaq_laneq_f64(vmulq_n_f64(v431, v426.f64[0]), v432, v426, 1);
          v443 = vmlaq_laneq_f64(vmulq_n_f64(v428, v425.f64[0]), v380, v425, 1);
          v444 = vmlaq_laneq_f64(vmulq_n_f64(v428, v426.f64[0]), v380, v426, 1);
          v445 = vmlaq_laneq_f64(vmulq_n_f64(v431, v427.f64[0]), v432, v427, 1);
          v446 = vmlaq_laneq_f64(vmulq_n_f64(v428, v427.f64[0]), v380, v427, 1);
          v447 = vmlaq_laneq_f64(vmulq_n_f64(v431, v429.f64[0]), v432, v429, 1);
          v448 = vmlaq_laneq_f64(vmulq_n_f64(v428, v429.f64[0]), v380, v429, 1);
          v449 = vmlaq_laneq_f64(vmulq_n_f64(v431, v430.f64[0]), v432, v430, 1);
          v450 = vmlaq_laneq_f64(vmulq_n_f64(v428, v430.f64[0]), v380, v430, 1);
          v451 = *(float64x2_t *)((char *)v421 + 72 * v287);
          v452 = vmlaq_laneq_f64(vmulq_n_f64(v431, v451.f64[0]), v432, v451, 1);
          v453 = vmlaq_laneq_f64(vmulq_n_f64(v428, v451.f64[0]), v380, v451, 1);
          v454 = (float64x2_t)v421[5 * v287];
          v455 = vmlaq_laneq_f64(vmulq_n_f64(v431, v454.f64[0]), v432, v454, 1);
          v456 = vmlaq_laneq_f64(vmulq_n_f64(v428, v454.f64[0]), v380, v454, 1);
          v457 = *(float64x2_t *)((char *)v421 + 88 * v287);
          v458 = vmlaq_laneq_f64(vmulq_n_f64(v431, v457.f64[0]), v432, v457, 1);
          v459 = (float64x2_t)v421[6 * v287];
          v460 = vmlaq_laneq_f64(vmulq_n_f64(v431, v459.f64[0]), v432, v459, 1);
          v461 = vmlaq_laneq_f64(vmulq_n_f64(v428, v457.f64[0]), v380, v457, 1);
          v462 = vmlaq_laneq_f64(vmulq_n_f64(v428, v459.f64[0]), v380, v459, 1);
          v295 = vsubq_f64(v938, v433);
          v294 = vsubq_f64(v940, v434);
          v296 = vsubq_f64(v936, v435);
          v463 = vsubq_f64(v1018, v436);
          v464 = vsubq_f64(v1021, v438);
          v465 = vsubq_f64(v1014, v439);
          v466 = vsubq_f64(v1006, v442);
          v467 = vsubq_f64(v1008, v444);
          v468 = vsubq_f64(v1002, v445);
          v469 = vsubq_f64(v1000, v447);
          v1354 = vsubq_f64(v1354, v448);
          v1349 = vsubq_f64(v1349, v450);
          v470 = vsubq_f64(v996, v452);
          v297 = vsubq_f64(v934, v453);
          v1344 = vsubq_f64(v1344, v455);
          v298 = vsubq_f64(v932, v456);
          v1339 = vsubq_f64(v1339, v458);
          v299 = vsubq_f64(v930, v461);
          *(float64x2_t *)(v286 + 1408) = v295;
          *(float64x2_t *)(v286 + 1424) = v294;
          v1025 = vsubq_f64(v1025, v437);
          *(float64x2_t *)(v286 + 1576) = v296;
          *(float64x2_t *)(v286 + 1592) = v1025;
          v1021 = v464;
          *(float64x2_t *)(v286 + 1760) = v464;
          v1018 = v463;
          *(float64x2_t *)(v286 + 1744) = v463;
          v1016 = vsubq_f64(v1016, v440);
          *(float64x2_t *)(v286 + 1912) = v465;
          *(float64x2_t *)(v286 + 1928) = v1016;
          v1014 = v465;
          v1012 = vsubq_f64(v1012, v443);
          *(float64x2_t *)(v286 + 2096) = v1012;
          v1010 = vsubq_f64(v1010, v441);
          *(float64x2_t *)(v286 + 2080) = v1010;
          v1008 = v467;
          *(float64x2_t *)(v286 + 2248) = v466;
          *(float64x2_t *)(v286 + 2264) = v467;
          v1006 = v466;
          v1002 = v468;
          *(float64x2_t *)(v286 + 2416) = v468;
          v1004 = vsubq_f64(v1004, v446);
          *(float64x2_t *)(v286 + 2432) = v1004;
          *(float64x2_t *)(v286 + 2584) = v469;
          *(float64x2_t *)(v286 + 2600) = v1354;
          v1000 = v469;
          *(float64x2_t *)(v286 + 2768) = v1349;
          v998 = vsubq_f64(v998, v449);
          *(float64x2_t *)(v286 + 2752) = v998;
          *(float64x2_t *)(v286 + 2920) = v470;
          *(float64x2_t *)(v286 + 2936) = v297;
          v996 = v470;
          *(float64x2_t *)(v286 + 3104) = v298;
          *(float64x2_t *)(v286 + 3088) = v1344;
          *(float64x2_t *)(v286 + 3256) = v1339;
          *(float64x2_t *)(v286 + 3272) = v299;
          v992 = vsubq_f64(v992, v460);
          *(float64x2_t *)(v286 + 3424) = v992;
          v994 = vsubq_f64(v994, v462);
          *(float64x2_t *)(v286 + 3440) = v994;
          v471 = (int64x2_t *)&v288[(12 * v287 + v290)];
          v472 = (float64x2_t)v471[4 * v287];
          v473 = *(float64x2_t *)((char *)v471 + 8 * v287);
          v474 = (float64x2_t)v471[v287];
          *(_QWORD *)&v460.f64[0] = vdupq_laneq_s64((int64x2_t)v474, 1).u64[0];
          v475 = *(float64x2_t *)((char *)v471 + 24 * v287);
          v476 = (float64x2_t)v471[2 * v287];
          v477 = *(float64x2_t *)((char *)v471 + 40 * v287);
          v478 = (float64x2_t)vzip1q_s64((int64x2_t)v474, (int64x2_t)v475);
          v479 = (float64x2_t)v471[3 * v287];
          v480 = *(float64x2_t *)((char *)v471 + 56 * v287);
          *(_QWORD *)&v460.f64[1] = v471->i64[v292 + 1];
          v481 = (float64x2_t)vzip1q_s64(*v471, (int64x2_t)v473);
          v482 = (float64x2_t)vzip2q_s64(*v471, (int64x2_t)v473);
          v483 = vmlaq_laneq_f64(vmulq_n_f64(v481, *(double *)v471->i64), v482, *(float64x2_t *)v471, 1);
          v484 = vmlaq_laneq_f64(vmulq_n_f64(v478, *(double *)v471->i64), v460, *(float64x2_t *)v471, 1);
          v485 = vmlaq_laneq_f64(vmulq_n_f64(v481, v473.f64[0]), v482, v473, 1);
          v486 = vmlaq_laneq_f64(vmulq_n_f64(v481, v474.f64[0]), v482, v474, 1);
          v487 = vmlaq_laneq_f64(vmulq_n_f64(v478, v473.f64[0]), v460, v473, 1);
          v488 = vmlaq_laneq_f64(vmulq_n_f64(v478, v474.f64[0]), v460, v474, 1);
          v489 = vmlaq_laneq_f64(vmulq_n_f64(v481, v475.f64[0]), v482, v475, 1);
          v490 = vmlaq_laneq_f64(vmulq_n_f64(v478, v475.f64[0]), v460, v475, 1);
          _Q4 = vmlaq_laneq_f64(vmulq_n_f64(v481, v476.f64[0]), v482, v476, 1);
          v492 = vmlaq_laneq_f64(vmulq_n_f64(v481, v477.f64[0]), v482, v477, 1);
          v493 = vmlaq_laneq_f64(vmulq_n_f64(v478, v476.f64[0]), v460, v476, 1);
          v494 = vmlaq_laneq_f64(vmulq_n_f64(v478, v477.f64[0]), v460, v477, 1);
          v495 = vmlaq_laneq_f64(vmulq_n_f64(v481, v479.f64[0]), v482, v479, 1);
          v496 = vmlaq_laneq_f64(vmulq_n_f64(v478, v479.f64[0]), v460, v479, 1);
          v497 = vmlaq_laneq_f64(vmulq_n_f64(v481, v480.f64[0]), v482, v480, 1);
          _Q19 = vmlaq_laneq_f64(vmulq_n_f64(v481, v472.f64[0]), v482, v472, 1);
          _Q21 = vmlaq_laneq_f64(vmulq_n_f64(v478, v480.f64[0]), v460, v480, 1);
          _Q16 = vmlaq_laneq_f64(vmulq_n_f64(v478, v472.f64[0]), v460, v472, 1);
          v501 = vsubq_f64(v988, v483);
          v502 = vsubq_f64(v984, v485);
          v503 = vsubq_f64(v986, v487);
          v504 = vsubq_f64(v982, v488);
          v505 = vsubq_f64(v976, v489);
          v506 = vsubq_f64(v978, v490);
          v507 = vsubq_f64(v968, v492);
          v508 = vsubq_f64(v960, v497);
          v990 = vsubq_f64(v990, v484);
          *(float64x2_t *)(v286 + 2128) = v990;
          v988 = v501;
          *(float64x2_t *)(v286 + 2112) = v501;
          v986 = v503;
          *(float64x2_t *)(v286 + 2280) = v502;
          *(float64x2_t *)(v286 + 2296) = v503;
          v984 = v502;
          v982 = v504;
          *(float64x2_t *)(v286 + 2464) = v504;
          v980 = vsubq_f64(v980, v486);
          *(float64x2_t *)(v286 + 2448) = v980;
          v978 = v506;
          *(float64x2_t *)(v286 + 2616) = v505;
          *(float64x2_t *)(v286 + 2632) = v506;
          v976 = v505;
          v972 = vsubq_f64(v972, _Q4);
          *(float64x2_t *)(v286 + 2784) = v972;
          v974 = vsubq_f64(v974, v493);
          *(float64x2_t *)(v286 + 2800) = v974;
          v970 = vsubq_f64(v970, v494);
          *(float64x2_t *)(v286 + 2952) = v507;
          *(float64x2_t *)(v286 + 2968) = v970;
          v968 = v507;
          v966 = vsubq_f64(v966, v496);
          *(float64x2_t *)(v286 + 3136) = v966;
          v964 = vsubq_f64(v964, v495);
          *(float64x2_t *)(v286 + 3120) = v964;
          v962 = vsubq_f64(v962, _Q21);
          *(float64x2_t *)(v286 + 3288) = v508;
          *(float64x2_t *)(v286 + 3304) = v962;
          v960 = v508;
          v958 = vsubq_f64(v958, _Q16);
          *(float64x2_t *)(v286 + 3472) = v958;
          v956 = vsubq_f64(v956, _Q19);
          *(float64x2_t *)(v286 + 3456) = v956;
          v509 = (int64x2_t *)&v288[(16 * v287 + v290)];
          _Q2 = *(float64x2_t *)((char *)v509 + 8 * v287);
          v511 = (float64x2_t)v509[v287];
          v512 = *(float64x2_t *)((char *)v509 + 24 * v287);
          _Q24 = (float64x2_t)v509[2 * v287];
          v514 = (float64x2_t)vzip1q_s64((int64x2_t)v511, (int64x2_t)v512);
          *(_QWORD *)&v496.f64[0] = vdupq_laneq_s64((int64x2_t)v511, 1).u64[0];
          *(_QWORD *)&v496.f64[1] = v509->i64[v292 + 1];
          v515 = (float64x2_t)vzip1q_s64(*v509, (int64x2_t)_Q2);
          v516 = (float64x2_t)vzip2q_s64(*v509, (int64x2_t)_Q2);
          _Q22 = vmulq_f64(_Q24, *(float64x2_t *)v509);
          v518 = vmlaq_laneq_f64(vmulq_n_f64(v515, *(double *)v509->i64), v516, *(float64x2_t *)v509, 1);
          *(_QWORD *)&_Q16.f64[0] = v509->i64[1];
          __asm { FMLA            D22, D16, V24.D[1] }
          _Q16 = vmulq_f64(_Q24, _Q2);
          v520 = vmlaq_laneq_f64(vmulq_n_f64(v515, _Q2.f64[0]), v516, _Q2, 1);
          *(_QWORD *)&_Q19.f64[0] = v509->i64[(unint64_t)v291 / 8 + 1];
          __asm { FMLA            D16, D19, V24.D[1] }
          _Q19 = vmulq_f64(_Q24, v511);
          *(_QWORD *)&_Q21.f64[0] = v509[v287].i64[1];
          __asm { FMLA            D19, D21, V24.D[1] }
          v522 = vmlaq_laneq_f64(vmulq_n_f64(v514, *(double *)v509->i64), v496, *(float64x2_t *)v509, 1);
          _Q23 = vmulq_f64(_Q24, v512);
          _Q4.f64[0] = v496.f64[1];
          __asm { FMLA            D23, D4, V24.D[1] }
          v524 = vmlaq_laneq_f64(vmulq_n_f64(v515, v511.f64[0]), v516, v511, 1);
          v525 = vmlaq_laneq_f64(vmulq_n_f64(v514, _Q2.f64[0]), v496, _Q2, 1);
          v526 = vmlaq_laneq_f64(vmulq_n_f64(v515, v512.f64[0]), v516, v512, 1);
          *(_QWORD *)&_Q4.f64[0] = v924;
          v527 = vmlaq_laneq_f64(vmulq_n_f64(v515, _Q24.f64[0]), v516, _Q24, 1);
          v528 = vmlaq_laneq_f64(vmulq_n_f64(v514, v511.f64[0]), v496, v511, 1);
          *(_QWORD *)&v511.f64[0] = v926;
          *(_QWORD *)&v511.f64[1] = v942;
          *(_QWORD *)&_Q4.f64[1] = v944;
          v529 = vmlaq_laneq_f64(vmulq_n_f64(v514, v512.f64[0]), v496, v512, 1);
          *(_QWORD *)&v448.f64[0] = v954.i64[0];
          *(_QWORD *)&v448.f64[1] = v946;
          *(_QWORD *)&v458.f64[0] = v952.i64[0];
          *(_QWORD *)&v458.f64[1] = v894;
          v530 = vmlaq_laneq_f64(vmulq_n_f64(v514, _Q24.f64[0]), v496, _Q24, 1);
          *(_QWORD *)&v496.f64[0] = v918;
          *(_QWORD *)&v496.f64[1] = v896;
          _Q1 = vmulq_f64(_Q24, _Q24);
          *(_QWORD *)&v450.f64[0] = v950.i64[0];
          *(_QWORD *)&v450.f64[1] = v897;
          *(_QWORD *)&_Q2.f64[0] = v509[2 * v287].i64[1];
          __asm { FMLA            D1, D2, V24.D[1] }
          *(_QWORD *)&_Q24.f64[0] = v914;
          *(_QWORD *)&_Q24.f64[1] = v902;
          *(_QWORD *)&v455.f64[0] = v948;
          *(_QWORD *)&v455.f64[1] = v904;
          v301 = (int8x16_t)vsubq_f64(_Q4, v518);
          v18 = vsubq_f64(v928, _Q22);
          *(_QWORD *)&_Q22.f64[0] = v910;
          *(_QWORD *)&v518.f64[0] = v912;
          *(_QWORD *)&v518.f64[1] = v900;
          *(_QWORD *)&_Q22.f64[1] = v906;
          v300 = (int8x16_t)vsubq_f64(v511, v522);
          v532 = (int8x16_t)vsubq_f64(v448, v525);
          v533 = (int8x16_t)vsubq_f64(v458, v520);
          *(int8x16_t *)(v286 + 2816) = v301;
          v19 = vsubq_f64(v922, _Q16);
          v303 = (int8x16_t)vsubq_f64(v496, v528);
          v942 = vextq_s8(v300, v300, 8uLL).u64[0];
          v944 = vextq_s8(v301, v301, 8uLL).u64[0];
          v534 = (int8x16_t)vsubq_f64(v450, v524);
          v302 = vextq_s8(v533, v533, 8uLL).u64[0];
          v21 = vsubq_f64(v920, _Q19);
          v306 = (int8x16_t)vsubq_f64(_Q24, v529);
          v946 = vextq_s8(v532, v532, 8uLL).u64[0];
          v304 = vextq_s8(v303, v303, 8uLL).u64[0];
          v535 = (int8x16_t)vsubq_f64(v455, v526);
          v305 = vextq_s8(v534, v534, 8uLL).u64[0];
          v20 = vsubq_f64(v916, _Q23);
          v309 = (int8x16_t)vsubq_f64(v518, v530);
          v307 = vextq_s8(v306, v306, 8uLL).u64[0];
          v308 = vextq_s8(v535, v535, 8uLL).u64[0];
          v313 = (int8x16_t)vsubq_f64(v908, _Q1);
          *(float64_t *)(v286 + 2848) = v18.f64[0];
          v952.i64[0] = v533.i64[0];
          *(int8x16_t *)(v286 + 2984) = v533;
          *(int8x16_t *)(v286 + 3000) = v532;
          *(float64_t *)(v286 + 3016) = v19.f64[0];
          v950.i64[0] = v534.i64[0];
          *(int8x16_t *)(v286 + 3152) = v534;
          *(int8x16_t *)(v286 + 3168) = v303;
          *(float64_t *)(v286 + 3184) = v21.f64[0];
          v948 = v535.i64[0];
          *(int8x16_t *)(v286 + 3320) = v535;
          *(int8x16_t *)(v286 + 3336) = v306;
          *(float64_t *)(v286 + 3352) = v20.f64[0];
          *(_QWORD *)(v286 + 3520) = v313.i64[0];
          v310 = (int8x16_t)vsubq_f64(_Q22, v527);
          *(int8x16_t *)(v286 + 3488) = v310;
          *(int8x16_t *)(v286 + 3504) = v309;
          v312 = vextq_s8(v310, v310, 8uLL).u64[0];
          LODWORD(v509) = v290 + 4;
          v290 += 2;
          ++v293;
          v311 = vextq_s8(v309, v309, 8uLL).u64[0];
          *(int8x16_t *)(v286 + 2832) = v300;
          v954.i64[0] = v532.i64[0];
        }
        while (v509 <= v287);
        v289 = *(_DWORD *)(v4 + 16);
      }
      if ((v289 & 1) != 0)
      {
        LODWORD(v1543) = 1;
        HIDWORD(v1543) = v287;
        p_p_category = (char ***)&v288[(v287 - 1)];
        LODWORD(v1545) = v287 - 1;
        category = (char *)&v1543;
        *(_QWORD *)&v1430.f64[1] = &category;
        *(_QWORD *)&v1431 = &v1543;
        *((_QWORD *)&v1431 + 1) = 0x3FF0000000000000;
        if (v288 == (double *)v286)
        {
          p_p = (double *)&__p;
          sub_20FBAAA60((double *)&__p, (uint64_t)&v1430);
          if (v286 >= (unint64_t)&v1552 || (unint64_t)&__p >= v286 + 3528)
          {
            v801 = 0;
            p_p = (double *)&v1551;
            v799 = 440;
            do
            {
              v802 = (float64x2_t *)(v286 + v801);
              v803 = vsubq_f64(*(float64x2_t *)(v286 + v801 + 16), *(float64x2_t *)&__p.__r_.__value_.__r.__words[v801 / 8 + 2]);
              *v802 = vsubq_f64(*(float64x2_t *)(v286 + v801), *(float64x2_t *)((char *)&__p.__r_.__value_.__l.__data_ + v801));
              v802[1] = v803;
              v801 += 32;
            }
            while (v801 != 3520);
          }
          else
          {
            v799 = 0;
          }
          v804 = 8 * v799;
          do
          {
            v805 = *p_p++;
            *(double *)(v286 + v804) = *(double *)(v286 + v804) - v805;
            v804 += 8;
          }
          while (v804 != 3528);
        }
        else
        {
          sub_20E8BE654(1, 0, 21, 21, 1, &v288[(v287 - 1)], v287, &v288[(v287 - 1)], -1.0, 1.0, v287, (double *)v286, 21);
        }
      }
      break;
    case 15:
      v23 = *(_QWORD *)v2;
      v24 = *(unsigned int *)(v4 + 16);
      v25 = *(double **)v4;
      LOBYTE(v26) = *(_DWORD *)(v4 + 16);
      if (v24 >= 2)
      {
        v27 = 0;
        v1341 = *(float64x2_t *)(v23 + 16);
        v1336 = *(float64x2_t *)v23;
        v1331 = *(float64x2_t *)(v23 + 136);
        v1326 = *(float64x2_t *)(v23 + 120);
        v1321 = *(float64x2_t *)(v23 + 256);
        v1316 = *(float64x2_t *)(v23 + 240);
        v1311 = *(float64x2_t *)(v23 + 376);
        v1306 = *(float64x2_t *)(v23 + 360);
        v28 = 8 * v24;
        v1301 = *(float64x2_t *)(v23 + 496);
        v1296 = *(float64x2_t *)(v23 + 480);
        v29 = *(float64x2_t *)(v23 + 600);
        v30 = *(float64x2_t *)(v23 + 616);
        v31 = *(float64x2_t *)(v23 + 720);
        v1126 = *(float64x2_t *)(v23 + 736);
        v32 = *(float64x2_t *)(v23 + 856);
        v1291 = *(float64x2_t *)(v23 + 840);
        v33 = *(float64x2_t *)(v23 + 960);
        v1286 = *(float64x2_t *)(v23 + 976);
        v34 = *(float64x2_t *)(v23 + 1080);
        v1281 = *(float64x2_t *)(v23 + 1096);
        v1276 = *(float64x2_t *)(v23 + 1216);
        v1271 = *(float64x2_t *)(v23 + 1200);
        v1266 = *(float64x2_t *)(v23 + 1336);
        v1261 = *(float64x2_t *)(v23 + 1320);
        v1256 = *(float64x2_t *)(v23 + 1456);
        v1251 = *(float64x2_t *)(v23 + 1440);
        v1246 = *(float64x2_t *)(v23 + 1576);
        v1241 = *(float64x2_t *)(v23 + 1560);
        v1236 = *(float64x2_t *)(v23 + 1696);
        v1231 = *(float64x2_t *)(v23 + 1680);
        v1226 = *(float64x2_t *)(v23 + 528);
        v1221 = *(float64x2_t *)(v23 + 512);
        v35 = 3 * v24;
        v36 = *(int64x2_t **)v4;
        v37 = *(float64x2_t *)(v23 + 648);
        v1216 = *(float64x2_t *)(v23 + 632);
        v38 = *(float64x2_t *)(v23 + 768);
        v1211 = *(float64x2_t *)(v23 + 752);
        v39 = *(float64x2_t *)(v23 + 888);
        v1206 = *(float64x2_t *)(v23 + 872);
        v40 = *(float64x2_t *)(v23 + 1008);
        v1201 = *(float64x2_t *)(v23 + 992);
        v41 = *(float64x2_t *)(v23 + 1128);
        v1196 = *(float64x2_t *)(v23 + 1112);
        v42 = *(float64x2_t *)(v23 + 1248);
        v1191 = *(float64x2_t *)(v23 + 1232);
        v43 = *(float64x2_t *)(v23 + 1368);
        v1186 = *(float64x2_t *)(v23 + 1352);
        v44 = *(float64x2_t *)(v23 + 1488);
        v1181 = *(float64x2_t *)(v23 + 1472);
        v1176 = *(float64x2_t *)(v23 + 1608);
        v1171 = *(float64x2_t *)(v23 + 1592);
        v1166 = *(float64x2_t *)(v23 + 1728);
        v1161 = *(float64x2_t *)(v23 + 1712);
        v45 = *(float64x2_t *)(v23 + 1040);
        v46 = *(float64x2_t *)(v23 + 1024);
        v48 = *(float64x2_t *)(v23 + 1144);
        v47 = *(float64x2_t *)(v23 + 1160);
        v49 = *(float64x2_t *)(v23 + 1280);
        v1156 = *(float64x2_t *)(v23 + 1264);
        v50 = *(float64x2_t *)(v23 + 1400);
        v1151 = *(float64x2_t *)(v23 + 1384);
        v51 = *(float64x2_t *)(v23 + 1520);
        v1146 = *(float64x2_t *)(v23 + 1504);
        v52 = *(float64x2_t *)(v23 + 1640);
        v1141 = *(float64x2_t *)(v23 + 1624);
        v53 = *(float64x2_t *)(v23 + 1760);
        v1136 = *(float64x2_t *)(v23 + 1744);
        v18.f64[0] = *(float64_t *)(v23 + 1552);
        v54 = *(int8x16_t *)(v23 + 1536);
        v55 = (float64x2_t)vextq_s8(v54, v54, 8uLL);
        v1131 = *(_QWORD *)&v55.f64[0];
        v55.f64[0] = *(float64_t *)(v23 + 1672);
        v56 = *(int8x16_t *)(v23 + 1656);
        v57 = vextq_s8(v56, v56, 8uLL).u64[0];
        v58 = *(int8x16_t *)(v23 + 1776);
        v59 = vextq_s8(v58, v58, 8uLL).u64[0];
        v17.f64[0] = *(float64_t *)(v23 + 1792);
        do
        {
          v1056 = v57;
          v1061 = v59;
          v1346 = v17;
          v1066 = v58.i64[0];
          v1071 = v56.i64[0];
          v1351 = v55;
          v1076 = v54.i64[0];
          v1081 = v18;
          v1086 = v53;
          v1356 = v52;
          v1091 = v51;
          v1361 = v50;
          v1366 = v49;
          v1371 = v48;
          v1096 = v47;
          v1101 = v46;
          v1106 = v45;
          v1376 = v44;
          v1111 = v43;
          v1381 = v42;
          v1386 = v41;
          v1116 = v40;
          v1391 = v39;
          v1396 = v38;
          v1121 = v37;
          v1401 = v34;
          v1406 = v33;
          v1411 = v32;
          v1416 = v31;
          v1421 = v29;
          v60 = *(float64x2_t *)((char *)v36 + 8 * v24);
          v61 = (float64x2_t *)&v36->i8[v28 + v28];
          v62 = *v61;
          v63 = (float64x2_t *)((char *)v61 + v28);
          v64 = *v63;
          *(_QWORD *)&v65.f64[0] = vdupq_laneq_s64((int64x2_t)v62, 1).u64[0];
          v66 = (float64x2_t *)((char *)v63 + v28);
          v67 = *v66;
          v68 = (float64x2_t *)((char *)v66 + v28);
          v69 = (float64x2_t)vzip1q_s64((int64x2_t)v62, (int64x2_t)v64);
          v70 = *v68;
          v71 = (float64x2_t *)((char *)v68 + v28);
          v72 = *v71;
          v73 = (float64x2_t *)((char *)v71 + v28);
          v74 = *v73;
          v75 = *(float64x2_t *)((char *)v73 + 8 * v24);
          v76 = (float64x2_t *)((char *)v73 + v28 + v28);
          v77 = *v76;
          v78 = (float64x2_t *)((char *)v76 + v28);
          v79 = *v78;
          v80 = *(float64x2_t *)((char *)v78 + 8 * v24);
          v81 = (float64x2_t *)((char *)v78 + v28 + v28);
          v82 = (float64x2_t)vzip1q_s64(*v36, (int64x2_t)v60);
          v65.f64[1] = v64.f64[1];
          v83 = (float64x2_t)vzip2q_s64(*v36, (int64x2_t)v60);
          v1051 = vmlaq_laneq_f64(vmulq_n_f64(v82, *(double *)v36->i64), v83, *(float64x2_t *)v36, 1);
          v84 = vmlaq_laneq_f64(vmulq_n_f64(v82, v60.f64[0]), v83, v60, 1);
          v1046 = vmlaq_laneq_f64(vmulq_n_f64(v69, *(double *)v36->i64), v65, *(float64x2_t *)v36, 1);
          v85 = vmlaq_laneq_f64(vmulq_n_f64(v69, v60.f64[0]), v65, v60, 1);
          v1041 = vmlaq_laneq_f64(vmulq_n_f64(v82, v62.f64[0]), v83, v62, 1);
          v86 = vmlaq_laneq_f64(vmulq_n_f64(v69, v62.f64[0]), v65, v62, 1);
          v87 = vmlaq_laneq_f64(vmulq_n_f64(v82, v64.f64[0]), v83, v64, 1);
          v1036 = vmlaq_laneq_f64(vmulq_n_f64(v82, v67.f64[0]), v83, v67, 1);
          v88 = vmlaq_laneq_f64(vmulq_n_f64(v69, v64.f64[0]), v65, v64, 1);
          v89 = vmlaq_laneq_f64(vmulq_n_f64(v69, v67.f64[0]), v65, v67, 1);
          v1031 = vmlaq_laneq_f64(vmulq_n_f64(v82, v70.f64[0]), v83, v70, 1);
          v90 = v30;
          v91 = vmlaq_laneq_f64(vmulq_n_f64(v69, v70.f64[0]), v65, v70, 1);
          v92 = vmlaq_laneq_f64(vmulq_n_f64(v82, v72.f64[0]), v83, v72, 1);
          v93 = vmlaq_laneq_f64(vmulq_n_f64(v82, v74.f64[0]), v83, v74, 1);
          v94 = vmlaq_laneq_f64(vmulq_n_f64(v69, v72.f64[0]), v65, v72, 1);
          v95 = vmlaq_laneq_f64(vmulq_n_f64(v69, v74.f64[0]), v65, v74, 1);
          v96 = vmlaq_laneq_f64(vmulq_n_f64(v82, v75.f64[0]), v83, v75, 1);
          v97 = vmlaq_laneq_f64(vmulq_n_f64(v69, v75.f64[0]), v65, v75, 1);
          v98 = vmlaq_laneq_f64(vmulq_n_f64(v82, v77.f64[0]), v83, v77, 1);
          v99 = vmlaq_laneq_f64(vmulq_n_f64(v82, v79.f64[0]), v83, v79, 1);
          v100 = vmlaq_laneq_f64(vmulq_n_f64(v69, v77.f64[0]), v65, v77, 1);
          v101 = vmlaq_laneq_f64(vmulq_n_f64(v69, v79.f64[0]), v65, v79, 1);
          v102 = vmlaq_laneq_f64(vmulq_n_f64(v82, v80.f64[0]), v83, v80, 1);
          v103 = vmlaq_laneq_f64(vmulq_n_f64(v69, v80.f64[0]), v65, v80, 1);
          v104 = vmlaq_laneq_f64(vmulq_n_f64(v82, v81->f64[0]), v83, *v81, 1);
          v105 = vmlaq_laneq_f64(vmulq_n_f64(v69, v81->f64[0]), v65, *v81, 1);
          v106 = (float64x2_t *)((char *)v81 + v28);
          v107 = vmlaq_laneq_f64(vmulq_n_f64(v82, v106->f64[0]), v83, *v106, 1);
          v108 = *(float64x2_t *)((char *)v106 + 8 * v24);
          v109 = vmlaq_laneq_f64(vmulq_n_f64(v69, v106->f64[0]), v65, *v106, 1);
          v110 = vmlaq_laneq_f64(vmulq_n_f64(v82, v108.f64[0]), v83, v108, 1);
          v111 = vmlaq_laneq_f64(vmulq_n_f64(v69, v108.f64[0]), v65, v108, 1);
          v112 = vsubq_f64(v1336, v1051);
          v113 = vsubq_f64(v1331, v85);
          v114 = vsubq_f64(v1326, v84);
          v115 = vsubq_f64(v1321, v86);
          v116 = vsubq_f64(v1316, v1041);
          v117 = vsubq_f64(v1311, v88);
          v118 = vsubq_f64(v1306, v87);
          v119 = vsubq_f64(v1301, v89);
          v120 = vsubq_f64(v1296, v1036);
          v30 = vsubq_f64(v90, v91);
          v29 = vsubq_f64(v1421, v1031);
          v31 = vsubq_f64(v1416, v92);
          v32 = vsubq_f64(v1411, v95);
          v121 = vsubq_f64(v1291, v93);
          v122 = vsubq_f64(v1286, v97);
          v33 = vsubq_f64(v1406, v96);
          v123 = vsubq_f64(v1281, v100);
          v34 = vsubq_f64(v1401, v98);
          v124 = vsubq_f64(v1276, v101);
          v125 = vsubq_f64(v1271, v99);
          v126 = vsubq_f64(v1266, v103);
          v127 = vsubq_f64(v1261, v102);
          v128 = vsubq_f64(v1256, v105);
          v129 = vsubq_f64(v1251, v104);
          v130 = vsubq_f64(v1246, v109);
          v131 = vsubq_f64(v1241, v107);
          v132 = vsubq_f64(v1236, v111);
          v133 = vsubq_f64(v1231, v110);
          v1341 = vsubq_f64(v1341, v1046);
          *(float64x2_t *)v23 = v112;
          *(float64x2_t *)(v23 + 16) = v1341;
          v1336 = v112;
          v1331 = v113;
          *(float64x2_t *)(v23 + 136) = v113;
          v1326 = v114;
          *(float64x2_t *)(v23 + 120) = v114;
          v1321 = v115;
          *(float64x2_t *)(v23 + 240) = v116;
          *(float64x2_t *)(v23 + 256) = v115;
          v1316 = v116;
          v1311 = v117;
          *(float64x2_t *)(v23 + 360) = v118;
          *(float64x2_t *)(v23 + 376) = v117;
          v1306 = v118;
          v1301 = v119;
          *(float64x2_t *)(v23 + 480) = v120;
          *(float64x2_t *)(v23 + 496) = v119;
          v1296 = v120;
          *(float64x2_t *)(v23 + 600) = v29;
          *(float64x2_t *)(v23 + 616) = v30;
          v1126 = vsubq_f64(v1126, v94);
          *(float64x2_t *)(v23 + 720) = v31;
          *(float64x2_t *)(v23 + 736) = v1126;
          *(float64x2_t *)(v23 + 840) = v121;
          *(float64x2_t *)(v23 + 856) = v32;
          v1291 = v121;
          v1286 = v122;
          *(float64x2_t *)(v23 + 960) = v33;
          *(float64x2_t *)(v23 + 976) = v122;
          v1281 = v123;
          *(float64x2_t *)(v23 + 1080) = v34;
          *(float64x2_t *)(v23 + 1096) = v123;
          v1276 = v124;
          *(float64x2_t *)(v23 + 1200) = v125;
          *(float64x2_t *)(v23 + 1216) = v124;
          v1271 = v125;
          v1266 = v126;
          *(float64x2_t *)(v23 + 1320) = v127;
          *(float64x2_t *)(v23 + 1336) = v126;
          v1261 = v127;
          v1256 = v128;
          *(float64x2_t *)(v23 + 1456) = v128;
          v1251 = v129;
          *(float64x2_t *)(v23 + 1440) = v129;
          v1246 = v130;
          *(float64x2_t *)(v23 + 1560) = v131;
          *(float64x2_t *)(v23 + 1576) = v130;
          v1241 = v131;
          v1236 = v132;
          *(float64x2_t *)(v23 + 1680) = v133;
          *(float64x2_t *)(v23 + 1696) = v132;
          v1231 = v133;
          v134 = (int64x2_t *)&v25[(4 * v24 + v27)];
          v135 = (float64x2_t)v134[4 * v24];
          v136 = *(float64x2_t *)((char *)v134 + 8 * v24);
          v137 = (float64x2_t)v134[v24];
          *(_QWORD *)&v112.f64[0] = vdupq_laneq_s64((int64x2_t)v137, 1).u64[0];
          v138 = *(float64x2_t *)((char *)v134 + 24 * v24);
          v139 = (float64x2_t)v134[2 * v24];
          v140 = *(float64x2_t *)((char *)v134 + 40 * v24);
          v141 = (float64x2_t)vzip1q_s64((int64x2_t)v137, (int64x2_t)v138);
          v142 = (float64x2_t)v134[3 * v24];
          v143 = *(float64x2_t *)((char *)v134 + 56 * v24);
          *(_QWORD *)&v112.f64[1] = v134->i64[v35 + 1];
          v144 = *(float64x2_t *)((char *)v134 + 72 * v24);
          v145 = (float64x2_t)v134[5 * v24];
          v146 = (float64x2_t)vzip1q_s64(*v134, (int64x2_t)v136);
          v147 = (float64x2_t)vzip2q_s64(*v134, (int64x2_t)v136);
          v148 = vmlaq_laneq_f64(vmulq_n_f64(v146, *(double *)v134->i64), v147, *(float64x2_t *)v134, 1);
          v149 = vmlaq_laneq_f64(vmulq_n_f64(v146, v136.f64[0]), v147, v136, 1);
          v150 = vmlaq_laneq_f64(vmulq_n_f64(v141, *(double *)v134->i64), v112, *(float64x2_t *)v134, 1);
          v151 = vmlaq_laneq_f64(vmulq_n_f64(v141, v136.f64[0]), v112, v136, 1);
          v152 = vmlaq_laneq_f64(vmulq_n_f64(v146, v137.f64[0]), v147, v137, 1);
          v153 = vmlaq_laneq_f64(vmulq_n_f64(v141, v137.f64[0]), v112, v137, 1);
          v154 = vmlaq_laneq_f64(vmulq_n_f64(v146, v138.f64[0]), v147, v138, 1);
          v155 = vmlaq_laneq_f64(vmulq_n_f64(v146, v139.f64[0]), v147, v139, 1);
          v156 = vmlaq_laneq_f64(vmulq_n_f64(v141, v138.f64[0]), v112, v138, 1);
          v157 = vmlaq_laneq_f64(vmulq_n_f64(v141, v139.f64[0]), v112, v139, 1);
          v158 = vmlaq_laneq_f64(vmulq_n_f64(v146, v140.f64[0]), v147, v140, 1);
          v159 = vmlaq_laneq_f64(vmulq_n_f64(v141, v140.f64[0]), v112, v140, 1);
          v160 = vmlaq_laneq_f64(vmulq_n_f64(v146, v142.f64[0]), v147, v142, 1);
          v161 = vmlaq_laneq_f64(vmulq_n_f64(v146, v143.f64[0]), v147, v143, 1);
          v162 = vmlaq_laneq_f64(vmulq_n_f64(v141, v142.f64[0]), v112, v142, 1);
          v163 = vmlaq_laneq_f64(vmulq_n_f64(v141, v143.f64[0]), v112, v143, 1);
          v164 = vmlaq_laneq_f64(vmulq_n_f64(v146, v135.f64[0]), v147, v135, 1);
          v165 = vmlaq_laneq_f64(vmulq_n_f64(v141, v135.f64[0]), v112, v135, 1);
          v166 = vmlaq_laneq_f64(vmulq_n_f64(v146, v144.f64[0]), v147, v144, 1);
          v167 = vmlaq_laneq_f64(vmulq_n_f64(v146, v145.f64[0]), v147, v145, 1);
          v168 = vmlaq_laneq_f64(vmulq_n_f64(v141, v144.f64[0]), v112, v144, 1);
          v169 = vmlaq_laneq_f64(vmulq_n_f64(v141, v145.f64[0]), v112, v145, 1);
          v170 = vsubq_f64(v1221, v148);
          v171 = vsubq_f64(v1216, v149);
          v37 = vsubq_f64(v1121, v151);
          v172 = vsubq_f64(v1211, v152);
          v38 = vsubq_f64(v1396, v153);
          v173 = vsubq_f64(v1206, v154);
          v39 = vsubq_f64(v1391, v156);
          v174 = vsubq_f64(v1201, v155);
          v40 = vsubq_f64(v1116, v157);
          v175 = vsubq_f64(v1196, v158);
          v41 = vsubq_f64(v1386, v159);
          v176 = vsubq_f64(v1191, v160);
          v42 = vsubq_f64(v1381, v162);
          v177 = vsubq_f64(v1186, v161);
          v43 = vsubq_f64(v1111, v163);
          v44 = vsubq_f64(v1376, v165);
          v178 = vsubq_f64(v1171, v166);
          v179 = vsubq_f64(v1176, v168);
          v180 = vsubq_f64(v1161, v167);
          v1226 = vsubq_f64(v1226, v150);
          *(float64x2_t *)(v23 + 512) = v170;
          *(float64x2_t *)(v23 + 528) = v1226;
          v1221 = v170;
          *(float64x2_t *)(v23 + 632) = v171;
          *(float64x2_t *)(v23 + 648) = v37;
          v1216 = v171;
          *(float64x2_t *)(v23 + 752) = v172;
          *(float64x2_t *)(v23 + 768) = v38;
          v1211 = v172;
          *(float64x2_t *)(v23 + 872) = v173;
          *(float64x2_t *)(v23 + 888) = v39;
          v1206 = v173;
          *(float64x2_t *)(v23 + 992) = v174;
          *(float64x2_t *)(v23 + 1008) = v40;
          v1201 = v174;
          *(float64x2_t *)(v23 + 1112) = v175;
          *(float64x2_t *)(v23 + 1128) = v41;
          v1196 = v175;
          *(float64x2_t *)(v23 + 1232) = v176;
          *(float64x2_t *)(v23 + 1248) = v42;
          v1191 = v176;
          *(float64x2_t *)(v23 + 1352) = v177;
          *(float64x2_t *)(v23 + 1368) = v43;
          v1186 = v177;
          v1181 = vsubq_f64(v1181, v164);
          *(float64x2_t *)(v23 + 1472) = v1181;
          *(float64x2_t *)(v23 + 1488) = v44;
          v1176 = v179;
          *(float64x2_t *)(v23 + 1592) = v178;
          *(float64x2_t *)(v23 + 1608) = v179;
          v1171 = v178;
          v181 = (int64x2_t *)&v25[(8 * v24 + v27)];
          v1166 = vsubq_f64(v1166, v169);
          *(float64x2_t *)(v23 + 1712) = v180;
          *(float64x2_t *)(v23 + 1728) = v1166;
          v1161 = v180;
          v182 = *(float64x2_t *)((char *)v181 + 8 * v24);
          v183 = (float64x2_t)v181[v24];
          v184 = *(float64x2_t *)((char *)v181 + 24 * v24);
          *(_QWORD *)&v172.f64[0] = vdupq_laneq_s64((int64x2_t)v183, 1).u64[0];
          v185 = (float64x2_t)v181[2 * v24];
          v186 = (float64x2_t)vzip1q_s64((int64x2_t)v183, (int64x2_t)v184);
          v187 = *(float64x2_t *)((char *)v181 + 40 * v24);
          v188 = (float64x2_t)vzip1q_s64(*v181, (int64x2_t)v182);
          *(_QWORD *)&v172.f64[1] = v181->i64[v35 + 1];
          v189 = (float64x2_t)vzip2q_s64(*v181, (int64x2_t)v182);
          v190 = vmlaq_laneq_f64(vmulq_n_f64(v188, *(double *)v181->i64), v189, *(float64x2_t *)v181, 1);
          v191 = vmlaq_laneq_f64(vmulq_n_f64(v188, v182.f64[0]), v189, v182, 1);
          v192 = vmlaq_laneq_f64(vmulq_n_f64(v186, *(double *)v181->i64), v172, *(float64x2_t *)v181, 1);
          v193 = vmlaq_laneq_f64(vmulq_n_f64(v186, v182.f64[0]), v172, v182, 1);
          v194 = vmlaq_laneq_f64(vmulq_n_f64(v188, v183.f64[0]), v189, v183, 1);
          v195 = vmlaq_laneq_f64(vmulq_n_f64(v186, v183.f64[0]), v172, v183, 1);
          v196 = vmlaq_laneq_f64(vmulq_n_f64(v188, v184.f64[0]), v189, v184, 1);
          v197 = vmlaq_laneq_f64(vmulq_n_f64(v188, v185.f64[0]), v189, v185, 1);
          v198 = vmlaq_laneq_f64(vmulq_n_f64(v186, v184.f64[0]), v172, v184, 1);
          v199 = vmlaq_laneq_f64(vmulq_n_f64(v186, v185.f64[0]), v172, v185, 1);
          v200 = vmlaq_laneq_f64(vmulq_n_f64(v188, v187.f64[0]), v189, v187, 1);
          v201 = vmlaq_laneq_f64(vmulq_n_f64(v186, v187.f64[0]), v172, v187, 1);
          _Q7 = (float64x2_t)v181[3 * v24];
          v203 = vmlaq_laneq_f64(vmulq_n_f64(v188, _Q7.f64[0]), v189, _Q7, 1);
          v204 = vmlaq_laneq_f64(vmulq_n_f64(v186, _Q7.f64[0]), v172, _Q7, 1);
          v46 = vsubq_f64(v1101, v190);
          v45 = vsubq_f64(v1106, v192);
          v48 = vsubq_f64(v1371, v191);
          v47 = vsubq_f64(v1096, v193);
          v205 = vsubq_f64(v1156, v194);
          v49 = vsubq_f64(v1366, v195);
          v206 = vsubq_f64(v1151, v196);
          v50 = vsubq_f64(v1361, v198);
          v207 = vsubq_f64(v1146, v197);
          v51 = vsubq_f64(v1091, v199);
          v208 = vsubq_f64(v1141, v200);
          v52 = vsubq_f64(v1356, v201);
          v209 = vsubq_f64(v1136, v203);
          v53 = vsubq_f64(v1086, v204);
          *(float64x2_t *)(v23 + 1040) = v45;
          *(float64x2_t *)(v23 + 1024) = v46;
          *(float64x2_t *)(v23 + 1144) = v48;
          *(float64x2_t *)(v23 + 1160) = v47;
          *(float64x2_t *)(v23 + 1264) = v205;
          *(float64x2_t *)(v23 + 1280) = v49;
          v1156 = v205;
          *(float64x2_t *)(v23 + 1400) = v50;
          v1151 = v206;
          *(float64x2_t *)(v23 + 1384) = v206;
          v1146 = v207;
          *(float64x2_t *)(v23 + 1504) = v207;
          *(float64x2_t *)(v23 + 1520) = v51;
          *(float64x2_t *)(v23 + 1624) = v208;
          *(float64x2_t *)(v23 + 1640) = v52;
          v1141 = v208;
          v210 = (int64x2_t *)&v25[(12 * v24 + v27)];
          *(float64x2_t *)(v23 + 1744) = v209;
          *(float64x2_t *)(v23 + 1760) = v53;
          v1136 = v209;
          v211 = *(float64x2_t *)((char *)v210 + 8 * v24);
          _Q2 = (float64x2_t)v210[v24];
          v213 = (float64x2_t)vzip1q_s64(*v210, (int64x2_t)v211);
          _Q5 = (float64x2_t)vzip2q_s64(*v210, (int64x2_t)v211);
          _Q6 = vmulq_f64(_Q2, *(float64x2_t *)v210);
          *(_QWORD *)&_Q7.f64[0] = v210->i64[1];
          __asm { FMLA            D6, D7, V2.D[1] }
          v219 = vmlaq_laneq_f64(vmulq_n_f64(v213, *(double *)v210->i64), _Q5, *(float64x2_t *)v210, 1);
          _Q0 = vmulq_f64(_Q2, v211);
          *(_QWORD *)&_Q7.f64[0] = v210->i64[(unint64_t)v28 / 8 + 1];
          __asm { FMLA            D0, D7, V2.D[1] }
          v221 = vmlaq_laneq_f64(vmulq_n_f64(v213, v211.f64[0]), _Q5, v211, 1);
          v222 = vmlaq_laneq_f64(vmulq_n_f64(v213, _Q2.f64[0]), _Q5, _Q2, 1);
          _Q1 = vmulq_f64(_Q2, _Q2);
          *(_QWORD *)&_Q5.f64[0] = v210[v24].i64[1];
          __asm { FMLA            D1, D5, V2.D[1] }
          *(_QWORD *)&_Q5.f64[0] = v1076;
          *(_QWORD *)&_Q5.f64[1] = v1131;
          v54 = (int8x16_t)vsubq_f64(_Q5, v219);
          v18 = vsubq_f64(v1081, _Q6);
          *(_QWORD *)&_Q6.f64[0] = v1071;
          *(_QWORD *)&_Q6.f64[1] = v1056;
          *(_QWORD *)&v219.f64[0] = v1066;
          v55 = vsubq_f64(v1351, _Q0);
          v56 = (int8x16_t)vsubq_f64(_Q6, v221);
          *(_QWORD *)&v219.f64[1] = v1061;
          v1131 = vextq_s8(v54, v54, 8uLL).u64[0];
          v58 = (int8x16_t)vsubq_f64(v219, v222);
          v57 = vextq_s8(v56, v56, 8uLL).u64[0];
          *(int8x16_t *)(v23 + 1536) = v54;
          *(float64_t *)(v23 + 1552) = v18.f64[0];
          v17 = vsubq_f64(v1346, _Q1);
          v59 = vextq_s8(v58, v58, 8uLL).u64[0];
          *(int8x16_t *)(v23 + 1656) = v56;
          *(float64_t *)(v23 + 1672) = v55.f64[0];
          *(int8x16_t *)(v23 + 1776) = v58;
          *(float64_t *)(v23 + 1792) = v17.f64[0];
          LODWORD(v210) = v27 + 4;
          v27 += 2;
          ++v36;
        }
        while (v210 <= v24);
        v26 = *(_DWORD *)(v4 + 16);
      }
      if ((v26 & 1) != 0)
      {
        LODWORD(category) = 1;
        HIDWORD(category) = v24;
        v1426 = &v25[(v24 - 1)];
        v1427 = v24 - 1;
        v1422 = *(float64x2_t *)v23;
        v1417 = *(_OWORD *)(v23 + 16);
        v1412 = *(_OWORD *)(v23 + 32);
        v1407 = *(_OWORD *)(v23 + 48);
        v1402 = *(_OWORD *)(v23 + 64);
        v1397 = *(_OWORD *)(v23 + 80);
        v1392 = *(_OWORD *)(v23 + 96);
        v1387 = *(_OWORD *)(v23 + 112);
        v1382 = *(_OWORD *)(v23 + 128);
        v1377 = *(_OWORD *)(v23 + 144);
        v1372 = *(_OWORD *)(v23 + 160);
        v1367 = *(_OWORD *)(v23 + 176);
        v1362 = *(_OWORD *)(v23 + 192);
        v1357 = *(_OWORD *)(v23 + 208);
        v1352 = *(_OWORD *)(v23 + 224);
        v1347 = *(_OWORD *)(v23 + 240);
        v1342 = *(_OWORD *)(v23 + 256);
        v1337 = *(_OWORD *)(v23 + 272);
        v1332 = *(_OWORD *)(v23 + 288);
        v1327 = *(_OWORD *)(v23 + 304);
        v1322 = *(_OWORD *)(v23 + 320);
        v1317 = *(_OWORD *)(v23 + 336);
        v1312 = *(_OWORD *)(v23 + 352);
        v1307 = *(_OWORD *)(v23 + 368);
        v1302 = *(_OWORD *)(v23 + 384);
        v1297 = *(_OWORD *)(v23 + 400);
        v1292 = *(_OWORD *)(v23 + 416);
        v1287 = *(_OWORD *)(v23 + 432);
        v1282 = *(_OWORD *)(v23 + 448);
        v1277 = *(_OWORD *)(v23 + 464);
        v1272 = *(_OWORD *)(v23 + 480);
        v1267 = *(_OWORD *)(v23 + 496);
        v1262 = *(_OWORD *)(v23 + 512);
        v1257 = *(_OWORD *)(v23 + 528);
        v1252 = *(_OWORD *)(v23 + 544);
        v1247 = *(_OWORD *)(v23 + 560);
        v1242 = *(_OWORD *)(v23 + 576);
        v1237 = *(_OWORD *)(v23 + 592);
        v1232 = *(_OWORD *)(v23 + 608);
        v1227 = *(_OWORD *)(v23 + 624);
        v1222 = *(_OWORD *)(v23 + 640);
        v1217 = *(_OWORD *)(v23 + 656);
        v1212 = *(_OWORD *)(v23 + 672);
        v1207 = *(_OWORD *)(v23 + 688);
        v1202 = *(_OWORD *)(v23 + 704);
        v1197 = *(_OWORD *)(v23 + 720);
        v1192 = *(_OWORD *)(v23 + 736);
        v1187 = *(_OWORD *)(v23 + 752);
        v1182 = *(_OWORD *)(v23 + 768);
        v1177 = *(_OWORD *)(v23 + 784);
        v1172 = *(_OWORD *)(v23 + 800);
        v1167 = *(_OWORD *)(v23 + 816);
        v1162 = *(_OWORD *)(v23 + 832);
        v1157 = *(_OWORD *)(v23 + 848);
        v1152 = *(_OWORD *)(v23 + 864);
        v1147 = *(_OWORD *)(v23 + 880);
        v1142 = *(_OWORD *)(v23 + 896);
        v1137 = *(_OWORD *)(v23 + 912);
        v1132 = *(_OWORD *)(v23 + 928);
        v1127 = *(_OWORD *)(v23 + 944);
        v1122 = *(_OWORD *)(v23 + 960);
        v1117 = *(_OWORD *)(v23 + 976);
        v1112 = *(_OWORD *)(v23 + 992);
        v1107 = *(_OWORD *)(v23 + 1008);
        v1102 = *(_OWORD *)(v23 + 1024);
        v1097 = *(_OWORD *)(v23 + 1040);
        v1092 = *(_OWORD *)(v23 + 1056);
        v1087 = *(_OWORD *)(v23 + 1072);
        v1082 = *(_OWORD *)(v23 + 1088);
        v1077 = *(_OWORD *)(v23 + 1104);
        v1072 = *(_OWORD *)(v23 + 1120);
        v1067 = *(_OWORD *)(v23 + 1136);
        v1062 = *(_OWORD *)(v23 + 1152);
        v1057 = *(_OWORD *)(v23 + 1168);
        v1052 = *(_OWORD *)(v23 + 1184);
        v1047 = *(_OWORD *)(v23 + 1200);
        v1042 = *(_OWORD *)(v23 + 1216);
        v1037 = *(_OWORD *)(v23 + 1232);
        v1032 = *(_OWORD *)(v23 + 1248);
        v1027 = *(_OWORD *)(v23 + 1264);
        v1023 = *(_OWORD *)(v23 + 1280);
        v224 = *(_OWORD *)(v23 + 1296);
        v225 = *(float64x2_t *)(v23 + 1312);
        v226 = *(_OWORD *)(v23 + 1328);
        v227 = *(_OWORD *)(v23 + 1344);
        v228 = *(_OWORD *)(v23 + 1360);
        v229 = *(_OWORD *)(v23 + 1376);
        v230 = *(_OWORD *)(v23 + 1392);
        v231 = *(_OWORD *)(v23 + 1408);
        v232 = *(_OWORD *)(v23 + 1424);
        v233 = *(_OWORD *)(v23 + 1440);
        v234 = *(_OWORD *)(v23 + 1456);
        v235 = *(_OWORD *)(v23 + 1472);
        v236 = *(_OWORD *)(v23 + 1488);
        v237 = *(_OWORD *)(v23 + 1504);
        v238 = *(_OWORD *)(v23 + 1520);
        v239 = *(_OWORD *)(v23 + 1536);
        v240 = *(_OWORD *)(v23 + 1552);
        v241 = *(_OWORD *)(v23 + 1568);
        v242 = *(_OWORD *)(v23 + 1584);
        v243 = *(_OWORD *)(v23 + 1600);
        v244 = *(_OWORD *)(v23 + 1616);
        v245 = *(_OWORD *)(v23 + 1632);
        v246 = *(_OWORD *)(v23 + 1648);
        v247 = *(_OWORD *)(v23 + 1664);
        v248 = *(_OWORD *)(v23 + 1680);
        v249 = *(_OWORD *)(v23 + 1696);
        v250 = *(_OWORD *)(v23 + 1712);
        v251 = *(_OWORD *)(v23 + 1728);
        v252 = *(_OWORD *)(v23 + 1744);
        v253 = *(_OWORD *)(v23 + 1760);
        v254 = *(_OWORD *)(v23 + 1776);
        v1542 = *(_QWORD *)(v23 + 1792);
        v1541 = v254;
        v1540 = v253;
        v1539 = v252;
        v1538 = v251;
        v1537 = v250;
        v1536 = v249;
        v1535 = v248;
        v1534 = v247;
        v1533 = v246;
        v1532 = v245;
        v1531 = v244;
        v1530 = v243;
        v1529 = v242;
        v1528 = v241;
        v1527 = v240;
        v1526 = v239;
        v1525 = v238;
        v1524 = v237;
        v1523 = v236;
        v1522 = v235;
        v1521 = v234;
        v1520 = v233;
        v1519 = v232;
        v1518 = v231;
        v1517 = v230;
        v1516 = v229;
        v1515 = v228;
        v1514 = v227;
        v1513 = v226;
        v1512 = v225;
        v1511 = v224;
        v1510 = v1023;
        v1509 = v1027;
        v1508 = v1032;
        v1507 = v1037;
        v1506 = v1042;
        v1505 = v1047;
        v1504 = v1052;
        v1503 = v1057;
        v1502 = v1062;
        v1501 = v1067;
        v1500 = v1072;
        v1499 = v1077;
        v1498 = v1082;
        v1497 = v1087;
        v1496 = v1092;
        v1495 = v1097;
        v1493 = v1107;
        v1494 = v1102;
        v1491 = v1117;
        v1492 = v1112;
        v1489 = v1127;
        v1490 = v1122;
        v1487 = v1137;
        v1488 = v1132;
        v1485 = v1147;
        v1486 = v1142;
        v1483 = v1157;
        v1484 = v1152;
        v1481 = v1167;
        v1482 = v1162;
        v1479 = v1177;
        v1480 = v1172;
        v1477 = v1187;
        v1478 = v1182;
        v1475 = v1197;
        v1476 = v1192;
        v1473 = v1207;
        v1474 = v1202;
        v1471 = v1217;
        v1472 = v1212;
        v1469 = v1227;
        v1470 = v1222;
        v1467 = v1237;
        v1468 = v1232;
        v1465 = v1247;
        v1466 = v1242;
        v1463 = v1257;
        v1464 = v1252;
        v1461 = v1267;
        v1462 = v1262;
        v1459 = v1277;
        v1460 = v1272;
        v1457 = v1287;
        v1458 = v1282;
        v1455 = v1297;
        v1456 = v1292;
        v1453 = v1307;
        v1454 = v1302;
        v1451 = v1317;
        v1452 = v1312;
        v1449 = v1327;
        v1450 = v1322;
        v1447 = v1337;
        v1448 = v1332;
        v1445 = v1347;
        v1446 = v1342;
        v1443 = v1357;
        v1444 = v1352;
        v1441 = v1367;
        v1442 = v1362;
        v1439 = v1377;
        v1440 = v1372;
        v1437 = v1387;
        v1438 = v1382;
        v1436 = v1392;
        v1435 = v1397;
        v1434 = v1402;
        v1433 = v1407;
        v1432 = v1412;
        v1431 = v1417;
        v1430 = v1422;
        p_category = &category;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1430;
        p_p_category = &p_category;
        v1545 = &category;
        v1546 = 0x3FF0000000000000;
        sub_20FBAA984((double *)&__p.__r_.__value_.__l.__size_, (uint64_t)&v1543);
        v255.f64[0] = *(float64_t *)(__p.__r_.__value_.__r.__words[0] + 1792);
        v225.f64[0] = v1550;
        *(_QWORD *)&v1422.f64[0] = *(_OWORD *)&vsubq_f64(v255, v225);
        v1418 = vsubq_f64(*(float64x2_t *)__p.__r_.__value_.__l.__data_, *(float64x2_t *)&__p.__r_.__value_.__r.__words[1]);
        v1413 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 16), v1548);
        v1408 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 32), v1549[0]);
        v1403 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 48), v1549[1]);
        v1398 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 64), v1549[2]);
        v1393 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 80), v1549[3]);
        v1388 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 96), v1549[4]);
        v1383 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 112), v1549[5]);
        v1378 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 128), v1549[6]);
        v1373 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 144), v1549[7]);
        v1368 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 160), v1549[8]);
        v1363 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 176), v1549[9]);
        v1358 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 192), v1549[10]);
        v1353 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 208), v1549[11]);
        v1348 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 224), v1549[12]);
        v1343 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 240), v1549[13]);
        v1338 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 256), v1549[14]);
        v1333 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 272), v1549[15]);
        v1328 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 288), v1549[16]);
        v1323 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 304), v1549[17]);
        v1318 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 320), v1549[18]);
        v1313 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 336), v1549[19]);
        v1308 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 352), v1549[20]);
        v1303 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 368), v1549[21]);
        v1298 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 384), v1549[22]);
        v1293 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 400), v1549[23]);
        v1288 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 416), v1549[24]);
        v1283 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 432), v1549[25]);
        v1278 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 448), v1549[26]);
        v1273 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 464), v1549[27]);
        v1268 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 480), v1549[28]);
        v1263 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 496), v1549[29]);
        v1258 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 512), v1549[30]);
        v1253 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 528), v1549[31]);
        v1248 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 544), v1549[32]);
        v1243 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 560), v1549[33]);
        v1238 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 576), v1549[34]);
        v1233 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 592), v1549[35]);
        v1228 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 608), v1549[36]);
        v1223 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 624), v1549[37]);
        v1218 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 640), v1549[38]);
        v1213 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 656), v1549[39]);
        v1208 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 672), v1549[40]);
        v1203 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 688), v1549[41]);
        v1198 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 704), v1549[42]);
        v1193 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 720), v1549[43]);
        v1188 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 736), v1549[44]);
        v1183 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 752), v1549[45]);
        v1178 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 768), v1549[46]);
        v1173 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 784), v1549[47]);
        v1168 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 800), v1549[48]);
        v1163 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 816), v1549[49]);
        v1158 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 832), v1549[50]);
        v1153 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 848), v1549[51]);
        v1148 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 864), v1549[52]);
        v1143 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 880), v1549[53]);
        v1138 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 896), v1549[54]);
        v1133 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 912), v1549[55]);
        v1128 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 928), v1549[56]);
        v1123 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 944), v1549[57]);
        v1118 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 960), v1549[58]);
        v1113 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 976), v1549[59]);
        v1108 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 992), v1549[60]);
        v1103 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1008), v1549[61]);
        v1098 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1024), v1549[62]);
        v1093 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1040), v1549[63]);
        v1088 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1056), v1549[64]);
        v1083 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1072), v1549[65]);
        v1078 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1088), v1549[66]);
        v1073 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1104), v1549[67]);
        v1068 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1120), v1549[68]);
        v1063 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1136), v1549[69]);
        v1058 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1152), v1549[70]);
        v1053 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1168), v1549[71]);
        v1048 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1184), v1549[72]);
        v1043 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1200), v1549[73]);
        v1038 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1216), v1549[74]);
        v1033 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1232), v1549[75]);
        v1028 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1248), v1549[76]);
        v1024 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1264), v1549[77]);
        v1020 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1280), v1549[78]);
        v256 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1296), v1549[79]);
        v257 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1312), v1549[80]);
        v258 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1328), v1549[81]);
        v259 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1344), v1549[82]);
        v260 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1360), v1549[83]);
        v261 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1376), v1549[84]);
        v262 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1392), v1549[85]);
        v263 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1408), v1549[86]);
        v264 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1424), v1549[87]);
        v265 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1440), v1549[88]);
        v266 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1456), v1549[89]);
        v267 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1472), v1549[90]);
        v268 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1488), v1549[91]);
        v269 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1504), v1549[92]);
        v270 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1520), v1549[93]);
        v271 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1536), v1549[94]);
        v272 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1552), v1549[95]);
        v273 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1568), v1549[96]);
        v274 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1584), v1549[97]);
        v275 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1600), v1549[98]);
        v276 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1616), v1549[99]);
        v277 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1632), v1549[100]);
        v278 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1648), v1549[101]);
        v279 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1664), v1549[102]);
        v280 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1680), v1549[103]);
        v281 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1696), v1549[104]);
        v282 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1712), v1549[105]);
        v283 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1728), v1549[106]);
        v284 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1744), v1549[107]);
        v285 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1760), v1549[108]);
        *(float64x2_t *)(v23 + 1776) = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1776), v1549[109]);
        *(float64x2_t *)(v23 + 1760) = v285;
        *(float64x2_t *)(v23 + 1744) = v284;
        *(float64x2_t *)(v23 + 1728) = v283;
        *(float64x2_t *)(v23 + 1712) = v282;
        *(float64x2_t *)(v23 + 1696) = v281;
        *(float64x2_t *)(v23 + 1680) = v280;
        *(float64x2_t *)(v23 + 1664) = v279;
        *(float64x2_t *)(v23 + 1648) = v278;
        *(float64x2_t *)(v23 + 1632) = v277;
        *(float64x2_t *)(v23 + 1616) = v276;
        *(float64x2_t *)(v23 + 1600) = v275;
        *(float64x2_t *)(v23 + 1584) = v274;
        *(float64x2_t *)(v23 + 1568) = v273;
        *(float64x2_t *)(v23 + 1552) = v272;
        *(float64x2_t *)(v23 + 1536) = v271;
        *(float64x2_t *)(v23 + 1520) = v270;
        *(float64x2_t *)(v23 + 1504) = v269;
        *(float64x2_t *)(v23 + 1488) = v268;
        *(float64x2_t *)(v23 + 1472) = v267;
        *(float64x2_t *)(v23 + 1456) = v266;
        *(float64x2_t *)(v23 + 1440) = v265;
        *(float64x2_t *)(v23 + 1424) = v264;
        *(float64x2_t *)(v23 + 1408) = v263;
        *(float64x2_t *)(v23 + 1392) = v262;
        *(float64x2_t *)(v23 + 1376) = v261;
        *(float64x2_t *)(v23 + 1360) = v260;
        *(float64x2_t *)(v23 + 1344) = v259;
        *(float64x2_t *)(v23 + 1328) = v258;
        *(float64x2_t *)(v23 + 1312) = v257;
        *(float64x2_t *)(v23 + 1296) = v256;
        *(float64x2_t *)(v23 + 1280) = v1020;
        *(float64x2_t *)(v23 + 1264) = v1024;
        *(float64x2_t *)(v23 + 1248) = v1028;
        *(float64x2_t *)(v23 + 1232) = v1033;
        *(float64x2_t *)(v23 + 1216) = v1038;
        *(float64x2_t *)(v23 + 1200) = v1043;
        *(float64x2_t *)(v23 + 1184) = v1048;
        *(float64x2_t *)(v23 + 1168) = v1053;
        *(float64x2_t *)(v23 + 1152) = v1058;
        *(float64x2_t *)(v23 + 1136) = v1063;
        *(float64x2_t *)(v23 + 1120) = v1068;
        *(float64x2_t *)(v23 + 1104) = v1073;
        *(float64x2_t *)(v23 + 1088) = v1078;
        *(float64x2_t *)(v23 + 1072) = v1083;
        *(float64x2_t *)(v23 + 1056) = v1088;
        *(float64x2_t *)(v23 + 1040) = v1093;
        *(float64x2_t *)(v23 + 1008) = v1103;
        *(float64x2_t *)(v23 + 1024) = v1098;
        *(float64x2_t *)(v23 + 976) = v1113;
        *(float64x2_t *)(v23 + 992) = v1108;
        *(float64x2_t *)(v23 + 944) = v1123;
        *(float64x2_t *)(v23 + 960) = v1118;
        *(float64x2_t *)(v23 + 912) = v1133;
        *(float64x2_t *)(v23 + 928) = v1128;
        *(float64x2_t *)(v23 + 880) = v1143;
        *(float64x2_t *)(v23 + 896) = v1138;
        *(float64x2_t *)(v23 + 848) = v1153;
        *(float64x2_t *)(v23 + 864) = v1148;
        *(float64x2_t *)(v23 + 816) = v1163;
        *(float64x2_t *)(v23 + 832) = v1158;
        *(float64x2_t *)(v23 + 784) = v1173;
        *(float64x2_t *)(v23 + 800) = v1168;
        *(float64x2_t *)(v23 + 752) = v1183;
        *(float64x2_t *)(v23 + 768) = v1178;
        *(float64x2_t *)(v23 + 720) = v1193;
        *(float64x2_t *)(v23 + 736) = v1188;
        *(float64x2_t *)(v23 + 688) = v1203;
        *(float64x2_t *)(v23 + 704) = v1198;
        *(float64x2_t *)(v23 + 656) = v1213;
        *(float64x2_t *)(v23 + 672) = v1208;
        *(float64x2_t *)(v23 + 624) = v1223;
        *(float64x2_t *)(v23 + 640) = v1218;
        *(float64x2_t *)(v23 + 592) = v1233;
        *(float64x2_t *)(v23 + 608) = v1228;
        *(float64x2_t *)(v23 + 560) = v1243;
        *(float64x2_t *)(v23 + 576) = v1238;
        *(float64x2_t *)(v23 + 528) = v1253;
        *(float64x2_t *)(v23 + 544) = v1248;
        *(float64x2_t *)(v23 + 496) = v1263;
        *(float64x2_t *)(v23 + 512) = v1258;
        *(float64x2_t *)(v23 + 464) = v1273;
        *(float64x2_t *)(v23 + 480) = v1268;
        *(float64x2_t *)(v23 + 432) = v1283;
        *(float64x2_t *)(v23 + 448) = v1278;
        *(float64x2_t *)(v23 + 400) = v1293;
        *(float64x2_t *)(v23 + 416) = v1288;
        *(float64x2_t *)(v23 + 368) = v1303;
        *(float64x2_t *)(v23 + 384) = v1298;
        *(float64x2_t *)(v23 + 336) = v1313;
        *(float64x2_t *)(v23 + 352) = v1308;
        *(float64x2_t *)(v23 + 304) = v1323;
        *(float64x2_t *)(v23 + 320) = v1318;
        *(float64x2_t *)(v23 + 272) = v1333;
        *(float64x2_t *)(v23 + 288) = v1328;
        *(float64x2_t *)(v23 + 240) = v1343;
        *(float64x2_t *)(v23 + 256) = v1338;
        *(float64x2_t *)(v23 + 208) = v1353;
        *(float64x2_t *)(v23 + 224) = v1348;
        *(float64x2_t *)(v23 + 176) = v1363;
        *(float64x2_t *)(v23 + 192) = v1358;
        *(float64x2_t *)(v23 + 144) = v1373;
        *(float64x2_t *)(v23 + 160) = v1368;
        *(float64x2_t *)(v23 + 112) = v1383;
        *(float64x2_t *)(v23 + 128) = v1378;
        *(float64x2_t *)(v23 + 80) = v1393;
        *(float64x2_t *)(v23 + 96) = v1388;
        *(float64x2_t *)(v23 + 48) = v1403;
        *(float64x2_t *)(v23 + 64) = v1398;
        *(float64x2_t *)(v23 + 16) = v1413;
        *(float64x2_t *)(v23 + 32) = v1408;
        *(float64x2_t *)v23 = v1418;
        *(float64_t *)(v23 + 1792) = v1422.f64[0];
      }
      break;
    default:
      *(_QWORD *)&v1430.f64[0] = v4;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v1430;
      __p.__r_.__value_.__r.__words[2] = v4;
      v1548.f64[0] = 1.0;
      sub_20F2B8D98(v2, (uint64_t)&__p);
      break;
  }
  return 1;
}

void sub_20FBA8AF8(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x1318]))
  {
    if (SLOBYTE(STACK[0x1317]) < 0)
      operator delete((void *)STACK[0x1300]);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0xBD8]);
  _Unwind_Resume(a1);
}

void sub_20FBA8B48(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0xBD8]);
  _Unwind_Resume(a1);
}

void sub_20FBA8B5C(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0xBD8]);
  _Unwind_Resume(a1);
}

void sub_20FBA8B70(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0xBD8]);
  _Unwind_Resume(a1);
}

void sub_20FBA8B84(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0xBD8]);
  _Unwind_Resume(a1);
}

void sub_20FBA8B98(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x1320]) && SLOBYTE(STACK[0x131F]) < 0)
    operator delete((void *)STACK[0x1308]);
  if (STACK[0x1300])
    os_release((void *)STACK[0x1300]);
  sub_20E863714((uint64_t)&STACK[0xBD8]);
  _Unwind_Resume(a1);
}

void sub_20FBA8C30(_Unwind_Exception *a1)
{
  void *v1;
  int v2;

  if (SLOBYTE(STACK[0x1317]) < 0)
    operator delete((void *)STACK[0x1300]);
  if (SLOBYTE(STACK[0xBEF]) < 0)
  {
    operator delete((void *)STACK[0xBD8]);
    if ((v2 & 1) == 0)
      goto LABEL_8;
  }
  else if (!v2)
  {
LABEL_8:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20FBA8CEC(uint64_t a1, uint64_t a2, std::string::size_type a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  int v9;
  __CLPK_doublereal *v10;
  int v11;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char *v21;
  int v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  std::runtime_error *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  char *v30;
  unsigned __int8 v31;
  uint64_t v32;
  const char *v33;
  NSObject *v34;
  std::runtime_error *exception;
  unsigned __int8 v36;
  uint64_t v37;
  const char *v38;
  NSObject *v39;
  std::string v40;
  int v41;
  const char *v42;
  int v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  char *category;
  uint64_t v50;
  std::string::size_type v51;
  uint64_t v52;
  std::string v53;
  uint64_t v54;
  _QWORD v55[5];

  v55[4] = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)a1;
  v9 = *(_DWORD *)(a1 + 20);
  LOBYTE(category) = 117;
  LODWORD(v40.__r_.__value_.__l.__data_) = v9;
  LODWORD(v51) = -1;
  v53.__r_.__value_.__r.__words[0] = 0x100000001;
  sub_20E83455C(&v53, (uint64_t)&category, (int *)&v40, v8, (int *)&v40, (int *)&v51);
  v48 = v51;
  if ((_DWORD)v51)
  {
    v13 = v51;
    sub_20F9B2A4C(&v47);
    if (**(int **)(v47 + 56) <= 4)
    {
      v14 = *(unsigned __int8 *)(v47 + 72);
      v15 = sub_20E8C31DC(v47, "OSLogSurrogateAppender", 1, 0);
      v16 = v15 ? v15 + 16 : 0;
      if (v14 || v15 != 0)
      {
        v40.__r_.__value_.__r.__words[0] = (std::string::size_type)&v47;
        v40.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
        v40.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
        v41 = 4;
        v42 = "unknown file";
        v43 = 3421;
        v45 = 0;
        v46 = 0;
        v44 = "unknown function";
        v18 = *(_QWORD *)v40.__r_.__value_.__l.__data_;
        v19 = (uint64_t *)(*(_QWORD *)v40.__r_.__value_.__l.__data_ + 16);
        if (*(char *)(*(_QWORD *)v40.__r_.__value_.__l.__data_ + 39) < 0)
        {
          v21 = *(char **)(v18 + 16);
          v20 = *(_QWORD *)(v18 + 24);
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)v40.__r_.__value_.__l.__data_ + 39);
          v21 = (char *)(*(_QWORD *)v40.__r_.__value_.__l.__data_ + 16);
        }
        category = v21;
        v50 = v20;
        v31 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v31 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)&v53);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v53);
          if ((_BYTE)v54 && SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v53.__r_.__value_.__l.__data_);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        v32 = byte_254A4A4F8[23];
        if (byte_254A4A4F8[23] >= 0)
        {
          v33 = byte_254A4A4F8;
        }
        else
        {
          v32 = *(_QWORD *)&byte_254A4A4F8[8];
          v33 = *(const char **)byte_254A4A4F8;
        }
        v51 = (std::string::size_type)v33;
        v52 = v32;
        v53.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v33, category);
        sub_20E86E5A8(&v53.__r_.__value_.__l.__size_, (uint64_t)&v51);
        sub_20E86E5A8(v55, (uint64_t)&category);
        v34 = v53.__r_.__value_.__r.__words[0];
        sub_20E86E44C((uint64_t)&v53);
        sub_20FBAB5A8(v16, v19, v34, OS_LOG_TYPE_ERROR, &v48);
        v13 = v48;
        if (v14)
        {
          sub_20E8C003C((uint64_t)&v40, "Failed to factorize the marginalized component of the information matrix (result = %d).", v48);
          sub_20E863570((uint64_t)&v40);
        }
        sub_20E863714((uint64_t)&v40);
      }
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v40, v13);
    sub_20E8B0848("marginalize SW f ", &v40, &v53);
    std::runtime_error::runtime_error(exception, &v53);
    exception->__vftable = (std::runtime_error_vtbl *)&off_24CA04F20;
    __cxa_throw(exception, (struct type_info *)&unk_24CA04F38, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v10 = *(__CLPK_doublereal **)a1;
  v11 = *(_DWORD *)(a1 + 20);
  LOBYTE(category) = 117;
  LODWORD(v40.__r_.__value_.__l.__data_) = v11;
  LODWORD(v51) = -1;
  v53.__r_.__value_.__r.__words[0] = 0x100000001;
  sub_20E8345D0(&v53, (char *)&category, (__CLPK_integer *)&v40, v10, (int *)&v40, (__CLPK_integer *)&v51);
  v48 = v51;
  if ((_DWORD)v51)
  {
    v22 = v51;
    sub_20F9B2A4C(&v47);
    if (**(int **)(v47 + 56) <= 4)
    {
      v23 = *(unsigned __int8 *)(v47 + 72);
      v24 = sub_20E8C31DC(v47, "OSLogSurrogateAppender", 1, 0);
      v25 = v24 ? v24 + 16 : 0;
      if (v23 || v24)
      {
        v40.__r_.__value_.__r.__words[0] = (std::string::size_type)&v47;
        v40.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
        v40.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
        v41 = 4;
        v42 = "unknown file";
        v43 = 3429;
        v45 = 0;
        v46 = 0;
        v44 = "unknown function";
        v27 = *(_QWORD *)v40.__r_.__value_.__l.__data_;
        v28 = (uint64_t *)(*(_QWORD *)v40.__r_.__value_.__l.__data_ + 16);
        if (*(char *)(*(_QWORD *)v40.__r_.__value_.__l.__data_ + 39) < 0)
        {
          v30 = *(char **)(v27 + 16);
          v29 = *(_QWORD *)(v27 + 24);
        }
        else
        {
          v29 = *(unsigned __int8 *)(*(_QWORD *)v40.__r_.__value_.__l.__data_ + 39);
          v30 = (char *)(*(_QWORD *)v40.__r_.__value_.__l.__data_ + 16);
        }
        category = v30;
        v50 = v29;
        v36 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v36 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)&v53);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v53);
          if ((_BYTE)v54 && SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v53.__r_.__value_.__l.__data_);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        v37 = byte_254A4A4F8[23];
        if (byte_254A4A4F8[23] >= 0)
        {
          v38 = byte_254A4A4F8;
        }
        else
        {
          v37 = *(_QWORD *)&byte_254A4A4F8[8];
          v38 = *(const char **)byte_254A4A4F8;
        }
        v51 = (std::string::size_type)v38;
        v52 = v37;
        v53.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v38, category);
        sub_20E86E5A8(&v53.__r_.__value_.__l.__size_, (uint64_t)&v51);
        sub_20E86E5A8(v55, (uint64_t)&category);
        v39 = v53.__r_.__value_.__r.__words[0];
        sub_20E86E44C((uint64_t)&v53);
        sub_20FBAB9E8(v25, v28, v39, OS_LOG_TYPE_ERROR, &v48);
        v22 = v48;
        if (v23)
        {
          sub_20E8C003C((uint64_t)&v40, "Failed to invert the marginalized component of the information matrix (result = %d).", v48);
          sub_20E863570((uint64_t)&v40);
        }
        sub_20E863714((uint64_t)&v40);
      }
    }
    v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v40, v22);
    sub_20E8B0848("marginalize SW i ", &v40, &v53);
    std::runtime_error::runtime_error(v26, &v53);
    v26->__vftable = (std::runtime_error_vtbl *)&off_24CA04F20;
    __cxa_throw(v26, (struct type_info *)&unk_24CA04F38, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v51 = a3;
  category = (char *)a1;
  v40.__r_.__value_.__r.__words[0] = (std::string::size_type)&v51;
  v40.__r_.__value_.__l.__size_ = (std::string::size_type)&category;
  v53.__r_.__value_.__l.__size_ = (std::string::size_type)&v40;
  v53.__r_.__value_.__r.__words[2] = a3;
  v54 = 0x3FF0000000000000;
  sub_20FBABE28(a5, (uint64_t)&v53);
  return 1;
}

void sub_20FBA92A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  if (a31)
  {
    if (a30 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_20FBA92E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FBA92FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FBA9310(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FBA9324(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FBA9338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *object,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32)
{
  if (a32 && a31 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_20FBA93C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  int v34;

  if (a33 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v34 & 1) == 0)
      goto LABEL_8;
  }
  else if (!v34)
  {
LABEL_8:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v33);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FBA9474(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_20FBA9608(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_20E860DA4(a1);
}

void sub_20FBA9614(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20FBA99A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FBA99C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FBA99DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

uint64_t sub_20FBA9A00(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  size_t v7;
  size_t v8;
  _QWORD *v9;
  BOOL v10;
  unsigned int v11;
  _QWORD *v12;
  unint64_t v14;
  size_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;

  v4 = *a2;
  v5 = *(_DWORD *)(*a2 + 16);
  v6 = *(_DWORD *)(*a2 + 20);
  v7 = (8 * (v6 * v5) + 31) & 0xFFFFFFFE0;
  v8 = v7 >> 3;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v7 >> 3;
  v9 = operator new(v7, (std::align_val_t)0x20uLL);
  v10 = 0;
  *(_QWORD *)a1 = v9;
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v6;
  *(_BYTE *)(a1 + 24) = 0;
  v11 = *(_DWORD *)(v4 + 16);
  if (v11 == *(_DWORD *)(v4 + 20))
  {
    v12 = v9;
    if (v11 == v5 && v11 == v6)
    {
      v17 = (v5 * v6);
      if (!(_DWORD)v17)
        goto LABEL_27;
    }
    else
    {
      if (*(_QWORD **)v4 == v9)
      {
        v18 = v11 * v11;
        v19 = operator new((8 * v18 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
        if ((_DWORD)v18)
        {
          v20 = 0;
          v21 = 8 * v18;
          v22 = v19;
          do
          {
            v26 = 0;
            if (v20 <= HIDWORD(v20))
              v26 = v12[v11 * HIDWORD(v20) + v20];
            *v22++ = v26;
            v23 = (v20 + 1);
            v24 = v20 & 0xFFFFFFFF00000000;
            v25 = v24 | v23;
            v20 = v24 + 0x100000000;
            if ((int)v11 > (int)v23)
              v20 = v25;
            v21 -= 8;
          }
          while (v21);
        }
        *(_QWORD *)a1 = v19;
        *(_QWORD *)(a1 + 8) = ((8 * v11 * v11 + 31) & 0xFFFFFFFE0uLL) >> 3;
        *(_DWORD *)(a1 + 16) = v11;
        *(_DWORD *)(a1 + 20) = v11;
        MEMORY[0x212BC6368](v12, 0x1000C8000313F17);
        goto LABEL_27;
      }
      *(_DWORD *)(a1 + 16) = v11;
      *(_DWORD *)(a1 + 20) = v11;
      v14 = v11 * (unint64_t)v11;
      if (v8 >= v14)
      {
        v17 = v11 * v11;
        if (!(_DWORD)v17)
        {
LABEL_27:
          v10 = sub_20E8BE990() == 0;
          goto LABEL_28;
        }
      }
      else
      {
        MEMORY[0x212BC6368](v9, 0x1000C8000313F17);
        v15 = (8 * v14 + 31) & 0xFFFFFFFFFFFFFFE0;
        *(_QWORD *)a1 = 0;
        *(_QWORD *)(a1 + 8) = v15 >> 3;
        v16 = operator new(v15, (std::align_val_t)0x20uLL);
        *(_QWORD *)a1 = v16;
        v12 = v16;
        v4 = *a2;
        v17 = (*(_DWORD *)(a1 + 16) * *(_DWORD *)(a1 + 20));
        if (!(_DWORD)v17)
          goto LABEL_27;
      }
    }
    v27 = 0;
    v28 = 0;
    v29 = *(_DWORD *)(v4 + 16);
    v30 = 8 * v17;
    do
    {
      v34 = 0;
      if (v28 <= HIDWORD(v28))
        v34 = *(_QWORD *)(*(_QWORD *)v4 + 8 * (v28 + v29 * HIDWORD(v28)));
      v12[v27 / 8] = v34;
      v31 = (v28 + 1);
      v32 = v28 & 0xFFFFFFFF00000000;
      v33 = v32 | v31;
      v28 = v32 + 0x100000000;
      if (v29 > (int)v31)
        v28 = v33;
      v27 += 8;
    }
    while (v30 != v27);
    goto LABEL_27;
  }
LABEL_28:
  *(_BYTE *)(a1 + 24) = v10;
  return a1;
}

void sub_20FBA9C4C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    MEMORY[0x212BC6368](v1, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

void sub_20FBA9C80(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20FBAA010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FBAA034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FBAA048(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

unint64_t *sub_20FBAA06C(unint64_t *result, uint64_t a2)
{
  unint64_t *v3;
  uint64_t v4;
  size_t *v5;
  size_t v6;
  size_t v7;
  int v8;
  int v9;
  size_t v10;
  unint64_t *v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  double *v17;
  double *v18;
  unint64_t v19;
  uint64_t v20;
  float64x2_t *v21;
  float64x2_t *v22;
  uint64_t v23;
  float64x2_t v24;
  double *v25;
  double v26;
  _QWORD v27[2];
  int v28;
  int v29;
  char *v30;
  size_t v31;
  size_t v32;
  uint64_t v33;
  uint64_t v34;

  v3 = result;
  v34 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 16);
  if (*(_QWORD *)v4 == *result)
  {
    v12 = *(unsigned int *)(***(_QWORD ***)(a2 + 8) + 20);
    v13 = (8 * v12 + 31) & 0xFFFFFFFE0;
    v31 = v13 >> 3;
    v30 = (char *)operator new(v13, (std::align_val_t)0x20uLL);
    LODWORD(v32) = v12;
    sub_20FBAA2EC((uint64_t)&v30, a2);
    v14 = *((unsigned int *)v3 + 4);
    result = (unint64_t *)v30;
    if (!(_DWORD)v14)
      goto LABEL_16;
    v15 = *v3;
    v16 = (v14 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v16 >= 9)
    {
      if (v15 >= (unint64_t)&v30[8 * v14]
        || (v17 = (double *)v30, v18 = (double *)*v3, (unint64_t)v30 >= v15 + 8 * v14))
      {
        v19 = v16 + 1;
        v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
        v17 = (double *)&v30[v20];
        v18 = (double *)(v15 + v20);
        v21 = (float64x2_t *)(v15 + 16);
        v22 = (float64x2_t *)(v30 + 16);
        v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v24 = vsubq_f64(*v21, *v22);
          v21[-1] = vsubq_f64(v21[-1], v22[-1]);
          *v21 = v24;
          v21 += 2;
          v22 += 2;
          v23 -= 4;
        }
        while (v23);
        if (v19 == (v19 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_16:
          if (!result)
            return result;
          return (unint64_t *)MEMORY[0x212BC6368](result, 0x1000C8000313F17);
        }
      }
    }
    else
    {
      v17 = (double *)v30;
      v18 = (double *)*v3;
    }
    v25 = (double *)(v15 + 8 * v14);
    do
    {
      v26 = *v17++;
      *v18 = *v18 - v26;
      ++v18;
    }
    while (v18 != v25);
    goto LABEL_16;
  }
  v5 = *(size_t **)(a2 + 8);
  v6 = *v5;
  v7 = v5[1];
  v8 = *(_DWORD *)(*(_QWORD *)*v5 + 20);
  v9 = *(_DWORD *)(**(_QWORD **)v7 + 16);
  if (v9 * v8)
  {
    if (*(_DWORD *)(v4 + 16))
    {
      v10 = (8 * (v9 * v8) + 31) & 0xFFFFFFFE0;
      v27[1] = v10 >> 3;
      v27[0] = operator new(v10, (std::align_val_t)0x20uLL);
      v28 = v8;
      v29 = v9;
      v31 = v6;
      v32 = v7;
      v33 = 0x3FF0000000000000;
      sub_20FBAA500((uint64_t)v27, (uint64_t)&v30);
      v11 = (unint64_t *)v27[0];
      result = (unint64_t *)sub_20E8BE6CC();
      if (v11)
      {
        result = v11;
        return (unint64_t *)MEMORY[0x212BC6368](result, 0x1000C8000313F17);
      }
    }
  }
  return result;
}

void sub_20FBAA2A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;

  if (v14)
    MEMORY[0x212BC6368](v14, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

void sub_20FBAA2EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  size_t *v6;
  size_t v7;
  size_t v8;
  int v9;
  int v10;
  size_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  size_t v17;
  _QWORD v18[2];
  int v19;
  int v20;
  void *v21;
  size_t v22;
  size_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(void **)a1;
  if (*(void **)v4 == v5)
  {
    v15 = *(unsigned int *)(***(_QWORD ***)(a2 + 8) + 20);
    v16 = (8 * v15 + 31) & 0xFFFFFFFE0;
    v22 = v16 >> 3;
    v21 = operator new(v16, (std::align_val_t)0x20uLL);
    LODWORD(v23) = v15;
    sub_20FBAA2EC(&v21, a2);
    v13 = *(void **)a1;
    v17 = v22;
    *(_QWORD *)a1 = v21;
    *(_QWORD *)(a1 + 8) = v17;
    *(_DWORD *)(a1 + 16) = v23;
    if (!v13)
      return;
    goto LABEL_9;
  }
  v6 = *(size_t **)(a2 + 8);
  v7 = *v6;
  v8 = v6[1];
  v9 = *(_DWORD *)(*(_QWORD *)*v6 + 20);
  v10 = *(_DWORD *)(**(_QWORD **)v8 + 16);
  if (v10 * v9 && *(_DWORD *)(v4 + 16))
  {
    v11 = (8 * (v10 * v9) + 31) & 0xFFFFFFFE0;
    v18[1] = v11 >> 3;
    v18[0] = operator new(v11, (std::align_val_t)0x20uLL);
    v19 = v9;
    v20 = v10;
    v22 = v7;
    v23 = v8;
    v24 = 0x3FF0000000000000;
    sub_20FBAA500((uint64_t)v18, (uint64_t)&v21);
    v12 = (void *)v18[0];
    sub_20E8BE6CC();
    if (!v12)
      return;
    v13 = v12;
LABEL_9:
    MEMORY[0x212BC6368](v13, 0x1000C8000313F17);
    return;
  }
  v14 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v14)
    bzero(v5, 8 * v14);
}

void sub_20FBAA4B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;

  if (v14)
    MEMORY[0x212BC6368](v14, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

void sub_20FBAA500(uint64_t a1, uint64_t a2)
{
  double *v4;
  uint64_t v5;
  const double *v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  double *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  double v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  size_t v22;
  double *v23;
  size_t v24;
  void *v25;
  size_t v26;
  unint64_t v27;

  v4 = *(double **)a1;
  v5 = **(_QWORD **)(a2 + 8);
  v6 = *(const double **)v5;
  if (*(_QWORD *)v5 == *(_QWORD *)a1)
  {
    v20 = *(_DWORD *)(v5 + 20);
    v21 = *(_DWORD *)(***(_QWORD ***)(a2 + 16) + 16);
    v22 = (8 * v21 * v20 + 31) & 0xFFFFFFFE0;
    v26 = v22 >> 3;
    v25 = operator new(v22, (std::align_val_t)0x20uLL);
    v27 = __PAIR64__(v21, v20);
    sub_20FBAA500(&v25, a2);
    v23 = *(double **)a1;
    v24 = v26;
    *(_QWORD *)a1 = v25;
    *(_QWORD *)(a1 + 8) = v24;
    *(_QWORD *)(a1 + 16) = v27;
    if (v23)
      MEMORY[0x212BC6368](v23, 0x1000C8000313F17);
  }
  else
  {
    v7 = *(_DWORD *)(v5 + 16);
    v8 = *(_DWORD *)(v5 + 20);
    if (v7 * v8)
    {
      v9 = ***(_QWORD ***)(a2 + 16);
      v10 = *(_DWORD *)(v9 + 16);
      if (v10 * *(_DWORD *)(v9 + 20))
      {
        v11 = 8 * (v10 * *(_DWORD *)(v9 + 20));
        v12 = (double *)operator new((v11 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
        v13 = 0;
        v14 = 0;
        while (1)
        {
          v18 = 0.0;
          if (v14 <= HIDWORD(v14))
            v18 = *(double *)(*(_QWORD *)v9 + 8 * (v14 + v10 * HIDWORD(v14)));
          v12[v13 / 8] = v18;
          v15 = (v14 + 1);
          v16 = v14 & 0xFFFFFFFF00000000;
          v17 = v16 | v15;
          v14 = v16 + 0x100000000;
          if (v10 > (int)v15)
            v14 = v17;
          v13 += 8;
          if (v11 == v13)
          {
            sub_20E8BE654(1, 1, v8, v10, v7, v6, v7, v12, *(double *)(a2 + 24), 0.0, v10, v4, *(_DWORD *)(a1 + 16));
            JUMPOUT(0x212BC6368);
          }
        }
      }
    }
    v19 = *(_DWORD *)(a1 + 20);
    if (v19 * *(_DWORD *)(a1 + 16))
      bzero(*(void **)a1, 8 * (v19 * *(_DWORD *)(a1 + 16)));
  }
}

void sub_20FBAA70C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6368](v1, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

void sub_20FBAA740(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double *v5;
  double *v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  const double *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  double v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  size_t v22;
  double *v23;
  size_t v24;
  int v25;
  void *v26;
  size_t v27;
  unint64_t v28;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(double **)a1;
  v6 = *(double **)v4;
  if (*(_QWORD *)v4 == *(_QWORD *)a1)
  {
    v20 = *(_DWORD *)(***(_QWORD ***)(a2 + 8) + 20);
    v21 = *(_DWORD *)(v4 + 20);
    v22 = (8 * v21 * v20 + 31) & 0xFFFFFFFE0;
    v27 = v22 >> 3;
    v26 = operator new(v22, (std::align_val_t)0x20uLL);
    v28 = __PAIR64__(v21, v20);
    sub_20FBAA740(&v26, a2);
    v23 = *(double **)a1;
    v24 = v27;
    *(_QWORD *)a1 = v26;
    *(_QWORD *)(a1 + 8) = v24;
    *(_QWORD *)(a1 + 16) = v28;
    if (v23)
      MEMORY[0x212BC6368](v23, 0x1000C8000313F17);
  }
  else
  {
    v7 = ***(_QWORD ***)(a2 + 8);
    v8 = *(_DWORD *)(v7 + 16);
    v9 = *(_DWORD *)(v7 + 20);
    if (v8 * v9)
    {
      v10 = *(_DWORD *)(v4 + 20);
      if (v10 * *(_DWORD *)(v4 + 16))
      {
        v25 = *(_DWORD *)(v4 + 16);
        v11 = 8 * (v8 * v9);
        v12 = (const double *)operator new((v11 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
        v13 = 0;
        v14 = 0;
        while (1)
        {
          v18 = 0.0;
          if (v14 <= HIDWORD(v14))
            v18 = *(double *)(*(_QWORD *)v7 + 8 * (v14 + v8 * HIDWORD(v14)));
          v12[v13 / 8] = v18;
          v15 = (v14 + 1);
          v16 = v14 & 0xFFFFFFFF00000000;
          v17 = v16 | v15;
          v14 = v16 + 0x100000000;
          if (v8 > (int)v15)
            v14 = v17;
          v13 += 8;
          if (v11 == v13)
          {
            sub_20E8BE654(1, 0, v9, v10, v8, v12, v8, v6, *(double *)(a2 + 24), 0.0, v25, v5, *(_DWORD *)(a1 + 16));
            JUMPOUT(0x212BC6368);
          }
        }
      }
    }
    v19 = *(_DWORD *)(a1 + 20);
    if (v19 * *(_DWORD *)(a1 + 16))
      bzero(*(void **)a1, 8 * (v19 * *(_DWORD *)(a1 + 16)));
  }
}

void sub_20FBAA950(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6368](v1, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

void sub_20FBAA984(double *a1, uint64_t a2)
{
  uint64_t v3;
  const double *v4;
  uint64_t v5;
  double *v6;
  _BYTE __src[1800];

  v3 = **(_QWORD **)(a2 + 8);
  v4 = *(const double **)(v3 + 8);
  if (&v4[-*(unsigned int *)(v3 + 16)] == a1
    || (v5 = *(_QWORD *)(a2 + 16), v6 = *(double **)(v5 + 8), &v6[-*(unsigned int *)(v5 + 16)] == a1))
  {
    sub_20FBAA984(__src);
    memcpy(a1, __src, 0x708uLL);
  }
  else if (*(_DWORD *)v3 && *(_DWORD *)v5)
  {
    sub_20E8BE654(1, 0, 15, 15, *(_DWORD *)v3, v4, *(_DWORD *)(v3 + 4), v6, *(double *)(a2 + 24), 0.0, *(_DWORD *)(v5 + 4), a1, 15);
  }
  else
  {
    bzero(a1, 0x708uLL);
  }
}

void sub_20FBAAA60(double *a1, uint64_t a2)
{
  uint64_t v3;
  const double *v4;
  uint64_t v5;
  double *v6;
  _BYTE __src[3528];

  v3 = **(_QWORD **)(a2 + 8);
  v4 = *(const double **)(v3 + 8);
  if (&v4[-*(unsigned int *)(v3 + 16)] == a1
    || (v5 = *(_QWORD *)(a2 + 16), v6 = *(double **)(v5 + 8), &v6[-*(unsigned int *)(v5 + 16)] == a1))
  {
    sub_20FBAAA60(__src);
    memcpy(a1, __src, 0xDC8uLL);
  }
  else if (*(_DWORD *)v3 && *(_DWORD *)v5)
  {
    sub_20E8BE654(1, 0, 21, 21, *(_DWORD *)v3, v4, *(_DWORD *)(v3 + 4), v6, *(double *)(a2 + 24), 0.0, *(_DWORD *)(v5 + 4), a1, 21);
  }
  else
  {
    bzero(a1, 0xDC8uLL);
  }
}

void sub_20FBAAB3C(double *a1, uint64_t a2)
{
  uint64_t v3;
  const double *v4;
  uint64_t v5;
  double *v6;
  _BYTE __src[3872];

  v3 = **(_QWORD **)(a2 + 8);
  v4 = *(const double **)(v3 + 8);
  if (&v4[-*(unsigned int *)(v3 + 16)] == a1
    || (v5 = *(_QWORD *)(a2 + 16), v6 = *(double **)(v5 + 8), &v6[-*(unsigned int *)(v5 + 16)] == a1))
  {
    sub_20FBAAB3C(__src);
    memcpy(a1, __src, 0xF20uLL);
  }
  else if (22 * *(_DWORD *)v3 && 22 * *(_DWORD *)v5)
  {
    sub_20E8BE654(1, 0, 22, 22, *(_DWORD *)v3, v4, *(_DWORD *)(v3 + 4), v6, *(double *)(a2 + 24), 0.0, *(_DWORD *)(v5 + 4), a1, 22);
  }
  else
  {
    bzero(a1, 0xF20uLL);
  }
}

void sub_20FBAAC28()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20FBAAC3C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24CA04830;
  result[1] = v3;
  return result;
}

uint64_t sub_20FBAAC70(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24CA04830;
  a2[1] = v2;
  return result;
}

uint64_t sub_20FBAAC8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(a1 + 8))(a2, a3, a4, *a5, a6, a7);
}

uint64_t sub_20FBAACB0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "PFbON3cva6MatrixIdLj0ELj0ELb0EEERKNS0_IdLj0ELj1ELb0EEERS1_bS6_RS3_E")
    return a1 + 8;
  if (((v3 & (unint64_t)"PFbON3cva6MatrixIdLj0ELj0ELb0EEERKNS0_IdLj0ELj1ELb0EEERS1_bS6_RS3_E" & 0x8000000000000000) != 0) == __OFSUB__(v3, "PFbON3cva6MatrixIdLj0ELj0ELb0EEERKNS0_IdLj0ELj1ELb0EEERS1_bS6_RS3_E"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"PFbON3cva6MatrixIdLj0ELj0ELb0EEERKNS0_IdLj0ELj1ELb0EEERS1_bS6_RS3_E" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20FBAAD1C()
{
  return &unk_24CA048B0;
}

void sub_20FBAAD28(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, int *a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count_vtbl *v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  int v35;
  void *v36;
  uint64_t v37;
  std::__shared_weak_count_vtbl *v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v12 = v11;
    v11->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    v38 = v10;
    *(_QWORD *)&v39 = v10;
    *((_QWORD *)&v39 + 1) = v11;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    v40 = 0uLL;
    v41 = 0;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v12);
    }
    v16 = v38;
    v17 = (_DWORD *)_os_log_pack_fill();
    v18 = *a5;
    *v17 = 67109120;
    v17[1] = v18;
    v19 = operator new();
    v20 = *((unsigned __int8 *)a2 + 23);
    if ((v20 & 0x80u) == 0)
      v21 = a2;
    else
      v21 = (uint64_t *)*a2;
    if ((v20 & 0x80u) != 0)
      v20 = a2[1];
    *(_QWORD *)v19 = v16;
    *(_OWORD *)(v19 + 8) = v39;
    v39 = 0uLL;
    *(_OWORD *)(v19 + 24) = v40;
    v40 = 0uLL;
    *(_QWORD *)(v19 + 40) = v21;
    *(_QWORD *)(v19 + 48) = v20;
    *(_BYTE *)(v19 + 56) = type;
    v37 = v19;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v37);
    v22 = v37;
    v37 = 0;
    if (v22)
    {
      v23 = *(std::__shared_weak_count **)(v22 + 32);
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v26 = *(std::__shared_weak_count **)(v22 + 16);
      if (v26)
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      MEMORY[0x212BC6398](v22, 0x10F0C40B62ED6C6);
    }
    v29 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (*((_QWORD *)&v40 + 1))
    {
      v30 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
    if (*((_QWORD *)&v39 + 1))
    {
      v33 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v35 = *a5;
    LODWORD(v38) = 67109120;
    HIDWORD(v38) = v35;
    v36 = (void *)_os_log_send_and_compose_impl();
    if (v36)
      free(v36);
  }
}

void sub_20FBAB10C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20FBAB130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FBAB144(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20FBAB168(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, int *a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count_vtbl *v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  int v35;
  void *v36;
  uint64_t v37;
  std::__shared_weak_count_vtbl *v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v12 = v11;
    v11->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    v38 = v10;
    *(_QWORD *)&v39 = v10;
    *((_QWORD *)&v39 + 1) = v11;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    v40 = 0uLL;
    v41 = 0;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v12);
    }
    v16 = v38;
    v17 = (_DWORD *)_os_log_pack_fill();
    v18 = *a5;
    *v17 = 67109120;
    v17[1] = v18;
    v19 = operator new();
    v20 = *((unsigned __int8 *)a2 + 23);
    if ((v20 & 0x80u) == 0)
      v21 = a2;
    else
      v21 = (uint64_t *)*a2;
    if ((v20 & 0x80u) != 0)
      v20 = a2[1];
    *(_QWORD *)v19 = v16;
    *(_OWORD *)(v19 + 8) = v39;
    v39 = 0uLL;
    *(_OWORD *)(v19 + 24) = v40;
    v40 = 0uLL;
    *(_QWORD *)(v19 + 40) = v21;
    *(_QWORD *)(v19 + 48) = v20;
    *(_BYTE *)(v19 + 56) = type;
    v37 = v19;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v37);
    v22 = v37;
    v37 = 0;
    if (v22)
    {
      v23 = *(std::__shared_weak_count **)(v22 + 32);
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v26 = *(std::__shared_weak_count **)(v22 + 16);
      if (v26)
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      MEMORY[0x212BC6398](v22, 0x10F0C40B62ED6C6);
    }
    v29 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (*((_QWORD *)&v40 + 1))
    {
      v30 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
    if (*((_QWORD *)&v39 + 1))
    {
      v33 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v35 = *a5;
    LODWORD(v38) = 67109120;
    HIDWORD(v38) = v35;
    v36 = (void *)_os_log_send_and_compose_impl();
    if (v36)
      free(v36);
  }
}

void sub_20FBAB54C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20FBAB570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FBAB584(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20FBAB5A8(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, int *a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count_vtbl *v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  int v35;
  void *v36;
  uint64_t v37;
  std::__shared_weak_count_vtbl *v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v12 = v11;
    v11->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    v38 = v10;
    *(_QWORD *)&v39 = v10;
    *((_QWORD *)&v39 + 1) = v11;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    v40 = 0uLL;
    v41 = 0;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v12);
    }
    v16 = v38;
    v17 = (_DWORD *)_os_log_pack_fill();
    v18 = *a5;
    *v17 = 67109120;
    v17[1] = v18;
    v19 = operator new();
    v20 = *((unsigned __int8 *)a2 + 23);
    if ((v20 & 0x80u) == 0)
      v21 = a2;
    else
      v21 = (uint64_t *)*a2;
    if ((v20 & 0x80u) != 0)
      v20 = a2[1];
    *(_QWORD *)v19 = v16;
    *(_OWORD *)(v19 + 8) = v39;
    v39 = 0uLL;
    *(_OWORD *)(v19 + 24) = v40;
    v40 = 0uLL;
    *(_QWORD *)(v19 + 40) = v21;
    *(_QWORD *)(v19 + 48) = v20;
    *(_BYTE *)(v19 + 56) = type;
    v37 = v19;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v37);
    v22 = v37;
    v37 = 0;
    if (v22)
    {
      v23 = *(std::__shared_weak_count **)(v22 + 32);
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v26 = *(std::__shared_weak_count **)(v22 + 16);
      if (v26)
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      MEMORY[0x212BC6398](v22, 0x10F0C40B62ED6C6);
    }
    v29 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (*((_QWORD *)&v40 + 1))
    {
      v30 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
    if (*((_QWORD *)&v39 + 1))
    {
      v33 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v35 = *a5;
    LODWORD(v38) = 67109120;
    HIDWORD(v38) = v35;
    v36 = (void *)_os_log_send_and_compose_impl();
    if (v36)
      free(v36);
  }
}

void sub_20FBAB98C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20FBAB9B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FBAB9C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20FBAB9E8(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, int *a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count_vtbl *v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  int v35;
  void *v36;
  uint64_t v37;
  std::__shared_weak_count_vtbl *v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v12 = v11;
    v11->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    v38 = v10;
    *(_QWORD *)&v39 = v10;
    *((_QWORD *)&v39 + 1) = v11;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    v40 = 0uLL;
    v41 = 0;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v12);
    }
    v16 = v38;
    v17 = (_DWORD *)_os_log_pack_fill();
    v18 = *a5;
    *v17 = 67109120;
    v17[1] = v18;
    v19 = operator new();
    v20 = *((unsigned __int8 *)a2 + 23);
    if ((v20 & 0x80u) == 0)
      v21 = a2;
    else
      v21 = (uint64_t *)*a2;
    if ((v20 & 0x80u) != 0)
      v20 = a2[1];
    *(_QWORD *)v19 = v16;
    *(_OWORD *)(v19 + 8) = v39;
    v39 = 0uLL;
    *(_OWORD *)(v19 + 24) = v40;
    v40 = 0uLL;
    *(_QWORD *)(v19 + 40) = v21;
    *(_QWORD *)(v19 + 48) = v20;
    *(_BYTE *)(v19 + 56) = type;
    v37 = v19;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v37);
    v22 = v37;
    v37 = 0;
    if (v22)
    {
      v23 = *(std::__shared_weak_count **)(v22 + 32);
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v26 = *(std::__shared_weak_count **)(v22 + 16);
      if (v26)
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      MEMORY[0x212BC6398](v22, 0x10F0C40B62ED6C6);
    }
    v29 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (*((_QWORD *)&v40 + 1))
    {
      v30 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
    if (*((_QWORD *)&v39 + 1))
    {
      v33 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v35 = *a5;
    LODWORD(v38) = 67109120;
    HIDWORD(v38) = v35;
    v36 = (void *)_os_log_send_and_compose_impl();
    if (v36)
      free(v36);
  }
}

void sub_20FBABDCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20FBABDF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FBABE04(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20FBABE28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  size_t *v5;
  size_t v6;
  unint64_t v7;
  int v8;
  int v9;
  size_t v10;
  uint64_t v11;
  _QWORD **v12;
  double v13;
  const double *v14;
  float64x2_t *v15;
  unsigned int v16;
  unsigned int v17;
  size_t v18;
  uint64_t v19;
  double *v20;
  unint64_t v21;
  double *v22;
  double *v23;
  BOOL v24;
  unint64_t v25;
  uint64_t v26;
  float64x2_t *v27;
  float64x2_t *v28;
  uint64_t v29;
  float64x2_t v30;
  double *v31;
  double v32;
  int v33[2];
  size_t v34;
  int __lda;
  int v36;
  float64x2_t *v37;
  size_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 16);
  if (*(_QWORD *)v4 == *(_QWORD *)a1)
  {
    v16 = *(_DWORD *)(***(_QWORD ***)(a2 + 8) + 20);
    v17 = *(_DWORD *)(v4 + 20);
    v18 = (8 * v17 * v16 + 31) & 0xFFFFFFFE0;
    v38 = v18 >> 3;
    v37 = (float64x2_t *)operator new(v18, (std::align_val_t)0x20uLL);
    v39 = __PAIR64__(v17, v16);
    sub_20FBAC0CC((uint64_t)&v37, a2);
    v19 = (*(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
    v15 = v37;
    if (!(_DWORD)v19)
      goto LABEL_19;
    v20 = *(double **)a1;
    v21 = (v19 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v21 >= 9)
    {
      v24 = v20 >= &v37->f64[v19] || v37 >= (float64x2_t *)&v20[v19];
      v22 = (double *)v37;
      v23 = *(double **)a1;
      if (v24)
      {
        v25 = v21 + 1;
        v26 = v25 & 0x3FFFFFFFFFFFFFFCLL;
        v22 = &v37->f64[v26];
        v23 = &v20[v26];
        v27 = (float64x2_t *)(v20 + 2);
        v28 = v37 + 1;
        v29 = v25 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v30 = vsubq_f64(*v27, *v28);
          v27[-1] = vsubq_f64(v27[-1], v28[-1]);
          *v27 = v30;
          v27 += 2;
          v28 += 2;
          v29 -= 4;
        }
        while (v29);
        if (v25 == (v25 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_19:
          if (!v15)
            return;
          goto LABEL_20;
        }
      }
    }
    else
    {
      v22 = (double *)v37;
      v23 = *(double **)a1;
    }
    v31 = &v20[v19];
    do
    {
      v32 = *v22++;
      *v23 = *v23 - v32;
      ++v23;
    }
    while (v23 != v31);
    goto LABEL_19;
  }
  v5 = *(size_t **)(a2 + 8);
  v6 = *v5;
  v7 = v5[1];
  v8 = *(_DWORD *)(*(_QWORD *)*v5 + 20);
  v9 = *(_DWORD *)(*(_QWORD *)v7 + 20);
  if (v9 * v8)
  {
    if (*(_DWORD *)(v4 + 20) * *(_DWORD *)(v4 + 16))
    {
      v10 = (8 * (v9 * v8) + 31) & 0xFFFFFFFE0;
      v34 = v10 >> 3;
      *(_QWORD *)v33 = operator new(v10, (std::align_val_t)0x20uLL);
      __lda = v8;
      v36 = v9;
      v38 = v6;
      v39 = v7;
      v40 = 0x3FF0000000000000;
      sub_20FBAC308((uint64_t)v33, (uint64_t)&v37);
      v12 = *(_QWORD ***)(a2 + 8);
      v11 = *(_QWORD *)(a2 + 16);
      v13 = -*(double *)(a2 + 24);
      v14 = *(const double **)v33;
      sub_20E8BE654(0, 0, *(_DWORD *)(**v12 + 20), *(_DWORD *)(v11 + 20), *(_DWORD *)(*v12[1] + 20), *(const double **)v33, __lda, *(double **)v11, v13, 1.0, *(_DWORD *)(v11 + 16), *(double **)a1, *(_DWORD *)(a1 + 16));
      if (v14)
      {
        v15 = (float64x2_t *)v14;
LABEL_20:
        MEMORY[0x212BC6368](v15, 0x1000C8000313F17);
      }
    }
  }
}

void sub_20FBAC084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;

  if (v16)
    MEMORY[0x212BC6368](v16, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

void sub_20FBAC0CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double *v5;
  size_t *v6;
  size_t v7;
  unint64_t v8;
  int v9;
  int v10;
  size_t v11;
  uint64_t v12;
  _QWORD **v13;
  double v14;
  const double *v15;
  void *v16;
  unsigned int v17;
  unsigned int v18;
  size_t v19;
  size_t v20;
  int v21[2];
  size_t v22;
  int __lda;
  int v24;
  void *v25;
  size_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(double **)a1;
  if (*(double **)v4 == v5)
  {
    v17 = *(_DWORD *)(***(_QWORD ***)(a2 + 8) + 20);
    v18 = *(_DWORD *)(v4 + 20);
    v19 = (8 * v18 * v17 + 31) & 0xFFFFFFFE0;
    v26 = v19 >> 3;
    v25 = operator new(v19, (std::align_val_t)0x20uLL);
    v27 = __PAIR64__(v18, v17);
    sub_20FBAC0CC(&v25, a2);
    v16 = *(void **)a1;
    v20 = v26;
    *(_QWORD *)a1 = v25;
    *(_QWORD *)(a1 + 8) = v20;
    *(_QWORD *)(a1 + 16) = v27;
    if (!v16)
      return;
    goto LABEL_9;
  }
  v6 = *(size_t **)(a2 + 8);
  v7 = *v6;
  v8 = v6[1];
  v9 = *(_DWORD *)(*(_QWORD *)*v6 + 20);
  v10 = *(_DWORD *)(*(_QWORD *)v8 + 20);
  if (v10 * v9 && *(_DWORD *)(v4 + 20) * *(_DWORD *)(v4 + 16))
  {
    v11 = (8 * (v10 * v9) + 31) & 0xFFFFFFFE0;
    v22 = v11 >> 3;
    *(_QWORD *)v21 = operator new(v11, (std::align_val_t)0x20uLL);
    __lda = v9;
    v24 = v10;
    v26 = v7;
    v27 = v8;
    v28 = 0x3FF0000000000000;
    sub_20FBAC308((uint64_t)v21, (uint64_t)&v25);
    v13 = *(_QWORD ***)(a2 + 8);
    v12 = *(_QWORD *)(a2 + 16);
    v14 = *(double *)(a2 + 24);
    v15 = *(const double **)v21;
    sub_20E8BE654(0, 0, *(_DWORD *)(**v13 + 20), *(_DWORD *)(v12 + 20), *(_DWORD *)(*v13[1] + 20), *(const double **)v21, __lda, *(double **)v12, v14, 0.0, *(_DWORD *)(v12 + 16), *(double **)a1, *(_DWORD *)(a1 + 16));
    if (!v15)
      return;
    v16 = (void *)v15;
LABEL_9:
    MEMORY[0x212BC6368](v16, 0x1000C8000313F17);
    return;
  }
  if (*(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16))
    bzero(v5, 8 * (*(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16)));
}

void sub_20FBAC2C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;

  if (v16)
    MEMORY[0x212BC6368](v16, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

void sub_20FBAC308(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  size_t v7;
  double *v8;
  double *v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  int32x4_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  int v25;
  double *v26;
  double *v27;
  double *v28;
  unint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  size_t v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  unsigned int v48;
  int v49;
  int v50;
  uint64_t v51;
  unsigned int v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  int v65;
  int v66;
  unsigned int v67;
  unint64_t v68;
  int32x4_t v69;
  int32x4_t v70;
  unsigned int v71;
  unint64_t v72;
  double *v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  BOOL v81;
  uint64_t v82;
  int v83;
  int v84;
  unsigned int v85;
  int32x4_t v86;
  int32x4_t v87;
  unsigned int v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  int v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  int v101;
  int v102;
  unsigned int v103;
  unint64_t v104;
  int32x4_t v105;
  int32x4_t v106;
  unsigned int v107;
  unint64_t v108;
  double *v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  BOOL v117;
  int v118;
  int v119;
  unsigned int v120;
  int32x4_t v121;
  int32x4_t v122;
  unsigned int v123;
  unint64_t v124;
  unsigned int v125;
  uint64_t v126;
  unsigned int v127;
  int64x2_t v128;
  int64x2_t *v129;
  int64x2_t v130;
  int64x2_t v131;
  uint64_t v132;
  int64x2_t v133;
  int64x2_t v134;
  int64x2_t v135;
  int64x2_t v136;
  int64x2_t v137;
  unsigned int v138;
  int64x2_t *v139;
  int64x2_t v140;
  int64x2_t v141;
  int64x2_t *v142;
  int64x2_t v143;
  int64x2_t v144;
  int64x2_t *v145;
  int64x2_t v146;
  int64x2_t v147;
  int64x2_t *v148;
  int64x2_t v149;
  int64x2_t v150;
  int64x2_t v151;
  int64x2_t v152;
  int64x2_t v153;
  int64x2_t v154;
  int64x2_t v155;
  int64x2_t v156;
  int64x2_t v157;
  int64x2_t v158;
  int64x2_t v159;
  int64x2_t *v160;
  int64x2_t v161;
  uint64_t v162;
  int64x2_t v163;
  int64x2_t v164;
  int64x2_t v165;
  int64x2_t v166;
  int64x2_t v167;
  int64x2_t v168;
  int64x2_t *v169;
  int64x2_t *v170;
  int64x2_t *v171;
  int64x2_t *v172;
  int64x2_t *v173;
  int64x2_t *v174;
  int64x2_t *v175;
  int64x2_t *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  int64x2_t *v185;
  int64x2_t *v186;
  int64x2_t *v187;
  int64x2_t *v188;
  int64x2_t *v189;
  int64x2_t *v190;
  int64x2_t *v191;
  int64x2_t *v192;
  int64x2_t *v193;
  int64x2_t v194;
  int64x2_t v195;
  int64x2_t v196;
  int64x2_t *v197;
  int64x2_t v198;
  int64x2_t v199;
  int64x2_t v200;
  int64x2_t *v201;
  int64x2_t v202;
  int64x2_t v203;
  int64x2_t v204;
  int64x2_t *v205;
  int64x2_t *v206;
  int64x2_t v207;
  int64x2_t v208;
  int64x2_t v209;
  int64x2_t *v210;
  int64x2_t *v211;
  int64x2_t v212;
  int64x2_t v213;
  int64x2_t v214;
  int64x2_t *v215;
  int v216;
  unsigned int v217;
  unsigned int v218;
  size_t v219;
  void *v220;
  size_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  int v231;
  unsigned int v232;
  double *v233;
  uint64_t v234;
  unsigned int v235;
  unsigned int v236;
  int v237;
  uint64_t v238;
  int v239;
  unsigned int v240;
  int v241;
  int v242;
  int v243;
  unsigned int v244;
  unsigned int v245;
  int v246;
  int64x2_t v247;
  uint64_t v248;
  void *v249;
  size_t v250;
  unint64_t v251;

  v4 = *(void **)a1;
  v5 = **(_QWORD **)(a2 + 8);
  if (*(void **)v5 == v4)
  {
    v217 = *(_DWORD *)(v5 + 20);
    v218 = *(_DWORD *)(**(_QWORD **)(a2 + 16) + 20);
    v219 = (8 * v218 * v217 + 31) & 0xFFFFFFFE0;
    v250 = v219 >> 3;
    v249 = operator new(v219, (std::align_val_t)0x20uLL);
    v251 = __PAIR64__(v218, v217);
    sub_20FBAC308(&v249, a2);
    v220 = *(void **)a1;
    v221 = v250;
    *(_QWORD *)a1 = v249;
    *(_QWORD *)(a1 + 8) = v221;
    *(_QWORD *)(a1 + 16) = v251;
    if (v220)
      MEMORY[0x212BC6368](v220, 0x1000C8000313F17);
  }
  else
  {
    if (*(_DWORD *)(v5 + 16) * *(_DWORD *)(v5 + 20))
    {
      v6 = **(uint64_t ***)(a2 + 16);
      if (*((_DWORD *)v6 + 5) * *((_DWORD *)v6 + 4))
      {
        v222 = **(_QWORD **)(a2 + 8);
        v7 = (8 * (*((_DWORD *)v6 + 5) * *((_DWORD *)v6 + 4)) + 31) & 0xFFFFFFFE0;
        v8 = (double *)operator new(v7, (std::align_val_t)0x20uLL);
        v9 = v8;
        v11 = *((unsigned int *)v6 + 4);
        v10 = *((_DWORD *)v6 + 5);
        v12 = v10 * (unint64_t)v11;
        v248 = v11;
        v223 = a2;
        v224 = a1;
        if (v12 > v7 >> 3)
        {
          MEMORY[0x212BC6368](v8, 0x1000C8000313F17);
          v9 = (double *)operator new((8 * v12 + 31) & 0xFFFFFFFFFFFFFFE0, (std::align_val_t)0x20uLL);
        }
        if (!v10)
        {
LABEL_176:
          sub_20E8BE654(1, 0, *(_DWORD *)(**(_QWORD **)(v223 + 8) + 20), *(_DWORD *)(**(_QWORD **)(v223 + 16) + 20), *(_DWORD *)(**(_QWORD **)(v223 + 8) + 16), *(const double **)v222, *(_DWORD *)(v222 + 16), v9, *(double *)(v223 + 24), 0.0, v11, *(double **)v224, *(_DWORD *)(v224 + 16));
          JUMPOUT(0x212BC6368);
        }
        v13 = 0;
        v14 = 0;
        v15 = v11 & 7;
        v239 = v11 & 0xFFFFFFF8;
        v242 = 2 * v15;
        v241 = -2 * v15;
        v230 = v11;
        v228 = 2 * v11;
        v229 = 3 * v11;
        v226 = 3 * v11;
        v227 = 5 * v11;
        v225 = 7 * v11;
        v231 = 8 * v11;
        v16.i64[0] = -1;
        v16.i64[1] = -1;
        v17 = v10;
        v232 = v10;
        v233 = v9;
        while (1)
        {
          v18 = v17;
          if (v17 <= 1uLL)
            v18 = 1;
          v19 = v17 <= 1 ? 1 : v17;
          v235 = v14 + 8;
          v236 = v17;
          v237 = v13;
          if (v14 + 8 <= v10)
            break;
          v240 = v10 - v14;
          if (v10 - v14 == 8)
            break;
          if ((_DWORD)v11)
          {
            v20 = 0;
            v21 = 0;
            v22 = 8 * v18;
            v243 = v14 * v11;
            v244 = v14;
            v246 = v13;
            v238 = v240 * v11;
            v234 = v19;
            while (1)
            {
              if (v11 >= v21 + 8)
                v23 = v21 + 8;
              else
                v23 = v11;
              v24 = v11 - v21;
              if (v21 + 8 <= v11)
                v24 = 8;
              v25 = v21 + v243;
              v245 = v21 + 8;
              if (v14 == v21)
              {
                v26 = &v9[v25];
                if (v24 * v240)
                  v27 = &v9[v25];
                else
                  v27 = 0;
                v28 = &v26[v238];
                if (!(v24 * v240))
                  v28 = 0;
                if (v27 != v28)
                {
                  v29 = 0;
                  v30 = 0;
                  v31 = *((_DWORD *)v6 + 4);
                  v32 = *v6 + 8 * (v244 + v244 * v31);
                  do
                  {
                    v33 = HIDWORD(v29);
                    if (v29 <= HIDWORD(v29))
                      v34 = HIDWORD(v29);
                    else
                      v34 = v29;
                    if (v29 < HIDWORD(v29))
                      LODWORD(v33) = v29;
                    *v27 = *(double *)(v32 + 8 * (v33 + v34 * v31));
                    v35 = (v29 + 1);
                    v36 = v29 & 0xFFFFFFFF00000000;
                    v37 = v36 | v35;
                    v29 = v36 + 0x100000000;
                    if (v24 > (int)v35)
                      v29 = v37;
                    if (v30 + 1 >= v24)
                      v38 = v11 - v24;
                    else
                      v38 = 0;
                    v27 += v38 + 1;
                    if (v30 + 1 < v24)
                      ++v30;
                    else
                      v30 = 0;
                  }
                  while (v27 != v28);
                }
                goto LABEL_18;
              }
              v39 = *v6;
              v40 = *((_DWORD *)v6 + 4);
              if (v21 < v14)
              {
                if (v24)
                {
                  v41 = 0;
                  v42 = 8 * v24;
                  v43 = v21 + v244 * v40;
                  do
                  {
                    memcpy(&v249 + (v41 & 0xFFFFFFF8), (const void *)(v39 + 8 * v43), v42);
                    v41 += 8;
                    v43 += v40;
                  }
                  while (v22 != v41);
                  v44 = 0;
                  v45 = v246;
                  v9 = v233;
                  v19 = v234;
                  do
                  {
                    memcpy(&v233[v45], &v249 + (v44 & 0xFFFFFFF8), v42);
                    v16.i64[0] = -1;
                    v16.i64[1] = -1;
                    v11 = v248;
                    v44 += 8;
                    v45 += v248;
                  }
                  while (v22 != v44);
                }
                goto LABEL_18;
              }
              if (v24)
                break;
LABEL_18:
              ++v20;
              v246 += 8;
              v14 = v244;
              v21 = v245;
              if (v245 >= v11)
                goto LABEL_8;
            }
            v46 = 0;
            v47 = 0;
            v48 = v23 - 8 * v20;
            v49 = 16 * v20;
            v50 = 2 * v23;
            v51 = v39 + 8 * (v244 + v40 * v21);
            if (v24 >= 0)
              v52 = v24;
            else
              v52 = -v24;
            v53 = v50 - v49;
            v54 = v49 - v50;
            while (1)
            {
              v58 = HIDWORD(v47);
              if (v52 >> 4 > 0x270)
              {
                v61 = v24 + v47 + v24 * HIDWORD(v47);
                v62 = (v61 / v24);
                v63 = (v61 % v24);
                v64 = v63 | (v62 << 32);
                v60 = (v63 + v24) | ((unint64_t)(v62 - 1) << 32);
                if ((int)v63 >= 0)
                  v60 = v64;
                goto LABEL_83;
              }
              v59 = (v24 + v47);
              if (v24 + (int)v47 >= 0)
              {
                v60 = v47 & 0xFFFFFFFF00000000 | v59;
                if ((int)v59 >= v24)
                  goto LABEL_80;
                goto LABEL_83;
              }
              v65 = (v53 + v47) & ~((v53 + (int)v47) >> 31);
              v66 = v49 + v65 == v50 + (_DWORD)v47 ? 1 : 2;
              v67 = v66 + (v54 + v65 - (v49 + v65 != v50 + (_DWORD)v47) - v47) / v48;
              if (v67 < 8)
                break;
              LODWORD(v59) = v59 + (v67 & 0xFFFFFFF8) * v48;
              v69 = 0uLL;
              v70 = (int32x4_t)HIDWORD(v47);
              v71 = v67 & 0xFFFFFFF8;
              do
              {
                v70 = vaddq_s32(v70, v16);
                v69 = vaddq_s32(v69, v16);
                v71 -= 8;
              }
              while (v71);
              v68 = vaddvq_s32(vaddq_s32(v69, v70));
              if (v67 != (v67 & 0xFFFFFFF8))
                goto LABEL_78;
LABEL_79:
              v60 = v59 | (v68 << 32);
              if ((int)v59 >= v24)
              {
LABEL_80:
                v72 = HIDWORD(v60);
                do
                {
                  v59 = (v59 - v24);
                  v72 = (v72 + 1);
                }
                while ((int)v59 >= v24);
                v60 = v59 | (v72 << 32);
              }
LABEL_83:
              if ((_DWORD)v47 != (_DWORD)v60 || HIDWORD(v47) != HIDWORD(v60))
              {
                v74 = &v9[(v25 + v11 * v46)];
                LODWORD(v75) = v47;
                v76 = v47;
                do
                {
                  *v74++ = *(double *)(v51 + 8 * (HIDWORD(v76) + v75 * v40));
                  v77 = (v75 + 1);
                  v78 = v76 & 0xFFFFFFFF00000000;
                  v79 = v78 | v77;
                  v80 = v78 + 0x100000000;
                  if (v24 <= (int)v77)
                    v75 = v80;
                  else
                    v75 = v79;
                  v81 = (_DWORD)v75 == (_DWORD)v60 && HIDWORD(v75) == HIDWORD(v60);
                  v76 = v75;
                }
                while (!v81);
              }
              if (v52 >> 4 > 0x270)
              {
                v55 = v24 + v47 + v24 * HIDWORD(v47);
                v56 = (v55 / v24);
                v57 = (v55 % v24);
                if ((v57 & 0x80000000) != 0)
                {
                  v57 = (v57 + v24);
                  v56 = (v56 - 1);
                }
                v47 = v57 | (v56 << 32);
                goto LABEL_62;
              }
              v82 = (v24 + v47);
              if (v24 + (int)v47 < 0)
              {
                v83 = (v53 + v47) & ~((v53 + (int)v47) >> 31);
                if (v49 + v83 == v50 + (_DWORD)v47)
                  v84 = 1;
                else
                  v84 = 2;
                v85 = v84 + (v54 + v83 - (v49 + v83 != v50 + (_DWORD)v47) - v47) / v48;
                if (v85 < 8)
                  goto LABEL_180;
                LODWORD(v82) = v82 + (v85 & 0xFFFFFFF8) * v48;
                v86 = 0uLL;
                v87 = (int32x4_t)v58;
                v88 = v85 & 0xFFFFFFF8;
                do
                {
                  v87 = vaddq_s32(v87, v16);
                  v86 = vaddq_s32(v86, v16);
                  v88 -= 8;
                }
                while (v88);
                v58 = vaddvq_s32(vaddq_s32(v86, v87));
                if (v85 != (v85 & 0xFFFFFFF8))
                {
LABEL_180:
                  do
                  {
                    LODWORD(v82) = v82 + v24;
                    v58 = (v58 - 1);
                  }
                  while ((v82 & 0x80000000) != 0);
                }
                v47 = v82 | (v58 << 32);
                if ((int)v82 < v24)
                  goto LABEL_62;
LABEL_109:
                v89 = HIDWORD(v47);
                do
                {
                  v82 = (v82 - v24);
                  v89 = (v89 + 1);
                }
                while ((int)v82 >= v24);
                v47 = v82 | (v89 << 32);
                goto LABEL_62;
              }
              v47 = v47 & 0xFFFFFFFF00000000 | v82;
              if ((int)v82 >= v24)
                goto LABEL_109;
LABEL_62:
              if (++v46 == v19)
                goto LABEL_18;
            }
            v68 = HIDWORD(v47);
            do
            {
LABEL_78:
              LODWORD(v59) = v59 + v24;
              v68 = (v68 - 1);
            }
            while ((v59 & 0x80000000) != 0);
            goto LABEL_79;
          }
LABEL_8:
          v17 = v236 - 8;
          v13 = v237 + v231;
          v14 = v235;
          v10 = v232;
          if (v235 >= v232)
            goto LABEL_176;
        }
        if (v11 >= 8)
        {
          v125 = 0;
          do
          {
            if (v14 == v125)
            {
              v126 = *((unsigned int *)v6 + 4);
              v127 = v14 + v14 * v126;
              v128 = *(int64x2_t *)(*v6 + 8 * (v127 + v126));
              v129 = (int64x2_t *)(*v6 + 8 * (v127 + 2 * (_DWORD)v126));
              v131 = *v129;
              v130 = v129[1];
              LODWORD(v129) = 3 * v126;
              v132 = *v6 + 8 * (v127 + 3 * (_DWORD)v126);
              v134 = *(int64x2_t *)v132;
              v133 = *(int64x2_t *)(v132 + 16);
              v135 = vzip1q_s64(*(int64x2_t *)(*v6 + 8 * v127), v128);
              v136.i64[0] = vdupq_laneq_s64(v131, 1).u64[0];
              v136.i64[1] = *(_QWORD *)(v132 + 8);
              v137 = vzip1q_s64(v130, v133);
              v16.i64[0] = -1;
              v16.i64[1] = -1;
              v247 = vzip1q_s64(v131, *(int64x2_t *)v132);
              v138 = v127 + 4 * v126;
              v139 = (int64x2_t *)(*v6 + 8 * v138);
              v141 = *v139;
              v140 = v139[1];
              v142 = (int64x2_t *)((char *)v139 + 8 * v126);
              v144 = *v142;
              v143 = v142[1];
              v145 = &v139[v126];
              v147 = *v145;
              v146 = v145[1];
              v148 = (int64x2_t *)((char *)v139 + 24 * v126);
              v150 = *v148;
              v149 = v148[1];
              v151 = vzip1q_s64(v141, v144);
              v152 = vzip1q_s64(*v145, *v148);
              v153 = vzip2q_s64(v141, v144);
              v154.i64[0] = vdupq_laneq_s64(*v145, 1).u64[0];
              v154.i64[1] = v148->i64[1];
              v155 = vzip1q_s64(v140, v143);
              v156 = vzip1q_s64(v146, v149);
              v157.i64[0] = vdupq_laneq_s64(v146, 1).u64[0];
              v157.i64[1] = v148[1].i64[1];
              v158 = vzip2q_s64(v140, v143);
              v138 += 4;
              v159 = *(int64x2_t *)(*v6 + 8 * (v138 + v126));
              v160 = (int64x2_t *)(*v6 + 8 * (v138 + 2 * (_DWORD)v126));
              v161 = *v160;
              v162 = *v6 + 8 * (v138 + v129);
              v164 = *(int64x2_t *)v162;
              v163 = *(int64x2_t *)(v162 + 16);
              v165 = vzip1q_s64(*(int64x2_t *)(*v6 + 8 * v138), v159);
              v166.i64[0] = vdupq_laneq_s64(*v160, 1).u64[0];
              v166.i64[1] = *(_QWORD *)(v162 + 8);
              v167 = vzip1q_s64(v160[1], v163);
              v168 = vzip1q_s64(*v160, *(int64x2_t *)v162);
            }
            else
            {
              v177 = *v6;
              v178 = *((unsigned int *)v6 + 4);
              v179 = v178;
              v180 = 3 * v178;
              v181 = 2 * v178;
              v182 = 5 * v178;
              v183 = 3 * v178;
              v184 = 7 * v178;
              if (v125 >= v14)
              {
                v193 = (int64x2_t *)(v177 + 8 * (v14 + (_DWORD)v178 * v125));
                v194 = v193[2];
                v195 = v193[3];
                v196 = v193[1];
                v197 = (int64x2_t *)((char *)v193 + 8 * v178);
                v199 = v197[2];
                v198 = v197[3];
                v200 = v197[1];
                v201 = &v193[v179];
                v202 = v201[2];
                v203 = v201[3];
                v204 = v201[1];
                v205 = (int64x2_t *)((char *)v193 + 8 * v180);
                v206 = &v193[v181];
                v207 = v206[2];
                v208 = v206[3];
                v209 = v206[1];
                v210 = (int64x2_t *)((char *)v193 + 8 * v182);
                v211 = &v193[v183];
                v213 = v211[2];
                v212 = v211[3];
                v247 = vzip1q_s64(*v201, *v205);
                v214 = v211[1];
                v215 = (int64x2_t *)((char *)v193 + 8 * v184);
                v136.i64[0] = vdupq_laneq_s64(*v201, 1).u64[0];
                v136.i64[1] = v205->i64[1];
                v153.i64[0] = vdupq_laneq_s64(*v206, 1).u64[0];
                v153.i64[1] = v210->i64[1];
                v151 = vzip1q_s64(*v206, *v210);
                v152 = vzip1q_s64(*v211, *v215);
                v154.i64[0] = vdupq_laneq_s64(*v211, 1).u64[0];
                v154.i64[1] = v215->i64[1];
                v128 = vzip2q_s64(*v193, *v197);
                v131 = vzip1q_s64(v196, v200);
                v137 = vzip1q_s64(v204, v205[1]);
                v134 = vzip2q_s64(v196, v200);
                v133.i64[0] = vdupq_laneq_s64(v204, 1).u64[0];
                v155 = vzip1q_s64(v209, v210[1]);
                v133.i64[1] = v205[1].i64[1];
                v156 = vzip1q_s64(v214, v215[1]);
                v158.i64[0] = vdupq_laneq_s64(v209, 1).u64[0];
                v158.i64[1] = v210[1].i64[1];
                v157.i64[0] = vdupq_laneq_s64(v214, 1).u64[0];
                v157.i64[1] = v215[1].i64[1];
                v141 = vzip1q_s64(v194, v199);
                v140 = vzip1q_s64(v202, v205[2]);
                v144 = vzip2q_s64(v194, v199);
                v165 = vzip1q_s64(v207, v210[2]);
                v143.i64[0] = vdupq_laneq_s64(v202, 1).u64[0];
                v143.i64[1] = v205[2].i64[1];
                v159.i64[0] = vdupq_laneq_s64(v207, 1).u64[0];
                v159.i64[1] = v210[2].i64[1];
                v168 = vzip1q_s64(v213, v215[2]);
                v166.i64[0] = vdupq_laneq_s64(v213, 1).u64[0];
                v166.i64[1] = v215[2].i64[1];
                v146 = vzip1q_s64(v203, v205[3]);
                v149.i64[0] = vdupq_laneq_s64(v203, 1).u64[0];
                v149.i64[1] = v205[3].i64[1];
                v147 = vzip1q_s64(v195, v198);
                v150 = vzip2q_s64(v195, v198);
                v161 = vzip1q_s64(v208, v210[3]);
                v164.i64[0] = vdupq_laneq_s64(v208, 1).u64[0];
                v164.i64[1] = v210[3].i64[1];
                v167 = vzip1q_s64(v212, v215[3]);
                v163.i64[0] = vdupq_laneq_s64(v212, 1).u64[0];
                v135 = vzip1q_s64(*v193, *v197);
                v163.i64[1] = v215[3].i64[1];
                v16.i64[0] = -1;
                v16.i64[1] = -1;
              }
              else
              {
                v185 = (int64x2_t *)(v177 + 8 * (v125 + v14 * (_DWORD)v178));
                v151 = v185[2];
                v152 = v185[3];
                v247 = v185[1];
                v135 = *v185;
                v186 = (int64x2_t *)((char *)v185 + 8 * v178);
                v153 = v186[2];
                v154 = v186[3];
                v128 = *v186;
                v136 = v186[1];
                v187 = &v185[v179];
                v155 = v187[2];
                v156 = v187[3];
                v131 = *v187;
                v137 = v187[1];
                v188 = (int64x2_t *)((char *)v185 + 8 * v180);
                v158 = v188[2];
                v157 = v188[3];
                v134 = *v188;
                v133 = v188[1];
                v189 = &v185[v181];
                v165 = v189[2];
                v168 = v189[3];
                v141 = *v189;
                v140 = v189[1];
                v190 = (int64x2_t *)((char *)v185 + 8 * v182);
                v159 = v190[2];
                v166 = v190[3];
                v144 = *v190;
                v143 = v190[1];
                v191 = &v185[v183];
                v161 = v191[2];
                v167 = v191[3];
                v147 = *v191;
                v146 = v191[1];
                v192 = (int64x2_t *)((char *)v185 + 8 * v184);
                v164 = v192[2];
                v163 = v192[3];
                v150 = *v192;
                v149 = v192[1];
              }
            }
            v169 = (int64x2_t *)&v9[v13 + v125];
            *v169 = v135;
            v169[1] = v247;
            v169[2] = v151;
            v169[3] = v152;
            v170 = (int64x2_t *)((char *)v169 + 8 * v11);
            *v170 = v128;
            v170[1] = v136;
            v170[2] = v153;
            v170[3] = v154;
            v171 = &v169[v230];
            *v171 = v131;
            v171[1] = v137;
            v171[2] = v155;
            v171[3] = v156;
            v172 = (int64x2_t *)((char *)v169 + 8 * v229);
            *v172 = v134;
            v172[1] = v133;
            v172[2] = v158;
            v172[3] = v157;
            v173 = &v169[v228];
            *v173 = v141;
            v173[1] = v140;
            v173[2] = v165;
            v173[3] = v168;
            v174 = (int64x2_t *)((char *)v169 + 8 * v227);
            *v174 = v144;
            v174[1] = v143;
            v174[2] = v159;
            v174[3] = v166;
            v175 = &v169[v226];
            *v175 = v147;
            v175[1] = v146;
            v175[2] = v161;
            v175[3] = v167;
            v176 = (int64x2_t *)((char *)v169 + 8 * v225);
            v176[2] = v164;
            v176[3] = v163;
            LODWORD(v175) = v125 + 16;
            v125 += 8;
            *v176 = v150;
            v176[1] = v149;
          }
          while (v175 <= v11);
        }
        if (!v15)
          goto LABEL_8;
        v90 = 0;
        v91 = 0;
        v92 = *((_DWORD *)v6 + 4);
        v93 = *v6 + 8 * (v14 + v92 * v239);
        while (1)
        {
          v94 = HIDWORD(v91);
          v95 = (v15 + v91);
          v96 = v91 & 0xFFFFFFFF00000000 | v95;
          v97 = v96;
          LODWORD(v98) = v15 + v91;
          if (v15 + (int)v91 >= 0)
          {
            if ((int)v98 < v15)
              goto LABEL_118;
            goto LABEL_134;
          }
          v101 = v241 + ((v242 + v91) & ~((v242 + (int)v91) >> 31));
          v102 = v101 == (_DWORD)v91 ? 1 : 2;
          v103 = v102 + (v101 - (v101 != (_DWORD)v91) - v91) / v15;
          if (v103 < 8)
            break;
          LODWORD(v98) = v95 + (v103 & 0xFFFFFFF8) * v15;
          v105 = 0uLL;
          v106 = (int32x4_t)HIDWORD(v91);
          v107 = v103 & 0xFFFFFFF8;
          do
          {
            v106 = vaddq_s32(v106, v16);
            v105 = vaddq_s32(v105, v16);
            v107 -= 8;
          }
          while (v107);
          v104 = vaddvq_s32(vaddq_s32(v105, v106));
          if (v103 != (v103 & 0xFFFFFFF8))
            goto LABEL_132;
LABEL_133:
          v97 = v98 | (v104 << 32);
          if ((int)v98 < v15)
          {
LABEL_118:
            v99 = HIDWORD(v97);
            if ((_DWORD)v91 == (_DWORD)v97 && HIDWORD(v91) == HIDWORD(v97))
              goto LABEL_149;
            goto LABEL_140;
          }
LABEL_134:
          v108 = HIDWORD(v97);
          do
          {
            v98 = (v98 - v15);
            v108 = (v108 + 1);
          }
          while ((int)v98 >= v15);
          v97 = v98 | (v108 << 32);
          v99 = HIDWORD(v97);
          if ((_DWORD)v91 == (_DWORD)v97 && HIDWORD(v91) == HIDWORD(v97))
            goto LABEL_149;
LABEL_140:
          v110 = &v9[v239 + (v14 + v90) * v11];
          LODWORD(v111) = v91;
          v112 = v91;
          do
          {
            *v110++ = *(double *)(v93 + 8 * (HIDWORD(v112) + v111 * v92));
            v113 = (v111 + 1);
            v114 = v112 & 0xFFFFFFFF00000000;
            v115 = v114 | v113;
            v116 = v114 + 0x100000000;
            if (v15 <= (int)v113)
              v111 = v116;
            else
              v111 = v115;
            v117 = (_DWORD)v111 == (_DWORD)v97 && HIDWORD(v111) == (_DWORD)v99;
            v112 = v111;
          }
          while (!v117);
LABEL_149:
          if ((v95 & 0x80000000) != 0)
          {
            v118 = v241 + ((v242 + v91) & ~((v242 + (int)v91) >> 31));
            if (v118 == (_DWORD)v91)
              v119 = 1;
            else
              v119 = 2;
            v120 = v119 + (v118 - (v118 != (_DWORD)v91) - v91) / v15;
            if (v120 < 8)
              goto LABEL_181;
            LODWORD(v95) = v95 + (v120 & 0xFFFFFFF8) * v15;
            v121 = 0uLL;
            v122 = (int32x4_t)v94;
            v123 = v120 & 0xFFFFFFF8;
            do
            {
              v122 = vaddq_s32(v122, v16);
              v121 = vaddq_s32(v121, v16);
              v123 -= 8;
            }
            while (v123);
            v94 = vaddvq_s32(vaddq_s32(v121, v122));
            if (v120 != (v120 & 0xFFFFFFF8))
            {
LABEL_181:
              do
              {
                LODWORD(v95) = v95 + v15;
                v94 = (v94 - 1);
              }
              while ((v95 & 0x80000000) != 0);
            }
            v96 = v95 | (v94 << 32);
            if ((int)v95 < v15)
              goto LABEL_115;
LABEL_161:
            v124 = HIDWORD(v96);
            do
            {
              v95 = (v95 - v15);
              v124 = (v124 + 1);
            }
            while ((int)v95 >= v15);
            v96 = v95 | (v124 << 32);
            goto LABEL_115;
          }
          if ((int)v95 >= v15)
            goto LABEL_161;
LABEL_115:
          ++v90;
          v91 = v96;
          if (v90 == 8)
            goto LABEL_8;
        }
        v104 = HIDWORD(v91);
        LODWORD(v98) = v15 + v91;
        do
        {
LABEL_132:
          LODWORD(v98) = v98 + v15;
          v104 = (v104 - 1);
        }
        while ((v98 & 0x80000000) != 0);
        goto LABEL_133;
      }
    }
    v216 = *(_DWORD *)(a1 + 20);
    if (v216 * *(_DWORD *)(a1 + 16))
      bzero(v4, 8 * (v216 * *(_DWORD *)(a1 + 16)));
  }
}

void sub_20FBAD028(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6368](v1, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

void sub_20FBAD060(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20FBAD5D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20FBAD5F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FBAD60C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20FBAD664(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20FBADBD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20FBADBFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FBADC10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20FBADC68(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20FBAE1DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20FBAE200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FBAE214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20FBAE26C(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20FBAE7E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20FBAE804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FBAE818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20FBAE870(uint64_t a1, unint64_t *a2, __int128 *a3, __int128 *a4, std::__shared_weak_count *a5, __int128 *a6)
{
  std::__shared_weak_count *v6;
  unsigned int *v7;
  unint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  char *v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int *v29;
  char *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  char *v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int *v38;
  char *v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  _BYTE *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t *v49;
  unint64_t *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  unint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  unint64_t v71;
  _BYTE *v72;
  _BYTE *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  __int128 v77;
  _BYTE *v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t *v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  unint64_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  unint64_t v119;
  __int128 v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t *v126;
  unint64_t v127;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  char *v133;
  _BYTE *v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  char *v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t *v166;
  unint64_t *v167;
  uint64_t v168;
  unint64_t *v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  uint64_t v175;
  __int128 v176;
  __int128 v177;
  uint64_t v178;
  unint64_t *v179;
  unint64_t v180;
  __int128 v181;
  __int128 v182;
  uint64_t v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t *v195;
  unint64_t v196;
  unint64_t *v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  unint64_t v203;
  __int128 v204;
  __int128 v205;
  unint64_t v206;
  unint64_t *v207;
  unint64_t v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t *v223;
  unint64_t v224;
  unint64_t *v225;
  uint64_t v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  unint64_t *v233;
  unint64_t v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  unint64_t *v238;
  __int128 v239;
  uint64_t v240;
  int64_t v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  unint64_t v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  uint64_t v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  uint64_t v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  uint64_t v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  uint64_t v290;
  unint64_t v291;
  char v292;
  __int128 v293;
  char v294;
  unint64_t v295;
  char v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  uint64_t v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  uint64_t v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  unint64_t v324;
  uint64_t v325;

  v6 = a5;
  v7 = (unsigned int *)a3;
  v325 = *MEMORY[0x24BDAC8D0];
  v9 = *a2;
  v10 = *(unint64_t **)(a1 + 1064);
  v11 = *(unint64_t **)(a1 + 1072);
  if (v10 == v11)
  {
    v11 = *(unint64_t **)(a1 + 1064);
  }
  else if (*(v11 - 63) >= v9)
  {
    v12 = 0xEFBEFBEFBEFBEFBFLL * (v11 - v10);
    do
    {
      v13 = v12 >> 1;
      v14 = &v10[63 * (v12 >> 1)];
      v15 = *v14;
      v16 = v14 + 63;
      v12 += ~(v12 >> 1);
      if (v15 < v9)
        v10 = v16;
      else
        v12 = v13;
    }
    while (v12);
    if (v10 != v11)
    {
      v11 = v10;
      if (*v10 == v9)
        return 0;
    }
  }
  if (a5)
  {
    p_shared_owners = (unint64_t *)&a5->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  v250 = *((_OWORD *)a2 + 8);
  v251 = *((_OWORD *)a2 + 9);
  v252 = *((_OWORD *)a2 + 10);
  v20 = a2[22];
  v246 = *((_OWORD *)a2 + 4);
  v247 = *((_OWORD *)a2 + 5);
  v248 = *((_OWORD *)a2 + 6);
  v249 = *((_OWORD *)a2 + 7);
  v242 = *(_OWORD *)a2;
  v243 = *((_OWORD *)a2 + 1);
  v244 = *((_OWORD *)a2 + 2);
  v245 = *((_OWORD *)a2 + 3);
  v254 = *(_OWORD *)(a2 + 23);
  a2[23] = 0;
  a2[24] = 0;
  v253 = v20;
  *(_QWORD *)&v255 = 0;
  *(_QWORD *)&v272 = a4;
  *((_QWORD *)&v272 + 1) = a5;
  if (a5)
  {
    v21 = (unint64_t *)&a5->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    do
      v23 = __ldaxr(v21);
    while (__stlxr(v23 - 1, v21));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))a5->__on_zero_shared)(a5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v24 = *v7;
  v25 = *(char **)(a1 + 8);
  v26 = *(char **)(a1 + 16);
  if (v26 != v25)
  {
    v27 = (v26 - v25) >> 4;
    do
    {
      v28 = v27 >> 1;
      v29 = (unsigned int *)&v25[16 * (v27 >> 1)];
      v31 = *v29;
      v30 = (char *)(v29 + 4);
      v27 += ~(v27 >> 1);
      if (v31 < v24)
        v25 = v30;
      else
        v27 = v28;
    }
    while (v27);
  }
  if (v25 == v26 || *(_DWORD *)v25 != v24)
    goto LABEL_58;
  v32 = *((_QWORD *)v25 + 1);
  *(_QWORD *)&v255 = v32;
  ++*(_DWORD *)(v32 + 8);
  v33 = v7[1];
  v34 = *(char **)(a1 + 104);
  v35 = *(char **)(a1 + 112);
  if (v35 != v34)
  {
    v36 = (v35 - v34) >> 4;
    do
    {
      v37 = v36 >> 1;
      v38 = (unsigned int *)&v34[16 * (v36 >> 1)];
      v40 = *v38;
      v39 = (char *)(v38 + 4);
      v36 += ~(v36 >> 1);
      if (v40 < v33)
        v34 = v39;
      else
        v36 = v37;
    }
    while (v36);
  }
  if (v34 == v35 || *(_DWORD *)v34 != v33)
  {
LABEL_58:
    if ((_QWORD)v255)
      --*(_DWORD *)(v255 + 8);
    v17 = 0;
    goto LABEL_72;
  }
  v41 = *((_QWORD *)v34 + 1);
  *((_QWORD *)&v255 + 1) = v41;
  ++*(_DWORD *)(v41 + 8);
  if (*(_BYTE *)(v32 + 20) || *(_BYTE *)(v41 + 20))
  {
    v42 = *((_QWORD *)&v254 + 1);
    v273 = v254;
    *((_QWORD *)&v254 + 1) = 0;
    v280 = v261;
    v281 = v262;
    v274 = v255;
    v275 = v256;
    v276 = v257;
    v277 = v258;
    v278 = v259;
    v279 = v260;
    v288 = v269;
    v289 = v270;
    v286 = v267;
    v287 = v268;
    v284 = v265;
    v285 = v266;
    v283 = v264;
    v282 = v263;
    v290 = v271;
    v292 = 0;
    v291 = 0xBFF0000000000000;
    v43 = (std::__shared_weak_count *)*((_QWORD *)&v272 + 1);
    v293 = v272;
    *((_QWORD *)&v272 + 1) = 0;
    v294 = 0;
    v44 = *(unint64_t **)(a1 + 1072);
    if (v44 != v11 && *v11 == v9)
      goto LABEL_146;
    a4 = &v273;
    a6 = &v274;
    a5 = (std::__shared_weak_count *)&v275;
    a3 = &v283;
    a2 = &v291;
    v45 = *(_BYTE **)(a1 + 1064);
    v46 = (char *)v11 - v45;
    v241 = 0xEFBEFBEFBEFBEFBFLL * (((char *)v11 - v45) >> 3);
    v47 = *(_QWORD *)(a1 + 1080);
    if ((unint64_t)v44 < v47)
    {
      if (v11 == v44)
      {
        *v44 = v9;
        v134 = &v45[8 * (((char *)v11 - v45) >> 3)];
        *(_OWORD *)(v134 + 8) = v242;
        *(_OWORD *)(v134 + 24) = v243;
        *(_OWORD *)(v134 + 56) = v245;
        *(_OWORD *)(v134 + 40) = v244;
        *(_OWORD *)(v134 + 120) = v249;
        *(_OWORD *)(v134 + 104) = v248;
        *(_OWORD *)(v134 + 88) = v247;
        *(_OWORD *)(v134 + 72) = v246;
        *(_OWORD *)(v134 + 168) = v252;
        *(_OWORD *)(v134 + 152) = v251;
        *(_OWORD *)(v134 + 136) = v250;
        *((_QWORD *)v134 + 23) = v253;
        *((_QWORD *)v134 + 24) = v254;
        *((_QWORD *)v134 + 25) = v42;
        v273 = 0uLL;
        *((_OWORD *)v134 + 13) = v274;
        v136 = v280;
        v135 = v281;
        v137 = v279;
        *((_QWORD *)v134 + 42) = v282;
        *((_OWORD *)v134 + 19) = v136;
        *((_OWORD *)v134 + 20) = v135;
        *((_OWORD *)v134 + 18) = v137;
        v138 = v275;
        v139 = v276;
        v140 = v278;
        *((_OWORD *)v134 + 16) = v277;
        *((_OWORD *)v134 + 17) = v140;
        *((_OWORD *)v134 + 14) = v138;
        *((_OWORD *)v134 + 15) = v139;
        v142 = v288;
        v141 = v289;
        v143 = v287;
        *((_QWORD *)v134 + 57) = v290;
        *(_OWORD *)(v134 + 424) = v142;
        *(_OWORD *)(v134 + 440) = v141;
        *(_OWORD *)(v134 + 408) = v143;
        v144 = v283;
        v145 = v284;
        v146 = v286;
        *(_OWORD *)(v134 + 376) = v285;
        *(_OWORD *)(v134 + 392) = v146;
        *(_OWORD *)(v134 + 344) = v144;
        *(_OWORD *)(v134 + 360) = v145;
        v147 = v291;
        v134[472] = v292;
        *((_QWORD *)v134 + 58) = v147;
        *((_QWORD *)v134 + 60) = v272;
        *((_QWORD *)v134 + 61) = v43;
        v293 = 0uLL;
        v134[496] = 0;
        *(_QWORD *)(a1 + 1072) = v44 + 63;
      }
      else
      {
        v297 = v242;
        v322 = v251;
        v323 = v252;
        v324 = v253;
        v318 = v247;
        v319 = v248;
        v321 = v250;
        v320 = v249;
        v314 = v243;
        v315 = v244;
        v317 = v246;
        v316 = v245;
        v273 = 0uLL;
        v239 = v274;
        v310 = v260;
        v311 = v261;
        v312 = v262;
        v313 = v263;
        v306 = v256;
        v307 = v257;
        v308 = v258;
        v309 = v259;
        v305 = v271;
        v304 = v270;
        v303 = v269;
        v302 = v268;
        v301 = v267;
        v300 = v266;
        v299 = v265;
        v298 = v264;
        v296 = 0;
        v295 = 0xBFF0000000000000;
        v48 = v44 - 63;
        v49 = v44;
        v293 = 0uLL;
        if ((unint64_t)v44 >= 0x1F8)
        {
          v50 = v44 - 63;
          v49 = v44;
          do
          {
            *v49 = *v50;
            *(_OWORD *)(v49 + 1) = *(_OWORD *)(v50 + 1);
            v51 = *(_OWORD *)(v50 + 11);
            v52 = *(_OWORD *)(v50 + 13);
            v53 = *(_OWORD *)(v50 + 15);
            *(_OWORD *)(v49 + 9) = *(_OWORD *)(v50 + 9);
            *(_OWORD *)(v49 + 15) = v53;
            *(_OWORD *)(v49 + 13) = v52;
            *(_OWORD *)(v49 + 11) = v51;
            v54 = *(_OWORD *)(v50 + 19);
            v55 = *(_OWORD *)(v50 + 21);
            v56 = v50[23];
            *(_OWORD *)(v49 + 17) = *(_OWORD *)(v50 + 17);
            v49[23] = v56;
            *(_OWORD *)(v49 + 21) = v55;
            *(_OWORD *)(v49 + 19) = v54;
            v57 = *(_OWORD *)(v50 + 3);
            v58 = *(_OWORD *)(v50 + 5);
            *(_OWORD *)(v49 + 7) = *(_OWORD *)(v50 + 7);
            *(_OWORD *)(v49 + 5) = v58;
            *(_OWORD *)(v49 + 3) = v57;
            *((_OWORD *)v49 + 12) = *((_OWORD *)v50 + 12);
            v50[24] = 0;
            v50[25] = 0;
            *((_OWORD *)v49 + 13) = *((_OWORD *)v50 + 13);
            v60 = *((_OWORD *)v50 + 19);
            v59 = *((_OWORD *)v50 + 20);
            v61 = *((_OWORD *)v50 + 18);
            v49[42] = v50[42];
            *((_OWORD *)v49 + 19) = v60;
            *((_OWORD *)v49 + 20) = v59;
            *((_OWORD *)v49 + 18) = v61;
            v62 = *((_OWORD *)v50 + 14);
            v63 = *((_OWORD *)v50 + 15);
            v64 = *((_OWORD *)v50 + 17);
            *((_OWORD *)v49 + 16) = *((_OWORD *)v50 + 16);
            *((_OWORD *)v49 + 17) = v64;
            *((_OWORD *)v49 + 14) = v62;
            *((_OWORD *)v49 + 15) = v63;
            v66 = *(_OWORD *)(v50 + 53);
            v65 = *(_OWORD *)(v50 + 55);
            v67 = *(_OWORD *)(v50 + 51);
            v49[57] = v50[57];
            *(_OWORD *)(v49 + 53) = v66;
            *(_OWORD *)(v49 + 55) = v65;
            *(_OWORD *)(v49 + 51) = v67;
            v68 = *(_OWORD *)(v50 + 43);
            v69 = *(_OWORD *)(v50 + 45);
            v70 = *(_OWORD *)(v50 + 49);
            *(_OWORD *)(v49 + 47) = *(_OWORD *)(v50 + 47);
            *(_OWORD *)(v49 + 49) = v70;
            *(_OWORD *)(v49 + 43) = v68;
            *(_OWORD *)(v49 + 45) = v69;
            v71 = v50[58];
            *((_BYTE *)v49 + 472) = *((_BYTE *)v50 + 472);
            v49[58] = v71;
            *((_OWORD *)v49 + 30) = *((_OWORD *)v50 + 30);
            v50[60] = 0;
            v50[61] = 0;
            *((_BYTE *)v49 + 496) = *((_BYTE *)v50 + 496);
            v49 += 63;
            v50 += 63;
          }
          while (v50 < v44);
        }
        v240 = v42;
        v72 = v45;
        *(_QWORD *)(a1 + 1072) = v49;
        if (v44 != v11 + 63)
        {
          do
          {
            v93 = v48 - 63;
            v94 = v44 - 63;
            *v94 = *(v48 - 63);
            *(_OWORD *)(v94 + 1) = *((_OWORD *)v48 - 31);
            v95 = *((_OWORD *)v48 - 26);
            v96 = *((_OWORD *)v48 - 25);
            v97 = *((_OWORD *)v48 - 24);
            *(_OWORD *)(v94 + 9) = *((_OWORD *)v48 - 27);
            *(_OWORD *)(v94 + 15) = v97;
            *(_OWORD *)(v94 + 13) = v96;
            *(_OWORD *)(v94 + 11) = v95;
            v98 = *((_OWORD *)v48 - 22);
            v99 = *((_OWORD *)v48 - 21);
            v100 = *(v48 - 40);
            *(_OWORD *)(v94 + 17) = *((_OWORD *)v48 - 23);
            v94[23] = v100;
            *(_OWORD *)(v94 + 21) = v99;
            *(_OWORD *)(v94 + 19) = v98;
            v101 = *((_OWORD *)v48 - 30);
            v102 = *((_OWORD *)v48 - 29);
            *(_OWORD *)(v94 + 7) = *((_OWORD *)v48 - 28);
            *(_OWORD *)(v94 + 5) = v102;
            *(_OWORD *)(v94 + 3) = v101;
            v103 = *(_OWORD *)(v48 - 39);
            v93[24] = 0;
            v93[25] = 0;
            v104 = (std::__shared_weak_count *)*(v44 - 38);
            *((_OWORD *)v94 + 12) = v103;
            if (v104)
            {
              v105 = (unint64_t *)&v104->__shared_owners_;
              do
                v106 = __ldaxr(v105);
              while (__stlxr(v106 - 1, v105));
              if (!v106)
              {
                ((void (*)(std::__shared_weak_count *, unint64_t *, __int128 *, __int128 *, std::__shared_weak_count *, __int128 *))v104->__on_zero_shared)(v104, a2, a3, a4, a5, a6);
                std::__shared_weak_count::__release_weak(v104);
              }
            }
            *(v44 - 37) = *(v48 - 37);
            *(v44 - 36) = *(v48 - 36);
            v107 = *(_OWORD *)(v48 - 35);
            v108 = *(_OWORD *)(v48 - 33);
            v109 = *(_OWORD *)(v48 - 31);
            *(_OWORD *)(v44 - 29) = *(_OWORD *)(v48 - 29);
            *(_OWORD *)(v44 - 31) = v109;
            *(_OWORD *)(v44 - 35) = v107;
            *(_OWORD *)(v44 - 33) = v108;
            v110 = *(_OWORD *)(v48 - 27);
            v111 = *(_OWORD *)(v48 - 25);
            v112 = *(_OWORD *)(v48 - 23);
            *(v44 - 21) = *(v48 - 21);
            *(_OWORD *)(v44 - 23) = v112;
            *(_OWORD *)(v44 - 25) = v111;
            *(_OWORD *)(v44 - 27) = v110;
            v114 = *((_OWORD *)v48 - 5);
            v113 = *((_OWORD *)v48 - 4);
            v115 = *((_OWORD *)v48 - 6);
            *(v44 - 6) = *(v48 - 6);
            *((_OWORD *)v44 - 5) = v114;
            *((_OWORD *)v44 - 4) = v113;
            *((_OWORD *)v44 - 6) = v115;
            v116 = *((_OWORD *)v48 - 10);
            v117 = *((_OWORD *)v48 - 9);
            v118 = *((_OWORD *)v48 - 7);
            *((_OWORD *)v44 - 8) = *((_OWORD *)v48 - 8);
            *((_OWORD *)v44 - 7) = v118;
            *((_OWORD *)v44 - 10) = v116;
            *((_OWORD *)v44 - 9) = v117;
            v119 = *(v48 - 5);
            *((_BYTE *)v44 - 32) = *((_BYTE *)v48 - 32);
            *(v44 - 5) = v119;
            v120 = *(_OWORD *)(v48 - 3);
            *(v48 - 3) = 0;
            *(v48 - 2) = 0;
            v121 = (std::__shared_weak_count *)*(v44 - 2);
            *(_OWORD *)(v44 - 3) = v120;
            if (v121)
            {
              v122 = (unint64_t *)&v121->__shared_owners_;
              do
                v123 = __ldaxr(v122);
              while (__stlxr(v123 - 1, v122));
              if (!v123)
              {
                ((void (*)(std::__shared_weak_count *, unint64_t *, __int128 *, __int128 *, std::__shared_weak_count *, __int128 *))v121->__on_zero_shared)(v121, a2, a3, a4, a5, a6);
                std::__shared_weak_count::__release_weak(v121);
              }
            }
            *((_BYTE *)v44 - 8) = *((_BYTE *)v48 - 8);
            v44 -= 63;
            v48 -= 63;
          }
          while (v93 != v11);
        }
        *v11 = v9;
        v73 = &v72[504 * v241];
        *(_OWORD *)(v73 + 8) = v297;
        *(_OWORD *)(v73 + 136) = v321;
        *(_OWORD *)(v73 + 152) = v322;
        *(_OWORD *)(v73 + 168) = v323;
        *((_QWORD *)v73 + 23) = v324;
        *(_OWORD *)(v73 + 72) = v317;
        *(_OWORD *)(v73 + 88) = v318;
        *(_OWORD *)(v73 + 104) = v319;
        *(_OWORD *)(v73 + 120) = v320;
        *(_OWORD *)(v73 + 24) = v314;
        *(_OWORD *)(v73 + 40) = v315;
        *(_OWORD *)(v73 + 56) = v316;
        v74 = (std::__shared_weak_count *)*((_QWORD *)v73 + 25);
        *((_QWORD *)v73 + 24) = v254;
        *((_QWORD *)v73 + 25) = v240;
        if (v74)
        {
          v75 = (unint64_t *)&v74->__shared_owners_;
          do
            v76 = __ldaxr(v75);
          while (__stlxr(v76 - 1, v75));
          if (!v76)
          {
            ((void (*)(std::__shared_weak_count *, unint64_t *, __int128 *, __int128 *, std::__shared_weak_count *, __int128 *))v74->__on_zero_shared)(v74, a2, a3, a4, a5, a6);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
        v77 = v310;
        v78 = &v72[504 * v241];
        v79 = v312;
        *((_OWORD *)v78 + 19) = v311;
        *((_OWORD *)v78 + 20) = v79;
        v80 = v306;
        v81 = v307;
        *((_OWORD *)v78 + 13) = v239;
        *((_OWORD *)v78 + 14) = v80;
        v82 = v308;
        v83 = v309;
        *((_OWORD *)v78 + 15) = v81;
        *((_OWORD *)v78 + 16) = v82;
        *((_QWORD *)v78 + 42) = v313;
        *((_OWORD *)v78 + 17) = v83;
        *((_OWORD *)v78 + 18) = v77;
        v84 = v301;
        *(_OWORD *)(v78 + 376) = v300;
        *(_OWORD *)(v78 + 392) = v84;
        v85 = v299;
        *(_OWORD *)(v78 + 344) = v298;
        *(_OWORD *)(v78 + 360) = v85;
        v86 = v305;
        v87 = v304;
        v88 = v302;
        *(_OWORD *)(v78 + 424) = v303;
        *(_OWORD *)(v78 + 440) = v87;
        *(_OWORD *)(v78 + 408) = v88;
        v78[472] = v296;
        v89 = v295;
        *((_QWORD *)v78 + 57) = v86;
        *((_QWORD *)v78 + 58) = v89;
        v90 = (std::__shared_weak_count *)*((_QWORD *)v78 + 61);
        *((_QWORD *)v78 + 60) = v272;
        *((_QWORD *)v78 + 61) = v43;
        if (v90)
        {
          v91 = (unint64_t *)&v90->__shared_owners_;
          do
            v92 = __ldaxr(v91);
          while (__stlxr(v92 - 1, v91));
          if (!v92)
          {
            ((void (*)(std::__shared_weak_count *, unint64_t *, __int128 *, __int128 *, std::__shared_weak_count *, __int128 *))v90->__on_zero_shared)(v90, a2, a3, a4, a5, a6);
            std::__shared_weak_count::__release_weak(v90);
          }
        }
        v72[504 * v241 + 496] = 0;
      }
LABEL_145:
      v43 = (std::__shared_weak_count *)*((_QWORD *)&v293 + 1);
LABEL_146:
      if (v43)
      {
        v233 = (unint64_t *)&v43->__shared_owners_;
        do
          v234 = __ldaxr(v233);
        while (__stlxr(v234 - 1, v233));
        if (!v234)
        {
          ((void (*)(std::__shared_weak_count *, unint64_t *, __int128 *, __int128 *, std::__shared_weak_count *, __int128 *))v43->__on_zero_shared)(v43, a2, a3, a4, a5, a6);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      v235 = (std::__shared_weak_count *)*((_QWORD *)&v273 + 1);
      if (*((_QWORD *)&v273 + 1))
      {
        v236 = (unint64_t *)(*((_QWORD *)&v273 + 1) + 8);
        do
          v237 = __ldaxr(v236);
        while (__stlxr(v237 - 1, v236));
        if (!v237)
        {
          ((void (*)(std::__shared_weak_count *, unint64_t *, __int128 *, __int128 *, std::__shared_weak_count *, __int128 *))v235->__on_zero_shared)(v235, a2, a3, a4, a5, a6);
          std::__shared_weak_count::__release_weak(v235);
        }
      }
      *(_BYTE *)(a1 + 1594) = 0;
      *(_BYTE *)(a1 + 1592) = 0;
      *(int64x2_t *)(a1 + 1576) = vaddq_s64(*(int64x2_t *)(a1 + 1576), (int64x2_t)xmmword_2103B4900);
      v17 = 1;
      goto LABEL_72;
    }
    v129 = 0xEFBEFBEFBEFBEFBFLL * (((char *)v44 - v45) >> 3) + 1;
    if (v129 > 0x82082082082082)
      sub_20E867F44();
    v130 = 0xEFBEFBEFBEFBEFBFLL * ((uint64_t)(v47 - (_QWORD)v45) >> 3);
    v131 = 0xDF7DF7DF7DF7DF7ELL * ((uint64_t)(v47 - (_QWORD)v45) >> 3);
    if (v131 > v129)
      v129 = v131;
    if (v130 >= 0x41041041041041)
      v132 = 0x82082082082082;
    else
      v132 = v129;
    *(_QWORD *)&v316 = a1 + 1080;
    v238 = (unint64_t *)v45;
    if (v132)
    {
      if (v132 > 0x82082082082082)
        sub_20E877A38();
      v133 = (char *)operator new(504 * v132);
    }
    else
    {
      v133 = 0;
    }
    v148 = (uint64_t)&v133[504 * v241];
    *(_QWORD *)&v314 = v133;
    *((_QWORD *)&v314 + 1) = v148;
    *(_QWORD *)&v315 = v148;
    *((_QWORD *)&v315 + 1) = &v133[504 * v132];
    if (v241 == v132)
    {
      if (v46 >= 1)
      {
        v149 = v241 + 2;
        if (v241 >= -1)
          v149 = v241 + 1;
        v150 = v149 >> 1;
        v151 = sub_20F5B64A0(v148, v148, v148 - 504 * (v149 >> 1));
        v148 = *((_QWORD *)&v314 + 1) - 504 * v150;
        *(_QWORD *)&v315 = v151;
        *((_QWORD *)&v314 + 1) = v148;
        goto LABEL_107;
      }
      if (v238 == v11)
        v152 = 1;
      else
        v152 = 2 * v241;
      if (v152 > 0x82082082082082)
        sub_20E877A38();
      v153 = (char *)operator new(504 * v152);
      v148 = (uint64_t)&v153[504 * (v152 >> 2)];
      *(_QWORD *)&v314 = v153;
      *((_QWORD *)&v314 + 1) = v148;
      *(_QWORD *)&v315 = v148;
      *((_QWORD *)&v315 + 1) = &v153[504 * v152];
      if (v133)
        operator delete(v133);
    }
    v151 = v148;
LABEL_107:
    *(_QWORD *)v151 = v9;
    *(_OWORD *)(v151 + 8) = v242;
    *(_OWORD *)(v151 + 120) = v249;
    *(_OWORD *)(v151 + 104) = v248;
    *(_OWORD *)(v151 + 88) = v247;
    *(_OWORD *)(v151 + 72) = v246;
    *(_QWORD *)(v151 + 184) = v253;
    *(_OWORD *)(v151 + 168) = v252;
    *(_OWORD *)(v151 + 152) = v251;
    *(_OWORD *)(v151 + 136) = v250;
    *(_OWORD *)(v151 + 24) = v243;
    *(_OWORD *)(v151 + 40) = v244;
    *(_OWORD *)(v151 + 56) = v245;
    *(_OWORD *)(v151 + 192) = v273;
    v273 = 0uLL;
    *(_OWORD *)(v151 + 208) = v274;
    *(_QWORD *)(v151 + 336) = v282;
    v154 = v281;
    v155 = v279;
    *(_OWORD *)(v151 + 304) = v280;
    *(_OWORD *)(v151 + 320) = v154;
    v156 = v276;
    *(_OWORD *)(v151 + 224) = v275;
    *(_OWORD *)(v151 + 240) = v156;
    v157 = v278;
    *(_OWORD *)(v151 + 256) = v277;
    *(_OWORD *)(v151 + 272) = v157;
    *(_OWORD *)(v151 + 288) = v155;
    v158 = v283;
    v159 = v284;
    v160 = v286;
    *(_OWORD *)(v151 + 376) = v285;
    *(_OWORD *)(v151 + 392) = v160;
    *(_OWORD *)(v151 + 344) = v158;
    *(_OWORD *)(v151 + 360) = v159;
    v161 = v287;
    v162 = v288;
    v163 = v289;
    *(_QWORD *)(v151 + 456) = v290;
    *(_OWORD *)(v151 + 424) = v162;
    *(_OWORD *)(v151 + 440) = v163;
    *(_OWORD *)(v151 + 408) = v161;
    v164 = v291;
    *(_BYTE *)(v151 + 472) = v292;
    *(_QWORD *)(v151 + 464) = v164;
    *(_OWORD *)(v151 + 480) = v293;
    v293 = 0uLL;
    *(_BYTE *)(v151 + 496) = v294;
    v165 = v151 + 504;
    v166 = *(unint64_t **)(a1 + 1064);
    if (v166 == v11)
    {
      v168 = v148;
    }
    else
    {
      v167 = v11;
      do
      {
        v168 = v148 - 504;
        v169 = v167 - 63;
        *(_QWORD *)v168 = *(v167 - 63);
        *(_OWORD *)(v168 + 8) = *((_OWORD *)v167 - 31);
        v170 = *((_OWORD *)v167 - 26);
        v171 = *((_OWORD *)v167 - 25);
        v172 = *((_OWORD *)v167 - 24);
        *(_OWORD *)(v168 + 72) = *((_OWORD *)v167 - 27);
        *(_OWORD *)(v168 + 120) = v172;
        *(_OWORD *)(v168 + 104) = v171;
        *(_OWORD *)(v168 + 88) = v170;
        v173 = *((_OWORD *)v167 - 22);
        v174 = *((_OWORD *)v167 - 21);
        v175 = *(v167 - 40);
        *(_OWORD *)(v168 + 136) = *((_OWORD *)v167 - 23);
        *(_QWORD *)(v168 + 184) = v175;
        *(_OWORD *)(v168 + 168) = v174;
        *(_OWORD *)(v168 + 152) = v173;
        v176 = *((_OWORD *)v167 - 30);
        v177 = *((_OWORD *)v167 - 29);
        *(_OWORD *)(v168 + 56) = *((_OWORD *)v167 - 28);
        *(_OWORD *)(v168 + 40) = v177;
        *(_OWORD *)(v168 + 24) = v176;
        *(_QWORD *)(v168 + 192) = *(v167 - 39);
        v178 = *(v167 - 38);
        *(_QWORD *)(v168 + 200) = v178;
        if (v178)
        {
          v179 = (unint64_t *)(v178 + 8);
          do
            v180 = __ldxr(v179);
          while (__stxr(v180 + 1, v179));
        }
        *(_OWORD *)(v148 - 296) = *(_OWORD *)(v167 - 37);
        v181 = *(_OWORD *)(v167 - 25);
        v182 = *(_OWORD *)(v167 - 23);
        v183 = *(v167 - 21);
        *(_OWORD *)(v148 - 216) = *(_OWORD *)(v167 - 27);
        *(_QWORD *)(v148 - 168) = v183;
        *(_OWORD *)(v148 - 184) = v182;
        *(_OWORD *)(v148 - 200) = v181;
        v184 = *(_OWORD *)(v167 - 35);
        v185 = *(_OWORD *)(v167 - 33);
        v186 = *(_OWORD *)(v167 - 31);
        *(_OWORD *)(v148 - 232) = *(_OWORD *)(v167 - 29);
        *(_OWORD *)(v148 - 248) = v186;
        *(_OWORD *)(v148 - 280) = v184;
        *(_OWORD *)(v148 - 264) = v185;
        v188 = *((_OWORD *)v167 - 5);
        v187 = *((_OWORD *)v167 - 4);
        v189 = *((_OWORD *)v167 - 6);
        *(_QWORD *)(v148 - 48) = *(v167 - 6);
        *(_OWORD *)(v148 - 80) = v188;
        *(_OWORD *)(v148 - 64) = v187;
        *(_OWORD *)(v148 - 96) = v189;
        v190 = *((_OWORD *)v167 - 10);
        v191 = *((_OWORD *)v167 - 9);
        v192 = *((_OWORD *)v167 - 7);
        *(_OWORD *)(v148 - 128) = *((_OWORD *)v167 - 8);
        *(_OWORD *)(v148 - 112) = v192;
        *(_OWORD *)(v148 - 160) = v190;
        *(_OWORD *)(v148 - 144) = v191;
        v193 = *(v167 - 5);
        *(_BYTE *)(v148 - 32) = *((_BYTE *)v167 - 32);
        *(_QWORD *)(v148 - 40) = v193;
        *(_QWORD *)(v148 - 24) = *(v167 - 3);
        v194 = *(v167 - 2);
        *(_QWORD *)(v148 - 16) = v194;
        if (v194)
        {
          v195 = (unint64_t *)(v194 + 8);
          do
            v196 = __ldxr(v195);
          while (__stxr(v196 + 1, v195));
        }
        *(_BYTE *)(v148 - 8) = *((_BYTE *)v167 - 8);
        v148 -= 504;
        v167 -= 63;
      }
      while (v169 != v166);
    }
    *((_QWORD *)&v314 + 1) = v168;
    v197 = *(unint64_t **)(a1 + 1072);
    if (v197 != v11)
    {
      do
      {
        *(_QWORD *)v165 = *v11;
        *(_OWORD *)(v165 + 8) = *(_OWORD *)(v11 + 1);
        v198 = *(_OWORD *)(v11 + 11);
        v199 = *(_OWORD *)(v11 + 13);
        v200 = *(_OWORD *)(v11 + 15);
        *(_OWORD *)(v165 + 72) = *(_OWORD *)(v11 + 9);
        *(_OWORD *)(v165 + 120) = v200;
        *(_OWORD *)(v165 + 104) = v199;
        *(_OWORD *)(v165 + 88) = v198;
        v201 = *(_OWORD *)(v11 + 19);
        v202 = *(_OWORD *)(v11 + 21);
        v203 = v11[23];
        *(_OWORD *)(v165 + 136) = *(_OWORD *)(v11 + 17);
        *(_QWORD *)(v165 + 184) = v203;
        *(_OWORD *)(v165 + 168) = v202;
        *(_OWORD *)(v165 + 152) = v201;
        v204 = *(_OWORD *)(v11 + 3);
        v205 = *(_OWORD *)(v11 + 5);
        *(_OWORD *)(v165 + 56) = *(_OWORD *)(v11 + 7);
        *(_OWORD *)(v165 + 40) = v205;
        *(_OWORD *)(v165 + 24) = v204;
        *(_QWORD *)(v165 + 192) = v11[24];
        v206 = v11[25];
        *(_QWORD *)(v165 + 200) = v206;
        if (v206)
        {
          v207 = (unint64_t *)(v206 + 8);
          do
            v208 = __ldxr(v207);
          while (__stxr(v208 + 1, v207));
        }
        *(_OWORD *)(v165 + 208) = *((_OWORD *)v11 + 13);
        v210 = *((_OWORD *)v11 + 19);
        v209 = *((_OWORD *)v11 + 20);
        v211 = *((_OWORD *)v11 + 18);
        *(_QWORD *)(v165 + 336) = v11[42];
        *(_OWORD *)(v165 + 304) = v210;
        *(_OWORD *)(v165 + 320) = v209;
        *(_OWORD *)(v165 + 288) = v211;
        v212 = *((_OWORD *)v11 + 14);
        v213 = *((_OWORD *)v11 + 15);
        v214 = *((_OWORD *)v11 + 17);
        *(_OWORD *)(v165 + 256) = *((_OWORD *)v11 + 16);
        *(_OWORD *)(v165 + 272) = v214;
        *(_OWORD *)(v165 + 224) = v212;
        *(_OWORD *)(v165 + 240) = v213;
        v216 = *(_OWORD *)(v11 + 53);
        v215 = *(_OWORD *)(v11 + 55);
        v217 = *(_OWORD *)(v11 + 51);
        *(_QWORD *)(v165 + 456) = v11[57];
        *(_OWORD *)(v165 + 424) = v216;
        *(_OWORD *)(v165 + 440) = v215;
        *(_OWORD *)(v165 + 408) = v217;
        v218 = *(_OWORD *)(v11 + 43);
        v219 = *(_OWORD *)(v11 + 45);
        v220 = *(_OWORD *)(v11 + 49);
        *(_OWORD *)(v165 + 376) = *(_OWORD *)(v11 + 47);
        *(_OWORD *)(v165 + 392) = v220;
        *(_OWORD *)(v165 + 344) = v218;
        *(_OWORD *)(v165 + 360) = v219;
        v221 = v11[58];
        *(_BYTE *)(v165 + 472) = *((_BYTE *)v11 + 472);
        *(_QWORD *)(v165 + 464) = v221;
        *(_QWORD *)(v165 + 480) = v11[60];
        v222 = v11[61];
        *(_QWORD *)(v165 + 488) = v222;
        if (v222)
        {
          v223 = (unint64_t *)(v222 + 8);
          do
            v224 = __ldxr(v223);
          while (__stxr(v224 + 1, v223));
        }
        *(_BYTE *)(v165 + 496) = *((_BYTE *)v11 + 496);
        v11 += 63;
        v165 += 504;
      }
      while (v11 != v197);
      v168 = *((_QWORD *)&v314 + 1);
      v11 = *(unint64_t **)(a1 + 1072);
    }
    v225 = *(unint64_t **)(a1 + 1064);
    *(_QWORD *)(a1 + 1064) = v168;
    *(_QWORD *)(a1 + 1072) = v165;
    v226 = *(_QWORD *)(a1 + 1080);
    *(_QWORD *)(a1 + 1080) = *((_QWORD *)&v315 + 1);
    *((_QWORD *)&v315 + 1) = v226;
    *((_QWORD *)&v314 + 1) = v225;
    *(_QWORD *)&v314 = v225;
    if (v11 != v225)
    {
      do
      {
        *(_QWORD *)&v315 = v11 - 63;
        v227 = (std::__shared_weak_count *)*(v11 - 2);
        if (v227)
        {
          v228 = (unint64_t *)&v227->__shared_owners_;
          do
            v229 = __ldaxr(v228);
          while (__stlxr(v229 - 1, v228));
          if (!v229)
          {
            ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
            std::__shared_weak_count::__release_weak(v227);
          }
        }
        v230 = (std::__shared_weak_count *)*(v11 - 38);
        if (v230)
        {
          v231 = (unint64_t *)&v230->__shared_owners_;
          do
            v232 = __ldaxr(v231);
          while (__stlxr(v232 - 1, v231));
          if (!v232)
          {
            ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
            std::__shared_weak_count::__release_weak(v230);
          }
        }
        v11 = (unint64_t *)v315;
      }
      while ((unint64_t *)v315 != v225);
      v11 = (unint64_t *)v314;
    }
    if (v11)
      operator delete(v11);
    goto LABEL_145;
  }
  v17 = 0;
  --*(_DWORD *)(v32 + 8);
  --*(_DWORD *)(v41 + 8);
LABEL_72:
  if (*((_QWORD *)&v272 + 1))
  {
    v124 = (unint64_t *)(*((_QWORD *)&v272 + 1) + 8);
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v272 + 1) + 16))(*((_QWORD *)&v272 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v272 + 1));
    }
  }
  if (*((_QWORD *)&v254 + 1))
  {
    v126 = (unint64_t *)(*((_QWORD *)&v254 + 1) + 8);
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v254 + 1) + 16))(*((_QWORD *)&v254 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v254 + 1));
    }
  }
  return v17;
}

void sub_20FBAFA68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20F626D08((uint64_t)&STACK[0x560]);
  sub_20F4EE818((uint64_t)&STACK[0x248]);
  sub_20F4EE8C4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FBAFA8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20F4EE818((uint64_t)&STACK[0x248]);
  sub_20F4EE8C4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20FBAFAA8(uint64_t a1, __int128 *a2, __int128 *a3, __int128 *a4, std::__shared_weak_count *a5, __int128 *a6)
{
  std::__shared_weak_count *v6;
  unsigned int *v7;
  unint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  char *v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int *v28;
  char *v29;
  unsigned int v30;
  uint64_t v31;
  __int128 v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  _BYTE *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t *v39;
  unint64_t *v40;
  __int128 v41;
  __int128 v42;
  unint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  unint64_t v49;
  _BYTE *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  _BYTE *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t *v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  unint64_t v76;
  __int128 v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  _BYTE *v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  unint64_t v121;
  unint64_t *v122;
  __int128 v123;
  __int128 v124;
  unint64_t v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  unint64_t v131;
  unint64_t *v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t *v145;
  unint64_t v146;
  unint64_t *v147;
  unint64_t v148;
  _BYTE *v150;
  unint64_t *v151;
  int64_t v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  uint64_t v158;
  __int128 v159;
  uint64_t v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  uint64_t v174;
  __int128 v175;
  uint64_t v176;
  __int128 v177;
  uint64_t v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  unint64_t v185;
  char v186;
  __int128 v187;
  char v188;
  unint64_t v189;
  char v190;
  __int128 v191;
  uint64_t v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  uint64_t v204;
  uint64_t v205;

  v6 = a5;
  v7 = (unsigned int *)a3;
  v205 = *MEMORY[0x24BDAC8D0];
  v9 = *(_QWORD *)a2;
  v10 = *(unint64_t **)(a1 + 1088);
  v11 = *(unint64_t **)(a1 + 1096);
  if (v10 == v11)
  {
    v11 = *(unint64_t **)(a1 + 1088);
  }
  else if (*(v11 - 35) >= v9)
  {
    v12 = 0xAF8AF8AF8AF8AF8BLL * (v11 - v10);
    do
    {
      v13 = v12 >> 1;
      v14 = &v10[35 * (v12 >> 1)];
      v15 = *v14;
      v16 = v14 + 35;
      v12 += ~(v12 >> 1);
      if (v15 < v9)
        v10 = v16;
      else
        v12 = v13;
    }
    while (v12);
    if (v10 != v11)
    {
      v11 = v10;
      if (*v10 == v9)
        return 0;
    }
  }
  if (a5)
  {
    p_shared_owners = (unint64_t *)&a5->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  v155 = a2[2];
  v156 = a2[3];
  v157 = a2[4];
  v158 = *((_QWORD *)a2 + 10);
  v153 = *a2;
  v154 = a2[1];
  v159 = *(__int128 *)((char *)a2 + 88);
  v160 = *((_QWORD *)a2 + 13);
  v161 = a2[7];
  *((_QWORD *)a2 + 14) = 0;
  *((_QWORD *)a2 + 15) = 0;
  *(_QWORD *)&v168 = a4;
  *((_QWORD *)&v168 + 1) = a5;
  if (a5)
  {
    v20 = (unint64_t *)&a5->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))a5->__on_zero_shared)(a5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v23 = *v7;
  v24 = *(char **)(a1 + 8);
  v25 = *(char **)(a1 + 16);
  if (v25 != v24)
  {
    v26 = (v25 - v24) >> 4;
    do
    {
      v27 = v26 >> 1;
      v28 = (unsigned int *)&v24[16 * (v26 >> 1)];
      v30 = *v28;
      v29 = (char *)(v28 + 4);
      v26 += ~(v26 >> 1);
      if (v30 < v23)
        v24 = v29;
      else
        v26 = v27;
    }
    while (v26);
  }
  if (v24 == v25 || *(_DWORD *)v24 != v23)
  {
    v17 = 0;
  }
  else
  {
    v31 = *((_QWORD *)v24 + 1);
    ++*(_DWORD *)(v31 + 8);
    if (*(_BYTE *)(v31 + 20))
    {
      v169 = v153;
      v171 = v155;
      v172 = v156;
      v173 = v157;
      v174 = v158;
      v170 = v154;
      v175 = v159;
      v32 = v161;
      v176 = v160;
      v177 = v161;
      v161 = 0uLL;
      v178 = v31;
      v179 = v162;
      v180 = v163;
      v181 = v164;
      v182 = v165;
      v183 = v166;
      v184 = v167;
      v186 = 0;
      v185 = 0xBFF0000000000000;
      v33 = (std::__shared_weak_count *)*((_QWORD *)&v168 + 1);
      v187 = v168;
      *((_QWORD *)&v168 + 1) = 0;
      v188 = 0;
      v34 = *(unint64_t **)(a1 + 1096);
      if (v34 != v11 && *v11 == v9)
        goto LABEL_109;
      a6 = &v169;
      a5 = (std::__shared_weak_count *)&v175;
      a3 = &v177;
      a4 = &v179;
      a2 = &v187;
      v35 = *(_BYTE **)(a1 + 1088);
      v36 = (char *)v11 - v35;
      v152 = 0xAF8AF8AF8AF8AF8BLL * (((char *)v11 - v35) >> 3);
      v37 = *(_QWORD *)(a1 + 1104);
      if ((unint64_t)v34 < v37)
      {
        if (v11 == v34)
        {
          *v34 = v9;
          v85 = &v35[8 * (((char *)v11 - v35) >> 3)];
          *(_OWORD *)(v85 + 8) = v169;
          v87 = v172;
          v86 = v173;
          v88 = v174;
          *(_OWORD *)(v85 + 40) = v171;
          *((_QWORD *)v85 + 11) = v88;
          *(_OWORD *)(v85 + 72) = v86;
          *(_OWORD *)(v85 + 56) = v87;
          *(_OWORD *)(v85 + 24) = v170;
          v89 = v176;
          *((_OWORD *)v85 + 6) = v175;
          *((_QWORD *)v85 + 14) = v89;
          *(_OWORD *)(v85 + 120) = v32;
          v177 = 0uLL;
          *((_QWORD *)v85 + 17) = v31;
          v90 = v179;
          v91 = v181;
          *((_OWORD *)v85 + 10) = v180;
          *((_OWORD *)v85 + 11) = v91;
          *((_OWORD *)v85 + 9) = v90;
          v92 = v182;
          v93 = v184;
          *((_OWORD *)v85 + 13) = v183;
          *((_OWORD *)v85 + 14) = v93;
          *((_OWORD *)v85 + 12) = v92;
          v94 = v185;
          v85[248] = v186;
          *((_QWORD *)v85 + 30) = v94;
          *((_QWORD *)v85 + 32) = v168;
          *((_QWORD *)v85 + 33) = v33;
          v187 = 0uLL;
          v85[272] = 0;
          *(_QWORD *)(a1 + 1096) = v34 + 35;
        }
        else
        {
          v202 = v156;
          v203 = v157;
          v204 = v158;
          v200 = v154;
          v201 = v155;
          v192 = v160;
          v191 = v159;
          v177 = 0uLL;
          v198 = v163;
          v199 = v164;
          v197 = v162;
          v195 = v166;
          v196 = v167;
          v193 = v153;
          v194 = v165;
          v190 = 0;
          v189 = 0xBFF0000000000000;
          v38 = v34 - 35;
          v39 = v34;
          v187 = 0uLL;
          if ((unint64_t)v34 >= 0x118)
          {
            v40 = v34 - 35;
            v39 = v34;
            do
            {
              *v39 = *v40;
              *(_OWORD *)(v39 + 1) = *(_OWORD *)(v40 + 1);
              v41 = *(_OWORD *)(v40 + 7);
              v42 = *(_OWORD *)(v40 + 9);
              v43 = v40[11];
              *(_OWORD *)(v39 + 5) = *(_OWORD *)(v40 + 5);
              v39[11] = v43;
              *(_OWORD *)(v39 + 9) = v42;
              *(_OWORD *)(v39 + 7) = v41;
              *(_OWORD *)(v39 + 3) = *(_OWORD *)(v40 + 3);
              v44 = *((_OWORD *)v40 + 6);
              v39[14] = v40[14];
              *((_OWORD *)v39 + 6) = v44;
              *(_OWORD *)(v39 + 15) = *(_OWORD *)(v40 + 15);
              v40[15] = 0;
              v40[16] = 0;
              v39[17] = v40[17];
              v45 = *((_OWORD *)v40 + 9);
              v46 = *((_OWORD *)v40 + 11);
              *((_OWORD *)v39 + 10) = *((_OWORD *)v40 + 10);
              *((_OWORD *)v39 + 11) = v46;
              *((_OWORD *)v39 + 9) = v45;
              v47 = *((_OWORD *)v40 + 12);
              v48 = *((_OWORD *)v40 + 14);
              *((_OWORD *)v39 + 13) = *((_OWORD *)v40 + 13);
              *((_OWORD *)v39 + 14) = v48;
              *((_OWORD *)v39 + 12) = v47;
              v49 = v40[30];
              *((_BYTE *)v39 + 248) = *((_BYTE *)v40 + 248);
              v39[30] = v49;
              *((_OWORD *)v39 + 16) = *((_OWORD *)v40 + 16);
              v40[32] = 0;
              v40[33] = 0;
              *((_BYTE *)v39 + 272) = *((_BYTE *)v40 + 272);
              v39 += 35;
              v40 += 35;
            }
            while (v40 < v34);
          }
          v150 = v35;
          *(_QWORD *)(a1 + 1096) = v39;
          if (v34 != v11 + 35)
          {
            do
            {
              v62 = v38 - 35;
              v63 = v34 - 35;
              *v63 = *(v38 - 35);
              *(_OWORD *)(v63 + 1) = *((_OWORD *)v38 - 17);
              v65 = *((_OWORD *)v38 - 14);
              v64 = *((_OWORD *)v38 - 13);
              v66 = *((_OWORD *)v38 - 15);
              *(v34 - 24) = *(v38 - 24);
              *((_OWORD *)v34 - 14) = v65;
              *((_OWORD *)v34 - 13) = v64;
              *((_OWORD *)v34 - 15) = v66;
              *((_OWORD *)v34 - 16) = *((_OWORD *)v38 - 16);
              v67 = *(_OWORD *)(v38 - 23);
              *(v34 - 21) = *(v38 - 21);
              *(_OWORD *)(v34 - 23) = v67;
              v68 = *((_OWORD *)v38 - 10);
              *(v38 - 20) = 0;
              *(v38 - 19) = 0;
              v69 = (std::__shared_weak_count *)*(v34 - 19);
              *((_OWORD *)v34 - 10) = v68;
              if (v69)
              {
                v70 = (unint64_t *)&v69->__shared_owners_;
                do
                  v71 = __ldaxr(v70);
                while (__stlxr(v71 - 1, v70));
                if (!v71)
                {
                  ((void (*)(std::__shared_weak_count *, __int128 *, __int128 *, __int128 *, std::__shared_weak_count *, __int128 *))v69->__on_zero_shared)(v69, a2, a3, a4, a5, a6);
                  std::__shared_weak_count::__release_weak(v69);
                }
              }
              *(v34 - 18) = *(v38 - 18);
              v72 = *(_OWORD *)(v38 - 17);
              v73 = *(_OWORD *)(v38 - 15);
              *(_OWORD *)(v34 - 13) = *(_OWORD *)(v38 - 13);
              *(_OWORD *)(v34 - 15) = v73;
              *(_OWORD *)(v34 - 17) = v72;
              v74 = *(_OWORD *)(v38 - 11);
              v75 = *(_OWORD *)(v38 - 9);
              *(_OWORD *)(v34 - 7) = *(_OWORD *)(v38 - 7);
              *(_OWORD *)(v34 - 9) = v75;
              *(_OWORD *)(v34 - 11) = v74;
              v76 = *(v38 - 5);
              *((_BYTE *)v34 - 32) = *((_BYTE *)v38 - 32);
              *(v34 - 5) = v76;
              v77 = *(_OWORD *)(v38 - 3);
              *(v38 - 3) = 0;
              *(v38 - 2) = 0;
              v78 = (std::__shared_weak_count *)*(v34 - 2);
              *(_OWORD *)(v34 - 3) = v77;
              if (v78)
              {
                v79 = (unint64_t *)&v78->__shared_owners_;
                do
                  v80 = __ldaxr(v79);
                while (__stlxr(v80 - 1, v79));
                if (!v80)
                {
                  ((void (*)(std::__shared_weak_count *, __int128 *, __int128 *, __int128 *, std::__shared_weak_count *, __int128 *))v78->__on_zero_shared)(v78, a2, a3, a4, a5, a6);
                  std::__shared_weak_count::__release_weak(v78);
                }
              }
              *((_BYTE *)v34 - 8) = *((_BYTE *)v38 - 8);
              v34 -= 35;
              v38 -= 35;
            }
            while (v62 != v11);
          }
          *v11 = v9;
          v50 = &v150[280 * v152];
          *(_OWORD *)(v50 + 8) = v193;
          *(_OWORD *)(v50 + 40) = v201;
          *(_OWORD *)(v50 + 56) = v202;
          *(_OWORD *)(v50 + 72) = v203;
          *((_QWORD *)v50 + 11) = v204;
          *(_OWORD *)(v50 + 24) = v200;
          *((_OWORD *)v50 + 6) = v191;
          *((_QWORD *)v50 + 14) = v192;
          *((_QWORD *)v50 + 15) = v32;
          v51 = (std::__shared_weak_count *)*((_QWORD *)v50 + 16);
          *((_QWORD *)v50 + 16) = *((_QWORD *)&v32 + 1);
          if (v51)
          {
            v52 = (unint64_t *)&v51->__shared_owners_;
            do
              v53 = __ldaxr(v52);
            while (__stlxr(v53 - 1, v52));
            if (!v53)
            {
              ((void (*)(std::__shared_weak_count *, __int128 *, __int128 *, __int128 *, std::__shared_weak_count *, __int128 *))v51->__on_zero_shared)(v51, a2, a3, a4, a5, a6);
              std::__shared_weak_count::__release_weak(v51);
            }
          }
          v54 = &v150[280 * v152];
          *((_QWORD *)v54 + 17) = v31;
          v55 = v198;
          *((_OWORD *)v54 + 9) = v197;
          *((_OWORD *)v54 + 10) = v55;
          v56 = v194;
          v57 = v195;
          *((_OWORD *)v54 + 11) = v199;
          *((_OWORD *)v54 + 12) = v56;
          v58 = v196;
          *((_OWORD *)v54 + 13) = v57;
          *((_OWORD *)v54 + 14) = v58;
          *((_QWORD *)v54 + 30) = v189;
          v54[248] = v190;
          v59 = (std::__shared_weak_count *)*((_QWORD *)v54 + 33);
          *((_QWORD *)v54 + 32) = v168;
          *((_QWORD *)v54 + 33) = v33;
          if (v59)
          {
            v60 = (unint64_t *)&v59->__shared_owners_;
            do
              v61 = __ldaxr(v60);
            while (__stlxr(v61 - 1, v60));
            if (!v61)
            {
              ((void (*)(std::__shared_weak_count *, __int128 *, __int128 *, __int128 *, std::__shared_weak_count *, __int128 *))v59->__on_zero_shared)(v59, a2, a3, a4, a5, a6);
              std::__shared_weak_count::__release_weak(v59);
            }
          }
          v150[280 * v152 + 272] = 0;
        }
LABEL_108:
        v33 = (std::__shared_weak_count *)*((_QWORD *)&v187 + 1);
LABEL_109:
        if (v33)
        {
          v140 = (unint64_t *)&v33->__shared_owners_;
          do
            v141 = __ldaxr(v140);
          while (__stlxr(v141 - 1, v140));
          if (!v141)
          {
            ((void (*)(std::__shared_weak_count *, __int128 *, __int128 *, __int128 *, std::__shared_weak_count *, __int128 *))v33->__on_zero_shared)(v33, a2, a3, a4, a5, a6);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        v142 = (std::__shared_weak_count *)*((_QWORD *)&v177 + 1);
        if (*((_QWORD *)&v177 + 1))
        {
          v143 = (unint64_t *)(*((_QWORD *)&v177 + 1) + 8);
          do
            v144 = __ldaxr(v143);
          while (__stlxr(v144 - 1, v143));
          if (!v144)
          {
            ((void (*)(std::__shared_weak_count *, __int128 *, __int128 *, __int128 *, std::__shared_weak_count *, __int128 *))v142->__on_zero_shared)(v142, a2, a3, a4, a5, a6);
            std::__shared_weak_count::__release_weak(v142);
          }
        }
        *(_BYTE *)(a1 + 1594) = 0;
        *(_BYTE *)(a1 + 1592) = 0;
        *(int64x2_t *)(a1 + 1576) = vaddq_s64(*(int64x2_t *)(a1 + 1576), (int64x2_t)xmmword_2103B2300);
        v17 = 1;
        goto LABEL_120;
      }
      v81 = 0xAF8AF8AF8AF8AF8BLL * (((char *)v34 - v35) >> 3) + 1;
      if (v81 > 0xEA0EA0EA0EA0EALL)
        sub_20E867F44();
      v82 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(v37 - (_QWORD)v35) >> 3);
      if (2 * v82 > v81)
        v81 = 2 * v82;
      if (v82 >= 0x75075075075075)
        v83 = 0xEA0EA0EA0EA0EALL;
      else
        v83 = v81;
      *(_QWORD *)&v202 = a1 + 1104;
      v151 = (unint64_t *)v35;
      if (v83)
      {
        if (v83 > 0xEA0EA0EA0EA0EALL)
          sub_20E877A38();
        v84 = (char *)operator new(280 * v83);
      }
      else
      {
        v84 = 0;
      }
      v95 = (uint64_t)&v84[280 * v152];
      *(_QWORD *)&v200 = v84;
      *((_QWORD *)&v200 + 1) = v95;
      *(_QWORD *)&v201 = v95;
      *((_QWORD *)&v201 + 1) = &v84[280 * v83];
      if (v152 == v83)
      {
        if (v36 >= 1)
        {
          v96 = v152 + 2;
          if (v152 >= -1)
            v96 = v152 + 1;
          v97 = v96 >> 1;
          v98 = sub_20F5B6660(v95, v95, v95 - 280 * (v96 >> 1));
          v95 = *((_QWORD *)&v200 + 1) - 280 * v97;
          *((_QWORD *)&v200 + 1) = v95;
          goto LABEL_85;
        }
        if (v151 == v11)
          v99 = 1;
        else
          v99 = 2 * v152;
        if (v99 > 0xEA0EA0EA0EA0EALL)
          sub_20E877A38();
        v100 = (char *)operator new(280 * v99);
        v95 = (uint64_t)&v100[280 * (v99 >> 2)];
        *(_QWORD *)&v200 = v100;
        *((_QWORD *)&v200 + 1) = v95;
        *((_QWORD *)&v201 + 1) = &v100[280 * v99];
        if (v84)
          operator delete(v84);
      }
      v98 = v95;
LABEL_85:
      *(_QWORD *)v98 = v9;
      *(_OWORD *)(v98 + 8) = v169;
      v101 = v170;
      *(_OWORD *)(v98 + 40) = v171;
      v102 = v173;
      *(_OWORD *)(v98 + 56) = v172;
      *(_OWORD *)(v98 + 72) = v102;
      *(_QWORD *)(v98 + 88) = v174;
      *(_OWORD *)(v98 + 24) = v101;
      *(_QWORD *)(v98 + 112) = v176;
      *(_OWORD *)(v98 + 96) = v175;
      *(_OWORD *)(v98 + 120) = v177;
      v177 = 0uLL;
      *(_QWORD *)(v98 + 136) = v178;
      v103 = v179;
      v104 = v181;
      *(_OWORD *)(v98 + 160) = v180;
      *(_OWORD *)(v98 + 176) = v104;
      *(_OWORD *)(v98 + 144) = v103;
      v105 = v182;
      v106 = v184;
      *(_OWORD *)(v98 + 208) = v183;
      *(_OWORD *)(v98 + 224) = v106;
      *(_OWORD *)(v98 + 192) = v105;
      v107 = v185;
      *(_BYTE *)(v98 + 248) = v186;
      *(_QWORD *)(v98 + 240) = v107;
      *(_OWORD *)(v98 + 256) = v187;
      v187 = 0uLL;
      *(_BYTE *)(v98 + 272) = v188;
      v108 = v98 + 280;
      *(_QWORD *)&v201 = v98 + 280;
      v109 = *(unint64_t **)(a1 + 1088);
      if (v109 != v11)
      {
        v110 = 0;
        do
        {
          v111 = v95 + v110 * 8;
          v112 = (char *)&v11[v110];
          *(_QWORD *)(v95 + v110 * 8 - 280) = v11[v110 - 35];
          *(_OWORD *)(v95 + v110 * 8 - 272) = *(_OWORD *)&v11[v110 - 34];
          v114 = *(_OWORD *)&v11[v110 - 28];
          v113 = *(_OWORD *)&v11[v110 - 26];
          v115 = *(_OWORD *)&v11[v110 - 30];
          *(_QWORD *)(v111 - 192) = v11[v110 - 24];
          *(_OWORD *)(v111 - 224) = v114;
          *(_OWORD *)(v111 - 208) = v113;
          *(_OWORD *)(v111 - 240) = v115;
          *(_OWORD *)(v111 - 256) = *(_OWORD *)&v11[v110 - 32];
          v116 = *(_OWORD *)&v11[v110 - 23];
          *(_QWORD *)(v111 - 168) = v11[v110 - 21];
          *(_OWORD *)(v111 - 184) = v116;
          *(_OWORD *)(v111 - 160) = *(_OWORD *)&v11[v110 - 20];
          *((_QWORD *)v112 - 20) = 0;
          *((_QWORD *)v112 - 19) = 0;
          *(_QWORD *)(v111 - 144) = v11[v110 - 18];
          v117 = *(_OWORD *)&v11[v110 - 17];
          v118 = *(_OWORD *)&v11[v110 - 15];
          *(_OWORD *)(v111 - 104) = *(_OWORD *)&v11[v110 - 13];
          *(_OWORD *)(v111 - 120) = v118;
          *(_OWORD *)(v111 - 136) = v117;
          v119 = *(_OWORD *)&v11[v110 - 11];
          v120 = *(_OWORD *)&v11[v110 - 9];
          *(_OWORD *)(v111 - 56) = *(_OWORD *)&v11[v110 - 7];
          *(_OWORD *)(v111 - 72) = v120;
          *(_OWORD *)(v111 - 88) = v119;
          v121 = v11[v110 - 5];
          *(_BYTE *)(v111 - 32) = v11[v110 - 4];
          *(_QWORD *)(v111 - 40) = v121;
          *(_OWORD *)(v111 - 24) = *(_OWORD *)&v11[v110 - 3];
          *((_QWORD *)v112 - 3) = 0;
          *((_QWORD *)v112 - 2) = 0;
          *(_BYTE *)(v111 - 8) = v11[v110 - 1];
          v110 -= 35;
        }
        while (&v11[v110] != v109);
        v108 = v201;
        v95 += v110 * 8;
      }
      *((_QWORD *)&v200 + 1) = v95;
      v122 = *(unint64_t **)(a1 + 1096);
      if (v122 != v11)
      {
        do
        {
          *(_QWORD *)v108 = *v11;
          *(_OWORD *)(v108 + 8) = *(_OWORD *)(v11 + 1);
          v123 = *(_OWORD *)(v11 + 7);
          v124 = *(_OWORD *)(v11 + 9);
          v125 = v11[11];
          *(_OWORD *)(v108 + 40) = *(_OWORD *)(v11 + 5);
          *(_QWORD *)(v108 + 88) = v125;
          *(_OWORD *)(v108 + 72) = v124;
          *(_OWORD *)(v108 + 56) = v123;
          *(_OWORD *)(v108 + 24) = *(_OWORD *)(v11 + 3);
          v126 = *((_OWORD *)v11 + 6);
          *(_QWORD *)(v108 + 112) = v11[14];
          *(_OWORD *)(v108 + 96) = v126;
          *(_OWORD *)(v108 + 120) = *(_OWORD *)(v11 + 15);
          v11[15] = 0;
          v11[16] = 0;
          *(_QWORD *)(v108 + 136) = v11[17];
          v127 = *((_OWORD *)v11 + 9);
          v128 = *((_OWORD *)v11 + 11);
          *(_OWORD *)(v108 + 160) = *((_OWORD *)v11 + 10);
          *(_OWORD *)(v108 + 176) = v128;
          *(_OWORD *)(v108 + 144) = v127;
          v129 = *((_OWORD *)v11 + 12);
          v130 = *((_OWORD *)v11 + 14);
          *(_OWORD *)(v108 + 208) = *((_OWORD *)v11 + 13);
          *(_OWORD *)(v108 + 224) = v130;
          *(_OWORD *)(v108 + 192) = v129;
          v131 = v11[30];
          *(_BYTE *)(v108 + 248) = *((_BYTE *)v11 + 248);
          *(_QWORD *)(v108 + 240) = v131;
          *(_OWORD *)(v108 + 256) = *((_OWORD *)v11 + 16);
          v11[32] = 0;
          v11[33] = 0;
          *(_BYTE *)(v108 + 272) = *((_BYTE *)v11 + 272);
          v108 += 280;
          v11 += 35;
        }
        while (v11 != v122);
        v95 = *((_QWORD *)&v200 + 1);
        v11 = *(unint64_t **)(a1 + 1096);
      }
      v132 = *(unint64_t **)(a1 + 1088);
      *(_QWORD *)(a1 + 1088) = v95;
      *(_QWORD *)(a1 + 1096) = v108;
      v133 = *(_QWORD *)(a1 + 1104);
      *(_QWORD *)(a1 + 1104) = *((_QWORD *)&v201 + 1);
      *((_QWORD *)&v201 + 1) = v133;
      *(_QWORD *)&v200 = v132;
      *((_QWORD *)&v200 + 1) = v132;
      if (v11 != v132)
      {
        do
        {
          *(_QWORD *)&v201 = v11 - 35;
          v134 = (std::__shared_weak_count *)*(v11 - 2);
          if (v134)
          {
            v135 = (unint64_t *)&v134->__shared_owners_;
            do
              v136 = __ldaxr(v135);
            while (__stlxr(v136 - 1, v135));
            if (!v136)
            {
              ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
              std::__shared_weak_count::__release_weak(v134);
            }
          }
          v137 = (std::__shared_weak_count *)*(v11 - 19);
          if (v137)
          {
            v138 = (unint64_t *)&v137->__shared_owners_;
            do
              v139 = __ldaxr(v138);
            while (__stlxr(v139 - 1, v138));
            if (!v139)
            {
              ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
              std::__shared_weak_count::__release_weak(v137);
            }
          }
          v11 = (unint64_t *)v201;
        }
        while ((unint64_t *)v201 != v132);
        v11 = (unint64_t *)v200;
      }
      if (v11)
        operator delete(v11);
      goto LABEL_108;
    }
    v17 = 0;
    --*(_DWORD *)(v31 + 8);
  }
LABEL_120:
  if (*((_QWORD *)&v168 + 1))
  {
    v145 = (unint64_t *)(*((_QWORD *)&v168 + 1) + 8);
    do
      v146 = __ldaxr(v145);
    while (__stlxr(v146 - 1, v145));
    if (!v146)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v168 + 1) + 16))(*((_QWORD *)&v168 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v168 + 1));
    }
  }
  if (*((_QWORD *)&v161 + 1))
  {
    v147 = (unint64_t *)(*((_QWORD *)&v161 + 1) + 8);
    do
      v148 = __ldaxr(v147);
    while (__stlxr(v148 - 1, v147));
    if (!v148)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v161 + 1) + 16))(*((_QWORD *)&v161 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v161 + 1));
    }
  }
  return v17;
}

void sub_20FBB0824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  uint64_t v54;

  sub_20F626C38(v54 - 176);
  sub_20F4EE658((uint64_t)&a54);
  sub_20F4EE704((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20FBB0848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  sub_20F4EE658((uint64_t)&a54);
  sub_20F4EE704((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_20FBB0864(uint64_t a1, __int128 *a2, __int128 *a3, __int128 *a4, std::__shared_weak_count *a5, __int128 *a6)
{
  std::__shared_weak_count *v6;
  unsigned int *v7;
  unint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  char *v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int *v28;
  char *v29;
  unsigned int v30;
  uint64_t v31;
  __int128 v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  _BYTE *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t *v39;
  unint64_t *v40;
  __int128 v41;
  __int128 v42;
  unint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  unint64_t v49;
  _BYTE *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  _BYTE *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t *v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  unint64_t v76;
  __int128 v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  _BYTE *v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  unint64_t v121;
  unint64_t *v122;
  __int128 v123;
  __int128 v124;
  unint64_t v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  unint64_t v131;
  unint64_t *v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t *v145;
  unint64_t v146;
  unint64_t *v147;
  unint64_t v148;
  _BYTE *v150;
  unint64_t *v151;
  int64_t v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  uint64_t v158;
  __int128 v159;
  uint64_t v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  uint64_t v174;
  __int128 v175;
  uint64_t v176;
  __int128 v177;
  uint64_t v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  unint64_t v185;
  char v186;
  __int128 v187;
  char v188;
  unint64_t v189;
  char v190;
  __int128 v191;
  uint64_t v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  uint64_t v204;
  uint64_t v205;

  v6 = a5;
  v7 = (unsigned int *)a3;
  v205 = *MEMORY[0x24BDAC8D0];
  v9 = *(_QWORD *)a2;
  v10 = *(unint64_t **)(a1 + 1136);
  v11 = *(unint64_t **)(a1 + 1144);
  if (v10 == v11)
  {
    v11 = *(unint64_t **)(a1 + 1136);
  }
  else if (*(v11 - 35) >= v9)
  {
    v12 = 0xAF8AF8AF8AF8AF8BLL * (v11 - v10);
    do
    {
      v13 = v12 >> 1;
      v14 = &v10[35 * (v12 >> 1)];
      v15 = *v14;
      v16 = v14 + 35;
      v12 += ~(v12 >> 1);
      if (v15 < v9)
        v10 = v16;
      else
        v12 = v13;
    }
    while (v12);
    if (v10 != v11)
    {
      v11 = v10;
      if (*v10 == v9)
        return 0;
    }
  }
  if (a5)
  {
    p_shared_owners = (unint64_t *)&a5->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  v155 = a2[2];
  v156 = a2[3];
  v157 = a2[4];
  v158 = *((_QWORD *)a2 + 10);
  v153 = *a2;
  v154 = a2[1];
  v159 = *(__int128 *)((char *)a2 + 88);
  v160 = *((_QWORD *)a2 + 13);
  v161 = a2[7];
  *((_QWORD *)a2 + 14) = 0;
  *((_QWORD *)a2 + 15) = 0;
  *(_QWORD *)&v168 = a4;
  *((_QWORD *)&v168 + 1) = a5;
  if (a5)
  {
    v20 = (unint64_t *)&a5->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))a5->__on_zero_shared)(a5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v23 = *v7;
  v24 = *(char **)(a1 + 296);
  v25 = *(char **)(a1 + 304);
  if (v25 != v24)
  {
    v26 = (v25 - v24) >> 4;
    do
    {
      v27 = v26 >> 1;
      v28 = (unsigned int *)&v24[16 * (v26 >> 1)];
      v30 = *v28;
      v29 = (char *)(v28 + 4);
      v26 += ~(v26 >> 1);
      if (v30 < v23)
        v24 = v29;
      else
        v26 = v27;
    }
    while (v26);
  }
  if (v24 == v25 || *(_DWORD *)v24 != v23)
  {
    v17 = 0;
  }
  else
  {
    v31 = *((_QWORD *)v24 + 1);
    ++*(_DWORD *)(v31 + 8);
    if (*(_BYTE *)(v31 + 20))
    {
      v169 = v153;
      v171 = v155;
      v172 = v156;
      v173 = v157;
      v174 = v158;
      v170 = v154;
      v175 = v159;
      v32 = v161;
      v176 = v160;
      v177 = v161;
      v161 = 0uLL;
      v178 = v31;
      v179 = v162;
      v180 = v163;
      v181 = v164;
      v182 = v165;
      v183 = v166;
      v184 = v167;
      v186 = 0;
      v185 = 0xBFF0000000000000;
      v33 = (std::__shared_weak_count *)*((_QWORD *)&v168 + 1);
      v187 = v168;
      *((_QWORD *)&v168 + 1) = 0;
      v188 = 0;
      v34 = *(unint64_t **)(a1 + 1144);
      if (v34 != v11 && *v11 == v9)
        goto LABEL_109;
      a6 = &v169;
      a5 = (std::__shared_weak_count *)&v175;
      a3 = &v177;
      a4 = &v179;
      a2 = &v187;
      v35 = *(_BYTE **)(a1 + 1136);
      v36 = (char *)v11 - v35;
      v152 = 0xAF8AF8AF8AF8AF8BLL * (((char *)v11 - v35) >> 3);
      v37 = *(_QWORD *)(a1 + 1152);
      if ((unint64_t)v34 < v37)
      {
        if (v11 == v34)
        {
          *v34 = v9;
          v85 = &v35[8 * (((char *)v11 - v35) >> 3)];
          *(_OWORD *)(v85 + 8) = v169;
          v87 = v172;
          v86 = v173;
          v88 = v174;
          *(_OWORD *)(v85 + 40) = v171;
          *((_QWORD *)v85 + 11) = v88;
          *(_OWORD *)(v85 + 72) = v86;
          *(_OWORD *)(v85 + 56) = v87;
          *(_OWORD *)(v85 + 24) = v170;
          v89 = v176;
          *((_OWORD *)v85 + 6) = v175;
          *((_QWORD *)v85 + 14) = v89;
          *(_OWORD *)(v85 + 120) = v32;
          v177 = 0uLL;
          *((_QWORD *)v85 + 17) = v31;
          v90 = v179;
          v91 = v181;
          *((_OWORD *)v85 + 10) = v180;
          *((_OWORD *)v85 + 11) = v91;
          *((_OWORD *)v85 + 9) = v90;
          v92 = v182;
          v93 = v184;
          *((_OWORD *)v85 + 13) = v183;
          *((_OWORD *)v85 + 14) = v93;
          *((_OWORD *)v85 + 12) = v92;
          v94 = v185;
          v85[248] = v186;
          *((_QWORD *)v85 + 30) = v94;
          *((_QWORD *)v85 + 32) = v168;
          *((_QWORD *)v85 + 33) = v33;
          v187 = 0uLL;
          v85[272] = 0;
          *(_QWORD *)(a1 + 1144) = v34 + 35;
        }
        else
        {
          v202 = v156;
          v203 = v157;
          v204 = v158;
          v200 = v154;
          v201 = v155;
          v192 = v160;
          v191 = v159;
          v177 = 0uLL;
          v198 = v163;
          v199 = v164;
          v197 = v162;
          v195 = v166;
          v196 = v167;
          v193 = v153;
          v194 = v165;
          v190 = 0;
          v189 = 0xBFF0000000000000;
          v38 = v34 - 35;
          v39 = v34;
          v187 = 0uLL;
          if ((unint64_t)v34 >= 0x118)
          {
            v40 = v34 - 35;
            v39 = v34;
            do
            {
              *v39 = *v40;
              *(_OWORD *)(v39 + 1) = *(_OWORD *)(v40 + 1);
              v41 = *(_OWORD *)(v40 + 7);
              v42 = *(_OWORD *)(v40 + 9);
              v43 = v40[11];
              *(_OWORD *)(v39 + 5) = *(_OWORD *)(v40 + 5);
              v39[11] = v43;
              *(_OWORD *)(v39 + 9) = v42;
              *(_OWORD *)(v39 + 7) = v41;
              *(_OWORD *)(v39 + 3) = *(_OWORD *)(v40 + 3);
              v44 = *((_OWORD *)v40 + 6);
              v39[14] = v40[14];
              *((_OWORD *)v39 + 6) = v44;
              *(_OWORD *)(v39 + 15) = *(_OWORD *)(v40 + 15);
              v40[15] = 0;
              v40[16] = 0;
              v39[17] = v40[17];
              v45 = *((_OWORD *)v40 + 9);
              v46 = *((_OWORD *)v40 + 11);
              *((_OWORD *)v39 + 10) = *((_OWORD *)v40 + 10);
              *((_OWORD *)v39 + 11) = v46;
              *((_OWORD *)v39 + 9) = v45;
              v47 = *((_OWORD *)v40 + 12);
              v48 = *((_OWORD *)v40 + 14);
              *((_OWORD *)v39 + 13) = *((_OWORD *)v40 + 13);
              *((_OWORD *)v39 + 14) = v48;
              *((_OWORD *)v39 + 12) = v47;
              v49 = v40[30];
              *((_BYTE *)v39 + 248) = *((_BYTE *)v40 + 248);
              v39[30] = v49;
              *((_OWORD *)v39 + 16) = *((_OWORD *)v40 + 16);
              v40[32] = 0;
              v40[33] = 0;
              *((_BYTE *)v39 + 272) = *((_BYTE *)v40 + 272);
              v39 += 35;
              v40 += 35;
            }
            while (v40 < v34);
          }
          v150 = v35;
          *(_QWORD *)(a1 + 1144) = v39;
          if (v34 != v11 + 35)
          {
            do
            {
              v62 = v38 - 35;
              v63 = v34 - 35;
              *v63 = *(v38 - 35);
              *(_OWORD *)(v63 + 1) = *((_OWORD *)v38 - 17);
              v65 = *((_OWORD *)v38 - 14);
              v64 = *((_OWORD *)v38 - 13);
              v66 = *((_OWORD *)v38 - 15);
              *(v34 - 24) = *(v38 - 24);
              *((_OWORD *)v34 - 14) = v65;
              *((_OWORD *)v34 - 13) = v64;
              *((_OWORD *)v34 - 15) = v66;
              *((_OWORD *)v34 - 16) = *((_OWORD *)v38 - 16);
              v67 = *(_OWORD *)(v38 - 23);
              *(v34 - 21) = *(v38 - 21);
              *(_OWORD *)(v34 - 23) = v67;
              v68 = *((_OWORD *)v38 - 10);
              *(v38 - 20) = 0;
              *(v38 - 19) = 0;
              v69 = (std::__shared_weak_count *)*(v34 - 19);
              *((_OWORD *)v34 - 10) = v68;
              if (v69)
              {
                v70 = (unint64_t *)&v69->__shared_owners_;
                do
                  v71 = __ldaxr(v70);
                while (__stlxr(v71 - 1, v70));
                if (!v71)
                {
                  ((void (*)(std::__shared_weak_count *, __int128 *, __int128 *, __int128 *, std::__shared_weak_count *, __int128 *))v69->__on_zero_shared)(v69, a2, a3, a4, a5, a6);
                  std::__shared_weak_count::__release_weak(v69);
                }
              }
              *(v34 - 18) = *(v38 - 18);
              v72 = *(_OWORD *)(v38 - 17);
              v73 = *(_OWORD *)(v38 - 15);
              *(_OWORD *)(v34 - 13) = *(_OWORD *)(v38 - 13);
              *(_OWORD *)(v34 - 15) = v73;
              *(_OWORD *)(v34 - 17) = v72;
              v74 = *(_OWORD *)(v38 - 11);
              v75 = *(_OWORD *)(v38 - 9);
              *(_OWORD *)(v34 - 7) = *(_OWORD *)(v38 - 7);
              *(_OWORD *)(v34 - 9) = v75;
              *(_OWORD *)(v34 - 11) = v74;
              v76 = *(v38 - 5);
              *((_BYTE *)v34 - 32) = *((_BYTE *)v38 - 32);
              *(v34 - 5) = v76;
              v77 = *(_OWORD *)(v38 - 3);
              *(v38 - 3) = 0;
              *(v38 - 2) = 0;
              v78 = (std::__shared_weak_count *)*(v34 - 2);
              *(_OWORD *)(v34 - 3) = v77;
              if (v78)
              {
                v79 = (unint64_t *)&v78->__shared_owners_;
                do
                  v80 = __ldaxr(v79);
                while (__stlxr(v80 - 1, v79));
                if (!v80)
                {
                  ((void (*)(std::__shared_weak_count *, __int128 *, __int128 *, __int128 *, std::__shared_weak_count *, __int128 *))v78->__on_zero_shared)(v78, a2, a3, a4, a5, a6);
                  std::__shared_weak_count::__release_weak(v78);
                }
              }
              *((_BYTE *)v34 - 8) = *((_BYTE *)v38 - 8);
              v34 -= 35;
              v38 -= 35;
            }
            while (v62 != v11);
          }
          *v11 = v9;
          v50 = &v150[280 * v152];
          *(_OWORD *)(v50 + 8) = v193;
          *(_OWORD *)(v50 + 40) = v201;
          *(_OWORD *)(v50 + 56) = v202;
          *(_OWORD *)(v50 + 72) = v203;
          *((_QWORD *)v50 + 11) = v204;
          *(_OWORD *)(v50 + 24) = v200;
          *((_OWORD *)v50 + 6) = v191;
          *((_QWORD *)v50 + 14) = v192;
          *((_QWORD *)v50 + 15) = v32;
          v51 = (std::__shared_weak_count *)*((_QWORD *)v50 + 16);
          *((_QWORD *)v50 + 16) = *((_QWORD *)&v32 + 1);
          if (v51)
          {
            v52 = (unint64_t *)&v51->__shared_owners_;
            do
              v53 = __ldaxr(v52);
            while (__stlxr(v53 - 1, v52));
            if (!v53)
            {
              ((void (*)(std::__shared_weak_count *, __int128 *, __int128 *, __int128 *, std::__shared_weak_count *, __int128 *))v51->__on_zero_shared)(v51, a2, a3, a4, a5, a6);
              std::__shared_weak_count::__release_weak(v51);
            }
          }
          v54 = &v150[280 * v152];
          *((_QWORD *)v54 + 17) = v31;
          v55 = v198;
          *((_OWORD *)v54 + 9) = v197;
          *((_OWORD *)v54 + 10) = v55;
          v56 = v194;
          v57 = v195;
          *((_OWORD *)v54 + 11) = v199;
          *((_OWORD *)v54 + 12) = v56;
          v58 = v196;
          *((_OWORD *)v54 + 13) = v57;
          *((_OWORD *)v54 + 14) = v58;
          *((_QWORD *)v54 + 30) = v189;
          v54[248] = v190;
          v59 = (std::__shared_weak_count *)*((_QWORD *)v54 + 33);
          *((_QWORD *)v54 + 32) = v168;
          *((_QWORD *)v54 + 33) = v33;
          if (v59)
          {
            v60 = (unint64_t *)&v59->__shared_owners_;
            do
              v61 = __ldaxr(v60);
            while (__stlxr(v61 - 1, v60));
            if (!v61)
            {
              ((void (*)(std::__shared_weak_count *, __int128 *, __int128 *, __int128 *, std::__shared_weak_count *, __int128 *))v59->__on_zero_shared)(v59, a2, a3, a4, a5, a6);
              std::__shared_weak_count::__release_weak(v59);
            }
          }
          v150[280 * v152 + 272] = 0;
        }
LABEL_108:
        v33 = (std::__shared_weak_count *)*((_QWORD *)&v187 + 1);
LABEL_109:
        if (v33)
        {
          v140 = (unint64_t *)&v33->__shared_owners_;
          do
            v141 = __ldaxr(v140);
          while (__stlxr(v141 - 1, v140));
          if (!v141)
          {
            ((void (*)(std::__shared_weak_count *, __int128 *, __int128 *, __int128 *, std::__shared_weak_count *, __int128 *))v33->__on_zero_shared)(v33, a2, a3, a4, a5, a6);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        v142 = (std::__shared_weak_count *)*((_QWORD *)&v177 + 1);
        if (*((_QWORD *)&v177 + 1))
        {
          v143 = (unint64_t *)(*((_QWORD *)&v177 + 1) + 8);
          do
            v144 = __ldaxr(v143);
          while (__stlxr(v144 - 1, v143));
          if (!v144)
          {
            ((void (*)(std::__shared_weak_count *, __int128 *, __int128 *, __int128 *, std::__shared_weak_count *, __int128 *))v142->__on_zero_shared)(v142, a2, a3, a4, a5, a6);
            std::__shared_weak_count::__release_weak(v142);
          }
        }
        *(_BYTE *)(a1 + 1594) = 0;
        *(_BYTE *)(a1 + 1592) = 0;
        *(int64x2_t *)(a1 + 1576) = vaddq_s64(*(int64x2_t *)(a1 + 1576), (int64x2_t)xmmword_2103B2300);
        v17 = 1;
        goto LABEL_120;
      }
      v81 = 0xAF8AF8AF8AF8AF8BLL * (((char *)v34 - v35) >> 3) + 1;
      if (v81 > 0xEA0EA0EA0EA0EALL)
        sub_20E867F44();
      v82 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(v37 - (_QWORD)v35) >> 3);
      if (2 * v82 > v81)
        v81 = 2 * v82;
      if (v82 >= 0x75075075075075)
        v83 = 0xEA0EA0EA0EA0EALL;
      else
        v83 = v81;
      *(_QWORD *)&v202 = a1 + 1152;
      v151 = (unint64_t *)v35;
      if (v83)
      {
        if (v83 > 0xEA0EA0EA0EA0EALL)
          sub_20E877A38();
        v84 = (char *)operator new(280 * v83);
      }
      else
      {
        v84 = 0;
      }
      v95 = (uint64_t)&v84[280 * v152];
      *(_QWORD *)&v200 = v84;
      *((_QWORD *)&v200 + 1) = v95;
      *(_QWORD *)&v201 = v95;
      *((_QWORD *)&v201 + 1) = &v84[280 * v83];
      if (v152 == v83)
      {
        if (v36 >= 1)
        {
          v96 = v152 + 2;
          if (v152 >= -1)
            v96 = v152 + 1;
          v97 = v96 >> 1;
          v98 = sub_20F5B6660(v95, v95, v95 - 280 * (v96 >> 1));
          v95 = *((_QWORD *)&v200 + 1) - 280 * v97;
          *((_QWORD *)&v200 + 1) = v95;
          goto LABEL_85;
        }
        if (v151 == v11)
          v99 = 1;
        else
          v99 = 2 * v152;
        if (v99 > 0xEA0EA0EA0EA0EALL)
          sub_20E877A38();
        v100 = (char *)operator new(280 * v99);
        v95 = (uint64_t)&v100[280 * (v99 >> 2)];
        *(_QWORD *)&v200 = v100;
        *((_QWORD *)&v200 + 1) = v95;
        *((_QWORD *)&v201 + 1) = &v100[280 * v99];
        if (v84)
          operator delete(v84);
      }
      v98 = v95;
LABEL_85:
      *(_QWORD *)v98 = v9;
      *(_OWORD *)(v98 + 8) = v169;
      v101 = v170;
      *(_OWORD *)(v98 + 40) = v171;
      v102 = v173;
      *(_OWORD *)(v98 + 56) = v172;
      *(_OWORD *)(v98 + 72) = v102;
      *(_QWORD *)(v98 + 88) = v174;
      *(_OWORD *)(v98 + 24) = v101;
      *(_QWORD *)(v98 + 112) = v176;
      *(_OWORD *)(v98 + 96) = v175;
      *(_OWORD *)(v98 + 120) = v177;
      v177 = 0uLL;
      *(_QWORD *)(v98 + 136) = v178;
      v103 = v179;
      v104 = v181;
      *(_OWORD *)(v98 + 160) = v180;
      *(_OWORD *)(v98 + 176) = v104;
      *(_OWORD *)(v98 + 144) = v103;
      v105 = v182;
      v106 = v184;
      *(_OWORD *)(v98 + 208) = v183;
      *(_OWORD *)(v98 + 224) = v106;
      *(_OWORD *)(v98 + 192) = v105;
      v107 = v185;
      *(_BYTE *)(v98 + 248) = v186;
      *(_QWORD *)(v98 + 240) = v107;
      *(_OWORD *)(v98 + 256) = v187;
      v187 = 0uLL;
      *(_BYTE *)(v98 + 272) = v188;
      v108 = v98 + 280;
      *(_QWORD *)&v201 = v98 + 280;
      v109 = *(unint64_t **)(a1 + 1136);
      if (v109 != v11)
      {
        v110 = 0;
        do
        {
          v111 = v95 + v110 * 8;
          v112 = (char *)&v11[v110];
          *(_QWORD *)(v95 + v110 * 8 - 280) = v11[v110 - 35];
          *(_OWORD *)(v95 + v110 * 8 - 272) = *(_OWORD *)&v11[v110 - 34];
          v114 = *(_OWORD *)&v11[v110 - 28];
          v113 = *(_OWORD *)&v11[v110 - 26];
          v115 = *(_OWORD *)&v11[v110 - 30];
          *(_QWORD *)(v111 - 192) = v11[v110 - 24];
          *(_OWORD *)(v111 - 224) = v114;
          *(_OWORD *)(v111 - 208) = v113;
          *(_OWORD *)(v111 - 240) = v115;
          *(_OWORD *)(v111 - 256) = *(_OWORD *)&v11[v110 - 32];
          v116 = *(_OWORD *)&v11[v110 - 23];
          *(_QWORD *)(v111 - 168) = v11[v110 - 21];
          *(_OWORD *)(v111 - 184) = v116;
          *(_OWORD *)(v111 - 160) = *(_OWORD *)&v11[v110 - 20];
          *((_QWORD *)v112 - 20) = 0;
          *((_QWORD *)v112 - 19) = 0;
          *(_QWORD *)(v111 - 144) = v11[v110 - 18];
          v117 = *(_OWORD *)&v11[v110 - 17];
          v118 = *(_OWORD *)&v11[v110 - 15];
          *(_OWORD *)(v111 - 104) = *(_OWORD *)&v11[v110 - 13];
          *(_OWORD *)(v111 - 120) = v118;
          *(_OWORD *)(v111 - 136) = v117;
          v119 = *(_OWORD *)&v11[v110 - 11];
          v120 = *(_OWORD *)&v11[v110 - 9];
          *(_OWORD *)(v111 - 56) = *(_OWORD *)&v11[v110 - 7];
          *(_OWORD *)(v111 - 72) = v120;
          *(_OWORD *)(v111 - 88) = v119;
          v121 = v11[v110 - 5];
          *(_BYTE *)(v111 - 32) = v11[v110 - 4];
          *(_QWORD *)(v111 - 40) = v121;
          *(_OWORD *)(v111 - 24) = *(_OWORD *)&v11[v110 - 3];
          *((_QWORD *)v112 - 3) = 0;
          *((_QWORD *)v112 - 2) = 0;
          *(_BYTE *)(v111 - 8) = v11[v110 - 1];
          v110 -= 35;
        }
        while (&v11[v110] != v109);
        v108 = v201;
        v95 += v110 * 8;
      }
      *((_QWORD *)&v200 + 1) = v95;
      v122 = *(unint64_t **)(a1 + 1144);
      if (v122 != v11)
      {
        do
        {
          *(_QWORD *)v108 = *v11;
          *(_OWORD *)(v108 + 8) = *(_OWORD *)(v11 + 1);
          v123 = *(_OWORD *)(v11 + 7);
          v124 = *(_OWORD *)(v11 + 9);
          v125 = v11[11];
          *(_OWORD *)(v108 + 40) = *(_OWORD *)(v11 + 5);
          *(_QWORD *)(v108 + 88) = v125;
          *(_OWORD *)(v108 + 72) = v124;
          *(_OWORD *)(v108 + 56) = v123;
          *(_OWORD *)(v108 + 24) = *(_OWORD *)(v11 + 3);
          v126 = *((_OWORD *)v11 + 6);
          *(_QWORD *)(v108 + 112) = v11[14];
          *(_OWORD *)(v108 + 96) = v126;
          *(_OWORD *)(v108 + 120) = *(_OWORD *)(v11 + 15);
          v11[15] = 0;
          v11[16] = 0;
          *(_QWORD *)(v108 + 136) = v11[17];
          v127 = *((_OWORD *)v11 + 9);
          v128 = *((_OWORD *)v11 + 11);
          *(_OWORD *)(v108 + 160) = *((_OWORD *)v11 + 10);
          *(_OWORD *)(v108 + 176) = v128;
          *(_OWORD *)(v108 + 144) = v127;
          v129 = *((_OWORD *)v11 + 12);
          v130 = *((_OWORD *)v11 + 14);
          *(_OWORD *)(v108 + 208) = *((_OWORD *)v11 + 13);
          *(_OWORD *)(v108 + 224) = v130;
          *(_OWORD *)(v108 + 192) = v129;
          v131 = v11[30];
          *(_BYTE *)(v108 + 248) = *((_BYTE *)v11 + 248);
          *(_QWORD *)(v108 + 240) = v131;
          *(_OWORD *)(v108 + 256) = *((_OWORD *)v11 + 16);
          v11[32] = 0;
          v11[33] = 0;
          *(_BYTE *)(v108 + 272) = *((_BYTE *)v11 + 272);
          v108 += 280;
          v11 += 35;
        }
        while (v11 != v122);
        v95 = *((_QWORD *)&v200 + 1);
        v11 = *(unint64_t **)(a1 + 1144);
      }
      v132 = *(unint64_t **)(a1 + 1136);
      *(_QWORD *)(a1 + 1136) = v95;
      *(_QWORD *)(a1 + 1144) = v108;
      v133 = *(_QWORD *)(a1 + 1152);
      *(_QWORD *)(a1 + 1152) = *((_QWORD *)&v201 + 1);
      *((_QWORD *)&v201 + 1) = v133;
      *(_QWORD *)&v200 = v132;
      *((_QWORD *)&v200 + 1) = v132;
      if (v11 != v132)
      {
        do
        {
          *(_QWORD *)&v201 = v11 - 35;
          v134 = (std::__shared_weak_count *)*(v11 - 2);
          if (v134)
          {
            v135 = (unint64_t *)&v134->__shared_owners_;
            do
              v136 = __ldaxr(v135);
            while (__stlxr(v136 - 1, v135));
            if (!v136)
            {
              ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
              std::__shared_weak_count::__release_weak(v134);
            }
          }
          v137 = (std::__shared_weak_count *)*(v11 - 19);
          if (v137)
          {
            v138 = (unint64_t *)&v137->__shared_owners_;
            do
              v139 = __ldaxr(v138);
            while (__stlxr(v139 - 1, v138));
            if (!v139)
            {
              ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
              std::__shared_weak_count::__release_weak(v137);
            }
          }
          v11 = (unint64_t *)v201;
        }
        while ((unint64_t *)v201 != v132);
        v11 = (unint64_t *)v200;
      }
      if (v11)
        operator delete(v11);
      goto LABEL_108;
    }
    v17 = 0;
    --*(_DWORD *)(v31 + 8);
  }
LABEL_120:
  if (*((_QWORD *)&v168 + 1))
  {
    v145 = (unint64_t *)(*((_QWORD *)&v168 + 1) + 8);
    do
      v146 = __ldaxr(v145);
    while (__stlxr(v146 - 1, v145));
    if (!v146)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v168 + 1) + 16))(*((_QWORD *)&v168 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v168 + 1));
    }
  }
  if (*((_QWORD *)&v161 + 1))
  {
    v147 = (unint64_t *)(*((_QWORD *)&v161 + 1) + 8);
    do
      v148 = __ldaxr(v147);
    while (__stlxr(v148 - 1, v147));
    if (!v148)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v161 + 1) + 16))(*((_QWORD *)&v161 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v161 + 1));
    }
  }
  return v17;
}

void sub_20FBB15E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  uint64_t v54;

  sub_20F626C38(v54 - 176);
  sub_20F4EE658((uint64_t)&a54);
  sub_20F4EE704((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20FBB1604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  sub_20F4EE658((uint64_t)&a54);
  sub_20F4EE704((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_20FBB1620(uint64_t a1, unint64_t *a2, unsigned int *a3, unint64_t a4, std::__shared_weak_count *a5)
{
  unint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  char *v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int *v26;
  char *v27;
  unsigned int v28;
  std::__shared_weak_count *v29;
  char *v30;
  char *v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  char *v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  char *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  int64x2_t *v81;
  int64x2_t v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  char *v95;
  char *v96;

  v8 = *a2;
  v9 = *(char **)(a1 + 1328);
  v10 = *(char **)(a1 + 1336);
  if (v9 == v10)
  {
    v10 = *(char **)(a1 + 1328);
  }
  else if (*((_QWORD *)v10 - 14) >= v8)
  {
    v11 = 0x6DB6DB6DB6DB6DB7 * ((v10 - v9) >> 4);
    do
    {
      v12 = v11 >> 1;
      v13 = &v9[112 * (v11 >> 1)];
      v15 = *(_QWORD *)v13;
      v14 = v13 + 112;
      v11 += ~(v11 >> 1);
      if (v15 < v8)
        v9 = v14;
      else
        v11 = v12;
    }
    while (v11);
    if (v9 != v10)
    {
      v10 = v9;
      if (*(_QWORD *)v9 == v8)
        return 0;
    }
  }
  if (a5)
  {
    p_shared_owners = (unint64_t *)&a5->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
    v88 = *(_OWORD *)a2;
    v89 = *((_OWORD *)a2 + 1);
    v90 = a2[4];
    *(_QWORD *)&v93 = a4;
    *((_QWORD *)&v93 + 1) = a5;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))a5->__on_zero_shared)(a5);
      std::__shared_weak_count::__release_weak(a5);
    }
  }
  else
  {
    v88 = *(_OWORD *)a2;
    v89 = *((_OWORD *)a2 + 1);
    v90 = a2[4];
    v93 = a4;
  }
  v21 = *a3;
  v22 = *(char **)(a1 + 488);
  v23 = *(char **)(a1 + 496);
  if (v23 != v22)
  {
    v24 = (v23 - v22) >> 4;
    do
    {
      v25 = v24 >> 1;
      v26 = (unsigned int *)&v22[16 * (v24 >> 1)];
      v28 = *v26;
      v27 = (char *)(v26 + 4);
      v24 += ~(v24 >> 1);
      if (v28 < v21)
        v22 = v27;
      else
        v24 = v25;
    }
    while (v24);
  }
  if (v22 == v23 || *(_DWORD *)v22 != v21)
  {
    v16 = 0;
    if (*((_QWORD *)&v90 + 1))
      --*(_DWORD *)(*((_QWORD *)&v90 + 1) + 8);
  }
  else
  {
    *((_QWORD *)&v90 + 1) = *((_QWORD *)v22 + 1);
    ++*(_DWORD *)(*((_QWORD *)&v90 + 1) + 8);
    if (*(_BYTE *)(*((_QWORD *)&v90 + 1) + 20))
    {
      v29 = (std::__shared_weak_count *)*((_QWORD *)&v93 + 1);
      v94 = v93;
      *((_QWORD *)&v93 + 1) = 0;
      v30 = *(char **)(a1 + 1336);
      if (v30 == v10 || *(_QWORD *)v10 != v8)
      {
        v31 = *(char **)(a1 + 1328);
        v32 = *(_QWORD *)(a1 + 1344);
        if ((unint64_t)v30 >= v32)
        {
          v49 = 0x6DB6DB6DB6DB6DB7 * ((v10 - v31) >> 4);
          v50 = 0x6DB6DB6DB6DB6DB7 * ((v30 - v31) >> 4) + 1;
          if (v50 > 0x249249249249249)
            sub_20E867F44();
          v51 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v32 - (_QWORD)v31) >> 4);
          if (2 * v51 > v50)
            v50 = 2 * v51;
          if (v51 >= 0x124924924924924)
            v52 = 0x249249249249249;
          else
            v52 = v50;
          if (v52)
          {
            if (v52 > 0x249249249249249)
              sub_20E877A38();
            v53 = (char *)operator new(112 * v52);
          }
          else
          {
            v53 = 0;
          }
          v59 = &v53[16 * ((v10 - v31) >> 4)];
          v96 = &v53[112 * v52];
          if (v49 == v52)
          {
            if (v10 - v31 < 1)
            {
              if (v31 == v10)
                v61 = 1;
              else
                v61 = 0xDB6DB6DB6DB6DB6ELL * ((v10 - v31) >> 4);
              if (v61 > 0x249249249249249)
                sub_20E877A38();
              v62 = (char *)operator new(112 * v61);
              v59 = &v62[112 * (v61 >> 2)];
              v96 = &v62[112 * v61];
              if (v53)
                operator delete(v53);
            }
            else
            {
              v60 = v49 + 2;
              if (v49 >= -1)
                v60 = v49 + 1;
              v59 -= 112 * (v60 >> 1);
            }
          }
          *(_QWORD *)v59 = v8;
          *(_OWORD *)(v59 + 8) = v88;
          *(_OWORD *)(v59 + 24) = v89;
          *(_OWORD *)(v59 + 40) = v90;
          *((_QWORD *)v59 + 7) = v91;
          *((_QWORD *)v59 + 8) = v92;
          *((_QWORD *)v59 + 9) = 0xBFF0000000000000;
          v59[80] = 0;
          *(_OWORD *)(v59 + 88) = v94;
          v59[104] = 0;
          v63 = v59 + 112;
          v64 = *(char **)(a1 + 1328);
          if (v64 != v10)
          {
            v65 = 0;
            do
            {
              v66 = &v10[v65];
              v67 = &v59[v65];
              *((_QWORD *)v67 - 14) = *(_QWORD *)&v10[v65 - 112];
              v68 = *(_OWORD *)&v10[v65 - 104];
              v69 = *(_OWORD *)&v10[v65 - 88];
              *(_OWORD *)(v67 - 72) = *(_OWORD *)&v10[v65 - 72];
              *(_OWORD *)(v67 - 88) = v69;
              *(_OWORD *)(v67 - 104) = v68;
              *((_QWORD *)v67 - 7) = *(_QWORD *)&v10[v65 - 56];
              *((_QWORD *)v67 - 6) = *(_QWORD *)&v10[v65 - 48];
              v70 = *(_QWORD *)&v10[v65 - 40];
              *(v67 - 32) = v10[v65 - 32];
              *((_QWORD *)v67 - 5) = v70;
              *(_OWORD *)(v67 - 24) = *(_OWORD *)&v10[v65 - 24];
              *((_QWORD *)v66 - 3) = 0;
              *((_QWORD *)v66 - 2) = 0;
              *(v67 - 8) = v10[v65 - 8];
              v65 -= 112;
            }
            while (&v10[v65] != v64);
            v63 = v59 + 112;
            v59 += v65;
          }
          v71 = *(char **)(a1 + 1336);
          if (v71 != v10)
          {
            do
            {
              *(_QWORD *)v63 = *(_QWORD *)v10;
              v72 = *(_OWORD *)(v10 + 8);
              v73 = *(_OWORD *)(v10 + 24);
              *(_OWORD *)(v63 + 40) = *(_OWORD *)(v10 + 40);
              *(_OWORD *)(v63 + 24) = v73;
              *(_OWORD *)(v63 + 8) = v72;
              *((_QWORD *)v63 + 7) = *((_QWORD *)v10 + 7);
              *((_QWORD *)v63 + 8) = *((_QWORD *)v10 + 8);
              v74 = *((_QWORD *)v10 + 9);
              v63[80] = v10[80];
              *((_QWORD *)v63 + 9) = v74;
              *(_OWORD *)(v63 + 88) = *(_OWORD *)(v10 + 88);
              *((_QWORD *)v10 + 11) = 0;
              *((_QWORD *)v10 + 12) = 0;
              v63[104] = v10[104];
              v63 += 112;
              v10 += 112;
            }
            while (v10 != v71);
            v10 = *(char **)(a1 + 1336);
          }
          v75 = *(char **)(a1 + 1328);
          *(_QWORD *)(a1 + 1328) = v59;
          *(_QWORD *)(a1 + 1336) = v63;
          *(_QWORD *)(a1 + 1344) = v96;
          if (v10 != v75)
          {
            do
            {
              v95 = v10 - 112;
              v76 = (std::__shared_weak_count *)*((_QWORD *)v10 - 2);
              if (v76)
              {
                v77 = (unint64_t *)&v76->__shared_owners_;
                do
                  v78 = __ldaxr(v77);
                while (__stlxr(v78 - 1, v77));
                if (!v78)
                {
                  ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                  std::__shared_weak_count::__release_weak(v76);
                }
              }
              v10 = v95;
            }
            while (v95 != v75);
            v10 = v75;
          }
          if (v10)
            operator delete(v10);
        }
        else if (v10 == v30)
        {
          *(_QWORD *)v30 = v8;
          v58 = &v31[16 * ((v10 - v31) >> 4)];
          *(_OWORD *)(v58 + 40) = v90;
          *(_OWORD *)(v58 + 24) = v89;
          *(_OWORD *)(v58 + 8) = v88;
          *((_QWORD *)v58 + 7) = v91;
          *((_QWORD *)v58 + 8) = v92;
          v58[80] = 0;
          *((_QWORD *)v58 + 9) = 0xBFF0000000000000;
          *((_QWORD *)v58 + 11) = v93;
          *((_QWORD *)v58 + 12) = v29;
          v58[104] = 0;
          *(_QWORD *)(a1 + 1336) = v30 + 112;
        }
        else
        {
          v86 = 0x6DB6DB6DB6DB6DB7 * ((v10 - v31) >> 4);
          v87 = *(_QWORD *)(a1 + 1328);
          v33 = v30 - 112;
          v34 = *(_QWORD *)(a1 + 1336);
          if ((unint64_t)v30 >= 0x70)
          {
            v35 = v30 - 112;
            v34 = *(_QWORD *)(a1 + 1336);
            do
            {
              *(_QWORD *)v34 = *(_QWORD *)v35;
              v36 = *(_OWORD *)(v35 + 8);
              v37 = *(_OWORD *)(v35 + 24);
              *(_OWORD *)(v34 + 40) = *(_OWORD *)(v35 + 40);
              *(_OWORD *)(v34 + 24) = v37;
              *(_OWORD *)(v34 + 8) = v36;
              *(_QWORD *)(v34 + 56) = *((_QWORD *)v35 + 7);
              *(_QWORD *)(v34 + 64) = *((_QWORD *)v35 + 8);
              v38 = *((_QWORD *)v35 + 9);
              *(_BYTE *)(v34 + 80) = v35[80];
              *(_QWORD *)(v34 + 72) = v38;
              *(_OWORD *)(v34 + 88) = *(_OWORD *)(v35 + 88);
              *((_QWORD *)v35 + 11) = 0;
              *((_QWORD *)v35 + 12) = 0;
              *(_BYTE *)(v34 + 104) = v35[104];
              v34 += 112;
              v35 += 112;
            }
            while (v35 < v30);
          }
          *(_QWORD *)(a1 + 1336) = v34;
          if (v30 != v10 + 112)
          {
            v39 = v30 - 112;
            v40 = v30;
            do
            {
              v41 = *((_QWORD *)v39 - 14);
              v39 -= 112;
              *((_QWORD *)v40 - 14) = v41;
              v40 -= 112;
              v42 = *(_OWORD *)(v39 + 8);
              v43 = *(_OWORD *)(v39 + 24);
              *((_QWORD *)v40 + 5) = *((_QWORD *)v39 + 5);
              *(_OWORD *)(v40 + 24) = v43;
              *(_OWORD *)(v40 + 8) = v42;
              *((_QWORD *)v40 + 6) = *((_QWORD *)v39 + 6);
              *((_QWORD *)v40 + 7) = *((_QWORD *)v39 + 7);
              *((_QWORD *)v40 + 8) = *((_QWORD *)v39 + 8);
              v44 = *((_QWORD *)v39 + 9);
              v40[80] = v39[80];
              *((_QWORD *)v40 + 9) = v44;
              v45 = *(_OWORD *)(v39 + 88);
              *((_QWORD *)v39 + 11) = 0;
              *((_QWORD *)v39 + 12) = 0;
              v46 = (std::__shared_weak_count *)*((_QWORD *)v40 + 12);
              *(_OWORD *)(v40 + 88) = v45;
              if (v46)
              {
                v47 = (unint64_t *)&v46->__shared_owners_;
                do
                  v48 = __ldaxr(v47);
                while (__stlxr(v48 - 1, v47));
                if (!v48)
                {
                  ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                  std::__shared_weak_count::__release_weak(v46);
                }
              }
              *(v30 - 8) = *(v33 - 8);
              v30 = v40;
              v33 = v39;
            }
            while (v39 != v10);
          }
          *(_QWORD *)v10 = v8;
          v54 = v87 + 112 * v86;
          *(_OWORD *)(v54 + 8) = v88;
          *(_OWORD *)(v54 + 24) = v89;
          *(_OWORD *)(v54 + 40) = v90;
          *(_QWORD *)(v54 + 56) = v91;
          *(_QWORD *)(v54 + 64) = v92;
          *(_QWORD *)(v54 + 72) = 0xBFF0000000000000;
          *(_BYTE *)(v54 + 80) = 0;
          v55 = *(std::__shared_weak_count **)(v54 + 96);
          *(_QWORD *)(v54 + 88) = v93;
          *(_QWORD *)(v54 + 96) = v29;
          if (v55)
          {
            v56 = (unint64_t *)&v55->__shared_owners_;
            do
              v57 = __ldaxr(v56);
            while (__stlxr(v57 - 1, v56));
            if (!v57)
            {
              ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
              std::__shared_weak_count::__release_weak(v55);
            }
          }
          *(_BYTE *)(v87 + 112 * v86 + 104) = 0;
        }
        v29 = 0;
      }
      if (v29)
      {
        v79 = (unint64_t *)&v29->__shared_owners_;
        do
          v80 = __ldaxr(v79);
        while (__stlxr(v80 - 1, v79));
        if (!v80)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      *(_BYTE *)(a1 + 1594) = 0;
      *(_BYTE *)(a1 + 1592) = 0;
      v81 = (int64x2_t *)(a1 + 1576);
      v82 = *(int64x2_t *)(a1 + 1576);
      v16 = 1;
      *v81 = vaddq_s64(v82, vdupq_n_s64(1uLL));
    }
    else
    {
      v16 = 0;
      --*(_DWORD *)(*((_QWORD *)&v90 + 1) + 8);
    }
  }
  if (*((_QWORD *)&v93 + 1))
  {
    v83 = (unint64_t *)(*((_QWORD *)&v93 + 1) + 8);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v93 + 1) + 16))(*((_QWORD *)&v93 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v93 + 1));
    }
  }
  return v16;
}

void sub_20FBB1F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  sub_20FBB1F88(v29 - 144);
  sub_20F8AF03C((uint64_t)&a29);
  sub_20F8AF0A4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_20FBB1F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_20F8AF03C((uint64_t)&a29);
  sub_20F8AF0A4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_20FBB1F88(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 112;
    v4 = *(std::__shared_weak_count **)(i - 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20FBB2014(uint64_t a1, __int128 *a2, unsigned int *a3, uint64_t a4, std::__shared_weak_count *a5)
{
  unint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  char *v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int *v27;
  char *v28;
  unsigned int v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  __int128 v42;
  __int128 v43;
  _QWORD *v44;
  __int128 v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  unint64_t v55;
  char *v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  char *v60;
  char *v61;
  __int128 v62;
  __int128 v63;
  char *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  _OWORD *v68;
  _OWORD *v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  char *v80;
  _BYTE *v81;
  int v82;
  int v83;
  _BYTE *v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  char *v92;
  char *v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  char *v98;
  char *v99;
  __int128 v100;
  __int128 v101;
  char *v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  char *v107;
  char *v108;
  __int128 v109;
  __int128 v110;
  char *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  __int128 v116;
  char *v117;
  __int128 v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  char v127;
  int v128;
  char *v129;
  uint64_t v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  char v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  _OWORD v144[2];
  char v145;
  uint64_t v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  unint64_t v151;
  char v152;
  __int128 v153;
  char v154;
  __int128 v155;
  __int128 v156;
  uint64_t v157;
  unint64_t v158;
  char v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  _OWORD v165[2];
  uint64_t v166;

  v166 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)a2;
  v9 = *(char **)(a1 + 1376);
  v10 = *(char **)(a1 + 1384);
  if (v9 == v10)
  {
    v10 = *(char **)(a1 + 1376);
  }
  else if (*((_QWORD *)v10 - 26) >= v8)
  {
    v11 = 0x4EC4EC4EC4EC4EC5 * ((v10 - v9) >> 4);
    do
    {
      v12 = v11 >> 1;
      v13 = &v9[208 * (v11 >> 1)];
      v15 = *(_QWORD *)v13;
      v14 = v13 + 208;
      v11 += ~(v11 >> 1);
      if (v15 < v8)
        v9 = v14;
      else
        v11 = v12;
    }
    while (v11);
    if (v9 != v10)
    {
      v10 = v9;
      if (*(_QWORD *)v9 == v8)
        return 0;
    }
  }
  if (a5)
  {
    p_shared_owners = (unint64_t *)&a5->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  v131 = *a2;
  v132 = a2[1];
  v133 = a2[2];
  LOBYTE(v134) = 0;
  v136 = 0;
  if (*((_BYTE *)a2 + 80))
  {
    v134 = a2[3];
    v135 = a2[4];
    v136 = 1;
  }
  *(_QWORD *)&v141 = a4;
  *((_QWORD *)&v141 + 1) = a5;
  if (a5)
  {
    v19 = (unint64_t *)&a5->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))a5->__on_zero_shared)(a5);
      std::__shared_weak_count::__release_weak(a5);
    }
  }
  v22 = *a3;
  v23 = *(char **)(a1 + 680);
  v24 = *(char **)(a1 + 688);
  if (v24 != v23)
  {
    v25 = (v24 - v23) >> 4;
    do
    {
      v26 = v25 >> 1;
      v27 = (unsigned int *)&v23[16 * (v25 >> 1)];
      v29 = *v27;
      v28 = (char *)(v27 + 4);
      v25 += ~(v25 >> 1);
      if (v29 < v22)
        v23 = v28;
      else
        v25 = v26;
    }
    while (v25);
  }
  if (v23 == v24 || *(_DWORD *)v23 != v22)
  {
    v16 = 0;
  }
  else
  {
    v30 = *((_QWORD *)v23 + 1);
    ++*(_DWORD *)(v30 + 8);
    if (*(_BYTE *)(v30 + 20))
    {
      v142 = v132;
      v143 = v133;
      LOBYTE(v144[0]) = 0;
      v145 = 0;
      if (v136)
      {
        v144[0] = v134;
        v144[1] = v135;
        v145 = 1;
      }
      v147 = v137;
      v148 = v138;
      v149 = v139;
      v150 = v140;
      v146 = v30;
      v151 = 0xBFF0000000000000;
      v152 = 0;
      v31 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
      v153 = v141;
      *((_QWORD *)&v141 + 1) = 0;
      v154 = 0;
      v32 = *(char **)(a1 + 1384);
      if (v32 == v10 || *(_QWORD *)v10 != v8)
      {
        a2 = &v142;
        v33 = *(char **)(a1 + 1376);
        v34 = v10 - v33;
        v129 = v33;
        v130 = (v10 - v33) / 208;
        v35 = &v33[208 * v130];
        v36 = *(_QWORD *)(a1 + 1392);
        if ((unint64_t)v32 >= v36)
        {
          v37 = 0x4EC4EC4EC4EC4EC5 * ((v32 - v33) >> 4) + 1;
          if (v37 > 0x13B13B13B13B13BLL)
            sub_20E867F44();
          if (0x9D89D89D89D89D8ALL * ((uint64_t)(v36 - (_QWORD)v33) >> 4) > v37)
            v37 = 0x9D89D89D89D89D8ALL * ((uint64_t)(v36 - (_QWORD)v33) >> 4);
          if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v36 - (_QWORD)v33) >> 4)) >= 0x9D89D89D89D89DLL)
            v38 = 0x13B13B13B13B13BLL;
          else
            v38 = v37;
          v157 = a1 + 1392;
          if (v38)
          {
            if (v38 > 0x13B13B13B13B13BLL)
              sub_20E877A38();
            v39 = (char *)operator new(208 * v38);
            v40 = v130;
            a2 = &v142;
          }
          else
          {
            v39 = 0;
            v40 = (v10 - v33) / 208;
          }
          v50 = &v39[208 * v40];
          *(_QWORD *)&v155 = v39;
          *((_QWORD *)&v155 + 1) = v50;
          *(_QWORD *)&v156 = v50;
          *((_QWORD *)&v156 + 1) = &v39[208 * v38];
          if (v40 == v38)
          {
            if (v34 < 1)
            {
              if (v129 == v10)
                v86 = 1;
              else
                v86 = 2 * v40;
              if (v86 > 0x13B13B13B13B13BLL)
                sub_20E877A38();
              v87 = (char *)operator new(208 * v86);
              v50 = &v87[208 * (v86 >> 2)];
              *(_QWORD *)&v155 = v87;
              *((_QWORD *)&v155 + 1) = v50;
              *(_QWORD *)&v156 = v50;
              *((_QWORD *)&v156 + 1) = &v87[208 * v86];
              if (v39)
                operator delete(v39);
              a2 = &v142;
            }
            else
            {
              v51 = v40 + 2;
              if (v40 >= -1)
                v51 = v40 + 1;
              v50 -= 208 * (v51 >> 1);
              *((_QWORD *)&v155 + 1) = v50;
              *(_QWORD *)&v156 = v50;
            }
          }
          *(_QWORD *)v50 = v8;
          *(_OWORD *)(v50 + 8) = v131;
          v88 = v143;
          *(_OWORD *)(v50 + 24) = v142;
          *(_OWORD *)(v50 + 40) = v88;
          v50[56] = 0;
          v50[88] = 0;
          if (v145)
          {
            v89 = v144[1];
            *(_OWORD *)(v50 + 56) = v144[0];
            *(_OWORD *)(v50 + 72) = v89;
            v50[88] = 1;
          }
          *((_QWORD *)v50 + 12) = v146;
          v90 = v148;
          *(_OWORD *)(v50 + 104) = v147;
          *(_OWORD *)(v50 + 120) = v90;
          v91 = v149;
          *(_OWORD *)(v50 + 152) = v150;
          *(_OWORD *)(v50 + 136) = v91;
          *((_QWORD *)v50 + 21) = v151;
          v50[176] = v152;
          *(_OWORD *)(v50 + 184) = v153;
          v153 = 0uLL;
          v50[200] = v154;
          v92 = v50 + 208;
          *(_QWORD *)&v156 = v50 + 208;
          v93 = *(char **)(a1 + 1376);
          if (v93 != v35)
          {
            v94 = 0;
            do
            {
              v98 = &v50[v94];
              v99 = &v35[v94];
              *((_QWORD *)v98 - 26) = *(_QWORD *)&v35[v94 - 208];
              *(_OWORD *)(v98 - 200) = *(_OWORD *)&v35[v94 - 200];
              v100 = *(_OWORD *)&v35[v94 - 184];
              *(_OWORD *)(v98 - 168) = *(_OWORD *)&v35[v94 - 168];
              *(_OWORD *)(v98 - 184) = v100;
              v50[v94 - 152] = 0;
              *(v98 - 120) = 0;
              if (v35[v94 - 120])
              {
                v101 = *(_OWORD *)(v99 - 136);
                *(_OWORD *)&v50[v94 - 152] = *(_OWORD *)(v99 - 152);
                *(_OWORD *)&v50[v94 - 136] = v101;
                *(v98 - 120) = 1;
              }
              *((_QWORD *)v98 - 14) = *((_QWORD *)v99 - 14);
              v95 = *(_OWORD *)(v99 - 104);
              *(_OWORD *)(v98 - 88) = *(_OWORD *)(v99 - 88);
              *(_OWORD *)(v98 - 104) = v95;
              v96 = *(_OWORD *)(v99 - 72);
              *(_OWORD *)(v98 - 56) = *(_OWORD *)(v99 - 56);
              *(_OWORD *)(v98 - 72) = v96;
              v97 = *((_QWORD *)v99 - 5);
              *(v98 - 32) = *(v99 - 32);
              *((_QWORD *)v98 - 5) = v97;
              *(_OWORD *)(v98 - 24) = *(_OWORD *)(v99 - 24);
              *((_QWORD *)v99 - 3) = 0;
              *((_QWORD *)v99 - 2) = 0;
              *(v98 - 8) = *(v99 - 8);
              v94 -= 208;
            }
            while (&v35[v94] != v93);
            v92 = (char *)v156;
            v50 += v94;
          }
          v102 = *(char **)(a1 + 1384);
          if (v102 != v35)
          {
            v103 = 0;
            do
            {
              v107 = &v35[v103];
              v108 = &v92[v103];
              *(_QWORD *)v108 = *(_QWORD *)&v35[v103];
              *(_OWORD *)(v108 + 8) = *(_OWORD *)&v35[v103 + 8];
              v109 = *(_OWORD *)&v35[v103 + 24];
              *(_OWORD *)(v108 + 40) = *(_OWORD *)&v35[v103 + 40];
              *(_OWORD *)(v108 + 24) = v109;
              v92[v103 + 56] = 0;
              v108[88] = 0;
              if (v35[v103 + 88])
              {
                v110 = *(_OWORD *)(v107 + 72);
                *(_OWORD *)&v92[v103 + 56] = *(_OWORD *)(v107 + 56);
                *(_OWORD *)&v92[v103 + 72] = v110;
                v108[88] = 1;
              }
              *((_QWORD *)v108 + 12) = *((_QWORD *)v107 + 12);
              v104 = *(_OWORD *)(v107 + 104);
              *(_OWORD *)(v108 + 120) = *(_OWORD *)(v107 + 120);
              *(_OWORD *)(v108 + 104) = v104;
              v105 = *(_OWORD *)(v107 + 136);
              *(_OWORD *)(v108 + 152) = *(_OWORD *)(v107 + 152);
              *(_OWORD *)(v108 + 136) = v105;
              v106 = *((_QWORD *)v107 + 21);
              v108[176] = v107[176];
              *((_QWORD *)v108 + 21) = v106;
              *(_OWORD *)(v108 + 184) = *(_OWORD *)(v107 + 184);
              *((_QWORD *)v107 + 23) = 0;
              *((_QWORD *)v107 + 24) = 0;
              v108[200] = v107[200];
              v103 += 208;
            }
            while (v107 + 208 != v102);
            v35 = *(char **)(a1 + 1384);
            v92 += v103;
          }
          v111 = *(char **)(a1 + 1376);
          *(_QWORD *)(a1 + 1376) = v50;
          *(_QWORD *)(a1 + 1384) = v92;
          v112 = *(_QWORD *)(a1 + 1392);
          *(_QWORD *)(a1 + 1392) = *((_QWORD *)&v156 + 1);
          *((_QWORD *)&v156 + 1) = v112;
          *(_QWORD *)&v155 = v111;
          *((_QWORD *)&v155 + 1) = v111;
          if (v35 != v111)
          {
            do
            {
              *(_QWORD *)&v156 = v35 - 208;
              v113 = (std::__shared_weak_count *)*((_QWORD *)v35 - 2);
              if (v113)
              {
                v114 = (unint64_t *)&v113->__shared_owners_;
                do
                  v115 = __ldaxr(v114);
                while (__stlxr(v115 - 1, v114));
                if (!v115)
                {
                  ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                  std::__shared_weak_count::__release_weak(v113);
                }
              }
              v35 = (char *)v156;
            }
            while ((char *)v156 != v111);
            v35 = (char *)v155;
          }
          if (v35)
            operator delete(v35);
        }
        else if (v35 == v32)
        {
          *(_QWORD *)v32 = v8;
          v41 = &v33[208 * v130];
          *(_OWORD *)(v41 + 8) = v131;
          v42 = v142;
          v43 = v143;
          v41[56] = 0;
          v44 = v41 + 56;
          *((_OWORD *)v44 - 2) = v42;
          *((_OWORD *)v44 - 1) = v43;
          *((_BYTE *)v44 + 32) = 0;
          if (v136)
          {
            v45 = v144[1];
            *(_OWORD *)v44 = v144[0];
            *((_OWORD *)v44 + 1) = v45;
            *((_BYTE *)v44 + 32) = 1;
          }
          v46 = &v33[208 * v130];
          *((_QWORD *)v46 + 12) = v30;
          v47 = v147;
          *(_OWORD *)(v46 + 120) = v148;
          *(_OWORD *)(v46 + 104) = v47;
          v48 = v149;
          *(_OWORD *)(v46 + 152) = v150;
          *(_OWORD *)(v46 + 136) = v48;
          v49 = v151;
          v46[176] = v152;
          *((_QWORD *)v46 + 21) = v49;
          *((_QWORD *)v46 + 23) = v141;
          *((_QWORD *)v46 + 24) = v31;
          v153 = 0uLL;
          v46[200] = 0;
          *(_QWORD *)(a1 + 1384) = v32 + 208;
        }
        else
        {
          v164 = v131;
          v155 = v132;
          v156 = v133;
          if (v136)
          {
            v127 = v144[0];
            v165[0] = *(_OWORD *)((char *)v144 + 1);
            *(_OWORD *)((char *)v165 + 15) = v144[1];
            v128 = 1;
          }
          else
          {
            v127 = 0;
            v128 = 0;
          }
          v162 = v137;
          v163 = v138;
          v160 = v139;
          v161 = v140;
          v158 = v151;
          v159 = v152;
          v52 = v35 + 208;
          v53 = v32 - 208;
          v54 = v32;
          v153 = 0uLL;
          if ((unint64_t)v32 >= 0xD0)
          {
            v55 = 0;
            v56 = &v33[208 * v130 + 16 * ((v32 - v52) >> 4)];
            do
            {
              v60 = &v53[v55];
              v61 = &v32[v55];
              *(_QWORD *)v61 = *(_QWORD *)&v53[v55];
              *(_OWORD *)(v61 + 8) = *(_OWORD *)&v53[v55 + 8];
              v62 = *(_OWORD *)&v53[v55 + 24];
              *(_OWORD *)(v61 + 40) = *(_OWORD *)&v53[v55 + 40];
              *(_OWORD *)(v61 + 24) = v62;
              v32[v55 + 56] = 0;
              v61[88] = 0;
              if (v53[v55 + 88])
              {
                v63 = *(_OWORD *)&v56[v55 + 72];
                *(_OWORD *)&v32[v55 + 56] = *(_OWORD *)&v56[v55 + 56];
                *(_OWORD *)&v32[v55 + 72] = v63;
                v61[88] = 1;
              }
              *((_QWORD *)v61 + 12) = *((_QWORD *)v60 + 12);
              v57 = *(_OWORD *)(v60 + 104);
              *(_OWORD *)(v61 + 120) = *(_OWORD *)(v60 + 120);
              *(_OWORD *)(v61 + 104) = v57;
              v58 = *(_OWORD *)(v60 + 136);
              *(_OWORD *)(v61 + 152) = *(_OWORD *)(v60 + 152);
              *(_OWORD *)(v61 + 136) = v58;
              v59 = *((_QWORD *)v60 + 21);
              v61[176] = v60[176];
              *((_QWORD *)v61 + 21) = v59;
              *(_OWORD *)(v61 + 184) = *(_OWORD *)(v60 + 184);
              *((_QWORD *)v60 + 23) = 0;
              *((_QWORD *)v60 + 24) = 0;
              v61[200] = v60[200];
              v55 += 208;
            }
            while (v60 + 208 < v32);
            v54 = &v32[v55];
          }
          *(_QWORD *)(a1 + 1384) = v54;
          if (v32 != v52)
          {
            v64 = v32 - 208;
            v65 = v32;
            do
            {
              v66 = *((_QWORD *)v64 - 26);
              v64 -= 208;
              *((_QWORD *)v65 - 26) = v66;
              v65 -= 208;
              *(_OWORD *)(v65 + 8) = *(_OWORD *)(v64 + 8);
              v67 = *(_OWORD *)(v64 + 24);
              *(_OWORD *)(v65 + 40) = *(_OWORD *)(v64 + 40);
              *(_OWORD *)(v65 + 24) = v67;
              v68 = v65 + 56;
              v69 = v64 + 56;
              if (v65[88] == v64[88])
              {
                if (v65[88])
                {
                  v70 = *(_OWORD *)(v64 + 72);
                  *v68 = *v69;
                  *(_OWORD *)(v65 + 72) = v70;
                }
              }
              else if (v65[88])
              {
                *(v32 - 120) = 0;
              }
              else
              {
                v71 = *(_OWORD *)(v64 + 72);
                *v68 = *v69;
                *(_OWORD *)(v65 + 72) = v71;
                *(v32 - 120) = 1;
              }
              *((_QWORD *)v32 - 14) = *((_QWORD *)v53 - 14);
              v72 = *(_OWORD *)(v53 - 104);
              *(_OWORD *)(v32 - 88) = *(_OWORD *)(v53 - 88);
              *(_OWORD *)(v32 - 104) = v72;
              v73 = *(_OWORD *)(v53 - 72);
              *(_OWORD *)(v32 - 56) = *(_OWORD *)(v53 - 56);
              *(_OWORD *)(v32 - 72) = v73;
              v74 = *((_QWORD *)v53 - 5);
              *(v32 - 32) = *(v53 - 32);
              *((_QWORD *)v32 - 5) = v74;
              v75 = *(_OWORD *)(v53 - 24);
              *((_QWORD *)v53 - 3) = 0;
              *((_QWORD *)v53 - 2) = 0;
              v76 = (std::__shared_weak_count *)*((_QWORD *)v32 - 2);
              *(_OWORD *)(v32 - 24) = v75;
              if (v76)
              {
                v77 = (unint64_t *)&v76->__shared_owners_;
                do
                  v78 = __ldaxr(v77);
                while (__stlxr(v78 - 1, v77));
                if (!v78)
                {
                  ((void (*)(std::__shared_weak_count *, __int128 *))v76->__on_zero_shared)(v76, a2);
                  std::__shared_weak_count::__release_weak(v76);
                }
              }
              *(v32 - 8) = *(v53 - 8);
              v32 = v65;
              v53 = v64;
            }
            while (v64 != v35);
          }
          *(_QWORD *)v35 = v8;
          v79 = v130;
          v80 = &v129[208 * v130];
          v83 = v80[88];
          v81 = v80 + 88;
          v82 = v83;
          *((_OWORD *)v81 - 5) = v164;
          *((_OWORD *)v81 - 4) = v155;
          *((_OWORD *)v81 - 3) = v156;
          v84 = v81 - 32;
          if (v83 == v128)
          {
            v85 = v141;
            if (v82)
            {
              *v84 = v127;
              *(_OWORD *)(v81 - 31) = v165[0];
              *((_OWORD *)v81 - 1) = *(_OWORD *)((char *)v165 + 15);
            }
          }
          else
          {
            v85 = v141;
            if (v82)
            {
              *v81 = 0;
            }
            else
            {
              *v84 = v127;
              *(_OWORD *)(v81 - 31) = v165[0];
              *((_OWORD *)v81 - 1) = *(_OWORD *)((char *)v165 + 15);
              *v81 = 1;
            }
          }
          v116 = v163;
          v117 = &v129[208 * v130];
          *(_OWORD *)(v117 + 104) = v162;
          *(_OWORD *)(v117 + 120) = v116;
          v118 = v161;
          *(_OWORD *)(v117 + 136) = v160;
          *((_QWORD *)v117 + 12) = v30;
          *(_OWORD *)(v117 + 152) = v118;
          *((_QWORD *)v117 + 21) = v158;
          v117[176] = v159;
          v119 = (std::__shared_weak_count *)*((_QWORD *)v117 + 24);
          *((_QWORD *)v117 + 23) = v85;
          *((_QWORD *)v117 + 24) = v31;
          if (v119)
          {
            v120 = (unint64_t *)&v119->__shared_owners_;
            do
              v121 = __ldaxr(v120);
            while (__stlxr(v121 - 1, v120));
            v79 = v130;
            if (!v121)
            {
              ((void (*)(std::__shared_weak_count *, __int128 *))v119->__on_zero_shared)(v119, a2);
              std::__shared_weak_count::__release_weak(v119);
              v79 = v130;
            }
          }
          v129[208 * v79 + 200] = 0;
        }
        v31 = (std::__shared_weak_count *)*((_QWORD *)&v153 + 1);
      }
      if (v31)
      {
        v122 = (unint64_t *)&v31->__shared_owners_;
        do
          v123 = __ldaxr(v122);
        while (__stlxr(v123 - 1, v122));
        if (!v123)
        {
          ((void (*)(std::__shared_weak_count *, __int128 *))v31->__on_zero_shared)(v31, a2);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      *(_BYTE *)(a1 + 1594) = 0;
      *(_BYTE *)(a1 + 1592) = 0;
      *(int64x2_t *)(a1 + 1576) = vaddq_s64(*(int64x2_t *)(a1 + 1576), (int64x2_t)xmmword_2103B84C0);
      v16 = 1;
    }
    else
    {
      v16 = 0;
      --*(_DWORD *)(v30 + 8);
    }
  }
  if (*((_QWORD *)&v141 + 1))
  {
    v124 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v141 + 1) + 16))(*((_QWORD *)&v141 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v141 + 1));
    }
  }
  return v16;
}

void sub_20FBB2CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;

  sub_20FB817A8((uint64_t)&a67);
  sub_20F4ACD60((uint64_t)&a41);
  sub_20F8AEE9C((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_20FBB2CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  sub_20F4ACD60((uint64_t)&a41);
  sub_20F8AEE9C((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_20FBB2CF8(uint64_t a1, __int128 *a2, unsigned int *a3, uint64_t a4, std::__shared_weak_count *a5)
{
  unint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  char *v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int *v27;
  char *v28;
  unsigned int v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  __int128 v43;
  _QWORD *v44;
  _QWORD *v45;
  __int128 v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  unint64_t v56;
  char *v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  char *v61;
  char *v62;
  __int128 v63;
  __int128 v64;
  char *v65;
  char *v66;
  uint64_t v67;
  __int128 v68;
  _OWORD *v69;
  __int128 *v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  char *v81;
  _BYTE *v82;
  int v83;
  int v84;
  _BYTE *v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  char *v95;
  char *v96;
  __int128 v97;
  __int128 v98;
  char *v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  char *v104;
  char *v105;
  __int128 v106;
  __int128 v107;
  char *v108;
  char *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  char *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  char v123;
  int v124;
  char *v125;
  uint64_t v126;
  __int128 v127;
  __int128 v128;
  _QWORD *v129;
  __int128 v130;
  uint64_t v131;
  char v132;
  __int128 v133;
  uint64_t v134;
  __int128 v135;
  uint64_t v136;
  __int128 v137;
  __int128 v138;
  _QWORD *v139;
  _BYTE v140[24];
  char v141;
  uint64_t v142;
  __int128 v143;
  uint64_t v144;
  __int128 v145;
  uint64_t v146;
  unint64_t v147;
  char v148;
  __int128 v149;
  char v150;
  __int128 v151;
  char *v152;
  char *v153;
  uint64_t v154;
  unint64_t v155;
  char v156;
  __int128 v157;
  uint64_t v158;
  __int128 v159;
  uint64_t v160;
  __int128 v161;
  _BYTE v162[23];
  uint64_t v163;

  v163 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)a2;
  v9 = *(char **)(a1 + 1400);
  v10 = *(char **)(a1 + 1408);
  if (v9 == v10)
  {
    v10 = *(char **)(a1 + 1400);
  }
  else if (*((_QWORD *)v10 - 22) >= v8)
  {
    v11 = 0x2E8BA2E8BA2E8BA3 * ((v10 - v9) >> 4);
    do
    {
      v12 = v11 >> 1;
      v13 = &v9[176 * (v11 >> 1)];
      v15 = *(_QWORD *)v13;
      v14 = v13 + 176;
      v11 += ~(v11 >> 1);
      if (v15 < v8)
        v9 = v14;
      else
        v11 = v12;
    }
    while (v11);
    if (v9 != v10)
    {
      v10 = v9;
      if (*(_QWORD *)v9 == v8)
        return 0;
    }
  }
  if (a5)
  {
    p_shared_owners = (unint64_t *)&a5->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  v127 = *a2;
  v128 = a2[1];
  v129 = (_QWORD *)*((_QWORD *)a2 + 4);
  LOBYTE(v130) = 0;
  v132 = 0;
  if (*((_BYTE *)a2 + 64))
  {
    v130 = *(__int128 *)((char *)a2 + 40);
    v131 = *((_QWORD *)a2 + 7);
    v132 = 1;
  }
  *(_QWORD *)&v137 = a4;
  *((_QWORD *)&v137 + 1) = a5;
  if (a5)
  {
    v19 = (unint64_t *)&a5->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))a5->__on_zero_shared)(a5);
      std::__shared_weak_count::__release_weak(a5);
    }
  }
  v22 = *a3;
  v23 = *(char **)(a1 + 776);
  v24 = *(char **)(a1 + 784);
  if (v24 != v23)
  {
    v25 = (v24 - v23) >> 4;
    do
    {
      v26 = v25 >> 1;
      v27 = (unsigned int *)&v23[16 * (v25 >> 1)];
      v29 = *v27;
      v28 = (char *)(v27 + 4);
      v25 += ~(v25 >> 1);
      if (v29 < v22)
        v23 = v28;
      else
        v25 = v26;
    }
    while (v25);
  }
  if (v23 == v24 || *(_DWORD *)v23 != v22)
  {
    v16 = 0;
  }
  else
  {
    v30 = *((_QWORD *)v23 + 1);
    ++*(_DWORD *)(v30 + 8);
    if (*(_BYTE *)(v30 + 20))
    {
      v138 = v128;
      v139 = v129;
      v140[0] = 0;
      v141 = 0;
      if (v132)
      {
        *(_OWORD *)v140 = v130;
        *(_QWORD *)&v140[16] = v131;
        v141 = 1;
      }
      v143 = v133;
      v142 = v30;
      v144 = v134;
      v145 = v135;
      v31 = (std::__shared_weak_count *)*((_QWORD *)&v137 + 1);
      v146 = v136;
      v147 = 0xBFF0000000000000;
      v148 = 0;
      v149 = v137;
      *((_QWORD *)&v137 + 1) = 0;
      v150 = 0;
      v32 = *(char **)(a1 + 1408);
      if (v32 == v10 || *(_QWORD *)v10 != v8)
      {
        a2 = &v138;
        v33 = *(char **)(a1 + 1400);
        v34 = v10 - v33;
        v126 = (v10 - v33) / 176;
        v35 = &v33[176 * v126];
        v36 = *(_QWORD *)(a1 + 1416);
        if ((unint64_t)v32 >= v36)
        {
          v37 = 0x2E8BA2E8BA2E8BA3 * ((v32 - v33) >> 4) + 1;
          if (v37 > 0x1745D1745D1745DLL)
            sub_20E867F44();
          if (0x5D1745D1745D1746 * ((uint64_t)(v36 - (_QWORD)v33) >> 4) > v37)
            v37 = 0x5D1745D1745D1746 * ((uint64_t)(v36 - (_QWORD)v33) >> 4);
          if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v36 - (_QWORD)v33) >> 4)) >= 0xBA2E8BA2E8BA2ELL)
            v38 = 0x1745D1745D1745DLL;
          else
            v38 = v37;
          v154 = a1 + 1416;
          if (v38)
          {
            if (v38 > 0x1745D1745D1745DLL)
              sub_20E877A38();
            v39 = (char *)operator new(176 * v38);
            v40 = v33;
            v41 = (v10 - v33) / 176;
            a2 = &v138;
          }
          else
          {
            v40 = v33;
            v39 = 0;
            v41 = (v10 - v33) / 176;
          }
          v51 = &v39[176 * v41];
          *(_QWORD *)&v151 = v39;
          *((_QWORD *)&v151 + 1) = v51;
          v152 = v51;
          v153 = &v39[176 * v38];
          if (v41 == v38)
          {
            if (v34 < 1)
            {
              if (v40 == v10)
                v87 = 1;
              else
                v87 = 2 * v41;
              if (v87 > 0x1745D1745D1745DLL)
                sub_20E877A38();
              v88 = (char *)operator new(176 * v87);
              v51 = &v88[176 * (v87 >> 2)];
              *(_QWORD *)&v151 = v88;
              *((_QWORD *)&v151 + 1) = v51;
              v152 = v51;
              v153 = &v88[176 * v87];
              if (v39)
                operator delete(v39);
              a2 = &v138;
            }
            else
            {
              v52 = v41 + 2;
              if (v41 >= -1)
                v52 = v41 + 1;
              v51 -= 176 * (v52 >> 1);
              *((_QWORD *)&v151 + 1) = v51;
              v152 = v51;
            }
          }
          *(_QWORD *)v51 = v8;
          *(_OWORD *)(v51 + 8) = v127;
          *(_OWORD *)(v51 + 24) = v138;
          *((_QWORD *)v51 + 5) = v139;
          v51[48] = 0;
          v51[72] = 0;
          if (v141)
          {
            *((_OWORD *)v51 + 3) = *(_OWORD *)v140;
            *((_QWORD *)v51 + 8) = *(_QWORD *)&v140[16];
            v51[72] = 1;
          }
          *((_QWORD *)v51 + 10) = v142;
          *(_OWORD *)(v51 + 88) = v143;
          *((_QWORD *)v51 + 13) = v144;
          *((_QWORD *)v51 + 16) = v146;
          *((_OWORD *)v51 + 7) = v145;
          *((_QWORD *)v51 + 17) = v147;
          v51[144] = v148;
          *(_OWORD *)(v51 + 152) = v149;
          v149 = 0uLL;
          v51[168] = v150;
          v89 = v51 + 176;
          v152 = v51 + 176;
          v90 = *(char **)(a1 + 1400);
          if (v90 != v35)
          {
            v91 = 0;
            do
            {
              v95 = &v51[v91];
              v96 = &v35[v91];
              *((_QWORD *)v95 - 22) = *(_QWORD *)&v35[v91 - 176];
              *(_OWORD *)(v95 - 168) = *(_OWORD *)&v35[v91 - 168];
              v97 = *(_OWORD *)&v35[v91 - 152];
              *((_QWORD *)v95 - 17) = *(_QWORD *)&v35[v91 - 136];
              *(_OWORD *)(v95 - 152) = v97;
              v51[v91 - 128] = 0;
              *(v95 - 104) = 0;
              if (v35[v91 - 104])
              {
                v98 = *((_OWORD *)v96 - 8);
                *(_QWORD *)&v51[v91 - 112] = *((_QWORD *)v96 - 14);
                *(_OWORD *)&v51[v91 - 128] = v98;
                *(v95 - 104) = 1;
              }
              *((_QWORD *)v95 - 12) = *((_QWORD *)v96 - 12);
              v92 = *(_OWORD *)(v96 - 88);
              *((_QWORD *)v95 - 9) = *((_QWORD *)v96 - 9);
              *(_OWORD *)(v95 - 88) = v92;
              v93 = *((_OWORD *)v96 - 4);
              *((_QWORD *)v95 - 6) = *((_QWORD *)v96 - 6);
              *((_OWORD *)v95 - 4) = v93;
              v94 = *((_QWORD *)v96 - 5);
              *(v95 - 32) = *(v96 - 32);
              *((_QWORD *)v95 - 5) = v94;
              *(_OWORD *)(v95 - 24) = *(_OWORD *)(v96 - 24);
              *((_QWORD *)v96 - 3) = 0;
              *((_QWORD *)v96 - 2) = 0;
              *(v95 - 8) = *(v96 - 8);
              v91 -= 176;
            }
            while (&v35[v91] != v90);
            v89 = v152;
            v51 += v91;
          }
          v99 = *(char **)(a1 + 1408);
          if (v99 != v35)
          {
            v100 = 0;
            do
            {
              v104 = &v35[v100];
              v105 = &v89[v100];
              *(_QWORD *)v105 = *(_QWORD *)&v35[v100];
              *(_OWORD *)(v105 + 8) = *(_OWORD *)&v35[v100 + 8];
              v106 = *(_OWORD *)&v35[v100 + 24];
              *((_QWORD *)v105 + 5) = *(_QWORD *)&v35[v100 + 40];
              *(_OWORD *)(v105 + 24) = v106;
              v89[v100 + 48] = 0;
              v105[72] = 0;
              if (v35[v100 + 72])
              {
                v107 = *((_OWORD *)v104 + 3);
                *(_QWORD *)&v89[v100 + 64] = *((_QWORD *)v104 + 8);
                *(_OWORD *)&v89[v100 + 48] = v107;
                v105[72] = 1;
              }
              *((_QWORD *)v105 + 10) = *((_QWORD *)v104 + 10);
              v101 = *(_OWORD *)(v104 + 88);
              *((_QWORD *)v105 + 13) = *((_QWORD *)v104 + 13);
              *(_OWORD *)(v105 + 88) = v101;
              v102 = *((_OWORD *)v104 + 7);
              *((_QWORD *)v105 + 16) = *((_QWORD *)v104 + 16);
              *((_OWORD *)v105 + 7) = v102;
              v103 = *((_QWORD *)v104 + 17);
              v105[144] = v104[144];
              *((_QWORD *)v105 + 17) = v103;
              *(_OWORD *)(v105 + 152) = *(_OWORD *)(v104 + 152);
              *((_QWORD *)v104 + 19) = 0;
              *((_QWORD *)v104 + 20) = 0;
              v105[168] = v104[168];
              v100 += 176;
            }
            while (v104 + 176 != v99);
            v35 = *(char **)(a1 + 1408);
            v89 += v100;
          }
          v108 = *(char **)(a1 + 1400);
          *(_QWORD *)(a1 + 1400) = v51;
          *(_QWORD *)(a1 + 1408) = v89;
          v109 = *(char **)(a1 + 1416);
          *(_QWORD *)(a1 + 1416) = v153;
          v153 = v109;
          *(_QWORD *)&v151 = v108;
          *((_QWORD *)&v151 + 1) = v108;
          if (v35 != v108)
          {
            do
            {
              v152 = v35 - 176;
              v110 = (std::__shared_weak_count *)*((_QWORD *)v35 - 2);
              if (v110)
              {
                v111 = (unint64_t *)&v110->__shared_owners_;
                do
                  v112 = __ldaxr(v111);
                while (__stlxr(v112 - 1, v111));
                if (!v112)
                {
                  ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                  std::__shared_weak_count::__release_weak(v110);
                }
              }
              v35 = v152;
            }
            while (v152 != v108);
            v35 = (char *)v151;
          }
          if (v35)
            operator delete(v35);
        }
        else if (v35 == v32)
        {
          *(_QWORD *)v32 = v8;
          v42 = &v33[176 * v126];
          *(_OWORD *)(v42 + 8) = v127;
          v43 = v138;
          v44 = v139;
          v42[48] = 0;
          v45 = v42 + 48;
          *(v45 - 1) = v44;
          *(_OWORD *)(v45 - 3) = v43;
          *((_BYTE *)v45 + 24) = 0;
          if (v132)
          {
            v46 = *(_OWORD *)v140;
            v45[2] = *(_QWORD *)&v140[16];
            *(_OWORD *)v45 = v46;
            *((_BYTE *)v45 + 24) = 1;
          }
          v47 = &v33[176 * v126];
          *((_QWORD *)v47 + 10) = v30;
          v48 = v143;
          *((_QWORD *)v47 + 13) = v144;
          *(_OWORD *)(v47 + 88) = v48;
          v49 = v145;
          *((_QWORD *)v47 + 16) = v146;
          *((_OWORD *)v47 + 7) = v49;
          v50 = v147;
          v47[144] = v148;
          *((_QWORD *)v47 + 17) = v50;
          *((_QWORD *)v47 + 19) = v137;
          *((_QWORD *)v47 + 20) = v31;
          v149 = 0uLL;
          v47[168] = 0;
          *(_QWORD *)(a1 + 1408) = v32 + 176;
        }
        else
        {
          v161 = v127;
          v151 = v128;
          v152 = (char *)v129;
          if (v132)
          {
            *(_OWORD *)v162 = *(_OWORD *)&v140[1];
            *(_QWORD *)&v162[15] = *(_QWORD *)&v140[16];
            v123 = v140[0];
            v124 = 1;
          }
          else
          {
            v123 = 0;
            v124 = 0;
          }
          v159 = v133;
          v160 = v134;
          v157 = v135;
          v158 = v136;
          v155 = v147;
          v156 = v148;
          v53 = v35 + 176;
          v54 = v32 - 176;
          v55 = v32;
          v149 = 0uLL;
          if ((unint64_t)v32 >= 0xB0)
          {
            v56 = 0;
            v57 = &v33[176 * v126 + 16 * ((v32 - v53) >> 4)];
            do
            {
              v61 = &v54[v56];
              v62 = &v32[v56];
              *(_QWORD *)v62 = *(_QWORD *)&v54[v56];
              *(_OWORD *)(v62 + 8) = *(_OWORD *)&v54[v56 + 8];
              v63 = *(_OWORD *)&v54[v56 + 24];
              *((_QWORD *)v62 + 5) = *(_QWORD *)&v54[v56 + 40];
              *(_OWORD *)(v62 + 24) = v63;
              v32[v56 + 48] = 0;
              v62[72] = 0;
              if (v54[v56 + 72])
              {
                v64 = *(_OWORD *)&v57[v56 + 48];
                *(_QWORD *)&v32[v56 + 64] = *(_QWORD *)&v57[v56 + 64];
                *(_OWORD *)&v32[v56 + 48] = v64;
                v62[72] = 1;
              }
              *((_QWORD *)v62 + 10) = *((_QWORD *)v61 + 10);
              v58 = *(_OWORD *)(v61 + 88);
              *((_QWORD *)v62 + 13) = *((_QWORD *)v61 + 13);
              *(_OWORD *)(v62 + 88) = v58;
              v59 = *((_OWORD *)v61 + 7);
              *((_QWORD *)v62 + 16) = *((_QWORD *)v61 + 16);
              *((_OWORD *)v62 + 7) = v59;
              v60 = *((_QWORD *)v61 + 17);
              v62[144] = v61[144];
              *((_QWORD *)v62 + 17) = v60;
              *(_OWORD *)(v62 + 152) = *(_OWORD *)(v61 + 152);
              *((_QWORD *)v61 + 19) = 0;
              *((_QWORD *)v61 + 20) = 0;
              v62[168] = v61[168];
              v56 += 176;
            }
            while (v61 + 176 < v32);
            v55 = &v32[v56];
          }
          v125 = v33;
          *(_QWORD *)(a1 + 1408) = v55;
          if (v32 != v53)
          {
            v65 = v32 - 176;
            v66 = v32;
            do
            {
              v67 = *((_QWORD *)v65 - 22);
              v65 -= 176;
              *((_QWORD *)v66 - 22) = v67;
              v66 -= 176;
              *(_OWORD *)(v66 + 8) = *(_OWORD *)(v65 + 8);
              v68 = *(_OWORD *)(v65 + 24);
              *((_QWORD *)v66 + 5) = *((_QWORD *)v65 + 5);
              *(_OWORD *)(v66 + 24) = v68;
              v69 = v66 + 48;
              v70 = (__int128 *)(v65 + 48);
              if (v66[72] == v65[72])
              {
                if (v66[72])
                {
                  v71 = *v70;
                  *((_QWORD *)v66 + 8) = *((_QWORD *)v65 + 8);
                  *v69 = v71;
                }
              }
              else if (v66[72])
              {
                *(v32 - 104) = 0;
              }
              else
              {
                v72 = *v70;
                *((_QWORD *)v66 + 8) = *((_QWORD *)v65 + 8);
                *v69 = v72;
                *(v32 - 104) = 1;
              }
              *((_QWORD *)v32 - 12) = *((_QWORD *)v54 - 12);
              v73 = *(_OWORD *)(v54 - 88);
              *((_QWORD *)v32 - 9) = *((_QWORD *)v54 - 9);
              *(_OWORD *)(v32 - 88) = v73;
              v74 = *((_OWORD *)v54 - 4);
              *((_QWORD *)v32 - 6) = *((_QWORD *)v54 - 6);
              *((_OWORD *)v32 - 4) = v74;
              v75 = *((_QWORD *)v54 - 5);
              *(v32 - 32) = *(v54 - 32);
              *((_QWORD *)v32 - 5) = v75;
              v76 = *(_OWORD *)(v54 - 24);
              *((_QWORD *)v54 - 3) = 0;
              *((_QWORD *)v54 - 2) = 0;
              v77 = (std::__shared_weak_count *)*((_QWORD *)v32 - 2);
              *(_OWORD *)(v32 - 24) = v76;
              if (v77)
              {
                v78 = (unint64_t *)&v77->__shared_owners_;
                do
                  v79 = __ldaxr(v78);
                while (__stlxr(v79 - 1, v78));
                if (!v79)
                {
                  ((void (*)(std::__shared_weak_count *, __int128 *))v77->__on_zero_shared)(v77, a2);
                  std::__shared_weak_count::__release_weak(v77);
                }
              }
              *(v32 - 8) = *(v54 - 8);
              v32 = v66;
              v54 = v65;
            }
            while (v65 != v35);
          }
          *(_QWORD *)v35 = v8;
          v80 = v126;
          v81 = &v125[176 * v126];
          v84 = v81[72];
          v82 = v81 + 72;
          v83 = v84;
          *((_OWORD *)v82 - 4) = v161;
          *((_OWORD *)v82 - 3) = v151;
          *((_QWORD *)v82 - 4) = v152;
          v85 = v82 - 24;
          if (v84 == v124)
          {
            v86 = v137;
            if (v83)
            {
              *v85 = v123;
              *(_OWORD *)(v82 - 23) = *(_OWORD *)v162;
              *((_QWORD *)v82 - 1) = *(_QWORD *)&v162[15];
            }
          }
          else
          {
            v86 = v137;
            if (v83)
            {
              *v82 = 0;
            }
            else
            {
              *v85 = v123;
              *(_OWORD *)(v82 - 23) = *(_OWORD *)v162;
              *((_QWORD *)v82 - 1) = *(_QWORD *)&v162[15];
              *v82 = 1;
            }
          }
          v113 = &v125[176 * v126];
          *((_QWORD *)v113 + 10) = v30;
          *(_OWORD *)(v113 + 88) = v159;
          *((_QWORD *)v113 + 13) = v160;
          *((_OWORD *)v113 + 7) = v157;
          v114 = v155;
          *((_QWORD *)v113 + 16) = v158;
          *((_QWORD *)v113 + 17) = v114;
          v113[144] = v156;
          v115 = (std::__shared_weak_count *)*((_QWORD *)v113 + 20);
          *((_QWORD *)v113 + 19) = v86;
          *((_QWORD *)v113 + 20) = v31;
          if (v115)
          {
            v116 = (unint64_t *)&v115->__shared_owners_;
            do
              v117 = __ldaxr(v116);
            while (__stlxr(v117 - 1, v116));
            v80 = v126;
            if (!v117)
            {
              ((void (*)(std::__shared_weak_count *, __int128 *))v115->__on_zero_shared)(v115, a2);
              std::__shared_weak_count::__release_weak(v115);
              v80 = v126;
            }
          }
          v125[176 * v80 + 168] = 0;
        }
        v31 = (std::__shared_weak_count *)*((_QWORD *)&v149 + 1);
      }
      if (v31)
      {
        v118 = (unint64_t *)&v31->__shared_owners_;
        do
          v119 = __ldaxr(v118);
        while (__stlxr(v119 - 1, v118));
        if (!v119)
        {
          ((void (*)(std::__shared_weak_count *, __int128 *))v31->__on_zero_shared)(v31, a2);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      *(_BYTE *)(a1 + 1594) = 0;
      *(_BYTE *)(a1 + 1592) = 0;
      *(int64x2_t *)(a1 + 1576) = vaddq_s64(*(int64x2_t *)(a1 + 1576), (int64x2_t)xmmword_2103B84D0);
      v16 = 1;
    }
    else
    {
      v16 = 0;
      --*(_DWORD *)(v30 + 8);
    }
  }
  if (*((_QWORD *)&v137 + 1))
  {
    v120 = (unint64_t *)(*((_QWORD *)&v137 + 1) + 8);
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v137 + 1) + 16))(*((_QWORD *)&v137 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v137 + 1));
    }
  }
  return v16;
}

void sub_20FBB3A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  sub_20FBB3A54((uint64_t)&a59);
  sub_20F8AEF6C((uint64_t)&a37);
  sub_20F8AEFD4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_20FBB3A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  sub_20F8AEF6C((uint64_t)&a37);
  sub_20F8AEFD4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_20FBB3A54(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 176;
    v4 = *(std::__shared_weak_count **)(i - 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20FBB3AE0(uint64_t a1, __int128 *a2, unsigned int *a3, uint64_t a4, std::__shared_weak_count *a5)
{
  unint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  char *v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int *v27;
  char *v28;
  unsigned int v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  __int128 v43;
  _QWORD *v44;
  _QWORD *v45;
  __int128 v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  unint64_t v56;
  char *v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  char *v61;
  char *v62;
  __int128 v63;
  __int128 v64;
  char *v65;
  char *v66;
  uint64_t v67;
  __int128 v68;
  _OWORD *v69;
  __int128 *v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  char *v81;
  _BYTE *v82;
  int v83;
  int v84;
  _BYTE *v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  char *v95;
  char *v96;
  __int128 v97;
  __int128 v98;
  char *v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  char *v104;
  char *v105;
  __int128 v106;
  __int128 v107;
  char *v108;
  char *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  char *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  char v123;
  int v124;
  char *v125;
  uint64_t v126;
  __int128 v127;
  __int128 v128;
  _QWORD *v129;
  __int128 v130;
  uint64_t v131;
  char v132;
  __int128 v133;
  uint64_t v134;
  __int128 v135;
  uint64_t v136;
  __int128 v137;
  __int128 v138;
  _QWORD *v139;
  _BYTE v140[24];
  char v141;
  uint64_t v142;
  __int128 v143;
  uint64_t v144;
  __int128 v145;
  uint64_t v146;
  unint64_t v147;
  char v148;
  __int128 v149;
  char v150;
  __int128 v151;
  char *v152;
  char *v153;
  uint64_t v154;
  unint64_t v155;
  char v156;
  __int128 v157;
  uint64_t v158;
  __int128 v159;
  uint64_t v160;
  __int128 v161;
  _BYTE v162[23];
  uint64_t v163;

  v163 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)a2;
  v9 = *(char **)(a1 + 1424);
  v10 = *(char **)(a1 + 1432);
  if (v9 == v10)
  {
    v10 = *(char **)(a1 + 1424);
  }
  else if (*((_QWORD *)v10 - 22) >= v8)
  {
    v11 = 0x2E8BA2E8BA2E8BA3 * ((v10 - v9) >> 4);
    do
    {
      v12 = v11 >> 1;
      v13 = &v9[176 * (v11 >> 1)];
      v15 = *(_QWORD *)v13;
      v14 = v13 + 176;
      v11 += ~(v11 >> 1);
      if (v15 < v8)
        v9 = v14;
      else
        v11 = v12;
    }
    while (v11);
    if (v9 != v10)
    {
      v10 = v9;
      if (*(_QWORD *)v9 == v8)
        return 0;
    }
  }
  if (a5)
  {
    p_shared_owners = (unint64_t *)&a5->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  v127 = *a2;
  v128 = a2[1];
  v129 = (_QWORD *)*((_QWORD *)a2 + 4);
  LOBYTE(v130) = 0;
  v132 = 0;
  if (*((_BYTE *)a2 + 64))
  {
    v130 = *(__int128 *)((char *)a2 + 40);
    v131 = *((_QWORD *)a2 + 7);
    v132 = 1;
  }
  *(_QWORD *)&v137 = a4;
  *((_QWORD *)&v137 + 1) = a5;
  if (a5)
  {
    v19 = (unint64_t *)&a5->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))a5->__on_zero_shared)(a5);
      std::__shared_weak_count::__release_weak(a5);
    }
  }
  v22 = *a3;
  v23 = *(char **)(a1 + 872);
  v24 = *(char **)(a1 + 880);
  if (v24 != v23)
  {
    v25 = (v24 - v23) >> 4;
    do
    {
      v26 = v25 >> 1;
      v27 = (unsigned int *)&v23[16 * (v25 >> 1)];
      v29 = *v27;
      v28 = (char *)(v27 + 4);
      v25 += ~(v25 >> 1);
      if (v29 < v22)
        v23 = v28;
      else
        v25 = v26;
    }
    while (v25);
  }
  if (v23 == v24 || *(_DWORD *)v23 != v22)
  {
    v16 = 0;
  }
  else
  {
    v30 = *((_QWORD *)v23 + 1);
    ++*(_DWORD *)(v30 + 8);
    if (*(_BYTE *)(v30 + 20))
    {
      v138 = v128;
      v139 = v129;
      v140[0] = 0;
      v141 = 0;
      if (v132)
      {
        *(_OWORD *)v140 = v130;
        *(_QWORD *)&v140[16] = v131;
        v141 = 1;
      }
      v143 = v133;
      v142 = v30;
      v144 = v134;
      v145 = v135;
      v31 = (std::__shared_weak_count *)*((_QWORD *)&v137 + 1);
      v146 = v136;
      v147 = 0xBFF0000000000000;
      v148 = 0;
      v149 = v137;
      *((_QWORD *)&v137 + 1) = 0;
      v150 = 0;
      v32 = *(char **)(a1 + 1432);
      if (v32 == v10 || *(_QWORD *)v10 != v8)
      {
        a2 = &v138;
        v33 = *(char **)(a1 + 1424);
        v34 = v10 - v33;
        v126 = (v10 - v33) / 176;
        v35 = &v33[176 * v126];
        v36 = *(_QWORD *)(a1 + 1440);
        if ((unint64_t)v32 >= v36)
        {
          v37 = 0x2E8BA2E8BA2E8BA3 * ((v32 - v33) >> 4) + 1;
          if (v37 > 0x1745D1745D1745DLL)
            sub_20E867F44();
          if (0x5D1745D1745D1746 * ((uint64_t)(v36 - (_QWORD)v33) >> 4) > v37)
            v37 = 0x5D1745D1745D1746 * ((uint64_t)(v36 - (_QWORD)v33) >> 4);
          if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v36 - (_QWORD)v33) >> 4)) >= 0xBA2E8BA2E8BA2ELL)
            v38 = 0x1745D1745D1745DLL;
          else
            v38 = v37;
          v154 = a1 + 1440;
          if (v38)
          {
            if (v38 > 0x1745D1745D1745DLL)
              sub_20E877A38();
            v39 = (char *)operator new(176 * v38);
            v40 = v33;
            v41 = (v10 - v33) / 176;
            a2 = &v138;
          }
          else
          {
            v40 = v33;
            v39 = 0;
            v41 = (v10 - v33) / 176;
          }
          v51 = &v39[176 * v41];
          *(_QWORD *)&v151 = v39;
          *((_QWORD *)&v151 + 1) = v51;
          v152 = v51;
          v153 = &v39[176 * v38];
          if (v41 == v38)
          {
            if (v34 < 1)
            {
              if (v40 == v10)
                v87 = 1;
              else
                v87 = 2 * v41;
              if (v87 > 0x1745D1745D1745DLL)
                sub_20E877A38();
              v88 = (char *)operator new(176 * v87);
              v51 = &v88[176 * (v87 >> 2)];
              *(_QWORD *)&v151 = v88;
              *((_QWORD *)&v151 + 1) = v51;
              v152 = v51;
              v153 = &v88[176 * v87];
              if (v39)
                operator delete(v39);
              a2 = &v138;
            }
            else
            {
              v52 = v41 + 2;
              if (v41 >= -1)
                v52 = v41 + 1;
              v51 -= 176 * (v52 >> 1);
              *((_QWORD *)&v151 + 1) = v51;
              v152 = v51;
            }
          }
          *(_QWORD *)v51 = v8;
          *(_OWORD *)(v51 + 8) = v127;
          *(_OWORD *)(v51 + 24) = v138;
          *((_QWORD *)v51 + 5) = v139;
          v51[48] = 0;
          v51[72] = 0;
          if (v141)
          {
            *((_OWORD *)v51 + 3) = *(_OWORD *)v140;
            *((_QWORD *)v51 + 8) = *(_QWORD *)&v140[16];
            v51[72] = 1;
          }
          *((_QWORD *)v51 + 10) = v142;
          *(_OWORD *)(v51 + 88) = v143;
          *((_QWORD *)v51 + 13) = v144;
          *((_QWORD *)v51 + 16) = v146;
          *((_OWORD *)v51 + 7) = v145;
          *((_QWORD *)v51 + 17) = v147;
          v51[144] = v148;
          *(_OWORD *)(v51 + 152) = v149;
          v149 = 0uLL;
          v51[168] = v150;
          v89 = v51 + 176;
          v152 = v51 + 176;
          v90 = *(char **)(a1 + 1424);
          if (v90 != v35)
          {
            v91 = 0;
            do
            {
              v95 = &v51[v91];
              v96 = &v35[v91];
              *((_QWORD *)v95 - 22) = *(_QWORD *)&v35[v91 - 176];
              *(_OWORD *)(v95 - 168) = *(_OWORD *)&v35[v91 - 168];
              v97 = *(_OWORD *)&v35[v91 - 152];
              *((_QWORD *)v95 - 17) = *(_QWORD *)&v35[v91 - 136];
              *(_OWORD *)(v95 - 152) = v97;
              v51[v91 - 128] = 0;
              *(v95 - 104) = 0;
              if (v35[v91 - 104])
              {
                v98 = *((_OWORD *)v96 - 8);
                *(_QWORD *)&v51[v91 - 112] = *((_QWORD *)v96 - 14);
                *(_OWORD *)&v51[v91 - 128] = v98;
                *(v95 - 104) = 1;
              }
              *((_QWORD *)v95 - 12) = *((_QWORD *)v96 - 12);
              v92 = *(_OWORD *)(v96 - 88);
              *((_QWORD *)v95 - 9) = *((_QWORD *)v96 - 9);
              *(_OWORD *)(v95 - 88) = v92;
              v93 = *((_OWORD *)v96 - 4);
              *((_QWORD *)v95 - 6) = *((_QWORD *)v96 - 6);
              *((_OWORD *)v95 - 4) = v93;
              v94 = *((_QWORD *)v96 - 5);
              *(v95 - 32) = *(v96 - 32);
              *((_QWORD *)v95 - 5) = v94;
              *(_OWORD *)(v95 - 24) = *(_OWORD *)(v96 - 24);
              *((_QWORD *)v96 - 3) = 0;
              *((_QWORD *)v96 - 2) = 0;
              *(v95 - 8) = *(v96 - 8);
              v91 -= 176;
            }
            while (&v35[v91] != v90);
            v89 = v152;
            v51 += v91;
          }
          v99 = *(char **)(a1 + 1432);
          if (v99 != v35)
          {
            v100 = 0;
            do
            {
              v104 = &v35[v100];
              v105 = &v89[v100];
              *(_QWORD *)v105 = *(_QWORD *)&v35[v100];
              *(_OWORD *)(v105 + 8) = *(_OWORD *)&v35[v100 + 8];
              v106 = *(_OWORD *)&v35[v100 + 24];
              *((_QWORD *)v105 + 5) = *(_QWORD *)&v35[v100 + 40];
              *(_OWORD *)(v105 + 24) = v106;
              v89[v100 + 48] = 0;
              v105[72] = 0;
              if (v35[v100 + 72])
              {
                v107 = *((_OWORD *)v104 + 3);
                *(_QWORD *)&v89[v100 + 64] = *((_QWORD *)v104 + 8);
                *(_OWORD *)&v89[v100 + 48] = v107;
                v105[72] = 1;
              }
              *((_QWORD *)v105 + 10) = *((_QWORD *)v104 + 10);
              v101 = *(_OWORD *)(v104 + 88);
              *((_QWORD *)v105 + 13) = *((_QWORD *)v104 + 13);
              *(_OWORD *)(v105 + 88) = v101;
              v102 = *((_OWORD *)v104 + 7);
              *((_QWORD *)v105 + 16) = *((_QWORD *)v104 + 16);
              *((_OWORD *)v105 + 7) = v102;
              v103 = *((_QWORD *)v104 + 17);
              v105[144] = v104[144];
              *((_QWORD *)v105 + 17) = v103;
              *(_OWORD *)(v105 + 152) = *(_OWORD *)(v104 + 152);
              *((_QWORD *)v104 + 19) = 0;
              *((_QWORD *)v104 + 20) = 0;
              v105[168] = v104[168];
              v100 += 176;
            }
            while (v104 + 176 != v99);
            v35 = *(char **)(a1 + 1432);
            v89 += v100;
          }
          v108 = *(char **)(a1 + 1424);
          *(_QWORD *)(a1 + 1424) = v51;
          *(_QWORD *)(a1 + 1432) = v89;
          v109 = *(char **)(a1 + 1440);
          *(_QWORD *)(a1 + 1440) = v153;
          v153 = v109;
          *(_QWORD *)&v151 = v108;
          *((_QWORD *)&v151 + 1) = v108;
          if (v35 != v108)
          {
            do
            {
              v152 = v35 - 176;
              v110 = (std::__shared_weak_count *)*((_QWORD *)v35 - 2);
              if (v110)
              {
                v111 = (unint64_t *)&v110->__shared_owners_;
                do
                  v112 = __ldaxr(v111);
                while (__stlxr(v112 - 1, v111));
                if (!v112)
                {
                  ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                  std::__shared_weak_count::__release_weak(v110);
                }
              }
              v35 = v152;
            }
            while (v152 != v108);
            v35 = (char *)v151;
          }
          if (v35)
            operator delete(v35);
        }
        else if (v35 == v32)
        {
          *(_QWORD *)v32 = v8;
          v42 = &v33[176 * v126];
          *(_OWORD *)(v42 + 8) = v127;
          v43 = v138;
          v44 = v139;
          v42[48] = 0;
          v45 = v42 + 48;
          *(v45 - 1) = v44;
          *(_OWORD *)(v45 - 3) = v43;
          *((_BYTE *)v45 + 24) = 0;
          if (v132)
          {
            v46 = *(_OWORD *)v140;
            v45[2] = *(_QWORD *)&v140[16];
            *(_OWORD *)v45 = v46;
            *((_BYTE *)v45 + 24) = 1;
          }
          v47 = &v33[176 * v126];
          *((_QWORD *)v47 + 10) = v30;
          v48 = v143;
          *((_QWORD *)v47 + 13) = v144;
          *(_OWORD *)(v47 + 88) = v48;
          v49 = v145;
          *((_QWORD *)v47 + 16) = v146;
          *((_OWORD *)v47 + 7) = v49;
          v50 = v147;
          v47[144] = v148;
          *((_QWORD *)v47 + 17) = v50;
          *((_QWORD *)v47 + 19) = v137;
          *((_QWORD *)v47 + 20) = v31;
          v149 = 0uLL;
          v47[168] = 0;
          *(_QWORD *)(a1 + 1432) = v32 + 176;
        }
        else
        {
          v161 = v127;
          v151 = v128;
          v152 = (char *)v129;
          if (v132)
          {
            *(_OWORD *)v162 = *(_OWORD *)&v140[1];
            *(_QWORD *)&v162[15] = *(_QWORD *)&v140[16];
            v123 = v140[0];
            v124 = 1;
          }
          else
          {
            v123 = 0;
            v124 = 0;
          }
          v159 = v133;
          v160 = v134;
          v157 = v135;
          v158 = v136;
          v155 = v147;
          v156 = v148;
          v53 = v35 + 176;
          v54 = v32 - 176;
          v55 = v32;
          v149 = 0uLL;
          if ((unint64_t)v32 >= 0xB0)
          {
            v56 = 0;
            v57 = &v33[176 * v126 + 16 * ((v32 - v53) >> 4)];
            do
            {
              v61 = &v54[v56];
              v62 = &v32[v56];
              *(_QWORD *)v62 = *(_QWORD *)&v54[v56];
              *(_OWORD *)(v62 + 8) = *(_OWORD *)&v54[v56 + 8];
              v63 = *(_OWORD *)&v54[v56 + 24];
              *((_QWORD *)v62 + 5) = *(_QWORD *)&v54[v56 + 40];
              *(_OWORD *)(v62 + 24) = v63;
              v32[v56 + 48] = 0;
              v62[72] = 0;
              if (v54[v56 + 72])
              {
                v64 = *(_OWORD *)&v57[v56 + 48];
                *(_QWORD *)&v32[v56 + 64] = *(_QWORD *)&v57[v56 + 64];
                *(_OWORD *)&v32[v56 + 48] = v64;
                v62[72] = 1;
              }
              *((_QWORD *)v62 + 10) = *((_QWORD *)v61 + 10);
              v58 = *(_OWORD *)(v61 + 88);
              *((_QWORD *)v62 + 13) = *((_QWORD *)v61 + 13);
              *(_OWORD *)(v62 + 88) = v58;
              v59 = *((_OWORD *)v61 + 7);
              *((_QWORD *)v62 + 16) = *((_QWORD *)v61 + 16);
              *((_OWORD *)v62 + 7) = v59;
              v60 = *((_QWORD *)v61 + 17);
              v62[144] = v61[144];
              *((_QWORD *)v62 + 17) = v60;
              *(_OWORD *)(v62 + 152) = *(_OWORD *)(v61 + 152);
              *((_QWORD *)v61 + 19) = 0;
              *((_QWORD *)v61 + 20) = 0;
              v62[168] = v61[168];
              v56 += 176;
            }
            while (v61 + 176 < v32);
            v55 = &v32[v56];
          }
          v125 = v33;
          *(_QWORD *)(a1 + 1432) = v55;
          if (v32 != v53)
          {
            v65 = v32 - 176;
            v66 = v32;
            do
            {
              v67 = *((_QWORD *)v65 - 22);
              v65 -= 176;
              *((_QWORD *)v66 - 22) = v67;
              v66 -= 176;
              *(_OWORD *)(v66 + 8) = *(_OWORD *)(v65 + 8);
              v68 = *(_OWORD *)(v65 + 24);
              *((_QWORD *)v66 + 5) = *((_QWORD *)v65 + 5);
              *(_OWORD *)(v66 + 24) = v68;
              v69 = v66 + 48;
              v70 = (__int128 *)(v65 + 48);
              if (v66[72] == v65[72])
              {
                if (v66[72])
                {
                  v71 = *v70;
                  *((_QWORD *)v66 + 8) = *((_QWORD *)v65 + 8);
                  *v69 = v71;
                }
              }
              else if (v66[72])
              {
                *(v32 - 104) = 0;
              }
              else
              {
                v72 = *v70;
                *((_QWORD *)v66 + 8) = *((_QWORD *)v65 + 8);
                *v69 = v72;
                *(v32 - 104) = 1;
              }
              *((_QWORD *)v32 - 12) = *((_QWORD *)v54 - 12);
              v73 = *(_OWORD *)(v54 - 88);
              *((_QWORD *)v32 - 9) = *((_QWORD *)v54 - 9);
              *(_OWORD *)(v32 - 88) = v73;
              v74 = *((_OWORD *)v54 - 4);
              *((_QWORD *)v32 - 6) = *((_QWORD *)v54 - 6);
              *((_OWORD *)v32 - 4) = v74;
              v75 = *((_QWORD *)v54 - 5);
              *(v32 - 32) = *(v54 - 32);
              *((_QWORD *)v32 - 5) = v75;
              v76 = *(_OWORD *)(v54 - 24);
              *((_QWORD *)v54 - 3) = 0;
              *((_QWORD *)v54 - 2) = 0;
              v77 = (std::__shared_weak_count *)*((_QWORD *)v32 - 2);
              *(_OWORD *)(v32 - 24) = v76;
              if (v77)
              {
                v78 = (unint64_t *)&v77->__shared_owners_;
                do
                  v79 = __ldaxr(v78);
                while (__stlxr(v79 - 1, v78));
                if (!v79)
                {
                  ((void (*)(std::__shared_weak_count *, __int128 *))v77->__on_zero_shared)(v77, a2);
                  std::__shared_weak_count::__release_weak(v77);
                }
              }
              *(v32 - 8) = *(v54 - 8);
              v32 = v66;
              v54 = v65;
            }
            while (v65 != v35);
          }
          *(_QWORD *)v35 = v8;
          v80 = v126;
          v81 = &v125[176 * v126];
          v84 = v81[72];
          v82 = v81 + 72;
          v83 = v84;
          *((_OWORD *)v82 - 4) = v161;
          *((_OWORD *)v82 - 3) = v151;
          *((_QWORD *)v82 - 4) = v152;
          v85 = v82 - 24;
          if (v84 == v124)
          {
            v86 = v137;
            if (v83)
            {
              *v85 = v123;
              *(_OWORD *)(v82 - 23) = *(_OWORD *)v162;
              *((_QWORD *)v82 - 1) = *(_QWORD *)&v162[15];
            }
          }
          else
          {
            v86 = v137;
            if (v83)
            {
              *v82 = 0;
            }
            else
            {
              *v85 = v123;
              *(_OWORD *)(v82 - 23) = *(_OWORD *)v162;
              *((_QWORD *)v82 - 1) = *(_QWORD *)&v162[15];
              *v82 = 1;
            }
          }
          v113 = &v125[176 * v126];
          *((_QWORD *)v113 + 10) = v30;
          *(_OWORD *)(v113 + 88) = v159;
          *((_QWORD *)v113 + 13) = v160;
          *((_OWORD *)v113 + 7) = v157;
          v114 = v155;
          *((_QWORD *)v113 + 16) = v158;
          *((_QWORD *)v113 + 17) = v114;
          v113[144] = v156;
          v115 = (std::__shared_weak_count *)*((_QWORD *)v113 + 20);
          *((_QWORD *)v113 + 19) = v86;
          *((_QWORD *)v113 + 20) = v31;
          if (v115)
          {
            v116 = (unint64_t *)&v115->__shared_owners_;
            do
              v117 = __ldaxr(v116);
            while (__stlxr(v117 - 1, v116));
            v80 = v126;
            if (!v117)
            {
              ((void (*)(std::__shared_weak_count *, __int128 *))v115->__on_zero_shared)(v115, a2);
              std::__shared_weak_count::__release_weak(v115);
              v80 = v126;
            }
          }
          v125[176 * v80 + 168] = 0;
        }
        v31 = (std::__shared_weak_count *)*((_QWORD *)&v149 + 1);
      }
      if (v31)
      {
        v118 = (unint64_t *)&v31->__shared_owners_;
        do
          v119 = __ldaxr(v118);
        while (__stlxr(v119 - 1, v118));
        if (!v119)
        {
          ((void (*)(std::__shared_weak_count *, __int128 *))v31->__on_zero_shared)(v31, a2);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      *(_BYTE *)(a1 + 1594) = 0;
      *(_BYTE *)(a1 + 1592) = 0;
      *(int64x2_t *)(a1 + 1576) = vaddq_s64(*(int64x2_t *)(a1 + 1576), (int64x2_t)xmmword_2103B84D0);
      v16 = 1;
    }
    else
    {
      v16 = 0;
      --*(_DWORD *)(v30 + 8);
    }
  }
  if (*((_QWORD *)&v137 + 1))
  {
    v120 = (unint64_t *)(*((_QWORD *)&v137 + 1) + 8);
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v137 + 1) + 16))(*((_QWORD *)&v137 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v137 + 1));
    }
  }
  return v16;
}

void sub_20FBB47FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  sub_20FBB3A54((uint64_t)&a59);
  sub_20F8AEF6C((uint64_t)&a37);
  sub_20F8AEFD4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_20FBB4820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  sub_20F8AEF6C((uint64_t)&a37);
  sub_20F8AEFD4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_20FBB483C(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 160;
    v4 = *(std::__shared_weak_count **)(i - 16);
    if (!v4)
      goto LABEL_8;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v7 = *(std::__shared_weak_count **)(i - 104);
      if (!v7)
        continue;
    }
    else
    {
LABEL_8:
      v7 = *(std::__shared_weak_count **)(i - 104);
      if (!v7)
        continue;
    }
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

double *sub_20FBB490C(uint64_t a1, double *a2, char a3)
{
  unint64_t v6;
  double *v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double *v21;
  double v22;
  uint64_t v23;
  float64x2_t v24;
  double v25;
  float64x2_t v26;
  uint64_t v27;
  uint64_t v28;
  double *v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double *v34;
  double v35;
  uint64_t v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  float64x2_t v42;
  uint64_t v43;
  uint64_t v44;
  double *v45;
  double v46;
  uint64_t v47;
  double v48;
  float64x2_t v49;
  double v50;
  float64x2_t v51;
  uint64_t v52;
  uint64_t v53;
  double *v54;
  double v55;
  uint64_t v56;
  double v57;
  float64x2_t v58;
  float64x2_t v59;
  uint64_t v60;
  uint64_t v61;
  double *v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double *v67;
  double v68;
  uint64_t v69;
  __n128 v70;
  __n128 v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  float64x2_t v77;
  uint64_t v78;
  uint64_t v79;
  double *v80;
  double v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  double *v85;
  double v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  double *v90;
  double v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  double *v95;
  double v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  double *v100;
  double v101;
  uint64_t v102;
  double v103;
  float64x2_t v104;
  double v105;
  float64x2_t v106;
  uint64_t v107;
  uint64_t v108;
  double *v109;
  double v110;
  uint64_t v111;
  double v112;
  __n128 v113;
  __n128 v114;
  double v115;
  double v116;
  float64x2_t v117;
  double v118;
  double v119;
  float64x2_t v120;
  uint64_t v121;
  uint64_t v122;
  double *v123;
  double v124;
  uint64_t v125;
  double v126;
  __n128 v127;
  __n128 v128;
  double v129;
  double v130;
  double v131;
  float64x2_t v132;
  double v133;
  float64x2_t v134;
  uint64_t v135;
  uint64_t v136;
  double *v137;
  double v138;
  uint64_t v139;
  double v140;
  __n128 v141;
  __n128 v142;
  double v143;
  double v144;
  float64x2_t v145;
  double v146;
  double v147;
  float64x2_t v148;
  uint64_t v149;
  uint64_t v150;
  double *v151;
  double v152;
  uint64_t v153;
  double v154;
  __n128 v155;
  __n128 v156;
  double v157;
  double v158;
  float64x2_t v159;
  double v160;
  double v161;
  float64x2_t v162;
  uint64_t v163;
  uint64_t v164;
  double *v165;
  double v166;
  uint64_t v167;
  double v168;
  uint64_t v169;
  double *result;
  uint64_t v171;
  double v172;
  uint64_t v173;
  double v174;
  double v175;
  double v181;
  double v182;
  double v183;
  double v184;
  uint64_t v185;
  double v186;
  uint64_t v187;
  double v188;
  uint64_t v189;
  double v190;
  double v191;
  double v192;
  double v193;
  uint64_t v194;
  double v195;
  uint64_t v196;
  double v197;
  uint64_t v198;
  double v199;
  double v200;
  double v201;
  double v202;
  double v203;
  double v204;
  double v205;
  double v206;
  double v207;
  double v208;
  double v209;
  double v210;
  double v211;
  double v212;
  double v213;
  _QWORD v214[64];
  double *v215;
  __int128 v216;
  uint64_t v217;

  v215 = (double *)v214;
  v216 = xmmword_210378040;
  v6 = 0xEFBEFBEFBEFBEFBFLL * ((uint64_t)(*(_QWORD *)(a1 + 1400) - *(_QWORD *)(a1 + 1392)) >> 3);
  if (v6 <= 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(_QWORD *)(a1 + 1424) - *(_QWORD *)(a1 + 1416)) >> 3))
    v6 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(_QWORD *)(a1 + 1424) - *(_QWORD *)(a1 + 1416)) >> 3);
  if (v6 <= 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(_QWORD *)(a1 + 1448) - *(_QWORD *)(a1 + 1440)) >> 3))
    v6 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(_QWORD *)(a1 + 1448) - *(_QWORD *)(a1 + 1440)) >> 3);
  if (v6 <= 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(_QWORD *)(a1 + 1472) - *(_QWORD *)(a1 + 1464)) >> 3))
    v6 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(_QWORD *)(a1 + 1472) - *(_QWORD *)(a1 + 1464)) >> 3);
  if (v6 <= 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 1496) - *(_QWORD *)(a1 + 1488)) >> 5))
    v6 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 1496) - *(_QWORD *)(a1 + 1488)) >> 5);
  if (v6 <= 0x97A3FE4BD1FF25E9 * ((uint64_t)(*(_QWORD *)(a1 + 1520) - *(_QWORD *)(a1 + 1512)) >> 4))
    v6 = 0x97A3FE4BD1FF25E9 * ((uint64_t)(*(_QWORD *)(a1 + 1520) - *(_QWORD *)(a1 + 1512)) >> 4);
  if (v6 <= 0x4515E08719B71393 * ((uint64_t)(*(_QWORD *)(a1 + 1544) - *(_QWORD *)(a1 + 1536)) >> 3))
    v6 = 0x4515E08719B71393 * ((uint64_t)(*(_QWORD *)(a1 + 1544) - *(_QWORD *)(a1 + 1536)) >> 3);
  if (v6 <= 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 1568) - *(_QWORD *)(a1 + 1560)) >> 4))
    v6 = 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 1568) - *(_QWORD *)(a1 + 1560)) >> 4);
  if (v6 <= 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(_QWORD *)(a1 + 1592) - *(_QWORD *)(a1 + 1584)) >> 3))
    v6 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(_QWORD *)(a1 + 1592) - *(_QWORD *)(a1 + 1584)) >> 3);
  if (v6 <= 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(_QWORD *)(a1 + 1616) - *(_QWORD *)(a1 + 1608)) >> 4))
    v6 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(_QWORD *)(a1 + 1616) - *(_QWORD *)(a1 + 1608)) >> 4);
  if (v6 <= 0x4FA4FA4FA4FA4FA5 * ((uint64_t)(*(_QWORD *)(a1 + 1640) - *(_QWORD *)(a1 + 1632)) >> 3))
    v6 = 0x4FA4FA4FA4FA4FA5 * ((uint64_t)(*(_QWORD *)(a1 + 1640) - *(_QWORD *)(a1 + 1632)) >> 3);
  if (v6 <= 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 1664) - *(_QWORD *)(a1 + 1656)) >> 4))
    v6 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 1664) - *(_QWORD *)(a1 + 1656)) >> 4);
  if (v6 <= 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 1688) - *(_QWORD *)(a1 + 1680)) >> 4))
    v6 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 1688) - *(_QWORD *)(a1 + 1680)) >> 4);
  if (v6 <= 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 1712) - *(_QWORD *)(a1 + 1704)) >> 4))
    v6 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 1712) - *(_QWORD *)(a1 + 1704)) >> 4);
  if (v6 <= 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 1736) - *(_QWORD *)(a1 + 1728)) >> 4))
    v6 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 1736) - *(_QWORD *)(a1 + 1728)) >> 4);
  if (v6 <= 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 1760) - *(_QWORD *)(a1 + 1752)) >> 4))
    v6 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 1760) - *(_QWORD *)(a1 + 1752)) >> 4);
  if (v6 <= 0x84BDA12F684BDA13 * ((uint64_t)(*(_QWORD *)(a1 + 1784) - *(_QWORD *)(a1 + 1776)) >> 3))
    v6 = 0x84BDA12F684BDA13 * ((uint64_t)(*(_QWORD *)(a1 + 1784) - *(_QWORD *)(a1 + 1776)) >> 3);
  if (v6 <= 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(_QWORD *)(a1 + 1808) - *(_QWORD *)(a1 + 1800)) >> 3))
    v6 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(_QWORD *)(a1 + 1808) - *(_QWORD *)(a1 + 1800)) >> 3);
  if (v6 <= 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 1832) - *(_QWORD *)(a1 + 1824)) >> 4))
    v6 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 1832) - *(_QWORD *)(a1 + 1824)) >> 4);
  if (v6 <= 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(_QWORD *)(a1 + 1856) - *(_QWORD *)(a1 + 1848)) >> 3))
    v6 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(_QWORD *)(a1 + 1856) - *(_QWORD *)(a1 + 1848)) >> 3);
  if (v6 >= 0x41)
  {
    if (v6 <= 0x80)
      v6 = 128;
    *(_QWORD *)&v216 = v6;
    v7 = (double *)operator new[]();
    if (v215 != (double *)v214 && v215)
      MEMORY[0x212BC6368]();
    v215 = v7;
  }
  v8 = *a2;
  *((_QWORD *)&v216 + 1) = 0;
  if (*(_BYTE *)(a1 + 3012))
  {
    v217 = a1 + 328;
    sub_20FBBDCEC((uint64_t)&v217, v214);
  }
  else
  {
    v217 = a1 + 328;
    sub_20FBBDF20((uint64_t)&v217, v214);
  }
  v9 = *((_QWORD *)&v216 + 1);
  if (*((_QWORD *)&v216 + 1))
  {
    v10 = *((_QWORD *)&v216 + 1) >> 1;
    sub_20E8FB210(v215, &v215[*((_QWORD *)&v216 + 1) >> 1], &v215[*((_QWORD *)&v216 + 1)]);
    v11 = v215;
    v12 = v215[v10];
    if ((v9 & 1) == 0)
    {
      v13 = v10 - 1;
      if (v13 != v9)
      {
        sub_20E8FB210(v215, &v215[v13], &v215[v9]);
        v11 = v215;
      }
      v12 = (v12 + v11[v13]) * 0.5;
    }
    v213 = v8 * sqrt(v12);
    *((_QWORD *)&v216 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
      goto LABEL_55;
  }
  else
  {
    v213 = 1.0;
    *((_QWORD *)&v216 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
    {
LABEL_55:
      v217 = a1 + 328;
      sub_20FBBE824((uint64_t)&v217, v214);
      goto LABEL_58;
    }
  }
  v217 = a1 + 328;
  sub_20FBBEA18((uint64_t)&v217, v214);
LABEL_58:
  v14 = *((_QWORD *)&v216 + 1);
  if (*((_QWORD *)&v216 + 1))
  {
    v15 = *((_QWORD *)&v216 + 1) >> 1;
    sub_20E8FB210(v215, &v215[*((_QWORD *)&v216 + 1) >> 1], &v215[*((_QWORD *)&v216 + 1)]);
    v16 = v215;
    v17 = v215[v15];
    if ((v14 & 1) == 0)
    {
      v18 = v15 - 1;
      if (v18 != v14)
      {
        sub_20E8FB210(v215, &v215[v18], &v215[v14]);
        v16 = v215;
      }
      v17 = (v17 + v16[v18]) * 0.5;
    }
    v212 = v8 * sqrt(v17);
    *((_QWORD *)&v216 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
      goto LABEL_64;
  }
  else
  {
    v212 = 1.0;
    *((_QWORD *)&v216 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
    {
LABEL_64:
      v217 = a1 + 328;
      sub_20FBBED9C((uint64_t)&v217, v214);
      goto LABEL_67;
    }
  }
  v217 = a1 + 328;
  sub_20FBBEF90((uint64_t)&v217, v214);
LABEL_67:
  v19 = *((_QWORD *)&v216 + 1);
  if (*((_QWORD *)&v216 + 1))
  {
    v20 = *((_QWORD *)&v216 + 1) >> 1;
    sub_20E8FB210(v215, &v215[*((_QWORD *)&v216 + 1) >> 1], &v215[*((_QWORD *)&v216 + 1)]);
    v21 = v215;
    v22 = v215[v20];
    if ((v19 & 1) == 0)
    {
      v23 = v20 - 1;
      if (v23 != v19)
      {
        sub_20E8FB210(v215, &v215[v23], &v215[v19]);
        v21 = v215;
      }
      v22 = (v22 + v21[v23]) * 0.5;
    }
    v211 = v8 * sqrt(v22);
    *((_QWORD *)&v216 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
      goto LABEL_73;
  }
  else
  {
    v211 = 1.0;
    *((_QWORD *)&v216 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
    {
LABEL_73:
      v217 = a1 + 328;
      sub_20FBBF314((uint64_t)&v217, v214);
      goto LABEL_76;
    }
  }
  v217 = a1 + 328;
  sub_20FBBF508((uint64_t)&v217, v214);
LABEL_76:
  v27 = *((_QWORD *)&v216 + 1);
  if (*((_QWORD *)&v216 + 1))
  {
    v28 = *((_QWORD *)&v216 + 1) >> 1;
    sub_20E8FB210(v215, &v215[*((_QWORD *)&v216 + 1) >> 1], &v215[*((_QWORD *)&v216 + 1)]);
    v29 = v215;
    v30 = v215[v28];
    if ((v27 & 1) == 0)
    {
      v31 = v28 - 1;
      if (v31 != v27)
      {
        sub_20E8FB210(v215, &v215[v31], &v215[v27]);
        v29 = v215;
      }
      v25 = 0.5;
      v30 = (v30 + v29[v31]) * 0.5;
    }
    v24.f64[0] = v8 * sqrt(v30);
    v210 = v24.f64[0];
    *((_QWORD *)&v216 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
      goto LABEL_82;
  }
  else
  {
    v24.f64[0] = 1.0;
    v210 = 1.0;
    *((_QWORD *)&v216 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
    {
LABEL_82:
      v217 = a1 + 328;
      sub_20FBBF88C((uint64_t)&v217, v214);
      goto LABEL_85;
    }
  }
  v217 = a1 + 328;
  sub_20FBBFA64((uint64_t)&v217, v214, v24, v25, v26);
LABEL_85:
  v32 = *((_QWORD *)&v216 + 1);
  if (*((_QWORD *)&v216 + 1))
  {
    v33 = *((_QWORD *)&v216 + 1) >> 1;
    sub_20E8FB210(v215, &v215[*((_QWORD *)&v216 + 1) >> 1], &v215[*((_QWORD *)&v216 + 1)]);
    v34 = v215;
    v35 = v215[v33];
    if ((v32 & 1) == 0)
    {
      v36 = v33 - 1;
      if (v36 != v32)
      {
        sub_20E8FB210(v215, &v215[v36], &v215[v32]);
        v34 = v215;
      }
      v35 = (v35 + v34[v36]) * 0.5;
    }
    v209 = v8 * sqrt(v35);
    *((_QWORD *)&v216 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
      goto LABEL_91;
  }
  else
  {
    v209 = 1.0;
    *((_QWORD *)&v216 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
    {
LABEL_91:
      v217 = a1 + 328;
      sub_20FBBFCCC((uint64_t)&v217, v214);
      goto LABEL_94;
    }
  }
  v217 = a1 + 328;
  sub_20FBBFF14((uint64_t)&v217, v214);
LABEL_94:
  v43 = *((_QWORD *)&v216 + 1);
  if (*((_QWORD *)&v216 + 1))
  {
    v44 = *((_QWORD *)&v216 + 1) >> 1;
    sub_20E8FB210(v215, &v215[*((_QWORD *)&v216 + 1) >> 1], &v215[*((_QWORD *)&v216 + 1)]);
    v45 = v215;
    v46 = v215[v44];
    if ((v43 & 1) == 0)
    {
      v47 = v44 - 1;
      if (v47 != v43)
      {
        sub_20E8FB210(v215, &v215[v47], &v215[v43]);
        v45 = v215;
      }
      v37 = 0.5;
      v46 = (v46 + v45[v47]) * 0.5;
    }
    v48 = v8 * sqrt(v46);
    v208 = v48;
    *((_QWORD *)&v216 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
      goto LABEL_100;
  }
  else
  {
    v48 = 1.0;
    v208 = 1.0;
    *((_QWORD *)&v216 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
    {
LABEL_100:
      v217 = a1 + 328;
      sub_20FBC01D4((uint64_t)&v217, v214);
      goto LABEL_103;
    }
  }
  v217 = a1 + 328;
  sub_20FBC041C((uint64_t)&v217, v214, v48, v37, v38, v39, v40, v41, v42);
LABEL_103:
  v52 = *((_QWORD *)&v216 + 1);
  if (*((_QWORD *)&v216 + 1))
  {
    v53 = *((_QWORD *)&v216 + 1) >> 1;
    sub_20E8FB210(v215, &v215[*((_QWORD *)&v216 + 1) >> 1], &v215[*((_QWORD *)&v216 + 1)]);
    v54 = v215;
    v55 = v215[v53];
    if ((v52 & 1) == 0)
    {
      v56 = v53 - 1;
      if (v56 != v52)
      {
        sub_20E8FB210(v215, &v215[v56], &v215[v52]);
        v54 = v215;
      }
      v49.f64[0] = 0.5;
      v55 = (v55 + v54[v56]) * 0.5;
    }
    v57 = v8 * sqrt(v55);
    v207 = v57;
    *((_QWORD *)&v216 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
      goto LABEL_109;
  }
  else
  {
    v57 = 1.0;
    v207 = 1.0;
    *((_QWORD *)&v216 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
    {
LABEL_109:
      v217 = a1 + 328;
      sub_20FBC08C8((uint64_t)&v217, v214);
      goto LABEL_112;
    }
  }
  v217 = a1 + 328;
  sub_20FBC0AA8((uint64_t)&v217, v214, v57, v49, v50, v51);
LABEL_112:
  v60 = *((_QWORD *)&v216 + 1);
  if (*((_QWORD *)&v216 + 1))
  {
    v61 = *((_QWORD *)&v216 + 1) >> 1;
    sub_20E8FB210(v215, &v215[*((_QWORD *)&v216 + 1) >> 1], &v215[*((_QWORD *)&v216 + 1)]);
    v62 = v215;
    v63 = v215[v61];
    if ((v60 & 1) == 0)
    {
      v64 = v61 - 1;
      if (v64 != v60)
      {
        sub_20E8FB210(v215, &v215[v64], &v215[v60]);
        v62 = v215;
      }
      v59.f64[0] = 0.5;
      v63 = (v63 + v62[v64]) * 0.5;
    }
    v58.f64[0] = v8 * sqrt(v63);
    v206 = v58.f64[0];
    *((_QWORD *)&v216 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
      goto LABEL_118;
  }
  else
  {
    v58.f64[0] = 1.0;
    v206 = 1.0;
    *((_QWORD *)&v216 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
    {
LABEL_118:
      v217 = a1 + 328;
      sub_20FBC0D10((uint64_t)&v217, v214);
      goto LABEL_121;
    }
  }
  v217 = a1 + 328;
  sub_20FBC0EF0((uint64_t)&v217, v214, v58, v59);
LABEL_121:
  v65 = *((_QWORD *)&v216 + 1);
  if (*((_QWORD *)&v216 + 1))
  {
    v66 = *((_QWORD *)&v216 + 1) >> 1;
    sub_20E8FB210(v215, &v215[*((_QWORD *)&v216 + 1) >> 1], &v215[*((_QWORD *)&v216 + 1)]);
    v67 = v215;
    v68 = v215[v66];
    if ((v65 & 1) == 0)
    {
      v69 = v66 - 1;
      if (v69 != v65)
      {
        sub_20E8FB210(v215, &v215[v69], &v215[v65]);
        v67 = v215;
      }
      v68 = (v68 + v67[v69]) * 0.5;
    }
    v205 = v8 * sqrt(v68);
    *((_QWORD *)&v216 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
      goto LABEL_127;
  }
  else
  {
    v205 = 1.0;
    *((_QWORD *)&v216 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
    {
LABEL_127:
      v217 = a1 + 328;
      sub_20FBC1168((uint64_t)&v217, v214);
      goto LABEL_130;
    }
  }
  v217 = a1 + 328;
  sub_20FBC1340((uint64_t)&v217, v214);
LABEL_130:
  v78 = *((_QWORD *)&v216 + 1);
  if (*((_QWORD *)&v216 + 1))
  {
    v79 = *((_QWORD *)&v216 + 1) >> 1;
    sub_20E8FB210(v215, &v215[*((_QWORD *)&v216 + 1) >> 1], &v215[*((_QWORD *)&v216 + 1)]);
    v80 = v215;
    v81 = v215[v79];
    if ((v78 & 1) == 0)
    {
      v82 = v79 - 1;
      if (v82 != v78)
      {
        sub_20E8FB210(v215, &v215[v82], &v215[v78]);
        v80 = v215;
      }
      v71.n128_u64[0] = 0.5;
      v81 = (v81 + v80[v82]) * 0.5;
    }
    v70.n128_f64[0] = v8 * sqrt(v81);
    v204 = v70.n128_f64[0];
    *((_QWORD *)&v216 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
      goto LABEL_136;
  }
  else
  {
    v70.n128_u64[0] = 1.0;
    v204 = 1.0;
    *((_QWORD *)&v216 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
    {
LABEL_136:
      v217 = a1 + 328;
      sub_20FBC1578((uint64_t)&v217, v214);
      goto LABEL_139;
    }
  }
  v217 = a1 + 328;
  sub_20FBC1768((uint64_t)&v217, v214, v70, v71, v72, v73, v74, v75, v76, v77);
LABEL_139:
  v83 = *((_QWORD *)&v216 + 1);
  if (*((_QWORD *)&v216 + 1))
  {
    v84 = *((_QWORD *)&v216 + 1) >> 1;
    sub_20E8FB210(v215, &v215[*((_QWORD *)&v216 + 1) >> 1], &v215[*((_QWORD *)&v216 + 1)]);
    v85 = v215;
    v86 = v215[v84];
    if ((v83 & 1) == 0)
    {
      v87 = v84 - 1;
      if (v87 != v83)
      {
        sub_20E8FB210(v215, &v215[v87], &v215[v83]);
        v85 = v215;
      }
      v86 = (v86 + v85[v87]) * 0.5;
    }
    v203 = v8 * sqrt(v86);
    *((_QWORD *)&v216 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
      goto LABEL_145;
  }
  else
  {
    v203 = 1.0;
    *((_QWORD *)&v216 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
    {
LABEL_145:
      v217 = a1 + 328;
      sub_20FBC19A0((uint64_t)&v217, v214);
      goto LABEL_148;
    }
  }
  v217 = a1 + 328;
  sub_20FBC1B70((uint64_t)&v217, v214);
LABEL_148:
  v88 = *((_QWORD *)&v216 + 1);
  if (*((_QWORD *)&v216 + 1))
  {
    v89 = *((_QWORD *)&v216 + 1) >> 1;
    sub_20E8FB210(v215, &v215[*((_QWORD *)&v216 + 1) >> 1], &v215[*((_QWORD *)&v216 + 1)]);
    v90 = v215;
    v91 = v215[v89];
    if ((v88 & 1) == 0)
    {
      v92 = v89 - 1;
      if (v92 != v88)
      {
        sub_20E8FB210(v215, &v215[v92], &v215[v88]);
        v90 = v215;
      }
      v91 = (v91 + v90[v92]) * 0.5;
    }
    v202 = v8 * sqrt(v91);
    *((_QWORD *)&v216 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
      goto LABEL_154;
  }
  else
  {
    v202 = 1.0;
    *((_QWORD *)&v216 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
    {
LABEL_154:
      v217 = a1 + 328;
      sub_20FBC1DA0((uint64_t)&v217, v214);
      goto LABEL_157;
    }
  }
  v217 = a1 + 328;
  sub_20FBC1F88((uint64_t)&v217, v214);
LABEL_157:
  v93 = *((_QWORD *)&v216 + 1);
  if (*((_QWORD *)&v216 + 1))
  {
    v94 = *((_QWORD *)&v216 + 1) >> 1;
    sub_20E8FB210(v215, &v215[*((_QWORD *)&v216 + 1) >> 1], &v215[*((_QWORD *)&v216 + 1)]);
    v95 = v215;
    v96 = v215[v94];
    if ((v93 & 1) == 0)
    {
      v97 = v94 - 1;
      if (v97 != v93)
      {
        sub_20E8FB210(v215, &v215[v97], &v215[v93]);
        v95 = v215;
      }
      v96 = (v96 + v95[v97]) * 0.5;
    }
    v201 = v8 * sqrt(v96);
    *((_QWORD *)&v216 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
      goto LABEL_163;
  }
  else
  {
    v201 = 1.0;
    *((_QWORD *)&v216 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
    {
LABEL_163:
      v217 = a1 + 328;
      sub_20FBC21E0((uint64_t)&v217, v214);
      goto LABEL_166;
    }
  }
  v217 = a1 + 328;
  sub_20FBC23C8((uint64_t)&v217, v214);
LABEL_166:
  v98 = *((_QWORD *)&v216 + 1);
  if (*((_QWORD *)&v216 + 1))
  {
    v99 = *((_QWORD *)&v216 + 1) >> 1;
    sub_20E8FB210(v215, &v215[*((_QWORD *)&v216 + 1) >> 1], &v215[*((_QWORD *)&v216 + 1)]);
    v100 = v215;
    v101 = v215[v99];
    if ((v98 & 1) == 0)
    {
      v102 = v99 - 1;
      if (v102 != v98)
      {
        sub_20E8FB210(v215, &v215[v102], &v215[v98]);
        v100 = v215;
      }
      v101 = (v101 + v100[v102]) * 0.5;
    }
    v103 = v8 * sqrt(v101);
    *((_QWORD *)&v216 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
      goto LABEL_172;
  }
  else
  {
    v103 = 1.0;
    *((_QWORD *)&v216 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
    {
LABEL_172:
      v217 = a1 + 328;
      sub_20FBC2620((uint64_t)&v217, v214);
      goto LABEL_175;
    }
  }
  v217 = a1 + 328;
  sub_20FBC2800((uint64_t)&v217, v214);
LABEL_175:
  v107 = *((_QWORD *)&v216 + 1);
  if (*((_QWORD *)&v216 + 1))
  {
    v108 = *((_QWORD *)&v216 + 1) >> 1;
    sub_20E8FB210(v215, &v215[*((_QWORD *)&v216 + 1) >> 1], &v215[*((_QWORD *)&v216 + 1)]);
    v109 = v215;
    v110 = v215[v108];
    if ((v107 & 1) == 0)
    {
      v111 = v108 - 1;
      if (v111 != v107)
      {
        sub_20E8FB210(v215, &v215[v111], &v215[v107]);
        v109 = v215;
      }
      v105 = 0.5;
      v110 = (v110 + v109[v111]) * 0.5;
    }
    v104.f64[0] = sqrt(v110);
    v112 = v8 * v104.f64[0];
    *((_QWORD *)&v216 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
      goto LABEL_181;
  }
  else
  {
    v112 = 1.0;
    *((_QWORD *)&v216 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
    {
LABEL_181:
      v217 = a1 + 328;
      sub_20FBC2C3C((uint64_t)&v217, v214);
      goto LABEL_184;
    }
  }
  v217 = a1 + 328;
  sub_20FBC2E1C((uint64_t)&v217, v214, v104, v105, v106);
LABEL_184:
  v121 = *((_QWORD *)&v216 + 1);
  if (*((_QWORD *)&v216 + 1))
  {
    v122 = *((_QWORD *)&v216 + 1) >> 1;
    sub_20E8FB210(v215, &v215[*((_QWORD *)&v216 + 1) >> 1], &v215[*((_QWORD *)&v216 + 1)]);
    v123 = v215;
    v124 = v215[v122];
    if ((v121 & 1) == 0)
    {
      v125 = v122 - 1;
      if (v125 != v121)
      {
        sub_20E8FB210(v215, &v215[v125], &v215[v121]);
        v123 = v215;
      }
      v114.n128_u64[0] = 0.5;
      v124 = (v124 + v123[v125]) * 0.5;
    }
    v113.n128_f64[0] = sqrt(v124);
    v126 = v8 * v113.n128_f64[0];
    *((_QWORD *)&v216 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
      goto LABEL_190;
  }
  else
  {
    v126 = 1.0;
    *((_QWORD *)&v216 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
    {
LABEL_190:
      v217 = a1 + 328;
      sub_20FBC308C((uint64_t)&v217, v214);
      goto LABEL_193;
    }
  }
  v217 = a1 + 328;
  sub_20FBC3264((uint64_t)&v217, v214, v113, v114, v115, v116, v117, v118, v119, v120);
LABEL_193:
  v135 = *((_QWORD *)&v216 + 1);
  if (*((_QWORD *)&v216 + 1))
  {
    v136 = *((_QWORD *)&v216 + 1) >> 1;
    sub_20E8FB210(v215, &v215[*((_QWORD *)&v216 + 1) >> 1], &v215[*((_QWORD *)&v216 + 1)]);
    v137 = v215;
    v138 = v215[v136];
    if ((v135 & 1) == 0)
    {
      v139 = v136 - 1;
      if (v139 != v135)
      {
        sub_20E8FB210(v215, &v215[v139], &v215[v135]);
        v137 = v215;
      }
      v128.n128_u64[0] = 0.5;
      v138 = (v138 + v137[v139]) * 0.5;
    }
    v127.n128_f64[0] = sqrt(v138);
    v140 = v8 * v127.n128_f64[0];
    *((_QWORD *)&v216 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
      goto LABEL_199;
  }
  else
  {
    v140 = 1.0;
    *((_QWORD *)&v216 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
    {
LABEL_199:
      v217 = a1 + 328;
      sub_20FBC348C((uint64_t)&v217, v214);
      goto LABEL_202;
    }
  }
  v217 = a1 + 328;
  sub_20FBC3664((uint64_t)&v217, v214, v127, v128, v129, v130, v131, v132, v133, v134);
LABEL_202:
  v149 = *((_QWORD *)&v216 + 1);
  if (*((_QWORD *)&v216 + 1))
  {
    v150 = *((_QWORD *)&v216 + 1) >> 1;
    sub_20E8FB210(v215, &v215[*((_QWORD *)&v216 + 1) >> 1], &v215[*((_QWORD *)&v216 + 1)]);
    v151 = v215;
    v152 = v215[v150];
    if ((v149 & 1) == 0)
    {
      v153 = v150 - 1;
      if (v153 != v149)
      {
        sub_20E8FB210(v215, &v215[v153], &v215[v149]);
        v151 = v215;
      }
      v142.n128_u64[0] = 0.5;
      v152 = (v152 + v151[v153]) * 0.5;
    }
    v141.n128_f64[0] = sqrt(v152);
    v154 = v8 * v141.n128_f64[0];
    *((_QWORD *)&v216 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
      goto LABEL_208;
  }
  else
  {
    v154 = 1.0;
    *((_QWORD *)&v216 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
    {
LABEL_208:
      v217 = a1 + 328;
      sub_20FBC388C((uint64_t)&v217, v214);
      goto LABEL_211;
    }
  }
  v217 = a1 + 328;
  sub_20FBC3A5C((uint64_t)&v217, v214, v141, v142, v143, v144, v145, v146, v147, v148);
LABEL_211:
  v163 = *((_QWORD *)&v216 + 1);
  if (*((_QWORD *)&v216 + 1))
  {
    v164 = *((_QWORD *)&v216 + 1) >> 1;
    sub_20E8FB210(v215, &v215[*((_QWORD *)&v216 + 1) >> 1], &v215[*((_QWORD *)&v216 + 1)]);
    v165 = v215;
    v166 = v215[v164];
    if ((v163 & 1) == 0)
    {
      v167 = v164 - 1;
      if (v167 != v163)
      {
        sub_20E8FB210(v215, &v215[v167], &v215[v163]);
        v165 = v215;
      }
      v156.n128_u64[0] = 0.5;
      v166 = (v166 + v165[v167]) * 0.5;
    }
    v155.n128_f64[0] = sqrt(v166);
    v168 = v8 * v155.n128_f64[0];
    *((_QWORD *)&v216 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
      goto LABEL_217;
  }
  else
  {
    v168 = 1.0;
    *((_QWORD *)&v216 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
    {
LABEL_217:
      v217 = a1 + 328;
      sub_20FBC3C7C((uint64_t)&v217, v214);
      goto LABEL_220;
    }
  }
  v217 = a1 + 328;
  sub_20FBC3E54((uint64_t)&v217, v214, v155, v156, v157, v158, v159, v160, v161, v162);
LABEL_220:
  v169 = *((_QWORD *)&v216 + 1);
  result = v215;
  if (!*((_QWORD *)&v216 + 1))
  {
    v174 = 1.0;
    *((_QWORD *)&v216 + 1) = 0;
    v175 = v213;
    if (v215 == (double *)v214)
      goto LABEL_230;
    goto LABEL_228;
  }
  v171 = *((_QWORD *)&v216 + 1) >> 1;
  sub_20E8FB210(v215, &v215[*((_QWORD *)&v216 + 1) >> 1], &v215[*((_QWORD *)&v216 + 1)]);
  result = v215;
  v172 = v215[v171];
  if ((v169 & 1) == 0)
  {
    v173 = v171 - 1;
    if (v173 != v169)
    {
      sub_20E8FB210(v215, &v215[v173], &v215[v169]);
      result = v215;
    }
    v172 = (v172 + result[v173]) * 0.5;
  }
  v174 = v8 * sqrt(v172);
  *((_QWORD *)&v216 + 1) = 0;
  v175 = v213;
  if (result != (double *)v214)
  {
LABEL_228:
    if (result)
      result = (double *)MEMORY[0x212BC6368](result, 0x1000C8000313F17);
  }
LABEL_230:
  if ((a3 & 1) == 0)
  {
    v182 = 1.0e20;
    v181 = 1.0e-10;
    if (v175 > 0.0)
    {
      *(double *)(a1 + 8) = v175;
      *(double *)(a1 + 16) = 1.0 / (v175 * v175);
      v183 = v212;
      if (v212 <= 0.0)
      {
LABEL_234:
        *(_QWORD *)(a1 + 24) = 0x3DDB7CDFD9D7BDBBLL;
        *(_QWORD *)(a1 + 32) = 0x4415AF1D78B58C3FLL;
        v184 = v211;
        v185 = 0x3DDB7CDFD9D7BDBBLL;
        v186 = 1.0e20;
        if (v211 <= 0.0)
          goto LABEL_236;
        goto LABEL_235;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 8) = 0x3DDB7CDFD9D7BDBBLL;
      *(_QWORD *)(a1 + 16) = 0x4415AF1D78B58C3FLL;
      v183 = v212;
      if (v212 <= 0.0)
        goto LABEL_234;
    }
    *(double *)(a1 + 24) = v183;
    *(double *)(a1 + 32) = 1.0 / (v183 * v183);
    v184 = v211;
    v185 = 0x3DDB7CDFD9D7BDBBLL;
    v186 = 1.0e20;
    if (v211 <= 0.0)
    {
LABEL_236:
      *(_QWORD *)(a1 + 40) = v185;
      *(double *)(a1 + 48) = v186;
      v187 = 0x3DDB7CDFD9D7BDBBLL;
      v188 = 1.0e20;
      *(_DWORD *)(a1 + 3008) = 0;
      if (v210 > 0.0)
      {
        v187 = *(_QWORD *)&v210;
        v188 = 1.0 / (v210 * v210);
      }
      *(_QWORD *)(a1 + 56) = v187;
      *(double *)(a1 + 64) = v188;
      v189 = 0x3DDB7CDFD9D7BDBBLL;
      v190 = 1.0e20;
      if (v209 > 0.0)
      {
        v189 = *(_QWORD *)&v209;
        v190 = 1.0 / (v209 * v209);
      }
      *(_QWORD *)(a1 + 72) = v189;
      *(double *)(a1 + 80) = v190;
      *(_BYTE *)(a1 + 3013) = 0;
      if (v208 > 0.0)
      {
        *(double *)(a1 + 88) = v208;
        *(double *)(a1 + 96) = 1.0 / (v208 * v208);
        v191 = v207;
        if (v207 <= 0.0)
        {
LABEL_242:
          *(_QWORD *)(a1 + 104) = 0x3DDB7CDFD9D7BDBBLL;
          *(_QWORD *)(a1 + 112) = 0x4415AF1D78B58C3FLL;
          v192 = v206;
          if (v206 <= 0.0)
            goto LABEL_243;
          goto LABEL_265;
        }
      }
      else
      {
        *(_QWORD *)(a1 + 88) = 0x3DDB7CDFD9D7BDBBLL;
        *(_QWORD *)(a1 + 96) = 0x4415AF1D78B58C3FLL;
        v191 = v207;
        if (v207 <= 0.0)
          goto LABEL_242;
      }
      *(double *)(a1 + 104) = v191;
      *(double *)(a1 + 112) = 1.0 / (v191 * v191);
      v192 = v206;
      if (v206 <= 0.0)
      {
LABEL_243:
        *(_QWORD *)(a1 + 120) = 0x3DDB7CDFD9D7BDBBLL;
        *(_QWORD *)(a1 + 128) = 0x4415AF1D78B58C3FLL;
        v193 = v205;
        v194 = 0x3DDB7CDFD9D7BDBBLL;
        v195 = 1.0e20;
        if (v205 <= 0.0)
          goto LABEL_245;
        goto LABEL_244;
      }
LABEL_265:
      *(double *)(a1 + 120) = v192;
      *(double *)(a1 + 128) = 1.0 / (v192 * v192);
      v193 = v205;
      v194 = 0x3DDB7CDFD9D7BDBBLL;
      v195 = 1.0e20;
      if (v205 <= 0.0)
      {
LABEL_245:
        *(_QWORD *)(a1 + 136) = v194;
        *(double *)(a1 + 144) = v195;
        v196 = 0x3DDB7CDFD9D7BDBBLL;
        v197 = 1.0e20;
        *(_DWORD *)(a1 + 3008) = 0;
        if (v204 > 0.0)
        {
          v196 = *(_QWORD *)&v204;
          v197 = 1.0 / (v204 * v204);
        }
        *(_QWORD *)(a1 + 152) = v196;
        *(double *)(a1 + 160) = v197;
        v198 = 0x3DDB7CDFD9D7BDBBLL;
        v199 = 1.0e20;
        if (v203 > 0.0)
        {
          v198 = *(_QWORD *)&v203;
          v199 = 1.0 / (v203 * v203);
        }
        *(_QWORD *)(a1 + 168) = v198;
        *(double *)(a1 + 176) = v199;
        *(_BYTE *)(a1 + 3013) = 0;
        if (v202 > 0.0)
        {
          *(double *)(a1 + 184) = v202;
          *(double *)(a1 + 192) = 1.0 / (v202 * v202);
          v200 = v201;
          if (v201 <= 0.0)
          {
LABEL_251:
            *(_QWORD *)(a1 + 200) = 0x3DDB7CDFD9D7BDBBLL;
            *(_QWORD *)(a1 + 208) = 0x4415AF1D78B58C3FLL;
            if (v103 <= 0.0)
              goto LABEL_252;
            goto LABEL_269;
          }
        }
        else
        {
          *(_QWORD *)(a1 + 184) = 0x3DDB7CDFD9D7BDBBLL;
          *(_QWORD *)(a1 + 192) = 0x4415AF1D78B58C3FLL;
          v200 = v201;
          if (v201 <= 0.0)
            goto LABEL_251;
        }
        *(double *)(a1 + 200) = v200;
        *(double *)(a1 + 208) = 1.0 / (v200 * v200);
        if (v103 <= 0.0)
        {
LABEL_252:
          *(_QWORD *)(a1 + 216) = 0x3DDB7CDFD9D7BDBBLL;
          *(_QWORD *)(a1 + 224) = 0x4415AF1D78B58C3FLL;
          if (v112 <= 0.0)
            goto LABEL_253;
          goto LABEL_270;
        }
LABEL_269:
        *(double *)(a1 + 216) = v103;
        *(double *)(a1 + 224) = 1.0 / (v103 * v103);
        if (v112 <= 0.0)
        {
LABEL_253:
          *(_QWORD *)(a1 + 232) = 0x3DDB7CDFD9D7BDBBLL;
          *(_QWORD *)(a1 + 240) = 0x4415AF1D78B58C3FLL;
          *(_DWORD *)(a1 + 3008) = 0;
          if (v126 <= 0.0)
            goto LABEL_254;
          goto LABEL_271;
        }
LABEL_270:
        *(double *)(a1 + 232) = v112;
        *(double *)(a1 + 240) = 1.0 / (v112 * v112);
        *(_DWORD *)(a1 + 3008) = 0;
        if (v126 <= 0.0)
        {
LABEL_254:
          *(_QWORD *)(a1 + 248) = 0x3DDB7CDFD9D7BDBBLL;
          *(_QWORD *)(a1 + 256) = 0x4415AF1D78B58C3FLL;
          *(_BYTE *)(a1 + 3013) = 0;
          if (v140 <= 0.0)
            goto LABEL_255;
          goto LABEL_272;
        }
LABEL_271:
        *(double *)(a1 + 248) = v126;
        *(double *)(a1 + 256) = 1.0 / (v126 * v126);
        *(_BYTE *)(a1 + 3013) = 0;
        if (v140 <= 0.0)
        {
LABEL_255:
          *(_QWORD *)(a1 + 264) = 0x3DDB7CDFD9D7BDBBLL;
          *(_QWORD *)(a1 + 272) = 0x4415AF1D78B58C3FLL;
          if (v154 <= 0.0)
            goto LABEL_256;
          goto LABEL_273;
        }
LABEL_272:
        *(double *)(a1 + 264) = v140;
        *(double *)(a1 + 272) = 1.0 / (v140 * v140);
        if (v154 <= 0.0)
        {
LABEL_256:
          *(_QWORD *)(a1 + 280) = 0x3DDB7CDFD9D7BDBBLL;
          *(_QWORD *)(a1 + 288) = 0x4415AF1D78B58C3FLL;
          if (v168 <= 0.0)
            goto LABEL_257;
          goto LABEL_274;
        }
LABEL_273:
        *(double *)(a1 + 280) = v154;
        *(double *)(a1 + 288) = 1.0 / (v154 * v154);
        if (v168 <= 0.0)
        {
LABEL_257:
          *(_QWORD *)(a1 + 296) = 0x3DDB7CDFD9D7BDBBLL;
          *(_QWORD *)(a1 + 304) = 0x4415AF1D78B58C3FLL;
          if (v174 <= 0.0)
            goto LABEL_259;
LABEL_258:
          v181 = v174;
          v182 = 1.0 / (v174 * v174);
          goto LABEL_259;
        }
LABEL_274:
        *(double *)(a1 + 296) = v168;
        *(double *)(a1 + 304) = 1.0 / (v168 * v168);
        if (v174 <= 0.0)
          goto LABEL_259;
        goto LABEL_258;
      }
LABEL_244:
      v194 = *(_QWORD *)&v193;
      v195 = 1.0 / (v193 * v193);
      goto LABEL_245;
    }
LABEL_235:
    v185 = *(_QWORD *)&v184;
    v186 = 1.0 / (v184 * v184);
    goto LABEL_236;
  }
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(a1 + 8) = _Q0;
  *(_OWORD *)(a1 + 24) = _Q0;
  *(_OWORD *)(a1 + 40) = _Q0;
  *(_OWORD *)(a1 + 56) = _Q0;
  *(_OWORD *)(a1 + 72) = _Q0;
  *(_OWORD *)(a1 + 88) = _Q0;
  *(_OWORD *)(a1 + 104) = _Q0;
  *(_OWORD *)(a1 + 120) = _Q0;
  *(_OWORD *)(a1 + 136) = _Q0;
  *(_OWORD *)(a1 + 152) = _Q0;
  *(_OWORD *)(a1 + 168) = _Q0;
  *(_OWORD *)(a1 + 184) = _Q0;
  *(_OWORD *)(a1 + 200) = _Q0;
  *(_OWORD *)(a1 + 216) = _Q0;
  *(_OWORD *)(a1 + 232) = _Q0;
  *(_OWORD *)(a1 + 248) = _Q0;
  *(_DWORD *)(a1 + 3008) = 0;
  *(_QWORD *)(a1 + 264) = 0x3FF0000000000000;
  *(_BYTE *)(a1 + 3013) = 0;
  *(_OWORD *)(a1 + 272) = _Q0;
  *(_OWORD *)(a1 + 288) = _Q0;
  v181 = 1.0;
  v182 = 1.0;
  *(_QWORD *)(a1 + 304) = 0x3FF0000000000000;
LABEL_259:
  *(double *)(a1 + 312) = v181;
  *(double *)(a1 + 320) = v182;
  *(_BYTE *)(a1 + 3013) = 0;
  *(_DWORD *)(a1 + 3008) = 0;
  return result;
}

void sub_20FBB5F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  unint64_t v24;

  STACK[0x280] = 0;
  v24 = STACK[0x270];
  if ((char *)STACK[0x270] != &a23)
  {
    if (v24)
      MEMORY[0x212BC6368](v24, 0x1000C8000313F17);
  }
  _Unwind_Resume(a1);
}

double *sub_20FBB5F4C(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v6;
  double *v7;
  uint64_t v8;
  uint64_t v9;
  double *v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double *v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double *v20;
  double v21;
  uint64_t v22;
  float64x2_t v23;
  double v24;
  float64x2_t v25;
  uint64_t v26;
  uint64_t v27;
  double *v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double *v33;
  double v34;
  uint64_t v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  float64x2_t v41;
  uint64_t v42;
  uint64_t v43;
  double *v44;
  double v45;
  uint64_t v46;
  double v47;
  float64x2_t v48;
  double v49;
  float64x2_t v50;
  uint64_t v51;
  uint64_t v52;
  double *v53;
  double v54;
  uint64_t v55;
  double v56;
  float64x2_t v57;
  float64x2_t v58;
  uint64_t v59;
  uint64_t v60;
  double *v61;
  double v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  double *v66;
  double v67;
  uint64_t v68;
  __n128 v69;
  __n128 v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  float64x2_t v76;
  uint64_t v77;
  uint64_t v78;
  double *v79;
  double v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  double *v84;
  double v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  double *v89;
  double v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  double *v94;
  double v95;
  uint64_t v96;
  double v97;
  uint64_t v98;
  uint64_t v99;
  double *v100;
  double v101;
  uint64_t v102;
  double v103;
  float64x2_t v104;
  double v105;
  float64x2_t v106;
  uint64_t v107;
  uint64_t v108;
  double *v109;
  double v110;
  uint64_t v111;
  double v112;
  __n128 v113;
  __n128 v114;
  double v115;
  double v116;
  float64x2_t v117;
  double v118;
  double v119;
  float64x2_t v120;
  uint64_t v121;
  uint64_t v122;
  double *v123;
  double v124;
  uint64_t v125;
  double v126;
  __n128 v127;
  __n128 v128;
  double v129;
  double v130;
  double v131;
  float64x2_t v132;
  double v133;
  float64x2_t v134;
  uint64_t v135;
  uint64_t v136;
  double *v137;
  double v138;
  uint64_t v139;
  double v140;
  __n128 v141;
  __n128 v142;
  double v143;
  double v144;
  float64x2_t v145;
  double v146;
  double v147;
  float64x2_t v148;
  uint64_t v149;
  uint64_t v150;
  double *v151;
  double v152;
  uint64_t v153;
  double v154;
  __n128 v155;
  __n128 v156;
  double v157;
  double v158;
  float64x2_t v159;
  double v160;
  double v161;
  float64x2_t v162;
  uint64_t v163;
  uint64_t v164;
  double *v165;
  double v166;
  uint64_t v167;
  double v168;
  uint64_t v169;
  double *result;
  uint64_t v171;
  double v172;
  uint64_t v173;
  double v174;
  double v180;
  double v181;
  double v182;
  double v183;
  uint64_t v184;
  double v185;
  uint64_t v186;
  double v187;
  uint64_t v188;
  double v189;
  double v190;
  double v191;
  double v192;
  uint64_t v193;
  double v194;
  uint64_t v195;
  double v196;
  uint64_t v197;
  double v198;
  double v199;
  double v200;
  double v201;
  double v202;
  double v203;
  double v204;
  double v205;
  double v206;
  double v207;
  double v208;
  double v209;
  double v210;
  _QWORD v211[64];
  double *v212;
  __int128 v213;
  uint64_t v214;

  v212 = (double *)v211;
  v213 = xmmword_210378040;
  v6 = 0xEFBEFBEFBEFBEFBFLL * ((uint64_t)(*(_QWORD *)(a1 + 1400) - *(_QWORD *)(a1 + 1392)) >> 3);
  if (v6 <= 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(_QWORD *)(a1 + 1424) - *(_QWORD *)(a1 + 1416)) >> 3))
    v6 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(_QWORD *)(a1 + 1424) - *(_QWORD *)(a1 + 1416)) >> 3);
  if (v6 <= 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(_QWORD *)(a1 + 1448) - *(_QWORD *)(a1 + 1440)) >> 3))
    v6 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(_QWORD *)(a1 + 1448) - *(_QWORD *)(a1 + 1440)) >> 3);
  if (v6 <= 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(_QWORD *)(a1 + 1472) - *(_QWORD *)(a1 + 1464)) >> 3))
    v6 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(_QWORD *)(a1 + 1472) - *(_QWORD *)(a1 + 1464)) >> 3);
  if (v6 <= 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 1496) - *(_QWORD *)(a1 + 1488)) >> 5))
    v6 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 1496) - *(_QWORD *)(a1 + 1488)) >> 5);
  if (v6 <= 0x97A3FE4BD1FF25E9 * ((uint64_t)(*(_QWORD *)(a1 + 1520) - *(_QWORD *)(a1 + 1512)) >> 4))
    v6 = 0x97A3FE4BD1FF25E9 * ((uint64_t)(*(_QWORD *)(a1 + 1520) - *(_QWORD *)(a1 + 1512)) >> 4);
  if (v6 <= 0x4515E08719B71393 * ((uint64_t)(*(_QWORD *)(a1 + 1544) - *(_QWORD *)(a1 + 1536)) >> 3))
    v6 = 0x4515E08719B71393 * ((uint64_t)(*(_QWORD *)(a1 + 1544) - *(_QWORD *)(a1 + 1536)) >> 3);
  if (v6 <= 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 1568) - *(_QWORD *)(a1 + 1560)) >> 4))
    v6 = 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 1568) - *(_QWORD *)(a1 + 1560)) >> 4);
  if (v6 <= 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(_QWORD *)(a1 + 1592) - *(_QWORD *)(a1 + 1584)) >> 3))
    v6 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(_QWORD *)(a1 + 1592) - *(_QWORD *)(a1 + 1584)) >> 3);
  if (v6 <= 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(_QWORD *)(a1 + 1616) - *(_QWORD *)(a1 + 1608)) >> 4))
    v6 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(_QWORD *)(a1 + 1616) - *(_QWORD *)(a1 + 1608)) >> 4);
  if (v6 <= 0x4FA4FA4FA4FA4FA5 * ((uint64_t)(*(_QWORD *)(a1 + 1640) - *(_QWORD *)(a1 + 1632)) >> 3))
    v6 = 0x4FA4FA4FA4FA4FA5 * ((uint64_t)(*(_QWORD *)(a1 + 1640) - *(_QWORD *)(a1 + 1632)) >> 3);
  if (v6 <= 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 1664) - *(_QWORD *)(a1 + 1656)) >> 4))
    v6 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 1664) - *(_QWORD *)(a1 + 1656)) >> 4);
  if (v6 <= 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 1688) - *(_QWORD *)(a1 + 1680)) >> 4))
    v6 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 1688) - *(_QWORD *)(a1 + 1680)) >> 4);
  if (v6 <= 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 1712) - *(_QWORD *)(a1 + 1704)) >> 4))
    v6 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 1712) - *(_QWORD *)(a1 + 1704)) >> 4);
  if (v6 <= 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 1736) - *(_QWORD *)(a1 + 1728)) >> 4))
    v6 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 1736) - *(_QWORD *)(a1 + 1728)) >> 4);
  if (v6 <= 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 1760) - *(_QWORD *)(a1 + 1752)) >> 4))
    v6 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 1760) - *(_QWORD *)(a1 + 1752)) >> 4);
  if (v6 <= 0x84BDA12F684BDA13 * ((uint64_t)(*(_QWORD *)(a1 + 1784) - *(_QWORD *)(a1 + 1776)) >> 3))
    v6 = 0x84BDA12F684BDA13 * ((uint64_t)(*(_QWORD *)(a1 + 1784) - *(_QWORD *)(a1 + 1776)) >> 3);
  if (v6 <= 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(_QWORD *)(a1 + 1808) - *(_QWORD *)(a1 + 1800)) >> 3))
    v6 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(_QWORD *)(a1 + 1808) - *(_QWORD *)(a1 + 1800)) >> 3);
  if (v6 <= 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 1832) - *(_QWORD *)(a1 + 1824)) >> 4))
    v6 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 1832) - *(_QWORD *)(a1 + 1824)) >> 4);
  if (v6 <= 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(_QWORD *)(a1 + 1856) - *(_QWORD *)(a1 + 1848)) >> 3))
    v6 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(_QWORD *)(a1 + 1856) - *(_QWORD *)(a1 + 1848)) >> 3);
  if (v6 >= 0x41)
  {
    if (v6 <= 0x80)
      v6 = 128;
    *(_QWORD *)&v213 = v6;
    v7 = (double *)operator new[]();
    if (v212 != (double *)v211 && v212)
      MEMORY[0x212BC6368]();
    v212 = v7;
  }
  *((_QWORD *)&v213 + 1) = 0;
  if (*(_BYTE *)(a1 + 3012))
  {
    v214 = a1 + 328;
    sub_20FBBDCEC((uint64_t)&v214, v211);
  }
  else
  {
    v214 = a1 + 328;
    sub_20FBBDF20((uint64_t)&v214, v211);
  }
  v8 = *((_QWORD *)&v213 + 1);
  if (*((_QWORD *)&v213 + 1))
  {
    v9 = *((_QWORD *)&v213 + 1) >> 1;
    sub_20E8FB210(v212, &v212[*((_QWORD *)&v213 + 1) >> 1], &v212[*((_QWORD *)&v213 + 1)]);
    v10 = v212;
    v11 = v212[v9];
    if ((v8 & 1) == 0)
    {
      v12 = v9 - 1;
      if (v12 != v8)
      {
        sub_20E8FB210(v212, &v212[v12], &v212[v8]);
        v10 = v212;
      }
      v11 = (v11 + v10[v12]) * 0.5;
    }
    v210 = sqrt(v11) * **(double **)a2;
    *((_QWORD *)&v213 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
      goto LABEL_55;
  }
  else
  {
    v210 = 1.0;
    *((_QWORD *)&v213 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
    {
LABEL_55:
      v214 = a1 + 328;
      sub_20FBBE824((uint64_t)&v214, v211);
      goto LABEL_58;
    }
  }
  v214 = a1 + 328;
  sub_20FBBEA18((uint64_t)&v214, v211);
LABEL_58:
  v13 = *((_QWORD *)&v213 + 1);
  if (*((_QWORD *)&v213 + 1))
  {
    v14 = *((_QWORD *)&v213 + 1) >> 1;
    sub_20E8FB210(v212, &v212[*((_QWORD *)&v213 + 1) >> 1], &v212[*((_QWORD *)&v213 + 1)]);
    v15 = v212;
    v16 = v212[v14];
    if ((v13 & 1) == 0)
    {
      v17 = v14 - 1;
      if (v17 != v13)
      {
        sub_20E8FB210(v212, &v212[v17], &v212[v13]);
        v15 = v212;
      }
      v16 = (v16 + v15[v17]) * 0.5;
    }
    v209 = sqrt(v16) * *(double *)(*(_QWORD *)a2 + 8);
    *((_QWORD *)&v213 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
      goto LABEL_64;
  }
  else
  {
    v209 = 1.0;
    *((_QWORD *)&v213 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
    {
LABEL_64:
      v214 = a1 + 328;
      sub_20FBBED9C((uint64_t)&v214, v211);
      goto LABEL_67;
    }
  }
  v214 = a1 + 328;
  sub_20FBBEF90((uint64_t)&v214, v211);
LABEL_67:
  v18 = *((_QWORD *)&v213 + 1);
  if (*((_QWORD *)&v213 + 1))
  {
    v19 = *((_QWORD *)&v213 + 1) >> 1;
    sub_20E8FB210(v212, &v212[*((_QWORD *)&v213 + 1) >> 1], &v212[*((_QWORD *)&v213 + 1)]);
    v20 = v212;
    v21 = v212[v19];
    if ((v18 & 1) == 0)
    {
      v22 = v19 - 1;
      if (v22 != v18)
      {
        sub_20E8FB210(v212, &v212[v22], &v212[v18]);
        v20 = v212;
      }
      v21 = (v21 + v20[v22]) * 0.5;
    }
    v208 = sqrt(v21) * *(double *)(*(_QWORD *)a2 + 16);
    *((_QWORD *)&v213 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
      goto LABEL_73;
  }
  else
  {
    v208 = 1.0;
    *((_QWORD *)&v213 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
    {
LABEL_73:
      v214 = a1 + 328;
      sub_20FBBF314((uint64_t)&v214, v211);
      goto LABEL_76;
    }
  }
  v214 = a1 + 328;
  sub_20FBBF508((uint64_t)&v214, v211);
LABEL_76:
  v26 = *((_QWORD *)&v213 + 1);
  if (*((_QWORD *)&v213 + 1))
  {
    v27 = *((_QWORD *)&v213 + 1) >> 1;
    sub_20E8FB210(v212, &v212[*((_QWORD *)&v213 + 1) >> 1], &v212[*((_QWORD *)&v213 + 1)]);
    v28 = v212;
    v29 = v212[v27];
    if ((v26 & 1) == 0)
    {
      v30 = v27 - 1;
      if (v30 != v26)
      {
        sub_20E8FB210(v212, &v212[v30], &v212[v26]);
        v28 = v212;
      }
      v29 = (v29 + v28[v30]) * 0.5;
    }
    v24 = *(double *)(*(_QWORD *)a2 + 24);
    v23.f64[0] = sqrt(v29) * v24;
    v207 = v23.f64[0];
    *((_QWORD *)&v213 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
      goto LABEL_82;
  }
  else
  {
    v23.f64[0] = 1.0;
    v207 = 1.0;
    *((_QWORD *)&v213 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
    {
LABEL_82:
      v214 = a1 + 328;
      sub_20FBBF88C((uint64_t)&v214, v211);
      goto LABEL_85;
    }
  }
  v214 = a1 + 328;
  sub_20FBBFA64((uint64_t)&v214, v211, v23, v24, v25);
LABEL_85:
  v31 = *((_QWORD *)&v213 + 1);
  if (*((_QWORD *)&v213 + 1))
  {
    v32 = *((_QWORD *)&v213 + 1) >> 1;
    sub_20E8FB210(v212, &v212[*((_QWORD *)&v213 + 1) >> 1], &v212[*((_QWORD *)&v213 + 1)]);
    v33 = v212;
    v34 = v212[v32];
    if ((v31 & 1) == 0)
    {
      v35 = v32 - 1;
      if (v35 != v31)
      {
        sub_20E8FB210(v212, &v212[v35], &v212[v31]);
        v33 = v212;
      }
      v34 = (v34 + v33[v35]) * 0.5;
    }
    v206 = sqrt(v34) * *(double *)(*(_QWORD *)a2 + 32);
    *((_QWORD *)&v213 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
      goto LABEL_91;
  }
  else
  {
    v206 = 1.0;
    *((_QWORD *)&v213 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
    {
LABEL_91:
      v214 = a1 + 328;
      sub_20FBBFCCC((uint64_t)&v214, v211);
      goto LABEL_94;
    }
  }
  v214 = a1 + 328;
  sub_20FBBFF14((uint64_t)&v214, v211);
LABEL_94:
  v42 = *((_QWORD *)&v213 + 1);
  if (*((_QWORD *)&v213 + 1))
  {
    v43 = *((_QWORD *)&v213 + 1) >> 1;
    sub_20E8FB210(v212, &v212[*((_QWORD *)&v213 + 1) >> 1], &v212[*((_QWORD *)&v213 + 1)]);
    v44 = v212;
    v45 = v212[v43];
    if ((v42 & 1) == 0)
    {
      v46 = v43 - 1;
      if (v46 != v42)
      {
        sub_20E8FB210(v212, &v212[v46], &v212[v42]);
        v44 = v212;
      }
      v45 = (v45 + v44[v46]) * 0.5;
    }
    v36 = *(double *)(*(_QWORD *)a2 + 40);
    v47 = sqrt(v45) * v36;
    v205 = v47;
    *((_QWORD *)&v213 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
      goto LABEL_100;
  }
  else
  {
    v47 = 1.0;
    v205 = 1.0;
    *((_QWORD *)&v213 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
    {
LABEL_100:
      v214 = a1 + 328;
      sub_20FBC01D4((uint64_t)&v214, v211);
      goto LABEL_103;
    }
  }
  v214 = a1 + 328;
  sub_20FBC041C((uint64_t)&v214, v211, v47, v36, v37, v38, v39, v40, v41);
LABEL_103:
  v51 = *((_QWORD *)&v213 + 1);
  if (*((_QWORD *)&v213 + 1))
  {
    v52 = *((_QWORD *)&v213 + 1) >> 1;
    sub_20E8FB210(v212, &v212[*((_QWORD *)&v213 + 1) >> 1], &v212[*((_QWORD *)&v213 + 1)]);
    v53 = v212;
    v54 = v212[v52];
    if ((v51 & 1) == 0)
    {
      v55 = v52 - 1;
      if (v55 != v51)
      {
        sub_20E8FB210(v212, &v212[v55], &v212[v51]);
        v53 = v212;
      }
      v54 = (v54 + v53[v55]) * 0.5;
    }
    v48.f64[0] = *(float64_t *)(*(_QWORD *)a2 + 48);
    v56 = sqrt(v54) * v48.f64[0];
    v204 = v56;
    *((_QWORD *)&v213 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
      goto LABEL_109;
  }
  else
  {
    v56 = 1.0;
    v204 = 1.0;
    *((_QWORD *)&v213 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
    {
LABEL_109:
      v214 = a1 + 328;
      sub_20FBC08C8((uint64_t)&v214, v211);
      goto LABEL_112;
    }
  }
  v214 = a1 + 328;
  sub_20FBC0AA8((uint64_t)&v214, v211, v56, v48, v49, v50);
LABEL_112:
  v59 = *((_QWORD *)&v213 + 1);
  if (*((_QWORD *)&v213 + 1))
  {
    v60 = *((_QWORD *)&v213 + 1) >> 1;
    sub_20E8FB210(v212, &v212[*((_QWORD *)&v213 + 1) >> 1], &v212[*((_QWORD *)&v213 + 1)]);
    v61 = v212;
    v62 = v212[v60];
    if ((v59 & 1) == 0)
    {
      v63 = v60 - 1;
      if (v63 != v59)
      {
        sub_20E8FB210(v212, &v212[v63], &v212[v59]);
        v61 = v212;
      }
      v62 = (v62 + v61[v63]) * 0.5;
    }
    v58.f64[0] = *(float64_t *)(*(_QWORD *)a2 + 56);
    v57.f64[0] = sqrt(v62) * v58.f64[0];
    v203 = v57.f64[0];
    *((_QWORD *)&v213 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
      goto LABEL_118;
  }
  else
  {
    v57.f64[0] = 1.0;
    v203 = 1.0;
    *((_QWORD *)&v213 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
    {
LABEL_118:
      v214 = a1 + 328;
      sub_20FBC0D10((uint64_t)&v214, v211);
      goto LABEL_121;
    }
  }
  v214 = a1 + 328;
  sub_20FBC0EF0((uint64_t)&v214, v211, v57, v58);
LABEL_121:
  v64 = *((_QWORD *)&v213 + 1);
  if (*((_QWORD *)&v213 + 1))
  {
    v65 = *((_QWORD *)&v213 + 1) >> 1;
    sub_20E8FB210(v212, &v212[*((_QWORD *)&v213 + 1) >> 1], &v212[*((_QWORD *)&v213 + 1)]);
    v66 = v212;
    v67 = v212[v65];
    if ((v64 & 1) == 0)
    {
      v68 = v65 - 1;
      if (v68 != v64)
      {
        sub_20E8FB210(v212, &v212[v68], &v212[v64]);
        v66 = v212;
      }
      v67 = (v67 + v66[v68]) * 0.5;
    }
    v202 = sqrt(v67) * *(double *)(*(_QWORD *)a2 + 64);
    *((_QWORD *)&v213 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
      goto LABEL_127;
  }
  else
  {
    v202 = 1.0;
    *((_QWORD *)&v213 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
    {
LABEL_127:
      v214 = a1 + 328;
      sub_20FBC1168((uint64_t)&v214, v211);
      goto LABEL_130;
    }
  }
  v214 = a1 + 328;
  sub_20FBC1340((uint64_t)&v214, v211);
LABEL_130:
  v77 = *((_QWORD *)&v213 + 1);
  if (*((_QWORD *)&v213 + 1))
  {
    v78 = *((_QWORD *)&v213 + 1) >> 1;
    sub_20E8FB210(v212, &v212[*((_QWORD *)&v213 + 1) >> 1], &v212[*((_QWORD *)&v213 + 1)]);
    v79 = v212;
    v80 = v212[v78];
    if ((v77 & 1) == 0)
    {
      v81 = v78 - 1;
      if (v81 != v77)
      {
        sub_20E8FB210(v212, &v212[v81], &v212[v77]);
        v79 = v212;
      }
      v80 = (v80 + v79[v81]) * 0.5;
    }
    v70.n128_u64[0] = *(_QWORD *)(*(_QWORD *)a2 + 72);
    v69.n128_f64[0] = sqrt(v80) * v70.n128_f64[0];
    v201 = v69.n128_f64[0];
    *((_QWORD *)&v213 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
      goto LABEL_136;
  }
  else
  {
    v69.n128_u64[0] = 1.0;
    v201 = 1.0;
    *((_QWORD *)&v213 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
    {
LABEL_136:
      v214 = a1 + 328;
      sub_20FBC1578((uint64_t)&v214, v211);
      goto LABEL_139;
    }
  }
  v214 = a1 + 328;
  sub_20FBC1768((uint64_t)&v214, v211, v69, v70, v71, v72, v73, v74, v75, v76);
LABEL_139:
  v82 = *((_QWORD *)&v213 + 1);
  if (*((_QWORD *)&v213 + 1))
  {
    v83 = *((_QWORD *)&v213 + 1) >> 1;
    sub_20E8FB210(v212, &v212[*((_QWORD *)&v213 + 1) >> 1], &v212[*((_QWORD *)&v213 + 1)]);
    v84 = v212;
    v85 = v212[v83];
    if ((v82 & 1) == 0)
    {
      v86 = v83 - 1;
      if (v86 != v82)
      {
        sub_20E8FB210(v212, &v212[v86], &v212[v82]);
        v84 = v212;
      }
      v85 = (v85 + v84[v86]) * 0.5;
    }
    v200 = sqrt(v85) * *(double *)(*(_QWORD *)a2 + 80);
    *((_QWORD *)&v213 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
      goto LABEL_145;
  }
  else
  {
    v200 = 1.0;
    *((_QWORD *)&v213 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
    {
LABEL_145:
      v214 = a1 + 328;
      sub_20FBC19A0((uint64_t)&v214, v211);
      goto LABEL_148;
    }
  }
  v214 = a1 + 328;
  sub_20FBC1B70((uint64_t)&v214, v211);
LABEL_148:
  v87 = *((_QWORD *)&v213 + 1);
  if (*((_QWORD *)&v213 + 1))
  {
    v88 = *((_QWORD *)&v213 + 1) >> 1;
    sub_20E8FB210(v212, &v212[*((_QWORD *)&v213 + 1) >> 1], &v212[*((_QWORD *)&v213 + 1)]);
    v89 = v212;
    v90 = v212[v88];
    if ((v87 & 1) == 0)
    {
      v91 = v88 - 1;
      if (v91 != v87)
      {
        sub_20E8FB210(v212, &v212[v91], &v212[v87]);
        v89 = v212;
      }
      v90 = (v90 + v89[v91]) * 0.5;
    }
    v199 = sqrt(v90) * *(double *)(*(_QWORD *)a2 + 88);
    *((_QWORD *)&v213 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
      goto LABEL_154;
  }
  else
  {
    v199 = 1.0;
    *((_QWORD *)&v213 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
    {
LABEL_154:
      v214 = a1 + 328;
      sub_20FBC1DA0((uint64_t)&v214, v211);
      goto LABEL_157;
    }
  }
  v214 = a1 + 328;
  sub_20FBC1F88((uint64_t)&v214, v211);
LABEL_157:
  v92 = *((_QWORD *)&v213 + 1);
  if (*((_QWORD *)&v213 + 1))
  {
    v93 = *((_QWORD *)&v213 + 1) >> 1;
    sub_20E8FB210(v212, &v212[*((_QWORD *)&v213 + 1) >> 1], &v212[*((_QWORD *)&v213 + 1)]);
    v94 = v212;
    v95 = v212[v93];
    if ((v92 & 1) == 0)
    {
      v96 = v93 - 1;
      if (v96 != v92)
      {
        sub_20E8FB210(v212, &v212[v96], &v212[v92]);
        v94 = v212;
      }
      v95 = (v95 + v94[v96]) * 0.5;
    }
    v97 = sqrt(v95) * *(double *)(*(_QWORD *)a2 + 96);
    *((_QWORD *)&v213 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
      goto LABEL_163;
  }
  else
  {
    v97 = 1.0;
    *((_QWORD *)&v213 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
    {
LABEL_163:
      v214 = a1 + 328;
      sub_20FBC21E0((uint64_t)&v214, v211);
      goto LABEL_166;
    }
  }
  v214 = a1 + 328;
  sub_20FBC23C8((uint64_t)&v214, v211);
LABEL_166:
  v98 = *((_QWORD *)&v213 + 1);
  if (*((_QWORD *)&v213 + 1))
  {
    v99 = *((_QWORD *)&v213 + 1) >> 1;
    sub_20E8FB210(v212, &v212[*((_QWORD *)&v213 + 1) >> 1], &v212[*((_QWORD *)&v213 + 1)]);
    v100 = v212;
    v101 = v212[v99];
    if ((v98 & 1) == 0)
    {
      v102 = v99 - 1;
      if (v102 != v98)
      {
        sub_20E8FB210(v212, &v212[v102], &v212[v98]);
        v100 = v212;
      }
      v101 = (v101 + v100[v102]) * 0.5;
    }
    v103 = sqrt(v101) * *(double *)(*(_QWORD *)a2 + 104);
    *((_QWORD *)&v213 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
      goto LABEL_172;
  }
  else
  {
    v103 = 1.0;
    *((_QWORD *)&v213 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
    {
LABEL_172:
      v214 = a1 + 328;
      sub_20FBC2620((uint64_t)&v214, v211);
      goto LABEL_175;
    }
  }
  v214 = a1 + 328;
  sub_20FBC2800((uint64_t)&v214, v211);
LABEL_175:
  v107 = *((_QWORD *)&v213 + 1);
  if (*((_QWORD *)&v213 + 1))
  {
    v108 = *((_QWORD *)&v213 + 1) >> 1;
    sub_20E8FB210(v212, &v212[*((_QWORD *)&v213 + 1) >> 1], &v212[*((_QWORD *)&v213 + 1)]);
    v109 = v212;
    v110 = v212[v108];
    if ((v107 & 1) == 0)
    {
      v111 = v108 - 1;
      if (v111 != v107)
      {
        sub_20E8FB210(v212, &v212[v111], &v212[v107]);
        v109 = v212;
      }
      v110 = (v110 + v109[v111]) * 0.5;
    }
    v104.f64[0] = sqrt(v110);
    v105 = *(double *)(*(_QWORD *)a2 + 112);
    v112 = v104.f64[0] * v105;
    *((_QWORD *)&v213 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
      goto LABEL_181;
  }
  else
  {
    v112 = 1.0;
    *((_QWORD *)&v213 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
    {
LABEL_181:
      v214 = a1 + 328;
      sub_20FBC2C3C((uint64_t)&v214, v211);
      goto LABEL_184;
    }
  }
  v214 = a1 + 328;
  sub_20FBC2E1C((uint64_t)&v214, v211, v104, v105, v106);
LABEL_184:
  v121 = *((_QWORD *)&v213 + 1);
  if (*((_QWORD *)&v213 + 1))
  {
    v122 = *((_QWORD *)&v213 + 1) >> 1;
    sub_20E8FB210(v212, &v212[*((_QWORD *)&v213 + 1) >> 1], &v212[*((_QWORD *)&v213 + 1)]);
    v123 = v212;
    v124 = v212[v122];
    if ((v121 & 1) == 0)
    {
      v125 = v122 - 1;
      if (v125 != v121)
      {
        sub_20E8FB210(v212, &v212[v125], &v212[v121]);
        v123 = v212;
      }
      v124 = (v124 + v123[v125]) * 0.5;
    }
    v113.n128_f64[0] = sqrt(v124);
    v114.n128_u64[0] = *(_QWORD *)(*(_QWORD *)a2 + 120);
    v126 = v113.n128_f64[0] * v114.n128_f64[0];
    *((_QWORD *)&v213 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
      goto LABEL_190;
  }
  else
  {
    v126 = 1.0;
    *((_QWORD *)&v213 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
    {
LABEL_190:
      v214 = a1 + 328;
      sub_20FBC308C((uint64_t)&v214, v211);
      goto LABEL_193;
    }
  }
  v214 = a1 + 328;
  sub_20FBC3264((uint64_t)&v214, v211, v113, v114, v115, v116, v117, v118, v119, v120);
LABEL_193:
  v135 = *((_QWORD *)&v213 + 1);
  if (*((_QWORD *)&v213 + 1))
  {
    v136 = *((_QWORD *)&v213 + 1) >> 1;
    sub_20E8FB210(v212, &v212[*((_QWORD *)&v213 + 1) >> 1], &v212[*((_QWORD *)&v213 + 1)]);
    v137 = v212;
    v138 = v212[v136];
    if ((v135 & 1) == 0)
    {
      v139 = v136 - 1;
      if (v139 != v135)
      {
        sub_20E8FB210(v212, &v212[v139], &v212[v135]);
        v137 = v212;
      }
      v138 = (v138 + v137[v139]) * 0.5;
    }
    v127.n128_f64[0] = sqrt(v138);
    v128.n128_u64[0] = *(_QWORD *)(*(_QWORD *)a2 + 128);
    v140 = v127.n128_f64[0] * v128.n128_f64[0];
    *((_QWORD *)&v213 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
      goto LABEL_199;
  }
  else
  {
    v140 = 1.0;
    *((_QWORD *)&v213 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
    {
LABEL_199:
      v214 = a1 + 328;
      sub_20FBC348C((uint64_t)&v214, v211);
      goto LABEL_202;
    }
  }
  v214 = a1 + 328;
  sub_20FBC3664((uint64_t)&v214, v211, v127, v128, v129, v130, v131, v132, v133, v134);
LABEL_202:
  v149 = *((_QWORD *)&v213 + 1);
  if (*((_QWORD *)&v213 + 1))
  {
    v150 = *((_QWORD *)&v213 + 1) >> 1;
    sub_20E8FB210(v212, &v212[*((_QWORD *)&v213 + 1) >> 1], &v212[*((_QWORD *)&v213 + 1)]);
    v151 = v212;
    v152 = v212[v150];
    if ((v149 & 1) == 0)
    {
      v153 = v150 - 1;
      if (v153 != v149)
      {
        sub_20E8FB210(v212, &v212[v153], &v212[v149]);
        v151 = v212;
      }
      v152 = (v152 + v151[v153]) * 0.5;
    }
    v141.n128_f64[0] = sqrt(v152);
    v142.n128_u64[0] = *(_QWORD *)(*(_QWORD *)a2 + 136);
    v154 = v141.n128_f64[0] * v142.n128_f64[0];
    *((_QWORD *)&v213 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
      goto LABEL_208;
  }
  else
  {
    v154 = 1.0;
    *((_QWORD *)&v213 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
    {
LABEL_208:
      v214 = a1 + 328;
      sub_20FBC388C((uint64_t)&v214, v211);
      goto LABEL_211;
    }
  }
  v214 = a1 + 328;
  sub_20FBC3A5C((uint64_t)&v214, v211, v141, v142, v143, v144, v145, v146, v147, v148);
LABEL_211:
  v163 = *((_QWORD *)&v213 + 1);
  if (*((_QWORD *)&v213 + 1))
  {
    v164 = *((_QWORD *)&v213 + 1) >> 1;
    sub_20E8FB210(v212, &v212[*((_QWORD *)&v213 + 1) >> 1], &v212[*((_QWORD *)&v213 + 1)]);
    v165 = v212;
    v166 = v212[v164];
    if ((v163 & 1) == 0)
    {
      v167 = v164 - 1;
      if (v167 != v163)
      {
        sub_20E8FB210(v212, &v212[v167], &v212[v163]);
        v165 = v212;
      }
      v166 = (v166 + v165[v167]) * 0.5;
    }
    v155.n128_f64[0] = sqrt(v166);
    v156.n128_u64[0] = *(_QWORD *)(*(_QWORD *)a2 + 144);
    v168 = v155.n128_f64[0] * v156.n128_f64[0];
    *((_QWORD *)&v213 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
      goto LABEL_217;
  }
  else
  {
    v168 = 1.0;
    *((_QWORD *)&v213 + 1) = 0;
    if (*(_BYTE *)(a1 + 3012))
    {
LABEL_217:
      v214 = a1 + 328;
      sub_20FBC3C7C((uint64_t)&v214, v211);
      goto LABEL_220;
    }
  }
  v214 = a1 + 328;
  sub_20FBC3E54((uint64_t)&v214, v211, v155, v156, v157, v158, v159, v160, v161, v162);
LABEL_220:
  v169 = *((_QWORD *)&v213 + 1);
  result = v212;
  if (!*((_QWORD *)&v213 + 1))
  {
    v174 = 1.0;
    *((_QWORD *)&v213 + 1) = 0;
    if (v212 == (double *)v211)
      goto LABEL_230;
    goto LABEL_228;
  }
  v171 = *((_QWORD *)&v213 + 1) >> 1;
  sub_20E8FB210(v212, &v212[*((_QWORD *)&v213 + 1) >> 1], &v212[*((_QWORD *)&v213 + 1)]);
  result = v212;
  v172 = v212[v171];
  if ((v169 & 1) == 0)
  {
    v173 = v171 - 1;
    if (v173 != v169)
    {
      sub_20E8FB210(v212, &v212[v173], &v212[v169]);
      result = v212;
    }
    v172 = (v172 + result[v173]) * 0.5;
  }
  v174 = sqrt(v172) * *(double *)(*(_QWORD *)a2 + 152);
  *((_QWORD *)&v213 + 1) = 0;
  if (result != (double *)v211)
  {
LABEL_228:
    if (result)
      result = (double *)MEMORY[0x212BC6368](result, 0x1000C8000313F17);
  }
LABEL_230:
  if ((a3 & 1) == 0)
  {
    v181 = 1.0e20;
    v180 = 1.0e-10;
    if (v210 > 0.0)
    {
      *(double *)(a1 + 8) = v210;
      *(double *)(a1 + 16) = 1.0 / (v210 * v210);
      v182 = v209;
      if (v209 <= 0.0)
      {
LABEL_234:
        *(_QWORD *)(a1 + 24) = 0x3DDB7CDFD9D7BDBBLL;
        *(_QWORD *)(a1 + 32) = 0x4415AF1D78B58C3FLL;
        v183 = v208;
        v184 = 0x3DDB7CDFD9D7BDBBLL;
        v185 = 1.0e20;
        if (v208 <= 0.0)
          goto LABEL_236;
        goto LABEL_235;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 8) = 0x3DDB7CDFD9D7BDBBLL;
      *(_QWORD *)(a1 + 16) = 0x4415AF1D78B58C3FLL;
      v182 = v209;
      if (v209 <= 0.0)
        goto LABEL_234;
    }
    *(double *)(a1 + 24) = v182;
    *(double *)(a1 + 32) = 1.0 / (v182 * v182);
    v183 = v208;
    v184 = 0x3DDB7CDFD9D7BDBBLL;
    v185 = 1.0e20;
    if (v208 <= 0.0)
    {
LABEL_236:
      *(_QWORD *)(a1 + 40) = v184;
      *(double *)(a1 + 48) = v185;
      v186 = 0x3DDB7CDFD9D7BDBBLL;
      v187 = 1.0e20;
      *(_DWORD *)(a1 + 3008) = 0;
      if (v207 > 0.0)
      {
        v186 = *(_QWORD *)&v207;
        v187 = 1.0 / (v207 * v207);
      }
      *(_QWORD *)(a1 + 56) = v186;
      *(double *)(a1 + 64) = v187;
      v188 = 0x3DDB7CDFD9D7BDBBLL;
      v189 = 1.0e20;
      if (v206 > 0.0)
      {
        v188 = *(_QWORD *)&v206;
        v189 = 1.0 / (v206 * v206);
      }
      *(_QWORD *)(a1 + 72) = v188;
      *(double *)(a1 + 80) = v189;
      *(_BYTE *)(a1 + 3013) = 0;
      if (v205 > 0.0)
      {
        *(double *)(a1 + 88) = v205;
        *(double *)(a1 + 96) = 1.0 / (v205 * v205);
        v190 = v204;
        if (v204 <= 0.0)
        {
LABEL_242:
          *(_QWORD *)(a1 + 104) = 0x3DDB7CDFD9D7BDBBLL;
          *(_QWORD *)(a1 + 112) = 0x4415AF1D78B58C3FLL;
          v191 = v203;
          if (v203 <= 0.0)
            goto LABEL_243;
          goto LABEL_265;
        }
      }
      else
      {
        *(_QWORD *)(a1 + 88) = 0x3DDB7CDFD9D7BDBBLL;
        *(_QWORD *)(a1 + 96) = 0x4415AF1D78B58C3FLL;
        v190 = v204;
        if (v204 <= 0.0)
          goto LABEL_242;
      }
      *(double *)(a1 + 104) = v190;
      *(double *)(a1 + 112) = 1.0 / (v190 * v190);
      v191 = v203;
      if (v203 <= 0.0)
      {
LABEL_243:
        *(_QWORD *)(a1 + 120) = 0x3DDB7CDFD9D7BDBBLL;
        *(_QWORD *)(a1 + 128) = 0x4415AF1D78B58C3FLL;
        v192 = v202;
        v193 = 0x3DDB7CDFD9D7BDBBLL;
        v194 = 1.0e20;
        if (v202 <= 0.0)
          goto LABEL_245;
        goto LABEL_244;
      }
LABEL_265:
      *(double *)(a1 + 120) = v191;
      *(double *)(a1 + 128) = 1.0 / (v191 * v191);
      v192 = v202;
      v193 = 0x3DDB7CDFD9D7BDBBLL;
      v194 = 1.0e20;
      if (v202 <= 0.0)
      {
LABEL_245:
        *(_QWORD *)(a1 + 136) = v193;
        *(double *)(a1 + 144) = v194;
        v195 = 0x3DDB7CDFD9D7BDBBLL;
        v196 = 1.0e20;
        *(_DWORD *)(a1 + 3008) = 0;
        if (v201 > 0.0)
        {
          v195 = *(_QWORD *)&v201;
          v196 = 1.0 / (v201 * v201);
        }
        *(_QWORD *)(a1 + 152) = v195;
        *(double *)(a1 + 160) = v196;
        v197 = 0x3DDB7CDFD9D7BDBBLL;
        v198 = 1.0e20;
        if (v200 > 0.0)
        {
          v197 = *(_QWORD *)&v200;
          v198 = 1.0 / (v200 * v200);
        }
        *(_QWORD *)(a1 + 168) = v197;
        *(double *)(a1 + 176) = v198;
        *(_BYTE *)(a1 + 3013) = 0;
        if (v199 > 0.0)
        {
          *(double *)(a1 + 184) = v199;
          *(double *)(a1 + 192) = 1.0 / (v199 * v199);
          if (v97 <= 0.0)
          {
LABEL_251:
            *(_QWORD *)(a1 + 200) = 0x3DDB7CDFD9D7BDBBLL;
            *(_QWORD *)(a1 + 208) = 0x4415AF1D78B58C3FLL;
            if (v103 <= 0.0)
              goto LABEL_252;
            goto LABEL_269;
          }
        }
        else
        {
          *(_QWORD *)(a1 + 184) = 0x3DDB7CDFD9D7BDBBLL;
          *(_QWORD *)(a1 + 192) = 0x4415AF1D78B58C3FLL;
          if (v97 <= 0.0)
            goto LABEL_251;
        }
        *(double *)(a1 + 200) = v97;
        *(double *)(a1 + 208) = 1.0 / (v97 * v97);
        if (v103 <= 0.0)
        {
LABEL_252:
          *(_QWORD *)(a1 + 216) = 0x3DDB7CDFD9D7BDBBLL;
          *(_QWORD *)(a1 + 224) = 0x4415AF1D78B58C3FLL;
          if (v112 <= 0.0)
            goto LABEL_253;
          goto LABEL_270;
        }
LABEL_269:
        *(double *)(a1 + 216) = v103;
        *(double *)(a1 + 224) = 1.0 / (v103 * v103);
        if (v112 <= 0.0)
        {
LABEL_253:
          *(_QWORD *)(a1 + 232) = 0x3DDB7CDFD9D7BDBBLL;
          *(_QWORD *)(a1 + 240) = 0x4415AF1D78B58C3FLL;
          *(_DWORD *)(a1 + 3008) = 0;
          if (v126 <= 0.0)
            goto LABEL_254;
          goto LABEL_271;
        }
LABEL_270:
        *(double *)(a1 + 232) = v112;
        *(double *)(a1 + 240) = 1.0 / (v112 * v112);
        *(_DWORD *)(a1 + 3008) = 0;
        if (v126 <= 0.0)
        {
LABEL_254:
          *(_QWORD *)(a1 + 248) = 0x3DDB7CDFD9D7BDBBLL;
          *(_QWORD *)(a1 + 256) = 0x4415AF1D78B58C3FLL;
          *(_BYTE *)(a1 + 3013) = 0;
          if (v140 <= 0.0)
            goto LABEL_255;
          goto LABEL_272;
        }
LABEL_271:
        *(double *)(a1 + 248) = v126;
        *(double *)(a1 + 256) = 1.0 / (v126 * v126);
        *(_BYTE *)(a1 + 3013) = 0;
        if (v140 <= 0.0)
        {
LABEL_255:
          *(_QWORD *)(a1 + 264) = 0x3DDB7CDFD9D7BDBBLL;
          *(_QWORD *)(a1 + 272) = 0x4415AF1D78B58C3FLL;
          if (v154 <= 0.0)
            goto LABEL_256;
          goto LABEL_273;
        }
LABEL_272:
        *(double *)(a1 + 264) = v140;
        *(double *)(a1 + 272) = 1.0 / (v140 * v140);
        if (v154 <= 0.0)
        {
LABEL_256:
          *(_QWORD *)(a1 + 280) = 0x3DDB7CDFD9D7BDBBLL;
          *(_QWORD *)(a1 + 288) = 0x4415AF1D78B58C3FLL;
          if (v168 <= 0.0)
            goto LABEL_257;
          goto LABEL_274;
        }
LABEL_273:
        *(double *)(a1 + 280) = v154;
        *(double *)(a1 + 288) = 1.0 / (v154 * v154);
        if (v168 <= 0.0)
        {
LABEL_257:
          *(_QWORD *)(a1 + 296) = 0x3DDB7CDFD9D7BDBBLL;
          *(_QWORD *)(a1 + 304) = 0x4415AF1D78B58C3FLL;
          if (v174 <= 0.0)
            goto LABEL_259;
LABEL_258:
          v180 = v174;
          v181 = 1.0 / (v174 * v174);
          goto LABEL_259;
        }
LABEL_274:
        *(double *)(a1 + 296) = v168;
        *(double *)(a1 + 304) = 1.0 / (v168 * v168);
        if (v174 <= 0.0)
          goto LABEL_259;
        goto LABEL_258;
      }
LABEL_244:
      v193 = *(_QWORD *)&v192;
      v194 = 1.0 / (v192 * v192);
      goto LABEL_245;
    }
LABEL_235:
    v184 = *(_QWORD *)&v183;
    v185 = 1.0 / (v183 * v183);
    goto LABEL_236;
  }
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(a1 + 8) = _Q0;
  *(_OWORD *)(a1 + 24) = _Q0;
  *(_OWORD *)(a1 + 40) = _Q0;
  *(_OWORD *)(a1 + 56) = _Q0;
  *(_OWORD *)(a1 + 72) = _Q0;
  *(_OWORD *)(a1 + 88) = _Q0;
  *(_OWORD *)(a1 + 104) = _Q0;
  *(_OWORD *)(a1 + 120) = _Q0;
  *(_OWORD *)(a1 + 136) = _Q0;
  *(_OWORD *)(a1 + 152) = _Q0;
  *(_OWORD *)(a1 + 168) = _Q0;
  *(_OWORD *)(a1 + 184) = _Q0;
  *(_OWORD *)(a1 + 200) = _Q0;
  *(_OWORD *)(a1 + 216) = _Q0;
  *(_OWORD *)(a1 + 232) = _Q0;
  *(_OWORD *)(a1 + 248) = _Q0;
  *(_DWORD *)(a1 + 3008) = 0;
  *(_QWORD *)(a1 + 264) = 0x3FF0000000000000;
  *(_BYTE *)(a1 + 3013) = 0;
  *(_OWORD *)(a1 + 272) = _Q0;
  *(_OWORD *)(a1 + 288) = _Q0;
  v180 = 1.0;
  v181 = 1.0;
  *(_QWORD *)(a1 + 304) = 0x3FF0000000000000;
LABEL_259:
  *(double *)(a1 + 312) = v180;
  *(double *)(a1 + 320) = v181;
  *(_BYTE *)(a1 + 3013) = 0;
  *(_DWORD *)(a1 + 3008) = 0;
  return result;
}

void sub_20FBB75E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  unint64_t v22;

  STACK[0x270] = 0;
  v22 = STACK[0x260];
  if ((char *)STACK[0x260] != &a21)
  {
    if (v22)
      MEMORY[0x212BC6368](v22, 0x1000C8000313F17);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20FBB761C(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _OWORD *v17;
  __int128 *v18;
  unint64_t v19;
  __int128 v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _OWORD *v40;
  __int128 *v41;
  unint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  _OWORD *v63;
  __int128 *v64;
  unint64_t v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  _OWORD *v86;
  __int128 *v87;
  unint64_t v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  _QWORD *v93;
  uint64_t v94;
  _QWORD *v95;
  int v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  _OWORD *v110;
  __int128 *v111;
  unint64_t v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  _QWORD *v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  _OWORD *v132;
  __int128 *v133;
  unint64_t v134;
  __int128 v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t *v138;
  _QWORD *v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v143;
  unint64_t v144;
  int v145;
  _QWORD *v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  _OWORD *v156;
  __int128 *v157;
  unint64_t v158;
  __int128 v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t *v162;
  _QWORD *v163;
  uint64_t v164;
  _QWORD *v165;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  _OWORD *v179;
  __int128 *v180;
  unint64_t v181;
  __int128 v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t *v185;
  _QWORD *v186;
  uint64_t v187;
  _QWORD *v188;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  _OWORD *v202;
  __int128 *v203;
  unint64_t v204;
  __int128 v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t *v208;
  _QWORD *v209;
  uint64_t v210;
  _QWORD *v211;
  uint64_t v213;
  unint64_t v214;
  _QWORD *v215;
  _QWORD *v216;
  unint64_t v217;
  uint64_t v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  _OWORD *v225;
  __int128 *v226;
  unint64_t v227;
  __int128 v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t *v231;
  _QWORD *v232;
  uint64_t v233;
  _QWORD *v234;
  uint64_t v236;
  unint64_t v237;
  _QWORD *v238;
  _QWORD *v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  _OWORD *v248;
  __int128 *v249;
  unint64_t v250;
  __int128 v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t *v254;
  _QWORD *v255;
  uint64_t v256;
  _QWORD *v257;
  uint64_t v259;
  unint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  unint64_t v265;
  unint64_t v266;
  unint64_t v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;
  _OWORD *v271;
  __int128 *v272;
  unint64_t v273;
  __int128 v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t *v277;
  _QWORD *v278;
  uint64_t v279;
  _QWORD *v280;
  uint64_t v282;
  unint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  unint64_t v289;
  unint64_t v290;
  uint64_t v291;
  uint64_t v292;
  unint64_t v293;
  _OWORD *v294;
  __int128 *v295;
  unint64_t v296;
  __int128 v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t *v300;
  _QWORD *v301;
  uint64_t v302;
  _QWORD *v303;
  uint64_t v305;
  unint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  unint64_t v311;
  unint64_t v312;
  unint64_t v313;
  uint64_t v314;
  uint64_t v315;
  unint64_t v316;
  _OWORD *v317;
  __int128 *v318;
  unint64_t v319;
  __int128 v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t *v323;
  _QWORD *v324;
  uint64_t v325;
  _QWORD *v326;
  uint64_t v328;
  unint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  unint64_t v334;
  unint64_t v335;
  unint64_t v336;
  uint64_t v337;
  uint64_t v338;
  unint64_t v339;
  _OWORD *v340;
  __int128 *v341;
  unint64_t v342;
  __int128 v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t *v346;
  _QWORD *v347;
  uint64_t v348;
  _QWORD *v349;
  uint64_t v351;
  unint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  unint64_t v357;
  unint64_t v358;
  unint64_t v359;
  uint64_t v360;
  uint64_t v361;
  unint64_t v362;
  _OWORD *v363;
  __int128 *v364;
  unint64_t v365;
  __int128 v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t *v369;
  _QWORD *v370;
  uint64_t v371;
  _QWORD *v372;
  uint64_t v374;
  unint64_t v375;
  unint64_t v376;
  unint64_t v377;
  unint64_t v378;
  unint64_t v379;
  uint64_t v380;
  uint64_t v381;
  unint64_t v382;
  _OWORD *v383;
  __int128 *v384;
  unint64_t v385;
  __int128 v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t *v389;
  _QWORD *v390;
  uint64_t v391;
  _QWORD *v392;
  uint64_t v394;
  unint64_t v395;
  _QWORD *v396;
  _QWORD *v397;
  unint64_t v398;
  uint64_t v399;
  unint64_t v400;
  unint64_t v401;
  unint64_t v402;
  uint64_t v403;
  uint64_t v404;
  unint64_t v405;
  _OWORD *v406;
  __int128 *v407;
  unint64_t v408;
  __int128 v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t *v412;
  _QWORD *v413;
  uint64_t v414;
  _QWORD *v415;
  int v417;
  uint64_t v418;
  unint64_t v419;
  uint64_t v420;
  unint64_t v421;
  unint64_t v422;
  unint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  unint64_t v427;
  _OWORD *v428;
  __int128 *v429;
  unint64_t v430;
  __int128 v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t *v434;
  _QWORD *v435;
  uint64_t v436;
  _QWORD *v437;
  uint64_t v439;
  unint64_t v440;
  unint64_t v441;
  unint64_t v442;
  unint64_t v443;
  unint64_t v444;
  uint64_t v445;
  uint64_t v446;
  unint64_t v447;
  _OWORD *v448;
  __int128 *v449;
  unint64_t v450;
  __int128 v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t *v454;
  _QWORD *v455;
  uint64_t v456;
  _QWORD *v457;
  int64x2_t *v459;
  int64x2_t *v460;
  uint64_t v461;
  uint64_t v462;
  unint64_t v463;
  unint64_t v464;
  unint64_t v465;
  unint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  unint64_t v470;
  _OWORD *v471;
  __int128 *v472;
  unint64_t v473;
  __int128 v474;
  unint64_t v475;
  uint64_t v476;
  uint64_t *v477;
  _QWORD *v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v482;
  unint64_t v483;
  unint64_t v484;
  unint64_t v485;
  unint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  unint64_t v490;
  _OWORD *v491;
  __int128 *v492;
  unint64_t v493;
  __int128 v494;
  unint64_t v495;
  uint64_t v496;
  uint64_t *v497;
  _QWORD *v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v502;
  unint64_t v503;
  unint64_t v504;
  unint64_t v505;
  unint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  unint64_t v510;
  _OWORD *v511;
  __int128 *v512;
  unint64_t v513;
  __int128 v514;
  unint64_t v515;
  uint64_t v516;
  uint64_t *v517;
  _QWORD *v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v522;
  unint64_t v523;
  unint64_t v524;
  unint64_t v525;
  unint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  unint64_t v530;
  _OWORD *v531;
  __int128 *v532;
  unint64_t v533;
  __int128 v534;
  unint64_t v535;
  uint64_t v536;
  uint64_t *v537;
  _QWORD *v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v542;
  unint64_t v543;
  unint64_t v544;
  unint64_t v545;
  unint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  unint64_t v550;
  _OWORD *v551;
  __int128 *v552;
  unint64_t v553;
  __int128 v554;
  unint64_t v555;
  uint64_t v556;
  uint64_t *v557;
  _QWORD *v558;
  uint64_t v559;
  uint64_t v560;
  unint64_t v562;
  unint64_t v563;
  unint64_t v564;
  unint64_t v565;
  unint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  unint64_t v570;
  _OWORD *v571;
  __int128 *v572;
  unint64_t v573;
  __int128 v574;
  unint64_t v575;
  uint64_t v576;
  uint64_t *v577;
  _QWORD *v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v582;
  unint64_t v583;
  unint64_t v584;
  unint64_t v585;
  unint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  unint64_t v590;
  _OWORD *v591;
  __int128 *v592;
  unint64_t v593;
  __int128 v594;
  unint64_t v595;
  uint64_t v596;
  uint64_t *v597;
  _QWORD *v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v602;
  unint64_t v603;
  unint64_t v604;
  unint64_t v605;
  unint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  unint64_t v610;
  _OWORD *v611;
  __int128 *v612;
  unint64_t v613;
  __int128 v614;
  unint64_t v615;
  uint64_t v616;
  uint64_t *v617;
  _QWORD *v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v622;
  unint64_t v623;
  unint64_t v624;
  unint64_t v625;
  unint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  unint64_t v630;
  _OWORD *v631;
  __int128 *v632;
  unint64_t v633;
  __int128 v634;
  unint64_t v635;
  uint64_t v636;
  uint64_t *v637;
  _QWORD *v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v642;
  unint64_t v643;
  unint64_t v644;
  unint64_t v645;
  unint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  unint64_t v650;
  _OWORD *v651;
  __int128 *v652;
  unint64_t v653;
  __int128 v654;
  unint64_t v655;
  uint64_t v656;
  uint64_t *v657;
  _QWORD *v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t result;
  uint64_t v663;
  unint64_t v664;
  unint64_t v665;
  unint64_t v666;
  unint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  unint64_t v671;
  _OWORD *v672;
  __int128 *v673;
  unint64_t v674;
  __int128 v675;
  unint64_t v676;
  uint64_t v677;
  uint64_t *v678;
  _QWORD *v679;
  uint64_t v680;
  _BYTE v683[128];
  unint64_t v684;
  uint64_t v685;
  uint64_t v686;

  v686 = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v1 = (_QWORD *)a1[1];
  v3 = *(unsigned __int8 *)(*a1 + 1944);
  if (*(_BYTE *)(*a1 + 1944) || !sub_20F9210FC((_QWORD *)(v2 + 328)))
  {
    v6 = 0xEFBEFBEFBEFBEFBFLL * ((uint64_t)(*(_QWORD *)(v2 + 1400) - *(_QWORD *)(v2 + 1392)) >> 3);
  }
  else
  {
    v4 = *(_QWORD *)(v2 + 1392);
    v5 = *(_QWORD *)(v2 + 1400);
    if (v4 == v5)
    {
      v6 = 0;
    }
    else
    {
      v6 = 0;
      v7 = 0;
      do
      {
        if ((*(_BYTE *)(*(_QWORD *)(v4 + 208) + 4) & 6) == 0 && (*(_BYTE *)(*(_QWORD *)(v4 + 216) + 4) & 6) == 0)
          v6 = ++v7;
        v4 += 504;
      }
      while (v4 != v5);
    }
  }
  v8 = v1 + 145;
  v1[144] += v6;
  v9 = v1[211];
  v10 = v9 + 1;
  v11 = v1[210];
  if (v9 + 1 <= v11)
  {
    v15 = v1[209];
    *(_QWORD *)(v15 + 8 * v9) = v6;
    v28 = v1[211];
    v29 = v28 + 1;
    v1[211] = v28 + 1;
    if (v3)
    {
LABEL_37:
      v32 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(_QWORD *)(v2 + 1424) - *(_QWORD *)(v2 + 1416)) >> 3);
      goto LABEL_38;
    }
  }
  else
  {
    v12 = 2 * v11;
    if (v12 > v10)
      v10 = v12;
    v1[210] = v10;
    v13 = v1[209];
    v14 = operator new[]();
    v15 = v14;
    if (v9)
    {
      v16 = 0;
      if (v9 < 4)
        goto LABEL_20;
      if ((unint64_t)(v14 - v13) < 0x20)
        goto LABEL_20;
      v16 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      v17 = (_OWORD *)(v14 + 16);
      v18 = (__int128 *)(v13 + 16);
      v19 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v20 = *v18;
        *(v17 - 1) = *(v18 - 1);
        *v17 = v20;
        v17 += 2;
        v18 += 2;
        v19 -= 4;
      }
      while (v19);
      if (v9 != v16)
      {
LABEL_20:
        v21 = v9 - v16;
        v22 = 8 * v16;
        v23 = (uint64_t *)(v13 + 8 * v16);
        v24 = (_QWORD *)(v14 + v22);
        do
        {
          v25 = *v23++;
          *v24++ = v25;
          --v21;
        }
        while (v21);
      }
    }
    v26 = (_QWORD *)v1[209];
    if (v26 != v8 && v26 != 0)
      MEMORY[0x212BC6368]();
    v1[209] = v15;
    v3 = *(unsigned __int8 *)(v2 + 1944);
    *(_QWORD *)(v15 + 8 * v1[211]) = v6;
    v28 = v1[211];
    v29 = v28 + 1;
    v1[211] = v28 + 1;
    if (v3)
      goto LABEL_37;
  }
  if (!sub_20F9210FC((_QWORD *)(v2 + 328)))
    goto LABEL_37;
  v30 = *(_QWORD *)(v2 + 1416);
  v31 = *(_QWORD *)(v2 + 1424);
  if (v30 == v31)
  {
    v32 = 0;
  }
  else
  {
    v32 = 0;
    v33 = 0;
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(v30 + 136) + 4) & 6) == 0)
        v32 = ++v33;
      v30 += 280;
    }
    while (v30 != v31);
  }
LABEL_38:
  v1[144] += v32;
  v34 = v28 + 2;
  v35 = v1[210];
  if (v28 + 2 <= v35)
  {
    v38 = v15;
    *(_QWORD *)(v15 + 8 * v29) = v32;
    v51 = v1[211];
    v52 = v51 + 1;
    v1[211] = v51 + 1;
    if (v3)
    {
LABEL_64:
      v55 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(_QWORD *)(v2 + 1448) - *(_QWORD *)(v2 + 1440)) >> 3);
      goto LABEL_65;
    }
  }
  else
  {
    v36 = 2 * v35;
    if (v36 > v34)
      v34 = v36;
    v1[210] = v34;
    v37 = operator new[]();
    v38 = v37;
    if (v29)
    {
      v39 = 0;
      if (v29 < 4)
        goto LABEL_47;
      if ((unint64_t)(v37 - v15) < 0x20)
        goto LABEL_47;
      v39 = v29 & 0xFFFFFFFFFFFFFFFCLL;
      v40 = (_OWORD *)(v37 + 16);
      v41 = (__int128 *)(v15 + 16);
      v42 = v29 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v43 = *v41;
        *(v40 - 1) = *(v41 - 1);
        *v40 = v43;
        v40 += 2;
        v41 += 2;
        v42 -= 4;
      }
      while (v42);
      if (v29 != v39)
      {
LABEL_47:
        v44 = v28 - v39 + 1;
        v45 = 8 * v39;
        v46 = (uint64_t *)(v15 + 8 * v39);
        v47 = (_QWORD *)(v37 + v45);
        do
        {
          v48 = *v46++;
          *v47++ = v48;
          --v44;
        }
        while (v44);
      }
    }
    v49 = (_QWORD *)v1[209];
    if (v49 != v8 && v49 != 0)
      MEMORY[0x212BC6368]();
    v1[209] = v38;
    v3 = *(unsigned __int8 *)(v2 + 1944);
    *(_QWORD *)(v38 + 8 * v1[211]) = v32;
    v51 = v1[211];
    v52 = v51 + 1;
    v1[211] = v51 + 1;
    if (v3)
      goto LABEL_64;
  }
  if (!sub_20F9210FC((_QWORD *)(v2 + 328)))
    goto LABEL_64;
  v53 = *(_QWORD *)(v2 + 1440);
  v54 = *(_QWORD *)(v2 + 1448);
  if (v53 == v54)
  {
    v55 = 0;
  }
  else
  {
    v55 = 0;
    v56 = 0;
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(v53 + 136) + 4) & 6) == 0)
        v55 = ++v56;
      v53 += 280;
    }
    while (v53 != v54);
  }
LABEL_65:
  v1[144] += v55;
  v57 = v51 + 2;
  v58 = v1[210];
  if (v51 + 2 <= v58)
  {
    v61 = v38;
    *(_QWORD *)(v38 + 8 * v52) = v55;
    v74 = v1[211];
    v75 = v74 + 1;
    v1[211] = v74 + 1;
    if (v3)
    {
LABEL_91:
      v78 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(_QWORD *)(v2 + 1472) - *(_QWORD *)(v2 + 1464)) >> 3);
      goto LABEL_92;
    }
  }
  else
  {
    v59 = 2 * v58;
    if (v59 > v57)
      v57 = v59;
    v1[210] = v57;
    v60 = operator new[]();
    v61 = v60;
    if (v52)
    {
      v62 = 0;
      if (v52 < 4)
        goto LABEL_74;
      if ((unint64_t)(v60 - v38) < 0x20)
        goto LABEL_74;
      v62 = v52 & 0xFFFFFFFFFFFFFFFCLL;
      v63 = (_OWORD *)(v60 + 16);
      v64 = (__int128 *)(v38 + 16);
      v65 = v52 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v66 = *v64;
        *(v63 - 1) = *(v64 - 1);
        *v63 = v66;
        v63 += 2;
        v64 += 2;
        v65 -= 4;
      }
      while (v65);
      if (v52 != v62)
      {
LABEL_74:
        v67 = v51 - v62 + 1;
        v68 = 8 * v62;
        v69 = (uint64_t *)(v38 + 8 * v62);
        v70 = (_QWORD *)(v60 + v68);
        do
        {
          v71 = *v69++;
          *v70++ = v71;
          --v67;
        }
        while (v67);
      }
    }
    v72 = (_QWORD *)v1[209];
    if (v72 != v8 && v72 != 0)
      MEMORY[0x212BC6368]();
    v1[209] = v61;
    v3 = *(unsigned __int8 *)(v2 + 1944);
    *(_QWORD *)(v61 + 8 * v1[211]) = v55;
    v74 = v1[211];
    v75 = v74 + 1;
    v1[211] = v74 + 1;
    if (v3)
      goto LABEL_91;
  }
  if (!sub_20F9210FC((_QWORD *)(v2 + 328)))
    goto LABEL_91;
  v76 = *(_QWORD *)(v2 + 1464);
  v77 = *(_QWORD *)(v2 + 1472);
  if (v76 == v77)
  {
    v78 = 0;
  }
  else
  {
    v78 = 0;
    v79 = 0;
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(v76 + 136) + 4) & 6) == 0)
        v78 = ++v79;
      v76 += 280;
    }
    while (v76 != v77);
  }
LABEL_92:
  v1[144] += v78;
  v80 = v74 + 2;
  v81 = v1[210];
  if (v74 + 2 <= v81)
  {
    v84 = v61;
    *(_QWORD *)(v61 + 8 * v75) = v78;
    v98 = v1[211];
    v99 = v98 + 1;
    v1[211] = v98 + 1;
    if (v3)
    {
LABEL_118:
      v102 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v2 + 1496) - *(_QWORD *)(v2 + 1488)) >> 5);
      goto LABEL_119;
    }
  }
  else
  {
    v82 = 2 * v81;
    if (v82 > v80)
      v80 = v82;
    v1[210] = v80;
    v83 = operator new[]();
    v84 = v83;
    if (v75)
    {
      v85 = 0;
      if (v75 < 4)
        goto LABEL_101;
      if ((unint64_t)(v83 - v61) < 0x20)
        goto LABEL_101;
      v85 = v75 & 0xFFFFFFFFFFFFFFFCLL;
      v86 = (_OWORD *)(v83 + 16);
      v87 = (__int128 *)(v61 + 16);
      v88 = v75 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v89 = *v87;
        *(v86 - 1) = *(v87 - 1);
        *v86 = v89;
        v86 += 2;
        v87 += 2;
        v88 -= 4;
      }
      while (v88);
      if (v75 != v85)
      {
LABEL_101:
        v90 = v74 - v85 + 1;
        v91 = 8 * v85;
        v92 = (uint64_t *)(v61 + 8 * v85);
        v93 = (_QWORD *)(v83 + v91);
        do
        {
          v94 = *v92++;
          *v93++ = v94;
          --v90;
        }
        while (v90);
      }
    }
    v95 = (_QWORD *)v1[209];
    if (v95 != v8 && v95 != 0)
      MEMORY[0x212BC6368]();
    v1[209] = v84;
    v97 = *(unsigned __int8 *)(v2 + 1944);
    *(_QWORD *)(v84 + 8 * v1[211]) = v78;
    v98 = v1[211];
    v99 = v98 + 1;
    v1[211] = v98 + 1;
    if (v97)
      goto LABEL_118;
  }
  if (!sub_20F9210FC((_QWORD *)(v2 + 328)))
    goto LABEL_118;
  v100 = *(_QWORD *)(v2 + 1488);
  v101 = *(_QWORD *)(v2 + 1496);
  if (v100 == v101)
  {
    v102 = 0;
  }
  else
  {
    v102 = 0;
    v103 = 0;
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(v100 + 64) + 4) & 6) == 0)
        v102 = ++v103;
      v100 += 160;
    }
    while (v100 != v101);
  }
LABEL_119:
  v1[144] += v102;
  v104 = v98 + 2;
  v105 = v1[210];
  if (v98 + 2 <= v105)
  {
    v108 = v84;
  }
  else
  {
    v106 = 2 * v105;
    if (v106 > v104)
      v104 = v106;
    v1[210] = v104;
    v107 = operator new[]();
    v108 = v107;
    if (v99)
    {
      v109 = 0;
      if (v99 < 4)
        goto LABEL_128;
      if ((unint64_t)(v107 - v84) < 0x20)
        goto LABEL_128;
      v109 = v99 & 0xFFFFFFFFFFFFFFFCLL;
      v110 = (_OWORD *)(v107 + 16);
      v111 = (__int128 *)(v84 + 16);
      v112 = v99 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v113 = *v111;
        *(v110 - 1) = *(v111 - 1);
        *v110 = v113;
        v110 += 2;
        v111 += 2;
        v112 -= 4;
      }
      while (v112);
      if (v99 != v109)
      {
LABEL_128:
        v114 = v98 - v109 + 1;
        v115 = 8 * v109;
        v116 = (uint64_t *)(v84 + 8 * v109);
        v117 = (_QWORD *)(v107 + v115);
        do
        {
          v118 = *v116++;
          *v117++ = v118;
          --v114;
        }
        while (v114);
      }
    }
    v119 = (_QWORD *)v1[209];
    if (v119 != v8 && v119 != 0)
      MEMORY[0x212BC6368]();
    v1[209] = v108;
    v99 = v1[211];
  }
  *(_QWORD *)(v108 + 8 * v99) = v102;
  v121 = v1[211];
  v122 = v121 + 1;
  v1[211] = v121 + 1;
  v123 = v2 + 328;
  v124 = sub_20FB5E174(v2 + 328, 0);
  v125 = v124;
  v1[144] += v124;
  v126 = v121 + 2;
  v127 = v1[210];
  if (v121 + 2 <= v127)
  {
    v130 = v108;
    *(_QWORD *)(v108 + 8 * v122) = v124;
    v143 = v1[211];
    v144 = v143 + 1;
    v1[211] = v143 + 1;
    v145 = *(unsigned __int8 *)(v2 + 1944);
    if (*(_BYTE *)(v2 + 1944))
    {
LABEL_166:
      v148 = 0x4515E08719B71393 * ((uint64_t)(*(_QWORD *)(v2 + 1544) - *(_QWORD *)(v2 + 1536)) >> 3);
      goto LABEL_167;
    }
  }
  else
  {
    v128 = 2 * v127;
    if (v128 > v126)
      v126 = v128;
    v1[210] = v126;
    v129 = operator new[]();
    v130 = v129;
    if (v121 != -1)
    {
      v131 = 0;
      if (v122 < 4)
        goto LABEL_146;
      if ((unint64_t)(v129 - v108) < 0x20)
        goto LABEL_146;
      v131 = v122 & 0xFFFFFFFFFFFFFFFCLL;
      v132 = (_OWORD *)(v129 + 16);
      v133 = (__int128 *)(v108 + 16);
      v134 = v122 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v135 = *v133;
        *(v132 - 1) = *(v133 - 1);
        *v132 = v135;
        v132 += 2;
        v133 += 2;
        v134 -= 4;
      }
      while (v134);
      if (v122 != v131)
      {
LABEL_146:
        v136 = v121 - v131 + 1;
        v137 = 8 * v131;
        v138 = (uint64_t *)(v108 + 8 * v131);
        v139 = (_QWORD *)(v129 + v137);
        do
        {
          v140 = *v138++;
          *v139++ = v140;
          --v136;
        }
        while (v136);
      }
    }
    v141 = (_QWORD *)v1[209];
    if (v141 != v8 && v141 != 0)
      MEMORY[0x212BC6368]();
    v1[209] = v130;
    *(_QWORD *)(v130 + 8 * v1[211]) = v125;
    v143 = v1[211];
    v144 = v143 + 1;
    v1[211] = v143 + 1;
    v145 = *(unsigned __int8 *)(v2 + 1944);
    if (*(_BYTE *)(v2 + 1944))
      goto LABEL_166;
  }
  if (!sub_20F9210FC((_QWORD *)(v2 + 328)))
    goto LABEL_166;
  v146 = *(_QWORD **)(v2 + 1536);
  v147 = *(_QWORD **)(v2 + 1544);
  if (v146 == v147)
  {
    v148 = 0;
  }
  else
  {
    v148 = 0;
    v149 = 0;
    do
    {
      if ((*(_BYTE *)(v146[628] + 4) & 6) == 0
        && (*(_BYTE *)(v146[629] + 4) & 6) == 0
        && (*(_BYTE *)(v146[630] + 4) & 6) == 0
        && (*(_BYTE *)(v146[631] + 4) & 6) == 0)
      {
        v148 = ++v149;
      }
      v146 += 667;
    }
    while (v146 != v147);
  }
LABEL_167:
  v1[144] += v148;
  v150 = v143 + 2;
  v151 = v1[210];
  if (v143 + 2 <= v151)
  {
    v154 = v130;
    *(_QWORD *)(v130 + 8 * v144) = v148;
    v167 = v1[211];
    v168 = v167 + 1;
    v1[211] = v167 + 1;
    if (v145)
    {
LABEL_193:
      v171 = 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(v2 + 1568) - *(_QWORD *)(v2 + 1560)) >> 4);
      goto LABEL_194;
    }
  }
  else
  {
    v152 = 2 * v151;
    if (v152 > v150)
      v150 = v152;
    v1[210] = v150;
    v153 = operator new[]();
    v154 = v153;
    if (v144)
    {
      v155 = 0;
      if (v144 < 4)
        goto LABEL_176;
      if ((unint64_t)(v153 - v130) < 0x20)
        goto LABEL_176;
      v155 = v144 & 0xFFFFFFFFFFFFFFFCLL;
      v156 = (_OWORD *)(v153 + 16);
      v157 = (__int128 *)(v130 + 16);
      v158 = v144 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v159 = *v157;
        *(v156 - 1) = *(v157 - 1);
        *v156 = v159;
        v156 += 2;
        v157 += 2;
        v158 -= 4;
      }
      while (v158);
      if (v144 != v155)
      {
LABEL_176:
        v160 = v143 - v155 + 1;
        v161 = 8 * v155;
        v162 = (uint64_t *)(v130 + 8 * v155);
        v163 = (_QWORD *)(v153 + v161);
        do
        {
          v164 = *v162++;
          *v163++ = v164;
          --v160;
        }
        while (v160);
      }
    }
    v165 = (_QWORD *)v1[209];
    if (v165 != v8 && v165 != 0)
      MEMORY[0x212BC6368]();
    v1[209] = v154;
    v145 = *(unsigned __int8 *)(v2 + 1944);
    *(_QWORD *)(v154 + 8 * v1[211]) = v148;
    v167 = v1[211];
    v168 = v167 + 1;
    v1[211] = v167 + 1;
    if (v145)
      goto LABEL_193;
  }
  if (!sub_20F9210FC((_QWORD *)(v2 + 328)))
    goto LABEL_193;
  v169 = *(_QWORD *)(v2 + 1560);
  v170 = *(_QWORD *)(v2 + 1568);
  if (v169 == v170)
  {
    v171 = 0;
  }
  else
  {
    v171 = 0;
    v172 = 0;
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(v169 + 48) + 4) & 6) == 0)
        v171 = ++v172;
      v169 += 144;
    }
    while (v169 != v170);
  }
LABEL_194:
  v1[144] += v171;
  v173 = v167 + 2;
  v174 = v1[210];
  if (v167 + 2 <= v174)
  {
    v177 = v154;
    *(_QWORD *)(v154 + 8 * v168) = v171;
    v190 = v1[211];
    v191 = v190 + 1;
    v1[211] = v190 + 1;
    if (v145)
    {
LABEL_221:
      v194 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(_QWORD *)(v2 + 1592) - *(_QWORD *)(v2 + 1584)) >> 3);
      goto LABEL_222;
    }
  }
  else
  {
    v175 = 2 * v174;
    if (v175 > v173)
      v173 = v175;
    v1[210] = v173;
    v176 = operator new[]();
    v177 = v176;
    if (v168)
    {
      v178 = 0;
      if (v168 < 4)
        goto LABEL_203;
      if ((unint64_t)(v176 - v154) < 0x20)
        goto LABEL_203;
      v178 = v168 & 0xFFFFFFFFFFFFFFFCLL;
      v179 = (_OWORD *)(v176 + 16);
      v180 = (__int128 *)(v154 + 16);
      v181 = v168 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v182 = *v180;
        *(v179 - 1) = *(v180 - 1);
        *v179 = v182;
        v179 += 2;
        v180 += 2;
        v181 -= 4;
      }
      while (v181);
      if (v168 != v178)
      {
LABEL_203:
        v183 = v167 - v178 + 1;
        v184 = 8 * v178;
        v185 = (uint64_t *)(v154 + 8 * v178);
        v186 = (_QWORD *)(v176 + v184);
        do
        {
          v187 = *v185++;
          *v186++ = v187;
          --v183;
        }
        while (v183);
      }
    }
    v188 = (_QWORD *)v1[209];
    if (v188 != v8 && v188 != 0)
      MEMORY[0x212BC6368]();
    v1[209] = v177;
    v145 = *(unsigned __int8 *)(v2 + 1944);
    *(_QWORD *)(v177 + 8 * v1[211]) = v171;
    v190 = v1[211];
    v191 = v190 + 1;
    v1[211] = v190 + 1;
    if (v145)
      goto LABEL_221;
  }
  if (!sub_20F9210FC((_QWORD *)(v2 + 328)))
    goto LABEL_221;
  v192 = *(_QWORD *)(v2 + 1584);
  v193 = *(_QWORD *)(v2 + 1592);
  if (v192 == v193)
  {
    v194 = 0;
  }
  else
  {
    v194 = 0;
    v195 = 0;
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(v192 + 48) + 4) & 6) == 0 && (*(_BYTE *)(*(_QWORD *)(v192 + 56) + 4) & 6) == 0)
        v194 = ++v195;
      v192 += 152;
    }
    while (v192 != v193);
  }
LABEL_222:
  v1[144] += v194;
  v196 = v190 + 2;
  v197 = v1[210];
  if (v190 + 2 <= v197)
  {
    v200 = v177;
    *(_QWORD *)(v177 + 8 * v191) = v194;
    v213 = v1[211];
    v214 = v213 + 1;
    v1[211] = v213 + 1;
    if (v145)
    {
LABEL_251:
      v217 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(_QWORD *)(v2 + 1616) - *(_QWORD *)(v2 + 1608)) >> 4);
      goto LABEL_252;
    }
  }
  else
  {
    v198 = 2 * v197;
    if (v198 > v196)
      v196 = v198;
    v1[210] = v196;
    v199 = operator new[]();
    v200 = v199;
    if (v191)
    {
      v201 = 0;
      if (v191 < 4)
        goto LABEL_231;
      if ((unint64_t)(v199 - v177) < 0x20)
        goto LABEL_231;
      v201 = v191 & 0xFFFFFFFFFFFFFFFCLL;
      v202 = (_OWORD *)(v199 + 16);
      v203 = (__int128 *)(v177 + 16);
      v204 = v191 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v205 = *v203;
        *(v202 - 1) = *(v203 - 1);
        *v202 = v205;
        v202 += 2;
        v203 += 2;
        v204 -= 4;
      }
      while (v204);
      if (v191 != v201)
      {
LABEL_231:
        v206 = v190 - v201 + 1;
        v207 = 8 * v201;
        v208 = (uint64_t *)(v177 + 8 * v201);
        v209 = (_QWORD *)(v199 + v207);
        do
        {
          v210 = *v208++;
          *v209++ = v210;
          --v206;
        }
        while (v206);
      }
    }
    v211 = (_QWORD *)v1[209];
    if (v211 != v8 && v211 != 0)
      MEMORY[0x212BC6368]();
    v1[209] = v200;
    v145 = *(unsigned __int8 *)(v2 + 1944);
    *(_QWORD *)(v200 + 8 * v1[211]) = v194;
    v213 = v1[211];
    v214 = v213 + 1;
    v1[211] = v213 + 1;
    if (v145)
      goto LABEL_251;
  }
  if (!sub_20F9210FC((_QWORD *)(v2 + 328)))
    goto LABEL_251;
  v215 = *(_QWORD **)(v2 + 1608);
  v216 = *(_QWORD **)(v2 + 1616);
  if (v215 == v216)
  {
    v217 = 0;
  }
  else
  {
    v217 = 0;
    v218 = 0;
    do
    {
      if ((*(_BYTE *)(v215[25] + 4) & 6) == 0
        && (*(_BYTE *)(v215[26] + 4) & 6) == 0
        && (*(_BYTE *)(v215[27] + 4) & 6) == 0
        && (*(_BYTE *)(v215[28] + 4) & 6) == 0)
      {
        v217 = ++v218;
      }
      v215 += 38;
    }
    while (v215 != v216);
  }
LABEL_252:
  v1[144] += v217;
  v219 = v213 + 2;
  v220 = v1[210];
  if (v213 + 2 <= v220)
  {
    v223 = v200;
    *(_QWORD *)(v200 + 8 * v214) = v217;
    v236 = v1[211];
    v237 = v236 + 1;
    v1[211] = v236 + 1;
    if (v145)
    {
LABEL_283:
      v240 = 0x4FA4FA4FA4FA4FA5 * ((uint64_t)(*(_QWORD *)(v2 + 1640) - *(_QWORD *)(v2 + 1632)) >> 3);
      goto LABEL_284;
    }
  }
  else
  {
    v221 = 2 * v220;
    if (v221 > v219)
      v219 = v221;
    v1[210] = v219;
    v222 = operator new[]();
    v223 = v222;
    if (v214)
    {
      v224 = 0;
      if (v214 < 4)
        goto LABEL_261;
      if ((unint64_t)(v222 - v200) < 0x20)
        goto LABEL_261;
      v224 = v214 & 0xFFFFFFFFFFFFFFFCLL;
      v225 = (_OWORD *)(v222 + 16);
      v226 = (__int128 *)(v200 + 16);
      v227 = v214 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v228 = *v226;
        *(v225 - 1) = *(v226 - 1);
        *v225 = v228;
        v225 += 2;
        v226 += 2;
        v227 -= 4;
      }
      while (v227);
      if (v214 != v224)
      {
LABEL_261:
        v229 = v213 - v224 + 1;
        v230 = 8 * v224;
        v231 = (uint64_t *)(v200 + 8 * v224);
        v232 = (_QWORD *)(v222 + v230);
        do
        {
          v233 = *v231++;
          *v232++ = v233;
          --v229;
        }
        while (v229);
      }
    }
    v234 = (_QWORD *)v1[209];
    if (v234 != v8 && v234 != 0)
      MEMORY[0x212BC6368]();
    v1[209] = v223;
    v145 = *(unsigned __int8 *)(v2 + 1944);
    *(_QWORD *)(v223 + 8 * v1[211]) = v217;
    v236 = v1[211];
    v237 = v236 + 1;
    v1[211] = v236 + 1;
    if (v145)
      goto LABEL_283;
  }
  if (!sub_20F9210FC((_QWORD *)(v2 + 328)))
    goto LABEL_283;
  v238 = *(_QWORD **)(v2 + 1632);
  v239 = *(_QWORD **)(v2 + 1640);
  if (v238 == v239)
  {
    v240 = 0;
  }
  else
  {
    v240 = 0;
    v241 = 0;
    do
    {
      if ((*(_BYTE *)(v238[28] + 4) & 6) == 0
        && (*(_BYTE *)(v238[29] + 4) & 6) == 0
        && (*(_BYTE *)(v238[30] + 4) & 6) == 0
        && (*(_BYTE *)(v238[31] + 4) & 6) == 0
        && (*(_BYTE *)(v238[32] + 4) & 6) == 0
        && (*(_BYTE *)(v238[33] + 4) & 6) == 0)
      {
        v240 = ++v241;
      }
      v238 += 45;
    }
    while (v238 != v239);
  }
LABEL_284:
  v1[144] += v240;
  v242 = v236 + 2;
  v243 = v1[210];
  if (v236 + 2 <= v243)
  {
    v246 = v223;
    *(_QWORD *)(v223 + 8 * v237) = v240;
    v259 = v1[211];
    v260 = v259 + 1;
    v1[211] = v259 + 1;
    if (v145)
    {
LABEL_310:
      v263 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v2 + 1664) - *(_QWORD *)(v2 + 1656)) >> 4);
      goto LABEL_311;
    }
  }
  else
  {
    v244 = 2 * v243;
    if (v244 > v242)
      v242 = v244;
    v1[210] = v242;
    v245 = operator new[]();
    v246 = v245;
    if (v237)
    {
      v247 = 0;
      if (v237 < 4)
        goto LABEL_293;
      if ((unint64_t)(v245 - v223) < 0x20)
        goto LABEL_293;
      v247 = v237 & 0xFFFFFFFFFFFFFFFCLL;
      v248 = (_OWORD *)(v245 + 16);
      v249 = (__int128 *)(v223 + 16);
      v250 = v237 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v251 = *v249;
        *(v248 - 1) = *(v249 - 1);
        *v248 = v251;
        v248 += 2;
        v249 += 2;
        v250 -= 4;
      }
      while (v250);
      if (v237 != v247)
      {
LABEL_293:
        v252 = v236 - v247 + 1;
        v253 = 8 * v247;
        v254 = (uint64_t *)(v223 + 8 * v247);
        v255 = (_QWORD *)(v245 + v253);
        do
        {
          v256 = *v254++;
          *v255++ = v256;
          --v252;
        }
        while (v252);
      }
    }
    v257 = (_QWORD *)v1[209];
    if (v257 != v8 && v257 != 0)
      MEMORY[0x212BC6368]();
    v1[209] = v246;
    v145 = *(unsigned __int8 *)(v2 + 1944);
    *(_QWORD *)(v246 + 8 * v1[211]) = v240;
    v259 = v1[211];
    v260 = v259 + 1;
    v1[211] = v259 + 1;
    if (v145)
      goto LABEL_310;
  }
  if (!sub_20F9210FC((_QWORD *)(v2 + 328)))
    goto LABEL_310;
  v261 = *(_QWORD *)(v2 + 1656);
  v262 = *(_QWORD *)(v2 + 1664);
  if (v261 == v262)
  {
    v263 = 0;
  }
  else
  {
    v263 = 0;
    v264 = 0;
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(v261 + 48) + 4) & 6) == 0)
        v263 = ++v264;
      v261 += 112;
    }
    while (v261 != v262);
  }
LABEL_311:
  v1[144] += v263;
  v265 = v259 + 2;
  v266 = v1[210];
  if (v259 + 2 <= v266)
  {
    v269 = v246;
    *(_QWORD *)(v246 + 8 * v260) = v263;
    v282 = v1[211];
    v283 = v282 + 1;
    v1[211] = v282 + 1;
    if (v145)
    {
LABEL_337:
      v286 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(v2 + 1688) - *(_QWORD *)(v2 + 1680)) >> 4);
      goto LABEL_338;
    }
  }
  else
  {
    v267 = 2 * v266;
    if (v267 > v265)
      v265 = v267;
    v1[210] = v265;
    v268 = operator new[]();
    v269 = v268;
    if (v260)
    {
      v270 = 0;
      if (v260 < 4)
        goto LABEL_320;
      if ((unint64_t)(v268 - v246) < 0x20)
        goto LABEL_320;
      v270 = v260 & 0xFFFFFFFFFFFFFFFCLL;
      v271 = (_OWORD *)(v268 + 16);
      v272 = (__int128 *)(v246 + 16);
      v273 = v260 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v274 = *v272;
        *(v271 - 1) = *(v272 - 1);
        *v271 = v274;
        v271 += 2;
        v272 += 2;
        v273 -= 4;
      }
      while (v273);
      if (v260 != v270)
      {
LABEL_320:
        v275 = v259 - v270 + 1;
        v276 = 8 * v270;
        v277 = (uint64_t *)(v246 + 8 * v270);
        v278 = (_QWORD *)(v268 + v276);
        do
        {
          v279 = *v277++;
          *v278++ = v279;
          --v275;
        }
        while (v275);
      }
    }
    v280 = (_QWORD *)v1[209];
    if (v280 != v8 && v280 != 0)
      MEMORY[0x212BC6368]();
    v1[209] = v269;
    v145 = *(unsigned __int8 *)(v2 + 1944);
    *(_QWORD *)(v269 + 8 * v1[211]) = v263;
    v282 = v1[211];
    v283 = v282 + 1;
    v1[211] = v282 + 1;
    if (v145)
      goto LABEL_337;
  }
  if (!sub_20F9210FC((_QWORD *)(v2 + 328)))
    goto LABEL_337;
  v284 = *(_QWORD *)(v2 + 1680);
  v285 = *(_QWORD *)(v2 + 1688);
  if (v284 == v285)
  {
    v286 = 0;
  }
  else
  {
    v286 = 0;
    v287 = 0;
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(v284 + 96) + 4) & 6) == 0)
        v286 = ++v287;
      v284 += 208;
    }
    while (v284 != v285);
  }
LABEL_338:
  v1[144] += v286;
  v288 = v282 + 2;
  v289 = v1[210];
  if (v282 + 2 <= v289)
  {
    v292 = v269;
    *(_QWORD *)(v269 + 8 * v283) = v286;
    v305 = v1[211];
    v306 = v305 + 1;
    v1[211] = v305 + 1;
    if (v145)
    {
LABEL_364:
      v309 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(v2 + 1712) - *(_QWORD *)(v2 + 1704)) >> 4);
      goto LABEL_365;
    }
  }
  else
  {
    v290 = 2 * v289;
    if (v290 > v288)
      v288 = v290;
    v1[210] = v288;
    v291 = operator new[]();
    v292 = v291;
    if (v283)
    {
      v293 = 0;
      if (v283 < 4)
        goto LABEL_347;
      if ((unint64_t)(v291 - v269) < 0x20)
        goto LABEL_347;
      v293 = v283 & 0xFFFFFFFFFFFFFFFCLL;
      v294 = (_OWORD *)(v291 + 16);
      v295 = (__int128 *)(v269 + 16);
      v296 = v283 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v297 = *v295;
        *(v294 - 1) = *(v295 - 1);
        *v294 = v297;
        v294 += 2;
        v295 += 2;
        v296 -= 4;
      }
      while (v296);
      if (v283 != v293)
      {
LABEL_347:
        v298 = v282 - v293 + 1;
        v299 = 8 * v293;
        v300 = (uint64_t *)(v269 + 8 * v293);
        v301 = (_QWORD *)(v291 + v299);
        do
        {
          v302 = *v300++;
          *v301++ = v302;
          --v298;
        }
        while (v298);
      }
    }
    v303 = (_QWORD *)v1[209];
    if (v303 != v8 && v303 != 0)
      MEMORY[0x212BC6368]();
    v1[209] = v292;
    v145 = *(unsigned __int8 *)(v2 + 1944);
    *(_QWORD *)(v292 + 8 * v1[211]) = v286;
    v305 = v1[211];
    v306 = v305 + 1;
    v1[211] = v305 + 1;
    if (v145)
      goto LABEL_364;
  }
  if (!sub_20F9210FC((_QWORD *)(v2 + 328)))
    goto LABEL_364;
  v307 = *(_QWORD *)(v2 + 1704);
  v308 = *(_QWORD *)(v2 + 1712);
  if (v307 == v308)
  {
    v309 = 0;
  }
  else
  {
    v309 = 0;
    v310 = 0;
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(v307 + 96) + 4) & 6) == 0)
        v309 = ++v310;
      v307 += 208;
    }
    while (v307 != v308);
  }
LABEL_365:
  v1[144] += v309;
  v311 = v305 + 2;
  v312 = v1[210];
  if (v305 + 2 <= v312)
  {
    v315 = v292;
    *(_QWORD *)(v292 + 8 * v306) = v309;
    v328 = v1[211];
    v329 = v328 + 1;
    v1[211] = v328 + 1;
    if (v145)
    {
LABEL_391:
      v332 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(v2 + 1736) - *(_QWORD *)(v2 + 1728)) >> 4);
      goto LABEL_392;
    }
  }
  else
  {
    v313 = 2 * v312;
    if (v313 > v311)
      v311 = v313;
    v1[210] = v311;
    v314 = operator new[]();
    v315 = v314;
    if (v306)
    {
      v316 = 0;
      if (v306 < 4)
        goto LABEL_374;
      if ((unint64_t)(v314 - v292) < 0x20)
        goto LABEL_374;
      v316 = v306 & 0xFFFFFFFFFFFFFFFCLL;
      v317 = (_OWORD *)(v314 + 16);
      v318 = (__int128 *)(v292 + 16);
      v319 = v306 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v320 = *v318;
        *(v317 - 1) = *(v318 - 1);
        *v317 = v320;
        v317 += 2;
        v318 += 2;
        v319 -= 4;
      }
      while (v319);
      if (v306 != v316)
      {
LABEL_374:
        v321 = v305 - v316 + 1;
        v322 = 8 * v316;
        v323 = (uint64_t *)(v292 + 8 * v316);
        v324 = (_QWORD *)(v314 + v322);
        do
        {
          v325 = *v323++;
          *v324++ = v325;
          --v321;
        }
        while (v321);
      }
    }
    v326 = (_QWORD *)v1[209];
    if (v326 != v8 && v326 != 0)
      MEMORY[0x212BC6368]();
    v1[209] = v315;
    v145 = *(unsigned __int8 *)(v2 + 1944);
    *(_QWORD *)(v315 + 8 * v1[211]) = v309;
    v328 = v1[211];
    v329 = v328 + 1;
    v1[211] = v328 + 1;
    if (v145)
      goto LABEL_391;
  }
  if (!sub_20F9210FC((_QWORD *)(v2 + 328)))
    goto LABEL_391;
  v330 = *(_QWORD *)(v2 + 1728);
  v331 = *(_QWORD *)(v2 + 1736);
  if (v330 == v331)
  {
    v332 = 0;
  }
  else
  {
    v332 = 0;
    v333 = 0;
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(v330 + 80) + 4) & 6) == 0)
        v332 = ++v333;
      v330 += 176;
    }
    while (v330 != v331);
  }
LABEL_392:
  v1[144] += v332;
  v334 = v328 + 2;
  v335 = v1[210];
  if (v328 + 2 <= v335)
  {
    v338 = v315;
    *(_QWORD *)(v315 + 8 * v329) = v332;
    v351 = v1[211];
    v352 = v351 + 1;
    v1[211] = v351 + 1;
    if (v145)
    {
LABEL_418:
      v355 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(v2 + 1760) - *(_QWORD *)(v2 + 1752)) >> 4);
      goto LABEL_419;
    }
  }
  else
  {
    v336 = 2 * v335;
    if (v336 > v334)
      v334 = v336;
    v1[210] = v334;
    v337 = operator new[]();
    v338 = v337;
    if (v329)
    {
      v339 = 0;
      if (v329 < 4)
        goto LABEL_401;
      if ((unint64_t)(v337 - v315) < 0x20)
        goto LABEL_401;
      v339 = v329 & 0xFFFFFFFFFFFFFFFCLL;
      v340 = (_OWORD *)(v337 + 16);
      v341 = (__int128 *)(v315 + 16);
      v342 = v329 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v343 = *v341;
        *(v340 - 1) = *(v341 - 1);
        *v340 = v343;
        v340 += 2;
        v341 += 2;
        v342 -= 4;
      }
      while (v342);
      if (v329 != v339)
      {
LABEL_401:
        v344 = v328 - v339 + 1;
        v345 = 8 * v339;
        v346 = (uint64_t *)(v315 + 8 * v339);
        v347 = (_QWORD *)(v337 + v345);
        do
        {
          v348 = *v346++;
          *v347++ = v348;
          --v344;
        }
        while (v344);
      }
    }
    v349 = (_QWORD *)v1[209];
    if (v349 != v8 && v349 != 0)
      MEMORY[0x212BC6368]();
    v1[209] = v338;
    v145 = *(unsigned __int8 *)(v2 + 1944);
    *(_QWORD *)(v338 + 8 * v1[211]) = v332;
    v351 = v1[211];
    v352 = v351 + 1;
    v1[211] = v351 + 1;
    if (v145)
      goto LABEL_418;
  }
  if (!sub_20F9210FC((_QWORD *)(v2 + 328)))
    goto LABEL_418;
  v353 = *(_QWORD *)(v2 + 1752);
  v354 = *(_QWORD *)(v2 + 1760);
  if (v353 == v354)
  {
    v355 = 0;
  }
  else
  {
    v355 = 0;
    v356 = 0;
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(v353 + 80) + 4) & 6) == 0)
        v355 = ++v356;
      v353 += 176;
    }
    while (v353 != v354);
  }
LABEL_419:
  v1[144] += v355;
  v357 = v351 + 2;
  v358 = v1[210];
  if (v351 + 2 <= v358)
  {
    v361 = v338;
    *(_QWORD *)(v338 + 8 * v352) = v355;
    v374 = v1[211];
    v375 = v374 + 1;
    v1[211] = v374 + 1;
    if (v145)
      goto LABEL_440;
  }
  else
  {
    v359 = 2 * v358;
    if (v359 > v357)
      v357 = v359;
    v1[210] = v357;
    v360 = operator new[]();
    v361 = v360;
    if (v352)
    {
      v362 = 0;
      if (v352 < 4)
        goto LABEL_428;
      if ((unint64_t)(v360 - v338) < 0x20)
        goto LABEL_428;
      v362 = v352 & 0xFFFFFFFFFFFFFFFCLL;
      v363 = (_OWORD *)(v360 + 16);
      v364 = (__int128 *)(v338 + 16);
      v365 = v352 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v366 = *v364;
        *(v363 - 1) = *(v364 - 1);
        *v363 = v366;
        v363 += 2;
        v364 += 2;
        v365 -= 4;
      }
      while (v365);
      if (v352 != v362)
      {
LABEL_428:
        v367 = v351 - v362 + 1;
        v368 = 8 * v362;
        v369 = (uint64_t *)(v338 + 8 * v362);
        v370 = (_QWORD *)(v360 + v368);
        do
        {
          v371 = *v369++;
          *v370++ = v371;
          --v367;
        }
        while (v367);
      }
    }
    v372 = (_QWORD *)v1[209];
    if (v372 != v8 && v372 != 0)
      MEMORY[0x212BC6368]();
    v1[209] = v361;
    v145 = *(unsigned __int8 *)(v2 + 1944);
    *(_QWORD *)(v361 + 8 * v1[211]) = v355;
    v374 = v1[211];
    v375 = v374 + 1;
    v1[211] = v374 + 1;
    if (v145)
      goto LABEL_440;
  }
  if (sub_20F9210FC((_QWORD *)(v2 + 328)))
  {
    sub_20F9235BC(*(_QWORD **)(v2 + 1776), *(_QWORD **)(v2 + 1784), (uint64_t)v683);
    v376 = v684;
    goto LABEL_441;
  }
LABEL_440:
  v376 = 0x84BDA12F684BDA13 * ((uint64_t)(*(_QWORD *)(v2 + 1784) - *(_QWORD *)(v2 + 1776)) >> 3);
LABEL_441:
  v1[144] += v376;
  v377 = v374 + 2;
  v378 = v1[210];
  if (v374 + 2 <= v378)
  {
    v381 = v361;
    *(_QWORD *)(v361 + 8 * v375) = v376;
    v394 = v1[211];
    v395 = v394 + 1;
    v1[211] = v394 + 1;
    if (v145)
    {
LABEL_472:
      v398 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(_QWORD *)(v2 + 1808) - *(_QWORD *)(v2 + 1800)) >> 3);
      goto LABEL_473;
    }
  }
  else
  {
    v379 = 2 * v378;
    if (v379 > v377)
      v377 = v379;
    v1[210] = v377;
    v380 = operator new[]();
    v381 = v380;
    if (v375)
    {
      v382 = 0;
      if (v375 < 4)
        goto LABEL_450;
      if ((unint64_t)(v380 - v361) < 0x20)
        goto LABEL_450;
      v382 = v375 & 0xFFFFFFFFFFFFFFFCLL;
      v383 = (_OWORD *)(v380 + 16);
      v384 = (__int128 *)(v361 + 16);
      v385 = v375 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v386 = *v384;
        *(v383 - 1) = *(v384 - 1);
        *v383 = v386;
        v383 += 2;
        v384 += 2;
        v385 -= 4;
      }
      while (v385);
      if (v375 != v382)
      {
LABEL_450:
        v387 = v374 - v382 + 1;
        v388 = 8 * v382;
        v389 = (uint64_t *)(v361 + 8 * v382);
        v390 = (_QWORD *)(v380 + v388);
        do
        {
          v391 = *v389++;
          *v390++ = v391;
          --v387;
        }
        while (v387);
      }
    }
    v392 = (_QWORD *)v1[209];
    if (v392 != v8 && v392 != 0)
      MEMORY[0x212BC6368]();
    v1[209] = v381;
    v145 = *(unsigned __int8 *)(v2 + 1944);
    *(_QWORD *)(v381 + 8 * v1[211]) = v376;
    v394 = v1[211];
    v395 = v394 + 1;
    v1[211] = v394 + 1;
    if (v145)
      goto LABEL_472;
  }
  if (!sub_20F9210FC((_QWORD *)(v2 + 328)))
    goto LABEL_472;
  v396 = *(_QWORD **)(v2 + 1800);
  v397 = *(_QWORD **)(v2 + 1808);
  if (v396 == v397)
  {
    v398 = 0;
  }
  else
  {
    v398 = 0;
    v399 = 0;
    do
    {
      if ((*(_BYTE *)(v396[8] + 4) & 6) == 0
        && (*(_BYTE *)(v396[9] + 4) & 6) == 0
        && (*(_BYTE *)(v396[10] + 4) & 6) == 0
        && (*(_BYTE *)(v396[11] + 4) & 6) == 0
        && (*(_BYTE *)(v396[12] + 4) & 6) == 0
        && (*(_BYTE *)(v396[13] + 4) & 6) == 0)
      {
        v398 = ++v399;
      }
      v396 += 23;
    }
    while (v396 != v397);
  }
LABEL_473:
  v1[144] += v398;
  v400 = v394 + 2;
  v401 = v1[210];
  if (v394 + 2 <= v401)
  {
    *(_QWORD *)(v381 + 8 * v395) = v398;
    v418 = v1[211];
    v419 = v418 + 1;
    v1[211] = v418 + 1;
    if (v145)
      goto LABEL_494;
  }
  else
  {
    v402 = 2 * v401;
    if (v402 > v400)
      v400 = v402;
    v1[210] = v400;
    v403 = operator new[]();
    v404 = v403;
    if (v395)
    {
      v405 = 0;
      if (v395 < 4)
        goto LABEL_482;
      if ((unint64_t)(v403 - v381) < 0x20)
        goto LABEL_482;
      v405 = v395 & 0xFFFFFFFFFFFFFFFCLL;
      v406 = (_OWORD *)(v403 + 16);
      v407 = (__int128 *)(v381 + 16);
      v408 = v395 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v409 = *v407;
        *(v406 - 1) = *(v407 - 1);
        *v406 = v409;
        v406 += 2;
        v407 += 2;
        v408 -= 4;
      }
      while (v408);
      if (v395 != v405)
      {
LABEL_482:
        v410 = v394 - v405 + 1;
        v411 = 8 * v405;
        v412 = (uint64_t *)(v381 + 8 * v405);
        v413 = (_QWORD *)(v403 + v411);
        do
        {
          v414 = *v412++;
          *v413++ = v414;
          --v410;
        }
        while (v410);
      }
    }
    v415 = (_QWORD *)v1[209];
    if (v415 != v8 && v415 != 0)
      MEMORY[0x212BC6368]();
    v1[209] = v404;
    v417 = *(unsigned __int8 *)(v2 + 1944);
    *(_QWORD *)(v404 + 8 * v1[211]) = v398;
    v418 = v1[211];
    v419 = v418 + 1;
    v1[211] = v418 + 1;
    if (v417)
      goto LABEL_494;
  }
  if (sub_20F9210FC((_QWORD *)(v2 + 328)))
  {
    sub_20F921AD8(*(_QWORD **)(v2 + 1824), *(_QWORD **)(v2 + 1832), (uint64_t)v683);
    v420 = v685;
    goto LABEL_495;
  }
LABEL_494:
  v420 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(v2 + 1832) - *(_QWORD *)(v2 + 1824)) >> 4);
LABEL_495:
  v1[144] += v420;
  v421 = v418 + 2;
  v422 = v1[210];
  if (v418 + 2 <= v422)
  {
    v426 = v1[209];
  }
  else
  {
    v423 = 2 * v422;
    if (v423 > v421)
      v421 = v423;
    v1[210] = v421;
    v424 = v1[209];
    v425 = operator new[]();
    v426 = v425;
    if (v419)
    {
      v427 = 0;
      if (v419 < 4)
        goto LABEL_504;
      if ((unint64_t)(v425 - v424) < 0x20)
        goto LABEL_504;
      v427 = v419 & 0xFFFFFFFFFFFFFFFCLL;
      v428 = (_OWORD *)(v425 + 16);
      v429 = (__int128 *)(v424 + 16);
      v430 = v419 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v431 = *v429;
        *(v428 - 1) = *(v429 - 1);
        *v428 = v431;
        v428 += 2;
        v429 += 2;
        v430 -= 4;
      }
      while (v430);
      if (v419 != v427)
      {
LABEL_504:
        v432 = v418 - v427 + 1;
        v433 = 8 * v427;
        v434 = (uint64_t *)(v424 + 8 * v427);
        v435 = (_QWORD *)(v425 + v433);
        do
        {
          v436 = *v434++;
          *v435++ = v436;
          --v432;
        }
        while (v432);
      }
    }
    v437 = (_QWORD *)v1[209];
    if (v437 != v8 && v437 != 0)
      MEMORY[0x212BC6368]();
    v1[209] = v426;
    v419 = v1[211];
  }
  *(_QWORD *)(v426 + 8 * v419) = v420;
  v439 = v1[211];
  v440 = v439 + 1;
  v1[211] = v439 + 1;
  v441 = sub_20FB5E964(v123, 0);
  v1[144] += v441;
  v442 = v439 + 2;
  v443 = v1[210];
  if (v439 + 2 <= v443)
  {
    v446 = v426;
  }
  else
  {
    v444 = 2 * v443;
    if (v444 > v442)
      v442 = v444;
    v1[210] = v442;
    v445 = operator new[]();
    v446 = v445;
    if (v439 != -1)
    {
      v447 = 0;
      if (v440 < 4)
        goto LABEL_522;
      if ((unint64_t)(v445 - v426) < 0x20)
        goto LABEL_522;
      v447 = v440 & 0xFFFFFFFFFFFFFFFCLL;
      v448 = (_OWORD *)(v445 + 16);
      v449 = (__int128 *)(v426 + 16);
      v450 = v440 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v451 = *v449;
        *(v448 - 1) = *(v449 - 1);
        *v448 = v451;
        v448 += 2;
        v449 += 2;
        v450 -= 4;
      }
      while (v450);
      if (v440 != v447)
      {
LABEL_522:
        v452 = v439 - v447 + 1;
        v453 = 8 * v447;
        v454 = (uint64_t *)(v426 + 8 * v447);
        v455 = (_QWORD *)(v445 + v453);
        do
        {
          v456 = *v454++;
          *v455++ = v456;
          --v452;
        }
        while (v452);
      }
    }
    v457 = (_QWORD *)v1[209];
    if (v457 != v8 && v457 != 0)
      MEMORY[0x212BC6368]();
    v1[209] = v446;
    v440 = v1[211];
  }
  *(_QWORD *)(v446 + 8 * v440) = v441;
  ++v1[211];
  v459 = (int64x2_t *)a1[1];
  v460 = v459 + 107;
  v461 = *a1 + 328;
  v462 = sub_20FB59E1C(v461);
  v459[106].i64[0] += v462;
  v459[106].i64[1] += 6 * v462;
  v463 = v459[140].u64[0];
  v464 = v463 + 1;
  v465 = v459[139].u64[1];
  if (v463 + 1 <= v465)
  {
    v469 = v459[139].i64[0];
  }
  else
  {
    v466 = 2 * v465;
    if (v466 > v464)
      v464 = v466;
    v459[139].i64[1] = v464;
    v467 = v459[139].i64[0];
    v468 = operator new[]();
    v469 = v468;
    if (v463)
    {
      v470 = 0;
      if (v463 < 4)
        goto LABEL_540;
      if ((unint64_t)(v468 - v467) < 0x20)
        goto LABEL_540;
      v470 = v463 & 0xFFFFFFFFFFFFFFFCLL;
      v471 = (_OWORD *)(v468 + 16);
      v472 = (__int128 *)(v467 + 16);
      v473 = v463 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v474 = *v472;
        *(v471 - 1) = *(v472 - 1);
        *v471 = v474;
        v471 += 2;
        v472 += 2;
        v473 -= 4;
      }
      while (v473);
      if (v463 != v470)
      {
LABEL_540:
        v475 = v463 - v470;
        v476 = 8 * v470;
        v477 = (uint64_t *)(v467 + 8 * v470);
        v478 = (_QWORD *)(v468 + v476);
        do
        {
          v479 = *v477++;
          *v478++ = v479;
          --v475;
        }
        while (v475);
      }
    }
    v480 = v459[139].i64[0];
    if ((int64x2_t *)v480 != v460 && v480 != 0)
      MEMORY[0x212BC6368]();
    v459[139].i64[0] = v469;
    v463 = v459[140].u64[0];
  }
  *(_QWORD *)(v469 + 8 * v463) = v462;
  ++v459[140].i64[0];
  v482 = sub_20FB5A768(v461);
  v459[106].i64[0] += v482;
  v459[106].i64[1] += 9 * v482;
  v483 = v459[140].u64[0];
  v484 = v483 + 1;
  v485 = v459[139].u64[1];
  if (v483 + 1 <= v485)
  {
    v489 = v459[139].i64[0];
  }
  else
  {
    v486 = 2 * v485;
    if (v486 > v484)
      v484 = v486;
    v459[139].i64[1] = v484;
    v487 = v459[139].i64[0];
    v488 = operator new[]();
    v489 = v488;
    if (v483)
    {
      v490 = 0;
      if (v483 < 4)
        goto LABEL_558;
      if ((unint64_t)(v488 - v487) < 0x20)
        goto LABEL_558;
      v490 = v483 & 0xFFFFFFFFFFFFFFFCLL;
      v491 = (_OWORD *)(v488 + 16);
      v492 = (__int128 *)(v487 + 16);
      v493 = v483 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v494 = *v492;
        *(v491 - 1) = *(v492 - 1);
        *v491 = v494;
        v491 += 2;
        v492 += 2;
        v493 -= 4;
      }
      while (v493);
      if (v483 != v490)
      {
LABEL_558:
        v495 = v483 - v490;
        v496 = 8 * v490;
        v497 = (uint64_t *)(v487 + 8 * v490);
        v498 = (_QWORD *)(v488 + v496);
        do
        {
          v499 = *v497++;
          *v498++ = v499;
          --v495;
        }
        while (v495);
      }
    }
    v500 = v459[139].i64[0];
    if ((int64x2_t *)v500 != v460 && v500 != 0)
      MEMORY[0x212BC6368]();
    v459[139].i64[0] = v489;
    v483 = v459[140].u64[0];
  }
  *(_QWORD *)(v489 + 8 * v483) = v482;
  ++v459[140].i64[0];
  v502 = sub_20FB5AD34(v461);
  v459[106].i64[0] += v502;
  v459[106].i64[1] += 6 * v502;
  v503 = v459[140].u64[0];
  v504 = v503 + 1;
  v505 = v459[139].u64[1];
  if (v503 + 1 <= v505)
  {
    v509 = v459[139].i64[0];
  }
  else
  {
    v506 = 2 * v505;
    if (v506 > v504)
      v504 = v506;
    v459[139].i64[1] = v504;
    v507 = v459[139].i64[0];
    v508 = operator new[]();
    v509 = v508;
    if (v503)
    {
      v510 = 0;
      if (v503 < 4)
        goto LABEL_576;
      if ((unint64_t)(v508 - v507) < 0x20)
        goto LABEL_576;
      v510 = v503 & 0xFFFFFFFFFFFFFFFCLL;
      v511 = (_OWORD *)(v508 + 16);
      v512 = (__int128 *)(v507 + 16);
      v513 = v503 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v514 = *v512;
        *(v511 - 1) = *(v512 - 1);
        *v511 = v514;
        v511 += 2;
        v512 += 2;
        v513 -= 4;
      }
      while (v513);
      if (v503 != v510)
      {
LABEL_576:
        v515 = v503 - v510;
        v516 = 8 * v510;
        v517 = (uint64_t *)(v507 + 8 * v510);
        v518 = (_QWORD *)(v508 + v516);
        do
        {
          v519 = *v517++;
          *v518++ = v519;
          --v515;
        }
        while (v515);
      }
    }
    v520 = v459[139].i64[0];
    if ((int64x2_t *)v520 != v460 && v520 != 0)
      MEMORY[0x212BC6368]();
    v459[139].i64[0] = v509;
    v503 = v459[140].u64[0];
  }
  *(_QWORD *)(v509 + 8 * v503) = v502;
  ++v459[140].i64[0];
  v522 = sub_20FB5B300(v461);
  v459[106].i64[0] += v522;
  v459[106].i64[1] += 6 * v522;
  v523 = v459[140].u64[0];
  v524 = v523 + 1;
  v525 = v459[139].u64[1];
  if (v523 + 1 <= v525)
  {
    v529 = v459[139].i64[0];
  }
  else
  {
    v526 = 2 * v525;
    if (v526 > v524)
      v524 = v526;
    v459[139].i64[1] = v524;
    v527 = v459[139].i64[0];
    v528 = operator new[]();
    v529 = v528;
    if (v523)
    {
      v530 = 0;
      if (v523 < 4)
        goto LABEL_594;
      if ((unint64_t)(v528 - v527) < 0x20)
        goto LABEL_594;
      v530 = v523 & 0xFFFFFFFFFFFFFFFCLL;
      v531 = (_OWORD *)(v528 + 16);
      v532 = (__int128 *)(v527 + 16);
      v533 = v523 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v534 = *v532;
        *(v531 - 1) = *(v532 - 1);
        *v531 = v534;
        v531 += 2;
        v532 += 2;
        v533 -= 4;
      }
      while (v533);
      if (v523 != v530)
      {
LABEL_594:
        v535 = v523 - v530;
        v536 = 8 * v530;
        v537 = (uint64_t *)(v527 + 8 * v530);
        v538 = (_QWORD *)(v528 + v536);
        do
        {
          v539 = *v537++;
          *v538++ = v539;
          --v535;
        }
        while (v535);
      }
    }
    v540 = v459[139].i64[0];
    if ((int64x2_t *)v540 != v460 && v540 != 0)
      MEMORY[0x212BC6368]();
    v459[139].i64[0] = v529;
    v523 = v459[140].u64[0];
  }
  *(_QWORD *)(v529 + 8 * v523) = v522;
  ++v459[140].i64[0];
  v542 = sub_20FB5B8CC(v461);
  v459[106].i64[0] += v542;
  v459[106].i64[1] += 3 * v542;
  v543 = v459[140].u64[0];
  v544 = v543 + 1;
  v545 = v459[139].u64[1];
  if (v543 + 1 <= v545)
  {
    v549 = v459[139].i64[0];
  }
  else
  {
    v546 = 2 * v545;
    if (v546 > v544)
      v544 = v546;
    v459[139].i64[1] = v544;
    v547 = v459[139].i64[0];
    v548 = operator new[]();
    v549 = v548;
    if (v543)
    {
      v550 = 0;
      if (v543 < 4)
        goto LABEL_612;
      if ((unint64_t)(v548 - v547) < 0x20)
        goto LABEL_612;
      v550 = v543 & 0xFFFFFFFFFFFFFFFCLL;
      v551 = (_OWORD *)(v548 + 16);
      v552 = (__int128 *)(v547 + 16);
      v553 = v543 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v554 = *v552;
        *(v551 - 1) = *(v552 - 1);
        *v551 = v554;
        v551 += 2;
        v552 += 2;
        v553 -= 4;
      }
      while (v553);
      if (v543 != v550)
      {
LABEL_612:
        v555 = v543 - v550;
        v556 = 8 * v550;
        v557 = (uint64_t *)(v547 + 8 * v550);
        v558 = (_QWORD *)(v548 + v556);
        do
        {
          v559 = *v557++;
          *v558++ = v559;
          --v555;
        }
        while (v555);
      }
    }
    v560 = v459[139].i64[0];
    if ((int64x2_t *)v560 != v460 && v560 != 0)
      MEMORY[0x212BC6368]();
    v459[139].i64[0] = v549;
    v543 = v459[140].u64[0];
  }
  *(_QWORD *)(v549 + 8 * v543) = v542;
  ++v459[140].i64[0];
  v562 = sub_20FB5BE98(v461);
  v459[106] = vaddq_s64(v459[106], vdupq_n_s64(v562));
  v563 = v459[140].u64[0];
  v564 = v563 + 1;
  v565 = v459[139].u64[1];
  if (v563 + 1 <= v565)
  {
    v569 = v459[139].i64[0];
  }
  else
  {
    v566 = 2 * v565;
    if (v566 > v564)
      v564 = v566;
    v459[139].i64[1] = v564;
    v567 = v459[139].i64[0];
    v568 = operator new[]();
    v569 = v568;
    if (v563)
    {
      v570 = 0;
      if (v563 < 4)
        goto LABEL_630;
      if ((unint64_t)(v568 - v567) < 0x20)
        goto LABEL_630;
      v570 = v563 & 0xFFFFFFFFFFFFFFFCLL;
      v571 = (_OWORD *)(v568 + 16);
      v572 = (__int128 *)(v567 + 16);
      v573 = v563 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v574 = *v572;
        *(v571 - 1) = *(v572 - 1);
        *v571 = v574;
        v571 += 2;
        v572 += 2;
        v573 -= 4;
      }
      while (v573);
      if (v563 != v570)
      {
LABEL_630:
        v575 = v563 - v570;
        v576 = 8 * v570;
        v577 = (uint64_t *)(v567 + 8 * v570);
        v578 = (_QWORD *)(v568 + v576);
        do
        {
          v579 = *v577++;
          *v578++ = v579;
          --v575;
        }
        while (v575);
      }
    }
    v580 = v459[139].i64[0];
    if ((int64x2_t *)v580 != v460 && v580 != 0)
      MEMORY[0x212BC6368]();
    v459[139].i64[0] = v569;
    v563 = v459[140].u64[0];
  }
  *(_QWORD *)(v569 + 8 * v563) = v562;
  ++v459[140].i64[0];
  v582 = sub_20FB5C464(v461);
  v459[106].i64[0] += v582;
  v459[106].i64[1] += 3 * v582;
  v583 = v459[140].u64[0];
  v584 = v583 + 1;
  v585 = v459[139].u64[1];
  if (v583 + 1 <= v585)
  {
    v589 = v459[139].i64[0];
  }
  else
  {
    v586 = 2 * v585;
    if (v586 > v584)
      v584 = v586;
    v459[139].i64[1] = v584;
    v587 = v459[139].i64[0];
    v588 = operator new[]();
    v589 = v588;
    if (v583)
    {
      v590 = 0;
      if (v583 < 4)
        goto LABEL_648;
      if ((unint64_t)(v588 - v587) < 0x20)
        goto LABEL_648;
      v590 = v583 & 0xFFFFFFFFFFFFFFFCLL;
      v591 = (_OWORD *)(v588 + 16);
      v592 = (__int128 *)(v587 + 16);
      v593 = v583 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v594 = *v592;
        *(v591 - 1) = *(v592 - 1);
        *v591 = v594;
        v591 += 2;
        v592 += 2;
        v593 -= 4;
      }
      while (v593);
      if (v583 != v590)
      {
LABEL_648:
        v595 = v583 - v590;
        v596 = 8 * v590;
        v597 = (uint64_t *)(v587 + 8 * v590);
        v598 = (_QWORD *)(v588 + v596);
        do
        {
          v599 = *v597++;
          *v598++ = v599;
          --v595;
        }
        while (v595);
      }
    }
    v600 = v459[139].i64[0];
    if ((int64x2_t *)v600 != v460 && v600 != 0)
      MEMORY[0x212BC6368]();
    v459[139].i64[0] = v589;
    v583 = v459[140].u64[0];
  }
  *(_QWORD *)(v589 + 8 * v583) = v582;
  ++v459[140].i64[0];
  v602 = sub_20FB5CA34(v461);
  v459[106].i64[0] += v602;
  v459[106].i64[1] += 4 * v602;
  v603 = v459[140].u64[0];
  v604 = v603 + 1;
  v605 = v459[139].u64[1];
  if (v603 + 1 <= v605)
  {
    v609 = v459[139].i64[0];
  }
  else
  {
    v606 = 2 * v605;
    if (v606 > v604)
      v604 = v606;
    v459[139].i64[1] = v604;
    v607 = v459[139].i64[0];
    v608 = operator new[]();
    v609 = v608;
    if (v603)
    {
      v610 = 0;
      if (v603 < 4)
        goto LABEL_666;
      if ((unint64_t)(v608 - v607) < 0x20)
        goto LABEL_666;
      v610 = v603 & 0xFFFFFFFFFFFFFFFCLL;
      v611 = (_OWORD *)(v608 + 16);
      v612 = (__int128 *)(v607 + 16);
      v613 = v603 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v614 = *v612;
        *(v611 - 1) = *(v612 - 1);
        *v611 = v614;
        v611 += 2;
        v612 += 2;
        v613 -= 4;
      }
      while (v613);
      if (v603 != v610)
      {
LABEL_666:
        v615 = v603 - v610;
        v616 = 8 * v610;
        v617 = (uint64_t *)(v607 + 8 * v610);
        v618 = (_QWORD *)(v608 + v616);
        do
        {
          v619 = *v617++;
          *v618++ = v619;
          --v615;
        }
        while (v615);
      }
    }
    v620 = v459[139].i64[0];
    if ((int64x2_t *)v620 != v460 && v620 != 0)
      MEMORY[0x212BC6368]();
    v459[139].i64[0] = v609;
    v603 = v459[140].u64[0];
  }
  *(_QWORD *)(v609 + 8 * v603) = v602;
  ++v459[140].i64[0];
  v622 = sub_20FB5D004(v461);
  v459[106].i64[0] += v622;
  v459[106].i64[1] += 4 * v622;
  v623 = v459[140].u64[0];
  v624 = v623 + 1;
  v625 = v459[139].u64[1];
  if (v623 + 1 <= v625)
  {
    v629 = v459[139].i64[0];
  }
  else
  {
    v626 = 2 * v625;
    if (v626 > v624)
      v624 = v626;
    v459[139].i64[1] = v624;
    v627 = v459[139].i64[0];
    v628 = operator new[]();
    v629 = v628;
    if (v623)
    {
      v630 = 0;
      if (v623 < 4)
        goto LABEL_684;
      if ((unint64_t)(v628 - v627) < 0x20)
        goto LABEL_684;
      v630 = v623 & 0xFFFFFFFFFFFFFFFCLL;
      v631 = (_OWORD *)(v628 + 16);
      v632 = (__int128 *)(v627 + 16);
      v633 = v623 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v634 = *v632;
        *(v631 - 1) = *(v632 - 1);
        *v631 = v634;
        v631 += 2;
        v632 += 2;
        v633 -= 4;
      }
      while (v633);
      if (v623 != v630)
      {
LABEL_684:
        v635 = v623 - v630;
        v636 = 8 * v630;
        v637 = (uint64_t *)(v627 + 8 * v630);
        v638 = (_QWORD *)(v628 + v636);
        do
        {
          v639 = *v637++;
          *v638++ = v639;
          --v635;
        }
        while (v635);
      }
    }
    v640 = v459[139].i64[0];
    if ((int64x2_t *)v640 != v460 && v640 != 0)
      MEMORY[0x212BC6368]();
    v459[139].i64[0] = v629;
    v623 = v459[140].u64[0];
  }
  *(_QWORD *)(v629 + 8 * v623) = v622;
  ++v459[140].i64[0];
  v642 = sub_20FB5D5D4(v461);
  v459[106].i64[0] += v642;
  v459[106].i64[1] += 3 * v642;
  v643 = v459[140].u64[0];
  v644 = v643 + 1;
  v645 = v459[139].u64[1];
  if (v643 + 1 <= v645)
  {
    v649 = v459[139].i64[0];
  }
  else
  {
    v646 = 2 * v645;
    if (v646 > v644)
      v644 = v646;
    v459[139].i64[1] = v644;
    v647 = v459[139].i64[0];
    v648 = operator new[]();
    v649 = v648;
    if (v643)
    {
      v650 = 0;
      if (v643 < 4)
        goto LABEL_702;
      if ((unint64_t)(v648 - v647) < 0x20)
        goto LABEL_702;
      v650 = v643 & 0xFFFFFFFFFFFFFFFCLL;
      v651 = (_OWORD *)(v648 + 16);
      v652 = (__int128 *)(v647 + 16);
      v653 = v643 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v654 = *v652;
        *(v651 - 1) = *(v652 - 1);
        *v651 = v654;
        v651 += 2;
        v652 += 2;
        v653 -= 4;
      }
      while (v653);
      if (v643 != v650)
      {
LABEL_702:
        v655 = v643 - v650;
        v656 = 8 * v650;
        v657 = (uint64_t *)(v647 + 8 * v650);
        v658 = (_QWORD *)(v648 + v656);
        do
        {
          v659 = *v657++;
          *v658++ = v659;
          --v655;
        }
        while (v655);
      }
    }
    v660 = v459[139].i64[0];
    if ((int64x2_t *)v660 != v460 && v660 != 0)
      MEMORY[0x212BC6368]();
    v459[139].i64[0] = v649;
    v643 = v459[140].u64[0];
  }
  *(_QWORD *)(v649 + 8 * v643) = v642;
  ++v459[140].i64[0];
  result = sub_20FB5DBA4(v461);
  v663 = result;
  v459[106] = vaddq_s64(v459[106], vdupq_n_s64(result));
  v664 = v459[140].u64[0];
  v665 = v664 + 1;
  v666 = v459[139].u64[1];
  if (v664 + 1 <= v666)
  {
    v670 = v459[139].i64[0];
  }
  else
  {
    v667 = 2 * v666;
    if (v667 > v665)
      v665 = v667;
    v459[139].i64[1] = v665;
    v668 = v459[139].i64[0];
    v669 = operator new[]();
    v670 = v669;
    if (v664)
    {
      v671 = 0;
      if (v664 < 4)
        goto LABEL_720;
      if ((unint64_t)(v669 - v668) < 0x20)
        goto LABEL_720;
      v671 = v664 & 0xFFFFFFFFFFFFFFFCLL;
      v672 = (_OWORD *)(v669 + 16);
      v673 = (__int128 *)(v668 + 16);
      v674 = v664 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v675 = *v673;
        *(v672 - 1) = *(v673 - 1);
        *v672 = v675;
        v672 += 2;
        v673 += 2;
        v674 -= 4;
      }
      while (v674);
      if (v664 != v671)
      {
LABEL_720:
        v676 = v664 - v671;
        v677 = 8 * v671;
        v678 = (uint64_t *)(v668 + 8 * v671);
        v679 = (_QWORD *)(v669 + v677);
        do
        {
          v680 = *v678++;
          *v679++ = v680;
          --v676;
        }
        while (v676);
      }
    }
    result = v459[139].i64[0];
    if ((int64x2_t *)result != v460 && result != 0)
      result = MEMORY[0x212BC6368]();
    v459[139].i64[0] = v670;
    v664 = v459[140].u64[0];
  }
  *(_QWORD *)(v670 + 8 * v664) = v663;
  ++v459[140].i64[0];
  return result;
}

double sub_20FBBA2F4(uint64_t a1, _QWORD *a2)
{
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _OWORD *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v26;
  __int128 *v27;
  double v28;
  double v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  double i;
  float64x2_t *v36;
  _BOOL4 v37;
  uint64_t v38;
  __int128 v39;
  float64x2_t v40;
  double *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  const double *v57;
  uint64_t v58;
  double v59;
  double v61;
  double v62;
  double v63;
  float64x2_t v64;
  double v67;
  float64x2_t v68;
  double v71;
  float64x2_t v72;
  float64x2_t *v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t *v78;
  float64x2_t v79;
  float64x2_t *v80;
  float64_t v81;
  float64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  double v86;
  double v87;
  _QWORD *v88;
  _QWORD *v89;
  const double *v90;
  uint64_t v91;
  double v92;
  double v94;
  double v95;
  double v96;
  float64x2_t v97;
  double v100;
  float64x2_t v101;
  double v104;
  float64x2_t v105;
  float64x2_t *v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t *v111;
  float64x2_t v112;
  float64x2_t *v113;
  float64_t v114;
  float64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  _QWORD *v118;
  _QWORD *v119;
  _QWORD *v120;
  const double *v121;
  uint64_t v122;
  double v123;
  double v125;
  double v126;
  double v127;
  float64x2_t v128;
  double v131;
  float64x2_t v132;
  double v135;
  float64x2_t v136;
  float64x2_t *v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t *v142;
  float64x2_t v143;
  float64x2_t *v144;
  float64_t v145;
  float64_t v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  double v150;
  double v151;
  float64x2_t *v152;
  int8x16_t *v153;
  float64x2_t *v154;
  float64x2_t v155;
  float64x2_t v156;
  int8x16_t v157;
  uint64_t v158;
  float64_t v159;
  float64_t v160;
  uint64_t v161;
  uint64_t v162;
  float64x2_t *v163;
  int v164;
  uint64_t v167;
  __int128 v169;
  __int128 v170;
  uint64_t v181;
  double v182;
  double v183;
  __int128 v185;
  __int128 v186;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  float64x2_t v201;
  int64x2_t v202;
  int64x2_t v203;
  double v204;
  float64x2_t v206;
  float64x2_t v207;
  int8x16_t v208;
  float64x2_t v209;
  int64x2_t v213;
  int64x2_t v214;
  double v215;
  float64x2_t v217;
  float64x2_t v218;
  int8x16_t v219;
  double v220;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t *v225;
  float64x2_t v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  float64x2_t *v236;
  float64x2_t v237;
  float64x2_t *v238;
  uint64_t v239;
  float64_t v240;
  float64_t v241;
  uint64_t v242;
  uint64_t v243;
  double v244;
  double v245;
  uint64_t v246;
  uint64_t v247;
  float64x2_t v248;
  float64x2_t *v249;
  float64x2_t v250;
  uint64_t v251;
  float64_t v252;
  float64_t v253;
  uint64_t v254;
  uint64_t v255;
  int v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  double v260;
  double v261;
  float64x2_t *v262;
  _BOOL4 v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  float64_t v268;
  uint64_t v269;
  uint64_t v270;
  double v271;
  double v272;
  float64x2_t *v273;
  float64x2_t *v274;
  uint64_t v275;
  double v276;
  uint64_t v277;
  uint64_t v278;
  float64x2_t *v279;
  float64x2_t *v280;
  uint64_t v281;
  double v282;
  uint64_t v283;
  uint64_t v284;
  double v285;
  double v286;
  uint64_t v287;
  double v291;
  double v292;
  double v293;
  double cosval;
  double v295;
  __double2 v296;
  double v297;
  double v298;
  double v299;
  double v300;
  double v301;
  double v302;
  double v303;
  double v304;
  double v305;
  double v306;
  double v307;
  double v308;
  double v309;
  double v310;
  double v311;
  double v312;
  double v313;
  double v314;
  double v315;
  double v316;
  double v317;
  float64x2_t v318;
  double v319;
  float64x2_t v320;
  double v321;
  float64x2_t v322;
  int8x16_t *v323;
  float64x2_t v324;
  uint64_t v325;
  float64x2_t v326;
  int8x16_t v327;
  uint64_t v328;
  float64_t v329;
  float64_t v330;
  uint64_t v331;
  uint64_t v332;
  int8x16_t *v333;
  float64x2_t *v334;
  float64x2_t v335;
  int8x16_t v336;
  uint64_t v337;
  float64_t v338;
  float64_t v339;
  double v340;
  uint64_t v341;
  uint64_t v342;
  double v343;
  double v344;
  int v345;
  uint64_t v346;
  double v348;
  uint64_t v349;
  uint64_t v350;
  int v351;
  uint64_t v352;
  double v354;
  uint64_t v355;
  uint64_t v356;
  double v357;
  double v358;
  int v359;
  uint64_t v360;
  double v361;
  double v362;
  uint64_t v363;
  uint64_t v364;
  int v365;
  uint64_t v366;
  __int128 *v368;
  __int128 *v369;
  __int128 v370;
  __int128 v373;
  double v386;
  unint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  unint64_t v391;
  uint64_t v392;
  __int128 v393;
  unint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  double v403;
  unint64_t v404;
  double v405;
  uint64_t v406;
  __int128 v407;
  unint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  unint64_t v417;
  uint64_t v418;
  __int128 v419;
  unint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  double v429;
  unint64_t v430;
  double v431;
  unint64_t v432;
  uint64_t v433;
  double *v434;
  uint64_t v435;
  double v439;
  uint64_t v440;
  uint64_t v441;
  unint64_t v442;
  uint64_t v443;
  __int128 v447;
  __int128 v448;
  __int128 v449;
  double v465;
  unint64_t v466;
  uint64_t v467;
  uint64_t v469;
  double v470;
  unint64_t v471;
  double v472;
  uint64_t v473;
  double v491;
  unint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  unint64_t v496;
  unint64_t v497;
  uint64_t v498;
  double *v499;
  uint64_t v500;
  double v504;
  uint64_t v505;
  uint64_t v506;
  double v507;
  unint64_t v508;
  double v509;
  unint64_t v510;
  uint64_t v511;
  double *v512;
  uint64_t v513;
  double v517;
  uint64_t v518;
  uint64_t v519;
  unint64_t v520;
  uint64_t v521;
  unint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  double v529;
  unint64_t v530;
  double v531;
  uint64_t v532;
  double v536;
  unint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  unint64_t v541;
  uint64_t v542;
  uint64_t v543;
  double *v544;
  uint64_t v545;
  double v546;
  double v547;
  double v548;
  double v549;
  uint64_t v550;
  uint64_t v551;
  double v552;
  unint64_t v553;
  double v554;
  unint64_t v555;
  uint64_t v556;
  double *v557;
  uint64_t v558;
  double v563;
  uint64_t v564;
  uint64_t v565;
  unint64_t v566;
  unint64_t v567;
  uint64_t v568;
  double *v569;
  uint64_t v570;
  double v575;
  uint64_t v576;
  uint64_t v577;
  double v578;
  unint64_t v579;
  double v580;
  unint64_t v581;
  uint64_t v582;
  double *v583;
  uint64_t v584;
  double v588;
  uint64_t v589;
  uint64_t v590;
  unint64_t v591;
  unint64_t v592;
  uint64_t v593;
  double *v594;
  uint64_t v595;
  double v599;
  uint64_t v600;
  uint64_t v601;
  double v602;
  unint64_t v603;
  double v604;
  unint64_t v605;
  uint64_t v606;
  double *v607;
  uint64_t v608;
  uint64_t v612;
  uint64_t v613;
  unint64_t v614;
  unint64_t v615;
  uint64_t v616;
  double *v617;
  uint64_t v618;
  uint64_t v622;
  uint64_t v623;
  unint64_t v624;
  double v625;
  unint64_t v626;
  uint64_t v627;
  double *v628;
  uint64_t v629;
  double v630;
  double v631;
  uint64_t v632;
  uint64_t v633;
  unint64_t v634;
  unint64_t v635;
  uint64_t v636;
  double *v637;
  uint64_t v638;
  double *v639;
  double v640;
  double v641;
  double v642;
  double v643;
  double v644;
  double v645;
  double v646;
  double v647;
  double v652;
  double v653;
  double v654;
  double v655;
  double v656;
  double v657;
  double v658;
  double v659;
  double v660;
  double v661;
  double v662;
  double v663;
  double v664;
  float64x2_t v665;
  __int128 v666;
  float64x2_t v667;
  __int128 v668;
  float64x2_t v669;
  __int128 v670;
  float64x2_t v671;
  float64_t v672;
  uint64_t v673;
  float64x2_t v674;
  _OWORD v675[2];
  float64x2_t v676;
  float64x2_t v677;
  __int128 v678;
  float64x2_t v679;
  uint64_t v680;
  uint64_t v681;
  float64x2_t v682;
  __int128 v683;
  __int128 v684;
  __int128 v685;
  __int128 v686;
  __int128 v687;
  __int128 v688;
  uint64_t v689;
  float64x2_t *v690;
  int v691;
  float64x2_t *v692;
  int v693;
  float64x2_t *v694;
  int v695;
  float64x2_t *v696;
  int v697;
  float64x2_t *v698;
  int v699;
  float64x2_t *v700;
  int v701;
  float64x2x3_t v702;
  float64x2x3_t v703;
  float64x2x3_t v704;

  kdebug_trace();
  v12 = a2[66];
  if (v12 > 0x13)
    goto LABEL_21;
  v13 = a2[65];
  if (v13 >= 0x14)
  {
    v17 = (char *)a2[64];
  }
  else
  {
    v14 = 2 * v13;
    if (v14 <= 0x14)
      v14 = 20;
    a2[65] = v14;
    v15 = (_OWORD *)a2[64];
    v16 = (char *)operator new[]();
    v17 = v16;
    if (v12)
    {
      v18 = 0;
      if (v12 < 4 || (unint64_t)(v16 - (char *)v15) < 0x20)
        goto LABEL_13;
      v18 = v12 & 0x1C;
      _Q0 = *(float64x2_t *)v15;
      _Q1 = *((float64x2_t *)v15 + 1);
      *(_OWORD *)v16 = *v15;
      *((float64x2_t *)v16 + 1) = _Q1;
      if ((v12 & 0xFFFFFFFFFFFFFFFCLL) != 4)
      {
        _Q0 = *((float64x2_t *)v15 + 2);
        _Q1 = *((float64x2_t *)v15 + 3);
        *((float64x2_t *)v16 + 2) = _Q0;
        *((float64x2_t *)v16 + 3) = _Q1;
        if (v18 != 8)
        {
          _Q0 = *((float64x2_t *)v15 + 4);
          _Q1 = *((float64x2_t *)v15 + 5);
          *((float64x2_t *)v16 + 4) = _Q0;
          *((float64x2_t *)v16 + 5) = _Q1;
          if (v18 != 12)
          {
            _Q0 = *((float64x2_t *)v15 + 6);
            _Q1 = *((float64x2_t *)v15 + 7);
            *((float64x2_t *)v16 + 6) = _Q0;
            *((float64x2_t *)v16 + 7) = _Q1;
          }
        }
      }
      if (v12 != v18)
      {
LABEL_13:
        v19 = v12 - v18;
        v20 = 8 * v18;
        v21 = (uint64_t *)v15 + v18;
        v22 = &v16[v20];
        do
        {
          v23 = *v21++;
          *(_QWORD *)v22 = v23;
          v22 += 8;
          --v19;
        }
        while (v19);
      }
    }
    v24 = (_QWORD *)a2[64];
    if (v24 != a2 && v24 != 0)
      MEMORY[0x212BC6368]();
    a2[64] = v17;
    v12 = a2[66];
    if (v12 > 0x13)
    {
LABEL_21:
      a2[66] = 20;
      if (*(_BYTE *)(a1 + 3012))
        goto LABEL_22;
      goto LABEL_28;
    }
  }
  bzero(&v17[8 * v12], 160 - 8 * v12);
  a2[66] = 20;
  if (*(_BYTE *)(a1 + 3012))
  {
LABEL_22:
    v26 = *(_QWORD *)(a1 + 1392);
    v27 = *(__int128 **)(a1 + 1400);
    v28 = 0.0;
    v29 = 0.0;
    if ((__int128 *)v26 == v27)
      goto LABEL_196;
    if (*(_BYTE *)(a1 + 3011))
    {
      v30 = (unint64_t)v27 - v26 - 504;
      if (v30 < 0x1F8)
      {
        v31 = *(_QWORD *)(a1 + 1392);
        do
        {
LABEL_195:
          v29 = v29 + *(double *)(v31 + 464);
          v31 += 504;
        }
        while ((__int128 *)v31 != v27);
        goto LABEL_196;
      }
      v387 = v30 / 0x1F8 + 1;
      v31 = v26 + 504 * (v387 & 0x1FFFFFFFFFFFFFELL);
      v388 = v387 & 0x1FFFFFFFFFFFFFELL;
      do
      {
        v29 = v29 + *(double *)(v26 + 464) + *(double *)(v26 + 968);
        v26 += 1008;
        v388 -= 2;
      }
      while (v388);
      if (v387 != (v387 & 0x1FFFFFFFFFFFFFELL))
        goto LABEL_195;
    }
    else
    {
      v368 = (__int128 *)(v26 + 344);
      do
      {
        if (*((_BYTE *)v368 + 128))
        {
          *((_QWORD *)v368 + 14) = *((_QWORD *)v368 - 1);
          v370 = *(__int128 *)((char *)v368 - 24);
          _Q5 = *(__int128 *)((char *)v368 - 56);
          v368[5] = *(__int128 *)((char *)v368 - 40);
          v368[6] = v370;
          _Q4 = *(__int128 *)((char *)v368 - 88);
          v368[3] = *(__int128 *)((char *)v368 - 72);
          v368[4] = _Q5;
          v373 = *(__int128 *)((char *)v368 - 120);
          v368[1] = *(__int128 *)((char *)v368 - 104);
          v368[2] = _Q4;
          *v368 = v373;
          _Q17 = *v368;
          _D19 = *((_QWORD *)v368 + 1);
          __asm { FMLA            D18, D19, V17.D[1] }
          *(_QWORD *)&_Q17 = *((_QWORD *)v368 + 3);
          __asm { FMLA            D18, D17, V16.D[1] }
          _D16 = *((_QWORD *)v368 + 5);
          __asm { FMLA            D18, D16, V7.D[1] }
          _D7 = *((_QWORD *)v368 + 7);
          __asm { FMLA            D18, D7, V6.D[1] }
          _D6 = *((_QWORD *)v368 + 9);
          __asm { FMLA            D18, D6, V5.D[1] }
          *(_QWORD *)&_Q5 = *((_QWORD *)v368 + 11);
          __asm { FMLA            D18, D5, V4.D[1] }
          *(_QWORD *)&_Q4 = *((_QWORD *)v368 + 13);
          __asm { FMLA            D18, D4, V3.D[1] }
          v386 = *(double *)(a1 + 16) * (_D18 + *((double *)v368 + 14) * *((double *)v368 + 14));
          *((double *)v368 + 15) = v386;
          v29 = v29 + v386;
        }
        v369 = v368 + 10;
        v368 = (__int128 *)((char *)v368 + 504);
      }
      while (v369 != v27);
    }
LABEL_196:
    v52 = (double *)a2[64];
    *v52 = v29 * 0.5;
    v389 = *(_QWORD *)(a1 + 1416);
    v390 = *(_QWORD *)(a1 + 1424);
    if (v389 == v390)
      goto LABEL_209;
    if (*(_BYTE *)(a1 + 3011))
    {
      v391 = v390 - v389 - 280;
      v28 = 0.0;
      if (v391 < 0x118)
      {
        v392 = *(_QWORD *)(a1 + 1416);
        do
        {
LABEL_208:
          v28 = v28 + *(double *)(v392 + 240);
          v392 += 280;
        }
        while (v392 != v390);
        goto LABEL_209;
      }
      v399 = v391 / 0x118 + 1;
      v392 = v389 + 280 * (v399 & 0x1FFFFFFFFFFFFFELL);
      v400 = v399 & 0x1FFFFFFFFFFFFFELL;
      do
      {
        v28 = v28 + *(double *)(v389 + 240) + *(double *)(v389 + 520);
        v389 += 560;
        v400 -= 2;
      }
      while (v400);
      if (v399 != (v399 & 0x1FFFFFFFFFFFFFELL))
        goto LABEL_208;
    }
    else
    {
      v28 = 0.0;
      do
      {
        if (*(_BYTE *)(v389 + 248))
        {
          v393 = *(_OWORD *)(v389 + 160);
          *(_OWORD *)(v389 + 192) = *(_OWORD *)(v389 + 144);
          *(_OWORD *)(v389 + 208) = v393;
          _Q3 = *(_OWORD *)(v389 + 192);
          *(_OWORD *)(v389 + 224) = *(_OWORD *)(v389 + 176);
          _D6 = *((_QWORD *)&_Q3 + 1);
          __asm { FMLA            D5, D6, V3.D[1] }
          *(_QWORD *)&_Q3 = *(_QWORD *)(v389 + 216);
          __asm { FMLA            D5, D3, V4.D[1] }
          *(_QWORD *)&_Q3 = *(_QWORD *)(v389 + 232);
          __asm { FMLA            D5, D3, V1.D[1] }
          *(double *)&v393 = *(double *)(a1 + 32) * _D5;
          *(_QWORD *)(v389 + 240) = v393;
          v28 = v28 + *(double *)&v393;
        }
        v389 += 280;
      }
      while (v389 != v390);
      v52 = (double *)a2[64];
    }
LABEL_209:
    v52[1] = v28 * 0.5;
    v401 = *(_QWORD *)(a1 + 1440);
    v402 = *(_QWORD *)(a1 + 1448);
    v403 = 0.0;
    if (v401 == v402)
    {
      v405 = 0.0;
      goto LABEL_223;
    }
    if (*(_BYTE *)(a1 + 3011))
    {
      v404 = v402 - v401 - 280;
      v405 = 0.0;
      if (v404 < 0x118)
      {
        v406 = *(_QWORD *)(a1 + 1440);
        do
        {
LABEL_222:
          v405 = v405 + *(double *)(v406 + 240);
          v406 += 280;
        }
        while (v406 != v402);
        goto LABEL_223;
      }
      v413 = v404 / 0x118 + 1;
      v406 = v401 + 280 * (v413 & 0x1FFFFFFFFFFFFFELL);
      v414 = v413 & 0x1FFFFFFFFFFFFFELL;
      do
      {
        v405 = v405 + *(double *)(v401 + 240) + *(double *)(v401 + 520);
        v401 += 560;
        v414 -= 2;
      }
      while (v414);
      if (v413 != (v413 & 0x1FFFFFFFFFFFFFELL))
        goto LABEL_222;
    }
    else
    {
      v405 = 0.0;
      do
      {
        if (*(_BYTE *)(v401 + 248))
        {
          v407 = *(_OWORD *)(v401 + 160);
          *(_OWORD *)(v401 + 192) = *(_OWORD *)(v401 + 144);
          *(_OWORD *)(v401 + 208) = v407;
          _Q3 = *(_OWORD *)(v401 + 192);
          *(_OWORD *)(v401 + 224) = *(_OWORD *)(v401 + 176);
          _D6 = *((_QWORD *)&_Q3 + 1);
          __asm { FMLA            D5, D6, V3.D[1] }
          *(_QWORD *)&_Q3 = *(_QWORD *)(v401 + 216);
          __asm { FMLA            D5, D3, V4.D[1] }
          *(_QWORD *)&_Q3 = *(_QWORD *)(v401 + 232);
          __asm { FMLA            D5, D3, V1.D[1] }
          *(double *)&v407 = *(double *)(a1 + 48) * _D5;
          *(_QWORD *)(v401 + 240) = v407;
          v405 = v405 + *(double *)&v407;
        }
        v401 += 280;
      }
      while (v401 != v402);
      v52 = (double *)a2[64];
    }
LABEL_223:
    v52[2] = v405 * 0.5;
    v415 = *(_QWORD *)(a1 + 1464);
    v416 = *(_QWORD *)(a1 + 1472);
    if (v415 == v416)
      goto LABEL_236;
    if (*(_BYTE *)(a1 + 3011))
    {
      v417 = v416 - v415 - 280;
      v403 = 0.0;
      if (v417 < 0x118)
      {
        v418 = *(_QWORD *)(a1 + 1464);
        do
        {
LABEL_235:
          v403 = v403 + *(double *)(v418 + 240);
          v418 += 280;
        }
        while (v418 != v416);
        goto LABEL_236;
      }
      v425 = v417 / 0x118 + 1;
      v418 = v415 + 280 * (v425 & 0x1FFFFFFFFFFFFFELL);
      v426 = v425 & 0x1FFFFFFFFFFFFFELL;
      do
      {
        v403 = v403 + *(double *)(v415 + 240) + *(double *)(v415 + 520);
        v415 += 560;
        v426 -= 2;
      }
      while (v426);
      if (v425 != (v425 & 0x1FFFFFFFFFFFFFELL))
        goto LABEL_235;
    }
    else
    {
      v403 = 0.0;
      do
      {
        if (*(_BYTE *)(v415 + 248))
        {
          v419 = *(_OWORD *)(v415 + 160);
          *(_OWORD *)(v415 + 192) = *(_OWORD *)(v415 + 144);
          *(_OWORD *)(v415 + 208) = v419;
          _Q3 = *(_OWORD *)(v415 + 192);
          *(_OWORD *)(v415 + 224) = *(_OWORD *)(v415 + 176);
          _D6 = *((_QWORD *)&_Q3 + 1);
          __asm { FMLA            D5, D6, V3.D[1] }
          *(_QWORD *)&_Q3 = *(_QWORD *)(v415 + 216);
          __asm { FMLA            D5, D3, V4.D[1] }
          *(_QWORD *)&_Q3 = *(_QWORD *)(v415 + 232);
          __asm { FMLA            D5, D3, V2.D[1] }
          *(double *)&v419 = *(double *)(a1 + 64) * _D5;
          *(_QWORD *)(v415 + 240) = v419;
          v403 = v403 + *(double *)&v419;
        }
        v415 += 280;
      }
      while (v415 != v416);
      v52 = (double *)a2[64];
    }
LABEL_236:
    v52[3] = v403 * 0.5;
    v427 = *(_QWORD *)(a1 + 1488);
    v428 = *(_QWORD *)(a1 + 1496);
    v429 = 0.0;
    if (v427 == v428)
    {
      v431 = 0.0;
    }
    else if (*(_BYTE *)(a1 + 3011))
    {
      v430 = v428 - v427 - 160;
      v431 = 0.0;
      if (v430 < 0xA0)
        goto LABEL_453;
      v432 = v430 / 0xA0 + 1;
      v433 = v427 + 160 * (v432 & 0x3FFFFFFFFFFFFFELL);
      v434 = (double *)(v427 + 280);
      v435 = v432 & 0x3FFFFFFFFFFFFFELL;
      do
      {
        v431 = v431 + *(v434 - 20) + *v434;
        v434 += 40;
        v435 -= 2;
      }
      while (v435);
      v427 = v433;
      if (v432 != (v432 & 0x3FFFFFFFFFFFFFELL))
      {
LABEL_453:
        do
        {
          v431 = v431 + *(double *)(v427 + 120);
          v427 += 160;
        }
        while (v427 != v428);
      }
    }
    else
    {
      v431 = 0.0;
      do
      {
        if (*(_BYTE *)(v427 + 128))
        {
          *(_QWORD *)(v427 + 112) = *(_QWORD *)(v427 + 88);
          *(_OWORD *)(v427 + 96) = *(_OWORD *)(v427 + 72);
          _Q3 = *(_OWORD *)(v427 + 96);
          _D5 = *(_QWORD *)(v427 + 104);
          __asm { FMLA            D4, D5, V3.D[1] }
          v439 = *(double *)(a1 + 80) * (_D4 + *(double *)(v427 + 112) * *(double *)(v427 + 112));
          *(double *)(v427 + 120) = v439;
          v431 = v431 + v439;
        }
        v427 += 160;
      }
      while (v427 != v428);
      v52 = (double *)a2[64];
    }
    v52[4] = v431 * 0.5;
    v440 = *(_QWORD *)(a1 + 1512);
    v441 = *(_QWORD *)(a1 + 1520);
    if (v440 != v441)
    {
      if (*(_BYTE *)(a1 + 3011))
      {
        v442 = v441 - v440 - 9616;
        v429 = 0.0;
        if (v442 >> 4 < 0x259)
        {
          v443 = *(_QWORD *)(a1 + 1512);
          do
          {
LABEL_262:
            v429 = v429 + *(double *)(v443 + 9576);
            v443 += 9616;
          }
          while (v443 != v441);
          goto LABEL_263;
        }
        v466 = v442 / 0x2590 + 1;
        v443 = v440 + 9616 * (v466 & 0xFFFFFFFFFFFFELL);
        v467 = v466 & 0xFFFFFFFFFFFFELL;
        do
        {
          v429 = v429 + *(double *)(v440 + 9576) + *(double *)(v440 + 19192);
          v440 += 19232;
          v467 -= 2;
        }
        while (v467);
        if (v466 != (v466 & 0xFFFFFFFFFFFFELL))
          goto LABEL_262;
      }
      else
      {
        v429 = 0.0;
        do
        {
          _X15 = v440 + 38432;
          __asm { PRFM            #0, [X15] }
          if (*(_BYTE *)(v440 + 9584))
          {
            _X15 = v440 + 38304;
            *(_QWORD *)(v440 + 9568) = *(_QWORD *)(v440 + 9448);
            v447 = *(_OWORD *)(v440 + 9416);
            *(_OWORD *)(v440 + 9520) = *(_OWORD *)(v440 + 9400);
            *(_OWORD *)(v440 + 9536) = v447;
            *(_OWORD *)(v440 + 9552) = *(_OWORD *)(v440 + 9432);
            v448 = *(_OWORD *)(v440 + 9352);
            *(_OWORD *)(v440 + 9456) = *(_OWORD *)(v440 + 9336);
            *(_OWORD *)(v440 + 9472) = v448;
            v449 = *(_OWORD *)(v440 + 9384);
            *(_OWORD *)(v440 + 9488) = *(_OWORD *)(v440 + 9368);
            *(_OWORD *)(v440 + 9504) = v449;
            __asm { PRFM            #0, [X15] }
            _Q17 = *(_OWORD *)(v440 + 9456);
            _D19 = *(_QWORD *)(v440 + 9464);
            __asm { FMLA            D18, D19, V17.D[1] }
            *(_QWORD *)&_Q17 = *(_QWORD *)(v440 + 9480);
            __asm { FMLA            D18, D17, V16.D[1] }
            _D16 = *(_QWORD *)(v440 + 9496);
            __asm { FMLA            D18, D16, V7.D[1] }
            _D7 = *(_QWORD *)(v440 + 9512);
            __asm { FMLA            D18, D7, V6.D[1] }
            _D6 = *(_QWORD *)(v440 + 9528);
            __asm { FMLA            D18, D6, V5.D[1] }
            _D5 = *(_QWORD *)(v440 + 9544);
            __asm { FMLA            D18, D5, V4.D[1] }
            _D4 = *(_QWORD *)(v440 + 9560);
            __asm { FMLA            D18, D4, V3.D[1] }
            v465 = *(double *)(a1 + 96) * (_D18 + *(double *)(v440 + 9568) * *(double *)(v440 + 9568));
            *(double *)(v440 + 9576) = v465;
            v429 = v429 + v465;
          }
          v440 += 9616;
        }
        while (v440 != v441);
        v52 = (double *)a2[64];
      }
    }
LABEL_263:
    v52[5] = v429 * 0.5;
    _X10 = *(_QWORD *)(a1 + 1536);
    v469 = *(_QWORD *)(a1 + 1544);
    v470 = 0.0;
    if (_X10 == v469)
    {
      v472 = 0.0;
      goto LABEL_277;
    }
    if (*(_BYTE *)(a1 + 3011))
    {
      v471 = v469 - _X10 - 5336;
      v472 = 0.0;
      if (v471 >> 3 < 0x29B)
      {
        v473 = *(_QWORD *)(a1 + 1536);
        do
        {
LABEL_276:
          v472 = v472 + *(double *)(v473 + 5296);
          v473 += 5336;
        }
        while (v473 != v469);
        goto LABEL_277;
      }
      v492 = v471 / 0x14D8 + 1;
      v473 = _X10 + 5336 * (v492 & 0x1FFFFFFFFFFFFELL);
      v493 = v492 & 0x1FFFFFFFFFFFFELL;
      do
      {
        v472 = v472 + *(double *)(_X10 + 5296) + *(double *)(_X10 + 10632);
        _X10 += 10672;
        v493 -= 2;
      }
      while (v493);
      if (v492 != (v492 & 0x1FFFFFFFFFFFFELL))
        goto LABEL_276;
    }
    else
    {
      v472 = 0.0;
      do
      {
        __asm { PRFM            #0, [X10,#0x5340] }
        if (*(_BYTE *)(_X10 + 5304))
        {
          _X14 = _X10 + 21184;
          *(_QWORD *)(_X10 + 5288) = *(_QWORD *)(_X10 + 5168);
          *(_OWORD *)(_X10 + 5240) = *(_OWORD *)(_X10 + 5120);
          *(_OWORD *)(_X10 + 5256) = *(_OWORD *)(_X10 + 5136);
          *(_OWORD *)(_X10 + 5272) = *(_OWORD *)(_X10 + 5152);
          *(_OWORD *)(_X10 + 5176) = *(_OWORD *)(_X10 + 5056);
          *(_OWORD *)(_X10 + 5192) = *(_OWORD *)(_X10 + 5072);
          *(_OWORD *)(_X10 + 5208) = *(_OWORD *)(_X10 + 5088);
          *(_OWORD *)(_X10 + 5224) = *(_OWORD *)(_X10 + 5104);
          __asm { PRFM            #0, [X14] }
          _Q16 = *(_OWORD *)(_X10 + 5176);
          _D19 = *(_QWORD *)(_X10 + 5184);
          __asm { FMLA            D18, D19, V16.D[1] }
          *(_QWORD *)&_Q16 = *(_QWORD *)(_X10 + 5200);
          __asm { FMLA            D18, D16, V7.D[1] }
          _D7 = *(_QWORD *)(_X10 + 5216);
          __asm { FMLA            D18, D7, V6.D[1] }
          _D6 = *(_QWORD *)(_X10 + 5232);
          __asm { FMLA            D18, D6, V5.D[1] }
          _D5 = *(_QWORD *)(_X10 + 5248);
          __asm { FMLA            D18, D5, V4.D[1] }
          _D4 = *(_QWORD *)(_X10 + 5264);
          __asm { FMLA            D18, D4, V3.D[1] }
          _D3 = *(_QWORD *)(_X10 + 5280);
          __asm { FMLA            D18, D3, V2.D[1] }
          v491 = *(double *)(a1 + 112) * (_D18 + *(double *)(_X10 + 5288) * *(double *)(_X10 + 5288));
          *(double *)(_X10 + 5296) = v491;
          v472 = v472 + v491;
        }
        _X10 += 5336;
      }
      while (_X10 != v469);
      v52 = (double *)a2[64];
    }
LABEL_277:
    v52[6] = v472 * 0.5;
    v494 = *(_QWORD *)(a1 + 1560);
    v495 = *(_QWORD *)(a1 + 1568);
    if (v494 != v495)
    {
      if (*(_BYTE *)(a1 + 3011))
      {
        v496 = v495 - v494 - 144;
        v470 = 0.0;
        if (v496 < 0x90)
          goto LABEL_454;
        v497 = v496 / 0x90 + 1;
        v498 = v494 + 144 * (v497 & 0x3FFFFFFFFFFFFFELL);
        v499 = (double *)(v494 + 248);
        v500 = v497 & 0x3FFFFFFFFFFFFFELL;
        do
        {
          v470 = v470 + *(v499 - 18) + *v499;
          v499 += 36;
          v500 -= 2;
        }
        while (v500);
        v494 = v498;
        if (v497 != (v497 & 0x3FFFFFFFFFFFFFELL))
        {
LABEL_454:
          do
          {
            v470 = v470 + *(double *)(v494 + 104);
            v494 += 144;
          }
          while (v494 != v495);
        }
      }
      else
      {
        v470 = 0.0;
        do
        {
          if (*(_BYTE *)(v494 + 112))
          {
            *(_QWORD *)(v494 + 96) = *(_QWORD *)(v494 + 72);
            *(_OWORD *)(v494 + 80) = *(_OWORD *)(v494 + 56);
            _Q3 = *(_OWORD *)(v494 + 80);
            _D5 = *(_QWORD *)(v494 + 88);
            __asm { FMLA            D4, D5, V3.D[1] }
            v504 = *(double *)(a1 + 128) * (_D4 + *(double *)(v494 + 96) * *(double *)(v494 + 96));
            *(double *)(v494 + 104) = v504;
            v470 = v470 + v504;
          }
          v494 += 144;
        }
        while (v494 != v495);
        v52 = (double *)a2[64];
      }
    }
    v52[7] = v470 * 0.5;
    v505 = *(_QWORD *)(a1 + 1584);
    v506 = *(_QWORD *)(a1 + 1592);
    v507 = 0.0;
    if (v505 == v506)
    {
      v509 = 0.0;
    }
    else if (*(_BYTE *)(a1 + 3011))
    {
      v508 = v506 - v505 - 152;
      v509 = 0.0;
      if (v508 < 0x98)
        goto LABEL_455;
      v510 = v508 / 0x98 + 1;
      v511 = v505 + 152 * (v510 & 0x3FFFFFFFFFFFFFELL);
      v512 = (double *)(v505 + 264);
      v513 = v510 & 0x3FFFFFFFFFFFFFELL;
      do
      {
        v509 = v509 + *(v512 - 19) + *v512;
        v512 += 38;
        v513 -= 2;
      }
      while (v513);
      v505 = v511;
      if (v510 != (v510 & 0x3FFFFFFFFFFFFFELL))
      {
LABEL_455:
        do
        {
          v509 = v509 + *(double *)(v505 + 112);
          v505 += 152;
        }
        while (v505 != v506);
      }
    }
    else
    {
      v509 = 0.0;
      do
      {
        if (*(_BYTE *)(v505 + 120))
        {
          *(_QWORD *)(v505 + 104) = *(_QWORD *)(v505 + 80);
          *(_OWORD *)(v505 + 88) = *(_OWORD *)(v505 + 64);
          _Q3 = *(_OWORD *)(v505 + 88);
          _D5 = *(_QWORD *)(v505 + 96);
          __asm { FMLA            D4, D5, V3.D[1] }
          v517 = *(double *)(a1 + 144) * (_D4 + *(double *)(v505 + 104) * *(double *)(v505 + 104));
          *(double *)(v505 + 112) = v517;
          v509 = v509 + v517;
        }
        v505 += 152;
      }
      while (v505 != v506);
      v52 = (double *)a2[64];
    }
    v52[8] = v509 * 0.5;
    v518 = *(_QWORD *)(a1 + 1608);
    v519 = *(_QWORD *)(a1 + 1616);
    if (v518 != v519)
    {
      if (*(_BYTE *)(a1 + 3011))
      {
        v520 = v519 - v518 - 304;
        v507 = 0.0;
        if (v520 < 0x130)
        {
          v521 = *(_QWORD *)(a1 + 1608);
          do
          {
LABEL_316:
            v507 = v507 + *(double *)(v521 + 264);
            v521 += 304;
          }
          while (v521 != v519);
          goto LABEL_317;
        }
        v525 = v520 / 0x130 + 1;
        v521 = v518 + 304 * (v525 & 0x1FFFFFFFFFFFFFELL);
        v526 = v525 & 0x1FFFFFFFFFFFFFELL;
        do
        {
          v507 = v507 + *(double *)(v518 + 264) + *(double *)(v518 + 568);
          v518 += 608;
          v526 -= 2;
        }
        while (v526);
        if (v525 != (v525 & 0x1FFFFFFFFFFFFFELL))
          goto LABEL_316;
      }
      else
      {
        v507 = 0.0;
        do
        {
          if (*(_BYTE *)(v518 + 272))
          {
            *(_OWORD *)(v518 + 248) = *(_OWORD *)(v518 + 232);
            _Q2 = *(_OWORD *)(v518 + 248);
            _D4 = *(_QWORD *)(v518 + 256);
            __asm { FMLA            D3, D4, V2.D[1] }
            *(double *)&_Q2 = *(double *)(a1 + 160) * _D3;
            *(_QWORD *)(v518 + 264) = _Q2;
            v507 = v507 + *(double *)&_Q2;
          }
          v518 += 304;
        }
        while (v518 != v519);
        v52 = (double *)a2[64];
      }
    }
LABEL_317:
    v52[9] = v507 * 0.5;
    v527 = *(_QWORD *)(a1 + 1632);
    v528 = *(_QWORD *)(a1 + 1640);
    v529 = 0.0;
    if (v527 == v528)
    {
      v531 = 0.0;
      goto LABEL_331;
    }
    if (*(_BYTE *)(a1 + 3011))
    {
      v530 = v528 - v527 - 360;
      v531 = 0.0;
      if (v530 < 0x168)
      {
        v532 = *(_QWORD *)(a1 + 1632);
        do
        {
LABEL_330:
          v531 = v531 + *(double *)(v532 + 320);
          v532 += 360;
        }
        while (v532 != v528);
        goto LABEL_331;
      }
      v537 = v530 / 0x168 + 1;
      v532 = v527 + 360 * (v537 & 0x1FFFFFFFFFFFFFELL);
      v538 = v537 & 0x1FFFFFFFFFFFFFELL;
      do
      {
        v531 = v531 + *(double *)(v527 + 320) + *(double *)(v527 + 680);
        v527 += 720;
        v538 -= 2;
      }
      while (v538);
      if (v537 != (v537 & 0x1FFFFFFFFFFFFFELL))
        goto LABEL_330;
    }
    else
    {
      v531 = 0.0;
      do
      {
        if (*(_BYTE *)(v527 + 328))
        {
          *(_QWORD *)(v527 + 312) = *(_QWORD *)(v527 + 288);
          *(_OWORD *)(v527 + 296) = *(_OWORD *)(v527 + 272);
          _Q3 = *(_OWORD *)(v527 + 296);
          _D5 = *(_QWORD *)(v527 + 304);
          __asm { FMLA            D4, D5, V3.D[1] }
          v536 = *(double *)(a1 + 176) * (_D4 + *(double *)(v527 + 312) * *(double *)(v527 + 312));
          *(double *)(v527 + 320) = v536;
          v531 = v531 + v536;
        }
        v527 += 360;
      }
      while (v527 != v528);
      v52 = (double *)a2[64];
    }
LABEL_331:
    v52[10] = v531 * 0.5;
    v539 = *(_QWORD *)(a1 + 1656);
    v540 = *(_QWORD *)(a1 + 1664);
    if (v539 != v540)
    {
      if (*(_BYTE *)(a1 + 3011))
      {
        v541 = v540 - v539 - 112;
        v529 = 0.0;
        if (v541 < 0x70)
          goto LABEL_456;
        v542 = (((v541 >> 4) * (unsigned __int128)0x2492492492492493uLL) >> 64) + 1;
        v543 = v539 + 112 * (v542 & 0x7FFFFFFFFFFFFFELL);
        v544 = (double *)(v539 + 184);
        v545 = v542 & 0x7FFFFFFFFFFFFFELL;
        do
        {
          v546 = *(v544 - 14);
          v547 = *v544;
          v544 += 28;
          v529 = v529 + v546 + v547;
          v545 -= 2;
        }
        while (v545);
        v539 = v543;
        if (v542 != (v542 & 0x7FFFFFFFFFFFFFELL))
        {
LABEL_456:
          do
          {
            v529 = v529 + *(double *)(v539 + 72);
            v539 += 112;
          }
          while (v539 != v540);
        }
      }
      else
      {
        v529 = 0.0;
        do
        {
          if (*(_BYTE *)(v539 + 80))
          {
            v548 = *(double *)(v539 + 56);
            *(double *)(v539 + 64) = v548;
            v549 = *(double *)(a1 + 192) * (v548 * v548);
            *(double *)(v539 + 72) = v549;
            v529 = v529 + v549;
          }
          v539 += 112;
        }
        while (v539 != v540);
        v52 = (double *)a2[64];
      }
    }
    v52[11] = v529 * 0.5;
    v550 = *(_QWORD *)(a1 + 1680);
    v551 = *(_QWORD *)(a1 + 1688);
    v552 = 0.0;
    if (v550 == v551)
    {
      v554 = 0.0;
    }
    else if (*(_BYTE *)(a1 + 3011))
    {
      v553 = v551 - v550 - 208;
      v554 = 0.0;
      if (v553 < 0xD0)
        goto LABEL_457;
      v555 = v553 / 0xD0 + 1;
      v556 = v550 + 208 * (v555 & 0x3FFFFFFFFFFFFFELL);
      v557 = (double *)(v550 + 376);
      v558 = v555 & 0x3FFFFFFFFFFFFFELL;
      do
      {
        v554 = v554 + *(v557 - 26) + *v557;
        v557 += 52;
        v558 -= 2;
      }
      while (v558);
      v550 = v556;
      if (v555 != (v555 & 0x3FFFFFFFFFFFFFELL))
      {
LABEL_457:
        do
        {
          v554 = v554 + *(double *)(v550 + 168);
          v550 += 208;
        }
        while (v550 != v551);
      }
    }
    else
    {
      v554 = 0.0;
      do
      {
        if (*(_BYTE *)(v550 + 176))
        {
          *(_OWORD *)(v550 + 152) = *(_OWORD *)(v550 + 120);
          *(_OWORD *)(v550 + 136) = *(_OWORD *)(v550 + 104);
          _Q3 = *(_OWORD *)(v550 + 136);
          _D5 = *(_QWORD *)(v550 + 144);
          __asm { FMLA            D4, D5, V3.D[1] }
          *(_QWORD *)&_Q3 = *(_QWORD *)(v550 + 160);
          __asm { FMLA            D4, D3, V1.D[1] }
          v563 = *(double *)(a1 + 208) * _D4;
          *(double *)(v550 + 168) = v563;
          v554 = v554 + v563;
        }
        v550 += 208;
      }
      while (v550 != v551);
      v52 = (double *)a2[64];
    }
    v52[12] = v554 * 0.5;
    v564 = *(_QWORD *)(a1 + 1704);
    v565 = *(_QWORD *)(a1 + 1712);
    if (v564 != v565)
    {
      if (*(_BYTE *)(a1 + 3011))
      {
        v566 = v565 - v564 - 208;
        v552 = 0.0;
        if (v566 < 0xD0)
          goto LABEL_458;
        v567 = v566 / 0xD0 + 1;
        v568 = v564 + 208 * (v567 & 0x3FFFFFFFFFFFFFELL);
        v569 = (double *)(v564 + 376);
        v570 = v567 & 0x3FFFFFFFFFFFFFELL;
        do
        {
          v552 = v552 + *(v569 - 26) + *v569;
          v569 += 52;
          v570 -= 2;
        }
        while (v570);
        v564 = v568;
        if (v567 != (v567 & 0x3FFFFFFFFFFFFFELL))
        {
LABEL_458:
          do
          {
            v552 = v552 + *(double *)(v564 + 168);
            v564 += 208;
          }
          while (v564 != v565);
        }
      }
      else
      {
        v552 = 0.0;
        do
        {
          if (*(_BYTE *)(v564 + 176))
          {
            *(_OWORD *)(v564 + 152) = *(_OWORD *)(v564 + 120);
            *(_OWORD *)(v564 + 136) = *(_OWORD *)(v564 + 104);
            _Q3 = *(_OWORD *)(v564 + 136);
            _D5 = *(_QWORD *)(v564 + 144);
            __asm { FMLA            D4, D5, V3.D[1] }
            *(_QWORD *)&_Q3 = *(_QWORD *)(v564 + 160);
            __asm { FMLA            D4, D3, V2.D[1] }
            v575 = *(double *)(a1 + 224) * _D4;
            *(double *)(v564 + 168) = v575;
            v552 = v552 + v575;
          }
          v564 += 208;
        }
        while (v564 != v565);
        v52 = (double *)a2[64];
      }
    }
    v52[13] = v552 * 0.5;
    v576 = *(_QWORD *)(a1 + 1728);
    v577 = *(_QWORD *)(a1 + 1736);
    v578 = 0.0;
    if (v576 == v577)
    {
      v580 = 0.0;
    }
    else if (*(_BYTE *)(a1 + 3011))
    {
      v579 = v577 - v576 - 176;
      v580 = 0.0;
      if (v579 < 0xB0)
        goto LABEL_459;
      v581 = v579 / 0xB0 + 1;
      v582 = v576 + 176 * (v581 & 0x3FFFFFFFFFFFFFELL);
      v583 = (double *)(v576 + 312);
      v584 = v581 & 0x3FFFFFFFFFFFFFELL;
      do
      {
        v580 = v580 + *(v583 - 22) + *v583;
        v583 += 44;
        v584 -= 2;
      }
      while (v584);
      v576 = v582;
      if (v581 != (v581 & 0x3FFFFFFFFFFFFFELL))
      {
LABEL_459:
        do
        {
          v580 = v580 + *(double *)(v576 + 136);
          v576 += 176;
        }
        while (v576 != v577);
      }
    }
    else
    {
      v580 = 0.0;
      do
      {
        if (*(_BYTE *)(v576 + 144))
        {
          *(_QWORD *)(v576 + 128) = *(_QWORD *)(v576 + 104);
          *(_OWORD *)(v576 + 112) = *(_OWORD *)(v576 + 88);
          _Q3 = *(_OWORD *)(v576 + 112);
          _D5 = *(_QWORD *)(v576 + 120);
          __asm { FMLA            D4, D5, V3.D[1] }
          v588 = *(double *)(a1 + 240) * (_D4 + *(double *)(v576 + 128) * *(double *)(v576 + 128));
          *(double *)(v576 + 136) = v588;
          v580 = v580 + v588;
        }
        v576 += 176;
      }
      while (v576 != v577);
      v52 = (double *)a2[64];
    }
    v52[14] = v580 * 0.5;
    v589 = *(_QWORD *)(a1 + 1752);
    v590 = *(_QWORD *)(a1 + 1760);
    if (v589 != v590)
    {
      if (*(_BYTE *)(a1 + 3011))
      {
        v591 = v590 - v589 - 176;
        v578 = 0.0;
        if (v591 < 0xB0)
          goto LABEL_460;
        v592 = v591 / 0xB0 + 1;
        v593 = v589 + 176 * (v592 & 0x3FFFFFFFFFFFFFELL);
        v594 = (double *)(v589 + 312);
        v595 = v592 & 0x3FFFFFFFFFFFFFELL;
        do
        {
          v578 = v578 + *(v594 - 22) + *v594;
          v594 += 44;
          v595 -= 2;
        }
        while (v595);
        v589 = v593;
        if (v592 != (v592 & 0x3FFFFFFFFFFFFFELL))
        {
LABEL_460:
          do
          {
            v578 = v578 + *(double *)(v589 + 136);
            v589 += 176;
          }
          while (v589 != v590);
        }
      }
      else
      {
        v578 = 0.0;
        do
        {
          if (*(_BYTE *)(v589 + 144))
          {
            *(_QWORD *)(v589 + 128) = *(_QWORD *)(v589 + 104);
            *(_OWORD *)(v589 + 112) = *(_OWORD *)(v589 + 88);
            _Q3 = *(_OWORD *)(v589 + 112);
            _D5 = *(_QWORD *)(v589 + 120);
            __asm { FMLA            D4, D5, V3.D[1] }
            v599 = *(double *)(a1 + 256) * (_D4 + *(double *)(v589 + 128) * *(double *)(v589 + 128));
            *(double *)(v589 + 136) = v599;
            v578 = v578 + v599;
          }
          v589 += 176;
        }
        while (v589 != v590);
        v52 = (double *)a2[64];
      }
    }
    v52[15] = v578 * 0.5;
    v600 = *(_QWORD *)(a1 + 1776);
    v601 = *(_QWORD *)(a1 + 1784);
    v602 = 0.0;
    if (v600 == v601)
    {
      v604 = 0.0;
    }
    else if (*(_BYTE *)(a1 + 3011))
    {
      v603 = v601 - v600 - 216;
      v604 = 0.0;
      if (v603 < 0xD8)
        goto LABEL_461;
      v605 = v603 / 0xD8 + 1;
      v606 = v600 + 216 * (v605 & 0x3FFFFFFFFFFFFFELL);
      v607 = (double *)(v600 + 392);
      v608 = v605 & 0x3FFFFFFFFFFFFFELL;
      do
      {
        v604 = v604 + *(v607 - 27) + *v607;
        v607 += 54;
        v608 -= 2;
      }
      while (v608);
      v600 = v606;
      if (v605 != (v605 & 0x3FFFFFFFFFFFFFELL))
      {
LABEL_461:
        do
        {
          v604 = v604 + *(double *)(v600 + 176);
          v600 += 216;
        }
        while (v600 != v601);
      }
    }
    else
    {
      v604 = 0.0;
      do
      {
        if (*(_BYTE *)(v600 + 184))
        {
          *(_OWORD *)(v600 + 160) = *(_OWORD *)(v600 + 144);
          _Q1 = *(_OWORD *)(v600 + 160);
          _D4 = *(_QWORD *)(v600 + 168);
          __asm { FMLA            D3, D4, V1.D[1] }
          *(double *)&_Q1 = *(double *)(a1 + 272) * _D3;
          *(_QWORD *)(v600 + 176) = _Q1;
          v604 = v604 + *(double *)&_Q1;
        }
        v600 += 216;
      }
      while (v600 != v601);
      v52 = (double *)a2[64];
    }
    v52[16] = v604 * 0.5;
    v612 = *(_QWORD *)(a1 + 1800);
    v613 = *(_QWORD *)(a1 + 1808);
    if (v612 != v613)
    {
      if (*(_BYTE *)(a1 + 3011))
      {
        v614 = v613 - v612 - 184;
        v602 = 0.0;
        if (v614 < 0xB8)
          goto LABEL_462;
        v615 = v614 / 0xB8 + 1;
        v616 = v612 + 184 * (v615 & 0x3FFFFFFFFFFFFFELL);
        v617 = (double *)(v612 + 328);
        v618 = v615 & 0x3FFFFFFFFFFFFFELL;
        do
        {
          v602 = v602 + *(v617 - 23) + *v617;
          v617 += 46;
          v618 -= 2;
        }
        while (v618);
        v612 = v616;
        if (v615 != (v615 & 0x3FFFFFFFFFFFFFELL))
        {
LABEL_462:
          do
          {
            v602 = v602 + *(double *)(v612 + 144);
            v612 += 184;
          }
          while (v612 != v613);
        }
      }
      else
      {
        v602 = 0.0;
        do
        {
          if (*(_BYTE *)(v612 + 152))
          {
            *(_OWORD *)(v612 + 128) = *(_OWORD *)(v612 + 112);
            _Q2 = *(_OWORD *)(v612 + 128);
            _D4 = *(_QWORD *)(v612 + 136);
            __asm { FMLA            D3, D4, V2.D[1] }
            *(double *)&_Q2 = *(double *)(a1 + 288) * _D3;
            *(_QWORD *)(v612 + 144) = _Q2;
            v602 = v602 + *(double *)&_Q2;
          }
          v612 += 184;
        }
        while (v612 != v613);
        v52 = (double *)a2[64];
      }
    }
    v52[17] = v602 * 0.5;
    v622 = *(_QWORD *)(a1 + 1824);
    v623 = *(_QWORD *)(a1 + 1832);
    v357 = 0.0;
    if (v622 == v623)
    {
      v625 = 0.0;
    }
    else if (*(_BYTE *)(a1 + 3011))
    {
      v624 = v623 - v622 - 208;
      v625 = 0.0;
      if (v624 < 0xD0)
        goto LABEL_463;
      v626 = v624 / 0xD0 + 1;
      v627 = v622 + 208 * (v626 & 0x3FFFFFFFFFFFFFELL);
      v628 = (double *)(v622 + 376);
      v629 = v626 & 0x3FFFFFFFFFFFFFELL;
      do
      {
        v625 = v625 + *(v628 - 26) + *v628;
        v628 += 52;
        v629 -= 2;
      }
      while (v629);
      v622 = v627;
      if (v626 != (v626 & 0x3FFFFFFFFFFFFFELL))
      {
LABEL_463:
        do
        {
          v625 = v625 + *(double *)(v622 + 168);
          v622 += 208;
        }
        while (v622 != v623);
      }
    }
    else
    {
      v625 = 0.0;
      do
      {
        if (*(_BYTE *)(v622 + 176))
        {
          v630 = *(double *)(v622 + 152);
          *(double *)(v622 + 160) = v630;
          v631 = *(double *)(a1 + 304) * (v630 * v630);
          *(double *)(v622 + 168) = v631;
          v625 = v625 + v631;
        }
        v622 += 208;
      }
      while (v622 != v623);
      v52 = (double *)a2[64];
    }
    v52[18] = v625 * 0.5;
    v632 = *(_QWORD *)(a1 + 1848);
    v633 = *(_QWORD *)(a1 + 1856);
    if (v632 != v633)
    {
      if (*(_BYTE *)(a1 + 3011))
      {
        v634 = v633 - v632 - 184;
        v357 = 0.0;
        if (v634 < 0xB8)
          goto LABEL_464;
        v635 = v634 / 0xB8 + 1;
        v636 = v632 + 184 * (v635 & 0x3FFFFFFFFFFFFFELL);
        v637 = (double *)(v632 + 328);
        v638 = v635 & 0x3FFFFFFFFFFFFFELL;
        do
        {
          v357 = v357 + *(v637 - 23) + *v637;
          v637 += 46;
          v638 -= 2;
        }
        while (v638);
        v632 = v636;
        if (v635 != (v635 & 0x3FFFFFFFFFFFFFELL))
        {
LABEL_464:
          do
          {
            v357 = v357 + *(double *)(v632 + 144);
            v632 += 184;
          }
          while (v632 != v633);
        }
        goto LABEL_446;
      }
      v357 = 0.0;
      do
      {
        if (*(_BYTE *)(v632 + 152))
        {
          *(_OWORD *)(v632 + 128) = *(_OWORD *)(v632 + 112);
          _Q0 = *(_OWORD *)(v632 + 128);
          _D2 = *(_QWORD *)(v632 + 136);
          __asm { FMLA            D1, D2, V0.D[1] }
          *(double *)&_Q0 = *(double *)(a1 + 320) * _D1;
          *(_QWORD *)(v632 + 144) = _Q0;
          v357 = v357 + *(double *)&_Q0;
        }
        v632 += 184;
      }
      while (v632 != v633);
LABEL_187:
      v52 = (double *)a2[64];
      goto LABEL_446;
    }
    goto LABEL_446;
  }
LABEL_28:
  v32 = *(_QWORD *)(a1 + 1392);
  v33 = *(_QWORD *)(a1 + 1400);
  v34 = 0.0;
  for (i = 0.0; v32 != v33; v32 += 504)
  {
    while (1)
    {
      v36 = (float64x2_t *)(v32 + 344);
      v37 = sub_20F4AFF88((char *)(v32 + 8), (float64x2_t **)(v32 + 208), v32 + 344);
      *(_BYTE *)(v32 + 472) = v37;
      if (v37)
        break;
      *(_QWORD *)(v32 + 464) = 0;
      v32 += 504;
      if (v32 == v33)
        goto LABEL_35;
    }
    v38 = *(_QWORD *)(v32 + 480);
    if (v38)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v38 + 24))(v38, v32 + 344);
    _Q1 = *(float64x2_t *)(v32 + 408);
    v39 = *(_OWORD *)(v32 + 424);
    _Q3 = *(float64x2_t *)(v32 + 392);
    *(float64x2_t *)(v32 + 288) = _Q1;
    *(_OWORD *)(v32 + 304) = v39;
    _Q2 = *(float64x2_t *)(v32 + 424);
    *(_OWORD *)(v32 + 320) = *(_OWORD *)(v32 + 440);
    *(_QWORD *)(v32 + 336) = *(_QWORD *)(v32 + 456);
    v40 = *(float64x2_t *)(v32 + 360);
    _Q5 = *v36;
    _Q7 = v40;
    *(float64x2_t *)(v32 + 224) = *v36;
    *(float64x2_t *)(v32 + 240) = v40;
    _Q4 = *(float64x2_t *)(v32 + 376);
    _Q0 = *(float64x2_t *)(v32 + 392);
    *(float64x2_t *)(v32 + 256) = _Q4;
    *(float64x2_t *)(v32 + 272) = _Q0;
    _Q6 = *(float64x2_t *)(v32 + 440);
    _D17 = _Q5.f64[1];
    __asm { FMLA            D16, D17, V5.D[1] }
    _Q5.f64[0] = _Q7.f64[1];
    __asm { FMLA            D16, D5, V7.D[1] }
    _Q5.f64[0] = _Q4.f64[1];
    __asm { FMLA            D16, D5, V4.D[1] }
    _Q4.f64[0] = _Q3.f64[1];
    __asm { FMLA            D16, D4, V3.D[1] }
    _Q3.f64[0] = _Q1.f64[1];
    __asm { FMLA            D16, D3, V1.D[1] }
    _Q1.f64[0] = _Q2.f64[1];
    __asm { FMLA            D16, D1, V2.D[1] }
    _Q1.f64[0] = _Q6.f64[1];
    __asm { FMLA            D16, D1, V6.D[1] }
    _Q1.f64[0] = *(float64_t *)(a1 + 16);
    _Q0.f64[0] = _Q1.f64[0] * (_D16 + *(double *)(v32 + 456) * *(double *)(v32 + 456));
    *(float64_t *)(v32 + 464) = _Q0.f64[0];
    i = i + _Q0.f64[0];
  }
LABEL_35:
  v52 = (double *)a2[64];
  *v52 = i * 0.5;
  v53 = *(_QWORD **)(a1 + 1416);
  v54 = *(_QWORD **)(a1 + 1424);
  if (v53 != v54)
  {
    v55 = v53 + 32;
    v34 = 0.0;
    do
    {
      while (!*(v55 - 17))
      {
        *((_BYTE *)v55 - 8) = 0;
        *(v55 - 2) = 0;
        v56 = v55 + 3;
        v55 += 35;
        if (v56 == v54)
          goto LABEL_42;
      }
      v57 = (const double *)(v55 - 29);
      v702 = vld3q_f64(v57);
      v58 = *(v55 - 15);
      v59 = *((double *)v55 - 21);
      _Q4 = *(_OWORD *)(v55 - 23);
      v61 = *(double *)(v58 + 48);
      v62 = *(double *)(v58 + 72);
      v63 = *(double *)(v58 + 96);
      v64 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v702.val[0], *(double *)(v58 + 32)), v702.val[1], *(float64x2_t *)(v58 + 32), 1), v702.val[2], v61);
      _D6 = *(_QWORD *)(v58 + 40);
      __asm { FMLA            D20, D6, V4.D[1] }
      v67 = _D20 + v59 * v61;
      v68 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v702.val[0], *(double *)(v58 + 56)), v702.val[1], *(float64x2_t *)(v58 + 56), 1), v702.val[2], v62);
      _D16 = *(_QWORD *)(v58 + 64);
      __asm { FMLA            D20, D16, V4.D[1] }
      v71 = _D20 + v59 * v62;
      v72 = vmlaq_laneq_f64(vmulq_n_f64(v702.val[0], *(double *)(v58 + 80)), v702.val[1], *(float64x2_t *)(v58 + 80), 1);
      _D18 = *(_QWORD *)(v58 + 88);
      __asm { FMLA            D20, D18, V4.D[1] }
      *(double *)v675 = v67;
      v674 = v64;
      *((double *)&v675[1] + 1) = v71;
      *(float64x2_t *)((char *)v675 + 8) = v68;
      v677.f64[0] = _D20 + v59 * v63;
      v676 = vmlaq_n_f64(v72, v702.val[2], v63);
      *(_QWORD *)&v666 = 0;
      v665 = 0uLL;
      sub_20E9733B8(&v674, v665.f64);
      v75 = (float64x2_t *)(v55 - 8);
      v76 = v665;
      *(v55 - 6) = v666;
      *((float64x2_t *)v55 - 4) = v76;
      v76.f64[0] = *(float64_t *)(v58 + 120);
      v77.f64[0] = *(float64_t *)(v55 - 18);
      *(float64x2_t *)(v55 - 5) = vsubq_f64(*(float64x2_t *)(v58 + 104), *((float64x2_t *)v55 - 10));
      *(v55 - 3) = *(_OWORD *)&vsubq_f64(v76, v77);
      v78 = (float64x2_t *)*(v55 - 17);
      _Q0 = vmulq_f64(*((float64x2_t *)v55 - 2), v78[3]);
      _Q1 = vmulq_f64(*((float64x2_t *)v55 - 3), v78[2]);
      v79 = vmulq_f64(*((float64x2_t *)v55 - 4), v78[1]);
      *((float64x2_t *)v55 - 4) = v79;
      *((float64x2_t *)v55 - 3) = _Q1;
      *((float64x2_t *)v55 - 2) = _Q0;
      *((_BYTE *)v55 - 8) = 1;
      if (*v55)
      {
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)*v55 + 24))(*v55, v55 - 8);
        _Q1 = *((float64x2_t *)v55 - 3);
        _Q0 = *((float64x2_t *)v55 - 2);
        v79 = *v75;
      }
      _Q3.f64[0] = *(double *)vextq_s8((int8x16_t)_Q0, (int8x16_t)_Q0, 8uLL).i64;
      _Q4 = (float64x2_t)vextq_s8((int8x16_t)_Q1, (int8x16_t)_Q1, 8uLL);
      _Q5 = (float64x2_t)vextq_s8((int8x16_t)v79, (int8x16_t)v79, 8uLL);
      v80 = (float64x2_t *)(v55 - 14);
      _Q7 = *((float64x2_t *)v55 - 3);
      *v80 = *v75;
      v80[1] = _Q7;
      _Q6 = *((float64x2_t *)v55 - 2);
      v80[2] = _Q6;
      v79.f64[1] = _Q5.f64[0];
      _Q2 = vmulq_f64(v79, v79);
      _Q2.f64[0] = _Q2.f64[0] + _Q5.f64[0] * _Q5.f64[0];
      v81 = _Q2.f64[0]
          + _Q1.f64[0] * _Q1.f64[0]
          + _Q4.f64[0] * _Q4.f64[0]
          + _Q0.f64[0] * _Q0.f64[0]
          + _Q3.f64[0] * _Q3.f64[0];
      _Q1.f64[0] = *(float64_t *)(a1 + 32);
      v82 = _Q1.f64[0] * v81;
      *((float64_t *)v55 - 2) = v82;
      v34 = v34 + v82;
      v83 = v55 + 3;
      v55 += 35;
    }
    while (v83 != v54);
LABEL_42:
    v52 = (double *)a2[64];
  }
  v52[1] = v34 * 0.5;
  v84 = *(_QWORD **)(a1 + 1440);
  v85 = *(_QWORD **)(a1 + 1448);
  v86 = 0.0;
  v87 = 0.0;
  if (v84 != v85)
  {
    v88 = v84 + 32;
    do
    {
      while (!*(v88 - 17))
      {
        *((_BYTE *)v88 - 8) = 0;
        *(v88 - 2) = 0;
        v89 = v88 + 3;
        v88 += 35;
        if (v89 == v85)
          goto LABEL_50;
      }
      v90 = (const double *)(v88 - 29);
      v703 = vld3q_f64(v90);
      v91 = *(v88 - 15);
      v92 = *((double *)v88 - 21);
      _Q4 = *(_OWORD *)(v88 - 23);
      v94 = *(double *)(v91 + 48);
      v95 = *(double *)(v91 + 72);
      v96 = *(double *)(v91 + 96);
      v97 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v703.val[0], *(double *)(v91 + 32)), v703.val[1], *(float64x2_t *)(v91 + 32), 1), v703.val[2], v94);
      _D6 = *(_QWORD *)(v91 + 40);
      __asm { FMLA            D20, D6, V4.D[1] }
      v100 = _D20 + v92 * v94;
      v101 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v703.val[0], *(double *)(v91 + 56)), v703.val[1], *(float64x2_t *)(v91 + 56), 1), v703.val[2], v95);
      _D16 = *(_QWORD *)(v91 + 64);
      __asm { FMLA            D20, D16, V4.D[1] }
      v104 = _D20 + v92 * v95;
      v105 = vmlaq_laneq_f64(vmulq_n_f64(v703.val[0], *(double *)(v91 + 80)), v703.val[1], *(float64x2_t *)(v91 + 80), 1);
      _D18 = *(_QWORD *)(v91 + 88);
      __asm { FMLA            D20, D18, V4.D[1] }
      *(double *)v675 = v100;
      v674 = v97;
      *((double *)&v675[1] + 1) = v104;
      *(float64x2_t *)((char *)v675 + 8) = v101;
      v677.f64[0] = _D20 + v92 * v96;
      v676 = vmlaq_n_f64(v105, v703.val[2], v96);
      *(_QWORD *)&v666 = 0;
      v665 = 0uLL;
      sub_20E9733B8(&v674, v665.f64);
      v108 = (float64x2_t *)(v88 - 8);
      v109 = v665;
      *(v88 - 6) = v666;
      *((float64x2_t *)v88 - 4) = v109;
      v109.f64[0] = *(float64_t *)(v91 + 120);
      v110.f64[0] = *(float64_t *)(v88 - 18);
      *(float64x2_t *)(v88 - 5) = vsubq_f64(*(float64x2_t *)(v91 + 104), *((float64x2_t *)v88 - 10));
      *(v88 - 3) = *(_OWORD *)&vsubq_f64(v109, v110);
      v111 = (float64x2_t *)*(v88 - 17);
      _Q0 = vmulq_f64(*((float64x2_t *)v88 - 2), v111[3]);
      _Q1 = vmulq_f64(*((float64x2_t *)v88 - 3), v111[2]);
      v112 = vmulq_f64(*((float64x2_t *)v88 - 4), v111[1]);
      *((float64x2_t *)v88 - 4) = v112;
      *((float64x2_t *)v88 - 3) = _Q1;
      *((float64x2_t *)v88 - 2) = _Q0;
      *((_BYTE *)v88 - 8) = 1;
      if (*v88)
      {
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)*v88 + 24))(*v88, v88 - 8);
        _Q1 = *((float64x2_t *)v88 - 3);
        _Q0 = *((float64x2_t *)v88 - 2);
        v112 = *v108;
      }
      _Q3.f64[0] = *(double *)vextq_s8((int8x16_t)_Q0, (int8x16_t)_Q0, 8uLL).i64;
      _Q4 = (float64x2_t)vextq_s8((int8x16_t)_Q1, (int8x16_t)_Q1, 8uLL);
      _Q5 = (float64x2_t)vextq_s8((int8x16_t)v112, (int8x16_t)v112, 8uLL);
      v113 = (float64x2_t *)(v88 - 14);
      _Q7 = *((float64x2_t *)v88 - 3);
      *v113 = *v108;
      v113[1] = _Q7;
      _Q6 = *((float64x2_t *)v88 - 2);
      v113[2] = _Q6;
      v112.f64[1] = _Q5.f64[0];
      _Q2 = vmulq_f64(v112, v112);
      _Q2.f64[0] = _Q2.f64[0] + _Q5.f64[0] * _Q5.f64[0];
      v114 = _Q2.f64[0]
           + _Q1.f64[0] * _Q1.f64[0]
           + _Q4.f64[0] * _Q4.f64[0]
           + _Q0.f64[0] * _Q0.f64[0]
           + _Q3.f64[0] * _Q3.f64[0];
      _Q1.f64[0] = *(float64_t *)(a1 + 48);
      v115 = _Q1.f64[0] * v114;
      *((float64_t *)v88 - 2) = v115;
      v87 = v87 + v115;
      v116 = v88 + 3;
      v88 += 35;
    }
    while (v116 != v85);
LABEL_50:
    v52 = (double *)a2[64];
  }
  v52[2] = v87 * 0.5;
  v117 = *(_QWORD **)(a1 + 1464);
  v118 = *(_QWORD **)(a1 + 1472);
  if (v117 != v118)
  {
    v119 = v117 + 32;
    v86 = 0.0;
    do
    {
      while (!*(v119 - 17))
      {
        *((_BYTE *)v119 - 8) = 0;
        *(v119 - 2) = 0;
        v120 = v119 + 3;
        v119 += 35;
        if (v120 == v118)
          goto LABEL_58;
      }
      v121 = (const double *)(v119 - 29);
      v704 = vld3q_f64(v121);
      v122 = *(v119 - 15);
      v123 = *((double *)v119 - 21);
      _Q4 = *(_OWORD *)(v119 - 23);
      v125 = *(double *)(v122 + 48);
      v126 = *(double *)(v122 + 72);
      v127 = *(double *)(v122 + 96);
      v128 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v704.val[0], *(double *)(v122 + 32)), v704.val[1], *(float64x2_t *)(v122 + 32), 1), v704.val[2], v125);
      _D6 = *(_QWORD *)(v122 + 40);
      __asm { FMLA            D20, D6, V4.D[1] }
      v131 = _D20 + v123 * v125;
      v132 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v704.val[0], *(double *)(v122 + 56)), v704.val[1], *(float64x2_t *)(v122 + 56), 1), v704.val[2], v126);
      _D16 = *(_QWORD *)(v122 + 64);
      __asm { FMLA            D20, D16, V4.D[1] }
      v135 = _D20 + v123 * v126;
      v136 = vmlaq_laneq_f64(vmulq_n_f64(v704.val[0], *(double *)(v122 + 80)), v704.val[1], *(float64x2_t *)(v122 + 80), 1);
      _D18 = *(_QWORD *)(v122 + 88);
      __asm { FMLA            D20, D18, V4.D[1] }
      *(double *)v675 = v131;
      v674 = v128;
      *((double *)&v675[1] + 1) = v135;
      *(float64x2_t *)((char *)v675 + 8) = v132;
      v677.f64[0] = _D20 + v123 * v127;
      v676 = vmlaq_n_f64(v136, v704.val[2], v127);
      *(_QWORD *)&v666 = 0;
      v665 = 0uLL;
      sub_20E9733B8(&v674, v665.f64);
      v139 = (float64x2_t *)(v119 - 8);
      v140 = v665;
      *(v119 - 6) = v666;
      *((float64x2_t *)v119 - 4) = v140;
      v140.f64[0] = *(float64_t *)(v122 + 120);
      v141.f64[0] = *(float64_t *)(v119 - 18);
      *(float64x2_t *)(v119 - 5) = vsubq_f64(*(float64x2_t *)(v122 + 104), *((float64x2_t *)v119 - 10));
      *(v119 - 3) = *(_OWORD *)&vsubq_f64(v140, v141);
      v142 = (float64x2_t *)*(v119 - 17);
      _Q0 = vmulq_f64(*((float64x2_t *)v119 - 2), v142[3]);
      _Q1 = vmulq_f64(*((float64x2_t *)v119 - 3), v142[2]);
      v143 = vmulq_f64(*((float64x2_t *)v119 - 4), v142[1]);
      *((float64x2_t *)v119 - 4) = v143;
      *((float64x2_t *)v119 - 3) = _Q1;
      *((float64x2_t *)v119 - 2) = _Q0;
      *((_BYTE *)v119 - 8) = 1;
      if (*v119)
      {
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)*v119 + 24))(*v119, v119 - 8);
        _Q1 = *((float64x2_t *)v119 - 3);
        _Q0 = *((float64x2_t *)v119 - 2);
        v143 = *v139;
      }
      _Q3.f64[0] = *(double *)vextq_s8((int8x16_t)_Q0, (int8x16_t)_Q0, 8uLL).i64;
      _Q4 = (float64x2_t)vextq_s8((int8x16_t)_Q1, (int8x16_t)_Q1, 8uLL);
      _Q5 = (float64x2_t)vextq_s8((int8x16_t)v143, (int8x16_t)v143, 8uLL);
      v144 = (float64x2_t *)(v119 - 14);
      _Q7 = *((float64x2_t *)v119 - 3);
      *v144 = *v139;
      v144[1] = _Q7;
      _Q6 = *((float64x2_t *)v119 - 2);
      v144[2] = _Q6;
      v143.f64[1] = _Q5.f64[0];
      _Q2 = vmulq_f64(v143, v143);
      _Q2.f64[0] = _Q2.f64[0] + _Q5.f64[0] * _Q5.f64[0];
      v145 = _Q2.f64[0]
           + _Q1.f64[0] * _Q1.f64[0]
           + _Q4.f64[0] * _Q4.f64[0]
           + _Q0.f64[0] * _Q0.f64[0]
           + _Q3.f64[0] * _Q3.f64[0];
      _Q1.f64[0] = *(float64_t *)(a1 + 64);
      v146 = _Q1.f64[0] * v145;
      *((float64_t *)v119 - 2) = v146;
      v86 = v86 + v146;
      v147 = v119 + 3;
      v119 += 35;
    }
    while (v147 != v118);
LABEL_58:
    v52 = (double *)a2[64];
  }
  v52[3] = v86 * 0.5;
  v148 = *(_QWORD *)(a1 + 1488);
  v149 = *(_QWORD *)(a1 + 1496);
  v150 = 0.0;
  v151 = 0.0;
  if (v148 != v149)
  {
    do
    {
      while (1)
      {
        v152 = *(float64x2_t **)(v148 + 48);
        if (v152)
          break;
        *(_BYTE *)(v148 + 128) = 0;
        *(_QWORD *)(v148 + 120) = 0;
        v148 += 160;
        if (v148 == v149)
          goto LABEL_66;
      }
      v153 = (int8x16_t *)(v148 + 96);
      v154 = *(float64x2_t **)(v148 + 64);
      _Q0.f64[0] = v154[3].f64[0];
      _Q2.f64[0] = *(float64_t *)(v148 + 40);
      v155 = vsubq_f64(_Q0, _Q2);
      v156 = vsubq_f64(v154[2], *(float64x2_t *)(v148 + 24));
      *(float64x2_t *)(v148 + 96) = v156;
      *(float64_t *)(v148 + 112) = v155.f64[0];
      _Q2.f64[0] = v152[2].f64[0];
      _Q0 = vmulq_f64(v155, _Q2);
      v157 = (int8x16_t)vmulq_f64(v156, v152[1]);
      *(int8x16_t *)(v148 + 96) = v157;
      *(float64_t *)(v148 + 112) = _Q0.f64[0];
      *(_BYTE *)(v148 + 128) = 1;
      v158 = *(_QWORD *)(v148 + 136);
      if (v158)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v158 + 24))(v158, v148 + 96);
        _Q0.f64[0] = *(float64_t *)(v148 + 112);
        v157 = *v153;
      }
      _Q2 = (float64x2_t)vextq_s8(v157, v157, 8uLL);
      _Q3 = *(float64x2_t *)v153;
      *(int8x16_t *)(v148 + 72) = *v153;
      *(_QWORD *)(v148 + 88) = *(_QWORD *)(v148 + 112);
      _Q1.f64[1] = _Q2.f64[0];
      v159 = vmulq_f64(_Q1, _Q1).f64[0] + _Q2.f64[0] * _Q2.f64[0] + _Q0.f64[0] * _Q0.f64[0];
      _Q1.f64[0] = *(float64_t *)(a1 + 80);
      v160 = _Q1.f64[0] * v159;
      *(float64_t *)(v148 + 120) = v160;
      v151 = v151 + v160;
      v148 += 160;
    }
    while (v148 != v149);
LABEL_66:
    v52 = (double *)a2[64];
  }
  v52[4] = v151 * 0.5;
  v161 = *(_QWORD *)(a1 + 1512);
  v162 = *(_QWORD *)(a1 + 1520);
  if (v161 != v162)
  {
    v150 = 0.0;
    do
    {
      while (1)
      {
        v163 = (float64x2_t *)(v161 + 9456);
        v164 = sub_20FB44FA0(v161 + 8);
        *(_BYTE *)(v161 + 9584) = v164;
        if (v164)
          break;
        *(_QWORD *)(v161 + 9576) = 0;
        v161 += 9616;
        if (v161 == v162)
          goto LABEL_74;
      }
      _X8 = v161 + 38440;
      __asm { PRFM            #0, [X8] }
      v167 = *(_QWORD *)(v161 + 9592);
      if (v167)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v167 + 24))(v167, v161 + 9456);
      _X8 = v161 + 38304;
      v169 = *(_OWORD *)(v161 + 9536);
      *(_OWORD *)(v161 + 9400) = *(_OWORD *)(v161 + 9520);
      *(_OWORD *)(v161 + 9416) = v169;
      _Q2 = *(float64x2_t *)(v161 + 9536);
      *(_OWORD *)(v161 + 9432) = *(_OWORD *)(v161 + 9552);
      *(_QWORD *)(v161 + 9448) = *(_QWORD *)(v161 + 9568);
      v170 = *(_OWORD *)(v161 + 9472);
      *(float64x2_t *)(v161 + 9336) = *v163;
      *(_OWORD *)(v161 + 9352) = v170;
      _Q0 = *(float64x2_t *)(v161 + 9488);
      _Q1 = *(float64x2_t *)(v161 + 9504);
      *(float64x2_t *)(v161 + 9368) = _Q0;
      *(float64x2_t *)(v161 + 9384) = _Q1;
      __asm { PRFM            #0, [X8] }
      _Q4 = *(float64x2_t *)(v161 + 9504);
      _Q6 = *(float64x2_t *)(v161 + 9472);
      _Q5 = *(float64x2_t *)(v161 + 9488);
      _Q7 = *v163;
      _D17 = *(_QWORD *)(v161 + 9464);
      __asm { FMLA            D16, D17, V7.D[1] }
      _Q7.f64[0] = _Q6.f64[1];
      __asm { FMLA            D16, D7, V6.D[1] }
      _Q6.f64[0] = _Q5.f64[1];
      __asm { FMLA            D16, D6, V5.D[1] }
      _Q5.f64[0] = _Q4.f64[1];
      __asm { FMLA            D16, D5, V4.D[1] }
      _Q4.f64[0] = *(float64_t *)(v161 + 9528);
      __asm { FMLA            D16, D4, V3.D[1] }
      _Q3.f64[0] = _Q2.f64[1];
      __asm { FMLA            D16, D3, V2.D[1] }
      _Q2.f64[0] = *(float64_t *)(v161 + 9560);
      __asm { FMLA            D16, D2, V1.D[1] }
      _Q1.f64[0] = *(float64_t *)(a1 + 96);
      _Q0.f64[0] = _Q1.f64[0] * (_D16 + *(double *)(v161 + 9568) * *(double *)(v161 + 9568));
      *(float64_t *)(v161 + 9576) = _Q0.f64[0];
      v150 = v150 + _Q0.f64[0];
      v161 += 9616;
    }
    while (v161 != v162);
LABEL_74:
    v52 = (double *)a2[64];
  }
  v52[5] = v150 * 0.5;
  _X22 = *(_QWORD *)(a1 + 1536);
  v181 = *(_QWORD *)(a1 + 1544);
  v182 = 0.0;
  v183 = 0.0;
  if (_X22 != v181)
  {
    do
    {
      __asm { PRFM            #0, [X22,#0x2878] }
      v197 = *(_QWORD *)(_X22 + 5024);
      v198 = *(_QWORD *)(_X22 + 5032);
      v199 = *(_QWORD *)(_X22 + 5040);
      v200 = *(_QWORD *)(_X22 + 5048);
      v700 = (float64x2_t *)(v198 + 56);
      v701 = 3;
      v698 = (float64x2_t *)(v198 + 80);
      v699 = 6;
      v696 = (float64x2_t *)(v200 + 56);
      v697 = 3;
      v694 = (float64x2_t *)(v200 + 80);
      v695 = 6;
      v692 = (float64x2_t *)(v198 + 32);
      v693 = 0;
      v690 = (float64x2_t *)(v200 + 32);
      v691 = 0;
      v201.f64[0] = *(float64_t *)(v197 + 48);
      v202 = *(int64x2_t *)(v197 + 32);
      v203 = *(int64x2_t *)(v197 + 56);
      v204 = *(double *)(v197 + 96);
      _Q4 = *(int64x2_t *)(v197 + 80);
      v206 = (float64x2_t)vzip1q_s64(v202, v203);
      v207 = (float64x2_t)vzip2q_s64(v202, v203);
      v201.f64[1] = *(float64_t *)(v197 + 72);
      v208 = vextq_s8((int8x16_t)v207, (int8x16_t)vdupq_laneq_s64(_Q4, 1), 8uLL);
      _Q6.f64[0] = *(float64_t *)(v197 + 120);
      v209 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v206, *(double *)(v197 + 104)), v207, *(float64x2_t *)(v197 + 104), 1), v201, _Q6.f64[0]);
      _D7 = *(_QWORD *)(v197 + 112);
      __asm { FMLA            D17, D7, V4.D[1] }
      _Q6.f64[0] = _D17 + v204 * _Q6.f64[0];
      _Q7 = vnegq_f64(v209);
      v209.f64[0] = *(float64_t *)(v197 + 80);
      *(_QWORD *)&v207.f64[1] = v208.i64[0];
      v677 = v201;
      v678 = *(unint64_t *)&v204;
      v674 = v206;
      v675[0] = *(unint64_t *)&v209.f64[0];
      v675[1] = v207;
      v676 = (float64x2_t)v208.u64[1];
      v679 = _Q7;
      v680 = *(_OWORD *)&vnegq_f64(_Q6);
      v681 = 0x3FF0000000000000;
      v201.f64[0] = *(float64_t *)(v199 + 48);
      v213 = *(int64x2_t *)(v199 + 32);
      v214 = *(int64x2_t *)(v199 + 56);
      v215 = *(double *)(v199 + 96);
      _Q4 = *(int64x2_t *)(v199 + 80);
      v217 = (float64x2_t)vzip1q_s64(v213, v214);
      v218 = (float64x2_t)vzip2q_s64(v213, v214);
      v201.f64[1] = *(float64_t *)(v199 + 72);
      v219 = vextq_s8((int8x16_t)v218, (int8x16_t)vdupq_laneq_s64(_Q4, 1), 8uLL);
      v220 = *(double *)(v199 + 120);
      _Q7.f64[0] = *(float64_t *)(v199 + 112);
      __asm { FMLA            D17, D7, V4.D[1] }
      _Q7.f64[0] = *(float64_t *)(v199 + 80);
      v222 = vnegq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v217, *(double *)(v199 + 104)), v218, *(float64x2_t *)(v199 + 104), 1), v201, v220));
      *(_QWORD *)&v209.f64[0] = v219.i64[1];
      *(_QWORD *)&v218.f64[1] = v219.i64[0];
      v223 = vnegq_f64((float64x2_t)COERCE_UNSIGNED_INT64(_D17 + v215 * v220));
      v669 = v201;
      v670 = *(unint64_t *)&v215;
      v665 = v217;
      v666 = *(unint64_t *)&_Q7.f64[0];
      v667 = v218;
      v668 = *(unint64_t *)&v209.f64[0];
      v671 = v222;
      v672 = v223.f64[0];
      v673 = 0x3FF0000000000000;
      sub_20F4D7C54(_X22 + 1840, (uint64_t)&v674, (uint64_t)&v665, &v692, &v690, &v700, &v696, &v698, (uint64_t)&v682, (float64x2_t)0, v223, (__n128)*(unint64_t *)&_Q7.f64[0], &v694, 0, 0, 0, 0);
      _X8 = _X22 + 10648;
      v225 = (float64x2_t *)(_X22 + 5176);
      v226 = v682;
      v227 = v683;
      v228 = v685;
      *(_OWORD *)(_X22 + 5208) = v684;
      *(_OWORD *)(_X22 + 5224) = v228;
      *(float64x2_t *)(_X22 + 5176) = v226;
      *(_OWORD *)(_X22 + 5192) = v227;
      v229 = v686;
      v230 = v687;
      v231 = v688;
      *(_QWORD *)(_X22 + 5288) = v689;
      *(_OWORD *)(_X22 + 5256) = v230;
      *(_OWORD *)(_X22 + 5272) = v231;
      *(_OWORD *)(_X22 + 5240) = v229;
      *(_BYTE *)(_X22 + 5304) = 1;
      __asm { PRFM            #0, [X8] }
      v233 = *(_QWORD *)(_X22 + 5312);
      if (v233)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v233 + 24))(v233, _X22 + 5176);
      _X8 = _X22 + 10512;
      v185 = *(_OWORD *)(_X22 + 5256);
      *(_OWORD *)(_X22 + 5120) = *(_OWORD *)(_X22 + 5240);
      *(_OWORD *)(_X22 + 5136) = v185;
      _Q2 = *(float64x2_t *)(_X22 + 5256);
      *(_OWORD *)(_X22 + 5152) = *(_OWORD *)(_X22 + 5272);
      *(_QWORD *)(_X22 + 5168) = *(_QWORD *)(_X22 + 5288);
      v186 = *(_OWORD *)(_X22 + 5192);
      *(float64x2_t *)(_X22 + 5056) = *v225;
      *(_OWORD *)(_X22 + 5072) = v186;
      _Q0 = *(float64x2_t *)(_X22 + 5208);
      _Q1 = *(float64x2_t *)(_X22 + 5224);
      *(float64x2_t *)(_X22 + 5088) = _Q0;
      *(float64x2_t *)(_X22 + 5104) = _Q1;
      __asm { PRFM            #0, [X8] }
      _Q4 = *(float64x2_t *)(_X22 + 5224);
      _Q6 = *(float64x2_t *)(_X22 + 5192);
      _Q5 = *(float64x2_t *)(_X22 + 5208);
      _Q7 = *v225;
      _D17 = *(_QWORD *)(_X22 + 5184);
      __asm { FMLA            D16, D17, V7.D[1] }
      _Q7.f64[0] = _Q6.f64[1];
      __asm { FMLA            D16, D7, V6.D[1] }
      _Q6.f64[0] = _Q5.f64[1];
      __asm { FMLA            D16, D6, V5.D[1] }
      _Q5.f64[0] = _Q4.f64[1];
      __asm { FMLA            D16, D5, V4.D[1] }
      _Q4.f64[0] = *(float64_t *)(_X22 + 5248);
      __asm { FMLA            D16, D4, V3.D[1] }
      _Q3.f64[0] = _Q2.f64[1];
      __asm { FMLA            D16, D3, V2.D[1] }
      _Q2.f64[0] = *(float64_t *)(_X22 + 5280);
      __asm { FMLA            D16, D2, V1.D[1] }
      _Q1.f64[0] = *(float64_t *)(a1 + 112);
      _Q0.f64[0] = _Q1.f64[0] * (_D16 + *(double *)(_X22 + 5288) * *(double *)(_X22 + 5288));
      *(float64_t *)(_X22 + 5296) = _Q0.f64[0];
      v183 = v183 + _Q0.f64[0];
      _X22 += 5336;
    }
    while (_X22 != v181);
    v52 = (double *)a2[64];
  }
  v52[6] = v183 * 0.5;
  v234 = *(_QWORD *)(a1 + 1560);
  v235 = *(_QWORD *)(a1 + 1568);
  if (v234 != v235)
  {
    v182 = 0.0;
    do
    {
      while (1)
      {
        v236 = *(float64x2_t **)(v234 + 48);
        _Q0.f64[0] = v236[3].f64[0];
        v237 = v236[2];
        *(float64x2_t *)(v234 + 80) = v237;
        v238 = (float64x2_t *)(v234 + 80);
        *(float64_t *)(v234 + 96) = _Q0.f64[0];
        _Q2.f64[0] = *(float64_t *)(*(_QWORD *)(v234 + 24) + 16);
        _Q0 = vmulq_f64(_Q0, _Q2);
        _Q1 = vmulq_n_f64(v237, _Q2.f64[0]);
        *(float64x2_t *)(v234 + 80) = _Q1;
        *(float64_t *)(v234 + 96) = _Q0.f64[0];
        LODWORD(v236) = *(unsigned __int8 *)(v234 + 40);
        *(_BYTE *)(v234 + 112) = (_BYTE)v236;
        if ((_DWORD)v236)
          break;
        *(_QWORD *)(v234 + 104) = 0;
        v234 += 144;
        if (v234 == v235)
          goto LABEL_88;
      }
      v239 = *(_QWORD *)(v234 + 120);
      if (v239)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v239 + 24))(v239, v234 + 80);
        _Q0.f64[0] = *(float64_t *)(v234 + 96);
        _Q1 = *v238;
      }
      _Q2 = (float64x2_t)vextq_s8((int8x16_t)_Q1, (int8x16_t)_Q1, 8uLL);
      _Q3 = *v238;
      *(float64x2_t *)(v234 + 56) = *v238;
      *(_QWORD *)(v234 + 72) = *(_QWORD *)(v234 + 96);
      _Q1.f64[1] = _Q2.f64[0];
      v240 = vmulq_f64(_Q1, _Q1).f64[0] + _Q2.f64[0] * _Q2.f64[0] + _Q0.f64[0] * _Q0.f64[0];
      _Q1.f64[0] = *(float64_t *)(a1 + 128);
      v241 = _Q1.f64[0] * v240;
      *(float64_t *)(v234 + 104) = v241;
      v182 = v182 + v241;
      v234 += 144;
    }
    while (v234 != v235);
LABEL_88:
    v52 = (double *)a2[64];
  }
  v52[7] = v182 * 0.5;
  v242 = *(_QWORD *)(a1 + 1584);
  v243 = *(_QWORD *)(a1 + 1592);
  v244 = 0.0;
  v245 = 0.0;
  if (v242 != v243)
  {
    do
    {
      while (1)
      {
        v246 = *(_QWORD *)(v242 + 48);
        v247 = *(_QWORD *)(v242 + 56);
        _Q0.f64[0] = *(float64_t *)(v247 + 120);
        _Q2.f64[0] = *(float64_t *)(v246 + 120);
        _Q3 = *(float64x2_t *)(v246 + 104);
        v248 = vsubq_f64(*(float64x2_t *)(v247 + 104), _Q3);
        *(float64x2_t *)(v242 + 88) = v248;
        v249 = (float64x2_t *)(v242 + 88);
        v250 = vsubq_f64(_Q0, _Q2);
        *(float64_t *)(v242 + 104) = v250.f64[0];
        _Q2.f64[0] = *(float64_t *)(*(_QWORD *)(v242 + 24) + 16);
        _Q0 = vmulq_f64(v250, _Q2);
        _Q1 = vmulq_n_f64(v248, _Q2.f64[0]);
        *(float64x2_t *)(v242 + 88) = _Q1;
        *(float64_t *)(v242 + 104) = _Q0.f64[0];
        LODWORD(v246) = *(unsigned __int8 *)(v242 + 40);
        *(_BYTE *)(v242 + 120) = v246;
        if ((_DWORD)v246)
          break;
        *(_QWORD *)(v242 + 112) = 0;
        v242 += 152;
        if (v242 == v243)
          goto LABEL_96;
      }
      v251 = *(_QWORD *)(v242 + 128);
      if (v251)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v251 + 24))(v251, v242 + 88);
        _Q0.f64[0] = *(float64_t *)(v242 + 104);
        _Q1 = *v249;
      }
      _Q2 = (float64x2_t)vextq_s8((int8x16_t)_Q1, (int8x16_t)_Q1, 8uLL);
      _Q3 = *v249;
      *(float64x2_t *)(v242 + 64) = *v249;
      *(_QWORD *)(v242 + 80) = *(_QWORD *)(v242 + 104);
      _Q1.f64[1] = _Q2.f64[0];
      v252 = vmulq_f64(_Q1, _Q1).f64[0] + _Q2.f64[0] * _Q2.f64[0] + _Q0.f64[0] * _Q0.f64[0];
      _Q1.f64[0] = *(float64_t *)(a1 + 144);
      v253 = _Q1.f64[0] * v252;
      *(float64_t *)(v242 + 112) = v253;
      v245 = v245 + v253;
      v242 += 152;
    }
    while (v242 != v243);
LABEL_96:
    v52 = (double *)a2[64];
  }
  v52[8] = v245 * 0.5;
  v254 = *(_QWORD *)(a1 + 1608);
  v255 = *(_QWORD *)(a1 + 1616);
  if (v254 != v255)
  {
    v244 = 0.0;
    do
    {
      while (1)
      {
        v256 = sub_20FC80984(v254 + 8, (uint64_t *)(v254 + 200), v254 + 248, (double **)(a1 + 1912));
        *(_BYTE *)(v254 + 272) = v256;
        if (v256)
          break;
        *(_QWORD *)(v254 + 264) = 0;
        v254 += 304;
        if (v254 == v255)
          goto LABEL_104;
      }
      v257 = *(_QWORD *)(v254 + 280);
      if (v257)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v257 + 24))(v257, v254 + 248);
      *(_OWORD *)(v254 + 232) = *(_OWORD *)(v254 + 248);
      _Q0 = *(float64x2_t *)(v254 + 248);
      _Q2.f64[0] = *(float64_t *)(v254 + 256);
      __asm { FMLA            D1, D2, V0.D[1] }
      _Q0.f64[0] = *(double *)(a1 + 160) * _Q1.f64[0];
      *(float64_t *)(v254 + 264) = _Q0.f64[0];
      v244 = v244 + _Q0.f64[0];
      v254 += 304;
    }
    while (v254 != v255);
LABEL_104:
    v52 = (double *)a2[64];
  }
  _Q0.f64[0] = v244 * 0.5;
  v52[9] = v244 * 0.5;
  v258 = *(_QWORD *)(a1 + 1632);
  v259 = *(_QWORD *)(a1 + 1640);
  v260 = 0.0;
  v261 = 0.0;
  if (v258 != v259)
  {
    do
    {
      while (1)
      {
        v262 = (float64x2_t *)(v258 + 296);
        v263 = sub_20F9B6D14(v258 + 8, (int64x2_t **)(v258 + 224), (float64x2_t *)(v258 + 296), _Q0.f64[0], _Q1.f64[0], _Q2.f64[0], _Q3.f64[0], _Q4.f64[0], _Q5.f64[0], _Q6.f64[0], _Q7);
        *(_BYTE *)(v258 + 328) = v263;
        if (v263)
          break;
        *(_QWORD *)(v258 + 320) = 0;
        v258 += 360;
        if (v258 == v259)
          goto LABEL_112;
      }
      v264 = *(_QWORD *)(v258 + 336);
      if (v264)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v264 + 24))(v264, v258 + 296);
      _Q0 = *v262;
      *(float64x2_t *)(v258 + 272) = *v262;
      *(_QWORD *)(v258 + 288) = *(_QWORD *)(v258 + 312);
      _Q1 = *v262;
      _Q2 = vmulq_f64(_Q1, _Q1);
      _Q3.f64[0] = *(float64_t *)(v258 + 304);
      __asm { FMLA            D2, D3, V1.D[1] }
      _Q1.f64[0] = *(float64_t *)(a1 + 176);
      _Q0.f64[0] = _Q1.f64[0] * (_Q2.f64[0] + *(double *)(v258 + 312) * *(double *)(v258 + 312));
      *(float64_t *)(v258 + 320) = _Q0.f64[0];
      v261 = v261 + _Q0.f64[0];
      v258 += 360;
    }
    while (v258 != v259);
LABEL_112:
    v52 = (double *)a2[64];
  }
  v52[10] = v261 * 0.5;
  v265 = *(_QWORD *)(a1 + 1656);
  v266 = *(_QWORD *)(a1 + 1664);
  if (v265 != v266)
  {
    v260 = 0.0;
    do
    {
      while (!*(_BYTE *)(v265 + 40))
      {
        *(_BYTE *)(v265 + 80) = 0;
        *(_QWORD *)(v265 + 72) = 0;
        v265 += 112;
        if (v265 == v266)
          goto LABEL_120;
      }
      _Q2.f64[0] = *(float64_t *)(v265 + 32);
      _Q0.f64[0] = _Q2.f64[0] * (*(double *)(*(_QWORD *)(v265 + 48) + 32) - *(double *)(v265 + 24));
      *(float64_t *)(v265 + 64) = _Q0.f64[0];
      *(_BYTE *)(v265 + 80) = 1;
      v267 = *(_QWORD *)(v265 + 88);
      if (v267)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v267 + 24))(v267, v265 + 64);
        _Q0.f64[0] = *(float64_t *)(v265 + 64);
      }
      *(float64_t *)(v265 + 56) = _Q0.f64[0];
      _Q1.f64[0] = *(float64_t *)(a1 + 192);
      v268 = _Q1.f64[0] * (_Q0.f64[0] * _Q0.f64[0]);
      *(float64_t *)(v265 + 72) = v268;
      v260 = v260 + v268;
      v265 += 112;
    }
    while (v265 != v266);
LABEL_120:
    v52 = (double *)a2[64];
  }
  v52[11] = v260 * 0.5;
  v269 = *(_QWORD *)(a1 + 1680);
  v270 = *(_QWORD *)(a1 + 1688);
  v271 = 0.0;
  v272 = 0.0;
  if (v269 != v270)
  {
    do
    {
      while (!*(_BYTE *)(v269 + 88))
      {
        *(_BYTE *)(v269 + 176) = 0;
        *(_QWORD *)(v269 + 168) = 0;
        v269 += 208;
        if (v269 == v270)
          goto LABEL_128;
      }
      v273 = (float64x2_t *)(v269 + 136);
      v274 = *(float64x2_t **)(v269 + 96);
      _Q1 = vmulq_f64(vsubq_f64(v274[2], *(float64x2_t *)(v269 + 24)), *(float64x2_t *)(v269 + 56));
      _Q0 = vmulq_f64(vsubq_f64(v274[3], *(float64x2_t *)(v269 + 40)), *(float64x2_t *)(v269 + 72));
      *(float64x2_t *)(v269 + 152) = _Q0;
      *(float64x2_t *)(v269 + 136) = _Q1;
      *(_BYTE *)(v269 + 176) = 1;
      v275 = *(_QWORD *)(v269 + 184);
      if (v275)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v275 + 24))(v275, v269 + 136);
        _Q1 = *v273;
        _Q0 = *(float64x2_t *)(v269 + 152);
      }
      _Q3 = *(float64x2_t *)(v269 + 152);
      *(float64x2_t *)(v269 + 104) = *v273;
      *(float64x2_t *)(v269 + 120) = _Q3;
      _Q2 = vmulq_f64(_Q1, _Q1);
      _Q3.f64[0] = _Q1.f64[1];
      __asm { FMLA            D2, D3, V1.D[1] }
      _Q1.f64[0] = _Q0.f64[1];
      __asm { FMLA            D2, D1, V0.D[1] }
      v276 = *(double *)(a1 + 208) * _Q2.f64[0];
      *(double *)(v269 + 168) = v276;
      v272 = v272 + v276;
      v269 += 208;
    }
    while (v269 != v270);
LABEL_128:
    v52 = (double *)a2[64];
  }
  v52[12] = v272 * 0.5;
  v277 = *(_QWORD *)(a1 + 1704);
  v278 = *(_QWORD *)(a1 + 1712);
  if (v277 != v278)
  {
    v271 = 0.0;
    do
    {
      while (!*(_BYTE *)(v277 + 88))
      {
        *(_BYTE *)(v277 + 176) = 0;
        *(_QWORD *)(v277 + 168) = 0;
        v277 += 208;
        if (v277 == v278)
          goto LABEL_136;
      }
      v279 = (float64x2_t *)(v277 + 136);
      v280 = *(float64x2_t **)(v277 + 96);
      _Q1 = vmulq_f64(vsubq_f64(v280[2], *(float64x2_t *)(v277 + 24)), *(float64x2_t *)(v277 + 56));
      _Q0 = vmulq_f64(vsubq_f64(v280[3], *(float64x2_t *)(v277 + 40)), *(float64x2_t *)(v277 + 72));
      *(float64x2_t *)(v277 + 152) = _Q0;
      *(float64x2_t *)(v277 + 136) = _Q1;
      *(_BYTE *)(v277 + 176) = 1;
      v281 = *(_QWORD *)(v277 + 184);
      if (v281)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v281 + 24))(v281, v277 + 136);
        _Q1 = *v279;
        _Q0 = *(float64x2_t *)(v277 + 152);
      }
      _Q3 = *(float64x2_t *)(v277 + 152);
      *(float64x2_t *)(v277 + 104) = *v279;
      *(float64x2_t *)(v277 + 120) = _Q3;
      _Q2 = vmulq_f64(_Q1, _Q1);
      _Q3.f64[0] = _Q1.f64[1];
      __asm { FMLA            D2, D3, V1.D[1] }
      _Q1.f64[0] = _Q0.f64[1];
      __asm { FMLA            D2, D1, V0.D[1] }
      v282 = *(double *)(a1 + 224) * _Q2.f64[0];
      *(double *)(v277 + 168) = v282;
      v271 = v271 + v282;
      v277 += 208;
    }
    while (v277 != v278);
LABEL_136:
    v52 = (double *)a2[64];
  }
  v52[13] = v271 * 0.5;
  v283 = *(_QWORD *)(a1 + 1728);
  v284 = *(_QWORD *)(a1 + 1736);
  v285 = 0.0;
  v286 = 0.0;
  if (v283 != v284)
  {
    do
    {
      while (!*(_BYTE *)(v283 + 72))
      {
        *(_BYTE *)(v283 + 144) = 0;
        *(_QWORD *)(v283 + 136) = 0;
        v283 += 176;
        if (v283 == v284)
          goto LABEL_147;
      }
      v287 = *(_QWORD *)(v283 + 80);
      _Q1 = *(_OWORD *)(v283 + 24);
      _D3 = *(_QWORD *)(v283 + 32);
      __asm { FMLA            D2, D3, V1.D[1] }
      v291 = _D2 + *(double *)(v283 + 40) * *(double *)(v283 + 40);
      if (v291 >= 0.0000002635)
      {
        v295 = sqrt(v291);
        v296 = __sincos_stret(v295);
        cosval = v296.__cosval;
        v293 = v296.__sinval / v295;
        v292 = 1.0 / v291 * (1.0 - v296.__cosval);
      }
      else
      {
        v292 = 0.5 - v291 * (v291 / -720.0 + 0.0416666667);
        v293 = 1.0 - v291 * (0.166666667 - v291 * (v291 / -5040.0 + 0.00833333333));
        cosval = 1.0 - v291 * v292;
      }
      v297 = *(double *)(v283 + 24);
      v298 = *(double *)(v283 + 32);
      v299 = v292 * v297;
      v300 = v292 * v298;
      v301 = *(double *)(v283 + 40);
      v302 = cosval + v297 * (v292 * v297);
      v303 = cosval + v298 * (v292 * v298);
      v304 = cosval + v301 * (v292 * v301);
      v305 = v292 * v297 * v298;
      v306 = v299 * v301;
      v307 = v300 * v301;
      v308 = v293 * v297;
      v309 = v293 * v298;
      v310 = v293 * v301;
      v311 = v305 - v310;
      v312 = v309 + v306;
      v313 = v305 + v310;
      v314 = v307 - v308;
      v315 = v306 - v309;
      v316 = v308 + v307;
      v317 = *(double *)(v287 + 48);
      v318 = *(float64x2_t *)(v287 + 32);
      v319 = *(double *)(v287 + 72);
      v320 = *(float64x2_t *)(v287 + 56);
      v321 = *(double *)(v287 + 96);
      v322 = *(float64x2_t *)(v287 + 80);
      *(double *)v675 = v317 * v302 + v319 * v311 + v321 * v312;
      v674 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v318, v302), v320, v311), v322, v312);
      *((double *)&v675[1] + 1) = v317 * v313 + v319 * v303 + v321 * v314;
      *(float64x2_t *)((char *)v675 + 8) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v318, v313), v320, v303), v322, v314);
      v677.f64[0] = v317 * v315 + v319 * v316 + v321 * v304;
      v676 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v318, v315), v320, v316), v322, v304);
      v665 = 0uLL;
      *(_QWORD *)&v666 = 0;
      sub_20E9733B8(&v674, v665.f64);
      v323 = (int8x16_t *)(v283 + 112);
      v324.f64[1] = v665.f64[1];
      v682 = v665;
      v325 = v666;
      *(_QWORD *)&v683 = v666;
      *(float64x2_t *)(v283 + 112) = v665;
      *(_QWORD *)(v283 + 128) = v325;
      v324.f64[0] = *(float64_t *)(v283 + 128);
      v326.f64[0] = *(float64_t *)(v283 + 64);
      _Q0 = vmulq_f64(v324, v326);
      v327 = (int8x16_t)vmulq_f64(*(float64x2_t *)(v283 + 112), *(float64x2_t *)(v283 + 48));
      *(int8x16_t *)(v283 + 112) = v327;
      *(float64_t *)(v283 + 128) = _Q0.f64[0];
      *(_BYTE *)(v283 + 144) = 1;
      v328 = *(_QWORD *)(v283 + 152);
      if (v328)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v328 + 24))(v328, v283 + 112);
        _Q0.f64[0] = *(float64_t *)(v283 + 128);
        v327 = *v323;
      }
      _Q2 = (float64x2_t)vextq_s8(v327, v327, 8uLL);
      _Q3 = *(float64x2_t *)v323;
      *(int8x16_t *)(v283 + 88) = *v323;
      *(_QWORD *)(v283 + 104) = *(_QWORD *)(v283 + 128);
      _Q1.f64[1] = _Q2.f64[0];
      v329 = vmulq_f64(_Q1, _Q1).f64[0] + _Q2.f64[0] * _Q2.f64[0] + _Q0.f64[0] * _Q0.f64[0];
      _Q1.f64[0] = *(float64_t *)(a1 + 240);
      v330 = _Q1.f64[0] * v329;
      *(float64_t *)(v283 + 136) = v330;
      v286 = v286 + v330;
      v283 += 176;
    }
    while (v283 != v284);
LABEL_147:
    v52 = (double *)a2[64];
  }
  v52[14] = v286 * 0.5;
  v331 = *(_QWORD *)(a1 + 1752);
  v332 = *(_QWORD *)(a1 + 1760);
  if (v331 != v332)
  {
    v285 = 0.0;
    do
    {
      while (!*(_BYTE *)(v331 + 72))
      {
        *(_BYTE *)(v331 + 144) = 0;
        *(_QWORD *)(v331 + 136) = 0;
        v331 += 176;
        if (v331 == v332)
          goto LABEL_155;
      }
      v333 = (int8x16_t *)(v331 + 112);
      v334 = *(float64x2_t **)(v331 + 80);
      _Q0.f64[0] = v334[3].f64[0];
      _Q2.f64[0] = *(float64_t *)(v331 + 40);
      v335 = vsubq_f64(_Q0, _Q2);
      _Q2.f64[0] = *(float64_t *)(v331 + 64);
      _Q0 = vmulq_f64(v335, _Q2);
      v336 = (int8x16_t)vmulq_f64(vsubq_f64(v334[2], *(float64x2_t *)(v331 + 24)), *(float64x2_t *)(v331 + 48));
      *(int8x16_t *)(v331 + 112) = v336;
      *(float64_t *)(v331 + 128) = _Q0.f64[0];
      *(_BYTE *)(v331 + 144) = 1;
      v337 = *(_QWORD *)(v331 + 152);
      if (v337)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v337 + 24))(v337, v331 + 112);
        _Q0.f64[0] = *(float64_t *)(v331 + 128);
        v336 = *v333;
      }
      _Q2 = (float64x2_t)vextq_s8(v336, v336, 8uLL);
      _Q3 = *(float64x2_t *)v333;
      *(int8x16_t *)(v331 + 88) = *v333;
      *(_QWORD *)(v331 + 104) = *(_QWORD *)(v331 + 128);
      _Q1.f64[1] = _Q2.f64[0];
      v338 = vmulq_f64(_Q1, _Q1).f64[0] + _Q2.f64[0] * _Q2.f64[0] + _Q0.f64[0] * _Q0.f64[0];
      _Q1.f64[0] = *(float64_t *)(a1 + 256);
      v339 = _Q1.f64[0] * v338;
      *(float64_t *)(v331 + 136) = v339;
      v285 = v285 + v339;
      v331 += 176;
    }
    while (v331 != v332);
LABEL_155:
    v52 = (double *)a2[64];
  }
  v340 = v285 * 0.5;
  v52[15] = v285 * 0.5;
  v341 = *(_QWORD *)(a1 + 1776);
  v342 = *(_QWORD *)(a1 + 1784);
  v343 = 0.0;
  v344 = 0.0;
  if (v341 != v342)
  {
    do
    {
      while (1)
      {
        v345 = sub_20FC7133C(v341 + 8, (uint64_t *)(v341 + 56), v341 + 160, v340, _Q1.f64[0], _Q2.f64[0], _Q3.f64[0], _Q4, _Q5.f64[0], _Q6.f64[0], _Q7);
        *(_BYTE *)(v341 + 184) = v345;
        if (v345)
          break;
        *(_QWORD *)(v341 + 176) = 0;
        v341 += 216;
        if (v341 == v342)
          goto LABEL_163;
      }
      v346 = *(_QWORD *)(v341 + 192);
      if (v346)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v346 + 24))(v346, v341 + 160);
      *(_OWORD *)(v341 + 144) = *(_OWORD *)(v341 + 160);
      _Q0 = *(_OWORD *)(v341 + 160);
      _Q2.f64[0] = *(float64_t *)(v341 + 168);
      __asm { FMLA            D1, D2, V0.D[1] }
      v340 = *(double *)(a1 + 272) * _Q1.f64[0];
      *(double *)(v341 + 176) = v340;
      v344 = v344 + v340;
      v341 += 216;
    }
    while (v341 != v342);
LABEL_163:
    v52 = (double *)a2[64];
  }
  v348 = v344 * 0.5;
  v52[16] = v344 * 0.5;
  v349 = *(_QWORD *)(a1 + 1800);
  v350 = *(_QWORD *)(a1 + 1808);
  if (v349 != v350)
  {
    v343 = 0.0;
    do
    {
      while (1)
      {
        v351 = sub_20FC77D28(v349 + 8, (uint64_t *)(v349 + 64), v349 + 128, v348, _Q1.f64[0], _Q2.f64[0], _Q3.f64[0], _Q4.f64[0], _Q5, _Q6.f64[0], _Q7);
        *(_BYTE *)(v349 + 152) = v351;
        if (v351)
          break;
        *(_QWORD *)(v349 + 144) = 0;
        v349 += 184;
        if (v349 == v350)
          goto LABEL_171;
      }
      v352 = *(_QWORD *)(v349 + 160);
      if (v352)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v352 + 24))(v352, v349 + 128);
      *(_OWORD *)(v349 + 112) = *(_OWORD *)(v349 + 128);
      _Q0 = *(_OWORD *)(v349 + 128);
      _Q2.f64[0] = *(float64_t *)(v349 + 136);
      __asm { FMLA            D1, D2, V0.D[1] }
      v348 = *(double *)(a1 + 288) * _Q1.f64[0];
      *(double *)(v349 + 144) = v348;
      v343 = v343 + v348;
      v349 += 184;
    }
    while (v349 != v350);
LABEL_171:
    v52 = (double *)a2[64];
  }
  v354 = v343 * 0.5;
  v52[17] = v343 * 0.5;
  v355 = *(_QWORD *)(a1 + 1824);
  v356 = *(_QWORD *)(a1 + 1832);
  v357 = 0.0;
  v358 = 0.0;
  if (v355 != v356)
  {
    do
    {
      while (1)
      {
        v359 = sub_20FC7D7A0(v355 + 8, (uint64_t *)(v355 + 64), (double *)(v355 + 160), v354, _Q1.f64[0], _Q2.f64[0], _Q3.f64[0], _Q4, _Q5.f64[0], _Q6.f64[0], _Q7);
        *(_BYTE *)(v355 + 176) = v359;
        if (v359)
          break;
        *(_QWORD *)(v355 + 168) = 0;
        v355 += 208;
        if (v355 == v356)
          goto LABEL_179;
      }
      v360 = *(_QWORD *)(v355 + 184);
      if (v360)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v360 + 24))(v360, v355 + 160);
      v361 = *(double *)(v355 + 160);
      *(double *)(v355 + 152) = v361;
      _Q1.f64[0] = *(float64_t *)(a1 + 304);
      v354 = _Q1.f64[0] * (v361 * v361);
      *(double *)(v355 + 168) = v354;
      v358 = v358 + v354;
      v355 += 208;
    }
    while (v355 != v356);
LABEL_179:
    v52 = (double *)a2[64];
  }
  v362 = v358 * 0.5;
  v52[18] = v358 * 0.5;
  v363 = *(_QWORD *)(a1 + 1848);
  v364 = *(_QWORD *)(a1 + 1856);
  if (v363 != v364)
  {
    v357 = 0.0;
    do
    {
      while (1)
      {
        v365 = sub_20FC7473C(v363 + 8, (uint64_t *)(v363 + 56), v363 + 128, v362, _Q1.f64[0], _Q2.f64[0], _Q3.f64[0], _Q4, _Q5.f64[0], _Q6.f64[0], _Q7);
        *(_BYTE *)(v363 + 152) = v365;
        if (v365)
          break;
        *(_QWORD *)(v363 + 144) = 0;
        v363 += 184;
        if (v363 == v364)
          goto LABEL_187;
      }
      v366 = *(_QWORD *)(v363 + 160);
      if (v366)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v366 + 24))(v366, v363 + 128);
      *(_OWORD *)(v363 + 112) = *(_OWORD *)(v363 + 128);
      _Q0 = *(_OWORD *)(v363 + 128);
      _Q2.f64[0] = *(float64_t *)(v363 + 136);
      __asm { FMLA            D1, D2, V0.D[1] }
      v362 = *(double *)(a1 + 320) * _Q1.f64[0];
      *(double *)(v363 + 144) = v362;
      v357 = v357 + v362;
      v363 += 184;
    }
    while (v363 != v364);
    goto LABEL_187;
  }
LABEL_446:
  v52[19] = v357 * 0.5;
  *(_WORD *)(a1 + 3011) = 257;
  v664 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v639 = (double *)a2[64];
  v640 = *v639;
  v641 = v639[1];
  v642 = v639[2];
  v643 = v639[3];
  v644 = v639[4];
  v645 = v639[5];
  v647 = v639[6];
  v646 = v639[7];
  v662 = v639[9];
  v663 = v639[8];
  v660 = v639[11];
  v661 = v639[10];
  v658 = v639[13];
  v659 = v639[12];
  v656 = v639[15];
  v657 = v639[14];
  v654 = v639[17];
  v655 = v639[16];
  v652 = v639[19];
  v653 = v639[18];
  kdebug_trace();
  return v664
       + v640
       + v641
       + v642
       + v643
       + v644
       + v645
       + v647
       + v646
       + v663
       + v662
       + v661
       + v660
       + v659
       + v658
       + v657
       + v656
       + v655
       + v654
       + v653
       + v652;
}

void sub_20FBBD3AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  sub_20EDB42B8((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_20FBBD3C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  sub_20EDB42B8((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_20FBBD3D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  sub_20EDB42B8((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_20FBBD3EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  sub_20EDB42B8((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_20FBBD400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  sub_20EDB42B8((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_20FBBD414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  sub_20EDB42B8((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_20FBBD428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  sub_20EDB42B8((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_20FBBD43C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  sub_20EDB42B8((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_20FBBD450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  sub_20EDB42B8((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_20FBBD464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  sub_20EDB42B8((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_20FBBD478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  sub_20EDB42B8((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_20FBBD48C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  sub_20EDB42B8((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_20FBBD4A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  sub_20EDB42B8((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_20FBBD4B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  sub_20EDB42B8((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_20FBBD4C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  sub_20EDB42B8((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_20FBBD4DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  sub_20EDB42B8((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_20FBBD4F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  sub_20EDB42B8((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_20FBBD504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  sub_20EDB42B8((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_20FBBD518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  sub_20EDB42B8((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_20FBBD52C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  sub_20EDB42B8((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_20FBBD540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  sub_20EDB42B8((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_20FBBD554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  sub_20EDB42B8((uint64_t)&a31);
  _Unwind_Resume(a1);
}

double *sub_20FBBD568(uint64_t a1, double *a2, double *a3)
{
  unint64_t v6;
  unint64_t v7;
  double *v8;
  double v9;
  float64x2_t v10;
  double v11;
  float64x2_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  float64x2_t v19;
  double v20;
  float64x2_t v21;
  double v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  __n128 v26;
  __n128 v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  float64x2_t v33;
  float64x2_t v34;
  double v35;
  float64x2_t v36;
  __n128 v37;
  __n128 v38;
  double v39;
  double v40;
  float64x2_t v41;
  double v42;
  double v43;
  float64x2_t v44;
  __n128 v45;
  __n128 v46;
  double v47;
  double v48;
  double v49;
  float64x2_t v50;
  double v51;
  float64x2_t v52;
  __n128 v53;
  __n128 v54;
  double v55;
  double v56;
  float64x2_t v57;
  double v58;
  double v59;
  float64x2_t v60;
  __n128 v61;
  __n128 v62;
  double v63;
  double v64;
  float64x2_t v65;
  double v66;
  double v67;
  float64x2_t v68;
  uint64_t v69;
  double *result;
  uint64_t v71;
  double v72;
  uint64_t v73;
  _QWORD v74[64];
  double *v75;
  __int128 v76;
  uint64_t v77;

  v75 = (double *)v74;
  v76 = xmmword_210378040;
  v6 = 0xEFBEFBEFBEFBEFBFLL * ((uint64_t)(*(_QWORD *)(a1 + 1400) - *(_QWORD *)(a1 + 1392)) >> 3)
     - 0x5075075075075075 * ((uint64_t)(*(_QWORD *)(a1 + 1424) - *(_QWORD *)(a1 + 1416)) >> 3)
     - 0x5075075075075075 * ((uint64_t)(*(_QWORD *)(a1 + 1448) - *(_QWORD *)(a1 + 1440)) >> 3)
     - 0x5075075075075075 * ((uint64_t)(*(_QWORD *)(a1 + 1472) - *(_QWORD *)(a1 + 1464)) >> 3)
     - 0x3333333333333333 * ((uint64_t)(*(_QWORD *)(a1 + 1496) - *(_QWORD *)(a1 + 1488)) >> 5)
     - 0x685C01B42E00DA17 * ((uint64_t)(*(_QWORD *)(a1 + 1520) - *(_QWORD *)(a1 + 1512)) >> 4)
     + 0x4515E08719B71393 * ((uint64_t)(*(_QWORD *)(a1 + 1544) - *(_QWORD *)(a1 + 1536)) >> 3)
     - 0x71C71C71C71C71C7 * ((uint64_t)(*(_QWORD *)(a1 + 1568) - *(_QWORD *)(a1 + 1560)) >> 4)
     - 0x79435E50D79435E5 * ((uint64_t)(*(_QWORD *)(a1 + 1592) - *(_QWORD *)(a1 + 1584)) >> 3)
     - 0x79435E50D79435E5 * ((uint64_t)(*(_QWORD *)(a1 + 1616) - *(_QWORD *)(a1 + 1608)) >> 4)
     + 0x4FA4FA4FA4FA4FA5 * ((uint64_t)(*(_QWORD *)(a1 + 1640) - *(_QWORD *)(a1 + 1632)) >> 3)
     + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 1664) - *(_QWORD *)(a1 + 1656)) >> 4)
     + 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 1688) - *(_QWORD *)(a1 + 1680)) >> 4)
     + 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 1712) - *(_QWORD *)(a1 + 1704)) >> 4)
     + 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 1736) - *(_QWORD *)(a1 + 1728)) >> 4)
     + 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 1760) - *(_QWORD *)(a1 + 1752)) >> 4);
  v7 = v6
     - 0x7B425ED097B425EDLL * ((uint64_t)(*(_QWORD *)(a1 + 1784) - *(_QWORD *)(a1 + 1776)) >> 3)
     - 0x2C8590B21642C859 * ((uint64_t)(*(_QWORD *)(a1 + 1808) - *(_QWORD *)(a1 + 1800)) >> 3)
     + 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 1832) - *(_QWORD *)(a1 + 1824)) >> 4)
     - 0x2C8590B21642C859 * ((uint64_t)(*(_QWORD *)(a1 + 1856) - *(_QWORD *)(a1 + 1848)) >> 3);
  if (v7 >= 0x41)
  {
    if (v7 <= 0x80)
      v7 = 128;
    *(_QWORD *)&v76 = v7;
    v8 = (double *)operator new[]();
    if (v75 != (double *)v74 && v75)
      MEMORY[0x212BC6368]();
    v75 = v8;
  }
  v9 = *a3;
  *((_QWORD *)&v76 + 1) = 0;
  if (*(_BYTE *)(a1 + 3012))
  {
    v77 = a1 + 328;
    sub_20FBBDCEC((uint64_t)&v77, v74);
  }
  else
  {
    v77 = a1 + 328;
    sub_20FBBDF20((uint64_t)&v77, v74);
  }
  if (*(_BYTE *)(a1 + 3012))
  {
    v77 = a1 + 328;
    sub_20FBBE824((uint64_t)&v77, v74);
  }
  else
  {
    v77 = a1 + 328;
    sub_20FBBEA18((uint64_t)&v77, v74);
  }
  if (*(_BYTE *)(a1 + 3012))
  {
    v77 = a1 + 328;
    sub_20FBBED9C((uint64_t)&v77, v74);
  }
  else
  {
    v77 = a1 + 328;
    sub_20FBBEF90((uint64_t)&v77, v74);
  }
  if (*(_BYTE *)(a1 + 3012))
  {
    v77 = a1 + 328;
    sub_20FBBF314((uint64_t)&v77, v74);
  }
  else
  {
    v77 = a1 + 328;
    sub_20FBBF508((uint64_t)&v77, v74);
  }
  if (*(_BYTE *)(a1 + 3012))
  {
    v77 = a1 + 328;
    sub_20FBBF88C((uint64_t)&v77, v74);
  }
  else
  {
    v77 = a1 + 328;
    sub_20FBBFA64((uint64_t)&v77, v74, v10, v11, v12);
  }
  if (*(_BYTE *)(a1 + 3012))
  {
    v77 = a1 + 328;
    sub_20FBBFCCC((uint64_t)&v77, v74);
  }
  else
  {
    v77 = a1 + 328;
    sub_20FBBFF14((uint64_t)&v77, v74);
  }
  if (*(_BYTE *)(a1 + 3012))
  {
    v77 = a1 + 328;
    sub_20FBC01D4((uint64_t)&v77, v74);
  }
  else
  {
    v77 = a1 + 328;
    sub_20FBC041C((uint64_t)&v77, v74, v13, v14, v15, v16, v17, v18, v19);
  }
  if (*(_BYTE *)(a1 + 3012))
  {
    v77 = a1 + 328;
    sub_20FBC08C8((uint64_t)&v77, v74);
  }
  else
  {
    v77 = a1 + 328;
    sub_20FBC0AA8((uint64_t)&v77, v74, v20, v21, v22, v23);
  }
  if (*(_BYTE *)(a1 + 3012))
  {
    v77 = a1 + 328;
    sub_20FBC0D10((uint64_t)&v77, v74);
  }
  else
  {
    v77 = a1 + 328;
    sub_20FBC0EF0((uint64_t)&v77, v74, v24, v25);
  }
  if (*(_BYTE *)(a1 + 3012))
  {
    v77 = a1 + 328;
    sub_20FBC1168((uint64_t)&v77, v74);
  }
  else
  {
    v77 = a1 + 328;
    sub_20FBC1340((uint64_t)&v77, v74);
  }
  if (*(_BYTE *)(a1 + 3012))
  {
    v77 = a1 + 328;
    sub_20FBC1578((uint64_t)&v77, v74);
  }
  else
  {
    v77 = a1 + 328;
    sub_20FBC1768((uint64_t)&v77, v74, v26, v27, v28, v29, v30, v31, v32, v33);
  }
  if (*(_BYTE *)(a1 + 3012))
  {
    v77 = a1 + 328;
    sub_20FBC19A0((uint64_t)&v77, v74);
  }
  else
  {
    v77 = a1 + 328;
    sub_20FBC1B70((uint64_t)&v77, v74);
  }
  if (*(_BYTE *)(a1 + 3012))
  {
    v77 = a1 + 328;
    sub_20FBC1DA0((uint64_t)&v77, v74);
  }
  else
  {
    v77 = a1 + 328;
    sub_20FBC1F88((uint64_t)&v77, v74);
  }
  if (*(_BYTE *)(a1 + 3012))
  {
    v77 = a1 + 328;
    sub_20FBC21E0((uint64_t)&v77, v74);
  }
  else
  {
    v77 = a1 + 328;
    sub_20FBC23C8((uint64_t)&v77, v74);
  }
  if (*(_BYTE *)(a1 + 3012))
  {
    v77 = a1 + 328;
    sub_20FBC2620((uint64_t)&v77, v74);
  }
  else
  {
    v77 = a1 + 328;
    sub_20FBC2800((uint64_t)&v77, v74);
  }
  if (*(_BYTE *)(a1 + 3012))
  {
    v77 = a1 + 328;
    sub_20FBC2C3C((uint64_t)&v77, v74);
  }
  else
  {
    v77 = a1 + 328;
    sub_20FBC2E1C((uint64_t)&v77, v74, v34, v35, v36);
  }
  if (*(_BYTE *)(a1 + 3012))
  {
    v77 = a1 + 328;
    sub_20FBC308C((uint64_t)&v77, v74);
  }
  else
  {
    v77 = a1 + 328;
    sub_20FBC3264((uint64_t)&v77, v74, v37, v38, v39, v40, v41, v42, v43, v44);
  }
  if (*(_BYTE *)(a1 + 3012))
  {
    v77 = a1 + 328;
    sub_20FBC348C((uint64_t)&v77, v74);
  }
  else
  {
    v77 = a1 + 328;
    sub_20FBC3664((uint64_t)&v77, v74, v45, v46, v47, v48, v49, v50, v51, v52);
  }
  if (*(_BYTE *)(a1 + 3012))
  {
    v77 = a1 + 328;
    sub_20FBC388C((uint64_t)&v77, v74);
  }
  else
  {
    v77 = a1 + 328;
    sub_20FBC3A5C((uint64_t)&v77, v74, v53, v54, v55, v56, v57, v58, v59, v60);
  }
  if (*(_BYTE *)(a1 + 3012))
  {
    v77 = a1 + 328;
    sub_20FBC3C7C((uint64_t)&v77, v74);
  }
  else
  {
    v77 = a1 + 328;
    sub_20FBC3E54((uint64_t)&v77, v74, v61, v62, v63, v64, v65, v66, v67, v68);
  }
  v69 = *((_QWORD *)&v76 + 1);
  result = v75;
  if (!*((_QWORD *)&v76 + 1))
  {
    *a2 = 1.0;
    *((_QWORD *)&v76 + 1) = 0;
    if (result == (double *)v74)
      return result;
    goto LABEL_76;
  }
  v71 = *((_QWORD *)&v76 + 1) >> 1;
  sub_20E8FB210(v75, &v75[*((_QWORD *)&v76 + 1) >> 1], &v75[*((_QWORD *)&v76 + 1)]);
  result = v75;
  v72 = v75[v71];
  if ((v69 & 1) == 0)
  {
    v73 = v71 - 1;
    if (v73 != v69)
    {
      sub_20E8FB210(v75, &v75[v73], &v75[v69]);
      result = v75;
    }
    v72 = (v72 + result[v73]) * 0.5;
  }
  *a2 = v9 * sqrt(v72);
  *((_QWORD *)&v76 + 1) = 0;
  if (result != (double *)v74)
  {
LABEL_76:
    if (result)
      return (double *)MEMORY[0x212BC6368](result, 0x1000C8000313F17);
  }
  return result;
}

void sub_20FBBDCB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v10;

  STACK[0x210] = 0;
  v10 = STACK[0x200];
  if ((uint64_t *)STACK[0x200] != &a9)
  {
    if (v10)
      MEMORY[0x212BC6368](v10, 0x1000C8000313F17);
  }
  _Unwind_Resume(a1);
}

void sub_20FBBDCEC(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  double *v26;
  uint64_t v27;
  uint64_t v28;
  double *v46;

  v4 = a2[66];
  v5 = v4
     - 0x1041041041041041
     * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1072) - *(_QWORD *)(*(_QWORD *)a1 + 1064)) >> 3);
  if (v4 >= v5)
    goto LABEL_22;
  v6 = a2[65];
  if (v6 >= v5)
  {
    v23 = a2[66];
    v24 = 0xEFBEFBEFBEFBEFBFLL
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1072) - *(_QWORD *)(*(_QWORD *)a1 + 1064)) >> 3);
    if (v5 <= v4)
      goto LABEL_22;
LABEL_21:
    bzero((void *)(a2[64] + 8 * v23), 8 * v24);
    goto LABEL_22;
  }
  v7 = 2 * v6;
  if (v7 <= v5)
    v7 = v4
       - 0x1041041041041041
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1072) - *(_QWORD *)(*(_QWORD *)a1 + 1064)) >> 3);
  a2[65] = v7;
  v8 = a2[64];
  v9 = operator new[]();
  v10 = v9;
  if (v4)
  {
    v11 = 0;
    if (v4 < 4)
      goto LABEL_11;
    if ((unint64_t)(v9 - v8) < 0x20)
      goto LABEL_11;
    v11 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (_OWORD *)(v9 + 16);
    v13 = (__int128 *)(v8 + 16);
    v14 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = *v13;
      *(v12 - 1) = *(v13 - 1);
      *v12 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v4 != v11)
    {
LABEL_11:
      v16 = v4 - v11;
      v17 = 8 * v11;
      v18 = (uint64_t *)(v8 + 8 * v11);
      v19 = (_QWORD *)(v9 + v17);
      do
      {
        v20 = *v18++;
        *v19++ = v20;
        --v16;
      }
      while (v16);
    }
  }
  v21 = (_QWORD *)a2[64];
  if (v21 != a2 && v21 != 0)
    MEMORY[0x212BC6368]();
  a2[64] = v10;
  v23 = a2[66];
  v24 = v5 - v23;
  if (v5 > v23)
    goto LABEL_21;
LABEL_22:
  a2[66] = v5;
  v25 = a2[64];
  v26 = (double *)(v25 + 8 * v4);
  v27 = *(_QWORD *)(*(_QWORD *)a1 + 1064);
  v28 = *(_QWORD *)(*(_QWORD *)a1 + 1072);
  while (v27 != v28)
  {
    if (*(_BYTE *)(v27 + 472))
    {
      _Q7 = *(_OWORD *)(v27 + 224);
      _D17 = *(_QWORD *)(v27 + 232);
      __asm { FMLA            D16, D17, V7.D[1] }
      *(_QWORD *)&_Q7 = *(_QWORD *)(v27 + 248);
      __asm { FMLA            D16, D7, V6.D[1] }
      _D6 = *(_QWORD *)(v27 + 264);
      __asm { FMLA            D16, D6, V5.D[1] }
      _D5 = *(_QWORD *)(v27 + 280);
      __asm { FMLA            D16, D5, V4.D[1] }
      _D4 = *(_QWORD *)(v27 + 296);
      __asm { FMLA            D16, D4, V3.D[1] }
      _D3 = *(_QWORD *)(v27 + 312);
      __asm { FMLA            D16, D3, V2.D[1] }
      _D2 = *(_QWORD *)(v27 + 328);
      __asm { FMLA            D16, D2, V1.D[1] }
      *v26++ = _D16 + *(double *)(v27 + 336) * *(double *)(v27 + 336);
    }
    v27 += 504;
  }
  v46 = (double *)(v25 + 8 * v5);
  if (v26 != v46)
    a2[66] = v5 + ~((unint64_t)((char *)v46 - (char *)v26 - 8) >> 3);
}

void sub_20FBBDF20(uint64_t a1, _QWORD *a2)
{
  int64x2_t v2;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _OWORD *v13;
  __int128 *v14;
  unint64_t v15;
  __int128 v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  double *v27;
  float64x2_t *v28;
  float64x2_t *v29;
  float64x2_t *v30;
  double v48;
  float64x2_t *v49;
  float64_t v50;
  float64_t v51;
  float64_t v52;
  const double *v53;
  double v54;
  double v55;
  double v56;
  float64_t v57;
  int8x16_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  unint64_t v62;
  float64x2_t v63;
  unint64_t v64;
  double v65;
  float64x2_t v67;
  double v70;
  float64x2_t v71;
  float64x2_t v74;
  double v77;
  float64_t v78;
  float64x2_t v79;
  float64x2_t v80;
  int64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  double v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v88;
  float64x2_t v89;
  uint64_t v90;
  float64x2_t v91;
  float64x2_t v92;
  int64x2_t v93;
  int8x16_t v94;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t *v107;
  float64x2_t v109;
  double v120;
  double *v136;
  float64x2_t v137;
  _BYTE v138[80];
  float64x2_t v139;
  double v140;
  char v141;
  float64x2x3_t v142;

  v5 = a2[66];
  v6 = v5
     - 0x1041041041041041
     * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1072) - *(_QWORD *)(*(_QWORD *)a1 + 1064)) >> 3);
  if (v5 >= v6)
    goto LABEL_22;
  v7 = a2[65];
  if (v7 < v6)
  {
    v8 = 2 * v7;
    if (v8 <= v6)
      v8 = v5
         - 0x1041041041041041
         * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1072) - *(_QWORD *)(*(_QWORD *)a1 + 1064)) >> 3);
    a2[65] = v8;
    v9 = a2[64];
    v10 = operator new[]();
    v11 = v10;
    if (v5)
    {
      v12 = 0;
      if (v5 < 4)
        goto LABEL_11;
      if ((unint64_t)(v10 - v9) < 0x20)
        goto LABEL_11;
      v12 = v5 & 0xFFFFFFFFFFFFFFFCLL;
      v13 = (_OWORD *)(v10 + 16);
      v14 = (__int128 *)(v9 + 16);
      v15 = v5 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v16 = *v14;
        *(v13 - 1) = *(v14 - 1);
        *v13 = v16;
        v13 += 2;
        v14 += 2;
        v15 -= 4;
      }
      while (v15);
      if (v5 != v12)
      {
LABEL_11:
        v17 = v5 - v12;
        v18 = 8 * v12;
        v19 = (uint64_t *)(v9 + 8 * v12);
        v20 = (_QWORD *)(v10 + v18);
        do
        {
          v21 = *v19++;
          *v20++ = v21;
          --v17;
        }
        while (v17);
      }
    }
    v22 = (_QWORD *)a2[64];
    if (v22 != a2 && v22 != 0)
      MEMORY[0x212BC6368]();
    a2[64] = v11;
    v24 = a2[66];
    v25 = v6 - v24;
    if (v6 <= v24)
      goto LABEL_22;
    goto LABEL_21;
  }
  v24 = a2[66];
  v25 = 0xEFBEFBEFBEFBEFBFLL
      * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1072) - *(_QWORD *)(*(_QWORD *)a1 + 1064)) >> 3);
  if (v6 > v5)
LABEL_21:
    bzero((void *)(a2[64] + 8 * v24), 8 * v25);
LABEL_22:
  a2[66] = v6;
  v26 = a2[64];
  v27 = (double *)(v26 + 8 * v5);
  v28 = *(float64x2_t **)(*(_QWORD *)a1 + 1064);
  v29 = *(float64x2_t **)(*(_QWORD *)a1 + 1072);
  if (v28 == v29)
    goto LABEL_39;
  v30 = v28 + 30;
  do
  {
    v50 = v30[-18].f64[0];
    if (v50 != 0.0)
    {
      v51 = v30[-17].f64[1];
      v52 = v30[-17].f64[0];
      v53 = &v30[-29].f64[1];
      v54 = *(double *)(*(_QWORD *)&v52 + 48);
      v55 = *(double *)(*(_QWORD *)&v52 + 72);
      v56 = *(double *)(*(_QWORD *)&v52 + 96);
      _Q22 = *(float64x2_t *)(*(_QWORD *)&v52 + 80);
      v57 = *(double *)(*(_QWORD *)&v52 + 120);
      v58 = *(int8x16_t *)(*(_QWORD *)&v52 + 104);
      v59 = *(float64x2_t *)(*(_QWORD *)&v51 + 56);
      v60 = *(float64x2_t *)(*(_QWORD *)&v51 + 80);
      v142 = vld3q_f64(v53);
      *(_QWORD *)&v61.f64[0] = vextq_s8(v58, v58, 8uLL).u64[0];
      v62 = vextq_s8((int8x16_t)v60, (int8x16_t)v60, 8uLL).u64[0];
      *(_QWORD *)&v63.f64[0] = vextq_s8(*(int8x16_t *)(*(_QWORD *)&v51 + 32), *(int8x16_t *)(*(_QWORD *)&v51 + 32), 8uLL).u64[0];
      v64 = vextq_s8((int8x16_t)v59, (int8x16_t)v59, 8uLL).u64[0];
      v65 = v30[-25].f64[1];
      _Q10 = *(__int128 *)((char *)&v30[-26] + 8);
      v67 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v142.val[0], *(double *)(*(_QWORD *)&v52 + 32)), v142.val[1], *(float64x2_t *)(*(_QWORD *)&v52 + 32), 1), v142.val[2], v54);
      _D24 = *(_QWORD *)(*(_QWORD *)&v52 + 40);
      __asm { FMLA            D25, D24, V10.D[1] }
      v70 = _D25 + v65 * v54;
      v71 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v142.val[0], *(double *)(*(_QWORD *)&v52 + 56)), v142.val[1], *(float64x2_t *)(*(_QWORD *)&v52 + 56), 1), v142.val[2], v55);
      _D27 = *(_QWORD *)(*(_QWORD *)&v52 + 64);
      __asm { FMLA            D24, D27, V10.D[1] }
      *(double *)v2.i64 = _D24 + v65 * v55;
      v74 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v142.val[0], _Q22.f64[0]), v142.val[1], _Q22, 1), v142.val[2], v56);
      _Q22.f64[0] = *(float64_t *)(*(_QWORD *)&v52 + 88);
      __asm { FMLA            D27, D22, V10.D[1] }
      v77 = _D27 + v65 * v56;
      if (v77 >= 0.0)
      {
        if (v67.f64[0] >= -v71.f64[1])
        {
          *(_QWORD *)&v83.f64[0] = vdupq_laneq_s64((int64x2_t)v74, 1).u64[0];
          v83.f64[1] = v70;
          v80 = vsubq_f64((float64x2_t)vzip1q_s64(v2, (int64x2_t)v74), v83);
          _Q22 = vsubq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v67, 1), v71);
          v67.f64[0] = v77 + 1.0 + v67.f64[0] + v71.f64[1];
        }
        else
        {
          v80.f64[0] = v74.f64[0] + v70;
          _Q22.f64[0] = v77 + 1.0 - (v67.f64[0] + v71.f64[1]);
          v80.f64[1] = *(double *)v2.i64 + v74.f64[1];
          v67.f64[0] = _Q22.f64[0];
        }
      }
      else if (v67.f64[0] <= v71.f64[1])
      {
        v81 = (int64x2_t)vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v67, 1), v71);
        *(_QWORD *)&v82.f64[1] = v2.i64[0];
        v82.f64[0] = 1.0 - v77;
        v74.f64[0] = v71.f64[1] - v67.f64[0];
        v67 = vaddq_f64(v82, v74);
        v80 = (float64x2_t)vzip1q_s64(v81, (int64x2_t)v67);
        _Q22 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v67, 1);
      }
      else
      {
        v78 = v67.f64[0] - v71.f64[1];
        v67.f64[0] = 1.0 - v77;
        v79 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v71.f64[0], 0);
        v79.f64[0] = v78;
        v80 = vaddq_f64(v67, v79);
        _Q22.f64[0] = v74.f64[0] + v70;
        v67.f64[0] = v80.f64[0];
      }
      v84 = 0.5 / sqrt(v67.f64[0]);
      v85 = vmulq_n_f64(v80, v84);
      v86 = vmulq_n_f64(_Q22, v84);
      *(_QWORD *)&v60.f64[1] = v62;
      _Q0 = vsubq_f64(v60, v30[-21]);
      *(_QWORD *)&v59.f64[1] = v64;
      v88 = vsubq_f64(v59, v30[-24]);
      v63.f64[1] = *(float64_t *)(*(_QWORD *)&v51 + 48);
      v89 = vsubq_f64(v63, v30[-22]);
      v90 = *(_QWORD *)&v50 + 256;
      v91.f64[1] = *(float64_t *)(*(_QWORD *)&v51 + 32);
      *(_QWORD *)&v92.f64[1] = v58.i64[0];
      v91.f64[0] = *(float64_t *)(*(_QWORD *)&v51 + 72);
      v93 = (int64x2_t)vsubq_f64(v91, v30[-23]);
      v92.f64[0] = *(float64_t *)(*(_QWORD *)&v51 + 96);
      v94 = (int8x16_t)vsubq_f64(v92, v30[-20]);
      v61.f64[1] = v57;
      _Q3 = (int8x16_t)vsubq_f64(v61, v30[-19]);
      v137 = vaddq_f64(v85, v85);
      *(_QWORD *)v138 = *(_OWORD *)&vaddq_f64(v86, v86);
      *(int8x16_t *)&v138[8] = vextq_s8(v94, _Q3, 8uLL);
      *(int64x2_t *)&v138[24] = vzip2q_s64((int64x2_t)_Q3, v93);
      *(float64x2_t *)&v138[40] = v89;
      *(float64x2_t *)&v138[56] = v88;
      v139 = _Q0;
      *(_QWORD *)&v138[72] = v93.i64[0];
      v140 = *(double *)v94.i64;
      _D19 = *(_QWORD *)(*(_QWORD *)&v50 + 248);
      __asm { FMLA            D3, D19, V2.D[1] }
      _V19.D[1] = *(_QWORD *)&v138[8];
      v98 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(*(_QWORD *)&v50 + 16), v137.f64[0]), *(float64x2_t *)(*(_QWORD *)&v50 + 136), v137, 1), *(float64x2_t *)(*(_QWORD *)&v50 + 256), *(double *)v138), *(float64x2_t *)(*(_QWORD *)&v50 + 376), *(float64x2_t *)v138, 1);
      v99 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(*(_QWORD *)&v50 + 32), v137.f64[0]), *(float64x2_t *)(*(_QWORD *)&v50 + 152), v137, 1), *(float64x2_t *)(*(_QWORD *)&v50 + 272), *(double *)v138), *(float64x2_t *)(*(_QWORD *)&v50 + 392), *(float64x2_t *)v138, 1);
      v100 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(*(_QWORD *)&v50 + 48), v137.f64[0]), *(float64x2_t *)(*(_QWORD *)&v50 + 168), v137, 1), *(float64x2_t *)(*(_QWORD *)&v50 + 288), *(double *)v138), *(float64x2_t *)(*(_QWORD *)&v50 + 408), *(float64x2_t *)v138, 1);
      v101 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(*(_QWORD *)&v50 + 64), v137.f64[0]), *(float64x2_t *)(*(_QWORD *)&v50 + 184), v137, 1), *(float64x2_t *)(*(_QWORD *)&v50 + 304), *(double *)v138), *(float64x2_t *)(*(_QWORD *)&v50 + 424), *(float64x2_t *)v138, 1);
      v102 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(*(_QWORD *)&v50 + 80), v137.f64[0]), *(float64x2_t *)(*(_QWORD *)&v50 + 200), v137, 1), *(float64x2_t *)(*(_QWORD *)&v50 + 320), *(double *)v138), *(float64x2_t *)(*(_QWORD *)&v50 + 440), *(float64x2_t *)v138, 1);
      v103 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(*(_QWORD *)&v50 + 96), v137.f64[0]), *(float64x2_t *)(*(_QWORD *)&v50 + 216), v137, 1), *(float64x2_t *)(*(_QWORD *)&v50 + 336), *(double *)v138), *(float64x2_t *)(*(_QWORD *)&v50 + 456), *(float64x2_t *)v138, 1);
      v104 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(*(_QWORD *)&v50 + 112), v137.f64[0]), *(float64x2_t *)(*(_QWORD *)&v50 + 232), v137, 1), *(float64x2_t *)(*(_QWORD *)&v50 + 352), *(double *)v138), *(float64x2_t *)(*(_QWORD *)&v50 + 472), *(float64x2_t *)v138, 1);
      _D2 = *(_QWORD *)(*(_QWORD *)&v50 + 488);
      __asm { FMLA            D3, D2, V19.D[1] }
      _Q2 = *(float64x2_t *)(*(_QWORD *)&v50 + 496);
      v107 = (float64x2_t *)(*(_QWORD *)&v50 + 616);
      _V19.D[1] = *(_QWORD *)&v138[24];
      v109 = vmlaq_laneq_f64(vmlaq_n_f64(v98, _Q2, *(double *)&v138[16]), *v107, *(float64x2_t *)&v138[16], 1);
      _Q2.f64[0] = *(float64_t *)(v90 + 472);
      __asm { FMLA            D3, D2, V19.D[1] }
      _V19.D[1] = *(_QWORD *)&v138[40];
      _Q2.f64[0] = *(float64_t *)(v90 + 712);
      __asm { FMLA            D3, D2, V19.D[1] }
      _V19.D[1] = *(_QWORD *)&v138[56];
      _Q2.f64[0] = *(float64_t *)(v90 + 952);
      __asm { FMLA            D3, D2, V19.D[1] }
      _V19.D[1] = *(_QWORD *)&v138[72];
      _Q2.f64[0] = *(float64_t *)(v90 + 1192);
      __asm { FMLA            D3, D2, V19.D[1] }
      _Q2.f64[0] = *(float64_t *)(v90 + 1432);
      __asm { FMLA            D3, D2, V0.D[1] }
      _Q4 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v109, *(float64x2_t *)(v90 + 480), *(double *)&v138[32]), *(float64x2_t *)(v90 + 600), *(float64x2_t *)&v138[32], 1), *(float64x2_t *)(v90 + 720), *(double *)&v138[48]), *(float64x2_t *)(v90 + 840), *(float64x2_t *)&v138[48], 1), *(float64x2_t *)(v90 + 960), *(double *)&v138[64]), *(float64x2_t *)(v90 + 1080),
                    *(float64x2_t *)&v138[64],
                    1),
                  *(float64x2_t *)(v90 + 1200),
                  _Q0.f64[0]),
                *(float64x2_t *)(v90 + 1320),
                _Q0,
                1),
              *(float64x2_t *)(v90 + 1440),
              *(double *)v94.i64);
      _Q5 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v99, *(float64x2_t *)(v90 + 256), *(double *)&v138[16]), v107[1], *(float64x2_t *)&v138[16], 1), *(float64x2_t *)(v90 + 496), *(double *)&v138[32]), *(float64x2_t *)(v90 + 616), *(float64x2_t *)&v138[32], 1), *(float64x2_t *)(v90 + 736),
                          *(double *)&v138[48]),
                        *(float64x2_t *)(v90 + 856),
                        *(float64x2_t *)&v138[48],
                        1),
                      *(float64x2_t *)(v90 + 976),
                      *(double *)&v138[64]),
                    *(float64x2_t *)(v90 + 1096),
                    *(float64x2_t *)&v138[64],
                    1),
                  *(float64x2_t *)(v90 + 1216),
                  _Q0.f64[0]),
                *(float64x2_t *)(v90 + 1336),
                _Q0,
                1),
              *(float64x2_t *)(v90 + 1456),
              *(double *)v94.i64);
      _Q7 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v100, *(float64x2_t *)(v90 + 272), *(double *)&v138[16]), v107[2], *(float64x2_t *)&v138[16], 1), *(float64x2_t *)(v90 + 512), *(double *)&v138[32]), *(float64x2_t *)(v90 + 632), *(float64x2_t *)&v138[32], 1), *(float64x2_t *)(v90 + 752),
                          *(double *)&v138[48]),
                        *(float64x2_t *)(v90 + 872),
                        *(float64x2_t *)&v138[48],
                        1),
                      *(float64x2_t *)(v90 + 992),
                      *(double *)&v138[64]),
                    *(float64x2_t *)(v90 + 1112),
                    *(float64x2_t *)&v138[64],
                    1),
                  *(float64x2_t *)(v90 + 1232),
                  _Q0.f64[0]),
                *(float64x2_t *)(v90 + 1352),
                _Q0,
                1),
              *(float64x2_t *)(v90 + 1472),
              *(double *)v94.i64);
      _Q17 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v101, *(float64x2_t *)(v90 + 288), *(double *)&v138[16]), v107[3], *(float64x2_t *)&v138[16], 1), *(float64x2_t *)(v90 + 528), *(double *)&v138[32]), *(float64x2_t *)(v90 + 648), *(float64x2_t *)&v138[32], 1), *(float64x2_t *)(v90 + 768),
                           *(double *)&v138[48]),
                         *(float64x2_t *)(v90 + 888),
                         *(float64x2_t *)&v138[48],
                         1),
                       *(float64x2_t *)(v90 + 1008),
                       *(double *)&v138[64]),
                     *(float64x2_t *)(v90 + 1128),
                     *(float64x2_t *)&v138[64],
                     1),
                   *(float64x2_t *)(v90 + 1248),
                   _Q0.f64[0]),
                 *(float64x2_t *)(v90 + 1368),
                 _Q0,
                 1),
               *(float64x2_t *)(v90 + 1488),
               *(double *)v94.i64);
      _Q18 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v102, *(float64x2_t *)(v90 + 304), *(double *)&v138[16]), v107[4], *(float64x2_t *)&v138[16], 1), *(float64x2_t *)(v90 + 544), *(double *)&v138[32]), *(float64x2_t *)(v90 + 664), *(float64x2_t *)&v138[32], 1), *(float64x2_t *)(v90 + 784),
                           *(double *)&v138[48]),
                         *(float64x2_t *)(v90 + 904),
                         *(float64x2_t *)&v138[48],
                         1),
                       *(float64x2_t *)(v90 + 1024),
                       *(double *)&v138[64]),
                     *(float64x2_t *)(v90 + 1144),
                     *(float64x2_t *)&v138[64],
                     1),
                   *(float64x2_t *)(v90 + 1264),
                   _Q0.f64[0]),
                 *(float64x2_t *)(v90 + 1384),
                 _Q0,
                 1),
               *(float64x2_t *)(v90 + 1504),
               *(double *)v94.i64);
      _Q16 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v103, *(float64x2_t *)(v90 + 320), *(double *)&v138[16]), v107[5], *(float64x2_t *)&v138[16], 1), *(float64x2_t *)(v90 + 560), *(double *)&v138[32]), *(float64x2_t *)(v90 + 680), *(float64x2_t *)&v138[32], 1), *(float64x2_t *)(v90 + 800),
                           *(double *)&v138[48]),
                         *(float64x2_t *)(v90 + 920),
                         *(float64x2_t *)&v138[48],
                         1),
                       *(float64x2_t *)(v90 + 1040),
                       *(double *)&v138[64]),
                     *(float64x2_t *)(v90 + 1160),
                     *(float64x2_t *)&v138[64],
                     1),
                   *(float64x2_t *)(v90 + 1280),
                   _Q0.f64[0]),
                 *(float64x2_t *)(v90 + 1400),
                 _Q0,
                 1),
               *(float64x2_t *)(v90 + 1520),
               *(double *)v94.i64);
      _Q6 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v104, *(float64x2_t *)(v90 + 336), *(double *)&v138[16]), v107[6], *(float64x2_t *)&v138[16], 1), *(float64x2_t *)(v90 + 576), *(double *)&v138[32]), *(float64x2_t *)(v90 + 696), *(float64x2_t *)&v138[32], 1), *(float64x2_t *)(v90 + 816),
                          *(double *)&v138[48]),
                        *(float64x2_t *)(v90 + 936),
                        *(float64x2_t *)&v138[48],
                        1),
                      *(float64x2_t *)(v90 + 1056),
                      *(double *)&v138[64]),
                    *(float64x2_t *)(v90 + 1176),
                    *(float64x2_t *)&v138[64],
                    1),
                  *(float64x2_t *)(v90 + 1296),
                  _Q0.f64[0]),
                *(float64x2_t *)(v90 + 1416),
                _Q0,
                1),
              *(float64x2_t *)(v90 + 1536),
              *(double *)v94.i64);
      v120 = vmlad_n_f64(*(double *)_Q3.i64, *(double *)(v90 + 1552), *(double *)v94.i64);
      v140 = v120;
      v139 = _Q6;
      *(float64x2_t *)&v138[64] = _Q16;
      *(float64x2_t *)&v138[48] = _Q18;
      *(float64x2_t *)&v138[32] = _Q17;
      *(float64x2_t *)&v138[16] = _Q7;
      *(float64x2_t *)v138 = _Q5;
      v137 = _Q4;
      v141 = 1;
      if (!*(_QWORD *)&v30->f64[0])
      {
        _D1 = _Q4.f64[1];
        __asm { FMLA            D0, D1, V4.D[1] }
        _D1 = _Q5.f64[1];
        __asm { FMLA            D0, D1, V5.D[1] }
        _D1 = _Q7.f64[1];
        __asm { FMLA            D0, D1, V7.D[1] }
        _D1 = _Q17.f64[1];
        __asm { FMLA            D0, D1, V17.D[1] }
        _D1 = _Q18.f64[1];
        __asm { FMLA            D0, D1, V18.D[1] }
        _D1 = _Q16.f64[1];
        __asm { FMLA            D0, D1, V16.D[1] }
        _D1 = _Q6.f64[1];
        __asm { FMLA            D0, D1, V6.D[1] }
        v48 = _D0 + v120 * v120;
LABEL_25:
        *v27++ = v48;
        goto LABEL_26;
      }
      (*(void (**)(_QWORD, float64x2_t *))(**(_QWORD **)&v30->f64[0] + 24))(*(_QWORD *)&v30->f64[0], &v137);
      if (v141)
      {
        _V7.D[1] = v137.f64[1];
        _D17 = v137.f64[1];
        __asm { FMLA            D16, D17, V7.D[1] }
        _D7 = *(_QWORD *)&v138[8];
        __asm { FMLA            D16, D7, V6.D[1] }
        _D6 = *(_QWORD *)&v138[24];
        __asm { FMLA            D16, D6, V5.D[1] }
        _D5 = *(_QWORD *)&v138[40];
        __asm { FMLA            D16, D5, V4.D[1] }
        _D4 = *(_QWORD *)&v138[56];
        __asm { FMLA            D16, D4, V3.D[1] }
        _D3 = *(_QWORD *)&v138[72];
        __asm { FMLA            D16, D3, V2.D[1] }
        _D2 = v139.f64[1];
        __asm { FMLA            D16, D2, V1.D[1] }
        v48 = _D16 + v140 * v140;
        goto LABEL_25;
      }
    }
LABEL_26:
    v49 = (float64x2_t *)((char *)v30 + 24);
    v30 = (float64x2_t *)((char *)v30 + 504);
  }
  while (v49 != v29);
  v26 = a2[64];
  v6 = a2[66];
LABEL_39:
  v136 = (double *)(v26 + 8 * v6);
  if (v27 != v136)
    a2[66] = v6 + ~((unint64_t)((char *)v136 - (char *)v27 - 8) >> 3);
}

void sub_20FBBE824(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v38;

  v4 = a2[66];
  v5 = v4
     - 0x5075075075075075
     * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1096) - *(_QWORD *)(*(_QWORD *)a1 + 1088)) >> 3);
  if (v4 >= v5)
    goto LABEL_22;
  v6 = a2[65];
  if (v6 >= v5)
  {
    v23 = a2[66];
    v24 = 0xAF8AF8AF8AF8AF8BLL
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1096) - *(_QWORD *)(*(_QWORD *)a1 + 1088)) >> 3);
    if (v5 <= v4)
      goto LABEL_22;
LABEL_21:
    bzero((void *)(a2[64] + 8 * v23), 8 * v24);
    goto LABEL_22;
  }
  v7 = 2 * v6;
  if (v7 <= v5)
    v7 = v4
       - 0x5075075075075075
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1096) - *(_QWORD *)(*(_QWORD *)a1 + 1088)) >> 3);
  a2[65] = v7;
  v8 = a2[64];
  v9 = operator new[]();
  v10 = v9;
  if (v4)
  {
    v11 = 0;
    if (v4 < 4)
      goto LABEL_11;
    if ((unint64_t)(v9 - v8) < 0x20)
      goto LABEL_11;
    v11 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (_OWORD *)(v9 + 16);
    v13 = (__int128 *)(v8 + 16);
    v14 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = *v13;
      *(v12 - 1) = *(v13 - 1);
      *v12 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v4 != v11)
    {
LABEL_11:
      v16 = v4 - v11;
      v17 = 8 * v11;
      v18 = (uint64_t *)(v8 + 8 * v11);
      v19 = (_QWORD *)(v9 + v17);
      do
      {
        v20 = *v18++;
        *v19++ = v20;
        --v16;
      }
      while (v16);
    }
  }
  v21 = (_QWORD *)a2[64];
  if (v21 != a2 && v21 != 0)
    MEMORY[0x212BC6368]();
  a2[64] = v10;
  v23 = a2[66];
  v24 = v5 - v23;
  if (v5 > v23)
    goto LABEL_21;
LABEL_22:
  a2[66] = v5;
  v25 = a2[64];
  v26 = (char *)(v25 + 8 * v4);
  v27 = *(_QWORD *)(*(_QWORD *)a1 + 1088);
  v28 = *(_QWORD *)(*(_QWORD *)a1 + 1096);
  while (v27 != v28)
  {
    if (*(_BYTE *)(v27 + 248))
    {
      _Q2 = *(_OWORD *)(v27 + 144);
      _D4 = *(_QWORD *)(v27 + 152);
      __asm { FMLA            D3, D4, V2.D[1] }
      *(_QWORD *)&_Q2 = *(_QWORD *)(v27 + 168);
      __asm { FMLA            D3, D2, V1.D[1] }
      _D1 = *(_QWORD *)(v27 + 184);
      __asm { FMLA            D3, D1, V0.D[1] }
      *(_QWORD *)v26 = _D3;
      v26 += 8;
    }
    v27 += 280;
  }
  v38 = (char *)(v25 + 8 * v5);
  if (v26 != v38)
    a2[66] = v5 + ~((unint64_t)(v38 - v26 - 8) >> 3);
}

void sub_20FBBEA18(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  double *v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  const double *v32;
  uint64_t v33;
  double v34;
  double v36;
  double v37;
  double v38;
  float64x2_t v39;
  double v45;
  float64x2_t v46;
  double v49;
  float64x2_t v50;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t *v55;
  int8x16_t v56;
  int8x16_t v57;
  float64x2_t v58;
  uint64_t v59;
  double *v66;
  float64x2_t v67;
  _BYTE v68[32];
  char v69;
  float64x2_t v70;
  double v71;
  float64x2_t v72;
  double v73;
  float64x2_t v74;
  double v75;
  float64x2_t v76;
  uint64_t v77;
  float64x2x3_t v78;

  v4 = a2[66];
  v5 = v4
     - 0x5075075075075075
     * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1096) - *(_QWORD *)(*(_QWORD *)a1 + 1088)) >> 3);
  if (v4 >= v5)
    goto LABEL_22;
  v6 = a2[65];
  if (v6 >= v5)
  {
    v23 = a2[66];
    v24 = 0xAF8AF8AF8AF8AF8BLL
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1096) - *(_QWORD *)(*(_QWORD *)a1 + 1088)) >> 3);
    if (v5 <= v4)
      goto LABEL_22;
    goto LABEL_21;
  }
  v7 = 2 * v6;
  if (v7 <= v5)
    v7 = v4
       - 0x5075075075075075
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1096) - *(_QWORD *)(*(_QWORD *)a1 + 1088)) >> 3);
  a2[65] = v7;
  v8 = a2[64];
  v9 = operator new[]();
  v10 = v9;
  if (v4)
  {
    v11 = 0;
    if (v4 < 4)
      goto LABEL_11;
    if ((unint64_t)(v9 - v8) < 0x20)
      goto LABEL_11;
    v11 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (_OWORD *)(v9 + 16);
    v13 = (__int128 *)(v8 + 16);
    v14 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = *v13;
      *(v12 - 1) = *(v13 - 1);
      *v12 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v4 != v11)
    {
LABEL_11:
      v16 = v4 - v11;
      v17 = 8 * v11;
      v18 = (uint64_t *)(v8 + 8 * v11);
      v19 = (_QWORD *)(v9 + v17);
      do
      {
        v20 = *v18++;
        *v19++ = v20;
        --v16;
      }
      while (v16);
    }
  }
  v21 = (_QWORD *)a2[64];
  if (v21 != a2 && v21 != 0)
    MEMORY[0x212BC6368]();
  a2[64] = v10;
  v23 = a2[66];
  v24 = v5 - v23;
  if (v5 > v23)
LABEL_21:
    bzero((void *)(a2[64] + 8 * v23), 8 * v24);
LABEL_22:
  a2[66] = v5;
  v25 = a2[64];
  v26 = (double *)(v25 + 8 * v4);
  v27 = *(_QWORD *)(*(_QWORD *)a1 + 1088);
  v28 = *(_QWORD *)(*(_QWORD *)a1 + 1096);
  if (v27 == v28)
    goto LABEL_32;
  do
  {
    if (*(_QWORD *)(v27 + 120))
    {
      v32 = (const double *)(v27 + 24);
      v78 = vld3q_f64(v32);
      v33 = *(_QWORD *)(v27 + 136);
      v34 = *(double *)(v27 + 88);
      _Q4 = *(_OWORD *)(v27 + 72);
      v36 = *(double *)(v33 + 48);
      v37 = *(double *)(v33 + 72);
      v38 = *(double *)(v33 + 96);
      v39 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v78.val[0], *(double *)(v33 + 32)), v78.val[1], *(float64x2_t *)(v33 + 32), 1), v78.val[2], v36);
      _D6 = *(_QWORD *)(v33 + 40);
      __asm { FMLA            D20, D6, V4.D[1] }
      v45 = _D20 + v34 * v36;
      v46 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v78.val[0], *(double *)(v33 + 56)), v78.val[1], *(float64x2_t *)(v33 + 56), 1), v78.val[2], v37);
      _D16 = *(_QWORD *)(v33 + 64);
      __asm { FMLA            D20, D16, V4.D[1] }
      v49 = _D20 + v34 * v37;
      v50 = vmlaq_laneq_f64(vmulq_n_f64(v78.val[0], *(double *)(v33 + 80)), v78.val[1], *(float64x2_t *)(v33 + 80), 1);
      _D18 = *(_QWORD *)(v33 + 88);
      __asm { FMLA            D20, D18, V4.D[1] }
      v70 = v39;
      v71 = v45;
      v73 = v49;
      v72 = v46;
      v75 = _D20 + v34 * v38;
      v74 = vmlaq_n_f64(v50, v78.val[2], v38);
      v77 = 0;
      v76 = 0uLL;
      sub_20E9733B8(&v70, v76.f64);
      v53.f64[1] = v76.f64[1];
      *(_QWORD *)v68 = v77;
      v67 = v76;
      v53.f64[0] = *(float64_t *)(v33 + 120);
      v54.f64[0] = *(float64_t *)(v27 + 112);
      *(float64x2_t *)&v68[8] = vsubq_f64(*(float64x2_t *)(v33 + 104), *(float64x2_t *)(v27 + 96));
      *(_QWORD *)&v68[24] = *(_OWORD *)&vsubq_f64(v53, v54);
      v55 = *(float64x2_t **)(v27 + 120);
      v56 = (int8x16_t)vmulq_f64(*(float64x2_t *)&v68[16], v55[3]);
      v57 = (int8x16_t)vmulq_f64(*(float64x2_t *)v68, v55[2]);
      v58 = vmulq_f64(v76, v55[1]);
      *(int8x16_t *)v68 = v57;
      *(int8x16_t *)&v68[16] = v56;
      v67 = v58;
      v69 = 1;
      v59 = *(_QWORD *)(v27 + 256);
      if (!v59)
      {
        v29 = *(double *)vextq_s8(v56, v56, 8uLL).i64;
        v30 = *(double *)vextq_s8(v57, v57, 8uLL).i64;
        v58.f64[1] = *(double *)vextq_s8((int8x16_t)v58, (int8x16_t)v58, 8uLL).i64;
        _D0 = vmulq_f64(v58, v58).f64[0]
            + v58.f64[1] * v58.f64[1]
            + *(double *)v57.i64 * *(double *)v57.i64
            + v30 * v30
            + *(double *)v56.i64 * *(double *)v56.i64
            + v29 * v29;
LABEL_25:
        *v26++ = _D0;
        goto LABEL_26;
      }
      (*(void (**)(uint64_t, float64x2_t *))(*(_QWORD *)v59 + 24))(v59, &v67);
      if (v69)
      {
        _V3.D[1] = v67.f64[1];
        _D4 = v67.f64[1];
        __asm { FMLA            D0, D4, V3.D[1] }
        _D3 = *(_QWORD *)&v68[8];
        __asm { FMLA            D0, D3, V2.D[1] }
        _D2 = *(_QWORD *)&v68[24];
        __asm { FMLA            D0, D2, V1.D[1] }
        goto LABEL_25;
      }
    }
LABEL_26:
    v27 += 280;
  }
  while (v27 != v28);
  v25 = a2[64];
  v5 = a2[66];
LABEL_32:
  v66 = (double *)(v25 + 8 * v5);
  if (v26 != v66)
    a2[66] = v5 + ~((unint64_t)((char *)v66 - (char *)v26 - 8) >> 3);
}

void sub_20FBBED9C(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v38;

  v4 = a2[66];
  v5 = v4
     - 0x5075075075075075
     * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1120) - *(_QWORD *)(*(_QWORD *)a1 + 1112)) >> 3);
  if (v4 >= v5)
    goto LABEL_22;
  v6 = a2[65];
  if (v6 >= v5)
  {
    v23 = a2[66];
    v24 = 0xAF8AF8AF8AF8AF8BLL
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1120) - *(_QWORD *)(*(_QWORD *)a1 + 1112)) >> 3);
    if (v5 <= v4)
      goto LABEL_22;
LABEL_21:
    bzero((void *)(a2[64] + 8 * v23), 8 * v24);
    goto LABEL_22;
  }
  v7 = 2 * v6;
  if (v7 <= v5)
    v7 = v4
       - 0x5075075075075075
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1120) - *(_QWORD *)(*(_QWORD *)a1 + 1112)) >> 3);
  a2[65] = v7;
  v8 = a2[64];
  v9 = operator new[]();
  v10 = v9;
  if (v4)
  {
    v11 = 0;
    if (v4 < 4)
      goto LABEL_11;
    if ((unint64_t)(v9 - v8) < 0x20)
      goto LABEL_11;
    v11 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (_OWORD *)(v9 + 16);
    v13 = (__int128 *)(v8 + 16);
    v14 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = *v13;
      *(v12 - 1) = *(v13 - 1);
      *v12 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v4 != v11)
    {
LABEL_11:
      v16 = v4 - v11;
      v17 = 8 * v11;
      v18 = (uint64_t *)(v8 + 8 * v11);
      v19 = (_QWORD *)(v9 + v17);
      do
      {
        v20 = *v18++;
        *v19++ = v20;
        --v16;
      }
      while (v16);
    }
  }
  v21 = (_QWORD *)a2[64];
  if (v21 != a2 && v21 != 0)
    MEMORY[0x212BC6368]();
  a2[64] = v10;
  v23 = a2[66];
  v24 = v5 - v23;
  if (v5 > v23)
    goto LABEL_21;
LABEL_22:
  a2[66] = v5;
  v25 = a2[64];
  v26 = (char *)(v25 + 8 * v4);
  v27 = *(_QWORD *)(*(_QWORD *)a1 + 1112);
  v28 = *(_QWORD *)(*(_QWORD *)a1 + 1120);
  while (v27 != v28)
  {
    if (*(_BYTE *)(v27 + 248))
    {
      _Q2 = *(_OWORD *)(v27 + 144);
      _D4 = *(_QWORD *)(v27 + 152);
      __asm { FMLA            D3, D4, V2.D[1] }
      *(_QWORD *)&_Q2 = *(_QWORD *)(v27 + 168);
      __asm { FMLA            D3, D2, V1.D[1] }
      _D1 = *(_QWORD *)(v27 + 184);
      __asm { FMLA            D3, D1, V0.D[1] }
      *(_QWORD *)v26 = _D3;
      v26 += 8;
    }
    v27 += 280;
  }
  v38 = (char *)(v25 + 8 * v5);
  if (v26 != v38)
    a2[66] = v5 + ~((unint64_t)(v38 - v26 - 8) >> 3);
}

void sub_20FBBEF90(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  double *v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  const double *v32;
  uint64_t v33;
  double v34;
  double v36;
  double v37;
  double v38;
  float64x2_t v39;
  double v45;
  float64x2_t v46;
  double v49;
  float64x2_t v50;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t *v55;
  int8x16_t v56;
  int8x16_t v57;
  float64x2_t v58;
  uint64_t v59;
  double *v66;
  float64x2_t v67;
  _BYTE v68[32];
  char v69;
  float64x2_t v70;
  double v71;
  float64x2_t v72;
  double v73;
  float64x2_t v74;
  double v75;
  float64x2_t v76;
  uint64_t v77;
  float64x2x3_t v78;

  v4 = a2[66];
  v5 = v4
     - 0x5075075075075075
     * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1120) - *(_QWORD *)(*(_QWORD *)a1 + 1112)) >> 3);
  if (v4 >= v5)
    goto LABEL_22;
  v6 = a2[65];
  if (v6 >= v5)
  {
    v23 = a2[66];
    v24 = 0xAF8AF8AF8AF8AF8BLL
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1120) - *(_QWORD *)(*(_QWORD *)a1 + 1112)) >> 3);
    if (v5 <= v4)
      goto LABEL_22;
    goto LABEL_21;
  }
  v7 = 2 * v6;
  if (v7 <= v5)
    v7 = v4
       - 0x5075075075075075
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1120) - *(_QWORD *)(*(_QWORD *)a1 + 1112)) >> 3);
  a2[65] = v7;
  v8 = a2[64];
  v9 = operator new[]();
  v10 = v9;
  if (v4)
  {
    v11 = 0;
    if (v4 < 4)
      goto LABEL_11;
    if ((unint64_t)(v9 - v8) < 0x20)
      goto LABEL_11;
    v11 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (_OWORD *)(v9 + 16);
    v13 = (__int128 *)(v8 + 16);
    v14 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = *v13;
      *(v12 - 1) = *(v13 - 1);
      *v12 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v4 != v11)
    {
LABEL_11:
      v16 = v4 - v11;
      v17 = 8 * v11;
      v18 = (uint64_t *)(v8 + 8 * v11);
      v19 = (_QWORD *)(v9 + v17);
      do
      {
        v20 = *v18++;
        *v19++ = v20;
        --v16;
      }
      while (v16);
    }
  }
  v21 = (_QWORD *)a2[64];
  if (v21 != a2 && v21 != 0)
    MEMORY[0x212BC6368]();
  a2[64] = v10;
  v23 = a2[66];
  v24 = v5 - v23;
  if (v5 > v23)
LABEL_21:
    bzero((void *)(a2[64] + 8 * v23), 8 * v24);
LABEL_22:
  a2[66] = v5;
  v25 = a2[64];
  v26 = (double *)(v25 + 8 * v4);
  v27 = *(_QWORD *)(*(_QWORD *)a1 + 1112);
  v28 = *(_QWORD *)(*(_QWORD *)a1 + 1120);
  if (v27 == v28)
    goto LABEL_32;
  do
  {
    if (*(_QWORD *)(v27 + 120))
    {
      v32 = (const double *)(v27 + 24);
      v78 = vld3q_f64(v32);
      v33 = *(_QWORD *)(v27 + 136);
      v34 = *(double *)(v27 + 88);
      _Q4 = *(_OWORD *)(v27 + 72);
      v36 = *(double *)(v33 + 48);
      v37 = *(double *)(v33 + 72);
      v38 = *(double *)(v33 + 96);
      v39 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v78.val[0], *(double *)(v33 + 32)), v78.val[1], *(float64x2_t *)(v33 + 32), 1), v78.val[2], v36);
      _D6 = *(_QWORD *)(v33 + 40);
      __asm { FMLA            D20, D6, V4.D[1] }
      v45 = _D20 + v34 * v36;
      v46 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v78.val[0], *(double *)(v33 + 56)), v78.val[1], *(float64x2_t *)(v33 + 56), 1), v78.val[2], v37);
      _D16 = *(_QWORD *)(v33 + 64);
      __asm { FMLA            D20, D16, V4.D[1] }
      v49 = _D20 + v34 * v37;
      v50 = vmlaq_laneq_f64(vmulq_n_f64(v78.val[0], *(double *)(v33 + 80)), v78.val[1], *(float64x2_t *)(v33 + 80), 1);
      _D18 = *(_QWORD *)(v33 + 88);
      __asm { FMLA            D20, D18, V4.D[1] }
      v70 = v39;
      v71 = v45;
      v73 = v49;
      v72 = v46;
      v75 = _D20 + v34 * v38;
      v74 = vmlaq_n_f64(v50, v78.val[2], v38);
      v77 = 0;
      v76 = 0uLL;
      sub_20E9733B8(&v70, v76.f64);
      v53.f64[1] = v76.f64[1];
      *(_QWORD *)v68 = v77;
      v67 = v76;
      v53.f64[0] = *(float64_t *)(v33 + 120);
      v54.f64[0] = *(float64_t *)(v27 + 112);
      *(float64x2_t *)&v68[8] = vsubq_f64(*(float64x2_t *)(v33 + 104), *(float64x2_t *)(v27 + 96));
      *(_QWORD *)&v68[24] = *(_OWORD *)&vsubq_f64(v53, v54);
      v55 = *(float64x2_t **)(v27 + 120);
      v56 = (int8x16_t)vmulq_f64(*(float64x2_t *)&v68[16], v55[3]);
      v57 = (int8x16_t)vmulq_f64(*(float64x2_t *)v68, v55[2]);
      v58 = vmulq_f64(v76, v55[1]);
      *(int8x16_t *)v68 = v57;
      *(int8x16_t *)&v68[16] = v56;
      v67 = v58;
      v69 = 1;
      v59 = *(_QWORD *)(v27 + 256);
      if (!v59)
      {
        v29 = *(double *)vextq_s8(v56, v56, 8uLL).i64;
        v30 = *(double *)vextq_s8(v57, v57, 8uLL).i64;
        v58.f64[1] = *(double *)vextq_s8((int8x16_t)v58, (int8x16_t)v58, 8uLL).i64;
        _D0 = vmulq_f64(v58, v58).f64[0]
            + v58.f64[1] * v58.f64[1]
            + *(double *)v57.i64 * *(double *)v57.i64
            + v30 * v30
            + *(double *)v56.i64 * *(double *)v56.i64
            + v29 * v29;
LABEL_25:
        *v26++ = _D0;
        goto LABEL_26;
      }
      (*(void (**)(uint64_t, float64x2_t *))(*(_QWORD *)v59 + 24))(v59, &v67);
      if (v69)
      {
        _V3.D[1] = v67.f64[1];
        _D4 = v67.f64[1];
        __asm { FMLA            D0, D4, V3.D[1] }
        _D3 = *(_QWORD *)&v68[8];
        __asm { FMLA            D0, D3, V2.D[1] }
        _D2 = *(_QWORD *)&v68[24];
        __asm { FMLA            D0, D2, V1.D[1] }
        goto LABEL_25;
      }
    }
LABEL_26:
    v27 += 280;
  }
  while (v27 != v28);
  v25 = a2[64];
  v5 = a2[66];
LABEL_32:
  v66 = (double *)(v25 + 8 * v5);
  if (v26 != v66)
    a2[66] = v5 + ~((unint64_t)((char *)v66 - (char *)v26 - 8) >> 3);
}

void sub_20FBBF314(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v38;

  v4 = a2[66];
  v5 = v4
     - 0x5075075075075075
     * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1144) - *(_QWORD *)(*(_QWORD *)a1 + 1136)) >> 3);
  if (v4 >= v5)
    goto LABEL_22;
  v6 = a2[65];
  if (v6 >= v5)
  {
    v23 = a2[66];
    v24 = 0xAF8AF8AF8AF8AF8BLL
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1144) - *(_QWORD *)(*(_QWORD *)a1 + 1136)) >> 3);
    if (v5 <= v4)
      goto LABEL_22;
LABEL_21:
    bzero((void *)(a2[64] + 8 * v23), 8 * v24);
    goto LABEL_22;
  }
  v7 = 2 * v6;
  if (v7 <= v5)
    v7 = v4
       - 0x5075075075075075
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1144) - *(_QWORD *)(*(_QWORD *)a1 + 1136)) >> 3);
  a2[65] = v7;
  v8 = a2[64];
  v9 = operator new[]();
  v10 = v9;
  if (v4)
  {
    v11 = 0;
    if (v4 < 4)
      goto LABEL_11;
    if ((unint64_t)(v9 - v8) < 0x20)
      goto LABEL_11;
    v11 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (_OWORD *)(v9 + 16);
    v13 = (__int128 *)(v8 + 16);
    v14 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = *v13;
      *(v12 - 1) = *(v13 - 1);
      *v12 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v4 != v11)
    {
LABEL_11:
      v16 = v4 - v11;
      v17 = 8 * v11;
      v18 = (uint64_t *)(v8 + 8 * v11);
      v19 = (_QWORD *)(v9 + v17);
      do
      {
        v20 = *v18++;
        *v19++ = v20;
        --v16;
      }
      while (v16);
    }
  }
  v21 = (_QWORD *)a2[64];
  if (v21 != a2 && v21 != 0)
    MEMORY[0x212BC6368]();
  a2[64] = v10;
  v23 = a2[66];
  v24 = v5 - v23;
  if (v5 > v23)
    goto LABEL_21;
LABEL_22:
  a2[66] = v5;
  v25 = a2[64];
  v26 = (char *)(v25 + 8 * v4);
  v27 = *(_QWORD *)(*(_QWORD *)a1 + 1136);
  v28 = *(_QWORD *)(*(_QWORD *)a1 + 1144);
  while (v27 != v28)
  {
    if (*(_BYTE *)(v27 + 248))
    {
      _Q2 = *(_OWORD *)(v27 + 144);
      _D4 = *(_QWORD *)(v27 + 152);
      __asm { FMLA            D3, D4, V2.D[1] }
      *(_QWORD *)&_Q2 = *(_QWORD *)(v27 + 168);
      __asm { FMLA            D3, D2, V1.D[1] }
      _D1 = *(_QWORD *)(v27 + 184);
      __asm { FMLA            D3, D1, V0.D[1] }
      *(_QWORD *)v26 = _D3;
      v26 += 8;
    }
    v27 += 280;
  }
  v38 = (char *)(v25 + 8 * v5);
  if (v26 != v38)
    a2[66] = v5 + ~((unint64_t)(v38 - v26 - 8) >> 3);
}

void sub_20FBBF508(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  double *v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  const double *v32;
  uint64_t v33;
  double v34;
  double v36;
  double v37;
  double v38;
  float64x2_t v39;
  double v45;
  float64x2_t v46;
  double v49;
  float64x2_t v50;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t *v55;
  int8x16_t v56;
  int8x16_t v57;
  float64x2_t v58;
  uint64_t v59;
  double *v66;
  float64x2_t v67;
  _BYTE v68[32];
  char v69;
  float64x2_t v70;
  double v71;
  float64x2_t v72;
  double v73;
  float64x2_t v74;
  double v75;
  float64x2_t v76;
  uint64_t v77;
  float64x2x3_t v78;

  v4 = a2[66];
  v5 = v4
     - 0x5075075075075075
     * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1144) - *(_QWORD *)(*(_QWORD *)a1 + 1136)) >> 3);
  if (v4 >= v5)
    goto LABEL_22;
  v6 = a2[65];
  if (v6 >= v5)
  {
    v23 = a2[66];
    v24 = 0xAF8AF8AF8AF8AF8BLL
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1144) - *(_QWORD *)(*(_QWORD *)a1 + 1136)) >> 3);
    if (v5 <= v4)
      goto LABEL_22;
    goto LABEL_21;
  }
  v7 = 2 * v6;
  if (v7 <= v5)
    v7 = v4
       - 0x5075075075075075
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1144) - *(_QWORD *)(*(_QWORD *)a1 + 1136)) >> 3);
  a2[65] = v7;
  v8 = a2[64];
  v9 = operator new[]();
  v10 = v9;
  if (v4)
  {
    v11 = 0;
    if (v4 < 4)
      goto LABEL_11;
    if ((unint64_t)(v9 - v8) < 0x20)
      goto LABEL_11;
    v11 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (_OWORD *)(v9 + 16);
    v13 = (__int128 *)(v8 + 16);
    v14 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = *v13;
      *(v12 - 1) = *(v13 - 1);
      *v12 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v4 != v11)
    {
LABEL_11:
      v16 = v4 - v11;
      v17 = 8 * v11;
      v18 = (uint64_t *)(v8 + 8 * v11);
      v19 = (_QWORD *)(v9 + v17);
      do
      {
        v20 = *v18++;
        *v19++ = v20;
        --v16;
      }
      while (v16);
    }
  }
  v21 = (_QWORD *)a2[64];
  if (v21 != a2 && v21 != 0)
    MEMORY[0x212BC6368]();
  a2[64] = v10;
  v23 = a2[66];
  v24 = v5 - v23;
  if (v5 > v23)
LABEL_21:
    bzero((void *)(a2[64] + 8 * v23), 8 * v24);
LABEL_22:
  a2[66] = v5;
  v25 = a2[64];
  v26 = (double *)(v25 + 8 * v4);
  v27 = *(_QWORD *)(*(_QWORD *)a1 + 1136);
  v28 = *(_QWORD *)(*(_QWORD *)a1 + 1144);
  if (v27 == v28)
    goto LABEL_32;
  do
  {
    if (*(_QWORD *)(v27 + 120))
    {
      v32 = (const double *)(v27 + 24);
      v78 = vld3q_f64(v32);
      v33 = *(_QWORD *)(v27 + 136);
      v34 = *(double *)(v27 + 88);
      _Q4 = *(_OWORD *)(v27 + 72);
      v36 = *(double *)(v33 + 48);
      v37 = *(double *)(v33 + 72);
      v38 = *(double *)(v33 + 96);
      v39 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v78.val[0], *(double *)(v33 + 32)), v78.val[1], *(float64x2_t *)(v33 + 32), 1), v78.val[2], v36);
      _D6 = *(_QWORD *)(v33 + 40);
      __asm { FMLA            D20, D6, V4.D[1] }
      v45 = _D20 + v34 * v36;
      v46 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v78.val[0], *(double *)(v33 + 56)), v78.val[1], *(float64x2_t *)(v33 + 56), 1), v78.val[2], v37);
      _D16 = *(_QWORD *)(v33 + 64);
      __asm { FMLA            D20, D16, V4.D[1] }
      v49 = _D20 + v34 * v37;
      v50 = vmlaq_laneq_f64(vmulq_n_f64(v78.val[0], *(double *)(v33 + 80)), v78.val[1], *(float64x2_t *)(v33 + 80), 1);
      _D18 = *(_QWORD *)(v33 + 88);
      __asm { FMLA            D20, D18, V4.D[1] }
      v70 = v39;
      v71 = v45;
      v73 = v49;
      v72 = v46;
      v75 = _D20 + v34 * v38;
      v74 = vmlaq_n_f64(v50, v78.val[2], v38);
      v77 = 0;
      v76 = 0uLL;
      sub_20E9733B8(&v70, v76.f64);
      v53.f64[1] = v76.f64[1];
      *(_QWORD *)v68 = v77;
      v67 = v76;
      v53.f64[0] = *(float64_t *)(v33 + 120);
      v54.f64[0] = *(float64_t *)(v27 + 112);
      *(float64x2_t *)&v68[8] = vsubq_f64(*(float64x2_t *)(v33 + 104), *(float64x2_t *)(v27 + 96));
      *(_QWORD *)&v68[24] = *(_OWORD *)&vsubq_f64(v53, v54);
      v55 = *(float64x2_t **)(v27 + 120);
      v56 = (int8x16_t)vmulq_f64(*(float64x2_t *)&v68[16], v55[3]);
      v57 = (int8x16_t)vmulq_f64(*(float64x2_t *)v68, v55[2]);
      v58 = vmulq_f64(v76, v55[1]);
      *(int8x16_t *)v68 = v57;
      *(int8x16_t *)&v68[16] = v56;
      v67 = v58;
      v69 = 1;
      v59 = *(_QWORD *)(v27 + 256);
      if (!v59)
      {
        v29 = *(double *)vextq_s8(v56, v56, 8uLL).i64;
        v30 = *(double *)vextq_s8(v57, v57, 8uLL).i64;
        v58.f64[1] = *(double *)vextq_s8((int8x16_t)v58, (int8x16_t)v58, 8uLL).i64;
        _D0 = vmulq_f64(v58, v58).f64[0]
            + v58.f64[1] * v58.f64[1]
            + *(double *)v57.i64 * *(double *)v57.i64
            + v30 * v30
            + *(double *)v56.i64 * *(double *)v56.i64
            + v29 * v29;
LABEL_25:
        *v26++ = _D0;
        goto LABEL_26;
      }
      (*(void (**)(uint64_t, float64x2_t *))(*(_QWORD *)v59 + 24))(v59, &v67);
      if (v69)
      {
        _V3.D[1] = v67.f64[1];
        _D4 = v67.f64[1];
        __asm { FMLA            D0, D4, V3.D[1] }
        _D3 = *(_QWORD *)&v68[8];
        __asm { FMLA            D0, D3, V2.D[1] }
        _D2 = *(_QWORD *)&v68[24];
        __asm { FMLA            D0, D2, V1.D[1] }
        goto LABEL_25;
      }
    }
LABEL_26:
    v27 += 280;
  }
  while (v27 != v28);
  v25 = a2[64];
  v5 = a2[66];
LABEL_32:
  v66 = (double *)(v25 + 8 * v5);
  if (v26 != v66)
    a2[66] = v5 + ~((unint64_t)((char *)v66 - (char *)v26 - 8) >> 3);
}

void sub_20FBBF88C(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  double *v26;
  uint64_t v27;
  uint64_t v28;
  double *v35;

  v4 = a2[66];
  v5 = v4
     - 0x3333333333333333
     * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1168) - *(_QWORD *)(*(_QWORD *)a1 + 1160)) >> 5);
  if (v4 >= v5)
    goto LABEL_22;
  v6 = a2[65];
  if (v6 >= v5)
  {
    v23 = a2[66];
    v24 = 0xCCCCCCCCCCCCCCCDLL
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1168) - *(_QWORD *)(*(_QWORD *)a1 + 1160)) >> 5);
    if (v5 <= v4)
      goto LABEL_22;
LABEL_21:
    bzero((void *)(a2[64] + 8 * v23), 8 * v24);
    goto LABEL_22;
  }
  v7 = 2 * v6;
  if (v7 <= v5)
    v7 = v4
       - 0x3333333333333333
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1168) - *(_QWORD *)(*(_QWORD *)a1 + 1160)) >> 5);
  a2[65] = v7;
  v8 = a2[64];
  v9 = operator new[]();
  v10 = v9;
  if (v4)
  {
    v11 = 0;
    if (v4 < 4)
      goto LABEL_11;
    if ((unint64_t)(v9 - v8) < 0x20)
      goto LABEL_11;
    v11 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (_OWORD *)(v9 + 16);
    v13 = (__int128 *)(v8 + 16);
    v14 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = *v13;
      *(v12 - 1) = *(v13 - 1);
      *v12 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v4 != v11)
    {
LABEL_11:
      v16 = v4 - v11;
      v17 = 8 * v11;
      v18 = (uint64_t *)(v8 + 8 * v11);
      v19 = (_QWORD *)(v9 + v17);
      do
      {
        v20 = *v18++;
        *v19++ = v20;
        --v16;
      }
      while (v16);
    }
  }
  v21 = (_QWORD *)a2[64];
  if (v21 != a2 && v21 != 0)
    MEMORY[0x212BC6368]();
  a2[64] = v10;
  v23 = a2[66];
  v24 = v5 - v23;
  if (v5 > v23)
    goto LABEL_21;
LABEL_22:
  a2[66] = v5;
  v25 = a2[64];
  v26 = (double *)(v25 + 8 * v4);
  v27 = *(_QWORD *)(*(_QWORD *)a1 + 1160);
  v28 = *(_QWORD *)(*(_QWORD *)a1 + 1168);
  while (v27 != v28)
  {
    if (*(_BYTE *)(v27 + 128))
    {
      _Q1 = *(_OWORD *)(v27 + 72);
      _D3 = *(_QWORD *)(v27 + 80);
      __asm { FMLA            D2, D3, V1.D[1] }
      *v26++ = _D2 + *(double *)(v27 + 88) * *(double *)(v27 + 88);
    }
    v27 += 160;
  }
  v35 = (double *)(v25 + 8 * v5);
  if (v26 != v35)
    a2[66] = v5 + ~((unint64_t)((char *)v35 - (char *)v26 - 8) >> 3);
}

void sub_20FBBFA64(uint64_t a1, _QWORD *a2, float64x2_t a3, double a4, float64x2_t _Q2)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  float64x2_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  float64x2_t *v15;
  float64x2_t *v16;
  unint64_t v17;
  float64x2_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  double *v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  float64x2_t *v33;
  float64x2_t *v34;
  float64x2_t v35;
  float64x2_t v36;
  uint64_t v37;
  double *v43;
  float64x2_t v44;
  double v45;
  char v46;

  v7 = a2[66];
  v8 = v7
     - 0x3333333333333333
     * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1168) - *(_QWORD *)(*(_QWORD *)a1 + 1160)) >> 5);
  if (v7 >= v8)
    goto LABEL_22;
  v9 = a2[65];
  if (v9 >= v8)
  {
    v26 = a2[66];
    v27 = 0xCCCCCCCCCCCCCCCDLL
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1168) - *(_QWORD *)(*(_QWORD *)a1 + 1160)) >> 5);
    if (v8 <= v7)
      goto LABEL_22;
    goto LABEL_21;
  }
  v10 = 2 * v9;
  if (v10 <= v8)
    v10 = v7
        - 0x3333333333333333
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1168) - *(_QWORD *)(*(_QWORD *)a1 + 1160)) >> 5);
  a2[65] = v10;
  v11 = (float64x2_t *)a2[64];
  v12 = operator new[]();
  v13 = v12;
  if (v7)
  {
    v14 = 0;
    if (v7 < 4)
      goto LABEL_11;
    if ((unint64_t)(v12 - (_QWORD)v11) < 0x20)
      goto LABEL_11;
    v14 = v7 & 0xFFFFFFFFFFFFFFFCLL;
    v15 = (float64x2_t *)(v12 + 16);
    v16 = v11 + 1;
    v17 = v7 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      a3 = v16[-1];
      v18 = *v16;
      v15[-1] = a3;
      *v15 = v18;
      v15 += 2;
      v16 += 2;
      v17 -= 4;
    }
    while (v17);
    if (v7 != v14)
    {
LABEL_11:
      v19 = v7 - v14;
      v20 = 8 * v14;
      v21 = (uint64_t *)&v11->f64[v14];
      v22 = (_QWORD *)(v12 + v20);
      do
      {
        v23 = *v21++;
        *v22++ = v23;
        --v19;
      }
      while (v19);
    }
  }
  v24 = (_QWORD *)a2[64];
  if (v24 != a2 && v24 != 0)
    MEMORY[0x212BC6368]();
  a2[64] = v13;
  v26 = a2[66];
  v27 = v8 - v26;
  if (v8 > v26)
LABEL_21:
    bzero((void *)(a2[64] + 8 * v26), 8 * v27);
LABEL_22:
  a2[66] = v8;
  v28 = a2[64];
  v29 = (double *)(v28 + 8 * v7);
  v30 = *(_QWORD *)(*(_QWORD *)a1 + 1160);
  v31 = *(_QWORD *)(*(_QWORD *)a1 + 1168);
  if (v30 == v31)
    goto LABEL_32;
  do
  {
    v33 = *(float64x2_t **)(v30 + 48);
    if (v33)
    {
      v34 = *(float64x2_t **)(v30 + 64);
      a3.f64[0] = v34[3].f64[0];
      _Q2.f64[0] = *(float64_t *)(v30 + 40);
      v35 = vsubq_f64(a3, _Q2);
      _Q2.f64[0] = v33[2].f64[0];
      a3 = vmulq_f64(v35, _Q2);
      v36 = vmulq_f64(vsubq_f64(v34[2], *(float64x2_t *)(v30 + 24)), v33[1]);
      v44 = v36;
      v45 = a3.f64[0];
      v46 = 1;
      v37 = *(_QWORD *)(v30 + 136);
      if (!v37)
      {
        _Q2 = (float64x2_t)vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL);
        v36.f64[1] = _Q2.f64[0];
        v32 = vmulq_f64(v36, v36).f64[0] + _Q2.f64[0] * _Q2.f64[0] + a3.f64[0] * a3.f64[0];
LABEL_25:
        *v29++ = v32;
        goto LABEL_26;
      }
      (*(void (**)(uint64_t, float64x2_t *))(*(_QWORD *)v37 + 24))(v37, &v44);
      if (v46)
      {
        _Q1 = v44;
        _Q2 = vmulq_f64(_Q1, _Q1);
        _D3 = v44.f64[1];
        __asm { FMLA            D2, D3, V1.D[1] }
        v32 = _Q2.f64[0] + v45 * v45;
        goto LABEL_25;
      }
    }
LABEL_26:
    v30 += 160;
  }
  while (v30 != v31);
  v28 = a2[64];
  v8 = a2[66];
LABEL_32:
  v43 = (double *)(v28 + 8 * v8);
  if (v29 != v43)
    a2[66] = v8 + ~((unint64_t)((char *)v43 - (char *)v29 - 8) >> 3);
}

void sub_20FBBFCCC(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  double *v26;
  uint64_t v27;
  uint64_t i;
  double *v46;

  v4 = a2[66];
  v5 = v4
     - 0x685C01B42E00DA17
     * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1192) - *(_QWORD *)(*(_QWORD *)a1 + 1184)) >> 4);
  if (v4 >= v5)
    goto LABEL_22;
  v6 = a2[65];
  if (v6 >= v5)
  {
    v23 = a2[66];
    v24 = 0x97A3FE4BD1FF25E9
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1192) - *(_QWORD *)(*(_QWORD *)a1 + 1184)) >> 4);
    if (v5 <= v4)
      goto LABEL_22;
    goto LABEL_21;
  }
  v7 = 2 * v6;
  if (v7 <= v5)
    v7 = v4
       - 0x685C01B42E00DA17
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1192) - *(_QWORD *)(*(_QWORD *)a1 + 1184)) >> 4);
  a2[65] = v7;
  v8 = a2[64];
  v9 = operator new[]();
  v10 = v9;
  if (v4)
  {
    v11 = 0;
    if (v4 < 4)
      goto LABEL_11;
    if ((unint64_t)(v9 - v8) < 0x20)
      goto LABEL_11;
    v11 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (_OWORD *)(v9 + 16);
    v13 = (__int128 *)(v8 + 16);
    v14 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = *v13;
      *(v12 - 1) = *(v13 - 1);
      *v12 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v4 != v11)
    {
LABEL_11:
      v16 = v4 - v11;
      v17 = 8 * v11;
      v18 = (uint64_t *)(v8 + 8 * v11);
      v19 = (_QWORD *)(v9 + v17);
      do
      {
        v20 = *v18++;
        *v19++ = v20;
        --v16;
      }
      while (v16);
    }
  }
  v21 = (_QWORD *)a2[64];
  if (v21 != a2 && v21 != 0)
    MEMORY[0x212BC6368]();
  a2[64] = v10;
  v23 = a2[66];
  v24 = v5 - v23;
  if (v5 > v23)
LABEL_21:
    bzero((void *)(a2[64] + 8 * v23), 8 * v24);
LABEL_22:
  a2[66] = v5;
  v25 = a2[64];
  v26 = (double *)(v25 + 8 * v4);
  v27 = *(_QWORD *)(*(_QWORD *)a1 + 1184);
  for (i = *(_QWORD *)(*(_QWORD *)a1 + 1192); v27 != i; v27 += 9616)
  {
    if (*(_BYTE *)(v27 + 9584))
    {
      _Q7 = *(_OWORD *)(v27 + 9336);
      _D17 = *(_QWORD *)(v27 + 9344);
      __asm { FMLA            D16, D17, V7.D[1] }
      *(_QWORD *)&_Q7 = *(_QWORD *)(v27 + 9360);
      __asm { FMLA            D16, D7, V6.D[1] }
      _D6 = *(_QWORD *)(v27 + 9376);
      __asm { FMLA            D16, D6, V5.D[1] }
      _D5 = *(_QWORD *)(v27 + 9392);
      __asm { FMLA            D16, D5, V4.D[1] }
      _D4 = *(_QWORD *)(v27 + 9408);
      __asm { FMLA            D16, D4, V3.D[1] }
      _D3 = *(_QWORD *)(v27 + 9424);
      __asm { FMLA            D16, D3, V2.D[1] }
      _D2 = *(_QWORD *)(v27 + 9440);
      __asm { FMLA            D16, D2, V1.D[1] }
      *v26++ = _D16 + *(double *)(v27 + 9448) * *(double *)(v27 + 9448);
    }
  }
  v46 = (double *)(v25 + 8 * v5);
  if (v26 != v46)
    a2[66] = v5 + ~((unint64_t)((char *)v46 - (char *)v26 - 8) >> 3);
}

void sub_20FBBFF14(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  double *v26;
  uint64_t v27;
  uint64_t v28;
  int v47;
  uint64_t v50;
  double *v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  char v60;

  v4 = a2[66];
  v5 = v4
     - 0x685C01B42E00DA17
     * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1192) - *(_QWORD *)(*(_QWORD *)a1 + 1184)) >> 4);
  if (v4 >= v5)
    goto LABEL_22;
  v6 = a2[65];
  if (v6 >= v5)
  {
    v23 = a2[66];
    v24 = 0x97A3FE4BD1FF25E9
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1192) - *(_QWORD *)(*(_QWORD *)a1 + 1184)) >> 4);
    if (v5 <= v4)
      goto LABEL_22;
    goto LABEL_21;
  }
  v7 = 2 * v6;
  if (v7 <= v5)
    v7 = v4
       - 0x685C01B42E00DA17
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1192) - *(_QWORD *)(*(_QWORD *)a1 + 1184)) >> 4);
  a2[65] = v7;
  v8 = a2[64];
  v9 = operator new[]();
  v10 = v9;
  if (v4)
  {
    v11 = 0;
    if (v4 < 4)
      goto LABEL_11;
    if ((unint64_t)(v9 - v8) < 0x20)
      goto LABEL_11;
    v11 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (_OWORD *)(v9 + 16);
    v13 = (__int128 *)(v8 + 16);
    v14 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = *v13;
      *(v12 - 1) = *(v13 - 1);
      *v12 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v4 != v11)
    {
LABEL_11:
      v16 = v4 - v11;
      v17 = 8 * v11;
      v18 = (uint64_t *)(v8 + 8 * v11);
      v19 = (_QWORD *)(v9 + v17);
      do
      {
        v20 = *v18++;
        *v19++ = v20;
        --v16;
      }
      while (v16);
    }
  }
  v21 = (_QWORD *)a2[64];
  if (v21 != a2 && v21 != 0)
    MEMORY[0x212BC6368]();
  a2[64] = v10;
  v23 = a2[66];
  v24 = v5 - v23;
  if (v5 > v23)
LABEL_21:
    bzero((void *)(a2[64] + 8 * v23), 8 * v24);
LABEL_22:
  a2[66] = v5;
  v25 = a2[64];
  v26 = (double *)(v25 + 8 * v4);
  v27 = *(_QWORD *)(*(_QWORD *)a1 + 1184);
  v28 = *(_QWORD *)(*(_QWORD *)a1 + 1192);
  if (v27 != v28)
  {
    do
    {
      v47 = sub_20FB44FA0(v27 + 8);
      v60 = v47;
      if (v47)
      {
        _X8 = v27 + 19208;
        __asm { PRFM            #0, [X8] }
        v50 = *(_QWORD *)(v27 + 9592);
        if (!v50 || ((*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v50 + 24))(v50, &v52), v60))
        {
          _V7.D[1] = *((_QWORD *)&v52 + 1);
          _D17 = *((_QWORD *)&v52 + 1);
          __asm { FMLA            D16, D17, V7.D[1] }
          _D7 = v53;
          __asm { FMLA            D16, D7, V6.D[1] }
          _D6 = v54;
          __asm { FMLA            D16, D6, V5.D[1] }
          _D5 = v55;
          __asm { FMLA            D16, D5, V4.D[1] }
          _D4 = v56;
          __asm { FMLA            D16, D4, V3.D[1] }
          _D3 = v57;
          __asm { FMLA            D16, D3, V2.D[1] }
          _D2 = v58;
          __asm { FMLA            D16, D2, V1.D[1] }
          *v26++ = _D16 + v59 * v59;
        }
      }
      v27 += 9616;
    }
    while (v27 != v28);
    v25 = a2[64];
    v5 = a2[66];
  }
  v51 = (double *)(v25 + 8 * v5);
  if (v26 != v51)
    a2[66] = v5 + ~((unint64_t)((char *)v51 - (char *)v26 - 8) >> 3);
}

void sub_20FBC01D4(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double *v26;
  uint64_t v27;
  uint64_t i;
  double *v46;

  v4 = a2[66];
  v5 = v4
     + 0x4515E08719B71393
     * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1216) - *(_QWORD *)(*(_QWORD *)a1 + 1208)) >> 3);
  if (v4 >= v5)
    goto LABEL_22;
  v6 = a2[65];
  if (v6 >= v5)
  {
    v23 = a2[66];
    v24 = 0x4515E08719B71393
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1216) - *(_QWORD *)(*(_QWORD *)a1 + 1208)) >> 3);
    if (v5 <= v4)
      goto LABEL_22;
    goto LABEL_21;
  }
  v7 = 2 * v6;
  if (v7 <= v5)
    v7 = v4
       + 0x4515E08719B71393
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1216) - *(_QWORD *)(*(_QWORD *)a1 + 1208)) >> 3);
  a2[65] = v7;
  v8 = a2[64];
  v9 = operator new[]();
  v10 = v9;
  if (v4)
  {
    v11 = 0;
    if (v4 < 4)
      goto LABEL_11;
    if ((unint64_t)(v9 - v8) < 0x20)
      goto LABEL_11;
    v11 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (_OWORD *)(v9 + 16);
    v13 = (__int128 *)(v8 + 16);
    v14 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = *v13;
      *(v12 - 1) = *(v13 - 1);
      *v12 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v4 != v11)
    {
LABEL_11:
      v16 = v4 - v11;
      v17 = 8 * v11;
      v18 = (uint64_t *)(v8 + 8 * v11);
      v19 = (_QWORD *)(v9 + v17);
      do
      {
        v20 = *v18++;
        *v19++ = v20;
        --v16;
      }
      while (v16);
    }
  }
  v21 = (_QWORD *)a2[64];
  if (v21 != a2 && v21 != 0)
    MEMORY[0x212BC6368]();
  a2[64] = v10;
  v23 = a2[66];
  v24 = v5 - v23;
  if (v5 > v23)
LABEL_21:
    bzero((void *)(a2[64] + 8 * v23), 8 * v24);
LABEL_22:
  a2[66] = v5;
  v25 = a2[64];
  v26 = (double *)(v25 + 8 * v4);
  v27 = *(_QWORD *)(*(_QWORD *)a1 + 1208);
  for (i = *(_QWORD *)(*(_QWORD *)a1 + 1216); v27 != i; v27 += 5336)
  {
    if (*(_BYTE *)(v27 + 5304))
    {
      _Q7 = *(_OWORD *)(v27 + 5056);
      _D17 = *(_QWORD *)(v27 + 5064);
      __asm { FMLA            D16, D17, V7.D[1] }
      *(_QWORD *)&_Q7 = *(_QWORD *)(v27 + 5080);
      __asm { FMLA            D16, D7, V6.D[1] }
      _D6 = *(_QWORD *)(v27 + 5096);
      __asm { FMLA            D16, D6, V5.D[1] }
      _D5 = *(_QWORD *)(v27 + 5112);
      __asm { FMLA            D16, D5, V4.D[1] }
      _D4 = *(_QWORD *)(v27 + 5128);
      __asm { FMLA            D16, D4, V3.D[1] }
      _D3 = *(_QWORD *)(v27 + 5144);
      __asm { FMLA            D16, D3, V2.D[1] }
      _D2 = *(_QWORD *)(v27 + 5160);
      __asm { FMLA            D16, D2, V1.D[1] }
      *v26++ = _D16 + *(double *)(v27 + 5168) * *(double *)(v27 + 5168);
    }
  }
  v46 = (double *)(v25 + 8 * v5);
  if (v26 != v46)
    a2[66] = v5 + ~((unint64_t)((char *)v46 - (char *)v26 - 8) >> 3);
}

void sub_20FBC041C(uint64_t a1, _QWORD *a2, double a3, double a4, double a5, double a6, double a7, double a8, float64x2_t _Q6)
{
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _OWORD *v19;
  __int128 *v20;
  unint64_t v21;
  __int128 v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double *v33;
  _QWORD *v35;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  float64x2_t v58;
  int64x2_t v59;
  int64x2_t v60;
  double v61;
  float64x2_t v63;
  float64x2_t v64;
  int8x16_t v65;
  float64x2_t v66;
  int64x2_t v70;
  int64x2_t v71;
  double v72;
  float64x2_t v74;
  float64x2_t v75;
  int8x16_t v76;
  double v77;
  float64x2_t v79;
  float64x2_t v80;
  uint64_t v82;
  __int128 v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  double v90;
  char v91;
  float64x2_t v92[7];
  float64_t v93;
  uint64_t v94;
  float64x2_t v95[7];
  uint64_t v96;
  uint64_t v97;
  float64x2_t *v98;
  int v99;
  float64x2_t *v100;
  int v101;
  float64x2_t *v102;
  int v103;
  float64x2_t *v104;
  int v105;
  float64x2_t *v106;
  int v107;
  float64x2_t *v108;
  int v109;

  v11 = a2[66];
  v12 = v11
      + 0x4515E08719B71393
      * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1216) - *(_QWORD *)(*(_QWORD *)a1 + 1208)) >> 3);
  if (v11 >= v12)
    goto LABEL_22;
  v13 = a2[65];
  if (v13 >= v12)
  {
    v30 = a2[66];
    v31 = 0x4515E08719B71393
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1216) - *(_QWORD *)(*(_QWORD *)a1 + 1208)) >> 3);
    if (v12 <= v11)
      goto LABEL_22;
    goto LABEL_21;
  }
  v14 = 2 * v13;
  if (v14 <= v12)
    v14 = v11
        + 0x4515E08719B71393
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1216) - *(_QWORD *)(*(_QWORD *)a1 + 1208)) >> 3);
  a2[65] = v14;
  v15 = a2[64];
  v16 = operator new[]();
  v17 = v16;
  if (v11)
  {
    v18 = 0;
    if (v11 < 4)
      goto LABEL_11;
    if ((unint64_t)(v16 - v15) < 0x20)
      goto LABEL_11;
    v18 = v11 & 0xFFFFFFFFFFFFFFFCLL;
    v19 = (_OWORD *)(v16 + 16);
    v20 = (__int128 *)(v15 + 16);
    v21 = v11 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v22 = *v20;
      *(v19 - 1) = *(v20 - 1);
      *v19 = v22;
      v19 += 2;
      v20 += 2;
      v21 -= 4;
    }
    while (v21);
    if (v11 != v18)
    {
LABEL_11:
      v23 = v11 - v18;
      v24 = 8 * v18;
      v25 = (uint64_t *)(v15 + 8 * v18);
      v26 = (_QWORD *)(v16 + v24);
      do
      {
        v27 = *v25++;
        *v26++ = v27;
        --v23;
      }
      while (v23);
    }
  }
  v28 = (_QWORD *)a2[64];
  if (v28 != a2 && v28 != 0)
    MEMORY[0x212BC6368]();
  a2[64] = v17;
  v30 = a2[66];
  v31 = v12 - v30;
  if (v12 > v30)
LABEL_21:
    bzero((void *)(a2[64] + 8 * v30), 8 * v31);
LABEL_22:
  a2[66] = v12;
  v32 = a2[64];
  v33 = (double *)(v32 + 8 * v11);
  _X22 = *(_QWORD **)(*(_QWORD *)a1 + 1208);
  v35 = *(_QWORD **)(*(_QWORD *)a1 + 1216);
  if (_X22 != v35)
  {
    do
    {
      __asm { PRFM            #0, [X22,#0x2878] }
      v54 = _X22[628];
      v55 = _X22[629];
      v56 = _X22[630];
      v57 = _X22[631];
      v108 = (float64x2_t *)(v55 + 56);
      v109 = 3;
      v106 = (float64x2_t *)(v55 + 80);
      v107 = 6;
      v104 = (float64x2_t *)(v57 + 56);
      v105 = 3;
      v102 = (float64x2_t *)(v57 + 80);
      v103 = 6;
      v100 = (float64x2_t *)(v55 + 32);
      v101 = 0;
      v98 = (float64x2_t *)(v57 + 32);
      v99 = 0;
      v58.f64[0] = *(float64_t *)(v54 + 48);
      v59 = *(int64x2_t *)(v54 + 32);
      v60 = *(int64x2_t *)(v54 + 56);
      v61 = *(double *)(v54 + 96);
      _Q4 = *(int64x2_t *)(v54 + 80);
      v63 = (float64x2_t)vzip1q_s64(v59, v60);
      v64 = (float64x2_t)vzip2q_s64(v59, v60);
      v58.f64[1] = *(float64_t *)(v54 + 72);
      v65 = vextq_s8((int8x16_t)v64, (int8x16_t)vdupq_laneq_s64(_Q4, 1), 8uLL);
      _Q6.f64[0] = *(float64_t *)(v54 + 120);
      v66 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v63, *(double *)(v54 + 104)), v64, *(float64x2_t *)(v54 + 104), 1), v58, _Q6.f64[0]);
      _D7 = *(_QWORD *)(v54 + 112);
      __asm { FMLA            D17, D7, V4.D[1] }
      _Q6.f64[0] = _D17 + v61 * _Q6.f64[0];
      _Q7 = vnegq_f64(v66);
      v66.f64[0] = *(float64_t *)(v54 + 80);
      *(_QWORD *)&v64.f64[1] = v65.i64[0];
      v95[4] = v58;
      v95[5] = (float64x2_t)*(unint64_t *)&v61;
      v95[0] = v63;
      v95[1] = (float64x2_t)*(unint64_t *)&v66.f64[0];
      v95[2] = v64;
      v95[3] = (float64x2_t)v65.u64[1];
      v95[6] = _Q7;
      v96 = *(_OWORD *)&vnegq_f64(_Q6);
      v97 = 0x3FF0000000000000;
      v58.f64[0] = *(float64_t *)(v56 + 48);
      v70 = *(int64x2_t *)(v56 + 32);
      v71 = *(int64x2_t *)(v56 + 56);
      v72 = *(double *)(v56 + 96);
      _Q4 = *(int64x2_t *)(v56 + 80);
      v74 = (float64x2_t)vzip1q_s64(v70, v71);
      v75 = (float64x2_t)vzip2q_s64(v70, v71);
      v58.f64[1] = *(float64_t *)(v56 + 72);
      v76 = vextq_s8((int8x16_t)v75, (int8x16_t)vdupq_laneq_s64(_Q4, 1), 8uLL);
      v77 = *(double *)(v56 + 120);
      _Q7.f64[0] = *(float64_t *)(v56 + 112);
      __asm { FMLA            D17, D7, V4.D[1] }
      _Q7.f64[0] = *(float64_t *)(v56 + 80);
      v79 = vnegq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v74, *(double *)(v56 + 104)), v75, *(float64x2_t *)(v56 + 104), 1), v58, v77));
      *(_QWORD *)&v66.f64[0] = v76.i64[1];
      *(_QWORD *)&v75.f64[1] = v76.i64[0];
      v80 = vnegq_f64((float64x2_t)COERCE_UNSIGNED_INT64(_D17 + v72 * v77));
      v92[4] = v58;
      v92[5] = (float64x2_t)*(unint64_t *)&v72;
      v92[0] = v74;
      v92[1] = (float64x2_t)*(unint64_t *)&_Q7.f64[0];
      v92[2] = v75;
      v92[3] = (float64x2_t)*(unint64_t *)&v66.f64[0];
      v92[6] = v79;
      v93 = v80.f64[0];
      v94 = 0x3FF0000000000000;
      sub_20F4D7C54((uint64_t)(_X22 + 230), (uint64_t)v95, (uint64_t)v92, &v100, &v98, &v108, &v104, &v106, (uint64_t)&v83, (float64x2_t)0, v80, (__n128)*(unint64_t *)&_Q7.f64[0], &v102, 0, 0, 0, 0);
      v91 = 1;
      __asm { PRFM            #0, [X22,#0x2998] }
      v82 = _X22[664];
      if (!v82 || ((*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v82 + 24))(v82, &v83), v91))
      {
        *(_QWORD *)&_Q6.f64[1] = v84;
        _V7.D[1] = *((_QWORD *)&v83 + 1);
        _D17 = *((_QWORD *)&v83 + 1);
        __asm { FMLA            D16, D17, V7.D[1] }
        _D7 = v84;
        __asm { FMLA            D16, D7, V6.D[1] }
        *(_QWORD *)&_Q6.f64[0] = v85;
        __asm { FMLA            D16, D6, V5.D[1] }
        _D5 = v86;
        __asm { FMLA            D16, D5, V4.D[1] }
        _D4 = v87;
        __asm { FMLA            D16, D4, V3.D[1] }
        _D3 = v88;
        __asm { FMLA            D16, D3, V2.D[1] }
        _D2 = v89;
        __asm { FMLA            D16, D2, V1.D[1] }
        *v33++ = _D16 + v90 * v90;
      }
      _X22 += 667;
    }
    while (_X22 != v35);
    v32 = a2[64];
    v12 = a2[66];
  }
  if (v33 != (double *)(v32 + 8 * v12))
    a2[66] = v12 + (~(v12 + ((unint64_t)(v32 - (_QWORD)v33 - 8) >> 3)) | 0xE000000000000000);
}

void sub_20FBC08C8(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  double *v26;
  uint64_t v27;
  uint64_t v28;
  double *v35;

  v4 = a2[66];
  v5 = v4
     - 0x71C71C71C71C71C7
     * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1240) - *(_QWORD *)(*(_QWORD *)a1 + 1232)) >> 4);
  if (v4 >= v5)
    goto LABEL_22;
  v6 = a2[65];
  if (v6 >= v5)
  {
    v23 = a2[66];
    v24 = 0x8E38E38E38E38E39
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1240) - *(_QWORD *)(*(_QWORD *)a1 + 1232)) >> 4);
    if (v5 <= v4)
      goto LABEL_22;
LABEL_21:
    bzero((void *)(a2[64] + 8 * v23), 8 * v24);
    goto LABEL_22;
  }
  v7 = 2 * v6;
  if (v7 <= v5)
    v7 = v4
       - 0x71C71C71C71C71C7
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1240) - *(_QWORD *)(*(_QWORD *)a1 + 1232)) >> 4);
  a2[65] = v7;
  v8 = a2[64];
  v9 = operator new[]();
  v10 = v9;
  if (v4)
  {
    v11 = 0;
    if (v4 < 4)
      goto LABEL_11;
    if ((unint64_t)(v9 - v8) < 0x20)
      goto LABEL_11;
    v11 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (_OWORD *)(v9 + 16);
    v13 = (__int128 *)(v8 + 16);
    v14 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = *v13;
      *(v12 - 1) = *(v13 - 1);
      *v12 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v4 != v11)
    {
LABEL_11:
      v16 = v4 - v11;
      v17 = 8 * v11;
      v18 = (uint64_t *)(v8 + 8 * v11);
      v19 = (_QWORD *)(v9 + v17);
      do
      {
        v20 = *v18++;
        *v19++ = v20;
        --v16;
      }
      while (v16);
    }
  }
  v21 = (_QWORD *)a2[64];
  if (v21 != a2 && v21 != 0)
    MEMORY[0x212BC6368]();
  a2[64] = v10;
  v23 = a2[66];
  v24 = v5 - v23;
  if (v5 > v23)
    goto LABEL_21;
LABEL_22:
  a2[66] = v5;
  v25 = a2[64];
  v26 = (double *)(v25 + 8 * v4);
  v27 = *(_QWORD *)(*(_QWORD *)a1 + 1232);
  v28 = *(_QWORD *)(*(_QWORD *)a1 + 1240);
  while (v27 != v28)
  {
    if (*(_BYTE *)(v27 + 112))
    {
      _Q1 = *(_OWORD *)(v27 + 56);
      _D3 = *(_QWORD *)(v27 + 64);
      __asm { FMLA            D2, D3, V1.D[1] }
      *v26++ = _D2 + *(double *)(v27 + 72) * *(double *)(v27 + 72);
    }
    v27 += 144;
  }
  v35 = (double *)(v25 + 8 * v5);
  if (v26 != v35)
    a2[66] = v5 + ~((unint64_t)((char *)v35 - (char *)v26 - 8) >> 3);
}

void sub_20FBC0AA8(uint64_t a1, _QWORD *a2, double a3, float64x2_t _Q1, double a5, float64x2_t a6)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  float64x2_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __n128 *v16;
  float64x2_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  double *v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  float64x2_t *v33;
  float64x2_t v34;
  double v35;
  float64x2_t v36;
  uint64_t v37;
  double *v43;
  float64x2_t v44;
  double v45;
  char v46;

  v8 = a2[66];
  v9 = v8
     - 0x71C71C71C71C71C7
     * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1240) - *(_QWORD *)(*(_QWORD *)a1 + 1232)) >> 4);
  if (v8 >= v9)
    goto LABEL_22;
  v10 = a2[65];
  if (v10 >= v9)
  {
    v26 = a2[66];
    v27 = 0x8E38E38E38E38E39
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1240) - *(_QWORD *)(*(_QWORD *)a1 + 1232)) >> 4);
    if (v9 <= v8)
      goto LABEL_22;
    goto LABEL_21;
  }
  v11 = 2 * v10;
  if (v11 <= v9)
    v11 = v8
        - 0x71C71C71C71C71C7
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1240) - *(_QWORD *)(*(_QWORD *)a1 + 1232)) >> 4);
  a2[65] = v11;
  v12 = (float64x2_t *)a2[64];
  v13 = operator new[]();
  v14 = v13;
  if (v8)
  {
    v15 = 0;
    if (v8 < 4)
      goto LABEL_11;
    if ((unint64_t)(v13 - (_QWORD)v12) < 0x20)
      goto LABEL_11;
    v15 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    v16 = (__n128 *)(v13 + 16);
    v17 = v12 + 1;
    v18 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      _Q1 = *v17;
      v16[-1] = (__n128)v17[-1];
      *v16 = (__n128)_Q1;
      v16 += 2;
      v17 += 2;
      v18 -= 4;
    }
    while (v18);
    if (v8 != v15)
    {
LABEL_11:
      v19 = v8 - v15;
      v20 = 8 * v15;
      v21 = (uint64_t *)&v12->f64[v15];
      v22 = (_QWORD *)(v13 + v20);
      do
      {
        v23 = *v21++;
        *v22++ = v23;
        --v19;
      }
      while (v19);
    }
  }
  v24 = (_QWORD *)a2[64];
  if (v24 != a2 && v24 != 0)
    MEMORY[0x212BC6368]();
  a2[64] = v14;
  v26 = a2[66];
  v27 = v9 - v26;
  if (v9 > v26)
LABEL_21:
    bzero((void *)(a2[64] + 8 * v26), 8 * v27);
LABEL_22:
  a2[66] = v9;
  v28 = a2[64];
  v29 = (double *)(v28 + 8 * v8);
  v30 = *(_QWORD *)(*(_QWORD *)a1 + 1232);
  v31 = *(_QWORD *)(*(_QWORD *)a1 + 1240);
  if (v30 == v31)
    goto LABEL_32;
  do
  {
    v33 = *(float64x2_t **)(v30 + 48);
    _Q1.f64[0] = v33[3].f64[0];
    v34 = v33[2];
    a6.f64[0] = *(float64_t *)(*(_QWORD *)(v30 + 24) + 16);
    *(_QWORD *)&v35 = *(_OWORD *)&vmulq_f64(_Q1, a6);
    v36 = vmulq_n_f64(v34, a6.f64[0]);
    v44 = v36;
    v45 = v35;
    v46 = *(_BYTE *)(v30 + 40);
    if (v46)
    {
      v37 = *(_QWORD *)(v30 + 120);
      if (!v37)
      {
        v36.f64[1] = *(double *)vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL).i64;
        v32 = vmulq_f64(v36, v36).f64[0]
            + *(double *)vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL).i64 * a6.f64[0] * v36.f64[1]
            + _Q1.f64[0] * a6.f64[0] * v35;
LABEL_25:
        *v29++ = v32;
        goto LABEL_26;
      }
      (*(void (**)(uint64_t, float64x2_t *))(*(_QWORD *)v37 + 24))(v37, &v44);
      if (v46)
      {
        _Q1.f64[1] = v44.f64[1];
        _D3 = v44.f64[1];
        __asm { FMLA            D2, D3, V1.D[1] }
        v32 = _D2 + v45 * v45;
        goto LABEL_25;
      }
    }
LABEL_26:
    v30 += 144;
  }
  while (v30 != v31);
  v28 = a2[64];
  v9 = a2[66];
LABEL_32:
  v43 = (double *)(v28 + 8 * v9);
  if (v29 != v43)
    a2[66] = v9 + ~((unint64_t)((char *)v43 - (char *)v29 - 8) >> 3);
}

void sub_20FBC0D10(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  double *v26;
  uint64_t v27;
  uint64_t v28;
  double *v35;

  v4 = a2[66];
  v5 = v4
     - 0x79435E50D79435E5
     * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1264) - *(_QWORD *)(*(_QWORD *)a1 + 1256)) >> 3);
  if (v4 >= v5)
    goto LABEL_22;
  v6 = a2[65];
  if (v6 >= v5)
  {
    v23 = a2[66];
    v24 = 0x86BCA1AF286BCA1BLL
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1264) - *(_QWORD *)(*(_QWORD *)a1 + 1256)) >> 3);
    if (v5 <= v4)
      goto LABEL_22;
LABEL_21:
    bzero((void *)(a2[64] + 8 * v23), 8 * v24);
    goto LABEL_22;
  }
  v7 = 2 * v6;
  if (v7 <= v5)
    v7 = v4
       - 0x79435E50D79435E5
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1264) - *(_QWORD *)(*(_QWORD *)a1 + 1256)) >> 3);
  a2[65] = v7;
  v8 = a2[64];
  v9 = operator new[]();
  v10 = v9;
  if (v4)
  {
    v11 = 0;
    if (v4 < 4)
      goto LABEL_11;
    if ((unint64_t)(v9 - v8) < 0x20)
      goto LABEL_11;
    v11 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (_OWORD *)(v9 + 16);
    v13 = (__int128 *)(v8 + 16);
    v14 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = *v13;
      *(v12 - 1) = *(v13 - 1);
      *v12 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v4 != v11)
    {
LABEL_11:
      v16 = v4 - v11;
      v17 = 8 * v11;
      v18 = (uint64_t *)(v8 + 8 * v11);
      v19 = (_QWORD *)(v9 + v17);
      do
      {
        v20 = *v18++;
        *v19++ = v20;
        --v16;
      }
      while (v16);
    }
  }
  v21 = (_QWORD *)a2[64];
  if (v21 != a2 && v21 != 0)
    MEMORY[0x212BC6368]();
  a2[64] = v10;
  v23 = a2[66];
  v24 = v5 - v23;
  if (v5 > v23)
    goto LABEL_21;
LABEL_22:
  a2[66] = v5;
  v25 = a2[64];
  v26 = (double *)(v25 + 8 * v4);
  v27 = *(_QWORD *)(*(_QWORD *)a1 + 1256);
  v28 = *(_QWORD *)(*(_QWORD *)a1 + 1264);
  while (v27 != v28)
  {
    if (*(_BYTE *)(v27 + 120))
    {
      _Q1 = *(_OWORD *)(v27 + 64);
      _D3 = *(_QWORD *)(v27 + 72);
      __asm { FMLA            D2, D3, V1.D[1] }
      *v26++ = _D2 + *(double *)(v27 + 80) * *(double *)(v27 + 80);
    }
    v27 += 152;
  }
  v35 = (double *)(v25 + 8 * v5);
  if (v26 != v35)
    a2[66] = v5 + ~((unint64_t)((char *)v35 - (char *)v26 - 8) >> 3);
}

void sub_20FBC0EF0(uint64_t a1, _QWORD *a2, float64x2_t a3, float64x2_t _Q1)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  float64x2_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __n128 *v14;
  float64x2_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  double *v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  uint64_t v36;
  double *v42;
  float64x2_t v43;
  double v44;
  char v45;

  v6 = a2[66];
  v7 = v6
     - 0x79435E50D79435E5
     * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1264) - *(_QWORD *)(*(_QWORD *)a1 + 1256)) >> 3);
  if (v6 >= v7)
    goto LABEL_22;
  v8 = a2[65];
  if (v8 >= v7)
  {
    v24 = a2[66];
    v25 = 0x86BCA1AF286BCA1BLL
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1264) - *(_QWORD *)(*(_QWORD *)a1 + 1256)) >> 3);
    if (v7 <= v6)
      goto LABEL_22;
    goto LABEL_21;
  }
  v9 = 2 * v8;
  if (v9 <= v7)
    v9 = v6
       - 0x79435E50D79435E5
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1264) - *(_QWORD *)(*(_QWORD *)a1 + 1256)) >> 3);
  a2[65] = v9;
  v10 = (float64x2_t *)a2[64];
  v11 = operator new[]();
  v12 = v11;
  if (v6)
  {
    v13 = 0;
    if (v6 < 4)
      goto LABEL_11;
    if ((unint64_t)(v11 - (_QWORD)v10) < 0x20)
      goto LABEL_11;
    v13 = v6 & 0xFFFFFFFFFFFFFFFCLL;
    v14 = (__n128 *)(v11 + 16);
    v15 = v10 + 1;
    v16 = v6 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      a3 = v15[-1];
      _Q1 = *v15;
      v14[-1] = (__n128)a3;
      *v14 = (__n128)_Q1;
      v14 += 2;
      v15 += 2;
      v16 -= 4;
    }
    while (v16);
    if (v6 != v13)
    {
LABEL_11:
      v17 = v6 - v13;
      v18 = 8 * v13;
      v19 = (uint64_t *)&v10->f64[v13];
      v20 = (_QWORD *)(v11 + v18);
      do
      {
        v21 = *v19++;
        *v20++ = v21;
        --v17;
      }
      while (v17);
    }
  }
  v22 = (_QWORD *)a2[64];
  if (v22 != a2 && v22 != 0)
    MEMORY[0x212BC6368]();
  a2[64] = v12;
  v24 = a2[66];
  v25 = v7 - v24;
  if (v7 > v24)
LABEL_21:
    bzero((void *)(a2[64] + 8 * v24), 8 * v25);
LABEL_22:
  a2[66] = v7;
  v26 = a2[64];
  v27 = (double *)(v26 + 8 * v6);
  v28 = *(_QWORD *)(*(_QWORD *)a1 + 1256);
  v29 = *(_QWORD *)(*(_QWORD *)a1 + 1264);
  if (v28 == v29)
    goto LABEL_32;
  do
  {
    v31 = *(_QWORD *)(v28 + 48);
    v32 = *(_QWORD *)(v28 + 56);
    a3.f64[0] = *(float64_t *)(v32 + 120);
    _Q1.f64[0] = *(float64_t *)(v31 + 120);
    v34 = *(float64x2_t *)(v31 + 104);
    _Q1 = vsubq_f64(a3, _Q1);
    v33 = vsubq_f64(*(float64x2_t *)(v32 + 104), v34);
    v34.f64[0] = *(float64_t *)(*(_QWORD *)(v28 + 24) + 16);
    v35 = vmulq_n_f64(v33, v34.f64[0]);
    a3 = vmulq_f64(_Q1, v34);
    v43 = v35;
    v44 = a3.f64[0];
    v45 = *(_BYTE *)(v28 + 40);
    if (v45)
    {
      v36 = *(_QWORD *)(v28 + 128);
      if (!v36)
      {
        v35.f64[1] = *(double *)vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL).i64;
        v30 = vmulq_f64(v35, v35).f64[0]
            + *(double *)vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL).i64 * v34.f64[0] * v35.f64[1]
            + _Q1.f64[0] * v34.f64[0] * a3.f64[0];
LABEL_25:
        *v27++ = v30;
        goto LABEL_26;
      }
      (*(void (**)(uint64_t, float64x2_t *))(*(_QWORD *)v36 + 24))(v36, &v43);
      if (v45)
      {
        _Q1.f64[1] = v43.f64[1];
        _D3 = v43.f64[1];
        __asm { FMLA            D2, D3, V1.D[1] }
        v30 = _D2 + v44 * v44;
        goto LABEL_25;
      }
    }
LABEL_26:
    v28 += 152;
  }
  while (v28 != v29);
  v26 = a2[64];
  v7 = a2[66];
LABEL_32:
  v42 = (double *)(v26 + 8 * v7);
  if (v27 != v42)
    a2[66] = v7 + ~((unint64_t)((char *)v42 - (char *)v27 - 8) >> 3);
}

void sub_20FBC1168(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v35;

  v4 = a2[66];
  v5 = v4
     - 0x79435E50D79435E5
     * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1288) - *(_QWORD *)(*(_QWORD *)a1 + 1280)) >> 4);
  if (v4 >= v5)
    goto LABEL_22;
  v6 = a2[65];
  if (v6 >= v5)
  {
    v23 = a2[66];
    v24 = 0x86BCA1AF286BCA1BLL
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1288) - *(_QWORD *)(*(_QWORD *)a1 + 1280)) >> 4);
    if (v5 <= v4)
      goto LABEL_22;
LABEL_21:
    bzero((void *)(a2[64] + 8 * v23), 8 * v24);
    goto LABEL_22;
  }
  v7 = 2 * v6;
  if (v7 <= v5)
    v7 = v4
       - 0x79435E50D79435E5
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1288) - *(_QWORD *)(*(_QWORD *)a1 + 1280)) >> 4);
  a2[65] = v7;
  v8 = a2[64];
  v9 = operator new[]();
  v10 = v9;
  if (v4)
  {
    v11 = 0;
    if (v4 < 4)
      goto LABEL_11;
    if ((unint64_t)(v9 - v8) < 0x20)
      goto LABEL_11;
    v11 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (_OWORD *)(v9 + 16);
    v13 = (__int128 *)(v8 + 16);
    v14 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = *v13;
      *(v12 - 1) = *(v13 - 1);
      *v12 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v4 != v11)
    {
LABEL_11:
      v16 = v4 - v11;
      v17 = 8 * v11;
      v18 = (uint64_t *)(v8 + 8 * v11);
      v19 = (_QWORD *)(v9 + v17);
      do
      {
        v20 = *v18++;
        *v19++ = v20;
        --v16;
      }
      while (v16);
    }
  }
  v21 = (_QWORD *)a2[64];
  if (v21 != a2 && v21 != 0)
    MEMORY[0x212BC6368]();
  a2[64] = v10;
  v23 = a2[66];
  v24 = v5 - v23;
  if (v5 > v23)
    goto LABEL_21;
LABEL_22:
  a2[66] = v5;
  v25 = a2[64];
  v26 = (char *)(v25 + 8 * v4);
  v27 = *(_QWORD *)(*(_QWORD *)a1 + 1280);
  v28 = *(_QWORD *)(*(_QWORD *)a1 + 1288);
  while (v27 != v28)
  {
    if (*(_BYTE *)(v27 + 272))
    {
      _Q0 = *(_OWORD *)(v27 + 232);
      _D2 = *(_QWORD *)(v27 + 240);
      __asm { FMLA            D1, D2, V0.D[1] }
      *(_QWORD *)v26 = _D1;
      v26 += 8;
    }
    v27 += 304;
  }
  v35 = (char *)(v25 + 8 * v5);
  if (v26 != v35)
    a2[66] = v5 + ~((unint64_t)(v35 - v26 - 8) >> 3);
}

void sub_20FBC1340(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t *v27;
  uint64_t *v28;
  double **v29;
  uint64_t *v30;
  uint64_t *v37;
  int v38;
  uint64_t v39;
  char *v40;
  __int128 v41;
  char v42;

  v4 = a2[66];
  v5 = v4
     - 0x79435E50D79435E5
     * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1288) - *(_QWORD *)(*(_QWORD *)a1 + 1280)) >> 4);
  if (v4 >= v5)
    goto LABEL_22;
  v6 = a2[65];
  if (v6 >= v5)
  {
    v23 = a2[66];
    v24 = 0x86BCA1AF286BCA1BLL
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1288) - *(_QWORD *)(*(_QWORD *)a1 + 1280)) >> 4);
    if (v5 <= v4)
      goto LABEL_22;
    goto LABEL_21;
  }
  v7 = 2 * v6;
  if (v7 <= v5)
    v7 = v4
       - 0x79435E50D79435E5
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1288) - *(_QWORD *)(*(_QWORD *)a1 + 1280)) >> 4);
  a2[65] = v7;
  v8 = a2[64];
  v9 = operator new[]();
  v10 = v9;
  if (v4)
  {
    v11 = 0;
    if (v4 < 4)
      goto LABEL_11;
    if ((unint64_t)(v9 - v8) < 0x20)
      goto LABEL_11;
    v11 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (_OWORD *)(v9 + 16);
    v13 = (__int128 *)(v8 + 16);
    v14 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = *v13;
      *(v12 - 1) = *(v13 - 1);
      *v12 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v4 != v11)
    {
LABEL_11:
      v16 = v4 - v11;
      v17 = 8 * v11;
      v18 = (uint64_t *)(v8 + 8 * v11);
      v19 = (_QWORD *)(v9 + v17);
      do
      {
        v20 = *v18++;
        *v19++ = v20;
        --v16;
      }
      while (v16);
    }
  }
  v21 = (_QWORD *)a2[64];
  if (v21 != a2 && v21 != 0)
    MEMORY[0x212BC6368]();
  a2[64] = v10;
  v23 = a2[66];
  v24 = v5 - v23;
  if (v5 > v23)
LABEL_21:
    bzero((void *)(a2[64] + 8 * v23), 8 * v24);
LABEL_22:
  a2[66] = v5;
  v25 = a2[64];
  v26 = (char *)(v25 + 8 * v4);
  v27 = *(uint64_t **)(*(_QWORD *)a1 + 1280);
  v28 = *(uint64_t **)(*(_QWORD *)a1 + 1288);
  if (v27 != v28)
  {
    v29 = (double **)(*(_QWORD *)a1 + 1584);
    v30 = v27 + 25;
    do
    {
      v38 = sub_20FC80984((uint64_t)(v30 - 24), v30, (uint64_t)&v41, v29);
      v42 = v38;
      if (v38)
      {
        v39 = v30[10];
        if (!v39 || ((*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v39 + 24))(v39, &v41), v42))
        {
          _V1.D[1] = *((_QWORD *)&v41 + 1);
          _D2 = *((_QWORD *)&v41 + 1);
          __asm { FMLA            D0, D2, V1.D[1] }
          *(_QWORD *)v26 = _D0;
          v26 += 8;
        }
      }
      v37 = v30 + 13;
      v30 += 38;
    }
    while (v37 != v28);
    v25 = a2[64];
    v5 = a2[66];
  }
  v40 = (char *)(v25 + 8 * v5);
  if (v26 != v40)
    a2[66] = v5 + ~((unint64_t)(v40 - v26 - 8) >> 3);
}

void sub_20FBC1578(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 *v29;
  uint64_t v30;
  double *v37;

  v4 = a2[66];
  v5 = v4
     + 0x4FA4FA4FA4FA4FA5
     * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1312) - *(_QWORD *)(*(_QWORD *)a1 + 1304)) >> 3);
  if (v4 >= v5)
    goto LABEL_22;
  v6 = a2[65];
  if (v6 >= v5)
  {
    v23 = a2[66];
    v24 = 0x4FA4FA4FA4FA4FA5
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1312) - *(_QWORD *)(*(_QWORD *)a1 + 1304)) >> 3);
    if (v5 <= v4)
      goto LABEL_22;
    goto LABEL_21;
  }
  v7 = 2 * v6;
  if (v7 <= v5)
    v7 = v4
       + 0x4FA4FA4FA4FA4FA5
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1312) - *(_QWORD *)(*(_QWORD *)a1 + 1304)) >> 3);
  a2[65] = v7;
  v8 = a2[64];
  v9 = operator new[]();
  v10 = v9;
  if (v4)
  {
    v11 = 0;
    if (v4 < 4)
      goto LABEL_11;
    if ((unint64_t)(v9 - v8) < 0x20)
      goto LABEL_11;
    v11 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (_OWORD *)(v9 + 16);
    v13 = (__int128 *)(v8 + 16);
    v14 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = *v13;
      *(v12 - 1) = *(v13 - 1);
      *v12 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v4 != v11)
    {
LABEL_11:
      v16 = v4 - v11;
      v17 = 8 * v11;
      v18 = (uint64_t *)(v8 + 8 * v11);
      v19 = (_QWORD *)(v9 + v17);
      do
      {
        v20 = *v18++;
        *v19++ = v20;
        --v16;
      }
      while (v16);
    }
  }
  v21 = (_QWORD *)a2[64];
  if (v21 != a2 && v21 != 0)
    MEMORY[0x212BC6368]();
  a2[64] = v10;
  v23 = a2[66];
  v24 = v5 - v23;
  if (v5 > v23)
LABEL_21:
    bzero((void *)(a2[64] + 8 * v23), 8 * v24);
LABEL_22:
  a2[66] = v5;
  v25 = a2[64];
  v26 = (double *)(v25 + 8 * v4);
  v27 = *(_QWORD *)(*(_QWORD *)a1 + 1304);
  v28 = *(_QWORD *)(*(_QWORD *)a1 + 1312);
  if (v27 != v28)
  {
    v29 = (__int128 *)(v27 + 272);
    do
    {
      if (*((_BYTE *)v29 + 56))
      {
        _Q1 = *v29;
        _D3 = *((_QWORD *)v29 + 1);
        __asm { FMLA            D2, D3, V1.D[1] }
        *v26++ = _D2 + *((double *)v29 + 2) * *((double *)v29 + 2);
      }
      v30 = (uint64_t)v29 + 88;
      v29 = (__int128 *)((char *)v29 + 360);
    }
    while (v30 != v28);
  }
  v37 = (double *)(v25 + 8 * v5);
  if (v26 != v37)
    a2[66] = v5 + ~((unint64_t)((char *)v37 - (char *)v26 - 8) >> 3);
}

void sub_20FBC1768(uint64_t a1, _QWORD *a2, __n128 a3, __n128 _Q1, double _D2, double _D3, double a7, double a8, double a9, float64x2_t a10)
{
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __n128 *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  __n128 *v20;
  __n128 *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v40;
  _BOOL4 v41;
  uint64_t v42;
  char *v43;
  __n128 v44;
  double v45;
  BOOL v46;

  v12 = a2[66];
  v13 = v12
      + 0x4FA4FA4FA4FA4FA5
      * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1312) - *(_QWORD *)(*(_QWORD *)a1 + 1304)) >> 3);
  if (v12 >= v13)
    goto LABEL_22;
  v14 = a2[65];
  if (v14 >= v13)
  {
    v30 = a2[66];
    v31 = 0x4FA4FA4FA4FA4FA5
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1312) - *(_QWORD *)(*(_QWORD *)a1 + 1304)) >> 3);
    if (v13 <= v12)
      goto LABEL_22;
    goto LABEL_21;
  }
  v15 = 2 * v14;
  if (v15 <= v13)
    v15 = v12
        + 0x4FA4FA4FA4FA4FA5
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1312) - *(_QWORD *)(*(_QWORD *)a1 + 1304)) >> 3);
  a2[65] = v15;
  v16 = (__n128 *)a2[64];
  v17 = operator new[]();
  v18 = v17;
  if (v12)
  {
    v19 = 0;
    if (v12 < 4)
      goto LABEL_11;
    if ((unint64_t)(v17 - (_QWORD)v16) < 0x20)
      goto LABEL_11;
    v19 = v12 & 0xFFFFFFFFFFFFFFFCLL;
    v20 = (__n128 *)(v17 + 16);
    v21 = v16 + 1;
    v22 = v12 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      a3 = v21[-1];
      _Q1 = *v21;
      v20[-1] = a3;
      *v20 = _Q1;
      v20 += 2;
      v21 += 2;
      v22 -= 4;
    }
    while (v22);
    if (v12 != v19)
    {
LABEL_11:
      v23 = v12 - v19;
      v24 = 8 * v19;
      v25 = &v16->n128_u64[v19];
      v26 = (unint64_t *)(v17 + v24);
      do
      {
        v27 = *v25++;
        a3.n128_u64[0] = v27;
        *v26++ = v27;
        --v23;
      }
      while (v23);
    }
  }
  v28 = (_QWORD *)a2[64];
  if (v28 != a2 && v28 != 0)
    MEMORY[0x212BC6368]();
  a2[64] = v18;
  v30 = a2[66];
  v31 = v13 - v30;
  if (v13 > v30)
LABEL_21:
    bzero((void *)(a2[64] + 8 * v30), 8 * v31);
LABEL_22:
  a2[66] = v13;
  v32 = a2[64];
  v33 = (char *)(v32 + 8 * v12);
  v34 = *(_QWORD *)(*(_QWORD *)a1 + 1304);
  v35 = *(_QWORD *)(*(_QWORD *)a1 + 1312);
  if (v34 != v35)
  {
    v36 = v34 + 224;
    do
    {
      v41 = sub_20F9B6D14(v36 - 216, (int64x2_t **)v36, (float64x2_t *)&v44, a3.n128_f64[0], _Q1.n128_f64[0], _D2, _D3, a7, a8, a9, a10);
      v46 = v41;
      if (v41)
      {
        v42 = *(_QWORD *)(v36 + 112);
        if (!v42 || ((*(void (**)(uint64_t, __n128 *))(*(_QWORD *)v42 + 24))(v42, &v44), v46))
        {
          _Q1 = v44;
          _D3 = v44.n128_f64[1];
          __asm { FMLA            D2, D3, V1.D[1] }
          a3.n128_f64[0] = _D2 + v45 * v45;
          *(_QWORD *)v33 = a3.n128_u64[0];
          v33 += 8;
        }
      }
      v40 = v36 + 136;
      v36 += 360;
    }
    while (v40 != v35);
    v32 = a2[64];
    v13 = a2[66];
  }
  v43 = (char *)(v32 + 8 * v13);
  if (v33 != v43)
    a2[66] = v13 + ~((unint64_t)(v43 - v33 - 8) >> 3);
}

void sub_20FBC19A0(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double *v26;
  uint64_t v27;
  uint64_t v28;
  double *v29;

  v4 = a2[66];
  v5 = v4
     + 0x6DB6DB6DB6DB6DB7
     * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1336) - *(_QWORD *)(*(_QWORD *)a1 + 1328)) >> 4);
  if (v4 >= v5)
    goto LABEL_22;
  v6 = a2[65];
  if (v6 >= v5)
  {
    v23 = a2[66];
    v24 = 0x6DB6DB6DB6DB6DB7
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1336) - *(_QWORD *)(*(_QWORD *)a1 + 1328)) >> 4);
    if (v5 <= v4)
      goto LABEL_22;
LABEL_21:
    bzero((void *)(a2[64] + 8 * v23), 8 * v24);
    goto LABEL_22;
  }
  v7 = 2 * v6;
  if (v7 <= v5)
    v7 = v4
       + 0x6DB6DB6DB6DB6DB7
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1336) - *(_QWORD *)(*(_QWORD *)a1 + 1328)) >> 4);
  a2[65] = v7;
  v8 = a2[64];
  v9 = operator new[]();
  v10 = v9;
  if (v4)
  {
    v11 = 0;
    if (v4 < 4)
      goto LABEL_11;
    if ((unint64_t)(v9 - v8) < 0x20)
      goto LABEL_11;
    v11 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (_OWORD *)(v9 + 16);
    v13 = (__int128 *)(v8 + 16);
    v14 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = *v13;
      *(v12 - 1) = *(v13 - 1);
      *v12 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v4 != v11)
    {
LABEL_11:
      v16 = v4 - v11;
      v17 = 8 * v11;
      v18 = (uint64_t *)(v8 + 8 * v11);
      v19 = (_QWORD *)(v9 + v17);
      do
      {
        v20 = *v18++;
        *v19++ = v20;
        --v16;
      }
      while (v16);
    }
  }
  v21 = (_QWORD *)a2[64];
  if (v21 != a2 && v21 != 0)
    MEMORY[0x212BC6368]();
  a2[64] = v10;
  v23 = a2[66];
  v24 = v5 - v23;
  if (v5 > v23)
    goto LABEL_21;
LABEL_22:
  a2[66] = v5;
  v25 = a2[64];
  v26 = (double *)(v25 + 8 * v4);
  v27 = *(_QWORD *)(*(_QWORD *)a1 + 1328);
  v28 = *(_QWORD *)(*(_QWORD *)a1 + 1336);
  while (v27 != v28)
  {
    if (*(_BYTE *)(v27 + 80))
      *v26++ = *(double *)(v27 + 56) * *(double *)(v27 + 56);
    v27 += 112;
  }
  v29 = (double *)(v25 + 8 * v5);
  if (v26 != v29)
    a2[66] = v5 + ~((unint64_t)((char *)v29 - (char *)v26 - 8) >> 3);
}

void sub_20FBC1B70(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double *v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  double *v31;
  double v32[2];
  char v33;

  v4 = a2[66];
  v5 = v4
     + 0x6DB6DB6DB6DB6DB7
     * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1336) - *(_QWORD *)(*(_QWORD *)a1 + 1328)) >> 4);
  if (v4 >= v5)
    goto LABEL_22;
  v6 = a2[65];
  if (v6 >= v5)
  {
    v23 = a2[66];
    v24 = 0x6DB6DB6DB6DB6DB7
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1336) - *(_QWORD *)(*(_QWORD *)a1 + 1328)) >> 4);
    if (v5 <= v4)
      goto LABEL_22;
    goto LABEL_21;
  }
  v7 = 2 * v6;
  if (v7 <= v5)
    v7 = v4
       + 0x6DB6DB6DB6DB6DB7
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1336) - *(_QWORD *)(*(_QWORD *)a1 + 1328)) >> 4);
  a2[65] = v7;
  v8 = a2[64];
  v9 = operator new[]();
  v10 = v9;
  if (v4)
  {
    v11 = 0;
    if (v4 < 4)
      goto LABEL_11;
    if ((unint64_t)(v9 - v8) < 0x20)
      goto LABEL_11;
    v11 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (_OWORD *)(v9 + 16);
    v13 = (__int128 *)(v8 + 16);
    v14 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = *v13;
      *(v12 - 1) = *(v13 - 1);
      *v12 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v4 != v11)
    {
LABEL_11:
      v16 = v4 - v11;
      v17 = 8 * v11;
      v18 = (uint64_t *)(v8 + 8 * v11);
      v19 = (_QWORD *)(v9 + v17);
      do
      {
        v20 = *v18++;
        *v19++ = v20;
        --v16;
      }
      while (v16);
    }
  }
  v21 = (_QWORD *)a2[64];
  if (v21 != a2 && v21 != 0)
    MEMORY[0x212BC6368]();
  a2[64] = v10;
  v23 = a2[66];
  v24 = v5 - v23;
  if (v5 > v23)
LABEL_21:
    bzero((void *)(a2[64] + 8 * v23), 8 * v24);
LABEL_22:
  a2[66] = v5;
  v25 = a2[64];
  v26 = (double *)(v25 + 8 * v4);
  v27 = *(_QWORD *)(*(_QWORD *)a1 + 1328);
  v28 = *(_QWORD *)(*(_QWORD *)a1 + 1336);
  if (v27 == v28)
    goto LABEL_31;
  do
  {
    if (*(_BYTE *)(v27 + 40))
    {
      v29 = *(double *)(v27 + 32) * (*(double *)(*(_QWORD *)(v27 + 48) + 32) - *(double *)(v27 + 24));
      v32[0] = v29;
      v33 = 1;
      v30 = *(_QWORD *)(v27 + 88);
      if (!v30)
        goto LABEL_24;
      (*(void (**)(uint64_t, double *))(*(_QWORD *)v30 + 24))(v30, v32);
      if (v33)
      {
        v29 = v32[0];
LABEL_24:
        *v26++ = v29 * v29;
      }
    }
    v27 += 112;
  }
  while (v27 != v28);
  v25 = a2[64];
  v5 = a2[66];
LABEL_31:
  v31 = (double *)(v25 + 8 * v5);
  if (v26 != v31)
    a2[66] = v5 + ~((unint64_t)((char *)v31 - (char *)v26 - 8) >> 3);
}

void sub_20FBC1DA0(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v36;

  v4 = a2[66];
  v5 = v4
     + 0x4EC4EC4EC4EC4EC5
     * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1360) - *(_QWORD *)(*(_QWORD *)a1 + 1352)) >> 4);
  if (v4 >= v5)
    goto LABEL_22;
  v6 = a2[65];
  if (v6 >= v5)
  {
    v23 = a2[66];
    v24 = 0x4EC4EC4EC4EC4EC5
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1360) - *(_QWORD *)(*(_QWORD *)a1 + 1352)) >> 4);
    if (v5 <= v4)
      goto LABEL_22;
LABEL_21:
    bzero((void *)(a2[64] + 8 * v23), 8 * v24);
    goto LABEL_22;
  }
  v7 = 2 * v6;
  if (v7 <= v5)
    v7 = v4
       + 0x4EC4EC4EC4EC4EC5
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1360) - *(_QWORD *)(*(_QWORD *)a1 + 1352)) >> 4);
  a2[65] = v7;
  v8 = a2[64];
  v9 = operator new[]();
  v10 = v9;
  if (v4)
  {
    v11 = 0;
    if (v4 < 4)
      goto LABEL_11;
    if ((unint64_t)(v9 - v8) < 0x20)
      goto LABEL_11;
    v11 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (_OWORD *)(v9 + 16);
    v13 = (__int128 *)(v8 + 16);
    v14 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = *v13;
      *(v12 - 1) = *(v13 - 1);
      *v12 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v4 != v11)
    {
LABEL_11:
      v16 = v4 - v11;
      v17 = 8 * v11;
      v18 = (uint64_t *)(v8 + 8 * v11);
      v19 = (_QWORD *)(v9 + v17);
      do
      {
        v20 = *v18++;
        *v19++ = v20;
        --v16;
      }
      while (v16);
    }
  }
  v21 = (_QWORD *)a2[64];
  if (v21 != a2 && v21 != 0)
    MEMORY[0x212BC6368]();
  a2[64] = v10;
  v23 = a2[66];
  v24 = v5 - v23;
  if (v5 > v23)
    goto LABEL_21;
LABEL_22:
  a2[66] = v5;
  v25 = a2[64];
  v26 = (char *)(v25 + 8 * v4);
  v27 = *(_QWORD *)(*(_QWORD *)a1 + 1352);
  v28 = *(_QWORD *)(*(_QWORD *)a1 + 1360);
  while (v27 != v28)
  {
    if (*(_BYTE *)(v27 + 176))
    {
      _Q1 = *(_OWORD *)(v27 + 104);
      _D3 = *(_QWORD *)(v27 + 112);
      __asm { FMLA            D2, D3, V1.D[1] }
      *(_QWORD *)&_Q1 = *(_QWORD *)(v27 + 128);
      __asm { FMLA            D2, D1, V0.D[1] }
      *(_QWORD *)v26 = _D2;
      v26 += 8;
    }
    v27 += 208;
  }
  v36 = (char *)(v25 + 8 * v5);
  if (v26 != v36)
    a2[66] = v5 + ~((unint64_t)(v36 - v26 - 8) >> 3);
}

void sub_20FBC1F88(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  float64x2_t *v36;
  uint64_t v39;
  char *v40;
  float64x2_t v41;
  float64x2_t v42;
  char v43;

  v4 = a2[66];
  v5 = v4
     + 0x4EC4EC4EC4EC4EC5
     * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1360) - *(_QWORD *)(*(_QWORD *)a1 + 1352)) >> 4);
  if (v4 >= v5)
    goto LABEL_22;
  v6 = a2[65];
  if (v6 >= v5)
  {
    v23 = a2[66];
    v24 = 0x4EC4EC4EC4EC4EC5
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1360) - *(_QWORD *)(*(_QWORD *)a1 + 1352)) >> 4);
    if (v5 <= v4)
      goto LABEL_22;
    goto LABEL_21;
  }
  v7 = 2 * v6;
  if (v7 <= v5)
    v7 = v4
       + 0x4EC4EC4EC4EC4EC5
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1360) - *(_QWORD *)(*(_QWORD *)a1 + 1352)) >> 4);
  a2[65] = v7;
  v8 = a2[64];
  v9 = operator new[]();
  v10 = v9;
  if (v4)
  {
    v11 = 0;
    if (v4 < 4)
      goto LABEL_11;
    if ((unint64_t)(v9 - v8) < 0x20)
      goto LABEL_11;
    v11 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (_OWORD *)(v9 + 16);
    v13 = (__int128 *)(v8 + 16);
    v14 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = *v13;
      *(v12 - 1) = *(v13 - 1);
      *v12 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v4 != v11)
    {
LABEL_11:
      v16 = v4 - v11;
      v17 = 8 * v11;
      v18 = (uint64_t *)(v8 + 8 * v11);
      v19 = (_QWORD *)(v9 + v17);
      do
      {
        v20 = *v18++;
        *v19++ = v20;
        --v16;
      }
      while (v16);
    }
  }
  v21 = (_QWORD *)a2[64];
  if (v21 != a2 && v21 != 0)
    MEMORY[0x212BC6368]();
  a2[64] = v10;
  v23 = a2[66];
  v24 = v5 - v23;
  if (v5 > v23)
LABEL_21:
    bzero((void *)(a2[64] + 8 * v23), 8 * v24);
LABEL_22:
  a2[66] = v5;
  v25 = a2[64];
  v26 = (char *)(v25 + 8 * v4);
  v27 = *(_QWORD *)(*(_QWORD *)a1 + 1352);
  v28 = *(_QWORD *)(*(_QWORD *)a1 + 1360);
  if (v27 == v28)
    goto LABEL_31;
  do
  {
    if (*(_BYTE *)(v27 + 88))
    {
      v36 = *(float64x2_t **)(v27 + 96);
      _Q1 = vmulq_f64(vsubq_f64(v36[3], *(float64x2_t *)(v27 + 40)), *(float64x2_t *)(v27 + 72));
      _Q2 = vmulq_f64(vsubq_f64(v36[2], *(float64x2_t *)(v27 + 24)), *(float64x2_t *)(v27 + 56));
      v41 = _Q2;
      v42 = _Q1;
      v43 = 1;
      v39 = *(_QWORD *)(v27 + 184);
      if (!v39)
        goto LABEL_24;
      (*(void (**)(uint64_t, float64x2_t *))(*(_QWORD *)v39 + 24))(v39, &v41);
      if (v43)
      {
        _Q2.f64[1] = v41.f64[1];
        _Q1.f64[1] = v42.f64[1];
LABEL_24:
        _D3 = _Q2.f64[1];
        __asm { FMLA            D0, D3, V2.D[1] }
        _D2 = _Q1.f64[1];
        __asm { FMLA            D0, D2, V1.D[1] }
        *(_QWORD *)v26 = _D0;
        v26 += 8;
      }
    }
    v27 += 208;
  }
  while (v27 != v28);
  v25 = a2[64];
  v5 = a2[66];
LABEL_31:
  v40 = (char *)(v25 + 8 * v5);
  if (v26 != v40)
    a2[66] = v5 + ~((unint64_t)(v40 - v26 - 8) >> 3);
}

void sub_20FBC21E0(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v36;

  v4 = a2[66];
  v5 = v4
     + 0x4EC4EC4EC4EC4EC5
     * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1384) - *(_QWORD *)(*(_QWORD *)a1 + 1376)) >> 4);
  if (v4 >= v5)
    goto LABEL_22;
  v6 = a2[65];
  if (v6 >= v5)
  {
    v23 = a2[66];
    v24 = 0x4EC4EC4EC4EC4EC5
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1384) - *(_QWORD *)(*(_QWORD *)a1 + 1376)) >> 4);
    if (v5 <= v4)
      goto LABEL_22;
LABEL_21:
    bzero((void *)(a2[64] + 8 * v23), 8 * v24);
    goto LABEL_22;
  }
  v7 = 2 * v6;
  if (v7 <= v5)
    v7 = v4
       + 0x4EC4EC4EC4EC4EC5
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1384) - *(_QWORD *)(*(_QWORD *)a1 + 1376)) >> 4);
  a2[65] = v7;
  v8 = a2[64];
  v9 = operator new[]();
  v10 = v9;
  if (v4)
  {
    v11 = 0;
    if (v4 < 4)
      goto LABEL_11;
    if ((unint64_t)(v9 - v8) < 0x20)
      goto LABEL_11;
    v11 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (_OWORD *)(v9 + 16);
    v13 = (__int128 *)(v8 + 16);
    v14 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = *v13;
      *(v12 - 1) = *(v13 - 1);
      *v12 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v4 != v11)
    {
LABEL_11:
      v16 = v4 - v11;
      v17 = 8 * v11;
      v18 = (uint64_t *)(v8 + 8 * v11);
      v19 = (_QWORD *)(v9 + v17);
      do
      {
        v20 = *v18++;
        *v19++ = v20;
        --v16;
      }
      while (v16);
    }
  }
  v21 = (_QWORD *)a2[64];
  if (v21 != a2 && v21 != 0)
    MEMORY[0x212BC6368]();
  a2[64] = v10;
  v23 = a2[66];
  v24 = v5 - v23;
  if (v5 > v23)
    goto LABEL_21;
LABEL_22:
  a2[66] = v5;
  v25 = a2[64];
  v26 = (char *)(v25 + 8 * v4);
  v27 = *(_QWORD *)(*(_QWORD *)a1 + 1376);
  v28 = *(_QWORD *)(*(_QWORD *)a1 + 1384);
  while (v27 != v28)
  {
    if (*(_BYTE *)(v27 + 176))
    {
      _Q1 = *(_OWORD *)(v27 + 104);
      _D3 = *(_QWORD *)(v27 + 112);
      __asm { FMLA            D2, D3, V1.D[1] }
      *(_QWORD *)&_Q1 = *(_QWORD *)(v27 + 128);
      __asm { FMLA            D2, D1, V0.D[1] }
      *(_QWORD *)v26 = _D2;
      v26 += 8;
    }
    v27 += 208;
  }
  v36 = (char *)(v25 + 8 * v5);
  if (v26 != v36)
    a2[66] = v5 + ~((unint64_t)(v36 - v26 - 8) >> 3);
}

void sub_20FBC23C8(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  float64x2_t *v36;
  uint64_t v39;
  char *v40;
  float64x2_t v41;
  float64x2_t v42;
  char v43;

  v4 = a2[66];
  v5 = v4
     + 0x4EC4EC4EC4EC4EC5
     * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1384) - *(_QWORD *)(*(_QWORD *)a1 + 1376)) >> 4);
  if (v4 >= v5)
    goto LABEL_22;
  v6 = a2[65];
  if (v6 >= v5)
  {
    v23 = a2[66];
    v24 = 0x4EC4EC4EC4EC4EC5
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1384) - *(_QWORD *)(*(_QWORD *)a1 + 1376)) >> 4);
    if (v5 <= v4)
      goto LABEL_22;
    goto LABEL_21;
  }
  v7 = 2 * v6;
  if (v7 <= v5)
    v7 = v4
       + 0x4EC4EC4EC4EC4EC5
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1384) - *(_QWORD *)(*(_QWORD *)a1 + 1376)) >> 4);
  a2[65] = v7;
  v8 = a2[64];
  v9 = operator new[]();
  v10 = v9;
  if (v4)
  {
    v11 = 0;
    if (v4 < 4)
      goto LABEL_11;
    if ((unint64_t)(v9 - v8) < 0x20)
      goto LABEL_11;
    v11 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (_OWORD *)(v9 + 16);
    v13 = (__int128 *)(v8 + 16);
    v14 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = *v13;
      *(v12 - 1) = *(v13 - 1);
      *v12 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v4 != v11)
    {
LABEL_11:
      v16 = v4 - v11;
      v17 = 8 * v11;
      v18 = (uint64_t *)(v8 + 8 * v11);
      v19 = (_QWORD *)(v9 + v17);
      do
      {
        v20 = *v18++;
        *v19++ = v20;
        --v16;
      }
      while (v16);
    }
  }
  v21 = (_QWORD *)a2[64];
  if (v21 != a2 && v21 != 0)
    MEMORY[0x212BC6368]();
  a2[64] = v10;
  v23 = a2[66];
  v24 = v5 - v23;
  if (v5 > v23)
LABEL_21:
    bzero((void *)(a2[64] + 8 * v23), 8 * v24);
LABEL_22:
  a2[66] = v5;
  v25 = a2[64];
  v26 = (char *)(v25 + 8 * v4);
  v27 = *(_QWORD *)(*(_QWORD *)a1 + 1376);
  v28 = *(_QWORD *)(*(_QWORD *)a1 + 1384);
  if (v27 == v28)
    goto LABEL_31;
  do
  {
    if (*(_BYTE *)(v27 + 88))
    {
      v36 = *(float64x2_t **)(v27 + 96);
      _Q1 = vmulq_f64(vsubq_f64(v36[3], *(float64x2_t *)(v27 + 40)), *(float64x2_t *)(v27 + 72));
      _Q2 = vmulq_f64(vsubq_f64(v36[2], *(float64x2_t *)(v27 + 24)), *(float64x2_t *)(v27 + 56));
      v41 = _Q2;
      v42 = _Q1;
      v43 = 1;
      v39 = *(_QWORD *)(v27 + 184);
      if (!v39)
        goto LABEL_24;
      (*(void (**)(uint64_t, float64x2_t *))(*(_QWORD *)v39 + 24))(v39, &v41);
      if (v43)
      {
        _Q2.f64[1] = v41.f64[1];
        _Q1.f64[1] = v42.f64[1];
LABEL_24:
        _D3 = _Q2.f64[1];
        __asm { FMLA            D0, D3, V2.D[1] }
        _D2 = _Q1.f64[1];
        __asm { FMLA            D0, D2, V1.D[1] }
        *(_QWORD *)v26 = _D0;
        v26 += 8;
      }
    }
    v27 += 208;
  }
  while (v27 != v28);
  v25 = a2[64];
  v5 = a2[66];
LABEL_31:
  v40 = (char *)(v25 + 8 * v5);
  if (v26 != v40)
    a2[66] = v5 + ~((unint64_t)(v40 - v26 - 8) >> 3);
}

void sub_20FBC2620(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double *v26;
  uint64_t v27;
  uint64_t v28;
  double *v35;

  v4 = a2[66];
  v5 = v4
     + 0x2E8BA2E8BA2E8BA3
     * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1408) - *(_QWORD *)(*(_QWORD *)a1 + 1400)) >> 4);
  if (v4 >= v5)
    goto LABEL_22;
  v6 = a2[65];
  if (v6 >= v5)
  {
    v23 = a2[66];
    v24 = 0x2E8BA2E8BA2E8BA3
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1408) - *(_QWORD *)(*(_QWORD *)a1 + 1400)) >> 4);
    if (v5 <= v4)
      goto LABEL_22;
LABEL_21:
    bzero((void *)(a2[64] + 8 * v23), 8 * v24);
    goto LABEL_22;
  }
  v7 = 2 * v6;
  if (v7 <= v5)
    v7 = v4
       + 0x2E8BA2E8BA2E8BA3
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1408) - *(_QWORD *)(*(_QWORD *)a1 + 1400)) >> 4);
  a2[65] = v7;
  v8 = a2[64];
  v9 = operator new[]();
  v10 = v9;
  if (v4)
  {
    v11 = 0;
    if (v4 < 4)
      goto LABEL_11;
    if ((unint64_t)(v9 - v8) < 0x20)
      goto LABEL_11;
    v11 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (_OWORD *)(v9 + 16);
    v13 = (__int128 *)(v8 + 16);
    v14 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = *v13;
      *(v12 - 1) = *(v13 - 1);
      *v12 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v4 != v11)
    {
LABEL_11:
      v16 = v4 - v11;
      v17 = 8 * v11;
      v18 = (uint64_t *)(v8 + 8 * v11);
      v19 = (_QWORD *)(v9 + v17);
      do
      {
        v20 = *v18++;
        *v19++ = v20;
        --v16;
      }
      while (v16);
    }
  }
  v21 = (_QWORD *)a2[64];
  if (v21 != a2 && v21 != 0)
    MEMORY[0x212BC6368]();
  a2[64] = v10;
  v23 = a2[66];
  v24 = v5 - v23;
  if (v5 > v23)
    goto LABEL_21;
LABEL_22:
  a2[66] = v5;
  v25 = a2[64];
  v26 = (double *)(v25 + 8 * v4);
  v27 = *(_QWORD *)(*(_QWORD *)a1 + 1400);
  v28 = *(_QWORD *)(*(_QWORD *)a1 + 1408);
  while (v27 != v28)
  {
    if (*(_BYTE *)(v27 + 144))
    {
      _Q1 = *(_OWORD *)(v27 + 88);
      _D3 = *(_QWORD *)(v27 + 96);
      __asm { FMLA            D2, D3, V1.D[1] }
      *v26++ = _D2 + *(double *)(v27 + 104) * *(double *)(v27 + 104);
    }
    v27 += 176;
  }
  v35 = (double *)(v25 + 8 * v5);
  if (v26 != v35)
    a2[66] = v5 + ~((unint64_t)((char *)v35 - (char *)v26 - 8) >> 3);
}

void sub_20FBC2800(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double *v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  double v37;
  double v38;
  double v39;
  double cosval;
  double v41;
  __double2 v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  float64x2_t v64;
  double v65;
  float64x2_t v66;
  double v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  double v71;
  float64x2_t v72;
  uint64_t v73;
  double *v77;
  float64x2_t v78;
  double v79;
  char v80;
  float64x2_t v81;
  float64_t v82;
  float64x2_t v83;
  double v84;
  float64x2_t v85;
  double v86;
  float64x2_t v87;
  double v88;

  v4 = a2[66];
  v5 = v4
     + 0x2E8BA2E8BA2E8BA3
     * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1408) - *(_QWORD *)(*(_QWORD *)a1 + 1400)) >> 4);
  if (v4 >= v5)
    goto LABEL_22;
  v6 = a2[65];
  if (v6 >= v5)
  {
    v23 = a2[66];
    v24 = 0x2E8BA2E8BA2E8BA3
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1408) - *(_QWORD *)(*(_QWORD *)a1 + 1400)) >> 4);
    if (v5 <= v4)
      goto LABEL_22;
    goto LABEL_21;
  }
  v7 = 2 * v6;
  if (v7 <= v5)
    v7 = v4
       + 0x2E8BA2E8BA2E8BA3
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1408) - *(_QWORD *)(*(_QWORD *)a1 + 1400)) >> 4);
  a2[65] = v7;
  v8 = a2[64];
  v9 = operator new[]();
  v10 = v9;
  if (v4)
  {
    v11 = 0;
    if (v4 < 4)
      goto LABEL_11;
    if ((unint64_t)(v9 - v8) < 0x20)
      goto LABEL_11;
    v11 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (_OWORD *)(v9 + 16);
    v13 = (__int128 *)(v8 + 16);
    v14 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = *v13;
      *(v12 - 1) = *(v13 - 1);
      *v12 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v4 != v11)
    {
LABEL_11:
      v16 = v4 - v11;
      v17 = 8 * v11;
      v18 = (uint64_t *)(v8 + 8 * v11);
      v19 = (_QWORD *)(v9 + v17);
      do
      {
        v20 = *v18++;
        *v19++ = v20;
        --v16;
      }
      while (v16);
    }
  }
  v21 = (_QWORD *)a2[64];
  if (v21 != a2 && v21 != 0)
    MEMORY[0x212BC6368]();
  a2[64] = v10;
  v23 = a2[66];
  v24 = v5 - v23;
  if (v5 > v23)
LABEL_21:
    bzero((void *)(a2[64] + 8 * v23), 8 * v24);
LABEL_22:
  a2[66] = v5;
  v25 = a2[64];
  v26 = (double *)(v25 + 8 * v4);
  v27 = *(_QWORD *)(*(_QWORD *)a1 + 1400);
  v28 = *(_QWORD *)(*(_QWORD *)a1 + 1408);
  if (v27 == v28)
    goto LABEL_35;
  do
  {
    if (*(_BYTE *)(v27 + 72))
    {
      v30 = *(_QWORD *)(v27 + 80);
      _Q1 = *(_OWORD *)(v27 + 24);
      _D3 = *(_QWORD *)(v27 + 32);
      __asm { FMLA            D2, D3, V1.D[1] }
      v37 = _D2 + *(double *)(v27 + 40) * *(double *)(v27 + 40);
      if (v37 >= 0.0000002635)
      {
        v41 = sqrt(v37);
        v42 = __sincos_stret(v41);
        cosval = v42.__cosval;
        v39 = v42.__sinval / v41;
        v38 = 1.0 / v37 * (1.0 - v42.__cosval);
      }
      else
      {
        v38 = 0.5 - v37 * (v37 / -720.0 + 0.0416666667);
        v39 = 1.0 - v37 * (0.166666667 - v37 * (v37 / -5040.0 + 0.00833333333));
        cosval = 1.0 - v37 * v38;
      }
      v43 = *(double *)(v27 + 24);
      v44 = *(double *)(v27 + 32);
      v45 = v38 * v43;
      v46 = v38 * v44;
      v47 = *(double *)(v27 + 40);
      v48 = cosval + v43 * (v38 * v43);
      v49 = cosval + v44 * (v38 * v44);
      v50 = cosval + v47 * (v38 * v47);
      v51 = v38 * v43 * v44;
      v52 = v45 * v47;
      v53 = v46 * v47;
      v54 = v39 * v43;
      v55 = v39 * v44;
      v56 = v39 * v47;
      v57 = v51 - v56;
      v58 = v55 + v52;
      v59 = v51 + v56;
      v60 = v53 - v54;
      v61 = v52 - v55;
      v62 = v54 + v53;
      v63 = *(double *)(v30 + 48);
      v64 = *(float64x2_t *)(v30 + 32);
      v65 = *(double *)(v30 + 72);
      v66 = *(float64x2_t *)(v30 + 56);
      v67 = *(double *)(v30 + 96);
      v68 = *(float64x2_t *)(v30 + 80);
      v84 = v63 * v48 + v65 * v57 + v67 * v58;
      v83 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v64, v48), v66, v57), v68, v58);
      v86 = v63 * v59 + v65 * v49 + v67 * v60;
      v85 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v64, v59), v66, v49), v68, v60);
      v88 = v63 * v61 + v65 * v62 + v67 * v50;
      v87 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v64, v61), v66, v62), v68, v50);
      v81 = 0uLL;
      v82 = 0.0;
      sub_20E9733B8(&v83, v81.f64);
      v79 = v82;
      v69.f64[1] = v81.f64[1];
      v78 = v81;
      v69.f64[0] = v82;
      v70.f64[0] = *(float64_t *)(v27 + 64);
      *(_QWORD *)&v71 = *(_OWORD *)&vmulq_f64(v69, v70);
      v72 = vmulq_f64(v81, *(float64x2_t *)(v27 + 48));
      v78 = v72;
      v79 = v71;
      v80 = 1;
      v73 = *(_QWORD *)(v27 + 152);
      if (!v73)
      {
        v72.f64[1] = *(double *)vextq_s8((int8x16_t)v72, (int8x16_t)v72, 8uLL).i64;
        v29 = vmulq_f64(v72, v72).f64[0] + v72.f64[1] * v72.f64[1] + v71 * v71;
LABEL_25:
        *v26++ = v29;
        goto LABEL_26;
      }
      (*(void (**)(uint64_t, float64x2_t *))(*(_QWORD *)v73 + 24))(v73, &v78);
      if (v80)
      {
        _V1.D[1] = v78.f64[1];
        _D3 = v78.f64[1];
        __asm { FMLA            D2, D3, V1.D[1] }
        v29 = _D2 + v79 * v79;
        goto LABEL_25;
      }
    }
LABEL_26:
    v27 += 176;
  }
  while (v27 != v28);
  v25 = a2[64];
  v5 = a2[66];
LABEL_35:
  v77 = (double *)(v25 + 8 * v5);
  if (v26 != v77)
    a2[66] = v5 + ~((unint64_t)((char *)v77 - (char *)v26 - 8) >> 3);
}

void sub_20FBC2C3C(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double *v26;
  uint64_t v27;
  uint64_t v28;
  double *v35;

  v4 = a2[66];
  v5 = v4
     + 0x2E8BA2E8BA2E8BA3
     * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1432) - *(_QWORD *)(*(_QWORD *)a1 + 1424)) >> 4);
  if (v4 >= v5)
    goto LABEL_22;
  v6 = a2[65];
  if (v6 >= v5)
  {
    v23 = a2[66];
    v24 = 0x2E8BA2E8BA2E8BA3
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1432) - *(_QWORD *)(*(_QWORD *)a1 + 1424)) >> 4);
    if (v5 <= v4)
      goto LABEL_22;
LABEL_21:
    bzero((void *)(a2[64] + 8 * v23), 8 * v24);
    goto LABEL_22;
  }
  v7 = 2 * v6;
  if (v7 <= v5)
    v7 = v4
       + 0x2E8BA2E8BA2E8BA3
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1432) - *(_QWORD *)(*(_QWORD *)a1 + 1424)) >> 4);
  a2[65] = v7;
  v8 = a2[64];
  v9 = operator new[]();
  v10 = v9;
  if (v4)
  {
    v11 = 0;
    if (v4 < 4)
      goto LABEL_11;
    if ((unint64_t)(v9 - v8) < 0x20)
      goto LABEL_11;
    v11 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (_OWORD *)(v9 + 16);
    v13 = (__int128 *)(v8 + 16);
    v14 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = *v13;
      *(v12 - 1) = *(v13 - 1);
      *v12 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v4 != v11)
    {
LABEL_11:
      v16 = v4 - v11;
      v17 = 8 * v11;
      v18 = (uint64_t *)(v8 + 8 * v11);
      v19 = (_QWORD *)(v9 + v17);
      do
      {
        v20 = *v18++;
        *v19++ = v20;
        --v16;
      }
      while (v16);
    }
  }
  v21 = (_QWORD *)a2[64];
  if (v21 != a2 && v21 != 0)
    MEMORY[0x212BC6368]();
  a2[64] = v10;
  v23 = a2[66];
  v24 = v5 - v23;
  if (v5 > v23)
    goto LABEL_21;
LABEL_22:
  a2[66] = v5;
  v25 = a2[64];
  v26 = (double *)(v25 + 8 * v4);
  v27 = *(_QWORD *)(*(_QWORD *)a1 + 1424);
  v28 = *(_QWORD *)(*(_QWORD *)a1 + 1432);
  while (v27 != v28)
  {
    if (*(_BYTE *)(v27 + 144))
    {
      _Q1 = *(_OWORD *)(v27 + 88);
      _D3 = *(_QWORD *)(v27 + 96);
      __asm { FMLA            D2, D3, V1.D[1] }
      *v26++ = _D2 + *(double *)(v27 + 104) * *(double *)(v27 + 104);
    }
    v27 += 176;
  }
  v35 = (double *)(v25 + 8 * v5);
  if (v26 != v35)
    a2[66] = v5 + ~((unint64_t)((char *)v35 - (char *)v26 - 8) >> 3);
}

void sub_20FBC2E1C(uint64_t a1, _QWORD *a2, float64x2_t a3, double a4, float64x2_t _Q2)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  float64x2_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  float64x2_t *v15;
  float64x2_t *v16;
  unint64_t v17;
  float64x2_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double *v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  float64x2_t *v33;
  float64x2_t v34;
  float64x2_t v35;
  uint64_t v36;
  double *v42;
  float64x2_t v43;
  double v44;
  char v45;

  v7 = a2[66];
  v8 = v7
     + 0x2E8BA2E8BA2E8BA3
     * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1432) - *(_QWORD *)(*(_QWORD *)a1 + 1424)) >> 4);
  if (v7 >= v8)
    goto LABEL_22;
  v9 = a2[65];
  if (v9 >= v8)
  {
    v26 = a2[66];
    v27 = 0x2E8BA2E8BA2E8BA3
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1432) - *(_QWORD *)(*(_QWORD *)a1 + 1424)) >> 4);
    if (v8 <= v7)
      goto LABEL_22;
    goto LABEL_21;
  }
  v10 = 2 * v9;
  if (v10 <= v8)
    v10 = v7
        + 0x2E8BA2E8BA2E8BA3
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1432) - *(_QWORD *)(*(_QWORD *)a1 + 1424)) >> 4);
  a2[65] = v10;
  v11 = (float64x2_t *)a2[64];
  v12 = operator new[]();
  v13 = v12;
  if (v7)
  {
    v14 = 0;
    if (v7 < 4)
      goto LABEL_11;
    if ((unint64_t)(v12 - (_QWORD)v11) < 0x20)
      goto LABEL_11;
    v14 = v7 & 0xFFFFFFFFFFFFFFFCLL;
    v15 = (float64x2_t *)(v12 + 16);
    v16 = v11 + 1;
    v17 = v7 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      a3 = v16[-1];
      v18 = *v16;
      v15[-1] = a3;
      *v15 = v18;
      v15 += 2;
      v16 += 2;
      v17 -= 4;
    }
    while (v17);
    if (v7 != v14)
    {
LABEL_11:
      v19 = v7 - v14;
      v20 = 8 * v14;
      v21 = (uint64_t *)&v11->f64[v14];
      v22 = (_QWORD *)(v12 + v20);
      do
      {
        v23 = *v21++;
        *v22++ = v23;
        --v19;
      }
      while (v19);
    }
  }
  v24 = (_QWORD *)a2[64];
  if (v24 != a2 && v24 != 0)
    MEMORY[0x212BC6368]();
  a2[64] = v13;
  v26 = a2[66];
  v27 = v8 - v26;
  if (v8 > v26)
LABEL_21:
    bzero((void *)(a2[64] + 8 * v26), 8 * v27);
LABEL_22:
  a2[66] = v8;
  v28 = a2[64];
  v29 = (double *)(v28 + 8 * v7);
  v30 = *(_QWORD *)(*(_QWORD *)a1 + 1424);
  v31 = *(_QWORD *)(*(_QWORD *)a1 + 1432);
  if (v30 == v31)
    goto LABEL_32;
  do
  {
    if (*(_BYTE *)(v30 + 72))
    {
      v33 = *(float64x2_t **)(v30 + 80);
      a3.f64[0] = v33[3].f64[0];
      _Q2.f64[0] = *(float64_t *)(v30 + 40);
      v34 = vsubq_f64(a3, _Q2);
      _Q2.f64[0] = *(float64_t *)(v30 + 64);
      a3 = vmulq_f64(v34, _Q2);
      v35 = vmulq_f64(vsubq_f64(v33[2], *(float64x2_t *)(v30 + 24)), *(float64x2_t *)(v30 + 48));
      v43 = v35;
      v44 = a3.f64[0];
      v45 = 1;
      v36 = *(_QWORD *)(v30 + 152);
      if (!v36)
      {
        _Q2 = (float64x2_t)vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL);
        v35.f64[1] = _Q2.f64[0];
        v32 = vmulq_f64(v35, v35).f64[0] + _Q2.f64[0] * _Q2.f64[0] + a3.f64[0] * a3.f64[0];
LABEL_25:
        *v29++ = v32;
        goto LABEL_26;
      }
      (*(void (**)(uint64_t, float64x2_t *))(*(_QWORD *)v36 + 24))(v36, &v43);
      if (v45)
      {
        _Q1 = v43;
        _Q2 = vmulq_f64(_Q1, _Q1);
        _D3 = v43.f64[1];
        __asm { FMLA            D2, D3, V1.D[1] }
        v32 = _Q2.f64[0] + v44 * v44;
        goto LABEL_25;
      }
    }
LABEL_26:
    v30 += 176;
  }
  while (v30 != v31);
  v28 = a2[64];
  v8 = a2[66];
LABEL_32:
  v42 = (double *)(v28 + 8 * v8);
  if (v29 != v42)
    a2[66] = v8 + ~((unint64_t)((char *)v42 - (char *)v29 - 8) >> 3);
}

void sub_20FBC308C(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v35;

  v4 = a2[66];
  v5 = v4
     - 0x7B425ED097B425EDLL
     * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1456) - *(_QWORD *)(*(_QWORD *)a1 + 1448)) >> 3);
  if (v4 >= v5)
    goto LABEL_22;
  v6 = a2[65];
  if (v6 >= v5)
  {
    v23 = a2[66];
    v24 = 0x84BDA12F684BDA13
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1456) - *(_QWORD *)(*(_QWORD *)a1 + 1448)) >> 3);
    if (v5 <= v4)
      goto LABEL_22;
LABEL_21:
    bzero((void *)(a2[64] + 8 * v23), 8 * v24);
    goto LABEL_22;
  }
  v7 = 2 * v6;
  if (v7 <= v5)
    v7 = v4
       - 0x7B425ED097B425EDLL
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1456) - *(_QWORD *)(*(_QWORD *)a1 + 1448)) >> 3);
  a2[65] = v7;
  v8 = a2[64];
  v9 = operator new[]();
  v10 = v9;
  if (v4)
  {
    v11 = 0;
    if (v4 < 4)
      goto LABEL_11;
    if ((unint64_t)(v9 - v8) < 0x20)
      goto LABEL_11;
    v11 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (_OWORD *)(v9 + 16);
    v13 = (__int128 *)(v8 + 16);
    v14 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = *v13;
      *(v12 - 1) = *(v13 - 1);
      *v12 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v4 != v11)
    {
LABEL_11:
      v16 = v4 - v11;
      v17 = 8 * v11;
      v18 = (uint64_t *)(v8 + 8 * v11);
      v19 = (_QWORD *)(v9 + v17);
      do
      {
        v20 = *v18++;
        *v19++ = v20;
        --v16;
      }
      while (v16);
    }
  }
  v21 = (_QWORD *)a2[64];
  if (v21 != a2 && v21 != 0)
    MEMORY[0x212BC6368]();
  a2[64] = v10;
  v23 = a2[66];
  v24 = v5 - v23;
  if (v5 > v23)
    goto LABEL_21;
LABEL_22:
  a2[66] = v5;
  v25 = a2[64];
  v26 = (char *)(v25 + 8 * v4);
  v27 = *(_QWORD *)(*(_QWORD *)a1 + 1448);
  v28 = *(_QWORD *)(*(_QWORD *)a1 + 1456);
  while (v27 != v28)
  {
    if (*(_BYTE *)(v27 + 184))
    {
      _Q0 = *(_OWORD *)(v27 + 144);
      _D2 = *(_QWORD *)(v27 + 152);
      __asm { FMLA            D1, D2, V0.D[1] }
      *(_QWORD *)v26 = _D1;
      v26 += 8;
    }
    v27 += 216;
  }
  v35 = (char *)(v25 + 8 * v5);
  if (v26 != v35)
    a2[66] = v5 + ~((unint64_t)(v35 - v26 - 8) >> 3);
}

void sub_20FBC3264(uint64_t a1, _QWORD *a2, __n128 _Q0, __n128 _Q1, double _D2, double a6, float64x2_t a7, double a8, double a9, float64x2_t a10)
{
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __n128 *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  __n128 *v20;
  __n128 *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  int v39;
  uint64_t v40;
  char *v41;
  __n128 v42;
  char v43;

  v12 = a2[66];
  v13 = v12
      - 0x7B425ED097B425EDLL
      * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1456) - *(_QWORD *)(*(_QWORD *)a1 + 1448)) >> 3);
  if (v12 >= v13)
    goto LABEL_22;
  v14 = a2[65];
  if (v14 >= v13)
  {
    v30 = a2[66];
    v31 = 0x84BDA12F684BDA13
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1456) - *(_QWORD *)(*(_QWORD *)a1 + 1448)) >> 3);
    if (v13 <= v12)
      goto LABEL_22;
    goto LABEL_21;
  }
  v15 = 2 * v14;
  if (v15 <= v13)
    v15 = v12
        - 0x7B425ED097B425EDLL
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1456) - *(_QWORD *)(*(_QWORD *)a1 + 1448)) >> 3);
  a2[65] = v15;
  v16 = (__n128 *)a2[64];
  v17 = operator new[]();
  v18 = v17;
  if (v12)
  {
    v19 = 0;
    if (v12 < 4)
      goto LABEL_11;
    if ((unint64_t)(v17 - (_QWORD)v16) < 0x20)
      goto LABEL_11;
    v19 = v12 & 0xFFFFFFFFFFFFFFFCLL;
    v20 = (__n128 *)(v17 + 16);
    v21 = v16 + 1;
    v22 = v12 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      _Q0 = v21[-1];
      _Q1 = *v21;
      v20[-1] = _Q0;
      *v20 = _Q1;
      v20 += 2;
      v21 += 2;
      v22 -= 4;
    }
    while (v22);
    if (v12 != v19)
    {
LABEL_11:
      v23 = v12 - v19;
      v24 = 8 * v19;
      v25 = &v16->n128_u64[v19];
      v26 = (unint64_t *)(v17 + v24);
      do
      {
        v27 = *v25++;
        _Q0.n128_u64[0] = v27;
        *v26++ = v27;
        --v23;
      }
      while (v23);
    }
  }
  v28 = (_QWORD *)a2[64];
  if (v28 != a2 && v28 != 0)
    MEMORY[0x212BC6368]();
  a2[64] = v18;
  v30 = a2[66];
  v31 = v13 - v30;
  if (v13 > v30)
LABEL_21:
    bzero((void *)(a2[64] + 8 * v30), 8 * v31);
LABEL_22:
  a2[66] = v13;
  v32 = a2[64];
  v33 = (char *)(v32 + 8 * v12);
  v34 = *(_QWORD *)(*(_QWORD *)a1 + 1448);
  v35 = *(_QWORD *)(*(_QWORD *)a1 + 1456);
  if (v34 != v35)
  {
    do
    {
      v39 = sub_20FC7133C(v34 + 8, (uint64_t *)(v34 + 56), (uint64_t)&v42, _Q0.n128_f64[0], _Q1.n128_f64[0], _D2, a6, a7, a8, a9, a10);
      v43 = v39;
      if (v39)
      {
        v40 = *(_QWORD *)(v34 + 192);
        if (!v40 || ((*(void (**)(uint64_t, __n128 *))(*(_QWORD *)v40 + 24))(v40, &v42), v43))
        {
          _Q1 = v42;
          _D2 = v42.n128_f64[1];
          __asm { FMLA            D0, D2, V1.D[1] }
          *(_QWORD *)v33 = _Q0.n128_u64[0];
          v33 += 8;
        }
      }
      v34 += 216;
    }
    while (v34 != v35);
    v32 = a2[64];
    v13 = a2[66];
  }
  v41 = (char *)(v32 + 8 * v13);
  if (v33 != v41)
    a2[66] = v13 + ~((unint64_t)(v41 - v33 - 8) >> 3);
}

void sub_20FBC348C(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v35;

  v4 = a2[66];
  v5 = v4
     - 0x2C8590B21642C859
     * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1480) - *(_QWORD *)(*(_QWORD *)a1 + 1472)) >> 3);
  if (v4 >= v5)
    goto LABEL_22;
  v6 = a2[65];
  if (v6 >= v5)
  {
    v23 = a2[66];
    v24 = 0xD37A6F4DE9BD37A7
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1480) - *(_QWORD *)(*(_QWORD *)a1 + 1472)) >> 3);
    if (v5 <= v4)
      goto LABEL_22;
LABEL_21:
    bzero((void *)(a2[64] + 8 * v23), 8 * v24);
    goto LABEL_22;
  }
  v7 = 2 * v6;
  if (v7 <= v5)
    v7 = v4
       - 0x2C8590B21642C859
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1480) - *(_QWORD *)(*(_QWORD *)a1 + 1472)) >> 3);
  a2[65] = v7;
  v8 = a2[64];
  v9 = operator new[]();
  v10 = v9;
  if (v4)
  {
    v11 = 0;
    if (v4 < 4)
      goto LABEL_11;
    if ((unint64_t)(v9 - v8) < 0x20)
      goto LABEL_11;
    v11 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (_OWORD *)(v9 + 16);
    v13 = (__int128 *)(v8 + 16);
    v14 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = *v13;
      *(v12 - 1) = *(v13 - 1);
      *v12 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v4 != v11)
    {
LABEL_11:
      v16 = v4 - v11;
      v17 = 8 * v11;
      v18 = (uint64_t *)(v8 + 8 * v11);
      v19 = (_QWORD *)(v9 + v17);
      do
      {
        v20 = *v18++;
        *v19++ = v20;
        --v16;
      }
      while (v16);
    }
  }
  v21 = (_QWORD *)a2[64];
  if (v21 != a2 && v21 != 0)
    MEMORY[0x212BC6368]();
  a2[64] = v10;
  v23 = a2[66];
  v24 = v5 - v23;
  if (v5 > v23)
    goto LABEL_21;
LABEL_22:
  a2[66] = v5;
  v25 = a2[64];
  v26 = (char *)(v25 + 8 * v4);
  v27 = *(_QWORD *)(*(_QWORD *)a1 + 1472);
  v28 = *(_QWORD *)(*(_QWORD *)a1 + 1480);
  while (v27 != v28)
  {
    if (*(_BYTE *)(v27 + 152))
    {
      _Q0 = *(_OWORD *)(v27 + 112);
      _D2 = *(_QWORD *)(v27 + 120);
      __asm { FMLA            D1, D2, V0.D[1] }
      *(_QWORD *)v26 = _D1;
      v26 += 8;
    }
    v27 += 184;
  }
  v35 = (char *)(v25 + 8 * v5);
  if (v26 != v35)
    a2[66] = v5 + ~((unint64_t)(v35 - v26 - 8) >> 3);
}

void sub_20FBC3664(uint64_t a1, _QWORD *a2, __n128 _Q0, __n128 _Q1, double _D2, double a6, double a7, float64x2_t a8, double a9, float64x2_t a10)
{
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __n128 *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  __n128 *v20;
  __n128 *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  int v39;
  uint64_t v40;
  char *v41;
  __n128 v42;
  char v43;

  v12 = a2[66];
  v13 = v12
      - 0x2C8590B21642C859
      * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1480) - *(_QWORD *)(*(_QWORD *)a1 + 1472)) >> 3);
  if (v12 >= v13)
    goto LABEL_22;
  v14 = a2[65];
  if (v14 >= v13)
  {
    v30 = a2[66];
    v31 = 0xD37A6F4DE9BD37A7
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1480) - *(_QWORD *)(*(_QWORD *)a1 + 1472)) >> 3);
    if (v13 <= v12)
      goto LABEL_22;
    goto LABEL_21;
  }
  v15 = 2 * v14;
  if (v15 <= v13)
    v15 = v12
        - 0x2C8590B21642C859
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1480) - *(_QWORD *)(*(_QWORD *)a1 + 1472)) >> 3);
  a2[65] = v15;
  v16 = (__n128 *)a2[64];
  v17 = operator new[]();
  v18 = v17;
  if (v12)
  {
    v19 = 0;
    if (v12 < 4)
      goto LABEL_11;
    if ((unint64_t)(v17 - (_QWORD)v16) < 0x20)
      goto LABEL_11;
    v19 = v12 & 0xFFFFFFFFFFFFFFFCLL;
    v20 = (__n128 *)(v17 + 16);
    v21 = v16 + 1;
    v22 = v12 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      _Q0 = v21[-1];
      _Q1 = *v21;
      v20[-1] = _Q0;
      *v20 = _Q1;
      v20 += 2;
      v21 += 2;
      v22 -= 4;
    }
    while (v22);
    if (v12 != v19)
    {
LABEL_11:
      v23 = v12 - v19;
      v24 = 8 * v19;
      v25 = &v16->n128_u64[v19];
      v26 = (unint64_t *)(v17 + v24);
      do
      {
        v27 = *v25++;
        _Q0.n128_u64[0] = v27;
        *v26++ = v27;
        --v23;
      }
      while (v23);
    }
  }
  v28 = (_QWORD *)a2[64];
  if (v28 != a2 && v28 != 0)
    MEMORY[0x212BC6368]();
  a2[64] = v18;
  v30 = a2[66];
  v31 = v13 - v30;
  if (v13 > v30)
LABEL_21:
    bzero((void *)(a2[64] + 8 * v30), 8 * v31);
LABEL_22:
  a2[66] = v13;
  v32 = a2[64];
  v33 = (char *)(v32 + 8 * v12);
  v34 = *(_QWORD *)(*(_QWORD *)a1 + 1472);
  v35 = *(_QWORD *)(*(_QWORD *)a1 + 1480);
  if (v34 != v35)
  {
    do
    {
      v39 = sub_20FC77D28(v34 + 8, (uint64_t *)(v34 + 64), (uint64_t)&v42, _Q0.n128_f64[0], _Q1.n128_f64[0], _D2, a6, a7, a8, a9, a10);
      v43 = v39;
      if (v39)
      {
        v40 = *(_QWORD *)(v34 + 160);
        if (!v40 || ((*(void (**)(uint64_t, __n128 *))(*(_QWORD *)v40 + 24))(v40, &v42), v43))
        {
          _Q1 = v42;
          _D2 = v42.n128_f64[1];
          __asm { FMLA            D0, D2, V1.D[1] }
          *(_QWORD *)v33 = _Q0.n128_u64[0];
          v33 += 8;
        }
      }
      v34 += 184;
    }
    while (v34 != v35);
    v32 = a2[64];
    v13 = a2[66];
  }
  v41 = (char *)(v32 + 8 * v13);
  if (v33 != v41)
    a2[66] = v13 + ~((unint64_t)(v41 - v33 - 8) >> 3);
}

void sub_20FBC388C(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double *v26;
  uint64_t v27;
  uint64_t v28;
  double *v29;

  v4 = a2[66];
  v5 = v4
     + 0x4EC4EC4EC4EC4EC5
     * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1504) - *(_QWORD *)(*(_QWORD *)a1 + 1496)) >> 4);
  if (v4 >= v5)
    goto LABEL_22;
  v6 = a2[65];
  if (v6 >= v5)
  {
    v23 = a2[66];
    v24 = 0x4EC4EC4EC4EC4EC5
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1504) - *(_QWORD *)(*(_QWORD *)a1 + 1496)) >> 4);
    if (v5 <= v4)
      goto LABEL_22;
LABEL_21:
    bzero((void *)(a2[64] + 8 * v23), 8 * v24);
    goto LABEL_22;
  }
  v7 = 2 * v6;
  if (v7 <= v5)
    v7 = v4
       + 0x4EC4EC4EC4EC4EC5
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1504) - *(_QWORD *)(*(_QWORD *)a1 + 1496)) >> 4);
  a2[65] = v7;
  v8 = a2[64];
  v9 = operator new[]();
  v10 = v9;
  if (v4)
  {
    v11 = 0;
    if (v4 < 4)
      goto LABEL_11;
    if ((unint64_t)(v9 - v8) < 0x20)
      goto LABEL_11;
    v11 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (_OWORD *)(v9 + 16);
    v13 = (__int128 *)(v8 + 16);
    v14 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = *v13;
      *(v12 - 1) = *(v13 - 1);
      *v12 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v4 != v11)
    {
LABEL_11:
      v16 = v4 - v11;
      v17 = 8 * v11;
      v18 = (uint64_t *)(v8 + 8 * v11);
      v19 = (_QWORD *)(v9 + v17);
      do
      {
        v20 = *v18++;
        *v19++ = v20;
        --v16;
      }
      while (v16);
    }
  }
  v21 = (_QWORD *)a2[64];
  if (v21 != a2 && v21 != 0)
    MEMORY[0x212BC6368]();
  a2[64] = v10;
  v23 = a2[66];
  v24 = v5 - v23;
  if (v5 > v23)
    goto LABEL_21;
LABEL_22:
  a2[66] = v5;
  v25 = a2[64];
  v26 = (double *)(v25 + 8 * v4);
  v27 = *(_QWORD *)(*(_QWORD *)a1 + 1496);
  v28 = *(_QWORD *)(*(_QWORD *)a1 + 1504);
  while (v27 != v28)
  {
    if (*(_BYTE *)(v27 + 176))
      *v26++ = *(double *)(v27 + 152) * *(double *)(v27 + 152);
    v27 += 208;
  }
  v29 = (double *)(v25 + 8 * v5);
  if (v26 != v29)
    a2[66] = v5 + ~((unint64_t)((char *)v29 - (char *)v26 - 8) >> 3);
}

void sub_20FBC3A5C(uint64_t a1, _QWORD *a2, __n128 a3, __n128 a4, double a5, double a6, float64x2_t a7, double a8, double a9, float64x2_t a10)
{
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __n128 *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  __n128 *v20;
  __n128 *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  double *v38;
  double v39[2];
  char v40;

  v12 = a2[66];
  v13 = v12
      + 0x4EC4EC4EC4EC4EC5
      * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1504) - *(_QWORD *)(*(_QWORD *)a1 + 1496)) >> 4);
  if (v12 >= v13)
    goto LABEL_22;
  v14 = a2[65];
  if (v14 >= v13)
  {
    v30 = a2[66];
    v31 = 0x4EC4EC4EC4EC4EC5
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1504) - *(_QWORD *)(*(_QWORD *)a1 + 1496)) >> 4);
    if (v13 <= v12)
      goto LABEL_22;
    goto LABEL_21;
  }
  v15 = 2 * v14;
  if (v15 <= v13)
    v15 = v12
        + 0x4EC4EC4EC4EC4EC5
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1504) - *(_QWORD *)(*(_QWORD *)a1 + 1496)) >> 4);
  a2[65] = v15;
  v16 = (__n128 *)a2[64];
  v17 = operator new[]();
  v18 = v17;
  if (v12)
  {
    v19 = 0;
    if (v12 < 4)
      goto LABEL_11;
    if ((unint64_t)(v17 - (_QWORD)v16) < 0x20)
      goto LABEL_11;
    v19 = v12 & 0xFFFFFFFFFFFFFFFCLL;
    v20 = (__n128 *)(v17 + 16);
    v21 = v16 + 1;
    v22 = v12 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      a3 = v21[-1];
      a4 = *v21;
      v20[-1] = a3;
      *v20 = a4;
      v20 += 2;
      v21 += 2;
      v22 -= 4;
    }
    while (v22);
    if (v12 != v19)
    {
LABEL_11:
      v23 = v12 - v19;
      v24 = 8 * v19;
      v25 = &v16->n128_u64[v19];
      v26 = (unint64_t *)(v17 + v24);
      do
      {
        v27 = *v25++;
        a3.n128_u64[0] = v27;
        *v26++ = v27;
        --v23;
      }
      while (v23);
    }
  }
  v28 = (_QWORD *)a2[64];
  if (v28 != a2 && v28 != 0)
    MEMORY[0x212BC6368]();
  a2[64] = v18;
  v30 = a2[66];
  v31 = v13 - v30;
  if (v13 > v30)
LABEL_21:
    bzero((void *)(a2[64] + 8 * v30), 8 * v31);
LABEL_22:
  a2[66] = v13;
  v32 = a2[64];
  v33 = (double *)(v32 + 8 * v12);
  v34 = *(_QWORD *)(*(_QWORD *)a1 + 1496);
  v35 = *(_QWORD *)(*(_QWORD *)a1 + 1504);
  if (v34 != v35)
  {
    do
    {
      v36 = sub_20FC7D7A0(v34 + 8, (uint64_t *)(v34 + 64), v39, a3.n128_f64[0], a4.n128_f64[0], a5, a6, a7, a8, a9, a10);
      v40 = v36;
      if (v36)
      {
        v37 = *(_QWORD *)(v34 + 184);
        if (!v37 || ((*(void (**)(uint64_t, double *))(*(_QWORD *)v37 + 24))(v37, v39), v40))
        {
          a3.n128_f64[0] = v39[0] * v39[0];
          *v33++ = v39[0] * v39[0];
        }
      }
      v34 += 208;
    }
    while (v34 != v35);
    v32 = a2[64];
    v13 = a2[66];
  }
  v38 = (double *)(v32 + 8 * v13);
  if (v33 != v38)
    a2[66] = v13 + ~((unint64_t)((char *)v38 - (char *)v33 - 8) >> 3);
}

void sub_20FBC3C7C(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v35;

  v4 = a2[66];
  v5 = v4
     - 0x2C8590B21642C859
     * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1528) - *(_QWORD *)(*(_QWORD *)a1 + 1520)) >> 3);
  if (v4 >= v5)
    goto LABEL_22;
  v6 = a2[65];
  if (v6 >= v5)
  {
    v23 = a2[66];
    v24 = 0xD37A6F4DE9BD37A7
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1528) - *(_QWORD *)(*(_QWORD *)a1 + 1520)) >> 3);
    if (v5 <= v4)
      goto LABEL_22;
LABEL_21:
    bzero((void *)(a2[64] + 8 * v23), 8 * v24);
    goto LABEL_22;
  }
  v7 = 2 * v6;
  if (v7 <= v5)
    v7 = v4
       - 0x2C8590B21642C859
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1528) - *(_QWORD *)(*(_QWORD *)a1 + 1520)) >> 3);
  a2[65] = v7;
  v8 = a2[64];
  v9 = operator new[]();
  v10 = v9;
  if (v4)
  {
    v11 = 0;
    if (v4 < 4)
      goto LABEL_11;
    if ((unint64_t)(v9 - v8) < 0x20)
      goto LABEL_11;
    v11 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (_OWORD *)(v9 + 16);
    v13 = (__int128 *)(v8 + 16);
    v14 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = *v13;
      *(v12 - 1) = *(v13 - 1);
      *v12 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v4 != v11)
    {
LABEL_11:
      v16 = v4 - v11;
      v17 = 8 * v11;
      v18 = (uint64_t *)(v8 + 8 * v11);
      v19 = (_QWORD *)(v9 + v17);
      do
      {
        v20 = *v18++;
        *v19++ = v20;
        --v16;
      }
      while (v16);
    }
  }
  v21 = (_QWORD *)a2[64];
  if (v21 != a2 && v21 != 0)
    MEMORY[0x212BC6368]();
  a2[64] = v10;
  v23 = a2[66];
  v24 = v5 - v23;
  if (v5 > v23)
    goto LABEL_21;
LABEL_22:
  a2[66] = v5;
  v25 = a2[64];
  v26 = (char *)(v25 + 8 * v4);
  v27 = *(_QWORD *)(*(_QWORD *)a1 + 1520);
  v28 = *(_QWORD *)(*(_QWORD *)a1 + 1528);
  while (v27 != v28)
  {
    if (*(_BYTE *)(v27 + 152))
    {
      _Q0 = *(_OWORD *)(v27 + 112);
      _D2 = *(_QWORD *)(v27 + 120);
      __asm { FMLA            D1, D2, V0.D[1] }
      *(_QWORD *)v26 = _D1;
      v26 += 8;
    }
    v27 += 184;
  }
  v35 = (char *)(v25 + 8 * v5);
  if (v26 != v35)
    a2[66] = v5 + ~((unint64_t)(v35 - v26 - 8) >> 3);
}

void sub_20FBC3E54(uint64_t a1, _QWORD *a2, __n128 _Q0, __n128 _Q1, double _D2, double a6, float64x2_t a7, double a8, double a9, float64x2_t a10)
{
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __n128 *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  __n128 *v20;
  __n128 *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  int v39;
  uint64_t v40;
  char *v41;
  __n128 v42;
  char v43;

  v12 = a2[66];
  v13 = v12
      - 0x2C8590B21642C859
      * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1528) - *(_QWORD *)(*(_QWORD *)a1 + 1520)) >> 3);
  if (v12 >= v13)
    goto LABEL_22;
  v14 = a2[65];
  if (v14 >= v13)
  {
    v30 = a2[66];
    v31 = 0xD37A6F4DE9BD37A7
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1528) - *(_QWORD *)(*(_QWORD *)a1 + 1520)) >> 3);
    if (v13 <= v12)
      goto LABEL_22;
    goto LABEL_21;
  }
  v15 = 2 * v14;
  if (v15 <= v13)
    v15 = v12
        - 0x2C8590B21642C859
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 1528) - *(_QWORD *)(*(_QWORD *)a1 + 1520)) >> 3);
  a2[65] = v15;
  v16 = (__n128 *)a2[64];
  v17 = operator new[]();
  v18 = v17;
  if (v12)
  {
    v19 = 0;
    if (v12 < 4)
      goto LABEL_11;
    if ((unint64_t)(v17 - (_QWORD)v16) < 0x20)
      goto LABEL_11;
    v19 = v12 & 0xFFFFFFFFFFFFFFFCLL;
    v20 = (__n128 *)(v17 + 16);
    v21 = v16 + 1;
    v22 = v12 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      _Q0 = v21[-1];
      _Q1 = *v21;
      v20[-1] = _Q0;
      *v20 = _Q1;
      v20 += 2;
      v21 += 2;
      v22 -= 4;
    }
    while (v22);
    if (v12 != v19)
    {
LABEL_11:
      v23 = v12 - v19;
      v24 = 8 * v19;
      v25 = &v16->n128_u64[v19];
      v26 = (unint64_t *)(v17 + v24);
      do
      {
        v27 = *v25++;
        _Q0.n128_u64[0] = v27;
        *v26++ = v27;
        --v23;
      }
      while (v23);
    }
  }
  v28 = (_QWORD *)a2[64];
  if (v28 != a2 && v28 != 0)
    MEMORY[0x212BC6368]();
  a2[64] = v18;
  v30 = a2[66];
  v31 = v13 - v30;
  if (v13 > v30)
LABEL_21:
    bzero((void *)(a2[64] + 8 * v30), 8 * v31);
LABEL_22:
  a2[66] = v13;
  v32 = a2[64];
  v33 = (char *)(v32 + 8 * v12);
  v34 = *(_QWORD *)(*(_QWORD *)a1 + 1520);
  v35 = *(_QWORD *)(*(_QWORD *)a1 + 1528);
  if (v34 != v35)
  {
    do
    {
      v39 = sub_20FC7473C(v34 + 8, (uint64_t *)(v34 + 56), (uint64_t)&v42, _Q0.n128_f64[0], _Q1.n128_f64[0], _D2, a6, a7, a8, a9, a10);
      v43 = v39;
      if (v39)
      {
        v40 = *(_QWORD *)(v34 + 160);
        if (!v40 || ((*(void (**)(uint64_t, __n128 *))(*(_QWORD *)v40 + 24))(v40, &v42), v43))
        {
          _Q1 = v42;
          _D2 = v42.n128_f64[1];
          __asm { FMLA            D0, D2, V1.D[1] }
          *(_QWORD *)v33 = _Q0.n128_u64[0];
          v33 += 8;
        }
      }
      v34 += 184;
    }
    while (v34 != v35);
    v32 = a2[64];
    v13 = a2[66];
  }
  v41 = (char *)(v32 + 8 * v13);
  if (v33 != v41)
    a2[66] = v13 + ~((unint64_t)(v41 - v33 - 8) >> 3);
}

int64x2_t **sub_20FBC407C(int64x2_t **result)
{
  int64x2_t **v1;
  int64x2_t *v2;
  int64x2_t *v3;
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _OWORD *v14;
  __int128 *v15;
  unint64_t v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v25;
  unint64_t v26;
  _OWORD *v27;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _OWORD *v39;
  __int128 *v40;
  unint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _OWORD *v59;
  __int128 *v60;
  unint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  _OWORD *v79;
  __int128 *v80;
  unint64_t v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  _OWORD *v99;
  __int128 *v100;
  unint64_t v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  _OWORD *v119;
  __int128 *v120;
  unint64_t v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  _OWORD *v139;
  __int128 *v140;
  unint64_t v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  _OWORD *v159;
  __int128 *v160;
  unint64_t v161;
  __int128 v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t *v165;
  _QWORD *v166;
  uint64_t v167;
  uint64_t *v168;
  uint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  _OWORD *v179;
  __int128 *v180;
  unint64_t v181;
  __int128 v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t *v185;
  _QWORD *v186;
  uint64_t v187;
  uint64_t *v188;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  _OWORD *v199;
  __int128 *v200;
  unint64_t v201;
  __int128 v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t *v205;
  _QWORD *v206;
  uint64_t v207;
  uint64_t *v208;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  _OWORD *v219;
  __int128 *v220;
  unint64_t v221;
  __int128 v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t *v225;
  _QWORD *v226;
  uint64_t v227;
  uint64_t *v228;
  uint64_t v230;
  unint64_t v231;
  uint64_t v232;
  unint64_t v233;
  unint64_t v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  _OWORD *v239;
  __int128 *v240;
  unint64_t v241;
  __int128 v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t *v245;
  _QWORD *v246;
  uint64_t v247;
  uint64_t *v248;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  unint64_t v253;
  unint64_t v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  _OWORD *v259;
  __int128 *v260;
  unint64_t v261;
  __int128 v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t *v265;
  _QWORD *v266;
  uint64_t v267;
  uint64_t *v268;
  uint64_t v270;
  unint64_t v271;
  uint64_t v272;
  unint64_t v273;
  unint64_t v274;
  unint64_t v275;
  uint64_t v276;
  uint64_t v277;
  unint64_t v278;
  _OWORD *v279;
  __int128 *v280;
  unint64_t v281;
  __int128 v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t *v285;
  _QWORD *v286;
  uint64_t v287;
  uint64_t *v288;
  uint64_t v290;
  unint64_t v291;
  uint64_t v292;
  unint64_t v293;
  unint64_t v294;
  unint64_t v295;
  uint64_t v296;
  uint64_t v297;
  unint64_t v298;
  _OWORD *v299;
  __int128 *v300;
  unint64_t v301;
  __int128 v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t *v305;
  _QWORD *v306;
  uint64_t v307;
  uint64_t *v308;
  uint64_t v310;
  unint64_t v311;
  uint64_t v312;
  unint64_t v313;
  unint64_t v314;
  unint64_t v315;
  uint64_t v316;
  uint64_t v317;
  unint64_t v318;
  _OWORD *v319;
  __int128 *v320;
  unint64_t v321;
  __int128 v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t *v325;
  _QWORD *v326;
  uint64_t v327;
  uint64_t *v328;
  uint64_t v330;
  unint64_t v331;
  unint64_t v332;
  unint64_t v333;
  unint64_t v334;
  unint64_t v335;
  uint64_t v336;
  uint64_t v337;
  unint64_t v338;
  _OWORD *v339;
  __int128 *v340;
  unint64_t v341;
  __int128 v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t *v345;
  _QWORD *v346;
  uint64_t v347;
  uint64_t *v348;
  uint64_t v350;
  unint64_t v351;
  unint64_t v352;
  unint64_t v353;
  unint64_t v354;
  unint64_t v355;
  uint64_t v356;
  uint64_t v357;
  unint64_t v358;
  _OWORD *v359;
  __int128 *v360;
  unint64_t v361;
  __int128 v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t *v365;
  _QWORD *v366;
  uint64_t v367;
  uint64_t *v368;
  uint64_t v370;
  unint64_t v371;
  uint64_t v372;
  unint64_t v373;
  unint64_t v374;
  unint64_t v375;
  uint64_t v376;
  uint64_t v377;
  unint64_t v378;
  _OWORD *v379;
  __int128 *v380;
  unint64_t v381;
  __int128 v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t *v385;
  _QWORD *v386;
  uint64_t v387;
  uint64_t *v388;
  int64x2_t *v390;
  uint64_t v391;
  uint64_t v392;
  int64x2_t *v393;
  unint64_t v394;
  unint64_t v395;
  unint64_t v396;
  unint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  unint64_t v401;
  _OWORD *v402;
  __int128 *v403;
  unint64_t v404;
  __int128 v405;
  unint64_t v406;
  uint64_t v407;
  uint64_t *v408;
  _QWORD *v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v413;
  unint64_t v414;
  unint64_t v415;
  unint64_t v416;
  unint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  unint64_t v421;
  _OWORD *v422;
  __int128 *v423;
  unint64_t v424;
  __int128 v425;
  unint64_t v426;
  uint64_t v427;
  uint64_t *v428;
  _QWORD *v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v433;
  unint64_t v434;
  unint64_t v435;
  unint64_t v436;
  unint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  unint64_t v441;
  _OWORD *v442;
  __int128 *v443;
  unint64_t v444;
  __int128 v445;
  unint64_t v446;
  uint64_t v447;
  uint64_t *v448;
  _QWORD *v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v453;
  unint64_t v454;
  unint64_t v455;
  unint64_t v456;
  unint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  unint64_t v461;
  _OWORD *v462;
  __int128 *v463;
  unint64_t v464;
  __int128 v465;
  unint64_t v466;
  uint64_t v467;
  uint64_t *v468;
  _QWORD *v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v473;
  unint64_t v474;
  unint64_t v475;
  unint64_t v476;
  unint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  unint64_t v481;
  _OWORD *v482;
  __int128 *v483;
  unint64_t v484;
  __int128 v485;
  unint64_t v486;
  uint64_t v487;
  uint64_t *v488;
  _QWORD *v489;
  uint64_t v490;
  uint64_t v491;
  unint64_t v493;
  unint64_t v494;
  unint64_t v495;
  unint64_t v496;
  unint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  unint64_t v501;
  _OWORD *v502;
  __int128 *v503;
  unint64_t v504;
  __int128 v505;
  unint64_t v506;
  uint64_t v507;
  uint64_t *v508;
  _QWORD *v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v513;
  unint64_t v514;
  unint64_t v515;
  unint64_t v516;
  unint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  unint64_t v521;
  _OWORD *v522;
  __int128 *v523;
  unint64_t v524;
  __int128 v525;
  unint64_t v526;
  uint64_t v527;
  uint64_t *v528;
  _QWORD *v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v533;
  unint64_t v534;
  unint64_t v535;
  unint64_t v536;
  unint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  unint64_t v541;
  _OWORD *v542;
  __int128 *v543;
  unint64_t v544;
  __int128 v545;
  unint64_t v546;
  uint64_t v547;
  uint64_t *v548;
  _QWORD *v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v553;
  unint64_t v554;
  unint64_t v555;
  unint64_t v556;
  unint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  unint64_t v561;
  _OWORD *v562;
  __int128 *v563;
  unint64_t v564;
  __int128 v565;
  unint64_t v566;
  uint64_t v567;
  uint64_t *v568;
  _QWORD *v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v573;
  unint64_t v574;
  unint64_t v575;
  unint64_t v576;
  unint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  unint64_t v581;
  _OWORD *v582;
  __int128 *v583;
  unint64_t v584;
  __int128 v585;
  unint64_t v586;
  uint64_t v587;
  uint64_t *v588;
  _QWORD *v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v593;
  unint64_t v594;
  unint64_t v595;
  unint64_t v596;
  unint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  unint64_t v601;
  _OWORD *v602;
  __int128 *v603;
  unint64_t v604;
  __int128 v605;
  unint64_t v606;
  uint64_t v607;
  uint64_t *v608;
  _QWORD *v609;
  uint64_t v610;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  int64x2_t *v630;
  unint64_t v631;
  unint64_t v632;
  _OWORD *v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;

  v1 = result;
  v2 = *result;
  if (!(*result)[3].i32[0])
  {
    v2[105].i64[1] = 0;
    v25 = v2[105].u64[0];
    if (v25 > 0x12)
    {
      v27 = (_OWORD *)v2[104].i64[1];
    }
    else
    {
      v26 = 2 * v25;
      if (v26 <= 0x13)
        v26 = 19;
      v2[105].i64[0] = v26;
      v27 = (_OWORD *)operator new[]();
      result = (int64x2_t **)v2[104].i64[1];
      if (result != (int64x2_t **)&v2[72].u64[1] && result != 0)
        result = (int64x2_t **)MEMORY[0x212BC6368]();
      v2[104].i64[1] = (uint64_t)v27;
      v29 = v2[105].i64[1];
      if (v29)
      {
        v2[105].i64[1] = v29 + 19;
        result = (int64x2_t **)memmove((char *)v27 + 152, v27, 8 * v29);
        *v27 = 0u;
        v27[1] = 0u;
        v27[2] = 0u;
        v27[3] = 0u;
        v27[4] = 0u;
        v27[5] = 0u;
        v27[6] = 0u;
        v27[7] = 0u;
        v27[8] = 0u;
        *((_QWORD *)v27 + 18) = 0;
        goto LABEL_555;
      }
    }
    *(_QWORD *)v27 = 0;
    v612 = v2[105].i64[1] + 1;
    v2[105].i64[1] = v612;
    *((_QWORD *)v27 + v612) = 0;
    v613 = v2[105].i64[1] + 1;
    v2[105].i64[1] = v613;
    *((_QWORD *)v27 + v613) = 0;
    v614 = v2[105].i64[1] + 1;
    v2[105].i64[1] = v614;
    *((_QWORD *)v27 + v614) = 0;
    v615 = v2[105].i64[1] + 1;
    v2[105].i64[1] = v615;
    *((_QWORD *)v27 + v615) = 0;
    v616 = v2[105].i64[1] + 1;
    v2[105].i64[1] = v616;
    *((_QWORD *)v27 + v616) = 0;
    v617 = v2[105].i64[1] + 1;
    v2[105].i64[1] = v617;
    *((_QWORD *)v27 + v617) = 0;
    v618 = v2[105].i64[1] + 1;
    v2[105].i64[1] = v618;
    *((_QWORD *)v27 + v618) = 0;
    v619 = v2[105].i64[1] + 1;
    v2[105].i64[1] = v619;
    *((_QWORD *)v27 + v619) = 0;
    v620 = v2[105].i64[1] + 1;
    v2[105].i64[1] = v620;
    *((_QWORD *)v27 + v620) = 0;
    v621 = v2[105].i64[1] + 1;
    v2[105].i64[1] = v621;
    *((_QWORD *)v27 + v621) = 0;
    v622 = v2[105].i64[1] + 1;
    v2[105].i64[1] = v622;
    *((_QWORD *)v27 + v622) = 0;
    v623 = v2[105].i64[1] + 1;
    v2[105].i64[1] = v623;
    *((_QWORD *)v27 + v623) = 0;
    v624 = v2[105].i64[1] + 1;
    v2[105].i64[1] = v624;
    *((_QWORD *)v27 + v624) = 0;
    v625 = v2[105].i64[1] + 1;
    v2[105].i64[1] = v625;
    *((_QWORD *)v27 + v625) = 0;
    v626 = v2[105].i64[1] + 1;
    v2[105].i64[1] = v626;
    *((_QWORD *)v27 + v626) = 0;
    v627 = v2[105].i64[1] + 1;
    v2[105].i64[1] = v627;
    *((_QWORD *)v27 + v627) = 0;
    v628 = v2[105].i64[1] + 1;
    v2[105].i64[1] = v628;
    *((_QWORD *)v27 + v628) = 0;
    v629 = v2[105].i64[1] + 1;
    v2[105].i64[1] = v629;
    *((_QWORD *)v27 + v629) = 0;
    ++v2[105].i64[1];
LABEL_555:
    v630 = *v1;
    v630[72].i64[0] = 0;
    v630[106].i64[0] = 0;
    v630[140].i64[0] = 0;
    v631 = v630[139].u64[1];
    if (v631 > 0xA)
    {
      v633 = (_OWORD *)v630[139].i64[0];
    }
    else
    {
      v632 = 2 * v631;
      if (v632 <= 0xB)
        v632 = 11;
      v630[139].i64[1] = v632;
      v633 = (_OWORD *)operator new[]();
      result = (int64x2_t **)v630[139].i64[0];
      if (result != (int64x2_t **)&v630[107] && result)
        result = (int64x2_t **)MEMORY[0x212BC6368](result, 0x1000C8000313F17);
      v630[139].i64[0] = (uint64_t)v633;
      v634 = v630[140].i64[0];
      if (v634)
      {
        v630[140].i64[0] = v634 + 11;
        result = (int64x2_t **)memmove((char *)v633 + 88, v633, 8 * v634);
        *v633 = 0u;
        v633[1] = 0u;
        v633[2] = 0u;
        v633[3] = 0u;
        v633[4] = 0u;
        *((_QWORD *)v633 + 10) = 0;
LABEL_565:
        (*v1)[106].i64[1] = 0;
        return result;
      }
    }
    *(_QWORD *)v633 = 0;
    v635 = v630[140].i64[0] + 1;
    v630[140].i64[0] = v635;
    *((_QWORD *)v633 + v635) = 0;
    v636 = v630[140].i64[0] + 1;
    v630[140].i64[0] = v636;
    *((_QWORD *)v633 + v636) = 0;
    v637 = v630[140].i64[0] + 1;
    v630[140].i64[0] = v637;
    *((_QWORD *)v633 + v637) = 0;
    v638 = v630[140].i64[0] + 1;
    v630[140].i64[0] = v638;
    *((_QWORD *)v633 + v638) = 0;
    v639 = v630[140].i64[0] + 1;
    v630[140].i64[0] = v639;
    *((_QWORD *)v633 + v639) = 0;
    v640 = v630[140].i64[0] + 1;
    v630[140].i64[0] = v640;
    *((_QWORD *)v633 + v640) = 0;
    v641 = v630[140].i64[0] + 1;
    v630[140].i64[0] = v641;
    *((_QWORD *)v633 + v641) = 0;
    v642 = v630[140].i64[0] + 1;
    v630[140].i64[0] = v642;
    *((_QWORD *)v633 + v642) = 0;
    v643 = v630[140].i64[0] + 1;
    v630[140].i64[0] = v643;
    *((_QWORD *)v633 + v643) = 0;
    v644 = v630[140].i64[0] + 1;
    v630[140].i64[0] = v644;
    *((_QWORD *)v633 + v644) = 0;
    ++v630[140].i64[0];
    goto LABEL_565;
  }
  v3 = result[1];
  v4 = 0xEFBEFBEFBEFBEFBFLL * ((v3[86].i64[1] - v3[86].i64[0]) >> 3);
  v2[72].i64[0] += v4;
  v5 = &v2[72].i64[1];
  v6 = v2[105].u64[1];
  v7 = v6 + 1;
  v8 = v2[105].u64[0];
  if (v6 + 1 <= v8)
  {
    v12 = v2[104].i64[1];
  }
  else
  {
    v9 = 2 * v8;
    if (v9 > v7)
      v7 = v9;
    v2[105].i64[0] = v7;
    v10 = v2[104].i64[1];
    v11 = operator new[]();
    v12 = v11;
    if (v6)
    {
      v13 = 0;
      if (v6 < 4)
        goto LABEL_11;
      if ((unint64_t)(v11 - v10) < 0x20)
        goto LABEL_11;
      v13 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      v14 = (_OWORD *)(v11 + 16);
      v15 = (__int128 *)(v10 + 16);
      v16 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v17 = *v15;
        *(v14 - 1) = *(v15 - 1);
        *v14 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v6 != v13)
      {
LABEL_11:
        v18 = v6 - v13;
        v19 = 8 * v13;
        v20 = (uint64_t *)(v10 + 8 * v13);
        v21 = (_QWORD *)(v11 + v19);
        do
        {
          v22 = *v20++;
          *v21++ = v22;
          --v18;
        }
        while (v18);
      }
    }
    v23 = (uint64_t *)v2[104].i64[1];
    if (v23 != v5 && v23 != 0)
      MEMORY[0x212BC6368]();
    v2[104].i64[1] = v12;
    v6 = v2[105].u64[1];
  }
  *(_QWORD *)(v12 + 8 * v6) = v4;
  v30 = v2[105].i64[1];
  v31 = v30 + 1;
  v2[105].i64[1] = v30 + 1;
  v32 = 0xAF8AF8AF8AF8AF8BLL * ((v3[88].i64[0] - v3[87].i64[1]) >> 3);
  v2[72].i64[0] += v32;
  v33 = v30 + 2;
  v34 = v2[105].u64[0];
  if (v30 + 2 <= v34)
  {
    v37 = v12;
  }
  else
  {
    v35 = 2 * v34;
    if (v35 > v33)
      v33 = v35;
    v2[105].i64[0] = v33;
    v36 = operator new[]();
    v37 = v36;
    if (v30 != -1)
    {
      v38 = 0;
      if (v31 < 4)
        goto LABEL_39;
      if ((unint64_t)(v36 - v12) < 0x20)
        goto LABEL_39;
      v38 = v31 & 0xFFFFFFFFFFFFFFFCLL;
      v39 = (_OWORD *)(v36 + 16);
      v40 = (__int128 *)(v12 + 16);
      v41 = v31 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v42 = *v40;
        *(v39 - 1) = *(v40 - 1);
        *v39 = v42;
        v39 += 2;
        v40 += 2;
        v41 -= 4;
      }
      while (v41);
      if (v31 != v38)
      {
LABEL_39:
        v43 = v30 - v38 + 1;
        v44 = 8 * v38;
        v45 = (uint64_t *)(v12 + 8 * v38);
        v46 = (_QWORD *)(v36 + v44);
        do
        {
          v47 = *v45++;
          *v46++ = v47;
          --v43;
        }
        while (v43);
      }
    }
    v48 = (uint64_t *)v2[104].i64[1];
    if (v48 != v5 && v48 != 0)
      MEMORY[0x212BC6368]();
    v2[104].i64[1] = v37;
    v31 = v2[105].u64[1];
  }
  *(_QWORD *)(v37 + 8 * v31) = v32;
  v50 = v2[105].i64[1];
  v51 = v50 + 1;
  v2[105].i64[1] = v50 + 1;
  v52 = 0xAF8AF8AF8AF8AF8BLL * ((v3[89].i64[1] - v3[89].i64[0]) >> 3);
  v2[72].i64[0] += v52;
  v53 = v50 + 2;
  v54 = v2[105].u64[0];
  if (v50 + 2 <= v54)
  {
    v57 = v37;
  }
  else
  {
    v55 = 2 * v54;
    if (v55 > v53)
      v53 = v55;
    v2[105].i64[0] = v53;
    v56 = operator new[]();
    v57 = v56;
    if (v50 != -1)
    {
      v58 = 0;
      if (v51 < 4)
        goto LABEL_57;
      if ((unint64_t)(v56 - v37) < 0x20)
        goto LABEL_57;
      v58 = v51 & 0xFFFFFFFFFFFFFFFCLL;
      v59 = (_OWORD *)(v56 + 16);
      v60 = (__int128 *)(v37 + 16);
      v61 = v51 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v62 = *v60;
        *(v59 - 1) = *(v60 - 1);
        *v59 = v62;
        v59 += 2;
        v60 += 2;
        v61 -= 4;
      }
      while (v61);
      if (v51 != v58)
      {
LABEL_57:
        v63 = v50 - v58 + 1;
        v64 = 8 * v58;
        v65 = (uint64_t *)(v37 + 8 * v58);
        v66 = (_QWORD *)(v56 + v64);
        do
        {
          v67 = *v65++;
          *v66++ = v67;
          --v63;
        }
        while (v63);
      }
    }
    v68 = (uint64_t *)v2[104].i64[1];
    if (v68 != v5 && v68 != 0)
      MEMORY[0x212BC6368]();
    v2[104].i64[1] = v57;
    v51 = v2[105].u64[1];
  }
  *(_QWORD *)(v57 + 8 * v51) = v52;
  v70 = v2[105].i64[1];
  v71 = v70 + 1;
  v2[105].i64[1] = v70 + 1;
  v72 = 0xAF8AF8AF8AF8AF8BLL * ((v3[91].i64[0] - v3[90].i64[1]) >> 3);
  v2[72].i64[0] += v72;
  v73 = v70 + 2;
  v74 = v2[105].u64[0];
  if (v70 + 2 <= v74)
  {
    v77 = v57;
  }
  else
  {
    v75 = 2 * v74;
    if (v75 > v73)
      v73 = v75;
    v2[105].i64[0] = v73;
    v76 = operator new[]();
    v77 = v76;
    if (v70 != -1)
    {
      v78 = 0;
      if (v71 < 4)
        goto LABEL_75;
      if ((unint64_t)(v76 - v57) < 0x20)
        goto LABEL_75;
      v78 = v71 & 0xFFFFFFFFFFFFFFFCLL;
      v79 = (_OWORD *)(v76 + 16);
      v80 = (__int128 *)(v57 + 16);
      v81 = v71 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v82 = *v80;
        *(v79 - 1) = *(v80 - 1);
        *v79 = v82;
        v79 += 2;
        v80 += 2;
        v81 -= 4;
      }
      while (v81);
      if (v71 != v78)
      {
LABEL_75:
        v83 = v70 - v78 + 1;
        v84 = 8 * v78;
        v85 = (uint64_t *)(v57 + 8 * v78);
        v86 = (_QWORD *)(v76 + v84);
        do
        {
          v87 = *v85++;
          *v86++ = v87;
          --v83;
        }
        while (v83);
      }
    }
    v88 = (uint64_t *)v2[104].i64[1];
    if (v88 != v5 && v88 != 0)
      MEMORY[0x212BC6368]();
    v2[104].i64[1] = v77;
    v71 = v2[105].u64[1];
  }
  *(_QWORD *)(v77 + 8 * v71) = v72;
  v90 = v2[105].i64[1];
  v91 = v90 + 1;
  v2[105].i64[1] = v90 + 1;
  v92 = 0xCCCCCCCCCCCCCCCDLL * ((v3[92].i64[1] - v3[92].i64[0]) >> 5);
  v2[72].i64[0] += v92;
  v93 = v90 + 2;
  v94 = v2[105].u64[0];
  if (v90 + 2 <= v94)
  {
    v97 = v77;
  }
  else
  {
    v95 = 2 * v94;
    if (v95 > v93)
      v93 = v95;
    v2[105].i64[0] = v93;
    v96 = operator new[]();
    v97 = v96;
    if (v90 != -1)
    {
      v98 = 0;
      if (v91 < 4)
        goto LABEL_93;
      if ((unint64_t)(v96 - v77) < 0x20)
        goto LABEL_93;
      v98 = v91 & 0xFFFFFFFFFFFFFFFCLL;
      v99 = (_OWORD *)(v96 + 16);
      v100 = (__int128 *)(v77 + 16);
      v101 = v91 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v102 = *v100;
        *(v99 - 1) = *(v100 - 1);
        *v99 = v102;
        v99 += 2;
        v100 += 2;
        v101 -= 4;
      }
      while (v101);
      if (v91 != v98)
      {
LABEL_93:
        v103 = v90 - v98 + 1;
        v104 = 8 * v98;
        v105 = (uint64_t *)(v77 + 8 * v98);
        v106 = (_QWORD *)(v96 + v104);
        do
        {
          v107 = *v105++;
          *v106++ = v107;
          --v103;
        }
        while (v103);
      }
    }
    v108 = (uint64_t *)v2[104].i64[1];
    if (v108 != v5 && v108 != 0)
      MEMORY[0x212BC6368]();
    v2[104].i64[1] = v97;
    v91 = v2[105].u64[1];
  }
  *(_QWORD *)(v97 + 8 * v91) = v92;
  v110 = v2[105].i64[1];
  v111 = v110 + 1;
  v2[105].i64[1] = v110 + 1;
  v112 = 0x2F028E0D4911E25DLL * ((v3[94].i64[0] - v3[93].i64[1]) >> 4);
  v2[72].i64[0] += v112;
  v113 = v110 + 2;
  v114 = v2[105].u64[0];
  if (v110 + 2 <= v114)
  {
    v117 = v97;
  }
  else
  {
    v115 = 2 * v114;
    if (v115 > v113)
      v113 = v115;
    v2[105].i64[0] = v113;
    v116 = operator new[]();
    v117 = v116;
    if (v110 != -1)
    {
      v118 = 0;
      if (v111 < 4)
        goto LABEL_111;
      if ((unint64_t)(v116 - v97) < 0x20)
        goto LABEL_111;
      v118 = v111 & 0xFFFFFFFFFFFFFFFCLL;
      v119 = (_OWORD *)(v116 + 16);
      v120 = (__int128 *)(v97 + 16);
      v121 = v111 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v122 = *v120;
        *(v119 - 1) = *(v120 - 1);
        *v119 = v122;
        v119 += 2;
        v120 += 2;
        v121 -= 4;
      }
      while (v121);
      if (v111 != v118)
      {
LABEL_111:
        v123 = v110 - v118 + 1;
        v124 = 8 * v118;
        v125 = (uint64_t *)(v97 + 8 * v118);
        v126 = (_QWORD *)(v116 + v124);
        do
        {
          v127 = *v125++;
          *v126++ = v127;
          --v123;
        }
        while (v123);
      }
    }
    v128 = (uint64_t *)v2[104].i64[1];
    if (v128 != v5 && v128 != 0)
      MEMORY[0x212BC6368]();
    v2[104].i64[1] = v117;
    v111 = v2[105].u64[1];
  }
  *(_QWORD *)(v117 + 8 * v111) = v112;
  v130 = v2[105].i64[1];
  v131 = v130 + 1;
  v2[105].i64[1] = v130 + 1;
  v132 = 0x4515E08719B71393 * ((v3[95].i64[1] - v3[95].i64[0]) >> 3);
  v2[72].i64[0] += v132;
  v133 = v130 + 2;
  v134 = v2[105].u64[0];
  if (v130 + 2 <= v134)
  {
    v137 = v117;
  }
  else
  {
    v135 = 2 * v134;
    if (v135 > v133)
      v133 = v135;
    v2[105].i64[0] = v133;
    v136 = operator new[]();
    v137 = v136;
    if (v130 != -1)
    {
      v138 = 0;
      if (v131 < 4)
        goto LABEL_129;
      if ((unint64_t)(v136 - v117) < 0x20)
        goto LABEL_129;
      v138 = v131 & 0xFFFFFFFFFFFFFFFCLL;
      v139 = (_OWORD *)(v136 + 16);
      v140 = (__int128 *)(v117 + 16);
      v141 = v131 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v142 = *v140;
        *(v139 - 1) = *(v140 - 1);
        *v139 = v142;
        v139 += 2;
        v140 += 2;
        v141 -= 4;
      }
      while (v141);
      if (v131 != v138)
      {
LABEL_129:
        v143 = v130 - v138 + 1;
        v144 = 8 * v138;
        v145 = (uint64_t *)(v117 + 8 * v138);
        v146 = (_QWORD *)(v136 + v144);
        do
        {
          v147 = *v145++;
          *v146++ = v147;
          --v143;
        }
        while (v143);
      }
    }
    v148 = (uint64_t *)v2[104].i64[1];
    if (v148 != v5 && v148 != 0)
      MEMORY[0x212BC6368]();
    v2[104].i64[1] = v137;
    v131 = v2[105].u64[1];
  }
  *(_QWORD *)(v137 + 8 * v131) = v132;
  v150 = v2[105].i64[1];
  v151 = v150 + 1;
  v2[105].i64[1] = v150 + 1;
  v152 = 0x8E38E38E38E38E39 * ((v3[97].i64[0] - v3[96].i64[1]) >> 4);
  v2[72].i64[0] += v152;
  v153 = v150 + 2;
  v154 = v2[105].u64[0];
  if (v150 + 2 <= v154)
  {
    v157 = v137;
  }
  else
  {
    v155 = 2 * v154;
    if (v155 > v153)
      v153 = v155;
    v2[105].i64[0] = v153;
    v156 = operator new[]();
    v157 = v156;
    if (v150 != -1)
    {
      v158 = 0;
      if (v151 < 4)
        goto LABEL_147;
      if ((unint64_t)(v156 - v137) < 0x20)
        goto LABEL_147;
      v158 = v151 & 0xFFFFFFFFFFFFFFFCLL;
      v159 = (_OWORD *)(v156 + 16);
      v160 = (__int128 *)(v137 + 16);
      v161 = v151 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v162 = *v160;
        *(v159 - 1) = *(v160 - 1);
        *v159 = v162;
        v159 += 2;
        v160 += 2;
        v161 -= 4;
      }
      while (v161);
      if (v151 != v158)
      {
LABEL_147:
        v163 = v150 - v158 + 1;
        v164 = 8 * v158;
        v165 = (uint64_t *)(v137 + 8 * v158);
        v166 = (_QWORD *)(v156 + v164);
        do
        {
          v167 = *v165++;
          *v166++ = v167;
          --v163;
        }
        while (v163);
      }
    }
    v168 = (uint64_t *)v2[104].i64[1];
    if (v168 != v5 && v168 != 0)
      MEMORY[0x212BC6368]();
    v2[104].i64[1] = v157;
    v151 = v2[105].u64[1];
  }
  *(_QWORD *)(v157 + 8 * v151) = v152;
  v170 = v2[105].i64[1];
  v171 = v170 + 1;
  v2[105].i64[1] = v170 + 1;
  v172 = 0x86BCA1AF286BCA1BLL * ((v3[98].i64[1] - v3[98].i64[0]) >> 3);
  v2[72].i64[0] += v172;
  v173 = v170 + 2;
  v174 = v2[105].u64[0];
  if (v170 + 2 <= v174)
  {
    v177 = v157;
  }
  else
  {
    v175 = 2 * v174;
    if (v175 > v173)
      v173 = v175;
    v2[105].i64[0] = v173;
    v176 = operator new[]();
    v177 = v176;
    if (v170 != -1)
    {
      v178 = 0;
      if (v171 < 4)
        goto LABEL_165;
      if ((unint64_t)(v176 - v157) < 0x20)
        goto LABEL_165;
      v178 = v171 & 0xFFFFFFFFFFFFFFFCLL;
      v179 = (_OWORD *)(v176 + 16);
      v180 = (__int128 *)(v157 + 16);
      v181 = v171 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v182 = *v180;
        *(v179 - 1) = *(v180 - 1);
        *v179 = v182;
        v179 += 2;
        v180 += 2;
        v181 -= 4;
      }
      while (v181);
      if (v171 != v178)
      {
LABEL_165:
        v183 = v170 - v178 + 1;
        v184 = 8 * v178;
        v185 = (uint64_t *)(v157 + 8 * v178);
        v186 = (_QWORD *)(v176 + v184);
        do
        {
          v187 = *v185++;
          *v186++ = v187;
          --v183;
        }
        while (v183);
      }
    }
    v188 = (uint64_t *)v2[104].i64[1];
    if (v188 != v5 && v188 != 0)
      MEMORY[0x212BC6368]();
    v2[104].i64[1] = v177;
    v171 = v2[105].u64[1];
  }
  *(_QWORD *)(v177 + 8 * v171) = v172;
  v190 = v2[105].i64[1];
  v191 = v190 + 1;
  v2[105].i64[1] = v190 + 1;
  v192 = 0x86BCA1AF286BCA1BLL * ((v3[100].i64[0] - v3[99].i64[1]) >> 4);
  v2[72].i64[0] += v192;
  v193 = v190 + 2;
  v194 = v2[105].u64[0];
  if (v190 + 2 <= v194)
  {
    v197 = v177;
  }
  else
  {
    v195 = 2 * v194;
    if (v195 > v193)
      v193 = v195;
    v2[105].i64[0] = v193;
    v196 = operator new[]();
    v197 = v196;
    if (v190 != -1)
    {
      v198 = 0;
      if (v191 < 4)
        goto LABEL_183;
      if ((unint64_t)(v196 - v177) < 0x20)
        goto LABEL_183;
      v198 = v191 & 0xFFFFFFFFFFFFFFFCLL;
      v199 = (_OWORD *)(v196 + 16);
      v200 = (__int128 *)(v177 + 16);
      v201 = v191 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v202 = *v200;
        *(v199 - 1) = *(v200 - 1);
        *v199 = v202;
        v199 += 2;
        v200 += 2;
        v201 -= 4;
      }
      while (v201);
      if (v191 != v198)
      {
LABEL_183:
        v203 = v190 - v198 + 1;
        v204 = 8 * v198;
        v205 = (uint64_t *)(v177 + 8 * v198);
        v206 = (_QWORD *)(v196 + v204);
        do
        {
          v207 = *v205++;
          *v206++ = v207;
          --v203;
        }
        while (v203);
      }
    }
    v208 = (uint64_t *)v2[104].i64[1];
    if (v208 != v5 && v208 != 0)
      MEMORY[0x212BC6368]();
    v2[104].i64[1] = v197;
    v191 = v2[105].u64[1];
  }
  *(_QWORD *)(v197 + 8 * v191) = v192;
  v210 = v2[105].i64[1];
  v211 = v210 + 1;
  v2[105].i64[1] = v210 + 1;
  v212 = 0x4FA4FA4FA4FA4FA5 * ((v3[101].i64[1] - v3[101].i64[0]) >> 3);
  v2[72].i64[0] += v212;
  v213 = v210 + 2;
  v214 = v2[105].u64[0];
  if (v210 + 2 <= v214)
  {
    v217 = v197;
  }
  else
  {
    v215 = 2 * v214;
    if (v215 > v213)
      v213 = v215;
    v2[105].i64[0] = v213;
    v216 = operator new[]();
    v217 = v216;
    if (v210 != -1)
    {
      v218 = 0;
      if (v211 < 4)
        goto LABEL_201;
      if ((unint64_t)(v216 - v197) < 0x20)
        goto LABEL_201;
      v218 = v211 & 0xFFFFFFFFFFFFFFFCLL;
      v219 = (_OWORD *)(v216 + 16);
      v220 = (__int128 *)(v197 + 16);
      v221 = v211 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v222 = *v220;
        *(v219 - 1) = *(v220 - 1);
        *v219 = v222;
        v219 += 2;
        v220 += 2;
        v221 -= 4;
      }
      while (v221);
      if (v211 != v218)
      {
LABEL_201:
        v223 = v210 - v218 + 1;
        v224 = 8 * v218;
        v225 = (uint64_t *)(v197 + 8 * v218);
        v226 = (_QWORD *)(v216 + v224);
        do
        {
          v227 = *v225++;
          *v226++ = v227;
          --v223;
        }
        while (v223);
      }
    }
    v228 = (uint64_t *)v2[104].i64[1];
    if (v228 != v5 && v228 != 0)
      MEMORY[0x212BC6368]();
    v2[104].i64[1] = v217;
    v211 = v2[105].u64[1];
  }
  *(_QWORD *)(v217 + 8 * v211) = v212;
  v230 = v2[105].i64[1];
  v231 = v230 + 1;
  v2[105].i64[1] = v230 + 1;
  v232 = 0x6DB6DB6DB6DB6DB7 * ((v3[103].i64[0] - v3[102].i64[1]) >> 4);
  v2[72].i64[0] += v232;
  v233 = v230 + 2;
  v234 = v2[105].u64[0];
  if (v230 + 2 <= v234)
  {
    v237 = v217;
  }
  else
  {
    v235 = 2 * v234;
    if (v235 > v233)
      v233 = v235;
    v2[105].i64[0] = v233;
    v236 = operator new[]();
    v237 = v236;
    if (v230 != -1)
    {
      v238 = 0;
      if (v231 < 4)
        goto LABEL_219;
      if ((unint64_t)(v236 - v217) < 0x20)
        goto LABEL_219;
      v238 = v231 & 0xFFFFFFFFFFFFFFFCLL;
      v239 = (_OWORD *)(v236 + 16);
      v240 = (__int128 *)(v217 + 16);
      v241 = v231 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v242 = *v240;
        *(v239 - 1) = *(v240 - 1);
        *v239 = v242;
        v239 += 2;
        v240 += 2;
        v241 -= 4;
      }
      while (v241);
      if (v231 != v238)
      {
LABEL_219:
        v243 = v230 - v238 + 1;
        v244 = 8 * v238;
        v245 = (uint64_t *)(v217 + 8 * v238);
        v246 = (_QWORD *)(v236 + v244);
        do
        {
          v247 = *v245++;
          *v246++ = v247;
          --v243;
        }
        while (v243);
      }
    }
    v248 = (uint64_t *)v2[104].i64[1];
    if (v248 != v5 && v248 != 0)
      MEMORY[0x212BC6368]();
    v2[104].i64[1] = v237;
    v231 = v2[105].u64[1];
  }
  *(_QWORD *)(v237 + 8 * v231) = v232;
  v250 = v2[105].i64[1];
  v251 = v250 + 1;
  v2[105].i64[1] = v250 + 1;
  v252 = 0x4EC4EC4EC4EC4EC5 * ((v3[104].i64[1] - v3[104].i64[0]) >> 4);
  v2[72].i64[0] += v252;
  v253 = v250 + 2;
  v254 = v2[105].u64[0];
  if (v250 + 2 <= v254)
  {
    v257 = v237;
  }
  else
  {
    v255 = 2 * v254;
    if (v255 > v253)
      v253 = v255;
    v2[105].i64[0] = v253;
    v256 = operator new[]();
    v257 = v256;
    if (v250 != -1)
    {
      v258 = 0;
      if (v251 < 4)
        goto LABEL_237;
      if ((unint64_t)(v256 - v237) < 0x20)
        goto LABEL_237;
      v258 = v251 & 0xFFFFFFFFFFFFFFFCLL;
      v259 = (_OWORD *)(v256 + 16);
      v260 = (__int128 *)(v237 + 16);
      v261 = v251 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v262 = *v260;
        *(v259 - 1) = *(v260 - 1);
        *v259 = v262;
        v259 += 2;
        v260 += 2;
        v261 -= 4;
      }
      while (v261);
      if (v251 != v258)
      {
LABEL_237:
        v263 = v250 - v258 + 1;
        v264 = 8 * v258;
        v265 = (uint64_t *)(v237 + 8 * v258);
        v266 = (_QWORD *)(v256 + v264);
        do
        {
          v267 = *v265++;
          *v266++ = v267;
          --v263;
        }
        while (v263);
      }
    }
    v268 = (uint64_t *)v2[104].i64[1];
    if (v268 != v5 && v268 != 0)
      MEMORY[0x212BC6368]();
    v2[104].i64[1] = v257;
    v251 = v2[105].u64[1];
  }
  *(_QWORD *)(v257 + 8 * v251) = v252;
  v270 = v2[105].i64[1];
  v271 = v270 + 1;
  v2[105].i64[1] = v270 + 1;
  v272 = 0x4EC4EC4EC4EC4EC5 * ((v3[106].i64[0] - v3[105].i64[1]) >> 4);
  v2[72].i64[0] += v272;
  v273 = v270 + 2;
  v274 = v2[105].u64[0];
  if (v270 + 2 <= v274)
  {
    v277 = v257;
  }
  else
  {
    v275 = 2 * v274;
    if (v275 > v273)
      v273 = v275;
    v2[105].i64[0] = v273;
    v276 = operator new[]();
    v277 = v276;
    if (v270 != -1)
    {
      v278 = 0;
      if (v271 < 4)
        goto LABEL_255;
      if ((unint64_t)(v276 - v257) < 0x20)
        goto LABEL_255;
      v278 = v271 & 0xFFFFFFFFFFFFFFFCLL;
      v279 = (_OWORD *)(v276 + 16);
      v280 = (__int128 *)(v257 + 16);
      v281 = v271 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v282 = *v280;
        *(v279 - 1) = *(v280 - 1);
        *v279 = v282;
        v279 += 2;
        v280 += 2;
        v281 -= 4;
      }
      while (v281);
      if (v271 != v278)
      {
LABEL_255:
        v283 = v270 - v278 + 1;
        v284 = 8 * v278;
        v285 = (uint64_t *)(v257 + 8 * v278);
        v286 = (_QWORD *)(v276 + v284);
        do
        {
          v287 = *v285++;
          *v286++ = v287;
          --v283;
        }
        while (v283);
      }
    }
    v288 = (uint64_t *)v2[104].i64[1];
    if (v288 != v5 && v288 != 0)
      MEMORY[0x212BC6368]();
    v2[104].i64[1] = v277;
    v271 = v2[105].u64[1];
  }
  *(_QWORD *)(v277 + 8 * v271) = v272;
  v290 = v2[105].i64[1];
  v291 = v290 + 1;
  v2[105].i64[1] = v290 + 1;
  v292 = 0x2E8BA2E8BA2E8BA3 * ((v3[107].i64[1] - v3[107].i64[0]) >> 4);
  v2[72].i64[0] += v292;
  v293 = v290 + 2;
  v294 = v2[105].u64[0];
  if (v290 + 2 <= v294)
  {
    v297 = v277;
  }
  else
  {
    v295 = 2 * v294;
    if (v295 > v293)
      v293 = v295;
    v2[105].i64[0] = v293;
    v296 = operator new[]();
    v297 = v296;
    if (v290 != -1)
    {
      v298 = 0;
      if (v291 < 4)
        goto LABEL_273;
      if ((unint64_t)(v296 - v277) < 0x20)
        goto LABEL_273;
      v298 = v291 & 0xFFFFFFFFFFFFFFFCLL;
      v299 = (_OWORD *)(v296 + 16);
      v300 = (__int128 *)(v277 + 16);
      v301 = v291 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v302 = *v300;
        *(v299 - 1) = *(v300 - 1);
        *v299 = v302;
        v299 += 2;
        v300 += 2;
        v301 -= 4;
      }
      while (v301);
      if (v291 != v298)
      {
LABEL_273:
        v303 = v290 - v298 + 1;
        v304 = 8 * v298;
        v305 = (uint64_t *)(v277 + 8 * v298);
        v306 = (_QWORD *)(v296 + v304);
        do
        {
          v307 = *v305++;
          *v306++ = v307;
          --v303;
        }
        while (v303);
      }
    }
    v308 = (uint64_t *)v2[104].i64[1];
    if (v308 != v5 && v308 != 0)
      MEMORY[0x212BC6368]();
    v2[104].i64[1] = v297;
    v291 = v2[105].u64[1];
  }
  *(_QWORD *)(v297 + 8 * v291) = v292;
  v310 = v2[105].i64[1];
  v311 = v310 + 1;
  v2[105].i64[1] = v310 + 1;
  v312 = 0x2E8BA2E8BA2E8BA3 * ((v3[109].i64[0] - v3[108].i64[1]) >> 4);
  v2[72].i64[0] += v312;
  v313 = v310 + 2;
  v314 = v2[105].u64[0];
  if (v310 + 2 <= v314)
  {
    v317 = v297;
  }
  else
  {
    v315 = 2 * v314;
    if (v315 > v313)
      v313 = v315;
    v2[105].i64[0] = v313;
    v316 = operator new[]();
    v317 = v316;
    if (v310 != -1)
    {
      v318 = 0;
      if (v311 < 4)
        goto LABEL_291;
      if ((unint64_t)(v316 - v297) < 0x20)
        goto LABEL_291;
      v318 = v311 & 0xFFFFFFFFFFFFFFFCLL;
      v319 = (_OWORD *)(v316 + 16);
      v320 = (__int128 *)(v297 + 16);
      v321 = v311 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v322 = *v320;
        *(v319 - 1) = *(v320 - 1);
        *v319 = v322;
        v319 += 2;
        v320 += 2;
        v321 -= 4;
      }
      while (v321);
      if (v311 != v318)
      {
LABEL_291:
        v323 = v310 - v318 + 1;
        v324 = 8 * v318;
        v325 = (uint64_t *)(v297 + 8 * v318);
        v326 = (_QWORD *)(v316 + v324);
        do
        {
          v327 = *v325++;
          *v326++ = v327;
          --v323;
        }
        while (v323);
      }
    }
    v328 = (uint64_t *)v2[104].i64[1];
    if (v328 != v5 && v328 != 0)
      MEMORY[0x212BC6368]();
    v2[104].i64[1] = v317;
    v311 = v2[105].u64[1];
  }
  *(_QWORD *)(v317 + 8 * v311) = v312;
  v330 = v2[105].i64[1];
  v331 = v330 + 1;
  v2[105].i64[1] = v330 + 1;
  v332 = 0x84BDA12F684BDA13 * ((v3[110].i64[1] - v3[110].i64[0]) >> 3);
  v2[72].i64[0] += v332;
  v333 = v330 + 2;
  v334 = v2[105].u64[0];
  if (v330 + 2 <= v334)
  {
    v337 = v317;
  }
  else
  {
    v335 = 2 * v334;
    if (v335 > v333)
      v333 = v335;
    v2[105].i64[0] = v333;
    v336 = operator new[]();
    v337 = v336;
    if (v330 != -1)
    {
      v338 = 0;
      if (v331 < 4)
        goto LABEL_309;
      if ((unint64_t)(v336 - v317) < 0x20)
        goto LABEL_309;
      v338 = v331 & 0xFFFFFFFFFFFFFFFCLL;
      v339 = (_OWORD *)(v336 + 16);
      v340 = (__int128 *)(v317 + 16);
      v341 = v331 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v342 = *v340;
        *(v339 - 1) = *(v340 - 1);
        *v339 = v342;
        v339 += 2;
        v340 += 2;
        v341 -= 4;
      }
      while (v341);
      if (v331 != v338)
      {
LABEL_309:
        v343 = v330 - v338 + 1;
        v344 = 8 * v338;
        v345 = (uint64_t *)(v317 + 8 * v338);
        v346 = (_QWORD *)(v336 + v344);
        do
        {
          v347 = *v345++;
          *v346++ = v347;
          --v343;
        }
        while (v343);
      }
    }
    v348 = (uint64_t *)v2[104].i64[1];
    if (v348 != v5 && v348 != 0)
      MEMORY[0x212BC6368]();
    v2[104].i64[1] = v337;
    v331 = v2[105].u64[1];
  }
  *(_QWORD *)(v337 + 8 * v331) = v332;
  v350 = v2[105].i64[1];
  v351 = v350 + 1;
  v2[105].i64[1] = v350 + 1;
  v352 = 0xD37A6F4DE9BD37A7 * ((v3[112].i64[0] - v3[111].i64[1]) >> 3);
  v2[72].i64[0] += v352;
  v353 = v350 + 2;
  v354 = v2[105].u64[0];
  if (v350 + 2 <= v354)
  {
    v357 = v337;
  }
  else
  {
    v355 = 2 * v354;
    if (v355 > v353)
      v353 = v355;
    v2[105].i64[0] = v353;
    v356 = operator new[]();
    v357 = v356;
    if (v350 != -1)
    {
      v358 = 0;
      if (v351 < 4)
        goto LABEL_327;
      if ((unint64_t)(v356 - v337) < 0x20)
        goto LABEL_327;
      v358 = v351 & 0xFFFFFFFFFFFFFFFCLL;
      v359 = (_OWORD *)(v356 + 16);
      v360 = (__int128 *)(v337 + 16);
      v361 = v351 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v362 = *v360;
        *(v359 - 1) = *(v360 - 1);
        *v359 = v362;
        v359 += 2;
        v360 += 2;
        v361 -= 4;
      }
      while (v361);
      if (v351 != v358)
      {
LABEL_327:
        v363 = v350 - v358 + 1;
        v364 = 8 * v358;
        v365 = (uint64_t *)(v337 + 8 * v358);
        v366 = (_QWORD *)(v356 + v364);
        do
        {
          v367 = *v365++;
          *v366++ = v367;
          --v363;
        }
        while (v363);
      }
    }
    v368 = (uint64_t *)v2[104].i64[1];
    if (v368 != v5 && v368 != 0)
      MEMORY[0x212BC6368]();
    v2[104].i64[1] = v357;
    v351 = v2[105].u64[1];
  }
  *(_QWORD *)(v357 + 8 * v351) = v352;
  v370 = v2[105].i64[1];
  v371 = v370 + 1;
  v2[105].i64[1] = v370 + 1;
  v372 = 0x4EC4EC4EC4EC4EC5 * ((v3[113].i64[1] - v3[113].i64[0]) >> 4);
  v2[72].i64[0] += v372;
  v373 = v370 + 2;
  v374 = v2[105].u64[0];
  if (v370 + 2 <= v374)
  {
    v377 = v357;
  }
  else
  {
    v375 = 2 * v374;
    if (v375 > v373)
      v373 = v375;
    v2[105].i64[0] = v373;
    v376 = operator new[]();
    v377 = v376;
    if (v370 != -1)
    {
      v378 = 0;
      if (v371 < 4)
        goto LABEL_345;
      if ((unint64_t)(v376 - v357) < 0x20)
        goto LABEL_345;
      v378 = v371 & 0xFFFFFFFFFFFFFFFCLL;
      v379 = (_OWORD *)(v376 + 16);
      v380 = (__int128 *)(v357 + 16);
      v381 = v371 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v382 = *v380;
        *(v379 - 1) = *(v380 - 1);
        *v379 = v382;
        v379 += 2;
        v380 += 2;
        v381 -= 4;
      }
      while (v381);
      if (v371 != v378)
      {
LABEL_345:
        v383 = v370 - v378 + 1;
        v384 = 8 * v378;
        v385 = (uint64_t *)(v357 + 8 * v378);
        v386 = (_QWORD *)(v376 + v384);
        do
        {
          v387 = *v385++;
          *v386++ = v387;
          --v383;
        }
        while (v383);
      }
    }
    v388 = (uint64_t *)v2[104].i64[1];
    if (v388 != v5 && v388 != 0)
      MEMORY[0x212BC6368]();
    v2[104].i64[1] = v377;
    v371 = v2[105].u64[1];
  }
  *(_QWORD *)(v377 + 8 * v371) = v372;
  ++v2[105].i64[1];
  v390 = *v1;
  v391 = (uint64_t)&v1[1][19].i64[1];
  v392 = sub_20FB675CC(v391, 1);
  v390[106].i64[0] += v392;
  v390[106].i64[1] += 6 * v392;
  v393 = v390 + 107;
  v394 = v390[140].u64[0];
  v395 = v394 + 1;
  v396 = v390[139].u64[1];
  if (v394 + 1 <= v396)
  {
    v400 = v390[139].i64[0];
  }
  else
  {
    v397 = 2 * v396;
    if (v397 > v395)
      v395 = v397;
    v390[139].i64[1] = v395;
    v398 = v390[139].i64[0];
    v399 = operator new[]();
    v400 = v399;
    if (v394)
    {
      v401 = 0;
      if (v394 < 4)
        goto LABEL_363;
      if ((unint64_t)(v399 - v398) < 0x20)
        goto LABEL_363;
      v401 = v394 & 0xFFFFFFFFFFFFFFFCLL;
      v402 = (_OWORD *)(v399 + 16);
      v403 = (__int128 *)(v398 + 16);
      v404 = v394 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v405 = *v403;
        *(v402 - 1) = *(v403 - 1);
        *v402 = v405;
        v402 += 2;
        v403 += 2;
        v404 -= 4;
      }
      while (v404);
      if (v394 != v401)
      {
LABEL_363:
        v406 = v394 - v401;
        v407 = 8 * v401;
        v408 = (uint64_t *)(v398 + 8 * v401);
        v409 = (_QWORD *)(v399 + v407);
        do
        {
          v410 = *v408++;
          *v409++ = v410;
          --v406;
        }
        while (v406);
      }
    }
    v411 = v390[139].i64[0];
    if ((int64x2_t *)v411 != v393 && v411 != 0)
      MEMORY[0x212BC6368]();
    v390[139].i64[0] = v400;
    v394 = v390[140].u64[0];
  }
  *(_QWORD *)(v400 + 8 * v394) = v392;
  ++v390[140].i64[0];
  v413 = sub_20FB67F20(v391, 1);
  v390[106].i64[0] += v413;
  v390[106].i64[1] += 9 * v413;
  v414 = v390[140].u64[0];
  v415 = v414 + 1;
  v416 = v390[139].u64[1];
  if (v414 + 1 <= v416)
  {
    v420 = v390[139].i64[0];
  }
  else
  {
    v417 = 2 * v416;
    if (v417 > v415)
      v415 = v417;
    v390[139].i64[1] = v415;
    v418 = v390[139].i64[0];
    v419 = operator new[]();
    v420 = v419;
    if (v414)
    {
      v421 = 0;
      if (v414 < 4)
        goto LABEL_381;
      if ((unint64_t)(v419 - v418) < 0x20)
        goto LABEL_381;
      v421 = v414 & 0xFFFFFFFFFFFFFFFCLL;
      v422 = (_OWORD *)(v419 + 16);
      v423 = (__int128 *)(v418 + 16);
      v424 = v414 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v425 = *v423;
        *(v422 - 1) = *(v423 - 1);
        *v422 = v425;
        v422 += 2;
        v423 += 2;
        v424 -= 4;
      }
      while (v424);
      if (v414 != v421)
      {
LABEL_381:
        v426 = v414 - v421;
        v427 = 8 * v421;
        v428 = (uint64_t *)(v418 + 8 * v421);
        v429 = (_QWORD *)(v419 + v427);
        do
        {
          v430 = *v428++;
          *v429++ = v430;
          --v426;
        }
        while (v426);
      }
    }
    v431 = v390[139].i64[0];
    if ((int64x2_t *)v431 != v393 && v431 != 0)
      MEMORY[0x212BC6368]();
    v390[139].i64[0] = v420;
    v414 = v390[140].u64[0];
  }
  *(_QWORD *)(v420 + 8 * v414) = v413;
  ++v390[140].i64[0];
  v433 = sub_20FB68508(v391, 1);
  v390[106].i64[0] += v433;
  v390[106].i64[1] += 6 * v433;
  v434 = v390[140].u64[0];
  v435 = v434 + 1;
  v436 = v390[139].u64[1];
  if (v434 + 1 <= v436)
  {
    v440 = v390[139].i64[0];
  }
  else
  {
    v437 = 2 * v436;
    if (v437 > v435)
      v435 = v437;
    v390[139].i64[1] = v435;
    v438 = v390[139].i64[0];
    v439 = operator new[]();
    v440 = v439;
    if (v434)
    {
      v441 = 0;
      if (v434 < 4)
        goto LABEL_399;
      if ((unint64_t)(v439 - v438) < 0x20)
        goto LABEL_399;
      v441 = v434 & 0xFFFFFFFFFFFFFFFCLL;
      v442 = (_OWORD *)(v439 + 16);
      v443 = (__int128 *)(v438 + 16);
      v444 = v434 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v445 = *v443;
        *(v442 - 1) = *(v443 - 1);
        *v442 = v445;
        v442 += 2;
        v443 += 2;
        v444 -= 4;
      }
      while (v444);
      if (v434 != v441)
      {
LABEL_399:
        v446 = v434 - v441;
        v447 = 8 * v441;
        v448 = (uint64_t *)(v438 + 8 * v441);
        v449 = (_QWORD *)(v439 + v447);
        do
        {
          v450 = *v448++;
          *v449++ = v450;
          --v446;
        }
        while (v446);
      }
    }
    v451 = v390[139].i64[0];
    if ((int64x2_t *)v451 != v393 && v451 != 0)
      MEMORY[0x212BC6368]();
    v390[139].i64[0] = v440;
    v434 = v390[140].u64[0];
  }
  *(_QWORD *)(v440 + 8 * v434) = v433;
  ++v390[140].i64[0];
  v453 = sub_20FB68AF0(v391, 1);
  v390[106].i64[0] += v453;
  v390[106].i64[1] += 6 * v453;
  v454 = v390[140].u64[0];
  v455 = v454 + 1;
  v456 = v390[139].u64[1];
  if (v454 + 1 <= v456)
  {
    v460 = v390[139].i64[0];
  }
  else
  {
    v457 = 2 * v456;
    if (v457 > v455)
      v455 = v457;
    v390[139].i64[1] = v455;
    v458 = v390[139].i64[0];
    v459 = operator new[]();
    v460 = v459;
    if (v454)
    {
      v461 = 0;
      if (v454 < 4)
        goto LABEL_417;
      if ((unint64_t)(v459 - v458) < 0x20)
        goto LABEL_417;
      v461 = v454 & 0xFFFFFFFFFFFFFFFCLL;
      v462 = (_OWORD *)(v459 + 16);
      v463 = (__int128 *)(v458 + 16);
      v464 = v454 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v465 = *v463;
        *(v462 - 1) = *(v463 - 1);
        *v462 = v465;
        v462 += 2;
        v463 += 2;
        v464 -= 4;
      }
      while (v464);
      if (v454 != v461)
      {
LABEL_417:
        v466 = v454 - v461;
        v467 = 8 * v461;
        v468 = (uint64_t *)(v458 + 8 * v461);
        v469 = (_QWORD *)(v459 + v467);
        do
        {
          v470 = *v468++;
          *v469++ = v470;
          --v466;
        }
        while (v466);
      }
    }
    v471 = v390[139].i64[0];
    if ((int64x2_t *)v471 != v393 && v471 != 0)
      MEMORY[0x212BC6368]();
    v390[139].i64[0] = v460;
    v454 = v390[140].u64[0];
  }
  *(_QWORD *)(v460 + 8 * v454) = v453;
  ++v390[140].i64[0];
  v473 = sub_20FB690D8(v391, 1);
  v390[106].i64[0] += v473;
  v390[106].i64[1] += 3 * v473;
  v474 = v390[140].u64[0];
  v475 = v474 + 1;
  v476 = v390[139].u64[1];
  if (v474 + 1 <= v476)
  {
    v480 = v390[139].i64[0];
  }
  else
  {
    v477 = 2 * v476;
    if (v477 > v475)
      v475 = v477;
    v390[139].i64[1] = v475;
    v478 = v390[139].i64[0];
    v479 = operator new[]();
    v480 = v479;
    if (v474)
    {
      v481 = 0;
      if (v474 < 4)
        goto LABEL_435;
      if ((unint64_t)(v479 - v478) < 0x20)
        goto LABEL_435;
      v481 = v474 & 0xFFFFFFFFFFFFFFFCLL;
      v482 = (_OWORD *)(v479 + 16);
      v483 = (__int128 *)(v478 + 16);
      v484 = v474 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v485 = *v483;
        *(v482 - 1) = *(v483 - 1);
        *v482 = v485;
        v482 += 2;
        v483 += 2;
        v484 -= 4;
      }
      while (v484);
      if (v474 != v481)
      {
LABEL_435:
        v486 = v474 - v481;
        v487 = 8 * v481;
        v488 = (uint64_t *)(v478 + 8 * v481);
        v489 = (_QWORD *)(v479 + v487);
        do
        {
          v490 = *v488++;
          *v489++ = v490;
          --v486;
        }
        while (v486);
      }
    }
    v491 = v390[139].i64[0];
    if ((int64x2_t *)v491 != v393 && v491 != 0)
      MEMORY[0x212BC6368]();
    v390[139].i64[0] = v480;
    v474 = v390[140].u64[0];
  }
  *(_QWORD *)(v480 + 8 * v474) = v473;
  ++v390[140].i64[0];
  v493 = sub_20FB696C0(v391, 1);
  v390[106] = vaddq_s64(v390[106], vdupq_n_s64(v493));
  v494 = v390[140].u64[0];
  v495 = v494 + 1;
  v496 = v390[139].u64[1];
  if (v494 + 1 <= v496)
  {
    v500 = v390[139].i64[0];
  }
  else
  {
    v497 = 2 * v496;
    if (v497 > v495)
      v495 = v497;
    v390[139].i64[1] = v495;
    v498 = v390[139].i64[0];
    v499 = operator new[]();
    v500 = v499;
    if (v494)
    {
      v501 = 0;
      if (v494 < 4)
        goto LABEL_453;
      if ((unint64_t)(v499 - v498) < 0x20)
        goto LABEL_453;
      v501 = v494 & 0xFFFFFFFFFFFFFFFCLL;
      v502 = (_OWORD *)(v499 + 16);
      v503 = (__int128 *)(v498 + 16);
      v504 = v494 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v505 = *v503;
        *(v502 - 1) = *(v503 - 1);
        *v502 = v505;
        v502 += 2;
        v503 += 2;
        v504 -= 4;
      }
      while (v504);
      if (v494 != v501)
      {
LABEL_453:
        v506 = v494 - v501;
        v507 = 8 * v501;
        v508 = (uint64_t *)(v498 + 8 * v501);
        v509 = (_QWORD *)(v499 + v507);
        do
        {
          v510 = *v508++;
          *v509++ = v510;
          --v506;
        }
        while (v506);
      }
    }
    v511 = v390[139].i64[0];
    if ((int64x2_t *)v511 != v393 && v511 != 0)
      MEMORY[0x212BC6368]();
    v390[139].i64[0] = v500;
    v494 = v390[140].u64[0];
  }
  *(_QWORD *)(v500 + 8 * v494) = v493;
  ++v390[140].i64[0];
  v513 = sub_20FB69CA8(v391, 1);
  v390[106].i64[0] += v513;
  v390[106].i64[1] += 4 * v513;
  v514 = v390[140].u64[0];
  v515 = v514 + 1;
  v516 = v390[139].u64[1];
  if (v514 + 1 <= v516)
  {
    v520 = v390[139].i64[0];
  }
  else
  {
    v517 = 2 * v516;
    if (v517 > v515)
      v515 = v517;
    v390[139].i64[1] = v515;
    v518 = v390[139].i64[0];
    v519 = operator new[]();
    v520 = v519;
    if (v514)
    {
      v521 = 0;
      if (v514 < 4)
        goto LABEL_471;
      if ((unint64_t)(v519 - v518) < 0x20)
        goto LABEL_471;
      v521 = v514 & 0xFFFFFFFFFFFFFFFCLL;
      v522 = (_OWORD *)(v519 + 16);
      v523 = (__int128 *)(v518 + 16);
      v524 = v514 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v525 = *v523;
        *(v522 - 1) = *(v523 - 1);
        *v522 = v525;
        v522 += 2;
        v523 += 2;
        v524 -= 4;
      }
      while (v524);
      if (v514 != v521)
      {
LABEL_471:
        v526 = v514 - v521;
        v527 = 8 * v521;
        v528 = (uint64_t *)(v518 + 8 * v521);
        v529 = (_QWORD *)(v519 + v527);
        do
        {
          v530 = *v528++;
          *v529++ = v530;
          --v526;
        }
        while (v526);
      }
    }
    v531 = v390[139].i64[0];
    if ((int64x2_t *)v531 != v393 && v531 != 0)
      MEMORY[0x212BC6368]();
    v390[139].i64[0] = v520;
    v514 = v390[140].u64[0];
  }
  *(_QWORD *)(v520 + 8 * v514) = v513;
  ++v390[140].i64[0];
  v533 = sub_20FB6A294(v391, 1);
  v390[106].i64[0] += v533;
  v390[106].i64[1] += 4 * v533;
  v534 = v390[140].u64[0];
  v535 = v534 + 1;
  v536 = v390[139].u64[1];
  if (v534 + 1 <= v536)
  {
    v540 = v390[139].i64[0];
  }
  else
  {
    v537 = 2 * v536;
    if (v537 > v535)
      v535 = v537;
    v390[139].i64[1] = v535;
    v538 = v390[139].i64[0];
    v539 = operator new[]();
    v540 = v539;
    if (v534)
    {
      v541 = 0;
      if (v534 < 4)
        goto LABEL_489;
      if ((unint64_t)(v539 - v538) < 0x20)
        goto LABEL_489;
      v541 = v534 & 0xFFFFFFFFFFFFFFFCLL;
      v542 = (_OWORD *)(v539 + 16);
      v543 = (__int128 *)(v538 + 16);
      v544 = v534 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v545 = *v543;
        *(v542 - 1) = *(v543 - 1);
        *v542 = v545;
        v542 += 2;
        v543 += 2;
        v544 -= 4;
      }
      while (v544);
      if (v534 != v541)
      {
LABEL_489:
        v546 = v534 - v541;
        v547 = 8 * v541;
        v548 = (uint64_t *)(v538 + 8 * v541);
        v549 = (_QWORD *)(v539 + v547);
        do
        {
          v550 = *v548++;
          *v549++ = v550;
          --v546;
        }
        while (v546);
      }
    }
    v551 = v390[139].i64[0];
    if ((int64x2_t *)v551 != v393 && v551 != 0)
      MEMORY[0x212BC6368]();
    v390[139].i64[0] = v540;
    v534 = v390[140].u64[0];
  }
  *(_QWORD *)(v540 + 8 * v534) = v533;
  ++v390[140].i64[0];
  v553 = sub_20FB6A880(v391, 1);
  v390[106].i64[0] += v553;
  v390[106].i64[1] += 3 * v553;
  v554 = v390[140].u64[0];
  v555 = v554 + 1;
  v556 = v390[139].u64[1];
  if (v554 + 1 <= v556)
  {
    v560 = v390[139].i64[0];
  }
  else
  {
    v557 = 2 * v556;
    if (v557 > v555)
      v555 = v557;
    v390[139].i64[1] = v555;
    v558 = v390[139].i64[0];
    v559 = operator new[]();
    v560 = v559;
    if (v554)
    {
      v561 = 0;
      if (v554 < 4)
        goto LABEL_507;
      if ((unint64_t)(v559 - v558) < 0x20)
        goto LABEL_507;
      v561 = v554 & 0xFFFFFFFFFFFFFFFCLL;
      v562 = (_OWORD *)(v559 + 16);
      v563 = (__int128 *)(v558 + 16);
      v564 = v554 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v565 = *v563;
        *(v562 - 1) = *(v563 - 1);
        *v562 = v565;
        v562 += 2;
        v563 += 2;
        v564 -= 4;
      }
      while (v564);
      if (v554 != v561)
      {
LABEL_507:
        v566 = v554 - v561;
        v567 = 8 * v561;
        v568 = (uint64_t *)(v558 + 8 * v561);
        v569 = (_QWORD *)(v559 + v567);
        do
        {
          v570 = *v568++;
          *v569++ = v570;
          --v566;
        }
        while (v566);
      }
    }
    v571 = v390[139].i64[0];
    if ((int64x2_t *)v571 != v393 && v571 != 0)
      MEMORY[0x212BC6368]();
    v390[139].i64[0] = v560;
    v554 = v390[140].u64[0];
  }
  *(_QWORD *)(v560 + 8 * v554) = v553;
  ++v390[140].i64[0];
  v573 = sub_20FB6AE6C(v391, 1);
  v390[106].i64[0] += v573;
  v390[106].i64[1] += 3 * v573;
  v574 = v390[140].u64[0];
  v575 = v574 + 1;
  v576 = v390[139].u64[1];
  if (v574 + 1 <= v576)
  {
    v580 = v390[139].i64[0];
  }
  else
  {
    v577 = 2 * v576;
    if (v577 > v575)
      v575 = v577;
    v390[139].i64[1] = v575;
    v578 = v390[139].i64[0];
    v579 = operator new[]();
    v580 = v579;
    if (v574)
    {
      v581 = 0;
      if (v574 < 4)
        goto LABEL_525;
      if ((unint64_t)(v579 - v578) < 0x20)
        goto LABEL_525;
      v581 = v574 & 0xFFFFFFFFFFFFFFFCLL;
      v582 = (_OWORD *)(v579 + 16);
      v583 = (__int128 *)(v578 + 16);
      v584 = v574 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v585 = *v583;
        *(v582 - 1) = *(v583 - 1);
        *v582 = v585;
        v582 += 2;
        v583 += 2;
        v584 -= 4;
      }
      while (v584);
      if (v574 != v581)
      {
LABEL_525:
        v586 = v574 - v581;
        v587 = 8 * v581;
        v588 = (uint64_t *)(v578 + 8 * v581);
        v589 = (_QWORD *)(v579 + v587);
        do
        {
          v590 = *v588++;
          *v589++ = v590;
          --v586;
        }
        while (v586);
      }
    }
    v591 = v390[139].i64[0];
    if ((int64x2_t *)v591 != v393 && v591 != 0)
      MEMORY[0x212BC6368]();
    v390[139].i64[0] = v580;
    v574 = v390[140].u64[0];
  }
  *(_QWORD *)(v580 + 8 * v574) = v573;
  ++v390[140].i64[0];
  result = (int64x2_t **)sub_20FB6B458(v391, 1);
  v593 = result;
  v390[106] = vaddq_s64(v390[106], vdupq_n_s64(result));
  v594 = v390[140].u64[0];
  v595 = v594 + 1;
  v596 = v390[139].u64[1];
  if (v594 + 1 <= v596)
  {
    v600 = v390[139].i64[0];
  }
  else
  {
    v597 = 2 * v596;
    if (v597 > v595)
      v595 = v597;
    v390[139].i64[1] = v595;
    v598 = v390[139].i64[0];
    v599 = operator new[]();
    v600 = v599;
    if (v594)
    {
      v601 = 0;
      if (v594 < 4)
        goto LABEL_543;
      if ((unint64_t)(v599 - v598) < 0x20)
        goto LABEL_543;
      v601 = v594 & 0xFFFFFFFFFFFFFFFCLL;
      v602 = (_OWORD *)(v599 + 16);
      v603 = (__int128 *)(v598 + 16);
      v604 = v594 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v605 = *v603;
        *(v602 - 1) = *(v603 - 1);
        *v602 = v605;
        v602 += 2;
        v603 += 2;
        v604 -= 4;
      }
      while (v604);
      if (v594 != v601)
      {
LABEL_543:
        v606 = v594 - v601;
        v607 = 8 * v601;
        v608 = (uint64_t *)(v598 + 8 * v601);
        v609 = (_QWORD *)(v599 + v607);
        do
        {
          v610 = *v608++;
          *v609++ = v610;
          --v606;
        }
        while (v606);
      }
    }
    result = (int64x2_t **)v390[139].i64[0];
    if (result != (int64x2_t **)v393 && result != 0)
      result = (int64x2_t **)MEMORY[0x212BC6368]();
    v390[139].i64[0] = v600;
    v594 = v390[140].u64[0];
  }
  *(_QWORD *)(v600 + 8 * v594) = v593;
  ++v390[140].i64[0];
  return result;
}

uint64_t sub_20FBC66EC(uint64_t a1, const void **a2, _QWORD *a3, double *a4, _QWORD *a5, double *a6)
{
  const void **v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _OWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _OWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  size_t v31;
  size_t v32;
  void *v33;
  int v34;
  _QWORD v36[11];
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[11];
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  _QWORD v45[3];
  __int128 v46;
  __int128 v47;
  int v48;
  double *v49;
  double *v50;

  v49 = a6;
  v50 = a4;
  v46 = 0u;
  v47 = 0u;
  v48 = 733226608;
  kdebug_trace();
  v10 = (const void **)(a1 + 57952);
  *(_DWORD *)(a1 + 58012) = 0;
  *(_BYTE *)(a1 + 58160) = 0;
  *(_QWORD *)(a1 + 58000) = 0;
  *(_BYTE *)(a1 + 58008) = 0;
  v45[0] = a1;
  v45[1] = &v49;
  v45[2] = &v50;
  v44 = 0;
  if (!sub_20F8B1D74(a1))
  {
    if (a3)
    {
      if (*(_BYTE *)(a1 + 58050))
      {
        a3[66] = 0;
        v12 = a3[65];
        if (v12 > 0x12)
        {
          v14 = (_OWORD *)a3[64];
        }
        else
        {
          v13 = 2 * v12;
          if (v13 <= 0x13)
            v13 = 19;
          a3[65] = v13;
          v14 = (_OWORD *)operator new[]();
          v15 = (_QWORD *)a3[64];
          if (v15 != a3 && v15)
            MEMORY[0x212BC6368](v15, 0x1000C8000313F17);
          a3[64] = v14;
          v16 = a3[66];
          if (v16)
          {
            a3[66] = v16 + 19;
            memmove((char *)v14 + 152, v14, 8 * v16);
            *v14 = 0u;
            v14[1] = 0u;
            v14[2] = 0u;
            v14[3] = 0u;
            v14[4] = 0u;
            v14[5] = 0u;
            v14[6] = 0u;
            v14[7] = 0u;
            v14[8] = 0u;
            *((_QWORD *)v14 + 18) = 0;
            goto LABEL_18;
          }
        }
        *((_QWORD *)v14 + 18) = 0;
        v14[7] = 0u;
        v14[8] = 0u;
        v14[5] = 0u;
        v14[6] = 0u;
        v14[3] = 0u;
        v14[4] = 0u;
        v14[1] = 0u;
        v14[2] = 0u;
        *v14 = 0u;
        a3[66] = 19;
LABEL_18:
        *((_QWORD *)v14 + 5) = v40[5];
        *((_QWORD *)v14 + 9) = v40[9];
        v18 = v43;
        *(_OWORD *)((char *)v14 + 88) = v41;
        v19 = v40[0];
        *((_QWORD *)v14 + 2) = v40[2];
        *(_QWORD *)v14 = v19;
        v20 = v40[6];
        *((_QWORD *)v14 + 7) = v40[7];
        *((_QWORD *)v14 + 8) = v40[8];
        *((_QWORD *)v14 + 15) = v42;
        *((_QWORD *)v14 + 16) = v18;
        *((_QWORD *)v14 + 6) = v20;
        if (!a5)
          goto LABEL_31;
LABEL_19:
        if (*(_BYTE *)(a1 + 58050))
        {
          a5[66] = 0;
          v21 = a5[65];
          if (v21 > 0x12)
          {
            v23 = (_OWORD *)a5[64];
          }
          else
          {
            v22 = 2 * v21;
            if (v22 <= 0x13)
              v22 = 19;
            a5[65] = v22;
            v23 = (_OWORD *)operator new[]();
            v24 = (_QWORD *)a5[64];
            if (v24 != a5 && v24)
              MEMORY[0x212BC6368](v24, 0x1000C8000313F17);
            a5[64] = v23;
            v25 = a5[66];
            if (v25)
            {
              a5[66] = v25 + 19;
              memmove((char *)v23 + 152, v23, 8 * v25);
              *v23 = 0u;
              v23[1] = 0u;
              v23[2] = 0u;
              v23[3] = 0u;
              v23[4] = 0u;
              v23[5] = 0u;
              v23[6] = 0u;
              v23[7] = 0u;
              v23[8] = 0u;
              *((_QWORD *)v23 + 18) = 0;
              goto LABEL_35;
            }
          }
          *((_QWORD *)v23 + 18) = 0;
          v23[7] = 0u;
          v23[8] = 0u;
          v23[5] = 0u;
          v23[6] = 0u;
          v23[3] = 0u;
          v23[4] = 0u;
          v23[1] = 0u;
          v23[2] = 0u;
          *v23 = 0u;
          a5[66] = 19;
LABEL_35:
          *((_QWORD *)v23 + 5) = v36[5];
          *((_QWORD *)v23 + 9) = v36[9];
          v27 = v39;
          *(_OWORD *)((char *)v23 + 88) = v37;
          v28 = v36[0];
          *((_QWORD *)v23 + 2) = v36[2];
          *(_QWORD *)v23 = v28;
          v29 = v36[6];
          *((_QWORD *)v23 + 7) = v36[7];
          *((_QWORD *)v23 + 8) = v36[8];
          *((_QWORD *)v23 + 15) = v38;
          *((_QWORD *)v23 + 16) = v27;
          *((_QWORD *)v23 + 6) = v29;
          *(_BYTE *)(a1 + 2968) = 1;
          if (v10 == a2)
          {
LABEL_44:
            v11 = 0;
            *(_BYTE *)(a1 + 2973) = 0;
            goto LABEL_45;
          }
LABEL_36:
          v30 = *(unsigned int *)(a1 + 57968);
          if ((unint64_t)a2[1] >= v30)
          {
            if (!(_DWORD)v30)
            {
              v34 = 0;
              goto LABEL_43;
            }
            v33 = (void *)*a2;
            v31 = 8 * v30;
          }
          else
          {
            if (*a2)
              MEMORY[0x212BC6368](*a2, 0x1000C8000313F17);
            v31 = 8 * v30;
            v32 = (v31 + 31) & 0xFFFFFFFE0;
            *a2 = 0;
            a2[1] = (const void *)(v32 >> 3);
            v33 = operator new(v32, (std::align_val_t)0x20uLL);
            *a2 = v33;
          }
          memcpy(v33, *v10, v31);
          v34 = *(_DWORD *)(a1 + 57968);
LABEL_43:
          *((_DWORD *)a2 + 4) = v34;
          goto LABEL_44;
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, a1 + 57952);
        if (*(_BYTE *)(a1 + 58050)
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/LPFGInterface.hpp", 3156, (uint64_t)"!m_fallbackToHostForIteration", 29, (uint64_t)"There is no injection in fall-back mode.", 40, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v26 = sub_20FBC6BDC(a1, v36, a5, *v49);
        *v49 = v26;
LABEL_31:
        *(_BYTE *)(a1 + 2968) = 1;
        if (v10 == a2)
          goto LABEL_44;
        goto LABEL_36;
      }
      v17 = sub_20FBC6BDC(a1, v40, a3, *v50);
      *v50 = v17;
    }
    if (!a5)
      goto LABEL_31;
    goto LABEL_19;
  }
  *(_BYTE *)(a1 + 2968) = 0;
  *(_BYTE *)(a1 + 2973) = 0;
  v11 = 1;
  *(_BYTE *)(a1 + 58008) = 1;
LABEL_45:
  sub_20FBC7974((uint64_t)v45);
  kdebug_trace();
  return v11;
}

void sub_20FBC6BBC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_20FBC7974(v1);
  sub_20E8E69C4(v2 - 144);
  _Unwind_Resume(a1);
}

double sub_20FBC6BDC(uint64_t a1, _QWORD *a2, _QWORD *a3, double a4)
{
  unint64_t v7;
  unint64_t v8;
  _OWORD *v9;
  _QWORD *v10;
  uint64_t v12;
  double v13;
  float64x2_t v16;
  float64x2_t v17;
  int8x16_t v18;
  float64x2_t v19;
  unint64_t v20;
  unint64_t v21;
  _OWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  float64x2_t v25;
  int8x16_t *v26;
  int8x16_t *v27;
  double v28;
  double v29;
  int8x16_t *v30;
  double v31;
  uint64_t *v32;
  const double *v33;
  float64x2_t *v34;
  uint64_t v35;
  double v36;
  double v38;
  double v39;
  double v40;
  float64x2_t v41;
  double v47;
  float64x2_t v48;
  double v51;
  float64x2_t v52;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t *v57;
  int8x16_t v58;
  float64x2_t v59;
  _OWORD *i8;
  uint64_t *v61;
  int8x16_t *v62;
  int8x16_t *v63;
  int8x16_t *v64;
  double v65;
  uint64_t *v66;
  const double *v67;
  float64x2_t *v68;
  uint64_t v69;
  double v70;
  double v72;
  double v73;
  double v74;
  float64x2_t v75;
  double v78;
  float64x2_t v79;
  double v82;
  float64x2_t v83;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t *v88;
  int8x16_t v89;
  float64x2_t v90;
  _OWORD *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  double v95;
  double v96;
  double v97;
  float64x2_t *v98;
  float64x2_t *v99;
  float64x2_t *v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  double v107;
  _OWORD *v108;
  _BOOL4 v109;
  uint64_t v110;
  uint64_t v112;
  uint64_t v113;
  double v114;
  double v115;
  double v116;
  float64x2_t *v117;
  float64x2_t *v118;
  uint64_t v121;
  uint64_t v124;
  uint64_t v125;
  double v126;
  uint64_t v127;
  double v131;
  double v132;
  double v133;
  double cosval;
  double v135;
  __double2 v136;
  double v137;
  double v138;
  double v139;
  double v140;
  double v141;
  double v142;
  double v143;
  double v144;
  double v145;
  double v146;
  double v147;
  double v148;
  double v149;
  double v150;
  double v151;
  double v152;
  double v153;
  double v154;
  double v155;
  double v156;
  double v157;
  float64x2_t v158;
  double v159;
  float64x2_t v160;
  double v161;
  float64x2_t v162;
  float64x2_t *v163;
  uint64_t v164;
  float64x2_t v165;
  float64x2_t v166;
  double v167;
  float64x2_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  double v172;
  double v173;
  uint64_t v174;
  uint64_t v175;
  _OWORD *v176;
  int v177;
  uint64_t v178;
  double v181;
  int v182;
  uint64_t v183;
  double v184;
  double v186;
  double v187;
  float64x2_t v189;
  uint64_t v190;
  float64x2_t v191;
  double v192;
  float64x2_t v193;
  double v194;
  float64x2_t v195;
  double v196;
  float64x2x3_t v197;
  float64x2x3_t v198;

  a3[66] = 0;
  v7 = a3[65];
  if (v7 > 0x12)
  {
    v9 = (_OWORD *)a3[64];
  }
  else
  {
    v8 = 2 * v7;
    if (v8 <= 0x13)
      v8 = 19;
    a3[65] = v8;
    v9 = (_OWORD *)operator new[]();
    v10 = (_QWORD *)a3[64];
    if (v10 != a3 && v10 != 0)
      MEMORY[0x212BC6368]();
    a3[64] = v9;
    v12 = a3[66];
    if (v12)
    {
      a3[66] = v12 + 19;
      memmove((char *)v9 + 152, v9, 8 * v12);
      *v9 = 0u;
      v9[1] = 0u;
      v9[2] = 0u;
      v9[3] = 0u;
      v9[4] = 0u;
      v9[5] = 0u;
      v9[6] = 0u;
      v9[7] = 0u;
      v9[8] = 0u;
      *((_QWORD *)v9 + 18) = 0;
      goto LABEL_13;
    }
  }
  *((_QWORD *)v9 + 18) = 0;
  v9[7] = 0u;
  v9[8] = 0u;
  v9[5] = 0u;
  v9[6] = 0u;
  v9[3] = 0u;
  v9[4] = 0u;
  v9[1] = 0u;
  v9[2] = 0u;
  *v9 = 0u;
  a3[66] = 19;
LABEL_13:
  v187 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  a3[66] = 0;
  v20 = a3[65];
  if (v20 > 0x12)
  {
    v22 = (_OWORD *)a3[64];
  }
  else
  {
    v21 = 2 * v20;
    if (v21 <= 0x13)
      v21 = 19;
    a3[65] = v21;
    v22 = (_OWORD *)operator new[]();
    v23 = (_QWORD *)a3[64];
    if (v23 != a3 && v23)
      MEMORY[0x212BC6368](v23, 0x1000C8000313F17);
    a3[64] = v22;
    v24 = a3[66];
    if (v24)
    {
      a3[66] = v24 + 19;
      memmove((char *)v22 + 152, v22, 8 * v24);
      v25.f64[1] = 0.0;
      *v22 = 0u;
      v22[1] = 0u;
      v22[2] = 0u;
      v22[3] = 0u;
      v22[4] = 0u;
      v22[5] = 0u;
      v22[6] = 0u;
      v22[7] = 0u;
      v22[8] = 0u;
      *((_QWORD *)v22 + 18) = 0;
      goto LABEL_23;
    }
  }
  *((_QWORD *)v22 + 18) = 0;
  v25.f64[1] = 0.0;
  v22[7] = 0u;
  v22[8] = 0u;
  v22[5] = 0u;
  v22[6] = 0u;
  v22[3] = 0u;
  v22[4] = 0u;
  v22[1] = 0u;
  v22[2] = 0u;
  *v22 = 0u;
  a3[66] = 19;
LABEL_23:
  *((_QWORD *)v22 + 5) = a2[5];
  *((_QWORD *)v22 + 9) = a2[9];
  *((_QWORD *)v22 + 16) = a2[16];
  *((_QWORD *)v22 + 12) = a2[12];
  *((_QWORD *)v22 + 11) = a2[11];
  *((_QWORD *)v22 + 2) = a2[2];
  *(_QWORD *)v22 = *a2;
  *((_QWORD *)v22 + 7) = a2[7];
  *((_QWORD *)v22 + 8) = a2[8];
  *((_QWORD *)v22 + 15) = a2[15];
  *((_QWORD *)v22 + 6) = a2[6];
  v26 = *(int8x16_t **)(a1 + 1400);
  v27 = *(int8x16_t **)(a1 + 1408);
  v28 = 0.0;
  v29 = 0.0;
  if (v26 != v27)
  {
    v30 = v26 + 16;
    v31 = 0.0;
    do
    {
      while (!v30[-9].i64[1])
      {
        v30[-1].i8[8] = 0;
        v13 = 0.0;
        v30[-1].i64[0] = 0;
        v31 = v31 + -0.0;
        v32 = &v30[1].i64[1];
        v30 = (int8x16_t *)((char *)v30 + 280);
        if (v32 == (uint64_t *)v27)
          goto LABEL_30;
      }
      v33 = (const double *)&v30[-15].i64[1];
      v197 = vld3q_f64(v33);
      v34 = (float64x2_t *)&v30[-4];
      v35 = v30[-8].i64[1];
      v36 = *(double *)&v30[-11].i64[1];
      _Q4 = *(__int128 *)((char *)&v30[-12] + 8);
      v38 = *(double *)(v35 + 48);
      v39 = *(double *)(v35 + 72);
      v40 = *(double *)(v35 + 96);
      v41 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v197.val[0], *(double *)(v35 + 32)), v197.val[1], *(float64x2_t *)(v35 + 32), 1), v197.val[2], v38);
      _D6 = *(_QWORD *)(v35 + 40);
      __asm { FMLA            D20, D6, V4.D[1] }
      v47 = _D20 + v36 * v38;
      v48 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v197.val[0], *(double *)(v35 + 56)), v197.val[1], *(float64x2_t *)(v35 + 56), 1), v197.val[2], v39);
      _D16 = *(_QWORD *)(v35 + 64);
      __asm { FMLA            D20, D16, V4.D[1] }
      v51 = _D20 + v36 * v39;
      v52 = vmlaq_laneq_f64(vmulq_n_f64(v197.val[0], *(double *)(v35 + 80)), v197.val[1], *(float64x2_t *)(v35 + 80), 1);
      _D18 = *(_QWORD *)(v35 + 88);
      __asm { FMLA            D20, D18, V4.D[1] }
      v192 = v47;
      v191 = v41;
      v194 = v51;
      v193 = v48;
      v196 = _D20 + v36 * v40;
      v195 = vmlaq_n_f64(v52, v197.val[2], v40);
      v190 = 0;
      v189 = 0uLL;
      sub_20E9733B8(&v191, v189.f64);
      v55 = v189;
      v30[-3].i64[0] = v190;
      v30[-4] = (int8x16_t)v55;
      v55.f64[0] = *(float64_t *)(v35 + 120);
      *(_QWORD *)&v56.f64[0] = v30[-9].i64[0];
      *(float64x2_t *)((char *)&v30[-3] + 8) = vsubq_f64(*(float64x2_t *)(v35 + 104), (float64x2_t)v30[-10]);
      v30[-2].i64[1] = *(_OWORD *)&vsubq_f64(v55, v56);
      v57 = (float64x2_t *)v30[-9].i64[1];
      v25 = vmulq_f64((float64x2_t)v30[-2], v57[3]);
      v58 = (int8x16_t)vmulq_f64((float64x2_t)v30[-3], v57[2]);
      v59 = vmulq_f64((float64x2_t)v30[-4], v57[1]);
      v30[-4] = (int8x16_t)v59;
      v30[-3] = v58;
      v30[-2] = (int8x16_t)v25;
      v30[-1].i8[8] = 1;
      if (v30->i64[0])
      {
        (*(void (**)(uint64_t, int8x16_t *))(*(_QWORD *)v30->i64[0] + 24))(v30->i64[0], v30 - 4);
        v58 = v30[-3];
        v25 = (float64x2_t)v30[-2];
        v59 = *v34;
      }
      _Q3.f64[0] = *(double *)vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL).i64;
      v16 = (float64x2_t)vextq_s8(v58, v58, 8uLL);
      v17 = (float64x2_t)vextq_s8((int8x16_t)v59, (int8x16_t)v59, 8uLL);
      i8 = v30[-7].i8;
      v19 = (float64x2_t)v30[-3];
      *i8 = *v34;
      i8[1] = v19;
      v18 = v30[-2];
      i8[2] = v18;
      v59.f64[1] = v17.f64[0];
      _Q2 = vmulq_f64(v59, v59);
      _Q2.f64[0] = _Q2.f64[0] + v17.f64[0] * v17.f64[0];
      v13 = *(double *)(a1 + 32)
          * (_Q2.f64[0]
           + *(double *)v58.i64 * *(double *)v58.i64
           + v16.f64[0] * v16.f64[0]
           + v25.f64[0] * v25.f64[0]
           + _Q3.f64[0] * _Q3.f64[0]);
      *(double *)v30[-1].i64 = v13;
      v31 = v31 + v13;
      v61 = &v30[1].i64[1];
      v30 = (int8x16_t *)((char *)v30 + 280);
    }
    while (v61 != (uint64_t *)v27);
LABEL_30:
    v29 = v31 * 0.5;
  }
  v186 = v29;
  *(double *)(a3[64] + 8) = v29;
  v62 = *(int8x16_t **)(a1 + 1448);
  v63 = *(int8x16_t **)(a1 + 1456);
  if (v62 != v63)
  {
    v64 = v62 + 16;
    v65 = 0.0;
    do
    {
      while (!v64[-9].i64[1])
      {
        v64[-1].i8[8] = 0;
        v13 = 0.0;
        v64[-1].i64[0] = 0;
        v65 = v65 + -0.0;
        v66 = &v64[1].i64[1];
        v64 = (int8x16_t *)((char *)v64 + 280);
        if (v66 == (uint64_t *)v63)
          goto LABEL_38;
      }
      v67 = (const double *)&v64[-15].i64[1];
      v198 = vld3q_f64(v67);
      v68 = (float64x2_t *)&v64[-4];
      v69 = v64[-8].i64[1];
      v70 = *(double *)&v64[-11].i64[1];
      _Q4 = *(__int128 *)((char *)&v64[-12] + 8);
      v72 = *(double *)(v69 + 48);
      v73 = *(double *)(v69 + 72);
      v74 = *(double *)(v69 + 96);
      v75 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v198.val[0], *(double *)(v69 + 32)), v198.val[1], *(float64x2_t *)(v69 + 32), 1), v198.val[2], v72);
      _D6 = *(_QWORD *)(v69 + 40);
      __asm { FMLA            D20, D6, V4.D[1] }
      v78 = _D20 + v70 * v72;
      v79 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v198.val[0], *(double *)(v69 + 56)), v198.val[1], *(float64x2_t *)(v69 + 56), 1), v198.val[2], v73);
      _D16 = *(_QWORD *)(v69 + 64);
      __asm { FMLA            D20, D16, V4.D[1] }
      v82 = _D20 + v70 * v73;
      v83 = vmlaq_laneq_f64(vmulq_n_f64(v198.val[0], *(double *)(v69 + 80)), v198.val[1], *(float64x2_t *)(v69 + 80), 1);
      _D18 = *(_QWORD *)(v69 + 88);
      __asm { FMLA            D20, D18, V4.D[1] }
      v192 = v78;
      v191 = v75;
      v194 = v82;
      v193 = v79;
      v196 = _D20 + v70 * v74;
      v195 = vmlaq_n_f64(v83, v198.val[2], v74);
      v190 = 0;
      v189 = 0uLL;
      sub_20E9733B8(&v191, v189.f64);
      v86 = v189;
      v64[-3].i64[0] = v190;
      v64[-4] = (int8x16_t)v86;
      v86.f64[0] = *(float64_t *)(v69 + 120);
      *(_QWORD *)&v87.f64[0] = v64[-9].i64[0];
      *(float64x2_t *)((char *)&v64[-3] + 8) = vsubq_f64(*(float64x2_t *)(v69 + 104), (float64x2_t)v64[-10]);
      v64[-2].i64[1] = *(_OWORD *)&vsubq_f64(v86, v87);
      v88 = (float64x2_t *)v64[-9].i64[1];
      v25 = vmulq_f64((float64x2_t)v64[-2], v88[3]);
      v89 = (int8x16_t)vmulq_f64((float64x2_t)v64[-3], v88[2]);
      v90 = vmulq_f64((float64x2_t)v64[-4], v88[1]);
      v64[-4] = (int8x16_t)v90;
      v64[-3] = v89;
      v64[-2] = (int8x16_t)v25;
      v64[-1].i8[8] = 1;
      if (v64->i64[0])
      {
        (*(void (**)(uint64_t, int8x16_t *))(*(_QWORD *)v64->i64[0] + 24))(v64->i64[0], v64 - 4);
        v89 = v64[-3];
        v25 = (float64x2_t)v64[-2];
        v90 = *v68;
      }
      _Q3.f64[0] = *(double *)vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL).i64;
      v16 = (float64x2_t)vextq_s8(v89, v89, 8uLL);
      v17 = (float64x2_t)vextq_s8((int8x16_t)v90, (int8x16_t)v90, 8uLL);
      v91 = v64[-7].i8;
      v19 = (float64x2_t)v64[-3];
      *v91 = *v68;
      v91[1] = v19;
      v18 = v64[-2];
      v91[2] = v18;
      v90.f64[1] = v17.f64[0];
      _Q2 = vmulq_f64(v90, v90);
      _Q2.f64[0] = _Q2.f64[0] + v17.f64[0] * v17.f64[0];
      v13 = *(double *)(a1 + 64)
          * (_Q2.f64[0]
           + *(double *)v89.i64 * *(double *)v89.i64
           + v16.f64[0] * v16.f64[0]
           + v25.f64[0] * v25.f64[0]
           + _Q3.f64[0] * _Q3.f64[0]);
      *(double *)v64[-1].i64 = v13;
      v65 = v65 + v13;
      v92 = &v64[1].i64[1];
      v64 = (int8x16_t *)((char *)v64 + 280);
    }
    while (v92 != (uint64_t *)v63);
LABEL_38:
    v29 = 0.5;
    v28 = v65 * 0.5;
  }
  *(double *)(a3[64] + 24) = v28;
  v93 = *(_QWORD *)(a1 + 1472);
  v94 = *(_QWORD *)(a1 + 1480);
  v95 = 0.0;
  v96 = 0.0;
  if (v93 != v94)
  {
    v97 = 0.0;
    do
    {
      while (1)
      {
        v98 = *(float64x2_t **)(v93 + 48);
        if (v98)
          break;
        *(_BYTE *)(v93 + 128) = 0;
        v13 = 0.0;
        *(_QWORD *)(v93 + 120) = 0;
        v97 = v97 + -0.0;
        v93 += 160;
        if (v93 == v94)
          goto LABEL_46;
      }
      v99 = (float64x2_t *)(v93 + 96);
      v100 = *(float64x2_t **)(v93 + 64);
      v25.f64[0] = v100[3].f64[0];
      _Q2.f64[0] = *(float64_t *)(v93 + 40);
      v101 = vsubq_f64(v25, _Q2);
      v102 = vsubq_f64(v100[2], *(float64x2_t *)(v93 + 24));
      *(float64x2_t *)(v93 + 96) = v102;
      *(float64_t *)(v93 + 112) = v101.f64[0];
      _Q2.f64[0] = v98[2].f64[0];
      v25 = vmulq_f64(v101, _Q2);
      v103 = vmulq_f64(v102, v98[1]);
      *(float64x2_t *)(v93 + 96) = v103;
      *(float64_t *)(v93 + 112) = v25.f64[0];
      *(_BYTE *)(v93 + 128) = 1;
      v104 = *(_QWORD *)(v93 + 136);
      if (v104)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v104 + 24))(v104, v93 + 96);
        v25.f64[0] = *(float64_t *)(v93 + 112);
        v103 = *v99;
      }
      _Q2 = (float64x2_t)vextq_s8((int8x16_t)v103, (int8x16_t)v103, 8uLL);
      _Q3 = *v99;
      *(float64x2_t *)(v93 + 72) = *v99;
      *(_QWORD *)(v93 + 88) = *(_QWORD *)(v93 + 112);
      v103.f64[1] = _Q2.f64[0];
      v13 = *(double *)(a1 + 80) * (vmulq_f64(v103, v103).f64[0] + _Q2.f64[0] * _Q2.f64[0] + v25.f64[0] * v25.f64[0]);
      *(double *)(v93 + 120) = v13;
      v97 = v97 + v13;
      v93 += 160;
    }
    while (v93 != v94);
LABEL_46:
    v29 = 0.5;
    v96 = v97 * 0.5;
  }
  *(double *)(a3[64] + 32) = v96;
  v105 = *(_QWORD *)(a1 + 1616);
  v106 = *(_QWORD *)(a1 + 1624);
  if (v105 != v106)
  {
    v107 = 0.0;
    do
    {
      while (1)
      {
        v108 = (_OWORD *)(v105 + 296);
        v109 = sub_20F9B6D14(v105 + 8, (int64x2_t **)(v105 + 224), (float64x2_t *)(v105 + 296), v29, v13, _Q2.f64[0], _Q3.f64[0], v16.f64[0], v17.f64[0], *(double *)v18.i64, v19);
        *(_BYTE *)(v105 + 328) = v109;
        if (v109)
          break;
        v29 = -0.0;
        v13 = 0.0;
        *(_QWORD *)(v105 + 320) = 0;
        v107 = v107 + -0.0;
        v105 += 360;
        if (v105 == v106)
          goto LABEL_54;
      }
      v110 = *(_QWORD *)(v105 + 336);
      if (v110)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v110 + 24))(v110, v105 + 296);
      *(_OWORD *)(v105 + 272) = *v108;
      *(_QWORD *)(v105 + 288) = *(_QWORD *)(v105 + 312);
      _Q1 = *v108;
      _Q3.f64[0] = *(float64_t *)(v105 + 304);
      __asm { FMLA            D2, D3, V1.D[1] }
      v29 = *(double *)(a1 + 176) * (_Q2.f64[0] + *(double *)(v105 + 312) * *(double *)(v105 + 312));
      v13 = v29;
      *(double *)(v105 + 320) = v29;
      v107 = v107 + v29;
      v105 += 360;
    }
    while (v105 != v106);
LABEL_54:
    v29 = 0.5;
    v95 = v107 * 0.5;
  }
  *(double *)(a3[64] + 80) = v95;
  v112 = *(_QWORD *)(a1 + 1688);
  v113 = *(_QWORD *)(a1 + 1696);
  v114 = 0.0;
  v115 = 0.0;
  if (v112 != v113)
  {
    v116 = 0.0;
    do
    {
      while (!*(_BYTE *)(v112 + 88))
      {
        *(_BYTE *)(v112 + 176) = 0;
        v13 = 0.0;
        *(_QWORD *)(v112 + 168) = 0;
        v116 = v116 + -0.0;
        v112 += 208;
        if (v112 == v113)
          goto LABEL_62;
      }
      v117 = (float64x2_t *)(v112 + 136);
      v118 = *(float64x2_t **)(v112 + 96);
      _Q1 = vmulq_f64(vsubq_f64(v118[2], *(float64x2_t *)(v112 + 24)), *(float64x2_t *)(v112 + 56));
      _Q0 = vmulq_f64(vsubq_f64(v118[3], *(float64x2_t *)(v112 + 40)), *(float64x2_t *)(v112 + 72));
      *(float64x2_t *)(v112 + 152) = _Q0;
      *(float64x2_t *)(v112 + 136) = _Q1;
      *(_BYTE *)(v112 + 176) = 1;
      v121 = *(_QWORD *)(v112 + 184);
      if (v121)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v121 + 24))(v121, v112 + 136);
        _Q1 = *v117;
        _Q0 = *(float64x2_t *)(v112 + 152);
      }
      _Q3 = *(float64x2_t *)(v112 + 152);
      *(float64x2_t *)(v112 + 104) = *v117;
      *(float64x2_t *)(v112 + 120) = _Q3;
      _Q3.f64[0] = _Q1.f64[1];
      __asm { FMLA            D2, D3, V1.D[1] }
      _D1 = _Q0.f64[1];
      __asm { FMLA            D2, D1, V0.D[1] }
      v13 = *(double *)(a1 + 224) * _Q2.f64[0];
      *(double *)(v112 + 168) = v13;
      v116 = v116 + v13;
      v112 += 208;
    }
    while (v112 != v113);
LABEL_62:
    v29 = 0.5;
    v115 = v116 * 0.5;
  }
  *(double *)(a3[64] + 104) = v115;
  v124 = *(_QWORD *)(a1 + 1712);
  v125 = *(_QWORD *)(a1 + 1720);
  if (v124 != v125)
  {
    v126 = 0.0;
    do
    {
      while (!*(_BYTE *)(v124 + 72))
      {
        *(_BYTE *)(v124 + 144) = 0;
        v13 = 0.0;
        *(_QWORD *)(v124 + 136) = 0;
        v126 = v126 + -0.0;
        v124 += 176;
        if (v124 == v125)
          goto LABEL_73;
      }
      v127 = *(_QWORD *)(v124 + 80);
      _Q1 = *(_OWORD *)(v124 + 24);
      _D3 = *(_QWORD *)(v124 + 32);
      __asm { FMLA            D2, D3, V1.D[1] }
      v131 = _D2 + *(double *)(v124 + 40) * *(double *)(v124 + 40);
      if (v131 >= 0.0000002635)
      {
        v135 = sqrt(v131);
        v136 = __sincos_stret(v135);
        cosval = v136.__cosval;
        v133 = v136.__sinval / v135;
        v132 = 1.0 / v131 * (1.0 - v136.__cosval);
      }
      else
      {
        v132 = 0.5 - v131 * (v131 / -720.0 + 0.0416666667);
        v133 = 1.0 - v131 * (0.166666667 - v131 * (v131 / -5040.0 + 0.00833333333));
        cosval = 1.0 - v131 * v132;
      }
      v137 = *(double *)(v124 + 24);
      v138 = *(double *)(v124 + 32);
      v139 = v132 * v137;
      v140 = v132 * v138;
      v141 = *(double *)(v124 + 40);
      v142 = cosval + v137 * (v132 * v137);
      v143 = cosval + v138 * (v132 * v138);
      v144 = cosval + v141 * (v132 * v141);
      v145 = v132 * v137 * v138;
      v146 = v139 * v141;
      v147 = v140 * v141;
      v148 = v133 * v137;
      v149 = v133 * v138;
      v150 = v133 * v141;
      v151 = v145 - v150;
      v152 = v149 + v146;
      v153 = v145 + v150;
      v154 = v147 - v148;
      v155 = v146 - v149;
      v156 = v148 + v147;
      v157 = *(double *)(v127 + 48);
      v158 = *(float64x2_t *)(v127 + 32);
      v159 = *(double *)(v127 + 72);
      v160 = *(float64x2_t *)(v127 + 56);
      v161 = *(double *)(v127 + 96);
      v162 = *(float64x2_t *)(v127 + 80);
      v192 = v157 * v142 + v159 * v151 + v161 * v152;
      v191 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v158, v142), v160, v151), v162, v152);
      v194 = v157 * v153 + v159 * v143 + v161 * v154;
      v193 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v158, v153), v160, v143), v162, v154);
      v196 = v157 * v155 + v159 * v156 + v161 * v144;
      v195 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v158, v155), v160, v156), v162, v144);
      v163 = (float64x2_t *)(v124 + 112);
      v189 = 0uLL;
      v190 = 0;
      sub_20E9733B8(&v191, v189.f64);
      v164 = v190;
      v165.f64[1] = v189.f64[1];
      *(float64x2_t *)(v124 + 112) = v189;
      *(_QWORD *)(v124 + 128) = v164;
      v165.f64[0] = *(float64_t *)(v124 + 128);
      v166.f64[0] = *(float64_t *)(v124 + 64);
      *(_QWORD *)&v167 = *(_OWORD *)&vmulq_f64(v165, v166);
      v168 = vmulq_f64(*(float64x2_t *)(v124 + 112), *(float64x2_t *)(v124 + 48));
      *(float64x2_t *)(v124 + 112) = v168;
      *(double *)(v124 + 128) = v167;
      *(_BYTE *)(v124 + 144) = 1;
      v169 = *(_QWORD *)(v124 + 152);
      if (v169)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v169 + 24))(v169, v124 + 112);
        v167 = *(double *)(v124 + 128);
        v168 = *v163;
      }
      _Q2.f64[0] = *(double *)vextq_s8((int8x16_t)v168, (int8x16_t)v168, 8uLL).i64;
      _Q3 = *v163;
      *(float64x2_t *)(v124 + 88) = *v163;
      *(_QWORD *)(v124 + 104) = *(_QWORD *)(v124 + 128);
      v168.f64[1] = _Q2.f64[0];
      v13 = *(double *)(a1 + 240) * (vmulq_f64(v168, v168).f64[0] + _Q2.f64[0] * _Q2.f64[0] + v167 * v167);
      *(double *)(v124 + 136) = v13;
      v126 = v126 + v13;
      v124 += 176;
    }
    while (v124 != v125);
LABEL_73:
    v29 = 0.5;
    v114 = v126 * 0.5;
  }
  *(double *)(a3[64] + 112) = v114;
  v170 = *(_QWORD *)(a1 + 1784);
  v171 = *(_QWORD *)(a1 + 1792);
  v172 = 0.0;
  v173 = 0.0;
  if (v170 == v171)
  {
    *(_QWORD *)(a3[64] + 136) = 0;
    v174 = *(_QWORD *)(a1 + 1808);
    v175 = *(_QWORD *)(a1 + 1816);
    if (v174 == v175)
      goto LABEL_90;
    goto LABEL_83;
  }
  do
  {
    while (1)
    {
      v176 = (_OWORD *)(v170 + 128);
      v177 = sub_20FC77D28(v170 + 8, (uint64_t *)(v170 + 64), v170 + 128, v29, v13, _Q2.f64[0], _Q3.f64[0], v16.f64[0], v17, *(double *)v18.i64, v19);
      *(_BYTE *)(v170 + 152) = v177;
      if (v177)
        break;
      v29 = -0.0;
      v13 = 0.0;
      *(_QWORD *)(v170 + 144) = 0;
      v173 = v173 + -0.0;
      v170 += 184;
      if (v170 == v171)
        goto LABEL_82;
    }
    v178 = *(_QWORD *)(v170 + 160);
    if (v178)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v178 + 24))(v178, v170 + 128);
    *(_OWORD *)(v170 + 112) = *v176;
    _Q0 = *v176;
    _Q2.f64[0] = *(float64_t *)(v170 + 136);
    __asm { FMLA            D1, D2, V0.D[1] }
    v29 = *(double *)(a1 + 288) * _D1;
    v13 = v29;
    *(double *)(v170 + 144) = v29;
    v173 = v173 + v29;
    v170 += 184;
  }
  while (v170 != v171);
LABEL_82:
  v29 = 0.5;
  v173 = v173 * 0.5;
  *(double *)(a3[64] + 136) = v173;
  v174 = *(_QWORD *)(a1 + 1808);
  v175 = *(_QWORD *)(a1 + 1816);
  if (v174 != v175)
  {
LABEL_83:
    v181 = 0.0;
    do
    {
      while (1)
      {
        v182 = sub_20FC7D7A0(v174 + 8, (uint64_t *)(v174 + 64), (double *)(v174 + 160), v29, v13, _Q2.f64[0], _Q3.f64[0], v16, v17.f64[0], *(double *)v18.i64, v19);
        *(_BYTE *)(v174 + 176) = v182;
        if (v182)
          break;
        v29 = -0.0;
        v13 = 0.0;
        *(_QWORD *)(v174 + 168) = 0;
        v181 = v181 + -0.0;
        v174 += 208;
        if (v174 == v175)
          goto LABEL_89;
      }
      v183 = *(_QWORD *)(v174 + 184);
      if (v183)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v183 + 24))(v183, v174 + 160);
      v184 = *(double *)(v174 + 160);
      *(double *)(v174 + 152) = v184;
      v29 = *(double *)(a1 + 304) * (v184 * v184);
      v13 = v29;
      *(double *)(v174 + 168) = v29;
      v181 = v181 + v29;
      v174 += 208;
    }
    while (v174 != v175);
LABEL_89:
    v172 = v181 * 0.5;
  }
LABEL_90:
  *(double *)(a3[64] + 144) = v172;
  return v187 + a4 + v186 + v28 + v96 + v95 + v115 + v114 + v173 + v172;
}

void sub_20FBC7974(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  _DWORD *v3;
  double *v4;
  double *v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  BOOL v18;
  unsigned int v19;
  int v20;
  _BYTE *v21;
  uint64_t v22;
  _BYTE *v23;
  int64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  unint64_t v28;
  char *v29;
  BOOL v30;
  char *v31;
  size_t v32;
  char *v33;
  char *v34;
  unsigned __int8 *v35;
  unsigned int *v36;
  int v37;
  _DWORD *v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  float64x2_t v42;
  float64x2_t v43;
  int *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  float64x2_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  int v59;
  unint64_t v60;
  unsigned int v61;
  int v62;
  int v63;
  uint64_t v64;
  unsigned int v65;
  char *v66;
  char v67;
  uint64_t v68;
  int v69;
  char *v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int *v75;
  uint64_t v76;
  int v77;
  float64x2_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  unsigned int v86;
  unint64_t v87;
  uint64_t v88;
  const void *v89;
  _QWORD *v90;
  _DWORD *v91;
  float64x2_t v92;
  _OWORD *v93;
  float64x2_t v94;
  float64x2_t v95;
  int64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  uint64_t v100;
  double v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  __int128 v105;
  char v106;
  double v107;
  double v108;
  float64x2_t v109;
  unint64_t v110;
  float64x2_t v111;
  float64x2_t v112;
  int v113;
  double v114;
  double v115;
  long double v116;
  long double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  float64x2_t v123;
  float64x2_t v124;
  _BYTE *v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int *v128;
  unsigned int *i;
  unsigned int *v130;
  unsigned int *j;
  unsigned int *v132;
  unsigned int *v133;
  uint64_t v134;
  uint64_t v135;
  unsigned int v136;
  char *v137;
  char *v138;
  unint64_t v139;
  unint64_t v140;
  unsigned int *v141;
  char *v142;
  unsigned int v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  unint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  _BYTE *v154;
  unsigned int *v155;
  int64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  _OWORD *v161;
  char *v162;
  uint64_t v163;
  __int128 v164;
  unsigned int v165;
  unsigned int *v166;
  unsigned int *v167;
  uint64_t v168;
  uint64_t v169;
  unsigned int v170;
  char *v171;
  char *v172;
  unint64_t v173;
  unint64_t v174;
  unsigned int *v175;
  char *v176;
  unsigned int v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  unint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  _BYTE *v188;
  unsigned int *v189;
  int64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  _OWORD *v195;
  char *v196;
  uint64_t v197;
  __int128 v198;
  unsigned int v199;
  unsigned int *v200;
  unsigned int *v201;
  unsigned int *v202;
  unsigned int *v203;
  uint64_t v204;
  uint64_t v205;
  unsigned int v206;
  char *v207;
  char *v208;
  unint64_t v209;
  unint64_t v210;
  unsigned int *v211;
  char *v212;
  unsigned int v213;
  uint64_t v214;
  char *v215;
  unint64_t v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  unint64_t v222;
  _BYTE *v223;
  unsigned int *v224;
  int64_t v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  char *v229;
  _OWORD *v230;
  char *v231;
  uint64_t v232;
  __int128 v233;
  unsigned int v234;
  char *v235;
  unsigned int *v236;
  unsigned int *v237;
  uint64_t v238;
  uint64_t v239;
  unsigned int v240;
  char *v241;
  char *v242;
  unint64_t v243;
  unint64_t v244;
  unsigned int *v245;
  char *v246;
  unsigned int v247;
  uint64_t v248;
  char *v249;
  unint64_t v250;
  char *v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  unint64_t v256;
  _BYTE *v257;
  unsigned int *v258;
  int64_t v259;
  unint64_t v260;
  uint64_t v261;
  uint64_t v262;
  char *v263;
  _OWORD *v264;
  char *v265;
  uint64_t v266;
  __int128 v267;
  unsigned int v268;
  char *v269;
  unsigned int *v270;
  unsigned int *v271;
  uint64_t v272;
  uint64_t v273;
  unsigned int v274;
  char *v275;
  char *v276;
  unint64_t v277;
  unint64_t v278;
  unsigned int *v279;
  char *v280;
  unsigned int v281;
  uint64_t v282;
  char *v283;
  unint64_t v284;
  char *v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  uint64_t v289;
  unint64_t v290;
  _BYTE *v291;
  unsigned int *v292;
  int64_t v293;
  unint64_t v294;
  uint64_t v295;
  uint64_t v296;
  char *v297;
  _OWORD *v298;
  char *v299;
  uint64_t v300;
  __int128 v301;
  unsigned int v302;
  char *v303;
  unsigned int *v304;
  unsigned int *v305;
  uint64_t v306;
  uint64_t v307;
  unsigned int v308;
  char *v309;
  char *v310;
  unint64_t v311;
  unint64_t v312;
  unsigned int *v313;
  char *v314;
  unsigned int v315;
  uint64_t v316;
  char *v317;
  unint64_t v318;
  char *v319;
  uint64_t v320;
  uint64_t v321;
  unint64_t v322;
  uint64_t v323;
  unint64_t v324;
  _BYTE *v325;
  unsigned int *v326;
  int64_t v327;
  unint64_t v328;
  uint64_t v329;
  uint64_t v330;
  char *v331;
  _OWORD *v332;
  char *v333;
  uint64_t v334;
  __int128 v335;
  unsigned int v336;
  char *v337;
  unsigned int *v338;
  unsigned int *v339;
  uint64_t v340;
  uint64_t v341;
  unsigned int v342;
  char *v343;
  char *v344;
  unint64_t v345;
  unint64_t v346;
  unsigned int *v347;
  char *v348;
  unsigned int v349;
  uint64_t v350;
  char *v351;
  unint64_t v352;
  char *v353;
  uint64_t v354;
  uint64_t v355;
  unint64_t v356;
  uint64_t v357;
  unint64_t v358;
  _BYTE *v359;
  unsigned int *v360;
  int64_t v361;
  unint64_t v362;
  uint64_t v363;
  uint64_t v364;
  char *v365;
  _OWORD *v366;
  char *v367;
  uint64_t v368;
  __int128 v369;
  unsigned int v370;
  char *v371;
  unsigned int *v372;
  unsigned int *m;
  uint64_t v374;
  unsigned int v375;
  __int128 *v376;
  uint64_t v377;
  uint64_t v378;
  __int128 v379;
  std::logic_error *exception;
  _QWORD *v381;
  uint64_t v382;
  _DWORD *v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  _QWORD *v387;
  uint64_t v388;
  float64x2_t *v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  char v394;
  int v395;
  _OWORD *v396;
  float64x2_t *v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  unint64_t v402;
  uint64_t v403;
  uint64_t v404;
  unsigned int v405;
  uint64_t v406;
  void **v407;
  void **v408;
  void **v409;
  void **v410;
  void **v411;
  void **v412;
  void **v413;
  _QWORD *k;
  float64x2_t v415[3];
  __int128 v416;
  uint64_t v417;
  _OWORD v418[2];
  __int128 v419;
  _OWORD v420[3];
  __int128 v421;
  uint64_t v422;
  float64x2_t v423;
  double v424;
  _DWORD v425[20];
  _QWORD v426[20];
  uint64_t v427;
  int v428;
  unsigned int v429;
  _DWORD v430[507];
  int v431;
  _BYTE v432[300];
  int v433;
  _WORD v434[302];
  int v435;
  _DWORD v436[300];
  int v437;
  _DWORD v438[2];
  int v439;
  uint64_t v440[21];
  int v441;
  int v442;
  _OWORD v443[240];
  int v444;
  int v445;
  int v446;
  uint64_t v447;

  MEMORY[0x24BDAC7A8](a1);
  v2 = *v1;
  v3 = (_DWORD *)(*v1 + 57912);
  if (!*(_BYTE *)(*v1 + 58160))
    return;
  if (*(_DWORD *)(*v1 + 58012))
  {
    v4 = *(double **)v1[1];
    if (v4)
    {
      v5 = *(double **)v1[2];
      if (v5)
      {
        if (*v4 > *v5)
          goto LABEL_14;
      }
    }
    if ((*(_QWORD *)(v2 + 18552) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      v6 = *(_QWORD *)v3;
      v7 = 0.0;
      if (*(_BYTE *)(*(_QWORD *)v3 + 31281))
      {
        v7 = *(double *)(v6 + 31288);
        if (v7 < 0.0)
        {
          v8 = *(unsigned int *)(v6 + 2072);
          v7 = 0.0;
          if ((_DWORD)v8)
          {
            do
            {
              v9 = vabdd_f64(*(double *)(v6 + 2056), *(double *)(v6 + 365896));
              if (v7 < v9)
                v7 = v9;
              v6 += 8;
              --v8;
            }
            while (v8);
          }
        }
      }
      if (v7 > *(double *)(v2 + 18552))
      {
LABEL_14:
        ++*(_DWORD *)(*v1 + 58004);
        sub_20FBCBF58(v2);
        if (*(_BYTE *)(*(_QWORD *)v3 + 31281))
        {
          sub_20F904994(*(_QWORD *)v3 + 64, (__int128 *)(*(_QWORD *)v3 + 363904));
          *(_BYTE *)(*(_QWORD *)v3 + 31281) = 0;
        }
      }
    }
  }
  v383 = v3;
  *(_DWORD *)(v2 + 2980) = *(_DWORD *)(v2 + 40308);
  v382 = v2 + 40308;
  v387 = (_QWORD *)v2;
  if (*(_BYTE *)(v2 + 40312))
  {
    v381 = (_QWORD *)(v2 + 57488);
    v10 = *(_QWORD *)v3;
    if (v3[25] && *(_DWORD *)(*(_QWORD *)v3 + 42744))
    {
LABEL_138:
      v125 = (_BYTE *)(v10 + 35540);
      v126 = *(unsigned int *)(v10 + 42736);
      if ((_DWORD)v126)
      {
        v127 = 24 * v126;
        do
        {
          if (!*v125
            && sub_20FBCB53C(v2 + 312, *(_DWORD *)(*v381 + 1000 * *((unsigned int *)v125 - 1))))
          {
            *(_WORD *)(v2 + 2972) = 0;
            *(_DWORD *)(v2 + 2968) = 0;
          }
          v125 += 24;
          v127 -= 24;
        }
        while (v127);
      }
      goto LABEL_144;
    }
    v400 = *(_QWORD *)v3 + 42744;
    v397 = (float64x2_t *)(v10 + 35384);
    if (*(_DWORD *)(v2 + 57680))
    {
      v11 = *(_QWORD *)(v2 + 57688);
      if (*(_BYTE *)(v11 + 8))
      {
        v12 = *(int **)(v2 + 57688);
      }
      else
      {
        v13 = -1431655765 * ((unint64_t)(*(_QWORD *)(v2 + 57696) - v11) >> 2);
        if (v13 <= 1)
          v13 = 1;
        v14 = v13 - 1 + 1;
        while (--v14)
        {
          v12 = (int *)(v11 + 12);
          v15 = *(unsigned __int8 *)(v11 + 20);
          v11 += 12;
          if (v15)
            goto LABEL_30;
        }
        v12 = *(int **)(v2 + 57696);
      }
    }
    else
    {
      v12 = *(int **)(v2 + 57696);
    }
LABEL_30:
    v16 = *(_DWORD *)(v10 + 35528);
    if (v16 >= 1)
    {
      v17 = *(_QWORD *)(v2 + 57688);
      do
      {
        v19 = 1 - 1431655765 * (((unint64_t)v12 - v17) >> 2);
        while (v19 < -1431655765 * ((unint64_t)(*(_QWORD *)(v2 + 57696) - v17) >> 2))
        {
          v12 = (int *)(v17 + 12 * v19++);
          if (*((_BYTE *)v12 + 8))
            goto LABEL_33;
        }
        v12 = *(int **)(v2 + 57696);
LABEL_33:
        v18 = __OFSUB__(v16--, 1);
      }
      while (!((v16 < 0) ^ v18 | (v16 == 0)));
    }
    v20 = *v12;
    kdebug_trace();
    v22 = *(_QWORD *)(v2 + 57680);
    v21 = *(_BYTE **)(v2 + 57688);
    v23 = *(_BYTE **)(v2 + 57696);
    v24 = v23 - v21;
    v25 = 0xAAAAAAAAAAAAAAABLL * ((v23 - v21) >> 2);
    if (v23 == v21)
    {
      v26 = 0;
      v27 = 0;
      if (!(_DWORD)v22)
        goto LABEL_50;
    }
    else
    {
      if (v25 > 0x1555555555555555)
        sub_20E867F44();
      v26 = (char *)operator new(v23 - v21);
      memcpy(v26, v21, 12 * ((v24 - 12) / 0xCuLL) + 12);
      v27 = &v26[12 * ((v24 - 12) / 0xCuLL) + 12];
      if (!(_DWORD)v22)
        goto LABEL_50;
    }
    v28 = (v20 - HIDWORD(v22));
    if (0xAAAAAAAAAAAAAAABLL * ((v27 - v26) >> 2) > v28)
    {
      v29 = &v26[12 * v28];
      v30 = v29 == v27 || v29[8] == 0;
      if (v30)
      {
        v395 = -1;
      }
      else
      {
        if (v23 == v21)
        {
          v31 = 0;
          v33 = 0;
        }
        else
        {
          if (v25 > 0x1555555555555555)
            sub_20E867F44();
          v31 = (char *)operator new(v23 - v21);
          v32 = 12 * ((v24 - 12) / 0xCuLL) + 12;
          memcpy(v31, v21, v32);
          v33 = &v31[v32];
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v33 - v31) >> 2) <= v28
          || (v34 = &v31[12 * v28], v34 == v33)
          || !v34[8])
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "Key does not exist in the map.");
          exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
          __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
        }
        v395 = *((_DWORD *)v34 + 1);
        operator delete(v31);
      }
      goto LABEL_60;
    }
LABEL_50:
    v395 = -1;
    if (!v26)
    {
LABEL_61:
      v396 = (_OWORD *)(v10 + 35480);
      v389 = (float64x2_t *)(v10 + 35432);
      v406 = v10 + 35536;
      v35 = (unsigned __int8 *)(*(_QWORD *)v383 + 35376);
      v398 = *(_QWORD *)v383;
      v36 = (unsigned int *)(*(_QWORD *)v383 + 30920);
      v37 = *v35;
      if (*v35
        && *(_BYTE *)(*(_QWORD *)v383 + 31281)
        && *((_BYTE *)v383 + 142)
        && !*((_BYTE *)v383 + 141)
        && *(double *)(*(_QWORD *)v383 + 35384) == v397->f64[0]
        && *(double *)(*(_QWORD *)v383 + 35392) == *(double *)(v10 + 35392)
        && *(double *)(*(_QWORD *)v383 + 35400) == *(double *)(v10 + 35400)
        && *(_DWORD *)(*(_QWORD *)v383 + 35424) == *(_DWORD *)(v10 + 35424)
        && *(double *)(*(_QWORD *)v383 + 35408) == *(double *)(v10 + 35408)
        && *(double *)(*(_QWORD *)v383 + 35416) == *(double *)(v10 + 35416)
        && *(double *)(*(_QWORD *)v383 + 35432) == v389->f64[0]
        && *(double *)(*(_QWORD *)v383 + 35440) == *(double *)(v10 + 35440)
        && *(double *)(*(_QWORD *)v383 + 35448) == *(double *)(v10 + 35448)
        && *(_DWORD *)(*(_QWORD *)v383 + 35472) == *(_DWORD *)(v10 + 35472)
        && *(double *)(*(_QWORD *)v383 + 35456) == *(double *)(v10 + 35456)
        && *(double *)(*(_QWORD *)v383 + 35464) == *(double *)(v10 + 35464)
        && sub_20FBC98B8(v398 + 35480, (uint64_t)v396)
        && *((_DWORD *)v35 + 38) == v395)
      {
        v374 = *((unsigned int *)v35 + 1840);
        *(_DWORD *)(v10 + 42736) = 0;
        if ((_DWORD)v374)
        {
          v375 = 0;
          v376 = (__int128 *)(v398 + 35536);
          v377 = 24 * v374;
          do
          {
            v378 = v406 + 24 * v375;
            v379 = *v376;
            *(_QWORD *)(v378 + 16) = *((_QWORD *)v376 + 2);
            *(_OWORD *)v378 = v379;
            v376 = (__int128 *)((char *)v376 + 24);
            v375 = *(_DWORD *)(v10 + 42736) + 1;
            *(_DWORD *)(v10 + 42736) = v375;
            v377 -= 24;
          }
          while (v377);
        }
        sub_20F9050F0((_DWORD *)v400, v398 + 42748, 0, v398 + 42748, *(_DWORD *)(v398 + 42744));
        *(_DWORD *)(v400 + 48) = *(_DWORD *)(v398 + 42792);
        *(_DWORD *)(v400 + 52) = *(_DWORD *)(v398 + 42796);
        *(_QWORD *)(v400 + 56) = *(_QWORD *)(v398 + 42800);
        *(_QWORD *)(v400 + 64) = *(_QWORD *)(v398 + 42808);
        *(_QWORD *)(v400 + 72) = *(_QWORD *)(v398 + 42816);
        *(_DWORD *)(v400 + 44) = *(_DWORD *)(v398 + 42788);
        ++v383[47];
      }
      else
      {
        if (v35[156])
          ++v383[48];
        if (v37)
        {
          if (*((_BYTE *)v383 + 142) && !*((_BYTE *)v383 + 141))
          {
            if (*((_BYTE *)v36 + 361))
              v38 = v383 + 52;
            else
              v38 = v383 + 51;
          }
          else
          {
            v38 = v383 + 50;
          }
        }
        else
        {
          v38 = v383 + 49;
        }
        ++*v38;
        ++*(_DWORD *)(v398 + 363816);
        *(_DWORD *)(v400 + 76) = 0;
        *(_OWORD *)(v400 + 44) = 0u;
        *(_OWORD *)(v400 + 60) = 0u;
        v39 = *v36;
        *(_DWORD *)v400 = 0;
        v390 = v10 + 42748;
        if ((_DWORD)v39)
        {
          v40 = 0;
          do
          {
            *(_DWORD *)(v390 + 4 * (v40 >> 5)) &= ~(1 << v40);
            ++v40;
          }
          while ((_DWORD)v39 != v40);
          *(_DWORD *)v400 = v39;
        }
        v41 = *(unsigned int *)(v10 + 42736);
        if (v41 < v39)
          bzero((void *)(v406 + 24 * v41), 24 * (v39 - v41));
        *(_DWORD *)(v10 + 42736) = v39;
        v440[0] = 0;
        v441 = 0;
        v444 = 0;
        v445 = 0;
        v446 = 0;
        v447 = 0;
        sub_20FBCAE10((uint64_t)v440, (_DWORD *)(v398 + 64), 1);
        v44 = (int *)(v398 + 578688);
        v447 = 0;
        v45 = *(unsigned int *)(v398 + 578696);
        v439 = 0;
        if ((_DWORD)v45)
        {
          LODWORD(v46) = 0;
          v47 = 4 * v45;
          do
          {
            v48 = *v44++;
            v438[v46] = v48;
            v46 = ++v439;
            v47 -= 4;
          }
          while (v47);
          v49 = vaddq_f64(*(float64x2_t *)(v398 + 43824), (float64x2_t)0);
          *(float64x2_t *)(v398 + 43808) = vaddq_f64(*(float64x2_t *)(v398 + 43808), (float64x2_t)0);
          *(float64x2_t *)(v398 + 43824) = v49;
          if ((_DWORD)v46)
          {
            v50 = 0;
            v405 = 0;
            v384 = v46;
            do
            {
              v51 = v438[v50];
              v401 = v50;
              if (v51)
              {
                v52 = 0;
                v385 = 339548 * v50 + 581056;
                v386 = v438[v50];
                v388 = v398 + 578700 + 339548 * v50 + 4;
                do
                {
                  v53 = 169772 * v52;
                  v399 = v52;
                  if (v52)
                    v54 = 1;
                  else
                    v54 = v51;
                  v402 = v54;
                  v433 = 0;
                  v435 = 0;
                  v437 = 0;
                  v55 = (_DWORD *)(v388 + v53);
                  v431 = 0;
                  v429 = 0;
                  v56 = *(_QWORD *)(v388 + 169772 * v52);
                  v428 = *(_DWORD *)(v388 + v53 + 8);
                  v427 = v56;
                  if (&v427 != (uint64_t *)(v388 + v53))
                  {
                    v57 = v55[3];
                    if (v57)
                    {
                      v58 = 0;
                      LOBYTE(v59) = 0;
                      v60 = 0;
                      do
                      {
                        v61 = v58 >> 5;
                        v62 = 1 << v58;
                        v63 = ((*(_DWORD *)((char *)v55 + ((v60 >> 3) & 0x1FFFFFFFFFFFFFFCLL) + 16) >> v59) & 1) << v58++;
                        v430[v61] = v63 | v430[v61] & ~v62;
                        v59 = v60 + 1;
                        v60 = (v60 + 1);
                      }
                      while (v57 != v59);
                      v429 = v58;
                    }
                    v64 = v55[511];
                    v431 = 0;
                    if ((_DWORD)v64)
                    {
                      v65 = 0;
                      v66 = (char *)(v55 + 436);
                      do
                      {
                        v67 = *v66++;
                        *((_BYTE *)&v430[432] + v65) = v67;
                        v65 = ++v431;
                        --v64;
                      }
                      while (v64);
                    }
                    v68 = v55[587];
                    v433 = 0;
                    if ((_DWORD)v68)
                    {
                      v69 = 0;
                      v70 = (char *)(v55 + 512);
                      do
                      {
                        v71 = *v70++;
                        v432[v69] = v71;
                        v69 = ++v433;
                        --v68;
                      }
                      while (v68);
                    }
                    v72 = v55[739];
                    if ((_DWORD)v72)
                      memcpy(v434, (const void *)(v398 + v385 + v53), 2 * v72);
                    v435 = v72;
                    v73 = v55[1040];
                    v437 = 0;
                    if ((_DWORD)v73)
                    {
                      v74 = 0;
                      v75 = v55 + 740;
                      v76 = 4 * v73;
                      do
                      {
                        v77 = *v75++;
                        v436[v74] = v77;
                        v74 = ++v437;
                        v76 -= 4;
                      }
                      while (v76);
                    }
                  }
                  v78 = vaddq_f64(*(float64x2_t *)(v398 + 43824), (float64x2_t)0);
                  *(float64x2_t *)(v398 + 43808) = vaddq_f64(*(float64x2_t *)(v398 + 43808), (float64x2_t)0);
                  *(float64x2_t *)(v398 + 43824) = v78;
                  v403 = v427;
                  if ((_DWORD)v427)
                  {
                    v79 = 0;
                    v394 = v402 > 1;
                    v80 = v388 + 169772 * v399;
                    v393 = v80 + 4164;
                    v391 = v80 + 114568;
                    v392 = v80 + 2352;
                    do
                    {
                      while (1)
                      {
                        v81 = (unsigned __int16)v434[v79];
                        v82 = v81 >> 1;
                        if (((v430[(v81 >> 1) >> 5] >> (v81 >> 1)) & 1) != 0)
                          break;
                        if (++v79 == v403)
                          goto LABEL_86;
                      }
                      v83 = v436[v79];
                      v84 = v432[v79];
                      v85 = *((unsigned __int8 *)&v430[432] + v79);
                      v404 = v79 + 1;
                      v86 = (unsigned __int16)v434[v79 + 1] - (_DWORD)v81;
                      v87 = v86 >> 1;
                      if (v86 >= 2)
                      {
                        v88 = *(unsigned __int16 *)(v392 + 2 * v79);
                        v89 = (const void *)(v391 + 4 * v88);
                        memcpy(v426, (const void *)(v393 + 8 * v88), 8 * ((_DWORD)v87 << v394));
                        memcpy(v425, v89, 4 * ((_DWORD)v87 << v394));
                      }
                      if (v402 <= 1)
                        v90 = 0;
                      else
                        v90 = &v426[v87];
                      if (v402 <= 1)
                        v91 = 0;
                      else
                        v91 = &v425[v87];
                      v92 = vaddq_f64(*(float64x2_t *)(v398 + 43824), (float64x2_t)0);
                      *(float64x2_t *)(v398 + 43808) = vaddq_f64(*(float64x2_t *)(v398 + 43808), (float64x2_t)0);
                      *(float64x2_t *)(v398 + 43824) = v92;
                      v93 = &v443[6 * (v399 + *((_DWORD *)&v440[1] + v401) + v442 * v85)];
                      v95 = *(float64x2_t *)v93;
                      v94 = *((float64x2_t *)v93 + 1);
                      v97 = *((float64x2_t *)v93 + 2);
                      v96 = *((int64x2_t *)v93 + 3);
                      v99 = *((float64x2_t *)v93 + 4);
                      v98 = *((float64x2_t *)v93 + 5);
                      *(_QWORD *)&v95.f64[1] = vdupq_laneq_s64(*(int64x2_t *)v93, 1).u64[0];
                      v100 = v398 + 21320 + 32 * v83;
                      v42.f64[0] = *(float64_t *)(v100 + 16);
                      v43.f64[0] = *(float64_t *)(v100 + 24);
                      *(_QWORD *)&v101 = *(_OWORD *)&vmlaq_f64(vnegq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v98, 1)), v42, v43);
                      v102 = vmlaq_n_f64(vnegq_f64((float64x2_t)vzip2q_s64((int64x2_t)v94, v96)), *(float64x2_t *)v100, v43.f64[0]);
                      v423 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v95, v102.f64[0]), v97, v102, 1), v99, v101);
                      v424 = vmlad_n_f64(vmlad_n_f64(vmulq_f64(v94, v102).f64[0], v102.f64[1], *(double *)v96.i64), v101, v98.f64[0]);
                      LODWORD(v421) = 0;
                      BYTE4(v421) = 0;
                      *((_QWORD *)&v421 + 1) = 0;
                      LODWORD(v422) = 0;
                      BYTE4(v422) = 1;
                      v103 = *v397;
                      v104 = v397[2];
                      v420[1] = v397[1];
                      v420[2] = v104;
                      v105 = v396[1];
                      v418[0] = *v396;
                      v418[1] = v105;
                      v419 = v396[2];
                      v420[0] = v103;
                      v106 = sub_20FBC9924((uint64_t)v440, v401, v402, v84, v87, (uint64_t)v430, v82, (uint64_t)v426, *(double *)&v419, *(double *)&v105, v104, v103.f64[0], v98, (uint64_t)v90, (uint64_t)v425, (uint64_t)v91, &v423, (uint64_t)v420, (uint64_t)v418,
                               (int *)&v421);
                      LODWORD(v416) = 0;
                      BYTE4(v416) = 0;
                      *((_QWORD *)&v416 + 1) = 0;
                      LODWORD(v417) = 0;
                      BYTE4(v417) = 1;
                      if ((v106 & 1) != 0)
                      {
                        v416 = v421;
                        v417 = v422;
                      }
                      else
                      {
                        v110 = (unint64_t)(unsigned __int16)v434[v79] >> 1;
                        v112 = v397[4];
                        v111 = v397[5];
                        v415[0] = *v389;
                        v415[1] = v112;
                        v415[2] = v111;
                        sub_20FBCA4B0(v440, v401, v402, v84, v87, (uint64_t)v430, v110, (uint64_t)v426, v111.f64[0], v112.f64[0], v415[0], v107, v108, v109, (uint64_t)v90, (uint64_t)v425, (uint64_t)v91, &v423, (uint64_t)v415,
                          1u,
                          (int *)&v416);
                      }
                      v113 = *(_DWORD *)(v400 + 52);
                      *(_DWORD *)(v400 + 48) += v421;
                      *(_DWORD *)(v400 + 52) = v113 + BYTE4(v421);
                      v114 = *((double *)&v421 + 1);
                      if ((v106 & 1) != 0)
                      {
                        if (*((double *)&v421 + 1) >= -1.0)
                          v115 = *((double *)&v421 + 1);
                        else
                          v115 = -1.0;
                        v116 = fmin(v115, 1.0);
                        v117 = acos(v116);
                        v118 = 1.0 - v116 * v116;
                        v119 = sqrt(v118) + *(double *)(v400 + 64);
                        *(long double *)(v400 + 56) = *(double *)(v400 + 56) + v117 * 57.2957795;
                        *(double *)(v400 + 64) = v119;
                        *(double *)(v400 + 72) = v118 + *(double *)(v400 + 72);
                        ++*(_DWORD *)(v400 + 44);
                      }
                      v120 = NAN;
                      if (BYTE4(v422))
                        v121 = v114;
                      else
                        v121 = NAN;
                      v122 = *((double *)&v416 + 1);
                      v30 = BYTE4(v417) == 0;
                      *(_DWORD *)v406 = v83;
                      if (!v30)
                        v120 = v122;
                      *(_BYTE *)(v406 + 4) = v106 & 1;
                      *(_BYTE *)(v406 + 5) = (v106 & 2) != 0;
                      *(_BYTE *)(v406 + 6) = v395 == v85;
                      *(double *)(v406 + 8) = v121;
                      *(double *)(v406 + 16) = v120;
                      if ((v106 & 1) != 0)
                        *(_DWORD *)(v390 + 4 * (v405 >> 5)) ^= 1 << v405;
                      v406 += 24;
                      ++v405;
                      ++v79;
                    }
                    while (v404 != v403);
                  }
LABEL_86:
                  v52 = v399 + 1;
                  v51 = v386;
                  v2 = (uint64_t)v387;
                }
                while (v399 + 1 != v386);
              }
              v50 = v401 + 1;
            }
            while (v401 + 1 != v384);
          }
        }
        else
        {
          v123 = vaddq_f64(*(float64x2_t *)(v398 + 43824), (float64x2_t)0);
          *(float64x2_t *)(v398 + 43808) = vaddq_f64(*(float64x2_t *)(v398 + 43808), (float64x2_t)0);
          *(float64x2_t *)(v398 + 43824) = v123;
        }
        v124 = vaddq_f64(*(float64x2_t *)(v398 + 44016), (float64x2_t)0);
        *(float64x2_t *)(v398 + 44000) = vaddq_f64(*(float64x2_t *)(v398 + 44000), (float64x2_t)0);
        *(float64x2_t *)(v398 + 44016) = v124;
      }
      kdebug_trace();
      v10 = *(_QWORD *)v383;
      goto LABEL_138;
    }
LABEL_60:
    operator delete(v26);
    goto LABEL_61;
  }
LABEL_144:
  v128 = *(unsigned int **)(v382 + 164);
  for (i = *(unsigned int **)(v382 + 172); v128 != i; ++v128)
  {
    if (sub_20FBCB744(v2 + 312, *v128))
    {
      *(_WORD *)(v2 + 2972) = 0;
      *(_DWORD *)(v2 + 2968) = 0;
    }
  }
  v130 = *(unsigned int **)(v382 + 188);
  for (j = *(unsigned int **)(v382 + 196); v130 != j; ++v130)
  {
    if (sub_20FBCB948(v2 + 312, *v130))
    {
      *(_WORD *)(v2 + 2972) = 0;
      *(_DWORD *)(v2 + 2968) = 0;
    }
  }
  v132 = *(unsigned int **)(v382 + 212);
  v133 = *(unsigned int **)(v382 + 220);
  if (v132 != v133)
  {
    v134 = v2 + 2968;
    v412 = (void **)(v2 + 1960);
    while (1)
    {
      v136 = *v132;
      v137 = *(char **)(v2 + 512);
      v138 = *(char **)(v2 + 520);
      if (v138 != v137)
      {
        v139 = (v138 - v137) >> 4;
        do
        {
          v140 = v139 >> 1;
          v141 = (unsigned int *)&v137[16 * (v139 >> 1)];
          v143 = *v141;
          v142 = (char *)(v141 + 4);
          v139 += ~(v139 >> 1);
          if (v143 < v136)
            v137 = v142;
          else
            v139 = v140;
        }
        while (v139);
      }
      if (v137 == v138)
        goto LABEL_158;
      if (*(_DWORD *)v137 != v136)
        goto LABEL_158;
      v144 = *((_QWORD *)v137 + 1);
      if ((*(_BYTE *)(v144 + 4) & 7) != 0)
        goto LABEL_158;
      *(_BYTE *)(v144 + 4) ^= 4u;
      v145 = v2;
      v146 = *(char **)(v2 + 1968);
      v147 = *(_QWORD *)(v145 + 1976);
      if ((unint64_t)v146 >= v147)
        break;
      *(_DWORD *)v146 = v136;
      v135 = (uint64_t)(v146 + 4);
      v2 = (uint64_t)v387;
LABEL_157:
      *(_QWORD *)(v2 + 1968) = v135;
      *(_BYTE *)(v2 + 1906) = 0;
      *(_WORD *)(v2 + 1904) = 256;
      *(_DWORD *)v134 = 0;
      *(_WORD *)(v134 + 4) = 0;
LABEL_158:
      if (++v132 == v133)
        goto LABEL_189;
    }
    v148 = (char *)*v412;
    v149 = v146 - (_BYTE *)*v412;
    v150 = v149 >> 2;
    v151 = (v149 >> 2) + 1;
    if (v151 >> 62)
LABEL_434:
      sub_20E867F44();
    v152 = v147 - (_QWORD)v148;
    if (v152 >> 1 > v151)
      v151 = v152 >> 1;
    if ((unint64_t)v152 >= 0x7FFFFFFFFFFFFFFCLL)
      v153 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v153 = v151;
    if (v153)
    {
      if (v153 >> 62)
LABEL_433:
        sub_20E877A38();
      v154 = operator new(4 * v153);
      v155 = (unsigned int *)&v154[4 * v150];
      *v155 = v136;
      v135 = (uint64_t)(v155 + 1);
      v156 = v146 - v148;
      if (v146 == v148)
        goto LABEL_186;
    }
    else
    {
      v154 = 0;
      v155 = (unsigned int *)(4 * v150);
      *(_DWORD *)(4 * v150) = v136;
      v135 = 4 * v150 + 4;
      v156 = v146 - v148;
      if (v146 == v148)
      {
LABEL_186:
        v2 = (uint64_t)v387;
        v387[245] = v155;
        v387[246] = v135;
        v387[247] = &v154[4 * v153];
        if (v148)
          operator delete(v148);
        goto LABEL_157;
      }
    }
    v157 = v156 - 4;
    if (v157 < 0x2C)
      goto LABEL_440;
    if ((unint64_t)(v146 - v154 - v149) < 0x20)
      goto LABEL_440;
    v158 = (v157 >> 2) + 1;
    v159 = 4 * (v158 & 0x7FFFFFFFFFFFFFF8);
    v160 = &v146[-v159];
    v155 = (unsigned int *)((char *)v155 - v159);
    v161 = &v154[4 * v150 - 16];
    v162 = v146 - 16;
    v163 = v158 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v164 = *(_OWORD *)v162;
      *(v161 - 1) = *((_OWORD *)v162 - 1);
      *v161 = v164;
      v161 -= 2;
      v162 -= 32;
      v163 -= 8;
    }
    while (v163);
    v146 = v160;
    if (v158 != (v158 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_440:
      do
      {
        v165 = *((_DWORD *)v146 - 1);
        v146 -= 4;
        *--v155 = v165;
      }
      while (v146 != v148);
    }
    goto LABEL_186;
  }
LABEL_189:
  v166 = *(unsigned int **)(v382 + 236);
  v167 = *(unsigned int **)(v382 + 244);
  if (v166 != v167)
  {
    v168 = v2 + 2968;
    v413 = (void **)(v2 + 1984);
    while (1)
    {
      v170 = *v166;
      v171 = *(char **)(v2 + 608);
      v172 = *(char **)(v2 + 616);
      if (v172 != v171)
      {
        v173 = (v172 - v171) >> 4;
        do
        {
          v174 = v173 >> 1;
          v175 = (unsigned int *)&v171[16 * (v173 >> 1)];
          v177 = *v175;
          v176 = (char *)(v175 + 4);
          v173 += ~(v173 >> 1);
          if (v177 < v170)
            v171 = v176;
          else
            v173 = v174;
        }
        while (v173);
      }
      if (v171 == v172)
        goto LABEL_193;
      if (*(_DWORD *)v171 != v170)
        goto LABEL_193;
      v178 = *((_QWORD *)v171 + 1);
      if ((*(_BYTE *)(v178 + 4) & 7) != 0)
        goto LABEL_193;
      *(_BYTE *)(v178 + 4) ^= 4u;
      v179 = v2;
      v180 = *(char **)(v2 + 1992);
      v181 = *(_QWORD *)(v179 + 2000);
      if ((unint64_t)v180 >= v181)
        break;
      *(_DWORD *)v180 = v170;
      v169 = (uint64_t)(v180 + 4);
      v2 = (uint64_t)v387;
LABEL_192:
      *(_QWORD *)(v2 + 1992) = v169;
      *(_BYTE *)(v2 + 1906) = 0;
      *(_WORD *)(v2 + 1904) = 256;
      *(_DWORD *)v168 = 0;
      *(_WORD *)(v168 + 4) = 0;
LABEL_193:
      if (++v166 == v167)
        goto LABEL_224;
    }
    v182 = (char *)*v413;
    v183 = v180 - (_BYTE *)*v413;
    v184 = v183 >> 2;
    v185 = (v183 >> 2) + 1;
    if (v185 >> 62)
      goto LABEL_434;
    v186 = v181 - (_QWORD)v182;
    if (v186 >> 1 > v185)
      v185 = v186 >> 1;
    if ((unint64_t)v186 >= 0x7FFFFFFFFFFFFFFCLL)
      v187 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v187 = v185;
    if (v187)
    {
      if (v187 >> 62)
        goto LABEL_433;
      v188 = operator new(4 * v187);
      v189 = (unsigned int *)&v188[4 * v184];
      *v189 = v170;
      v169 = (uint64_t)(v189 + 1);
      v190 = v180 - v182;
      if (v180 == v182)
        goto LABEL_221;
    }
    else
    {
      v188 = 0;
      v189 = (unsigned int *)(4 * v184);
      *(_DWORD *)(4 * v184) = v170;
      v169 = 4 * v184 + 4;
      v190 = v180 - v182;
      if (v180 == v182)
      {
LABEL_221:
        v2 = (uint64_t)v387;
        v387[248] = v189;
        v387[249] = v169;
        v387[250] = &v188[4 * v187];
        if (v182)
          operator delete(v182);
        goto LABEL_192;
      }
    }
    v191 = v190 - 4;
    if (v191 < 0x2C)
      goto LABEL_441;
    if ((unint64_t)(v180 - v188 - v183) < 0x20)
      goto LABEL_441;
    v192 = (v191 >> 2) + 1;
    v193 = 4 * (v192 & 0x7FFFFFFFFFFFFFF8);
    v194 = &v180[-v193];
    v189 = (unsigned int *)((char *)v189 - v193);
    v195 = &v188[4 * v184 - 16];
    v196 = v180 - 16;
    v197 = v192 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v198 = *(_OWORD *)v196;
      *(v195 - 1) = *((_OWORD *)v196 - 1);
      *v195 = v198;
      v195 -= 2;
      v196 -= 32;
      v197 -= 8;
    }
    while (v197);
    v180 = v194;
    if (v192 != (v192 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_441:
      do
      {
        v199 = *((_DWORD *)v180 - 1);
        v180 -= 4;
        *--v189 = v199;
      }
      while (v180 != v182);
    }
    goto LABEL_221;
  }
LABEL_224:
  v200 = *(unsigned int **)(v2 + 40568);
  v201 = *(unsigned int **)(v2 + 40576);
  for (k = (_QWORD *)(v2 + 40568); v200 != v201; ++v200)
  {
    if (sub_20FBCBB4C(v2 + 312, *v200))
    {
      *(_WORD *)(v2 + 2972) = 0;
      *(_DWORD *)(v2 + 2968) = 0;
    }
  }
  v202 = *(unsigned int **)(v2 + 40592);
  v203 = *(unsigned int **)(v2 + 40600);
  if (v202 != v203)
  {
    v204 = v2 + 2968;
    v407 = (void **)(v2 + 2032);
    while (1)
    {
      v206 = *v202;
      v207 = *(char **)(v2 + 800);
      v208 = *(char **)(v2 + 808);
      if (v208 != v207)
      {
        v209 = (v208 - v207) >> 4;
        do
        {
          v210 = v209 >> 1;
          v211 = (unsigned int *)&v207[16 * (v209 >> 1)];
          v213 = *v211;
          v212 = (char *)(v211 + 4);
          v209 += ~(v209 >> 1);
          if (v213 < v206)
            v207 = v212;
          else
            v209 = v210;
        }
        while (v209);
      }
      if (v207 == v208)
        goto LABEL_233;
      if (*(_DWORD *)v207 != v206)
        goto LABEL_233;
      v214 = *((_QWORD *)v207 + 1);
      if ((*(_BYTE *)(v214 + 4) & 7) != 0)
        goto LABEL_233;
      *(_BYTE *)(v214 + 4) ^= 4u;
      v215 = *(char **)(v2 + 2040);
      v216 = *(_QWORD *)(v2 + 2048);
      if ((unint64_t)v215 >= v216)
        break;
      *(_DWORD *)v215 = v206;
      v205 = (uint64_t)(v215 + 4);
LABEL_232:
      *(_QWORD *)(v2 + 2040) = v205;
      *(_BYTE *)(v2 + 1906) = 0;
      *(_WORD *)(v2 + 1904) = 256;
      *(_DWORD *)v204 = 0;
      *(_WORD *)(v204 + 4) = 0;
LABEL_233:
      if (++v202 == v203)
        goto LABEL_264;
    }
    v217 = (char *)*v407;
    v218 = v215 - (_BYTE *)*v407;
    v219 = v218 >> 2;
    v220 = (v218 >> 2) + 1;
    if (v220 >> 62)
LABEL_432:
      sub_20E867F44();
    v221 = v216 - (_QWORD)v217;
    if (v221 >> 1 > v220)
      v220 = v221 >> 1;
    if ((unint64_t)v221 >= 0x7FFFFFFFFFFFFFFCLL)
      v222 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v222 = v220;
    if (v222)
    {
      if (v222 >> 62)
        goto LABEL_433;
      v223 = operator new(4 * v222);
      v224 = (unsigned int *)&v223[4 * v219];
      *v224 = v206;
      v205 = (uint64_t)(v224 + 1);
      v225 = v215 - v217;
      if (v215 == v217)
        goto LABEL_261;
    }
    else
    {
      v223 = 0;
      v224 = (unsigned int *)(4 * v219);
      *(_DWORD *)(4 * v219) = v206;
      v205 = 4 * v219 + 4;
      v225 = v215 - v217;
      if (v215 == v217)
      {
LABEL_261:
        v387[254] = v224;
        v235 = &v223[4 * v222];
        v2 = (uint64_t)v387;
        v387[255] = v205;
        v387[256] = v235;
        if (v217)
          operator delete(v217);
        goto LABEL_232;
      }
    }
    v226 = v225 - 4;
    if (v226 < 0x2C)
      goto LABEL_442;
    if ((unint64_t)(v215 - v223 - v218) < 0x20)
      goto LABEL_442;
    v227 = (v226 >> 2) + 1;
    v228 = 4 * (v227 & 0x7FFFFFFFFFFFFFF8);
    v229 = &v215[-v228];
    v224 = (unsigned int *)((char *)v224 - v228);
    v230 = &v223[4 * v219 - 16];
    v231 = v215 - 16;
    v232 = v227 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v233 = *(_OWORD *)v231;
      *(v230 - 1) = *((_OWORD *)v231 - 1);
      *v230 = v233;
      v230 -= 2;
      v231 -= 32;
      v232 -= 8;
    }
    while (v232);
    v215 = v229;
    if (v227 != (v227 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_442:
      do
      {
        v234 = *((_DWORD *)v215 - 1);
        v215 -= 4;
        *--v224 = v234;
      }
      while (v215 != v217);
    }
    goto LABEL_261;
  }
LABEL_264:
  v236 = (unsigned int *)k[6];
  v237 = (unsigned int *)k[7];
  if (v236 != v237)
  {
    v238 = v2 + 2968;
    v408 = (void **)(v2 + 2056);
    while (1)
    {
      v240 = *v236;
      v241 = *(char **)(v2 + 896);
      v242 = *(char **)(v2 + 904);
      if (v242 != v241)
      {
        v243 = (v242 - v241) >> 4;
        do
        {
          v244 = v243 >> 1;
          v245 = (unsigned int *)&v241[16 * (v243 >> 1)];
          v247 = *v245;
          v246 = (char *)(v245 + 4);
          v243 += ~(v243 >> 1);
          if (v247 < v240)
            v241 = v246;
          else
            v243 = v244;
        }
        while (v243);
      }
      if (v241 == v242)
        goto LABEL_268;
      if (*(_DWORD *)v241 != v240)
        goto LABEL_268;
      v248 = *((_QWORD *)v241 + 1);
      if ((*(_BYTE *)(v248 + 4) & 7) != 0)
        goto LABEL_268;
      *(_BYTE *)(v248 + 4) ^= 4u;
      v249 = *(char **)(v2 + 2064);
      v250 = *(_QWORD *)(v2 + 2072);
      if ((unint64_t)v249 >= v250)
        break;
      *(_DWORD *)v249 = v240;
      v239 = (uint64_t)(v249 + 4);
LABEL_267:
      *(_QWORD *)(v2 + 2064) = v239;
      *(_BYTE *)(v2 + 1906) = 0;
      *(_WORD *)(v2 + 1904) = 256;
      *(_DWORD *)v238 = 0;
      *(_WORD *)(v238 + 4) = 0;
LABEL_268:
      if (++v236 == v237)
        goto LABEL_299;
    }
    v251 = (char *)*v408;
    v252 = v249 - (_BYTE *)*v408;
    v253 = v252 >> 2;
    v254 = (v252 >> 2) + 1;
    if (v254 >> 62)
      goto LABEL_432;
    v255 = v250 - (_QWORD)v251;
    if (v255 >> 1 > v254)
      v254 = v255 >> 1;
    if ((unint64_t)v255 >= 0x7FFFFFFFFFFFFFFCLL)
      v256 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v256 = v254;
    if (v256)
    {
      if (v256 >> 62)
        goto LABEL_433;
      v257 = operator new(4 * v256);
      v258 = (unsigned int *)&v257[4 * v253];
      *v258 = v240;
      v239 = (uint64_t)(v258 + 1);
      v259 = v249 - v251;
      if (v249 == v251)
        goto LABEL_296;
    }
    else
    {
      v257 = 0;
      v258 = (unsigned int *)(4 * v253);
      *(_DWORD *)(4 * v253) = v240;
      v239 = 4 * v253 + 4;
      v259 = v249 - v251;
      if (v249 == v251)
      {
LABEL_296:
        v387[257] = v258;
        v269 = &v257[4 * v256];
        v2 = (uint64_t)v387;
        v387[258] = v239;
        v387[259] = v269;
        if (v251)
          operator delete(v251);
        goto LABEL_267;
      }
    }
    v260 = v259 - 4;
    if (v260 < 0x2C)
      goto LABEL_443;
    if ((unint64_t)(v249 - v257 - v252) < 0x20)
      goto LABEL_443;
    v261 = (v260 >> 2) + 1;
    v262 = 4 * (v261 & 0x7FFFFFFFFFFFFFF8);
    v263 = &v249[-v262];
    v258 = (unsigned int *)((char *)v258 - v262);
    v264 = &v257[4 * v253 - 16];
    v265 = v249 - 16;
    v266 = v261 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v267 = *(_OWORD *)v265;
      *(v264 - 1) = *((_OWORD *)v265 - 1);
      *v264 = v267;
      v264 -= 2;
      v265 -= 32;
      v266 -= 8;
    }
    while (v266);
    v249 = v263;
    if (v261 != (v261 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_443:
      do
      {
        v268 = *((_DWORD *)v249 - 1);
        v249 -= 4;
        *--v258 = v268;
      }
      while (v249 != v251);
    }
    goto LABEL_296;
  }
LABEL_299:
  v270 = (unsigned int *)k[9];
  v271 = (unsigned int *)k[10];
  if (v270 != v271)
  {
    v272 = v2 + 2968;
    v409 = (void **)(v2 + 2080);
    while (1)
    {
      v274 = *v270;
      v275 = *(char **)(v2 + 992);
      v276 = *(char **)(v2 + 1000);
      if (v276 != v275)
      {
        v277 = (v276 - v275) >> 4;
        do
        {
          v278 = v277 >> 1;
          v279 = (unsigned int *)&v275[16 * (v277 >> 1)];
          v281 = *v279;
          v280 = (char *)(v279 + 4);
          v277 += ~(v277 >> 1);
          if (v281 < v274)
            v275 = v280;
          else
            v277 = v278;
        }
        while (v277);
      }
      if (v275 == v276)
        goto LABEL_303;
      if (*(_DWORD *)v275 != v274)
        goto LABEL_303;
      v282 = *((_QWORD *)v275 + 1);
      if ((*(_BYTE *)(v282 + 4) & 7) != 0)
        goto LABEL_303;
      *(_BYTE *)(v282 + 4) ^= 4u;
      v283 = *(char **)(v2 + 2088);
      v284 = *(_QWORD *)(v2 + 2096);
      if ((unint64_t)v283 >= v284)
        break;
      *(_DWORD *)v283 = v274;
      v273 = (uint64_t)(v283 + 4);
LABEL_302:
      *(_QWORD *)(v2 + 2088) = v273;
      *(_BYTE *)(v2 + 1906) = 0;
      *(_WORD *)(v2 + 1904) = 256;
      *(_DWORD *)v272 = 0;
      *(_WORD *)(v272 + 4) = 0;
LABEL_303:
      if (++v270 == v271)
        goto LABEL_334;
    }
    v285 = (char *)*v409;
    v286 = v283 - (_BYTE *)*v409;
    v287 = v286 >> 2;
    v288 = (v286 >> 2) + 1;
    if (v288 >> 62)
      goto LABEL_432;
    v289 = v284 - (_QWORD)v285;
    if (v289 >> 1 > v288)
      v288 = v289 >> 1;
    if ((unint64_t)v289 >= 0x7FFFFFFFFFFFFFFCLL)
      v290 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v290 = v288;
    if (v290)
    {
      if (v290 >> 62)
        goto LABEL_433;
      v291 = operator new(4 * v290);
      v292 = (unsigned int *)&v291[4 * v287];
      *v292 = v274;
      v273 = (uint64_t)(v292 + 1);
      v293 = v283 - v285;
      if (v283 == v285)
        goto LABEL_331;
    }
    else
    {
      v291 = 0;
      v292 = (unsigned int *)(4 * v287);
      *(_DWORD *)(4 * v287) = v274;
      v273 = 4 * v287 + 4;
      v293 = v283 - v285;
      if (v283 == v285)
      {
LABEL_331:
        v387[260] = v292;
        v303 = &v291[4 * v290];
        v2 = (uint64_t)v387;
        v387[261] = v273;
        v387[262] = v303;
        if (v285)
          operator delete(v285);
        goto LABEL_302;
      }
    }
    v294 = v293 - 4;
    if (v294 < 0x2C)
      goto LABEL_444;
    if ((unint64_t)(v283 - v291 - v286) < 0x20)
      goto LABEL_444;
    v295 = (v294 >> 2) + 1;
    v296 = 4 * (v295 & 0x7FFFFFFFFFFFFFF8);
    v297 = &v283[-v296];
    v292 = (unsigned int *)((char *)v292 - v296);
    v298 = &v291[4 * v287 - 16];
    v299 = v283 - 16;
    v300 = v295 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v301 = *(_OWORD *)v299;
      *(v298 - 1) = *((_OWORD *)v299 - 1);
      *v298 = v301;
      v298 -= 2;
      v299 -= 32;
      v300 -= 8;
    }
    while (v300);
    v283 = v297;
    if (v295 != (v295 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_444:
      do
      {
        v302 = *((_DWORD *)v283 - 1);
        v283 -= 4;
        *--v292 = v302;
      }
      while (v283 != v285);
    }
    goto LABEL_331;
  }
LABEL_334:
  v304 = (unsigned int *)k[12];
  v305 = (unsigned int *)k[13];
  if (v304 != v305)
  {
    v306 = v2 + 2968;
    v410 = (void **)(v2 + 2104);
    while (1)
    {
      v308 = *v304;
      v309 = *(char **)(v2 + 1088);
      v310 = *(char **)(v2 + 1096);
      if (v310 != v309)
      {
        v311 = (v310 - v309) >> 4;
        do
        {
          v312 = v311 >> 1;
          v313 = (unsigned int *)&v309[16 * (v311 >> 1)];
          v315 = *v313;
          v314 = (char *)(v313 + 4);
          v311 += ~(v311 >> 1);
          if (v315 < v308)
            v309 = v314;
          else
            v311 = v312;
        }
        while (v311);
      }
      if (v309 == v310)
        goto LABEL_338;
      if (*(_DWORD *)v309 != v308)
        goto LABEL_338;
      v316 = *((_QWORD *)v309 + 1);
      if ((*(_BYTE *)(v316 + 4) & 7) != 0)
        goto LABEL_338;
      *(_BYTE *)(v316 + 4) ^= 4u;
      v317 = *(char **)(v2 + 2112);
      v318 = *(_QWORD *)(v2 + 2120);
      if ((unint64_t)v317 >= v318)
        break;
      *(_DWORD *)v317 = v308;
      v307 = (uint64_t)(v317 + 4);
LABEL_337:
      *(_QWORD *)(v2 + 2112) = v307;
      *(_BYTE *)(v2 + 1906) = 0;
      *(_WORD *)(v2 + 1904) = 256;
      *(_DWORD *)v306 = 0;
      *(_WORD *)(v306 + 4) = 0;
LABEL_338:
      if (++v304 == v305)
        goto LABEL_369;
    }
    v319 = (char *)*v410;
    v320 = v317 - (_BYTE *)*v410;
    v321 = v320 >> 2;
    v322 = (v320 >> 2) + 1;
    if (v322 >> 62)
      goto LABEL_432;
    v323 = v318 - (_QWORD)v319;
    if (v323 >> 1 > v322)
      v322 = v323 >> 1;
    if ((unint64_t)v323 >= 0x7FFFFFFFFFFFFFFCLL)
      v324 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v324 = v322;
    if (v324)
    {
      if (v324 >> 62)
        goto LABEL_433;
      v325 = operator new(4 * v324);
      v326 = (unsigned int *)&v325[4 * v321];
      *v326 = v308;
      v307 = (uint64_t)(v326 + 1);
      v327 = v317 - v319;
      if (v317 == v319)
        goto LABEL_366;
    }
    else
    {
      v325 = 0;
      v326 = (unsigned int *)(4 * v321);
      *(_DWORD *)(4 * v321) = v308;
      v307 = 4 * v321 + 4;
      v327 = v317 - v319;
      if (v317 == v319)
      {
LABEL_366:
        v387[263] = v326;
        v337 = &v325[4 * v324];
        v2 = (uint64_t)v387;
        v387[264] = v307;
        v387[265] = v337;
        if (v319)
          operator delete(v319);
        goto LABEL_337;
      }
    }
    v328 = v327 - 4;
    if (v328 < 0x2C)
      goto LABEL_445;
    if ((unint64_t)(v317 - v325 - v320) < 0x20)
      goto LABEL_445;
    v329 = (v328 >> 2) + 1;
    v330 = 4 * (v329 & 0x7FFFFFFFFFFFFFF8);
    v331 = &v317[-v330];
    v326 = (unsigned int *)((char *)v326 - v330);
    v332 = &v325[4 * v321 - 16];
    v333 = v317 - 16;
    v334 = v329 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v335 = *(_OWORD *)v333;
      *(v332 - 1) = *((_OWORD *)v333 - 1);
      *v332 = v335;
      v332 -= 2;
      v333 -= 32;
      v334 -= 8;
    }
    while (v334);
    v317 = v331;
    if (v329 != (v329 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_445:
      do
      {
        v336 = *((_DWORD *)v317 - 1);
        v317 -= 4;
        *--v326 = v336;
      }
      while (v317 != v319);
    }
    goto LABEL_366;
  }
LABEL_369:
  v338 = (unsigned int *)k[15];
  v339 = (unsigned int *)k[16];
  if (v338 != v339)
  {
    v340 = v2 + 2968;
    v411 = (void **)(v2 + 2128);
    while (1)
    {
      v342 = *v338;
      v343 = *(char **)(v2 + 1184);
      v344 = *(char **)(v2 + 1192);
      if (v344 != v343)
      {
        v345 = (v344 - v343) >> 4;
        do
        {
          v346 = v345 >> 1;
          v347 = (unsigned int *)&v343[16 * (v345 >> 1)];
          v349 = *v347;
          v348 = (char *)(v347 + 4);
          v345 += ~(v345 >> 1);
          if (v349 < v342)
            v343 = v348;
          else
            v345 = v346;
        }
        while (v345);
      }
      if (v343 == v344)
        goto LABEL_373;
      if (*(_DWORD *)v343 != v342)
        goto LABEL_373;
      v350 = *((_QWORD *)v343 + 1);
      if ((*(_BYTE *)(v350 + 4) & 7) != 0)
        goto LABEL_373;
      *(_BYTE *)(v350 + 4) ^= 4u;
      v351 = *(char **)(v2 + 2136);
      v352 = *(_QWORD *)(v2 + 2144);
      if ((unint64_t)v351 >= v352)
        break;
      *(_DWORD *)v351 = v342;
      v341 = (uint64_t)(v351 + 4);
LABEL_372:
      *(_QWORD *)(v2 + 2136) = v341;
      *(_BYTE *)(v2 + 1906) = 0;
      *(_WORD *)(v2 + 1904) = 256;
      *(_DWORD *)v340 = 0;
      *(_WORD *)(v340 + 4) = 0;
LABEL_373:
      if (++v338 == v339)
        goto LABEL_404;
    }
    v353 = (char *)*v411;
    v354 = v351 - (_BYTE *)*v411;
    v355 = v354 >> 2;
    v356 = (v354 >> 2) + 1;
    if (v356 >> 62)
      goto LABEL_432;
    v357 = v352 - (_QWORD)v353;
    if (v357 >> 1 > v356)
      v356 = v357 >> 1;
    if ((unint64_t)v357 >= 0x7FFFFFFFFFFFFFFCLL)
      v358 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v358 = v356;
    if (v358)
    {
      if (v358 >> 62)
        goto LABEL_433;
      v359 = operator new(4 * v358);
      v360 = (unsigned int *)&v359[4 * v355];
      *v360 = v342;
      v341 = (uint64_t)(v360 + 1);
      v361 = v351 - v353;
      if (v351 == v353)
        goto LABEL_401;
    }
    else
    {
      v359 = 0;
      v360 = (unsigned int *)(4 * v355);
      *(_DWORD *)(4 * v355) = v342;
      v341 = 4 * v355 + 4;
      v361 = v351 - v353;
      if (v351 == v353)
      {
LABEL_401:
        v387[266] = v360;
        v371 = &v359[4 * v358];
        v2 = (uint64_t)v387;
        v387[267] = v341;
        v387[268] = v371;
        if (v353)
          operator delete(v353);
        goto LABEL_372;
      }
    }
    v362 = v361 - 4;
    if (v362 < 0x2C)
      goto LABEL_446;
    if ((unint64_t)(v351 - v359 - v354) < 0x20)
      goto LABEL_446;
    v363 = (v362 >> 2) + 1;
    v364 = 4 * (v363 & 0x7FFFFFFFFFFFFFF8);
    v365 = &v351[-v364];
    v360 = (unsigned int *)((char *)v360 - v364);
    v366 = &v359[4 * v355 - 16];
    v367 = v351 - 16;
    v368 = v363 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v369 = *(_OWORD *)v367;
      *(v366 - 1) = *((_OWORD *)v367 - 1);
      *v366 = v369;
      v366 -= 2;
      v367 -= 32;
      v368 -= 8;
    }
    while (v368);
    v351 = v365;
    if (v363 != (v363 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_446:
      do
      {
        v370 = *((_DWORD *)v351 - 1);
        v351 -= 4;
        *--v360 = v370;
      }
      while (v351 != v353);
    }
    goto LABEL_401;
  }
LABEL_404:
  v372 = (unsigned int *)k[18];
  for (m = (unsigned int *)k[19]; v372 != m; ++v372)
  {
    if (sub_20FBCBD50(v2 + 312, *v372))
    {
      *(_WORD *)(v2 + 2972) = 0;
      *(_DWORD *)(v2 + 2968) = 0;
    }
  }
  *((_BYTE *)v383 + 248) = 0;
}

void sub_20FBC9820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  void *v51;
  void *v52;

  if (v52)
    operator delete(v52);
  operator delete(v51);
  sub_20E8E69C4((uint64_t)&a51);
  _Unwind_Resume(a1);
}

void sub_20FBC9864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,float64x2_t *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  float64x2_t v52;

  v52 = vaddq_f64(a40[2751], (float64x2_t)0);
  a40[2750] = vaddq_f64(a40[2750], (float64x2_t)0);
  a40[2751] = v52;
  sub_20E8E69C4((uint64_t)&a51);
  _Unwind_Resume(a1);
}

BOOL sub_20FBC98B8(uint64_t a1, uint64_t a2)
{
  return *(double *)a1 == *(double *)a2
      && *(double *)(a1 + 8) == *(double *)(a2 + 8)
      && *(double *)(a1 + 16) == *(double *)(a2 + 16)
      && *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40)
      && *(double *)(a1 + 24) == *(double *)(a2 + 24)
      && *(double *)(a1 + 32) == *(double *)(a2 + 32);
}

uint64_t sub_20FBC9924(uint64_t a1, unsigned int a2, unint64_t a3, int a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8, double a9, double a10, float64x2_t a11, double a12, float64x2_t a13, uint64_t a14, uint64_t a15, uint64_t a16, float64x2_t *a17, uint64_t a18, uint64_t a19, int *a20)
{
  float64x2_t v20;
  __int128 v21;
  uint64_t v22;
  int *v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  _BOOL4 v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  _BOOL4 v37;
  int v38;
  uint64_t v39;
  int v40;
  double *v41;
  uint64_t v42;
  double v43;
  float64x2_t v44;
  float64x2_t v45;
  double v46;
  uint64_t v47;
  float64x2_t v48;
  double v49;
  float64x2_t v50;
  double v51;
  double v52;
  double v53;
  int v55;
  unint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  float *v69;
  float32x2_t *v70;
  float32x2_t *v71;
  float *v72;
  float v73;
  unsigned int v74;
  double *v75;
  uint64_t v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  _BOOL4 v82;
  _BOOL4 v83;
  unsigned int v84;
  float64x2_t v85;
  float64x2_t v92;
  int *v93;
  unsigned __int8 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  int v105;
  int v106;
  double v107;
  float64x2_t v109;
  double v110;
  double v112;
  int v113;
  double v114;
  float64x2_t v115;
  double *v116;
  float64x2_t v117;
  double v120;
  int v121;
  int v122;
  float64x2_t v123;
  uint64_t v127;
  BOOL v128;
  int v129;
  uint64_t v131;
  uint64_t v132;
  unint64_t v135;
  unsigned int v138;
  double v139;
  double v140;
  double v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v147;
  float32x2_t *v148;
  float *v149;
  __int128 v150;
  float64x2_t v151;
  unsigned int v152;
  unsigned int v153;
  int v154;
  int v155;
  float32x2_t *v156;
  float *v157;
  int v158;

  v22 = a5;
  v24 = a20;
  *((_BYTE *)a20 + 23) = 0;
  *(_WORD *)((char *)a20 + 21) = 0;
  *(_QWORD *)a20 = 0;
  *((_QWORD *)a20 + 1) = 0;
  a20[4] = 0;
  *((_BYTE *)a20 + 20) = 1;
  v25 = a5 * a3;
  v26 = *(_DWORD *)(a18 + 40) <= (a5 * a3);
  *((_BYTE *)a20 + 20) = v26;
  v27 = *(_DWORD *)(a19 + 40);
  v147 = a3;
  if (((*(_DWORD *)(a6 + 4 * (a7 >> 5)) >> a7) & 1) == 0
    || (v28 = a1, ((*(_DWORD *)(a6 + 4 * ((a5 + a7 - 1) >> 5)) >> (a5 + a7 - 1)) & 1) == 0))
  {
    v29 = a5 * a3;
    v30 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/BatchLeastSquaresUnsanitized/include/VIO/BatchLeastSquaresUnsanitized/Triangulator.h", 678, (uint64_t)"*camera_mask && *(camera_mask + static_cast<ptrdiff_t>(len - 1u))", 65, (uint64_t)"The first and the last observation in the track must be valid.", 62, (void (*)(void **))sub_21023DDB0);
    v28 = a1;
    a3 = v147;
    v25 = v29;
    if (v30)
      goto LABEL_115;
  }
  v31 = v28 + 8;
  v32 = *(_DWORD *)(v28 + 8 + 4 * a2);
  v33 = a2;
  v34 = *(_DWORD *)(v28 + 172);
  v35 = v32 + v34 * (v22 + a4 - 1);
  v135 = v22;
  v144 = v33;
  v145 = v28 + 8;
  if (a3 < 2)
    goto LABEL_11;
  if ((*(_DWORD *)(a14 + 8 * v22 - 8) & 0x7FFFFFFFu) < 0x7F800000 != (*(_DWORD *)(a14 + 8 * v22 - 4) & 0x7FFFFFFFu) < 0x7F800000)
  {
    v36 = v25;
    v37 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/BatchLeastSquaresUnsanitized/include/VIO/BatchLeastSquaresUnsanitized/Triangulator.h", 689, (uint64_t)"(std::isfinite(meas_dist_secondary[len - 1](0)) == std::isfinite(meas_dist_secondary[len - 1](1)))", 98, (uint64_t)"Both coordinates in secondary observation track must be finite or not.", 70, (void (*)(void **))sub_21023DDB0);
    v33 = v144;
    v31 = v145;
    v28 = a1;
    a3 = v147;
    v25 = v36;
    v22 = v135;
    if (v37)
LABEL_115:
      abort();
  }
  v38 = v22 + a4;
  v39 = 8 * v22;
  while (v39)
  {
    v40 = *(_DWORD *)(a14 - 8 + v39) & 0x7FFFFFFF;
    --v38;
    v39 -= 8;
    if (v40 <= 2139095039)
    {
      v35 = *(_DWORD *)(v31 + 4 * v33) + *(_DWORD *)(v28 + 172) * v38 + 1;
      break;
    }
  }
LABEL_11:
  v41 = (double *)a17;
  v42 = v28 + 4024 + 24 * (v32 + v34 * a4);
  v43 = *(double *)(a18 + 16);
  a11.f64[0] = a17[1].f64[0];
  v44 = *a17;
  a13.f64[0] = *(float64_t *)(v42 + 16);
  *(_QWORD *)&v45.f64[0] = *(_OWORD *)&vabdq_f64(a13, a11);
  v45.f64[1] = NAN;
  v46 = 1.0;
  if (vmaxnmvq_f64(vmaxnmq_f64(vabdq_f64(*(float64x2_t *)v42, *a17), v45)) >= 1.0e-10)
  {
    v47 = v28 + 4024 + 24 * v35;
    v45.f64[0] = *(float64_t *)(v47 + 16);
    *(_QWORD *)&v20.f64[0] = *(_OWORD *)&vabdq_f64(v45, a11);
    v20.f64[1] = NAN;
    v46 = 1.0;
    if (vmaxnmvq_f64(vmaxnmq_f64(vabdq_f64(*(float64x2_t *)v47, v44), v20)) >= 1.0e-10)
    {
      v48 = vsubq_f64(*(float64x2_t *)v42, v44);
      v49 = vsubq_f64(a13, a11).f64[0];
      v50 = vsubq_f64(*(float64x2_t *)v47, v44);
      v51 = vsubq_f64(v45, a11).f64[0];
      v48.f64[1] = *(double *)vextq_s8((int8x16_t)v48, (int8x16_t)v48, 8uLL).i64;
      v50.f64[1] = *(double *)vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).i64;
      v46 = (vmulq_f64(v48, v50).f64[0] + v48.f64[1] * v50.f64[1] + v49 * v51)
          / sqrt((vmulq_f64(v48, v48).f64[0] + v48.f64[1] * v48.f64[1] + v49 * v49)* (vmulq_f64(v50, v50).f64[0] + v50.f64[1] * v50.f64[1] + v51 * v51));
    }
  }
  v52 = *(double *)(a19 + 16);
  v53 = fmin(v46, 1.0);
  *((double *)a20 + 1) = v53;
  if (v53 > v43)
  {
    v26 = 0;
    *((_BYTE *)a20 + 4) = 0;
    *((_BYTE *)a20 + 20) = 0;
  }
  v55 = v53 <= v52 && v27 <= v25;
  if (v22)
  {
    if (a3)
    {
      v56 = 0;
      v57 = 0;
      v58 = 0;
      v59 = v28 + 176;
      v132 = a18;
      v60 = v28 + 4992;
      v61 = *(double *)a18;
      v62 = fmax(*(double *)(a18 + 8) * *(double *)(a18 + 8), 0.0);
      v63 = *(double *)a19;
      v131 = a19;
      v64 = fmax(*(double *)(a19 + 8) * *(double *)(a19 + 8), 0.0);
      v65 = *(double *)(a18 + 24);
      v143 = v28 + 176;
      v142 = v28 + 4992;
      v140 = *(double *)a19;
      v141 = *(double *)a18;
      v139 = v65;
      while (1)
      {
        v138 = v58;
        if (((*(_DWORD *)(a6 + 4 * ((v58 + a7) >> 5)) >> (v58 + a7)) & 1) != 0)
          break;
LABEL_25:
        v56 = v138 + 1;
        v58 = v138 + 1;
        if (v56 >= v135)
          goto LABEL_105;
      }
      v66 = 0;
      v158 = v56 + a4;
      v157 = (float *)(a16 + 4 * v56);
      v67 = 8 * v56;
      v156 = (float32x2_t *)(a14 + v67);
      if (v58 <= 1)
        v68 = 1;
      else
        v68 = v58;
      v69 = (float *)(a15 + 4 * v68);
      v70 = (float32x2_t *)(a8 + v67);
      v148 = (float32x2_t *)(a8 + v67);
      v149 = v69;
      while (1)
      {
        v71 = v70;
        v72 = v69;
        if (v66 && (v71 = v156, v72 = v157, (v156->i32[0] & 0x7FFFFFFFu) >= 0x7F800000))
        {
          --v25;
        }
        else
        {
          v73 = *v72;
          v74 = v66 + *(_DWORD *)(v31 + 4 * v33) + v158 * *(_DWORD *)(v28 + 172);
          v75 = (double *)(v59 + 96 * v74);
          v76 = *(_QWORD *)v28 + 4080 * v33 + 1016 * v66 + 2120;
          v77 = v41[1];
          v78 = v41[2];
          v20.f64[0] = v75[3] + *v75 * *v41 + v75[1] * v77 + v75[2] * v78;
          *(double *)&v21 = v75[7] + *v41 * v75[4] + v77 * v75[5] + v78 * v75[6];
          v79 = v75[11] + *v41 * v75[8] + v77 * v75[9] + v78 * v75[10];
          v80 = v20.f64[0] * v20.f64[0] + *(double *)&v21 * *(double *)&v21;
          v81 = v80 + v79 * v79 + 1.0;
          v82 = v79 * v79 >= v62 * v81;
          v83 = v79 * v79 >= v64 * v81;
          v84 = *(_DWORD *)(*(_QWORD *)v28 + 4080 * v33 + 1016 * v66 + 2592);
          if (v84 == -1)
          {
            v150 = v21;
            v151 = v20;
            v154 = v55;
            v152 = v25;
            v153 = v57;
            v155 = v26;
            v93 = v24;
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
            v94 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v94 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v95 = qword_254A6DE40;
              v96 = qword_254A6DE48;
              while (v95 != v96)
              {
                v98 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v95;
                v97 = *(_QWORD *)(v95 + 8);
                v95 += 16;
                v98(v97, "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, "", 0);
              }
            }
            v99 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v99 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            v26 = v155;
            if (!byte_254A6DE68)
              goto LABEL_115;
            v24 = v93;
            qword_254A6DE58(unk_254A6DE60, "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, "", 0);
            v84 = *(_DWORD *)(v76 + 472);
            v28 = a1;
            a3 = v147;
            v25 = v152;
            v57 = v153;
            v33 = v144;
            v31 = v145;
            v59 = v143;
            v41 = (double *)a17;
            v55 = v154;
            v60 = v142;
            v63 = v140;
            v61 = v141;
            v65 = v139;
            v70 = v148;
            v69 = v149;
            v21 = v150;
            v20 = v151;
            if (v84 >= 2)
            {
LABEL_49:
              v100 = sqrt(v80);
              v101 = fabs(v79);
              v102 = fabs(v100);
              v103 = v102 / v101;
              if (v101 < v102)
                v103 = v101 / v102;
              v104 = (v102 - v101) / (v101 + v102);
              if (v101 >= v102)
                v104 = -v104;
              if (v103 > 0.414213562)
                v105 = 1;
              else
                v105 = 2;
              if (v103 > 0.414213562)
                v106 = -1;
              else
                v106 = 1;
              if (v103 <= 0.414213562)
                v104 = v103;
              if (v80 >= 0.00000001)
              {
                if (v101 < v102)
                  v106 = -v106;
                else
                  v105 = v103 > 0.414213562;
                _ZF = v100 == INFINITY && v101 == INFINITY;
                v109 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v104 * v104), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v104 * v104), (float64x2_t)xmmword_210315370), v104 * v104 * (v104 * v104))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v104 * v104), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v104 * v104), (float64x2_t)xmmword_210315380), v104 * v104 * (v104 * v104))),
                           v104 * v104 * (v104 * v104) * (v104 * v104 * (v104 * v104))));
                v110 = v104 + v104 * vdivq_f64(v109, (float64x2_t)vdupq_laneq_s64((int64x2_t)v109, 1)).f64[0];
                if (_ZF)
                  v110 = 0.785398163;
                if (v100 == 0.0 && v79 == 0.0)
                  v110 = 0.0;
                if (v79 < 0.0)
                {
                  v105 = 4 - v105;
                  v106 = -v106;
                }
                v70 = v148;
                v69 = v149;
                if (v100 < 0.0)
                  v105 = -v105;
                v112 = (double)v105;
                if (v100 >= 0.0)
                  v113 = v106;
                else
                  v113 = -v106;
                v114 = v112 * 3.061617e-17 + v112 * 0.785398163 + v110 * (double)v113;
                v115 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v76 + 168), *(int64x2_t *)(v76 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v76 + 168), *(int64x2_t *)(v76 + 184)), v114 * v114)), v114 * v114);
                v107 = 1.0 / v100 * (v114 + v114 * (v115.f64[0] + vmuld_lane_f64(v114 * v114 * (v114 * v114), v115, 1)));
              }
              else
              {
                v107 = 1.0 / v79;
              }
              *(_QWORD *)&v20.f64[1] = v21;
              v92 = vmulq_n_f64(v20, v107);
              goto LABEL_85;
            }
          }
          else if (v84 >= 2)
          {
            goto LABEL_49;
          }
          if (!v84)
          {
            sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
            goto LABEL_115;
          }
          if (*(_DWORD *)(v76 + 212))
          {
            if (v79 >= 0.00000001)
            {
              v85.f64[0] = v20.f64[0];
              *(_QWORD *)&v85.f64[1] = v21;
              _Q1 = vmulq_n_f64(v85, 1.0 / v79);
              _D0 = *(double *)&v21 * (1.0 / v79);
              __asm { FMLA            D2, D0, V1.D[1] }
              v92 = vaddq_f64(vaddq_f64(vmulq_f64(vaddq_f64((float64x2_t)vdupq_lane_s64(_D2, 0), vmulq_f64(_Q1, vaddq_f64(_Q1, _Q1))), (float64x2_t)vextq_s8(*(int8x16_t *)(v76 + 192), *(int8x16_t *)(v76 + 192), 8uLL)), vmulq_laneq_f64(vmulq_n_f64(vaddq_f64(*(float64x2_t *)(v76 + 192), *(float64x2_t *)(v76 + 192)), _Q1.f64[0]), _Q1, 1)), vmulq_n_f64(_Q1, *(double *)&_D2 * *(double *)(v76 + 168)+ 1.0+ *(double *)&_D2 * (*(double *)&_D2 * *(double *)(v76 + 176))+ *(double *)&_D2 * (*(double *)&_D2 * (*(double *)&_D2 * *(double *)(v76 + 184)))));
LABEL_85:
              v116 = (double *)(v60 + 72 * v74);
              v117.f64[0] = v116[2] + *v116 * v92.f64[0] + vmuld_lane_f64(v116[1], v92, 1);
              v117.f64[1] = vmuld_lane_f64(v116[4], v92, 1) + v116[5];
              _D3 = vsubq_f64(v117, vcvtq_f64_f32(*v71)).f64[1];
              __asm { FMLA            D1, D3, V0.D[1] }
              v120 = v61 * v73 * (v61 * v73);
              if (_D1 > v120)
                v26 = 0;
              else
                v26 &= v82;
              v121 = _D1 <= v120 && v82;
              if (_D1 > v63 * v73 * (v63 * v73))
                v55 = 0;
              else
                v55 &= v83;
              v122 = *v24;
              if (_D1 < v65)
                ++v122;
              *v24 = v122;
              v57 += v121;
              goto LABEL_32;
            }
          }
          else if (v79 >= 0.00000001)
          {
            v123.f64[0] = v20.f64[0];
            *(_QWORD *)&v123.f64[1] = v21;
            _Q1 = vmulq_n_f64(v123, 1.0 / v79);
            _D0 = *(double *)&v21 * (1.0 / v79);
            __asm { FMLA            D2, D0, V1.D[1] }
            v92 = vmulq_n_f64(_Q1, _D2 * *(double *)(v76 + 168)+ 1.0+ _D2 * _D2 * (*(double *)(v76 + 176) + _D2 * *(double *)(v76 + 184)));
            goto LABEL_85;
          }
          v55 = 0;
          v26 = 0;
        }
LABEL_32:
        if (++v66 == a3)
          goto LABEL_25;
      }
    }
    goto LABEL_107;
  }
  v131 = a19;
  v132 = a18;
  v57 = 0;
LABEL_105:
  if (a3 <= 1)
  {
    v127 = v132;
    if (!v57)
      goto LABEL_107;
  }
  else
  {
    v127 = v132;
    LOBYTE(v26) = (v25 >= *(_DWORD *)(v132 + 40)) & v26;
    LOBYTE(v55) = (v25 >= *(_DWORD *)(v131 + 40)) & v55;
    if (!v57)
    {
LABEL_107:
      v128 = 0;
      goto LABEL_110;
    }
  }
  v128 = v57 >= *(_DWORD *)(v127 + 40);
LABEL_110:
  *((_BYTE *)v24 + 4) = v128;
  *((_BYTE *)v24 + 20) = v26 & 1;
  if ((v55 & 1) != 0)
    v129 = 2;
  else
    v129 = 0;
  return v129 & 0xFFFFFFFE | v26 & 1;
}

uint64_t sub_20FBCA4B0(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8, double a9, double a10, float64x2_t a11, double a12, double a13, float64x2_t a14, uint64_t a15, uint64_t a16, uint64_t a17, float64x2_t *a18, uint64_t a19, unsigned __int8 a20,int *a21)
{
  float64x2_t v21;
  float64x2_t v22;
  int *v27;
  double *v28;
  unint64_t v29;
  BOOL v30;
  char v31;
  int v32;
  uint64_t v33;
  _BOOL4 v34;
  uint64_t *v35;
  int v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  _DWORD *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  int v48;
  uint64_t v49;
  float64x2_t v50;
  double v51;
  double v52;
  float64x2_t v53;
  float64x2_t v54;
  double v55;
  double v56;
  int v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  double v64;
  uint64_t *v65;
  uint64_t *v66;
  double v67;
  double v68;
  uint64_t v69;
  double v70;
  float64x2_t v71;
  double *v72;
  float64x2_t v73;
  double v79;
  _BOOL4 v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  float v85;
  float32x2_t *v86;
  unsigned int v87;
  double *v88;
  double v89;
  double v90;
  uint64_t v91;
  double v92;
  double v93;
  unsigned int v94;
  float64x2_t v95;
  uint64_t v99;
  char v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  int v106;
  int v107;
  float64x2_t v109;
  double v110;
  double v112;
  int v113;
  double v114;
  float64x2_t v115;
  float64x2_t v116;
  char v120;
  double *v122;
  unsigned int v123;
  uint64_t v124;
  unint64_t v125;
  double v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  float64x2_t v131;
  int v132;
  float64x2_t v133;

  v27 = a21;
  v28 = (double *)a19;
  *((_BYTE *)a21 + 23) = 0;
  *(_WORD *)((char *)a21 + 21) = 0;
  *(_QWORD *)a21 = 0;
  *((_QWORD *)a21 + 1) = 0;
  a21[4] = 0;
  *((_BYTE *)a21 + 20) = 1;
  v29 = *(unsigned int *)(a19 + 40);
  v30 = v29 <= a5;
  if (v29 > a5)
  {
    v31 = 0;
    *((_BYTE *)a21 + 20) = 0;
    if ((a20 & 1) != 0)
      return v31 & 1;
  }
  v129 = a3;
  v130 = a8;
  if (((*(_DWORD *)(a6 + 4 * (a7 >> 5)) >> a7) & 1) == 0
    || ((*(_DWORD *)(a6 + 4 * ((a5 + a7 - 1) >> 5)) >> (a5 + a7 - 1)) & 1) == 0)
  {
    v32 = a2;
    v33 = a4;
    v34 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/BatchLeastSquaresUnsanitized/include/VIO/BatchLeastSquaresUnsanitized/Triangulator.h", 448, (uint64_t)"(*camera_mask) && *(camera_mask + (len - 1))", 44, (uint64_t)"The first and the last observation in the track must be valid.", 62, (void (*)(void **))sub_21023DDB0);
    LODWORD(a2) = v32;
    a3 = v129;
    a8 = v130;
    a4 = v33;
    if (v34)
      goto LABEL_91;
  }
  v124 = a6;
  v35 = a1 + 1;
  v36 = *((_DWORD *)a1 + a2 + 2);
  v37 = a15;
  v38 = *((_DWORD *)a1 + 43);
  v125 = a5;
  v39 = v36 + (a5 - 1 + a4) * v38;
  if (a3 < 2)
    goto LABEL_11;
  v40 = (_DWORD *)(a15 + 8 * (a5 - 1));
  v41 = (*v40 & 0x7FFFFFFFu) < 0x7F800000;
  if (v41 != (v40[1] & 0x7FFFFFFFu) < 0x7F800000)
  {
    v132 = a2;
    v42 = a4;
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/BatchLeastSquaresUnsanitized/include/VIO/BatchLeastSquaresUnsanitized/Triangulator.h", 461, (uint64_t)"!has_secondary_observations || (std::isfinite(meas_dist_secondary[(len - 1)](0)) == std::isfinite(meas_dist_secondary[(len - 1)](1)))", 133, (uint64_t)"Both coordinates in secondary observation track must be finite or not.", 70, (void (*)(void **))sub_21023DDB0))
    {
      v41 = (*v40 & 0x7FFFFFFFu) < 0x7F800000;
      a3 = v129;
      a8 = v130;
      a4 = v42;
      v28 = (double *)a19;
      v37 = a15;
      v35 = a1 + 1;
      LODWORD(a2) = v132;
      goto LABEL_10;
    }
LABEL_91:
    abort();
  }
LABEL_10:
  v39 += v41;
LABEL_11:
  v43 = (uint64_t)&a1[3 * (v36 + v38 * a4) + 503];
  v44 = v28[2];
  a11.f64[0] = a18[1].f64[0];
  v45 = *a18;
  a14.f64[0] = *(float64_t *)(v43 + 16);
  *(_QWORD *)&v46.f64[0] = *(_OWORD *)&vabdq_f64(a14, a11);
  v47 = vabdq_f64(*(float64x2_t *)v43, *a18);
  v46.f64[1] = NAN;
  v22.f64[0] = 1.0;
  LOBYTE(v48) = v30;
  if (vmaxnmvq_f64(vmaxnmq_f64(v47, v46)) >= 1.0e-10)
  {
    v49 = (uint64_t)&a1[3 * v39 + 503];
    v47.f64[0] = *(float64_t *)(v49 + 16);
    v21 = *(float64x2_t *)v49;
    v22 = vabdq_f64(*(float64x2_t *)v49, v45);
    *(_QWORD *)&v50.f64[0] = *(_OWORD *)&vabdq_f64(v47, a11);
    v50.f64[1] = NAN;
    v51 = vmaxnmvq_f64(vmaxnmq_f64(v22, v50));
    v22.f64[0] = 1.0;
    if (v51 >= 1.0e-10)
    {
      v52 = vsubq_f64(a14, a11).f64[0];
      v53 = vsubq_f64(*(float64x2_t *)v43, v45);
      v54 = vsubq_f64(v21, v45);
      v55 = vsubq_f64(v47, a11).f64[0];
      v53.f64[1] = *(double *)vextq_s8((int8x16_t)v53, (int8x16_t)v53, 8uLL).i64;
      v54.f64[1] = *(double *)vextq_s8((int8x16_t)v54, (int8x16_t)v54, 8uLL).i64;
      v22.f64[0] = (vmulq_f64(v53, v54).f64[0] + v53.f64[1] * v54.f64[1] + v52 * v55)
                 / sqrt((vmulq_f64(v53, v53).f64[0] + v53.f64[1] * v53.f64[1] + v52 * v52)* (vmulq_f64(v54, v54).f64[0] + v54.f64[1] * v54.f64[1] + v55 * v55));
    }
  }
  v56 = fmin(v22.f64[0], 1.0);
  *((double *)a21 + 1) = v56;
  if (v56 > v44)
  {
    LOBYTE(v48) = 0;
    *((_BYTE *)a21 + 4) = 0;
    *((_BYTE *)a21 + 20) = 0;
  }
  v57 = a20 ^ 1;
  if ((v48 & 1) == 0 && !v57)
  {
    v31 = 0;
    return v31 & 1;
  }
  v58 = v125;
  if (v125)
  {
    if (!a3)
      goto LABEL_95;
    v123 = a7;
    v59 = 0;
    v60 = 0;
    a2 = a2;
    v62 = a16;
    v61 = a17;
    v63 = v28[3];
    v64 = *v28;
    v122 = v28;
    v65 = a1 + 22;
    v66 = a1 + 624;
    v67 = fmax(v28[1], 0.0);
    v68 = v67 * v67;
    v127 = a2;
    v126 = v63;
    while (((*(_DWORD *)(v124 + 4 * ((v59 + v123) >> 5)) >> (v59 + v123)) & 1) == 0)
    {
LABEL_22:
      ++v59;
      ++a4;
      if (v59 == v125)
      {
        if ((_DWORD)v60)
        {
          v58 = v60 >= *((_DWORD *)v122 + 10);
          goto LABEL_96;
        }
LABEL_95:
        v58 = 0;
        goto LABEL_96;
      }
    }
    v69 = 0;
    v128 = a4;
    while (1)
    {
      v82 = *a1;
      if (v69)
        v83 = v37;
      else
        v83 = a8;
      if (v69)
        v84 = v61;
      else
        v84 = v62;
      v85 = *(float *)(v84 + 4 * v59);
      v86 = (float32x2_t *)(v83 + 8 * v59);
      if (v69 && (v86->i32[0] & 0x7FFFFFFFu) > 0x7F7FFFFF)
        goto LABEL_36;
      v87 = v69 + *((_DWORD *)v35 + a2) + a4 * *((_DWORD *)a1 + 43);
      v88 = (double *)&v65[12 * v87];
      v89 = a18->f64[1];
      v90 = a18[1].f64[0];
      v21.f64[0] = v88[3] + *v88 * a18->f64[0] + v88[1] * v89 + v88[2] * v90;
      v22.f64[0] = v88[7] + a18->f64[0] * v88[4] + v89 * v88[5] + v90 * v88[6];
      v91 = v82 + 4080 * a2 + 1016 * v69 + 2120;
      v92 = v88[11] + a18->f64[0] * v88[8] + v89 * v88[9] + v90 * v88[10];
      v93 = v21.f64[0] * v21.f64[0] + v22.f64[0] * v22.f64[0];
      v94 = *(_DWORD *)(v82 + 4080 * a2 + 1016 * v69 + 2592);
      if (v94 == -1)
      {
        v131 = v22;
        v133 = v21;
        v99 = v60;
        v100 = v48;
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_91;
        }
        v94 = *(_DWORD *)(v91 + 472);
        a3 = v129;
        a8 = v130;
        LOBYTE(v48) = v100;
        v27 = a21;
        a4 = v128;
        v37 = a15;
        v35 = a1 + 1;
        v57 = a20 ^ 1;
        v60 = v99;
        v61 = a17;
        a2 = v127;
        v62 = a16;
        v63 = v126;
        v66 = a1 + 624;
        v65 = a1 + 22;
        v22 = v131;
        v21 = v133;
        if (v94 >= 2)
        {
LABEL_53:
          v101 = sqrt(v93);
          v102 = fabs(v92);
          v103 = fabs(v101);
          v104 = v103 / v102;
          if (v102 < v103)
            v104 = v102 / v103;
          v105 = (v103 - v102) / (v102 + v103);
          if (v102 >= v103)
            v105 = -v105;
          if (v104 > 0.414213562)
            v106 = 1;
          else
            v106 = 2;
          if (v104 > 0.414213562)
            v107 = -1;
          else
            v107 = 1;
          if (v104 <= 0.414213562)
            v105 = v104;
          if (v93 < 0.00000001)
          {
            v70 = 1.0 / v92;
          }
          else
          {
            if (v102 < v103)
              v107 = -v107;
            else
              v106 = v104 > 0.414213562;
            _ZF = v101 == INFINITY && v102 == INFINITY;
            v109 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v105 * v105), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v105 * v105), (float64x2_t)xmmword_210315370), v105 * v105 * (v105 * v105))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v105 * v105), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v105 * v105), (float64x2_t)xmmword_210315380), v105 * v105 * (v105 * v105))),
                       v105 * v105 * (v105 * v105) * (v105 * v105 * (v105 * v105))));
            v110 = v105 + v105 * vdivq_f64(v109, (float64x2_t)vdupq_laneq_s64((int64x2_t)v109, 1)).f64[0];
            if (_ZF)
              v110 = 0.785398163;
            if (v101 == 0.0 && v92 == 0.0)
              v110 = 0.0;
            if (v92 < 0.0)
            {
              v106 = 4 - v106;
              v107 = -v107;
            }
            if (v101 < 0.0)
              v106 = -v106;
            v112 = (double)v106;
            if (v101 >= 0.0)
              v113 = v107;
            else
              v113 = -v107;
            v114 = v112 * 3.061617e-17 + v112 * 0.785398163 + v110 * (double)v113;
            v115 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v91 + 168), *(int64x2_t *)(v91 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v91 + 168), *(int64x2_t *)(v91 + 184)), v114 * v114)), v114 * v114);
            v70 = 1.0 / v101 * (v114 + v114 * (v115.f64[0] + vmuld_lane_f64(v114 * v114 * (v114 * v114), v115, 1)));
          }
          v21.f64[1] = v22.f64[0];
          v71 = vmulq_n_f64(v21, v70);
          goto LABEL_27;
        }
      }
      else if (v94 >= 2)
      {
        goto LABEL_53;
      }
      if (!v94)
      {
        sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
        abort();
      }
      if (*(_DWORD *)(v91 + 212))
      {
        if (v92 < 0.00000001)
          goto LABEL_89;
        v95.f64[0] = v21.f64[0];
        v95.f64[1] = v22.f64[0];
        _Q1 = vmulq_n_f64(v95, 1.0 / v92);
        _D0 = v22.f64[0] * (1.0 / v92);
        __asm { FMLA            D2, D0, V1.D[1] }
        v71 = vaddq_f64(vaddq_f64(vmulq_f64(vaddq_f64((float64x2_t)vdupq_lane_s64(_D2, 0), vmulq_f64(_Q1, vaddq_f64(_Q1, _Q1))), (float64x2_t)vextq_s8(*(int8x16_t *)(v91 + 192), *(int8x16_t *)(v91 + 192), 8uLL)), vmulq_laneq_f64(vmulq_n_f64(vaddq_f64(*(float64x2_t *)(v91 + 192), *(float64x2_t *)(v91 + 192)), _Q1.f64[0]), _Q1, 1)), vmulq_n_f64(_Q1, *(double *)&_D2 * *(double *)(v91 + 168)+ 1.0+ *(double *)&_D2 * (*(double *)&_D2 * *(double *)(v91 + 176))+ *(double *)&_D2 * (*(double *)&_D2 * (*(double *)&_D2 * *(double *)(v91 + 184)))));
      }
      else
      {
        if (v92 < 0.00000001)
        {
LABEL_89:
          LOBYTE(v48) = 0;
          if (v57 != 1)
            goto LABEL_92;
          goto LABEL_36;
        }
        v116.f64[0] = v21.f64[0];
        v116.f64[1] = v22.f64[0];
        _Q1 = vmulq_n_f64(v116, 1.0 / v92);
        _D0 = v22.f64[0] * (1.0 / v92);
        __asm { FMLA            D2, D0, V1.D[1] }
        v71 = vmulq_n_f64(_Q1, _D2 * *(double *)(v91 + 168) + 1.0 + _D2 * _D2 * (*(double *)(v91 + 176) + _D2 * *(double *)(v91 + 184)));
      }
LABEL_27:
      v72 = (double *)&v66[9 * v87];
      v73.f64[0] = v72[2] + *v72 * v71.f64[0] + vmuld_lane_f64(v72[1], v71, 1);
      v73.f64[1] = vmuld_lane_f64(v72[4], v71, 1) + v72[5];
      _D2 = vsubq_f64(v73, vcvtq_f64_f32(*v86)).f64[1];
      __asm { FMLA            D1, D2, V0.D[1] }
      v79 = v64 * v85 * (v64 * v85);
      if (_D1 > v79)
        v48 = 0;
      else
        v48 = (v92 * v92 >= v68 * (v93 + v92 * v92 + 1.0)) & v48;
      v80 = _D1 <= v79 && v92 * v92 >= v68 * (v93 + v92 * v92 + 1.0);
      v81 = *v27;
      if (_D1 < v63)
        ++v81;
      *v27 = v81;
      v60 = (v80 + v60);
      if ((v57 | v48) != 1)
      {
LABEL_92:
        v120 = 0;
        LOBYTE(v48) = 0;
        *((_BYTE *)v27 + 4) = 0;
        goto LABEL_97;
      }
LABEL_36:
      if (a3 == ++v69)
        goto LABEL_22;
    }
  }
LABEL_96:
  *((_BYTE *)v27 + 4) = v58;
  v120 = v48 & 1;
LABEL_97:
  *((_BYTE *)v27 + 20) = v120;
  v31 = v48;
  return v31 & 1;
}

void sub_20FBCAE10(uint64_t a1, _DWORD *a2, int a3)
{
  __int128 v3;
  __int128 v4;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  _DWORD *v26;
  double v27;
  double v28;
  float64x2_t v30;
  double v36;
  double v37;
  double v38;
  float64x2_t v40;
  float64x2_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  float64x2_t *v46;
  uint64_t v47;
  float64x2_t *v48;
  float64x2_t *v49;
  float64x2_t *v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t *v53;
  int64x2_t *v54;
  uint64_t v55;
  double v56;
  double v58;
  float64x2_t v59;
  double v60;
  double v62;
  double v63;
  float64x2_t v64;
  float64x2_t v65;
  float64_t v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  float64x2_t v74;
  float64x2_t *v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  double v79;
  double *v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  const char *v84;
  unsigned __int8 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v90;
  _DWORD *v91;
  int v92;
  _DWORD *v93;
  uint64_t v94;
  uint64_t v95;
  _DWORD *v96;
  uint64_t v97;
  _DWORD *v98;
  uint64_t v99;
  unsigned int *v100;
  int v101;
  float64_t v102;
  float64x2_t v103;
  __int128 v104;
  float64x2_t v105;
  __int128 v106;
  float64x2_t v107;
  float64x2_t *v108;
  float64x2_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;

  v8 = a2 + 4584;
  *(_QWORD *)a1 = a2;
  v9 = a2[4584];
  v10 = *(unsigned int *)(a1 + 168);
  LODWORD(v11) = v9;
  if (v10 < v9)
  {
    bzero((void *)(a1 + 4 * v10 + 8), 4 * (v9 - v10));
    LODWORD(v11) = *v8;
  }
  *(_DWORD *)(a1 + 168) = v9;
  v12 = 0;
  if ((_DWORD)v11)
  {
    v11 = v11;
    v13 = a2 + 1522;
    v14 = (_DWORD *)(a1 + 8);
    do
    {
      *v14++ = v12;
      v12 += *v13;
      v13 += 1020;
      --v11;
    }
    while (v11);
  }
  *(_DWORD *)(a1 + 172) = v12;
  v15 = (a2[420] * v12);
  v16 = *(unsigned int *)(a1 + 4016);
  if (v16 < v15)
    bzero((void *)(a1 + 96 * v16 + 176), 96 * (v15 - v16));
  *(_DWORD *)(a1 + 4016) = v15;
  v17 = a2[420];
  v92 = v12;
  v18 = v17 * v12;
  if (a3)
    v19 = v17 * v12;
  else
    v19 = 0;
  *(_DWORD *)(a1 + 4984) = v19;
  v20 = *(unsigned int *)(a1 + 7872);
  if (v20 < v18)
  {
    bzero((void *)(a1 + 72 * v20 + 4992), 72 * (v18 - v20));
    v17 = a2[420];
  }
  v93 = a2;
  *(_DWORD *)(a1 + 7872) = v18;
  if (v17)
  {
    v21 = a1 + 176;
    v22 = a1 + 4024;
    v23 = a1 + 4992;
    v94 = v17;
    v95 = 0;
    v98 = a2 + 504;
    v91 = a2 + 4652;
    v96 = a2 + 4586;
    v24 = "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)";
    v100 = v8;
    v101 = a3;
    while (1)
    {
      v97 = *v8;
      if ((_DWORD)v97)
        break;
LABEL_15:
      if (++v95 == v94)
        return;
    }
    v25 = 0;
    v26 = &v93[42 * v95];
    v27 = *((double *)v26 + 20);
    v40 = *(float64x2_t *)v26;
    *(_QWORD *)&v3 = *((_QWORD *)v26 + 2);
    v41 = *(float64x2_t *)(v26 + 6);
    *(_QWORD *)&v4 = *((_QWORD *)v26 + 5);
    _Q26 = *((float64x2_t *)v26 + 3);
    v28 = *((double *)v26 + 8);
    *(_QWORD *)&_Q5.f64[0] = v3;
    *(_QWORD *)&_Q5.f64[1] = v4;
    v30 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v26, (int64x2_t)v41), *((double *)v26 + 18)), (float64x2_t)vzip2q_s64(*(int64x2_t *)v26, (int64x2_t)v41), *((float64x2_t *)v26 + 9), 1), _Q5, v27);
    _D1 = *((_QWORD *)v26 + 19);
    __asm { FMLA            D5, D1, V26.D[1] }
    v36 = _Q5.f64[0] + v28 * v27;
    v37 = -v30.f64[0];
    v38 = v30.f64[1];
    *(_QWORD *)&_Q26.f64[1] = vextq_s8((int8x16_t)_Q26, (int8x16_t)_Q26, 8uLL).u64[0];
    *(_QWORD *)&v40.f64[1] = vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL).u64[0];
    *(_QWORD *)&v41.f64[1] = vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL).u64[0];
    v107 = v40;
    v105 = v41;
    v106 = v3;
    v103 = _Q26;
    v104 = v4;
    v102 = v30.f64[0];
    while (1)
    {
      v99 = v25;
      v42 = v98[1020 * v25 + 1018];
      if ((_DWORD)v42)
        break;
LABEL_18:
      v25 = v99 + 1;
      if (v99 + 1 == v97)
        goto LABEL_15;
    }
    v43 = 0;
    v44 = *(_DWORD *)(a1 + 8 + 4 * v25) + v92 * v95;
    v45 = (uint64_t)&v91[66 * v95 + 16 * v25];
    v46 = (float64x2_t *)(v45 + 32);
    v47 = (uint64_t)&v98[1020 * v25 + 2];
    v48 = (float64x2_t *)&v96[16 * v25];
    v49 = v48 + 2;
    v111 = v45;
    v112 = v98[1020 * v25 + 1018];
    v109 = v48;
    v110 = v45 + 32;
    v108 = v48 + 2;
    while (!v8[728])
    {
      v81 = v47 + 1016 * v43;
      v82 = v81 + 96;
      v83 = *(_DWORD *)(v81 + 568);
      if (v83 == -1)
      {
        v84 = v24;
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)v24, 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
        v85 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v85 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v87 = qword_254A6DE40;
          v86 = qword_254A6DE48;
          while (v87 != v86)
          {
            v89 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v87;
            v88 = *(_QWORD *)(v87 + 8);
            v87 += 16;
            v89(v88, v84, 37, "", 0);
          }
        }
        v90 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v90 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        a3 = v101;
        if (!byte_254A6DE68)
          goto LABEL_51;
        v24 = v84;
        qword_254A6DE58(unk_254A6DE60, v84, 37, "", 0);
        v83 = *(_DWORD *)(v82 + 472);
        v21 = a1 + 176;
        v23 = a1 + 4992;
        v22 = a1 + 4024;
        v8 = v100;
        v40 = v107;
        v41 = v105;
        v3 = v106;
        _Q26 = v103;
        v4 = v104;
        v30.f64[0] = v102;
        v45 = v111;
        v42 = v112;
        v48 = v109;
        v46 = (float64x2_t *)v110;
        v49 = v108;
      }
      if (!v83)
      {
        sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_51:
        abort();
      }
      v51 = *(float64x2_t *)(v82 + 16);
      v51.f64[1] = *(float64_t *)(v82 + 40);
      v52 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v82, *(int64x2_t *)(v82 + 32));
      if (v8[66])
        goto LABEL_27;
LABEL_31:
      v54 = (int64x2_t *)(v23 + 72 * v44);
      v54->i64[0] = *(_QWORD *)&v52.f64[0];
      v54->i64[1] = 0;
      v54[1].i64[0] = *(_QWORD *)&v51.f64[0];
      v54[1].i64[1] = 0;
      v54[2] = vzip2q_s64((int64x2_t)v52, (int64x2_t)v51);
      v54[3].i64[0] = 0;
      v54[3].i64[1] = 0;
      v54[4].i64[0] = 0x3FF0000000000000;
      v55 = v47 + 1016 * v43;
      v56 = *(double *)(v55 + 88);
      _Q7.f64[0] = *(float64_t *)(v55 + 16);
      v58 = *(double *)(v55 + 40);
      v59 = *(float64x2_t *)(v55 + 24);
      v60 = *(double *)(v55 + 64);
      _Q0 = *(float64x2_t *)(v55 + 48);
      v62 = v28 * _Q7.f64[0];
      v63 = v36 * _Q7.f64[0];
      v64 = vmulq_n_f64(_Q26, _Q7.f64[0]);
      _Q7.f64[1] = v58;
      v65 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v55, (int64x2_t)v59), *(double *)(v55 + 72)), (float64x2_t)vzip2q_s64(*(int64x2_t *)v55, (int64x2_t)v59), *(float64x2_t *)(v55 + 72), 1), _Q7, v56);
      _D6 = *(_QWORD *)(v55 + 80);
      __asm { FMLA            D7, D6, V0.D[1] }
      v67 = _Q7.f64[0] + v60 * v56;
      v68 = vmuld_lane_f64(*(double *)&v4, *(float64x2_t *)v55, 1) + *(double *)&v3 * *(double *)v55 + v62;
      v69 = v37 * *(double *)v55 - v65.f64[0] - v63 - vmuld_lane_f64(v38, *(float64x2_t *)v55, 1);
      v70 = vmuld_lane_f64(*(double *)&v4, v59, 1) + *(double *)&v3 * v59.f64[0] + v28 * v58;
      v71 = v37 * v59.f64[0] - v65.f64[1] - v36 * v58 - vmuld_lane_f64(v38, v59, 1);
      v72 = vmuld_lane_f64(*(double *)&v4, _Q0, 1) + *(double *)&v3 * _Q0.f64[0] + v28 * v60;
      v73 = v60 * -v36 - v67 - v30.f64[0] * _Q0.f64[0];
      v74 = vaddq_f64(vmulq_n_f64(v40, *(double *)v55), vmulq_laneq_f64(v41, *(float64x2_t *)v55, 1));
      v75 = (float64x2_t *)(v21 + 96 * v44);
      v76 = vaddq_f64(v64, v74);
      *v75 = v76;
      v75[1].f64[0] = v68;
      v75[1].f64[1] = v69;
      v77 = vaddq_f64(vmulq_n_f64(_Q26, v58), vaddq_f64(vmulq_n_f64(v40, v59.f64[0]), vmulq_laneq_f64(v41, v59, 1)));
      v75[2] = v77;
      v75[3].f64[0] = v70;
      v75[3].f64[1] = v71;
      v78 = vaddq_f64(vmulq_laneq_f64(v41, _Q0, 1), vaddq_f64(vmulq_n_f64(v40, _Q0.f64[0]), vmulq_n_f64(_Q26, v60)));
      v75[4] = v78;
      v79 = v73 - vmuld_lane_f64(v38, _Q0, 1);
      v75[5].f64[0] = v72;
      v75[5].f64[1] = v79;
      if (a3)
      {
        v80 = (double *)(v22 + 24 * v44);
        *v80 = -(v79 * v78.f64[0] + v69 * v76.f64[0] + v71 * v77.f64[0]);
        v80[1] = -(vmuld_lane_f64(v79, v78, 1) + vmuld_lane_f64(v69, v76, 1) + vmuld_lane_f64(v71, v77, 1));
        v80[2] = -(v72 * v79 + v68 * v69 + v70 * v71);
      }
      ++v43;
      ++v44;
      if (v43 == v42)
        goto LABEL_18;
    }
    if (v43)
      v50 = v46;
    else
      v50 = (float64x2_t *)v45;
    v52 = *v50;
    v51 = v50[1];
    if (!v8[66])
      goto LABEL_31;
LABEL_27:
    if (v43)
      v53 = v49;
    else
      v53 = v48;
    v51 = vaddq_f64(v51, v53[1]);
    v52 = vaddq_f64(v52, *v53);
    goto LABEL_31;
  }
}

uint64_t sub_20FBCB53C(uint64_t a1, unsigned int a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  char *v9;
  unsigned int v10;
  uint64_t v11;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  unsigned int *v22;
  char *v23;
  int64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _OWORD *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  unsigned int v33;

  v4 = *(char **)(a1 + 968);
  v5 = *(char **)(a1 + 976);
  if (v5 != v4)
  {
    v6 = (v5 - v4) >> 4;
    do
    {
      v7 = v6 >> 1;
      v8 = (unsigned int *)&v4[16 * (v6 >> 1)];
      v10 = *v8;
      v9 = (char *)(v8 + 4);
      v6 += ~(v6 >> 1);
      if (v10 < a2)
        v4 = v9;
      else
        v6 = v7;
    }
    while (v6);
  }
  if (v4 == v5)
    return 0;
  if (*(_DWORD *)v4 != a2)
    return 0;
  v11 = *((_QWORD *)v4 + 1);
  if ((*(_BYTE *)(v11 + 4) & 6) != 0)
    return 0;
  *(_BYTE *)(v11 + 4) ^= 2u;
  v13 = *(char **)(a1 + 2112);
  v14 = *(_QWORD *)(a1 + 2120);
  if ((unint64_t)v13 >= v14)
  {
    v16 = *(char **)(a1 + 2104);
    v17 = (v13 - v16) >> 2;
    v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 62)
      sub_20E867F44();
    v19 = v14 - (_QWORD)v16;
    if (v19 >> 1 > v18)
      v18 = v19 >> 1;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
      v20 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v20 = v18;
    if (v20)
    {
      if (v20 >> 62)
        sub_20E877A38();
      v21 = operator new(4 * v20);
      v22 = (unsigned int *)&v21[4 * v17];
      v23 = &v21[4 * v20];
      *v22 = a2;
      v15 = (uint64_t)(v22 + 1);
      v24 = v13 - v16;
      if (v13 == v16)
        goto LABEL_30;
    }
    else
    {
      v21 = 0;
      v22 = (unsigned int *)(4 * v17);
      v23 = 0;
      *(_DWORD *)(4 * v17) = a2;
      v15 = 4 * v17 + 4;
      v24 = v13 - v16;
      if (v13 == v16)
      {
LABEL_30:
        *(_QWORD *)(a1 + 2104) = v22;
        *(_QWORD *)(a1 + 2112) = v15;
        *(_QWORD *)(a1 + 2120) = v23;
        if (v16)
          operator delete(v16);
        goto LABEL_32;
      }
    }
    v25 = v24 - 4;
    if (v25 < 0x2C)
      goto LABEL_37;
    if ((unint64_t)(v16 - v21) < 0x20)
      goto LABEL_37;
    v26 = (v25 >> 2) + 1;
    v27 = 4 * (v26 & 0x7FFFFFFFFFFFFFF8);
    v28 = &v13[-v27];
    v22 = (unsigned int *)((char *)v22 - v27);
    v29 = &v21[4 * v17 - 16];
    v30 = v13 - 16;
    v31 = v26 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v32 = *(_OWORD *)v30;
      *(v29 - 1) = *((_OWORD *)v30 - 1);
      *v29 = v32;
      v29 -= 2;
      v30 -= 32;
      v31 -= 8;
    }
    while (v31);
    v13 = v28;
    if (v26 != (v26 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_37:
      do
      {
        v33 = *((_DWORD *)v13 - 1);
        v13 -= 4;
        *--v22 = v33;
      }
      while (v13 != v16);
    }
    goto LABEL_30;
  }
  *(_DWORD *)v13 = a2;
  v15 = (uint64_t)(v13 + 4);
LABEL_32:
  *(_QWORD *)(a1 + 2112) = v15;
  *(_BYTE *)(a1 + 1594) = 0;
  *(_WORD *)(a1 + 1592) = 256;
  return 1;
}

uint64_t sub_20FBCB744(uint64_t a1, unsigned int a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  char *v9;
  unsigned int v10;
  uint64_t v11;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  unsigned int *v22;
  char *v23;
  int64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _OWORD *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  unsigned int v33;

  v4 = *(char **)(a1 + 8);
  v5 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    v6 = (v5 - v4) >> 4;
    do
    {
      v7 = v6 >> 1;
      v8 = (unsigned int *)&v4[16 * (v6 >> 1)];
      v10 = *v8;
      v9 = (char *)(v8 + 4);
      v6 += ~(v6 >> 1);
      if (v10 < a2)
        v4 = v9;
      else
        v6 = v7;
    }
    while (v6);
  }
  if (v4 == v5)
    return 0;
  if (*(_DWORD *)v4 != a2)
    return 0;
  v11 = *((_QWORD *)v4 + 1);
  if ((*(_BYTE *)(v11 + 4) & 7) != 0)
    return 0;
  *(_BYTE *)(v11 + 4) ^= 4u;
  v13 = *(char **)(a1 + 1608);
  v14 = *(_QWORD *)(a1 + 1616);
  if ((unint64_t)v13 >= v14)
  {
    v16 = *(char **)(a1 + 1600);
    v17 = (v13 - v16) >> 2;
    v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 62)
      sub_20E867F44();
    v19 = v14 - (_QWORD)v16;
    if (v19 >> 1 > v18)
      v18 = v19 >> 1;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
      v20 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v20 = v18;
    if (v20)
    {
      if (v20 >> 62)
        sub_20E877A38();
      v21 = operator new(4 * v20);
      v22 = (unsigned int *)&v21[4 * v17];
      v23 = &v21[4 * v20];
      *v22 = a2;
      v15 = (uint64_t)(v22 + 1);
      v24 = v13 - v16;
      if (v13 == v16)
        goto LABEL_30;
    }
    else
    {
      v21 = 0;
      v22 = (unsigned int *)(4 * v17);
      v23 = 0;
      *(_DWORD *)(4 * v17) = a2;
      v15 = 4 * v17 + 4;
      v24 = v13 - v16;
      if (v13 == v16)
      {
LABEL_30:
        *(_QWORD *)(a1 + 1600) = v22;
        *(_QWORD *)(a1 + 1608) = v15;
        *(_QWORD *)(a1 + 1616) = v23;
        if (v16)
          operator delete(v16);
        goto LABEL_32;
      }
    }
    v25 = v24 - 4;
    if (v25 < 0x2C)
      goto LABEL_37;
    if ((unint64_t)(v16 - v21) < 0x20)
      goto LABEL_37;
    v26 = (v25 >> 2) + 1;
    v27 = 4 * (v26 & 0x7FFFFFFFFFFFFFF8);
    v28 = &v13[-v27];
    v22 = (unsigned int *)((char *)v22 - v27);
    v29 = &v21[4 * v17 - 16];
    v30 = v13 - 16;
    v31 = v26 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v32 = *(_OWORD *)v30;
      *(v29 - 1) = *((_OWORD *)v30 - 1);
      *v29 = v32;
      v29 -= 2;
      v30 -= 32;
      v31 -= 8;
    }
    while (v31);
    v13 = v28;
    if (v26 != (v26 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_37:
      do
      {
        v33 = *((_DWORD *)v13 - 1);
        v13 -= 4;
        *--v22 = v33;
      }
      while (v13 != v16);
    }
    goto LABEL_30;
  }
  *(_DWORD *)v13 = a2;
  v15 = (uint64_t)(v13 + 4);
LABEL_32:
  *(_QWORD *)(a1 + 1608) = v15;
  *(_BYTE *)(a1 + 1594) = 0;
  *(_WORD *)(a1 + 1592) = 256;
  return 1;
}

uint64_t sub_20FBCB948(uint64_t a1, unsigned int a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  char *v9;
  unsigned int v10;
  uint64_t v11;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  unsigned int *v22;
  char *v23;
  int64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _OWORD *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  unsigned int v33;

  v4 = *(char **)(a1 + 104);
  v5 = *(char **)(a1 + 112);
  if (v5 != v4)
  {
    v6 = (v5 - v4) >> 4;
    do
    {
      v7 = v6 >> 1;
      v8 = (unsigned int *)&v4[16 * (v6 >> 1)];
      v10 = *v8;
      v9 = (char *)(v8 + 4);
      v6 += ~(v6 >> 1);
      if (v10 < a2)
        v4 = v9;
      else
        v6 = v7;
    }
    while (v6);
  }
  if (v4 == v5)
    return 0;
  if (*(_DWORD *)v4 != a2)
    return 0;
  v11 = *((_QWORD *)v4 + 1);
  if ((*(_BYTE *)(v11 + 4) & 7) != 0)
    return 0;
  *(_BYTE *)(v11 + 4) ^= 4u;
  v13 = *(char **)(a1 + 1632);
  v14 = *(_QWORD *)(a1 + 1640);
  if ((unint64_t)v13 >= v14)
  {
    v16 = *(char **)(a1 + 1624);
    v17 = (v13 - v16) >> 2;
    v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 62)
      sub_20E867F44();
    v19 = v14 - (_QWORD)v16;
    if (v19 >> 1 > v18)
      v18 = v19 >> 1;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
      v20 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v20 = v18;
    if (v20)
    {
      if (v20 >> 62)
        sub_20E877A38();
      v21 = operator new(4 * v20);
      v22 = (unsigned int *)&v21[4 * v17];
      v23 = &v21[4 * v20];
      *v22 = a2;
      v15 = (uint64_t)(v22 + 1);
      v24 = v13 - v16;
      if (v13 == v16)
        goto LABEL_30;
    }
    else
    {
      v21 = 0;
      v22 = (unsigned int *)(4 * v17);
      v23 = 0;
      *(_DWORD *)(4 * v17) = a2;
      v15 = 4 * v17 + 4;
      v24 = v13 - v16;
      if (v13 == v16)
      {
LABEL_30:
        *(_QWORD *)(a1 + 1624) = v22;
        *(_QWORD *)(a1 + 1632) = v15;
        *(_QWORD *)(a1 + 1640) = v23;
        if (v16)
          operator delete(v16);
        goto LABEL_32;
      }
    }
    v25 = v24 - 4;
    if (v25 < 0x2C)
      goto LABEL_37;
    if ((unint64_t)(v16 - v21) < 0x20)
      goto LABEL_37;
    v26 = (v25 >> 2) + 1;
    v27 = 4 * (v26 & 0x7FFFFFFFFFFFFFF8);
    v28 = &v13[-v27];
    v22 = (unsigned int *)((char *)v22 - v27);
    v29 = &v21[4 * v17 - 16];
    v30 = v13 - 16;
    v31 = v26 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v32 = *(_OWORD *)v30;
      *(v29 - 1) = *((_OWORD *)v30 - 1);
      *v29 = v32;
      v29 -= 2;
      v30 -= 32;
      v31 -= 8;
    }
    while (v31);
    v13 = v28;
    if (v26 != (v26 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_37:
      do
      {
        v33 = *((_DWORD *)v13 - 1);
        v13 -= 4;
        *--v22 = v33;
      }
      while (v13 != v16);
    }
    goto LABEL_30;
  }
  *(_DWORD *)v13 = a2;
  v15 = (uint64_t)(v13 + 4);
LABEL_32:
  *(_QWORD *)(a1 + 1632) = v15;
  *(_BYTE *)(a1 + 1594) = 0;
  *(_WORD *)(a1 + 1592) = 256;
  return 1;
}

uint64_t sub_20FBCBB4C(uint64_t a1, unsigned int a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  char *v9;
  unsigned int v10;
  uint64_t v11;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  unsigned int *v22;
  char *v23;
  int64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _OWORD *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  unsigned int v33;

  v4 = *(char **)(a1 + 392);
  v5 = *(char **)(a1 + 400);
  if (v5 != v4)
  {
    v6 = (v5 - v4) >> 4;
    do
    {
      v7 = v6 >> 1;
      v8 = (unsigned int *)&v4[16 * (v6 >> 1)];
      v10 = *v8;
      v9 = (char *)(v8 + 4);
      v6 += ~(v6 >> 1);
      if (v10 < a2)
        v4 = v9;
      else
        v6 = v7;
    }
    while (v6);
  }
  if (v4 == v5)
    return 0;
  if (*(_DWORD *)v4 != a2)
    return 0;
  v11 = *((_QWORD *)v4 + 1);
  if ((*(_BYTE *)(v11 + 4) & 7) != 0)
    return 0;
  *(_BYTE *)(v11 + 4) ^= 4u;
  v13 = *(char **)(a1 + 1704);
  v14 = *(_QWORD *)(a1 + 1712);
  if ((unint64_t)v13 >= v14)
  {
    v16 = *(char **)(a1 + 1696);
    v17 = (v13 - v16) >> 2;
    v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 62)
      sub_20E867F44();
    v19 = v14 - (_QWORD)v16;
    if (v19 >> 1 > v18)
      v18 = v19 >> 1;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
      v20 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v20 = v18;
    if (v20)
    {
      if (v20 >> 62)
        sub_20E877A38();
      v21 = operator new(4 * v20);
      v22 = (unsigned int *)&v21[4 * v17];
      v23 = &v21[4 * v20];
      *v22 = a2;
      v15 = (uint64_t)(v22 + 1);
      v24 = v13 - v16;
      if (v13 == v16)
        goto LABEL_30;
    }
    else
    {
      v21 = 0;
      v22 = (unsigned int *)(4 * v17);
      v23 = 0;
      *(_DWORD *)(4 * v17) = a2;
      v15 = 4 * v17 + 4;
      v24 = v13 - v16;
      if (v13 == v16)
      {
LABEL_30:
        *(_QWORD *)(a1 + 1696) = v22;
        *(_QWORD *)(a1 + 1704) = v15;
        *(_QWORD *)(a1 + 1712) = v23;
        if (v16)
          operator delete(v16);
        goto LABEL_32;
      }
    }
    v25 = v24 - 4;
    if (v25 < 0x2C)
      goto LABEL_37;
    if ((unint64_t)(v16 - v21) < 0x20)
      goto LABEL_37;
    v26 = (v25 >> 2) + 1;
    v27 = 4 * (v26 & 0x7FFFFFFFFFFFFFF8);
    v28 = &v13[-v27];
    v22 = (unsigned int *)((char *)v22 - v27);
    v29 = &v21[4 * v17 - 16];
    v30 = v13 - 16;
    v31 = v26 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v32 = *(_OWORD *)v30;
      *(v29 - 1) = *((_OWORD *)v30 - 1);
      *v29 = v32;
      v29 -= 2;
      v30 -= 32;
      v31 -= 8;
    }
    while (v31);
    v13 = v28;
    if (v26 != (v26 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_37:
      do
      {
        v33 = *((_DWORD *)v13 - 1);
        v13 -= 4;
        *--v22 = v33;
      }
      while (v13 != v16);
    }
    goto LABEL_30;
  }
  *(_DWORD *)v13 = a2;
  v15 = (uint64_t)(v13 + 4);
LABEL_32:
  *(_QWORD *)(a1 + 1704) = v15;
  *(_BYTE *)(a1 + 1594) = 0;
  *(_WORD *)(a1 + 1592) = 256;
  return 1;
}

uint64_t sub_20FBCBD50(uint64_t a1, unsigned int a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  char *v9;
  unsigned int v10;
  uint64_t v11;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  unsigned int *v22;
  char *v23;
  int64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _OWORD *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  unsigned int v33;

  v4 = *(char **)(a1 + 968);
  v5 = *(char **)(a1 + 976);
  if (v5 != v4)
  {
    v6 = (v5 - v4) >> 4;
    do
    {
      v7 = v6 >> 1;
      v8 = (unsigned int *)&v4[16 * (v6 >> 1)];
      v10 = *v8;
      v9 = (char *)(v8 + 4);
      v6 += ~(v6 >> 1);
      if (v10 < a2)
        v4 = v9;
      else
        v6 = v7;
    }
    while (v6);
  }
  if (v4 == v5)
    return 0;
  if (*(_DWORD *)v4 != a2)
    return 0;
  v11 = *((_QWORD *)v4 + 1);
  if ((*(_BYTE *)(v11 + 4) & 7) != 0)
    return 0;
  *(_BYTE *)(v11 + 4) ^= 4u;
  v13 = *(char **)(a1 + 1848);
  v14 = *(_QWORD *)(a1 + 1856);
  if ((unint64_t)v13 >= v14)
  {
    v16 = *(char **)(a1 + 1840);
    v17 = (v13 - v16) >> 2;
    v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 62)
      sub_20E867F44();
    v19 = v14 - (_QWORD)v16;
    if (v19 >> 1 > v18)
      v18 = v19 >> 1;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
      v20 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v20 = v18;
    if (v20)
    {
      if (v20 >> 62)
        sub_20E877A38();
      v21 = operator new(4 * v20);
      v22 = (unsigned int *)&v21[4 * v17];
      v23 = &v21[4 * v20];
      *v22 = a2;
      v15 = (uint64_t)(v22 + 1);
      v24 = v13 - v16;
      if (v13 == v16)
        goto LABEL_30;
    }
    else
    {
      v21 = 0;
      v22 = (unsigned int *)(4 * v17);
      v23 = 0;
      *(_DWORD *)(4 * v17) = a2;
      v15 = 4 * v17 + 4;
      v24 = v13 - v16;
      if (v13 == v16)
      {
LABEL_30:
        *(_QWORD *)(a1 + 1840) = v22;
        *(_QWORD *)(a1 + 1848) = v15;
        *(_QWORD *)(a1 + 1856) = v23;
        if (v16)
          operator delete(v16);
        goto LABEL_32;
      }
    }
    v25 = v24 - 4;
    if (v25 < 0x2C)
      goto LABEL_37;
    if ((unint64_t)(v16 - v21) < 0x20)
      goto LABEL_37;
    v26 = (v25 >> 2) + 1;
    v27 = 4 * (v26 & 0x7FFFFFFFFFFFFFF8);
    v28 = &v13[-v27];
    v22 = (unsigned int *)((char *)v22 - v27);
    v29 = &v21[4 * v17 - 16];
    v30 = v13 - 16;
    v31 = v26 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v32 = *(_OWORD *)v30;
      *(v29 - 1) = *((_OWORD *)v30 - 1);
      *v29 = v32;
      v29 -= 2;
      v30 -= 32;
      v31 -= 8;
    }
    while (v31);
    v13 = v28;
    if (v26 != (v26 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_37:
      do
      {
        v33 = *((_DWORD *)v13 - 1);
        v13 -= 4;
        *--v22 = v33;
      }
      while (v13 != v16);
    }
    goto LABEL_30;
  }
  *(_DWORD *)v13 = a2;
  v15 = (uint64_t)(v13 + 4);
LABEL_32:
  *(_QWORD *)(a1 + 1848) = v15;
  *(_BYTE *)(a1 + 1594) = 0;
  *(_WORD *)(a1 + 1592) = 256;
  return 1;
}

void sub_20FBCBF58(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __n128 v42;
  __int128 v43;
  uint64_t **i;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v2 = *(_QWORD *)(a1 + 320);
  v3 = *(_QWORD *)(a1 + 328);
  while (v2 != v3)
  {
    v4 = *(_QWORD *)(v2 + 8);
    if (*(_BYTE *)(v4 + 20))
    {
      v5 = *(_OWORD *)(v4 + 200);
      v6 = *(_OWORD *)(v4 + 232);
      *(_OWORD *)(v4 + 64) = *(_OWORD *)(v4 + 216);
      *(_OWORD *)(v4 + 80) = v6;
      *(_QWORD *)(v4 + 96) = *(_QWORD *)(v4 + 248);
      *(_OWORD *)(v4 + 32) = *(_OWORD *)(v4 + 184);
      *(_OWORD *)(v4 + 48) = v5;
      *(_OWORD *)(v4 + 104) = *(_OWORD *)(v4 + 256);
      *(_QWORD *)(v4 + 120) = *(_QWORD *)(v4 + 272);
      *(_BYTE *)(v4 + 128) = 0;
    }
    v2 += 16;
  }
  v7 = *(_QWORD *)(a1 + 416);
  v8 = *(_QWORD *)(a1 + 424);
  while (v7 != v8)
  {
    v9 = *(_QWORD *)(v7 + 8);
    if (*(_BYTE *)(v9 + 20))
    {
      v10 = *(_OWORD *)(v9 + 160);
      *(_OWORD *)(v9 + 64) = *(_OWORD *)(v9 + 144);
      *(_OWORD *)(v9 + 80) = v10;
      *(_QWORD *)(v9 + 96) = *(_QWORD *)(v9 + 176);
      v11 = *(_OWORD *)(v9 + 128);
      *(_OWORD *)(v9 + 32) = *(_OWORD *)(v9 + 112);
      *(_OWORD *)(v9 + 48) = v11;
      *(_BYTE *)(v9 + 104) = 0;
    }
    v7 += 16;
  }
  v12 = *(_QWORD *)(a1 + 512);
  v13 = *(_QWORD *)(a1 + 520);
  while (v12 != v13)
  {
    v14 = *(_QWORD *)(v12 + 8);
    if (*(_BYTE *)(v14 + 20))
    {
      v15 = *(_OWORD *)(v14 + 152);
      v16 = *(_OWORD *)(v14 + 184);
      *(_OWORD *)(v14 + 64) = *(_OWORD *)(v14 + 168);
      *(_OWORD *)(v14 + 80) = v16;
      *(_QWORD *)(v14 + 96) = *(_QWORD *)(v14 + 200);
      *(_OWORD *)(v14 + 32) = *(_OWORD *)(v14 + 136);
      *(_OWORD *)(v14 + 48) = v15;
      *(_OWORD *)(v14 + 104) = *(_OWORD *)(v14 + 208);
      *(_QWORD *)(v14 + 120) = *(_QWORD *)(v14 + 224);
    }
    v12 += 16;
  }
  v17 = *(_QWORD *)(a1 + 608);
  v18 = *(_QWORD *)(a1 + 616);
  while (v17 != v18)
  {
    v19 = *(_QWORD *)(v17 + 8);
    if (*(_BYTE *)(v19 + 20))
    {
      v20 = *(_OWORD *)(v19 + 152);
      v21 = *(_OWORD *)(v19 + 184);
      *(_OWORD *)(v19 + 64) = *(_OWORD *)(v19 + 168);
      *(_OWORD *)(v19 + 80) = v21;
      *(_QWORD *)(v19 + 96) = *(_QWORD *)(v19 + 200);
      *(_OWORD *)(v19 + 32) = *(_OWORD *)(v19 + 136);
      *(_OWORD *)(v19 + 48) = v20;
      *(_OWORD *)(v19 + 104) = *(_OWORD *)(v19 + 208);
      *(_QWORD *)(v19 + 120) = *(_QWORD *)(v19 + 224);
    }
    v17 += 16;
  }
  v22 = *(_QWORD *)(a1 + 704);
  v23 = *(_QWORD *)(a1 + 712);
  while (v22 != v23)
  {
    v24 = *(_QWORD *)(v22 + 8);
    if (*(_BYTE *)(v24 + 20))
    {
      *(_OWORD *)(v24 + 32) = *(_OWORD *)(v24 + 56);
      *(_QWORD *)(v24 + 48) = *(_QWORD *)(v24 + 72);
    }
    v22 += 16;
  }
  v25 = *(_QWORD *)(a1 + 800);
  v26 = *(_QWORD *)(a1 + 808);
  while (v25 != v26)
  {
    v27 = *(_QWORD *)(v25 + 8);
    if (*(_BYTE *)(v27 + 20))
    {
      *(_QWORD *)(v27 + 32) = *(_QWORD *)(v27 + 48);
      *(_BYTE *)(v27 + 40) = 0;
    }
    v25 += 16;
  }
  v28 = *(_QWORD *)(a1 + 896);
  v29 = *(_QWORD *)(a1 + 904);
  while (v28 != v29)
  {
    v30 = *(_QWORD *)(v28 + 8);
    if (*(_BYTE *)(v30 + 20))
    {
      v31 = v30 + 16;
      v32 = *(_OWORD *)(v30 + 168);
      *(_OWORD *)(v30 + 32) = *(_OWORD *)(v30 + 152);
      *(_OWORD *)(v30 + 48) = v32;
      *(_QWORD *)(v30 + 64) = *(_QWORD *)(v30 + 184);
      *(_BYTE *)(v30 + 72) = *(_BYTE *)(v30 + 192);
      sub_20F6169C8(v30 + 16);
      sub_20F616F2C(v31);
    }
    v28 += 16;
  }
  v33 = *(_QWORD *)(a1 + 992);
  v34 = *(_QWORD *)(a1 + 1000);
  while (v33 != v34)
  {
    v35 = *(_QWORD *)(v33 + 8);
    if (*(_BYTE *)(v35 + 20))
    {
      v36 = *(_OWORD *)(v35 + 504);
      *(_OWORD *)(v35 + 192) = *(_OWORD *)(v35 + 488);
      *(_OWORD *)(v35 + 208) = v36;
      v37 = *(_OWORD *)(v35 + 536);
      *(_OWORD *)(v35 + 224) = *(_OWORD *)(v35 + 520);
      *(_OWORD *)(v35 + 240) = v37;
      v38 = *(_OWORD *)(v35 + 440);
      *(_OWORD *)(v35 + 128) = *(_OWORD *)(v35 + 424);
      *(_OWORD *)(v35 + 144) = v38;
      v39 = *(_OWORD *)(v35 + 472);
      *(_OWORD *)(v35 + 160) = *(_OWORD *)(v35 + 456);
      *(_OWORD *)(v35 + 176) = v39;
      v40 = *(_OWORD *)(v35 + 376);
      *(_OWORD *)(v35 + 64) = *(_OWORD *)(v35 + 360);
      *(_OWORD *)(v35 + 80) = v40;
      v41 = *(_OWORD *)(v35 + 408);
      *(_OWORD *)(v35 + 96) = *(_OWORD *)(v35 + 392);
      *(_OWORD *)(v35 + 112) = v41;
      v42 = *(__n128 *)(v35 + 328);
      v43 = *(_OWORD *)(v35 + 344);
      *(__n128 *)(v35 + 32) = v42;
      *(_OWORD *)(v35 + 48) = v43;
      for (i = *(uint64_t ***)(v35 + 296); i; i = (uint64_t **)*i)
        v42.n128_f64[0] = sub_20F6182A0((char *)i[5], (float64x2_t *)(v35 + 32), v42);
      sub_20F6178A8(v35 + 16);
    }
    v33 += 16;
  }
  v45 = *(_QWORD *)(a1 + 1088);
  v46 = *(_QWORD *)(a1 + 1096);
  while (v45 != v46)
  {
    v47 = *(_QWORD *)(v45 + 8);
    if (*(_BYTE *)(v47 + 20))
    {
      v48 = *(_OWORD *)(v47 + 224);
      *(_OWORD *)(v47 + 64) = *(_OWORD *)(v47 + 208);
      *(_OWORD *)(v47 + 80) = v48;
      *(_QWORD *)(v47 + 96) = *(_QWORD *)(v47 + 240);
      v49 = *(_OWORD *)(v47 + 192);
      *(_OWORD *)(v47 + 32) = *(_OWORD *)(v47 + 176);
      *(_OWORD *)(v47 + 48) = v49;
      sub_20F811C04(v47 + 16);
    }
    v45 += 16;
  }
  v50 = *(_QWORD *)(a1 + 1184);
  v51 = *(_QWORD *)(a1 + 1192);
  while (v50 != v51)
  {
    v52 = *(_QWORD *)(v50 + 8);
    if (*(_BYTE *)(v52 + 20))
    {
      *(_OWORD *)(v52 + 32) = *(_OWORD *)(v52 + 64);
      *(_QWORD *)(v52 + 48) = *(_QWORD *)(v52 + 80);
    }
    v50 += 16;
  }
  v53 = *(_QWORD *)(a1 + 1280);
  v54 = *(_QWORD *)(a1 + 1288);
  while (v53 != v54)
  {
    v55 = *(_QWORD *)(v53 + 8);
    if (*(_BYTE *)(v55 + 20))
      *(_QWORD *)(v55 + 32) = *(_QWORD *)(v55 + 40);
    v53 += 16;
  }
  *(_BYTE *)(a1 + 2973) = 0;
  *(_BYTE *)(a1 + 2968) = 0;
  *(_WORD *)(a1 + 2971) = 0;
  *(_BYTE *)(a1 + 2969) = *(_BYTE *)(a1 + 2970);
}

void sub_20FBCC2E4(_QWORD *a1, uint64_t **a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  BOOL v35;
  uint64_t *v36;
  int8x8_t v37;
  unint64_t v38;
  uint8x8_t v39;
  unint64_t v40;
  uint64_t **v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *p_shared_owners;
  unint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  char v56;
  int v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  BOOL v64;
  uint64_t *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t **v74;
  uint64_t *v75;
  _QWORD *v76;

  v4 = a4;
  v7 = *(_QWORD *)(a3 + 48);
  v8 = *(uint64_t **)(v7 + 120);
  v9 = *(uint64_t **)(v7 + 128);
  v10 = a4[6];
  v12 = *(_QWORD *)(v10 + 120);
  v11 = *(_QWORD *)(v10 + 128);
  if (v8 != v9)
  {
    v13 = v11 - v12;
    if (v11 == v12)
      goto LABEL_72;
    v14 = v8;
    while (1)
    {
      v15 = *v14;
      v16 = *((_DWORD *)v14 + 2);
      v17 = *(_QWORD *)(v10 + 120);
      v18 = v13 >> 6;
      v19 = *((_DWORD *)v14 + 4);
      do
      {
        v20 = v18 >> 1;
        v21 = v17 + (v18 >> 1 << 6);
        v22 = *(_DWORD *)(v21 + 16);
        v23 = v22 >= v19;
        if (v22 != v19)
          goto LABEL_12;
        if (*(_QWORD *)v21 < v15)
          goto LABEL_6;
        if (*(_QWORD *)v21 == v15)
        {
          v23 = *(_DWORD *)(v21 + 8) >= v16;
LABEL_12:
          if (!v23)
          {
LABEL_6:
            v17 = v21 + 64;
            v20 = v18 + ~v20;
          }
        }
        v18 = v20;
      }
      while (v20);
      if (v17 != v11 && *(_DWORD *)(v17 + 16) == v19 && *(_QWORD *)v17 == v15 && *(_DWORD *)(v17 + 8) == v16)
      {
        *a1 = 0;
        a1[1] = 0;
        return;
      }
      v14 += 8;
      if (v14 == v9)
        goto LABEL_21;
    }
  }
  v13 = v11 - v12;
LABEL_21:
  if (v12 == v11)
    goto LABEL_72;
  v72 = v13;
  v73 = v8;
  v75 = v4;
  v76 = a1;
  v74 = a2;
  v24 = a2 + 3;
  do
  {
    while (1)
    {
      v25 = *(_QWORD *)(a3 + 48);
      v26 = *(_QWORD *)(v25 + 120);
      v27 = *(_QWORD *)(v25 + 128);
      v28 = *(_QWORD *)v12;
      v29 = *(_DWORD *)(v12 + 8);
      v30 = *(_DWORD *)(v12 + 16);
      if (v27 != v26)
      {
        v31 = (v27 - v26) >> 6;
        while (1)
        {
          v32 = v31 >> 1;
          v33 = v26 + (v31 >> 1 << 6);
          v34 = *(_DWORD *)(v33 + 16);
          v35 = v34 >= v30;
          if (v34 != v30)
            goto LABEL_32;
          if (*(_QWORD *)v33 >= v28)
            break;
LABEL_26:
          v26 = v33 + 64;
          v32 = v31 + ~v32;
LABEL_27:
          v31 = v32;
          if (!v32)
            goto LABEL_35;
        }
        if (*(_QWORD *)v33 != v28)
          goto LABEL_27;
        v35 = *(_DWORD *)(v33 + 8) >= v29;
LABEL_32:
        if (v35)
          goto LABEL_27;
        goto LABEL_26;
      }
LABEL_35:
      if (v26 == v27 || *(_DWORD *)(v26 + 16) != v30 || *(_QWORD *)v26 != v28 || *(_DWORD *)(v26 + 8) != v29)
        break;
      sub_20FB96F70(v24, (uint64_t *)v12, *(_DWORD *)(v12 + 28));
      v12 += 64;
      if (v12 == v11)
        goto LABEL_71;
    }
    v36 = sub_20E9DF85C(v24, (uint64_t *)v12);
    v37 = (int8x8_t)v36[6];
    if (v37)
    {
      v38 = *(unsigned int *)(v12 + 28);
      v39 = (uint8x8_t)vcnt_s8(v37);
      v39.i16[0] = vaddlv_u8(v39);
      if (v39.u32[0] > 1uLL)
      {
        v40 = *(unsigned int *)(v12 + 28);
        if (*(_QWORD *)&v37 <= v38)
          v40 = v38 % *(_QWORD *)&v37;
      }
      else
      {
        v40 = (v37.i32[0] - 1) & v38;
      }
      v41 = *(uint64_t ***)(v36[5] + 8 * v40);
      if (v41)
      {
        v42 = *v41;
        if (v42)
        {
          if (v39.u32[0] < 2uLL)
          {
            v43 = *(_QWORD *)&v37 - 1;
            while (1)
            {
              v45 = v42[1];
              if (v45 == v38)
              {
                if (*((_DWORD *)v42 + 4) == (_DWORD)v38)
                  goto LABEL_63;
              }
              else if ((v45 & v43) != v40)
              {
                goto LABEL_61;
              }
              v42 = (uint64_t *)*v42;
              if (!v42)
                goto LABEL_61;
            }
          }
          do
          {
            v44 = v42[1];
            if (v44 == v38)
            {
              if (*((_DWORD *)v42 + 4) == (_DWORD)v38)
                goto LABEL_63;
            }
            else
            {
              if (v44 >= *(_QWORD *)&v37)
                v44 %= *(_QWORD *)&v37;
              if (v44 != v40)
                break;
            }
            v42 = (uint64_t *)*v42;
          }
          while (v42);
        }
      }
    }
LABEL_61:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/TrackSet.hpp", 890, (uint64_t)"fitT != kfit->second.end()", 26, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v42 = 0;
    v25 = *(_QWORD *)(a3 + 48);
LABEL_63:
    v46 = *(_QWORD *)(a3 + 56);
    if (v46)
    {
      v47 = (unint64_t *)(v46 + 8);
      do
        v48 = __ldxr(v47);
      while (__stxr(v48 + 1, v47));
    }
    v49 = (std::__shared_weak_count *)v42[4];
    v42[3] = v25;
    v42[4] = v46;
    if (v49)
    {
      p_shared_owners = (unint64_t *)&v49->__shared_owners_;
      do
        v51 = __ldaxr(p_shared_owners);
      while (__stlxr(v51 - 1, p_shared_owners));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    sub_20FBCC800(*(_QWORD *)(a3 + 48), v12, (__int128 *)(v12 + 24));
    v12 += 64;
  }
  while (v12 != v11);
LABEL_71:
  v4 = v75;
  a1 = v76;
  v10 = v75[6];
  v8 = v73;
  a2 = v74;
  v13 = v72;
LABEL_72:
  if (*(_BYTE *)(v10 + 112))
  {
    v52 = *(_QWORD *)(a3 + 48);
    if (v13 <= (unint64_t)((char *)v9 - (char *)v8))
    {
      if (!*(_BYTE *)(v52 + 112))
        goto LABEL_77;
    }
    else
    {
      if (*(_BYTE *)(v52 + 112))
      {
        v53 = *(_OWORD *)(v10 + 48);
        *(_QWORD *)(v52 + 64) = *(_QWORD *)(v10 + 64);
        *(_OWORD *)(v52 + 48) = v53;
        *(_BYTE *)(v52 + 72) = *(_BYTE *)(v10 + 72);
        v54 = *(_OWORD *)(v10 + 76);
        v55 = *(_OWORD *)(v10 + 92);
        *(_DWORD *)(v52 + 108) = *(_DWORD *)(v10 + 108);
        *(_OWORD *)(v52 + 92) = v55;
        *(_OWORD *)(v52 + 76) = v54;
        goto LABEL_78;
      }
LABEL_77:
      v56 = *(_BYTE *)(v10 + 72);
      v57 = *(_DWORD *)(v10 + 108);
      v58 = *(_OWORD *)(v10 + 92);
      v59 = *(_OWORD *)(v10 + 76);
      v60 = *(_QWORD *)(v10 + 64);
      *(_OWORD *)(v52 + 48) = *(_OWORD *)(v10 + 48);
      *(_QWORD *)(v52 + 64) = v60;
      *(_QWORD *)(v52 + 40) = &off_24CA048E0;
      *(_BYTE *)(v52 + 72) = v56;
      *(_OWORD *)(v52 + 76) = v59;
      *(_OWORD *)(v52 + 92) = v58;
      *(_DWORD *)(v52 + 108) = v57;
      *(_BYTE *)(v52 + 112) = 1;
    }
  }
LABEL_78:
  v61 = (uint64_t *)v4[1];
  if (v61)
  {
    do
    {
      v62 = v61;
      v61 = (uint64_t *)*v61;
    }
    while (v61);
  }
  else
  {
    v63 = v4;
    do
    {
      v62 = (uint64_t *)v63[2];
      v64 = *v62 == (_QWORD)v63;
      v63 = v62;
    }
    while (!v64);
  }
  if (*a2 == v4)
    *a2 = v62;
  v65 = a2[1];
  a2[2] = (uint64_t *)((char *)a2[2] - 1);
  sub_20E8D2134(v65, v4);
  v66 = (std::__shared_weak_count *)v4[7];
  if (v66)
  {
    v67 = (unint64_t *)&v66->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  operator delete(v4);
  v69 = *(_QWORD *)(a3 + 56);
  *a1 = *(_QWORD *)(a3 + 48);
  a1[1] = v69;
  if (v69)
  {
    v70 = (unint64_t *)(v69 + 8);
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
}

char **sub_20FBCC800(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  char **result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  int v16;

  v12 = *(_OWORD *)a2;
  v3 = a3[1];
  v14 = *a3;
  v13 = *(_QWORD *)(a2 + 16);
  v15 = v3;
  v16 = *((_DWORD *)a3 + 8);
  v5 = *(_QWORD *)(a1 + 120);
  v6 = *(_QWORD *)(a1 + 128);
  result = (char **)(a1 + 120);
  if (v6 != v5)
  {
    v7 = (v6 - v5) >> 6;
    while (1)
    {
      v8 = v7 >> 1;
      v9 = v5 + (v7 >> 1 << 6);
      v10 = *(_DWORD *)(v9 + 16);
      v11 = v10 >= v13;
      if (v10 != (_DWORD)v13)
        goto LABEL_9;
      if (*(_QWORD *)v9 >= (unint64_t)v12)
        break;
LABEL_3:
      v5 = v9 + 64;
      v8 = v7 + ~v8;
LABEL_4:
      v7 = v8;
      if (!v8)
        goto LABEL_12;
    }
    if (*(_QWORD *)v9 != (_QWORD)v12)
      goto LABEL_4;
    v11 = *(_DWORD *)(v9 + 8) >= DWORD2(v12);
LABEL_9:
    if (v11)
      goto LABEL_4;
    goto LABEL_3;
  }
LABEL_12:
  if (v5 == v6
    || *(_DWORD *)(v5 + 16) != *(_DWORD *)(a2 + 16)
    || *(_QWORD *)v5 != *(_QWORD *)a2
    || *(_DWORD *)(v5 + 8) != *(_DWORD *)(a2 + 8))
  {
    return (char **)sub_20FBCC8E8(result, (char *)v5, &v12);
  }
  return result;
}

unint64_t sub_20FBCC8E8(char **a1, char *a2, __int128 *a3)
{
  unint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  char *v23;
  unint64_t v24;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  __int128 v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  __int128 v43;
  char *i;
  __int128 v45;
  char *v46;
  __int128 v48;
  __int128 v49;
  uint64_t v50;

  v6 = *a1;
  v5 = (unint64_t)a1[1];
  v7 = a2 - *a1;
  v8 = v7 >> 6;
  v9 = (unint64_t)&(*a1)[v7 & 0xFFFFFFFFFFFFFFC0];
  v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == v5)
    {
      v31 = *a3;
      *(_QWORD *)(v9 + 16) = *((_QWORD *)a3 + 2);
      *(_OWORD *)v9 = v31;
      v32 = &v6[64 * v8];
      *((_QWORD *)v32 + 3) = *((_QWORD *)a3 + 3);
      *((_QWORD *)v32 + 4) = *((_QWORD *)a3 + 4);
      *(_OWORD *)(v32 + 40) = *(__int128 *)((char *)a3 + 40);
      *((_DWORD *)v32 + 14) = *((_DWORD *)a3 + 14);
      a1[1] = (char *)(v9 + 64);
    }
    else
    {
      v50 = *((_QWORD *)a3 + 2);
      v11 = *(__int128 *)((char *)a3 + 24);
      v48 = *(__int128 *)((char *)a3 + 40);
      v49 = *a3;
      v12 = *((_DWORD *)a3 + 14);
      v13 = v9 + 64;
      v14 = v5 - 64;
      v15 = a1[1];
      if (v5 >= 0x40)
      {
        do
        {
          v16 = *(_OWORD *)v14;
          *((_QWORD *)v15 + 2) = *(_QWORD *)(v14 + 16);
          *(_OWORD *)v15 = v16;
          *((_QWORD *)v15 + 3) = *(_QWORD *)(v14 + 24);
          *((_QWORD *)v15 + 4) = *(_QWORD *)(v14 + 32);
          *(_OWORD *)(v15 + 40) = *(_OWORD *)(v14 + 40);
          *((_DWORD *)v15 + 14) = *(_DWORD *)(v14 + 56);
          v15 += 64;
          v14 += 64;
        }
        while (v14 < v5);
      }
      a1[1] = v15;
      if (v5 != v13)
      {
        v17 = 0;
        v18 = (uint64_t)(v5 - v13) >> 6 << 6;
        v19 = &v6[64 * v8 + v18];
        v20 = -v18;
        do
        {
          v21 = v5 + v17;
          v22 = *(_OWORD *)&v19[v17 - 64];
          *(_DWORD *)(v21 - 48) = *(_DWORD *)&v19[v17 - 48];
          *(_OWORD *)(v21 - 64) = v22;
          *(_QWORD *)(v21 - 40) = *(_QWORD *)&v19[v17 - 40];
          *(_QWORD *)(v21 - 32) = *(_QWORD *)&v19[v17 - 32];
          *(_OWORD *)(v21 - 24) = *(_OWORD *)&v19[v17 - 24];
          *(_DWORD *)(v21 - 8) = *(_DWORD *)&v19[v17 - 8];
          v17 -= 64;
        }
        while (v20 != v17);
      }
      *(_OWORD *)v9 = v49;
      *(_DWORD *)(v9 + 16) = v50;
      v23 = &v6[64 * v8];
      *(_OWORD *)(v23 + 24) = v11;
      *(_OWORD *)(v23 + 40) = v48;
      *((_DWORD *)v23 + 14) = v12;
    }
    return v9;
  }
  v24 = ((uint64_t)(v5 - (_QWORD)v6) >> 6) + 1;
  if (v24 >> 58)
    sub_20E867F44();
  v26 = v10 - (_QWORD)v6;
  if (v26 >> 5 > v24)
    v24 = v26 >> 5;
  if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFC0)
    v27 = 0x3FFFFFFFFFFFFFFLL;
  else
    v27 = v24;
  if (v27)
  {
    if (v27 >> 58)
      sub_20E877A38();
    v28 = (char *)operator new(v27 << 6);
    v29 = &v28[64 * v8];
    v30 = &v28[64 * v27];
    if (v8 != v27)
      goto LABEL_31;
    goto LABEL_21;
  }
  v28 = 0;
  v29 = (char *)(v8 << 6);
  v30 = 0;
  if (!v8)
  {
LABEL_21:
    if (v7 < 1)
    {
      if (v6 == a2)
        v34 = 1;
      else
        v34 = v7 >> 5;
      if (v34 >> 58)
        sub_20E877A38();
      v35 = (char *)operator new(v34 << 6);
      v29 = &v35[64 * (v34 >> 2)];
      v30 = &v35[64 * v34];
      if (v28)
      {
        v36 = &v35[64 * v34];
        operator delete(v28);
        v30 = v36;
      }
    }
    else
    {
      v33 = v8 + 2;
      if (v8 >= -1)
        v33 = v8 + 1;
      v29 -= 64 * (v33 >> 1);
    }
  }
LABEL_31:
  *(_OWORD *)v29 = *a3;
  v37 = *((_QWORD *)a3 + 3);
  *((_QWORD *)v29 + 2) = *((_QWORD *)a3 + 2);
  *((_QWORD *)v29 + 3) = v37;
  *((_QWORD *)v29 + 4) = *((_QWORD *)a3 + 4);
  *(_OWORD *)(v29 + 40) = *(__int128 *)((char *)a3 + 40);
  *((_DWORD *)v29 + 14) = *((_DWORD *)a3 + 14);
  v38 = v29 + 64;
  v39 = *a1;
  v40 = v29;
  if (*a1 != (char *)v9)
  {
    v41 = 0;
    do
    {
      v42 = &v29[v41];
      v43 = *(_OWORD *)(v9 + v41 - 64);
      *((_QWORD *)v42 - 6) = *(_QWORD *)(v9 + v41 - 48);
      *((_OWORD *)v42 - 4) = v43;
      *((_QWORD *)v42 - 5) = *(_QWORD *)(v9 + v41 - 40);
      *((_QWORD *)v42 - 4) = *(_QWORD *)(v9 + v41 - 32);
      *(_OWORD *)(v42 - 24) = *(_OWORD *)(v9 + v41 - 24);
      *((_DWORD *)v42 - 2) = *(_DWORD *)(v9 + v41 - 8);
      v41 -= 64;
    }
    while ((char *)(v9 + v41) != v39);
    v40 = &v29[v41];
  }
  for (i = a1[1]; (char *)v9 != i; v9 += 64)
  {
    v45 = *(_OWORD *)v9;
    *((_QWORD *)v38 + 2) = *(_QWORD *)(v9 + 16);
    *(_OWORD *)v38 = v45;
    *((_QWORD *)v38 + 3) = *(_QWORD *)(v9 + 24);
    *((_QWORD *)v38 + 4) = *(_QWORD *)(v9 + 32);
    *(_OWORD *)(v38 + 40) = *(_OWORD *)(v9 + 40);
    *((_DWORD *)v38 + 14) = *(_DWORD *)(v9 + 56);
    v38 += 64;
  }
  v46 = *a1;
  *a1 = v40;
  a1[1] = v38;
  a1[2] = v30;
  if (v46)
    operator delete(v46);
  return (unint64_t)v29;
}

void sub_20FBCCC74(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_20FBCCC8C()
{
  JUMPOUT(0x212BC6398);
}

BOOL sub_20FBCCCA0(std::mutex *a1, uint64_t a2)
{
  _BOOL8 result;
  void *v4;
  std::__shared_weak_count *v5;

  result = sub_20FBCCF2C(a1, a2);
  if (a2 && !result)
  {
    if (*(_BYTE *)(a2 + 112))
      *(_BYTE *)(a2 + 112) = 0;
    v4 = *(void **)(a2 + 120);
    *(_QWORD *)(a2 + 128) = v4;
    *(_DWORD *)(a2 + 144) = 0;
    if (v4)
      operator delete(v4);
    v5 = *(std::__shared_weak_count **)(a2 + 8);
    if (v5)
      std::__shared_weak_count::__release_weak(v5);
    JUMPOUT(0x212BC6398);
  }
  return result;
}

void sub_20FBCCD14(std::__shared_weak_count *this)
{
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v4;

  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA04918;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (!shared_weak_owners)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&shared_weak_owners->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
    std::__shared_weak_count::__release_weak(shared_weak_owners);
    std::__shared_weak_count::~__shared_weak_count(this);
  }
  else
  {
LABEL_5:
    std::__shared_weak_count::~__shared_weak_count(this);
  }
}

void sub_20FBCCD88(std::__shared_weak_count *this)
{
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v4;

  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA04918;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    p_shared_owners = (unint64_t *)&shared_weak_owners->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
      std::__shared_weak_count::__release_weak(shared_weak_owners);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(this);
  JUMPOUT(0x212BC6398);
}

void sub_20FBCCE00(uint64_t a1)
{
  uint64_t v2;
  BOOL v3;
  char v4;
  void *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = sub_20FBCCF2C(*(std::mutex **)(a1 + 32), v2);
  if (v2)
    v4 = v3;
  else
    v4 = 1;
  if ((v4 & 1) == 0)
  {
    if (*(_BYTE *)(v2 + 112))
      *(_BYTE *)(v2 + 112) = 0;
    v5 = *(void **)(v2 + 120);
    *(_QWORD *)(v2 + 128) = v5;
    *(_DWORD *)(v2 + 144) = 0;
    if (v5)
      operator delete(v5);
    v6 = *(std::__shared_weak_count **)(v2 + 8);
    if (v6)
      std::__shared_weak_count::__release_weak(v6);
    MEMORY[0x212BC6398](v2, 0x10A2C405D2BE22CLL);
  }
  v7 = *(std::__shared_weak_count **)(a1 + 40);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

uint64_t sub_20FBCCEBC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3kit6memory10ObjectPoolIN3cva5TrackINS_3vio13VIOPoint2DNSPENS5_17VIOPoint3DWithCovIdEELb1EEEN"
                     "S1_18AutoReturningMakeTIS9_NS1_21PoolObjectInitializerIS9_EENS1_23PoolObjectDeinitializerIS9_EEEENS"
                     "t3__110shared_ptrIS9_EENS1_19ObjectBorrowingPoolINSG_10unique_ptrIS9_NSG_14default_deleteIS9_EEEESF"
                     "_EEE13ObjectDeleterE")
    return a1 + 32;
  if (((v3 & (unint64_t)"N4cv3d3kit6memory10ObjectPoolIN3cva5TrackINS_3vio13VIOPoint2DNSPENS5_17VIOPoint3DWithCov"
                                "IdEELb1EEENS1_18AutoReturningMakeTIS9_NS1_21PoolObjectInitializerIS9_EENS1_23PoolObjectD"
                                "einitializerIS9_EEEENSt3__110shared_ptrIS9_EENS1_19ObjectBorrowingPoolINSG_10unique_ptrI"
                                "S9_NSG_14default_deleteIS9_EEEESF_EEE13ObjectDeleterE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3kit6memory10ObjectPoolIN3cva5TrackINS_3vio13VIOPoint2DNSPENS5_17VIOPoint3DWithCovIdEELb1EEENS1_18AutoReturningMakeTIS9_NS1_21PoolObjectInitializerIS9_EENS1_23PoolObjectDeinitializerIS9_EEEENSt3__110shared_ptrIS9_EENS1_19ObjectBorrowingPoolINSG_10unique_ptrIS9_NSG_14default_deleteIS9_EEEESF_EEE13ObjectDeleterE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit6memory10ObjectPoolIN3cva5TrackINS_3vio13VIOPoint2DNSPENS5_17VIOPoint3DWithCovIdEELb1EEENS1_18AutoReturningMakeTIS9_NS1_21PoolObjectInitializerIS9_EENS1_23PoolObjectDeinitializerIS9_EEEENSt3__110shared_ptrIS9_EENS1_19ObjectBorrowingPoolINSG_10unique_ptrIS9_NSG_14default_deleteIS9_EEEESF_EEE13ObjectDeleterE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 32;
  return 0;
}

BOOL sub_20FBCCF2C(std::mutex *a1, uint64_t a2)
{
  _QWORD *sig;
  unint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  std::__shared_weak_count *v31;

  std::mutex::lock(a1);
  sig = (_QWORD *)a1[1].__m_.__sig;
  if (sig)
  {
    v6 = (char *)sig[2];
    v5 = sig[3];
    if ((unint64_t)v6 >= v5)
    {
      v7 = (char *)sig[1];
      v8 = (v6 - v7) >> 3;
      v9 = v8 + 1;
      if ((unint64_t)(v8 + 1) >> 61)
        sub_20E867F44();
      v10 = v5 - (_QWORD)v7;
      if (v10 >> 2 > v9)
        v9 = v10 >> 2;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
        v11 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v11 = v9;
      if (v11)
      {
        if (v11 >> 61)
          sub_20E877A38();
        v12 = (char *)operator new(8 * v11);
      }
      else
      {
        v12 = 0;
      }
      v13 = &v12[8 * v8];
      v14 = &v12[8 * v11];
      *(_QWORD *)v13 = a2;
      v15 = v13 + 8;
      if (v6 == v7)
      {
        sig[1] = v13;
        sig[2] = v15;
        sig[3] = v14;
      }
      else
      {
        v16 = v6 - v7 - 8;
        if (v16 < 0x78)
          goto LABEL_44;
        if (&v6[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v13 && &v12[v6 - v7 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v6)
          goto LABEL_44;
        v18 = (v16 >> 3) + 1;
        v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
        v13 -= v19;
        v20 = &v6[-v19];
        v21 = v6 - 16;
        v22 = &v12[8 * v8 - 16];
        v23 = v18 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v25 = *((_OWORD *)v21 - 1);
          v24 = *(_OWORD *)v21;
          *((_OWORD *)v21 - 1) = 0uLL;
          *(_OWORD *)v21 = 0uLL;
          *((_OWORD *)v22 - 1) = v25;
          *(_OWORD *)v22 = v24;
          v21 -= 32;
          v22 -= 32;
          v23 -= 4;
        }
        while (v23);
        v6 = v20;
        if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_44:
          do
          {
            v26 = *((_QWORD *)v6 - 1);
            v6 -= 8;
            *(_QWORD *)v6 = 0;
            *((_QWORD *)v13 - 1) = v26;
            v13 -= 8;
          }
          while (v6 != v7);
        }
        v6 = (char *)sig[1];
        v27 = (char *)sig[2];
        sig[1] = v13;
        sig[2] = v15;
        sig[3] = v14;
        while (v27 != v6)
        {
          v29 = *((_QWORD *)v27 - 1);
          v27 -= 8;
          v28 = v29;
          *(_QWORD *)v27 = 0;
          if (v29)
          {
            if (*(_BYTE *)(v28 + 112))
              *(_BYTE *)(v28 + 112) = 0;
            v30 = *(void **)(v28 + 120);
            *(_QWORD *)(v28 + 128) = v30;
            *(_DWORD *)(v28 + 144) = 0;
            if (v30)
              operator delete(v30);
            v31 = *(std::__shared_weak_count **)(v28 + 8);
            if (v31)
              std::__shared_weak_count::__release_weak(v31);
            MEMORY[0x212BC6398](v28, 0x10A2C405D2BE22CLL);
          }
        }
      }
      if (v6)
        operator delete(v6);
      sig[2] = v15;
    }
    else
    {
      *(_QWORD *)v6 = a2;
      sig[2] = v6 + 8;
    }
  }
  std::mutex::unlock(a1);
  return sig != 0;
}

void sub_20FBCD190(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::mutex *v2;
  va_list va;

  va_start(va, a2);
  sub_20FB447E0((uint64_t *)va);
  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

void sub_20FBCD1B0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FBCD1D4(uint64_t result)
{
  uint64_t v1;
  void *v2;
  std::__shared_weak_count *v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    if (*(_BYTE *)(v1 + 112))
      *(_BYTE *)(v1 + 112) = 0;
    v2 = *(void **)(v1 + 120);
    *(_QWORD *)(v1 + 128) = v2;
    *(_DWORD *)(v1 + 144) = 0;
    if (v2)
      operator delete(v2);
    v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
    JUMPOUT(0x212BC6398);
  }
  return result;
}

uint64_t sub_20FBCD240(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN3cva5TrackIN4cv3d3vio13VIOPoint2DNSPENS4_17VIOPoint3DWithCovIdEELb1EEEE27__sha"
                     "red_ptr_default_deleteIS8_S8_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN3cva5TrackIN4cv3d3vio13VIOPoint2DNSPENS4_17VIOPoint3DWithCovIdEELb1"
                                "EEEE27__shared_ptr_default_deleteIS8_S8_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN3cva5TrackIN4cv3d3vio13VIOPoint2DNSPENS4_17VIOPoint3DWithCovIdEELb1EEEE27__shared_ptr_default_deleteIS8_S8_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN3cva5TrackIN4cv3d3vio13VIOPoint2DNSPENS4_17VIOPoint3DWithCovIdEELb1EEEE27__shared_ptr_default_deleteIS8_S8_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20FBCD2B0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  char *v15;
  float v16;
  float v17;
  uint64_t v18;
  _QWORD *v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  int8x8_t v24;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  unint64_t v28;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2)
                return 0;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = (uint64_t *)*v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return 0;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v14 = (_QWORD *)(a1 + 16);
  v15 = (char *)operator new(0x30uLL);
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v6;
  *((_DWORD *)v15 + 4) = *(_DWORD *)a3;
  *(_OWORD *)(v15 + 24) = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *((_DWORD *)v15 + 10) = *(_DWORD *)(a3 + 24);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v7 && (float)(v17 * (float)v7) >= v16)
  {
    v18 = *(_QWORD *)a1;
    v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v19)
    {
LABEL_26:
      *(_QWORD *)v15 = *v19;
LABEL_61:
      *v19 = v15;
      goto LABEL_62;
    }
  }
  else
  {
    v20 = 1;
    if (v7 >= 3)
      v20 = (v7 & (v7 - 1)) != 0;
    v21 = v20 | (2 * v7);
    v22 = vcvtps_u32_f32(v16 / v17);
    if (v21 <= v22)
      prime = v22;
    else
      prime = v21;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v24 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v24)
      goto LABEL_37;
    if (prime < *(_QWORD *)&v24)
    {
      v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v24 < 3uLL || (v26 = (uint8x8_t)vcnt_s8(v24), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        v25 = std::__next_prime(v25);
      }
      else
      {
        v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2)
          v25 = v27;
      }
      if (prime <= v25)
        prime = v25;
      if (prime < *(_QWORD *)&v24)
LABEL_37:
        sub_20E8D2B3C(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
      {
        v3 = v6 % v7;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
        if (v19)
          goto LABEL_26;
      }
      else
      {
        v3 = v6;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
        if (v19)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
      v18 = *(_QWORD *)a1;
      v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
      if (v19)
        goto LABEL_26;
    }
  }
  *(_QWORD *)v15 = *v14;
  *v14 = v15;
  *(_QWORD *)(v18 + 8 * v3) = v14;
  if (*(_QWORD *)v15)
  {
    v28 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v28 >= v7)
        v28 %= v7;
    }
    else
    {
      v28 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return 1;
}

void sub_20FBCD5D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EC3E960((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FBCD5EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unsigned int v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  uint8x8_t v21;
  void **v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  float v28;
  float v29;
  uint64_t v30;
  _QWORD *v31;
  _BOOL8 v32;
  unint64_t v33;
  unint64_t v34;
  size_t prime;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int8x8_t v41;
  unint64_t v42;
  uint8x8_t v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  std::__shared_weak_count *v49;
  char *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unsigned int v53;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    if (!*(_QWORD *)(a1 + 8)
      || (v7 = *(_QWORD *)a1, (v8 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 8))) == 0))
    {
      sub_20EE6CA64();
    }
    v9 = v8;
    v48 = v8;
    v10 = *(_DWORD *)(a3 + 4);
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    v49 = v8;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    v13 = sub_20E9DF85C((_QWORD *)v4, (uint64_t *)a2);
    if (v13)
    {
      LODWORD(v50) = v10;
      v51 = v7;
      v52 = v9;
      v53 = v10;
      sub_20FBCD2B0((uint64_t)(v13 + 5), v10, (uint64_t)&v50);
      v14 = v52;
      if (!v52)
      {
LABEL_98:
        v46 = (unint64_t *)&v48->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
        return;
      }
      v15 = (unint64_t *)&v52->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
LABEL_96:
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
      goto LABEL_98;
    }
    v17 = *(_DWORD *)(a2 + 16);
    v18 = *(_DWORD *)(a2 + 8);
    v19 = v18 ^ __ROR4__(v17, 13);
    v20 = *(_QWORD *)(v4 + 8);
    if (v20)
    {
      v21 = (uint8x8_t)vcnt_s8((int8x8_t)v20);
      v21.i16[0] = vaddlv_u8(v21);
      if (v21.u32[0] > 1uLL)
      {
        v3 = v19;
        if (v20 <= v19)
          v3 = v19 % v20;
      }
      else
      {
        v3 = ((_DWORD)v20 - 1) & v19;
      }
      v22 = *(void ***)(*(_QWORD *)v4 + 8 * v3);
      if (v22)
      {
        v23 = (char *)*v22;
        if (*v22)
        {
          v24 = *(_QWORD *)a2;
          if (v21.u32[0] < 2uLL)
          {
            while (1)
            {
              v26 = *((_QWORD *)v23 + 1);
              if (v26 == v19)
              {
                if (*((_DWORD *)v23 + 8) == v17 && *((_QWORD *)v23 + 2) == v24 && *((_DWORD *)v23 + 6) == v18)
                  goto LABEL_77;
              }
              else if ((v26 & (v20 - 1)) != v3)
              {
                goto LABEL_37;
              }
              v23 = *(char **)v23;
              if (!v23)
                goto LABEL_37;
            }
          }
          do
          {
            v25 = *((_QWORD *)v23 + 1);
            if (v25 == v19)
            {
              if (*((_DWORD *)v23 + 8) == v17 && *((_QWORD *)v23 + 2) == v24 && *((_DWORD *)v23 + 6) == v18)
                goto LABEL_77;
            }
            else
            {
              if (v25 >= v20)
                v25 %= v20;
              if (v25 != v3)
                break;
            }
            v23 = *(char **)v23;
          }
          while (v23);
        }
      }
    }
LABEL_37:
    v23 = (char *)operator new(0x50uLL);
    v27 = (_QWORD *)(v4 + 16);
    v50 = v23;
    v51 = v4 + 16;
    *(_QWORD *)v23 = 0;
    *((_QWORD *)v23 + 1) = v19;
    *((_OWORD *)v23 + 1) = *(_OWORD *)a2;
    *((_QWORD *)v23 + 4) = *(_QWORD *)(a2 + 16);
    *(_OWORD *)(v23 + 40) = 0u;
    *(_OWORD *)(v23 + 56) = 0u;
    *((_DWORD *)v23 + 18) = 1065353216;
    LOBYTE(v52) = 1;
    v28 = (float)(unint64_t)(*(_QWORD *)(v4 + 24) + 1);
    v29 = *(float *)(v4 + 32);
    if (v20 && (float)(v29 * (float)v20) >= v28)
    {
      v30 = *(_QWORD *)v4;
      v31 = *(_QWORD **)(*(_QWORD *)v4 + 8 * v3);
      if (v31)
      {
LABEL_40:
        *(_QWORD *)v23 = *v31;
        goto LABEL_75;
      }
    }
    else
    {
      v32 = 1;
      if (v20 >= 3)
        v32 = (v20 & (v20 - 1)) != 0;
      v33 = v32 | (2 * v20);
      v34 = vcvtps_u32_f32(v28 / v29);
      if (v33 <= v34)
        prime = v34;
      else
        prime = v33;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
        v20 = *(_QWORD *)(v4 + 8);
      }
      if (prime > v20)
        goto LABEL_51;
      if (prime < v20)
      {
        v36 = vcvtps_u32_f32((float)*(unint64_t *)(v4 + 24) / *(float *)(v4 + 32));
        if (v20 < 3 || (v37 = (uint8x8_t)vcnt_s8((int8x8_t)v20), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
        {
          v36 = std::__next_prime(v36);
        }
        else
        {
          v38 = 1 << -(char)__clz(v36 - 1);
          if (v36 >= 2)
            v36 = v38;
        }
        if (prime <= v36)
          prime = v36;
        if (prime < v20)
LABEL_51:
          sub_20E8D2B3C(v4, prime);
      }
      v20 = *(_QWORD *)(v4 + 8);
      if ((v20 & (v20 - 1)) != 0)
      {
        if (v20 <= v19)
          v3 = v19 % v20;
        else
          v3 = v19;
        v30 = *(_QWORD *)v4;
        v31 = *(_QWORD **)(*(_QWORD *)v4 + 8 * v3);
        if (v31)
          goto LABEL_40;
      }
      else
      {
        v3 = ((_DWORD)v20 - 1) & v19;
        v30 = *(_QWORD *)v4;
        v31 = *(_QWORD **)(*(_QWORD *)v4 + 8 * v3);
        if (v31)
          goto LABEL_40;
      }
    }
    *(_QWORD *)v23 = *v27;
    *v27 = v23;
    *(_QWORD *)(v30 + 8 * v3) = v27;
    if (!*(_QWORD *)v23)
      goto LABEL_76;
    v39 = *(_QWORD *)(*(_QWORD *)v23 + 8);
    if ((v20 & (v20 - 1)) != 0)
    {
      if (v39 >= v20)
        v39 %= v20;
    }
    else
    {
      v39 &= v20 - 1;
    }
    v31 = (_QWORD *)(*(_QWORD *)v4 + 8 * v39);
LABEL_75:
    *v31 = v23;
LABEL_76:
    ++*(_QWORD *)(v4 + 24);
LABEL_77:
    v40 = vcvtps_u32_f32((float)*(unint64_t *)(v4 + 40) / *((float *)v23 + 18));
    if (v40 == 1)
    {
      v40 = 2;
    }
    else if ((v40 & (v40 - 1)) != 0)
    {
      v40 = std::__next_prime(v40);
    }
    v41 = *(int8x8_t *)(v23 + 48);
    if (v40 > *(_QWORD *)&v41)
      goto LABEL_82;
    if (v40 < *(_QWORD *)&v41)
    {
      v42 = vcvtps_u32_f32((float)*((unint64_t *)v23 + 8) / *((float *)v23 + 18));
      if (*(_QWORD *)&v41 < 3uLL || (v43 = (uint8x8_t)vcnt_s8(v41), v43.i16[0] = vaddlv_u8(v43), v43.u32[0] > 1uLL))
      {
        v42 = std::__next_prime(v42);
      }
      else
      {
        v44 = 1 << -(char)__clz(v42 - 1);
        if (v42 >= 2)
          v42 = v44;
      }
      if (v40 <= v42)
        v40 = v42;
      if (v40 < *(_QWORD *)&v41)
      {
LABEL_82:
        sub_20E8D2B3C((uint64_t)(v23 + 40), v40);
        v9 = v49;
      }
    }
    LODWORD(v50) = v10;
    v51 = v7;
    v52 = v9;
    v53 = v10;
    sub_20FBCD2B0((uint64_t)(v23 + 40), v10, (uint64_t)&v50);
    v14 = v52;
    if (!v52)
      goto LABEL_98;
    v45 = (unint64_t *)&v52->__shared_owners_;
    do
      v16 = __ldaxr(v45);
    while (__stlxr(v16 - 1, v45));
    goto LABEL_96;
  }
}

void sub_20FBCDBB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  uint64_t v9;
  va_list va2;
  uint64_t v11;
  uint64_t v12;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v9 = va_arg(va3, _QWORD);
  v11 = va_arg(va3, _QWORD);
  v12 = va_arg(va3, _QWORD);
  sub_20EE6C9B0((uint64_t)va3);
  sub_20E86665C((uint64_t)va2);
  sub_20E86665C((uint64_t)va1);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FBCDBF8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t *v4;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unsigned int v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  uint8x8_t v21;
  void **v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  float v28;
  float v29;
  _BOOL8 v30;
  unint64_t v31;
  unint64_t v32;
  size_t prime;
  void *v34;
  void *v35;
  uint64_t v36;
  _QWORD *v37;
  size_t v38;
  size_t v39;
  size_t v40;
  _QWORD *i;
  size_t v42;
  uint64_t v43;
  unint64_t v44;
  uint8x8_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  size_t v49;
  uint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  unint64_t v53;
  int8x8_t v54;
  unint64_t v55;
  uint8x8_t v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t *v59;
  unint64_t v60;
  void *v61;
  std::__shared_weak_count *v62;
  std::__shared_weak_count *v63;
  char *v64;
  uint64_t *v65;
  std::__shared_weak_count *v66;
  unsigned int v67;

  v4 = (uint64_t *)a1[2];
  if (v4)
  {
    if (!a1[1]
      || (v7 = (uint64_t *)*a1, (v8 = std::__shared_weak_count::lock((std::__shared_weak_count *)a1[1])) == 0))
    {
      sub_20EE6CA64();
    }
    v9 = v8;
    v62 = v8;
    v10 = *(_DWORD *)(a3 + 4);
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    v63 = v8;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    v13 = sub_20E9DF85C(v4, (uint64_t *)a2);
    if (v13)
    {
      LODWORD(v64) = v10;
      v65 = v7;
      v66 = v9;
      v67 = v10;
      sub_20FBCE980((uint64_t)(v13 + 5), v10, (uint64_t)&v64);
      v14 = v66;
      if (!v66)
      {
LABEL_118:
        v59 = (unint64_t *)&v62->__shared_owners_;
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
        }
        return;
      }
      v15 = (unint64_t *)&v66->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
LABEL_116:
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
      goto LABEL_118;
    }
    v17 = *(_DWORD *)(a2 + 16);
    v18 = *(_DWORD *)(a2 + 8);
    v19 = v18 ^ __ROR4__(v17, 13);
    v20 = v4[1];
    if (v20)
    {
      v21 = (uint8x8_t)vcnt_s8((int8x8_t)v20);
      v21.i16[0] = vaddlv_u8(v21);
      if (v21.u32[0] > 1uLL)
      {
        v3 = v19;
        if (v20 <= v19)
          v3 = v19 % v20;
      }
      else
      {
        v3 = ((_DWORD)v20 - 1) & v19;
      }
      v22 = *(void ***)(*v4 + 8 * v3);
      if (v22)
      {
        v23 = (char *)*v22;
        if (*v22)
        {
          v24 = *(_QWORD *)a2;
          if (v21.u32[0] < 2uLL)
          {
            while (1)
            {
              v26 = *((_QWORD *)v23 + 1);
              if (v26 == v19)
              {
                if (*((_DWORD *)v23 + 8) == v17 && *((_QWORD *)v23 + 2) == v24 && *((_DWORD *)v23 + 6) == v18)
                  goto LABEL_97;
              }
              else if ((v26 & (v20 - 1)) != v3)
              {
                goto LABEL_37;
              }
              v23 = *(char **)v23;
              if (!v23)
                goto LABEL_37;
            }
          }
          do
          {
            v25 = *((_QWORD *)v23 + 1);
            if (v25 == v19)
            {
              if (*((_DWORD *)v23 + 8) == v17 && *((_QWORD *)v23 + 2) == v24 && *((_DWORD *)v23 + 6) == v18)
                goto LABEL_97;
            }
            else
            {
              if (v25 >= v20)
                v25 %= v20;
              if (v25 != v3)
                break;
            }
            v23 = *(char **)v23;
          }
          while (v23);
        }
      }
    }
LABEL_37:
    v23 = (char *)operator new(0x50uLL);
    v27 = v4 + 2;
    v64 = v23;
    v65 = v4 + 2;
    *(_QWORD *)v23 = 0;
    *((_QWORD *)v23 + 1) = v19;
    *((_OWORD *)v23 + 1) = *(_OWORD *)a2;
    *((_QWORD *)v23 + 4) = *(_QWORD *)(a2 + 16);
    *(_OWORD *)(v23 + 40) = 0u;
    *(_OWORD *)(v23 + 56) = 0u;
    *((_DWORD *)v23 + 18) = 1065353216;
    LOBYTE(v66) = 1;
    v28 = (float)(unint64_t)(v4[3] + 1);
    v29 = *((float *)v4 + 8);
    if (v20 && (float)(v29 * (float)v20) >= v28)
    {
      v19 = v3;
      goto LABEL_87;
    }
    v30 = 1;
    if (v20 >= 3)
      v30 = (v20 & (v20 - 1)) != 0;
    v31 = v30 | (2 * v20);
    v32 = vcvtps_u32_f32(v28 / v29);
    if (v31 <= v32)
      prime = v32;
    else
      prime = v31;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v20 = v4[1];
    }
    if (prime <= v20)
    {
      if (prime >= v20)
        goto LABEL_83;
      v44 = vcvtps_u32_f32((float)(unint64_t)v4[3] / *((float *)v4 + 8));
      if (v20 < 3 || (v45 = (uint8x8_t)vcnt_s8((int8x8_t)v20), v45.i16[0] = vaddlv_u8(v45), v45.u32[0] > 1uLL))
      {
        v44 = std::__next_prime(v44);
      }
      else
      {
        v46 = 1 << -(char)__clz(v44 - 1);
        if (v44 >= 2)
          v44 = v46;
      }
      if (prime <= v44)
        prime = v44;
      if (prime >= v20)
      {
        v20 = v4[1];
LABEL_83:
        if ((v20 & (v20 - 1)) != 0)
        {
          if (v20 <= v19)
            v19 %= v20;
        }
        else
        {
          v19 = ((_DWORD)v20 - 1) & v19;
        }
LABEL_87:
        v50 = *v4;
        v51 = *(_QWORD **)(*v4 + 8 * v19);
        if (v51)
        {
          *(_QWORD *)v23 = *v51;
        }
        else
        {
          *(_QWORD *)v23 = *v27;
          *v27 = v23;
          *(_QWORD *)(v50 + 8 * v19) = v27;
          if (!*(_QWORD *)v23)
            goto LABEL_96;
          v52 = *(_QWORD *)(*(_QWORD *)v23 + 8);
          if ((v20 & (v20 - 1)) != 0)
          {
            if (v52 >= v20)
              v52 %= v20;
          }
          else
          {
            v52 &= v20 - 1;
          }
          v51 = (_QWORD *)(*v4 + 8 * v52);
        }
        *v51 = v23;
LABEL_96:
        ++v4[3];
LABEL_97:
        v53 = vcvtps_u32_f32((float)(unint64_t)v4[5] / *((float *)v23 + 18));
        if (v53 == 1)
        {
          v53 = 2;
        }
        else if ((v53 & (v53 - 1)) != 0)
        {
          v53 = std::__next_prime(v53);
        }
        v54 = *(int8x8_t *)(v23 + 48);
        if (v53 > *(_QWORD *)&v54)
          goto LABEL_102;
        if (v53 < *(_QWORD *)&v54)
        {
          v55 = vcvtps_u32_f32((float)*((unint64_t *)v23 + 8) / *((float *)v23 + 18));
          if (*(_QWORD *)&v54 < 3uLL || (v56 = (uint8x8_t)vcnt_s8(v54), v56.i16[0] = vaddlv_u8(v56), v56.u32[0] > 1uLL))
          {
            v55 = std::__next_prime(v55);
          }
          else
          {
            v57 = 1 << -(char)__clz(v55 - 1);
            if (v55 >= 2)
              v55 = v57;
          }
          if (v53 <= v55)
            v53 = v55;
          if (v53 < *(_QWORD *)&v54)
          {
LABEL_102:
            sub_20E8D2B3C((uint64_t)(v23 + 40), v53);
            v9 = v63;
          }
        }
        LODWORD(v64) = v10;
        v65 = v7;
        v66 = v9;
        v67 = v10;
        sub_20FBCE980((uint64_t)(v23 + 40), v10, (uint64_t)&v64);
        v14 = v66;
        if (!v66)
          goto LABEL_118;
        v58 = (unint64_t *)&v66->__shared_owners_;
        do
          v16 = __ldaxr(v58);
        while (__stlxr(v16 - 1, v58));
        goto LABEL_116;
      }
      if (!prime)
      {
        v61 = (void *)*v4;
        *v4 = 0;
        if (v61)
          operator delete(v61);
        v20 = 0;
        v4[1] = 0;
        goto LABEL_83;
      }
    }
    if (prime >> 61)
      sub_20E877A38();
    v34 = operator new(8 * prime);
    v35 = (void *)*v4;
    *v4 = (uint64_t)v34;
    if (v35)
      operator delete(v35);
    v36 = 0;
    v4[1] = prime;
    do
      *(_QWORD *)(*v4 + 8 * v36++) = 0;
    while (prime != v36);
    v37 = (_QWORD *)*v27;
    if (!*v27)
    {
LABEL_82:
      v20 = prime;
      goto LABEL_83;
    }
    v38 = v37[1];
    v39 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v40 = v38 & v39;
      *(_QWORD *)(*v4 + 8 * v40) = v27;
      for (i = (_QWORD *)*v37; *v37; i = (_QWORD *)*v37)
      {
        v42 = i[1] & v39;
        if (v42 == v40)
        {
          v37 = i;
        }
        else if (*(_QWORD *)(*v4 + 8 * v42))
        {
          *v37 = *i;
          v43 = 8 * v42;
          *i = **(_QWORD **)(*v4 + v43);
          **(_QWORD **)(*v4 + v43) = i;
        }
        else
        {
          *(_QWORD *)(*v4 + 8 * v42) = v37;
          v37 = i;
          v40 = v42;
        }
      }
      goto LABEL_82;
    }
    if (v38 >= prime)
      v38 %= prime;
    *(_QWORD *)(*v4 + 8 * v38) = v27;
    v47 = (_QWORD *)*v37;
    if (!*v37)
      goto LABEL_82;
    while (1)
    {
      v49 = v47[1];
      if (v49 >= prime)
        v49 %= prime;
      if (v49 == v38)
        goto LABEL_76;
      if (*(_QWORD *)(*v4 + 8 * v49))
      {
        *v37 = *v47;
        v48 = 8 * v49;
        *v47 = **(_QWORD **)(*v4 + v48);
        **(_QWORD **)(*v4 + v48) = v47;
        v47 = v37;
LABEL_76:
        v37 = v47;
        v47 = (_QWORD *)*v47;
        if (!v47)
          goto LABEL_82;
      }
      else
      {
        *(_QWORD *)(*v4 + 8 * v49) = v37;
        v37 = v47;
        v47 = (_QWORD *)*v47;
        v38 = v49;
        if (!v47)
          goto LABEL_82;
      }
    }
  }
}

void sub_20FBCE33C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  uint64_t v9;
  va_list va2;
  uint64_t v11;
  uint64_t v12;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v9 = va_arg(va3, _QWORD);
  v11 = va_arg(va3, _QWORD);
  v12 = va_arg(va3, _QWORD);
  sub_20EE6C9B0((uint64_t)va3);
  sub_20E86665C((uint64_t)va2);
  sub_20E86665C((uint64_t)va1);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20FBCE384(uint64_t *a1, char *a2, __int128 *a3)
{
  unint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  char *v34;
  unint64_t v35;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  __int128 v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  int64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  __int128 v70;
  uint64_t i;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  void *v78;
  __int128 v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;

  v6 = (char *)*a1;
  v5 = a1[1];
  v7 = (uint64_t)&a2[-*a1];
  v8 = v7 / 168;
  v9 = *a1 + 168 * (v7 / 168);
  v10 = a1[2];
  if (v5 < v10)
  {
    v11 = a3 + 4;
    if (v9 == v5)
    {
      v42 = *a3;
      *(_QWORD *)(v9 + 16) = *((_QWORD *)a3 + 2);
      *(_OWORD *)v9 = v42;
      v43 = &v6[168 * v8];
      *((_QWORD *)v43 + 3) = *((_QWORD *)a3 + 3);
      v44 = a3[3];
      *((_OWORD *)v43 + 2) = a3[2];
      *((_OWORD *)v43 + 3) = v44;
      v46 = a3[6];
      v45 = a3[7];
      v47 = a3[5];
      *((_QWORD *)v43 + 16) = *((_QWORD *)a3 + 16);
      *((_OWORD *)v43 + 6) = v46;
      *((_OWORD *)v43 + 7) = v45;
      *((_OWORD *)v43 + 5) = v47;
      *((_OWORD *)v43 + 4) = *v11;
      v48 = *(__int128 *)((char *)a3 + 136);
      *((_QWORD *)v43 + 19) = *((_QWORD *)a3 + 19);
      *(_OWORD *)(v43 + 136) = v48;
      *((_QWORD *)v43 + 20) = *((_QWORD *)a3 + 20);
      a1[1] = v9 + 168;
    }
    else
    {
      v12 = *((_QWORD *)a3 + 3);
      v85 = *((_QWORD *)a3 + 2);
      v82 = a3[2];
      v83 = a3[3];
      v84 = *a3;
      v88 = a3[6];
      v89 = a3[7];
      v90 = *((_QWORD *)a3 + 16);
      v86 = *v11;
      v87 = a3[5];
      v81 = *((_QWORD *)a3 + 19);
      v80 = *(__int128 *)((char *)a3 + 136);
      v13 = v9 + 168;
      v14 = v5 - 168;
      v15 = *((_QWORD *)a3 + 20);
      v16 = a1[1];
      if (v5 >= 0xA8)
      {
        do
        {
          v17 = *(_OWORD *)v14;
          *(_QWORD *)(v16 + 16) = *(_QWORD *)(v14 + 16);
          *(_OWORD *)v16 = v17;
          *(_QWORD *)(v16 + 24) = *(_QWORD *)(v14 + 24);
          v18 = *(_OWORD *)(v14 + 48);
          *(_OWORD *)(v16 + 32) = *(_OWORD *)(v14 + 32);
          *(_OWORD *)(v16 + 48) = v18;
          v20 = *(_OWORD *)(v14 + 96);
          v19 = *(_OWORD *)(v14 + 112);
          v21 = *(_OWORD *)(v14 + 80);
          *(_QWORD *)(v16 + 128) = *(_QWORD *)(v14 + 128);
          *(_OWORD *)(v16 + 96) = v20;
          *(_OWORD *)(v16 + 112) = v19;
          *(_OWORD *)(v16 + 80) = v21;
          *(_OWORD *)(v16 + 64) = *(_OWORD *)(v14 + 64);
          v22 = *(_OWORD *)(v14 + 136);
          *(_QWORD *)(v16 + 152) = *(_QWORD *)(v14 + 152);
          *(_OWORD *)(v16 + 136) = v22;
          *(_QWORD *)(v16 + 160) = *(_QWORD *)(v14 + 160);
          v16 += 168;
          v14 += 168;
        }
        while (v14 < v5);
      }
      a1[1] = v16;
      if (v5 != v13)
      {
        v23 = 0;
        v24 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v5 - v13) >> 3);
        v25 = -8 * ((uint64_t)(v5 - v13) >> 3);
        v26 = &v6[168 * v8 + 168 * v24];
        do
        {
          v27 = v5 + v23;
          v28 = *(_OWORD *)&v26[v23 - 168];
          *(_DWORD *)(v27 - 152) = *(_DWORD *)&v26[v23 - 152];
          *(_OWORD *)(v27 - 168) = v28;
          *(_QWORD *)(v27 - 144) = *(_QWORD *)&v26[v23 - 144];
          v29 = *(_OWORD *)&v26[v23 - 136];
          *(_OWORD *)(v27 - 120) = *(_OWORD *)&v26[v23 - 120];
          *(_OWORD *)(v27 - 136) = v29;
          v30 = *(_OWORD *)&v26[v23 - 72];
          v31 = *(_OWORD *)&v26[v23 - 56];
          v32 = *(_QWORD *)&v26[v23 - 40];
          *(_OWORD *)(v27 - 88) = *(_OWORD *)&v26[v23 - 88];
          *(_QWORD *)(v27 - 40) = v32;
          *(_OWORD *)(v27 - 56) = v31;
          *(_OWORD *)(v27 - 72) = v30;
          *(_OWORD *)(v27 - 104) = *(_OWORD *)&v26[v23 - 104];
          v33 = *(_OWORD *)&v26[v23 - 32];
          *(_QWORD *)(v27 - 16) = *(_QWORD *)&v26[v23 - 16];
          *(_OWORD *)(v27 - 32) = v33;
          *(_QWORD *)(v27 - 8) = *(_QWORD *)&v26[v23 - 8];
          v23 -= 168;
        }
        while (v25 != v23);
      }
      *(_OWORD *)v9 = v84;
      *(_DWORD *)(v9 + 16) = v85;
      v34 = &v6[168 * v8];
      *((_QWORD *)v34 + 3) = v12;
      *((_OWORD *)v34 + 2) = v82;
      *((_OWORD *)v34 + 3) = v83;
      *((_OWORD *)v34 + 6) = v88;
      *((_OWORD *)v34 + 7) = v89;
      *((_QWORD *)v34 + 16) = v90;
      *((_OWORD *)v34 + 4) = v86;
      *((_OWORD *)v34 + 5) = v87;
      *((_QWORD *)v34 + 19) = v81;
      *(_OWORD *)(v34 + 136) = v80;
      *((_QWORD *)v34 + 20) = v15;
    }
    return v9;
  }
  v35 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v5 - (_QWORD)v6) >> 3) + 1;
  if (v35 > 0x186186186186186)
    sub_20E867F44();
  v37 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v10 - (_QWORD)v6) >> 3);
  if (2 * v37 > v35)
    v35 = 2 * v37;
  if (v37 >= 0xC30C30C30C30C3)
    v38 = 0x186186186186186;
  else
    v38 = v35;
  if (v38)
  {
    if (v38 > 0x186186186186186)
      sub_20E877A38();
    v39 = (char *)operator new(168 * v38);
    v40 = (uint64_t)&v39[168 * v8];
    v41 = &v39[168 * v38];
    if (v8 != v38)
      goto LABEL_32;
    goto LABEL_21;
  }
  v39 = 0;
  v40 = 168 * v8;
  v41 = 0;
  if (!v8)
  {
LABEL_21:
    if (v7 < 1)
    {
      if (v6 == a2)
        v51 = 1;
      else
        v51 = 2 * v8;
      if (v51 > 0x186186186186186)
        sub_20E877A38();
      v52 = (char *)operator new(168 * v51);
      v40 = (uint64_t)&v52[168 * (v51 >> 2)];
      v41 = &v52[168 * v51];
      if (v39)
      {
        v53 = &v52[168 * v51];
        operator delete(v39);
        v41 = v53;
      }
    }
    else
    {
      v49 = 0xCF3CF3CF3CF3CF3DLL * ((v40 - (uint64_t)v39) >> 3);
      if (v49 >= -1)
        v50 = v49 + 1;
      else
        v50 = v49 + 2;
      v40 -= 168 * (v50 >> 1);
    }
  }
LABEL_32:
  v54 = *a3;
  *(_QWORD *)(v40 + 16) = *((_QWORD *)a3 + 2);
  *(_OWORD *)v40 = v54;
  *(_QWORD *)(v40 + 24) = *((_QWORD *)a3 + 3);
  v55 = a3[3];
  *(_OWORD *)(v40 + 32) = a3[2];
  *(_OWORD *)(v40 + 48) = v55;
  v57 = a3[6];
  v56 = a3[7];
  v58 = a3[5];
  *(_QWORD *)(v40 + 128) = *((_QWORD *)a3 + 16);
  *(_OWORD *)(v40 + 96) = v57;
  *(_OWORD *)(v40 + 112) = v56;
  *(_OWORD *)(v40 + 80) = v58;
  *(_OWORD *)(v40 + 64) = a3[4];
  v59 = *(__int128 *)((char *)a3 + 136);
  *(_QWORD *)(v40 + 152) = *((_QWORD *)a3 + 19);
  *(_OWORD *)(v40 + 136) = v59;
  *(_QWORD *)(v40 + 160) = *((_QWORD *)a3 + 20);
  v60 = v40 + 168;
  v61 = (char *)*a1;
  v62 = v40;
  if (*a1 != v9)
  {
    v63 = 0;
    do
    {
      v64 = v40 + v63;
      v65 = *(_OWORD *)(v9 + v63 - 168);
      *(_QWORD *)(v64 - 152) = *(_QWORD *)(v9 + v63 - 152);
      *(_OWORD *)(v64 - 168) = v65;
      *(_QWORD *)(v64 - 144) = *(_QWORD *)(v9 + v63 - 144);
      v66 = *(_OWORD *)(v9 + v63 - 136);
      *(_OWORD *)(v64 - 120) = *(_OWORD *)(v9 + v63 - 120);
      *(_OWORD *)(v64 - 136) = v66;
      v67 = *(_OWORD *)(v9 + v63 - 72);
      v68 = *(_OWORD *)(v9 + v63 - 56);
      v69 = *(_QWORD *)(v9 + v63 - 40);
      *(_OWORD *)(v64 - 88) = *(_OWORD *)(v9 + v63 - 88);
      *(_QWORD *)(v64 - 40) = v69;
      *(_OWORD *)(v64 - 56) = v68;
      *(_OWORD *)(v64 - 72) = v67;
      *(_OWORD *)(v64 - 104) = *(_OWORD *)(v9 + v63 - 104);
      v70 = *(_OWORD *)(v9 + v63 - 32);
      *(_QWORD *)(v64 - 16) = *(_QWORD *)(v9 + v63 - 16);
      *(_OWORD *)(v64 - 32) = v70;
      *(_QWORD *)(v64 - 8) = *(_QWORD *)(v9 + v63 - 8);
      v63 -= 168;
    }
    while ((char *)(v9 + v63) != v61);
    v62 = v40 + v63;
  }
  for (i = a1[1]; v9 != i; v9 += 168)
  {
    v72 = *(_OWORD *)v9;
    *(_QWORD *)(v60 + 16) = *(_QWORD *)(v9 + 16);
    *(_OWORD *)v60 = v72;
    *(_QWORD *)(v60 + 24) = *(_QWORD *)(v9 + 24);
    v73 = *(_OWORD *)(v9 + 48);
    *(_OWORD *)(v60 + 32) = *(_OWORD *)(v9 + 32);
    *(_OWORD *)(v60 + 48) = v73;
    v75 = *(_OWORD *)(v9 + 96);
    v74 = *(_OWORD *)(v9 + 112);
    v76 = *(_OWORD *)(v9 + 80);
    *(_QWORD *)(v60 + 128) = *(_QWORD *)(v9 + 128);
    *(_OWORD *)(v60 + 96) = v75;
    *(_OWORD *)(v60 + 112) = v74;
    *(_OWORD *)(v60 + 80) = v76;
    *(_OWORD *)(v60 + 64) = *(_OWORD *)(v9 + 64);
    v77 = *(_OWORD *)(v9 + 136);
    *(_QWORD *)(v60 + 152) = *(_QWORD *)(v9 + 152);
    *(_OWORD *)(v60 + 136) = v77;
    *(_QWORD *)(v60 + 160) = *(_QWORD *)(v9 + 160);
    v60 += 168;
  }
  v78 = (void *)*a1;
  *a1 = v62;
  a1[1] = v60;
  a1[2] = (uint64_t)v41;
  if (v78)
    operator delete(v78);
  return v40;
}

void sub_20FBCE968(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_20FBCE980(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  int8x8_t v21;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2)
                return;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (uint64_t *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = (_QWORD *)(a1 + 16);
  v14 = (char *)operator new(0x30uLL);
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v6;
  *((_DWORD *)v14 + 4) = *(_DWORD *)a3;
  *(_OWORD *)(v14 + 24) = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *((_DWORD *)v14 + 10) = *(_DWORD *)(a3 + 24);
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
    goto LABEL_50;
  v17 = 1;
  if (v7 >= 3)
    v17 = (v7 & (v7 - 1)) != 0;
  v18 = v17 | (2 * v7);
  v19 = vcvtps_u32_f32(v15 / v16);
  if (v18 <= v19)
    prime = v19;
  else
    prime = v18;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
  }
  v21 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v21)
    goto LABEL_34;
  if (prime < *(_QWORD *)&v21)
  {
    v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v21 < 3uLL || (v23 = (uint8x8_t)vcnt_s8(v21), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
    {
      v22 = std::__next_prime(v22);
    }
    else
    {
      v24 = 1 << -(char)__clz(v22 - 1);
      if (v22 >= 2)
        v22 = v24;
    }
    if (prime <= v22)
      prime = v22;
    if (prime < *(_QWORD *)&v21)
LABEL_34:
      sub_20E8D2B3C(a1, prime);
  }
  v7 = *(_QWORD *)(a1 + 8);
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6)
    {
      v3 = v6 % v7;
      v25 = *(_QWORD *)a1;
      v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
      if (!v26)
        goto LABEL_53;
LABEL_51:
      *(_QWORD *)v14 = *v26;
LABEL_59:
      *v26 = v14;
      goto LABEL_60;
    }
    v3 = v6;
LABEL_50:
    v25 = *(_QWORD *)a1;
    v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (!v26)
      goto LABEL_53;
    goto LABEL_51;
  }
  v3 = ((_DWORD)v7 - 1) & v6;
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v26)
    goto LABEL_51;
LABEL_53:
  *(_QWORD *)v14 = *v13;
  *v13 = v14;
  *(_QWORD *)(v25 + 8 * v3) = v13;
  if (*(_QWORD *)v14)
  {
    v27 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v27 >= v7)
        v27 %= v7;
    }
    else
    {
      v27 &= v7 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
}

void sub_20FBCEC88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EC3E960((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FBCEC9C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA049B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20FBCECAC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA049B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20FBCECDC(uint64_t a1)
{
  void *v2;
  std::__shared_weak_count *v3;

  if (*(_BYTE *)(a1 + 304))
    *(_BYTE *)(a1 + 304) = 0;
  v2 = *(void **)(a1 + 312);
  *(_QWORD *)(a1 + 320) = v2;
  *(_DWORD *)(a1 + 336) = 0;
  if (v2)
    operator delete(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20FBCED34()
{
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FBCED48(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4, uint64_t a5, double a6)
{
  __int128 v20;
  __int128 v21;

  _Q1 = *a2;
  _D3 = *((_QWORD *)a2 + 1);
  __asm { FMLA            D2, D3, V1.D[1] }
  *(_QWORD *)&_Q1 = *((_QWORD *)a2 + 3);
  __asm { FMLA            D2, D1, V0.D[1] }
  if (sqrt(_D2) < 0.000001
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/VIOAnchoredPlane3D.hpp", 38, (uint64_t)"(vio::math::L2Norm4(anchor_plane_in.data()) >= 1e-6)", 52, (uint64_t)"anchor plane should not be all zeros", 36, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v20 = a2[1];
  *(_OWORD *)(a1 + 80) = *a2;
  *(_OWORD *)(a1 + 96) = v20;
  v21 = *a3;
  *(_QWORD *)(a1 + 128) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(a1 + 112) = v21;
  if (*(_BYTE *)(a1 + 152))
  {
    *(_DWORD *)(a1 + 144) = a5;
  }
  else
  {
    *(_QWORD *)(a1 + 144) = a5;
    *(_BYTE *)(a1 + 152) = 1;
  }
  *(_QWORD *)(a1 + 136) = a4;
  *(double *)(a1 + 160) = a6;
  return 1;
}

uint64_t sub_20FBCEE38(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t sub_20FBCEE44(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4, uint64_t a5, __int128 *a6, double a7)
{
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  _Q1 = *a2;
  _D3 = *((_QWORD *)a2 + 1);
  __asm { FMLA            D2, D3, V1.D[1] }
  *(_QWORD *)&_Q1 = *((_QWORD *)a2 + 3);
  __asm { FMLA            D2, D1, V0.D[1] }
  if (sqrt(_D2) < 0.000001
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/VIOAnchoredPlane3D.hpp", 71, (uint64_t)"(vio::math::L2Norm4(anchor_plane_in.data()) >= 1e-6)", 52, (uint64_t)"anchor plane should not be all zeros", 36, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v22 = a2[1];
  *(_OWORD *)(a1 + 80) = *a2;
  *(_OWORD *)(a1 + 96) = v22;
  v23 = *a3;
  *(_QWORD *)(a1 + 128) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(a1 + 112) = v23;
  if (*(_BYTE *)(a1 + 152))
  {
    *(_DWORD *)(a1 + 144) = a5;
  }
  else
  {
    *(_QWORD *)(a1 + 144) = a5;
    *(_BYTE *)(a1 + 152) = 1;
  }
  *(_QWORD *)(a1 + 136) = a4;
  *(double *)(a1 + 160) = a7;
  v24 = *a6;
  v25 = a6[1];
  v26 = a6[2];
  v27 = a6[3];
  *(_QWORD *)(a1 + 232) = *((_QWORD *)a6 + 8);
  *(_OWORD *)(a1 + 216) = v27;
  *(_OWORD *)(a1 + 200) = v26;
  *(_OWORD *)(a1 + 184) = v25;
  *(_OWORD *)(a1 + 168) = v24;
  return 1;
}

uint64_t sub_20FBCEF58(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
}

float64x2_t sub_20FBCEF64(float64x2_t **a1)
{
  float64x2_t *v1;
  float64x2_t *v2;
  float64x2_t result;
  double v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  int v15;
  int v16;
  _BOOL4 v17;
  float64x2_t v18;
  double v19;
  double v22;
  double v23;
  double v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;

  v1 = *a1;
  v2 = a1[1];
  result = *v2;
  _D2 = v2->f64[1];
  __asm { FMLA            D1, D2, V0.D[1] }
  if (_D1 >= 0.00000001)
  {
    v9 = v2[1].f64[0];
    *(double *)&v10 = sqrt(_D1);
    v11 = fabs(v9);
    v12 = fabs(*(double *)&v10);
    v13 = v11 / v12;
    if (v11 >= v12)
      v13 = v12 / v11;
    if (v13 <= 0.414213562)
    {
      v15 = 1;
      v16 = 2;
      v14 = v13;
    }
    else
    {
      v14 = (v12 - v11) / (v11 + v12);
      if (v11 >= v12)
        v14 = -v14;
      v15 = -1;
      v16 = 1;
    }
    v17 = v13 > 0.414213562;
    v18 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v14 * v14), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v14 * v14), (float64x2_t)xmmword_210315370), v14 * v14 * (v14 * v14))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v14 * v14), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v14 * v14), (float64x2_t)xmmword_210315380), v14 * v14 * (v14 * v14))), v14 * v14 * (v14 * v14) * (v14 * v14 * (v14 * v14))));
    v19 = v14 + v14 * vdivq_f64(v18, (float64x2_t)vdupq_laneq_s64((int64x2_t)v18, 1)).f64[0];
    if (*(double *)&v10 == INFINITY && v11 == INFINITY)
      v19 = 0.785398163;
    if (v11 >= v12)
      v16 = v17;
    else
      v15 = -v15;
    if (v9 < 0.0)
    {
      v15 = -v15;
      v16 = 4 - v16;
    }
    if (v10 < 0)
    {
      v15 = -v15;
      v16 = -v16;
    }
    if (*(double *)&v10 == 0.0 && v9 == 0.0)
      v22 = 0.0;
    else
      v22 = v19;
    v23 = (double)v16 * 3.061617e-17 + (double)v16 * 0.785398163 + v22 * (double)v15;
    v24 = v23 * v23;
    v25.f64[0] = v23 * (v23 * v23);
    v25.f64[1] = v24 * v25.f64[0];
    v26 = vmulq_n_f64(v25, v24 * v24);
    v27 = vdivq_f64(result, (float64x2_t)vdupq_lane_s64(v10, 0));
    v28 = vmulq_n_f64(v25, v27.f64[0]);
    v29 = vmulq_laneq_f64(v25, v27, 1);
    *v1 = v28;
    v1[1] = vmulq_n_f64(v26, v27.f64[0]);
    result = vmulq_laneq_f64(v26, v27, 1);
    v1[2] = v29;
    v1[3] = result;
  }
  else
  {
    result.f64[0] = 0.0;
    v1[2] = 0u;
    v1[3] = 0u;
    *v1 = 0u;
    v1[1] = 0u;
  }
  return result;
}

void sub_20FBCF154()
{
  sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.hpp", 808, (uint64_t)"", 0, (uint64_t)"not implemented yet. rdar://113779839", 37, (void (*)(void **))sub_21023DDB0);
  abort();
}

uint64_t *sub_20FBCF190(uint64_t a1)
{
  int64x2_t **v1;
  uint64_t *v2;
  uint64_t v3;
  _BYTE *v4;
  int64x2_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t j;
  uint64_t v11;
  _BYTE *v12;
  void *v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  int64x2_t *v17;
  uint64_t v18;
  const char *v19;
  size_t v20;
  unsigned __int8 v21;
  const char *v22;
  size_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  size_t v31;
  std::__shared_weak_count_vtbl *v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  int v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  void *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  int64x2_t *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _DWORD *v75;
  uint64_t v76;
  int64x2_t *v77;
  __int32 *v78;
  int v79;
  uint64_t v80;
  __int32 *v81;
  __int32 *v82;
  __int32 *v83;
  unsigned int v84;
  char v85;
  _DWORD *v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unsigned int *v90;
  _DWORD *v91;
  unsigned int v92;
  uint64_t v93;
  char *v94;
  unint64_t v95;
  _DWORD *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  _BYTE *v103;
  unsigned int *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  _OWORD *v109;
  char *v110;
  uint64_t v111;
  __int128 v112;
  unsigned int v113;
  _DWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  __int8 *v118;
  uint64_t v119;
  double v120;
  double v121;
  double v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  uint64_t v127;
  double v128;
  uint64_t v129;
  _QWORD *v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t m;
  uint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  _QWORD *v141;
  _QWORD *v142;
  _QWORD *v143;
  uint64_t v144;
  _DWORD *v145;
  int v146;
  unsigned int v147;
  BOOL v148;
  _QWORD *v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t k;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  __int128 *v156;
  uint64_t v157;
  _QWORD *v158;
  _QWORD *v159;
  void *v160;
  _BYTE *v161;
  uint64_t v162;
  uint64_t v163;
  BOOL v164;
  int v165;
  unint64_t v166;
  unint64_t v167;
  size_t v168;
  void **v169;
  int64x2_t *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  size_t prime;
  uint64_t v176;
  const void **v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unsigned int v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unsigned int *v187;
  _DWORD *v188;
  unsigned int v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  const void *v193;
  uint64_t v194;
  uint64_t v195;
  const char *v196;
  uint64_t v197;
  const char *v198;
  size_t v199;
  unsigned __int8 v200;
  const char *v201;
  size_t v202;
  _BYTE *v203;
  uint64_t v204;
  uint64_t v205;
  void *v206;
  uint64_t v207;
  uint64_t v208;
  NSObject *v209;
  size_t v210;
  void *v211;
  _QWORD *v212;
  size_t v213;
  size_t v214;
  uint64_t *v215;
  void *v216;
  int v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  char v221;
  _QWORD *v222;
  uint64_t v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  unint64_t *v227;
  unint64_t v228;
  unint64_t *v229;
  unint64_t v230;
  unint64_t v231;
  unint64_t *v232;
  unint64_t v233;
  uint64_t v234;
  char *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  const char *v239;
  uint64_t v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  uint64_t v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  std::__shared_weak_count *v251;
  unint64_t *v252;
  unint64_t v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  const char *v260;
  std::__shared_weak_count *v261;
  unint64_t *v262;
  unint64_t v263;
  uint64_t v264;
  uint64_t v265;
  __int128 *v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  std::__shared_weak_count *v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  int v277;
  uint64_t v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  _BYTE *v308;
  uint64_t v309;
  uint64_t v310;
  BOOL v311;
  _QWORD *v312;
  __int128 v313;
  uint64_t v314;
  uint64_t v315;
  long double v316;
  uint64_t v317;
  uint64_t *v318;
  uint64_t *n;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t *v324;
  uint64_t *ii;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  int64x2_t *v331;
  void *v332;
  uint64_t v333;
  void *v334;
  int64x2_t *v335;
  void *v336;
  uint64_t *v337;
  int v338;
  int v339;
  double *v340;
  int v341;
  double v342;
  double v343;
  double v344;
  double v345;
  double v346;
  double v347;
  double v348;
  BOOL v349;
  double v350;
  double v351;
  double v352;
  double v353;
  float64x2_t v354;
  double v355;
  _QWORD *v356;
  unint64_t v357;
  double *v358;
  double *v359;
  double *v360;
  uint64_t v361;
  unint64_t v362;
  uint64_t v363;
  unint64_t v364;
  char *v365;
  char *v366;
  uint64_t v367;
  char v368;
  uint64_t v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  _QWORD *v384;
  _QWORD *v385;
  uint64_t v386;
  uint64_t jj;
  uint64_t v388;
  void *v389;
  uint64_t v390;
  uint64_t v391;
  unint64_t v392;
  unint64_t v393;
  _QWORD *v394;
  _QWORD *v395;
  uint64_t v396;
  uint64_t kk;
  uint64_t v398;
  void *v399;
  uint64_t v400;
  uint64_t v401;
  unint64_t v402;
  unint64_t v403;
  uint64_t *result;
  double v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t i;
  uint64_t v409;
  int64x2_t *v410;
  uint64_t *v411;
  int64x2_t *v412;
  uint64_t *v413;
  std::runtime_error *exception;
  uint64_t v415;
  const char *v416;
  int v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  unint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  void **v430;
  const char *v431;
  uint64_t v432;
  uint64_t i64;
  int v434;
  uint64_t v435;
  _QWORD *v436;
  int v437;
  _BYTE *v438;
  uint64_t *v439;
  uint64_t *v440;
  int64x2_t **v441;
  uint64_t v442;
  int v443;
  __int128 v444;
  _BYTE v445[32];
  __int128 v446;
  uint64_t v447;
  __int128 v448;
  uint64_t v449;
  __int128 v450;
  __int128 v451;
  __int128 v452;
  __int128 v453;
  std::__shared_weak_count *v454;
  __int128 v455;
  uint64_t v456;
  void *__dst[2];
  int64_t v458;
  uint64_t v459;
  uint64_t v460;
  double v461;
  unsigned int v462;
  uint64_t v463;
  uint64_t *v464;
  __int128 v465;
  _BYTE object[424];
  __int128 v467;
  uint64_t v468;
  __int128 v469;
  uint64_t v470;
  __int128 v471;
  uint64_t v472;
  unsigned __int8 v473;
  __int128 v474;
  uint64_t v475;
  __int128 v476;
  uint64_t v477;
  __int128 v478;
  __int128 v479;
  __int128 v480;
  __int128 v481;
  __int128 v482;
  __int128 v483;
  uint64_t v484;
  __int128 v485;
  __int128 v486;
  __int128 v487;
  __int128 v488;
  uint64_t v489;
  __int128 v490;
  __int128 v491;
  __int128 v492;
  __int128 v493;
  uint64_t v494;
  __int128 v495;
  __int128 v496;
  __int128 v497;
  __int128 v498;
  uint64_t v499;
  __int128 v500;
  __int128 v501;
  __int128 v502;
  __int128 v503;
  uint64_t v504;
  __int128 v505;
  __int128 v506;
  __int128 v507;
  __int128 v508;
  uint64_t v509;
  __int128 v510;
  __int128 v511;
  __int128 v512;
  __int128 v513;
  uint64_t v514;
  __int128 v515;
  __int128 v516;
  __int128 v517;
  __int128 v518;
  uint64_t v519;
  _BYTE v520[648];
  __int128 v521;
  uint64_t v522;
  __int128 v523;
  uint64_t v524;
  _BYTE v525[648];
  _BYTE v526[664];
  _BYTE oslog[24];
  __int128 v528;
  void *v529;
  const char *v530;
  unint64_t v531;
  std::__shared_weak_count *v532;
  _QWORD v533[5];

  MEMORY[0x24BDAC7A8](a1);
  v533[2] = *MEMORY[0x24BDAC8D0];
  v440 = v2;
  v441 = v1;
  v3 = *v2;
  v4 = (_BYTE *)(*v2 + 5313);
  v439 = (uint64_t *)(*v2 + 14840);
  if (v439 != (uint64_t *)*v1)
    sub_20E86811C((_QWORD *)(v3 + 14888), (char *)(*v1)[3].i64[0], (char *)(*v1)[3].i64[1], ((*v1)[3].i64[1] - (*v1)[3].i64[0]) >> 3);
  *(_QWORD *)(v3 + 14848) = *(_QWORD *)(v3 + 14840);
  *(_QWORD *)(v3 + 14872) = *(_QWORD *)(v3 + 14864);
  v5 = (int64x2_t *)(v3 + 14912);
  *(_QWORD *)(v3 + 14920) = *(_QWORD *)(v3 + 14912);
  *(_QWORD *)(v3 + 14944) = *(_QWORD *)(v3 + 14936);
  v463 = 0;
  v462 = 0;
  v460 = 0;
  v461 = 0.0;
  v6 = (uint64_t *)(v3 + 14960);
  *(_QWORD *)(v3 + 14968) = *(_QWORD *)(v3 + 14960);
  if (v4[2])
  {
    sub_20F896104(v3);
    if (*(_BYTE *)(v3 + 1932))
    {
      v407 = *(_QWORD *)(v3 + 14840);
      for (i = *(_QWORD *)(v3 + 14848); v407 != i; v407 += 8)
      {
        v409 = *(_QWORD *)(*(_QWORD *)v407 + 32);
        *(_QWORD *)object = *(_QWORD *)(*(_QWORD *)v407 + 24);
        *(_QWORD *)&object[8] = v409;
        sub_20FBD960C(v3 + 328, *(uint64_t *)object, v409, object);
      }
    }
    v410 = *v441;
    v411 = &(*v441)[1].i64[1];
    if (v411 == v439)
    {
      v412 = v410 + 3;
      if (&v410[3] == v5)
        goto LABEL_533;
    }
    else
    {
      sub_20FB42E10(v411, *(char **)(v3 + 14840), *(char **)(v3 + 14848), (uint64_t)(*(_QWORD *)(v3 + 14848) - *(_QWORD *)(v3 + 14840)) >> 3);
      v410 = *v441;
      v412 = *v441 + 3;
      if (v412 == v5)
      {
LABEL_533:
        v413 = &v410[4].i64[1];
        if (&v410[4].u64[1] == (unint64_t *)v6)
          goto LABEL_535;
        goto LABEL_534;
      }
    }
    sub_20E86811C(v412, *(char **)(v3 + 14912), *(char **)(v3 + 14920), (uint64_t)(*(_QWORD *)(v3 + 14920) - *(_QWORD *)(v3 + 14912)) >> 3);
    v413 = &(*v441)[4].i64[1];
    if (v413 == v6)
    {
LABEL_535:
      kdebug_trace();
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 3421, (uint64_t)"", 0, (uint64_t)"Cannot batch in software mode.", 30, (void (*)(void **))sub_21023DDB0);
      abort();
    }
LABEL_534:
    sub_20E86811C(v413, *(char **)(v3 + 14960), *(char **)(v3 + 14968), (uint64_t)(*(_QWORD *)(v3 + 14968) - *(_QWORD *)(v3 + 14960)) >> 3);
    goto LABEL_535;
  }
  v438 = v4;
  if (*v4
    || v4[1]
    || (v7 = *(_QWORD *)(v3 + 8216), *(_BYTE *)v7)
    || (v8 = *(_QWORD *)(v7 + 16) + 62856, *(_BYTE *)(v8 + 50))
    || !*(_DWORD *)v8 && !*(_DWORD *)(v8 + 4) && !*(_BYTE *)(v8 + 8))
  {
    sub_20F894860(v3, (_OWORD *)(v3 + 14984), v439, (char **)(v3 + 14864), v440[1], (_DWORD *)&v463 + 1, &v462, &v461);
    if (*(_BYTE *)(v3 + 1932))
    {
      v9 = *(_QWORD *)(v3 + 14840);
      for (j = *(_QWORD *)(v3 + 14848); v9 != j; v9 += 8)
      {
        v11 = *(_QWORD *)(*(_QWORD *)v9 + 32);
        *(_QWORD *)object = *(_QWORD *)(*(_QWORD *)v9 + 24);
        *(_QWORD *)&object[8] = v11;
        sub_20FBD960C(v3 + 328, *(uint64_t *)object, v11, object);
      }
    }
    v12 = v438;
    if (*v438)
    {
      sub_20F899044(v3, (_QWORD *)(v3 + 14912), (uint64_t **)(v3 + 14936), &v463);
      v12 = v438;
    }
    if (v12[1])
    {
      sub_20F899ECC((uint64_t **)object, v3, (_DWORD *)&v460 + 1, &v460);
      v13 = *(void **)(v3 + 14960);
      if (v13)
      {
        *(_QWORD *)(v3 + 14968) = v13;
        operator delete(v13);
        *v6 = 0;
        *(_QWORD *)(v3 + 14968) = 0;
        *(_QWORD *)(v3 + 14976) = 0;
      }
      v437 = 0;
      *(_OWORD *)(v3 + 14960) = *(_OWORD *)object;
      *(_QWORD *)(v3 + 14976) = *(_QWORD *)&object[16];
    }
    else
    {
      v437 = 0;
    }
  }
  else
  {
    sub_20F896104(v3);
    v437 = 1;
  }
  sub_20F82FD50(&v464);
  if (*(int *)v464[7] > 3
    || (v14 = *((unsigned __int8 *)v464 + 72),
        v15 = sub_20E8C31DC((uint64_t)v464, "OSLogSurrogateAppender", 1, 0),
        v16 = v15,
        !v14)
    && !v15)
  {
LABEL_95:
    v63 = *v441;
    v64 = &(*v441)[1].i64[1];
    if (v64 == v439)
      goto LABEL_97;
    goto LABEL_96;
  }
  *(_QWORD *)oslog = &v464;
  *(std::chrono::steady_clock::time_point *)&oslog[8] = std::chrono::steady_clock::now();
  *(std::chrono::system_clock::time_point *)&oslog[16] = std::chrono::system_clock::now();
  LODWORD(v528) = 3;
  *((_QWORD *)&v528 + 1) = "unknown file";
  LODWORD(v529) = 3491;
  v532 = 0;
  v530 = "unknown function";
  v531 = 0;
  v17 = *v441;
  v18 = **(_QWORD **)oslog;
  v19 = (const char *)(**(_QWORD **)oslog + 16);
  v415 = **(_QWORD **)oslog;
  v416 = v19;
  if (*(char *)(**(_QWORD **)oslog + 39) < 0)
  {
    v19 = *(const char **)(v18 + 16);
    v20 = *(_QWORD *)(v18 + 24);
  }
  else
  {
    v20 = *(unsigned __int8 *)(**(_QWORD **)oslog + 39);
  }
  v417 = v14;
  v442 = *(_QWORD *)(v3 + 12408);
  v435 = *(_QWORD *)(v3 + 12400);
  v432 = *(_QWORD *)(v3 + 14920);
  v429 = *(_QWORD *)(v3 + 14912);
  v427 = *(_QWORD *)(v3 + 14896);
  v425 = *(_QWORD *)(v3 + 14888);
  v422 = *(_QWORD *)(v3 + 14848);
  v423 = *(_QWORD *)(v3 + 14968);
  v419 = *(_QWORD *)(v3 + 14840);
  v420 = *(_QWORD *)(v3 + 14960);
  v421 = v17[5].i64[0];
  v418 = v17[4].i64[1];
  v21 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v21 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
    if (object[24] && (object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v22 = byte_254A4A4F8;
  else
    v22 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v23 = byte_254A4A4F8[23];
  else
    v23 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)object = os_log_create(v22, v19);
  v24 = &object[8];
  if (v23 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v23 >= 0x17)
  {
    v25 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17)
      v25 = v23 | 7;
    v26 = v25 + 1;
    v24 = operator new(v25 + 1);
    *(_QWORD *)&object[24] = v26 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v24;
    *(_QWORD *)&object[16] = v23;
    goto LABEL_38;
  }
  object[31] = v23;
  if (v23)
LABEL_38:
    memmove(v24, v22, v23);
  v24[v23] = 0;
  object[32] = 1;
  v27 = &object[40];
  if (v20 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v20 >= 0x17)
  {
    v29 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v29 = v20 | 7;
    v30 = v29 + 1;
    v27 = operator new(v29 + 1);
    *(_QWORD *)&object[56] = v30 | 0x8000000000000000;
    *(_QWORD *)&object[40] = v27;
    *(_QWORD *)&object[48] = v20;
  }
  else
  {
    object[63] = v20;
    if (!v20)
    {
      object[40] = 0;
      object[64] = 1;
      v28 = *(NSObject **)object;
      if ((object[63] & 0x80000000) == 0)
        goto LABEL_43;
      goto LABEL_49;
    }
  }
  memmove(v27, v19, v20);
  v27[v20] = 0;
  object[64] = 1;
  v28 = *(NSObject **)object;
  if ((object[63] & 0x80000000) == 0)
  {
LABEL_43:
    if (!object[32])
      goto LABEL_52;
    goto LABEL_50;
  }
LABEL_49:
  operator delete(*(void **)&object[40]);
  if (!object[32])
    goto LABEL_52;
LABEL_50:
  if ((object[31] & 0x80000000) != 0)
    operator delete(*(void **)&object[8]);
LABEL_52:
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  if (v16 && *(_QWORD *)(v16 + 24))
  {
    v31 = _os_log_pack_size();
    v32 = (std::__shared_weak_count_vtbl *)operator new(v31, (std::align_val_t)8uLL);
    v33 = (std::__shared_weak_count *)operator new();
    v34 = v33;
    v33->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    v33->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v33->__shared_weak_owners_ = 0;
    v33[1].__vftable = v32;
    *(_QWORD *)object = v32;
    *(_QWORD *)&object[8] = v32;
    *(_QWORD *)&object[16] = v33;
    do
      v36 = __ldxr(p_shared_owners);
    while (__stxr(v36 + 1, p_shared_owners));
    memset(&object[24], 0, 24);
    do
      v37 = __ldaxr(p_shared_owners);
    while (__stlxr(v37 - 1, p_shared_owners));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v34);
    }
    v38 = *(_QWORD *)object;
    v39 = _os_log_pack_fill();
    *(_DWORD *)v39 = 134219264;
    *(_QWORD *)(v39 + 4) = (v422 - v419) >> 3;
    *(_WORD *)(v39 + 12) = 2048;
    *(_QWORD *)(v39 + 14) = (v442 - v435) >> 3;
    *(_WORD *)(v39 + 22) = 2048;
    *(_QWORD *)(v39 + 24) = (v432 - v429) >> 3;
    *(_WORD *)(v39 + 32) = 2048;
    *(_QWORD *)(v39 + 34) = (v427 - v425) >> 3;
    *(_WORD *)(v39 + 42) = 2048;
    *(_QWORD *)(v39 + 44) = (v423 - v420) >> 3;
    *(_WORD *)(v39 + 52) = 2048;
    *(_QWORD *)(v39 + 54) = (v421 - v418) >> 3;
    v40 = operator new();
    v41 = *(unsigned __int8 *)(v415 + 39);
    v42 = *(const char **)(v415 + 16);
    v43 = *(_QWORD *)(v415 + 24);
    v44 = *(_OWORD *)&object[24];
    *(_OWORD *)(v40 + 8) = *(_OWORD *)&object[8];
    if ((v41 & 0x80u) != 0)
      v41 = v43;
    else
      v42 = v416;
    *(_QWORD *)v40 = v38;
    *(_QWORD *)&object[8] = 0;
    *(_QWORD *)&object[16] = 0;
    *(_OWORD *)(v40 + 24) = v44;
    *(_QWORD *)&object[24] = 0;
    *(_QWORD *)&object[32] = 0;
    *(_QWORD *)(v40 + 40) = v42;
    *(_QWORD *)(v40 + 48) = v41;
    *(_BYTE *)(v40 + 56) = 1;
    *(_QWORD *)&v444 = 0;
    *(_QWORD *)&v450 = v40;
    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v16 + 24) + 40))(*(_QWORD *)(v16 + 24), &v450);
    v6 = (uint64_t *)(v3 + 14960);
    v5 = (int64x2_t *)(v3 + 14912);
    v45 = v450;
    *(_QWORD *)&v450 = 0;
    if (v45)
    {
      v46 = *(std::__shared_weak_count **)(v45 + 32);
      if (v46)
      {
        v47 = (unint64_t *)&v46->__shared_owners_;
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
      v49 = *(std::__shared_weak_count **)(v45 + 16);
      if (v49)
      {
        v50 = (unint64_t *)&v49->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      MEMORY[0x212BC6398](v45, 0x10F0C40B62ED6C6);
      *(_QWORD *)&v444 = 0;
    }
    v52 = *(std::__shared_weak_count **)&object[32];
    v53 = v417;
    if (*(_QWORD *)&object[32])
    {
      v54 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    v56 = *(std::__shared_weak_count **)&object[16];
    if (*(_QWORD *)&object[16])
    {
      v57 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
  }
  else
  {
    os_log_type_enabled(v28, OS_LOG_TYPE_INFO);
    *(_DWORD *)object = 134219264;
    *(_QWORD *)&object[4] = (v422 - v419) >> 3;
    *(_WORD *)&object[12] = 2048;
    *(_QWORD *)&object[14] = (v442 - v435) >> 3;
    *(_WORD *)&object[22] = 2048;
    *(_QWORD *)&object[24] = (v432 - v429) >> 3;
    *(_WORD *)&object[32] = 2048;
    *(_QWORD *)&object[34] = (v427 - v425) >> 3;
    *(_WORD *)&object[42] = 2048;
    *(_QWORD *)&object[44] = (v423 - v420) >> 3;
    *(_WORD *)&object[52] = 2048;
    *(_QWORD *)&object[54] = (v421 - v418) >> 3;
    v59 = (void *)_os_log_send_and_compose_impl();
    v6 = (uint64_t *)(v3 + 14960);
    v5 = (int64x2_t *)(v3 + 14912);
    v53 = v417;
    if (v59)
      free(v59);
  }
  if (v53)
  {
    sub_20E8C003C((uint64_t)oslog, "[FinishUpdate] Got %zu/%zu inlier points, %zu/%zu inlier lines, and %zu/%zu inlier planes", (uint64_t)(*(_QWORD *)(v3 + 14848) - *(_QWORD *)(v3 + 14840)) >> 3, (uint64_t)(*(_QWORD *)(v3 + 12408) - *(_QWORD *)(v3 + 12400)) >> 3, (uint64_t)(*(_QWORD *)(v3 + 14920) - *(_QWORD *)(v3 + 14912)) >> 3, (uint64_t)(*(_QWORD *)(v3 + 14896) - *(_QWORD *)(v3 + 14888)) >> 3, (uint64_t)(*(_QWORD *)(v3 + 14968) - *(_QWORD *)(v3 + 14960)) >> 3, ((*v441)[5].i64[0] - (*v441)[4].i64[1]) >> 3);
    sub_20E863570((uint64_t)oslog);
  }
  sub_20E863570((uint64_t)oslog);
  v60 = v532;
  if (!v532)
    goto LABEL_95;
  v61 = (unint64_t *)&v532->__shared_owners_;
  do
    v62 = __ldaxr(v61);
  while (__stlxr(v62 - 1, v61));
  if (v62)
    goto LABEL_95;
  ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
  std::__shared_weak_count::__release_weak(v60);
  v63 = *v441;
  v64 = &(*v441)[1].i64[1];
  if (v64 != v439)
  {
LABEL_96:
    sub_20FB42E10(v64, *(char **)(v3 + 14840), *(char **)(v3 + 14848), (uint64_t)(*(_QWORD *)(v3 + 14848) - *(_QWORD *)(v3 + 14840)) >> 3);
    v63 = *v441;
  }
LABEL_97:
  if (&v63[3] != v5)
  {
    sub_20E86811C((int64x2_t *)v63[3].i64, *(char **)(v3 + 14912), *(char **)(v3 + 14920), (uint64_t)(*(_QWORD *)(v3 + 14920) - *(_QWORD *)(v3 + 14912)) >> 3);
    v63 = *v441;
  }
  if (&v63[4].u64[1] != (unint64_t *)v6)
    sub_20E86811C(&v63[4].i64[1], *(char **)(v3 + 14960), *(char **)(v3 + 14968), (uint64_t)(*(_QWORD *)(v3 + 14968) - *(_QWORD *)(v3 + 14960)) >> 3);
  v65 = v3 + 8800;
  v66 = *(uint64_t **)(v3 + 14864);
  v67 = *(uint64_t **)(v3 + 14872);
  if (v66 != v67)
  {
    v68 = *(uint64_t **)(v3 + 14864);
    do
    {
      v69 = *v68;
      if ((*(_DWORD *)(*v68 + 520) - 1) <= 1)
      {
        v71 = *(_QWORD *)(v69 + 496);
        v70 = *(_QWORD *)(v69 + 504);
        if (v71 != v70)
        {
          v72 = v70 - v71 - 64;
          v73 = v71;
          if (v72 < 0x40)
            goto LABEL_567;
          v74 = (v72 >> 6) + 1;
          v73 = v71 + ((v74 & 0x7FFFFFFFFFFFFFELL) << 6);
          v75 = (_DWORD *)(v71 + 88);
          v76 = v74 & 0x7FFFFFFFFFFFFFELL;
          do
          {
            *(v75 - 16) = 0;
            *v75 = 0;
            v75 += 32;
            v76 -= 2;
          }
          while (v76);
          if (v74 != (v74 & 0x7FFFFFFFFFFFFFELL))
          {
LABEL_567:
            do
            {
              *(_DWORD *)(v73 + 24) = 0;
              v73 += 64;
            }
            while (v73 != v70);
          }
        }
      }
      ++v68;
    }
    while (v68 != v67);
    v436 = (_QWORD *)(v3 + 8216);
    if (!*(_BYTE *)(*(_QWORD *)(v3 + 8216) + 1720))
    {
      v77 = *v441;
      i64 = (uint64_t)(*v441)[425].i64;
      v78 = &(*v441)[491].i32[2];
      v430 = (void **)&(*v441)[448];
      while (1)
      {
        if (*(_DWORD *)(*v66 + 520) != 2)
        {
          v79 = sub_20FBD9AF8((uint64_t)v77[324].i64, *(_DWORD *)(*v66 + 32));
          v65 = v3 + 8800;
          if (v79)
          {
            v77[491].i16[6] = 0;
            *v78 = 0;
          }
          goto LABEL_115;
        }
        if (!*(_BYTE *)(v65 + 2864))
          break;
LABEL_115:
        if (++v66 == v67)
          goto LABEL_163;
      }
      v80 = (*(uint64_t (**)(uint64_t *))(v77[303].i64[1] + 136))(&v77[303].i64[1]);
      v81 = *(__int32 **)(v80 + 15408);
      v82 = wmemchr(*(__int32 **)(v80 + 15400), *(_DWORD *)(*v66 + 32), ((uint64_t)v81 - *(_QWORD *)(v80 + 15400)) >> 2);
      if (v82)
        v83 = v82;
      else
        v83 = v81;
      v84 = *(_DWORD *)(*v66 + 32);
      if (v83 == *(__int32 **)(v80 + 15408))
      {
        v86 = (_DWORD *)v77[348].i64[1];
        v87 = v77[349].i64[0];
        if ((_DWORD *)v87 == v86)
        {
          v65 = v3 + 8800;
          goto LABEL_136;
        }
        v88 = (v87 - (uint64_t)v86) >> 4;
        v65 = v3 + 8800;
        do
        {
          v89 = v88 >> 1;
          v90 = &v86[4 * (v88 >> 1)];
          v92 = *v90;
          v91 = v90 + 4;
          v88 += ~(v88 >> 1);
          if (v92 < v84)
            v86 = v91;
          else
            v88 = v89;
        }
        while (v88);
        if (v86 == (_DWORD *)v87)
          goto LABEL_136;
        if (*v86 != v84)
          goto LABEL_136;
        v93 = *((_QWORD *)v86 + 1);
        if ((*(_BYTE *)(v93 + 4) & 6) != 0)
          goto LABEL_136;
        *(_BYTE *)(v93 + 4) ^= 2u;
        v94 = (char *)v77[448].i64[1];
        v95 = v77[449].u64[0];
        if ((unint64_t)v94 >= v95)
        {
          v97 = (char *)*v430;
          v98 = v94 - (_BYTE *)*v430;
          v99 = v98 >> 2;
          v100 = (v98 >> 2) + 1;
          if (v100 >> 62)
            sub_20E867F44();
          v101 = v95 - (_QWORD)v97;
          if (v101 >> 1 > v100)
            v100 = v101 >> 1;
          if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFFCLL)
            v102 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v102 = v100;
          if (v102)
          {
            v426 = v94 - (_BYTE *)*v430;
            v428 = v98 >> 2;
            if (v102 >> 62)
              sub_20E877A38();
            v424 = v102;
            v103 = operator new(4 * v102);
            v102 = v424;
            v98 = v426;
            v99 = v428;
          }
          else
          {
            v103 = 0;
          }
          v104 = (unsigned int *)&v103[4 * v99];
          *v104 = v84;
          v96 = v104 + 1;
          if (v94 != v97)
          {
            v105 = v94 - v97 - 4;
            if (v105 < 0x2C)
              goto LABEL_568;
            if ((unint64_t)(v94 - v103 - v98) < 0x20)
              goto LABEL_568;
            v106 = (v105 >> 2) + 1;
            v107 = 4 * (v106 & 0x7FFFFFFFFFFFFFF8);
            v108 = &v94[-v107];
            v104 = (unsigned int *)((char *)v104 - v107);
            v109 = &v103[4 * v99 - 16];
            v110 = v94 - 16;
            v111 = v106 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v112 = *(_OWORD *)v110;
              *(v109 - 1) = *((_OWORD *)v110 - 1);
              *v109 = v112;
              v109 -= 2;
              v110 -= 32;
              v111 -= 8;
            }
            while (v111);
            v94 = v108;
            if (v106 != (v106 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_568:
              do
              {
                v113 = *((_DWORD *)v94 - 1);
                v94 -= 4;
                *--v104 = v113;
              }
              while (v94 != v97);
            }
          }
          v77[448].i64[0] = (uint64_t)v104;
          v77[448].i64[1] = (uint64_t)v96;
          v77[449].i64[0] = (uint64_t)&v103[4 * v102];
          if (v97)
          {
            v114 = v96;
            operator delete(v97);
            v96 = v114;
          }
          v65 = v3 + 8800;
        }
        else
        {
          *(_DWORD *)v94 = v84;
          v96 = v94 + 4;
        }
        v77[448].i64[1] = (uint64_t)v96;
        *(_BYTE *)(i64 + 2) = 0;
        *(_WORD *)i64 = 256;
      }
      else
      {
        v85 = sub_20FBD98F4((uint64_t)v77[324].i64, *(_DWORD *)(*v66 + 32));
        v65 = v3 + 8800;
        if ((v85 & 1) == 0)
        {
LABEL_136:
          *(_DWORD *)(*v66 + 520) = 0;
          goto LABEL_115;
        }
      }
      v77[491].i16[6] = 0;
      *v78 = 0;
      goto LABEL_136;
    }
    goto LABEL_161;
  }
  v436 = (_QWORD *)(v3 + 8216);
  if (*(_BYTE *)(*(_QWORD *)(v3 + 8216) + 1720))
  {
LABEL_161:
    kdebug_trace();
    goto LABEL_435;
  }
  v77 = *v441;
LABEL_163:
  v115 = *(_QWORD *)(v3 + 14936);
  v116 = *(_QWORD *)(v3 + 14944);
  if (v115 != v116)
  {
    v117 = (uint64_t)v77[324].i64;
    v118 = &v77[491].i8[8];
    do
    {
      if (sub_20FBD9AF8(v117, *(_DWORD *)(*(_QWORD *)v115 + 32)))
      {
        *((_WORD *)v118 + 2) = 0;
        *(_DWORD *)v118 = 0;
      }
      v115 += 8;
    }
    while (v115 != v116);
  }
  kdebug_trace();
  v119 = v3 + 8800;
  if (*(_BYTE *)(v3 + 772))
  {
    if (*(_BYTE *)(v3 + 11664))
    {
      v119 = v3 + 8800;
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 3559, (uint64_t)"!this->bad_geometry_in_last_frame_.first", 40, (uint64_t)"Should not have bad_geometry_in_last_frame_", 43, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
    }
    if (*(_BYTE *)(v3 + 781))
    {
      v119 = v3 + 8800;
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 3561, (uint64_t)"!this->config().bundle_adjuster_config.running_as_light_ba", 58, (uint64_t)"The current solver should NOT be a light BA solver.", 51, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
    }
  }
  kdebug_trace();
  if (*(_BYTE *)(v119 + 2864))
  {
    v127 = (uint64_t)*v441;
    if (*(_BYTE *)(v3 + 1930))
    {
      sub_20FBD56B0(*v441, 0, (_DWORD *)(v3 + 8184), 0, 0);
    }
    else
    {
      v443 = sub_20FA558B8(v127 + 5184, 0);
      sub_20FBD9D00(v127);
      v141 = *(_QWORD **)(v127 + 8);
      if (!v141[8])
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 1774, (uint64_t)"this->viobadata_ref_.state_set->size() >= 1 + kept_idx", 54, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v141 = *(_QWORD **)(v127 + 8);
      }
      v142 = (_QWORD *)v141[6];
      v143 = v141 + 7;
      if (v142 != v141 + 7)
      {
        v144 = v142[4];
        v145 = (_DWORD *)(v127 + 7864);
        v146 = *((_DWORD *)v142 + 10);
        do
        {
          v147 = *((_DWORD *)v142 + 10);
          v148 = v142[4] == v144 && v147 == v146;
          if (!v148)
          {
            if (sub_20FBF698C(v127 + 5184, *((_DWORD *)v142 + 10)))
            {
              *(_WORD *)(v127 + 7868) = 0;
              *v145 = 0;
            }
            else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 2624, (uint64_t)"result", 6, (uint64_t)"Failed to remove a variable.", 28, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
            if (sub_20FBED53C(v127 + 5184, v147))
            {
              *(_WORD *)(v127 + 7868) = 0;
              *v145 = 0;
            }
            else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 2629, (uint64_t)"result", 6, (uint64_t)"Failed to remove a variable.", 28, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
          }
          v149 = (_QWORD *)v142[1];
          if (v149)
          {
            do
            {
              v150 = v149;
              v149 = (_QWORD *)*v149;
            }
            while (v149);
          }
          else
          {
            do
            {
              v150 = (_QWORD *)v142[2];
              v148 = *v150 == (_QWORD)v142;
              v142 = v150;
            }
            while (!v148);
          }
          v142 = v150;
        }
        while (v150 != v143);
      }
      v151 = *(_QWORD *)(v127 + 6152);
      for (k = *(_QWORD *)(v127 + 6160); v151 != k; v151 += 16)
      {
        if ((*(_BYTE *)(*(_QWORD *)(v151 + 8) + 4) & 2) == 0)
        {
          if (sub_20FBD9AF8(v127 + 5184, *(_DWORD *)v151))
          {
            *(_WORD *)(v127 + 7868) = 0;
            *(_DWORD *)(v127 + 7864) = 0;
          }
          else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 1797, (uint64_t)"result", 6, (uint64_t)"Failed to remove a variable.", 28, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
        }
      }
      sub_20FBDAE84((_QWORD *)v127);
      sub_20FBDB2C4((int64x2_t *)v127, 0, v153, v154, v155, v156);
      sub_20FBF5244(v127);
      if (sub_20FA2AFA0(v127 + 4856))
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        sub_20E8610C0(object, "marginalizer BG");
        std::runtime_error::runtime_error(exception, (const std::string *)object);
        exception->__vftable = (std::runtime_error_vtbl *)&off_24CA04F20;
        __cxa_throw(exception, (struct type_info *)&unk_24CA04F38, (void (*)(void *))std::runtime_error::~runtime_error);
      }
      sub_20FBDCBA8(v127, 2, v443);
      if (!*(_BYTE *)(v127 + 40800))
      {
        v157 = *(unsigned int *)(v127 + 25272);
        if ((_DWORD)v157)
          bzero(*(void **)(v127 + 25256), 8 * v157);
      }
    }
    goto LABEL_434;
  }
  if (*(_BYTE *)(v3 + 1632))
    sub_20F82AF8C(*(_QWORD **)(v3 + 12440), (uint64_t *)(v3 + 2480), (_QWORD *)(v3 + 2504), (_QWORD *)(v3 + 2280), (_QWORD *)(v3 + 8056), (float64x2_t *)(v3 + 4752), (uint64_t *)(*(_QWORD *)(v3 + 7952) + 80));
  if (!*(_BYTE *)(v3 + 1581) || v438[2367])
  {
    HIDWORD(v128) = 0;
    memset(object, 0, 32);
    *(_DWORD *)&object[32] = 1065353216;
    goto LABEL_181;
  }
  v170 = *v441;
  v171 = *(_QWORD *)(**(_QWORD **)(v3 + 7952) + 48);
  v172 = *(_QWORD *)(v171 + 32);
  v173 = *(_QWORD *)(v171 + 40);
  v120 = *(double *)(v3 + 1584);
  v174 = (v120 * (double)(unint64_t)(((*v441)[2].i64[0] - (*v441)[1].i64[1]) >> 3));
  HIDWORD(v128) = 0;
  memset(object, 0, 32);
  *(_DWORD *)&object[32] = 1065353216;
  prime = (unint64_t)(float)v174;
  if (prime == 1)
  {
    prime = 2;
  }
  else
  {
    if ((prime & (prime - 1)) != 0)
      prime = std::__next_prime((unint64_t)(float)v174);
    if (!prime)
    {
      v178 = 0;
      v179 = v170[1].i64[1];
      v180 = v170[2].i64[0];
      if (v179 == v180)
        goto LABEL_181;
      goto LABEL_265;
    }
  }
  sub_20E8D2B3C((uint64_t)object, prime);
  v178 = *(_QWORD *)&object[24];
  v179 = v170[1].i64[1];
  v180 = v170[2].i64[0];
  if (v179 == v180)
    goto LABEL_181;
LABEL_265:
  if (v178 <= v174)
  {
    do
    {
      v181 = *(_QWORD *)v179;
      if (*(_DWORD *)(*(_QWORD *)v179 + 520) != 2)
      {
        v182 = *(_DWORD *)(v181 + 32);
        *(_DWORD *)oslog = v182;
        v183 = v170[384].i64[1];
        v184 = v170[385].i64[0];
        if (v184 != v183)
        {
          v185 = (v184 - v183) >> 4;
          do
          {
            v186 = v185 >> 1;
            v187 = (unsigned int *)(v183 + 16 * (v185 >> 1));
            v189 = *v187;
            v188 = v187 + 4;
            v185 += ~(v185 >> 1);
            if (v189 < v182)
              v183 = (uint64_t)v188;
            else
              v185 = v186;
          }
          while (v185);
        }
        if (v183 != v184 && *(_DWORD *)v183 == v182 && (*(_BYTE *)(*(_QWORD *)(v183 + 8) + 4) & 2) == 0)
        {
          v190 = *(_QWORD *)(v181 + 496);
          v191 = *(_QWORD *)(v181 + 504);
          while (v190 != v191)
          {
            if (*(_QWORD *)v190 == v172 && *(_DWORD *)(v190 + 8) == (_DWORD)v173)
            {
              if (v190 != v191)
              {
                sub_20EABA148((uint64_t)object, (unsigned int *)oslog, oslog);
                v178 = *(_QWORD *)&object[24];
                goto LABEL_287;
              }
              break;
            }
            v190 += 64;
          }
          if (*(_BYTE *)(v181 + 488))
            v192 = v181 + 40;
          else
            v192 = 0;
          *(_WORD *)(v192 + 57) = 256;
        }
      }
LABEL_287:
      v179 += 8;
    }
    while (v179 != v180 && v178 <= v174);
  }
LABEL_181:
  v129 = v440[2];
  if (*(_QWORD *)(v129 + 24))
  {
    v130 = *(_QWORD **)(v129 + 16);
    if (v130)
    {
      do
      {
        v131 = (_QWORD *)*v130;
        operator delete(v130);
        v130 = v131;
      }
      while (v131);
    }
    *(_QWORD *)(v129 + 16) = 0;
    v132 = *(_QWORD *)(v129 + 8);
    if (v132)
    {
      for (m = 0; m != v132; ++m)
        *(_QWORD *)(*(_QWORD *)v129 + 8 * m) = 0;
    }
    *(_QWORD *)(v129 + 24) = 0;
  }
  v134 = *(_QWORD *)object;
  *(_QWORD *)object = 0;
  v135 = *(void **)v129;
  *(_QWORD *)v129 = v134;
  if (v135)
    operator delete(v135);
  v136 = *(_QWORD *)&object[8];
  v137 = *(_QWORD *)&object[16];
  *(_QWORD *)(v129 + 16) = *(_QWORD *)&object[16];
  *(_QWORD *)(v129 + 8) = v136;
  *(_QWORD *)&object[8] = 0;
  v138 = *(_QWORD *)&object[24];
  *(_QWORD *)(v129 + 24) = *(_QWORD *)&object[24];
  LODWORD(v128) = *(_DWORD *)&object[32];
  *(_DWORD *)(v129 + 32) = *(_DWORD *)&object[32];
  if (v138)
  {
    v139 = *(_QWORD *)(v137 + 8);
    v140 = *(_QWORD *)(v129 + 8);
    if ((v140 & (v140 - 1)) != 0)
    {
      if (v139 >= v140)
        v139 %= v140;
    }
    else
    {
      v139 &= v140 - 1;
    }
    *(_QWORD *)(*(_QWORD *)v129 + 8 * v139) = v129 + 16;
    *(_QWORD *)&object[16] = 0;
    *(_QWORD *)&object[24] = 0;
  }
  else
  {
    v158 = *(_QWORD **)&object[16];
    if (*(_QWORD *)&object[16])
    {
      do
      {
        v159 = (_QWORD *)*v158;
        operator delete(v158);
        v158 = v159;
      }
      while (v159);
    }
  }
  v160 = *(void **)object;
  *(_QWORD *)object = 0;
  if (v160)
    operator delete(v160);
  if (*(_BYTE *)(v3 + 1932))
  {
    v161 = (_BYTE *)*v436;
    v162 = 8;
    if (!*(_BYTE *)*v436)
      v162 = 16;
    v163 = *(_QWORD *)&v161[v162];
    if (*(_BYTE *)*v436)
      v164 = v163 == 0;
    else
      v164 = 1;
    if (v164)
      sub_20FBF6FD4(*((_QWORD *)v161 + 2), v128, v120, v121, v122, v123, v124, v125, v126);
    else
      sub_20FBF6B90(*((_QWORD *)v161 + 1), v128, v120, v121, v122, v123, v124, v125, v126);
  }
  sub_20F82FD50(&v459);
  if (**(int **)(v459 + 56) <= 2)
  {
    v165 = *(unsigned __int8 *)(v459 + 72);
    v166 = sub_20E8C31DC(v459, "OSLogSurrogateAppender", 1, 0);
    v167 = v166;
    if (v165 || v166)
    {
      sub_20E863438((uint64_t)object);
      sub_20E86A980(&object[16], (uint64_t)"MarginalizeIntoNthOldestFramePrior code path", 44);
      v434 = v165;
      if ((object[120] & 0x10) != 0)
      {
        v176 = *(_QWORD *)&object[112];
        if (*(_QWORD *)&object[112] < *(_QWORD *)&object[72])
        {
          *(_QWORD *)&object[112] = *(_QWORD *)&object[72];
          v176 = *(_QWORD *)&object[72];
        }
        v177 = (const void **)&object[64];
      }
      else
      {
        if ((object[120] & 8) == 0)
        {
          v168 = 0;
          HIBYTE(v458) = 0;
          v169 = __dst;
          goto LABEL_299;
        }
        v177 = (const void **)&object[40];
        v176 = *(_QWORD *)&object[56];
      }
      v193 = *v177;
      v168 = v176 - (_QWORD)*v177;
      if (v168 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v168 >= 0x17)
      {
        v194 = (v168 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v168 | 7) != 0x17)
          v194 = v168 | 7;
        v195 = v194 + 1;
        v169 = (void **)operator new(v194 + 1);
        __dst[1] = (void *)v168;
        v458 = v195 | 0x8000000000000000;
        __dst[0] = v169;
      }
      else
      {
        HIBYTE(v458) = v176 - *(_BYTE *)v177;
        v169 = __dst;
        if (!v168)
        {
LABEL_299:
          *((_BYTE *)v169 + v168) = 0;
          *(_QWORD *)&v450 = &v459;
          *((std::chrono::steady_clock::time_point *)&v450 + 1) = std::chrono::steady_clock::now();
          *(std::chrono::system_clock::time_point *)&v451 = std::chrono::system_clock::now();
          DWORD2(v451) = 2;
          *(_QWORD *)&v452 = "unknown file";
          DWORD2(v452) = 3603;
          *((_QWORD *)&v453 + 1) = 0;
          v454 = 0;
          *(_QWORD *)&v453 = "unknown function";
          if (v458 >= 0)
            v196 = (const char *)__dst;
          else
            v196 = (const char *)__dst[0];
          v197 = *(_QWORD *)v450;
          v198 = (const char *)(*(_QWORD *)v450 + 16);
          v431 = v198;
          if (*(char *)(*(_QWORD *)v450 + 39) < 0)
          {
            v198 = *(const char **)(v197 + 16);
            v199 = *(_QWORD *)(v197 + 24);
          }
          else
          {
            v199 = *(unsigned __int8 *)(*(_QWORD *)v450 + 39);
          }
          v200 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v200 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)oslog);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)oslog);
            if ((_BYTE)v528 && (oslog[23] & 0x80000000) != 0)
              operator delete(*(void **)oslog);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
          if (byte_254A4A4F8[23] >= 0)
            v201 = byte_254A4A4F8;
          else
            v201 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v202 = byte_254A4A4F8[23];
          else
            v202 = *(_QWORD *)&byte_254A4A4F8[8];
          *(_QWORD *)oslog = os_log_create(v201, v198);
          v203 = &oslog[8];
          if (v202 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v202 >= 0x17)
          {
            v204 = (v202 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v202 | 7) != 0x17)
              v204 = v202 | 7;
            v205 = v204 + 1;
            v203 = operator new(v204 + 1);
            *(_QWORD *)&v528 = v205 | 0x8000000000000000;
            *(_QWORD *)&oslog[8] = v203;
            *(_QWORD *)&oslog[16] = v202;
          }
          else
          {
            BYTE7(v528) = v202;
            if (!v202)
            {
LABEL_320:
              v203[v202] = 0;
              BYTE8(v528) = 1;
              v206 = &v529;
              if (v199 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v199 >= 0x17)
              {
                v207 = (v199 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v199 | 7) != 0x17)
                  v207 = v199 | 7;
                v208 = v207 + 1;
                v206 = operator new(v207 + 1);
                v531 = v208 | 0x8000000000000000;
                v529 = v206;
                v530 = (const char *)v199;
              }
              else
              {
                HIBYTE(v531) = v199;
                if (!v199)
                {
LABEL_328:
                  *((_BYTE *)v206 + v199) = 0;
                  LOBYTE(v532) = 1;
                  v209 = *(NSObject **)oslog;
                  if (SHIBYTE(v531) < 0)
                    operator delete(v529);
                  if (BYTE8(v528) && SBYTE7(v528) < 0)
                    operator delete(*(void **)&oslog[8]);
                  if (*(_QWORD *)oslog)
                    os_release(*(void **)oslog);
                  if (!v167 || !*(_QWORD *)(v167 + 24))
                  {
                    os_log_type_enabled(v209, OS_LOG_TYPE_DEBUG);
                    *(_DWORD *)oslog = 136315138;
                    *(_QWORD *)&oslog[4] = v196;
                    v216 = (void *)_os_log_send_and_compose_impl();
                    v217 = v434;
                    if (v216)
                      free(v216);
                    goto LABEL_408;
                  }
                  v210 = _os_log_pack_size();
                  v211 = operator new(v210, (std::align_val_t)8uLL);
                  v212 = (_QWORD *)operator new();
                  *v212 = &off_24C9ABB80;
                  v212[1] = 0;
                  v212[2] = 0;
                  v212[3] = v211;
                  *(_QWORD *)&v444 = v211;
                  *((_QWORD *)&v444 + 1) = v211;
                  *(_QWORD *)&v445[16] = 0;
                  *(_OWORD *)v445 = (unint64_t)v212;
                  v213 = strlen(v196);
                  if (v213 > 0x7FFFFFFFFFFFFFF7)
                    sub_20E860B7C();
                  v214 = v213;
                  if (v213 >= 0x17)
                  {
                    v218 = (v213 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v213 | 7) != 0x17)
                      v218 = v213 | 7;
                    v219 = v218 + 1;
                    v215 = (uint64_t *)operator new(v218 + 1);
                    *((_QWORD *)&v465 + 1) = v219 | 0x8000000000000000;
                    v464 = v215;
                    *(_QWORD *)&v465 = v214;
                  }
                  else
                  {
                    HIBYTE(v465) = v213;
                    v215 = (uint64_t *)&v464;
                    if (!v213)
                    {
LABEL_347:
                      *((_BYTE *)v215 + v214) = 0;
                      v220 = (uint64_t)v464;
                      v533[0] = v465;
                      *(_QWORD *)((char *)v533 + 7) = *(_QWORD *)((char *)&v465 + 7);
                      v221 = HIBYTE(v465);
                      v222 = operator new(0x38uLL);
                      v222[1] = 0;
                      v222[2] = 0;
                      v222[3] = off_24C9ABC20;
                      *v222 = &off_24C9ABBD0;
                      v223 = v533[0];
                      v222[4] = v220;
                      v222[5] = v223;
                      *(_QWORD *)((char *)v222 + 47) = *(_QWORD *)((char *)v533 + 7);
                      *((_BYTE *)v222 + 55) = v221;
                      v533[0] = 0;
                      *(_QWORD *)((char *)v533 + 7) = 0;
                      v224 = *(std::__shared_weak_count **)&v445[16];
                      *(_QWORD *)&v445[8] = v222 + 3;
                      *(_QWORD *)&v445[16] = v222;
                      if (v224)
                      {
                        v225 = (unint64_t *)&v224->__shared_owners_;
                        do
                          v226 = __ldaxr(v225);
                        while (__stlxr(v226 - 1, v225));
                        if (!v226)
                        {
                          ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
                          std::__shared_weak_count::__release_weak(v224);
                        }
                      }
                      *(_OWORD *)oslog = v444;
                      *(_QWORD *)&oslog[16] = *(_QWORD *)v445;
                      if (*(_QWORD *)v445)
                      {
                        v227 = (unint64_t *)(*(_QWORD *)v445 + 8);
                        do
                          v228 = __ldxr(v227);
                        while (__stxr(v228 + 1, v227));
                      }
                      v528 = *(_OWORD *)&v445[8];
                      if (*(_QWORD *)&v445[16])
                      {
                        v229 = (unint64_t *)(*(_QWORD *)&v445[16] + 8);
                        do
                          v230 = __ldxr(v229);
                        while (__stxr(v230 + 1, v229));
                        v529 = *(void **)&v445[8];
                        do
                          v231 = __ldaxr(v229);
                        while (__stlxr(v231 - 1, v229));
                        if (!v231)
                        {
                          (*(void (**)(_QWORD))(**(_QWORD **)&v445[16] + 16))(*(_QWORD *)&v445[16]);
                          std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v445[16]);
                        }
                      }
                      else
                      {
                        v529 = *(void **)&v445[8];
                      }
                      if (*(_QWORD *)v445)
                      {
                        v232 = (unint64_t *)(*(_QWORD *)v445 + 8);
                        do
                          v233 = __ldaxr(v232);
                        while (__stlxr(v233 - 1, v232));
                        if (!v233)
                        {
                          (*(void (**)(_QWORD))(**(_QWORD **)v445 + 16))(*(_QWORD *)v445);
                          std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)v445);
                        }
                      }
                      v234 = *(_QWORD *)oslog;
                      if (*((char *)v529 + 31) >= 0)
                        v235 = (char *)v529 + 8;
                      else
                        v235 = (char *)*((_QWORD *)v529 + 1);
                      v236 = _os_log_pack_fill();
                      *(_DWORD *)v236 = 136315138;
                      *(_QWORD *)(v236 + 4) = v235;
                      v237 = operator new();
                      v238 = *(unsigned __int8 *)(v197 + 39);
                      v239 = v431;
                      if ((v238 & 0x80u) != 0)
                      {
                        v239 = *(const char **)(v197 + 16);
                        v238 = *(_QWORD *)(v197 + 24);
                      }
                      *(_QWORD *)v237 = v234;
                      *(_OWORD *)(v237 + 8) = *(_OWORD *)&oslog[8];
                      *(_QWORD *)&oslog[8] = 0;
                      *(_QWORD *)&oslog[16] = 0;
                      *(_OWORD *)(v237 + 24) = v528;
                      v528 = 0uLL;
                      *(_QWORD *)(v237 + 40) = v239;
                      *(_QWORD *)(v237 + 48) = v238;
                      *(_BYTE *)(v237 + 56) = 2;
                      v464 = 0;
                      *(_QWORD *)&v444 = v237;
                      (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v167 + 24) + 40))(*(_QWORD *)(v167 + 24), &v444);
                      v240 = v444;
                      *(_QWORD *)&v444 = 0;
                      v217 = v434;
                      if (v240)
                      {
                        v241 = *(std::__shared_weak_count **)(v240 + 32);
                        if (v241)
                        {
                          v242 = (unint64_t *)&v241->__shared_owners_;
                          do
                            v243 = __ldaxr(v242);
                          while (__stlxr(v243 - 1, v242));
                          if (!v243)
                          {
                            ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
                            std::__shared_weak_count::__release_weak(v241);
                          }
                        }
                        v244 = *(std::__shared_weak_count **)(v240 + 16);
                        if (v244)
                        {
                          v245 = (unint64_t *)&v244->__shared_owners_;
                          do
                            v246 = __ldaxr(v245);
                          while (__stlxr(v246 - 1, v245));
                          if (!v246)
                          {
                            ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
                            std::__shared_weak_count::__release_weak(v244);
                          }
                        }
                        MEMORY[0x212BC6398](v240, 0x10F0C40B62ED6C6);
                        v247 = (uint64_t)v464;
                        v464 = 0;
                        if (v247)
                        {
                          v248 = *(std::__shared_weak_count **)(v247 + 32);
                          if (v248)
                          {
                            v249 = (unint64_t *)&v248->__shared_owners_;
                            do
                              v250 = __ldaxr(v249);
                            while (__stlxr(v250 - 1, v249));
                            if (!v250)
                            {
                              ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
                              std::__shared_weak_count::__release_weak(v248);
                            }
                          }
                          v251 = *(std::__shared_weak_count **)(v247 + 16);
                          if (v251)
                          {
                            v252 = (unint64_t *)&v251->__shared_owners_;
                            do
                              v253 = __ldaxr(v252);
                            while (__stlxr(v253 - 1, v252));
                            if (!v253)
                            {
                              ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
                              std::__shared_weak_count::__release_weak(v251);
                            }
                          }
                          MEMORY[0x212BC6398](v247, 0x10F0C40B62ED6C6);
                        }
                      }
                      v254 = (std::__shared_weak_count *)*((_QWORD *)&v528 + 1);
                      if (*((_QWORD *)&v528 + 1))
                      {
                        v255 = (unint64_t *)(*((_QWORD *)&v528 + 1) + 8);
                        do
                          v256 = __ldaxr(v255);
                        while (__stlxr(v256 - 1, v255));
                        if (!v256)
                        {
                          ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
                          std::__shared_weak_count::__release_weak(v254);
                        }
                      }
                      v257 = *(std::__shared_weak_count **)&oslog[16];
                      if (*(_QWORD *)&oslog[16])
                      {
                        v258 = (unint64_t *)(*(_QWORD *)&oslog[16] + 8);
                        do
                          v259 = __ldaxr(v258);
                        while (__stlxr(v259 - 1, v258));
                        if (!v259)
                        {
                          ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
                          std::__shared_weak_count::__release_weak(v257);
                        }
                      }
LABEL_408:
                      if (v217)
                      {
                        v260 = (const char *)__dst;
                        if (v458 < 0)
                          v260 = (const char *)__dst[0];
                        sub_20E8C003C((uint64_t)&v450, "%s", v260);
                        sub_20E863570((uint64_t)&v450);
                      }
                      sub_20E863570((uint64_t)&v450);
                      v261 = v454;
                      if (v454)
                      {
                        v262 = (unint64_t *)&v454->__shared_owners_;
                        do
                          v263 = __ldaxr(v262);
                        while (__stlxr(v263 - 1, v262));
                        if (!v263)
                        {
                          ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
                          std::__shared_weak_count::__release_weak(v261);
                        }
                      }
                      if (SHIBYTE(v458) < 0)
                        operator delete(__dst[0]);
                      *(_QWORD *)object = *MEMORY[0x24BEDB7F0];
                      v264 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                      *(_QWORD *)&object[*(_QWORD *)(*(_QWORD *)object - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                      *(_QWORD *)&object[16] = v264;
                      *(_QWORD *)&object[24] = MEMORY[0x24BEDB848] + 16;
                      if ((object[111] & 0x80000000) != 0)
                        operator delete(*(void **)&object[88]);
                      std::streambuf::~streambuf();
                      std::iostream::~basic_iostream();
                      MEMORY[0x212BC6290](&object[128]);
                      goto LABEL_422;
                    }
                  }
                  memcpy(v215, v196, v214);
                  goto LABEL_347;
                }
              }
              memmove(v206, v198, v199);
              goto LABEL_328;
            }
          }
          memmove(v203, v201, v202);
          goto LABEL_320;
        }
      }
      memmove(v169, v193, v168);
      goto LABEL_299;
    }
  }
LABEL_422:
  sub_20FBD56B0(*v441, 1u, (_DWORD *)(v3 + 8184), v3 + 11640, 1);
  if (*(_BYTE *)(v3 + 1929))
    sub_20FBD94F8(v3 + 11608, v3 + 11640);
  sub_20FC87F6C(v3 + 11640, (float64x2_t *)oslog);
  v265 = **(unsigned int **)(v3 + 2480);
  v266 = *(__int128 **)(v3 + 2280);
  v267 = *v266;
  v268 = v266[1];
  v269 = v266[3];
  v270 = (std::__shared_weak_count *)*((_QWORD *)v266 + 8);
  v452 = v266[2];
  v453 = v269;
  v451 = v268;
  v450 = v267;
  v271 = v266[9];
  *(_QWORD *)&v268 = *((_QWORD *)v266 + 20);
  v454 = v270;
  v456 = v268;
  v455 = v271;
  v272 = *(__int128 *)((char *)v266 + 168);
  v266 = (__int128 *)((char *)v266 + 168);
  v273 = v266[1];
  v274 = v266[2];
  v275 = v266[3];
  v447 = *((_QWORD *)v266 + 8);
  *(_OWORD *)&v445[16] = v274;
  v446 = v275;
  v444 = v272;
  *(_OWORD *)v445 = v273;
  v276 = v266[9];
  v449 = *((_QWORD *)v266 + 20);
  v448 = v276;
  sub_20FC8564C(v265);
  if (!*(_BYTE *)(v3 + 11536))
  {
    *(_QWORD *)(v3 + 8376) = *(_QWORD *)object;
    *(_OWORD *)(v3 + 8448) = *(_OWORD *)&object[72];
    *(_OWORD *)(v3 + 8464) = *(_OWORD *)&object[88];
    *(_OWORD *)(v3 + 8480) = *(_OWORD *)&object[104];
    *(_OWORD *)(v3 + 8496) = *(_OWORD *)&object[120];
    *(_OWORD *)(v3 + 8384) = *(_OWORD *)&object[8];
    *(_OWORD *)(v3 + 8400) = *(_OWORD *)&object[24];
    *(_OWORD *)(v3 + 8416) = *(_OWORD *)&object[40];
    *(_OWORD *)(v3 + 8432) = *(_OWORD *)&object[56];
    memcpy((void *)(v3 + 8512), &object[136], 0x120uLL);
    *(_BYTE *)(v3 + 8800) = 0;
    *(_BYTE *)(v3 + 8872) = 0;
    v277 = v473;
    if (v473)
    {
      *(_QWORD *)(v3 + 8816) = v468;
      *(_OWORD *)(v3 + 8824) = v469;
      v278 = v472;
      *(_QWORD *)(v3 + 8840) = v470;
      *(_OWORD *)(v3 + 8800) = v467;
      v468 = 0;
      v467 = 0uLL;
      *(_QWORD *)(v3 + 8864) = v278;
      *(_OWORD *)(v3 + 8848) = v471;
      *(_BYTE *)(v3 + 8872) = 1;
    }
    *(_BYTE *)(v3 + 8880) = 0;
    *(_BYTE *)(v3 + 11528) = 0;
    if (v526[648])
    {
      v279 = v474;
      *(_QWORD *)(v3 + 8896) = v475;
      *(_OWORD *)(v3 + 8880) = v279;
      *(_OWORD *)(v3 + 8904) = v476;
      *(_QWORD *)(v3 + 8920) = v477;
      v280 = v479;
      *(_OWORD *)(v3 + 8928) = v478;
      *(_OWORD *)(v3 + 8944) = v280;
      v281 = v481;
      *(_OWORD *)(v3 + 8960) = v480;
      v282 = v482;
      v283 = v483;
      *(_QWORD *)(v3 + 9024) = v484;
      *(_OWORD *)(v3 + 9008) = v283;
      *(_OWORD *)(v3 + 8992) = v282;
      *(_OWORD *)(v3 + 8976) = v281;
      v284 = v485;
      v285 = v486;
      v286 = v487;
      v287 = v488;
      *(_QWORD *)(v3 + 9096) = v489;
      *(_OWORD *)(v3 + 9064) = v286;
      *(_OWORD *)(v3 + 9080) = v287;
      *(_OWORD *)(v3 + 9032) = v284;
      *(_OWORD *)(v3 + 9048) = v285;
      v288 = v491;
      *(_OWORD *)(v3 + 9104) = v490;
      v289 = v492;
      v290 = v493;
      *(_QWORD *)(v3 + 9168) = v494;
      *(_OWORD *)(v3 + 9152) = v290;
      *(_OWORD *)(v3 + 9136) = v289;
      *(_OWORD *)(v3 + 9120) = v288;
      v291 = v495;
      v292 = v496;
      v293 = v497;
      v294 = v498;
      *(_QWORD *)(v3 + 9240) = v499;
      *(_OWORD *)(v3 + 9208) = v293;
      *(_OWORD *)(v3 + 9224) = v294;
      *(_OWORD *)(v3 + 9176) = v291;
      *(_OWORD *)(v3 + 9192) = v292;
      v295 = v501;
      *(_OWORD *)(v3 + 9248) = v500;
      v296 = v502;
      v297 = v503;
      *(_QWORD *)(v3 + 9312) = v504;
      *(_OWORD *)(v3 + 9296) = v297;
      *(_OWORD *)(v3 + 9280) = v296;
      *(_OWORD *)(v3 + 9264) = v295;
      v298 = v505;
      v299 = v506;
      v300 = v507;
      v301 = v508;
      *(_QWORD *)(v3 + 9384) = v509;
      *(_OWORD *)(v3 + 9352) = v300;
      *(_OWORD *)(v3 + 9368) = v301;
      *(_OWORD *)(v3 + 9320) = v298;
      *(_OWORD *)(v3 + 9336) = v299;
      v302 = v511;
      *(_OWORD *)(v3 + 9392) = v510;
      v303 = v512;
      v304 = v513;
      *(_QWORD *)(v3 + 9456) = v514;
      *(_OWORD *)(v3 + 9440) = v304;
      *(_OWORD *)(v3 + 9424) = v303;
      *(_OWORD *)(v3 + 9408) = v302;
      *(_OWORD *)(v3 + 9464) = v515;
      v305 = v516;
      v306 = v517;
      v307 = v518;
      *(_QWORD *)(v3 + 9528) = v519;
      *(_OWORD *)(v3 + 9512) = v307;
      *(_OWORD *)(v3 + 9496) = v306;
      *(_OWORD *)(v3 + 9480) = v305;
      memcpy((void *)(v3 + 9536), v520, 0x288uLL);
      *(_OWORD *)(v3 + 10184) = v521;
      *(_QWORD *)(v3 + 10200) = v522;
      *(_OWORD *)(v3 + 10208) = v523;
      *(_QWORD *)(v3 + 10224) = v524;
      memcpy((void *)(v3 + 10232), v525, 0x288uLL);
      memcpy((void *)(v3 + 10880), v526, 0x288uLL);
      *(_BYTE *)(v3 + 11528) = 1;
    }
    *(_BYTE *)(v3 + 11536) = 1;
    if (!v277)
      goto LABEL_434;
    goto LABEL_432;
  }
  sub_20F13D1BC(v3 + 8376, (uint64_t)object);
  if (v473)
  {
LABEL_432:
    if ((_QWORD)v467)
    {
      *((_QWORD *)&v467 + 1) = v467;
      operator delete((void *)v467);
    }
  }
LABEL_434:
  kdebug_trace();
LABEL_435:
  kdebug_trace();
  if (!v437)
    goto LABEL_447;
  v308 = (_BYTE *)*v436;
  v309 = 8;
  if (!*(_BYTE *)*v436)
    v309 = 16;
  v310 = *(_QWORD *)&v308[v309];
  if (*(_BYTE *)*v436)
    v311 = v310 == 0;
  else
    v311 = 1;
  if (!v311)
  {
    if (*(_QWORD *)(*((_QWORD *)v308 + 1) + 152) == *(_QWORD *)(*((_QWORD *)v308 + 1) + 160))
      goto LABEL_447;
    goto LABEL_446;
  }
  if (*(_QWORD *)(*((_QWORD *)v308 + 2) + 152) != *(_QWORD *)(*((_QWORD *)v308 + 2) + 160))
  {
LABEL_446:
    v312 = **(_QWORD ***)(v3 + 7952);
    v313 = *(_OWORD *)(v3 + 11704);
    *(_OWORD *)(v3 + 14984) = *(_OWORD *)(v3 + 11688);
    *(_OWORD *)(v3 + 15000) = v313;
    *(_OWORD *)(v3 + 15016) = *(_OWORD *)(v3 + 11720);
    sub_20F38F148(v3 + 14984, v312);
    v314 = *(_QWORD *)(v3 + 536);
    v315 = *(_QWORD *)(v3 + 592);
    v316 = cos(*(double *)(v3 + 568) * 0.0174532925);
    v317 = *(_QWORD *)(v3 + 1800);
    *(_QWORD *)object = v314;
    *(_QWORD *)&object[8] = v315;
    *(long double *)&object[16] = v316;
    *(_OWORD *)&object[24] = xmmword_2102DCC90;
    *(_DWORD *)&object[40] = v317;
    object[44] = 0;
    sub_20F894128(v3, (_OWORD *)(v3 + 14984), 1, object);
  }
LABEL_447:
  v318 = *(uint64_t **)(v3 + 12400);
  for (n = *(uint64_t **)(v3 + 12408); v318 != n; *(_BYTE *)(v323 + 56) = 1)
  {
    if (*(_BYTE *)(*v318 + 488))
      v320 = *v318 + 40;
    else
      v320 = 0;
    *(_WORD *)(v320 + 57) = 0;
    v321 = *v318++;
    v322 = v321 + 40;
    if (*(_BYTE *)(v321 + 488))
      v323 = v322;
    else
      v323 = 0;
  }
  v324 = *(uint64_t **)(v3 + 14888);
  for (ii = *(uint64_t **)(v3 + 14896); v324 != ii; *(_BYTE *)(v330 + 504) = 1)
  {
    if (*(_BYTE *)(*v324 + 968))
      v326 = *v324 + 40;
    else
      v326 = 0;
    *(_WORD *)(v326 + 57) = 0;
    if (*(_BYTE *)(*v324 + 968))
      v327 = *v324 + 40;
    else
      v327 = 0;
    *(_WORD *)(v327 + 505) = 0;
    v328 = *v324++;
    v329 = v328 + 40;
    if (*(_BYTE *)(v328 + 968))
      v330 = v329;
    else
      v330 = 0;
    *(_BYTE *)(v330 + 56) = 1;
  }
  v331 = *v441;
  v333 = (uint64_t)&(*v441)[1].i64[1];
  v332 = *(void **)v333;
  v331->i64[0] = 0;
  v331->i64[1] = 0;
  v331[1].i64[0] = 0;
  if (v332)
  {
    v331[2].i64[0] = (uint64_t)v332;
    operator delete(v332);
    *(_QWORD *)v333 = 0;
    *(_QWORD *)(v333 + 8) = 0;
    *(_QWORD *)(v333 + 16) = 0;
  }
  v335 = v331 + 3;
  v334 = (void *)v331[3].i64[0];
  *(_QWORD *)v333 = 0;
  *(_QWORD *)(v333 + 8) = 0;
  *(_QWORD *)(v333 + 16) = 0;
  if (v334)
  {
    v331[3].i64[1] = (uint64_t)v334;
    operator delete(v334);
    v335->i64[0] = 0;
    v331[3].i64[1] = 0;
    v331[4].i64[0] = 0;
  }
  v337 = &v331[4].i64[1];
  v336 = (void *)v331[4].i64[1];
  v335->i64[0] = 0;
  v331[3].i64[1] = 0;
  v331[4].i64[0] = 0;
  if (v336)
  {
    v331[5].i64[0] = (uint64_t)v336;
    operator delete(v336);
    *v337 = 0;
    v331[5].i64[0] = 0;
    v331[5].i64[1] = 0;
  }
  v331[8].i64[1] = 0;
  *(int64x2_t *)((char *)&v331[6] + 8) = 0u;
  *(int64x2_t *)((char *)&v331[7] + 8) = 0u;
  *(_OWORD *)v337 = 0u;
  *(int64x2_t *)((char *)&v331[5] + 8) = 0u;
  (*v441)[9].i64[0] = 0;
  v338 = *(_DWORD *)(v3 + 7672);
  *(_DWORD *)(v3 + 5296) = v338;
  v339 = *(_DWORD *)(v3 + 7676);
  *(_DWORD *)(v3 + 5304) = v339;
  if (v438[3])
  {
    *(_DWORD *)(v3 + 5308) = v339;
    *(_DWORD *)(v3 + 5300) = v338;
  }
  v340 = *(double **)(v3 + 6552);
  v341 = **(unsigned __int8 **)(v3 + 8216);
  v342 = v340[5] + v340[5] + v340[6] + v340[6];
  *(double *)(v3 + 5216) = v342;
  if (v341)
    v343 = v340[19] + v340[19];
  else
    v343 = 0.0;
  v344 = v340[16] + v340[16] + v343 + v340[17] + v340[17];
  *(double *)(v3 + 5200) = v344;
  v345 = v340[9] + v340[9];
  *(double *)(v3 + 5208) = v345;
  v346 = v340[10] + v340[10];
  *(double *)(v3 + 5248) = v346;
  v347 = v340[7] + v340[7] + v340[8] + v340[8];
  *(double *)(v3 + 5224) = v347;
  v348 = *v340 + *v340 + v340[2] + v340[2];
  *(double *)(v3 + 5240) = v348;
  *(double *)(v3 + 5256) = v342 + v345 + v344 + v346 + v347 + v348;
  v349 = *(_DWORD *)(v3 + 5476) != 0;
  v350 = sub_20FD32664((_QWORD *)(v3 + 2656), (_QWORD *)(v3 + 2280));
  v355 = v350;
  v356 = (_QWORD *)v440[3];
  v358 = (double *)v356[53];
  v357 = v356[54];
  if ((unint64_t)v358 >= v357)
  {
    v360 = (double *)v356[52];
    v361 = ((char *)v358 - (char *)v360) >> 4;
    v362 = v361 + 1;
    if ((unint64_t)(v361 + 1) >> 60)
      sub_20E867F44();
    v363 = v357 - (_QWORD)v360;
    if (v363 >> 3 > v362)
      v362 = v363 >> 3;
    if ((unint64_t)v363 >= 0x7FFFFFFFFFFFFFF0)
      v364 = 0xFFFFFFFFFFFFFFFLL;
    else
      v364 = v362;
    if (v364)
    {
      if (v364 >> 60)
        sub_20E877A38();
      v365 = (char *)operator new(16 * v364);
    }
    else
    {
      v365 = 0;
    }
    v366 = &v365[16 * v361];
    *(double *)v366 = v355;
    v366[8] = v349;
    v359 = (double *)(v366 + 16);
    if (v358 != v360)
    {
      do
      {
        v367 = *((_QWORD *)v358 - 2);
        v358 -= 2;
        v368 = *((_BYTE *)v358 + 8);
        *((_QWORD *)v366 - 2) = v367;
        v366 -= 16;
        v366[8] = v368;
      }
      while (v358 != v360);
      v358 = (double *)v356[52];
    }
    v356[52] = v366;
    v356[53] = v359;
    v356[54] = &v365[16 * v364];
    if (v358)
      operator delete(v358);
  }
  else
  {
    *v358 = v350;
    *((_BYTE *)v358 + 8) = v349;
    v359 = v358 + 2;
  }
  v356[53] = v359;
  sub_20F89A778((uint64_t)object, (_QWORD *)v3, v439, (char **)(v3 + 14864), HIDWORD(v463), v462, SHIDWORD(v460), v460, v461, v351, v352, v353, v354);
  v369 = v440[3];
  v370 = *(_OWORD *)object;
  v371 = *(_OWORD *)&object[32];
  *(_OWORD *)(v369 + 16) = *(_OWORD *)&object[16];
  *(_OWORD *)(v369 + 32) = v371;
  *(_OWORD *)v369 = v370;
  v372 = *(_OWORD *)&object[48];
  v373 = *(_OWORD *)&object[64];
  v374 = *(_OWORD *)&object[96];
  *(_OWORD *)(v369 + 80) = *(_OWORD *)&object[80];
  *(_OWORD *)(v369 + 96) = v374;
  *(_OWORD *)(v369 + 48) = v372;
  *(_OWORD *)(v369 + 64) = v373;
  v375 = *(_OWORD *)&object[112];
  v376 = *(_OWORD *)&object[128];
  v377 = *(_OWORD *)&object[160];
  *(_OWORD *)(v369 + 144) = *(_OWORD *)&object[144];
  *(_OWORD *)(v369 + 160) = v377;
  *(_OWORD *)(v369 + 112) = v375;
  *(_OWORD *)(v369 + 128) = v376;
  v378 = *(_OWORD *)&object[176];
  v379 = *(_OWORD *)&object[192];
  v380 = *(_OWORD *)&object[208];
  *(_QWORD *)(v369 + 224) = *(_QWORD *)&object[224];
  *(_OWORD *)(v369 + 192) = v379;
  *(_OWORD *)(v369 + 208) = v380;
  *(_OWORD *)(v369 + 176) = v378;
  sub_20EB0F138(v369 + 232, (uint64_t *)&object[232]);
  v381 = *(_OWORD *)&object[272];
  v382 = *(_OWORD *)&object[288];
  v383 = *(_OWORD *)&object[304];
  *(_OWORD *)(v369 + 316) = *(_OWORD *)&object[316];
  *(_OWORD *)(v369 + 288) = v382;
  *(_OWORD *)(v369 + 304) = v383;
  *(_OWORD *)(v369 + 272) = v381;
  if (*(_QWORD *)(v369 + 360))
  {
    v384 = *(_QWORD **)(v369 + 352);
    if (v384)
    {
      do
      {
        v385 = (_QWORD *)*v384;
        operator delete(v384);
        v384 = v385;
      }
      while (v385);
    }
    *(_QWORD *)(v369 + 352) = 0;
    v386 = *(_QWORD *)(v369 + 344);
    if (v386)
    {
      for (jj = 0; jj != v386; ++jj)
        *(_QWORD *)(*(_QWORD *)(v369 + 336) + 8 * jj) = 0;
    }
    *(_QWORD *)(v369 + 360) = 0;
  }
  v388 = *(_QWORD *)&object[336];
  *(_QWORD *)&object[336] = 0;
  v389 = *(void **)(v369 + 336);
  *(_QWORD *)(v369 + 336) = v388;
  if (v389)
    operator delete(v389);
  *(_QWORD *)(v369 + 344) = *(_QWORD *)&object[344];
  *(_QWORD *)&object[344] = 0;
  v390 = *(_QWORD *)&object[360];
  v391 = *(_QWORD *)&object[352];
  *(_QWORD *)(v369 + 360) = *(_QWORD *)&object[360];
  *(_DWORD *)(v369 + 368) = *(_DWORD *)&object[368];
  *(_QWORD *)(v369 + 352) = v391;
  if (v390)
  {
    v392 = *(_QWORD *)(v391 + 8);
    v393 = *(_QWORD *)(v369 + 344);
    if ((v393 & (v393 - 1)) != 0)
    {
      if (v392 >= v393)
        v392 %= v393;
    }
    else
    {
      v392 &= v393 - 1;
    }
    *(_QWORD *)(*(_QWORD *)(v369 + 336) + 8 * v392) = v369 + 352;
    *(_QWORD *)&object[352] = 0;
    *(_QWORD *)&object[360] = 0;
  }
  if (*(_QWORD *)(v369 + 400))
  {
    v394 = *(_QWORD **)(v369 + 392);
    if (v394)
    {
      do
      {
        v395 = (_QWORD *)*v394;
        operator delete(v394);
        v394 = v395;
      }
      while (v395);
    }
    *(_QWORD *)(v369 + 392) = 0;
    v396 = *(_QWORD *)(v369 + 384);
    if (v396)
    {
      for (kk = 0; kk != v396; ++kk)
        *(_QWORD *)(*(_QWORD *)(v369 + 376) + 8 * kk) = 0;
    }
    *(_QWORD *)(v369 + 400) = 0;
  }
  v398 = *(_QWORD *)&object[376];
  *(_QWORD *)&object[376] = 0;
  v399 = *(void **)(v369 + 376);
  *(_QWORD *)(v369 + 376) = v398;
  if (v399)
    operator delete(v399);
  *(_QWORD *)(v369 + 384) = *(_QWORD *)&object[384];
  *(_QWORD *)&object[384] = 0;
  v400 = *(_QWORD *)&object[400];
  v401 = *(_QWORD *)&object[392];
  *(_QWORD *)(v369 + 400) = *(_QWORD *)&object[400];
  *(_DWORD *)(v369 + 408) = *(_DWORD *)&object[408];
  *(_QWORD *)(v369 + 392) = v401;
  if (v400)
  {
    v402 = *(_QWORD *)(v401 + 8);
    v403 = *(_QWORD *)(v369 + 384);
    if ((v403 & (v403 - 1)) != 0)
    {
      if (v402 >= v403)
        v402 %= v403;
    }
    else
    {
      v402 &= v403 - 1;
    }
    *(_QWORD *)(*(_QWORD *)(v369 + 376) + 8 * v402) = v369 + 392;
    *(_QWORD *)&object[392] = 0;
    *(_QWORD *)&object[400] = 0;
  }
  result = sub_20F04F084(object);
  if (*(_BYTE *)(v3 + 1932))
  {
    *(_DWORD *)(v3 + 12424) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 7952) + 16) + 16);
    *(_DWORD *)(v3 + 12428) = (*(_QWORD *)(v3 + 12408) - *(_QWORD *)(v3 + 12400)) >> 3;
    *(_DWORD *)(v3 + 12432) = (*(_QWORD *)(v3 + 14848) - *(_QWORD *)(v3 + 14840)) >> 3;
    *(_DWORD *)(v3 + 12436) = (*(_QWORD *)(v440[1] + 8) - *(_QWORD *)v440[1]) >> 4;
    v406 = *(_QWORD *)(v3 + 12448);
    if (v406)
      return sub_20F806650((uint64_t *)(v3 + 12424), v406, v405);
  }
  return result;
}

void sub_20FBD1DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  char a69;

  if (LOBYTE(STACK[0xE88]) && SLOBYTE(STACK[0xE87]) < 0)
    operator delete((void *)STACK[0xE70]);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a52);
  if (a69 < 0)
    operator delete(a64);
  sub_20E863784((uint64_t)&STACK[0x210]);
  _Unwind_Resume(a1);
}

void sub_20FBD1F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  sub_20E86E8C4(&a52);
  sub_20E86E8C4(&a39);
  sub_20E86E658((uint64_t)&STACK[0x210]);
  sub_20E863714((uint64_t)&STACK[0xE70]);
  _Unwind_Resume(a1);
}

void sub_20FBD1FD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)&STACK[0xE70]);
  _Unwind_Resume(a1);
}

void sub_20FBD1FFC(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0xE70]);
  _Unwind_Resume(a1);
}

void sub_20FBD2028(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0xE70]);
  _Unwind_Resume(a1);
}

void sub_20FBD2048(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x230]) && SLOBYTE(STACK[0x22F]) < 0)
    operator delete((void *)STACK[0x218]);
  if (STACK[0x210])
    os_release((void *)STACK[0x210]);
  sub_20E863714((uint64_t)&STACK[0xE70]);
  _Unwind_Resume(a1);
}

void sub_20FBD2094(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20FBD20B4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t j;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  const char *v31;
  uint64_t v32;
  const void *v33;
  uint64_t v34;
  uint64_t v35;
  void **v36;
  uint64_t v37;
  const char *v38;
  size_t v39;
  unsigned __int8 v40;
  const char *v41;
  size_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  void *p_p;
  const char *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  size_t v52;
  void *v53;
  _QWORD *v54;
  size_t v55;
  size_t v56;
  char *p_category;
  int v58;
  void *v59;
  int v60;
  unsigned __int8 v61;
  const char *v62;
  size_t v63;
  const char *v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  size_t v72;
  std::__shared_weak_count_vtbl *v73;
  std::__shared_weak_count *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  int v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  void *v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t *v104;
  uint64_t *v105;
  uint64_t *v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _DWORD *v114;
  uint64_t v115;
  uint64_t v116;
  _DWORD *v117;
  uint64_t v118;
  __int32 *v119;
  __int32 *v120;
  __int32 *v121;
  unsigned int v122;
  char *v123;
  char *v124;
  unint64_t v125;
  unint64_t v126;
  unsigned int *v127;
  char *v128;
  unsigned int v129;
  uint64_t v130;
  char *v131;
  unint64_t v132;
  _DWORD *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  _BYTE *v140;
  unsigned int *v141;
  _DWORD *v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  _OWORD *v147;
  char *v148;
  uint64_t v149;
  __int128 v150;
  unsigned int v151;
  uint64_t v152;
  uint64_t k;
  uint64_t *v154;
  double v155;
  double v156;
  double v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  uint64_t v162;
  double v163;
  uint64_t v164;
  _QWORD *v165;
  _QWORD *v166;
  uint64_t v167;
  uint64_t n;
  uint64_t v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  _QWORD *v176;
  _QWORD *v177;
  _QWORD *v178;
  uint64_t v179;
  _DWORD *v180;
  int v181;
  unsigned int v182;
  BOOL v183;
  _QWORD *v184;
  _QWORD *v185;
  uint64_t v186;
  uint64_t m;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  __int128 *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  char v196;
  char *v197;
  const char *v198;
  std::__shared_weak_count *v199;
  unint64_t *p_shared_owners;
  unint64_t v201;
  unint64_t *v202;
  unint64_t v203;
  unint64_t *v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t *v207;
  unint64_t v208;
  uint64_t v209;
  char *v210;
  uint64_t v211;
  char *v212;
  uint64_t v213;
  const char *v214;
  void *v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  char *v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  const char *v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  __int128 *v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  std::__shared_weak_count *v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  int v252;
  uint64_t v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  BOOL v286;
  _QWORD *v287;
  __int128 v288;
  uint64_t v289;
  uint64_t v290;
  long double v291;
  uint64_t v292;
  uint64_t *v293;
  uint64_t *ii;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t *v299;
  uint64_t *jj;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  void *v307;
  uint64_t v308;
  void *v309;
  _QWORD *v310;
  void *v311;
  _QWORD *v312;
  int v313;
  int v314;
  double *v315;
  int v316;
  double v317;
  double v318;
  double v319;
  double v320;
  double v321;
  double v322;
  double v323;
  BOOL v324;
  double v325;
  double v326;
  double v327;
  double v328;
  float64x2_t v329;
  double v330;
  _QWORD *v331;
  unint64_t v332;
  double *v333;
  double *v334;
  double *v335;
  uint64_t v336;
  unint64_t v337;
  uint64_t v338;
  unint64_t v339;
  char *v340;
  char *v341;
  uint64_t v342;
  char v343;
  uint64_t v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  _QWORD *v359;
  _QWORD *v360;
  uint64_t v361;
  uint64_t kk;
  uint64_t v363;
  void *v364;
  uint64_t v365;
  uint64_t v366;
  unint64_t v367;
  unint64_t v368;
  _QWORD *v369;
  _QWORD *v370;
  uint64_t v371;
  uint64_t mm;
  uint64_t v373;
  void *v374;
  uint64_t v375;
  uint64_t v376;
  unint64_t v377;
  unint64_t v378;
  uint64_t *result;
  double v380;
  uint64_t v381;
  _QWORD *v382;
  _QWORD *v383;
  void *v384;
  _BYTE *v385;
  uint64_t v386;
  uint64_t v387;
  BOOL v388;
  int v389;
  unint64_t v390;
  uint64_t v391;
  void **v392;
  uint64_t v393;
  uint64_t *v394;
  uint64_t v395;
  char *v396;
  _QWORD *v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  unint64_t v401;
  size_t prime;
  unint64_t v403;
  uint64_t *v404;
  uint64_t *v405;
  uint64_t v406;
  unsigned int v407;
  char *v408;
  char *v409;
  unint64_t v410;
  unint64_t v411;
  unsigned int *v412;
  char *v413;
  unsigned int v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  unsigned __int8 v418;
  uint64_t v419;
  const char *v420;
  NSObject *v421;
  void **v422;
  uint64_t v423;
  __int128 *v424;
  __int128 v425;
  __int128 v426;
  __int128 v427;
  std::__shared_weak_count *v428;
  __int128 v429;
  __int128 v430;
  __int128 v431;
  __int128 v432;
  __int128 v433;
  __int128 v434;
  int v435;
  uint64_t v436;
  __int128 v437;
  __int128 v438;
  __int128 v439;
  __int128 v440;
  __int128 v441;
  __int128 v442;
  __int128 v443;
  __int128 v444;
  __int128 v445;
  __int128 v446;
  __int128 v447;
  __int128 v448;
  __int128 v449;
  __int128 v450;
  __int128 v451;
  __int128 v452;
  __int128 v453;
  __int128 v454;
  __int128 v455;
  __int128 v456;
  __int128 v457;
  __int128 v458;
  __int128 v459;
  __int128 v460;
  __int128 v461;
  __int128 v462;
  __int128 v463;
  __int128 v464;
  __int128 v465;
  std::runtime_error *exception;
  uint64_t v467;
  uint64_t v468;
  int v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  unint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  void **v484;
  uint64_t v485;
  uint64_t v486;
  const char *v487;
  unint64_t v488;
  _QWORD *v489;
  int v490;
  int v491;
  uint64_t v492;
  int v493;
  uint64_t *v494;
  uint64_t *v495;
  uint64_t *v496;
  void *v497[2];
  _BYTE v498[32];
  __int128 v499;
  uint64_t v500;
  __int128 v501;
  uint64_t v502;
  __int128 v503;
  __int128 v504;
  __int128 v505;
  __int128 v506;
  std::__shared_weak_count *v507;
  __int128 v508;
  uint64_t v509;
  void *__dst[2];
  int64_t v511;
  uint64_t v512;
  _OWORD v513[2];
  int v514;
  uint64_t v515;
  double v516;
  unsigned int v517;
  uint64_t v518;
  char *category;
  __int128 v520;
  _BYTE oslog[424];
  __int128 v522;
  uint64_t v523;
  __int128 v524;
  uint64_t v525;
  __int128 v526;
  uint64_t v527;
  unsigned __int8 v528;
  __int128 v529;
  uint64_t v530;
  __int128 v531;
  uint64_t v532;
  __int128 v533;
  __int128 v534;
  __int128 v535;
  __int128 v536;
  __int128 v537;
  __int128 v538;
  uint64_t v539;
  __int128 v540;
  __int128 v541;
  __int128 v542;
  __int128 v543;
  uint64_t v544;
  __int128 v545;
  __int128 v546;
  __int128 v547;
  __int128 v548;
  uint64_t v549;
  __int128 v550;
  __int128 v551;
  __int128 v552;
  __int128 v553;
  uint64_t v554;
  __int128 v555;
  __int128 v556;
  __int128 v557;
  __int128 v558;
  uint64_t v559;
  __int128 v560;
  __int128 v561;
  __int128 v562;
  __int128 v563;
  uint64_t v564;
  __int128 v565;
  __int128 v566;
  __int128 v567;
  __int128 v568;
  uint64_t v569;
  __int128 v570;
  __int128 v571;
  __int128 v572;
  __int128 v573;
  uint64_t v574;
  _BYTE v575[648];
  __int128 v576;
  uint64_t v577;
  __int128 v578;
  uint64_t v579;
  _BYTE v580[648];
  _BYTE v581[648];
  char v582;
  _BYTE object[24];
  __int128 v584;
  void *__p;
  const char *v586;
  unint64_t v587;
  std::__shared_weak_count *v588;
  const char *v589[5];

  MEMORY[0x24BDAC7A8](a1);
  v589[2] = *(const char **)MEMORY[0x24BDAC8D0];
  v495 = v2;
  v496 = v1;
  v3 = *v2;
  v492 = *v2 + 8800;
  v4 = (_BYTE *)(*v2 + 5313);
  v494 = (uint64_t *)(*v2 + 14840);
  if (v494 != (uint64_t *)*v1)
    sub_20E86811C((_QWORD *)(v3 + 14888), *(char **)(*v1 + 48), *(char **)(*v1 + 56), (uint64_t)(*(_QWORD *)(*v1 + 56) - *(_QWORD *)(*v1 + 48)) >> 3);
  *(_QWORD *)(v3 + 14848) = *(_QWORD *)(v3 + 14840);
  *(_QWORD *)(v3 + 14872) = *(_QWORD *)(v3 + 14864);
  v5 = v3 + 14912;
  *(_QWORD *)(v3 + 14920) = *(_QWORD *)(v3 + 14912);
  *(_QWORD *)(v3 + 14944) = *(_QWORD *)(v3 + 14936);
  v518 = 0;
  v517 = 0;
  v515 = 0;
  v516 = 0.0;
  v6 = (_QWORD *)(v3 + 14960);
  *(_QWORD *)(v3 + 14968) = *(_QWORD *)(v3 + 14960);
  if (*(_BYTE *)(v3 + 5315))
  {
    sub_20F896104(v3);
    if (*(_BYTE *)(v3 + 1932))
    {
      v7 = *(_QWORD *)(v3 + 14840);
      for (i = *(_QWORD *)(v3 + 14848); v7 != i; v7 += 8)
      {
        v9 = *(_QWORD *)(*(_QWORD *)v7 + 32);
        *(_QWORD *)oslog = *(_QWORD *)(*(_QWORD *)v7 + 24);
        *(_QWORD *)&oslog[8] = v9;
        sub_20FBD960C(v3 + 328, *(uint64_t *)oslog, v9, oslog);
      }
    }
    v10 = *v496;
    v11 = (uint64_t *)(*v496 + 24);
    if (v11 != v494)
    {
      sub_20FB42E10(v11, *(char **)(v3 + 14840), *(char **)(v3 + 14848), (uint64_t)(*(_QWORD *)(v3 + 14848) - *(_QWORD *)(v3 + 14840)) >> 3);
      v10 = *v496;
    }
    if (v10 + 48 != v5)
    {
      sub_20E86811C((_QWORD *)(v10 + 48), *(char **)(v3 + 14912), *(char **)(v3 + 14920), (uint64_t)(*(_QWORD *)(v3 + 14920) - *(_QWORD *)(v3 + 14912)) >> 3);
      v10 = *v496;
    }
    if ((_QWORD *)(v10 + 72) != v6)
      sub_20E86811C((_QWORD *)(v10 + 72), *(char **)(v3 + 14960), *(char **)(v3 + 14968), (uint64_t)(*(_QWORD *)(v3 + 14968) - *(_QWORD *)(v3 + 14960)) >> 3);
    kdebug_trace();
    v12 = v496;
    memset(v513, 0, sizeof(v513));
    v514 = 733220904;
    kdebug_trace();
    sub_20F82FD50(&v512);
    if (**(int **)(v512 + 56) > 2
      || (v13 = *(unsigned __int8 *)(v512 + 72),
          v14 = sub_20E8C31DC(v512, "OSLogSurrogateAppender", 1, 0),
          v15 = v14,
          !v13)
      && !v14)
    {
LABEL_373:
      sub_20FBF73C4(*v12, v3 + 5328, v3 + 5352, (_DWORD *)(v3 + 8184), v3 + 11640, 1);
      if (*(_BYTE *)(v3 + 1929))
        sub_20FBD94F8(v3 + 11608, v3 + 11640);
      sub_20FC87F6C(v3 + 11640, (float64x2_t *)object);
      v240 = **(unsigned int **)(v3 + 2480);
      v241 = *(__int128 **)(v3 + 2280);
      v242 = *v241;
      v243 = v241[1];
      v244 = v241[3];
      v245 = (std::__shared_weak_count *)*((_QWORD *)v241 + 8);
      v505 = v241[2];
      v506 = v244;
      v503 = v242;
      v504 = v243;
      v246 = v241[9];
      *(_QWORD *)&v243 = *((_QWORD *)v241 + 20);
      v507 = v245;
      v509 = v243;
      v508 = v246;
      v247 = *(__int128 *)((char *)v241 + 168);
      v241 = (__int128 *)((char *)v241 + 168);
      v248 = v241[1];
      v249 = v241[2];
      v250 = v241[3];
      v500 = *((_QWORD *)v241 + 8);
      *(_OWORD *)&v498[16] = v249;
      v499 = v250;
      *(_OWORD *)v497 = v247;
      *(_OWORD *)v498 = v248;
      v251 = v241[9];
      v502 = *((_QWORD *)v241 + 20);
      v501 = v251;
      sub_20FC8564C(v240);
      if (*(_BYTE *)(v492 + 2736))
      {
        sub_20F13D1BC(v3 + 8376, (uint64_t)oslog);
        if (!v528)
        {
LABEL_385:
          kdebug_trace();
          v107 = 1;
          goto LABEL_386;
        }
      }
      else
      {
        *(_QWORD *)(v3 + 8376) = *(_QWORD *)oslog;
        *(_OWORD *)(v3 + 8448) = *(_OWORD *)&oslog[72];
        *(_OWORD *)(v3 + 8464) = *(_OWORD *)&oslog[88];
        *(_OWORD *)(v3 + 8480) = *(_OWORD *)&oslog[104];
        *(_OWORD *)(v3 + 8496) = *(_OWORD *)&oslog[120];
        *(_OWORD *)(v3 + 8384) = *(_OWORD *)&oslog[8];
        *(_OWORD *)(v3 + 8400) = *(_OWORD *)&oslog[24];
        *(_OWORD *)(v3 + 8416) = *(_OWORD *)&oslog[40];
        *(_OWORD *)(v3 + 8432) = *(_OWORD *)&oslog[56];
        memcpy((void *)(v3 + 8512), &oslog[136], 0x120uLL);
        *(_BYTE *)v492 = 0;
        *(_BYTE *)(v492 + 72) = 0;
        v252 = v528;
        if (v528)
        {
          *(_QWORD *)(v3 + 8816) = v523;
          *(_OWORD *)(v3 + 8824) = v524;
          v253 = v527;
          *(_QWORD *)(v3 + 8840) = v525;
          *(_OWORD *)(v3 + 8800) = v522;
          v523 = 0;
          v522 = 0uLL;
          *(_QWORD *)(v3 + 8864) = v253;
          *(_OWORD *)(v3 + 8848) = v526;
          *(_BYTE *)(v492 + 72) = 1;
        }
        *(_BYTE *)(v492 + 80) = 0;
        *(_BYTE *)(v492 + 2728) = 0;
        if (v582)
        {
          v254 = v529;
          *(_QWORD *)(v492 + 96) = v530;
          *(_OWORD *)(v492 + 80) = v254;
          *(_OWORD *)(v3 + 8904) = v531;
          *(_QWORD *)(v3 + 8920) = v532;
          v255 = v534;
          *(_OWORD *)(v3 + 8928) = v533;
          *(_OWORD *)(v3 + 8944) = v255;
          v256 = v536;
          *(_OWORD *)(v3 + 8960) = v535;
          v257 = v537;
          v258 = v538;
          *(_QWORD *)(v3 + 9024) = v539;
          *(_OWORD *)(v3 + 9008) = v258;
          *(_OWORD *)(v3 + 8992) = v257;
          *(_OWORD *)(v3 + 8976) = v256;
          v259 = v540;
          v260 = v541;
          v261 = v542;
          v262 = v543;
          *(_QWORD *)(v3 + 9096) = v544;
          *(_OWORD *)(v3 + 9064) = v261;
          *(_OWORD *)(v3 + 9080) = v262;
          *(_OWORD *)(v3 + 9032) = v259;
          *(_OWORD *)(v3 + 9048) = v260;
          v263 = v546;
          *(_OWORD *)(v3 + 9104) = v545;
          v264 = v547;
          v265 = v548;
          *(_QWORD *)(v3 + 9168) = v549;
          *(_OWORD *)(v3 + 9152) = v265;
          *(_OWORD *)(v3 + 9136) = v264;
          *(_OWORD *)(v3 + 9120) = v263;
          v266 = v550;
          v267 = v551;
          v268 = v552;
          v269 = v553;
          *(_QWORD *)(v3 + 9240) = v554;
          *(_OWORD *)(v3 + 9208) = v268;
          *(_OWORD *)(v3 + 9224) = v269;
          *(_OWORD *)(v3 + 9176) = v266;
          *(_OWORD *)(v3 + 9192) = v267;
          v270 = v556;
          *(_OWORD *)(v3 + 9248) = v555;
          v271 = v557;
          v272 = v558;
          *(_QWORD *)(v3 + 9312) = v559;
          *(_OWORD *)(v3 + 9296) = v272;
          *(_OWORD *)(v3 + 9280) = v271;
          *(_OWORD *)(v3 + 9264) = v270;
          v273 = v560;
          v274 = v561;
          v275 = v562;
          v276 = v563;
          *(_QWORD *)(v3 + 9384) = v564;
          *(_OWORD *)(v3 + 9352) = v275;
          *(_OWORD *)(v3 + 9368) = v276;
          *(_OWORD *)(v3 + 9320) = v273;
          *(_OWORD *)(v3 + 9336) = v274;
          v277 = v566;
          *(_OWORD *)(v3 + 9392) = v565;
          v278 = v567;
          v279 = v568;
          *(_QWORD *)(v3 + 9456) = v569;
          *(_OWORD *)(v3 + 9440) = v279;
          *(_OWORD *)(v3 + 9424) = v278;
          *(_OWORD *)(v3 + 9408) = v277;
          *(_OWORD *)(v3 + 9464) = v570;
          v280 = v571;
          v281 = v572;
          v282 = v573;
          *(_QWORD *)(v3 + 9528) = v574;
          *(_OWORD *)(v3 + 9512) = v282;
          *(_OWORD *)(v3 + 9496) = v281;
          *(_OWORD *)(v3 + 9480) = v280;
          memcpy((void *)(v3 + 9536), v575, 0x288uLL);
          *(_OWORD *)(v3 + 10184) = v576;
          *(_QWORD *)(v3 + 10200) = v577;
          *(_OWORD *)(v3 + 10208) = v578;
          *(_QWORD *)(v3 + 10224) = v579;
          memcpy((void *)(v3 + 10232), v580, 0x288uLL);
          memcpy((void *)(v3 + 10880), v581, 0x288uLL);
          *(_BYTE *)(v492 + 2728) = 1;
        }
        *(_BYTE *)(v492 + 2736) = 1;
        if (!v252)
          goto LABEL_385;
      }
      if ((_QWORD)v522)
      {
        *((_QWORD *)&v522 + 1) = v522;
        operator delete((void *)v522);
      }
      goto LABEL_385;
    }
    sub_20E863438((uint64_t)oslog);
    sub_20E86A980(&oslog[16], (uint64_t)"BatchMarginalizeFinalize code path", 34);
    if ((oslog[120] & 0x10) != 0)
    {
      v32 = *(_QWORD *)&oslog[112];
      if (*(_QWORD *)&oslog[112] < *(_QWORD *)&oslog[72])
      {
        *(_QWORD *)&oslog[112] = *(_QWORD *)&oslog[72];
        v32 = *(_QWORD *)&oslog[72];
      }
      v33 = *(const void **)&oslog[64];
      v16 = v32 - *(_QWORD *)&oslog[64];
      if ((unint64_t)(v32 - *(_QWORD *)&oslog[64]) > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_93;
    }
    else
    {
      if ((oslog[120] & 8) == 0)
      {
        v16 = 0;
        HIBYTE(v511) = 0;
        v17 = __dst;
        goto LABEL_48;
      }
      v33 = *(const void **)&oslog[40];
      v16 = *(_QWORD *)&oslog[56] - *(_QWORD *)&oslog[40];
      if (*(_QWORD *)&oslog[56] - *(_QWORD *)&oslog[40] > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_93:
        sub_20E860B7C();
    }
    if (v16 >= 0x17)
    {
      v34 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v16 | 7) != 0x17)
        v34 = v16 | 7;
      v35 = v34 + 1;
      v17 = (void **)operator new(v34 + 1);
      __dst[1] = (void *)v16;
      v511 = v35 | 0x8000000000000000;
      __dst[0] = v17;
    }
    else
    {
      HIBYTE(v511) = v16;
      v17 = __dst;
      if (!v16)
      {
LABEL_48:
        *((_BYTE *)v17 + v16) = 0;
        *(_QWORD *)&v503 = &v512;
        *((std::chrono::steady_clock::time_point *)&v503 + 1) = std::chrono::steady_clock::now();
        *(std::chrono::system_clock::time_point *)&v504 = std::chrono::system_clock::now();
        DWORD2(v504) = 2;
        *(_QWORD *)&v505 = "unknown file";
        DWORD2(v505) = 3394;
        *((_QWORD *)&v506 + 1) = 0;
        v507 = 0;
        *(_QWORD *)&v506 = "unknown function";
        if (v511 >= 0)
          v36 = __dst;
        else
          v36 = (void **)__dst[0];
        v37 = *(_QWORD *)v503;
        v38 = (const char *)(*(_QWORD *)v503 + 16);
        v487 = v38;
        if (*(char *)(*(_QWORD *)v503 + 39) < 0)
        {
          v38 = *(const char **)(v37 + 16);
          v39 = *(_QWORD *)(v37 + 24);
        }
        else
        {
          v39 = *(unsigned __int8 *)(*(_QWORD *)v503 + 39);
        }
        v491 = v13;
        v40 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v40 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)object);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
          if ((_BYTE)v584 && (object[23] & 0x80000000) != 0)
            operator delete(*(void **)object);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        if (byte_254A4A4F8[23] >= 0)
          v41 = byte_254A4A4F8;
        else
          v41 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v42 = byte_254A4A4F8[23];
        else
          v42 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)object = os_log_create(v41, v38);
        v43 = &object[8];
        if (v42 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v42 >= 0x17)
        {
          v44 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v42 | 7) != 0x17)
            v44 = v42 | 7;
          v45 = v44 + 1;
          v43 = operator new(v44 + 1);
          *(_QWORD *)&v584 = v45 | 0x8000000000000000;
          *(_QWORD *)&object[8] = v43;
          *(_QWORD *)&object[16] = v42;
        }
        else
        {
          BYTE7(v584) = v42;
          if (!v42)
          {
LABEL_69:
            v43[v42] = 0;
            BYTE8(v584) = 1;
            p_p = &__p;
            if (v39 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            v47 = (const char *)v36;
            if (v39 >= 0x17)
            {
              v49 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v39 | 7) != 0x17)
                v49 = v39 | 7;
              v50 = v49 + 1;
              p_p = operator new(v49 + 1);
              v48 = v15;
              v587 = v50 | 0x8000000000000000;
              __p = p_p;
              v586 = (const char *)v39;
            }
            else
            {
              HIBYTE(v587) = v39;
              v48 = v15;
              if (!v39)
              {
LABEL_77:
                *((_BYTE *)p_p + v39) = 0;
                LOBYTE(v588) = 1;
                v51 = *(NSObject **)object;
                if (SHIBYTE(v587) < 0)
                  operator delete(__p);
                if (BYTE8(v584) && SBYTE7(v584) < 0)
                  operator delete(*(void **)&object[8]);
                if (*(_QWORD *)object)
                  os_release(*(void **)object);
                if (!v48 || !*(_QWORD *)(v48 + 24))
                {
                  os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG);
                  *(_DWORD *)object = 136315138;
                  *(_QWORD *)&object[4] = v47;
                  v59 = (void *)_os_log_send_and_compose_impl();
                  v12 = v496;
                  v60 = v491;
                  if (v59)
                    free(v59);
                  goto LABEL_359;
                }
                v52 = _os_log_pack_size();
                v53 = operator new(v52, (std::align_val_t)8uLL);
                v54 = (_QWORD *)operator new();
                *v54 = &off_24C9ABB80;
                v54[1] = 0;
                v54[2] = 0;
                v54[3] = v53;
                v497[0] = v53;
                v497[1] = v53;
                *(_QWORD *)&v498[16] = 0;
                *(_OWORD *)v498 = (unint64_t)v54;
                v55 = strlen(v47);
                if (v55 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                v56 = v55;
                if (v55 >= 0x17)
                {
                  v193 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v55 | 7) != 0x17)
                    v193 = v55 | 7;
                  v194 = v193 + 1;
                  p_category = (char *)operator new(v193 + 1);
                  *((_QWORD *)&v520 + 1) = v194 | 0x8000000000000000;
                  category = p_category;
                  *(_QWORD *)&v520 = v56;
                }
                else
                {
                  HIBYTE(v520) = v55;
                  p_category = (char *)&category;
                  if (!v55)
                  {
                    v58 = v491;
                    goto LABEL_300;
                  }
                }
                v58 = v491;
                memcpy(p_category, v47, v56);
LABEL_300:
                p_category[v56] = 0;
                v195 = category;
                v589[0] = (const char *)v520;
                *(const char **)((char *)v589 + 7) = *(const char **)((char *)&v520 + 7);
                v196 = HIBYTE(v520);
                v197 = (char *)operator new(0x38uLL);
                *((_QWORD *)v197 + 1) = 0;
                *((_QWORD *)v197 + 2) = 0;
                *((_QWORD *)v197 + 3) = off_24C9ABC20;
                *(_QWORD *)v197 = &off_24C9ABBD0;
                v198 = v589[0];
                *((_QWORD *)v197 + 4) = v195;
                *((_QWORD *)v197 + 5) = v198;
                *(const char **)(v197 + 47) = *(const char **)((char *)v589 + 7);
                v197[55] = v196;
                v589[0] = 0;
                *(const char **)((char *)v589 + 7) = 0;
                v199 = *(std::__shared_weak_count **)&v498[16];
                *(_QWORD *)&v498[8] = v197 + 24;
                *(_QWORD *)&v498[16] = v197;
                v60 = v58;
                if (v199)
                {
                  p_shared_owners = (unint64_t *)&v199->__shared_owners_;
                  do
                    v201 = __ldaxr(p_shared_owners);
                  while (__stlxr(v201 - 1, p_shared_owners));
                  if (!v201)
                  {
                    ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
                    std::__shared_weak_count::__release_weak(v199);
                  }
                }
                *(_OWORD *)object = *(_OWORD *)v497;
                *(_QWORD *)&object[16] = *(_QWORD *)v498;
                if (*(_QWORD *)v498)
                {
                  v202 = (unint64_t *)(*(_QWORD *)v498 + 8);
                  do
                    v203 = __ldxr(v202);
                  while (__stxr(v203 + 1, v202));
                }
                v584 = *(_OWORD *)&v498[8];
                if (*(_QWORD *)&v498[16])
                {
                  v204 = (unint64_t *)(*(_QWORD *)&v498[16] + 8);
                  do
                    v205 = __ldxr(v204);
                  while (__stxr(v205 + 1, v204));
                  __p = *(void **)&v498[8];
                  do
                    v206 = __ldaxr(v204);
                  while (__stlxr(v206 - 1, v204));
                  if (!v206)
                  {
                    (*(void (**)(_QWORD))(**(_QWORD **)&v498[16] + 16))(*(_QWORD *)&v498[16]);
                    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v498[16]);
                  }
                }
                else
                {
                  __p = *(void **)&v498[8];
                }
                if (*(_QWORD *)v498)
                {
                  v207 = (unint64_t *)(*(_QWORD *)v498 + 8);
                  do
                    v208 = __ldaxr(v207);
                  while (__stlxr(v208 - 1, v207));
                  if (!v208)
                  {
                    (*(void (**)(_QWORD))(**(_QWORD **)v498 + 16))(*(_QWORD *)v498);
                    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)v498);
                  }
                }
                v209 = *(_QWORD *)object;
                if (*((char *)__p + 31) >= 0)
                  v210 = (char *)__p + 8;
                else
                  v210 = (char *)*((_QWORD *)__p + 1);
                v211 = _os_log_pack_fill();
                *(_DWORD *)v211 = 136315138;
                *(_QWORD *)(v211 + 4) = v210;
                v212 = (char *)operator new();
                v213 = *(unsigned __int8 *)(v37 + 39);
                v214 = v487;
                if ((v213 & 0x80u) != 0)
                {
                  v214 = *(const char **)(v37 + 16);
                  v213 = *(_QWORD *)(v37 + 24);
                }
                *(_QWORD *)v212 = v209;
                *(_OWORD *)(v212 + 8) = *(_OWORD *)&object[8];
                *(_QWORD *)&object[8] = 0;
                *(_QWORD *)&object[16] = 0;
                *(_OWORD *)(v212 + 24) = v584;
                v584 = 0uLL;
                *((_QWORD *)v212 + 5) = v214;
                *((_QWORD *)v212 + 6) = v213;
                v212[56] = 2;
                category = 0;
                v497[0] = v212;
                (*(void (**)(_QWORD, void **))(**(_QWORD **)(v48 + 24) + 40))(*(_QWORD *)(v48 + 24), v497);
                v12 = v496;
                v215 = v497[0];
                v497[0] = 0;
                if (v215)
                {
                  v216 = (std::__shared_weak_count *)*((_QWORD *)v215 + 4);
                  if (v216)
                  {
                    v217 = (unint64_t *)&v216->__shared_owners_;
                    do
                      v218 = __ldaxr(v217);
                    while (__stlxr(v218 - 1, v217));
                    if (!v218)
                    {
                      ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
                      std::__shared_weak_count::__release_weak(v216);
                    }
                  }
                  v219 = (std::__shared_weak_count *)*((_QWORD *)v215 + 2);
                  if (v219)
                  {
                    v220 = (unint64_t *)&v219->__shared_owners_;
                    do
                      v221 = __ldaxr(v220);
                    while (__stlxr(v221 - 1, v220));
                    if (!v221)
                    {
                      ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
                      std::__shared_weak_count::__release_weak(v219);
                    }
                  }
                  MEMORY[0x212BC6398](v215, 0x10F0C40B62ED6C6);
                  v222 = category;
                  category = 0;
                  if (v222)
                  {
                    v223 = (std::__shared_weak_count *)*((_QWORD *)v222 + 4);
                    if (v223)
                    {
                      v224 = (unint64_t *)&v223->__shared_owners_;
                      do
                        v225 = __ldaxr(v224);
                      while (__stlxr(v225 - 1, v224));
                      if (!v225)
                      {
                        ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
                        std::__shared_weak_count::__release_weak(v223);
                      }
                    }
                    v226 = (std::__shared_weak_count *)*((_QWORD *)v222 + 2);
                    if (v226)
                    {
                      v227 = (unint64_t *)&v226->__shared_owners_;
                      do
                        v228 = __ldaxr(v227);
                      while (__stlxr(v228 - 1, v227));
                      if (!v228)
                      {
                        ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
                        std::__shared_weak_count::__release_weak(v226);
                      }
                    }
                    MEMORY[0x212BC6398](v222, 0x10F0C40B62ED6C6);
                  }
                }
                v229 = (std::__shared_weak_count *)*((_QWORD *)&v584 + 1);
                if (*((_QWORD *)&v584 + 1))
                {
                  v230 = (unint64_t *)(*((_QWORD *)&v584 + 1) + 8);
                  do
                    v231 = __ldaxr(v230);
                  while (__stlxr(v231 - 1, v230));
                  if (!v231)
                  {
                    ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
                    std::__shared_weak_count::__release_weak(v229);
                  }
                }
                v232 = *(std::__shared_weak_count **)&object[16];
                if (*(_QWORD *)&object[16])
                {
                  v233 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                  do
                    v234 = __ldaxr(v233);
                  while (__stlxr(v234 - 1, v233));
                  if (!v234)
                  {
                    ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
                    std::__shared_weak_count::__release_weak(v232);
                  }
                }
LABEL_359:
                if (v60)
                {
                  v235 = (const char *)__dst;
                  if (v511 < 0)
                    v235 = (const char *)__dst[0];
                  sub_20E8C003C((uint64_t)&v503, "%s", v235);
                  sub_20E863570((uint64_t)&v503);
                }
                sub_20E863570((uint64_t)&v503);
                v236 = v507;
                if (v507)
                {
                  v237 = (unint64_t *)&v507->__shared_owners_;
                  do
                    v238 = __ldaxr(v237);
                  while (__stlxr(v238 - 1, v237));
                  if (!v238)
                  {
                    ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
                    std::__shared_weak_count::__release_weak(v236);
                  }
                }
                if (SHIBYTE(v511) < 0)
                  operator delete(__dst[0]);
                *(_QWORD *)oslog = *MEMORY[0x24BEDB7F0];
                v239 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                *(_QWORD *)&oslog[*(_QWORD *)(*(_QWORD *)oslog - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                *(_QWORD *)&oslog[16] = v239;
                *(_QWORD *)&oslog[24] = MEMORY[0x24BEDB848] + 16;
                if ((oslog[111] & 0x80000000) != 0)
                  operator delete(*(void **)&oslog[88]);
                std::streambuf::~streambuf();
                std::iostream::~basic_iostream();
                MEMORY[0x212BC6290](&oslog[128]);
                goto LABEL_373;
              }
            }
            memmove(p_p, v38, v39);
            goto LABEL_77;
          }
        }
        memmove(v43, v41, v42);
        goto LABEL_69;
      }
    }
    memmove(v17, v33, v16);
    goto LABEL_48;
  }
  if (*v4
    || *(_BYTE *)(v3 + 5314)
    || (v18 = *(_QWORD *)(v3 + 8216), *(_BYTE *)v18)
    || (v19 = *(_QWORD *)(v18 + 16) + 62856, *(_BYTE *)(v19 + 50))
    || !*(_DWORD *)v19 && !*(_DWORD *)(v19 + 4) && !*(_BYTE *)(v19 + 8))
  {
    sub_20F894860(v3, (_OWORD *)(v3 + 14984), v494, (char **)(v3 + 14864), v495[1], (_DWORD *)&v518 + 1, &v517, &v516);
    if (*(_BYTE *)(v3 + 1932))
    {
      v20 = *(_QWORD *)(v3 + 14840);
      for (j = *(_QWORD *)(v3 + 14848); v20 != j; v20 += 8)
      {
        v22 = *(_QWORD *)(*(_QWORD *)v20 + 32);
        *(_QWORD *)oslog = *(_QWORD *)(*(_QWORD *)v20 + 24);
        *(_QWORD *)&oslog[8] = v22;
        sub_20FBD960C(v3 + 328, *(uint64_t *)oslog, v22, oslog);
      }
    }
    v23 = v3 + 5313;
    if (*(_BYTE *)(v3 + 5313))
    {
      sub_20F899044(v3, (_QWORD *)(v3 + 14912), (uint64_t **)(v3 + 14936), &v518);
      v23 = v3 + 5313;
    }
    if (*(_BYTE *)(v23 + 1))
    {
      sub_20F899ECC((uint64_t **)oslog, v3, (_DWORD *)&v515 + 1, &v515);
      v24 = *(void **)(v3 + 14960);
      if (v24)
      {
        *(_QWORD *)(v3 + 14968) = v24;
        operator delete(v24);
        *v6 = 0;
        *(_QWORD *)(v3 + 14968) = 0;
        *(_QWORD *)(v3 + 14976) = 0;
      }
      v490 = 0;
      *(_OWORD *)(v3 + 14960) = *(_OWORD *)oslog;
      *(_QWORD *)(v3 + 14976) = *(_QWORD *)&oslog[16];
    }
    else
    {
      v490 = 0;
    }
  }
  else
  {
    sub_20F896104(v3);
    v490 = 1;
  }
  sub_20F82FD50(v513);
  if (**(int **)(*(_QWORD *)&v513[0] + 56) <= 3)
  {
    v25 = *(unsigned __int8 *)(*(_QWORD *)&v513[0] + 72);
    v26 = sub_20E8C31DC(*(uint64_t *)&v513[0], "OSLogSurrogateAppender", 1, 0);
    v27 = v26;
    if (v25 || v26)
    {
      *(_QWORD *)object = v513;
      *(std::chrono::steady_clock::time_point *)&object[8] = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&object[16] = std::chrono::system_clock::now();
      LODWORD(v584) = 3;
      *((_QWORD *)&v584 + 1) = "unknown file";
      LODWORD(__p) = 3491;
      v588 = 0;
      v586 = "unknown function";
      v587 = 0;
      v28 = *v496;
      v29 = **(_QWORD **)object;
      v468 = **(_QWORD **)object;
      if (*(char *)(**(_QWORD **)object + 39) < 0)
      {
        v31 = *(const char **)(v29 + 16);
        v30 = *(_QWORD *)(v29 + 24);
      }
      else
      {
        v30 = *(unsigned __int8 *)(**(_QWORD **)object + 39);
        v31 = (const char *)(**(_QWORD **)object + 16);
      }
      v467 = **(_QWORD **)object + 16;
      v469 = v25;
      v485 = *(_QWORD *)(v3 + 12408);
      v488 = v27;
      v483 = *(_QWORD *)(v3 + 12400);
      v481 = *(_QWORD *)(v3 + 14920);
      v479 = *(_QWORD *)(v3 + 14912);
      v477 = *(_QWORD *)(v3 + 14896);
      v476 = *(_QWORD *)(v3 + 14888);
      v474 = *(_QWORD *)(v3 + 14848);
      v475 = *(_QWORD *)(v3 + 14968);
      v471 = *(_QWORD *)(v3 + 14840);
      v472 = *(_QWORD *)(v3 + 14960);
      v473 = *(_QWORD *)(v28 + 80);
      v470 = *(_QWORD *)(v28 + 72);
      v61 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v61 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)oslog);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)oslog);
        if (oslog[24] && (oslog[23] & 0x80000000) != 0)
          operator delete(*(void **)oslog);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v62 = byte_254A4A4F8;
      else
        v62 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v63 = byte_254A4A4F8[23];
      else
        v63 = *(_QWORD *)&byte_254A4A4F8[8];
      v64 = v31;
      *(_QWORD *)oslog = os_log_create(v62, v31);
      v65 = &oslog[8];
      if (v63 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v63 >= 0x17)
      {
        v66 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v63 | 7) != 0x17)
          v66 = v63 | 7;
        v67 = v66 + 1;
        v65 = operator new(v66 + 1);
        *(_QWORD *)&oslog[24] = v67 | 0x8000000000000000;
        *(_QWORD *)&oslog[8] = v65;
        *(_QWORD *)&oslog[16] = v63;
      }
      else
      {
        oslog[31] = v63;
        if (!v63)
        {
LABEL_110:
          v65[v63] = 0;
          oslog[32] = 1;
          v68 = &oslog[40];
          if (v30 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v30 >= 0x17)
          {
            v69 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v30 | 7) != 0x17)
              v69 = v30 | 7;
            v70 = v69 + 1;
            v68 = operator new(v69 + 1);
            *(_QWORD *)&oslog[56] = v70 | 0x8000000000000000;
            *(_QWORD *)&oslog[40] = v68;
            *(_QWORD *)&oslog[48] = v30;
          }
          else
          {
            oslog[63] = v30;
            if (!v30)
              goto LABEL_118;
          }
          memmove(v68, v64, v30);
LABEL_118:
          v68[v30] = 0;
          oslog[64] = 1;
          v71 = *(NSObject **)oslog;
          if ((oslog[63] & 0x80000000) != 0)
            operator delete(*(void **)&oslog[40]);
          if (oslog[32] && (oslog[31] & 0x80000000) != 0)
            operator delete(*(void **)&oslog[8]);
          if (*(_QWORD *)oslog)
            os_release(*(void **)oslog);
          if (v488 && *(_QWORD *)(v488 + 24))
          {
            v72 = _os_log_pack_size();
            v73 = (std::__shared_weak_count_vtbl *)operator new(v72, (std::align_val_t)8uLL);
            v74 = (std::__shared_weak_count *)operator new();
            v75 = v74;
            v74->__shared_owners_ = 0;
            v76 = (unint64_t *)&v74->__shared_owners_;
            v74->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v74->__shared_weak_owners_ = 0;
            v74[1].__vftable = v73;
            *(_QWORD *)oslog = v73;
            *(_QWORD *)&oslog[8] = v73;
            *(_QWORD *)&oslog[16] = v74;
            do
              v77 = __ldxr(v76);
            while (__stxr(v77 + 1, v76));
            memset(&oslog[24], 0, 24);
            do
              v78 = __ldaxr(v76);
            while (__stlxr(v78 - 1, v76));
            if (!v78)
            {
              ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
              std::__shared_weak_count::__release_weak(v75);
            }
            v79 = *(_QWORD *)oslog;
            v80 = _os_log_pack_fill();
            *(_DWORD *)v80 = 134219264;
            *(_QWORD *)(v80 + 4) = (v474 - v471) >> 3;
            *(_WORD *)(v80 + 12) = 2048;
            *(_QWORD *)(v80 + 14) = (v485 - v483) >> 3;
            *(_WORD *)(v80 + 22) = 2048;
            *(_QWORD *)(v80 + 24) = (v481 - v479) >> 3;
            *(_WORD *)(v80 + 32) = 2048;
            *(_QWORD *)(v80 + 34) = (v477 - v476) >> 3;
            *(_WORD *)(v80 + 42) = 2048;
            *(_QWORD *)(v80 + 44) = (v475 - v472) >> 3;
            *(_WORD *)(v80 + 52) = 2048;
            *(_QWORD *)(v80 + 54) = (v473 - v470) >> 3;
            v81 = operator new();
            v82 = *(unsigned __int8 *)(v468 + 39);
            v83 = v467;
            if ((v82 & 0x80u) != 0)
            {
              v83 = *(_QWORD *)(v468 + 16);
              v82 = *(_QWORD *)(v468 + 24);
            }
            *(_QWORD *)v81 = v79;
            *(_OWORD *)(v81 + 8) = *(_OWORD *)&oslog[8];
            *(_QWORD *)&oslog[8] = 0;
            *(_QWORD *)&oslog[16] = 0;
            *(_OWORD *)(v81 + 24) = *(_OWORD *)&oslog[24];
            *(_QWORD *)&oslog[24] = 0;
            *(_QWORD *)&oslog[32] = 0;
            *(_QWORD *)(v81 + 40) = v83;
            *(_QWORD *)(v81 + 48) = v82;
            *(_BYTE *)(v81 + 56) = 1;
            v497[0] = 0;
            *(_QWORD *)&v503 = v81;
            (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v488 + 24) + 40))(*(_QWORD *)(v488 + 24), &v503);
            v84 = v503;
            *(_QWORD *)&v503 = 0;
            if (v84)
            {
              v85 = *(std::__shared_weak_count **)(v84 + 32);
              if (v85)
              {
                v86 = (unint64_t *)&v85->__shared_owners_;
                do
                  v87 = __ldaxr(v86);
                while (__stlxr(v87 - 1, v86));
                if (!v87)
                {
                  ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                  std::__shared_weak_count::__release_weak(v85);
                }
              }
              v88 = *(std::__shared_weak_count **)(v84 + 16);
              if (v88)
              {
                v89 = (unint64_t *)&v88->__shared_owners_;
                do
                  v90 = __ldaxr(v89);
                while (__stlxr(v90 - 1, v89));
                if (!v90)
                {
                  ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                  std::__shared_weak_count::__release_weak(v88);
                }
              }
              MEMORY[0x212BC6398](v84, 0x10F0C40B62ED6C6);
              v497[0] = 0;
            }
            v91 = *(std::__shared_weak_count **)&oslog[32];
            v92 = v469;
            if (*(_QWORD *)&oslog[32])
            {
              v93 = (unint64_t *)(*(_QWORD *)&oslog[32] + 8);
              do
                v94 = __ldaxr(v93);
              while (__stlxr(v94 - 1, v93));
              if (!v94)
              {
                ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                std::__shared_weak_count::__release_weak(v91);
              }
            }
            v95 = *(std::__shared_weak_count **)&oslog[16];
            if (*(_QWORD *)&oslog[16])
            {
              v96 = (unint64_t *)(*(_QWORD *)&oslog[16] + 8);
              do
                v97 = __ldaxr(v96);
              while (__stlxr(v97 - 1, v96));
              if (!v97)
              {
                ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                std::__shared_weak_count::__release_weak(v95);
              }
            }
          }
          else
          {
            os_log_type_enabled(v71, OS_LOG_TYPE_INFO);
            *(_DWORD *)oslog = 134219264;
            *(_QWORD *)&oslog[4] = (v474 - v471) >> 3;
            *(_WORD *)&oslog[12] = 2048;
            *(_QWORD *)&oslog[14] = (v485 - v483) >> 3;
            *(_WORD *)&oslog[22] = 2048;
            *(_QWORD *)&oslog[24] = (v481 - v479) >> 3;
            *(_WORD *)&oslog[32] = 2048;
            *(_QWORD *)&oslog[34] = (v477 - v476) >> 3;
            *(_WORD *)&oslog[42] = 2048;
            *(_QWORD *)&oslog[44] = (v475 - v472) >> 3;
            *(_WORD *)&oslog[52] = 2048;
            *(_QWORD *)&oslog[54] = (v473 - v470) >> 3;
            v98 = (void *)_os_log_send_and_compose_impl();
            v92 = v469;
            if (v98)
              free(v98);
          }
          if (v92)
          {
            sub_20E8C003C((uint64_t)object, "[FinishUpdate] Got %zu/%zu inlier points, %zu/%zu inlier lines, and %zu/%zu inlier planes", (uint64_t)(*(_QWORD *)(v3 + 14848) - *(_QWORD *)(v3 + 14840)) >> 3, (uint64_t)(*(_QWORD *)(v3 + 12408) - *(_QWORD *)(v3 + 12400)) >> 3, (uint64_t)(*(_QWORD *)(v3 + 14920) - *(_QWORD *)(v3 + 14912)) >> 3, (uint64_t)(*(_QWORD *)(v3 + 14896) - *(_QWORD *)(v3 + 14888)) >> 3, (uint64_t)(*(_QWORD *)(v3 + 14968) - *(_QWORD *)(v3 + 14960)) >> 3, (uint64_t)(*(_QWORD *)(*v496 + 80) - *(_QWORD *)(*v496 + 72)) >> 3);
            sub_20E863570((uint64_t)object);
          }
          sub_20E863570((uint64_t)object);
          v99 = v588;
          if (v588)
          {
            v100 = (unint64_t *)&v588->__shared_owners_;
            do
              v101 = __ldaxr(v100);
            while (__stlxr(v101 - 1, v100));
            if (!v101)
            {
              ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
              std::__shared_weak_count::__release_weak(v99);
            }
          }
          goto LABEL_166;
        }
      }
      memmove(v65, v62, v63);
      goto LABEL_110;
    }
  }
LABEL_166:
  v102 = *v496;
  v103 = (uint64_t *)(*v496 + 24);
  if (v103 != v494)
  {
    sub_20FB42E10(v103, *(char **)(v3 + 14840), *(char **)(v3 + 14848), (uint64_t)(*(_QWORD *)(v3 + 14848) - *(_QWORD *)(v3 + 14840)) >> 3);
    v102 = *v496;
  }
  if (v102 + 48 != v5)
  {
    sub_20E86811C((_QWORD *)(v102 + 48), *(char **)(v3 + 14912), *(char **)(v3 + 14920), (uint64_t)(*(_QWORD *)(v3 + 14920) - *(_QWORD *)(v3 + 14912)) >> 3);
    v102 = *v496;
  }
  if ((_QWORD *)(v102 + 72) != v6)
    sub_20E86811C((_QWORD *)(v102 + 72), *(char **)(v3 + 14960), *(char **)(v3 + 14968), (uint64_t)(*(_QWORD *)(v3 + 14968) - *(_QWORD *)(v3 + 14960)) >> 3);
  v104 = *(uint64_t **)(v3 + 14864);
  v105 = *(uint64_t **)(v3 + 14872);
  if (v104 != v105)
  {
    v106 = *(uint64_t **)(v3 + 14864);
    v12 = v496;
    v107 = v490;
    do
    {
      v108 = *v106;
      if ((*(_DWORD *)(*v106 + 520) - 1) <= 1)
      {
        v110 = *(_QWORD *)(v108 + 496);
        v109 = *(_QWORD *)(v108 + 504);
        if (v110 != v109)
        {
          v111 = v109 - v110 - 64;
          v112 = v110;
          if (v111 < 0x40)
            goto LABEL_602;
          v113 = (v111 >> 6) + 1;
          v112 = v110 + ((v113 & 0x7FFFFFFFFFFFFFELL) << 6);
          v114 = (_DWORD *)(v110 + 88);
          v115 = v113 & 0x7FFFFFFFFFFFFFELL;
          do
          {
            *(v114 - 16) = 0;
            *v114 = 0;
            v114 += 32;
            v115 -= 2;
          }
          while (v115);
          if (v113 != (v113 & 0x7FFFFFFFFFFFFFELL))
          {
LABEL_602:
            do
            {
              *(_DWORD *)(v112 + 24) = 0;
              v112 += 64;
            }
            while (v112 != v109);
          }
        }
      }
      ++v106;
    }
    while (v106 != v105);
    if (!*(_BYTE *)(*(_QWORD *)(v3 + 8216) + 1720))
    {
      v489 = (_QWORD *)(v3 + 8216);
      v116 = *v496;
      v486 = *v496 + 6760;
      v117 = (_DWORD *)(*v496 + 7824);
      v484 = (void **)(*v496 + 7128);
      while (1)
      {
        if (*(_DWORD *)(*v104 + 520) != 2)
        {
          if (sub_20FBCB53C(v116 + 5168, *(_DWORD *)(*v104 + 32)))
          {
            *(_WORD *)(v116 + 7828) = 0;
            *v117 = 0;
          }
          goto LABEL_186;
        }
        if (!*(_BYTE *)(v492 + 2864))
          break;
LABEL_186:
        if (++v104 == v105)
          goto LABEL_232;
      }
      v118 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v116 + 4856) + 136))(v116 + 4856);
      v119 = *(__int32 **)(v118 + 15408);
      v120 = wmemchr(*(__int32 **)(v118 + 15400), *(_DWORD *)(*v104 + 32), ((uint64_t)v119 - *(_QWORD *)(v118 + 15400)) >> 2);
      if (v120)
        v121 = v120;
      else
        v121 = v119;
      v122 = *(_DWORD *)(*v104 + 32);
      if (v121 != *(__int32 **)(v118 + 15408))
      {
        if ((sub_20FBCBB4C(v116 + 5168, *(_DWORD *)(*v104 + 32)) & 1) == 0)
        {
LABEL_205:
          *(_DWORD *)(*v104 + 520) = 0;
          goto LABEL_186;
        }
LABEL_195:
        *(_WORD *)(v116 + 7828) = 0;
        *v117 = 0;
        goto LABEL_205;
      }
      v123 = *(char **)(v116 + 5560);
      v124 = *(char **)(v116 + 5568);
      if (v124 != v123)
      {
        v125 = (v124 - v123) >> 4;
        do
        {
          v126 = v125 >> 1;
          v127 = (unsigned int *)&v123[16 * (v125 >> 1)];
          v129 = *v127;
          v128 = (char *)(v127 + 4);
          v125 += ~(v125 >> 1);
          if (v129 < v122)
            v123 = v128;
          else
            v125 = v126;
        }
        while (v125);
      }
      if (v123 == v124)
        goto LABEL_205;
      if (*(_DWORD *)v123 != v122)
        goto LABEL_205;
      v130 = *((_QWORD *)v123 + 1);
      if ((*(_BYTE *)(v130 + 4) & 6) != 0)
        goto LABEL_205;
      *(_BYTE *)(v130 + 4) ^= 2u;
      v131 = *(char **)(v116 + 7136);
      v132 = *(_QWORD *)(v116 + 7144);
      if ((unint64_t)v131 >= v132)
      {
        v134 = (char *)*v484;
        v135 = v131 - (_BYTE *)*v484;
        v136 = v135 >> 2;
        v137 = (v135 >> 2) + 1;
        if (v137 >> 62)
          sub_20E867F44();
        v138 = v132 - (_QWORD)v134;
        if (v138 >> 1 > v137)
          v137 = v138 >> 1;
        if ((unint64_t)v138 >= 0x7FFFFFFFFFFFFFFCLL)
          v139 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v139 = v137;
        if (v139)
        {
          v480 = v131 - (_BYTE *)*v484;
          v482 = v135 >> 2;
          if (v139 >> 62)
            sub_20E877A38();
          v478 = v139;
          v140 = operator new(4 * v139);
          v139 = v478;
          v135 = v480;
          v136 = v482;
        }
        else
        {
          v140 = 0;
        }
        v141 = (unsigned int *)&v140[4 * v136];
        *v141 = v122;
        v142 = v141 + 1;
        if (v131 != v134)
        {
          v143 = v131 - v134 - 4;
          if (v143 < 0x2C)
            goto LABEL_603;
          if ((unint64_t)(v131 - v140 - v135) < 0x20)
            goto LABEL_603;
          v144 = (v143 >> 2) + 1;
          v145 = 4 * (v144 & 0x7FFFFFFFFFFFFFF8);
          v146 = &v131[-v145];
          v141 = (unsigned int *)((char *)v141 - v145);
          v147 = &v140[4 * v136 - 16];
          v148 = v131 - 16;
          v149 = v144 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v150 = *(_OWORD *)v148;
            *(v147 - 1) = *((_OWORD *)v148 - 1);
            *v147 = v150;
            v147 -= 2;
            v148 -= 32;
            v149 -= 8;
          }
          while (v149);
          v131 = v146;
          if (v144 != (v144 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_603:
            do
            {
              v151 = *((_DWORD *)v131 - 1);
              v131 -= 4;
              *--v141 = v151;
            }
            while (v131 != v134);
          }
        }
        *(_QWORD *)(v116 + 7128) = v141;
        *(_QWORD *)(v116 + 7136) = v142;
        *(_QWORD *)(v116 + 7144) = &v140[4 * v139];
        if (!v134)
          goto LABEL_228;
        v133 = v142;
        operator delete(v134);
      }
      else
      {
        *(_DWORD *)v131 = v122;
        v133 = v131 + 4;
      }
      v142 = v133;
LABEL_228:
      *(_QWORD *)(v116 + 7136) = v142;
      *(_BYTE *)(v486 + 2) = 0;
      *(_WORD *)v486 = 256;
      goto LABEL_195;
    }
LABEL_230:
    kdebug_trace();
    goto LABEL_386;
  }
  v12 = v496;
  v107 = v490;
  if (*(_BYTE *)(*(_QWORD *)(v3 + 8216) + 1720))
    goto LABEL_230;
  v489 = (_QWORD *)(v3 + 8216);
  v116 = *v496;
LABEL_232:
  v152 = *(_QWORD *)(v3 + 14936);
  for (k = *(_QWORD *)(v3 + 14944); v152 != k; v152 += 8)
  {
    if (sub_20FBCB53C(v116 + 5168, *(_DWORD *)(*(_QWORD *)v152 + 32)))
    {
      *(_WORD *)(v116 + 7828) = 0;
      *(_DWORD *)(v116 + 7824) = 0;
    }
  }
  kdebug_trace();
  v154 = v496;
  if (*(_BYTE *)(v3 + 772))
  {
    if (*(_BYTE *)(v492 + 2864))
    {
      v154 = v496;
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 3559, (uint64_t)"!this->bad_geometry_in_last_frame_.first", 40, (uint64_t)"Should not have bad_geometry_in_last_frame_", 43, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
    }
    if (*(_BYTE *)(v3 + 781))
    {
      v154 = v496;
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 3561, (uint64_t)"!this->config().bundle_adjuster_config.running_as_light_ba", 58, (uint64_t)"The current solver should NOT be a light BA solver.", 51, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
    }
  }
  kdebug_trace();
  if (*(_BYTE *)(v492 + 2864))
  {
    v162 = *v154;
    if (*(_BYTE *)(v3 + 1930))
    {
      sub_20FBFADEC(*v154, 0, (_DWORD *)(v3 + 8184), 0, 0);
      v12 = v496;
    }
    else
    {
      v493 = sub_20F921D44(v162 + 5168, 0);
      sub_20FB9CDC0((_QWORD *)v162);
      v176 = *(_QWORD **)(v162 + 8);
      if (!v176[8])
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 1774, (uint64_t)"this->viobadata_ref_.state_set->size() >= 1 + kept_idx", 54, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v176 = *(_QWORD **)(v162 + 8);
      }
      v177 = (_QWORD *)v176[6];
      v178 = v176 + 7;
      if (v177 != v176 + 7)
      {
        v179 = v177[4];
        v180 = (_DWORD *)(v162 + 7824);
        v181 = *((_DWORD *)v177 + 10);
        do
        {
          v182 = *((_DWORD *)v177 + 10);
          v183 = v177[4] == v179 && v182 == v181;
          if (!v183)
          {
            if (sub_20FC043E4(v162 + 5168, *((_DWORD *)v177 + 10)))
            {
              *(_WORD *)(v162 + 7828) = 0;
              *v180 = 0;
            }
            else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 2624, (uint64_t)"result", 6, (uint64_t)"Failed to remove a variable.", 28, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
            if (sub_20FC045E8(v162 + 5168, v182))
            {
              *(_WORD *)(v162 + 7828) = 0;
              *v180 = 0;
            }
            else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 2629, (uint64_t)"result", 6, (uint64_t)"Failed to remove a variable.", 28, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
          }
          v184 = (_QWORD *)v177[1];
          if (v184)
          {
            do
            {
              v185 = v184;
              v184 = (_QWORD *)*v184;
            }
            while (v184);
          }
          else
          {
            do
            {
              v185 = (_QWORD *)v177[2];
              v183 = *v185 == (_QWORD)v177;
              v177 = v185;
            }
            while (!v183);
          }
          v177 = v185;
        }
        while (v185 != v178);
      }
      v186 = *(_QWORD *)(v162 + 6136);
      for (m = *(_QWORD *)(v162 + 6144); v186 != m; v186 += 16)
      {
        if ((*(_BYTE *)(*(_QWORD *)(v186 + 8) + 4) & 2) == 0)
        {
          if (sub_20FBCB53C(v162 + 5168, *(_DWORD *)v186))
          {
            *(_WORD *)(v162 + 7828) = 0;
            *(_DWORD *)(v162 + 7824) = 0;
          }
          else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 1797, (uint64_t)"result", 6, (uint64_t)"Failed to remove a variable.", 28, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
        }
      }
      sub_20FC047EC((_QWORD *)v162);
      sub_20FB9CFFC(v162, 0, v188, v189, v190, v191);
      sub_20FC03218(v162);
      if (sub_20F89F3D0(v162 + 4856))
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        sub_20E8610C0(oslog, "marginalizer BG");
        std::runtime_error::runtime_error(exception, (const std::string *)oslog);
        exception->__vftable = (std::runtime_error_vtbl *)&off_24CA04F20;
        __cxa_throw(exception, (struct type_info *)&unk_24CA04F38, (void (*)(void *))std::runtime_error::~runtime_error);
      }
      sub_20FBFE268(v162, 2, v493);
      v12 = v496;
      if (!*(_BYTE *)(v162 + 43296))
      {
        v192 = *(unsigned int *)(v162 + 27768);
        if ((_DWORD)v192)
          bzero(*(void **)(v162 + 27752), 8 * v192);
      }
    }
    goto LABEL_567;
  }
  if (*(_BYTE *)(v3 + 1632))
  {
    sub_20F82AF8C(*(_QWORD **)(v3 + 12440), (uint64_t *)(v3 + 2480), (_QWORD *)(v3 + 2504), (_QWORD *)(v3 + 2280), (_QWORD *)(v3 + 8056), (float64x2_t *)(v3 + 4752), (uint64_t *)(*(_QWORD *)(v3 + 7952) + 80));
    v154 = v496;
  }
  if (!*(_BYTE *)(v3 + 1581) || *(_BYTE *)(v3 + 7680))
  {
    HIDWORD(v163) = 0;
    memset(oslog, 0, 32);
    *(_DWORD *)&oslog[32] = 1065353216;
    goto LABEL_250;
  }
  v397 = (_QWORD *)*v154;
  v398 = *(_QWORD *)(**(_QWORD **)(v3 + 7952) + 48);
  v399 = *(_QWORD *)(v398 + 32);
  v400 = *(_QWORD *)(v398 + 40);
  v155 = *(double *)(v3 + 1584);
  v401 = (v155
                      * (double)(unint64_t)((uint64_t)(*(_QWORD *)(*v154 + 32) - *(_QWORD *)(*v154 + 24)) >> 3));
  HIDWORD(v163) = 0;
  memset(oslog, 0, 32);
  *(_DWORD *)&oslog[32] = 1065353216;
  prime = (unint64_t)(float)v401;
  if (prime == 1)
  {
    prime = 2;
  }
  else
  {
    if ((prime & (prime - 1)) != 0)
      prime = std::__next_prime((unint64_t)(float)v401);
    if (!prime)
    {
      v403 = 0;
      v404 = (uint64_t *)v397[3];
      v405 = (uint64_t *)v397[4];
      if (v404 == v405)
        goto LABEL_250;
      goto LABEL_518;
    }
  }
  sub_20E8D2B3C((uint64_t)oslog, prime);
  v403 = *(_QWORD *)&oslog[24];
  v404 = (uint64_t *)v397[3];
  v405 = (uint64_t *)v397[4];
  if (v404 == v405)
    goto LABEL_250;
LABEL_518:
  if (v403 <= v401)
  {
    do
    {
      v406 = *v404;
      if (*(_DWORD *)(*v404 + 520) != 2)
      {
        v407 = *(_DWORD *)(v406 + 32);
        *(_DWORD *)object = v407;
        v408 = (char *)v397[767];
        v409 = (char *)v397[768];
        if (v409 != v408)
        {
          v410 = (v409 - v408) >> 4;
          do
          {
            v411 = v410 >> 1;
            v412 = (unsigned int *)&v408[16 * (v410 >> 1)];
            v414 = *v412;
            v413 = (char *)(v412 + 4);
            v410 += ~(v410 >> 1);
            if (v414 < v407)
              v408 = v413;
            else
              v410 = v411;
          }
          while (v410);
        }
        if (v408 != v409 && *(_DWORD *)v408 == v407 && (*(_BYTE *)(*((_QWORD *)v408 + 1) + 4) & 2) == 0)
        {
          v415 = *(_QWORD *)(v406 + 496);
          v416 = *(_QWORD *)(v406 + 504);
          while (v415 != v416)
          {
            if (*(_QWORD *)v415 == v399 && *(_DWORD *)(v415 + 8) == (_DWORD)v400)
            {
              if (v415 != v416)
              {
                sub_20EABA148((uint64_t)oslog, (unsigned int *)object, object);
                v403 = *(_QWORD *)&oslog[24];
                goto LABEL_540;
              }
              break;
            }
            v415 += 64;
          }
          if (*(_BYTE *)(v406 + 488))
            v417 = v406 + 40;
          else
            v417 = 0;
          *(_WORD *)(v417 + 57) = 256;
        }
      }
LABEL_540:
      ++v404;
    }
    while (v404 != v405 && v403 <= v401);
  }
LABEL_250:
  v164 = v495[2];
  if (*(_QWORD *)(v164 + 24))
  {
    v165 = *(_QWORD **)(v164 + 16);
    if (v165)
    {
      do
      {
        v166 = (_QWORD *)*v165;
        operator delete(v165);
        v165 = v166;
      }
      while (v166);
    }
    *(_QWORD *)(v164 + 16) = 0;
    v167 = *(_QWORD *)(v164 + 8);
    if (v167)
    {
      for (n = 0; n != v167; ++n)
        *(_QWORD *)(*(_QWORD *)v164 + 8 * n) = 0;
    }
    *(_QWORD *)(v164 + 24) = 0;
  }
  v169 = *(_QWORD *)oslog;
  *(_QWORD *)oslog = 0;
  v170 = *(void **)v164;
  *(_QWORD *)v164 = v169;
  if (v170)
    operator delete(v170);
  v171 = *(_QWORD *)&oslog[8];
  v172 = *(_QWORD *)&oslog[16];
  *(_QWORD *)(v164 + 16) = *(_QWORD *)&oslog[16];
  *(_QWORD *)(v164 + 8) = v171;
  *(_QWORD *)&oslog[8] = 0;
  v173 = *(_QWORD *)&oslog[24];
  *(_QWORD *)(v164 + 24) = *(_QWORD *)&oslog[24];
  LODWORD(v163) = *(_DWORD *)&oslog[32];
  *(_DWORD *)(v164 + 32) = *(_DWORD *)&oslog[32];
  if (v173)
  {
    v174 = *(_QWORD *)(v172 + 8);
    v175 = *(_QWORD *)(v164 + 8);
    if ((v175 & (v175 - 1)) != 0)
    {
      if (v174 >= v175)
        v174 %= v175;
    }
    else
    {
      v174 &= v175 - 1;
    }
    *(_QWORD *)(*(_QWORD *)v164 + 8 * v174) = v164 + 16;
    *(_QWORD *)&oslog[16] = 0;
    *(_QWORD *)&oslog[24] = 0;
  }
  else
  {
    v382 = *(_QWORD **)&oslog[16];
    if (*(_QWORD *)&oslog[16])
    {
      do
      {
        v383 = (_QWORD *)*v382;
        operator delete(v382);
        v382 = v383;
      }
      while (v383);
    }
  }
  v384 = *(void **)oslog;
  *(_QWORD *)oslog = 0;
  if (v384)
    operator delete(v384);
  if (*(_BYTE *)(v3 + 1932))
  {
    v385 = (_BYTE *)*v489;
    v386 = 8;
    if (!*(_BYTE *)*v489)
      v386 = 16;
    v387 = *(_QWORD *)&v385[v386];
    if (*(_BYTE *)*v489)
      v388 = v387 == 0;
    else
      v388 = 1;
    if (v388)
      sub_20FBF6FD4(*((_QWORD *)v385 + 2), v163, v155, v156, v157, v158, v159, v160, v161);
    else
      sub_20FBF6B90(*((_QWORD *)v385 + 1), v163, v155, v156, v157, v158, v159, v160, v161);
    v154 = v496;
  }
  sub_20F82FD50(__dst);
  if (**((int **)__dst[0] + 7) <= 2)
  {
    v389 = *((unsigned __int8 *)__dst[0] + 72);
    v390 = sub_20E8C31DC((uint64_t)__dst[0], "OSLogSurrogateAppender", 1, 0);
    v391 = v390 ? v390 + 16 : 0;
    if (v389 || v390)
    {
      sub_20E863438((uint64_t)oslog);
      sub_20E86A980(&oslog[16], (uint64_t)"MarginalizeIntoNthOldestFramePrior code path", 44);
      sub_20E923E88(oslog, v497);
      *(_QWORD *)&v503 = __dst;
      *((std::chrono::steady_clock::time_point *)&v503 + 1) = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&v504 = std::chrono::system_clock::now();
      DWORD2(v504) = 2;
      *(_QWORD *)&v505 = "unknown file";
      DWORD2(v505) = 3603;
      *((_QWORD *)&v506 + 1) = 0;
      v507 = 0;
      *(_QWORD *)&v506 = "unknown function";
      if (v498[7] >= 0)
        v392 = v497;
      else
        v392 = (void **)v497[0];
      v589[0] = (const char *)v392;
      v393 = *(_QWORD *)v503;
      v394 = (uint64_t *)(*(_QWORD *)v503 + 16);
      if (*(char *)(*(_QWORD *)v503 + 39) < 0)
      {
        v396 = *(char **)(v393 + 16);
        v395 = *(_QWORD *)(v393 + 24);
      }
      else
      {
        v395 = *(unsigned __int8 *)(*(_QWORD *)v503 + 39);
        v396 = (char *)(*(_QWORD *)v503 + 16);
      }
      category = v396;
      *(_QWORD *)&v520 = v395;
      v418 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v418 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)object);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
        if ((_BYTE)v584 && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
        v154 = v496;
      }
      v419 = byte_254A4A4F8[23];
      if (byte_254A4A4F8[23] >= 0)
      {
        v420 = byte_254A4A4F8;
      }
      else
      {
        v419 = *(_QWORD *)&byte_254A4A4F8[8];
        v420 = *(const char **)byte_254A4A4F8;
      }
      *(_QWORD *)&v513[0] = v420;
      *((_QWORD *)&v513[0] + 1) = v419;
      *(_QWORD *)object = os_log_create(v420, category);
      sub_20E86E5A8(&object[8], (uint64_t)v513);
      sub_20E86E5A8(&__p, (uint64_t)&category);
      v421 = *(NSObject **)object;
      sub_20E86E44C((uint64_t)object);
      sub_20FC04DE0(v391, v394, v421, OS_LOG_TYPE_DEBUG, v589);
      if (v389)
      {
        v422 = v497;
        if (v498[7] < 0)
          v422 = (void **)v497[0];
        sub_20E8C003C((uint64_t)&v503, "%s", (const char *)v422);
        sub_20E863570((uint64_t)&v503);
      }
      sub_20E863714((uint64_t)&v503);
      if ((v498[7] & 0x80000000) != 0)
        operator delete(v497[0]);
      sub_20E863784((uint64_t)oslog);
    }
  }
  sub_20FBFADEC(*v154, 1u, (_DWORD *)(v3 + 8184), v3 + 11640, 1);
  if (*(_BYTE *)(v3 + 1929))
    sub_20FBD94F8(v3 + 11608, v3 + 11640);
  sub_20FC87F6C(v3 + 11640, (float64x2_t *)object);
  v423 = **(unsigned int **)(v3 + 2480);
  v424 = *(__int128 **)(v3 + 2280);
  v425 = *v424;
  v426 = v424[1];
  v427 = v424[3];
  v428 = (std::__shared_weak_count *)*((_QWORD *)v424 + 8);
  v505 = v424[2];
  v506 = v427;
  v503 = v425;
  v504 = v426;
  v429 = v424[9];
  *(_QWORD *)&v426 = *((_QWORD *)v424 + 20);
  v507 = v428;
  v509 = v426;
  v508 = v429;
  v430 = *(__int128 *)((char *)v424 + 168);
  v424 = (__int128 *)((char *)v424 + 168);
  v431 = v424[1];
  v432 = v424[2];
  v433 = v424[3];
  v500 = *((_QWORD *)v424 + 8);
  *(_OWORD *)&v498[16] = v432;
  v499 = v433;
  *(_OWORD *)v497 = v430;
  *(_OWORD *)v498 = v431;
  v434 = v424[9];
  v502 = *((_QWORD *)v424 + 20);
  v501 = v434;
  sub_20FC8564C(v423);
  v12 = v496;
  if (!*(_BYTE *)(v492 + 2736))
  {
    *(_QWORD *)(v3 + 8376) = *(_QWORD *)oslog;
    *(_OWORD *)(v3 + 8448) = *(_OWORD *)&oslog[72];
    *(_OWORD *)(v3 + 8464) = *(_OWORD *)&oslog[88];
    *(_OWORD *)(v3 + 8480) = *(_OWORD *)&oslog[104];
    *(_OWORD *)(v3 + 8496) = *(_OWORD *)&oslog[120];
    *(_OWORD *)(v3 + 8384) = *(_OWORD *)&oslog[8];
    *(_OWORD *)(v3 + 8400) = *(_OWORD *)&oslog[24];
    *(_OWORD *)(v3 + 8416) = *(_OWORD *)&oslog[40];
    *(_OWORD *)(v3 + 8432) = *(_OWORD *)&oslog[56];
    memcpy((void *)(v3 + 8512), &oslog[136], 0x120uLL);
    *(_BYTE *)v492 = 0;
    *(_BYTE *)(v492 + 72) = 0;
    v435 = v528;
    if (v528)
    {
      *(_QWORD *)(v3 + 8816) = v523;
      *(_OWORD *)(v3 + 8824) = v524;
      v436 = v527;
      *(_QWORD *)(v3 + 8840) = v525;
      *(_OWORD *)(v3 + 8800) = v522;
      v523 = 0;
      v522 = 0uLL;
      *(_QWORD *)(v3 + 8864) = v436;
      *(_OWORD *)(v3 + 8848) = v526;
      *(_BYTE *)(v492 + 72) = 1;
    }
    *(_BYTE *)(v492 + 80) = 0;
    *(_BYTE *)(v492 + 2728) = 0;
    if (v582)
    {
      v437 = v529;
      *(_QWORD *)(v492 + 96) = v530;
      *(_OWORD *)(v492 + 80) = v437;
      *(_OWORD *)(v3 + 8904) = v531;
      *(_QWORD *)(v3 + 8920) = v532;
      v438 = v534;
      *(_OWORD *)(v3 + 8928) = v533;
      *(_OWORD *)(v3 + 8944) = v438;
      v439 = v536;
      *(_OWORD *)(v3 + 8960) = v535;
      v440 = v537;
      v441 = v538;
      *(_QWORD *)(v3 + 9024) = v539;
      *(_OWORD *)(v3 + 9008) = v441;
      *(_OWORD *)(v3 + 8992) = v440;
      *(_OWORD *)(v3 + 8976) = v439;
      v442 = v540;
      v443 = v541;
      v444 = v542;
      v445 = v543;
      *(_QWORD *)(v3 + 9096) = v544;
      *(_OWORD *)(v3 + 9064) = v444;
      *(_OWORD *)(v3 + 9080) = v445;
      *(_OWORD *)(v3 + 9032) = v442;
      *(_OWORD *)(v3 + 9048) = v443;
      v446 = v546;
      *(_OWORD *)(v3 + 9104) = v545;
      v447 = v547;
      v448 = v548;
      *(_QWORD *)(v3 + 9168) = v549;
      *(_OWORD *)(v3 + 9152) = v448;
      *(_OWORD *)(v3 + 9136) = v447;
      *(_OWORD *)(v3 + 9120) = v446;
      v449 = v550;
      v450 = v551;
      v451 = v552;
      v452 = v553;
      *(_QWORD *)(v3 + 9240) = v554;
      *(_OWORD *)(v3 + 9208) = v451;
      *(_OWORD *)(v3 + 9224) = v452;
      *(_OWORD *)(v3 + 9176) = v449;
      *(_OWORD *)(v3 + 9192) = v450;
      v453 = v556;
      *(_OWORD *)(v3 + 9248) = v555;
      v454 = v557;
      v455 = v558;
      *(_QWORD *)(v3 + 9312) = v559;
      *(_OWORD *)(v3 + 9296) = v455;
      *(_OWORD *)(v3 + 9280) = v454;
      *(_OWORD *)(v3 + 9264) = v453;
      v456 = v560;
      v457 = v561;
      v458 = v562;
      v459 = v563;
      *(_QWORD *)(v3 + 9384) = v564;
      *(_OWORD *)(v3 + 9352) = v458;
      *(_OWORD *)(v3 + 9368) = v459;
      *(_OWORD *)(v3 + 9320) = v456;
      *(_OWORD *)(v3 + 9336) = v457;
      v460 = v566;
      *(_OWORD *)(v3 + 9392) = v565;
      v461 = v567;
      v462 = v568;
      *(_QWORD *)(v3 + 9456) = v569;
      *(_OWORD *)(v3 + 9440) = v462;
      *(_OWORD *)(v3 + 9424) = v461;
      *(_OWORD *)(v3 + 9408) = v460;
      *(_OWORD *)(v3 + 9464) = v570;
      v463 = v571;
      v464 = v572;
      v465 = v573;
      *(_QWORD *)(v3 + 9528) = v574;
      *(_OWORD *)(v3 + 9512) = v465;
      *(_OWORD *)(v3 + 9496) = v464;
      *(_OWORD *)(v3 + 9480) = v463;
      memcpy((void *)(v3 + 9536), v575, 0x288uLL);
      *(_OWORD *)(v3 + 10184) = v576;
      *(_QWORD *)(v3 + 10200) = v577;
      *(_OWORD *)(v3 + 10208) = v578;
      *(_QWORD *)(v3 + 10224) = v579;
      memcpy((void *)(v3 + 10232), v580, 0x288uLL);
      memcpy((void *)(v3 + 10880), v581, 0x288uLL);
      *(_BYTE *)(v492 + 2728) = 1;
    }
    *(_BYTE *)(v492 + 2736) = 1;
    if (!v435)
      goto LABEL_567;
    goto LABEL_565;
  }
  sub_20F13D1BC(v3 + 8376, (uint64_t)oslog);
  if (v528)
  {
LABEL_565:
    if ((_QWORD)v522)
    {
      *((_QWORD *)&v522 + 1) = v522;
      operator delete((void *)v522);
    }
  }
LABEL_567:
  kdebug_trace();
  v107 = v490;
LABEL_386:
  kdebug_trace();
  if (!v107)
    goto LABEL_398;
  v283 = *(_QWORD *)(v3 + 8216);
  v284 = 8;
  if (!*(_BYTE *)v283)
    v284 = 16;
  v285 = *(_QWORD *)(v283 + v284);
  if (*(_BYTE *)v283)
    v286 = v285 == 0;
  else
    v286 = 1;
  if (!v286)
  {
    if (*(_QWORD *)(*(_QWORD *)(v283 + 8) + 152) == *(_QWORD *)(*(_QWORD *)(v283 + 8) + 160))
      goto LABEL_398;
    goto LABEL_397;
  }
  if (*(_QWORD *)(*(_QWORD *)(v283 + 16) + 152) != *(_QWORD *)(*(_QWORD *)(v283 + 16) + 160))
  {
LABEL_397:
    v287 = **(_QWORD ***)(v3 + 7952);
    v288 = *(_OWORD *)(v3 + 11704);
    *(_OWORD *)(v3 + 14984) = *(_OWORD *)(v3 + 11688);
    *(_OWORD *)(v3 + 15000) = v288;
    *(_OWORD *)(v3 + 15016) = *(_OWORD *)(v3 + 11720);
    sub_20F38F148(v3 + 14984, v287);
    v289 = *(_QWORD *)(v3 + 536);
    v290 = *(_QWORD *)(v3 + 592);
    v291 = cos(*(double *)(v3 + 568) * 0.0174532925);
    v292 = *(_QWORD *)(v3 + 1800);
    *(_QWORD *)oslog = v289;
    *(_QWORD *)&oslog[8] = v290;
    *(long double *)&oslog[16] = v291;
    *(_OWORD *)&oslog[24] = xmmword_2102DCC90;
    *(_DWORD *)&oslog[40] = v292;
    oslog[44] = 0;
    sub_20F894128(v3, (_OWORD *)(v3 + 14984), 1, oslog);
    v12 = v496;
  }
LABEL_398:
  v293 = *(uint64_t **)(v3 + 12400);
  for (ii = *(uint64_t **)(v3 + 12408); v293 != ii; *(_BYTE *)(v298 + 56) = 1)
  {
    if (*(_BYTE *)(*v293 + 488))
      v295 = *v293 + 40;
    else
      v295 = 0;
    *(_WORD *)(v295 + 57) = 0;
    v296 = *v293++;
    v297 = v296 + 40;
    if (*(_BYTE *)(v296 + 488))
      v298 = v297;
    else
      v298 = 0;
  }
  v299 = *(uint64_t **)(v3 + 14888);
  for (jj = *(uint64_t **)(v3 + 14896); v299 != jj; *(_BYTE *)(v305 + 504) = 1)
  {
    if (*(_BYTE *)(*v299 + 968))
      v301 = *v299 + 40;
    else
      v301 = 0;
    *(_WORD *)(v301 + 57) = 0;
    if (*(_BYTE *)(*v299 + 968))
      v302 = *v299 + 40;
    else
      v302 = 0;
    *(_WORD *)(v302 + 505) = 0;
    v303 = *v299++;
    v304 = v303 + 40;
    if (*(_BYTE *)(v303 + 968))
      v305 = v304;
    else
      v305 = 0;
    *(_BYTE *)(v305 + 56) = 1;
  }
  v306 = *v12;
  v308 = *v12 + 24;
  v307 = *(void **)v308;
  *(_QWORD *)v306 = 0;
  *(_QWORD *)(v306 + 8) = 0;
  *(_QWORD *)(v306 + 16) = 0;
  if (v307)
  {
    *(_QWORD *)(v306 + 32) = v307;
    operator delete(v307);
    *(_QWORD *)v308 = 0;
    *(_QWORD *)(v308 + 8) = 0;
    *(_QWORD *)(v308 + 16) = 0;
  }
  v310 = (_QWORD *)(v306 + 48);
  v309 = *(void **)(v306 + 48);
  *(_QWORD *)v308 = 0;
  *(_QWORD *)(v308 + 8) = 0;
  *(_QWORD *)(v308 + 16) = 0;
  if (v309)
  {
    *(_QWORD *)(v306 + 56) = v309;
    operator delete(v309);
    *v310 = 0;
    *(_QWORD *)(v306 + 56) = 0;
    *(_QWORD *)(v306 + 64) = 0;
  }
  v312 = (_QWORD *)(v306 + 72);
  v311 = *(void **)(v306 + 72);
  *v310 = 0;
  *(_QWORD *)(v306 + 56) = 0;
  *(_QWORD *)(v306 + 64) = 0;
  if (v311)
  {
    *(_QWORD *)(v306 + 80) = v311;
    operator delete(v311);
    *v312 = 0;
    *(_QWORD *)(v306 + 80) = 0;
    *(_QWORD *)(v306 + 88) = 0;
  }
  *(_QWORD *)(v306 + 136) = 0;
  *(_OWORD *)(v306 + 104) = 0u;
  *(_OWORD *)(v306 + 120) = 0u;
  *(_OWORD *)v312 = 0u;
  *(_OWORD *)(v306 + 88) = 0u;
  *(_QWORD *)(*v12 + 144) = 0;
  v313 = *(_DWORD *)(v3 + 7672);
  *(_DWORD *)(v3 + 5296) = v313;
  v314 = *(_DWORD *)(v3 + 7676);
  *(_DWORD *)(v3 + 5304) = v314;
  if (*(_BYTE *)(v3 + 5316))
  {
    *(_DWORD *)(v3 + 5308) = v314;
    *(_DWORD *)(v3 + 5300) = v313;
  }
  v315 = *(double **)(v3 + 6552);
  v316 = **(unsigned __int8 **)(v3 + 8216);
  v317 = v315[5] + v315[5] + v315[6] + v315[6];
  *(double *)(v3 + 5216) = v317;
  if (v316)
    v318 = v315[19] + v315[19];
  else
    v318 = 0.0;
  v319 = v315[16] + v315[16] + v318 + v315[17] + v315[17];
  *(double *)(v3 + 5200) = v319;
  v320 = v315[9] + v315[9];
  *(double *)(v3 + 5208) = v320;
  v321 = v315[10] + v315[10];
  *(double *)(v3 + 5248) = v321;
  v322 = v315[7] + v315[7] + v315[8] + v315[8];
  *(double *)(v3 + 5224) = v322;
  v323 = *v315 + *v315 + v315[2] + v315[2];
  *(double *)(v3 + 5240) = v323;
  *(double *)(v3 + 5256) = v317 + v320 + v319 + v321 + v322 + v323;
  v324 = *(_DWORD *)(v3 + 5476) != 0;
  v325 = sub_20FD32664((_QWORD *)(v3 + 2656), (_QWORD *)(v3 + 2280));
  v330 = v325;
  v331 = (_QWORD *)v495[3];
  v333 = (double *)v331[53];
  v332 = v331[54];
  if ((unint64_t)v333 >= v332)
  {
    v335 = (double *)v331[52];
    v336 = ((char *)v333 - (char *)v335) >> 4;
    v337 = v336 + 1;
    if ((unint64_t)(v336 + 1) >> 60)
      sub_20E867F44();
    v338 = v332 - (_QWORD)v335;
    if (v338 >> 3 > v337)
      v337 = v338 >> 3;
    if ((unint64_t)v338 >= 0x7FFFFFFFFFFFFFF0)
      v339 = 0xFFFFFFFFFFFFFFFLL;
    else
      v339 = v337;
    if (v339)
    {
      if (v339 >> 60)
        sub_20E877A38();
      v340 = (char *)operator new(16 * v339);
    }
    else
    {
      v340 = 0;
    }
    v341 = &v340[16 * v336];
    *(double *)v341 = v330;
    v341[8] = v324;
    v334 = (double *)(v341 + 16);
    if (v333 != v335)
    {
      do
      {
        v342 = *((_QWORD *)v333 - 2);
        v333 -= 2;
        v343 = *((_BYTE *)v333 + 8);
        *((_QWORD *)v341 - 2) = v342;
        v341 -= 16;
        v341[8] = v343;
      }
      while (v333 != v335);
      v333 = (double *)v331[52];
    }
    v331[52] = v341;
    v331[53] = v334;
    v331[54] = &v340[16 * v339];
    if (v333)
      operator delete(v333);
  }
  else
  {
    *v333 = v325;
    *((_BYTE *)v333 + 8) = v324;
    v334 = v333 + 2;
  }
  v331[53] = v334;
  sub_20F89A778((uint64_t)oslog, (_QWORD *)v3, v494, (char **)(v3 + 14864), HIDWORD(v518), v517, SHIDWORD(v515), v515, v516, v326, v327, v328, v329);
  v344 = v495[3];
  v345 = *(_OWORD *)oslog;
  v346 = *(_OWORD *)&oslog[32];
  *(_OWORD *)(v344 + 16) = *(_OWORD *)&oslog[16];
  *(_OWORD *)(v344 + 32) = v346;
  *(_OWORD *)v344 = v345;
  v347 = *(_OWORD *)&oslog[48];
  v348 = *(_OWORD *)&oslog[64];
  v349 = *(_OWORD *)&oslog[96];
  *(_OWORD *)(v344 + 80) = *(_OWORD *)&oslog[80];
  *(_OWORD *)(v344 + 96) = v349;
  *(_OWORD *)(v344 + 48) = v347;
  *(_OWORD *)(v344 + 64) = v348;
  v350 = *(_OWORD *)&oslog[112];
  v351 = *(_OWORD *)&oslog[128];
  v352 = *(_OWORD *)&oslog[160];
  *(_OWORD *)(v344 + 144) = *(_OWORD *)&oslog[144];
  *(_OWORD *)(v344 + 160) = v352;
  *(_OWORD *)(v344 + 112) = v350;
  *(_OWORD *)(v344 + 128) = v351;
  v353 = *(_OWORD *)&oslog[176];
  v354 = *(_OWORD *)&oslog[192];
  v355 = *(_OWORD *)&oslog[208];
  *(_QWORD *)(v344 + 224) = *(_QWORD *)&oslog[224];
  *(_OWORD *)(v344 + 192) = v354;
  *(_OWORD *)(v344 + 208) = v355;
  *(_OWORD *)(v344 + 176) = v353;
  sub_20EB0F138(v344 + 232, (uint64_t *)&oslog[232]);
  v356 = *(_OWORD *)&oslog[272];
  v357 = *(_OWORD *)&oslog[288];
  v358 = *(_OWORD *)&oslog[304];
  *(_OWORD *)(v344 + 316) = *(_OWORD *)&oslog[316];
  *(_OWORD *)(v344 + 288) = v357;
  *(_OWORD *)(v344 + 304) = v358;
  *(_OWORD *)(v344 + 272) = v356;
  if (*(_QWORD *)(v344 + 360))
  {
    v359 = *(_QWORD **)(v344 + 352);
    if (v359)
    {
      do
      {
        v360 = (_QWORD *)*v359;
        operator delete(v359);
        v359 = v360;
      }
      while (v360);
    }
    *(_QWORD *)(v344 + 352) = 0;
    v361 = *(_QWORD *)(v344 + 344);
    if (v361)
    {
      for (kk = 0; kk != v361; ++kk)
        *(_QWORD *)(*(_QWORD *)(v344 + 336) + 8 * kk) = 0;
    }
    *(_QWORD *)(v344 + 360) = 0;
  }
  v363 = *(_QWORD *)&oslog[336];
  *(_QWORD *)&oslog[336] = 0;
  v364 = *(void **)(v344 + 336);
  *(_QWORD *)(v344 + 336) = v363;
  if (v364)
    operator delete(v364);
  *(_QWORD *)(v344 + 344) = *(_QWORD *)&oslog[344];
  *(_QWORD *)&oslog[344] = 0;
  v365 = *(_QWORD *)&oslog[360];
  v366 = *(_QWORD *)&oslog[352];
  *(_QWORD *)(v344 + 360) = *(_QWORD *)&oslog[360];
  *(_DWORD *)(v344 + 368) = *(_DWORD *)&oslog[368];
  *(_QWORD *)(v344 + 352) = v366;
  if (v365)
  {
    v367 = *(_QWORD *)(v366 + 8);
    v368 = *(_QWORD *)(v344 + 344);
    if ((v368 & (v368 - 1)) != 0)
    {
      if (v367 >= v368)
        v367 %= v368;
    }
    else
    {
      v367 &= v368 - 1;
    }
    *(_QWORD *)(*(_QWORD *)(v344 + 336) + 8 * v367) = v344 + 352;
    *(_QWORD *)&oslog[352] = 0;
    *(_QWORD *)&oslog[360] = 0;
  }
  if (*(_QWORD *)(v344 + 400))
  {
    v369 = *(_QWORD **)(v344 + 392);
    if (v369)
    {
      do
      {
        v370 = (_QWORD *)*v369;
        operator delete(v369);
        v369 = v370;
      }
      while (v370);
    }
    *(_QWORD *)(v344 + 392) = 0;
    v371 = *(_QWORD *)(v344 + 384);
    if (v371)
    {
      for (mm = 0; mm != v371; ++mm)
        *(_QWORD *)(*(_QWORD *)(v344 + 376) + 8 * mm) = 0;
    }
    *(_QWORD *)(v344 + 400) = 0;
  }
  v373 = *(_QWORD *)&oslog[376];
  *(_QWORD *)&oslog[376] = 0;
  v374 = *(void **)(v344 + 376);
  *(_QWORD *)(v344 + 376) = v373;
  if (v374)
    operator delete(v374);
  *(_QWORD *)(v344 + 384) = *(_QWORD *)&oslog[384];
  *(_QWORD *)&oslog[384] = 0;
  v375 = *(_QWORD *)&oslog[400];
  v376 = *(_QWORD *)&oslog[392];
  *(_QWORD *)(v344 + 400) = *(_QWORD *)&oslog[400];
  *(_DWORD *)(v344 + 408) = *(_DWORD *)&oslog[408];
  *(_QWORD *)(v344 + 392) = v376;
  if (v375)
  {
    v377 = *(_QWORD *)(v376 + 8);
    v378 = *(_QWORD *)(v344 + 384);
    if ((v378 & (v378 - 1)) != 0)
    {
      if (v377 >= v378)
        v377 %= v378;
    }
    else
    {
      v377 &= v378 - 1;
    }
    *(_QWORD *)(*(_QWORD *)(v344 + 376) + 8 * v377) = v344 + 392;
    *(_QWORD *)&oslog[392] = 0;
    *(_QWORD *)&oslog[400] = 0;
  }
  result = sub_20F04F084(oslog);
  if (*(_BYTE *)(v3 + 1932))
  {
    *(_DWORD *)(v3 + 12424) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 7952) + 16) + 16);
    *(_DWORD *)(v3 + 12428) = (*(_QWORD *)(v3 + 12408) - *(_QWORD *)(v3 + 12400)) >> 3;
    *(_DWORD *)(v3 + 12432) = (*(_QWORD *)(v3 + 14848) - *(_QWORD *)(v3 + 14840)) >> 3;
    *(_DWORD *)(v3 + 12436) = (*(_QWORD *)(v495[1] + 8) - *(_QWORD *)v495[1]) >> 4;
    v381 = *(_QWORD *)(v3 + 12448);
    if (v381)
      return sub_20F806650((uint64_t *)(v3 + 12424), v381, v380);
  }
  return result;
}

void sub_20FBD5280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  if (LOBYTE(STACK[0xEA8]) && SLOBYTE(STACK[0xEA7]) < 0)
    operator delete((void *)STACK[0xE90]);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a54);
  if (a44 < 0)
    operator delete(a39);
  sub_20E863784((uint64_t)&STACK[0x230]);
  _Unwind_Resume(a1);
}

void sub_20FBD5420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  sub_20E86E8C4(&a51);
  sub_20E86E8C4(&a39);
  sub_20E86E658((uint64_t)&STACK[0x230]);
  sub_20E863714((uint64_t)&STACK[0xE90]);
  _Unwind_Resume(a1);
}

void sub_20FBD5454(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)&STACK[0xE90]);
  _Unwind_Resume(a1);
}

void sub_20FBD5480(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0xE90]);
  _Unwind_Resume(a1);
}

void sub_20FBD54A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  char a68;
  uint64_t a70;

  sub_20E86E8C4(&a39);
  sub_20E86E8C4((uint64_t *)&STACK[0x218]);
  sub_20E86E658((uint64_t)&STACK[0xE90]);
  sub_20E863714((uint64_t)&a51);
  if (a68 < 0)
    operator delete(a63);
  sub_20E863784((uint64_t)&STACK[0x230]);
  sub_20E8E69C4((uint64_t)&a70);
  _Unwind_Resume(a1);
}

void sub_20FBD54CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  char a68;
  uint64_t a70;
  void *v70;
  int v71;

  if (v71 < 0)
    operator delete(v70);
  sub_20E86E658((uint64_t)&a39);
  sub_20E863714((uint64_t)&a51);
  if (a68 < 0)
    operator delete(a63);
  sub_20E863784((uint64_t)&STACK[0x230]);
  sub_20E8E69C4((uint64_t)&a70);
  _Unwind_Resume(a1);
}

void sub_20FBD5520(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0xE90]);
  _Unwind_Resume(a1);
}

void sub_20FBD5540(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x250]) && SLOBYTE(STACK[0x24F]) < 0)
    operator delete((void *)STACK[0x238]);
  if (STACK[0x230])
    os_release((void *)STACK[0x230]);
  sub_20E863714((uint64_t)&STACK[0xE90]);
  _Unwind_Resume(a1);
}

void sub_20FBD5588()
{
  JUMPOUT(0x20FBD5600);
}

void sub_20FBD5590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;

  sub_20E8E69C4((uint64_t)&a67);
  _Unwind_Resume(a1);
}

void sub_20FBD55A4()
{
  JUMPOUT(0x20FBD5600);
}

void sub_20FBD55B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  char a68;
  uint64_t a70;

  sub_20E863714(&a51);
  if (a68 < 0)
    operator delete(a63);
  sub_20E863784(&STACK[0x230]);
  sub_20E8E69C4(&a70);
  _Unwind_Resume(a1);
}

void sub_20FBD55B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  char a68;
  uint64_t a70;

  if (LOBYTE(STACK[0xEB0]) && SLOBYTE(STACK[0xEAF]) < 0)
    operator delete((void *)STACK[0xE98]);
  if (STACK[0xE90])
    os_release((void *)STACK[0xE90]);
  sub_20E863714((uint64_t)&a51);
  if (a68 < 0)
    operator delete(a63);
  sub_20E863784((uint64_t)&STACK[0x230]);
  sub_20E8E69C4((uint64_t)&a70);
  _Unwind_Resume(a1);
}

void sub_20FBD5620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;

  sub_20E8E69C4((uint64_t)&a67);
  _Unwind_Resume(a1);
}

void sub_20FBD563C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;

  sub_20E8E69C4((uint64_t)&a67);
  _Unwind_Resume(a1);
}

void sub_20FBD5650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;

  sub_20E8E69C4((uint64_t)&a67);
  _Unwind_Resume(a1);
}

void sub_20FBD5664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;

  sub_20E8E69C4((uint64_t)&a67);
  _Unwind_Resume(a1);
}

void sub_20FBD5680(void *a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  JUMPOUT(0x20FBD56A8);
}

void sub_20FBD5690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;

  sub_20E8E69C4((uint64_t)&a67);
  _Unwind_Resume(a1);
}

void sub_20FBD56A4(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

unint64_t sub_20FBD56B0(int64x2_t *a1, unsigned int a2, _DWORD *a3, uint64_t a4, char a5)
{
  int64x2_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unsigned int v24;
  unsigned int v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  __int8 *v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unsigned int *v50;
  _DWORD *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  unint64_t v55;
  unsigned int *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _BYTE *v62;
  unsigned int *v63;
  int64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int *v69;
  _OWORD *v70;
  unsigned int *v71;
  uint64_t v72;
  __int128 v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  _DWORD *v77;
  int i;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int128 *v84;
  int64x2_t *v85;
  unint64_t v86;
  uint64_t j;
  uint64_t v88;
  void **v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  unsigned int v94;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  int64x2_t *v103;
  float64x2_t v104;
  float64x2_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unsigned int *v111;
  _DWORD *v112;
  unsigned int v113;
  unint64_t v114;
  unint64_t v115;
  unsigned int *v116;
  _DWORD *v117;
  unsigned int v118;
  uint64_t v119;
  double v120;
  double v122;
  uint64_t v124;
  int64x2_t v126;
  float64x2_t v128;
  int64x2_t v129;
  int64x2_t v130;
  int64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  uint64_t v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *p_shared_owners;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _BYTE *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t k;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  int v180;
  _QWORD *v181;
  _QWORD *v182;
  _QWORD *v183;
  _QWORD *v184;
  _QWORD *v185;
  uint64_t v186;
  __int8 *v187;
  char **v188;
  _DWORD *v189;
  uint64_t v190;
  unsigned int v191;
  uint64_t *v192;
  _DWORD *v193;
  _DWORD *v194;
  _QWORD *v195;
  uint64_t v196;
  uint64_t i64;
  __int8 *v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  char *v202;
  char **v203;
  char *v204;
  unsigned int *v205;
  unsigned int *v206;
  char *v207;
  unsigned int v208;
  int64_t v209;
  unint64_t v210;
  void **v211;
  size_t v212;
  uint64_t *v213;
  uint64_t *v214;
  __int8 *v215;
  int v216;
  __int128 *v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  float64x2_t v249;
  double v250;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v255;
  __int128 *v256;
  uint64_t v257;
  uint64_t *v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  uint64_t v276;
  double *v277;
  uint64_t v278;
  uint64_t v279;
  float64x2_t v280;
  int8x16_t v281;
  int8x16_t v282;
  int8x16_t v283;
  float64x2_t v284;
  double v285;
  float64x2_t v286;
  double v287;
  float64x2_t v288;
  double v289;
  double v290;
  double v291;
  double v292;
  double v293;
  double v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  float64x2_t v326;
  double v327;
  float64x2_t v328;
  float64x2_t v329;
  float64x2_t v330;
  float64x2_t v331;
  float64x2_t v332;
  uint64_t v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  float64x2_t v351;
  double v352;
  float64x2_t v353;
  float64x2_t v354;
  float64x2_t v355;
  float64x2_t v356;
  float64x2_t v357;
  uint64_t v358;
  double *v359;
  float64x2_t v360;
  double v361;
  float64x2_t v362;
  float64x2_t v363;
  float64x2_t v364;
  float64x2_t v365;
  float64x2_t v366;
  double *v367;
  unint64_t v368;
  unint64_t v369;
  size_t v370;
  const void **v371;
  uint64_t v372;
  uint64_t v373;
  double *v374;
  float64x2_t v375;
  double v376;
  float64x2_t v377;
  float64x2_t v378;
  float64x2_t v379;
  float64x2_t v380;
  float64x2_t v381;
  double *v382;
  unint64_t v383;
  unint64_t v384;
  size_t v385;
  const void **v386;
  uint64_t v387;
  double *v388;
  double *v389;
  int v390;
  uint64_t v391;
  unint64_t v392;
  _QWORD *v393;
  uint64_t v394;
  _QWORD *v395;
  uint64_t v396;
  unint64_t v397;
  unint64_t v398;
  uint64_t v399;
  uint64_t v400;
  void **v401;
  unint64_t data_low;
  unsigned int v403;
  size_t v404;
  uint64_t v405;
  int64x2_t *v406;
  uint64_t v407;
  double *v408;
  uint64_t v409;
  uint64_t v410;
  double *v411;
  int v412;
  int v413;
  BOOL v414;
  BOOL v415;
  int v416;
  unint64_t v417;
  unint64_t v418;
  uint64_t v419;
  size_t v420;
  const char *v421;
  unsigned __int8 v422;
  unsigned __int8 v423;
  const char *v424;
  size_t v425;
  _BYTE *v426;
  unint64_t v427;
  const char *v428;
  int v429;
  uint64_t v430;
  uint64_t v431;
  _BYTE *v432;
  uint64_t v433;
  uint64_t v434;
  NSObject *v435;
  size_t v436;
  std::__shared_weak_count_vtbl *v437;
  std::__shared_weak_count *v438;
  std::__shared_weak_count *v439;
  unint64_t *v440;
  unint64_t v441;
  unint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  std::string::size_type v447;
  std::__shared_weak_count *v448;
  unint64_t *v449;
  unint64_t v450;
  std::__shared_weak_count *v451;
  unint64_t *v452;
  unint64_t v453;
  uint64_t v454;
  std::__shared_weak_count *v455;
  unint64_t *v456;
  unint64_t v457;
  std::__shared_weak_count *v458;
  unint64_t *v459;
  unint64_t v460;
  std::__shared_weak_count *v461;
  unint64_t *v462;
  unint64_t v463;
  std::__shared_weak_count *v464;
  unint64_t *v465;
  unint64_t v466;
  void *v467;
  std::__shared_weak_count *v468;
  unint64_t *v469;
  unint64_t v470;
  uint64_t v471;
  unint64_t result;
  unsigned int v473;
  int v474;
  unint64_t v475;
  unint64_t v476;
  unsigned int *v477;
  _DWORD *v478;
  unsigned int v479;
  char v480;
  const char *v481;
  uint64_t v482;
  int v483;
  unint64_t v484;
  uint64_t v485;
  unsigned int v486;
  std::runtime_error *v487;
  const std::string::value_type *v488;
  std::string::size_type v489;
  std::string *v490;
  __int128 v491;
  std::string *v492;
  __int128 v493;
  size_t v494;
  std::string *v495;
  __int128 v496;
  uint64_t v497;
  uint64_t v498;
  unint64_t v499;
  unint64_t v500;
  unsigned int *v501;
  _DWORD *v502;
  unsigned int v503;
  char v504;
  const char *v505;
  uint64_t v506;
  int v507;
  unint64_t v508;
  uint64_t v509;
  unsigned int v510;
  std::runtime_error *exception;
  const std::string::value_type *v512;
  std::string::size_type v513;
  std::string *v514;
  __int128 v515;
  std::string *v516;
  __int128 v517;
  size_t v518;
  std::string *v519;
  __int128 v520;
  std::runtime_error *v521;
  _QWORD *v522;
  _BYTE *v523;
  uint64_t v524;
  _QWORD *v525;
  _QWORD *v526;
  size_t v527;
  _QWORD *v528;
  std::string *v529;
  uint64_t v530;
  uint64_t *v531;
  uint64_t v532;
  char *v533;
  std::runtime_error *v534;
  _QWORD *v535;
  _BYTE *v536;
  uint64_t v537;
  _QWORD *v538;
  _QWORD *v539;
  size_t v540;
  _QWORD *v541;
  std::string *v542;
  uint64_t v543;
  uint64_t *v544;
  uint64_t v545;
  char *v546;
  std::runtime_error *v547;
  unsigned __int8 v548;
  uint64_t v549;
  const char *v550;
  NSObject *v551;
  std::string *v552;
  unsigned __int8 v553;
  uint64_t v554;
  const char *v555;
  NSObject *v556;
  std::string *v557;
  __int128 v558;
  __int128 v559;
  __int128 v560;
  __int128 v561;
  __int128 v562;
  __int128 v563;
  __int128 v564;
  __int128 v565;
  __int128 v566;
  __int128 v567;
  __int128 v568;
  __int128 v569;
  __int128 v570;
  __int128 v571;
  __int128 v572;
  __int128 v573;
  __int128 v574;
  __int128 v575;
  __int128 v576;
  __int128 v577;
  __int128 v578;
  __int128 v579;
  __int128 v580;
  __int128 v581;
  __int128 v582;
  __int128 v583;
  __int128 v584;
  __int128 v585;
  __int128 v586;
  __int128 v587;
  __int128 v588;
  __int128 v589;
  __int128 v590;
  __int128 v591;
  __int128 v592;
  __int128 v593;
  __int128 v594;
  __int128 v595;
  __int128 v596;
  __int128 v597;
  __int128 v598;
  __int128 v599;
  __int128 v600;
  __int128 v601;
  __int128 v602;
  __int128 v603;
  __int128 v604;
  __int128 v605;
  __int128 v606;
  __int128 v607;
  __int128 v608;
  __int128 v609;
  __int128 v610;
  __int128 v611;
  __int128 v612;
  __int128 v613;
  __int128 v614;
  __int128 v615;
  __int128 v616;
  __int128 v617;
  __int128 v618;
  __int128 v619;
  __int128 v620;
  __int128 v621;
  __int128 v622;
  __int128 v623;
  __int128 v624;
  __int128 v625;
  __int128 v626;
  __int128 v627;
  __int128 v628;
  __int128 v629;
  __int128 v630;
  __int128 v631;
  __int128 v632;
  __int128 v633;
  __int128 v634;
  __int128 v635;
  __int128 v636;
  __int128 v637;
  __int128 v638;
  __int128 v639;
  __int128 v640;
  __int128 v641;
  __int128 v642;
  __int128 v643;
  __int128 v644;
  __int128 v645;
  __int128 v646;
  __int128 v647;
  __int128 v648;
  __int128 v649;
  __int128 v650;
  __int128 v651;
  __int128 v652;
  __int128 v653;
  __int128 v654;
  __int128 v655;
  __int128 v656;
  __int128 v657;
  __int128 v658;
  __int128 v659;
  __int128 v660;
  __int128 v661;
  __int128 v662;
  __int128 v663;
  __int128 v664;
  __int128 v665;
  __int128 v666;
  __int128 v667;
  __int128 v668;
  __int128 v669;
  __int128 v670;
  __int128 v671;
  __int128 v672;
  __int128 v673;
  __int128 v674;
  __int128 v675;
  __int128 v676;
  __int128 v677;
  __int128 v678;
  __int128 v679;
  __int128 v680;
  __int128 v681;
  __int128 v682;
  __int128 v683;
  __int128 v684;
  __int128 v685;
  uint64_t v686;
  uint64_t v687;
  __int128 v688;
  __int128 v689;
  __int128 v690;
  __int128 v691;
  __int128 v692;
  __int128 v693;
  __int128 v694;
  __int128 v695;
  __int128 v696;
  __int128 v697;
  __int128 v698;
  __int128 v699;
  __int128 v700;
  __int128 v701;
  __int128 v702;
  __int128 v703;
  __int128 v704;
  __int128 v705;
  __int128 v706;
  __int128 v707;
  __int128 v708;
  __int128 v709;
  __int128 v710;
  int64x2_t *v711;
  __int128 v713;
  __int128 v714;
  uint64_t v715;
  __int128 v716;
  __int128 v717;
  uint64_t v718;
  __int128 v719;
  __int128 v720;
  uint64_t *v721;
  uint64_t v722;
  __int128 v723;
  __int128 v724;
  __int128 v726;
  int v727;
  int v728;
  unsigned int v729;
  int v731;
  int64x2_t *__vala;
  void **v734;
  __int8 *v735;
  int64x2_t *v736;
  int64x2_t *v737;
  uint64_t v738;
  int64x2_t *v739;
  void **v740;
  uint64_t v741;
  _QWORD v742[2];
  unsigned __int8 v743;
  std::string *v744;
  std::string v745;
  float64x2_t v746;
  uint64_t v747;
  float64x2_t v748;
  double v749;
  std::string v750;
  uint64_t v751;
  char *category;
  uint64_t v753;
  const char *v754;
  uint64_t v755;
  _BYTE v756[32];
  __int128 v757;
  __int128 v758;
  __int128 v759;
  _BYTE object[88];
  __int128 v761;
  __int128 v762;
  __int128 v763;
  __int128 v764;
  __int128 v765;
  __int128 v766;
  __int128 v767;
  __int128 v768;
  __int128 v769;
  __int128 v770;
  __int128 v771;
  __int128 v772;
  __int128 v773;
  __int128 v774;
  __int128 v775;
  __int128 v776;
  __int128 v777;
  __int128 v778;
  __int128 v779;
  __int128 v780;
  __int128 v781;
  __int128 v782;
  __int128 v783;
  __int128 v784;
  __int128 v785;
  __int128 v786;
  __int128 v787;
  __int128 v788;
  __int128 v789;
  __int128 v790;
  __int128 v791;
  __int128 v792;
  __int128 v793;
  __int128 v794;
  __int128 v795;
  __int128 v796;
  __int128 v797;
  __int128 v798;
  __int128 v799;
  __int128 v800;
  __int128 v801;
  __int128 v802;
  __int128 v803;
  __int128 v804;
  __int128 v805;
  __int128 v806;
  __int128 v807;
  __int128 v808;
  __int128 v809;
  __int128 v810;
  __int128 v811;
  __int128 v812;
  __int128 v813;
  __int128 v814;
  __int128 v815;
  __int128 v816;
  __int128 v817;
  __int128 v818;
  __int128 v819;
  __int128 v820;
  __int128 v821;
  __int128 v822;
  __int128 v823;
  __int128 v824;
  __int128 v825;
  __int128 v826;
  __int128 v827;
  __int128 v828;
  __int128 v829;
  __int128 v830;
  __int128 v831;
  __int128 v832;
  __int128 v833;
  __int128 v834;
  __int128 v835;
  __int128 v836;
  __int128 v837;
  __int128 v838;
  __int128 v839;
  __int128 v840;
  __int128 v841;
  __int128 v842;
  __int128 v843;
  __int128 v844;
  __int128 v845;
  __int128 v846;
  __int128 v847;
  __int128 v848;
  __int128 v849;
  __int128 v850;
  __int128 v851;
  __int128 v852;
  __int128 v853;
  __int128 v854;
  __int128 v855;
  __int128 v856;
  __int128 v857;
  __int128 v858;
  __int128 v859;
  __int128 v860;
  __int128 v861;
  __int128 v862;
  __int128 v863;
  __int128 v864;
  __int128 v865;
  __int128 v866;
  __int128 v867;
  uint64_t v868;
  uint64_t v869;

  v5 = a1;
  v869 = *MEMORY[0x24BDAC8D0];
  v737 = a1 + 324;
  v727 = sub_20FA558B8((uint64_t)a1[324].i64, 0);
  sub_20FBD9D00((uint64_t)v5);
  v6 = v5[348].i64[1];
  v7 = v5[349].i64[0];
  while (v6 != v7)
  {
    v8 = *(_QWORD *)(v6 + 8);
    v9 = *(_DWORD *)v6;
    v10 = v5[1].i64[1];
    v11 = v5[2].i64[0];
    if (v10 != v11)
    {
      while (*(_DWORD *)(v8 + 16) != *(_DWORD *)(*(_QWORD *)v10 + 32))
      {
        v10 += 8;
        if (v10 == v11)
          goto LABEL_18;
      }
    }
    if (v10 == v11)
    {
LABEL_18:
      if ((*(_BYTE *)(v8 + 4) & 6) == 0
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 1628, (uint64_t)"id_variable.second.state.isMarginalized() || id_variable.second.state.isRemoved()", 81, (uint64_t)"SLAM variables not associated to an entry in front-end tracks should have been marked as marginalized or removed.", 113, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_497;
      }
    }
    else
    {
      v12 = *(_QWORD *)v10;
      if (((*(_BYTE *)(v8 + 4) & 6) != 0 || *(_DWORD *)(v12 + 520) != 2)
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 1638, (uint64_t)"!id_variable.second.state.isMarginalized() && !id_variable.second.state.isRemoved() && track_ptr->isPersistent()", 112, (uint64_t)"SLAM variables associated to an entry in front-end tracks should not have been marked as marginalized or removed, and the track is persistent.", 142, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_497;
      }
      v14 = *(uint64_t **)(v12 + 496);
      v13 = *(uint64_t **)(v12 + 504);
      v15 = *(v13 - 8);
      v16 = *((_DWORD *)v13 - 14);
      while (v14 != v13)
      {
        if (*((_DWORD *)v14 + 2) > v16)
        {
          v15 = *v14;
          v16 = *((_DWORD *)v14 + 2);
        }
        v14 += 8;
      }
      v17 = v5->i64[1];
      v19 = (_QWORD *)(v17 + 56);
      v18 = *(uint64_t **)(v17 + 56);
      if (!v18)
        goto LABEL_33;
      v20 = (_QWORD *)(v17 + 56);
      do
      {
        v21 = v18[4];
        if (v21 < v15)
        {
          ++v18;
        }
        else if (v21 == v15)
        {
          if (*((_DWORD *)v18 + 10) < v16)
            ++v18;
          else
            v20 = v18;
        }
        else
        {
          v20 = v18;
        }
        v18 = (uint64_t *)*v18;
      }
      while (v18);
      if (v20 == v19 || (v22 = v20[4], v15 < v22) || v15 == v22 && *((_DWORD *)v20 + 10) > v16)
      {
LABEL_33:
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 1651, (uint64_t)"track_latest_state_with_obs_iter != this->viobadata_ref_.state_set->end()", 73, (uint64_t)"The state associated to the latest observation should be in state set.", 70, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_497;
        }
        v17 = v5->i64[1];
        v20 = v19;
      }
      v23 = (_QWORD *)(v17 + 56);
      if (v20 == (_QWORD *)(v17 + 56))
      {
        v25 = -1;
      }
      else
      {
        v24 = 0;
        do
        {
          v25 = v24;
          v26 = (_QWORD *)v20[1];
          if (v26)
          {
            do
            {
              v27 = v26;
              v26 = (_QWORD *)*v26;
            }
            while (v26);
          }
          else
          {
            do
            {
              v27 = (_QWORD *)v20[2];
              _ZF = *v27 == (_QWORD)v20;
              v20 = v27;
            }
            while (!_ZF);
          }
          v24 = v25 + 1;
          v20 = v27;
        }
        while (v27 != v23);
      }
      if (v25 > v5[121].i32[0])
      {
        *(_DWORD *)(v12 + 520) = 0;
        if (!sub_20FBD98F4((uint64_t)v737, v9))
        {
          v743 = 10;
          strcpy((char *)v742, "SLAM track");
          v497 = v5[348].i64[1];
          v498 = v5[349].i64[0];
          if (v498 == v497)
            goto LABEL_511;
          v499 = (v498 - v497) >> 4;
          do
          {
            v500 = v499 >> 1;
            v501 = (unsigned int *)(v497 + 16 * (v499 >> 1));
            v503 = *v501;
            v502 = v501 + 4;
            v499 += ~(v499 >> 1);
            if (v503 < v9)
              v497 = (uint64_t)v502;
            else
              v499 = v500;
          }
          while (v499);
          if (v497 == v498 || *(_DWORD *)v497 != v9)
          {
LABEL_511:
            v505 = "not found";
          }
          else
          {
            v504 = *(_BYTE *)(*(_QWORD *)(v497 + 8) + 4);
            if ((v504 & 4) != 0)
            {
              v505 = "marginalized";
            }
            else if ((v504 & 1) != 0)
            {
              v505 = "new";
            }
            else if ((v504 & 2) != 0)
            {
              v505 = "removed";
            }
            else
            {
              v505 = "unknown";
            }
          }
          sub_20F9B2A4C(&v751);
          v506 = 0x617274204D414C53;
          if (**(int **)(v751 + 56) <= 5
            && ((v507 = *(unsigned __int8 *)(v751 + 72),
                 (v508 = sub_20E8C31DC(v751, "OSLogSurrogateAppender", 1, 0)) == 0)
              ? (v509 = 0)
              : (v509 = v508 + 16),
                v507 || v508))
          {
            sub_20E863438((uint64_t)object);
            v535 = sub_20E86A980(&object[16], (uint64_t)"Failed to marginalize state ", 28);
            std::to_string((std::string *)v756, v9);
            if (v756[23] >= 0)
              v536 = v756;
            else
              v536 = *(_BYTE **)v756;
            if (v756[23] >= 0)
              v537 = v756[23];
            else
              v537 = *(_QWORD *)&v756[8];
            v538 = sub_20E86A980(v535, (uint64_t)v536, v537);
            v539 = sub_20E86A980(v538, (uint64_t)": ", 2);
            v540 = strlen(v505);
            v541 = sub_20E86A980(v539, (uint64_t)v505, v540);
            sub_20E86A980(v541, (uint64_t)".", 1);
            if ((v756[23] & 0x80000000) != 0)
              operator delete(*(void **)v756);
            sub_20E923E88(object, &v750);
            v745.__r_.__value_.__r.__words[0] = (std::string::size_type)&v751;
            v745.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
            v745.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
            LODWORD(v746.f64[0]) = 5;
            *(_QWORD *)&v746.f64[1] = "unknown file";
            LODWORD(v747) = 2809;
            v749 = 0.0;
            *(_QWORD *)&v748.f64[0] = "unknown function";
            v748.f64[1] = 0.0;
            if ((v750.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v542 = &v750;
            else
              v542 = (std::string *)v750.__r_.__value_.__r.__words[0];
            v744 = v542;
            v543 = *(_QWORD *)v745.__r_.__value_.__l.__data_;
            v544 = (uint64_t *)(*(_QWORD *)v745.__r_.__value_.__l.__data_ + 16);
            if (*(char *)(*(_QWORD *)v745.__r_.__value_.__l.__data_ + 39) < 0)
            {
              v546 = *(char **)(v543 + 16);
              v545 = *(_QWORD *)(v543 + 24);
            }
            else
            {
              v545 = *(unsigned __int8 *)(*(_QWORD *)v745.__r_.__value_.__l.__data_ + 39);
              v546 = (char *)(*(_QWORD *)v745.__r_.__value_.__l.__data_ + 16);
            }
            category = v546;
            v753 = v545;
            v553 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v553 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)v756);
              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v756);
              if (v756[24] && (v756[23] & 0x80000000) != 0)
                operator delete(*(void **)v756);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
            }
            v554 = byte_254A4A4F8[23];
            if (byte_254A4A4F8[23] >= 0)
            {
              v555 = byte_254A4A4F8;
            }
            else
            {
              v554 = *(_QWORD *)&byte_254A4A4F8[8];
              v555 = *(const char **)byte_254A4A4F8;
            }
            v754 = v555;
            v755 = v554;
            *(_QWORD *)v756 = os_log_create(v555, category);
            sub_20E86E5A8(&v756[8], (uint64_t)&v754);
            sub_20E86E5A8((_QWORD *)&v757 + 1, (uint64_t)&category);
            v556 = *(NSObject **)v756;
            sub_20E86E44C((uint64_t)v756);
            sub_20FBEC934(v509, v544, v556, OS_LOG_TYPE_ERROR, (const char **)&v744);
            if (v507)
            {
              v557 = &v750;
              if ((v750.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v557 = (std::string *)v750.__r_.__value_.__r.__words[0];
              sub_20E8C003C((uint64_t)&v745, "%s", (const char *)v557);
              sub_20E863570((uint64_t)&v745);
            }
            sub_20E863714((uint64_t)&v745);
            if (SHIBYTE(v750.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v750.__r_.__value_.__l.__data_);
            sub_20E863784((uint64_t)object);
            v510 = v743;
            v506 = v742[0];
          }
          else
          {
            v510 = 10;
          }
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          *((_BYTE *)&v750.__r_.__value_.__s + 23) = 12;
          strcpy((char *)&v750, "marginalize ");
          if ((v510 & 0x80u) == 0)
            v512 = (const std::string::value_type *)v742;
          else
            v512 = (const std::string::value_type *)v506;
          if ((v510 & 0x80u) == 0)
            v513 = v510;
          else
            v513 = v742[1];
          v514 = std::string::append(&v750, v512, v513);
          v515 = *(_OWORD *)&v514->__r_.__value_.__l.__data_;
          v745.__r_.__value_.__r.__words[2] = v514->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v745.__r_.__value_.__l.__data_ = v515;
          v514->__r_.__value_.__l.__size_ = 0;
          v514->__r_.__value_.__r.__words[2] = 0;
          v514->__r_.__value_.__r.__words[0] = 0;
          v516 = std::string::append(&v745, " p ", 3uLL);
          v517 = *(_OWORD *)&v516->__r_.__value_.__l.__data_;
          *(_QWORD *)&v756[16] = *((_QWORD *)&v516->__r_.__value_.__l + 2);
          *(_OWORD *)v756 = v517;
          v516->__r_.__value_.__l.__size_ = 0;
          v516->__r_.__value_.__r.__words[2] = 0;
          v516->__r_.__value_.__r.__words[0] = 0;
          v518 = strlen(v505);
          v519 = std::string::append((std::string *)v756, v505, v518);
          v520 = *(_OWORD *)&v519->__r_.__value_.__l.__data_;
          *(_QWORD *)&object[16] = *((_QWORD *)&v519->__r_.__value_.__l + 2);
          *(_OWORD *)object = v520;
          v519->__r_.__value_.__l.__size_ = 0;
          v519->__r_.__value_.__r.__words[2] = 0;
          v519->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(exception, (const std::string *)object);
          exception->__vftable = (std::runtime_error_vtbl *)&off_24CA04F20;
          __cxa_throw(exception, (struct type_info *)&unk_24CA04F38, (void (*)(void *))std::runtime_error::~runtime_error);
        }
        v5[491].i16[6] = 0;
        v5[491].i32[2] = 0;
      }
    }
    v6 += 16;
  }
  v28 = (_QWORD *)v5->i64[1];
  if (v28[8] < (unint64_t)(a2 + 1))
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 1018, (uint64_t)"this->viobadata_ref_.state_set->size() >= 1 + kept_idx", 54, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
LABEL_497:
      abort();
    }
    v28 = (_QWORD *)v5->i64[1];
  }
  v29 = (_QWORD *)v28[6];
  v30 = v29[4];
  v31 = v29[5];
  v32 = (_QWORD *)v29[1];
  if (v32)
  {
    v33 = (_QWORD *)v29[1];
    do
    {
      v34 = v33;
      v33 = (_QWORD *)*v33;
    }
    while (v33);
  }
  else
  {
    v35 = (_QWORD *)v28[6];
    do
    {
      v34 = (_QWORD *)v35[2];
      _ZF = *v34 == (_QWORD)v35;
      v35 = v34;
    }
    while (!_ZF);
  }
  if (a2)
  {
    if (v32)
    {
      do
      {
        v36 = v32;
        v32 = (_QWORD *)*v32;
      }
      while (v32);
    }
    else
    {
      v39 = (_QWORD *)v28[6];
      do
      {
        v36 = (_QWORD *)v39[2];
        _ZF = *v36 == (_QWORD)v39;
        v39 = v36;
      }
      while (!_ZF);
    }
    v38 = v36[4];
    v37 = v36[5];
  }
  else
  {
    v37 = v29[5];
    v38 = v29[4];
  }
  v739 = v5 + 425;
  v722 = v34[5];
  v715 = v34[4];
  if (v5[132].i8[5])
  {
    sub_20FBD9ED8((uint64_t)v5, v31);
  }
  else
  {
    v92 = v28 + 7;
    if (v29 != v28 + 7)
    {
      do
      {
        v93 = v29[4];
        v94 = *((_DWORD *)v29 + 10);
        _ZF = v93 == v38 && v94 == (_DWORD)v37;
        if (!_ZF && (v93 != v30 || v94 != (_DWORD)v31))
          sub_20FBD9ED8((uint64_t)v5, v94);
        v97 = (_QWORD *)v29[1];
        if (v97)
        {
          do
          {
            v98 = v97;
            v97 = (_QWORD *)*v97;
          }
          while (v97);
        }
        else
        {
          do
          {
            v98 = (_QWORD *)v29[2];
            _ZF = *v98 == (_QWORD)v29;
            v29 = v98;
          }
          while (!_ZF);
        }
        v29 = v98;
      }
      while (v98 != v92);
    }
  }
  v718 = v38;
  v729 = v31;
  v731 = v37;
  v40 = v5[384].i64[1];
  v41 = v5[385].i64[0];
  v736 = v5;
  if (v40 != v41)
  {
    v42 = &v5[491].i8[8];
    v734 = (void **)&v5[440].i64[1];
    while (1)
    {
      if ((*(_BYTE *)(*(_QWORD *)(v40 + 8) + 4) & 6) != 0)
        goto LABEL_76;
      v44 = *(_DWORD *)v40;
      v45 = v5[384].i64[1];
      v46 = v5[385].i64[0];
      v47 = v45;
      if (v46 != v45)
      {
        v48 = (v46 - v45) >> 4;
        v47 = v5[384].i64[1];
        do
        {
          v49 = v48 >> 1;
          v50 = (unsigned int *)(v47 + 16 * (v48 >> 1));
          v52 = *v50;
          v51 = v50 + 4;
          v48 += ~(v48 >> 1);
          if (v52 < v44)
            v47 = (uint64_t)v51;
          else
            v48 = v49;
        }
        while (v48);
      }
      if (v47 == v46 || *(_DWORD *)v47 != v44 || (v53 = *(_QWORD *)(v47 + 8), (*(_BYTE *)(v53 + 4) & 7) != 0))
      {
        v743 = 10;
        strcpy((char *)v742, "track/line");
        if (v46 == v45)
          goto LABEL_482;
        v475 = (v46 - v45) >> 4;
        do
        {
          v476 = v475 >> 1;
          v477 = (unsigned int *)(v45 + 16 * (v475 >> 1));
          v479 = *v477;
          v478 = v477 + 4;
          v475 += ~(v475 >> 1);
          if (v479 < v44)
            v45 = (uint64_t)v478;
          else
            v475 = v476;
        }
        while (v475);
        if (v45 == v46 || *(_DWORD *)v45 != v44)
        {
LABEL_482:
          v481 = "not found";
        }
        else
        {
          v480 = *(_BYTE *)(*(_QWORD *)(v45 + 8) + 4);
          if ((v480 & 4) != 0)
          {
            v481 = "marginalized";
          }
          else if ((v480 & 1) != 0)
          {
            v481 = "new";
          }
          else if ((v480 & 2) != 0)
          {
            v481 = "removed";
          }
          else
          {
            v481 = "unknown";
          }
        }
        sub_20F9B2A4C(&v751);
        v482 = 0x696C2F6B63617274;
        if (**(int **)(v751 + 56) <= 5
          && ((v483 = *(unsigned __int8 *)(v751 + 72),
               (v484 = sub_20E8C31DC(v751, "OSLogSurrogateAppender", 1, 0)) == 0)
            ? (v485 = 0)
            : (v485 = v484 + 16),
              v483 || v484))
        {
          sub_20E863438((uint64_t)object);
          v522 = sub_20E86A980(&object[16], (uint64_t)"Failed to marginalize state ", 28);
          std::to_string((std::string *)v756, v44);
          if (v756[23] >= 0)
            v523 = v756;
          else
            v523 = *(_BYTE **)v756;
          if (v756[23] >= 0)
            v524 = v756[23];
          else
            v524 = *(_QWORD *)&v756[8];
          v525 = sub_20E86A980(v522, (uint64_t)v523, v524);
          v526 = sub_20E86A980(v525, (uint64_t)": ", 2);
          v527 = strlen(v481);
          v528 = sub_20E86A980(v526, (uint64_t)v481, v527);
          sub_20E86A980(v528, (uint64_t)".", 1);
          if ((v756[23] & 0x80000000) != 0)
            operator delete(*(void **)v756);
          sub_20E923E88(object, &v750);
          v745.__r_.__value_.__r.__words[0] = (std::string::size_type)&v751;
          v745.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
          v745.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
          LODWORD(v746.f64[0]) = 5;
          *(_QWORD *)&v746.f64[1] = "unknown file";
          LODWORD(v747) = 2809;
          v749 = 0.0;
          *(_QWORD *)&v748.f64[0] = "unknown function";
          v748.f64[1] = 0.0;
          if ((v750.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v529 = &v750;
          else
            v529 = (std::string *)v750.__r_.__value_.__r.__words[0];
          v744 = v529;
          v530 = *(_QWORD *)v745.__r_.__value_.__l.__data_;
          v531 = (uint64_t *)(*(_QWORD *)v745.__r_.__value_.__l.__data_ + 16);
          if (*(char *)(*(_QWORD *)v745.__r_.__value_.__l.__data_ + 39) < 0)
          {
            v533 = *(char **)(v530 + 16);
            v532 = *(_QWORD *)(v530 + 24);
          }
          else
          {
            v532 = *(unsigned __int8 *)(*(_QWORD *)v745.__r_.__value_.__l.__data_ + 39);
            v533 = (char *)(*(_QWORD *)v745.__r_.__value_.__l.__data_ + 16);
          }
          category = v533;
          v753 = v532;
          v548 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v548 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)v756);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v756);
            if (v756[24] && (v756[23] & 0x80000000) != 0)
              operator delete(*(void **)v756);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
          v549 = byte_254A4A4F8[23];
          if (byte_254A4A4F8[23] >= 0)
          {
            v550 = byte_254A4A4F8;
          }
          else
          {
            v549 = *(_QWORD *)&byte_254A4A4F8[8];
            v550 = *(const char **)byte_254A4A4F8;
          }
          v754 = v550;
          v755 = v549;
          *(_QWORD *)v756 = os_log_create(v550, category);
          sub_20E86E5A8(&v756[8], (uint64_t)&v754);
          sub_20E86E5A8((_QWORD *)&v757 + 1, (uint64_t)&category);
          v551 = *(NSObject **)v756;
          sub_20E86E44C((uint64_t)v756);
          sub_20FBEDD44(v485, v531, v551, OS_LOG_TYPE_ERROR, (const char **)&v744);
          if (v483)
          {
            v552 = &v750;
            if ((v750.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v552 = (std::string *)v750.__r_.__value_.__r.__words[0];
            sub_20E8C003C((uint64_t)&v745, "%s", (const char *)v552);
            sub_20E863570((uint64_t)&v745);
          }
          sub_20E863714((uint64_t)&v745);
          if (SHIBYTE(v750.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v750.__r_.__value_.__l.__data_);
          sub_20E863784((uint64_t)object);
          v486 = v743;
          v482 = v742[0];
        }
        else
        {
          v486 = 10;
        }
        v487 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        *((_BYTE *)&v750.__r_.__value_.__s + 23) = 12;
        strcpy((char *)&v750, "marginalize ");
        if ((v486 & 0x80u) == 0)
          v488 = (const std::string::value_type *)v742;
        else
          v488 = (const std::string::value_type *)v482;
        if ((v486 & 0x80u) == 0)
          v489 = v486;
        else
          v489 = v742[1];
        v490 = std::string::append(&v750, v488, v489);
        v491 = *(_OWORD *)&v490->__r_.__value_.__l.__data_;
        v745.__r_.__value_.__r.__words[2] = v490->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v745.__r_.__value_.__l.__data_ = v491;
        v490->__r_.__value_.__l.__size_ = 0;
        v490->__r_.__value_.__r.__words[2] = 0;
        v490->__r_.__value_.__r.__words[0] = 0;
        v492 = std::string::append(&v745, " p ", 3uLL);
        v493 = *(_OWORD *)&v492->__r_.__value_.__l.__data_;
        *(_QWORD *)&v756[16] = *((_QWORD *)&v492->__r_.__value_.__l + 2);
        *(_OWORD *)v756 = v493;
        v492->__r_.__value_.__l.__size_ = 0;
        v492->__r_.__value_.__r.__words[2] = 0;
        v492->__r_.__value_.__r.__words[0] = 0;
        v494 = strlen(v481);
        v495 = std::string::append((std::string *)v756, v481, v494);
        v496 = *(_OWORD *)&v495->__r_.__value_.__l.__data_;
        *(_QWORD *)&object[16] = *((_QWORD *)&v495->__r_.__value_.__l + 2);
        *(_OWORD *)object = v496;
        v495->__r_.__value_.__l.__size_ = 0;
        v495->__r_.__value_.__r.__words[2] = 0;
        v495->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v487, (const std::string *)object);
        v487->__vftable = (std::runtime_error_vtbl *)&off_24CA04F20;
        __cxa_throw(v487, (struct type_info *)&unk_24CA04F38, (void (*)(void *))std::runtime_error::~runtime_error);
      }
      *(_BYTE *)(v53 + 4) ^= 4u;
      v54 = (unsigned int *)v5[441].i64[0];
      v55 = v5[441].u64[1];
      if ((unint64_t)v54 >= v55)
        break;
      *v54 = v44;
      v43 = (uint64_t)(v54 + 1);
LABEL_75:
      v5[441].i64[0] = v43;
      v739->i8[2] = 0;
      v739->i16[0] = 256;
      *(_DWORD *)v42 = 0;
      *((_WORD *)v42 + 2) = 0;
LABEL_76:
      v40 += 16;
      if (v40 == v41)
        goto LABEL_109;
    }
    v56 = (unsigned int *)*v734;
    v57 = (char *)v54 - (_BYTE *)*v734;
    v58 = v57 >> 2;
    v59 = (v57 >> 2) + 1;
    if (v59 >> 62)
      sub_20E867F44();
    v60 = v55 - (_QWORD)v56;
    if (v60 >> 1 > v59)
      v59 = v60 >> 1;
    if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFFCLL)
      v61 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v61 = v59;
    if (v61)
    {
      if (v61 >> 62)
        sub_20E877A38();
      v62 = operator new(4 * v61);
      v63 = (unsigned int *)&v62[4 * v58];
      *v63 = v44;
      v43 = (uint64_t)(v63 + 1);
      v64 = (char *)v54 - (char *)v56;
      if (v54 != v56)
      {
LABEL_97:
        v65 = v64 - 4;
        if (v65 >= 0x2C)
        {
          v66 = (char *)v54 - v62 - v57;
          v5 = v736;
          if (v66 >= 0x20)
          {
            v67 = (v65 >> 2) + 1;
            v68 = 4 * (v67 & 0x7FFFFFFFFFFFFFF8);
            v69 = &v54[v68 / 0xFFFFFFFFFFFFFFFCLL];
            v63 = (unsigned int *)((char *)v63 - v68);
            v70 = &v62[4 * v58 - 16];
            v71 = v54 - 4;
            v72 = v67 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v73 = *(_OWORD *)v71;
              *(v70 - 1) = *((_OWORD *)v71 - 1);
              *v70 = v73;
              v70 -= 2;
              v71 -= 8;
              v72 -= 8;
            }
            while (v72);
            v54 = v69;
            if (v67 == (v67 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_106:
              v5[440].i64[1] = (uint64_t)v63;
              v5[441].i64[0] = v43;
              v5[441].i64[1] = (uint64_t)&v62[4 * v61];
              if (v56)
                operator delete(v56);
              goto LABEL_75;
            }
          }
        }
        else
        {
          v5 = v736;
        }
        do
        {
          v74 = *--v54;
          *--v63 = v74;
        }
        while (v54 != v56);
        goto LABEL_106;
      }
    }
    else
    {
      v62 = 0;
      v63 = (unsigned int *)(4 * v58);
      *(_DWORD *)(4 * v58) = v44;
      v43 = 4 * v58 + 4;
      v64 = (char *)v54 - (char *)v56;
      if (v54 != v56)
        goto LABEL_97;
    }
    v5 = v736;
    goto LABEL_106;
  }
LABEL_109:
  v75 = v5[405].i64[1];
  v76 = v5[406].i64[0];
  v77 = a3;
  for (i = v731; v75 != v76; v75 += 360)
  {
    if (*(_BYTE *)(v75 + 200) && !*(_BYTE *)(v75 + 201))
    {
      v79 = v5[4].i64[1];
      v80 = v5[5].i64[0];
      if (v79 == v80)
      {
LABEL_111:
        *(_WORD *)(v75 + 200) = 256;
      }
      else
      {
        while (*(_DWORD *)(v75 + 216) != *(_DWORD *)(*(_QWORD *)v79 + 32))
        {
          v79 += 8;
          if (v79 == v80)
            goto LABEL_111;
        }
        *(_BYTE *)(v75 + 202) = 0;
      }
    }
  }
  sub_20FBDAE84(v5);
  if (!v5[132].i8[5])
  {
    sub_20FBDB2C4(v5, a2, v81, v82, v83, v84);
    v88 = v5->i64[1];
    if (*(_QWORD *)(v88 + 64) > 1uLL)
      goto LABEL_125;
LABEL_146:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 2513, (uint64_t)"this->viobadata_ref_.state_set->size() >= 2", 43, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_544;
    }
    v89 = (void **)&v5[2941];
    v90 = *(_QWORD **)(v5->i64[1] + 48);
    v91 = (_QWORD *)v90[1];
    if (!v91)
      goto LABEL_150;
    goto LABEL_148;
  }
  v85 = v5;
  v86 = *(_QWORD *)(v5->i64[1] + 64);
  if (v86 >= 2)
  {
    for (j = 1; j != v86; ++j)
      sub_20FBDB2C4(v85, j, v81, v82, v83, v84);
  }
  v88 = v85->i64[1];
  v5 = v85;
  if (*(_QWORD *)(v88 + 64) <= 1uLL)
    goto LABEL_146;
LABEL_125:
  v89 = (void **)&v5[2941];
  v90 = *(_QWORD **)(v88 + 48);
  v91 = (_QWORD *)v90[1];
  if (!v91)
  {
LABEL_150:
    v100 = v90;
    do
    {
      v99 = (_QWORD *)v100[2];
      _ZF = *v99 == (_QWORD)v100;
      v100 = v99;
    }
    while (!_ZF);
    goto LABEL_153;
  }
  do
  {
LABEL_148:
    v99 = v91;
    v91 = (_QWORD *)*v91;
  }
  while (v91);
LABEL_153:
  v101 = v90[5];
  v102 = v99[5];
  v103 = v5 + 1585;
  v721 = (uint64_t *)v89;
  sub_20FA5A44C((int64x2_t *)v5[1585].i64, v89);
  v106 = v5[324].i64[1];
  v107 = v5[325].i64[0];
  v108 = v106;
  if (v107 != v106)
  {
    v109 = (v107 - v106) >> 4;
    v108 = v5[324].i64[1];
    do
    {
      v110 = v109 >> 1;
      v111 = (unsigned int *)(v108 + 16 * (v109 >> 1));
      v113 = *v111;
      v112 = v111 + 4;
      v109 += ~(v109 >> 1);
      if (v113 < v101)
        v108 = (uint64_t)v112;
      else
        v109 = v110;
    }
    while (v109);
  }
  if (v108 == v107 || *(_DWORD *)v108 != (_DWORD)v101)
    v108 = v5[325].i64[0];
  if (v107 != v106)
  {
    v114 = (v107 - v106) >> 4;
    do
    {
      v115 = v114 >> 1;
      v116 = (unsigned int *)(v106 + 16 * (v114 >> 1));
      v118 = *v116;
      v117 = v116 + 4;
      v114 += ~(v114 >> 1);
      if (v118 < v102)
        v106 = (uint64_t)v117;
      else
        v114 = v115;
    }
    while (v114);
  }
  if (v106 == v107 || *(_DWORD *)v106 != (_DWORD)v102)
    v106 = v5[325].i64[0];
  v119 = *(_QWORD *)(*(_QWORD *)(v108 + 8) + 24);
  v104.f64[0] = *(float64_t *)(v119 + 16);
  v120 = *(double *)(v119 + 40);
  _Q3 = *(float64x2_t *)(v119 + 24);
  v122 = *(double *)(v119 + 64);
  _Q5 = *(float64x2_t *)(v119 + 48);
  v124 = *(_QWORD *)(*(_QWORD *)(v106 + 8) + 24);
  v105.f64[0] = *(float64_t *)(v124 + 16);
  _D16 = *(double *)(v124 + 40);
  v126 = *(int64x2_t *)(v124 + 24);
  _D18 = *(double *)(v124 + 64);
  v128 = *(float64x2_t *)(v124 + 48);
  v129 = vzip2q_s64(*(int64x2_t *)v124, v126);
  v130 = (int64x2_t)vextq_s8((int8x16_t)vdupq_lane_s64(v129.i64[0], 0), (int8x16_t)vdupq_laneq_s64(v129, 1), 8uLL);
  v131 = vzip1q_s64(*(int64x2_t *)v124, v126);
  v132 = (float64x2_t)vzip1q_s64(v131, v130);
  v133 = (float64x2_t)vzip2q_s64(v131, v130);
  v134 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v132, *(double *)v119), v133, _Q3.f64[0]), v128, _Q5.f64[0]);
  v135 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v132, *(float64x2_t *)v119, 1), v133, _Q3, 1), v128, _Q5, 1);
  __asm
  {
    FMLA            D1, D16, V3.D[1]
    FMLA            D1, D18, V5.D[1]
  }
  v745.__r_.__value_.__r.__words[2] = vmlad_n_f64(vmlad_n_f64(vmulq_f64(v105, *(float64x2_t *)v119).f64[0], _D16, _Q3.f64[0]), _D18, _Q5.f64[0]);
  *(float64x2_t *)&v745.__r_.__value_.__l.__data_ = v134;
  v747 = _D1;
  v746 = v135;
  v749 = vmulq_f64(v105, v104).f64[0] + _D16 * v120 + _D18 * v122;
  v748 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v132, v104.f64[0]), v133, v120), v128, v122);
  v5[492].i32[1] = 0;
  v739[66].i8[9] = 1;
  if (sub_20FA2AFA0((uint64_t)&v5[303].i64[1]))
  {
    v534 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string((std::string *)v756, a2);
    sub_20E8B0848("system under-determined in marginalizer / synchronizeN ", (std::string *)v756, (std::string *)object);
    std::runtime_error::runtime_error(v534, (const std::string *)object);
    v534->__vftable = (std::runtime_error_vtbl *)&off_24CA04F20;
    __cxa_throw(v534, (struct type_info *)&unk_24CA04F38, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v739[66].i8[9] = 0;
  sub_20FBF5244((uint64_t)v5);
  v141 = v5[395].i64[0];
  v142 = v5[395].i64[1];
  while (v141 != v142)
  {
    v143 = *(std::__shared_weak_count **)(v141 + 128);
    *(_QWORD *)(v141 + 120) = 0;
    *(_QWORD *)(v141 + 128) = 0;
    if (v143)
    {
      p_shared_owners = (unint64_t *)&v143->__shared_owners_;
      do
        v145 = __ldaxr(p_shared_owners);
      while (__stlxr(v145 - 1, p_shared_owners));
      if (!v145)
      {
        ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
        std::__shared_weak_count::__release_weak(v143);
      }
    }
    v141 += 280;
  }
  v146 = v5[390].i64[1];
  v147 = v5[391].i64[0];
  while (v146 != v147)
  {
    v148 = *(std::__shared_weak_count **)(v146 + 200);
    *(_QWORD *)(v146 + 192) = 0;
    *(_QWORD *)(v146 + 200) = 0;
    if (v148)
    {
      v149 = (unint64_t *)&v148->__shared_owners_;
      do
        v150 = __ldaxr(v149);
      while (__stlxr(v150 - 1, v149));
      if (!v150)
      {
        ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
        std::__shared_weak_count::__release_weak(v148);
      }
    }
    v146 += 504;
  }
  v151 = v5[392].i64[0];
  v152 = v5[392].i64[1];
  while (v151 != v152)
  {
    v153 = *(std::__shared_weak_count **)(v151 + 128);
    *(_QWORD *)(v151 + 120) = 0;
    *(_QWORD *)(v151 + 128) = 0;
    if (v153)
    {
      v154 = (unint64_t *)&v153->__shared_owners_;
      do
        v155 = __ldaxr(v154);
      while (__stlxr(v155 - 1, v154));
      if (!v155)
      {
        ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
        std::__shared_weak_count::__release_weak(v153);
      }
    }
    v151 += 280;
  }
  v156 = v5[393].i64[1];
  v157 = v5[394].i64[0];
  while (v156 != v157)
  {
    v158 = *(std::__shared_weak_count **)(v156 + 128);
    *(_QWORD *)(v156 + 120) = 0;
    *(_QWORD *)(v156 + 128) = 0;
    if (v158)
    {
      v159 = (unint64_t *)&v158->__shared_owners_;
      do
        v160 = __ldaxr(v159);
      while (__stlxr(v160 - 1, v159));
      if (!v160)
      {
        ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
        std::__shared_weak_count::__release_weak(v158);
      }
    }
    v156 += 280;
  }
  v161 = v5[407].i64[0];
  v162 = v5[407].i64[1];
  if (v161 != v162)
  {
    v163 = v162 - v161 - 112;
    v164 = v5[407].i64[0];
    if (v163 < 0x70)
      goto LABEL_606;
    v165 = (((v163 >> 4) * (unsigned __int128)0x2492492492492493uLL) >> 64) + 1;
    v164 = v161 + 112 * (v165 & 0x7FFFFFFFFFFFFFELL);
    v166 = (_BYTE *)(v161 + 152);
    v167 = v165 & 0x7FFFFFFFFFFFFFELL;
    do
    {
      *(v166 - 120) = 0;
      *(v166 - 8) = 0;
      *(v166 - 112) = 0;
      *v166 = 0;
      v166 += 224;
      v167 -= 2;
    }
    while (v167);
    if (v165 != (v165 & 0x7FFFFFFFFFFFFFELL))
    {
LABEL_606:
      do
      {
        *(_BYTE *)(v164 + 32) = 0;
        *(_BYTE *)(v164 + 40) = 0;
        v164 += 112;
      }
      while (v164 != v162);
    }
  }
  v168 = v5[408].i64[1];
  v169 = v5[409].i64[0];
  while (v168 != v169)
  {
    if (*(_BYTE *)(v168 + 88))
      *(_BYTE *)(v168 + 88) = 0;
    v168 += 208;
  }
  v170 = v5[410].i64[0];
  v171 = v5[410].i64[1];
  while (v170 != v171)
  {
    if (*(_BYTE *)(v170 + 88))
      *(_BYTE *)(v170 + 88) = 0;
    v170 += 208;
  }
  v172 = v5[411].i64[1];
  v173 = v5[412].i64[0];
  while (v172 != v173)
  {
    if (*(_BYTE *)(v172 + 72))
      *(_BYTE *)(v172 + 72) = 0;
    v172 += 176;
  }
  v174 = v5[413].i64[0];
  v175 = v5[413].i64[1];
  while (v174 != v175)
  {
    if (*(_BYTE *)(v174 + 72))
      *(_BYTE *)(v174 + 72) = 0;
    v174 += 176;
  }
  for (k = v5[396].i64[1]; k != v5[397].i64[0]; k += 160)
  {
    v177 = *(std::__shared_weak_count **)(k + 56);
    *(_QWORD *)(k + 48) = 0;
    *(_QWORD *)(k + 56) = 0;
    if (v177)
    {
      v178 = (unint64_t *)&v177->__shared_owners_;
      do
        v179 = __ldaxr(v178);
      while (__stlxr(v179 - 1, v178));
      if (!v179)
      {
        ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
        std::__shared_weak_count::__release_weak(v177);
      }
    }
  }
  sub_20FBDCBA8((uint64_t)v5, 0, v727);
  if (a5)
  {
    v180 = v722;
    if (v5[132].i8[5])
    {
      v181 = *(_QWORD **)(v5->i64[1] + 48);
      v182 = (_QWORD *)v181[1];
      if (v182)
      {
        do
        {
          v183 = v182;
          v182 = (_QWORD *)*v182;
        }
        while (v182);
      }
      else
      {
        do
        {
          v183 = (_QWORD *)v181[2];
          _ZF = *v183 == (_QWORD)v181;
          v181 = v183;
        }
        while (!_ZF);
      }
      v184 = (_QWORD *)v183[1];
      if (v184)
      {
        do
        {
          v185 = v184;
          v184 = (_QWORD *)*v184;
        }
        while (v184);
      }
      else
      {
        do
        {
          v185 = (_QWORD *)v183[2];
          _ZF = *v185 == (_QWORD)v183;
          v183 = v185;
        }
        while (!_ZF);
      }
      v186 = v185[5];
      *(_DWORD *)object = v722;
      *(_DWORD *)&object[4] = v186;
      sub_20FBDE1E8((uint64_t)v5, 2, object, 0, 0, a4);
    }
    else
    {
      *(_DWORD *)object = v729;
      *(_DWORD *)&object[4] = v722;
      sub_20FBDE1E8((uint64_t)v5, 2, object, 0, 0, a4);
    }
  }
  else
  {
    v180 = v722;
  }
  v187 = &v5[2936].i8[8];
  __vala = v5 + 1578;
  if (!v5[132].i8[5] && v718 == v715 && v180 == v731)
  {
    v728 = sub_20FA558B8((uint64_t)v737, 0);
    v735 = &v5[2936].i8[8];
    if (!v5[115].i8[1])
    {
      sub_20FBD9ED8((uint64_t)v5, v729);
      v739[66].i8[9] = 1;
      if (sub_20FA2AFA0((uint64_t)&v5[303].i64[1]))
      {
        v547 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        sub_20E8610C0(object, "marginalizer 3");
        std::runtime_error::runtime_error(v547, (const std::string *)object);
        v547->__vftable = (std::runtime_error_vtbl *)&off_24CA04F20;
        __cxa_throw(v547, (struct type_info *)&unk_24CA04F38, (void (*)(void *))std::runtime_error::~runtime_error);
      }
      v739[66].i8[9] = 0;
      goto LABEL_342;
    }
    v188 = (char **)&v5[2846].i64[1];
    v189 = (_DWORD *)v5[2846].i64[1];
    v5[2847].i64[0] = (uint64_t)v189;
    v5[2848].i64[1] = v5[2848].i64[0];
    v5[2850].i64[0] = v5[2849].i64[1];
    v5[2851].i64[1] = v5[2851].i64[0];
    v5[2853].i64[0] = v5[2852].i64[1];
    v5[2854].i64[1] = v5[2854].i64[0];
    v5[2856].i64[0] = v5[2855].i64[1];
    v5[2857].i64[1] = v5[2857].i64[0];
    v5[2859].i64[0] = v5[2858].i64[1];
    v190 = v5[2861].i64[1];
    v5[2860].i64[1] = v5[2860].i64[0];
    v5[2862].i64[0] = v190;
    v5[2863].i64[1] = v5[2863].i64[0];
    v5[2865].i64[0] = v5[2864].i64[1];
    v5[2866].i64[1] = v5[2866].i64[0];
    v5[2868].i64[0] = v5[2867].i64[1];
    v5[2869].i64[1] = v5[2869].i64[0];
    v5[2871].i64[0] = v5[2870].i64[1];
    v5[2872].i64[1] = v5[2872].i64[0];
    v5[2874].i64[0] = v5[2873].i64[1];
    v5[2875].i64[1] = v5[2875].i64[0];
    if ((_DWORD *)v5[2847].i64[1] == v189)
    {
      v191 = v729;
      if (v189)
      {
        v5[2847].i64[0] = (uint64_t)v189;
        operator delete(v189);
        *v188 = 0;
        v5[2847].i64[0] = 0;
        v5[2847].i64[1] = 0;
      }
      v189 = operator new(4uLL);
      *v188 = (char *)v189;
      v5[2847].i64[0] = (uint64_t)v189;
      v5[2847].i64[1] = (uint64_t)(v189 + 1);
    }
    else
    {
      v191 = v729;
    }
    *v189 = v191;
    v5[2847].i64[0] = (uint64_t)(v189 + 1);
    if (v5[134].i8[2])
      v192 = &v5[2846].i64[1];
    else
      v192 = &v5[2861].i64[1];
    v193 = (_DWORD *)v192[3];
    v194 = (_DWORD *)v192[5];
    v711 = v5 + 1585;
    if (v194 == v193)
    {
      if (v194)
      {
        v192[4] = (uint64_t)v194;
        operator delete(v194);
        v192[3] = 0;
        v192[4] = 0;
        v192[5] = 0;
      }
      v193 = operator new(4uLL);
      v192[4] = (uint64_t)v193;
      v195 = v192 + 4;
      *(v195 - 1) = v193;
      v195[1] = v193 + 1;
    }
    else
    {
      v195 = v192 + 4;
    }
    v196 = (uint64_t)&v736[2891].i64[1];
    *v193 = v191;
    *v195 = v193 + 1;
    i64 = (uint64_t)v736[2535].i64;
    sub_20F8EE574((char **)&v736[2891].i64[1], (char **)&v736[2535]);
    v198 = &v736[2876].i8[8];
    sub_20F8EE574((char **)&v736[2876].i64[1], v188);
    sub_20FA43DFC((uint64_t)&v736[2876].i64[1], (uint64_t)&v5[2861].i64[1]);
    v199 = 0;
    v740 = (void **)&v736[1578].i64[1];
    do
    {
      v200 = v196 + 24 * v199;
      v201 = *(char **)v200;
      v204 = *(char **)(v200 + 8);
      v203 = (char **)(v200 + 8);
      v202 = v204;
      if (v201 != v204)
      {
        v205 = *(unsigned int **)&v198[24 * v199 + 8];
        v206 = *(unsigned int **)&v198[24 * v199];
        v207 = v201;
        while (v206 != v205)
        {
          v208 = *(_DWORD *)v207;
          if (*(_DWORD *)v207 >= *v206)
          {
            v207 += 4 * (*v206++ >= v208);
            if (v207 == v202)
              goto LABEL_280;
          }
          else
          {
            *(_DWORD *)v201 = v208;
            v201 += 4;
            v207 += 4;
            if (v207 == v202)
            {
LABEL_280:
              if (v201 == v202)
                goto LABEL_273;
              goto LABEL_284;
            }
          }
        }
        if (v207 != v201)
        {
          v209 = v202 - v207;
          memmove(v201, v207, v202 - v207);
          v201 += v209;
          if (v201 != *v203)
LABEL_284:
            *v203 = v201;
        }
      }
LABEL_273:
      ++v199;
    }
    while (v199 != 10);
    v210 = 9 * ((*(_QWORD *)(v196 + 32) - *(_QWORD *)(v196 + 24)) >> 2)
         + 6
         * (((*(_QWORD *)(v196 + 56) - *(_QWORD *)(v196 + 48)) >> 2)
          + ((*(_QWORD *)(v196 + 8) - *(_QWORD *)v196) >> 2)
          + ((*(_QWORD *)(v196 + 80) - *(_QWORD *)(v196 + 72)) >> 2))
         + ((*(_QWORD *)(v196 + 128) - *(_QWORD *)(v196 + 120)) >> 2)
         + ((*(_DWORD *)(v196 + 176) - *(_DWORD *)(v196 + 168)) & 0xFFFFFFFC)
         + ((*(_DWORD *)(v196 + 200) - *(_DWORD *)(v196 + 192)) & 0xFFFFFFFC)
         + 3
         * (((*(_QWORD *)(v196 + 152) - *(_QWORD *)(v196 + 144)) >> 2)
          + ((*(_QWORD *)(v196 + 104) - *(_QWORD *)(v196 + 96)) >> 2)
          + ((*(_QWORD *)(v196 + 224) - *(_QWORD *)(v196 + 216)) >> 2));
    v211 = (void **)&v736[1577];
    __vala->i32[0] = v210;
    v77 = a3;
    i = v731;
    if (v736[1577].i64[1] < v210)
    {
      if (*v211)
        MEMORY[0x212BC6368](*v211, 0x1000C8000313F17);
      v736[1577].i64[0] = 0;
      v212 = (8 * v210 + 31) & 0xFFFFFFFE0;
      v736[1577].i64[1] = v212 >> 3;
      *v211 = operator new(v212, (std::align_val_t)0x20uLL);
    }
    sub_20FA44008(v737, v196, v211);
    v5 = v736;
    v213 = &v736[2906].i64[1];
    sub_20F8F2BC0((uint64_t)v188, i64, (uint64_t)dword_2103B9910, (uint64_t)&v736[2906].i64[1]);
    sub_20F8F2BC0(v196, i64, (uint64_t)dword_2103B9910, (uint64_t)&v736[2921].i64[1]);
    sub_20FA4AD9C((uint64_t)v711, (void **)v735, (uint64_t)(v735 + 24), (uint64_t)&v736[2906].i64[1], (uint64_t)&v736[2921].i64[1]);
    sub_20F8F2BC0((uint64_t)v188, i64, (uint64_t)dword_2103B9910, (uint64_t)&v736[2906].i64[1]);
    sub_20FA49CF0((uint64_t)v711, (void **)v735 + 3, (uint64_t)v213, (_DWORD **)v213);
    sub_20F8F2BC0(v196, i64, (uint64_t)dword_2103B9910, (uint64_t)&v736[2906].i64[1]);
    v214 = (uint64_t *)(v735 + 48);
    sub_20FA49CF0((uint64_t)v711, (void **)v735 + 6, (uint64_t)v213, (_DWORD **)v213);
    v215 = v735;
    v216 = *((_DWORD *)v735 + 10);
    if (v216 != 6)
    {
      if (v216 != 15)
      {
        sub_20FBE0D94((uint64_t)(v735 + 24));
        goto LABEL_326;
      }
      v217 = (__int128 *)*((_QWORD *)v735 + 3);
      if (*((_DWORD *)v735 + 4) == 15 && *((_DWORD *)v735 + 5) == 15)
      {
        v726 = *v217;
        v723 = v217[1];
        v719 = v217[2];
        v716 = v217[3];
        v713 = v217[4];
        v709 = v217[5];
        v707 = v217[6];
        v705 = v217[7];
        v703 = v217[8];
        v701 = v217[9];
        v699 = v217[10];
        v697 = v217[11];
        v695 = v217[12];
        v693 = v217[13];
        v691 = v217[14];
        v689 = v217[15];
        v687 = *((_QWORD *)v217 + 224);
        v685 = v217[16];
        v681 = v217[18];
        v683 = v217[17];
        v677 = v217[20];
        v679 = v217[19];
        v673 = v217[22];
        v675 = v217[21];
        v669 = v217[24];
        v671 = v217[23];
        v665 = v217[26];
        v667 = v217[25];
        v661 = v217[28];
        v663 = v217[27];
        v657 = v217[30];
        v659 = v217[29];
        v653 = v217[32];
        v655 = v217[31];
        v649 = v217[34];
        v651 = v217[33];
        v645 = v217[36];
        v647 = v217[35];
        v641 = v217[38];
        v643 = v217[37];
        v637 = v217[40];
        v639 = v217[39];
        v633 = v217[42];
        v635 = v217[41];
        v629 = v217[44];
        v631 = v217[43];
        v625 = v217[46];
        v627 = v217[45];
        v621 = v217[48];
        v623 = v217[47];
        v617 = v217[50];
        v619 = v217[49];
        v613 = v217[52];
        v615 = v217[51];
        v609 = v217[54];
        v611 = v217[53];
        v605 = v217[56];
        v607 = v217[55];
        v601 = v217[58];
        v603 = v217[57];
        v597 = v217[60];
        v599 = v217[59];
        v593 = v217[62];
        v595 = v217[61];
        v589 = v217[64];
        v591 = v217[63];
        v585 = v217[66];
        v587 = v217[65];
        v581 = v217[68];
        v583 = v217[67];
        v577 = v217[70];
        v579 = v217[69];
        v573 = v217[72];
        v575 = v217[71];
        v569 = v217[74];
        v571 = v217[73];
        v565 = v217[76];
        v567 = v217[75];
        v561 = v217[78];
        v563 = v217[77];
        v559 = v217[79];
        v218 = v217[80];
        v219 = v217[81];
        v220 = v217[82];
        v221 = v217[83];
        v222 = v217[84];
        v223 = v217[85];
        v224 = v217[86];
        v225 = v217[87];
        v226 = v217[88];
        v227 = v217[89];
        v228 = v217[90];
        v229 = v217[91];
        v230 = v217[92];
        v231 = v217[93];
        v232 = v217[94];
        v233 = v217[95];
        v234 = v217[96];
        v235 = v217[97];
        v236 = v217[98];
        v237 = v217[99];
        v238 = v217[100];
        v239 = v217[101];
        v240 = v217[102];
        v241 = v217[103];
        v242 = v217[104];
        v243 = v217[105];
        v244 = v217[106];
        v245 = v217[107];
        v246 = v217[108];
        v247 = v217[109];
        v248 = v217[110];
        v867 = v217[111];
        v866 = v248;
        v865 = v247;
        v864 = v246;
        v863 = v245;
        v862 = v244;
        v861 = v243;
        v860 = v242;
        v859 = v241;
        v858 = v240;
        v857 = v239;
        v856 = v238;
        v855 = v237;
        v854 = v236;
        v853 = v235;
        v852 = v234;
        v851 = v233;
        v850 = v232;
        v849 = v231;
        v848 = v230;
        v847 = v229;
        v846 = v228;
        v845 = v227;
        v844 = v226;
        v843 = v225;
        v842 = v224;
        v841 = v223;
        v840 = v222;
        v839 = v221;
        v838 = v220;
        v837 = v219;
        v836 = v218;
        v835 = v559;
        v834 = v561;
        v833 = v563;
        v832 = v565;
        v831 = v567;
        v830 = v569;
        v829 = v571;
        v828 = v573;
        v827 = v575;
        v826 = v577;
        v825 = v579;
        v824 = v581;
        v823 = v583;
        v822 = v585;
        v821 = v587;
        v819 = v591;
        v820 = v589;
        v817 = v595;
        v818 = v593;
        v815 = v599;
        v816 = v597;
        v813 = v603;
        v814 = v601;
        v811 = v607;
        v812 = v605;
        v809 = v611;
        v810 = v609;
        v807 = v615;
        v808 = v613;
        v805 = v619;
        v806 = v617;
        v803 = v623;
        v804 = v621;
        v801 = v627;
        v802 = v625;
        v799 = v631;
        v800 = v629;
        v797 = v635;
        v798 = v633;
        v795 = v639;
        v796 = v637;
        v793 = v643;
        v794 = v641;
        v791 = v647;
        v792 = v645;
        v789 = v651;
        v790 = v649;
        v787 = v655;
        v788 = v653;
        v785 = v659;
        v786 = v657;
        v783 = v663;
        v784 = v661;
        v781 = v667;
        v782 = v665;
        v779 = v671;
        v780 = v669;
        v777 = v675;
        v778 = v673;
        v775 = v679;
        v776 = v677;
        v773 = v683;
        v774 = v681;
        v772 = v685;
        v868 = v687;
        v771 = v689;
        v770 = v691;
        v769 = v693;
        v768 = v695;
        v767 = v697;
        v766 = v699;
        v765 = v701;
        v764 = v703;
        v763 = v705;
        v762 = v707;
        v761 = v709;
        *(_OWORD *)&object[72] = v713;
        *(_OWORD *)&object[56] = v716;
        *(_OWORD *)&object[40] = v719;
        *(_OWORD *)&object[24] = v723;
        *(_OWORD *)&object[8] = v726;
        *(_DWORD *)object = 2;
        *(_DWORD *)object = sub_20E8BE940() != 0;
        sub_20E8BE7C8(0, 0, 1, 1, 15, 15, (double *)&object[8], 15, 1.0, v249, v250, v251, v252, v253, v254, v255, *(double **)v735, 15);
        v5 = v736;
LABEL_325:
        *(_QWORD *)v756 = v215;
        *(_QWORD *)&object[8] = v756;
        *(_QWORD *)&object[16] = v215;
        *(_QWORD *)&object[24] = 0x3FF0000000000000;
        sub_20F2B8D98((uint64_t)v214, (uint64_t)object);
LABEL_326:
        sub_20FA44434(v740, (char **)v196);
        v390 = *((_DWORD *)v735 + 16);
        v391 = (*((_DWORD *)v735 + 17) * v390);
        if ((_DWORD)v391)
        {
          v392 = 0;
          v393 = (_QWORD *)*((_QWORD *)v735 + 6);
          v394 = 8 * v391;
          v395 = v393;
          do
          {
            v399 = 0;
            if (v392 <= HIDWORD(v392))
              v399 = v393[(v392 + v390 * HIDWORD(v392))];
            *v395++ = v399;
            v396 = (v392 + 1);
            v397 = v392 & 0xFFFFFFFF00000000;
            v398 = v397 | v396;
            v392 = v397 + 0x100000000;
            if (v390 > (int)v396)
              v392 = v398;
            v394 -= 8;
          }
          while (v394);
        }
        LODWORD(v750.__r_.__value_.__l.__data_) = 0;
        LODWORD(v742[0]) = 0;
        memset(object, 0, 80);
        v759 = 0u;
        v758 = 0u;
        v757 = 0u;
        memset(v756, 0, sizeof(v756));
        sub_20FA51FC8(v711, (int *)&v750, v742, object, v756);
        v103 = v711;
        sub_20FB82144((uint64_t)v711, v214, (unsigned int *)object, (unsigned int *)v756);
        v400 = __vala[1].u32[2];
        if ((_DWORD)v400)
          bzero(*v740, 8 * v400);
        if (sub_20FBF698C((uint64_t)v737, v729))
        {
          v5[491].i16[6] = 0;
          v5[491].i32[2] = 0;
        }
        else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 2624, (uint64_t)"result", 6, (uint64_t)"Failed to remove a variable.", 28, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_546;
        }
        if (sub_20FBED53C((uint64_t)v737, v729))
        {
          v5[491].i16[6] = 0;
          v5[491].i32[2] = 0;
LABEL_341:
          sub_20FA3B3BC(v737);
LABEL_342:
          sub_20FBDCBA8((uint64_t)v5, 1, v728);
          v187 = v735;
          goto LABEL_343;
        }
        if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 2629, (uint64_t)"result", 6, (uint64_t)"Failed to remove a variable.", 28, (void (*)(void **))sub_21023DDB0))goto LABEL_341;
LABEL_546:
        abort();
      }
      *(_DWORD *)object = 2;
      v724 = *v217;
      v720 = v217[1];
      v717 = v217[2];
      v714 = v217[3];
      v710 = v217[4];
      v708 = v217[5];
      v706 = v217[6];
      v704 = v217[7];
      v702 = v217[8];
      v700 = v217[9];
      v698 = v217[10];
      v696 = v217[11];
      v694 = v217[12];
      v692 = v217[13];
      v690 = v217[14];
      v688 = v217[15];
      v686 = *((_QWORD *)v217 + 224);
      v682 = v217[17];
      v684 = v217[16];
      v678 = v217[19];
      v680 = v217[18];
      v674 = v217[21];
      v676 = v217[20];
      v670 = v217[23];
      v672 = v217[22];
      v666 = v217[25];
      v668 = v217[24];
      v662 = v217[27];
      v664 = v217[26];
      v658 = v217[29];
      v660 = v217[28];
      v654 = v217[31];
      v656 = v217[30];
      v650 = v217[33];
      v652 = v217[32];
      v646 = v217[35];
      v648 = v217[34];
      v642 = v217[37];
      v644 = v217[36];
      v638 = v217[39];
      v640 = v217[38];
      v634 = v217[41];
      v636 = v217[40];
      v630 = v217[43];
      v632 = v217[42];
      v626 = v217[45];
      v628 = v217[44];
      v622 = v217[47];
      v624 = v217[46];
      v618 = v217[49];
      v620 = v217[48];
      v614 = v217[51];
      v616 = v217[50];
      v610 = v217[53];
      v612 = v217[52];
      v606 = v217[55];
      v608 = v217[54];
      v602 = v217[57];
      v604 = v217[56];
      v598 = v217[59];
      v600 = v217[58];
      v594 = v217[61];
      v596 = v217[60];
      v590 = v217[63];
      v592 = v217[62];
      v586 = v217[65];
      v588 = v217[64];
      v582 = v217[67];
      v584 = v217[66];
      v578 = v217[69];
      v580 = v217[68];
      v574 = v217[71];
      v576 = v217[70];
      v570 = v217[73];
      v572 = v217[72];
      v566 = v217[75];
      v568 = v217[74];
      v562 = v217[77];
      v564 = v217[76];
      v558 = v217[79];
      v560 = v217[78];
      v295 = v217[80];
      v296 = v217[81];
      v297 = v217[82];
      v298 = v217[83];
      v299 = v217[84];
      v300 = v217[85];
      v301 = v217[86];
      v302 = v217[87];
      v303 = v217[88];
      v304 = v217[89];
      v305 = v217[90];
      v306 = v217[91];
      v307 = v217[92];
      v308 = v217[93];
      v309 = v217[94];
      v310 = v217[95];
      v311 = v217[96];
      v312 = v217[97];
      v313 = v217[98];
      v314 = v217[99];
      v315 = v217[100];
      v316 = v217[101];
      v317 = v217[102];
      v318 = v217[103];
      v319 = v217[104];
      v320 = v217[105];
      v321 = v217[106];
      v322 = v217[107];
      v323 = v217[108];
      v324 = v217[109];
      v325 = v217[110];
      v867 = v217[111];
      v866 = v325;
      v865 = v324;
      v864 = v323;
      v863 = v322;
      v862 = v321;
      v861 = v320;
      v860 = v319;
      v859 = v318;
      v858 = v317;
      v857 = v316;
      v856 = v315;
      v855 = v314;
      v854 = v313;
      v853 = v312;
      v852 = v311;
      v851 = v310;
      v850 = v309;
      v849 = v308;
      v848 = v307;
      v847 = v306;
      v846 = v305;
      v845 = v304;
      v844 = v303;
      v843 = v302;
      v842 = v301;
      v841 = v300;
      v840 = v299;
      v839 = v298;
      v838 = v297;
      v837 = v296;
      v836 = v295;
      v835 = v558;
      v834 = v560;
      v833 = v562;
      v832 = v564;
      v831 = v566;
      v830 = v568;
      v829 = v570;
      v828 = v572;
      v827 = v574;
      v826 = v576;
      v825 = v578;
      v824 = v580;
      v823 = v582;
      v822 = v584;
      v821 = v586;
      v819 = v590;
      v820 = v588;
      v817 = v594;
      v818 = v592;
      v815 = v598;
      v816 = v596;
      v813 = v602;
      v814 = v600;
      v811 = v606;
      v812 = v604;
      v809 = v610;
      v810 = v608;
      v807 = v614;
      v808 = v612;
      v805 = v618;
      v806 = v616;
      v803 = v622;
      v804 = v620;
      v801 = v626;
      v802 = v624;
      v799 = v630;
      v800 = v628;
      v797 = v634;
      v798 = v632;
      v795 = v638;
      v796 = v636;
      v793 = v642;
      v794 = v640;
      v791 = v646;
      v792 = v644;
      v789 = v650;
      v790 = v648;
      v787 = v654;
      v788 = v652;
      v785 = v658;
      v786 = v656;
      v783 = v662;
      v784 = v660;
      v781 = v666;
      v782 = v664;
      v779 = v670;
      v780 = v668;
      v777 = v674;
      v778 = v672;
      v775 = v678;
      v776 = v676;
      v773 = v682;
      v774 = v680;
      v772 = v684;
      v868 = v686;
      v771 = v688;
      v770 = v690;
      v769 = v692;
      v768 = v694;
      v767 = v696;
      v766 = v698;
      v765 = v700;
      v764 = v702;
      v763 = v704;
      v762 = v706;
      v761 = v708;
      *(_OWORD *)&object[72] = v710;
      *(_OWORD *)&object[56] = v714;
      *(_OWORD *)&object[40] = v717;
      *(_OWORD *)&object[24] = v720;
      *(_OWORD *)&object[8] = v724;
      *(_DWORD *)object = sub_20E8BE940() != 0;
      v333 = *((unsigned int *)v735 + 4);
      if ((_DWORD)v333 == 15)
      {
        sub_20E8BE7C8(0, 0, 1, 1, 15, *((unsigned int *)v735 + 5), (double *)&object[8], 15, 1.0, v326, v327, v328, v329, v330, v331, v332, *(double **)v735, 15);
LABEL_324:
        v215 = v735;
        goto LABEL_325;
      }
      v373 = *((unsigned int *)v735 + 5);
      v374 = (double *)operator new((8 * (15 * v373) + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
      v382 = v374;
      v383 = ((8 * (15 * v373) + 31) & 0xFFFFFFFE0uLL) >> 3;
      v384 = (v373 * v333);
      if (v383 >= v384)
      {
        v387 = v373 << 32;
        if (!(_DWORD)v384)
        {
          v5 = v736;
LABEL_322:
          sub_20E8BE7C8(0, 0, 1, 1, v333, v373, (double *)&object[8], 15, 1.0, v375, v376, v377, v378, v379, v380, v381, v382, v333);
          v389 = *(double **)v735;
          *(_QWORD *)v735 = v382;
          *((_QWORD *)v735 + 1) = v383;
          *((_DWORD *)v735 + 4) = v333 | v387;
          *((_DWORD *)v735 + 5) = HIDWORD(v387);
          i = v731;
          if (v389)
            MEMORY[0x212BC6368](v389, 0x1000C8000313F17);
          goto LABEL_324;
        }
        v385 = 8 * v384;
        v5 = v736;
        v386 = (const void **)v735;
      }
      else
      {
        MEMORY[0x212BC6368](v374, 0x1000C8000313F17);
        v385 = 8 * v384;
        v382 = (double *)operator new((8 * v384 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
        v383 = ((8 * v384 + 31) & 0xFFFFFFFE0) >> 3;
        v386 = (const void **)v735;
        v333 = *((unsigned int *)v735 + 4);
        v373 = *((unsigned int *)v735 + 5);
        v387 = v373 << 32;
        v5 = v736;
      }
      memcpy(v382, *v386, v385);
      goto LABEL_322;
    }
    v256 = (__int128 *)*((_QWORD *)v735 + 3);
    v257 = *((unsigned int *)v735 + 4);
    if (*((_QWORD *)v735 + 2) == 0x600000006)
    {
      *(_DWORD *)object = 2;
      v258 = (uint64_t *)&object[8];
      v259 = *v256;
      v260 = v256[1];
      v261 = v256[2];
      v262 = v256[3];
      v263 = v256[4];
      v264 = v256[5];
      v265 = v256[6];
      v266 = v256[7];
      v267 = v256[8];
      v268 = v256[9];
      v269 = v256[10];
      v270 = v256[11];
      v271 = v256[12];
      v272 = v256[13];
      v273 = v256[14];
      v274 = v256[15];
      v275 = v256[17];
      v772 = v256[16];
      v773 = v275;
      v771 = v274;
      v770 = v273;
      v769 = v272;
      v768 = v271;
      v767 = v270;
      v766 = v269;
      v765 = v268;
      v764 = v267;
      v763 = v266;
      v762 = v265;
      v761 = v264;
      *(_OWORD *)&object[72] = v263;
      *(_OWORD *)&object[56] = v262;
      *(_OWORD *)&object[40] = v261;
      *(_OWORD *)&object[24] = v260;
      *(_OWORD *)&object[8] = v259;
      sub_20F215978((uint64_t)object);
      v276 = 0;
      v277 = *(double **)v735;
      v278 = *(_QWORD *)v735 + 144;
      do
      {
        v284.f64[0] = *(float64_t *)(v278 - 144);
        v285 = *(double *)(v278 - 96);
        v286.f64[0] = *(float64_t *)(v278 - 48);
        v287 = *(double *)v278;
        v288.f64[0] = *(float64_t *)(v278 + 48);
        v289 = *(double *)(v278 + 96);
        if (v276)
        {
          v290 = *(double *)&object[v276 + 8];
          v284.f64[0] = v284.f64[0] - *v277 * v290;
          v285 = v285 - v277[6] * v290;
          v286.f64[0] = v286.f64[0] - v277[12] * v290;
          v287 = v287 - v277[18] * v290;
          v288.f64[0] = v288.f64[0] - v277[24] * v290;
          v289 = v289 - v277[30] * v290;
          if (v276 != 48)
          {
            v291 = *(double *)&object[v276 + 16];
            v284.f64[0] = v284.f64[0] - v277[1] * v291;
            v285 = v285 - v277[7] * v291;
            v286.f64[0] = v286.f64[0] - v277[13] * v291;
            v287 = v287 - v277[19] * v291;
            v288.f64[0] = v288.f64[0] - v277[25] * v291;
            v289 = v289 - v277[31] * v291;
            if (v276 != 96)
            {
              v292 = *(double *)&object[v276 + 24];
              v284.f64[0] = v284.f64[0] - v277[2] * v292;
              v285 = v285 - v277[8] * v292;
              v286.f64[0] = v286.f64[0] - v277[14] * v292;
              v287 = v287 - v277[20] * v292;
              v288.f64[0] = v288.f64[0] - v277[26] * v292;
              v289 = v289 - v277[32] * v292;
              if (v276 != 144)
              {
                v293 = *(double *)&object[v276 + 32];
                v284.f64[0] = v284.f64[0] - v277[3] * v293;
                v285 = v285 - v277[9] * v293;
                v286.f64[0] = v286.f64[0] - v277[15] * v293;
                v287 = v287 - v277[21] * v293;
                v288.f64[0] = v288.f64[0] - v277[27] * v293;
                v289 = v289 - v277[33] * v293;
                if (v276 != 192)
                {
                  v294 = *(double *)&object[v276 + 40];
                  v284.f64[0] = v284.f64[0] - v277[4] * v294;
                  v285 = v285 - v277[10] * v294;
                  v286.f64[0] = v286.f64[0] - v277[16] * v294;
                  v287 = v287 - v277[22] * v294;
                  v288.f64[0] = v288.f64[0] - v277[28] * v294;
                  v289 = v289 - v277[34] * v294;
                }
              }
            }
          }
        }
        v279 = *v258;
        v258 += 7;
        v280 = (float64x2_t)vdupq_lane_s64(v279, 0);
        v288.f64[1] = v289;
        v281 = (int8x16_t)vdivq_f64(v288, v280);
        v286.f64[1] = v287;
        v282 = (int8x16_t)vdivq_f64(v286, v280);
        v284.f64[1] = v285;
        v283 = (int8x16_t)vdivq_f64(v284, v280);
        *(_QWORD *)(v278 - 144) = v283.i64[0];
        *(_QWORD *)(v278 - 96) = vextq_s8(v283, v283, 8uLL).u64[0];
        *(_QWORD *)(v278 - 48) = v282.i64[0];
        *(_QWORD *)v278 = vextq_s8(v282, v282, 8uLL).u64[0];
        *(_QWORD *)(v278 + 48) = v281.i64[0];
        *(_QWORD *)(v278 + 96) = vextq_s8(v281, v281, 8uLL).u64[0];
        v276 += 48;
        v278 += 8;
      }
      while (v276 != 288);
      v5 = v736;
      goto LABEL_325;
    }
    *(_DWORD *)object = 2;
    v334 = *v256;
    v335 = v256[1];
    v336 = v256[2];
    v337 = v256[3];
    v338 = v256[4];
    v339 = v256[5];
    v340 = v256[6];
    v341 = v256[7];
    v342 = v256[8];
    v343 = v256[9];
    v344 = v256[10];
    v345 = v256[11];
    v346 = v256[12];
    v347 = v256[13];
    v348 = v256[14];
    v349 = v256[15];
    v350 = v256[17];
    v772 = v256[16];
    v773 = v350;
    v771 = v349;
    v770 = v348;
    v769 = v347;
    v768 = v346;
    v767 = v345;
    v766 = v344;
    v765 = v343;
    v764 = v342;
    v763 = v341;
    v762 = v340;
    v761 = v339;
    *(_OWORD *)&object[72] = v338;
    *(_OWORD *)&object[56] = v337;
    *(_OWORD *)&object[40] = v336;
    *(_OWORD *)&object[24] = v335;
    *(_OWORD *)&object[8] = v334;
    sub_20F215978((uint64_t)object);
    if ((_DWORD)v257 == 6)
    {
      sub_20E8BE7C8(0, 0, 1, 1, 6, *((unsigned int *)v735 + 5), (double *)&object[8], 6, 1.0, v351, v352, v353, v354, v355, v356, v357, *(double **)v735, 6);
LABEL_318:
      v215 = v735;
      v214 = (uint64_t *)(v735 + 48);
      goto LABEL_325;
    }
    v358 = *((unsigned int *)v735 + 5);
    v359 = (double *)operator new((8 * (6 * v358) + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
    v367 = v359;
    v368 = ((8 * (6 * v358) + 31) & 0xFFFFFFFE0uLL) >> 3;
    v369 = (v358 * v257);
    if (v368 >= v369)
    {
      v372 = v358 << 32;
      if (!(_DWORD)v369)
      {
        v5 = v736;
LABEL_316:
        sub_20E8BE7C8(0, 0, 1, 1, v257, v358, (double *)&object[8], 6, 1.0, v360, v361, v362, v363, v364, v365, v366, v367, v257);
        v388 = *(double **)v735;
        *(_QWORD *)v735 = v367;
        *((_QWORD *)v735 + 1) = v368;
        *((_DWORD *)v735 + 4) = v257 | v372;
        *((_DWORD *)v735 + 5) = HIDWORD(v372);
        i = v731;
        if (v388)
          MEMORY[0x212BC6368](v388, 0x1000C8000313F17);
        goto LABEL_318;
      }
      v370 = 8 * v369;
      v5 = v736;
      v371 = (const void **)v735;
    }
    else
    {
      MEMORY[0x212BC6368](v359, 0x1000C8000313F17);
      v370 = 8 * v369;
      v367 = (double *)operator new((8 * v369 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
      v368 = ((8 * v369 + 31) & 0xFFFFFFFE0) >> 3;
      v371 = (const void **)v735;
      v257 = *((unsigned int *)v735 + 4);
      v358 = *((unsigned int *)v735 + 5);
      v372 = v358 << 32;
      v5 = v736;
    }
    memcpy(v367, *v371, v370);
    goto LABEL_316;
  }
LABEL_343:
  v401 = (void **)(v187 + 104);
  LODWORD(v750.__r_.__value_.__l.__data_) = 0;
  LODWORD(v742[0]) = 0;
  memset(object, 0, 80);
  v759 = 0u;
  v758 = 0u;
  v757 = 0u;
  memset(v756, 0, sizeof(v756));
  sub_20FA51FC8(v103, (int *)&v750, v742, object, v756);
  if (LODWORD(v742[0]) >= LODWORD(v750.__r_.__value_.__l.__data_))
    data_low = LODWORD(v750.__r_.__value_.__l.__data_);
  else
    data_low = LODWORD(v742[0]);
  v403 = data_low;
  *((_DWORD *)v187 + 30) = data_low;
  if (*((_QWORD *)v187 + 14) < data_low)
  {
    if (*v401)
    {
      MEMORY[0x212BC6368](*v401, 0x1000C8000313F17);
      v403 = *((_DWORD *)v187 + 30);
    }
    v404 = (8 * data_low + 31) & 0xFFFFFFFE0;
    *((_QWORD *)v187 + 13) = 0;
    *((_QWORD *)v187 + 14) = v404 >> 3;
    v405 = (uint64_t)v736;
    *v401 = operator new(v404, (std::align_val_t)0x20uLL);
    v406 = v736 + 2476;
    if (!v403)
      goto LABEL_353;
    goto LABEL_352;
  }
  v405 = (uint64_t)v736;
  v406 = v736 + 2476;
  if (v403)
LABEL_352:
    bzero(*v401, 8 * v403);
LABEL_353:
  (*(void (**)(int64x2_t *, __int8 *, _QWORD))(v406->i64[0] + 72))(v406, v187 + 104, DWORD2(v759));
  (*(void (**)(uint64_t, __int8 *, _QWORD))(*(_QWORD *)(v405 + 38032) + 72))(v405 + 38032, v187 + 104, v759);
  (*(void (**)(uint64_t, __int8 *, _QWORD))(*(_QWORD *)(v405 + 36448) + 72))(v405 + 36448, v187 + 104, DWORD2(v758));
  (*(void (**)(uint64_t, __int8 *, _QWORD))(*(_QWORD *)(v405 + 34864) + 72))(v405 + 34864, v187 + 104, v758);
  (*(void (**)(uint64_t, __int8 *, _QWORD))(*(_QWORD *)(v405 + 33280) + 72))(v405 + 33280, v187 + 104, DWORD2(v757));
  (*(void (**)(uint64_t, __int8 *, _QWORD))(*(_QWORD *)(v405 + 31696) + 72))(v405 + 31696, v187 + 104, v757);
  (*(void (**)(uint64_t, __int8 *, _QWORD))(*(_QWORD *)(v405 + 30112) + 72))(v405 + 30112, v187 + 104, *(unsigned int *)&v756[24]);
  (*(void (**)(uint64_t, __int8 *, _QWORD))(*(_QWORD *)(v405 + 28528) + 72))(v405 + 28528, v187 + 104, *(unsigned int *)&v756[16]);
  (*(void (**)(uint64_t, __int8 *, _QWORD))(*(_QWORD *)(v405 + 26944) + 72))(v405 + 26944, v187 + 104, *(unsigned int *)&v756[8]);
  (*(void (**)(int64x2_t *, __int8 *, _QWORD))(v103->i64[0] + 72))(v103, v187 + 104, *(unsigned int *)v756);
  v407 = *((unsigned int *)v187 + 30);
  if ((_DWORD)v407)
  {
    v408 = (double *)*((_QWORD *)v187 + 13);
    v409 = 8 * v407;
    v410 = 8 * v407;
    v411 = v408;
    while (*v411 >= 0.0)
    {
      ++v411;
      v410 -= 8;
      if (!v410)
      {
        do
        {
          ++v408;
          v409 -= 8;
        }
        while (v409);
        goto LABEL_456;
      }
    }
    v412 = *((_DWORD *)v187 + 22);
    if (!v412
      || ((v413 = *((_DWORD *)v187 + 23)) != 0 ? (v414 = v412 == (_DWORD)v407) : (v414 = 0),
          v414 ? (v415 = v413 == (_DWORD)v407) : (v415 = 0),
          !v415))
    {
      v521 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_20E8610C0(object, "marginalizer rollback failed");
      std::runtime_error::runtime_error(v521, (const std::string *)object);
      v521->__vftable = (std::runtime_error_vtbl *)&off_24CA04F20;
      __cxa_throw(v521, (struct type_info *)&unk_24CA04F38, (void (*)(void *))std::runtime_error::~runtime_error);
    }
    sub_20F20B6B0((uint64_t)v721);
    LODWORD(v750.__r_.__value_.__l.__data_) = 0;
    LODWORD(v742[0]) = 0;
    memset(object, 0, 80);
    v759 = 0u;
    v758 = 0u;
    v757 = 0u;
    memset(v756, 0, sizeof(v756));
    sub_20FA51FC8(v103, (int *)&v750, v742, object, v756);
    sub_20FB82144((uint64_t)v103, v721, (unsigned int *)object, (unsigned int *)v756);
    sub_20FB6CAD4(v405);
    sub_20F9B2A4C(&v754);
    if (**((int **)v754 + 7) <= 3)
    {
      v416 = *((unsigned __int8 *)v754 + 72);
      v417 = sub_20E8C31DC((uint64_t)v754, "OSLogSurrogateAppender", 1, 0);
      v418 = v417;
      if (v416 || v417)
      {
        *(_QWORD *)v756 = &v754;
        *(std::chrono::steady_clock::time_point *)&v756[8] = std::chrono::steady_clock::now();
        *(std::chrono::system_clock::time_point *)&v756[16] = std::chrono::system_clock::now();
        *(_DWORD *)&v756[24] = 3;
        *(_QWORD *)&v757 = "unknown file";
        DWORD2(v757) = 1277;
        *(_QWORD *)&v759 = 0;
        *(_QWORD *)&v758 = "unknown function";
        *((_QWORD *)&v758 + 1) = 0;
        v419 = **(_QWORD **)v756;
        v741 = **(_QWORD **)v756;
        if (*(char *)(**(_QWORD **)v756 + 39) < 0)
        {
          v421 = *(const char **)(v419 + 16);
          v420 = *(_QWORD *)(v419 + 24);
          v738 = **(_QWORD **)v756 + 16;
          v423 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v423 & 1) != 0)
            goto LABEL_375;
        }
        else
        {
          v420 = *(unsigned __int8 *)(**(_QWORD **)v756 + 39);
          v421 = (const char *)(**(_QWORD **)v756 + 16);
          v738 = (uint64_t)v421;
          v422 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v422 & 1) != 0)
            goto LABEL_375;
        }
        if (__cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)object);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
          if (object[24] && (object[23] & 0x80000000) != 0)
            operator delete(*(void **)object);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
          v405 = (uint64_t)v736;
        }
LABEL_375:
        if (byte_254A4A4F8[23] >= 0)
          v424 = byte_254A4A4F8;
        else
          v424 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v425 = byte_254A4A4F8[23];
        else
          v425 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)object = os_log_create(v424, v421);
        v426 = &object[8];
        if (v425 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v425 >= 0x17)
        {
          v427 = v418;
          v428 = v421;
          v429 = v416;
          v430 = (v425 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v425 | 7) != 0x17)
            v430 = v425 | 7;
          v431 = v430 + 1;
          v426 = operator new(v430 + 1);
          *(_QWORD *)&object[24] = v431 | 0x8000000000000000;
          *(_QWORD *)&object[8] = v426;
          *(_QWORD *)&object[16] = v425;
          v416 = v429;
          v421 = v428;
          v418 = v427;
        }
        else
        {
          object[31] = v425;
          if (!v425)
          {
LABEL_389:
            v426[v425] = 0;
            object[32] = 1;
            v432 = &object[40];
            if (v420 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v420 >= 0x17)
            {
              v433 = (v420 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v420 | 7) != 0x17)
                v433 = v420 | 7;
              v434 = v433 + 1;
              v432 = operator new(v433 + 1);
              *(_QWORD *)&object[56] = v434 | 0x8000000000000000;
              *(_QWORD *)&object[40] = v432;
              *(_QWORD *)&object[48] = v420;
              v77 = a3;
            }
            else
            {
              object[63] = v420;
              v77 = a3;
              if (!v420)
                goto LABEL_397;
            }
            memmove(v432, v421, v420);
LABEL_397:
            v432[v420] = 0;
            object[64] = 1;
            v435 = *(NSObject **)object;
            if ((object[63] & 0x80000000) != 0)
              operator delete(*(void **)&object[40]);
            i = v731;
            if (object[32] && (object[31] & 0x80000000) != 0)
              operator delete(*(void **)&object[8]);
            if (*(_QWORD *)object)
              os_release(*(void **)object);
            if (v418 && *(_QWORD *)(v418 + 24))
            {
              v436 = _os_log_pack_size();
              v437 = (std::__shared_weak_count_vtbl *)operator new(v436, (std::align_val_t)8uLL);
              v438 = (std::__shared_weak_count *)operator new();
              v439 = v438;
              v438->__shared_owners_ = 0;
              v440 = (unint64_t *)&v438->__shared_owners_;
              v438->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v438->__shared_weak_owners_ = 0;
              v438[1].__vftable = v437;
              *(_QWORD *)object = v437;
              *(_QWORD *)&object[8] = v437;
              *(_QWORD *)&object[16] = v438;
              do
                v441 = __ldxr(v440);
              while (__stxr(v441 + 1, v440));
              memset(&object[24], 0, 24);
              do
                v442 = __ldaxr(v440);
              while (__stlxr(v442 - 1, v440));
              if (!v442)
              {
                ((void (*)(std::__shared_weak_count *))v438->__on_zero_shared)(v438);
                std::__shared_weak_count::__release_weak(v439);
              }
              v443 = *(_QWORD *)object;
              *(_WORD *)_os_log_pack_fill() = 0;
              v444 = operator new();
              v445 = *(unsigned __int8 *)(v741 + 39);
              v446 = v738;
              if ((v445 & 0x80u) != 0)
              {
                v446 = *(_QWORD *)(v741 + 16);
                v445 = *(_QWORD *)(v741 + 24);
              }
              *(_QWORD *)v444 = v443;
              *(_OWORD *)(v444 + 8) = *(_OWORD *)&object[8];
              *(_QWORD *)&object[8] = 0;
              *(_QWORD *)&object[16] = 0;
              *(_OWORD *)(v444 + 24) = *(_OWORD *)&object[24];
              *(_QWORD *)&object[24] = 0;
              *(_QWORD *)&object[32] = 0;
              *(_QWORD *)(v444 + 40) = v446;
              *(_QWORD *)(v444 + 48) = v445;
              *(_BYTE *)(v444 + 56) = 1;
              v742[0] = 0;
              v750.__r_.__value_.__r.__words[0] = v444;
              (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v418 + 24) + 40))(*(_QWORD *)(v418 + 24), &v750);
              v447 = v750.__r_.__value_.__r.__words[0];
              v750.__r_.__value_.__r.__words[0] = 0;
              i = v731;
              if (v447)
              {
                v448 = *(std::__shared_weak_count **)(v447 + 32);
                if (v448)
                {
                  v449 = (unint64_t *)&v448->__shared_owners_;
                  do
                    v450 = __ldaxr(v449);
                  while (__stlxr(v450 - 1, v449));
                  if (!v450)
                  {
                    ((void (*)(std::__shared_weak_count *))v448->__on_zero_shared)(v448);
                    std::__shared_weak_count::__release_weak(v448);
                  }
                }
                v451 = *(std::__shared_weak_count **)(v447 + 16);
                if (v451)
                {
                  v452 = (unint64_t *)&v451->__shared_owners_;
                  do
                    v453 = __ldaxr(v452);
                  while (__stlxr(v453 - 1, v452));
                  if (!v453)
                  {
                    ((void (*)(std::__shared_weak_count *))v451->__on_zero_shared)(v451);
                    std::__shared_weak_count::__release_weak(v451);
                  }
                }
                MEMORY[0x212BC6398](v447, 0x10F0C40B62ED6C6);
                v454 = v742[0];
                v742[0] = 0;
                if (v454)
                {
                  v455 = *(std::__shared_weak_count **)(v454 + 32);
                  if (v455)
                  {
                    v456 = (unint64_t *)&v455->__shared_owners_;
                    do
                      v457 = __ldaxr(v456);
                    while (__stlxr(v457 - 1, v456));
                    if (!v457)
                    {
                      ((void (*)(std::__shared_weak_count *))v455->__on_zero_shared)(v455);
                      std::__shared_weak_count::__release_weak(v455);
                    }
                  }
                  v458 = *(std::__shared_weak_count **)(v454 + 16);
                  if (v458)
                  {
                    v459 = (unint64_t *)&v458->__shared_owners_;
                    do
                      v460 = __ldaxr(v459);
                    while (__stlxr(v460 - 1, v459));
                    if (!v460)
                    {
                      ((void (*)(std::__shared_weak_count *))v458->__on_zero_shared)(v458);
                      std::__shared_weak_count::__release_weak(v458);
                    }
                  }
                  MEMORY[0x212BC6398](v454, 0x10F0C40B62ED6C6);
                }
              }
              v461 = *(std::__shared_weak_count **)&object[32];
              if (*(_QWORD *)&object[32])
              {
                v462 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                do
                  v463 = __ldaxr(v462);
                while (__stlxr(v463 - 1, v462));
                if (!v463)
                {
                  ((void (*)(std::__shared_weak_count *))v461->__on_zero_shared)(v461);
                  std::__shared_weak_count::__release_weak(v461);
                }
              }
              v464 = *(std::__shared_weak_count **)&object[16];
              if (*(_QWORD *)&object[16])
              {
                v465 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                do
                  v466 = __ldaxr(v465);
                while (__stlxr(v466 - 1, v465));
                if (!v466)
                {
                  ((void (*)(std::__shared_weak_count *))v464->__on_zero_shared)(v464);
                  std::__shared_weak_count::__release_weak(v464);
                }
              }
            }
            else
            {
              os_log_type_enabled(v435, OS_LOG_TYPE_INFO);
              v405 = (uint64_t)v736;
              *(_WORD *)object = 0;
              v467 = (void *)_os_log_send_and_compose_impl();
              if (v467)
                free(v467);
            }
            if (v416)
            {
              sub_20E8C003C((uint64_t)v756, "Reset the prior to previous window due to numerical failure in marginalziation.");
              sub_20E863570((uint64_t)v756);
            }
            sub_20E863570((uint64_t)v756);
            v468 = (std::__shared_weak_count *)v759;
            if ((_QWORD)v759)
            {
              v469 = (unint64_t *)(v759 + 8);
              do
                v470 = __ldaxr(v469);
              while (__stlxr(v470 - 1, v469));
              if (!v470)
              {
                ((void (*)(std::__shared_weak_count *))v468->__on_zero_shared)(v468);
                std::__shared_weak_count::__release_weak(v468);
              }
            }
            goto LABEL_456;
          }
        }
        memmove(v426, v424, v425);
        goto LABEL_389;
      }
    }
  }
LABEL_456:
  if (!v406[74].i8[0])
  {
    v471 = __vala[1].u32[2];
    if ((_DWORD)v471)
      bzero(*(void **)(v405 + 25256), 8 * v471);
  }
  v77[7] = i;
  *(_DWORD *)object = i;
  result = sub_20FBDE1E8(v405, 1, object, 1, 1, (uint64_t)v77);
  v473 = v77[4];
  if (!*(_BYTE *)(v405 + 2146))
  {
    if (v473 > 5
      || (result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 1300, (uint64_t)"prior_info.info.rows() >= 6", 27, (uint64_t)"Invalid pose prior info.", 24, (void (*)(void **))sub_21023DDB0), (result & 1) == 0))
    {
      v474 = 0;
      goto LABEL_466;
    }
LABEL_544:
    abort();
  }
  if (v473 <= 0xE)
  {
    result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 1297, (uint64_t)"prior_info.info.rows() >= 15", 28, (uint64_t)"Invalid inertial-state prior info.", 34, (void (*)(void **))sub_21023DDB0);
    if ((result & 1) != 0)
      goto LABEL_544;
  }
  v474 = 1;
LABEL_466:
  v77[6] = v474;
  return result;
}

void sub_20FBD8FE4(_Unwind_Exception *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (LOBYTE(STACK[0x668]) && SLOBYTE(STACK[0x667]) < 0)
    operator delete((void *)STACK[0x650]);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0x5C0]);
  if (SLOBYTE(STACK[0x627]) < 0)
    operator delete((void *)STACK[0x610]);
  v2 = MEMORY[0x24BEDB7F0];
  v3 = *MEMORY[0x24BEDB7F0];
  STACK[0x6A0] = *MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(v2 + 72);
  *(unint64_t *)((char *)&STACK[0x6A0] + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  v5 = MEMORY[0x24BEDB848] + 16;
  STACK[0x6B0] = v4;
  STACK[0x6B8] = v5;
  if (SLOBYTE(STACK[0x70F]) < 0)
    operator delete((void *)STACK[0x6F8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](&STACK[0x720]);
  if (SLOBYTE(STACK[0x5B7]) < 0)
  {
    operator delete((void *)STACK[0x5A0]);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20FBD94F8(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  unint64_t v6;
  size_t v7;
  size_t v8;
  void *v9;
  int v10;
  int v11;
  size_t v12;
  void *v13;

  if (!*(_BYTE *)(a1 + 24))
  {
    v10 = *(_DWORD *)(a2 + 16);
    v11 = *(_DWORD *)(a2 + 20);
    v12 = (8 * (v11 * v10) + 31) & 0xFFFFFFFE0;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v12 >> 3;
    v13 = operator new(v12, (std::align_val_t)0x20uLL);
    *(_QWORD *)a1 = v13;
    if (v11 * v10)
      memcpy(v13, *(const void **)a2, 8 * (v11 * v10));
    *(_DWORD *)(a1 + 16) = v10;
    *(_DWORD *)(a1 + 20) = v11;
    *(_BYTE *)(a1 + 24) = 1;
    return a1;
  }
  if (a1 == a2)
    return a1;
  v4 = *(_DWORD *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 20);
  v6 = (v5 * v4);
  if (*(_QWORD *)(a1 + 8) < v6)
  {
    if (*(_QWORD *)a1)
      MEMORY[0x212BC6368]();
    v7 = 8 * v6;
    v8 = (v7 + 31) & 0xFFFFFFFE0;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v8 >> 3;
    v9 = operator new(v8, (std::align_val_t)0x20uLL);
    *(_QWORD *)a1 = v9;
    goto LABEL_13;
  }
  if ((_DWORD)v6)
  {
    v9 = *(void **)a1;
    v7 = 8 * v6;
LABEL_13:
    memcpy(v9, *(const void **)a2, v7);
    v4 = *(_DWORD *)(a2 + 16);
    v5 = *(_DWORD *)(a2 + 20);
  }
  *(_DWORD *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 20) = v5;
  return a1;
}

void sub_20FBD960C(uint64_t a1, uint64_t a2, unsigned int a3, _OWORD *a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *v11;
  unint64_t v13;
  uint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v7 = a3;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = a3;
      if (v8 <= a3)
        v4 = a3 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & a3;
    }
    v10 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (v11)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v11[1];
            if (v15 == a3)
            {
              if (v11[2] == a2 && *((_DWORD *)v11 + 6) == a3)
                return;
            }
            else if ((v15 & (v8 - 1)) != v4)
            {
              goto LABEL_28;
            }
            v11 = (uint64_t *)*v11;
            if (!v11)
              goto LABEL_28;
          }
        }
        do
        {
          v13 = v11[1];
          if (v13 == a3)
          {
            if (v11[2] == a2 && *((_DWORD *)v11 + 6) == a3)
              return;
          }
          else
          {
            if (v13 >= v8)
              v13 %= v8;
            if (v13 != v4)
              break;
          }
          v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_28:
  v16 = operator new(0x20uLL);
  *v16 = 0;
  v16[1] = v7;
  *((_OWORD *)v16 + 1) = *a4;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (v8 && (float)(v18 * (float)v8) >= v17)
  {
    v7 = v4;
  }
  else
  {
    v19 = 1;
    if (v8 >= 3)
      v19 = (v8 & (v8 - 1)) != 0;
    v20 = v19 | (2 * v8);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_41;
    if (prime < v8)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v24 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < v8)
LABEL_41:
        sub_20E8D2B3C(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v7 %= v8;
    }
    else
    {
      v7 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
  if (v27)
  {
    *v16 = *v27;
LABEL_64:
    *v27 = v16;
    goto LABEL_65;
  }
  *v16 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v16;
  *(_QWORD *)(v26 + 8 * v7) = a1 + 16;
  if (*v16)
  {
    v28 = *(_QWORD *)(*v16 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v28 >= v8)
        v28 %= v8;
    }
    else
    {
      v28 &= v8 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_64;
  }
LABEL_65:
  ++*(_QWORD *)(a1 + 24);
}

void sub_20FBD98E0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20FBD98F4(uint64_t a1, unsigned int a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  char *v9;
  unsigned int v10;
  uint64_t v11;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  unsigned int *v22;
  char *v23;
  int64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _OWORD *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  unsigned int v33;

  v4 = *(char **)(a1 + 392);
  v5 = *(char **)(a1 + 400);
  if (v5 != v4)
  {
    v6 = (v5 - v4) >> 4;
    do
    {
      v7 = v6 >> 1;
      v8 = (unsigned int *)&v4[16 * (v6 >> 1)];
      v10 = *v8;
      v9 = (char *)(v8 + 4);
      v6 += ~(v6 >> 1);
      if (v10 < a2)
        v4 = v9;
      else
        v6 = v7;
    }
    while (v6);
  }
  if (v4 == v5)
    return 0;
  if (*(_DWORD *)v4 != a2)
    return 0;
  v11 = *((_QWORD *)v4 + 1);
  if ((*(_BYTE *)(v11 + 4) & 7) != 0)
    return 0;
  *(_BYTE *)(v11 + 4) ^= 4u;
  v13 = *(char **)(a1 + 1728);
  v14 = *(_QWORD *)(a1 + 1736);
  if ((unint64_t)v13 >= v14)
  {
    v16 = *(char **)(a1 + 1720);
    v17 = (v13 - v16) >> 2;
    v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 62)
      sub_20E867F44();
    v19 = v14 - (_QWORD)v16;
    if (v19 >> 1 > v18)
      v18 = v19 >> 1;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
      v20 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v20 = v18;
    if (v20)
    {
      if (v20 >> 62)
        sub_20E877A38();
      v21 = operator new(4 * v20);
      v22 = (unsigned int *)&v21[4 * v17];
      v23 = &v21[4 * v20];
      *v22 = a2;
      v15 = (uint64_t)(v22 + 1);
      v24 = v13 - v16;
      if (v13 == v16)
        goto LABEL_30;
    }
    else
    {
      v21 = 0;
      v22 = (unsigned int *)(4 * v17);
      v23 = 0;
      *(_DWORD *)(4 * v17) = a2;
      v15 = 4 * v17 + 4;
      v24 = v13 - v16;
      if (v13 == v16)
      {
LABEL_30:
        *(_QWORD *)(a1 + 1720) = v22;
        *(_QWORD *)(a1 + 1728) = v15;
        *(_QWORD *)(a1 + 1736) = v23;
        if (v16)
          operator delete(v16);
        goto LABEL_32;
      }
    }
    v25 = v24 - 4;
    if (v25 < 0x2C)
      goto LABEL_37;
    if ((unint64_t)(v16 - v21) < 0x20)
      goto LABEL_37;
    v26 = (v25 >> 2) + 1;
    v27 = 4 * (v26 & 0x7FFFFFFFFFFFFFF8);
    v28 = &v13[-v27];
    v22 = (unsigned int *)((char *)v22 - v27);
    v29 = &v21[4 * v17 - 16];
    v30 = v13 - 16;
    v31 = v26 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v32 = *(_OWORD *)v30;
      *(v29 - 1) = *((_OWORD *)v30 - 1);
      *v29 = v32;
      v29 -= 2;
      v30 -= 32;
      v31 -= 8;
    }
    while (v31);
    v13 = v28;
    if (v26 != (v26 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_37:
      do
      {
        v33 = *((_DWORD *)v13 - 1);
        v13 -= 4;
        *--v22 = v33;
      }
      while (v13 != v16);
    }
    goto LABEL_30;
  }
  *(_DWORD *)v13 = a2;
  v15 = (uint64_t)(v13 + 4);
LABEL_32:
  *(_QWORD *)(a1 + 1728) = v15;
  *(_BYTE *)(a1 + 1618) = 0;
  *(_WORD *)(a1 + 1616) = 256;
  return 1;
}

uint64_t sub_20FBD9AF8(uint64_t a1, unsigned int a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  char *v9;
  unsigned int v10;
  uint64_t v11;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  unsigned int *v22;
  char *v23;
  int64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _OWORD *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  unsigned int v33;

  v4 = *(char **)(a1 + 968);
  v5 = *(char **)(a1 + 976);
  if (v5 != v4)
  {
    v6 = (v5 - v4) >> 4;
    do
    {
      v7 = v6 >> 1;
      v8 = (unsigned int *)&v4[16 * (v6 >> 1)];
      v10 = *v8;
      v9 = (char *)(v8 + 4);
      v6 += ~(v6 >> 1);
      if (v10 < a2)
        v4 = v9;
      else
        v6 = v7;
    }
    while (v6);
  }
  if (v4 == v5)
    return 0;
  if (*(_DWORD *)v4 != a2)
    return 0;
  v11 = *((_QWORD *)v4 + 1);
  if ((*(_BYTE *)(v11 + 4) & 6) != 0)
    return 0;
  *(_BYTE *)(v11 + 4) ^= 2u;
  v13 = *(char **)(a1 + 2136);
  v14 = *(_QWORD *)(a1 + 2144);
  if ((unint64_t)v13 >= v14)
  {
    v16 = *(char **)(a1 + 2128);
    v17 = (v13 - v16) >> 2;
    v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 62)
      sub_20E867F44();
    v19 = v14 - (_QWORD)v16;
    if (v19 >> 1 > v18)
      v18 = v19 >> 1;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
      v20 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v20 = v18;
    if (v20)
    {
      if (v20 >> 62)
        sub_20E877A38();
      v21 = operator new(4 * v20);
      v22 = (unsigned int *)&v21[4 * v17];
      v23 = &v21[4 * v20];
      *v22 = a2;
      v15 = (uint64_t)(v22 + 1);
      v24 = v13 - v16;
      if (v13 == v16)
        goto LABEL_30;
    }
    else
    {
      v21 = 0;
      v22 = (unsigned int *)(4 * v17);
      v23 = 0;
      *(_DWORD *)(4 * v17) = a2;
      v15 = 4 * v17 + 4;
      v24 = v13 - v16;
      if (v13 == v16)
      {
LABEL_30:
        *(_QWORD *)(a1 + 2128) = v22;
        *(_QWORD *)(a1 + 2136) = v15;
        *(_QWORD *)(a1 + 2144) = v23;
        if (v16)
          operator delete(v16);
        goto LABEL_32;
      }
    }
    v25 = v24 - 4;
    if (v25 < 0x2C)
      goto LABEL_37;
    if ((unint64_t)(v16 - v21) < 0x20)
      goto LABEL_37;
    v26 = (v25 >> 2) + 1;
    v27 = 4 * (v26 & 0x7FFFFFFFFFFFFFF8);
    v28 = &v13[-v27];
    v22 = (unsigned int *)((char *)v22 - v27);
    v29 = &v21[4 * v17 - 16];
    v30 = v13 - 16;
    v31 = v26 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v32 = *(_OWORD *)v30;
      *(v29 - 1) = *((_OWORD *)v30 - 1);
      *v29 = v32;
      v29 -= 2;
      v30 -= 32;
      v31 -= 8;
    }
    while (v31);
    v13 = v28;
    if (v26 != (v26 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_37:
      do
      {
        v33 = *((_DWORD *)v13 - 1);
        v13 -= 4;
        *--v22 = v33;
      }
      while (v13 != v16);
    }
    goto LABEL_30;
  }
  *(_DWORD *)v13 = a2;
  v15 = (uint64_t)(v13 + 4);
LABEL_32:
  *(_QWORD *)(a1 + 2136) = v15;
  *(_BYTE *)(a1 + 1618) = 0;
  *(_WORD *)(a1 + 1616) = 256;
  return 1;
}

_QWORD *sub_20FBD9D00(uint64_t a1)
{
  uint64_t v1;
  int v2;
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;
  _QWORD v7[3];
  _QWORD *v8;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v1 = a1 + 40800;
  *(_DWORD *)(a1 + 7900) = 1;
  *(_BYTE *)(a1 + 40800) = 1;
  v2 = *(_DWORD *)(a1 + 2072);
  result = (_QWORD *)(a1 + 4856);
  switch(v2)
  {
    case 0:
      *(_BYTE *)(v1 + 1) = 0;
      return result;
    case 1:
      v9[0] = &off_24CA04830;
      v9[1] = sub_20FBE5FFC;
      v10 = v9;
      sub_20FBE5E24((uint64_t)result, v9);
      result = v10;
      if (v10 != v9)
        goto LABEL_8;
      v4 = 4;
      result = v9;
      return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
    case 2:
      v7[0] = &off_24CA04830;
      v7[1] = sub_20FBE0D94;
      v8 = v7;
      sub_20FBE5E24((uint64_t)result, v7);
      result = v8;
      if (v8 != v7)
        goto LABEL_8;
      v4 = 4;
      result = v7;
      return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
    case 3:
      v5[0] = &off_24CA04830;
      v5[1] = sub_20FBEB154;
      v6 = v5;
      sub_20FBE5E24((uint64_t)result, v5);
      result = v6;
      if (v6 == v5)
      {
        v4 = 4;
        result = v5;
      }
      else
      {
LABEL_8:
        if (!result)
          return result;
        v4 = 5;
      }
      return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
    default:
      return result;
  }
}

void sub_20FBD9E5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  _QWORD *v19;
  uint64_t v20;

  v19 = *(_QWORD **)(v17 - 32);
  if (v19 == (_QWORD *)(v17 - 56))
  {
    v20 = 4;
    v19 = (_QWORD *)(v17 - 56);
  }
  else
  {
    if (!v19)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_20FBD9ED8(uint64_t a1, unsigned int a2)
{
  std::string::size_type v2;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int *v10;
  char *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  unsigned int *v23;
  char *v24;
  int64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  _OWORD *v30;
  unsigned int *v31;
  uint64_t v32;
  __int128 v33;
  unsigned int v34;
  char *v35;
  char *v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int *v40;
  char *v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int *v44;
  unint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _BYTE *v52;
  unsigned int *v53;
  char *v54;
  int64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int *v59;
  _OWORD *v60;
  unsigned int *v61;
  uint64_t v62;
  __int128 v63;
  unsigned int v64;
  unint64_t v65;
  unint64_t v66;
  unsigned int *v67;
  char *v68;
  unsigned int v69;
  char v70;
  const char *v71;
  int v72;
  unint64_t v73;
  uint64_t v74;
  unsigned int v75;
  std::runtime_error *exception;
  const std::string::value_type *v77;
  std::string::size_type v78;
  std::string *v79;
  __int128 v80;
  std::string *v81;
  __int128 v82;
  size_t v83;
  std::string *v84;
  __int128 v85;
  unint64_t v86;
  unint64_t v87;
  unsigned int *v88;
  char *v89;
  unsigned int v90;
  char v91;
  const char *v92;
  uint64_t v93;
  int v94;
  unint64_t v95;
  uint64_t v96;
  unsigned int v97;
  std::runtime_error *v98;
  const std::string::value_type *v99;
  std::string::size_type v100;
  std::string *v101;
  __int128 v102;
  std::string *v103;
  __int128 v104;
  size_t v105;
  std::string *v106;
  __int128 v107;
  _QWORD *v108;
  std::string *v109;
  std::string::size_type size;
  _QWORD *v111;
  _QWORD *v112;
  size_t v113;
  _QWORD *v114;
  std::string *v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  const char *v119;
  _QWORD *v120;
  std::string *v121;
  std::string::size_type v122;
  _QWORD *v123;
  _QWORD *v124;
  size_t v125;
  _QWORD *v126;
  std::string *v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  const char *v131;
  unsigned __int8 v132;
  uint64_t v133;
  const char *v134;
  NSObject *v135;
  std::string *v136;
  unsigned __int8 v137;
  uint64_t v138;
  const char *v139;
  NSObject *v140;
  std::string *v141;
  _QWORD v142[2];
  unsigned __int8 v143;
  std::string *v144;
  std::string v145;
  int v146;
  const char *v147;
  int v148;
  const char *v149;
  uint64_t v150;
  uint64_t v151;
  std::string v152;
  std::string v153;
  uint64_t v154;
  const char *v155;
  uint64_t v156;
  std::string v157;
  char v158;
  _QWORD v159[5];
  const char *v160;
  uint64_t v161;

  v5 = *(char **)(a1 + 5192);
  v6 = *(char **)(a1 + 5200);
  v7 = v5;
  if (v6 != v5)
  {
    v8 = (v6 - v5) >> 4;
    v7 = *(char **)(a1 + 5192);
    do
    {
      v9 = v8 >> 1;
      v10 = (unsigned int *)&v7[16 * (v8 >> 1)];
      v12 = *v10;
      v11 = (char *)(v10 + 4);
      v8 += ~(v8 >> 1);
      if (v12 < a2)
        v7 = v11;
      else
        v8 = v9;
    }
    while (v8);
  }
  if (v7 == v6 || *(_DWORD *)v7 != a2 || (v13 = *((_QWORD *)v7 + 1), (*(_BYTE *)(v13 + 4) & 7) != 0))
  {
    v143 = 4;
    strcpy((char *)v142, "pose");
    if (v6 == v5)
      goto LABEL_79;
    v65 = (v6 - v5) >> 4;
    do
    {
      v66 = v65 >> 1;
      v67 = (unsigned int *)&v5[16 * (v65 >> 1)];
      v69 = *v67;
      v68 = (char *)(v67 + 4);
      v65 += ~(v65 >> 1);
      if (v69 < a2)
        v5 = v68;
      else
        v65 = v66;
    }
    while (v65);
    if (v5 == v6 || *(_DWORD *)v5 != a2)
    {
LABEL_79:
      v71 = "not found";
    }
    else
    {
      v70 = *(_BYTE *)(*((_QWORD *)v5 + 1) + 4);
      if ((v70 & 4) != 0)
      {
        v71 = "marginalized";
      }
      else if ((v70 & 1) != 0)
      {
        v71 = "new";
      }
      else if ((v70 & 2) != 0)
      {
        v71 = "removed";
      }
      else
      {
        v71 = "unknown";
      }
    }
    sub_20F9B2A4C(&v154);
    if (**(int **)(v154 + 56) <= 5
      && ((v72 = *(unsigned __int8 *)(v154 + 72), (v73 = sub_20E8C31DC(v154, "OSLogSurrogateAppender", 1, 0)) == 0)
        ? (v74 = 0)
        : (v74 = v73 + 16),
          v72 || v73))
    {
      sub_20E863438((uint64_t)&v153);
      v108 = sub_20E86A980(&v153.__r_.__value_.__r.__words[2], (uint64_t)"Failed to marginalize state ", 28);
      std::to_string(&v157, a2);
      if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v109 = &v157;
      else
        v109 = (std::string *)v157.__r_.__value_.__r.__words[0];
      if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v157.__r_.__value_.__r.__words[2]);
      else
        size = v157.__r_.__value_.__l.__size_;
      v111 = sub_20E86A980(v108, (uint64_t)v109, size);
      v112 = sub_20E86A980(v111, (uint64_t)": ", 2);
      v113 = strlen(v71);
      v114 = sub_20E86A980(v112, (uint64_t)v71, v113);
      sub_20E86A980(v114, (uint64_t)".", 1);
      if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v157.__r_.__value_.__l.__data_);
      sub_20E923E88(&v153, &v152);
      v145.__r_.__value_.__r.__words[0] = (std::string::size_type)&v154;
      v145.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v145.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
      v146 = 5;
      v147 = "unknown file";
      v148 = 2809;
      v150 = 0;
      v151 = 0;
      v149 = "unknown function";
      if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v115 = &v152;
      else
        v115 = (std::string *)v152.__r_.__value_.__r.__words[0];
      v144 = v115;
      v116 = *(_QWORD *)v145.__r_.__value_.__l.__data_;
      v117 = (uint64_t *)(*(_QWORD *)v145.__r_.__value_.__l.__data_ + 16);
      if (*(char *)(*(_QWORD *)v145.__r_.__value_.__l.__data_ + 39) < 0)
      {
        v119 = *(const char **)(v116 + 16);
        v118 = *(_QWORD *)(v116 + 24);
      }
      else
      {
        v118 = *(unsigned __int8 *)(*(_QWORD *)v145.__r_.__value_.__l.__data_ + 39);
        v119 = (const char *)(*(_QWORD *)v145.__r_.__value_.__l.__data_ + 16);
      }
      v155 = v119;
      v156 = v118;
      v132 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v132 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)&v157);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v157);
        if (v158 && SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v157.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      v133 = byte_254A4A4F8[23];
      if (byte_254A4A4F8[23] >= 0)
      {
        v134 = byte_254A4A4F8;
      }
      else
      {
        v133 = *(_QWORD *)&byte_254A4A4F8[8];
        v134 = *(const char **)byte_254A4A4F8;
      }
      v160 = v134;
      v161 = v133;
      v157.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v134, v155);
      sub_20E86E5A8(&v157.__r_.__value_.__l.__size_, (uint64_t)&v160);
      sub_20E86E5A8(v159, (uint64_t)&v155);
      v135 = v157.__r_.__value_.__r.__words[0];
      sub_20E86E44C((uint64_t)&v157);
      sub_20FBECF38(v74, v117, v135, OS_LOG_TYPE_ERROR, (const char **)&v144);
      if (v72)
      {
        v136 = &v152;
        if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v136 = (std::string *)v152.__r_.__value_.__r.__words[0];
        sub_20E8C003C((uint64_t)&v145, "%s", (const char *)v136);
        sub_20E863570((uint64_t)&v145);
      }
      sub_20E863714((uint64_t)&v145);
      if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v152.__r_.__value_.__l.__data_);
      sub_20E863784((uint64_t)&v153);
      v75 = v143;
      v2 = v142[1];
    }
    else
    {
      v75 = 4;
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    *((_BYTE *)&v152.__r_.__value_.__s + 23) = 12;
    strcpy((char *)&v152, "marginalize ");
    if ((v75 & 0x80u) == 0)
      v77 = (const std::string::value_type *)v142;
    else
      v77 = (const std::string::value_type *)v142[0];
    if ((v75 & 0x80u) == 0)
      v78 = v75;
    else
      v78 = v2;
    v79 = std::string::append(&v152, v77, v78);
    v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
    v145.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v145.__r_.__value_.__l.__data_ = v80;
    v79->__r_.__value_.__l.__size_ = 0;
    v79->__r_.__value_.__r.__words[2] = 0;
    v79->__r_.__value_.__r.__words[0] = 0;
    v81 = std::string::append(&v145, " p ", 3uLL);
    v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
    v157.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v157.__r_.__value_.__l.__data_ = v82;
    v81->__r_.__value_.__l.__size_ = 0;
    v81->__r_.__value_.__r.__words[2] = 0;
    v81->__r_.__value_.__r.__words[0] = 0;
    v83 = strlen(v71);
    v84 = std::string::append(&v157, v71, v83);
    v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
    v153.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v153.__r_.__value_.__l.__data_ = v85;
    v84->__r_.__value_.__l.__size_ = 0;
    v84->__r_.__value_.__r.__words[2] = 0;
    v84->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v153);
    exception->__vftable = (std::runtime_error_vtbl *)&off_24CA04F20;
    __cxa_throw(exception, (struct type_info *)&unk_24CA04F38, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  *(_BYTE *)(v13 + 4) ^= 4u;
  v14 = *(unsigned int **)(a1 + 6816);
  v15 = *(_QWORD *)(a1 + 6824);
  if ((unint64_t)v14 < v15)
  {
    *v14 = a2;
    v16 = (uint64_t)(v14 + 1);
    goto LABEL_31;
  }
  v17 = *(unsigned int **)(a1 + 6808);
  v18 = v14 - v17;
  v19 = v18 + 1;
  if ((unint64_t)(v18 + 1) >> 62)
    goto LABEL_122;
  v20 = v15 - (_QWORD)v17;
  if (v20 >> 1 > v19)
    v19 = v20 >> 1;
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
    v21 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v21 = v19;
  if (v21)
  {
    if (v21 >> 62)
      goto LABEL_123;
    v22 = operator new(4 * v21);
    v23 = (unsigned int *)&v22[4 * v18];
    v24 = &v22[4 * v21];
    *v23 = a2;
    v16 = (uint64_t)(v23 + 1);
    v25 = (char *)v14 - (char *)v17;
    if (v14 == v17)
      goto LABEL_29;
    goto LABEL_23;
  }
  v22 = 0;
  v23 = (unsigned int *)(4 * v18);
  v24 = 0;
  *(_DWORD *)(4 * v18) = a2;
  v16 = 4 * v18 + 4;
  v25 = (char *)v14 - (char *)v17;
  if (v14 != v17)
  {
LABEL_23:
    v26 = v25 - 4;
    if (v26 < 0x2C)
      goto LABEL_190;
    if ((unint64_t)((char *)v17 - v22) < 0x20)
      goto LABEL_190;
    v27 = (v26 >> 2) + 1;
    v28 = 4 * (v27 & 0x7FFFFFFFFFFFFFF8);
    v29 = &v14[v28 / 0xFFFFFFFFFFFFFFFCLL];
    v23 = (unsigned int *)((char *)v23 - v28);
    v30 = &v22[4 * v18 - 16];
    v31 = v14 - 4;
    v32 = v27 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v33 = *(_OWORD *)v31;
      *(v30 - 1) = *((_OWORD *)v31 - 1);
      *v30 = v33;
      v30 -= 2;
      v31 -= 8;
      v32 -= 8;
    }
    while (v32);
    v14 = v29;
    if (v27 != (v27 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_190:
      do
      {
        v34 = *--v14;
        *--v23 = v34;
      }
      while (v14 != v17);
    }
  }
LABEL_29:
  *(_QWORD *)(a1 + 6808) = v23;
  *(_QWORD *)(a1 + 6816) = v16;
  *(_QWORD *)(a1 + 6824) = v24;
  if (v17)
    operator delete(v17);
LABEL_31:
  *(_QWORD *)(a1 + 6816) = v16;
  *(_BYTE *)(a1 + 6802) = 0;
  *(_WORD *)(a1 + 6800) = 256;
  *(_DWORD *)(a1 + 7864) = 0;
  *(_WORD *)(a1 + 7868) = 0;
  if (*(_BYTE *)(a1 + 2146))
  {
    v35 = *(char **)(a1 + 5288);
    v36 = *(char **)(a1 + 5296);
    v37 = v35;
    if (v36 != v35)
    {
      v38 = (v36 - v35) >> 4;
      v37 = *(char **)(a1 + 5288);
      do
      {
        v39 = v38 >> 1;
        v40 = (unsigned int *)&v37[16 * (v38 >> 1)];
        v42 = *v40;
        v41 = (char *)(v40 + 4);
        v38 += ~(v38 >> 1);
        if (v42 < a2)
          v37 = v41;
        else
          v38 = v39;
      }
      while (v38);
    }
    if (v37 == v36 || *(_DWORD *)v37 != a2 || (v43 = *((_QWORD *)v37 + 1), (*(_BYTE *)(v43 + 4) & 7) != 0))
    {
      v143 = 12;
      strcpy((char *)v142, "vel_and_bias");
      if (v36 == v35)
        goto LABEL_107;
      v86 = (v36 - v35) >> 4;
      do
      {
        v87 = v86 >> 1;
        v88 = (unsigned int *)&v35[16 * (v86 >> 1)];
        v90 = *v88;
        v89 = (char *)(v88 + 4);
        v86 += ~(v86 >> 1);
        if (v90 < a2)
          v35 = v89;
        else
          v86 = v87;
      }
      while (v86);
      if (v35 == v36 || *(_DWORD *)v35 != a2)
      {
LABEL_107:
        v92 = "not found";
      }
      else
      {
        v91 = *(_BYTE *)(*((_QWORD *)v35 + 1) + 4);
        if ((v91 & 4) != 0)
        {
          v92 = "marginalized";
        }
        else if ((v91 & 1) != 0)
        {
          v92 = "new";
        }
        else if ((v91 & 2) != 0)
        {
          v92 = "removed";
        }
        else
        {
          v92 = "unknown";
        }
      }
      sub_20F9B2A4C(&v154);
      v93 = 0x5F646E615F6C6576;
      if (**(int **)(v154 + 56) <= 5
        && ((v94 = *(unsigned __int8 *)(v154 + 72), (v95 = sub_20E8C31DC(v154, "OSLogSurrogateAppender", 1, 0)) == 0)
          ? (v96 = 0)
          : (v96 = v95 + 16),
            v94 || v95))
      {
        sub_20E863438((uint64_t)&v153);
        v120 = sub_20E86A980(&v153.__r_.__value_.__r.__words[2], (uint64_t)"Failed to marginalize state ", 28);
        std::to_string(&v157, a2);
        if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v121 = &v157;
        else
          v121 = (std::string *)v157.__r_.__value_.__r.__words[0];
        if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v122 = HIBYTE(v157.__r_.__value_.__r.__words[2]);
        else
          v122 = v157.__r_.__value_.__l.__size_;
        v123 = sub_20E86A980(v120, (uint64_t)v121, v122);
        v124 = sub_20E86A980(v123, (uint64_t)": ", 2);
        v125 = strlen(v92);
        v126 = sub_20E86A980(v124, (uint64_t)v92, v125);
        sub_20E86A980(v126, (uint64_t)".", 1);
        if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v157.__r_.__value_.__l.__data_);
        sub_20E923E88(&v153, &v152);
        v145.__r_.__value_.__r.__words[0] = (std::string::size_type)&v154;
        v145.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
        v145.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
        v146 = 5;
        v147 = "unknown file";
        v148 = 2809;
        v150 = 0;
        v151 = 0;
        v149 = "unknown function";
        if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v127 = &v152;
        else
          v127 = (std::string *)v152.__r_.__value_.__r.__words[0];
        v144 = v127;
        v128 = *(_QWORD *)v145.__r_.__value_.__l.__data_;
        v129 = (uint64_t *)(*(_QWORD *)v145.__r_.__value_.__l.__data_ + 16);
        if (*(char *)(*(_QWORD *)v145.__r_.__value_.__l.__data_ + 39) < 0)
        {
          v131 = *(const char **)(v128 + 16);
          v130 = *(_QWORD *)(v128 + 24);
        }
        else
        {
          v130 = *(unsigned __int8 *)(*(_QWORD *)v145.__r_.__value_.__l.__data_ + 39);
          v131 = (const char *)(*(_QWORD *)v145.__r_.__value_.__l.__data_ + 16);
        }
        v155 = v131;
        v156 = v130;
        v137 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v137 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)&v157);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v157);
          if (v158 && SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v157.__r_.__value_.__l.__data_);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        v138 = byte_254A4A4F8[23];
        if (byte_254A4A4F8[23] >= 0)
        {
          v139 = byte_254A4A4F8;
        }
        else
        {
          v138 = *(_QWORD *)&byte_254A4A4F8[8];
          v139 = *(const char **)byte_254A4A4F8;
        }
        v160 = v139;
        v161 = v138;
        v157.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v139, v155);
        sub_20E86E5A8(&v157.__r_.__value_.__l.__size_, (uint64_t)&v160);
        sub_20E86E5A8(v159, (uint64_t)&v155);
        v140 = v157.__r_.__value_.__r.__words[0];
        sub_20E86E44C((uint64_t)&v157);
        sub_20FBED740(v96, v129, v140, OS_LOG_TYPE_ERROR, (const char **)&v144);
        if (v94)
        {
          v141 = &v152;
          if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v141 = (std::string *)v152.__r_.__value_.__r.__words[0];
          sub_20E8C003C((uint64_t)&v145, "%s", (const char *)v141);
          sub_20E863570((uint64_t)&v145);
        }
        sub_20E863714((uint64_t)&v145);
        if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v152.__r_.__value_.__l.__data_);
        sub_20E863784((uint64_t)&v153);
        v97 = v143;
        v93 = v142[0];
      }
      else
      {
        v97 = 12;
      }
      v98 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      *((_BYTE *)&v152.__r_.__value_.__s + 23) = 12;
      strcpy((char *)&v152, "marginalize ");
      if ((v97 & 0x80u) == 0)
        v99 = (const std::string::value_type *)v142;
      else
        v99 = (const std::string::value_type *)v93;
      if ((v97 & 0x80u) == 0)
        v100 = v97;
      else
        v100 = v142[1];
      v101 = std::string::append(&v152, v99, v100);
      v102 = *(_OWORD *)&v101->__r_.__value_.__l.__data_;
      v145.__r_.__value_.__r.__words[2] = v101->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v145.__r_.__value_.__l.__data_ = v102;
      v101->__r_.__value_.__l.__size_ = 0;
      v101->__r_.__value_.__r.__words[2] = 0;
      v101->__r_.__value_.__r.__words[0] = 0;
      v103 = std::string::append(&v145, " p ", 3uLL);
      v104 = *(_OWORD *)&v103->__r_.__value_.__l.__data_;
      v157.__r_.__value_.__r.__words[2] = v103->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v157.__r_.__value_.__l.__data_ = v104;
      v103->__r_.__value_.__l.__size_ = 0;
      v103->__r_.__value_.__r.__words[2] = 0;
      v103->__r_.__value_.__r.__words[0] = 0;
      v105 = strlen(v92);
      v106 = std::string::append(&v157, v92, v105);
      v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
      v153.__r_.__value_.__r.__words[2] = v106->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v153.__r_.__value_.__l.__data_ = v107;
      v106->__r_.__value_.__l.__size_ = 0;
      v106->__r_.__value_.__r.__words[2] = 0;
      v106->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v98, &v153);
      v98->__vftable = (std::runtime_error_vtbl *)&off_24CA04F20;
      __cxa_throw(v98, (struct type_info *)&unk_24CA04F38, (void (*)(void *))std::runtime_error::~runtime_error);
    }
    *(_BYTE *)(v43 + 4) ^= 4u;
    v44 = *(unsigned int **)(a1 + 6840);
    v45 = *(_QWORD *)(a1 + 6848);
    if ((unint64_t)v44 < v45)
    {
      *v44 = a2;
      v46 = (uint64_t)(v44 + 1);
LABEL_64:
      *(_QWORD *)(a1 + 6840) = v46;
      *(_BYTE *)(a1 + 6802) = 0;
      *(_WORD *)(a1 + 6800) = 256;
      goto LABEL_65;
    }
    v47 = *(unsigned int **)(a1 + 6832);
    v48 = v44 - v47;
    v49 = v48 + 1;
    if (!((unint64_t)(v48 + 1) >> 62))
    {
      v50 = v45 - (_QWORD)v47;
      if (v50 >> 1 > v49)
        v49 = v50 >> 1;
      if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL)
        v51 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v51 = v49;
      if (!v51)
      {
        v52 = 0;
        v53 = (unsigned int *)(4 * v48);
        v54 = 0;
        *(_DWORD *)(4 * v48) = a2;
        v46 = 4 * v48 + 4;
        v55 = (char *)v44 - (char *)v47;
        if (v44 == v47)
          goto LABEL_62;
        goto LABEL_56;
      }
      if (!(v51 >> 62))
      {
        v52 = operator new(4 * v51);
        v53 = (unsigned int *)&v52[4 * v48];
        v54 = &v52[4 * v51];
        *v53 = a2;
        v46 = (uint64_t)(v53 + 1);
        v55 = (char *)v44 - (char *)v47;
        if (v44 == v47)
        {
LABEL_62:
          *(_QWORD *)(a1 + 6832) = v53;
          *(_QWORD *)(a1 + 6840) = v46;
          *(_QWORD *)(a1 + 6848) = v54;
          if (v47)
            operator delete(v47);
          goto LABEL_64;
        }
LABEL_56:
        v56 = v55 - 4;
        if (v56 < 0x2C)
          goto LABEL_191;
        if ((unint64_t)((char *)v47 - v52) < 0x20)
          goto LABEL_191;
        v57 = (v56 >> 2) + 1;
        v58 = 4 * (v57 & 0x7FFFFFFFFFFFFFF8);
        v59 = &v44[v58 / 0xFFFFFFFFFFFFFFFCLL];
        v53 = (unsigned int *)((char *)v53 - v58);
        v60 = &v52[4 * v48 - 16];
        v61 = v44 - 4;
        v62 = v57 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v63 = *(_OWORD *)v61;
          *(v60 - 1) = *((_OWORD *)v61 - 1);
          *v60 = v63;
          v60 -= 2;
          v61 -= 8;
          v62 -= 8;
        }
        while (v62);
        v44 = v59;
        if (v57 != (v57 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_191:
          do
          {
            v64 = *--v44;
            *--v53 = v64;
          }
          while (v44 != v47);
        }
        goto LABEL_62;
      }
LABEL_123:
      sub_20E877A38();
    }
LABEL_122:
    sub_20E867F44();
  }
  if ((sub_20FBED53C(a1 + 5184, a2) & 1) != 0)
  {
LABEL_65:
    *(_WORD *)(a1 + 7868) = 0;
    *(_DWORD *)(a1 + 7864) = 0;
  }
}

void sub_20FBDABF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,_QWORD *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  uint64_t v55;
  uint64_t v57;

  if (*(_BYTE *)(v55 - 152) && *(char *)(v55 - 153) < 0)
    operator delete(*(void **)(v55 - 176));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a18);
  if (a35 < 0)
    operator delete(__p);
  a36 = (_QWORD *)*MEMORY[0x24BEDB7F0];
  v57 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD **)((char *)&a36 + *(a36 - 3)) = *(_QWORD **)(MEMORY[0x24BEDB7F0] + 64);
  a38 = v57;
  a39 = MEMORY[0x24BEDB848] + 16;
  if (a52 < 0)
    operator delete(a47);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](&a55);
  if (a16 < 0)
    operator delete(a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20FBDAE84(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD **v3;
  uint64_t **v4;
  uint64_t v5;
  uint64_t i;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  unsigned int v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t **v16;
  unsigned int v17;
  _QWORD *v18;
  _QWORD **v19;
  uint64_t *v20;
  uint64_t *v21;
  _QWORD *v22;
  char **v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  char *v27;
  unsigned int v28;
  uint64_t **v29;
  char *v30;
  char *v31;
  unsigned int v32;
  char *v33;
  uint64_t v34;
  uint64_t *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _QWORD *v46;
  _QWORD *v47;
  BOOL v48;
  uint64_t **v50;

  v1 = a1;
  v2 = (uint64_t)(a1 + 5687);
  v3 = (_QWORD **)(a1 + 5690);
  v4 = (uint64_t **)(a1 + 5691);
  sub_20E86872C((uint64_t)(a1 + 5690), (_QWORD *)a1[5691]);
  *(_QWORD *)(v2 + 24) = v4;
  *(_QWORD *)(v2 + 40) = 0;
  v50 = v4;
  *v4 = 0;
  v5 = v1[796];
  for (i = v1[797]; v5 != i; v5 += 9616)
  {
    if (*(_BYTE *)(v5 + 7680) && sub_20FBEE348(v1, *(_DWORD *)(v5 + 7672), *(_DWORD *)(v5 + 7676)))
    {
      v13 = *(_DWORD *)(v5 + 8);
      v14 = v50;
      while (1)
      {
        v15 = *v14;
        v16 = v14;
        if (!*v14)
          break;
        while (1)
        {
          v14 = (uint64_t **)v15;
          v17 = *((_DWORD *)v15 + 8);
          if (v17 > v13)
            break;
          if (v17 >= v13)
            goto LABEL_4;
          v15 = v14[1];
          if (!v15)
          {
            v16 = v14 + 1;
            goto LABEL_14;
          }
        }
      }
LABEL_14:
      v18 = v1;
      v19 = v3;
      v20 = (uint64_t *)v14;
      v14 = (uint64_t **)operator new(0xED0uLL);
      *((_DWORD *)v14 + 8) = v13;
      bzero(v14 + 5, 0x798uLL);
      *((_BYTE *)v14 + 1976) = 1;
      v14[246] = (uint64_t *)&off_24CA00398;
      bzero(v14 + 249, 0x6F8uLL);
      v14[248] = (uint64_t *)0x3FF0000000000000;
      v14[264] = (uint64_t *)0x3FF0000000000000;
      v14[280] = (uint64_t *)0x3FF0000000000000;
      v14[296] = (uint64_t *)0x3FF0000000000000;
      v14[312] = (uint64_t *)0x3FF0000000000000;
      v14[328] = (uint64_t *)0x3FF0000000000000;
      v14[344] = (uint64_t *)0x3FF0000000000000;
      v14[360] = (uint64_t *)0x3FF0000000000000;
      v14[376] = (uint64_t *)0x3FF0000000000000;
      v14[392] = (uint64_t *)0x3FF0000000000000;
      v14[408] = (uint64_t *)0x3FF0000000000000;
      v14[424] = (uint64_t *)0x3FF0000000000000;
      v14[440] = (uint64_t *)0x3FF0000000000000;
      v14[456] = (uint64_t *)0x3FF0000000000000;
      v14[472] = (uint64_t *)0x3FF0000000000000;
      v14[473] = (uint64_t *)-1;
      *v14 = 0;
      v14[1] = 0;
      v14[2] = v20;
      v3 = v19;
      *v16 = (uint64_t *)v14;
      v21 = (uint64_t *)v14;
      v22 = (_QWORD *)**v19;
      if (v22)
      {
        *v19 = v22;
        v21 = *v16;
      }
      sub_20E868578(*(uint64_t **)(v2 + 32), v21);
      ++*(_QWORD *)(v2 + 40);
      v1 = v18;
LABEL_4:
      memcpy(v14 + 5, (const void *)(v5 + 3928), 0x708uLL);
      v7 = *(_OWORD *)(v5 + 5728);
      v8 = *(_OWORD *)(v5 + 5744);
      v9 = *(_OWORD *)(v5 + 5760);
      *((_OWORD *)v14 + 118) = *(_OWORD *)(v5 + 5776);
      *((_OWORD *)v14 + 117) = v9;
      *((_OWORD *)v14 + 116) = v8;
      *((_OWORD *)v14 + 115) = v7;
      v10 = *(_OWORD *)(v5 + 5792);
      v11 = *(_OWORD *)(v5 + 5808);
      v12 = *(_OWORD *)(v5 + 5824);
      v14[244] = *(uint64_t **)(v5 + 5840);
      *((_OWORD *)v14 + 121) = v12;
      *((_OWORD *)v14 + 120) = v11;
      *((_OWORD *)v14 + 119) = v10;
      *((_BYTE *)v14 + 1960) = *(_BYTE *)(v5 + 5848);
      *((_BYTE *)v14 + 1976) = *(_BYTE *)(v5 + 5864);
      memcpy(v14 + 248, (const void *)(v5 + 5872), 0x710uLL);
      i = v1[797];
    }
  }
  v23 = (char **)(v2 + 8);
  sub_20F89E9C8(v2, *(_QWORD **)(v2 + 8));
  *(_QWORD *)v2 = v2 + 8;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 8) = 0;
  v24 = v1[1];
  v25 = *(_QWORD **)(v24 + 48);
  v26 = (_QWORD *)(v24 + 56);
  if (v25 != (_QWORD *)(v24 + 56))
  {
    do
    {
      v27 = (char *)v25[6];
      v28 = *((_DWORD *)v25 + 10);
      v29 = (uint64_t **)(v2 + 8);
      v30 = (char *)(v2 + 8);
      v31 = *v23;
      if (*v23)
      {
        while (1)
        {
          while (1)
          {
            v30 = v31;
            v32 = *((_DWORD *)v31 + 8);
            if (v28 >= v32)
              break;
            v31 = *(char **)v30;
            v29 = (uint64_t **)v30;
            if (!*(_QWORD *)v30)
              goto LABEL_26;
          }
          if (v32 >= v28)
            break;
          v31 = (char *)*((_QWORD *)v30 + 1);
          if (!v31)
          {
            v29 = (uint64_t **)(v30 + 8);
            goto LABEL_26;
          }
        }
      }
      else
      {
LABEL_26:
        v33 = v30;
        v30 = (char *)operator new(0x368uLL);
        *((_DWORD *)v30 + 8) = v28;
        bzero(v30 + 40, 0x338uLL);
        *((_QWORD *)v30 + 108) = 0xBFF0000000000000;
        *(_QWORD *)v30 = 0;
        *((_QWORD *)v30 + 1) = 0;
        *((_QWORD *)v30 + 2) = v33;
        *v29 = (uint64_t *)v30;
        v34 = **(_QWORD **)v2;
        v35 = (uint64_t *)v30;
        if (v34)
        {
          *(_QWORD *)v2 = v34;
          v35 = *v29;
        }
        sub_20E868578(*(uint64_t **)(v2 + 8), v35);
        ++*(_QWORD *)(v2 + 16);
      }
      v36 = *(_OWORD *)v27;
      v37 = *((_OWORD *)v27 + 1);
      *(_OWORD *)(v30 + 72) = *((_OWORD *)v27 + 2);
      *(_OWORD *)(v30 + 56) = v37;
      *(_OWORD *)(v30 + 40) = v36;
      v38 = *((_OWORD *)v27 + 3);
      v39 = *((_OWORD *)v27 + 4);
      v40 = *((_OWORD *)v27 + 5);
      *(_OWORD *)(v30 + 136) = *((_OWORD *)v27 + 6);
      *(_OWORD *)(v30 + 120) = v40;
      *(_OWORD *)(v30 + 104) = v39;
      *(_OWORD *)(v30 + 88) = v38;
      v41 = *((_OWORD *)v27 + 7);
      v42 = *((_OWORD *)v27 + 8);
      v43 = *((_OWORD *)v27 + 9);
      *((_QWORD *)v30 + 25) = *((_QWORD *)v27 + 20);
      *(_OWORD *)(v30 + 184) = v43;
      *(_OWORD *)(v30 + 168) = v42;
      *(_OWORD *)(v30 + 152) = v41;
      memcpy(v30 + 208, v27 + 168, 0x120uLL);
      memcpy(v30 + 496, v27 + 456, 0x120uLL);
      if (v30 + 40 != v27)
        sub_20EE62A1C((char **)v30 + 98, *((_QWORD *)v27 + 93), *((_QWORD *)v27 + 94), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)v27 + 94) - *((_QWORD *)v27 + 93)) >> 3));
      v44 = *((_OWORD *)v27 + 48);
      *((_QWORD *)v30 + 103) = *((_QWORD *)v27 + 98);
      *(_OWORD *)(v30 + 808) = v44;
      v45 = *(_OWORD *)(v27 + 792);
      *((_QWORD *)v30 + 106) = *((_QWORD *)v27 + 101);
      *((_OWORD *)v30 + 52) = v45;
      *(_OWORD *)(v30 + 856) = *((_OWORD *)v27 + 51);
      v46 = (_QWORD *)v25[1];
      if (v46)
      {
        do
        {
          v47 = v46;
          v46 = (_QWORD *)*v46;
        }
        while (v46);
      }
      else
      {
        do
        {
          v47 = (_QWORD *)v25[2];
          v48 = *v47 == (_QWORD)v25;
          v25 = v47;
        }
        while (!v48);
      }
      v25 = v47;
    }
    while (v47 != v26);
    v24 = v1[1];
  }
  return sub_20FBEE4FC((uint64_t)(v1 + 5476), v24 + 72);
}

void sub_20FBDB2C4(int64x2_t *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6)
{
  uint64_t v6;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  _QWORD *v15;
  _QWORD *v16;
  int64x2_t *v17;
  __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  int64x2_t *v34;
  int64x2_t *v35;
  unsigned int *v36;
  unsigned int *v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  _QWORD *v45;
  char v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unsigned int *v53;
  unsigned int *v54;
  unint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  _QWORD *v62;
  char v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unsigned int *v70;
  unsigned int *i;
  unsigned int *v72;
  unsigned int *j;
  unsigned int *v74;
  unsigned int *k;
  unsigned int *v76;
  unsigned int *m;
  unsigned int *v78;
  unsigned int *n;
  unsigned int *v80;
  unsigned int *v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t *v84;
  unint64_t *v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t *v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t *v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unsigned int *v104;
  _DWORD *v105;
  unsigned int v106;
  unint64_t v107;
  unint64_t *v108;
  unint64_t *v109;
  unint64_t *v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  unint64_t v114;
  unint64_t *v115;
  unint64_t *v116;
  unint64_t v117;
  __int128 v118;
  __int128 v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  __int128 v123;
  __int128 v124;
  unint64_t v125;
  __int128 v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  char v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  int v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  unint64_t v147;
  unsigned int *v148;
  unint64_t v149;
  char *v150;
  unint64_t *v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  unint64_t *v160;
  unint64_t v161;
  __int128 v162;
  __int128 v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  char *v170;
  __int128 v171;
  __int128 v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t *v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t *v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  unint64_t v182;
  unint64_t *v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  unint64_t v187;
  unint64_t *v188;
  uint64_t v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  unsigned int *v205;
  unint64_t v206;
  int64_t v207;
  int64x2_t *v208;
  uint64_t *v209;
  __int8 *v210;
  __int8 *v211;
  unint64_t v213;
  _BYTE v214[40];
  __int128 v215;
  _OWORD v216[2];
  __int128 v217;
  __int128 v218;
  _OWORD v219[3];
  uint64_t v220;
  uint64_t v221;
  std::__shared_weak_count *v222;
  uint64_t v223;
  std::__shared_weak_count *v224;
  uint64_t v225;
  std::__shared_weak_count *v226;
  __int128 v227[2];
  uint64_t v228;
  std::__shared_weak_count *v229;
  uint64_t v230;
  std::__shared_weak_count *v231;
  __int128 v232;
  __int128 v233;
  unint64_t *v234;
  uint64_t v235;
  std::__shared_weak_count *v236;
  unint64_t v237;
  __int128 v238;
  unint64_t v239;
  __int128 v240;
  __int128 v241;
  char v242;
  uint64_t v243;
  std::__shared_weak_count *v244;
  char v245;
  __int128 v246;
  unint64_t *v247;
  char *v248;
  uint64_t *v249;
  unint64_t v250;
  char v251;
  __int128 v252;
  unint64_t v253;
  __int128 v254;
  unint64_t v255;
  __int128 v256;

  v6 = a1->i64[1];
  if (!a1[134].i8[2])
  {
    v15 = *(_QWORD **)(v6 + 48);
    v16 = (_QWORD *)(v6 + 56);
    if (v15 == (_QWORD *)(v6 + 56))
      goto LABEL_48;
    v17 = a1 + 324;
    v18 = &a1[491].i8[8];
    while (1)
    {
      v19 = a1[392].i64[1];
      if (v19 == a1[392].i64[0])
        LODWORD(v20) = 0;
      else
        v20 = *(_QWORD *)(v19 - 272) + 1;
      v21 = *((_DWORD *)v15 + 10);
      *(_OWORD *)&v214[24] = 0uLL;
      v216[0] = 0uLL;
      v217 = 0uLL;
      v213 = v20;
      *(_OWORD *)&v214[8] = 0x3FF0000000000000uLL;
      v215 = 0x3FF0000000000000uLL;
      v216[1] = 0x3FF0000000000000uLL;
      v218 = 0uLL;
      LODWORD(v227[0]) = v21;
      v232 = 0uLL;
      if ((sub_20FBF05E0(v17, (__int128 *)&v213, v227, 0, 0, a6) & 1) != 0)
      {
        v18[4] = 0;
        *(_DWORD *)v18 = 0;
        v22 = (std::__shared_weak_count *)*((_QWORD *)&v218 + 1);
        if (!*((_QWORD *)&v218 + 1))
          goto LABEL_28;
      }
      else
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 2057, (uint64_t)"ret.second", 10, (uint64_t)"Failed to add Pose prior factor", 31, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v22 = (std::__shared_weak_count *)*((_QWORD *)&v218 + 1);
        if (!*((_QWORD *)&v218 + 1))
        {
LABEL_28:
          v25 = (_QWORD *)v15[1];
          if (!v25)
            goto LABEL_32;
          goto LABEL_29;
        }
      }
      p_shared_owners = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldaxr(p_shared_owners);
      while (__stlxr(v24 - 1, p_shared_owners));
      if (v24)
        goto LABEL_28;
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
      v25 = (_QWORD *)v15[1];
      if (!v25)
      {
        do
        {
LABEL_32:
          v26 = (_QWORD *)v15[2];
          v14 = *v26 == (_QWORD)v15;
          v15 = v26;
        }
        while (!v14);
        goto LABEL_16;
      }
      do
      {
LABEL_29:
        v26 = v25;
        v25 = (_QWORD *)*v25;
      }
      while (v25);
LABEL_16:
      v15 = v26;
      if (v26 == v16)
        goto LABEL_48;
    }
  }
  if (*(_QWORD *)(v6 + 64) < (unint64_t)(a2 + 1))
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 2028, (uint64_t)"this->viobadata_ref_.state_set->size() >= 1 + kept_idx", 54, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_101;
    }
    v6 = a1->i64[1];
  }
  v9 = *(_QWORD **)(v6 + 48);
  if (a2)
  {
    v10 = a2;
    do
    {
      v12 = (_QWORD *)v9[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v9[2];
          v14 = *v13 == (_QWORD)v9;
          v9 = v13;
        }
        while (!v14);
      }
      v9 = v13;
    }
    while (v10-- > 1);
  }
  else
  {
    v13 = *(_QWORD **)(v6 + 48);
  }
  v27 = *((unsigned int *)v13 + 10);
  v220 = 0;
  v221 = 0;
  v218 = 0u;
  memset(v219, 0, sizeof(v219));
  v217 = 0u;
  v215 = 0u;
  memset(v216, 0, sizeof(v216));
  memset(&v214[8], 0, 32);
  v227[0] = 0uLL;
  v213 = v27;
  v222 = 0;
  *(_QWORD *)&v246 = v27 | (v27 << 32);
  v232 = 0uLL;
  if ((sub_20FBEF3AC(a1 + 324, &v213, &v246, 0, 0, a6) & 1) != 0)
  {
    a1[491].i8[12] = 0;
    a1[491].i32[2] = 0;
  }
  v28 = v222;
  if (v222)
  {
    v29 = (unint64_t *)&v222->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = (std::__shared_weak_count *)*((_QWORD *)&v227[0] + 1);
  if (*((_QWORD *)&v227[0] + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v227[0] + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
LABEL_48:
  v34 = a1;
  v35 = a1 + 324;
  v36 = (unsigned int *)a1[336].i64[1];
  v37 = (unsigned int *)a1[337].i64[0];
  if (v36 != v37)
  {
    while (1)
    {
      if (*(_BYTE *)(*((_QWORD *)v36 + 1) + 20))
      {
        v38 = *v36;
        v39 = (_QWORD *)v34[393].i64[1];
        v40 = (_QWORD *)v34[394].i64[0];
        if (v40 == v39)
          break;
        v41 = 0xAF8AF8AF8AF8AF8BLL * (v40 - v39);
        do
        {
          v42 = v41 >> 1;
          v43 = &v39[35 * (v41 >> 1)];
          v44 = *v43;
          v45 = v43 + 35;
          v41 += ~(v41 >> 1);
          if (v44 < v38)
            v39 = v45;
          else
            v41 = v42;
        }
        while (v41);
        if (v40 == v39 || *v39 != v38)
          break;
      }
LABEL_50:
      v36 += 4;
      if (v36 == v37)
        goto LABEL_75;
    }
    *(_OWORD *)&v214[24] = 0uLL;
    v216[0] = 0uLL;
    v217 = 0uLL;
    v227[0] = 0uLL;
    v213 = v38;
    *(_OWORD *)&v214[8] = 0x3FF0000000000000uLL;
    v215 = 0x3FF0000000000000uLL;
    v216[1] = 0x3FF0000000000000uLL;
    v218 = 0uLL;
    LODWORD(v246) = v38;
    v232 = 0uLL;
    v46 = sub_20FB8AB84(v35, (__int128 *)&v213, &v246, 0, 0, a6);
    if ((v46 & 1) != 0)
    {
      a1[491].i8[12] = 0;
      a1[491].i32[2] = 0;
    }
    v47 = (std::__shared_weak_count *)*((_QWORD *)&v218 + 1);
    if (!*((_QWORD *)&v218 + 1))
      goto LABEL_66;
    v48 = (unint64_t *)(*((_QWORD *)&v218 + 1) + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
      v50 = (std::__shared_weak_count *)*((_QWORD *)&v227[0] + 1);
      if (!*((_QWORD *)&v227[0] + 1))
        goto LABEL_72;
    }
    else
    {
LABEL_66:
      v50 = (std::__shared_weak_count *)*((_QWORD *)&v227[0] + 1);
      if (!*((_QWORD *)&v227[0] + 1))
        goto LABEL_72;
    }
    v51 = (unint64_t *)&v50->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
LABEL_72:
    v34 = a1;
    if ((v46 & 1) == 0
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 2089, (uint64_t)"result", 6, (uint64_t)"Failed to add the factor.", 25, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_101;
    }
    goto LABEL_50;
  }
LABEL_75:
  v53 = (unsigned int *)v34[342].i64[1];
  v54 = (unsigned int *)v34[343].i64[0];
  if (v53 != v54)
  {
    v211 = &v34[491].i8[8];
    while (1)
    {
      if (*(_BYTE *)(*((_QWORD *)v53 + 1) + 20))
      {
        v55 = *v53;
        v56 = (_QWORD *)v34[395].i64[0];
        v57 = (_QWORD *)v34[395].i64[1];
        if (v57 == v56)
          break;
        v58 = 0xAF8AF8AF8AF8AF8BLL * (v57 - v56);
        do
        {
          v59 = v58 >> 1;
          v60 = &v56[35 * (v58 >> 1)];
          v61 = *v60;
          v62 = v60 + 35;
          v58 += ~(v58 >> 1);
          if (v61 < v55)
            v56 = v62;
          else
            v58 = v59;
        }
        while (v58);
        if (v57 == v56 || *v56 != v55)
          break;
      }
LABEL_77:
      v53 += 4;
      if (v53 == v54)
        goto LABEL_102;
    }
    *(_OWORD *)&v214[24] = 0uLL;
    v216[0] = 0uLL;
    v217 = 0uLL;
    v227[0] = 0uLL;
    v213 = v55;
    *(_OWORD *)&v214[8] = 0x3FF0000000000000uLL;
    v215 = 0x3FF0000000000000uLL;
    v216[1] = 0x3FF0000000000000uLL;
    v218 = 0uLL;
    LODWORD(v246) = v55;
    v232 = 0uLL;
    v63 = sub_20FBF1398(v35, (__int128 *)&v213, &v246, 0, 0, a6);
    if ((v63 & 1) != 0)
    {
      v211[4] = 0;
      *(_DWORD *)v211 = 0;
    }
    v64 = (std::__shared_weak_count *)*((_QWORD *)&v218 + 1);
    if (!*((_QWORD *)&v218 + 1))
      goto LABEL_93;
    v65 = (unint64_t *)(*((_QWORD *)&v218 + 1) + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
      v67 = (std::__shared_weak_count *)*((_QWORD *)&v227[0] + 1);
      if (!*((_QWORD *)&v227[0] + 1))
        goto LABEL_99;
    }
    else
    {
LABEL_93:
      v67 = (std::__shared_weak_count *)*((_QWORD *)&v227[0] + 1);
      if (!*((_QWORD *)&v227[0] + 1))
        goto LABEL_99;
    }
    v68 = (unint64_t *)&v67->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
LABEL_99:
    v34 = a1;
    if ((v63 & 1) == 0
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 2119, (uint64_t)"result", 6, (uint64_t)"Failed to add the factor.", 25, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_101;
    }
    goto LABEL_77;
  }
LABEL_102:
  v70 = (unsigned int *)v34[354].i64[1];
  for (i = (unsigned int *)v34[355].i64[0]; v70 != i; v70 += 4)
  {
    if (*(_BYTE *)(*((_QWORD *)v70 + 1) + 20))
    {
      v213 = *v70;
      *(_QWORD *)&v214[8] = 0;
      v214[16] = 0;
      v214[24] = 0;
      LODWORD(v227[0]) = v213;
      v232 = 0uLL;
      if ((sub_20FBF2150(v35, &v213, (unsigned int *)v227, 0, 0) & 1) != 0)
      {
        v34[491].i8[12] = 0;
        v34[491].i32[2] = 0;
      }
    }
  }
  v72 = (unsigned int *)v34[366].i64[1];
  for (j = (unsigned int *)v34[367].i64[0]; v72 != j; v72 += 4)
  {
    if (*(_BYTE *)(*((_QWORD *)v72 + 1) + 20))
    {
      v213 = *v72;
      LOBYTE(v215) = 0;
      LOBYTE(v216[1]) = 0;
      LODWORD(v227[0]) = v213;
      v232 = 0uLL;
      if ((sub_20FB80AC8(v35, (__int128 *)&v213, (unsigned int *)v227, 0, 0) & 1) != 0)
      {
        v34[491].i8[12] = 0;
        v34[491].i32[2] = 0;
      }
    }
  }
  v74 = (unsigned int *)v34[372].i64[1];
  for (k = (unsigned int *)v34[373].i64[0]; v74 != k; v74 += 4)
  {
    if (*(_BYTE *)(*((_QWORD *)v74 + 1) + 20))
    {
      v213 = *v74;
      LOBYTE(v215) = 0;
      LOBYTE(v216[1]) = 0;
      LODWORD(v227[0]) = v213;
      v232 = 0uLL;
      if ((sub_20FBF2AB4(v35, (__int128 *)&v213, (unsigned int *)v227, 0, 0) & 1) != 0)
      {
        v34[491].i8[12] = 0;
        v34[491].i32[2] = 0;
      }
    }
  }
  v76 = (unsigned int *)v34[378].i64[1];
  for (m = (unsigned int *)v34[379].i64[0]; v76 != m; v76 += 4)
  {
    if (*(_BYTE *)(*((_QWORD *)v76 + 1) + 20))
    {
      v213 = *v76;
      v214[32] = 0;
      LOBYTE(v216[0]) = 0;
      LODWORD(v246) = v213;
      v227[0] = 0uLL;
      v232 = 0uLL;
      if ((sub_20FBF3794(v35, (__int128 *)&v213, (unsigned int *)&v246, 0, 0) & 1) != 0)
      {
        v34[491].i8[12] = 0;
        v34[491].i32[2] = 0;
      }
    }
  }
  v78 = (unsigned int *)v34[360].i64[1];
  for (n = (unsigned int *)v34[361].i64[0]; v78 != n; v78 += 4)
  {
    if (*(_BYTE *)(*((_QWORD *)v78 + 1) + 20))
    {
      v213 = *v78;
      v214[32] = 0;
      LOBYTE(v216[0]) = 0;
      LODWORD(v227[0]) = v213;
      v232 = 0uLL;
      if ((sub_20FBF44EC(v35, (__int128 *)&v213, (unsigned int *)v227, 0, 0) & 1) != 0)
      {
        v34[491].i8[12] = 0;
        v34[491].i32[2] = 0;
      }
    }
  }
  v80 = (unsigned int *)v34[348].i64[1];
  v81 = (unsigned int *)v34[349].i64[0];
  if (v80 != v81)
  {
    v208 = v34 + 425;
    v210 = &v34[491].i8[8];
    v209 = &v34[397].i64[1];
    do
    {
      v82 = *((_QWORD *)v80 + 1);
      if ((*(_BYTE *)(v82 + 4) & 6) != 0 || !*(_BYTE *)(v82 + 20))
        goto LABEL_134;
      v83 = *v80;
      v84 = (unint64_t *)v34[396].i64[1];
      v85 = (unint64_t *)v34[397].i64[0];
      v86 = (char *)v85 - (char *)v84;
      if (v85 == v84)
      {
        v226 = 0;
        v225 = 0;
        *(_QWORD *)&v227[0] = v83;
        v224 = 0;
        v223 = 0;
        v94 = v84;
        v231 = 0;
        v230 = 0;
      }
      else
      {
        v87 = 0xCCCCCCCCCCCCCCCDLL * (v86 >> 5);
        v88 = (unint64_t *)v34[396].i64[1];
        v89 = v87;
        do
        {
          v90 = v89 >> 1;
          v91 = &v88[20 * (v89 >> 1)];
          v93 = *v91;
          v92 = v91 + 20;
          v89 += ~(v89 >> 1);
          if (v93 < v83)
            v88 = v92;
          else
            v89 = v90;
        }
        while (v89);
        if (v85 != v88 && *v88 == v83)
          goto LABEL_134;
        v226 = 0;
        v225 = 0;
        *(_QWORD *)&v227[0] = v83;
        v228 = 0;
        v229 = 0;
        v224 = 0;
        v223 = 0;
        v231 = 0;
        v230 = 0;
        v94 = v85;
        if (*(v85 - 20) >= v83)
        {
          v95 = v84;
          do
          {
            v96 = v87 >> 1;
            v97 = &v95[20 * (v87 >> 1)];
            v99 = *v97;
            v98 = v97 + 20;
            v87 += ~(v87 >> 1);
            if (v99 < v83)
              v95 = v98;
            else
              v87 = v96;
          }
          while (v87);
          v94 = v85;
          if (v95 != v85)
          {
            v94 = v95;
            if (*v95 == v83)
              goto LABEL_194;
          }
        }
      }
      v232 = v227[0];
      v235 = 0;
      v236 = 0;
      v228 = 0;
      v229 = 0;
      v243 = 0;
      v244 = 0;
      v237 = 0;
      *((_QWORD *)&v241 + 1) = 0xBFF0000000000000;
      v242 = 0;
      v245 = 0;
      v100 = v34[348].i64[1];
      v101 = v34[349].i64[0];
      if (v101 == v100)
        goto LABEL_184;
      v102 = (v101 - v100) >> 4;
      do
      {
        v103 = v102 >> 1;
        v104 = (unsigned int *)(v100 + 16 * (v102 >> 1));
        v106 = *v104;
        v105 = v104 + 4;
        v102 += ~(v102 >> 1);
        if (v106 < v83)
          v100 = (uint64_t)v105;
        else
          v102 = v103;
      }
      while (v102);
      if (v100 == v101 || *(_DWORD *)v100 != (_DWORD)v83)
        goto LABEL_184;
      v237 = *(_QWORD *)(v100 + 8);
      v107 = v237;
      ++*(_DWORD *)(*(_QWORD *)(v100 + 8) + 8);
      if (!*(_BYTE *)(v107 + 20))
      {
        --*(_DWORD *)(v107 + 8);
        v237 = 0;
LABEL_184:
        v130 = 1;
        v131 = v236;
        if (v236)
          goto LABEL_185;
        goto LABEL_189;
      }
      *(_OWORD *)v214 = v232;
      *(_OWORD *)&v214[16] = v233;
      *(_QWORD *)&v214[32] = v234;
      v215 = 0uLL;
      v235 = 0;
      v236 = 0;
      v213 = v83;
      *(_QWORD *)&v216[0] = v107;
      *(_OWORD *)((char *)v216 + 8) = v238;
      *((_QWORD *)&v216[1] + 1) = v239;
      v218 = v241;
      v217 = v240;
      LOBYTE(v219[0]) = v242;
      memset((char *)v219 + 8, 0, 17);
      v243 = 0;
      v244 = 0;
      if (v85 != v94 && *v94 == v83)
        goto LABEL_280;
      v206 = v107;
      v207 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v94 - (char *)v84) >> 5);
      if ((unint64_t)v85 < *v209)
      {
        if (v94 == v85)
        {
          *v85 = v83;
          v160 = &v84[4 * (((char *)v94 - (char *)v84) >> 5)];
          *(_OWORD *)(v160 + 1) = *(_OWORD *)v214;
          v161 = *(_QWORD *)&v214[32];
          *(_OWORD *)(v160 + 3) = *(_OWORD *)&v214[16];
          v160[6] = 0;
          v160[7] = 0;
          v160[5] = v161;
          v215 = 0uLL;
          v160[8] = v107;
          v162 = *(_OWORD *)((char *)v216 + 8);
          v160[11] = *((_QWORD *)&v216[1] + 1);
          *(_OWORD *)(v160 + 9) = v162;
          v163 = v217;
          v160[14] = v218;
          *((_OWORD *)v160 + 6) = v163;
          v164 = *((_QWORD *)&v218 + 1);
          *((_BYTE *)v160 + 128) = v219[0];
          v160[15] = v164;
          v160[17] = 0;
          v160[18] = 0;
          *((_QWORD *)&v219[0] + 1) = 0;
          *(_QWORD *)&v219[1] = 0;
          *((_BYTE *)v160 + 152) = 0;
          v34[397].i64[0] = (uint64_t)(v85 + 20);
        }
        else
        {
          v205 = v81;
          v256 = v232;
          v246 = v233;
          v247 = v234;
          v215 = 0uLL;
          v254 = v238;
          v255 = v239;
          v253 = v241;
          v252 = v240;
          v251 = v242;
          v250 = *((_QWORD *)&v241 + 1);
          v108 = v85 - 20;
          v109 = v85;
          v110 = v85 - 20;
          *((_QWORD *)&v219[0] + 1) = 0;
          *(_QWORD *)&v219[1] = 0;
          if ((unint64_t)v85 >= 0xA0)
          {
            do
            {
              *v109 = *v110;
              *(_OWORD *)(v109 + 1) = *(_OWORD *)(v110 + 1);
              v111 = *(_OWORD *)(v110 + 3);
              v109[5] = v110[5];
              *(_OWORD *)(v109 + 3) = v111;
              *((_OWORD *)v109 + 3) = *((_OWORD *)v110 + 3);
              v110[6] = 0;
              v110[7] = 0;
              v109[8] = v110[8];
              v112 = *(_OWORD *)(v110 + 9);
              v109[11] = v110[11];
              *(_OWORD *)(v109 + 9) = v112;
              v113 = *((_OWORD *)v110 + 6);
              v109[14] = v110[14];
              *((_OWORD *)v109 + 6) = v113;
              v114 = v110[15];
              *((_BYTE *)v109 + 128) = *((_BYTE *)v110 + 128);
              v109[15] = v114;
              *(_OWORD *)(v109 + 17) = *(_OWORD *)(v110 + 17);
              v110[17] = 0;
              v110[18] = 0;
              *((_BYTE *)v109 + 152) = *((_BYTE *)v110 + 152);
              v109 += 20;
              v110 += 20;
            }
            while (v110 < v85);
          }
          v34[397].i64[0] = (uint64_t)v109;
          if (v85 != v94 + 20)
          {
            v115 = v85 - 20;
            v116 = v85;
            do
            {
              v117 = *(v115 - 20);
              v115 -= 20;
              *(v116 - 20) = v117;
              v116 -= 20;
              *(_OWORD *)(v116 + 1) = *(_OWORD *)(v115 + 1);
              v118 = *(_OWORD *)(v115 + 3);
              v116[5] = v115[5];
              *(_OWORD *)(v116 + 3) = v118;
              v119 = *((_OWORD *)v115 + 3);
              v115[6] = 0;
              v115[7] = 0;
              v120 = (std::__shared_weak_count *)v116[7];
              *((_OWORD *)v116 + 3) = v119;
              if (v120)
              {
                v121 = (unint64_t *)&v120->__shared_owners_;
                do
                  v122 = __ldaxr(v121);
                while (__stlxr(v122 - 1, v121));
                if (!v122)
                {
                  ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
                  std::__shared_weak_count::__release_weak(v120);
                }
              }
              *(v85 - 12) = *(v108 - 12);
              v123 = *(_OWORD *)(v108 - 11);
              *(v85 - 9) = *(v108 - 9);
              *(_OWORD *)(v85 - 11) = v123;
              v124 = *((_OWORD *)v108 - 4);
              *(v85 - 6) = *(v108 - 6);
              *((_OWORD *)v85 - 4) = v124;
              v125 = *(v108 - 5);
              *((_BYTE *)v85 - 32) = *((_BYTE *)v108 - 32);
              *(v85 - 5) = v125;
              v126 = *(_OWORD *)(v108 - 3);
              *(v108 - 3) = 0;
              *(v108 - 2) = 0;
              v127 = (std::__shared_weak_count *)*(v85 - 2);
              *(_OWORD *)(v85 - 3) = v126;
              if (v127)
              {
                v128 = (unint64_t *)&v127->__shared_owners_;
                do
                  v129 = __ldaxr(v128);
                while (__stlxr(v129 - 1, v128));
                if (!v129)
                {
                  ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
                  std::__shared_weak_count::__release_weak(v127);
                }
              }
              *((_BYTE *)v85 - 8) = *((_BYTE *)v108 - 8);
              v85 = v116;
              v108 = v115;
            }
            while (v115 != v94);
          }
          *v94 = v83;
          v151 = &v84[4 * (((char *)v94 - (char *)v84) >> 5)];
          *(_OWORD *)(v151 + 1) = v256;
          *(_OWORD *)(v151 + 3) = v246;
          v152 = (std::__shared_weak_count *)v151[7];
          v151[5] = (unint64_t)v247;
          v151[6] = 0;
          v151[7] = 0;
          v81 = v205;
          if (v152)
          {
            v153 = (unint64_t *)&v152->__shared_owners_;
            do
              v154 = __ldaxr(v153);
            while (__stlxr(v154 - 1, v153));
            if (!v154)
            {
              ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
              std::__shared_weak_count::__release_weak(v152);
            }
          }
          v155 = &v84[20 * v207];
          v155[8] = v206;
          *(_OWORD *)(v155 + 9) = v254;
          v155[11] = v255;
          *((_OWORD *)v155 + 6) = v252;
          v156 = v250;
          v155[14] = v253;
          v155[15] = v156;
          *((_BYTE *)v155 + 128) = v251;
          v157 = (std::__shared_weak_count *)v155[18];
          v155[17] = 0;
          v155[18] = 0;
          v34 = a1;
          if (v157)
          {
            v158 = (unint64_t *)&v157->__shared_owners_;
            do
              v159 = __ldaxr(v158);
            while (__stlxr(v159 - 1, v158));
            if (!v159)
            {
              ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
              std::__shared_weak_count::__release_weak(v157);
            }
          }
          LOBYTE(v84[20 * v207 + 19]) = 0;
        }
        goto LABEL_275;
      }
      v147 = 0xCCCCCCCCCCCCCCCDLL * (v86 >> 5) + 1;
      if (v147 > 0x199999999999999)
        sub_20E867F44();
      v148 = v81;
      if (0x999999999999999ALL * ((*v209 - (uint64_t)v84) >> 5) > v147)
        v147 = 0x999999999999999ALL * ((*v209 - (uint64_t)v84) >> 5);
      if (0xCCCCCCCCCCCCCCCDLL * ((*v209 - (uint64_t)v84) >> 5) >= 0xCCCCCCCCCCCCCCLL)
        v149 = 0x199999999999999;
      else
        v149 = v147;
      v249 = v209;
      if (v149)
      {
        if (v149 > 0x199999999999999)
          sub_20E877A38();
        v150 = (char *)operator new(160 * v149);
      }
      else
      {
        v150 = 0;
      }
      v165 = (uint64_t)&v150[32 * (((char *)v94 - (char *)v84) >> 5)];
      *(_QWORD *)&v246 = v150;
      *((_QWORD *)&v246 + 1) = v165;
      v247 = (unint64_t *)v165;
      v248 = &v150[160 * v149];
      if (v207 == v149)
      {
        v81 = v148;
        if ((char *)v94 - (char *)v84 < 1)
        {
          if (v84 == v94)
            v169 = 1;
          else
            v169 = 0x999999999999999ALL * (((char *)v94 - (char *)v84) >> 5);
          if (v169 > 0x199999999999999)
            sub_20E877A38();
          v170 = (char *)operator new(160 * v169);
          v165 = (uint64_t)&v170[160 * (v169 >> 2)];
          *(_QWORD *)&v246 = v170;
          *((_QWORD *)&v246 + 1) = v165;
          v248 = &v170[160 * v169];
          if (v150)
            operator delete(v150);
          v168 = v165;
        }
        else
        {
          v166 = v207 + 2;
          if (v207 >= -1)
            v166 = v207 + 1;
          v167 = v166 >> 1;
          v168 = sub_20F91EB0C((uint64_t)&v150[32 * (((char *)v94 - (char *)v84) >> 5)], (uint64_t)&v150[32 * (((char *)v94 - (char *)v84) >> 5)], v165 - 160 * (v166 >> 1));
          v165 = *((_QWORD *)&v246 + 1) - 160 * v167;
          *((_QWORD *)&v246 + 1) = v165;
          v83 = v213;
        }
      }
      else
      {
        v168 = (uint64_t)&v150[32 * (((char *)v94 - (char *)v84) >> 5)];
        v81 = v148;
      }
      *(_QWORD *)v168 = v83;
      *(_OWORD *)(v168 + 8) = *(_OWORD *)v214;
      *(_QWORD *)(v168 + 40) = *(_QWORD *)&v214[32];
      *(_OWORD *)(v168 + 24) = *(_OWORD *)&v214[16];
      *(_OWORD *)(v168 + 48) = v215;
      v215 = 0uLL;
      *(_QWORD *)(v168 + 64) = *(_QWORD *)&v216[0];
      v171 = *(_OWORD *)((char *)v216 + 8);
      *(_QWORD *)(v168 + 88) = *((_QWORD *)&v216[1] + 1);
      *(_OWORD *)(v168 + 72) = v171;
      v172 = v217;
      *(_QWORD *)(v168 + 112) = v218;
      *(_OWORD *)(v168 + 96) = v172;
      v173 = *((_QWORD *)&v218 + 1);
      *(_BYTE *)(v168 + 128) = v219[0];
      *(_QWORD *)(v168 + 120) = v173;
      *(_OWORD *)(v168 + 136) = *(_OWORD *)((char *)v219 + 8);
      *((_QWORD *)&v219[0] + 1) = 0;
      *(_QWORD *)&v219[1] = 0;
      *(_BYTE *)(v168 + 152) = BYTE8(v219[1]);
      v174 = v168 + 160;
      v247 = (unint64_t *)(v168 + 160);
      v34 = a1;
      v175 = (unint64_t *)a1[396].i64[1];
      if (v175 != v94)
      {
        v176 = 0;
        do
        {
          v177 = v165 + v176 * 8;
          v178 = &v94[v176];
          *(_QWORD *)(v177 - 160) = v94[v176 - 20];
          *(_OWORD *)(v177 - 152) = *(_OWORD *)&v94[v176 - 19];
          v179 = *(_OWORD *)&v94[v176 - 17];
          *(_QWORD *)(v177 - 120) = v94[v176 - 15];
          *(_OWORD *)(v177 - 136) = v179;
          *(_OWORD *)(v177 - 112) = *(_OWORD *)&v94[v176 - 14];
          *(v178 - 14) = 0;
          *(v178 - 13) = 0;
          *(_QWORD *)(v177 - 96) = v94[v176 - 12];
          v180 = *(_OWORD *)&v94[v176 - 11];
          *(_QWORD *)(v177 - 72) = v94[v176 - 9];
          *(_OWORD *)(v177 - 88) = v180;
          v181 = *(_OWORD *)&v94[v176 - 8];
          *(_QWORD *)(v177 - 48) = v94[v176 - 6];
          *(_OWORD *)(v177 - 64) = v181;
          v182 = v94[v176 - 5];
          *(_BYTE *)(v177 - 32) = v94[v176 - 4];
          *(_QWORD *)(v177 - 40) = v182;
          *(_OWORD *)(v177 - 24) = *(_OWORD *)&v94[v176 - 3];
          *(v178 - 3) = 0;
          *(v178 - 2) = 0;
          *(_BYTE *)(v177 - 8) = v94[v176 - 1];
          v176 -= 20;
        }
        while (&v94[v176] != v175);
        v174 = (uint64_t)v247;
        v165 += v176 * 8;
      }
      *((_QWORD *)&v246 + 1) = v165;
      v183 = (unint64_t *)a1[397].i64[0];
      if (v183 != v94)
      {
        do
        {
          *(_QWORD *)v174 = *v94;
          *(_OWORD *)(v174 + 8) = *(_OWORD *)(v94 + 1);
          v184 = *(_OWORD *)(v94 + 3);
          *(_QWORD *)(v174 + 40) = v94[5];
          *(_OWORD *)(v174 + 24) = v184;
          *(_OWORD *)(v174 + 48) = *((_OWORD *)v94 + 3);
          v94[6] = 0;
          v94[7] = 0;
          *(_QWORD *)(v174 + 64) = v94[8];
          v185 = *(_OWORD *)(v94 + 9);
          *(_QWORD *)(v174 + 88) = v94[11];
          *(_OWORD *)(v174 + 72) = v185;
          v186 = *((_OWORD *)v94 + 6);
          *(_QWORD *)(v174 + 112) = v94[14];
          *(_OWORD *)(v174 + 96) = v186;
          v187 = v94[15];
          *(_BYTE *)(v174 + 128) = *((_BYTE *)v94 + 128);
          *(_QWORD *)(v174 + 120) = v187;
          *(_OWORD *)(v174 + 136) = *(_OWORD *)(v94 + 17);
          v94[17] = 0;
          v94[18] = 0;
          *(_BYTE *)(v174 + 152) = *((_BYTE *)v94 + 152);
          v174 += 160;
          v94 += 20;
        }
        while (v94 != v183);
        v165 = *((_QWORD *)&v246 + 1);
        v94 = (unint64_t *)a1[397].i64[0];
      }
      v188 = (unint64_t *)a1[396].i64[1];
      a1[396].i64[1] = v165;
      a1[397].i64[0] = v174;
      v189 = a1[397].i64[1];
      a1[397].i64[1] = (uint64_t)v248;
      v248 = (char *)v189;
      *(_QWORD *)&v246 = v188;
      *((_QWORD *)&v246 + 1) = v188;
      if (v94 == v188)
      {
        if (v94)
          goto LABEL_274;
        goto LABEL_275;
      }
      do
      {
        v247 = v94 - 20;
        v190 = (std::__shared_weak_count *)*(v94 - 2);
        if (!v190)
          goto LABEL_266;
        v191 = (unint64_t *)&v190->__shared_owners_;
        do
          v192 = __ldaxr(v191);
        while (__stlxr(v192 - 1, v191));
        if (!v192)
        {
          ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
          std::__shared_weak_count::__release_weak(v190);
          v193 = (std::__shared_weak_count *)*(v94 - 13);
          if (!v193)
            goto LABEL_261;
        }
        else
        {
LABEL_266:
          v193 = (std::__shared_weak_count *)*(v94 - 13);
          if (!v193)
            goto LABEL_261;
        }
        v194 = (unint64_t *)&v193->__shared_owners_;
        do
          v195 = __ldaxr(v194);
        while (__stlxr(v195 - 1, v194));
        if (!v195)
        {
          ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
          std::__shared_weak_count::__release_weak(v193);
        }
LABEL_261:
        v94 = v247;
      }
      while (v247 != v188);
      v94 = (unint64_t *)v246;
      if ((_QWORD)v246)
LABEL_274:
        operator delete(v94);
LABEL_275:
      v196 = *(std::__shared_weak_count **)&v219[1];
      if (*(_QWORD *)&v219[1])
      {
        v197 = (unint64_t *)(*(_QWORD *)&v219[1] + 8);
        do
          v198 = __ldaxr(v197);
        while (__stlxr(v198 - 1, v197));
        if (!v198)
        {
          ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
          std::__shared_weak_count::__release_weak(v196);
        }
      }
LABEL_280:
      v199 = (std::__shared_weak_count *)*((_QWORD *)&v215 + 1);
      if (*((_QWORD *)&v215 + 1))
      {
        v200 = (unint64_t *)(*((_QWORD *)&v215 + 1) + 8);
        do
          v201 = __ldaxr(v200);
        while (__stlxr(v201 - 1, v200));
        if (!v201)
        {
          ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
          std::__shared_weak_count::__release_weak(v199);
        }
      }
      v208->i8[2] = 0;
      v208->i8[0] = 0;
      v34[424] = vaddq_s64(v34[424], (int64x2_t)xmmword_2103B84D0);
      v202 = v244;
      if (!v244)
        goto LABEL_289;
      v203 = (unint64_t *)&v244->__shared_owners_;
      do
        v204 = __ldaxr(v203);
      while (__stlxr(v204 - 1, v203));
      if (!v204)
      {
        ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
        std::__shared_weak_count::__release_weak(v202);
        v130 = 0;
        v131 = v236;
        if (!v236)
          goto LABEL_189;
      }
      else
      {
LABEL_289:
        v130 = 0;
        v131 = v236;
        if (!v236)
          goto LABEL_189;
      }
LABEL_185:
      v132 = (unint64_t *)&v131->__shared_owners_;
      do
        v133 = __ldaxr(v132);
      while (__stlxr(v133 - 1, v132));
      if (!v133)
      {
        ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
        std::__shared_weak_count::__release_weak(v131);
      }
LABEL_189:
      v134 = v231;
      if (v231)
      {
        v135 = (unint64_t *)&v231->__shared_owners_;
        do
          v136 = __ldaxr(v135);
        while (__stlxr(v136 - 1, v135));
        if (!v136)
        {
          ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
          std::__shared_weak_count::__release_weak(v134);
          if ((v130 & 1) == 0)
            goto LABEL_197;
LABEL_194:
          v137 = 1;
          v138 = v224;
          if (v224)
            goto LABEL_198;
LABEL_201:
          v141 = v229;
          if (!v229)
            goto LABEL_207;
LABEL_202:
          v142 = (unint64_t *)&v141->__shared_owners_;
          do
            v143 = __ldaxr(v142);
          while (__stlxr(v143 - 1, v142));
          if (!v143)
          {
            ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
            std::__shared_weak_count::__release_weak(v141);
          }
          goto LABEL_207;
        }
      }
      if ((v130 & 1) != 0)
        goto LABEL_194;
LABEL_197:
      v137 = 0;
      v210[4] = 0;
      *(_DWORD *)v210 = 0;
      v138 = v224;
      if (!v224)
        goto LABEL_201;
LABEL_198:
      v139 = (unint64_t *)&v138->__shared_owners_;
      do
        v140 = __ldaxr(v139);
      while (__stlxr(v140 - 1, v139));
      if (v140)
        goto LABEL_201;
      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
      std::__shared_weak_count::__release_weak(v138);
      v141 = v229;
      if (v229)
        goto LABEL_202;
LABEL_207:
      v144 = v226;
      if (v226)
      {
        v145 = (unint64_t *)&v226->__shared_owners_;
        do
          v146 = __ldaxr(v145);
        while (__stlxr(v146 - 1, v145));
        if (!v146)
        {
          ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
          std::__shared_weak_count::__release_weak(v144);
          if (!v137)
            goto LABEL_134;
LABEL_212:
          if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 2009, (uint64_t)"result", 6, (uint64_t)"Failed to add the factor.", 25, (void (*)(void **))sub_21023DDB0))goto LABEL_134;
LABEL_101:
          abort();
        }
      }
      if (v137)
        goto LABEL_212;
LABEL_134:
      v80 += 4;
    }
    while (v80 != v81);
  }
}

void sub_20FBDC9F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  uint64_t v49;

  sub_20FBB483C(v49 - 240);
  sub_20F8AF4F8((uint64_t)&a49);
  sub_20F8AF5A4((uint64_t)&STACK[0x270]);
  sub_20E86665C((uint64_t)&STACK[0x260]);
  sub_20E86665C((uint64_t)&STACK[0x208]);
  sub_20EEF0364((uint64_t)&STACK[0x228]);
  sub_20E86665C((uint64_t)&STACK[0x218]);
  _Unwind_Resume(a1);
}

void sub_20FBDCA4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,char a49)
{
  sub_20E86665C((uint64_t)&STACK[0x270]);
  sub_20E86665C((uint64_t)&a47);
  sub_20F4ACD60((uint64_t)&a49);
  sub_20E86665C((uint64_t)&STACK[0x228]);
  _Unwind_Resume(a1);
}

void sub_20FBDCA78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20F4EE7B0((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20FBDCA8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20F4EE7B0((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20FBDCAA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20E86665C((uint64_t)&STACK[0x270]);
  sub_20E86665C((uint64_t)&a45);
  sub_20F4EE7B0((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20FBDCAC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20E86665C((uint64_t)&STACK[0x270]);
  sub_20E86665C((uint64_t)&a41);
  sub_20F4EE7B0((uint64_t)&a49);
  sub_20E86665C((uint64_t)&STACK[0x228]);
  _Unwind_Resume(a1);
}

void sub_20FBDCAF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20E86665C((uint64_t)&STACK[0x270]);
  sub_20E86665C((uint64_t)&a43);
  sub_20F4EE7B0((uint64_t)&a49);
  sub_20E86665C((uint64_t)&STACK[0x228]);
  _Unwind_Resume(a1);
}

void sub_20FBDCB1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_20E86665C((uint64_t)&STACK[0x270]);
  sub_20E86665C((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_20FBDCB38(_Unwind_Exception *a1)
{
  sub_20E86665C((uint64_t)&STACK[0x270]);
  sub_20E86665C((uint64_t)&STACK[0x228]);
  _Unwind_Resume(a1);
}

void sub_20FBDCB54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  sub_20E86665C((uint64_t)&STACK[0x270]);
  sub_20E86665C((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void sub_20FBDCB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  sub_20E86665C((uint64_t)&STACK[0x270]);
  sub_20E86665C((uint64_t)&a37);
  _Unwind_Resume(a1);
}

void sub_20FBDCB8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  sub_20E86665C((uint64_t)&STACK[0x270]);
  sub_20E86665C((uint64_t)&a39);
  _Unwind_Resume(a1);
}

uint64_t sub_20FBDCBA8(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  unsigned __int8 v11;
  unsigned int v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v18;
  int v19;
  int v20;
  uint64_t result;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v32;
  uint64_t v33;
  uint64_t i;
  unsigned __int8 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v40;
  int v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t v47;
  unsigned __int8 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v53;
  _QWORD *v54;
  _QWORD *v55;
  unint64_t v56;
  uint64_t v57;
  unsigned __int8 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v63;
  uint64_t v64;
  uint64_t j;
  unsigned __int8 v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v72;
  uint64_t v73;
  uint64_t k;
  unsigned __int8 v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v81;
  uint64_t v82;
  uint64_t m;
  unsigned __int8 v84;
  BOOL v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v90;
  uint64_t v91;
  uint64_t n;
  unsigned __int8 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  int v102;
  unint64_t v103;
  uint64_t v104;
  std::runtime_error *exception;
  std::string *v106;
  std::string::size_type size;
  void **v108;
  uint64_t v109;
  uint64_t *v110;
  const char *v111;
  const char *v112;
  unsigned __int8 v113;
  uint64_t v114;
  const char *v115;
  NSObject *v116;
  void **v117;
  void **v118;
  _QWORD v119[3];
  int v120;
  const char *v121;
  int v122;
  const char *v123;
  uint64_t v124;
  uint64_t v125;
  void *__p[2];
  char v127;
  std::string v128;
  uint64_t v129;
  _DWORD v130[4];
  _QWORD v131[33];
  const char *v132[2];
  std::string v133;
  char v134;
  _QWORD v135[4];
  _QWORD v136[3];

  v5 = (_QWORD *)(a1 + 5184);
  if (sub_20FA59E8C(a1 + 5184, 0))
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 2638, (uint64_t)"this->linear_system_.graph().template numberOfVariable<LandmarkVariableType>() == 0", 83, (uint64_t)"Number of landmarks should be zero.", 35, (void (*)(void **))sub_21023DDB0);
    v6 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68 || byte_254A6DE70)
    {
      v7 = qword_254A6DE40;
      v8 = qword_254A6DE48;
      while (v7 != v8)
      {
        v10 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v7;
        v9 = *(_QWORD *)(v7 + 8);
        v7 += 16;
        v10(v9, "this->linear_system_.graph().template numberOfVariable<LandmarkVariableType>() == 0", 83, "Number of landmarks should be zero.", 35);
      }
    }
    v11 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      goto LABEL_189;
    qword_254A6DE58(unk_254A6DE60, "this->linear_system_.graph().template numberOfVariable<LandmarkVariableType>() == 0", 83, "Number of landmarks should be zero.", 35);
  }
  if (*(_BYTE *)(a1 + 2117))
    v12 = a3 - 1;
  else
    v12 = 2;
  if (!sub_20FA558B8((uint64_t)v5, 0))
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 2646, (uint64_t)"this->linear_system_.graph().template numberOfVariable<PoseVariableType>() > 0", 78, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v13 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68 || byte_254A6DE70)
    {
      v14 = qword_254A6DE40;
      v15 = qword_254A6DE48;
      while (v14 != v15)
      {
        v17 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v14;
        v16 = *(_QWORD *)(v14 + 8);
        v14 += 16;
        v17(v16, "this->linear_system_.graph().template numberOfVariable<PoseVariableType>() > 0", 78, "", 0);
      }
    }
    v18 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      goto LABEL_189;
    qword_254A6DE58(unk_254A6DE60, "this->linear_system_.graph().template numberOfVariable<PoseVariableType>() > 0", 78, "", 0);
  }
  if (sub_20FA558B8((uint64_t)v5, 0) > v12)
  {
    sub_20E863438((uint64_t)v130);
    sub_20E86A980(v131, (uint64_t)"Assertion 'numberOfVariable<PoseVariableType>() <= ", 51);
    v99 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v99, (uint64_t)"' failed: call site #", 21);
    v100 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v100, (uint64_t)", original states: ", 19);
    v101 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v101, (uint64_t)", current states: ", 18);
    sub_20FA558B8((uint64_t)v5, 0);
    std::ostream::operator<<();
    sub_20F9B2A4C(&v129);
    if (**(int **)(v129 + 56) <= 5)
    {
      v102 = *(unsigned __int8 *)(v129 + 72);
      v103 = sub_20E8C31DC(v129, "OSLogSurrogateAppender", 1, 0);
      v104 = v103 ? v103 + 16 : 0;
      if (v102 || v103)
      {
        sub_20E863438((uint64_t)&v128);
        sub_20E923E88(v130, &v133);
        if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v106 = &v133;
        else
          v106 = (std::string *)v133.__r_.__value_.__r.__words[0];
        if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v133.__r_.__value_.__r.__words[2]);
        else
          size = v133.__r_.__value_.__l.__size_;
        sub_20E86A980(&v128.__r_.__value_.__r.__words[2], (uint64_t)v106, size);
        if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v133.__r_.__value_.__l.__data_);
        sub_20E923E88(&v128, __p);
        v119[0] = &v129;
        v119[1] = std::chrono::steady_clock::now().__d_.__rep_;
        v119[2] = std::chrono::system_clock::now().__d_.__rep_;
        v120 = 5;
        v121 = "unknown file";
        v122 = 2654;
        v124 = 0;
        v125 = 0;
        v123 = "unknown function";
        if (v127 >= 0)
          v108 = __p;
        else
          v108 = (void **)__p[0];
        v118 = v108;
        v109 = *(_QWORD *)v119[0];
        v110 = (uint64_t *)(*(_QWORD *)v119[0] + 16);
        if (*(char *)(*(_QWORD *)v119[0] + 39) < 0)
        {
          v112 = *(const char **)(v109 + 16);
          v111 = *(const char **)(v109 + 24);
        }
        else
        {
          v111 = (const char *)*(unsigned __int8 *)(*(_QWORD *)v119[0] + 39);
          v112 = (const char *)(*(_QWORD *)v119[0] + 16);
        }
        v132[0] = v112;
        v132[1] = v111;
        v113 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v113 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)&v133);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v133);
          if (v134 && SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v133.__r_.__value_.__l.__data_);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        v114 = byte_254A4A4F8[23];
        if (byte_254A4A4F8[23] >= 0)
        {
          v115 = byte_254A4A4F8;
        }
        else
        {
          v114 = *(_QWORD *)&byte_254A4A4F8[8];
          v115 = *(const char **)byte_254A4A4F8;
        }
        v136[0] = v115;
        v136[1] = v114;
        v133.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v115, v132[0]);
        sub_20E86E5A8(&v133.__r_.__value_.__l.__size_, (uint64_t)v136);
        sub_20E86E5A8(v135, (uint64_t)v132);
        v116 = v133.__r_.__value_.__r.__words[0];
        sub_20E86E44C((uint64_t)&v133);
        sub_20FBF5730(v104, v110, v116, OS_LOG_TYPE_ERROR, (const char **)&v118);
        if (v102)
        {
          v117 = __p;
          if (v127 < 0)
            v117 = (void **)__p[0];
          sub_20E8C003C((uint64_t)v119, "%s", (const char *)v117);
          sub_20E863570((uint64_t)v119);
        }
        sub_20E863714((uint64_t)v119);
        if (v127 < 0)
          operator delete(__p[0]);
        sub_20E863784((uint64_t)&v128);
      }
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E923E88(v130, &v133);
    sub_20E8B0848("Too many states in the system: ", &v133, &v128);
    std::runtime_error::runtime_error(exception, &v128);
    exception->__vftable = (std::runtime_error_vtbl *)&off_24CA04F20;
    __cxa_throw(exception, (struct type_info *)&unk_24CA04F38, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v19 = *(unsigned __int8 *)(a1 + 2146);
  v20 = sub_20FA56584((uint64_t)v5, 0);
  result = sub_20FA558B8((uint64_t)v5, 0);
  if (v19)
  {
    if (v20 == (_DWORD)result)
      goto LABEL_40;
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 2661, (uint64_t)"this->linear_system_.graph().template numberOfVariable<VelAndBiasVariableType>() == this->linear_system_.graph().template numberOfVariable<PoseVariableType>()", 158, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v22 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v22 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68 || byte_254A6DE70)
    {
      v23 = qword_254A6DE40;
      v24 = qword_254A6DE48;
      while (v23 != v24)
      {
        v26 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v23;
        v25 = *(_QWORD *)(v23 + 8);
        v23 += 16;
        v26(v25, "this->linear_system_.graph().template numberOfVariable<VelAndBiasVariableType>() == this->linear_system_.graph().template numberOfVariable<PoseVariableType>()", 158, "", 0);
      }
    }
  }
  else
  {
    if (v20 == (_DWORD)result)
      goto LABEL_40;
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 2665, (uint64_t)"this->linear_system_.graph().template numberOfVariable<VelAndBiasVariableType>() == this->linear_system_.graph().template numberOfVariable<PoseVariableType>()", 158, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v27 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v27 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68 || byte_254A6DE70)
    {
      v28 = qword_254A6DE40;
      v29 = qword_254A6DE48;
      while (v28 != v29)
      {
        v31 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v28;
        v30 = *(_QWORD *)(v28 + 8);
        v28 += 16;
        v31(v30, "this->linear_system_.graph().template numberOfVariable<VelAndBiasVariableType>() == this->linear_system_.graph().template numberOfVariable<PoseVariableType>()", 158, "", 0);
      }
    }
  }
  v32 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
  if ((v32 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
  {
    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DE78);
  }
  if (!byte_254A6DE68)
    goto LABEL_189;
  result = qword_254A6DE58(unk_254A6DE60, "this->linear_system_.graph().template numberOfVariable<VelAndBiasVariableType>() == this->linear_system_.graph().template numberOfVariable<PoseVariableType>()", 158, "", 0);
LABEL_40:
  v33 = *(_QWORD *)(a1 + 6368);
  for (i = *(_QWORD *)(a1 + 6376); v33 != i; v33 += 9616)
  {
    if (*(_BYTE *)(v33 + 7689) && *(_QWORD *)(v33 + 24))
    {
      sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 2675, (uint64_t)"!iter->second.factor.is_valid_factor()", 38, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
      v35 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
      if ((v35 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
      {
        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DE78);
      }
      if (!byte_254A6DE68 || byte_254A6DE70)
      {
        v36 = qword_254A6DE40;
        v37 = qword_254A6DE48;
        while (v36 != v37)
        {
          v39 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v36;
          v38 = *(_QWORD *)(v36 + 8);
          v36 += 16;
          v39(v38, "!iter->second.factor.is_valid_factor()", 38, "", 0);
        }
      }
      v40 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
      if ((v40 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
      {
        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DE78);
      }
      if (!byte_254A6DE68)
        goto LABEL_189;
      result = qword_254A6DE58(unk_254A6DE60, "!iter->second.factor.is_valid_factor()", 38, "", 0);
      i = *(_QWORD *)(a1 + 6376);
    }
  }
  v41 = *(unsigned __int8 *)(a1 + 6800);
  if (*(_BYTE *)(a1 + 6800))
  {
    v42 = (_QWORD *)(a1 + 6632);
    v43 = v5;
LABEL_78:
    v46 = 0x84BDA12F684BDA13 * ((uint64_t)(*(_QWORD *)(a1 + 6640) - *v42) >> 3);
    goto LABEL_79;
  }
  v43 = v5;
  result = sub_20F9210FC(v5);
  if (!(_DWORD)result)
  {
    v42 = (_QWORD *)(a1 + 6632);
    goto LABEL_78;
  }
  v44 = *(_QWORD **)(a1 + 6632);
  v45 = *(_QWORD **)(a1 + 6640);
  if (v44 == v45)
    goto LABEL_89;
  v46 = 0;
  v47 = 0;
  do
  {
    if ((*(_BYTE *)(v44[7] + 4) & 6) == 0
      && (*(_BYTE *)(v44[8] + 4) & 6) == 0
      && (*(_BYTE *)(v44[9] + 4) & 6) == 0
      && (*(_BYTE *)(v44[10] + 4) & 6) == 0
      && (*(_BYTE *)(v44[11] + 4) & 6) == 0
      && (*(_BYTE *)(v44[12] + 4) & 6) == 0
      && (*(_BYTE *)(v44[13] + 4) & 6) == 0
      && (*(_BYTE *)(v44[14] + 4) & 6) == 0
      && (*(_BYTE *)(v44[15] + 4) & 6) == 0
      && (*(_BYTE *)(v44[16] + 4) & 6) == 0
      && (*(_BYTE *)(v44[17] + 4) & 6) == 0)
    {
      v46 = ++v47;
    }
    v44 += 27;
  }
  while (v44 != v45);
LABEL_79:
  if (v46)
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 2678, (uint64_t)"this->linear_system_.graph().template numberOfFactor<LandmarkFactorType>() == 0", 79, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v48 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v48 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68 || byte_254A6DE70)
    {
      v49 = qword_254A6DE40;
      v50 = qword_254A6DE48;
      while (v49 != v50)
      {
        v52 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v49;
        v51 = *(_QWORD *)(v49 + 8);
        v49 += 16;
        v52(v51, "this->linear_system_.graph().template numberOfFactor<LandmarkFactorType>() == 0", 79, "", 0);
      }
    }
    v53 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v53 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      goto LABEL_189;
    result = qword_254A6DE58(unk_254A6DE60, "this->linear_system_.graph().template numberOfFactor<LandmarkFactorType>() == 0", 79, "", 0);
    v41 = *(unsigned __int8 *)(a1 + 6800);
  }
  if (v41)
    goto LABEL_102;
LABEL_89:
  result = sub_20F9210FC(v43);
  if (!(_DWORD)result)
  {
LABEL_102:
    v56 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(_QWORD *)(a1 + 6712) - *(_QWORD *)(a1 + 6704)) >> 3);
    goto LABEL_103;
  }
  v54 = *(_QWORD **)(a1 + 6704);
  v55 = *(_QWORD **)(a1 + 6712);
  if (v54 == v55)
    goto LABEL_112;
  v56 = 0;
  v57 = 0;
  do
  {
    if ((*(_BYTE *)(v54[7] + 4) & 6) == 0
      && (*(_BYTE *)(v54[8] + 4) & 6) == 0
      && (*(_BYTE *)(v54[9] + 4) & 6) == 0
      && (*(_BYTE *)(v54[10] + 4) & 6) == 0
      && (*(_BYTE *)(v54[11] + 4) & 6) == 0
      && (*(_BYTE *)(v54[12] + 4) & 6) == 0
      && (*(_BYTE *)(v54[13] + 4) & 6) == 0)
    {
      v56 = ++v57;
    }
    v54 += 23;
  }
  while (v54 != v55);
LABEL_103:
  if (!v56)
    goto LABEL_112;
  sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 2681, (uint64_t)"!this->linear_system_.graph() .template numberOfFactor<typename Traits::LandmarkFactorMono>()", 93, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
  v58 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
  if ((v58 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
  {
    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DE78);
  }
  if (!byte_254A6DE68 || byte_254A6DE70)
  {
    v59 = qword_254A6DE40;
    v60 = qword_254A6DE48;
    while (v59 != v60)
    {
      v62 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v59;
      v61 = *(_QWORD *)(v59 + 8);
      v59 += 16;
      v62(v61, "!this->linear_system_.graph() .template numberOfFactor<typename Traits::LandmarkFactorMono>()", 93, "", 0);
    }
  }
  v63 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
  if ((v63 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
  {
    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DE78);
  }
  if (!byte_254A6DE68)
LABEL_189:
    abort();
  result = qword_254A6DE58(unk_254A6DE60, "!this->linear_system_.graph() .template numberOfFactor<typename Traits::LandmarkFactorMono>()", 93, "", 0);
LABEL_112:
  v64 = *(_QWORD *)(a1 + 6416);
  for (j = *(_QWORD *)(a1 + 6424); v64 != j; v64 += 144)
  {
    if (*(_BYTE *)(v64 + 40))
    {
      sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 2689, (uint64_t)"!iter->second.factor.is_valid_factor()", 38, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
      v66 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
      if ((v66 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
      {
        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DE78);
      }
      if (byte_254A6DE68)
        v67 = byte_254A6DE70 == 0;
      else
        v67 = 0;
      if (!v67)
      {
        v68 = qword_254A6DE40;
        v69 = qword_254A6DE48;
        while (v68 != v69)
        {
          v71 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v68;
          v70 = *(_QWORD *)(v68 + 8);
          v68 += 16;
          v71(v70, "!iter->second.factor.is_valid_factor()", 38, "", 0);
        }
      }
      v72 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
      if ((v72 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
      {
        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DE78);
      }
      if (!byte_254A6DE68)
        goto LABEL_189;
      result = qword_254A6DE58(unk_254A6DE60, "!iter->second.factor.is_valid_factor()", 38, "", 0);
      j = *(_QWORD *)(a1 + 6424);
    }
  }
  v73 = *(_QWORD *)(a1 + 6440);
  for (k = *(_QWORD *)(a1 + 6448); v73 != k; v73 += 152)
  {
    if (*(_BYTE *)(v73 + 40))
    {
      sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 2697, (uint64_t)"!iter->second.factor.is_valid_factor()", 38, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
      v75 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
      if ((v75 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
      {
        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DE78);
      }
      if (byte_254A6DE68)
        v76 = byte_254A6DE70 == 0;
      else
        v76 = 0;
      if (!v76)
      {
        v77 = qword_254A6DE40;
        v78 = qword_254A6DE48;
        while (v77 != v78)
        {
          v80 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v77;
          v79 = *(_QWORD *)(v77 + 8);
          v77 += 16;
          v80(v79, "!iter->second.factor.is_valid_factor()", 38, "", 0);
        }
      }
      v81 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
      if ((v81 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
      {
        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DE78);
      }
      if (!byte_254A6DE68)
        goto LABEL_189;
      result = qword_254A6DE58(unk_254A6DE60, "!iter->second.factor.is_valid_factor()", 38, "", 0);
      k = *(_QWORD *)(a1 + 6448);
    }
  }
  v82 = *(_QWORD *)(a1 + 6488);
  for (m = *(_QWORD *)(a1 + 6496); v82 != m; v82 += 360)
  {
    if (*(_BYTE *)(v82 + 200))
    {
      sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 2703, (uint64_t)"!iter->second.factor.is_valid_factor()", 38, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
      v84 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
      if ((v84 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
      {
        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DE78);
      }
      if (byte_254A6DE68)
        v85 = byte_254A6DE70 == 0;
      else
        v85 = 0;
      if (!v85)
      {
        v86 = qword_254A6DE40;
        v87 = qword_254A6DE48;
        while (v86 != v87)
        {
          v89 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v86;
          v88 = *(_QWORD *)(v86 + 8);
          v86 += 16;
          v89(v88, "!iter->second.factor.is_valid_factor()", 38, "", 0);
        }
      }
      v90 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
      if ((v90 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
      {
        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DE78);
      }
      if (!byte_254A6DE68)
        goto LABEL_189;
      result = qword_254A6DE58(unk_254A6DE60, "!iter->second.factor.is_valid_factor()", 38, "", 0);
      m = *(_QWORD *)(a1 + 6496);
    }
  }
  v91 = *(_QWORD *)(a1 + 6464);
  for (n = *(_QWORD *)(a1 + 6472); v91 != n; v91 += 304)
  {
    if (*(_BYTE *)(v91 + 177) && !*(_BYTE *)(v91 + 296))
    {
      sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 2708, (uint64_t)"!iter->second.factor.is_valid_factor() || iter->second.shouldRemove()", 69, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
      v93 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
      if ((v93 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
      {
        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DE78);
      }
      if (!byte_254A6DE68 || byte_254A6DE70)
      {
        v94 = qword_254A6DE40;
        v95 = qword_254A6DE48;
        while (v94 != v95)
        {
          v97 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v94;
          v96 = *(_QWORD *)(v94 + 8);
          v94 += 16;
          v97(v96, "!iter->second.factor.is_valid_factor() || iter->second.shouldRemove()", 69, "", 0);
        }
      }
      v98 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
      if ((v98 & 1) == 0)
      {
        if (__cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
      }
      if (!byte_254A6DE68)
        goto LABEL_189;
      result = qword_254A6DE58(unk_254A6DE60, "!iter->second.factor.is_valid_factor() || iter->second.shouldRemove()", 69, "", 0);
      n = *(_QWORD *)(a1 + 6472);
    }
  }
  return result;
}

void sub_20FBDE044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  uint64_t v63;

  if (*(_BYTE *)(v63 - 152) && *(char *)(v63 - 153) < 0)
    operator delete(*(void **)(v63 - 176));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a12);
  if (a26 < 0)
  {
    operator delete(__p);
    sub_20E863784((uint64_t)&a27);
    sub_20E863784((uint64_t)&a63);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&a27);
  sub_20E863784((uint64_t)&a63);
  _Unwind_Resume(a1);
}

void sub_20FBDE11C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  sub_20E863784((uint64_t)&a60);
  _Unwind_Resume(a1);
}

void sub_20FBDE130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  void *v63;
  int v64;
  uint64_t v65;

  if (a29 < 0)
    operator delete(__p);
  if (*(char *)(v65 - 153) < 0)
  {
    operator delete(*(void **)(v65 - 176));
    if ((v64 & 1) == 0)
    {
LABEL_8:
      sub_20E863784((uint64_t)&a63);
      _Unwind_Resume(a1);
    }
  }
  else if (!v64)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v63);
  sub_20E863784((uint64_t)&a63);
  _Unwind_Resume(a1);
}

unint64_t sub_20FBDE1E8(uint64_t a1, uint64_t a2, char *__src, int a4, int a5, uint64_t a6)
{
  _QWORD *v9;
  _QWORD *v10;
  char *v11;
  size_t v12;
  int *v13;
  int *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  _DWORD *v26;
  int64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  _OWORD *v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  int v36;
  int *v37;
  int *v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _BYTE *v49;
  _DWORD *v50;
  int64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  _OWORD *v56;
  char *v57;
  uint64_t v58;
  __int128 v59;
  int v60;
  int v61;
  std::string::size_type size;
  std::string::size_type v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  size_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  unint64_t v74;
  unint64_t v75;
  int v76;
  unint64_t v77;
  unint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  std::string *v81;
  std::string::size_type v82;
  _QWORD *v83;
  _QWORD *v84;
  std::string *v85;
  std::string::size_type v86;
  _QWORD *v87;
  _QWORD *v88;
  std::string *v89;
  std::string::size_type v90;
  _QWORD *v91;
  _QWORD *v92;
  std::string *p_p;
  std::string::size_type v94;
  char v95;
  size_t v96;
  __int128 *v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  size_t v102;
  __int128 *p_dst;
  unint64_t v104;
  const void *v105;
  uint64_t v106;
  uint64_t v107;
  const char *v108;
  uint64_t v109;
  size_t v110;
  const char *v111;
  unsigned __int8 v112;
  unsigned __int8 v113;
  const char *v114;
  size_t v115;
  std::string::size_type *p_size;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  NSObject *v122;
  size_t v123;
  void *v124;
  _QWORD *v125;
  size_t v126;
  std::string::size_type v127;
  std::string *v128;
  void *v129;
  unint64_t v130;
  const void **v131;
  uint64_t v132;
  uint64_t v133;
  std::string::size_type v134;
  char v135;
  _QWORD *v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  char *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  unint64_t v147;
  const void *v148;
  uint64_t v149;
  uint64_t v150;
  const char *v151;
  uint64_t v152;
  size_t v153;
  const char *v154;
  unsigned __int8 v155;
  const char *v156;
  size_t v157;
  std::string::size_type *v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  NSObject *v164;
  size_t v165;
  void *v166;
  _QWORD *v167;
  size_t v168;
  std::string::size_type v169;
  std::string *v170;
  void *v171;
  int v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  std::string::size_type v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  std::string::size_type v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  std::string::size_type v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  const char *v202;
  std::__shared_weak_count *v203;
  unint64_t *p_shared_owners;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  std::string::size_type v209;
  char v210;
  _QWORD *v211;
  uint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  char *v216;
  unint64_t *v217;
  unint64_t v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  unint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  std::string::size_type v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  std::string::size_type v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  std::string::size_type v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  unint64_t v248;
  std::__shared_weak_count *v249;
  unint64_t *v250;
  unint64_t v251;
  const char *v252;
  std::__shared_weak_count *v253;
  unint64_t *v254;
  unint64_t v255;
  uint64_t v256;
  unint64_t result;
  int v258;
  uint64_t v259;
  _QWORD *v260;
  std::string::size_type v261;
  std::string *v262;
  unint64_t v263;
  const void *v264;
  uint64_t v265;
  uint64_t v266;
  std::string *v267;
  uint64_t v268;
  const char *v269;
  size_t v270;
  unsigned __int8 v271;
  unsigned __int8 v272;
  const char *v273;
  size_t v274;
  std::string::size_type *v275;
  uint64_t v276;
  uint64_t v277;
  void *v278;
  NSObject *v279;
  uint64_t v280;
  uint64_t v281;
  size_t v282;
  void *v283;
  _QWORD *v284;
  size_t v285;
  std::string::size_type v286;
  std::string *v287;
  void *v288;
  uint64_t v289;
  uint64_t v290;
  std::string::size_type v291;
  char v292;
  _QWORD *v293;
  uint64_t v294;
  std::__shared_weak_count *v295;
  unint64_t *v296;
  unint64_t v297;
  void *v298;
  unint64_t *v299;
  unint64_t v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  unint64_t v304;
  std::__shared_weak_count *v305;
  unint64_t *v306;
  unint64_t v307;
  std::string::size_type v308;
  char *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  const char *v313;
  std::string::size_type v314;
  std::__shared_weak_count *v315;
  unint64_t *v316;
  unint64_t v317;
  std::__shared_weak_count *v318;
  unint64_t *v319;
  unint64_t v320;
  std::string::size_type v321;
  std::__shared_weak_count *v322;
  unint64_t *v323;
  unint64_t v324;
  std::__shared_weak_count *v325;
  unint64_t *v326;
  unint64_t v327;
  std::__shared_weak_count *v328;
  unint64_t *v329;
  unint64_t v330;
  std::__shared_weak_count *v331;
  unint64_t *v332;
  unint64_t v333;
  std::string *v334;
  std::__shared_weak_count *v335;
  unint64_t *v336;
  unint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  int v343;
  int v344;
  uint64_t v346;
  int **v348;
  uint64_t v349;
  uint64_t v350;
  void **v351;
  int v352;
  int v353;
  uint64_t v354;
  void **v355;
  int v356;
  int v357;
  unint64_t v358;
  const char *v359;
  std::string v360;
  char *v361;
  const char *v362;
  int v363;
  const char *v364;
  uint64_t v365;
  std::__shared_weak_count *v366;
  _QWORD v367[2];
  uint64_t v368;
  uint64_t v369;
  const void *v370;
  unint64_t v371;
  const void *v372;
  unint64_t v373;
  void *v374;
  char v375;
  unint64_t v376;
  int v377;
  _BYTE v378[152];
  uint64_t v379;
  std::string v380;
  char *v381;
  std::__shared_weak_count *v382;
  std::string __p;
  __int128 __dst;
  int64_t v385;
  std::string object;
  __int128 v387;
  void *v388;
  size_t v389;
  unint64_t v390;
  char v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  int v400;
  int v401;
  int v402;
  int v403;
  uint64_t v404;
  uint64_t v405;
  std::string v406;
  __int128 v407;
  char *v408;
  const char *v409;
  unint64_t v410;
  std::__shared_weak_count *v411;
  uint64_t v412[5];

  v412[2] = *MEMORY[0x24BDAC8D0];
  v9 = (_QWORD *)(a1 + 47112);
  *(_QWORD *)(a1 + 47120) = *(_QWORD *)(a1 + 47112);
  v10 = (_QWORD *)(a1 + 47136);
  *(_QWORD *)(a1 + 47144) = *(_QWORD *)(a1 + 47136);
  v355 = (void **)(a1 + 47160);
  *(_QWORD *)(a1 + 47168) = *(_QWORD *)(a1 + 47160);
  *(_QWORD *)(a1 + 47192) = *(_QWORD *)(a1 + 47184);
  *(_QWORD *)(a1 + 47216) = *(_QWORD *)(a1 + 47208);
  *(_QWORD *)(a1 + 47240) = *(_QWORD *)(a1 + 47232);
  *(_QWORD *)(a1 + 47264) = *(_QWORD *)(a1 + 47256);
  v351 = (void **)(a1 + 47280);
  *(_QWORD *)(a1 + 47288) = *(_QWORD *)(a1 + 47280);
  *(_QWORD *)(a1 + 47312) = *(_QWORD *)(a1 + 47304);
  v11 = &__src[4 * a2];
  *(_QWORD *)(a1 + 47336) = *(_QWORD *)(a1 + 47328);
  v12 = (4 * a2) >> 2;
  sub_20E867E00((_QWORD *)(a1 + 47112), __src, v11, v12);
  v348 = (int **)a1;
  if (*(_BYTE *)(a1 + 2146))
    sub_20E867E00(v10, __src, v11, v12);
  if (a4)
  {
    v13 = *(int **)(a1 + 5384);
    v14 = *(int **)(a1 + 5392);
    while (1)
    {
      if (v13 == v14)
        goto LABEL_30;
      if (*(_BYTE *)(*((_QWORD *)v13 + 1) + 20))
        break;
LABEL_7:
      v13 += 4;
    }
    v16 = *v13;
    v18 = (char *)v9[7];
    v17 = v9[8];
    if ((unint64_t)v18 < v17)
    {
      *(_DWORD *)v18 = v16;
      v15 = (uint64_t)(v18 + 4);
LABEL_6:
      v9[7] = v15;
      goto LABEL_7;
    }
    v19 = (char *)*v355;
    v20 = v18 - (_BYTE *)*v355;
    v21 = v20 >> 2;
    v22 = (v20 >> 2) + 1;
    if (v22 >> 62)
      sub_20E867F44();
    v23 = v17 - (_QWORD)v19;
    if (v23 >> 1 > v22)
      v22 = v23 >> 1;
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
      v24 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v24 = v22;
    if (v24)
    {
      if (v24 >> 62)
LABEL_512:
        sub_20E877A38();
      v25 = operator new(4 * v24);
      v26 = &v25[4 * v21];
      *v26 = v16;
      v15 = (uint64_t)(v26 + 1);
      v27 = v18 - v19;
      if (v18 == v19)
        goto LABEL_28;
    }
    else
    {
      v25 = 0;
      v26 = (_DWORD *)(4 * v21);
      *(_DWORD *)(4 * v21) = v16;
      v15 = 4 * v21 + 4;
      v27 = v18 - v19;
      if (v18 == v19)
      {
LABEL_28:
        v9[6] = v26;
        v9[7] = v15;
        v9[8] = &v25[4 * v24];
        if (v19)
          operator delete(v19);
        goto LABEL_6;
      }
    }
    v28 = v27 - 4;
    if (v28 < 0x2C)
      goto LABEL_542;
    if ((unint64_t)(v18 - v25 - v20) < 0x20)
      goto LABEL_542;
    v29 = (v28 >> 2) + 1;
    v30 = 4 * (v29 & 0x7FFFFFFFFFFFFFF8);
    v31 = &v18[-v30];
    v26 = (_DWORD *)((char *)v26 - v30);
    v32 = &v25[4 * v21 - 16];
    v33 = v18 - 16;
    v34 = v29 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v35 = *(_OWORD *)v33;
      *(v32 - 1) = *((_OWORD *)v33 - 1);
      *v32 = v35;
      v32 -= 2;
      v33 -= 32;
      v34 -= 8;
    }
    while (v34);
    v18 = v31;
    if (v29 != (v29 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_542:
      do
      {
        v36 = *((_DWORD *)v18 - 1);
        v18 -= 4;
        *--v26 = v36;
      }
      while (v18 != v19);
    }
    goto LABEL_28;
  }
LABEL_30:
  if (a5)
  {
    v37 = v348[733];
    v38 = v348[734];
    while (1)
    {
      if (v37 == v38)
        goto LABEL_57;
      if (*(_BYTE *)(*((_QWORD *)v37 + 1) + 20))
        break;
LABEL_34:
      v37 += 4;
    }
    v40 = *v37;
    v42 = (char *)v9[22];
    v41 = v9[23];
    if ((unint64_t)v42 < v41)
    {
      *(_DWORD *)v42 = v40;
      v39 = (uint64_t)(v42 + 4);
LABEL_33:
      v9[22] = v39;
      goto LABEL_34;
    }
    v43 = (char *)*v351;
    v44 = v42 - (_BYTE *)*v351;
    v45 = v44 >> 2;
    v46 = (v44 >> 2) + 1;
    if (v46 >> 62)
      sub_20E867F44();
    v47 = v41 - (_QWORD)v43;
    if (v47 >> 1 > v46)
      v46 = v47 >> 1;
    if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL)
      v48 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v48 = v46;
    if (v48)
    {
      if (v48 >> 62)
        goto LABEL_512;
      v49 = operator new(4 * v48);
      v50 = &v49[4 * v45];
      *v50 = v40;
      v39 = (uint64_t)(v50 + 1);
      v51 = v42 - v43;
      if (v42 == v43)
        goto LABEL_55;
    }
    else
    {
      v49 = 0;
      v50 = (_DWORD *)(4 * v45);
      *(_DWORD *)(4 * v45) = v40;
      v39 = 4 * v45 + 4;
      v51 = v42 - v43;
      if (v42 == v43)
      {
LABEL_55:
        v9[21] = v50;
        v9[22] = v39;
        v9[23] = &v49[4 * v48];
        if (v43)
          operator delete(v43);
        goto LABEL_33;
      }
    }
    v52 = v51 - 4;
    if (v52 < 0x2C)
      goto LABEL_543;
    if ((unint64_t)(v42 - v49 - v44) < 0x20)
      goto LABEL_543;
    v53 = (v52 >> 2) + 1;
    v54 = 4 * (v53 & 0x7FFFFFFFFFFFFFF8);
    v55 = &v42[-v54];
    v50 = (_DWORD *)((char *)v50 - v54);
    v56 = &v49[4 * v45 - 16];
    v57 = v42 - 16;
    v58 = v53 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v59 = *(_OWORD *)v57;
      *(v56 - 1) = *((_OWORD *)v57 - 1);
      *v56 = v59;
      v56 -= 2;
      v57 -= 32;
      v58 -= 8;
    }
    while (v58);
    v42 = v55;
    if (v53 != (v53 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_543:
      do
      {
        v60 = *((_DWORD *)v42 - 1);
        v42 -= 4;
        *--v50 = v60;
      }
      while (v42 != v43);
    }
    goto LABEL_55;
  }
LABEL_57:
  sub_20F8F2BC0((uint64_t)v9, (uint64_t)(v348 + 5070), (uint64_t)dword_2103B9910, (uint64_t)(v348 + 5919));
  sub_20FA49CF0((uint64_t)(v348 + 3170), (void **)a6, (uint64_t)(v348 + 5919), v348 + 5919);
  sub_20F20B6B0(a6);
  v61 = *(_DWORD *)(a6 + 16);
  if (v61 != 12 && v61 != 30)
  {
    sub_20FA43BF4(&object, (uint64_t)v9, (uint64_t)(v348 + 5070));
    size = object.__r_.__value_.__l.__size_;
    v63 = object.__r_.__value_.__r.__words[0];
    v64 = *((_QWORD *)&v387 + 1);
    v65 = v387;
    v66 = v390;
    v67 = v389;
    v68 = v393;
    v69 = v392;
    v70 = v394;
    v71 = v396;
    v346 = v399;
    v339 = v395;
    v340 = v398;
    v356 = v401;
    v344 = v400;
    v352 = v403;
    v343 = v402;
    v349 = v405;
    v341 = v397;
    v342 = v404;
    sub_20F9B2A4C(&v379);
    v72 = 9 * ((unint64_t)(v64 - v65) >> 2)
        + 6 * (((v66 - v67) >> 2) + ((size - v63) >> 2) + ((unint64_t)(v68 - v69) >> 2))
        + ((unint64_t)(v341 - v71) >> 2)
        + ((v356 - v344) & 0xFFFFFFFC)
        + ((v352 - v343) & 0xFFFFFFFC)
        + 3
        * (((unint64_t)(v346 - v340) >> 2)
         + ((unint64_t)(v339 - v70) >> 2)
         + ((unint64_t)(v349 - v342) >> 2));
    if (**(int **)(v379 + 56) > 2
      || (v73 = *(unsigned __int8 *)(v379 + 72),
          v74 = sub_20E8C31DC(v379, "OSLogSurrogateAppender", 1, 0),
          v75 = v74,
          !v73)
      && !v74)
    {
      if (!v72)
        goto LABEL_371;
      goto LABEL_63;
    }
    sub_20E863438((uint64_t)v367);
    v98 = sub_20E86A980(&v368, (uint64_t)"ExtractConditionalPriorFromLinearSystem:", 40);
    sub_20E86A980(v98, (uint64_t)"\n    states requested: ", 23);
    v99 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v99, (uint64_t)"\n    total dof requested: ", 26);
    v100 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v100, (uint64_t)"\n    total dof in prior: ", 25);
    v101 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v101, (uint64_t)"\n    missing variables dof: ", 28);
    std::ostream::operator<<();
    if ((v377 & 0x10) != 0)
    {
      v104 = v376;
      if (v376 < v373)
      {
        v376 = v373;
        v104 = v373;
      }
      v105 = v372;
      v102 = v104 - (_QWORD)v372;
      if (v104 - (unint64_t)v372 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_155;
    }
    else
    {
      if ((v377 & 8) == 0)
      {
        v102 = 0;
        HIBYTE(v385) = 0;
        p_dst = &__dst;
        goto LABEL_110;
      }
      v105 = v370;
      v102 = v371 - (_QWORD)v370;
      if (v371 - (unint64_t)v370 > 0x7FFFFFFFFFFFFFF7)
LABEL_155:
        sub_20E860B7C();
    }
    if (v102 >= 0x17)
    {
      v106 = (v102 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v102 | 7) != 0x17)
        v106 = v102 | 7;
      v107 = v106 + 1;
      p_dst = (__int128 *)operator new(v106 + 1);
      v385 = v107 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
      *((_QWORD *)&__dst + 1) = v102;
    }
    else
    {
      HIBYTE(v385) = v102;
      p_dst = &__dst;
      if (!v102)
      {
LABEL_110:
        *((_BYTE *)p_dst + v102) = 0;
        v360.__r_.__value_.__r.__words[0] = (std::string::size_type)&v379;
        v360.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
        v360.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
        LODWORD(v361) = 2;
        v362 = "unknown file";
        v363 = 2907;
        v365 = 0;
        v366 = 0;
        v364 = "unknown function";
        if (v385 >= 0)
          v108 = (const char *)&__dst;
        else
          v108 = (const char *)__dst;
        v109 = *(_QWORD *)v360.__r_.__value_.__l.__data_;
        if (*(char *)(*(_QWORD *)v360.__r_.__value_.__l.__data_ + 39) < 0)
        {
          v111 = *(const char **)(v109 + 16);
          v110 = *(_QWORD *)(v109 + 24);
          v350 = *(_QWORD *)v360.__r_.__value_.__l.__data_ + 16;
          v358 = v75;
          v113 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v113 & 1) != 0)
            goto LABEL_117;
        }
        else
        {
          v110 = *(unsigned __int8 *)(*(_QWORD *)v360.__r_.__value_.__l.__data_ + 39);
          v111 = (const char *)(*(_QWORD *)v360.__r_.__value_.__l.__data_ + 16);
          v350 = (uint64_t)v111;
          v358 = v75;
          v112 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v112 & 1) != 0)
            goto LABEL_117;
        }
        if (__cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)&v406);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v406);
          if ((_BYTE)v407 && SHIBYTE(v406.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v406.__r_.__value_.__l.__data_);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
LABEL_117:
        if (byte_254A4A4F8[23] >= 0)
          v114 = byte_254A4A4F8;
        else
          v114 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v115 = byte_254A4A4F8[23];
        else
          v115 = *(_QWORD *)&byte_254A4A4F8[8];
        v406.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v114, v111);
        p_size = &v406.__r_.__value_.__l.__size_;
        if (v115 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v115 >= 0x17)
        {
          v117 = (v115 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v115 | 7) != 0x17)
            v117 = v115 | 7;
          v118 = v117 + 1;
          p_size = (std::string::size_type *)operator new(v117 + 1);
          v406.__r_.__value_.__r.__words[2] = v115;
          *(_QWORD *)&v407 = v118 | 0x8000000000000000;
          v406.__r_.__value_.__l.__size_ = (std::string::size_type)p_size;
        }
        else
        {
          BYTE7(v407) = v115;
          if (!v115)
          {
LABEL_131:
            *((_BYTE *)p_size + v115) = 0;
            BYTE8(v407) = 1;
            v119 = (char *)&v408;
            if (v110 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v110 >= 0x17)
            {
              v120 = (v110 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v110 | 7) != 0x17)
                v120 = v110 | 7;
              v121 = v120 + 1;
              v119 = (char *)operator new(v120 + 1);
              v409 = (const char *)v110;
              v410 = v121 | 0x8000000000000000;
              v408 = v119;
            }
            else
            {
              HIBYTE(v410) = v110;
              if (!v110)
              {
LABEL_139:
                v119[v110] = 0;
                LOBYTE(v411) = 1;
                v122 = v406.__r_.__value_.__r.__words[0];
                if (SHIBYTE(v410) < 0)
                  operator delete(v408);
                if (BYTE8(v407) && SBYTE7(v407) < 0)
                  operator delete((void *)v406.__r_.__value_.__l.__size_);
                if (v406.__r_.__value_.__r.__words[0])
                  os_release(v406.__r_.__value_.__l.__data_);
                v353 = v73;
                if (!v358 || !*(_QWORD *)(v358 + 24))
                {
                  os_log_type_enabled(v122, OS_LOG_TYPE_DEBUG);
                  LODWORD(v406.__r_.__value_.__l.__data_) = 136315138;
                  *(std::string::size_type *)((char *)v406.__r_.__value_.__r.__words + 4) = (std::string::size_type)v108;
                  v129 = (void *)_os_log_send_and_compose_impl();
                  if (v129)
                    free(v129);
LABEL_279:
                  if (v353)
                  {
                    v202 = (const char *)&__dst;
                    if (v385 < 0)
                      v202 = (const char *)__dst;
                    sub_20E8C003C((uint64_t)&v360, "%s", v202);
                    sub_20E863570((uint64_t)&v360);
                  }
                  sub_20E863570((uint64_t)&v360);
                  v203 = v366;
                  if (v366)
                  {
                    p_shared_owners = (unint64_t *)&v366->__shared_owners_;
                    do
                      v205 = __ldaxr(p_shared_owners);
                    while (__stlxr(v205 - 1, p_shared_owners));
                    if (!v205)
                    {
                      ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
                      std::__shared_weak_count::__release_weak(v203);
                    }
                  }
                  if (SHIBYTE(v385) < 0)
                    operator delete((void *)__dst);
                  v367[0] = *MEMORY[0x24BEDB7F0];
                  v206 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                  *(_QWORD *)((char *)v367 + *(_QWORD *)(v367[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                  v368 = v206;
                  v369 = MEMORY[0x24BEDB848] + 16;
                  if (v375 < 0)
                    operator delete(v374);
                  std::streambuf::~streambuf();
                  std::iostream::~basic_iostream();
                  MEMORY[0x212BC6290](v378);
                  if (!v72)
                    goto LABEL_371;
LABEL_63:
                  sub_20F9B2A4C(&v379);
                  if (**(int **)(v379 + 56) <= 2)
                  {
                    v76 = *(unsigned __int8 *)(v379 + 72);
                    v77 = sub_20E8C31DC(v379, "OSLogSurrogateAppender", 1, 0);
                    v78 = v77;
                    if (v76 || v77)
                    {
                      sub_20E863438((uint64_t)v367);
                      v79 = sub_20E86A980(&v368, (uint64_t)"ExtractConditionalPriorFromLinearSystem:", 40);
                      v80 = sub_20E86A980(v79, (uint64_t)"\n    missing poses dof: ", 24);
                      sub_20FBF5D34(&v406, (uint64_t)&object, 0);
                      if ((v406.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v81 = &v406;
                      else
                        v81 = (std::string *)v406.__r_.__value_.__r.__words[0];
                      if ((v406.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v82 = HIBYTE(v406.__r_.__value_.__r.__words[2]);
                      else
                        v82 = v406.__r_.__value_.__l.__size_;
                      v83 = sub_20E86A980(v80, (uint64_t)v81, v82);
                      v84 = sub_20E86A980(v83, (uint64_t)"\n    missing vel_biases dof: ", 29);
                      sub_20FBF5D34(&v360, (uint64_t)&object, 1u);
                      if ((v360.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v85 = &v360;
                      else
                        v85 = (std::string *)v360.__r_.__value_.__r.__words[0];
                      if ((v360.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v86 = HIBYTE(v360.__r_.__value_.__r.__words[2]);
                      else
                        v86 = v360.__r_.__value_.__l.__size_;
                      v87 = sub_20E86A980(v84, (uint64_t)v85, v86);
                      v88 = sub_20E86A980(v87, (uint64_t)"\n    missing extrinsics dof: ", 29);
                      sub_20FBF5D34(&v380, (uint64_t)&object, 2u);
                      if ((v380.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v89 = &v380;
                      else
                        v89 = (std::string *)v380.__r_.__value_.__r.__words[0];
                      if ((v380.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v90 = HIBYTE(v380.__r_.__value_.__r.__words[2]);
                      else
                        v90 = v380.__r_.__value_.__l.__size_;
                      v91 = sub_20E86A980(v88, (uint64_t)v89, v90);
                      v92 = sub_20E86A980(v91, (uint64_t)"\n    missing intrinsic_calibs dof: ", 35);
                      sub_20FBF5D34(&__p, (uint64_t)&object, 7u);
                      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        p_p = &__p;
                      else
                        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v94 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                      else
                        v94 = __p.__r_.__value_.__l.__size_;
                      sub_20E86A980(v92, (uint64_t)p_p, v94);
                      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                      {
                        operator delete(__p.__r_.__value_.__l.__data_);
                        if ((SHIBYTE(v380.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        {
LABEL_92:
                          if ((SHIBYTE(v360.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                            goto LABEL_93;
                          goto LABEL_158;
                        }
                      }
                      else if ((SHIBYTE(v380.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      {
                        goto LABEL_92;
                      }
                      operator delete(v380.__r_.__value_.__l.__data_);
                      if ((SHIBYTE(v360.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      {
LABEL_93:
                        if ((SHIBYTE(v406.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                          goto LABEL_94;
                        goto LABEL_159;
                      }
LABEL_158:
                      operator delete(v360.__r_.__value_.__l.__data_);
                      if ((SHIBYTE(v406.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      {
LABEL_94:
                        v95 = v377;
                        v357 = v76;
                        if ((v377 & 0x10) == 0)
                        {
LABEL_95:
                          if ((v95 & 8) == 0)
                          {
                            v96 = 0;
                            HIBYTE(v385) = 0;
                            v97 = &__dst;
                            goto LABEL_191;
                          }
                          v131 = &v370;
                          v130 = v371;
LABEL_183:
                          v148 = *v131;
                          v96 = v130 - (_QWORD)*v131;
                          if (v96 > 0x7FFFFFFFFFFFFFF7)
                            sub_20E860B7C();
                          if (v96 >= 0x17)
                          {
                            v149 = (v96 & 0xFFFFFFFFFFFFFFF8) + 8;
                            if ((v96 | 7) != 0x17)
                              v149 = v96 | 7;
                            v150 = v149 + 1;
                            v97 = (__int128 *)operator new(v149 + 1);
                            v385 = v150 | 0x8000000000000000;
                            *(_QWORD *)&__dst = v97;
                            *((_QWORD *)&__dst + 1) = v96;
                          }
                          else
                          {
                            HIBYTE(v385) = v130 - *(_BYTE *)v131;
                            v97 = &__dst;
                            if (!v96)
                            {
LABEL_191:
                              *((_BYTE *)v97 + v96) = 0;
                              v360.__r_.__value_.__r.__words[0] = (std::string::size_type)&v379;
                              v360.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
                              v360.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
                              LODWORD(v361) = 2;
                              v362 = "unknown file";
                              v363 = 2929;
                              v365 = 0;
                              v366 = 0;
                              v364 = "unknown function";
                              if (v385 >= 0)
                                v151 = (const char *)&__dst;
                              else
                                v151 = (const char *)__dst;
                              v152 = *(_QWORD *)v360.__r_.__value_.__l.__data_;
                              if (*(char *)(*(_QWORD *)v360.__r_.__value_.__l.__data_ + 39) < 0)
                              {
                                v154 = *(const char **)(v152 + 16);
                                v153 = *(_QWORD *)(v152 + 24);
                              }
                              else
                              {
                                v153 = *(unsigned __int8 *)(*(_QWORD *)v360.__r_.__value_.__l.__data_ + 39);
                                v154 = (const char *)(*(_QWORD *)v360.__r_.__value_.__l.__data_ + 16);
                              }
                              v354 = *(_QWORD *)v360.__r_.__value_.__l.__data_ + 16;
                              v155 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                              if ((v155 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
                              {
                                sub_20E9E46F8((uint64_t)&v406);
                                sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v406);
                                if ((_BYTE)v407 && SHIBYTE(v406.__r_.__value_.__r.__words[2]) < 0)
                                  operator delete(v406.__r_.__value_.__l.__data_);
                                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                                __cxa_guard_release(&qword_254A4A510);
                              }
                              if (byte_254A4A4F8[23] >= 0)
                                v156 = byte_254A4A4F8;
                              else
                                v156 = *(const char **)byte_254A4A4F8;
                              if (byte_254A4A4F8[23] >= 0)
                                v157 = byte_254A4A4F8[23];
                              else
                                v157 = *(_QWORD *)&byte_254A4A4F8[8];
                              v406.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v156, v154);
                              v158 = &v406.__r_.__value_.__l.__size_;
                              if (v157 > 0x7FFFFFFFFFFFFFF7)
                                sub_20E860B7C();
                              if (v157 >= 0x17)
                              {
                                v159 = (v157 & 0xFFFFFFFFFFFFFFF8) + 8;
                                if ((v157 | 7) != 0x17)
                                  v159 = v157 | 7;
                                v160 = v159 + 1;
                                v158 = (std::string::size_type *)operator new(v159 + 1);
                                v406.__r_.__value_.__r.__words[2] = v157;
                                *(_QWORD *)&v407 = v160 | 0x8000000000000000;
                                v406.__r_.__value_.__l.__size_ = (std::string::size_type)v158;
                              }
                              else
                              {
                                BYTE7(v407) = v157;
                                if (!v157)
                                {
LABEL_212:
                                  *((_BYTE *)v158 + v157) = 0;
                                  BYTE8(v407) = 1;
                                  v161 = (char *)&v408;
                                  if (v153 > 0x7FFFFFFFFFFFFFF7)
                                    sub_20E860B7C();
                                  if (v153 >= 0x17)
                                  {
                                    v162 = (v153 & 0xFFFFFFFFFFFFFFF8) + 8;
                                    if ((v153 | 7) != 0x17)
                                      v162 = v153 | 7;
                                    v163 = v162 + 1;
                                    v161 = (char *)operator new(v162 + 1);
                                    v409 = (const char *)v153;
                                    v410 = v163 | 0x8000000000000000;
                                    v408 = v161;
                                  }
                                  else
                                  {
                                    HIBYTE(v410) = v153;
                                    if (!v153)
                                    {
LABEL_220:
                                      v161[v153] = 0;
                                      LOBYTE(v411) = 1;
                                      v164 = v406.__r_.__value_.__r.__words[0];
                                      if (SHIBYTE(v410) < 0)
                                        operator delete(v408);
                                      if (BYTE8(v407) && SBYTE7(v407) < 0)
                                        operator delete((void *)v406.__r_.__value_.__l.__size_);
                                      if (v406.__r_.__value_.__r.__words[0])
                                        os_release(v406.__r_.__value_.__l.__data_);
                                      if (!v78 || !*(_QWORD *)(v78 + 24))
                                      {
                                        os_log_type_enabled(v164, OS_LOG_TYPE_DEBUG);
                                        LODWORD(v406.__r_.__value_.__l.__data_) = 136315138;
                                        *(std::string::size_type *)((char *)v406.__r_.__value_.__r.__words + 4) = (std::string::size_type)v151;
                                        v171 = (void *)_os_log_send_and_compose_impl();
                                        v172 = v357;
                                        if (v171)
                                          free(v171);
                                        goto LABEL_357;
                                      }
                                      v165 = _os_log_pack_size();
                                      v166 = operator new(v165, (std::align_val_t)8uLL);
                                      v167 = (_QWORD *)operator new();
                                      *v167 = &off_24C9ABB80;
                                      v167[1] = 0;
                                      v167[2] = 0;
                                      v167[3] = v166;
                                      v380.__r_.__value_.__r.__words[0] = (std::string::size_type)v166;
                                      v380.__r_.__value_.__l.__size_ = (std::string::size_type)v166;
                                      v382 = 0;
                                      v380.__r_.__value_.__r.__words[2] = (std::string::size_type)v167;
                                      v381 = 0;
                                      v168 = strlen(v151);
                                      if (v168 > 0x7FFFFFFFFFFFFFF7)
                                        sub_20E860B7C();
                                      v169 = v168;
                                      if (v168 >= 0x17)
                                      {
                                        v207 = (v168 & 0xFFFFFFFFFFFFFFF8) + 8;
                                        if ((v168 | 7) != 0x17)
                                          v207 = v168 | 7;
                                        v208 = v207 + 1;
                                        v170 = (std::string *)operator new(v207 + 1);
                                        __p.__r_.__value_.__r.__words[2] = v208 | 0x8000000000000000;
                                        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v170;
                                        __p.__r_.__value_.__l.__size_ = v169;
                                      }
                                      else
                                      {
                                        *((_BYTE *)&__p.__r_.__value_.__s + 23) = v168;
                                        v170 = &__p;
                                        if (!v168)
                                        {
LABEL_298:
                                          v170->__r_.__value_.__s.__data_[v169] = 0;
                                          v412[0] = __p.__r_.__value_.__l.__size_;
                                          v209 = __p.__r_.__value_.__r.__words[0];
                                          *(uint64_t *)((char *)v412 + 7) = *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7);
                                          v210 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                                          v211 = operator new(0x38uLL);
                                          v211[1] = 0;
                                          v211[2] = 0;
                                          v211[3] = off_24C9ABC20;
                                          *v211 = &off_24C9ABBD0;
                                          v212 = v412[0];
                                          v211[4] = v209;
                                          v211[5] = v212;
                                          *(_QWORD *)((char *)v211 + 47) = *(uint64_t *)((char *)v412 + 7);
                                          *((_BYTE *)v211 + 55) = v210;
                                          memset(v412, 0, 15);
                                          v213 = v382;
                                          v381 = (char *)(v211 + 3);
                                          v382 = (std::__shared_weak_count *)v211;
                                          if (v213)
                                          {
                                            v214 = (unint64_t *)&v213->__shared_owners_;
                                            do
                                              v215 = __ldaxr(v214);
                                            while (__stlxr(v215 - 1, v214));
                                            if (!v215)
                                            {
                                              ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
                                              std::__shared_weak_count::__release_weak(v213);
                                            }
                                          }
                                          v406 = v380;
                                          v216 = v381;
                                          if (v380.__r_.__value_.__r.__words[2])
                                          {
                                            v217 = (unint64_t *)(v380.__r_.__value_.__r.__words[2] + 8);
                                            do
                                              v218 = __ldxr(v217);
                                            while (__stxr(v218 + 1, v217));
                                          }
                                          v219 = v382;
                                          *(_QWORD *)&v407 = v216;
                                          *((_QWORD *)&v407 + 1) = v382;
                                          if (v382)
                                          {
                                            v220 = (unint64_t *)&v382->__shared_owners_;
                                            do
                                              v221 = __ldxr(v220);
                                            while (__stxr(v221 + 1, v220));
                                            v408 = v216;
                                            do
                                              v222 = __ldaxr(v220);
                                            while (__stlxr(v222 - 1, v220));
                                            if (!v222)
                                            {
                                              ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
                                              std::__shared_weak_count::__release_weak(v219);
                                            }
                                          }
                                          else
                                          {
                                            v408 = v216;
                                          }
                                          v223 = (std::__shared_weak_count *)v380.__r_.__value_.__r.__words[2];
                                          if (v380.__r_.__value_.__r.__words[2])
                                          {
                                            v224 = (unint64_t *)(v380.__r_.__value_.__r.__words[2] + 8);
                                            do
                                              v225 = __ldaxr(v224);
                                            while (__stlxr(v225 - 1, v224));
                                            if (!v225)
                                            {
                                              ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
                                              std::__shared_weak_count::__release_weak(v223);
                                            }
                                          }
                                          v226 = v406.__r_.__value_.__r.__words[0];
                                          if (v408[31] >= 0)
                                            v227 = v408 + 8;
                                          else
                                            v227 = (char *)*((_QWORD *)v408 + 1);
                                          v228 = _os_log_pack_fill();
                                          *(_DWORD *)v228 = 136315138;
                                          *(_QWORD *)(v228 + 4) = v227;
                                          v229 = operator new();
                                          v230 = *(unsigned __int8 *)(v152 + 39);
                                          v231 = v354;
                                          if ((v230 & 0x80u) != 0)
                                          {
                                            v231 = *(_QWORD *)(v152 + 16);
                                            v230 = *(_QWORD *)(v152 + 24);
                                          }
                                          *(_QWORD *)v229 = v226;
                                          *(_OWORD *)(v229 + 8) = *(_OWORD *)&v406.__r_.__value_.__r.__words[1];
                                          *(_OWORD *)&v406.__r_.__value_.__r.__words[1] = 0uLL;
                                          *(_OWORD *)(v229 + 24) = v407;
                                          v407 = 0uLL;
                                          *(_QWORD *)(v229 + 40) = v231;
                                          *(_QWORD *)(v229 + 48) = v230;
                                          *(_BYTE *)(v229 + 56) = 2;
                                          __p.__r_.__value_.__r.__words[0] = 0;
                                          v380.__r_.__value_.__r.__words[0] = v229;
                                          (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v78 + 24) + 40))(*(_QWORD *)(v78 + 24), &v380);
                                          v232 = v380.__r_.__value_.__r.__words[0];
                                          v380.__r_.__value_.__r.__words[0] = 0;
                                          v172 = v357;
                                          if (v232)
                                          {
                                            v233 = *(std::__shared_weak_count **)(v232 + 32);
                                            if (v233)
                                            {
                                              v234 = (unint64_t *)&v233->__shared_owners_;
                                              do
                                                v235 = __ldaxr(v234);
                                              while (__stlxr(v235 - 1, v234));
                                              if (!v235)
                                              {
                                                ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
                                                std::__shared_weak_count::__release_weak(v233);
                                              }
                                            }
                                            v236 = *(std::__shared_weak_count **)(v232 + 16);
                                            if (v236)
                                            {
                                              v237 = (unint64_t *)&v236->__shared_owners_;
                                              do
                                                v238 = __ldaxr(v237);
                                              while (__stlxr(v238 - 1, v237));
                                              if (!v238)
                                              {
                                                ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
                                                std::__shared_weak_count::__release_weak(v236);
                                              }
                                            }
                                            MEMORY[0x212BC6398](v232, 0x10F0C40B62ED6C6);
                                            v239 = __p.__r_.__value_.__r.__words[0];
                                            __p.__r_.__value_.__r.__words[0] = 0;
                                            if (v239)
                                            {
                                              v240 = *(std::__shared_weak_count **)(v239 + 32);
                                              if (v240)
                                              {
                                                v241 = (unint64_t *)&v240->__shared_owners_;
                                                do
                                                  v242 = __ldaxr(v241);
                                                while (__stlxr(v242 - 1, v241));
                                                if (!v242)
                                                {
                                                  ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
                                                  std::__shared_weak_count::__release_weak(v240);
                                                }
                                              }
                                              v243 = *(std::__shared_weak_count **)(v239 + 16);
                                              if (v243)
                                              {
                                                v244 = (unint64_t *)&v243->__shared_owners_;
                                                do
                                                  v245 = __ldaxr(v244);
                                                while (__stlxr(v245 - 1, v244));
                                                if (!v245)
                                                {
                                                  ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
                                                  std::__shared_weak_count::__release_weak(v243);
                                                }
                                              }
                                              MEMORY[0x212BC6398](v239, 0x10F0C40B62ED6C6);
                                            }
                                          }
                                          v246 = (std::__shared_weak_count *)*((_QWORD *)&v407 + 1);
                                          if (*((_QWORD *)&v407 + 1))
                                          {
                                            v247 = (unint64_t *)(*((_QWORD *)&v407 + 1) + 8);
                                            do
                                              v248 = __ldaxr(v247);
                                            while (__stlxr(v248 - 1, v247));
                                            if (!v248)
                                            {
                                              ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
                                              std::__shared_weak_count::__release_weak(v246);
                                            }
                                          }
                                          v249 = (std::__shared_weak_count *)v406.__r_.__value_.__r.__words[2];
                                          if (v406.__r_.__value_.__r.__words[2])
                                          {
                                            v250 = (unint64_t *)(v406.__r_.__value_.__r.__words[2] + 8);
                                            do
                                              v251 = __ldaxr(v250);
                                            while (__stlxr(v251 - 1, v250));
                                            if (!v251)
                                            {
                                              ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
                                              std::__shared_weak_count::__release_weak(v249);
                                            }
                                          }
LABEL_357:
                                          if (v172)
                                          {
                                            v252 = (const char *)&__dst;
                                            if (v385 < 0)
                                              v252 = (const char *)__dst;
                                            sub_20E8C003C((uint64_t)&v360, "%s", v252);
                                            sub_20E863570((uint64_t)&v360);
                                          }
                                          sub_20E863570((uint64_t)&v360);
                                          v253 = v366;
                                          if (v366)
                                          {
                                            v254 = (unint64_t *)&v366->__shared_owners_;
                                            do
                                              v255 = __ldaxr(v254);
                                            while (__stlxr(v255 - 1, v254));
                                            if (!v255)
                                            {
                                              ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
                                              std::__shared_weak_count::__release_weak(v253);
                                            }
                                          }
                                          if (SHIBYTE(v385) < 0)
                                            operator delete((void *)__dst);
                                          v367[0] = *MEMORY[0x24BEDB7F0];
                                          v256 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                                          *(_QWORD *)((char *)v367 + *(_QWORD *)(v367[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                                          v368 = v256;
                                          v369 = MEMORY[0x24BEDB848] + 16;
                                          if (v375 < 0)
                                            operator delete(v374);
                                          std::streambuf::~streambuf();
                                          std::iostream::~basic_iostream();
                                          MEMORY[0x212BC6290](v378);
                                          goto LABEL_371;
                                        }
                                      }
                                      memcpy(v170, v151, v169);
                                      goto LABEL_298;
                                    }
                                  }
                                  memmove(v161, v154, v153);
                                  goto LABEL_220;
                                }
                              }
                              memmove(v158, v156, v157);
                              goto LABEL_212;
                            }
                          }
                          memmove(v97, v148, v96);
                          goto LABEL_191;
                        }
LABEL_160:
                        v130 = v376;
                        if (v376 < v373)
                        {
                          v376 = v373;
                          v130 = v373;
                        }
                        v131 = &v372;
                        goto LABEL_183;
                      }
LABEL_159:
                      operator delete(v406.__r_.__value_.__l.__data_);
                      v95 = v377;
                      v357 = v76;
                      if ((v377 & 0x10) == 0)
                        goto LABEL_95;
                      goto LABEL_160;
                    }
                  }
LABEL_371:
                  sub_20F89E908((uint64_t)&object);
                  goto LABEL_372;
                }
                v123 = _os_log_pack_size();
                v124 = operator new(v123, (std::align_val_t)8uLL);
                v125 = (_QWORD *)operator new();
                *v125 = &off_24C9ABB80;
                v125[1] = 0;
                v125[2] = 0;
                v125[3] = v124;
                v380.__r_.__value_.__r.__words[0] = (std::string::size_type)v124;
                v380.__r_.__value_.__l.__size_ = (std::string::size_type)v124;
                v382 = 0;
                v380.__r_.__value_.__r.__words[2] = (std::string::size_type)v125;
                v381 = 0;
                v126 = strlen(v108);
                if (v126 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                v127 = v126;
                if (v126 >= 0x17)
                {
                  v132 = (v126 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v126 | 7) != 0x17)
                    v132 = v126 | 7;
                  v133 = v132 + 1;
                  v128 = (std::string *)operator new(v132 + 1);
                  __p.__r_.__value_.__r.__words[2] = v133 | 0x8000000000000000;
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v128;
                  __p.__r_.__value_.__l.__size_ = v127;
                }
                else
                {
                  *((_BYTE *)&__p.__r_.__value_.__s + 23) = v126;
                  v128 = &__p;
                  if (!v126)
                  {
LABEL_167:
                    v128->__r_.__value_.__s.__data_[v127] = 0;
                    v412[0] = __p.__r_.__value_.__l.__size_;
                    v134 = __p.__r_.__value_.__r.__words[0];
                    *(uint64_t *)((char *)v412 + 7) = *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1]
                                                                               + 7);
                    v135 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                    v136 = operator new(0x38uLL);
                    v136[1] = 0;
                    v136[2] = 0;
                    v136[3] = off_24C9ABC20;
                    *v136 = &off_24C9ABBD0;
                    v137 = v412[0];
                    v136[4] = v134;
                    v136[5] = v137;
                    *(_QWORD *)((char *)v136 + 47) = *(uint64_t *)((char *)v412 + 7);
                    *((_BYTE *)v136 + 55) = v135;
                    memset(v412, 0, 15);
                    v138 = v382;
                    v381 = (char *)(v136 + 3);
                    v382 = (std::__shared_weak_count *)v136;
                    if (v138)
                    {
                      v139 = (unint64_t *)&v138->__shared_owners_;
                      do
                        v140 = __ldaxr(v139);
                      while (__stlxr(v140 - 1, v139));
                      if (!v140)
                      {
                        ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                        std::__shared_weak_count::__release_weak(v138);
                      }
                    }
                    v406 = v380;
                    v141 = v381;
                    if (v380.__r_.__value_.__r.__words[2])
                    {
                      v142 = (unint64_t *)(v380.__r_.__value_.__r.__words[2] + 8);
                      do
                        v143 = __ldxr(v142);
                      while (__stxr(v143 + 1, v142));
                    }
                    v144 = v382;
                    *(_QWORD *)&v407 = v141;
                    *((_QWORD *)&v407 + 1) = v382;
                    if (v382)
                    {
                      v145 = (unint64_t *)&v382->__shared_owners_;
                      do
                        v146 = __ldxr(v145);
                      while (__stxr(v146 + 1, v145));
                      v408 = v141;
                      do
                        v147 = __ldaxr(v145);
                      while (__stlxr(v147 - 1, v145));
                      if (!v147)
                      {
                        ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
                        std::__shared_weak_count::__release_weak(v144);
                      }
                    }
                    else
                    {
                      v408 = v141;
                    }
                    v173 = (std::__shared_weak_count *)v380.__r_.__value_.__r.__words[2];
                    if (v380.__r_.__value_.__r.__words[2])
                    {
                      v174 = (unint64_t *)(v380.__r_.__value_.__r.__words[2] + 8);
                      do
                        v175 = __ldaxr(v174);
                      while (__stlxr(v175 - 1, v174));
                      if (!v175)
                      {
                        ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
                        std::__shared_weak_count::__release_weak(v173);
                      }
                    }
                    v176 = v406.__r_.__value_.__r.__words[0];
                    if (v408[31] >= 0)
                      v177 = v408 + 8;
                    else
                      v177 = (char *)*((_QWORD *)v408 + 1);
                    v178 = _os_log_pack_fill();
                    *(_DWORD *)v178 = 136315138;
                    *(_QWORD *)(v178 + 4) = v177;
                    v179 = operator new();
                    v180 = *(unsigned __int8 *)(v109 + 39);
                    v181 = v350;
                    if ((v180 & 0x80u) != 0)
                    {
                      v181 = *(_QWORD *)(v109 + 16);
                      v180 = *(_QWORD *)(v109 + 24);
                    }
                    *(_QWORD *)v179 = v176;
                    *(_OWORD *)(v179 + 8) = *(_OWORD *)&v406.__r_.__value_.__r.__words[1];
                    *(_OWORD *)&v406.__r_.__value_.__r.__words[1] = 0uLL;
                    *(_OWORD *)(v179 + 24) = v407;
                    v407 = 0uLL;
                    *(_QWORD *)(v179 + 40) = v181;
                    *(_QWORD *)(v179 + 48) = v180;
                    *(_BYTE *)(v179 + 56) = 2;
                    __p.__r_.__value_.__r.__words[0] = 0;
                    v380.__r_.__value_.__r.__words[0] = v179;
                    (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v358 + 24) + 40))(*(_QWORD *)(v358 + 24), &v380);
                    v182 = v380.__r_.__value_.__r.__words[0];
                    v380.__r_.__value_.__r.__words[0] = 0;
                    if (v182)
                    {
                      v183 = *(std::__shared_weak_count **)(v182 + 32);
                      if (v183)
                      {
                        v184 = (unint64_t *)&v183->__shared_owners_;
                        do
                          v185 = __ldaxr(v184);
                        while (__stlxr(v185 - 1, v184));
                        if (!v185)
                        {
                          ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
                          std::__shared_weak_count::__release_weak(v183);
                        }
                      }
                      v186 = *(std::__shared_weak_count **)(v182 + 16);
                      if (v186)
                      {
                        v187 = (unint64_t *)&v186->__shared_owners_;
                        do
                          v188 = __ldaxr(v187);
                        while (__stlxr(v188 - 1, v187));
                        if (!v188)
                        {
                          ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
                          std::__shared_weak_count::__release_weak(v186);
                        }
                      }
                      MEMORY[0x212BC6398](v182, 0x10F0C40B62ED6C6);
                      v189 = __p.__r_.__value_.__r.__words[0];
                      __p.__r_.__value_.__r.__words[0] = 0;
                      if (v189)
                      {
                        v190 = *(std::__shared_weak_count **)(v189 + 32);
                        if (v190)
                        {
                          v191 = (unint64_t *)&v190->__shared_owners_;
                          do
                            v192 = __ldaxr(v191);
                          while (__stlxr(v192 - 1, v191));
                          if (!v192)
                          {
                            ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
                            std::__shared_weak_count::__release_weak(v190);
                          }
                        }
                        v193 = *(std::__shared_weak_count **)(v189 + 16);
                        if (v193)
                        {
                          v194 = (unint64_t *)&v193->__shared_owners_;
                          do
                            v195 = __ldaxr(v194);
                          while (__stlxr(v195 - 1, v194));
                          if (!v195)
                          {
                            ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
                            std::__shared_weak_count::__release_weak(v193);
                          }
                        }
                        MEMORY[0x212BC6398](v189, 0x10F0C40B62ED6C6);
                      }
                    }
                    v196 = (std::__shared_weak_count *)*((_QWORD *)&v407 + 1);
                    if (*((_QWORD *)&v407 + 1))
                    {
                      v197 = (unint64_t *)(*((_QWORD *)&v407 + 1) + 8);
                      do
                        v198 = __ldaxr(v197);
                      while (__stlxr(v198 - 1, v197));
                      if (!v198)
                      {
                        ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
                        std::__shared_weak_count::__release_weak(v196);
                      }
                    }
                    v199 = (std::__shared_weak_count *)v406.__r_.__value_.__r.__words[2];
                    if (v406.__r_.__value_.__r.__words[2])
                    {
                      v200 = (unint64_t *)(v406.__r_.__value_.__r.__words[2] + 8);
                      do
                        v201 = __ldaxr(v200);
                      while (__stlxr(v201 - 1, v200));
                      if (!v201)
                      {
                        ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
                        std::__shared_weak_count::__release_weak(v199);
                      }
                    }
                    goto LABEL_279;
                  }
                }
                memcpy(v128, v108, v127);
                goto LABEL_167;
              }
            }
            memmove(v119, v111, v110);
            goto LABEL_139;
          }
        }
        memmove(p_size, v114, v115);
        goto LABEL_131;
      }
    }
    memmove(p_dst, v105, v102);
    goto LABEL_110;
  }
LABEL_372:
  sub_20F9B2A4C(v412);
  result = v412[0];
  if (**(int **)(v412[0] + 56) > 2)
    return result;
  v258 = *(unsigned __int8 *)(v412[0] + 72);
  result = sub_20E8C31DC(v412[0], "OSLogSurrogateAppender", 1, 0);
  v259 = result;
  if (!v258 && !result)
    return result;
  sub_20E863438((uint64_t)v367);
  sub_20E86A980(&v368, (uint64_t)"ExtractConditionalPriorFromLinearSystem returns ", 48);
  v260 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v260, (uint64_t)" x ", 3);
  std::ostream::operator<<();
  if ((v377 & 0x10) != 0)
  {
    v263 = v376;
    if (v376 < v373)
    {
      v376 = v373;
      v263 = v373;
    }
    v264 = v372;
    v261 = v263 - (_QWORD)v372;
    if (v263 - (unint64_t)v372 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_433;
  }
  else
  {
    if ((v377 & 8) == 0)
    {
      v261 = 0;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
      v262 = &__p;
      goto LABEL_388;
    }
    v264 = v370;
    v261 = v371 - (_QWORD)v370;
    if (v371 - (unint64_t)v370 > 0x7FFFFFFFFFFFFFF7)
LABEL_433:
      sub_20E860B7C();
  }
  if (v261 >= 0x17)
  {
    v265 = (v261 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v261 | 7) != 0x17)
      v265 = v261 | 7;
    v266 = v265 + 1;
    v262 = (std::string *)operator new(v265 + 1);
    __p.__r_.__value_.__r.__words[2] = v266 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v262;
    __p.__r_.__value_.__l.__size_ = v261;
    goto LABEL_387;
  }
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = v261;
  v262 = &__p;
  if (v261)
LABEL_387:
    memmove(v262, v264, v261);
LABEL_388:
  v262->__r_.__value_.__s.__data_[v261] = 0;
  v406.__r_.__value_.__r.__words[0] = (std::string::size_type)v412;
  v406.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v406.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
  LODWORD(v407) = 2;
  *((_QWORD *)&v407 + 1) = "unknown file";
  LODWORD(v408) = 2934;
  v410 = 0;
  v411 = 0;
  v409 = "unknown function";
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v267 = &__p;
  else
    v267 = (std::string *)__p.__r_.__value_.__r.__words[0];
  v268 = *(_QWORD *)v406.__r_.__value_.__l.__data_;
  v269 = (const char *)(*(_QWORD *)v406.__r_.__value_.__l.__data_ + 16);
  v359 = v269;
  if (*(char *)(*(_QWORD *)v406.__r_.__value_.__l.__data_ + 39) < 0)
  {
    v269 = *(const char **)(v268 + 16);
    v270 = *(_QWORD *)(v268 + 24);
    v272 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v272 & 1) != 0)
      goto LABEL_395;
  }
  else
  {
    v270 = *(unsigned __int8 *)(*(_QWORD *)v406.__r_.__value_.__l.__data_ + 39);
    v271 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v271 & 1) != 0)
      goto LABEL_395;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)&object);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
    if ((_BYTE)v387 && SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
      operator delete(object.__r_.__value_.__l.__data_);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_395:
  if (byte_254A4A4F8[23] >= 0)
    v273 = byte_254A4A4F8;
  else
    v273 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v274 = byte_254A4A4F8[23];
  else
    v274 = *(_QWORD *)&byte_254A4A4F8[8];
  object.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v273, v269);
  v275 = &object.__r_.__value_.__l.__size_;
  if (v274 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v274 >= 0x17)
  {
    v276 = (v274 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v274 | 7) != 0x17)
      v276 = v274 | 7;
    v277 = v276 + 1;
    v275 = (std::string::size_type *)operator new(v276 + 1);
    *(_QWORD *)&v387 = v277 | 0x8000000000000000;
    object.__r_.__value_.__l.__size_ = (std::string::size_type)v275;
    object.__r_.__value_.__r.__words[2] = v274;
    goto LABEL_408;
  }
  BYTE7(v387) = v274;
  if (v274)
LABEL_408:
    memmove(v275, v273, v274);
  *((_BYTE *)v275 + v274) = 0;
  BYTE8(v387) = 1;
  v278 = &v388;
  if (v270 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v270 >= 0x17)
  {
    v280 = (v270 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v270 | 7) != 0x17)
      v280 = v270 | 7;
    v281 = v280 + 1;
    v278 = operator new(v280 + 1);
    v390 = v281 | 0x8000000000000000;
    v388 = v278;
    v389 = v270;
  }
  else
  {
    HIBYTE(v390) = v270;
    if (!v270)
    {
      LOBYTE(v388) = 0;
      v391 = 1;
      v279 = object.__r_.__value_.__r.__words[0];
      if ((SHIBYTE(v390) & 0x80000000) == 0)
        goto LABEL_413;
      goto LABEL_419;
    }
  }
  memmove(v278, v269, v270);
  *((_BYTE *)v278 + v270) = 0;
  v391 = 1;
  v279 = object.__r_.__value_.__r.__words[0];
  if ((SHIBYTE(v390) & 0x80000000) == 0)
  {
LABEL_413:
    if (!BYTE8(v387))
      goto LABEL_422;
    goto LABEL_420;
  }
LABEL_419:
  operator delete(v388);
  if (!BYTE8(v387))
    goto LABEL_422;
LABEL_420:
  if (SBYTE7(v387) < 0)
    operator delete((void *)object.__r_.__value_.__l.__size_);
LABEL_422:
  if (object.__r_.__value_.__r.__words[0])
    os_release(object.__r_.__value_.__l.__data_);
  if (!v259 || !*(_QWORD *)(v259 + 24))
  {
    os_log_type_enabled(v279, OS_LOG_TYPE_DEBUG);
    LODWORD(object.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)object.__r_.__value_.__r.__words + 4) = (std::string::size_type)v267;
    v288 = (void *)_os_log_send_and_compose_impl();
    if (v288)
      free(v288);
    goto LABEL_497;
  }
  v282 = _os_log_pack_size();
  v283 = operator new(v282, (std::align_val_t)8uLL);
  v284 = (_QWORD *)operator new();
  *v284 = &off_24C9ABB80;
  v284[1] = 0;
  v284[2] = 0;
  v284[3] = v283;
  v360.__r_.__value_.__r.__words[0] = (std::string::size_type)v283;
  v360.__r_.__value_.__l.__size_ = (std::string::size_type)v283;
  v361 = 0;
  v362 = 0;
  v360.__r_.__value_.__r.__words[2] = (std::string::size_type)v284;
  v285 = strlen((const char *)v267);
  if (v285 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v286 = v285;
  if (v285 >= 0x17)
  {
    v289 = (v285 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v285 | 7) != 0x17)
      v289 = v285 | 7;
    v290 = v289 + 1;
    v287 = (std::string *)operator new(v289 + 1);
    v380.__r_.__value_.__r.__words[2] = v290 | 0x8000000000000000;
    v380.__r_.__value_.__r.__words[0] = (std::string::size_type)v287;
    v380.__r_.__value_.__l.__size_ = v286;
    goto LABEL_437;
  }
  *((_BYTE *)&v380.__r_.__value_.__s + 23) = v285;
  v287 = &v380;
  if (v285)
LABEL_437:
    memcpy(v287, v267, v286);
  v287->__r_.__value_.__s.__data_[v286] = 0;
  *(_QWORD *)&__dst = v380.__r_.__value_.__l.__size_;
  v291 = v380.__r_.__value_.__r.__words[0];
  *(_QWORD *)((char *)&__dst + 7) = *(std::string::size_type *)((char *)&v380.__r_.__value_.__r.__words[1] + 7);
  v292 = HIBYTE(v380.__r_.__value_.__r.__words[2]);
  v293 = operator new(0x38uLL);
  v293[1] = 0;
  v293[2] = 0;
  v293[3] = off_24C9ABC20;
  *v293 = &off_24C9ABBD0;
  v294 = __dst;
  v293[4] = v291;
  v293[5] = v294;
  *(_QWORD *)((char *)v293 + 47) = *(_QWORD *)((char *)&__dst + 7);
  *((_BYTE *)v293 + 55) = v292;
  *(_QWORD *)&__dst = 0;
  *(_QWORD *)((char *)&__dst + 7) = 0;
  v295 = (std::__shared_weak_count *)v362;
  v361 = (char *)(v293 + 3);
  v362 = (const char *)v293;
  if (v295)
  {
    v296 = (unint64_t *)&v295->__shared_owners_;
    do
      v297 = __ldaxr(v296);
    while (__stlxr(v297 - 1, v296));
    if (!v297)
    {
      ((void (*)(std::__shared_weak_count *))v295->__on_zero_shared)(v295);
      std::__shared_weak_count::__release_weak(v295);
    }
  }
  object = v360;
  v298 = v361;
  if (v360.__r_.__value_.__r.__words[2])
  {
    v299 = (unint64_t *)(v360.__r_.__value_.__r.__words[2] + 8);
    do
      v300 = __ldxr(v299);
    while (__stxr(v300 + 1, v299));
  }
  v301 = (std::__shared_weak_count *)v362;
  *(_QWORD *)&v387 = v298;
  *((_QWORD *)&v387 + 1) = v362;
  if (v362)
  {
    v302 = (unint64_t *)(v362 + 8);
    do
      v303 = __ldxr(v302);
    while (__stxr(v303 + 1, v302));
    v388 = v298;
    do
      v304 = __ldaxr(v302);
    while (__stlxr(v304 - 1, v302));
    if (!v304)
    {
      ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
      std::__shared_weak_count::__release_weak(v301);
    }
  }
  else
  {
    v388 = v298;
  }
  v305 = (std::__shared_weak_count *)v360.__r_.__value_.__r.__words[2];
  if (v360.__r_.__value_.__r.__words[2])
  {
    v306 = (unint64_t *)(v360.__r_.__value_.__r.__words[2] + 8);
    do
      v307 = __ldaxr(v306);
    while (__stlxr(v307 - 1, v306));
    if (!v307)
    {
      ((void (*)(std::__shared_weak_count *))v305->__on_zero_shared)(v305);
      std::__shared_weak_count::__release_weak(v305);
    }
  }
  v308 = object.__r_.__value_.__r.__words[0];
  if (*((char *)v388 + 31) >= 0)
    v309 = (char *)v388 + 8;
  else
    v309 = (char *)*((_QWORD *)v388 + 1);
  v310 = _os_log_pack_fill();
  *(_DWORD *)v310 = 136315138;
  *(_QWORD *)(v310 + 4) = v309;
  v311 = operator new();
  v312 = *(unsigned __int8 *)(v268 + 39);
  v313 = v359;
  if ((v312 & 0x80u) != 0)
  {
    v313 = *(const char **)(v268 + 16);
    v312 = *(_QWORD *)(v268 + 24);
  }
  *(_QWORD *)v311 = v308;
  *(_OWORD *)(v311 + 8) = *(_OWORD *)&object.__r_.__value_.__r.__words[1];
  *(_OWORD *)&object.__r_.__value_.__r.__words[1] = 0uLL;
  *(_OWORD *)(v311 + 24) = v387;
  v387 = 0uLL;
  *(_QWORD *)(v311 + 40) = v313;
  *(_QWORD *)(v311 + 48) = v312;
  *(_BYTE *)(v311 + 56) = 2;
  v380.__r_.__value_.__r.__words[0] = 0;
  v360.__r_.__value_.__r.__words[0] = v311;
  (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v259 + 24) + 40))(*(_QWORD *)(v259 + 24), &v360);
  v314 = v360.__r_.__value_.__r.__words[0];
  v360.__r_.__value_.__r.__words[0] = 0;
  if (v314)
  {
    v315 = *(std::__shared_weak_count **)(v314 + 32);
    if (v315)
    {
      v316 = (unint64_t *)&v315->__shared_owners_;
      do
        v317 = __ldaxr(v316);
      while (__stlxr(v317 - 1, v316));
      if (!v317)
      {
        ((void (*)(std::__shared_weak_count *))v315->__on_zero_shared)(v315);
        std::__shared_weak_count::__release_weak(v315);
      }
    }
    v318 = *(std::__shared_weak_count **)(v314 + 16);
    if (v318)
    {
      v319 = (unint64_t *)&v318->__shared_owners_;
      do
        v320 = __ldaxr(v319);
      while (__stlxr(v320 - 1, v319));
      if (!v320)
      {
        ((void (*)(std::__shared_weak_count *))v318->__on_zero_shared)(v318);
        std::__shared_weak_count::__release_weak(v318);
      }
    }
    MEMORY[0x212BC6398](v314, 0x10F0C40B62ED6C6);
    v321 = v380.__r_.__value_.__r.__words[0];
    v380.__r_.__value_.__r.__words[0] = 0;
    if (v321)
    {
      v322 = *(std::__shared_weak_count **)(v321 + 32);
      if (v322)
      {
        v323 = (unint64_t *)&v322->__shared_owners_;
        do
          v324 = __ldaxr(v323);
        while (__stlxr(v324 - 1, v323));
        if (!v324)
        {
          ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
          std::__shared_weak_count::__release_weak(v322);
        }
      }
      v325 = *(std::__shared_weak_count **)(v321 + 16);
      if (v325)
      {
        v326 = (unint64_t *)&v325->__shared_owners_;
        do
          v327 = __ldaxr(v326);
        while (__stlxr(v327 - 1, v326));
        if (!v327)
        {
          ((void (*)(std::__shared_weak_count *))v325->__on_zero_shared)(v325);
          std::__shared_weak_count::__release_weak(v325);
        }
      }
      MEMORY[0x212BC6398](v321, 0x10F0C40B62ED6C6);
    }
  }
  v328 = (std::__shared_weak_count *)*((_QWORD *)&v387 + 1);
  if (*((_QWORD *)&v387 + 1))
  {
    v329 = (unint64_t *)(*((_QWORD *)&v387 + 1) + 8);
    do
      v330 = __ldaxr(v329);
    while (__stlxr(v330 - 1, v329));
    if (!v330)
    {
      ((void (*)(std::__shared_weak_count *))v328->__on_zero_shared)(v328);
      std::__shared_weak_count::__release_weak(v328);
    }
  }
  v331 = (std::__shared_weak_count *)object.__r_.__value_.__r.__words[2];
  if (object.__r_.__value_.__r.__words[2])
  {
    v332 = (unint64_t *)(object.__r_.__value_.__r.__words[2] + 8);
    do
      v333 = __ldaxr(v332);
    while (__stlxr(v333 - 1, v332));
    if (!v333)
    {
      ((void (*)(std::__shared_weak_count *))v331->__on_zero_shared)(v331);
      std::__shared_weak_count::__release_weak(v331);
    }
  }
LABEL_497:
  if (v258)
  {
    v334 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v334 = (std::string *)__p.__r_.__value_.__r.__words[0];
    sub_20E8C003C((uint64_t)&v406, "%s", (const char *)v334);
    sub_20E863570((uint64_t)&v406);
  }
  sub_20E863570((uint64_t)&v406);
  v335 = v411;
  if (v411)
  {
    v336 = (unint64_t *)&v411->__shared_owners_;
    do
      v337 = __ldaxr(v336);
    while (__stlxr(v337 - 1, v336));
    if (!v337)
    {
      ((void (*)(std::__shared_weak_count *))v335->__on_zero_shared)(v335);
      std::__shared_weak_count::__release_weak(v335);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v367[0] = *MEMORY[0x24BEDB7F0];
  v338 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v367 + *(_QWORD *)(v367[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v368 = v338;
  v369 = MEMORY[0x24BEDB848] + 16;
  if (v375 < 0)
    operator delete(v374);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x212BC6290](v378);
}

void sub_20FBE091C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a69;
  uint64_t v69;

  if (*(_BYTE *)(v69 - 168) && *(char *)(v69 - 169) < 0)
    operator delete(*(void **)(v69 - 192));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a59);
  if (SLOBYTE(STACK[0x35F]) < 0)
  {
    operator delete((void *)STACK[0x348]);
    sub_20E863784((uint64_t)&a69);
    sub_20F89E908((uint64_t)&STACK[0x360]);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&a69);
  sub_20F89E908((uint64_t)&STACK[0x360]);
  _Unwind_Resume(a1);
}

uint64_t sub_20FBE0D94(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  std::string::size_type v3;
  std::string::size_type v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  __CLPK_doublereal *v10;
  int v11;
  int v12;
  double *v13;
  double *__B;
  uint64_t __lda;
  uint64_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  double *v25;
  int v26;
  int v27;
  uint64_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  uint64_t v35;
  int64x2_t *v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  int8x16_t v54;
  float64x2_t v55;
  int8x16_t v56;
  unint64_t v57;
  int8x16_t v58;
  unint64_t v59;
  float64x2_t v60;
  float64x2_t *v61;
  float64x2_t v62;
  float64x2_t *v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t *v66;
  float64x2_t v67;
  float64x2_t *v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t *v71;
  float64x2_t v72;
  float64x2_t *v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t *v76;
  float64x2_t v77;
  float64x2_t *v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t *v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t *v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  int64x2_t *v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  int64x2_t *v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  int64x2_t *v210;
  float64x2_t v211;
  float64x2_t v213;
  float64x2_t v219;
  float64x2_t v221;
  float64x2_t v222;
  __int128 v224;
  float64x2_t v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  float64x2_t v255;
  float64x2_t v256;
  float64x2_t v257;
  float64x2_t v258;
  float64x2_t v259;
  float64x2_t v260;
  float64x2_t v261;
  float64x2_t v262;
  float64x2_t v263;
  float64x2_t v264;
  float64x2_t v265;
  float64x2_t v266;
  float64x2_t v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  float64x2_t v271;
  float64x2_t v272;
  float64x2_t v273;
  float64x2_t v274;
  float64x2_t v275;
  float64x2_t v276;
  float64x2_t v277;
  float64x2_t v278;
  float64x2_t v279;
  float64x2_t v280;
  float64x2_t v281;
  float64x2_t v282;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  unint64_t v286;
  uint64_t v287;
  double *v288;
  int v289;
  int v290;
  uint64_t v291;
  uint64_t v292;
  int64x2_t *v293;
  float64x2_t v294;
  float64x2_t v295;
  float64x2_t v296;
  float64x2_t v297;
  float64x2_t v298;
  float64x2_t v299;
  int8x16_t v300;
  int8x16_t v301;
  unint64_t v302;
  int8x16_t v303;
  unint64_t v304;
  unint64_t v305;
  int8x16_t v306;
  unint64_t v307;
  unint64_t v308;
  int8x16_t v309;
  int8x16_t v310;
  unint64_t v311;
  unint64_t v312;
  int8x16_t v313;
  float64x2_t v314;
  int64x2_t *v315;
  float64x2_t v316;
  float64x2_t v317;
  float64x2_t v318;
  float64x2_t *v319;
  float64x2_t v320;
  float64x2_t v321;
  float64x2_t *v322;
  float64x2_t v323;
  float64x2_t *v324;
  float64x2_t v325;
  float64x2_t *v326;
  float64x2_t v327;
  float64x2_t *v328;
  float64x2_t v329;
  float64x2_t v330;
  float64x2_t v331;
  float64x2_t v332;
  float64x2_t v333;
  float64x2_t v334;
  float64x2_t v335;
  float64x2_t v336;
  float64x2_t v337;
  float64x2_t v338;
  float64x2_t v339;
  float64x2_t v340;
  float64x2_t v341;
  float64x2_t v342;
  float64x2_t v343;
  float64x2_t v344;
  float64x2_t v345;
  float64x2_t *v346;
  float64x2_t v347;
  float64x2_t v348;
  float64x2_t *v349;
  float64x2_t v350;
  float64x2_t v351;
  float64x2_t *v352;
  float64x2_t *v353;
  float64x2_t *v354;
  float64x2_t *v355;
  float64x2_t *v356;
  float64x2_t *v357;
  float64x2_t *v358;
  float64x2_t *v359;
  float64x2_t *v360;
  float64x2_t v361;
  float64x2_t v362;
  float64x2_t v363;
  float64x2_t v364;
  float64x2_t v365;
  float64x2_t v366;
  float64x2_t v367;
  float64x2_t v368;
  float64x2_t v369;
  float64x2_t v370;
  float64x2_t v371;
  float64x2_t v372;
  float64x2_t v373;
  float64x2_t v374;
  float64x2_t v375;
  float64x2_t v376;
  float64x2_t v377;
  int64x2_t *v378;
  float64x2_t v379;
  float64x2_t v380;
  float64x2_t v381;
  float64x2_t v382;
  float64x2_t v383;
  float64x2_t v384;
  float64x2_t v385;
  float64x2_t v386;
  float64x2_t v387;
  float64x2_t v388;
  float64x2_t v389;
  float64x2_t v390;
  float64x2_t v391;
  float64x2_t v392;
  float64x2_t v393;
  float64x2_t v394;
  float64x2_t v395;
  float64x2_t v396;
  float64x2_t v397;
  float64x2_t v398;
  float64x2_t v399;
  float64x2_t v400;
  float64x2_t v401;
  float64x2_t v402;
  float64x2_t v403;
  float64x2_t v404;
  float64x2_t v405;
  float64x2_t v406;
  float64x2_t v407;
  float64x2_t v408;
  float64x2_t v409;
  float64x2_t v410;
  float64x2_t v411;
  float64x2_t v412;
  float64x2_t v413;
  float64x2_t v414;
  float64x2_t v415;
  float64x2_t v416;
  float64x2_t v417;
  float64x2_t v418;
  float64x2_t v419;
  float64x2_t v420;
  int64x2_t *v421;
  float64x2_t v422;
  float64x2_t v423;
  float64x2_t v424;
  float64x2_t v425;
  float64x2_t v426;
  float64x2_t v427;
  float64x2_t v428;
  float64x2_t v429;
  float64x2_t v430;
  float64x2_t v431;
  float64x2_t v432;
  float64x2_t v433;
  float64x2_t v434;
  float64x2_t v435;
  float64x2_t v436;
  float64x2_t v437;
  float64x2_t v438;
  float64x2_t v439;
  float64x2_t v440;
  float64x2_t v441;
  float64x2_t v442;
  float64x2_t v443;
  float64x2_t v444;
  float64x2_t v445;
  float64x2_t v446;
  float64x2_t v447;
  float64x2_t v448;
  float64x2_t v449;
  float64x2_t v450;
  float64x2_t v451;
  float64x2_t v452;
  float64x2_t v453;
  float64x2_t v454;
  float64x2_t v455;
  float64x2_t v456;
  float64x2_t v457;
  float64x2_t v458;
  float64x2_t v459;
  float64x2_t v460;
  float64x2_t v461;
  float64x2_t v462;
  float64x2_t v463;
  float64x2_t v464;
  float64x2_t v465;
  float64x2_t v466;
  float64x2_t v467;
  float64x2_t v468;
  float64x2_t v469;
  float64x2_t v470;
  int64x2_t *v471;
  float64x2_t v472;
  float64x2_t v473;
  float64x2_t v474;
  float64x2_t v475;
  float64x2_t v476;
  float64x2_t v477;
  float64x2_t v478;
  float64x2_t v479;
  float64x2_t v480;
  float64x2_t v481;
  float64x2_t v482;
  float64x2_t v483;
  float64x2_t v484;
  float64x2_t v485;
  float64x2_t v486;
  float64x2_t v487;
  float64x2_t v488;
  float64x2_t v489;
  float64x2_t v490;
  float64x2_t v492;
  float64x2_t v493;
  float64x2_t v494;
  float64x2_t v495;
  float64x2_t v496;
  float64x2_t v497;
  float64x2_t v501;
  float64x2_t v502;
  float64x2_t v503;
  float64x2_t v504;
  float64x2_t v505;
  float64x2_t v506;
  float64x2_t v507;
  float64x2_t v508;
  int64x2_t *v509;
  float64x2_t v511;
  float64x2_t v512;
  float64x2_t v514;
  float64x2_t v515;
  float64x2_t v516;
  float64x2_t v518;
  float64x2_t v520;
  float64x2_t v522;
  float64x2_t v524;
  float64x2_t v525;
  float64x2_t v526;
  float64x2_t v527;
  float64x2_t v528;
  float64x2_t v529;
  float64x2_t v530;
  int8x16_t v532;
  int8x16_t v533;
  int8x16_t v534;
  int8x16_t v535;
  unint64_t v536;
  uint64_t v537;
  double *v538;
  int v539;
  int v540;
  uint64_t v541;
  uint64_t v542;
  int64x2_t *v543;
  float64x2_t v544;
  float64x2_t v545;
  float64x2_t v546;
  float64x2_t v547;
  float64x2_t v548;
  float64x2_t v549;
  float64x2_t v550;
  float64x2_t v551;
  float64x2_t v552;
  float64x2_t v553;
  float64x2_t v554;
  float64x2_t v555;
  float64x2_t v556;
  float64x2_t v557;
  float64x2_t v558;
  float64x2_t v559;
  float64x2_t v560;
  float64x2_t v561;
  float64x2_t v562;
  float64x2_t v563;
  float64x2_t v564;
  float64x2_t v565;
  float64x2_t v566;
  float64x2_t v567;
  float64x2_t v568;
  float64x2_t v569;
  float64x2_t v570;
  float64x2_t v571;
  float64x2_t v572;
  float64x2_t *v573;
  float64x2_t v574;
  float64x2_t *v575;
  float64x2_t v576;
  float64x2_t v577;
  float64x2_t *v578;
  float64x2_t v579;
  float64x2_t *v580;
  float64x2_t v581;
  float64x2_t v582;
  float64x2_t *v583;
  float64x2_t v584;
  float64x2_t *v585;
  float64x2_t v586;
  float64x2_t *v587;
  float64x2_t v588;
  float64x2_t *v589;
  float64x2_t v590;
  float64x2_t *v591;
  float64x2_t v592;
  float64x2_t *v593;
  float64x2_t v594;
  float64x2_t *v595;
  float64x2_t v596;
  float64x2_t *v597;
  float64x2_t v598;
  float64x2_t v599;
  float64x2_t v600;
  float64x2_t v601;
  float64x2_t v602;
  float64x2_t v603;
  float64x2_t v604;
  float64x2_t v605;
  float64x2_t v606;
  float64x2_t v607;
  float64x2_t v608;
  float64x2_t v609;
  float64x2_t v610;
  float64x2_t v611;
  float64x2_t v612;
  float64x2_t v613;
  float64x2_t v614;
  float64x2_t v615;
  float64x2_t v616;
  float64x2_t v617;
  float64x2_t v618;
  float64x2_t v619;
  float64x2_t *v620;
  float64x2_t *v621;
  float64x2_t *v622;
  float64x2_t *v623;
  float64x2_t *v624;
  float64x2_t *v625;
  float64x2_t *v626;
  float64x2_t v627;
  float64x2_t v628;
  float64x2_t v629;
  float64x2_t v630;
  float64x2_t v631;
  float64x2_t v632;
  float64x2_t v633;
  int64x2_t *v634;
  float64x2_t v635;
  float64x2_t v636;
  float64x2_t v637;
  float64x2_t v638;
  float64x2_t v639;
  float64x2_t v640;
  float64x2_t v641;
  float64x2_t v642;
  float64x2_t v643;
  float64x2_t v644;
  float64x2_t v645;
  float64x2_t v646;
  float64x2_t v647;
  float64x2_t v648;
  float64x2_t v649;
  float64x2_t v650;
  float64x2_t v651;
  float64x2_t v652;
  float64x2_t v653;
  float64x2_t v654;
  float64x2_t v655;
  float64x2_t v656;
  float64x2_t v657;
  float64x2_t v658;
  float64x2_t v659;
  float64x2_t v660;
  float64x2_t v661;
  float64x2_t v662;
  float64x2_t v663;
  float64x2_t v664;
  float64x2_t v665;
  float64x2_t v666;
  float64x2_t v667;
  float64x2_t v668;
  float64x2_t v669;
  float64x2_t v670;
  float64x2_t v671;
  int64x2_t *v672;
  float64x2_t v673;
  float64x2_t v674;
  float64x2_t v675;
  float64x2_t v676;
  float64x2_t v677;
  float64x2_t v678;
  float64x2_t v679;
  float64x2_t v680;
  float64x2_t v681;
  float64x2_t v682;
  float64x2_t v683;
  float64x2_t v684;
  float64x2_t v685;
  float64x2_t v686;
  float64x2_t v687;
  float64x2_t v688;
  float64x2_t v689;
  float64x2_t v690;
  float64x2_t v691;
  float64x2_t v692;
  float64x2_t v693;
  float64x2_t v694;
  float64x2_t v695;
  float64x2_t v696;
  float64x2_t v697;
  float64x2_t v698;
  float64x2_t v699;
  float64x2_t v700;
  float64x2_t v701;
  float64x2_t v702;
  float64x2_t v703;
  float64x2_t v704;
  float64x2_t v705;
  float64x2_t v706;
  float64x2_t v707;
  float64x2_t v708;
  float64x2_t v709;
  float64x2_t v710;
  float64x2_t v711;
  float64x2_t v712;
  float64x2_t v713;
  float64x2_t v714;
  float64x2_t v715;
  float64x2_t v716;
  float64x2_t v717;
  float64x2_t v718;
  float64x2_t v719;
  float64x2_t v720;
  float64x2_t v721;
  float64x2_t v722;
  float64x2_t v723;
  float64x2_t v724;
  float64x2_t v725;
  float64x2_t v726;
  float64x2_t v727;
  float64x2_t v728;
  float64x2_t v729;
  int64x2_t *v730;
  float64x2_t v731;
  float64x2_t v732;
  float64x2_t v733;
  float64x2_t v734;
  float64x2_t v735;
  float64x2_t v736;
  float64x2_t v737;
  float64x2_t v738;
  float64x2_t v739;
  float64x2_t v740;
  float64x2_t v741;
  float64x2_t v742;
  float64x2_t v743;
  float64x2_t v744;
  float64x2_t v745;
  float64x2_t v746;
  float64x2_t v747;
  float64x2_t v748;
  float64x2_t v749;
  float64x2_t v750;
  float64x2_t v751;
  float64x2_t v752;
  float64x2_t v753;
  float64x2_t v754;
  float64x2_t v755;
  float64x2_t v756;
  float64x2_t v757;
  float64x2_t v758;
  float64x2_t v759;
  float64x2_t v760;
  float64x2_t v761;
  float64x2_t v762;
  float64x2_t v763;
  float64x2_t v764;
  float64x2_t v765;
  float64x2_t v766;
  float64x2_t v767;
  float64x2_t v768;
  float64x2_t v769;
  float64x2_t v770;
  int64x2_t *v771;
  float64x2_t v772;
  float64x2_t v773;
  float64x2_t v774;
  float64x2_t v775;
  float64x2_t v776;
  float64x2_t v777;
  float64x2_t v778;
  float64x2_t v779;
  float64x2_t v780;
  float64x2_t v781;
  float64x2_t v782;
  float64x2_t v783;
  float64x2_t v784;
  float64x2_t v785;
  float64x2_t v786;
  float64x2_t v787;
  float64x2_t v788;
  float64x2_t v789;
  float64x2_t v790;
  float64x2_t v791;
  float64x2_t v792;
  int64x2_t *v793;
  float64x2_t v794;
  float64x2_t v795;
  float64x2_t v796;
  double *p_p;
  uint64_t v799;
  uint64_t j;
  unint64_t v801;
  float64x2_t *v802;
  float64x2_t v803;
  uint64_t v804;
  double v805;
  unint64_t i;
  float64x2_t *v807;
  float64x2_t v808;
  int v809;
  unint64_t v810;
  uint64_t v811;
  uint64_t v813;
  uint64_t *v814;
  double *v815;
  char *v816;
  int v817;
  unint64_t v818;
  uint64_t v819;
  std::runtime_error *v820;
  uint64_t v821;
  uint64_t *v822;
  double *v823;
  char *v824;
  unsigned __int8 v825;
  char ***v826;
  const char *v827;
  NSObject *v828;
  std::runtime_error *exception;
  unsigned __int8 v830;
  char ***v831;
  const char *v832;
  NSObject *v833;
  float64x2_t v834;
  float64x2_t v835;
  float64x2_t v836;
  float64x2_t v837;
  float64x2_t v838;
  float64x2_t v839;
  float64x2_t v840;
  float64x2_t v841;
  float64x2_t v842;
  float64x2_t v843;
  float64x2_t v844;
  float64x2_t v845;
  float64x2_t v846;
  float64x2_t v847;
  float64x2_t v848;
  float64x2_t v849;
  float64x2_t v850;
  float64x2_t v851;
  float64x2_t v852;
  float64x2_t v853;
  float64x2_t v854;
  float64x2_t v855;
  float64x2_t v856;
  float64x2_t v857;
  float64x2_t v858;
  float64x2_t v859;
  float64x2_t v860;
  float64x2_t v861;
  float64x2_t v862;
  float64x2_t v863;
  float64x2_t v864;
  float64x2_t v865;
  float64x2_t v866;
  float64x2_t v867;
  float64x2_t v868;
  float64x2_t v869;
  float64x2_t v870;
  float64x2_t v871;
  float64x2_t v872;
  float64x2_t v873;
  float64x2_t v874;
  float64x2_t v875;
  float64x2_t v876;
  float64x2_t v877;
  float64x2_t v878;
  float64x2_t v879;
  float64x2_t v880;
  float64x2_t v881;
  float64x2_t v882;
  float64x2_t v883;
  float64x2_t v884;
  float64x2_t v885;
  float64x2_t v886;
  float64x2_t v887;
  float64x2_t v888;
  float64x2_t v889;
  float64x2_t v890;
  float64x2_t v891;
  float64x2_t v892;
  float64x2_t v893;
  unint64_t v894;
  float64x2_t v895;
  unint64_t v896;
  unint64_t v897;
  float64x2_t v898;
  float64x2_t v899;
  unint64_t v900;
  float64x2_t v901;
  unint64_t v902;
  float64x2_t v903;
  unint64_t v904;
  float64x2_t v905;
  unint64_t v906;
  float64x2_t v907;
  float64x2_t v908;
  float64x2_t v909;
  uint64_t v910;
  float64x2_t v911;
  uint64_t v912;
  float64x2_t v913;
  uint64_t v914;
  float64x2_t v915;
  float64x2_t v916;
  float64x2_t v917;
  uint64_t v918;
  float64x2_t v919;
  float64x2_t v920;
  float64x2_t v921;
  float64x2_t v922;
  float64x2_t v923;
  uint64_t v924;
  float64x2_t v925;
  uint64_t v926;
  float64x2_t v927;
  float64x2_t v928;
  float64x2_t v929;
  float64x2_t v930;
  float64x2_t v931;
  float64x2_t v932;
  float64x2_t v933;
  float64x2_t v934;
  float64x2_t v935;
  float64x2_t v936;
  float64x2_t v937;
  float64x2_t v938;
  float64x2_t v939;
  float64x2_t v940;
  float64x2_t v941;
  unint64_t v942;
  float64x2_t v943;
  unint64_t v944;
  float64x2_t v945;
  unint64_t v946;
  float64x2_t v947;
  uint64_t v948;
  float64x2_t v949;
  int8x16_t v950;
  float64x2_t v951;
  int8x16_t v952;
  float64x2_t v953;
  int8x16_t v954;
  float64x2_t v955;
  float64x2_t v956;
  float64x2_t v957;
  float64x2_t v958;
  float64x2_t v959;
  float64x2_t v960;
  float64x2_t v961;
  float64x2_t v962;
  float64x2_t v963;
  float64x2_t v964;
  float64x2_t v965;
  float64x2_t v966;
  float64x2_t v967;
  float64x2_t v968;
  float64x2_t v969;
  float64x2_t v970;
  float64x2_t v971;
  float64x2_t v972;
  float64x2_t v973;
  float64x2_t v974;
  float64x2_t v975;
  float64x2_t v976;
  float64x2_t v977;
  float64x2_t v978;
  float64x2_t v979;
  float64x2_t v980;
  float64x2_t v981;
  float64x2_t v982;
  float64x2_t v983;
  float64x2_t v984;
  float64x2_t v985;
  float64x2_t v986;
  float64x2_t v987;
  float64x2_t v988;
  float64x2_t v989;
  float64x2_t v990;
  float64x2_t v991;
  float64x2_t v992;
  float64x2_t v993;
  float64x2_t v994;
  float64x2_t v995;
  float64x2_t v996;
  float64x2_t v997;
  float64x2_t v998;
  float64x2_t v999;
  float64x2_t v1000;
  float64x2_t v1001;
  float64x2_t v1002;
  float64x2_t v1003;
  float64x2_t v1004;
  float64x2_t v1005;
  float64x2_t v1006;
  float64x2_t v1007;
  float64x2_t v1008;
  float64x2_t v1009;
  float64x2_t v1010;
  float64x2_t v1011;
  float64x2_t v1012;
  float64x2_t v1013;
  float64x2_t v1014;
  float64x2_t v1015;
  float64x2_t v1016;
  float64x2_t v1017;
  float64x2_t v1018;
  float64x2_t v1019;
  float64x2_t v1020;
  float64x2_t v1021;
  float64x2_t v1022;
  __int128 v1023;
  float64x2_t v1024;
  float64x2_t v1025;
  float64x2_t v1026;
  __int128 v1027;
  float64x2_t v1028;
  float64x2_t v1029;
  float64x2_t v1030;
  float64x2_t v1031;
  __int128 v1032;
  float64x2_t v1033;
  float64x2_t v1034;
  float64x2_t v1035;
  float64x2_t v1036;
  __int128 v1037;
  float64x2_t v1038;
  float64x2_t v1039;
  float64x2_t v1040;
  float64x2_t v1041;
  __int128 v1042;
  float64x2_t v1043;
  float64x2_t v1044;
  float64x2_t v1045;
  float64x2_t v1046;
  __int128 v1047;
  float64x2_t v1048;
  float64x2_t v1049;
  float64x2_t v1050;
  float64x2_t v1051;
  __int128 v1052;
  float64x2_t v1053;
  float64x2_t v1054;
  float64x2_t v1055;
  unint64_t v1056;
  __int128 v1057;
  float64x2_t v1058;
  float64x2_t v1059;
  float64x2_t v1060;
  unint64_t v1061;
  __int128 v1062;
  float64x2_t v1063;
  float64x2_t v1064;
  float64x2_t v1065;
  uint64_t v1066;
  __int128 v1067;
  float64x2_t v1068;
  float64x2_t v1069;
  float64x2_t v1070;
  uint64_t v1071;
  __int128 v1072;
  float64x2_t v1073;
  float64x2_t v1074;
  float64x2_t v1075;
  uint64_t v1076;
  __int128 v1077;
  float64x2_t v1078;
  float64x2_t v1079;
  float64x2_t v1080;
  float64x2_t v1081;
  __int128 v1082;
  float64x2_t v1083;
  float64x2_t v1084;
  float64x2_t v1085;
  float64x2_t v1086;
  __int128 v1087;
  float64x2_t v1088;
  float64x2_t v1089;
  float64x2_t v1090;
  float64x2_t v1091;
  __int128 v1092;
  float64x2_t v1093;
  float64x2_t v1094;
  float64x2_t v1095;
  float64x2_t v1096;
  __int128 v1097;
  float64x2_t v1098;
  float64x2_t v1099;
  float64x2_t v1100;
  float64x2_t v1101;
  __int128 v1102;
  float64x2_t v1103;
  float64x2_t v1104;
  float64x2_t v1105;
  float64x2_t v1106;
  __int128 v1107;
  float64x2_t v1108;
  float64x2_t v1109;
  float64x2_t v1110;
  float64x2_t v1111;
  __int128 v1112;
  float64x2_t v1113;
  float64x2_t v1114;
  float64x2_t v1115;
  float64x2_t v1116;
  __int128 v1117;
  float64x2_t v1118;
  float64x2_t v1119;
  float64x2_t v1120;
  float64x2_t v1121;
  __int128 v1122;
  float64x2_t v1123;
  float64x2_t v1124;
  float64x2_t v1125;
  float64x2_t v1126;
  __int128 v1127;
  float64x2_t v1128;
  float64x2_t v1129;
  float64x2_t v1130;
  unint64_t v1131;
  __int128 v1132;
  float64x2_t v1133;
  float64x2_t v1134;
  float64x2_t v1135;
  float64x2_t v1136;
  __int128 v1137;
  float64x2_t v1138;
  float64x2_t v1139;
  float64x2_t v1140;
  float64x2_t v1141;
  __int128 v1142;
  float64x2_t v1143;
  float64x2_t v1144;
  float64x2_t v1145;
  float64x2_t v1146;
  __int128 v1147;
  float64x2_t v1148;
  float64x2_t v1149;
  float64x2_t v1150;
  float64x2_t v1151;
  __int128 v1152;
  float64x2_t v1153;
  float64x2_t v1154;
  float64x2_t v1155;
  float64x2_t v1156;
  __int128 v1157;
  float64x2_t v1158;
  float64x2_t v1159;
  float64x2_t v1160;
  float64x2_t v1161;
  __int128 v1162;
  float64x2_t v1163;
  float64x2_t v1164;
  float64x2_t v1165;
  float64x2_t v1166;
  __int128 v1167;
  float64x2_t v1168;
  float64x2_t v1169;
  float64x2_t v1170;
  float64x2_t v1171;
  __int128 v1172;
  float64x2_t v1173;
  float64x2_t v1174;
  float64x2_t v1175;
  float64x2_t v1176;
  __int128 v1177;
  float64x2_t v1178;
  float64x2_t v1179;
  float64x2_t v1180;
  float64x2_t v1181;
  __int128 v1182;
  float64x2_t v1183;
  float64x2_t v1184;
  float64x2_t v1185;
  float64x2_t v1186;
  __int128 v1187;
  float64x2_t v1188;
  float64x2_t v1189;
  float64x2_t v1190;
  float64x2_t v1191;
  __int128 v1192;
  float64x2_t v1193;
  float64x2_t v1194;
  float64x2_t v1195;
  float64x2_t v1196;
  __int128 v1197;
  float64x2_t v1198;
  float64x2_t v1199;
  float64x2_t v1200;
  float64x2_t v1201;
  __int128 v1202;
  float64x2_t v1203;
  float64x2_t v1204;
  float64x2_t v1205;
  float64x2_t v1206;
  __int128 v1207;
  float64x2_t v1208;
  float64x2_t v1209;
  float64x2_t v1210;
  float64x2_t v1211;
  __int128 v1212;
  float64x2_t v1213;
  float64x2_t v1214;
  float64x2_t v1215;
  float64x2_t v1216;
  __int128 v1217;
  float64x2_t v1218;
  float64x2_t v1219;
  float64x2_t v1220;
  float64x2_t v1221;
  __int128 v1222;
  float64x2_t v1223;
  float64x2_t v1224;
  float64x2_t v1225;
  float64x2_t v1226;
  __int128 v1227;
  float64x2_t v1228;
  float64x2_t v1229;
  float64x2_t v1230;
  float64x2_t v1231;
  __int128 v1232;
  float64x2_t v1233;
  float64x2_t v1234;
  float64x2_t v1235;
  float64x2_t v1236;
  __int128 v1237;
  float64x2_t v1238;
  float64x2_t v1239;
  float64x2_t v1240;
  float64x2_t v1241;
  __int128 v1242;
  float64x2_t v1243;
  float64x2_t v1244;
  float64x2_t v1245;
  float64x2_t v1246;
  __int128 v1247;
  float64x2_t v1248;
  float64x2_t v1249;
  float64x2_t v1250;
  float64x2_t v1251;
  __int128 v1252;
  float64x2_t v1253;
  float64x2_t v1254;
  float64x2_t v1255;
  float64x2_t v1256;
  __int128 v1257;
  float64x2_t v1258;
  float64x2_t v1259;
  float64x2_t v1260;
  float64x2_t v1261;
  __int128 v1262;
  float64x2_t v1263;
  float64x2_t v1264;
  float64x2_t v1265;
  float64x2_t v1266;
  __int128 v1267;
  float64x2_t v1268;
  float64x2_t v1269;
  float64x2_t v1270;
  float64x2_t v1271;
  __int128 v1272;
  float64x2_t v1273;
  float64x2_t v1274;
  float64x2_t v1275;
  float64x2_t v1276;
  __int128 v1277;
  float64x2_t v1278;
  float64x2_t v1279;
  float64x2_t v1280;
  float64x2_t v1281;
  __int128 v1282;
  float64x2_t v1283;
  float64x2_t v1284;
  float64x2_t v1285;
  float64x2_t v1286;
  __int128 v1287;
  float64x2_t v1288;
  float64x2_t v1289;
  float64x2_t v1290;
  float64x2_t v1291;
  __int128 v1292;
  float64x2_t v1293;
  float64x2_t v1294;
  float64x2_t v1295;
  float64x2_t v1296;
  __int128 v1297;
  float64x2_t v1298;
  float64x2_t v1299;
  float64x2_t v1300;
  float64x2_t v1301;
  __int128 v1302;
  float64x2_t v1303;
  float64x2_t v1304;
  float64x2_t v1305;
  float64x2_t v1306;
  __int128 v1307;
  float64x2_t v1308;
  float64x2_t v1309;
  float64x2_t v1310;
  float64x2_t v1311;
  __int128 v1312;
  float64x2_t v1313;
  float64x2_t v1314;
  float64x2_t v1315;
  float64x2_t v1316;
  __int128 v1317;
  float64x2_t v1318;
  float64x2_t v1319;
  float64x2_t v1320;
  float64x2_t v1321;
  __int128 v1322;
  float64x2_t v1323;
  float64x2_t v1324;
  float64x2_t v1325;
  float64x2_t v1326;
  __int128 v1327;
  float64x2_t v1328;
  float64x2_t v1329;
  float64x2_t v1330;
  float64x2_t v1331;
  __int128 v1332;
  float64x2_t v1333;
  float64x2_t v1334;
  float64x2_t v1335;
  float64x2_t v1336;
  __int128 v1337;
  float64x2_t v1338;
  float64x2_t v1339;
  float64x2_t v1340;
  float64x2_t v1341;
  __int128 v1342;
  float64x2_t v1343;
  float64x2_t v1344;
  float64x2_t v1345;
  float64x2_t v1346;
  __int128 v1347;
  float64x2_t v1348;
  float64x2_t v1349;
  float64x2_t v1350;
  float64x2_t v1351;
  __int128 v1352;
  float64x2_t v1353;
  float64x2_t v1354;
  float64x2_t v1355;
  float64x2_t v1356;
  __int128 v1357;
  float64x2_t v1358;
  float64x2_t v1359;
  float64x2_t v1360;
  float64x2_t v1361;
  __int128 v1362;
  float64x2_t v1363;
  float64x2_t v1364;
  float64x2_t v1365;
  float64x2_t v1366;
  __int128 v1367;
  float64x2_t v1368;
  float64x2_t v1369;
  float64x2_t v1370;
  float64x2_t v1371;
  __int128 v1372;
  float64x2_t v1373;
  float64x2_t v1374;
  float64x2_t v1375;
  float64x2_t v1376;
  __int128 v1377;
  float64x2_t v1378;
  float64x2_t v1379;
  float64x2_t v1380;
  float64x2_t v1381;
  __int128 v1382;
  float64x2_t v1383;
  float64x2_t v1384;
  float64x2_t v1385;
  float64x2_t v1386;
  __int128 v1387;
  float64x2_t v1388;
  float64x2_t v1389;
  float64x2_t v1390;
  float64x2_t v1391;
  __int128 v1392;
  float64x2_t v1393;
  float64x2_t v1394;
  float64x2_t v1395;
  float64x2_t v1396;
  __int128 v1397;
  float64x2_t v1398;
  float64x2_t v1399;
  float64x2_t v1400;
  float64x2_t v1401;
  __int128 v1402;
  float64x2_t v1403;
  float64x2_t v1404;
  float64x2_t v1405;
  float64x2_t v1406;
  __int128 v1407;
  float64x2_t v1408;
  float64x2_t v1409;
  float64x2_t v1410;
  float64x2_t v1411;
  __int128 v1412;
  float64x2_t v1413;
  float64x2_t v1414;
  float64x2_t v1415;
  float64x2_t v1416;
  __int128 v1417;
  float64x2_t v1418;
  float64x2_t v1419;
  float64x2_t v1420;
  float64x2_t v1421;
  float64x2_t v1422;
  float64x2_t v1423;
  float64x2_t v1424;
  char *category;
  double *v1426;
  int v1427;
  char **p_category;
  int v1429;
  float64x2_t v1430;
  __int128 v1431;
  __int128 v1432;
  __int128 v1433;
  __int128 v1434;
  __int128 v1435;
  __int128 v1436;
  __int128 v1437;
  __int128 v1438;
  __int128 v1439;
  __int128 v1440;
  __int128 v1441;
  __int128 v1442;
  __int128 v1443;
  __int128 v1444;
  __int128 v1445;
  __int128 v1446;
  __int128 v1447;
  __int128 v1448;
  __int128 v1449;
  __int128 v1450;
  __int128 v1451;
  __int128 v1452;
  __int128 v1453;
  __int128 v1454;
  __int128 v1455;
  __int128 v1456;
  __int128 v1457;
  __int128 v1458;
  __int128 v1459;
  __int128 v1460;
  __int128 v1461;
  __int128 v1462;
  __int128 v1463;
  __int128 v1464;
  __int128 v1465;
  __int128 v1466;
  __int128 v1467;
  __int128 v1468;
  __int128 v1469;
  __int128 v1470;
  __int128 v1471;
  __int128 v1472;
  __int128 v1473;
  __int128 v1474;
  __int128 v1475;
  __int128 v1476;
  __int128 v1477;
  __int128 v1478;
  __int128 v1479;
  __int128 v1480;
  __int128 v1481;
  __int128 v1482;
  __int128 v1483;
  __int128 v1484;
  __int128 v1485;
  __int128 v1486;
  __int128 v1487;
  __int128 v1488;
  __int128 v1489;
  __int128 v1490;
  __int128 v1491;
  __int128 v1492;
  __int128 v1493;
  __int128 v1494;
  __int128 v1495;
  __int128 v1496;
  __int128 v1497;
  __int128 v1498;
  __int128 v1499;
  __int128 v1500;
  __int128 v1501;
  __int128 v1502;
  __int128 v1503;
  __int128 v1504;
  __int128 v1505;
  __int128 v1506;
  __int128 v1507;
  __int128 v1508;
  __int128 v1509;
  __int128 v1510;
  __int128 v1511;
  float64x2_t v1512;
  __int128 v1513;
  __int128 v1514;
  __int128 v1515;
  __int128 v1516;
  __int128 v1517;
  __int128 v1518;
  __int128 v1519;
  __int128 v1520;
  __int128 v1521;
  __int128 v1522;
  __int128 v1523;
  __int128 v1524;
  __int128 v1525;
  __int128 v1526;
  __int128 v1527;
  __int128 v1528;
  __int128 v1529;
  __int128 v1530;
  __int128 v1531;
  __int128 v1532;
  __int128 v1533;
  __int128 v1534;
  __int128 v1535;
  __int128 v1536;
  __int128 v1537;
  __int128 v1538;
  __int128 v1539;
  __int128 v1540;
  __int128 v1541;
  uint64_t v1542;
  const char *v1543;
  char ***p_p_category;
  char **v1545;
  uint64_t v1546;
  std::string __p;
  float64x2_t v1548;
  float64x2_t v1549[110];
  float64_t v1550;
  uint64_t v1551;
  uint64_t v1552;
  uint64_t v1553;

  MEMORY[0x24BDAC7A8](a1);
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v1553 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)v5;
  v8 = *(_DWORD *)(v5 + 20);
  LOBYTE(category) = 117;
  LODWORD(v1430.f64[0]) = v8;
  LODWORD(v1543) = -1;
  __p.__r_.__value_.__r.__words[0] = 0x100000001;
  sub_20E83455C(&__p, (uint64_t)&category, (int *)&v1430, v7, (int *)&v1430, (int *)&v1543);
  v9 = (int)v1543;
  v1429 = (int)v1543;
  if ((_DWORD)v1543)
  {
    sub_20F9B2A4C(&p_category);
    if (*(int *)p_category[7] <= 4)
    {
      v809 = *((unsigned __int8 *)p_category + 72);
      v810 = sub_20E8C31DC((uint64_t)p_category, "OSLogSurrogateAppender", 1, 0);
      v811 = v810 ? v810 + 16 : 0;
      if (v809 || v810 != 0)
      {
        *(_QWORD *)&v1430.f64[0] = &p_category;
        *(std::chrono::steady_clock::time_point *)&v1430.f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
        *(std::chrono::system_clock::time_point *)&v1431 = std::chrono::system_clock::now();
        DWORD2(v1431) = 4;
        *(_QWORD *)&v1432 = "unknown file";
        DWORD2(v1432) = 3373;
        *(_QWORD *)&v1434 = 0;
        *(_QWORD *)&v1433 = "unknown function";
        *((_QWORD *)&v1433 + 1) = 0;
        v813 = **(_QWORD **)&v1430.f64[0];
        v814 = (uint64_t *)(**(_QWORD **)&v1430.f64[0] + 16);
        if (*(char *)(**(_QWORD **)&v1430.f64[0] + 39) < 0)
        {
          v816 = *(char **)(v813 + 16);
          v815 = *(double **)(v813 + 24);
        }
        else
        {
          v815 = (double *)*(unsigned __int8 *)(**(_QWORD **)&v1430.f64[0] + 39);
          v816 = (char *)(**(_QWORD **)&v1430.f64[0] + 16);
        }
        category = v816;
        v1426 = v815;
        v825 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v825 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)&__p);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&__p);
          if (LOBYTE(v1548.f64[0]) && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        v826 = (char ***)byte_254A4A4F8[23];
        if (byte_254A4A4F8[23] >= 0)
        {
          v827 = byte_254A4A4F8;
        }
        else
        {
          v826 = *(char ****)&byte_254A4A4F8[8];
          v827 = *(const char **)byte_254A4A4F8;
        }
        v1543 = v827;
        p_p_category = v826;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v827, category);
        sub_20E86E5A8(&__p.__r_.__value_.__l.__size_, (uint64_t)&v1543);
        sub_20E86E5A8(v1549, (uint64_t)&category);
        v828 = __p.__r_.__value_.__r.__words[0];
        sub_20E86E44C((uint64_t)&__p);
        sub_20FBF610C(v811, v814, v828, OS_LOG_TYPE_ERROR, &v1429);
        v9 = v1429;
        if (v809)
        {
          sub_20E8C003C((uint64_t)&v1430, "Failed to factorize the marginalized component of the information matrix (result = %d).", v1429);
          sub_20E863570((uint64_t)&v1430);
        }
        sub_20E863714((uint64_t)&v1430);
      }
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string((std::string *)&v1430, v9);
    sub_20E8B0848("marginalize SW f ", (std::string *)&v1430, &__p);
    std::runtime_error::runtime_error(exception, &__p);
    exception->__vftable = (std::runtime_error_vtbl *)&off_24CA04F20;
    __cxa_throw(exception, (struct type_info *)&unk_24CA04F38, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v10 = *(__CLPK_doublereal **)v6;
  v11 = *(_DWORD *)(v6 + 20);
  LOBYTE(category) = 117;
  LOBYTE(p_category) = 110;
  LODWORD(v1430.f64[0]) = v11;
  LODWORD(v1543) = -1;
  __p.__r_.__value_.__r.__words[0] = 0x100000001;
  sub_20E8346D4(&__p, (char *)&category, (char *)&p_category, (__CLPK_integer *)&v1430, v10, (int *)&v1430, (__CLPK_integer *)&v1543);
  v12 = (int)v1543;
  v1429 = (int)v1543;
  if ((_DWORD)v1543)
  {
    sub_20F9B2A4C(&p_category);
    if (*(int *)p_category[7] <= 4)
    {
      v817 = *((unsigned __int8 *)p_category + 72);
      v818 = sub_20E8C31DC((uint64_t)p_category, "OSLogSurrogateAppender", 1, 0);
      v819 = v818 ? v818 + 16 : 0;
      if (v817 || v818)
      {
        *(_QWORD *)&v1430.f64[0] = &p_category;
        *(std::chrono::steady_clock::time_point *)&v1430.f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
        *(std::chrono::system_clock::time_point *)&v1431 = std::chrono::system_clock::now();
        DWORD2(v1431) = 4;
        *(_QWORD *)&v1432 = "unknown file";
        DWORD2(v1432) = 3382;
        *(_QWORD *)&v1434 = 0;
        *(_QWORD *)&v1433 = "unknown function";
        *((_QWORD *)&v1433 + 1) = 0;
        v821 = **(_QWORD **)&v1430.f64[0];
        v822 = (uint64_t *)(**(_QWORD **)&v1430.f64[0] + 16);
        if (*(char *)(**(_QWORD **)&v1430.f64[0] + 39) < 0)
        {
          v824 = *(char **)(v821 + 16);
          v823 = *(double **)(v821 + 24);
        }
        else
        {
          v823 = (double *)*(unsigned __int8 *)(**(_QWORD **)&v1430.f64[0] + 39);
          v824 = (char *)(**(_QWORD **)&v1430.f64[0] + 16);
        }
        category = v824;
        v1426 = v823;
        v830 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v830 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)&__p);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&__p);
          if (LOBYTE(v1548.f64[0]) && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        v831 = (char ***)byte_254A4A4F8[23];
        if (byte_254A4A4F8[23] >= 0)
        {
          v832 = byte_254A4A4F8;
        }
        else
        {
          v831 = *(char ****)&byte_254A4A4F8[8];
          v832 = *(const char **)byte_254A4A4F8;
        }
        v1543 = v832;
        p_p_category = v831;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v832, category);
        sub_20E86E5A8(&__p.__r_.__value_.__l.__size_, (uint64_t)&v1543);
        sub_20E86E5A8(v1549, (uint64_t)&category);
        v833 = __p.__r_.__value_.__r.__words[0];
        sub_20E86E44C((uint64_t)&__p);
        sub_20FBF654C(v819, v822, v833, OS_LOG_TYPE_ERROR, &v1429);
        v12 = v1429;
        if (v817)
        {
          sub_20E8C003C((uint64_t)&v1430, "Failed to invert the marginalized component of the information matrix (result = %d).", v1429);
          sub_20E863570((uint64_t)&v1430);
        }
        sub_20E863714((uint64_t)&v1430);
      }
    }
    v820 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string((std::string *)&v1430, v12);
    sub_20E8B0848("marginalize SW i ", (std::string *)&v1430, &__p);
    std::runtime_error::runtime_error(v820, &__p);
    v820->__vftable = (std::runtime_error_vtbl *)&off_24CA04F20;
    __cxa_throw(v820, (struct type_info *)&unk_24CA04F38, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = *(double **)v6;
  __B = *(double **)v4;
  __lda = *(unsigned int *)(v4 + 16);
  v16 = *(unsigned int *)(v4 + 20);
  __p.__r_.__value_.__r.__words[0] = 0x100000001;
  sub_20E85E36C(&__p, CblasColMajor, 141, CblasUpper, CblasTrans, CblasNonUnit, __lda, v16, 1.0, v13, __lda, __B, __lda);
  v22 = *(_DWORD *)(v2 + 16);
  switch(v22)
  {
    case 22:
      v536 = *(_QWORD *)v2;
      v537 = *(unsigned int *)(v4 + 16);
      v538 = *(double **)v4;
      LOBYTE(v539) = *(_DWORD *)(v4 + 16);
      if (v537 >= 2)
      {
        v540 = 0;
        v1300 = *(float64x2_t *)(v536 + 16);
        v1295 = *(float64x2_t *)v536;
        v1290 = *(float64x2_t *)(v536 + 192);
        v1285 = *(float64x2_t *)(v536 + 176);
        v541 = 8 * v537;
        v1280 = *(float64x2_t *)(v536 + 368);
        v1275 = *(float64x2_t *)(v536 + 352);
        v1270 = *(float64x2_t *)(v536 + 544);
        v1265 = *(float64x2_t *)(v536 + 528);
        v1260 = *(float64x2_t *)(v536 + 720);
        v1390 = *(float64x2_t *)(v536 + 704);
        v1385 = *(float64x2_t *)(v536 + 896);
        v1380 = *(float64x2_t *)(v536 + 880);
        v1255 = *(float64x2_t *)(v536 + 1072);
        v1250 = *(float64x2_t *)(v536 + 1056);
        v1245 = *(float64x2_t *)(v536 + 1248);
        v1240 = *(float64x2_t *)(v536 + 1232);
        v1375 = *(float64x2_t *)(v536 + 1424);
        v1235 = *(float64x2_t *)(v536 + 1408);
        v1230 = *(float64x2_t *)(v536 + 1600);
        v1225 = *(float64x2_t *)(v536 + 1584);
        v1220 = *(float64x2_t *)(v536 + 1776);
        v1215 = *(float64x2_t *)(v536 + 1760);
        v1210 = *(float64x2_t *)(v536 + 1952);
        v1205 = *(float64x2_t *)(v536 + 1936);
        v1200 = *(float64x2_t *)(v536 + 2128);
        v1195 = *(float64x2_t *)(v536 + 2112);
        v1190 = *(float64x2_t *)(v536 + 2304);
        v1185 = *(float64x2_t *)(v536 + 2288);
        v1180 = *(float64x2_t *)(v536 + 2480);
        v1175 = *(float64x2_t *)(v536 + 2464);
        v1170 = *(float64x2_t *)(v536 + 2656);
        v1165 = *(float64x2_t *)(v536 + 2640);
        v542 = 3 * v537;
        v543 = *(int64x2_t **)v4;
        v1160 = *(float64x2_t *)(v536 + 2832);
        v1370 = *(float64x2_t *)(v536 + 2816);
        v1365 = *(float64x2_t *)(v536 + 3008);
        v1360 = *(float64x2_t *)(v536 + 2992);
        v1355 = *(float64x2_t *)(v536 + 3184);
        v1350 = *(float64x2_t *)(v536 + 3168);
        v1345 = *(float64x2_t *)(v536 + 3360);
        v1340 = *(float64x2_t *)(v536 + 3344);
        v1335 = *(float64x2_t *)(v536 + 3536);
        v1155 = *(float64x2_t *)(v536 + 3520);
        v1330 = *(float64x2_t *)(v536 + 3712);
        v1150 = *(float64x2_t *)(v536 + 3696);
        v1145 = *(float64x2_t *)(v536 + 752);
        v1140 = *(float64x2_t *)(v536 + 736);
        v1135 = *(float64x2_t *)(v536 + 928);
        v1325 = *(float64x2_t *)(v536 + 912);
        v1130 = *(float64x2_t *)(v536 + 1104);
        v1125 = *(float64x2_t *)(v536 + 1088);
        v1120 = *(float64x2_t *)(v536 + 1280);
        v1115 = *(float64x2_t *)(v536 + 1264);
        v1110 = *(float64x2_t *)(v536 + 1456);
        v1320 = *(float64x2_t *)(v536 + 1440);
        v1105 = *(float64x2_t *)(v536 + 1632);
        v1100 = *(float64x2_t *)(v536 + 1616);
        v1095 = *(float64x2_t *)(v536 + 1808);
        v1090 = *(float64x2_t *)(v536 + 1792);
        v1085 = *(float64x2_t *)(v536 + 1984);
        v1080 = *(float64x2_t *)(v536 + 1968);
        v1075 = *(float64x2_t *)(v536 + 2160);
        v1315 = *(float64x2_t *)(v536 + 2144);
        v1070 = *(float64x2_t *)(v536 + 2336);
        v1065 = *(float64x2_t *)(v536 + 2320);
        v1060 = *(float64x2_t *)(v536 + 2512);
        v1055 = *(float64x2_t *)(v536 + 2496);
        v1050 = *(float64x2_t *)(v536 + 2688);
        v1045 = *(float64x2_t *)(v536 + 2672);
        v1040 = *(float64x2_t *)(v536 + 2864);
        v1035 = *(float64x2_t *)(v536 + 2848);
        v1030 = *(float64x2_t *)(v536 + 3040);
        v1026 = *(float64x2_t *)(v536 + 3024);
        v1022 = *(float64x2_t *)(v536 + 3216);
        v1019 = *(float64x2_t *)(v536 + 3200);
        v1017 = *(float64x2_t *)(v536 + 3392);
        v1015 = *(float64x2_t *)(v536 + 3376);
        v1013 = *(float64x2_t *)(v536 + 3568);
        v1310 = *(float64x2_t *)(v536 + 3552);
        v1011 = *(float64x2_t *)(v536 + 3744);
        v1305 = *(float64x2_t *)(v536 + 3728);
        v544 = *(float64x2_t *)(v536 + 1488);
        v1009 = *(float64x2_t *)(v536 + 1472);
        v1007 = *(float64x2_t *)(v536 + 1664);
        v1005 = *(float64x2_t *)(v536 + 1648);
        v1003 = *(float64x2_t *)(v536 + 1840);
        v1001 = *(float64x2_t *)(v536 + 1824);
        v999 = *(float64x2_t *)(v536 + 2016);
        v997 = *(float64x2_t *)(v536 + 2000);
        v995 = *(float64x2_t *)(v536 + 2192);
        v993 = *(float64x2_t *)(v536 + 2176);
        v991 = *(float64x2_t *)(v536 + 2368);
        v989 = *(float64x2_t *)(v536 + 2352);
        v545 = *(float64x2_t *)(v536 + 2544);
        v987 = *(float64x2_t *)(v536 + 2528);
        v546 = *(float64x2_t *)(v536 + 2720);
        v985 = *(float64x2_t *)(v536 + 2704);
        v547 = *(float64x2_t *)(v536 + 2896);
        v983 = *(float64x2_t *)(v536 + 2880);
        v548 = *(float64x2_t *)(v536 + 3072);
        v549 = *(float64x2_t *)(v536 + 3056);
        v550 = *(float64x2_t *)(v536 + 3248);
        v981 = *(float64x2_t *)(v536 + 3232);
        v551 = *(float64x2_t *)(v536 + 3424);
        v979 = *(float64x2_t *)(v536 + 3408);
        v552 = *(float64x2_t *)(v536 + 3600);
        v977 = *(float64x2_t *)(v536 + 3584);
        v975 = *(float64x2_t *)(v536 + 3776);
        v973 = *(float64x2_t *)(v536 + 3760);
        v971 = *(float64x2_t *)(v536 + 2224);
        v969 = *(float64x2_t *)(v536 + 2208);
        v553 = *(float64x2_t *)(v536 + 2400);
        v967 = *(float64x2_t *)(v536 + 2384);
        v554 = *(float64x2_t *)(v536 + 2576);
        v965 = *(float64x2_t *)(v536 + 2560);
        v555 = *(float64x2_t *)(v536 + 2752);
        v963 = *(float64x2_t *)(v536 + 2736);
        v556 = *(float64x2_t *)(v536 + 2928);
        v961 = *(float64x2_t *)(v536 + 2912);
        v557 = *(float64x2_t *)(v536 + 3104);
        v959 = *(float64x2_t *)(v536 + 3088);
        v558 = *(float64x2_t *)(v536 + 3280);
        v957 = *(float64x2_t *)(v536 + 3264);
        v559 = *(float64x2_t *)(v536 + 3456);
        v955 = *(float64x2_t *)(v536 + 3440);
        v560 = *(float64x2_t *)(v536 + 3632);
        v953 = *(float64x2_t *)(v536 + 3616);
        v951 = *(float64x2_t *)(v536 + 3808);
        v949 = *(float64x2_t *)(v536 + 3792);
        v561 = *(float64x2_t *)(v536 + 2960);
        v562 = *(float64x2_t *)(v536 + 2944);
        v563 = *(float64x2_t *)(v536 + 3136);
        v564 = *(float64x2_t *)(v536 + 3120);
        v565 = *(float64x2_t *)(v536 + 3312);
        v947 = *(float64x2_t *)(v536 + 3296);
        v566 = *(float64x2_t *)(v536 + 3488);
        v567 = *(float64x2_t *)(v536 + 3472);
        v568 = *(float64x2_t *)(v536 + 3664);
        v945 = *(float64x2_t *)(v536 + 3648);
        v569 = *(float64x2_t *)(v536 + 3840);
        v943 = *(float64x2_t *)(v536 + 3824);
        v570 = *(float64x2_t *)(v536 + 3680);
        v571 = *(float64x2_t *)(v536 + 3856);
        do
        {
          v1395 = v571;
          v901 = v570;
          v903 = v568;
          v1400 = v569;
          v1405 = v567;
          v905 = v566;
          v907 = v565;
          v909 = v564;
          v911 = v563;
          v1410 = v562;
          v913 = v561;
          v915 = v559;
          v1415 = v560;
          v917 = v558;
          v919 = v557;
          v921 = v556;
          v923 = v555;
          v925 = v554;
          v927 = v553;
          v929 = v552;
          v931 = v551;
          v933 = v550;
          v935 = v547;
          v1420 = v549;
          v1424 = v548;
          v937 = v546;
          v939 = v545;
          v941 = v544;
          v572 = *(float64x2_t *)((char *)v543 + 8 * v537);
          v573 = (float64x2_t *)&v543->i8[v541 + v541];
          v574 = *v573;
          v575 = (float64x2_t *)((char *)v573 + v541);
          *(_QWORD *)&v576.f64[0] = vdupq_laneq_s64((int64x2_t)v574, 1).u64[0];
          v577 = *v575;
          v578 = (float64x2_t *)((char *)v575 + v541);
          v579 = *v578;
          v580 = (float64x2_t *)((char *)v578 + v541);
          v581 = *v580;
          v582 = (float64x2_t)vzip1q_s64((int64x2_t)v574, (int64x2_t)v577);
          v583 = (float64x2_t *)((char *)v580 + v541);
          v584 = *v583;
          v585 = (float64x2_t *)((char *)v583 + v541);
          v586 = *v585;
          v587 = (float64x2_t *)((char *)v585 + v541);
          v588 = *v587;
          v589 = (float64x2_t *)((char *)v587 + v541);
          v590 = *v589;
          v591 = (float64x2_t *)((char *)v589 + v541);
          v592 = *v591;
          v576.f64[1] = v577.f64[1];
          v593 = (float64x2_t *)((char *)v591 + v541);
          v594 = *v593;
          v595 = (float64x2_t *)((char *)v593 + v541);
          v596 = *v595;
          v597 = (float64x2_t *)((char *)v595 + v541);
          v598 = (float64x2_t)vzip1q_s64(*v543, (int64x2_t)v572);
          v599 = (float64x2_t)vzip2q_s64(*v543, (int64x2_t)v572);
          v600 = vmlaq_laneq_f64(vmulq_n_f64(v582, *(double *)v543->i64), v576, *(float64x2_t *)v543, 1);
          v601 = vmlaq_laneq_f64(vmulq_n_f64(v598, v572.f64[0]), v599, v572, 1);
          v602 = vmlaq_laneq_f64(vmulq_n_f64(v598, v574.f64[0]), v599, v574, 1);
          v603 = vmlaq_laneq_f64(vmulq_n_f64(v582, v572.f64[0]), v576, v572, 1);
          v604 = vmlaq_laneq_f64(vmulq_n_f64(v582, v574.f64[0]), v576, v574, 1);
          v605 = vmlaq_laneq_f64(vmulq_n_f64(v598, v577.f64[0]), v599, v577, 1);
          v606 = vmlaq_laneq_f64(vmulq_n_f64(v582, v577.f64[0]), v576, v577, 1);
          v607 = vmlaq_laneq_f64(vmulq_n_f64(v598, v579.f64[0]), v599, v579, 1);
          v608 = vmlaq_laneq_f64(vmulq_n_f64(v598, v581.f64[0]), v599, v581, 1);
          v609 = vmlaq_laneq_f64(vmulq_n_f64(v582, v579.f64[0]), v576, v579, 1);
          v610 = vmlaq_laneq_f64(vmulq_n_f64(v582, v581.f64[0]), v576, v581, 1);
          v611 = vmlaq_laneq_f64(vmulq_n_f64(v598, v584.f64[0]), v599, v584, 1);
          v612 = vmlaq_laneq_f64(vmulq_n_f64(v582, v584.f64[0]), v576, v584, 1);
          v613 = vmlaq_laneq_f64(vmulq_n_f64(v598, v586.f64[0]), v599, v586, 1);
          v614 = vmlaq_laneq_f64(vmulq_n_f64(v598, v588.f64[0]), v599, v588, 1);
          v615 = vmlaq_laneq_f64(vmulq_n_f64(v582, v586.f64[0]), v576, v586, 1);
          v616 = vmlaq_laneq_f64(vmulq_n_f64(v582, v588.f64[0]), v576, v588, 1);
          v617 = vmlaq_laneq_f64(vmulq_n_f64(v598, v590.f64[0]), v599, v590, 1);
          v618 = vmlaq_laneq_f64(vmulq_n_f64(v582, v590.f64[0]), v576, v590, 1);
          v619 = vmlaq_laneq_f64(vmulq_n_f64(v598, v592.f64[0]), v599, v592, 1);
          v898 = vmlaq_laneq_f64(vmulq_n_f64(v582, v592.f64[0]), v576, v592, 1);
          v893 = vmlaq_laneq_f64(vmulq_n_f64(v582, v594.f64[0]), v576, v594, 1);
          v886 = vmlaq_laneq_f64(vmulq_n_f64(v582, v596.f64[0]), v576, v596, 1);
          v890 = vmlaq_laneq_f64(vmulq_n_f64(v598, v597->f64[0]), v599, *v597, 1);
          v882 = vmlaq_laneq_f64(vmulq_n_f64(v582, v597->f64[0]), v576, *v597, 1);
          v620 = (float64x2_t *)((char *)v597 + v541);
          v878 = vmlaq_laneq_f64(vmulq_n_f64(v598, v620->f64[0]), v599, *v620, 1);
          v874 = vmlaq_laneq_f64(vmulq_n_f64(v582, v620->f64[0]), v576, *v620, 1);
          v621 = (float64x2_t *)((char *)v620 + v541);
          v870 = vmlaq_laneq_f64(vmulq_n_f64(v598, v621->f64[0]), v599, *v621, 1);
          v866 = vmlaq_laneq_f64(vmulq_n_f64(v582, v621->f64[0]), v576, *v621, 1);
          v622 = (float64x2_t *)((char *)v621 + v541);
          v862 = vmlaq_laneq_f64(vmulq_n_f64(v598, v622->f64[0]), v599, *v622, 1);
          v858 = vmlaq_laneq_f64(vmulq_n_f64(v582, v622->f64[0]), v576, *v622, 1);
          v623 = (float64x2_t *)((char *)v622 + v541);
          v854 = vmlaq_laneq_f64(vmulq_n_f64(v598, v623->f64[0]), v599, *v623, 1);
          v851 = vmlaq_laneq_f64(vmulq_n_f64(v582, v623->f64[0]), v576, *v623, 1);
          v624 = (float64x2_t *)((char *)v623 + v541);
          v848 = vmlaq_laneq_f64(vmulq_n_f64(v598, v624->f64[0]), v599, *v624, 1);
          v845 = vmlaq_laneq_f64(vmulq_n_f64(v582, v624->f64[0]), v576, *v624, 1);
          v625 = (float64x2_t *)((char *)v624 + v541);
          v843 = vmlaq_laneq_f64(vmulq_n_f64(v598, v625->f64[0]), v599, *v625, 1);
          v841 = vmlaq_laneq_f64(vmulq_n_f64(v582, v625->f64[0]), v576, *v625, 1);
          v626 = (float64x2_t *)((char *)v625 + v541);
          v839 = vmlaq_laneq_f64(vmulq_n_f64(v598, v626->f64[0]), v599, *v626, 1);
          v837 = vmlaq_laneq_f64(vmulq_n_f64(v582, v626->f64[0]), v576, *v626, 1);
          v627 = *(float64x2_t *)((char *)v626 + 8 * v537);
          v628 = vmlaq_laneq_f64(vmulq_n_f64(v582, v627.f64[0]), v576, v627, 1);
          v629 = vsubq_f64(v1295, vmlaq_laneq_f64(vmulq_n_f64(v598, *(double *)v543->i64), v599, *(float64x2_t *)v543, 1));
          v630 = vsubq_f64(v1285, v601);
          v631 = vsubq_f64(v1275, v602);
          v632 = vsubq_f64(v1265, v605);
          v1390 = vsubq_f64(v1390, v607);
          v1385 = vsubq_f64(v1385, v610);
          v1380 = vsubq_f64(v1380, v608);
          v633 = vsubq_f64(v1240, v613);
          v1375 = vsubq_f64(v1375, v616);
          v1370 = vsubq_f64(v1370, v862);
          v1365 = vsubq_f64(v1365, v851);
          v1360 = vsubq_f64(v1360, v854);
          v1355 = vsubq_f64(v1355, v845);
          v1350 = vsubq_f64(v1350, v848);
          v1345 = vsubq_f64(v1345, v841);
          v1340 = vsubq_f64(v1340, v843);
          v1335 = vsubq_f64(v1335, v837);
          v1330 = vsubq_f64(v1330, v628);
          v1300 = vsubq_f64(v1300, v600);
          *(float64x2_t *)v536 = v629;
          *(float64x2_t *)(v536 + 16) = v1300;
          v1295 = v629;
          v1290 = vsubq_f64(v1290, v603);
          *(float64x2_t *)(v536 + 176) = v630;
          *(float64x2_t *)(v536 + 192) = v1290;
          v1285 = v630;
          v1280 = vsubq_f64(v1280, v604);
          *(float64x2_t *)(v536 + 352) = v631;
          *(float64x2_t *)(v536 + 368) = v1280;
          v1275 = v631;
          v1270 = vsubq_f64(v1270, v606);
          *(float64x2_t *)(v536 + 528) = v632;
          *(float64x2_t *)(v536 + 544) = v1270;
          v1265 = v632;
          v1260 = vsubq_f64(v1260, v609);
          *(float64x2_t *)(v536 + 704) = v1390;
          *(float64x2_t *)(v536 + 720) = v1260;
          *(float64x2_t *)(v536 + 896) = v1385;
          *(float64x2_t *)(v536 + 880) = v1380;
          v1255 = vsubq_f64(v1255, v612);
          *(float64x2_t *)(v536 + 1072) = v1255;
          v1250 = vsubq_f64(v1250, v611);
          *(float64x2_t *)(v536 + 1056) = v1250;
          v1245 = vsubq_f64(v1245, v615);
          *(float64x2_t *)(v536 + 1232) = v633;
          *(float64x2_t *)(v536 + 1248) = v1245;
          v1240 = v633;
          v1235 = vsubq_f64(v1235, v614);
          *(float64x2_t *)(v536 + 1408) = v1235;
          *(float64x2_t *)(v536 + 1424) = v1375;
          v1230 = vsubq_f64(v1230, v618);
          *(float64x2_t *)(v536 + 1600) = v1230;
          v1225 = vsubq_f64(v1225, v617);
          *(float64x2_t *)(v536 + 1584) = v1225;
          v1220 = vsubq_f64(v1220, v898);
          *(float64x2_t *)(v536 + 1776) = v1220;
          v1215 = vsubq_f64(v1215, v619);
          *(float64x2_t *)(v536 + 1760) = v1215;
          v1210 = vsubq_f64(v1210, v893);
          *(float64x2_t *)(v536 + 1952) = v1210;
          v1205 = vsubq_f64(v1205, vmlaq_laneq_f64(vmulq_n_f64(v598, v594.f64[0]), v599, v594, 1));
          *(float64x2_t *)(v536 + 1936) = v1205;
          v1200 = vsubq_f64(v1200, v886);
          *(float64x2_t *)(v536 + 2128) = v1200;
          v1195 = vsubq_f64(v1195, vmlaq_laneq_f64(vmulq_n_f64(v598, v596.f64[0]), v599, v596, 1));
          *(float64x2_t *)(v536 + 2112) = v1195;
          v1190 = vsubq_f64(v1190, v882);
          *(float64x2_t *)(v536 + 2304) = v1190;
          v1185 = vsubq_f64(v1185, v890);
          *(float64x2_t *)(v536 + 2288) = v1185;
          v1180 = vsubq_f64(v1180, v874);
          *(float64x2_t *)(v536 + 2480) = v1180;
          v1175 = vsubq_f64(v1175, v878);
          *(float64x2_t *)(v536 + 2464) = v1175;
          v1170 = vsubq_f64(v1170, v866);
          *(float64x2_t *)(v536 + 2656) = v1170;
          v1165 = vsubq_f64(v1165, v870);
          *(float64x2_t *)(v536 + 2640) = v1165;
          v1160 = vsubq_f64(v1160, v858);
          *(float64x2_t *)(v536 + 2832) = v1160;
          *(float64x2_t *)(v536 + 2816) = v1370;
          *(float64x2_t *)(v536 + 3008) = v1365;
          *(float64x2_t *)(v536 + 2992) = v1360;
          *(float64x2_t *)(v536 + 3184) = v1355;
          *(float64x2_t *)(v536 + 3168) = v1350;
          *(float64x2_t *)(v536 + 3360) = v1345;
          *(float64x2_t *)(v536 + 3344) = v1340;
          v1155 = vsubq_f64(v1155, v839);
          *(float64x2_t *)(v536 + 3520) = v1155;
          *(float64x2_t *)(v536 + 3536) = v1335;
          v1150 = vsubq_f64(v1150, vmlaq_laneq_f64(vmulq_n_f64(v598, v627.f64[0]), v599, v627, 1));
          *(float64x2_t *)(v536 + 3696) = v1150;
          *(float64x2_t *)(v536 + 3712) = v1330;
          v634 = (int64x2_t *)&v538[(4 * v537 + v540)];
          v635 = *(float64x2_t *)((char *)v634 + 8 * v537);
          v636 = (float64x2_t)v634[v537];
          *(_QWORD *)&v629.f64[0] = vdupq_laneq_s64((int64x2_t)v636, 1).u64[0];
          v637 = *(float64x2_t *)((char *)v634 + 24 * v537);
          v638 = (float64x2_t)v634[2 * v537];
          v639 = *(float64x2_t *)((char *)v634 + 40 * v537);
          v640 = (float64x2_t)v634[3 * v537];
          v641 = *(float64x2_t *)((char *)v634 + 56 * v537);
          v642 = (float64x2_t)v634[4 * v537];
          v643 = *(float64x2_t *)((char *)v634 + 72 * v537);
          v644 = (float64x2_t)v634[5 * v537];
          v645 = (float64x2_t)vzip1q_s64((int64x2_t)v636, (int64x2_t)v637);
          v646 = *(float64x2_t *)((char *)v634 + 88 * v537);
          v647 = (float64x2_t)v634[6 * v537];
          *(_QWORD *)&v629.f64[1] = v634->i64[v542 + 1];
          v648 = *(float64x2_t *)((char *)v634 + 104 * v537);
          v649 = (float64x2_t)vzip1q_s64(*v634, (int64x2_t)v635);
          v650 = (float64x2_t)vzip2q_s64(*v634, (int64x2_t)v635);
          v651 = vmlaq_laneq_f64(vmulq_n_f64(v649, v635.f64[0]), v650, v635, 1);
          v652 = vmlaq_laneq_f64(vmulq_n_f64(v645, v635.f64[0]), v629, v635, 1);
          v653 = vmlaq_laneq_f64(vmulq_n_f64(v649, v636.f64[0]), v650, v636, 1);
          v654 = vmlaq_laneq_f64(vmulq_n_f64(v649, v637.f64[0]), v650, v637, 1);
          v655 = vmlaq_laneq_f64(vmulq_n_f64(v645, v636.f64[0]), v629, v636, 1);
          v656 = vmlaq_laneq_f64(vmulq_n_f64(v645, v637.f64[0]), v629, v637, 1);
          v657 = vmlaq_laneq_f64(vmulq_n_f64(v649, v638.f64[0]), v650, v638, 1);
          v658 = vmlaq_laneq_f64(vmulq_n_f64(v645, v638.f64[0]), v629, v638, 1);
          v659 = vmlaq_laneq_f64(vmulq_n_f64(v649, v639.f64[0]), v650, v639, 1);
          v660 = vmlaq_laneq_f64(vmulq_n_f64(v649, v640.f64[0]), v650, v640, 1);
          v661 = vmlaq_laneq_f64(vmulq_n_f64(v645, v639.f64[0]), v629, v639, 1);
          v662 = vmlaq_laneq_f64(vmulq_n_f64(v645, v640.f64[0]), v629, v640, 1);
          v899 = vmlaq_laneq_f64(vmulq_n_f64(v649, v643.f64[0]), v650, v643, 1);
          v895 = vmlaq_laneq_f64(vmulq_n_f64(v645, v643.f64[0]), v629, v643, 1);
          v887 = vmlaq_laneq_f64(vmulq_n_f64(v649, v646.f64[0]), v650, v646, 1);
          v879 = vmlaq_laneq_f64(vmulq_n_f64(v645, v646.f64[0]), v629, v646, 1);
          v883 = vmlaq_laneq_f64(vmulq_n_f64(v649, v647.f64[0]), v650, v647, 1);
          v663 = vmlaq_laneq_f64(vmulq_n_f64(v645, v647.f64[0]), v629, v647, 1);
          v875 = vmlaq_laneq_f64(vmulq_n_f64(v649, v648.f64[0]), v650, v648, 1);
          v871 = vmlaq_laneq_f64(vmulq_n_f64(v645, v648.f64[0]), v629, v648, 1);
          v664 = (float64x2_t)v634[7 * v537];
          v867 = vmlaq_laneq_f64(vmulq_n_f64(v649, v664.f64[0]), v650, v664, 1);
          v863 = vmlaq_laneq_f64(vmulq_n_f64(v645, v664.f64[0]), v629, v664, 1);
          v665 = *(float64x2_t *)((char *)v634 + 120 * v537);
          v859 = vmlaq_laneq_f64(vmulq_n_f64(v649, v665.f64[0]), v650, v665, 1);
          v855 = vmlaq_laneq_f64(vmulq_n_f64(v645, v665.f64[0]), v629, v665, 1);
          v666 = (float64x2_t)v634[8 * v537];
          v667 = vmlaq_laneq_f64(vmulq_n_f64(v649, v666.f64[0]), v650, v666, 1);
          v668 = vmlaq_laneq_f64(vmulq_n_f64(v645, v666.f64[0]), v629, v666, 1);
          v669 = *(float64x2_t *)((char *)v634 + 136 * v537);
          v670 = vsubq_f64(v1140, vmlaq_laneq_f64(vmulq_n_f64(v649, *(double *)v634->i64), v650, *(float64x2_t *)v634, 1));
          v1325 = vsubq_f64(v1325, v651);
          v671 = vsubq_f64(v1115, v654);
          v1320 = vsubq_f64(v1320, v657);
          v1315 = vsubq_f64(v1315, vmlaq_laneq_f64(vmulq_n_f64(v649, v642.f64[0]), v650, v642, 1));
          v1310 = vsubq_f64(v1310, v667);
          v1305 = vsubq_f64(v1305, vmlaq_laneq_f64(vmulq_n_f64(v649, v669.f64[0]), v650, v669, 1));
          v1145 = vsubq_f64(v1145, vmlaq_laneq_f64(vmulq_n_f64(v645, *(double *)v634->i64), v629, *(float64x2_t *)v634, 1));
          *(float64x2_t *)(v536 + 736) = v670;
          *(float64x2_t *)(v536 + 752) = v1145;
          v1140 = v670;
          v1135 = vsubq_f64(v1135, v652);
          *(float64x2_t *)(v536 + 912) = v1325;
          *(float64x2_t *)(v536 + 928) = v1135;
          v1125 = vsubq_f64(v1125, v653);
          *(float64x2_t *)(v536 + 1088) = v1125;
          v1130 = vsubq_f64(v1130, v655);
          *(float64x2_t *)(v536 + 1104) = v1130;
          v1120 = vsubq_f64(v1120, v656);
          *(float64x2_t *)(v536 + 1264) = v671;
          *(float64x2_t *)(v536 + 1280) = v1120;
          v1115 = v671;
          v1110 = vsubq_f64(v1110, v658);
          *(float64x2_t *)(v536 + 1456) = v1110;
          *(float64x2_t *)(v536 + 1440) = v1320;
          v1100 = vsubq_f64(v1100, v659);
          *(float64x2_t *)(v536 + 1616) = v1100;
          v1105 = vsubq_f64(v1105, v661);
          *(float64x2_t *)(v536 + 1632) = v1105;
          v1095 = vsubq_f64(v1095, v662);
          *(float64x2_t *)(v536 + 1808) = v1095;
          v1090 = vsubq_f64(v1090, v660);
          *(float64x2_t *)(v536 + 1792) = v1090;
          v1085 = vsubq_f64(v1085, vmlaq_laneq_f64(vmulq_n_f64(v645, v641.f64[0]), v629, v641, 1));
          *(float64x2_t *)(v536 + 1984) = v1085;
          v1080 = vsubq_f64(v1080, vmlaq_laneq_f64(vmulq_n_f64(v649, v641.f64[0]), v650, v641, 1));
          *(float64x2_t *)(v536 + 1968) = v1080;
          *(float64x2_t *)(v536 + 2144) = v1315;
          v1075 = vsubq_f64(v1075, vmlaq_laneq_f64(vmulq_n_f64(v645, v642.f64[0]), v629, v642, 1));
          *(float64x2_t *)(v536 + 2160) = v1075;
          v1070 = vsubq_f64(v1070, v895);
          *(float64x2_t *)(v536 + 2336) = v1070;
          v1065 = vsubq_f64(v1065, v899);
          *(float64x2_t *)(v536 + 2320) = v1065;
          v1060 = vsubq_f64(v1060, vmlaq_laneq_f64(vmulq_n_f64(v645, v644.f64[0]), v629, v644, 1));
          *(float64x2_t *)(v536 + 2512) = v1060;
          v1055 = vsubq_f64(v1055, vmlaq_laneq_f64(vmulq_n_f64(v649, v644.f64[0]), v650, v644, 1));
          *(float64x2_t *)(v536 + 2496) = v1055;
          v1045 = vsubq_f64(v1045, v887);
          *(float64x2_t *)(v536 + 2672) = v1045;
          v1050 = vsubq_f64(v1050, v879);
          *(float64x2_t *)(v536 + 2688) = v1050;
          v1040 = vsubq_f64(v1040, v663);
          *(float64x2_t *)(v536 + 2864) = v1040;
          v1035 = vsubq_f64(v1035, v883);
          *(float64x2_t *)(v536 + 2848) = v1035;
          v1030 = vsubq_f64(v1030, v871);
          *(float64x2_t *)(v536 + 3040) = v1030;
          v1026 = vsubq_f64(v1026, v875);
          *(float64x2_t *)(v536 + 3024) = v1026;
          v1019 = vsubq_f64(v1019, v867);
          *(float64x2_t *)(v536 + 3200) = v1019;
          v1022 = vsubq_f64(v1022, v863);
          *(float64x2_t *)(v536 + 3216) = v1022;
          v1017 = vsubq_f64(v1017, v855);
          *(float64x2_t *)(v536 + 3392) = v1017;
          v1015 = vsubq_f64(v1015, v859);
          *(float64x2_t *)(v536 + 3376) = v1015;
          v1013 = vsubq_f64(v1013, v668);
          *(float64x2_t *)(v536 + 3568) = v1013;
          *(float64x2_t *)(v536 + 3552) = v1310;
          *(float64x2_t *)(v536 + 3728) = v1305;
          v1011 = vsubq_f64(v1011, vmlaq_laneq_f64(vmulq_n_f64(v645, v669.f64[0]), v629, v669, 1));
          *(float64x2_t *)(v536 + 3744) = v1011;
          v672 = (int64x2_t *)&v538[(8 * v537 + v540)];
          v673 = (float64x2_t)v672[v537];
          v674 = *(float64x2_t *)((char *)v672 + 8 * v537);
          v675 = *(float64x2_t *)((char *)v672 + 24 * v537);
          *(_QWORD *)&v649.f64[0] = vdupq_laneq_s64((int64x2_t)v673, 1).u64[0];
          v676 = (float64x2_t)v672[2 * v537];
          v677 = *(float64x2_t *)((char *)v672 + 40 * v537);
          v678 = (float64x2_t)v672[3 * v537];
          v679 = *(float64x2_t *)((char *)v672 + 56 * v537);
          v680 = (float64x2_t)v672[4 * v537];
          v681 = *(float64x2_t *)((char *)v672 + 72 * v537);
          v682 = (float64x2_t)v672[5 * v537];
          v683 = *(float64x2_t *)((char *)v672 + 88 * v537);
          v684 = (float64x2_t)v672[6 * v537];
          v685 = (float64x2_t)vzip1q_s64((int64x2_t)v673, (int64x2_t)v675);
          v686 = (float64x2_t)vzip1q_s64(*v672, (int64x2_t)v674);
          v687 = (float64x2_t)vzip2q_s64(*v672, (int64x2_t)v674);
          *(_QWORD *)&v649.f64[1] = v672->i64[v542 + 1];
          v688 = vmlaq_laneq_f64(vmulq_n_f64(v686, *(double *)v672->i64), v687, *(float64x2_t *)v672, 1);
          v689 = vmlaq_laneq_f64(vmulq_n_f64(v686, v674.f64[0]), v687, v674, 1);
          v690 = vmlaq_laneq_f64(vmulq_n_f64(v685, *(double *)v672->i64), v649, *(float64x2_t *)v672, 1);
          v691 = vmlaq_laneq_f64(vmulq_n_f64(v685, v674.f64[0]), v649, v674, 1);
          v692 = vmlaq_laneq_f64(vmulq_n_f64(v686, v673.f64[0]), v687, v673, 1);
          v693 = vmlaq_laneq_f64(vmulq_n_f64(v685, v673.f64[0]), v649, v673, 1);
          v694 = vmlaq_laneq_f64(vmulq_n_f64(v686, v675.f64[0]), v687, v675, 1);
          v695 = vmlaq_laneq_f64(vmulq_n_f64(v686, v676.f64[0]), v687, v676, 1);
          v696 = vmlaq_laneq_f64(vmulq_n_f64(v685, v675.f64[0]), v649, v675, 1);
          v697 = vmlaq_laneq_f64(vmulq_n_f64(v685, v676.f64[0]), v649, v676, 1);
          v698 = vmlaq_laneq_f64(vmulq_n_f64(v686, v677.f64[0]), v687, v677, 1);
          v699 = vmlaq_laneq_f64(vmulq_n_f64(v685, v677.f64[0]), v649, v677, 1);
          v700 = vmlaq_laneq_f64(vmulq_n_f64(v686, v678.f64[0]), v687, v678, 1);
          v701 = vmlaq_laneq_f64(vmulq_n_f64(v686, v679.f64[0]), v687, v679, 1);
          v702 = vmlaq_laneq_f64(vmulq_n_f64(v685, v678.f64[0]), v649, v678, 1);
          v703 = vmlaq_laneq_f64(vmulq_n_f64(v685, v679.f64[0]), v649, v679, 1);
          v704 = vmlaq_laneq_f64(vmulq_n_f64(v686, v680.f64[0]), v687, v680, 1);
          v705 = vmlaq_laneq_f64(vmulq_n_f64(v685, v680.f64[0]), v649, v680, 1);
          v706 = vmlaq_laneq_f64(vmulq_n_f64(v686, v681.f64[0]), v687, v681, 1);
          v707 = vmlaq_laneq_f64(vmulq_n_f64(v686, v682.f64[0]), v687, v682, 1);
          v708 = vmlaq_laneq_f64(vmulq_n_f64(v685, v681.f64[0]), v649, v681, 1);
          v709 = vmlaq_laneq_f64(vmulq_n_f64(v685, v682.f64[0]), v649, v682, 1);
          v710 = vmlaq_laneq_f64(vmulq_n_f64(v686, v683.f64[0]), v687, v683, 1);
          v711 = vmlaq_laneq_f64(vmulq_n_f64(v685, v683.f64[0]), v649, v683, 1);
          v712 = vmlaq_laneq_f64(vmulq_n_f64(v686, v684.f64[0]), v687, v684, 1);
          v713 = vmlaq_laneq_f64(vmulq_n_f64(v685, v684.f64[0]), v649, v684, 1);
          v714 = *(float64x2_t *)((char *)v672 + 104 * v537);
          v715 = vmlaq_laneq_f64(vmulq_n_f64(v686, v714.f64[0]), v687, v714, 1);
          v716 = vmlaq_laneq_f64(vmulq_n_f64(v685, v714.f64[0]), v649, v714, 1);
          v717 = vsubq_f64(v1009, v688);
          v544 = vsubq_f64(v941, v690);
          v718 = vsubq_f64(v1007, v691);
          v719 = vsubq_f64(v1001, v692);
          v720 = vsubq_f64(v1003, v693);
          v721 = vsubq_f64(v997, v694);
          v722 = vsubq_f64(v993, v695);
          v723 = vsubq_f64(v995, v697);
          v724 = vsubq_f64(v991, v699);
          v725 = vsubq_f64(v987, v700);
          v726 = vsubq_f64(v985, v701);
          v545 = vsubq_f64(v939, v702);
          v546 = vsubq_f64(v937, v703);
          v547 = vsubq_f64(v935, v705);
          v549 = vsubq_f64(v1420, v706);
          v727 = vsubq_f64(v981, v707);
          v548 = vsubq_f64(v1424, v708);
          v550 = vsubq_f64(v933, v709);
          v728 = vsubq_f64(v979, v710);
          v551 = vsubq_f64(v931, v711);
          v729 = vsubq_f64(v977, v712);
          v552 = vsubq_f64(v929, v713);
          *(float64x2_t *)(v536 + 1488) = v544;
          v1009 = v717;
          *(float64x2_t *)(v536 + 1472) = v717;
          v1007 = v718;
          *(float64x2_t *)(v536 + 1664) = v718;
          v1005 = vsubq_f64(v1005, v689);
          *(float64x2_t *)(v536 + 1648) = v1005;
          v1003 = v720;
          *(float64x2_t *)(v536 + 1840) = v720;
          v1001 = v719;
          *(float64x2_t *)(v536 + 1824) = v719;
          v999 = vsubq_f64(v999, v696);
          *(float64x2_t *)(v536 + 2016) = v999;
          v997 = v721;
          *(float64x2_t *)(v536 + 2000) = v721;
          v995 = v723;
          *(float64x2_t *)(v536 + 2192) = v723;
          v993 = v722;
          *(float64x2_t *)(v536 + 2176) = v722;
          v991 = v724;
          *(float64x2_t *)(v536 + 2368) = v724;
          v989 = vsubq_f64(v989, v698);
          *(float64x2_t *)(v536 + 2352) = v989;
          *(float64x2_t *)(v536 + 2544) = v545;
          v987 = v725;
          *(float64x2_t *)(v536 + 2528) = v725;
          *(float64x2_t *)(v536 + 2720) = v546;
          v985 = v726;
          *(float64x2_t *)(v536 + 2704) = v726;
          *(float64x2_t *)(v536 + 2896) = v547;
          v983 = vsubq_f64(v983, v704);
          *(float64x2_t *)(v536 + 2880) = v983;
          *(float64x2_t *)(v536 + 3072) = v548;
          *(float64x2_t *)(v536 + 3056) = v549;
          *(float64x2_t *)(v536 + 3248) = v550;
          v981 = v727;
          *(float64x2_t *)(v536 + 3232) = v727;
          *(float64x2_t *)(v536 + 3424) = v551;
          v979 = v728;
          *(float64x2_t *)(v536 + 3408) = v728;
          *(float64x2_t *)(v536 + 3600) = v552;
          v977 = v729;
          *(float64x2_t *)(v536 + 3584) = v729;
          v973 = vsubq_f64(v973, v715);
          *(float64x2_t *)(v536 + 3760) = v973;
          v975 = vsubq_f64(v975, v716);
          *(float64x2_t *)(v536 + 3776) = v975;
          v730 = (int64x2_t *)&v538[(12 * v537 + v540)];
          v731 = (float64x2_t)v730[v537];
          v732 = *(float64x2_t *)((char *)v730 + 8 * v537);
          v733 = *(float64x2_t *)((char *)v730 + 24 * v537);
          *(_QWORD *)&v717.f64[0] = vdupq_laneq_s64((int64x2_t)v731, 1).u64[0];
          v734 = (float64x2_t)v730[2 * v537];
          v735 = *(float64x2_t *)((char *)v730 + 40 * v537);
          v736 = (float64x2_t)v730[3 * v537];
          v737 = *(float64x2_t *)((char *)v730 + 56 * v537);
          v738 = (float64x2_t)vzip1q_s64((int64x2_t)v731, (int64x2_t)v733);
          v739 = (float64x2_t)v730[4 * v537];
          v740 = (float64x2_t)vzip1q_s64(*v730, (int64x2_t)v732);
          *(_QWORD *)&v717.f64[1] = v730->i64[v542 + 1];
          v741 = (float64x2_t)vzip2q_s64(*v730, (int64x2_t)v732);
          v742 = vmlaq_laneq_f64(vmulq_n_f64(v740, *(double *)v730->i64), v741, *(float64x2_t *)v730, 1);
          v743 = vmlaq_laneq_f64(vmulq_n_f64(v738, *(double *)v730->i64), v717, *(float64x2_t *)v730, 1);
          v744 = vmlaq_laneq_f64(vmulq_n_f64(v740, v732.f64[0]), v741, v732, 1);
          v745 = vmlaq_laneq_f64(vmulq_n_f64(v740, v731.f64[0]), v741, v731, 1);
          v746 = vmlaq_laneq_f64(vmulq_n_f64(v738, v732.f64[0]), v717, v732, 1);
          v747 = vmlaq_laneq_f64(vmulq_n_f64(v738, v731.f64[0]), v717, v731, 1);
          v748 = vmlaq_laneq_f64(vmulq_n_f64(v740, v733.f64[0]), v741, v733, 1);
          v749 = vmlaq_laneq_f64(vmulq_n_f64(v738, v733.f64[0]), v717, v733, 1);
          v750 = vmlaq_laneq_f64(vmulq_n_f64(v740, v734.f64[0]), v741, v734, 1);
          v751 = vmlaq_laneq_f64(vmulq_n_f64(v740, v735.f64[0]), v741, v735, 1);
          v752 = vmlaq_laneq_f64(vmulq_n_f64(v738, v734.f64[0]), v717, v734, 1);
          v753 = vmlaq_laneq_f64(vmulq_n_f64(v738, v735.f64[0]), v717, v735, 1);
          v754 = vmlaq_laneq_f64(vmulq_n_f64(v740, v736.f64[0]), v741, v736, 1);
          v755 = vmlaq_laneq_f64(vmulq_n_f64(v738, v736.f64[0]), v717, v736, 1);
          v756 = vmlaq_laneq_f64(vmulq_n_f64(v740, v737.f64[0]), v741, v737, 1);
          v757 = vmlaq_laneq_f64(vmulq_n_f64(v738, v737.f64[0]), v717, v737, 1);
          v758 = vmlaq_laneq_f64(vmulq_n_f64(v740, v739.f64[0]), v741, v739, 1);
          v759 = vmlaq_laneq_f64(vmulq_n_f64(v738, v739.f64[0]), v717, v739, 1);
          v760 = *(float64x2_t *)((char *)v730 + 72 * v537);
          v761 = vmlaq_laneq_f64(vmulq_n_f64(v740, v760.f64[0]), v741, v760, 1);
          v762 = vmlaq_laneq_f64(vmulq_n_f64(v738, v760.f64[0]), v717, v760, 1);
          v763 = vsubq_f64(v969, v742);
          v764 = vsubq_f64(v967, v744);
          v765 = vsubq_f64(v965, v745);
          v553 = vsubq_f64(v927, v746);
          v554 = vsubq_f64(v925, v747);
          v766 = vsubq_f64(v963, v748);
          v555 = vsubq_f64(v923, v749);
          v767 = vsubq_f64(v961, v750);
          v768 = vsubq_f64(v959, v751);
          v556 = vsubq_f64(v921, v752);
          v557 = vsubq_f64(v919, v753);
          v769 = vsubq_f64(v957, v754);
          v558 = vsubq_f64(v917, v755);
          v770 = vsubq_f64(v955, v756);
          v559 = vsubq_f64(v915, v757);
          v560 = vsubq_f64(v1415, v759);
          v971 = vsubq_f64(v971, v743);
          *(float64x2_t *)(v536 + 2224) = v971;
          v969 = v763;
          *(float64x2_t *)(v536 + 2208) = v763;
          *(float64x2_t *)(v536 + 2400) = v553;
          v967 = v764;
          *(float64x2_t *)(v536 + 2384) = v764;
          *(float64x2_t *)(v536 + 2576) = v554;
          v965 = v765;
          *(float64x2_t *)(v536 + 2560) = v765;
          *(float64x2_t *)(v536 + 2752) = v555;
          v963 = v766;
          *(float64x2_t *)(v536 + 2736) = v766;
          *(float64x2_t *)(v536 + 2928) = v556;
          v961 = v767;
          *(float64x2_t *)(v536 + 2912) = v767;
          *(float64x2_t *)(v536 + 3104) = v557;
          v959 = v768;
          *(float64x2_t *)(v536 + 3088) = v768;
          *(float64x2_t *)(v536 + 3280) = v558;
          v957 = v769;
          *(float64x2_t *)(v536 + 3264) = v769;
          *(float64x2_t *)(v536 + 3456) = v559;
          v955 = v770;
          *(float64x2_t *)(v536 + 3440) = v770;
          *(float64x2_t *)(v536 + 3632) = v560;
          v953 = vsubq_f64(v953, v758);
          *(float64x2_t *)(v536 + 3616) = v953;
          v949 = vsubq_f64(v949, v761);
          *(float64x2_t *)(v536 + 3792) = v949;
          v951 = vsubq_f64(v951, v762);
          *(float64x2_t *)(v536 + 3808) = v951;
          v771 = (int64x2_t *)&v538[(16 * v537 + v540)];
          v772 = (float64x2_t)v771[v537];
          v773 = *(float64x2_t *)((char *)v771 + 8 * v537);
          v774 = *(float64x2_t *)((char *)v771 + 24 * v537);
          *(_QWORD *)&v769.f64[0] = vdupq_laneq_s64((int64x2_t)v772, 1).u64[0];
          v775 = (float64x2_t)v771[2 * v537];
          v776 = (float64x2_t)vzip1q_s64((int64x2_t)v772, (int64x2_t)v774);
          v777 = (float64x2_t)vzip1q_s64(*v771, (int64x2_t)v773);
          v778 = (float64x2_t)vzip2q_s64(*v771, (int64x2_t)v773);
          *(_QWORD *)&v769.f64[1] = v771->i64[v542 + 1];
          v779 = vmlaq_laneq_f64(vmulq_n_f64(v777, *(double *)v771->i64), v778, *(float64x2_t *)v771, 1);
          v780 = vmlaq_laneq_f64(vmulq_n_f64(v777, v773.f64[0]), v778, v773, 1);
          v781 = vmlaq_laneq_f64(vmulq_n_f64(v776, *(double *)v771->i64), v769, *(float64x2_t *)v771, 1);
          v782 = vmlaq_laneq_f64(vmulq_n_f64(v776, v773.f64[0]), v769, v773, 1);
          v783 = vmlaq_laneq_f64(vmulq_n_f64(v777, v772.f64[0]), v778, v772, 1);
          v784 = vmlaq_laneq_f64(vmulq_n_f64(v776, v772.f64[0]), v769, v772, 1);
          v785 = vmlaq_laneq_f64(vmulq_n_f64(v777, v774.f64[0]), v778, v774, 1);
          v786 = vmlaq_laneq_f64(vmulq_n_f64(v776, v774.f64[0]), v769, v774, 1);
          v787 = vmlaq_laneq_f64(vmulq_n_f64(v777, v775.f64[0]), v778, v775, 1);
          v788 = vmlaq_laneq_f64(vmulq_n_f64(v776, v775.f64[0]), v769, v775, 1);
          v789 = *(float64x2_t *)((char *)v771 + 40 * v537);
          v790 = vmlaq_laneq_f64(vmulq_n_f64(v777, v789.f64[0]), v778, v789, 1);
          v791 = vmlaq_laneq_f64(vmulq_n_f64(v776, v789.f64[0]), v769, v789, 1);
          v562 = vsubq_f64(v1410, v779);
          v561 = vsubq_f64(v913, v781);
          v564 = vsubq_f64(v909, v780);
          v563 = vsubq_f64(v911, v782);
          v565 = vsubq_f64(v907, v784);
          v567 = vsubq_f64(v1405, v785);
          v566 = vsubq_f64(v905, v786);
          v792 = vsubq_f64(v943, v790);
          v568 = vsubq_f64(v903, v788);
          v569 = vsubq_f64(v1400, v791);
          *(float64x2_t *)(v536 + 2960) = v561;
          *(float64x2_t *)(v536 + 2944) = v562;
          *(float64x2_t *)(v536 + 3136) = v563;
          *(float64x2_t *)(v536 + 3120) = v564;
          *(float64x2_t *)(v536 + 3312) = v565;
          v947 = vsubq_f64(v947, v783);
          *(float64x2_t *)(v536 + 3296) = v947;
          *(float64x2_t *)(v536 + 3488) = v566;
          *(float64x2_t *)(v536 + 3472) = v567;
          *(float64x2_t *)(v536 + 3664) = v568;
          v945 = vsubq_f64(v945, v787);
          *(float64x2_t *)(v536 + 3648) = v945;
          *(float64x2_t *)(v536 + 3840) = v569;
          v943 = v792;
          *(float64x2_t *)(v536 + 3824) = v792;
          v793 = (int64x2_t *)&v538[(20 * v537 + v540)];
          v794 = *(float64x2_t *)((char *)v793 + 8 * v537);
          v795 = (float64x2_t)vzip1q_s64(*v793, (int64x2_t)v794);
          *(_QWORD *)&v787.f64[0] = vdupq_laneq_s64(*v793, 1).u64[0];
          *(_QWORD *)&v787.f64[1] = v793->i64[(unint64_t)v541 / 8 + 1];
          v796 = vmlaq_laneq_f64(vmulq_n_f64(v795, v794.f64[0]), v787, v794, 1);
          v570 = vsubq_f64(v901, vmlaq_laneq_f64(vmulq_n_f64(v795, *(double *)v793->i64), v787, *(float64x2_t *)v793, 1));
          v571 = vsubq_f64(v1395, v796);
          *(float64x2_t *)(v536 + 3680) = v570;
          *(float64x2_t *)(v536 + 3856) = v571;
          LODWORD(v793) = v540 + 4;
          v540 += 2;
          ++v543;
        }
        while (v793 <= v537);
        v539 = *(_DWORD *)(v4 + 16);
      }
      if ((v539 & 1) != 0)
      {
        LODWORD(v1543) = 1;
        HIDWORD(v1543) = v537;
        p_p_category = (char ***)&v538[(v537 - 1)];
        LODWORD(v1545) = v537 - 1;
        category = (char *)&v1543;
        *(_QWORD *)&v1430.f64[1] = &category;
        *(_QWORD *)&v1431 = &v1543;
        *((_QWORD *)&v1431 + 1) = 0x3FF0000000000000;
        if (v538 == (double *)v536)
        {
          sub_20FBAAB3C((double *)&__p, (uint64_t)&v1430);
          if (v536 >= (unint64_t)&v1553 || (unint64_t)&__p >= v536 + 3872)
          {
            for (i = 0; i != 3872; i += 32)
            {
              v807 = (float64x2_t *)(v536 + i);
              v808 = vsubq_f64(*(float64x2_t *)(v536 + i + 16), *(float64x2_t *)&__p.__r_.__value_.__r.__words[i / 8 + 2]);
              *v807 = vsubq_f64(*(float64x2_t *)(v536 + i), *(float64x2_t *)((char *)&__p.__r_.__value_.__l.__data_ + i));
              v807[1] = v808;
            }
          }
          else
          {
            for (j = 0; j != 3872; j += 8)
              *(double *)(v536 + j) = *(double *)(v536 + j) - *(double *)((char *)&__p.__r_.__value_.__l.__data_ + j);
          }
        }
        else
        {
          sub_20E8BE654(1, 0, 22, 22, 1, &v538[(v537 - 1)], v537, &v538[(v537 - 1)], -1.0, 1.0, v537, (double *)v536, 22);
        }
      }
      break;
    case 21:
      v286 = *(_QWORD *)v2;
      v287 = *(unsigned int *)(v4 + 16);
      v288 = *(double **)v4;
      LOBYTE(v289) = *(_DWORD *)(v4 + 16);
      if (v287 >= 2)
      {
        v290 = 0;
        v1334 = *(float64x2_t *)(v286 + 16);
        v1329 = *(float64x2_t *)v286;
        v1324 = *(float64x2_t *)(v286 + 184);
        v1319 = *(float64x2_t *)(v286 + 168);
        v1314 = *(float64x2_t *)(v286 + 352);
        v1309 = *(float64x2_t *)(v286 + 336);
        v1304 = *(float64x2_t *)(v286 + 520);
        v1299 = *(float64x2_t *)(v286 + 504);
        v1294 = *(float64x2_t *)(v286 + 688);
        v1289 = *(float64x2_t *)(v286 + 672);
        v291 = 8 * v287;
        v1284 = *(float64x2_t *)(v286 + 856);
        v1279 = *(float64x2_t *)(v286 + 840);
        v1274 = *(float64x2_t *)(v286 + 1024);
        v1269 = *(float64x2_t *)(v286 + 1008);
        v1264 = *(float64x2_t *)(v286 + 1192);
        v1259 = *(float64x2_t *)(v286 + 1176);
        v1254 = *(float64x2_t *)(v286 + 1360);
        v1249 = *(float64x2_t *)(v286 + 1344);
        v1244 = *(float64x2_t *)(v286 + 1528);
        v1423 = *(float64x2_t *)(v286 + 1512);
        v1419 = *(float64x2_t *)(v286 + 1696);
        v1239 = *(float64x2_t *)(v286 + 1680);
        v1234 = *(float64x2_t *)(v286 + 1864);
        v1229 = *(float64x2_t *)(v286 + 1848);
        v1224 = *(float64x2_t *)(v286 + 2032);
        v1219 = *(float64x2_t *)(v286 + 2016);
        v1214 = *(float64x2_t *)(v286 + 2200);
        v1209 = *(float64x2_t *)(v286 + 2184);
        v1204 = *(float64x2_t *)(v286 + 2368);
        v1199 = *(float64x2_t *)(v286 + 2352);
        v1194 = *(float64x2_t *)(v286 + 2536);
        v1189 = *(float64x2_t *)(v286 + 2520);
        v292 = 3 * v287;
        v293 = *(int64x2_t **)v4;
        v1414 = *(float64x2_t *)(v286 + 2704);
        v1409 = *(float64x2_t *)(v286 + 2688);
        v1404 = *(float64x2_t *)(v286 + 2872);
        v1399 = *(float64x2_t *)(v286 + 2856);
        v1394 = *(float64x2_t *)(v286 + 3040);
        v1389 = *(float64x2_t *)(v286 + 3024);
        v1384 = *(float64x2_t *)(v286 + 3208);
        v1379 = *(float64x2_t *)(v286 + 3192);
        v1374 = *(float64x2_t *)(v286 + 3376);
        v1184 = *(float64x2_t *)(v286 + 3360);
        v1179 = *(float64x2_t *)(v286 + 720);
        v1174 = *(float64x2_t *)(v286 + 704);
        v1169 = *(float64x2_t *)(v286 + 888);
        v1164 = *(float64x2_t *)(v286 + 872);
        v1159 = *(float64x2_t *)(v286 + 1056);
        v1154 = *(float64x2_t *)(v286 + 1040);
        v1149 = *(float64x2_t *)(v286 + 1224);
        v1144 = *(float64x2_t *)(v286 + 1208);
        v1139 = *(float64x2_t *)(v286 + 1392);
        v1134 = *(float64x2_t *)(v286 + 1376);
        v1129 = *(float64x2_t *)(v286 + 1560);
        v1369 = *(float64x2_t *)(v286 + 1544);
        v1124 = *(float64x2_t *)(v286 + 1728);
        v1119 = *(float64x2_t *)(v286 + 1712);
        v1114 = *(float64x2_t *)(v286 + 1896);
        v1109 = *(float64x2_t *)(v286 + 1880);
        v1104 = *(float64x2_t *)(v286 + 2064);
        v1364 = *(float64x2_t *)(v286 + 2048);
        v1099 = *(float64x2_t *)(v286 + 2232);
        v1094 = *(float64x2_t *)(v286 + 2216);
        v1089 = *(float64x2_t *)(v286 + 2400);
        v1084 = *(float64x2_t *)(v286 + 2384);
        v1079 = *(float64x2_t *)(v286 + 2568);
        v1359 = *(float64x2_t *)(v286 + 2552);
        v1074 = *(float64x2_t *)(v286 + 2736);
        v1069 = *(float64x2_t *)(v286 + 2720);
        v1064 = *(float64x2_t *)(v286 + 2904);
        v1059 = *(float64x2_t *)(v286 + 2888);
        v1054 = *(float64x2_t *)(v286 + 3072);
        v1049 = *(float64x2_t *)(v286 + 3056);
        v1044 = *(float64x2_t *)(v286 + 3240);
        v1039 = *(float64x2_t *)(v286 + 3224);
        v1034 = *(float64x2_t *)(v286 + 3408);
        v1029 = *(float64x2_t *)(v286 + 3392);
        v294 = *(float64x2_t *)(v286 + 1424);
        v295 = *(float64x2_t *)(v286 + 1408);
        v296 = *(float64x2_t *)(v286 + 1576);
        v1025 = *(float64x2_t *)(v286 + 1592);
        v1021 = *(float64x2_t *)(v286 + 1760);
        v1018 = *(float64x2_t *)(v286 + 1744);
        v1016 = *(float64x2_t *)(v286 + 1928);
        v1014 = *(float64x2_t *)(v286 + 1912);
        v1012 = *(float64x2_t *)(v286 + 2096);
        v1010 = *(float64x2_t *)(v286 + 2080);
        v1008 = *(float64x2_t *)(v286 + 2264);
        v1006 = *(float64x2_t *)(v286 + 2248);
        v1004 = *(float64x2_t *)(v286 + 2432);
        v1002 = *(float64x2_t *)(v286 + 2416);
        v1354 = *(float64x2_t *)(v286 + 2600);
        v1000 = *(float64x2_t *)(v286 + 2584);
        v1349 = *(float64x2_t *)(v286 + 2768);
        v998 = *(float64x2_t *)(v286 + 2752);
        v297 = *(float64x2_t *)(v286 + 2936);
        v996 = *(float64x2_t *)(v286 + 2920);
        v298 = *(float64x2_t *)(v286 + 3104);
        v1344 = *(float64x2_t *)(v286 + 3088);
        v299 = *(float64x2_t *)(v286 + 3272);
        v1339 = *(float64x2_t *)(v286 + 3256);
        v994 = *(float64x2_t *)(v286 + 3440);
        v992 = *(float64x2_t *)(v286 + 3424);
        v990 = *(float64x2_t *)(v286 + 2128);
        v988 = *(float64x2_t *)(v286 + 2112);
        v986 = *(float64x2_t *)(v286 + 2296);
        v984 = *(float64x2_t *)(v286 + 2280);
        v982 = *(float64x2_t *)(v286 + 2464);
        v980 = *(float64x2_t *)(v286 + 2448);
        v978 = *(float64x2_t *)(v286 + 2632);
        v976 = *(float64x2_t *)(v286 + 2616);
        v974 = *(float64x2_t *)(v286 + 2800);
        v972 = *(float64x2_t *)(v286 + 2784);
        v970 = *(float64x2_t *)(v286 + 2968);
        v968 = *(float64x2_t *)(v286 + 2952);
        v966 = *(float64x2_t *)(v286 + 3136);
        v964 = *(float64x2_t *)(v286 + 3120);
        v962 = *(float64x2_t *)(v286 + 3304);
        v960 = *(float64x2_t *)(v286 + 3288);
        v958 = *(float64x2_t *)(v286 + 3472);
        v956 = *(float64x2_t *)(v286 + 3456);
        v18.f64[0] = *(float64_t *)(v286 + 2848);
        v300 = *(int8x16_t *)(v286 + 2832);
        v301 = *(int8x16_t *)(v286 + 2816);
        v942 = vextq_s8(v300, v300, 8uLL).u64[0];
        v944 = vextq_s8(v301, v301, 8uLL).u64[0];
        v19.f64[0] = *(float64_t *)(v286 + 3016);
        v954 = *(int8x16_t *)(v286 + 3000);
        v946 = vextq_s8(v954, v954, 8uLL).u64[0];
        v952 = *(int8x16_t *)(v286 + 2984);
        v302 = vextq_s8(v952, v952, 8uLL).u64[0];
        v21.f64[0] = *(float64_t *)(v286 + 3184);
        v303 = *(int8x16_t *)(v286 + 3168);
        v304 = vextq_s8(v303, v303, 8uLL).u64[0];
        v950 = *(int8x16_t *)(v286 + 3152);
        v305 = vextq_s8(v950, v950, 8uLL).u64[0];
        v20.f64[0] = *(float64_t *)(v286 + 3352);
        v313 = *(int8x16_t *)(v286 + 3320);
        v306 = *(int8x16_t *)(v286 + 3336);
        v307 = vextq_s8(v306, v306, 8uLL).u64[0];
        v948 = *(_QWORD *)(v286 + 3320);
        v308 = vextq_s8(v313, v313, 8uLL).u64[0];
        v309 = *(int8x16_t *)(v286 + 3504);
        v310 = *(int8x16_t *)(v286 + 3488);
        v311 = vextq_s8(v309, v309, 8uLL).u64[0];
        v312 = vextq_s8(v310, v310, 8uLL).u64[0];
        v313.i64[0] = *(_QWORD *)(v286 + 3520);
        do
        {
          v894 = v302;
          v896 = v304;
          v897 = v305;
          v900 = v311;
          v902 = v307;
          v904 = v308;
          v906 = v312;
          v908 = (float64x2_t)v313;
          v910 = v310.i64[0];
          v912 = v309.i64[0];
          v914 = v306.i64[0];
          v916 = v20;
          v918 = v303.i64[0];
          v920 = v21;
          v922 = v19;
          v924 = v301.i64[0];
          v926 = v300.i64[0];
          v928 = v18;
          v930 = v299;
          v932 = v298;
          v934 = v297;
          v936 = v296;
          v938 = v295;
          v940 = v294;
          v314 = *(float64x2_t *)((char *)v293 + 8 * v287);
          v315 = (int64x2_t *)((char *)v293 + v291 + v291);
          v316 = *(float64x2_t *)v315;
          v317 = *(float64x2_t *)((char *)v315 + 8 * v287);
          *(_QWORD *)&v318.f64[0] = vdupq_laneq_s64(*v315, 1).u64[0];
          v319 = (float64x2_t *)&v315->i8[v291 + v291];
          v320 = *v319;
          v321 = (float64x2_t)vzip1q_s64((int64x2_t)v316, (int64x2_t)v317);
          v322 = (float64x2_t *)((char *)v319 + v291);
          v323 = *v322;
          v324 = (float64x2_t *)((char *)v322 + v291);
          v325 = *v324;
          v326 = (float64x2_t *)((char *)v324 + v291);
          v327 = *v326;
          v328 = (float64x2_t *)((char *)v326 + v291);
          v329 = (float64x2_t)vzip1q_s64(*v293, (int64x2_t)v314);
          v318.f64[1] = v317.f64[1];
          v330 = (float64x2_t)vzip2q_s64(*v293, (int64x2_t)v314);
          v331 = vmlaq_laneq_f64(vmulq_n_f64(v329, v314.f64[0]), v330, v314, 1);
          v332 = vmlaq_laneq_f64(vmulq_n_f64(v321, v314.f64[0]), v318, v314, 1);
          v333 = vmlaq_laneq_f64(vmulq_n_f64(v329, v316.f64[0]), v330, v316, 1);
          v334 = vmlaq_laneq_f64(vmulq_n_f64(v321, v316.f64[0]), v318, v316, 1);
          v335 = vmlaq_laneq_f64(vmulq_n_f64(v329, v317.f64[0]), v330, v317, 1);
          v336 = vmlaq_laneq_f64(vmulq_n_f64(v329, v320.f64[0]), v330, v320, 1);
          v337 = vmlaq_laneq_f64(vmulq_n_f64(v321, v317.f64[0]), v318, v317, 1);
          v338 = vmlaq_laneq_f64(vmulq_n_f64(v321, v320.f64[0]), v318, v320, 1);
          v339 = vmlaq_laneq_f64(vmulq_n_f64(v329, v323.f64[0]), v330, v323, 1);
          v340 = vmlaq_laneq_f64(vmulq_n_f64(v321, v323.f64[0]), v318, v323, 1);
          v341 = vmlaq_laneq_f64(vmulq_n_f64(v329, v327.f64[0]), v330, v327, 1);
          v342 = vmlaq_laneq_f64(vmulq_n_f64(v321, v325.f64[0]), v318, v325, 1);
          v343 = vmlaq_laneq_f64(vmulq_n_f64(v321, v327.f64[0]), v318, v327, 1);
          v344 = vmlaq_laneq_f64(vmulq_n_f64(v329, v328->f64[0]), v330, *v328, 1);
          v345 = vmlaq_laneq_f64(vmulq_n_f64(v321, v328->f64[0]), v318, *v328, 1);
          v346 = (float64x2_t *)((char *)v328 + v291);
          v347 = vmlaq_laneq_f64(vmulq_n_f64(v329, v346->f64[0]), v330, *v346, 1);
          v348 = vmlaq_laneq_f64(vmulq_n_f64(v321, v346->f64[0]), v318, *v346, 1);
          v349 = (float64x2_t *)((char *)v346 + v291);
          v350 = vmlaq_laneq_f64(vmulq_n_f64(v329, v349->f64[0]), v330, *v349, 1);
          v351 = vmlaq_laneq_f64(vmulq_n_f64(v321, v349->f64[0]), v318, *v349, 1);
          v352 = (float64x2_t *)((char *)v349 + v291);
          v891 = vmlaq_laneq_f64(vmulq_n_f64(v329, v352->f64[0]), v330, *v352, 1);
          v884 = vmlaq_laneq_f64(vmulq_n_f64(v321, v352->f64[0]), v318, *v352, 1);
          v353 = (float64x2_t *)((char *)v352 + v291);
          v888 = vmlaq_laneq_f64(vmulq_n_f64(v329, v353->f64[0]), v330, *v353, 1);
          v880 = vmlaq_laneq_f64(vmulq_n_f64(v321, v353->f64[0]), v318, *v353, 1);
          v354 = (float64x2_t *)((char *)v353 + v291);
          v876 = vmlaq_laneq_f64(vmulq_n_f64(v329, v354->f64[0]), v330, *v354, 1);
          v872 = vmlaq_laneq_f64(vmulq_n_f64(v321, v354->f64[0]), v318, *v354, 1);
          v355 = (float64x2_t *)((char *)v354 + v291);
          v868 = vmlaq_laneq_f64(vmulq_n_f64(v329, v355->f64[0]), v330, *v355, 1);
          v864 = vmlaq_laneq_f64(vmulq_n_f64(v321, v355->f64[0]), v318, *v355, 1);
          v356 = (float64x2_t *)((char *)v355 + v291);
          v860 = vmlaq_laneq_f64(vmulq_n_f64(v329, v356->f64[0]), v330, *v356, 1);
          v856 = vmlaq_laneq_f64(vmulq_n_f64(v321, v356->f64[0]), v318, *v356, 1);
          v357 = (float64x2_t *)((char *)v356 + v291);
          v852 = vmlaq_laneq_f64(vmulq_n_f64(v329, v357->f64[0]), v330, *v357, 1);
          v849 = vmlaq_laneq_f64(vmulq_n_f64(v321, v357->f64[0]), v318, *v357, 1);
          v358 = (float64x2_t *)((char *)v357 + v291);
          v846 = vmlaq_laneq_f64(vmulq_n_f64(v329, v358->f64[0]), v330, *v358, 1);
          v844 = vmlaq_laneq_f64(vmulq_n_f64(v321, v358->f64[0]), v318, *v358, 1);
          v359 = (float64x2_t *)((char *)v358 + v291);
          v842 = vmlaq_laneq_f64(vmulq_n_f64(v329, v359->f64[0]), v330, *v359, 1);
          v840 = vmlaq_laneq_f64(vmulq_n_f64(v321, v359->f64[0]), v318, *v359, 1);
          v360 = (float64x2_t *)((char *)v359 + v291);
          v838 = vmlaq_laneq_f64(vmulq_n_f64(v329, v360->f64[0]), v330, *v360, 1);
          v836 = vmlaq_laneq_f64(vmulq_n_f64(v321, v360->f64[0]), v318, *v360, 1);
          v361 = *(float64x2_t *)((char *)v360 + 8 * v287);
          v835 = vmlaq_laneq_f64(vmulq_n_f64(v329, v361.f64[0]), v330, v361, 1);
          v834 = vmlaq_laneq_f64(vmulq_n_f64(v321, v361.f64[0]), v318, v361, 1);
          v362 = vsubq_f64(v1334, vmlaq_laneq_f64(vmulq_n_f64(v321, *(double *)v293->i64), v318, *(float64x2_t *)v293, 1));
          v363 = vsubq_f64(v1329, vmlaq_laneq_f64(vmulq_n_f64(v329, *(double *)v293->i64), v330, *(float64x2_t *)v293, 1));
          v364 = vsubq_f64(v1309, v333);
          v365 = vsubq_f64(v1314, v334);
          v366 = vsubq_f64(v1304, v337);
          v367 = vsubq_f64(v1299, v335);
          v368 = vsubq_f64(v1294, v338);
          v369 = vsubq_f64(v1289, v336);
          v370 = vsubq_f64(v1279, v339);
          v371 = vsubq_f64(v1274, v342);
          v372 = vsubq_f64(v1269, vmlaq_laneq_f64(vmulq_n_f64(v329, v325.f64[0]), v330, v325, 1));
          v373 = vsubq_f64(v1259, v341);
          v374 = vsubq_f64(v1249, v344);
          v1423 = vsubq_f64(v1423, v347);
          v1419 = vsubq_f64(v1419, v351);
          v375 = vsubq_f64(v1229, v891);
          v376 = vsubq_f64(v1209, v876);
          v377 = vsubq_f64(v1189, v860);
          v1414 = vsubq_f64(v1414, v849);
          v1409 = vsubq_f64(v1409, v852);
          v1404 = vsubq_f64(v1404, v844);
          v1399 = vsubq_f64(v1399, v846);
          v1394 = vsubq_f64(v1394, v840);
          v1389 = vsubq_f64(v1389, v842);
          v1384 = vsubq_f64(v1384, v836);
          v1379 = vsubq_f64(v1379, v838);
          v1374 = vsubq_f64(v1374, v834);
          v1334 = v362;
          *(float64x2_t *)v286 = v363;
          *(float64x2_t *)(v286 + 16) = v362;
          v1329 = v363;
          v1324 = vsubq_f64(v1324, v332);
          *(float64x2_t *)(v286 + 184) = v1324;
          v1319 = vsubq_f64(v1319, v331);
          *(float64x2_t *)(v286 + 168) = v1319;
          v1314 = v365;
          *(float64x2_t *)(v286 + 336) = v364;
          *(float64x2_t *)(v286 + 352) = v365;
          v1309 = v364;
          v1304 = v366;
          *(float64x2_t *)(v286 + 520) = v366;
          v1299 = v367;
          *(float64x2_t *)(v286 + 504) = v367;
          v1294 = v368;
          *(float64x2_t *)(v286 + 672) = v369;
          *(float64x2_t *)(v286 + 688) = v368;
          v1289 = v369;
          v1284 = vsubq_f64(v1284, v340);
          *(float64x2_t *)(v286 + 840) = v370;
          *(float64x2_t *)(v286 + 856) = v1284;
          v1279 = v370;
          v1274 = v371;
          *(float64x2_t *)(v286 + 1008) = v372;
          *(float64x2_t *)(v286 + 1024) = v371;
          v1269 = v372;
          v1264 = vsubq_f64(v1264, v343);
          *(float64x2_t *)(v286 + 1176) = v373;
          *(float64x2_t *)(v286 + 1192) = v1264;
          v1259 = v373;
          v1249 = v374;
          *(float64x2_t *)(v286 + 1344) = v374;
          v1254 = vsubq_f64(v1254, v345);
          *(float64x2_t *)(v286 + 1360) = v1254;
          v1244 = vsubq_f64(v1244, v348);
          *(float64x2_t *)(v286 + 1512) = v1423;
          *(float64x2_t *)(v286 + 1528) = v1244;
          *(float64x2_t *)(v286 + 1696) = v1419;
          v1239 = vsubq_f64(v1239, v350);
          *(float64x2_t *)(v286 + 1680) = v1239;
          v1234 = vsubq_f64(v1234, v884);
          *(float64x2_t *)(v286 + 1848) = v375;
          *(float64x2_t *)(v286 + 1864) = v1234;
          v1229 = v375;
          v1224 = vsubq_f64(v1224, v880);
          *(float64x2_t *)(v286 + 2032) = v1224;
          v1219 = vsubq_f64(v1219, v888);
          *(float64x2_t *)(v286 + 2016) = v1219;
          v1214 = vsubq_f64(v1214, v872);
          *(float64x2_t *)(v286 + 2184) = v376;
          *(float64x2_t *)(v286 + 2200) = v1214;
          v1209 = v376;
          v1204 = vsubq_f64(v1204, v864);
          *(float64x2_t *)(v286 + 2368) = v1204;
          v1199 = vsubq_f64(v1199, v868);
          *(float64x2_t *)(v286 + 2352) = v1199;
          v1194 = vsubq_f64(v1194, v856);
          *(float64x2_t *)(v286 + 2520) = v377;
          *(float64x2_t *)(v286 + 2536) = v1194;
          v1189 = v377;
          *(float64x2_t *)(v286 + 2704) = v1414;
          *(float64x2_t *)(v286 + 2688) = v1409;
          *(float64x2_t *)(v286 + 2856) = v1399;
          *(float64x2_t *)(v286 + 2872) = v1404;
          *(float64x2_t *)(v286 + 3040) = v1394;
          *(float64x2_t *)(v286 + 3024) = v1389;
          *(float64x2_t *)(v286 + 3192) = v1379;
          *(float64x2_t *)(v286 + 3208) = v1384;
          v1184 = vsubq_f64(v1184, v835);
          *(float64x2_t *)(v286 + 3360) = v1184;
          *(float64x2_t *)(v286 + 3376) = v1374;
          v378 = (int64x2_t *)&v288[(4 * v287 + v290)];
          v379 = (float64x2_t)v378[v287];
          v380 = *(float64x2_t *)((char *)v378 + 8 * v287);
          v381 = *(float64x2_t *)((char *)v378 + 24 * v287);
          *(_QWORD *)&v363.f64[0] = vdupq_laneq_s64((int64x2_t)v379, 1).u64[0];
          v382 = (float64x2_t)v378[2 * v287];
          v383 = *(float64x2_t *)((char *)v378 + 40 * v287);
          v384 = (float64x2_t)v378[3 * v287];
          v385 = (float64x2_t)vzip1q_s64((int64x2_t)v379, (int64x2_t)v381);
          v386 = *(float64x2_t *)((char *)v378 + 56 * v287);
          *(_QWORD *)&v363.f64[1] = v378->i64[v292 + 1];
          v387 = (float64x2_t)v378[4 * v287];
          v388 = (float64x2_t)vzip1q_s64(*v378, (int64x2_t)v380);
          v389 = (float64x2_t)vzip2q_s64(*v378, (int64x2_t)v380);
          v390 = vmlaq_laneq_f64(vmulq_n_f64(v388, v381.f64[0]), v389, v381, 1);
          v391 = vmlaq_laneq_f64(vmulq_n_f64(v385, v381.f64[0]), v363, v381, 1);
          v392 = vmlaq_laneq_f64(vmulq_n_f64(v388, v382.f64[0]), v389, v382, 1);
          v393 = vmlaq_laneq_f64(vmulq_n_f64(v385, v382.f64[0]), v363, v382, 1);
          v394 = vmlaq_laneq_f64(vmulq_n_f64(v388, v383.f64[0]), v389, v383, 1);
          v395 = vmlaq_laneq_f64(vmulq_n_f64(v388, v384.f64[0]), v389, v384, 1);
          v396 = vmlaq_laneq_f64(vmulq_n_f64(v385, v383.f64[0]), v363, v383, 1);
          v397 = vmlaq_laneq_f64(vmulq_n_f64(v385, v384.f64[0]), v363, v384, 1);
          v398 = vmlaq_laneq_f64(vmulq_n_f64(v388, v386.f64[0]), v389, v386, 1);
          v399 = vmlaq_laneq_f64(vmulq_n_f64(v385, v386.f64[0]), v363, v386, 1);
          v400 = vmlaq_laneq_f64(vmulq_n_f64(v388, v387.f64[0]), v389, v387, 1);
          v401 = vmlaq_laneq_f64(vmulq_n_f64(v385, v387.f64[0]), v363, v387, 1);
          v402 = *(float64x2_t *)((char *)v378 + 72 * v287);
          v403 = vmlaq_laneq_f64(vmulq_n_f64(v388, v402.f64[0]), v389, v402, 1);
          v892 = vmlaq_laneq_f64(vmulq_n_f64(v385, v402.f64[0]), v363, v402, 1);
          v404 = (float64x2_t)v378[5 * v287];
          v889 = vmlaq_laneq_f64(vmulq_n_f64(v388, v404.f64[0]), v389, v404, 1);
          v885 = vmlaq_laneq_f64(vmulq_n_f64(v385, v404.f64[0]), v363, v404, 1);
          v405 = *(float64x2_t *)((char *)v378 + 88 * v287);
          v881 = vmlaq_laneq_f64(vmulq_n_f64(v388, v405.f64[0]), v389, v405, 1);
          v877 = vmlaq_laneq_f64(vmulq_n_f64(v385, v405.f64[0]), v363, v405, 1);
          v406 = (float64x2_t)v378[6 * v287];
          v873 = vmlaq_laneq_f64(vmulq_n_f64(v388, v406.f64[0]), v389, v406, 1);
          v869 = vmlaq_laneq_f64(vmulq_n_f64(v385, v406.f64[0]), v363, v406, 1);
          v407 = *(float64x2_t *)((char *)v378 + 104 * v287);
          v865 = vmlaq_laneq_f64(vmulq_n_f64(v388, v407.f64[0]), v389, v407, 1);
          v861 = vmlaq_laneq_f64(vmulq_n_f64(v385, v407.f64[0]), v363, v407, 1);
          v408 = (float64x2_t)v378[7 * v287];
          v857 = vmlaq_laneq_f64(vmulq_n_f64(v388, v408.f64[0]), v389, v408, 1);
          v853 = vmlaq_laneq_f64(vmulq_n_f64(v385, v408.f64[0]), v363, v408, 1);
          v409 = *(float64x2_t *)((char *)v378 + 120 * v287);
          v850 = vmlaq_laneq_f64(vmulq_n_f64(v388, v409.f64[0]), v389, v409, 1);
          v847 = vmlaq_laneq_f64(vmulq_n_f64(v385, v409.f64[0]), v363, v409, 1);
          v410 = (float64x2_t)v378[8 * v287];
          v411 = vsubq_f64(v1174, vmlaq_laneq_f64(vmulq_n_f64(v388, *(double *)v378->i64), v389, *(float64x2_t *)v378, 1));
          v412 = vsubq_f64(v1164, vmlaq_laneq_f64(vmulq_n_f64(v388, v380.f64[0]), v389, v380, 1));
          v413 = vsubq_f64(v1154, vmlaq_laneq_f64(vmulq_n_f64(v388, v379.f64[0]), v389, v379, 1));
          v414 = vsubq_f64(v1144, v390);
          v1369 = vsubq_f64(v1369, v394);
          v415 = vsubq_f64(v1119, v395);
          v416 = vsubq_f64(v1109, v398);
          v417 = vsubq_f64(v1114, v399);
          v1364 = vsubq_f64(v1364, v400);
          v418 = vsubq_f64(v1094, v403);
          v1359 = vsubq_f64(v1359, v881);
          v419 = vsubq_f64(v1059, v865);
          v420 = vsubq_f64(v1039, v850);
          v1179 = vsubq_f64(v1179, vmlaq_laneq_f64(vmulq_n_f64(v385, *(double *)v378->i64), v363, *(float64x2_t *)v378, 1));
          *(float64x2_t *)(v286 + 704) = v411;
          *(float64x2_t *)(v286 + 720) = v1179;
          v1174 = v411;
          v1169 = vsubq_f64(v1169, vmlaq_laneq_f64(vmulq_n_f64(v385, v380.f64[0]), v363, v380, 1));
          *(float64x2_t *)(v286 + 872) = v412;
          *(float64x2_t *)(v286 + 888) = v1169;
          v1164 = v412;
          v1159 = vsubq_f64(v1159, vmlaq_laneq_f64(vmulq_n_f64(v385, v379.f64[0]), v363, v379, 1));
          *(float64x2_t *)(v286 + 1040) = v413;
          *(float64x2_t *)(v286 + 1056) = v1159;
          v1154 = v413;
          v1149 = vsubq_f64(v1149, v391);
          *(float64x2_t *)(v286 + 1208) = v414;
          *(float64x2_t *)(v286 + 1224) = v1149;
          v1144 = v414;
          v1134 = vsubq_f64(v1134, v392);
          *(float64x2_t *)(v286 + 1376) = v1134;
          v1139 = vsubq_f64(v1139, v393);
          *(float64x2_t *)(v286 + 1392) = v1139;
          v1129 = vsubq_f64(v1129, v396);
          *(float64x2_t *)(v286 + 1544) = v1369;
          *(float64x2_t *)(v286 + 1560) = v1129;
          v1124 = vsubq_f64(v1124, v397);
          *(float64x2_t *)(v286 + 1728) = v1124;
          v1119 = v415;
          *(float64x2_t *)(v286 + 1712) = v415;
          v1114 = v417;
          *(float64x2_t *)(v286 + 1880) = v416;
          *(float64x2_t *)(v286 + 1896) = v417;
          v1109 = v416;
          v1104 = vsubq_f64(v1104, v401);
          *(float64x2_t *)(v286 + 2064) = v1104;
          *(float64x2_t *)(v286 + 2048) = v1364;
          v1099 = vsubq_f64(v1099, v892);
          *(float64x2_t *)(v286 + 2216) = v418;
          *(float64x2_t *)(v286 + 2232) = v1099;
          v1094 = v418;
          v1084 = vsubq_f64(v1084, v889);
          *(float64x2_t *)(v286 + 2384) = v1084;
          v1089 = vsubq_f64(v1089, v885);
          *(float64x2_t *)(v286 + 2400) = v1089;
          v1079 = vsubq_f64(v1079, v877);
          *(float64x2_t *)(v286 + 2552) = v1359;
          *(float64x2_t *)(v286 + 2568) = v1079;
          v1074 = vsubq_f64(v1074, v869);
          *(float64x2_t *)(v286 + 2736) = v1074;
          v1069 = vsubq_f64(v1069, v873);
          *(float64x2_t *)(v286 + 2720) = v1069;
          v1064 = vsubq_f64(v1064, v861);
          *(float64x2_t *)(v286 + 2888) = v419;
          *(float64x2_t *)(v286 + 2904) = v1064;
          v1059 = v419;
          v1054 = vsubq_f64(v1054, v853);
          *(float64x2_t *)(v286 + 3072) = v1054;
          v1049 = vsubq_f64(v1049, v857);
          *(float64x2_t *)(v286 + 3056) = v1049;
          v1044 = vsubq_f64(v1044, v847);
          *(float64x2_t *)(v286 + 3224) = v420;
          *(float64x2_t *)(v286 + 3240) = v1044;
          v1039 = v420;
          v1029 = vsubq_f64(v1029, vmlaq_laneq_f64(vmulq_n_f64(v388, v410.f64[0]), v389, v410, 1));
          *(float64x2_t *)(v286 + 3392) = v1029;
          v1034 = vsubq_f64(v1034, vmlaq_laneq_f64(vmulq_n_f64(v385, v410.f64[0]), v363, v410, 1));
          *(float64x2_t *)(v286 + 3408) = v1034;
          v421 = (int64x2_t *)&v288[(8 * v287 + v290)];
          v422 = (float64x2_t)v421[v287];
          v423 = *(float64x2_t *)((char *)v421 + 8 * v287);
          v424 = *(float64x2_t *)((char *)v421 + 24 * v287);
          *(_QWORD *)&v380.f64[0] = vdupq_laneq_s64((int64x2_t)v422, 1).u64[0];
          v425 = (float64x2_t)v421[2 * v287];
          v426 = *(float64x2_t *)((char *)v421 + 40 * v287);
          v427 = (float64x2_t)v421[3 * v287];
          v428 = (float64x2_t)vzip1q_s64((int64x2_t)v422, (int64x2_t)v424);
          v429 = *(float64x2_t *)((char *)v421 + 56 * v287);
          v430 = (float64x2_t)v421[4 * v287];
          *(_QWORD *)&v380.f64[1] = v421->i64[v292 + 1];
          v431 = (float64x2_t)vzip1q_s64(*v421, (int64x2_t)v423);
          v432 = (float64x2_t)vzip2q_s64(*v421, (int64x2_t)v423);
          v433 = vmlaq_laneq_f64(vmulq_n_f64(v431, *(double *)v421->i64), v432, *(float64x2_t *)v421, 1);
          v434 = vmlaq_laneq_f64(vmulq_n_f64(v428, *(double *)v421->i64), v380, *(float64x2_t *)v421, 1);
          v435 = vmlaq_laneq_f64(vmulq_n_f64(v431, v423.f64[0]), v432, v423, 1);
          v436 = vmlaq_laneq_f64(vmulq_n_f64(v431, v422.f64[0]), v432, v422, 1);
          v437 = vmlaq_laneq_f64(vmulq_n_f64(v428, v423.f64[0]), v380, v423, 1);
          v438 = vmlaq_laneq_f64(vmulq_n_f64(v428, v422.f64[0]), v380, v422, 1);
          v439 = vmlaq_laneq_f64(vmulq_n_f64(v431, v424.f64[0]), v432, v424, 1);
          v440 = vmlaq_laneq_f64(vmulq_n_f64(v428, v424.f64[0]), v380, v424, 1);
          v441 = vmlaq_laneq_f64(vmulq_n_f64(v431, v425.f64[0]), v432, v425, 1);
          v442 = vmlaq_laneq_f64(vmulq_n_f64(v431, v426.f64[0]), v432, v426, 1);
          v443 = vmlaq_laneq_f64(vmulq_n_f64(v428, v425.f64[0]), v380, v425, 1);
          v444 = vmlaq_laneq_f64(vmulq_n_f64(v428, v426.f64[0]), v380, v426, 1);
          v445 = vmlaq_laneq_f64(vmulq_n_f64(v431, v427.f64[0]), v432, v427, 1);
          v446 = vmlaq_laneq_f64(vmulq_n_f64(v428, v427.f64[0]), v380, v427, 1);
          v447 = vmlaq_laneq_f64(vmulq_n_f64(v431, v429.f64[0]), v432, v429, 1);
          v448 = vmlaq_laneq_f64(vmulq_n_f64(v428, v429.f64[0]), v380, v429, 1);
          v449 = vmlaq_laneq_f64(vmulq_n_f64(v431, v430.f64[0]), v432, v430, 1);
          v450 = vmlaq_laneq_f64(vmulq_n_f64(v428, v430.f64[0]), v380, v430, 1);
          v451 = *(float64x2_t *)((char *)v421 + 72 * v287);
          v452 = vmlaq_laneq_f64(vmulq_n_f64(v431, v451.f64[0]), v432, v451, 1);
          v453 = vmlaq_laneq_f64(vmulq_n_f64(v428, v451.f64[0]), v380, v451, 1);
          v454 = (float64x2_t)v421[5 * v287];
          v455 = vmlaq_laneq_f64(vmulq_n_f64(v431, v454.f64[0]), v432, v454, 1);
          v456 = vmlaq_laneq_f64(vmulq_n_f64(v428, v454.f64[0]), v380, v454, 1);
          v457 = *(float64x2_t *)((char *)v421 + 88 * v287);
          v458 = vmlaq_laneq_f64(vmulq_n_f64(v431, v457.f64[0]), v432, v457, 1);
          v459 = (float64x2_t)v421[6 * v287];
          v460 = vmlaq_laneq_f64(vmulq_n_f64(v431, v459.f64[0]), v432, v459, 1);
          v461 = vmlaq_laneq_f64(vmulq_n_f64(v428, v457.f64[0]), v380, v457, 1);
          v462 = vmlaq_laneq_f64(vmulq_n_f64(v428, v459.f64[0]), v380, v459, 1);
          v295 = vsubq_f64(v938, v433);
          v294 = vsubq_f64(v940, v434);
          v296 = vsubq_f64(v936, v435);
          v463 = vsubq_f64(v1018, v436);
          v464 = vsubq_f64(v1021, v438);
          v465 = vsubq_f64(v1014, v439);
          v466 = vsubq_f64(v1006, v442);
          v467 = vsubq_f64(v1008, v444);
          v468 = vsubq_f64(v1002, v445);
          v469 = vsubq_f64(v1000, v447);
          v1354 = vsubq_f64(v1354, v448);
          v1349 = vsubq_f64(v1349, v450);
          v470 = vsubq_f64(v996, v452);
          v297 = vsubq_f64(v934, v453);
          v1344 = vsubq_f64(v1344, v455);
          v298 = vsubq_f64(v932, v456);
          v1339 = vsubq_f64(v1339, v458);
          v299 = vsubq_f64(v930, v461);
          *(float64x2_t *)(v286 + 1408) = v295;
          *(float64x2_t *)(v286 + 1424) = v294;
          v1025 = vsubq_f64(v1025, v437);
          *(float64x2_t *)(v286 + 1576) = v296;
          *(float64x2_t *)(v286 + 1592) = v1025;
          v1021 = v464;
          *(float64x2_t *)(v286 + 1760) = v464;
          v1018 = v463;
          *(float64x2_t *)(v286 + 1744) = v463;
          v1016 = vsubq_f64(v1016, v440);
          *(float64x2_t *)(v286 + 1912) = v465;
          *(float64x2_t *)(v286 + 1928) = v1016;
          v1014 = v465;
          v1012 = vsubq_f64(v1012, v443);
          *(float64x2_t *)(v286 + 2096) = v1012;
          v1010 = vsubq_f64(v1010, v441);
          *(float64x2_t *)(v286 + 2080) = v1010;
          v1008 = v467;
          *(float64x2_t *)(v286 + 2248) = v466;
          *(float64x2_t *)(v286 + 2264) = v467;
          v1006 = v466;
          v1002 = v468;
          *(float64x2_t *)(v286 + 2416) = v468;
          v1004 = vsubq_f64(v1004, v446);
          *(float64x2_t *)(v286 + 2432) = v1004;
          *(float64x2_t *)(v286 + 2584) = v469;
          *(float64x2_t *)(v286 + 2600) = v1354;
          v1000 = v469;
          *(float64x2_t *)(v286 + 2768) = v1349;
          v998 = vsubq_f64(v998, v449);
          *(float64x2_t *)(v286 + 2752) = v998;
          *(float64x2_t *)(v286 + 2920) = v470;
          *(float64x2_t *)(v286 + 2936) = v297;
          v996 = v470;
          *(float64x2_t *)(v286 + 3104) = v298;
          *(float64x2_t *)(v286 + 3088) = v1344;
          *(float64x2_t *)(v286 + 3256) = v1339;
          *(float64x2_t *)(v286 + 3272) = v299;
          v992 = vsubq_f64(v992, v460);
          *(float64x2_t *)(v286 + 3424) = v992;
          v994 = vsubq_f64(v994, v462);
          *(float64x2_t *)(v286 + 3440) = v994;
          v471 = (int64x2_t *)&v288[(12 * v287 + v290)];
          v472 = (float64x2_t)v471[4 * v287];
          v473 = *(float64x2_t *)((char *)v471 + 8 * v287);
          v474 = (float64x2_t)v471[v287];
          *(_QWORD *)&v460.f64[0] = vdupq_laneq_s64((int64x2_t)v474, 1).u64[0];
          v475 = *(float64x2_t *)((char *)v471 + 24 * v287);
          v476 = (float64x2_t)v471[2 * v287];
          v477 = *(float64x2_t *)((char *)v471 + 40 * v287);
          v478 = (float64x2_t)vzip1q_s64((int64x2_t)v474, (int64x2_t)v475);
          v479 = (float64x2_t)v471[3 * v287];
          v480 = *(float64x2_t *)((char *)v471 + 56 * v287);
          *(_QWORD *)&v460.f64[1] = v471->i64[v292 + 1];
          v481 = (float64x2_t)vzip1q_s64(*v471, (int64x2_t)v473);
          v482 = (float64x2_t)vzip2q_s64(*v471, (int64x2_t)v473);
          v483 = vmlaq_laneq_f64(vmulq_n_f64(v481, *(double *)v471->i64), v482, *(float64x2_t *)v471, 1);
          v484 = vmlaq_laneq_f64(vmulq_n_f64(v478, *(double *)v471->i64), v460, *(float64x2_t *)v471, 1);
          v485 = vmlaq_laneq_f64(vmulq_n_f64(v481, v473.f64[0]), v482, v473, 1);
          v486 = vmlaq_laneq_f64(vmulq_n_f64(v481, v474.f64[0]), v482, v474, 1);
          v487 = vmlaq_laneq_f64(vmulq_n_f64(v478, v473.f64[0]), v460, v473, 1);
          v488 = vmlaq_laneq_f64(vmulq_n_f64(v478, v474.f64[0]), v460, v474, 1);
          v489 = vmlaq_laneq_f64(vmulq_n_f64(v481, v475.f64[0]), v482, v475, 1);
          v490 = vmlaq_laneq_f64(vmulq_n_f64(v478, v475.f64[0]), v460, v475, 1);
          _Q4 = vmlaq_laneq_f64(vmulq_n_f64(v481, v476.f64[0]), v482, v476, 1);
          v492 = vmlaq_laneq_f64(vmulq_n_f64(v481, v477.f64[0]), v482, v477, 1);
          v493 = vmlaq_laneq_f64(vmulq_n_f64(v478, v476.f64[0]), v460, v476, 1);
          v494 = vmlaq_laneq_f64(vmulq_n_f64(v478, v477.f64[0]), v460, v477, 1);
          v495 = vmlaq_laneq_f64(vmulq_n_f64(v481, v479.f64[0]), v482, v479, 1);
          v496 = vmlaq_laneq_f64(vmulq_n_f64(v478, v479.f64[0]), v460, v479, 1);
          v497 = vmlaq_laneq_f64(vmulq_n_f64(v481, v480.f64[0]), v482, v480, 1);
          _Q19 = vmlaq_laneq_f64(vmulq_n_f64(v481, v472.f64[0]), v482, v472, 1);
          _Q21 = vmlaq_laneq_f64(vmulq_n_f64(v478, v480.f64[0]), v460, v480, 1);
          _Q16 = vmlaq_laneq_f64(vmulq_n_f64(v478, v472.f64[0]), v460, v472, 1);
          v501 = vsubq_f64(v988, v483);
          v502 = vsubq_f64(v984, v485);
          v503 = vsubq_f64(v986, v487);
          v504 = vsubq_f64(v982, v488);
          v505 = vsubq_f64(v976, v489);
          v506 = vsubq_f64(v978, v490);
          v507 = vsubq_f64(v968, v492);
          v508 = vsubq_f64(v960, v497);
          v990 = vsubq_f64(v990, v484);
          *(float64x2_t *)(v286 + 2128) = v990;
          v988 = v501;
          *(float64x2_t *)(v286 + 2112) = v501;
          v986 = v503;
          *(float64x2_t *)(v286 + 2280) = v502;
          *(float64x2_t *)(v286 + 2296) = v503;
          v984 = v502;
          v982 = v504;
          *(float64x2_t *)(v286 + 2464) = v504;
          v980 = vsubq_f64(v980, v486);
          *(float64x2_t *)(v286 + 2448) = v980;
          v978 = v506;
          *(float64x2_t *)(v286 + 2616) = v505;
          *(float64x2_t *)(v286 + 2632) = v506;
          v976 = v505;
          v972 = vsubq_f64(v972, _Q4);
          *(float64x2_t *)(v286 + 2784) = v972;
          v974 = vsubq_f64(v974, v493);
          *(float64x2_t *)(v286 + 2800) = v974;
          v970 = vsubq_f64(v970, v494);
          *(float64x2_t *)(v286 + 2952) = v507;
          *(float64x2_t *)(v286 + 2968) = v970;
          v968 = v507;
          v966 = vsubq_f64(v966, v496);
          *(float64x2_t *)(v286 + 3136) = v966;
          v964 = vsubq_f64(v964, v495);
          *(float64x2_t *)(v286 + 3120) = v964;
          v962 = vsubq_f64(v962, _Q21);
          *(float64x2_t *)(v286 + 3288) = v508;
          *(float64x2_t *)(v286 + 3304) = v962;
          v960 = v508;
          v958 = vsubq_f64(v958, _Q16);
          *(float64x2_t *)(v286 + 3472) = v958;
          v956 = vsubq_f64(v956, _Q19);
          *(float64x2_t *)(v286 + 3456) = v956;
          v509 = (int64x2_t *)&v288[(16 * v287 + v290)];
          _Q2 = *(float64x2_t *)((char *)v509 + 8 * v287);
          v511 = (float64x2_t)v509[v287];
          v512 = *(float64x2_t *)((char *)v509 + 24 * v287);
          _Q24 = (float64x2_t)v509[2 * v287];
          v514 = (float64x2_t)vzip1q_s64((int64x2_t)v511, (int64x2_t)v512);
          *(_QWORD *)&v496.f64[0] = vdupq_laneq_s64((int64x2_t)v511, 1).u64[0];
          *(_QWORD *)&v496.f64[1] = v509->i64[v292 + 1];
          v515 = (float64x2_t)vzip1q_s64(*v509, (int64x2_t)_Q2);
          v516 = (float64x2_t)vzip2q_s64(*v509, (int64x2_t)_Q2);
          _Q22 = vmulq_f64(_Q24, *(float64x2_t *)v509);
          v518 = vmlaq_laneq_f64(vmulq_n_f64(v515, *(double *)v509->i64), v516, *(float64x2_t *)v509, 1);
          *(_QWORD *)&_Q16.f64[0] = v509->i64[1];
          __asm { FMLA            D22, D16, V24.D[1] }
          _Q16 = vmulq_f64(_Q24, _Q2);
          v520 = vmlaq_laneq_f64(vmulq_n_f64(v515, _Q2.f64[0]), v516, _Q2, 1);
          *(_QWORD *)&_Q19.f64[0] = v509->i64[(unint64_t)v291 / 8 + 1];
          __asm { FMLA            D16, D19, V24.D[1] }
          _Q19 = vmulq_f64(_Q24, v511);
          *(_QWORD *)&_Q21.f64[0] = v509[v287].i64[1];
          __asm { FMLA            D19, D21, V24.D[1] }
          v522 = vmlaq_laneq_f64(vmulq_n_f64(v514, *(double *)v509->i64), v496, *(float64x2_t *)v509, 1);
          _Q23 = vmulq_f64(_Q24, v512);
          _Q4.f64[0] = v496.f64[1];
          __asm { FMLA            D23, D4, V24.D[1] }
          v524 = vmlaq_laneq_f64(vmulq_n_f64(v515, v511.f64[0]), v516, v511, 1);
          v525 = vmlaq_laneq_f64(vmulq_n_f64(v514, _Q2.f64[0]), v496, _Q2, 1);
          v526 = vmlaq_laneq_f64(vmulq_n_f64(v515, v512.f64[0]), v516, v512, 1);
          *(_QWORD *)&_Q4.f64[0] = v924;
          v527 = vmlaq_laneq_f64(vmulq_n_f64(v515, _Q24.f64[0]), v516, _Q24, 1);
          v528 = vmlaq_laneq_f64(vmulq_n_f64(v514, v511.f64[0]), v496, v511, 1);
          *(_QWORD *)&v511.f64[0] = v926;
          *(_QWORD *)&v511.f64[1] = v942;
          *(_QWORD *)&_Q4.f64[1] = v944;
          v529 = vmlaq_laneq_f64(vmulq_n_f64(v514, v512.f64[0]), v496, v512, 1);
          *(_QWORD *)&v448.f64[0] = v954.i64[0];
          *(_QWORD *)&v448.f64[1] = v946;
          *(_QWORD *)&v458.f64[0] = v952.i64[0];
          *(_QWORD *)&v458.f64[1] = v894;
          v530 = vmlaq_laneq_f64(vmulq_n_f64(v514, _Q24.f64[0]), v496, _Q24, 1);
          *(_QWORD *)&v496.f64[0] = v918;
          *(_QWORD *)&v496.f64[1] = v896;
          _Q1 = vmulq_f64(_Q24, _Q24);
          *(_QWORD *)&v450.f64[0] = v950.i64[0];
          *(_QWORD *)&v450.f64[1] = v897;
          *(_QWORD *)&_Q2.f64[0] = v509[2 * v287].i64[1];
          __asm { FMLA            D1, D2, V24.D[1] }
          *(_QWORD *)&_Q24.f64[0] = v914;
          *(_QWORD *)&_Q24.f64[1] = v902;
          *(_QWORD *)&v455.f64[0] = v948;
          *(_QWORD *)&v455.f64[1] = v904;
          v301 = (int8x16_t)vsubq_f64(_Q4, v518);
          v18 = vsubq_f64(v928, _Q22);
          *(_QWORD *)&_Q22.f64[0] = v910;
          *(_QWORD *)&v518.f64[0] = v912;
          *(_QWORD *)&v518.f64[1] = v900;
          *(_QWORD *)&_Q22.f64[1] = v906;
          v300 = (int8x16_t)vsubq_f64(v511, v522);
          v532 = (int8x16_t)vsubq_f64(v448, v525);
          v533 = (int8x16_t)vsubq_f64(v458, v520);
          *(int8x16_t *)(v286 + 2816) = v301;
          v19 = vsubq_f64(v922, _Q16);
          v303 = (int8x16_t)vsubq_f64(v496, v528);
          v942 = vextq_s8(v300, v300, 8uLL).u64[0];
          v944 = vextq_s8(v301, v301, 8uLL).u64[0];
          v534 = (int8x16_t)vsubq_f64(v450, v524);
          v302 = vextq_s8(v533, v533, 8uLL).u64[0];
          v21 = vsubq_f64(v920, _Q19);
          v306 = (int8x16_t)vsubq_f64(_Q24, v529);
          v946 = vextq_s8(v532, v532, 8uLL).u64[0];
          v304 = vextq_s8(v303, v303, 8uLL).u64[0];
          v535 = (int8x16_t)vsubq_f64(v455, v526);
          v305 = vextq_s8(v534, v534, 8uLL).u64[0];
          v20 = vsubq_f64(v916, _Q23);
          v309 = (int8x16_t)vsubq_f64(v518, v530);
          v307 = vextq_s8(v306, v306, 8uLL).u64[0];
          v308 = vextq_s8(v535, v535, 8uLL).u64[0];
          v313 = (int8x16_t)vsubq_f64(v908, _Q1);
          *(float64_t *)(v286 + 2848) = v18.f64[0];
          v952.i64[0] = v533.i64[0];
          *(int8x16_t *)(v286 + 2984) = v533;
          *(int8x16_t *)(v286 + 3000) = v532;
          *(float64_t *)(v286 + 3016) = v19.f64[0];
          v950.i64[0] = v534.i64[0];
          *(int8x16_t *)(v286 + 3152) = v534;
          *(int8x16_t *)(v286 + 3168) = v303;
          *(float64_t *)(v286 + 3184) = v21.f64[0];
          v948 = v535.i64[0];
          *(int8x16_t *)(v286 + 3320) = v535;
          *(int8x16_t *)(v286 + 3336) = v306;
          *(float64_t *)(v286 + 3352) = v20.f64[0];
          *(_QWORD *)(v286 + 3520) = v313.i64[0];
          v310 = (int8x16_t)vsubq_f64(_Q22, v527);
          *(int8x16_t *)(v286 + 3488) = v310;
          *(int8x16_t *)(v286 + 3504) = v309;
          v312 = vextq_s8(v310, v310, 8uLL).u64[0];
          LODWORD(v509) = v290 + 4;
          v290 += 2;
          ++v293;
          v311 = vextq_s8(v309, v309, 8uLL).u64[0];
          *(int8x16_t *)(v286 + 2832) = v300;
          v954.i64[0] = v532.i64[0];
        }
        while (v509 <= v287);
        v289 = *(_DWORD *)(v4 + 16);
      }
      if ((v289 & 1) != 0)
      {
        LODWORD(v1543) = 1;
        HIDWORD(v1543) = v287;
        p_p_category = (char ***)&v288[(v287 - 1)];
        LODWORD(v1545) = v287 - 1;
        category = (char *)&v1543;
        *(_QWORD *)&v1430.f64[1] = &category;
        *(_QWORD *)&v1431 = &v1543;
        *((_QWORD *)&v1431 + 1) = 0x3FF0000000000000;
        if (v288 == (double *)v286)
        {
          p_p = (double *)&__p;
          sub_20FBAAA60((double *)&__p, (uint64_t)&v1430);
          if (v286 >= (unint64_t)&v1552 || (unint64_t)&__p >= v286 + 3528)
          {
            v801 = 0;
            p_p = (double *)&v1551;
            v799 = 440;
            do
            {
              v802 = (float64x2_t *)(v286 + v801);
              v803 = vsubq_f64(*(float64x2_t *)(v286 + v801 + 16), *(float64x2_t *)&__p.__r_.__value_.__r.__words[v801 / 8 + 2]);
              *v802 = vsubq_f64(*(float64x2_t *)(v286 + v801), *(float64x2_t *)((char *)&__p.__r_.__value_.__l.__data_ + v801));
              v802[1] = v803;
              v801 += 32;
            }
            while (v801 != 3520);
          }
          else
          {
            v799 = 0;
          }
          v804 = 8 * v799;
          do
          {
            v805 = *p_p++;
            *(double *)(v286 + v804) = *(double *)(v286 + v804) - v805;
            v804 += 8;
          }
          while (v804 != 3528);
        }
        else
        {
          sub_20E8BE654(1, 0, 21, 21, 1, &v288[(v287 - 1)], v287, &v288[(v287 - 1)], -1.0, 1.0, v287, (double *)v286, 21);
        }
      }
      break;
    case 15:
      v23 = *(_QWORD *)v2;
      v24 = *(unsigned int *)(v4 + 16);
      v25 = *(double **)v4;
      LOBYTE(v26) = *(_DWORD *)(v4 + 16);
      if (v24 >= 2)
      {
        v27 = 0;
        v1341 = *(float64x2_t *)(v23 + 16);
        v1336 = *(float64x2_t *)v23;
        v1331 = *(float64x2_t *)(v23 + 136);
        v1326 = *(float64x2_t *)(v23 + 120);
        v1321 = *(float64x2_t *)(v23 + 256);
        v1316 = *(float64x2_t *)(v23 + 240);
        v1311 = *(float64x2_t *)(v23 + 376);
        v1306 = *(float64x2_t *)(v23 + 360);
        v28 = 8 * v24;
        v1301 = *(float64x2_t *)(v23 + 496);
        v1296 = *(float64x2_t *)(v23 + 480);
        v29 = *(float64x2_t *)(v23 + 600);
        v30 = *(float64x2_t *)(v23 + 616);
        v31 = *(float64x2_t *)(v23 + 720);
        v1126 = *(float64x2_t *)(v23 + 736);
        v32 = *(float64x2_t *)(v23 + 856);
        v1291 = *(float64x2_t *)(v23 + 840);
        v33 = *(float64x2_t *)(v23 + 960);
        v1286 = *(float64x2_t *)(v23 + 976);
        v34 = *(float64x2_t *)(v23 + 1080);
        v1281 = *(float64x2_t *)(v23 + 1096);
        v1276 = *(float64x2_t *)(v23 + 1216);
        v1271 = *(float64x2_t *)(v23 + 1200);
        v1266 = *(float64x2_t *)(v23 + 1336);
        v1261 = *(float64x2_t *)(v23 + 1320);
        v1256 = *(float64x2_t *)(v23 + 1456);
        v1251 = *(float64x2_t *)(v23 + 1440);
        v1246 = *(float64x2_t *)(v23 + 1576);
        v1241 = *(float64x2_t *)(v23 + 1560);
        v1236 = *(float64x2_t *)(v23 + 1696);
        v1231 = *(float64x2_t *)(v23 + 1680);
        v1226 = *(float64x2_t *)(v23 + 528);
        v1221 = *(float64x2_t *)(v23 + 512);
        v35 = 3 * v24;
        v36 = *(int64x2_t **)v4;
        v37 = *(float64x2_t *)(v23 + 648);
        v1216 = *(float64x2_t *)(v23 + 632);
        v38 = *(float64x2_t *)(v23 + 768);
        v1211 = *(float64x2_t *)(v23 + 752);
        v39 = *(float64x2_t *)(v23 + 888);
        v1206 = *(float64x2_t *)(v23 + 872);
        v40 = *(float64x2_t *)(v23 + 1008);
        v1201 = *(float64x2_t *)(v23 + 992);
        v41 = *(float64x2_t *)(v23 + 1128);
        v1196 = *(float64x2_t *)(v23 + 1112);
        v42 = *(float64x2_t *)(v23 + 1248);
        v1191 = *(float64x2_t *)(v23 + 1232);
        v43 = *(float64x2_t *)(v23 + 1368);
        v1186 = *(float64x2_t *)(v23 + 1352);
        v44 = *(float64x2_t *)(v23 + 1488);
        v1181 = *(float64x2_t *)(v23 + 1472);
        v1176 = *(float64x2_t *)(v23 + 1608);
        v1171 = *(float64x2_t *)(v23 + 1592);
        v1166 = *(float64x2_t *)(v23 + 1728);
        v1161 = *(float64x2_t *)(v23 + 1712);
        v45 = *(float64x2_t *)(v23 + 1040);
        v46 = *(float64x2_t *)(v23 + 1024);
        v48 = *(float64x2_t *)(v23 + 1144);
        v47 = *(float64x2_t *)(v23 + 1160);
        v49 = *(float64x2_t *)(v23 + 1280);
        v1156 = *(float64x2_t *)(v23 + 1264);
        v50 = *(float64x2_t *)(v23 + 1400);
        v1151 = *(float64x2_t *)(v23 + 1384);
        v51 = *(float64x2_t *)(v23 + 1520);
        v1146 = *(float64x2_t *)(v23 + 1504);
        v52 = *(float64x2_t *)(v23 + 1640);
        v1141 = *(float64x2_t *)(v23 + 1624);
        v53 = *(float64x2_t *)(v23 + 1760);
        v1136 = *(float64x2_t *)(v23 + 1744);
        v18.f64[0] = *(float64_t *)(v23 + 1552);
        v54 = *(int8x16_t *)(v23 + 1536);
        v55 = (float64x2_t)vextq_s8(v54, v54, 8uLL);
        v1131 = *(_QWORD *)&v55.f64[0];
        v55.f64[0] = *(float64_t *)(v23 + 1672);
        v56 = *(int8x16_t *)(v23 + 1656);
        v57 = vextq_s8(v56, v56, 8uLL).u64[0];
        v58 = *(int8x16_t *)(v23 + 1776);
        v59 = vextq_s8(v58, v58, 8uLL).u64[0];
        v17.f64[0] = *(float64_t *)(v23 + 1792);
        do
        {
          v1056 = v57;
          v1061 = v59;
          v1346 = v17;
          v1066 = v58.i64[0];
          v1071 = v56.i64[0];
          v1351 = v55;
          v1076 = v54.i64[0];
          v1081 = v18;
          v1086 = v53;
          v1356 = v52;
          v1091 = v51;
          v1361 = v50;
          v1366 = v49;
          v1371 = v48;
          v1096 = v47;
          v1101 = v46;
          v1106 = v45;
          v1376 = v44;
          v1111 = v43;
          v1381 = v42;
          v1386 = v41;
          v1116 = v40;
          v1391 = v39;
          v1396 = v38;
          v1121 = v37;
          v1401 = v34;
          v1406 = v33;
          v1411 = v32;
          v1416 = v31;
          v1421 = v29;
          v60 = *(float64x2_t *)((char *)v36 + 8 * v24);
          v61 = (float64x2_t *)&v36->i8[v28 + v28];
          v62 = *v61;
          v63 = (float64x2_t *)((char *)v61 + v28);
          v64 = *v63;
          *(_QWORD *)&v65.f64[0] = vdupq_laneq_s64((int64x2_t)v62, 1).u64[0];
          v66 = (float64x2_t *)((char *)v63 + v28);
          v67 = *v66;
          v68 = (float64x2_t *)((char *)v66 + v28);
          v69 = (float64x2_t)vzip1q_s64((int64x2_t)v62, (int64x2_t)v64);
          v70 = *v68;
          v71 = (float64x2_t *)((char *)v68 + v28);
          v72 = *v71;
          v73 = (float64x2_t *)((char *)v71 + v28);
          v74 = *v73;
          v75 = *(float64x2_t *)((char *)v73 + 8 * v24);
          v76 = (float64x2_t *)((char *)v73 + v28 + v28);
          v77 = *v76;
          v78 = (float64x2_t *)((char *)v76 + v28);
          v79 = *v78;
          v80 = *(float64x2_t *)((char *)v78 + 8 * v24);
          v81 = (float64x2_t *)((char *)v78 + v28 + v28);
          v82 = (float64x2_t)vzip1q_s64(*v36, (int64x2_t)v60);
          v65.f64[1] = v64.f64[1];
          v83 = (float64x2_t)vzip2q_s64(*v36, (int64x2_t)v60);
          v1051 = vmlaq_laneq_f64(vmulq_n_f64(v82, *(double *)v36->i64), v83, *(float64x2_t *)v36, 1);
          v84 = vmlaq_laneq_f64(vmulq_n_f64(v82, v60.f64[0]), v83, v60, 1);
          v1046 = vmlaq_laneq_f64(vmulq_n_f64(v69, *(double *)v36->i64), v65, *(float64x2_t *)v36, 1);
          v85 = vmlaq_laneq_f64(vmulq_n_f64(v69, v60.f64[0]), v65, v60, 1);
          v1041 = vmlaq_laneq_f64(vmulq_n_f64(v82, v62.f64[0]), v83, v62, 1);
          v86 = vmlaq_laneq_f64(vmulq_n_f64(v69, v62.f64[0]), v65, v62, 1);
          v87 = vmlaq_laneq_f64(vmulq_n_f64(v82, v64.f64[0]), v83, v64, 1);
          v1036 = vmlaq_laneq_f64(vmulq_n_f64(v82, v67.f64[0]), v83, v67, 1);
          v88 = vmlaq_laneq_f64(vmulq_n_f64(v69, v64.f64[0]), v65, v64, 1);
          v89 = vmlaq_laneq_f64(vmulq_n_f64(v69, v67.f64[0]), v65, v67, 1);
          v1031 = vmlaq_laneq_f64(vmulq_n_f64(v82, v70.f64[0]), v83, v70, 1);
          v90 = v30;
          v91 = vmlaq_laneq_f64(vmulq_n_f64(v69, v70.f64[0]), v65, v70, 1);
          v92 = vmlaq_laneq_f64(vmulq_n_f64(v82, v72.f64[0]), v83, v72, 1);
          v93 = vmlaq_laneq_f64(vmulq_n_f64(v82, v74.f64[0]), v83, v74, 1);
          v94 = vmlaq_laneq_f64(vmulq_n_f64(v69, v72.f64[0]), v65, v72, 1);
          v95 = vmlaq_laneq_f64(vmulq_n_f64(v69, v74.f64[0]), v65, v74, 1);
          v96 = vmlaq_laneq_f64(vmulq_n_f64(v82, v75.f64[0]), v83, v75, 1);
          v97 = vmlaq_laneq_f64(vmulq_n_f64(v69, v75.f64[0]), v65, v75, 1);
          v98 = vmlaq_laneq_f64(vmulq_n_f64(v82, v77.f64[0]), v83, v77, 1);
          v99 = vmlaq_laneq_f64(vmulq_n_f64(v82, v79.f64[0]), v83, v79, 1);
          v100 = vmlaq_laneq_f64(vmulq_n_f64(v69, v77.f64[0]), v65, v77, 1);
          v101 = vmlaq_laneq_f64(vmulq_n_f64(v69, v79.f64[0]), v65, v79, 1);
          v102 = vmlaq_laneq_f64(vmulq_n_f64(v82, v80.f64[0]), v83, v80, 1);
          v103 = vmlaq_laneq_f64(vmulq_n_f64(v69, v80.f64[0]), v65, v80, 1);
          v104 = vmlaq_laneq_f64(vmulq_n_f64(v82, v81->f64[0]), v83, *v81, 1);
          v105 = vmlaq_laneq_f64(vmulq_n_f64(v69, v81->f64[0]), v65, *v81, 1);
          v106 = (float64x2_t *)((char *)v81 + v28);
          v107 = vmlaq_laneq_f64(vmulq_n_f64(v82, v106->f64[0]), v83, *v106, 1);
          v108 = *(float64x2_t *)((char *)v106 + 8 * v24);
          v109 = vmlaq_laneq_f64(vmulq_n_f64(v69, v106->f64[0]), v65, *v106, 1);
          v110 = vmlaq_laneq_f64(vmulq_n_f64(v82, v108.f64[0]), v83, v108, 1);
          v111 = vmlaq_laneq_f64(vmulq_n_f64(v69, v108.f64[0]), v65, v108, 1);
          v112 = vsubq_f64(v1336, v1051);
          v113 = vsubq_f64(v1331, v85);
          v114 = vsubq_f64(v1326, v84);
          v115 = vsubq_f64(v1321, v86);
          v116 = vsubq_f64(v1316, v1041);
          v117 = vsubq_f64(v1311, v88);
          v118 = vsubq_f64(v1306, v87);
          v119 = vsubq_f64(v1301, v89);
          v120 = vsubq_f64(v1296, v1036);
          v30 = vsubq_f64(v90, v91);
          v29 = vsubq_f64(v1421, v1031);
          v31 = vsubq_f64(v1416, v92);
          v32 = vsubq_f64(v1411, v95);
          v121 = vsubq_f64(v1291, v93);
          v122 = vsubq_f64(v1286, v97);
          v33 = vsubq_f64(v1406, v96);
          v123 = vsubq_f64(v1281, v100);
          v34 = vsubq_f64(v1401, v98);
          v124 = vsubq_f64(v1276, v101);
          v125 = vsubq_f64(v1271, v99);
          v126 = vsubq_f64(v1266, v103);
          v127 = vsubq_f64(v1261, v102);
          v128 = vsubq_f64(v1256, v105);
          v129 = vsubq_f64(v1251, v104);
          v130 = vsubq_f64(v1246, v109);
          v131 = vsubq_f64(v1241, v107);
          v132 = vsubq_f64(v1236, v111);
          v133 = vsubq_f64(v1231, v110);
          v1341 = vsubq_f64(v1341, v1046);
          *(float64x2_t *)v23 = v112;
          *(float64x2_t *)(v23 + 16) = v1341;
          v1336 = v112;
          v1331 = v113;
          *(float64x2_t *)(v23 + 136) = v113;
          v1326 = v114;
          *(float64x2_t *)(v23 + 120) = v114;
          v1321 = v115;
          *(float64x2_t *)(v23 + 240) = v116;
          *(float64x2_t *)(v23 + 256) = v115;
          v1316 = v116;
          v1311 = v117;
          *(float64x2_t *)(v23 + 360) = v118;
          *(float64x2_t *)(v23 + 376) = v117;
          v1306 = v118;
          v1301 = v119;
          *(float64x2_t *)(v23 + 480) = v120;
          *(float64x2_t *)(v23 + 496) = v119;
          v1296 = v120;
          *(float64x2_t *)(v23 + 600) = v29;
          *(float64x2_t *)(v23 + 616) = v30;
          v1126 = vsubq_f64(v1126, v94);
          *(float64x2_t *)(v23 + 720) = v31;
          *(float64x2_t *)(v23 + 736) = v1126;
          *(float64x2_t *)(v23 + 840) = v121;
          *(float64x2_t *)(v23 + 856) = v32;
          v1291 = v121;
          v1286 = v122;
          *(float64x2_t *)(v23 + 960) = v33;
          *(float64x2_t *)(v23 + 976) = v122;
          v1281 = v123;
          *(float64x2_t *)(v23 + 1080) = v34;
          *(float64x2_t *)(v23 + 1096) = v123;
          v1276 = v124;
          *(float64x2_t *)(v23 + 1200) = v125;
          *(float64x2_t *)(v23 + 1216) = v124;
          v1271 = v125;
          v1266 = v126;
          *(float64x2_t *)(v23 + 1320) = v127;
          *(float64x2_t *)(v23 + 1336) = v126;
          v1261 = v127;
          v1256 = v128;
          *(float64x2_t *)(v23 + 1456) = v128;
          v1251 = v129;
          *(float64x2_t *)(v23 + 1440) = v129;
          v1246 = v130;
          *(float64x2_t *)(v23 + 1560) = v131;
          *(float64x2_t *)(v23 + 1576) = v130;
          v1241 = v131;
          v1236 = v132;
          *(float64x2_t *)(v23 + 1680) = v133;
          *(float64x2_t *)(v23 + 1696) = v132;
          v1231 = v133;
          v134 = (int64x2_t *)&v25[(4 * v24 + v27)];
          v135 = (float64x2_t)v134[4 * v24];
          v136 = *(float64x2_t *)((char *)v134 + 8 * v24);
          v137 = (float64x2_t)v134[v24];
          *(_QWORD *)&v112.f64[0] = vdupq_laneq_s64((int64x2_t)v137, 1).u64[0];
          v138 = *(float64x2_t *)((char *)v134 + 24 * v24);
          v139 = (float64x2_t)v134[2 * v24];
          v140 = *(float64x2_t *)((char *)v134 + 40 * v24);
          v141 = (float64x2_t)vzip1q_s64((int64x2_t)v137, (int64x2_t)v138);
          v142 = (float64x2_t)v134[3 * v24];
          v143 = *(float64x2_t *)((char *)v134 + 56 * v24);
          *(_QWORD *)&v112.f64[1] = v134->i64[v35 + 1];
          v144 = *(float64x2_t *)((char *)v134 + 72 * v24);
          v145 = (float64x2_t)v134[5 * v24];
          v146 = (float64x2_t)vzip1q_s64(*v134, (int64x2_t)v136);
          v147 = (float64x2_t)vzip2q_s64(*v134, (int64x2_t)v136);
          v148 = vmlaq_laneq_f64(vmulq_n_f64(v146, *(double *)v134->i64), v147, *(float64x2_t *)v134, 1);
          v149 = vmlaq_laneq_f64(vmulq_n_f64(v146, v136.f64[0]), v147, v136, 1);
          v150 = vmlaq_laneq_f64(vmulq_n_f64(v141, *(double *)v134->i64), v112, *(float64x2_t *)v134, 1);
          v151 = vmlaq_laneq_f64(vmulq_n_f64(v141, v136.f64[0]), v112, v136, 1);
          v152 = vmlaq_laneq_f64(vmulq_n_f64(v146, v137.f64[0]), v147, v137, 1);
          v153 = vmlaq_laneq_f64(vmulq_n_f64(v141, v137.f64[0]), v112, v137, 1);
          v154 = vmlaq_laneq_f64(vmulq_n_f64(v146, v138.f64[0]), v147, v138, 1);
          v155 = vmlaq_laneq_f64(vmulq_n_f64(v146, v139.f64[0]), v147, v139, 1);
          v156 = vmlaq_laneq_f64(vmulq_n_f64(v141, v138.f64[0]), v112, v138, 1);
          v157 = vmlaq_laneq_f64(vmulq_n_f64(v141, v139.f64[0]), v112, v139, 1);
          v158 = vmlaq_laneq_f64(vmulq_n_f64(v146, v140.f64[0]), v147, v140, 1);
          v159 = vmlaq_laneq_f64(vmulq_n_f64(v141, v140.f64[0]), v112, v140, 1);
          v160 = vmlaq_laneq_f64(vmulq_n_f64(v146, v142.f64[0]), v147, v142, 1);
          v161 = vmlaq_laneq_f64(vmulq_n_f64(v146, v143.f64[0]), v147, v143, 1);
          v162 = vmlaq_laneq_f64(vmulq_n_f64(v141, v142.f64[0]), v112, v142, 1);
          v163 = vmlaq_laneq_f64(vmulq_n_f64(v141, v143.f64[0]), v112, v143, 1);
          v164 = vmlaq_laneq_f64(vmulq_n_f64(v146, v135.f64[0]), v147, v135, 1);
          v165 = vmlaq_laneq_f64(vmulq_n_f64(v141, v135.f64[0]), v112, v135, 1);
          v166 = vmlaq_laneq_f64(vmulq_n_f64(v146, v144.f64[0]), v147, v144, 1);
          v167 = vmlaq_laneq_f64(vmulq_n_f64(v146, v145.f64[0]), v147, v145, 1);
          v168 = vmlaq_laneq_f64(vmulq_n_f64(v141, v144.f64[0]), v112, v144, 1);
          v169 = vmlaq_laneq_f64(vmulq_n_f64(v141, v145.f64[0]), v112, v145, 1);
          v170 = vsubq_f64(v1221, v148);
          v171 = vsubq_f64(v1216, v149);
          v37 = vsubq_f64(v1121, v151);
          v172 = vsubq_f64(v1211, v152);
          v38 = vsubq_f64(v1396, v153);
          v173 = vsubq_f64(v1206, v154);
          v39 = vsubq_f64(v1391, v156);
          v174 = vsubq_f64(v1201, v155);
          v40 = vsubq_f64(v1116, v157);
          v175 = vsubq_f64(v1196, v158);
          v41 = vsubq_f64(v1386, v159);
          v176 = vsubq_f64(v1191, v160);
          v42 = vsubq_f64(v1381, v162);
          v177 = vsubq_f64(v1186, v161);
          v43 = vsubq_f64(v1111, v163);
          v44 = vsubq_f64(v1376, v165);
          v178 = vsubq_f64(v1171, v166);
          v179 = vsubq_f64(v1176, v168);
          v180 = vsubq_f64(v1161, v167);
          v1226 = vsubq_f64(v1226, v150);
          *(float64x2_t *)(v23 + 512) = v170;
          *(float64x2_t *)(v23 + 528) = v1226;
          v1221 = v170;
          *(float64x2_t *)(v23 + 632) = v171;
          *(float64x2_t *)(v23 + 648) = v37;
          v1216 = v171;
          *(float64x2_t *)(v23 + 752) = v172;
          *(float64x2_t *)(v23 + 768) = v38;
          v1211 = v172;
          *(float64x2_t *)(v23 + 872) = v173;
          *(float64x2_t *)(v23 + 888) = v39;
          v1206 = v173;
          *(float64x2_t *)(v23 + 992) = v174;
          *(float64x2_t *)(v23 + 1008) = v40;
          v1201 = v174;
          *(float64x2_t *)(v23 + 1112) = v175;
          *(float64x2_t *)(v23 + 1128) = v41;
          v1196 = v175;
          *(float64x2_t *)(v23 + 1232) = v176;
          *(float64x2_t *)(v23 + 1248) = v42;
          v1191 = v176;
          *(float64x2_t *)(v23 + 1352) = v177;
          *(float64x2_t *)(v23 + 1368) = v43;
          v1186 = v177;
          v1181 = vsubq_f64(v1181, v164);
          *(float64x2_t *)(v23 + 1472) = v1181;
          *(float64x2_t *)(v23 + 1488) = v44;
          v1176 = v179;
          *(float64x2_t *)(v23 + 1592) = v178;
          *(float64x2_t *)(v23 + 1608) = v179;
          v1171 = v178;
          v181 = (int64x2_t *)&v25[(8 * v24 + v27)];
          v1166 = vsubq_f64(v1166, v169);
          *(float64x2_t *)(v23 + 1712) = v180;
          *(float64x2_t *)(v23 + 1728) = v1166;
          v1161 = v180;
          v182 = *(float64x2_t *)((char *)v181 + 8 * v24);
          v183 = (float64x2_t)v181[v24];
          v184 = *(float64x2_t *)((char *)v181 + 24 * v24);
          *(_QWORD *)&v172.f64[0] = vdupq_laneq_s64((int64x2_t)v183, 1).u64[0];
          v185 = (float64x2_t)v181[2 * v24];
          v186 = (float64x2_t)vzip1q_s64((int64x2_t)v183, (int64x2_t)v184);
          v187 = *(float64x2_t *)((char *)v181 + 40 * v24);
          v188 = (float64x2_t)vzip1q_s64(*v181, (int64x2_t)v182);
          *(_QWORD *)&v172.f64[1] = v181->i64[v35 + 1];
          v189 = (float64x2_t)vzip2q_s64(*v181, (int64x2_t)v182);
          v190 = vmlaq_laneq_f64(vmulq_n_f64(v188, *(double *)v181->i64), v189, *(float64x2_t *)v181, 1);
          v191 = vmlaq_laneq_f64(vmulq_n_f64(v188, v182.f64[0]), v189, v182, 1);
          v192 = vmlaq_laneq_f64(vmulq_n_f64(v186, *(double *)v181->i64), v172, *(float64x2_t *)v181, 1);
          v193 = vmlaq_laneq_f64(vmulq_n_f64(v186, v182.f64[0]), v172, v182, 1);
          v194 = vmlaq_laneq_f64(vmulq_n_f64(v188, v183.f64[0]), v189, v183, 1);
          v195 = vmlaq_laneq_f64(vmulq_n_f64(v186, v183.f64[0]), v172, v183, 1);
          v196 = vmlaq_laneq_f64(vmulq_n_f64(v188, v184.f64[0]), v189, v184, 1);
          v197 = vmlaq_laneq_f64(vmulq_n_f64(v188, v185.f64[0]), v189, v185, 1);
          v198 = vmlaq_laneq_f64(vmulq_n_f64(v186, v184.f64[0]), v172, v184, 1);
          v199 = vmlaq_laneq_f64(vmulq_n_f64(v186, v185.f64[0]), v172, v185, 1);
          v200 = vmlaq_laneq_f64(vmulq_n_f64(v188, v187.f64[0]), v189, v187, 1);
          v201 = vmlaq_laneq_f64(vmulq_n_f64(v186, v187.f64[0]), v172, v187, 1);
          _Q7 = (float64x2_t)v181[3 * v24];
          v203 = vmlaq_laneq_f64(vmulq_n_f64(v188, _Q7.f64[0]), v189, _Q7, 1);
          v204 = vmlaq_laneq_f64(vmulq_n_f64(v186, _Q7.f64[0]), v172, _Q7, 1);
          v46 = vsubq_f64(v1101, v190);
          v45 = vsubq_f64(v1106, v192);
          v48 = vsubq_f64(v1371, v191);
          v47 = vsubq_f64(v1096, v193);
          v205 = vsubq_f64(v1156, v194);
          v49 = vsubq_f64(v1366, v195);
          v206 = vsubq_f64(v1151, v196);
          v50 = vsubq_f64(v1361, v198);
          v207 = vsubq_f64(v1146, v197);
          v51 = vsubq_f64(v1091, v199);
          v208 = vsubq_f64(v1141, v200);
          v52 = vsubq_f64(v1356, v201);
          v209 = vsubq_f64(v1136, v203);
          v53 = vsubq_f64(v1086, v204);
          *(float64x2_t *)(v23 + 1040) = v45;
          *(float64x2_t *)(v23 + 1024) = v46;
          *(float64x2_t *)(v23 + 1144) = v48;
          *(float64x2_t *)(v23 + 1160) = v47;
          *(float64x2_t *)(v23 + 1264) = v205;
          *(float64x2_t *)(v23 + 1280) = v49;
          v1156 = v205;
          *(float64x2_t *)(v23 + 1400) = v50;
          v1151 = v206;
          *(float64x2_t *)(v23 + 1384) = v206;
          v1146 = v207;
          *(float64x2_t *)(v23 + 1504) = v207;
          *(float64x2_t *)(v23 + 1520) = v51;
          *(float64x2_t *)(v23 + 1624) = v208;
          *(float64x2_t *)(v23 + 1640) = v52;
          v1141 = v208;
          v210 = (int64x2_t *)&v25[(12 * v24 + v27)];
          *(float64x2_t *)(v23 + 1744) = v209;
          *(float64x2_t *)(v23 + 1760) = v53;
          v1136 = v209;
          v211 = *(float64x2_t *)((char *)v210 + 8 * v24);
          _Q2 = (float64x2_t)v210[v24];
          v213 = (float64x2_t)vzip1q_s64(*v210, (int64x2_t)v211);
          _Q5 = (float64x2_t)vzip2q_s64(*v210, (int64x2_t)v211);
          _Q6 = vmulq_f64(_Q2, *(float64x2_t *)v210);
          *(_QWORD *)&_Q7.f64[0] = v210->i64[1];
          __asm { FMLA            D6, D7, V2.D[1] }
          v219 = vmlaq_laneq_f64(vmulq_n_f64(v213, *(double *)v210->i64), _Q5, *(float64x2_t *)v210, 1);
          _Q0 = vmulq_f64(_Q2, v211);
          *(_QWORD *)&_Q7.f64[0] = v210->i64[(unint64_t)v28 / 8 + 1];
          __asm { FMLA            D0, D7, V2.D[1] }
          v221 = vmlaq_laneq_f64(vmulq_n_f64(v213, v211.f64[0]), _Q5, v211, 1);
          v222 = vmlaq_laneq_f64(vmulq_n_f64(v213, _Q2.f64[0]), _Q5, _Q2, 1);
          _Q1 = vmulq_f64(_Q2, _Q2);
          *(_QWORD *)&_Q5.f64[0] = v210[v24].i64[1];
          __asm { FMLA            D1, D5, V2.D[1] }
          *(_QWORD *)&_Q5.f64[0] = v1076;
          *(_QWORD *)&_Q5.f64[1] = v1131;
          v54 = (int8x16_t)vsubq_f64(_Q5, v219);
          v18 = vsubq_f64(v1081, _Q6);
          *(_QWORD *)&_Q6.f64[0] = v1071;
          *(_QWORD *)&_Q6.f64[1] = v1056;
          *(_QWORD *)&v219.f64[0] = v1066;
          v55 = vsubq_f64(v1351, _Q0);
          v56 = (int8x16_t)vsubq_f64(_Q6, v221);
          *(_QWORD *)&v219.f64[1] = v1061;
          v1131 = vextq_s8(v54, v54, 8uLL).u64[0];
          v58 = (int8x16_t)vsubq_f64(v219, v222);
          v57 = vextq_s8(v56, v56, 8uLL).u64[0];
          *(int8x16_t *)(v23 + 1536) = v54;
          *(float64_t *)(v23 + 1552) = v18.f64[0];
          v17 = vsubq_f64(v1346, _Q1);
          v59 = vextq_s8(v58, v58, 8uLL).u64[0];
          *(int8x16_t *)(v23 + 1656) = v56;
          *(float64_t *)(v23 + 1672) = v55.f64[0];
          *(int8x16_t *)(v23 + 1776) = v58;
          *(float64_t *)(v23 + 1792) = v17.f64[0];
          LODWORD(v210) = v27 + 4;
          v27 += 2;
          ++v36;
        }
        while (v210 <= v24);
        v26 = *(_DWORD *)(v4 + 16);
      }
      if ((v26 & 1) != 0)
      {
        LODWORD(category) = 1;
        HIDWORD(category) = v24;
        v1426 = &v25[(v24 - 1)];
        v1427 = v24 - 1;
        v1422 = *(float64x2_t *)v23;
        v1417 = *(_OWORD *)(v23 + 16);
        v1412 = *(_OWORD *)(v23 + 32);
        v1407 = *(_OWORD *)(v23 + 48);
        v1402 = *(_OWORD *)(v23 + 64);
        v1397 = *(_OWORD *)(v23 + 80);
        v1392 = *(_OWORD *)(v23 + 96);
        v1387 = *(_OWORD *)(v23 + 112);
        v1382 = *(_OWORD *)(v23 + 128);
        v1377 = *(_OWORD *)(v23 + 144);
        v1372 = *(_OWORD *)(v23 + 160);
        v1367 = *(_OWORD *)(v23 + 176);
        v1362 = *(_OWORD *)(v23 + 192);
        v1357 = *(_OWORD *)(v23 + 208);
        v1352 = *(_OWORD *)(v23 + 224);
        v1347 = *(_OWORD *)(v23 + 240);
        v1342 = *(_OWORD *)(v23 + 256);
        v1337 = *(_OWORD *)(v23 + 272);
        v1332 = *(_OWORD *)(v23 + 288);
        v1327 = *(_OWORD *)(v23 + 304);
        v1322 = *(_OWORD *)(v23 + 320);
        v1317 = *(_OWORD *)(v23 + 336);
        v1312 = *(_OWORD *)(v23 + 352);
        v1307 = *(_OWORD *)(v23 + 368);
        v1302 = *(_OWORD *)(v23 + 384);
        v1297 = *(_OWORD *)(v23 + 400);
        v1292 = *(_OWORD *)(v23 + 416);
        v1287 = *(_OWORD *)(v23 + 432);
        v1282 = *(_OWORD *)(v23 + 448);
        v1277 = *(_OWORD *)(v23 + 464);
        v1272 = *(_OWORD *)(v23 + 480);
        v1267 = *(_OWORD *)(v23 + 496);
        v1262 = *(_OWORD *)(v23 + 512);
        v1257 = *(_OWORD *)(v23 + 528);
        v1252 = *(_OWORD *)(v23 + 544);
        v1247 = *(_OWORD *)(v23 + 560);
        v1242 = *(_OWORD *)(v23 + 576);
        v1237 = *(_OWORD *)(v23 + 592);
        v1232 = *(_OWORD *)(v23 + 608);
        v1227 = *(_OWORD *)(v23 + 624);
        v1222 = *(_OWORD *)(v23 + 640);
        v1217 = *(_OWORD *)(v23 + 656);
        v1212 = *(_OWORD *)(v23 + 672);
        v1207 = *(_OWORD *)(v23 + 688);
        v1202 = *(_OWORD *)(v23 + 704);
        v1197 = *(_OWORD *)(v23 + 720);
        v1192 = *(_OWORD *)(v23 + 736);
        v1187 = *(_OWORD *)(v23 + 752);
        v1182 = *(_OWORD *)(v23 + 768);
        v1177 = *(_OWORD *)(v23 + 784);
        v1172 = *(_OWORD *)(v23 + 800);
        v1167 = *(_OWORD *)(v23 + 816);
        v1162 = *(_OWORD *)(v23 + 832);
        v1157 = *(_OWORD *)(v23 + 848);
        v1152 = *(_OWORD *)(v23 + 864);
        v1147 = *(_OWORD *)(v23 + 880);
        v1142 = *(_OWORD *)(v23 + 896);
        v1137 = *(_OWORD *)(v23 + 912);
        v1132 = *(_OWORD *)(v23 + 928);
        v1127 = *(_OWORD *)(v23 + 944);
        v1122 = *(_OWORD *)(v23 + 960);
        v1117 = *(_OWORD *)(v23 + 976);
        v1112 = *(_OWORD *)(v23 + 992);
        v1107 = *(_OWORD *)(v23 + 1008);
        v1102 = *(_OWORD *)(v23 + 1024);
        v1097 = *(_OWORD *)(v23 + 1040);
        v1092 = *(_OWORD *)(v23 + 1056);
        v1087 = *(_OWORD *)(v23 + 1072);
        v1082 = *(_OWORD *)(v23 + 1088);
        v1077 = *(_OWORD *)(v23 + 1104);
        v1072 = *(_OWORD *)(v23 + 1120);
        v1067 = *(_OWORD *)(v23 + 1136);
        v1062 = *(_OWORD *)(v23 + 1152);
        v1057 = *(_OWORD *)(v23 + 1168);
        v1052 = *(_OWORD *)(v23 + 1184);
        v1047 = *(_OWORD *)(v23 + 1200);
        v1042 = *(_OWORD *)(v23 + 1216);
        v1037 = *(_OWORD *)(v23 + 1232);
        v1032 = *(_OWORD *)(v23 + 1248);
        v1027 = *(_OWORD *)(v23 + 1264);
        v1023 = *(_OWORD *)(v23 + 1280);
        v224 = *(_OWORD *)(v23 + 1296);
        v225 = *(float64x2_t *)(v23 + 1312);
        v226 = *(_OWORD *)(v23 + 1328);
        v227 = *(_OWORD *)(v23 + 1344);
        v228 = *(_OWORD *)(v23 + 1360);
        v229 = *(_OWORD *)(v23 + 1376);
        v230 = *(_OWORD *)(v23 + 1392);
        v231 = *(_OWORD *)(v23 + 1408);
        v232 = *(_OWORD *)(v23 + 1424);
        v233 = *(_OWORD *)(v23 + 1440);
        v234 = *(_OWORD *)(v23 + 1456);
        v235 = *(_OWORD *)(v23 + 1472);
        v236 = *(_OWORD *)(v23 + 1488);
        v237 = *(_OWORD *)(v23 + 1504);
        v238 = *(_OWORD *)(v23 + 1520);
        v239 = *(_OWORD *)(v23 + 1536);
        v240 = *(_OWORD *)(v23 + 1552);
        v241 = *(_OWORD *)(v23 + 1568);
        v242 = *(_OWORD *)(v23 + 1584);
        v243 = *(_OWORD *)(v23 + 1600);
        v244 = *(_OWORD *)(v23 + 1616);
        v245 = *(_OWORD *)(v23 + 1632);
        v246 = *(_OWORD *)(v23 + 1648);
        v247 = *(_OWORD *)(v23 + 1664);
        v248 = *(_OWORD *)(v23 + 1680);
        v249 = *(_OWORD *)(v23 + 1696);
        v250 = *(_OWORD *)(v23 + 1712);
        v251 = *(_OWORD *)(v23 + 1728);
        v252 = *(_OWORD *)(v23 + 1744);
        v253 = *(_OWORD *)(v23 + 1760);
        v254 = *(_OWORD *)(v23 + 1776);
        v1542 = *(_QWORD *)(v23 + 1792);
        v1541 = v254;
        v1540 = v253;
        v1539 = v252;
        v1538 = v251;
        v1537 = v250;
        v1536 = v249;
        v1535 = v248;
        v1534 = v247;
        v1533 = v246;
        v1532 = v245;
        v1531 = v244;
        v1530 = v243;
        v1529 = v242;
        v1528 = v241;
        v1527 = v240;
        v1526 = v239;
        v1525 = v238;
        v1524 = v237;
        v1523 = v236;
        v1522 = v235;
        v1521 = v234;
        v1520 = v233;
        v1519 = v232;
        v1518 = v231;
        v1517 = v230;
        v1516 = v229;
        v1515 = v228;
        v1514 = v227;
        v1513 = v226;
        v1512 = v225;
        v1511 = v224;
        v1510 = v1023;
        v1509 = v1027;
        v1508 = v1032;
        v1507 = v1037;
        v1506 = v1042;
        v1505 = v1047;
        v1504 = v1052;
        v1503 = v1057;
        v1502 = v1062;
        v1501 = v1067;
        v1500 = v1072;
        v1499 = v1077;
        v1498 = v1082;
        v1497 = v1087;
        v1496 = v1092;
        v1495 = v1097;
        v1493 = v1107;
        v1494 = v1102;
        v1491 = v1117;
        v1492 = v1112;
        v1489 = v1127;
        v1490 = v1122;
        v1487 = v1137;
        v1488 = v1132;
        v1485 = v1147;
        v1486 = v1142;
        v1483 = v1157;
        v1484 = v1152;
        v1481 = v1167;
        v1482 = v1162;
        v1479 = v1177;
        v1480 = v1172;
        v1477 = v1187;
        v1478 = v1182;
        v1475 = v1197;
        v1476 = v1192;
        v1473 = v1207;
        v1474 = v1202;
        v1471 = v1217;
        v1472 = v1212;
        v1469 = v1227;
        v1470 = v1222;
        v1467 = v1237;
        v1468 = v1232;
        v1465 = v1247;
        v1466 = v1242;
        v1463 = v1257;
        v1464 = v1252;
        v1461 = v1267;
        v1462 = v1262;
        v1459 = v1277;
        v1460 = v1272;
        v1457 = v1287;
        v1458 = v1282;
        v1455 = v1297;
        v1456 = v1292;
        v1453 = v1307;
        v1454 = v1302;
        v1451 = v1317;
        v1452 = v1312;
        v1449 = v1327;
        v1450 = v1322;
        v1447 = v1337;
        v1448 = v1332;
        v1445 = v1347;
        v1446 = v1342;
        v1443 = v1357;
        v1444 = v1352;
        v1441 = v1367;
        v1442 = v1362;
        v1439 = v1377;
        v1440 = v1372;
        v1437 = v1387;
        v1438 = v1382;
        v1436 = v1392;
        v1435 = v1397;
        v1434 = v1402;
        v1433 = v1407;
        v1432 = v1412;
        v1431 = v1417;
        v1430 = v1422;
        p_category = &category;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1430;
        p_p_category = &p_category;
        v1545 = &category;
        v1546 = 0x3FF0000000000000;
        sub_20FBAA984((double *)&__p.__r_.__value_.__l.__size_, (uint64_t)&v1543);
        v255.f64[0] = *(float64_t *)(__p.__r_.__value_.__r.__words[0] + 1792);
        v225.f64[0] = v1550;
        *(_QWORD *)&v1422.f64[0] = *(_OWORD *)&vsubq_f64(v255, v225);
        v1418 = vsubq_f64(*(float64x2_t *)__p.__r_.__value_.__l.__data_, *(float64x2_t *)&__p.__r_.__value_.__r.__words[1]);
        v1413 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 16), v1548);
        v1408 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 32), v1549[0]);
        v1403 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 48), v1549[1]);
        v1398 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 64), v1549[2]);
        v1393 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 80), v1549[3]);
        v1388 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 96), v1549[4]);
        v1383 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 112), v1549[5]);
        v1378 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 128), v1549[6]);
        v1373 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 144), v1549[7]);
        v1368 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 160), v1549[8]);
        v1363 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 176), v1549[9]);
        v1358 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 192), v1549[10]);
        v1353 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 208), v1549[11]);
        v1348 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 224), v1549[12]);
        v1343 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 240), v1549[13]);
        v1338 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 256), v1549[14]);
        v1333 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 272), v1549[15]);
        v1328 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 288), v1549[16]);
        v1323 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 304), v1549[17]);
        v1318 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 320), v1549[18]);
        v1313 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 336), v1549[19]);
        v1308 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 352), v1549[20]);
        v1303 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 368), v1549[21]);
        v1298 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 384), v1549[22]);
        v1293 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 400), v1549[23]);
        v1288 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 416), v1549[24]);
        v1283 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 432), v1549[25]);
        v1278 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 448), v1549[26]);
        v1273 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 464), v1549[27]);
        v1268 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 480), v1549[28]);
        v1263 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 496), v1549[29]);
        v1258 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 512), v1549[30]);
        v1253 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 528), v1549[31]);
        v1248 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 544), v1549[32]);
        v1243 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 560), v1549[33]);
        v1238 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 576), v1549[34]);
        v1233 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 592), v1549[35]);
        v1228 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 608), v1549[36]);
        v1223 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 624), v1549[37]);
        v1218 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 640), v1549[38]);
        v1213 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 656), v1549[39]);
        v1208 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 672), v1549[40]);
        v1203 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 688), v1549[41]);
        v1198 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 704), v1549[42]);
        v1193 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 720), v1549[43]);
        v1188 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 736), v1549[44]);
        v1183 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 752), v1549[45]);
        v1178 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 768), v1549[46]);
        v1173 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 784), v1549[47]);
        v1168 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 800), v1549[48]);
        v1163 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 816), v1549[49]);
        v1158 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 832), v1549[50]);
        v1153 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 848), v1549[51]);
        v1148 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 864), v1549[52]);
        v1143 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 880), v1549[53]);
        v1138 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 896), v1549[54]);
        v1133 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 912), v1549[55]);
        v1128 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 928), v1549[56]);
        v1123 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 944), v1549[57]);
        v1118 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 960), v1549[58]);
        v1113 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 976), v1549[59]);
        v1108 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 992), v1549[60]);
        v1103 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1008), v1549[61]);
        v1098 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1024), v1549[62]);
        v1093 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1040), v1549[63]);
        v1088 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1056), v1549[64]);
        v1083 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1072), v1549[65]);
        v1078 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1088), v1549[66]);
        v1073 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1104), v1549[67]);
        v1068 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1120), v1549[68]);
        v1063 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1136), v1549[69]);
        v1058 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1152), v1549[70]);
        v1053 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1168), v1549[71]);
        v1048 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1184), v1549[72]);
        v1043 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1200), v1549[73]);
        v1038 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1216), v1549[74]);
        v1033 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1232), v1549[75]);
        v1028 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1248), v1549[76]);
        v1024 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1264), v1549[77]);
        v1020 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1280), v1549[78]);
        v256 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1296), v1549[79]);
        v257 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1312), v1549[80]);
        v258 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1328), v1549[81]);
        v259 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1344), v1549[82]);
        v260 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1360), v1549[83]);
        v261 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1376), v1549[84]);
        v262 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1392), v1549[85]);
        v263 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1408), v1549[86]);
        v264 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1424), v1549[87]);
        v265 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1440), v1549[88]);
        v266 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1456), v1549[89]);
        v267 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1472), v1549[90]);
        v268 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1488), v1549[91]);
        v269 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1504), v1549[92]);
        v270 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1520), v1549[93]);
        v271 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1536), v1549[94]);
        v272 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1552), v1549[95]);
        v273 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1568), v1549[96]);
        v274 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1584), v1549[97]);
        v275 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1600), v1549[98]);
        v276 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1616), v1549[99]);
        v277 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1632), v1549[100]);
        v278 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1648), v1549[101]);
        v279 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1664), v1549[102]);
        v280 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1680), v1549[103]);
        v281 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1696), v1549[104]);
        v282 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1712), v1549[105]);
        v283 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1728), v1549[106]);
        v284 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1744), v1549[107]);
        v285 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1760), v1549[108]);
        *(float64x2_t *)(v23 + 1776) = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1776), v1549[109]);
        *(float64x2_t *)(v23 + 1760) = v285;
        *(float64x2_t *)(v23 + 1744) = v284;
        *(float64x2_t *)(v23 + 1728) = v283;
        *(float64x2_t *)(v23 + 1712) = v282;
        *(float64x2_t *)(v23 + 1696) = v281;
        *(float64x2_t *)(v23 + 1680) = v280;
        *(float64x2_t *)(v23 + 1664) = v279;
        *(float64x2_t *)(v23 + 1648) = v278;
        *(float64x2_t *)(v23 + 1632) = v277;
        *(float64x2_t *)(v23 + 1616) = v276;
        *(float64x2_t *)(v23 + 1600) = v275;
        *(float64x2_t *)(v23 + 1584) = v274;
        *(float64x2_t *)(v23 + 1568) = v273;
        *(float64x2_t *)(v23 + 1552) = v272;
        *(float64x2_t *)(v23 + 1536) = v271;
        *(float64x2_t *)(v23 + 1520) = v270;
        *(float64x2_t *)(v23 + 1504) = v269;
        *(float64x2_t *)(v23 + 1488) = v268;
        *(float64x2_t *)(v23 + 1472) = v267;
        *(float64x2_t *)(v23 + 1456) = v266;
        *(float64x2_t *)(v23 + 1440) = v265;
        *(float64x2_t *)(v23 + 1424) = v264;
        *(float64x2_t *)(v23 + 1408) = v263;
        *(float64x2_t *)(v23 + 1392) = v262;
        *(float64x2_t *)(v23 + 1376) = v261;
        *(float64x2_t *)(v23 + 1360) = v260;
        *(float64x2_t *)(v23 + 1344) = v259;
        *(float64x2_t *)(v23 + 1328) = v258;
        *(float64x2_t *)(v23 + 1312) = v257;
        *(float64x2_t *)(v23 + 1296) = v256;
        *(float64x2_t *)(v23 + 1280) = v1020;
        *(float64x2_t *)(v23 + 1264) = v1024;
        *(float64x2_t *)(v23 + 1248) = v1028;
        *(float64x2_t *)(v23 + 1232) = v1033;
        *(float64x2_t *)(v23 + 1216) = v1038;
        *(float64x2_t *)(v23 + 1200) = v1043;
        *(float64x2_t *)(v23 + 1184) = v1048;
        *(float64x2_t *)(v23 + 1168) = v1053;
        *(float64x2_t *)(v23 + 1152) = v1058;
        *(float64x2_t *)(v23 + 1136) = v1063;
        *(float64x2_t *)(v23 + 1120) = v1068;
        *(float64x2_t *)(v23 + 1104) = v1073;
        *(float64x2_t *)(v23 + 1088) = v1078;
        *(float64x2_t *)(v23 + 1072) = v1083;
        *(float64x2_t *)(v23 + 1056) = v1088;
        *(float64x2_t *)(v23 + 1040) = v1093;
        *(float64x2_t *)(v23 + 1008) = v1103;
        *(float64x2_t *)(v23 + 1024) = v1098;
        *(float64x2_t *)(v23 + 976) = v1113;
        *(float64x2_t *)(v23 + 992) = v1108;
        *(float64x2_t *)(v23 + 944) = v1123;
        *(float64x2_t *)(v23 + 960) = v1118;
        *(float64x2_t *)(v23 + 912) = v1133;
        *(float64x2_t *)(v23 + 928) = v1128;
        *(float64x2_t *)(v23 + 880) = v1143;
        *(float64x2_t *)(v23 + 896) = v1138;
        *(float64x2_t *)(v23 + 848) = v1153;
        *(float64x2_t *)(v23 + 864) = v1148;
        *(float64x2_t *)(v23 + 816) = v1163;
        *(float64x2_t *)(v23 + 832) = v1158;
        *(float64x2_t *)(v23 + 784) = v1173;
        *(float64x2_t *)(v23 + 800) = v1168;
        *(float64x2_t *)(v23 + 752) = v1183;
        *(float64x2_t *)(v23 + 768) = v1178;
        *(float64x2_t *)(v23 + 720) = v1193;
        *(float64x2_t *)(v23 + 736) = v1188;
        *(float64x2_t *)(v23 + 688) = v1203;
        *(float64x2_t *)(v23 + 704) = v1198;
        *(float64x2_t *)(v23 + 656) = v1213;
        *(float64x2_t *)(v23 + 672) = v1208;
        *(float64x2_t *)(v23 + 624) = v1223;
        *(float64x2_t *)(v23 + 640) = v1218;
        *(float64x2_t *)(v23 + 592) = v1233;
        *(float64x2_t *)(v23 + 608) = v1228;
        *(float64x2_t *)(v23 + 560) = v1243;
        *(float64x2_t *)(v23 + 576) = v1238;
        *(float64x2_t *)(v23 + 528) = v1253;
        *(float64x2_t *)(v23 + 544) = v1248;
        *(float64x2_t *)(v23 + 496) = v1263;
        *(float64x2_t *)(v23 + 512) = v1258;
        *(float64x2_t *)(v23 + 464) = v1273;
        *(float64x2_t *)(v23 + 480) = v1268;
        *(float64x2_t *)(v23 + 432) = v1283;
        *(float64x2_t *)(v23 + 448) = v1278;
        *(float64x2_t *)(v23 + 400) = v1293;
        *(float64x2_t *)(v23 + 416) = v1288;
        *(float64x2_t *)(v23 + 368) = v1303;
        *(float64x2_t *)(v23 + 384) = v1298;
        *(float64x2_t *)(v23 + 336) = v1313;
        *(float64x2_t *)(v23 + 352) = v1308;
        *(float64x2_t *)(v23 + 304) = v1323;
        *(float64x2_t *)(v23 + 320) = v1318;
        *(float64x2_t *)(v23 + 272) = v1333;
        *(float64x2_t *)(v23 + 288) = v1328;
        *(float64x2_t *)(v23 + 240) = v1343;
        *(float64x2_t *)(v23 + 256) = v1338;
        *(float64x2_t *)(v23 + 208) = v1353;
        *(float64x2_t *)(v23 + 224) = v1348;
        *(float64x2_t *)(v23 + 176) = v1363;
        *(float64x2_t *)(v23 + 192) = v1358;
        *(float64x2_t *)(v23 + 144) = v1373;
        *(float64x2_t *)(v23 + 160) = v1368;
        *(float64x2_t *)(v23 + 112) = v1383;
        *(float64x2_t *)(v23 + 128) = v1378;
        *(float64x2_t *)(v23 + 80) = v1393;
        *(float64x2_t *)(v23 + 96) = v1388;
        *(float64x2_t *)(v23 + 48) = v1403;
        *(float64x2_t *)(v23 + 64) = v1398;
        *(float64x2_t *)(v23 + 16) = v1413;
        *(float64x2_t *)(v23 + 32) = v1408;
        *(float64x2_t *)v23 = v1418;
        *(float64_t *)(v23 + 1792) = v1422.f64[0];
      }
      break;
    default:
      *(_QWORD *)&v1430.f64[0] = v4;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v1430;
      __p.__r_.__value_.__r.__words[2] = v4;
      v1548.f64[0] = 1.0;
      sub_20F2B8D98(v2, (uint64_t)&__p);
      break;
  }
  return 1;
}

void sub_20FBE5C30(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x1318]))
  {
    if (SLOBYTE(STACK[0x1317]) < 0)
      operator delete((void *)STACK[0x1300]);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0xBD8]);
  _Unwind_Resume(a1);
}

void sub_20FBE5C80(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0xBD8]);
  _Unwind_Resume(a1);
}

void sub_20FBE5C94(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0xBD8]);
  _Unwind_Resume(a1);
}

void sub_20FBE5CA8(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0xBD8]);
  _Unwind_Resume(a1);
}

void sub_20FBE5CBC(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0xBD8]);
  _Unwind_Resume(a1);
}

void sub_20FBE5CD0(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x1320]) && SLOBYTE(STACK[0x131F]) < 0)
    operator delete((void *)STACK[0x1308]);
  if (STACK[0x1300])
    os_release((void *)STACK[0x1300]);
  sub_20E863714((uint64_t)&STACK[0xBD8]);
  _Unwind_Resume(a1);
}

void sub_20FBE5D68(_Unwind_Exception *a1)
{
  void *v1;
  int v2;

  if (SLOBYTE(STACK[0x1317]) < 0)
    operator delete((void *)STACK[0x1300]);
  if (SLOBYTE(STACK[0xBEF]) < 0)
  {
    operator delete((void *)STACK[0xBD8]);
    if ((v2 & 1) == 0)
      goto LABEL_8;
  }
  else if (!v2)
  {
LABEL_8:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FBE5E24(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v3 = (_QWORD *)a2[3];
  if (!v3)
  {
    v10 = 0;
    v4 = (_QWORD *)(a1 + 35952);
    goto LABEL_9;
  }
  if (v3 == a2)
  {
    v10 = v9;
    (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v9);
    v3 = v10;
    v4 = (_QWORD *)(a1 + 35952);
    if (v10)
      goto LABEL_7;
LABEL_9:
    v12 = v3;
    goto LABEL_10;
  }
  v3 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 16))(v3);
  v10 = v3;
  v4 = (_QWORD *)(a1 + 35952);
  if (!v3)
    goto LABEL_9;
LABEL_7:
  if (v3 != v9)
  {
    v3 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 16))(v3);
    goto LABEL_9;
  }
  v12 = v11;
  (*(void (**)(_QWORD *, _QWORD *))(v9[0] + 24))(v9, v11);
LABEL_10:
  sub_20FBA9474(v11, v4);
  v5 = v12;
  if (v12 == v11)
  {
    v6 = 4;
    v5 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_15;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_15:
  *(_BYTE *)(a1 + 35945) = 1;
  result = v10;
  if (v10 == v9)
  {
    v8 = 4;
    result = v9;
  }
  else
  {
    if (!v10)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

void sub_20FBE5FA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13)
{
  if (a13 == &a10)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (!a13)
    _Unwind_Resume(exception_object);
  (*(void (**)(void))(*a13 + 40))();
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FBE5FFC(uint64_t a1)
{
  unint64_t *v1;
  unint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  std::string::size_type v9;
  std::string::size_type v10;
  uint64_t v11;
  int **v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  int v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  int v29;
  size_t v30;
  int64x2_t *v31;
  float64_t v32;
  float64_t v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  int64x2_t *v37;
  int v38;
  int v39;
  uint64_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  uint64_t v47;
  int64x2_t *v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  int8x16_t v66;
  float64x2_t v67;
  int8x16_t v68;
  unint64_t v69;
  int8x16_t v70;
  unint64_t v71;
  float64x2_t v72;
  float64x2_t *v73;
  float64x2_t v74;
  float64x2_t *v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t *v78;
  float64x2_t v79;
  float64x2_t *v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t *v83;
  float64x2_t v84;
  float64x2_t *v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t *v88;
  float64x2_t v89;
  float64x2_t *v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t *v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t *v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  int64x2_t *v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  int64x2_t *v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  int64x2_t *v222;
  float64x2_t v223;
  float64x2_t v225;
  float64x2_t v231;
  float64x2_t v233;
  float64x2_t v234;
  __int128 v236;
  float64x2_t v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  float64x2_t v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  float64x2_t v271;
  float64x2_t v272;
  float64x2_t v273;
  float64x2_t v274;
  float64x2_t v275;
  float64x2_t v276;
  float64x2_t v277;
  float64x2_t v278;
  float64x2_t v279;
  float64x2_t v280;
  float64x2_t v281;
  float64x2_t v282;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  float64x2_t v286;
  float64x2_t v287;
  float64x2_t v288;
  float64x2_t v289;
  float64x2_t v290;
  float64x2_t v291;
  float64x2_t v292;
  float64x2_t v293;
  float64x2_t v294;
  float64x2_t v295;
  float64x2_t v296;
  float64x2_t v297;
  unint64_t v298;
  uint64_t v299;
  int64x2_t *v300;
  int v301;
  int v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  int64x2_t *v310;
  float64x2_t v311;
  float64x2_t v312;
  float64x2_t v313;
  float64x2_t v314;
  float64x2_t v315;
  float64x2_t v316;
  int8x16_t v317;
  int8x16_t v318;
  unint64_t v319;
  int8x16_t v320;
  unint64_t v321;
  unint64_t v322;
  int8x16_t v323;
  unint64_t v324;
  unint64_t v325;
  int8x16_t v326;
  int8x16_t v327;
  unint64_t v328;
  unint64_t v329;
  int8x16_t v330;
  uint64_t v331;
  uint64_t v332;
  float64x2_t v333;
  int64x2_t *v334;
  float64x2_t v335;
  float64x2_t v336;
  float64x2_t v337;
  float64x2_t *v338;
  float64x2_t v339;
  float64x2_t v340;
  float64x2_t *v341;
  float64x2_t v342;
  float64x2_t *v343;
  float64x2_t v344;
  float64x2_t *v345;
  float64x2_t v346;
  float64x2_t *v347;
  float64x2_t v348;
  float64x2_t v349;
  float64x2_t v350;
  float64x2_t v351;
  float64x2_t v352;
  float64x2_t v353;
  float64x2_t v354;
  float64x2_t v355;
  float64x2_t v356;
  float64x2_t v357;
  float64x2_t v358;
  float64x2_t v359;
  float64x2_t v360;
  float64x2_t v361;
  float64x2_t v362;
  float64x2_t v363;
  float64x2_t v364;
  float64x2_t *v365;
  float64x2_t v366;
  float64x2_t v367;
  float64x2_t *v368;
  float64x2_t v369;
  float64x2_t v370;
  float64x2_t *v371;
  float64x2_t *v372;
  float64x2_t *v373;
  float64x2_t *v374;
  float64x2_t *v375;
  float64x2_t *v376;
  float64x2_t *v377;
  float64x2_t *v378;
  float64x2_t *v379;
  float64x2_t v380;
  float64x2_t v381;
  float64x2_t v382;
  float64x2_t v383;
  float64x2_t v384;
  float64x2_t v385;
  float64x2_t v386;
  float64x2_t v387;
  float64x2_t v388;
  float64x2_t v389;
  float64x2_t v390;
  float64x2_t v391;
  float64x2_t v392;
  float64x2_t v393;
  float64x2_t v394;
  float64x2_t v395;
  float64x2_t v396;
  int64x2_t *v397;
  float64x2_t v398;
  float64x2_t v399;
  float64x2_t v400;
  float64x2_t v401;
  float64x2_t v402;
  float64x2_t v403;
  float64x2_t v404;
  float64x2_t v405;
  float64x2_t v406;
  float64x2_t v407;
  float64x2_t v408;
  float64x2_t v409;
  float64x2_t v410;
  float64x2_t v411;
  float64x2_t v412;
  float64x2_t v413;
  float64x2_t v414;
  float64x2_t v415;
  float64x2_t v416;
  float64x2_t v417;
  float64x2_t v418;
  float64x2_t v419;
  float64x2_t v420;
  float64x2_t v421;
  float64x2_t v422;
  float64x2_t v423;
  float64x2_t v424;
  float64x2_t v425;
  float64x2_t v426;
  float64x2_t v427;
  float64x2_t v428;
  float64x2_t v429;
  float64x2_t v430;
  float64x2_t v431;
  float64x2_t v432;
  float64x2_t v433;
  float64x2_t v434;
  float64x2_t v435;
  float64x2_t v436;
  float64x2_t v437;
  float64x2_t v438;
  float64x2_t v439;
  int64x2_t *v440;
  float64x2_t v441;
  float64x2_t v442;
  float64x2_t v443;
  float64x2_t v444;
  float64x2_t v445;
  float64x2_t v446;
  float64x2_t v447;
  float64x2_t v448;
  float64x2_t v449;
  float64x2_t v450;
  float64x2_t v451;
  float64x2_t v452;
  float64x2_t v453;
  float64x2_t v454;
  float64x2_t v455;
  float64x2_t v456;
  float64x2_t v457;
  float64x2_t v458;
  float64x2_t v459;
  float64x2_t v460;
  float64x2_t v461;
  float64x2_t v462;
  float64x2_t v463;
  float64x2_t v464;
  float64x2_t v465;
  float64x2_t v466;
  float64x2_t v467;
  float64x2_t v468;
  float64x2_t v469;
  float64x2_t v470;
  float64x2_t v471;
  float64x2_t v472;
  float64x2_t v473;
  float64x2_t v474;
  float64x2_t v475;
  float64x2_t v476;
  float64x2_t v477;
  float64x2_t v478;
  float64x2_t v479;
  float64x2_t v480;
  float64x2_t v481;
  float64x2_t v482;
  float64x2_t v483;
  float64x2_t v484;
  float64x2_t v485;
  float64x2_t v486;
  float64x2_t v487;
  float64x2_t v488;
  float64x2_t v489;
  int64x2_t *v490;
  float64x2_t v491;
  float64x2_t v492;
  float64x2_t v493;
  float64x2_t v494;
  float64x2_t v495;
  float64x2_t v496;
  float64x2_t v497;
  float64x2_t v498;
  float64x2_t v499;
  float64x2_t v500;
  float64x2_t v501;
  float64x2_t v502;
  float64x2_t v503;
  float64x2_t v504;
  float64x2_t v505;
  float64x2_t v506;
  float64x2_t v507;
  float64x2_t v508;
  float64x2_t v509;
  float64x2_t v511;
  float64x2_t v512;
  float64x2_t v513;
  float64x2_t v514;
  float64x2_t v515;
  float64x2_t v516;
  float64x2_t v520;
  float64x2_t v521;
  float64x2_t v522;
  float64x2_t v523;
  float64x2_t v524;
  float64x2_t v525;
  float64x2_t v526;
  float64x2_t v527;
  int64x2_t *v528;
  float64x2_t v530;
  float64x2_t v531;
  float64x2_t v533;
  float64x2_t v534;
  float64x2_t v535;
  float64x2_t v537;
  float64x2_t v539;
  float64x2_t v541;
  float64x2_t v543;
  float64x2_t v544;
  float64x2_t v545;
  float64x2_t v546;
  float64x2_t v547;
  float64x2_t v548;
  float64x2_t v549;
  int8x16_t v551;
  int8x16_t v552;
  int8x16_t v553;
  int8x16_t v554;
  unint64_t v555;
  uint64_t v556;
  int64x2_t *v557;
  int v558;
  int v559;
  uint64_t v560;
  uint64_t v561;
  int64x2_t *v562;
  float64x2_t v563;
  float64x2_t v564;
  float64x2_t v565;
  float64x2_t v566;
  float64x2_t v567;
  float64x2_t v568;
  float64x2_t v569;
  float64x2_t v570;
  float64x2_t v571;
  float64x2_t v572;
  float64x2_t v573;
  float64x2_t v574;
  float64x2_t v575;
  float64x2_t v576;
  float64x2_t v577;
  float64x2_t v578;
  float64x2_t v579;
  float64x2_t v580;
  float64x2_t v581;
  float64x2_t v582;
  float64x2_t v583;
  float64x2_t v584;
  float64x2_t v585;
  float64x2_t v586;
  float64x2_t v587;
  float64x2_t v588;
  float64x2_t v589;
  float64x2_t v590;
  float64x2_t v591;
  float64x2_t *v592;
  float64x2_t v593;
  float64x2_t *v594;
  float64x2_t v595;
  float64x2_t v596;
  float64x2_t *v597;
  float64x2_t v598;
  float64x2_t *v599;
  float64x2_t v600;
  float64x2_t v601;
  float64x2_t *v602;
  float64x2_t v603;
  float64x2_t *v604;
  float64x2_t v605;
  float64x2_t *v606;
  float64x2_t v607;
  float64x2_t *v608;
  float64x2_t v609;
  float64x2_t *v610;
  float64x2_t v611;
  float64x2_t *v612;
  float64x2_t v613;
  float64x2_t *v614;
  float64x2_t v615;
  float64x2_t *v616;
  float64x2_t v617;
  float64x2_t v618;
  float64x2_t v619;
  float64x2_t v620;
  float64x2_t v621;
  float64x2_t v622;
  float64x2_t v623;
  float64x2_t v624;
  float64x2_t v625;
  float64x2_t v626;
  float64x2_t v627;
  float64x2_t v628;
  float64x2_t v629;
  float64x2_t v630;
  float64x2_t v631;
  float64x2_t v632;
  float64x2_t v633;
  float64x2_t v634;
  float64x2_t v635;
  float64x2_t v636;
  float64x2_t v637;
  float64x2_t v638;
  float64x2_t *v639;
  float64x2_t *v640;
  float64x2_t *v641;
  float64x2_t *v642;
  float64x2_t *v643;
  float64x2_t *v644;
  float64x2_t *v645;
  float64x2_t v646;
  float64x2_t v647;
  float64x2_t v648;
  float64x2_t v649;
  float64x2_t v650;
  float64x2_t v651;
  float64x2_t v652;
  int64x2_t *v653;
  float64x2_t v654;
  float64x2_t v655;
  float64x2_t v656;
  float64x2_t v657;
  float64x2_t v658;
  float64x2_t v659;
  float64x2_t v660;
  float64x2_t v661;
  float64x2_t v662;
  float64x2_t v663;
  float64x2_t v664;
  float64x2_t v665;
  float64x2_t v666;
  float64x2_t v667;
  float64x2_t v668;
  float64x2_t v669;
  float64x2_t v670;
  float64x2_t v671;
  float64x2_t v672;
  float64x2_t v673;
  float64x2_t v674;
  float64x2_t v675;
  float64x2_t v676;
  float64x2_t v677;
  float64x2_t v678;
  float64x2_t v679;
  float64x2_t v680;
  float64x2_t v681;
  float64x2_t v682;
  float64x2_t v683;
  float64x2_t v684;
  float64x2_t v685;
  float64x2_t v686;
  float64x2_t v687;
  float64x2_t v688;
  float64x2_t v689;
  float64x2_t v690;
  int64x2_t *v691;
  float64x2_t v692;
  float64x2_t v693;
  float64x2_t v694;
  float64x2_t v695;
  float64x2_t v696;
  float64x2_t v697;
  float64x2_t v698;
  float64x2_t v699;
  float64x2_t v700;
  float64x2_t v701;
  float64x2_t v702;
  float64x2_t v703;
  float64x2_t v704;
  float64x2_t v705;
  float64x2_t v706;
  float64x2_t v707;
  float64x2_t v708;
  float64x2_t v709;
  float64x2_t v710;
  float64x2_t v711;
  float64x2_t v712;
  float64x2_t v713;
  float64x2_t v714;
  float64x2_t v715;
  float64x2_t v716;
  float64x2_t v717;
  float64x2_t v718;
  float64x2_t v719;
  float64x2_t v720;
  float64x2_t v721;
  float64x2_t v722;
  float64x2_t v723;
  float64x2_t v724;
  float64x2_t v725;
  float64x2_t v726;
  float64x2_t v727;
  float64x2_t v728;
  float64x2_t v729;
  float64x2_t v730;
  float64x2_t v731;
  float64x2_t v732;
  float64x2_t v733;
  float64x2_t v734;
  float64x2_t v735;
  float64x2_t v736;
  float64x2_t v737;
  float64x2_t v738;
  float64x2_t v739;
  float64x2_t v740;
  float64x2_t v741;
  float64x2_t v742;
  float64x2_t v743;
  float64x2_t v744;
  float64x2_t v745;
  float64x2_t v746;
  float64x2_t v747;
  float64x2_t v748;
  int64x2_t *v749;
  float64x2_t v750;
  float64x2_t v751;
  float64x2_t v752;
  float64x2_t v753;
  float64x2_t v754;
  float64x2_t v755;
  float64x2_t v756;
  float64x2_t v757;
  float64x2_t v758;
  float64x2_t v759;
  float64x2_t v760;
  float64x2_t v761;
  float64x2_t v762;
  float64x2_t v763;
  float64x2_t v764;
  float64x2_t v765;
  float64x2_t v766;
  float64x2_t v767;
  float64x2_t v768;
  float64x2_t v769;
  float64x2_t v770;
  float64x2_t v771;
  float64x2_t v772;
  float64x2_t v773;
  float64x2_t v774;
  float64x2_t v775;
  float64x2_t v776;
  float64x2_t v777;
  float64x2_t v778;
  float64x2_t v779;
  float64x2_t v780;
  float64x2_t v781;
  float64x2_t v782;
  float64x2_t v783;
  float64x2_t v784;
  float64x2_t v785;
  float64x2_t v786;
  float64x2_t v787;
  float64x2_t v788;
  float64x2_t v789;
  int64x2_t *v790;
  float64x2_t v791;
  float64x2_t v792;
  float64x2_t v793;
  float64x2_t v794;
  float64x2_t v795;
  float64x2_t v796;
  float64x2_t v797;
  float64x2_t v798;
  float64x2_t v799;
  float64x2_t v800;
  float64x2_t v801;
  float64x2_t v802;
  float64x2_t v803;
  float64x2_t v804;
  float64x2_t v805;
  float64x2_t v806;
  float64x2_t v807;
  float64x2_t v808;
  float64x2_t v809;
  float64x2_t v810;
  float64x2_t v811;
  int64x2_t *v812;
  float64x2_t v813;
  float64x2_t v814;
  float64x2_t v815;
  double *p_p;
  uint64_t v818;
  uint64_t j;
  unint64_t v820;
  float64x2_t *v821;
  float64x2_t v822;
  uint64_t v823;
  double v824;
  unint64_t i;
  float64x2_t *v826;
  float64x2_t v827;
  int v828;
  unint64_t v829;
  uint64_t v830;
  std::runtime_error *v831;
  uint64_t v832;
  uint64_t *v833;
  char *v834;
  char *v835;
  unsigned __int8 v836;
  uint64_t v837;
  char *v838;
  NSObject *v839;
  unsigned __int8 v840;
  __int8 *v841;
  const char *v842;
  NSObject *v843;
  std::runtime_error *exception;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  int v852;
  int v853;
  int v854;
  int v855;
  unsigned int __lda;
  float64x2_t v857;
  float64x2_t v858;
  float64x2_t v859;
  float64x2_t v860;
  float64x2_t v861;
  float64x2_t v862;
  float64x2_t v863;
  float64x2_t v864;
  float64x2_t v865;
  float64x2_t v866;
  float64x2_t v867;
  float64x2_t v868;
  float64x2_t v869;
  float64x2_t v870;
  float64x2_t v871;
  float64x2_t v872;
  float64x2_t v873;
  float64x2_t v874;
  float64x2_t v875;
  float64x2_t v876;
  float64x2_t v877;
  float64x2_t v878;
  float64x2_t v879;
  float64x2_t v880;
  float64x2_t v881;
  float64x2_t v882;
  float64x2_t v883;
  float64x2_t v884;
  float64x2_t v885;
  float64x2_t v886;
  float64x2_t v887;
  float64x2_t v888;
  float64x2_t v889;
  float64x2_t v890;
  float64x2_t v891;
  float64x2_t v892;
  float64x2_t v893;
  float64x2_t v894;
  float64x2_t v895;
  float64x2_t v896;
  float64x2_t v897;
  float64x2_t v898;
  float64x2_t v899;
  float64x2_t v900;
  float64x2_t v901;
  float64x2_t v902;
  float64x2_t v903;
  float64x2_t v904;
  float64x2_t v905;
  float64x2_t v906;
  float64x2_t v907;
  float64x2_t v908;
  float64x2_t v909;
  float64x2_t v910;
  float64x2_t v911;
  float64x2_t v912;
  float64x2_t v913;
  float64x2_t v914;
  float64x2_t v915;
  float64x2_t v916;
  unint64_t v917;
  float64x2_t v918;
  unint64_t v919;
  unint64_t v920;
  float64x2_t v921;
  float64x2_t v922;
  unint64_t v923;
  float64x2_t v924;
  unint64_t v925;
  float64x2_t v926;
  unint64_t v927;
  float64x2_t v928;
  unint64_t v929;
  float64x2_t v930;
  float64x2_t v931;
  float64x2_t v932;
  uint64_t v933;
  float64x2_t v934;
  uint64_t v935;
  float64x2_t v936;
  uint64_t v937;
  float64x2_t v938;
  float64x2_t v939;
  float64x2_t v940;
  uint64_t v941;
  float64x2_t v942;
  float64x2_t v943;
  float64x2_t v944;
  float64x2_t v945;
  float64x2_t v946;
  uint64_t v947;
  float64x2_t v948;
  uint64_t v949;
  float64x2_t v950;
  float64x2_t v951;
  float64x2_t v952;
  float64x2_t v953;
  float64x2_t v954;
  float64x2_t v955;
  float64x2_t v956;
  float64x2_t v957;
  float64x2_t v958;
  float64x2_t v959;
  float64x2_t v960;
  float64x2_t v961;
  float64x2_t v962;
  float64x2_t v963;
  float64x2_t v964;
  unint64_t v965;
  float64x2_t v966;
  unint64_t v967;
  float64x2_t v968;
  unint64_t v969;
  float64x2_t v970;
  uint64_t v971;
  float64x2_t v972;
  int8x16_t v973;
  float64x2_t v974;
  int8x16_t v975;
  float64x2_t v976;
  int8x16_t v977;
  float64x2_t v978;
  float64x2_t v979;
  float64x2_t v980;
  float64x2_t v981;
  float64x2_t v982;
  float64x2_t v983;
  float64x2_t v984;
  float64x2_t v985;
  float64x2_t v986;
  float64x2_t v987;
  float64x2_t v988;
  float64x2_t v989;
  float64x2_t v990;
  float64x2_t v991;
  float64x2_t v992;
  float64x2_t v993;
  float64x2_t v994;
  float64x2_t v995;
  float64x2_t v996;
  float64x2_t v997;
  float64x2_t v998;
  float64x2_t v999;
  float64x2_t v1000;
  float64x2_t v1001;
  float64x2_t v1002;
  float64x2_t v1003;
  float64x2_t v1004;
  float64x2_t v1005;
  float64x2_t v1006;
  float64x2_t v1007;
  float64x2_t v1008;
  float64x2_t v1009;
  float64x2_t v1010;
  float64x2_t v1011;
  float64x2_t v1012;
  float64x2_t v1013;
  float64x2_t v1014;
  float64x2_t v1015;
  float64x2_t v1016;
  float64x2_t v1017;
  float64x2_t v1018;
  float64x2_t v1019;
  float64x2_t v1020;
  float64x2_t v1021;
  float64x2_t v1022;
  float64x2_t v1023;
  float64x2_t v1024;
  float64x2_t v1025;
  float64x2_t v1026;
  float64x2_t v1027;
  float64x2_t v1028;
  float64x2_t v1029;
  float64x2_t v1030;
  float64x2_t v1031;
  float64x2_t v1032;
  float64x2_t v1033;
  float64x2_t v1034;
  float64x2_t v1035;
  float64x2_t v1036;
  float64x2_t v1037;
  float64x2_t v1038;
  float64x2_t v1039;
  float64x2_t v1040;
  float64x2_t v1041;
  float64x2_t v1042;
  float64x2_t v1043;
  float64x2_t v1044;
  float64x2_t v1045;
  __int128 v1046;
  float64x2_t v1047;
  float64x2_t v1048;
  float64x2_t v1049;
  __int128 v1050;
  float64x2_t v1051;
  float64x2_t v1052;
  float64x2_t v1053;
  float64x2_t v1054;
  __int128 v1055;
  float64x2_t v1056;
  float64x2_t v1057;
  float64x2_t v1058;
  float64x2_t v1059;
  __int128 v1060;
  float64x2_t v1061;
  float64x2_t v1062;
  float64x2_t v1063;
  float64x2_t v1064;
  __int128 v1065;
  float64x2_t v1066;
  float64x2_t v1067;
  float64x2_t v1068;
  float64x2_t v1069;
  __int128 v1070;
  float64x2_t v1071;
  float64x2_t v1072;
  float64x2_t v1073;
  float64x2_t v1074;
  __int128 v1075;
  float64x2_t v1076;
  float64x2_t v1077;
  float64x2_t v1078;
  unint64_t v1079;
  __int128 v1080;
  float64x2_t v1081;
  float64x2_t v1082;
  float64x2_t v1083;
  unint64_t v1084;
  __int128 v1085;
  float64x2_t v1086;
  float64x2_t v1087;
  float64x2_t v1088;
  uint64_t v1089;
  __int128 v1090;
  float64x2_t v1091;
  float64x2_t v1092;
  float64x2_t v1093;
  uint64_t v1094;
  __int128 v1095;
  float64x2_t v1096;
  float64x2_t v1097;
  float64x2_t v1098;
  uint64_t v1099;
  __int128 v1100;
  float64x2_t v1101;
  float64x2_t v1102;
  float64x2_t v1103;
  float64x2_t v1104;
  __int128 v1105;
  float64x2_t v1106;
  float64x2_t v1107;
  float64x2_t v1108;
  float64x2_t v1109;
  __int128 v1110;
  float64x2_t v1111;
  float64x2_t v1112;
  float64x2_t v1113;
  float64x2_t v1114;
  __int128 v1115;
  float64x2_t v1116;
  float64x2_t v1117;
  float64x2_t v1118;
  float64x2_t v1119;
  __int128 v1120;
  float64x2_t v1121;
  float64x2_t v1122;
  float64x2_t v1123;
  float64x2_t v1124;
  __int128 v1125;
  float64x2_t v1126;
  float64x2_t v1127;
  float64x2_t v1128;
  float64x2_t v1129;
  __int128 v1130;
  float64x2_t v1131;
  float64x2_t v1132;
  float64x2_t v1133;
  float64x2_t v1134;
  __int128 v1135;
  float64x2_t v1136;
  float64x2_t v1137;
  float64x2_t v1138;
  float64x2_t v1139;
  __int128 v1140;
  float64x2_t v1141;
  float64x2_t v1142;
  float64x2_t v1143;
  float64x2_t v1144;
  __int128 v1145;
  float64x2_t v1146;
  float64x2_t v1147;
  float64x2_t v1148;
  float64x2_t v1149;
  __int128 v1150;
  float64x2_t v1151;
  float64x2_t v1152;
  float64x2_t v1153;
  unint64_t v1154;
  __int128 v1155;
  float64x2_t v1156;
  float64x2_t v1157;
  float64x2_t v1158;
  float64x2_t v1159;
  __int128 v1160;
  float64x2_t v1161;
  float64x2_t v1162;
  float64x2_t v1163;
  float64x2_t v1164;
  __int128 v1165;
  float64x2_t v1166;
  float64x2_t v1167;
  float64x2_t v1168;
  float64x2_t v1169;
  __int128 v1170;
  float64x2_t v1171;
  float64x2_t v1172;
  float64x2_t v1173;
  float64x2_t v1174;
  __int128 v1175;
  float64x2_t v1176;
  float64x2_t v1177;
  float64x2_t v1178;
  float64x2_t v1179;
  __int128 v1180;
  float64x2_t v1181;
  float64x2_t v1182;
  float64x2_t v1183;
  float64x2_t v1184;
  __int128 v1185;
  float64x2_t v1186;
  float64x2_t v1187;
  float64x2_t v1188;
  float64x2_t v1189;
  __int128 v1190;
  float64x2_t v1191;
  float64x2_t v1192;
  float64x2_t v1193;
  float64x2_t v1194;
  __int128 v1195;
  float64x2_t v1196;
  float64x2_t v1197;
  float64x2_t v1198;
  float64x2_t v1199;
  __int128 v1200;
  float64x2_t v1201;
  float64x2_t v1202;
  float64x2_t v1203;
  float64x2_t v1204;
  __int128 v1205;
  float64x2_t v1206;
  float64x2_t v1207;
  float64x2_t v1208;
  float64x2_t v1209;
  __int128 v1210;
  float64x2_t v1211;
  float64x2_t v1212;
  float64x2_t v1213;
  float64x2_t v1214;
  __int128 v1215;
  float64x2_t v1216;
  float64x2_t v1217;
  float64x2_t v1218;
  float64x2_t v1219;
  __int128 v1220;
  float64x2_t v1221;
  float64x2_t v1222;
  float64x2_t v1223;
  float64x2_t v1224;
  __int128 v1225;
  float64x2_t v1226;
  float64x2_t v1227;
  float64x2_t v1228;
  float64x2_t v1229;
  __int128 v1230;
  float64x2_t v1231;
  float64x2_t v1232;
  float64x2_t v1233;
  float64x2_t v1234;
  __int128 v1235;
  float64x2_t v1236;
  float64x2_t v1237;
  float64x2_t v1238;
  float64x2_t v1239;
  __int128 v1240;
  float64x2_t v1241;
  float64x2_t v1242;
  float64x2_t v1243;
  float64x2_t v1244;
  __int128 v1245;
  float64x2_t v1246;
  float64x2_t v1247;
  float64x2_t v1248;
  float64x2_t v1249;
  __int128 v1250;
  float64x2_t v1251;
  float64x2_t v1252;
  float64x2_t v1253;
  float64x2_t v1254;
  __int128 v1255;
  float64x2_t v1256;
  float64x2_t v1257;
  float64x2_t v1258;
  float64x2_t v1259;
  __int128 v1260;
  float64x2_t v1261;
  float64x2_t v1262;
  float64x2_t v1263;
  float64x2_t v1264;
  __int128 v1265;
  float64x2_t v1266;
  float64x2_t v1267;
  float64x2_t v1268;
  float64x2_t v1269;
  __int128 v1270;
  float64x2_t v1271;
  float64x2_t v1272;
  float64x2_t v1273;
  float64x2_t v1274;
  __int128 v1275;
  float64x2_t v1276;
  float64x2_t v1277;
  float64x2_t v1278;
  float64x2_t v1279;
  __int128 v1280;
  float64x2_t v1281;
  float64x2_t v1282;
  float64x2_t v1283;
  float64x2_t v1284;
  __int128 v1285;
  float64x2_t v1286;
  float64x2_t v1287;
  float64x2_t v1288;
  float64x2_t v1289;
  __int128 v1290;
  float64x2_t v1291;
  float64x2_t v1292;
  float64x2_t v1293;
  float64x2_t v1294;
  __int128 v1295;
  float64x2_t v1296;
  float64x2_t v1297;
  float64x2_t v1298;
  float64x2_t v1299;
  __int128 v1300;
  float64x2_t v1301;
  float64x2_t v1302;
  float64x2_t v1303;
  float64x2_t v1304;
  __int128 v1305;
  float64x2_t v1306;
  float64x2_t v1307;
  float64x2_t v1308;
  float64x2_t v1309;
  __int128 v1310;
  float64x2_t v1311;
  float64x2_t v1312;
  float64x2_t v1313;
  float64x2_t v1314;
  __int128 v1315;
  float64x2_t v1316;
  float64x2_t v1317;
  float64x2_t v1318;
  float64x2_t v1319;
  __int128 v1320;
  float64x2_t v1321;
  float64x2_t v1322;
  float64x2_t v1323;
  float64x2_t v1324;
  __int128 v1325;
  float64x2_t v1326;
  float64x2_t v1327;
  float64x2_t v1328;
  float64x2_t v1329;
  __int128 v1330;
  float64x2_t v1331;
  float64x2_t v1332;
  float64x2_t v1333;
  float64x2_t v1334;
  __int128 v1335;
  float64x2_t v1336;
  float64x2_t v1337;
  float64x2_t v1338;
  float64x2_t v1339;
  __int128 v1340;
  float64x2_t v1341;
  float64x2_t v1342;
  float64x2_t v1343;
  float64x2_t v1344;
  __int128 v1345;
  float64x2_t v1346;
  float64x2_t v1347;
  float64x2_t v1348;
  float64x2_t v1349;
  __int128 v1350;
  float64x2_t v1351;
  float64x2_t v1352;
  float64x2_t v1353;
  float64x2_t v1354;
  __int128 v1355;
  float64x2_t v1356;
  float64x2_t v1357;
  float64x2_t v1358;
  float64x2_t v1359;
  __int128 v1360;
  float64x2_t v1361;
  float64x2_t v1362;
  float64x2_t v1363;
  float64x2_t v1364;
  __int128 v1365;
  float64x2_t v1366;
  float64x2_t v1367;
  float64x2_t v1368;
  float64x2_t v1369;
  __int128 v1370;
  float64x2_t v1371;
  float64x2_t v1372;
  float64x2_t v1373;
  float64x2_t v1374;
  __int128 v1375;
  float64x2_t v1376;
  float64x2_t v1377;
  float64x2_t v1378;
  float64x2_t v1379;
  __int128 v1380;
  float64x2_t v1381;
  float64x2_t v1382;
  float64x2_t v1383;
  float64x2_t v1384;
  __int128 v1385;
  float64x2_t v1386;
  float64x2_t v1387;
  float64x2_t v1388;
  float64x2_t v1389;
  __int128 v1390;
  float64x2_t v1391;
  float64x2_t v1392;
  float64x2_t v1393;
  float64x2_t v1394;
  __int128 v1395;
  float64x2_t v1396;
  float64x2_t v1397;
  float64x2_t v1398;
  float64x2_t v1399;
  __int128 v1400;
  float64x2_t v1401;
  float64x2_t v1402;
  float64x2_t v1403;
  float64x2_t v1404;
  __int128 v1405;
  float64x2_t v1406;
  float64x2_t v1407;
  float64x2_t v1408;
  float64x2_t v1409;
  __int128 v1410;
  float64x2_t v1411;
  float64x2_t v1412;
  float64x2_t v1413;
  float64x2_t v1414;
  __int128 v1415;
  float64x2_t v1416;
  float64x2_t v1417;
  float64x2_t v1418;
  float64x2_t v1419;
  __int128 v1420;
  float64x2_t v1421;
  float64x2_t v1422;
  float64x2_t v1423;
  float64x2_t v1424;
  __int128 v1425;
  float64x2_t v1426;
  float64x2_t v1427;
  float64x2_t v1428;
  float64x2_t v1429;
  __int128 v1430;
  float64x2_t v1431;
  float64x2_t v1432;
  float64x2_t v1433;
  float64x2_t v1434;
  __int128 v1435;
  float64x2_t v1436;
  float64x2_t v1437;
  float64x2_t v1438;
  float64x2_t v1439;
  __int128 v1440;
  float64x2_t v1441;
  float64x2_t v1442;
  float64x2_t v1443;
  float64x2_t v1444;
  float64x2_t v1445;
  float64x2_t v1446;
  float64x2_t v1447;
  char **v1448;
  int *v1449;
  __int8 *v1450;
  int v1451;
  char v1452;
  char *category[2];
  char *v1454;
  uint64_t v1455;
  float64x2_t v1456;
  __int128 v1457;
  __int128 v1458;
  __int128 v1459;
  __int128 v1460;
  __int128 v1461;
  __int128 v1462;
  __int128 v1463;
  __int128 v1464;
  __int128 v1465;
  __int128 v1466;
  __int128 v1467;
  __int128 v1468;
  __int128 v1469;
  __int128 v1470;
  __int128 v1471;
  __int128 v1472;
  __int128 v1473;
  __int128 v1474;
  __int128 v1475;
  __int128 v1476;
  __int128 v1477;
  __int128 v1478;
  __int128 v1479;
  __int128 v1480;
  __int128 v1481;
  __int128 v1482;
  __int128 v1483;
  __int128 v1484;
  __int128 v1485;
  __int128 v1486;
  __int128 v1487;
  __int128 v1488;
  __int128 v1489;
  __int128 v1490;
  __int128 v1491;
  __int128 v1492;
  __int128 v1493;
  __int128 v1494;
  __int128 v1495;
  __int128 v1496;
  __int128 v1497;
  __int128 v1498;
  __int128 v1499;
  __int128 v1500;
  __int128 v1501;
  __int128 v1502;
  __int128 v1503;
  __int128 v1504;
  __int128 v1505;
  __int128 v1506;
  __int128 v1507;
  __int128 v1508;
  __int128 v1509;
  __int128 v1510;
  __int128 v1511;
  __int128 v1512;
  __int128 v1513;
  __int128 v1514;
  __int128 v1515;
  __int128 v1516;
  __int128 v1517;
  __int128 v1518;
  __int128 v1519;
  __int128 v1520;
  __int128 v1521;
  __int128 v1522;
  __int128 v1523;
  __int128 v1524;
  __int128 v1525;
  __int128 v1526;
  __int128 v1527;
  __int128 v1528;
  __int128 v1529;
  __int128 v1530;
  __int128 v1531;
  __int128 v1532;
  __int128 v1533;
  __int128 v1534;
  __int128 v1535;
  __int128 v1536;
  __int128 v1537;
  float64x2_t v1538;
  __int128 v1539;
  __int128 v1540;
  __int128 v1541;
  __int128 v1542;
  __int128 v1543;
  __int128 v1544;
  __int128 v1545;
  __int128 v1546;
  __int128 v1547;
  __int128 v1548;
  __int128 v1549;
  __int128 v1550;
  __int128 v1551;
  __int128 v1552;
  __int128 v1553;
  __int128 v1554;
  __int128 v1555;
  __int128 v1556;
  __int128 v1557;
  __int128 v1558;
  __int128 v1559;
  __int128 v1560;
  __int128 v1561;
  __int128 v1562;
  __int128 v1563;
  __int128 v1564;
  __int128 v1565;
  __int128 v1566;
  __int128 v1567;
  uint64_t v1568;
  int v1569;
  int v1570;
  char **v1571;
  int **v1572;
  uint64_t v1573;
  std::string __p;
  float64x2_t v1575;
  float64x2_t v1576[110];
  float64_t v1577;
  uint64_t v1578;
  uint64_t v1579;
  uint64_t v1580;

  MEMORY[0x24BDAC7A8](a1);
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v1580 = *MEMORY[0x24BDAC8D0];
  v1569 = 2;
  v12 = *(int ***)(v11 + 8);
  v1571 = *(char ***)v11;
  v1572 = v12;
  v1573 = *(_QWORD *)(v11 + 16);
  LODWORD(v9) = v1573;
  *(_QWORD *)v11 = 0;
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 16) = 0;
  if ((_DWORD)v9)
  {
    v13 = sub_20E8BE940();
    v1569 = v13 != 0;
    if (v13)
    {
      sub_20F9B2A4C(category);
      if (**((int **)category[0] + 7) <= 4)
      {
        v14 = *((unsigned __int8 *)category[0] + 72);
        v15 = sub_20E8C31DC((uint64_t)category[0], "OSLogSurrogateAppender", 1, 0);
        v16 = v15 ? v15 + 16 : 0;
        if (v14 || v15 != 0)
        {
          *(_QWORD *)&v1456.f64[0] = category;
          *(std::chrono::steady_clock::time_point *)&v1456.f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
          *(std::chrono::system_clock::time_point *)&v1457 = std::chrono::system_clock::now();
          DWORD2(v1457) = 4;
          *(_QWORD *)&v1458 = "unknown file";
          DWORD2(v1458) = 3333;
          *(_QWORD *)&v1460 = 0;
          *(_QWORD *)&v1459 = "unknown function";
          *((_QWORD *)&v1459 + 1) = 0;
          v18 = **(_QWORD **)&v1456.f64[0];
          v19 = (uint64_t *)(**(_QWORD **)&v1456.f64[0] + 16);
          if (*(char *)(**(_QWORD **)&v1456.f64[0] + 39) < 0)
          {
            v21 = *(char **)(v18 + 16);
            v20 = *(_QWORD *)(v18 + 24);
          }
          else
          {
            v20 = *(unsigned __int8 *)(**(_QWORD **)&v1456.f64[0] + 39);
            v21 = (char *)(**(_QWORD **)&v1456.f64[0] + 16);
          }
          v1454 = v21;
          v1455 = v20;
          v840 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v840 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)&__p);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&__p);
            if (LOBYTE(v1575.f64[0]) && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
          v841 = (__int8 *)byte_254A4A4F8[23];
          if (byte_254A4A4F8[23] >= 0)
          {
            v842 = byte_254A4A4F8;
          }
          else
          {
            v841 = *(__int8 **)&byte_254A4A4F8[8];
            v842 = *(const char **)byte_254A4A4F8;
          }
          v1449 = (int *)v842;
          v1450 = v841;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v842, v1454);
          sub_20E86E5A8(&__p.__r_.__value_.__l.__size_, (uint64_t)&v1449);
          sub_20E86E5A8(v1576, (uint64_t)&v1454);
          v843 = __p.__r_.__value_.__r.__words[0];
          sub_20E86E44C((uint64_t)&__p);
          sub_20FBEB8DC(v16, v19, v843, OS_LOG_TYPE_ERROR);
          if (v14)
          {
            sub_20E8C003C((uint64_t)&v1456, "Failed to factorize the marginalized component of the information matrix.");
            sub_20E863570((uint64_t)&v1456);
          }
          sub_20E863714((uint64_t)&v1456);
        }
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_20E8610C0(&__p, "marginalize SW f");
      std::runtime_error::runtime_error(exception, &__p);
      exception->__vftable = (std::runtime_error_vtbl *)&off_24CA04F20;
      __cxa_throw(exception, (struct type_info *)&unk_24CA04F38, (void (*)(void *))std::runtime_error::~runtime_error);
    }
  }
  else
  {
    v1569 = 0;
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1571;
  sub_20FBA9A00((uint64_t)&v1449, (uint64_t *)&__p);
  if (!v1452)
  {
    sub_20F9B2A4C(&v1448);
    if (*(int *)v1448[7] <= 4)
    {
      v828 = *((unsigned __int8 *)v1448 + 72);
      v829 = sub_20E8C31DC((uint64_t)v1448, "OSLogSurrogateAppender", 1, 0);
      v830 = v829 ? v829 + 16 : 0;
      if (v828 || v829)
      {
        *(_QWORD *)&v1456.f64[0] = &v1448;
        *(std::chrono::steady_clock::time_point *)&v1456.f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
        *(std::chrono::system_clock::time_point *)&v1457 = std::chrono::system_clock::now();
        DWORD2(v1457) = 4;
        *(_QWORD *)&v1458 = "unknown file";
        DWORD2(v1458) = 3345;
        *(_QWORD *)&v1460 = 0;
        *(_QWORD *)&v1459 = "unknown function";
        *((_QWORD *)&v1459 + 1) = 0;
        v832 = **(_QWORD **)&v1456.f64[0];
        v833 = (uint64_t *)(**(_QWORD **)&v1456.f64[0] + 16);
        if (*(char *)(**(_QWORD **)&v1456.f64[0] + 39) < 0)
        {
          v835 = *(char **)(v832 + 16);
          v834 = *(char **)(v832 + 24);
        }
        else
        {
          v834 = (char *)*(unsigned __int8 *)(**(_QWORD **)&v1456.f64[0] + 39);
          v835 = (char *)(**(_QWORD **)&v1456.f64[0] + 16);
        }
        category[0] = v835;
        category[1] = v834;
        v836 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v836 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)&__p);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&__p);
          if (LOBYTE(v1575.f64[0]) && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        v837 = byte_254A4A4F8[23];
        if (byte_254A4A4F8[23] >= 0)
        {
          v838 = byte_254A4A4F8;
        }
        else
        {
          v837 = *(_QWORD *)&byte_254A4A4F8[8];
          v838 = *(char **)byte_254A4A4F8;
        }
        v1454 = v838;
        v1455 = v837;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v838, category[0]);
        sub_20E86E5A8(&__p.__r_.__value_.__l.__size_, (uint64_t)&v1454);
        sub_20E86E5A8(v1576, (uint64_t)category);
        v839 = __p.__r_.__value_.__r.__words[0];
        sub_20E86E44C((uint64_t)&__p);
        sub_20FBEBCC8(v830, v833, v839, OS_LOG_TYPE_ERROR);
        if (v828)
        {
          sub_20E8C003C((uint64_t)&v1456, "Failed to invert the factorization of the marginalized component of the information matrix.");
          sub_20E863570((uint64_t)&v1456);
        }
        sub_20E863714((uint64_t)&v1456);
      }
    }
    v831 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E8610C0(&__p, "marginalize SW i");
    std::runtime_error::runtime_error(v831, &__p);
    v831->__vftable = (std::runtime_error_vtbl *)&off_24CA04F20;
    __cxa_throw(v831, (struct type_info *)&unk_24CA04F38, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v22 = (char *)&v1449;
  v1454 = (char *)&v1449;
  if ((v6 & 1) == 0)
  {
    category[0] = (char *)v8;
    v1448 = &v1454;
    *(_QWORD *)&v1456.f64[0] = category;
    *(_QWORD *)&v1456.f64[1] = &v1448;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v1456;
    __p.__r_.__value_.__r.__words[2] = v10;
    v1575.f64[0] = 1.0;
    sub_20FBAA06C(v2, (uint64_t)&__p);
    v22 = v1454;
  }
  category[0] = (char *)&v1454;
  v23 = *((_DWORD *)v22 + 5);
  if (v23 == *(_DWORD *)(v8 + 16))
  {
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)category;
    __p.__r_.__value_.__r.__words[2] = v8;
    v1575.f64[0] = 1.0;
    sub_20FBAA740(v8, (uint64_t)&__p);
  }
  else
  {
    v29 = *(_DWORD *)(v8 + 20);
    v30 = (8 * (v29 * v23) + 31) & 0xFFFFFFFE0;
    *(_QWORD *)&v1456.f64[1] = v30 >> 3;
    *(_QWORD *)&v1456.f64[0] = operator new(v30, (std::align_val_t)0x20uLL);
    LODWORD(v1457) = *((_DWORD *)v22 + 5);
    DWORD1(v1457) = v29;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)category;
    __p.__r_.__value_.__r.__words[2] = v8;
    v1575.f64[0] = 1.0;
    sub_20FBAA740((uint64_t)&v1456, (uint64_t)&__p);
    v31 = *(int64x2_t **)v8;
    v32 = *(double *)(v8 + 8);
    v33 = v1456.f64[1];
    *(float64_t *)v8 = v1456.f64[0];
    *(float64_t *)(v8 + 8) = v33;
    *(_QWORD *)&v1456.f64[0] = v31;
    v1456.f64[1] = v32;
    *(_QWORD *)(v8 + 16) = v1457;
    if (v31)
      MEMORY[0x212BC6368](v31, 0x1000C8000313F17);
  }
  if (v1449)
    MEMORY[0x212BC6368](v1449, 0x1000C8000313F17);
  if (v1571)
    MEMORY[0x212BC6368](v1571, 0x1000C8000313F17);
  v34 = *(_DWORD *)(v4 + 16);
  switch(v34)
  {
    case 22:
      v555 = *(_QWORD *)v4;
      v556 = *(unsigned int *)(v8 + 16);
      v557 = *(int64x2_t **)v8;
      LOBYTE(v558) = *(_DWORD *)(v8 + 16);
      if (v556 >= 2)
      {
        v559 = 0;
        v1323 = *(float64x2_t *)(v555 + 16);
        v1318 = *(float64x2_t *)v555;
        v1313 = *(float64x2_t *)(v555 + 192);
        v1308 = *(float64x2_t *)(v555 + 176);
        v560 = 8 * v556;
        v1303 = *(float64x2_t *)(v555 + 368);
        v1298 = *(float64x2_t *)(v555 + 352);
        v1293 = *(float64x2_t *)(v555 + 544);
        v1288 = *(float64x2_t *)(v555 + 528);
        v1283 = *(float64x2_t *)(v555 + 720);
        v1413 = *(float64x2_t *)(v555 + 704);
        v1408 = *(float64x2_t *)(v555 + 896);
        v1403 = *(float64x2_t *)(v555 + 880);
        v1278 = *(float64x2_t *)(v555 + 1072);
        v1273 = *(float64x2_t *)(v555 + 1056);
        v1268 = *(float64x2_t *)(v555 + 1248);
        v1263 = *(float64x2_t *)(v555 + 1232);
        v1398 = *(float64x2_t *)(v555 + 1424);
        v1258 = *(float64x2_t *)(v555 + 1408);
        v1253 = *(float64x2_t *)(v555 + 1600);
        v1248 = *(float64x2_t *)(v555 + 1584);
        v1243 = *(float64x2_t *)(v555 + 1776);
        v1238 = *(float64x2_t *)(v555 + 1760);
        v1233 = *(float64x2_t *)(v555 + 1952);
        v1228 = *(float64x2_t *)(v555 + 1936);
        v1223 = *(float64x2_t *)(v555 + 2128);
        v1218 = *(float64x2_t *)(v555 + 2112);
        v1213 = *(float64x2_t *)(v555 + 2304);
        v1208 = *(float64x2_t *)(v555 + 2288);
        v1203 = *(float64x2_t *)(v555 + 2480);
        v1198 = *(float64x2_t *)(v555 + 2464);
        v1193 = *(float64x2_t *)(v555 + 2656);
        v1188 = *(float64x2_t *)(v555 + 2640);
        v561 = 3 * v556;
        v562 = *(int64x2_t **)v8;
        v1183 = *(float64x2_t *)(v555 + 2832);
        v1393 = *(float64x2_t *)(v555 + 2816);
        v1388 = *(float64x2_t *)(v555 + 3008);
        v1383 = *(float64x2_t *)(v555 + 2992);
        v1378 = *(float64x2_t *)(v555 + 3184);
        v1373 = *(float64x2_t *)(v555 + 3168);
        v1368 = *(float64x2_t *)(v555 + 3360);
        v1363 = *(float64x2_t *)(v555 + 3344);
        v1358 = *(float64x2_t *)(v555 + 3536);
        v1178 = *(float64x2_t *)(v555 + 3520);
        v1353 = *(float64x2_t *)(v555 + 3712);
        v1173 = *(float64x2_t *)(v555 + 3696);
        v1168 = *(float64x2_t *)(v555 + 752);
        v1163 = *(float64x2_t *)(v555 + 736);
        v1158 = *(float64x2_t *)(v555 + 928);
        v1348 = *(float64x2_t *)(v555 + 912);
        v1153 = *(float64x2_t *)(v555 + 1104);
        v1148 = *(float64x2_t *)(v555 + 1088);
        v1143 = *(float64x2_t *)(v555 + 1280);
        v1138 = *(float64x2_t *)(v555 + 1264);
        v1133 = *(float64x2_t *)(v555 + 1456);
        v1343 = *(float64x2_t *)(v555 + 1440);
        v1128 = *(float64x2_t *)(v555 + 1632);
        v1123 = *(float64x2_t *)(v555 + 1616);
        v1118 = *(float64x2_t *)(v555 + 1808);
        v1113 = *(float64x2_t *)(v555 + 1792);
        v1108 = *(float64x2_t *)(v555 + 1984);
        v1103 = *(float64x2_t *)(v555 + 1968);
        v1098 = *(float64x2_t *)(v555 + 2160);
        v1338 = *(float64x2_t *)(v555 + 2144);
        v1093 = *(float64x2_t *)(v555 + 2336);
        v1088 = *(float64x2_t *)(v555 + 2320);
        v1083 = *(float64x2_t *)(v555 + 2512);
        v1078 = *(float64x2_t *)(v555 + 2496);
        v1073 = *(float64x2_t *)(v555 + 2688);
        v1068 = *(float64x2_t *)(v555 + 2672);
        v1063 = *(float64x2_t *)(v555 + 2864);
        v1058 = *(float64x2_t *)(v555 + 2848);
        v1053 = *(float64x2_t *)(v555 + 3040);
        v1049 = *(float64x2_t *)(v555 + 3024);
        v1045 = *(float64x2_t *)(v555 + 3216);
        v1042 = *(float64x2_t *)(v555 + 3200);
        v1040 = *(float64x2_t *)(v555 + 3392);
        v1038 = *(float64x2_t *)(v555 + 3376);
        v1036 = *(float64x2_t *)(v555 + 3568);
        v1333 = *(float64x2_t *)(v555 + 3552);
        v1034 = *(float64x2_t *)(v555 + 3744);
        v1328 = *(float64x2_t *)(v555 + 3728);
        v563 = *(float64x2_t *)(v555 + 1488);
        v1032 = *(float64x2_t *)(v555 + 1472);
        v1030 = *(float64x2_t *)(v555 + 1664);
        v1028 = *(float64x2_t *)(v555 + 1648);
        v1026 = *(float64x2_t *)(v555 + 1840);
        v1024 = *(float64x2_t *)(v555 + 1824);
        v1022 = *(float64x2_t *)(v555 + 2016);
        v1020 = *(float64x2_t *)(v555 + 2000);
        v1018 = *(float64x2_t *)(v555 + 2192);
        v1016 = *(float64x2_t *)(v555 + 2176);
        v1014 = *(float64x2_t *)(v555 + 2368);
        v1012 = *(float64x2_t *)(v555 + 2352);
        v564 = *(float64x2_t *)(v555 + 2544);
        v1010 = *(float64x2_t *)(v555 + 2528);
        v565 = *(float64x2_t *)(v555 + 2720);
        v1008 = *(float64x2_t *)(v555 + 2704);
        v566 = *(float64x2_t *)(v555 + 2896);
        v1006 = *(float64x2_t *)(v555 + 2880);
        v567 = *(float64x2_t *)(v555 + 3072);
        v568 = *(float64x2_t *)(v555 + 3056);
        v569 = *(float64x2_t *)(v555 + 3248);
        v1004 = *(float64x2_t *)(v555 + 3232);
        v570 = *(float64x2_t *)(v555 + 3424);
        v1002 = *(float64x2_t *)(v555 + 3408);
        v571 = *(float64x2_t *)(v555 + 3600);
        v1000 = *(float64x2_t *)(v555 + 3584);
        v998 = *(float64x2_t *)(v555 + 3776);
        v996 = *(float64x2_t *)(v555 + 3760);
        v994 = *(float64x2_t *)(v555 + 2224);
        v992 = *(float64x2_t *)(v555 + 2208);
        v572 = *(float64x2_t *)(v555 + 2400);
        v990 = *(float64x2_t *)(v555 + 2384);
        v573 = *(float64x2_t *)(v555 + 2576);
        v988 = *(float64x2_t *)(v555 + 2560);
        v574 = *(float64x2_t *)(v555 + 2752);
        v986 = *(float64x2_t *)(v555 + 2736);
        v575 = *(float64x2_t *)(v555 + 2928);
        v984 = *(float64x2_t *)(v555 + 2912);
        v576 = *(float64x2_t *)(v555 + 3104);
        v982 = *(float64x2_t *)(v555 + 3088);
        v577 = *(float64x2_t *)(v555 + 3280);
        v980 = *(float64x2_t *)(v555 + 3264);
        v578 = *(float64x2_t *)(v555 + 3456);
        v978 = *(float64x2_t *)(v555 + 3440);
        v579 = *(float64x2_t *)(v555 + 3632);
        v976 = *(float64x2_t *)(v555 + 3616);
        v974 = *(float64x2_t *)(v555 + 3808);
        v972 = *(float64x2_t *)(v555 + 3792);
        v580 = *(float64x2_t *)(v555 + 2960);
        v581 = *(float64x2_t *)(v555 + 2944);
        v582 = *(float64x2_t *)(v555 + 3136);
        v583 = *(float64x2_t *)(v555 + 3120);
        v584 = *(float64x2_t *)(v555 + 3312);
        v970 = *(float64x2_t *)(v555 + 3296);
        v585 = *(float64x2_t *)(v555 + 3488);
        v586 = *(float64x2_t *)(v555 + 3472);
        v587 = *(float64x2_t *)(v555 + 3664);
        v968 = *(float64x2_t *)(v555 + 3648);
        v588 = *(float64x2_t *)(v555 + 3840);
        v966 = *(float64x2_t *)(v555 + 3824);
        v589 = *(float64x2_t *)(v555 + 3680);
        v590 = *(float64x2_t *)(v555 + 3856);
        do
        {
          v1418 = v590;
          v924 = v589;
          v926 = v587;
          v1423 = v588;
          v1428 = v586;
          v928 = v585;
          v930 = v584;
          v932 = v583;
          v934 = v582;
          v1433 = v581;
          v936 = v580;
          v938 = v578;
          v1438 = v579;
          v940 = v577;
          v942 = v576;
          v944 = v575;
          v946 = v574;
          v948 = v573;
          v950 = v572;
          v952 = v571;
          v954 = v570;
          v956 = v569;
          v958 = v566;
          v1443 = v568;
          v1447 = v567;
          v960 = v565;
          v962 = v564;
          v964 = v563;
          v591 = *(float64x2_t *)((char *)v562 + 8 * v556);
          v592 = (float64x2_t *)&v562->i8[v560 + v560];
          v593 = *v592;
          v594 = (float64x2_t *)((char *)v592 + v560);
          *(_QWORD *)&v595.f64[0] = vdupq_laneq_s64((int64x2_t)v593, 1).u64[0];
          v596 = *v594;
          v597 = (float64x2_t *)((char *)v594 + v560);
          v598 = *v597;
          v599 = (float64x2_t *)((char *)v597 + v560);
          v600 = *v599;
          v601 = (float64x2_t)vzip1q_s64((int64x2_t)v593, (int64x2_t)v596);
          v602 = (float64x2_t *)((char *)v599 + v560);
          v603 = *v602;
          v604 = (float64x2_t *)((char *)v602 + v560);
          v605 = *v604;
          v606 = (float64x2_t *)((char *)v604 + v560);
          v607 = *v606;
          v608 = (float64x2_t *)((char *)v606 + v560);
          v609 = *v608;
          v610 = (float64x2_t *)((char *)v608 + v560);
          v611 = *v610;
          v595.f64[1] = v596.f64[1];
          v612 = (float64x2_t *)((char *)v610 + v560);
          v613 = *v612;
          v614 = (float64x2_t *)((char *)v612 + v560);
          v615 = *v614;
          v616 = (float64x2_t *)((char *)v614 + v560);
          v617 = (float64x2_t)vzip1q_s64(*v562, (int64x2_t)v591);
          v618 = (float64x2_t)vzip2q_s64(*v562, (int64x2_t)v591);
          v619 = vmlaq_laneq_f64(vmulq_n_f64(v601, *(double *)v562->i64), v595, *(float64x2_t *)v562, 1);
          v620 = vmlaq_laneq_f64(vmulq_n_f64(v617, v591.f64[0]), v618, v591, 1);
          v621 = vmlaq_laneq_f64(vmulq_n_f64(v617, v593.f64[0]), v618, v593, 1);
          v622 = vmlaq_laneq_f64(vmulq_n_f64(v601, v591.f64[0]), v595, v591, 1);
          v623 = vmlaq_laneq_f64(vmulq_n_f64(v601, v593.f64[0]), v595, v593, 1);
          v624 = vmlaq_laneq_f64(vmulq_n_f64(v617, v596.f64[0]), v618, v596, 1);
          v625 = vmlaq_laneq_f64(vmulq_n_f64(v601, v596.f64[0]), v595, v596, 1);
          v626 = vmlaq_laneq_f64(vmulq_n_f64(v617, v598.f64[0]), v618, v598, 1);
          v627 = vmlaq_laneq_f64(vmulq_n_f64(v617, v600.f64[0]), v618, v600, 1);
          v628 = vmlaq_laneq_f64(vmulq_n_f64(v601, v598.f64[0]), v595, v598, 1);
          v629 = vmlaq_laneq_f64(vmulq_n_f64(v601, v600.f64[0]), v595, v600, 1);
          v630 = vmlaq_laneq_f64(vmulq_n_f64(v617, v603.f64[0]), v618, v603, 1);
          v631 = vmlaq_laneq_f64(vmulq_n_f64(v601, v603.f64[0]), v595, v603, 1);
          v632 = vmlaq_laneq_f64(vmulq_n_f64(v617, v605.f64[0]), v618, v605, 1);
          v633 = vmlaq_laneq_f64(vmulq_n_f64(v617, v607.f64[0]), v618, v607, 1);
          v634 = vmlaq_laneq_f64(vmulq_n_f64(v601, v605.f64[0]), v595, v605, 1);
          v635 = vmlaq_laneq_f64(vmulq_n_f64(v601, v607.f64[0]), v595, v607, 1);
          v636 = vmlaq_laneq_f64(vmulq_n_f64(v617, v609.f64[0]), v618, v609, 1);
          v637 = vmlaq_laneq_f64(vmulq_n_f64(v601, v609.f64[0]), v595, v609, 1);
          v638 = vmlaq_laneq_f64(vmulq_n_f64(v617, v611.f64[0]), v618, v611, 1);
          v921 = vmlaq_laneq_f64(vmulq_n_f64(v601, v611.f64[0]), v595, v611, 1);
          v916 = vmlaq_laneq_f64(vmulq_n_f64(v601, v613.f64[0]), v595, v613, 1);
          v909 = vmlaq_laneq_f64(vmulq_n_f64(v601, v615.f64[0]), v595, v615, 1);
          v913 = vmlaq_laneq_f64(vmulq_n_f64(v617, v616->f64[0]), v618, *v616, 1);
          v905 = vmlaq_laneq_f64(vmulq_n_f64(v601, v616->f64[0]), v595, *v616, 1);
          v639 = (float64x2_t *)((char *)v616 + v560);
          v901 = vmlaq_laneq_f64(vmulq_n_f64(v617, v639->f64[0]), v618, *v639, 1);
          v897 = vmlaq_laneq_f64(vmulq_n_f64(v601, v639->f64[0]), v595, *v639, 1);
          v640 = (float64x2_t *)((char *)v639 + v560);
          v893 = vmlaq_laneq_f64(vmulq_n_f64(v617, v640->f64[0]), v618, *v640, 1);
          v889 = vmlaq_laneq_f64(vmulq_n_f64(v601, v640->f64[0]), v595, *v640, 1);
          v641 = (float64x2_t *)((char *)v640 + v560);
          v885 = vmlaq_laneq_f64(vmulq_n_f64(v617, v641->f64[0]), v618, *v641, 1);
          v881 = vmlaq_laneq_f64(vmulq_n_f64(v601, v641->f64[0]), v595, *v641, 1);
          v642 = (float64x2_t *)((char *)v641 + v560);
          v877 = vmlaq_laneq_f64(vmulq_n_f64(v617, v642->f64[0]), v618, *v642, 1);
          v874 = vmlaq_laneq_f64(vmulq_n_f64(v601, v642->f64[0]), v595, *v642, 1);
          v643 = (float64x2_t *)((char *)v642 + v560);
          v871 = vmlaq_laneq_f64(vmulq_n_f64(v617, v643->f64[0]), v618, *v643, 1);
          v868 = vmlaq_laneq_f64(vmulq_n_f64(v601, v643->f64[0]), v595, *v643, 1);
          v644 = (float64x2_t *)((char *)v643 + v560);
          v866 = vmlaq_laneq_f64(vmulq_n_f64(v617, v644->f64[0]), v618, *v644, 1);
          v864 = vmlaq_laneq_f64(vmulq_n_f64(v601, v644->f64[0]), v595, *v644, 1);
          v645 = (float64x2_t *)((char *)v644 + v560);
          v862 = vmlaq_laneq_f64(vmulq_n_f64(v617, v645->f64[0]), v618, *v645, 1);
          v860 = vmlaq_laneq_f64(vmulq_n_f64(v601, v645->f64[0]), v595, *v645, 1);
          v646 = *(float64x2_t *)((char *)v645 + 8 * v556);
          v647 = vmlaq_laneq_f64(vmulq_n_f64(v601, v646.f64[0]), v595, v646, 1);
          v648 = vsubq_f64(v1318, vmlaq_laneq_f64(vmulq_n_f64(v617, *(double *)v562->i64), v618, *(float64x2_t *)v562, 1));
          v649 = vsubq_f64(v1308, v620);
          v650 = vsubq_f64(v1298, v621);
          v651 = vsubq_f64(v1288, v624);
          v1413 = vsubq_f64(v1413, v626);
          v1408 = vsubq_f64(v1408, v629);
          v1403 = vsubq_f64(v1403, v627);
          v652 = vsubq_f64(v1263, v632);
          v1398 = vsubq_f64(v1398, v635);
          v1393 = vsubq_f64(v1393, v885);
          v1388 = vsubq_f64(v1388, v874);
          v1383 = vsubq_f64(v1383, v877);
          v1378 = vsubq_f64(v1378, v868);
          v1373 = vsubq_f64(v1373, v871);
          v1368 = vsubq_f64(v1368, v864);
          v1363 = vsubq_f64(v1363, v866);
          v1358 = vsubq_f64(v1358, v860);
          v1353 = vsubq_f64(v1353, v647);
          v1323 = vsubq_f64(v1323, v619);
          *(float64x2_t *)v555 = v648;
          *(float64x2_t *)(v555 + 16) = v1323;
          v1318 = v648;
          v1313 = vsubq_f64(v1313, v622);
          *(float64x2_t *)(v555 + 176) = v649;
          *(float64x2_t *)(v555 + 192) = v1313;
          v1308 = v649;
          v1303 = vsubq_f64(v1303, v623);
          *(float64x2_t *)(v555 + 352) = v650;
          *(float64x2_t *)(v555 + 368) = v1303;
          v1298 = v650;
          v1293 = vsubq_f64(v1293, v625);
          *(float64x2_t *)(v555 + 528) = v651;
          *(float64x2_t *)(v555 + 544) = v1293;
          v1288 = v651;
          v1283 = vsubq_f64(v1283, v628);
          *(float64x2_t *)(v555 + 704) = v1413;
          *(float64x2_t *)(v555 + 720) = v1283;
          *(float64x2_t *)(v555 + 896) = v1408;
          *(float64x2_t *)(v555 + 880) = v1403;
          v1278 = vsubq_f64(v1278, v631);
          *(float64x2_t *)(v555 + 1072) = v1278;
          v1273 = vsubq_f64(v1273, v630);
          *(float64x2_t *)(v555 + 1056) = v1273;
          v1268 = vsubq_f64(v1268, v634);
          *(float64x2_t *)(v555 + 1232) = v652;
          *(float64x2_t *)(v555 + 1248) = v1268;
          v1263 = v652;
          v1258 = vsubq_f64(v1258, v633);
          *(float64x2_t *)(v555 + 1408) = v1258;
          *(float64x2_t *)(v555 + 1424) = v1398;
          v1253 = vsubq_f64(v1253, v637);
          *(float64x2_t *)(v555 + 1600) = v1253;
          v1248 = vsubq_f64(v1248, v636);
          *(float64x2_t *)(v555 + 1584) = v1248;
          v1243 = vsubq_f64(v1243, v921);
          *(float64x2_t *)(v555 + 1776) = v1243;
          v1238 = vsubq_f64(v1238, v638);
          *(float64x2_t *)(v555 + 1760) = v1238;
          v1233 = vsubq_f64(v1233, v916);
          *(float64x2_t *)(v555 + 1952) = v1233;
          v1228 = vsubq_f64(v1228, vmlaq_laneq_f64(vmulq_n_f64(v617, v613.f64[0]), v618, v613, 1));
          *(float64x2_t *)(v555 + 1936) = v1228;
          v1223 = vsubq_f64(v1223, v909);
          *(float64x2_t *)(v555 + 2128) = v1223;
          v1218 = vsubq_f64(v1218, vmlaq_laneq_f64(vmulq_n_f64(v617, v615.f64[0]), v618, v615, 1));
          *(float64x2_t *)(v555 + 2112) = v1218;
          v1213 = vsubq_f64(v1213, v905);
          *(float64x2_t *)(v555 + 2304) = v1213;
          v1208 = vsubq_f64(v1208, v913);
          *(float64x2_t *)(v555 + 2288) = v1208;
          v1203 = vsubq_f64(v1203, v897);
          *(float64x2_t *)(v555 + 2480) = v1203;
          v1198 = vsubq_f64(v1198, v901);
          *(float64x2_t *)(v555 + 2464) = v1198;
          v1193 = vsubq_f64(v1193, v889);
          *(float64x2_t *)(v555 + 2656) = v1193;
          v1188 = vsubq_f64(v1188, v893);
          *(float64x2_t *)(v555 + 2640) = v1188;
          v1183 = vsubq_f64(v1183, v881);
          *(float64x2_t *)(v555 + 2832) = v1183;
          *(float64x2_t *)(v555 + 2816) = v1393;
          *(float64x2_t *)(v555 + 3008) = v1388;
          *(float64x2_t *)(v555 + 2992) = v1383;
          *(float64x2_t *)(v555 + 3184) = v1378;
          *(float64x2_t *)(v555 + 3168) = v1373;
          *(float64x2_t *)(v555 + 3360) = v1368;
          *(float64x2_t *)(v555 + 3344) = v1363;
          v1178 = vsubq_f64(v1178, v862);
          *(float64x2_t *)(v555 + 3520) = v1178;
          *(float64x2_t *)(v555 + 3536) = v1358;
          v1173 = vsubq_f64(v1173, vmlaq_laneq_f64(vmulq_n_f64(v617, v646.f64[0]), v618, v646, 1));
          *(float64x2_t *)(v555 + 3696) = v1173;
          *(float64x2_t *)(v555 + 3712) = v1353;
          v653 = (int64x2_t *)((char *)v557 + 8 * (4 * v556 + v559));
          v654 = *(float64x2_t *)((char *)v653 + 8 * v556);
          v655 = (float64x2_t)v653[v556];
          *(_QWORD *)&v648.f64[0] = vdupq_laneq_s64((int64x2_t)v655, 1).u64[0];
          v656 = *(float64x2_t *)((char *)v653 + 24 * v556);
          v657 = (float64x2_t)v653[2 * v556];
          v658 = *(float64x2_t *)((char *)v653 + 40 * v556);
          v659 = (float64x2_t)v653[3 * v556];
          v660 = *(float64x2_t *)((char *)v653 + 56 * v556);
          v661 = (float64x2_t)v653[4 * v556];
          v662 = *(float64x2_t *)((char *)v653 + 72 * v556);
          v663 = (float64x2_t)v653[5 * v556];
          v664 = (float64x2_t)vzip1q_s64((int64x2_t)v655, (int64x2_t)v656);
          v665 = *(float64x2_t *)((char *)v653 + 88 * v556);
          v666 = (float64x2_t)v653[6 * v556];
          *(_QWORD *)&v648.f64[1] = v653->i64[v561 + 1];
          v667 = *(float64x2_t *)((char *)v653 + 104 * v556);
          v668 = (float64x2_t)vzip1q_s64(*v653, (int64x2_t)v654);
          v669 = (float64x2_t)vzip2q_s64(*v653, (int64x2_t)v654);
          v670 = vmlaq_laneq_f64(vmulq_n_f64(v668, v654.f64[0]), v669, v654, 1);
          v671 = vmlaq_laneq_f64(vmulq_n_f64(v664, v654.f64[0]), v648, v654, 1);
          v672 = vmlaq_laneq_f64(vmulq_n_f64(v668, v655.f64[0]), v669, v655, 1);
          v673 = vmlaq_laneq_f64(vmulq_n_f64(v668, v656.f64[0]), v669, v656, 1);
          v674 = vmlaq_laneq_f64(vmulq_n_f64(v664, v655.f64[0]), v648, v655, 1);
          v675 = vmlaq_laneq_f64(vmulq_n_f64(v664, v656.f64[0]), v648, v656, 1);
          v676 = vmlaq_laneq_f64(vmulq_n_f64(v668, v657.f64[0]), v669, v657, 1);
          v677 = vmlaq_laneq_f64(vmulq_n_f64(v664, v657.f64[0]), v648, v657, 1);
          v678 = vmlaq_laneq_f64(vmulq_n_f64(v668, v658.f64[0]), v669, v658, 1);
          v679 = vmlaq_laneq_f64(vmulq_n_f64(v668, v659.f64[0]), v669, v659, 1);
          v680 = vmlaq_laneq_f64(vmulq_n_f64(v664, v658.f64[0]), v648, v658, 1);
          v681 = vmlaq_laneq_f64(vmulq_n_f64(v664, v659.f64[0]), v648, v659, 1);
          v922 = vmlaq_laneq_f64(vmulq_n_f64(v668, v662.f64[0]), v669, v662, 1);
          v918 = vmlaq_laneq_f64(vmulq_n_f64(v664, v662.f64[0]), v648, v662, 1);
          v910 = vmlaq_laneq_f64(vmulq_n_f64(v668, v665.f64[0]), v669, v665, 1);
          v902 = vmlaq_laneq_f64(vmulq_n_f64(v664, v665.f64[0]), v648, v665, 1);
          v906 = vmlaq_laneq_f64(vmulq_n_f64(v668, v666.f64[0]), v669, v666, 1);
          v682 = vmlaq_laneq_f64(vmulq_n_f64(v664, v666.f64[0]), v648, v666, 1);
          v898 = vmlaq_laneq_f64(vmulq_n_f64(v668, v667.f64[0]), v669, v667, 1);
          v894 = vmlaq_laneq_f64(vmulq_n_f64(v664, v667.f64[0]), v648, v667, 1);
          v683 = (float64x2_t)v653[7 * v556];
          v890 = vmlaq_laneq_f64(vmulq_n_f64(v668, v683.f64[0]), v669, v683, 1);
          v886 = vmlaq_laneq_f64(vmulq_n_f64(v664, v683.f64[0]), v648, v683, 1);
          v684 = *(float64x2_t *)((char *)v653 + 120 * v556);
          v882 = vmlaq_laneq_f64(vmulq_n_f64(v668, v684.f64[0]), v669, v684, 1);
          v878 = vmlaq_laneq_f64(vmulq_n_f64(v664, v684.f64[0]), v648, v684, 1);
          v685 = (float64x2_t)v653[8 * v556];
          v686 = vmlaq_laneq_f64(vmulq_n_f64(v668, v685.f64[0]), v669, v685, 1);
          v687 = vmlaq_laneq_f64(vmulq_n_f64(v664, v685.f64[0]), v648, v685, 1);
          v688 = *(float64x2_t *)((char *)v653 + 136 * v556);
          v689 = vsubq_f64(v1163, vmlaq_laneq_f64(vmulq_n_f64(v668, *(double *)v653->i64), v669, *(float64x2_t *)v653, 1));
          v1348 = vsubq_f64(v1348, v670);
          v690 = vsubq_f64(v1138, v673);
          v1343 = vsubq_f64(v1343, v676);
          v1338 = vsubq_f64(v1338, vmlaq_laneq_f64(vmulq_n_f64(v668, v661.f64[0]), v669, v661, 1));
          v1333 = vsubq_f64(v1333, v686);
          v1328 = vsubq_f64(v1328, vmlaq_laneq_f64(vmulq_n_f64(v668, v688.f64[0]), v669, v688, 1));
          v1168 = vsubq_f64(v1168, vmlaq_laneq_f64(vmulq_n_f64(v664, *(double *)v653->i64), v648, *(float64x2_t *)v653, 1));
          *(float64x2_t *)(v555 + 736) = v689;
          *(float64x2_t *)(v555 + 752) = v1168;
          v1163 = v689;
          v1158 = vsubq_f64(v1158, v671);
          *(float64x2_t *)(v555 + 912) = v1348;
          *(float64x2_t *)(v555 + 928) = v1158;
          v1148 = vsubq_f64(v1148, v672);
          *(float64x2_t *)(v555 + 1088) = v1148;
          v1153 = vsubq_f64(v1153, v674);
          *(float64x2_t *)(v555 + 1104) = v1153;
          v1143 = vsubq_f64(v1143, v675);
          *(float64x2_t *)(v555 + 1264) = v690;
          *(float64x2_t *)(v555 + 1280) = v1143;
          v1138 = v690;
          v1133 = vsubq_f64(v1133, v677);
          *(float64x2_t *)(v555 + 1456) = v1133;
          *(float64x2_t *)(v555 + 1440) = v1343;
          v1123 = vsubq_f64(v1123, v678);
          *(float64x2_t *)(v555 + 1616) = v1123;
          v1128 = vsubq_f64(v1128, v680);
          *(float64x2_t *)(v555 + 1632) = v1128;
          v1118 = vsubq_f64(v1118, v681);
          *(float64x2_t *)(v555 + 1808) = v1118;
          v1113 = vsubq_f64(v1113, v679);
          *(float64x2_t *)(v555 + 1792) = v1113;
          v1108 = vsubq_f64(v1108, vmlaq_laneq_f64(vmulq_n_f64(v664, v660.f64[0]), v648, v660, 1));
          *(float64x2_t *)(v555 + 1984) = v1108;
          v1103 = vsubq_f64(v1103, vmlaq_laneq_f64(vmulq_n_f64(v668, v660.f64[0]), v669, v660, 1));
          *(float64x2_t *)(v555 + 1968) = v1103;
          *(float64x2_t *)(v555 + 2144) = v1338;
          v1098 = vsubq_f64(v1098, vmlaq_laneq_f64(vmulq_n_f64(v664, v661.f64[0]), v648, v661, 1));
          *(float64x2_t *)(v555 + 2160) = v1098;
          v1093 = vsubq_f64(v1093, v918);
          *(float64x2_t *)(v555 + 2336) = v1093;
          v1088 = vsubq_f64(v1088, v922);
          *(float64x2_t *)(v555 + 2320) = v1088;
          v1083 = vsubq_f64(v1083, vmlaq_laneq_f64(vmulq_n_f64(v664, v663.f64[0]), v648, v663, 1));
          *(float64x2_t *)(v555 + 2512) = v1083;
          v1078 = vsubq_f64(v1078, vmlaq_laneq_f64(vmulq_n_f64(v668, v663.f64[0]), v669, v663, 1));
          *(float64x2_t *)(v555 + 2496) = v1078;
          v1068 = vsubq_f64(v1068, v910);
          *(float64x2_t *)(v555 + 2672) = v1068;
          v1073 = vsubq_f64(v1073, v902);
          *(float64x2_t *)(v555 + 2688) = v1073;
          v1063 = vsubq_f64(v1063, v682);
          *(float64x2_t *)(v555 + 2864) = v1063;
          v1058 = vsubq_f64(v1058, v906);
          *(float64x2_t *)(v555 + 2848) = v1058;
          v1053 = vsubq_f64(v1053, v894);
          *(float64x2_t *)(v555 + 3040) = v1053;
          v1049 = vsubq_f64(v1049, v898);
          *(float64x2_t *)(v555 + 3024) = v1049;
          v1042 = vsubq_f64(v1042, v890);
          *(float64x2_t *)(v555 + 3200) = v1042;
          v1045 = vsubq_f64(v1045, v886);
          *(float64x2_t *)(v555 + 3216) = v1045;
          v1040 = vsubq_f64(v1040, v878);
          *(float64x2_t *)(v555 + 3392) = v1040;
          v1038 = vsubq_f64(v1038, v882);
          *(float64x2_t *)(v555 + 3376) = v1038;
          v1036 = vsubq_f64(v1036, v687);
          *(float64x2_t *)(v555 + 3568) = v1036;
          *(float64x2_t *)(v555 + 3552) = v1333;
          *(float64x2_t *)(v555 + 3728) = v1328;
          v1034 = vsubq_f64(v1034, vmlaq_laneq_f64(vmulq_n_f64(v664, v688.f64[0]), v648, v688, 1));
          *(float64x2_t *)(v555 + 3744) = v1034;
          v691 = (int64x2_t *)((char *)v557 + 8 * (8 * v556 + v559));
          v692 = (float64x2_t)v691[v556];
          v693 = *(float64x2_t *)((char *)v691 + 8 * v556);
          v694 = *(float64x2_t *)((char *)v691 + 24 * v556);
          *(_QWORD *)&v668.f64[0] = vdupq_laneq_s64((int64x2_t)v692, 1).u64[0];
          v695 = (float64x2_t)v691[2 * v556];
          v696 = *(float64x2_t *)((char *)v691 + 40 * v556);
          v697 = (float64x2_t)v691[3 * v556];
          v698 = *(float64x2_t *)((char *)v691 + 56 * v556);
          v699 = (float64x2_t)v691[4 * v556];
          v700 = *(float64x2_t *)((char *)v691 + 72 * v556);
          v701 = (float64x2_t)v691[5 * v556];
          v702 = *(float64x2_t *)((char *)v691 + 88 * v556);
          v703 = (float64x2_t)v691[6 * v556];
          v704 = (float64x2_t)vzip1q_s64((int64x2_t)v692, (int64x2_t)v694);
          v705 = (float64x2_t)vzip1q_s64(*v691, (int64x2_t)v693);
          v706 = (float64x2_t)vzip2q_s64(*v691, (int64x2_t)v693);
          *(_QWORD *)&v668.f64[1] = v691->i64[v561 + 1];
          v707 = vmlaq_laneq_f64(vmulq_n_f64(v705, *(double *)v691->i64), v706, *(float64x2_t *)v691, 1);
          v708 = vmlaq_laneq_f64(vmulq_n_f64(v705, v693.f64[0]), v706, v693, 1);
          v709 = vmlaq_laneq_f64(vmulq_n_f64(v704, *(double *)v691->i64), v668, *(float64x2_t *)v691, 1);
          v710 = vmlaq_laneq_f64(vmulq_n_f64(v704, v693.f64[0]), v668, v693, 1);
          v711 = vmlaq_laneq_f64(vmulq_n_f64(v705, v692.f64[0]), v706, v692, 1);
          v712 = vmlaq_laneq_f64(vmulq_n_f64(v704, v692.f64[0]), v668, v692, 1);
          v713 = vmlaq_laneq_f64(vmulq_n_f64(v705, v694.f64[0]), v706, v694, 1);
          v714 = vmlaq_laneq_f64(vmulq_n_f64(v705, v695.f64[0]), v706, v695, 1);
          v715 = vmlaq_laneq_f64(vmulq_n_f64(v704, v694.f64[0]), v668, v694, 1);
          v716 = vmlaq_laneq_f64(vmulq_n_f64(v704, v695.f64[0]), v668, v695, 1);
          v717 = vmlaq_laneq_f64(vmulq_n_f64(v705, v696.f64[0]), v706, v696, 1);
          v718 = vmlaq_laneq_f64(vmulq_n_f64(v704, v696.f64[0]), v668, v696, 1);
          v719 = vmlaq_laneq_f64(vmulq_n_f64(v705, v697.f64[0]), v706, v697, 1);
          v720 = vmlaq_laneq_f64(vmulq_n_f64(v705, v698.f64[0]), v706, v698, 1);
          v721 = vmlaq_laneq_f64(vmulq_n_f64(v704, v697.f64[0]), v668, v697, 1);
          v722 = vmlaq_laneq_f64(vmulq_n_f64(v704, v698.f64[0]), v668, v698, 1);
          v723 = vmlaq_laneq_f64(vmulq_n_f64(v705, v699.f64[0]), v706, v699, 1);
          v724 = vmlaq_laneq_f64(vmulq_n_f64(v704, v699.f64[0]), v668, v699, 1);
          v725 = vmlaq_laneq_f64(vmulq_n_f64(v705, v700.f64[0]), v706, v700, 1);
          v726 = vmlaq_laneq_f64(vmulq_n_f64(v705, v701.f64[0]), v706, v701, 1);
          v727 = vmlaq_laneq_f64(vmulq_n_f64(v704, v700.f64[0]), v668, v700, 1);
          v728 = vmlaq_laneq_f64(vmulq_n_f64(v704, v701.f64[0]), v668, v701, 1);
          v729 = vmlaq_laneq_f64(vmulq_n_f64(v705, v702.f64[0]), v706, v702, 1);
          v730 = vmlaq_laneq_f64(vmulq_n_f64(v704, v702.f64[0]), v668, v702, 1);
          v731 = vmlaq_laneq_f64(vmulq_n_f64(v705, v703.f64[0]), v706, v703, 1);
          v732 = vmlaq_laneq_f64(vmulq_n_f64(v704, v703.f64[0]), v668, v703, 1);
          v733 = *(float64x2_t *)((char *)v691 + 104 * v556);
          v734 = vmlaq_laneq_f64(vmulq_n_f64(v705, v733.f64[0]), v706, v733, 1);
          v735 = vmlaq_laneq_f64(vmulq_n_f64(v704, v733.f64[0]), v668, v733, 1);
          v736 = vsubq_f64(v1032, v707);
          v563 = vsubq_f64(v964, v709);
          v737 = vsubq_f64(v1030, v710);
          v738 = vsubq_f64(v1024, v711);
          v739 = vsubq_f64(v1026, v712);
          v740 = vsubq_f64(v1020, v713);
          v741 = vsubq_f64(v1016, v714);
          v742 = vsubq_f64(v1018, v716);
          v743 = vsubq_f64(v1014, v718);
          v744 = vsubq_f64(v1010, v719);
          v745 = vsubq_f64(v1008, v720);
          v564 = vsubq_f64(v962, v721);
          v565 = vsubq_f64(v960, v722);
          v566 = vsubq_f64(v958, v724);
          v568 = vsubq_f64(v1443, v725);
          v746 = vsubq_f64(v1004, v726);
          v567 = vsubq_f64(v1447, v727);
          v569 = vsubq_f64(v956, v728);
          v747 = vsubq_f64(v1002, v729);
          v570 = vsubq_f64(v954, v730);
          v748 = vsubq_f64(v1000, v731);
          v571 = vsubq_f64(v952, v732);
          *(float64x2_t *)(v555 + 1488) = v563;
          v1032 = v736;
          *(float64x2_t *)(v555 + 1472) = v736;
          v1030 = v737;
          *(float64x2_t *)(v555 + 1664) = v737;
          v1028 = vsubq_f64(v1028, v708);
          *(float64x2_t *)(v555 + 1648) = v1028;
          v1026 = v739;
          *(float64x2_t *)(v555 + 1840) = v739;
          v1024 = v738;
          *(float64x2_t *)(v555 + 1824) = v738;
          v1022 = vsubq_f64(v1022, v715);
          *(float64x2_t *)(v555 + 2016) = v1022;
          v1020 = v740;
          *(float64x2_t *)(v555 + 2000) = v740;
          v1018 = v742;
          *(float64x2_t *)(v555 + 2192) = v742;
          v1016 = v741;
          *(float64x2_t *)(v555 + 2176) = v741;
          v1014 = v743;
          *(float64x2_t *)(v555 + 2368) = v743;
          v1012 = vsubq_f64(v1012, v717);
          *(float64x2_t *)(v555 + 2352) = v1012;
          *(float64x2_t *)(v555 + 2544) = v564;
          v1010 = v744;
          *(float64x2_t *)(v555 + 2528) = v744;
          *(float64x2_t *)(v555 + 2720) = v565;
          v1008 = v745;
          *(float64x2_t *)(v555 + 2704) = v745;
          *(float64x2_t *)(v555 + 2896) = v566;
          v1006 = vsubq_f64(v1006, v723);
          *(float64x2_t *)(v555 + 2880) = v1006;
          *(float64x2_t *)(v555 + 3072) = v567;
          *(float64x2_t *)(v555 + 3056) = v568;
          *(float64x2_t *)(v555 + 3248) = v569;
          v1004 = v746;
          *(float64x2_t *)(v555 + 3232) = v746;
          *(float64x2_t *)(v555 + 3424) = v570;
          v1002 = v747;
          *(float64x2_t *)(v555 + 3408) = v747;
          *(float64x2_t *)(v555 + 3600) = v571;
          v1000 = v748;
          *(float64x2_t *)(v555 + 3584) = v748;
          v996 = vsubq_f64(v996, v734);
          *(float64x2_t *)(v555 + 3760) = v996;
          v998 = vsubq_f64(v998, v735);
          *(float64x2_t *)(v555 + 3776) = v998;
          v749 = (int64x2_t *)((char *)v557 + 8 * (12 * v556 + v559));
          v750 = (float64x2_t)v749[v556];
          v751 = *(float64x2_t *)((char *)v749 + 8 * v556);
          v752 = *(float64x2_t *)((char *)v749 + 24 * v556);
          *(_QWORD *)&v736.f64[0] = vdupq_laneq_s64((int64x2_t)v750, 1).u64[0];
          v753 = (float64x2_t)v749[2 * v556];
          v754 = *(float64x2_t *)((char *)v749 + 40 * v556);
          v755 = (float64x2_t)v749[3 * v556];
          v756 = *(float64x2_t *)((char *)v749 + 56 * v556);
          v757 = (float64x2_t)vzip1q_s64((int64x2_t)v750, (int64x2_t)v752);
          v758 = (float64x2_t)v749[4 * v556];
          v759 = (float64x2_t)vzip1q_s64(*v749, (int64x2_t)v751);
          *(_QWORD *)&v736.f64[1] = v749->i64[v561 + 1];
          v760 = (float64x2_t)vzip2q_s64(*v749, (int64x2_t)v751);
          v761 = vmlaq_laneq_f64(vmulq_n_f64(v759, *(double *)v749->i64), v760, *(float64x2_t *)v749, 1);
          v762 = vmlaq_laneq_f64(vmulq_n_f64(v757, *(double *)v749->i64), v736, *(float64x2_t *)v749, 1);
          v763 = vmlaq_laneq_f64(vmulq_n_f64(v759, v751.f64[0]), v760, v751, 1);
          v764 = vmlaq_laneq_f64(vmulq_n_f64(v759, v750.f64[0]), v760, v750, 1);
          v765 = vmlaq_laneq_f64(vmulq_n_f64(v757, v751.f64[0]), v736, v751, 1);
          v766 = vmlaq_laneq_f64(vmulq_n_f64(v757, v750.f64[0]), v736, v750, 1);
          v767 = vmlaq_laneq_f64(vmulq_n_f64(v759, v752.f64[0]), v760, v752, 1);
          v768 = vmlaq_laneq_f64(vmulq_n_f64(v757, v752.f64[0]), v736, v752, 1);
          v769 = vmlaq_laneq_f64(vmulq_n_f64(v759, v753.f64[0]), v760, v753, 1);
          v770 = vmlaq_laneq_f64(vmulq_n_f64(v759, v754.f64[0]), v760, v754, 1);
          v771 = vmlaq_laneq_f64(vmulq_n_f64(v757, v753.f64[0]), v736, v753, 1);
          v772 = vmlaq_laneq_f64(vmulq_n_f64(v757, v754.f64[0]), v736, v754, 1);
          v773 = vmlaq_laneq_f64(vmulq_n_f64(v759, v755.f64[0]), v760, v755, 1);
          v774 = vmlaq_laneq_f64(vmulq_n_f64(v757, v755.f64[0]), v736, v755, 1);
          v775 = vmlaq_laneq_f64(vmulq_n_f64(v759, v756.f64[0]), v760, v756, 1);
          v776 = vmlaq_laneq_f64(vmulq_n_f64(v757, v756.f64[0]), v736, v756, 1);
          v777 = vmlaq_laneq_f64(vmulq_n_f64(v759, v758.f64[0]), v760, v758, 1);
          v778 = vmlaq_laneq_f64(vmulq_n_f64(v757, v758.f64[0]), v736, v758, 1);
          v779 = *(float64x2_t *)((char *)v749 + 72 * v556);
          v780 = vmlaq_laneq_f64(vmulq_n_f64(v759, v779.f64[0]), v760, v779, 1);
          v781 = vmlaq_laneq_f64(vmulq_n_f64(v757, v779.f64[0]), v736, v779, 1);
          v782 = vsubq_f64(v992, v761);
          v783 = vsubq_f64(v990, v763);
          v784 = vsubq_f64(v988, v764);
          v572 = vsubq_f64(v950, v765);
          v573 = vsubq_f64(v948, v766);
          v785 = vsubq_f64(v986, v767);
          v574 = vsubq_f64(v946, v768);
          v786 = vsubq_f64(v984, v769);
          v787 = vsubq_f64(v982, v770);
          v575 = vsubq_f64(v944, v771);
          v576 = vsubq_f64(v942, v772);
          v788 = vsubq_f64(v980, v773);
          v577 = vsubq_f64(v940, v774);
          v789 = vsubq_f64(v978, v775);
          v578 = vsubq_f64(v938, v776);
          v579 = vsubq_f64(v1438, v778);
          v994 = vsubq_f64(v994, v762);
          *(float64x2_t *)(v555 + 2224) = v994;
          v992 = v782;
          *(float64x2_t *)(v555 + 2208) = v782;
          *(float64x2_t *)(v555 + 2400) = v572;
          v990 = v783;
          *(float64x2_t *)(v555 + 2384) = v783;
          *(float64x2_t *)(v555 + 2576) = v573;
          v988 = v784;
          *(float64x2_t *)(v555 + 2560) = v784;
          *(float64x2_t *)(v555 + 2752) = v574;
          v986 = v785;
          *(float64x2_t *)(v555 + 2736) = v785;
          *(float64x2_t *)(v555 + 2928) = v575;
          v984 = v786;
          *(float64x2_t *)(v555 + 2912) = v786;
          *(float64x2_t *)(v555 + 3104) = v576;
          v982 = v787;
          *(float64x2_t *)(v555 + 3088) = v787;
          *(float64x2_t *)(v555 + 3280) = v577;
          v980 = v788;
          *(float64x2_t *)(v555 + 3264) = v788;
          *(float64x2_t *)(v555 + 3456) = v578;
          v978 = v789;
          *(float64x2_t *)(v555 + 3440) = v789;
          *(float64x2_t *)(v555 + 3632) = v579;
          v976 = vsubq_f64(v976, v777);
          *(float64x2_t *)(v555 + 3616) = v976;
          v972 = vsubq_f64(v972, v780);
          *(float64x2_t *)(v555 + 3792) = v972;
          v974 = vsubq_f64(v974, v781);
          *(float64x2_t *)(v555 + 3808) = v974;
          v790 = (int64x2_t *)((char *)v557 + 8 * (16 * v556 + v559));
          v791 = (float64x2_t)v790[v556];
          v792 = *(float64x2_t *)((char *)v790 + 8 * v556);
          v793 = *(float64x2_t *)((char *)v790 + 24 * v556);
          *(_QWORD *)&v788.f64[0] = vdupq_laneq_s64((int64x2_t)v791, 1).u64[0];
          v794 = (float64x2_t)v790[2 * v556];
          v795 = (float64x2_t)vzip1q_s64((int64x2_t)v791, (int64x2_t)v793);
          v796 = (float64x2_t)vzip1q_s64(*v790, (int64x2_t)v792);
          v797 = (float64x2_t)vzip2q_s64(*v790, (int64x2_t)v792);
          *(_QWORD *)&v788.f64[1] = v790->i64[v561 + 1];
          v798 = vmlaq_laneq_f64(vmulq_n_f64(v796, *(double *)v790->i64), v797, *(float64x2_t *)v790, 1);
          v799 = vmlaq_laneq_f64(vmulq_n_f64(v796, v792.f64[0]), v797, v792, 1);
          v800 = vmlaq_laneq_f64(vmulq_n_f64(v795, *(double *)v790->i64), v788, *(float64x2_t *)v790, 1);
          v801 = vmlaq_laneq_f64(vmulq_n_f64(v795, v792.f64[0]), v788, v792, 1);
          v802 = vmlaq_laneq_f64(vmulq_n_f64(v796, v791.f64[0]), v797, v791, 1);
          v803 = vmlaq_laneq_f64(vmulq_n_f64(v795, v791.f64[0]), v788, v791, 1);
          v804 = vmlaq_laneq_f64(vmulq_n_f64(v796, v793.f64[0]), v797, v793, 1);
          v805 = vmlaq_laneq_f64(vmulq_n_f64(v795, v793.f64[0]), v788, v793, 1);
          v806 = vmlaq_laneq_f64(vmulq_n_f64(v796, v794.f64[0]), v797, v794, 1);
          v807 = vmlaq_laneq_f64(vmulq_n_f64(v795, v794.f64[0]), v788, v794, 1);
          v808 = *(float64x2_t *)((char *)v790 + 40 * v556);
          v809 = vmlaq_laneq_f64(vmulq_n_f64(v796, v808.f64[0]), v797, v808, 1);
          v810 = vmlaq_laneq_f64(vmulq_n_f64(v795, v808.f64[0]), v788, v808, 1);
          v581 = vsubq_f64(v1433, v798);
          v580 = vsubq_f64(v936, v800);
          v583 = vsubq_f64(v932, v799);
          v582 = vsubq_f64(v934, v801);
          v584 = vsubq_f64(v930, v803);
          v586 = vsubq_f64(v1428, v804);
          v585 = vsubq_f64(v928, v805);
          v811 = vsubq_f64(v966, v809);
          v587 = vsubq_f64(v926, v807);
          v588 = vsubq_f64(v1423, v810);
          *(float64x2_t *)(v555 + 2960) = v580;
          *(float64x2_t *)(v555 + 2944) = v581;
          *(float64x2_t *)(v555 + 3136) = v582;
          *(float64x2_t *)(v555 + 3120) = v583;
          *(float64x2_t *)(v555 + 3312) = v584;
          v970 = vsubq_f64(v970, v802);
          *(float64x2_t *)(v555 + 3296) = v970;
          *(float64x2_t *)(v555 + 3488) = v585;
          *(float64x2_t *)(v555 + 3472) = v586;
          *(float64x2_t *)(v555 + 3664) = v587;
          v968 = vsubq_f64(v968, v806);
          *(float64x2_t *)(v555 + 3648) = v968;
          *(float64x2_t *)(v555 + 3840) = v588;
          v966 = v811;
          *(float64x2_t *)(v555 + 3824) = v811;
          v812 = (int64x2_t *)((char *)v557 + 8 * (20 * v556 + v559));
          v813 = *(float64x2_t *)((char *)v812 + 8 * v556);
          v814 = (float64x2_t)vzip1q_s64(*v812, (int64x2_t)v813);
          *(_QWORD *)&v806.f64[0] = vdupq_laneq_s64(*v812, 1).u64[0];
          *(_QWORD *)&v806.f64[1] = v812->i64[(unint64_t)v560 / 8 + 1];
          v815 = vmlaq_laneq_f64(vmulq_n_f64(v814, v813.f64[0]), v806, v813, 1);
          v589 = vsubq_f64(v924, vmlaq_laneq_f64(vmulq_n_f64(v814, *(double *)v812->i64), v806, *(float64x2_t *)v812, 1));
          v590 = vsubq_f64(v1418, v815);
          *(float64x2_t *)(v555 + 3680) = v589;
          *(float64x2_t *)(v555 + 3856) = v590;
          LODWORD(v812) = v559 + 4;
          v559 += 2;
          ++v562;
        }
        while (v812 <= v556);
        v558 = *(_DWORD *)(v8 + 16);
      }
      if ((v558 & 1) != 0)
      {
        v1569 = 1;
        v1570 = v556;
        v1571 = (char **)v557 + (v556 - 1);
        LODWORD(v1572) = v556 - 1;
        v1449 = &v1569;
        *(_QWORD *)&v1456.f64[1] = &v1449;
        *(_QWORD *)&v1457 = &v1569;
        *((_QWORD *)&v1457 + 1) = 0x3FF0000000000000;
        if (v557 == (int64x2_t *)v555)
        {
          sub_20FBAAB3C((double *)&__p, (uint64_t)&v1456);
          if (v555 >= (unint64_t)&v1580 || (unint64_t)&__p >= v555 + 3872)
          {
            for (i = 0; i != 3872; i += 32)
            {
              v826 = (float64x2_t *)(v555 + i);
              v827 = vsubq_f64(*(float64x2_t *)(v555 + i + 16), *(float64x2_t *)&__p.__r_.__value_.__r.__words[i / 8 + 2]);
              *v826 = vsubq_f64(*(float64x2_t *)(v555 + i), *(float64x2_t *)((char *)&__p.__r_.__value_.__l.__data_ + i));
              v826[1] = v827;
            }
          }
          else
          {
            for (j = 0; j != 3872; j += 8)
              *(double *)(v555 + j) = *(double *)(v555 + j) - *(double *)((char *)&__p.__r_.__value_.__l.__data_ + j);
          }
        }
        else
        {
          sub_20E8BE654(1, 0, 22, 22, 1, (const double *)&v557->i64[(v556 - 1)], v556, (double *)&v557->i64[(v556 - 1)], -1.0, 1.0, v556, (double *)v555, 22);
        }
      }
      break;
    case 21:
      v298 = *(_QWORD *)v4;
      v299 = *(unsigned int *)(v8 + 16);
      v300 = *(int64x2_t **)v8;
      LOBYTE(v301) = *(_DWORD *)(v8 + 16);
      if (v299 >= 2)
      {
        v845 = v8;
        v302 = 0;
        v1357 = *(float64x2_t *)(v298 + 16);
        v1352 = *(float64x2_t *)v298;
        v855 = 4 * v299;
        v854 = 8 * v299;
        v1347 = *(float64x2_t *)(v298 + 184);
        v1342 = *(float64x2_t *)(v298 + 168);
        v853 = 12 * v299;
        v1337 = *(float64x2_t *)(v298 + 352);
        v1332 = *(float64x2_t *)(v298 + 336);
        v852 = 16 * v299;
        v1327 = *(float64x2_t *)(v298 + 520);
        v1322 = *(float64x2_t *)(v298 + 504);
        v1317 = *(float64x2_t *)(v298 + 688);
        v1312 = *(float64x2_t *)(v298 + 672);
        v303 = 8 * v299;
        v1307 = *(float64x2_t *)(v298 + 856);
        v1302 = *(float64x2_t *)(v298 + 840);
        v1297 = *(float64x2_t *)(v298 + 1024);
        v1292 = *(float64x2_t *)(v298 + 1008);
        v1287 = *(float64x2_t *)(v298 + 1192);
        v1282 = *(float64x2_t *)(v298 + 1176);
        v1277 = *(float64x2_t *)(v298 + 1360);
        __lda = *(_DWORD *)(v8 + 16);
        v1272 = *(float64x2_t *)(v298 + 1344);
        v1267 = *(float64x2_t *)(v298 + 1528);
        v1446 = *(float64x2_t *)(v298 + 1512);
        v1442 = *(float64x2_t *)(v298 + 1696);
        v1262 = *(float64x2_t *)(v298 + 1680);
        v1257 = *(float64x2_t *)(v298 + 1864);
        v1252 = *(float64x2_t *)(v298 + 1848);
        v1247 = *(float64x2_t *)(v298 + 2032);
        v1242 = *(float64x2_t *)(v298 + 2016);
        v1237 = *(float64x2_t *)(v298 + 2200);
        v1232 = *(float64x2_t *)(v298 + 2184);
        v1227 = *(float64x2_t *)(v298 + 2368);
        v1222 = *(float64x2_t *)(v298 + 2352);
        v1217 = *(float64x2_t *)(v298 + 2536);
        v1212 = *(float64x2_t *)(v298 + 2520);
        v304 = v299;
        v305 = 3 * v299;
        v306 = 2 * v299;
        v307 = 40 * v299;
        v308 = 3 * v299;
        v309 = 56 * v299;
        v850 = 6 * v299;
        v851 = 88 * v299;
        v848 = 7 * v299;
        v849 = 104 * v299;
        v846 = v299 << 7;
        v847 = 120 * v299;
        v310 = v300;
        v1437 = *(float64x2_t *)(v298 + 2704);
        v1432 = *(float64x2_t *)(v298 + 2688);
        v1427 = *(float64x2_t *)(v298 + 2872);
        v1422 = *(float64x2_t *)(v298 + 2856);
        v1417 = *(float64x2_t *)(v298 + 3040);
        v1412 = *(float64x2_t *)(v298 + 3024);
        v1407 = *(float64x2_t *)(v298 + 3208);
        v1402 = *(float64x2_t *)(v298 + 3192);
        v1397 = *(float64x2_t *)(v298 + 3376);
        v1207 = *(float64x2_t *)(v298 + 3360);
        v1202 = *(float64x2_t *)(v298 + 720);
        v1197 = *(float64x2_t *)(v298 + 704);
        v1192 = *(float64x2_t *)(v298 + 888);
        v1187 = *(float64x2_t *)(v298 + 872);
        v1182 = *(float64x2_t *)(v298 + 1056);
        v1177 = *(float64x2_t *)(v298 + 1040);
        v1172 = *(float64x2_t *)(v298 + 1224);
        v1167 = *(float64x2_t *)(v298 + 1208);
        v1162 = *(float64x2_t *)(v298 + 1392);
        v1157 = *(float64x2_t *)(v298 + 1376);
        v1152 = *(float64x2_t *)(v298 + 1560);
        v1392 = *(float64x2_t *)(v298 + 1544);
        v1147 = *(float64x2_t *)(v298 + 1728);
        v1142 = *(float64x2_t *)(v298 + 1712);
        v1137 = *(float64x2_t *)(v298 + 1896);
        v1132 = *(float64x2_t *)(v298 + 1880);
        v1127 = *(float64x2_t *)(v298 + 2064);
        v1387 = *(float64x2_t *)(v298 + 2048);
        v1122 = *(float64x2_t *)(v298 + 2232);
        v1117 = *(float64x2_t *)(v298 + 2216);
        v1112 = *(float64x2_t *)(v298 + 2400);
        v1107 = *(float64x2_t *)(v298 + 2384);
        v1102 = *(float64x2_t *)(v298 + 2568);
        v1382 = *(float64x2_t *)(v298 + 2552);
        v1097 = *(float64x2_t *)(v298 + 2736);
        v1092 = *(float64x2_t *)(v298 + 2720);
        v1087 = *(float64x2_t *)(v298 + 2904);
        v1082 = *(float64x2_t *)(v298 + 2888);
        v1077 = *(float64x2_t *)(v298 + 3072);
        v1072 = *(float64x2_t *)(v298 + 3056);
        v1067 = *(float64x2_t *)(v298 + 3240);
        v1062 = *(float64x2_t *)(v298 + 3224);
        v1057 = *(float64x2_t *)(v298 + 3408);
        v1052 = *(float64x2_t *)(v298 + 3392);
        v311 = *(float64x2_t *)(v298 + 1424);
        v312 = *(float64x2_t *)(v298 + 1408);
        v313 = *(float64x2_t *)(v298 + 1576);
        v1048 = *(float64x2_t *)(v298 + 1592);
        v1044 = *(float64x2_t *)(v298 + 1760);
        v1041 = *(float64x2_t *)(v298 + 1744);
        v1039 = *(float64x2_t *)(v298 + 1928);
        v1037 = *(float64x2_t *)(v298 + 1912);
        v1035 = *(float64x2_t *)(v298 + 2096);
        v1033 = *(float64x2_t *)(v298 + 2080);
        v1031 = *(float64x2_t *)(v298 + 2264);
        v1029 = *(float64x2_t *)(v298 + 2248);
        v1027 = *(float64x2_t *)(v298 + 2432);
        v1025 = *(float64x2_t *)(v298 + 2416);
        v1377 = *(float64x2_t *)(v298 + 2600);
        v1023 = *(float64x2_t *)(v298 + 2584);
        v1372 = *(float64x2_t *)(v298 + 2768);
        v1021 = *(float64x2_t *)(v298 + 2752);
        v314 = *(float64x2_t *)(v298 + 2936);
        v1019 = *(float64x2_t *)(v298 + 2920);
        v315 = *(float64x2_t *)(v298 + 3104);
        v1367 = *(float64x2_t *)(v298 + 3088);
        v316 = *(float64x2_t *)(v298 + 3272);
        v1362 = *(float64x2_t *)(v298 + 3256);
        v1017 = *(float64x2_t *)(v298 + 3440);
        v1015 = *(float64x2_t *)(v298 + 3424);
        v1013 = *(float64x2_t *)(v298 + 2128);
        v1011 = *(float64x2_t *)(v298 + 2112);
        v1009 = *(float64x2_t *)(v298 + 2296);
        v1007 = *(float64x2_t *)(v298 + 2280);
        v1005 = *(float64x2_t *)(v298 + 2464);
        v1003 = *(float64x2_t *)(v298 + 2448);
        v1001 = *(float64x2_t *)(v298 + 2632);
        v999 = *(float64x2_t *)(v298 + 2616);
        v997 = *(float64x2_t *)(v298 + 2800);
        v995 = *(float64x2_t *)(v298 + 2784);
        v993 = *(float64x2_t *)(v298 + 2968);
        v991 = *(float64x2_t *)(v298 + 2952);
        v989 = *(float64x2_t *)(v298 + 3136);
        v987 = *(float64x2_t *)(v298 + 3120);
        v985 = *(float64x2_t *)(v298 + 3304);
        v983 = *(float64x2_t *)(v298 + 3288);
        v981 = *(float64x2_t *)(v298 + 3472);
        v979 = *(float64x2_t *)(v298 + 3456);
        v25.f64[0] = *(float64_t *)(v298 + 2848);
        v317 = *(int8x16_t *)(v298 + 2832);
        v318 = *(int8x16_t *)(v298 + 2816);
        v965 = vextq_s8(v317, v317, 8uLL).u64[0];
        v967 = vextq_s8(v318, v318, 8uLL).u64[0];
        v26.f64[0] = *(float64_t *)(v298 + 3016);
        v977 = *(int8x16_t *)(v298 + 3000);
        v969 = vextq_s8(v977, v977, 8uLL).u64[0];
        v975 = *(int8x16_t *)(v298 + 2984);
        v319 = vextq_s8(v975, v975, 8uLL).u64[0];
        v28.f64[0] = *(float64_t *)(v298 + 3184);
        v320 = *(int8x16_t *)(v298 + 3168);
        v321 = vextq_s8(v320, v320, 8uLL).u64[0];
        v973 = *(int8x16_t *)(v298 + 3152);
        v322 = vextq_s8(v973, v973, 8uLL).u64[0];
        v27.f64[0] = *(float64_t *)(v298 + 3352);
        v330 = *(int8x16_t *)(v298 + 3320);
        v323 = *(int8x16_t *)(v298 + 3336);
        v324 = vextq_s8(v323, v323, 8uLL).u64[0];
        v971 = *(_QWORD *)(v298 + 3320);
        v325 = vextq_s8(v330, v330, 8uLL).u64[0];
        v326 = *(int8x16_t *)(v298 + 3504);
        v327 = *(int8x16_t *)(v298 + 3488);
        v328 = vextq_s8(v326, v326, 8uLL).u64[0];
        v329 = vextq_s8(v327, v327, 8uLL).u64[0];
        v330.i64[0] = *(_QWORD *)(v298 + 3520);
        v331 = 5 * v299;
        v332 = 72 * v299;
        do
        {
          v917 = v319;
          v919 = v321;
          v920 = v322;
          v923 = v328;
          v925 = v324;
          v927 = v325;
          v929 = v329;
          v931 = (float64x2_t)v330;
          v933 = v327.i64[0];
          v935 = v326.i64[0];
          v937 = v323.i64[0];
          v939 = v27;
          v941 = v320.i64[0];
          v943 = v28;
          v945 = v26;
          v947 = v318.i64[0];
          v949 = v317.i64[0];
          v951 = v25;
          v953 = v316;
          v955 = v315;
          v957 = v314;
          v959 = v313;
          v961 = v312;
          v963 = v311;
          v333 = *(float64x2_t *)((char *)v310 + v303);
          v334 = (int64x2_t *)((char *)v310 + v303 + v303);
          v335 = *(float64x2_t *)v334;
          v336 = *(float64x2_t *)((char *)v334 + v303);
          *(_QWORD *)&v337.f64[0] = vdupq_laneq_s64(*v334, 1).u64[0];
          v338 = (float64x2_t *)&v334->i8[v303 + v303];
          v339 = *v338;
          v340 = (float64x2_t)vzip1q_s64((int64x2_t)v335, (int64x2_t)v336);
          v341 = (float64x2_t *)((char *)v338 + v303);
          v342 = *v341;
          v343 = (float64x2_t *)((char *)v341 + v303);
          v344 = *v343;
          v345 = (float64x2_t *)((char *)v343 + v303);
          v346 = *v345;
          v347 = (float64x2_t *)((char *)v345 + v303);
          v348 = (float64x2_t)vzip1q_s64(*v310, (int64x2_t)v333);
          v337.f64[1] = v336.f64[1];
          v349 = (float64x2_t)vzip2q_s64(*v310, (int64x2_t)v333);
          v350 = vmlaq_laneq_f64(vmulq_n_f64(v348, v333.f64[0]), v349, v333, 1);
          v351 = vmlaq_laneq_f64(vmulq_n_f64(v340, v333.f64[0]), v337, v333, 1);
          v352 = vmlaq_laneq_f64(vmulq_n_f64(v348, v335.f64[0]), v349, v335, 1);
          v353 = vmlaq_laneq_f64(vmulq_n_f64(v340, v335.f64[0]), v337, v335, 1);
          v354 = vmlaq_laneq_f64(vmulq_n_f64(v348, v336.f64[0]), v349, v336, 1);
          v355 = vmlaq_laneq_f64(vmulq_n_f64(v348, v339.f64[0]), v349, v339, 1);
          v356 = vmlaq_laneq_f64(vmulq_n_f64(v340, v336.f64[0]), v337, v336, 1);
          v357 = vmlaq_laneq_f64(vmulq_n_f64(v340, v339.f64[0]), v337, v339, 1);
          v358 = vmlaq_laneq_f64(vmulq_n_f64(v348, v342.f64[0]), v349, v342, 1);
          v359 = vmlaq_laneq_f64(vmulq_n_f64(v340, v342.f64[0]), v337, v342, 1);
          v360 = vmlaq_laneq_f64(vmulq_n_f64(v348, v346.f64[0]), v349, v346, 1);
          v361 = vmlaq_laneq_f64(vmulq_n_f64(v340, v344.f64[0]), v337, v344, 1);
          v362 = vmlaq_laneq_f64(vmulq_n_f64(v340, v346.f64[0]), v337, v346, 1);
          v363 = vmlaq_laneq_f64(vmulq_n_f64(v348, v347->f64[0]), v349, *v347, 1);
          v364 = vmlaq_laneq_f64(vmulq_n_f64(v340, v347->f64[0]), v337, *v347, 1);
          v365 = (float64x2_t *)((char *)v347 + v303);
          v366 = vmlaq_laneq_f64(vmulq_n_f64(v348, v365->f64[0]), v349, *v365, 1);
          v367 = vmlaq_laneq_f64(vmulq_n_f64(v340, v365->f64[0]), v337, *v365, 1);
          v368 = (float64x2_t *)((char *)v365 + v303);
          v369 = vmlaq_laneq_f64(vmulq_n_f64(v348, v368->f64[0]), v349, *v368, 1);
          v370 = vmlaq_laneq_f64(vmulq_n_f64(v340, v368->f64[0]), v337, *v368, 1);
          v371 = (float64x2_t *)((char *)v368 + v303);
          v914 = vmlaq_laneq_f64(vmulq_n_f64(v348, v371->f64[0]), v349, *v371, 1);
          v907 = vmlaq_laneq_f64(vmulq_n_f64(v340, v371->f64[0]), v337, *v371, 1);
          v372 = (float64x2_t *)((char *)v371 + v303);
          v911 = vmlaq_laneq_f64(vmulq_n_f64(v348, v372->f64[0]), v349, *v372, 1);
          v903 = vmlaq_laneq_f64(vmulq_n_f64(v340, v372->f64[0]), v337, *v372, 1);
          v373 = (float64x2_t *)((char *)v372 + v303);
          v899 = vmlaq_laneq_f64(vmulq_n_f64(v348, v373->f64[0]), v349, *v373, 1);
          v895 = vmlaq_laneq_f64(vmulq_n_f64(v340, v373->f64[0]), v337, *v373, 1);
          v374 = (float64x2_t *)((char *)v373 + v303);
          v891 = vmlaq_laneq_f64(vmulq_n_f64(v348, v374->f64[0]), v349, *v374, 1);
          v887 = vmlaq_laneq_f64(vmulq_n_f64(v340, v374->f64[0]), v337, *v374, 1);
          v375 = (float64x2_t *)((char *)v374 + v303);
          v883 = vmlaq_laneq_f64(vmulq_n_f64(v348, v375->f64[0]), v349, *v375, 1);
          v879 = vmlaq_laneq_f64(vmulq_n_f64(v340, v375->f64[0]), v337, *v375, 1);
          v376 = (float64x2_t *)((char *)v375 + v303);
          v875 = vmlaq_laneq_f64(vmulq_n_f64(v348, v376->f64[0]), v349, *v376, 1);
          v872 = vmlaq_laneq_f64(vmulq_n_f64(v340, v376->f64[0]), v337, *v376, 1);
          v377 = (float64x2_t *)((char *)v376 + v303);
          v869 = vmlaq_laneq_f64(vmulq_n_f64(v348, v377->f64[0]), v349, *v377, 1);
          v867 = vmlaq_laneq_f64(vmulq_n_f64(v340, v377->f64[0]), v337, *v377, 1);
          v378 = (float64x2_t *)((char *)v377 + v303);
          v865 = vmlaq_laneq_f64(vmulq_n_f64(v348, v378->f64[0]), v349, *v378, 1);
          v863 = vmlaq_laneq_f64(vmulq_n_f64(v340, v378->f64[0]), v337, *v378, 1);
          v379 = (float64x2_t *)((char *)v378 + v303);
          v861 = vmlaq_laneq_f64(vmulq_n_f64(v348, v379->f64[0]), v349, *v379, 1);
          v859 = vmlaq_laneq_f64(vmulq_n_f64(v340, v379->f64[0]), v337, *v379, 1);
          v380 = *(float64x2_t *)((char *)v379 + v303);
          v858 = vmlaq_laneq_f64(vmulq_n_f64(v348, v380.f64[0]), v349, v380, 1);
          v857 = vmlaq_laneq_f64(vmulq_n_f64(v340, v380.f64[0]), v337, v380, 1);
          v381 = vsubq_f64(v1357, vmlaq_laneq_f64(vmulq_n_f64(v340, *(double *)v310->i64), v337, *(float64x2_t *)v310, 1));
          v382 = vsubq_f64(v1352, vmlaq_laneq_f64(vmulq_n_f64(v348, *(double *)v310->i64), v349, *(float64x2_t *)v310, 1));
          v383 = vsubq_f64(v1332, v352);
          v384 = vsubq_f64(v1337, v353);
          v385 = vsubq_f64(v1327, v356);
          v386 = vsubq_f64(v1322, v354);
          v387 = vsubq_f64(v1317, v357);
          v388 = vsubq_f64(v1312, v355);
          v389 = vsubq_f64(v1302, v358);
          v390 = vsubq_f64(v1297, v361);
          v391 = vsubq_f64(v1292, vmlaq_laneq_f64(vmulq_n_f64(v348, v344.f64[0]), v349, v344, 1));
          v392 = vsubq_f64(v1282, v360);
          v393 = vsubq_f64(v1272, v363);
          v1446 = vsubq_f64(v1446, v366);
          v1442 = vsubq_f64(v1442, v370);
          v394 = vsubq_f64(v1252, v914);
          v395 = vsubq_f64(v1232, v899);
          v396 = vsubq_f64(v1212, v883);
          v1437 = vsubq_f64(v1437, v872);
          v1432 = vsubq_f64(v1432, v875);
          v1427 = vsubq_f64(v1427, v867);
          v1422 = vsubq_f64(v1422, v869);
          v1417 = vsubq_f64(v1417, v863);
          v1412 = vsubq_f64(v1412, v865);
          v1407 = vsubq_f64(v1407, v859);
          v1402 = vsubq_f64(v1402, v861);
          v1397 = vsubq_f64(v1397, v857);
          v1357 = v381;
          *(float64x2_t *)v298 = v382;
          *(float64x2_t *)(v298 + 16) = v381;
          v1352 = v382;
          v1347 = vsubq_f64(v1347, v351);
          *(float64x2_t *)(v298 + 184) = v1347;
          v1342 = vsubq_f64(v1342, v350);
          *(float64x2_t *)(v298 + 168) = v1342;
          v1337 = v384;
          *(float64x2_t *)(v298 + 336) = v383;
          *(float64x2_t *)(v298 + 352) = v384;
          v1332 = v383;
          v1327 = v385;
          *(float64x2_t *)(v298 + 520) = v385;
          v1322 = v386;
          *(float64x2_t *)(v298 + 504) = v386;
          v1317 = v387;
          *(float64x2_t *)(v298 + 672) = v388;
          *(float64x2_t *)(v298 + 688) = v387;
          v1312 = v388;
          v1307 = vsubq_f64(v1307, v359);
          *(float64x2_t *)(v298 + 840) = v389;
          *(float64x2_t *)(v298 + 856) = v1307;
          v1302 = v389;
          v1297 = v390;
          *(float64x2_t *)(v298 + 1008) = v391;
          *(float64x2_t *)(v298 + 1024) = v390;
          v1292 = v391;
          v1287 = vsubq_f64(v1287, v362);
          *(float64x2_t *)(v298 + 1176) = v392;
          *(float64x2_t *)(v298 + 1192) = v1287;
          v1282 = v392;
          v1272 = v393;
          *(float64x2_t *)(v298 + 1344) = v393;
          v1277 = vsubq_f64(v1277, v364);
          *(float64x2_t *)(v298 + 1360) = v1277;
          v1267 = vsubq_f64(v1267, v367);
          *(float64x2_t *)(v298 + 1512) = v1446;
          *(float64x2_t *)(v298 + 1528) = v1267;
          *(float64x2_t *)(v298 + 1696) = v1442;
          v1262 = vsubq_f64(v1262, v369);
          *(float64x2_t *)(v298 + 1680) = v1262;
          v1257 = vsubq_f64(v1257, v907);
          *(float64x2_t *)(v298 + 1848) = v394;
          *(float64x2_t *)(v298 + 1864) = v1257;
          v1252 = v394;
          v1247 = vsubq_f64(v1247, v903);
          *(float64x2_t *)(v298 + 2032) = v1247;
          v1242 = vsubq_f64(v1242, v911);
          *(float64x2_t *)(v298 + 2016) = v1242;
          v1237 = vsubq_f64(v1237, v895);
          *(float64x2_t *)(v298 + 2184) = v395;
          *(float64x2_t *)(v298 + 2200) = v1237;
          v1232 = v395;
          v1227 = vsubq_f64(v1227, v887);
          *(float64x2_t *)(v298 + 2368) = v1227;
          v1222 = vsubq_f64(v1222, v891);
          *(float64x2_t *)(v298 + 2352) = v1222;
          v1217 = vsubq_f64(v1217, v879);
          *(float64x2_t *)(v298 + 2520) = v396;
          *(float64x2_t *)(v298 + 2536) = v1217;
          v1212 = v396;
          *(float64x2_t *)(v298 + 2704) = v1437;
          *(float64x2_t *)(v298 + 2688) = v1432;
          *(float64x2_t *)(v298 + 2856) = v1422;
          *(float64x2_t *)(v298 + 2872) = v1427;
          *(float64x2_t *)(v298 + 3040) = v1417;
          *(float64x2_t *)(v298 + 3024) = v1412;
          *(float64x2_t *)(v298 + 3192) = v1402;
          *(float64x2_t *)(v298 + 3208) = v1407;
          v1207 = vsubq_f64(v1207, v858);
          *(float64x2_t *)(v298 + 3360) = v1207;
          *(float64x2_t *)(v298 + 3376) = v1397;
          v397 = (int64x2_t *)((char *)v300 + 8 * (v855 + v302));
          v398 = (float64x2_t)v397[v304];
          v399 = *(float64x2_t *)((char *)v397 + v303);
          v400 = *(float64x2_t *)((char *)v397 + v305 * 8);
          *(_QWORD *)&v382.f64[0] = vdupq_laneq_s64((int64x2_t)v398, 1).u64[0];
          v401 = (float64x2_t)v397[v306];
          v402 = *(float64x2_t *)((char *)v397 + v307);
          v403 = (float64x2_t)v397[v308];
          v404 = (float64x2_t)vzip1q_s64((int64x2_t)v398, (int64x2_t)v400);
          v405 = *(float64x2_t *)((char *)v397 + v309);
          *(_QWORD *)&v382.f64[1] = v397->i64[v305 + 1];
          v406 = (float64x2_t)v397[(unint64_t)v303 / 2];
          v407 = (float64x2_t)vzip1q_s64(*v397, (int64x2_t)v399);
          v408 = (float64x2_t)vzip2q_s64(*v397, (int64x2_t)v399);
          v409 = vmlaq_laneq_f64(vmulq_n_f64(v407, v400.f64[0]), v408, v400, 1);
          v410 = vmlaq_laneq_f64(vmulq_n_f64(v404, v400.f64[0]), v382, v400, 1);
          v411 = vmlaq_laneq_f64(vmulq_n_f64(v407, v401.f64[0]), v408, v401, 1);
          v412 = vmlaq_laneq_f64(vmulq_n_f64(v404, v401.f64[0]), v382, v401, 1);
          v413 = vmlaq_laneq_f64(vmulq_n_f64(v407, v402.f64[0]), v408, v402, 1);
          v414 = vmlaq_laneq_f64(vmulq_n_f64(v407, v403.f64[0]), v408, v403, 1);
          v415 = vmlaq_laneq_f64(vmulq_n_f64(v404, v402.f64[0]), v382, v402, 1);
          v416 = vmlaq_laneq_f64(vmulq_n_f64(v404, v403.f64[0]), v382, v403, 1);
          v417 = vmlaq_laneq_f64(vmulq_n_f64(v407, v405.f64[0]), v408, v405, 1);
          v418 = vmlaq_laneq_f64(vmulq_n_f64(v404, v405.f64[0]), v382, v405, 1);
          v419 = vmlaq_laneq_f64(vmulq_n_f64(v407, v406.f64[0]), v408, v406, 1);
          v420 = vmlaq_laneq_f64(vmulq_n_f64(v404, v406.f64[0]), v382, v406, 1);
          v421 = *(float64x2_t *)((char *)v397 + v332);
          v422 = vmlaq_laneq_f64(vmulq_n_f64(v407, v421.f64[0]), v408, v421, 1);
          v915 = vmlaq_laneq_f64(vmulq_n_f64(v404, v421.f64[0]), v382, v421, 1);
          v423 = (float64x2_t)v397[v331];
          v912 = vmlaq_laneq_f64(vmulq_n_f64(v407, v423.f64[0]), v408, v423, 1);
          v908 = vmlaq_laneq_f64(vmulq_n_f64(v404, v423.f64[0]), v382, v423, 1);
          v424 = *(float64x2_t *)((char *)v397 + v851);
          v904 = vmlaq_laneq_f64(vmulq_n_f64(v407, v424.f64[0]), v408, v424, 1);
          v900 = vmlaq_laneq_f64(vmulq_n_f64(v404, v424.f64[0]), v382, v424, 1);
          v425 = (float64x2_t)v397[v850];
          v896 = vmlaq_laneq_f64(vmulq_n_f64(v407, v425.f64[0]), v408, v425, 1);
          v892 = vmlaq_laneq_f64(vmulq_n_f64(v404, v425.f64[0]), v382, v425, 1);
          v426 = *(float64x2_t *)((char *)v397 + v849);
          v888 = vmlaq_laneq_f64(vmulq_n_f64(v407, v426.f64[0]), v408, v426, 1);
          v884 = vmlaq_laneq_f64(vmulq_n_f64(v404, v426.f64[0]), v382, v426, 1);
          v427 = (float64x2_t)v397[v848];
          v880 = vmlaq_laneq_f64(vmulq_n_f64(v407, v427.f64[0]), v408, v427, 1);
          v876 = vmlaq_laneq_f64(vmulq_n_f64(v404, v427.f64[0]), v382, v427, 1);
          v428 = *(float64x2_t *)((char *)v397 + v847);
          v873 = vmlaq_laneq_f64(vmulq_n_f64(v407, v428.f64[0]), v408, v428, 1);
          v870 = vmlaq_laneq_f64(vmulq_n_f64(v404, v428.f64[0]), v382, v428, 1);
          v429 = *(float64x2_t *)((char *)v397 + v846);
          v430 = vsubq_f64(v1197, vmlaq_laneq_f64(vmulq_n_f64(v407, *(double *)v397->i64), v408, *(float64x2_t *)v397, 1));
          v431 = vsubq_f64(v1187, vmlaq_laneq_f64(vmulq_n_f64(v407, v399.f64[0]), v408, v399, 1));
          v432 = vsubq_f64(v1177, vmlaq_laneq_f64(vmulq_n_f64(v407, v398.f64[0]), v408, v398, 1));
          v433 = vsubq_f64(v1167, v409);
          v1392 = vsubq_f64(v1392, v413);
          v434 = vsubq_f64(v1142, v414);
          v435 = vsubq_f64(v1132, v417);
          v436 = vsubq_f64(v1137, v418);
          v1387 = vsubq_f64(v1387, v419);
          v437 = vsubq_f64(v1117, v422);
          v1382 = vsubq_f64(v1382, v904);
          v438 = vsubq_f64(v1082, v888);
          v439 = vsubq_f64(v1062, v873);
          v1202 = vsubq_f64(v1202, vmlaq_laneq_f64(vmulq_n_f64(v404, *(double *)v397->i64), v382, *(float64x2_t *)v397, 1));
          *(float64x2_t *)(v298 + 704) = v430;
          *(float64x2_t *)(v298 + 720) = v1202;
          v1197 = v430;
          v1192 = vsubq_f64(v1192, vmlaq_laneq_f64(vmulq_n_f64(v404, v399.f64[0]), v382, v399, 1));
          *(float64x2_t *)(v298 + 872) = v431;
          *(float64x2_t *)(v298 + 888) = v1192;
          v1187 = v431;
          v1182 = vsubq_f64(v1182, vmlaq_laneq_f64(vmulq_n_f64(v404, v398.f64[0]), v382, v398, 1));
          *(float64x2_t *)(v298 + 1040) = v432;
          *(float64x2_t *)(v298 + 1056) = v1182;
          v1177 = v432;
          v1172 = vsubq_f64(v1172, v410);
          *(float64x2_t *)(v298 + 1208) = v433;
          *(float64x2_t *)(v298 + 1224) = v1172;
          v1167 = v433;
          v1157 = vsubq_f64(v1157, v411);
          *(float64x2_t *)(v298 + 1376) = v1157;
          v1162 = vsubq_f64(v1162, v412);
          *(float64x2_t *)(v298 + 1392) = v1162;
          v1152 = vsubq_f64(v1152, v415);
          *(float64x2_t *)(v298 + 1544) = v1392;
          *(float64x2_t *)(v298 + 1560) = v1152;
          v1147 = vsubq_f64(v1147, v416);
          *(float64x2_t *)(v298 + 1728) = v1147;
          v1142 = v434;
          *(float64x2_t *)(v298 + 1712) = v434;
          v1137 = v436;
          *(float64x2_t *)(v298 + 1880) = v435;
          *(float64x2_t *)(v298 + 1896) = v436;
          v1132 = v435;
          v1127 = vsubq_f64(v1127, v420);
          *(float64x2_t *)(v298 + 2064) = v1127;
          *(float64x2_t *)(v298 + 2048) = v1387;
          v1122 = vsubq_f64(v1122, v915);
          *(float64x2_t *)(v298 + 2216) = v437;
          *(float64x2_t *)(v298 + 2232) = v1122;
          v1117 = v437;
          v1107 = vsubq_f64(v1107, v912);
          *(float64x2_t *)(v298 + 2384) = v1107;
          v1112 = vsubq_f64(v1112, v908);
          *(float64x2_t *)(v298 + 2400) = v1112;
          v1102 = vsubq_f64(v1102, v900);
          *(float64x2_t *)(v298 + 2552) = v1382;
          *(float64x2_t *)(v298 + 2568) = v1102;
          v1097 = vsubq_f64(v1097, v892);
          *(float64x2_t *)(v298 + 2736) = v1097;
          v1092 = vsubq_f64(v1092, v896);
          *(float64x2_t *)(v298 + 2720) = v1092;
          v1087 = vsubq_f64(v1087, v884);
          *(float64x2_t *)(v298 + 2888) = v438;
          *(float64x2_t *)(v298 + 2904) = v1087;
          v1082 = v438;
          v1077 = vsubq_f64(v1077, v876);
          *(float64x2_t *)(v298 + 3072) = v1077;
          v1072 = vsubq_f64(v1072, v880);
          *(float64x2_t *)(v298 + 3056) = v1072;
          v1067 = vsubq_f64(v1067, v870);
          *(float64x2_t *)(v298 + 3224) = v439;
          *(float64x2_t *)(v298 + 3240) = v1067;
          v1062 = v439;
          v1052 = vsubq_f64(v1052, vmlaq_laneq_f64(vmulq_n_f64(v407, v429.f64[0]), v408, v429, 1));
          *(float64x2_t *)(v298 + 3392) = v1052;
          v1057 = vsubq_f64(v1057, vmlaq_laneq_f64(vmulq_n_f64(v404, v429.f64[0]), v382, v429, 1));
          *(float64x2_t *)(v298 + 3408) = v1057;
          v440 = (int64x2_t *)((char *)v300 + 8 * (v854 + v302));
          v441 = (float64x2_t)v440[v304];
          v442 = *(float64x2_t *)((char *)v440 + v303);
          v443 = *(float64x2_t *)((char *)v440 + v305 * 8);
          *(_QWORD *)&v399.f64[0] = vdupq_laneq_s64((int64x2_t)v441, 1).u64[0];
          v444 = (float64x2_t)v440[v306];
          v445 = *(float64x2_t *)((char *)v440 + v307);
          v446 = (float64x2_t)v440[v308];
          v447 = (float64x2_t)vzip1q_s64((int64x2_t)v441, (int64x2_t)v443);
          v448 = *(float64x2_t *)((char *)v440 + v309);
          v449 = (float64x2_t)v440[(unint64_t)v303 / 2];
          *(_QWORD *)&v399.f64[1] = v440->i64[v305 + 1];
          v450 = (float64x2_t)vzip1q_s64(*v440, (int64x2_t)v442);
          v451 = (float64x2_t)vzip2q_s64(*v440, (int64x2_t)v442);
          v452 = vmlaq_laneq_f64(vmulq_n_f64(v450, *(double *)v440->i64), v451, *(float64x2_t *)v440, 1);
          v453 = vmlaq_laneq_f64(vmulq_n_f64(v447, *(double *)v440->i64), v399, *(float64x2_t *)v440, 1);
          v454 = vmlaq_laneq_f64(vmulq_n_f64(v450, v442.f64[0]), v451, v442, 1);
          v455 = vmlaq_laneq_f64(vmulq_n_f64(v450, v441.f64[0]), v451, v441, 1);
          v456 = vmlaq_laneq_f64(vmulq_n_f64(v447, v442.f64[0]), v399, v442, 1);
          v457 = vmlaq_laneq_f64(vmulq_n_f64(v447, v441.f64[0]), v399, v441, 1);
          v458 = vmlaq_laneq_f64(vmulq_n_f64(v450, v443.f64[0]), v451, v443, 1);
          v459 = vmlaq_laneq_f64(vmulq_n_f64(v447, v443.f64[0]), v399, v443, 1);
          v460 = vmlaq_laneq_f64(vmulq_n_f64(v450, v444.f64[0]), v451, v444, 1);
          v461 = vmlaq_laneq_f64(vmulq_n_f64(v450, v445.f64[0]), v451, v445, 1);
          v462 = vmlaq_laneq_f64(vmulq_n_f64(v447, v444.f64[0]), v399, v444, 1);
          v463 = vmlaq_laneq_f64(vmulq_n_f64(v447, v445.f64[0]), v399, v445, 1);
          v464 = vmlaq_laneq_f64(vmulq_n_f64(v450, v446.f64[0]), v451, v446, 1);
          v465 = vmlaq_laneq_f64(vmulq_n_f64(v447, v446.f64[0]), v399, v446, 1);
          v466 = vmlaq_laneq_f64(vmulq_n_f64(v450, v448.f64[0]), v451, v448, 1);
          v467 = vmlaq_laneq_f64(vmulq_n_f64(v447, v448.f64[0]), v399, v448, 1);
          v468 = vmlaq_laneq_f64(vmulq_n_f64(v450, v449.f64[0]), v451, v449, 1);
          v469 = vmlaq_laneq_f64(vmulq_n_f64(v447, v449.f64[0]), v399, v449, 1);
          v470 = *(float64x2_t *)((char *)v440 + v332);
          v471 = vmlaq_laneq_f64(vmulq_n_f64(v450, v470.f64[0]), v451, v470, 1);
          v472 = vmlaq_laneq_f64(vmulq_n_f64(v447, v470.f64[0]), v399, v470, 1);
          v473 = (float64x2_t)v440[v331];
          v474 = vmlaq_laneq_f64(vmulq_n_f64(v450, v473.f64[0]), v451, v473, 1);
          v475 = vmlaq_laneq_f64(vmulq_n_f64(v447, v473.f64[0]), v399, v473, 1);
          v476 = *(float64x2_t *)((char *)v440 + v851);
          v477 = vmlaq_laneq_f64(vmulq_n_f64(v450, v476.f64[0]), v451, v476, 1);
          v478 = (float64x2_t)v440[v850];
          v479 = vmlaq_laneq_f64(vmulq_n_f64(v450, v478.f64[0]), v451, v478, 1);
          v480 = vmlaq_laneq_f64(vmulq_n_f64(v447, v476.f64[0]), v399, v476, 1);
          v481 = vmlaq_laneq_f64(vmulq_n_f64(v447, v478.f64[0]), v399, v478, 1);
          v312 = vsubq_f64(v961, v452);
          v311 = vsubq_f64(v963, v453);
          v313 = vsubq_f64(v959, v454);
          v482 = vsubq_f64(v1041, v455);
          v483 = vsubq_f64(v1044, v457);
          v484 = vsubq_f64(v1037, v458);
          v485 = vsubq_f64(v1029, v461);
          v486 = vsubq_f64(v1031, v463);
          v487 = vsubq_f64(v1025, v464);
          v488 = vsubq_f64(v1023, v466);
          v1377 = vsubq_f64(v1377, v467);
          v1372 = vsubq_f64(v1372, v469);
          v489 = vsubq_f64(v1019, v471);
          v314 = vsubq_f64(v957, v472);
          v1367 = vsubq_f64(v1367, v474);
          v315 = vsubq_f64(v955, v475);
          v1362 = vsubq_f64(v1362, v477);
          v316 = vsubq_f64(v953, v480);
          *(float64x2_t *)(v298 + 1408) = v312;
          *(float64x2_t *)(v298 + 1424) = v311;
          v1048 = vsubq_f64(v1048, v456);
          *(float64x2_t *)(v298 + 1576) = v313;
          *(float64x2_t *)(v298 + 1592) = v1048;
          v1044 = v483;
          *(float64x2_t *)(v298 + 1760) = v483;
          v1041 = v482;
          *(float64x2_t *)(v298 + 1744) = v482;
          v1039 = vsubq_f64(v1039, v459);
          *(float64x2_t *)(v298 + 1912) = v484;
          *(float64x2_t *)(v298 + 1928) = v1039;
          v1037 = v484;
          v1035 = vsubq_f64(v1035, v462);
          *(float64x2_t *)(v298 + 2096) = v1035;
          v1033 = vsubq_f64(v1033, v460);
          *(float64x2_t *)(v298 + 2080) = v1033;
          v1031 = v486;
          *(float64x2_t *)(v298 + 2248) = v485;
          *(float64x2_t *)(v298 + 2264) = v486;
          v1029 = v485;
          v1025 = v487;
          *(float64x2_t *)(v298 + 2416) = v487;
          v1027 = vsubq_f64(v1027, v465);
          *(float64x2_t *)(v298 + 2432) = v1027;
          *(float64x2_t *)(v298 + 2584) = v488;
          *(float64x2_t *)(v298 + 2600) = v1377;
          v1023 = v488;
          *(float64x2_t *)(v298 + 2768) = v1372;
          v1021 = vsubq_f64(v1021, v468);
          *(float64x2_t *)(v298 + 2752) = v1021;
          *(float64x2_t *)(v298 + 2920) = v489;
          *(float64x2_t *)(v298 + 2936) = v314;
          v1019 = v489;
          *(float64x2_t *)(v298 + 3104) = v315;
          *(float64x2_t *)(v298 + 3088) = v1367;
          *(float64x2_t *)(v298 + 3256) = v1362;
          *(float64x2_t *)(v298 + 3272) = v316;
          v1015 = vsubq_f64(v1015, v479);
          *(float64x2_t *)(v298 + 3424) = v1015;
          v1017 = vsubq_f64(v1017, v481);
          *(float64x2_t *)(v298 + 3440) = v1017;
          v490 = (int64x2_t *)((char *)v300 + 8 * (v853 + v302));
          v491 = (float64x2_t)v490[(unint64_t)v303 / 2];
          v492 = *(float64x2_t *)((char *)v490 + v303);
          v493 = (float64x2_t)v490[v304];
          *(_QWORD *)&v479.f64[0] = vdupq_laneq_s64((int64x2_t)v493, 1).u64[0];
          v494 = *(float64x2_t *)((char *)v490 + v305 * 8);
          v495 = (float64x2_t)v490[v306];
          v496 = *(float64x2_t *)((char *)v490 + v307);
          v497 = (float64x2_t)vzip1q_s64((int64x2_t)v493, (int64x2_t)v494);
          v498 = (float64x2_t)v490[v308];
          v499 = *(float64x2_t *)((char *)v490 + v309);
          *(_QWORD *)&v479.f64[1] = v490->i64[v305 + 1];
          v500 = (float64x2_t)vzip1q_s64(*v490, (int64x2_t)v492);
          v501 = (float64x2_t)vzip2q_s64(*v490, (int64x2_t)v492);
          v502 = vmlaq_laneq_f64(vmulq_n_f64(v500, *(double *)v490->i64), v501, *(float64x2_t *)v490, 1);
          v503 = vmlaq_laneq_f64(vmulq_n_f64(v497, *(double *)v490->i64), v479, *(float64x2_t *)v490, 1);
          v504 = vmlaq_laneq_f64(vmulq_n_f64(v500, v492.f64[0]), v501, v492, 1);
          v505 = vmlaq_laneq_f64(vmulq_n_f64(v500, v493.f64[0]), v501, v493, 1);
          v506 = vmlaq_laneq_f64(vmulq_n_f64(v497, v492.f64[0]), v479, v492, 1);
          v507 = vmlaq_laneq_f64(vmulq_n_f64(v497, v493.f64[0]), v479, v493, 1);
          v508 = vmlaq_laneq_f64(vmulq_n_f64(v500, v494.f64[0]), v501, v494, 1);
          v509 = vmlaq_laneq_f64(vmulq_n_f64(v497, v494.f64[0]), v479, v494, 1);
          _Q4 = vmlaq_laneq_f64(vmulq_n_f64(v500, v495.f64[0]), v501, v495, 1);
          v511 = vmlaq_laneq_f64(vmulq_n_f64(v500, v496.f64[0]), v501, v496, 1);
          v512 = vmlaq_laneq_f64(vmulq_n_f64(v497, v495.f64[0]), v479, v495, 1);
          v513 = vmlaq_laneq_f64(vmulq_n_f64(v497, v496.f64[0]), v479, v496, 1);
          v514 = vmlaq_laneq_f64(vmulq_n_f64(v500, v498.f64[0]), v501, v498, 1);
          v515 = vmlaq_laneq_f64(vmulq_n_f64(v497, v498.f64[0]), v479, v498, 1);
          v516 = vmlaq_laneq_f64(vmulq_n_f64(v500, v499.f64[0]), v501, v499, 1);
          _Q19 = vmlaq_laneq_f64(vmulq_n_f64(v500, v491.f64[0]), v501, v491, 1);
          _Q21 = vmlaq_laneq_f64(vmulq_n_f64(v497, v499.f64[0]), v479, v499, 1);
          _Q16 = vmlaq_laneq_f64(vmulq_n_f64(v497, v491.f64[0]), v479, v491, 1);
          v520 = vsubq_f64(v1011, v502);
          v521 = vsubq_f64(v1007, v504);
          v522 = vsubq_f64(v1009, v506);
          v523 = vsubq_f64(v1005, v507);
          v524 = vsubq_f64(v999, v508);
          v525 = vsubq_f64(v1001, v509);
          v526 = vsubq_f64(v991, v511);
          v527 = vsubq_f64(v983, v516);
          v1013 = vsubq_f64(v1013, v503);
          *(float64x2_t *)(v298 + 2128) = v1013;
          v1011 = v520;
          *(float64x2_t *)(v298 + 2112) = v520;
          v1009 = v522;
          *(float64x2_t *)(v298 + 2280) = v521;
          *(float64x2_t *)(v298 + 2296) = v522;
          v1007 = v521;
          v1005 = v523;
          *(float64x2_t *)(v298 + 2464) = v523;
          v1003 = vsubq_f64(v1003, v505);
          *(float64x2_t *)(v298 + 2448) = v1003;
          v1001 = v525;
          *(float64x2_t *)(v298 + 2616) = v524;
          *(float64x2_t *)(v298 + 2632) = v525;
          v999 = v524;
          v995 = vsubq_f64(v995, _Q4);
          *(float64x2_t *)(v298 + 2784) = v995;
          v997 = vsubq_f64(v997, v512);
          *(float64x2_t *)(v298 + 2800) = v997;
          v993 = vsubq_f64(v993, v513);
          *(float64x2_t *)(v298 + 2952) = v526;
          *(float64x2_t *)(v298 + 2968) = v993;
          v991 = v526;
          v989 = vsubq_f64(v989, v515);
          *(float64x2_t *)(v298 + 3136) = v989;
          v987 = vsubq_f64(v987, v514);
          *(float64x2_t *)(v298 + 3120) = v987;
          v985 = vsubq_f64(v985, _Q21);
          *(float64x2_t *)(v298 + 3288) = v527;
          *(float64x2_t *)(v298 + 3304) = v985;
          v983 = v527;
          v981 = vsubq_f64(v981, _Q16);
          *(float64x2_t *)(v298 + 3472) = v981;
          v979 = vsubq_f64(v979, _Q19);
          *(float64x2_t *)(v298 + 3456) = v979;
          v528 = (int64x2_t *)((char *)v300 + 8 * (v852 + v302));
          _Q2 = *(float64x2_t *)((char *)v528 + v303);
          v530 = (float64x2_t)v528[v304];
          v531 = *(float64x2_t *)((char *)v528 + v305 * 8);
          _Q24 = (float64x2_t)v528[v306];
          v533 = (float64x2_t)vzip1q_s64((int64x2_t)v530, (int64x2_t)v531);
          *(_QWORD *)&v515.f64[0] = vdupq_laneq_s64((int64x2_t)v530, 1).u64[0];
          *(_QWORD *)&v515.f64[1] = v528->i64[v305 + 1];
          v534 = (float64x2_t)vzip1q_s64(*v528, (int64x2_t)_Q2);
          v535 = (float64x2_t)vzip2q_s64(*v528, (int64x2_t)_Q2);
          _Q22 = vmulq_f64(_Q24, *(float64x2_t *)v528);
          v537 = vmlaq_laneq_f64(vmulq_n_f64(v534, *(double *)v528->i64), v535, *(float64x2_t *)v528, 1);
          *(_QWORD *)&_Q16.f64[0] = v528->i64[1];
          __asm { FMLA            D22, D16, V24.D[1] }
          _Q16 = vmulq_f64(_Q24, _Q2);
          v539 = vmlaq_laneq_f64(vmulq_n_f64(v534, _Q2.f64[0]), v535, _Q2, 1);
          *(_QWORD *)&_Q19.f64[0] = v528->i64[(unint64_t)v303 / 8 + 1];
          __asm { FMLA            D16, D19, V24.D[1] }
          _Q19 = vmulq_f64(_Q24, v530);
          *(_QWORD *)&_Q21.f64[0] = v528[v304].i64[1];
          __asm { FMLA            D19, D21, V24.D[1] }
          v541 = vmlaq_laneq_f64(vmulq_n_f64(v533, *(double *)v528->i64), v515, *(float64x2_t *)v528, 1);
          _Q23 = vmulq_f64(_Q24, v531);
          _Q4.f64[0] = v515.f64[1];
          __asm { FMLA            D23, D4, V24.D[1] }
          v543 = vmlaq_laneq_f64(vmulq_n_f64(v534, v530.f64[0]), v535, v530, 1);
          v544 = vmlaq_laneq_f64(vmulq_n_f64(v533, _Q2.f64[0]), v515, _Q2, 1);
          v545 = vmlaq_laneq_f64(vmulq_n_f64(v534, v531.f64[0]), v535, v531, 1);
          *(_QWORD *)&_Q4.f64[0] = v947;
          v546 = vmlaq_laneq_f64(vmulq_n_f64(v534, _Q24.f64[0]), v535, _Q24, 1);
          v547 = vmlaq_laneq_f64(vmulq_n_f64(v533, v530.f64[0]), v515, v530, 1);
          *(_QWORD *)&v530.f64[0] = v949;
          *(_QWORD *)&v530.f64[1] = v965;
          *(_QWORD *)&_Q4.f64[1] = v967;
          v548 = vmlaq_laneq_f64(vmulq_n_f64(v533, v531.f64[0]), v515, v531, 1);
          *(_QWORD *)&v467.f64[0] = v977.i64[0];
          *(_QWORD *)&v467.f64[1] = v969;
          *(_QWORD *)&v477.f64[0] = v975.i64[0];
          *(_QWORD *)&v477.f64[1] = v917;
          v549 = vmlaq_laneq_f64(vmulq_n_f64(v533, _Q24.f64[0]), v515, _Q24, 1);
          *(_QWORD *)&v515.f64[0] = v941;
          *(_QWORD *)&v515.f64[1] = v919;
          _Q1 = vmulq_f64(_Q24, _Q24);
          *(_QWORD *)&v469.f64[0] = v973.i64[0];
          *(_QWORD *)&v469.f64[1] = v920;
          *(_QWORD *)&_Q2.f64[0] = v528[v306].i64[1];
          __asm { FMLA            D1, D2, V24.D[1] }
          *(_QWORD *)&_Q24.f64[0] = v937;
          *(_QWORD *)&_Q24.f64[1] = v925;
          *(_QWORD *)&v474.f64[0] = v971;
          *(_QWORD *)&v474.f64[1] = v927;
          v318 = (int8x16_t)vsubq_f64(_Q4, v537);
          v25 = vsubq_f64(v951, _Q22);
          *(_QWORD *)&_Q22.f64[0] = v933;
          *(_QWORD *)&v537.f64[0] = v935;
          *(_QWORD *)&v537.f64[1] = v923;
          *(_QWORD *)&_Q22.f64[1] = v929;
          v317 = (int8x16_t)vsubq_f64(v530, v541);
          v551 = (int8x16_t)vsubq_f64(v467, v544);
          v552 = (int8x16_t)vsubq_f64(v477, v539);
          *(int8x16_t *)(v298 + 2816) = v318;
          v26 = vsubq_f64(v945, _Q16);
          v320 = (int8x16_t)vsubq_f64(v515, v547);
          v965 = vextq_s8(v317, v317, 8uLL).u64[0];
          v967 = vextq_s8(v318, v318, 8uLL).u64[0];
          v553 = (int8x16_t)vsubq_f64(v469, v543);
          v319 = vextq_s8(v552, v552, 8uLL).u64[0];
          v28 = vsubq_f64(v943, _Q19);
          v323 = (int8x16_t)vsubq_f64(_Q24, v548);
          v969 = vextq_s8(v551, v551, 8uLL).u64[0];
          v321 = vextq_s8(v320, v320, 8uLL).u64[0];
          v554 = (int8x16_t)vsubq_f64(v474, v545);
          v322 = vextq_s8(v553, v553, 8uLL).u64[0];
          v27 = vsubq_f64(v939, _Q23);
          v326 = (int8x16_t)vsubq_f64(v537, v549);
          v324 = vextq_s8(v323, v323, 8uLL).u64[0];
          v325 = vextq_s8(v554, v554, 8uLL).u64[0];
          v330 = (int8x16_t)vsubq_f64(v931, _Q1);
          *(float64_t *)(v298 + 2848) = v25.f64[0];
          v975.i64[0] = v552.i64[0];
          *(int8x16_t *)(v298 + 2984) = v552;
          *(int8x16_t *)(v298 + 3000) = v551;
          *(float64_t *)(v298 + 3016) = v26.f64[0];
          v973.i64[0] = v553.i64[0];
          *(int8x16_t *)(v298 + 3152) = v553;
          *(int8x16_t *)(v298 + 3168) = v320;
          *(float64_t *)(v298 + 3184) = v28.f64[0];
          v971 = v554.i64[0];
          *(int8x16_t *)(v298 + 3320) = v554;
          *(int8x16_t *)(v298 + 3336) = v323;
          *(float64_t *)(v298 + 3352) = v27.f64[0];
          *(_QWORD *)(v298 + 3520) = v330.i64[0];
          v327 = (int8x16_t)vsubq_f64(_Q22, v546);
          *(int8x16_t *)(v298 + 3488) = v327;
          *(int8x16_t *)(v298 + 3504) = v326;
          v329 = vextq_s8(v327, v327, 8uLL).u64[0];
          LODWORD(v528) = v302 + 4;
          v302 += 2;
          ++v310;
          v328 = vextq_s8(v326, v326, 8uLL).u64[0];
          *(int8x16_t *)(v298 + 2832) = v317;
          v977.i64[0] = v551.i64[0];
        }
        while (v528 <= __lda);
        v301 = *(_DWORD *)(v845 + 16);
        LODWORD(v299) = __lda;
      }
      if ((v301 & 1) != 0)
      {
        v1569 = 1;
        v1570 = v299;
        v1571 = (char **)v300 + (v299 - 1);
        LODWORD(v1572) = v299 - 1;
        v1449 = &v1569;
        *(_QWORD *)&v1456.f64[1] = &v1449;
        *(_QWORD *)&v1457 = &v1569;
        *((_QWORD *)&v1457 + 1) = 0x3FF0000000000000;
        if (v300 == (int64x2_t *)v298)
        {
          p_p = (double *)&__p;
          sub_20FBAAA60((double *)&__p, (uint64_t)&v1456);
          if (v298 >= (unint64_t)&v1579 || (unint64_t)&__p >= v298 + 3528)
          {
            v820 = 0;
            p_p = (double *)&v1578;
            v818 = 440;
            do
            {
              v821 = (float64x2_t *)(v298 + v820);
              v822 = vsubq_f64(*(float64x2_t *)(v298 + v820 + 16), *(float64x2_t *)&__p.__r_.__value_.__r.__words[v820 / 8 + 2]);
              *v821 = vsubq_f64(*(float64x2_t *)(v298 + v820), *(float64x2_t *)((char *)&__p.__r_.__value_.__l.__data_ + v820));
              v821[1] = v822;
              v820 += 32;
            }
            while (v820 != 3520);
          }
          else
          {
            v818 = 0;
          }
          v823 = 8 * v818;
          do
          {
            v824 = *p_p++;
            *(double *)(v298 + v823) = *(double *)(v298 + v823) - v824;
            v823 += 8;
          }
          while (v823 != 3528);
        }
        else
        {
          sub_20E8BE654(1, 0, 21, 21, 1, (const double *)&v300->i64[(v299 - 1)], v299, (double *)&v300->i64[(v299 - 1)], -1.0, 1.0, v299, (double *)v298, 21);
        }
      }
      break;
    case 15:
      v35 = *(_QWORD *)v4;
      v36 = *(unsigned int *)(v8 + 16);
      v37 = *(int64x2_t **)v8;
      LOBYTE(v38) = *(_DWORD *)(v8 + 16);
      if (v36 >= 2)
      {
        v39 = 0;
        v1364 = *(float64x2_t *)(v35 + 16);
        v1359 = *(float64x2_t *)v35;
        v1354 = *(float64x2_t *)(v35 + 136);
        v1349 = *(float64x2_t *)(v35 + 120);
        v1344 = *(float64x2_t *)(v35 + 256);
        v1339 = *(float64x2_t *)(v35 + 240);
        v1334 = *(float64x2_t *)(v35 + 376);
        v1329 = *(float64x2_t *)(v35 + 360);
        v40 = 8 * v36;
        v1324 = *(float64x2_t *)(v35 + 496);
        v1319 = *(float64x2_t *)(v35 + 480);
        v41 = *(float64x2_t *)(v35 + 600);
        v42 = *(float64x2_t *)(v35 + 616);
        v43 = *(float64x2_t *)(v35 + 720);
        v1149 = *(float64x2_t *)(v35 + 736);
        v44 = *(float64x2_t *)(v35 + 856);
        v1314 = *(float64x2_t *)(v35 + 840);
        v45 = *(float64x2_t *)(v35 + 960);
        v1309 = *(float64x2_t *)(v35 + 976);
        v46 = *(float64x2_t *)(v35 + 1080);
        v1304 = *(float64x2_t *)(v35 + 1096);
        v1299 = *(float64x2_t *)(v35 + 1216);
        v1294 = *(float64x2_t *)(v35 + 1200);
        v1289 = *(float64x2_t *)(v35 + 1336);
        v1284 = *(float64x2_t *)(v35 + 1320);
        v1279 = *(float64x2_t *)(v35 + 1456);
        v1274 = *(float64x2_t *)(v35 + 1440);
        v1269 = *(float64x2_t *)(v35 + 1576);
        v1264 = *(float64x2_t *)(v35 + 1560);
        v1259 = *(float64x2_t *)(v35 + 1696);
        v1254 = *(float64x2_t *)(v35 + 1680);
        v1249 = *(float64x2_t *)(v35 + 528);
        v1244 = *(float64x2_t *)(v35 + 512);
        v47 = 3 * v36;
        v48 = *(int64x2_t **)v8;
        v49 = *(float64x2_t *)(v35 + 648);
        v1239 = *(float64x2_t *)(v35 + 632);
        v50 = *(float64x2_t *)(v35 + 768);
        v1234 = *(float64x2_t *)(v35 + 752);
        v51 = *(float64x2_t *)(v35 + 888);
        v1229 = *(float64x2_t *)(v35 + 872);
        v52 = *(float64x2_t *)(v35 + 1008);
        v1224 = *(float64x2_t *)(v35 + 992);
        v53 = *(float64x2_t *)(v35 + 1128);
        v1219 = *(float64x2_t *)(v35 + 1112);
        v54 = *(float64x2_t *)(v35 + 1248);
        v1214 = *(float64x2_t *)(v35 + 1232);
        v55 = *(float64x2_t *)(v35 + 1368);
        v1209 = *(float64x2_t *)(v35 + 1352);
        v56 = *(float64x2_t *)(v35 + 1488);
        v1204 = *(float64x2_t *)(v35 + 1472);
        v1199 = *(float64x2_t *)(v35 + 1608);
        v1194 = *(float64x2_t *)(v35 + 1592);
        v1189 = *(float64x2_t *)(v35 + 1728);
        v1184 = *(float64x2_t *)(v35 + 1712);
        v57 = *(float64x2_t *)(v35 + 1040);
        v58 = *(float64x2_t *)(v35 + 1024);
        v60 = *(float64x2_t *)(v35 + 1144);
        v59 = *(float64x2_t *)(v35 + 1160);
        v61 = *(float64x2_t *)(v35 + 1280);
        v1179 = *(float64x2_t *)(v35 + 1264);
        v62 = *(float64x2_t *)(v35 + 1400);
        v1174 = *(float64x2_t *)(v35 + 1384);
        v63 = *(float64x2_t *)(v35 + 1520);
        v1169 = *(float64x2_t *)(v35 + 1504);
        v64 = *(float64x2_t *)(v35 + 1640);
        v1164 = *(float64x2_t *)(v35 + 1624);
        v65 = *(float64x2_t *)(v35 + 1760);
        v1159 = *(float64x2_t *)(v35 + 1744);
        v25.f64[0] = *(float64_t *)(v35 + 1552);
        v66 = *(int8x16_t *)(v35 + 1536);
        v67 = (float64x2_t)vextq_s8(v66, v66, 8uLL);
        v1154 = *(_QWORD *)&v67.f64[0];
        v67.f64[0] = *(float64_t *)(v35 + 1672);
        v68 = *(int8x16_t *)(v35 + 1656);
        v69 = vextq_s8(v68, v68, 8uLL).u64[0];
        v70 = *(int8x16_t *)(v35 + 1776);
        v71 = vextq_s8(v70, v70, 8uLL).u64[0];
        v24.f64[0] = *(float64_t *)(v35 + 1792);
        do
        {
          v1079 = v69;
          v1084 = v71;
          v1369 = v24;
          v1089 = v70.i64[0];
          v1094 = v68.i64[0];
          v1374 = v67;
          v1099 = v66.i64[0];
          v1104 = v25;
          v1109 = v65;
          v1379 = v64;
          v1114 = v63;
          v1384 = v62;
          v1389 = v61;
          v1394 = v60;
          v1119 = v59;
          v1124 = v58;
          v1129 = v57;
          v1399 = v56;
          v1134 = v55;
          v1404 = v54;
          v1409 = v53;
          v1139 = v52;
          v1414 = v51;
          v1419 = v50;
          v1144 = v49;
          v1424 = v46;
          v1429 = v45;
          v1434 = v44;
          v1439 = v43;
          v1444 = v41;
          v72 = *(float64x2_t *)((char *)v48 + 8 * v36);
          v73 = (float64x2_t *)&v48->i8[v40 + v40];
          v74 = *v73;
          v75 = (float64x2_t *)((char *)v73 + v40);
          v76 = *v75;
          *(_QWORD *)&v77.f64[0] = vdupq_laneq_s64((int64x2_t)v74, 1).u64[0];
          v78 = (float64x2_t *)((char *)v75 + v40);
          v79 = *v78;
          v80 = (float64x2_t *)((char *)v78 + v40);
          v81 = (float64x2_t)vzip1q_s64((int64x2_t)v74, (int64x2_t)v76);
          v82 = *v80;
          v83 = (float64x2_t *)((char *)v80 + v40);
          v84 = *v83;
          v85 = (float64x2_t *)((char *)v83 + v40);
          v86 = *v85;
          v87 = *(float64x2_t *)((char *)v85 + 8 * v36);
          v88 = (float64x2_t *)((char *)v85 + v40 + v40);
          v89 = *v88;
          v90 = (float64x2_t *)((char *)v88 + v40);
          v91 = *v90;
          v92 = *(float64x2_t *)((char *)v90 + 8 * v36);
          v93 = (float64x2_t *)((char *)v90 + v40 + v40);
          v94 = (float64x2_t)vzip1q_s64(*v48, (int64x2_t)v72);
          v77.f64[1] = v76.f64[1];
          v95 = (float64x2_t)vzip2q_s64(*v48, (int64x2_t)v72);
          v1074 = vmlaq_laneq_f64(vmulq_n_f64(v94, *(double *)v48->i64), v95, *(float64x2_t *)v48, 1);
          v96 = vmlaq_laneq_f64(vmulq_n_f64(v94, v72.f64[0]), v95, v72, 1);
          v1069 = vmlaq_laneq_f64(vmulq_n_f64(v81, *(double *)v48->i64), v77, *(float64x2_t *)v48, 1);
          v97 = vmlaq_laneq_f64(vmulq_n_f64(v81, v72.f64[0]), v77, v72, 1);
          v1064 = vmlaq_laneq_f64(vmulq_n_f64(v94, v74.f64[0]), v95, v74, 1);
          v98 = vmlaq_laneq_f64(vmulq_n_f64(v81, v74.f64[0]), v77, v74, 1);
          v99 = vmlaq_laneq_f64(vmulq_n_f64(v94, v76.f64[0]), v95, v76, 1);
          v1059 = vmlaq_laneq_f64(vmulq_n_f64(v94, v79.f64[0]), v95, v79, 1);
          v100 = vmlaq_laneq_f64(vmulq_n_f64(v81, v76.f64[0]), v77, v76, 1);
          v101 = vmlaq_laneq_f64(vmulq_n_f64(v81, v79.f64[0]), v77, v79, 1);
          v1054 = vmlaq_laneq_f64(vmulq_n_f64(v94, v82.f64[0]), v95, v82, 1);
          v102 = v42;
          v103 = vmlaq_laneq_f64(vmulq_n_f64(v81, v82.f64[0]), v77, v82, 1);
          v104 = vmlaq_laneq_f64(vmulq_n_f64(v94, v84.f64[0]), v95, v84, 1);
          v105 = vmlaq_laneq_f64(vmulq_n_f64(v94, v86.f64[0]), v95, v86, 1);
          v106 = vmlaq_laneq_f64(vmulq_n_f64(v81, v84.f64[0]), v77, v84, 1);
          v107 = vmlaq_laneq_f64(vmulq_n_f64(v81, v86.f64[0]), v77, v86, 1);
          v108 = vmlaq_laneq_f64(vmulq_n_f64(v94, v87.f64[0]), v95, v87, 1);
          v109 = vmlaq_laneq_f64(vmulq_n_f64(v81, v87.f64[0]), v77, v87, 1);
          v110 = vmlaq_laneq_f64(vmulq_n_f64(v94, v89.f64[0]), v95, v89, 1);
          v111 = vmlaq_laneq_f64(vmulq_n_f64(v94, v91.f64[0]), v95, v91, 1);
          v112 = vmlaq_laneq_f64(vmulq_n_f64(v81, v89.f64[0]), v77, v89, 1);
          v113 = vmlaq_laneq_f64(vmulq_n_f64(v81, v91.f64[0]), v77, v91, 1);
          v114 = vmlaq_laneq_f64(vmulq_n_f64(v94, v92.f64[0]), v95, v92, 1);
          v115 = vmlaq_laneq_f64(vmulq_n_f64(v81, v92.f64[0]), v77, v92, 1);
          v116 = vmlaq_laneq_f64(vmulq_n_f64(v94, v93->f64[0]), v95, *v93, 1);
          v117 = vmlaq_laneq_f64(vmulq_n_f64(v81, v93->f64[0]), v77, *v93, 1);
          v118 = (float64x2_t *)((char *)v93 + v40);
          v119 = vmlaq_laneq_f64(vmulq_n_f64(v94, v118->f64[0]), v95, *v118, 1);
          v120 = *(float64x2_t *)((char *)v118 + 8 * v36);
          v121 = vmlaq_laneq_f64(vmulq_n_f64(v81, v118->f64[0]), v77, *v118, 1);
          v122 = vmlaq_laneq_f64(vmulq_n_f64(v94, v120.f64[0]), v95, v120, 1);
          v123 = vmlaq_laneq_f64(vmulq_n_f64(v81, v120.f64[0]), v77, v120, 1);
          v124 = vsubq_f64(v1359, v1074);
          v125 = vsubq_f64(v1354, v97);
          v126 = vsubq_f64(v1349, v96);
          v127 = vsubq_f64(v1344, v98);
          v128 = vsubq_f64(v1339, v1064);
          v129 = vsubq_f64(v1334, v100);
          v130 = vsubq_f64(v1329, v99);
          v131 = vsubq_f64(v1324, v101);
          v132 = vsubq_f64(v1319, v1059);
          v42 = vsubq_f64(v102, v103);
          v41 = vsubq_f64(v1444, v1054);
          v43 = vsubq_f64(v1439, v104);
          v44 = vsubq_f64(v1434, v107);
          v133 = vsubq_f64(v1314, v105);
          v134 = vsubq_f64(v1309, v109);
          v45 = vsubq_f64(v1429, v108);
          v135 = vsubq_f64(v1304, v112);
          v46 = vsubq_f64(v1424, v110);
          v136 = vsubq_f64(v1299, v113);
          v137 = vsubq_f64(v1294, v111);
          v138 = vsubq_f64(v1289, v115);
          v139 = vsubq_f64(v1284, v114);
          v140 = vsubq_f64(v1279, v117);
          v141 = vsubq_f64(v1274, v116);
          v142 = vsubq_f64(v1269, v121);
          v143 = vsubq_f64(v1264, v119);
          v144 = vsubq_f64(v1259, v123);
          v145 = vsubq_f64(v1254, v122);
          v1364 = vsubq_f64(v1364, v1069);
          *(float64x2_t *)v35 = v124;
          *(float64x2_t *)(v35 + 16) = v1364;
          v1359 = v124;
          v1354 = v125;
          *(float64x2_t *)(v35 + 136) = v125;
          v1349 = v126;
          *(float64x2_t *)(v35 + 120) = v126;
          v1344 = v127;
          *(float64x2_t *)(v35 + 240) = v128;
          *(float64x2_t *)(v35 + 256) = v127;
          v1339 = v128;
          v1334 = v129;
          *(float64x2_t *)(v35 + 360) = v130;
          *(float64x2_t *)(v35 + 376) = v129;
          v1329 = v130;
          v1324 = v131;
          *(float64x2_t *)(v35 + 480) = v132;
          *(float64x2_t *)(v35 + 496) = v131;
          v1319 = v132;
          *(float64x2_t *)(v35 + 600) = v41;
          *(float64x2_t *)(v35 + 616) = v42;
          v1149 = vsubq_f64(v1149, v106);
          *(float64x2_t *)(v35 + 720) = v43;
          *(float64x2_t *)(v35 + 736) = v1149;
          *(float64x2_t *)(v35 + 840) = v133;
          *(float64x2_t *)(v35 + 856) = v44;
          v1314 = v133;
          v1309 = v134;
          *(float64x2_t *)(v35 + 960) = v45;
          *(float64x2_t *)(v35 + 976) = v134;
          v1304 = v135;
          *(float64x2_t *)(v35 + 1080) = v46;
          *(float64x2_t *)(v35 + 1096) = v135;
          v1299 = v136;
          *(float64x2_t *)(v35 + 1200) = v137;
          *(float64x2_t *)(v35 + 1216) = v136;
          v1294 = v137;
          v1289 = v138;
          *(float64x2_t *)(v35 + 1320) = v139;
          *(float64x2_t *)(v35 + 1336) = v138;
          v1284 = v139;
          v1279 = v140;
          *(float64x2_t *)(v35 + 1456) = v140;
          v1274 = v141;
          *(float64x2_t *)(v35 + 1440) = v141;
          v1269 = v142;
          *(float64x2_t *)(v35 + 1560) = v143;
          *(float64x2_t *)(v35 + 1576) = v142;
          v1264 = v143;
          v1259 = v144;
          *(float64x2_t *)(v35 + 1680) = v145;
          *(float64x2_t *)(v35 + 1696) = v144;
          v1254 = v145;
          v146 = (int64x2_t *)((char *)v37 + 8 * (4 * v36 + v39));
          v147 = (float64x2_t)v146[4 * v36];
          v148 = *(float64x2_t *)((char *)v146 + 8 * v36);
          v149 = (float64x2_t)v146[v36];
          *(_QWORD *)&v124.f64[0] = vdupq_laneq_s64((int64x2_t)v149, 1).u64[0];
          v150 = *(float64x2_t *)((char *)v146 + 24 * v36);
          v151 = (float64x2_t)v146[2 * v36];
          v152 = *(float64x2_t *)((char *)v146 + 40 * v36);
          v153 = (float64x2_t)vzip1q_s64((int64x2_t)v149, (int64x2_t)v150);
          v154 = (float64x2_t)v146[3 * v36];
          v155 = *(float64x2_t *)((char *)v146 + 56 * v36);
          *(_QWORD *)&v124.f64[1] = v146->i64[v47 + 1];
          v156 = *(float64x2_t *)((char *)v146 + 72 * v36);
          v157 = (float64x2_t)v146[5 * v36];
          v158 = (float64x2_t)vzip1q_s64(*v146, (int64x2_t)v148);
          v159 = (float64x2_t)vzip2q_s64(*v146, (int64x2_t)v148);
          v160 = vmlaq_laneq_f64(vmulq_n_f64(v158, *(double *)v146->i64), v159, *(float64x2_t *)v146, 1);
          v161 = vmlaq_laneq_f64(vmulq_n_f64(v158, v148.f64[0]), v159, v148, 1);
          v162 = vmlaq_laneq_f64(vmulq_n_f64(v153, *(double *)v146->i64), v124, *(float64x2_t *)v146, 1);
          v163 = vmlaq_laneq_f64(vmulq_n_f64(v153, v148.f64[0]), v124, v148, 1);
          v164 = vmlaq_laneq_f64(vmulq_n_f64(v158, v149.f64[0]), v159, v149, 1);
          v165 = vmlaq_laneq_f64(vmulq_n_f64(v153, v149.f64[0]), v124, v149, 1);
          v166 = vmlaq_laneq_f64(vmulq_n_f64(v158, v150.f64[0]), v159, v150, 1);
          v167 = vmlaq_laneq_f64(vmulq_n_f64(v158, v151.f64[0]), v159, v151, 1);
          v168 = vmlaq_laneq_f64(vmulq_n_f64(v153, v150.f64[0]), v124, v150, 1);
          v169 = vmlaq_laneq_f64(vmulq_n_f64(v153, v151.f64[0]), v124, v151, 1);
          v170 = vmlaq_laneq_f64(vmulq_n_f64(v158, v152.f64[0]), v159, v152, 1);
          v171 = vmlaq_laneq_f64(vmulq_n_f64(v153, v152.f64[0]), v124, v152, 1);
          v172 = vmlaq_laneq_f64(vmulq_n_f64(v158, v154.f64[0]), v159, v154, 1);
          v173 = vmlaq_laneq_f64(vmulq_n_f64(v158, v155.f64[0]), v159, v155, 1);
          v174 = vmlaq_laneq_f64(vmulq_n_f64(v153, v154.f64[0]), v124, v154, 1);
          v175 = vmlaq_laneq_f64(vmulq_n_f64(v153, v155.f64[0]), v124, v155, 1);
          v176 = vmlaq_laneq_f64(vmulq_n_f64(v158, v147.f64[0]), v159, v147, 1);
          v177 = vmlaq_laneq_f64(vmulq_n_f64(v153, v147.f64[0]), v124, v147, 1);
          v178 = vmlaq_laneq_f64(vmulq_n_f64(v158, v156.f64[0]), v159, v156, 1);
          v179 = vmlaq_laneq_f64(vmulq_n_f64(v158, v157.f64[0]), v159, v157, 1);
          v180 = vmlaq_laneq_f64(vmulq_n_f64(v153, v156.f64[0]), v124, v156, 1);
          v181 = vmlaq_laneq_f64(vmulq_n_f64(v153, v157.f64[0]), v124, v157, 1);
          v182 = vsubq_f64(v1244, v160);
          v183 = vsubq_f64(v1239, v161);
          v49 = vsubq_f64(v1144, v163);
          v184 = vsubq_f64(v1234, v164);
          v50 = vsubq_f64(v1419, v165);
          v185 = vsubq_f64(v1229, v166);
          v51 = vsubq_f64(v1414, v168);
          v186 = vsubq_f64(v1224, v167);
          v52 = vsubq_f64(v1139, v169);
          v187 = vsubq_f64(v1219, v170);
          v53 = vsubq_f64(v1409, v171);
          v188 = vsubq_f64(v1214, v172);
          v54 = vsubq_f64(v1404, v174);
          v189 = vsubq_f64(v1209, v173);
          v55 = vsubq_f64(v1134, v175);
          v56 = vsubq_f64(v1399, v177);
          v190 = vsubq_f64(v1194, v178);
          v191 = vsubq_f64(v1199, v180);
          v192 = vsubq_f64(v1184, v179);
          v1249 = vsubq_f64(v1249, v162);
          *(float64x2_t *)(v35 + 512) = v182;
          *(float64x2_t *)(v35 + 528) = v1249;
          v1244 = v182;
          *(float64x2_t *)(v35 + 632) = v183;
          *(float64x2_t *)(v35 + 648) = v49;
          v1239 = v183;
          *(float64x2_t *)(v35 + 752) = v184;
          *(float64x2_t *)(v35 + 768) = v50;
          v1234 = v184;
          *(float64x2_t *)(v35 + 872) = v185;
          *(float64x2_t *)(v35 + 888) = v51;
          v1229 = v185;
          *(float64x2_t *)(v35 + 992) = v186;
          *(float64x2_t *)(v35 + 1008) = v52;
          v1224 = v186;
          *(float64x2_t *)(v35 + 1112) = v187;
          *(float64x2_t *)(v35 + 1128) = v53;
          v1219 = v187;
          *(float64x2_t *)(v35 + 1232) = v188;
          *(float64x2_t *)(v35 + 1248) = v54;
          v1214 = v188;
          *(float64x2_t *)(v35 + 1352) = v189;
          *(float64x2_t *)(v35 + 1368) = v55;
          v1209 = v189;
          v1204 = vsubq_f64(v1204, v176);
          *(float64x2_t *)(v35 + 1472) = v1204;
          *(float64x2_t *)(v35 + 1488) = v56;
          v1199 = v191;
          *(float64x2_t *)(v35 + 1592) = v190;
          *(float64x2_t *)(v35 + 1608) = v191;
          v1194 = v190;
          v193 = (int64x2_t *)((char *)v37 + 8 * (8 * v36 + v39));
          v1189 = vsubq_f64(v1189, v181);
          *(float64x2_t *)(v35 + 1712) = v192;
          *(float64x2_t *)(v35 + 1728) = v1189;
          v1184 = v192;
          v194 = *(float64x2_t *)((char *)v193 + 8 * v36);
          v195 = (float64x2_t)v193[v36];
          v196 = *(float64x2_t *)((char *)v193 + 24 * v36);
          *(_QWORD *)&v184.f64[0] = vdupq_laneq_s64((int64x2_t)v195, 1).u64[0];
          v197 = (float64x2_t)v193[2 * v36];
          v198 = (float64x2_t)vzip1q_s64((int64x2_t)v195, (int64x2_t)v196);
          v199 = *(float64x2_t *)((char *)v193 + 40 * v36);
          v200 = (float64x2_t)vzip1q_s64(*v193, (int64x2_t)v194);
          *(_QWORD *)&v184.f64[1] = v193->i64[v47 + 1];
          v201 = (float64x2_t)vzip2q_s64(*v193, (int64x2_t)v194);
          v202 = vmlaq_laneq_f64(vmulq_n_f64(v200, *(double *)v193->i64), v201, *(float64x2_t *)v193, 1);
          v203 = vmlaq_laneq_f64(vmulq_n_f64(v200, v194.f64[0]), v201, v194, 1);
          v204 = vmlaq_laneq_f64(vmulq_n_f64(v198, *(double *)v193->i64), v184, *(float64x2_t *)v193, 1);
          v205 = vmlaq_laneq_f64(vmulq_n_f64(v198, v194.f64[0]), v184, v194, 1);
          v206 = vmlaq_laneq_f64(vmulq_n_f64(v200, v195.f64[0]), v201, v195, 1);
          v207 = vmlaq_laneq_f64(vmulq_n_f64(v198, v195.f64[0]), v184, v195, 1);
          v208 = vmlaq_laneq_f64(vmulq_n_f64(v200, v196.f64[0]), v201, v196, 1);
          v209 = vmlaq_laneq_f64(vmulq_n_f64(v200, v197.f64[0]), v201, v197, 1);
          v210 = vmlaq_laneq_f64(vmulq_n_f64(v198, v196.f64[0]), v184, v196, 1);
          v211 = vmlaq_laneq_f64(vmulq_n_f64(v198, v197.f64[0]), v184, v197, 1);
          v212 = vmlaq_laneq_f64(vmulq_n_f64(v200, v199.f64[0]), v201, v199, 1);
          v213 = vmlaq_laneq_f64(vmulq_n_f64(v198, v199.f64[0]), v184, v199, 1);
          _Q7 = (float64x2_t)v193[3 * v36];
          v215 = vmlaq_laneq_f64(vmulq_n_f64(v200, _Q7.f64[0]), v201, _Q7, 1);
          v216 = vmlaq_laneq_f64(vmulq_n_f64(v198, _Q7.f64[0]), v184, _Q7, 1);
          v58 = vsubq_f64(v1124, v202);
          v57 = vsubq_f64(v1129, v204);
          v60 = vsubq_f64(v1394, v203);
          v59 = vsubq_f64(v1119, v205);
          v217 = vsubq_f64(v1179, v206);
          v61 = vsubq_f64(v1389, v207);
          v218 = vsubq_f64(v1174, v208);
          v62 = vsubq_f64(v1384, v210);
          v219 = vsubq_f64(v1169, v209);
          v63 = vsubq_f64(v1114, v211);
          v220 = vsubq_f64(v1164, v212);
          v64 = vsubq_f64(v1379, v213);
          v221 = vsubq_f64(v1159, v215);
          v65 = vsubq_f64(v1109, v216);
          *(float64x2_t *)(v35 + 1040) = v57;
          *(float64x2_t *)(v35 + 1024) = v58;
          *(float64x2_t *)(v35 + 1144) = v60;
          *(float64x2_t *)(v35 + 1160) = v59;
          *(float64x2_t *)(v35 + 1264) = v217;
          *(float64x2_t *)(v35 + 1280) = v61;
          v1179 = v217;
          *(float64x2_t *)(v35 + 1400) = v62;
          v1174 = v218;
          *(float64x2_t *)(v35 + 1384) = v218;
          v1169 = v219;
          *(float64x2_t *)(v35 + 1504) = v219;
          *(float64x2_t *)(v35 + 1520) = v63;
          *(float64x2_t *)(v35 + 1624) = v220;
          *(float64x2_t *)(v35 + 1640) = v64;
          v1164 = v220;
          v222 = (int64x2_t *)((char *)v37 + 8 * (12 * v36 + v39));
          *(float64x2_t *)(v35 + 1744) = v221;
          *(float64x2_t *)(v35 + 1760) = v65;
          v1159 = v221;
          v223 = *(float64x2_t *)((char *)v222 + 8 * v36);
          _Q2 = (float64x2_t)v222[v36];
          v225 = (float64x2_t)vzip1q_s64(*v222, (int64x2_t)v223);
          _Q5 = (float64x2_t)vzip2q_s64(*v222, (int64x2_t)v223);
          _Q6 = vmulq_f64(_Q2, *(float64x2_t *)v222);
          *(_QWORD *)&_Q7.f64[0] = v222->i64[1];
          __asm { FMLA            D6, D7, V2.D[1] }
          v231 = vmlaq_laneq_f64(vmulq_n_f64(v225, *(double *)v222->i64), _Q5, *(float64x2_t *)v222, 1);
          _Q0 = vmulq_f64(_Q2, v223);
          *(_QWORD *)&_Q7.f64[0] = v222->i64[(unint64_t)v40 / 8 + 1];
          __asm { FMLA            D0, D7, V2.D[1] }
          v233 = vmlaq_laneq_f64(vmulq_n_f64(v225, v223.f64[0]), _Q5, v223, 1);
          v234 = vmlaq_laneq_f64(vmulq_n_f64(v225, _Q2.f64[0]), _Q5, _Q2, 1);
          _Q1 = vmulq_f64(_Q2, _Q2);
          *(_QWORD *)&_Q5.f64[0] = v222[v36].i64[1];
          __asm { FMLA            D1, D5, V2.D[1] }
          *(_QWORD *)&_Q5.f64[0] = v1099;
          *(_QWORD *)&_Q5.f64[1] = v1154;
          v66 = (int8x16_t)vsubq_f64(_Q5, v231);
          v25 = vsubq_f64(v1104, _Q6);
          *(_QWORD *)&_Q6.f64[0] = v1094;
          *(_QWORD *)&_Q6.f64[1] = v1079;
          *(_QWORD *)&v231.f64[0] = v1089;
          v67 = vsubq_f64(v1374, _Q0);
          v68 = (int8x16_t)vsubq_f64(_Q6, v233);
          *(_QWORD *)&v231.f64[1] = v1084;
          v1154 = vextq_s8(v66, v66, 8uLL).u64[0];
          v70 = (int8x16_t)vsubq_f64(v231, v234);
          v69 = vextq_s8(v68, v68, 8uLL).u64[0];
          *(int8x16_t *)(v35 + 1536) = v66;
          *(float64_t *)(v35 + 1552) = v25.f64[0];
          v24 = vsubq_f64(v1369, _Q1);
          v71 = vextq_s8(v70, v70, 8uLL).u64[0];
          *(int8x16_t *)(v35 + 1656) = v68;
          *(float64_t *)(v35 + 1672) = v67.f64[0];
          *(int8x16_t *)(v35 + 1776) = v70;
          *(float64_t *)(v35 + 1792) = v24.f64[0];
          LODWORD(v222) = v39 + 4;
          v39 += 2;
          ++v48;
        }
        while (v222 <= v36);
        v38 = *(_DWORD *)(v8 + 16);
      }
      if ((v38 & 1) != 0)
      {
        LODWORD(v1449) = 1;
        HIDWORD(v1449) = v36;
        v1450 = &v37->i8[8 * (v36 - 1)];
        v1451 = v36 - 1;
        v1454 = (char *)&v1449;
        v1445 = *(float64x2_t *)v35;
        v1440 = *(_OWORD *)(v35 + 16);
        v1435 = *(_OWORD *)(v35 + 32);
        v1430 = *(_OWORD *)(v35 + 48);
        v1425 = *(_OWORD *)(v35 + 64);
        v1420 = *(_OWORD *)(v35 + 80);
        v1415 = *(_OWORD *)(v35 + 96);
        v1410 = *(_OWORD *)(v35 + 112);
        v1405 = *(_OWORD *)(v35 + 128);
        v1400 = *(_OWORD *)(v35 + 144);
        v1395 = *(_OWORD *)(v35 + 160);
        v1390 = *(_OWORD *)(v35 + 176);
        v1385 = *(_OWORD *)(v35 + 192);
        v1380 = *(_OWORD *)(v35 + 208);
        v1375 = *(_OWORD *)(v35 + 224);
        v1370 = *(_OWORD *)(v35 + 240);
        v1365 = *(_OWORD *)(v35 + 256);
        v1360 = *(_OWORD *)(v35 + 272);
        v1355 = *(_OWORD *)(v35 + 288);
        v1350 = *(_OWORD *)(v35 + 304);
        v1345 = *(_OWORD *)(v35 + 320);
        v1340 = *(_OWORD *)(v35 + 336);
        v1335 = *(_OWORD *)(v35 + 352);
        v1330 = *(_OWORD *)(v35 + 368);
        v1325 = *(_OWORD *)(v35 + 384);
        v1320 = *(_OWORD *)(v35 + 400);
        v1315 = *(_OWORD *)(v35 + 416);
        v1310 = *(_OWORD *)(v35 + 432);
        v1305 = *(_OWORD *)(v35 + 448);
        v1300 = *(_OWORD *)(v35 + 464);
        v1295 = *(_OWORD *)(v35 + 480);
        v1290 = *(_OWORD *)(v35 + 496);
        v1285 = *(_OWORD *)(v35 + 512);
        v1280 = *(_OWORD *)(v35 + 528);
        v1275 = *(_OWORD *)(v35 + 544);
        v1270 = *(_OWORD *)(v35 + 560);
        v1265 = *(_OWORD *)(v35 + 576);
        v1260 = *(_OWORD *)(v35 + 592);
        v1255 = *(_OWORD *)(v35 + 608);
        v1250 = *(_OWORD *)(v35 + 624);
        v1245 = *(_OWORD *)(v35 + 640);
        v1240 = *(_OWORD *)(v35 + 656);
        v1235 = *(_OWORD *)(v35 + 672);
        v1230 = *(_OWORD *)(v35 + 688);
        v1225 = *(_OWORD *)(v35 + 704);
        v1220 = *(_OWORD *)(v35 + 720);
        v1215 = *(_OWORD *)(v35 + 736);
        v1210 = *(_OWORD *)(v35 + 752);
        v1205 = *(_OWORD *)(v35 + 768);
        v1200 = *(_OWORD *)(v35 + 784);
        v1195 = *(_OWORD *)(v35 + 800);
        v1190 = *(_OWORD *)(v35 + 816);
        v1185 = *(_OWORD *)(v35 + 832);
        v1180 = *(_OWORD *)(v35 + 848);
        v1175 = *(_OWORD *)(v35 + 864);
        v1170 = *(_OWORD *)(v35 + 880);
        v1165 = *(_OWORD *)(v35 + 896);
        v1160 = *(_OWORD *)(v35 + 912);
        v1155 = *(_OWORD *)(v35 + 928);
        v1150 = *(_OWORD *)(v35 + 944);
        v1145 = *(_OWORD *)(v35 + 960);
        v1140 = *(_OWORD *)(v35 + 976);
        v1135 = *(_OWORD *)(v35 + 992);
        v1130 = *(_OWORD *)(v35 + 1008);
        v1125 = *(_OWORD *)(v35 + 1024);
        v1120 = *(_OWORD *)(v35 + 1040);
        v1115 = *(_OWORD *)(v35 + 1056);
        v1110 = *(_OWORD *)(v35 + 1072);
        v1105 = *(_OWORD *)(v35 + 1088);
        v1100 = *(_OWORD *)(v35 + 1104);
        v1095 = *(_OWORD *)(v35 + 1120);
        v1090 = *(_OWORD *)(v35 + 1136);
        v1085 = *(_OWORD *)(v35 + 1152);
        v1080 = *(_OWORD *)(v35 + 1168);
        v1075 = *(_OWORD *)(v35 + 1184);
        v1070 = *(_OWORD *)(v35 + 1200);
        v1065 = *(_OWORD *)(v35 + 1216);
        v1060 = *(_OWORD *)(v35 + 1232);
        v1055 = *(_OWORD *)(v35 + 1248);
        v1050 = *(_OWORD *)(v35 + 1264);
        v1046 = *(_OWORD *)(v35 + 1280);
        v236 = *(_OWORD *)(v35 + 1296);
        v237 = *(float64x2_t *)(v35 + 1312);
        v238 = *(_OWORD *)(v35 + 1328);
        v239 = *(_OWORD *)(v35 + 1344);
        v240 = *(_OWORD *)(v35 + 1360);
        v241 = *(_OWORD *)(v35 + 1376);
        v242 = *(_OWORD *)(v35 + 1392);
        v243 = *(_OWORD *)(v35 + 1408);
        v244 = *(_OWORD *)(v35 + 1424);
        v245 = *(_OWORD *)(v35 + 1440);
        v246 = *(_OWORD *)(v35 + 1456);
        v247 = *(_OWORD *)(v35 + 1472);
        v248 = *(_OWORD *)(v35 + 1488);
        v249 = *(_OWORD *)(v35 + 1504);
        v250 = *(_OWORD *)(v35 + 1520);
        v251 = *(_OWORD *)(v35 + 1536);
        v252 = *(_OWORD *)(v35 + 1552);
        v253 = *(_OWORD *)(v35 + 1568);
        v254 = *(_OWORD *)(v35 + 1584);
        v255 = *(_OWORD *)(v35 + 1600);
        v256 = *(_OWORD *)(v35 + 1616);
        v257 = *(_OWORD *)(v35 + 1632);
        v258 = *(_OWORD *)(v35 + 1648);
        v259 = *(_OWORD *)(v35 + 1664);
        v260 = *(_OWORD *)(v35 + 1680);
        v261 = *(_OWORD *)(v35 + 1696);
        v262 = *(_OWORD *)(v35 + 1712);
        v263 = *(_OWORD *)(v35 + 1728);
        v264 = *(_OWORD *)(v35 + 1744);
        v265 = *(_OWORD *)(v35 + 1760);
        v266 = *(_OWORD *)(v35 + 1776);
        v1568 = *(_QWORD *)(v35 + 1792);
        v1567 = v266;
        v1566 = v265;
        v1565 = v264;
        v1564 = v263;
        v1563 = v262;
        v1562 = v261;
        v1561 = v260;
        v1560 = v259;
        v1559 = v258;
        v1558 = v257;
        v1557 = v256;
        v1556 = v255;
        v1555 = v254;
        v1554 = v253;
        v1553 = v252;
        v1552 = v251;
        v1551 = v250;
        v1550 = v249;
        v1549 = v248;
        v1548 = v247;
        v1547 = v246;
        v1546 = v245;
        v1545 = v244;
        v1544 = v243;
        v1543 = v242;
        v1542 = v241;
        v1541 = v240;
        v1540 = v239;
        v1539 = v238;
        v1538 = v237;
        v1537 = v236;
        v1536 = v1046;
        v1535 = v1050;
        v1534 = v1055;
        v1533 = v1060;
        v1532 = v1065;
        v1531 = v1070;
        v1530 = v1075;
        v1529 = v1080;
        v1528 = v1085;
        v1527 = v1090;
        v1526 = v1095;
        v1525 = v1100;
        v1524 = v1105;
        v1523 = v1110;
        v1522 = v1115;
        v1521 = v1120;
        v1519 = v1130;
        v1520 = v1125;
        v1517 = v1140;
        v1518 = v1135;
        v1515 = v1150;
        v1516 = v1145;
        v1513 = v1160;
        v1514 = v1155;
        v1511 = v1170;
        v1512 = v1165;
        v1509 = v1180;
        v1510 = v1175;
        v1507 = v1190;
        v1508 = v1185;
        v1505 = v1200;
        v1506 = v1195;
        v1503 = v1210;
        v1504 = v1205;
        v1501 = v1220;
        v1502 = v1215;
        v1499 = v1230;
        v1500 = v1225;
        v1497 = v1240;
        v1498 = v1235;
        v1495 = v1250;
        v1496 = v1245;
        v1493 = v1260;
        v1494 = v1255;
        v1491 = v1270;
        v1492 = v1265;
        v1489 = v1280;
        v1490 = v1275;
        v1487 = v1290;
        v1488 = v1285;
        v1485 = v1300;
        v1486 = v1295;
        v1483 = v1310;
        v1484 = v1305;
        v1481 = v1320;
        v1482 = v1315;
        v1479 = v1330;
        v1480 = v1325;
        v1477 = v1340;
        v1478 = v1335;
        v1475 = v1350;
        v1476 = v1345;
        v1473 = v1360;
        v1474 = v1355;
        v1471 = v1370;
        v1472 = v1365;
        v1469 = v1380;
        v1470 = v1375;
        v1467 = v1390;
        v1468 = v1385;
        v1465 = v1400;
        v1466 = v1395;
        v1463 = v1410;
        v1464 = v1405;
        v1461 = v1420;
        v1462 = v1415;
        v1460 = v1425;
        v1459 = v1430;
        v1458 = v1435;
        v1457 = v1440;
        v1456 = v1445;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1456;
        v1571 = &v1454;
        v1572 = &v1449;
        v1573 = 0x3FF0000000000000;
        sub_20FBAA984((double *)&__p.__r_.__value_.__l.__size_, (uint64_t)&v1569);
        v267.f64[0] = *(float64_t *)(__p.__r_.__value_.__r.__words[0] + 1792);
        v237.f64[0] = v1577;
        *(_QWORD *)&v1445.f64[0] = *(_OWORD *)&vsubq_f64(v267, v237);
        v1441 = vsubq_f64(*(float64x2_t *)__p.__r_.__value_.__l.__data_, *(float64x2_t *)&__p.__r_.__value_.__r.__words[1]);
        v1436 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 16), v1575);
        v1431 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 32), v1576[0]);
        v1426 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 48), v1576[1]);
        v1421 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 64), v1576[2]);
        v1416 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 80), v1576[3]);
        v1411 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 96), v1576[4]);
        v1406 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 112), v1576[5]);
        v1401 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 128), v1576[6]);
        v1396 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 144), v1576[7]);
        v1391 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 160), v1576[8]);
        v1386 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 176), v1576[9]);
        v1381 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 192), v1576[10]);
        v1376 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 208), v1576[11]);
        v1371 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 224), v1576[12]);
        v1366 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 240), v1576[13]);
        v1361 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 256), v1576[14]);
        v1356 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 272), v1576[15]);
        v1351 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 288), v1576[16]);
        v1346 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 304), v1576[17]);
        v1341 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 320), v1576[18]);
        v1336 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 336), v1576[19]);
        v1331 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 352), v1576[20]);
        v1326 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 368), v1576[21]);
        v1321 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 384), v1576[22]);
        v1316 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 400), v1576[23]);
        v1311 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 416), v1576[24]);
        v1306 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 432), v1576[25]);
        v1301 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 448), v1576[26]);
        v1296 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 464), v1576[27]);
        v1291 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 480), v1576[28]);
        v1286 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 496), v1576[29]);
        v1281 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 512), v1576[30]);
        v1276 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 528), v1576[31]);
        v1271 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 544), v1576[32]);
        v1266 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 560), v1576[33]);
        v1261 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 576), v1576[34]);
        v1256 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 592), v1576[35]);
        v1251 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 608), v1576[36]);
        v1246 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 624), v1576[37]);
        v1241 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 640), v1576[38]);
        v1236 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 656), v1576[39]);
        v1231 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 672), v1576[40]);
        v1226 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 688), v1576[41]);
        v1221 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 704), v1576[42]);
        v1216 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 720), v1576[43]);
        v1211 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 736), v1576[44]);
        v1206 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 752), v1576[45]);
        v1201 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 768), v1576[46]);
        v1196 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 784), v1576[47]);
        v1191 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 800), v1576[48]);
        v1186 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 816), v1576[49]);
        v1181 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 832), v1576[50]);
        v1176 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 848), v1576[51]);
        v1171 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 864), v1576[52]);
        v1166 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 880), v1576[53]);
        v1161 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 896), v1576[54]);
        v1156 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 912), v1576[55]);
        v1151 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 928), v1576[56]);
        v1146 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 944), v1576[57]);
        v1141 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 960), v1576[58]);
        v1136 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 976), v1576[59]);
        v1131 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 992), v1576[60]);
        v1126 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1008), v1576[61]);
        v1121 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1024), v1576[62]);
        v1116 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1040), v1576[63]);
        v1111 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1056), v1576[64]);
        v1106 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1072), v1576[65]);
        v1101 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1088), v1576[66]);
        v1096 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1104), v1576[67]);
        v1091 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1120), v1576[68]);
        v1086 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1136), v1576[69]);
        v1081 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1152), v1576[70]);
        v1076 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1168), v1576[71]);
        v1071 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1184), v1576[72]);
        v1066 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1200), v1576[73]);
        v1061 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1216), v1576[74]);
        v1056 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1232), v1576[75]);
        v1051 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1248), v1576[76]);
        v1047 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1264), v1576[77]);
        v1043 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1280), v1576[78]);
        v268 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1296), v1576[79]);
        v269 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1312), v1576[80]);
        v270 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1328), v1576[81]);
        v271 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1344), v1576[82]);
        v272 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1360), v1576[83]);
        v273 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1376), v1576[84]);
        v274 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1392), v1576[85]);
        v275 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1408), v1576[86]);
        v276 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1424), v1576[87]);
        v277 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1440), v1576[88]);
        v278 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1456), v1576[89]);
        v279 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1472), v1576[90]);
        v280 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1488), v1576[91]);
        v281 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1504), v1576[92]);
        v282 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1520), v1576[93]);
        v283 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1536), v1576[94]);
        v284 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1552), v1576[95]);
        v285 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1568), v1576[96]);
        v286 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1584), v1576[97]);
        v287 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1600), v1576[98]);
        v288 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1616), v1576[99]);
        v289 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1632), v1576[100]);
        v290 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1648), v1576[101]);
        v291 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1664), v1576[102]);
        v292 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1680), v1576[103]);
        v293 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1696), v1576[104]);
        v294 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1712), v1576[105]);
        v295 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1728), v1576[106]);
        v296 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1744), v1576[107]);
        v297 = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1760), v1576[108]);
        *(float64x2_t *)(v35 + 1776) = vsubq_f64(*(float64x2_t *)(__p.__r_.__value_.__r.__words[0] + 1776), v1576[109]);
        *(float64x2_t *)(v35 + 1760) = v297;
        *(float64x2_t *)(v35 + 1744) = v296;
        *(float64x2_t *)(v35 + 1728) = v295;
        *(float64x2_t *)(v35 + 1712) = v294;
        *(float64x2_t *)(v35 + 1696) = v293;
        *(float64x2_t *)(v35 + 1680) = v292;
        *(float64x2_t *)(v35 + 1664) = v291;
        *(float64x2_t *)(v35 + 1648) = v290;
        *(float64x2_t *)(v35 + 1632) = v289;
        *(float64x2_t *)(v35 + 1616) = v288;
        *(float64x2_t *)(v35 + 1600) = v287;
        *(float64x2_t *)(v35 + 1584) = v286;
        *(float64x2_t *)(v35 + 1568) = v285;
        *(float64x2_t *)(v35 + 1552) = v284;
        *(float64x2_t *)(v35 + 1536) = v283;
        *(float64x2_t *)(v35 + 1520) = v282;
        *(float64x2_t *)(v35 + 1504) = v281;
        *(float64x2_t *)(v35 + 1488) = v280;
        *(float64x2_t *)(v35 + 1472) = v279;
        *(float64x2_t *)(v35 + 1456) = v278;
        *(float64x2_t *)(v35 + 1440) = v277;
        *(float64x2_t *)(v35 + 1424) = v276;
        *(float64x2_t *)(v35 + 1408) = v275;
        *(float64x2_t *)(v35 + 1392) = v274;
        *(float64x2_t *)(v35 + 1376) = v273;
        *(float64x2_t *)(v35 + 1360) = v272;
        *(float64x2_t *)(v35 + 1344) = v271;
        *(float64x2_t *)(v35 + 1328) = v270;
        *(float64x2_t *)(v35 + 1312) = v269;
        *(float64x2_t *)(v35 + 1296) = v268;
        *(float64x2_t *)(v35 + 1280) = v1043;
        *(float64x2_t *)(v35 + 1264) = v1047;
        *(float64x2_t *)(v35 + 1248) = v1051;
        *(float64x2_t *)(v35 + 1232) = v1056;
        *(float64x2_t *)(v35 + 1216) = v1061;
        *(float64x2_t *)(v35 + 1200) = v1066;
        *(float64x2_t *)(v35 + 1184) = v1071;
        *(float64x2_t *)(v35 + 1168) = v1076;
        *(float64x2_t *)(v35 + 1152) = v1081;
        *(float64x2_t *)(v35 + 1136) = v1086;
        *(float64x2_t *)(v35 + 1120) = v1091;
        *(float64x2_t *)(v35 + 1104) = v1096;
        *(float64x2_t *)(v35 + 1088) = v1101;
        *(float64x2_t *)(v35 + 1072) = v1106;
        *(float64x2_t *)(v35 + 1056) = v1111;
        *(float64x2_t *)(v35 + 1040) = v1116;
        *(float64x2_t *)(v35 + 1008) = v1126;
        *(float64x2_t *)(v35 + 1024) = v1121;
        *(float64x2_t *)(v35 + 976) = v1136;
        *(float64x2_t *)(v35 + 992) = v1131;
        *(float64x2_t *)(v35 + 944) = v1146;
        *(float64x2_t *)(v35 + 960) = v1141;
        *(float64x2_t *)(v35 + 912) = v1156;
        *(float64x2_t *)(v35 + 928) = v1151;
        *(float64x2_t *)(v35 + 880) = v1166;
        *(float64x2_t *)(v35 + 896) = v1161;
        *(float64x2_t *)(v35 + 848) = v1176;
        *(float64x2_t *)(v35 + 864) = v1171;
        *(float64x2_t *)(v35 + 816) = v1186;
        *(float64x2_t *)(v35 + 832) = v1181;
        *(float64x2_t *)(v35 + 784) = v1196;
        *(float64x2_t *)(v35 + 800) = v1191;
        *(float64x2_t *)(v35 + 752) = v1206;
        *(float64x2_t *)(v35 + 768) = v1201;
        *(float64x2_t *)(v35 + 720) = v1216;
        *(float64x2_t *)(v35 + 736) = v1211;
        *(float64x2_t *)(v35 + 688) = v1226;
        *(float64x2_t *)(v35 + 704) = v1221;
        *(float64x2_t *)(v35 + 656) = v1236;
        *(float64x2_t *)(v35 + 672) = v1231;
        *(float64x2_t *)(v35 + 624) = v1246;
        *(float64x2_t *)(v35 + 640) = v1241;
        *(float64x2_t *)(v35 + 592) = v1256;
        *(float64x2_t *)(v35 + 608) = v1251;
        *(float64x2_t *)(v35 + 560) = v1266;
        *(float64x2_t *)(v35 + 576) = v1261;
        *(float64x2_t *)(v35 + 528) = v1276;
        *(float64x2_t *)(v35 + 544) = v1271;
        *(float64x2_t *)(v35 + 496) = v1286;
        *(float64x2_t *)(v35 + 512) = v1281;
        *(float64x2_t *)(v35 + 464) = v1296;
        *(float64x2_t *)(v35 + 480) = v1291;
        *(float64x2_t *)(v35 + 432) = v1306;
        *(float64x2_t *)(v35 + 448) = v1301;
        *(float64x2_t *)(v35 + 400) = v1316;
        *(float64x2_t *)(v35 + 416) = v1311;
        *(float64x2_t *)(v35 + 368) = v1326;
        *(float64x2_t *)(v35 + 384) = v1321;
        *(float64x2_t *)(v35 + 336) = v1336;
        *(float64x2_t *)(v35 + 352) = v1331;
        *(float64x2_t *)(v35 + 304) = v1346;
        *(float64x2_t *)(v35 + 320) = v1341;
        *(float64x2_t *)(v35 + 272) = v1356;
        *(float64x2_t *)(v35 + 288) = v1351;
        *(float64x2_t *)(v35 + 240) = v1366;
        *(float64x2_t *)(v35 + 256) = v1361;
        *(float64x2_t *)(v35 + 208) = v1376;
        *(float64x2_t *)(v35 + 224) = v1371;
        *(float64x2_t *)(v35 + 176) = v1386;
        *(float64x2_t *)(v35 + 192) = v1381;
        *(float64x2_t *)(v35 + 144) = v1396;
        *(float64x2_t *)(v35 + 160) = v1391;
        *(float64x2_t *)(v35 + 112) = v1406;
        *(float64x2_t *)(v35 + 128) = v1401;
        *(float64x2_t *)(v35 + 80) = v1416;
        *(float64x2_t *)(v35 + 96) = v1411;
        *(float64x2_t *)(v35 + 48) = v1426;
        *(float64x2_t *)(v35 + 64) = v1421;
        *(float64x2_t *)(v35 + 16) = v1436;
        *(float64x2_t *)(v35 + 32) = v1431;
        *(float64x2_t *)v35 = v1441;
        *(float64_t *)(v35 + 1792) = v1445.f64[0];
      }
      break;
    default:
      *(_QWORD *)&v1456.f64[0] = v8;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v1456;
      __p.__r_.__value_.__r.__words[2] = v8;
      v1575.f64[0] = 1.0;
      sub_20F2B8D98(v4, (uint64_t)&__p);
      break;
  }
  return 1;
}

void sub_20FBEAF24(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x1328]) && SLOBYTE(STACK[0x1327]) < 0)
    operator delete((void *)STACK[0x1310]);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0xBE8]);
  if (!STACK[0x12F8])
    _Unwind_Resume(a1);
  MEMORY[0x212BC6368](STACK[0x12F8], 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

uint64_t sub_20FBEB154(uint64_t a1, uint64_t a2, std::string::size_type a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  int v9;
  __CLPK_doublereal *v10;
  int v11;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char *v21;
  int v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  std::runtime_error *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  char *v30;
  unsigned __int8 v31;
  uint64_t v32;
  const char *v33;
  NSObject *v34;
  std::runtime_error *exception;
  unsigned __int8 v36;
  uint64_t v37;
  const char *v38;
  NSObject *v39;
  std::string v40;
  int v41;
  const char *v42;
  int v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  char *category;
  uint64_t v50;
  std::string::size_type v51;
  uint64_t v52;
  std::string v53;
  uint64_t v54;
  _QWORD v55[5];

  v55[4] = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)a1;
  v9 = *(_DWORD *)(a1 + 20);
  LOBYTE(category) = 117;
  LODWORD(v40.__r_.__value_.__l.__data_) = v9;
  LODWORD(v51) = -1;
  v53.__r_.__value_.__r.__words[0] = 0x100000001;
  sub_20E83455C(&v53, (uint64_t)&category, (int *)&v40, v8, (int *)&v40, (int *)&v51);
  v48 = v51;
  if ((_DWORD)v51)
  {
    v13 = v51;
    sub_20F9B2A4C(&v47);
    if (**(int **)(v47 + 56) <= 4)
    {
      v14 = *(unsigned __int8 *)(v47 + 72);
      v15 = sub_20E8C31DC(v47, "OSLogSurrogateAppender", 1, 0);
      v16 = v15 ? v15 + 16 : 0;
      if (v14 || v15 != 0)
      {
        v40.__r_.__value_.__r.__words[0] = (std::string::size_type)&v47;
        v40.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
        v40.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
        v41 = 4;
        v42 = "unknown file";
        v43 = 3421;
        v45 = 0;
        v46 = 0;
        v44 = "unknown function";
        v18 = *(_QWORD *)v40.__r_.__value_.__l.__data_;
        v19 = (uint64_t *)(*(_QWORD *)v40.__r_.__value_.__l.__data_ + 16);
        if (*(char *)(*(_QWORD *)v40.__r_.__value_.__l.__data_ + 39) < 0)
        {
          v21 = *(char **)(v18 + 16);
          v20 = *(_QWORD *)(v18 + 24);
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)v40.__r_.__value_.__l.__data_ + 39);
          v21 = (char *)(*(_QWORD *)v40.__r_.__value_.__l.__data_ + 16);
        }
        category = v21;
        v50 = v20;
        v31 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v31 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)&v53);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v53);
          if ((_BYTE)v54 && SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v53.__r_.__value_.__l.__data_);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        v32 = byte_254A4A4F8[23];
        if (byte_254A4A4F8[23] >= 0)
        {
          v33 = byte_254A4A4F8;
        }
        else
        {
          v32 = *(_QWORD *)&byte_254A4A4F8[8];
          v33 = *(const char **)byte_254A4A4F8;
        }
        v51 = (std::string::size_type)v33;
        v52 = v32;
        v53.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v33, category);
        sub_20E86E5A8(&v53.__r_.__value_.__l.__size_, (uint64_t)&v51);
        sub_20E86E5A8(v55, (uint64_t)&category);
        v34 = v53.__r_.__value_.__r.__words[0];
        sub_20E86E44C((uint64_t)&v53);
        sub_20FBEC0B4(v16, v19, v34, OS_LOG_TYPE_ERROR, &v48);
        v13 = v48;
        if (v14)
        {
          sub_20E8C003C((uint64_t)&v40, "Failed to factorize the marginalized component of the information matrix (result = %d).", v48);
          sub_20E863570((uint64_t)&v40);
        }
        sub_20E863714((uint64_t)&v40);
      }
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v40, v13);
    sub_20E8B0848("marginalize SW f ", &v40, &v53);
    std::runtime_error::runtime_error(exception, &v53);
    exception->__vftable = (std::runtime_error_vtbl *)&off_24CA04F20;
    __cxa_throw(exception, (struct type_info *)&unk_24CA04F38, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v10 = *(__CLPK_doublereal **)a1;
  v11 = *(_DWORD *)(a1 + 20);
  LOBYTE(category) = 117;
  LODWORD(v40.__r_.__value_.__l.__data_) = v11;
  LODWORD(v51) = -1;
  v53.__r_.__value_.__r.__words[0] = 0x100000001;
  sub_20E8345D0(&v53, (char *)&category, (__CLPK_integer *)&v40, v10, (int *)&v40, (__CLPK_integer *)&v51);
  v48 = v51;
  if ((_DWORD)v51)
  {
    v22 = v51;
    sub_20F9B2A4C(&v47);
    if (**(int **)(v47 + 56) <= 4)
    {
      v23 = *(unsigned __int8 *)(v47 + 72);
      v24 = sub_20E8C31DC(v47, "OSLogSurrogateAppender", 1, 0);
      v25 = v24 ? v24 + 16 : 0;
      if (v23 || v24)
      {
        v40.__r_.__value_.__r.__words[0] = (std::string::size_type)&v47;
        v40.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
        v40.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
        v41 = 4;
        v42 = "unknown file";
        v43 = 3429;
        v45 = 0;
        v46 = 0;
        v44 = "unknown function";
        v27 = *(_QWORD *)v40.__r_.__value_.__l.__data_;
        v28 = (uint64_t *)(*(_QWORD *)v40.__r_.__value_.__l.__data_ + 16);
        if (*(char *)(*(_QWORD *)v40.__r_.__value_.__l.__data_ + 39) < 0)
        {
          v30 = *(char **)(v27 + 16);
          v29 = *(_QWORD *)(v27 + 24);
        }
        else
        {
          v29 = *(unsigned __int8 *)(*(_QWORD *)v40.__r_.__value_.__l.__data_ + 39);
          v30 = (char *)(*(_QWORD *)v40.__r_.__value_.__l.__data_ + 16);
        }
        category = v30;
        v50 = v29;
        v36 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v36 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)&v53);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v53);
          if ((_BYTE)v54 && SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v53.__r_.__value_.__l.__data_);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        v37 = byte_254A4A4F8[23];
        if (byte_254A4A4F8[23] >= 0)
        {
          v38 = byte_254A4A4F8;
        }
        else
        {
          v37 = *(_QWORD *)&byte_254A4A4F8[8];
          v38 = *(const char **)byte_254A4A4F8;
        }
        v51 = (std::string::size_type)v38;
        v52 = v37;
        v53.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v38, category);
        sub_20E86E5A8(&v53.__r_.__value_.__l.__size_, (uint64_t)&v51);
        sub_20E86E5A8(v55, (uint64_t)&category);
        v39 = v53.__r_.__value_.__r.__words[0];
        sub_20E86E44C((uint64_t)&v53);
        sub_20FBEC4F4(v25, v28, v39, OS_LOG_TYPE_ERROR, &v48);
        v22 = v48;
        if (v23)
        {
          sub_20E8C003C((uint64_t)&v40, "Failed to invert the marginalized component of the information matrix (result = %d).", v48);
          sub_20E863570((uint64_t)&v40);
        }
        sub_20E863714((uint64_t)&v40);
      }
    }
    v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v40, v22);
    sub_20E8B0848("marginalize SW i ", &v40, &v53);
    std::runtime_error::runtime_error(v26, &v53);
    v26->__vftable = (std::runtime_error_vtbl *)&off_24CA04F20;
    __cxa_throw(v26, (struct type_info *)&unk_24CA04F38, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v51 = a3;
  category = (char *)a1;
  v40.__r_.__value_.__r.__words[0] = (std::string::size_type)&v51;
  v40.__r_.__value_.__l.__size_ = (std::string::size_type)&category;
  v53.__r_.__value_.__l.__size_ = (std::string::size_type)&v40;
  v53.__r_.__value_.__r.__words[2] = a3;
  v54 = 0x3FF0000000000000;
  sub_20FBABE28(a5, (uint64_t)&v53);
  return 1;
}

void sub_20FBEB708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  if (a31)
  {
    if (a30 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_20FBEB750(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FBEB764(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FBEB778(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FBEB78C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FBEB7A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *object,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32)
{
  if (a32 && a31 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_20FBEB828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  int v34;

  if (a33 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v34 & 1) == 0)
      goto LABEL_8;
  }
  else if (!v34)
  {
LABEL_8:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v33);
  _Unwind_Resume(a1);
}

void sub_20FBEB8DC(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20FBEBC6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FBEBC90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FBEBCA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20FBEBCC8(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20FBEC058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FBEC07C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FBEC090(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20FBEC0B4(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, int *a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count_vtbl *v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  int v35;
  void *v36;
  uint64_t v37;
  std::__shared_weak_count_vtbl *v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v12 = v11;
    v11->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    v38 = v10;
    *(_QWORD *)&v39 = v10;
    *((_QWORD *)&v39 + 1) = v11;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    v40 = 0uLL;
    v41 = 0;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v12);
    }
    v16 = v38;
    v17 = (_DWORD *)_os_log_pack_fill();
    v18 = *a5;
    *v17 = 67109120;
    v17[1] = v18;
    v19 = operator new();
    v20 = *((unsigned __int8 *)a2 + 23);
    if ((v20 & 0x80u) == 0)
      v21 = a2;
    else
      v21 = (uint64_t *)*a2;
    if ((v20 & 0x80u) != 0)
      v20 = a2[1];
    *(_QWORD *)v19 = v16;
    *(_OWORD *)(v19 + 8) = v39;
    v39 = 0uLL;
    *(_OWORD *)(v19 + 24) = v40;
    v40 = 0uLL;
    *(_QWORD *)(v19 + 40) = v21;
    *(_QWORD *)(v19 + 48) = v20;
    *(_BYTE *)(v19 + 56) = type;
    v37 = v19;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v37);
    v22 = v37;
    v37 = 0;
    if (v22)
    {
      v23 = *(std::__shared_weak_count **)(v22 + 32);
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v26 = *(std::__shared_weak_count **)(v22 + 16);
      if (v26)
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      MEMORY[0x212BC6398](v22, 0x10F0C40B62ED6C6);
    }
    v29 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (*((_QWORD *)&v40 + 1))
    {
      v30 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
    if (*((_QWORD *)&v39 + 1))
    {
      v33 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v35 = *a5;
    LODWORD(v38) = 67109120;
    HIDWORD(v38) = v35;
    v36 = (void *)_os_log_send_and_compose_impl();
    if (v36)
      free(v36);
  }
}

void sub_20FBEC498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20FBEC4BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FBEC4D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20FBEC4F4(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, int *a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count_vtbl *v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  int v35;
  void *v36;
  uint64_t v37;
  std::__shared_weak_count_vtbl *v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v12 = v11;
    v11->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    v38 = v10;
    *(_QWORD *)&v39 = v10;
    *((_QWORD *)&v39 + 1) = v11;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    v40 = 0uLL;
    v41 = 0;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v12);
    }
    v16 = v38;
    v17 = (_DWORD *)_os_log_pack_fill();
    v18 = *a5;
    *v17 = 67109120;
    v17[1] = v18;
    v19 = operator new();
    v20 = *((unsigned __int8 *)a2 + 23);
    if ((v20 & 0x80u) == 0)
      v21 = a2;
    else
      v21 = (uint64_t *)*a2;
    if ((v20 & 0x80u) != 0)
      v20 = a2[1];
    *(_QWORD *)v19 = v16;
    *(_OWORD *)(v19 + 8) = v39;
    v39 = 0uLL;
    *(_OWORD *)(v19 + 24) = v40;
    v40 = 0uLL;
    *(_QWORD *)(v19 + 40) = v21;
    *(_QWORD *)(v19 + 48) = v20;
    *(_BYTE *)(v19 + 56) = type;
    v37 = v19;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v37);
    v22 = v37;
    v37 = 0;
    if (v22)
    {
      v23 = *(std::__shared_weak_count **)(v22 + 32);
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v26 = *(std::__shared_weak_count **)(v22 + 16);
      if (v26)
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      MEMORY[0x212BC6398](v22, 0x10F0C40B62ED6C6);
    }
    v29 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (*((_QWORD *)&v40 + 1))
    {
      v30 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
    if (*((_QWORD *)&v39 + 1))
    {
      v33 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v35 = *a5;
    LODWORD(v38) = 67109120;
    HIDWORD(v38) = v35;
    v36 = (void *)_os_log_send_and_compose_impl();
    if (v36)
      free(v36);
  }
}

void sub_20FBEC8D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20FBEC8FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FBEC910(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20FBEC934(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20FBECEA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20FBECECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FBECEE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20FBECF38(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20FBED4AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20FBED4D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FBED4E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20FBED53C(uint64_t a1, unsigned int a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  char *v9;
  unsigned int v10;
  uint64_t v11;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  unsigned int *v22;
  char *v23;
  int64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _OWORD *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  unsigned int v33;

  v4 = *(char **)(a1 + 104);
  v5 = *(char **)(a1 + 112);
  if (v5 != v4)
  {
    v6 = (v5 - v4) >> 4;
    do
    {
      v7 = v6 >> 1;
      v8 = (unsigned int *)&v4[16 * (v6 >> 1)];
      v10 = *v8;
      v9 = (char *)(v8 + 4);
      v6 += ~(v6 >> 1);
      if (v10 < a2)
        v4 = v9;
      else
        v6 = v7;
    }
    while (v6);
  }
  if (v4 == v5)
    return 0;
  if (*(_DWORD *)v4 != a2)
    return 0;
  v11 = *((_QWORD *)v4 + 1);
  if ((*(_BYTE *)(v11 + 4) & 6) != 0)
    return 0;
  *(_BYTE *)(v11 + 4) ^= 2u;
  v13 = *(char **)(a1 + 1920);
  v14 = *(_QWORD *)(a1 + 1928);
  if ((unint64_t)v13 >= v14)
  {
    v16 = *(char **)(a1 + 1912);
    v17 = (v13 - v16) >> 2;
    v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 62)
      sub_20E867F44();
    v19 = v14 - (_QWORD)v16;
    if (v19 >> 1 > v18)
      v18 = v19 >> 1;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
      v20 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v20 = v18;
    if (v20)
    {
      if (v20 >> 62)
        sub_20E877A38();
      v21 = operator new(4 * v20);
      v22 = (unsigned int *)&v21[4 * v17];
      v23 = &v21[4 * v20];
      *v22 = a2;
      v15 = (uint64_t)(v22 + 1);
      v24 = v13 - v16;
      if (v13 == v16)
        goto LABEL_30;
    }
    else
    {
      v21 = 0;
      v22 = (unsigned int *)(4 * v17);
      v23 = 0;
      *(_DWORD *)(4 * v17) = a2;
      v15 = 4 * v17 + 4;
      v24 = v13 - v16;
      if (v13 == v16)
      {
LABEL_30:
        *(_QWORD *)(a1 + 1912) = v22;
        *(_QWORD *)(a1 + 1920) = v15;
        *(_QWORD *)(a1 + 1928) = v23;
        if (v16)
          operator delete(v16);
        goto LABEL_32;
      }
    }
    v25 = v24 - 4;
    if (v25 < 0x2C)
      goto LABEL_37;
    if ((unint64_t)(v16 - v21) < 0x20)
      goto LABEL_37;
    v26 = (v25 >> 2) + 1;
    v27 = 4 * (v26 & 0x7FFFFFFFFFFFFFF8);
    v28 = &v13[-v27];
    v22 = (unsigned int *)((char *)v22 - v27);
    v29 = &v21[4 * v17 - 16];
    v30 = v13 - 16;
    v31 = v26 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v32 = *(_OWORD *)v30;
      *(v29 - 1) = *((_OWORD *)v30 - 1);
      *v29 = v32;
      v29 -= 2;
      v30 -= 32;
      v31 -= 8;
    }
    while (v31);
    v13 = v28;
    if (v26 != (v26 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_37:
      do
      {
        v33 = *((_DWORD *)v13 - 1);
        v13 -= 4;
        *--v22 = v33;
      }
      while (v13 != v16);
    }
    goto LABEL_30;
  }
  *(_DWORD *)v13 = a2;
  v15 = (uint64_t)(v13 + 4);
LABEL_32:
  *(_QWORD *)(a1 + 1920) = v15;
  *(_BYTE *)(a1 + 1618) = 0;
  *(_WORD *)(a1 + 1616) = 256;
  return 1;
}

void sub_20FBED740(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20FBEDCB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20FBEDCD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FBEDCEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20FBEDD44(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20FBEE2B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20FBEE2DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FBEE2F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

BOOL sub_20FBEE348(_QWORD *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  _BOOL8 result;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int *v10;
  char *v11;
  unsigned int v12;
  char *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int *v18;
  char *v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int *v23;
  char *v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int *v28;
  char *v29;
  unsigned int v30;

  v3 = a1[709];
  if (a1[710] == v3 || *(_DWORD *)v3 || !*(_BYTE *)(*(_QWORD *)(v3 + 8) + 40))
    return 0;
  v5 = (char *)a1[649];
  v6 = (char *)a1[650];
  v7 = v5;
  if (v6 != v5)
  {
    v8 = (v6 - v5) >> 4;
    v7 = (char *)a1[649];
    do
    {
      v9 = v8 >> 1;
      v10 = (unsigned int *)&v7[16 * (v8 >> 1)];
      v12 = *v10;
      v11 = (char *)(v10 + 4);
      v8 += ~(v8 >> 1);
      if (v12 < a2)
        v7 = v11;
      else
        v8 = v9;
    }
    while (v8);
  }
  if (v7 == v6 || *(_DWORD *)v7 != a2)
    v7 = (char *)a1[650];
  v13 = (char *)a1[661];
  v14 = (char *)a1[662];
  v15 = v13;
  if (v14 != v13)
  {
    v16 = (v14 - v13) >> 4;
    v15 = (char *)a1[661];
    do
    {
      v17 = v16 >> 1;
      v18 = (unsigned int *)&v15[16 * (v16 >> 1)];
      v20 = *v18;
      v19 = (char *)(v18 + 4);
      v16 += ~(v16 >> 1);
      if (v20 < a2)
        v15 = v19;
      else
        v16 = v17;
    }
    while (v16);
  }
  if (v15 == v14)
    return 0;
  result = 0;
  if (v7 != v6 && *(_DWORD *)v15 == a2)
  {
    if (!*(_BYTE *)(*((_QWORD *)v7 + 1) + 128) || !*(_BYTE *)(*((_QWORD *)v15 + 1) + 104))
      return 0;
    if (v6 != v5)
    {
      v21 = (v6 - v5) >> 4;
      do
      {
        v22 = v21 >> 1;
        v23 = (unsigned int *)&v5[16 * (v21 >> 1)];
        v25 = *v23;
        v24 = (char *)(v23 + 4);
        v21 += ~(v21 >> 1);
        if (v25 < a3)
          v5 = v24;
        else
          v21 = v22;
      }
      while (v21);
    }
    if (v5 == v6 || *(_DWORD *)v5 != a3)
      v5 = v6;
    if (v14 != v13)
    {
      v26 = (v14 - v13) >> 4;
      do
      {
        v27 = v26 >> 1;
        v28 = (unsigned int *)&v13[16 * (v26 >> 1)];
        v30 = *v28;
        v29 = (char *)(v28 + 4);
        v26 += ~(v26 >> 1);
        if (v30 < a3)
          v13 = v29;
        else
          v26 = v27;
      }
      while (v26);
    }
    if (v13 == v14)
      return 0;
    result = 0;
    if (v5 != v6 && *(_DWORD *)v13 == a3)
    {
      if (*(_BYTE *)(*((_QWORD *)v5 + 1) + 128))
        return *(_BYTE *)(*((_QWORD *)v13 + 1) + 104) != 0;
      return 0;
    }
  }
  return result;
}

uint64_t sub_20FBEE4FC(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD *v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v6 = *(_OWORD *)(a2 + 64);
  v5 = *(_OWORD *)(a2 + 80);
  v7 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v8 = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = v8;
  v10 = *(_OWORD *)(a2 + 160);
  v9 = *(_OWORD *)(a2 + 176);
  v11 = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = v10;
  *(_OWORD *)(a1 + 176) = v9;
  *(_OWORD *)(a1 + 144) = v11;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  v12 = *(_OWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 200) = v12;
  if (a1 != a2)
  {
    sub_20FBEE8A0(a1 + 224, *(_QWORD **)(a2 + 224), (_QWORD *)(a2 + 232));
    *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
    sub_20FBEEC2C((_QWORD *)(a1 + 248), *(uint64_t **)(a2 + 264), 0);
    *(_DWORD *)(a1 + 320) = *(_DWORD *)(a2 + 320);
    sub_20FBEED88((_QWORD *)(a1 + 288), *(uint64_t **)(a2 + 304), 0);
    *(_DWORD *)(a1 + 360) = *(_DWORD *)(a2 + 360);
    sub_20FBEEF8C((_QWORD *)(a1 + 328), *(uint64_t **)(a2 + 344), 0);
  }
  *(_DWORD *)(a1 + 368) = *(_DWORD *)(a2 + 368);
  v13 = (_OWORD *)(a1 + 376);
  v14 = (_OWORD *)(a2 + 376);
  if (*(unsigned __int8 *)(a1 + 472) != *(unsigned __int8 *)(a2 + 472))
  {
    if (!*(_BYTE *)(a1 + 472))
    {
      *v13 = *v14;
      v29 = *(_OWORD *)(a2 + 392);
      v30 = *(_OWORD *)(a2 + 408);
      v31 = *(_OWORD *)(a2 + 424);
      *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
      *(_OWORD *)(a1 + 408) = v30;
      *(_OWORD *)(a1 + 424) = v31;
      *(_OWORD *)(a1 + 392) = v29;
      v32 = *(_OWORD *)(a2 + 448);
      *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
      *(_OWORD *)(a1 + 448) = v32;
      *(_BYTE *)(a1 + 472) = 1;
      v19 = a1 + 480;
      v20 = a2 + 480;
      v21 = *(unsigned __int8 *)(a1 + 576);
      if (v21 != *(unsigned __int8 *)(a2 + 576))
        goto LABEL_14;
LABEL_10:
      if (v21)
      {
        *(_OWORD *)v19 = *(_OWORD *)v20;
        v22 = *(_OWORD *)(v20 + 16);
        v23 = *(_OWORD *)(v20 + 32);
        v24 = *(_OWORD *)(v20 + 48);
        *(_QWORD *)(v19 + 64) = *(_QWORD *)(v20 + 64);
        *(_OWORD *)(v19 + 32) = v23;
        *(_OWORD *)(v19 + 48) = v24;
        *(_OWORD *)(v19 + 16) = v22;
        v25 = *(_OWORD *)(a2 + 552);
        *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
        *(_OWORD *)(a1 + 552) = v25;
        v26 = a1 + 584;
        v27 = a2 + 584;
        v28 = *(unsigned __int8 *)(a1 + 680);
        if (v28 == *(unsigned __int8 *)(a2 + 680))
          goto LABEL_17;
        goto LABEL_20;
      }
LABEL_16:
      v26 = a1 + 584;
      v27 = a2 + 584;
      v28 = *(unsigned __int8 *)(a1 + 680);
      if (v28 == *(unsigned __int8 *)(a2 + 680))
        goto LABEL_17;
LABEL_20:
      if (v28)
      {
        *(_BYTE *)(a1 + 680) = 0;
      }
      else
      {
        *(_OWORD *)v26 = *(_OWORD *)v27;
        v41 = *(_OWORD *)(v27 + 16);
        v42 = *(_OWORD *)(v27 + 32);
        v43 = *(_OWORD *)(v27 + 48);
        *(_QWORD *)(v26 + 64) = *(_QWORD *)(v27 + 64);
        *(_OWORD *)(v26 + 32) = v42;
        *(_OWORD *)(v26 + 48) = v43;
        *(_OWORD *)(v26 + 16) = v41;
        v44 = *(_OWORD *)(a2 + 656);
        *(_QWORD *)(a1 + 672) = *(_QWORD *)(a2 + 672);
        *(_OWORD *)(a1 + 656) = v44;
        *(_BYTE *)(a1 + 680) = 1;
      }
      goto LABEL_23;
    }
    *(_BYTE *)(a1 + 472) = 0;
LABEL_9:
    v19 = a1 + 480;
    v20 = a2 + 480;
    v21 = *(unsigned __int8 *)(a1 + 576);
    if (v21 != *(unsigned __int8 *)(a2 + 576))
      goto LABEL_14;
    goto LABEL_10;
  }
  if (!*(_BYTE *)(a1 + 472))
    goto LABEL_9;
  *v13 = *v14;
  v15 = *(_OWORD *)(a2 + 392);
  v16 = *(_OWORD *)(a2 + 408);
  v17 = *(_OWORD *)(a2 + 424);
  *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
  *(_OWORD *)(a1 + 408) = v16;
  *(_OWORD *)(a1 + 424) = v17;
  *(_OWORD *)(a1 + 392) = v15;
  v18 = *(_OWORD *)(a2 + 448);
  *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
  *(_OWORD *)(a1 + 448) = v18;
  v19 = a1 + 480;
  v20 = a2 + 480;
  v21 = *(unsigned __int8 *)(a1 + 576);
  if (v21 == *(unsigned __int8 *)(a2 + 576))
    goto LABEL_10;
LABEL_14:
  if (v21)
  {
    *(_BYTE *)(a1 + 576) = 0;
    goto LABEL_16;
  }
  *(_OWORD *)v19 = *(_OWORD *)v20;
  v37 = *(_OWORD *)(v20 + 16);
  v38 = *(_OWORD *)(v20 + 32);
  v39 = *(_OWORD *)(v20 + 48);
  *(_QWORD *)(v19 + 64) = *(_QWORD *)(v20 + 64);
  *(_OWORD *)(v19 + 32) = v38;
  *(_OWORD *)(v19 + 48) = v39;
  *(_OWORD *)(v19 + 16) = v37;
  v40 = *(_OWORD *)(a2 + 552);
  *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
  *(_OWORD *)(a1 + 552) = v40;
  *(_BYTE *)(a1 + 576) = 1;
  v26 = a1 + 584;
  v27 = a2 + 584;
  v28 = *(unsigned __int8 *)(a1 + 680);
  if (v28 != *(unsigned __int8 *)(a2 + 680))
    goto LABEL_20;
LABEL_17:
  if (v28)
  {
    *(_OWORD *)v26 = *(_OWORD *)v27;
    v33 = *(_OWORD *)(v27 + 16);
    v34 = *(_OWORD *)(v27 + 32);
    v35 = *(_OWORD *)(v27 + 48);
    *(_QWORD *)(v26 + 64) = *(_QWORD *)(v27 + 64);
    *(_OWORD *)(v26 + 32) = v34;
    *(_OWORD *)(v26 + 48) = v35;
    *(_OWORD *)(v26 + 16) = v33;
    v36 = *(_OWORD *)(a2 + 656);
    *(_QWORD *)(a1 + 672) = *(_QWORD *)(a2 + 672);
    *(_OWORD *)(a1 + 656) = v36;
  }
LABEL_23:
  v45 = *(_QWORD *)(a2 + 688);
  *(_BYTE *)(a1 + 696) = *(_BYTE *)(a2 + 696);
  *(_QWORD *)(a1 + 688) = v45;
  *(_DWORD *)(a1 + 704) = *(_DWORD *)(a2 + 704);
  v46 = *(_OWORD *)(a2 + 712);
  *(_QWORD *)(a1 + 728) = *(_QWORD *)(a2 + 728);
  *(_OWORD *)(a1 + 712) = v46;
  sub_20FBEF100(a1 + 736, (__int128 *)(a2 + 736));
  *(_DWORD *)(a1 + 1576) = *(_DWORD *)(a2 + 1576);
  *(_OWORD *)(a1 + 1584) = *(_OWORD *)(a2 + 1584);
  v47 = *(_OWORD *)(a2 + 1600);
  v48 = *(_OWORD *)(a2 + 1616);
  v49 = *(_OWORD *)(a2 + 1632);
  *(_QWORD *)(a1 + 1648) = *(_QWORD *)(a2 + 1648);
  *(_OWORD *)(a1 + 1632) = v49;
  *(_OWORD *)(a1 + 1616) = v48;
  *(_OWORD *)(a1 + 1600) = v47;
  v50 = *(_OWORD *)(a2 + 1656);
  *(_QWORD *)(a1 + 1672) = *(_QWORD *)(a2 + 1672);
  *(_OWORD *)(a1 + 1656) = v50;
  *(_BYTE *)(a1 + 1680) = *(_BYTE *)(a2 + 1680);
  return a1;
}

void sub_20FBEE8A0(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  unsigned int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t **v21;
  uint64_t v22;
  _QWORD *v23;
  BOOL v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *i;
  uint64_t ***v28;
  char *v29;
  uint64_t *v30;
  unsigned int v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t **v36;
  uint64_t **v37;
  uint64_t **v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t *v42;

  v4 = a2;
  if (*(_QWORD *)(a1 + 16))
  {
    v6 = *(uint64_t **)a1;
    v8 = (uint64_t **)(a1 + 8);
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)a1 = a1 + 8;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v9 = v6[1] ? (uint64_t *)v6[1] : v6;
    if (v9)
    {
      v10 = (uint64_t *)v9[2];
      if (v10)
      {
        v11 = (uint64_t *)*v10;
        if ((uint64_t *)*v10 == v9)
        {
          *v10 = 0;
          while (1)
          {
            v42 = (uint64_t *)v10[1];
            if (!v42)
              break;
            do
            {
              v10 = v42;
              v42 = (uint64_t *)*v42;
            }
            while (v42);
          }
        }
        else
        {
          for (v10[1] = 0; v11; v11 = (uint64_t *)v10[1])
          {
            do
            {
              v10 = v11;
              v11 = (uint64_t *)*v11;
            }
            while (v11);
          }
        }
      }
      if (a2 != a3)
      {
        v12 = v9;
        v13 = v4;
        while (1)
        {
          v9 = v10;
          v14 = *((_DWORD *)v13 + 8);
          *((_DWORD *)v12 + 8) = v14;
          *(_OWORD *)(v12 + 5) = *(_OWORD *)(v13 + 5);
          v15 = *(_OWORD *)(v13 + 7);
          v16 = *(_OWORD *)(v13 + 9);
          v17 = *(_OWORD *)(v13 + 11);
          v12[13] = v13[13];
          *(_OWORD *)(v12 + 11) = v17;
          *(_OWORD *)(v12 + 9) = v16;
          *(_OWORD *)(v12 + 7) = v15;
          v18 = *((_OWORD *)v13 + 7);
          v12[16] = v13[16];
          *((_OWORD *)v12 + 7) = v18;
          v19 = *v8;
          v20 = (uint64_t **)(a1 + 8);
          v21 = (uint64_t **)(a1 + 8);
          if (*v8)
            break;
LABEL_14:
          *v12 = 0;
          v12[1] = 0;
          v12[2] = (uint64_t)v20;
          *v21 = v12;
          v22 = **(_QWORD **)a1;
          if (v22)
            goto LABEL_15;
LABEL_16:
          sub_20E868578(*(uint64_t **)(a1 + 8), v12);
          ++*(_QWORD *)(a1 + 16);
          if (v10)
          {
            v10 = (uint64_t *)v10[2];
            if (v10)
            {
              v25 = (uint64_t *)*v10;
              if ((uint64_t *)*v10 == v9)
              {
                *v10 = 0;
                while (1)
                {
                  v26 = (uint64_t *)v10[1];
                  if (!v26)
                    break;
                  do
                  {
                    v10 = v26;
                    v26 = (uint64_t *)*v26;
                  }
                  while (v26);
                }
              }
              else
              {
                for (v10[1] = 0; v25; v25 = (uint64_t *)v10[1])
                {
                  do
                  {
                    v10 = v25;
                    v25 = (uint64_t *)*v25;
                  }
                  while (v25);
                }
              }
            }
          }
          else
          {
            v10 = 0;
          }
          v23 = (_QWORD *)v13[1];
          if (v23)
          {
            do
            {
              v4 = v23;
              v23 = (_QWORD *)*v23;
            }
            while (v23);
          }
          else
          {
            do
            {
              v4 = (_QWORD *)v13[2];
              v24 = *v4 == (_QWORD)v13;
              v13 = v4;
            }
            while (!v24);
          }
          if (v9)
          {
            v12 = v9;
            v13 = v4;
            if (v4 != a3)
              continue;
          }
          goto LABEL_42;
        }
        do
        {
          while (1)
          {
            v20 = (uint64_t **)v19;
            if (v14 >= *((_DWORD *)v19 + 8))
              break;
            v19 = (uint64_t *)*v19;
            v21 = v20;
            if (!*v20)
              goto LABEL_14;
          }
          v19 = (uint64_t *)v19[1];
        }
        while (v19);
        v21 = v20 + 1;
        *v12 = 0;
        v12[1] = 0;
        v12[2] = (uint64_t)v20;
        v20[1] = v12;
        v22 = **(_QWORD **)a1;
        if (!v22)
          goto LABEL_16;
LABEL_15:
        *(_QWORD *)a1 = v22;
        v12 = *v21;
        goto LABEL_16;
      }
LABEL_42:
      sub_20E86872C(a1, v9);
      if (v10)
      {
        for (i = (uint64_t *)v10[2]; i; i = (uint64_t *)i[2])
          v10 = i;
        sub_20E86872C(a1, v10);
      }
    }
  }
  if (v4 != a3)
  {
    v28 = (uint64_t ***)(a1 + 8);
    while (1)
    {
      v29 = (char *)operator new(0x88uLL);
      v30 = (uint64_t *)v29;
      v31 = *((_DWORD *)v4 + 8);
      *((_DWORD *)v29 + 8) = v31;
      v32 = *(_OWORD *)(v4 + 7);
      v33 = *(_OWORD *)(v4 + 9);
      v34 = *(_OWORD *)(v4 + 11);
      *((_QWORD *)v29 + 13) = v4[13];
      *(_OWORD *)(v29 + 88) = v34;
      *(_OWORD *)(v29 + 72) = v33;
      *(_OWORD *)(v29 + 56) = v32;
      *(_OWORD *)(v29 + 40) = *(_OWORD *)(v4 + 5);
      v35 = *((_OWORD *)v4 + 7);
      *((_QWORD *)v29 + 16) = v4[16];
      *((_OWORD *)v29 + 7) = v35;
      v36 = *v28;
      v37 = (uint64_t **)(a1 + 8);
      v38 = (uint64_t **)(a1 + 8);
      if (*v28)
        break;
LABEL_50:
      *(_QWORD *)v29 = 0;
      *((_QWORD *)v29 + 1) = 0;
      *((_QWORD *)v29 + 2) = v37;
      *v38 = (uint64_t *)v29;
      v39 = **(_QWORD **)a1;
      if (v39)
        goto LABEL_51;
LABEL_52:
      sub_20E868578(*(uint64_t **)(a1 + 8), v30);
      ++*(_QWORD *)(a1 + 16);
      v40 = (_QWORD *)v4[1];
      if (v40)
      {
        do
        {
          v41 = v40;
          v40 = (_QWORD *)*v40;
        }
        while (v40);
      }
      else
      {
        do
        {
          v41 = (_QWORD *)v4[2];
          v24 = *v41 == (_QWORD)v4;
          v4 = v41;
        }
        while (!v24);
      }
      v4 = v41;
      if (v41 == a3)
        return;
    }
    do
    {
      while (1)
      {
        v37 = v36;
        if (v31 >= *((_DWORD *)v36 + 8))
          break;
        v36 = (uint64_t **)*v36;
        v38 = v37;
        if (!*v37)
          goto LABEL_50;
      }
      v36 = (uint64_t **)v36[1];
    }
    while (v36);
    v38 = v37 + 1;
    *(_QWORD *)v29 = 0;
    *((_QWORD *)v29 + 1) = 0;
    *((_QWORD *)v29 + 2) = v37;
    v37[1] = (uint64_t *)v29;
    v39 = **(_QWORD **)a1;
    if (!v39)
      goto LABEL_52;
LABEL_51:
    *(_QWORD *)a1 = v39;
    v30 = *v38;
    goto LABEL_52;
  }
}

void sub_20FBEEC2C(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t i;
  uint64_t *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t *v11;
  char *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t *v15;

  v6 = a1[1];
  if (!v6)
    goto LABEL_7;
  for (i = 0; i != v6; *(_QWORD *)(*a1 + 8 * i++) = 0)
    ;
  v8 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      *((_DWORD *)v8 + 4) = *((_DWORD *)a2 + 4);
      v9 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(v8 + 5) = *(_OWORD *)(a2 + 5);
      *(_OWORD *)(v8 + 3) = v9;
      v10 = a2[7];
      *((_BYTE *)v8 + 64) = *((_BYTE *)a2 + 64);
      v8[7] = v10;
      v11 = (uint64_t *)*v8;
      sub_20EC1D308(a1, (unsigned int *)v8);
      a2 = (uint64_t *)*a2;
      v8 = v11;
      if (!v11)
        goto LABEL_7;
    }
    do
    {
      v15 = (uint64_t *)*v8;
      operator delete(v8);
      v8 = v15;
    }
    while (v15);
  }
  else
  {
LABEL_7:
    while (a2 != a3)
    {
      v12 = (char *)operator new(0x48uLL);
      *(_QWORD *)v12 = 0;
      v13 = *((unsigned int *)a2 + 4);
      *((_DWORD *)v12 + 4) = v13;
      v14 = *(_OWORD *)(a2 + 5);
      *(_OWORD *)(v12 + 24) = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(v12 + 40) = v14;
      *(_OWORD *)(v12 + 56) = *(_OWORD *)(a2 + 7);
      *((_QWORD *)v12 + 1) = v13;
      sub_20EC1D308(a1, (unsigned int *)v12);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_20FBEED40(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_20FBEED60(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20FBEED74(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20FBEED88(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t i;
  uint64_t *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t *v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t *v32;

  v6 = a1[1];
  if (!v6)
    goto LABEL_7;
  for (i = 0; i != v6; *(_QWORD *)(*a1 + 8 * i++) = 0)
    ;
  v8 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      *((_DWORD *)v8 + 4) = *((_DWORD *)a2 + 4);
      v9 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(v8 + 5) = *(_OWORD *)(a2 + 5);
      *(_OWORD *)(v8 + 3) = v9;
      v10 = *(_OWORD *)(a2 + 7);
      v11 = *(_OWORD *)(a2 + 9);
      v12 = *(_OWORD *)(a2 + 11);
      *(_OWORD *)(v8 + 13) = *(_OWORD *)(a2 + 13);
      *(_OWORD *)(v8 + 11) = v12;
      *(_OWORD *)(v8 + 9) = v11;
      *(_OWORD *)(v8 + 7) = v10;
      v13 = *(_OWORD *)(a2 + 15);
      v14 = *(_OWORD *)(a2 + 17);
      v15 = *(_OWORD *)(a2 + 19);
      *(_OWORD *)(v8 + 21) = *(_OWORD *)(a2 + 21);
      *(_OWORD *)(v8 + 19) = v15;
      *(_OWORD *)(v8 + 17) = v14;
      *(_OWORD *)(v8 + 15) = v13;
      v16 = *(_OWORD *)(a2 + 23);
      v17 = *(_OWORD *)(a2 + 25);
      v18 = *(_OWORD *)(a2 + 27);
      *(_OWORD *)(v8 + 29) = *(_OWORD *)(a2 + 29);
      *(_OWORD *)(v8 + 27) = v18;
      *(_OWORD *)(v8 + 25) = v17;
      *(_OWORD *)(v8 + 23) = v16;
      v19 = (uint64_t *)*v8;
      sub_20EC1D308(a1, (unsigned int *)v8);
      a2 = (uint64_t *)*a2;
      v8 = v19;
      if (!v19)
        goto LABEL_7;
    }
    do
    {
      v32 = (uint64_t *)*v8;
      operator delete(v8);
      v8 = v32;
    }
    while (v32);
  }
  else
  {
LABEL_7:
    while (a2 != a3)
    {
      v20 = (char *)operator new(0xF8uLL);
      *(_QWORD *)v20 = 0;
      v21 = *((unsigned int *)a2 + 4);
      *((_DWORD *)v20 + 4) = v21;
      v22 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(v20 + 40) = *(_OWORD *)(a2 + 5);
      *(_OWORD *)(v20 + 24) = v22;
      v23 = *(_OWORD *)(a2 + 7);
      v24 = *(_OWORD *)(a2 + 9);
      v25 = *(_OWORD *)(a2 + 11);
      *(_OWORD *)(v20 + 104) = *(_OWORD *)(a2 + 13);
      *(_OWORD *)(v20 + 88) = v25;
      *(_OWORD *)(v20 + 72) = v24;
      *(_OWORD *)(v20 + 56) = v23;
      v26 = *(_OWORD *)(a2 + 15);
      v27 = *(_OWORD *)(a2 + 17);
      v28 = *(_OWORD *)(a2 + 19);
      *(_OWORD *)(v20 + 168) = *(_OWORD *)(a2 + 21);
      *(_OWORD *)(v20 + 152) = v28;
      *(_OWORD *)(v20 + 136) = v27;
      *(_OWORD *)(v20 + 120) = v26;
      v29 = *(_OWORD *)(a2 + 23);
      v30 = *(_OWORD *)(a2 + 25);
      v31 = *(_OWORD *)(a2 + 27);
      *(_OWORD *)(v20 + 232) = *(_OWORD *)(a2 + 29);
      *(_OWORD *)(v20 + 216) = v31;
      *(_OWORD *)(v20 + 200) = v30;
      *(_OWORD *)(v20 + 184) = v29;
      *((_QWORD *)v20 + 1) = v21;
      sub_20EC1D308(a1, (unsigned int *)v20);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_20FBEEF44(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_20FBEEF64(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20FBEEF78(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20FBEEF8C(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t i;
  uint64_t *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t *v12;
  char *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t *v18;

  v6 = a1[1];
  if (!v6)
    goto LABEL_7;
  for (i = 0; i != v6; *(_QWORD *)(*a1 + 8 * i++) = 0)
    ;
  v8 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      *((_DWORD *)v8 + 4) = *((_DWORD *)a2 + 4);
      *(_OWORD *)(v8 + 3) = *(_OWORD *)(a2 + 3);
      v9 = *(_OWORD *)(a2 + 5);
      v10 = *(_OWORD *)(a2 + 7);
      v11 = *(_OWORD *)(a2 + 9);
      v8[11] = a2[11];
      *(_OWORD *)(v8 + 9) = v11;
      *(_OWORD *)(v8 + 7) = v10;
      *(_OWORD *)(v8 + 5) = v9;
      v12 = (uint64_t *)*v8;
      sub_20EC1D308(a1, (unsigned int *)v8);
      a2 = (uint64_t *)*a2;
      v8 = v12;
      if (!v12)
        goto LABEL_7;
    }
    do
    {
      v18 = (uint64_t *)*v8;
      operator delete(v8);
      v8 = v18;
    }
    while (v18);
  }
  else
  {
LABEL_7:
    while (a2 != a3)
    {
      v13 = (char *)operator new(0x60uLL);
      *(_QWORD *)v13 = 0;
      v14 = *((unsigned int *)a2 + 4);
      *((_DWORD *)v13 + 4) = v14;
      *(_OWORD *)(v13 + 24) = *(_OWORD *)(a2 + 3);
      v15 = *(_OWORD *)(a2 + 5);
      v16 = *(_OWORD *)(a2 + 7);
      v17 = *(_OWORD *)(a2 + 9);
      *((_QWORD *)v13 + 11) = a2[11];
      *(_OWORD *)(v13 + 72) = v17;
      *(_OWORD *)(v13 + 56) = v16;
      *(_OWORD *)(v13 + 40) = v15;
      *((_QWORD *)v13 + 1) = v14;
      sub_20EC1D308(a1, (unsigned int *)v13);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_20FBEF0B8(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_20FBEF0D8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20FBEF0EC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_20FBEF100(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  void *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  if (*(unsigned __int8 *)(a1 + 832) == *((unsigned __int8 *)a2 + 832))
  {
    if (*(_BYTE *)(a1 + 832))
    {
      v4 = *a2;
      v5 = a2[2];
      *(_OWORD *)(a1 + 16) = a2[1];
      *(_OWORD *)(a1 + 32) = v5;
      *(_OWORD *)a1 = v4;
      v6 = a2[3];
      v7 = a2[4];
      v8 = a2[6];
      *(_OWORD *)(a1 + 80) = a2[5];
      *(_OWORD *)(a1 + 96) = v8;
      *(_OWORD *)(a1 + 48) = v6;
      *(_OWORD *)(a1 + 64) = v7;
      v9 = a2[7];
      v10 = a2[8];
      v11 = a2[9];
      *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
      *(_OWORD *)(a1 + 128) = v10;
      *(_OWORD *)(a1 + 144) = v11;
      *(_OWORD *)(a1 + 112) = v9;
      memcpy((void *)(a1 + 168), (char *)a2 + 168, 0x120uLL);
      memcpy((void *)(a1 + 456), (char *)a2 + 456, 0x120uLL);
      if ((__int128 *)a1 != a2)
        sub_20EE62A1C((char **)(a1 + 744), *((_QWORD *)a2 + 93), *((_QWORD *)a2 + 94), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)a2 + 94) - *((_QWORD *)a2 + 93)) >> 3));
      v12 = a2[48];
      *(_QWORD *)(a1 + 784) = *((_QWORD *)a2 + 98);
      *(_OWORD *)(a1 + 768) = v12;
      v13 = *(__int128 *)((char *)a2 + 792);
      *(_QWORD *)(a1 + 808) = *((_QWORD *)a2 + 101);
      *(_OWORD *)(a1 + 792) = v13;
      result = (__n128)a2[51];
      *(__n128 *)(a1 + 816) = result;
    }
  }
  else if (*(_BYTE *)(a1 + 832))
  {
    v15 = *(void **)(a1 + 744);
    if (v15)
    {
      *(_QWORD *)(a1 + 752) = v15;
      operator delete(v15);
    }
    *(_BYTE *)(a1 + 832) = 0;
  }
  else
  {
    v16 = *a2;
    v17 = a2[2];
    *(_OWORD *)(a1 + 16) = a2[1];
    *(_OWORD *)(a1 + 32) = v17;
    *(_OWORD *)a1 = v16;
    v18 = a2[3];
    v19 = a2[4];
    v20 = a2[6];
    *(_OWORD *)(a1 + 80) = a2[5];
    *(_OWORD *)(a1 + 96) = v20;
    *(_OWORD *)(a1 + 48) = v18;
    *(_OWORD *)(a1 + 64) = v19;
    v21 = a2[7];
    v22 = a2[8];
    v23 = a2[9];
    *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
    *(_OWORD *)(a1 + 128) = v22;
    *(_OWORD *)(a1 + 144) = v23;
    *(_OWORD *)(a1 + 112) = v21;
    memcpy((void *)(a1 + 168), (char *)a2 + 168, 0x120uLL);
    memcpy((void *)(a1 + 456), (char *)a2 + 456, 0x120uLL);
    *(_QWORD *)(a1 + 744) = 0;
    *(_QWORD *)(a1 + 760) = 0;
    *(_QWORD *)(a1 + 752) = 0;
    v24 = *((_QWORD *)a2 + 93);
    v25 = *((_QWORD *)a2 + 94);
    v26 = v25 - v24;
    if (v25 != v24)
    {
      v27 = 0x6DB6DB6DB6DB6DB7 * (v26 >> 3);
      if (v27 >= 0x492492492492493)
        sub_20EABADD4();
      v28 = (char *)operator new(v26);
      v29 = 0;
      *(_QWORD *)(a1 + 744) = v28;
      *(_QWORD *)(a1 + 752) = v28;
      *(_QWORD *)(a1 + 760) = &v28[56 * v27];
      do
      {
        v30 = v24 + v29;
        v31 = &v28[v29];
        *(_QWORD *)v31 = *(_QWORD *)(v24 + v29);
        v32 = *(_OWORD *)(v24 + v29 + 8);
        *((_QWORD *)v31 + 3) = *(_QWORD *)(v24 + v29 + 24);
        *(_OWORD *)(v31 + 8) = v32;
        v33 = *(_OWORD *)(v24 + v29 + 32);
        *((_QWORD *)v31 + 6) = *(_QWORD *)(v24 + v29 + 48);
        *((_OWORD *)v31 + 2) = v33;
        v29 += 56;
      }
      while (v30 + 56 != v25);
      *(_QWORD *)(a1 + 752) = &v28[v29];
    }
    v34 = a2[48];
    *(_QWORD *)(a1 + 784) = *((_QWORD *)a2 + 98);
    *(_OWORD *)(a1 + 768) = v34;
    v35 = *(__int128 *)((char *)a2 + 792);
    *(_QWORD *)(a1 + 808) = *((_QWORD *)a2 + 101);
    *(_OWORD *)(a1 + 792) = v35;
    result = (__n128)a2[51];
    *(__n128 *)(a1 + 816) = result;
    *(_BYTE *)(a1 + 832) = 1;
  }
  return result;
}

void sub_20FBEF390(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 752) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FBEF3AC(int64x2_t *a1, unint64_t *a2, __int128 *a3, __int128 *a4, std::__shared_weak_count *a5, __int128 *a6)
{
  std::__shared_weak_count *v6;
  unsigned int *v7;
  unint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int *v29;
  _DWORD *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int *v38;
  _DWORD *v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t *v49;
  unint64_t *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  unint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  __int128 v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t *v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  unint64_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  unint64_t v119;
  __int128 v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t *v126;
  unint64_t v127;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  char *v133;
  uint64_t v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  char *v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t *v166;
  unint64_t *v167;
  uint64_t v168;
  unint64_t *v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  uint64_t v175;
  __int128 v176;
  __int128 v177;
  uint64_t v178;
  unint64_t *v179;
  unint64_t v180;
  __int128 v181;
  __int128 v182;
  uint64_t v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t *v195;
  unint64_t v196;
  unint64_t *v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  unint64_t v203;
  __int128 v204;
  __int128 v205;
  unint64_t v206;
  unint64_t *v207;
  unint64_t v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t *v223;
  unint64_t v224;
  unint64_t *v225;
  uint64_t v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  unint64_t *v233;
  unint64_t v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  unint64_t *v238;
  __int128 v239;
  uint64_t v240;
  int64_t v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  unint64_t v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  uint64_t v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  uint64_t v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  uint64_t v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  uint64_t v290;
  unint64_t v291;
  char v292;
  __int128 v293;
  char v294;
  unint64_t v295;
  char v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  uint64_t v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  uint64_t v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  unint64_t v324;
  uint64_t v325;

  v6 = a5;
  v7 = (unsigned int *)a3;
  v325 = *MEMORY[0x24BDAC8D0];
  v9 = *a2;
  v10 = (unint64_t *)a1[66].i64[1];
  v11 = (unint64_t *)a1[67].i64[0];
  if (v10 == v11)
  {
    v11 = (unint64_t *)a1[66].i64[1];
  }
  else if (*(v11 - 63) >= v9)
  {
    v12 = 0xEFBEFBEFBEFBEFBFLL * (v11 - v10);
    do
    {
      v13 = v12 >> 1;
      v14 = &v10[63 * (v12 >> 1)];
      v15 = *v14;
      v16 = v14 + 63;
      v12 += ~(v12 >> 1);
      if (v15 < v9)
        v10 = v16;
      else
        v12 = v13;
    }
    while (v12);
    if (v10 != v11)
    {
      v11 = v10;
      if (*v10 == v9)
        return 0;
    }
  }
  if (a5)
  {
    p_shared_owners = (unint64_t *)&a5->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  v250 = *((_OWORD *)a2 + 8);
  v251 = *((_OWORD *)a2 + 9);
  v252 = *((_OWORD *)a2 + 10);
  v20 = a2[22];
  v246 = *((_OWORD *)a2 + 4);
  v247 = *((_OWORD *)a2 + 5);
  v248 = *((_OWORD *)a2 + 6);
  v249 = *((_OWORD *)a2 + 7);
  v242 = *(_OWORD *)a2;
  v243 = *((_OWORD *)a2 + 1);
  v244 = *((_OWORD *)a2 + 2);
  v245 = *((_OWORD *)a2 + 3);
  v254 = *(_OWORD *)(a2 + 23);
  a2[23] = 0;
  a2[24] = 0;
  v253 = v20;
  *(_QWORD *)&v255 = 0;
  *(_QWORD *)&v272 = a4;
  *((_QWORD *)&v272 + 1) = a5;
  if (a5)
  {
    v21 = (unint64_t *)&a5->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    do
      v23 = __ldaxr(v21);
    while (__stlxr(v23 - 1, v21));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))a5->__on_zero_shared)(a5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v24 = *v7;
  v25 = a1->i64[1];
  v26 = a1[1].i64[0];
  if (v26 != v25)
  {
    v27 = (v26 - v25) >> 4;
    do
    {
      v28 = v27 >> 1;
      v29 = (unsigned int *)(v25 + 16 * (v27 >> 1));
      v31 = *v29;
      v30 = v29 + 4;
      v27 += ~(v27 >> 1);
      if (v31 < v24)
        v25 = (uint64_t)v30;
      else
        v27 = v28;
    }
    while (v27);
  }
  if (v25 == v26 || *(_DWORD *)v25 != v24)
    goto LABEL_58;
  v32 = *(_QWORD *)(v25 + 8);
  *(_QWORD *)&v255 = v32;
  ++*(_DWORD *)(v32 + 8);
  v33 = v7[1];
  v34 = a1[6].i64[1];
  v35 = a1[7].i64[0];
  if (v35 != v34)
  {
    v36 = (v35 - v34) >> 4;
    do
    {
      v37 = v36 >> 1;
      v38 = (unsigned int *)(v34 + 16 * (v36 >> 1));
      v40 = *v38;
      v39 = v38 + 4;
      v36 += ~(v36 >> 1);
      if (v40 < v33)
        v34 = (uint64_t)v39;
      else
        v36 = v37;
    }
    while (v36);
  }
  if (v34 == v35 || *(_DWORD *)v34 != v33)
  {
LABEL_58:
    if ((_QWORD)v255)
      --*(_DWORD *)(v255 + 8);
    v17 = 0;
    goto LABEL_72;
  }
  v41 = *(_QWORD *)(v34 + 8);
  *((_QWORD *)&v255 + 1) = v41;
  ++*(_DWORD *)(v41 + 8);
  if (*(_BYTE *)(v32 + 20) || *(_BYTE *)(v41 + 20))
  {
    v42 = *((_QWORD *)&v254 + 1);
    v273 = v254;
    *((_QWORD *)&v254 + 1) = 0;
    v280 = v261;
    v281 = v262;
    v274 = v255;
    v275 = v256;
    v276 = v257;
    v277 = v258;
    v278 = v259;
    v279 = v260;
    v288 = v269;
    v289 = v270;
    v286 = v267;
    v287 = v268;
    v284 = v265;
    v285 = v266;
    v283 = v264;
    v282 = v263;
    v290 = v271;
    v292 = 0;
    v291 = 0xBFF0000000000000;
    v43 = (std::__shared_weak_count *)*((_QWORD *)&v272 + 1);
    v293 = v272;
    *((_QWORD *)&v272 + 1) = 0;
    v294 = 0;
    v44 = (unint64_t *)a1[67].i64[0];
    if (v44 != v11 && *v11 == v9)
      goto LABEL_146;
    a4 = &v273;
    a6 = &v274;
    a5 = (std::__shared_weak_count *)&v275;
    a3 = &v283;
    a2 = &v291;
    v45 = a1[66].i64[1];
    v46 = (uint64_t)v11 - v45;
    v241 = 0xEFBEFBEFBEFBEFBFLL * (((uint64_t)v11 - v45) >> 3);
    v47 = a1[67].u64[1];
    if ((unint64_t)v44 < v47)
    {
      if (v11 == v44)
      {
        *v44 = v9;
        v134 = v45 + 8 * (((uint64_t)v11 - v45) >> 3);
        *(_OWORD *)(v134 + 8) = v242;
        *(_OWORD *)(v134 + 24) = v243;
        *(_OWORD *)(v134 + 56) = v245;
        *(_OWORD *)(v134 + 40) = v244;
        *(_OWORD *)(v134 + 120) = v249;
        *(_OWORD *)(v134 + 104) = v248;
        *(_OWORD *)(v134 + 88) = v247;
        *(_OWORD *)(v134 + 72) = v246;
        *(_OWORD *)(v134 + 168) = v252;
        *(_OWORD *)(v134 + 152) = v251;
        *(_OWORD *)(v134 + 136) = v250;
        *(_QWORD *)(v134 + 184) = v253;
        *(_QWORD *)(v134 + 192) = v254;
        *(_QWORD *)(v134 + 200) = v42;
        v273 = 0uLL;
        *(_OWORD *)(v134 + 208) = v274;
        v136 = v280;
        v135 = v281;
        v137 = v279;
        *(_QWORD *)(v134 + 336) = v282;
        *(_OWORD *)(v134 + 304) = v136;
        *(_OWORD *)(v134 + 320) = v135;
        *(_OWORD *)(v134 + 288) = v137;
        v138 = v275;
        v139 = v276;
        v140 = v278;
        *(_OWORD *)(v134 + 256) = v277;
        *(_OWORD *)(v134 + 272) = v140;
        *(_OWORD *)(v134 + 224) = v138;
        *(_OWORD *)(v134 + 240) = v139;
        v142 = v288;
        v141 = v289;
        v143 = v287;
        *(_QWORD *)(v134 + 456) = v290;
        *(_OWORD *)(v134 + 424) = v142;
        *(_OWORD *)(v134 + 440) = v141;
        *(_OWORD *)(v134 + 408) = v143;
        v144 = v283;
        v145 = v284;
        v146 = v286;
        *(_OWORD *)(v134 + 376) = v285;
        *(_OWORD *)(v134 + 392) = v146;
        *(_OWORD *)(v134 + 344) = v144;
        *(_OWORD *)(v134 + 360) = v145;
        v147 = v291;
        *(_BYTE *)(v134 + 472) = v292;
        *(_QWORD *)(v134 + 464) = v147;
        *(_QWORD *)(v134 + 480) = v272;
        *(_QWORD *)(v134 + 488) = v43;
        v293 = 0uLL;
        *(_BYTE *)(v134 + 496) = 0;
        a1[67].i64[0] = (uint64_t)(v44 + 63);
      }
      else
      {
        v297 = v242;
        v322 = v251;
        v323 = v252;
        v324 = v253;
        v318 = v247;
        v319 = v248;
        v321 = v250;
        v320 = v249;
        v314 = v243;
        v315 = v244;
        v317 = v246;
        v316 = v245;
        v273 = 0uLL;
        v239 = v274;
        v310 = v260;
        v311 = v261;
        v312 = v262;
        v313 = v263;
        v306 = v256;
        v307 = v257;
        v308 = v258;
        v309 = v259;
        v305 = v271;
        v304 = v270;
        v303 = v269;
        v302 = v268;
        v301 = v267;
        v300 = v266;
        v299 = v265;
        v298 = v264;
        v296 = 0;
        v295 = 0xBFF0000000000000;
        v48 = v44 - 63;
        v49 = v44;
        v293 = 0uLL;
        if ((unint64_t)v44 >= 0x1F8)
        {
          v50 = v44 - 63;
          v49 = v44;
          do
          {
            *v49 = *v50;
            *(_OWORD *)(v49 + 1) = *(_OWORD *)(v50 + 1);
            v51 = *(_OWORD *)(v50 + 11);
            v52 = *(_OWORD *)(v50 + 13);
            v53 = *(_OWORD *)(v50 + 15);
            *(_OWORD *)(v49 + 9) = *(_OWORD *)(v50 + 9);
            *(_OWORD *)(v49 + 15) = v53;
            *(_OWORD *)(v49 + 13) = v52;
            *(_OWORD *)(v49 + 11) = v51;
            v54 = *(_OWORD *)(v50 + 19);
            v55 = *(_OWORD *)(v50 + 21);
            v56 = v50[23];
            *(_OWORD *)(v49 + 17) = *(_OWORD *)(v50 + 17);
            v49[23] = v56;
            *(_OWORD *)(v49 + 21) = v55;
            *(_OWORD *)(v49 + 19) = v54;
            v57 = *(_OWORD *)(v50 + 3);
            v58 = *(_OWORD *)(v50 + 5);
            *(_OWORD *)(v49 + 7) = *(_OWORD *)(v50 + 7);
            *(_OWORD *)(v49 + 5) = v58;
            *(_OWORD *)(v49 + 3) = v57;
            *((_OWORD *)v49 + 12) = *((_OWORD *)v50 + 12);
            v50[24] = 0;
            v50[25] = 0;
            *((_OWORD *)v49 + 13) = *((_OWORD *)v50 + 13);
            v60 = *((_OWORD *)v50 + 19);
            v59 = *((_OWORD *)v50 + 20);
            v61 = *((_OWORD *)v50 + 18);
            v49[42] = v50[42];
            *((_OWORD *)v49 + 19) = v60;
            *((_OWORD *)v49 + 20) = v59;
            *((_OWORD *)v49 + 18) = v61;
            v62 = *((_OWORD *)v50 + 14);
            v63 = *((_OWORD *)v50 + 15);
            v64 = *((_OWORD *)v50 + 17);
            *((_OWORD *)v49 + 16) = *((_OWORD *)v50 + 16);
            *((_OWORD *)v49 + 17) = v64;
            *((_OWORD *)v49 + 14) = v62;
            *((_OWORD *)v49 + 15) = v63;
            v66 = *(_OWORD *)(v50 + 53);
            v65 = *(_OWORD *)(v50 + 55);
            v67 = *(_OWORD *)(v50 + 51);
            v49[57] = v50[57];
            *(_OWORD *)(v49 + 53) = v66;
            *(_OWORD *)(v49 + 55) = v65;
            *(_OWORD *)(v49 + 51) = v67;
            v68 = *(_OWORD *)(v50 + 43);
            v69 = *(_OWORD *)(v50 + 45);
            v70 = *(_OWORD *)(v50 + 49);
            *(_OWORD *)(v49 + 47) = *(_OWORD *)(v50 + 47);
            *(_OWORD *)(v49 + 49) = v70;
            *(_OWORD *)(v49 + 43) = v68;
            *(_OWORD *)(v49 + 45) = v69;
            v71 = v50[58];
            *((_BYTE *)v49 + 472) = *((_BYTE *)v50 + 472);
            v49[58] = v71;
            *((_OWORD *)v49 + 30) = *((_OWORD *)v50 + 30);
            v50[60] = 0;
            v50[61] = 0;
            *((_BYTE *)v49 + 496) = *((_BYTE *)v50 + 496);
            v49 += 63;
            v50 += 63;
          }
          while (v50 < v44);
        }
        v240 = v42;
        v72 = v45;
        a1[67].i64[0] = (uint64_t)v49;
        if (v44 != v11 + 63)
        {
          do
          {
            v93 = v48 - 63;
            v94 = v44 - 63;
            *v94 = *(v48 - 63);
            *(_OWORD *)(v94 + 1) = *((_OWORD *)v48 - 31);
            v95 = *((_OWORD *)v48 - 26);
            v96 = *((_OWORD *)v48 - 25);
            v97 = *((_OWORD *)v48 - 24);
            *(_OWORD *)(v94 + 9) = *((_OWORD *)v48 - 27);
            *(_OWORD *)(v94 + 15) = v97;
            *(_OWORD *)(v94 + 13) = v96;
            *(_OWORD *)(v94 + 11) = v95;
            v98 = *((_OWORD *)v48 - 22);
            v99 = *((_OWORD *)v48 - 21);
            v100 = *(v48 - 40);
            *(_OWORD *)(v94 + 17) = *((_OWORD *)v48 - 23);
            v94[23] = v100;
            *(_OWORD *)(v94 + 21) = v99;
            *(_OWORD *)(v94 + 19) = v98;
            v101 = *((_OWORD *)v48 - 30);
            v102 = *((_OWORD *)v48 - 29);
            *(_OWORD *)(v94 + 7) = *((_OWORD *)v48 - 28);
            *(_OWORD *)(v94 + 5) = v102;
            *(_OWORD *)(v94 + 3) = v101;
            v103 = *(_OWORD *)(v48 - 39);
            v93[24] = 0;
            v93[25] = 0;
            v104 = (std::__shared_weak_count *)*(v44 - 38);
            *((_OWORD *)v94 + 12) = v103;
            if (v104)
            {
              v105 = (unint64_t *)&v104->__shared_owners_;
              do
                v106 = __ldaxr(v105);
              while (__stlxr(v106 - 1, v105));
              if (!v106)
              {
                ((void (*)(std::__shared_weak_count *, unint64_t *, __int128 *, __int128 *, std::__shared_weak_count *, __int128 *))v104->__on_zero_shared)(v104, a2, a3, a4, a5, a6);
                std::__shared_weak_count::__release_weak(v104);
              }
            }
            *(v44 - 37) = *(v48 - 37);
            *(v44 - 36) = *(v48 - 36);
            v107 = *(_OWORD *)(v48 - 35);
            v108 = *(_OWORD *)(v48 - 33);
            v109 = *(_OWORD *)(v48 - 31);
            *(_OWORD *)(v44 - 29) = *(_OWORD *)(v48 - 29);
            *(_OWORD *)(v44 - 31) = v109;
            *(_OWORD *)(v44 - 35) = v107;
            *(_OWORD *)(v44 - 33) = v108;
            v110 = *(_OWORD *)(v48 - 27);
            v111 = *(_OWORD *)(v48 - 25);
            v112 = *(_OWORD *)(v48 - 23);
            *(v44 - 21) = *(v48 - 21);
            *(_OWORD *)(v44 - 23) = v112;
            *(_OWORD *)(v44 - 25) = v111;
            *(_OWORD *)(v44 - 27) = v110;
            v114 = *((_OWORD *)v48 - 5);
            v113 = *((_OWORD *)v48 - 4);
            v115 = *((_OWORD *)v48 - 6);
            *(v44 - 6) = *(v48 - 6);
            *((_OWORD *)v44 - 5) = v114;
            *((_OWORD *)v44 - 4) = v113;
            *((_OWORD *)v44 - 6) = v115;
            v116 = *((_OWORD *)v48 - 10);
            v117 = *((_OWORD *)v48 - 9);
            v118 = *((_OWORD *)v48 - 7);
            *((_OWORD *)v44 - 8) = *((_OWORD *)v48 - 8);
            *((_OWORD *)v44 - 7) = v118;
            *((_OWORD *)v44 - 10) = v116;
            *((_OWORD *)v44 - 9) = v117;
            v119 = *(v48 - 5);
            *((_BYTE *)v44 - 32) = *((_BYTE *)v48 - 32);
            *(v44 - 5) = v119;
            v120 = *(_OWORD *)(v48 - 3);
            *(v48 - 3) = 0;
            *(v48 - 2) = 0;
            v121 = (std::__shared_weak_count *)*(v44 - 2);
            *(_OWORD *)(v44 - 3) = v120;
            if (v121)
            {
              v122 = (unint64_t *)&v121->__shared_owners_;
              do
                v123 = __ldaxr(v122);
              while (__stlxr(v123 - 1, v122));
              if (!v123)
              {
                ((void (*)(std::__shared_weak_count *, unint64_t *, __int128 *, __int128 *, std::__shared_weak_count *, __int128 *))v121->__on_zero_shared)(v121, a2, a3, a4, a5, a6);
                std::__shared_weak_count::__release_weak(v121);
              }
            }
            *((_BYTE *)v44 - 8) = *((_BYTE *)v48 - 8);
            v44 -= 63;
            v48 -= 63;
          }
          while (v93 != v11);
        }
        *v11 = v9;
        v73 = v72 + 504 * v241;
        *(_OWORD *)(v73 + 8) = v297;
        *(_OWORD *)(v73 + 136) = v321;
        *(_OWORD *)(v73 + 152) = v322;
        *(_OWORD *)(v73 + 168) = v323;
        *(_QWORD *)(v73 + 184) = v324;
        *(_OWORD *)(v73 + 72) = v317;
        *(_OWORD *)(v73 + 88) = v318;
        *(_OWORD *)(v73 + 104) = v319;
        *(_OWORD *)(v73 + 120) = v320;
        *(_OWORD *)(v73 + 24) = v314;
        *(_OWORD *)(v73 + 40) = v315;
        *(_OWORD *)(v73 + 56) = v316;
        v74 = *(std::__shared_weak_count **)(v73 + 200);
        *(_QWORD *)(v73 + 192) = v254;
        *(_QWORD *)(v73 + 200) = v240;
        if (v74)
        {
          v75 = (unint64_t *)&v74->__shared_owners_;
          do
            v76 = __ldaxr(v75);
          while (__stlxr(v76 - 1, v75));
          if (!v76)
          {
            ((void (*)(std::__shared_weak_count *, unint64_t *, __int128 *, __int128 *, std::__shared_weak_count *, __int128 *))v74->__on_zero_shared)(v74, a2, a3, a4, a5, a6);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
        v77 = v310;
        v78 = v72 + 504 * v241;
        v79 = v312;
        *(_OWORD *)(v78 + 304) = v311;
        *(_OWORD *)(v78 + 320) = v79;
        v80 = v306;
        v81 = v307;
        *(_OWORD *)(v78 + 208) = v239;
        *(_OWORD *)(v78 + 224) = v80;
        v82 = v308;
        v83 = v309;
        *(_OWORD *)(v78 + 240) = v81;
        *(_OWORD *)(v78 + 256) = v82;
        *(_QWORD *)(v78 + 336) = v313;
        *(_OWORD *)(v78 + 272) = v83;
        *(_OWORD *)(v78 + 288) = v77;
        v84 = v301;
        *(_OWORD *)(v78 + 376) = v300;
        *(_OWORD *)(v78 + 392) = v84;
        v85 = v299;
        *(_OWORD *)(v78 + 344) = v298;
        *(_OWORD *)(v78 + 360) = v85;
        v86 = v305;
        v87 = v304;
        v88 = v302;
        *(_OWORD *)(v78 + 424) = v303;
        *(_OWORD *)(v78 + 440) = v87;
        *(_OWORD *)(v78 + 408) = v88;
        *(_BYTE *)(v78 + 472) = v296;
        v89 = v295;
        *(_QWORD *)(v78 + 456) = v86;
        *(_QWORD *)(v78 + 464) = v89;
        v90 = *(std::__shared_weak_count **)(v78 + 488);
        *(_QWORD *)(v78 + 480) = v272;
        *(_QWORD *)(v78 + 488) = v43;
        if (v90)
        {
          v91 = (unint64_t *)&v90->__shared_owners_;
          do
            v92 = __ldaxr(v91);
          while (__stlxr(v92 - 1, v91));
          if (!v92)
          {
            ((void (*)(std::__shared_weak_count *, unint64_t *, __int128 *, __int128 *, std::__shared_weak_count *, __int128 *))v90->__on_zero_shared)(v90, a2, a3, a4, a5, a6);
            std::__shared_weak_count::__release_weak(v90);
          }
        }
        *(_BYTE *)(v72 + 504 * v241 + 496) = 0;
      }
LABEL_145:
      v43 = (std::__shared_weak_count *)*((_QWORD *)&v293 + 1);
LABEL_146:
      if (v43)
      {
        v233 = (unint64_t *)&v43->__shared_owners_;
        do
          v234 = __ldaxr(v233);
        while (__stlxr(v234 - 1, v233));
        if (!v234)
        {
          ((void (*)(std::__shared_weak_count *, unint64_t *, __int128 *, __int128 *, std::__shared_weak_count *, __int128 *))v43->__on_zero_shared)(v43, a2, a3, a4, a5, a6);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      v235 = (std::__shared_weak_count *)*((_QWORD *)&v273 + 1);
      if (*((_QWORD *)&v273 + 1))
      {
        v236 = (unint64_t *)(*((_QWORD *)&v273 + 1) + 8);
        do
          v237 = __ldaxr(v236);
        while (__stlxr(v237 - 1, v236));
        if (!v237)
        {
          ((void (*)(std::__shared_weak_count *, unint64_t *, __int128 *, __int128 *, std::__shared_weak_count *, __int128 *))v235->__on_zero_shared)(v235, a2, a3, a4, a5, a6);
          std::__shared_weak_count::__release_weak(v235);
        }
      }
      a1[101].i8[2] = 0;
      a1[101].i8[0] = 0;
      a1[100] = vaddq_s64(a1[100], (int64x2_t)xmmword_2103B4900);
      v17 = 1;
      goto LABEL_72;
    }
    v129 = 0xEFBEFBEFBEFBEFBFLL * (((uint64_t)v44 - v45) >> 3) + 1;
    if (v129 > 0x82082082082082)
      sub_20E867F44();
    v130 = 0xEFBEFBEFBEFBEFBFLL * ((uint64_t)(v47 - v45) >> 3);
    v131 = 0xDF7DF7DF7DF7DF7ELL * ((uint64_t)(v47 - v45) >> 3);
    if (v131 > v129)
      v129 = v131;
    if (v130 >= 0x41041041041041)
      v132 = 0x82082082082082;
    else
      v132 = v129;
    *(_QWORD *)&v316 = (char *)a1 + 1080;
    v238 = (unint64_t *)v45;
    if (v132)
    {
      if (v132 > 0x82082082082082)
        sub_20E877A38();
      v133 = (char *)operator new(504 * v132);
    }
    else
    {
      v133 = 0;
    }
    v148 = (uint64_t)&v133[504 * v241];
    *(_QWORD *)&v314 = v133;
    *((_QWORD *)&v314 + 1) = v148;
    *(_QWORD *)&v315 = v148;
    *((_QWORD *)&v315 + 1) = &v133[504 * v132];
    if (v241 == v132)
    {
      if (v46 >= 1)
      {
        v149 = v241 + 2;
        if (v241 >= -1)
          v149 = v241 + 1;
        v150 = v149 >> 1;
        v151 = sub_20F5B64A0(v148, v148, v148 - 504 * (v149 >> 1));
        v148 = *((_QWORD *)&v314 + 1) - 504 * v150;
        *(_QWORD *)&v315 = v151;
        *((_QWORD *)&v314 + 1) = v148;
        goto LABEL_107;
      }
      if (v238 == v11)
        v152 = 1;
      else
        v152 = 2 * v241;
      if (v152 > 0x82082082082082)
        sub_20E877A38();
      v153 = (char *)operator new(504 * v152);
      v148 = (uint64_t)&v153[504 * (v152 >> 2)];
      *(_QWORD *)&v314 = v153;
      *((_QWORD *)&v314 + 1) = v148;
      *(_QWORD *)&v315 = v148;
      *((_QWORD *)&v315 + 1) = &v153[504 * v152];
      if (v133)
        operator delete(v133);
    }
    v151 = v148;
LABEL_107:
    *(_QWORD *)v151 = v9;
    *(_OWORD *)(v151 + 8) = v242;
    *(_OWORD *)(v151 + 120) = v249;
    *(_OWORD *)(v151 + 104) = v248;
    *(_OWORD *)(v151 + 88) = v247;
    *(_OWORD *)(v151 + 72) = v246;
    *(_QWORD *)(v151 + 184) = v253;
    *(_OWORD *)(v151 + 168) = v252;
    *(_OWORD *)(v151 + 152) = v251;
    *(_OWORD *)(v151 + 136) = v250;
    *(_OWORD *)(v151 + 24) = v243;
    *(_OWORD *)(v151 + 40) = v244;
    *(_OWORD *)(v151 + 56) = v245;
    *(_OWORD *)(v151 + 192) = v273;
    v273 = 0uLL;
    *(_OWORD *)(v151 + 208) = v274;
    *(_QWORD *)(v151 + 336) = v282;
    v154 = v281;
    v155 = v279;
    *(_OWORD *)(v151 + 304) = v280;
    *(_OWORD *)(v151 + 320) = v154;
    v156 = v276;
    *(_OWORD *)(v151 + 224) = v275;
    *(_OWORD *)(v151 + 240) = v156;
    v157 = v278;
    *(_OWORD *)(v151 + 256) = v277;
    *(_OWORD *)(v151 + 272) = v157;
    *(_OWORD *)(v151 + 288) = v155;
    v158 = v283;
    v159 = v284;
    v160 = v286;
    *(_OWORD *)(v151 + 376) = v285;
    *(_OWORD *)(v151 + 392) = v160;
    *(_OWORD *)(v151 + 344) = v158;
    *(_OWORD *)(v151 + 360) = v159;
    v161 = v287;
    v162 = v288;
    v163 = v289;
    *(_QWORD *)(v151 + 456) = v290;
    *(_OWORD *)(v151 + 424) = v162;
    *(_OWORD *)(v151 + 440) = v163;
    *(_OWORD *)(v151 + 408) = v161;
    v164 = v291;
    *(_BYTE *)(v151 + 472) = v292;
    *(_QWORD *)(v151 + 464) = v164;
    *(_OWORD *)(v151 + 480) = v293;
    v293 = 0uLL;
    *(_BYTE *)(v151 + 496) = v294;
    v165 = v151 + 504;
    v166 = (unint64_t *)a1[66].i64[1];
    if (v166 == v11)
    {
      v168 = v148;
    }
    else
    {
      v167 = v11;
      do
      {
        v168 = v148 - 504;
        v169 = v167 - 63;
        *(_QWORD *)v168 = *(v167 - 63);
        *(_OWORD *)(v168 + 8) = *((_OWORD *)v167 - 31);
        v170 = *((_OWORD *)v167 - 26);
        v171 = *((_OWORD *)v167 - 25);
        v172 = *((_OWORD *)v167 - 24);
        *(_OWORD *)(v168 + 72) = *((_OWORD *)v167 - 27);
        *(_OWORD *)(v168 + 120) = v172;
        *(_OWORD *)(v168 + 104) = v171;
        *(_OWORD *)(v168 + 88) = v170;
        v173 = *((_OWORD *)v167 - 22);
        v174 = *((_OWORD *)v167 - 21);
        v175 = *(v167 - 40);
        *(_OWORD *)(v168 + 136) = *((_OWORD *)v167 - 23);
        *(_QWORD *)(v168 + 184) = v175;
        *(_OWORD *)(v168 + 168) = v174;
        *(_OWORD *)(v168 + 152) = v173;
        v176 = *((_OWORD *)v167 - 30);
        v177 = *((_OWORD *)v167 - 29);
        *(_OWORD *)(v168 + 56) = *((_OWORD *)v167 - 28);
        *(_OWORD *)(v168 + 40) = v177;
        *(_OWORD *)(v168 + 24) = v176;
        *(_QWORD *)(v168 + 192) = *(v167 - 39);
        v178 = *(v167 - 38);
        *(_QWORD *)(v168 + 200) = v178;
        if (v178)
        {
          v179 = (unint64_t *)(v178 + 8);
          do
            v180 = __ldxr(v179);
          while (__stxr(v180 + 1, v179));
        }
        *(_OWORD *)(v148 - 296) = *(_OWORD *)(v167 - 37);
        v181 = *(_OWORD *)(v167 - 25);
        v182 = *(_OWORD *)(v167 - 23);
        v183 = *(v167 - 21);
        *(_OWORD *)(v148 - 216) = *(_OWORD *)(v167 - 27);
        *(_QWORD *)(v148 - 168) = v183;
        *(_OWORD *)(v148 - 184) = v182;
        *(_OWORD *)(v148 - 200) = v181;
        v184 = *(_OWORD *)(v167 - 35);
        v185 = *(_OWORD *)(v167 - 33);
        v186 = *(_OWORD *)(v167 - 31);
        *(_OWORD *)(v148 - 232) = *(_OWORD *)(v167 - 29);
        *(_OWORD *)(v148 - 248) = v186;
        *(_OWORD *)(v148 - 280) = v184;
        *(_OWORD *)(v148 - 264) = v185;
        v188 = *((_OWORD *)v167 - 5);
        v187 = *((_OWORD *)v167 - 4);
        v189 = *((_OWORD *)v167 - 6);
        *(_QWORD *)(v148 - 48) = *(v167 - 6);
        *(_OWORD *)(v148 - 80) = v188;
        *(_OWORD *)(v148 - 64) = v187;
        *(_OWORD *)(v148 - 96) = v189;
        v190 = *((_OWORD *)v167 - 10);
        v191 = *((_OWORD *)v167 - 9);
        v192 = *((_OWORD *)v167 - 7);
        *(_OWORD *)(v148 - 128) = *((_OWORD *)v167 - 8);
        *(_OWORD *)(v148 - 112) = v192;
        *(_OWORD *)(v148 - 160) = v190;
        *(_OWORD *)(v148 - 144) = v191;
        v193 = *(v167 - 5);
        *(_BYTE *)(v148 - 32) = *((_BYTE *)v167 - 32);
        *(_QWORD *)(v148 - 40) = v193;
        *(_QWORD *)(v148 - 24) = *(v167 - 3);
        v194 = *(v167 - 2);
        *(_QWORD *)(v148 - 16) = v194;
        if (v194)
        {
          v195 = (unint64_t *)(v194 + 8);
          do
            v196 = __ldxr(v195);
          while (__stxr(v196 + 1, v195));
        }
        *(_BYTE *)(v148 - 8) = *((_BYTE *)v167 - 8);
        v148 -= 504;
        v167 -= 63;
      }
      while (v169 != v166);
    }
    *((_QWORD *)&v314 + 1) = v168;
    v197 = (unint64_t *)a1[67].i64[0];
    if (v197 != v11)
    {
      do
      {
        *(_QWORD *)v165 = *v11;
        *(_OWORD *)(v165 + 8) = *(_OWORD *)(v11 + 1);
        v198 = *(_OWORD *)(v11 + 11);
        v199 = *(_OWORD *)(v11 + 13);
        v200 = *(_OWORD *)(v11 + 15);
        *(_OWORD *)(v165 + 72) = *(_OWORD *)(v11 + 9);
        *(_OWORD *)(v165 + 120) = v200;
        *(_OWORD *)(v165 + 104) = v199;
        *(_OWORD *)(v165 + 88) = v198;
        v201 = *(_OWORD *)(v11 + 19);
        v202 = *(_OWORD *)(v11 + 21);
        v203 = v11[23];
        *(_OWORD *)(v165 + 136) = *(_OWORD *)(v11 + 17);
        *(_QWORD *)(v165 + 184) = v203;
        *(_OWORD *)(v165 + 168) = v202;
        *(_OWORD *)(v165 + 152) = v201;
        v204 = *(_OWORD *)(v11 + 3);
        v205 = *(_OWORD *)(v11 + 5);
        *(_OWORD *)(v165 + 56) = *(_OWORD *)(v11 + 7);
        *(_OWORD *)(v165 + 40) = v205;
        *(_OWORD *)(v165 + 24) = v204;
        *(_QWORD *)(v165 + 192) = v11[24];
        v206 = v11[25];
        *(_QWORD *)(v165 + 200) = v206;
        if (v206)
        {
          v207 = (unint64_t *)(v206 + 8);
          do
            v208 = __ldxr(v207);
          while (__stxr(v208 + 1, v207));
        }
        *(_OWORD *)(v165 + 208) = *((_OWORD *)v11 + 13);
        v210 = *((_OWORD *)v11 + 19);
        v209 = *((_OWORD *)v11 + 20);
        v211 = *((_OWORD *)v11 + 18);
        *(_QWORD *)(v165 + 336) = v11[42];
        *(_OWORD *)(v165 + 304) = v210;
        *(_OWORD *)(v165 + 320) = v209;
        *(_OWORD *)(v165 + 288) = v211;
        v212 = *((_OWORD *)v11 + 14);
        v213 = *((_OWORD *)v11 + 15);
        v214 = *((_OWORD *)v11 + 17);
        *(_OWORD *)(v165 + 256) = *((_OWORD *)v11 + 16);
        *(_OWORD *)(v165 + 272) = v214;
        *(_OWORD *)(v165 + 224) = v212;
        *(_OWORD *)(v165 + 240) = v213;
        v216 = *(_OWORD *)(v11 + 53);
        v215 = *(_OWORD *)(v11 + 55);
        v217 = *(_OWORD *)(v11 + 51);
        *(_QWORD *)(v165 + 456) = v11[57];
        *(_OWORD *)(v165 + 424) = v216;
        *(_OWORD *)(v165 + 440) = v215;
        *(_OWORD *)(v165 + 408) = v217;
        v218 = *(_OWORD *)(v11 + 43);
        v219 = *(_OWORD *)(v11 + 45);
        v220 = *(_OWORD *)(v11 + 49);
        *(_OWORD *)(v165 + 376) = *(_OWORD *)(v11 + 47);
        *(_OWORD *)(v165 + 392) = v220;
        *(_OWORD *)(v165 + 344) = v218;
        *(_OWORD *)(v165 + 360) = v219;
        v221 = v11[58];
        *(_BYTE *)(v165 + 472) = *((_BYTE *)v11 + 472);
        *(_QWORD *)(v165 + 464) = v221;
        *(_QWORD *)(v165 + 480) = v11[60];
        v222 = v11[61];
        *(_QWORD *)(v165 + 488) = v222;
        if (v222)
        {
          v223 = (unint64_t *)(v222 + 8);
          do
            v224 = __ldxr(v223);
          while (__stxr(v224 + 1, v223));
        }
        *(_BYTE *)(v165 + 496) = *((_BYTE *)v11 + 496);
        v11 += 63;
        v165 += 504;
      }
      while (v11 != v197);
      v168 = *((_QWORD *)&v314 + 1);
      v11 = (unint64_t *)a1[67].i64[0];
    }
    v225 = (unint64_t *)a1[66].i64[1];
    a1[66].i64[1] = v168;
    a1[67].i64[0] = v165;
    v226 = a1[67].i64[1];
    a1[67].i64[1] = *((_QWORD *)&v315 + 1);
    *((_QWORD *)&v315 + 1) = v226;
    *((_QWORD *)&v314 + 1) = v225;
    *(_QWORD *)&v314 = v225;
    if (v11 != v225)
    {
      do
      {
        *(_QWORD *)&v315 = v11 - 63;
        v227 = (std::__shared_weak_count *)*(v11 - 2);
        if (v227)
        {
          v228 = (unint64_t *)&v227->__shared_owners_;
          do
            v229 = __ldaxr(v228);
          while (__stlxr(v229 - 1, v228));
          if (!v229)
          {
            ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
            std::__shared_weak_count::__release_weak(v227);
          }
        }
        v230 = (std::__shared_weak_count *)*(v11 - 38);
        if (v230)
        {
          v231 = (unint64_t *)&v230->__shared_owners_;
          do
            v232 = __ldaxr(v231);
          while (__stlxr(v232 - 1, v231));
          if (!v232)
          {
            ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
            std::__shared_weak_count::__release_weak(v230);
          }
        }
        v11 = (unint64_t *)v315;
      }
      while ((unint64_t *)v315 != v225);
      v11 = (unint64_t *)v314;
    }
    if (v11)
      operator delete(v11);
    goto LABEL_145;
  }
  v17 = 0;
  --*(_DWORD *)(v32 + 8);
  --*(_DWORD *)(v41 + 8);
LABEL_72:
  if (*((_QWORD *)&v272 + 1))
  {
    v124 = (unint64_t *)(*((_QWORD *)&v272 + 1) + 8);
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v272 + 1) + 16))(*((_QWORD *)&v272 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v272 + 1));
    }
  }
  if (*((_QWORD *)&v254 + 1))
  {
    v126 = (unint64_t *)(*((_QWORD *)&v254 + 1) + 8);
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v254 + 1) + 16))(*((_QWORD *)&v254 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v254 + 1));
    }
  }
  return v17;
}

void sub_20FBF05A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20F626D08((uint64_t)&STACK[0x560]);
  sub_20F4EE818((uint64_t)&STACK[0x248]);
  sub_20F4EE8C4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FBF05C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20F4EE818((uint64_t)&STACK[0x248]);
  sub_20F4EE8C4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20FBF05E0(int64x2_t *a1, __int128 *a2, __int128 *a3, __int128 *a4, std::__shared_weak_count *a5, __int128 *a6)
{
  std::__shared_weak_count *v6;
  unsigned int *v7;
  unint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int *v28;
  _DWORD *v29;
  unsigned int v30;
  uint64_t v31;
  __int128 v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t *v39;
  unint64_t *v40;
  __int128 v41;
  __int128 v42;
  unint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  unint64_t v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t *v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  unint64_t v76;
  __int128 v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  unint64_t v121;
  unint64_t *v122;
  __int128 v123;
  __int128 v124;
  unint64_t v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  unint64_t v131;
  unint64_t *v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t *v145;
  unint64_t v146;
  unint64_t *v147;
  unint64_t v148;
  uint64_t v150;
  unint64_t *v151;
  int64_t v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  uint64_t v158;
  __int128 v159;
  uint64_t v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  uint64_t v174;
  __int128 v175;
  uint64_t v176;
  __int128 v177;
  uint64_t v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  unint64_t v185;
  char v186;
  __int128 v187;
  char v188;
  unint64_t v189;
  char v190;
  __int128 v191;
  uint64_t v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  uint64_t v204;
  uint64_t v205;

  v6 = a5;
  v7 = (unsigned int *)a3;
  v205 = *MEMORY[0x24BDAC8D0];
  v9 = *(_QWORD *)a2;
  v10 = (unint64_t *)a1[68].i64[0];
  v11 = (unint64_t *)a1[68].i64[1];
  if (v10 == v11)
  {
    v11 = (unint64_t *)a1[68].i64[0];
  }
  else if (*(v11 - 35) >= v9)
  {
    v12 = 0xAF8AF8AF8AF8AF8BLL * (v11 - v10);
    do
    {
      v13 = v12 >> 1;
      v14 = &v10[35 * (v12 >> 1)];
      v15 = *v14;
      v16 = v14 + 35;
      v12 += ~(v12 >> 1);
      if (v15 < v9)
        v10 = v16;
      else
        v12 = v13;
    }
    while (v12);
    if (v10 != v11)
    {
      v11 = v10;
      if (*v10 == v9)
        return 0;
    }
  }
  if (a5)
  {
    p_shared_owners = (unint64_t *)&a5->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  v155 = a2[2];
  v156 = a2[3];
  v157 = a2[4];
  v158 = *((_QWORD *)a2 + 10);
  v153 = *a2;
  v154 = a2[1];
  v159 = *(__int128 *)((char *)a2 + 88);
  v160 = *((_QWORD *)a2 + 13);
  v161 = a2[7];
  *((_QWORD *)a2 + 14) = 0;
  *((_QWORD *)a2 + 15) = 0;
  *(_QWORD *)&v168 = a4;
  *((_QWORD *)&v168 + 1) = a5;
  if (a5)
  {
    v20 = (unint64_t *)&a5->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))a5->__on_zero_shared)(a5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v23 = *v7;
  v24 = a1->i64[1];
  v25 = a1[1].i64[0];
  if (v25 != v24)
  {
    v26 = (v25 - v24) >> 4;
    do
    {
      v27 = v26 >> 1;
      v28 = (unsigned int *)(v24 + 16 * (v26 >> 1));
      v30 = *v28;
      v29 = v28 + 4;
      v26 += ~(v26 >> 1);
      if (v30 < v23)
        v24 = (uint64_t)v29;
      else
        v26 = v27;
    }
    while (v26);
  }
  if (v24 == v25 || *(_DWORD *)v24 != v23)
  {
    v17 = 0;
  }
  else
  {
    v31 = *(_QWORD *)(v24 + 8);
    ++*(_DWORD *)(v31 + 8);
    if (*(_BYTE *)(v31 + 20))
    {
      v169 = v153;
      v171 = v155;
      v172 = v156;
      v173 = v157;
      v174 = v158;
      v170 = v154;
      v175 = v159;
      v32 = v161;
      v176 = v160;
      v177 = v161;
      v161 = 0uLL;
      v178 = v31;
      v179 = v162;
      v180 = v163;
      v181 = v164;
      v182 = v165;
      v183 = v166;
      v184 = v167;
      v186 = 0;
      v185 = 0xBFF0000000000000;
      v33 = (std::__shared_weak_count *)*((_QWORD *)&v168 + 1);
      v187 = v168;
      *((_QWORD *)&v168 + 1) = 0;
      v188 = 0;
      v34 = (unint64_t *)a1[68].i64[1];
      if (v34 != v11 && *v11 == v9)
        goto LABEL_109;
      a6 = &v169;
      a5 = (std::__shared_weak_count *)&v175;
      a3 = &v177;
      a4 = &v179;
      a2 = &v187;
      v35 = a1[68].i64[0];
      v36 = (uint64_t)v11 - v35;
      v152 = 0xAF8AF8AF8AF8AF8BLL * (((uint64_t)v11 - v35) >> 3);
      v37 = a1[69].u64[0];
      if ((unint64_t)v34 < v37)
      {
        if (v11 == v34)
        {
          *v34 = v9;
          v85 = v35 + 8 * (((uint64_t)v11 - v35) >> 3);
          *(_OWORD *)(v85 + 8) = v169;
          v87 = v172;
          v86 = v173;
          v88 = v174;
          *(_OWORD *)(v85 + 40) = v171;
          *(_QWORD *)(v85 + 88) = v88;
          *(_OWORD *)(v85 + 72) = v86;
          *(_OWORD *)(v85 + 56) = v87;
          *(_OWORD *)(v85 + 24) = v170;
          v89 = v176;
          *(_OWORD *)(v85 + 96) = v175;
          *(_QWORD *)(v85 + 112) = v89;
          *(_OWORD *)(v85 + 120) = v32;
          v177 = 0uLL;
          *(_QWORD *)(v85 + 136) = v31;
          v90 = v179;
          v91 = v181;
          *(_OWORD *)(v85 + 160) = v180;
          *(_OWORD *)(v85 + 176) = v91;
          *(_OWORD *)(v85 + 144) = v90;
          v92 = v182;
          v93 = v184;
          *(_OWORD *)(v85 + 208) = v183;
          *(_OWORD *)(v85 + 224) = v93;
          *(_OWORD *)(v85 + 192) = v92;
          v94 = v185;
          *(_BYTE *)(v85 + 248) = v186;
          *(_QWORD *)(v85 + 240) = v94;
          *(_QWORD *)(v85 + 256) = v168;
          *(_QWORD *)(v85 + 264) = v33;
          v187 = 0uLL;
          *(_BYTE *)(v85 + 272) = 0;
          a1[68].i64[1] = (uint64_t)(v34 + 35);
        }
        else
        {
          v202 = v156;
          v203 = v157;
          v204 = v158;
          v200 = v154;
          v201 = v155;
          v192 = v160;
          v191 = v159;
          v177 = 0uLL;
          v198 = v163;
          v199 = v164;
          v197 = v162;
          v195 = v166;
          v196 = v167;
          v193 = v153;
          v194 = v165;
          v190 = 0;
          v189 = 0xBFF0000000000000;
          v38 = v34 - 35;
          v39 = v34;
          v187 = 0uLL;
          if ((unint64_t)v34 >= 0x118)
          {
            v40 = v34 - 35;
            v39 = v34;
            do
            {
              *v39 = *v40;
              *(_OWORD *)(v39 + 1) = *(_OWORD *)(v40 + 1);
              v41 = *(_OWORD *)(v40 + 7);
              v42 = *(_OWORD *)(v40 + 9);
              v43 = v40[11];
              *(_OWORD *)(v39 + 5) = *(_OWORD *)(v40 + 5);
              v39[11] = v43;
              *(_OWORD *)(v39 + 9) = v42;
              *(_OWORD *)(v39 + 7) = v41;
              *(_OWORD *)(v39 + 3) = *(_OWORD *)(v40 + 3);
              v44 = *((_OWORD *)v40 + 6);
              v39[14] = v40[14];
              *((_OWORD *)v39 + 6) = v44;
              *(_OWORD *)(v39 + 15) = *(_OWORD *)(v40 + 15);
              v40[15] = 0;
              v40[16] = 0;
              v39[17] = v40[17];
              v45 = *((_OWORD *)v40 + 9);
              v46 = *((_OWORD *)v40 + 11);
              *((_OWORD *)v39 + 10) = *((_OWORD *)v40 + 10);
              *((_OWORD *)v39 + 11) = v46;
              *((_OWORD *)v39 + 9) = v45;
              v47 = *((_OWORD *)v40 + 12);
              v48 = *((_OWORD *)v40 + 14);
              *((_OWORD *)v39 + 13) = *((_OWORD *)v40 + 13);
              *((_OWORD *)v39 + 14) = v48;
              *((_OWORD *)v39 + 12) = v47;
              v49 = v40[30];
              *((_BYTE *)v39 + 248) = *((_BYTE *)v40 + 248);
              v39[30] = v49;
              *((_OWORD *)v39 + 16) = *((_OWORD *)v40 + 16);
              v40[32] = 0;
              v40[33] = 0;
              *((_BYTE *)v39 + 272) = *((_BYTE *)v40 + 272);
              v39 += 35;
              v40 += 35;
            }
            while (v40 < v34);
          }
          v150 = v35;
          a1[68].i64[1] = (uint64_t)v39;
          if (v34 != v11 + 35)
          {
            do
            {
              v62 = v38 - 35;
              v63 = v34 - 35;
              *v63 = *(v38 - 35);
              *(_OWORD *)(v63 + 1) = *((_OWORD *)v38 - 17);
              v65 = *((_OWORD *)v38 - 14);
              v64 = *((_OWORD *)v38 - 13);
              v66 = *((_OWORD *)v38 - 15);
              *(v34 - 24) = *(v38 - 24);
              *((_OWORD *)v34 - 14) = v65;
              *((_OWORD *)v34 - 13) = v64;
              *((_OWORD *)v34 - 15) = v66;
              *((_OWORD *)v34 - 16) = *((_OWORD *)v38 - 16);
              v67 = *(_OWORD *)(v38 - 23);
              *(v34 - 21) = *(v38 - 21);
              *(_OWORD *)(v34 - 23) = v67;
              v68 = *((_OWORD *)v38 - 10);
              *(v38 - 20) = 0;
              *(v38 - 19) = 0;
              v69 = (std::__shared_weak_count *)*(v34 - 19);
              *((_OWORD *)v34 - 10) = v68;
              if (v69)
              {
                v70 = (unint64_t *)&v69->__shared_owners_;
                do
                  v71 = __ldaxr(v70);
                while (__stlxr(v71 - 1, v70));
                if (!v71)
                {
                  ((void (*)(std::__shared_weak_count *, __int128 *, __int128 *, __int128 *, std::__shared_weak_count *, __int128 *))v69->__on_zero_shared)(v69, a2, a3, a4, a5, a6);
                  std::__shared_weak_count::__release_weak(v69);
                }
              }
              *(v34 - 18) = *(v38 - 18);
              v72 = *(_OWORD *)(v38 - 17);
              v73 = *(_OWORD *)(v38 - 15);
              *(_OWORD *)(v34 - 13) = *(_OWORD *)(v38 - 13);
              *(_OWORD *)(v34 - 15) = v73;
              *(_OWORD *)(v34 - 17) = v72;
              v74 = *(_OWORD *)(v38 - 11);
              v75 = *(_OWORD *)(v38 - 9);
              *(_OWORD *)(v34 - 7) = *(_OWORD *)(v38 - 7);
              *(_OWORD *)(v34 - 9) = v75;
              *(_OWORD *)(v34 - 11) = v74;
              v76 = *(v38 - 5);
              *((_BYTE *)v34 - 32) = *((_BYTE *)v38 - 32);
              *(v34 - 5) = v76;
              v77 = *(_OWORD *)(v38 - 3);
              *(v38 - 3) = 0;
              *(v38 - 2) = 0;
              v78 = (std::__shared_weak_count *)*(v34 - 2);
              *(_OWORD *)(v34 - 3) = v77;
              if (v78)
              {
                v79 = (unint64_t *)&v78->__shared_owners_;
                do
                  v80 = __ldaxr(v79);
                while (__stlxr(v80 - 1, v79));
                if (!v80)
                {
                  ((void (*)(std::__shared_weak_count *, __int128 *, __int128 *, __int128 *, std::__shared_weak_count *, __int128 *))v78->__on_zero_shared)(v78, a2, a3, a4, a5, a6);
                  std::__shared_weak_count::__release_weak(v78);
                }
              }
              *((_BYTE *)v34 - 8) = *((_BYTE *)v38 - 8);
              v34 -= 35;
              v38 -= 35;
            }
            while (v62 != v11);
          }
          *v11 = v9;
          v50 = v150 + 280 * v152;
          *(_OWORD *)(v50 + 8) = v193;
          *(_OWORD *)(v50 + 40) = v201;
          *(_OWORD *)(v50 + 56) = v202;
          *(_OWORD *)(v50 + 72) = v203;
          *(_QWORD *)(v50 + 88) = v204;
          *(_OWORD *)(v50 + 24) = v200;
          *(_OWORD *)(v50 + 96) = v191;
          *(_QWORD *)(v50 + 112) = v192;
          *(_QWORD *)(v50 + 120) = v32;
          v51 = *(std::__shared_weak_count **)(v50 + 128);
          *(_QWORD *)(v50 + 128) = *((_QWORD *)&v32 + 1);
          if (v51)
          {
            v52 = (unint64_t *)&v51->__shared_owners_;
            do
              v53 = __ldaxr(v52);
            while (__stlxr(v53 - 1, v52));
            if (!v53)
            {
              ((void (*)(std::__shared_weak_count *, __int128 *, __int128 *, __int128 *, std::__shared_weak_count *, __int128 *))v51->__on_zero_shared)(v51, a2, a3, a4, a5, a6);
              std::__shared_weak_count::__release_weak(v51);
            }
          }
          v54 = v150 + 280 * v152;
          *(_QWORD *)(v54 + 136) = v31;
          v55 = v198;
          *(_OWORD *)(v54 + 144) = v197;
          *(_OWORD *)(v54 + 160) = v55;
          v56 = v194;
          v57 = v195;
          *(_OWORD *)(v54 + 176) = v199;
          *(_OWORD *)(v54 + 192) = v56;
          v58 = v196;
          *(_OWORD *)(v54 + 208) = v57;
          *(_OWORD *)(v54 + 224) = v58;
          *(_QWORD *)(v54 + 240) = v189;
          *(_BYTE *)(v54 + 248) = v190;
          v59 = *(std::__shared_weak_count **)(v54 + 264);
          *(_QWORD *)(v54 + 256) = v168;
          *(_QWORD *)(v54 + 264) = v33;
          if (v59)
          {
            v60 = (unint64_t *)&v59->__shared_owners_;
            do
              v61 = __ldaxr(v60);
            while (__stlxr(v61 - 1, v60));
            if (!v61)
            {
              ((void (*)(std::__shared_weak_count *, __int128 *, __int128 *, __int128 *, std::__shared_weak_count *, __int128 *))v59->__on_zero_shared)(v59, a2, a3, a4, a5, a6);
              std::__shared_weak_count::__release_weak(v59);
            }
          }
          *(_BYTE *)(v150 + 280 * v152 + 272) = 0;
        }
LABEL_108:
        v33 = (std::__shared_weak_count *)*((_QWORD *)&v187 + 1);
LABEL_109:
        if (v33)
        {
          v140 = (unint64_t *)&v33->__shared_owners_;
          do
            v141 = __ldaxr(v140);
          while (__stlxr(v141 - 1, v140));
          if (!v141)
          {
            ((void (*)(std::__shared_weak_count *, __int128 *, __int128 *, __int128 *, std::__shared_weak_count *, __int128 *))v33->__on_zero_shared)(v33, a2, a3, a4, a5, a6);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        v142 = (std::__shared_weak_count *)*((_QWORD *)&v177 + 1);
        if (*((_QWORD *)&v177 + 1))
        {
          v143 = (unint64_t *)(*((_QWORD *)&v177 + 1) + 8);
          do
            v144 = __ldaxr(v143);
          while (__stlxr(v144 - 1, v143));
          if (!v144)
          {
            ((void (*)(std::__shared_weak_count *, __int128 *, __int128 *, __int128 *, std::__shared_weak_count *, __int128 *))v142->__on_zero_shared)(v142, a2, a3, a4, a5, a6);
            std::__shared_weak_count::__release_weak(v142);
          }
        }
        a1[101].i8[2] = 0;
        a1[101].i8[0] = 0;
        a1[100] = vaddq_s64(a1[100], (int64x2_t)xmmword_2103B2300);
        v17 = 1;
        goto LABEL_120;
      }
      v81 = 0xAF8AF8AF8AF8AF8BLL * (((uint64_t)v34 - v35) >> 3) + 1;
      if (v81 > 0xEA0EA0EA0EA0EALL)
        sub_20E867F44();
      v82 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(v37 - v35) >> 3);
      if (2 * v82 > v81)
        v81 = 2 * v82;
      if (v82 >= 0x75075075075075)
        v83 = 0xEA0EA0EA0EA0EALL;
      else
        v83 = v81;
      *(_QWORD *)&v202 = a1 + 69;
      v151 = (unint64_t *)v35;
      if (v83)
      {
        if (v83 > 0xEA0EA0EA0EA0EALL)
          sub_20E877A38();
        v84 = (char *)operator new(280 * v83);
      }
      else
      {
        v84 = 0;
      }
      v95 = (uint64_t)&v84[280 * v152];
      *(_QWORD *)&v200 = v84;
      *((_QWORD *)&v200 + 1) = v95;
      *(_QWORD *)&v201 = v95;
      *((_QWORD *)&v201 + 1) = &v84[280 * v83];
      if (v152 == v83)
      {
        if (v36 >= 1)
        {
          v96 = v152 + 2;
          if (v152 >= -1)
            v96 = v152 + 1;
          v97 = v96 >> 1;
          v98 = sub_20F5B6660(v95, v95, v95 - 280 * (v96 >> 1));
          v95 = *((_QWORD *)&v200 + 1) - 280 * v97;
          *((_QWORD *)&v200 + 1) = v95;
          goto LABEL_85;
        }
        if (v151 == v11)
          v99 = 1;
        else
          v99 = 2 * v152;
        if (v99 > 0xEA0EA0EA0EA0EALL)
          sub_20E877A38();
        v100 = (char *)operator new(280 * v99);
        v95 = (uint64_t)&v100[280 * (v99 >> 2)];
        *(_QWORD *)&v200 = v100;
        *((_QWORD *)&v200 + 1) = v95;
        *((_QWORD *)&v201 + 1) = &v100[280 * v99];
        if (v84)
          operator delete(v84);
      }
      v98 = v95;
LABEL_85:
      *(_QWORD *)v98 = v9;
      *(_OWORD *)(v98 + 8) = v169;
      v101 = v170;
      *(_OWORD *)(v98 + 40) = v171;
      v102 = v173;
      *(_OWORD *)(v98 + 56) = v172;
      *(_OWORD *)(v98 + 72) = v102;
      *(_QWORD *)(v98 + 88) = v174;
      *(_OWORD *)(v98 + 24) = v101;
      *(_QWORD *)(v98 + 112) = v176;
      *(_OWORD *)(v98 + 96) = v175;
      *(_OWORD *)(v98 + 120) = v177;
      v177 = 0uLL;
      *(_QWORD *)(v98 + 136) = v178;
      v103 = v179;
      v104 = v181;
      *(_OWORD *)(v98 + 160) = v180;
      *(_OWORD *)(v98 + 176) = v104;
      *(_OWORD *)(v98 + 144) = v103;
      v105 = v182;
      v106 = v184;
      *(_OWORD *)(v98 + 208) = v183;
      *(_OWORD *)(v98 + 224) = v106;
      *(_OWORD *)(v98 + 192) = v105;
      v107 = v185;
      *(_BYTE *)(v98 + 248) = v186;
      *(_QWORD *)(v98 + 240) = v107;
      *(_OWORD *)(v98 + 256) = v187;
      v187 = 0uLL;
      *(_BYTE *)(v98 + 272) = v188;
      v108 = v98 + 280;
      *(_QWORD *)&v201 = v98 + 280;
      v109 = (unint64_t *)a1[68].i64[0];
      if (v109 != v11)
      {
        v110 = 0;
        do
        {
          v111 = v95 + v110 * 8;
          v112 = (char *)&v11[v110];
          *(_QWORD *)(v95 + v110 * 8 - 280) = v11[v110 - 35];
          *(_OWORD *)(v95 + v110 * 8 - 272) = *(_OWORD *)&v11[v110 - 34];
          v114 = *(_OWORD *)&v11[v110 - 28];
          v113 = *(_OWORD *)&v11[v110 - 26];
          v115 = *(_OWORD *)&v11[v110 - 30];
          *(_QWORD *)(v111 - 192) = v11[v110 - 24];
          *(_OWORD *)(v111 - 224) = v114;
          *(_OWORD *)(v111 - 208) = v113;
          *(_OWORD *)(v111 - 240) = v115;
          *(_OWORD *)(v111 - 256) = *(_OWORD *)&v11[v110 - 32];
          v116 = *(_OWORD *)&v11[v110 - 23];
          *(_QWORD *)(v111 - 168) = v11[v110 - 21];
          *(_OWORD *)(v111 - 184) = v116;
          *(_OWORD *)(v111 - 160) = *(_OWORD *)&v11[v110 - 20];
          *((_QWORD *)v112 - 20) = 0;
          *((_QWORD *)v112 - 19) = 0;
          *(_QWORD *)(v111 - 144) = v11[v110 - 18];
          v117 = *(_OWORD *)&v11[v110 - 17];
          v118 = *(_OWORD *)&v11[v110 - 15];
          *(_OWORD *)(v111 - 104) = *(_OWORD *)&v11[v110 - 13];
          *(_OWORD *)(v111 - 120) = v118;
          *(_OWORD *)(v111 - 136) = v117;
          v119 = *(_OWORD *)&v11[v110 - 11];
          v120 = *(_OWORD *)&v11[v110 - 9];
          *(_OWORD *)(v111 - 56) = *(_OWORD *)&v11[v110 - 7];
          *(_OWORD *)(v111 - 72) = v120;
          *(_OWORD *)(v111 - 88) = v119;
          v121 = v11[v110 - 5];
          *(_BYTE *)(v111 - 32) = v11[v110 - 4];
          *(_QWORD *)(v111 - 40) = v121;
          *(_OWORD *)(v111 - 24) = *(_OWORD *)&v11[v110 - 3];
          *((_QWORD *)v112 - 3) = 0;
          *((_QWORD *)v112 - 2) = 0;
          *(_BYTE *)(v111 - 8) = v11[v110 - 1];
          v110 -= 35;
        }
        while (&v11[v110] != v109);
        v108 = v201;
        v95 += v110 * 8;
      }
      *((_QWORD *)&v200 + 1) = v95;
      v122 = (unint64_t *)a1[68].i64[1];
      if (v122 != v11)
      {
        do
        {
          *(_QWORD *)v108 = *v11;
          *(_OWORD *)(v108 + 8) = *(_OWORD *)(v11 + 1);
          v123 = *(_OWORD *)(v11 + 7);
          v124 = *(_OWORD *)(v11 + 9);
          v125 = v11[11];
          *(_OWORD *)(v108 + 40) = *(_OWORD *)(v11 + 5);
          *(_QWORD *)(v108 + 88) = v125;
          *(_OWORD *)(v108 + 72) = v124;
          *(_OWORD *)(v108 + 56) = v123;
          *(_OWORD *)(v108 + 24) = *(_OWORD *)(v11 + 3);
          v126 = *((_OWORD *)v11 + 6);
          *(_QWORD *)(v108 + 112) = v11[14];
          *(_OWORD *)(v108 + 96) = v126;
          *(_OWORD *)(v108 + 120) = *(_OWORD *)(v11 + 15);
          v11[15] = 0;
          v11[16] = 0;
          *(_QWORD *)(v108 + 136) = v11[17];
          v127 = *((_OWORD *)v11 + 9);
          v128 = *((_OWORD *)v11 + 11);
          *(_OWORD *)(v108 + 160) = *((_OWORD *)v11 + 10);
          *(_OWORD *)(v108 + 176) = v128;
          *(_OWORD *)(v108 + 144) = v127;
          v129 = *((_OWORD *)v11 + 12);
          v130 = *((_OWORD *)v11 + 14);
          *(_OWORD *)(v108 + 208) = *((_OWORD *)v11 + 13);
          *(_OWORD *)(v108 + 224) = v130;
          *(_OWORD *)(v108 + 192) = v129;
          v131 = v11[30];
          *(_BYTE *)(v108 + 248) = *((_BYTE *)v11 + 248);
          *(_QWORD *)(v108 + 240) = v131;
          *(_OWORD *)(v108 + 256) = *((_OWORD *)v11 + 16);
          v11[32] = 0;
          v11[33] = 0;
          *(_BYTE *)(v108 + 272) = *((_BYTE *)v11 + 272);
          v108 += 280;
          v11 += 35;
        }
        while (v11 != v122);
        v95 = *((_QWORD *)&v200 + 1);
        v11 = (unint64_t *)a1[68].i64[1];
      }
      v132 = (unint64_t *)a1[68].i64[0];
      a1[68].i64[0] = v95;
      a1[68].i64[1] = v108;
      v133 = a1[69].i64[0];
      a1[69].i64[0] = *((_QWORD *)&v201 + 1);
      *((_QWORD *)&v201 + 1) = v133;
      *(_QWORD *)&v200 = v132;
      *((_QWORD *)&v200 + 1) = v132;
      if (v11 != v132)
      {
        do
        {
          *(_QWORD *)&v201 = v11 - 35;
          v134 = (std::__shared_weak_count *)*(v11 - 2);
          if (v134)
          {
            v135 = (unint64_t *)&v134->__shared_owners_;
            do
              v136 = __ldaxr(v135);
            while (__stlxr(v136 - 1, v135));
            if (!v136)
            {
              ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
              std::__shared_weak_count::__release_weak(v134);
            }
          }
          v137 = (std::__shared_weak_count *)*(v11 - 19);
          if (v137)
          {
            v138 = (unint64_t *)&v137->__shared_owners_;
            do
              v139 = __ldaxr(v138);
            while (__stlxr(v139 - 1, v138));
            if (!v139)
            {
              ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
              std::__shared_weak_count::__release_weak(v137);
            }
          }
          v11 = (unint64_t *)v201;
        }
        while ((unint64_t *)v201 != v132);
        v11 = (unint64_t *)v200;
      }
      if (v11)
        operator delete(v11);
      goto LABEL_108;
    }
    v17 = 0;
    --*(_DWORD *)(v31 + 8);
  }
LABEL_120:
  if (*((_QWORD *)&v168 + 1))
  {
    v145 = (unint64_t *)(*((_QWORD *)&v168 + 1) + 8);
    do
      v146 = __ldaxr(v145);
    while (__stlxr(v146 - 1, v145));
    if (!v146)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v168 + 1) + 16))(*((_QWORD *)&v168 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v168 + 1));
    }
  }
  if (*((_QWORD *)&v161 + 1))
  {
    v147 = (unint64_t *)(*((_QWORD *)&v161 + 1) + 8);
    do
      v148 = __ldaxr(v147);
    while (__stlxr(v148 - 1, v147));
    if (!v148)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v161 + 1) + 16))(*((_QWORD *)&v161 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v161 + 1));
    }
  }
  return v17;
}

