double sub_20F209640(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  double *v6;
  double result;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;

  v4 = *(_DWORD *)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 20);
  v6 = *(double **)a1;
  if (v4 != 3 || v5 != 3)
  {
    if (v6 == (double *)a2)
    {
      v9 = operator new(0x60uLL, (std::align_val_t)0x20uLL);
      v10 = *(_OWORD *)(a2 + 16);
      *v9 = *(_OWORD *)a2;
      v9[1] = v10;
      v11 = *(_OWORD *)(a2 + 48);
      v9[2] = *(_OWORD *)(a2 + 32);
      v9[3] = v11;
      *((_QWORD *)v9 + 8) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = 12;
      *(_QWORD *)(a1 + 16) = 0x300000003;
      JUMPOUT(0x212BC6368);
    }
    *(_QWORD *)(a1 + 16) = 0x300000003;
    if (*(_QWORD *)(a1 + 8) <= 8uLL)
    {
      if (v6)
        MEMORY[0x212BC6368](v6, 0x1000C8000313F17);
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 12;
      v6 = (double *)operator new(0x60uLL, (std::align_val_t)0x20uLL);
      *(_QWORD *)a1 = v6;
    }
  }
  *v6 = *(double *)a2;
  v6[1] = *(double *)(a2 + 8);
  v6[2] = *(double *)(a2 + 16);
  v6[3] = *(double *)(a2 + 24);
  v6[4] = *(double *)(a2 + 32);
  v6[5] = *(double *)(a2 + 40);
  v6[6] = *(double *)(a2 + 48);
  v6[7] = *(double *)(a2 + 56);
  result = *(double *)(a2 + 64);
  v6[8] = result;
  return result;
}

double sub_20F20975C(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  size_t v7;
  double *v8;
  int v9;
  double v10;
  const double *v11;
  __int128 v12;
  __int128 v13;
  int v15[2];
  size_t v16;
  int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  if (**(_QWORD **)(a2 + 16) == a1)
  {
    sub_20F20975C(&v18, a2);
    v13 = v21;
    *(_OWORD *)(a1 + 32) = v20;
    *(_OWORD *)(a1 + 48) = v13;
    *(_QWORD *)(a1 + 64) = v22;
    v12 = v19;
    *(_OWORD *)a1 = v18;
    *(_OWORD *)(a1 + 16) = v12;
  }
  else
  {
    v4 = *(_QWORD **)(a2 + 8);
    v5 = v4[1];
    v6 = *(_DWORD *)(v5 + 20);
    if (v6)
    {
      v7 = (8 * (3 * v6) + 31) & 0xFFFFFFFE0;
      v16 = v7 >> 3;
      *(_QWORD *)v15 = operator new(v7, (std::align_val_t)0x20uLL);
      v17 = v6;
      *((_QWORD *)&v18 + 1) = *v4;
      *(_QWORD *)&v19 = v5;
      *((_QWORD *)&v19 + 1) = 0x3FF0000000000000;
      sub_20F209934((uint64_t)v15, (uint64_t)&v18);
      v8 = **(double ***)(a2 + 16);
      v9 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) + 20);
      v10 = *(double *)(a2 + 24);
      v11 = *(const double **)v15;
      sub_20E8BE654(0, 1, 3, 3, v9, *(const double **)v15, 3, v8, v10, 0.0, 3, (double *)a1, 3);
      if (v11)
        MEMORY[0x212BC6368](v11, 0x1000C8000313F17);
    }
    else
    {
      *(_QWORD *)(a1 + 64) = 0;
      *(_QWORD *)&v12 = 0;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
    }
  }
  return *(double *)&v12;
}

void sub_20F2098F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  if (v12)
  {
    MEMORY[0x212BC6368](v12, 0x1000C8000313F17);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20F209934(uint64_t a1, uint64_t a2)
{
  double *v4;
  const double *v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  size_t v10;
  double *v11;
  size_t v12;
  int v13;
  void *v14;
  size_t v15;
  int v16;

  v4 = *(double **)a1;
  v5 = *(const double **)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  if (v5 == v4 || *(double **)v6 == v4)
  {
    v9 = *(_DWORD *)(v6 + 20);
    v10 = (8 * (3 * v9) + 31) & 0xFFFFFFFE0;
    v15 = v10 >> 3;
    v14 = operator new(v10, (std::align_val_t)0x20uLL);
    v16 = v9;
    sub_20F209934(&v14, a2);
    v11 = *(double **)a1;
    v12 = v15;
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v12;
    *(_DWORD *)(a1 + 16) = v16;
    if (v11)
      MEMORY[0x212BC6368](v11, 0x1000C8000313F17);
  }
  else
  {
    v8 = *(_DWORD *)(v6 + 16);
    v7 = *(_DWORD *)(v6 + 20);
    if (v7 * v8)
    {
      sub_20E8BE654(0, 0, 3, v7, 18, v5, 3, *(double **)v6, *(double *)(a2 + 24), 0.0, v8, v4, 3);
    }
    else
    {
      v13 = *(_DWORD *)(a1 + 16);
      if (v13)
        bzero(v4, 8 * (3 * v13));
    }
  }
}

void sub_20F209A58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    MEMORY[0x212BC6368](a12, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

double sub_20F209A80(double *a1, uint64_t a2)
{
  uint64_t v3;
  double *v4;
  int v5;
  int v6;
  double result;
  _BYTE __src[432];

  v3 = *(_QWORD *)(a2 + 8);
  if (*(double **)v3 == a1 || (v4 = **(double ***)(a2 + 16), v4 == a1))
  {
    sub_20F209A80(__src);
    memcpy(a1, __src, 0x1B0uLL);
  }
  else
  {
    v5 = *(_DWORD *)(v3 + 16);
    v6 = *(_DWORD *)(v3 + 20);
    if (v6 * v5)
    {
      sub_20E8BE654(0, 1, v5, 3, v6, *(const double **)v3, v5, v4, *(double *)(a2 + 24), 0.0, 3, a1, 18);
    }
    else
    {
      result = 0.0;
      *((_OWORD *)a1 + 25) = 0u;
      *((_OWORD *)a1 + 26) = 0u;
      *((_OWORD *)a1 + 23) = 0u;
      *((_OWORD *)a1 + 24) = 0u;
      *((_OWORD *)a1 + 21) = 0u;
      *((_OWORD *)a1 + 22) = 0u;
      *((_OWORD *)a1 + 19) = 0u;
      *((_OWORD *)a1 + 20) = 0u;
      *((_OWORD *)a1 + 17) = 0u;
      *((_OWORD *)a1 + 18) = 0u;
      *((_OWORD *)a1 + 15) = 0u;
      *((_OWORD *)a1 + 16) = 0u;
      *((_OWORD *)a1 + 13) = 0u;
      *((_OWORD *)a1 + 14) = 0u;
      *((_OWORD *)a1 + 11) = 0u;
      *((_OWORD *)a1 + 12) = 0u;
      *((_OWORD *)a1 + 9) = 0u;
      *((_OWORD *)a1 + 10) = 0u;
      *((_OWORD *)a1 + 7) = 0u;
      *((_OWORD *)a1 + 8) = 0u;
      *((_OWORD *)a1 + 5) = 0u;
      *((_OWORD *)a1 + 6) = 0u;
      *((_OWORD *)a1 + 3) = 0u;
      *((_OWORD *)a1 + 4) = 0u;
      *((_OWORD *)a1 + 1) = 0u;
      *((_OWORD *)a1 + 2) = 0u;
      *(_OWORD *)a1 = 0u;
    }
  }
  return result;
}

void sub_20F209B74(void *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  size_t v7;
  double *v8;
  int v9;
  double v10;
  const double *v11;
  int v12[2];
  size_t v13;
  int v14;
  _QWORD __src[325];

  __src[324] = *MEMORY[0x24BDAC8D0];
  if (**(void ***)(a2 + 16) == a1)
  {
    sub_20F209B74(__src, a2);
    memcpy(a1, __src, 0xA20uLL);
  }
  else
  {
    v4 = *(_QWORD **)(a2 + 8);
    v5 = v4[1];
    v6 = *(_DWORD *)(v5 + 20);
    if (18 * v6)
    {
      v7 = (8 * (18 * v6) + 31) & 0xFFFFFFFE0;
      v13 = v7 >> 3;
      *(_QWORD *)v12 = operator new(v7, (std::align_val_t)0x20uLL);
      v14 = v6;
      __src[1] = *v4;
      __src[2] = v5;
      __src[3] = 0x3FF0000000000000;
      sub_20F209D40((uint64_t)v12, (uint64_t)__src);
      v8 = **(double ***)(a2 + 16);
      v9 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) + 20);
      v10 = *(double *)(a2 + 24);
      v11 = *(const double **)v12;
      sub_20E8BE654(0, 1, 18, 18, v9, *(const double **)v12, 18, v8, v10, 0.0, 18, (double *)a1, 18);
      if (v11)
        MEMORY[0x212BC6368](v11, 0x1000C8000313F17);
    }
    else
    {
      bzero(a1, 0xA20uLL);
    }
  }
}

void sub_20F209D00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (v13)
  {
    MEMORY[0x212BC6368](v13, 0x1000C8000313F17);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20F209D40(uint64_t a1, uint64_t a2)
{
  double *v4;
  const double *v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  size_t v10;
  double *v11;
  size_t v12;
  void *v13;
  size_t v14;
  int v15;

  v4 = *(double **)a1;
  v5 = *(const double **)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  if (v5 == v4 || *(double **)v6 == v4)
  {
    v9 = *(_DWORD *)(v6 + 20);
    v10 = (8 * (18 * v9) + 31) & 0xFFFFFFFE0;
    v14 = v10 >> 3;
    v13 = operator new(v10, (std::align_val_t)0x20uLL);
    v15 = v9;
    sub_20F209D40(&v13, a2);
    v11 = *(double **)a1;
    v12 = v14;
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = v12;
    *(_DWORD *)(a1 + 16) = v15;
    if (v11)
      MEMORY[0x212BC6368](v11, 0x1000C8000313F17);
  }
  else
  {
    v8 = *(_DWORD *)(v6 + 16);
    v7 = *(_DWORD *)(v6 + 20);
    if (v7 * v8)
    {
      sub_20E8BE654(0, 0, 18, v7, 18, v5, 18, *(double **)v6, *(double *)(a2 + 24), 0.0, v8, v4, 18);
    }
    else if (18 * *(_DWORD *)(a1 + 16))
    {
      bzero(v4, 8 * (18 * *(_DWORD *)(a1 + 16)));
    }
  }
}

void sub_20F209E6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    MEMORY[0x212BC6368](a12, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

double sub_20F209E94(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
  *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
  *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
  *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
  *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
  *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
  *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
  *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
  *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
  *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 456);
  *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
  *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
  *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
  *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
  *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
  *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
  *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
  *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
  *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
  *(_QWORD *)(a1 + 552) = *(_QWORD *)(a2 + 552);
  *(_QWORD *)(a1 + 560) = *(_QWORD *)(a2 + 560);
  *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
  *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
  *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
  *(_QWORD *)(a1 + 592) = *(_QWORD *)(a2 + 592);
  *(_QWORD *)(a1 + 600) = *(_QWORD *)(a2 + 600);
  *(_QWORD *)(a1 + 608) = *(_QWORD *)(a2 + 608);
  *(_QWORD *)(a1 + 616) = *(_QWORD *)(a2 + 616);
  *(_QWORD *)(a1 + 624) = *(_QWORD *)(a2 + 624);
  *(_QWORD *)(a1 + 632) = *(_QWORD *)(a2 + 632);
  *(_QWORD *)(a1 + 640) = *(_QWORD *)(a2 + 640);
  *(_QWORD *)(a1 + 648) = *(_QWORD *)(a2 + 648);
  *(_QWORD *)(a1 + 656) = *(_QWORD *)(a2 + 656);
  *(_QWORD *)(a1 + 664) = *(_QWORD *)(a2 + 664);
  *(_QWORD *)(a1 + 672) = *(_QWORD *)(a2 + 672);
  *(_QWORD *)(a1 + 680) = *(_QWORD *)(a2 + 680);
  *(_QWORD *)(a1 + 688) = *(_QWORD *)(a2 + 688);
  *(_QWORD *)(a1 + 696) = *(_QWORD *)(a2 + 696);
  *(_QWORD *)(a1 + 704) = *(_QWORD *)(a2 + 704);
  *(_QWORD *)(a1 + 712) = *(_QWORD *)(a2 + 712);
  *(_QWORD *)(a1 + 720) = *(_QWORD *)(a2 + 720);
  *(_QWORD *)(a1 + 728) = *(_QWORD *)(a2 + 728);
  *(_QWORD *)(a1 + 736) = *(_QWORD *)(a2 + 736);
  *(_QWORD *)(a1 + 744) = *(_QWORD *)(a2 + 744);
  *(_QWORD *)(a1 + 752) = *(_QWORD *)(a2 + 752);
  *(_QWORD *)(a1 + 760) = *(_QWORD *)(a2 + 760);
  *(_QWORD *)(a1 + 768) = *(_QWORD *)(a2 + 768);
  *(_QWORD *)(a1 + 776) = *(_QWORD *)(a2 + 776);
  *(_QWORD *)(a1 + 784) = *(_QWORD *)(a2 + 784);
  *(_QWORD *)(a1 + 792) = *(_QWORD *)(a2 + 792);
  *(_QWORD *)(a1 + 800) = *(_QWORD *)(a2 + 800);
  *(_QWORD *)(a1 + 808) = *(_QWORD *)(a2 + 808);
  *(_QWORD *)(a1 + 816) = *(_QWORD *)(a2 + 816);
  *(_QWORD *)(a1 + 824) = *(_QWORD *)(a2 + 824);
  *(_QWORD *)(a1 + 832) = *(_QWORD *)(a2 + 832);
  *(_QWORD *)(a1 + 840) = *(_QWORD *)(a2 + 840);
  *(_QWORD *)(a1 + 848) = *(_QWORD *)(a2 + 848);
  *(_QWORD *)(a1 + 856) = *(_QWORD *)(a2 + 856);
  *(_QWORD *)(a1 + 864) = *(_QWORD *)(a2 + 864);
  *(_QWORD *)(a1 + 872) = *(_QWORD *)(a2 + 872);
  *(_QWORD *)(a1 + 880) = *(_QWORD *)(a2 + 880);
  *(_QWORD *)(a1 + 888) = *(_QWORD *)(a2 + 888);
  *(_QWORD *)(a1 + 896) = *(_QWORD *)(a2 + 896);
  *(_QWORD *)(a1 + 904) = *(_QWORD *)(a2 + 904);
  *(_QWORD *)(a1 + 912) = *(_QWORD *)(a2 + 912);
  *(_QWORD *)(a1 + 920) = *(_QWORD *)(a2 + 920);
  *(_QWORD *)(a1 + 928) = *(_QWORD *)(a2 + 928);
  *(_QWORD *)(a1 + 936) = *(_QWORD *)(a2 + 936);
  *(_QWORD *)(a1 + 944) = *(_QWORD *)(a2 + 944);
  *(_QWORD *)(a1 + 952) = *(_QWORD *)(a2 + 952);
  *(_QWORD *)(a1 + 960) = *(_QWORD *)(a2 + 960);
  *(_QWORD *)(a1 + 968) = *(_QWORD *)(a2 + 968);
  *(_QWORD *)(a1 + 976) = *(_QWORD *)(a2 + 976);
  *(_QWORD *)(a1 + 984) = *(_QWORD *)(a2 + 984);
  *(_QWORD *)(a1 + 992) = *(_QWORD *)(a2 + 992);
  *(_QWORD *)(a1 + 1000) = *(_QWORD *)(a2 + 1000);
  *(_QWORD *)(a1 + 1008) = *(_QWORD *)(a2 + 1008);
  *(_QWORD *)(a1 + 1016) = *(_QWORD *)(a2 + 1016);
  *(_QWORD *)(a1 + 1024) = *(_QWORD *)(a2 + 1024);
  *(_QWORD *)(a1 + 1032) = *(_QWORD *)(a2 + 1032);
  *(_QWORD *)(a1 + 1040) = *(_QWORD *)(a2 + 1040);
  *(_QWORD *)(a1 + 1048) = *(_QWORD *)(a2 + 1048);
  *(_QWORD *)(a1 + 1056) = *(_QWORD *)(a2 + 1056);
  *(_QWORD *)(a1 + 1064) = *(_QWORD *)(a2 + 1064);
  *(_QWORD *)(a1 + 1072) = *(_QWORD *)(a2 + 1072);
  *(_QWORD *)(a1 + 1080) = *(_QWORD *)(a2 + 1080);
  *(_QWORD *)(a1 + 1088) = *(_QWORD *)(a2 + 1088);
  *(_QWORD *)(a1 + 1096) = *(_QWORD *)(a2 + 1096);
  *(_QWORD *)(a1 + 1104) = *(_QWORD *)(a2 + 1104);
  *(_QWORD *)(a1 + 1112) = *(_QWORD *)(a2 + 1112);
  *(_QWORD *)(a1 + 1120) = *(_QWORD *)(a2 + 1120);
  *(_QWORD *)(a1 + 1128) = *(_QWORD *)(a2 + 1128);
  *(_QWORD *)(a1 + 1136) = *(_QWORD *)(a2 + 1136);
  *(_QWORD *)(a1 + 1144) = *(_QWORD *)(a2 + 1144);
  *(_QWORD *)(a1 + 1152) = *(_QWORD *)(a2 + 1152);
  *(_QWORD *)(a1 + 1160) = *(_QWORD *)(a2 + 1160);
  *(_QWORD *)(a1 + 1168) = *(_QWORD *)(a2 + 1168);
  *(_QWORD *)(a1 + 1176) = *(_QWORD *)(a2 + 1176);
  *(_QWORD *)(a1 + 1184) = *(_QWORD *)(a2 + 1184);
  *(_QWORD *)(a1 + 1192) = *(_QWORD *)(a2 + 1192);
  *(_QWORD *)(a1 + 1200) = *(_QWORD *)(a2 + 1200);
  *(_QWORD *)(a1 + 1208) = *(_QWORD *)(a2 + 1208);
  *(_QWORD *)(a1 + 1216) = *(_QWORD *)(a2 + 1216);
  *(_QWORD *)(a1 + 1224) = *(_QWORD *)(a2 + 1224);
  *(_QWORD *)(a1 + 1232) = *(_QWORD *)(a2 + 1232);
  *(_QWORD *)(a1 + 1240) = *(_QWORD *)(a2 + 1240);
  *(_QWORD *)(a1 + 1248) = *(_QWORD *)(a2 + 1248);
  *(_QWORD *)(a1 + 1256) = *(_QWORD *)(a2 + 1256);
  *(_QWORD *)(a1 + 1264) = *(_QWORD *)(a2 + 1264);
  *(_QWORD *)(a1 + 1272) = *(_QWORD *)(a2 + 1272);
  *(_QWORD *)(a1 + 1280) = *(_QWORD *)(a2 + 1280);
  *(_QWORD *)(a1 + 1288) = *(_QWORD *)(a2 + 1288);
  *(_QWORD *)(a1 + 1296) = *(_QWORD *)(a2 + 1296);
  *(_QWORD *)(a1 + 1304) = *(_QWORD *)(a2 + 1304);
  *(_QWORD *)(a1 + 1312) = *(_QWORD *)(a2 + 1312);
  *(_QWORD *)(a1 + 1320) = *(_QWORD *)(a2 + 1320);
  *(_QWORD *)(a1 + 1328) = *(_QWORD *)(a2 + 1328);
  *(_QWORD *)(a1 + 1336) = *(_QWORD *)(a2 + 1336);
  *(_QWORD *)(a1 + 1344) = *(_QWORD *)(a2 + 1344);
  *(_QWORD *)(a1 + 1352) = *(_QWORD *)(a2 + 1352);
  *(_QWORD *)(a1 + 1360) = *(_QWORD *)(a2 + 1360);
  *(_QWORD *)(a1 + 1368) = *(_QWORD *)(a2 + 1368);
  *(_QWORD *)(a1 + 1376) = *(_QWORD *)(a2 + 1376);
  *(_QWORD *)(a1 + 1384) = *(_QWORD *)(a2 + 1384);
  *(_QWORD *)(a1 + 1392) = *(_QWORD *)(a2 + 1392);
  *(_QWORD *)(a1 + 1400) = *(_QWORD *)(a2 + 1400);
  *(_QWORD *)(a1 + 1408) = *(_QWORD *)(a2 + 1408);
  *(_QWORD *)(a1 + 1416) = *(_QWORD *)(a2 + 1416);
  *(_QWORD *)(a1 + 1424) = *(_QWORD *)(a2 + 1424);
  *(_QWORD *)(a1 + 1432) = *(_QWORD *)(a2 + 1432);
  *(_QWORD *)(a1 + 1440) = *(_QWORD *)(a2 + 1440);
  *(_QWORD *)(a1 + 1448) = *(_QWORD *)(a2 + 1448);
  *(_QWORD *)(a1 + 1456) = *(_QWORD *)(a2 + 1456);
  *(_QWORD *)(a1 + 1464) = *(_QWORD *)(a2 + 1464);
  *(_QWORD *)(a1 + 1472) = *(_QWORD *)(a2 + 1472);
  *(_QWORD *)(a1 + 1480) = *(_QWORD *)(a2 + 1480);
  *(_QWORD *)(a1 + 1488) = *(_QWORD *)(a2 + 1488);
  *(_QWORD *)(a1 + 1496) = *(_QWORD *)(a2 + 1496);
  *(_QWORD *)(a1 + 1504) = *(_QWORD *)(a2 + 1504);
  *(_QWORD *)(a1 + 1512) = *(_QWORD *)(a2 + 1512);
  *(_QWORD *)(a1 + 1520) = *(_QWORD *)(a2 + 1520);
  *(_QWORD *)(a1 + 1528) = *(_QWORD *)(a2 + 1528);
  *(_QWORD *)(a1 + 1536) = *(_QWORD *)(a2 + 1536);
  *(_QWORD *)(a1 + 1544) = *(_QWORD *)(a2 + 1544);
  *(_QWORD *)(a1 + 1552) = *(_QWORD *)(a2 + 1552);
  *(_QWORD *)(a1 + 1560) = *(_QWORD *)(a2 + 1560);
  *(_QWORD *)(a1 + 1568) = *(_QWORD *)(a2 + 1568);
  *(_QWORD *)(a1 + 1576) = *(_QWORD *)(a2 + 1576);
  *(_QWORD *)(a1 + 1584) = *(_QWORD *)(a2 + 1584);
  *(_QWORD *)(a1 + 1592) = *(_QWORD *)(a2 + 1592);
  *(_QWORD *)(a1 + 1600) = *(_QWORD *)(a2 + 1600);
  *(_QWORD *)(a1 + 1608) = *(_QWORD *)(a2 + 1608);
  *(_QWORD *)(a1 + 1616) = *(_QWORD *)(a2 + 1616);
  *(_QWORD *)(a1 + 1624) = *(_QWORD *)(a2 + 1624);
  *(_QWORD *)(a1 + 1632) = *(_QWORD *)(a2 + 1632);
  *(_QWORD *)(a1 + 1640) = *(_QWORD *)(a2 + 1640);
  *(_QWORD *)(a1 + 1648) = *(_QWORD *)(a2 + 1648);
  *(_QWORD *)(a1 + 1656) = *(_QWORD *)(a2 + 1656);
  *(_QWORD *)(a1 + 1664) = *(_QWORD *)(a2 + 1664);
  *(_QWORD *)(a1 + 1672) = *(_QWORD *)(a2 + 1672);
  *(_QWORD *)(a1 + 1680) = *(_QWORD *)(a2 + 1680);
  *(_QWORD *)(a1 + 1688) = *(_QWORD *)(a2 + 1688);
  *(_QWORD *)(a1 + 1696) = *(_QWORD *)(a2 + 1696);
  *(_QWORD *)(a1 + 1704) = *(_QWORD *)(a2 + 1704);
  *(_QWORD *)(a1 + 1712) = *(_QWORD *)(a2 + 1712);
  *(_QWORD *)(a1 + 1720) = *(_QWORD *)(a2 + 1720);
  *(_QWORD *)(a1 + 1728) = *(_QWORD *)(a2 + 1728);
  *(_QWORD *)(a1 + 1736) = *(_QWORD *)(a2 + 1736);
  *(_QWORD *)(a1 + 1744) = *(_QWORD *)(a2 + 1744);
  *(_QWORD *)(a1 + 1752) = *(_QWORD *)(a2 + 1752);
  *(_QWORD *)(a1 + 1760) = *(_QWORD *)(a2 + 1760);
  *(_QWORD *)(a1 + 1768) = *(_QWORD *)(a2 + 1768);
  *(_QWORD *)(a1 + 1776) = *(_QWORD *)(a2 + 1776);
  *(_QWORD *)(a1 + 1784) = *(_QWORD *)(a2 + 1784);
  *(_QWORD *)(a1 + 1792) = *(_QWORD *)(a2 + 1792);
  *(_QWORD *)(a1 + 1800) = *(_QWORD *)(a2 + 1800);
  *(_QWORD *)(a1 + 1808) = *(_QWORD *)(a2 + 1808);
  *(_QWORD *)(a1 + 1816) = *(_QWORD *)(a2 + 1816);
  *(_QWORD *)(a1 + 1824) = *(_QWORD *)(a2 + 1824);
  *(_QWORD *)(a1 + 1832) = *(_QWORD *)(a2 + 1832);
  *(_QWORD *)(a1 + 1840) = *(_QWORD *)(a2 + 1840);
  *(_QWORD *)(a1 + 1848) = *(_QWORD *)(a2 + 1848);
  *(_QWORD *)(a1 + 1856) = *(_QWORD *)(a2 + 1856);
  *(_QWORD *)(a1 + 1864) = *(_QWORD *)(a2 + 1864);
  *(_QWORD *)(a1 + 1872) = *(_QWORD *)(a2 + 1872);
  *(_QWORD *)(a1 + 1880) = *(_QWORD *)(a2 + 1880);
  *(_QWORD *)(a1 + 1888) = *(_QWORD *)(a2 + 1888);
  *(_QWORD *)(a1 + 1896) = *(_QWORD *)(a2 + 1896);
  *(_QWORD *)(a1 + 1904) = *(_QWORD *)(a2 + 1904);
  *(_QWORD *)(a1 + 1912) = *(_QWORD *)(a2 + 1912);
  *(_QWORD *)(a1 + 1920) = *(_QWORD *)(a2 + 1920);
  *(_QWORD *)(a1 + 1928) = *(_QWORD *)(a2 + 1928);
  *(_QWORD *)(a1 + 1936) = *(_QWORD *)(a2 + 1936);
  *(_QWORD *)(a1 + 1944) = *(_QWORD *)(a2 + 1944);
  *(_QWORD *)(a1 + 1952) = *(_QWORD *)(a2 + 1952);
  *(_QWORD *)(a1 + 1960) = *(_QWORD *)(a2 + 1960);
  *(_QWORD *)(a1 + 1968) = *(_QWORD *)(a2 + 1968);
  *(_QWORD *)(a1 + 1976) = *(_QWORD *)(a2 + 1976);
  *(_QWORD *)(a1 + 1984) = *(_QWORD *)(a2 + 1984);
  *(_QWORD *)(a1 + 1992) = *(_QWORD *)(a2 + 1992);
  *(_QWORD *)(a1 + 2000) = *(_QWORD *)(a2 + 2000);
  *(_QWORD *)(a1 + 2008) = *(_QWORD *)(a2 + 2008);
  *(_QWORD *)(a1 + 2016) = *(_QWORD *)(a2 + 2016);
  *(_QWORD *)(a1 + 2024) = *(_QWORD *)(a2 + 2024);
  *(_QWORD *)(a1 + 2032) = *(_QWORD *)(a2 + 2032);
  *(_QWORD *)(a1 + 2040) = *(_QWORD *)(a2 + 2040);
  *(_QWORD *)(a1 + 2048) = *(_QWORD *)(a2 + 2048);
  *(_QWORD *)(a1 + 2056) = *(_QWORD *)(a2 + 2056);
  *(_QWORD *)(a1 + 2064) = *(_QWORD *)(a2 + 2064);
  *(_QWORD *)(a1 + 2072) = *(_QWORD *)(a2 + 2072);
  *(_QWORD *)(a1 + 2080) = *(_QWORD *)(a2 + 2080);
  *(_QWORD *)(a1 + 2088) = *(_QWORD *)(a2 + 2088);
  *(_QWORD *)(a1 + 2096) = *(_QWORD *)(a2 + 2096);
  *(_QWORD *)(a1 + 2104) = *(_QWORD *)(a2 + 2104);
  *(_QWORD *)(a1 + 2112) = *(_QWORD *)(a2 + 2112);
  *(_QWORD *)(a1 + 2120) = *(_QWORD *)(a2 + 2120);
  *(_QWORD *)(a1 + 2128) = *(_QWORD *)(a2 + 2128);
  *(_QWORD *)(a1 + 2136) = *(_QWORD *)(a2 + 2136);
  *(_QWORD *)(a1 + 2144) = *(_QWORD *)(a2 + 2144);
  *(_QWORD *)(a1 + 2152) = *(_QWORD *)(a2 + 2152);
  *(_QWORD *)(a1 + 2160) = *(_QWORD *)(a2 + 2160);
  *(_QWORD *)(a1 + 2168) = *(_QWORD *)(a2 + 2168);
  *(_QWORD *)(a1 + 2176) = *(_QWORD *)(a2 + 2176);
  *(_QWORD *)(a1 + 2184) = *(_QWORD *)(a2 + 2184);
  *(_QWORD *)(a1 + 2192) = *(_QWORD *)(a2 + 2192);
  *(_QWORD *)(a1 + 2200) = *(_QWORD *)(a2 + 2200);
  *(_QWORD *)(a1 + 2208) = *(_QWORD *)(a2 + 2208);
  *(_QWORD *)(a1 + 2216) = *(_QWORD *)(a2 + 2216);
  *(_QWORD *)(a1 + 2224) = *(_QWORD *)(a2 + 2224);
  *(_QWORD *)(a1 + 2232) = *(_QWORD *)(a2 + 2232);
  *(_QWORD *)(a1 + 2240) = *(_QWORD *)(a2 + 2240);
  *(_QWORD *)(a1 + 2248) = *(_QWORD *)(a2 + 2248);
  *(_QWORD *)(a1 + 2256) = *(_QWORD *)(a2 + 2256);
  *(_QWORD *)(a1 + 2264) = *(_QWORD *)(a2 + 2264);
  *(_QWORD *)(a1 + 2272) = *(_QWORD *)(a2 + 2272);
  *(_QWORD *)(a1 + 2280) = *(_QWORD *)(a2 + 2280);
  *(_QWORD *)(a1 + 2288) = *(_QWORD *)(a2 + 2288);
  *(_QWORD *)(a1 + 2296) = *(_QWORD *)(a2 + 2296);
  *(_QWORD *)(a1 + 2304) = *(_QWORD *)(a2 + 2304);
  *(_QWORD *)(a1 + 2312) = *(_QWORD *)(a2 + 2312);
  *(_QWORD *)(a1 + 2320) = *(_QWORD *)(a2 + 2320);
  *(_QWORD *)(a1 + 2328) = *(_QWORD *)(a2 + 2328);
  *(_QWORD *)(a1 + 2336) = *(_QWORD *)(a2 + 2336);
  *(_QWORD *)(a1 + 2344) = *(_QWORD *)(a2 + 2344);
  *(_QWORD *)(a1 + 2352) = *(_QWORD *)(a2 + 2352);
  *(_QWORD *)(a1 + 2360) = *(_QWORD *)(a2 + 2360);
  *(_QWORD *)(a1 + 2368) = *(_QWORD *)(a2 + 2368);
  *(_QWORD *)(a1 + 2376) = *(_QWORD *)(a2 + 2376);
  *(_QWORD *)(a1 + 2384) = *(_QWORD *)(a2 + 2384);
  *(_QWORD *)(a1 + 2392) = *(_QWORD *)(a2 + 2392);
  *(_QWORD *)(a1 + 2400) = *(_QWORD *)(a2 + 2400);
  *(_QWORD *)(a1 + 2408) = *(_QWORD *)(a2 + 2408);
  *(_QWORD *)(a1 + 2416) = *(_QWORD *)(a2 + 2416);
  *(_QWORD *)(a1 + 2424) = *(_QWORD *)(a2 + 2424);
  *(_QWORD *)(a1 + 2432) = *(_QWORD *)(a2 + 2432);
  *(_QWORD *)(a1 + 2440) = *(_QWORD *)(a2 + 2440);
  *(_QWORD *)(a1 + 2448) = *(_QWORD *)(a2 + 2448);
  *(_QWORD *)(a1 + 2456) = *(_QWORD *)(a2 + 2456);
  *(_QWORD *)(a1 + 2464) = *(_QWORD *)(a2 + 2464);
  *(_QWORD *)(a1 + 2472) = *(_QWORD *)(a2 + 2472);
  *(_QWORD *)(a1 + 2480) = *(_QWORD *)(a2 + 2480);
  *(_QWORD *)(a1 + 2488) = *(_QWORD *)(a2 + 2488);
  *(_QWORD *)(a1 + 2496) = *(_QWORD *)(a2 + 2496);
  *(_QWORD *)(a1 + 2504) = *(_QWORD *)(a2 + 2504);
  *(_QWORD *)(a1 + 2512) = *(_QWORD *)(a2 + 2512);
  *(_QWORD *)(a1 + 2520) = *(_QWORD *)(a2 + 2520);
  *(_QWORD *)(a1 + 2528) = *(_QWORD *)(a2 + 2528);
  *(_QWORD *)(a1 + 2536) = *(_QWORD *)(a2 + 2536);
  *(_QWORD *)(a1 + 2544) = *(_QWORD *)(a2 + 2544);
  *(_QWORD *)(a1 + 2552) = *(_QWORD *)(a2 + 2552);
  *(_QWORD *)(a1 + 2560) = *(_QWORD *)(a2 + 2560);
  *(_QWORD *)(a1 + 2568) = *(_QWORD *)(a2 + 2568);
  *(_QWORD *)(a1 + 2576) = *(_QWORD *)(a2 + 2576);
  result = *(double *)(a2 + 2584);
  *(double *)(a1 + 2584) = result;
  return result;
}

double sub_20F20A8B8(uint64_t a1, double *a2)
{
  int v4;
  double *v5;
  double result;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v4 = *(_DWORD *)(a1 + 16);
  v5 = *(double **)a1;
  if (v4 != 18)
  {
    if (v5 == a2)
    {
      v7 = operator new(0xA0uLL, (std::align_val_t)0x20uLL);
      v8 = *((_OWORD *)a2 + 1);
      *v7 = *(_OWORD *)a2;
      v7[1] = v8;
      v9 = *((_OWORD *)a2 + 3);
      v7[2] = *((_OWORD *)a2 + 2);
      v7[3] = v9;
      v10 = *((_OWORD *)a2 + 5);
      v7[4] = *((_OWORD *)a2 + 4);
      v7[5] = v10;
      v11 = *((_OWORD *)a2 + 7);
      v7[6] = *((_OWORD *)a2 + 6);
      v7[7] = v11;
      v7[8] = *((_OWORD *)a2 + 8);
      *(_QWORD *)a1 = v7;
      *(_QWORD *)(a1 + 8) = 20;
      *(_DWORD *)(a1 + 16) = 18;
      JUMPOUT(0x212BC6368);
    }
    *(_DWORD *)(a1 + 16) = 18;
    if (*(_QWORD *)(a1 + 8) <= 0x11uLL)
    {
      if (v5)
        MEMORY[0x212BC6368](v5, 0x1000C8000313F17);
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 20;
      v5 = (double *)operator new(0xA0uLL, (std::align_val_t)0x20uLL);
      *(_QWORD *)a1 = v5;
    }
  }
  *v5 = *a2;
  v5[1] = a2[1];
  v5[2] = a2[2];
  v5[3] = a2[3];
  v5[4] = a2[4];
  v5[5] = a2[5];
  v5[6] = a2[6];
  v5[7] = a2[7];
  v5[8] = a2[8];
  v5[9] = a2[9];
  v5[10] = a2[10];
  v5[11] = a2[11];
  v5[12] = a2[12];
  v5[13] = a2[13];
  v5[14] = a2[14];
  v5[15] = a2[15];
  v5[16] = a2[16];
  result = a2[17];
  v5[17] = result;
  return result;
}

void sub_20F20AA28(uint64_t a1, uint64_t a2)
{
  double *v4;
  uint64_t v5;
  size_t *v6;
  size_t v7;
  unint64_t v8;
  int v9;
  int v10;
  size_t v11;
  const double *v12;
  unsigned int v13;
  unsigned int v14;
  size_t v15;
  size_t v16;
  int v17[2];
  size_t v18;
  int __lda;
  int v20;
  void *v21;
  size_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = *(double **)a1;
  v5 = **(_QWORD **)(a2 + 16);
  if (*(double **)v5 == v4)
  {
    v13 = *(_DWORD *)(**(_QWORD **)(a2 + 8) + 16);
    v14 = *(_DWORD *)(v5 + 16);
    v15 = (8 * v14 * v13 + 31) & 0xFFFFFFFE0;
    v22 = v15 >> 3;
    v21 = operator new(v15, (std::align_val_t)0x20uLL);
    v23 = __PAIR64__(v14, v13);
    sub_20F20AA28(&v21, a2);
    v12 = *(const double **)a1;
    v16 = v22;
    *(_QWORD *)a1 = v21;
    *(_QWORD *)(a1 + 8) = v16;
    *(_QWORD *)(a1 + 16) = v23;
    if (!v12)
      return;
    goto LABEL_9;
  }
  v6 = *(size_t **)(a2 + 8);
  v7 = *v6;
  v8 = v6[1];
  v9 = *(_DWORD *)(*v6 + 16);
  v10 = *(_DWORD *)(v8 + 20);
  if (v10 * v9 && *(_DWORD *)(v5 + 16) * *(_DWORD *)(v5 + 20))
  {
    v11 = (8 * (v10 * v9) + 31) & 0xFFFFFFFE0;
    v18 = v11 >> 3;
    *(_QWORD *)v17 = operator new(v11, (std::align_val_t)0x20uLL);
    __lda = v9;
    v20 = v10;
    v22 = v7;
    v23 = v8;
    v24 = 0x3FF0000000000000;
    sub_20F197DE0((uint64_t)v17, (uint64_t)&v21);
    sub_20E8BE654(0, 1, *(_DWORD *)(**(_QWORD **)(a2 + 8) + 16), *(_DWORD *)(**(_QWORD **)(a2 + 16) + 16), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) + 20), *(const double **)v17, __lda, ***(double ****)(a2 + 16), *(double *)(a2 + 24), 0.0, *(_DWORD *)(**(_QWORD **)(a2 + 16) + 16), *(double **)a1, *(_DWORD *)(a1 + 16));
    v12 = *(const double **)v17;
    if (!*(_QWORD *)v17)
      return;
LABEL_9:
    MEMORY[0x212BC6368](v12, 0x1000C8000313F17);
    return;
  }
  if (*(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16))
    bzero(v4, 8 * (*(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16)));
}

void sub_20F20AC0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13)
    MEMORY[0x212BC6368](a13, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

void sub_20F20AC38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (!a16)
    JUMPOUT(0x20F20AC30);
  JUMPOUT(0x20F20AC1CLL);
}

_QWORD *sub_20F20AC48(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  _QWORD v9[2];
  int v10;
  _QWORD v11[5];

  v2 = result;
  v11[4] = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a2 + 16);
  if (*(_QWORD **)v3 == result)
  {
    result = (_QWORD *)sub_20F20AC48(v11, a2);
    *v2 = v11[0];
  }
  else
  {
    v4 = *(_QWORD **)(a2 + 8);
    v5 = v4[1];
    v6 = *(unsigned int *)(v5 + 20);
    if ((_DWORD)v6 && *(_DWORD *)(v3 + 16))
    {
      v7 = (8 * v6 + 31) & 0xFFFFFFFE0;
      v9[1] = v7 >> 3;
      v9[0] = operator new(v7, (std::align_val_t)0x20uLL);
      v10 = v6;
      v11[1] = *v4;
      v11[2] = v5;
      v11[3] = 0x3FF0000000000000;
      sub_20F20ADD0((uint64_t)v9, (uint64_t)v11);
      v8 = v9[0];
      result = (_QWORD *)sub_20E8BE6CC();
      if (v8)
        return (_QWORD *)MEMORY[0x212BC6368](v8, 0x1000C8000313F17);
    }
    else
    {
      *result = 0;
    }
  }
  return result;
}

void sub_20F20AD8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;

  if (v11)
  {
    MEMORY[0x212BC6368](v11, 0x1000C8000313F17);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20F20ADD0(uint64_t a1, uint64_t a2)
{
  double *v4;
  uint64_t v5;
  uint64_t v6;
  const double *v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  size_t v12;
  double *v13;
  size_t v14;
  uint64_t v15;
  void *v16;
  size_t v17;
  int v18;

  v4 = *(double **)a1;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = **(_QWORD **)(a2 + 8);
  v7 = *(const double **)v6;
  if (*(double **)v6 == v4 || *(double **)v5 == v4)
  {
    v11 = *(unsigned int *)(v5 + 20);
    v12 = (8 * v11 + 31) & 0xFFFFFFFE0;
    v17 = v12 >> 3;
    v16 = operator new(v12, (std::align_val_t)0x20uLL);
    v18 = v11;
    sub_20F20ADD0(&v16, a2);
    v13 = *(double **)a1;
    v14 = v17;
    *(_QWORD *)a1 = v16;
    *(_QWORD *)(a1 + 8) = v14;
    *(_DWORD *)(a1 + 16) = v18;
    if (v13)
      MEMORY[0x212BC6368](v13, 0x1000C8000313F17);
  }
  else
  {
    v8 = *(_DWORD *)(v6 + 16);
    if (v8 && (v10 = *(_DWORD *)(v5 + 16), v9 = *(_DWORD *)(v5 + 20), v9 * v10))
    {
      sub_20E8BE654(1, 0, 1, v9, v8, v7, v8, *(double **)v5, *(double *)(a2 + 24), 0.0, v10, v4, 1);
    }
    else
    {
      v15 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v15)
        bzero(v4, 8 * v15);
    }
  }
}

void sub_20F20AEF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    MEMORY[0x212BC6368](a12, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

void sub_20F20AF20(uint64_t a1, uint64_t a2)
{
  double *v4;
  uint64_t v5;
  const double *v6;
  uint64_t v7;
  double *v8;
  int v9;
  int v10;
  size_t v11;
  double *v12;
  size_t v13;
  int v14;
  void *v15;
  size_t v16;
  unint64_t v17;

  v4 = *(double **)a1;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(const double **)(v5 + 8);
  v7 = **(_QWORD **)(a2 + 16);
  if (&v6[-*(unsigned int *)(v5 + 16)] == v4 || (v8 = *(double **)(v7 + 8), &v8[-*(unsigned int *)(v7 + 16)] == v4))
  {
    v9 = *(_DWORD *)v5;
    v10 = *(_DWORD *)v7;
    v11 = (8 * (*(_DWORD *)v7 * *(_DWORD *)v5) + 31) & 0xFFFFFFFE0;
    v16 = v11 >> 3;
    v15 = operator new(v11, (std::align_val_t)0x20uLL);
    v17 = __PAIR64__(v10, v9);
    sub_20F20AF20(&v15, a2);
    v12 = *(double **)a1;
    v13 = v16;
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v13;
    *(_QWORD *)(a1 + 16) = v17;
    if (v12)
      MEMORY[0x212BC6368](v12, 0x1000C8000313F17);
  }
  else if (*(_DWORD *)v5 && *(_DWORD *)v7)
  {
    sub_20E8BE654(0, 1, *(_DWORD *)v5, *(_DWORD *)v7, 3, v6, *(_DWORD *)(v5 + 4), v8, *(double *)(a2 + 24), 0.0, *(_DWORD *)(v7 + 4), v4, *(_DWORD *)(a1 + 16));
  }
  else
  {
    v14 = *(_DWORD *)(a1 + 20);
    if (v14 * *(_DWORD *)(a1 + 16))
      bzero(v4, 8 * (v14 * *(_DWORD *)(a1 + 16)));
  }
}

void sub_20F20B064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    MEMORY[0x212BC6368](a12, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

void sub_20F20B08C(uint64_t a1, uint64_t a2)
{
  double *v4;
  const double *v5;
  uint64_t v6;
  double *v7;
  int v8;
  size_t v9;
  double *v10;
  size_t v11;
  size_t v12;
  int v13;
  void *v14;
  size_t v15;
  int v16;

  v4 = *(double **)a1;
  v5 = *(const double **)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  if (v5 == v4 || (v7 = *(double **)(v6 + 8), &v7[-*(unsigned int *)(v6 + 16)] == v4))
  {
    v8 = *(_DWORD *)v6;
    v9 = (8 * (3 * *(_DWORD *)v6) + 31) & 0xFFFFFFFE0;
    v15 = v9 >> 3;
    v14 = operator new(v9, (std::align_val_t)0x20uLL);
    v16 = v8;
    sub_20F20B08C(&v14, a2);
    v10 = *(double **)a1;
    v11 = *(_QWORD *)(a1 + 8);
    v12 = v15;
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v12;
    v14 = v10;
    v15 = v11;
    *(_DWORD *)(a1 + 16) = v16;
    v16 = 0;
    if (v10)
      MEMORY[0x212BC6368](v10, 0x1000C8000313F17);
  }
  else if (*(_DWORD *)v6)
  {
    sub_20E8BE654(0, 0, 3, *(_DWORD *)v6, 3, v5, 3, v7, *(double *)(a2 + 24), 0.0, *(_DWORD *)(v6 + 4), v4, 3);
  }
  else
  {
    v13 = *(_DWORD *)(a1 + 16);
    if (v13)
      bzero(v4, 8 * (3 * v13));
  }
}

void sub_20F20B1C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    MEMORY[0x212BC6368](a12, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

void sub_20F20B1E8(uint64_t a1, uint64_t a2)
{
  double *v4;
  uint64_t v5;
  const double *v6;
  int v7;
  int v8;
  size_t v9;
  double *v10;
  size_t v11;
  int v12;
  void *v13;
  size_t v14;
  int v15;

  v4 = *(double **)a1;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = **(const double ***)(a2 + 8);
  if (v6 == v4 || *(double **)v5 == v4)
  {
    v8 = *(_DWORD *)(v5 + 16);
    v9 = (8 * (3 * v8) + 31) & 0xFFFFFFFE0;
    v14 = v9 >> 3;
    v13 = operator new(v9, (std::align_val_t)0x20uLL);
    v15 = v8;
    sub_20F20B1E8(&v13, a2);
    v10 = *(double **)a1;
    v11 = v14;
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = v11;
    *(_DWORD *)(a1 + 16) = v15;
    if (v10)
      MEMORY[0x212BC6368](v10, 0x1000C8000313F17);
  }
  else
  {
    v7 = *(_DWORD *)(v5 + 16);
    if (v7)
    {
      sub_20E8BE654(1, 0, 3, v7, 3, v6, 3, *(double **)v5, *(double *)(a2 + 24), 0.0, 3, v4, 3);
    }
    else
    {
      v12 = *(_DWORD *)(a1 + 16);
      if (v12)
        bzero(v4, 8 * (3 * v12));
    }
  }
}

void sub_20F20B30C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    MEMORY[0x212BC6368](a12, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

void sub_20F20B334(uint64_t a1, uint64_t a2)
{
  double *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  size_t v12;
  double *v13;
  size_t v14;
  int v15;
  void *v16;
  size_t v17;
  unint64_t v18;

  v4 = *(double **)a1;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = **(_QWORD **)(a2 + 16);
  if (*(double **)v5 == v4 || *(double **)v6 == v4)
  {
    v10 = *(_DWORD *)(v5 + 16);
    v11 = *(_DWORD *)(v6 + 16);
    v12 = (8 * v11 * v10 + 31) & 0xFFFFFFFE0;
    v17 = v12 >> 3;
    v16 = operator new(v12, (std::align_val_t)0x20uLL);
    v18 = __PAIR64__(v11, v10);
    sub_20F20B334(&v16, a2);
    v13 = *(double **)a1;
    v14 = v17;
    *(_QWORD *)a1 = v16;
    *(_QWORD *)(a1 + 8) = v14;
    *(_QWORD *)(a1 + 16) = v18;
    if (v13)
      MEMORY[0x212BC6368](v13, 0x1000C8000313F17);
  }
  else
  {
    v7 = *(_DWORD *)(v5 + 16);
    v8 = *(_DWORD *)(v5 + 20);
    if (v8 * v7 && (v9 = *(_DWORD *)(v6 + 16), v9 * *(_DWORD *)(v6 + 20)))
    {
      sub_20E8BE654(0, 1, v7, v9, v8, *(const double **)v5, v7, *(double **)v6, *(double *)(a2 + 24), 0.0, v9, v4, *(_DWORD *)(a1 + 16));
    }
    else
    {
      v15 = *(_DWORD *)(a1 + 20);
      if (v15 * *(_DWORD *)(a1 + 16))
        bzero(v4, 8 * (v15 * *(_DWORD *)(a1 + 16)));
    }
  }
}

void sub_20F20B468(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    MEMORY[0x212BC6368](a12, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

void sub_20F20B490(uint64_t a1, uint64_t a2)
{
  double *v4;
  uint64_t v5;
  size_t *v6;
  size_t v7;
  unint64_t v8;
  int v9;
  int v10;
  size_t v11;
  const double *v12;
  unsigned int v13;
  unsigned int v14;
  size_t v15;
  size_t v16;
  int v17[2];
  size_t v18;
  int __lda;
  int v20;
  void *v21;
  size_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = *(double **)a1;
  v5 = **(_QWORD **)(a2 + 16);
  if (*(double **)v5 == v4)
  {
    v13 = *(_DWORD *)(**(_QWORD **)(a2 + 8) + 16);
    v14 = *(_DWORD *)(v5 + 16);
    v15 = (8 * v14 * v13 + 31) & 0xFFFFFFFE0;
    v22 = v15 >> 3;
    v21 = operator new(v15, (std::align_val_t)0x20uLL);
    v23 = __PAIR64__(v14, v13);
    sub_20F20B490(&v21, a2);
    v12 = *(const double **)a1;
    v16 = v22;
    *(_QWORD *)a1 = v21;
    *(_QWORD *)(a1 + 8) = v16;
    *(_QWORD *)(a1 + 16) = v23;
    if (!v12)
      return;
    goto LABEL_9;
  }
  v6 = *(size_t **)(a2 + 8);
  v7 = *v6;
  v8 = v6[1];
  v9 = *(_DWORD *)(*v6 + 16);
  v10 = *(_DWORD *)(v8 + 20);
  if (v10 * v9 && *(_DWORD *)(v5 + 16) * *(_DWORD *)(v5 + 20))
  {
    v11 = (8 * (v10 * v9) + 31) & 0xFFFFFFFE0;
    v18 = v11 >> 3;
    *(_QWORD *)v17 = operator new(v11, (std::align_val_t)0x20uLL);
    __lda = v9;
    v20 = v10;
    v22 = v7;
    v23 = v8;
    v24 = 0x3FF0000000000000;
    sub_20F197DE0((uint64_t)v17, (uint64_t)&v21);
    sub_20E8BE654(0, 1, *(_DWORD *)(**(_QWORD **)(a2 + 8) + 16), *(_DWORD *)(**(_QWORD **)(a2 + 16) + 16), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) + 20), *(const double **)v17, __lda, ***(double ****)(a2 + 16), *(double *)(a2 + 24), 0.0, *(_DWORD *)(**(_QWORD **)(a2 + 16) + 16), *(double **)a1, *(_DWORD *)(a1 + 16));
    v12 = *(const double **)v17;
    if (!*(_QWORD *)v17)
      return;
LABEL_9:
    MEMORY[0x212BC6368](v12, 0x1000C8000313F17);
    return;
  }
  if (*(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16))
    bzero(v4, 8 * (*(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16)));
}

void sub_20F20B674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13)
    MEMORY[0x212BC6368](a13, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

void sub_20F20B6A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (!a16)
    JUMPOUT(0x20F20B698);
  JUMPOUT(0x20F20B684);
}

uint64_t sub_20F20B6B0(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;
  int v3;
  unsigned int v4;
  BOOL v5;
  int v6;
  unsigned int v7;
  unsigned int i;
  int v9;
  int64x2_t *v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  int64x2_t v14;
  uint64_t v15;
  int64x2_t *v16;
  int64x2_t v17;
  int64x2_t v18;
  int64x2_t v19;
  int64x2_t v20;
  uint64_t v21;
  int64x2_t *v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  uint64_t v27;
  int64x2_t *v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  uint64_t v33;
  int64x2_t *v34;
  int64x2_t v35;
  int64x2_t v36;
  int64x2_t v37;
  int64x2_t v38;
  uint64_t v39;
  int64x2_t *v40;
  int64x2_t v41;
  int64x2_t v42;
  int64x2_t v43;
  int64x2_t v44;
  uint64_t v45;
  int64x2_t v46;
  int64x2_t v47;
  int64x2_t v48;
  uint64_t v49;
  int64x2_t *v50;
  int64x2_t v51;
  int64x2_t v52;
  int64x2_t v53;
  int64x2_t v54;
  int64x2_t v55;
  int64x2_t v56;
  int64x2_t v57;
  int64x2_t v58;
  int64x2_t v59;
  int64x2_t v60;
  int64x2_t v61;
  int64x2_t v62;
  int64x2_t v63;
  int64x2_t v64;
  int64x2_t v65;
  int64x2_t v66;
  int64x2_t v67;
  int64x2_t v68;
  int64x2_t v69;
  int64x2_t v70;
  int64x2_t v71;
  int64x2_t v72;
  int64x2_t *v73;
  int64x2_t *v74;
  int64x2_t *v75;
  int64x2_t *v76;
  int64x2_t *v77;
  int64x2_t *v78;
  int64x2_t *v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  int64x2_t *v83;
  int64x2_t v84;
  int64x2_t v85;
  int64x2_t *v86;
  int64x2_t v87;
  int64x2_t v88;
  int64x2_t *v89;
  int64x2_t v90;
  int64x2_t v91;
  int64x2_t v92;
  unsigned int v93;
  int64x2_t *v94;
  int64x2_t v95;
  int64x2_t v96;
  int64x2_t *v97;
  int64x2_t v98;
  int64x2_t v99;
  int64x2_t v100;
  int64x2_t v101;
  int64x2_t *v102;
  int64x2_t v103;
  int64x2_t *v104;
  int64x2_t v105;
  int64x2_t v106;
  int64x2_t v107;
  int64x2_t *v108;
  int64x2_t v109;
  int64x2_t *v110;
  int64x2_t v111;
  int64x2_t v112;
  int64x2_t v113;
  int64x2_t v114;
  int64x2_t v115;
  int64x2_t v116;
  int64x2_t *v117;
  int64x2_t *v118;
  int64x2_t *v119;
  int64x2_t *v120;
  int64x2_t *v121;
  int64x2_t *v122;
  int v123;
  uint64_t v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  int v128;
  int v129;
  unsigned int v130;
  uint64_t v131;
  int v132;
  int v133;
  int v134;
  size_t v135;
  int64x2_t v136;
  int64x2_t v137;
  _DWORD v138[4];
  uint64_t v139;
  unsigned int v140;
  unsigned int v141;
  int v142;
  int *v143;
  int v144;
  int v145;
  int v146;
  int v147;
  uint64_t v148;
  unsigned int v149;
  int v150;
  int v151;
  int v152;
  uint64_t v153;
  unsigned int v154;

  v1 = result;
  v2 = *(_DWORD *)(result + 16);
  v3 = v2;
  if (v2 >= 8)
  {
    v6 = 0;
    v3 = *(_DWORD *)(result + 16) & 7;
    v7 = v2 & 0xFFFFFFF8;
    for (i = 8; i <= v2; i += 8)
    {
      v9 = 0;
      do
      {
        v80 = *(unsigned int *)(v1 + 16);
        v81 = v80 * v6;
        v82 = *(_QWORD *)v1;
        v83 = (int64x2_t *)(*(_QWORD *)v1 + 8 * (v6 + v9 + v80 * v6));
        if (v9)
        {
          v10 = (int64x2_t *)(v82 + 8 * (v6 + v80 * (v6 + v9)));
          v12 = v10[2];
          v11 = v10[3];
          v14 = *v10;
          v13 = v10[1];
          v15 = 8 * v80;
          v16 = (int64x2_t *)((char *)v10 + 8 * v80);
          v18 = v16[2];
          v17 = v16[3];
          v20 = *v16;
          v19 = v16[1];
          v21 = v80;
          v22 = &v10[v80];
          v24 = v22[2];
          v23 = v22[3];
          v26 = *v22;
          v25 = v22[1];
          v27 = 24 * v80;
          v28 = (int64x2_t *)((char *)v10 + 24 * v80);
          v30 = v28[2];
          v29 = v28[3];
          v32 = *v28;
          v31 = v28[1];
          v33 = 2 * v80;
          v34 = &v10[2 * v80];
          v36 = v34[2];
          v35 = v34[3];
          v38 = *v34;
          v37 = v34[1];
          v39 = 40 * v80;
          v40 = (int64x2_t *)((char *)v10 + 40 * v80);
          v42 = v40[2];
          v41 = v40[3];
          v44 = *v40;
          v43 = v40[1];
          v45 = 3 * v80;
          result = (uint64_t)v10[3 * v80].i64;
          v47 = *(int64x2_t *)(result + 32);
          v46 = *(int64x2_t *)(result + 48);
          v48 = *(int64x2_t *)(result + 16);
          v49 = 7 * v80;
          v50 = (int64x2_t *)((char *)v10 + 8 * v49);
          v136 = vzip2q_s64(v14, v20);
          v137 = vzip1q_s64(v14, v20);
          v51 = vzip1q_s64(v26, v32);
          v26.i64[0] = vdupq_laneq_s64(v26, 1).u64[0];
          v26.i64[1] = v32.i64[1];
          v52 = vzip1q_s64(v38, v44);
          v38.i64[0] = vdupq_laneq_s64(v38, 1).u64[0];
          v38.i64[1] = v44.i64[1];
          v53 = vzip1q_s64(*(int64x2_t *)result, *v50);
          v54.i64[0] = vdupq_laneq_s64(*(int64x2_t *)result, 1).u64[0];
          v54.i64[1] = v50->i64[1];
          v55 = vzip1q_s64(v13, v19);
          v56 = vzip2q_s64(v13, v19);
          v57 = vzip1q_s64(v25, v31);
          v25.i64[0] = vdupq_laneq_s64(v25, 1).u64[0];
          v25.i64[1] = v31.i64[1];
          v58 = vzip1q_s64(v37, v43);
          v37.i64[0] = vdupq_laneq_s64(v37, 1).u64[0];
          v37.i64[1] = v43.i64[1];
          v43.i64[0] = vdupq_laneq_s64(v48, 1).u64[0];
          v59 = vzip1q_s64(v48, v50[1]);
          v43.i64[1] = v50[1].i64[1];
          v60 = vzip1q_s64(v12, v18);
          v61 = vzip2q_s64(v12, v18);
          v62 = vzip1q_s64(v24, v30);
          v24.i64[0] = vdupq_laneq_s64(v24, 1).u64[0];
          v24.i64[1] = v30.i64[1];
          v30.i64[0] = vdupq_laneq_s64(v36, 1).u64[0];
          v63 = vzip1q_s64(v36, v42);
          v30.i64[1] = v42.i64[1];
          v64 = vzip1q_s64(v47, v50[2]);
          v47.i64[0] = vdupq_laneq_s64(v47, 1).u64[0];
          v47.i64[1] = v50[2].i64[1];
          v65 = vzip1q_s64(v11, v17);
          v66 = vzip2q_s64(v11, v17);
          v68.i64[0] = vdupq_laneq_s64(v23, 1).u64[0];
          v67 = vzip1q_s64(v23, v29);
          v68.i64[1] = v29.i64[1];
          v69 = vzip1q_s64(v35, v41);
          v70.i64[0] = vdupq_laneq_s64(v35, 1).u64[0];
          v70.i64[1] = v41.i64[1];
          v71 = vzip1q_s64(v46, v50[3]);
          v72.i64[0] = vdupq_laneq_s64(v46, 1).u64[0];
          v72.i64[1] = v50[3].i64[1];
          v83[2] = v52;
          v83[3] = v53;
          *v83 = v137;
          v83[1] = v51;
          v73 = (int64x2_t *)((char *)v83 + v15);
          *v73 = v136;
          v73[1] = v26;
          v73[2] = v38;
          v73[3] = v54;
          v74 = &v83[v21];
          *v74 = v55;
          v74[1] = v57;
          v74[2] = v58;
          v74[3] = v59;
          v75 = (int64x2_t *)((char *)v83 + v27);
          *v75 = v56;
          v75[1] = v25;
          v75[2] = v37;
          v75[3] = v43;
          v76 = &v83[v33];
          *v76 = v60;
          v76[1] = v62;
          v76[2] = v63;
          v76[3] = v64;
          v77 = (int64x2_t *)((char *)v83 + v39);
          *v77 = v61;
          v77[1] = v24;
          v77[2] = v30;
          v77[3] = v47;
          v78 = &v83[v45];
          v78[2] = v69;
          v78[3] = v71;
          *v78 = v65;
          v78[1] = v67;
        }
        else
        {
          v84 = *(int64x2_t *)(v82 + 8 * (v81 + v6));
          v85 = *(int64x2_t *)(v82 + 8 * (v81 + v6 + v80));
          v86 = (int64x2_t *)(v82 + 8 * (v81 + v6 + 2 * v80));
          v87 = *v86;
          v88 = v86[1];
          v89 = (int64x2_t *)(v82 + 8 * (v81 + v6 + 3 * v80));
          v91 = *v89;
          v90 = v89[1];
          v92.i64[0] = vdupq_laneq_s64(*v86, 1).u64[0];
          v92.i64[1] = v89->i64[1];
          v93 = v81 + v6 + 4 * v80;
          v94 = (int64x2_t *)(v82 + 8 * v93);
          v96 = *v94;
          v95 = v94[1];
          v97 = &v94[v80];
          v99 = *v97;
          v98 = v97[1];
          v93 += 4;
          v100 = *(int64x2_t *)(v82 + 8 * v93);
          v101 = *(int64x2_t *)(v82 + 8 * (v93 + v80));
          v102 = (int64x2_t *)((char *)v94 + 24 * v80);
          v66 = *v102;
          v68 = v102[1];
          result = 8 * v80;
          v103.i64[0] = vdupq_laneq_s64(*v97, 1).u64[0];
          v103.i64[1] = v66.i64[1];
          v104 = (int64x2_t *)((char *)v94 + 8 * v80);
          v105.i64[0] = vdupq_laneq_s64(v98, 1).u64[0];
          v105.i64[1] = v68.i64[1];
          v107 = *v104;
          v106 = v104[1];
          v108 = (int64x2_t *)(v82 + 8 * (v93 + 2 * (_DWORD)v80));
          v109 = *v108;
          v110 = (int64x2_t *)(v82 + 8 * (v93 + 3 * (_DWORD)v80));
          v70 = *v110;
          v72 = v110[1];
          v111 = vzip1q_s64(v96, *v104);
          v112 = vzip1q_s64(*v97, v66);
          v113 = vzip2q_s64(v96, *v104);
          v114.i64[0] = vdupq_laneq_s64(*v108, 1).u64[0];
          v114.i64[1] = v110->i64[1];
          v115 = vzip1q_s64(v108[1], v72);
          v116 = vzip1q_s64(*v108, *v110);
          *v83 = vzip1q_s64(v84, v85);
          v83[1] = vzip1q_s64(v87, v91);
          v83[2] = v111;
          v83[3] = v112;
          v117 = (int64x2_t *)((char *)v83 + 8 * v80);
          *v117 = v85;
          v117[1] = v92;
          v117[2] = v113;
          v117[3] = v103;
          v118 = &v83[v80];
          *v118 = v87;
          v118[1] = vzip1q_s64(v88, v90);
          v118[2] = vzip1q_s64(v95, v106);
          v118[3] = vzip1q_s64(v98, v68);
          v119 = (int64x2_t *)((char *)v83 + 24 * v80);
          *v119 = v91;
          v119[1] = v90;
          v119[2] = vzip2q_s64(v95, v106);
          v119[3] = v105;
          v120 = &v83[2 * v80];
          *v120 = v96;
          v120[1] = v95;
          v120[2] = vzip1q_s64(v100, v101);
          v120[3] = v116;
          v121 = (int64x2_t *)((char *)v83 + 40 * v80);
          *v121 = v107;
          v121[1] = v106;
          v121[2] = v101;
          v121[3] = v114;
          v122 = &v83[3 * v80];
          v122[2] = v109;
          v122[3] = v115;
          v49 = 7 * v80;
          *v122 = v99;
          v122[1] = v98;
        }
        v79 = (int64x2_t *)((char *)v83 + 8 * v49);
        *v79 = v66;
        v79[1] = v68;
        v79[2] = v70;
        v79[3] = v72;
        v9 += 8;
      }
      while (v6 + v9 + 8 <= v2);
      if ((v2 & 7) != 0)
      {
        v123 = *(_DWORD *)(v1 + 16);
        v124 = *(_QWORD *)v1;
        v145 = v2 & 7;
        v146 = 8;
        v147 = v123;
        v148 = v124 + 8 * (v7 + v123 * v6);
        v149 = v7 + v123 * v6;
        v150 = 8;
        v151 = v145;
        v152 = v123;
        v153 = v124 + 8 * (v6 + v123 * v7);
        v154 = v6 + v123 * v7;
        result = sub_20F208E50((uint64_t)&v145, (uint64_t)&v150);
      }
      v6 += 8;
    }
  }
  v4 = v2 & 0xFFFFFFF8;
  if (v3)
    v5 = v4 >= v2;
  else
    v5 = 1;
  if (!v5)
  {
    v125 = v2 & 0xFFFFFFF8;
    do
    {
      v127 = v125 + 8;
      if (v125 + 8 <= v2)
        v128 = 8;
      else
        v128 = v2 - v125;
      v129 = *(_DWORD *)(v1 + 16);
      v130 = v125 + v129 * v4;
      v131 = *(_QWORD *)v1;
      v150 = v128;
      v151 = v3;
      v152 = v129;
      v153 = v131 + 8 * v130;
      v154 = v130;
      if (v4 == v125)
      {
        v141 = v128;
        v142 = v3;
        v143 = &v145;
        v144 = 0;
        v138[0] = v128;
        v138[1] = v3;
        v138[2] = v129;
        v139 = v131 + 8 * v130;
        v140 = v125 + v129 * v4;
        result = sub_20F20BBD4((unint64_t)&v141, (uint64_t)v138);
        if (v141)
        {
          v132 = v142;
          if (v142)
          {
            v133 = 0;
            v134 = 0;
            v135 = 8 * v141;
            do
            {
              result = (uint64_t)memmove((void *)(v153 - 8 * v154 + 8 * (v154 + v152 * v134++)), &v143[2 * (v133 + v144) + -2 * v144], v135);
              v133 += 8;
            }
            while (v132 != v134);
          }
        }
      }
      else
      {
        v126 = v4 + v129 * v125;
        v145 = v3;
        v146 = v128;
        v147 = v129;
        v148 = v131 + 8 * v126;
        v149 = v126;
        result = sub_20F208E50((uint64_t)&v150, (uint64_t)&v145);
      }
      v125 = v127;
    }
    while (v127 < v2);
  }
  return result;
}

unint64_t sub_20F20BBD4(unint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int32x4_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  size_t v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  int v43;
  uint64_t v44;
  unsigned int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  int v58;
  int v59;
  unsigned int v60;
  unint64_t v61;
  int32x4_t v62;
  int32x4_t v63;
  unsigned int v64;
  unint64_t v65;
  _QWORD *v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  BOOL v74;
  uint64_t v75;
  int v76;
  int v77;
  unsigned int v78;
  int32x4_t v79;
  int32x4_t v80;
  unsigned int v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  int v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  int v96;
  int v97;
  unsigned int v98;
  unint64_t v99;
  int32x4_t v100;
  int32x4_t v101;
  unsigned int v102;
  unint64_t v103;
  _QWORD *v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  BOOL v112;
  int v113;
  unsigned int v114;
  int32x4_t v115;
  int32x4_t v116;
  unsigned int v117;
  unint64_t v118;
  unsigned int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int64x2_t v123;
  int64x2_t v124;
  int64x2_t *v125;
  int64x2_t v126;
  int64x2_t v127;
  int64x2_t *v128;
  int64x2_t v129;
  int64x2_t v130;
  __int128 v131;
  int64x2_t *v132;
  int64x2_t v133;
  int64x2_t v134;
  int64x2_t *v135;
  int64x2_t v136;
  int64x2_t v137;
  int64x2_t *v138;
  int64x2_t v139;
  int64x2_t v140;
  int64x2_t *v141;
  int64x2_t v142;
  int64x2_t v143;
  int64x2_t v144;
  __int128 v145;
  __int128 v146;
  int64x2_t v147;
  int64x2_t v148;
  int64x2_t *v149;
  int64x2_t v150;
  int64x2_t *v151;
  int64x2_t v152;
  __int128 v153;
  int64x2_t v154;
  int64x2_t v155;
  unsigned int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  __int128 *v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 *v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 *v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 *v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 *v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 *v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 *v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 *v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  int64x2_t *v206;
  int64x2_t v207;
  int64x2_t v208;
  int64x2_t v209;
  int64x2_t *v210;
  int64x2_t v211;
  int64x2_t v212;
  int64x2_t v213;
  int64x2_t *v214;
  int64x2_t v215;
  int64x2_t v216;
  int64x2_t v217;
  int64x2_t *v218;
  int64x2_t *v219;
  int64x2_t v220;
  int64x2_t v221;
  int64x2_t v222;
  int64x2_t *v223;
  int64x2_t *v224;
  int64x2_t v225;
  int64x2_t v226;
  int64x2_t v227;
  int64x2_t *v228;
  __int128 v229;
  __int128 v230;
  int64x2_t v231;
  int64x2_t v232;
  int64x2_t v233;
  __int128 v234;
  int64x2_t v235;
  int64x2_t v236;
  int64x2_t v237;
  int64x2_t v238;
  int64x2_t v239;
  int64x2_t v240;
  int64x2_t v241;
  int64x2_t v242;
  int64x2_t v243;
  int64x2_t v244;
  int64x2_t v245;
  int64x2_t v246;
  int64x2_t v247;
  int64x2_t v248;
  int64x2_t v249;
  unsigned int v250;
  unsigned int v251;
  uint64_t v252;
  unsigned int v253;
  unsigned int v254;
  int v255;
  unsigned int v256;
  int v257;
  int v258;
  unsigned int v259;
  int v260;
  unsigned int v261;
  unint64_t v262;
  unsigned int v263;
  int v264;
  int v265;
  uint64_t v266;
  int64x2_t v267;
  _QWORD v268[65];

  v262 = result;
  v2 = *(_DWORD *)(a2 + 4);
  if (v2)
  {
    v3 = a2;
    v4 = 0;
    v5 = 0;
    v6 = *(_DWORD *)v3;
    v7 = *(_DWORD *)v3 & 7;
    v250 = *(_DWORD *)v3 & 0xFFFFFFF8;
    v251 = v2;
    v258 = 2 * v7;
    v259 = *(_DWORD *)v3;
    v257 = -2 * v7;
    v8.i64[0] = -1;
    v8.i64[1] = -1;
    v9 = v2;
    v252 = v3;
    while (1)
    {
      v10 = v9;
      if (v9 <= 1uLL)
        v10 = 1;
      v11 = v9 <= 1 ? 1 : v9;
      v266 = v11;
      v253 = v5 + 8;
      v254 = v9;
      v255 = v4;
      if (v5 + 8 <= v2)
        break;
      v256 = v2 - v5;
      if (v2 - v5 == 8)
        break;
      if (v6)
      {
        v12 = 0;
        v13 = 8 * v10;
        v260 = 8 * v5;
        v261 = v5;
        v264 = v4;
        v265 = 0;
        while (1)
        {
          if (v6 >= v12 + 8)
            v14 = v12 + 8;
          else
            v14 = v6;
          v15 = v6 - v12;
          if (v12 + 8 <= v6)
            v15 = 8;
          v16 = *(unsigned int *)(v262 + 16);
          v17 = *(_QWORD *)(v262 + 8) - 8 * v16;
          v18 = v12 + v260 + v16;
          v263 = v12 + 8;
          if (v5 == v12)
          {
            v19 = v17 + 8 * v18;
            if (v15 * v256)
              v20 = (_QWORD *)(v17 + 8 * v18);
            else
              v20 = 0;
            v21 = (_QWORD *)(v19 + 64 * v256);
            if (!(v15 * v256))
              v21 = 0;
            if (v20 != v21)
            {
              v22 = 0;
              v23 = 0;
              v24 = *(_DWORD *)(v3 + 8);
              v25 = *(_QWORD *)(v3 + 16)
                  - 8 * *(unsigned int *)(v3 + 24)
                  + 8 * (*(_DWORD *)(v3 + 24) + v261 + v24 * v261);
              do
              {
                v26 = HIDWORD(v22);
                if (v22 <= HIDWORD(v22))
                  v27 = HIDWORD(v22);
                else
                  v27 = v22;
                if (v22 < HIDWORD(v22))
                  LODWORD(v26) = v22;
                *v20 = *(_QWORD *)(v25 + 8 * (v26 + v27 * v24));
                v28 = (v22 + 1);
                v29 = v22 & 0xFFFFFFFF00000000;
                v30 = v29 | v28;
                v22 = v29 + 0x100000000;
                if (v15 > (int)v28)
                  v22 = v30;
                if (v23 + 1 >= v15)
                  v31 = 8 - v15;
                else
                  v31 = 0;
                v20 += v31 + 1;
                if (v23 + 1 < v15)
                  ++v23;
                else
                  v23 = 0;
              }
              while (v20 != v21);
            }
            goto LABEL_13;
          }
          v32 = *(unsigned int *)(v3 + 24);
          v33 = *(_QWORD *)(v3 + 16) - 8 * v32;
          v34 = *(_DWORD *)(v3 + 8);
          if (v12 < v5)
          {
            if (v15)
            {
              v35 = 0;
              v36 = 8 * v15;
              v37 = v32 + v12 + v261 * v34;
              do
              {
                memcpy(&v268[v35 & 0xFFFFFFF8], (const void *)(v33 + 8 * v37), v36);
                v35 += 8;
                v37 += v34;
              }
              while (v13 != v35);
              v38 = 0;
              v39 = v16 + v264;
              v3 = v252;
              do
              {
                result = (unint64_t)memcpy((void *)(v17 + 8 * (v39 + v38)), &v268[v38], v36);
                v8.i64[0] = -1;
                v8.i64[1] = -1;
                v38 += 8;
              }
              while (v13 != v38);
            }
            goto LABEL_13;
          }
          if (v15)
            break;
LABEL_13:
          v264 += 8;
          ++v265;
          v12 = v263;
          v6 = v259;
          v5 = v261;
          if (v263 >= v259)
            goto LABEL_3;
        }
        v40 = 0;
        result = 0;
        v41 = v14 - 8 * v265;
        v42 = 16 * v265;
        v43 = 2 * v14;
        v44 = v33 + 8 * ((_DWORD)v32 + v261 + v34 * v12);
        if (v15 >= 0)
          v45 = v15;
        else
          v45 = -v15;
        v46 = v43 - v42;
        v47 = v42 - v43;
        while (1)
        {
          v51 = HIDWORD(result);
          if (v45 >> 4 > 0x270)
          {
            v54 = v15 + result + v15 * HIDWORD(result);
            v55 = (v54 / v15);
            v56 = (v54 % v15);
            v57 = v56 | (v55 << 32);
            v53 = (v56 + v15) | ((unint64_t)(v55 - 1) << 32);
            if ((int)v56 >= 0)
              v53 = v57;
            goto LABEL_78;
          }
          v52 = (v15 + result);
          if (v15 + (int)result >= 0)
          {
            v53 = result & 0xFFFFFFFF00000000 | v52;
            if ((int)v52 >= v15)
              goto LABEL_75;
            goto LABEL_78;
          }
          v58 = (v46 + result) & ~((v46 + (int)result) >> 31);
          v59 = v42 + v58 == v43 + (_DWORD)result ? 1 : 2;
          v60 = v59 + (v47 + v58 - (v42 + v58 != v43 + (_DWORD)result) - result) / v41;
          if (v60 < 8)
            break;
          LODWORD(v52) = v52 + (v60 & 0xFFFFFFF8) * v41;
          v62 = 0uLL;
          v63 = (int32x4_t)HIDWORD(result);
          v64 = v60 & 0xFFFFFFF8;
          do
          {
            v63 = vaddq_s32(v63, v8);
            v62 = vaddq_s32(v62, v8);
            v64 -= 8;
          }
          while (v64);
          v61 = vaddvq_s32(vaddq_s32(v62, v63));
          if (v60 != (v60 & 0xFFFFFFF8))
            goto LABEL_73;
LABEL_74:
          v53 = v52 | (v61 << 32);
          if ((int)v52 >= v15)
          {
LABEL_75:
            v65 = HIDWORD(v53);
            do
            {
              v52 = (v52 - v15);
              v65 = (v65 + 1);
            }
            while ((int)v52 >= v15);
            v53 = v52 | (v65 << 32);
          }
LABEL_78:
          if ((_DWORD)result != (_DWORD)v53 || HIDWORD(result) != HIDWORD(v53))
          {
            v67 = (_QWORD *)(v17 + 8 * (v18 + 8 * (_DWORD)v40));
            LODWORD(v68) = result;
            v69 = result;
            do
            {
              *v67++ = *(_QWORD *)(v44 + 8 * (HIDWORD(v69) + v68 * v34));
              v70 = (v68 + 1);
              v71 = v69 & 0xFFFFFFFF00000000;
              v72 = v71 | v70;
              v73 = v71 + 0x100000000;
              if (v15 <= (int)v70)
                v68 = v73;
              else
                v68 = v72;
              v74 = (_DWORD)v68 == (_DWORD)v53 && HIDWORD(v68) == HIDWORD(v53);
              v69 = v68;
            }
            while (!v74);
          }
          if (v45 >> 4 > 0x270)
          {
            v48 = v15 + result + v15 * HIDWORD(result);
            v49 = (v48 / v15);
            v50 = (v48 % v15);
            if ((v50 & 0x80000000) != 0)
            {
              v50 = (v50 + v15);
              v49 = (v49 - 1);
            }
            result = v50 | (v49 << 32);
            goto LABEL_57;
          }
          v75 = (v15 + result);
          if (v15 + (int)result < 0)
          {
            v76 = (v46 + result) & ~((v46 + (int)result) >> 31);
            if (v42 + v76 == v43 + (_DWORD)result)
              v77 = 1;
            else
              v77 = 2;
            v78 = v77 + (v47 + v76 - (v42 + v76 != v43 + (_DWORD)result) - result) / v41;
            if (v78 < 8)
              goto LABEL_168;
            LODWORD(v75) = v75 + (v78 & 0xFFFFFFF8) * v41;
            v79 = 0uLL;
            v80 = (int32x4_t)v51;
            v81 = v78 & 0xFFFFFFF8;
            do
            {
              v80 = vaddq_s32(v80, v8);
              v79 = vaddq_s32(v79, v8);
              v81 -= 8;
            }
            while (v81);
            v51 = vaddvq_s32(vaddq_s32(v79, v80));
            if (v78 != (v78 & 0xFFFFFFF8))
            {
LABEL_168:
              do
              {
                LODWORD(v75) = v75 + v15;
                v51 = (v51 - 1);
              }
              while ((v75 & 0x80000000) != 0);
            }
            result = v75 | (v51 << 32);
            if ((int)v75 < v15)
              goto LABEL_57;
LABEL_104:
            v82 = HIDWORD(result);
            do
            {
              v75 = (v75 - v15);
              v82 = (v82 + 1);
            }
            while ((int)v75 >= v15);
            result = v75 | (v82 << 32);
            goto LABEL_57;
          }
          result = result & 0xFFFFFFFF00000000 | v75;
          if ((int)v75 >= v15)
            goto LABEL_104;
LABEL_57:
          if (++v40 == v266)
            goto LABEL_13;
        }
        v61 = HIDWORD(result);
        do
        {
LABEL_73:
          LODWORD(v52) = v52 + v15;
          v61 = (v61 - 1);
        }
        while ((v52 & 0x80000000) != 0);
        goto LABEL_74;
      }
LABEL_3:
      v9 = v254 - 8;
      v4 = v255 + 64;
      v5 = v253;
      v2 = v251;
      if (v253 >= v251)
        return result;
    }
    if (v6 >= 8)
    {
      v119 = 0;
      do
      {
        v157 = *(_QWORD *)(v262 + 8) - 8 * *(unsigned int *)(v262 + 16) + 8 * (v4 + v119 + *(_DWORD *)(v262 + 16));
        if (v5 == v119)
        {
          v120 = *(unsigned int *)(v3 + 24);
          v121 = *(_QWORD *)(v3 + 16) - 8 * v120;
          v122 = *(unsigned int *)(v3 + 8);
          LODWORD(v120) = v120 + v5 + v122 * v5;
          v123 = *(int64x2_t *)(v121 + 8 * v120);
          v124 = *(int64x2_t *)(v121 + 8 * (v120 + v122));
          v125 = (int64x2_t *)(v121 + 8 * (v120 + 2 * v122));
          v126 = *v125;
          v127 = v125[1];
          LODWORD(v125) = 3 * v122;
          v128 = (int64x2_t *)(v121 + 8 * (v120 + 3 * v122));
          v130 = *v128;
          v129 = v128[1];
          *(_QWORD *)&v131 = vdupq_laneq_s64(v126, 1).u64[0];
          *((_QWORD *)&v131 + 1) = v128->i64[1];
          LODWORD(v120) = v120 + 4 * v122;
          v132 = (int64x2_t *)(v121 + 8 * v120);
          v134 = *v132;
          v133 = v132[1];
          v135 = (int64x2_t *)((char *)v132 + 8 * v122);
          v137 = *v135;
          v136 = v135[1];
          v138 = &v132[v122];
          v140 = *v138;
          v139 = v138[1];
          v141 = (int64x2_t *)((char *)v132 + 24 * v122);
          v143 = *v141;
          v142 = v141[1];
          v144 = vzip1q_s64(*v138, *v141);
          *(_QWORD *)&v145 = vdupq_laneq_s64(*v138, 1).u64[0];
          *((_QWORD *)&v145 + 1) = v141->i64[1];
          *(_QWORD *)&v146 = vdupq_laneq_s64(v139, 1).u64[0];
          *((_QWORD *)&v146 + 1) = v141[1].i64[1];
          LODWORD(v120) = v120 + 4;
          v147 = *(int64x2_t *)(v121 + 8 * v120);
          v148 = *(int64x2_t *)(v121 + 8 * (v120 + v122));
          v149 = (int64x2_t *)(v121 + 8 * (v120 + 2 * v122));
          v150 = *v149;
          v151 = (int64x2_t *)(v121 + 8 * (v120 + (_DWORD)v125));
          v152 = v151[1];
          *(_QWORD *)&v153 = vdupq_laneq_s64(*v149, 1).u64[0];
          *((_QWORD *)&v153 + 1) = v151->i64[1];
          v154 = vzip1q_s64(v149[1], v152);
          v155 = vzip1q_s64(*v149, *v151);
          *(int64x2_t *)(v157 + 480) = *v151;
          *(int64x2_t *)(v157 + 496) = v152;
          *(int64x2_t *)(v157 + 448) = v143;
          *(int64x2_t *)(v157 + 464) = v142;
          *(int64x2_t *)(v157 + 416) = v150;
          *(int64x2_t *)(v157 + 432) = v154;
          *(int64x2_t *)(v157 + 384) = v140;
          *(int64x2_t *)(v157 + 400) = v139;
          *(int64x2_t *)(v157 + 320) = v137;
          *(int64x2_t *)(v157 + 336) = v136;
          *(int64x2_t *)(v157 + 256) = v134;
          *(int64x2_t *)(v157 + 272) = v133;
          *(int64x2_t *)(v157 + 224) = vzip2q_s64(v133, v136);
          *(_OWORD *)(v157 + 240) = v146;
          *(int64x2_t *)(v157 + 192) = v130;
          *(int64x2_t *)(v157 + 208) = v129;
          *(int64x2_t *)(v157 + 160) = vzip1q_s64(v133, v136);
          *(int64x2_t *)(v157 + 176) = vzip1q_s64(v139, v142);
          *(int64x2_t *)(v157 + 128) = v126;
          *(int64x2_t *)(v157 + 144) = vzip1q_s64(v127, v129);
          *(int64x2_t *)(v157 + 96) = vzip2q_s64(v134, v137);
          *(_OWORD *)(v157 + 112) = v145;
          *(int64x2_t *)(v157 + 64) = v124;
          *(_OWORD *)(v157 + 80) = v131;
          *(int64x2_t *)(v157 + 32) = vzip1q_s64(v134, v137);
          *(int64x2_t *)(v157 + 48) = v144;
          *(int64x2_t *)v157 = vzip1q_s64(v123, v124);
          *(int64x2_t *)(v157 + 16) = vzip1q_s64(v126, v130);
          *(int64x2_t *)(v157 + 352) = v148;
          *(_OWORD *)(v157 + 368) = v153;
          *(int64x2_t *)(v157 + 288) = vzip1q_s64(v147, v148);
          *(int64x2_t *)(v157 + 304) = v155;
        }
        else
        {
          v158 = *(unsigned int *)(v3 + 24);
          v159 = *(_QWORD *)(v3 + 16) - 8 * v158;
          v160 = *(unsigned int *)(v3 + 8);
          v161 = v160;
          v162 = 3 * v160;
          v163 = 2 * v160;
          v164 = 5 * v160;
          v165 = 3 * v160;
          v166 = 7 * v160;
          if (v119 >= v5)
          {
            result = (_DWORD)v158 + v5 + (_DWORD)v160 * v119;
            v206 = (int64x2_t *)(v159 + 8 * result);
            v208 = v206[2];
            v207 = v206[3];
            v209 = v206[1];
            v210 = (int64x2_t *)((char *)v206 + 8 * v160);
            v212 = v210[2];
            v211 = v210[3];
            v213 = v210[1];
            v214 = &v206[v161];
            v216 = v214[2];
            v215 = v214[3];
            v217 = v214[1];
            v218 = (int64x2_t *)((char *)v206 + 8 * v162);
            v219 = &v206[v163];
            v221 = v219[2];
            v220 = v219[3];
            v222 = v219[1];
            v223 = (int64x2_t *)((char *)v206 + 8 * v164);
            v224 = &v206[v165];
            v226 = v224[2];
            v225 = v224[3];
            v227 = v224[1];
            v228 = (int64x2_t *)((char *)v206 + 8 * v166);
            v267 = vzip1q_s64(*v214, *v218);
            *(_QWORD *)&v229 = vdupq_laneq_s64(*v214, 1).u64[0];
            *((_QWORD *)&v229 + 1) = v218->i64[1];
            *(_QWORD *)&v230 = vdupq_laneq_s64(*v219, 1).u64[0];
            *((_QWORD *)&v230 + 1) = v223->i64[1];
            v231 = vzip1q_s64(*v206, *v210);
            v232 = vzip2q_s64(*v206, *v210);
            v233 = vzip1q_s64(*v224, *v228);
            *(_QWORD *)&v234 = vdupq_laneq_s64(*v224, 1).u64[0];
            *((_QWORD *)&v234 + 1) = v228->i64[1];
            v235 = vzip1q_s64(v217, v218[1]);
            v217.i64[0] = vdupq_laneq_s64(v217, 1).u64[0];
            v217.i64[1] = v218[1].i64[1];
            v236 = vzip1q_s64(v209, v213);
            v237 = vzip2q_s64(v209, v213);
            v238 = vzip1q_s64(v222, v223[1]);
            v222.i64[0] = vdupq_laneq_s64(v222, 1).u64[0];
            v222.i64[1] = v223[1].i64[1];
            v239 = vzip1q_s64(v227, v228[1]);
            v227.i64[0] = vdupq_laneq_s64(v227, 1).u64[0];
            v227.i64[1] = v228[1].i64[1];
            v240 = vzip1q_s64(v208, v212);
            v241 = vzip2q_s64(v208, v212);
            v242 = vzip1q_s64(v216, v218[2]);
            v216.i64[0] = vdupq_laneq_s64(v216, 1).u64[0];
            v216.i64[1] = v218[2].i64[1];
            v243 = vzip1q_s64(v221, v223[2]);
            v221.i64[0] = vdupq_laneq_s64(v221, 1).u64[0];
            v221.i64[1] = v223[2].i64[1];
            v244 = vzip1q_s64(v226, v228[2]);
            v226.i64[0] = vdupq_laneq_s64(v226, 1).u64[0];
            v226.i64[1] = v228[2].i64[1];
            v245 = vzip1q_s64(v207, v211);
            v246 = vzip2q_s64(v207, v211);
            v247 = vzip1q_s64(v215, v218[3]);
            v215.i64[0] = vdupq_laneq_s64(v215, 1).u64[0];
            v215.i64[1] = v218[3].i64[1];
            v248 = vzip1q_s64(v220, v223[3]);
            v220.i64[0] = vdupq_laneq_s64(v220, 1).u64[0];
            v220.i64[1] = v223[3].i64[1];
            v249 = vzip1q_s64(v225, v228[3]);
            v225.i64[0] = vdupq_laneq_s64(v225, 1).u64[0];
            v225.i64[1] = v228[3].i64[1];
            *(int64x2_t *)(v157 + 32) = vzip1q_s64(*v219, *v223);
            *(int64x2_t *)(v157 + 48) = v233;
            *(int64x2_t *)v157 = v231;
            *(int64x2_t *)(v157 + 16) = v267;
            *(_OWORD *)(v157 + 96) = v230;
            *(_OWORD *)(v157 + 112) = v234;
            *(int64x2_t *)(v157 + 64) = v232;
            *(_OWORD *)(v157 + 80) = v229;
            *(int64x2_t *)(v157 + 160) = v238;
            *(int64x2_t *)(v157 + 176) = v239;
            *(int64x2_t *)(v157 + 128) = v236;
            *(int64x2_t *)(v157 + 144) = v235;
            *(int64x2_t *)(v157 + 224) = v222;
            *(int64x2_t *)(v157 + 240) = v227;
            *(int64x2_t *)(v157 + 192) = v237;
            *(int64x2_t *)(v157 + 208) = v217;
            *(int64x2_t *)(v157 + 288) = v243;
            *(int64x2_t *)(v157 + 304) = v244;
            *(int64x2_t *)(v157 + 256) = v240;
            *(int64x2_t *)(v157 + 272) = v242;
            *(int64x2_t *)(v157 + 352) = v221;
            *(int64x2_t *)(v157 + 368) = v226;
            *(int64x2_t *)(v157 + 320) = v241;
            *(int64x2_t *)(v157 + 336) = v216;
            *(int64x2_t *)(v157 + 416) = v248;
            *(int64x2_t *)(v157 + 432) = v249;
            *(int64x2_t *)(v157 + 384) = v245;
            *(int64x2_t *)(v157 + 400) = v247;
            *(int64x2_t *)(v157 + 480) = v220;
            *(int64x2_t *)(v157 + 496) = v225;
            *(int64x2_t *)(v157 + 448) = v246;
            *(int64x2_t *)(v157 + 464) = v215;
          }
          else
          {
            result = v119 + (_DWORD)v158 + v5 * (_DWORD)v160;
            v167 = (__int128 *)(v159 + 8 * result);
            v168 = *v167;
            v169 = v167[1];
            v170 = v167[3];
            v171 = (__int128 *)((char *)v167 + 8 * v160);
            v172 = *v171;
            v173 = v171[1];
            v174 = v171[2];
            v175 = v171[3];
            v176 = &v167[v161];
            v177 = *v176;
            v178 = v176[1];
            v179 = v176[2];
            v180 = v176[3];
            v181 = (__int128 *)((char *)v167 + 8 * v162);
            v182 = *v181;
            v183 = v181[1];
            v184 = v181[2];
            v185 = v181[3];
            v186 = &v167[v163];
            v187 = *v186;
            v188 = v186[1];
            v189 = v186[2];
            v190 = v186[3];
            v191 = (__int128 *)((char *)v167 + 8 * v164);
            v192 = *v191;
            v193 = v191[1];
            v194 = v191[2];
            v195 = v191[3];
            v196 = &v167[v165];
            v197 = *v196;
            v198 = v196[1];
            v199 = v196[2];
            v200 = v196[3];
            v201 = (__int128 *)((char *)v167 + 8 * v166);
            v202 = *v201;
            v203 = v201[1];
            v204 = v201[2];
            v205 = v201[3];
            *(_OWORD *)(v157 + 32) = v167[2];
            *(_OWORD *)(v157 + 48) = v170;
            *(_OWORD *)v157 = v168;
            *(_OWORD *)(v157 + 16) = v169;
            *(_OWORD *)(v157 + 96) = v174;
            *(_OWORD *)(v157 + 112) = v175;
            *(_OWORD *)(v157 + 64) = v172;
            *(_OWORD *)(v157 + 80) = v173;
            *(_OWORD *)(v157 + 160) = v179;
            *(_OWORD *)(v157 + 176) = v180;
            *(_OWORD *)(v157 + 128) = v177;
            *(_OWORD *)(v157 + 144) = v178;
            *(_OWORD *)(v157 + 224) = v184;
            *(_OWORD *)(v157 + 240) = v185;
            *(_OWORD *)(v157 + 192) = v182;
            *(_OWORD *)(v157 + 208) = v183;
            *(_OWORD *)(v157 + 288) = v189;
            *(_OWORD *)(v157 + 304) = v190;
            *(_OWORD *)(v157 + 256) = v187;
            *(_OWORD *)(v157 + 272) = v188;
            *(_OWORD *)(v157 + 352) = v194;
            *(_OWORD *)(v157 + 368) = v195;
            *(_OWORD *)(v157 + 320) = v192;
            *(_OWORD *)(v157 + 336) = v193;
            *(_OWORD *)(v157 + 416) = v199;
            *(_OWORD *)(v157 + 432) = v200;
            *(_OWORD *)(v157 + 384) = v197;
            *(_OWORD *)(v157 + 400) = v198;
            *(_OWORD *)(v157 + 480) = v204;
            *(_OWORD *)(v157 + 496) = v205;
            *(_OWORD *)(v157 + 448) = v202;
            *(_OWORD *)(v157 + 464) = v203;
          }
        }
        v156 = v119 + 16;
        v119 += 8;
        v8.i64[0] = -1;
        v8.i64[1] = -1;
      }
      while (v156 <= v6);
    }
    if (!v7)
      goto LABEL_3;
    v83 = 0;
    v84 = 0;
    v85 = *(unsigned int *)(v262 + 16);
    v86 = *(_QWORD *)(v262 + 8) - 8 * v85;
    v87 = *(_DWORD *)(v3 + 8);
    v88 = *(_QWORD *)(v3 + 16) - 8 * *(unsigned int *)(v3 + 24) + 8 * (*(_DWORD *)(v3 + 24) + v5 + v87 * v250);
    v89 = v85 + v250;
    while (1)
    {
      v90 = HIDWORD(v84);
      v91 = (v7 + v84);
      v92 = v84 & 0xFFFFFFFF00000000 | v91;
      result = v92;
      LODWORD(v93) = v7 + v84;
      if (v7 + (int)v84 >= 0)
      {
        if ((int)v93 < v7)
          goto LABEL_113;
        goto LABEL_129;
      }
      v96 = v257 + ((v258 + v84) & ~((v258 + (int)v84) >> 31));
      v97 = v96 == (_DWORD)v84 ? 1 : 2;
      v98 = v97 + (v96 - (v96 != (_DWORD)v84) - v84) / v7;
      if (v98 < 8)
        break;
      LODWORD(v93) = v91 + (v98 & 0xFFFFFFF8) * v7;
      v100 = 0uLL;
      v101 = (int32x4_t)HIDWORD(v84);
      v102 = v98 & 0xFFFFFFF8;
      do
      {
        v101 = vaddq_s32(v101, v8);
        v100 = vaddq_s32(v100, v8);
        v102 -= 8;
      }
      while (v102);
      v99 = vaddvq_s32(vaddq_s32(v100, v101));
      if (v98 != (v98 & 0xFFFFFFF8))
        goto LABEL_127;
LABEL_128:
      result = v93 | (v99 << 32);
      if ((int)v93 < v7)
      {
LABEL_113:
        v94 = HIDWORD(result);
        if ((_DWORD)v84 == (_DWORD)result && HIDWORD(v84) == HIDWORD(result))
          goto LABEL_144;
        goto LABEL_135;
      }
LABEL_129:
      v103 = HIDWORD(result);
      do
      {
        v93 = (v93 - v7);
        v103 = (v103 + 1);
      }
      while ((int)v93 >= v7);
      result = v93 | (v103 << 32);
      v94 = HIDWORD(result);
      if ((_DWORD)v84 == (_DWORD)result && HIDWORD(v84) == HIDWORD(result))
        goto LABEL_144;
LABEL_135:
      v105 = (_QWORD *)(v86 + 8 * (v89 + 8 * (v5 + v83)));
      LODWORD(v106) = v84;
      v107 = v84;
      do
      {
        *v105++ = *(_QWORD *)(v88 + 8 * (HIDWORD(v107) + v106 * v87));
        v108 = (v106 + 1);
        v109 = v107 & 0xFFFFFFFF00000000;
        v110 = v109 | v108;
        v111 = v109 + 0x100000000;
        if (v7 <= (int)v108)
          v106 = v111;
        else
          v106 = v110;
        v112 = (_DWORD)v106 == (_DWORD)result && HIDWORD(v106) == (_DWORD)v94;
        v107 = v106;
      }
      while (!v112);
LABEL_144:
      if ((v91 & 0x80000000) != 0)
      {
        v113 = v257 + ((v258 + v84) & ~((v258 + (int)v84) >> 31));
        if (v113 == (_DWORD)v84)
          result = 1;
        else
          result = 2;
        v114 = result + (v113 - (v113 != (_DWORD)v84) - v84) / v7;
        if (v114 < 8)
          goto LABEL_169;
        LODWORD(v91) = v91 + (v114 & 0xFFFFFFF8) * v7;
        v115 = 0uLL;
        v116 = (int32x4_t)v90;
        v117 = v114 & 0xFFFFFFF8;
        do
        {
          v116 = vaddq_s32(v116, v8);
          v115 = vaddq_s32(v115, v8);
          v117 -= 8;
        }
        while (v117);
        v90 = vaddvq_s32(vaddq_s32(v115, v116));
        if (v114 != (v114 & 0xFFFFFFF8))
        {
LABEL_169:
          do
          {
            LODWORD(v91) = v91 + v7;
            v90 = (v90 - 1);
          }
          while ((v91 & 0x80000000) != 0);
        }
        v92 = v91 | (v90 << 32);
        if ((int)v91 < v7)
          goto LABEL_110;
LABEL_156:
        v118 = HIDWORD(v92);
        do
        {
          v91 = (v91 - v7);
          v118 = (v118 + 1);
        }
        while ((int)v91 >= v7);
        v92 = v91 | (v118 << 32);
        goto LABEL_110;
      }
      if ((int)v91 >= v7)
        goto LABEL_156;
LABEL_110:
      ++v83;
      v84 = v92;
      if (v83 == 8)
        goto LABEL_3;
    }
    v99 = HIDWORD(v84);
    LODWORD(v93) = v7 + v84;
    do
    {
LABEL_127:
      LODWORD(v93) = v93 + v7;
      v99 = (v99 - 1);
    }
    while ((v93 & 0x80000000) != 0);
    goto LABEL_128;
  }
  return result;
}

void sub_20F20C794(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  void *v8;
  size_t v9;
  uint64_t v10;
  void *v11;
  size_t v12;
  int v13;

  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)v4 == *(_QWORD *)a1 || (v5 = *(_QWORD *)(a2 + 16), *(_QWORD *)v5 == *(_QWORD *)a1))
  {
    v6 = *(unsigned int *)(v4 + 16);
    v7 = (8 * v6 + 31) & 0xFFFFFFFE0;
    v12 = v7 >> 3;
    v11 = operator new(v7, (std::align_val_t)0x20uLL);
    v13 = v6;
    sub_20F20C794(&v11, a2);
    v8 = *(void **)a1;
    v9 = v12;
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = v13;
    if (v8)
      MEMORY[0x212BC6368](v8, 0x1000C8000313F17);
  }
  else if (*(_DWORD *)(v4 + 20) * *(_DWORD *)(v4 + 16) && *(_DWORD *)(v5 + 16))
  {
    sub_20E8BE6CC();
  }
  else
  {
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
      bzero(*(void **)a1, 8 * v10);
  }
}

void sub_20F20C8B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    MEMORY[0x212BC6368](a10, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

double sub_20F20C8DC(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  size_t v7;
  double *v8;
  int v9;
  double v10;
  const double *v11;
  __int128 v12;
  __int128 v13;
  int v15[2];
  size_t v16;
  int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  if (**(_QWORD **)(a2 + 16) == a1)
  {
    sub_20F20C8DC(&v18, a2);
    v13 = v21;
    *(_OWORD *)(a1 + 32) = v20;
    *(_OWORD *)(a1 + 48) = v13;
    *(_QWORD *)(a1 + 64) = v22;
    v12 = v19;
    *(_OWORD *)a1 = v18;
    *(_OWORD *)(a1 + 16) = v12;
  }
  else
  {
    v4 = *(_QWORD **)(a2 + 8);
    v5 = v4[1];
    v6 = *(_DWORD *)(v5 + 20);
    if (v6)
    {
      v7 = (8 * (3 * v6) + 31) & 0xFFFFFFFE0;
      v16 = v7 >> 3;
      *(_QWORD *)v15 = operator new(v7, (std::align_val_t)0x20uLL);
      v17 = v6;
      *((_QWORD *)&v18 + 1) = *v4;
      *(_QWORD *)&v19 = v5;
      *((_QWORD *)&v19 + 1) = 0x3FF0000000000000;
      sub_20F20CAB4((uint64_t)v15, (uint64_t)&v18);
      v8 = **(double ***)(a2 + 16);
      v9 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) + 20);
      v10 = *(double *)(a2 + 24);
      v11 = *(const double **)v15;
      sub_20E8BE654(0, 1, 3, 3, v9, *(const double **)v15, 3, v8, v10, 0.0, 3, (double *)a1, 3);
      if (v11)
        MEMORY[0x212BC6368](v11, 0x1000C8000313F17);
    }
    else
    {
      *(_QWORD *)(a1 + 64) = 0;
      *(_QWORD *)&v12 = 0;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
    }
  }
  return *(double *)&v12;
}

void sub_20F20CA74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  if (v12)
  {
    MEMORY[0x212BC6368](v12, 0x1000C8000313F17);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20F20CAB4(uint64_t a1, uint64_t a2)
{
  double *v4;
  const double *v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  size_t v10;
  double *v11;
  size_t v12;
  int v13;
  void *v14;
  size_t v15;
  int v16;

  v4 = *(double **)a1;
  v5 = *(const double **)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  if (v5 == v4 || *(double **)v6 == v4)
  {
    v9 = *(_DWORD *)(v6 + 20);
    v10 = (8 * (3 * v9) + 31) & 0xFFFFFFFE0;
    v15 = v10 >> 3;
    v14 = operator new(v10, (std::align_val_t)0x20uLL);
    v16 = v9;
    sub_20F20CAB4(&v14, a2);
    v11 = *(double **)a1;
    v12 = v15;
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v12;
    *(_DWORD *)(a1 + 16) = v16;
    if (v11)
      MEMORY[0x212BC6368](v11, 0x1000C8000313F17);
  }
  else
  {
    v8 = *(_DWORD *)(v6 + 16);
    v7 = *(_DWORD *)(v6 + 20);
    if (v7 * v8)
    {
      sub_20E8BE654(0, 0, 3, v7, 9, v5, 3, *(double **)v6, *(double *)(a2 + 24), 0.0, v8, v4, 3);
    }
    else
    {
      v13 = *(_DWORD *)(a1 + 16);
      if (v13)
        bzero(v4, 8 * (3 * v13));
    }
  }
}

void sub_20F20CBD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    MEMORY[0x212BC6368](a12, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20F20CC00(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  _QWORD v8[2];
  int v9;
  _QWORD v10[5];

  v2 = result;
  v10[4] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD **)(a2 + 16) == result)
  {
    result = (_QWORD *)sub_20F20CC00(v10, a2);
    *v2 = v10[0];
  }
  else
  {
    v3 = *(_QWORD **)(a2 + 8);
    v4 = v3[1];
    v5 = *(unsigned int *)(v4 + 20);
    if ((_DWORD)v5)
    {
      v6 = (8 * v5 + 31) & 0xFFFFFFFE0;
      v8[1] = v6 >> 3;
      v8[0] = operator new(v6, (std::align_val_t)0x20uLL);
      v9 = v5;
      v10[1] = *v3;
      v10[2] = v4;
      v10[3] = 0x3FF0000000000000;
      sub_20F20CDA4((uint64_t)v8, (uint64_t)v10);
      v7 = v8[0];
      result = (_QWORD *)sub_20E8BE6CC();
      if (v7)
        return (_QWORD *)MEMORY[0x212BC6368](v7, 0x1000C8000313F17);
    }
    else
    {
      *result = 0;
    }
  }
  return result;
}

void sub_20F20CD64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;

  if (v11)
  {
    MEMORY[0x212BC6368](v11, 0x1000C8000313F17);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20F20CDA4(uint64_t a1, uint64_t a2)
{
  double *v4;
  uint64_t v5;
  const double *v6;
  int v7;
  int v8;
  uint64_t v9;
  size_t v10;
  double *v11;
  size_t v12;
  uint64_t v13;
  void *v14;
  size_t v15;
  int v16;

  v4 = *(double **)a1;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = **(const double ***)(a2 + 8);
  if (v6 == v4 || *(double **)v5 == v4)
  {
    v9 = *(unsigned int *)(v5 + 20);
    v10 = (8 * v9 + 31) & 0xFFFFFFFE0;
    v15 = v10 >> 3;
    v14 = operator new(v10, (std::align_val_t)0x20uLL);
    v16 = v9;
    sub_20F20CDA4(&v14, a2);
    v11 = *(double **)a1;
    v12 = v15;
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v12;
    *(_DWORD *)(a1 + 16) = v16;
    if (v11)
      MEMORY[0x212BC6368](v11, 0x1000C8000313F17);
  }
  else
  {
    v8 = *(_DWORD *)(v5 + 16);
    v7 = *(_DWORD *)(v5 + 20);
    if (v7 * v8)
    {
      sub_20E8BE654(1, 0, 1, v7, 3, v6, 3, *(double **)v5, *(double *)(a2 + 24), 0.0, v8, v4, 1);
    }
    else
    {
      v13 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v13)
        bzero(v4, 8 * v13);
    }
  }
}

void sub_20F20CEC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    MEMORY[0x212BC6368](a12, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

_DWORD *sub_20F20CEEC(_DWORD *result, unsigned int a2, unsigned int a3)
{
  _DWORD *v4;
  size_t v5;
  const void *v6;
  unsigned int v7;
  const void *v8;
  void *v9;
  void *v10;
  const void *v11;

  v4 = result;
  if (*((_QWORD *)result + 1) >= a3 * (unint64_t)a2)
  {
    result[4] = a2;
    return result;
  }
  v5 = (8 * a3 * a2 + 31) & 0xFFFFFFFE0;
  result = operator new(v5, (std::align_val_t)0x20uLL);
  v6 = result;
  if (v4[4] >= a2)
    v7 = a2;
  else
    v7 = v4[4];
  v8 = *(const void **)v4;
  if (*(_DWORD **)v4 != result)
  {
    if (v7)
      result = memmove(result, *(const void **)v4, 8 * v7);
    *(_QWORD *)v4 = v6;
    *((_QWORD *)v4 + 1) = v5 >> 3;
    v4[4] = a2;
    if (!v8)
      return result;
LABEL_14:
    JUMPOUT(0x212BC6368);
  }
  v9 = operator new((8 * v7 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
  v10 = v9;
  if (v7)
    memcpy(v9, v6, 8 * v7);
  result = (_DWORD *)MEMORY[0x212BC6368](v10, 0x1000C8000313F17);
  v11 = *(const void **)v4;
  *(_QWORD *)v4 = v6;
  *((_QWORD *)v4 + 1) = v5 >> 3;
  v4[4] = a2;
  if (v11)
    goto LABEL_14;
  return result;
}

void sub_20F20D030(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6368](v1, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

void sub_20F20D054(const char *a1, const char *a2)
{
  const char *v2;
  const char *v3;
  size_t v4;
  std::string::size_type v5;
  std::string *p_dst;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string::size_type v10;
  std::string *v11;
  uint64_t v12;
  uint64_t v13;
  std::string *v14;
  std::string::size_type size;
  char *v16;
  std::string *v17;
  std::string::size_type v18;
  std::logic_error v19;
  _QWORD v20[2];
  char v21;
  std::string v22;
  std::string v23;
  std::string __dst;

  if (a1)
    v2 = a1;
  else
    v2 = "Unknown function operating on type %1%";
  if (a2)
    v3 = a2;
  else
    v3 = "Cause unknown: error caused by bad argument with value %1%";
  v4 = strlen(v2);
  if (v4 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v8 = v4 | 7;
    v9 = v8 + 1;
    p_dst = (std::string *)operator new(v8 + 1);
    __dst.__r_.__value_.__l.__size_ = v5;
    __dst.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4;
    p_dst = &__dst;
    if (!v4)
    {
      __dst.__r_.__value_.__s.__data_[0] = 0;
      v7 = strlen(v3);
      if (v7 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_12;
      goto LABEL_17;
    }
  }
  memcpy(p_dst, v2, v5);
  p_dst->__r_.__value_.__s.__data_[v5] = 0;
  v7 = strlen(v3);
  if (v7 > 0x7FFFFFFFFFFFFFF7)
LABEL_12:
    sub_20E860B7C();
LABEL_17:
  v10 = v7;
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v11 = (std::string *)operator new(v12 + 1);
    v23.__r_.__value_.__l.__size_ = v10;
    v23.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
    v23.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
  }
  else
  {
    *((_BYTE *)&v23.__r_.__value_.__s + 23) = v7;
    v11 = &v23;
    if (!v7)
    {
LABEL_24:
      v11->__r_.__value_.__s.__data_[v10] = 0;
      *((_BYTE *)&v22.__r_.__value_.__s + 23) = 18;
      strcpy((char *)&v22, "Error in function ");
      sub_20F20D330(&__dst, "double");
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v14 = &__dst;
      else
        v14 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      else
        size = __dst.__r_.__value_.__l.__size_;
      std::string::append(&v22, (const std::string::value_type *)v14, size);
      std::string::append(&v22, ": ", 2uLL);
      sub_20F20D43C(v20);
      if (v21 >= 0)
        v16 = (char *)v20;
      else
        v16 = (char *)v20[0];
      sub_20F20D330(&v23, v16);
      if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = &v23;
      else
        v17 = (std::string *)v23.__r_.__value_.__r.__words[0];
      if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v18 = HIBYTE(v23.__r_.__value_.__r.__words[2]);
      else
        v18 = v23.__r_.__value_.__l.__size_;
      std::string::append(&v22, (const std::string::value_type *)v17, v18);
      std::logic_error::logic_error(&v19, &v22);
      v19.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B0] + 16);
      sub_20F20D5E0(&v19);
    }
  }
  memcpy(v11, v3, v10);
  goto LABEL_24;
}

void sub_20F20D280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::logic_error a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  std::logic_error::~logic_error(&a10);
  if (a16 < 0)
  {
    operator delete(__p);
    if (a22 < 0)
    {
LABEL_5:
      operator delete(a17);
      if ((a29 & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_9;
    }
  }
  else if (a22 < 0)
  {
    goto LABEL_5;
  }
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if (*(char *)(v29 - 65) < 0)
      goto LABEL_7;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a24);
  if (*(char *)(v29 - 65) < 0)
  {
LABEL_7:
    operator delete(*(void **)(v29 - 88));
    _Unwind_Resume(a1);
  }
LABEL_10:
  _Unwind_Resume(a1);
}

_BYTE *sub_20F20D330(std::string *a1, char *__s)
{
  size_t v4;
  std::string::size_type v5;
  std::string::size_type size;
  uint64_t v7;
  _BYTE *result;
  _BYTE *v9;
  uint64_t v10;
  std::string::size_type v12;
  size_t v13;

  v4 = strlen(__s);
  v5 = 0;
  size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v7 = (uint64_t)a1;
  else
    v7 = a1->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = a1->__r_.__value_.__l.__size_;
LABEL_6:
  result = (_BYTE *)(v7 + v5);
  v9 = (_BYTE *)(v7 + size);
  v10 = size - v5;
  if (v10 >= 3)
  {
    do
    {
      result = memchr(result, 37, v10 - 2);
      if (!result)
        break;
      if (*(_WORD *)result == 12581 && result[2] == 37)
      {
        if (result != v9)
        {
          v12 = (std::string::size_type)&result[-v7];
          if (v12 != -1)
          {
            v13 = strlen(__s);
            result = std::string::replace(a1, v12, 3uLL, __s, v13);
            v5 = v12 + v4;
            size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
            v7 = (size & 0x80u) == 0 ? (uint64_t)a1 : a1->__r_.__value_.__r.__words[0];
            if ((size & 0x80u) != 0)
              size = a1->__r_.__value_.__l.__size_;
            if (size >= v5)
              goto LABEL_6;
          }
        }
        return result;
      }
      ++result;
      v10 = v9 - result;
    }
    while (v9 - result >= 3);
  }
  return result;
}

uint64_t sub_20F20D43C(_BYTE *a1)
{
  size_t v2;
  unint64_t v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _QWORD v10[2];
  _QWORD v11[3];
  const void *v12;
  uint64_t v13;
  const void *v14;
  unint64_t v15;
  void *__p;
  char v17;
  unint64_t v18;
  int v19;
  uint64_t v20;

  sub_20E863438((uint64_t)v10);
  *(_QWORD *)((char *)&v11[2] + *(_QWORD *)(v11[0] - 24)) = 17;
  std::ostream::operator<<();
  if ((v19 & 0x10) != 0)
  {
    v3 = v18;
    if (v18 < v15)
    {
      v18 = v15;
      v3 = v15;
    }
    v4 = v14;
    v2 = v3 - (_QWORD)v14;
    if (v3 - (unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_18;
  }
  else
  {
    if ((v19 & 8) == 0)
    {
      v2 = 0;
      a1[23] = 0;
      goto LABEL_14;
    }
    v4 = v12;
    v2 = v13 - (_QWORD)v12;
    if ((unint64_t)(v13 - (_QWORD)v12) >= 0x7FFFFFFFFFFFFFF8)
LABEL_18:
      sub_20E860B7C();
  }
  if (v2 >= 0x17)
  {
    v5 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17)
      v5 = v2 | 7;
    v6 = v5 + 1;
    v7 = operator new(v5 + 1);
    *((_QWORD *)a1 + 1) = v2;
    *((_QWORD *)a1 + 2) = v6 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
    a1 = v7;
    goto LABEL_13;
  }
  a1[23] = v2;
  if (v2)
LABEL_13:
    memmove(a1, v4, v2);
LABEL_14:
  a1[v2] = 0;
  v10[0] = *MEMORY[0x24BEDB7F0];
  v8 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v11[0] = v8;
  v11[1] = MEMORY[0x24BEDB848] + 16;
  if (v17 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x212BC6290](&v20);
}

void sub_20F20D5CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E863784((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F20D5E0(const std::logic_error *a1)
{
  void *exception;
  void *v3;

  exception = __cxa_allocate_exception(0x40uLL);
  v3 = (void *)sub_20F20D614((uint64_t)exception, a1);
  __cxa_throw(v3, (struct type_info *)&unk_24C9FAD60, (void (*)(void *))sub_20F20D66C);
}

uint64_t sub_20F20D614(uint64_t a1, const std::logic_error *a2)
{
  *(_QWORD *)a1 = &unk_24C9ABB08;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(_QWORD *)a1 = &off_24C9FADB8;
  *(_QWORD *)(a1 + 8) = &unk_24C9FADE8;
  *(_QWORD *)(a1 + 24) = &unk_24C9FAE10;
  *(_QWORD *)(a1 + 32) = 0;
  return a1;
}

uint64_t sub_20F20D66C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 24) = &unk_24C9ABB60;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *(_QWORD *)(a1 + 32) = 0;
  std::logic_error::~logic_error((std::logic_error *)(a1 + 8));
  return a1;
}

uint64_t sub_20F20D6C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_24C9ABB08;
  std::logic_error::logic_error((std::logic_error *)(v2 + 8), (const std::logic_error *)(a1 + 8));
  *(_QWORD *)(v2 + 8) = MEMORY[0x24BEDB8B0] + 16;
  *(_QWORD *)(v2 + 24) = &unk_24C9ABB60;
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v2 + 32) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_DWORD *)(v2 + 56) = *(_DWORD *)(a1 + 56);
  *(_QWORD *)v2 = &off_24C9FADB8;
  *(_QWORD *)(v2 + 8) = &unk_24C9FADE8;
  *(_QWORD *)(v2 + 24) = &unk_24C9FAE10;
  sub_20E86E24C(v2 + 24, a1 + 24);
  return v2;
}

void sub_20F20D798(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::logic_error *v2;

  std::logic_error::~logic_error(v2);
  MEMORY[0x212BC6398](v1, 0x10F1C40250A9ABCLL);
  _Unwind_Resume(a1);
}

void sub_20F20D7C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void sub_20F20D7E0(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  sub_20F20DA10((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24C9FAD60, (void (*)(void *))sub_20F20D66C);
}

void sub_20F20D81C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20F20D830(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 24) = &unk_24C9ABB60;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *(_QWORD *)(a1 + 32) = 0;
  std::logic_error::~logic_error((std::logic_error *)(a1 + 8));
  JUMPOUT(0x212BC6398);
}

void sub_20F20D898(std::logic_error *this)
{
  const char *imp;

  this[1].__vftable = (std::logic_error_vtbl *)&unk_24C9ABB60;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    this[1].__imp_.__imp_ = 0;
  std::logic_error::~logic_error(this);
}

void sub_20F20D8E8(std::logic_error *this)
{
  const char *imp;

  this[1].__vftable = (std::logic_error_vtbl *)&unk_24C9ABB60;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    this[1].__imp_.__imp_ = 0;
  std::logic_error::~logic_error(this);
  JUMPOUT(0x212BC6398);
}

void sub_20F20D954(std::logic_error *a1)
{
  const char *imp;

  a1->__vftable = (std::logic_error_vtbl *)&unk_24C9ABB60;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    a1->__imp_.__imp_ = 0;
  std::logic_error::~logic_error(a1 - 1);
}

void sub_20F20D9A4(std::logic_error *a1)
{
  const char *imp;

  a1->__vftable = (std::logic_error_vtbl *)&unk_24C9ABB60;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    a1->__imp_.__imp_ = 0;
  std::logic_error::~logic_error(a1 - 1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F20DA10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_24C9ABB08;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), (const std::logic_error *)(a2 + 8));
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB8B0] + 16;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = &unk_24C9ABB60;
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)a1 = &off_24C9FADB8;
  *(_QWORD *)(a1 + 8) = &unk_24C9FADE8;
  *(_QWORD *)(a1 + 24) = &unk_24C9FAE10;
  return a1;
}

void sub_20F20DAB8(_Unwind_Exception *a1)
{
  std::logic_error *v1;

  std::logic_error::~logic_error(v1);
  _Unwind_Resume(a1);
}

void sub_20F20DACC(double a1, double a2, double a3, double a4, double a5, double a6)
{
  double v6;
  double v8;
  double v9;
  double v10;
  double v11;
  int v12;
  BOOL v13;
  double v14;
  long double v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  double v20;
  char v21;
  double v22;
  unint64_t v23;
  double v24;
  float64x2_t v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  int8x16_t v32;
  int8x16_t v33;
  BOOL v34;
  double v35;
  double v36;
  double v37;
  double v38;
  int v39;
  BOOL v40;
  double v41;
  double v42;
  double v43;
  double v45;
  double v46;
  double v47;
  double v48;
  BOOL v49;
  double v50;
  BOOL v51;
  double v52;
  BOOL v53;
  double v54;
  BOOL v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  double v70;
  double v71;
  double v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v85;
  long double v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  long double v108;
  double v109;
  double v110;
  long double v111;
  double v112;
  double v113;
  long double v114;
  double v116;
  double v117;
  unsigned int v118;
  double v119;
  double v120;
  double v121;
  double v122;
  long double v123;
  double v124;
  long double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  long double v131;
  long double v132;
  double v133;
  double v134;
  double v135;
  long double v136;
  long double v137;
  long double v138;
  long double v139;
  long double v140;
  long double v141;
  long double v142;
  long double v143;
  double v144;
  double v145;
  double v146;
  double v147;
  int8x16_t v148;
  double v149;
  float64_t v151;
  float64_t v152;
  double v154;
  double v155;
  double v156[2];
  BOOL v157;
  double v158[2];
  BOOL v159;
  unint64_t v160;
  double v161;
  double v162;
  uint64_t v163;
  double v164;
  double v165[2];

  if (a1 <= 0.0)
    sub_20F20D054("boost::math::gamma_p_inv<%1%>(%1%, %1%)", "Argument a in the incomplete gamma function inverse must be >= 0 (got a=%1%).");
  v6 = a1;
  if (a2 < 0.0 || a2 > 1.0)
    sub_20F20D054("boost::math::gamma_p_inv<%1%>(%1%, %1%)", "Probability must be in the range [0,1] in the incomplete gamma function inverse (got p=%1%).");
  if (a2 == 1.0)
    sub_20F20EE54("boost::math::gamma_p_inv<%1%>(%1%, %1%)", "Overflow Error");
  if (a2 != 0.0)
  {
    v8 = 1.0 - a2;
    if (a1 == 1.0)
    {
      v9 = a2;
      v10 = -log(1.0 - a2);
LABEL_11:
      if (v10 <= 2.22507386e-308)
        v10 = 2.22507386e-308;
      if (v6 >= 0.125)
      {
        v12 = -24;
      }
      else
      {
        sub_20F20ECEC(v6, v10);
        if (fabs(v11) > 67108864.0)
          v12 = -50;
        else
          v12 = -24;
      }
      v13 = v9 > 0.9;
      if (v9 <= 0.9)
        v14 = v9;
      else
        v14 = v8;
      v154 = v14;
      v162 = 1.79769313e308;
      *(double *)&v163 = 2.22507386e-308;
      v15 = ldexp(1.0, v12);
      v20 = v9;
      v149 = v15;
      v21 = 0;
      if (v10 * 10000000.0 >= 10000000.0)
        v22 = v10 * 10000000.0;
      else
        v22 = 10000000.0;
      v23 = 200;
      v24 = 2.22507386e-308;
      v25.f64[0] = NAN;
      v25.f64[1] = NAN;
      v148 = (int8x16_t)vnegq_f64(v25);
      v26 = 0.0;
      v27 = v10;
      v28 = v22;
      v151 = 0.0;
      v152 = 0.0;
      while (1)
      {
        v155 = v22;
        v165[0] = 0.0;
        v29 = v6;
        v30 = v6;
        v31 = v20;
        sub_20F212040(v20 > 0.9, v165, v29, v10, v22, v16, v17, v18, v19);
        v20 = v31;
        v16.f64[0] = (v30 - v10 + -1.0) / v10;
        v17.f64[0] = fabs(v16.f64[0]);
        *(double *)v33.i64 = -v165[0];
        if (v31 <= 0.9)
          *(double *)v33.i64 = v165[0];
        v18.f64[0] = 1.0;
        v34 = 1.79769313e308 / v17.f64[0] >= v165[0] || v17.f64[0] <= 1.0;
        v35 = v16.f64[0] * v165[0];
        if (!v34)
          v35 = -8.98846567e307;
        if (v31 > 0.9)
          v35 = -v35;
        v16.f64[0] = v154;
        v36 = *(double *)v32.i64 - v154;
        v161 = *(double *)v32.i64 - v154;
        v160 = --v23;
        if (*(double *)v32.i64 - v154 == 0.0)
        {
LABEL_177:
          if (v23 > 0xC8)
          {
            v158[0] = (double)(200 - v23);
            sub_20F211D68("boost::math::gamma_p_inv<%1%>(%1%, %1%)", "Root finding evaluation exceeded %1% iterations, giving up now.");
          }
          return;
        }
        if (*(double *)v33.i64 == 0.0)
        {
          v37 = v162;
          *(double *)v32.i64 = v155;
          if (v26 == 0.0)
          {
            if (v10 == v24)
              v38 = v162;
            else
              v38 = v24;
            v165[0] = 0.0;
            sub_20F212040(a2 > 0.9, v165, a1, v38, v35, v16, v17, v18, v19);
            v26 = *(double *)v32.i64 - v154;
            *(double *)v32.i64 = v38 - v10;
          }
          if (v26 >= 0.0)
            v39 = 1;
          else
            v39 = -1;
          if (v26 == 0.0)
            v39 = 0;
          if (v36 < 0.0)
            v39 = -v39;
          v40 = *(double *)v32.i64 < 0.0;
          if (*(double *)v32.i64 >= 0.0)
            v41 = v37;
          else
            v41 = v24;
          if (v40)
            v42 = v37;
          else
            v42 = v24;
          if (v39 >= 0)
            v41 = v42;
          *(double *)v32.i64 = (v10 - v41) * 0.5;
          v20 = a2;
        }
        else
        {
          if (v35 == 0.0)
          {
            *(double *)v32.i64 = v36 / *(double *)v33.i64;
            goto LABEL_57;
          }
          v16.f64[0] = *(double *)v33.i64 + *(double *)v33.i64;
          v60 = v36 * (v35 / *(double *)v33.i64);
          v61 = vabdd_f64(*(double *)v33.i64 + *(double *)v33.i64, v60);
          v40 = v61 < 1.0;
          v62 = fabs(v36 + v36);
          v19.f64[0] = 1.79769313e308;
          v63 = v61 * 1.79769313e308;
          if (!v40 || v62 < v63)
          {
            *(double *)v32.i64 = (v36 + v36) / (v16.f64[0] - v60);
            if (*(double *)v33.i64 * *(double *)v32.i64 / v36 >= 0.0)
              goto LABEL_57;
          }
          else
          {
            *(double *)v32.i64 = v36 / *(double *)v33.i64;
            if (*(double *)v33.i64 * (v36 / *(double *)v33.i64) / v36 >= 0.0)
              goto LABEL_57;
          }
          *(double *)v32.i64 = v36 / *(double *)v33.i64;
          v78 = fabs(v36 / *(double *)v33.i64);
          v79 = fabs(v27);
          v16.f64[0] = v79 + v79;
          if (v78 > v79 + v79)
          {
            v40 = *(double *)v32.i64 < 0.0;
            v80 = 2.0;
            if (v40)
              v80 = -2.0;
            *(double *)v32.i64 = v79 * v80;
          }
        }
LABEL_57:
        v43 = fabs(*(double *)v32.i64 / v28);
        if (v43 > 0.8 && v43 < 2.0)
        {
          if (*(double *)v32.i64 <= 0.0)
            v54 = v162;
          else
            v54 = v24;
          *(double *)v32.i64 = (v10 - v54) * 0.5;
          if (v10 != 0.0 && fabs(*(double *)v32.i64) > v10)
          {
            v33.i64[0] = 1.0;
            v33.i64[0] = vbslq_s8(v148, v33, v32).u64[0];
            v55 = *(double *)v32.i64 == 0.0;
            v56 = 0.0;
            if (!v55)
              v56 = *(double *)v33.i64;
            *(double *)v32.i64 = fabs(v10) * v56 * 0.899999976;
          }
          v45 = *(double *)v32.i64 * 3.0;
          v46 = v10 - *(double *)v32.i64;
          if (v10 - *(double *)v32.i64 >= v24)
          {
LABEL_62:
            if (v46 > v162)
            {
              v47 = fabs(v162);
              v48 = fabs(v46);
              v49 = v47 >= 1.0 || v48 <= 1.0;
              v16.f64[0] = 1.79769313e308;
              v50 = 1.79769313e308 / v48;
              v51 = !v49 && v50 < v47;
              v52 = v46 / v162;
              if (v51)
                v52 = 1000.0;
              if (fabs(v52) < 1.0)
                v52 = 1.0 / v52;
              if ((v21 & 1) != 0 || (v52 > 0.0 ? (v53 = v52 < 3.0) : (v53 = 0), !v53))
              {
                v71 = v20;
                v164 = v162;
                v165[0] = v24;
                sub_20F21389C(v165, &v164);
                if (fabs(v77) < 2.0)
                  goto LABEL_177;
                v156[0] = a1;
                v156[1] = v154;
                v157 = v13;
                v22 = sub_20F211B88(v156, &v161, (double *)&v163, &v162, (uint64_t *)&v160, v10, a1, v72, v73, v74, v75, v76);
                v10 = v10 - v22;
                v24 = *(double *)&v163;
                v27 = *(double *)&v163;
                v20 = v71;
                v23 = v160;
                if (!v160)
                  goto LABEL_177;
                goto LABEL_125;
              }
              *(double *)v32.i64 = (v10 - v162) * 0.99000001;
              v46 = v10 - *(double *)v32.i64;
              v21 = 1;
            }
            v18.f64[0] = v151;
            v17.f64[0] = v152;
            if (*(double *)v32.i64 > 0.0)
              goto LABEL_81;
            goto LABEL_115;
          }
        }
        else
        {
          v45 = v155;
          v46 = v10 - *(double *)v32.i64;
          if (v10 - *(double *)v32.i64 >= v24)
            goto LABEL_62;
        }
        v57 = fabs(v24);
        v58 = fabs(v46);
        v18.f64[0] = v151;
        v17.f64[0] = v152;
        if (v57 >= 1.0 || v58 <= 1.0 || 1.79769313e308 / v58 >= v57)
        {
          if (v57 >= 1.0 || fabs(v24 * 1.79769313e308) >= v58)
          {
            v59 = v46 / v24;
          }
          else
          {
            v59 = -1.79769313e308;
            if (v24 >= 0.0 != v46 < 0.0)
              v59 = 1.79769313e308;
          }
        }
        else
        {
          v59 = 1000.0;
        }
        v16.f64[0] = 1.0;
        if (fabs(v59) < 1.0)
          v59 = 1.0 / v59;
        if ((v21 & 1) != 0 || v59 <= 0.0 || v59 >= 3.0)
        {
          v164 = v162;
          v165[0] = v24;
          sub_20F21389C(v165, &v164);
          if (fabs(v70) < 2.0)
            goto LABEL_177;
          v158[0] = a1;
          v158[1] = v154;
          v159 = v13;
          v22 = sub_20F2119A8(v158, &v161, (double *)&v163, &v162, (uint64_t *)&v160, v10, a1, v65, v66, v67, v68, v69);
          v10 = v10 - v22;
          v24 = *(double *)&v163;
          v27 = *(double *)&v163;
          v20 = a2;
          v23 = v160;
          if (!v160)
            goto LABEL_177;
          goto LABEL_125;
        }
        *(double *)v32.i64 = (v10 - v24) * 0.99000001;
        v46 = v10 - *(double *)v32.i64;
        v21 = 1;
        if (*(double *)v32.i64 > 0.0)
        {
LABEL_81:
          v162 = v10;
          v17.f64[0] = v36;
          goto LABEL_116;
        }
LABEL_115:
        *(double *)&v163 = v10;
        v24 = v10;
        v18.f64[0] = v36;
LABEL_116:
        v151 = v18.f64[0];
        v152 = v17.f64[0];
        if (v17.f64[0] * v18.f64[0] > 0.0)
        {
          v165[0] = v10;
          sub_20F211D68("boost::math::tools::halley_iterate<%1%>", "There appears to be no root to be found in boost::math::tools::newton_raphson_iterate, perhaps we have a local minima near current best guess of %1%");
        }
        v27 = v10;
        v10 = v46;
        v22 = *(double *)v32.i64;
        v23 = v160;
        if (!v160)
          goto LABEL_177;
LABEL_125:
        v28 = v45;
        v26 = v36;
        v6 = a1;
        if (fabs(v149 * v10) >= fabs(v22))
          goto LABEL_177;
      }
    }
    if (a1 < 1.0)
    {
      v9 = a2;
      v81 = sub_20F20F4F0(a1, a2, a3, a4, a5, a6);
      if (fabs(v81) > 1.79769313e308)
        sub_20F20EE54("boost::math::tgamma<%1%>(%1%)", "numeric overflow");
      v82 = v8 * v81;
      if (v8 * v81 > 0.6 || v6 >= 0.3 && v82 >= 0.45)
      {
        if (v8 <= 0.00001 || v8 * v82 <= 0.00000001)
          v83 = exp(-0.577215665 - v8 / v6);
        else
          v83 = pow(v81 * v9 * v6, 1.0 / v6);
        v10 = v83 / (1.0 - v83 / (v6 + 1.0));
        goto LABEL_11;
      }
      if (v6 >= 0.3 || v82 < 0.35)
      {
        if (v6 >= 0.3 || v82 > 0.15)
        {
          v141 = -log(v82);
          v142 = v141 - (1.0 - v6) * log(v141);
          v143 = v141 - (1.0 - v6) * log(v142);
          v9 = a2;
          v10 = v143 - log((1.0 - v6) / (v142 + 1.0) + 1.0);
        }
        else
        {
          v133 = log(v82);
          v134 = -v133;
          v135 = log(-v133);
          if (v82 <= 0.1)
          {
            v144 = (v6 + -1.0) * v135;
            v145 = v144 * (v144 * v144);
            v146 = v6 * v6 * v6;
            v147 = v6 * 3.0 + -5.0;
            v10 = v144
                - v133
                - (v6 + -1.0) * (v144 + 1.0) / v133
                + (v6 + -1.0) * (v147 * 0.5 + (v6 + -2.0) * v144 - v144 * v144 * 0.5) / (v133 * v133)
                + (v6 + -1.0)
                * ((v6 * v6 * 11.0 + v6 * -46.0 + 47.0) / 6.0
                 + (v6 * v6 - v6 * 6.0 + 7.0) * v144
                 + v145 / 3.0
                 - v147 * (v144 * v144) * 0.5)
                / (v133
                 * v133
                 * v134)
                + (v6 + -1.0)
                * ((v6 * 477.0 + v146 * 25.0 + v6 * v6 * -195.0 + -379.0) / 12.0
                 + (v6 * 72.0 + v146 + v146 - v6 * v6 * 25.0 + -61.0) * v144 * 0.5
                 + (v6 * 13.0 - v6 * v6 * 3.0 + -13.0) * (v144 * v144)
                 + (v6 * 11.0 + -17.0) * v145 / 6.0
                 + v144 * v144 * (v144 * v144) * -0.25)
                / (v133
                 * v133
                 * (v133
                  * v133));
          }
          else
          {
            v136 = v134 - (1.0 - v6) * v135;
            v137 = v134 - (1.0 - v6) * log(v136);
            v10 = v137
                - log(((2.0 - a1) * (3.0 - a1) + v136 * v136 + (3.0 - a1 + 3.0 - a1) * v136)/ (v136 * v136 + (5.0 - a1) * v136 + 2.0));
            v6 = a1;
          }
        }
        goto LABEL_11;
      }
      v123 = exp(-0.577215665 - v82);
      v125 = exp(v123);
      v124 = exp(v123 * v125);
      goto LABEL_176;
    }
    if (a2 >= 0.5)
      v85 = 1.0 - a2;
    else
      v85 = a2;
    v86 = log(v85);
    v40 = a2 < 0.5;
    v6 = a1;
    v90 = sqrt(v86 * -2.0);
    v91 = v90
        - (v90 * (v90 * (v90 * 0.213623494 + 4.28342156) + 11.661672) + 3.31125922)
        / (v90 * (v90 * v90 * 1.2736449 + 6.61053766) + v90 * v90 * (v90 * v90 * 0.036117081 + 6.40691598) + 1.0);
    if (v40)
      v91 = -v91;
    v92 = v91 * v91;
    v93 = v91 * (v91 * v91);
    v94 = v91 * (v92 * v92);
    v89.f64[0] = sqrt(a1);
    v95 = v89.f64[0] * v91
        + a1
        + (v91 * v91 + -1.0) / 3.0
        + (v93 - v91 * 7.0) / (v89.f64[0] * 36.0)
        + (v91 * v91 * 7.0 + v92 * v92 * 3.0 + -16.0) / (a1 * -810.0);
    v96 = v94 * 9.0;
    v88.f64[0] = 256.0;
    v97 = v93 * 256.0 + v96;
    v87.f64[0] = -433.0;
    v98 = v97 + v91 * -433.0;
    v99 = a1 * 38880.0 * v89.f64[0];
    v10 = v95 + v98 / v99;
    v100 = 500.0;
    if (a1 >= 500.0)
    {
      v100 = 0.000001;
      if (vabdd_f64(1.0, v10 / a1) < 0.000001)
      {
        v9 = a2;
        goto LABEL_11;
      }
    }
    v9 = a2;
    if (a2 > 0.5)
    {
      if (v10 < a1 * 3.0)
      {
        v6 = a1;
        goto LABEL_11;
      }
      v126 = sub_20F2107B8(a1, v100, v95, v99, v87, v88, v89);
      if (fabs(v126) <= 1.79769313e308)
      {
        v127 = a1 + -1.0;
        v128 = (a1 + -1.0) * a1;
        v129 = log(v8) + v126;
        v130 = -4.6;
        if (v128 > 2.0)
          v130 = v128 * -2.3;
        if (v129 >= v130)
        {
          v138 = v127 * log(v10) - v129;
          v139 = v138 - log((1.0 - a1) / (v10 + 1.0) + 1.0);
          v140 = v127 * log(v139) - v129;
          v10 = v140 - log((1.0 - a1) / (v139 + 1.0) + 1.0);
        }
        else
        {
          v131 = v127 * log(-v129);
          v132 = v131 * (v131 * v131);
          v101 = a1 * 3.0;
          v10 = v131
              - v129
              - v127 * (v131 + 1.0) / v129
              + v127 * ((v101 + -5.0) * 0.5 + (a1 + -2.0) * v131 - v131 * v131 * 0.5) / (v129 * v129)
              - v127
              * ((a1 * a1 * 11.0 + a1 * -46.0 + 47.0) / 6.0
               + (a1 * a1 - a1 * 6.0 + 7.0) * v131
               + v132 / 3.0
               - (v101 + -5.0) * (v131 * v131) * 0.5)
              / (v129
               * v129
               * v129)
              + v127
              * ((a1 * 477.0 + a1 * a1 * a1 * 25.0 + a1 * a1 * -195.0 + -379.0) / 12.0
               + (a1 * 72.0 + a1 * a1 * a1 + a1 * a1 * a1 - a1 * a1 * 25.0 + -61.0) * v131 * 0.5
               + (a1 * 13.0 - a1 * a1 * 3.0 + -13.0) * (v131 * v131)
               + (a1 * 11.0 + -17.0) * v132 / 6.0
               + v131 * v131 * (v131 * v131) * -0.25)
              / (v129
               * v129
               * (v129
                * v129));
        }
        v9 = a2;
        v6 = a1;
        goto LABEL_11;
      }
      goto LABEL_199;
    }
    v102 = a1 + 1.0;
    if (v10 >= (a1 + 1.0) * 0.150000006)
    {
LABEL_161:
      if (v10 <= v102 * 0.01 || v10 > v102 * 0.7)
        goto LABEL_11;
      v116 = v10 / v102;
      v117 = v10 / v102 + 1.0;
      v118 = 2;
      do
      {
        v119 = v10 / ((double)v118 + v6);
        v116 = v116 * v119;
        v117 = v117 + v116;
        if (v118 > 0x63)
          break;
        ++v118;
      }
      while (v116 >= 0.0001);
      v120 = sub_20F2107B8(v102, 0.0001, v119, v99, v87, v88, v89);
      if (fabs(v120) <= 1.79769313e308)
      {
        v121 = log(v9);
        v122 = log(v117);
        v123 = exp((v10 + v121 + v120 - v122) / a1);
        v6 = a1;
        v124 = 1.0 - (v122 + log(v123) * a1 - v123 - (v121 + v120)) / (a1 - v123);
LABEL_176:
        v10 = v123 * v124;
        goto LABEL_11;
      }
LABEL_199:
      sub_20F20EE54("boost::math::lgamma<%1%>(%1%)", "numeric overflow");
    }
    v103 = sub_20F2107B8(a1 + 1.0, v100, v95, v99, v87, v88, v89);
    if (fabs(v103) > 1.79769313e308)
      goto LABEL_199;
    v104 = a1 + 2.0;
    v105 = log(a2) + v103;
    v106 = exp((v10 + v105) / a1);
    v107 = v106 / v102 * (v106 / (a1 + 2.0) + 1.0);
    v158[0] = v107;
    if (v107 >= -1.0)
    {
      if (v107 == -1.0)
        goto LABEL_198;
      v108 = log1p(v107);
      v109 = exp((v105 + v106 - v108) / a1);
      v110 = v109 / v102 * (v109 / v104 + 1.0);
      v158[0] = v110;
      if (v110 >= -1.0)
      {
        if (v110 == -1.0)
          goto LABEL_198;
        v111 = log1p(v110);
        v112 = exp((v105 + v109 - v111) / a1);
        v113 = v112 / v102 * (v112 / v104 * (v112 / (a1 + 3.0) + 1.0) + 1.0);
        v158[0] = v113;
        if (v113 >= -1.0)
        {
          v9 = a2;
          if (v113 != -1.0)
          {
            v114 = v105 + v112 - log1p(v113);
            v6 = a1;
            v10 = exp(v114 / a1);
            goto LABEL_161;
          }
LABEL_198:
          sub_20F20EE54("log1p<%1%>(%1%)", "Overflow Error");
        }
      }
    }
    sub_20F20D054("log1p<%1%>(%1%)", "log1p(x) requires x > -1, but got x = %1%.");
  }
}

void sub_20F20ECEC(double a1, long double a2)
{
  double v4;
  double v5;
  double v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  double v10;
  double v12;
  long double v13;

  if (a1 <= 0.0)
    sub_20F20F830("boost::math::gamma_p_derivative<%1%>(%1%, %1%)", "Argument a to the incomplete gamma function must be greater than zero (got a=%1%).");
  if (a2 < 0.0)
    sub_20F20F830("boost::math::gamma_p_derivative<%1%>(%1%, %1%)", "Argument x to the incomplete gamma function must be >= 0 (got x=%1%).");
  if (a2 == 0.0)
  {
    v4 = 0.0;
    if (a1 > 1.0)
      goto LABEL_15;
    v4 = 1.0;
    if (a1 == 1.0)
      goto LABEL_15;
LABEL_21:
    sub_20F20FCB0("boost::math::gamma_p_derivative<%1%>(%1%, %1%)", "Overflow Error");
  }
  v5 = sub_20F210E14(a1, a2);
  v10 = a2 * 1.79769313e308;
  if (a2 < 1.0 && v10 < v5)
    goto LABEL_21;
  if (v5 == 0.0)
  {
    v12 = sub_20F2107B8(a1, v10, 1.0, v6, v7, v8, v9);
    if (fabs(v12) > 1.79769313e308)
      sub_20F20FCB0("boost::math::lgamma<%1%>(%1%)", "numeric overflow");
    v13 = log(a2);
    v4 = exp(v13 * a1 - a2 - v12 - v13);
LABEL_15:
    if (fabs(v4) <= 1.79769313e308)
      return;
LABEL_18:
    sub_20F20EE54("boost::math::gamma_p_derivative<%1%>(%1%, %1%)", "numeric overflow");
  }
  if (fabs(v5 / a2) > 1.79769313e308)
    goto LABEL_18;
}

void sub_20F20EE54(const char *a1, const char *a2)
{
  const char *v2;
  const char *v3;
  size_t v4;
  std::string::size_type v5;
  std::string *p_dst;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  std::string::size_type size;
  size_t v11;
  std::runtime_error v12;
  std::string v13;
  std::string __dst;

  if (a1)
    v2 = a1;
  else
    v2 = "Unknown function operating on type %1%";
  if (a2)
    v3 = a2;
  else
    v3 = "Cause unknown";
  v4 = strlen(v2);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    p_dst = (std::string *)operator new(v7 + 1);
    __dst.__r_.__value_.__l.__size_ = v5;
    __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4;
    p_dst = &__dst;
    if (!v4)
    {
LABEL_16:
      p_dst->__r_.__value_.__s.__data_[v5] = 0;
      *((_BYTE *)&v13.__r_.__value_.__s + 23) = 18;
      strcpy((char *)&v13, "Error in function ");
      sub_20F20D330(&__dst, "double");
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v9 = &__dst;
      else
        v9 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      else
        size = __dst.__r_.__value_.__l.__size_;
      std::string::append(&v13, (const std::string::value_type *)v9, size);
      std::string::append(&v13, ": ", 2uLL);
      v11 = strlen(v3);
      std::string::append(&v13, v3, v11);
      std::runtime_error::runtime_error(&v12, &v13);
      v12.__vftable = (std::runtime_error_vtbl *)(MEMORY[0x24BEDB8C8] + 16);
      sub_20F20F004(&v12);
    }
  }
  memcpy(p_dst, v2, v5);
  goto LABEL_16;
}

void sub_20F20EFB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::runtime_error::~runtime_error(&a9);
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a21 & 0x80000000) == 0)
  {
LABEL_3:
    _Unwind_Resume(a1);
  }
  operator delete(a16);
  _Unwind_Resume(a1);
}

void sub_20F20F004(const std::runtime_error *a1)
{
  void *exception;
  void *v3;

  exception = __cxa_allocate_exception(0x40uLL);
  v3 = (void *)sub_20F20F038((uint64_t)exception, a1);
  __cxa_throw(v3, (struct type_info *)&unk_24C9FAE20, (void (*)(void *))sub_20F20F090);
}

uint64_t sub_20F20F038(uint64_t a1, const std::runtime_error *a2)
{
  *(_QWORD *)a1 = &unk_24C9ABB08;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(_QWORD *)a1 = &off_24C9FAE78;
  *(_QWORD *)(a1 + 8) = &unk_24C9FAEA8;
  *(_QWORD *)(a1 + 24) = &unk_24C9FAED0;
  *(_QWORD *)(a1 + 32) = 0;
  return a1;
}

uint64_t sub_20F20F090(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 24) = &unk_24C9ABB60;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *(_QWORD *)(a1 + 32) = 0;
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  return a1;
}

uint64_t sub_20F20F0E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_24C9ABB08;
  std::runtime_error::runtime_error((std::runtime_error *)(v2 + 8), (const std::runtime_error *)(a1 + 8));
  *(_QWORD *)(v2 + 8) = MEMORY[0x24BEDB8C8] + 16;
  *(_QWORD *)(v2 + 24) = &unk_24C9ABB60;
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v2 + 32) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_DWORD *)(v2 + 56) = *(_DWORD *)(a1 + 56);
  *(_QWORD *)v2 = &off_24C9FAE78;
  *(_QWORD *)(v2 + 8) = &unk_24C9FAEA8;
  *(_QWORD *)(v2 + 24) = &unk_24C9FAED0;
  sub_20E86E24C(v2 + 24, a1 + 24);
  return v2;
}

void sub_20F20F1BC(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::runtime_error *v2;

  std::runtime_error::~runtime_error(v2);
  MEMORY[0x212BC6398](v1, 0x10F1C40250A9ABCLL);
  _Unwind_Resume(a1);
}

void sub_20F20F1E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void sub_20F20F204(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  sub_20F20F434((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24C9FAE20, (void (*)(void *))sub_20F20F090);
}

void sub_20F20F240(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20F20F254(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 24) = &unk_24C9ABB60;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *(_QWORD *)(a1 + 32) = 0;
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  JUMPOUT(0x212BC6398);
}

void sub_20F20F2BC(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&unk_24C9ABB60;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    this[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(this);
}

void sub_20F20F30C(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&unk_24C9ABB60;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    this[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x212BC6398);
}

void sub_20F20F378(std::runtime_error *a1)
{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&unk_24C9ABB60;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    a1->__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(a1 - 1);
}

void sub_20F20F3C8(std::runtime_error *a1)
{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&unk_24C9ABB60;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    a1->__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(a1 - 1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F20F434(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_24C9ABB08;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB8C8] + 16;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = &unk_24C9ABB60;
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)a1 = &off_24C9FAE78;
  *(_QWORD *)(a1 + 8) = &unk_24C9FAEA8;
  *(_QWORD *)(a1 + 24) = &unk_24C9FAED0;
  return a1;
}

void sub_20F20F4DC(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

double sub_20F20F4F0(double a1, double a2, double a3, double a4, double a5, double a6)
{
  double v6;
  double v7;
  double v8;
  double result;
  double v11;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;

  v6 = a1;
  v7 = 1.0;
  if (a1 <= 0.0)
  {
    if (floor(a1) == a1)
      sub_20F20F830("boost::math::tgamma<%1%>(%1%)", "Evaluation of tgamma at a negative integer %1%.");
    if (a1 <= -20.0)
    {
      v13 = sub_20F20F4F0(-a1);
      if (v6 >= 0.0)
        v14 = v6;
      else
        v14 = -v6;
      v15 = floor(v14);
      v16 = v15 + 1.0 - v14;
      v17 = v14 - v15;
      if ((vcvtmd_s64_f64(v14) & 1) != 0)
      {
        v17 = v16;
        v18 = -v14;
      }
      else
      {
        v18 = v14;
      }
      if (v17 <= 0.5)
        v19 = v17;
      else
        v19 = 1.0 - v17;
      v20 = v18 * sin(v19 * 3.14159265) * v13;
      v21 = fabs(v20);
      if (v21 < 1.0 && v21 * 1.79769313e308 < 3.14159265)
        goto LABEL_42;
      v22 = -3.14159265 / v20;
      result = 0.0;
      if (v22 != 0.0)
        return v22;
      return result;
    }
    if (a1 < 0.0)
    {
      do
      {
        v7 = v7 / v6;
        v6 = v6 + 1.0;
      }
      while (v6 < 0.0);
    }
  }
  v8 = floor(v6);
  if (v6 >= 170.0 || v8 != v6)
  {
    if (v6 < 0.0000000149011612)
    {
      if (v6 < COERCE_DOUBLE(0x4000000000000))
        sub_20F20FCB0("boost::math::tgamma<%1%>(%1%)", "Overflow Error");
      return v7 * (1.0 / v6 + -0.577215665);
    }
    v23 = v7 * sub_20F2105DC((uint64_t)&unk_2103A6578, (uint64_t)&unk_2103A65E0, v6, 170.0, a3, a4, a5, a6);
    v24 = v6 + 6.02468004 + -0.5;
    v25 = v6 * log(v24);
    if (v25 <= 709.0)
    {
      v28 = pow(v6 + 6.02468004 + -0.5, v6 + -0.5);
      return v23 * (v28 / exp(v24));
    }
    if (v25 * 0.5 <= 709.0)
    {
      v26 = pow(v6 + 6.02468004 + -0.5, v6 * 0.5 + -0.25);
      v27 = v23 * (v26 / exp(v24));
      if (1.79769313e308 / v26 >= v27)
        return v26 * v27;
    }
LABEL_42:
    sub_20F20FCB0("boost::math::tgamma<%1%>(%1%)", "Result of tgamma is too large to represent.");
  }
  if ((*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    sub_20F20FE60("boost::math::trunc<%1%>(%1%)");
  v11 = ceil(v6);
  if (v6 < 0.0)
    v8 = v11;
  if (v8 > 2147483650.0 || v8 < -2147483650.0)
    sub_20F20FE60("boost::math::itrunc<%1%>(%1%)");
  return v7 * dbl_2103A5FD0[(int)v8 - 1];
}

void sub_20F20F830(const char *a1, const char *a2)
{
  const char *v2;
  const char *v3;
  size_t v4;
  std::string::size_type v5;
  std::string *p_dst;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string::size_type v10;
  std::string *v11;
  uint64_t v12;
  uint64_t v13;
  std::string *v14;
  std::string::size_type size;
  char *v16;
  std::string *v17;
  std::string::size_type v18;
  std::logic_error v19;
  _QWORD v20[2];
  char v21;
  std::string v22;
  std::string v23;
  std::string __dst;

  if (a1)
    v2 = a1;
  else
    v2 = "Unknown function operating on type %1%";
  if (a2)
    v3 = a2;
  else
    v3 = "Cause unknown: error caused by bad argument with value %1%";
  v4 = strlen(v2);
  if (v4 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v8 = v4 | 7;
    v9 = v8 + 1;
    p_dst = (std::string *)operator new(v8 + 1);
    __dst.__r_.__value_.__l.__size_ = v5;
    __dst.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4;
    p_dst = &__dst;
    if (!v4)
    {
      __dst.__r_.__value_.__s.__data_[0] = 0;
      v7 = strlen(v3);
      if (v7 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_12;
      goto LABEL_17;
    }
  }
  memcpy(p_dst, v2, v5);
  p_dst->__r_.__value_.__s.__data_[v5] = 0;
  v7 = strlen(v3);
  if (v7 > 0x7FFFFFFFFFFFFFF7)
LABEL_12:
    sub_20E860B7C();
LABEL_17:
  v10 = v7;
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v11 = (std::string *)operator new(v12 + 1);
    v23.__r_.__value_.__l.__size_ = v10;
    v23.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
    v23.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
  }
  else
  {
    *((_BYTE *)&v23.__r_.__value_.__s + 23) = v7;
    v11 = &v23;
    if (!v7)
    {
LABEL_24:
      v11->__r_.__value_.__s.__data_[v10] = 0;
      *((_BYTE *)&v22.__r_.__value_.__s + 23) = 18;
      strcpy((char *)&v22, "Error in function ");
      sub_20F20D330(&__dst, "long double");
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v14 = &__dst;
      else
        v14 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      else
        size = __dst.__r_.__value_.__l.__size_;
      std::string::append(&v22, (const std::string::value_type *)v14, size);
      std::string::append(&v22, ": ", 2uLL);
      sub_20F20FB0C(v20);
      if (v21 >= 0)
        v16 = (char *)v20;
      else
        v16 = (char *)v20[0];
      sub_20F20D330(&v23, v16);
      if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = &v23;
      else
        v17 = (std::string *)v23.__r_.__value_.__r.__words[0];
      if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v18 = HIBYTE(v23.__r_.__value_.__r.__words[2]);
      else
        v18 = v23.__r_.__value_.__l.__size_;
      std::string::append(&v22, (const std::string::value_type *)v17, v18);
      std::logic_error::logic_error(&v19, &v22);
      v19.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B0] + 16);
      sub_20F20D5E0(&v19);
    }
  }
  memcpy(v11, v3, v10);
  goto LABEL_24;
}

void sub_20F20FA5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::logic_error a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  std::logic_error::~logic_error(&a10);
  if (a16 < 0)
  {
    operator delete(__p);
    if (a22 < 0)
    {
LABEL_5:
      operator delete(a17);
      if ((a29 & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_9;
    }
  }
  else if (a22 < 0)
  {
    goto LABEL_5;
  }
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if (*(char *)(v29 - 65) < 0)
      goto LABEL_7;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a24);
  if (*(char *)(v29 - 65) < 0)
  {
LABEL_7:
    operator delete(*(void **)(v29 - 88));
    _Unwind_Resume(a1);
  }
LABEL_10:
  _Unwind_Resume(a1);
}

uint64_t sub_20F20FB0C(_BYTE *a1)
{
  size_t v2;
  unint64_t v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _QWORD v10[2];
  _QWORD v11[3];
  const void *v12;
  uint64_t v13;
  const void *v14;
  unint64_t v15;
  void *__p;
  char v17;
  unint64_t v18;
  int v19;
  uint64_t v20;

  sub_20E863438((uint64_t)v10);
  *(_QWORD *)((char *)&v11[2] + *(_QWORD *)(v11[0] - 24)) = 17;
  std::ostream::operator<<();
  if ((v19 & 0x10) != 0)
  {
    v3 = v18;
    if (v18 < v15)
    {
      v18 = v15;
      v3 = v15;
    }
    v4 = v14;
    v2 = v3 - (_QWORD)v14;
    if (v3 - (unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_18;
  }
  else
  {
    if ((v19 & 8) == 0)
    {
      v2 = 0;
      a1[23] = 0;
      goto LABEL_14;
    }
    v4 = v12;
    v2 = v13 - (_QWORD)v12;
    if ((unint64_t)(v13 - (_QWORD)v12) >= 0x7FFFFFFFFFFFFFF8)
LABEL_18:
      sub_20E860B7C();
  }
  if (v2 >= 0x17)
  {
    v5 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17)
      v5 = v2 | 7;
    v6 = v5 + 1;
    v7 = operator new(v5 + 1);
    *((_QWORD *)a1 + 1) = v2;
    *((_QWORD *)a1 + 2) = v6 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
    a1 = v7;
    goto LABEL_13;
  }
  a1[23] = v2;
  if (v2)
LABEL_13:
    memmove(a1, v4, v2);
LABEL_14:
  a1[v2] = 0;
  v10[0] = *MEMORY[0x24BEDB7F0];
  v8 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v11[0] = v8;
  v11[1] = MEMORY[0x24BEDB848] + 16;
  if (v17 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x212BC6290](&v20);
}

void sub_20F20FC9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E863784((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F20FCB0(const char *a1, const char *a2)
{
  const char *v2;
  const char *v3;
  size_t v4;
  std::string::size_type v5;
  std::string *p_dst;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  std::string::size_type size;
  size_t v11;
  std::runtime_error v12;
  std::string v13;
  std::string __dst;

  if (a1)
    v2 = a1;
  else
    v2 = "Unknown function operating on type %1%";
  if (a2)
    v3 = a2;
  else
    v3 = "Cause unknown";
  v4 = strlen(v2);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    p_dst = (std::string *)operator new(v7 + 1);
    __dst.__r_.__value_.__l.__size_ = v5;
    __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4;
    p_dst = &__dst;
    if (!v4)
    {
LABEL_16:
      p_dst->__r_.__value_.__s.__data_[v5] = 0;
      *((_BYTE *)&v13.__r_.__value_.__s + 23) = 18;
      strcpy((char *)&v13, "Error in function ");
      sub_20F20D330(&__dst, "long double");
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v9 = &__dst;
      else
        v9 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      else
        size = __dst.__r_.__value_.__l.__size_;
      std::string::append(&v13, (const std::string::value_type *)v9, size);
      std::string::append(&v13, ": ", 2uLL);
      v11 = strlen(v3);
      std::string::append(&v13, v3, v11);
      std::runtime_error::runtime_error(&v12, &v13);
      v12.__vftable = (std::runtime_error_vtbl *)(MEMORY[0x24BEDB8C8] + 16);
      sub_20F20F004(&v12);
    }
  }
  memcpy(p_dst, v2, v5);
  goto LABEL_16;
}

void sub_20F20FE10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::runtime_error::~runtime_error(&a9);
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a21 & 0x80000000) == 0)
  {
LABEL_3:
    _Unwind_Resume(a1);
  }
  operator delete(a16);
  _Unwind_Resume(a1);
}

void sub_20F20FE60(const char *a1)
{
  const char *v1;
  size_t v2;
  std::string::size_type v3;
  std::string *p_dst;
  uint64_t v5;
  uint64_t v6;
  std::string *v7;
  std::string::size_type size;
  char *v9;
  std::string *v10;
  std::string::size_type v11;
  std::runtime_error v12;
  _QWORD v13[2];
  char v14;
  std::string v15;
  std::string v16;
  std::string __dst;

  if (a1)
    v1 = a1;
  else
    v1 = "Unknown function operating on type %1%";
  v2 = strlen(v1);
  if (v2 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v3 = v2;
  if (v2 >= 0x17)
  {
    v5 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17)
      v5 = v2 | 7;
    v6 = v5 + 1;
    p_dst = (std::string *)operator new(v5 + 1);
    __dst.__r_.__value_.__l.__size_ = v3;
    __dst.__r_.__value_.__r.__words[2] = v6 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v2;
    p_dst = &__dst;
    if (!v2)
    {
LABEL_13:
      p_dst->__r_.__value_.__s.__data_[v3] = 0;
      v16.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
      *(_OWORD *)&v16.__r_.__value_.__r.__words[1] = xmmword_2103A5C60;
      strcpy(v16.__r_.__value_.__l.__data_, "Value %1% can not be represented in the target integer type.");
      *((_BYTE *)&v15.__r_.__value_.__s + 23) = 18;
      strcpy((char *)&v15, "Error in function ");
      sub_20F20D330(&__dst, "long double");
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v7 = &__dst;
      else
        v7 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      else
        size = __dst.__r_.__value_.__l.__size_;
      std::string::append(&v15, (const std::string::value_type *)v7, size);
      std::string::append(&v15, ": ", 2uLL);
      sub_20F20FB0C(v13);
      if (v14 >= 0)
        v9 = (char *)v13;
      else
        v9 = (char *)v13[0];
      sub_20F20D330(&v16, v9);
      if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v10 = &v16;
      else
        v10 = (std::string *)v16.__r_.__value_.__r.__words[0];
      if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v11 = HIBYTE(v16.__r_.__value_.__r.__words[2]);
      else
        v11 = v16.__r_.__value_.__l.__size_;
      std::string::append(&v15, (const std::string::value_type *)v10, v11);
      std::runtime_error::runtime_error(&v12, &v15);
      v12.__vftable = (std::runtime_error_vtbl *)&off_24C9FAEF0;
      sub_20F2100D0(&v12);
    }
  }
  memcpy(p_dst, v1, v3);
  goto LABEL_13;
}

void sub_20F210020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  std::runtime_error::~runtime_error(&a10);
  if (a16 < 0)
  {
    operator delete(__p);
    if (a22 < 0)
    {
LABEL_5:
      operator delete(a17);
      if ((a29 & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_9;
    }
  }
  else if (a22 < 0)
  {
    goto LABEL_5;
  }
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if (*(char *)(v29 - 49) < 0)
      goto LABEL_7;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a24);
  if (*(char *)(v29 - 49) < 0)
  {
LABEL_7:
    operator delete(*(void **)(v29 - 72));
    _Unwind_Resume(a1);
  }
LABEL_10:
  _Unwind_Resume(a1);
}

void sub_20F2100D0(const std::runtime_error *a1)
{
  void *exception;
  void *v3;

  exception = __cxa_allocate_exception(0x40uLL);
  v3 = (void *)sub_20F21012C((uint64_t)exception, a1);
  __cxa_throw(v3, (struct type_info *)&unk_24C9FAF20, (void (*)(void *))sub_20F210184);
}

void sub_20F210108(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F21012C(uint64_t a1, const std::runtime_error *a2)
{
  *(_QWORD *)a1 = &unk_24C9ABB08;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(_QWORD *)a1 = &off_24C9FAF78;
  *(_QWORD *)(a1 + 8) = &unk_24C9FAFA8;
  *(_QWORD *)(a1 + 24) = &unk_24C9FAFD0;
  *(_QWORD *)(a1 + 32) = 0;
  return a1;
}

uint64_t sub_20F210184(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 24) = &unk_24C9ABB60;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *(_QWORD *)(a1 + 32) = 0;
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  return a1;
}

uint64_t sub_20F2101DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_24C9ABB08;
  std::runtime_error::runtime_error((std::runtime_error *)(v2 + 8), (const std::runtime_error *)(a1 + 8));
  *(_QWORD *)(v2 + 8) = &off_24C9FAEF0;
  *(_QWORD *)(v2 + 24) = &unk_24C9ABB60;
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v2 + 32) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_DWORD *)(v2 + 56) = *(_DWORD *)(a1 + 56);
  *(_QWORD *)v2 = &off_24C9FAF78;
  *(_QWORD *)(v2 + 8) = &unk_24C9FAFA8;
  *(_QWORD *)(v2 + 24) = &unk_24C9FAFD0;
  sub_20E86E24C(v2 + 24, a1 + 24);
  return v2;
}

void sub_20F2102AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::runtime_error *v2;

  std::runtime_error::~runtime_error(v2);
  MEMORY[0x212BC6398](v1, 0x10F1C40250A9ABCLL);
  _Unwind_Resume(a1);
}

void sub_20F2102D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void sub_20F2102F4(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  sub_20F210524((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24C9FAF20, (void (*)(void *))sub_20F210184);
}

void sub_20F210330(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20F210344(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 24) = &unk_24C9ABB60;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *(_QWORD *)(a1 + 32) = 0;
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  JUMPOUT(0x212BC6398);
}

void sub_20F2103AC(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&unk_24C9ABB60;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    this[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(this);
}

void sub_20F2103FC(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&unk_24C9ABB60;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    this[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x212BC6398);
}

void sub_20F210468(std::runtime_error *a1)
{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&unk_24C9ABB60;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    a1->__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(a1 - 1);
}

void sub_20F2104B8(std::runtime_error *a1)
{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&unk_24C9ABB60;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    a1->__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(a1 - 1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F210524(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_24C9ABB08;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  *(_QWORD *)(a1 + 8) = &off_24C9FAEF0;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = &unk_24C9ABB60;
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)a1 = &off_24C9FAF78;
  *(_QWORD *)(a1 + 8) = &unk_24C9FAFA8;
  *(_QWORD *)(a1 + 24) = &unk_24C9FAFD0;
  return a1;
}

void sub_20F2105C8(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

double sub_20F2105DC(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  unint64_t v8;
  float64x2_t v9;
  float64x2_t v10;
  double v11;
  float64x2_t v17;
  uint64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  uint64_t v21;
  float64x2_t v22;
  float64x2_t v23;
  uint64_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  double v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  uint64_t v33;
  uint64x2_t v34;
  float64x2_t v35;
  uint64_t v36;
  uint64_t v37;
  float64x2_t v38;
  float64x2_t v39;
  uint64_t v40;
  float64x2_t v41;
  float64x2_t v42;

  v9.f64[0] = a3 * a3;
  if (a3 <= 1.0)
  {
    v29 = *(double *)(a1 + 80);
    v30.f64[0] = v9.f64[0] * *(double *)(a1 + 96) + v29;
    LODWORD(a8) = *(_DWORD *)(a2 + 44);
    LODWORD(v29) = *(_DWORD *)(a2 + 48);
    LODWORD(a7) = *(_DWORD *)(a2 + 40);
    v31.f64[0] = v9.f64[0] * (double)*(unint64_t *)&v29 + (double)*(unint64_t *)&a7;
    v30.f64[1] = *(float64_t *)(a1 + 88);
    v32 = vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(v30, v9.f64[0]), *(float64x2_t *)(a1 + 64)), v9.f64[0]), *(float64x2_t *)(a1 + 48)), v9.f64[0]), *(float64x2_t *)(a1 + 32)), v9.f64[0]), *(float64x2_t *)(a1 + 16)), v9.f64[0]), *(float64x2_t *)a1);
    v31.f64[1] = (double)*(unint64_t *)&a8;
    v33 = *(_QWORD *)(a2 + 32);
    v34.i64[0] = v33;
    v34.i64[1] = HIDWORD(v33);
    v35 = vmulq_n_f64(vaddq_f64(vmulq_n_f64(v31, v9.f64[0]), vcvtq_f64_u64(v34)), v9.f64[0]);
    v37 = *(_QWORD *)(a2 + 16);
    v36 = *(_QWORD *)(a2 + 24);
    v34.i64[0] = v36;
    v34.i64[1] = HIDWORD(v36);
    v38 = vmulq_n_f64(vaddq_f64(v35, vcvtq_f64_u64(v34)), v9.f64[0]);
    v34.i64[0] = v37;
    v34.i64[1] = HIDWORD(v37);
    v39 = vmulq_n_f64(vaddq_f64(v38, vcvtq_f64_u64(v34)), v9.f64[0]);
    v40 = *(_QWORD *)(a2 + 8);
    v34.i64[0] = v40;
    v34.i64[1] = HIDWORD(v40);
    v41 = vmulq_n_f64(vaddq_f64(v39, vcvtq_f64_u64(v34)), v9.f64[0]);
    v34.i64[0] = *(_QWORD *)a2;
    v34.i64[1] = HIDWORD(*(_QWORD *)a2);
    v42 = vaddq_f64(v41, vcvtq_f64_u64(v34));
    return (vmuld_lane_f64(a3, v32, 1) + v32.f64[0]) / (vmuld_lane_f64(a3, v42, 1) + v42.f64[0]);
  }
  else
  {
    v10.f64[0] = *(float64_t *)(a1 + 8);
    LODWORD(v8) = *(_DWORD *)(a2 + 48);
    v9.f64[1] = a3;
    v11 = (double)v8;
    __asm { FMOV            V18.2D, #1.0 }
    v17 = vdivq_f64(_Q18, v9);
    _Q18.f64[0] = *(float64_t *)(a2 + 8);
    v18.i64[0] = *(_QWORD *)a2;
    v18.i64[1] = HIDWORD(*(_QWORD *)a2);
    v19 = vmulq_n_f64(vcvtq_f64_u64(v18), v17.f64[0]);
    v18.i64[0] = LODWORD(_Q18.f64[0]);
    v18.i64[1] = HIDWORD(_Q18.f64[0]);
    v20 = vmulq_n_f64(vaddq_f64(v19, vcvtq_f64_u64(v18)), v17.f64[0]);
    _Q18.f64[0] = *(float64_t *)(a2 + 16);
    v21 = *(_QWORD *)(a2 + 24);
    v18.i64[0] = LODWORD(_Q18.f64[0]);
    v18.i64[1] = HIDWORD(_Q18.f64[0]);
    v22 = vmulq_n_f64(vaddq_f64(v20, vcvtq_f64_u64(v18)), v17.f64[0]);
    v18.i64[0] = v21;
    v18.i64[1] = HIDWORD(v21);
    v23 = vmulq_n_f64(vaddq_f64(v22, vcvtq_f64_u64(v18)), v17.f64[0]);
    _Q18.f64[0] = *(float64_t *)(a2 + 32);
    v24 = *(_QWORD *)(a2 + 40);
    v18.i64[0] = LODWORD(_Q18.f64[0]);
    v18.i64[1] = HIDWORD(_Q18.f64[0]);
    v25 = vmulq_n_f64(vaddq_f64(v23, vcvtq_f64_u64(v18)), v17.f64[0]);
    v18.i64[0] = v24;
    v18.i64[1] = HIDWORD(v24);
    v10.f64[1] = *(double *)a1 * v17.f64[0] + *(double *)(a1 + 16);
    v26 = vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(v10, v17.f64[0]), *(float64x2_t *)(a1 + 24)), v17.f64[0]), *(float64x2_t *)(a1 + 40)), v17.f64[0]), *(float64x2_t *)(a1 + 56)), v17.f64[0]), *(float64x2_t *)(a1 + 72)), v17.f64[0]), *(float64x2_t *)(a1 + 88));
    v27 = vmulq_f64(v17, vaddq_f64(v25, vcvtq_f64_u64(v18)));
    return vaddq_f64(vmulq_laneq_f64(v26, v17, 1), (float64x2_t)vdupq_laneq_s64((int64x2_t)v26, 1)).f64[0]
         / (v27.f64[1] + v27.f64[0] + v11);
  }
}

double sub_20F2107B8(double a1, double a2, double a3, double a4, float64x2_t a5, float64x2_t a6, float64x2_t a7)
{
  double v7;
  double v8;
  double v9;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;

  v7 = a1;
  if (a1 <= -0.0000000149011612)
  {
    if (floor(a1) == a1)
      sub_20F20F830("boost::math::lgamma<%1%>(%1%)", "Evaluation of lgamma at a negative integer %1%.");
    v11 = -a1;
    if (a1 < 0.0)
      a1 = -a1;
    v12 = floor(a1);
    v13 = v12 + 1.0 - a1;
    v14 = a1 - v12;
    if ((vcvtmd_s64_f64(a1) & 1) != 0)
    {
      v14 = v13;
      v15 = -a1;
    }
    else
    {
      v15 = a1;
    }
    if (v14 <= 0.5)
      v16 = v14;
    else
      v16 = 1.0 - v14;
    v17 = v15 * sin(v16 * 3.14159265);
    if (v17 >= 0.0)
      v18 = v17;
    else
      v18 = -v17;
    v19 = 1.14472989 - sub_20F2107B8(v11);
    return v19 - log(v18);
  }
  else
  {
    if (a1 < 0.0000000149011612)
    {
      if (a1 == 0.0)
        sub_20F20F830("boost::math::lgamma<%1%>(%1%)", "Evaluation of lgamma at %1%.");
      v8 = fabs(a1);
      if (v8 * 4.0 < 2.22044605e-16)
        return -log(v8);
      v26 = fabs(1.0 / v7 + -0.577215665);
      return log(v26);
    }
    if (a1 < 15.0)
      return sub_20F210A00(a1, a1 + -1.0, a1 + -2.0, a4, a5, a6, a7);
    if (a1 >= 3.0 && a1 < 100.0)
    {
      v26 = sub_20F20F4F0(a1, a2, a3, a4, a5.f64[0], a6.f64[0]);
      return log(v26);
    }
    v9 = (a1 + -0.5) * (log(a1 + 6.02468004 + -0.5) + -1.0);
    if (v9 * 2.22044605e-16 >= 20.0)
      return v9;
    v25 = sub_20F2105DC((uint64_t)&unk_2103A6618, (uint64_t)&unk_2103A6680, v7, 20.0, v21, v22, v23, v24);
    return v9 + log(v25);
  }
}

double sub_20F210A00(long double a1, double a2, double a3, double a4, float64x2_t a5, float64x2_t a6, float64x2_t a7)
{
  double v7;
  double result;
  double v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  const double *v13;
  float64x2_t v14;
  float64x2_t v15;
  double v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  const double *v20;
  double v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  double v29;

  v7 = a1;
  if (a1 < 2.22044605e-16)
    return -log(a1);
  result = 0.0;
  if (a2 != 0.0 && a3 != 0.0)
  {
    if (v7 <= 2.0)
    {
      v16 = 0.0;
      if (v7 < 1.0)
      {
        v29 = a2;
        v16 = 0.0 - log(v7);
        a3 = v29;
        a2 = v7;
        v7 = v7 + 1.0;
      }
      if (v7 <= 1.5)
      {
        v24 = vmulq_n_f64((float64x2_t)xmmword_2103A5C70, a2 * a2);
        a5.f64[0] = -0.158413586;
        *(_QWORD *)&v25.f64[0] = *(_OWORD *)&vsubq_f64(a5, v24);
        v26 = (float64x2_t)vdupq_n_s64(0x3FE03A78EC3D5097uLL);
        v25.f64[1] = vaddq_f64(v24, v26).f64[1];
        v27 = vmulq_n_f64((float64x2_t)xmmword_2103A5C80, a2 * a2);
        v26.f64[0] = -0.406567124;
        *(_QWORD *)&v26.f64[0] = *(_OWORD *)&vsubq_f64(v26, v27);
        v26.f64[1] = vaddq_f64(v27, (float64x2_t)vdupq_n_s64(0x3FFEA061EB3D527BuLL)).f64[1];
        v28 = vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(v26, a2 * a2), (float64x2_t)xmmword_2103A5CA0), a2), vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(v25, a2 * a2), (float64x2_t)xmmword_2103A5C90), a2 * a2), (float64x2_t)xmmword_2103A5CB0));
        return v16
             + a3 * a2 * 0.528153419
             + a3 * a2 * vdivq_f64(v28, (float64x2_t)vdupq_laneq_s64((int64x2_t)v28, 1)).f64[0];
      }
      else
      {
        v17 = vmulq_n_f64((float64x2_t)xmmword_2103A5CC0, a3 * a3);
        a6.f64[0] = 0.0542809694;
        *(_QWORD *)&v18.f64[0] = *(_OWORD *)&vaddq_f64(v17, a6);
        v19 = (float64x2_t)vdupq_n_s64(0xBFCC2C13F386DB1DLL);
        v18.f64[1] = vsubq_f64(v19, v17).f64[1];
        v20 = (const double *)&unk_2103A5A78;
        *(_QWORD *)&v17.f64[0] = *(_OWORD *)&vld1q_dup_f64(v20);
        v17.f64[1] = a3 * a3 * -0.000000827193522 + 0.0255827972;
        v21 = a3 * a2;
        v22 = vmulq_n_f64(v17, a3 * a3);
        v19.f64[0] = -0.142440391;
        *(_QWORD *)&v19.f64[0] = *(_OWORD *)&vsubq_f64(v19, v22);
        v19.f64[1] = vaddq_f64(v22, (float64x2_t)vdupq_n_s64(0x3FEB1A67A4905D83uLL)).f64[1];
        v23 = vsubq_f64(vaddq_f64(vmulq_n_f64(v19, a3 * a3), (float64x2_t)xmmword_2103A5CE0), vmulq_n_f64(vaddq_f64(vmulq_n_f64(v18, a3 * a3), (float64x2_t)xmmword_2103A5CD0), a3));
        return v16 + v21 * 0.452017307 + v21 * vdivq_f64(v23, (float64x2_t)vdupq_laneq_s64((int64x2_t)v23, 1)).f64[0];
      }
    }
    else
    {
      v9 = 0.0;
      if (v7 >= 3.0)
      {
        do
        {
          v7 = v7 + -1.0;
          v9 = v9 + log(v7);
        }
        while (v7 >= 3.0);
        a3 = v7 + -2.0;
      }
      v10 = (float64x2_t)vdupq_n_s64(0x3FB94E42EF0E201CuLL);
      a7.f64[0] = -0.000259453563;
      v11 = vmulq_n_f64((float64x2_t)xmmword_2103A5CF0, a3 * a3);
      *(_QWORD *)&v12.f64[0] = *(_OWORD *)&vsubq_f64(a7, v11);
      v12.f64[1] = vaddq_f64(v11, v10).f64[1];
      v13 = (const double *)&unk_2103A5AA0;
      *(_QWORD *)&v11.f64[0] = *(_OWORD *)&vld1q_dup_f64(v13);
      v11.f64[1] = a3 * a3 * -0.000000223352763 + 0.00821309675;
      v14 = vmulq_n_f64(v11, a3 * a3);
      v10.f64[0] = 0.0172491609;
      *(_QWORD *)&v10.f64[0] = *(_OWORD *)&vsubq_f64(v10, v14);
      v10.f64[1] = vaddq_f64(v14, (float64x2_t)vdupq_n_s64(0x3FE153141FE2A50BuLL)).f64[1];
      v15 = vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(v10, a3 * a3), (float64x2_t)xmmword_2103A5D10), a3), vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(v12, a3 * a3), (float64x2_t)xmmword_2103A5D00), a3 * a3), (float64x2_t)xmmword_2103A5D20));
      return v9
           + a3 * (v7 + 1.0) * 0.15896368
           + a3 * (v7 + 1.0) * vdivq_f64(v15, (float64x2_t)vdupq_laneq_s64((int64x2_t)v15, 1)).f64[0];
    }
  }
  return result;
}

float64_t sub_20F210DB0(float64x2_t *a1, double a2)
{
  float64x2_t v2;
  float64x2_t v3;

  v2.f64[0] = a2 * a2 * a1[3].f64[0] + a1[2].f64[0];
  v2.f64[1] = a1[2].f64[1];
  v3 = vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(v2, a2 * a2), a1[1]), a2 * a2), *a1);
  return v3.f64[0] + vmuld_lane_f64(a2, v3, 1);
}

double sub_20F210DEC(float64x2_t *a1, double a2)
{
  float64x2_t v2;

  v2 = vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(a1[2], a2 * a2), a1[1]), a2 * a2), *a1);
  return vmuld_lane_f64(a2, v2, 1) + v2.f64[0];
}

double sub_20F210E14(double a1, long double a2)
{
  double result;
  double v5;
  long double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  long double v16;
  double v17;
  double v18;
  double v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  long double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  long double v38;
  double v39;
  double v40;
  long double v41;
  double v42;
  double v43;
  double v45;
  int v46;
  unint64_t v47;
  double v48;
  double v49;
  long double v50;

  result = 0.0;
  if (a2 < 1.79769313e308)
  {
    if (a1 < 1.0)
    {
      if (a2 <= -708.0)
      {
        v16 = log(a2) * a1 - a2;
        v23 = v16 - sub_20F2107B8(a1, v17, v18, v19, v20, v21, v22);
        return exp(v23);
      }
      else
      {
        v5 = pow(a2, a1);
        v6 = v5 * exp(-a2);
        return v6 / sub_20F20F4F0(a1, v7, v8, v9, v10, v11);
      }
    }
    v12 = a1 + 6.02468004 + -0.5;
    if (a1 > 150.0)
    {
      v13 = (a2 - a1 + -6.02468004 + 0.5) / v12;
      if (fabs(v13 * v13 * a1) <= 100.0)
      {
        if (v13 < -1.0)
          sub_20F20F830("boost::math::log1pmx<%1%>(%1%)", "log1pmx(x) requires x > -1, but got x = %1%.");
        if (v13 == -1.0)
          sub_20F20FCB0("boost::math::log1pmx<%1%>(%1%)", "Overflow Error");
        v14 = fabs(v13);
        if (v14 <= 0.949999988)
        {
          v42 = -v13;
          if (v14 >= 2.22044605e-16)
          {
            v15 = 0.0;
            v46 = 2;
            v47 = 1000000;
            do
            {
              v13 = v13 * v42;
              v48 = v13 / (double)v46;
              v15 = v15 + v48;
              if (fabs(v15 * 2.22044605e-16) >= fabs(v48))
                break;
              ++v46;
              --v47;
            }
            while (v47);
            if (v47 > 0xF4240)
              sub_20F21122C("boost::math::log1pmx<%1%>(%1%)");
          }
          else
          {
            v15 = v13 * v42 * 0.5;
          }
        }
        else
        {
          v15 = log(v13 + 1.0) - v13;
        }
        v45 = v15 * a1 + a2 * -5.52468004 / v12;
        goto LABEL_47;
      }
    }
    v24 = log(a2 / v12);
    v25 = v24 * a1;
    v26 = a1 - a2;
    if (a1 - a2 >= v24 * a1)
      v27 = v24 * a1;
    else
      v27 = a1 - a2;
    if (v27 <= -708.0 || (v25 >= v26 ? (v28 = v25) : (v28 = a1 - a2), v28 >= 709.0))
    {
      if (v27 * 0.5 <= -708.0 || (v25 >= v26 ? (v36 = v25) : (v36 = a1 - a2), v36 * 0.5 >= 709.0))
      {
        if (v27 * 0.25 <= -708.0 || (v25 >= v26 ? (v39 = v25) : (v39 = a1 - a2), a1 >= a2 || v39 * 0.25 >= 709.0))
        {
          v43 = v26 / a1;
          if (v26 / a1 > -708.0 && v43 < 709.0)
          {
            v50 = exp(v43);
            v49 = pow(v50 * a2 / v12, a1);
            goto LABEL_48;
          }
          v45 = v26 + v25;
LABEL_47:
          v49 = exp(v45);
LABEL_48:
          v35 = v49;
          return v35
               * (sqrt(v12 / 2.71828183)
                / sub_20F2105DC((uint64_t)&unk_2103A6618, (uint64_t)&unk_2103A6680, a1, v30, v31, v32, v33, v34));
        }
        v40 = pow(a2 / v12, a1 * 0.25);
        v41 = exp(v26 * 0.25);
        v35 = v40 * v41 * (v40 * v41) * (v40 * v41 * (v40 * v41));
      }
      else
      {
        v37 = pow(a2 / v12, a1 * 0.5);
        v38 = exp(v26 * 0.5);
        v35 = v37 * v38 * (v37 * v38);
      }
    }
    else
    {
      v29 = pow(a2 / v12, a1);
      v35 = exp(v26) * v29;
    }
    return v35
         * (sqrt(v12 / 2.71828183)
          / sub_20F2105DC((uint64_t)&unk_2103A6618, (uint64_t)&unk_2103A6680, a1, v30, v31, v32, v33, v34));
  }
  return result;
}

void sub_20F21122C(const char *a1)
{
  const char *v1;
  size_t v2;
  std::string::size_type v3;
  std::string *p_dst;
  uint64_t v5;
  uint64_t v6;
  std::string *v7;
  std::string::size_type size;
  char *v9;
  std::string *v10;
  std::string::size_type v11;
  std::runtime_error v12;
  _QWORD v13[2];
  char v14;
  std::string v15;
  std::string v16;
  std::string __dst;

  if (a1)
    v1 = a1;
  else
    v1 = "Unknown function operating on type %1%";
  v2 = strlen(v1);
  if (v2 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v3 = v2;
  if (v2 >= 0x17)
  {
    v5 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17)
      v5 = v2 | 7;
    v6 = v5 + 1;
    p_dst = (std::string *)operator new(v5 + 1);
    __dst.__r_.__value_.__l.__size_ = v3;
    __dst.__r_.__value_.__r.__words[2] = v6 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v2;
    p_dst = &__dst;
    if (!v2)
    {
LABEL_13:
      p_dst->__r_.__value_.__s.__data_[v3] = 0;
      v16.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
      *(_OWORD *)&v16.__r_.__value_.__r.__words[1] = xmmword_2102D7440;
      strcpy(v16.__r_.__value_.__l.__data_, "Series evaluation exceeded %1% iterations, giving up now.");
      *((_BYTE *)&v15.__r_.__value_.__s + 23) = 18;
      strcpy((char *)&v15, "Error in function ");
      sub_20F20D330(&__dst, "long double");
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v7 = &__dst;
      else
        v7 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      else
        size = __dst.__r_.__value_.__l.__size_;
      std::string::append(&v15, (const std::string::value_type *)v7, size);
      std::string::append(&v15, ": ", 2uLL);
      sub_20F20FB0C(v13);
      if (v14 >= 0)
        v9 = (char *)v13;
      else
        v9 = (char *)v13[0];
      sub_20F20D330(&v16, v9);
      if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v10 = &v16;
      else
        v10 = (std::string *)v16.__r_.__value_.__r.__words[0];
      if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v11 = HIBYTE(v16.__r_.__value_.__r.__words[2]);
      else
        v11 = v16.__r_.__value_.__l.__size_;
      std::string::append(&v15, (const std::string::value_type *)v10, v11);
      std::runtime_error::runtime_error(&v12, &v15);
      v12.__vftable = (std::runtime_error_vtbl *)&off_24C9FAFF0;
      sub_20F21149C(&v12);
    }
  }
  memcpy(p_dst, v1, v3);
  goto LABEL_13;
}

void sub_20F2113EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  std::runtime_error::~runtime_error(&a10);
  if (a16 < 0)
  {
    operator delete(__p);
    if (a22 < 0)
    {
LABEL_5:
      operator delete(a17);
      if ((a29 & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_9;
    }
  }
  else if (a22 < 0)
  {
    goto LABEL_5;
  }
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if (*(char *)(v29 - 49) < 0)
      goto LABEL_7;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a24);
  if (*(char *)(v29 - 49) < 0)
  {
LABEL_7:
    operator delete(*(void **)(v29 - 72));
    _Unwind_Resume(a1);
  }
LABEL_10:
  _Unwind_Resume(a1);
}

void sub_20F21149C(const std::runtime_error *a1)
{
  void *exception;
  void *v3;

  exception = __cxa_allocate_exception(0x40uLL);
  v3 = (void *)sub_20F2114F8((uint64_t)exception, a1);
  __cxa_throw(v3, (struct type_info *)&unk_24C9FB020, (void (*)(void *))sub_20F211550);
}

void sub_20F2114D4(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F2114F8(uint64_t a1, const std::runtime_error *a2)
{
  *(_QWORD *)a1 = &unk_24C9ABB08;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(_QWORD *)a1 = &off_24C9FB078;
  *(_QWORD *)(a1 + 8) = &unk_24C9FB0A8;
  *(_QWORD *)(a1 + 24) = &unk_24C9FB0D0;
  *(_QWORD *)(a1 + 32) = 0;
  return a1;
}

uint64_t sub_20F211550(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 24) = &unk_24C9ABB60;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *(_QWORD *)(a1 + 32) = 0;
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  return a1;
}

uint64_t sub_20F2115A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_24C9ABB08;
  std::runtime_error::runtime_error((std::runtime_error *)(v2 + 8), (const std::runtime_error *)(a1 + 8));
  *(_QWORD *)(v2 + 8) = &off_24C9FAFF0;
  *(_QWORD *)(v2 + 24) = &unk_24C9ABB60;
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v2 + 32) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_DWORD *)(v2 + 56) = *(_DWORD *)(a1 + 56);
  *(_QWORD *)v2 = &off_24C9FB078;
  *(_QWORD *)(v2 + 8) = &unk_24C9FB0A8;
  *(_QWORD *)(v2 + 24) = &unk_24C9FB0D0;
  sub_20E86E24C(v2 + 24, a1 + 24);
  return v2;
}

void sub_20F211678(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::runtime_error *v2;

  std::runtime_error::~runtime_error(v2);
  MEMORY[0x212BC6398](v1, 0x10F1C40250A9ABCLL);
  _Unwind_Resume(a1);
}

void sub_20F2116A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void sub_20F2116C0(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  sub_20F2118F0((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24C9FB020, (void (*)(void *))sub_20F211550);
}

void sub_20F2116FC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20F211710(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 24) = &unk_24C9ABB60;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *(_QWORD *)(a1 + 32) = 0;
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  JUMPOUT(0x212BC6398);
}

void sub_20F211778(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&unk_24C9ABB60;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    this[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(this);
}

void sub_20F2117C8(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&unk_24C9ABB60;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    this[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x212BC6398);
}

void sub_20F211834(std::runtime_error *a1)
{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&unk_24C9ABB60;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    a1->__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(a1 - 1);
}

void sub_20F211884(std::runtime_error *a1)
{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&unk_24C9ABB60;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    a1->__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(a1 - 1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F2118F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_24C9ABB08;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  *(_QWORD *)(a1 + 8) = &off_24C9FAFF0;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = &unk_24C9ABB60;
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)a1 = &off_24C9FB078;
  *(_QWORD *)(a1 + 8) = &unk_24C9FB0A8;
  *(_QWORD *)(a1 + 24) = &unk_24C9FB0D0;
  return a1;
}

void sub_20F211994(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

double sub_20F2119A8(double *a1, double *a2, double *a3, double *a4, uint64_t *a5, double a6, double a7, double a8, float64x2_t a9, float64x2_t a10, float64x2_t a11, float64x2_t a12)
{
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  BOOL v26;
  double v27;
  double v28;
  __int128 v30;
  uint64_t v31;
  double v32;

  v18 = *a2;
  v19 = fabs(*a3);
  v20 = fabs(*a4);
  v21 = *a5 - 1;
  *a5 = v21;
  if (v19 >= v20)
  {
    if (!v21)
      goto LABEL_17;
    v22 = 2.0;
    v23 = a6;
    while (v18 >= 0.0 != *a2 < 0.0)
    {
      *a4 = v23;
      v23 = v22 * v23;
      v24 = *a3;
      if (v23 < *a3)
      {
LABEL_18:
        v32 = -v18;
        *a3 = v24;
        if (v22 <= 16.0)
          goto LABEL_17;
        goto LABEL_19;
      }
      v22 = v22 + v22;
      v32 = 0.0;
      sub_20F212040(*((unsigned __int8 *)a1 + 16), &v32, *a1, v23, v20, a9, a10, a11, a12);
      v18 = v27 - a1[1];
      v26 = (*a5)-- == 1;
      if (v26)
        goto LABEL_17;
    }
  }
  else
  {
    if (!v21)
      goto LABEL_17;
    v22 = 2.0;
    v23 = a6;
    while (v18 >= 0.0 != *a2 < 0.0)
    {
      *a4 = v23;
      v23 = v23 / v22;
      v24 = *a3;
      if (v23 < *a3)
        goto LABEL_18;
      v22 = v22 + v22;
      v32 = 0.0;
      sub_20F212040(*((unsigned __int8 *)a1 + 16), &v32, *a1, v23, v20, a9, a10, a11, a12);
      v18 = v25 - a1[1];
      v26 = (*a5)-- == 1;
      if (v26)
        goto LABEL_17;
    }
  }
  v32 = v18;
  v24 = v23;
  *a3 = v23;
  if (v22 > 16.0)
  {
LABEL_19:
    a6 = a6 - v24;
    v30 = *(_OWORD *)a1;
    v31 = *((_QWORD *)a1 + 2);
    v28 = sub_20F211B88((double *)&v30, &v32, a3, a4, a5, v24, *(double *)&v30, v20, a9, a10, a11, a12);
    return a6 + v28;
  }
LABEL_17:
  v28 = (*a4 + *a3) * -0.5;
  return a6 + v28;
}

double sub_20F211B88(double *a1, double *a2, double *a3, double *a4, uint64_t *a5, double a6, double a7, double a8, float64x2_t a9, float64x2_t a10, float64x2_t a11, float64x2_t a12)
{
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  BOOL v26;
  double v27;
  double v28;
  __int128 v30;
  uint64_t v31;
  double v32;

  v18 = *a2;
  v19 = fabs(*a3);
  v20 = fabs(*a4);
  v21 = *a5 - 1;
  *a5 = v21;
  if (v19 >= v20)
  {
    if (!v21)
      goto LABEL_17;
    v22 = 2.0;
    v23 = a6;
    while (v18 >= 0.0 != *a2 < 0.0)
    {
      *a3 = v23;
      v23 = v23 / v22;
      v24 = *a4;
      if (v23 > *a4)
      {
LABEL_18:
        v32 = -v18;
        *a4 = v24;
        if (v22 <= 16.0)
          goto LABEL_17;
        goto LABEL_19;
      }
      v22 = v22 + v22;
      v32 = 0.0;
      sub_20F212040(*((unsigned __int8 *)a1 + 16), &v32, *a1, v23, v20, a9, a10, a11, a12);
      v18 = v27 - a1[1];
      v26 = (*a5)-- == 1;
      if (v26)
        goto LABEL_17;
    }
  }
  else
  {
    if (!v21)
      goto LABEL_17;
    v22 = 2.0;
    v23 = a6;
    while (v18 >= 0.0 != *a2 < 0.0)
    {
      *a3 = v23;
      v23 = v22 * v23;
      v24 = *a4;
      if (v23 > *a4)
        goto LABEL_18;
      v22 = v22 + v22;
      v32 = 0.0;
      sub_20F212040(*((unsigned __int8 *)a1 + 16), &v32, *a1, v23, v20, a9, a10, a11, a12);
      v18 = v25 - a1[1];
      v26 = (*a5)-- == 1;
      if (v26)
        goto LABEL_17;
    }
  }
  v32 = v18;
  v24 = v23;
  *a4 = v23;
  if (v22 > 16.0)
  {
LABEL_19:
    a6 = a6 - v24;
    v30 = *(_OWORD *)a1;
    v31 = *((_QWORD *)a1 + 2);
    v28 = sub_20F2119A8(&v30, &v32, a3, a4, a5);
    return a6 + v28;
  }
LABEL_17:
  v28 = (*a4 + *a3) * -0.5;
  return a6 + v28;
}

void sub_20F211D68(const char *a1, const char *a2)
{
  const char *v2;
  const char *v3;
  size_t v4;
  std::string::size_type v5;
  std::string *p_dst;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string::size_type v10;
  std::string *v11;
  uint64_t v12;
  uint64_t v13;
  std::string *v14;
  std::string::size_type size;
  char *v16;
  std::string *v17;
  std::string::size_type v18;
  std::runtime_error v19;
  _QWORD v20[2];
  char v21;
  std::string v22;
  std::string v23;
  std::string __dst;

  if (a1)
    v2 = a1;
  else
    v2 = "Unknown function operating on type %1%";
  if (a2)
    v3 = a2;
  else
    v3 = "Cause unknown: error caused by bad argument with value %1%";
  v4 = strlen(v2);
  if (v4 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v8 = v4 | 7;
    v9 = v8 + 1;
    p_dst = (std::string *)operator new(v8 + 1);
    __dst.__r_.__value_.__l.__size_ = v5;
    __dst.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4;
    p_dst = &__dst;
    if (!v4)
    {
      __dst.__r_.__value_.__s.__data_[0] = 0;
      v7 = strlen(v3);
      if (v7 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_12;
      goto LABEL_17;
    }
  }
  memcpy(p_dst, v2, v5);
  p_dst->__r_.__value_.__s.__data_[v5] = 0;
  v7 = strlen(v3);
  if (v7 > 0x7FFFFFFFFFFFFFF7)
LABEL_12:
    sub_20E860B7C();
LABEL_17:
  v10 = v7;
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v11 = (std::string *)operator new(v12 + 1);
    v23.__r_.__value_.__l.__size_ = v10;
    v23.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
    v23.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
  }
  else
  {
    *((_BYTE *)&v23.__r_.__value_.__s + 23) = v7;
    v11 = &v23;
    if (!v7)
    {
LABEL_24:
      v11->__r_.__value_.__s.__data_[v10] = 0;
      *((_BYTE *)&v22.__r_.__value_.__s + 23) = 18;
      strcpy((char *)&v22, "Error in function ");
      sub_20F20D330(&__dst, "double");
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v14 = &__dst;
      else
        v14 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      else
        size = __dst.__r_.__value_.__l.__size_;
      std::string::append(&v22, (const std::string::value_type *)v14, size);
      std::string::append(&v22, ": ", 2uLL);
      sub_20F20D43C(v20);
      if (v21 >= 0)
        v16 = (char *)v20;
      else
        v16 = (char *)v20[0];
      sub_20F20D330(&v23, v16);
      if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = &v23;
      else
        v17 = (std::string *)v23.__r_.__value_.__r.__words[0];
      if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v18 = HIBYTE(v23.__r_.__value_.__r.__words[2]);
      else
        v18 = v23.__r_.__value_.__l.__size_;
      std::string::append(&v22, (const std::string::value_type *)v17, v18);
      std::runtime_error::runtime_error(&v19, &v22);
      v19.__vftable = (std::runtime_error_vtbl *)&off_24C9FAFF0;
      sub_20F21149C(&v19);
    }
  }
  memcpy(v11, v3, v10);
  goto LABEL_24;
}

void sub_20F211F90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  std::runtime_error::~runtime_error(&a10);
  if (a16 < 0)
  {
    operator delete(__p);
    if (a22 < 0)
    {
LABEL_5:
      operator delete(a17);
      if ((a29 & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_9;
    }
  }
  else if (a22 < 0)
  {
    goto LABEL_5;
  }
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if (*(char *)(v29 - 65) < 0)
      goto LABEL_7;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a24);
  if (*(char *)(v29 - 65) < 0)
  {
LABEL_7:
    operator delete(*(void **)(v29 - 88));
    _Unwind_Resume(a1);
  }
LABEL_10:
  _Unwind_Resume(a1);
}

void sub_20F212040(int a1, double *a2, double a3, double a4, double a5, float64x2_t a6, float64x2_t a7, float64x2_t a8, float64x2_t a9)
{
  double v12;
  double v13;
  double v14;
  BOOL v15;
  double v17;
  double v18;
  double v19;
  unsigned int v20;
  double v21;
  double v22;
  double v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  long double v29;
  double v30;
  double v31;
  double v32;
  long double v33;
  double v34;
  double v35;
  double v36;
  unsigned int v37;
  double v38;
  double v39;
  double v40;
  double v41;
  long double v42;
  double v43;
  float64x2_t v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v54;
  double v55;
  double v57;
  double v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  double v62;
  double v63;
  double v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  double v70;
  BOOL v71;
  double v72;
  _BOOL4 v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v81;
  float64x2_t v82;
  double v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  double v89;
  double v90;
  double v91;
  double v92;
  uint64_t v93;
  int v94;
  double v95;
  double v96;

  if (a3 <= 0.0)
    sub_20F20F830("boost::math::gamma_p<%1%>(%1%, %1%)", "Argument a to the incomplete gamma function must be greater than zero (got a=%1%).");
  if (a4 < 0.0)
    sub_20F20F830("boost::math::gamma_p<%1%>(%1%, %1%)", "Argument x to the incomplete gamma function must be >= 0 (got x=%1%).");
  v12 = a3;
  v13 = a4 + 1.0;
  v14 = 30.0;
  v15 = a4 < 709.0 && a3 < 30.0;
  if (!v15 || v13 < a3)
  {
LABEL_21:
    if (a3 > 1.0 && a4 < 0.0000000149011612)
    {
      if (fabs(sub_20F20F4F0(a3 + 1.0, v13, v14, a6.f64[0], a7.f64[0], a8.f64[0])) > 1.79769313e308)
        sub_20F20FCB0("boost::math::tgamma<%1%>(%1%)", "numeric overflow");
      pow(a4, v12);
      if (a2)
      {
        v24 = sub_20F210E14(v12, a4);
        *a2 = v24;
        if ((a1 & 1) == 0)
          goto LABEL_107;
      }
      goto LABEL_105;
    }
    if (a4 > 1000.0)
    {
      if (a3 < a4 || (v13 = 1.0, fabs(a3 + -50.0) / a4 < 1.0))
      {
        v25 = sub_20F210E14(a3, a4);
        if (a2)
          *a2 = v25;
        if (v25 / a4 != 0.0)
        {
          v26 = 0.0;
          v27 = 1.0;
          v28 = 1000000;
          do
          {
            v26 = v27 + v26;
            if (fabs(v26 * 2.22044605e-16) >= fabs(v27))
              break;
            v12 = v12 + -1.0;
            v27 = v27 * (v12 / a4);
            --v28;
          }
          while (v28);
          if ((unint64_t)(1000000 - v28) >= 0xF4240)
            sub_20F21122C("boost::math::tgamma<%1%>(%1%,%1%)");
        }
        goto LABEL_105;
      }
    }
    if (a4 < 0.5)
    {
      v29 = log(a4);
      v13 = -0.4;
      if (-0.4 / v29 < v12)
        goto LABEL_58;
      goto LABEL_43;
    }
    if (a4 < 1.1)
    {
      if (a4 * 0.75 < a3)
      {
LABEL_58:
        v40 = sub_20F210E14(v12, a4);
        if (a2)
          *a2 = v40;
        if (v40 == 0.0)
          goto LABEL_105;
        v41 = 0.0;
        if (a1)
          v41 = -1.0 / v40 * v12;
        sub_20F212DA8(v12, a4, v41);
LABEL_158:
        if (!a2)
          return;
        goto LABEL_106;
      }
LABEL_43:
      if (v12 >= 0.0)
      {
        v30 = v12 + 1.0;
        v13 = 2.0;
        if (v12 >= 2.0)
          goto LABEL_72;
        v43 = sub_20F210A00(v30, v12, v12 + -1.0, a6.f64[0], a7, a8, a9);
        v45 = fabs(v43);
        if (v45 <= 0.5)
        {
LABEL_98:
          if (v45 < 2.22044605e-16)
            goto LABEL_120;
          v46 = v43 * 1.02812767;
          v63 = v43 * v43;
          v64 = v43;
          v65 = vmulq_n_f64((float64x2_t)xmmword_2103A5D30, v43 * v43);
          v44.f64[0] = 0.011638458;
          v66 = (float64x2_t)vdupq_n_s64(0xBF84A985C6B987CALL);
          *(_QWORD *)&v67.f64[0] = *(_OWORD *)&vaddq_f64(v65, v44);
          v67.f64[1] = vsubq_f64(v66, v65).f64[1];
          v68 = vmulq_n_f64((float64x2_t)xmmword_2103A5D40, v63);
          v66.f64[0] = -0.0631002907;
          *(_QWORD *)&v66.f64[0] = *(_OWORD *)&vsubq_f64(v66, v68);
          v66.f64[1] = vaddq_f64(v68, (float64x2_t)vdupq_n_s64(0x3FB741F89C093266uLL)).f64[1];
          v69 = vaddq_f64(vaddq_f64(vmulq_n_f64(v66, v63), (float64x2_t)xmmword_2103A5D60), vmulq_n_f64(vaddq_f64(vmulq_n_f64(v67, v63), (float64x2_t)xmmword_2103A5D50), v64));
          v47 = v64 * v69.f64[0] / v69.f64[1];
LABEL_100:
          v43 = v46 + v47;
LABEL_120:
          if (fabs(v43) > 1.79769313e308)
            goto LABEL_168;
LABEL_121:
          v96 = v43;
          if (fabs(v43) > 1.79769313e308)
            sub_20F20FCB0("boost::math::tgamma1pm1<%!%>(%1%)", "numeric overflow");
          v72 = a4;
          if (a4 <= 0.0)
          {
            v73 = COERCE__INT64(fabs(v12 * 0.5)) < 0x7FF0000000000000;
            v74 = floor(v12 * 0.5);
            v75 = ceil(v12 * 0.5);
            if (v12 * 0.5 < 0.0)
              v74 = v75;
            if ((*(_QWORD *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
              sub_20F20FE60("boost::math::trunc<%1%>(%1%)");
            v76 = ceil(v12);
            v77 = floor(v12);
            if (v12 >= 0.0)
              v76 = v77;
            if (v76 != v12)
              sub_20F20F830("boost::math::powm1<%1%>(%1%, %1%)", "For non-integral exponent, expected base > 0 but got %1%");
            if (!v73)
              sub_20F20FE60("boost::math::trunc<%1%>(%1%)");
            v72 = a4;
            if (v74 != v12 * 0.5)
              goto LABEL_144;
            v78 = a4;
            do
            {
              v72 = -v78;
              v15 = v78 < 0.0;
              v78 = -v78;
            }
            while (!v15);
          }
          v79 = fabs((v72 + -1.0) * v12);
          if (fabs(v12) >= 0.2 && v79 >= 0.5)
          {
LABEL_144:
            v81 = pow(v72, v12) + -1.0;
LABEL_150:
            v89 = v81 + 1.0;
            v90 = (v96 - v81) / v12;
            if (a2)
              *a2 = v89 / (exp(a4) * ((v96 + 1.0) / v12));
            v91 = 0.0;
            if (!a1)
              v91 = (v96 + 1.0) / v12;
            v92 = (v91 - v90) / v89;
            v93 = 999990;
            v94 = 2;
            v95 = -a4;
            do
            {
              v12 = v12 + 1.0;
              v92 = v95 / v12 + v92;
              if (fabs(v92 * 2.22044605e-16) >= fabs(v95 / v12))
                break;
              v95 = v95 * -a4 / (double)v94++;
              --v93;
            }
            while (v93);
            if ((unint64_t)(999990 - v93) >= 0xF4240)
              sub_20F21122C("boost::math::tgamma_small_upper_part<%1%>(%1%, %1%)");
            goto LABEL_158;
          }
          v81 = log(v72) * v12;
          if (v81 >= 0.5)
          {
            if (v81 > 709.0)
              sub_20F20FCB0("boost::math::powm1<%1%>(%1%, %1%)", "Overflow Error");
            goto LABEL_144;
          }
          v83 = fabs(v81);
          if (v83 <= 0.5)
          {
            if (v83 >= 2.22044605e-16)
            {
              v84 = vmulq_n_f64((float64x2_t)xmmword_2103A5D30, v81 * v81);
              v82.f64[0] = 0.011638458;
              v85 = (float64x2_t)vdupq_n_s64(0xBF84A985C6B987CALL);
              *(_QWORD *)&v86.f64[0] = *(_OWORD *)&vaddq_f64(v84, v82);
              v86.f64[1] = vsubq_f64(v85, v84).f64[1];
              v87 = vmulq_n_f64((float64x2_t)xmmword_2103A5D40, v81 * v81);
              v85.f64[0] = -0.0631002907;
              *(_QWORD *)&v85.f64[0] = *(_OWORD *)&vsubq_f64(v85, v87);
              v85.f64[1] = vaddq_f64(v87, (float64x2_t)vdupq_n_s64(0x3FB741F89C093266uLL)).f64[1];
              v88 = vaddq_f64(vaddq_f64(vmulq_n_f64(v85, v81 * v81), (float64x2_t)xmmword_2103A5D60), vmulq_n_f64(vaddq_f64(vmulq_n_f64(v86, v81 * v81), (float64x2_t)xmmword_2103A5D50), v81));
              v81 = v81 * 1.02812767 + v81 * v88.f64[0] / v88.f64[1];
            }
          }
          else
          {
            if (v83 < 709.0)
            {
              v81 = exp(v81) + -1.0;
              goto LABEL_149;
            }
            v71 = v81 <= 0.0;
            v81 = -1.0;
            if (!v71)
LABEL_176:
              sub_20F20FCB0("boost::math::expm1<%1%>(%1%)", "Overflow Error");
          }
LABEL_149:
          if (fabs(v81) <= 1.79769313e308)
            goto LABEL_150;
LABEL_168:
          sub_20F20FCB0("boost::math::expm1<%1%>(%1%)", "numeric overflow");
        }
      }
      else
      {
        if (v12 < -0.5)
        {
          v30 = v12 + 1.0;
LABEL_72:
          v48 = sub_20F20F4F0(v30, v13, v14, a6.f64[0], a7.f64[0], a8.f64[0]);
          if (fabs(v48) > 1.79769313e308)
            sub_20F20FCB0("boost::math::tgamma<%1%>(%1%)", "numeric overflow");
          v43 = v48 + -1.0;
          goto LABEL_121;
        }
        if (v12 < -1.0)
          sub_20F20F830("log1p<%1%>(%1%)", "log1p(x) requires x > -1, but got x = %1%.");
        if (v12 == -1.0)
          sub_20F20FCB0("log1p<%1%>(%1%)", "Overflow Error");
        v57 = log1p(v12);
        v62 = sub_20F210A00(v12 + 2.0, v12 + 1.0, v12, v58, v59, v60, v61);
        v43 = v62 - v57;
        v45 = vabdd_f64(v62, v57);
        if (v45 <= 0.5)
          goto LABEL_98;
      }
      if (v45 >= 709.0)
      {
        v71 = v43 <= 0.0;
        v43 = -1.0;
        if (!v71)
          goto LABEL_176;
        goto LABEL_120;
      }
      v46 = exp(v43);
      v47 = -1.0;
      goto LABEL_100;
    }
    if (a3 > 20.0)
    {
      v39 = (a4 - a3) / a3;
      if (v12 > 200.0)
      {
        if (20.0 / v12 <= v39 * v39)
          goto LABEL_57;
LABEL_113:
        sub_20F212E2C(v12, a4, v14, a6);
        if (a4 >= v12)
          LOBYTE(a1) = a1 ^ 1;
        if (a2)
        {
          v24 = sub_20F210E14(v12, a4);
          *a2 = v24;
          if ((a1 & 1) == 0)
            goto LABEL_107;
        }
        goto LABEL_105;
      }
      if (fabs(v39) < 0.4)
        goto LABEL_113;
    }
LABEL_57:
    if (a4 + -1.0 / (a4 * 3.0) >= v12)
    {
      v70 = sub_20F210E14(v12, a4);
      if (a2)
        *a2 = v70;
      if (v70 != 0.0)
        sub_20F212CF0(v12, a4);
      goto LABEL_105;
    }
    goto LABEL_58;
  }
  v17 = floor(a3);
  if (v17 != a3)
  {
    v13 = vabdd_f64(v17, a3);
    v14 = 0.5;
    if (a4 <= 0.2 || v13 != 0.5)
      goto LABEL_21;
    v31 = sqrt(a4);
    v32 = sub_20F21343C(1, v31, v13, 0.5, a6);
    if (fabs(v32) > 1.79769313e308)
      sub_20F20FCB0("boost::math::erfc<%1%>(%1%, %1%)", "numeric overflow");
    if (v12 <= 1.0 || v32 == 0.0)
    {
      if (a2)
      {
        v42 = v31 * exp(-a4) / 1.77245385;
        *a2 = v42;
        if (v42 != 0.0)
          goto LABEL_105;
LABEL_66:
        v24 = sub_20F210E14(v12, a4);
        *a2 = v24;
        if ((a1 & 1) != 0)
          goto LABEL_107;
        goto LABEL_105;
      }
    }
    else
    {
      v33 = exp(-a4);
      v34 = sqrt(a4 * 3.14159265);
      v35 = v33 / v34 * a4 + v33 / v34 * a4;
      v36 = 2.0;
      if (v12 > 2.0)
      {
        v37 = 3;
        v38 = v35;
        do
        {
          v38 = v38 / (v36 + -0.5) * a4;
          v35 = v35 + v38;
          v36 = (double)v37++;
        }
        while (v36 < v12);
      }
      if (a2)
      {
        *a2 = 0.0;
        goto LABEL_66;
      }
    }
    if ((a1 & 1) != 0)
      return;
    goto LABEL_105;
  }
  v13 = 0.6;
  if (a4 <= 0.6)
    goto LABEL_21;
  v18 = exp(-a4);
  v19 = 1.0;
  if (v12 <= 1.0)
  {
    if (a2)
      goto LABEL_75;
  }
  else
  {
    if (v18 != 0.0)
    {
      v20 = 2;
      v21 = v18;
      v22 = v18;
      do
      {
        v21 = v21 / v19 * a4;
        v22 = v22 + v21;
        v19 = (double)v20++;
      }
      while (v19 < v12);
    }
    if (a2)
    {
LABEL_75:
      v49 = pow(a4, v12);
      v50 = v12 + -1.0;
      v51 = fabs(v12 + -1.0);
      if ((unint64_t)(*(_QWORD *)&v51 - 0x10000000000000) >> 53 >= 0x3FF
        && (unint64_t)(*(_QWORD *)&v51 - 1) >= 0xFFFFFFFFFFFFFLL
        && COERCE__INT64(v12 + -1.0) != 0)
      {
        sub_20F20FE60("boost::math::trunc<%1%>(%1%)");
      }
      v54 = floor(v50);
      v55 = ceil(v50);
      if (v50 < 0.0)
        v54 = v55;
      if (v54 > 2147483650.0 || v54 < -2147483650.0)
        sub_20F20FE60("boost::math::itrunc<%1%>(%1%)");
      v24 = v18 * v49 / dbl_2103A5FD0[(int)v54];
      *a2 = v24;
      if ((a1 & 1) != 0)
        goto LABEL_107;
    }
  }
LABEL_105:
  if (!a2)
    return;
LABEL_106:
  v24 = *a2;
LABEL_107:
  if (a4 < 1.0 && a4 * 1.79769313e308 < v24)
  {
    *a2 = 8.98846567e307;
    v24 = 8.98846567e307;
  }
  *a2 = v24 / a4;
}

double sub_20F212CF0(double a1, double a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  BOOL v11;

  v2 = a2 - a1 + 1.0;
  v3 = v2 + 2.0;
  v4 = 3.56011817e-307;
  if (v2 + 2.0 != 0.0)
    v4 = v2 + 2.0;
  v5 = 0.0;
  v6 = 2;
  v7 = v4;
  do
  {
    v3 = v3 + 2.0;
    v8 = (a1 - (double)(int)v6) * (double)(int)v6;
    v9 = v3 + v5 * v8;
    v10 = 1.0 / v9;
    v7 = v3 + v8 / v7;
    if (v7 == 0.0)
      v7 = 3.56011817e-307;
    v11 = v9 == 0.0;
    v5 = 2.80889552e306;
    if (!v11)
      v5 = v10;
    v4 = v4 * (v7 * v5);
    v11 = fabs(v7 * v5 + -1.0) <= 2.22044605e-16 || v6++ == 0;
  }
  while (!v11);
  return 1.0 / (v2 + (a1 + -1.0) / v4);
}

double sub_20F212DA8(double a1, double a2, double a3)
{
  double v3;
  uint64_t v4;

  v3 = 1.0;
  v4 = 1000000;
  do
  {
    a3 = v3 + a3;
    if (fabs(a3 * 2.22044605e-16) >= fabs(v3))
      break;
    a1 = a1 + 1.0;
    v3 = v3 * (a2 / a1);
    --v4;
  }
  while (v4);
  if ((unint64_t)(1000000 - v4) >= 0xF4240)
    sub_20F21122C("boost::math::detail::lower_gamma_series<%1%>(%1%)");
  return a3;
}

double sub_20F212E2C(double a1, double a2, double a3, float64x2_t a4)
{
  double v5;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  int v12;
  unint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  int64x2_t v19;
  float64x2_t v20;
  double v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  const double *v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  const double *v30;
  float64x2_t v31;
  float64x2_t v32;
  const double *v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  const double *v42;
  const double *v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  double v47;
  double v48;

  v5 = (a2 - a1) / a1;
  if (v5 < -1.0)
    sub_20F20F830("boost::math::log1pmx<%1%>(%1%)", "log1pmx(x) requires x > -1, but got x = %1%.");
  if (v5 == -1.0)
    sub_20F20FCB0("boost::math::log1pmx<%1%>(%1%)", "Overflow Error");
  v7 = fabs(v5);
  if (v7 <= 0.949999988)
  {
    v11 = -v5;
    v9 = 2.22044605e-16;
    if (v7 >= 2.22044605e-16)
    {
      v10 = 0.0;
      v12 = 2;
      v13 = 1000000;
      do
      {
        v5 = v5 * v11;
        v14 = v5 / (double)v12;
        v10 = v10 + v14;
        v9 = fabs(v10 * 2.22044605e-16);
        v8 = fabs(v14);
        if (v9 >= v8)
          break;
        ++v12;
        --v13;
      }
      while (v13);
      if (v13 > 0xF4240)
        sub_20F21122C("boost::math::log1pmx<%1%>(%1%)");
    }
    else
    {
      v8 = 0.5;
      v10 = v5 * v11 * 0.5;
    }
  }
  else
  {
    v10 = log(v5 + 1.0) - v5;
  }
  v15 = -(v10 * a1);
  v16 = sub_20F21343C(1, sqrt(v15), v8, v9, a4);
  if (fabs(v16) > 1.79769313e308)
    sub_20F20FCB0("boost::math::erfc<%1%>(%1%, %1%)", "numeric overflow");
  v17 = sqrt(v10 * -2.0);
  v18 = exp(-v15);
  if (a2 >= a1)
    v21 = v17;
  else
    v21 = -v17;
  *(double *)v19.i64 = v21 * v21;
  v22 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(v21 * v21), 0);
  v23 = vmulq_n_f64((float64x2_t)xmmword_2103A5D70, v21 * v21);
  v24.f64[0] = v21 * v21 * -0.000000057525456 + 0.0000000046471278;
  v25 = (const double *)&unk_2103A5BC8;
  *(_QWORD *)&v26.f64[0] = *(_OWORD *)&vld1q_dup_f64(v25);
  v26.f64[1] = v21 * v21 * 9.14769958e-10 + 0.0000000102618098;
  v27.f64[0] = 1.0 / a1;
  v27.f64[1] = v21;
  v28.f64[0] = 1.0 / a1;
  v28.f64[1] = v21 * v21 * (v21 * v21 * -0.0000396836505 + -0.00000146384526) + 0.000784039222;
  v29 = vmulq_f64(v27, v28);
  v28.f64[0] = v22.f64[0];
  v28.f64[1] = v21;
  v30 = (const double *)&unk_2103A5BF0;
  v31 = vld1q_dup_f64(v30);
  v31.f64[0] = v21 * v21 * -0.00000229148118 + -0.0000135940482;
  v32 = vmulq_f64(v28, v31);
  v31.f64[0] = 0.0000679778048;
  *(_QWORD *)&v31.f64[0] = *(_OWORD *)&vaddq_f64(v32, v31);
  v31.f64[1] = vsubq_f64((float64x2_t)vdupq_n_s64(0x3F4B8239C670E690uLL), v32).f64[1];
  v33 = (const double *)&unk_2103A5C00;
  v34 = vmulq_f64((float64x2_t)vzip1q_s64(v19, (int64x2_t)v29), vaddq_f64(vmulq_f64(v28, v31), (float64x2_t)xmmword_2103A5D90));
  *(_QWORD *)&v28.f64[0] = *(_OWORD *)&vld1q_dup_f64(v33);
  v28.f64[1] = v21 * (v21 * v21 * (v21 * v21 * 0.0000561168275 + 0.000000790235323) + -0.000592166437)
             + v21 * v21 * (v21 * v21 * (v21 * v21 * -0.0000183291166 + -0.0000815396937) + 0.00027087821)
             + 0.000531307936;
  v35 = vaddq_f64(v34, v28);
  v36 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v29.f64[0], 0);
  v36.f64[0] = v21
             * (v21 * v21 * (v21 * v21 * (v21 * v21 * 0.00000801847026 + 0.000000141906292) + -0.000199325705)
              + -0.0000697281376);
  *(_QWORD *)&v37.f64[0] = *(_OWORD *)&vaddq_f64(v36, v35);
  v38 = vmulq_n_f64(v35, v29.f64[0]);
  v37.f64[1] = v38.f64[1];
  v38.f64[0] = -0.000334931611;
  *(_QWORD *)&v38.f64[0] = *(_OWORD *)&vsubq_f64(v38, v23);
  v38.f64[1] = vaddq_f64(v23, (float64x2_t)vdupq_n_s64(0x3F116908B48CE058uLL)).f64[1];
  v39 = vaddq_f64(vmulq_n_f64(v38, v21 * v21), (float64x2_t)xmmword_2103A5DA0);
  v22.f64[0] = v21 * (v21 * v21 * 0.000281269515 + 0.0000517179091);
  v40 = (float64x2_t)vdupq_n_s64(0xBF4C3E0B02DA7BF9);
  v41 = vaddq_f64(vmulq_n_f64(v39, v21 * v21), v40);
  v40.f64[0] = 0.00059676129 * v29.f64[0];
  *(_QWORD *)&v22.f64[0] = *(_OWORD *)&vmulq_f64(v29, vsubq_f64(vaddq_f64(v22, v39), v40));
  v22.f64[1] = vaddq_f64(v29, v41).f64[1];
  v42 = (const double *)&unk_2103A5C10;
  *(_QWORD *)&v41.f64[0] = *(_OWORD *)&vld1q_dup_f64(v42);
  v41.f64[1] = v21 * v21 * 0.000000142806142 + 0.00000137219573;
  v43 = (const double *)&unk_2103A5C18;
  *(_QWORD *)&v39.f64[0] = *(_OWORD *)&vld1q_dup_f64(v43);
  v39.f64[1] = v21 * v21 * -0.000000629899214 + 0.0000000342357873;
  v44 = vmulq_n_f64(v39, v21 * v21);
  v20.f64[0] = -0.000000239650511;
  *(_QWORD *)&v45.f64[0] = *(_OWORD *)&vsubq_f64(v20, v44);
  v45.f64[1] = vaddq_f64(v44, (float64x2_t)vdupq_n_s64(0x3F0BBF43DAF4FE53uLL)).f64[1];
  v24.f64[1] = v21 * v21 * (v21 * v21 * -0.00000000438203602 + 0.00000000670785354) + 0.000000829671134;
  v46 = vaddq_f64(vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(v45, v21 * v21), (float64x2_t)xmmword_2103A5DF0), v21 * v21), (float64x2_t)xmmword_2103A5E00), v21), vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(v41, v21 * v21), (float64x2_t)xmmword_2103A5DB0), v21 * v21), (float64x2_t)xmmword_2103A5DC0), v21 * v21), (float64x2_t)xmmword_2103A5DD0), v21 * v21), (float64x2_t)xmmword_2103A5DE0)),
              vmulq_n_f64(vaddq_f64(v22, v37), v29.f64[0])),
            v29.f64[0]),
          vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(v24, v21 * v21), (float64x2_t)xmmword_2103A5E60), v21 * v21), (float64x2_t)xmmword_2103A5E70), v21 * v21), (float64x2_t)xmmword_2103A5E80), v21 * v21), (float64x2_t)xmmword_2103A5E90), v21), vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(
                        vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(v26, v21 * v21), (float64x2_t)xmmword_2103A5D80), v21 * v21), (float64x2_t)xmmword_2103A5E10), v21 * v21), (float64x2_t)xmmword_2103A5E20), v21 * v21), (float64x2_t)xmmword_2103A5E30), v21 * v21), (float64x2_t)xmmword_2103A5E40), v21 * v21), (float64x2_t)xmmword_2103A5E50)));
  v47 = v18 / sqrt(a1 * 6.28318531) * (1.0 / a1 * v46.f64[0] + v46.f64[1]);
  v48 = -v47;
  if (a2 >= a1)
    v48 = v47;
  return v16 * 0.5 + v48;
}

double sub_20F21343C(int a1, long double a2, double a3, double a4, float64x2_t a5)
{
  int v6;
  double v7;
  double v9;
  long double v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  long double v16;
  const double *v17;
  float64x2_t v18;
  float64x2_t v19;
  long double v20;
  float64x2_t v21;
  double v22;
  long double v23;
  int v24;
  double v25;
  long double v26;
  long double v27;
  double v28;
  double v29;
  long double v30;
  int v31;
  double v32;
  long double v33;
  long double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  uint64_t v39;
  double v40;
  double v41;
  int __e;
  int v44;

  v6 = a1;
  if (a2 < 0.0)
  {
    if ((a1 & 1) == 0)
      return -sub_20F21343C(0, -a2);
    v7 = -a2;
    if (a2 >= -0.5)
      return sub_20F21343C(0, v7) + 1.0;
    else
      return 2.0 - sub_20F21343C(1, v7);
  }
  if (a2 < 0.5)
  {
    if (a2 >= 1.0e-10)
    {
      v10 = a2 * a2;
      v11 = vmulq_n_f64((float64x2_t)xmmword_2103A5F50, v10 * v10);
      a5.f64[0] = -0.0509990735;
      v12 = (float64x2_t)vdupq_n_s64(0x3FB667DBDC6EE008uLL);
      *(_QWORD *)&v13.f64[0] = *(_OWORD *)&vsubq_f64(a5, v11);
      v13.f64[1] = vaddq_f64(v11, v12).f64[1];
      v14 = vmulq_n_f64((float64x2_t)xmmword_2103A5F60, v10 * v10);
      v12.f64[0] = -0.338165134;
      *(_QWORD *)&v12.f64[0] = *(_OWORD *)&vsubq_f64(v12, v14);
      v12.f64[1] = vaddq_f64(v14, (float64x2_t)vdupq_n_s64(0x3FDD1EC93C6014B3uLL)).f64[1];
      v15 = vaddq_f64(vmulq_n_f64(v12, a2 * a2), vaddq_f64(vmulq_n_f64(v13, v10 * v10), (float64x2_t)xmmword_2103A5F70));
      v9 = (vdivq_f64(v15, (float64x2_t)vdupq_laneq_s64((int64x2_t)v15, 1)).f64[0] + 1.04494858) * a2;
    }
    else
    {
      v9 = 0.0;
      if (a2 != 0.0)
        v9 = a2 * 1.125 + a2 * 0.0033791671;
    }
    goto LABEL_25;
  }
  if (!a1)
  {
    v6 = 1;
    if (a2 >= 5.92999983)
      goto LABEL_12;
LABEL_16:
    if (a2 >= 1.5)
    {
      if (a2 >= 2.5)
      {
        v30 = frexp(a2, &v44);
        v31 = v44;
        v32 = ldexp(v30, 26);
        v33 = ldexp(floor(v32), v31 - 26);
        v34 = (a2 - v33) * (a2 - v33) + v33 * v33 - a2 * a2 + (v33 + v33) * (a2 - v33);
        v35 = exp(-(a2 * a2));
        v22 = v35 * exp(-v34) / a2;
        if (a2 >= 4.5)
        {
          v40 = 1.0 / a2;
          v41 = sub_20F210DB0(xmmword_2103A6768, v40);
          v38 = v41 / sub_20F210DB0(xmmword_2103A67A0, v40);
          v39 = 0xDA6400000000;
        }
        else
        {
          v36 = a2 + -3.5;
          v37 = sub_20F210DEC(xmmword_2103A6708, v36);
          v38 = v37 / sub_20F210DEC(xmmword_2103A6738, v36);
          v39 = 0x4C6400000000;
        }
        v29 = v38 + COERCE_DOUBLE(v39 & 0xFFFFFFFFFFFFLL | 0x3FE1000000000000);
      }
      else
      {
        v20 = a2 + -1.5;
        v21 = vaddq_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_2103A5EC0, v20 * v20), (float64x2_t)xmmword_2103A5ED0), v20 * v20), (float64x2_t)xmmword_2103A5EF0), vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_2103A5EA0, v20 * v20), (float64x2_t)xmmword_2103A5EB0), v20 * v20), (float64x2_t)xmmword_2103A5EE0), a2 + -1.5));
        v22 = vdivq_f64(v21, (float64x2_t)vdupq_laneq_s64((int64x2_t)v21, 1)).f64[0] + 0.506728172;
        v23 = frexp(a2, &__e);
        v24 = __e;
        v25 = ldexp(v23, 26);
        v26 = ldexp(floor(v25), v24 - 26);
        v27 = (a2 - v26) * (a2 - v26) + v26 * v26 - a2 * a2 + (v26 + v26) * (a2 - v26);
        v28 = exp(-(a2 * a2));
        v29 = v28 * exp(-v27) / a2;
      }
      v9 = v22 * v29;
    }
    else
    {
      v16 = a2 + -0.5;
      v17 = (const double *)&unk_2103A5C40;
      *(_QWORD *)&v18.f64[0] = *(_OWORD *)&vld1q_dup_f64(v17);
      v18.f64[1] = v16 * v16 * 0.00000337511472 + 0.123850975;
      v19 = vaddq_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(v18, v16 * v16), (float64x2_t)xmmword_2103A5F20), v16 * v16), (float64x2_t)xmmword_2103A5F40), vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_2103A5F00, v16 * v16), (float64x2_t)xmmword_2103A5F10), v16 * v16), (float64x2_t)xmmword_2103A5F30), a2 + -0.5));
      v9 = exp(-(a2 * a2)) / a2 * (vdivq_f64(v19, (float64x2_t)vdupq_laneq_s64((int64x2_t)v19, 1)).f64[0] + 0.405935764);
    }
    goto LABEL_25;
  }
  v6 = a1 ^ 1;
  if (a2 < 28.0)
    goto LABEL_16;
LABEL_12:
  v9 = 0.0;
LABEL_25:
  if (v6)
    return 1.0 - v9;
  else
    return v9;
}

void sub_20F21389C(double *a1, double *a2)
{
  long double v3;
  long double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  long double v11;
  int v12;
  long double v13;
  long double v14;
  long double v15;
  double v16;
  double v17;
  double v18;
  int v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  int v25;
  double v26;
  int v27;
  int __e;
  double v29;
  double v30;

  v3 = *a1;
  if ((*(_QWORD *)a1 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    sub_20F20D054("float_distance<%1%>(%1%, %1%)", "Argument a must be finite, but got %1%");
  v5 = *a2;
  if ((*(_QWORD *)a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    sub_20F20D054("float_distance<%1%>(%1%, %1%)", "Argument b must be finite, but got %1%");
  if (v3 > v5)
  {
    v29 = *a1;
    v30 = v5;
    sub_20F21389C(&v30, &v29);
    return;
  }
  if (v3 != v5)
  {
    if (v3 == 0.0)
    {
      *(_QWORD *)&v6 = 1;
      if (v5 < 0.0)
        v6 = COERCE_DOUBLE(0x8000000000000001);
      v29 = *a2;
      v30 = v6;
LABEL_14:
      sub_20F21389C(&v30, &v29);
      return;
    }
    if (v5 == 0.0)
    {
      *(_QWORD *)&v7 = 1;
      if (v3 < 0.0)
        v7 = COERCE_DOUBLE(0x8000000000000001);
      v29 = *a1;
      v30 = v7;
      goto LABEL_14;
    }
    if (((*(_QWORD *)&v5 ^ *(_QWORD *)&v3) & 0x8000000000000000) == 0)
    {
      if (v3 < 0.0)
      {
        v29 = -v3;
        v30 = -v5;
        sub_20F21389C(&v30, &v29);
        return;
      }
      __e = 0;
      v10 = fabs(v3);
      v11 = v3;
      if (v10 != INFINITY)
      {
        v11 = 2.22507386e-308;
        if (v10 >= 2.22507386e-308)
          v11 = v3;
      }
      frexp(v11, &__e);
      v12 = __e;
      v13 = ldexp(1.0, __e);
      if (v5 > v13)
      {
        v27 = 0;
        frexp(v5, &v27);
        v14 = ldexp(0.5, v27);
        v29 = v5;
        v30 = v14;
        sub_20F21389C(&v30, &v29);
        ldexp(1.0, 52);
        v3 = *a1;
      }
      if (v3 < 0.0 || v3 > 0.0)
      {
        v15 = *a2;
        if ((*(_QWORD *)&v3 & 0x7FF0000000000000) == 0)
          goto LABEL_36;
      }
      else
      {
        v15 = *a2;
      }
      if (v15 - v3 >= 2.22507386e-308)
      {
        if (v15 >= v13)
          v23 = v13;
        else
          v23 = v15;
        v24 = -v23;
        v21 = v3 - v23;
        v22 = v24 - (v21 - v3) + v3 - (v21 - (v21 - v3));
        v19 = 53;
LABEL_43:
        v25 = v19 - v12;
        if (v21 >= 0.0)
        {
          v26 = v22;
        }
        else
        {
          v21 = -v21;
          v26 = -v22;
        }
        ldexp(v21, v19 - v12);
        ldexp(v26, v25);
        return;
      }
LABEL_36:
      v16 = ldexp(v3, 53);
      v17 = ldexp(v15, 53);
      v18 = ldexp(v13, 53);
      v19 = 0;
      if (v17 < v18)
        v18 = v17;
      v20 = -v18;
      v21 = v16 - v18;
      v22 = v20 - (v21 - v16) + v16 - (v21 - (v21 - v16));
      goto LABEL_43;
    }
    if (v5 >= 0.0)
      v8 = COERCE_DOUBLE(1);
    else
      v8 = COERCE_DOUBLE(0x8000000000000001);
    v29 = *a2;
    v30 = v8;
    sub_20F21389C(&v30, &v29);
    if (*a1 >= 0.0)
      v9 = COERCE_DOUBLE(1);
    else
      v9 = COERCE_DOUBLE(0x8000000000000001);
    v29 = *a1;
    v30 = v9;
    sub_20F21389C(&v30, &v29);
  }
}

void sub_20F213C04(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  char *p_p;
  uint64_t v6;
  uint64_t v7;
  std::string *v8;
  std::string *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  double *v16;
  uint64_t v17;
  char *v18;
  void *v19[2];
  char v20;
  uint64_t v21;
  std::string v22;
  int v23;
  std::string v24;
  void **v25;
  void *__p;
  __int128 v27;
  std::string *v28;
  std::string *v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  __p = operator new(0x20uLL);
  v27 = xmmword_2102DB480;
  strcpy((char *)__p, "GravSenseConfig parameters");
  sub_20E8B30B4(a2, (__int128 *)&__p, 180, 160);
  if (SHIBYTE(v27) < 0)
    operator delete(__p);
  v22.__r_.__value_.__r.__words[0] = nullsub_1(a2);
  v4 = sub_20EAA14D8((_BYTE *)a1);
  sub_20EAA18B0("Enable GravSense to run alongside SLAM.", (const char **)" (default = ", (_BYTE *)a1, (const char **)")");
  if (v27 >= 0)
    p_p = (char *)&__p;
  else
    p_p = (char *)__p;
  sub_20E8B2F9C((uint64_t *)&v22, "GravSenseConfig.enable", v4, p_p);
  if (SHIBYTE(v27) < 0)
    operator delete(__p);
  v24.__r_.__value_.__r.__words[0] = nullsub_1(a2);
  v6 = sub_20EB8894C(a1 + 8);
  __p = "GravSense model weight resource file name.";
  *(_QWORD *)&v27 = 42;
  *((_QWORD *)&v27 + 1) = " (default = ";
  v28 = (std::string *)12;
  v7 = *(unsigned __int8 *)(a1 + 31);
  if ((v7 & 0x80u) == 0)
    v8 = (std::string *)(a1 + 8);
  else
    v8 = *(std::string **)(a1 + 8);
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a1 + 16);
  v29 = v8;
  v30 = v7;
  v31 = ")";
  v32 = 1;
  sub_20E8778D4((uint64_t)&__p, (uint64_t)&v33, 0, 0, &v22);
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = &v22;
  else
    v9 = (std::string *)v22.__r_.__value_.__r.__words[0];
  sub_20E8B2F9C((uint64_t *)&v24, "GravSenseConfig.model_file", v6, (char *)v9);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  v21 = nullsub_1(a2);
  v10 = sub_20EAA1CB0((unint64_t *)(a1 + 32));
  v23 = 0;
  sub_20E9B0FF4(&v22, "GravSense model input size dimension.");
  __p = &v22;
  *(_QWORD *)&v27 = " (default = ";
  *((_QWORD *)&v27 + 1) = &v22;
  v28 = (std::string *)" (default = ";
  v29 = (std::string *)" (default = ";
  if (v23 == -1)
    sub_20E877AB8();
  v24.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  ((void (*)(std::string *, std::string *))off_24C9FB110[v23])(&v24, &v22);
  std::to_string(&v24, *(_QWORD *)(a1 + 32));
  __p = &v22;
  *(_QWORD *)&v27 = &v24;
  *((_QWORD *)&v27 + 1) = &v22;
  v28 = &v24;
  v29 = &v24;
  if (v23 == -1)
    sub_20E877AB8();
  v25 = &__p;
  ((void (*)(void ***, std::string *))off_24C9FB140[v23])(&v25, &v22);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  __p = &v22;
  *(_QWORD *)&v27 = ")";
  *((_QWORD *)&v27 + 1) = &v22;
  v28 = (std::string *)")";
  v29 = (std::string *)")";
  if (v23 == -1)
    sub_20E877AB8();
  v24.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  ((void (*)(std::string *, std::string *))off_24C9FB128[v23])(&v24, &v22);
  if (v23 == -1)
    sub_20E877AB8();
  __p = &v24;
  ((void (*)(void **__return_ptr, void **, std::string *))off_24C9FB0F8[v23])(v19, &__p, &v22);
  if (v23 != -1)
    ((void (*)(void **, std::string *))off_24C9FB0E0[v23])(&__p, &v22);
  if (v20 >= 0)
    v11 = (char *)v19;
  else
    v11 = (char *)v19[0];
  sub_20E8B2F9C(&v21, "GravSenseConfig.input_size", v10, v11);
  if (v20 < 0)
    operator delete(v19[0]);
  v22.__r_.__value_.__r.__words[0] = nullsub_1(a2);
  v12 = sub_20EAA1CB0((unint64_t *)(a1 + 40));
  sub_20F21422C((uint64_t)&__p, "GravSense model output size dimension.", (unint64_t *)(a1 + 40));
  if (v27 >= 0)
    v13 = (char *)&__p;
  else
    v13 = (char *)__p;
  sub_20E8B2F9C((uint64_t *)&v22, "GravSenseConfig.output_size", v12, v13);
  if (SHIBYTE(v27) < 0)
    operator delete(__p);
  v22.__r_.__value_.__r.__words[0] = nullsub_1(a2);
  v14 = sub_20EAA1CB0((unint64_t *)(a1 + 48));
  sub_20F21422C((uint64_t)&__p, "GravSense model hidden size dimension.", (unint64_t *)(a1 + 48));
  if (v27 >= 0)
    v15 = (char *)&__p;
  else
    v15 = (char *)__p;
  sub_20E8B2F9C((uint64_t *)&v22, "GravSenseConfig.hidden_size", v14, v15);
  if (SHIBYTE(v27) < 0)
    operator delete(__p);
  v22.__r_.__value_.__r.__words[0] = nullsub_1(a2);
  v16 = (double *)(a1 + 72);
  v17 = sub_20EA9DB90((double *)(a1 + 72));
  sub_20EAA1E0C("Interval (in seconds) of the input IMU measurements expected by the model.", (uint64_t)" (default = ", v16, (uint64_t)")");
  if (v27 >= 0)
    v18 = (char *)&__p;
  else
    v18 = (char *)__p;
  sub_20E8B2F9C((uint64_t *)&v22, "GravSenseConfig.input_imu_interval", v17, v18);
  if (SHIBYTE(v27) < 0)
    operator delete(__p);
}

void sub_20F2140E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F21422C(uint64_t a1, char *a2, unint64_t *a3)
{
  uint64_t result;
  _DWORD v5[6];
  int v6;
  std::string v7;
  std::string **v8;
  std::string *v9;
  std::string *v10;
  _DWORD *v11;
  std::string *v12;
  std::string *v13;

  v6 = 0;
  sub_20E995D04(v5, a2);
  v9 = (std::string *)v5;
  v10 = (std::string *)" (default = ";
  v11 = v5;
  v12 = (std::string *)" (default = ";
  v13 = (std::string *)" (default = ";
  if (v6 == -1)
    sub_20E877AB8();
  v7.__r_.__value_.__r.__words[0] = (std::string::size_type)&v9;
  ((void (*)(std::string *, _DWORD *))off_24C9FB110[v6])(&v7, v5);
  std::to_string(&v7, *a3);
  v9 = (std::string *)v5;
  v10 = &v7;
  v11 = v5;
  v12 = &v7;
  v13 = &v7;
  if (v6 == -1)
    sub_20E877AB8();
  v8 = &v9;
  ((void (*)(std::string ***, _DWORD *))off_24C9FB140[v6])(&v8, v5);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  v9 = (std::string *)v5;
  v10 = (std::string *)")";
  v11 = v5;
  v12 = (std::string *)")";
  v13 = (std::string *)")";
  if (v6 == -1)
    sub_20E877AB8();
  v7.__r_.__value_.__r.__words[0] = (std::string::size_type)&v9;
  ((void (*)(std::string *, _DWORD *))off_24C9FB128[v6])(&v7, v5);
  if (v6 == -1)
    sub_20E877AB8();
  v9 = &v7;
  result = ((uint64_t (*)(std::string **, _DWORD *))off_24C9FB0F8[v6])(&v9, v5);
  if (v6 != -1)
    return ((uint64_t (*)(std::string **, _DWORD *))off_24C9FB0E0[v6])(&v9, v5);
  return result;
}

void sub_20F2143C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  sub_20E877A60((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_20F21440C(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  v2 = *(void **)(a1 + 80);
  v3 = *(_QWORD *)(a1 + 88) - (_QWORD)v2;
  if (v3 >= 1)
    bzero(v2, 4 * (((unint64_t)v3 >> 2) - ((unint64_t)v3 > 3)) + 4);
  if (*(_BYTE *)(a1 + 112))
    *(_BYTE *)(a1 + 112) = 0;
}

void sub_20F214464(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  void *v5;
  double v6;
  double v7;
  __int128 v8;
  uint64_t *v9;
  __int128 v10;
  uint64_t *v11;
  std::mutex *v12;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  double v22;
  _BYTE __dst[288];
  double v24;
  double v25;
  char *v26;
  double v27[38];

  v27[37] = *(double *)MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 376))
    goto LABEL_12;
  v4 = (const void *)(a1 + 32);
  memcpy(__dst, (const void *)(a1 + 32), sizeof(__dst));
  v27[0] = 0.0;
  LODWORD(v19) = 0;
  sub_20E8BECAC();
  v5 = operator new((8 * (int)v27[0] + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
  sub_20E8BECAC();
  MEMORY[0x212BC6368](v5, 0x1000C8000313F17);
  if (v24 == 0.0)
    goto LABEL_12;
  v6 = 0.0 - v24;
  if (v24 >= 0.0)
    v6 = v24;
  if (v6 <= 0.000001)
    goto LABEL_12;
  v7 = v25 / v24;
  v22 = v25 / v24;
  if (v25 / v24 <= *(double *)(a1 + 8) && *(_QWORD *)(a1 + 368) >= *(_QWORD *)a1)
  {
    *(_BYTE *)(a1 + 376) = 1;
    LODWORD(v27[0]) = 2;
    memcpy(&v27[1], v4, 0x120uLL);
    sub_20F215978((uint64_t)v27);
    v10 = *(_OWORD *)(a1 + 336);
    v19 = *(_OWORD *)(a1 + 320);
    v20 = v10;
    v21 = *(_OWORD *)(a1 + 352);
    sub_20F215B7C(v27, (double *)&v19);
    v11 = sub_210219C18();
    v12 = sub_21021A1E0();
    if (!atomic_load((unint64_t *)&v12[1]))
    {
LABEL_29:
      if (os_signpost_enabled((os_log_t)*v11))
      {
        v17 = *(_QWORD *)(a1 + 368);
        LODWORD(v27[0]) = 134219776;
        *(_QWORD *)((char *)v27 + 4) = v19;
        WORD2(v27[1]) = 2048;
        *(double *)((char *)&v27[1] + 6) = *((double *)&v19 + 1);
        HIWORD(v27[2]) = 2048;
        *(_QWORD *)&v27[3] = v20;
        LOWORD(v27[4]) = 2048;
        *(double *)((char *)&v27[4] + 2) = *((double *)&v20 + 1);
        WORD1(v27[5]) = 2048;
        *(_QWORD *)((char *)&v27[5] + 4) = v21;
        WORD2(v27[6]) = 2048;
        *(double *)((char *)&v27[6] + 6) = *((double *)&v21 + 1);
        HIWORD(v27[7]) = 2048;
        v27[8] = v7;
        LOWORD(v27[9]) = 2048;
        *(_QWORD *)((char *)&v27[9] + 2) = v17;
        _os_signpost_emit_unreliably_with_name_impl();
      }
      goto LABEL_31;
    }
    v14 = (uint64_t)v12;
    v15 = *(_QWORD *)(a1 + 368);
    LODWORD(v27[0]) = 134219776;
    *(_QWORD *)((char *)v27 + 4) = v19;
    WORD2(v27[1]) = 2048;
    *(double *)((char *)&v27[1] + 6) = *((double *)&v19 + 1);
    HIWORD(v27[2]) = 2048;
    *(_QWORD *)&v27[3] = v20;
    LOWORD(v27[4]) = 2048;
    *(double *)((char *)&v27[4] + 2) = *((double *)&v20 + 1);
    WORD1(v27[5]) = 2048;
    *(_QWORD *)((char *)&v27[5] + 4) = v21;
    WORD2(v27[6]) = 2048;
    *(double *)((char *)&v27[6] + 6) = *((double *)&v21 + 1);
    HIWORD(v27[7]) = 2048;
    v27[8] = v7;
    LOWORD(v27[9]) = 2048;
    *(_QWORD *)((char *)&v27[9] + 2) = v15;
    v16 = (char *)_os_log_send_and_compose_impl();
    v26 = v16;
    sub_21021A118(v27, (uint64_t)v11, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, "ThreeDOFTracker: FINAL MAG FIELD ESTIMATION SUCCESS. MAG Field Bias/Vector = %lf %lf %lf / %lf %lf %lf.  COND NUM = %lf, NUM SAMPLES USED = %ld.", 0x90uLL, (const char **)&v26);
    sub_21021A2DC(v14, (uint64_t)v27);
    if (SHIBYTE(v27[17]) < 0)
    {
      operator delete(*(void **)&v27[15]);
      if ((SHIBYTE(v27[14]) & 0x80000000) == 0)
      {
LABEL_16:
        if (!LOBYTE(v27[11]))
        {
LABEL_22:
          if (LOBYTE(v27[7]) && SHIBYTE(v27[6]) < 0)
            operator delete(*(void **)&v27[4]);
          if (SHIBYTE(v27[3]) < 0)
            operator delete(*(void **)&v27[1]);
          if (v16)
            free(v16);
          goto LABEL_29;
        }
LABEL_20:
        if (SHIBYTE(v27[10]) < 0)
          operator delete(*(void **)&v27[8]);
        goto LABEL_22;
      }
    }
    else if ((SHIBYTE(v27[14]) & 0x80000000) == 0)
    {
      goto LABEL_16;
    }
    operator delete(*(void **)&v27[12]);
    if (!LOBYTE(v27[11]))
      goto LABEL_22;
    goto LABEL_20;
  }
  if (v7 > *(double *)(a1 + 24) || *(_QWORD *)(a1 + 368) < *(_QWORD *)(a1 + 16) || v7 >= *(double *)(a1 + 384))
  {
LABEL_12:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    return;
  }
  *(double *)(a1 + 384) = v7;
  LODWORD(v27[0]) = 2;
  memcpy(&v27[1], v4, 0x120uLL);
  sub_20F215978((uint64_t)v27);
  v8 = *(_OWORD *)(a1 + 336);
  v19 = *(_OWORD *)(a1 + 320);
  v20 = v8;
  v21 = *(_OWORD *)(a1 + 352);
  sub_20F215B7C(v27, (double *)&v19);
  v9 = sub_210219C18();
  sub_20F214994((uint64_t)v9, 0xEEEEB0B5B2B2EEEELL, &v19, (uint64_t *)&v19 + 1, &v20, (_QWORD *)&v20 + 1, (uint64_t *)&v21, (_QWORD *)&v21 + 1, (void **)&v22, (uint64_t *)(a1 + 368));
LABEL_31:
  v18 = v20;
  *(_OWORD *)a2 = v19;
  *(_OWORD *)(a2 + 16) = v18;
  *(_OWORD *)(a2 + 32) = v21;
  *(_BYTE *)(a2 + 48) = 1;
}

void sub_20F21493C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  void *v61;

  sub_20E96E218((uint64_t)&a61);
  if (v61)
  {
    free(v61);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20F214994(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, _QWORD *a5, _QWORD *a6, uint64_t *a7, _QWORD *a8, void **a9, uint64_t *a10)
{
  unsigned __int8 v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  char *v30;
  size_t v31;
  __darwin_time_t tv_sec;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  timespec v46;
  int v47;
  _BYTE v48[18];
  __int16 v49;
  uint64_t v50;
  _BYTE v51[10];
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  void *v57;
  __int16 v58;
  uint64_t v59;
  char v60;
  char v61;
  void *v62;
  char v63;
  void *__p;
  char v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v18 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    v44 = a3;
    v20 = *a3;
    v21 = *a4;
    v45 = a5;
    v22 = *a5;
    v23 = a6;
    v24 = *a6;
    v25 = *a7;
    v26 = a8;
    v27 = *a8;
    v28 = *a9;
    v29 = *a10;
    v47 = 134219776;
    *(_QWORD *)v48 = v20;
    *(_WORD *)&v48[8] = 2048;
    *(_QWORD *)&v48[10] = v21;
    v49 = 2048;
    v50 = v22;
    *(_WORD *)v51 = 2048;
    *(_QWORD *)&v51[2] = v24;
    v52 = 2048;
    v53 = v25;
    v54 = 2048;
    v55 = v27;
    v56 = 2048;
    v57 = v28;
    v58 = 2048;
    v59 = v29;
    v30 = (char *)_os_log_send_and_compose_impl();
    v31 = strlen(v30);
    v46.tv_sec = 0;
    pthread_threadid_np(0, (__uint64_t *)&v46);
    tv_sec = v46.tv_sec;
    timespec_get(&v46, 1);
    sub_210219E20(&v47, a2, "Trace", 5uLL, (__int128 *)(a1 + 8), (__int128 *)(a1 + 40), "ThreeDOFTracker: QUICK MAG FIELD ESTIMATION SUCCESS. MAG Field Bias/Vector = %lf %lf %lf / %lf %lf %lf.  COND NUM = %lf, NUM SAMPLES USED = %ld.", 0x90uLL, v30, v31, tv_sec, &v46);
    std::mutex::lock(&stru_254A5A410);
    v33 = qword_254A5A458;
    for (i = unk_254A5A460; v33 != i; v33 += 40)
    {
      v35 = *(_QWORD *)(v33 + 32);
      if (!v35)
        sub_20E86D37C();
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v35 + 48))(v35, &v47);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v65 < 0)
    {
      operator delete(__p);
      a8 = v26;
      a6 = v23;
      if ((v63 & 0x80000000) == 0)
      {
LABEL_8:
        a5 = v45;
        a3 = v44;
        if (!v61)
        {
LABEL_14:
          if (BYTE2(v55) && SBYTE1(v55) < 0)
            operator delete(*(void **)v51);
          if (SHIBYTE(v50) < 0)
            operator delete(*(void **)&v48[4]);
          if (v30)
            free(v30);
          goto LABEL_21;
        }
LABEL_12:
        if (v60 < 0)
          operator delete(v57);
        goto LABEL_14;
      }
    }
    else
    {
      a8 = v26;
      a6 = v23;
      if ((v63 & 0x80000000) == 0)
        goto LABEL_8;
    }
    operator delete(v62);
    a5 = v45;
    a3 = v44;
    if (!v61)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_21:
  if ((unint64_t)(a2 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(*(os_log_t *)a1))
  {
    v36 = *a3;
    v37 = *a4;
    v38 = *a5;
    v39 = *a6;
    v40 = *a7;
    v41 = *a8;
    v42 = *a9;
    v43 = *a10;
    v47 = 134219776;
    *(_QWORD *)v48 = v36;
    *(_WORD *)&v48[8] = 2048;
    *(_QWORD *)&v48[10] = v37;
    v49 = 2048;
    v50 = v38;
    *(_WORD *)v51 = 2048;
    *(_QWORD *)&v51[2] = v39;
    v52 = 2048;
    v53 = v40;
    v54 = 2048;
    v55 = v41;
    v56 = 2048;
    v57 = v42;
    v58 = 2048;
    v59 = v43;
    _os_signpost_emit_unreliably_with_name_impl();
  }
}

void sub_20F214D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  va_list va;

  va_start(va, a13);
  sub_20E96E218((uint64_t)va);
  if (v13)
    free(v13);
  _Unwind_Resume(a1);
}

BOOL sub_20F214DA8@<W0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, __n128 a6@<Q4>)
{
  float64x2_t v6;
  float64x2_t v7;
  int8x16_t v8;
  __int128 v9;
  int v10;
  uint64_t v13;
  uint64_t v14;
  float64x2_t v15;
  uint64_t v16;
  float64x2_t v17;
  uint64_t v18;
  int8x16_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int8x16_t v23;
  unint64_t v28;
  uint64_t v29;
  float64x2_t v30;
  unint64_t v31;
  int8x16_t v32;
  unint64_t v33;
  float64x2_t v34;
  float64x2_t v35;
  double v36;
  float64x2_t v37;
  int8x16_t v38;
  float64x2_t v39;
  float64x2_t v40;
  int64x2_t v41;
  float64x2_t v42;
  uint64_t v43;
  float64x2_t v45;
  uint64_t v46;
  double v47;
  float64x2_t v48;
  float64x2_t v49;
  float64_t v52;
  float64x2_t v53;
  float64x2_t v54;
  __int128 v57;
  float64x2_t v58;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v68;
  float64_t v70;
  float64x2_t v72;
  float64x2_t v75;
  float64x2_t v76;
  int64x2_t v77;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  _BOOL8 result;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  size_t v92;
  long double *v93;
  float64x2_t v94;
  long double *v95;
  uint64_t v96;
  double v97;
  double v98;
  double v99;
  double v100;
  float64x2_t v101;
  double v102;
  float64x2_t v103;
  uint64_t v104;
  uint64_t v105;
  double v107;
  double v110;
  float64x2_t v113;
  uint64_t v114;
  uint64_t v117;
  double v118;
  float64x2_t v120;
  double v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  double v127;
  unint64_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  unint64_t v133;
  float64x2_t v134;
  float64x2_t v135;
  int64x2_t v136;
  double v137;
  float64x2_t v139;
  float64_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v144;
  float64x2_t v146;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v155;
  int64x2_t v159;
  float64x2_t v160;
  int64x2_t v161;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  int8x16_t v170;
  double v171;
  double v173;
  double v174;
  double v175;
  double v176;
  double v177;
  double v178;
  double v179;
  float64_t v180;
  double v181;
  char v182;
  double v183;
  double v186;
  float64x2_t v187;
  int8x16_t v188;
  float64x2_t v189;
  float64x2_t v190;
  double v191;
  float64x2_t v192;
  float64x2_t v193;
  double v194;
  float64x2_t v195;
  float64x2_t v196;
  double v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  uint64_t v202;
  float64x2_t v203;
  double v204;
  double v205;
  float64x2_t v206;
  double v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  double v211;
  float64x2_t v212;
  double v213;
  float64x2_t v214;
  float64x2_t v215;
  int8x16_t v216;
  uint64_t v217;
  double v218;
  uint64_t v219;
  double v220;
  uint64_t v221;
  __n128 v222;
  double v223;
  uint64_t v224;
  double v225;
  uint64_t v226;
  float64x2_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64_t v231;

  v10 = a2;
  v13 = a1[1];
  v14 = *a1 + 144 * a2;
  v15 = *(float64x2_t *)(v14 + 40);
  *(_QWORD *)&v9 = *(_QWORD *)(v14 + 56);
  v16 = *(uint64_t *)(v14 + 80);
  v17 = *(float64x2_t *)(v14 + 88);
  v18 = *(uint64_t *)(v14 + 104);
  v19 = *(int8x16_t *)(v14 + 112);
  a6.n128_u64[0] = *(_QWORD *)(v14 + 128);
  v20 = vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL).u64[0];
  v21 = vextq_s8(*(int8x16_t *)(v14 + 64), *(int8x16_t *)(v14 + 64), 8uLL).u64[0];
  v22 = vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u64[0];
  v23 = vextq_s8(v19, v19, 8uLL);
  __asm { FMOV            V18.2D, #1.0 }
  v215 = *(float64x2_t *)(v14 + 64);
  v224 = v18;
  v226 = v16;
  v222 = a6;
  v219 = v21;
  v221 = v20;
  v216 = v23;
  v217 = v22;
  v214 = _Q18;
  if (v13 == *a1)
  {
    v32.i64[0] = 0;
    v33 = 0;
    v34.f64[0] = 0.0;
    v35.f64[0] = 0.0;
    v36 = 0.0;
    v37.f64[0] = 0.0;
    v38.i64[0] = 0;
    v8.i64[0] = 0;
    v7.f64[0] = 0.0;
    v30.f64[0] = 0.0;
    *(double *)&v31 = 0.0;
    v6.f64[0] = 0.0;
  }
  else
  {
    v28 = (v13 - *a1) / 144;
    if (v28 <= 1)
      v28 = 1;
    v206 = (float64x2_t)vdupq_lane_s64(v9, 0);
    v210 = (float64x2_t)vdupq_lane_s64(v20, 0);
    v201 = (float64x2_t)vdupq_lane_s64(v16, 0);
    v203 = (float64x2_t)vdupq_lane_s64(v21, 0);
    v34 = (float64x2_t)vdupq_lane_s64(v22, 0);
    v196 = (float64x2_t)vdupq_lane_s64(v18, 0);
    v199 = v34;
    v190 = (float64x2_t)vdupq_lane_s64(a6.n128_i64[0], 0);
    v193 = (float64x2_t)vdupq_lane_s64(v23.i64[0], 0);
    v29 = *a1 + 64;
    v30.f64[0] = 0.0;
    *(double *)&v31 = 0.0;
    v6.f64[0] = 0.0;
    v32.i64[0] = 0;
    v33 = 0;
    v34.f64[0] = 0.0;
    v37.f64[1] = 1.0;
    v35.f64[0] = 0.0;
    v36 = 0.0;
    v37.f64[0] = 0.0;
    v38.i64[0] = 0;
    v8.i64[0] = 0;
    v7.f64[0] = 0.0;
    do
    {
      v39 = v7;
      v40.f64[0] = *(float64_t *)(v29 - 8);
      v41 = *(int64x2_t *)(v29 - 24);
      v42.f64[0] = v35.f64[0];
      v43 = v8.i64[0];
      _Q26 = *(float64x2_t *)(v29 + 24);
      v45 = (float64x2_t)vzip1q_s64(v41, *(int64x2_t *)v29);
      v46 = v38.i64[0];
      v47 = *(double *)(v29 + 40);
      v48 = (float64x2_t)vzip2q_s64(v41, *(int64x2_t *)v29);
      v40.f64[1] = *(float64_t *)(v29 + 16);
      v49 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v45, v15.f64[0]), v210, v48), v206, v40);
      _Q22 = vmulq_f64(_Q26, v15);
      _D1 = v221;
      __asm { FMLA            D22, D1, V26.D[1] }
      v52 = v36;
      v53 = v15;
      v54 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v45, v215.f64[0]), v203, v48), v201, v40);
      _Q22.f64[0] = _Q22.f64[0] + v47 * *(double *)&v9;
      _D6 = v219;
      __asm { FMLA            D31, D6, V26.D[1] }
      v57 = v9;
      v58 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v45, v17.f64[0]), v199, v48), v196, v40);
      v40.f64[0] = _D31 + v47 * *(double *)&v226;
      _Q25 = vmulq_f64(_Q26, v17);
      _D16 = v217;
      __asm { FMLA            D25, D16, V26.D[1] }
      _Q25.f64[0] = _Q25.f64[0] + v47 * *(double *)&v224;
      v61 = vsubq_f64((float64x2_t)xmmword_21030D320, v49);
      v62 = vsubq_f64((float64x2_t)xmmword_2102DD520, v54);
      _Q29 = vsubq_f64((float64x2_t)0, v58);
      v64 = (float64x2_t)vzip1q_s64((int64x2_t)v61, (int64x2_t)v62);
      v65 = (float64x2_t)vzip2q_s64((int64x2_t)v61, (int64x2_t)v62);
      _Q28 = vmulq_f64(_Q29, v61);
      _D12 = v61.f64[1];
      v68 = vmlaq_laneq_f64(vmulq_n_f64(v64, v61.f64[0]), v65, v61, 1);
      __asm { FMLA            D28, D12, V29.D[1] }
      _Q12 = vmulq_f64(_Q29, v62);
      v70 = *(double *)v32.i64;
      _D14 = v62.f64[1];
      __asm { FMLA            D12, D14, V29.D[1] }
      v72 = vmlaq_laneq_f64(vmulq_n_f64(v64, v62.f64[0]), v65, v62, 1);
      _Q13 = vmulq_f64(_Q29, _Q29);
      _D14 = _Q29.f64[1];
      __asm { FMLA            D13, D14, V29.D[1] }
      v75.f64[0] = v70;
      *(_QWORD *)&v75.f64[1] = v33;
      v76 = vmlaq_f64(vmulq_n_f64(v49, *(double *)v19.i64), v193, v54);
      v77 = (int64x2_t)vsubq_f64((float64x2_t)0, _Q22);
      _Q21 = vsubq_f64(*(float64x2_t *)(v29 + 48), vmlaq_f64(v76, v190, v58));
      v79 = vmlaq_laneq_f64(vmulq_n_f64(v64, _Q29.f64[0]), v65, _Q29, 1);
      v80 = vmlaq_laneq_f64(vmulq_n_f64(v64, _Q21.f64[0]), v65, _Q21, 1);
      _Q10 = vmulq_f64(_Q29, _Q21);
      _Q21.f64[0] = _Q21.f64[1];
      __asm { FMLA            D10, D21, V29.D[1] }
      v82 = vsubq_f64((float64x2_t)0, v40);
      *(_QWORD *)&_Q29.f64[0] = *(_OWORD *)&vsubq_f64(v214, _Q25);
      v42.f64[1] = v52;
      v83 = (float64x2_t)vzip1q_s64(v77, (int64x2_t)v82);
      _Q28.f64[0] = vmlad_n_f64(_Q28.f64[0], *(double *)v77.i64, _Q29.f64[0]);
      _Q22.f64[0] = _Q22.f64[0] * *(double *)v19.i64 + v40.f64[0] * *(double *)v216.i64 + _Q25.f64[0] * v222.n128_f64[0];
      _Q12.f64[0] = vmlad_n_f64(_Q12.f64[0], v82.f64[0], _Q29.f64[0]);
      v84 = vmlaq_n_f64(v72, v83, v82.f64[0]);
      v82.f64[0] = *(float64_t *)(v29 + 64);
      *(_QWORD *)&v82.f64[0] = *(_OWORD *)&vsubq_f64(v82, _Q22);
      v85 = vmlaq_n_f64(v79, v83, _Q29.f64[0]);
      _Q10.f64[0] = vmlad_n_f64(_Q10.f64[0], v82.f64[0], _Q29.f64[0]);
      _Q13.f64[0] = vmlad_n_f64(_Q13.f64[0], _Q29.f64[0], _Q29.f64[0]);
      *(_QWORD *)&_Q29.f64[0] = v46;
      *(_QWORD *)&_Q29.f64[1] = v43;
      v32 = (int8x16_t)vaddq_f64(v75, vmlaq_n_f64(v68, v83, *(double *)v77.i64));
      v34 = vaddq_f64(v34, _Q28);
      v37 = vaddq_f64(v37, _Q12);
      v35 = vaddq_f64(v42, v84);
      v38 = (int8x16_t)vaddq_f64(_Q29, v85);
      v7 = vaddq_f64(v39, _Q13);
      v36 = v35.f64[1];
      *(_QWORD *)&v30.f64[1] = v31;
      v8 = vextq_s8(v38, v38, 8uLL);
      v30 = vaddq_f64(v30, vmlaq_n_f64(v80, v83, v82.f64[0]));
      v9 = v57;
      v15 = v53;
      v33 = vextq_s8(v32, v32, 8uLL).u64[0];
      v6 = vaddq_f64(v6, _Q10);
      v31 = vextq_s8((int8x16_t)v30, (int8x16_t)v30, 8uLL).u64[0];
      v29 += 144;
      --v28;
    }
    while (v28);
  }
  v204 = *(double *)&v31;
  v207 = v6.f64[0];
  v211 = v30.f64[0];
  v186 = *(double *)v19.i64;
  v187 = v17;
  v202 = *(uint64_t *)&v9;
  v189 = v15;
  v191 = *(double *)v38.i64;
  *(_QWORD *)&v86.f64[0] = v32.i64[0];
  *(_QWORD *)&v86.f64[1] = v33;
  v194 = v35.f64[0];
  v197 = v7.f64[0];
  v34.f64[1] = v35.f64[0];
  v227 = v86;
  v228 = v34;
  v183 = v36;
  v86.f64[0] = v36;
  v86.f64[1] = v37.f64[0];
  v231 = v7.f64[0];
  *(_QWORD *)&v87.f64[0] = v38.i64[0];
  v188 = v8;
  *(_QWORD *)&v87.f64[1] = v8.i64[0];
  v229 = v86;
  v230 = v87;
  result = sub_20F215778((uint64_t)&v227, a4);
  if (result)
  {
    v89 = *a1;
    v90 = a1[1];
    v91 = 0x8E38E38E38E38E39 * ((v90 - *a1) >> 4);
    v92 = 7635497416 * ((v90 - *a1) >> 4);
    v93 = (long double *)operator new((v92 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
    v95 = v93;
    if ((_DWORD)v91)
      bzero(v93, v92);
    if (v90 == v89)
    {
      v126.f64[0] = 0.0;
      v128 = 0;
      v129.f64[0] = 0.0;
      v130.f64[0] = 0.0;
      v131.f64[0] = 0.0;
      v113.f64[0] = 0.0;
      v132.f64[0] = 0.0;
      *(double *)&v133 = 0.0;
      v134.f64[0] = 0.0;
      v213 = 0.0;
      v205 = 0.0;
      v209.f64[0] = 0.0;
    }
    else
    {
      v96 = 0;
      v97 = sqrt(*(double *)v32.i64);
      v98 = v211 / v97;
      v99 = sqrt(v183 - v194 / v97 * (v194 / v97));
      *(_QWORD *)&v101.f64[1] = v188.i64[1];
      v100 = (*(double *)v188.i64 - v194 / v97 * (v191 / v97)) / v99;
      v101.f64[0] = (v204 - v211 / v97 * (v194 / v97)) / v99;
      v94.f64[0] = sqrt(v197 - v191 / v97 * (v191 / v97) - v100 * v100);
      v94.f64[0] = (v207 - v211 / v97 * (v191 / v97) - v101.f64[0] * v100) / v94.f64[0] / v94.f64[0];
      v212 = v94;
      v102 = (v101.f64[0] - v100 * v94.f64[0]) / v99;
      v103.f64[0] = (v98 - v191 / v97 * v94.f64[0] - v194 / v97 * v102) / v97;
      if (v91 <= 1)
        v104 = 1;
      else
        v104 = v91;
      v105 = v89 + 64;
      v103.f64[1] = v102;
      v208 = v103;
      do
      {
        _D2 = *(_QWORD *)(v105 + 16);
        v101.f64[0] = *(float64_t *)(v105 + 64);
        *(_QWORD *)&v107 = *(_OWORD *)&vsubq_f64(v101, v212);
        _Q7 = vsubq_f64(*(float64x2_t *)(v105 + 48), v208);
        __asm { FMLA            D0, D2, V7.D[1] }
        v110 = vmlad_n_f64(_D0, *(double *)(v105 + 40), v107);
        _D3 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v105 - 24), *(double *)&_Q7), *(float64x2_t *)v105, _Q7, 1), *(float64x2_t *)(v105 + 24), v107).f64[1];
        __asm { FMLA            D2, D3, V1.D[1] }
        v95[v96++] = acos(v110 * (1.0 / sqrt(_D2 + v110 * v110))) * 57.2957795;
        v105 += 144;
      }
      while (v104 != v96);
      v114 = 0;
      _D31 = v219;
      _D26 = v221;
      v134 = (float64x2_t)vdupq_lane_s64(v221, 0);
      v198 = (float64x2_t)vdupq_lane_s64(v202, 0);
      v200 = v134;
      v117 = v89 + 64;
      v195 = (float64x2_t)vdupq_lane_s64(v219, 0);
      v213 = 0.0;
      v118 = *(double *)&v226;
      v192 = (float64x2_t)vdupq_lane_s64(v226, 0);
      _D8 = v217;
      v120 = (float64x2_t)vdupq_lane_s64(v217, 0);
      v121 = *(double *)&v224;
      v122 = (float64x2_t)vdupq_lane_s64(v224, 0);
      v205 = 0.0;
      *(_QWORD *)&v123.f64[1] = v216.i64[1];
      v124 = (float64x2_t)vdupq_lane_s64(v216.i64[0], 0);
      v123.f64[0] = 0.0;
      v209 = v123;
      *(_QWORD *)&v129.f64[1] = v222.n128_u64[1];
      v125 = (float64x2_t)vdupq_lane_s64(v222.n128_i64[0], 0);
      v126.f64[0] = 0.0;
      v127 = v95[v10];
      v128 = 0;
      v129.f64[0] = 0.0;
      v130.f64[0] = 0.0;
      v131.f64[0] = 0.0;
      v113.f64[0] = 0.0;
      v132.f64[0] = 0.0;
      *(double *)&v133 = 0.0;
      v134.f64[0] = 0.0;
      do
      {
        v171 = v95[v114];
        _NF = v127 < v171;
        if (v127 == v171)
          goto LABEL_18;
        v173 = v127 - v171;
        v174 = v171 - v127;
        if (!_NF)
          v174 = v173;
        if (v174 <= a5)
        {
LABEL_18:
          v135.f64[0] = *(float64_t *)(v117 - 8);
          v136 = *(int64x2_t *)(v117 - 24);
          v137 = *(double *)(v117 + 40);
          _Q27 = *(float64x2_t *)(v117 + 24);
          v139 = (float64x2_t)vzip1q_s64(v136, *(int64x2_t *)v117);
          v140 = v130.f64[0];
          v141 = (float64x2_t)vzip2q_s64(v136, *(int64x2_t *)v117);
          v135.f64[1] = *(float64_t *)(v117 + 16);
          v142 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v139, v189.f64[0]), v200, v141), v198, v135);
          _Q21 = vmulq_f64(_Q27, v189);
          __asm { FMLA            D21, D26, V27.D[1] }
          _Q21.f64[0] = _Q21.f64[0] + v137 * *(double *)&v202;
          v144 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v139, v215.f64[0]), v195, v141), v192, v135);
          _Q22 = vmulq_f64(_Q27, v215);
          __asm { FMLA            D22, D31, V27.D[1] }
          _Q22.f64[0] = _Q22.f64[0] + v137 * v118;
          v146 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v139, v187.f64[0]), v120, v141), v122, v135);
          _Q24 = vmulq_f64(_Q27, v187);
          __asm { FMLA            D24, D8, V27.D[1] }
          _Q24.f64[0] = _Q24.f64[0] + v137 * v121;
          _Q30 = vsubq_f64((float64x2_t)xmmword_21030D320, v142);
          _Q12 = vsubq_f64((float64x2_t)xmmword_2102DD520, v144);
          _Q28 = vsubq_f64((float64x2_t)0, v146);
          v151 = (float64x2_t)vzip1q_s64((int64x2_t)_Q30, (int64x2_t)_Q12);
          v152 = (float64x2_t)vzip2q_s64((int64x2_t)_Q30, (int64x2_t)_Q12);
          v153 = vmlaq_laneq_f64(vmulq_n_f64(v151, _Q30.f64[0]), v152, _Q30, 1);
          _Q27 = vmulq_f64(_Q28, _Q30);
          _Q30.f64[0] = _Q30.f64[1];
          __asm { FMLA            D27, D30, V28.D[1] }
          v155 = vmlaq_laneq_f64(vmulq_n_f64(v151, _Q12.f64[0]), v152, _Q12, 1);
          _Q11 = vmulq_f64(_Q28, _Q12);
          _Q12.f64[0] = _Q12.f64[1];
          __asm { FMLA            D11, D12, V28.D[1] }
          _Q12 = vmulq_f64(_Q28, _Q28);
          _D13 = _Q28.f64[1];
          __asm { FMLA            D12, D13, V28.D[1] }
          v159 = (int64x2_t)vsubq_f64((float64x2_t)0, _Q21);
          v160 = vmlaq_f64(vmulq_n_f64(v142, v186), v124, v144);
          v161 = (int64x2_t)vsubq_f64((float64x2_t)0, _Q22);
          _Q23 = vsubq_f64(*(float64x2_t *)(v117 + 48), vmlaq_f64(v160, v125, v146));
          v163 = vmlaq_laneq_f64(vmulq_n_f64(v151, _Q28.f64[0]), v152, _Q28, 1);
          v164 = vmlaq_laneq_f64(vmulq_n_f64(v151, _Q23.f64[0]), v152, _Q23, 1);
          _Q10 = vmulq_f64(_Q28, _Q23);
          _Q23.f64[0] = _Q23.f64[1];
          __asm { FMLA            D10, D23, V28.D[1] }
          *(_QWORD *)&_Q23.f64[0] = *(_OWORD *)&vsubq_f64(v214, _Q24);
          v166 = (float64x2_t)vzip1q_s64(v159, v161);
          _Q27.f64[0] = vmlad_n_f64(_Q27.f64[0], *(double *)v159.i64, _Q23.f64[0]);
          v167 = vmlaq_n_f64(v155, v166, *(double *)v161.i64);
          _Q11.f64[0] = vmlad_n_f64(_Q11.f64[0], *(double *)v161.i64, _Q23.f64[0]);
          _D26 = v221;
          *(_QWORD *)&_Q22.f64[1] = v222.n128_u64[1];
          _Q21.f64[0] = _Q21.f64[0] * v186 + _Q22.f64[0] * *(double *)v216.i64 + _Q24.f64[0] * v222.n128_f64[0];
          _Q22.f64[0] = *(float64_t *)(v117 + 64);
          *(_QWORD *)&_Q21.f64[0] = *(_OWORD *)&vsubq_f64(_Q22, _Q21);
          v168 = vmlaq_n_f64(v163, v166, _Q23.f64[0]);
          v169 = vmlaq_n_f64(v164, v166, _Q21.f64[0]);
          _Q10.f64[0] = vmlad_n_f64(_Q10.f64[0], _Q21.f64[0], _Q23.f64[0]);
          _Q12.f64[0] = vmlad_n_f64(_Q12.f64[0], _Q23.f64[0], _Q23.f64[0]);
          _Q23.f64[0] = v140;
          *(_QWORD *)&v126.f64[1] = v128;
          _Q23.f64[1] = v131.f64[0];
          *(_QWORD *)&v132.f64[1] = v133;
          v126 = vaddq_f64(v126, vmlaq_n_f64(v153, v166, *(double *)v159.i64));
          v129 = vaddq_f64(v129, _Q27);
          v130 = vaddq_f64(_Q23, v167);
          v113 = vaddq_f64(v113, _Q11);
          v132 = vaddq_f64(v132, v168);
          v118 = *(double *)&v226;
          v134 = vaddq_f64(v134, _Q12);
          _Q21.f64[0] = v213;
          _Q21.f64[1] = v205;
          v131.f64[0] = v130.f64[1];
          v133 = vextq_s8((int8x16_t)v132, (int8x16_t)v132, 8uLL).u64[0];
          v170 = (int8x16_t)vaddq_f64(_Q21, v169);
          _D8 = v217;
          _D31 = v219;
          v128 = vextq_s8((int8x16_t)v126, (int8x16_t)v126, 8uLL).u64[0];
          v209 = vaddq_f64(v209, _Q10);
          v121 = *(double *)&v224;
          v213 = *(double *)v170.i64;
          *(_QWORD *)&v205 = vextq_s8(v170, v170, 8uLL).u64[0];
        }
        ++v114;
        v117 += 144;
      }
      while (v104 != v114);
    }
    v225 = v130.f64[0];
    *(_QWORD *)&v126.f64[1] = v128;
    v129.f64[1] = v130.f64[0];
    v227 = v126;
    v228 = v129;
    v220 = v131.f64[0];
    v131.f64[1] = v113.f64[0];
    v223 = v134.f64[0];
    v231 = v134.f64[0];
    v218 = *(double *)&v133;
    *(_QWORD *)&v132.f64[1] = v133;
    v229 = v131;
    v230 = v132;
    if (sub_20F215778((uint64_t)&v227, a4))
    {
      v175 = sqrt(v126.f64[0]);
      v176 = sqrt(v220 - v225 / v175 * (v225 / v175));
      v177 = (v218 - v225 / v175 * (v132.f64[0] / v175)) / v176;
      v178 = sqrt(v223 - v132.f64[0] / v175 * (v132.f64[0] / v175) - v177 * v177);
      v179 = (v205 - v213 / v175 * (v225 / v175)) / v176;
      v180 = (v209.f64[0] - v213 / v175 * (v132.f64[0] / v175) - v179 * v177) / v178 / v178;
      v181 = (v179 - v177 * v180) / v176;
      *(double *)a3 = (v213 / v175 - v132.f64[0] / v175 * v180 - v225 / v175 * v181) / v175;
      *(double *)(a3 + 8) = v181;
      *(float64_t *)(a3 + 16) = v180;
      v182 = 1;
    }
    else
    {
      v182 = 0;
      *(_BYTE *)a3 = 0;
    }
    *(_BYTE *)(a3 + 24) = v182;
    JUMPOUT(0x212BC6368);
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 24) = 0;
  return result;
}

void sub_20F215754(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6368](v1, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

BOOL sub_20F215778(uint64_t a1, double a2)
{
  double *v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  void *v8;
  __n128 v9;
  double v10;
  _BOOL8 v11;

  v4 = (double *)operator new(0x20uLL, (std::align_val_t)0x20uLL);
  v4[1] = 0.0;
  v4[2] = 0.0;
  *v4 = 0.0;
  v5 = operator new(0x60uLL, (std::align_val_t)0x20uLL);
  v6 = *(_OWORD *)(a1 + 16);
  *v5 = *(_OWORD *)a1;
  v5[1] = v6;
  v7 = *(_OWORD *)(a1 + 48);
  v5[2] = *(_OWORD *)(a1 + 32);
  v5[3] = v7;
  *((_QWORD *)v5 + 8) = *(_QWORD *)(a1 + 64);
  sub_20E8BECAC();
  v8 = operator new((8 * (int)0.0 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
  sub_20E8BECAC();
  MEMORY[0x212BC6368](v8, 0x1000C8000313F17);
  v9.n128_f64[0] = *v4;
  if (*v4 == 0.0)
    goto LABEL_6;
  v10 = 0.0 - v9.n128_f64[0];
  if (*v4 >= 0.0)
    v10 = *v4;
  if (v10 <= 0.000001)
  {
LABEL_6:
    v11 = 0;
  }
  else
  {
    v9.n128_f64[0] = v4[2] / v9.n128_f64[0];
    v11 = v9.n128_f64[0] < a2;
  }
  MEMORY[0x212BC6368](v5, 0x1000C8000313F17, v9);
  MEMORY[0x212BC6368](v4, 0x1000C8000313F17);
  return v11;
}

void sub_20F215914(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x212BC6368](v3, 0x1000C8000313F17);
  MEMORY[0x212BC6368](v2, 0x1000C8000313F17);
  MEMORY[0x212BC6368](v1, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

uint64_t sub_20F215978(uint64_t result)
{
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  _BOOL4 v28;

  v1 = *(double *)(result + 8);
  v2 = sqrt(v1);
  *(double *)(result + 8) = v2;
  v3 = *(double *)(result + 56) / v2;
  v4 = *(double *)(result + 64) - v3 * v3;
  v5 = sqrt(v4);
  *(double *)(result + 56) = v3;
  *(double *)(result + 64) = v5;
  v6 = *(double *)(result + 104) / v2;
  v7 = (*(double *)(result + 112) - v3 * v6) / v5;
  *(double *)(result + 104) = v6;
  *(double *)(result + 112) = v7;
  v8 = *(double *)(result + 120) - v6 * v6 - v7 * v7;
  v9 = sqrt(v8);
  *(double *)(result + 120) = v9;
  v10 = *(double *)(result + 152) / v2;
  v11 = (*(double *)(result + 160) - v3 * v10) / v5;
  *(double *)(result + 152) = v10;
  *(double *)(result + 160) = v11;
  v12 = (*(double *)(result + 168) - v6 * v10 - v7 * v11) / v9;
  v13 = *(double *)(result + 176) - v10 * v10 - v11 * v11 - v12 * v12;
  v14 = sqrt(v13);
  *(double *)(result + 168) = v12;
  *(double *)(result + 176) = v14;
  v15 = *(double *)(result + 200) / v2;
  v16 = (*(double *)(result + 208) - v3 * v15) / v5;
  *(double *)(result + 200) = v15;
  *(double *)(result + 208) = v16;
  v17 = (*(double *)(result + 216) - v6 * v15 - v7 * v16) / v9;
  v18 = (*(double *)(result + 224) - v10 * v15 - v11 * v16 - v12 * v17) / v14;
  *(double *)(result + 216) = v17;
  *(double *)(result + 224) = v18;
  v19 = *(double *)(result + 232) - v15 * v15 - v16 * v16 - v17 * v17 - v18 * v18;
  v20 = *(double *)(result + 256);
  v21 = *(double *)(result + 248) / v2;
  v22 = sqrt(v19);
  *(double *)(result + 232) = v22;
  v23 = (v20 - v3 * v21) / v5;
  *(double *)(result + 248) = v21;
  *(double *)(result + 256) = v23;
  v24 = (*(double *)(result + 264) - v6 * v21 - v7 * v23) / v9;
  v25 = (*(double *)(result + 272) - v10 * v21 - v11 * v23 - v12 * v24) / v14;
  *(double *)(result + 264) = v24;
  *(double *)(result + 272) = v25;
  v26 = (*(double *)(result + 280) - v15 * v21 - v16 * v23 - v17 * v24 - v18 * v25) / v22;
  v27 = *(double *)(result + 288) - v21 * v21 - v23 * v23 - v24 * v24 - v25 * v25 - v26 * v26;
  v28 = v1 <= 0.0;
  if (v4 <= 0.0)
    v28 = 1;
  if (v8 <= 0.0)
    v28 = 1;
  if (v13 <= 0.0)
    v28 = 1;
  if (v19 <= 0.0)
    v28 = 1;
  *(double *)(result + 280) = v26;
  *(double *)(result + 288) = sqrt(v27);
  if (v27 <= 0.0)
    v28 = 1;
  *(_DWORD *)result = v28;
  return result;
}

double sub_20F215B7C(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double result;

  v2 = a2[1];
  v3 = *a2 / a1[1];
  *a2 = v3;
  v4 = (v2 - v3 * a1[7]) / a1[8];
  a2[1] = v4;
  v5 = a2[3];
  v6 = (a2[2] - v3 * a1[13] - v4 * a1[14]) / a1[15];
  a2[2] = v6;
  v7 = (v5 - v3 * a1[19] - v4 * a1[20] - v6 * a1[21]) / a1[22];
  a2[3] = v7;
  v8 = a2[5];
  v9 = (a2[4] - v3 * a1[25] - v4 * a1[26] - v6 * a1[27] - v7 * a1[28]) / a1[29];
  a2[4] = v9;
  v10 = (v8 - v3 * a1[31] - v4 * a1[32] - v6 * a1[33] - v7 * a1[34] - v9 * a1[35]) / a1[36];
  a2[5] = v10;
  v11 = v10 / a1[36];
  a2[5] = v11;
  v12 = v3 - v11 * a1[31];
  *a2 = v12;
  v13 = v4 - v11 * a1[32];
  a2[1] = v13;
  v14 = v6 - v11 * a1[33];
  a2[2] = v14;
  v15 = v7 - v11 * a1[34];
  a2[3] = v15;
  v16 = v9 - v11 * a1[35];
  a2[4] = v16;
  v17 = v16 / a1[29];
  a2[4] = v17;
  v18 = v12 - v17 * a1[25];
  *a2 = v18;
  v19 = v13 - v17 * a1[26];
  a2[1] = v19;
  v20 = v14 - v17 * a1[27];
  a2[2] = v20;
  v21 = v15 - v17 * a1[28];
  a2[3] = v21;
  v22 = v21 / a1[22];
  a2[3] = v22;
  v23 = v18 - v22 * a1[19];
  *a2 = v23;
  v24 = v19 - v22 * a1[20];
  a2[1] = v24;
  v25 = v20 - v22 * a1[21];
  a2[2] = v25;
  v26 = v25 / a1[15];
  a2[2] = v26;
  v27 = v23 - v26 * a1[13];
  *a2 = v27;
  v28 = v24 - v26 * a1[14];
  a2[1] = v28;
  v29 = v28 / a1[8];
  a2[1] = v29;
  v30 = v27 - v29 * a1[7];
  *a2 = v30;
  result = v30 / a1[1];
  *a2 = result;
  return result;
}

void sub_20F215D9C(uint64_t a1, uint64_t a2)
{
  double v2;
  unsigned int v4;
  unsigned int v5;
  double v6;
  double v7;
  double v8;
  double v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  unint64_t *v23;
  int64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _OWORD *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  unint64_t v33;

  v2 = *(double *)a1;
  if (*(double *)a1 > *(double *)(a1 + 48))
  {
    v4 = *(_DWORD *)(a1 + 72);
    v5 = *(_DWORD *)(a1 + 76) + v4;
    v6 = v5 ? (double)v4 / (double)v5 : 0.0;
    v7 = v2 + *(double *)(a1 + 8);
    v8 = v2 / v7;
    v9 = v7 <= 0.0 ? 0.0 : v8;
    v11 = *(_QWORD *)(a1 + 80);
    v10 = *(_QWORD *)(a1 + 88);
    if (v11 <= v10 && v6 > *(double *)(a1 + 56))
    {
      while (1)
      {
        if (v6 <= *(double *)(a1 + 56) || v9 <= *(double *)(a1 + 64))
          goto LABEL_13;
        v15 = *(char **)(a2 + 8);
        v14 = *(_QWORD *)(a2 + 16);
        if ((unint64_t)v15 >= v14)
          break;
        *(_QWORD *)v15 = v11;
        v13 = (uint64_t)(v15 + 8);
LABEL_12:
        *(_QWORD *)(a2 + 8) = v13;
        v10 = *(_QWORD *)(a1 + 88);
LABEL_13:
        if (++v11 > v10)
          return;
      }
      v16 = *(_BYTE **)a2;
      v17 = (uint64_t)&v15[-*(_QWORD *)a2];
      v18 = v17 >> 3;
      v19 = (v17 >> 3) + 1;
      if (v19 >> 61)
        sub_20E92CED8();
      v20 = v14 - (_QWORD)v16;
      if (v20 >> 2 > v19)
        v19 = v20 >> 2;
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
        v21 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v21 = v19;
      if (v21)
      {
        if (v21 >> 61)
          sub_20E877A38();
        v22 = operator new(8 * v21);
        v23 = (unint64_t *)&v22[8 * v18];
        *v23 = v11;
        v13 = (uint64_t)(v23 + 1);
        v24 = v15 - v16;
        if (v15 == v16)
          goto LABEL_34;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t *)(8 * v18);
        *(_QWORD *)(8 * v18) = v11;
        v13 = 8 * v18 + 8;
        v24 = v15 - v16;
        if (v15 == v16)
        {
LABEL_34:
          *(_QWORD *)a2 = v23;
          *(_QWORD *)(a2 + 8) = v13;
          *(_QWORD *)(a2 + 16) = &v22[8 * v21];
          if (v16)
            operator delete(v16);
          goto LABEL_12;
        }
      }
      v25 = v24 - 8;
      if (v25 < 0x58)
        goto LABEL_41;
      if ((unint64_t)(v15 - v22 - v17) < 0x20)
        goto LABEL_41;
      v26 = (v25 >> 3) + 1;
      v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      v28 = &v15[-v27];
      v23 = (unint64_t *)((char *)v23 - v27);
      v29 = &v22[8 * v18 - 16];
      v30 = v15 - 16;
      v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v32 = *(_OWORD *)v30;
        *(v29 - 1) = *((_OWORD *)v30 - 1);
        *v29 = v32;
        v29 -= 2;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      v15 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_41:
        do
        {
          v33 = *((_QWORD *)v15 - 1);
          v15 -= 8;
          *--v23 = v33;
        }
        while (v15 != v16);
      }
      goto LABEL_34;
    }
  }
}

uint64_t sub_20F215F9C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  void **v7;
  _BYTE *v8;
  size_t v9;
  char *v10;
  char *v11;
  void **v12;
  char *v13;
  char *v14;
  void **v15;
  char *v16;
  char *v17;
  void **v18;
  _BYTE __p[24];

  *(_OWORD *)(a1 + 8) = 0u;
  v2 = a1 + 8;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  v3 = a1 + 64;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  v4 = a1 + 120;
  *(_OWORD *)(a1 + 168) = 0u;
  v5 = (_QWORD *)(a1 + 168);
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)a1 = &off_24C9FB168;
  *(_QWORD *)(a1 + 56) = &unk_24C9FB1A0;
  *(_QWORD *)(a1 + 112) = &unk_24C9FB1C8;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  v6 = (char *)operator new(0x20uLL);
  strcpy(v6, "CM Pose Anchor Transform Node");
  *(_QWORD *)__p = operator new(0x58uLL);
  *(_OWORD *)&__p[8] = xmmword_2103134D0;
  strcpy(*(char **)__p, "Handles the conversion from a GlobalPoseAnchor to an OriginToPoseAnchor and vice-versa.");
  sub_20E867BF8(v5, v6, 0x1DuLL);
  v7 = (void **)(a1 + 192);
  if ((_BYTE *)(a1 + 192) != __p)
  {
    if (*(char *)(a1 + 215) < 0)
    {
      if (__p[23] >= 0)
        v8 = __p;
      else
        v8 = *(_BYTE **)__p;
      if (__p[23] >= 0)
        v9 = __p[23];
      else
        v9 = *(_QWORD *)&__p[8];
      sub_20E867CBC(v7, v8, v9);
    }
    else if ((__p[23] & 0x80) != 0)
    {
      sub_20E867BF8(v7, *(void **)__p, *(size_t *)&__p[8]);
    }
    else
    {
      *(_OWORD *)v7 = *(_OWORD *)__p;
      *(_QWORD *)(a1 + 208) = *(_QWORD *)&__p[16];
    }
  }
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  operator delete(v6);
  v10 = (char *)operator new(0x20uLL);
  strcpy(v10, "Update Origin Anchors Channel");
  v11 = (char *)operator new(0x40uLL);
  strcpy(v11, "Push the current origin anchors location stored in the map.");
  sub_20E860C04(__p, v10, 0x1DuLL);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)v2);
  *(_OWORD *)v2 = *(_OWORD *)__p;
  *(_QWORD *)(v2 + 16) = *(_QWORD *)&__p[16];
  sub_20E860C04(__p, v11, 0x3BuLL);
  v12 = (void **)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*v12);
  *(_OWORD *)v12 = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)&__p[16];
  operator delete(v11);
  operator delete(v10);
  v13 = (char *)operator new(0x20uLL);
  strcpy(v13, "Global Pose Anchor Output");
  v14 = (char *)operator new(0x38uLL);
  strcpy(v14, "Create an OriginToPoseAnchor given a GlobalPoseAnchor.");
  sub_20E860C04(__p, v13, 0x19uLL);
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)v3);
  *(_OWORD *)v3 = *(_OWORD *)__p;
  *(_QWORD *)(v3 + 16) = *(_QWORD *)&__p[16];
  sub_20E860C04(__p, v14, 0x36uLL);
  v15 = (void **)(a1 + 88);
  if (*(char *)(a1 + 111) < 0)
    operator delete(*v15);
  *(_OWORD *)v15 = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)&__p[16];
  operator delete(v14);
  operator delete(v13);
  v16 = (char *)operator new(0x20uLL);
  strcpy(v16, "Pose To Global Anchor Output");
  v17 = (char *)operator new(0x38uLL);
  strcpy(v17, "Create an GlobalPoseAnchor given a OriginToPoseAnchor.");
  sub_20E860C04(__p, v16, 0x1CuLL);
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)v4);
  *(_OWORD *)v4 = *(_OWORD *)__p;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)&__p[16];
  sub_20E860C04(__p, v17, 0x36uLL);
  v18 = (void **)(a1 + 144);
  if (*(char *)(a1 + 167) < 0)
    operator delete(*v18);
  *(_OWORD *)v18 = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)&__p[16];
  operator delete(v17);
  operator delete(v16);
  return a1;
}

void sub_20F216398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  void *v16;
  void **v17;
  void *v19;

  operator delete(v16);
  v19 = *v17;
  if (*v17)
  {
    *(_QWORD *)(v15 + 224) = v19;
    operator delete(v19);
  }
  sub_20F21642C(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_20F21642C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C9FB280;
  *(_QWORD *)(a1 + 56) = &unk_24C9FB2A8;
  *(_QWORD *)(a1 + 112) = &unk_24C9FB2D0;
  if (*(char *)(a1 + 215) < 0)
  {
    operator delete(*(void **)(a1 + 192));
    if ((*(char *)(a1 + 191) & 0x80000000) == 0)
    {
LABEL_3:
      *(_QWORD *)(a1 + 112) = off_24C9FB348;
      if ((*(char *)(a1 + 167) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(char *)(a1 + 191) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 168));
  *(_QWORD *)(a1 + 112) = off_24C9FB348;
  if ((*(char *)(a1 + 167) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 143) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(*(void **)(a1 + 144));
  if ((*(char *)(a1 + 143) & 0x80000000) == 0)
  {
LABEL_5:
    *(_QWORD *)(a1 + 56) = off_24C9FB320;
    if ((*(char *)(a1 + 111) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(*(void **)(a1 + 120));
  *(_QWORD *)(a1 + 56) = off_24C9FB320;
  if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  operator delete(*(void **)(a1 + 88));
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
LABEL_7:
    *(_QWORD *)a1 = off_24C9FB2F8;
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_8;
LABEL_16:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_17;
  }
LABEL_15:
  operator delete(*(void **)(a1 + 64));
  *(_QWORD *)a1 = off_24C9FB2F8;
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_16;
LABEL_8:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_17:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20F216578(_QWORD *a1, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t *v3;
  char *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  int64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  char *v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  void *v82;
  uint64_t *v83;
  char **v84;

  v84 = (char **)(a1 + 27);
  a1[28] = a1[27];
  v3 = *a2;
  v2 = a2[1];
  if (*a2 != v2)
  {
    v83 = a2[1];
    while (1)
    {
      v12 = *v3;
      v14 = (char *)a1[27];
      v13 = (char *)a1[28];
      v15 = v13 - v14;
      if (v13 == v14)
      {
        v17 = (char *)a1[28];
      }
      else
      {
        v16 = 0xF0F0F0F0F0F0F0F1 * (v15 >> 3);
        v17 = (char *)a1[27];
        do
        {
          v18 = v16 >> 1;
          v19 = (unint64_t *)&v17[136 * (v16 >> 1)];
          v21 = *v19;
          v20 = (char *)(v19 + 17);
          v16 += ~(v16 >> 1);
          if (v21 < v12)
            v17 = v20;
          else
            v16 = v18;
        }
        while (v16);
        if (v13 != v17 && *(_QWORD *)v17 == v12)
          goto LABEL_4;
      }
      v22 = 0xF0F0F0F0F0F0F0F1 * ((v17 - v14) >> 3);
      v23 = a1[29];
      if ((unint64_t)v13 < v23)
      {
        if (v17 == v13)
        {
          *(_QWORD *)v13 = v12;
          v46 = &v14[8 * ((v17 - v14) >> 3)];
          v47 = *(_OWORD *)(v3 + 1);
          v48 = *(_OWORD *)(v3 + 3);
          v49 = *(_OWORD *)(v3 + 5);
          *(_OWORD *)(v46 + 56) = *(_OWORD *)(v3 + 7);
          *(_OWORD *)(v46 + 40) = v49;
          *(_OWORD *)(v46 + 24) = v48;
          *(_OWORD *)(v46 + 8) = v47;
          v50 = *(_OWORD *)(v3 + 9);
          v51 = *(_OWORD *)(v3 + 11);
          v52 = *(_OWORD *)(v3 + 13);
          *(_OWORD *)(v46 + 120) = *(_OWORD *)(v3 + 15);
          *(_OWORD *)(v46 + 104) = v52;
          *(_OWORD *)(v46 + 88) = v51;
          *(_OWORD *)(v46 + 72) = v50;
          a1[28] = v13 + 136;
        }
        else
        {
          v24 = v13 - 136;
          v25 = a1[28];
          v26 = v13 - 136;
          if ((unint64_t)v13 >= 0x88)
          {
            do
            {
              *(_QWORD *)v25 = *(_QWORD *)v26;
              v27 = *(_OWORD *)(v26 + 8);
              v28 = *(_OWORD *)(v26 + 24);
              v29 = *(_OWORD *)(v26 + 40);
              *(_OWORD *)(v25 + 56) = *(_OWORD *)(v26 + 56);
              *(_OWORD *)(v25 + 40) = v29;
              *(_OWORD *)(v25 + 24) = v28;
              *(_OWORD *)(v25 + 8) = v27;
              v30 = *(_OWORD *)(v26 + 72);
              v31 = *(_OWORD *)(v26 + 88);
              v32 = *(_OWORD *)(v26 + 104);
              *(_OWORD *)(v25 + 120) = *(_OWORD *)(v26 + 120);
              *(_OWORD *)(v25 + 104) = v32;
              *(_OWORD *)(v25 + 88) = v31;
              *(_OWORD *)(v25 + 72) = v30;
              v25 += 136;
              v26 += 136;
            }
            while (v26 < v13);
          }
          a1[28] = v25;
          if (v13 != v17 + 136)
          {
            v33 = 8 * ((v13 - (v17 + 136)) >> 3);
            do
            {
              *(_QWORD *)v24 = *(_QWORD *)&v17[v33 - 136];
              v34 = *(_OWORD *)&v17[v33 - 128];
              v35 = *(_OWORD *)&v17[v33 - 112];
              v36 = *(_OWORD *)&v17[v33 - 96];
              *(_OWORD *)(v24 + 56) = *(_OWORD *)&v17[v33 - 80];
              *(_OWORD *)(v24 + 40) = v36;
              *(_OWORD *)(v24 + 24) = v35;
              *(_OWORD *)(v24 + 8) = v34;
              v37 = *(_OWORD *)&v17[v33 - 64];
              v38 = *(_OWORD *)&v17[v33 - 48];
              v39 = *(_OWORD *)&v17[v33 - 32];
              *(_OWORD *)(v24 + 120) = *(_OWORD *)&v17[v33 - 16];
              *(_OWORD *)(v24 + 104) = v39;
              *(_OWORD *)(v24 + 88) = v38;
              *(_OWORD *)(v24 + 72) = v37;
              v24 -= 136;
              v33 -= 136;
            }
            while (v33);
          }
          v40 = v3;
          if (v17 <= (char *)v3)
            v40 = &v3[17 * (a1[28] > (unint64_t)v3)];
          *(_QWORD *)v17 = *v40;
          v5 = &v14[8 * ((v17 - v14) >> 3)];
          v6 = *(_OWORD *)(v40 + 1);
          v7 = *(_OWORD *)(v40 + 3);
          v8 = *(_OWORD *)(v40 + 5);
          *(_OWORD *)(v5 + 56) = *(_OWORD *)(v40 + 7);
          *(_OWORD *)(v5 + 40) = v8;
          *(_OWORD *)(v5 + 24) = v7;
          *(_OWORD *)(v5 + 8) = v6;
          v9 = *(_OWORD *)(v40 + 9);
          v10 = *(_OWORD *)(v40 + 11);
          v11 = *(_OWORD *)(v40 + 13);
          *(_OWORD *)(v5 + 120) = *(_OWORD *)(v40 + 15);
          *(_OWORD *)(v5 + 104) = v11;
          *(_OWORD *)(v5 + 88) = v10;
          *(_OWORD *)(v5 + 72) = v9;
        }
        goto LABEL_4;
      }
      v41 = 0xF0F0F0F0F0F0F0F1 * (v15 >> 3) + 1;
      if (v41 > 0x1E1E1E1E1E1E1E1)
        sub_20EABADD4();
      if (0xE1E1E1E1E1E1E1E2 * ((uint64_t)(v23 - (_QWORD)v14) >> 3) > v41)
        v41 = 0xE1E1E1E1E1E1E1E2 * ((uint64_t)(v23 - (_QWORD)v14) >> 3);
      v42 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v23 - (_QWORD)v14) >> 3) >= 0xF0F0F0F0F0F0F0 ? 0x1E1E1E1E1E1E1E1 : v41;
      if (!v42)
        break;
      if (v42 > 0x1E1E1E1E1E1E1E1)
        sub_20E877A38();
      v43 = (char *)operator new(136 * v42);
      v22 = 0xF0F0F0F0F0F0F0F1 * ((v17 - v14) >> 3);
      v44 = (uint64_t)&v43[8 * ((v17 - v14) >> 3)];
      v45 = &v43[136 * v42];
      if (v22 == v42)
        goto LABEL_36;
LABEL_47:
      *(_QWORD *)v44 = v12;
      v58 = *(_OWORD *)(v3 + 1);
      v59 = *(_OWORD *)(v3 + 3);
      v60 = *(_OWORD *)(v3 + 5);
      *(_OWORD *)(v44 + 56) = *(_OWORD *)(v3 + 7);
      *(_OWORD *)(v44 + 40) = v60;
      *(_OWORD *)(v44 + 24) = v59;
      *(_OWORD *)(v44 + 8) = v58;
      v61 = *(_OWORD *)(v3 + 9);
      v62 = *(_OWORD *)(v3 + 11);
      v63 = *(_OWORD *)(v3 + 13);
      *(_OWORD *)(v44 + 120) = *(_OWORD *)(v3 + 15);
      *(_OWORD *)(v44 + 104) = v63;
      *(_OWORD *)(v44 + 88) = v62;
      *(_OWORD *)(v44 + 72) = v61;
      v64 = *v84;
      v65 = v44;
      if (*v84 != v17)
      {
        v66 = v17;
        v65 = v44;
        do
        {
          v67 = *((_QWORD *)v66 - 17);
          v66 -= 136;
          *(_QWORD *)(v65 - 136) = v67;
          v65 -= 136;
          v68 = *(_OWORD *)(v66 + 8);
          v69 = *(_OWORD *)(v66 + 24);
          v70 = *(_OWORD *)(v66 + 40);
          *(_OWORD *)(v65 + 56) = *(_OWORD *)(v66 + 56);
          *(_OWORD *)(v65 + 40) = v70;
          *(_OWORD *)(v65 + 24) = v69;
          *(_OWORD *)(v65 + 8) = v68;
          v71 = *(_OWORD *)(v66 + 72);
          v72 = *(_OWORD *)(v66 + 88);
          v73 = *(_OWORD *)(v66 + 104);
          *(_OWORD *)(v65 + 120) = *(_OWORD *)(v66 + 120);
          *(_OWORD *)(v65 + 104) = v73;
          *(_OWORD *)(v65 + 88) = v72;
          *(_OWORD *)(v65 + 72) = v71;
        }
        while (v66 != v64);
      }
      v74 = v44 + 136;
      v75 = (char *)a1[28];
      if (v75 != v17)
      {
        v2 = v83;
        do
        {
          *(_QWORD *)v74 = *(_QWORD *)v17;
          v76 = *(_OWORD *)(v17 + 8);
          v77 = *(_OWORD *)(v17 + 24);
          v78 = *(_OWORD *)(v17 + 40);
          *(_OWORD *)(v74 + 56) = *(_OWORD *)(v17 + 56);
          *(_OWORD *)(v74 + 40) = v78;
          *(_OWORD *)(v74 + 24) = v77;
          *(_OWORD *)(v74 + 8) = v76;
          v79 = *(_OWORD *)(v17 + 72);
          v80 = *(_OWORD *)(v17 + 88);
          v81 = *(_OWORD *)(v17 + 104);
          *(_OWORD *)(v74 + 120) = *(_OWORD *)(v17 + 120);
          *(_OWORD *)(v74 + 104) = v81;
          *(_OWORD *)(v74 + 88) = v80;
          *(_OWORD *)(v74 + 72) = v79;
          v74 += 136;
          v17 += 136;
        }
        while (v17 != v75);
        v82 = (void *)a1[27];
        a1[27] = v65;
        a1[28] = v74;
        a1[29] = v45;
        if (!v82)
          goto LABEL_4;
LABEL_56:
        operator delete(v82);
        goto LABEL_4;
      }
      v2 = v83;
      v82 = (void *)a1[27];
      a1[27] = v65;
      a1[28] = v74;
      a1[29] = v45;
      if (v82)
        goto LABEL_56;
LABEL_4:
      v3 += 17;
      if (v3 == v2)
        return;
    }
    v43 = 0;
    v44 = 8 * ((v17 - v14) >> 3);
    v45 = 0;
    if (v22)
      goto LABEL_47;
LABEL_36:
    if (v17 - v14 < 1)
    {
      if (v17 == v14)
        v55 = 1;
      else
        v55 = 2 * v22;
      if (v55 > 0x1E1E1E1E1E1E1E1)
        sub_20E877A38();
      v56 = (char *)operator new(136 * v55);
      v44 = (uint64_t)&v56[136 * (v55 >> 2)];
      v45 = &v56[136 * v55];
      if (v43)
      {
        v57 = &v56[136 * v55];
        operator delete(v43);
        v45 = v57;
        v12 = *v3;
      }
    }
    else
    {
      v53 = 0xF0F0F0F0F0F0F0F1 * ((v44 - (uint64_t)v43) >> 3);
      if (v53 >= -1)
        v54 = v53 + 1;
      else
        v54 = v53 + 2;
      v44 -= 136 * (v54 >> 1);
    }
    goto LABEL_47;
  }
}

void sub_20F216AA8(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F216AC4@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  float64x2_t v13;
  double v14;
  float64x2_t v15;
  float64x2_t v17;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;

  v3 = *a2;
  v4 = *(_QWORD **)(result + 216);
  v5 = *(_QWORD **)(result + 224);
  if (v5 != v4)
  {
    v6 = 0xF0F0F0F0F0F0F0F1 * (v5 - v4);
    do
    {
      v7 = v6 >> 1;
      v8 = &v4[17 * (v6 >> 1)];
      v10 = *v8;
      v9 = v8 + 17;
      v6 += ~(v6 >> 1);
      if (v10 < v3)
        v4 = v9;
      else
        v6 = v7;
    }
    while (v6);
  }
  if (v5 == v4 || *v4 != v3)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 160) = 0;
  }
  else
  {
    v11 = a2[3];
    _Q7.f64[0] = (float64_t)v4[3];
    v13 = *(float64x2_t *)(v4 + 1);
    v14 = *((double *)v4 + 7);
    v15 = *(float64x2_t *)(v4 + 5);
    _D2 = *((double *)v4 + 11);
    v17 = *(float64x2_t *)(v4 + 9);
    _D16 = *((double *)v4 + 15);
    _Q18 = *(float64x2_t *)(v4 + 13);
    v21 = *((float64x2_t *)a2 + 2);
    v20 = *((float64x2_t *)a2 + 3);
    v22 = vmulq_n_f64(v21, _Q7.f64[0]);
    v23 = vmulq_n_f64(v20, _Q7.f64[0]);
    _Q7.f64[1] = v14;
    v24 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v13, (int64x2_t)v15), vnegq_f64(_Q18).f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v13, (int64x2_t)v15), _Q18, 1), _Q7, _D16, 0);
    _D19 = v4[10];
    __asm
    {
      FMLS            D7, D19, V18.D[1]
      FMLS            D7, D2, V16.D[0]
    }
    v31 = *((float64x2_t *)a2 + 4);
    v30 = *((float64x2_t *)a2 + 5);
    v33 = *((float64x2_t *)a2 + 6);
    v32 = *((float64x2_t *)a2 + 7);
    v35 = *((float64x2_t *)a2 + 8);
    v34 = *((float64x2_t *)a2 + 9);
    *(_QWORD *)a3 = v3;
    *(_OWORD *)(a3 + 8) = *(_OWORD *)(a2 + 1);
    *(_QWORD *)(a3 + 24) = v11;
    *(float64x2_t *)(a3 + 32) = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v21, v13.f64[0]), v31, v15.f64[0]), v33, v17.f64[0]), (float64x2_t)0, v35);
    *(float64x2_t *)(a3 + 48) = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v20, v13.f64[0]), v30, v15.f64[0]), v32, v17.f64[0]), (float64x2_t)0, v34);
    *(float64x2_t *)(a3 + 64) = vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v21, v13, 1), v31, v15, 1), v33, v17, 1), (float64x2_t)0, v35);
    *(float64x2_t *)(a3 + 80) = vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v20, v13, 1), v30, v15, 1), v32, v17, 1), (float64x2_t)0, v34);
    *(float64x2_t *)(a3 + 96) = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v22, v31, v14), v33, _D2), (float64x2_t)0, v35);
    *(float64x2_t *)(a3 + 112) = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v23, v30, v14), v32, _D2), (float64x2_t)0, v34);
    *(float64x2_t *)(a3 + 128) = vaddq_f64(v35, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v21, v24.f64[0]), v31, v24, 1), v33, _Q7.f64[0]));
    *(float64x2_t *)(a3 + 144) = vaddq_f64(v34, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v20, v24.f64[0]), v30, v24, 1), v32, _Q7.f64[0]));
    *(_BYTE *)(a3 + 160) = 1;
  }
  return result;
}

uint64_t sub_20F216C3C@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  float64x2_t v13;
  double v14;
  float64x2_t v15;
  float64x2_t v17;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;

  v3 = *a2;
  v4 = *(_QWORD **)(result + 160);
  v5 = *(_QWORD **)(result + 168);
  if (v5 != v4)
  {
    v6 = 0xF0F0F0F0F0F0F0F1 * (v5 - v4);
    do
    {
      v7 = v6 >> 1;
      v8 = &v4[17 * (v6 >> 1)];
      v10 = *v8;
      v9 = v8 + 17;
      v6 += ~(v6 >> 1);
      if (v10 < v3)
        v4 = v9;
      else
        v6 = v7;
    }
    while (v6);
  }
  if (v5 == v4 || *v4 != v3)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 160) = 0;
  }
  else
  {
    v11 = a2[3];
    _Q7.f64[0] = (float64_t)v4[3];
    v13 = *(float64x2_t *)(v4 + 1);
    v14 = *((double *)v4 + 7);
    v15 = *(float64x2_t *)(v4 + 5);
    _D2 = *((double *)v4 + 11);
    v17 = *(float64x2_t *)(v4 + 9);
    _D16 = *((double *)v4 + 15);
    _Q18 = *(float64x2_t *)(v4 + 13);
    v21 = *((float64x2_t *)a2 + 2);
    v20 = *((float64x2_t *)a2 + 3);
    v22 = vmulq_n_f64(v21, _Q7.f64[0]);
    v23 = vmulq_n_f64(v20, _Q7.f64[0]);
    _Q7.f64[1] = v14;
    v24 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v13, (int64x2_t)v15), vnegq_f64(_Q18).f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v13, (int64x2_t)v15), _Q18, 1), _Q7, _D16, 0);
    _D19 = v4[10];
    __asm
    {
      FMLS            D7, D19, V18.D[1]
      FMLS            D7, D2, V16.D[0]
    }
    v31 = *((float64x2_t *)a2 + 4);
    v30 = *((float64x2_t *)a2 + 5);
    v33 = *((float64x2_t *)a2 + 6);
    v32 = *((float64x2_t *)a2 + 7);
    v35 = *((float64x2_t *)a2 + 8);
    v34 = *((float64x2_t *)a2 + 9);
    *(_QWORD *)a3 = v3;
    *(_OWORD *)(a3 + 8) = *(_OWORD *)(a2 + 1);
    *(_QWORD *)(a3 + 24) = v11;
    *(float64x2_t *)(a3 + 32) = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v21, v13.f64[0]), v31, v15.f64[0]), v33, v17.f64[0]), (float64x2_t)0, v35);
    *(float64x2_t *)(a3 + 48) = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v20, v13.f64[0]), v30, v15.f64[0]), v32, v17.f64[0]), (float64x2_t)0, v34);
    *(float64x2_t *)(a3 + 64) = vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v21, v13, 1), v31, v15, 1), v33, v17, 1), (float64x2_t)0, v35);
    *(float64x2_t *)(a3 + 80) = vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v20, v13, 1), v30, v15, 1), v32, v17, 1), (float64x2_t)0, v34);
    *(float64x2_t *)(a3 + 96) = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v22, v31, v14), v33, _D2), (float64x2_t)0, v35);
    *(float64x2_t *)(a3 + 112) = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v23, v30, v14), v32, _D2), (float64x2_t)0, v34);
    *(float64x2_t *)(a3 + 128) = vaddq_f64(v35, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v21, v24.f64[0]), v31, v24, 1), v33, _Q7.f64[0]));
    *(float64x2_t *)(a3 + 144) = vaddq_f64(v34, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v20, v24.f64[0]), v30, v24, 1), v32, _Q7.f64[0]));
    *(_BYTE *)(a3 + 160) = 1;
  }
  return result;
}

uint64_t sub_20F216DB4@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;

  v3 = *a2;
  v4 = *(_QWORD **)(result + 216);
  v5 = *(_QWORD **)(result + 224);
  if (v5 != v4)
  {
    v6 = 0xF0F0F0F0F0F0F0F1 * (v5 - v4);
    do
    {
      v7 = v6 >> 1;
      v8 = &v4[17 * (v6 >> 1)];
      v10 = *v8;
      v9 = v8 + 17;
      v6 += ~(v6 >> 1);
      if (v10 < v3)
        v4 = v9;
      else
        v6 = v7;
    }
    while (v6);
  }
  if (v5 == v4 || *v4 != v3)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 160) = 0;
  }
  else
  {
    v11 = a2[3];
    v13 = *((float64x2_t *)a2 + 2);
    v12 = *((float64x2_t *)a2 + 3);
    v15 = *((float64x2_t *)a2 + 4);
    v14 = *((float64x2_t *)a2 + 5);
    v17 = *((float64x2_t *)a2 + 6);
    v16 = *((float64x2_t *)a2 + 7);
    v19 = *((float64x2_t *)a2 + 8);
    v18 = *((float64x2_t *)a2 + 9);
    v20 = *(float64x2_t *)(v4 + 3);
    v21 = *(float64x2_t *)(v4 + 1);
    v22 = *(float64x2_t *)(v4 + 7);
    v23 = *(float64x2_t *)(v4 + 5);
    v24 = *(float64x2_t *)(v4 + 11);
    v25 = *(float64x2_t *)(v4 + 9);
    v26 = *(float64x2_t *)(v4 + 15);
    v27 = *(float64x2_t *)(v4 + 13);
    *(_QWORD *)a3 = v3;
    *(_OWORD *)(a3 + 8) = *(_OWORD *)(a2 + 1);
    *(_QWORD *)(a3 + 24) = v11;
    *(float64x2_t *)(a3 + 32) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v13, v21.f64[0]), v15, v21, 1), v17, v20.f64[0]), v19, v20, 1);
    *(float64x2_t *)(a3 + 48) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v12, v21.f64[0]), v14, v21, 1), v16, v20.f64[0]), v18, v20, 1);
    *(float64x2_t *)(a3 + 64) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v13, v23.f64[0]), v15, v23, 1), v17, v22.f64[0]), v19, v22, 1);
    *(float64x2_t *)(a3 + 80) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v12, v23.f64[0]), v14, v23, 1), v16, v22.f64[0]), v18, v22, 1);
    *(float64x2_t *)(a3 + 96) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v13, v25.f64[0]), v15, v25, 1), v17, v24.f64[0]), v19, v24, 1);
    *(float64x2_t *)(a3 + 112) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v12, v25.f64[0]), v14, v25, 1), v16, v24.f64[0]), v18, v24, 1);
    *(float64x2_t *)(a3 + 128) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v13, v27.f64[0]), v15, v27, 1), v17, v26.f64[0]), v19, v26, 1);
    *(float64x2_t *)(a3 + 144) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v12, v27.f64[0]), v14, v27, 1), v16, v26.f64[0]), v18, v26, 1);
    *(_BYTE *)(a3 + 160) = 1;
  }
  return result;
}

uint64_t sub_20F216EFC@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;

  v3 = *a2;
  v4 = *(_QWORD **)(result + 104);
  v5 = *(_QWORD **)(result + 112);
  if (v5 != v4)
  {
    v6 = 0xF0F0F0F0F0F0F0F1 * (v5 - v4);
    do
    {
      v7 = v6 >> 1;
      v8 = &v4[17 * (v6 >> 1)];
      v10 = *v8;
      v9 = v8 + 17;
      v6 += ~(v6 >> 1);
      if (v10 < v3)
        v4 = v9;
      else
        v6 = v7;
    }
    while (v6);
  }
  if (v5 == v4 || *v4 != v3)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 160) = 0;
  }
  else
  {
    v11 = a2[3];
    v13 = *((float64x2_t *)a2 + 2);
    v12 = *((float64x2_t *)a2 + 3);
    v15 = *((float64x2_t *)a2 + 4);
    v14 = *((float64x2_t *)a2 + 5);
    v17 = *((float64x2_t *)a2 + 6);
    v16 = *((float64x2_t *)a2 + 7);
    v19 = *((float64x2_t *)a2 + 8);
    v18 = *((float64x2_t *)a2 + 9);
    v20 = *(float64x2_t *)(v4 + 3);
    v21 = *(float64x2_t *)(v4 + 1);
    v22 = *(float64x2_t *)(v4 + 7);
    v23 = *(float64x2_t *)(v4 + 5);
    v24 = *(float64x2_t *)(v4 + 11);
    v25 = *(float64x2_t *)(v4 + 9);
    v26 = *(float64x2_t *)(v4 + 15);
    v27 = *(float64x2_t *)(v4 + 13);
    *(_QWORD *)a3 = v3;
    *(_OWORD *)(a3 + 8) = *(_OWORD *)(a2 + 1);
    *(_QWORD *)(a3 + 24) = v11;
    *(float64x2_t *)(a3 + 32) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v13, v21.f64[0]), v15, v21, 1), v17, v20.f64[0]), v19, v20, 1);
    *(float64x2_t *)(a3 + 48) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v12, v21.f64[0]), v14, v21, 1), v16, v20.f64[0]), v18, v20, 1);
    *(float64x2_t *)(a3 + 64) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v13, v23.f64[0]), v15, v23, 1), v17, v22.f64[0]), v19, v22, 1);
    *(float64x2_t *)(a3 + 80) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v12, v23.f64[0]), v14, v23, 1), v16, v22.f64[0]), v18, v22, 1);
    *(float64x2_t *)(a3 + 96) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v13, v25.f64[0]), v15, v25, 1), v17, v24.f64[0]), v19, v24, 1);
    *(float64x2_t *)(a3 + 112) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v12, v25.f64[0]), v14, v25, 1), v16, v24.f64[0]), v18, v24, 1);
    *(float64x2_t *)(a3 + 128) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v13, v27.f64[0]), v15, v27, 1), v17, v26.f64[0]), v19, v26, 1);
    *(float64x2_t *)(a3 + 144) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v12, v27.f64[0]), v14, v27, 1), v16, v26.f64[0]), v18, v26, 1);
    *(_BYTE *)(a3 + 160) = 1;
  }
  return result;
}

uint64_t sub_20F217044(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24C9FB168;
  a1[7] = &unk_24C9FB1A0;
  a1[14] = &unk_24C9FB1C8;
  v2 = (void *)a1[27];
  if (v2)
  {
    a1[28] = v2;
    operator delete(v2);
  }
  return sub_20F21642C((uint64_t)a1);
}

void sub_20F217090(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24C9FB168;
  a1[7] = &unk_24C9FB1A0;
  a1[14] = &unk_24C9FB1C8;
  v2 = (void *)a1[27];
  if (v2)
  {
    a1[28] = v2;
    operator delete(v2);
  }
  sub_20F21642C((uint64_t)a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F2170F0(_QWORD *a1)
{
  uint64_t v1;
  void *v2;

  *(a1 - 7) = &off_24C9FB168;
  v1 = (uint64_t)(a1 - 7);
  *a1 = &unk_24C9FB1A0;
  a1[7] = &unk_24C9FB1C8;
  v2 = (void *)a1[20];
  if (v2)
  {
    a1[21] = v2;
    operator delete(v2);
  }
  return sub_20F21642C(v1);
}

void sub_20F217140(_QWORD *a1)
{
  uint64_t v1;
  void *v2;

  *(a1 - 7) = &off_24C9FB168;
  v1 = (uint64_t)(a1 - 7);
  *a1 = &unk_24C9FB1A0;
  a1[7] = &unk_24C9FB1C8;
  v2 = (void *)a1[20];
  if (v2)
  {
    a1[21] = v2;
    operator delete(v2);
  }
  sub_20F21642C(v1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F2171A4(_QWORD *a1)
{
  uint64_t v1;
  void *v2;

  *(a1 - 14) = &off_24C9FB168;
  v1 = (uint64_t)(a1 - 14);
  *(a1 - 7) = &unk_24C9FB1A0;
  *a1 = &unk_24C9FB1C8;
  v2 = (void *)a1[13];
  if (v2)
  {
    a1[14] = v2;
    operator delete(v2);
  }
  return sub_20F21642C(v1);
}

void sub_20F2171F4(_QWORD *a1)
{
  uint64_t v1;
  void *v2;

  *(a1 - 14) = &off_24C9FB168;
  v1 = (uint64_t)(a1 - 14);
  *(a1 - 7) = &unk_24C9FB1A0;
  *a1 = &unk_24C9FB1C8;
  v2 = (void *)a1[13];
  if (v2)
  {
    a1[14] = v2;
    operator delete(v2);
  }
  sub_20F21642C(v1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F217288@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *__p;
  __int128 v23;

  __p = operator new(0x28uLL);
  v23 = xmmword_2102DC910;
  strcpy((char *)__p, "CollaborativeMappingConfig parameters");
  sub_20E8B30B4(a2, (__int128 *)&__p, 180, 160);
  if (SHIBYTE(v23) < 0)
    operator delete(__p);
  __p = (void *)nullsub_1(a2);
  v4 = sub_20EA9DB90((double *)a1);
  sub_20E8B2F9C((uint64_t *)&__p, "CollaborativeMappingConfig.state_to_state_inv_cov_sigma", v4, "State to state inverse covariance sigma. This is temporary solution for tunign the covariance between states.");
  __p = (void *)nullsub_1(a2);
  v5 = sub_20EA9DB90((double *)(a1 + 8));
  sub_20E8B2F9C((uint64_t *)&__p, "CollaborativeMappingConfig.max_allowed_angle_change_in_deg_to_accept_relocalization_in_pose_graph", v5, "Maximum allowed angle change in relocalization to be accepted as a map constraint in pose-graph.");
  __p = (void *)nullsub_1(a2);
  v6 = sub_20EA9DB90((double *)(a1 + 16));
  sub_20E8B2F9C((uint64_t *)&__p, "CollaborativeMappingConfig.max_allowed_translation_change_to_accept_relocalization_in_pose_graph", v6, "Maximum allowed translation change in relocalization to be accepted as a map constraint in pose-graph [In meters].");
  __p = (void *)nullsub_1(a2);
  v7 = sub_20EA9DCF0((unsigned int *)(a1 + 24));
  sub_20E8B2F9C((uint64_t *)&__p, "CollaborativeMappingConfig.min_num_2D_3D_inliers_to_accept_relocalization_in_pose_graph", v7, "Minimum number of inlier matches to accept this re-localization as a valid map-constraints in pose-graph.");
  __p = (void *)nullsub_1(a2);
  v8 = sub_20EA9DB90((double *)(a1 + 32));
  sub_20E8B2F9C((uint64_t *)&__p, "CollaborativeMappingConfig.overlap_ratio_for_covisible_keyframe", v8, "FOV overlap ratio to be consider covisible. The large the more likely to be considered as overlap.");
  __p = (void *)nullsub_1(a2);
  v9 = sub_20EA9DB90((double *)(a1 + 40));
  sub_20E8B2F9C((uint64_t *)&__p, "CollaborativeMappingConfig.max_image_retrieval_distance_sq_for_external_relocalization", v9, "Maximum allowed image retrieval threshold for relocalization.");
  __p = (void *)nullsub_1(a2);
  v10 = sub_20EA9DB90((double *)(a1 + 48));
  sub_20E8B2F9C((uint64_t *)&__p, "CollaborativeMappingConfig.max_diag_info_for_considering_as_vision_relocalization", v10, "Maximum allowed inverse covariance (information) of a relocalization to be considered as vision relocalization.");
  __p = (void *)nullsub_1(a2);
  v11 = sub_20EA9DB90((double *)(a1 + 56));
  sub_20E8B2F9C((uint64_t *)&__p, "CollaborativeMappingConfig.range_based_state_to_state_inv_cov", v11, "State to state inverse covariance for range based re-localization. Set it to very small to make it very uncertain.");
  __p = (void *)nullsub_1(a2);
  v12 = sub_20EAA14D8((_BYTE *)(a1 + 64));
  sub_20E8B2F9C((uint64_t *)&__p, "CollaborativeMappingConfig.transmit_external_keyframes", v12, "Flag to determine whether to transmit external-keyframes when sharing MapData.");
  __p = (void *)nullsub_1(a2);
  v13 = sub_20EAA14D8((_BYTE *)(a1 + 65));
  __p = (void *)nullsub_1(a2);
  v14 = sub_20EAA14D8((_BYTE *)(a1 + 66));
  sub_20E8B2F9C((uint64_t *)&__p, "CollaborativeMappingConfig.promote_weak_keyframe_to_regular_during_map_merging", v14, "Flag to determine whether to promote weak keyframes to regular keyframes during initial Map merging period.");
  __p = (void *)nullsub_1(a2);
  v15 = sub_20EAA14D8((_BYTE *)(a1 + 67));
  sub_20E8B2F9C((uint64_t *)&__p, "CollaborativeMappingConfig.compute_keyframe_to_keyframe_relocalization_uncertainity", v15, "Flag to compute the relocalization uncertainty during re-localization.");
  __p = (void *)nullsub_1(a2);
  v16 = sub_20EAA14D8((_BYTE *)(a1 + 68));
  sub_20E8B2F9C((uint64_t *)&__p, "CollaborativeMappingConfig.enable_self_to_self_relocalization", v16, "Flag to enable self to self relocalization.");
  __p = (void *)nullsub_1(a2);
  v17 = sub_20EA9DCF0((unsigned int *)(a1 + 72));
  sub_20E8B2F9C((uint64_t *)&__p, "CollaborativeMappingConfig.min_num_inlier_landmark_with_covariance_for_relocalization", v17, "Minimum number of inlier landmarks with a covriance for relocalization.");
  __p = (void *)nullsub_1(a2);
  v18 = sub_20EA9DCF0((unsigned int *)(a1 + 104));
  sub_20E8B2F9C((uint64_t *)&__p, "CollaborativeMappingConfig.anchor_strategy", v18, "Anchor strategy for object anchor in CM.");
  __p = (void *)nullsub_1(a2);
  v19 = sub_20EA9DCF0((unsigned int *)(a1 + 108));
  sub_20E8B2F9C((uint64_t *)&__p, "CollaborativeMappingConfig.origin_anchor_strategy", v19, "Anchor strategy for origin anchor in CM.");
  __p = (void *)nullsub_1(a2);
  v20 = sub_20EAA14D8((_BYTE *)(a1 + 76));
  sub_20E8B2F9C((uint64_t *)&__p, "CollaborativeMappingConfig.persist_cm_submaps", v20, "Flag to enable/disable preservation of CM maps across sessions.");
  sub_20F237C08(a1 + 80, &__p);
  sub_20E8B32F0(a2, (uint64_t)&__p);
  return sub_20E869298((uint64_t)&__p);
}

void sub_20F217658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  sub_20E869298((uint64_t)&__p);
  sub_20E869298(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_20F217720(uint64_t a1, uint64_t a2)
{
  void **v3;
  char *v4;
  char *v5;
  void **v6;
  void **v7;
  char *v8;
  void **v9;
  __int128 __dst;
  uint64_t v12;

  *(_OWORD *)(a1 + 8) = 0u;
  v3 = (void **)(a1 + 8);
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)a1 = off_24C9FB370;
  sub_20E96A108(a1 + 104, a2);
  v4 = (char *)operator new(0x20uLL);
  strcpy(v4, "CMDataDeserializationNode");
  v5 = (char *)operator new(0x28uLL);
  strcpy(v5, "Instance for CM data deserialization");
  v6 = (void **)(a1 + 56);
  if (*(char *)(a1 + 79) < 0)
    sub_20E867CBC(v6, v4, 0x19uLL);
  else
    sub_20E867BF8(v6, v4, 0x19uLL);
  v7 = (void **)(a1 + 80);
  if (*(char *)(a1 + 103) < 0)
    sub_20E867CBC(v7, v5, 0x24uLL);
  else
    sub_20E867BF8(v7, v5, 0x24uLL);
  operator delete(v5);
  operator delete(v4);
  v8 = (char *)operator new(0x28uLL);
  strcpy(v8, "Input channels for data deserialization");
  if (*(char *)(a1 + 31) < 0)
    operator delete(*v3);
  strcpy((char *)(a1 + 8), "CMData Input");
  *(_BYTE *)(a1 + 21) = 0;
  *(_WORD *)(a1 + 22) = 0;
  *(_BYTE *)(a1 + 31) = 12;
  sub_20E860C04(&__dst, v8, 0x27uLL);
  v9 = (void **)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*v9);
  *(_OWORD *)v9 = __dst;
  *(_QWORD *)(a1 + 48) = v12;
  operator delete(v8);
  return a1;
}

void sub_20F2178DC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  operator delete(v3);
  sub_20E8C25A8(v2);
  sub_20F217948(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20F217948(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C9FB3D8;
  if (*(char *)(a1 + 103) < 0)
  {
    operator delete(*(void **)(a1 + 80));
    if ((*(char *)(a1 + 79) & 0x80000000) == 0)
    {
LABEL_3:
      *(_QWORD *)a1 = off_24C9FB400;
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
        goto LABEL_4;
LABEL_8:
      operator delete(*(void **)(a1 + 32));
      if ((*(char *)(a1 + 31) & 0x80000000) == 0)
        return a1;
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 56));
  *(_QWORD *)a1 = off_24C9FB400;
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_8;
LABEL_4:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_9:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20F2179F4(NSObject *a1@<X0>, CFDataRef **a2@<X1>, _BYTE *a3@<X8>)
{
  std::__shared_weak_count *v6;
  CFDataRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int Length;
  int v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  Class isa;
  size_t v18;
  const char *v19;
  unsigned __int8 v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  const char *v25;
  unsigned __int8 v26;
  const char *v27;
  size_t v28;
  __int128 *v29;
  unint64_t v30;
  const char *v31;
  objc_class *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  size_t v40;
  std::__shared_weak_count_vtbl *v41;
  std::__shared_weak_count *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  void *v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  unsigned __int8 v75;
  const char *v76;
  size_t v77;
  __int128 *v78;
  unint64_t v79;
  const char *v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  void **v84;
  uint64_t v85;
  uint64_t v86;
  NSObject *v87;
  size_t v88;
  NSObject *v89;
  std::__shared_weak_count *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  os_log_t v95;
  _DWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  void *v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  int v127;
  _QWORD v128[3];
  int v129;
  const char *v130;
  int v131;
  const char *v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  void *object;
  __int128 v144;
  __int128 v145;
  void *__p[2];
  unint64_t v147;
  char v148;
  int v149;
  char v150;
  os_log_t v151;
  __int128 v152;
  __int128 v153;
  void **v154;
  const char *v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  uint64_t v158;

  v158 = *MEMORY[0x24BDAC8D0];
  v7 = **a2;
  v6 = (std::__shared_weak_count *)(*a2)[1];
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (v10)
  {
LABEL_6:
    if (v7)
      goto LABEL_7;
LABEL_12:
    sub_20F218B3C(&v142);
    if (**(int **)(v142 + 56) > 3
      || ((v13 = *(unsigned __int8 *)(v142 + 72),
           v14 = sub_20E8C31DC(v142, "OSLogSurrogateAppender", 1, 0),
           v15 = v14,
           !v13)
        ? (v16 = v14 == 0)
        : (v16 = 0),
          v16))
    {
LABEL_107:
      *a3 = 0;
      a3[16] = 0;
      return;
    }
    v151 = (os_log_t)&v142;
    *(std::chrono::steady_clock::time_point *)&v152 = std::chrono::steady_clock::now();
    *((std::chrono::system_clock::time_point *)&v152 + 1) = std::chrono::system_clock::now();
    LODWORD(v153) = 3;
    *((_QWORD *)&v153 + 1) = "unknown file";
    LODWORD(v154) = 82;
    v156 = 0;
    v157 = 0;
    v155 = "unknown function";
    isa = v151->isa;
    if (*((char *)v151->isa + 39) < 0)
    {
      v19 = (const char *)*((_QWORD *)isa + 2);
      v18 = *((_QWORD *)isa + 3);
      v126 = (char *)isa + 16;
      v26 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v26 & 1) != 0)
        goto LABEL_26;
    }
    else
    {
      v18 = *((unsigned __int8 *)v151->isa + 39);
      v19 = (char *)isa + 16;
      v126 = (char *)isa + 16;
      v20 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v20 & 1) != 0)
        goto LABEL_26;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
      if ((_BYTE)v145 && SHIBYTE(v144) < 0)
        operator delete(object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_26:
    if (byte_254A4A4F8[23] >= 0)
      v27 = byte_254A4A4F8;
    else
      v27 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v28 = byte_254A4A4F8[23];
    else
      v28 = *(_QWORD *)&byte_254A4A4F8[8];
    object = os_log_create(v27, v19);
    v29 = &v144;
    if (v28 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v28 >= 0x17)
    {
      v30 = v15;
      v31 = v19;
      v32 = isa;
      v33 = v13;
      v34 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v28 | 7) != 0x17)
        v34 = v28 | 7;
      v35 = v34 + 1;
      v29 = (__int128 *)operator new(v34 + 1);
      *((_QWORD *)&v144 + 1) = v28;
      *(_QWORD *)&v145 = v35 | 0x8000000000000000;
      *(_QWORD *)&v144 = v29;
      v13 = v33;
      isa = v32;
      v19 = v31;
      v15 = v30;
    }
    else
    {
      BYTE7(v145) = v28;
      if (!v28)
      {
LABEL_40:
        *((_BYTE *)v29 + v28) = 0;
        BYTE8(v145) = 1;
        v36 = __p;
        if (v18 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v18 >= 0x17)
        {
          v37 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v18 | 7) != 0x17)
            v37 = v18 | 7;
          v38 = v37 + 1;
          v36 = operator new(v37 + 1);
          __p[1] = (void *)v18;
          v147 = v38 | 0x8000000000000000;
          __p[0] = v36;
        }
        else
        {
          HIBYTE(v147) = v18;
          if (!v18)
            goto LABEL_48;
        }
        memmove(v36, v19, v18);
LABEL_48:
        *((_BYTE *)v36 + v18) = 0;
        v148 = 1;
        v39 = object;
        if (SHIBYTE(v147) < 0)
          operator delete(__p[0]);
        if (BYTE8(v145) && SBYTE7(v145) < 0)
          operator delete((void *)v144);
        if (object)
          os_release(object);
        if (v15 && *(_QWORD *)(v15 + 24))
        {
          v40 = _os_log_pack_size();
          v41 = (std::__shared_weak_count_vtbl *)operator new(v40, (std::align_val_t)8uLL);
          v42 = (std::__shared_weak_count *)operator new();
          v43 = v42;
          v42->__shared_owners_ = 0;
          v44 = (unint64_t *)&v42->__shared_owners_;
          v42->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v42->__shared_weak_owners_ = 0;
          v42[1].__vftable = v41;
          object = v41;
          *(_QWORD *)&v144 = v41;
          *((_QWORD *)&v144 + 1) = v42;
          do
            v45 = __ldxr(v44);
          while (__stxr(v45 + 1, v44));
          v145 = 0uLL;
          __p[0] = 0;
          do
            v46 = __ldaxr(v44);
          while (__stlxr(v46 - 1, v44));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v43);
          }
          v47 = object;
          *(_WORD *)_os_log_pack_fill() = 0;
          v48 = operator new();
          v49 = *((unsigned __int8 *)isa + 39);
          v50 = v126;
          if ((v49 & 0x80u) != 0)
          {
            v50 = (char *)*((_QWORD *)isa + 2);
            v49 = *((_QWORD *)isa + 3);
          }
          *(_QWORD *)v48 = v47;
          *(_OWORD *)(v48 + 8) = v144;
          v144 = 0uLL;
          *(_OWORD *)(v48 + 24) = v145;
          v145 = 0uLL;
          *(_QWORD *)(v48 + 40) = v50;
          *(_QWORD *)(v48 + 48) = v49;
          *(_BYTE *)(v48 + 56) = 1;
          v136 = 0;
          v128[0] = v48;
          (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v15 + 24) + 40))(*(_QWORD *)(v15 + 24), v128);
          v51 = v128[0];
          v128[0] = 0;
          if (v51)
          {
            v52 = *(std::__shared_weak_count **)(v51 + 32);
            if (v52)
            {
              v53 = (unint64_t *)&v52->__shared_owners_;
              do
                v54 = __ldaxr(v53);
              while (__stlxr(v54 - 1, v53));
              if (!v54)
              {
                ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                std::__shared_weak_count::__release_weak(v52);
              }
            }
            v55 = *(std::__shared_weak_count **)(v51 + 16);
            if (v55)
            {
              v56 = (unint64_t *)&v55->__shared_owners_;
              do
                v57 = __ldaxr(v56);
              while (__stlxr(v57 - 1, v56));
              if (!v57)
              {
                ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                std::__shared_weak_count::__release_weak(v55);
              }
            }
            MEMORY[0x212BC6398](v51, 0x10F0C40B62ED6C6);
            v58 = v136;
            v136 = 0;
            if (v58)
            {
              v59 = *(std::__shared_weak_count **)(v58 + 32);
              if (v59)
              {
                v60 = (unint64_t *)&v59->__shared_owners_;
                do
                  v61 = __ldaxr(v60);
                while (__stlxr(v61 - 1, v60));
                if (!v61)
                {
                  ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                  std::__shared_weak_count::__release_weak(v59);
                }
              }
              v62 = *(std::__shared_weak_count **)(v58 + 16);
              if (v62)
              {
                v63 = (unint64_t *)&v62->__shared_owners_;
                do
                  v64 = __ldaxr(v63);
                while (__stlxr(v64 - 1, v63));
                if (!v64)
                {
                  ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                  std::__shared_weak_count::__release_weak(v62);
                }
              }
              MEMORY[0x212BC6398](v58, 0x10F0C40B62ED6C6);
            }
          }
          v65 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
          if (*((_QWORD *)&v145 + 1))
          {
            v66 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
            do
              v67 = __ldaxr(v66);
            while (__stlxr(v67 - 1, v66));
            if (!v67)
            {
              ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
              std::__shared_weak_count::__release_weak(v65);
            }
          }
          v68 = (std::__shared_weak_count *)*((_QWORD *)&v144 + 1);
          if (*((_QWORD *)&v144 + 1))
          {
            v69 = (unint64_t *)(*((_QWORD *)&v144 + 1) + 8);
            do
              v70 = __ldaxr(v69);
            while (__stlxr(v70 - 1, v69));
            if (!v70)
            {
              ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
              std::__shared_weak_count::__release_weak(v68);
            }
          }
        }
        else
        {
          os_log_type_enabled(v39, OS_LOG_TYPE_INFO);
          LOWORD(object) = 0;
          v71 = (void *)_os_log_send_and_compose_impl();
          if (v71)
            free(v71);
        }
        if (v13)
        {
          sub_20E8C003C((uint64_t)&v151, "Collaborative mapping data is not valid");
          sub_20E863570((uint64_t)&v151);
        }
        sub_20E863570((uint64_t)&v151);
        v72 = v157;
        if (v157)
        {
          v73 = (unint64_t *)&v157->__shared_owners_;
          do
            v74 = __ldaxr(v73);
          while (__stlxr(v74 - 1, v73));
          if (!v74)
          {
            ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
            std::__shared_weak_count::__release_weak(v72);
          }
        }
        goto LABEL_107;
      }
    }
    memmove(v29, v27, v28);
    goto LABEL_40;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  if (!v7)
    goto LABEL_12;
LABEL_7:
  v11 = *((unsigned __int8 *)*a2 + 16);
  Length = CFDataGetLength(**a2);
  v136 = v11;
  v137 = Length;
  v138 = 0;
  v139 = 0;
  v140 = 733222304;
  kdebug_trace();
  LOBYTE(object) = 0;
  v150 = 0;
  v151 = (os_log_t)a2;
  *(_QWORD *)&v152 = &object;
  sub_20F218E64((uint64_t)&v151);
  if (v150)
  {
    v151 = a1;
    *(_QWORD *)&v152 = a2;
    if (v149 == -1)
      sub_20E877AB8();
    v128[0] = &v151;
    ((void (*)(_QWORD *, void **))off_24C9FB4D8[v149])(v128, &object);
    if (!v150)
      goto LABEL_194;
    goto LABEL_192;
  }
  sub_20F218B3C(&v135);
  if (**(int **)(v135 + 56) <= 3)
  {
    v21 = *(unsigned __int8 *)(v135 + 72);
    v22 = sub_20E8C31DC(v135, "OSLogSurrogateAppender", 1, 0);
    v23 = v22;
    if (v21 || v22)
    {
      v128[0] = &v135;
      v128[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v128[2] = std::chrono::system_clock::now().__d_.__rep_;
      v129 = 3;
      v130 = "unknown file";
      v131 = 100;
      v133 = 0;
      v134 = 0;
      v132 = "unknown function";
      v125 = v135;
      if (*(char *)(v135 + 39) < 0)
      {
        v25 = *(const char **)(v135 + 16);
        v24 = *(_QWORD *)(v135 + 24);
      }
      else
      {
        v24 = *(unsigned __int8 *)(v135 + 39);
        v25 = (const char *)(v135 + 16);
      }
      v124 = v135 + 16;
      v127 = *((unsigned __int8 *)*a2 + 16);
      v75 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v75 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)&v151);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v151);
        if ((_BYTE)v153 && SHIBYTE(v152) < 0)
          operator delete(v151);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v76 = byte_254A4A4F8;
      else
        v76 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v77 = byte_254A4A4F8[23];
      else
        v77 = *(_QWORD *)&byte_254A4A4F8[8];
      v151 = os_log_create(v76, v25);
      v78 = &v152;
      if (v77 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v77 >= 0x17)
      {
        v79 = v23;
        v80 = v25;
        v81 = v21;
        v82 = (v77 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v77 | 7) != 0x17)
          v82 = v77 | 7;
        v83 = v82 + 1;
        v78 = (__int128 *)operator new(v82 + 1);
        *((_QWORD *)&v152 + 1) = v77;
        *(_QWORD *)&v153 = v83 | 0x8000000000000000;
        *(_QWORD *)&v152 = v78;
        v21 = v81;
        v25 = v80;
        v23 = v79;
      }
      else
      {
        BYTE7(v153) = v77;
        if (!v77)
        {
LABEL_124:
          *((_BYTE *)v78 + v77) = 0;
          BYTE8(v153) = 1;
          v84 = (void **)&v154;
          if (v24 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v24 >= 0x17)
          {
            v85 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v24 | 7) != 0x17)
              v85 = v24 | 7;
            v86 = v85 + 1;
            v84 = (void **)operator new(v85 + 1);
            v155 = (const char *)v24;
            v156 = v86 | 0x8000000000000000;
            v154 = v84;
          }
          else
          {
            HIBYTE(v156) = v24;
            if (!v24)
              goto LABEL_132;
          }
          memmove(v84, v25, v24);
LABEL_132:
          *((_BYTE *)v84 + v24) = 0;
          LOBYTE(v157) = 1;
          v87 = v151;
          if (SHIBYTE(v156) < 0)
            operator delete(v154);
          if (BYTE8(v153) && SBYTE7(v153) < 0)
            operator delete((void *)v152);
          if (v151)
            os_release(v151);
          if (v23 && *(_QWORD *)(v23 + 24))
          {
            v88 = _os_log_pack_size();
            v89 = operator new(v88, (std::align_val_t)8uLL);
            v90 = (std::__shared_weak_count *)operator new();
            v91 = v90;
            v90->__shared_owners_ = 0;
            v92 = (unint64_t *)&v90->__shared_owners_;
            v90->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v90->__shared_weak_owners_ = 0;
            v90[1].__vftable = (std::__shared_weak_count_vtbl *)v89;
            v151 = v89;
            *(_QWORD *)&v152 = v89;
            *((_QWORD *)&v152 + 1) = v90;
            do
              v93 = __ldxr(v92);
            while (__stxr(v93 + 1, v92));
            v153 = 0uLL;
            v154 = 0;
            do
              v94 = __ldaxr(v92);
            while (__stlxr(v94 - 1, v92));
            if (!v94)
            {
              ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
              std::__shared_weak_count::__release_weak(v91);
            }
            v95 = v151;
            v96 = (_DWORD *)_os_log_pack_fill();
            *v96 = 67109120;
            v96[1] = v127;
            v97 = operator new();
            v98 = *(unsigned __int8 *)(v125 + 39);
            v99 = v124;
            if ((v98 & 0x80u) != 0)
            {
              v99 = *(_QWORD *)(v125 + 16);
              v98 = *(_QWORD *)(v125 + 24);
            }
            *(_QWORD *)v97 = v95;
            *(_OWORD *)(v97 + 8) = v152;
            v152 = 0uLL;
            *(_OWORD *)(v97 + 24) = v153;
            v153 = 0uLL;
            *(_QWORD *)(v97 + 40) = v99;
            *(_QWORD *)(v97 + 48) = v98;
            *(_BYTE *)(v97 + 56) = 1;
            v141 = 0;
            v142 = v97;
            (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v23 + 24) + 40))(*(_QWORD *)(v23 + 24), &v142);
            v100 = v142;
            v142 = 0;
            if (v100)
            {
              v101 = *(std::__shared_weak_count **)(v100 + 32);
              if (v101)
              {
                v102 = (unint64_t *)&v101->__shared_owners_;
                do
                  v103 = __ldaxr(v102);
                while (__stlxr(v103 - 1, v102));
                if (!v103)
                {
                  ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                  std::__shared_weak_count::__release_weak(v101);
                }
              }
              v104 = *(std::__shared_weak_count **)(v100 + 16);
              if (v104)
              {
                v105 = (unint64_t *)&v104->__shared_owners_;
                do
                  v106 = __ldaxr(v105);
                while (__stlxr(v106 - 1, v105));
                if (!v106)
                {
                  ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                  std::__shared_weak_count::__release_weak(v104);
                }
              }
              MEMORY[0x212BC6398](v100, 0x10F0C40B62ED6C6);
              v107 = v141;
              v141 = 0;
              if (v107)
              {
                v108 = *(std::__shared_weak_count **)(v107 + 32);
                if (v108)
                {
                  v109 = (unint64_t *)&v108->__shared_owners_;
                  do
                    v110 = __ldaxr(v109);
                  while (__stlxr(v110 - 1, v109));
                  if (!v110)
                  {
                    ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                    std::__shared_weak_count::__release_weak(v108);
                  }
                }
                v111 = *(std::__shared_weak_count **)(v107 + 16);
                if (v111)
                {
                  v112 = (unint64_t *)&v111->__shared_owners_;
                  do
                    v113 = __ldaxr(v112);
                  while (__stlxr(v113 - 1, v112));
                  if (!v113)
                  {
                    ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
                    std::__shared_weak_count::__release_weak(v111);
                  }
                }
                MEMORY[0x212BC6398](v107, 0x10F0C40B62ED6C6);
              }
            }
            v114 = (std::__shared_weak_count *)*((_QWORD *)&v153 + 1);
            if (*((_QWORD *)&v153 + 1))
            {
              v115 = (unint64_t *)(*((_QWORD *)&v153 + 1) + 8);
              do
                v116 = __ldaxr(v115);
              while (__stlxr(v116 - 1, v115));
              if (!v116)
              {
                ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
                std::__shared_weak_count::__release_weak(v114);
              }
            }
            v117 = (std::__shared_weak_count *)*((_QWORD *)&v152 + 1);
            if (*((_QWORD *)&v152 + 1))
            {
              v118 = (unint64_t *)(*((_QWORD *)&v152 + 1) + 8);
              do
                v119 = __ldaxr(v118);
              while (__stlxr(v119 - 1, v118));
              if (!v119)
              {
                ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                std::__shared_weak_count::__release_weak(v117);
              }
            }
          }
          else
          {
            os_log_type_enabled(v87, OS_LOG_TYPE_INFO);
            LODWORD(v151) = 67109120;
            HIDWORD(v151) = v127;
            v120 = (void *)_os_log_send_and_compose_impl();
            if (v120)
              free(v120);
          }
          if (v21)
          {
            sub_20E8C003C((uint64_t)v128, "Unknown collaborative mapping data type %hhu", *((unsigned __int8 *)*a2 + 16));
            sub_20E863570((uint64_t)v128);
          }
          sub_20E863570((uint64_t)v128);
          v121 = v134;
          if (v134)
          {
            v122 = (unint64_t *)&v134->__shared_owners_;
            do
              v123 = __ldaxr(v122);
            while (__stlxr(v123 - 1, v122));
            if (!v123)
            {
              ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
              std::__shared_weak_count::__release_weak(v121);
            }
          }
          goto LABEL_191;
        }
      }
      memmove(v78, v76, v77);
      goto LABEL_124;
    }
  }
LABEL_191:
  *a3 = 0;
  a3[16] = 0;
  if (v150)
  {
LABEL_192:
    if (v149 != -1)
      ((void (*)(os_log_t *, void **))off_24C9FB418[v149])(&v151, &object);
  }
LABEL_194:
  kdebug_trace();
}

void sub_20F2188F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40)
{
  uint64_t v40;

  if (*(_BYTE *)(v40 - 152))
  {
    if (*(char *)(v40 - 153) < 0)
      operator delete(*(void **)(v40 - 176));
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a14);
  sub_20F218C30((uint64_t)&__p);
  sub_20E8E69C4((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void sub_20F218A94(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E863714(v1 - 176);
  _Unwind_Resume(a1);
}

void sub_20F218AAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *object,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38)
{
  uint64_t v38;

  if (a38 && a37 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714(v38 - 176);
  _Unwind_Resume(a1);
}

void sub_20F218AF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20F218B08(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_20E860DA4(exception_object);
}

void sub_20F218B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_20F218C30((uint64_t)&a31);
  sub_20E8E69C4((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void sub_20F218B3C(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A682E8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A682E8))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.area_mapping");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A682E0);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A682E8);
  }
  *a1 = qword_254A682E0;
}

void sub_20F218BD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A682E8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A682E8);
  _Unwind_Resume(a1);
}

uint64_t sub_20F218C30(uint64_t a1)
{
  uint64_t v2;
  char v4;

  if (*(_BYTE *)(a1 + 960))
  {
    v2 = *(unsigned int *)(a1 + 952);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24C9FB418[v2])(&v4, a1);
    *(_DWORD *)(a1 + 952) = -1;
  }
  return a1;
}

uint64_t sub_20F218C90(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  *(_QWORD *)a1 = off_24C9FB370;
  v2 = *(_QWORD **)(a1 + 120);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  if (v4)
    operator delete(v4);
  *(_QWORD *)a1 = off_24C9FB3D8;
  if (*(char *)(a1 + 103) < 0)
  {
    operator delete(*(void **)(a1 + 80));
    if ((*(char *)(a1 + 79) & 0x80000000) == 0)
    {
LABEL_7:
      *(_QWORD *)a1 = off_24C9FB400;
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
        goto LABEL_8;
LABEL_12:
      operator delete(*(void **)(a1 + 32));
      if ((*(char *)(a1 + 31) & 0x80000000) == 0)
        return a1;
      goto LABEL_13;
    }
  }
  else if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 56));
  *(_QWORD *)a1 = off_24C9FB400;
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_12;
LABEL_8:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_13:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20F218D70(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  *(_QWORD *)a1 = off_24C9FB370;
  v2 = *(_QWORD **)(a1 + 120);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  if (v4)
    operator delete(v4);
  *(_QWORD *)a1 = off_24C9FB3D8;
  if (*(char *)(a1 + 103) < 0)
  {
    operator delete(*(void **)(a1 + 80));
    if ((*(char *)(a1 + 79) & 0x80000000) == 0)
    {
LABEL_7:
      *(_QWORD *)a1 = off_24C9FB400;
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
        goto LABEL_8;
      goto LABEL_12;
    }
  }
  else if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 56));
  *(_QWORD *)a1 = off_24C9FB400;
  if ((*(char *)(a1 + 55) & 0x80000000) == 0)
  {
LABEL_8:
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      goto LABEL_14;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(*(void **)(a1 + 32));
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
LABEL_14:
    JUMPOUT(0x212BC6398);
LABEL_13:
  operator delete(*(void **)(a1 + 8));
  goto LABEL_14;
}

uint64_t sub_20F218E64(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  size_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  size_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  size_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  size_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  size_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  size_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  size_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  void *v52;
  void *v53;
  std::string __p[3];
  _BYTE __src[824];
  _BYTE v56[28];
  void *v57;
  __int128 v58;
  uint64_t v59;
  _QWORD **v60;
  _QWORD *v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  _BYTE __dst[824];
  _OWORD v67[2];
  void *v68;
  __int128 v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD v72[2];
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  int v76;
  char v77;
  uint64_t v78;

  v1 = result;
  v78 = *MEMORY[0x24BDAC8D0];
  v2 = **(_QWORD **)result;
  v3 = *(unsigned __int8 *)(v2 + 16);
  if (*(_BYTE *)(v2 + 16))
  {
    if (v3 == 1)
      goto LABEL_3;
LABEL_109:
    if (v3 != 2)
      goto LABEL_18;
    goto LABEL_110;
  }
  if (*(_BYTE *)(*(_QWORD *)(result + 8) + 960))
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/CollaborativeMapping/DeserializationNode/CMDataDeserializationNode.cpp", 93, (uint64_t)"!opt_ret", 8, (uint64_t)"This return should only be set once", 35, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = **(_QWORD **)v1;
  }
  v12 = *(_QWORD *)v2;
  v62 = 0;
  v61 = 0;
  bzero(&__src[8], 0x368uLL);
  v60 = &v61;
  BYTE4(v65) = 0;
  v63 = 0uLL;
  *(_QWORD *)&v64 = 0;
  BYTE8(v64) = 0;
  sub_20EA5E720(v12, (uint64_t)__dst);
  memset(__p, 0, 24);
  sub_20E93BD04(**(void ***)__dst, *(_QWORD *)(*(_QWORD *)__dst + 8) - **(_QWORD **)__dst, (uint64_t)__src, (unsigned __int8 *)__p, 0x2800uLL);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  if (__dst[16])
  {
    v13 = *(std::__shared_weak_count **)&__dst[8];
    if (*(_QWORD *)&__dst[8])
    {
      v14 = (unint64_t *)(*(_QWORD *)&__dst[8] + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  *(_OWORD *)&__dst[8] = *(_OWORD *)&__src[8];
  v16 = *(_QWORD *)&__src[24];
  memset(&__src[8], 0, 48);
  *(_OWORD *)&__dst[32] = *(_OWORD *)&__src[32];
  *(_QWORD *)&__dst[24] = v16;
  *(_QWORD *)&__dst[48] = *(_QWORD *)&__src[48];
  memcpy(&__dst[56], &__src[56], 0x2E8uLL);
  *(_OWORD *)&__dst[800] = *(_OWORD *)&__src[800];
  *(_QWORD *)&__dst[816] = *(_QWORD *)&__src[816];
  memset(&__src[800], 0, 24);
  v67[0] = *(_OWORD *)v56;
  *(_OWORD *)((char *)v67 + 12) = *(_OWORD *)&v56[12];
  v68 = v57;
  v69 = v58;
  v57 = 0;
  v58 = 0uLL;
  v70 = v59;
  v71 = v60;
  v72[0] = v61;
  v72[1] = v62;
  if (v62)
  {
    v61[2] = v72;
    v60 = &v61;
    v61 = 0;
    v62 = 0;
  }
  else
  {
    v71 = v72;
  }
  v73 = v63;
  v74 = v64;
  v75 = v65;
  v76 = 0;
  v77 = 1;
  sub_20E86872C((uint64_t)&v60, v61);
  if (v57)
  {
    *(_QWORD *)&v58 = v57;
    operator delete(v57);
  }
  if (*(_QWORD *)&__src[800])
  {
    *(_QWORD *)&__src[808] = *(_QWORD *)&__src[800];
    operator delete(*(void **)&__src[800]);
  }
  if (*(_QWORD *)&__src[32])
  {
    *(_QWORD *)&__src[40] = *(_QWORD *)&__src[32];
    operator delete(*(void **)&__src[32]);
  }
  v23 = *(_QWORD *)&__src[8];
  if (*(_QWORD *)&__src[8])
  {
    v24 = *(_QWORD *)&__src[16];
    v25 = *(void **)&__src[8];
    if (*(_QWORD *)&__src[16] != *(_QWORD *)&__src[8])
    {
      do
      {
        v26 = *(void **)(v24 - 24);
        if (v26)
        {
          *(_QWORD *)(v24 - 16) = v26;
          operator delete(v26);
        }
        v27 = *(void **)(v24 - 560);
        if (v27)
        {
          *(_QWORD *)(v24 - 552) = v27;
          operator delete(v27);
        }
        v28 = *(void **)(v24 - 584);
        if (v28)
        {
          *(_QWORD *)(v24 - 576) = v28;
          operator delete(v28);
        }
        v29 = *(void **)(v24 - 616);
        if (v29)
        {
          *(_QWORD *)(v24 - 608) = v29;
          operator delete(v29);
        }
        v30 = *(void **)(v24 - 648);
        if (v30)
        {
          *(_QWORD *)(v24 - 640) = v30;
          operator delete(v30);
        }
        v31 = *(void **)(v24 - 672);
        if (v31)
        {
          *(_QWORD *)(v24 - 664) = v31;
          operator delete(v31);
        }
        v24 -= 712;
      }
      while (v24 != v23);
      v25 = *(void **)&__src[8];
    }
    *(_QWORD *)&__src[16] = v23;
    operator delete(v25);
  }
  result = sub_20F2226C4(*(_QWORD *)(v1 + 8), (uint64_t)__dst);
  if (v77 && v76 != -1)
    result = ((uint64_t (*)(_BYTE *, _BYTE *))off_24C9FB418[v76])(__src, __dst);
  v2 = **(_QWORD **)v1;
  v3 = *(unsigned __int8 *)(v2 + 16);
  if (v3 != 1)
    goto LABEL_109;
LABEL_3:
  if (*(_BYTE *)(*(_QWORD *)(v1 + 8) + 960))
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/CollaborativeMapping/DeserializationNode/CMDataDeserializationNode.cpp", 93, (uint64_t)"!opt_ret", 8, (uint64_t)"This return should only be set once", 35, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = **(_QWORD **)v1;
  }
  v4 = *(_QWORD *)v2;
  memset(__src, 0, 24);
  *(_QWORD *)&__src[32] = 0;
  *(_DWORD *)&__src[40] = 0;
  *(_DWORD *)&__src[48] = 0;
  __src[328] = 0;
  memset(&__src[56], 0, 257);
  sub_20EA5E720(v4, (uint64_t)__dst);
  memset(__p, 0, 24);
  sub_20E9426A4(**(void ***)__dst, *(_QWORD *)(*(_QWORD *)__dst + 8) - **(_QWORD **)__dst, (uint64_t)__src, (unsigned __int8 *)__p, 0x2800uLL);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  if (__dst[16])
  {
    v5 = *(std::__shared_weak_count **)&__dst[8];
    if (*(_QWORD *)&__dst[8])
    {
      v6 = (unint64_t *)(*(_QWORD *)&__dst[8] + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  *(_OWORD *)__dst = *(_OWORD *)__src;
  *(_QWORD *)&__dst[16] = *(_QWORD *)&__src[16];
  memset(__src, 0, 24);
  memcpy(&__dst[24], &__src[24], 0x131uLL);
  v76 = 1;
  v77 = 1;
  result = sub_20F2226C4(*(_QWORD *)(v1 + 8), (uint64_t)__dst);
  if (v77 && v76 != -1)
    result = ((uint64_t (*)(_BYTE *, _BYTE *))off_24C9FB418[v76])(__src, __dst);
  v2 = **(_QWORD **)v1;
  v3 = *(unsigned __int8 *)(v2 + 16);
  if (v3 != 2)
  {
LABEL_18:
    if (v3 == 3)
      goto LABEL_19;
LABEL_125:
    if (v3 != 4)
      goto LABEL_62;
    goto LABEL_126;
  }
LABEL_110:
  if (*(_BYTE *)(*(_QWORD *)(v1 + 8) + 960))
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/CollaborativeMapping/DeserializationNode/CMDataDeserializationNode.cpp", 93, (uint64_t)"!opt_ret", 8, (uint64_t)"This return should only be set once", 35, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = **(_QWORD **)v1;
  }
  v32 = *(_QWORD *)v2;
  *(_QWORD *)__src = 0;
  *(_DWORD *)&__src[8] = 0;
  *(_DWORD *)&__src[16] = 0;
  *(_QWORD *)&__src[24] = 0;
  *(_DWORD *)&__src[32] = 0;
  *(_DWORD *)&__src[40] = 0;
  memset(&__src[48], 0, 420);
  sub_20EA5E720(v32, (uint64_t)__dst);
  memset(__p, 0, 24);
  sub_20E943FD8(**(void ***)__dst, *(_QWORD *)(*(_QWORD *)__dst + 8) - **(_QWORD **)__dst, __src, (unsigned __int8 *)__p, 0x2800uLL);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  if (__dst[16])
  {
    v33 = *(std::__shared_weak_count **)&__dst[8];
    if (*(_QWORD *)&__dst[8])
    {
      v34 = (unint64_t *)(*(_QWORD *)&__dst[8] + 8);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
  }
  memcpy(__dst, __src, 0x1D8uLL);
  v76 = 2;
  v77 = 1;
  result = sub_20F2226C4(*(_QWORD *)(v1 + 8), (uint64_t)__dst);
  if (v77 && v76 != -1)
    result = ((uint64_t (*)(_BYTE *, _BYTE *))off_24C9FB418[v76])(__src, __dst);
  v2 = **(_QWORD **)v1;
  v3 = *(unsigned __int8 *)(v2 + 16);
  if (v3 != 3)
    goto LABEL_125;
LABEL_19:
  if (*(_BYTE *)(*(_QWORD *)(v1 + 8) + 960))
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/CollaborativeMapping/DeserializationNode/CMDataDeserializationNode.cpp", 93, (uint64_t)"!opt_ret", 8, (uint64_t)"This return should only be set once", 35, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = **(_QWORD **)v1;
  }
  v8 = *(_QWORD *)v2;
  *(_QWORD *)&__src[16] = &__src[24];
  memset(&__src[24], 0, 88);
  __src[112] = 3;
  *(_QWORD *)&__src[120] = &__src[128];
  memset(&__src[128], 0, 64);
  *(_QWORD *)&__src[200] = 0;
  *(_QWORD *)&__src[208] = 0;
  *(_QWORD *)&__src[192] = &__src[200];
  *(_QWORD *)&__src[216] = &__src[224];
  *(_QWORD *)&__src[224] = 0;
  *(_QWORD *)&__src[232] = 0;
  *(_QWORD *)&__src[240] = -1;
  memset(&__src[248], 0, 88);
  *(_QWORD *)&__src[336] = -1;
  memset(&__src[376], 0, 72);
  memset(&__src[344], 0, 24);
  *(_QWORD *)&__src[368] = &__src[376];
  sub_20EA5E720(v8, (uint64_t)__dst);
  memset(__p, 0, 24);
  sub_20E944D50(**(void ***)__dst, *(_QWORD *)(*(_QWORD *)__dst + 8) - **(_QWORD **)__dst, (uint64_t)__src, (unsigned __int8 *)__p, 0x2800uLL);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  if (__dst[16])
  {
    v9 = *(std::__shared_weak_count **)&__dst[8];
    if (*(_QWORD *)&__dst[8])
    {
      v10 = (unint64_t *)(*(_QWORD *)&__dst[8] + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  *(_QWORD *)&__dst[16] = *(_QWORD *)&__src[16];
  *(_QWORD *)&__dst[24] = *(_QWORD *)&__src[24];
  *(_QWORD *)&__dst[32] = *(_QWORD *)&__src[32];
  if (*(_QWORD *)&__src[32])
  {
    *(_QWORD *)(*(_QWORD *)&__src[24] + 16) = &__dst[24];
    *(_QWORD *)&__src[16] = &__src[24];
    *(_QWORD *)&__src[24] = 0;
    *(_QWORD *)&__src[32] = 0;
  }
  else
  {
    *(_QWORD *)&__dst[16] = &__dst[24];
  }
  *(_OWORD *)&__dst[40] = *(_OWORD *)&__src[40];
  v17 = *(_QWORD *)&__src[56];
  memset(&__src[40], 0, 72);
  *(_OWORD *)&__dst[64] = *(_OWORD *)&__src[64];
  *(_QWORD *)&__dst[56] = v17;
  *(_QWORD *)&__dst[80] = *(_QWORD *)&__src[80];
  *(_OWORD *)&__dst[88] = *(_OWORD *)&__src[88];
  *(_QWORD *)&__dst[104] = *(_QWORD *)&__src[104];
  __dst[112] = __src[112];
  *(_QWORD *)&__dst[120] = *(_QWORD *)&__src[120];
  *(_QWORD *)&__dst[128] = *(_QWORD *)&__src[128];
  *(_QWORD *)&__dst[136] = *(_QWORD *)&__src[136];
  if (*(_QWORD *)&__src[136])
  {
    *(_QWORD *)(*(_QWORD *)&__src[128] + 16) = &__dst[128];
    *(_QWORD *)&__src[120] = &__src[128];
    *(_QWORD *)&__src[128] = 0;
    *(_QWORD *)&__src[136] = 0;
  }
  else
  {
    *(_QWORD *)&__dst[120] = &__dst[128];
  }
  *(_OWORD *)&__dst[144] = *(_OWORD *)&__src[144];
  v18 = *(_QWORD *)&__src[160];
  memset(&__src[144], 0, 48);
  *(_OWORD *)&__dst[168] = *(_OWORD *)&__src[168];
  *(_QWORD *)&__dst[160] = v18;
  *(_QWORD *)&__dst[184] = *(_QWORD *)&__src[184];
  *(_QWORD *)&__dst[192] = *(_QWORD *)&__src[192];
  *(_QWORD *)&__dst[200] = *(_QWORD *)&__src[200];
  *(_QWORD *)&__dst[208] = *(_QWORD *)&__src[208];
  if (*(_QWORD *)&__src[208])
  {
    *(_QWORD *)(*(_QWORD *)&__src[200] + 16) = &__dst[200];
    *(_QWORD *)&__src[192] = &__src[200];
    *(_QWORD *)&__src[200] = 0;
    *(_QWORD *)&__src[208] = 0;
  }
  else
  {
    *(_QWORD *)&__dst[192] = &__dst[200];
  }
  *(_QWORD *)&__dst[216] = *(_QWORD *)&__src[216];
  *(_QWORD *)&__dst[224] = *(_QWORD *)&__src[224];
  *(_QWORD *)&__dst[232] = *(_QWORD *)&__src[232];
  if (*(_QWORD *)&__src[232])
  {
    *(_QWORD *)(*(_QWORD *)&__src[224] + 16) = &__dst[224];
    *(_QWORD *)&__src[216] = &__src[224];
    *(_QWORD *)&__src[224] = 0;
    *(_QWORD *)&__src[232] = 0;
  }
  else
  {
    *(_QWORD *)&__dst[216] = &__dst[224];
  }
  *(_OWORD *)&__dst[248] = *(_OWORD *)&__src[248];
  *(_QWORD *)&__dst[240] = *(_QWORD *)&__src[240];
  *(_QWORD *)&__dst[264] = *(_QWORD *)&__src[264];
  memset(&__src[248], 0, 48);
  *(_OWORD *)&__dst[272] = *(_OWORD *)&__src[272];
  *(_OWORD *)&__dst[312] = *(_OWORD *)&__src[312];
  *(_OWORD *)&__dst[328] = *(_OWORD *)&__src[328];
  *(_OWORD *)&__dst[296] = *(_OWORD *)&__src[296];
  *(_QWORD *)&__dst[288] = *(_QWORD *)&__src[288];
  *(_QWORD *)&__dst[344] = *(_QWORD *)&__src[344];
  *(_OWORD *)&__dst[352] = *(_OWORD *)&__src[352];
  memset(&__src[344], 0, 24);
  *(_QWORD *)&__dst[368] = *(_QWORD *)&__src[368];
  *(_QWORD *)&__dst[376] = *(_QWORD *)&__src[376];
  *(_QWORD *)&__dst[384] = *(_QWORD *)&__src[384];
  if (*(_QWORD *)&__src[384])
  {
    *(_QWORD *)(*(_QWORD *)&__src[376] + 16) = &__dst[376];
    *(_QWORD *)&__src[368] = &__src[376];
    *(_QWORD *)&__src[376] = 0;
    *(_QWORD *)&__src[384] = 0;
  }
  else
  {
    *(_QWORD *)&__dst[368] = &__dst[376];
  }
  *(_OWORD *)&__dst[392] = *(_OWORD *)&__src[392];
  *(_OWORD *)&__dst[408] = *(_OWORD *)&__src[408];
  *(_OWORD *)&__dst[424] = *(_OWORD *)&__src[424];
  *(_DWORD *)&__dst[440] = *(_DWORD *)&__src[440];
  v76 = 3;
  v77 = 1;
  sub_20E94FADC((uint64_t)__src);
  result = sub_20F2226C4(*(_QWORD *)(v1 + 8), (uint64_t)__dst);
  if (v77 && v76 != -1)
    result = ((uint64_t (*)(_BYTE *, _BYTE *))off_24C9FB418[v76])(__src, __dst);
  v2 = **(_QWORD **)v1;
  v3 = *(unsigned __int8 *)(v2 + 16);
  if (v3 != 4)
  {
LABEL_62:
    if (v3 == 5)
      goto LABEL_63;
LABEL_141:
    if (v3 != 8)
      goto LABEL_78;
    goto LABEL_142;
  }
LABEL_126:
  if (*(_BYTE *)(*(_QWORD *)(v1 + 8) + 960))
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/CollaborativeMapping/DeserializationNode/CMDataDeserializationNode.cpp", 93, (uint64_t)"!opt_ret", 8, (uint64_t)"This return should only be set once", 35, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = **(_QWORD **)v1;
  }
  v36 = *(_QWORD *)v2;
  memset(__p, 0, 24);
  sub_20EA5E720(v36, (uint64_t)__dst);
  memset(__src, 0, 24);
  sub_20E950300(**(void ***)__dst, *(_QWORD *)(*(_QWORD *)__dst + 8) - **(_QWORD **)__dst, __p, __src, 0x2800uLL);
  if ((__src[23] & 0x80000000) != 0)
    operator delete(*(void **)__src);
  if (__dst[16])
  {
    v37 = *(std::__shared_weak_count **)&__dst[8];
    if (*(_QWORD *)&__dst[8])
    {
      v38 = (unint64_t *)(*(_QWORD *)&__dst[8] + 8);
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
  }
  *(std::string *)__dst = __p[0];
  memset(__p, 0, 24);
  v76 = 4;
  v77 = 1;
  result = sub_20F2226C4(*(_QWORD *)(v1 + 8), (uint64_t)__dst);
  if (v77 && v76 != -1)
    result = ((uint64_t (*)(_BYTE *, _BYTE *))off_24C9FB418[v76])(__src, __dst);
  v2 = **(_QWORD **)v1;
  v3 = *(unsigned __int8 *)(v2 + 16);
  if (v3 != 5)
    goto LABEL_141;
LABEL_63:
  if (*(_BYTE *)(*(_QWORD *)(v1 + 8) + 960))
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/CollaborativeMapping/DeserializationNode/CMDataDeserializationNode.cpp", 93, (uint64_t)"!opt_ret", 8, (uint64_t)"This return should only be set once", 35, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = **(_QWORD **)v1;
  }
  v19 = *(_QWORD *)v2;
  v56[8] = 0;
  *(_QWORD *)&v56[16] = 0;
  v56[24] = 0;
  bzero(&__src[8], 0x321uLL);
  sub_20EA5E720(v19, (uint64_t)__dst);
  memset(__p, 0, 24);
  sub_20E951848(**(void ***)__dst, *(_QWORD *)(*(_QWORD *)__dst + 8) - **(_QWORD **)__dst, (uint64_t)__src, (unsigned __int8 *)__p, 0x2800uLL);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  if (__dst[16])
  {
    v20 = *(std::__shared_weak_count **)&__dst[8];
    if (*(_QWORD *)&__dst[8])
    {
      v21 = (unint64_t *)(*(_QWORD *)&__dst[8] + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
  memcpy(&__dst[8], &__src[8], 0x2E8uLL);
  *(_OWORD *)&__dst[752] = *(_OWORD *)&__src[752];
  *(_QWORD *)&__dst[768] = *(_QWORD *)&__src[768];
  memset(&__src[752], 0, 24);
  *(_OWORD *)&__dst[776] = *(_OWORD *)&__src[776];
  *(_OWORD *)&__dst[788] = *(_OWORD *)&__src[788];
  *(_OWORD *)&__dst[808] = *(_OWORD *)&__src[808];
  v67[0] = *(_OWORD *)v56;
  *(_OWORD *)((char *)v67 + 9) = *(_OWORD *)&v56[9];
  v76 = 5;
  v77 = 1;
  result = sub_20F2226C4(*(_QWORD *)(v1 + 8), (uint64_t)__dst);
  if (v77 && v76 != -1)
    result = ((uint64_t (*)(_BYTE *, _BYTE *))off_24C9FB418[v76])(__src, __dst);
  v2 = **(_QWORD **)v1;
  v3 = *(unsigned __int8 *)(v2 + 16);
  if (v3 != 8)
  {
LABEL_78:
    if (v3 != 9)
      return result;
    goto LABEL_157;
  }
LABEL_142:
  if (*(_BYTE *)(*(_QWORD *)(v1 + 8) + 960))
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/CollaborativeMapping/DeserializationNode/CMDataDeserializationNode.cpp", 93, (uint64_t)"!opt_ret", 8, (uint64_t)"This return should only be set once", 35, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = **(_QWORD **)v1;
  }
  v40 = *(_QWORD *)v2;
  memset(__p, 0, 24);
  sub_20EA5E720(v40, (uint64_t)__dst);
  memset(__src, 0, 24);
  sub_20E953050(**(void ***)__dst, *(_QWORD *)(*(_QWORD *)__dst + 8) - **(_QWORD **)__dst, &__p[0].__r_.__value_.__l.__data_, __src, 0x2800uLL);
  if ((__src[23] & 0x80000000) != 0)
    operator delete(*(void **)__src);
  if (__dst[16])
  {
    v41 = *(std::__shared_weak_count **)&__dst[8];
    if (*(_QWORD *)&__dst[8])
    {
      v42 = (unint64_t *)(*(_QWORD *)&__dst[8] + 8);
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
  }
  *(std::string *)__dst = __p[0];
  v76 = 6;
  v77 = 1;
  result = sub_20F2226C4(*(_QWORD *)(v1 + 8), (uint64_t)__dst);
  if (v77 && v76 != -1)
    result = ((uint64_t (*)(_BYTE *, _BYTE *))off_24C9FB418[v76])(__src, __dst);
  v2 = **(_QWORD **)v1;
  if (*(_BYTE *)(v2 + 16) == 9)
  {
LABEL_157:
    if (*(_BYTE *)(*(_QWORD *)(v1 + 8) + 960))
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/CollaborativeMapping/DeserializationNode/CMDataDeserializationNode.cpp", 93, (uint64_t)"!opt_ret", 8, (uint64_t)"This return should only be set once", 35, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v2 = **(_QWORD **)v1;
    }
    v44 = *(_QWORD *)v2;
    memset(__src, 0, 24);
    memset(&__src[32], 0, 53);
    *(_QWORD *)&__src[24] = &__src[32];
    __src[96] = 0;
    sub_20EA5E720(v44, (uint64_t)__dst);
    memset(__p, 0, 24);
    sub_20E9540A0(**(void ***)__dst, *(_QWORD *)(*(_QWORD *)__dst + 8) - **(_QWORD **)__dst, (uint64_t)__src, (unsigned __int8 *)__p, 0x2800uLL);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    if (__dst[16])
    {
      v45 = *(std::__shared_weak_count **)&__dst[8];
      if (*(_QWORD *)&__dst[8])
      {
        v46 = (unint64_t *)(*(_QWORD *)&__dst[8] + 8);
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
    }
    *(_OWORD *)__dst = *(_OWORD *)__src;
    memset(__src, 0, 24);
    *(_QWORD *)&__dst[16] = *(_QWORD *)&__src[16];
    *(_QWORD *)&__dst[24] = *(_QWORD *)&__src[24];
    *(_QWORD *)&__dst[32] = *(_QWORD *)&__src[32];
    *(_QWORD *)&__dst[40] = *(_QWORD *)&__src[40];
    if (*(_QWORD *)&__src[40])
    {
      *(_QWORD *)(*(_QWORD *)&__src[32] + 16) = &__dst[32];
      *(_QWORD *)&__src[24] = &__src[32];
      *(_QWORD *)&__src[32] = 0;
      *(_QWORD *)&__src[40] = 0;
    }
    else
    {
      *(_QWORD *)&__dst[24] = &__dst[32];
    }
    *(_OWORD *)&__dst[48] = *(_OWORD *)&__src[48];
    *(_OWORD *)&__dst[64] = *(_OWORD *)&__src[64];
    *(_OWORD *)&__dst[80] = *(_OWORD *)&__src[80];
    *(_DWORD *)&__dst[96] = *(_DWORD *)&__src[96];
    v76 = 7;
    v77 = 1;
    sub_20E86872C((uint64_t)&__src[24], *(_QWORD **)&__src[32]);
    v48 = *(_QWORD *)__src;
    if (*(_QWORD *)__src)
    {
      v49 = *(_QWORD *)&__src[8];
      v50 = *(void **)__src;
      if (*(_QWORD *)&__src[8] != *(_QWORD *)__src)
      {
        v51 = *(_QWORD *)&__src[8];
        do
        {
          v53 = *(void **)(v51 - 48);
          v51 -= 48;
          v52 = v53;
          if (v53)
          {
            *(_QWORD *)(v49 - 40) = v52;
            operator delete(v52);
          }
          v49 = v51;
        }
        while (v51 != v48);
        v50 = *(void **)__src;
      }
      *(_QWORD *)&__src[8] = v48;
      operator delete(v50);
    }
    result = sub_20F2226C4(*(_QWORD *)(v1 + 8), (uint64_t)__dst);
    if (v77)
    {
      if (v76 != -1)
        return ((uint64_t (*)(_BYTE *, _BYTE *))off_24C9FB418[v76])(__src, __dst);
    }
  }
  return result;
}

void sub_20F21A048(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  _Unwind_Resume(a1);
}

void sub_20F221674(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x20F221688);
  _Unwind_Resume(a1);
}

void sub_20F2222E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;

  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863570((uint64_t)&a21);
  v37 = (std::__shared_weak_count *)a29;
  if (a29)
  {
    v38 = (unint64_t *)(a29 + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  __cxa_end_catch();
  if (a36 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20F2226C4(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;

  v2 = result;
  if (*(unsigned __int8 *)(result + 960) == *(unsigned __int8 *)(a2 + 960))
  {
    if (!*(_BYTE *)(result + 960))
      return result;
    v3 = *(unsigned int *)(result + 952);
    v4 = *(unsigned int *)(a2 + 952);
    if ((_DWORD)v3 != -1)
    {
      if ((_DWORD)v4 == -1)
      {
        result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24C9FB418[v3])(&v8, result, a2);
        *(_DWORD *)(v2 + 952) = -1;
        return result;
      }
LABEL_15:
      v7 = result;
      return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_24C9FB458[v4])(&v7, result, a2);
    }
    if ((_DWORD)v4 != -1)
      goto LABEL_15;
  }
  else if (*(_BYTE *)(result + 960))
  {
    v5 = *(unsigned int *)(result + 952);
    if ((_DWORD)v5 != -1)
      result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24C9FB418[v5])(&v9, result, a2);
    *(_DWORD *)(v2 + 952) = -1;
    *(_BYTE *)(v2 + 960) = 0;
  }
  else
  {
    *(_BYTE *)result = 0;
    *(_DWORD *)(result + 952) = -1;
    v6 = *(unsigned int *)(a2 + 952);
    if ((_DWORD)v6 != -1)
    {
      result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24C9FB498[v6])(&v10, result, a2);
      *(_DWORD *)(v2 + 952) = v6;
    }
    *(_BYTE *)(v2 + 960) = 1;
  }
  return result;
}

__n128 sub_20F222800(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  char v14;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 952);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      sub_20E941D88(a2 + 8, a3 + 8);
      v7 = *(_QWORD *)(a3 + 944);
      result = *(__n128 *)(a3 + 928);
      *(_OWORD *)(a2 + 912) = *(_OWORD *)(a3 + 912);
      *(__n128 *)(a2 + 928) = result;
      *(_QWORD *)(a2 + 944) = v7;
      return result;
    }
    ((void (*)(char *, uint64_t))off_24C9FB418[v5])(&v14, v4);
  }
  *(_QWORD *)(v4 + 8) = 0;
  *(_DWORD *)(v4 + 952) = -1;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_QWORD *)(v4 + 48) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(a3 + 32);
  *(_QWORD *)(v4 + 48) = *(_QWORD *)(a3 + 48);
  *(_QWORD *)(a3 + 48) = 0;
  *(_OWORD *)(a3 + 32) = 0u;
  memcpy((void *)(v4 + 56), (const void *)(a3 + 56), 0x2E8uLL);
  *(_QWORD *)(v4 + 800) = 0;
  *(_OWORD *)(v4 + 808) = 0u;
  *(_OWORD *)(v4 + 800) = *(_OWORD *)(a3 + 800);
  *(_QWORD *)(v4 + 816) = *(_QWORD *)(a3 + 816);
  *(_OWORD *)(a3 + 800) = 0u;
  *(_QWORD *)(a3 + 816) = 0;
  v9 = *(_OWORD *)(a3 + 836);
  *(_OWORD *)(v4 + 824) = *(_OWORD *)(a3 + 824);
  *(_OWORD *)(v4 + 836) = v9;
  *(_OWORD *)(v4 + 864) = 0u;
  *(_QWORD *)(v4 + 856) = 0;
  *(_QWORD *)(v4 + 856) = *(_QWORD *)(a3 + 856);
  *(_QWORD *)(v4 + 864) = *(_QWORD *)(a3 + 864);
  *(_QWORD *)(v4 + 872) = *(_QWORD *)(a3 + 872);
  *(_QWORD *)(a3 + 872) = 0;
  *(_OWORD *)(a3 + 856) = 0u;
  *(_QWORD *)(v4 + 880) = *(_QWORD *)(a3 + 880);
  *(_QWORD *)(v4 + 888) = *(_QWORD *)(a3 + 888);
  v10 = v4 + 896;
  v11 = *(_QWORD *)(a3 + 896);
  *(_QWORD *)(v4 + 896) = v11;
  v12 = *(_QWORD *)(a3 + 904);
  *(_QWORD *)(v4 + 904) = v12;
  if (v12)
  {
    *(_QWORD *)(v11 + 16) = v10;
    *(_QWORD *)(a3 + 888) = a3 + 896;
    *(_QWORD *)(a3 + 896) = 0;
    *(_QWORD *)(a3 + 904) = 0;
  }
  else
  {
    *(_QWORD *)(v4 + 888) = v10;
  }
  result = *(__n128 *)(a3 + 912);
  v13 = *(_OWORD *)(a3 + 928);
  *(_QWORD *)(v4 + 944) = *(_QWORD *)(a3 + 944);
  *(__n128 *)(v4 + 912) = result;
  *(_OWORD *)(v4 + 928) = v13;
  *(_DWORD *)(v4 + 952) = 0;
  return result;
}

void *sub_20F2229BC(uint64_t *a1, uint64_t a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  void *result;
  __int128 v9;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 952);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 1)
  {
    ((void (*)(char *, uint64_t))off_24C9FB418[v5])(&v10, v4);
LABEL_7:
    *(_DWORD *)(v4 + 952) = -1;
    v9 = *a3;
    *(_QWORD *)(v4 + 16) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v4 = v9;
    *((_QWORD *)a3 + 1) = 0;
    *((_QWORD *)a3 + 2) = 0;
    *(_QWORD *)a3 = 0;
    result = memcpy((void *)(v4 + 24), (char *)a3 + 24, 0x131uLL);
    *(_DWORD *)(v4 + 952) = 1;
    return result;
  }
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  v7 = *a3;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)a3 + 2);
  *(_OWORD *)a2 = v7;
  *((_BYTE *)a3 + 23) = 0;
  *(_BYTE *)a3 = 0;
  return memcpy((void *)(a2 + 24), (char *)a3 + 24, 0x131uLL);
}

void *sub_20F222AA0(uint64_t a1, void *__dst, void *__src)
{
  _DWORD *v4;
  uint64_t v5;
  void *result;
  char v7;

  v4 = *(_DWORD **)a1;
  v5 = *(unsigned int *)(*(_QWORD *)a1 + 952);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 2)
      return memcpy(__dst, __src, 0x1D4uLL);
    ((void (*)(char *, _DWORD *))off_24C9FB418[v5])(&v7, v4);
  }
  v4[238] = -1;
  result = memcpy(v4, __src, 0x1D8uLL);
  v4[238] = 2;
  return result;
}

__n128 sub_20F222B34(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  char v15;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 952);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 3)
    {
      sub_20E94BF80(a2, a3);
      return result;
    }
    ((void (*)(char *, uint64_t))off_24C9FB418[v5])(&v15, v4);
  }
  *(_DWORD *)(v4 + 952) = -1;
  sub_20EAC7338(v4 + 8, a3 + 8);
  *(_QWORD *)(v4 + 248) = 0;
  *(_QWORD *)(v4 + 256) = 0;
  *(_QWORD *)(v4 + 264) = 0;
  *(_OWORD *)(v4 + 248) = *(_OWORD *)(a3 + 248);
  *(_QWORD *)(v4 + 264) = *(_QWORD *)(a3 + 264);
  *(_QWORD *)(a3 + 248) = 0;
  *(_QWORD *)(a3 + 256) = 0;
  *(_QWORD *)(a3 + 264) = 0;
  *(_QWORD *)(v4 + 272) = 0;
  *(_QWORD *)(v4 + 280) = 0;
  *(_QWORD *)(v4 + 288) = 0;
  *(_OWORD *)(v4 + 272) = *(_OWORD *)(a3 + 272);
  *(_QWORD *)(v4 + 288) = *(_QWORD *)(a3 + 288);
  *(_QWORD *)(a3 + 272) = 0;
  *(_QWORD *)(a3 + 280) = 0;
  *(_QWORD *)(a3 + 288) = 0;
  v7 = *(_OWORD *)(a3 + 296);
  v8 = *(_OWORD *)(a3 + 328);
  *(_OWORD *)(v4 + 312) = *(_OWORD *)(a3 + 312);
  *(_OWORD *)(v4 + 328) = v8;
  *(_OWORD *)(v4 + 296) = v7;
  *(_QWORD *)(v4 + 352) = 0;
  *(_QWORD *)(v4 + 360) = 0;
  *(_QWORD *)(v4 + 344) = 0;
  v9 = *(_QWORD *)(a3 + 352);
  *(_QWORD *)(v4 + 344) = *(_QWORD *)(a3 + 344);
  *(_QWORD *)(v4 + 352) = v9;
  *(_QWORD *)(v4 + 360) = *(_QWORD *)(a3 + 360);
  *(_QWORD *)(a3 + 344) = 0;
  *(_QWORD *)(a3 + 352) = 0;
  *(_QWORD *)(a3 + 360) = 0;
  *(_QWORD *)(v4 + 368) = *(_QWORD *)(a3 + 368);
  v10 = v4 + 376;
  v11 = *(_QWORD *)(a3 + 376);
  *(_QWORD *)(v4 + 376) = v11;
  v12 = *(_QWORD *)(a3 + 384);
  *(_QWORD *)(v4 + 384) = v12;
  if (v12)
  {
    *(_QWORD *)(v11 + 16) = v10;
    *(_QWORD *)(a3 + 368) = a3 + 376;
    *(_QWORD *)(a3 + 376) = 0;
    *(_QWORD *)(a3 + 384) = 0;
  }
  else
  {
    *(_QWORD *)(v4 + 368) = v10;
  }
  result = *(__n128 *)(a3 + 392);
  v13 = *(_OWORD *)(a3 + 408);
  v14 = *(_OWORD *)(a3 + 424);
  *(_DWORD *)(v4 + 440) = *(_DWORD *)(a3 + 440);
  *(_OWORD *)(v4 + 408) = v13;
  *(_OWORD *)(v4 + 424) = v14;
  *(__n128 *)(v4 + 392) = result;
  *(_DWORD *)(v4 + 952) = 3;
  return result;
}

__n128 sub_20F222C90(__n128 **a1, uint64_t a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v8;

  v4 = *a1;
  v5 = (*a1)[59].n128_u32[2];
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 4)
  {
    ((void (*)(char *, __n128 *))off_24C9FB418[v5])(&v8, v4);
LABEL_7:
    v4[59].n128_u32[2] = -1;
    result = *a3;
    v4[1].n128_u64[0] = a3[1].n128_u64[0];
    *v4 = result;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    a3->n128_u64[0] = 0;
    v4[59].n128_u32[2] = 4;
    return result;
  }
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *a3;
  *(_QWORD *)(a2 + 16) = a3[1].n128_u64[0];
  *(__n128 *)a2 = result;
  a3[1].n128_u8[7] = 0;
  a3->n128_u8[0] = 0;
  return result;
}

__n128 sub_20F222D58(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  void *v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  char v13;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 952);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 5)
  {
    ((void (*)(char *, uint64_t))off_24C9FB418[v5])(&v13, v4);
LABEL_7:
    *(_DWORD *)(v4 + 952) = -1;
    memcpy((void *)(v4 + 8), (const void *)(a3 + 8), 0x2E8uLL);
    *(_QWORD *)(v4 + 752) = 0;
    *(_OWORD *)(v4 + 760) = 0u;
    *(_OWORD *)(v4 + 752) = *(_OWORD *)(a3 + 752);
    *(_QWORD *)(v4 + 768) = *(_QWORD *)(a3 + 768);
    *(_OWORD *)(a3 + 752) = 0u;
    *(_QWORD *)(a3 + 768) = 0;
    v11 = *(_OWORD *)(a3 + 788);
    *(_OWORD *)(v4 + 776) = *(_OWORD *)(a3 + 776);
    *(_OWORD *)(v4 + 788) = v11;
    result = *(__n128 *)(a3 + 833);
    v12 = *(_OWORD *)(a3 + 824);
    *(_OWORD *)(v4 + 808) = *(_OWORD *)(a3 + 808);
    *(_OWORD *)(v4 + 824) = v12;
    *(__n128 *)(v4 + 833) = result;
    *(_DWORD *)(v4 + 952) = 5;
    return result;
  }
  memcpy((void *)(a2 + 8), (const void *)(a3 + 8), 0x2E8uLL);
  v7 = *(void **)(a2 + 752);
  if (v7)
  {
    *(_QWORD *)(a2 + 760) = v7;
    operator delete(v7);
    *(_QWORD *)(a2 + 752) = 0;
    *(_QWORD *)(a2 + 760) = 0;
    *(_QWORD *)(a2 + 768) = 0;
  }
  *(_OWORD *)(a2 + 752) = *(_OWORD *)(a3 + 752);
  *(_QWORD *)(a2 + 768) = *(_QWORD *)(a3 + 768);
  *(_QWORD *)(a3 + 768) = 0;
  *(_OWORD *)(a3 + 752) = 0u;
  v8 = *(_OWORD *)(a3 + 776);
  *(_OWORD *)(a2 + 788) = *(_OWORD *)(a3 + 788);
  *(_OWORD *)(a2 + 776) = v8;
  result = *(__n128 *)(a3 + 808);
  v10 = *(_OWORD *)(a3 + 824);
  *(_OWORD *)(a2 + 833) = *(_OWORD *)(a3 + 833);
  *(__n128 *)(a2 + 808) = result;
  *(_OWORD *)(a2 + 824) = v10;
  return result;
}

__n128 sub_20F222EC4(uint64_t *a1, uint64_t a2, __n128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  void *v7;
  __n128 result;
  char v9;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 952);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 6)
  {
    ((void (*)(char *, uint64_t))off_24C9FB418[v5])(&v9, v4);
LABEL_7:
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 16) = 0;
    result = *a3;
    *(__n128 *)v4 = *a3;
    *(_QWORD *)(v4 + 16) = a3[1].n128_u64[0];
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    *(_DWORD *)(v4 + 952) = 6;
    return result;
  }
  v7 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v7;
    operator delete(v7);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  result = *a3;
  *(__n128 *)a2 = *a3;
  *(_QWORD *)(a2 + 16) = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  return result;
}

__n128 sub_20F222F94(uint64_t *a1, __n128 *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  void *v11;
  void *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 result;
  __int128 v18;
  __int128 v19;
  char *v20;
  _QWORD *v21;
  unint64_t v22;
  char *v23;
  __n128 v24;
  __n128 v25;
  char v26;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 952);
  if ((_DWORD)v5 == -1)
  {
LABEL_10:
    *(_DWORD *)(v4 + 952) = -1;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)v4 = 0;
    *(_OWORD *)v4 = *(_OWORD *)a3;
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(v4 + 24) = *(_QWORD *)(a3 + 24);
    v13 = (_QWORD *)(a3 + 32);
    v14 = *(_QWORD *)(a3 + 32);
    *(_QWORD *)(v4 + 32) = v14;
    v15 = v4 + 32;
    v16 = *(_QWORD *)(a3 + 40);
    *(_QWORD *)(v4 + 40) = v16;
    if (v16)
    {
      *(_QWORD *)(v14 + 16) = v15;
      *(_QWORD *)(a3 + 24) = v13;
      *v13 = 0;
      *(_QWORD *)(a3 + 40) = 0;
    }
    else
    {
      *(_QWORD *)(v4 + 24) = v15;
    }
    result = *(__n128 *)(a3 + 48);
    v18 = *(_OWORD *)(a3 + 64);
    v19 = *(_OWORD *)(a3 + 80);
    *(_DWORD *)(v4 + 96) = *(_DWORD *)(a3 + 96);
    *(_OWORD *)(v4 + 64) = v18;
    *(_OWORD *)(v4 + 80) = v19;
    *(__n128 *)(v4 + 48) = result;
    *(_DWORD *)(v4 + 952) = 7;
    return result;
  }
  if ((_DWORD)v5 != 7)
  {
    ((void (*)(char *, uint64_t))off_24C9FB418[v5])(&v26, v4);
    goto LABEL_10;
  }
  v7 = (char *)a2->n128_u64[0];
  if (a2->n128_u64[0])
  {
    v8 = (char *)a2->n128_u64[1];
    v9 = (char *)a2->n128_u64[0];
    if (v8 != v7)
    {
      v10 = (char *)a2->n128_u64[1];
      do
      {
        v12 = (void *)*((_QWORD *)v10 - 6);
        v10 -= 48;
        v11 = v12;
        if (v12)
        {
          *((_QWORD *)v8 - 5) = v11;
          operator delete(v11);
        }
        v8 = v10;
      }
      while (v10 != v7);
      v9 = (char *)a2->n128_u64[0];
    }
    a2->n128_u64[1] = (unint64_t)v7;
    operator delete(v9);
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
  }
  *a2 = *(__n128 *)a3;
  a2[1].n128_u64[0] = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v20 = (char *)&a2[2];
  sub_20E86872C((uint64_t)&a2[1].n128_i64[1], (_QWORD *)a2[2].n128_u64[0]);
  a2[1].n128_u64[1] = *(_QWORD *)(a3 + 24);
  v21 = (_QWORD *)(a3 + 32);
  v22 = *(_QWORD *)(a3 + 32);
  a2[2].n128_u64[0] = v22;
  v23 = *(char **)(a3 + 40);
  a2[2].n128_u64[1] = (unint64_t)v23;
  if (v23)
  {
    *(_QWORD *)(v22 + 16) = v20;
    *(_QWORD *)(a3 + 24) = v21;
    *v21 = 0;
    *(_QWORD *)(a3 + 40) = 0;
  }
  else
  {
    a2[1].n128_u64[1] = (unint64_t)v20;
  }
  result = *(__n128 *)(a3 + 48);
  v24 = *(__n128 *)(a3 + 64);
  v25 = *(__n128 *)(a3 + 80);
  a2[6].n128_u32[0] = *(_DWORD *)(a3 + 96);
  a2[4] = v24;
  a2[5] = v25;
  a2[3] = result;
  return result;
}

__n128 sub_20F223158(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 result;
  __int128 v12;

  *(_OWORD *)(a2 + 8) = 0u;
  v5 = a2 + 8;
  *(_QWORD *)(a2 + 24) = 0;
  v6 = a3 + 8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_QWORD *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a3 + 32);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a3 + 48);
  *(_QWORD *)(a3 + 48) = 0;
  *(_OWORD *)(a3 + 32) = 0u;
  memcpy((void *)(a2 + 56), (const void *)(a3 + 56), 0x2E8uLL);
  *(_QWORD *)(v5 + 792) = 0;
  *(_OWORD *)(v5 + 800) = 0u;
  *(_OWORD *)(v5 + 792) = *(_OWORD *)(v6 + 792);
  *(_QWORD *)(v5 + 808) = *(_QWORD *)(v6 + 808);
  *(_OWORD *)(v6 + 792) = 0u;
  *(_QWORD *)(v6 + 808) = 0;
  v7 = *(_OWORD *)(v6 + 828);
  *(_OWORD *)(v5 + 816) = *(_OWORD *)(v6 + 816);
  *(_OWORD *)(v5 + 828) = v7;
  *(_OWORD *)(v5 + 856) = 0u;
  *(_QWORD *)(v5 + 848) = 0;
  *(_QWORD *)(v5 + 848) = *(_QWORD *)(v6 + 848);
  *(_QWORD *)(v5 + 856) = *(_QWORD *)(v6 + 856);
  *(_QWORD *)(v5 + 864) = *(_QWORD *)(v6 + 864);
  *(_QWORD *)(v6 + 864) = 0;
  *(_OWORD *)(v6 + 848) = 0u;
  *(_QWORD *)(v5 + 872) = *(_QWORD *)(v6 + 872);
  *(_QWORD *)(v5 + 880) = *(_QWORD *)(v6 + 880);
  v8 = v5 + 888;
  v9 = *(_QWORD *)(v6 + 888);
  *(_QWORD *)(v5 + 888) = v9;
  v10 = *(_QWORD *)(v6 + 896);
  *(_QWORD *)(v5 + 896) = v10;
  if (v10)
  {
    *(_QWORD *)(v9 + 16) = v8;
    *(_QWORD *)(a3 + 888) = v6 + 888;
    *(_QWORD *)(v6 + 888) = 0;
    *(_QWORD *)(v6 + 896) = 0;
  }
  else
  {
    *(_QWORD *)(a2 + 888) = v8;
  }
  result = *(__n128 *)(a3 + 912);
  v12 = *(_OWORD *)(a3 + 928);
  *(_QWORD *)(a2 + 944) = *(_QWORD *)(a3 + 944);
  *(__n128 *)(a2 + 912) = result;
  *(_OWORD *)(a2 + 928) = v12;
  return result;
}

void *sub_20F2232A8(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;

  v3 = *a3;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)a3 + 2);
  *(_OWORD *)a2 = v3;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  return memcpy((void *)(a2 + 24), (char *)a3 + 24, 0x131uLL);
}

void *sub_20F2232D0(int a1, void *__dst, void *__src)
{
  return memcpy(__dst, __src, 0x1D8uLL);
}

__n128 sub_20F2232E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 result;
  __int128 v12;
  __int128 v13;

  sub_20EAC7338(a2 + 8, a3 + 8);
  *(_QWORD *)(a2 + 248) = 0;
  *(_QWORD *)(a2 + 256) = 0;
  *(_QWORD *)(a2 + 264) = 0;
  *(_OWORD *)(a2 + 248) = *(_OWORD *)(a3 + 248);
  *(_QWORD *)(a2 + 264) = *(_QWORD *)(a3 + 264);
  *(_QWORD *)(a3 + 248) = 0;
  *(_QWORD *)(a3 + 256) = 0;
  *(_QWORD *)(a3 + 264) = 0;
  *(_QWORD *)(a2 + 272) = 0;
  *(_QWORD *)(a2 + 280) = 0;
  *(_QWORD *)(a2 + 288) = 0;
  *(_OWORD *)(a2 + 272) = *(_OWORD *)(a3 + 272);
  *(_QWORD *)(a2 + 288) = *(_QWORD *)(a3 + 288);
  *(_QWORD *)(a3 + 272) = 0;
  *(_QWORD *)(a3 + 280) = 0;
  *(_QWORD *)(a3 + 288) = 0;
  v5 = *(_OWORD *)(a3 + 296);
  v6 = *(_OWORD *)(a3 + 328);
  *(_OWORD *)(a2 + 312) = *(_OWORD *)(a3 + 312);
  *(_OWORD *)(a2 + 328) = v6;
  *(_OWORD *)(a2 + 296) = v5;
  *(_QWORD *)(a2 + 352) = 0;
  *(_QWORD *)(a2 + 360) = 0;
  *(_QWORD *)(a2 + 344) = 0;
  v7 = *(_QWORD *)(a3 + 352);
  *(_QWORD *)(a2 + 344) = *(_QWORD *)(a3 + 344);
  *(_QWORD *)(a2 + 352) = v7;
  *(_QWORD *)(a2 + 360) = *(_QWORD *)(a3 + 360);
  *(_QWORD *)(a3 + 344) = 0;
  *(_QWORD *)(a3 + 352) = 0;
  *(_QWORD *)(a3 + 360) = 0;
  *(_QWORD *)(a2 + 368) = *(_QWORD *)(a3 + 368);
  v8 = a2 + 376;
  v9 = *(_QWORD *)(a3 + 376);
  *(_QWORD *)(a2 + 376) = v9;
  v10 = *(_QWORD *)(a3 + 384);
  *(_QWORD *)(a2 + 384) = v10;
  if (v10)
  {
    *(_QWORD *)(v9 + 16) = v8;
    *(_QWORD *)(a3 + 368) = a3 + 376;
    *(_QWORD *)(a3 + 376) = 0;
    *(_QWORD *)(a3 + 384) = 0;
  }
  else
  {
    *(_QWORD *)(a2 + 368) = v8;
  }
  result = *(__n128 *)(a3 + 392);
  v12 = *(_OWORD *)(a3 + 408);
  v13 = *(_OWORD *)(a3 + 424);
  *(_DWORD *)(a2 + 440) = *(_DWORD *)(a3 + 440);
  *(_OWORD *)(a2 + 408) = v12;
  *(_OWORD *)(a2 + 424) = v13;
  *(__n128 *)(a2 + 392) = result;
  return result;
}

__n128 sub_20F2233DC(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  a3->n128_u64[0] = 0;
  return result;
}

__n128 sub_20F2233F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v5;
  uint64_t v6;
  __int128 v7;
  __n128 result;
  __int128 v9;

  v5 = (_OWORD *)(a2 + 8);
  v6 = a3 + 8;
  memcpy((void *)(a2 + 8), (const void *)(a3 + 8), 0x2E8uLL);
  *(_QWORD *)(a2 + 752) = 0;
  v5[47] = 0u;
  *(_OWORD *)(a2 + 752) = *(_OWORD *)(a3 + 752);
  *(_QWORD *)(a2 + 768) = *(_QWORD *)(a3 + 768);
  *(_OWORD *)(a3 + 752) = 0u;
  *(_QWORD *)(a3 + 768) = 0;
  v7 = *(_OWORD *)(v6 + 780);
  v5[48] = *(_OWORD *)(v6 + 768);
  *(_OWORD *)((char *)v5 + 780) = v7;
  result = *(__n128 *)(a3 + 833);
  v9 = *(_OWORD *)(a3 + 824);
  *(_OWORD *)(a2 + 808) = *(_OWORD *)(a3 + 808);
  *(_OWORD *)(a2 + 824) = v9;
  *(__n128 *)(a2 + 833) = result;
  return result;
}

__n128 sub_20F22348C(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  result = *a3;
  *a2 = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  return result;
}

__n128 sub_20F2234B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
  v3 = (_QWORD *)(a3 + 32);
  v4 = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(a2 + 32) = v4;
  v5 = a2 + 32;
  v6 = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 40) = v6;
  if (v6)
  {
    *(_QWORD *)(v4 + 16) = v5;
    *(_QWORD *)(a3 + 24) = v3;
    *v3 = 0;
    *(_QWORD *)(a3 + 40) = 0;
  }
  else
  {
    *(_QWORD *)(a2 + 24) = v5;
  }
  result = *(__n128 *)(a3 + 48);
  v8 = *(_OWORD *)(a3 + 64);
  v9 = *(_OWORD *)(a3 + 80);
  *(_DWORD *)(a2 + 96) = *(_DWORD *)(a3 + 96);
  *(_OWORD *)(a2 + 64) = v8;
  *(_OWORD *)(a2 + 80) = v9;
  *(__n128 *)(a2 + 48) = result;
  return result;
}

char **sub_20F223524@<X0>(uint64_t **a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t *i;
  int v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  void *v26[2];
  void *__p[3];
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  _BYTE v40[288];
  _BYTE v41[288];
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  _DWORD *v59;

  v5 = **a1;
  *(_OWORD *)v26 = 0u;
  *(_OWORD *)__p = 0u;
  LODWORD(__p[2]) = 1065353216;
  for (i = *(uint64_t **)(v5 + 120); i; i = (uint64_t *)*i)
  {
    v7 = *((_DWORD *)i + 4);
    v59 = (_DWORD *)i + 5;
    *((_DWORD *)sub_20F2CE5F0((uint64_t)v26, (unsigned int *)i + 5, (uint64_t)&unk_2102DB95C, &v59) + 5) = v7;
  }
  sub_20F467994((uint64_t *)v26, a2);
  v8 = __p[0];
  if (__p[0])
  {
    do
    {
      v9 = (_QWORD *)*v8;
      operator delete(v8);
      v8 = v9;
    }
    while (v9);
  }
  v10 = v26[0];
  v26[0] = 0;
  if (v10)
    operator delete(v10);
  bzero(v26, 0x368uLL);
  *((_QWORD *)&v48 + 1) = 0xBFF0000000000000;
  *(_QWORD *)&v49 = 0;
  DWORD2(v49) = 0;
  v51 = 0uLL;
  v50 = -1;
  v52 = 0;
  v54 = 0;
  v56 = 0uLL;
  v55 = 0;
  v53 = &v54;
  BYTE4(v58) = 0;
  *(_QWORD *)&v57 = 0;
  BYTE8(v57) = 0;
  sub_20F4648A4((uint64_t)a2, (char **)v26);
  v11 = (char *)operator new(0x400uLL);
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *(_QWORD *)v11 = &off_24C9FB528;
  *(_OWORD *)(v11 + 24) = *(_OWORD *)v26;
  *((void **)v11 + 5) = __p[0];
  v26[0] = 0;
  v26[1] = 0;
  *((_OWORD *)v11 + 3) = *(_OWORD *)&__p[1];
  *((_QWORD *)v11 + 8) = v28;
  memset(__p, 0, sizeof(__p));
  v28 = 0;
  v12 = v29;
  v13 = v30;
  v14 = v32;
  *(_OWORD *)(v11 + 104) = v31;
  *(_OWORD *)(v11 + 88) = v13;
  *(_OWORD *)(v11 + 72) = v12;
  v15 = v36;
  *(_OWORD *)(v11 + 168) = v35;
  v16 = v33;
  *(_OWORD *)(v11 + 152) = v34;
  *(_OWORD *)(v11 + 136) = v16;
  *(_OWORD *)(v11 + 120) = v14;
  v17 = v37;
  v18 = v38;
  *((_QWORD *)v11 + 29) = v39;
  *(_OWORD *)(v11 + 216) = v18;
  *(_OWORD *)(v11 + 200) = v17;
  *(_OWORD *)(v11 + 184) = v15;
  memcpy(v11 + 240, v40, 0x120uLL);
  memcpy(v11 + 528, v41, 0x120uLL);
  *((_OWORD *)v11 + 51) = v42;
  *((_QWORD *)v11 + 104) = v43;
  v42 = 0uLL;
  v43 = 0;
  *(_OWORD *)(v11 + 840) = v44;
  *((_QWORD *)v11 + 107) = v45;
  *((_OWORD *)v11 + 54) = v46;
  *((_QWORD *)v11 + 110) = v47;
  v19 = v48;
  v20 = v49;
  *((_QWORD *)v11 + 115) = v50;
  *(_OWORD *)(v11 + 888) = v19;
  *(_OWORD *)(v11 + 904) = v20;
  *((_OWORD *)v11 + 58) = v51;
  *((_QWORD *)v11 + 118) = v52;
  v52 = 0;
  v51 = 0uLL;
  *((_QWORD *)v11 + 119) = v53;
  v21 = v11 + 960;
  v22 = v54;
  *((_QWORD *)v11 + 120) = v54;
  v23 = v55;
  *((_QWORD *)v11 + 121) = v55;
  if (v23)
  {
    *(_QWORD *)(v22 + 16) = v21;
    v53 = &v54;
    v54 = 0;
    v55 = 0;
  }
  else
  {
    *((_QWORD *)v11 + 119) = v21;
  }
  v24 = v57;
  *((_OWORD *)v11 + 61) = v56;
  *((_OWORD *)v11 + 62) = v24;
  *((_QWORD *)v11 + 126) = v58;
  *((_DWORD *)v11 + 254) = 0;
  *(_QWORD *)a3 = v11 + 24;
  *(_QWORD *)(a3 + 8) = v11;
  *(_BYTE *)(a3 + 16) = 1;
  return sub_20E9549C4((char **)v26);
}

void sub_20F2237E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9)
{
  sub_20E9549C4(&a9);
  _Unwind_Resume(a1);
}

void sub_20F2237F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9)
{
  sub_20E9549C4(&a9);
  _Unwind_Resume(a1);
}

void sub_20F223808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, _QWORD *__p)
{
  _QWORD *v12;
  _QWORD *v13;

  v12 = __p;
  if (__p)
  {
    do
    {
      v13 = (_QWORD *)*v12;
      operator delete(v12);
      v12 = v13;
    }
    while (v13);
  }
  if (a9)
  {
    operator delete(a9);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20F223850(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint64_t **v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  void *v24;
  int v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  char *v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  int v53;
  int v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  void *v71[2];
  _BYTE __p[24];
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  __int128 __src;
  uint64_t v94;
  unsigned __int8 v95;
  _DWORD *v96;

  v5 = *a1;
  v6 = **a1;
  *(_OWORD *)v71 = 0u;
  *(_OWORD *)__p = 0u;
  *(_DWORD *)&__p[16] = 1065353216;
  v7 = *(uint64_t **)(v6 + 120);
  if (v7)
  {
    do
    {
      v8 = *((_DWORD *)v7 + 4);
      v96 = (_DWORD *)v7 + 5;
      *((_DWORD *)sub_20F2CE5F0((uint64_t)v71, (unsigned int *)v7 + 5, (uint64_t)&unk_2102DB95C, &v96) + 5) = v8;
      v7 = (uint64_t *)*v7;
    }
    while (v7);
    if (v71[1])
    {
      v9 = *(unsigned int *)(a2 + 48);
      v10 = (uint8x8_t)vcnt_s8((int8x8_t)v71[1]);
      v10.i16[0] = vaddlv_u8(v10);
      if (v10.u32[0] > 1uLL)
      {
        v11 = *(unsigned int *)(a2 + 48);
        if (v71[1] <= (void *)v9)
          v11 = v9 % (unint64_t)v71[1];
      }
      else
      {
        v11 = (LODWORD(v71[1]) - 1) & v9;
      }
      v12 = (uint64_t **)*((_QWORD *)v71[0] + v11);
      if (v12)
      {
        v13 = *v12;
        if (v13)
        {
          if (v10.u32[0] < 2uLL)
          {
            while (1)
            {
              v15 = v13[1];
              if (v15 == v9)
              {
                if (*((_DWORD *)v13 + 4) == (_DWORD)v9)
                  goto LABEL_24;
              }
              else if ((v15 & ((unint64_t)v71[1] - 1)) != v11)
              {
                goto LABEL_25;
              }
              v13 = (uint64_t *)*v13;
              if (!v13)
                goto LABEL_25;
            }
          }
          do
          {
            v14 = v13[1];
            if (v14 == v9)
            {
              if (*((_DWORD *)v13 + 4) == (_DWORD)v9)
              {
LABEL_24:
                *(_DWORD *)(a2 + 48) = *((_DWORD *)v13 + 5);
                break;
              }
            }
            else
            {
              if ((void *)v14 >= v71[1])
                v14 %= (unint64_t)v71[1];
              if (v14 != v11)
                break;
            }
            v13 = (uint64_t *)*v13;
          }
          while (v13);
        }
      }
    }
  }
LABEL_25:
  v16 = *(_QWORD **)__p;
  if (*(_QWORD *)__p)
  {
    do
    {
      v17 = (_QWORD *)*v16;
      operator delete(v16);
      v16 = v17;
    }
    while (v17);
  }
  v18 = v71[0];
  v71[0] = 0;
  if (v18)
    operator delete(v18);
  if (*(_BYTE *)(a2 + 328))
  {
    v19 = *(unsigned int *)(a2 + 320);
    v20 = *(_QWORD *)(a2 + 312) & 0xFFFFFFFFFFFFFF00;
    v21 = *(_QWORD *)(a2 + 312);
    v22 = 1;
  }
  else
  {
    v22 = 0;
    v19 = 0;
    v21 = 0;
    v20 = 0;
  }
  v23 = *(_OWORD *)(a2 + 184);
  v24 = (void *)*(unsigned int *)(a2 + 40);
  v25 = *(_DWORD *)(a2 + 48);
  v27 = *(_OWORD *)(a2 + 152);
  v26 = *(_OWORD *)(a2 + 168);
  v29 = *(_OWORD *)(a2 + 120);
  v28 = *(_OWORD *)(a2 + 136);
  v31 = *(_OWORD *)(a2 + 88);
  v30 = *(_OWORD *)(a2 + 104);
  v33 = *(_OWORD *)(a2 + 56);
  v32 = *(_OWORD *)(a2 + 72);
  v35 = *(_OWORD *)(a2 + 280);
  v34 = *(_OWORD *)(a2 + 296);
  v36 = *(_OWORD *)(a2 + 248);
  v37 = *(_OWORD *)(a2 + 264);
  v39 = *(_OWORD *)(a2 + 216);
  v38 = *(_OWORD *)(a2 + 232);
  v40 = *(_OWORD *)(a2 + 200);
  v71[0] = *(void **)(a2 + 32);
  v71[1] = v24;
  *(_DWORD *)__p = v25;
  if (*(char *)(a2 + 23) < 0)
  {
    v69 = v26;
    v70 = v23;
    v67 = v36;
    v68 = v27;
    v65 = v38;
    v66 = v28;
    v63 = v29;
    v64 = v34;
    v61 = v35;
    v62 = v39;
    v59 = v40;
    v60 = v30;
    v57 = v31;
    v58 = v37;
    v55 = v33;
    v56 = v32;
    sub_20E860C04(&__p[8], *(void **)a2, *(_QWORD *)(a2 + 8));
    v33 = v55;
    v32 = v56;
    v31 = v57;
    v37 = v58;
    v40 = v59;
    v30 = v60;
    v35 = v61;
    v39 = v62;
    v29 = v63;
    v34 = v64;
    v38 = v65;
    v28 = v66;
    v36 = v67;
    v27 = v68;
    v26 = v69;
    v23 = v70;
  }
  else
  {
    *(_OWORD *)&__p[8] = *(_OWORD *)a2;
    v73 = *(_QWORD *)(a2 + 16);
  }
  v74 = *(_QWORD *)(a2 + 24);
  v75 = v33;
  v76 = v32;
  v77 = v31;
  v78 = v30;
  v79 = v29;
  v80 = v28;
  v81 = v27;
  v82 = v26;
  v88 = v37;
  v89 = v35;
  v90 = v34;
  v83 = v23;
  v84 = v40;
  v85 = v39;
  v86 = v38;
  v87 = v36;
  *(_QWORD *)&v91 = v20 | v21;
  *((_QWORD *)&v91 + 1) = v19;
  LOBYTE(v92) = v22;
  LOBYTE(__src) = 0;
  v95 = 0;
  v41 = *(_QWORD *)v5[1];
  if (*(_BYTE *)(v41 + 72))
    sub_20E869118((uint64_t)&__src, (_QWORD *)(v41 + 48));
  v42 = (char *)operator new(0x400uLL);
  v43 = v42;
  *((_QWORD *)v42 + 1) = 0;
  *((_QWORD *)v42 + 2) = 0;
  *(_QWORD *)v42 = &off_24C9FB528;
  *(_OWORD *)(v42 + 24) = *(_OWORD *)v71;
  *((_QWORD *)v42 + 5) = *(_QWORD *)__p;
  if (SHIBYTE(v73) < 0)
  {
    sub_20E860C04(v42 + 48, *(void **)&__p[8], *(unint64_t *)&__p[16]);
  }
  else
  {
    *((_OWORD *)v42 + 3) = *(_OWORD *)&__p[8];
    *((_QWORD *)v42 + 8) = v73;
  }
  *((_QWORD *)v43 + 9) = v74;
  v44 = v80;
  *((_OWORD *)v43 + 9) = v79;
  *((_OWORD *)v43 + 10) = v44;
  v45 = v82;
  *((_OWORD *)v43 + 11) = v81;
  *((_OWORD *)v43 + 12) = v45;
  v46 = v76;
  *((_OWORD *)v43 + 5) = v75;
  *((_OWORD *)v43 + 6) = v46;
  v47 = v78;
  *((_OWORD *)v43 + 7) = v77;
  *((_OWORD *)v43 + 8) = v47;
  v48 = v88;
  *((_OWORD *)v43 + 17) = v87;
  *((_OWORD *)v43 + 18) = v48;
  v49 = v90;
  *((_OWORD *)v43 + 19) = v89;
  *((_OWORD *)v43 + 20) = v49;
  v50 = v84;
  *((_OWORD *)v43 + 13) = v83;
  *((_OWORD *)v43 + 14) = v50;
  v51 = v86;
  *((_OWORD *)v43 + 15) = v85;
  *((_OWORD *)v43 + 16) = v51;
  v52 = v91;
  *((_QWORD *)v43 + 44) = v92;
  *((_OWORD *)v43 + 21) = v52;
  v43[360] = 0;
  v43[384] = 0;
  v53 = v95;
  if (v95)
  {
    if (SHIBYTE(v94) < 0)
    {
      sub_20E860C04(v43 + 360, (void *)__src, *((unint64_t *)&__src + 1));
      v54 = v95;
    }
    else
    {
      *(_OWORD *)(v43 + 360) = __src;
      *((_QWORD *)v43 + 47) = v94;
      v54 = 1;
    }
    v43[384] = 1;
    *((_DWORD *)v43 + 254) = 1;
    *(_QWORD *)a3 = v43 + 24;
    *(_QWORD *)(a3 + 8) = v43;
    *(_BYTE *)(a3 + 16) = 1;
    if (!v54)
      goto LABEL_49;
  }
  else
  {
    *((_DWORD *)v43 + 254) = 1;
    *(_QWORD *)a3 = v43 + 24;
    *(_QWORD *)(a3 + 8) = v43;
    *(_BYTE *)(a3 + 16) = 1;
    if (!v53)
      goto LABEL_49;
  }
  if (SHIBYTE(v94) < 0)
    operator delete((void *)__src);
LABEL_49:
  if (SHIBYTE(v73) < 0)
    operator delete(*(void **)&__p[8]);
}

void sub_20F223CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  uint64_t v51;
  void **v52;
  void **v53;
  void *v55;

  if (*(_BYTE *)(v51 + 384) && *(char *)(v51 + 383) < 0)
    operator delete(*v53);
  if (*(char *)(v51 + 71) < 0)
    operator delete(*v52);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v51);
  operator delete(v55);
  if (LOBYTE(STACK[0x278]) && SLOBYTE(STACK[0x277]) < 0)
    operator delete((void *)STACK[0x260]);
  if (a51 < 0)
  {
    operator delete(a46);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

__n128 sub_20F223D60@<Q0>(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t *v6;
  int v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  char *v18;
  __n128 result;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __n128 v45;
  __int128 v46;
  __int128 v47;
  int v48;
  _DWORD *v49;

  v5 = **a1;
  v46 = 0u;
  v47 = 0u;
  v48 = 1065353216;
  v6 = *(uint64_t **)(v5 + 120);
  if (!v6)
  {
    sub_20F467D8C(&v46, a2);
    v10 = (void *)v46;
    *(_QWORD *)&v46 = 0;
    if (!v10)
      goto LABEL_7;
    goto LABEL_6;
  }
  do
  {
    v7 = *((_DWORD *)v6 + 4);
    v49 = (_DWORD *)v6 + 5;
    *((_DWORD *)sub_20F2CE5F0((uint64_t)&v46, (unsigned int *)v6 + 5, (uint64_t)&unk_2102DB95C, &v49) + 5) = v7;
    v6 = (uint64_t *)*v6;
  }
  while (v6);
  v8 = (_QWORD *)v47;
  sub_20F467D8C(&v46, a2);
  if (v8)
  {
    do
    {
      v9 = (_QWORD *)*v8;
      operator delete(v8);
      v8 = v9;
    }
    while (v9);
  }
  v10 = (void *)v46;
  *(_QWORD *)&v46 = 0;
  if (v10)
LABEL_6:
    operator delete(v10);
LABEL_7:
  v11 = *(_QWORD *)a2;
  v12 = *(unsigned int *)(a2 + 8);
  v13 = *(_DWORD *)(a2 + 16);
  v14 = *(_QWORD *)(a2 + 24);
  v15 = *(unsigned int *)(a2 + 32);
  v16 = *(_DWORD *)(a2 + 40);
  v29 = *(_OWORD *)(a2 + 64);
  v30 = *(_OWORD *)(a2 + 48);
  v27 = *(_OWORD *)(a2 + 96);
  v28 = *(_OWORD *)(a2 + 80);
  v25 = *(_OWORD *)(a2 + 128);
  v26 = *(_OWORD *)(a2 + 112);
  v23 = *(_OWORD *)(a2 + 160);
  v24 = *(_OWORD *)(a2 + 144);
  v44 = *(_OWORD *)(a2 + 256);
  v45 = *(__n128 *)(a2 + 240);
  v42 = *(_OWORD *)(a2 + 288);
  v43 = *(_OWORD *)(a2 + 272);
  v40 = *(_OWORD *)(a2 + 320);
  v41 = *(_OWORD *)(a2 + 304);
  v39 = *(_OWORD *)(a2 + 336);
  v37 = *(_OWORD *)(a2 + 368);
  v38 = *(_OWORD *)(a2 + 352);
  v35 = *(_OWORD *)(a2 + 400);
  v36 = *(_OWORD *)(a2 + 384);
  v33 = *(_OWORD *)(a2 + 432);
  v34 = *(_OWORD *)(a2 + 416);
  v31 = *(_OWORD *)(a2 + 176);
  v32 = *(_OWORD *)(a2 + 448);
  v21 = *(_OWORD *)(a2 + 208);
  v22 = *(_OWORD *)(a2 + 192);
  v20 = *(_OWORD *)(a2 + 224);
  v17 = *(_DWORD *)(a2 + 464);
  v18 = (char *)operator new(0x400uLL);
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = &off_24C9FB528;
  *((_QWORD *)v18 + 4) = v12;
  *((_DWORD *)v18 + 10) = v13;
  *((_QWORD *)v18 + 6) = v14;
  *((_QWORD *)v18 + 7) = v15;
  *((_DWORD *)v18 + 16) = v16;
  *(_OWORD *)(v18 + 184) = v23;
  *(_OWORD *)(v18 + 168) = v24;
  *(_OWORD *)(v18 + 152) = v25;
  *(_OWORD *)(v18 + 136) = v26;
  *(_OWORD *)(v18 + 120) = v27;
  *(_OWORD *)(v18 + 104) = v28;
  *(_OWORD *)(v18 + 88) = v29;
  *(_OWORD *)(v18 + 72) = v30;
  *(_OWORD *)(v18 + 248) = v20;
  *(_OWORD *)(v18 + 232) = v21;
  *(_OWORD *)(v18 + 216) = v22;
  *((_DWORD *)v18 + 122) = v17;
  v18[492] = 0;
  *((_DWORD *)v18 + 254) = 2;
  *((_QWORD *)v18 + 3) = v11;
  *(_OWORD *)(v18 + 200) = v31;
  *(_QWORD *)(a3 + 8) = v18;
  *(_OWORD *)(v18 + 456) = v33;
  *(_OWORD *)(v18 + 472) = v32;
  *(_OWORD *)(v18 + 424) = v35;
  *(_OWORD *)(v18 + 440) = v34;
  *(_OWORD *)(v18 + 392) = v37;
  *(_OWORD *)(v18 + 408) = v36;
  *(_OWORD *)(v18 + 360) = v39;
  *(_OWORD *)(v18 + 376) = v38;
  *(_OWORD *)(v18 + 328) = v41;
  *(_OWORD *)(v18 + 344) = v40;
  *(_OWORD *)(v18 + 296) = v43;
  *(_OWORD *)(v18 + 312) = v42;
  result = v45;
  *(__n128 *)(v18 + 264) = v45;
  *(_OWORD *)(v18 + 280) = v44;
  *(_QWORD *)a3 = v18 + 24;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20F223FD0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  v3 = *(_QWORD **)(v1 - 128);
  if (v3)
  {
    do
    {
      v4 = (_QWORD *)*v3;
      operator delete(v3);
      v3 = v4;
    }
    while (v4);
  }
  v5 = *(void **)(v1 - 144);
  *(_QWORD *)(v1 - 144) = 0;
  if (v5)
    operator delete(v5);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F224004@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t *i;
  int v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  void *v14[2];
  void *__p[2];
  int v16;
  _DWORD *v17;

  v5 = **a1;
  *(_OWORD *)v14 = 0u;
  *(_OWORD *)__p = 0u;
  v16 = 1065353216;
  for (i = *(uint64_t **)(v5 + 120); i; i = (uint64_t *)*i)
  {
    v7 = *((_DWORD *)i + 4);
    v17 = (_DWORD *)i + 5;
    *((_DWORD *)sub_20F2CE5F0((uint64_t)v14, (unsigned int *)i + 5, (uint64_t)&unk_2102DB95C, &v17) + 5) = v7;
  }
  sub_20F448AAC((uint64_t *)v14, a2);
  v8 = __p[0];
  if (__p[0])
  {
    do
    {
      v9 = (_QWORD *)*v8;
      operator delete(v8);
      v8 = v9;
    }
    while (v9);
  }
  v10 = v14[0];
  v14[0] = 0;
  if (v10)
    operator delete(v10);
  sub_20E955E54();
  v11 = operator new(0x400uLL);
  v11[1] = 0;
  v11[2] = 0;
  *v11 = &off_24C9FB528;
  sub_20E9573E4((uint64_t)(v11 + 3), (uint64_t *)v14);
  *((_DWORD *)v11 + 254) = 3;
  *(_QWORD *)a3 = v12;
  *(_QWORD *)(a3 + 8) = v11;
  *(_BYTE *)(a3 + 16) = 1;
  return sub_20E9545B0((uint64_t)v14);
}

void sub_20F224110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E9545B0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20F224124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, _QWORD *__p)
{
  _QWORD *v12;
  _QWORD *v13;

  v12 = __p;
  if (__p)
  {
    do
    {
      v13 = (_QWORD *)*v12;
      operator delete(v12);
      v12 = v13;
    }
    while (v13);
  }
  if (a9)
  {
    operator delete(a9);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

double sub_20F22416C@<D0>(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t *v6;
  int v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  char *v11;
  double result;
  void *v13[2];
  void *__p[2];
  int v15;
  _DWORD *v16;

  v5 = **a1;
  *(_OWORD *)v13 = 0u;
  *(_OWORD *)__p = 0u;
  v15 = 1065353216;
  v6 = *(uint64_t **)(v5 + 120);
  if (v6)
  {
    do
    {
      v7 = *((_DWORD *)v6 + 4);
      v16 = (_DWORD *)v6 + 5;
      *((_DWORD *)sub_20F2CE5F0((uint64_t)v13, (unsigned int *)v6 + 5, (uint64_t)&unk_2102DB95C, &v16) + 5) = v7;
      v6 = (uint64_t *)*v6;
    }
    while (v6);
    v8 = __p[0];
    if (__p[0])
    {
      do
      {
        v9 = (_QWORD *)*v8;
        operator delete(v8);
        v8 = v9;
      }
      while (v9);
    }
    v10 = v13[0];
    v13[0] = 0;
    if (v10)
      operator delete(v10);
  }
  else
  {
    v13[0] = 0;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    sub_20E860C04(v13, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)v13 = *(_OWORD *)a2;
    __p[0] = *(void **)(a2 + 16);
  }
  v11 = (char *)operator new(0x400uLL);
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *(_QWORD *)v11 = &off_24C9FB528;
  result = *(double *)v13;
  *(_OWORD *)(v11 + 24) = *(_OWORD *)v13;
  *((void **)v11 + 5) = __p[0];
  *((_DWORD *)v11 + 254) = 4;
  *(_QWORD *)a3 = v11 + 24;
  *(_QWORD *)(a3 + 8) = v11;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20F224298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20F2242C8(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[16] = 0;
}

__n128 sub_20F2242D4@<Q0>(uint64_t **a1@<X0>, char ***a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t *v6;
  int v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  char *v12;
  __n128 result;
  __n128 v14;
  void *v15[2];
  void *__p[2];
  int v17;
  _DWORD *v18;

  v5 = **a1;
  *(_OWORD *)v15 = 0u;
  *(_OWORD *)__p = 0u;
  v17 = 1065353216;
  v6 = *(uint64_t **)(v5 + 120);
  if (v6)
  {
    do
    {
      v7 = *((_DWORD *)v6 + 4);
      v18 = (_DWORD *)v6 + 5;
      *((_DWORD *)sub_20F2CE5F0((uint64_t)v15, (unsigned int *)v6 + 5, (uint64_t)&unk_2102DB95C, &v18) + 5) = v7;
      v6 = (uint64_t *)*v6;
    }
    while (v6);
    v8 = __p[0];
    if (__p[0])
    {
      do
      {
        v9 = (_QWORD *)*v8;
        operator delete(v8);
        v8 = v9;
      }
      while (v9);
    }
    v10 = v15[0];
    v15[0] = 0;
    if (v10)
      operator delete(v10);
  }
  else
  {
    v15[0] = 0;
  }
  sub_20E958568(a2, (uint64_t)v15);
  v11 = __p[0];
  v14 = *(__n128 *)v15;
  v12 = (char *)operator new(0x400uLL);
  *((_QWORD *)v12 + 1) = 0;
  *((_QWORD *)v12 + 2) = 0;
  *(_QWORD *)v12 = &off_24C9FB528;
  result = v14;
  *(__n128 *)(v12 + 24) = v14;
  *((_QWORD *)v12 + 5) = v11;
  *((_DWORD *)v12 + 254) = 6;
  *(_QWORD *)a3 = v12 + 24;
  *(_QWORD *)(a3 + 8) = v12;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20F2243EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, char a10)
{
  if ((_QWORD)a9)
  {
    operator delete((void *)a9);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20F22441C(uint64_t **a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t *i;
  int v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  char *v11;
  void *v12;
  void *v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  __int128 v17;
  char *v18;
  char *v19;
  void *v20;
  void *v21;
  void *v22[2];
  void *__p[2];
  _QWORD *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  int v29;
  _DWORD *v30;

  v5 = **a1;
  *(_OWORD *)v22 = 0u;
  *(_OWORD *)__p = 0u;
  LODWORD(v24) = 1065353216;
  for (i = *(uint64_t **)(v5 + 120); i; i = (uint64_t *)*i)
  {
    v7 = *((_DWORD *)i + 4);
    v30 = (_DWORD *)i + 5;
    *((_DWORD *)sub_20F2CE5F0((uint64_t)v22, (unsigned int *)i + 5, (uint64_t)&unk_2102DB95C, &v30) + 5) = v7;
  }
  sub_20F46840C((uint64_t *)v22, a2);
  v8 = __p[0];
  if (__p[0])
  {
    do
    {
      v9 = (_QWORD *)*v8;
      operator delete(v8);
      v8 = v9;
    }
    while (v9);
  }
  v10 = v22[0];
  v22[0] = 0;
  if (v10)
    operator delete(v10);
  sub_20E958C58((uint64_t)a2, (uint64_t *)v22);
  v11 = (char *)operator new(0x400uLL);
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *(_QWORD *)v11 = &off_24C9FB528;
  *(_OWORD *)(v11 + 24) = *(_OWORD *)v22;
  v22[0] = 0;
  v22[1] = 0;
  v12 = __p[0];
  v13 = __p[1];
  __p[0] = 0;
  *((_QWORD *)v11 + 5) = v12;
  *((_QWORD *)v11 + 6) = v13;
  v14 = v24;
  v15 = v25;
  *((_QWORD *)v11 + 7) = v24;
  v16 = v11 + 56;
  *((_QWORD *)v11 + 8) = v15;
  if (v15)
  {
    v14[2] = v16;
    __p[1] = &v24;
    v24 = 0;
    v25 = 0;
    v14 = 0;
  }
  else
  {
    *((_QWORD *)v11 + 6) = v16;
  }
  v17 = v27;
  *(_OWORD *)(v11 + 72) = v26;
  *(_OWORD *)(v11 + 88) = v17;
  *(_OWORD *)(v11 + 104) = v28;
  *((_DWORD *)v11 + 30) = v29;
  *((_DWORD *)v11 + 254) = 7;
  *(_QWORD *)a3 = v11 + 24;
  *(_QWORD *)(a3 + 8) = v11;
  *(_BYTE *)(a3 + 16) = 1;
  sub_20E86872C((uint64_t)&__p[1], v14);
  v18 = (char *)v22[0];
  if (v22[0])
  {
    v19 = (char *)v22[1];
    v20 = v22[0];
    if (v22[1] != v22[0])
    {
      do
      {
        v21 = (void *)*((_QWORD *)v19 - 3);
        if (v21)
        {
          *((_QWORD *)v19 - 2) = v21;
          operator delete(v21);
        }
        v19 -= 48;
      }
      while (v19 != v18);
      v20 = v22[0];
    }
    v22[1] = v18;
    operator delete(v20);
  }
}

void sub_20F2245D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, char *a10, void *a11, uint64_t a12, _QWORD *a13)
{
  uint64_t v13;
  char *v15;
  char *v16;
  void *v17;

  sub_20E86872C(v13 + 24, a13);
  if (__p)
  {
    v15 = a10;
    v16 = __p;
    if (a10 != __p)
    {
      do
      {
        v17 = (void *)*((_QWORD *)v15 - 3);
        if (v17)
        {
          *((_QWORD *)v15 - 2) = v17;
          operator delete(v17);
        }
        v15 -= 48;
      }
      while (v15 != __p);
      v16 = __p;
    }
    operator delete(v16);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20F22467C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9FB528;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20F22468C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9FB528;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F2246BC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = result;
  v2 = *(unsigned int *)(result + 1016);
  if ((_DWORD)v2 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_24C9FB568[v2])(&v3, result + 24);
  *(_DWORD *)(v1 + 1016) = -1;
  return result;
}

uint64_t sub_20F224714@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  char *v10;
  __int128 *v11;
  char *v12;
  __int128 v13;
  uint64_t *v14;
  __int128 v15;
  uint64_t v16;
  void **v17;
  char *v18;
  void **v19;
  char *v20;
  uint64_t *v23;
  _QWORD *v24;
  int v25;
  size_t v26;
  unint64_t v27;
  __int128 *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 *p_dst;
  char *v32;
  void *v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  uint64_t v41;
  void **v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  void **v45;
  __int128 v46;
  char *v47;
  std::__shared_weak_count *v48;
  std::__shared_weak_count *v49;
  std::__shared_weak_count *v50;
  uint64_t v51;
  void **v52;
  unint64_t *v53;
  unint64_t v54;
  void **v55;
  void *v56;
  __int128 v57;
  char *v58;
  __int128 v59;
  _BOOL4 v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  __int128 v65;
  char *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  __int128 *v70;
  char *v71;
  __int128 *v72;
  char *v73;
  __int128 v74;
  char *v75;
  void *v76;
  __int128 v77;
  uint64_t v78;
  __int128 v79;
  uint64_t *v80;
  __int128 v81;
  uint64_t v82;
  void **v83;
  char *v84;
  void **v85;
  char *v86;
  int v89;
  size_t v90;
  unint64_t v91;
  __int128 *v92;
  uint64_t v93;
  uint64_t v94;
  __int128 *v95;
  char *v96;
  void *v97;
  __int128 v98;
  uint64_t v99;
  __int128 v100;
  std::__shared_weak_count *v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count *v103;
  uint64_t v104;
  void **v105;
  unint64_t *v106;
  unint64_t v107;
  void **v108;
  __int128 v109;
  char *v110;
  std::__shared_weak_count *v111;
  std::__shared_weak_count *v112;
  std::__shared_weak_count *v113;
  uint64_t v114;
  void **v115;
  unint64_t *v116;
  unint64_t v117;
  void **v118;
  void *v119;
  __int128 v120;
  char *v121;
  _BOOL4 v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  void *v127;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  void *v132;
  char *v133;
  unint64_t v134;
  void *v135;
  char *v136;
  unint64_t v137;
  void **v138;
  void **v139;
  uint64_t v140;
  void *v141[2];
  uint64_t v142;
  void *v143[2];
  __int128 v144;
  unint64_t v145;
  __int128 __p;
  _BYTE v147[24];
  uint64_t v148;
  __int128 v149;
  uint64_t v150;
  __int128 __dst;
  int64_t v152;
  _BYTE v153[128];
  _QWORD v154[19];

  v154[16] = *MEMORY[0x24BDAC8D0];
  v3 = *(uint64_t **)(a1 + 56);
  v4 = *v3;
  v135 = 0;
  v136 = 0;
  v137 = 0;
  v132 = 0;
  v133 = 0;
  v134 = 0;
  v5 = *(_QWORD *)(v4 + 72);
  if (v5)
  {
    if ((*(char *)(v5 + 31) & 0x80000000) == 0)
    {
LABEL_3:
      v6 = *(_OWORD *)(v5 + 8);
      v152 = *(_QWORD *)(v5 + 24);
      __dst = v6;
      goto LABEL_7;
    }
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Node.h", 220, (uint64_t)"channels_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v5 = *(_QWORD *)(v4 + 72);
    if ((*(char *)(v5 + 31) & 0x80000000) == 0)
      goto LABEL_3;
  }
  sub_20E860C04(&__dst, *(void **)(v5 + 8), *(_QWORD *)(v5 + 16));
LABEL_7:
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 96) + 48))(*(_QWORD *)(v5 + 96));
  sub_20F2263E8();
  if (byte_254A6842F < 0)
  {
    sub_20E860C04(&v149, (void *)xmmword_254A68418, *((unint64_t *)&xmmword_254A68418 + 1));
  }
  else
  {
    v149 = xmmword_254A68418;
    v150 = unk_254A68428;
  }
  v8 = HIBYTE(v150);
  if (v150 >= 0)
  {
    v9 = &v149;
  }
  else
  {
    v8 = *((_QWORD *)&v149 + 1);
    v9 = (__int128 *)v149;
  }
  if (v8 >= 4)
  {
    v10 = (char *)v9 + v8;
    v11 = v9;
    do
    {
      v12 = (char *)memchr(v11, 118, v8 - 3);
      if (!v12)
        break;
      if (*(_DWORD *)v12 == 1684631414)
      {
        if (v12 == v10 || v12 - (char *)v9 == -1)
          break;
        v143[0] = (void *)v7;
        LODWORD(v143[1]) = 4;
        if (SHIBYTE(v152) < 0)
        {
          sub_20E860C04(&v144, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v144 = __dst;
          v145 = v152;
        }
        if (*(char *)(v5 + 55) < 0)
        {
          sub_20E860C04(&__p, *(void **)(v5 + 32), *(_QWORD *)(v5 + 40));
        }
        else
        {
          v129 = *(_OWORD *)(v5 + 32);
          *(_QWORD *)v147 = *(_QWORD *)(v5 + 48);
          __p = v129;
        }
        sub_20F227E74();
        if ((byte_254A68717 & 0x80000000) == 0)
        {
          *(_OWORD *)&v147[8] = xmmword_254A68700;
          v148 = unk_254A68710;
          goto LABEL_34;
        }
        goto LABEL_31;
      }
      v11 = (__int128 *)(v12 + 1);
      v8 = v10 - (char *)v11;
    }
    while (v10 - (char *)v11 >= 4);
  }
  v143[0] = (void *)v7;
  LODWORD(v143[1]) = 2;
  if (SHIBYTE(v152) < 0)
  {
    sub_20E860C04(&v144, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v144 = __dst;
    v145 = v152;
  }
  if (*(char *)(v5 + 55) < 0)
  {
    sub_20E860C04(&__p, *(void **)(v5 + 32), *(_QWORD *)(v5 + 40));
  }
  else
  {
    v13 = *(_OWORD *)(v5 + 32);
    *(_QWORD *)v147 = *(_QWORD *)(v5 + 48);
    __p = v13;
  }
  sub_20F227E74();
  if (byte_254A68717 < 0)
  {
LABEL_31:
    sub_20E860C04(&v147[8], (void *)xmmword_254A68700, *((unint64_t *)&xmmword_254A68700 + 1));
  }
  else
  {
    *(_OWORD *)&v147[8] = xmmword_254A68700;
    v148 = unk_254A68710;
  }
LABEL_34:
  v136 = sub_20EBA558C((char **)&v135, (uint64_t)v143);
  if ((SHIBYTE(v148) & 0x80000000) == 0)
  {
    if ((v147[7] & 0x80000000) == 0)
      goto LABEL_36;
LABEL_32:
    operator delete((void *)__p);
    if ((SHIBYTE(v145) & 0x80000000) == 0)
      goto LABEL_37;
    goto LABEL_33;
  }
  operator delete(*(void **)&v147[8]);
  if ((v147[7] & 0x80000000) != 0)
    goto LABEL_32;
LABEL_36:
  if (SHIBYTE(v145) < 0)
LABEL_33:
    operator delete((void *)v144);
LABEL_37:
  v131 = v4;
  v14 = sub_20EBA4AA4();
  if (*((char *)v14 + 23) < 0)
  {
    sub_20E860C04(v141, (void *)*v14, v14[1]);
  }
  else
  {
    v15 = *(_OWORD *)v14;
    v142 = v14[2];
    *(_OWORD *)v141 = v15;
  }
  v16 = HIBYTE(v142);
  if (v142 >= 0)
  {
    v17 = v141;
  }
  else
  {
    v16 = (uint64_t)v141[1];
    v17 = (void **)v141[0];
  }
  if (v16 >= 18)
  {
    v18 = (char *)v17 + v16;
    v19 = v17;
    do
    {
      v20 = (char *)memchr(v19, 67, v16 - 17);
      if (!v20)
        break;
      if (*(_QWORD *)v20 == 0x456C656E6E616843
        && *((_QWORD *)v20 + 1) == 0x696F763C726F7272
        && *((_WORD *)v20 + 8) == 15972)
      {
        if (v20 != v18 && v20 - (char *)v17 != -1)
          goto LABEL_81;
        break;
      }
      v19 = (void **)(v20 + 1);
      v16 = v18 - (char *)v19;
    }
    while (v18 - (char *)v19 >= 18);
  }
  v23 = v3;
  v24 = a2;
  v143[0] = (void *)(v7 + 1);
  LODWORD(v143[1]) = 3;
  v25 = SHIBYTE(v152);
  if (v152 >= 0)
    v26 = HIBYTE(v152);
  else
    v26 = *((_QWORD *)&__dst + 1);
  v27 = v26 + 6;
  if (v26 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v27 >= 0x17)
  {
    v29 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v29 = v27 | 7;
    v30 = v29 + 1;
    v28 = (__int128 *)operator new(v29 + 1);
    *((_QWORD *)&v144 + 1) = v26 + 6;
    v145 = v30 | 0x8000000000000000;
    *(_QWORD *)&v144 = v28;
  }
  else
  {
    v145 = 0;
    v144 = 0uLL;
    v28 = &v144;
    HIBYTE(v145) = v26 + 6;
    if (!v26)
      goto LABEL_73;
  }
  if (v25 >= 0)
    p_dst = &__dst;
  else
    p_dst = (__int128 *)__dst;
  memmove(v28, p_dst, v26);
LABEL_73:
  strcpy((char *)v28 + v26, ".Error");
  *(_WORD *)&v147[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v148) = 0;
  v32 = v136;
  a2 = v24;
  if ((unint64_t)v136 >= v137)
  {
    v3 = v23;
    v136 = sub_20EBA558C((char **)&v135, (uint64_t)v143);
    if (SHIBYTE(v148) < 0)
    {
      operator delete(*(void **)&v147[8]);
      if ((v147[7] & 0x80000000) == 0)
        goto LABEL_80;
    }
    else if ((v147[7] & 0x80000000) == 0)
    {
      goto LABEL_80;
    }
LABEL_75:
    operator delete((void *)__p);
    if (SHIBYTE(v145) < 0)
      goto LABEL_76;
    goto LABEL_81;
  }
  v33 = v143[0];
  *((_DWORD *)v136 + 2) = v143[1];
  *(_QWORD *)v32 = v33;
  v34 = v144;
  *((_QWORD *)v32 + 4) = v145;
  *((_OWORD *)v32 + 1) = v34;
  v145 = 0;
  v144 = 0uLL;
  v35 = *(_QWORD *)v147;
  *(_OWORD *)(v32 + 40) = __p;
  *((_QWORD *)v32 + 7) = v35;
  *(_QWORD *)v147 = 0;
  __p = 0uLL;
  v36 = *(_OWORD *)&v147[8];
  *((_QWORD *)v32 + 10) = v148;
  *((_OWORD *)v32 + 4) = v36;
  *(_QWORD *)&v147[8] = 0;
  *(_QWORD *)&v147[16] = 0;
  v148 = 0;
  v136 = v32 + 88;
  v3 = v23;
  if ((v147[7] & 0x80000000) != 0)
    goto LABEL_75;
LABEL_80:
  if (SHIBYTE(v145) < 0)
  {
LABEL_76:
    operator delete((void *)v144);
    v37 = *(std::__shared_weak_count **)(v5 + 136);
    if (!v37)
      goto LABEL_85;
    goto LABEL_82;
  }
LABEL_81:
  v37 = *(std::__shared_weak_count **)(v5 + 136);
  if (!v37)
  {
LABEL_85:
    v138 = 0;
    v139 = 0;
    v140 = 0;
    v41 = v131;
    v42 = 0;
    goto LABEL_86;
  }
LABEL_82:
  v38 = std::__shared_weak_count::lock(v37);
  if (!v38)
    goto LABEL_85;
  v39 = v38;
  v40 = *(_QWORD *)(v5 + 128);
  v41 = v131;
  if (v40)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v40 + 24))(&v138);
  }
  else
  {
    v138 = 0;
    v139 = 0;
    v140 = 0;
  }
  p_shared_owners = (unint64_t *)&v39->__shared_owners_;
  do
    v44 = __ldaxr(p_shared_owners);
  while (__stlxr(v44 - 1, p_shared_owners));
  if (v44)
  {
    v42 = v138;
    v45 = v139;
    if (v138 != v139)
      goto LABEL_98;
LABEL_86:
    if (!v42)
      goto LABEL_103;
    goto LABEL_102;
  }
  ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
  std::__shared_weak_count::__release_weak(v39);
  v42 = v138;
  v45 = v139;
  if (v138 == v139)
    goto LABEL_86;
  do
  {
LABEL_98:
    v143[0] = (void *)v7;
    v143[1] = *v42;
    v145 = 0;
    v144 = 0uLL;
    v47 = v133;
    if ((unint64_t)v133 < v134)
    {
      *(_OWORD *)v133 = *(_OWORD *)v143;
      v46 = v144;
      *((_QWORD *)v47 + 4) = v145;
      *((_OWORD *)v47 + 1) = v46;
      v133 = v47 + 40;
    }
    else
    {
      v133 = sub_20EBA5F8C(&v132, (uint64_t)v143);
      if (SHIBYTE(v145) < 0)
        operator delete((void *)v144);
    }
    ++v42;
  }
  while (v42 != v45);
  v42 = v138;
  if (v138)
  {
LABEL_102:
    v139 = v42;
    operator delete(v42);
  }
LABEL_103:
  v48 = *(std::__shared_weak_count **)(v5 + 136);
  if (!v48 || (v49 = std::__shared_weak_count::lock(v48)) == 0)
  {
    v138 = 0;
    v139 = 0;
    v140 = 0;
    v52 = 0;
    goto LABEL_122;
  }
  v50 = v49;
  v51 = *(_QWORD *)(v5 + 128);
  if (v51)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v51 + 32))(&v138);
  }
  else
  {
    v138 = 0;
    v139 = 0;
    v140 = 0;
  }
  v53 = (unint64_t *)&v50->__shared_owners_;
  do
    v54 = __ldaxr(v53);
  while (__stlxr(v54 - 1, v53));
  if (v54)
  {
    v52 = v138;
    v55 = v139;
    if (v138 == v139)
      goto LABEL_122;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
    std::__shared_weak_count::__release_weak(v50);
    v52 = v138;
    v55 = v139;
    if (v138 == v139)
      goto LABEL_122;
  }
  v56 = (void *)(v7 + 1);
  do
  {
    v143[0] = v56;
    v143[1] = *v52;
    v145 = 0;
    v144 = 0uLL;
    v58 = v133;
    if ((unint64_t)v133 < v134)
    {
      *(_OWORD *)v133 = *(_OWORD *)v143;
      v57 = v144;
      *((_QWORD *)v58 + 4) = v145;
      *((_OWORD *)v58 + 1) = v57;
      v133 = v58 + 40;
    }
    else
    {
      v133 = sub_20EBA5F8C(&v132, (uint64_t)v143);
      if (SHIBYTE(v145) < 0)
        operator delete((void *)v144);
    }
    ++v52;
  }
  while (v52 != v55);
  v52 = v138;
LABEL_122:
  if (v52)
  {
    v139 = v52;
    operator delete(v52);
  }
  if (SHIBYTE(v142) < 0)
  {
    operator delete(v141[0]);
    if ((SHIBYTE(v150) & 0x80000000) == 0)
    {
LABEL_126:
      if ((SHIBYTE(v152) & 0x80000000) == 0)
        goto LABEL_127;
LABEL_131:
      operator delete((void *)__dst);
      if ((*(char *)(v41 + 31) & 0x80000000) == 0)
        goto LABEL_128;
      goto LABEL_132;
    }
  }
  else if ((SHIBYTE(v150) & 0x80000000) == 0)
  {
    goto LABEL_126;
  }
  operator delete((void *)v149);
  if (SHIBYTE(v152) < 0)
    goto LABEL_131;
LABEL_127:
  if ((*(char *)(v41 + 31) & 0x80000000) == 0)
  {
LABEL_128:
    v59 = *(_OWORD *)(v41 + 8);
    *(_QWORD *)&v144 = *(_QWORD *)(v41 + 24);
    *(_OWORD *)v143 = v59;
    goto LABEL_133;
  }
LABEL_132:
  sub_20E860C04(v143, *(void **)(v41 + 8), *(_QWORD *)(v41 + 16));
LABEL_133:
  v60 = *(_QWORD *)(v41 + 56) != 0;
  if (*(char *)(v41 + 55) < 0)
  {
    sub_20E860C04(&__dst, *(void **)(v41 + 32), *(_QWORD *)(v41 + 40));
  }
  else
  {
    __dst = *(_OWORD *)(v41 + 32);
    v152 = *(_QWORD *)(v41 + 48);
  }
  sub_20EBA690C((uint64_t)v153, (__int128 *)v143, v60, (uint64_t *)&v135, (uint64_t *)&v132, &__dst);
  if (SHIBYTE(v152) < 0)
  {
    operator delete((void *)__dst);
    if ((SBYTE7(v144) & 0x80000000) == 0)
    {
LABEL_138:
      v61 = (char *)v132;
      if (v132)
        goto LABEL_139;
LABEL_151:
      v63 = (char *)v135;
      if (v135)
        goto LABEL_152;
      goto LABEL_141;
    }
  }
  else if ((SBYTE7(v144) & 0x80000000) == 0)
  {
    goto LABEL_138;
  }
  operator delete(v143[0]);
  v61 = (char *)v132;
  if (!v132)
    goto LABEL_151;
LABEL_139:
  v62 = v133;
  if (v133 != v61)
  {
    do
    {
      if (*(v62 - 1) < 0)
        operator delete(*((void **)v62 - 3));
      v62 -= 40;
    }
    while (v62 != v61);
    v133 = v61;
    operator delete(v132);
    v63 = (char *)v135;
    if (v135)
      goto LABEL_152;
LABEL_141:
    v135 = 0;
    v136 = 0;
    v137 = 0;
    v132 = 0;
    v133 = 0;
    v134 = 0;
    v64 = v3[10];
    if (v64)
      goto LABEL_142;
LABEL_164:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Node.h", 220, (uint64_t)"channels_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v64 = v3[10];
    if ((*(char *)(v64 + 31) & 0x80000000) == 0)
      goto LABEL_143;
    goto LABEL_166;
  }
  v133 = v61;
  operator delete(v61);
  v63 = (char *)v135;
  if (!v135)
    goto LABEL_141;
LABEL_152:
  v66 = v136;
  v67 = v63;
  if (v136 != v63)
  {
    while (1)
    {
      while (*(v66 - 1) < 0)
      {
        operator delete(*((void **)v66 - 3));
        if (*(v66 - 25) < 0)
          goto LABEL_154;
LABEL_160:
        if ((*(v66 - 49) & 0x80000000) == 0)
          goto LABEL_155;
LABEL_161:
        operator delete(*((void **)v66 - 9));
        v66 -= 88;
        if (v66 == v63)
        {
LABEL_162:
          v67 = v135;
          goto LABEL_163;
        }
      }
      if ((*(v66 - 25) & 0x80000000) == 0)
        goto LABEL_160;
LABEL_154:
      operator delete(*((void **)v66 - 6));
      if (*(v66 - 49) < 0)
        goto LABEL_161;
LABEL_155:
      v66 -= 88;
      if (v66 == v63)
        goto LABEL_162;
    }
  }
LABEL_163:
  v136 = v63;
  operator delete(v67);
  v135 = 0;
  v136 = 0;
  v137 = 0;
  v132 = 0;
  v133 = 0;
  v134 = 0;
  v64 = v3[10];
  if (!v64)
    goto LABEL_164;
LABEL_142:
  if ((*(char *)(v64 + 31) & 0x80000000) == 0)
  {
LABEL_143:
    v65 = *(_OWORD *)(v64 + 8);
    v152 = *(_QWORD *)(v64 + 24);
    __dst = v65;
    goto LABEL_167;
  }
LABEL_166:
  sub_20E860C04(&__dst, *(void **)(v64 + 8), *(_QWORD *)(v64 + 16));
LABEL_167:
  v68 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v64 + 96) + 48))(*(_QWORD *)(v64 + 96));
  sub_20F2263E8();
  if (byte_254A6842F < 0)
  {
    sub_20E860C04(&v149, (void *)xmmword_254A68418, *((unint64_t *)&xmmword_254A68418 + 1));
  }
  else
  {
    v149 = xmmword_254A68418;
    v150 = unk_254A68428;
  }
  v69 = HIBYTE(v150);
  if (v150 >= 0)
  {
    v70 = &v149;
  }
  else
  {
    v69 = *((_QWORD *)&v149 + 1);
    v70 = (__int128 *)v149;
  }
  if (v69 >= 4)
  {
    v71 = (char *)v70 + v69;
    v72 = v70;
    do
    {
      v73 = (char *)memchr(v72, 118, v69 - 3);
      if (!v73)
        break;
      if (*(_DWORD *)v73 == 1684631414)
      {
        if (v73 == v71 || v73 - (char *)v70 == -1)
          break;
        v143[0] = (void *)v68;
        LODWORD(v143[1]) = 4;
        if (SHIBYTE(v152) < 0)
        {
          sub_20E860C04(&v144, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v144 = __dst;
          v145 = v152;
        }
        if (*(char *)(v64 + 55) < 0)
        {
          sub_20E860C04(&__p, *(void **)(v64 + 32), *(_QWORD *)(v64 + 40));
        }
        else
        {
          v130 = *(_OWORD *)(v64 + 32);
          *(_QWORD *)v147 = *(_QWORD *)(v64 + 48);
          __p = v130;
        }
        sub_20F22802C();
        if (byte_254A6875F < 0)
        {
          sub_20E860C04(&v147[8], (void *)xmmword_254A68748, *((unint64_t *)&xmmword_254A68748 + 1));
        }
        else
        {
          *(_OWORD *)&v147[8] = xmmword_254A68748;
          v148 = unk_254A68758;
        }
        v75 = v136;
        if ((unint64_t)v136 < v137)
          goto LABEL_193;
        goto LABEL_196;
      }
      v72 = (__int128 *)(v73 + 1);
      v69 = v71 - (char *)v72;
    }
    while (v71 - (char *)v72 >= 4);
  }
  v143[0] = (void *)v68;
  LODWORD(v143[1]) = 2;
  if (SHIBYTE(v152) < 0)
  {
    sub_20E860C04(&v144, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v144 = __dst;
    v145 = v152;
  }
  if (*(char *)(v64 + 55) < 0)
  {
    sub_20E860C04(&__p, *(void **)(v64 + 32), *(_QWORD *)(v64 + 40));
  }
  else
  {
    v74 = *(_OWORD *)(v64 + 32);
    *(_QWORD *)v147 = *(_QWORD *)(v64 + 48);
    __p = v74;
  }
  sub_20F22802C();
  if (byte_254A6875F < 0)
  {
    sub_20E860C04(&v147[8], (void *)xmmword_254A68748, *((unint64_t *)&xmmword_254A68748 + 1));
  }
  else
  {
    *(_OWORD *)&v147[8] = xmmword_254A68748;
    v148 = unk_254A68758;
  }
  v75 = v136;
  if ((unint64_t)v136 >= v137)
  {
LABEL_196:
    v136 = sub_20EBA558C((char **)&v135, (uint64_t)v143);
    if (SHIBYTE(v148) < 0)
    {
      operator delete(*(void **)&v147[8]);
      if ((v147[7] & 0x80000000) == 0)
        goto LABEL_198;
    }
    else if ((v147[7] & 0x80000000) == 0)
    {
      goto LABEL_198;
    }
LABEL_194:
    operator delete((void *)__p);
    if ((SHIBYTE(v145) & 0x80000000) == 0)
      goto LABEL_199;
    goto LABEL_195;
  }
LABEL_193:
  v76 = v143[0];
  *((_DWORD *)v75 + 2) = v143[1];
  *(_QWORD *)v75 = v76;
  v77 = v144;
  *((_QWORD *)v75 + 4) = v145;
  *((_OWORD *)v75 + 1) = v77;
  v145 = 0;
  v144 = 0uLL;
  v78 = *(_QWORD *)v147;
  *(_OWORD *)(v75 + 40) = __p;
  *((_QWORD *)v75 + 7) = v78;
  *(_QWORD *)v147 = 0;
  __p = 0uLL;
  v79 = *(_OWORD *)&v147[8];
  *((_QWORD *)v75 + 10) = v148;
  *((_OWORD *)v75 + 4) = v79;
  *(_QWORD *)&v147[8] = 0;
  *(_QWORD *)&v147[16] = 0;
  v148 = 0;
  v136 = v75 + 88;
  if ((v147[7] & 0x80000000) != 0)
    goto LABEL_194;
LABEL_198:
  if (SHIBYTE(v145) < 0)
LABEL_195:
    operator delete((void *)v144);
LABEL_199:
  v80 = sub_20EBA4AA4();
  if (*((char *)v80 + 23) < 0)
  {
    sub_20E860C04(v141, (void *)*v80, v80[1]);
  }
  else
  {
    v81 = *(_OWORD *)v80;
    v142 = v80[2];
    *(_OWORD *)v141 = v81;
  }
  v82 = HIBYTE(v142);
  if (v142 >= 0)
  {
    v83 = v141;
  }
  else
  {
    v82 = (uint64_t)v141[1];
    v83 = (void **)v141[0];
  }
  if (v82 >= 18)
  {
    v84 = (char *)v83 + v82;
    v85 = v83;
    do
    {
      v86 = (char *)memchr(v85, 67, v82 - 17);
      if (!v86)
        break;
      if (*(_QWORD *)v86 == 0x456C656E6E616843
        && *((_QWORD *)v86 + 1) == 0x696F763C726F7272
        && *((_WORD *)v86 + 8) == 15972)
      {
        if (v86 != v84 && v86 - (char *)v83 != -1)
          goto LABEL_243;
        break;
      }
      v85 = (void **)(v86 + 1);
      v82 = v84 - (char *)v85;
    }
    while (v84 - (char *)v85 >= 18);
  }
  v143[0] = (void *)(v68 + 1);
  LODWORD(v143[1]) = 3;
  v89 = SHIBYTE(v152);
  if (v152 >= 0)
    v90 = HIBYTE(v152);
  else
    v90 = *((_QWORD *)&__dst + 1);
  v91 = v90 + 6;
  if (v90 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v91 >= 0x17)
  {
    v93 = (v91 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v91 | 7) != 0x17)
      v93 = v91 | 7;
    v94 = v93 + 1;
    v92 = (__int128 *)operator new(v93 + 1);
    *((_QWORD *)&v144 + 1) = v90 + 6;
    v145 = v94 | 0x8000000000000000;
    *(_QWORD *)&v144 = v92;
  }
  else
  {
    v145 = 0;
    v144 = 0uLL;
    v92 = &v144;
    HIBYTE(v145) = v90 + 6;
    if (!v90)
      goto LABEL_235;
  }
  if (v89 >= 0)
    v95 = &__dst;
  else
    v95 = (__int128 *)__dst;
  memmove(v92, v95, v90);
LABEL_235:
  strcpy((char *)v92 + v90, ".Error");
  *(_WORD *)&v147[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v148) = 0;
  v96 = v136;
  if ((unint64_t)v136 >= v137)
  {
    v136 = sub_20EBA558C((char **)&v135, (uint64_t)v143);
    if (SHIBYTE(v148) < 0)
    {
      operator delete(*(void **)&v147[8]);
      if ((v147[7] & 0x80000000) == 0)
        goto LABEL_242;
    }
    else if ((v147[7] & 0x80000000) == 0)
    {
      goto LABEL_242;
    }
LABEL_237:
    operator delete((void *)__p);
    if (SHIBYTE(v145) < 0)
      goto LABEL_238;
    goto LABEL_243;
  }
  v97 = v143[0];
  *((_DWORD *)v136 + 2) = v143[1];
  *(_QWORD *)v96 = v97;
  v98 = v144;
  *((_QWORD *)v96 + 4) = v145;
  *((_OWORD *)v96 + 1) = v98;
  v145 = 0;
  v144 = 0uLL;
  v99 = *(_QWORD *)v147;
  *(_OWORD *)(v96 + 40) = __p;
  *((_QWORD *)v96 + 7) = v99;
  *(_QWORD *)v147 = 0;
  __p = 0uLL;
  v100 = *(_OWORD *)&v147[8];
  *((_QWORD *)v96 + 10) = v148;
  *((_OWORD *)v96 + 4) = v100;
  *(_QWORD *)&v147[8] = 0;
  *(_QWORD *)&v147[16] = 0;
  v148 = 0;
  v136 = v96 + 88;
  if ((v147[7] & 0x80000000) != 0)
    goto LABEL_237;
LABEL_242:
  if (SHIBYTE(v145) < 0)
  {
LABEL_238:
    operator delete((void *)v144);
    v101 = *(std::__shared_weak_count **)(v64 + 136);
    if (!v101)
      goto LABEL_247;
    goto LABEL_244;
  }
LABEL_243:
  v101 = *(std::__shared_weak_count **)(v64 + 136);
  if (!v101)
  {
LABEL_247:
    v138 = 0;
    v139 = 0;
    v140 = 0;
    v105 = 0;
    goto LABEL_248;
  }
LABEL_244:
  v102 = std::__shared_weak_count::lock(v101);
  if (!v102)
    goto LABEL_247;
  v103 = v102;
  v104 = *(_QWORD *)(v64 + 128);
  if (v104)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v104 + 24))(&v138);
  }
  else
  {
    v138 = 0;
    v139 = 0;
    v140 = 0;
  }
  v106 = (unint64_t *)&v103->__shared_owners_;
  do
    v107 = __ldaxr(v106);
  while (__stlxr(v107 - 1, v106));
  if (v107)
  {
    v105 = v138;
    v108 = v139;
    if (v138 != v139)
      goto LABEL_262;
LABEL_248:
    if (!v105)
      goto LABEL_267;
    goto LABEL_266;
  }
  ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
  std::__shared_weak_count::__release_weak(v103);
  v105 = v138;
  v108 = v139;
  if (v138 == v139)
    goto LABEL_248;
  do
  {
LABEL_262:
    v143[0] = (void *)v68;
    v143[1] = *v105;
    v145 = 0;
    v144 = 0uLL;
    v110 = v133;
    if ((unint64_t)v133 < v134)
    {
      *(_OWORD *)v133 = *(_OWORD *)v143;
      v109 = v144;
      *((_QWORD *)v110 + 4) = v145;
      *((_OWORD *)v110 + 1) = v109;
      v133 = v110 + 40;
    }
    else
    {
      v133 = sub_20EBA5F8C(&v132, (uint64_t)v143);
      if (SHIBYTE(v145) < 0)
        operator delete((void *)v144);
    }
    ++v105;
  }
  while (v105 != v108);
  v105 = v138;
  if (v138)
  {
LABEL_266:
    v139 = v105;
    operator delete(v105);
  }
LABEL_267:
  v111 = *(std::__shared_weak_count **)(v64 + 136);
  if (!v111 || (v112 = std::__shared_weak_count::lock(v111)) == 0)
  {
    v138 = 0;
    v139 = 0;
    v140 = 0;
    v115 = 0;
    goto LABEL_286;
  }
  v113 = v112;
  v114 = *(_QWORD *)(v64 + 128);
  if (v114)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v114 + 32))(&v138);
  }
  else
  {
    v138 = 0;
    v139 = 0;
    v140 = 0;
  }
  v116 = (unint64_t *)&v113->__shared_owners_;
  do
    v117 = __ldaxr(v116);
  while (__stlxr(v117 - 1, v116));
  if (v117)
  {
    v115 = v138;
    v118 = v139;
    if (v138 == v139)
      goto LABEL_286;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
    std::__shared_weak_count::__release_weak(v113);
    v115 = v138;
    v118 = v139;
    if (v138 == v139)
      goto LABEL_286;
  }
  v119 = (void *)(v68 + 1);
  do
  {
    v143[0] = v119;
    v143[1] = *v115;
    v145 = 0;
    v144 = 0uLL;
    v121 = v133;
    if ((unint64_t)v133 < v134)
    {
      *(_OWORD *)v133 = *(_OWORD *)v143;
      v120 = v144;
      *((_QWORD *)v121 + 4) = v145;
      *((_OWORD *)v121 + 1) = v120;
      v133 = v121 + 40;
    }
    else
    {
      v133 = sub_20EBA5F8C(&v132, (uint64_t)v143);
      if (SHIBYTE(v145) < 0)
        operator delete((void *)v144);
    }
    ++v115;
  }
  while (v115 != v118);
  v115 = v138;
LABEL_286:
  if (v115)
  {
    v139 = v115;
    operator delete(v115);
  }
  if (SHIBYTE(v142) < 0)
  {
    operator delete(v141[0]);
    if ((SHIBYTE(v150) & 0x80000000) == 0)
    {
LABEL_290:
      if ((SHIBYTE(v152) & 0x80000000) == 0)
        goto LABEL_291;
LABEL_295:
      operator delete((void *)__dst);
      if ((*((char *)v3 + 39) & 0x80000000) == 0)
        goto LABEL_292;
      goto LABEL_296;
    }
  }
  else if ((SHIBYTE(v150) & 0x80000000) == 0)
  {
    goto LABEL_290;
  }
  operator delete((void *)v149);
  if (SHIBYTE(v152) < 0)
    goto LABEL_295;
LABEL_291:
  if ((*((char *)v3 + 39) & 0x80000000) == 0)
  {
LABEL_292:
    *(_OWORD *)v143 = *((_OWORD *)v3 + 1);
    *(_QWORD *)&v144 = v3[4];
    goto LABEL_297;
  }
LABEL_296:
  sub_20E860C04(v143, (void *)v3[2], v3[3]);
LABEL_297:
  v122 = v3[8] != 0;
  if (*((char *)v3 + 63) < 0)
  {
    sub_20E860C04(&__dst, (void *)v3[5], v3[6]);
  }
  else
  {
    __dst = *(_OWORD *)(v3 + 5);
    v152 = v3[7];
  }
  sub_20EBA690C((uint64_t)v154, (__int128 *)v143, v122, (uint64_t *)&v135, (uint64_t *)&v132, &__dst);
  if ((SHIBYTE(v152) & 0x80000000) == 0)
  {
    if ((SBYTE7(v144) & 0x80000000) == 0)
      goto LABEL_302;
LABEL_312:
    operator delete(v143[0]);
    v123 = (char *)v132;
    if (v132)
      goto LABEL_303;
LABEL_313:
    v125 = (char *)v135;
    if (v135)
      goto LABEL_314;
    goto LABEL_326;
  }
  operator delete((void *)__dst);
  if (SBYTE7(v144) < 0)
    goto LABEL_312;
LABEL_302:
  v123 = (char *)v132;
  if (!v132)
    goto LABEL_313;
LABEL_303:
  v124 = v133;
  if (v133 == v123)
  {
    v133 = v123;
    operator delete(v123);
    v125 = (char *)v135;
    if (!v135)
      goto LABEL_326;
LABEL_314:
    v126 = v136;
    v127 = v125;
    if (v136 == v125)
    {
LABEL_325:
      v136 = v125;
      operator delete(v127);
      goto LABEL_326;
    }
    while (1)
    {
      while (*(v126 - 1) < 0)
      {
        operator delete(*((void **)v126 - 3));
        if (*(v126 - 25) < 0)
          goto LABEL_316;
LABEL_322:
        if ((*(v126 - 49) & 0x80000000) == 0)
          goto LABEL_317;
LABEL_323:
        operator delete(*((void **)v126 - 9));
        v126 -= 88;
        if (v126 == v125)
        {
LABEL_324:
          v127 = v135;
          goto LABEL_325;
        }
      }
      if ((*(v126 - 25) & 0x80000000) == 0)
        goto LABEL_322;
LABEL_316:
      operator delete(*((void **)v126 - 6));
      if (*(v126 - 49) < 0)
        goto LABEL_323;
LABEL_317:
      v126 -= 88;
      if (v126 == v125)
        goto LABEL_324;
    }
  }
  do
  {
    if (*(v124 - 1) < 0)
      operator delete(*((void **)v124 - 3));
    v124 -= 40;
  }
  while (v124 != v123);
  v133 = v123;
  operator delete(v132);
  v125 = (char *)v135;
  if (v135)
    goto LABEL_314;
LABEL_326:
  sub_20EBA4824(a2, (uint64_t)v153, 2uLL);
  sub_20EBA8C18((uint64_t)v154);
  return sub_20EBA8C18((uint64_t)v153);
}

void sub_20F225CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, uint64_t a12, void **a13, void **a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,char a60)
{
  void **v61;
  void **v62;
  void **v63;
  void **v64;

  if (a33 < 0)
    operator delete(__p);
  if (a52 < 0)
    operator delete(a47);
  if (a59 < 0)
    operator delete(a54);
  if (a10)
  {
    v61 = a11;
    v62 = a10;
    if (a11 != a10)
    {
      do
      {
        if (*((char *)v61 - 1) < 0)
          operator delete(*(v61 - 3));
        v61 -= 5;
      }
      while (v61 != a10);
      v62 = a10;
    }
    operator delete(v62);
  }
  if (!a13)
  {
LABEL_28:
    sub_20EBA8C18((uint64_t)&a60);
    _Unwind_Resume(a1);
  }
  v63 = a14;
  v64 = a13;
  if (a14 == a13)
  {
LABEL_27:
    operator delete(v64);
    goto LABEL_28;
  }
  while (1)
  {
    while (*((char *)v63 - 1) < 0)
    {
      operator delete(*(v63 - 3));
      if (*((char *)v63 - 25) < 0)
        goto LABEL_18;
LABEL_24:
      if ((*((char *)v63 - 49) & 0x80000000) == 0)
        goto LABEL_19;
LABEL_25:
      operator delete(*(v63 - 9));
      v63 -= 11;
      if (v63 == a13)
      {
LABEL_26:
        v64 = a13;
        goto LABEL_27;
      }
    }
    if ((*((char *)v63 - 25) & 0x80000000) == 0)
      goto LABEL_24;
LABEL_18:
    operator delete(*(v63 - 6));
    if (*((char *)v63 - 49) < 0)
      goto LABEL_25;
LABEL_19:
    v63 -= 11;
    if (v63 == a13)
      goto LABEL_26;
  }
}

void sub_20F226164(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
    operator delete(__p);
  if (a16)
    JUMPOUT(0x20F226188);
  JUMPOUT(0x20F22618CLL);
}

uint64_t sub_20F226290(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = *(_QWORD **)(a1 + 56);
  v2 = *(_QWORD *)(*(_QWORD *)(*v1 + 72) + 72);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 64))(v2);
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1[10] + 72) + 64))(*(_QWORD *)(v1[10] + 72));
}

uint64_t sub_20F2262D4(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24C9FB5B8;
  v2 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v2)
    (*(void (**)(void))(a1 + 64))();
  *(_QWORD *)a1 = off_24CA1E1D8;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20F22635C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24C9FB5B8;
  v2 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v2)
    (*(void (**)(void))(a1 + 64))();
  *(_QWORD *)a1 = off_24CA1E1D8;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
LABEL_8:
      JUMPOUT(0x212BC6398);
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(*(void **)(a1 + 8));
  goto LABEL_8;
}

void sub_20F2263E8()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  v0 = atomic_load((unsigned __int8 *)&qword_254A682F0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A682F0))
  {
    sub_20F226540();
    v1 = byte_254A68447;
    if (byte_254A68447 >= 0)
      v2 = byte_254A68447;
    else
      v2 = qword_254A68438;
    v3 = v2 + 1;
    if (v2 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v4 = (__int128 *)operator new(v5 + 1);
      *((_QWORD *)&xmmword_254A68418 + 1) = v2 + 1;
      unk_254A68428 = v6 | 0x8000000000000000;
      *(_QWORD *)&xmmword_254A68418 = v4;
    }
    else
    {
      v4 = &xmmword_254A68418;
      unk_254A68428 = 0;
      xmmword_254A68418 = 0uLL;
      byte_254A6842F = v2 + 1;
      if (!v2)
      {
LABEL_18:
        *(_WORD *)((char *)v4 + v2) = 38;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A68418, &dword_20E81F000);
        __cxa_guard_release(&qword_254A682F0);
        return;
      }
    }
    if (v1 >= 0)
      v7 = &qword_254A68430;
    else
      v7 = (uint64_t *)qword_254A68430;
    memmove(v4, v7, v2);
    goto LABEL_18;
  }
}

void sub_20F226528(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A682F0);
  _Unwind_Resume(a1);
}

void sub_20F226540()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;

  v0 = atomic_load((unsigned __int8 *)&qword_254A682F8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A682F8))
  {
    sub_20F2266C0();
    v1 = byte_254A6845F;
    if (byte_254A6845F >= 0)
      v2 = byte_254A6845F;
    else
      v2 = *((_QWORD *)&xmmword_254A68448 + 1);
    v3 = v2 + 6;
    if (v2 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v7 = (char *)operator new(v5 + 1);
      qword_254A68438 = v2 + 6;
      unk_254A68440 = v6 | 0x8000000000000000;
      qword_254A68430 = (uint64_t)v7;
      *(_DWORD *)v7 = 1936617315;
      *((_WORD *)v7 + 2) = 8308;
      v4 = v7 + 6;
    }
    else
    {
      qword_254A68438 = 0;
      unk_254A68440 = 0;
      qword_254A68430 = 0x2074736E6F63;
      byte_254A68447 = v2 + 6;
      v4 = (char *)&qword_254A68430 + 6;
      if (!v2)
      {
LABEL_18:
        v4[v2] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A68430, &dword_20E81F000);
        __cxa_guard_release(&qword_254A682F8);
        return;
      }
    }
    if (v1 >= 0)
      v8 = &xmmword_254A68448;
    else
      v8 = (__int128 *)xmmword_254A68448;
    memmove(v4, v8, v2);
    goto LABEL_18;
  }
}

void sub_20F2266A8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A682F8);
  _Unwind_Resume(a1);
}

void sub_20F2266C0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A68300);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A68300))
  {
    sub_20F226778();
    if (byte_254A68477 < 0)
    {
      sub_20E860C04(&xmmword_254A68448, (void *)qword_254A68460, unk_254A68468);
    }
    else
    {
      xmmword_254A68448 = *(_OWORD *)&qword_254A68460;
      unk_254A68458 = unk_254A68470;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A68448, &dword_20E81F000);
    __cxa_guard_release(&qword_254A68300);
  }
}

void sub_20F226760(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A68300);
  _Unwind_Resume(a1);
}

void sub_20F226778()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_254A68308);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A68308))
  {
    sub_20F226A34(__p);
    sub_20F22684C((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A68460, &dword_20E81F000);
    __cxa_guard_release(&qword_254A68308);
  }
}

void sub_20F22680C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A68308);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A68308);
  _Unwind_Resume(a1);
}

void sub_20F22684C(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *v10[2];
  char v11;
  void *__dst[2];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254A68310);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A68310))
  {
    sub_20E8610C0(v10, "std::shared_ptr");
    sub_20F226C10((char *)v10);
    if (v11 < 0)
      operator delete(v10[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A68478, &dword_20E81F000);
    __cxa_guard_release(&qword_254A68310);
  }
  if (byte_254A6848F < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A68478, *((unint64_t *)&xmmword_254A68478 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A68478;
    v13 = unk_254A68488;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, (std::string *)&qword_254A68460, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
}

void sub_20F2269C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A68310);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A68310);
  _Unwind_Resume(a1);
}

void sub_20F226A08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  sub_20E89FB98((void **)&a9);
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20F226A34(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A683D0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A683D0))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ChannelOutput<std::shared_ptr<std::variant<cv3d::vio::mapping_types::VIOKeyframeCM, cv3d::vio::ObjectAnchorCM, cv3d::vio::RelocalizationResult, cv3d::vio::mapping_types::MapData, cv3d::vio::mapping_types::ObjectAnchorRemoval, cv3d::vio::VIOStateAndUTCTimestamp, cv3d::vio::mapping_types::SubmapsStatsInfo, cv3d::vio::mapping_types::MLFrameSet>>>]", qword_254A686B8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A686B8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A683D0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A683D8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A683D8))
  {
    v5 = sub_20E8A2354(qword_254A686B8, "<", 0);
    sub_20E89FC08(qword_254A686B8, 0, v5, qword_254A686D0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A686D0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A683D8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A683E0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A683E0))
  {
    sub_21023CD84((uint64_t)qword_254A686D0, (uint64_t)&xmmword_254A686E8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A686E8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A683E0);
  }
  if (byte_254A686FF < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A686E8, *((unint64_t *)&xmmword_254A686E8 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A686E8;
    __dst[2] = unk_254A686F8;
  }
}

void sub_20F226BC8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A683E0);
  _Unwind_Resume(a1);
}

void sub_20F226BE0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A683D8);
  _Unwind_Resume(a1);
}

void sub_20F226BF8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A683D0);
  _Unwind_Resume(a1);
}

void sub_20F226C10(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *__dst[2];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254A68318);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A68318))
  {
    sub_20F226DE4();
    if (byte_254A684BF < 0)
    {
      sub_20E860C04(&xmmword_254A68490, (void *)qword_254A684A8, unk_254A684B0);
    }
    else
    {
      xmmword_254A68490 = *(_OWORD *)&qword_254A684A8;
      unk_254A684A0 = unk_254A684B8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A68490, &dword_20E81F000);
    __cxa_guard_release(&qword_254A68318);
  }
  if (byte_254A684A7 < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A68490, *((unint64_t *)&xmmword_254A68490 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A68490;
    v11 = unk_254A684A0;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, (std::string *)&xmmword_254A68478, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v11) < 0)
    operator delete(__dst[0]);
}

void sub_20F226D9C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A68318);
  _Unwind_Resume(a1);
}

void sub_20F226DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20E89FB98(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20F226DE4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_254A68320);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A68320))
  {
    sub_20F227698(__p);
    sub_20F226EB8((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A684A8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A68320);
  }
}

void sub_20F226E78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A68320);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A68320);
  _Unwind_Resume(a1);
}

void sub_20F226EB8(char *a1)
{
  unsigned __int8 v2;
  __int128 *v3;
  __int128 v4;
  unsigned __int8 v5;
  __int128 *v6;
  __int128 v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  int64x2_t v12;
  int8x16_t v13;
  void **v14;
  void **v15;
  void *v16;
  void *__p;
  void **v18;
  void *__dst[2];
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254A68328);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A68328))
  {
    sub_20F227874();
    if (byte_254A68507 < 0)
    {
      sub_20E860C04(&xmmword_254A684C0, (void *)xmmword_254A684F0, *((unint64_t *)&xmmword_254A684F0 + 1));
    }
    else
    {
      xmmword_254A684C0 = xmmword_254A684F0;
      unk_254A684D0 = unk_254A68500;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A684C0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A68328);
  }
  if (byte_254A684D7 < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A684C0, *((unint64_t *)&xmmword_254A684C0 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A684C0;
    v20 = unk_254A684D0;
  }
  v3 = sub_20EC70488();
  if (*((char *)v3 + 23) < 0)
  {
    sub_20E860C04(&v21, *(void **)v3, *((_QWORD *)v3 + 1));
  }
  else
  {
    v4 = *v3;
    v22 = *((_QWORD *)v3 + 2);
    v21 = v4;
  }
  v5 = atomic_load((unsigned __int8 *)&qword_254A68340);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_254A68340))
  {
    sub_20F227974();
    if (byte_254A6854F < 0)
    {
      sub_20E860C04(&xmmword_254A68508, (void *)xmmword_254A68538, *((unint64_t *)&xmmword_254A68538 + 1));
    }
    else
    {
      xmmword_254A68508 = xmmword_254A68538;
      unk_254A68518 = unk_254A68548;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A68508, &dword_20E81F000);
    __cxa_guard_release(&qword_254A68340);
  }
  if (byte_254A6851F < 0)
  {
    sub_20E860C04(&v23, (void *)xmmword_254A68508, *((unint64_t *)&xmmword_254A68508 + 1));
  }
  else
  {
    v23 = xmmword_254A68508;
    v24 = unk_254A68518;
  }
  v6 = sub_20EC7111C();
  if (*((char *)v6 + 23) < 0)
  {
    sub_20E860C04(&v25, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v26 = *((_QWORD *)v6 + 2);
    v25 = v7;
  }
  v8 = atomic_load((unsigned __int8 *)&qword_254A68358);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_254A68358))
  {
    sub_20F227A74();
    if (byte_254A68597 < 0)
    {
      sub_20E860C04(&xmmword_254A68550, (void *)xmmword_254A68580, *((unint64_t *)&xmmword_254A68580 + 1));
    }
    else
    {
      xmmword_254A68550 = xmmword_254A68580;
      unk_254A68560 = unk_254A68590;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A68550, &dword_20E81F000);
    __cxa_guard_release(&qword_254A68358);
  }
  if (byte_254A68567 < 0)
  {
    sub_20E860C04(&v27, (void *)xmmword_254A68550, *((unint64_t *)&xmmword_254A68550 + 1));
  }
  else
  {
    v27 = xmmword_254A68550;
    v28 = unk_254A68560;
  }
  v9 = atomic_load((unsigned __int8 *)&qword_254A68370);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_254A68370))
  {
    sub_20F227B74();
    if (byte_254A685DF < 0)
    {
      sub_20E860C04(&xmmword_254A68598, (void *)xmmword_254A685C8, *((unint64_t *)&xmmword_254A685C8 + 1));
    }
    else
    {
      xmmword_254A68598 = xmmword_254A685C8;
      unk_254A685A8 = unk_254A685D8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A68598, &dword_20E81F000);
    __cxa_guard_release(&qword_254A68370);
  }
  if (byte_254A685AF < 0)
  {
    sub_20E860C04(&v29, (void *)xmmword_254A68598, *((unint64_t *)&xmmword_254A68598 + 1));
  }
  else
  {
    v29 = xmmword_254A68598;
    v30 = unk_254A685A8;
  }
  v10 = atomic_load((unsigned __int8 *)&qword_254A68388);
  if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_254A68388))
  {
    sub_20F227C74();
    if (byte_254A68627 < 0)
    {
      sub_20E860C04(&xmmword_254A685E0, (void *)xmmword_254A68610, *((unint64_t *)&xmmword_254A68610 + 1));
    }
    else
    {
      xmmword_254A685E0 = xmmword_254A68610;
      unk_254A685F0 = unk_254A68620;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A685E0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A68388);
  }
  if (byte_254A685F7 < 0)
  {
    sub_20E860C04(&v31, (void *)xmmword_254A685E0, *((unint64_t *)&xmmword_254A685E0 + 1));
  }
  else
  {
    v31 = xmmword_254A685E0;
    v32 = unk_254A685F0;
  }
  v11 = atomic_load((unsigned __int8 *)&qword_254A683A0);
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A683A0))
  {
    sub_20F227D74();
    if (byte_254A6866F < 0)
    {
      sub_20E860C04(&xmmword_254A68628, (void *)xmmword_254A68658, *((unint64_t *)&xmmword_254A68658 + 1));
    }
    else
    {
      xmmword_254A68628 = xmmword_254A68658;
      unk_254A68638 = unk_254A68668;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A68628, &dword_20E81F000);
    __cxa_guard_release(&qword_254A683A0);
  }
  if (byte_254A6863F < 0)
  {
    sub_20E860C04(&v33, (void *)xmmword_254A68628, *((unint64_t *)&xmmword_254A68628 + 1));
  }
  else
  {
    v33 = xmmword_254A68628;
    v34 = unk_254A68638;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 8uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, (std::string *)&qword_254A684A8, v12, v13);
  v14 = (void **)__p;
  if (__p)
  {
    v15 = v18;
    v16 = __p;
    if (v18 != __p)
    {
      do
      {
        if (*((char *)v15 - 1) < 0)
          operator delete(*(v15 - 3));
        v15 -= 3;
      }
      while (v15 != v14);
      v16 = __p;
    }
    v18 = v14;
    operator delete(v16);
  }
  if (SHIBYTE(v34) < 0)
  {
    operator delete((void *)v33);
    if ((SHIBYTE(v32) & 0x80000000) == 0)
    {
LABEL_41:
      if ((SHIBYTE(v30) & 0x80000000) == 0)
        goto LABEL_42;
      goto LABEL_50;
    }
  }
  else if ((SHIBYTE(v32) & 0x80000000) == 0)
  {
    goto LABEL_41;
  }
  operator delete((void *)v31);
  if ((SHIBYTE(v30) & 0x80000000) == 0)
  {
LABEL_42:
    if ((SHIBYTE(v28) & 0x80000000) == 0)
      goto LABEL_43;
    goto LABEL_51;
  }
LABEL_50:
  operator delete((void *)v29);
  if ((SHIBYTE(v28) & 0x80000000) == 0)
  {
LABEL_43:
    if ((SHIBYTE(v26) & 0x80000000) == 0)
      goto LABEL_44;
    goto LABEL_52;
  }
LABEL_51:
  operator delete((void *)v27);
  if ((SHIBYTE(v26) & 0x80000000) == 0)
  {
LABEL_44:
    if ((SHIBYTE(v24) & 0x80000000) == 0)
      goto LABEL_45;
    goto LABEL_53;
  }
LABEL_52:
  operator delete((void *)v25);
  if ((SHIBYTE(v24) & 0x80000000) == 0)
  {
LABEL_45:
    if ((SHIBYTE(v22) & 0x80000000) == 0)
      goto LABEL_46;
    goto LABEL_54;
  }
LABEL_53:
  operator delete((void *)v23);
  if ((SHIBYTE(v22) & 0x80000000) == 0)
  {
LABEL_46:
    if ((SHIBYTE(v20) & 0x80000000) == 0)
      return;
LABEL_55:
    operator delete(__dst[0]);
    return;
  }
LABEL_54:
  operator delete((void *)v21);
  if (SHIBYTE(v20) < 0)
    goto LABEL_55;
}

void sub_20F227508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  void **v60;

  __cxa_guard_abort(&qword_254A683A0);
  while (1)
  {
    if (*((char *)v60 - 1) < 0)
      operator delete(*(v60 - 3));
    v60 -= 3;
    if (v60 == &a13)
      _Unwind_Resume(a1);
  }
}

void sub_20F227698(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A683B8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A683B8))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = std::variant<cv3d::vio::mapping_types::VIOKeyframeCM, cv3d::vio::ObjectAnchorCM, cv3d::vio::RelocalizationResult, cv3d::vio::mapping_types::MapData, cv3d::vio::mapping_types::ObjectAnchorRemoval, cv3d::vio::VIOStateAndUTCTimestamp, cv3d::vio::mapping_types::SubmapsStatsInfo, cv3d::vio::mapping_types::MLFrameSet>]", qword_254A68670);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A68670, &dword_20E81F000);
    __cxa_guard_release(&qword_254A683B8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A683C0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A683C0))
  {
    v5 = sub_20E8A2354(qword_254A68670, "<", 0);
    sub_20E89FC08(qword_254A68670, 0, v5, qword_254A68688);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A68688, &dword_20E81F000);
    __cxa_guard_release(&qword_254A683C0);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A683C8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A683C8))
  {
    sub_21023CD84((uint64_t)qword_254A68688, (uint64_t)&xmmword_254A686A0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A686A0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A683C8);
  }
  if (byte_254A686B7 < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A686A0, *((unint64_t *)&xmmword_254A686A0 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A686A0;
    __dst[2] = unk_254A686B0;
  }
}

void sub_20F22782C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A683C8);
  _Unwind_Resume(a1);
}

void sub_20F227844(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A683C0);
  _Unwind_Resume(a1);
}

void sub_20F22785C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A683B8);
  _Unwind_Resume(a1);
}

void sub_20F227874()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A68330);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A68330))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_types::VIOKeyframeCM]", qword_254A684D8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A684D8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A68330);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A68338);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A68338))
    {
      sub_21023CD84((uint64_t)qword_254A684D8, (uint64_t)&xmmword_254A684F0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A684F0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68338);
    }
  }
}

void sub_20F227944(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A68338);
  _Unwind_Resume(a1);
}

void sub_20F22795C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A68330);
  _Unwind_Resume(a1);
}

void sub_20F227974()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A68348);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A68348))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::RelocalizationResult]", qword_254A68520);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A68520, &dword_20E81F000);
    __cxa_guard_release(&qword_254A68348);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A68350);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A68350))
    {
      sub_21023CD84((uint64_t)qword_254A68520, (uint64_t)&xmmword_254A68538);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A68538, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68350);
    }
  }
}

void sub_20F227A44(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A68350);
  _Unwind_Resume(a1);
}

void sub_20F227A5C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A68348);
  _Unwind_Resume(a1);
}

void sub_20F227A74()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A68360);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A68360))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_types::ObjectAnchorRemoval]", qword_254A68568);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A68568, &dword_20E81F000);
    __cxa_guard_release(&qword_254A68360);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A68368);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A68368))
    {
      sub_21023CD84((uint64_t)qword_254A68568, (uint64_t)&xmmword_254A68580);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A68580, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68368);
    }
  }
}

void sub_20F227B44(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A68368);
  _Unwind_Resume(a1);
}

void sub_20F227B5C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A68360);
  _Unwind_Resume(a1);
}

void sub_20F227B74()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A68378);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A68378))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::VIOStateAndUTCTimestamp]", qword_254A685B0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A685B0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A68378);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A68380);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A68380))
    {
      sub_21023CD84((uint64_t)qword_254A685B0, (uint64_t)&xmmword_254A685C8);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A685C8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68380);
    }
  }
}

void sub_20F227C44(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A68380);
  _Unwind_Resume(a1);
}

void sub_20F227C5C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A68378);
  _Unwind_Resume(a1);
}

void sub_20F227C74()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A68390);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A68390))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_types::SubmapsStatsInfo]", qword_254A685F8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A685F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A68390);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A68398);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A68398))
    {
      sub_21023CD84((uint64_t)qword_254A685F8, (uint64_t)&xmmword_254A68610);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A68610, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68398);
    }
  }
}

void sub_20F227D44(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A68398);
  _Unwind_Resume(a1);
}

void sub_20F227D5C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A68390);
  _Unwind_Resume(a1);
}

void sub_20F227D74()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A683A8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A683A8))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_types::MLFrameSet]", qword_254A68640);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A68640, &dword_20E81F000);
    __cxa_guard_release(&qword_254A683A8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A683B0);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A683B0))
    {
      sub_21023CD84((uint64_t)qword_254A68640, (uint64_t)&xmmword_254A68658);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A68658, &dword_20E81F000);
      __cxa_guard_release(&qword_254A683B0);
    }
  }
}

void sub_20F227E44(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A683B0);
  _Unwind_Resume(a1);
}

void sub_20F227E5C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A683A8);
  _Unwind_Resume(a1);
}

void sub_20F227E74()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A683E8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A683E8))
  {
    sub_20F227F2C();
    if (byte_254A68747 < 0)
    {
      sub_20E860C04(&xmmword_254A68700, (void *)xmmword_254A68730, *((unint64_t *)&xmmword_254A68730 + 1));
    }
    else
    {
      xmmword_254A68700 = xmmword_254A68730;
      unk_254A68710 = unk_254A68740;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A68700, &dword_20E81F000);
    __cxa_guard_release(&qword_254A683E8);
  }
}

void sub_20F227F14(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A683E8);
  _Unwind_Resume(a1);
}

void sub_20F227F2C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A683F0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A683F0))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::OptionalReturn<std::shared_ptr<std::variant<cv3d::vio::mapping_types::VIOKeyframeCM, cv3d::vio::ObjectAnchorCM, cv3d::vio::RelocalizationResult, cv3d::vio::mapping_types::MapData, cv3d::vio::mapping_types::ObjectAnchorRemoval, cv3d::vio::VIOStateAndUTCTimestamp, cv3d::vio::mapping_types::SubmapsStatsInfo, cv3d::vio::mapping_types::MLFrameSet>>> (std::shared_ptr<cv3d::vio::area_mapping::SlamCMData>)]", qword_254A68718);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A68718, &dword_20E81F000);
    __cxa_guard_release(&qword_254A683F0);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A683F8);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A683F8))
    {
      sub_21023CD84((uint64_t)qword_254A68718, (uint64_t)&xmmword_254A68730);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A68730, &dword_20E81F000);
      __cxa_guard_release(&qword_254A683F8);
    }
  }
}

void sub_20F227FFC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A683F8);
  _Unwind_Resume(a1);
}

void sub_20F228014(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A683F0);
  _Unwind_Resume(a1);
}

void sub_20F22802C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A68400);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A68400))
  {
    sub_20F2280E4();
    if (byte_254A6878F < 0)
    {
      sub_20E860C04(&xmmword_254A68748, (void *)xmmword_254A68778, *((unint64_t *)&xmmword_254A68778 + 1));
    }
    else
    {
      xmmword_254A68748 = xmmword_254A68778;
      unk_254A68758 = unk_254A68788;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A68748, &dword_20E81F000);
    __cxa_guard_release(&qword_254A68400);
  }
}

void sub_20F2280CC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A68400);
  _Unwind_Resume(a1);
}

void sub_20F2280E4()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A68408);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A68408))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = std::shared_ptr<std::variant<cv3d::vio::mapping_types::VIOKeyframeCM, cv3d::vio::ObjectAnchorCM, cv3d::vio::RelocalizationResult, cv3d::vio::mapping_types::MapData, cv3d::vio::mapping_types::ObjectAnchorRemoval, cv3d::vio::VIOStateAndUTCTimestamp, cv3d::vio::mapping_types::SubmapsStatsInfo, cv3d::vio::mapping_types::MLFrameSet>> (std::shared_ptr<std::variant<cv3d::vio::mapping_types::VIOKeyframeCM, cv3d::vio::ObjectAnchorCM, cv3d::vio::RelocalizationResult, cv3d::vio::mapping_types::MapData, cv3d::vio::mapping_types::ObjectAnchorRemoval, cv3d::vio::VIOStateAndUTCTimestamp, cv3d::vio::mapping_types::SubmapsStatsInfo, cv3d::vio::mapping_types::MLFrameSet>>)]", qword_254A68760);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A68760, &dword_20E81F000);
    __cxa_guard_release(&qword_254A68408);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A68410);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A68410))
    {
      sub_21023CD84((uint64_t)qword_254A68760, (uint64_t)&xmmword_254A68778);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A68778, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68410);
    }
  }
}

void sub_20F2281B4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A68410);
  _Unwind_Resume(a1);
}

void sub_20F2281CC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A68408);
  _Unwind_Resume(a1);
}

uint64_t sub_20F2281E4(uint64_t a1, uint64_t a2)
{
  char *v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  std::__shared_weak_count *v21;
  unint64_t v22;
  unint64_t *p_shared_weak_owners;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  __int128 v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t *v50;
  unint64_t v51;
  uint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  std::__shared_weak_count *v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  void (*v97)(_BYTE *__return_ptr);
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t (**v105)();
  _BYTE v106[24];
  _BYTE v107[24];
  __int128 v108;
  __int128 v109;
  uint64_t (**v110)();
  _BYTE v111[24];
  uint64_t (**v112)();
  __int128 v113;
  uint64_t (**v114)();
  __int128 v115;
  _QWORD *v116;
  std::__shared_weak_count *v117;
  char *v118;
  std::__shared_weak_count *v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  __int128 v126;
  _QWORD v127[2];
  _OWORD v128[2];
  _BYTE __dst[24];
  _QWORD v130[2];
  _QWORD v131[2];
  _QWORD v132[2];
  _QWORD v133[5];

  v133[2] = *MEMORY[0x24BDAC8D0];
  v4 = (char *)operator new(0xA8uLL);
  *((_QWORD *)v4 + 1) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_24C9FB998;
  sub_20F217720((uint64_t)(v4 + 24), a2);
  v6 = operator new();
  v7 = v6;
  *(_QWORD *)v6 = &off_24C9FB600;
  v103 = v6;
  if (v4[103] < 0)
  {
    sub_20E860C04((_BYTE *)(v6 + 8), *((void **)v4 + 10), *((_QWORD *)v4 + 11));
  }
  else
  {
    *(_OWORD *)(v6 + 8) = *((_OWORD *)v4 + 5);
    *(_QWORD *)(v6 + 24) = *((_QWORD *)v4 + 12);
  }
  if (v4[127] < 0)
  {
    sub_20E860C04((_BYTE *)(v7 + 32), *((void **)v4 + 13), *((_QWORD *)v4 + 14));
  }
  else
  {
    *(_OWORD *)(v7 + 32) = *(_OWORD *)(v4 + 104);
    *(_QWORD *)(v7 + 48) = *((_QWORD *)v4 + 15);
  }
  *(_QWORD *)(v7 + 56) = 0;
  *(_QWORD *)(v7 + 64) = 0;
  v8 = (std::__shared_weak_count *)operator new(0x58uLL);
  v8->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  v8->__shared_weak_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9B6A90;
  MEMORY[0x212BC5E10](&v8[1]);
  v116 = &v8[1].__vftable;
  v117 = v8;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  do
    v11 = __ldxr(v5);
  while (__stxr(v11 + 1, v5));
  if (v4[55] < 0)
  {
    sub_20E860C04(__dst, *((void **)v4 + 4), *((_QWORD *)v4 + 5));
  }
  else
  {
    *(_OWORD *)__dst = *((_OWORD *)v4 + 2);
    *(_QWORD *)&__dst[16] = *((_QWORD *)v4 + 6);
  }
  if (v4[79] < 0)
  {
    sub_20E860C04(v128, *((void **)v4 + 7), *((_QWORD *)v4 + 8));
  }
  else
  {
    v128[0] = *(_OWORD *)(v4 + 56);
    *(_QWORD *)&v128[1] = *((_QWORD *)v4 + 9);
  }
  v104 = a1;
  v118 = v4 + 24;
  v119 = (std::__shared_weak_count *)v4;
  do
    v12 = __ldxr(v5);
  while (__stxr(v12 + 1, v5));
  v13 = *(_QWORD *)__dst;
  v131[0] = *(_QWORD *)&__dst[8];
  *(_QWORD *)((char *)v131 + 7) = *(_QWORD *)&__dst[15];
  v102 = __dst[23];
  memset(__dst, 0, sizeof(__dst));
  v130[0] = *((_QWORD *)&v128[0] + 1);
  v14 = *(_QWORD *)&v128[0];
  *(_QWORD *)((char *)v130 + 7) = *(_QWORD *)((char *)v128 + 15);
  v15 = BYTE7(v128[1]);
  memset(v128, 0, 24);
  v120 = 0;
  v121 = 0;
  v132[0] = 0;
  *(_QWORD *)((char *)v132 + 7) = 0;
  v122 = 0;
  v123 = 0;
  v16 = operator new();
  v133[0] = v132[0];
  *(_QWORD *)((char *)v133 + 7) = *(_QWORD *)((char *)v132 + 7);
  v132[0] = 0;
  *(_QWORD *)((char *)v132 + 7) = 0;
  v124 = 0;
  v125 = 0;
  *(_BYTE *)(v16 + 8) = 1;
  *(_QWORD *)(v16 + 32) = 0;
  *(_QWORD *)(v16 + 40) = 0;
  *(_QWORD *)v16 = &off_24C9FB6D0;
  *(_QWORD *)(v16 + 16) = &unk_24C9FB748;
  *(_QWORD *)(v16 + 24) = &unk_24C9FB788;
  v17 = v133[0];
  *(_QWORD *)(v16 + 63) = *(_QWORD *)((char *)v133 + 7);
  *(_QWORD *)(v16 + 48) = 0;
  *(_QWORD *)(v16 + 56) = v17;
  *(_BYTE *)(v16 + 71) = 0;
  v133[0] = 0;
  *(_QWORD *)((char *)v133 + 7) = 0;
  *(_QWORD *)(v16 + 72) = v8 + 1;
  *(_QWORD *)(v16 + 80) = v8;
  v126 = 0uLL;
  v18 = (_QWORD *)operator new();
  *v18 = &off_24C9FB880;
  v18[1] = v4 + 24;
  v18[2] = v4;
  v118 = 0;
  v119 = 0;
  *(_QWORD *)(v16 + 88) = v18;
  *(_QWORD *)(v16 + 96) = v16 + 96;
  *(_QWORD *)(v16 + 104) = v16 + 96;
  *(_QWORD *)(v16 + 112) = 0;
  *(_QWORD *)(v16 + 120) = v16 + 120;
  *(_QWORD *)(v16 + 128) = v16 + 120;
  *(_QWORD *)(v16 + 136) = 0;
  v19 = (std::__shared_weak_count *)operator new();
  v19->__shared_owners_ = 0;
  v20 = (unint64_t *)&v19->__shared_owners_;
  v19->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9FB8D0;
  v19->__shared_weak_owners_ = 0;
  v19[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
  v21 = *(std::__shared_weak_count **)(v16 + 40);
  if (v21)
  {
    if (v21->__shared_owners_ != -1)
      goto LABEL_31;
    do
      v22 = __ldxr(v20);
    while (__stxr(v22 + 1, v20));
    p_shared_weak_owners = (unint64_t *)&v19->__shared_weak_owners_;
    do
      v24 = __ldxr(p_shared_weak_owners);
    while (__stxr(v24 + 1, p_shared_weak_owners));
    *(_QWORD *)(v16 + 32) = v16;
    *(_QWORD *)(v16 + 40) = v19;
    std::__shared_weak_count::__release_weak(v21);
  }
  else
  {
    do
      v25 = __ldxr(v20);
    while (__stxr(v25 + 1, v20));
    v26 = (unint64_t *)&v19->__shared_weak_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
    *(_QWORD *)(v16 + 32) = v16;
    *(_QWORD *)(v16 + 40) = v19;
  }
  do
    v28 = __ldaxr(v20);
  while (__stlxr(v28 - 1, v20));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
LABEL_31:
  if (*((_QWORD *)&v126 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v126 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v126 + 1) + 16))(*((_QWORD *)&v126 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v126 + 1));
    }
  }
  *(_QWORD *)&v126 = v16;
  *((_QWORD *)&v126 + 1) = v19;
  if (v125)
  {
    v31 = &v125->__shared_owners_;
    do
      v32 = __ldaxr((unint64_t *)v31);
    while (__stlxr(v32 - 1, (unint64_t *)v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  v105 = &off_24C9FB630;
  *(_QWORD *)v106 = v13;
  *(_QWORD *)&v106[8] = v131[0];
  *(_QWORD *)&v106[15] = *(_QWORD *)((char *)v131 + 7);
  v106[23] = v102;
  v131[0] = 0;
  *(_QWORD *)((char *)v131 + 7) = 0;
  *(_QWORD *)v107 = v14;
  *(_QWORD *)&v107[8] = v130[0];
  *(_QWORD *)&v107[15] = *(_QWORD *)((char *)v130 + 7);
  v107[23] = v15;
  v130[0] = 0;
  *(_QWORD *)((char *)v130 + 7) = 0;
  v108 = 0uLL;
  v124 = 0;
  v125 = 0;
  v33 = v126;
  v109 = v126;
  v126 = 0uLL;
  if (*((_QWORD *)&v109 + 1))
  {
    v34 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 16);
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  v110 = &off_24C9FB660;
  v36 = operator new();
  *(_QWORD *)v36 = &off_24C9FB920;
  *(_OWORD *)(v36 + 8) = v33;
  *(_QWORD *)v111 = v36;
  v37 = v109;
  if (*((_QWORD *)&v109 + 1))
  {
    v38 = (unint64_t *)(*((_QWORD *)&v109 + 1) + 16);
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
    *(_OWORD *)&v111[8] = v109;
    if ((_QWORD)v109)
      v40 = v109 + 16;
    else
      v40 = 0;
    v41 = (unint64_t *)(*((_QWORD *)&v109 + 1) + 16);
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
    v43 = *((_QWORD *)&v109 + 1);
    v37 = v109;
    v112 = &off_24C9FB698;
    *(_QWORD *)&v113 = v40;
    *((_QWORD *)&v113 + 1) = *((_QWORD *)&v109 + 1);
    v44 = (unint64_t *)(*((_QWORD *)&v109 + 1) + 16);
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
  }
  else
  {
    *(_QWORD *)&v111[8] = v109;
    *(_QWORD *)&v111[16] = 0;
    if ((_QWORD)v109)
      v46 = v109 + 16;
    else
      v46 = 0;
    v43 = 0;
    v112 = &off_24C9FB698;
    v113 = v46;
  }
  if (v37)
    v47 = v37 + 24;
  else
    v47 = 0;
  v114 = &off_24C9B2310;
  *(_QWORD *)&v115 = v47;
  *((_QWORD *)&v115 + 1) = v43;
  if (v123)
  {
    v48 = &v123->__shared_owners_;
    do
      v49 = __ldaxr((unint64_t *)v48);
    while (__stlxr(v49 - 1, (unint64_t *)v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  if (v119)
  {
    v50 = &v119->__shared_owners_;
    do
      v51 = __ldaxr((unint64_t *)v50);
    while (__stlxr(v51 - 1, (unint64_t *)v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  if (!v121)
    goto LABEL_76;
  v52 = &v121->__shared_owners_;
  do
    v53 = __ldaxr((unint64_t *)v52);
  while (__stlxr(v53 - 1, (unint64_t *)v52));
  if (!v53)
  {
    ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
    std::__shared_weak_count::__release_weak(v121);
    if ((SBYTE7(v128[1]) & 0x80000000) == 0)
    {
LABEL_77:
      if ((__dst[23] & 0x80000000) == 0)
        goto LABEL_78;
      goto LABEL_82;
    }
  }
  else
  {
LABEL_76:
    if ((SBYTE7(v128[1]) & 0x80000000) == 0)
      goto LABEL_77;
  }
  operator delete(*(void **)&v128[0]);
  if ((__dst[23] & 0x80000000) == 0)
  {
LABEL_78:
    if (v4 != (char *)-24)
      goto LABEL_84;
    goto LABEL_83;
  }
LABEL_82:
  operator delete(*(void **)__dst);
  if (v4 != (char *)-24)
    goto LABEL_84;
LABEL_83:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 534, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_84:
  v54 = operator new();
  *(_QWORD *)v54 = &off_24C9FB630;
  *(_OWORD *)(v54 + 8) = *(_OWORD *)v106;
  *(_QWORD *)(v54 + 24) = *(_QWORD *)&v106[16];
  memset(v106, 0, sizeof(v106));
  *(_OWORD *)(v54 + 32) = *(_OWORD *)v107;
  *(_QWORD *)(v54 + 48) = *(_QWORD *)&v107[16];
  memset(v107, 0, sizeof(v107));
  *(_OWORD *)(v54 + 56) = v108;
  v108 = 0uLL;
  *(_OWORD *)(v54 + 72) = v109;
  v109 = 0uLL;
  *(_QWORD *)(v54 + 88) = &off_24C9FB660;
  *(_OWORD *)(v54 + 96) = *(_OWORD *)v111;
  v55 = *(_QWORD *)&v111[16];
  *(_QWORD *)&v111[8] = 0;
  *(_QWORD *)&v111[16] = 0;
  *(_QWORD *)(v54 + 112) = v55;
  *(_QWORD *)(v54 + 120) = &off_24C9FB698;
  *(_OWORD *)(v54 + 128) = v113;
  v113 = 0uLL;
  *(_QWORD *)v111 = 0;
  *(_QWORD *)(v54 + 144) = &off_24C9B2310;
  *(_OWORD *)(v54 + 152) = v115;
  v115 = 0uLL;
  *(_QWORD *)(v103 + 72) = v54;
  sub_20F22AAA8((uint64_t)&v105);
  if (v4)
  {
    v56 = (unint64_t *)(v4 + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      (*(void (**)(char *))(*(_QWORD *)v4 + 16))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }
  }
  v58 = v117;
  if (v117)
  {
    v59 = (unint64_t *)&v117->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  *(_QWORD *)v104 = v103;
  if (v4)
  {
    v61 = (unint64_t *)(v4 + 8);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      (*(void (**)(char *))(*(_QWORD *)v4 + 16))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }
  }
  *(_OWORD *)(v104 + 40) = 0u;
  *(_QWORD *)(v104 + 8) = &off_24C9FB9E8;
  strcpy((char *)(v104 + 16), "OutputFwd");
  *(_QWORD *)(v104 + 26) = v127[0];
  *(_QWORD *)(v104 + 31) = *(_QWORD *)((char *)v127 + 5);
  *(_BYTE *)(v104 + 39) = 9;
  v127[0] = 0;
  *(_QWORD *)((char *)v127 + 5) = 0;
  *(_OWORD *)(v104 + 56) = 0u;
  *(_QWORD *)(v104 + 72) = 0;
  v63 = (std::__shared_weak_count *)operator new(0x58uLL);
  v63->__shared_owners_ = 0;
  v64 = (unint64_t *)&v63->__shared_owners_;
  v63->__shared_weak_owners_ = 0;
  v63->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9B6A90;
  MEMORY[0x212BC5E10](&v63[1]);
  do
    v65 = __ldxr(v64);
  while (__stxr(v65 + 1, v64));
  v66 = operator new();
  *(_BYTE *)(v66 + 8) = 1;
  *(_QWORD *)(v66 + 48) = 0;
  *(_QWORD *)(v66 + 32) = 0;
  *(_QWORD *)(v66 + 40) = 0;
  *(_QWORD *)v66 = &off_24C9FBA48;
  *(_QWORD *)(v66 + 16) = &unk_24C9FBAC0;
  *(_QWORD *)(v66 + 24) = &unk_24C9FBB00;
  *(_QWORD *)(v66 + 56) = 0;
  *(_QWORD *)(v66 + 64) = 0;
  *(_QWORD *)(v66 + 72) = v63 + 1;
  *(_QWORD *)(v66 + 80) = v63;
  v67 = (_QWORD *)operator new();
  *v67 = &off_24C9FBBD8;
  *(_QWORD *)(v66 + 88) = v67;
  *(_QWORD *)(v66 + 96) = v66 + 96;
  *(_QWORD *)(v66 + 104) = v66 + 96;
  *(_QWORD *)(v66 + 112) = 0;
  *(_QWORD *)(v66 + 120) = v66 + 120;
  *(_QWORD *)(v66 + 128) = v66 + 120;
  *(_QWORD *)(v66 + 136) = 0;
  v68 = (std::__shared_weak_count *)operator new();
  v68->__shared_owners_ = 0;
  v69 = (unint64_t *)&v68->__shared_owners_;
  v68->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9FBC28;
  v68->__shared_weak_owners_ = 0;
  v68[1].__vftable = (std::__shared_weak_count_vtbl *)v66;
  v70 = *(std::__shared_weak_count **)(v66 + 40);
  if (v70)
  {
    if (v70->__shared_owners_ != -1)
      goto LABEL_114;
    do
      v71 = __ldxr(v69);
    while (__stxr(v71 + 1, v69));
    v72 = (unint64_t *)&v68->__shared_weak_owners_;
    do
      v73 = __ldxr(v72);
    while (__stxr(v73 + 1, v72));
    *(_QWORD *)(v66 + 32) = v66;
    *(_QWORD *)(v66 + 40) = v68;
    std::__shared_weak_count::__release_weak(v70);
  }
  else
  {
    do
      v74 = __ldxr(v69);
    while (__stxr(v74 + 1, v69));
    v75 = (unint64_t *)&v68->__shared_weak_owners_;
    do
      v76 = __ldxr(v75);
    while (__stxr(v76 + 1, v75));
    *(_QWORD *)(v66 + 32) = v66;
    *(_QWORD *)(v66 + 40) = v68;
  }
  do
    v77 = __ldaxr(v69);
  while (__stlxr(v77 - 1, v69));
  if (!v77)
  {
    ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
    std::__shared_weak_count::__release_weak(v68);
  }
LABEL_114:
  v105 = &off_24C9FBA18;
  strcpy(v106, "channel");
  *(_QWORD *)&v106[8] = *(_QWORD *)__dst;
  *(_QWORD *)&v106[15] = *(_QWORD *)&__dst[7];
  v106[23] = 7;
  *(_QWORD *)__dst = 0;
  *(_QWORD *)&__dst[7] = 0;
  *(_QWORD *)v107 = 0x7974706D45;
  *(_QWORD *)&v107[8] = *(_QWORD *)&v128[0];
  *(_QWORD *)&v107[15] = *(_QWORD *)((char *)v128 + 7);
  v107[23] = 5;
  *(_QWORD *)&v128[0] = 0;
  *(_QWORD *)((char *)v128 + 7) = 0;
  v108 = 0uLL;
  v78 = (unint64_t *)&v68->__shared_weak_owners_;
  *(_QWORD *)&v109 = v66;
  *((_QWORD *)&v109 + 1) = v68;
  do
    v79 = __ldxr(v78);
  while (__stxr(v79 + 1, v78));
  v110 = &off_24C9CC5E0;
  v80 = (_QWORD *)operator new();
  *v80 = &off_24C9D74C8;
  v80[1] = v66;
  v80[2] = v68;
  *(_QWORD *)v111 = v80;
  v82 = *((_QWORD *)&v109 + 1);
  v81 = v109;
  if (!*((_QWORD *)&v109 + 1))
  {
    *(_QWORD *)&v111[8] = v109;
    *(_QWORD *)&v111[16] = 0;
    if ((_QWORD)v109)
      v86 = v109 + 16;
    else
      v86 = 0;
    goto LABEL_133;
  }
  v83 = (unint64_t *)(*((_QWORD *)&v109 + 1) + 16);
  do
    v84 = __ldxr(v83);
  while (__stxr(v84 + 1, v83));
  v85 = *((_QWORD *)&v109 + 1);
  *(_QWORD *)&v111[8] = v81;
  *(_QWORD *)&v111[16] = v82;
  if ((_QWORD)v109)
    v86 = v109 + 16;
  else
    v86 = 0;
  if (!*((_QWORD *)&v109 + 1))
  {
    v81 = v109;
LABEL_133:
    v89 = 0;
    v112 = &off_24C9FB698;
    v113 = v86;
    goto LABEL_134;
  }
  v87 = (unint64_t *)(*((_QWORD *)&v109 + 1) + 16);
  do
    v88 = __ldxr(v87);
  while (__stxr(v88 + 1, v87));
  v89 = *((_QWORD *)&v109 + 1);
  v81 = v109;
  v112 = &off_24C9FB698;
  *(_QWORD *)&v113 = v86;
  *((_QWORD *)&v113 + 1) = v85;
  if (*((_QWORD *)&v109 + 1))
  {
    v90 = (unint64_t *)(*((_QWORD *)&v109 + 1) + 16);
    do
      v91 = __ldxr(v90);
    while (__stxr(v91 + 1, v90));
  }
LABEL_134:
  if (v81)
    v92 = v81 + 24;
  else
    v92 = 0;
  v114 = &off_24C9B2310;
  *(_QWORD *)&v115 = v92;
  *((_QWORD *)&v115 + 1) = v89;
  v93 = operator new();
  *(_QWORD *)v93 = &off_24C9FBA18;
  *(_OWORD *)(v93 + 8) = *(_OWORD *)v106;
  *(_QWORD *)(v93 + 24) = *(_QWORD *)&v106[16];
  memset(v106, 0, sizeof(v106));
  *(_OWORD *)(v93 + 32) = *(_OWORD *)v107;
  *(_QWORD *)(v93 + 48) = *(_QWORD *)&v107[16];
  memset(v107, 0, sizeof(v107));
  *(_OWORD *)(v93 + 56) = v108;
  v108 = 0uLL;
  *(_OWORD *)(v93 + 72) = v109;
  v109 = 0uLL;
  *(_QWORD *)(v93 + 88) = &off_24C9CC5E0;
  *(_OWORD *)(v93 + 96) = *(_OWORD *)v111;
  v94 = *(_QWORD *)&v111[16];
  *(_QWORD *)&v111[8] = 0;
  *(_QWORD *)&v111[16] = 0;
  *(_QWORD *)(v93 + 112) = v94;
  *(_QWORD *)(v93 + 120) = &off_24C9FB698;
  *(_OWORD *)(v93 + 128) = v113;
  v113 = 0uLL;
  *(_QWORD *)v111 = 0;
  *(_QWORD *)(v93 + 144) = &off_24C9B2310;
  *(_OWORD *)(v93 + 152) = v115;
  v115 = 0uLL;
  *(_QWORD *)(v104 + 80) = v93;
  sub_20F22BDB4((uint64_t)&v105);
  do
    v95 = __ldaxr(v64);
  while (__stlxr(v95 - 1, v64));
  if (!v95)
  {
    ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
    std::__shared_weak_count::__release_weak(v63);
  }
  v96 = *(_QWORD *)(*(_QWORD *)v104 + 72);
  v97 = *(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(*(_QWORD *)(v104 + 80) + 96) + 16);
  v105 = &off_24C9CC5E0;
  v97(v106);
  (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)(v96 + 120) + 16))(v96 + 120, &v105);
  v98 = *(_QWORD *)v106;
  v105 = &off_24C9CC5E0;
  *(_QWORD *)v106 = 0;
  if (v98)
    (*(void (**)(uint64_t))(*(_QWORD *)v98 + 8))(v98);
  sub_20E8B43E8((std::string *)(v104 + 40), "Output serialized CMData data further", 0x25uLL);
  v99 = *(_QWORD *)(v104 + 80);
  if (*(char *)(v99 + 31) < 0)
  {
    *(_QWORD *)(v99 + 16) = 9;
    v100 = *(char **)(v99 + 8);
  }
  else
  {
    v100 = (char *)(v99 + 8);
    *(_BYTE *)(v99 + 31) = 9;
  }
  strcpy(v100, "OutputFwd");
  sub_20E8B43E8((std::string *)(v99 + 32), "Output serialized CMData data further", 0x25uLL);
  return v104;
}

void sub_20F228FD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, uint64_t a12, int a13, int a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,char a52,uint64_t a53,char a54,uint64_t a55,char a56,uint64_t a57,char a58)
{
  uint64_t v58;

  if (a2)
  {
    if (*(char *)(v58 - 169) < 0)
      operator delete(*(void **)(v58 - 192));
    sub_20E86665C((uint64_t)&a19);
    sub_20E9AF634((uint64_t)&a21);
    sub_20E9AF634((uint64_t)&a50);
    sub_20E86665C(a12);
    if (*(char *)(a15 + 55) < 0)
      operator delete(*a10);
    if (*(char *)(a15 + 31) < 0)
      operator delete(*a11);
    sub_20E86665C((uint64_t)&a17);
    MEMORY[0x212BC6398](a15, 0x10B3C404AE8992ELL);
    sub_20E860DA4(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20F229494(uint64_t a1)
{
  sub_20F22AC8C(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20F2294BC(uint64_t a1)
{
  sub_20F22AAA8(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20F2294E0(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9FB660;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20F229520(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9FB660;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F229570(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

_QWORD *sub_20F229580(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9FB698;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20F2295B8(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9FB698;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20F229600(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9CC5E0;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9CC5E0;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20F2296D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F229704(uint64_t a1)
{
  sub_20F229F2C(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20F229728(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    LOBYTE(v5) = 0;
    v6 = 0;
    sub_20F22A088(a1 + 11, a2, &v5);
    if (v6)
      sub_20F22A354(&v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20F2297E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    sub_20F22A354(&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_20F22980C(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20F22981C(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20F229828(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20F229838(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20F22A088(a1 + 11, a2, &v14);
  if (v15)
    sub_20F22A354(&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20F2299D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::__assoc_sub_state **v20;
  std::__assoc_sub_state *v21;
  std::exception_ptr v22;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v21 = *v20;
    if (v21)
    {
      std::exception_ptr::exception_ptr(&a20, &a19);
      v22.__ptr_ = &a20;
      std::__assoc_sub_state::set_exception(v21, v22);
      std::exception_ptr::~exception_ptr(&a20);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (a17 < 0)
        operator delete(__p);
      JUMPOUT(0x20F2298FCLL);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20F229A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20F229AA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13)
{
  std::recursive_mutex *v13;

  if ((_BYTE)a11)
    sub_20F22A354(&a10);
  std::recursive_mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void sub_20F229AC8(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20F229B4C(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v4);
  v5 = operator new(0x20uLL);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5[2] = &off_24C9CC5E0;
  v5[3] = v6;
  v8 = *(_QWORD *)(a1 + 96);
  v7 = (_QWORD *)(a1 + 96);
  *v5 = v8;
  v5[1] = v7;
  *(_QWORD *)(v8 + 8) = v5;
  *v7 = v5;
  ++v7[2];
  std::recursive_mutex::unlock(v4);
}

void sub_20F229BFC(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20F229C10(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20F229CA0(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20F229CB4(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v4);
  sub_20F22A47C(a2, a1 + 96);
  std::recursive_mutex::unlock(v4);
}

void sub_20F229CF8(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20F229D0C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20F229D40(uint64_t a1)
{
  return sub_20F229F2C(a1 - 16);
}

void sub_20F229D48(uint64_t a1)
{
  sub_20F229F2C(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20F229D70(uint64_t a1, uint64_t a2)
{
  sub_20F229B4C(a1 - 16, a2);
}

void sub_20F229D78(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v4);
  sub_20F22A47C(a2, a1 + 80);
  std::recursive_mutex::unlock(v4);
}

void sub_20F229DBC(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20F229DD0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20F229E04(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20F229E0C(uint64_t a1)
{
  return sub_20F229F2C(a1 - 24);
}

void sub_20F229E14(uint64_t a1)
{
  sub_20F229F2C(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20F229E3C(uint64_t a1)
{
  sub_20F229C10(a1 - 24);
}

uint64_t sub_20F229E44(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20F229E4C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20F229EB4(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F229F1C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20F229F2C(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9FB6D0;
  *(_QWORD *)(a1 + 16) = &unk_24C9FB748;
  *(_QWORD *)(a1 + 24) = &unk_24C9FB788;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v7 = *(_QWORD *)(a1 + 96);
    v8 = *(uint64_t **)(a1 + 104);
    v9 = *v8;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v8 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v8[1];
        (*(void (**)(uint64_t *))v8[2])(v8 + 2);
        operator delete(v8);
        v8 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20F22A088(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *i;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::exception_ptr v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  char v20;

  v6 = *a1;
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 251, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&v18, v6, a2);
  if (v20)
  {
    v7 = a1 + 1;
    for (i = (_QWORD *)a1[2]; i != v7; i = (_QWORD *)i[1])
      (*(void (**)(_QWORD *, uint64_t *))(i[2] + 16))(i + 2, &v18);
  }
  if (*((_BYTE *)a3 + 8))
  {
    v9 = *a3;
    if (!*a3)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v9 + 24));
    if ((*(_BYTE *)(v9 + 136) & 1) != 0
      || (v17.__ptr_ = 0, v10 = *(_QWORD *)(v9 + 16), std::exception_ptr::~exception_ptr(&v17), v10))
    {
      sub_20E96CE78(2u);
    }
    *(_BYTE *)(v9 + 144) = 0;
    *(_BYTE *)(v9 + 160) = 0;
    if (v20)
    {
      v11 = v19;
      *(_QWORD *)(v9 + 144) = v18;
      *(_QWORD *)(v9 + 152) = v11;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }
      *(_BYTE *)(v9 + 160) = 1;
    }
    *(_DWORD *)(v9 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v9 + 88));
    std::mutex::unlock((std::mutex *)(v9 + 24));
  }
  if (v20)
  {
    v14 = v19;
    if (v19)
    {
      v15 = (unint64_t *)&v19->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
}

void sub_20F22A250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, int a13, __int16 a14, char a15, unsigned __int8 a16, char a17)
{
  std::mutex *v17;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;

  std::mutex::unlock(v17);
  sub_20E869AA8((uint64_t)&a17);
  if (a2 == 1)
  {
    v20 = (uint64_t *)__cxa_begin_catch(a1);
    v21 = *v20;
    a10 = *(_QWORD *)(*(_QWORD *)(*v20 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a9 = (*(uint64_t (**)(void))(v21 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a10, "\n", "message: ", (const char *)&a9, "\n");
    if ((a16 & 0x80u) == 0)
      v22 = (uint64_t *)&a11;
    else
      v22 = a11;
    if ((a16 & 0x80u) == 0)
      v23 = a16;
    else
      v23 = a12;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v22, v23, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20F22A328(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20F22A348);
}

uint64_t *sub_20F22A354(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20F22A440(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20F22A39CLL);
}

char *sub_20F22A47C(int64x2_t *a1, uint64_t a2)
{
  unint64_t v4;
  char *result;
  char *v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  char *v10;
  uint64_t v11;
  int64x2_t *v12;

  v4 = *(_QWORD *)(a2 + 16);
  v10 = 0;
  v9 = 0uLL;
  if (v4)
  {
    if (v4 >> 61)
      sub_20E92CED8();
    result = (char *)operator new(8 * v4);
    v6 = &result[8 * v4];
    v9.i64[0] = (uint64_t)result;
    v9.i64[1] = (uint64_t)result;
    v10 = v6;
    v7 = *(_QWORD *)(a2 + 8);
    v12 = &v9;
    if (v7 != a2)
      goto LABEL_4;
LABEL_7:
    v8 = vdupq_n_s64((unint64_t)result);
    goto LABEL_8;
  }
  v6 = 0;
  result = 0;
  v7 = *(_QWORD *)(a2 + 8);
  v12 = &v9;
  if (v7 == a2)
    goto LABEL_7;
  do
  {
LABEL_4:
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 24) + 48))(*(_QWORD *)(v7 + 24));
    result = (char *)sub_20E9B2D04((uint64_t *)&v12, &v11);
    v7 = *(_QWORD *)(v7 + 8);
  }
  while (v7 != a2);
  v8 = v9;
  v6 = v10;
LABEL_8:
  *a1 = v8;
  a1[1].i64[0] = (uint64_t)v6;
  return result;
}

void sub_20F22A558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F22A57C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F22A5A0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20F22A5B8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_INS1_3vio12area_mappin"
                     "g10SlamCMDataEEENS0_INS_7variantIJNS6_13mapping_types13VIOKeyframeCMENS6_14ObjectAnchorCMENS6_20Rel"
                     "ocalizationResultENSB_7MapDataENSB_19ObjectAnchorRemovalENS6_23VIOStateAndUTCTimestampENSB_16Submap"
                     "sStatsInfoENSB_10MLFrameSetEEEEEEvNS_8optionalISL_EELb0EEEE27__shared_ptr_default_deleteISO_SO_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_INS1_3vio12"
                                "area_mapping10SlamCMDataEEENS0_INS_7variantIJNS6_13mapping_types13VIOKeyframeCMENS6_14Ob"
                                "jectAnchorCMENS6_20RelocalizationResultENSB_7MapDataENSB_19ObjectAnchorRemovalENS6_23VIO"
                                "StateAndUTCTimestampENSB_16SubmapsStatsInfoENSB_10MLFrameSetEEEEEEvNS_8optionalISL_EELb0"
                                "EEEE27__shared_ptr_default_deleteISO_SO_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_INS1_3vio12area_mapping10SlamCMDataEEENS0_INS_7variantIJNS6_13mapping_types13VIOKeyframeCMENS6_14ObjectAnchorCMENS6_20RelocalizationResultENSB_7MapDataENSB_19ObjectAnchorRemovalENS6_23VIOStateAndUTCTimestampENSB_16SubmapsStatsInfoENSB_10MLFrameSetEEEEEEvNS_8optionalISL_EELb0EEEE27__shared_ptr_default_deleteISO_SO_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_INS1_3vio12area_mapping10SlamCMDataEEENS0_INS_7variantIJNS6_13mapping_types13VIOKeyframeCMENS6_14ObjectAnchorCMENS6_20RelocalizationResultENSB_7MapDataENSB_19ObjectAnchorRemovalENS6_23VIOStateAndUTCTimestampENSB_16SubmapsStatsInfoENSB_10MLFrameSetEEEEEEvNS_8optionalISL_EELb0EEEE27__shared_ptr_default_deleteISO_SO_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20F22A628(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20F22A654(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20F22A690@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9FB920;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20F22A6F8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20F22A788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20F22A79C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20F22A82C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20F22A840(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20F22A904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20F22A918(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20F22A9DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20F22A9F0(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20F22AA94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20F22AAA8(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9FB630;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9FB698;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9FB660;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20F22AC8C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = &off_24C9FB600;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
  {
    v3 = sub_20F22AAA8(v2);
    MEMORY[0x212BC6398](v3, 0x10B2C4085F70915);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v7 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;
      if (!v7)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v7)
  {
LABEL_8:
    v8 = sub_20F22AAA8(v7);
    MEMORY[0x212BC6398](v8, 0x10B2C4085F70915);
  }
LABEL_9:
  v9 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v9)
    goto LABEL_13;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_13:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_19:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_19;
LABEL_14:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_20:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20F22ADC4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9FB998;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20F22ADD4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9FB998;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F22AE04(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_20F22AE18(uint64_t a1)
{
  sub_20F22BF98(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20F22AE40(uint64_t a1)
{
  sub_20F22BDB4(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20F22AE68(uint64_t a1)
{
  sub_20F22B5C0(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20F22AE8C(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    LOBYTE(v5) = 0;
    v6 = 0;
    sub_20F22B71C(a1 + 11, a2, &v5);
    if (v6)
      sub_20F22BAE0(&v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20F22AF48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    sub_20F22BAE0(&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void sub_20F22AF70(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20F22B71C(a1 + 11, a2, &v14);
  if (v15)
    sub_20F22BAE0(&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20F22B108(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::__assoc_sub_state **v20;
  std::__assoc_sub_state *v21;
  std::exception_ptr v22;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v21 = *v20;
    if (v21)
    {
      std::exception_ptr::exception_ptr(&a20, &a19);
      v22.__ptr_ = &a20;
      std::__assoc_sub_state::set_exception(v21, v22);
      std::exception_ptr::~exception_ptr(&a20);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (a17 < 0)
        operator delete(__p);
      JUMPOUT(0x20F22B034);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20F22B17C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20F22B1DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13)
{
  std::recursive_mutex *v13;

  if ((_BYTE)a11)
    sub_20F22BAE0(&a10);
  std::recursive_mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void sub_20F22B200(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20F22B284(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v4);
  v5 = operator new(0x20uLL);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5[2] = &off_24C9CC5E0;
  v5[3] = v6;
  v8 = *(_QWORD *)(a1 + 96);
  v7 = (_QWORD *)(a1 + 96);
  *v5 = v8;
  v5[1] = v7;
  *(_QWORD *)(v8 + 8) = v5;
  *v7 = v5;
  ++v7[2];
  std::recursive_mutex::unlock(v4);
}

void sub_20F22B334(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20F22B348(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20F22B3D8(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20F22B3EC(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v4);
  sub_20F22BC08(a2, a1 + 96);
  std::recursive_mutex::unlock(v4);
}

void sub_20F22B430(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20F22B444(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20F22B478(uint64_t a1)
{
  return sub_20F22B5C0(a1 - 16);
}

void sub_20F22B480(uint64_t a1)
{
  sub_20F22B5C0(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20F22B4A8(uint64_t a1, uint64_t a2)
{
  sub_20F22B284(a1 - 16, a2);
}

void sub_20F22B4B0(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v4);
  sub_20F22BC08(a2, a1 + 80);
  std::recursive_mutex::unlock(v4);
}

void sub_20F22B4F4(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20F22B508(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20F22B53C(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20F22B544(uint64_t a1)
{
  return sub_20F22B5C0(a1 - 24);
}

void sub_20F22B54C(uint64_t a1)
{
  sub_20F22B5C0(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20F22B574(uint64_t a1)
{
  sub_20F22B348(a1 - 24);
}

uint64_t sub_20F22B57C(uint64_t a1)
{
  return a1 - 24;
}

void sub_20F22B588()
{
  JUMPOUT(0x212BC6398);
}

void sub_20F22B59C(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
}

uint64_t sub_20F22B5C0(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9FBA48;
  *(_QWORD *)(a1 + 16) = &unk_24C9FBAC0;
  *(_QWORD *)(a1 + 24) = &unk_24C9FBB00;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v7 = *(_QWORD *)(a1 + 96);
    v8 = *(uint64_t **)(a1 + 104);
    v9 = *v8;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v8 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v8[1];
        (*(void (**)(uint64_t *))v8[2])(v8 + 2);
        operator delete(v8);
        v8 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20F22B71C(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::exception_ptr v22;
  uint64_t v23;
  std::__shared_weak_count *v24;

  v6 = *a1;
  if (!v6)
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v7 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (byte_254A6DE68)
      v8 = byte_254A6DE70 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_254A6DE40;
      for (i = qword_254A6DE48; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      abort();
    qword_254A6DE58(unk_254A6DE60, "callable_", 9, "", 0);
    v6 = *a1;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&v23, v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, uint64_t *))(j[2] + 16))(j + 2, &v23);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!v14)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v22.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v22), v15))
    {
      sub_20E96CE78(2u);
    }
    v16 = v24;
    *(_QWORD *)(v14 + 144) = v23;
    *(_QWORD *)(v14 + 152) = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
  v19 = v24;
  if (v24)
  {
    v20 = (unint64_t *)&v24->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_20F22B9D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, int a14, __int16 a15, char a16, unsigned __int8 a17, char a18)
{
  std::mutex *v18;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;

  std::mutex::unlock(v18);
  sub_20E86665C((uint64_t)&a18);
  if (a2 == 1)
  {
    v21 = (uint64_t *)__cxa_begin_catch(a1);
    v22 = *v21;
    a11 = *(_QWORD *)(*(_QWORD *)(*v21 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a10 = (*(uint64_t (**)(void))(v22 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a11, "\n", "message: ", (const char *)&a10, "\n");
    if ((a17 & 0x80u) == 0)
      v23 = (uint64_t *)&a12;
    else
      v23 = a12;
    if ((a17 & 0x80u) == 0)
      v24 = a17;
    else
      v24 = a13;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v23, v24, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20F22BAB4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20F22BAD4);
}

uint64_t *sub_20F22BAE0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20F22BBCC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20F22BB28);
}

char *sub_20F22BC08(int64x2_t *a1, uint64_t a2)
{
  unint64_t v4;
  char *result;
  char *v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  char *v10;
  uint64_t v11;
  int64x2_t *v12;

  v4 = *(_QWORD *)(a2 + 16);
  v10 = 0;
  v9 = 0uLL;
  if (v4)
  {
    if (v4 >> 61)
      sub_20E92CED8();
    result = (char *)operator new(8 * v4);
    v6 = &result[8 * v4];
    v9.i64[0] = (uint64_t)result;
    v9.i64[1] = (uint64_t)result;
    v10 = v6;
    v7 = *(_QWORD *)(a2 + 8);
    v12 = &v9;
    if (v7 != a2)
      goto LABEL_4;
LABEL_7:
    v8 = vdupq_n_s64((unint64_t)result);
    goto LABEL_8;
  }
  v6 = 0;
  result = 0;
  v7 = *(_QWORD *)(a2 + 8);
  v12 = &v9;
  if (v7 == a2)
    goto LABEL_7;
  do
  {
LABEL_4:
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 24) + 48))(*(_QWORD *)(v7 + 24));
    result = (char *)sub_20E9B2D04((uint64_t *)&v12, &v11);
    v7 = *(_QWORD *)(v7 + 8);
  }
  while (v7 != a2);
  v8 = v9;
  v6 = v10;
LABEL_8:
  *a1 = v8;
  a1[1].i64[0] = (uint64_t)v6;
  return result;
}

void sub_20F22BCE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F22BD08(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F22BD2C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20F22BD44(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_INS_7variantIJNS1_3vio"
                     "13mapping_types13VIOKeyframeCMENS7_14ObjectAnchorCMENS7_20RelocalizationResultENS8_7MapDataENS8_19O"
                     "bjectAnchorRemovalENS7_23VIOStateAndUTCTimestampENS8_16SubmapsStatsInfoENS8_10MLFrameSetEEEEEESI_vS"
                     "I_Lb0EEEE27__shared_ptr_default_deleteISJ_SJ_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_INS_7varian"
                                "tIJNS1_3vio13mapping_types13VIOKeyframeCMENS7_14ObjectAnchorCMENS7_20RelocalizationResul"
                                "tENS8_7MapDataENS8_19ObjectAnchorRemovalENS7_23VIOStateAndUTCTimestampENS8_16SubmapsStat"
                                "sInfoENS8_10MLFrameSetEEEEEESI_vSI_Lb0EEEE27__shared_ptr_default_deleteISJ_SJ_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_INS_7variantIJNS1_3vio13mapping_types13VIOKeyframeCMENS7_14ObjectAnchorCMENS7_20RelocalizationResultENS8_7MapDataENS8_19ObjectAnchorRemovalENS7_23VIOStateAndUTCTimestampENS8_16SubmapsStatsInfoENS8_10MLFrameSetEEEEEESI_vSI_Lb0EEEE27__shared_ptr_default_deleteISJ_SJ_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_INS_7variantIJNS1_3vio13mapping_types13VIOKeyframeCMENS7_14ObjectAnchorCMENS7_20RelocalizationResultENS8_7MapDataENS8_19ObjectAnchorRemovalENS7_23VIOStateAndUTCTimestampENS8_16SubmapsStatsInfoENS8_10MLFrameSetEEEEEESI_vSI_Lb0EEEE27__shared_ptr_default_deleteISJ_SJ_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20F22BDB4(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9FBA18;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9FB698;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9CC5E0;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20F22BF98(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = &off_24C9FB9E8;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
  {
    v3 = sub_20F22BDB4(v2);
    MEMORY[0x212BC6398](v3, 0x10B2C4085F70915);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v7 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;
      if (!v7)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v7)
  {
LABEL_8:
    v8 = sub_20F22BDB4(v7);
    MEMORY[0x212BC6398](v8, 0x10B2C4085F70915);
  }
LABEL_9:
  v9 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v9)
    goto LABEL_13;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_13:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_19:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_19;
LABEL_14:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_20:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t *sub_20F22C0D0(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;

  if (result)
  {
    v1 = result;
    sub_20F22BF98((uint64_t)(result + 1));
    v2 = *v1;
    *v1 = 0;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    JUMPOUT(0x212BC6398);
  }
  return result;
}

uint64_t sub_20F22C128(uint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;

  *(_QWORD *)a1 = off_24C9FBC78;
  v2 = *(void ***)(a1 + 472);
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)(a1 + 456);
  *(_QWORD *)(a1 + 456) = 0;
  if (v3)
    operator delete(v3);
  sub_20F22C604((_QWORD *)(a1 + 200));
  sub_20F22C7A0((char ***)(a1 + 8));
  return a1;
}

void sub_20F22C1AC(uint64_t a1)
{
  void **v2;
  void *v3;
  void **v4;

  *(_QWORD *)a1 = off_24C9FBC78;
  v2 = *(void ***)(a1 + 472);
  if (v2)
  {
    do
    {
      v4 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = *(void **)(a1 + 456);
  *(_QWORD *)(a1 + 456) = 0;
  if (v3)
    operator delete(v3);
  sub_20F22C604((_QWORD *)(a1 + 200));
  sub_20F22C7A0((char ***)(a1 + 8));
  JUMPOUT(0x212BC6398);
}

void sub_20F22C240(uint64_t a1, _QWORD *__s2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  uint64_t v22;
  __int128 v23;
  void **v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  void **v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;

  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  if (v3 != v2)
  {
    if (*((char *)__s2 + 23) >= 0)
      v6 = *((unsigned __int8 *)__s2 + 23);
    else
      v6 = __s2[1];
    if ((*((_BYTE *)__s2 + 23) & 0x80) != 0)
    {
      v7 = (unsigned __int8 *)*__s2;
      while (1)
      {
        v11 = *(unsigned __int8 *)(v3 + 47);
        if ((v11 & 0x80u) == 0)
          v12 = *(unsigned __int8 *)(v3 + 47);
        else
          v12 = *(_QWORD *)(v3 + 32);
        if (v12 == v6)
        {
          if ((v11 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)(v3 + 24), v7, *(_QWORD *)(v3 + 32)))
              goto LABEL_30;
          }
          else
          {
            if (!*(_BYTE *)(v3 + 47))
              goto LABEL_30;
            v13 = 0;
            while (*(unsigned __int8 *)(v3 + v13 + 24) == v7[v13])
            {
              if (v11 == ++v13)
                goto LABEL_30;
            }
          }
        }
        v3 += 376;
        if (v3 == v2)
          return;
      }
    }
    while (1)
    {
      v8 = *(unsigned __int8 *)(v3 + 47);
      v9 = (v8 & 0x80u) == 0 ? *(unsigned __int8 *)(v3 + 47) : *(_QWORD *)(v3 + 32);
      if (v9 == v6)
        break;
LABEL_8:
      v3 += 376;
      if (v3 == v2)
        return;
    }
    if ((v8 & 0x80) != 0)
    {
      if (!memcmp(*(const void **)(v3 + 24), __s2, *(_QWORD *)(v3 + 32)))
        goto LABEL_30;
      goto LABEL_8;
    }
    if (*(_BYTE *)(v3 + 47))
    {
      v10 = 0;
      while (*(unsigned __int8 *)(v3 + v10 + 24) == *((unsigned __int8 *)__s2 + v10))
      {
        if (v8 == ++v10)
          goto LABEL_30;
      }
      goto LABEL_8;
    }
LABEL_30:
    if (v3 != v2)
    {
      v14 = v3 + 376;
      if (v3 + 376 != v2)
      {
        v15 = v3;
        while (1)
        {
          v16 = (const void **)(v3 + 400);
          v17 = *(unsigned __int8 *)(v3 + 423);
          if ((v17 & 0x80u) == 0)
            v18 = *(unsigned __int8 *)(v3 + 423);
          else
            v18 = *(_QWORD *)(v3 + 408);
          v19 = *((unsigned __int8 *)__s2 + 23);
          v20 = (char)v19;
          if ((v19 & 0x80u) != 0)
            v19 = __s2[1];
          if (v18 != v19)
            goto LABEL_52;
          if (v20 >= 0)
            v21 = __s2;
          else
            v21 = (_QWORD *)*__s2;
          if ((v17 & 0x80) != 0)
          {
            if (memcmp(*v16, v21, *(_QWORD *)(v3 + 408)))
              goto LABEL_52;
          }
          else if (*(_BYTE *)(v3 + 423))
          {
            v22 = 0;
            while (*(unsigned __int8 *)(v3 + v22 + 400) == *((unsigned __int8 *)v21 + v22))
            {
              if (v17 == ++v22)
                goto LABEL_35;
            }
LABEL_52:
            v23 = *(_OWORD *)v14;
            *(_DWORD *)(v15 + 16) = *(_DWORD *)(v14 + 16);
            *(_OWORD *)v15 = v23;
            v24 = (void **)(v15 + 24);
            if (*(char *)(v15 + 47) < 0)
              operator delete(*v24);
            v25 = *(_OWORD *)v16;
            *(_QWORD *)(v15 + 40) = *(_QWORD *)(v3 + 416);
            *(_OWORD *)v24 = v25;
            *(_BYTE *)(v3 + 423) = 0;
            *(_BYTE *)(v3 + 400) = 0;
            *(_QWORD *)(v15 + 48) = *(_QWORD *)(v3 + 424);
            v26 = *(_OWORD *)(v3 + 432);
            v27 = *(_OWORD *)(v3 + 448);
            v28 = *(_OWORD *)(v3 + 464);
            *(_OWORD *)(v15 + 104) = *(_OWORD *)(v3 + 480);
            *(_OWORD *)(v15 + 88) = v28;
            *(_OWORD *)(v15 + 72) = v27;
            *(_OWORD *)(v15 + 56) = v26;
            v29 = *(_OWORD *)(v3 + 496);
            v30 = *(_OWORD *)(v3 + 512);
            v31 = *(_OWORD *)(v3 + 528);
            *(_OWORD *)(v15 + 168) = *(_OWORD *)(v3 + 544);
            *(_OWORD *)(v15 + 152) = v31;
            *(_OWORD *)(v15 + 136) = v30;
            *(_OWORD *)(v15 + 120) = v29;
            v32 = *(_OWORD *)(v3 + 656);
            v33 = *(_OWORD *)(v3 + 672);
            v34 = *(_OWORD *)(v3 + 640);
            *(_OWORD *)(v15 + 248) = *(_OWORD *)(v3 + 624);
            *(_OWORD *)(v15 + 280) = v32;
            *(_OWORD *)(v15 + 296) = v33;
            *(_OWORD *)(v15 + 264) = v34;
            v35 = *(_OWORD *)(v3 + 560);
            v36 = *(_OWORD *)(v3 + 576);
            v37 = *(_OWORD *)(v3 + 592);
            *(_OWORD *)(v15 + 232) = *(_OWORD *)(v3 + 608);
            *(_OWORD *)(v15 + 216) = v37;
            *(_OWORD *)(v15 + 200) = v36;
            *(_OWORD *)(v15 + 184) = v35;
            v38 = *(_OWORD *)(v3 + 688);
            *(_BYTE *)(v15 + 328) = *(_BYTE *)(v3 + 704);
            *(_OWORD *)(v15 + 312) = v38;
            v39 = (void **)(v15 + 336);
            v40 = (__int128 *)(v3 + 712);
            if (*(unsigned __int8 *)(v15 + 360) == *(unsigned __int8 *)(v3 + 736))
            {
              if (*(_BYTE *)(v15 + 360))
              {
                if (*(char *)(v15 + 359) < 0)
                  operator delete(*v39);
                v41 = *v40;
                *(_QWORD *)(v15 + 352) = *(_QWORD *)(v3 + 728);
                *(_OWORD *)v39 = v41;
                *(_BYTE *)(v3 + 735) = 0;
                *(_BYTE *)(v3 + 712) = 0;
              }
            }
            else if (*(_BYTE *)(v15 + 360))
            {
              if (*(char *)(v15 + 359) < 0)
                operator delete(*v39);
              *(_BYTE *)(v15 + 360) = 0;
            }
            else
            {
              v42 = *v40;
              *(_QWORD *)(v15 + 352) = *(_QWORD *)(v3 + 728);
              *(_OWORD *)v39 = v42;
              *(_QWORD *)(v3 + 720) = 0;
              *(_QWORD *)(v3 + 728) = 0;
              *(_QWORD *)v40 = 0;
              *(_BYTE *)(v15 + 360) = 1;
            }
            *(_BYTE *)(v15 + 368) = *(_BYTE *)(v3 + 744);
            v15 += 376;
          }
LABEL_35:
          v14 += 376;
          v3 += 376;
          if (v14 == v2)
          {
            v2 = *(_QWORD *)(a1 + 40);
            v3 = v15;
            break;
          }
        }
      }
      if (v3 != v2)
      {
        sub_20F22F948((uint64_t)&v49, v2, v2, v3);
        v44 = v43;
        v45 = *(_QWORD *)(a1 + 40);
        if (v45 != v43)
        {
          v46 = v45 - 352;
          do
          {
            while (1)
            {
              if (*(_BYTE *)(v46 + 336))
              {
                if (*(char *)(v46 + 335) < 0)
                  operator delete(*(void **)(v46 + 312));
              }
              if (*(char *)(v46 + 23) < 0)
                break;
              v47 = v46 - 24;
              v46 -= 376;
              if (v47 == v44)
                goto LABEL_73;
            }
            operator delete(*(void **)v46);
            v48 = v46 - 24;
            v46 -= 376;
          }
          while (v48 != v44);
        }
LABEL_73:
        *(_QWORD *)(a1 + 40) = v44;
      }
    }
  }
}

_QWORD *sub_20F22C604(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;

  v2 = a1 + 28;
  v3 = (_QWORD *)a1[31];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[27];
  if (v5 == a1 + 24)
  {
    v6 = 4;
    v5 = a1 + 24;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = (_QWORD *)a1[23];
  if (v7 == a1 + 20)
  {
    v8 = 4;
    v7 = a1 + 20;
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_16:
  v9 = (_QWORD *)a1[19];
  if (v9 == a1 + 16)
  {
    v10 = 4;
    v9 = a1 + 16;
  }
  else
  {
    if (!v9)
      goto LABEL_21;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_21:
  v11 = (_QWORD *)a1[15];
  if (v11 == a1 + 12)
  {
    v12 = 4;
    v11 = a1 + 12;
  }
  else
  {
    if (!v11)
      goto LABEL_26;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_26:
  v13 = (_QWORD *)a1[11];
  if (v13 == a1 + 8)
  {
    v14 = 4;
    v13 = a1 + 8;
  }
  else
  {
    if (!v13)
      goto LABEL_31;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_31:
  v15 = (_QWORD *)a1[7];
  if (v15 == a1 + 4)
  {
    v16 = 4;
    v15 = a1 + 4;
  }
  else
  {
    if (!v15)
      goto LABEL_36;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_36:
  v17 = (_QWORD *)a1[3];
  if (v17 == a1)
  {
    v18 = 4;
    v17 = a1;
    goto LABEL_40;
  }
  if (v17)
  {
    v18 = 5;
LABEL_40:
    (*(void (**)(void))(*v17 + 8 * v18))();
  }
  return a1;
}

char ***sub_20F22C7A0(char ***a1)
{
  void **v2;
  void **v3;
  char **v4;
  void **v5;
  void *v6;
  char *v7;
  char *v8;
  char *v9;
  void *v10;
  char **v11;
  char **v12;
  char **v13;
  char **v14;
  char *v15;
  char *v16;
  char **v17;
  char **v18;
  char **v19;
  char *v20;
  char **v21;
  char **v22;
  char **v23;
  char **v24;
  uint64_t v25;
  char **v26;
  char **v27;
  char **v28;
  char **v29;
  char **v30;
  char **v31;
  char **v32;
  char **v33;
  char **v34;
  char **v35;
  char **v36;

  v2 = (void **)a1[21];
  if (v2)
  {
    v3 = (void **)a1[22];
    v4 = a1[21];
    if (v3 != v2)
    {
      v5 = (void **)a1[22];
      do
      {
        sub_20E86872C((uint64_t)(v3 - 11), *(v3 - 10));
        v8 = (char *)*(v5 - 14);
        v5 -= 14;
        v7 = v8;
        if (v8)
        {
          v9 = (char *)*(v3 - 13);
          v6 = v7;
          if (v9 != v7)
          {
            do
            {
              v10 = (void *)*((_QWORD *)v9 - 3);
              if (v10)
              {
                *((_QWORD *)v9 - 2) = v10;
                operator delete(v10);
              }
              v9 -= 48;
            }
            while (v9 != v7);
            v6 = *v5;
          }
          *(v3 - 13) = v7;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = a1[21];
    }
    a1[22] = (char **)v2;
    operator delete(v4);
  }
  v11 = a1[18];
  if (v11)
  {
    v12 = a1[19];
    v13 = a1[18];
    if (v12 != v11)
    {
      v14 = a1[19];
      do
      {
        v16 = *(v14 - 4);
        v14 -= 4;
        v15 = v16;
        if (v16)
        {
          *(v12 - 3) = v15;
          operator delete(v15);
        }
        v12 = v14;
      }
      while (v14 != v11);
      v13 = a1[18];
    }
    a1[19] = v11;
    operator delete(v13);
  }
  v17 = a1[15];
  if (v17)
  {
    v18 = a1[16];
    v19 = a1[15];
    if (v18 != v17)
    {
      do
      {
        v20 = *(v18 - 20);
        if (v20)
        {
          *(v18 - 19) = v20;
          operator delete(v20);
        }
        v18 -= 113;
      }
      while (v18 != v17);
      v19 = a1[15];
    }
    a1[16] = v17;
    operator delete(v19);
  }
  v21 = a1[12];
  if (v21)
  {
    v22 = a1[13];
    v23 = a1[12];
    if (v22 != v21)
    {
      do
      {
        if (*((char *)v22 - 9) < 0)
          operator delete(*(v22 - 4));
        v22 -= 4;
      }
      while (v22 != v21);
      v23 = a1[12];
    }
    a1[13] = v21;
    operator delete(v23);
  }
  v24 = a1[9];
  if (v24)
  {
    v25 = (uint64_t)a1[10];
    v26 = a1[9];
    if ((char **)v25 != v24)
    {
      do
        v25 = sub_20E9545B0(v25 - 440);
      while ((char **)v25 != v24);
      v26 = a1[9];
    }
    a1[10] = v24;
    operator delete(v26);
  }
  v27 = a1[6];
  if (v27)
  {
    a1[7] = v27;
    operator delete(v27);
  }
  v28 = a1[3];
  if (v28)
  {
    v29 = a1[4];
    v30 = a1[3];
    if (v29 != v28)
    {
      v31 = v29 - 44;
      do
      {
        while (1)
        {
          if (*((_BYTE *)v31 + 336) && *((char *)v31 + 335) < 0)
            operator delete(v31[39]);
          if (*((char *)v31 + 23) < 0)
            break;
          v32 = v31 - 3;
          v31 -= 47;
          if (v32 == v28)
            goto LABEL_55;
        }
        operator delete(*v31);
        v33 = v31 - 3;
        v31 -= 47;
      }
      while (v33 != v28);
LABEL_55:
      v30 = a1[3];
    }
    a1[4] = v28;
    operator delete(v30);
  }
  v34 = *a1;
  if (*a1)
  {
    v35 = a1[1];
    v36 = *a1;
    if (v35 != v34)
    {
      do
        v35 = sub_20E9549C4(v35 - 125);
      while (v35 != v34);
      v36 = *a1;
    }
    a1[1] = v34;
    operator delete(v36);
  }
  return a1;
}

void **sub_20F22CA30(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 3);
        if (v5)
        {
          *((_QWORD *)v3 - 2) = v5;
          operator delete(v5);
        }
        v6 = (std::__shared_weak_count *)*((_QWORD *)v3 - 68);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v3 -= 552;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_20F22CADC(uint64_t ***a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  _BYTE v41[288];
  _BYTE v42[288];
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  char v60;

  v3 = **a1;
  kdebug_trace();
  v4 = v3[1];
  v5 = v3[2];
  if (v4 != v5)
  {
    while (*(_QWORD *)(a2 + 880) != *(_QWORD *)(v4 + 880) || *(_DWORD *)(a2 + 888) != *(_DWORD *)(v4 + 888))
    {
      v4 += 1000;
      if (v4 == v5)
        goto LABEL_9;
    }
  }
  if (v4 == v5)
  {
LABEL_9:
    sub_20F22E258((uint64_t)&v26, a2);
    v60 = 1;
    v7 = v3[2];
    if (v7 >= v3[3])
    {
      v22 = sub_20F22DD3C(v3 + 1, (uint64_t)&v26);
    }
    else
    {
      *(_OWORD *)v7 = 0u;
      *(_OWORD *)(v7 + 16) = 0u;
      *(_OWORD *)v7 = v26;
      *(_QWORD *)(v7 + 16) = v27;
      v26 = 0u;
      v27 = 0;
      *(_OWORD *)(v7 + 32) = 0u;
      *(_OWORD *)(v7 + 24) = v28;
      *(_QWORD *)(v7 + 40) = v29;
      v28 = 0u;
      v29 = 0;
      v8 = v30;
      v9 = v32;
      *(_OWORD *)(v7 + 64) = v31;
      *(_OWORD *)(v7 + 80) = v9;
      *(_OWORD *)(v7 + 48) = v8;
      v10 = v33;
      v11 = v34;
      v12 = v36;
      *(_OWORD *)(v7 + 128) = v35;
      *(_OWORD *)(v7 + 144) = v12;
      *(_OWORD *)(v7 + 96) = v10;
      *(_OWORD *)(v7 + 112) = v11;
      v13 = v37;
      v14 = v38;
      v15 = v39;
      *(_QWORD *)(v7 + 208) = v40;
      *(_OWORD *)(v7 + 176) = v14;
      *(_OWORD *)(v7 + 192) = v15;
      *(_OWORD *)(v7 + 160) = v13;
      memcpy((void *)(v7 + 216), v41, 0x120uLL);
      memcpy((void *)(v7 + 504), v42, 0x120uLL);
      *(_QWORD *)(v7 + 792) = 0;
      *(_OWORD *)(v7 + 800) = 0u;
      *(_OWORD *)(v7 + 792) = v43;
      *(_QWORD *)(v7 + 808) = v44;
      v43 = 0u;
      v44 = 0;
      v16 = v46;
      *(_OWORD *)(v7 + 816) = v45;
      *(_QWORD *)(v7 + 832) = v16;
      v17 = v48;
      *(_OWORD *)(v7 + 840) = v47;
      *(_QWORD *)(v7 + 856) = v17;
      *(_OWORD *)(v7 + 864) = v49;
      v18 = v50;
      *(_QWORD *)(v7 + 896) = v51;
      *(_OWORD *)(v7 + 880) = v18;
      *(_QWORD *)(v7 + 920) = 0;
      *(_OWORD *)(v7 + 904) = 0u;
      *(_OWORD *)(v7 + 904) = v52;
      *(_QWORD *)(v7 + 920) = v53;
      v52 = 0u;
      v53 = 0;
      *(_QWORD *)(v7 + 928) = v54;
      v19 = v7 + 936;
      v20 = v55;
      *(_QWORD *)(v7 + 936) = v55;
      v21 = v56;
      *(_QWORD *)(v7 + 944) = v56;
      if (v21)
      {
        *(_QWORD *)(v20 + 16) = v19;
        v54 = &v55;
        v55 = 0;
        v56 = 0;
      }
      else
      {
        *(_QWORD *)(v7 + 928) = v19;
      }
      v23 = v57;
      v24 = v58;
      *(_QWORD *)(v7 + 984) = v59;
      *(_OWORD *)(v7 + 952) = v23;
      *(_OWORD *)(v7 + 968) = v24;
      *(_BYTE *)(v7 + 992) = v60;
      v22 = v7 + 1000;
    }
    v3[2] = v22;
    sub_20E9549C4((char **)&v26);
  }
  return kdebug_trace();
}

void sub_20F22CD64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9)
{
  sub_20E9549C4(&a9);
  kdebug_trace();
  _Unwind_Resume(a1);
}

uint64_t sub_20F22CDA8(uint64_t **a1, __int128 *a2)
{
  uint64_t v3;
  const void **v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  const void *v22;
  __int128 v23;
  uint64_t v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  char *v42;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  __int128 __p;
  uint64_t v68;
  char v69;
  char v70;

  v3 = **a1;
  kdebug_trace();
  v4 = (const void **)a2 + 3;
  if (sub_20E8D7BCC((_QWORD *)(v3 + 456), (uint64_t)a2 + 24))
    return kdebug_trace();
  v5 = *(_QWORD *)(v3 + 32);
  v6 = *(_QWORD *)(v3 + 40);
  if (v5 == v6)
  {
LABEL_24:
    if (v5 != v6)
      return kdebug_trace();
    goto LABEL_25;
  }
  v7 = *((_BYTE *)a2 + 47);
  v8 = v7;
  v9 = *((_QWORD *)a2 + 4);
  if (v7 >= 0)
    v10 = *((unsigned __int8 *)a2 + 47);
  else
    v10 = *((_QWORD *)a2 + 4);
  if ((*((_BYTE *)a2 + 47) & 0x80) == 0)
  {
    if (v7)
    {
      do
      {
        v12 = *(unsigned __int8 *)(v5 + 47);
        v13 = (char)v12;
        if ((v12 & 0x80u) != 0)
          v12 = *(_QWORD *)(v5 + 32);
        if (v10 == v12)
        {
          if (v13 >= 0)
            v14 = (unsigned __int8 *)(v5 + 24);
          else
            v14 = *(unsigned __int8 **)(v5 + 24);
          v15 = (unsigned __int8 *)a2 + 24;
          v16 = *((unsigned __int8 *)a2 + 47);
          while (*v15 == *v14)
          {
            ++v15;
            ++v14;
            if (!--v16)
              goto LABEL_24;
          }
        }
        v5 += 376;
      }
      while (v5 != v6);
      goto LABEL_26;
    }
    while (1)
    {
      v11 = *(unsigned __int8 *)(v5 + 47);
      if ((v11 & 0x80u) != 0)
        v11 = *(_QWORD *)(v5 + 32);
      if (v10 == v11)
        goto LABEL_24;
      v5 += 376;
      if (v5 == v6)
      {
        v44 = *a2;
        v45 = *((_QWORD *)a2 + 2);
        goto LABEL_40;
      }
    }
  }
  v17 = *v4;
  v18 = v5 + 24;
  while (1)
  {
    v20 = *(unsigned __int8 *)(v18 + 23);
    v21 = (char)v20;
    if ((v20 & 0x80u) != 0)
      v20 = *(_QWORD *)(v18 + 8);
    if (v10 == v20)
    {
      v22 = v21 >= 0 ? (const void *)v18 : *(const void **)v18;
      if (!memcmp(v17, v22, v9))
        break;
    }
    v19 = v18 + 352;
    v18 += 376;
    if (v19 == v6)
      goto LABEL_26;
  }
  if (v18 - 24 == v6)
  {
LABEL_25:
    v8 = *((_BYTE *)a2 + 47);
LABEL_26:
    v44 = *a2;
    v45 = *((_QWORD *)a2 + 2);
    if (v8 < 0)
    {
      sub_20E860C04(&v46, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
    }
    else
    {
LABEL_40:
      v46 = *(_OWORD *)v4;
      v47 = *((_QWORD *)a2 + 5);
    }
    v48 = *((_QWORD *)a2 + 6);
    v53 = *(__int128 *)((char *)a2 + 120);
    v54 = *(__int128 *)((char *)a2 + 136);
    v55 = *(__int128 *)((char *)a2 + 152);
    v56 = *(__int128 *)((char *)a2 + 168);
    v49 = *(__int128 *)((char *)a2 + 56);
    v50 = *(__int128 *)((char *)a2 + 72);
    v51 = *(__int128 *)((char *)a2 + 88);
    v52 = *(__int128 *)((char *)a2 + 104);
    v23 = *(__int128 *)((char *)a2 + 280);
    v62 = *(__int128 *)((char *)a2 + 264);
    v63 = v23;
    v64 = *(__int128 *)((char *)a2 + 296);
    v61 = *(__int128 *)((char *)a2 + 248);
    v57 = *(__int128 *)((char *)a2 + 184);
    v58 = *(__int128 *)((char *)a2 + 200);
    v59 = *(__int128 *)((char *)a2 + 216);
    v60 = *(__int128 *)((char *)a2 + 232);
    v24 = *((_QWORD *)a2 + 41);
    v65 = *(__int128 *)((char *)a2 + 312);
    v66 = v24;
    LOBYTE(__p) = 0;
    v69 = 0;
    if (*((_BYTE *)a2 + 360))
    {
      if (*((char *)a2 + 359) < 0)
      {
        sub_20E860C04(&__p, *((void **)a2 + 42), *((_QWORD *)a2 + 43));
      }
      else
      {
        __p = a2[21];
        v68 = *((_QWORD *)a2 + 44);
      }
      v69 = 1;
    }
    v70 = 1;
    v25 = *(_QWORD *)(v3 + 40);
    if (v25 >= *(_QWORD *)(v3 + 48))
    {
      v42 = sub_20F22EB34((void **)(v3 + 32), (uint64_t)&v44);
    }
    else
    {
      v26 = v44;
      *(_QWORD *)(v25 + 16) = v45;
      *(_OWORD *)v25 = v26;
      v27 = v46;
      *(_QWORD *)(v25 + 40) = v47;
      *(_OWORD *)(v25 + 24) = v27;
      v47 = 0;
      v46 = 0uLL;
      *(_QWORD *)(v25 + 48) = v48;
      v28 = v49;
      v29 = v50;
      v30 = v51;
      *(_OWORD *)(v25 + 104) = v52;
      *(_OWORD *)(v25 + 88) = v30;
      *(_OWORD *)(v25 + 72) = v29;
      *(_OWORD *)(v25 + 56) = v28;
      v31 = v53;
      v32 = v54;
      v33 = v55;
      *(_OWORD *)(v25 + 168) = v56;
      *(_OWORD *)(v25 + 152) = v33;
      *(_OWORD *)(v25 + 136) = v32;
      *(_OWORD *)(v25 + 120) = v31;
      v34 = v57;
      v35 = v58;
      v36 = v59;
      *(_OWORD *)(v25 + 232) = v60;
      *(_OWORD *)(v25 + 216) = v36;
      *(_OWORD *)(v25 + 200) = v35;
      *(_OWORD *)(v25 + 184) = v34;
      v37 = v61;
      v38 = v62;
      v39 = v64;
      *(_OWORD *)(v25 + 280) = v63;
      *(_OWORD *)(v25 + 296) = v39;
      *(_OWORD *)(v25 + 264) = v38;
      *(_OWORD *)(v25 + 248) = v37;
      v40 = v65;
      *(_QWORD *)(v25 + 328) = v66;
      *(_OWORD *)(v25 + 312) = v40;
      *(_BYTE *)(v25 + 336) = 0;
      *(_BYTE *)(v25 + 360) = 0;
      if (v69)
      {
        v41 = __p;
        *(_QWORD *)(v25 + 352) = v68;
        *(_OWORD *)(v25 + 336) = v41;
        v68 = 0;
        __p = 0uLL;
        *(_BYTE *)(v25 + 360) = 1;
      }
      *(_BYTE *)(v25 + 368) = v70;
      v42 = (char *)(v25 + 376);
    }
    *(_QWORD *)(v3 + 40) = v42;
    if (v69 && SHIBYTE(v68) < 0)
      operator delete((void *)__p);
    if (SHIBYTE(v47) < 0)
      operator delete((void *)v46);
  }
  return kdebug_trace();
}

void sub_20F22D1EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59,char a60)
{
  if (a60 && a59 < 0)
    operator delete(__p);
  if (a17 < 0)
    operator delete(a12);
  kdebug_trace();
  _Unwind_Resume(a1);
}

uint64_t sub_20F22D258(uint64_t **a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v15;
  _OWORD v16[10];
  _DWORD v17[74];
  char v18;

  v3 = **a1;
  kdebug_trace();
  v4 = *(_DWORD *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  if (v4 != v5 || *(_QWORD *)a2 != *(_QWORD *)(a2 + 24) || *(_DWORD *)(a2 + 8) != *(_DWORD *)(a2 + 32))
  {
    v6 = *(_QWORD *)(v3 + 56);
    v7 = *(_QWORD *)(v3 + 64);
    v8 = v3 + 56;
    if (v6 == v7)
      goto LABEL_14;
    while (v4 != *(_DWORD *)(v6 + 16)
         || *(_QWORD *)a2 != *(_QWORD *)v6
         || *(_DWORD *)(a2 + 8) != *(_DWORD *)(v6 + 8)
         || v5 != *(_DWORD *)(v6 + 40)
         || *(_QWORD *)(a2 + 24) != *(_QWORD *)(v6 + 24)
         || *(_DWORD *)(a2 + 32) != *(_DWORD *)(v6 + 32))
    {
      v6 += 480;
      if (v6 == v7)
        goto LABEL_14;
    }
    if (v6 == v7)
    {
LABEL_14:
      v9 = *(_OWORD *)(a2 + 16);
      v15 = *(_OWORD *)a2;
      v16[0] = v9;
      *(_OWORD *)((char *)v16 + 12) = *(_OWORD *)(a2 + 28);
      v10 = *(_OWORD *)(a2 + 128);
      v16[6] = *(_OWORD *)(a2 + 112);
      v16[7] = v10;
      v11 = *(_OWORD *)(a2 + 160);
      v16[8] = *(_OWORD *)(a2 + 144);
      v16[9] = v11;
      v12 = *(_OWORD *)(a2 + 64);
      v16[2] = *(_OWORD *)(a2 + 48);
      v16[3] = v12;
      v13 = *(_OWORD *)(a2 + 96);
      v16[4] = *(_OWORD *)(a2 + 80);
      v16[5] = v13;
      memcpy(v17, (const void *)(a2 + 176), 0x125uLL);
      v18 = 1;
      sub_20F22EEA0(v8, &v15);
    }
  }
  return kdebug_trace();
}

void sub_20F22D3D8(_Unwind_Exception *a1)
{
  kdebug_trace();
  _Unwind_Resume(a1);
}

uint64_t sub_20F22D40C(uint64_t **a1, unsigned __int8 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unsigned __int8 *v5;
  signed __int8 v6;
  unsigned __int8 v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  int v18;
  unsigned __int8 *v19;
  __int128 v20;
  char *v21;
  int v22;
  void *__p[2];
  uint64_t v25;
  char v26;

  v3 = **a1;
  kdebug_trace();
  v5 = *(unsigned __int8 **)(v3 + 104);
  v4 = *(_QWORD *)(v3 + 112);
  if (v5 != (unsigned __int8 *)v4)
  {
    v6 = a2[23];
    v7 = v6;
    v8 = *((_QWORD *)a2 + 1);
    if (v6 >= 0)
      v9 = a2[23];
    else
      v9 = *((_QWORD *)a2 + 1);
    if ((a2[23] & 0x80) != 0)
    {
      v16 = *(const void **)a2;
      while (1)
      {
        v17 = v5[23];
        v18 = (char)v17;
        if ((v17 & 0x80u) != 0)
          v17 = *((_QWORD *)v5 + 1);
        if (v9 == v17)
        {
          v19 = v18 >= 0 ? v5 : *(unsigned __int8 **)v5;
          if (!memcmp(v16, v19, v8))
            break;
        }
        v5 += 32;
        if (v5 == (unsigned __int8 *)v4)
          goto LABEL_35;
      }
    }
    else
    {
      if (v6)
      {
        do
        {
          v11 = v5[23];
          v12 = (char)v11;
          if ((v11 & 0x80u) != 0)
            v11 = *((_QWORD *)v5 + 1);
          if (v9 == v11)
          {
            if (v12 >= 0)
              v13 = v5;
            else
              v13 = *(unsigned __int8 **)v5;
            v14 = a2;
            v15 = a2[23];
            while (*v14 == *v13)
            {
              ++v14;
              ++v13;
              if (!--v15)
                goto LABEL_33;
            }
          }
          v5 += 32;
        }
        while (v5 != (unsigned __int8 *)v4);
        goto LABEL_35;
      }
      while (1)
      {
        v10 = v5[23];
        if ((v10 & 0x80u) != 0)
          v10 = *((_QWORD *)v5 + 1);
        if (v9 == v10)
          break;
        v5 += 32;
        if (v5 == (unsigned __int8 *)v4)
          goto LABEL_36;
      }
    }
  }
LABEL_33:
  if (v5 != (unsigned __int8 *)v4)
    return kdebug_trace();
  v7 = a2[23];
LABEL_35:
  if ((v7 & 0x80) != 0)
  {
    sub_20E860C04(__p, *(void **)a2, *((_QWORD *)a2 + 1));
    v4 = *(_QWORD *)(v3 + 112);
    v26 = 1;
    if (v4 < *(_QWORD *)(v3 + 120))
      goto LABEL_37;
  }
  else
  {
LABEL_36:
    *(_OWORD *)__p = *(_OWORD *)a2;
    v25 = *((_QWORD *)a2 + 2);
    v26 = 1;
    if (v4 < *(_QWORD *)(v3 + 120))
    {
LABEL_37:
      v20 = *(_OWORD *)__p;
      *(_QWORD *)(v4 + 16) = v25;
      *(_OWORD *)v4 = v20;
      __p[1] = 0;
      v25 = 0;
      __p[0] = 0;
      *(_BYTE *)(v4 + 24) = v26;
      *(_QWORD *)(v3 + 112) = v4 + 32;
      return kdebug_trace();
    }
  }
  v21 = sub_20F22F0D8((void **)(v3 + 104), (uint64_t)__p);
  v22 = SHIBYTE(v25);
  *(_QWORD *)(v3 + 112) = v21;
  if (v22 < 0)
    operator delete(__p[0]);
  return kdebug_trace();
}

void sub_20F22D640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  kdebug_trace();
  _Unwind_Resume(a1);
}

uint64_t sub_20F22D68C(uint64_t **a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  const void *v6;
  int64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  void *__p;
  char *v14;
  char *v15;
  char v16;

  v3 = **a1;
  kdebug_trace();
  v4 = *(_QWORD *)(v3 + 160);
  if (*(_QWORD *)(v3 + 152) + ((v4 - *(_QWORD *)(v3 + 152)) & 0xFFFFFFFFFFFFFFE0) == v4)
  {
    __p = 0;
    v14 = 0;
    v15 = 0;
    v6 = *(const void **)a2;
    v5 = *(_QWORD *)(a2 + 8);
    v7 = v5 - *(_QWORD *)a2;
    if (v5 == *(_QWORD *)a2)
    {
      v9 = 0;
      v8 = 0;
      v16 = 1;
      if (v4 < *(_QWORD *)(v3 + 168))
      {
LABEL_5:
        *(_QWORD *)v4 = v8;
        *(_QWORD *)(v4 + 8) = v9;
        *(_QWORD *)(v4 + 16) = v9;
        *(_BYTE *)(v4 + 24) = 1;
        *(_QWORD *)(v3 + 160) = v4 + 32;
        return kdebug_trace();
      }
    }
    else
    {
      if (v7 < 0)
        sub_20E92CED8();
      v8 = (char *)operator new(v5 - *(_QWORD *)a2);
      v9 = &v8[16 * (v7 >> 4)];
      __p = v8;
      v15 = v9;
      memcpy(v8, v6, v7);
      v14 = v9;
      v16 = 1;
      if (v4 < *(_QWORD *)(v3 + 168))
        goto LABEL_5;
    }
    v10 = sub_20F22F210((void **)(v3 + 152), (uint64_t)&__p);
    v11 = (char *)__p;
    *(_QWORD *)(v3 + 160) = v10;
    if (v11)
    {
      v14 = v11;
      operator delete(v11);
    }
  }
  return kdebug_trace();
}

void sub_20F22D7E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  kdebug_trace();
  _Unwind_Resume(a1);
}

uint64_t sub_20F22D828(_QWORD **a1, uint64_t a2)
{
  _QWORD *v3;
  __int128 v4;
  __int128 v5;
  unint64_t v6;
  char *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void **v40;
  void **v41;
  void *v42;
  char *v43;
  char *v44;
  char *v45;
  void *v46;
  char *v47;
  char *v48;
  void *v49;
  void *v50;
  void *__p[2];
  uint64_t v53;
  _QWORD **v54;
  _QWORD *v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  int v60;
  char v61;

  v3 = (_QWORD *)**a1;
  kdebug_trace();
  if (v3[22] + 112 * ((((v3[23] - v3[22]) >> 4) * (unsigned __int128)0x2492492492492493uLL) >> 64) == v3[23])
  {
    sub_20F22F360(__p, (__int128 **)a2);
    v55 = 0;
    v56 = 0;
    v54 = &v55;
    sub_20F22F56C((uint64_t *)&v54, *(_QWORD **)(a2 + 24), (_QWORD *)(a2 + 32));
    v60 = *(_DWORD *)(a2 + 96);
    v4 = *(_OWORD *)(a2 + 80);
    v5 = *(_OWORD *)(a2 + 48);
    v58 = *(_OWORD *)(a2 + 64);
    v59 = v4;
    v57 = v5;
    v61 = 1;
    v7 = (char *)v3[23];
    v6 = v3[24];
    if ((unint64_t)v7 >= v6)
    {
      v11 = (void **)v3[22];
      v12 = 0x6DB6DB6DB6DB6DB7 * ((v7 - (char *)v11) >> 4);
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) > 0x249249249249249)
        sub_20E867F44();
      v14 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v6 - (_QWORD)v11) >> 4);
      if (2 * v14 > v13)
        v13 = 2 * v14;
      if (v14 >= 0x124924924924924)
        v15 = 0x249249249249249;
      else
        v15 = v13;
      if (v15)
      {
        if (v15 > 0x249249249249249)
          sub_20E877A38();
        v16 = operator new(112 * v15);
      }
      else
      {
        v16 = 0;
      }
      v21 = &v16[16 * ((v7 - (char *)v11) >> 4)];
      *(_OWORD *)v21 = *(_OWORD *)__p;
      v22 = v53;
      v23 = (uint64_t)v54;
      __p[1] = 0;
      v53 = 0;
      __p[0] = 0;
      *((_QWORD *)v21 + 2) = v22;
      *((_QWORD *)v21 + 3) = v23;
      v24 = v55;
      v25 = v56;
      *((_QWORD *)v21 + 4) = v55;
      v26 = v21 + 32;
      *((_QWORD *)v21 + 5) = v25;
      if (v25)
      {
        v24[2] = v26;
        v54 = &v55;
        v55 = 0;
        v56 = 0;
        v11 = (void **)v3[22];
        v7 = (char *)v3[23];
      }
      else
      {
        *((_QWORD *)v21 + 3) = v26;
      }
      v27 = &v16[112 * v15];
      v28 = v58;
      *((_OWORD *)v21 + 3) = v57;
      *((_OWORD *)v21 + 4) = v28;
      *((_OWORD *)v21 + 5) = v59;
      *((_DWORD *)v21 + 24) = v60;
      v16[112 * v12 + 104] = 1;
      v20 = v21 + 112;
      if (v7 == (char *)v11)
      {
        v3[22] = v21;
        v3[23] = v20;
        v3[24] = v27;
      }
      else
      {
        v29 = 0;
        do
        {
          v34 = &v21[v29];
          v35 = &v7[v29];
          *((_QWORD *)v34 - 14) = 0;
          *((_QWORD *)v34 - 13) = 0;
          *((_QWORD *)v34 - 12) = 0;
          *((_OWORD *)v34 - 7) = *(_OWORD *)&v7[v29 - 112];
          *((_QWORD *)v34 - 12) = *(_QWORD *)&v7[v29 - 96];
          *((_QWORD *)v35 - 14) = 0;
          *((_QWORD *)v35 - 13) = 0;
          *((_QWORD *)v35 - 12) = 0;
          *((_QWORD *)v34 - 11) = *(_QWORD *)&v7[v29 - 88];
          v36 = &v7[v29 - 80];
          v37 = *(_QWORD *)v36;
          *(_QWORD *)&v21[v29 - 80] = *(_QWORD *)v36;
          v38 = (uint64_t)&v21[v29 - 80];
          v39 = *(_QWORD *)&v7[v29 - 72];
          *((_QWORD *)v34 - 9) = v39;
          if (v39)
          {
            *(_QWORD *)(v37 + 16) = v38;
            *((_QWORD *)v35 - 11) = v36;
            *(_QWORD *)v36 = 0;
            *(_QWORD *)&v7[v29 - 72] = 0;
          }
          else
          {
            *((_QWORD *)v34 - 11) = v38;
          }
          v30 = &v21[v29];
          v31 = *(_OWORD *)&v7[v29 - 64];
          v32 = *(_OWORD *)&v7[v29 - 48];
          v33 = *(_OWORD *)&v7[v29 - 32];
          *((_DWORD *)v30 - 4) = *(_DWORD *)&v7[v29 - 16];
          *((_OWORD *)v30 - 3) = v32;
          *((_OWORD *)v30 - 2) = v33;
          *((_OWORD *)v30 - 4) = v31;
          *(v30 - 8) = v7[v29 - 8];
          v29 -= 112;
        }
        while (&v7[v29] != (char *)v11);
        v11 = (void **)v3[22];
        v40 = (void **)v3[23];
        v3[22] = &v21[v29];
        v3[23] = v20;
        v3[24] = v27;
        if (v40 != v11)
        {
          v41 = v40;
          do
          {
            sub_20E86872C((uint64_t)(v40 - 11), *(v40 - 10));
            v44 = (char *)*(v41 - 14);
            v41 -= 14;
            v43 = v44;
            if (v44)
            {
              v45 = (char *)*(v40 - 13);
              v42 = v43;
              if (v45 != v43)
              {
                do
                {
                  v46 = (void *)*((_QWORD *)v45 - 3);
                  if (v46)
                  {
                    *((_QWORD *)v45 - 2) = v46;
                    operator delete(v46);
                  }
                  v45 -= 48;
                }
                while (v45 != v43);
                v42 = *v41;
              }
              *(v40 - 13) = v43;
              operator delete(v42);
            }
            v40 = v41;
          }
          while (v41 != v11);
        }
      }
      if (v11)
        operator delete(v11);
    }
    else
    {
      *(_QWORD *)v7 = 0;
      *((_QWORD *)v7 + 1) = 0;
      *((_QWORD *)v7 + 2) = 0;
      *(_OWORD *)v7 = *(_OWORD *)__p;
      *((_QWORD *)v7 + 2) = v53;
      __p[0] = 0;
      __p[1] = 0;
      v53 = 0;
      *((_QWORD *)v7 + 3) = v54;
      v8 = v55;
      *((_QWORD *)v7 + 4) = v55;
      v9 = v7 + 32;
      v10 = v56;
      *((_QWORD *)v7 + 5) = v56;
      if (v10)
      {
        v8[2] = v9;
        v54 = &v55;
        v55 = 0;
        v56 = 0;
      }
      else
      {
        *((_QWORD *)v7 + 3) = v9;
      }
      v17 = v57;
      v18 = v58;
      v19 = v59;
      *((_DWORD *)v7 + 24) = v60;
      *((_OWORD *)v7 + 4) = v18;
      *((_OWORD *)v7 + 5) = v19;
      *((_OWORD *)v7 + 3) = v17;
      v7[104] = v61;
      v20 = v7 + 112;
    }
    v3[23] = v20;
    sub_20E86872C((uint64_t)&v54, v55);
    v47 = (char *)__p[0];
    if (__p[0])
    {
      v48 = (char *)__p[1];
      v49 = __p[0];
      if (__p[1] != __p[0])
      {
        do
        {
          v50 = (void *)*((_QWORD *)v48 - 3);
          if (v50)
          {
            *((_QWORD *)v48 - 2) = v50;
            operator delete(v50);
          }
          v48 -= 48;
        }
        while (v48 != v47);
        v49 = __p[0];
      }
      __p[1] = v47;
      operator delete(v49);
    }
  }
  return kdebug_trace();
}

void sub_20F22DC60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, char *a10, uint64_t a11, uint64_t a12, _QWORD *a13)
{
  uint64_t v13;
  char *v15;
  char *v16;
  void *v17;

  sub_20E86872C(v13, a13);
  if (__p)
  {
    v15 = a10;
    v16 = __p;
    if (a10 != __p)
    {
      do
      {
        v17 = (void *)*((_QWORD *)v15 - 3);
        if (v17)
        {
          *((_QWORD *)v15 - 2) = v17;
          operator delete(v17);
        }
        v15 -= 48;
      }
      while (v15 != __p);
      v16 = __p;
    }
    operator delete(v16);
  }
  kdebug_trace();
  _Unwind_Resume(a1);
}

uint64_t sub_20F22DD3C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  char *i;
  char *v27;
  void *__p;
  char *v30;
  char *v31;
  char *v32;
  uint64_t *v33;

  v3 = 0x1CAC083126E978D5 * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x4189374BC6A7EFLL)
    sub_20E867F44();
  if (0x395810624DD2F1AALL * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x395810624DD2F1AALL * ((a1[2] - *a1) >> 3);
  if ((unint64_t)(0x1CAC083126E978D5 * ((a1[2] - *a1) >> 3)) >= 0x20C49BA5E353F7)
    v6 = 0x4189374BC6A7EFLL;
  else
    v6 = v4;
  v33 = a1 + 2;
  if (v6)
  {
    if (v6 > 0x4189374BC6A7EFLL)
      sub_20E877A38();
    v7 = (char *)operator new(1000 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[1000 * v3];
  __p = v7;
  v30 = v8;
  v31 = v8;
  v32 = &v7[1000 * v6];
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(v8 + 24) = *(_OWORD *)(a2 + 24);
  *((_QWORD *)v8 + 5) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v9 = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v8 + 3) = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v8 + 4) = v9;
  v10 = *(_OWORD *)(a2 + 80);
  v11 = *(_OWORD *)(a2 + 96);
  v12 = *(_OWORD *)(a2 + 128);
  *((_OWORD *)v8 + 7) = *(_OWORD *)(a2 + 112);
  *((_OWORD *)v8 + 8) = v12;
  *((_OWORD *)v8 + 5) = v10;
  *((_OWORD *)v8 + 6) = v11;
  v13 = *(_OWORD *)(a2 + 144);
  v14 = *(_OWORD *)(a2 + 160);
  v15 = *(_OWORD *)(a2 + 176);
  v16 = *(_OWORD *)(a2 + 192);
  *((_QWORD *)v8 + 26) = *(_QWORD *)(a2 + 208);
  *((_OWORD *)v8 + 11) = v15;
  *((_OWORD *)v8 + 12) = v16;
  *((_OWORD *)v8 + 9) = v13;
  *((_OWORD *)v8 + 10) = v14;
  memcpy(v8 + 216, (const void *)(a2 + 216), 0x120uLL);
  memcpy(v8 + 504, (const void *)(a2 + 504), 0x128uLL);
  *(_QWORD *)(a2 + 792) = 0;
  v17 = *(_OWORD *)(a2 + 800);
  v18 = *(_OWORD *)(a2 + 816);
  *(_QWORD *)(a2 + 800) = 0;
  *(_QWORD *)(a2 + 808) = 0;
  *((_OWORD *)v8 + 50) = v17;
  *((_OWORD *)v8 + 51) = v18;
  *((_QWORD *)v8 + 104) = *(_QWORD *)(a2 + 832);
  *(_OWORD *)(v8 + 840) = *(_OWORD *)(a2 + 840);
  *((_QWORD *)v8 + 107) = *(_QWORD *)(a2 + 856);
  v19 = *(_OWORD *)(a2 + 864);
  v20 = *(_OWORD *)(a2 + 880);
  *((_QWORD *)v8 + 112) = *(_QWORD *)(a2 + 896);
  *((_OWORD *)v8 + 54) = v19;
  *((_OWORD *)v8 + 55) = v20;
  *((_QWORD *)v8 + 113) = *(_QWORD *)(a2 + 904);
  *((_OWORD *)v8 + 57) = *(_OWORD *)(a2 + 912);
  *(_QWORD *)(a2 + 904) = 0;
  *(_QWORD *)(a2 + 912) = 0;
  *(_QWORD *)(a2 + 920) = 0;
  *((_QWORD *)v8 + 116) = *(_QWORD *)(a2 + 928);
  v21 = v8 + 936;
  v22 = *(_QWORD *)(a2 + 936);
  *((_QWORD *)v8 + 117) = v22;
  v23 = *(_QWORD *)(a2 + 944);
  *((_QWORD *)v8 + 118) = v23;
  if (v23)
  {
    *(_QWORD *)(v22 + 16) = v21;
    *(_QWORD *)(a2 + 928) = a2 + 936;
    *(_QWORD *)(a2 + 936) = 0;
    *(_QWORD *)(a2 + 944) = 0;
  }
  else
  {
    *((_QWORD *)v8 + 116) = v21;
  }
  *((_QWORD *)v8 + 123) = *(_QWORD *)(a2 + 984);
  v24 = *(_OWORD *)(a2 + 968);
  *(_OWORD *)(v8 + 952) = *(_OWORD *)(a2 + 952);
  *(_OWORD *)(v8 + 968) = v24;
  v7[1000 * v3 + 992] = *(_BYTE *)(a2 + 992);
  v31 = v8 + 1000;
  sub_20F22DFD4(a1, &__p);
  v25 = a1[1];
  v27 = v30;
  for (i = v31; v31 != v27; i = v31)
  {
    v31 = i - 1000;
    sub_20E9549C4((char **)i - 125);
  }
  if (__p)
    operator delete(__p);
  return v25;
}

void sub_20F22DFC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20F22E208((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20F22DFD4(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = a2[1];
  if (v4 != *result)
  {
    v7 = 0;
    do
    {
      v11 = v6 + v7;
      v12 = v6 + v7 - 1000;
      v13 = v4 + v7;
      v14 = v4 + v7 - 1000;
      *(_QWORD *)(v12 + 16) = 0;
      *(_OWORD *)v12 = 0u;
      *(_OWORD *)v12 = *(_OWORD *)v14;
      *(_QWORD *)(v6 + v7 - 984) = *(_QWORD *)(v4 + v7 - 984);
      *(_QWORD *)(v14 + 16) = 0;
      *(_OWORD *)v14 = 0u;
      v15 = v6 + v7 - 976;
      v16 = v4 + v7 - 976;
      *(_QWORD *)(v15 + 16) = 0;
      *(_OWORD *)v15 = 0u;
      *(_OWORD *)v15 = *(_OWORD *)v16;
      *(_QWORD *)(v6 + v7 - 960) = *(_QWORD *)(v4 + v7 - 960);
      *(_QWORD *)(v16 + 16) = 0;
      *(_OWORD *)v16 = 0u;
      v17 = v6 + v7 - 952;
      v18 = *(_OWORD *)(v4 + v7 - 856);
      v20 = *(_OWORD *)(v4 + v7 - 904);
      v19 = *(_OWORD *)(v4 + v7 - 888);
      *(_OWORD *)(v17 + 80) = *(_OWORD *)(v4 + v7 - 872);
      *(_OWORD *)(v17 + 96) = v18;
      *(_OWORD *)(v17 + 48) = v20;
      *(_OWORD *)(v17 + 64) = v19;
      v22 = *(_OWORD *)(v4 + v7 - 824);
      v21 = *(_OWORD *)(v4 + v7 - 808);
      v23 = *(_OWORD *)(v4 + v7 - 840);
      *(_QWORD *)(v17 + 160) = *(_QWORD *)(v4 + v7 - 792);
      *(_OWORD *)(v17 + 128) = v22;
      *(_OWORD *)(v17 + 144) = v21;
      *(_OWORD *)(v17 + 112) = v23;
      v24 = *(_OWORD *)(v4 + v7 - 952);
      v25 = *(_OWORD *)(v4 + v7 - 920);
      *(_OWORD *)(v17 + 16) = *(_OWORD *)(v4 + v7 - 936);
      *(_OWORD *)(v17 + 32) = v25;
      *(_OWORD *)v17 = v24;
      memcpy((void *)(v6 + v7 - 784), (const void *)(v4 + v7 - 784), 0x120uLL);
      result = (uint64_t *)memcpy((void *)(v6 + v7 - 496), (const void *)(v4 + v7 - 496), 0x120uLL);
      *(_QWORD *)(v11 - 200) = 0;
      *(_QWORD *)(v11 - 192) = 0;
      *(_QWORD *)(v11 - 208) = 0;
      *(_OWORD *)(v11 - 208) = *(_OWORD *)(v4 + v7 - 208);
      *(_QWORD *)(v11 - 192) = *(_QWORD *)(v4 + v7 - 192);
      *(_QWORD *)(v13 - 208) = 0;
      *(_QWORD *)(v13 - 200) = 0;
      *(_QWORD *)(v13 - 192) = 0;
      v26 = *(_QWORD *)(v4 + v7 - 168);
      *(_OWORD *)(v11 - 184) = *(_OWORD *)(v4 + v7 - 184);
      *(_QWORD *)(v11 - 168) = v26;
      v27 = *(_QWORD *)(v4 + v7 - 144);
      *(_OWORD *)(v11 - 160) = *(_OWORD *)(v4 + v7 - 160);
      *(_QWORD *)(v11 - 144) = v27;
      *(_OWORD *)(v11 - 136) = *(_OWORD *)(v4 + v7 - 136);
      v28 = *(_QWORD *)(v4 + v7 - 104);
      *(_OWORD *)(v11 - 120) = *(_OWORD *)(v4 + v7 - 120);
      *(_QWORD *)(v11 - 104) = v28;
      *(_QWORD *)(v11 - 96) = 0;
      *(_QWORD *)(v11 - 88) = 0;
      *(_QWORD *)(v11 - 80) = 0;
      *(_OWORD *)(v11 - 96) = *(_OWORD *)(v4 + v7 - 96);
      *(_QWORD *)(v11 - 80) = *(_QWORD *)(v4 + v7 - 80);
      *(_QWORD *)(v13 - 96) = 0;
      *(_QWORD *)(v13 - 88) = 0;
      *(_QWORD *)(v13 - 80) = 0;
      *(_QWORD *)(v11 - 72) = *(_QWORD *)(v4 + v7 - 72);
      v29 = (uint64_t *)(v4 + v7 - 64);
      v30 = *v29;
      *(_QWORD *)(v11 - 64) = *v29;
      v31 = v6 + v7 - 64;
      v32 = *(_QWORD *)(v4 + v7 - 56);
      *(_QWORD *)(v11 - 56) = v32;
      if (v32)
      {
        *(_QWORD *)(v30 + 16) = v31;
        *(_QWORD *)(v13 - 72) = v29;
        *v29 = 0;
        *(_QWORD *)(v13 - 56) = 0;
      }
      else
      {
        *(_QWORD *)(v11 - 72) = v31;
      }
      v8 = v6 + v7;
      v9 = *(_OWORD *)(v4 + v7 - 48);
      v10 = *(_OWORD *)(v4 + v7 - 32);
      *(_QWORD *)(v8 - 16) = *(_QWORD *)(v4 + v7 - 16);
      *(_OWORD *)(v8 - 48) = v9;
      *(_OWORD *)(v8 - 32) = v10;
      *(_BYTE *)(v8 - 8) = *(_BYTE *)(v4 + v7 - 8);
      v7 -= 1000;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  v33 = *v3;
  *v3 = v6;
  a2[1] = v33;
  v34 = v3[1];
  v3[1] = a2[2];
  a2[2] = v34;
  v35 = v3[2];
  v3[2] = a2[3];
  a2[3] = v35;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20F22E208(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 1000;
    sub_20E9549C4((char **)(i - 1000));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20F22E258(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  char v53;
  __int128 v54;
  __int128 v55;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  sub_20F22E694((_QWORD *)a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), 0xF128CFC4A33F128DLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = v5 - v4;
  if (v5 != v4)
  {
    v7 = 0xEEEEEEEEEEEEEEEFLL * (v6 >> 3);
    if (v7 >= 0x222222222222223)
      sub_20E867F44();
    v8 = (char *)operator new(v6);
    v9 = 0;
    *(_QWORD *)(a1 + 24) = v8;
    *(_QWORD *)(a1 + 32) = v8;
    *(_QWORD *)(a1 + 40) = &v8[120 * v7];
    do
    {
      v10 = v4 + v9;
      v11 = &v8[v9];
      *(_OWORD *)v11 = *(_OWORD *)(v4 + v9);
      v12 = *(_OWORD *)(v4 + v9 + 16);
      *((_QWORD *)v11 + 4) = *(_QWORD *)(v4 + v9 + 32);
      *((_OWORD *)v11 + 1) = v12;
      v13 = *(_OWORD *)(v4 + v9 + 72);
      v14 = *(_OWORD *)(v4 + v9 + 88);
      v15 = *(_QWORD *)(v4 + v9 + 104);
      *(_OWORD *)(v11 + 56) = *(_OWORD *)(v4 + v9 + 56);
      *((_QWORD *)v11 + 13) = v15;
      *(_OWORD *)(v11 + 88) = v14;
      *(_OWORD *)(v11 + 72) = v13;
      *(_OWORD *)(v11 + 40) = *(_OWORD *)(v4 + v9 + 40);
      v11[112] = *(_BYTE *)(v4 + v9 + 112);
      v9 += 120;
    }
    while (v10 + 120 != v5);
    *(_QWORD *)(a1 + 32) = &v8[v9];
  }
  v16 = *(_OWORD *)(a2 + 48);
  v17 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v17;
  *(_OWORD *)(a1 + 48) = v16;
  v18 = *(_OWORD *)(a2 + 96);
  v19 = *(_OWORD *)(a2 + 112);
  v20 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v20;
  *(_OWORD *)(a1 + 96) = v18;
  *(_OWORD *)(a1 + 112) = v19;
  v21 = *(_OWORD *)(a2 + 160);
  v22 = *(_OWORD *)(a2 + 176);
  v23 = *(_OWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 176) = v22;
  *(_OWORD *)(a1 + 192) = v23;
  *(_OWORD *)(a1 + 160) = v21;
  memcpy((void *)(a1 + 216), (const void *)(a2 + 216), 0x120uLL);
  memcpy((void *)(a1 + 504), (const void *)(a2 + 504), 0x120uLL);
  *(_QWORD *)(a1 + 792) = 0;
  *(_QWORD *)(a1 + 808) = 0;
  *(_QWORD *)(a1 + 800) = 0;
  v24 = *(_QWORD *)(a2 + 792);
  v25 = *(_QWORD *)(a2 + 800);
  v26 = v25 - v24;
  if (v25 != v24)
  {
    v27 = 0x6DB6DB6DB6DB6DB7 * (v26 >> 3);
    if (v27 >= 0x492492492492493)
      sub_20EABADD4();
    v28 = (char *)operator new(v26);
    v29 = 0;
    *(_QWORD *)(a1 + 792) = v28;
    *(_QWORD *)(a1 + 800) = v28;
    *(_QWORD *)(a1 + 808) = &v28[56 * v27];
    do
    {
      v30 = v24 + v29;
      v31 = &v28[v29];
      *(_QWORD *)v31 = *(_QWORD *)(v24 + v29);
      v32 = *(_OWORD *)(v24 + v29 + 8);
      *((_QWORD *)v31 + 3) = *(_QWORD *)(v24 + v29 + 24);
      *(_OWORD *)(v31 + 8) = v32;
      v33 = *(_OWORD *)(v24 + v29 + 32);
      *((_QWORD *)v31 + 6) = *(_QWORD *)(v24 + v29 + 48);
      *((_OWORD *)v31 + 2) = v33;
      v29 += 56;
    }
    while (v30 + 56 != v25);
    *(_QWORD *)(a1 + 800) = &v28[v29];
  }
  v34 = *(_OWORD *)(a2 + 816);
  *(_QWORD *)(a1 + 832) = *(_QWORD *)(a2 + 832);
  *(_OWORD *)(a1 + 816) = v34;
  v35 = *(_OWORD *)(a2 + 840);
  *(_QWORD *)(a1 + 856) = *(_QWORD *)(a2 + 856);
  *(_OWORD *)(a1 + 840) = v35;
  *(_OWORD *)(a1 + 864) = *(_OWORD *)(a2 + 864);
  v36 = *(_OWORD *)(a2 + 880);
  *(_QWORD *)(a1 + 896) = *(_QWORD *)(a2 + 896);
  *(_OWORD *)(a1 + 880) = v36;
  *(_QWORD *)(a1 + 904) = 0;
  *(_QWORD *)(a1 + 920) = 0;
  *(_QWORD *)(a1 + 912) = 0;
  v37 = *(_QWORD *)(a2 + 904);
  v38 = *(_QWORD *)(a2 + 912);
  v39 = v38 - v37;
  if (v38 != v37)
  {
    v40 = 0xCBEEA4E1A08AD8F3 * (v39 >> 3);
    if (v40 >= 0x8AD8F2FBA93869)
      sub_20E867F44();
    v41 = (char *)operator new(v39);
    v42 = 0;
    *(_QWORD *)(a1 + 904) = v41;
    *(_QWORD *)(a1 + 912) = v41;
    *(_QWORD *)(a1 + 920) = &v41[472 * v40];
    do
    {
      v43 = v37 + v42;
      v44 = &v41[v42];
      v45 = *(_OWORD *)(v37 + v42);
      v46 = *(_OWORD *)(v37 + v42 + 16);
      *(_OWORD *)(v44 + 28) = *(_OWORD *)(v37 + v42 + 28);
      *(_OWORD *)v44 = v45;
      *((_OWORD *)v44 + 1) = v46;
      v47 = *(_OWORD *)(v37 + v42 + 160);
      v49 = *(_OWORD *)(v37 + v42 + 112);
      v48 = *(_OWORD *)(v37 + v42 + 128);
      *((_OWORD *)v44 + 9) = *(_OWORD *)(v37 + v42 + 144);
      *((_OWORD *)v44 + 10) = v47;
      *((_OWORD *)v44 + 7) = v49;
      *((_OWORD *)v44 + 8) = v48;
      v50 = *(_OWORD *)(v37 + v42 + 48);
      v51 = *(_OWORD *)(v37 + v42 + 64);
      v52 = *(_OWORD *)(v37 + v42 + 96);
      *((_OWORD *)v44 + 5) = *(_OWORD *)(v37 + v42 + 80);
      *((_OWORD *)v44 + 6) = v52;
      *((_OWORD *)v44 + 3) = v50;
      *((_OWORD *)v44 + 4) = v51;
      memcpy(&v41[v42 + 176], (const void *)(v37 + v42 + 176), 0x120uLL);
      v53 = *(_BYTE *)(v37 + v42 + 468);
      *((_DWORD *)v44 + 116) = *(_DWORD *)(v37 + v42 + 464);
      v44[468] = v53;
      v42 += 472;
    }
    while (v43 + 472 != v38);
    *(_QWORD *)(a1 + 912) = &v41[v42];
  }
  *(_QWORD *)(a1 + 944) = 0;
  *(_QWORD *)(a1 + 936) = 0;
  *(_QWORD *)(a1 + 928) = a1 + 936;
  sub_20F22E9F4((uint64_t *)(a1 + 928), *(_QWORD **)(a2 + 928), (_QWORD *)(a2 + 936));
  v54 = *(_OWORD *)(a2 + 952);
  v55 = *(_OWORD *)(a2 + 968);
  *(_QWORD *)(a1 + 984) = *(_QWORD *)(a2 + 984);
  *(_OWORD *)(a1 + 952) = v54;
  *(_OWORD *)(a1 + 968) = v55;
  return a1;
}

void sub_20F22E620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _QWORD **v14;
  void *v16;
  void *v17;
  void *v18;

  sub_20E86872C(v13, *v14);
  v16 = *v12;
  if (*v12)
  {
    *(_QWORD *)(v10 + 912) = v16;
    operator delete(v16);
  }
  v17 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v10 + 800) = v17;
    operator delete(v17);
  }
  v18 = *v11;
  if (*v11)
  {
    *(_QWORD *)(v10 + 32) = v18;
    operator delete(v18);
  }
  sub_20F22CA30((void **)v10);
  _Unwind_Resume(a1);
}

_QWORD *sub_20F22E694(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  _QWORD *v8;
  unint64_t v9;

  if (a4)
  {
    v5 = result;
    if (a4 >= 0x76B981DAE6076CLL)
      sub_20E867F44();
    result = operator new(552 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[69 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = sub_20F22E8C0(&v8[v9 / 8], (_QWORD *)(a2 + v9));
        v9 += 552;
      }
      while (a2 + v9 != a3);
      v8 = (_QWORD *)((char *)v8 + v9);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_20F22E758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20F22E7E4(&a9);
  _Unwind_Resume(a1);
}

void sub_20F22E76C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (v12)
  {
    do
    {
      v14 = *(void **)(v11 - 24);
      if (v14)
      {
        *(_QWORD *)(v11 - 16) = v14;
        operator delete(v14);
      }
      v15 = *(std::__shared_weak_count **)(v11 - 544);
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v11 -= 552;
    }
    while (v11 != v10);
  }
  *(_QWORD *)(v9 + 8) = v10;
  sub_20F22E7E4(&a9);
  _Unwind_Resume(a1);
}

void ***sub_20F22E7E4(void ***result)
{
  void ***v1;
  void **v2;
  char *v3;
  char *v4;
  void *v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (char *)**result;
    if (v3)
    {
      v4 = (char *)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          v6 = (void *)*((_QWORD *)v4 - 3);
          if (v6)
          {
            *((_QWORD *)v4 - 2) = v6;
            operator delete(v6);
          }
          v7 = (std::__shared_weak_count *)*((_QWORD *)v4 - 68);
          if (v7)
          {
            p_shared_owners = (unint64_t *)&v7->__shared_owners_;
            do
              v9 = __ldaxr(p_shared_owners);
            while (__stlxr(v9 - 1, p_shared_owners));
            if (!v9)
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
          v4 -= 552;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

_QWORD *sub_20F22E8C0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  int64_t v9;
  char *v10;
  char *v11;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  memcpy(a1 + 2, a2 + 2, 0x200uLL);
  a1[66] = 0;
  a1[68] = 0;
  a1[67] = 0;
  v7 = (_BYTE *)a2[66];
  v8 = (_BYTE *)a2[67];
  v9 = v8 - v7;
  if (v8 != v7)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 3) >= 0xAAAAAAAAAAAAAABLL)
      sub_20E867F44();
    v10 = (char *)operator new(v9);
    a1[66] = v10;
    a1[67] = v10;
    v11 = &v10[8 * (v9 >> 3)];
    a1[68] = v11;
    memcpy(v10, v7, v9);
    a1[67] = v11;
  }
  return a1;
}

void sub_20F22E9A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 536) = v4;
    operator delete(v4);
  }
  v5 = *(std::__shared_weak_count **)(v1 + 8);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20F22E9F4(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t *v18;
  _QWORD *v19;
  BOOL v20;
  uint64_t *v21;
  uint64_t *v22[9];

  if (a2 != a3)
  {
    v22[7] = v3;
    v22[8] = v4;
    v6 = a2;
    v7 = result;
    v8 = result + 1;
    do
    {
      result = sub_20E941BD8(v7, v8, v22, &v21, (unsigned int *)v6 + 8);
      if (*result)
      {
        v9 = (_QWORD *)v6[1];
        if (v9)
          goto LABEL_11;
      }
      else
      {
        v10 = result;
        v11 = (char *)operator new(0x88uLL);
        *((_DWORD *)v11 + 8) = *((_DWORD *)v6 + 8);
        v12 = *(_OWORD *)(v6 + 7);
        v13 = *(_OWORD *)(v6 + 9);
        v14 = *(_OWORD *)(v6 + 11);
        *((_QWORD *)v11 + 13) = v6[13];
        *(_OWORD *)(v11 + 88) = v14;
        *(_OWORD *)(v11 + 72) = v13;
        *(_OWORD *)(v11 + 56) = v12;
        *(_OWORD *)(v11 + 40) = *(_OWORD *)(v6 + 5);
        v15 = *((_OWORD *)v6 + 7);
        *((_QWORD *)v11 + 16) = v6[16];
        *((_OWORD *)v11 + 7) = v15;
        v16 = v22[0];
        *(_QWORD *)v11 = 0;
        *((_QWORD *)v11 + 1) = 0;
        *((_QWORD *)v11 + 2) = v16;
        *v10 = (uint64_t)v11;
        v17 = *(_QWORD **)*v7;
        if (v17)
        {
          *v7 = (uint64_t)v17;
          v18 = (uint64_t *)*v10;
        }
        else
        {
          v18 = (uint64_t *)v11;
        }
        result = sub_20E868578((uint64_t *)v7[1], v18);
        ++v7[2];
        v9 = (_QWORD *)v6[1];
        if (v9)
        {
          do
          {
LABEL_11:
            v19 = v9;
            v9 = (_QWORD *)*v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        v19 = (_QWORD *)v6[2];
        v20 = *v19 == (_QWORD)v6;
        v6 = v19;
      }
      while (!v20);
LABEL_3:
      v6 = v19;
    }
    while (v19 != a3);
  }
  return result;
}

char *sub_20F22EB34(void **a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  _BYTE *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  char *v51;
  void **v52;
  char *v53;
  char *v54;

  v3 = 0x51B3BEA3677D46CFLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0xAE4C415C9882B9)
    sub_20E867F44();
  if (0xA3677D46CEFA8D9ELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0xA3677D46CEFA8D9ELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if ((unint64_t)(0x51B3BEA3677D46CFLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3)) >= 0x572620AE4C415CLL)
    v6 = 0xAE4C415C9882B9;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAE4C415C9882B9)
      sub_20E877A38();
    v7 = operator new(376 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[376 * v3];
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 40) = 0;
  *((_QWORD *)v8 + 5) = v9;
  *((_QWORD *)v8 + 6) = v10;
  v11 = *(_OWORD *)(a2 + 56);
  v12 = *(_OWORD *)(a2 + 72);
  v13 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(v8 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(v8 + 88) = v13;
  *(_OWORD *)(v8 + 72) = v12;
  *(_OWORD *)(v8 + 56) = v11;
  v14 = *(_OWORD *)(a2 + 120);
  v15 = *(_OWORD *)(a2 + 136);
  v16 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(v8 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(v8 + 152) = v16;
  *(_OWORD *)(v8 + 136) = v15;
  *(_OWORD *)(v8 + 120) = v14;
  v17 = *(_OWORD *)(a2 + 184);
  v18 = *(_OWORD *)(a2 + 200);
  v19 = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(v8 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(v8 + 216) = v19;
  *(_OWORD *)(v8 + 200) = v18;
  *(_OWORD *)(v8 + 184) = v17;
  v20 = *(_OWORD *)(a2 + 248);
  v21 = *(_OWORD *)(a2 + 264);
  v22 = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(v8 + 280) = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(v8 + 296) = v22;
  *(_OWORD *)(v8 + 264) = v21;
  *(_OWORD *)(v8 + 248) = v20;
  v23 = *(_OWORD *)(a2 + 312);
  *((_QWORD *)v8 + 41) = *(_QWORD *)(a2 + 328);
  *(_OWORD *)(v8 + 312) = v23;
  v8[336] = 0;
  v8[360] = 0;
  if (*(_BYTE *)(a2 + 360))
  {
    *((_OWORD *)v8 + 21) = *(_OWORD *)(a2 + 336);
    *((_QWORD *)v8 + 44) = *(_QWORD *)(a2 + 352);
    *(_QWORD *)(a2 + 344) = 0;
    *(_QWORD *)(a2 + 352) = 0;
    *(_QWORD *)(a2 + 336) = 0;
    v8[360] = 1;
  }
  v24 = &v7[376 * v6];
  v7[376 * v3 + 368] = *(_BYTE *)(a2 + 368);
  v25 = v8 + 376;
  v26 = (char *)*a1;
  v27 = (char *)a1[1];
  if (v27 == *a1)
  {
    *a1 = v8;
    a1[1] = v25;
    a1[2] = v24;
  }
  else
  {
    v28 = 0;
    do
    {
      v29 = &v8[v28];
      v30 = (uint64_t)&v8[v28 - 376];
      v31 = &v27[v28];
      v32 = *(_OWORD *)&v27[v28 - 376];
      *(_QWORD *)(v30 + 16) = *(_QWORD *)&v27[v28 - 360];
      *(_OWORD *)v30 = v32;
      v33 = (uint64_t)&v8[v28 - 352];
      v34 = (uint64_t)&v27[v28 - 352];
      v35 = *(_OWORD *)v34;
      *(_QWORD *)(v33 + 16) = *(_QWORD *)&v27[v28 - 336];
      *(_OWORD *)v33 = v35;
      *(_QWORD *)(v34 + 8) = 0;
      *(_QWORD *)(v34 + 16) = 0;
      *(_QWORD *)v34 = 0;
      *(_QWORD *)&v8[v28 - 328] = *(_QWORD *)&v27[v28 - 328];
      v36 = &v8[v28 - 320];
      v37 = *(_OWORD *)&v27[v28 - 320];
      v38 = *(_OWORD *)&v27[v28 - 304];
      v39 = *(_OWORD *)&v27[v28 - 272];
      *((_OWORD *)v36 + 2) = *(_OWORD *)&v27[v28 - 288];
      *((_OWORD *)v36 + 3) = v39;
      *(_OWORD *)v36 = v37;
      *((_OWORD *)v36 + 1) = v38;
      v40 = *(_OWORD *)&v27[v28 - 256];
      v41 = *(_OWORD *)&v27[v28 - 240];
      v42 = *(_OWORD *)&v27[v28 - 208];
      *((_OWORD *)v29 - 14) = *(_OWORD *)&v27[v28 - 224];
      *((_OWORD *)v29 - 13) = v42;
      *((_OWORD *)v29 - 16) = v40;
      *((_OWORD *)v29 - 15) = v41;
      v43 = *(_OWORD *)&v27[v28 - 80];
      v45 = *(_OWORD *)&v27[v28 - 128];
      v44 = *(_OWORD *)&v27[v28 - 112];
      *((_OWORD *)v29 - 6) = *(_OWORD *)&v27[v28 - 96];
      *((_OWORD *)v29 - 5) = v43;
      *((_OWORD *)v29 - 8) = v45;
      *((_OWORD *)v29 - 7) = v44;
      v46 = *(_OWORD *)&v27[v28 - 192];
      v47 = *(_OWORD *)&v27[v28 - 176];
      v48 = *(_OWORD *)&v27[v28 - 144];
      *((_OWORD *)v29 - 10) = *(_OWORD *)&v27[v28 - 160];
      *((_OWORD *)v29 - 9) = v48;
      *((_OWORD *)v29 - 12) = v46;
      *((_OWORD *)v29 - 11) = v47;
      v49 = *(_OWORD *)&v27[v28 - 64];
      *((_QWORD *)v29 - 6) = *(_QWORD *)&v27[v28 - 48];
      *((_OWORD *)v29 - 4) = v49;
      v8[v28 - 40] = 0;
      *(v29 - 16) = 0;
      if (v27[v28 - 16])
      {
        v50 = *(_OWORD *)(v31 - 40);
        *(_QWORD *)&v8[v28 - 24] = *((_QWORD *)v31 - 3);
        *(_OWORD *)&v8[v28 - 40] = v50;
        *((_QWORD *)v31 - 4) = 0;
        *((_QWORD *)v31 - 3) = 0;
        *((_QWORD *)v31 - 5) = 0;
        *(v29 - 16) = 1;
      }
      *(v29 - 8) = *(v31 - 8);
      v28 -= 376;
    }
    while (&v27[v28] != v26);
    v27 = (char *)*a1;
    v51 = (char *)a1[1];
    *a1 = &v8[v28];
    a1[1] = v25;
    a1[2] = v24;
    if (v51 != v27)
    {
      v52 = (void **)(v51 - 352);
      do
      {
        while (1)
        {
          if (*((_BYTE *)v52 + 336) && *((char *)v52 + 335) < 0)
            operator delete(v52[39]);
          if (*((char *)v52 + 23) < 0)
            break;
          v53 = (char *)(v52 - 3);
          v52 -= 47;
          if (v53 == v27)
            goto LABEL_28;
        }
        operator delete(*v52);
        v54 = (char *)(v52 - 3);
        v52 -= 47;
      }
      while (v54 != v27);
    }
  }
LABEL_28:
  if (v27)
    operator delete(v27);
  return v25;
}

char *sub_20F22EEA0(uint64_t a1, __int128 *a2)
{
  unint64_t v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  char v14;
  char *v15;
  _OWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  __int128 v23;
  char *v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  char *v31;
  char *v32;
  __int128 v33;
  __int128 v34;
  char *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  char v42;

  v5 = *(_OWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v5 >= v4)
  {
    v16 = *(_OWORD **)a1;
    v17 = 0xEEEEEEEEEEEEEEEFLL * (((uint64_t)v5 - *(_QWORD *)a1) >> 5);
    v18 = v17 + 1;
    if (v17 + 1 > 0x88888888888888)
      sub_20E867F44();
    v19 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v4 - (_QWORD)v16) >> 5);
    if (2 * v19 > v18)
      v18 = 2 * v19;
    if (v19 >= 0x44444444444444)
      v20 = 0x88888888888888;
    else
      v20 = v18;
    if (v20 > 0x88888888888888)
      sub_20E877A38();
    v21 = 480 * v20;
    v22 = (char *)operator new(480 * v20);
    v23 = a2[1];
    v24 = &v22[480 * v17];
    v25 = &v22[v21];
    *(_OWORD *)v24 = *a2;
    *((_OWORD *)v24 + 1) = v23;
    *(_OWORD *)(v24 + 28) = *(__int128 *)((char *)a2 + 28);
    v26 = a2[8];
    *((_OWORD *)v24 + 7) = a2[7];
    *((_OWORD *)v24 + 8) = v26;
    v27 = a2[10];
    *((_OWORD *)v24 + 9) = a2[9];
    *((_OWORD *)v24 + 10) = v27;
    v28 = a2[4];
    *((_OWORD *)v24 + 3) = a2[3];
    *((_OWORD *)v24 + 4) = v28;
    v29 = a2[6];
    *((_OWORD *)v24 + 5) = a2[5];
    *((_OWORD *)v24 + 6) = v29;
    memcpy(v24 + 176, a2 + 11, 0x125uLL);
    v24[472] = *((_BYTE *)a2 + 472);
    v15 = v24 + 480;
    if (v5 != v16)
    {
      v30 = 0;
      do
      {
        v31 = &v24[v30 * 16];
        v32 = &v24[v30 * 16 - 480];
        v33 = v5[v30 - 30];
        v34 = v5[v30 - 29];
        *(_OWORD *)(v32 + 28) = *(_OWORD *)((char *)&v5[v30 - 28] - 4);
        *(_OWORD *)v32 = v33;
        *((_OWORD *)v32 + 1) = v34;
        v35 = &v24[v30 * 16 - 432];
        v36 = v5[v30 - 20];
        v38 = v5[v30 - 23];
        v37 = v5[v30 - 22];
        *((_OWORD *)v35 + 6) = v5[v30 - 21];
        *((_OWORD *)v35 + 7) = v36;
        *((_OWORD *)v35 + 4) = v38;
        *((_OWORD *)v35 + 5) = v37;
        v39 = v5[v30 - 27];
        v40 = v5[v30 - 26];
        v41 = v5[v30 - 24];
        *((_OWORD *)v35 + 2) = v5[v30 - 25];
        *((_OWORD *)v35 + 3) = v41;
        *(_OWORD *)v35 = v39;
        *((_OWORD *)v35 + 1) = v40;
        memcpy(&v24[v30 * 16 - 304], &v5[v30 - 19], 0x120uLL);
        v42 = BYTE4(v5[v30 - 1]);
        *((_DWORD *)v31 - 4) = v5[v30 - 1];
        *(v31 - 12) = v42;
        *(v31 - 8) = BYTE8(v5[v30 - 1]);
        v30 -= 30;
      }
      while (&v5[v30] != v16);
      v24 += v30 * 16;
    }
    *(_QWORD *)a1 = v24;
    *(_QWORD *)(a1 + 8) = v15;
    *(_QWORD *)(a1 + 16) = v25;
    if (v16)
      operator delete(v16);
  }
  else
  {
    v6 = *a2;
    v7 = a2[1];
    *(_OWORD *)((char *)v5 + 28) = *(__int128 *)((char *)a2 + 28);
    *v5 = v6;
    v5[1] = v7;
    v8 = a2[10];
    v10 = a2[7];
    v9 = a2[8];
    v5[9] = a2[9];
    v5[10] = v8;
    v5[7] = v10;
    v5[8] = v9;
    v11 = a2[3];
    v12 = a2[4];
    v13 = a2[6];
    v5[5] = a2[5];
    v5[6] = v13;
    v5[3] = v11;
    v5[4] = v12;
    memcpy(v5 + 11, a2 + 11, 0x120uLL);
    v14 = *((_BYTE *)a2 + 468);
    *((_DWORD *)v5 + 116) = *((_DWORD *)a2 + 116);
    *((_BYTE *)v5 + 468) = v14;
    *((_BYTE *)v5 + 472) = *((_BYTE *)a2 + 472);
    v15 = (char *)(v5 + 30);
  }
  *(_QWORD *)(a1 + 8) = v15;
  return v15 - 480;
}

char *sub_20F22F0D8(void **a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  void **v14;
  void **v15;
  __int128 v16;
  void **v17;

  v3 = ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59)
    sub_20E867F44();
  v5 = (_BYTE *)a1[2] - (_BYTE *)*a1;
  if (v5 >> 4 > v4)
    v4 = v5 >> 4;
  v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFE0;
  v7 = 0x7FFFFFFFFFFFFFFLL;
  if (!v6)
    v7 = v4;
  if (v7 >> 59)
    sub_20E877A38();
  v9 = 32 * v7;
  v10 = (char *)operator new(32 * v7);
  v11 = &v10[32 * v3];
  v12 = &v10[v9];
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_QWORD *)v11 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v11[24] = *(_BYTE *)(a2 + 24);
  v13 = v11 + 32;
  v14 = (void **)*a1;
  v15 = (void **)a1[1];
  if (v15 == *a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
  }
  else
  {
    do
    {
      v16 = *((_OWORD *)v15 - 2);
      *((_QWORD *)v11 - 2) = *(v15 - 2);
      *((_OWORD *)v11 - 2) = v16;
      *(v15 - 3) = 0;
      *(v15 - 2) = 0;
      *(v15 - 4) = 0;
      *(v11 - 8) = *((_BYTE *)v15 - 8);
      v11 -= 32;
      v15 -= 4;
    }
    while (v15 != v14);
    v15 = (void **)*a1;
    v17 = (void **)a1[1];
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
    while (v17 != v15)
    {
      if (*((char *)v17 - 9) < 0)
        operator delete(*(v17 - 4));
      v17 -= 4;
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

char *sub_20F22F210(void **a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  void *v21;
  void *v22;

  v3 = ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59)
    sub_20E867F44();
  v5 = (_BYTE *)a1[2] - (_BYTE *)*a1;
  if (v5 >> 4 > v4)
    v4 = v5 >> 4;
  v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFE0;
  v7 = 0x7FFFFFFFFFFFFFFLL;
  if (!v6)
    v7 = v4;
  if (v7 >> 59)
    sub_20E877A38();
  v9 = 32 * v7;
  v10 = (char *)operator new(32 * v7);
  v11 = &v10[32 * v3];
  v12 = &v10[v9];
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_QWORD *)v11 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v11[24] = *(_BYTE *)(a2 + 24);
  v13 = v11 + 32;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
  }
  else
  {
    v16 = 0;
    do
    {
      v17 = &v11[v16];
      v18 = &v15[v16];
      *((_OWORD *)v17 - 2) = *(_OWORD *)&v15[v16 - 32];
      *((_QWORD *)v17 - 2) = *(_QWORD *)&v15[v16 - 16];
      *((_QWORD *)v18 - 4) = 0;
      *((_QWORD *)v18 - 3) = 0;
      *((_QWORD *)v18 - 2) = 0;
      *(v17 - 8) = v15[v16 - 8];
      v16 -= 32;
    }
    while (&v15[v16] != v14);
    v15 = (char *)*a1;
    v19 = (char *)a1[1];
    *a1 = &v11[v16];
    a1[1] = v13;
    a1[2] = v12;
    if (v19 != v15)
    {
      v20 = v19;
      do
      {
        v22 = (void *)*((_QWORD *)v20 - 4);
        v20 -= 32;
        v21 = v22;
        if (v22)
        {
          *((_QWORD *)v19 - 3) = v21;
          operator delete(v21);
        }
        v19 = v20;
      }
      while (v20 != v15);
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

_QWORD *sub_20F22F360(_QWORD *a1, __int128 **a2)
{
  uint64_t v3;
  __int128 *v4;
  __int128 *v5;
  int64_t v6;
  unint64_t v7;
  char *v8;

  a1[2] = 0;
  v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = (char *)v5 - (char *)*a2;
  if (v5 != *a2)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 4);
    if (v7 >= 0x555555555555556)
      sub_20E92CED8();
    v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[48 * v7];
    a1[1] = sub_20F22F468(v3, v4, v5, (uint64_t)v8);
  }
  return a1;
}

void sub_20F22F408(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  char *v4;
  char *v5;
  void *v6;
  void *v7;

  v1[1] = v2;
  v4 = (char *)*v1;
  if (*v1)
  {
    v5 = (char *)v1[1];
    v6 = *v1;
    if (v5 != v4)
    {
      do
      {
        v7 = (void *)*((_QWORD *)v5 - 3);
        if (v7)
        {
          *((_QWORD *)v5 - 2) = v7;
          operator delete(v7);
        }
        v5 -= 48;
      }
      while (v5 != v4);
      v6 = *v1;
    }
    v1[1] = v4;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20F22F468(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 *v5;
  _QWORD *v6;
  char *v7;
  __int128 v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;

  if (a2 != a3)
  {
    v5 = a2;
    v6 = (_QWORD *)(a4 + 24);
    do
    {
      v8 = *v5;
      *(v6 - 1) = *((_QWORD *)v5 + 2);
      *v6 = 0;
      *(_OWORD *)(v6 - 3) = v8;
      v6[1] = 0;
      v6[2] = 0;
      v10 = (_BYTE *)*((_QWORD *)v5 + 3);
      v9 = (_BYTE *)*((_QWORD *)v5 + 4);
      v11 = v9 - v10;
      if (v9 != v10)
      {
        if (v11 < 0)
          sub_20ED343A8();
        v12 = (char *)operator new(v9 - v10);
        *v6 = v12;
        v6[1] = v12;
        v7 = &v12[64 * (v11 >> 6)];
        v6[2] = v7;
        memcpy(v12, v10, v11);
        v6[1] = v7;
      }
      v6 += 6;
      v5 += 3;
    }
    while (v5 != a3);
    return v6 - 3;
  }
  return (_QWORD *)a4;
}

void sub_20F22F544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_20E9953A0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20F22F56C(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t *v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t *v18[11];

  if (a2 != a3)
  {
    v18[9] = v3;
    v18[10] = v4;
    v6 = a2;
    v7 = result;
    v8 = result + 1;
    do
    {
      result = sub_20F22F698((uint64_t **)v7, v8, v18, &v17, v6 + 4);
      if (*result)
      {
        v9 = (_QWORD *)v6[1];
        if (v9)
          goto LABEL_10;
      }
      else
      {
        v10 = result;
        v11 = operator new(0x238uLL);
        v12 = v6[6];
        v11[2] = *((_OWORD *)v6 + 2);
        *((_QWORD *)v11 + 6) = v12;
        memcpy((char *)v11 + 56, v6 + 7, 0x200uLL);
        v13 = v18[0];
        *(_QWORD *)v11 = 0;
        *((_QWORD *)v11 + 1) = 0;
        *((_QWORD *)v11 + 2) = v13;
        *v10 = (uint64_t)v11;
        v14 = *(_QWORD **)*v7;
        if (v14)
        {
          *v7 = (uint64_t)v14;
          v11 = (_OWORD *)*v10;
        }
        result = sub_20E868578((uint64_t *)v7[1], (uint64_t *)v11);
        ++v7[2];
        v9 = (_QWORD *)v6[1];
        if (v9)
        {
          do
          {
LABEL_10:
            v15 = v9;
            v9 = (_QWORD *)*v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        v15 = (_QWORD *)v6[2];
        v16 = *v15 == (_QWORD)v6;
        v6 = v15;
      }
      while (!v16);
LABEL_3:
      v6 = v15;
    }
    while (v15 != a3);
  }
  return result;
}

uint64_t *sub_20F22F698(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, unint64_t *a5)
{
  uint64_t **v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  BOOL v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t *v22;
  unsigned int v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v27;
  uint64_t *v28;
  uint64_t **v29;
  uint64_t *v30;
  unsigned int v31;
  unint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unint64_t v37;
  unsigned int v38;

  v5 = a1 + 1;
  if (a1 + 1 == (uint64_t **)a2)
    goto LABEL_9;
  v6 = *((_DWORD *)a5 + 4);
  v7 = *((_DWORD *)a2 + 12);
  if (v6 == v7)
  {
    v8 = a2[4];
    if (*a5 < v8)
      goto LABEL_9;
    if (*a5 == v8)
    {
      v9 = *((_DWORD *)a5 + 2);
      v10 = *((_DWORD *)a2 + 10);
      if (v9 >= v10)
      {
        if (v10 >= v9)
          goto LABEL_46;
        goto LABEL_41;
      }
LABEL_9:
      v11 = (uint64_t *)*a2;
      if (*a1 == a2)
      {
        v13 = a2;
      }
      else
      {
        if (v11)
        {
          v12 = (uint64_t *)*a2;
          do
          {
            v13 = v12;
            v12 = (uint64_t *)v12[1];
          }
          while (v12);
        }
        else
        {
          v14 = a2;
          do
          {
            v13 = (uint64_t *)v14[2];
            v15 = *v13 == (_QWORD)v14;
            v14 = v13;
          }
          while (v15);
        }
        v16 = *((_DWORD *)v13 + 12);
        v17 = *((_DWORD *)a5 + 4);
        if (v16 == v17)
        {
          v18 = v13[4];
          if (v18 >= *a5 && (v18 != *a5 || *((_DWORD *)v13 + 10) >= *((_DWORD *)a5 + 2)))
            goto LABEL_21;
        }
        else if (v16 >= v17)
        {
LABEL_21:
          v19 = *v5;
          if (!*v5)
          {
LABEL_70:
            *a3 = (uint64_t *)v5;
            return (uint64_t *)(a1 + 1);
          }
          v20 = *a5;
          v21 = *((_DWORD *)a5 + 2);
          while (1)
          {
            while (1)
            {
              v22 = v19;
              v23 = *((_DWORD *)v19 + 12);
              if (v17 == v23)
                break;
              if (v17 >= v23)
              {
                if (v23 >= v17)
                  goto LABEL_35;
                goto LABEL_34;
              }
LABEL_23:
              v19 = (uint64_t *)*v22;
              v5 = (uint64_t **)v22;
              if (!*v22)
                goto LABEL_35;
            }
            v24 = v22[4];
            if (v20 < v24)
              goto LABEL_23;
            if (v20 != v24)
            {
              if (v24 >= v20)
                goto LABEL_35;
              goto LABEL_34;
            }
            v25 = *((_DWORD *)v22 + 10);
            if (v21 < v25)
              goto LABEL_23;
            if (v25 >= v21)
              goto LABEL_35;
LABEL_34:
            v5 = (uint64_t **)(v22 + 1);
            v19 = (uint64_t *)v22[1];
            if (!v19)
            {
LABEL_35:
              *a3 = v22;
              return (uint64_t *)v5;
            }
          }
        }
      }
      if (v11)
      {
        *a3 = v13;
        return v13 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8 >= *a5)
    {
LABEL_46:
      *a3 = a2;
      *a4 = a2;
      return (uint64_t *)a4;
    }
  }
  else
  {
    if (v6 < v7)
      goto LABEL_9;
    if (v7 >= v6)
      goto LABEL_46;
  }
LABEL_41:
  v27 = a2[1];
  if (v27)
  {
    v28 = (uint64_t *)a2[1];
    do
    {
      v29 = (uint64_t **)v28;
      v28 = (uint64_t *)*v28;
    }
    while (v28);
  }
  else
  {
    v30 = a2;
    do
    {
      v29 = (uint64_t **)v30[2];
      v15 = *v29 == v30;
      v30 = (uint64_t *)v29;
    }
    while (!v15);
  }
  if (v29 != v5)
  {
    v31 = *((_DWORD *)v29 + 12);
    if (v6 == v31)
    {
      v32 = (unint64_t)v29[4];
      if (*a5 >= v32 && (*a5 != v32 || *((_DWORD *)a5 + 2) >= *((_DWORD *)v29 + 10)))
      {
LABEL_55:
        v33 = *v5;
        if (*v5)
        {
          v34 = *a5;
          v35 = *((_DWORD *)a5 + 2);
          while (1)
          {
            while (1)
            {
              v22 = v33;
              v36 = *((_DWORD *)v33 + 12);
              if (v6 == v36)
                break;
              if (v6 >= v36)
              {
                if (v36 >= v6)
                  goto LABEL_35;
                goto LABEL_68;
              }
LABEL_57:
              v33 = (uint64_t *)*v22;
              v5 = (uint64_t **)v22;
              if (!*v22)
                goto LABEL_35;
            }
            v37 = v22[4];
            if (v34 < v37)
              goto LABEL_57;
            if (v34 != v37)
            {
              if (v37 >= v34)
                goto LABEL_35;
              goto LABEL_68;
            }
            v38 = *((_DWORD *)v22 + 10);
            if (v35 < v38)
              goto LABEL_57;
            if (v38 >= v35)
              goto LABEL_35;
LABEL_68:
            v5 = (uint64_t **)(v22 + 1);
            v33 = (uint64_t *)v22[1];
            if (!v33)
              goto LABEL_35;
          }
        }
        goto LABEL_70;
      }
    }
    else if (v6 >= v31)
    {
      goto LABEL_55;
    }
  }
  if (v27)
  {
    *a3 = (uint64_t *)v29;
    return (uint64_t *)v29;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
}

uint64_t sub_20F22F948(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  void **v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  void **v26;
  __int128 *v27;
  __int128 v28;
  __int128 v29;

  if (a2 == a3)
    return a2;
  v6 = a3;
  v7 = 0;
  do
  {
    v8 = a2 + v7;
    v9 = a4 + v7;
    v10 = *(_OWORD *)(a2 + v7);
    *(_DWORD *)(v9 + 16) = *(_DWORD *)(a2 + v7 + 16);
    *(_OWORD *)v9 = v10;
    v11 = (void **)(a4 + v7 + 24);
    if (*(char *)(a4 + v7 + 47) < 0)
      operator delete(*v11);
    v12 = *(_OWORD *)(v8 + 24);
    *(_QWORD *)(a4 + v7 + 40) = *(_QWORD *)(v8 + 40);
    *(_OWORD *)v11 = v12;
    *(_BYTE *)(v8 + 47) = 0;
    *(_BYTE *)(v8 + 24) = 0;
    *(_QWORD *)(v9 + 48) = *(_QWORD *)(v8 + 48);
    v13 = *(_OWORD *)(v8 + 56);
    v14 = *(_OWORD *)(v8 + 72);
    v15 = *(_OWORD *)(v8 + 88);
    *(_OWORD *)(v9 + 104) = *(_OWORD *)(v8 + 104);
    *(_OWORD *)(v9 + 88) = v15;
    *(_OWORD *)(v9 + 72) = v14;
    *(_OWORD *)(v9 + 56) = v13;
    v16 = *(_OWORD *)(v8 + 120);
    v17 = *(_OWORD *)(v8 + 136);
    v18 = *(_OWORD *)(v8 + 152);
    *(_OWORD *)(v9 + 168) = *(_OWORD *)(v8 + 168);
    *(_OWORD *)(v9 + 152) = v18;
    *(_OWORD *)(v9 + 136) = v17;
    *(_OWORD *)(v9 + 120) = v16;
    v19 = *(_OWORD *)(v8 + 264);
    v20 = *(_OWORD *)(v8 + 280);
    v21 = *(_OWORD *)(v8 + 296);
    *(_OWORD *)(v9 + 248) = *(_OWORD *)(v8 + 248);
    *(_OWORD *)(v9 + 280) = v20;
    *(_OWORD *)(v9 + 296) = v21;
    *(_OWORD *)(v9 + 264) = v19;
    v22 = *(_OWORD *)(v8 + 184);
    v23 = *(_OWORD *)(v8 + 200);
    v24 = *(_OWORD *)(v8 + 216);
    *(_OWORD *)(v9 + 232) = *(_OWORD *)(v8 + 232);
    *(_OWORD *)(v9 + 216) = v24;
    *(_OWORD *)(v9 + 200) = v23;
    *(_OWORD *)(v9 + 184) = v22;
    v25 = *(_OWORD *)(v8 + 312);
    *(_BYTE *)(v9 + 328) = *(_BYTE *)(v8 + 328);
    *(_OWORD *)(v9 + 312) = v25;
    v26 = (void **)(v9 + 336);
    v27 = (__int128 *)(v8 + 336);
    if (*(unsigned __int8 *)(v9 + 360) == *(unsigned __int8 *)(v8 + 360))
    {
      if (*(_BYTE *)(v9 + 360))
      {
        if (*(char *)(a4 + v7 + 359) < 0)
          operator delete(*v26);
        v28 = *v27;
        *(_QWORD *)(v9 + 352) = *(_QWORD *)(v8 + 352);
        *(_OWORD *)v26 = v28;
        *(_BYTE *)(a2 + v7 + 359) = 0;
        *(_BYTE *)v27 = 0;
      }
    }
    else if (*(_BYTE *)(v9 + 360))
    {
      if (*(char *)(a4 + v7 + 359) < 0)
        operator delete(*v26);
      *(_BYTE *)(v9 + 360) = 0;
    }
    else
    {
      v29 = *v27;
      *(_QWORD *)(v9 + 352) = *(_QWORD *)(v8 + 352);
      *(_OWORD *)v26 = v29;
      *(_QWORD *)(v8 + 344) = 0;
      *(_QWORD *)(v8 + 352) = 0;
      *(_QWORD *)v27 = 0;
      *(_BYTE *)(v9 + 360) = 1;
    }
    *(_BYTE *)(a4 + v7 + 368) = *(_BYTE *)(v8 + 368);
    v7 += 376;
  }
  while (v8 + 376 != v6);
  return v6;
}

uint64_t sub_20F22FB44@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  int8x8_t v5;
  uint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v35;
  _QWORD *v36;
  uint64_t *v37;
  _QWORD *v38;
  unsigned int v39;
  unint64_t v40;
  _QWORD *v41;
  unsigned int v42;
  unsigned int v43;
  unint64_t v45;
  unsigned int v46;
  BOOL v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t *v50;
  uint64_t *v51;
  unint64_t v52;
  unsigned int v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  unsigned int v58;
  BOOL v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  float64x2_t v63;
  float64x2_t **v64;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  float64x2_t v71;
  float64x2_t v73;
  double v74;
  float64x2_t *v76;
  double v77;
  double v79;
  double v81;
  float64x2_t *v83;
  float64x2_t v85;
  float64x2_t *v89;
  double v90;
  float64x2_t v91;
  int64x2_t v92;
  float64x2_t v94;
  int64x2_t v95;
  double v97;
  float64x2_t v99;
  float64x2_t v101;
  int8x16_t v102;
  int8x16_t v103;
  unint64_t v104;
  char v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  unsigned int v127;
  unint64_t v128;
  unsigned int v129;
  unsigned int v130;
  BOOL v131;
  unint64_t v132;
  unsigned int v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unsigned __int8 v137;
  int v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  size_t v142;
  const char *v143;
  unsigned __int8 v144;
  const char *v145;
  size_t v146;
  _BYTE *v147;
  unint64_t v148;
  const char *v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  _BYTE *v153;
  uint64_t v154;
  uint64_t v155;
  NSObject *v156;
  size_t v157;
  std::__shared_weak_count_vtbl *v158;
  std::__shared_weak_count *v159;
  std::__shared_weak_count *v160;
  unint64_t *p_shared_owners;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  uint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  void *v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  _OWORD *v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  uint64_t v198;
  void *v199;
  uint64_t v200;
  void (***v201)(uint64_t);
  void (**v202)(uint64_t);
  uint64_t v203;
  uint64_t *v204;
  uint64_t v205;
  uint64_t *v206[3];
  int v207;
  const char *v208;
  int v209;
  const char *v210;
  uint64_t v211;
  std::__shared_weak_count *v212;
  uint64_t v213;
  int64x2_t v214;
  _BYTE v215[80];
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  _BYTE v221[288];
  int v222;
  char v223;
  __int128 v224;
  uint64_t v225;
  _OWORD v226[8];
  _BYTE v227[296];
  void *v228;
  void *v229;
  uint64_t v230;
  _QWORD v231[12];
  __int128 v232;
  __int128 v233;
  __int128 v234;
  uint64_t v235;
  __int128 v236;
  uint64_t v237;
  uint64_t v238;
  __int128 v239;
  uint64_t v240;
  uint64_t v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  uint64_t v246;
  _WORD v247[2];
  _BYTE v248[24];
  unint64_t v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  char *v254[12];
  int v255;
  uint64_t v256;
  uint64_t v257;
  _BYTE __src[464];
  int v259;
  char v260;
  __int128 v261;

  *(_QWORD *)&v261 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD **)(result + 120);
  v5 = (int8x8_t)v4[1];
  if (!*(_QWORD *)&v5)
    goto LABEL_21;
  v7 = result;
  v8 = *a2;
  v9 = (uint8x8_t)vcnt_s8(v5);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = *a2;
    if (v8 >= *(_QWORD *)&v5)
      v10 = v8 % *(_QWORD *)&v5;
  }
  else
  {
    v10 = (*(_QWORD *)&v5 - 1) & v8;
  }
  v11 = *(_QWORD **)(*v4 + 8 * v10);
  if (!v11 || (v12 = (_QWORD *)*v11) == 0)
  {
LABEL_21:
    *(_BYTE *)a3 = 0;
    goto LABEL_22;
  }
  v13 = v4[10];
  if (v9.u32[0] < 2uLL)
  {
    v14 = *(_QWORD *)&v5 - 1;
    while (1)
    {
      v16 = v12[1];
      if (v8 == v16)
      {
        if (v12[2] == v8)
          goto LABEL_23;
      }
      else if ((v16 & v14) != v10)
      {
        goto LABEL_21;
      }
      v12 = (_QWORD *)*v12;
      if (!v12)
        goto LABEL_21;
    }
  }
  while (1)
  {
    v15 = v12[1];
    if (v8 == v15)
      break;
    if (v15 >= *(_QWORD *)&v5)
      v15 %= *(_QWORD *)&v5;
    if (v15 != v10)
      goto LABEL_21;
LABEL_11:
    v12 = (_QWORD *)*v12;
    if (!v12)
      goto LABEL_21;
  }
  if (v12[2] != v8)
    goto LABEL_11;
LABEL_23:
  if (*(_BYTE *)(v13 + 2499))
  {
    v17 = v12[5];
    v18 = *(_QWORD *)(v17 + 208);
    v19 = *(_QWORD *)(v17 + 216);
    if (v18 != v19)
    {
      v20 = *(_QWORD *)(v13 + 2832);
      if (*(_QWORD *)(v13 + 2824) != v20)
      {
        while (1)
        {
          v21 = *(_QWORD *)(v13 + 2824);
          while (1)
          {
            v22 = *(_QWORD *)(v21 + 16);
            if (v22)
            {
              if (*(_QWORD *)(v22 + 160) == *(_QWORD *)(v18 + 24))
                break;
            }
            v21 += 4472;
            if (v21 == v20)
              goto LABEL_27;
          }
          if (v21 != v20)
            break;
LABEL_27:
          v18 += 472;
          if (v18 == v19)
            goto LABEL_34;
        }
        *(_BYTE *)a3 = 1;
LABEL_22:
        *(_QWORD *)(a3 + 16) = 0;
        *(_QWORD *)(a3 + 24) = 0;
        *(_QWORD *)(a3 + 8) = 0;
        return result;
      }
    }
  }
LABEL_34:
  memset(&v254[8], 0, 32);
  v255 = 733222164;
  kdebug_trace();
  v23 = *(_QWORD *)(*(_QWORD *)(v7 + 120) + 80);
  v24 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v23 + 2816) + 184) + 1128);
  v25 = *(_QWORD *)(v23 + 2824);
  v26 = *(_QWORD *)(v23 + 2832);
  if (v25 != v26)
  {
    v27 = v26 - v25 - 4472;
    if (v27 >> 3 < 0x22F)
    {
      v28 = *(_QWORD *)(v23 + 2824);
      goto LABEL_40;
    }
    v29 = v27 / 0x1178 + 1;
    v28 = v25 + 4472 * (v29 & 0x1FFFFFFFFFFFFELL);
    v30 = v29 & 0x1FFFFFFFFFFFFELL;
    do
    {
      v31 = *(_QWORD *)(v25 + 4656);
      *(_BYTE *)(*(_QWORD *)(v25 + 184) + 1128) = 0;
      *(_BYTE *)(v31 + 1128) = 0;
      v25 += 8944;
      v30 -= 2;
    }
    while (v30);
    if (v29 != (v29 & 0x1FFFFFFFFFFFFELL))
    {
      do
      {
LABEL_40:
        *(_BYTE *)(*(_QWORD *)(v28 + 184) + 1128) = 0;
        v28 += 4472;
      }
      while (v28 != v26);
    }
  }
  v32 = v12[26];
  if (!*(_BYTE *)(v32 + 225)
    || (v33 = *(_QWORD *)(v32 + 1072)) == 0
    || (*(_QWORD *)(v33 + 8) ? (_ZF = *((_BYTE *)a2 + 68) == 0) : (_ZF = 1),
        !_ZF ? (v35 = *((_DWORD *)a2 + 16) == 2) : (v35 = 0),
        !v35))
  {
    v36 = (_QWORD *)v12[5];
    v38 = v36 + 30;
    v37 = (uint64_t *)v36[30];
    if (!v37)
      goto LABEL_66;
    v39 = *((_DWORD *)a2 + 6);
    v40 = a2[1];
    v41 = v36 + 30;
    v42 = *((_DWORD *)a2 + 4);
    while (2)
    {
      while (2)
      {
        v43 = *((_DWORD *)v37 + 12);
        _CF = v43 >= v39;
        if (v43 == v39)
        {
          v45 = v37[4];
          if (v45 >= v40)
          {
            if (v45 != v40)
              goto LABEL_59;
            _CF = *((_DWORD *)v37 + 10) >= v42;
            break;
          }
LABEL_52:
          v37 = (uint64_t *)v37[1];
          if (!v37)
            goto LABEL_60;
          continue;
        }
        break;
      }
      if (!_CF)
        goto LABEL_52;
LABEL_59:
      v41 = v37;
      v37 = (uint64_t *)*v37;
      if (v37)
        continue;
      break;
    }
LABEL_60:
    if (v41 == v38)
      goto LABEL_66;
    v46 = *((_DWORD *)v41 + 12);
    v47 = v39 >= v46;
    if (v39 != v46)
      goto LABEL_65;
    v48 = v41[4];
    if (v40 < v48)
      goto LABEL_66;
    if (v40 == v48)
    {
      v47 = v42 >= *((_DWORD *)v41 + 10);
LABEL_65:
      if (!v47)
      {
LABEL_66:
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/CollaborativeMapping/RelocalizationExtToSelfNode.cpp", 76, (uint64_t)"image_descriptor_iter != ext_map_iter->second.data()->image_descriptors_.end()", 78, (uint64_t)"Image descriptor does not exist!", 32, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v36 = (_QWORD *)v12[5];
        v41 = v38;
      }
    }
LABEL_68:
    v49 = (_QWORD *)v36[53];
    v51 = (uint64_t *)v49[5];
    v50 = (uint64_t *)v49[6];
    if (v50 != v51)
    {
      v52 = ((char *)v50 - (char *)v51) >> 4;
      v53 = *((_DWORD *)a2 + 6);
      v54 = a2[1];
      while (1)
      {
        v55 = v52 >> 1;
        v56 = &v51[2 * (v52 >> 1)];
        v57 = *v56;
        v58 = *(_DWORD *)(*v56 + 16);
        v59 = v58 >= v53;
        if (v58 != v53)
          goto LABEL_76;
        if (*(_QWORD *)v57 >= v54)
          break;
LABEL_70:
        v51 = v56 + 2;
        v55 = v52 + ~v55;
LABEL_71:
        v52 = v55;
        if (!v55)
          goto LABEL_79;
      }
      if (*(_QWORD *)v57 != v54)
        goto LABEL_71;
      v59 = *(_DWORD *)(v57 + 8) >= *((_DWORD *)a2 + 4);
LABEL_76:
      if (v59)
        goto LABEL_71;
      goto LABEL_70;
    }
LABEL_79:
    v204 = a2 + 1;
    if (v51 == v50)
    {
      v61 = (uint64_t *)v49[6];
    }
    else
    {
      v60 = *v51;
      v61 = (uint64_t *)v49[6];
      if (*(_DWORD *)(*v51 + 16) == *((_DWORD *)a2 + 6))
      {
        v61 = (uint64_t *)v49[6];
        if (*(_QWORD *)v60 == *v204)
        {
          if (*(_DWORD *)(v60 + 8) == *((_DWORD *)a2 + 4))
            v61 = v51;
          else
            v61 = (uint64_t *)v49[6];
        }
      }
    }
    if (v50 == v61)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/CollaborativeMapping/RelocalizationExtToSelfNode.cpp", 90, (uint64_t)"vio_frame_iter != ext_map_iter->second.data()->viodatabase()->end()", 67, (uint64_t)"VIOFrame does not exist!", 24, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v49 = *(_QWORD **)(v12[5] + 424);
    }
    v62 = sub_20E9DF85C((_QWORD *)(*v49 + 1784), v204);
    if (v62)
      v64 = (float64x2_t **)(v62 + 5);
    else
      v64 = 0;
    if (!v62
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/CollaborativeMapping/RelocalizationExtToSelfNode.cpp", 96, (uint64_t)"vio_pose_ref", 12, (uint64_t)"vio_pose_ref does not exist!", 28, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v247[0] = 0;
    *(_QWORD *)&v248[8] = 0;
    *(_QWORD *)v248 = 0;
    *(_QWORD *)&v248[16] = 0xFFFFFFFF00000000;
    _Q0 = 0uLL;
    v250 = 0u;
    v251 = 0u;
    v252 = 0u;
    v253 = 0u;
    memset(v254, 0, 58);
    v66 = *(unsigned __int8 *)(v7 + 113);
    if (*(_BYTE *)(v7 + 113))
    {
      LOBYTE(v247[0]) = 1;
      *(_OWORD *)&v248[4] = *(_OWORD *)v204;
      v67 = *((_DWORD *)a2 + 6);
      v249 = *a2;
      if (*((_BYTE *)a2 + 68))
        v68 = *((_DWORD *)a2 + 16);
      else
        v68 = 0;
      *(_DWORD *)&v248[20] = v67;
      *(_DWORD *)v248 = v68;
    }
    v237 = 0;
    v239 = 0uLL;
    v236 = 0uLL;
    v232 = 0uLL;
    v233 = 0uLL;
    v234 = 0uLL;
    v235 = 0x3FF0000000000000;
    v238 = 0x3FF0000000000000;
    v240 = 0;
    v241 = 0x3FF0000000000000;
    v242 = 0uLL;
    v243 = 0uLL;
    v244 = 0uLL;
    v245 = 0uLL;
    v246 = 0;
    v229 = 0;
    v228 = 0;
    v230 = 0;
    v227[0] = 0;
    v227[288] = 0;
    v69 = *(_QWORD *)(*(_QWORD *)(v7 + 120) + 80);
    *(_QWORD *)__src = v41 + 7;
    __src[8] = 1;
    v70 = *v61;
    v71 = **v64;
    _D2 = (*v64)[2].f64[1];
    v73 = *(float64x2_t *)((char *)*v64 + 24);
    v74 = (*v64)[4].f64[0];
    _Q5 = (*v64)[3];
    v76 = v64[4];
    v77 = v76[1].f64[0];
    _Q7 = *v76;
    v79 = v76[2].f64[1];
    _Q17 = *(float64x2_t *)((char *)v76 + 24);
    v81 = v76[4].f64[0];
    _Q19 = v76[3];
    v83 = v64[6];
    v63.f64[0] = v83[1].f64[0];
    _Q21 = *v83;
    v85 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v71, v83->f64[0]), v73, *v83, 1), _Q5, v63.f64[0]);
    __asm { FMLA            D23, D2, V21.D[1] }
    v63.f64[0] = _D23 + v74 * v63.f64[0];
    v89 = v64[2];
    _Q21.f64[0] = v89[1].f64[0];
    *(_QWORD *)&v90 = *(_OWORD *)&vaddq_f64(v63, _Q21);
    v91 = vaddq_f64(v85, *v89);
    v92 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v71, _Q7.f64[0]), v73, _Q7, 1), _Q5, v77);
    __asm { FMLA            D23, D2, V7.D[1] }
    v94.f64[0] = _D23 + v74 * v77;
    v95 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v71, _Q17.f64[0]), v73, _Q17, 1), _Q5, v79);
    __asm { FMLA            D23, D2, V17.D[1] }
    v97 = _D23 + v74 * v79;
    _Q1 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v71, _Q19.f64[0]), v73, _Q19, 1), _Q5, v81);
    __asm { FMLA            D0, D2, V19.D[1] }
    *(double *)_Q0.i64 = *(double *)_Q0.i64 + v74 * v81;
    v99 = (float64x2_t)vzip1q_s64(v92, v95);
    _Q4 = (float64x2_t)vzip2q_s64(v92, v95);
    *(float64_t *)v215 = v94.f64[0];
    v94.f64[1] = v97;
    v101 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v99, v91.f64[0]), _Q4, v91, 1), v94, v90);
    _Q5.f64[0] = v91.f64[1];
    __asm { FMLA            D4, D5, V1.D[1] }
    _Q4.f64[0] = vmlad_n_f64(_Q4.f64[0], *(double *)_Q0.i64, v90);
    v102 = (int8x16_t)vnegq_f64(v101);
    v214 = v92;
    v103 = vextq_s8(v102, _Q1, 8uLL);
    v102.i64[1] = *(_QWORD *)&v99.f64[1];
    *(int8x16_t *)&v215[8] = v102;
    *(int64x2_t *)&v215[24] = vzip2q_s64(v95, vdupq_lane_s64(*(uint64_t *)&v97, 0));
    *(int8x16_t *)&v215[40] = v103;
    *(int8x16_t *)&v215[56] = vextq_s8(_Q1, _Q0, 8uLL);
    *(_QWORD *)&v215[72] = *(_OWORD *)&vnegq_f64(_Q4);
    v104 = (unint64_t)v247 & 0xF8;
    if (!(_DWORD)v66)
      v104 = 0;
    v105 = sub_20F32EFB0(v69, (uint64_t)__src, v70, (uint64_t)&v214, (int64x2_t **)v64 + 4, 0, (uint64_t)(a2 + 8), (char **)&v228, (uint64_t)v231, (uint64_t)&v232, v227, v104 | (unint64_t)v247 & 0xFFFFFFFFFFFFFF00, v66, 0, 0);
    v109 = *(_QWORD *)(v23 + 2824);
    v110 = *(_QWORD *)(v23 + 2832);
    if (v109 != v110)
    {
      v111 = v110 - v109 - 4472;
      v112 = *(_QWORD *)(v23 + 2824);
      if (v111 >> 3 < 0x22F)
        goto LABEL_277;
      v113 = v111 / 0x1178 + 1;
      v112 = v109 + 4472 * (v113 & 0x1FFFFFFFFFFFFELL);
      v114 = v113 & 0x1FFFFFFFFFFFFELL;
      v115 = *(_QWORD *)(v23 + 2824);
      do
      {
        v116 = *(_QWORD *)(v115 + 4656);
        *(_BYTE *)(*(_QWORD *)(v115 + 184) + 1128) = v24;
        *(_BYTE *)(v116 + 1128) = v24;
        v115 += 8944;
        v114 -= 2;
      }
      while (v114);
      if (v113 != (v113 & 0x1FFFFFFFFFFFFELL))
      {
LABEL_277:
        do
        {
          *(_BYTE *)(*(_QWORD *)(v112 + 184) + 1128) = v24;
          v112 += 4472;
        }
        while (v112 != v110);
      }
    }
    if ((v105 & 1) == 0)
    {
      if (*(_BYTE *)(v7 + 113))
      {
        HIBYTE(v247[0]) = 0;
        v124 = *(_QWORD *)(v7 + 64);
        if (v124 >= *(_QWORD *)(v7 + 72))
        {
          v125 = sub_20F2319F4((uint64_t *)(v7 + 56), (__int128 *)v247);
        }
        else
        {
          sub_20EE6CA98(*(_QWORD *)(v7 + 64), (__int128 *)v247);
          v125 = v124 + 168;
          *(_QWORD *)(v7 + 64) = v124 + 168;
        }
        *(_QWORD *)(v7 + 64) = v125;
      }
      ++*(_DWORD *)(v7 + 104);
      goto LABEL_148;
    }
    *(_QWORD *)&v117 = v231[0];
    *(_QWORD *)&v118 = v231[1];
    *(_QWORD *)&v119 = v231[2];
    *(_QWORD *)&v120 = v231[3];
    *((_QWORD *)&v117 + 1) = v231[4];
    *((_QWORD *)&v118 + 1) = v231[5];
    *(_QWORD *)&v106 = v231[8];
    *(_QWORD *)&v107 = v231[9];
    *((_QWORD *)&v119 + 1) = v231[6];
    *((_QWORD *)&v120 + 1) = v231[7];
    *(_QWORD *)&v108 = v231[10];
    __asm { FMOV            V7.2D, #1.0 }
    *(_QWORD *)&_Q7 = v231[11];
    v226[0] = v117;
    v226[1] = v106;
    v226[2] = v118;
    v226[3] = v107;
    v226[4] = v119;
    v226[5] = v108;
    v226[6] = v120;
    v226[7] = _Q7;
    v122 = *((_QWORD *)v228 + 2);
    v224 = *(_OWORD *)v228;
    v225 = v122;
    if (*(_BYTE *)(v23 + 2499))
    {
      if (v109 != v110)
      {
        while (1)
        {
          v123 = *(_QWORD *)(v109 + 16);
          if (v123)
          {
            if (*(_QWORD *)(v123 + 160) == (_QWORD)v224)
              break;
          }
          v109 += 4472;
          if (v109 == v110)
            goto LABEL_137;
        }
      }
      if (v109 == v110)
        goto LABEL_137;
    }
    else
    {
      v109 = *(_QWORD *)(v23 + 2816);
    }
    if (v109)
    {
LABEL_139:
      sub_20F453824(v12[5], *(_QWORD *)(v109 + 16), (uint64_t)v204, (uint64_t)&v224, (uint64_t)v226, 3, (uint64_t)&v214, *(double *)(*(_QWORD *)(*(_QWORD *)(v7 + 120) + 80) + 864));
      if (!(*(unsigned __int8 *)(v13 + 931) | *(unsigned __int8 *)(v13 + 2499)))
        goto LABEL_142;
      LODWORD(v206[0]) = 0;
      sub_20F468830(*(_QWORD *)(*(_QWORD *)(v109 + 16) + 424), *(_QWORD *)(v12[5] + 424), (uint64_t *)&v224, v204, (float64x2_t *)&v215[32], &v232, (unsigned int **)&v233 + 1, v206, (uint64_t)__src);
      if (*(_QWORD *)(v13 + 72) <= (unint64_t)LODWORD(v206[0]))
      {
        memcpy(v221, __src, sizeof(v221));
LABEL_142:
        if (*(_BYTE *)(v7 + 113))
        {
          *(int64x2_t *)__src = v214;
          *(_OWORD *)&__src[16] = *(_OWORD *)v215;
          *(_OWORD *)&__src[28] = *(_OWORD *)&v215[12];
          *(_OWORD *)&__src[112] = v217;
          *(_OWORD *)&__src[128] = v218;
          *(_OWORD *)&__src[144] = v219;
          *(_OWORD *)&__src[160] = v220;
          *(_OWORD *)&__src[48] = *(_OWORD *)&v215[32];
          *(_OWORD *)&__src[64] = *(_OWORD *)&v215[48];
          *(_OWORD *)&__src[80] = *(_OWORD *)&v215[64];
          *(_OWORD *)&__src[96] = v216;
          memcpy(&__src[176], v221, 0x120uLL);
          v259 = v222;
          v260 = v223;
          sub_20F231C88(&v254[1], (__int128 *)__src, &v261);
          HIBYTE(v247[0]) = 1;
          v135 = *(_QWORD *)(v7 + 64);
          if (v135 >= *(_QWORD *)(v7 + 72))
          {
            v136 = sub_20F2319F4((uint64_t *)(v7 + 56), (__int128 *)v247);
          }
          else
          {
            sub_20EE6CA98(*(_QWORD *)(v7 + 64), (__int128 *)v247);
            v136 = v135 + 168;
            *(_QWORD *)(v7 + 64) = v135 + 168;
          }
          *(_QWORD *)(v7 + 64) = v136;
        }
        v137 = atomic_load((unsigned __int8 *)&qword_254A68798);
        if ((v137 & 1) == 0 && __cxa_guard_acquire(&qword_254A68798))
        {
          sub_21021D3D8(v206);
          sub_20E8610C0(__src, "cv3d.vio.area_mapping");
          sub_20E8C4068(v206, (uint64_t)__src, &qword_254A68790);
          if ((__src[23] & 0x80000000) != 0)
            operator delete(*(void **)__src);
          __cxa_guard_release(&qword_254A68798);
        }
        v213 = qword_254A68790;
        if (**(int **)(qword_254A68790 + 56) > 3)
          goto LABEL_242;
        v138 = *(unsigned __int8 *)(qword_254A68790 + 72);
        v139 = sub_20E8C31DC(qword_254A68790, "OSLogSurrogateAppender", 1, 0);
        v140 = v139;
        if (!v138 && !v139)
          goto LABEL_242;
        v206[0] = &v213;
        v206[1] = (uint64_t *)std::chrono::steady_clock::now().__d_.__rep_;
        v206[2] = (uint64_t *)std::chrono::system_clock::now().__d_.__rep_;
        v207 = 3;
        v208 = "unknown file";
        v209 = 184;
        v211 = 0;
        v212 = 0;
        v210 = "unknown function";
        v141 = *v206[0];
        v205 = *v206[0];
        if (*(char *)(*v206[0] + 39) < 0)
        {
          v143 = *(const char **)(v141 + 16);
          v142 = *(_QWORD *)(v141 + 24);
        }
        else
        {
          v142 = *(unsigned __int8 *)(*v206[0] + 39);
          v143 = (const char *)(*v206[0] + 16);
        }
        v203 = *v206[0] + 16;
        v144 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v144 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)__src);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__src);
          if (__src[24] && (__src[23] & 0x80000000) != 0)
            operator delete(*(void **)__src);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        if (byte_254A4A4F8[23] >= 0)
          v145 = byte_254A4A4F8;
        else
          v145 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v146 = byte_254A4A4F8[23];
        else
          v146 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)__src = os_log_create(v145, v143);
        v147 = &__src[8];
        if (v146 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v146 >= 0x17)
        {
          v148 = v140;
          v149 = v143;
          v150 = v138;
          v151 = (v146 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v146 | 7) != 0x17)
            v151 = v146 | 7;
          v152 = v151 + 1;
          v147 = operator new(v151 + 1);
          *(_QWORD *)&__src[24] = v152 | 0x8000000000000000;
          *(_QWORD *)&__src[8] = v147;
          *(_QWORD *)&__src[16] = v146;
          v138 = v150;
          v143 = v149;
          v140 = v148;
        }
        else
        {
          __src[31] = v146;
          if (!v146)
          {
LABEL_175:
            v147[v146] = 0;
            __src[32] = 1;
            v153 = &__src[40];
            if (v142 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v142 >= 0x17)
            {
              v154 = (v142 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v142 | 7) != 0x17)
                v154 = v142 | 7;
              v155 = v154 + 1;
              v153 = operator new(v154 + 1);
              *(_QWORD *)&__src[56] = v155 | 0x8000000000000000;
              *(_QWORD *)&__src[40] = v153;
              *(_QWORD *)&__src[48] = v142;
            }
            else
            {
              __src[63] = v142;
              if (!v142)
                goto LABEL_183;
            }
            memmove(v153, v143, v142);
LABEL_183:
            v153[v142] = 0;
            __src[64] = 1;
            v156 = *(NSObject **)__src;
            if ((__src[63] & 0x80000000) != 0)
              operator delete(*(void **)&__src[40]);
            if (__src[32] && (__src[31] & 0x80000000) != 0)
              operator delete(*(void **)&__src[8]);
            if (*(_QWORD *)__src)
              os_release(*(void **)__src);
            if (v140 && *(_QWORD *)(v140 + 24))
            {
              v157 = _os_log_pack_size();
              v158 = (std::__shared_weak_count_vtbl *)operator new(v157, (std::align_val_t)8uLL);
              v159 = (std::__shared_weak_count *)operator new();
              v160 = v159;
              v159->__shared_owners_ = 0;
              p_shared_owners = (unint64_t *)&v159->__shared_owners_;
              v159->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v159->__shared_weak_owners_ = 0;
              v159[1].__vftable = v158;
              *(_QWORD *)__src = v158;
              *(_QWORD *)&__src[8] = v158;
              *(_QWORD *)&__src[16] = v159;
              do
                v162 = __ldxr(p_shared_owners);
              while (__stxr(v162 + 1, p_shared_owners));
              memset(&__src[24], 0, 24);
              do
                v163 = __ldaxr(p_shared_owners);
              while (__stlxr(v163 - 1, p_shared_owners));
              if (!v163)
              {
                ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
                std::__shared_weak_count::__release_weak(v160);
              }
              v164 = *(_QWORD *)__src;
              *(_WORD *)_os_log_pack_fill() = 0;
              v165 = operator new();
              v166 = *(unsigned __int8 *)(v205 + 39);
              v167 = v203;
              if ((v166 & 0x80u) != 0)
              {
                v167 = *(_QWORD *)(v205 + 16);
                v166 = *(_QWORD *)(v205 + 24);
              }
              *(_QWORD *)v165 = v164;
              *(_OWORD *)(v165 + 8) = *(_OWORD *)&__src[8];
              *(_QWORD *)&__src[8] = 0;
              *(_QWORD *)&__src[16] = 0;
              *(_OWORD *)(v165 + 24) = *(_OWORD *)&__src[24];
              *(_QWORD *)&__src[24] = 0;
              *(_QWORD *)&__src[32] = 0;
              *(_QWORD *)(v165 + 40) = v167;
              *(_QWORD *)(v165 + 48) = v166;
              *(_BYTE *)(v165 + 56) = 1;
              v256 = 0;
              v257 = v165;
              (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v140 + 24) + 40))(*(_QWORD *)(v140 + 24), &v257);
              v168 = v257;
              v257 = 0;
              if (v168)
              {
                v169 = *(std::__shared_weak_count **)(v168 + 32);
                if (v169)
                {
                  v170 = (unint64_t *)&v169->__shared_owners_;
                  do
                    v171 = __ldaxr(v170);
                  while (__stlxr(v171 - 1, v170));
                  if (!v171)
                  {
                    ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
                    std::__shared_weak_count::__release_weak(v169);
                  }
                }
                v172 = *(std::__shared_weak_count **)(v168 + 16);
                if (v172)
                {
                  v173 = (unint64_t *)&v172->__shared_owners_;
                  do
                    v174 = __ldaxr(v173);
                  while (__stlxr(v174 - 1, v173));
                  if (!v174)
                  {
                    ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
                    std::__shared_weak_count::__release_weak(v172);
                  }
                }
                MEMORY[0x212BC6398](v168, 0x10F0C40B62ED6C6);
                v175 = v256;
                v256 = 0;
                if (v175)
                {
                  v176 = *(std::__shared_weak_count **)(v175 + 32);
                  if (v176)
                  {
                    v177 = (unint64_t *)&v176->__shared_owners_;
                    do
                      v178 = __ldaxr(v177);
                    while (__stlxr(v178 - 1, v177));
                    if (!v178)
                    {
                      ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
                      std::__shared_weak_count::__release_weak(v176);
                    }
                  }
                  v179 = *(std::__shared_weak_count **)(v175 + 16);
                  if (v179)
                  {
                    v180 = (unint64_t *)&v179->__shared_owners_;
                    do
                      v181 = __ldaxr(v180);
                    while (__stlxr(v181 - 1, v180));
                    if (!v181)
                    {
                      ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
                      std::__shared_weak_count::__release_weak(v179);
                    }
                  }
                  MEMORY[0x212BC6398](v175, 0x10F0C40B62ED6C6);
                }
              }
              v182 = *(std::__shared_weak_count **)&__src[32];
              if (*(_QWORD *)&__src[32])
              {
                v183 = (unint64_t *)(*(_QWORD *)&__src[32] + 8);
                do
                  v184 = __ldaxr(v183);
                while (__stlxr(v184 - 1, v183));
                if (!v184)
                {
                  ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
                  std::__shared_weak_count::__release_weak(v182);
                }
              }
              v185 = *(std::__shared_weak_count **)&__src[16];
              if (*(_QWORD *)&__src[16])
              {
                v186 = (unint64_t *)(*(_QWORD *)&__src[16] + 8);
                do
                  v187 = __ldaxr(v186);
                while (__stlxr(v187 - 1, v186));
                if (!v187)
                {
                  ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
                  std::__shared_weak_count::__release_weak(v185);
                }
              }
            }
            else
            {
              os_log_type_enabled(v156, OS_LOG_TYPE_INFO);
              *(_WORD *)__src = 0;
              v188 = (void *)_os_log_send_and_compose_impl();
              if (v188)
                free(v188);
            }
            if (v138)
            {
              sub_20E8C003C((uint64_t)v206, "Relocalize by Vision!");
              sub_20E863570((uint64_t)v206);
            }
            sub_20E863570((uint64_t)v206);
            v189 = v212;
            if (v212)
            {
              v190 = (unint64_t *)&v212->__shared_owners_;
              do
                v191 = __ldaxr(v190);
              while (__stlxr(v191 - 1, v190));
              if (!v191)
              {
                ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
                std::__shared_weak_count::__release_weak(v189);
              }
            }
LABEL_242:
            v192 = operator new(0x1D8uLL);
            v193 = *(_OWORD *)v215;
            *v192 = v214;
            v192[1] = v193;
            *(_OWORD *)((char *)v192 + 28) = *(_OWORD *)&v215[12];
            v194 = v218;
            v192[7] = v217;
            v192[8] = v194;
            v195 = v220;
            v192[9] = v219;
            v192[10] = v195;
            v196 = *(_OWORD *)&v215[48];
            v192[3] = *(_OWORD *)&v215[32];
            v192[4] = v196;
            v197 = v216;
            v192[5] = *(_OWORD *)&v215[64];
            v192[6] = v197;
            memcpy(v192 + 11, v221, 0x120uLL);
            *((_DWORD *)v192 + 116) = v222;
            *((_BYTE *)v192 + 468) = v223;
            *(_BYTE *)a3 = 1;
            *(_QWORD *)(a3 + 8) = v192;
            *(_QWORD *)(a3 + 16) = (char *)v192 + 472;
            *(_QWORD *)(a3 + 24) = (char *)v192 + 472;
            goto LABEL_243;
          }
        }
        memmove(v147, v145, v146);
        goto LABEL_175;
      }
LABEL_148:
      *(_BYTE *)a3 = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 8) = 0;
LABEL_243:
      if (v228)
      {
        v229 = v228;
        operator delete(v228);
      }
      if ((_QWORD)v245)
      {
        *((_QWORD *)&v245 + 1) = v245;
        operator delete((void *)v245);
      }
      if (*((_QWORD *)&v243 + 1))
      {
        *(_QWORD *)&v244 = *((_QWORD *)&v243 + 1);
        operator delete(*((void **)&v243 + 1));
      }
      if (*((_QWORD *)&v233 + 1))
      {
        *(_QWORD *)&v234 = *((_QWORD *)&v233 + 1);
        operator delete(*((void **)&v233 + 1));
      }
      v198 = v232;
      if ((_QWORD)v232)
      {
        v199 = (void *)v232;
        if (*((_QWORD *)&v232 + 1) != (_QWORD)v232)
        {
          v200 = *((_QWORD *)&v232 + 1) - 40;
          v201 = (void (***)(uint64_t))(*((_QWORD *)&v232 + 1) - 40);
          do
          {
            v202 = *v201;
            v201 -= 5;
            (*v202)(v200);
            _ZF = v200 == v198;
            v200 = (uint64_t)v201;
          }
          while (!_ZF);
          v199 = (void *)v232;
        }
        *((_QWORD *)&v232 + 1) = v198;
        operator delete(v199);
      }
      sub_20E991548(v247);
      return kdebug_trace();
    }
LABEL_137:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/CollaborativeMapping/RelocalizationExtToSelfNode.cpp", 151, (uint64_t)"ref_submap", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v109 = 0;
    goto LABEL_139;
  }
  v36 = (_QWORD *)v12[5];
  v126 = (uint64_t *)v36[38];
  if (!v126)
    goto LABEL_158;
  v127 = *((_DWORD *)a2 + 6);
  v128 = a2[1];
  v129 = *((_DWORD *)a2 + 4);
  v41 = v36 + 38;
  do
  {
    while (1)
    {
      v130 = *((_DWORD *)v126 + 12);
      v131 = v130 >= v127;
      if (v130 != v127)
        goto LABEL_126;
      v132 = v126[4];
      if (v132 >= v128)
        break;
LABEL_121:
      v126 = (uint64_t *)v126[1];
      if (!v126)
        goto LABEL_129;
    }
    if (v132 != v128)
      goto LABEL_128;
    v131 = *((_DWORD *)v126 + 10) >= v129;
LABEL_126:
    if (!v131)
      goto LABEL_121;
LABEL_128:
    v41 = v126;
    v126 = (uint64_t *)*v126;
  }
  while (v126);
LABEL_129:
  if (v41 != v36 + 38)
  {
    v133 = *((_DWORD *)v41 + 12);
    if (v127 == v133)
    {
      v134 = v41[4];
      if (v128 >= v134 && (v128 != v134 || v129 >= *((_DWORD *)v41 + 10)))
        goto LABEL_68;
    }
    else if (v127 >= v133)
    {
      goto LABEL_68;
    }
  }
LABEL_158:
  *(_BYTE *)a3 = 1;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  return kdebug_trace();
}

void sub_20F230F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  void *v11;
  va_list va;

  va_start(va, a10);
  if (LOBYTE(STACK[0x678]) && SLOBYTE(STACK[0x677]) < 0)
    operator delete((void *)STACK[0x660]);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)va);
  v11 = (void *)STACK[0x438];
  if (STACK[0x438])
  {
    STACK[0x440] = (unint64_t)v11;
    operator delete(v11);
  }
  sub_20F2310C8((void **)&STACK[0x4B0]);
  sub_20E991548(&STACK[0x578]);
  sub_20E8E69C4((uint64_t)&STACK[0x620]);
  _Unwind_Resume(a1);
}

void **sub_20F2310C8(void **a1)
{
  void *v2;
  void *v3;
  void *v4;
  char *v5;
  char *v6;
  void *v7;
  char *v8;
  char *v9;
  void (**v10)(char *);
  BOOL v11;

  v2 = a1[21];
  if (v2)
  {
    a1[22] = v2;
    operator delete(v2);
  }
  v3 = a1[18];
  if (v3)
  {
    a1[19] = v3;
    operator delete(v3);
  }
  v4 = a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  v5 = (char *)*a1;
  if (*a1)
  {
    v6 = (char *)a1[1];
    v7 = *a1;
    if (v6 != v5)
    {
      v8 = v6 - 40;
      v9 = v6 - 40;
      do
      {
        v10 = *(void (***)(char *))v9;
        v9 -= 40;
        (*v10)(v8);
        v11 = v8 == v5;
        v8 = v9;
      }
      while (!v11);
      v7 = *a1;
    }
    a1[1] = v5;
    operator delete(v7);
  }
  return a1;
}

void sub_20F231168(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  void *v9;
  void *v10;

  v1 = a1[1];
  v2 = a1[2];
  if (v1 != v2)
  {
    v4 = (_QWORD *)a1[15];
    while ((sub_20F231E7C(v4, (uint64_t *)v1) & 1) == 0)
    {
      v1 += 112;
      if (v1 == v2)
        return;
    }
    if (v1 != v2)
    {
      v5 = v1 + 112;
      if (v1 + 112 != v2)
      {
        do
        {
          if ((sub_20F231E7C((_QWORD *)a1[15], (uint64_t *)v5) & 1) == 0)
          {
            *(_OWORD *)v1 = *(_OWORD *)v5;
            v6 = *(_OWORD *)(v5 + 16);
            v7 = *(_OWORD *)(v5 + 32);
            v8 = *(_OWORD *)(v5 + 48);
            *(_QWORD *)(v1 + 61) = *(_QWORD *)(v5 + 61);
            *(_OWORD *)(v1 + 32) = v7;
            *(_OWORD *)(v1 + 48) = v8;
            *(_OWORD *)(v1 + 16) = v6;
            v9 = *(void **)(v1 + 72);
            if (v9)
            {
              *(_QWORD *)(v1 + 80) = v9;
              operator delete(v9);
              *(_QWORD *)(v1 + 72) = 0;
              *(_QWORD *)(v1 + 80) = 0;
              *(_QWORD *)(v1 + 88) = 0;
            }
            *(_OWORD *)(v1 + 72) = *(_OWORD *)(v5 + 72);
            *(_QWORD *)(v1 + 88) = *(_QWORD *)(v5 + 88);
            *(_QWORD *)(v5 + 80) = 0;
            *(_QWORD *)(v5 + 88) = 0;
            *(_QWORD *)(v5 + 72) = 0;
            *(_BYTE *)(v1 + 96) = *(_BYTE *)(v5 + 96);
            *(_BYTE *)(v1 + 104) = *(_BYTE *)(v5 + 104);
            v1 += 112;
          }
          v5 += 112;
        }
        while (v5 != v2);
        v2 = a1[2];
      }
    }
    if (v1 != v2)
    {
      while (v2 != v1)
      {
        v10 = *(void **)(v2 - 40);
        if (v10)
        {
          *(_QWORD *)(v2 - 32) = v10;
          operator delete(v10);
        }
        v2 -= 112;
      }
      a1[2] = v1;
    }
  }
}

uint64_t *sub_20F23135C(_QWORD *a1, float32x4_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  double v6;
  uint64_t *v7;
  _QWORD *v8;
  int8x8_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t *v23;
  unsigned int v24;
  unsigned int v25;
  BOOL v26;
  unint64_t v27;
  unsigned int v28;
  BOOL v29;
  unint64_t v30;
  _BOOL4 v31;
  double *v32;
  double v33;
  double *v35;
  double *v36;

  v3 = (uint64_t *)a1[1];
  v2 = (uint64_t *)a1[2];
  if (v3 == v2)
    return v2;
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[15] + 80) + 2816) + 184) + 1056) + 8)
     + 400;
  v6 = 1.79769313e308;
  v7 = (uint64_t *)a1[2];
  while (2)
  {
    if (!*((_BYTE *)v3 + 104))
      goto LABEL_6;
    v8 = (_QWORD *)a1[15];
    v9 = (int8x8_t)v8[1];
    if (!*(_QWORD *)&v9)
      goto LABEL_6;
    v10 = *v3;
    *(int8x8_t *)a2.f32 = vcnt_s8(v9);
    a2.i16[0] = vaddlv_u8(*(uint8x8_t *)a2.f32);
    if (a2.u32[0] > 1uLL)
    {
      v11 = *v3;
      if (v10 >= *(_QWORD *)&v9)
        v11 = v10 % *(_QWORD *)&v9;
    }
    else
    {
      v11 = (*(_QWORD *)&v9 - 1) & v10;
    }
    v12 = *(_QWORD **)(*v8 + 8 * v11);
    if (!v12)
      goto LABEL_6;
    v13 = (_QWORD *)*v12;
    if (!v13)
      goto LABEL_6;
    if (a2.u32[0] < 2uLL)
    {
      v14 = *(_QWORD *)&v9 - 1;
      while (1)
      {
        v16 = v13[1];
        if (v10 == v16)
        {
          if (v13[2] == v10)
            goto LABEL_29;
        }
        else if ((v16 & v14) != v11)
        {
          goto LABEL_6;
        }
        v13 = (_QWORD *)*v13;
        if (!v13)
          goto LABEL_6;
      }
    }
    while (1)
    {
      v15 = v13[1];
      if (v10 == v15)
        break;
      if (v15 >= *(_QWORD *)&v9)
        v15 %= *(_QWORD *)&v9;
      if (v15 != v11)
        goto LABEL_6;
LABEL_18:
      v13 = (_QWORD *)*v13;
      if (!v13)
        goto LABEL_6;
    }
    if (v13[2] != v10)
      goto LABEL_18;
LABEL_29:
    v17 = v13[5];
    v20 = *(uint64_t **)(v17 + 240);
    v19 = (uint64_t *)(v17 + 240);
    v18 = v20;
    if (!v20)
      goto LABEL_45;
    v21 = *((_DWORD *)v3 + 6);
    v22 = v3[1];
    v23 = v19;
    v24 = *((_DWORD *)v3 + 4);
    while (2)
    {
      while (2)
      {
        v25 = *((_DWORD *)v18 + 12);
        v26 = v25 >= v21;
        if (v25 == v21)
        {
          v27 = v18[4];
          if (v27 >= v22)
          {
            if (v27 != v22)
              goto LABEL_38;
            v26 = *((_DWORD *)v18 + 10) >= v24;
            break;
          }
LABEL_31:
          v18 = (uint64_t *)v18[1];
          if (!v18)
            goto LABEL_39;
          continue;
        }
        break;
      }
      if (!v26)
        goto LABEL_31;
LABEL_38:
      v23 = v18;
      v18 = (uint64_t *)*v18;
      if (v18)
        continue;
      break;
    }
LABEL_39:
    if (v23 == v19)
      goto LABEL_45;
    v28 = *((_DWORD *)v23 + 12);
    v29 = v21 >= v28;
    if (v21 != v28)
      goto LABEL_44;
    v30 = v23[4];
    if (v22 < v30)
      goto LABEL_45;
    if (v22 == v30)
    {
      v29 = v24 >= *((_DWORD *)v23 + 10);
LABEL_44:
      if (!v29)
      {
LABEL_45:
        v31 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/CollaborativeMapping/RelocalizationExtToSelfNode.cpp", 249, (uint64_t)"image_desc_iter != ext_map_iter->second.data()->image_descriptors_.end()", 72, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
        v23 = v19;
        if (v31)
          abort();
      }
    }
    sub_20F2783C8(v5, (float32x4_t *)(v23 + 7), 1uLL, (uint64_t *)&v35, a2);
    v32 = v35;
    if (v35 == v36)
    {
      if (v35)
        goto LABEL_4;
    }
    else
    {
      v33 = v35[3];
      if (v33 > *(double *)(*(_QWORD *)(a1[15] + 80) + 904))
      {
        *((_BYTE *)v3 + 104) = 0;
      }
      else if (v33 < v6)
      {
        v6 = v35[3];
        v7 = v3;
      }
LABEL_4:
      v36 = v32;
      operator delete(v32);
    }
    v2 = (uint64_t *)a1[2];
LABEL_6:
    v3 += 14;
    if (v3 != v2)
      continue;
    break;
  }
  if (v7 == v2)
  {
    v7 = (uint64_t *)a1[1];
    if (v7 != v2)
    {
      while (!*((_BYTE *)v7 + 104))
      {
        v7 += 14;
        if (v7 == v2)
          return v2;
      }
      return v7;
    }
    return v2;
  }
  return v7;
}

uint64_t sub_20F23163C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t i;
  int v16;
  void **v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  size_t v22;
  unint64_t v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  void *__p[2];
  unsigned __int8 v30;
  uint64_t v31;
  std::ios_base v32;
  uint64_t v33;
  int v34;
  uint64_t __sb;
  const void *v36;
  uint64_t v37;
  const void *v38;
  unint64_t v39;
  __int128 v40;
  __int128 v41;
  int v42;
  uint64_t v43;
  int v44;

  std::streambuf::basic_streambuf();
  v6 = MEMORY[0x24BEDB848];
  __sb = MEMORY[0x24BEDB848] + 16;
  v40 = 0u;
  v41 = 0u;
  v42 = 24;
  v31 = MEMORY[0x24BEDB828] + 24;
  v32.__vftable = (std::ios_base_vtbl *)(MEMORY[0x24BEDB828] + 64);
  std::ios_base::init(&v32, &__sb);
  v33 = 0;
  v34 = -1;
  sub_20E86A980(&v31, (uint64_t)"[", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = sub_20E86A980(v7, (uint64_t)"] ", 2);
  v9 = sub_20E86A980(v8, (uint64_t)"Relocalization request: ", 24);
  v10 = *(char *)(a2 + 23);
  if (v10 >= 0)
    v11 = a2;
  else
    v11 = *(_QWORD *)a2;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a2 + 23);
  else
    v12 = *(_QWORD *)(a2 + 8);
  v13 = sub_20E86A980(v9, v11, v12);
  sub_20E86A980(v13, (uint64_t)" ", 1);
  v14 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); v14 != i; v14 += 112)
  {
    v16 = *(_DWORD *)(v14 + 16);
    v43 = *(_QWORD *)(v14 + 8);
    v44 = v16;
    sub_210216370((uint64_t)&v43);
    if ((v30 & 0x80u) == 0)
      v17 = __p;
    else
      v17 = (void **)__p[0];
    if ((v30 & 0x80u) == 0)
      v18 = v30;
    else
      v18 = (uint64_t)__p[1];
    v19 = sub_20E86A980(&v31, (uint64_t)v17, v18);
    sub_20E86A980(v19, (uint64_t)"(", 1);
    v20 = (_QWORD *)std::ostream::operator<<();
    v21 = sub_20E86A980(v20, (uint64_t)")", 1);
    sub_20E86A980(v21, (uint64_t)", ", 2);
    if ((char)v30 < 0)
      operator delete(__p[0]);
  }
  sub_20E86A980(&v31, (uint64_t)"\n", 1);
  if ((v42 & 0x10) != 0)
  {
    v23 = *((_QWORD *)&v41 + 1);
    if (*((_QWORD *)&v41 + 1) < v39)
    {
      *((_QWORD *)&v41 + 1) = v39;
      v23 = v39;
    }
    v24 = v38;
    v22 = v23 - (_QWORD)v38;
    if (v23 - (unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_35;
  }
  else
  {
    if ((v42 & 8) == 0)
    {
      v22 = 0;
      a3[23] = 0;
      goto LABEL_31;
    }
    v24 = v36;
    v22 = v37 - (_QWORD)v36;
    if ((unint64_t)(v37 - (_QWORD)v36) >= 0x7FFFFFFFFFFFFFF8)
LABEL_35:
      sub_20E860B7C();
  }
  if (v22 >= 0x17)
  {
    v25 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17)
      v25 = v22 | 7;
    v26 = v25 + 1;
    v27 = operator new(v25 + 1);
    *((_QWORD *)a3 + 1) = v22;
    *((_QWORD *)a3 + 2) = v26 | 0x8000000000000000;
    *(_QWORD *)a3 = v27;
    a3 = v27;
    goto LABEL_30;
  }
  a3[23] = v22;
  if (v22)
LABEL_30:
    memmove(a3, v24, v22);
LABEL_31:
  a3[v22] = 0;
  std::ostream::~ostream();
  __sb = v6 + 16;
  if (SBYTE7(v41) < 0)
    operator delete((void *)v40);
  return std::streambuf::~streambuf();
}

uint64_t sub_20F23197C(uint64_t a1)
{
  *(_QWORD *)a1 = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  return std::streambuf::~streambuf();
}

void sub_20F2319D0(_QWORD *a1)
{
  sub_20F23203C(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F2319F4(uint64_t *a1, __int128 *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v18;
  char *v19;

  v3 = 0xCF3CF3CF3CF3CF3DLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x186186186186186)
    sub_20E867F44();
  if (0x9E79E79E79E79E7ALL * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x9E79E79E79E79E7ALL * ((a1[2] - *a1) >> 3);
  if (0xCF3CF3CF3CF3CF3DLL * ((a1[2] - *a1) >> 3) >= 0xC30C30C30C30C3)
    v6 = 0x186186186186186;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x186186186186186)
      sub_20E877A38();
    v7 = (char *)operator new(168 * v6);
  }
  else
  {
    v7 = 0;
  }
  v18 = (uint64_t)&v7[168 * v3];
  v19 = &v7[168 * v6];
  sub_20EE6CA98(v18, a2);
  v8 = v18 + 168;
  v9 = (char *)*a1;
  v10 = (char *)a1[1];
  if (v10 == (char *)*a1)
  {
    *a1 = v18;
    a1[1] = v8;
    a1[2] = (uint64_t)v19;
    if (!v10)
      return v18 + 168;
    goto LABEL_17;
  }
  v11 = 0;
  do
  {
    v12 = v18 + v11;
    v13 = &v10[v11];
    v14 = *(_OWORD *)&v10[v11 - 168];
    v15 = *(_QWORD *)&v10[v11 - 136];
    *(_OWORD *)(v12 - 152) = *(_OWORD *)&v10[v11 - 152];
    *(_OWORD *)(v12 - 168) = v14;
    *(_QWORD *)(v12 - 136) = v15;
    *(_QWORD *)(v12 - 128) = 0;
    *(_QWORD *)(v12 - 120) = 0;
    *(_QWORD *)(v12 - 112) = 0;
    *(_OWORD *)(v12 - 128) = *(_OWORD *)&v10[v11 - 128];
    *(_QWORD *)(v12 - 112) = *(_QWORD *)&v10[v11 - 112];
    *((_QWORD *)v13 - 16) = 0;
    *((_QWORD *)v13 - 15) = 0;
    *((_QWORD *)v13 - 14) = 0;
    *(_QWORD *)(v12 - 104) = 0;
    *(_QWORD *)(v12 - 96) = 0;
    *(_QWORD *)(v12 - 88) = 0;
    *(_OWORD *)(v12 - 104) = *(_OWORD *)&v10[v11 - 104];
    *(_QWORD *)(v12 - 88) = *(_QWORD *)&v10[v11 - 88];
    *((_QWORD *)v13 - 13) = 0;
    *((_QWORD *)v13 - 12) = 0;
    *((_QWORD *)v13 - 11) = 0;
    *(_QWORD *)(v12 - 80) = 0;
    *(_QWORD *)(v12 - 72) = 0;
    *(_QWORD *)(v12 - 64) = 0;
    *(_OWORD *)(v12 - 80) = *(_OWORD *)&v10[v11 - 80];
    *(_QWORD *)(v12 - 64) = *(_QWORD *)&v10[v11 - 64];
    *((_QWORD *)v13 - 10) = 0;
    *((_QWORD *)v13 - 9) = 0;
    *((_QWORD *)v13 - 8) = 0;
    *(_QWORD *)(v12 - 56) = 0;
    *(_QWORD *)(v12 - 48) = 0;
    *(_QWORD *)(v12 - 40) = 0;
    *(_OWORD *)(v12 - 56) = *(_OWORD *)&v10[v11 - 56];
    *(_QWORD *)(v12 - 40) = *(_QWORD *)&v10[v11 - 40];
    *((_QWORD *)v13 - 7) = 0;
    *((_QWORD *)v13 - 6) = 0;
    *((_QWORD *)v13 - 5) = 0;
    *(_QWORD *)(v12 - 32) = 0;
    *(_QWORD *)(v12 - 24) = 0;
    *(_QWORD *)(v12 - 16) = 0;
    *(_OWORD *)(v12 - 32) = *(_OWORD *)&v10[v11 - 32];
    *(_QWORD *)(v12 - 16) = *(_QWORD *)&v10[v11 - 16];
    *((_QWORD *)v13 - 4) = 0;
    *((_QWORD *)v13 - 3) = 0;
    *((_QWORD *)v13 - 2) = 0;
    *(_WORD *)(v12 - 8) = *(_WORD *)&v10[v11 - 8];
    v11 -= 168;
  }
  while (&v10[v11] != v9);
  v10 = (char *)*a1;
  v16 = (char *)a1[1];
  *a1 = v18 + v11;
  a1[1] = v8;
  for (a1[2] = (uint64_t)v19; v16 != v10; v16 = (char *)sub_20E991548((_QWORD *)v16 - 21))
    ;
  if (v10)
LABEL_17:
    operator delete(v10);
  return v18 + 168;
}

void sub_20F231C24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20F231C38((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20F231C38(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 168;
    sub_20E991548((_QWORD *)(i - 168));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char *sub_20F231C88(char **a1, __int128 *a2, __int128 *a3)
{
  __int128 *v4;
  char *result;
  char *v7;
  _QWORD *v8;
  char *v9;
  char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char v20;
  _QWORD *v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  char v38;

  v4 = a2;
  result = a1[2];
  v7 = *a1;
  if (result == *a1)
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    result = (char *)operator new(0x1D8uLL);
    v7 = result;
    *a1 = result;
    a1[1] = result;
    v21 = a1 + 1;
    a1[2] = result + 472;
    v22 = result;
    if (v4 != a3)
    {
      v22 = result;
      do
      {
        v23 = v4[1];
        *(_OWORD *)v22 = *v4;
        *((_OWORD *)v22 + 1) = v23;
        *(_OWORD *)(v22 + 28) = *(__int128 *)((char *)v4 + 28);
        v24 = v4[8];
        *((_OWORD *)v22 + 7) = v4[7];
        *((_OWORD *)v22 + 8) = v24;
        v25 = v4[10];
        *((_OWORD *)v22 + 9) = v4[9];
        *((_OWORD *)v22 + 10) = v25;
        v26 = v4[4];
        *((_OWORD *)v22 + 3) = v4[3];
        *((_OWORD *)v22 + 4) = v26;
        v27 = v4[6];
        *((_OWORD *)v22 + 5) = v4[5];
        *((_OWORD *)v22 + 6) = v27;
        result = (char *)memcpy(v22 + 176, v4 + 11, 0x120uLL);
        *((_DWORD *)v22 + 116) = *((_DWORD *)v4 + 116);
        v22[468] = *((_BYTE *)v4 + 468);
        v22 += 472;
        v4 = (__int128 *)((char *)v4 + 472);
      }
      while (v4 != a3);
    }
    v28 = v22 - v7;
    v8 = v21;
  }
  else
  {
    v9 = a1[1];
    v8 = a1 + 1;
    v10 = v7;
    if (v9 == v7)
    {
      if (a2 != a3)
      {
        v29 = v7;
        do
        {
          v30 = *v4;
          v31 = v4[1];
          *(_OWORD *)(v29 + 28) = *(__int128 *)((char *)v4 + 28);
          *(_OWORD *)v29 = v30;
          *((_OWORD *)v29 + 1) = v31;
          v32 = v4[10];
          v34 = v4[7];
          v33 = v4[8];
          *((_OWORD *)v29 + 9) = v4[9];
          *((_OWORD *)v29 + 10) = v32;
          *((_OWORD *)v29 + 7) = v34;
          *((_OWORD *)v29 + 8) = v33;
          v35 = v4[3];
          v36 = v4[4];
          v37 = v4[6];
          *((_OWORD *)v29 + 5) = v4[5];
          *((_OWORD *)v29 + 6) = v37;
          *((_OWORD *)v29 + 3) = v35;
          *((_OWORD *)v29 + 4) = v36;
          result = (char *)memcpy(v29 + 176, v4 + 11, 0x120uLL);
          v38 = *((_BYTE *)v4 + 468);
          *((_DWORD *)v29 + 116) = *((_DWORD *)v4 + 116);
          v29[468] = v38;
          v10 += 472;
          v4 = (__int128 *)((char *)v4 + 472);
          v29 += 472;
        }
        while (v4 != a3);
      }
    }
    else if (a2 != a3)
    {
      v11 = v7;
      do
      {
        v12 = *v4;
        v13 = v4[1];
        *(_OWORD *)(v11 + 28) = *(__int128 *)((char *)v4 + 28);
        *(_OWORD *)v11 = v12;
        *((_OWORD *)v11 + 1) = v13;
        v14 = v4[10];
        v16 = v4[7];
        v15 = v4[8];
        *((_OWORD *)v11 + 9) = v4[9];
        *((_OWORD *)v11 + 10) = v14;
        *((_OWORD *)v11 + 7) = v16;
        *((_OWORD *)v11 + 8) = v15;
        v17 = v4[3];
        v18 = v4[4];
        v19 = v4[6];
        *((_OWORD *)v11 + 5) = v4[5];
        *((_OWORD *)v11 + 6) = v19;
        *((_OWORD *)v11 + 3) = v17;
        *((_OWORD *)v11 + 4) = v18;
        result = (char *)memcpy(v11 + 176, v4 + 11, 0x120uLL);
        v20 = *((_BYTE *)v4 + 468);
        *((_DWORD *)v11 + 116) = *((_DWORD *)v4 + 116);
        v11[468] = v20;
        v10 += 472;
        v4 = (__int128 *)((char *)v4 + 472);
        v11 += 472;
      }
      while (v4 != a3);
    }
    v28 = v10 - v7;
  }
  *v8 = &v7[v28];
  return result;
}

uint64_t sub_20F231E7C(_QWORD *a1, uint64_t *a2)
{
  unint64_t v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  _QWORD *v16;
  uint64_t *v17;
  unint64_t v18;
  unsigned int v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;

  v2 = *a2;
  v3 = (int8x8_t)a1[1];
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = *a2;
      if (v2 >= *(_QWORD *)&v3)
        v5 = v2 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & v2;
    }
    v6 = *(_QWORD **)(*a1 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v2 == v10)
            {
              if (v7[2] == v2)
                goto LABEL_29;
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v2 == v9)
          {
            if (v7[2] == v2)
            {
LABEL_29:
              v16 = (_QWORD *)(**(_QWORD **)(v7[5] + 424) + 56);
              v17 = (uint64_t *)*v16;
              if (*v16)
              {
                v18 = a2[1];
                v19 = *((_DWORD *)a2 + 4);
                v20 = v16;
                do
                {
                  v21 = v17[4];
                  if (v21 < v18)
                  {
                    ++v17;
                  }
                  else if (v21 == v18)
                  {
                    if (*((_DWORD *)v17 + 10) < v19)
                      ++v17;
                    else
                      v20 = v17;
                  }
                  else
                  {
                    v20 = v17;
                  }
                  v17 = (uint64_t *)*v17;
                }
                while (v17);
                if (v20 != v16)
                {
                  v22 = v20[4];
                  if (v18 >= v22 && (v18 != v22 || *((_DWORD *)v20 + 10) <= v19))
                  {
                    if (v20[6])
                      return 0;
                  }
                }
              }
              return 1;
            }
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = a1[10];
  v12 = *(_QWORD *)(v11 + 2824);
  v13 = *(_QWORD *)(v11 + 2832);
  if (v12 != v13)
  {
    while (1)
    {
      v14 = *(_QWORD *)(v12 + 16);
      if (v14)
      {
        if (*(_QWORD *)(v14 + 160) == v2)
          break;
      }
      v12 += 4472;
      if (v12 == v13)
        return 0;
    }
  }
  result = 0;
  if (v12 != v13 && v12)
    return 1;
  return result;
}

_QWORD *sub_20F23203C(_QWORD *a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;

  *a1 = off_24C9FBD00;
  v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  v3 = (_QWORD *)a1[7];
  if (v3)
  {
    v4 = (_QWORD *)a1[8];
    v5 = (void *)a1[7];
    if (v4 != v3)
    {
      do
        v4 = sub_20E991548(v4 - 21);
      while (v4 != v3);
      v5 = (void *)a1[7];
    }
    a1[8] = v3;
    operator delete(v5);
  }
  v6 = a1[4];
  if (v6)
  {
    v7 = a1[5];
    v8 = (void *)a1[4];
    if (v7 == v6)
    {
LABEL_18:
      a1[5] = v6;
      operator delete(v8);
      goto LABEL_19;
    }
    while (1)
    {
      v11 = v7 - 32;
      v9 = *(_QWORD **)(v7 - 8);
      if ((_QWORD *)(v7 - 32) == v9)
      {
        v9 = (_QWORD *)(v7 - 32);
        v10 = 4;
      }
      else
      {
        if (!v9)
          goto LABEL_13;
        v10 = 5;
      }
      (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_13:
      v7 = v11;
      if (v11 == v6)
      {
        v8 = (void *)a1[4];
        goto LABEL_18;
      }
    }
  }
LABEL_19:
  v12 = a1[1];
  if (v12)
  {
    v13 = a1[2];
    v14 = (void *)a1[1];
    if (v13 != v12)
    {
      do
      {
        v15 = *(void **)(v13 - 40);
        if (v15)
        {
          *(_QWORD *)(v13 - 32) = v15;
          operator delete(v15);
        }
        v13 -= 112;
      }
      while (v13 != v12);
      v14 = (void *)a1[1];
    }
    a1[2] = v12;
    operator delete(v14);
  }
  return a1;
}

void sub_20F23216C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  unint64_t v6;
  char *i;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  char v14;
  char v15;
  __int128 v17;
  __int128 v18;
  _BYTE *v19;
  _BYTE *v20;
  int64_t v21;
  char *v22;
  char *v23;
  char v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  __int128 v32;
  char *v33;
  char *v34;
  __int128 v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  char *v42;
  void *v43;
  uint64_t v44;
  unsigned __int8 v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  _BYTE *v50;
  uint64_t v51;
  size_t v52;
  void **v53;
  unint64_t v54;
  const void **v55;
  const void *v56;
  uint64_t v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  size_t v62;
  const char *v63;
  unsigned __int8 v64;
  const char *v65;
  size_t v66;
  _BYTE *v67;
  uint64_t v68;
  unint64_t v69;
  const char *v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void **v75;
  uint64_t v76;
  uint64_t v77;
  NSObject *v78;
  size_t v79;
  std::__shared_weak_count_vtbl *v80;
  std::__shared_weak_count *v81;
  size_t v82;
  size_t v83;
  _QWORD *v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  char v89;
  _QWORD *v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *p_shared_owners;
  unint64_t v94;
  void *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  _QWORD *v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  const char *v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  uint64_t v137;
  const char *v139;
  _QWORD v140[3];
  int v141;
  const char *v142;
  int v143;
  const char *v144;
  uint64_t v145;
  std::__shared_weak_count *v146;
  void *__dst[2];
  int64_t v148;
  void *v149[2];
  __int128 v150;
  __int128 v151;
  _BYTE v152[21];
  unint64_t v153;
  uint64_t v154;
  void *__p;
  char v156;
  unint64_t v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  __int128 v161;
  std::__shared_weak_count *v162;
  char *v163;
  std::__shared_weak_count *v164;
  _QWORD *v165;
  __int128 v166;
  _BYTE v167[24];
  __int128 v168;
  void *v169[2];
  unint64_t v170;
  char v171;
  _QWORD v172[5];

  v172[2] = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 115))
    return;
  v5 = *(char **)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  i = v5;
  if (v5 != (char *)v6)
  {
    v8 = *(_DWORD *)(a2 + 24);
    if (*(_BYTE *)(a2 + 56))
    {
      v9 = *(_QWORD *)(a2 + 32);
      if (*(_BYTE *)(a2 + 68))
      {
        for (i = *(char **)(a1 + 8); i != (char *)v6; i += 112)
        {
          v10 = i[56];
          if (i[56])
            v10 = *((_QWORD *)i + 4) == v9;
          v11 = i[68];
          if (i[68])
            v11 = *((_DWORD *)i + 16) == *(_DWORD *)(a2 + 64);
          if (*((_DWORD *)i + 6) == v8
            && *((_QWORD *)i + 1) == *(_QWORD *)(a2 + 8)
            && (v10 & v11) == 1
            && *((_DWORD *)i + 4) == *(_DWORD *)(a2 + 16))
          {
            break;
          }
        }
      }
      else
      {
        i = *(char **)(a1 + 8);
        while (1)
        {
          v14 = i[56];
          if (v14)
            v14 = *((_QWORD *)i + 4) == v9;
          if (*((_DWORD *)i + 6) == v8 && *((_QWORD *)i + 1) == *(_QWORD *)(a2 + 8))
          {
            v15 = v14 ^ 1;
            if (i[68])
              v15 = 1;
            if ((v15 & 1) == 0 && *((_DWORD *)i + 4) == *(_DWORD *)(a2 + 16))
              break;
          }
          i += 112;
          if (i == (char *)v6)
            goto LABEL_52;
        }
      }
    }
    else if (*(_BYTE *)(a2 + 68))
    {
      i = *(char **)(a1 + 8);
      while (1)
      {
        v12 = i[68];
        if (i[68])
          v12 = *((_DWORD *)i + 16) == *(_DWORD *)(a2 + 64);
        if (*((_DWORD *)i + 6) == v8 && *((_QWORD *)i + 1) == *(_QWORD *)(a2 + 8))
        {
          if (i[56])
            v12 = 0;
          if (v12 == 1 && *((_DWORD *)i + 4) == *(_DWORD *)(a2 + 16))
            break;
        }
        i += 112;
        if (i == (char *)v6)
          goto LABEL_52;
      }
    }
    else
    {
      i = *(char **)(a1 + 8);
      while (*((_DWORD *)i + 6) != v8
           || *((_QWORD *)i + 1) != *(_QWORD *)(a2 + 8)
           || i[68] | i[56]
           || *((_DWORD *)i + 4) != *(_DWORD *)(a2 + 16))
      {
        i += 112;
        if (i == (char *)v6)
          goto LABEL_52;
      }
    }
  }
  if (i != (char *)v6)
    return;
LABEL_52:
  v17 = *(_OWORD *)(a2 + 48);
  v151 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)v152 = v17;
  *(_QWORD *)&v152[13] = *(_QWORD *)(a2 + 61);
  v18 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v149 = *(_OWORD *)a2;
  v150 = v18;
  v154 = 0;
  __p = 0;
  v153 = 0;
  v20 = *(_BYTE **)(a2 + 72);
  v19 = *(_BYTE **)(a2 + 80);
  v21 = v19 - v20;
  if (v19 == v20)
  {
    v23 = 0;
    v22 = 0;
    v24 = *(_BYTE *)(a2 + 96);
    v25 = *(_QWORD *)(a1 + 24);
    if (v6 < v25)
    {
LABEL_55:
      memmove((void *)v6, (const void *)a2, 0x45uLL);
      *(_QWORD *)(v6 + 72) = v22;
      *(_QWORD *)(v6 + 80) = v23;
      *(_QWORD *)(v6 + 88) = v23;
      *(_BYTE *)(v6 + 96) = v24;
      v26 = (char *)(v6 + 112);
      *(_BYTE *)(v6 + 104) = 1;
      v27 = a3;
      goto LABEL_75;
    }
  }
  else
  {
    if (0xAAAAAAAAAAAAAAABLL * (v21 >> 3) >= 0xAAAAAAAAAAAAAABLL)
      sub_20E867F44();
    v22 = (char *)operator new(v21);
    v23 = &v22[8 * (v21 >> 3)];
    memcpy(v22, v20, v21 - 4);
    v24 = *(_BYTE *)(a2 + 96);
    v25 = *(_QWORD *)(a1 + 24);
    if (v6 < v25)
      goto LABEL_55;
  }
  v28 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v6 - (_QWORD)v5) >> 4) + 1;
  if (v28 > 0x249249249249249)
    sub_20E867F44();
  v29 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v25 - (_QWORD)v5) >> 4);
  if (2 * v29 > v28)
    v28 = 2 * v29;
  if (v29 >= 0x124924924924924)
    v30 = 0x249249249249249;
  else
    v30 = v28;
  if (v30 > 0x249249249249249)
    sub_20E877A38();
  v31 = (char *)operator new(112 * v30);
  v32 = *(_OWORD *)(a2 + 48);
  v33 = &v31[16 * ((uint64_t)(v6 - (_QWORD)v5) >> 4)];
  *((_OWORD *)v33 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v33 + 3) = v32;
  v34 = &v31[112 * v30];
  *(_QWORD *)(v33 + 61) = *(_QWORD *)(a2 + 61);
  v35 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v33 = *(_OWORD *)a2;
  *((_OWORD *)v33 + 1) = v35;
  *((_QWORD *)v33 + 9) = v22;
  *((_QWORD *)v33 + 10) = v23;
  *((_QWORD *)v33 + 11) = v23;
  v154 = 0;
  __p = 0;
  v153 = 0;
  v33[96] = v24;
  v26 = v33 + 112;
  v33[104] = 1;
  if (v5 == (char *)v6)
  {
    *(_QWORD *)(a1 + 8) = v33;
    *(_QWORD *)(a1 + 16) = v26;
    *(_QWORD *)(a1 + 24) = v34;
    v27 = a3;
  }
  else
  {
    v36 = 0;
    v27 = a3;
    do
    {
      v37 = &v33[v36];
      v38 = v6 + v36;
      *((_OWORD *)v37 - 7) = *(_OWORD *)(v6 + v36 - 112);
      v39 = *(_OWORD *)(v6 + v36 - 96);
      v40 = *(_OWORD *)(v6 + v36 - 80);
      v41 = *(_OWORD *)(v6 + v36 - 64);
      *(_QWORD *)(v37 - 51) = *(_QWORD *)(v6 + v36 - 51);
      *((_OWORD *)v37 - 5) = v40;
      *((_OWORD *)v37 - 4) = v41;
      *((_OWORD *)v37 - 6) = v39;
      *(_OWORD *)(v37 - 40) = *(_OWORD *)(v6 + v36 - 40);
      *((_QWORD *)v37 - 3) = *(_QWORD *)(v6 + v36 - 24);
      *(_QWORD *)(v38 - 32) = 0;
      *(_QWORD *)(v38 - 24) = 0;
      *(_QWORD *)(v38 - 40) = 0;
      *(v37 - 16) = *(_BYTE *)(v6 + v36 - 16);
      *(v37 - 8) = *(_BYTE *)(v6 + v36 - 8);
      v36 -= 112;
    }
    while ((char *)(v6 + v36) != v5);
    v5 = *(char **)(a1 + 8);
    v42 = *(char **)(a1 + 16);
    *(_QWORD *)(a1 + 8) = &v33[v36];
    *(_QWORD *)(a1 + 16) = v26;
    *(_QWORD *)(a1 + 24) = v34;
    while (v42 != v5)
    {
      v43 = (void *)*((_QWORD *)v42 - 5);
      if (v43)
      {
        *((_QWORD *)v42 - 4) = v43;
        operator delete(v43);
      }
      v42 -= 112;
    }
  }
  if (v5)
    operator delete(v5);
LABEL_75:
  *(_QWORD *)(a1 + 16) = v26;
  v44 = *(unsigned __int8 *)(v27 + 23);
  if ((v44 & 0x80u) != 0)
    v44 = *(_QWORD *)(v27 + 8);
  if (v44)
  {
    v45 = atomic_load((unsigned __int8 *)&qword_254A687A8);
    if ((v45 & 1) == 0 && __cxa_guard_acquire(&qword_254A687A8))
    {
      sub_21021D3D8(v167);
      sub_20E8610C0(v149, "cv3d.vio.area_mapping");
      sub_20E8C4068((uint64_t **)v167, (uint64_t)v149, &qword_254A687A0);
      if (SBYTE7(v150) < 0)
        operator delete(v149[0]);
      __cxa_guard_release(&qword_254A687A8);
    }
    v160 = qword_254A687A0;
    if (**(int **)(qword_254A687A0 + 56) <= 2)
    {
      v46 = *(unsigned __int8 *)(qword_254A687A0 + 72);
      v47 = sub_20E8C31DC(qword_254A687A0, "OSLogSurrogateAppender", 1, 0);
      v48 = v47;
      if (v46 || v47 != 0)
      {
        sub_20E863438((uint64_t)v149);
        (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(v167, a1, v27);
        if (v167[23] >= 0)
          v50 = v167;
        else
          v50 = *(_BYTE **)v167;
        if (v167[23] >= 0)
          v51 = v167[23];
        else
          v51 = *(_QWORD *)&v167[8];
        sub_20E86A980(&v150, (uint64_t)v50, v51);
        if ((v167[23] & 0x80000000) != 0)
          operator delete(*(void **)v167);
        if ((v158 & 0x10) != 0)
        {
          v54 = v157;
          if (v157 < v153)
          {
            v157 = v153;
            v54 = v153;
          }
          v55 = (const void **)&v152[16];
        }
        else
        {
          if ((v158 & 8) == 0)
          {
            v52 = 0;
            HIBYTE(v148) = 0;
            v53 = __dst;
            goto LABEL_107;
          }
          v55 = (const void **)&v151 + 1;
          v54 = *(_QWORD *)&v152[8];
        }
        v56 = *v55;
        v52 = v54 - (_QWORD)*v55;
        if (v52 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v52 >= 0x17)
        {
          v57 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v52 | 7) != 0x17)
            v57 = v52 | 7;
          v58 = v57 + 1;
          v53 = (void **)operator new(v57 + 1);
          __dst[1] = (void *)v52;
          v148 = v58 | 0x8000000000000000;
          __dst[0] = v53;
        }
        else
        {
          HIBYTE(v148) = v54 - *(_BYTE *)v55;
          v53 = __dst;
          if (!v52)
          {
LABEL_107:
            *((_BYTE *)v53 + v52) = 0;
            v140[0] = &v160;
            v140[1] = std::chrono::steady_clock::now().__d_.__rep_;
            v140[2] = std::chrono::system_clock::now().__d_.__rep_;
            v141 = 2;
            v142 = "unknown file";
            v143 = 78;
            v145 = 0;
            v146 = 0;
            v144 = "unknown function";
            if (v148 >= 0)
              v59 = (const char *)__dst;
            else
              v59 = (const char *)__dst[0];
            v60 = *(_QWORD *)v140[0];
            v61 = *(_QWORD *)v140[0] + 16;
            if (*(char *)(*(_QWORD *)v140[0] + 39) < 0)
            {
              v63 = *(const char **)(v60 + 16);
              v62 = *(_QWORD *)(v60 + 24);
            }
            else
            {
              v62 = *(unsigned __int8 *)(*(_QWORD *)v140[0] + 39);
              v63 = (const char *)(*(_QWORD *)v140[0] + 16);
            }
            v64 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v64 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)v167);
              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v167);
              if ((_BYTE)v168 && (v167[23] & 0x80000000) != 0)
                operator delete(*(void **)v167);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
            }
            if (byte_254A4A4F8[23] >= 0)
              v65 = byte_254A4A4F8;
            else
              v65 = *(const char **)byte_254A4A4F8;
            if (byte_254A4A4F8[23] >= 0)
              v66 = byte_254A4A4F8[23];
            else
              v66 = *(_QWORD *)&byte_254A4A4F8[8];
            *(_QWORD *)v167 = os_log_create(v65, v63);
            v67 = &v167[8];
            if (v66 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v66 >= 0x17)
            {
              v139 = v63;
              v68 = v60;
              v69 = v48;
              v70 = v59;
              v71 = v46;
              v72 = v61;
              v73 = (v66 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v66 | 7) != 0x17)
                v73 = v66 | 7;
              v74 = v73 + 1;
              v67 = operator new(v73 + 1);
              *(_QWORD *)&v167[16] = v66;
              *(_QWORD *)&v168 = v74 | 0x8000000000000000;
              *(_QWORD *)&v167[8] = v67;
              v61 = v72;
              v46 = v71;
              v59 = v70;
              v48 = v69;
              v60 = v68;
              v63 = v139;
            }
            else
            {
              BYTE7(v168) = v66;
              if (!v66)
              {
LABEL_128:
                v67[v66] = 0;
                BYTE8(v168) = 1;
                v75 = v169;
                if (v62 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                if (v62 >= 0x17)
                {
                  v76 = (v62 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v62 | 7) != 0x17)
                    v76 = v62 | 7;
                  v77 = v76 + 1;
                  v75 = (void **)operator new(v76 + 1);
                  v169[1] = (void *)v62;
                  v170 = v77 | 0x8000000000000000;
                  v169[0] = v75;
                }
                else
                {
                  HIBYTE(v170) = v62;
                  if (!v62)
                  {
LABEL_136:
                    *((_BYTE *)v75 + v62) = 0;
                    v171 = 1;
                    v78 = *(NSObject **)v167;
                    if (SHIBYTE(v170) < 0)
                      operator delete(v169[0]);
                    if (BYTE8(v168) && SBYTE7(v168) < 0)
                      operator delete(*(void **)&v167[8]);
                    if (*(_QWORD *)v167)
                      os_release(*(void **)v167);
                    if (!v48 || !*(_QWORD *)(v48 + 24))
                    {
                      os_log_type_enabled(v78, OS_LOG_TYPE_DEBUG);
                      *(_DWORD *)v167 = 136315138;
                      *(_QWORD *)&v167[4] = v59;
                      v85 = (void *)_os_log_send_and_compose_impl();
                      if (v85)
                        free(v85);
                      goto LABEL_215;
                    }
                    v79 = _os_log_pack_size();
                    v80 = (std::__shared_weak_count_vtbl *)operator new(v79, (std::align_val_t)8uLL);
                    v81 = (std::__shared_weak_count *)operator new();
                    v81->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                    v81->__shared_owners_ = 0;
                    v81->__shared_weak_owners_ = 0;
                    v81[1].__vftable = v80;
                    *(_QWORD *)&v161 = v80;
                    *((_QWORD *)&v161 + 1) = v80;
                    v163 = 0;
                    v164 = 0;
                    v162 = v81;
                    v82 = strlen(v59);
                    if (v82 > 0x7FFFFFFFFFFFFFF7)
                      sub_20E860B7C();
                    v83 = v82;
                    if (v82 >= 0x17)
                    {
                      v86 = (v82 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v82 | 7) != 0x17)
                        v86 = v82 | 7;
                      v87 = v86 + 1;
                      v84 = operator new(v86 + 1);
                      *(_QWORD *)&v166 = v83;
                      *((_QWORD *)&v166 + 1) = v87 | 0x8000000000000000;
                      v165 = v84;
                    }
                    else
                    {
                      HIBYTE(v166) = v82;
                      v84 = &v165;
                      if (!v82)
                      {
LABEL_155:
                        *((_BYTE *)v84 + v83) = 0;
                        v88 = v165;
                        v172[0] = v166;
                        *(_QWORD *)((char *)v172 + 7) = *(_QWORD *)((char *)&v166 + 7);
                        v89 = HIBYTE(v166);
                        v90 = operator new(0x38uLL);
                        v90[1] = 0;
                        v90[2] = 0;
                        v90[3] = off_24C9ABC20;
                        *v90 = &off_24C9ABBD0;
                        v91 = v172[0];
                        v90[4] = v88;
                        v90[5] = v91;
                        *(_QWORD *)((char *)v90 + 47) = *(_QWORD *)((char *)v172 + 7);
                        *((_BYTE *)v90 + 55) = v89;
                        v172[0] = 0;
                        *(_QWORD *)((char *)v172 + 7) = 0;
                        v92 = v164;
                        v163 = (char *)(v90 + 3);
                        v164 = (std::__shared_weak_count *)v90;
                        if (v92)
                        {
                          p_shared_owners = (unint64_t *)&v92->__shared_owners_;
                          do
                            v94 = __ldaxr(p_shared_owners);
                          while (__stlxr(v94 - 1, p_shared_owners));
                          if (!v94)
                          {
                            ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                            std::__shared_weak_count::__release_weak(v92);
                          }
                        }
                        *(_OWORD *)v167 = v161;
                        v95 = v163;
                        *(_QWORD *)&v167[16] = v162;
                        if (v162)
                        {
                          v96 = (unint64_t *)&v162->__shared_owners_;
                          do
                            v97 = __ldxr(v96);
                          while (__stxr(v97 + 1, v96));
                        }
                        v98 = v164;
                        *(_QWORD *)&v168 = v95;
                        *((_QWORD *)&v168 + 1) = v164;
                        if (v164)
                        {
                          v99 = (unint64_t *)&v164->__shared_owners_;
                          do
                            v100 = __ldxr(v99);
                          while (__stxr(v100 + 1, v99));
                          v169[0] = v95;
                          do
                            v101 = __ldaxr(v99);
                          while (__stlxr(v101 - 1, v99));
                          if (!v101)
                          {
                            ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                            std::__shared_weak_count::__release_weak(v98);
                          }
                        }
                        else
                        {
                          v169[0] = v95;
                        }
                        v102 = v162;
                        if (v162)
                        {
                          v103 = (unint64_t *)&v162->__shared_owners_;
                          do
                            v104 = __ldaxr(v103);
                          while (__stlxr(v104 - 1, v103));
                          if (!v104)
                          {
                            ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                            std::__shared_weak_count::__release_weak(v102);
                          }
                        }
                        v105 = *(_QWORD *)v167;
                        if (*((char *)v169[0] + 31) >= 0)
                          v106 = (char *)v169[0] + 8;
                        else
                          v106 = (char *)*((_QWORD *)v169[0] + 1);
                        v107 = _os_log_pack_fill();
                        *(_DWORD *)v107 = 136315138;
                        *(_QWORD *)(v107 + 4) = v106;
                        v108 = operator new();
                        v109 = *(unsigned __int8 *)(v60 + 39);
                        v110 = *(_QWORD *)(v60 + 16);
                        v111 = *(_QWORD *)(v60 + 24);
                        v112 = v168;
                        *(_OWORD *)(v108 + 8) = *(_OWORD *)&v167[8];
                        if ((v109 & 0x80u) != 0)
                          v109 = v111;
                        else
                          v110 = v61;
                        *(_QWORD *)v108 = v105;
                        *(_QWORD *)&v167[8] = 0;
                        *(_QWORD *)&v167[16] = 0;
                        *(_OWORD *)(v108 + 24) = v112;
                        v168 = 0uLL;
                        *(_QWORD *)(v108 + 40) = v110;
                        *(_QWORD *)(v108 + 48) = v109;
                        *(_BYTE *)(v108 + 56) = 2;
                        v165 = 0;
                        *(_QWORD *)&v161 = v108;
                        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v48 + 24) + 40))(*(_QWORD *)(v48 + 24), &v161);
                        v113 = v161;
                        *(_QWORD *)&v161 = 0;
                        if (v113)
                        {
                          v114 = *(std::__shared_weak_count **)(v113 + 32);
                          if (v114)
                          {
                            v115 = (unint64_t *)&v114->__shared_owners_;
                            do
                              v116 = __ldaxr(v115);
                            while (__stlxr(v116 - 1, v115));
                            if (!v116)
                            {
                              ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
                              std::__shared_weak_count::__release_weak(v114);
                            }
                          }
                          v117 = *(std::__shared_weak_count **)(v113 + 16);
                          if (v117)
                          {
                            v118 = (unint64_t *)&v117->__shared_owners_;
                            do
                              v119 = __ldaxr(v118);
                            while (__stlxr(v119 - 1, v118));
                            if (!v119)
                            {
                              ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                              std::__shared_weak_count::__release_weak(v117);
                            }
                          }
                          MEMORY[0x212BC6398](v113, 0x10F0C40B62ED6C6);
                          v120 = v165;
                          v165 = 0;
                          if (v120)
                          {
                            v121 = (std::__shared_weak_count *)v120[4];
                            if (v121)
                            {
                              v122 = (unint64_t *)&v121->__shared_owners_;
                              do
                                v123 = __ldaxr(v122);
                              while (__stlxr(v123 - 1, v122));
                              if (!v123)
                              {
                                ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
                                std::__shared_weak_count::__release_weak(v121);
                              }
                            }
                            v124 = (std::__shared_weak_count *)v120[2];
                            if (v124)
                            {
                              v125 = (unint64_t *)&v124->__shared_owners_;
                              do
                                v126 = __ldaxr(v125);
                              while (__stlxr(v126 - 1, v125));
                              if (!v126)
                              {
                                ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
                                std::__shared_weak_count::__release_weak(v124);
                              }
                            }
                            MEMORY[0x212BC6398](v120, 0x10F0C40B62ED6C6);
                          }
                        }
                        v127 = (std::__shared_weak_count *)*((_QWORD *)&v168 + 1);
                        if (*((_QWORD *)&v168 + 1))
                        {
                          v128 = (unint64_t *)(*((_QWORD *)&v168 + 1) + 8);
                          do
                            v129 = __ldaxr(v128);
                          while (__stlxr(v129 - 1, v128));
                          if (!v129)
                          {
                            ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
                            std::__shared_weak_count::__release_weak(v127);
                          }
                        }
                        v130 = *(std::__shared_weak_count **)&v167[16];
                        if (*(_QWORD *)&v167[16])
                        {
                          v131 = (unint64_t *)(*(_QWORD *)&v167[16] + 8);
                          do
                            v132 = __ldaxr(v131);
                          while (__stlxr(v132 - 1, v131));
                          if (!v132)
                          {
                            ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
                            std::__shared_weak_count::__release_weak(v130);
                          }
                        }
LABEL_215:
                        if (v46)
                        {
                          v133 = (const char *)__dst;
                          if (v148 < 0)
                            v133 = (const char *)__dst[0];
                          sub_20E8C003C((uint64_t)v140, "%s", v133);
                          sub_20E863570((uint64_t)v140);
                        }
                        sub_20E863570((uint64_t)v140);
                        v134 = v146;
                        if (v146)
                        {
                          v135 = (unint64_t *)&v146->__shared_owners_;
                          do
                            v136 = __ldaxr(v135);
                          while (__stlxr(v136 - 1, v135));
                          if (!v136)
                          {
                            ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
                            std::__shared_weak_count::__release_weak(v134);
                          }
                        }
                        if (SHIBYTE(v148) < 0)
                          operator delete(__dst[0]);
                        v149[0] = *(void **)MEMORY[0x24BEDB7F0];
                        v137 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                        *(void **)((char *)v149 + *((_QWORD *)v149[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
                        *(_QWORD *)&v150 = v137;
                        *((_QWORD *)&v150 + 1) = MEMORY[0x24BEDB848] + 16;
                        if (v156 < 0)
                          operator delete(__p);
                        std::streambuf::~streambuf();
                        std::iostream::~basic_iostream();
                        MEMORY[0x212BC6290](&v159);
                        return;
                      }
                    }
                    memcpy(v84, v59, v83);
                    goto LABEL_155;
                  }
                }
                memmove(v75, v63, v62);
                goto LABEL_136;
              }
            }
            memmove(v67, v65, v66);
            goto LABEL_128;
          }
        }
        memmove(v53, v56, v52);
        goto LABEL_107;
      }
    }
  }
}

void sub_20F23309C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(_BYTE *)(v33 - 168) && *(char *)(v33 - 169) < 0)
    operator delete(*(void **)(v33 - 192));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a13);
  if (a27 < 0)
    operator delete(__p);
  sub_20E863784((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_20F233258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20F233284(_QWORD *a1)
{
  unsigned int i;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  void *v11;
  void *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t j;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t k;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  char v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  char v41;
  char v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _BOOL4 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  char v55;
  char v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  char *v64;
  char *v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _OWORD v69[2];

  (*(void (**)(_QWORD *))(*a1 + 24))(a1);
  if (*((_DWORD *)a1 + 29))
  {
    for (i = 0; i < *((_DWORD *)a1 + 29); ++i)
    {
      v3 = (*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
      if (a1[2] == v3)
        return;
      v4 = v3;
      (*(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t))(*a1 + 16))(&v63, a1, v3);
      if ((_BYTE)v63)
      {
        ++*((_DWORD *)a1 + 26);
        v5 = v4 + 112;
        v6 = a1[2];
        if (v4 + 112 != v6)
        {
          do
          {
            v9 = *(_OWORD *)(v4 + 160);
            *(_OWORD *)(v4 + 32) = *(_OWORD *)(v4 + 144);
            *(_OWORD *)(v4 + 48) = v9;
            *(_QWORD *)(v4 + 61) = *(_QWORD *)(v4 + 173);
            v10 = *(_OWORD *)(v4 + 128);
            *(_OWORD *)v4 = *(_OWORD *)(v4 + 112);
            *(_OWORD *)(v4 + 16) = v10;
            v11 = *(void **)(v4 + 72);
            if (v11)
            {
              *(_QWORD *)(v4 + 80) = v11;
              operator delete(v11);
              *(_QWORD *)(v4 + 80) = 0;
              *(_QWORD *)(v4 + 88) = 0;
            }
            *(_OWORD *)(v4 + 72) = *(_OWORD *)(v4 + 184);
            *(_QWORD *)(v4 + 88) = *(_QWORD *)(v4 + 200);
            *(_QWORD *)(v4 + 192) = 0;
            *(_QWORD *)(v4 + 200) = 0;
            *(_BYTE *)(v4 + 96) = *(_BYTE *)(v4 + 208);
            *(_BYTE *)(v4 + 104) = *(_BYTE *)(v4 + 216);
            v7 = v4 + 112;
            v8 = v4 + 224;
            *(_QWORD *)(v4 + 184) = 0;
            v4 += 112;
          }
          while (v8 != v6);
          v5 = a1[2];
          v4 = v7;
        }
        while (v5 != v4)
        {
          v12 = *(void **)(v5 - 40);
          if (v12)
          {
            *(_QWORD *)(v5 - 32) = v12;
            operator delete(v12);
          }
          v5 -= 112;
        }
        a1[2] = v4;
        v13 = v64;
        v14 = v65;
        if (v64 == v65)
          goto LABEL_41;
        ++*((_DWORD *)a1 + 27);
        if (!*((_BYTE *)a1 + 112) && a1[4] != a1[5])
        {
          do
          {
            v15 = a1[4];
            for (j = a1[5]; v15 != j; v15 += 32)
            {
              v17 = *(_QWORD *)(v15 + 24);
              if (!v17)
                sub_20E86D37C();
              (*(void (**)(uint64_t, char *))(*(_QWORD *)v17 + 48))(v17, v13);
            }
            v13 += 472;
          }
          while (v13 != v14);
        }
      }
      else
      {
        *(_BYTE *)(v4 + 104) = 0;
        v18 = v4 + 112;
        v19 = a1[2];
        if (v4 + 112 != v19)
        {
          v20 = 0;
          for (k = v4 + 112; ; k += 112)
          {
            v22 = *(_OWORD *)(k - 64);
            v68 = *(_OWORD *)(k - 80);
            v69[0] = v22;
            *(_QWORD *)((char *)v69 + 13) = *(_QWORD *)(k - 51);
            v23 = *(_OWORD *)(k - 96);
            v66 = *(_OWORD *)(k - 112);
            v67 = v23;
            v24 = *(_QWORD *)(k - 24);
            v25 = *(_OWORD *)(k - 40);
            *(_QWORD *)(k - 32) = 0;
            *(_QWORD *)(k - 24) = 0;
            *(_QWORD *)(k - 40) = 0;
            v26 = *(_BYTE *)(k - 16);
            v27 = *(_OWORD *)k;
            v28 = *(_OWORD *)(k + 16);
            v29 = *(_OWORD *)(k + 32);
            v30 = *(_OWORD *)(k + 48);
            *(_QWORD *)(k - 51) = *(_QWORD *)(k + 61);
            *(_OWORD *)(k - 80) = v29;
            *(_OWORD *)(k - 64) = v30;
            *(_OWORD *)(k - 112) = v27;
            *(_OWORD *)(k - 96) = v28;
            *(_OWORD *)(k - 40) = *(_OWORD *)(k + 72);
            *(_QWORD *)(k - 24) = *(_QWORD *)(k + 88);
            *(_BYTE *)(k - 16) = *(_BYTE *)(k + 96);
            *(_BYTE *)(k - 8) = *(_BYTE *)(k + 104);
            v31 = v66;
            v32 = v67;
            v33 = v68;
            v34 = v69[0];
            *(_QWORD *)(k + 61) = *(_QWORD *)((char *)v69 + 13);
            *(_OWORD *)(k + 32) = v33;
            *(_OWORD *)(k + 48) = v34;
            *(_OWORD *)k = v31;
            *(_OWORD *)(k + 16) = v32;
            *(_OWORD *)(k + 72) = v25;
            *(_QWORD *)(k + 88) = v24;
            *(_BYTE *)(k + 96) = v26;
            *(_BYTE *)(k + 104) = v20;
            if (k + 112 == v19)
              break;
            if (k == v18)
              v18 = k + 112;
            v20 = *(_BYTE *)(k + 104);
          }
          if (k != v18)
          {
            v35 = v18;
            while (1)
            {
              v66 = *(_OWORD *)k;
              v36 = *(_OWORD *)(k + 16);
              v37 = *(_OWORD *)(k + 32);
              v38 = *(_OWORD *)(k + 48);
              *(_QWORD *)((char *)v69 + 13) = *(_QWORD *)(k + 61);
              v68 = v37;
              v69[0] = v38;
              v67 = v36;
              v39 = *(_QWORD *)(k + 88);
              v40 = *(_OWORD *)(k + 72);
              *(_QWORD *)(k + 80) = 0;
              *(_QWORD *)(k + 88) = 0;
              *(_QWORD *)(k + 72) = 0;
              v41 = *(_BYTE *)(k + 96);
              v42 = *(_BYTE *)(k + 104);
              *(_OWORD *)k = *(_OWORD *)v35;
              v44 = *(_OWORD *)(v35 + 32);
              v43 = *(_OWORD *)(v35 + 48);
              v45 = *(_OWORD *)(v35 + 16);
              *(_QWORD *)(k + 61) = *(_QWORD *)(v35 + 61);
              *(_OWORD *)(k + 32) = v44;
              *(_OWORD *)(k + 48) = v43;
              *(_OWORD *)(k + 16) = v45;
              *(_OWORD *)(k + 72) = *(_OWORD *)(v35 + 72);
              *(_QWORD *)(k + 88) = *(_QWORD *)(v35 + 88);
              *(_BYTE *)(k + 96) = *(_BYTE *)(v35 + 96);
              *(_BYTE *)(k + 104) = *(_BYTE *)(v35 + 104);
              v47 = v68;
              v46 = v69[0];
              v48 = v67;
              *(_QWORD *)(v35 + 61) = *(_QWORD *)((char *)v69 + 13);
              *(_OWORD *)(v35 + 32) = v47;
              *(_OWORD *)(v35 + 48) = v46;
              *(_OWORD *)(v35 + 16) = v48;
              *(_OWORD *)v35 = v66;
              *(_OWORD *)(v35 + 72) = v40;
              *(_QWORD *)(v35 + 88) = v39;
              *(_BYTE *)(v35 + 96) = v41;
              *(_BYTE *)(v35 + 104) = v42;
              k += 112;
              v35 += 112;
              v49 = k == v18;
              if (v35 == v19)
              {
                if (k == v18)
                  break;
                v35 = v18 + 112;
                while (1)
                {
                  v66 = *(_OWORD *)k;
                  v50 = *(_OWORD *)(k + 16);
                  v51 = *(_OWORD *)(k + 32);
                  v52 = *(_OWORD *)(k + 48);
                  *(_QWORD *)((char *)v69 + 13) = *(_QWORD *)(k + 61);
                  v68 = v51;
                  v69[0] = v52;
                  v67 = v50;
                  v53 = *(_QWORD *)(k + 88);
                  v54 = *(_OWORD *)(k + 72);
                  *(_QWORD *)(k + 72) = 0;
                  *(_QWORD *)(k + 80) = 0;
                  *(_QWORD *)(k + 88) = 0;
                  v55 = *(_BYTE *)(k + 96);
                  v56 = *(_BYTE *)(k + 104);
                  *(_OWORD *)k = *(_OWORD *)v18;
                  v58 = *(_OWORD *)(v18 + 32);
                  v57 = *(_OWORD *)(v18 + 48);
                  v59 = *(_OWORD *)(v18 + 16);
                  *(_QWORD *)(k + 61) = *(_QWORD *)(v18 + 61);
                  *(_OWORD *)(k + 32) = v58;
                  *(_OWORD *)(k + 48) = v57;
                  *(_OWORD *)(k + 16) = v59;
                  *(_OWORD *)(k + 72) = *(_OWORD *)(v18 + 72);
                  *(_QWORD *)(k + 88) = *(_QWORD *)(v18 + 88);
                  *(_BYTE *)(k + 96) = *(_BYTE *)(v18 + 96);
                  *(_BYTE *)(k + 104) = *(_BYTE *)(v18 + 104);
                  *(_OWORD *)v18 = v66;
                  v60 = v67;
                  v61 = v68;
                  v62 = v69[0];
                  *(_QWORD *)(v18 + 61) = *(_QWORD *)((char *)v69 + 13);
                  *(_OWORD *)(v18 + 32) = v61;
                  *(_OWORD *)(v18 + 48) = v62;
                  *(_OWORD *)(v18 + 16) = v60;
                  *(_OWORD *)(v18 + 72) = v54;
                  *(_QWORD *)(v18 + 88) = v53;
                  *(_BYTE *)(v18 + 96) = v55;
                  *(_BYTE *)(v18 + 104) = v56;
                  k += 112;
                  v49 = k == v18;
                  if (v35 != v19)
                    break;
                  if (k == v18)
                    goto LABEL_40;
                }
              }
              if (v49)
                v18 = v35;
            }
          }
        }
      }
LABEL_40:
      v13 = v64;
LABEL_41:
      if (v13)
      {
        v65 = v13;
        operator delete(v13);
      }
    }
  }
}

void sub_20F2336E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F233700(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  if (result != v3)
  {
    while (!*(_BYTE *)(result + 104))
    {
      result += 112;
      if (result == v3)
        return v3;
    }
  }
  return result;
}

void *sub_20F233734@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  void *result;

  if (*(char *)(a1 + 23) < 0)
    return sub_20E860C04((_BYTE *)a2, *(void **)a1, *(_QWORD *)(a1 + 8));
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
  return result;
}

uint64_t sub_20F233760(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v23;
  __int128 v24;

  v2 = (a1[1] - *a1) >> 5;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 59)
    sub_20E867F44();
  v6 = a1[2] - *a1;
  if (v6 >> 4 > v3)
    v3 = v6 >> 4;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0)
    v7 = 0x7FFFFFFFFFFFFFFLL;
  else
    v7 = v3;
  if (v7)
  {
    if (v7 >> 59)
      sub_20E877A38();
    v8 = (char *)operator new(32 * v7);
    v9 = (uint64_t)&v8[32 * v2];
    v23 = v9;
    *(_QWORD *)&v24 = v9;
    *((_QWORD *)&v24 + 1) = &v8[32 * v7];
    v10 = (_QWORD *)a2[3];
    if (v10)
      goto LABEL_10;
LABEL_13:
    *(_QWORD *)(v9 + 24) = 0;
    goto LABEL_14;
  }
  v9 = 32 * v2;
  v23 = 32 * v2;
  v24 = (unint64_t)(32 * v2);
  v10 = (_QWORD *)a2[3];
  if (!v10)
    goto LABEL_13;
LABEL_10:
  if (v10 == a2)
  {
    *(_QWORD *)(v9 + 24) = v9;
    (*(void (**)(_QWORD *, uint64_t))(*a2 + 24))(a2, v9);
    v9 = v23;
    v11 = v24 + 32;
    *(_QWORD *)&v24 = v24 + 32;
    v13 = (char *)*a1;
    v12 = (char *)a1[1];
    if (v12 != (char *)*a1)
      goto LABEL_15;
LABEL_31:
    *a1 = v9;
    a1[1] = v11;
    a1[2] = *((_QWORD *)&v24 + 1);
    goto LABEL_32;
  }
  *(_QWORD *)(v9 + 24) = (*(uint64_t (**)(_QWORD *))(*v10 + 16))(v10);
LABEL_14:
  v11 = v9 + 32;
  *(_QWORD *)&v24 = v9 + 32;
  v13 = (char *)*a1;
  v12 = (char *)a1[1];
  if (v12 == (char *)*a1)
    goto LABEL_31;
LABEL_15:
  v14 = (char *)(v9 - 8);
  do
  {
    v16 = (char *)*((_QWORD *)v12 - 1);
    v17 = v12 - 32;
    v15 = v14;
    if (!v16)
      goto LABEL_17;
    if (v17 != v16)
    {
      *(_QWORD *)v14 = v16;
      v15 = v12 - 8;
LABEL_17:
      *(_QWORD *)v15 = 0;
      goto LABEL_18;
    }
    *(_QWORD *)v14 = v14 - 24;
    (*(void (**)(_QWORD))(**((_QWORD **)v12 - 1) + 24))(*((_QWORD *)v12 - 1));
LABEL_18:
    v14 -= 32;
    v12 -= 32;
  }
  while (v17 != v13);
  v12 = (char *)*a1;
  v18 = (char *)a1[1];
  *a1 = (uint64_t)(v14 + 8);
  *(_OWORD *)(a1 + 1) = v24;
  v11 = v24;
  if (v18 != v12)
  {
    do
    {
      v21 = v18 - 32;
      v19 = (char *)*((_QWORD *)v18 - 1);
      if (v18 - 32 == v19)
      {
        v19 = v18 - 32;
        v20 = 4;
      }
      else
      {
        if (!v19)
          goto LABEL_26;
        v20 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_26:
      v18 = v21;
    }
    while (v21 != v12);
  }
LABEL_32:
  if (v12)
    operator delete(v12);
  return v11;
}

void sub_20F23396C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20F13F488((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20F233984(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  *(_OWORD *)(a1 + 99) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_BYTE *)(a1 + 115) = 1;
  *(_DWORD *)(a1 + 116) = 1;
  *(_QWORD *)a1 = &off_24C9FBD50;
  *(_QWORD *)(a1 + 120) = a2;
  v4 = *(_QWORD *)(a2 + 80);
  v5 = *(unsigned int *)(v4 + 1812);
  *(_QWORD *)&v11 = -1;
  *((_QWORD *)&v11 + 1) = -1;
  v12 = -1;
  sub_20F236BB8((_QWORD *)(a1 + 128), v4 + 1816, v5, &v11);
  v6 = *(_QWORD *)(a2 + 80);
  v7 = *(unsigned int *)(v6 + 1812);
  *(_QWORD *)&v9 = -1;
  *((_QWORD *)&v9 + 1) = -1;
  v10 = -1;
  sub_20F236BB8((_QWORD *)(a1 + 168), v6 + 1840, v7, &v9);
  return a1;
}

void sub_20F233A40(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = v1[18];
  if (v3)
  {
    v4 = v1[19];
    v5 = (void *)v1[18];
    if (v4 != v3)
    {
      do
      {
        v7 = *(_QWORD *)(v4 - 24);
        if (v7)
        {
          v8 = *(_QWORD *)(v4 - 16);
          v6 = *(void **)(v4 - 24);
          if (v8 != v7)
          {
            do
            {
              v9 = *(void **)(v8 - 32);
              if (v9)
              {
                *(_QWORD *)(v8 - 24) = v9;
                operator delete(v9);
              }
              v10 = *(void **)(v8 - 56);
              if (v10)
              {
                *(_QWORD *)(v8 - 48) = v10;
                operator delete(v10);
              }
              v8 -= 64;
            }
            while (v8 != v7);
            v6 = *(void **)(v4 - 24);
          }
          *(_QWORD *)(v4 - 16) = v7;
          operator delete(v6);
        }
        v4 -= 48;
      }
      while (v4 != v3);
      v5 = (void *)v1[18];
    }
    v1[19] = v3;
    operator delete(v5);
    sub_20F23203C(v1);
    _Unwind_Resume(a1);
  }
  sub_20F23203C(v1);
  _Unwind_Resume(a1);
}

void sub_20F233AF4(uint64_t *a1, uint64_t a2)
{
  double v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  void *__p[2];
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  int v17;
  char v18;
  char *v19;

  HIBYTE(v12) = 0;
  LOBYTE(__p[0]) = 0;
  v13 = 0;
  v14 = 0;
  v17 = 0;
  sub_20F2368E0((uint64_t)&v19, (uint64_t)&v15, (char *)a2);
  if (v17 == -1)
    sub_20E877AB8();
  v19 = &v18;
  ((void (*)(__int128 *__return_ptr, char **, uint64_t *))off_24C9FBDC8[v17])(&v9, &v19, &v15);
  if (v17 != -1)
    ((void (*)(char **, uint64_t *))off_24C9FBDB0[v17])(&v19, &v15);
  v4 = *(double *)(a2 + 24);
  v5 = *a1;
  *(_OWORD *)__p = v9;
  v12 = v10;
  v13 = v5;
  *(float *)&v4 = v4;
  v14 = LODWORD(v4);
  sub_20E896804(&v15);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v15 + 128))(v15, __p);
  v6 = v16;
  if (!v16)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
LABEL_8:
    if ((SHIBYTE(v12) & 0x80000000) == 0)
      return;
LABEL_11:
    operator delete(__p[0]);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  if (SHIBYTE(v12) < 0)
    goto LABEL_11;
}

void sub_20F233C3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  sub_20E896984(v18 - 64);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20F233C68(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E877A60(v1 - 64);
  _Unwind_Resume(a1);
}

void sub_20F233C7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E877A60(v1 - 64);
  _Unwind_Resume(a1);
}

uint64_t sub_20F233C90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _BOOL4 v11;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int8x8_t v17;
  unint64_t v18;
  uint8x8_t v19;
  unint64_t v20;
  uint64_t **v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _BYTE *v30;
  int64_t v31;
  char *v32;
  int v33;
  int v34;
  double v38;
  double v39;
  int v40;
  BOOL v42;
  uint64_t v43;
  std::chrono::system_clock::time_point v44;
  unint64_t v45;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  unint64_t v53;
  unsigned int v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *p_shared_owners;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  int v69;
  BOOL v70;
  int v71;
  BOOL v72;
  unint64_t *v73;
  char v74;
  uint64_t v75;
  unint64_t *v76;
  char v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  __int128 *v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  char *v100;
  __int128 *v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  char *v105;
  _DWORD *v106;
  _BYTE *v107;
  char *v108;
  char *v109;
  char *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char *v115;
  char *v116;
  char *v117;
  uint64_t v118;
  int v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  double v123;
  __int128 v124;
  char *v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  unint64_t v133;
  __int128 *v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  char *v140;
  __int128 *v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  char *v145;
  __int128 v146;
  char *v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  char *v155;
  void *v156;
  char *v157;
  void (***v158)(char *);
  void (**v159)(char *);
  _QWORD *v160;
  uint64_t v161;
  char *v162;
  _BYTE *v163;
  uint64_t v164;
  uint64_t v165;
  _BYTE *v166;
  __int128 v167;
  uint64_t v168;
  char *v169;
  char *v170;
  char *v171;
  void *v172[2];
  uint64_t v173;
  std::string __p[7];
  _BYTE v175[288];
  _OWORD v176[8];
  __int128 v177;
  uint64_t v178;
  void *v179[2];
  void *v180[2];
  __int128 v181;
  uint64_t v182;
  __int128 v183;
  uint64_t v184;
  uint64_t v185;
  __int128 v186;
  uint64_t v187;
  uint64_t v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  __int128 v194;
  __int128 v195;
  _BYTE v196[32];
  __int128 v197;
  __int128 v198;
  uint64_t v199;
  _WORD v200[2];
  _BYTE v201[24];
  unint64_t v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  char v207[64];
  unsigned __int8 __src[288];
  char v209;
  void *v210;
  _BYTE *v211;
  char *v212;
  double v213[12];
  __int128 v214;
  __int128 v215;
  int v216;
  _BYTE v217[24];
  _BYTE *v218;
  uint64_t v219;

  v219 = *MEMORY[0x24BDAC8D0];
  v165 = *(_QWORD *)(*(_QWORD *)(a1 + 120) + 80);
  v214 = 0u;
  v215 = 0u;
  v216 = 733222156;
  kdebug_trace();
  ++*(_DWORD *)(a1 + 104);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 120) + 80);
  if (!*(_BYTE *)(a2 + 56)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/CollaborativeMapping/RelocalizationSelfToExtNode.cpp", 120, (uint64_t)"request.opt_ref_image_id", 24, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v7 = (uint64_t *)(a2 + 32);
  sub_20FCCBC60((unint64_t *)(a2 + 32), __p);
  v8 = *(_QWORD *)(v6 + 2824);
  v9 = *(_QWORD *)(v6 + 2832);
  if (v8 == v9)
  {
    v11 = 0;
    if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_10;
  }
  else
  {
    do
    {
      v10 = sub_20EB07858(*(_QWORD **)(*(_QWORD *)(v8 + 192) + 8), (uint64_t)__p);
      v11 = v10 != 0;
      v8 += 4472;
      if (v10)
        _ZF = 1;
      else
        _ZF = v8 == v9;
    }
    while (!_ZF);
    if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_10:
      if (v11)
        goto LABEL_42;
      goto LABEL_14;
    }
  }
  operator delete(__p[0].__r_.__value_.__l.__data_);
  if (!v11)
  {
LABEL_14:
    v13 = (_QWORD *)(a2 + 8);
    v14 = *(_QWORD *)(v6 + 2824);
    v15 = *(_QWORD *)(v6 + 2832);
    if (v14 != v15)
    {
      while (1)
      {
        v16 = *(_QWORD *)(v14 + 16);
        if (v16)
        {
          if (*(_QWORD *)(v16 + 160) == *v13)
            break;
        }
        v14 += 4472;
        if (v14 == v15)
          goto LABEL_42;
      }
    }
    if (v14 == v15)
      goto LABEL_42;
    if (!v14)
      goto LABEL_42;
    if (!sub_20E9DF85C((_QWORD *)(**(_QWORD **)(*(_QWORD *)(v14 + 16) + 424) + 1784), (uint64_t *)(a2 + 8)))
      goto LABEL_42;
    v164 = *(_QWORD *)(a1 + 120);
    v17 = *(int8x8_t *)(v164 + 8);
    if (!*(_QWORD *)&v17)
      goto LABEL_42;
    v18 = *v7;
    v19 = (uint8x8_t)vcnt_s8(v17);
    v19.i16[0] = vaddlv_u8(v19);
    if (v19.u32[0] > 1uLL)
    {
      v20 = *v7;
      if (v18 >= *(_QWORD *)&v17)
        v20 = v18 % *(_QWORD *)&v17;
    }
    else
    {
      v20 = (*(_QWORD *)&v17 - 1) & v18;
    }
    v21 = *(uint64_t ***)(*(_QWORD *)v164 + 8 * v20);
    if (!v21)
      goto LABEL_42;
    v22 = *v21;
    if (!*v21)
      goto LABEL_42;
    if (v19.u32[0] < 2uLL)
    {
      v23 = *(_QWORD *)&v17 - 1;
      while (1)
      {
        v25 = v22[1];
        if (v18 == v25)
        {
          if (v22[2] == v18)
            goto LABEL_44;
        }
        else if ((v25 & v23) != v20)
        {
          goto LABEL_42;
        }
        v22 = (uint64_t *)*v22;
        if (!v22)
          goto LABEL_42;
      }
    }
    while (1)
    {
      v24 = v22[1];
      if (v18 == v24)
        break;
      if (v24 >= *(_QWORD *)&v17)
        v24 %= *(_QWORD *)&v17;
      if (v24 != v20)
        goto LABEL_42;
LABEL_32:
      v22 = (uint64_t *)*v22;
      if (!v22)
        goto LABEL_42;
    }
    if (v22[2] != v18)
      goto LABEL_32;
LABEL_44:
    v27 = v22[26];
    v28 = *(unsigned __int8 *)(v27 + 1128);
    *(_BYTE *)(v27 + 1128) = *(_BYTE *)(a2 + 96);
    v29 = operator new(0x20uLL);
    *v29 = &off_24C9FBDF0;
    v29[1] = v22;
    v29[2] = v28;
    v218 = v29;
    v211 = 0;
    v210 = 0;
    v212 = 0;
    v30 = *(_BYTE **)(a2 + 80);
    v163 = *(_BYTE **)(a2 + 72);
    v31 = v30 - v163;
    if (v30 != v163)
    {
      if (0xAAAAAAAAAAAAAAABLL * (v31 >> 3) >= 0xAAAAAAAAAAAAAABLL)
        sub_20E867F44();
      v32 = (char *)operator new(v31);
      v162 = &v32[8 * (v31 >> 3)];
      v210 = v32;
      v212 = v162;
      memcpy(v32, v163, v31 - 4);
      v211 = v162;
    }
    __src[0] = 0;
    v209 = 0;
    v200[0] = 0;
    *(_QWORD *)&v201[8] = 0;
    *(_QWORD *)v201 = 0;
    *(_QWORD *)&v201[16] = 0xFFFFFFFF00000000;
    v203 = 0u;
    v204 = 0u;
    v205 = 0u;
    v206 = 0u;
    memset(v207, 0, 58);
    if (*(_BYTE *)(a1 + 113))
    {
      *(_OWORD *)&v201[4] = *(_OWORD *)v13;
      v33 = *(_DWORD *)(a2 + 24);
      v202 = v18;
      if (*(_BYTE *)(a2 + 68))
        v34 = *(_DWORD *)(a2 + 64);
      else
        v34 = 0;
      *(_DWORD *)&v201[20] = v33;
      *(_DWORD *)v201 = v34;
    }
    LOWORD(v194) = 0;
    BYTE2(v194) = 0;
    *((_QWORD *)&v194 + 1) = 0;
    LOWORD(v195) = 25600;
    BYTE2(v195) = 0;
    *((_QWORD *)&v195 + 1) = 0xBFF0000000000000;
    v196[0] = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)&v196[8] = _Q0;
    *(_QWORD *)&v196[24] = 0xBFF0000000000000;
    LOWORD(v197) = 0;
    BYTE2(v197) = 0;
    *((_QWORD *)&v197 + 1) = 0;
    LOBYTE(v198) = 0;
    *((_QWORD *)&v198 + 1) = 0xBFF0000000000000;
    LODWORD(v199) = 0;
    if (*(_BYTE *)(a1 + 114))
    {
      ++*(_QWORD *)(v164 + 1248);
      v38 = *((double *)v22 + 561);
      v39 = *(double *)(v164 + 1224);
      if (v38 == v39)
        v40 = 0;
      else
        v40 = -127;
      if (v38 > v39)
        v40 = 1;
      if (v38 < v39)
        v40 = -1;
      v42 = v40 != -127 && v40 < 1;
      v196[0] = v42;
      *(_QWORD *)&v196[8] = fmax(v38 - *(double *)(v164 + 1216), 0.0);
      BYTE2(v195) = *(_BYTE *)(v164 + 1200);
      BYTE1(v197) = *(_BYTE *)(v164 + 1241) ^ 1;
      v43 = *(_QWORD *)(v22[5] + 400);
      v44.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      v45 = vcvtmd_s64_f64((double)(v44.__d_.__rep_ / 1000000 - v43) / 86400.0);
      v46 = v43 - v44.__d_.__rep_ / 1000000 + 86400 * v45;
      if (v46 >= 0)
        v47 = v43 - v44.__d_.__rep_ / 1000000 + 86400 * v45;
      else
        v47 = -v46;
      v48 = v46 + 86400;
      if (v48 < 0)
        v48 = -v48;
      if (v48 >= v47)
        v48 = v47;
      *(double *)&v196[16] = (double)(v44.__d_.__rep_ / 1000000 - v43) / 86400.0;
      *(double *)&v196[24] = (double)v48 / 3600.0;
      v49 = *(_QWORD *)(a1 + 120);
      BYTE2(v197) = *(_BYTE *)(v49 + 1242) ^ 1;
      *((_QWORD *)&v197 + 1) = *(_QWORD *)(v49 + 1248);
      LOBYTE(v198) = *(_BYTE *)(v49 + 1240);
      if (*(_BYTE *)(v49 + 1288))
        *((_QWORD *)&v198 + 1) = *(_QWORD *)(v49 + 1272);
      v50 = *(_QWORD *)(*(_QWORD *)(v14 + 16) + 424);
      v52 = *(char **)(v50 + 40);
      v51 = *(char **)(v50 + 48);
      if (v51 != v52)
      {
        v53 = (v51 - v52) >> 4;
        v54 = *(_DWORD *)(a2 + 24);
        v55 = *(_QWORD *)(a2 + 8);
        while (1)
        {
          v56 = v53 >> 1;
          v57 = &v52[16 * (v53 >> 1)];
          v58 = *(_QWORD *)v57;
          v59 = *(_DWORD *)(*(_QWORD *)v57 + 16);
          _CF = v59 >= v54;
          if (v59 != v54)
            goto LABEL_83;
          if (*(_QWORD *)v58 >= v55)
            break;
LABEL_77:
          v52 = v57 + 16;
          v56 = v53 + ~v56;
LABEL_78:
          v53 = v56;
          if (!v56)
            goto LABEL_86;
        }
        if (*(_QWORD *)v58 != v55)
          goto LABEL_78;
        _CF = *(_DWORD *)(v58 + 8) >= *(_DWORD *)(a2 + 16);
LABEL_83:
        if (_CF)
          goto LABEL_78;
        goto LABEL_77;
      }
LABEL_86:
      if (v52 == v51)
      {
        v62 = v51;
      }
      else
      {
        v61 = *(_QWORD *)v52;
        v62 = v51;
        if (*(_DWORD *)(*(_QWORD *)v52 + 16) == *(_DWORD *)(a2 + 24))
        {
          v62 = v51;
          if (*(_QWORD *)v61 == *v13)
          {
            if (*(_DWORD *)(v61 + 8) == *(_DWORD *)(a2 + 16))
              v62 = v52;
            else
              v62 = v51;
          }
        }
      }
      if (v51 == v62
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/CollaborativeMapping/RelocalizationSelfToExtNode.cpp", 201, (uint64_t)"vioframe_iter != self_submap->data()->viodatabase()->end()", 58, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v63 = *(_QWORD *)v62;
      v64 = (std::__shared_weak_count *)*((_QWORD *)v62 + 1);
      if (v64)
      {
        p_shared_owners = (unint64_t *)&v64->__shared_owners_;
        do
          v66 = __ldxr(p_shared_owners);
        while (__stxr(v66 + 1, p_shared_owners));
      }
      if (*(_BYTE *)(v63 + 48))
        LOWORD(v199) = (*(_DWORD *)(v63 + 40) * *(_DWORD *)(v63 + 44) != 0) | 0x100;
      WORD1(v199) = *(_WORD *)(*(_QWORD *)(v63 + 56) + 744);
      if (v64)
      {
        v67 = (unint64_t *)&v64->__shared_owners_;
        do
          v68 = __ldaxr(v67);
        while (__stlxr(v68 - 1, v67));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
    }
    v69 = *(unsigned __int8 *)(v165 + 1808);
    if (*(_BYTE *)(v165 + 1808))
    {
      if (*(_BYTE *)(a2 + 68))
        v70 = *(_DWORD *)(a2 + 64) == 2;
      else
        v70 = 0;
      v69 = !v70;
    }
    v71 = *(unsigned __int8 *)(v165 + 1832);
    if (*(_BYTE *)(v165 + 1832))
    {
      if (*(_BYTE *)(a2 + 68))
        v72 = *(_DWORD *)(a2 + 64) == 1;
      else
        v72 = 0;
      v71 = !v72;
    }
    v184 = 0;
    v186 = 0u;
    v183 = 0u;
    *(_OWORD *)v179 = 0u;
    *(_OWORD *)v180 = 0u;
    v181 = 0u;
    v182 = 0x3FF0000000000000;
    v185 = 0x3FF0000000000000;
    v187 = 0;
    v188 = 0x3FF0000000000000;
    v189 = 0u;
    v190 = 0u;
    if (v69)
      v73 = (unint64_t *)(a1 + 128);
    else
      v73 = 0;
    v74 = v69;
    v191 = 0uLL;
    v75 = *(unsigned __int8 *)(a1 + 113);
    if (v71)
      v76 = (unint64_t *)(a1 + 168);
    else
      v76 = 0;
    v77 = v71;
    v192 = 0uLL;
    v78 = *(unsigned __int8 *)(a1 + 114);
    if (v75)
      v79 = (unint64_t)v200 & 0xF8;
    else
      v79 = 0;
    v80 = v79 | (unint64_t)v200 & 0xFFFFFFFFFFFFFF00;
    if (*(_BYTE *)(a1 + 114))
      v81 = (unint64_t)&v194 & 0xF8;
    else
      v81 = 0;
    v193 = 0;
    if ((sub_20F32F708(v6, (_QWORD *)(a2 + 8), v22 + 3, a2 + 64, v73, v74, v76, v77, (char **)&v210, v213, __src, v179, v80, v75, v81 | (unint64_t)&v194 & 0xFFFFFFFFFFFFFF00, v78) & 1) != 0)
    {
      if (v210 == v211
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/CollaborativeMapping/RelocalizationSelfToExtNode.cpp", 243, (uint64_t)"!selected_external_keyframes_ids.empty()", 40, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      if (!*(_BYTE *)(v165 + 1592))
        goto LABEL_138;
      sub_20F236234((double *)__p, v179, *(double *)(v165 + 1616));
      if ((sub_20F30C294(*(_QWORD **)(a1 + 120), (uint64_t *)(a2 + 8), (unint64_t *)(a2 + 32), a2 + 64, (uint64_t)v213, (uint64_t)__p) & 1) != 0)
      {
        if (__p[0].__r_.__value_.__r.__words[0])
        {
          __p[0].__r_.__value_.__l.__size_ = __p[0].__r_.__value_.__r.__words[0];
          operator delete(__p[0].__r_.__value_.__l.__data_);
        }
LABEL_138:
        v85 = *((_QWORD *)v210 + 2);
        v177 = *(_OWORD *)v210;
        v178 = v85;
        *(double *)&v86 = v213[0];
        *(double *)&v87 = v213[1];
        *(double *)&v88 = v213[2];
        *(double *)&v89 = v213[3];
        *((double *)&v86 + 1) = v213[4];
        *((double *)&v87 + 1) = v213[5];
        *((double *)&v88 + 1) = v213[6];
        *(double *)&v82 = v213[8];
        *(double *)&v83 = v213[9];
        *((double *)&v89 + 1) = v213[7];
        __asm { FMOV            V6.2D, #1.0 }
        *(double *)&_Q6 = v213[11];
        *(double *)&v84 = v213[10];
        v176[0] = v86;
        v176[1] = v82;
        v176[2] = v87;
        v176[3] = v83;
        v176[4] = v88;
        v176[5] = v84;
        v176[6] = v89;
        v176[7] = _Q6;
        sub_20F453824(*(_QWORD *)(v14 + 16), v22[5], a2 + 8, (uint64_t)&v177, (uint64_t)v176, 3, (uint64_t)__p, *(double *)(v165 + 864));
        if (v209)
          memcpy(v175, __src, sizeof(v175));
        v172[0] = 0;
        v172[1] = 0;
        v173 = 0;
        if (*(_BYTE *)(v165 + 2499))
        {
          sub_20F235770((char **)v172, (__int128 *)__p);
        }
        else
        {
          v169 = 0;
          v170 = 0;
          v171 = 0;
          sub_20F23599C((uint64_t)&v169, 0xAAAAAAAAAAAAAAABLL * ((v211 - (_BYTE *)v210) >> 3));
          v106 = v210;
          v107 = v211;
          if (v210 != v211)
          {
            v166 = v211;
            do
            {
              if (*(_QWORD *)v106 != (_QWORD)v177 || v106[2] != DWORD2(v177))
              {
                v109 = v170;
                if (v170 < v171)
                {
                  *(_OWORD *)v170 = *(_OWORD *)v106;
                  v108 = v109 + 16;
                }
                else
                {
                  v110 = v169;
                  v111 = (v170 - v169) >> 4;
                  v112 = v111 + 1;
                  if ((unint64_t)(v111 + 1) >> 60)
                    sub_20E867F44();
                  v113 = v171 - v169;
                  if ((v171 - v169) >> 3 > v112)
                    v112 = v113 >> 3;
                  if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFF0)
                    v114 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v114 = v112;
                  if (v114)
                  {
                    if (v114 >> 60)
                      sub_20E877A38();
                    v115 = (char *)operator new(16 * v114);
                  }
                  else
                  {
                    v115 = 0;
                  }
                  v116 = &v115[16 * v111];
                  *(_OWORD *)v116 = *(_OWORD *)v106;
                  v117 = v116;
                  if (v109 != v110)
                  {
                    do
                    {
                      v118 = *((_QWORD *)v109 - 2);
                      v109 -= 16;
                      v119 = *((_DWORD *)v109 + 2);
                      *((_QWORD *)v117 - 2) = v118;
                      v117 -= 16;
                      *((_DWORD *)v117 + 2) = v119;
                    }
                    while (v109 != v110);
                    v109 = v169;
                  }
                  v108 = v116 + 16;
                  v169 = v117;
                  v170 = v116 + 16;
                  v171 = &v115[16 * v114];
                  if (v109)
                    operator delete(v109);
                  v107 = v166;
                }
                v170 = v108;
              }
              v106 += 6;
            }
            while (v106 != (_DWORD *)v107);
          }
          sub_20F454B34(v22[5], *(_QWORD *)(v14 + 16), (uint64_t)__p, (uint64_t *)(v14 + 32), (uint64_t *)&v169, &v167);
          if (v172[0])
          {
            v172[1] = v172[0];
            operator delete(v172[0]);
          }
          *(_OWORD *)v172 = v167;
          v173 = v168;
          if (v169)
          {
            v170 = v169;
            operator delete(v169);
          }
        }
        if (*(_BYTE *)(a1 + 113))
        {
          sub_20F236478(&v207[8], (__int128 *)v172[0], (__int128 *)v172[1], 0xCBEEA4E1A08AD8F3 * (((char *)v172[1] - (char *)v172[0]) >> 3));
          HIBYTE(v200[0]) = 1;
          v120 = *(_QWORD *)(a1 + 64);
          if (v120 >= *(_QWORD *)(a1 + 72))
          {
            v121 = sub_20F2319F4((uint64_t *)(a1 + 56), (__int128 *)v200);
          }
          else
          {
            sub_20EE6CA98(*(_QWORD *)(a1 + 64), (__int128 *)v200);
            v121 = v120 + 168;
            *(_QWORD *)(a1 + 64) = v120 + 168;
          }
          *(_QWORD *)(a1 + 64) = v121;
        }
        if (*(_BYTE *)(a1 + 114))
        {
          LOBYTE(v197) = 1;
          BYTE1(v195) = 0;
          v122 = *(_QWORD *)(a1 + 120);
          v123 = 0.0;
          if (!*(_BYTE *)(v122 + 1256))
          {
            if (*(_BYTE *)(v122 + 1208))
              v123 = *(double *)(v122 + 1232) - *(double *)(v122 + 1224);
            else
              v123 = -1.0;
          }
          *((double *)&v195 + 1) = v123;
          *(_WORD *)(v122 + 1241) = 257;
          sub_20F234ECC((uint64_t)&v194);
          v134 = *(__int128 **)(a1 + 88);
          v133 = *(_QWORD *)(a1 + 96);
          if ((unint64_t)v134 >= v133)
          {
            v141 = *(__int128 **)(a1 + 80);
            v142 = 0x4EC4EC4EC4EC4EC5 * (((char *)v134 - (char *)v141) >> 3) + 1;
            if (v142 > 0x276276276276276)
              sub_20EABADD4();
            v143 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v133 - (_QWORD)v141) >> 3);
            if (2 * v143 > v142)
              v142 = 2 * v143;
            if (v143 >= 0x13B13B13B13B13BLL)
              v144 = 0x276276276276276;
            else
              v144 = v142;
            if (v144)
            {
              if (v144 > 0x276276276276276)
                sub_20E877A38();
              v145 = (char *)operator new(104 * v144);
            }
            else
            {
              v145 = 0;
            }
            v146 = v198;
            v147 = &v145[8 * (((char *)v134 - (char *)v141) >> 3)];
            *((_OWORD *)v147 + 4) = v197;
            *((_OWORD *)v147 + 5) = v146;
            *((_QWORD *)v147 + 12) = v199;
            v148 = v195;
            *(_OWORD *)v147 = v194;
            *((_OWORD *)v147 + 1) = v148;
            v149 = *(_OWORD *)&v196[16];
            *((_OWORD *)v147 + 2) = *(_OWORD *)v196;
            *((_OWORD *)v147 + 3) = v149;
            v140 = v147 + 104;
            if (v134 != v141)
            {
              do
              {
                v150 = *(__int128 *)((char *)v134 - 104);
                v151 = *(__int128 *)((char *)v134 - 88);
                *(_OWORD *)(v147 - 72) = *(__int128 *)((char *)v134 - 72);
                *(_OWORD *)(v147 - 88) = v151;
                *(_OWORD *)(v147 - 104) = v150;
                v152 = *(__int128 *)((char *)v134 - 56);
                v153 = *(__int128 *)((char *)v134 - 40);
                v154 = *(__int128 *)((char *)v134 - 24);
                *((_DWORD *)v147 - 2) = *((_DWORD *)v134 - 2);
                *(_OWORD *)(v147 - 24) = v154;
                *(_OWORD *)(v147 - 40) = v153;
                *(_OWORD *)(v147 - 56) = v152;
                v147 -= 104;
                v134 = (__int128 *)((char *)v134 - 104);
              }
              while (v134 != v141);
              v134 = *(__int128 **)(a1 + 80);
            }
            *(_QWORD *)(a1 + 80) = v147;
            *(_QWORD *)(a1 + 88) = v140;
            *(_QWORD *)(a1 + 96) = &v145[104 * v144];
            if (v134)
              operator delete(v134);
          }
          else
          {
            v135 = v194;
            v136 = *(_OWORD *)v196;
            v134[1] = v195;
            v134[2] = v136;
            *v134 = v135;
            v137 = *(_OWORD *)&v196[16];
            v138 = v197;
            v139 = v198;
            *((_QWORD *)v134 + 12) = v199;
            v134[4] = v138;
            v134[5] = v139;
            v134[3] = v137;
            v140 = (char *)v134 + 104;
          }
          *(_QWORD *)(a1 + 88) = v140;
          if ((_BYTE)v197)
            sub_20F233AF4(v7, (uint64_t)&v194);
        }
        *(_BYTE *)a3 = 1;
        *(_OWORD *)(a3 + 8) = *(_OWORD *)v172;
        *(_QWORD *)(a3 + 24) = v173;
        goto LABEL_231;
      }
      if (*(_BYTE *)(a1 + 113))
      {
        HIBYTE(v200[0]) = 0;
        v207[56] = 1;
        sub_20F234E70((uint64_t *)(a1 + 56), (__int128 *)v200);
      }
      if (*(_BYTE *)(a1 + 114))
      {
        LOBYTE(v197) = 0;
        BYTE1(v195) = 4;
        sub_20F234ECC((uint64_t)&v194);
        sub_20F2355B8((void **)(a1 + 80), &v194);
      }
      *(_BYTE *)a3 = 1;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 8) = 0;
      if (__p[0].__r_.__value_.__r.__words[0])
      {
        __p[0].__r_.__value_.__l.__size_ = __p[0].__r_.__value_.__r.__words[0];
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
    }
    else
    {
      if (*(_BYTE *)(a1 + 113))
      {
        HIBYTE(v200[0]) = 0;
        v91 = *(_QWORD *)(a1 + 64);
        if (v91 >= *(_QWORD *)(a1 + 72))
        {
          v92 = sub_20F2319F4((uint64_t *)(a1 + 56), (__int128 *)v200);
        }
        else
        {
          sub_20EE6CA98(*(_QWORD *)(a1 + 64), (__int128 *)v200);
          v92 = v91 + 168;
          *(_QWORD *)(a1 + 64) = v91 + 168;
        }
        *(_QWORD *)(a1 + 64) = v92;
      }
      if (*(_BYTE *)(a1 + 114))
      {
        LOBYTE(v197) = 0;
        sub_20F234ECC((uint64_t)&v194);
        v94 = *(__int128 **)(a1 + 88);
        v93 = *(_QWORD *)(a1 + 96);
        if ((unint64_t)v94 >= v93)
        {
          v101 = *(__int128 **)(a1 + 80);
          v102 = 0x4EC4EC4EC4EC4EC5 * (((char *)v94 - (char *)v101) >> 3) + 1;
          if (v102 > 0x276276276276276)
            sub_20EABADD4();
          v103 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v93 - (_QWORD)v101) >> 3);
          if (2 * v103 > v102)
            v102 = 2 * v103;
          if (v103 >= 0x13B13B13B13B13BLL)
            v104 = 0x276276276276276;
          else
            v104 = v102;
          if (v104)
          {
            if (v104 > 0x276276276276276)
              sub_20E877A38();
            v105 = (char *)operator new(104 * v104);
          }
          else
          {
            v105 = 0;
          }
          v124 = v198;
          v125 = &v105[8 * (((char *)v94 - (char *)v101) >> 3)];
          *((_OWORD *)v125 + 4) = v197;
          *((_OWORD *)v125 + 5) = v124;
          *((_QWORD *)v125 + 12) = v199;
          v126 = v195;
          *(_OWORD *)v125 = v194;
          *((_OWORD *)v125 + 1) = v126;
          v127 = *(_OWORD *)&v196[16];
          *((_OWORD *)v125 + 2) = *(_OWORD *)v196;
          *((_OWORD *)v125 + 3) = v127;
          v100 = v125 + 104;
          if (v94 != v101)
          {
            do
            {
              v128 = *(__int128 *)((char *)v94 - 104);
              v129 = *(__int128 *)((char *)v94 - 88);
              *(_OWORD *)(v125 - 72) = *(__int128 *)((char *)v94 - 72);
              *(_OWORD *)(v125 - 88) = v129;
              *(_OWORD *)(v125 - 104) = v128;
              v130 = *(__int128 *)((char *)v94 - 56);
              v131 = *(__int128 *)((char *)v94 - 40);
              v132 = *(__int128 *)((char *)v94 - 24);
              *((_DWORD *)v125 - 2) = *((_DWORD *)v94 - 2);
              *(_OWORD *)(v125 - 24) = v132;
              *(_OWORD *)(v125 - 40) = v131;
              *(_OWORD *)(v125 - 56) = v130;
              v125 -= 104;
              v94 = (__int128 *)((char *)v94 - 104);
            }
            while (v94 != v101);
            v94 = *(__int128 **)(a1 + 80);
          }
          *(_QWORD *)(a1 + 80) = v125;
          *(_QWORD *)(a1 + 88) = v100;
          *(_QWORD *)(a1 + 96) = &v105[104 * v104];
          if (v94)
            operator delete(v94);
        }
        else
        {
          v95 = v194;
          v96 = *(_OWORD *)v196;
          v94[1] = v195;
          v94[2] = v96;
          *v94 = v95;
          v97 = *(_OWORD *)&v196[16];
          v98 = v197;
          v99 = v198;
          *((_QWORD *)v94 + 12) = v199;
          v94[4] = v98;
          v94[5] = v99;
          v94[3] = v97;
          v100 = (char *)v94 + 104;
        }
        *(_QWORD *)(a1 + 88) = v100;
      }
      *(_BYTE *)a3 = 1;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 8) = 0;
    }
LABEL_231:
    if ((_QWORD)v192)
    {
      *((_QWORD *)&v192 + 1) = v192;
      operator delete((void *)v192);
    }
    if (*((_QWORD *)&v190 + 1))
    {
      *(_QWORD *)&v191 = *((_QWORD *)&v190 + 1);
      operator delete(*((void **)&v190 + 1));
    }
    if (v180[1])
    {
      *(void **)&v181 = v180[1];
      operator delete(v180[1]);
    }
    v155 = (char *)v179[0];
    if (v179[0])
    {
      v156 = v179[0];
      if (v179[1] != v179[0])
      {
        v157 = (char *)v179[1] - 40;
        v158 = (void (***)(char *))((char *)v179[1] - 40);
        do
        {
          v159 = *v158;
          v158 -= 5;
          (*v159)(v157);
          _ZF = v157 == v155;
          v157 = (char *)v158;
        }
        while (!_ZF);
        v156 = v179[0];
      }
      v179[1] = v155;
      operator delete(v156);
    }
    sub_20E991548(v200);
    if (v210)
    {
      v211 = v210;
      operator delete(v210);
    }
    if (!v218)
      sub_20E86D37C();
    (*(void (**)(_BYTE *))(*(_QWORD *)v218 + 48))(v218);
    v160 = v218;
    if (v218 == v217)
    {
      v161 = 4;
      v160 = v217;
    }
    else
    {
      if (!v218)
        return kdebug_trace();
      v161 = 5;
    }
    (*(void (**)(void))(*v160 + 8 * v161))();
    return kdebug_trace();
  }
LABEL_42:
  *(_BYTE *)a3 = 1;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  return kdebug_trace();
}

void sub_20F234D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *__p)
{
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v31;

  *(_QWORD *)(v27 + 64) = v28;
  if (__p)
    operator delete(__p);
  sub_20F2310C8((void **)&STACK[0x320]);
  sub_20E991548(&STACK[0x448]);
  v31 = (void *)STACK[0x618];
  if (STACK[0x618])
  {
    STACK[0x620] = (unint64_t)v31;
    operator delete(v31);
  }
  sub_20E961DB0((_QWORD *)(v29 - 136));
  sub_20E8E69C4(v29 - 176);
  _Unwind_Resume(a1);
}

uint64_t sub_20F234E70(uint64_t *a1, __int128 *a2)
{
  unint64_t v3;
  uint64_t result;

  v3 = a1[1];
  if (v3 >= a1[2])
  {
    result = sub_20F2319F4(a1, a2);
    a1[1] = result;
  }
  else
  {
    sub_20EE6CA98(a1[1], a2);
    result = v3 + 168;
    a1[1] = v3 + 168;
    a1[1] = v3 + 168;
  }
  return result;
}

void sub_20F234EC4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20F234ECC(uint64_t a1)
{
  __uint64_t *v2;
  void **v3;
  size_t v4;
  size_t v5;
  uint64_t *v6;
  int v7;
  int v8;
  unsigned __int8 v9;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  char *v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned __int8 v31;
  void *__p[2];
  char v33;
  __uint64_t v34[2];
  char v35;
  char v36;
  char *v37;
  void *__dst;
  void *v39;
  int v40;
  __int16 v41;
  _BYTE v42[6];
  int v43;
  void *v44;
  int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  uint64_t v49;
  void *v50;
  char v51;
  char v52;
  void *v53;
  char v54;
  void *v55;
  char v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)&v42[2] = 0;
  sub_20F2368E0((uint64_t)__p, (uint64_t)&__dst, (char *)a1);
  if (*(_DWORD *)&v42[2] == -1)
    sub_20E877AB8();
  __p[0] = &v37;
  ((void (*)(__uint64_t *__return_ptr, void **, void **))off_24C9FBDC8[*(unsigned int *)&v42[2]])(v34, __p, &__dst);
  if (*(_DWORD *)&v42[2] != -1)
    ((void (*)(void **, void **))off_24C9FBDB0[*(unsigned int *)&v42[2]])(__p, &__dst);
  if (v35 >= 0)
    v2 = v34;
  else
    v2 = (__uint64_t *)v34[0];
  *(_DWORD *)&v42[2] = 0;
  sub_20F235F90((uint64_t)&v37, (uint64_t)&__dst, (unsigned __int8 *)(a1 + 17));
  if (*(_DWORD *)&v42[2] == -1)
    sub_20E877AB8();
  v37 = &v36;
  ((void (*)(void **__return_ptr, char **, void **))off_24C9FBDC8[*(unsigned int *)&v42[2]])(__p, &v37, &__dst);
  if (*(_DWORD *)&v42[2] != -1)
    ((void (*)(char **, void **))off_24C9FBDB0[*(unsigned int *)&v42[2]])(&v37, &__dst);
  if (v33 >= 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  __dst = 0;
  v4 = strnlen((const char *)v2, 8uLL);
  memcpy(&__dst, v2, v4);
  __dst = 0;
  v5 = strnlen((const char *)v3, 8uLL);
  memcpy(&__dst, v3, v5);
  kdebug_trace();
  if (v33 < 0)
  {
    operator delete(__p[0]);
    if ((v35 & 0x80000000) == 0)
      goto LABEL_15;
LABEL_25:
    operator delete((void *)v34[0]);
    goto LABEL_15;
  }
  if (v35 < 0)
    goto LABEL_25;
LABEL_15:
  kdebug_trace();
  v6 = sub_210219C18();
  v7 = *(_DWORD *)(a1 + 8);
  v8 = *(unsigned __int8 *)(a1 + 17);
  v9 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    v11 = *(unsigned __int8 *)(a1 + 64);
    v12 = *(unsigned __int8 *)(a1 + 65);
    v13 = *(unsigned __int8 *)(a1 + 1);
    v14 = *(unsigned __int8 *)(a1 + 2);
    v15 = *(unsigned __int8 *)(a1 + 16);
    v16 = *(unsigned __int8 *)(a1 + 18);
    v17 = *(_QWORD *)(a1 + 24);
    LODWORD(__dst) = 67111168;
    HIDWORD(__dst) = v11;
    LOWORD(v39) = 1024;
    *(_DWORD *)((char *)&v39 + 2) = v12;
    HIWORD(v39) = 1024;
    v40 = v13;
    v41 = 1024;
    *(_DWORD *)v42 = v14;
    *(_WORD *)&v42[4] = 1024;
    v43 = v15;
    LOWORD(v44) = 1024;
    *(_DWORD *)((char *)&v44 + 2) = v7;
    HIWORD(v44) = 1024;
    v45 = v8;
    v46 = 1024;
    v47 = v16;
    v48 = 2048;
    v49 = v17;
    v18 = (char *)_os_log_send_and_compose_impl();
    v19 = strlen(v18);
    v34[0] = 0;
    pthread_threadid_np(0, v34);
    v20 = v34[0];
    timespec_get((timespec *)v34, 1);
    sub_210219E20(&__dst, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v6 + 1), (__int128 *)(v6 + 5), "CA:RLA: RS:%{BOOL}d, IFL:%{BOOL}d, WK:%{BOOL}d, PRS:%{BOOL}d, MFS:%{BOOL}d, MFT:%u, FC:%hhu, DW:%{BOOL}d, TTL:%f", 0x70uLL, v18, v19, v20, v34);
    std::mutex::lock(&stru_254A5A410);
    v21 = qword_254A5A458;
    for (i = unk_254A5A460; v21 != i; v21 += 40)
    {
      v23 = *(_QWORD *)(v21 + 32);
      if (!v23)
        sub_20E86D37C();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v23 + 48))(v23, &__dst);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v56 < 0)
    {
      operator delete(v55);
      if ((v54 & 0x80000000) == 0)
      {
LABEL_22:
        if (!v52)
        {
LABEL_30:
          if (BYTE4(v49) && SBYTE3(v49) < 0)
            operator delete(v44);
          if (SHIBYTE(v43) < 0)
            operator delete(v39);
          if (v18)
            free(v18);
          goto LABEL_37;
        }
LABEL_28:
        if (v51 < 0)
          operator delete(v50);
        goto LABEL_30;
      }
    }
    else if ((v54 & 0x80000000) == 0)
    {
      goto LABEL_22;
    }
    operator delete(v53);
    if (!v52)
      goto LABEL_30;
    goto LABEL_28;
  }
LABEL_37:
  if (os_signpost_enabled((os_log_t)*v6))
  {
    v24 = *(unsigned __int8 *)(a1 + 64);
    v25 = *(unsigned __int8 *)(a1 + 65);
    v26 = *(unsigned __int8 *)(a1 + 1);
    v27 = *(unsigned __int8 *)(a1 + 2);
    v28 = *(unsigned __int8 *)(a1 + 16);
    v29 = *(unsigned __int8 *)(a1 + 18);
    v30 = *(_QWORD *)(a1 + 24);
    LODWORD(__dst) = 67111168;
    HIDWORD(__dst) = v24;
    LOWORD(v39) = 1024;
    *(_DWORD *)((char *)&v39 + 2) = v25;
    HIWORD(v39) = 1024;
    v40 = v26;
    v41 = 1024;
    *(_DWORD *)v42 = v27;
    *(_WORD *)&v42[4] = 1024;
    v43 = v28;
    LOWORD(v44) = 1024;
    *(_DWORD *)((char *)&v44 + 2) = v7;
    HIWORD(v44) = 1024;
    v45 = v8;
    v46 = 1024;
    v47 = v29;
    v48 = 2048;
    v49 = v30;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  v31 = atomic_load((unsigned __int8 *)&qword_254A6D9C8);
  if ((v31 & 1) == 0 && __cxa_guard_acquire(&qword_254A6D9C8))
  {
    sub_20FCFB524();
    __cxa_atexit((void (*)(void *))sub_20FCFB238, &qword_254A6D9A0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6D9C8);
  }
  sub_210237040("CA:RLA: RS:%d, IFL:%d, WK:%d, PRS:%d, MFS:%d, MFT:%u, FC:%hhu, DW:%d, TTL:%f", (std::string *)&__dst, *(unsigned __int8 *)(a1 + 64), *(unsigned __int8 *)(a1 + 65), *(unsigned __int8 *)(a1 + 1), *(unsigned __int8 *)(a1 + 2), *(unsigned __int8 *)(a1 + 16), *(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 17), *(unsigned __int8 *)(a1 + 18), *(_QWORD *)(a1 + 24));
  sub_20EA5C6C8((uint64_t)&__dst, qword_254A6D9A8);
  if ((v42[1] & 0x80000000) != 0)
    operator delete(__dst);
}

void sub_20F2354CC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A6D9C8);
  _Unwind_Resume(a1);
}

void sub_20F2354E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  void *v35;

  sub_20E96E218((uint64_t)&__p);
  if (!v35)
    _Unwind_Resume(a1);
  free(v35);
  _Unwind_Resume(a1);
}

void sub_20F2355B8(void **a1, __int128 *a2)
{
  unint64_t v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  __int128 v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  v5 = (char *)a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 < v4)
  {
    v6 = *a2;
    v7 = a2[2];
    *((_OWORD *)v5 + 1) = a2[1];
    *((_OWORD *)v5 + 2) = v7;
    *(_OWORD *)v5 = v6;
    v8 = a2[3];
    v9 = a2[4];
    v10 = a2[5];
    *((_QWORD *)v5 + 12) = *((_QWORD *)a2 + 12);
    *((_OWORD *)v5 + 4) = v9;
    *((_OWORD *)v5 + 5) = v10;
    *((_OWORD *)v5 + 3) = v8;
    v11 = v5 + 104;
LABEL_3:
    a1[1] = v11;
    return;
  }
  v12 = (char *)*a1;
  v13 = 0x4EC4EC4EC4EC4EC5 * ((v5 - (_BYTE *)*a1) >> 3);
  v14 = v13 + 1;
  if ((unint64_t)(v13 + 1) > 0x276276276276276)
    sub_20EABADD4();
  v15 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v4 - (_QWORD)v12) >> 3);
  if (2 * v15 > v14)
    v14 = 2 * v15;
  if (v15 >= 0x13B13B13B13B13BLL)
    v16 = 0x276276276276276;
  else
    v16 = v14;
  if (v16)
  {
    if (v16 > 0x276276276276276)
      sub_20E877A38();
    v17 = (char *)operator new(104 * v16);
  }
  else
  {
    v17 = 0;
  }
  v18 = a2[5];
  v19 = &v17[104 * v13];
  *((_OWORD *)v19 + 4) = a2[4];
  *((_OWORD *)v19 + 5) = v18;
  *((_QWORD *)v19 + 12) = *((_QWORD *)a2 + 12);
  v20 = a2[1];
  *(_OWORD *)v19 = *a2;
  *((_OWORD *)v19 + 1) = v20;
  v21 = a2[3];
  *((_OWORD *)v19 + 2) = a2[2];
  *((_OWORD *)v19 + 3) = v21;
  v11 = v19 + 104;
  if (v5 != v12)
  {
    do
    {
      v22 = *(_OWORD *)(v5 - 104);
      v23 = *(_OWORD *)(v5 - 88);
      *(_OWORD *)(v19 - 72) = *(_OWORD *)(v5 - 72);
      *(_OWORD *)(v19 - 88) = v23;
      *(_OWORD *)(v19 - 104) = v22;
      v24 = *(_OWORD *)(v5 - 56);
      v25 = *(_OWORD *)(v5 - 40);
      v26 = *(_OWORD *)(v5 - 24);
      *((_DWORD *)v19 - 2) = *((_DWORD *)v5 - 2);
      *(_OWORD *)(v19 - 24) = v26;
      *(_OWORD *)(v19 - 40) = v25;
      *(_OWORD *)(v19 - 56) = v24;
      v19 -= 104;
      v5 -= 104;
    }
    while (v5 != v12);
    v5 = (char *)*a1;
  }
  *a1 = v19;
  a1[1] = v11;
  a1[2] = &v17[104 * v16];
  if (!v5)
    goto LABEL_3;
  operator delete(v5);
  a1[1] = v11;
}

char *sub_20F235770(char **a1, __int128 *a2)
{
  unint64_t v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  char v14;
  char *v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  __int128 v22;
  char *v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _OWORD *v29;
  __int128 v30;
  __int128 v31;
  _OWORD *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  char v39;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v16 = *a1;
    v17 = 0xCBEEA4E1A08AD8F3 * ((v5 - *a1) >> 3);
    v18 = v17 + 1;
    if (v17 + 1 > 0x8AD8F2FBA93868)
      sub_20E867F44();
    v19 = 0xCBEEA4E1A08AD8F3 * ((uint64_t)(v4 - (_QWORD)v16) >> 3);
    if (2 * v19 > v18)
      v18 = 2 * v19;
    if (v19 >= 0x456C797DD49C34)
      v20 = 0x8AD8F2FBA93868;
    else
      v20 = v18;
    if (v20)
    {
      if (v20 > 0x8AD8F2FBA93868)
        sub_20E877A38();
      v21 = (char *)operator new(472 * v20);
    }
    else
    {
      v21 = 0;
    }
    v22 = a2[1];
    v23 = &v21[472 * v17];
    *(_OWORD *)v23 = *a2;
    *((_OWORD *)v23 + 1) = v22;
    v24 = &v21[472 * v20];
    *(_OWORD *)(v23 + 28) = *(__int128 *)((char *)a2 + 28);
    v25 = a2[8];
    *((_OWORD *)v23 + 7) = a2[7];
    *((_OWORD *)v23 + 8) = v25;
    v26 = a2[10];
    *((_OWORD *)v23 + 9) = a2[9];
    *((_OWORD *)v23 + 10) = v26;
    v27 = a2[4];
    *((_OWORD *)v23 + 3) = a2[3];
    *((_OWORD *)v23 + 4) = v27;
    v28 = a2[6];
    *((_OWORD *)v23 + 5) = a2[5];
    *((_OWORD *)v23 + 6) = v28;
    memcpy(v23 + 176, a2 + 11, 0x125uLL);
    v15 = v23 + 472;
    if (v5 != v16)
    {
      do
      {
        v29 = v23;
        v23 -= 472;
        v30 = *(_OWORD *)(v5 - 472);
        v31 = *(_OWORD *)(v5 - 456);
        *(_OWORD *)(v23 + 28) = *(_OWORD *)(v5 - 444);
        *(_OWORD *)v23 = v30;
        *((_OWORD *)v23 + 1) = v31;
        v32 = (_OWORD *)((char *)v29 - 424);
        v33 = *(_OWORD *)(v5 - 312);
        v35 = *(_OWORD *)(v5 - 360);
        v34 = *(_OWORD *)(v5 - 344);
        v32[6] = *(_OWORD *)(v5 - 328);
        v32[7] = v33;
        v32[4] = v35;
        v32[5] = v34;
        v36 = *(_OWORD *)(v5 - 424);
        v37 = *(_OWORD *)(v5 - 408);
        v38 = *(_OWORD *)(v5 - 376);
        v32[2] = *(_OWORD *)(v5 - 392);
        v32[3] = v38;
        *v32 = v36;
        v32[1] = v37;
        memcpy((char *)v29 - 296, v5 - 296, 0x120uLL);
        v39 = *(v5 - 4);
        *((_DWORD *)v29 - 2) = *((_DWORD *)v5 - 2);
        *((_BYTE *)v29 - 4) = v39;
        v5 -= 472;
      }
      while (v5 != v16);
      v5 = *a1;
    }
    *a1 = v23;
    a1[1] = v15;
    a1[2] = v24;
    if (v5)
      operator delete(v5);
  }
  else
  {
    v6 = *a2;
    v7 = a2[1];
    *(_OWORD *)(v5 + 28) = *(__int128 *)((char *)a2 + 28);
    *(_OWORD *)v5 = v6;
    *((_OWORD *)v5 + 1) = v7;
    v8 = a2[10];
    v10 = a2[7];
    v9 = a2[8];
    *((_OWORD *)v5 + 9) = a2[9];
    *((_OWORD *)v5 + 10) = v8;
    *((_OWORD *)v5 + 7) = v10;
    *((_OWORD *)v5 + 8) = v9;
    v11 = a2[3];
    v12 = a2[4];
    v13 = a2[6];
    *((_OWORD *)v5 + 5) = a2[5];
    *((_OWORD *)v5 + 6) = v13;
    *((_OWORD *)v5 + 3) = v11;
    *((_OWORD *)v5 + 4) = v12;
    memcpy(v5 + 176, a2 + 11, 0x120uLL);
    v14 = *((_BYTE *)a2 + 468);
    *((_DWORD *)v5 + 116) = *((_DWORD *)a2 + 116);
    v5[468] = v14;
    v15 = v5 + 472;
  }
  a1[1] = v15;
  return v15 - 472;
}

void sub_20F23599C(uint64_t a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int v10;

  v2 = *(char **)a1;
  if (a2 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)
  {
    if (a2 >> 60)
      sub_20E867F44();
    v4 = *(char **)(a1 + 8);
    v5 = 16 * a2;
    v6 = (char *)operator new(16 * a2);
    v7 = &v6[v4 - v2];
    v8 = v7;
    if (v4 != v2)
    {
      v8 = &v6[v4 - v2];
      do
      {
        v9 = *((_QWORD *)v4 - 2);
        v4 -= 16;
        v10 = *((_DWORD *)v4 + 2);
        *((_QWORD *)v8 - 2) = v9;
        v8 -= 16;
        *((_DWORD *)v8 + 2) = v10;
      }
      while (v4 != v2);
    }
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = &v6[v5];
    if (v2)
      operator delete(v2);
  }
}

uint64_t sub_20F235A44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t i;
  int v16;
  void **v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  size_t v22;
  unint64_t v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  void *__p[2];
  unsigned __int8 v30;
  uint64_t v31;
  std::ios_base v32;
  uint64_t v33;
  int v34;
  uint64_t __sb;
  const void *v36;
  uint64_t v37;
  const void *v38;
  unint64_t v39;
  __int128 v40;
  __int128 v41;
  int v42;
  uint64_t v43;
  int v44;

  std::streambuf::basic_streambuf();
  v6 = MEMORY[0x24BEDB848];
  __sb = MEMORY[0x24BEDB848] + 16;
  v40 = 0u;
  v41 = 0u;
  v42 = 24;
  v31 = MEMORY[0x24BEDB828] + 24;
  v32.__vftable = (std::ios_base_vtbl *)(MEMORY[0x24BEDB828] + 64);
  std::ios_base::init(&v32, &__sb);
  v33 = 0;
  v34 = -1;
  sub_20E86A980(&v31, (uint64_t)"[", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = sub_20E86A980(v7, (uint64_t)"] ", 2);
  v9 = sub_20E86A980(v8, (uint64_t)"Relocalization request: ", 24);
  v10 = *(char *)(a2 + 23);
  if (v10 >= 0)
    v11 = a2;
  else
    v11 = *(_QWORD *)a2;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a2 + 23);
  else
    v12 = *(_QWORD *)(a2 + 8);
  v13 = sub_20E86A980(v9, v11, v12);
  sub_20E86A980(v13, (uint64_t)" ", 1);
  v14 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); v14 != i; v14 += 112)
  {
    v16 = *(_DWORD *)(v14 + 16);
    v43 = *(_QWORD *)(v14 + 8);
    v44 = v16;
    sub_210216370((uint64_t)&v43);
    if ((v30 & 0x80u) == 0)
      v17 = __p;
    else
      v17 = (void **)__p[0];
    if ((v30 & 0x80u) == 0)
      v18 = v30;
    else
      v18 = (uint64_t)__p[1];
    v19 = sub_20E86A980(&v31, (uint64_t)v17, v18);
    sub_20E86A980(v19, (uint64_t)"(", 1);
    v20 = (_QWORD *)std::ostream::operator<<();
    v21 = sub_20E86A980(v20, (uint64_t)")", 1);
    sub_20E86A980(v21, (uint64_t)", ", 2);
    if ((char)v30 < 0)
      operator delete(__p[0]);
  }
  sub_20E86A980(&v31, (uint64_t)"\n", 1);
  if ((v42 & 0x10) != 0)
  {
    v23 = *((_QWORD *)&v41 + 1);
    if (*((_QWORD *)&v41 + 1) < v39)
    {
      *((_QWORD *)&v41 + 1) = v39;
      v23 = v39;
    }
    v24 = v38;
    v22 = v23 - (_QWORD)v38;
    if (v23 - (unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_35;
  }
  else
  {
    if ((v42 & 8) == 0)
    {
      v22 = 0;
      a3[23] = 0;
      goto LABEL_31;
    }
    v24 = v36;
    v22 = v37 - (_QWORD)v36;
    if ((unint64_t)(v37 - (_QWORD)v36) >= 0x7FFFFFFFFFFFFFF8)
LABEL_35:
      sub_20E860B7C();
  }
  if (v22 >= 0x17)
  {
    v25 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17)
      v25 = v22 | 7;
    v26 = v25 + 1;
    v27 = operator new(v25 + 1);
    *((_QWORD *)a3 + 1) = v22;
    *((_QWORD *)a3 + 2) = v26 | 0x8000000000000000;
    *(_QWORD *)a3 = v27;
    a3 = v27;
    goto LABEL_30;
  }
  a3[23] = v22;
  if (v22)
LABEL_30:
    memmove(a3, v24, v22);
LABEL_31:
  a3[v22] = 0;
  std::ostream::~ostream();
  __sb = v6 + 16;
  if (SBYTE7(v41) < 0)
    operator delete((void *)v40);
  return std::streambuf::~streambuf();
}

void sub_20F235D88(_QWORD *a1)
{
  sub_20F23678C(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20F235DAC(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 == v2)
    {
      v1[1] = v2;
      operator delete(v5);
    }
    else
    {
      do
      {
        v7 = *((_QWORD *)v4 - 3);
        if (v7)
        {
          v8 = *((_QWORD *)v4 - 2);
          v6 = (void *)*((_QWORD *)v4 - 3);
          if (v8 != v7)
          {
            do
            {
              v9 = *(void **)(v8 - 32);
              if (v9)
              {
                *(_QWORD *)(v8 - 24) = v9;
                operator delete(v9);
              }
              v10 = *(void **)(v8 - 56);
              if (v10)
              {
                *(_QWORD *)(v8 - 48) = v10;
                operator delete(v10);
              }
              v8 -= 64;
            }
            while (v8 != v7);
            v6 = (void *)*((_QWORD *)v4 - 3);
          }
          *((_QWORD *)v4 - 2) = v7;
          operator delete(v6);
        }
        v4 -= 48;
      }
      while (v4 != v2);
      v11 = **a1;
      v1[1] = v2;
      operator delete(v11);
    }
  }
}

uint64_t sub_20F235E90(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(a1 + 24);
    if (v3 != v2)
    {
      do
      {
        v5 = *(void **)(v3 - 32);
        if (v5)
        {
          *(_QWORD *)(v3 - 24) = v5;
          operator delete(v5);
        }
        v6 = *(void **)(v3 - 56);
        if (v6)
        {
          *(_QWORD *)(v3 - 48) = v6;
          operator delete(v6);
        }
        v3 -= 64;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v4);
  }
  return a1;
}

void **sub_20F235F10(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 4);
        if (v5)
        {
          *((_QWORD *)v3 - 3) = v5;
          operator delete(v5);
        }
        v6 = (void *)*((_QWORD *)v3 - 7);
        if (v6)
        {
          *((_QWORD *)v3 - 6) = v6;
          operator delete(v6);
        }
        v3 -= 64;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_20F235F90(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20E863438(v5);
  v21[0] = v5;
  sub_20FDC5010((_QWORD *)(v5 + 16), *a3);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_20E860B7C();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v14 + 128);
    MEMORY[0x212BC6398](v14, 0x10B2C40EED050F3);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_20E877AB8();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24C9FBD98[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_20F2361E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20F236204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F236220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20FD0DE48((uint64_t *)va);
  _Unwind_Resume(a1);
}

double *sub_20F236234(double *a1, _QWORD *a2, double a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unsigned int *v8;
  unsigned int *i;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  char *v21;
  char *v22;
  __int128 v23;

  *a1 = 0.0;
  a1[1] = 0.0;
  a1[2] = 0.0;
  a1[3] = a3 * a3;
  if (a3 > 0.0)
  {
    v5 = a2[4] - a2[3];
    if (v5)
    {
      if ((unint64_t)v5 >= 0x2AAAAAAAAAAAAAA9)
        sub_20E969238();
      v6 = v5 >> 2;
      v7 = (char *)operator new(24 * (v5 >> 2));
      *(_QWORD *)a1 = v7;
      *((_QWORD *)a1 + 1) = v7;
      *((_QWORD *)a1 + 2) = &v7[24 * v6];
      v8 = (unsigned int *)a2[3];
      for (i = (unsigned int *)a2[4]; v8 != i; v7 = v22)
      {
        while (1)
        {
          v11 = *(_QWORD *)(*a2 + 40 * *v8 + 32) + 8;
          v12 = *((_QWORD *)a1 + 2);
          if ((unint64_t)v7 >= v12)
            break;
          v10 = *(_OWORD *)v11;
          *((_QWORD *)v7 + 2) = *(_QWORD *)(*(_QWORD *)(*a2 + 40 * *v8 + 32) + 24);
          *(_OWORD *)v7 = v10;
          *((_QWORD *)a1 + 1) = v7 + 24;
          ++v8;
          v7 += 24;
          if (v8 == i)
            return a1;
        }
        v13 = *(char **)a1;
        v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v7[-*(_QWORD *)a1] >> 3);
        v15 = v14 + 1;
        if (v14 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20E969238();
        v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (_QWORD)v13) >> 3);
        if (2 * v16 > v15)
          v15 = 2 * v16;
        if (v16 >= 0x555555555555555)
          v17 = 0xAAAAAAAAAAAAAAALL;
        else
          v17 = v15;
        if (v17)
        {
          if (v17 > 0xAAAAAAAAAAAAAAALL)
            sub_20E877A38();
          v18 = (char *)operator new(24 * v17);
        }
        else
        {
          v18 = 0;
        }
        v19 = &v18[24 * v14];
        v20 = *(_OWORD *)v11;
        v21 = &v18[24 * v17];
        *((_QWORD *)v19 + 2) = *(_QWORD *)(v11 + 16);
        *(_OWORD *)v19 = v20;
        v22 = v19 + 24;
        if (v7 == v13)
        {
          *(_QWORD *)a1 = v19;
          *((_QWORD *)a1 + 1) = v22;
          *((_QWORD *)a1 + 2) = v21;
        }
        else
        {
          do
          {
            v23 = *(_OWORD *)(v7 - 24);
            *((_QWORD *)v19 - 1) = *((_QWORD *)v7 - 1);
            *(_OWORD *)(v19 - 24) = v23;
            v19 -= 24;
            v7 -= 24;
          }
          while (v7 != v13);
          v7 = *(char **)a1;
          *(_QWORD *)a1 = v19;
          *((_QWORD *)a1 + 1) = v22;
          *((_QWORD *)a1 + 2) = v21;
          if (!v7)
            goto LABEL_24;
        }
        operator delete(v7);
LABEL_24:
        *((_QWORD *)a1 + 1) = v22;
        ++v8;
      }
    }
  }
  return a1;
}

void sub_20F236454(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_20F236478(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  __int128 *v6;
  _QWORD *v7;
  uint64_t v8;
  _OWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void **v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int64_t v21;
  void **v22;
  _BYTE *v23;
  __int128 *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  char v33;
  _OWORD *v34;
  _OWORD *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  char v55;

  v6 = a2;
  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(_OWORD **)result;
  if (0xCBEEA4E1A08AD8F3 * ((v8 - *(_QWORD *)result) >> 3) >= a4)
  {
    v22 = (void **)(result + 8);
    v23 = (_BYTE *)*((_QWORD *)result + 1);
    if (0xCBEEA4E1A08AD8F3 * ((v23 - (_BYTE *)v9) >> 3) >= a4)
    {
      v45 = *(_QWORD *)result;
      if (a2 != a3)
      {
        v46 = *(_QWORD *)result;
        do
        {
          v47 = *v6;
          v48 = v6[1];
          *(_OWORD *)(v46 + 28) = *(__int128 *)((char *)v6 + 28);
          *(_OWORD *)v46 = v47;
          *(_OWORD *)(v46 + 16) = v48;
          v49 = v6[10];
          v51 = v6[7];
          v50 = v6[8];
          *(_OWORD *)(v46 + 144) = v6[9];
          *(_OWORD *)(v46 + 160) = v49;
          *(_OWORD *)(v46 + 112) = v51;
          *(_OWORD *)(v46 + 128) = v50;
          v52 = v6[3];
          v53 = v6[4];
          v54 = v6[6];
          *(_OWORD *)(v46 + 80) = v6[5];
          *(_OWORD *)(v46 + 96) = v54;
          *(_OWORD *)(v46 + 48) = v52;
          *(_OWORD *)(v46 + 64) = v53;
          result = (char *)memcpy((void *)(v46 + 176), v6 + 11, 0x120uLL);
          v55 = *((_BYTE *)v6 + 468);
          *(_DWORD *)(v46 + 464) = *((_DWORD *)v6 + 116);
          *(_BYTE *)(v46 + 468) = v55;
          v45 += 472;
          v6 = (__int128 *)((char *)v6 + 472);
          v46 += 472;
        }
        while (v6 != a3);
      }
      v21 = v45 - (_QWORD)v9;
    }
    else
    {
      v24 = (__int128 *)((char *)a2 + 8 * ((v23 - (_BYTE *)v9) >> 3));
      if (v23 != (_BYTE *)v9)
      {
        do
        {
          v25 = *v6;
          v26 = v6[1];
          *(_OWORD *)((char *)v9 + 28) = *(__int128 *)((char *)v6 + 28);
          *v9 = v25;
          v9[1] = v26;
          v27 = v6[10];
          v29 = v6[7];
          v28 = v6[8];
          v9[9] = v6[9];
          v9[10] = v27;
          v9[7] = v29;
          v9[8] = v28;
          v30 = v6[3];
          v31 = v6[4];
          v32 = v6[6];
          v9[5] = v6[5];
          v9[6] = v32;
          v9[3] = v30;
          v9[4] = v31;
          result = (char *)memcpy(v9 + 11, v6 + 11, 0x120uLL);
          v33 = *((_BYTE *)v6 + 468);
          *((_DWORD *)v9 + 116) = *((_DWORD *)v6 + 116);
          *((_BYTE *)v9 + 468) = v33;
          v6 = (__int128 *)((char *)v6 + 472);
          v9 = (_OWORD *)((char *)v9 + 472);
        }
        while (v6 != v24);
        v9 = *v22;
      }
      v34 = v9;
      if (v24 != a3)
      {
        v34 = v9;
        v35 = v9;
        do
        {
          v36 = *v24;
          v37 = v24[1];
          *(_OWORD *)((char *)v35 + 28) = *(__int128 *)((char *)v24 + 28);
          *v35 = v36;
          v35[1] = v37;
          v38 = v24[10];
          v40 = v24[7];
          v39 = v24[8];
          v35[9] = v24[9];
          v35[10] = v38;
          v35[7] = v40;
          v35[8] = v39;
          v41 = v24[3];
          v42 = v24[4];
          v43 = v24[6];
          v35[5] = v24[5];
          v35[6] = v43;
          v35[3] = v41;
          v35[4] = v42;
          result = (char *)memcpy(v35 + 11, v24 + 11, 0x120uLL);
          v44 = *((_BYTE *)v24 + 468);
          *((_DWORD *)v35 + 116) = *((_DWORD *)v24 + 116);
          *((_BYTE *)v35 + 468) = v44;
          v34 = (_OWORD *)((char *)v34 + 472);
          v24 = (__int128 *)((char *)v24 + 472);
          v35 = (_OWORD *)((char *)v35 + 472);
        }
        while (v24 != a3);
      }
      v21 = (char *)v34 - (char *)v9;
    }
  }
  else
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x8AD8F2FBA93868)
      goto LABEL_28;
    v10 = 0xCBEEA4E1A08AD8F3 * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    v12 = v10 >= 0x456C797DD49C34 ? 0x8AD8F2FBA93868 : v11;
    if (v12 > 0x8AD8F2FBA93868)
LABEL_28:
      sub_20E867F44();
    v13 = 472 * v12;
    result = (char *)operator new(472 * v12);
    v9 = result;
    *v7 = result;
    v7[1] = result;
    v14 = (void **)(v7 + 1);
    v7[2] = &result[v13];
    v15 = result;
    if (v6 != a3)
    {
      v15 = result;
      do
      {
        v16 = v6[1];
        *(_OWORD *)v15 = *v6;
        *((_OWORD *)v15 + 1) = v16;
        *(_OWORD *)(v15 + 28) = *(__int128 *)((char *)v6 + 28);
        v17 = v6[8];
        *((_OWORD *)v15 + 7) = v6[7];
        *((_OWORD *)v15 + 8) = v17;
        v18 = v6[10];
        *((_OWORD *)v15 + 9) = v6[9];
        *((_OWORD *)v15 + 10) = v18;
        v19 = v6[4];
        *((_OWORD *)v15 + 3) = v6[3];
        *((_OWORD *)v15 + 4) = v19;
        v20 = v6[6];
        *((_OWORD *)v15 + 5) = v6[5];
        *((_OWORD *)v15 + 6) = v20;
        result = (char *)memcpy(v15 + 176, v6 + 11, 0x120uLL);
        *((_DWORD *)v15 + 116) = *((_DWORD *)v6 + 116);
        v15[468] = *((_BYTE *)v6 + 468);
        v15 += 472;
        v6 = (__int128 *)((char *)v6 + 472);
      }
      while (v6 != a3);
    }
    v21 = v15 - (char *)v9;
    v22 = v14;
  }
  *v22 = (char *)v9 + v21;
  return result;
}

_QWORD *sub_20F23678C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;

  *a1 = &off_24C9FBD50;
  v2 = a1[23];
  if (v2)
  {
    v3 = a1[24];
    v4 = (void *)a1[23];
    if (v3 != v2)
    {
      do
      {
        v6 = *(_QWORD *)(v3 - 24);
        if (v6)
        {
          v7 = *(_QWORD *)(v3 - 16);
          v5 = *(void **)(v3 - 24);
          if (v7 != v6)
          {
            do
            {
              v8 = *(void **)(v7 - 32);
              if (v8)
              {
                *(_QWORD *)(v7 - 24) = v8;
                operator delete(v8);
              }
              v9 = *(void **)(v7 - 56);
              if (v9)
              {
                *(_QWORD *)(v7 - 48) = v9;
                operator delete(v9);
              }
              v7 -= 64;
            }
            while (v7 != v6);
            v5 = *(void **)(v3 - 24);
          }
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v5);
        }
        v3 -= 48;
      }
      while (v3 != v2);
      v4 = (void *)a1[23];
    }
    a1[24] = v2;
    operator delete(v4);
  }
  v10 = a1[18];
  if (v10)
  {
    v11 = a1[19];
    v12 = (void *)a1[18];
    if (v11 != v10)
    {
      do
      {
        v14 = *(_QWORD *)(v11 - 24);
        if (v14)
        {
          v15 = *(_QWORD *)(v11 - 16);
          v13 = *(void **)(v11 - 24);
          if (v15 != v14)
          {
            do
            {
              v16 = *(void **)(v15 - 32);
              if (v16)
              {
                *(_QWORD *)(v15 - 24) = v16;
                operator delete(v16);
              }
              v17 = *(void **)(v15 - 56);
              if (v17)
              {
                *(_QWORD *)(v15 - 48) = v17;
                operator delete(v17);
              }
              v15 -= 64;
            }
            while (v15 != v14);
            v13 = *(void **)(v11 - 24);
          }
          *(_QWORD *)(v11 - 16) = v14;
          operator delete(v13);
        }
        v11 -= 48;
      }
      while (v11 != v10);
      v12 = (void *)a1[18];
    }
    a1[19] = v10;
    operator delete(v12);
  }
  return sub_20F23203C(a1);
}

void sub_20F2368E0(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  uint64_t v9;
  int v10;
  size_t v11;
  void **v12;
  unint64_t v13;
  unint64_t v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *__dst[2];
  unint64_t v24;
  _QWORD v25[5];
  _QWORD *v26;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20E863438(v5);
  v25[0] = v5;
  v6 = *a3;
  if (v6 > 3)
  {
    v8 = "Unknown";
    v9 = 7;
  }
  else
  {
    v7 = v6;
    v8 = off_24C9FBE60[v7];
    v9 = *(_QWORD *)((char *)&unk_2103A91A8 + v7 * 8);
  }
  sub_20E86A980((_QWORD *)(v5 + 16), (uint64_t)v8, v9);
  v10 = *(_DWORD *)(v5 + 120);
  if ((v10 & 0x10) != 0)
  {
    v13 = *(_QWORD *)(v5 + 112);
    v14 = *(_QWORD *)(v5 + 72);
    if (v13 < v14)
    {
      *(_QWORD *)(v5 + 112) = v14;
      v13 = v14;
    }
    v15 = *(const void **)(v5 + 64);
    v11 = v13 - (_QWORD)v15;
    if (v13 - (unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_25;
  }
  else
  {
    if ((v10 & 8) == 0)
    {
      v11 = 0;
      HIBYTE(v24) = 0;
      v12 = __dst;
      goto LABEL_17;
    }
    v15 = *(const void **)(v5 + 40);
    v11 = *(_QWORD *)(v5 + 56) - (_QWORD)v15;
    if (v11 >= 0x7FFFFFFFFFFFFFF8)
LABEL_25:
      sub_20E860B7C();
  }
  if (v11 >= 0x17)
  {
    v16 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v16 = v11 | 7;
    v17 = v16 + 1;
    v12 = (void **)operator new(v16 + 1);
    __dst[1] = (void *)v11;
    v24 = v17 | 0x8000000000000000;
    __dst[0] = v12;
    goto LABEL_16;
  }
  HIBYTE(v24) = v11;
  v12 = __dst;
  if (v11)
LABEL_16:
    memmove(v12, v15, v11);
LABEL_17:
  *((_BYTE *)v12 + v11) = 0;
  v18 = v25[0];
  if (v25[0])
  {
    v19 = MEMORY[0x24BEDB7F0];
    v20 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v25[0] = *MEMORY[0x24BEDB7F0];
    v21 = *(_QWORD *)(v19 + 72);
    *(_QWORD *)(v18 + *(_QWORD *)(v20 - 24)) = *(_QWORD *)(v19 + 64);
    *(_QWORD *)(v18 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v18 + 16) = v21;
    if (*(char *)(v18 + 111) < 0)
      operator delete(*(void **)(v18 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v18 + 128);
    MEMORY[0x212BC6398](v18, 0x10B2C40EED050F3);
  }
  v25[0] = a2;
  v25[1] = __dst;
  v25[2] = a2;
  v25[3] = __dst;
  v25[4] = __dst;
  v22 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v22 == -1)
    sub_20E877AB8();
  v26 = v25;
  ((void (*)(_QWORD **, uint64_t))off_24C9FBD98[v22])(&v26, a2);
  if (SHIBYTE(v24) < 0)
    operator delete(__dst[0]);
}

void sub_20F236B64(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20F236B88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F236BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20FD0DE48((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20F236BB8(_QWORD *a1, uint64_t a2, unint64_t a3, __int128 *a4)
{
  char *v7;
  size_t v8;
  _QWORD *v9;
  char *v10;
  void *v11;
  char *v12;
  char *i;
  void *v14;
  void *v15;
  char *v16;
  char *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v22[2];
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  void *__p[2];
  uint64_t v27;
  _QWORD *v28;
  char v29;

  *a1 = 0;
  a1[1] = a3;
  sub_20F236D98((uint64_t)v22, a2);
  v24 = *a4;
  v25 = *((_QWORD *)a4 + 2);
  v7 = (char *)v22[0];
  *(_OWORD *)__p = *(_OWORD *)v22;
  v27 = v23;
  v22[0] = 0;
  v22[1] = 0;
  v23 = 0;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  v28 = a1 + 2;
  v29 = 0;
  if (!a3)
  {
    v12 = v7;
    if (!v7)
      goto LABEL_16;
    goto LABEL_8;
  }
  if (a3 >= 0x555555555555556)
    sub_20E867F44();
  v8 = 6 * a3;
  v9 = operator new(v8 * 8);
  a1[2] = v9;
  a1[3] = v9;
  v10 = (char *)&v9[v8];
  a1[4] = &v9[v8];
  do
  {
    *(_OWORD *)v9 = v24;
    v11 = __p[0];
    v9[2] = v25;
    v9[4] = 0;
    v9[5] = 0;
    v9[3] = 0;
    sub_20F237650((uint64_t)(v9 + 3), (uint64_t)v11, (uint64_t)__p[1], ((char *)__p[1] - (char *)v11) >> 6);
    v9 += 6;
    v8 -= 6;
  }
  while (v8 * 8);
  a1[3] = v10;
  v12 = (char *)__p[0];
  if (__p[0])
  {
LABEL_8:
    for (i = (char *)__p[1]; i != v12; i -= 64)
    {
      v14 = (void *)*((_QWORD *)i - 4);
      if (v14)
      {
        *((_QWORD *)i - 3) = v14;
        operator delete(v14);
      }
      v15 = (void *)*((_QWORD *)i - 7);
      if (v15)
      {
        *((_QWORD *)i - 6) = v15;
        operator delete(v15);
      }
    }
    operator delete(v12);
  }
LABEL_16:
  v16 = (char *)v22[0];
  if (v22[0])
  {
    v17 = (char *)v22[1];
    v18 = v22[0];
    if (v22[1] != v22[0])
    {
      do
      {
        v19 = (void *)*((_QWORD *)v17 - 4);
        if (v19)
        {
          *((_QWORD *)v17 - 3) = v19;
          operator delete(v19);
        }
        v20 = (void *)*((_QWORD *)v17 - 7);
        if (v20)
        {
          *((_QWORD *)v17 - 6) = v20;
          operator delete(v20);
        }
        v17 -= 64;
      }
      while (v17 != v16);
      v18 = v22[0];
    }
    v22[1] = v16;
    operator delete(v18);
  }
  return a1;
}

void sub_20F236D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;

  sub_20F235DAC((void ***)(v13 - 48));
  sub_20F235E90((uint64_t)&a13);
  sub_20F235F10(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20F236D98(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t i;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  char *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _DWORD v19[624];
  uint64_t v20;
  uint64_t (**v21)();
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = 5489;
  v19[0] = 5489;
  for (i = 1; i != 624; ++i)
  {
    v4 = i + 1812433253 * (v4 ^ (v4 >> 30));
    v19[i] = v4;
  }
  v20 = 0;
  v6 = (std::__shared_weak_count *)operator new(0x28uLL);
  v7 = v6;
  v6->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA1F558;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24CA1F5A8;
  LODWORD(v6[1].__shared_owners_) = 5489;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v21 = &off_24CA1F4F8;
  v22 = v6 + 1;
  v23 = v6;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  sub_20F237008(a1, *(_QWORD *)(a2 + 8));
  if (*(_QWORD *)(a2 + 8))
  {
    v13 = 0;
    v14 = *(char **)(a1 + 8);
    do
    {
      if ((unint64_t)v14 >= *(_QWORD *)(a1 + 16))
      {
        v14 = sub_20F2371A4((void **)a1, (int *)a2, (uint64_t)v19);
      }
      else
      {
        *(_DWORD *)v14 = 0;
        *((_QWORD *)v14 + 1) = 0;
        *((_QWORD *)v14 + 2) = 0;
        *((_QWORD *)v14 + 3) = 0;
        sub_20F237384((uint64_t)(v14 + 32), *(_DWORD *)a2, (uint64_t)v19);
        v14 += 64;
        *(_QWORD *)(a1 + 8) = v14;
      }
      *(_QWORD *)(a1 + 8) = v14;
      ++v13;
    }
    while (*(_QWORD *)(a2 + 8) > (unint64_t)v13);
  }
  v15 = v23;
  if (v23)
  {
    v16 = (unint64_t *)&v23->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return a1;
}

void sub_20F236FA4(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v2;

  sub_210231620(v2);
  sub_20F235F10(v1);
  _Unwind_Resume(a1);
}

void sub_20F236FD8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;
  void *v6;

  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v3 + 16) = v6;
    operator delete(v6);
  }
  *(_QWORD *)(v1 + 8) = v3;
  sub_210231620(v2);
  sub_20F235F10((void **)v1);
  _Unwind_Resume(a1);
}

void sub_20F237008(uint64_t a1, unint64_t a2)
{
  char *v2;
  _BYTE *v4;
  unint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  void *v13;
  void *v14;

  v2 = *(char **)a1;
  if (a2 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 6)
  {
    if (a2 >> 58)
      sub_20E867F44();
    v4 = *(_BYTE **)(a1 + 8);
    v5 = a2 << 6;
    v6 = (char *)operator new(a2 << 6);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      v9 = 0;
      do
      {
        v10 = &v8[v9];
        v11 = &v4[v9];
        *((_DWORD *)v10 - 16) = *(_DWORD *)&v4[v9 - 64];
        *(_OWORD *)(v10 - 56) = *(_OWORD *)&v4[v9 - 56];
        *((_QWORD *)v10 - 5) = *(_QWORD *)&v4[v9 - 40];
        *((_QWORD *)v11 - 7) = 0;
        *((_QWORD *)v11 - 6) = 0;
        *((_QWORD *)v11 - 5) = 0;
        *((_OWORD *)v10 - 2) = *(_OWORD *)&v4[v9 - 32];
        *((_QWORD *)v10 - 2) = *(_QWORD *)&v4[v9 - 16];
        *((_QWORD *)v11 - 4) = 0;
        *((_QWORD *)v11 - 3) = 0;
        *((_QWORD *)v11 - 2) = 0;
        *((_DWORD *)v10 - 2) = *(_DWORD *)&v4[v9 - 8];
        v9 -= 64;
      }
      while (&v4[v9] != v2);
      v2 = *(char **)a1;
      v12 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = &v8[v9];
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      while (v12 != v2)
      {
        v13 = (void *)*((_QWORD *)v12 - 4);
        if (v13)
        {
          *((_QWORD *)v12 - 3) = v13;
          operator delete(v13);
        }
        v14 = (void *)*((_QWORD *)v12 - 7);
        if (v14)
        {
          *((_QWORD *)v12 - 6) = v14;
          operator delete(v14);
        }
        v12 -= 64;
      }
    }
    if (v2)
      operator delete(v2);
  }
}

uint64_t sub_20F237130(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 64;
    v4 = *(void **)(i - 32);
    if (v4)
    {
      *(_QWORD *)(i - 24) = v4;
      operator delete(v4);
    }
    v5 = *(void **)(i - 56);
    if (v5)
    {
      *(_QWORD *)(i - 48) = v5;
      operator delete(v5);
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char *sub_20F2371A4(void **a1, int *a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  void *v18;
  void *v19;
  char *v21;
  char *v22;

  v4 = ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 6;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 58)
    sub_20E867F44();
  v8 = (_BYTE *)a1[2] - (_BYTE *)*a1;
  if (v8 >> 5 > v5)
    v5 = v8 >> 5;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0)
    v9 = 0x3FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  if (v9)
  {
    if (v9 >> 58)
      sub_20E877A38();
    v10 = (char *)operator new(v9 << 6);
  }
  else
  {
    v10 = 0;
  }
  v21 = &v10[64 * v4];
  v22 = &v10[64 * v9];
  *(_DWORD *)v21 = 0;
  *((_QWORD *)v21 + 1) = 0;
  *((_QWORD *)v21 + 2) = 0;
  *((_QWORD *)v21 + 3) = 0;
  sub_20F237384((uint64_t)(v21 + 32), *a2, a3);
  v11 = v21 + 64;
  v12 = (char *)*a1;
  v13 = (char *)a1[1];
  if (v13 == *a1)
  {
    *a1 = v21;
    a1[1] = v11;
    a1[2] = v22;
  }
  else
  {
    v14 = 0;
    do
    {
      v15 = &v21[v14];
      v16 = &v13[v14];
      *((_DWORD *)v15 - 16) = *(_DWORD *)&v13[v14 - 64];
      *((_QWORD *)v15 - 6) = 0;
      *((_QWORD *)v15 - 5) = 0;
      *((_QWORD *)v15 - 7) = 0;
      *(_OWORD *)(v15 - 56) = *(_OWORD *)&v13[v14 - 56];
      *((_QWORD *)v15 - 5) = *(_QWORD *)&v13[v14 - 40];
      *((_QWORD *)v16 - 7) = 0;
      *((_QWORD *)v16 - 6) = 0;
      *((_QWORD *)v16 - 5) = 0;
      *((_QWORD *)v15 - 4) = 0;
      *((_QWORD *)v15 - 3) = 0;
      *((_QWORD *)v15 - 2) = 0;
      *((_OWORD *)v15 - 2) = *(_OWORD *)&v13[v14 - 32];
      *((_QWORD *)v15 - 2) = *(_QWORD *)&v13[v14 - 16];
      *((_QWORD *)v16 - 4) = 0;
      *((_QWORD *)v16 - 3) = 0;
      *((_QWORD *)v16 - 2) = 0;
      *((_DWORD *)v15 - 2) = *(_DWORD *)&v13[v14 - 8];
      v14 -= 64;
    }
    while (&v13[v14] != v12);
    v13 = (char *)*a1;
    v17 = (char *)a1[1];
    *a1 = &v21[v14];
    a1[1] = v11;
    a1[2] = v22;
    while (v17 != v13)
    {
      v18 = (void *)*((_QWORD *)v17 - 4);
      if (v18)
      {
        *((_QWORD *)v17 - 3) = v18;
        operator delete(v18);
      }
      v19 = (void *)*((_QWORD *)v17 - 7);
      if (v19)
      {
        *((_QWORD *)v17 - 6) = v19;
        operator delete(v19);
      }
      v17 -= 64;
    }
  }
  if (v13)
    operator delete(v13);
  return v21 + 64;
}

void sub_20F237360(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  void *v5;
  va_list va;

  va_start(va, a2);
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 16) = v5;
    operator delete(v5);
  }
  sub_20F237130((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20F237384(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  unsigned int v11;
  unsigned int v12;
  char v13;
  unint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  _OWORD *v32;
  __int128 *v33;
  unint64_t v34;
  __int128 v35;
  __int16 v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  _QWORD *v40;
  std::__shared_weak_count *v42;
  uint64_t v43;

  v5 = (_QWORD *)a1;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = a2;
  v6 = (std::__shared_weak_count *)operator new();
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F1128;
  v6->__shared_owners_ = 0;
  v6->__shared_weak_owners_ = 0;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)a3;
  v42 = v6;
  v43 = 0x1FF00000000;
  v7 = 14;
  if (a2 != 1)
    v7 = 0;
  if (a2)
    v8 = v7;
  else
    v8 = 15;
  if (!v8)
  {
LABEL_31:
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v38 = __ldaxr(p_shared_owners);
    while (__stlxr(v38 - 1, p_shared_owners));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    return v5;
  }
  v9 = 0;
  v40 = v5;
  do
  {
    v11 = sub_20F165568((uint64_t)&v43, a3, &v43);
    v12 = v11;
    v13 = v11 & 7;
    v15 = (_BYTE *)v5[1];
    v14 = v5[2];
    if ((unint64_t)v15 < v14)
    {
      *v15 = v11 >> 3;
      v15[1] = v13;
      v10 = v15 + 2;
      goto LABEL_9;
    }
    v16 = v8;
    v17 = (_BYTE *)*v5;
    v18 = (uint64_t)&v15[-*v5];
    if (v18 <= -3)
      sub_20E867F44();
    v19 = v18 >> 1;
    v20 = v14 - (_QWORD)v17;
    if (v20 <= (v18 >> 1) + 1)
      v21 = v19 + 1;
    else
      v21 = v20;
    if (v20 >= 0x7FFFFFFFFFFFFFFELL)
      v22 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v22 = v21;
    if (v22 < 0)
      sub_20E877A38();
    v23 = operator new(2 * v22);
    v24 = &v23[2 * v19];
    *v24 = v12 >> 3;
    v24[1] = v13;
    v25 = v15 - v17;
    if (v15 == v17)
    {
      v27 = &v23[2 * v19];
      v8 = v16;
      goto LABEL_28;
    }
    v26 = v25 - 2;
    if ((unint64_t)(v25 - 2) < 0x1E)
    {
      v27 = &v23[2 * v19];
      v8 = v16;
      do
      {
LABEL_27:
        v36 = *((_WORD *)v15 - 1);
        v15 -= 2;
        *((_WORD *)v27 - 1) = v36;
        v27 -= 2;
      }
      while (v15 != v17);
      goto LABEL_28;
    }
    v28 = &v15[-(v18 & 0xFFFFFFFFFFFFFFFELL)] - v23;
    v27 = &v23[2 * v19];
    v8 = v16;
    if (v28 < 0x20)
      goto LABEL_27;
    v29 = (v26 >> 1) + 1;
    v30 = 2 * (v29 & 0xFFFFFFFFFFFFFFF0);
    v31 = &v15[-v30];
    v27 = &v24[-v30];
    v32 = &v23[2 * v19 - 16];
    v33 = (__int128 *)(v15 - 16);
    v34 = v29 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v35 = *v33;
      *(v32 - 1) = *(v33 - 1);
      *v32 = v35;
      v32 -= 2;
      v33 -= 2;
      v34 -= 16;
    }
    while (v34);
    v15 = v31;
    if (v29 != (v29 & 0xFFFFFFFFFFFFFFF0))
      goto LABEL_27;
LABEL_28:
    v10 = v24 + 2;
    v5 = v40;
    *v40 = v27;
    v40[1] = v24 + 2;
    v40[2] = &v23[2 * v22];
    if (v17)
      operator delete(v17);
LABEL_9:
    v5[1] = v10;
    ++v9;
  }
  while (v9 != v8);
  v6 = v42;
  if (v42)
    goto LABEL_31;
  return v5;
}

void sub_20F2375FC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_rethrow();
}

void sub_20F23760C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v10;

  __cxa_end_catch();
  v10 = *(void **)a9;
  if (*(_QWORD *)a9)
  {
    *(_QWORD *)(a9 + 8) = v10;
    operator delete(v10);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20F237650(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;

  if (a4)
  {
    v5 = (_QWORD *)result;
    if (a4 >> 58)
      sub_20E867F44();
    result = (uint64_t)operator new(a4 << 6);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = result + (a4 << 6);
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = sub_20F237800(v8 + v9, (int *)(a2 + v9));
        v9 += 64;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_20F2376F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20F23775C(&a9);
  _Unwind_Resume(a1);
}

void sub_20F23770C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  void *v14;
  void *v15;

  for (; v11; v11 -= 64)
  {
    v13 = v10 + v11;
    v14 = *(void **)(v10 + v11 - 32);
    if (v14)
    {
      *(_QWORD *)(v13 - 24) = v14;
      operator delete(v14);
    }
    v15 = *(void **)(v13 - 56);
    if (v15)
    {
      *(_QWORD *)(v10 + v11 - 48) = v15;
      operator delete(v15);
    }
  }
  *(_QWORD *)(v9 + 8) = v10;
  sub_20F23775C(&a9);
  _Unwind_Resume(a1);
}

void ***sub_20F23775C(void ***result)
{
  void ***v1;
  void **v2;
  char *v3;
  char *v4;
  void *v5;
  void *v6;
  void *v7;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (char *)**result;
    if (v3)
    {
      v4 = (char *)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          v6 = (void *)*((_QWORD *)v4 - 4);
          if (v6)
          {
            *((_QWORD *)v4 - 3) = v6;
            operator delete(v6);
          }
          v7 = (void *)*((_QWORD *)v4 - 7);
          if (v7)
          {
            *((_QWORD *)v4 - 6) = v7;
            operator delete(v7);
          }
          v4 -= 64;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20F237800(uint64_t a1, int *a2)
{
  int v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  __int16 v15;
  char *v16;
  unint64_t v18;
  BOOL v19;
  BOOL v20;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  _OWORD *v25;
  __int128 *v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  v4 = *a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v6 = (_BYTE *)*((_QWORD *)a2 + 1);
  v5 = (_BYTE *)*((_QWORD *)a2 + 2);
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0)
      sub_20E867F44();
    v8 = (char *)operator new(v5 - v6);
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v8;
    v9 = &v8[4 * (v7 >> 2)];
    *(_QWORD *)(a1 + 24) = v9;
    memcpy(v8, v6, v7);
    *(_QWORD *)(a1 + 16) = v9;
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v11 = (char *)*((_QWORD *)a2 + 4);
  v10 = (char *)*((_QWORD *)a2 + 5);
  v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0)
      sub_20E867F44();
    v13 = (char *)operator new(v10 - v11);
    *(_QWORD *)(a1 + 32) = v13;
    *(_QWORD *)(a1 + 40) = v13;
    *(_QWORD *)(a1 + 48) = &v13[2 * (v12 >> 1)];
    v14 = v12 - 2;
    if ((unint64_t)(v12 - 2) < 0x3E)
      goto LABEL_31;
    v18 = (v14 & 0xFFFFFFFFFFFFFFFELL) + 2;
    v19 = v13 + 1 >= &v11[v18] || v11 + 1 >= &v13[v18];
    v20 = !v19;
    if (v11 < &v13[v14 | 1] && v13 < &v11[v14 | 1])
      goto LABEL_31;
    if (v20)
      goto LABEL_31;
    v22 = (v14 >> 1) + 1;
    v23 = 2 * (v22 & 0xFFFFFFFFFFFFFFE0);
    v24 = &v11[v23];
    v16 = &v13[v23];
    v25 = v13 + 32;
    v26 = (__int128 *)(v11 + 32);
    v27 = v22 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v29 = *(v26 - 2);
      v28 = *(v26 - 1);
      v31 = *v26;
      v30 = v26[1];
      v26 += 4;
      *(v25 - 2) = v29;
      *(v25 - 1) = v28;
      *v25 = v31;
      v25[1] = v30;
      v25 += 4;
      v27 -= 32;
    }
    while (v27);
    v11 = v24;
    v13 = v16;
    if (v22 != (v22 & 0xFFFFFFFFFFFFFFE0))
    {
LABEL_31:
      do
      {
        v15 = *(_WORD *)v11;
        v11 += 2;
        *(_WORD *)v13 = v15;
        v13 += 2;
      }
      while (v11 != v10);
      v16 = v13;
    }
    *(_QWORD *)(a1 + 40) = v16;
  }
  *(_DWORD *)(a1 + 56) = a2[14];
  return a1;
}

void sub_20F237990(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 40) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void sub_20F2379C8()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20F2379DC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C9FBDF0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20F237A1C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C9FBDF0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20F237A44(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 8) + 208) + 1128) = *(_BYTE *)(result + 16);
  return result;
}

uint64_t sub_20F237A58(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_3vio12area_mapping16MappingInterface32Relocalizat"
                     "ionSelfToExternalNode11ProcessImplERKNS5_13mapping_types21RelocalizationRequestEE3$_0JEEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_3vio12area_mapping16MappingInterface32"
                                "RelocalizationSelfToExternalNode11ProcessImplERKNS5_13mapping_types21RelocalizationRequestEE3$_0JEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_3vio12area_mapping16MappingInterface32RelocalizationSelfToExternalNode11ProcessImplERKNS5_13mapping_types21RelocalizationRequestEE3$_0JEEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_3vio12area_mapping16MappingInterface32RelocalizationSelfToExternalNode11ProcessImplERKNS5_13mapping_types21RelocalizationRequestEE3$_0JEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20F237AC4()
{
  return &unk_24C9FBE50;
}

uint64_t sub_20F237AD0(uint64_t a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  if (*(_BYTE *)(a1 + 80) && *(char *)(a1 + 79) < 0)
  {
    operator delete(*(void **)(a1 + 56));
    v2 = *(void **)(a1 + 32);
    if (!v2)
      goto LABEL_5;
    goto LABEL_4;
  }
  v2 = *(void **)(a1 + 32);
  if (v2)
  {
LABEL_4:
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
LABEL_5:
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3)
    return a1;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return a1;
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20F237B6C(uint64_t a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  if (*(_BYTE *)(a1 + 80) && *(char *)(a1 + 79) < 0)
  {
    operator delete(*(void **)(a1 + 56));
    v2 = *(void **)(a1 + 32);
    if (!v2)
    {
LABEL_5:
      v3 = *(std::__shared_weak_count **)(a1 + 16);
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
      JUMPOUT(0x212BC6398);
    }
  }
  else
  {
    v2 = *(void **)(a1 + 32);
    if (!v2)
      goto LABEL_5;
  }
  *(_QWORD *)(a1 + 40) = v2;
  operator delete(v2);
  goto LABEL_5;
}

uint64_t *sub_20F237C08@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *__p;
  __int128 v14;

  __p = operator new(0x28uLL);
  v14 = xmmword_2102DBA80;
  strcpy((char *)__p, "TransmitterLogicConfig parameters");
  sub_20E8B30B4(a2, (__int128 *)&__p, 180, 160);
  if (SHIBYTE(v14) < 0)
    operator delete(__p);
  __p = (void *)nullsub_1(a2);
  v4 = sub_20EA9DCF0((unsigned int *)a1);
  sub_20E8B2F9C((uint64_t *)&__p, "TransmitterLogicConfig.num_cached_regular_keyframes_for_new_state", v4, "Number of cached regular keyframes before sending the new state.");
  __p = (void *)nullsub_1(a2);
  v5 = sub_20EA9DCF0((unsigned int *)(a1 + 4));
  sub_20E8B2F9C((uint64_t *)&__p, "TransmitterLogicConfig.min_num_covisible_weak_keyframes_for_new_state", v5, "Number of covisible weak frames needed before sending the new state");
  __p = (void *)nullsub_1(a2);
  v6 = sub_20EA9DCF0((unsigned int *)(a1 + 8));
  sub_20E8B2F9C((uint64_t *)&__p, "TransmitterLogicConfig.num_map_data_transmission_cycles", v6, "Map data transmission period in vio cycle (50 cycles == 5 seconds @10FPS).");
  __p = (void *)nullsub_1(a2);
  v7 = sub_20EA9DCF0((unsigned int *)(a1 + 12));
  sub_20E8B2F9C((uint64_t *)&__p, "TransmitterLogicConfig.num_map_registration_stats_transmission_cycles", v7, "Map registration stats transmission period in vio cycle (10 cycles == 1 seconds @10FPS).");
  __p = (void *)nullsub_1(a2);
  v8 = sub_20EA9DCF0((unsigned int *)(a1 + 16));
  sub_20E8B2F9C((uint64_t *)&__p, "TransmitterLogicConfig.num_min_cycles_to_declare_active_external_map", v8, "Minimum number of cycles we heared from an external user to declare active. (30 cycles == 3 seconds @10FPS).");
  __p = (void *)nullsub_1(a2);
  v9 = sub_20EAA14D8((_BYTE *)(a1 + 20));
  sub_20E8B2F9C((uint64_t *)&__p, "TransmitterLogicConfig.transmit_state_right_away", v9, "Flag to toggle transmit keyframe/state (current use is when the keyframe is used for re-localization).");
  __p = (void *)nullsub_1(a2);
  v10 = sub_20EAA14D8((_BYTE *)(a1 + 21));
  __p = (void *)nullsub_1(a2);
  v11 = sub_20EAA14D8((_BYTE *)(a1 + 22));
}

void sub_20F237E04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  sub_20E869298(v15);
  _Unwind_Resume(a1);
}

void sub_20F237E70(_QWORD *a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  _DWORD *v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;
  char *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  __int128 v26;

  v4 = (_BYTE *)a1[10];
  v5 = (_BYTE *)a1[11];
  v6 = v4;
  if (v4 != v5)
  {
    v6 = (_DWORD *)a1[10];
    while (*(_QWORD *)a2 != *(_QWORD *)v6 || *(_DWORD *)(a2 + 8) != v6[2])
    {
      v6 += 6;
      if (v6 == (_DWORD *)v5)
        goto LABEL_8;
    }
  }
  if (v6 == (_DWORD *)v5)
  {
LABEL_8:
    *(_QWORD *)&v26 = *(_QWORD *)a2;
    DWORD2(v26) = *(_DWORD *)(a2 + 8);
    v7 = a1[12];
    if ((unint64_t)v5 >= v7)
    {
      v9 = 0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 3) + 1;
      if (v9 > 0xAAAAAAAAAAAAAAALL)
        sub_20E867F44();
      v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (_QWORD)v4) >> 3);
      if (2 * v10 > v9)
        v9 = 2 * v10;
      if (v10 >= 0x555555555555555)
        v11 = 0xAAAAAAAAAAAAAAALL;
      else
        v11 = v9;
      if (v11)
      {
        if (v11 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_51;
        v12 = (char *)operator new(24 * v11);
      }
      else
      {
        v12 = 0;
      }
      v13 = &v12[8 * ((v5 - v4) >> 3)];
      *(_OWORD *)v13 = v26;
      v13[16] = 0;
      v8 = v13 + 24;
      if (v4 != v5)
      {
        do
        {
          v14 = *(_OWORD *)(v5 - 24);
          *(v13 - 8) = *(v5 - 8);
          *(_OWORD *)(v13 - 24) = v14;
          v13 -= 24;
          v5 -= 24;
        }
        while (v5 != v4);
        v4 = (_BYTE *)a1[10];
      }
      a1[10] = v13;
      a1[11] = v8;
      a1[12] = &v12[24 * v11];
      if (v4)
        operator delete(v4);
    }
    else
    {
      *(_OWORD *)v5 = v26;
      v5[16] = 0;
      v8 = v5 + 24;
    }
    a1[11] = v8;
    if (!*(_BYTE *)(a1[3] + 2500))
      return;
    v15 = (char *)a1[13];
    v16 = (char *)a1[14];
    v17 = v15;
    if (v15 != v16)
    {
      v17 = (char *)a1[13];
      while (*(_QWORD *)a2 != *(_QWORD *)v17 || *(_DWORD *)(a2 + 8) != *((_DWORD *)v17 + 2))
      {
        v17 += 24;
        if (v17 == v16)
          goto LABEL_32;
      }
    }
    if (v17 != v16)
      return;
LABEL_32:
    *(_QWORD *)&v26 = *(_QWORD *)a2;
    DWORD2(v26) = *(_DWORD *)(a2 + 8);
    v18 = a1[15];
    if ((unint64_t)v16 < v18)
    {
      *(_OWORD *)v16 = v26;
      *((_WORD *)v16 + 8) = 0;
      v19 = v16 + 24;
LABEL_49:
      a1[14] = v19;
      return;
    }
    v20 = 0xAAAAAAAAAAAAAAABLL * ((v16 - v15) >> 3) + 1;
    if (v20 > 0xAAAAAAAAAAAAAAALL)
      sub_20E867F44();
    v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - (_QWORD)v15) >> 3);
    if (2 * v21 > v20)
      v20 = 2 * v21;
    if (v21 >= 0x555555555555555)
      v22 = 0xAAAAAAAAAAAAAAALL;
    else
      v22 = v20;
    if (!v22)
    {
      v23 = 0;
      goto LABEL_44;
    }
    if (v22 <= 0xAAAAAAAAAAAAAAALL)
    {
      v23 = (char *)operator new(24 * v22);
LABEL_44:
      v24 = &v23[8 * ((v16 - v15) >> 3)];
      *(_OWORD *)v24 = v26;
      *((_WORD *)v24 + 8) = 0;
      v19 = v24 + 24;
      if (v15 != v16)
      {
        do
        {
          v25 = *(_OWORD *)(v16 - 24);
          *((_WORD *)v24 - 4) = *((_WORD *)v16 - 4);
          *(_OWORD *)(v24 - 24) = v25;
          v24 -= 24;
          v16 -= 24;
        }
        while (v16 != v15);
        v15 = (char *)a1[13];
      }
      a1[13] = v24;
      a1[14] = v19;
      a1[15] = &v23[24 * v22];
      if (v15)
        operator delete(v15);
      goto LABEL_49;
    }
LABEL_51:
    sub_20E877A38();
  }
}

void sub_20F238178(uint64_t a1, _QWORD *a2)
{
  size_t v2;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  uint64_t v19;
  _QWORD *v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t prime;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  uint8x8_t v31;
  _QWORD **v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  float v36;
  float v37;
  _BOOL8 v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint8x8_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t *v48;
  unint64_t v49;
  int8x8_t v50;
  uint8x8_t v51;
  unint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  int8x8_t v60;
  uint8x8_t v61;
  unint64_t v62;
  uint64_t **v63;
  uint64_t *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unsigned __int8 v68;
  int v69;
  unint64_t v70;
  unint64_t v71;
  std::string *v73;
  std::string::size_type size;
  unint64_t *v75;
  unint64_t *v76;
  std::string *v77;
  std::string::size_type v78;
  uint64_t *v79;
  std::string *v80;
  std::string::size_type v81;
  const char *v82;
  uint64_t v83;
  std::string *v84;
  std::string::size_type v85;
  _QWORD *v86;
  _QWORD *v87;
  size_t v88;
  void **p_dst;
  unint64_t v90;
  const void *v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  void *v95;
  void **v96;
  uint64_t v97;
  char v98;
  size_t v99;
  void *v100;
  unint64_t v101;
  const void *v102;
  uint64_t v103;
  uint64_t v104;
  void **v105;
  uint64_t v106;
  const char *v107;
  size_t v108;
  unsigned __int8 v109;
  unsigned __int8 v110;
  const char *v111;
  size_t v112;
  void **v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  NSObject *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  size_t v121;
  std::__shared_weak_count_vtbl *v122;
  std::__shared_weak_count *v123;
  size_t v124;
  size_t v125;
  void **v126;
  void *v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  void **v131;
  char v132;
  _QWORD *v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *p_shared_owners;
  unint64_t v137;
  void *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  void *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  const char *v153;
  uint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  void **v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  void **v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  const char *v178;
  void *v179;
  void *v180;
  int v181;
  _QWORD *v182;
  unint64_t v183;
  std::string v184;
  int v185;
  const char *v186;
  int v187;
  const char *v188;
  uint64_t v189;
  std::__shared_weak_count *v190;
  void *v191[2];
  int64_t v192;
  uint64_t *v193[2];
  _QWORD v194[3];
  const void *v195;
  uint64_t v196;
  const void *v197;
  unint64_t v198;
  void *v199;
  char v200;
  unint64_t v201;
  int v202;
  uint64_t v203;
  uint64_t v204;
  void *v205;
  _QWORD *v206;
  __int128 v207;
  std::__shared_weak_count *v208;
  char *v209;
  std::__shared_weak_count *v210;
  void **__dst;
  __int128 v212;
  _QWORD v213[2];
  void *__p[3];
  __int128 v215;
  void *v216[2];
  unint64_t v217;
  const void *v218;
  unint64_t v219;
  void *v220;
  char v221;
  unint64_t v222;
  int v223;
  _QWORD v224[22];

  v224[19] = *MEMORY[0x24BDAC8D0];
  sub_20F31E0F8(*(_QWORD *)(a1 + 24), (char **)&v205);
  v5 = (_QWORD *)*a2;
  v6 = (_QWORD *)a2[1];
  if ((_QWORD *)*a2 != v6)
  {
    v7 = v205;
    if (v205 != v206)
    {
      v86 = (_QWORD *)*a2;
      do
      {
        if ((*((_BYTE *)v86 + 12) & 4) != 0)
        {
          v87 = v205;
          do
          {
            if (*v87 == *v86)
              goto LABEL_234;
            ++v87;
          }
          while (v87 != v206);
          v87 = v206;
LABEL_234:
          if (v87 != v206)
            goto LABEL_403;
        }
        v86 += 2;
      }
      while (v86 != v6);
    }
    v8 = (uint64_t *)(a1 + 128);
    v182 = (_QWORD *)(a1 + 144);
    while ((*((_BYTE *)v5 + 12) & 4) == 0)
    {
LABEL_8:
      v5 += 2;
      if (v5 == v6)
        goto LABEL_125;
    }
    v9 = *v5;
    v10 = *(_QWORD *)(a1 + 136);
    if (v10)
    {
      v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
      v11.i16[0] = vaddlv_u8(v11);
      if (v11.u32[0] > 1uLL)
      {
        v2 = *v5;
        if (v10 <= v9)
          v2 = v9 % v10;
      }
      else
      {
        v2 = (v10 - 1) & v9;
      }
      v12 = *(_QWORD **)(*v8 + 8 * v2);
      if (v12)
      {
        v13 = (_QWORD *)*v12;
        if (v13)
        {
          if (v11.u32[0] < 2uLL)
          {
            while (1)
            {
              v15 = v13[1];
              if (v15 == v9)
              {
                if (v13[2] == v9)
                  goto LABEL_70;
              }
              else if ((v15 & (v10 - 1)) != v2)
              {
                goto LABEL_30;
              }
              v13 = (_QWORD *)*v13;
              if (!v13)
                goto LABEL_30;
            }
          }
          do
          {
            v14 = v13[1];
            if (v14 == v9)
            {
              if (v13[2] == v9)
                goto LABEL_70;
            }
            else
            {
              if (v14 >= v10)
                v14 %= v10;
              if (v14 != v2)
                break;
            }
            v13 = (_QWORD *)*v13;
          }
          while (v13);
        }
      }
    }
LABEL_30:
    v16 = operator new(0x20uLL);
    *v16 = 0;
    v16[1] = v9;
    v16[2] = v9;
    v16[3] = 0x100000000;
    v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 152) + 1);
    v18 = *(float *)(a1 + 160);
    if (v10 && (float)(v18 * (float)v10) >= v17)
    {
      v19 = *v8;
      v20 = *(_QWORD **)(*v8 + 8 * v2);
      if (v20)
      {
LABEL_33:
        *v16 = *v20;
        goto LABEL_68;
      }
    }
    else
    {
      v21 = (v10 & (v10 - 1)) != 0;
      if (v10 < 3)
        v21 = 1;
      v22 = v21 | (2 * v10);
      v23 = vcvtps_u32_f32(v17 / v18);
      if (v22 <= v23)
        prime = v23;
      else
        prime = v22;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
        v10 = *(_QWORD *)(a1 + 136);
      }
      if (prime > v10)
        goto LABEL_44;
      if (prime < v10)
      {
        v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 152) / *(float *)(a1 + 160));
        if (v10 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
        {
          v25 = std::__next_prime(v25);
        }
        else
        {
          v27 = 1 << -(char)__clz(v25 - 1);
          if (v25 >= 2)
            v25 = v27;
        }
        if (prime <= v25)
          prime = v25;
        if (prime < v10)
LABEL_44:
          sub_20E8D2B3C(a1 + 128, prime);
      }
      v10 = *(_QWORD *)(a1 + 136);
      v28 = v10 - 1;
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v10 <= v9)
        {
          v2 = v9 % v10;
          v19 = *v8;
          v20 = *(_QWORD **)(*v8 + 8 * (v9 % v10));
          if (v20)
            goto LABEL_33;
        }
        else
        {
          v2 = v9;
          v19 = *v8;
          v20 = *(_QWORD **)(*v8 + 8 * v9);
          if (v20)
            goto LABEL_33;
        }
      }
      else
      {
        v2 = v28 & v9;
        v19 = *v8;
        v20 = *(_QWORD **)(*v8 + 8 * (v28 & v9));
        if (v20)
          goto LABEL_33;
      }
    }
    *v16 = *v182;
    *v182 = v16;
    *(_QWORD *)(v19 + 8 * v2) = v182;
    if (!*v16)
    {
LABEL_69:
      ++*(_QWORD *)(a1 + 152);
      v9 = *v5;
LABEL_70:
      v30 = *(_DWORD *)(a1 + 176);
      if (v10)
      {
        v31 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
        v31.i16[0] = vaddlv_u8(v31);
        if (v31.u32[0] > 1uLL)
        {
          v2 = v9;
          if (v10 <= v9)
            v2 = v9 % v10;
        }
        else
        {
          v2 = (v10 - 1) & v9;
        }
        v32 = *(_QWORD ***)(*v8 + 8 * v2);
        if (v32)
        {
          v33 = *v32;
          if (*v32)
          {
            if (v31.u32[0] < 2uLL)
            {
              while (1)
              {
                v35 = v33[1];
                if (v35 == v9)
                {
                  if (v33[2] == v9)
                    goto LABEL_7;
                }
                else if ((v35 & (v10 - 1)) != v2)
                {
                  goto LABEL_90;
                }
                v33 = (_QWORD *)*v33;
                if (!v33)
                  goto LABEL_90;
              }
            }
            do
            {
              v34 = v33[1];
              if (v34 == v9)
              {
                if (v33[2] == v9)
                  goto LABEL_7;
              }
              else
              {
                if (v34 >= v10)
                  v34 %= v10;
                if (v34 != v2)
                  break;
              }
              v33 = (_QWORD *)*v33;
            }
            while (v33);
          }
        }
      }
LABEL_90:
      v33 = operator new(0x20uLL);
      *v33 = 0;
      v33[1] = v9;
      v33[2] = v9;
      v33[3] = 0x100000000;
      v36 = (float)(unint64_t)(*(_QWORD *)(a1 + 152) + 1);
      v37 = *(float *)(a1 + 160);
      if (v10 && (float)(v37 * (float)v10) >= v36)
      {
        v9 = v2;
      }
      else
      {
        v38 = (v10 & (v10 - 1)) != 0;
        if (v10 < 3)
          v38 = 1;
        v39 = v38 | (2 * v10);
        v40 = vcvtps_u32_f32(v36 / v37);
        if (v39 <= v40)
          v2 = v40;
        else
          v2 = v39;
        if (v2 == 1)
        {
          v2 = 2;
        }
        else if ((v2 & (v2 - 1)) != 0)
        {
          v2 = std::__next_prime(v2);
          v10 = *(_QWORD *)(a1 + 136);
        }
        if (v2 > v10)
          goto LABEL_103;
        if (v2 < v10)
        {
          v41 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 152) / *(float *)(a1 + 160));
          if (v10 < 3 || (v42 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
          {
            v41 = std::__next_prime(v41);
          }
          else
          {
            v43 = 1 << -(char)__clz(v41 - 1);
            if (v41 >= 2)
              v41 = v43;
          }
          if (v2 <= v41)
            v2 = v41;
          if (v2 < v10)
LABEL_103:
            sub_20E8D2B3C(a1 + 128, v2);
        }
        v10 = *(_QWORD *)(a1 + 136);
        if ((v10 & (v10 - 1)) != 0)
        {
          if (v10 <= v9)
            v9 %= v10;
        }
        else
        {
          v9 &= v10 - 1;
        }
      }
      v44 = *v8;
      v45 = *(_QWORD **)(*v8 + 8 * v9);
      if (v45)
      {
        *v33 = *v45;
      }
      else
      {
        *v33 = *v182;
        *v182 = v33;
        *(_QWORD *)(v44 + 8 * v9) = v182;
        if (!*v33)
        {
LABEL_6:
          ++*(_QWORD *)(a1 + 152);
LABEL_7:
          *((_DWORD *)v33 + 6) = v30;
          goto LABEL_8;
        }
        v46 = *(_QWORD *)(*v33 + 8);
        if ((v10 & (v10 - 1)) != 0)
        {
          if (v46 >= v10)
            v46 %= v10;
        }
        else
        {
          v46 &= v10 - 1;
        }
        v45 = (_QWORD *)(*v8 + 8 * v46);
      }
      *v45 = v33;
      goto LABEL_6;
    }
    v29 = *(_QWORD *)(*v16 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v29 >= v10)
        v29 %= v10;
    }
    else
    {
      v29 &= v10 - 1;
    }
    v20 = (_QWORD *)(*v8 + 8 * v29);
LABEL_68:
    *v20 = v16;
    goto LABEL_69;
  }
LABEL_125:
  sub_20F324014(*(_QWORD **)(a1 + 24), __p);
  v47 = (unint64_t *)__p[0];
  v48 = (unint64_t *)__p[1];
  if (__p[0] == __p[1])
    goto LABEL_179;
  while (2)
  {
    v49 = *v47;
    v50 = *(int8x8_t *)(a1 + 192);
    if (v50)
    {
      v51 = (uint8x8_t)vcnt_s8(v50);
      v51.i16[0] = vaddlv_u8(v51);
      if (v51.u32[0] > 1uLL)
      {
        v52 = *v47;
        if (v49 >= *(_QWORD *)&v50)
          v52 = v49 % *(_QWORD *)&v50;
      }
      else
      {
        v52 = (*(_QWORD *)&v50 - 1) & v49;
      }
      v53 = *(_QWORD **)(*(_QWORD *)(a1 + 184) + 8 * v52);
      if (v53)
      {
        v54 = (_QWORD *)*v53;
        if (v54)
        {
          if (v51.u32[0] < 2uLL)
          {
            v55 = *(_QWORD *)&v50 - 1;
            while (1)
            {
              v57 = v54[1];
              if (v57 == v49)
              {
                if (v54[2] == v49)
                  goto LABEL_128;
              }
              else if ((v57 & v55) != v52)
              {
                goto LABEL_149;
              }
              v54 = (_QWORD *)*v54;
              if (!v54)
                goto LABEL_149;
            }
          }
          do
          {
            v56 = v54[1];
            if (v56 == v49)
            {
              if (v54[2] == v49)
                goto LABEL_128;
            }
            else
            {
              if (v56 >= *(_QWORD *)&v50)
                v56 %= *(_QWORD *)&v50;
              if (v56 != v52)
                break;
            }
            v54 = (_QWORD *)*v54;
          }
          while (v54);
        }
      }
    }
LABEL_149:
    v58 = (_QWORD *)*a2;
    v59 = (_QWORD *)a2[1];
    if ((_QWORD *)*a2 != v59)
    {
      while (*v58 != v49)
      {
        v58 += 2;
        if (v58 == v59)
          goto LABEL_154;
      }
    }
    if (v58 != v59)
      goto LABEL_128;
LABEL_154:
    if ((v47[1] & 4) != 0)
      goto LABEL_127;
    v60 = *(int8x8_t *)(a1 + 136);
    if (!*(_QWORD *)&v60)
      goto LABEL_127;
    v61 = (uint8x8_t)vcnt_s8(v60);
    v61.i16[0] = vaddlv_u8(v61);
    if (v61.u32[0] > 1uLL)
    {
      v62 = *v47;
      if (v49 >= *(_QWORD *)&v60)
        v62 = v49 % *(_QWORD *)&v60;
    }
    else
    {
      v62 = (*(_QWORD *)&v60 - 1) & v49;
    }
    v63 = *(uint64_t ***)(*(_QWORD *)(a1 + 128) + 8 * v62);
    if (!v63 || (v64 = *v63) == 0)
    {
LABEL_127:
      sub_20EDB1F30(a1 + 184, v47, v47);
      goto LABEL_128;
    }
    if (v61.u32[0] < 2uLL)
    {
      v65 = *(_QWORD *)&v60 - 1;
      while (1)
      {
        v67 = v64[1];
        if (v49 == v67)
        {
          if (v64[2] == v49)
            goto LABEL_176;
        }
        else if ((v67 & v65) != v62)
        {
          goto LABEL_127;
        }
        v64 = (uint64_t *)*v64;
        if (!v64)
          goto LABEL_127;
      }
    }
    while (1)
    {
      v66 = v64[1];
      if (v49 == v66)
        break;
      if (v66 >= *(_QWORD *)&v60)
        v66 %= *(_QWORD *)&v60;
      if (v66 != v62)
        goto LABEL_127;
LABEL_165:
      v64 = (uint64_t *)*v64;
      if (!v64)
        goto LABEL_127;
    }
    if (v64[2] != v49)
      goto LABEL_165;
LABEL_176:
    if (!*((_BYTE *)v64 + 28))
      goto LABEL_127;
LABEL_128:
    v47 += 2;
    if (v47 != v48)
      continue;
    break;
  }
  v47 = (unint64_t *)__p[0];
LABEL_179:
  if (v47)
  {
    __p[1] = v47;
    operator delete(v47);
  }
  v68 = atomic_load((unsigned __int8 *)&qword_254A687B8);
  if ((v68 & 1) == 0 && __cxa_guard_acquire(&qword_254A687B8))
  {
    sub_21021D3D8(v193);
    sub_20E8610C0(__p, "cv3d.vio.area_mapping");
    sub_20E8C4068(v193, (uint64_t)__p, &qword_254A687B0);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A687B8);
  }
  v204 = qword_254A687B0;
  if (**(int **)(qword_254A687B0 + 56) > 2)
    goto LABEL_402;
  v69 = *(unsigned __int8 *)(qword_254A687B0 + 72);
  v70 = sub_20E8C31DC(qword_254A687B0, "OSLogSurrogateAppender", 1, 0);
  v71 = v70;
  if (!v69 && v70 == 0)
    goto LABEL_402;
  sub_20E863438((uint64_t)v193);
  v183 = v71;
  v181 = v69;
  sub_20E863438((uint64_t)__p);
  sub_20E86A980(&__p[2], (uint64_t)"Num cycle count ", 16);
  std::to_string(&v184, *(_DWORD *)(a1 + 176));
  if ((v184.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v73 = &v184;
  else
    v73 = (std::string *)v184.__r_.__value_.__r.__words[0];
  if ((v184.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v184.__r_.__value_.__r.__words[2]);
  else
    size = v184.__r_.__value_.__l.__size_;
  sub_20E86A980(&__p[2], (uint64_t)v73, size);
  if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v184.__r_.__value_.__l.__data_);
  sub_20E86A980(&__p[2], (uint64_t)"\n", 1);
  sub_20F31E0F8(*(_QWORD *)(a1 + 24), (char **)&v207);
  v75 = (unint64_t *)*((_QWORD *)&v207 + 1);
  v76 = (unint64_t *)v207;
  if ((_QWORD)v207 != *((_QWORD *)&v207 + 1))
  {
    do
    {
      sub_20E86A980(&__p[2], (uint64_t)"Self: ", 6);
      std::to_string(&v184, *v76);
      if ((v184.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v77 = &v184;
      else
        v77 = (std::string *)v184.__r_.__value_.__r.__words[0];
      if ((v184.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v78 = HIBYTE(v184.__r_.__value_.__r.__words[2]);
      else
        v78 = v184.__r_.__value_.__l.__size_;
      sub_20E86A980(&__p[2], (uint64_t)v77, v78);
      if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v184.__r_.__value_.__l.__data_);
      sub_20E86A980(&__p[2], (uint64_t)"\n", 1);
      ++v76;
    }
    while (v76 != v75);
    v76 = (unint64_t *)v207;
  }
  if (v76)
  {
    *((_QWORD *)&v207 + 1) = v76;
    operator delete(v76);
  }
  v79 = (uint64_t *)(a1 + 144);
  while (1)
  {
    v79 = (uint64_t *)*v79;
    if (!v79)
      break;
    sub_20E86A980(&__p[2], (uint64_t)"    ext submap: ", 16);
    std::to_string(&v184, v79[2]);
    if ((v184.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v80 = &v184;
    else
      v80 = (std::string *)v184.__r_.__value_.__r.__words[0];
    if ((v184.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v81 = HIBYTE(v184.__r_.__value_.__r.__words[2]);
    else
      v81 = v184.__r_.__value_.__l.__size_;
    sub_20E86A980(&__p[2], (uint64_t)v80, v81);
    if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v184.__r_.__value_.__l.__data_);
    sub_20E86A980(&__p[2], (uint64_t)", active: ", 10);
    if (*((_BYTE *)v79 + 28))
      v82 = "true";
    else
      v82 = "false";
    if (*((_BYTE *)v79 + 28))
      v83 = 4;
    else
      v83 = 5;
    sub_20E86A980(&__p[2], (uint64_t)v82, v83);
    sub_20E86A980(&__p[2], (uint64_t)" | cnt: ", 8);
    std::to_string(&v184, *((_DWORD *)v79 + 6));
    if ((v184.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v84 = &v184;
    else
      v84 = (std::string *)v184.__r_.__value_.__r.__words[0];
    if ((v184.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v85 = HIBYTE(v184.__r_.__value_.__r.__words[2]);
    else
      v85 = v184.__r_.__value_.__l.__size_;
    sub_20E86A980(&__p[2], (uint64_t)v84, v85);
    if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v184.__r_.__value_.__l.__data_);
    sub_20E86A980(&__p[2], (uint64_t)"\n", 1);
  }
  if ((v223 & 0x10) != 0)
  {
    v90 = v222;
    if (v222 < v219)
    {
      v222 = v219;
      v90 = v219;
    }
    v91 = v218;
    v88 = v90 - (_QWORD)v218;
    if (v90 - (unint64_t)v218 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_322;
  }
  else
  {
    if ((v223 & 8) == 0)
    {
      v88 = 0;
      HIBYTE(v212) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_254;
    }
    v91 = v216[0];
    v88 = v217 - (unint64_t)v216[0];
    if (v217 - (unint64_t)v216[0] > 0x7FFFFFFFFFFFFFF7)
LABEL_322:
      sub_20E860B7C();
  }
  if (v88 >= 0x17)
  {
    v92 = (v88 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v88 | 7) != 0x17)
      v92 = v88 | 7;
    v93 = v92 + 1;
    p_dst = (void **)operator new(v92 + 1);
    *((_QWORD *)&v212 + 1) = v93 | 0x8000000000000000;
    __dst = p_dst;
    *(_QWORD *)&v212 = v88;
    goto LABEL_253;
  }
  HIBYTE(v212) = v88;
  p_dst = (void **)&__dst;
  if (v88)
LABEL_253:
    memmove(p_dst, v91, v88);
LABEL_254:
  *((_BYTE *)p_dst + v88) = 0;
  v94 = (void *)*MEMORY[0x24BEDB7F0];
  __p[0] = v94;
  v95 = *(void **)(MEMORY[0x24BEDB7F0] + 72);
  v180 = *(void **)(MEMORY[0x24BEDB7F0] + 64);
  *(void **)((char *)__p + *((_QWORD *)v94 - 3)) = v180;
  __p[2] = v95;
  *(_QWORD *)&v215 = MEMORY[0x24BEDB848] + 16;
  if (v221 < 0)
    operator delete(v220);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](v224);
  if (v212 >= 0)
    v96 = (void **)&__dst;
  else
    v96 = __dst;
  if (v212 >= 0)
    v97 = HIBYTE(v212);
  else
    v97 = v212;
  sub_20E86A980(v194, (uint64_t)v96, v97);
  if (SHIBYTE(v212) < 0)
  {
    operator delete(__dst);
    v98 = v202;
    v179 = v95;
    if ((v202 & 0x10) != 0)
      goto LABEL_267;
LABEL_264:
    if ((v98 & 8) == 0)
    {
      v99 = 0;
      HIBYTE(v192) = 0;
      v100 = v191;
      goto LABEL_277;
    }
    v102 = v195;
    v99 = v196 - (_QWORD)v195;
    if ((unint64_t)(v196 - (_QWORD)v195) <= 0x7FFFFFFFFFFFFFF7)
      goto LABEL_270;
LABEL_324:
    sub_20E860B7C();
  }
  v98 = v202;
  v179 = v95;
  if ((v202 & 0x10) == 0)
    goto LABEL_264;
LABEL_267:
  v101 = v201;
  if (v201 < v198)
  {
    v201 = v198;
    v101 = v198;
  }
  v102 = v197;
  v99 = v101 - (_QWORD)v197;
  if (v101 - (unint64_t)v197 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_324;
LABEL_270:
  if (v99 >= 0x17)
  {
    v103 = (v99 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v99 | 7) != 0x17)
      v103 = v99 | 7;
    v104 = v103 + 1;
    v100 = operator new(v103 + 1);
    v191[1] = (void *)v99;
    v192 = v104 | 0x8000000000000000;
    v191[0] = v100;
    goto LABEL_276;
  }
  HIBYTE(v192) = v99;
  v100 = v191;
  if (v99)
LABEL_276:
    memmove(v100, v102, v99);
LABEL_277:
  *((_BYTE *)v100 + v99) = 0;
  v184.__r_.__value_.__r.__words[0] = (std::string::size_type)&v204;
  v184.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v184.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
  v185 = 2;
  v186 = "unknown file";
  v187 = 176;
  v189 = 0;
  v190 = 0;
  v188 = "unknown function";
  if (v192 >= 0)
    v105 = v191;
  else
    v105 = (void **)v191[0];
  v106 = *(_QWORD *)v184.__r_.__value_.__l.__data_;
  v107 = (const char *)(*(_QWORD *)v184.__r_.__value_.__l.__data_ + 16);
  v178 = v107;
  if (*(char *)(*(_QWORD *)v184.__r_.__value_.__l.__data_ + 39) < 0)
  {
    v107 = *(const char **)(v106 + 16);
    v108 = *(_QWORD *)(v106 + 24);
    v110 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v110 & 1) == 0)
    {
LABEL_410:
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)__p);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__p);
        if ((_BYTE)v215 && SHIBYTE(__p[2]) < 0)
          operator delete(__p[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
    }
  }
  else
  {
    v108 = *(unsigned __int8 *)(*(_QWORD *)v184.__r_.__value_.__l.__data_ + 39);
    v109 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v109 & 1) == 0)
      goto LABEL_410;
  }
  if (byte_254A4A4F8[23] >= 0)
    v111 = byte_254A4A4F8;
  else
    v111 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v112 = byte_254A4A4F8[23];
  else
    v112 = *(_QWORD *)&byte_254A4A4F8[8];
  __p[0] = os_log_create(v111, v107);
  v113 = &__p[1];
  if (v112 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v112 >= 0x17)
  {
    v114 = (v112 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v112 | 7) != 0x17)
      v114 = v112 | 7;
    v115 = v114 + 1;
    v113 = (void **)operator new(v114 + 1);
    *(_QWORD *)&v215 = v115 | 0x8000000000000000;
    __p[1] = v113;
    __p[2] = (void *)v112;
    goto LABEL_297;
  }
  BYTE7(v215) = v112;
  if (v112)
LABEL_297:
    memmove(v113, v111, v112);
  *((_BYTE *)v113 + v112) = 0;
  BYTE8(v215) = 1;
  v116 = v216;
  if (v108 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v108 >= 0x17)
  {
    v119 = (v108 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v108 | 7) != 0x17)
      v119 = v108 | 7;
    v120 = v119 + 1;
    v116 = operator new(v119 + 1);
    v217 = v120 | 0x8000000000000000;
    v216[0] = v116;
    v216[1] = (void *)v108;
  }
  else
  {
    HIBYTE(v217) = v108;
    if (!v108)
    {
      LOBYTE(v216[0]) = 0;
      LOBYTE(v218) = 1;
      v117 = __p[0];
      if ((SHIBYTE(v217) & 0x80000000) == 0)
        goto LABEL_302;
LABEL_308:
      operator delete(v216[0]);
      v118 = v183;
      if (BYTE8(v215))
        goto LABEL_309;
      goto LABEL_311;
    }
  }
  memmove(v116, v107, v108);
  *((_BYTE *)v116 + v108) = 0;
  LOBYTE(v218) = 1;
  v117 = __p[0];
  if (SHIBYTE(v217) < 0)
    goto LABEL_308;
LABEL_302:
  v118 = v183;
  if (BYTE8(v215))
  {
LABEL_309:
    if (SBYTE7(v215) < 0)
      operator delete(__p[1]);
  }
LABEL_311:
  if (__p[0])
    os_release(__p[0]);
  if (v118 && *(_QWORD *)(v118 + 24))
  {
    v121 = _os_log_pack_size();
    v122 = (std::__shared_weak_count_vtbl *)operator new(v121, (std::align_val_t)8uLL);
    v123 = (std::__shared_weak_count *)operator new();
    v123->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v123->__shared_owners_ = 0;
    v123->__shared_weak_owners_ = 0;
    v123[1].__vftable = v122;
    *(_QWORD *)&v207 = v122;
    *((_QWORD *)&v207 + 1) = v122;
    v209 = 0;
    v210 = 0;
    v208 = v123;
    v124 = strlen((const char *)v105);
    if (v124 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    v125 = v124;
    if (v124 >= 0x17)
    {
      v129 = (v124 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v124 | 7) != 0x17)
        v129 = v124 | 7;
      v130 = v129 + 1;
      v126 = (void **)operator new(v129 + 1);
      *((_QWORD *)&v212 + 1) = v130 | 0x8000000000000000;
      __dst = v126;
      *(_QWORD *)&v212 = v125;
    }
    else
    {
      HIBYTE(v212) = v124;
      v126 = (void **)&__dst;
      if (!v124)
        goto LABEL_329;
    }
    memcpy(v126, v105, v125);
LABEL_329:
    *((_BYTE *)v126 + v125) = 0;
    v131 = __dst;
    v213[0] = v212;
    *(_QWORD *)((char *)v213 + 7) = *(_QWORD *)((char *)&v212 + 7);
    v132 = HIBYTE(v212);
    v133 = operator new(0x38uLL);
    v133[1] = 0;
    v133[2] = 0;
    v133[3] = off_24C9ABC20;
    *v133 = &off_24C9ABBD0;
    v134 = v213[0];
    v133[4] = v131;
    v133[5] = v134;
    *(_QWORD *)((char *)v133 + 47) = *(_QWORD *)((char *)v213 + 7);
    *((_BYTE *)v133 + 55) = v132;
    v213[0] = 0;
    *(_QWORD *)((char *)v213 + 7) = 0;
    v135 = v210;
    v209 = (char *)(v133 + 3);
    v210 = (std::__shared_weak_count *)v133;
    if (v135)
    {
      p_shared_owners = (unint64_t *)&v135->__shared_owners_;
      do
        v137 = __ldaxr(p_shared_owners);
      while (__stlxr(v137 - 1, p_shared_owners));
      if (!v137)
      {
        ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
        std::__shared_weak_count::__release_weak(v135);
      }
    }
    *(_OWORD *)__p = v207;
    v138 = v209;
    __p[2] = v208;
    if (v208)
    {
      v139 = (unint64_t *)&v208->__shared_owners_;
      do
        v140 = __ldxr(v139);
      while (__stxr(v140 + 1, v139));
    }
    v141 = v210;
    *(_QWORD *)&v215 = v138;
    *((_QWORD *)&v215 + 1) = v210;
    if (v210)
    {
      v142 = (unint64_t *)&v210->__shared_owners_;
      do
        v143 = __ldxr(v142);
      while (__stxr(v143 + 1, v142));
      v216[0] = v138;
      do
        v144 = __ldaxr(v142);
      while (__stlxr(v144 - 1, v142));
      if (!v144)
      {
        ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
        std::__shared_weak_count::__release_weak(v141);
      }
    }
    else
    {
      v216[0] = v138;
    }
    v145 = v208;
    if (v208)
    {
      v146 = (unint64_t *)&v208->__shared_owners_;
      do
        v147 = __ldaxr(v146);
      while (__stlxr(v147 - 1, v146));
      if (!v147)
      {
        ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
        std::__shared_weak_count::__release_weak(v145);
      }
    }
    v148 = __p[0];
    if (*((char *)v216[0] + 31) >= 0)
      v149 = (char *)v216[0] + 8;
    else
      v149 = (char *)*((_QWORD *)v216[0] + 1);
    v150 = _os_log_pack_fill();
    *(_DWORD *)v150 = 136315138;
    *(_QWORD *)(v150 + 4) = v149;
    v151 = operator new();
    v152 = *(unsigned __int8 *)(v106 + 39);
    v153 = v178;
    if ((v152 & 0x80u) != 0)
    {
      v153 = *(const char **)(v106 + 16);
      v152 = *(_QWORD *)(v106 + 24);
    }
    *(_QWORD *)v151 = v148;
    *(_OWORD *)(v151 + 8) = *(_OWORD *)&__p[1];
    __p[1] = 0;
    __p[2] = 0;
    *(_OWORD *)(v151 + 24) = v215;
    v215 = 0uLL;
    *(_QWORD *)(v151 + 40) = v153;
    *(_QWORD *)(v151 + 48) = v152;
    *(_BYTE *)(v151 + 56) = 2;
    __dst = 0;
    *(_QWORD *)&v207 = v151;
    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v183 + 24) + 40))(*(_QWORD *)(v183 + 24), &v207);
    v128 = v181;
    v154 = v207;
    *(_QWORD *)&v207 = 0;
    if (v154)
    {
      v155 = *(std::__shared_weak_count **)(v154 + 32);
      if (v155)
      {
        v156 = (unint64_t *)&v155->__shared_owners_;
        do
          v157 = __ldaxr(v156);
        while (__stlxr(v157 - 1, v156));
        if (!v157)
        {
          ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
          std::__shared_weak_count::__release_weak(v155);
        }
      }
      v158 = *(std::__shared_weak_count **)(v154 + 16);
      if (v158)
      {
        v159 = (unint64_t *)&v158->__shared_owners_;
        do
          v160 = __ldaxr(v159);
        while (__stlxr(v160 - 1, v159));
        if (!v160)
        {
          ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
          std::__shared_weak_count::__release_weak(v158);
        }
      }
      MEMORY[0x212BC6398](v154, 0x10F0C40B62ED6C6);
      v161 = __dst;
      __dst = 0;
      if (v161)
      {
        v162 = (std::__shared_weak_count *)v161[4];
        if (v162)
        {
          v163 = (unint64_t *)&v162->__shared_owners_;
          do
            v164 = __ldaxr(v163);
          while (__stlxr(v164 - 1, v163));
          if (!v164)
          {
            ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
            std::__shared_weak_count::__release_weak(v162);
          }
        }
        v165 = (std::__shared_weak_count *)v161[2];
        if (v165)
        {
          v166 = (unint64_t *)&v165->__shared_owners_;
          do
            v167 = __ldaxr(v166);
          while (__stlxr(v167 - 1, v166));
          if (!v167)
          {
            ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
            std::__shared_weak_count::__release_weak(v165);
          }
        }
        MEMORY[0x212BC6398](v161, 0x10F0C40B62ED6C6);
      }
    }
    v168 = (std::__shared_weak_count *)*((_QWORD *)&v215 + 1);
    if (*((_QWORD *)&v215 + 1))
    {
      v169 = (unint64_t *)(*((_QWORD *)&v215 + 1) + 8);
      do
        v170 = __ldaxr(v169);
      while (__stlxr(v170 - 1, v169));
      if (!v170)
      {
        ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
        std::__shared_weak_count::__release_weak(v168);
      }
    }
    v171 = (std::__shared_weak_count *)__p[2];
    if (__p[2])
    {
      v172 = (unint64_t *)((char *)__p[2] + 8);
      do
        v173 = __ldaxr(v172);
      while (__stlxr(v173 - 1, v172));
      if (!v173)
      {
        ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
        std::__shared_weak_count::__release_weak(v171);
      }
    }
  }
  else
  {
    os_log_type_enabled(v117, OS_LOG_TYPE_DEBUG);
    LODWORD(__p[0]) = 136315138;
    *(void **)((char *)__p + 4) = v105;
    v127 = (void *)_os_log_send_and_compose_impl();
    v128 = v181;
    if (v127)
      free(v127);
  }
  if (v128)
  {
    v174 = v191;
    if (v192 < 0)
      v174 = (void **)v191[0];
    sub_20E8C003C((uint64_t)&v184, "%s", (const char *)v174);
    sub_20E863570((uint64_t)&v184);
  }
  sub_20E863570((uint64_t)&v184);
  v175 = v190;
  if (v190)
  {
    v176 = (unint64_t *)&v190->__shared_owners_;
    do
      v177 = __ldaxr(v176);
    while (__stlxr(v177 - 1, v176));
    if (!v177)
    {
      ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
      std::__shared_weak_count::__release_weak(v175);
    }
  }
  if (SHIBYTE(v192) < 0)
    operator delete(v191[0]);
  v193[0] = (uint64_t *)v94;
  *(uint64_t **)((char *)v193 + *((_QWORD *)v94 - 3)) = (uint64_t *)v180;
  v194[0] = v179;
  v194[1] = MEMORY[0x24BEDB848] + 16;
  if (v200 < 0)
    operator delete(v199);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](&v203);
LABEL_402:
  v7 = v205;
LABEL_403:
  if (v7)
  {
    v206 = v7;
    operator delete(v7);
  }
}

void sub_20F2397FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a67;
  uint64_t a68;

  if (LOBYTE(STACK[0x238]) && SLOBYTE(STACK[0x237]) < 0)
    operator delete((void *)STACK[0x220]);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a16);
  if (a30 < 0)
    operator delete(a25);
  sub_20E863784((uint64_t)&a31);
  if (!a67)
    _Unwind_Resume(a1);
  a68 = (uint64_t)a67;
  operator delete(a67);
  _Unwind_Resume(a1);
}

void sub_20F239A38(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  int64_t v20;
  __int128 v21;

  if (*(_BYTE *)(a1 + 22) && !*(_BYTE *)(a1 + 224))
  {
LABEL_28:
    *a2 = 0;
    a2[16] = 0;
    return;
  }
  v5 = *(_QWORD *)(a1 + 104);
  v4 = *(_QWORD *)(a1 + 112);
  v6 = v5;
  if (v5 == v4)
  {
LABEL_16:
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v5) >> 3);
    v4 = v6;
    goto LABEL_17;
  }
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 104);
  while (sub_20F325654(v7, (uint64_t *)v8))
  {
    v8 += 24;
    if (v8 == v4)
      goto LABEL_15;
  }
  if (v8 == v4)
  {
LABEL_15:
    v6 = v4;
    goto LABEL_16;
  }
  v9 = v8 + 24;
  if (v8 + 24 != v4)
  {
    do
    {
      if (sub_20F325654(*(_QWORD *)(a1 + 24), (uint64_t *)v9))
      {
        v11 = *(_OWORD *)v9;
        *(_WORD *)(v8 + 16) = *(_WORD *)(v9 + 16);
        *(_OWORD *)v8 = v11;
        v8 += 24;
      }
      v9 += 24;
    }
    while (v9 != v4);
    v5 = *(_QWORD *)(a1 + 104);
    v4 = *(_QWORD *)(a1 + 112);
    if (v8 != v4)
      goto LABEL_11;
LABEL_30:
    v10 = v8 - v5;
    goto LABEL_31;
  }
  if (v8 == v4)
    goto LABEL_30;
LABEL_11:
  v4 = v8;
  *(_QWORD *)(a1 + 112) = v8;
  v10 = v8 - v5;
LABEL_31:
  v12 = 0xAAAAAAAAAAAAAAABLL * (v10 >> 3);
LABEL_17:
  v13 = 126 - 2 * __clz(v12);
  if (v4 == v5)
    v14 = 0;
  else
    v14 = v13;
  sub_20F23AFA0(v5, v4, v14, 1);
  v16 = *(_BYTE **)(a1 + 104);
  v15 = *(_BYTE **)(a1 + 112);
  if (v16 == v15)
    goto LABEL_28;
  v17 = 0;
  while (!v16[v17 + 16] || !v16[v17 + 17])
  {
    v17 += 24;
    if (&v16[v17] == v15)
      goto LABEL_28;
  }
  v18 = &v16[v17];
  v21 = *(_OWORD *)&v16[v17];
  v19 = &v16[v17 + 24];
  v20 = v15 - v19;
  if (v15 != v19)
    memmove(&v16[v17], v19, v20 - 6);
  *(_QWORD *)(a1 + 112) = &v18[v20];
  *(_OWORD *)a2 = v21;
  a2[16] = 1;
}

void sub_20F239C2C(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  int64_t v19;
  char *v20;
  __int128 v21;
  char *v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  __int128 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *__p;
  char *v35;
  void *v36;
  void *__dst;
  __int128 v38;
  uint64_t v39;

  if (*((_BYTE *)a1 + 22) && !*((_BYTE *)a1 + 224))
    goto LABEL_50;
  v5 = *((_QWORD *)a1 + 10);
  v4 = *((_QWORD *)a1 + 11);
  if (v5 == v4)
    goto LABEL_50;
  v6 = *((_QWORD *)a1 + 3);
  v7 = *((_QWORD *)a1 + 10);
  while (sub_20F325654(v6, (uint64_t *)v7))
  {
    v7 += 24;
    if (v7 == v4)
      goto LABEL_17;
  }
  if (v7 != v4)
  {
    v8 = v7 + 24;
    if (v7 + 24 == v4)
    {
      if (v7 != v4)
        goto LABEL_11;
    }
    else
    {
      do
      {
        if (sub_20F325654(*((_QWORD *)a1 + 3), (uint64_t *)v8))
        {
          v9 = *(_OWORD *)v8;
          *(_BYTE *)(v7 + 16) = *(_BYTE *)(v8 + 16);
          *(_OWORD *)v7 = v9;
          v7 += 24;
        }
        v8 += 24;
      }
      while (v8 != v4);
      v5 = *((_QWORD *)a1 + 10);
      v4 = *((_QWORD *)a1 + 11);
      if (v7 != v4)
      {
LABEL_11:
        v4 = v7;
        *((_QWORD *)a1 + 11) = v7;
        if (v5 == v7)
          goto LABEL_50;
        goto LABEL_18;
      }
    }
  }
LABEL_17:
  if (v5 == v4)
    goto LABEL_50;
LABEL_18:
  sub_20F23C218(v5, v4, 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - v5) >> 3)), 1);
  v11 = *((_QWORD *)a1 + 10);
  v10 = (__int128 *)*((_QWORD *)a1 + 11);
  if ((__int128 *)v11 == v10)
  {
    v18 = (__int128 *)*((_QWORD *)a1 + 10);
    v17 = v18;
    if (!*((_BYTE *)a1 + 20) || (__int128 *)v11 == v10)
      goto LABEL_38;
LABEL_34:
    v38 = *v17;
    v19 = (char *)v18 - ((char *)v17 + 24);
    if (v10 != (__int128 *)((char *)v17 + 24))
      memmove(v17, (char *)v17 + 24, v19 - 7);
    v20 = (char *)v17 + v19;
    goto LABEL_42;
  }
  v12 = 0;
  v13 = (__int128 *)*((_QWORD *)a1 + 10);
  do
  {
    if ((__int128 *)v11 != v13 && *((_BYTE *)v13 + 16))
    {
      v14 = *(_QWORD *)v13;
      v15 = (_BYTE *)(v11 + 16);
      v16 = v12;
      do
      {
        if (*((_QWORD *)v15 - 2) == v14)
          *v15 = 1;
        v15 += 24;
        v16 -= 24;
      }
      while (v16);
    }
    v13 = (__int128 *)((char *)v13 + 24);
    v12 += 24;
  }
  while (v13 != v10);
  if (!*((_BYTE *)a1 + 20))
  {
LABEL_31:
    v18 = v10;
    goto LABEL_38;
  }
  v17 = (__int128 *)v11;
  while (!*((_BYTE *)v17 + 16))
  {
    v17 = (__int128 *)((char *)v17 + 24);
    if (v17 == v10)
      goto LABEL_31;
  }
  v18 = v10;
  if (v17 != v10)
    goto LABEL_34;
LABEL_38:
  v21 = *(_OWORD *)v11;
  v39 = *(_QWORD *)(v11 + 16);
  v38 = v21;
  if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v18 - v11) >> 3) > *a1)
  {
    v22 = (char *)v18 - v11 - 24;
    if (v10 != (__int128 *)(v11 + 24))
      memmove((void *)v11, (const void *)(v11 + 24), (size_t)(v22 - 7));
    v20 = &v22[v11];
LABEL_42:
    *((_QWORD *)a1 + 11) = v20;
    *(_OWORD *)a2 = v38;
    *(_BYTE *)(a2 + 16) = 1;
    return;
  }
  v23 = a1[1];
  if (!(_DWORD)v23
    || (v24 = *(_QWORD **)(*((_QWORD *)a1 + 3) + 2816), v25 = v24[4], v26 = v24[5], v25 == v26)
    || ((v27 = (v26 - v25) >> 4, *(_QWORD *)(v26 - 16) == (_QWORD)v38) ? (v28 = v27 >= v23) : (v28 = 0),
        !v28 || *(_DWORD *)(v25 + 16 * (v27 - v23) + 8) <= DWORD2(v38)))
  {
LABEL_50:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }
  sub_20F23A0A0(**(_QWORD ***)(v24[2] + 424), &v38, (char **)&v36);
  v29 = a1[1];
  if ((_DWORD)v29)
  {
    v30 = (__int128 *)(v24[5] - 16 * v29);
    do
    {
      sub_20F23A0A0(**(_QWORD ***)(v24[2] + 424), v30, (char **)&__p);
      sub_20F23D490((uint64_t)&v36, (char *)__dst, (char *)__p, v35, 0xAAAAAAAAAAAAAAABLL * ((v35 - (_BYTE *)__p) >> 3));
      if (__p)
      {
        v35 = (char *)__p;
        operator delete(__p);
      }
      ++v30;
    }
    while (v30 != (__int128 *)v24[5]);
  }
  __p = 0;
  sub_20F23A328(*(uint64_t **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 2816) + 16) + 424) + 8), &__p, (uint64_t **)&v36);
  if (__p)
  {
    if (v36)
    {
      __dst = v36;
      operator delete(v36);
    }
    goto LABEL_50;
  }
  v32 = *((_QWORD *)a1 + 10);
  v31 = *((_QWORD *)a1 + 11);
  v33 = v31 - (v32 + 24);
  if (v31 != v32 + 24)
    memmove(*((void **)a1 + 10), (const void *)(v32 + 24), v33 - 7);
  *((_QWORD *)a1 + 11) = v32 + v33;
  *(_OWORD *)a2 = v38;
  *(_BYTE *)(a2 + 16) = 1;
  if (v36)
  {
    __dst = v36;
    operator delete(v36);
  }
}

void sub_20F23A050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20F23A0A0(_QWORD *a1@<X0>, __int128 *a2@<X1>, char **a3@<X8>)
{
  unint64_t v6;
  char *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  unint64_t v12;
  char *v13;
  __int128 v14;
  char *v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  char *v25;
  _QWORD *v26;
  _QWORD *v27;
  BOOL v28;
  __int128 v29;
  uint64_t v30;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = a1[39];
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20E867F44();
    v7 = (char *)operator new(24 * v6);
    *a3 = v7;
    a3[1] = v7;
    a3[2] = &v7[24 * v6];
  }
  v8 = (_QWORD *)a1[37];
  v9 = a1 + 38;
  if (v8 == a1 + 38)
    goto LABEL_41;
  v10 = a1 + 223;
  do
  {
    v11 = *((_DWORD *)v8 + 8);
    v29 = *a2;
    LODWORD(v30) = v11;
    if (sub_20E9DF85C(v10, (uint64_t *)&v29))
    {
      v13 = a3[1];
      v12 = (unint64_t)a3[2];
      if ((unint64_t)v13 >= v12)
      {
        v16 = *a3;
        v17 = 0xAAAAAAAAAAAAAAABLL * ((v13 - *a3) >> 3);
        v18 = v17 + 1;
        if (v17 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20E867F44();
        v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (_QWORD)v16) >> 3);
        if (2 * v19 > v18)
          v18 = 2 * v19;
        if (v19 >= 0x555555555555555)
          v20 = 0xAAAAAAAAAAAAAAALL;
        else
          v20 = v18;
        if (v20)
        {
          if (v20 > 0xAAAAAAAAAAAAAAALL)
            sub_20E877A38();
          v21 = (char *)operator new(24 * v20);
        }
        else
        {
          v21 = 0;
        }
        v22 = &v21[24 * v17];
        *(_OWORD *)v22 = v29;
        *((_QWORD *)v22 + 2) = v30;
        v23 = v22;
        if (v13 != v16)
        {
          do
          {
            v24 = *(_OWORD *)(v13 - 24);
            *((_DWORD *)v23 - 2) = *((_DWORD *)v13 - 2);
            *(_OWORD *)(v23 - 24) = v24;
            v23 -= 24;
            v13 -= 24;
          }
          while (v13 != v16);
          v13 = *a3;
        }
        v25 = &v21[24 * v20];
        v15 = v22 + 24;
        *a3 = v23;
        a3[1] = v22 + 24;
        a3[2] = v25;
        if (v13)
          operator delete(v13);
      }
      else
      {
        v14 = v29;
        *((_QWORD *)v13 + 2) = v30;
        *(_OWORD *)v13 = v14;
        v15 = v13 + 24;
      }
      a3[1] = v15;
    }
    v26 = (_QWORD *)v8[1];
    if (v26)
    {
      do
      {
        v27 = v26;
        v26 = (_QWORD *)*v26;
      }
      while (v26);
    }
    else
    {
      do
      {
        v27 = (_QWORD *)v8[2];
        v28 = *v27 == (_QWORD)v8;
        v8 = v27;
      }
      while (!v28);
    }
    v8 = v27;
  }
  while (v27 != v9);
  if (*a3 == a3[1])
  {
LABEL_41:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/viostateset.hpp", 981, (uint64_t)"!image_ids_of_state.empty()", 27, (uint64_t)"No keyframes found for this vio state.", 38, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
  }
}

void sub_20F23A304(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20F23A328(uint64_t *result, _QWORD *a2, uint64_t **a3)
{
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v6;
  _QWORD *i;
  char v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  __int128 v30;
  int v31;

  v4 = *a3;
  v5 = a3[1];
  if ((char *)v5 - (char *)*a3 == 24)
  {
    v6 = result + 3;
    result = sub_20E9DF85C(result + 3, *a3);
    if (result)
    {
      result = sub_20E9DF85C(v6, v4);
      for (i = (_QWORD *)result[7]; i; i = (_QWORD *)*i)
      {
        if (*(_BYTE *)(i[3] + 192))
          ++*a2;
      }
    }
    return result;
  }
  v30 = 0uLL;
  v31 = -1;
  if (v4 == v5)
    return result;
  v9 = 0;
  v10 = result + 3;
  LODWORD(v11) = -1;
LABEL_10:
  v12 = v11;
  do
  {
    result = sub_20E9DF85C(v10, v4);
    if (!result)
      return result;
    v11 = result[8];
    if (v11 < v12)
    {
      v13 = *(_OWORD *)v4;
      v31 = *((_DWORD *)v4 + 4);
      v30 = v13;
      v4 += 3;
      v9 = 1;
      if (v4 == v5)
      {
LABEL_18:
        result = sub_20E9DF85C(v10, (uint64_t *)&v30);
        v14 = (_QWORD *)result[7];
        if (!v14)
          return result;
        v15 = *a3;
        v16 = a3[1];
        if (*a3 == v16)
        {
          do
          {
            if (*(_BYTE *)(v14[3] + 192))
              ++*a2;
            v14 = (_QWORD *)*v14;
          }
          while (v14);
          return result;
        }
        v17 = v31;
        while (2)
        {
          v18 = v14[3];
          if (!*(_BYTE *)(v18 + 192))
          {
LABEL_25:
            v14 = (_QWORD *)*v14;
            if (!v14)
              return result;
            continue;
          }
          break;
        }
        v19 = v15;
        while (2)
        {
          result = (uint64_t *)*((unsigned int *)v19 + 4);
          v20 = *v19;
          if ((_DWORD)result != v17 || v20 != (_QWORD)v30)
          {
            v22 = *((_DWORD *)v19 + 2);
            goto LABEL_35;
          }
          v22 = *((_DWORD *)v19 + 2);
          if (v22 != DWORD2(v30))
          {
LABEL_35:
            v23 = *(_QWORD *)(v18 + 200);
            v24 = *(_QWORD *)(v18 + 208);
            if (v24 != v23)
            {
              v25 = (v24 - v23) >> 5;
              while (1)
              {
                v26 = v25 >> 1;
                v27 = v23 + 32 * (v25 >> 1);
                v28 = *(_DWORD *)(v27 + 16);
                v29 = v28 >= result;
                if (v28 != (_DWORD)result)
                  goto LABEL_43;
                if (*(_QWORD *)v27 >= v20)
                  break;
LABEL_37:
                v23 = v27 + 32;
                v26 = v25 + ~v26;
LABEL_38:
                v25 = v26;
                if (!v26)
                  goto LABEL_46;
              }
              if (*(_QWORD *)v27 != v20)
                goto LABEL_38;
              v29 = *(_DWORD *)(v27 + 8) >= v22;
LABEL_43:
              if (v29)
                goto LABEL_38;
              goto LABEL_37;
            }
LABEL_46:
            if (v23 == v24)
              goto LABEL_25;
            if (*(_DWORD *)(v23 + 16) != (_DWORD)result)
              goto LABEL_25;
            result = *(uint64_t **)v23;
            if (*(_QWORD *)v23 != v20 || *(_DWORD *)(v23 + 8) != v22)
              goto LABEL_25;
          }
          v19 += 3;
          if (v19 == v16)
          {
            ++*a2;
            goto LABEL_25;
          }
          continue;
        }
      }
      goto LABEL_10;
    }
    v4 += 3;
  }
  while (v4 != v5);
  if ((v9 & 1) != 0)
    goto LABEL_18;
  return result;
}

void sub_20F23A57C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v44;
  uint64_t *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  _BOOL4 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  unint64_t v64;
  void *v65[2];
  uint64_t v66;
  unsigned __int8 v67;
  void *__p[2];
  uint64_t v69;
  unsigned __int8 v70;
  void *__dst[2];
  uint64_t v72;
  std::string v73;

  if (*(_BYTE *)(a1 + 22) && !*(_BYTE *)(a1 + 224))
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    return;
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  sub_20E9099B8(a2, *(_QWORD *)(a1 + 72));
  LOBYTE(__p[0]) = 0;
  v70 = 0;
  if (!*(_BYTE *)(a1 + 22))
    goto LABEL_17;
LABEL_6:
  LODWORD(v5) = *(unsigned __int8 *)(a1 + 224);
  if (!*(_BYTE *)(a1 + 224))
  {
LABEL_7:
    LOBYTE(v65[0]) = 0;
    v67 = 0;
    goto LABEL_8;
  }
  while (1)
  {
LABEL_17:
    v5 = *(_QWORD *)(a1 + 72);
    if (!v5)
      goto LABEL_7;
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 2816) + 192);
    sub_20FCCBC60((unint64_t *)v7, &v73);
    v8 = sub_20EB07858(*(_QWORD **)(v7 + 8), (uint64_t)&v73);
    v9 = v8;
    if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v73.__r_.__value_.__l.__data_);
      if (!v9)
      {
LABEL_24:
        LODWORD(v5) = 0;
        goto LABEL_7;
      }
    }
    else if (!v8)
    {
      goto LABEL_24;
    }
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * (*(_QWORD *)(a1 + 64) / 0xAAuLL))
        + 24 * (*(_QWORD *)(a1 + 64) % 0xAAuLL);
    if ((*(char *)(v10 + 23) & 0x80000000) == 0)
    {
      v11 = *(_OWORD *)v10;
      v72 = *(_QWORD *)(v10 + 16);
      *(_OWORD *)__dst = v11;
      v12 = *(_QWORD *)(a1 + 24);
      v13 = *(_QWORD *)(v12 + 2824);
      v14 = *(_QWORD *)(v12 + 2832);
      if (v13 != v14)
        goto LABEL_26;
LABEL_28:
      v17 = *(_QWORD *)(a1 + 64);
      v18 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * (v17 / 0xAA)) + 24 * (v17 % 0xAA);
      if (*(char *)(v18 + 23) < 0)
      {
        operator delete(*(void **)v18);
        v26 = *(_QWORD *)(a1 + 72) - 1;
        v27 = *(_QWORD *)(a1 + 64) + 1;
        *(_QWORD *)(a1 + 64) = v27;
        *(_QWORD *)(a1 + 72) = v26;
        if (v27 < 0x154)
          goto LABEL_38;
      }
      else
      {
        v19 = *(_QWORD *)(a1 + 72) - 1;
        v20 = v17 + 1;
        *(_QWORD *)(a1 + 64) = v20;
        *(_QWORD *)(a1 + 72) = v19;
        if (v20 < 0x154)
          goto LABEL_38;
      }
      operator delete(**(void ***)(a1 + 40));
      *(_QWORD *)(a1 + 40) += 8;
      *(_QWORD *)(a1 + 64) -= 170;
      goto LABEL_38;
    }
    sub_20E860C04(__dst, *(void **)v10, *(_QWORD *)(v10 + 8));
    v15 = *(_QWORD *)(a1 + 24);
    v13 = *(_QWORD *)(v15 + 2824);
    v14 = *(_QWORD *)(v15 + 2832);
    if (v13 == v14)
      goto LABEL_28;
LABEL_26:
    while (1)
    {
      v16 = sub_20EB07858(*(_QWORD **)(*(_QWORD *)(v13 + 192) + 8), (uint64_t)__dst);
      if (v16)
        break;
      v13 += 4472;
      if (v13 == v14)
        goto LABEL_28;
    }
    v21 = *(_QWORD *)(a1 + 40);
    v22 = *(_QWORD *)(a1 + 64);
    v23 = (uint64_t *)(v21 + 8 * (v22 / 0xAA));
    if (!*((_BYTE *)v16 + 320))
    {
      v28 = *(_QWORD *)(a1 + 48);
      v29 = *v23;
      v30 = *v23 + 24 * (v22 % 0xAA);
      if (v28 == v21)
        v30 = 0;
      v31 = v30 - v29;
      v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - v29) >> 3);
      if (v31 < -23)
      {
        v41 = 168 - v32;
        v42 = (168 - v32) / 0xAA;
        v35 = &v23[-v42];
        v36 = *v35 + 24 * (170 * v42 - v41) + 4056;
        if (v28 != v21)
        {
LABEL_44:
          v37 = *(_QWORD *)(v21 + 8 * ((*(_QWORD *)(a1 + 72) + v22) / 0xAA))
              + 24 * ((*(_QWORD *)(a1 + 72) + v22) % 0xAA);
          if (v36 != v30 && v36 != v37)
          {
LABEL_58:
            v44 = v36;
            v45 = v35;
            while (1)
            {
              v46 = *(_OWORD *)v30;
              v73.__r_.__value_.__r.__words[2] = *(_QWORD *)(v30 + 16);
              *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v46;
              v47 = *(_OWORD *)v44;
              *(_QWORD *)(v30 + 16) = *(_QWORD *)(v44 + 16);
              *(_OWORD *)v30 = v47;
              v30 += 24;
              v48 = *(_OWORD *)&v73.__r_.__value_.__l.__data_;
              *(_QWORD *)(v44 + 16) = *((_QWORD *)&v73.__r_.__value_.__l + 2);
              *(_OWORD *)v44 = v48;
              if (v30 - *v23 == 4080)
              {
                v49 = v23[1];
                ++v23;
                v30 = v49;
                v44 += 24;
                if (v44 - *v45 != 4080)
                  goto LABEL_61;
              }
              else
              {
                v44 += 24;
                if (v44 - *v45 != 4080)
                {
LABEL_61:
                  if (v44 == v37)
                    goto LABEL_68;
                  goto LABEL_65;
                }
              }
              v50 = v45[1];
              ++v45;
              v44 = v50;
              if (v50 == v37)
              {
LABEL_68:
                if (v30 == v36)
                  break;
                v51 = v36;
                v52 = v35;
LABEL_73:
                v54 = *(_OWORD *)v30;
                v73.__r_.__value_.__r.__words[2] = *(_QWORD *)(v30 + 16);
                *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v54;
                v55 = *(_OWORD *)v51;
                *(_QWORD *)(v30 + 16) = *(_QWORD *)(v51 + 16);
                *(_OWORD *)v30 = v55;
                v30 += 24;
                v56 = *(_OWORD *)&v73.__r_.__value_.__l.__data_;
                *(_QWORD *)(v51 + 16) = *((_QWORD *)&v73.__r_.__value_.__l + 2);
                *(_OWORD *)v51 = v56;
                if (v30 - *v23 == 4080)
                {
                  v57 = v23[1];
                  ++v23;
                  v30 = v57;
                  v51 += 24;
                  if (v51 - *v52 == 4080)
                  {
LABEL_77:
                    v58 = v52[1];
                    ++v52;
                    v51 = v58;
                    v53 = v30 == v36;
                    if (v58 == v37)
                    {
LABEL_78:
                      if (v30 == v36)
                        break;
                      v59 = v36 + 24;
                      v60 = v35 + 1;
LABEL_80:
                      v61 = *(_OWORD *)v30;
                      v73.__r_.__value_.__r.__words[2] = *(_QWORD *)(v30 + 16);
                      *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v61;
                      v62 = *(_OWORD *)v36;
                      *(_QWORD *)(v30 + 16) = *(_QWORD *)(v36 + 16);
                      *(_OWORD *)v30 = v62;
                      v30 += 24;
                      v63 = *(_OWORD *)&v73.__r_.__value_.__l.__data_;
                      *(_QWORD *)(v36 + 16) = *((_QWORD *)&v73.__r_.__value_.__l + 2);
                      *(_OWORD *)v36 = v63;
                      if (v30 - *v23 == 4080)
                      {
                        v64 = v23[1];
                        ++v23;
                        v30 = v64;
                        v51 = v36 + 24;
                        v52 = v35;
                        if (v59 - *v35 != 4080)
                        {
LABEL_82:
                          v53 = v30 == v36;
                          if (v51 != v37)
                            goto LABEL_71;
                          goto LABEL_86;
                        }
                      }
                      else
                      {
                        v51 = v36 + 24;
                        v52 = v35;
                        if (v59 - *v35 != 4080)
                          goto LABEL_82;
                      }
                      v51 = *v60;
                      v52 = v35 + 1;
                      v53 = v30 == v36;
                      if (*v60 != v37)
                        goto LABEL_71;
LABEL_86:
                      if (v30 == v36)
                        break;
                      goto LABEL_80;
                    }
LABEL_71:
                    if (v53)
                    {
                      v36 = v51;
                      v35 = v52;
                    }
                    goto LABEL_73;
                  }
                }
                else
                {
                  v51 += 24;
                  if (v51 - *v52 == 4080)
                    goto LABEL_77;
                }
                v53 = v30 == v36;
                if (v51 == v37)
                  goto LABEL_78;
                goto LABEL_71;
              }
LABEL_65:
              if (v30 == v36)
              {
                v36 = v44;
                v35 = v45;
              }
            }
          }
LABEL_38:
          LODWORD(v5) = 0;
          LOBYTE(v65[0]) = 0;
          v67 = 0;
          if ((SHIBYTE(v72) & 0x80000000) == 0)
            goto LABEL_8;
LABEL_39:
          operator delete(__dst[0]);
          LODWORD(v5) = v67;
          goto LABEL_8;
        }
      }
      else
      {
        v33 = v32 + 1;
        v34 = (v32 + 1) / 0xAA;
        v35 = &v23[v34];
        v36 = *v35 + 24 * (v33 - 170 * v34);
        if (v28 != v21)
          goto LABEL_44;
      }
      v37 = 0;
      if (v36 != v30 && v36 != 0)
        goto LABEL_58;
      goto LABEL_38;
    }
    v24 = *v23 + 24 * (v22 % 0xAA);
    if (*(char *)(v24 + 23) < 0)
    {
      operator delete(*(void **)v24);
      v39 = *(_QWORD *)(a1 + 64);
      v40 = *(_QWORD *)(a1 + 72) - 1;
      *(_QWORD *)(a1 + 64) = v39 + 1;
      *(_QWORD *)(a1 + 72) = v40;
      if ((unint64_t)(v39 + 1) < 0x154)
      {
LABEL_34:
        if ((SHIBYTE(v72) & 0x80000000) == 0)
          goto LABEL_35;
        goto LABEL_51;
      }
    }
    else
    {
      v25 = *(_QWORD *)(a1 + 72) - 1;
      *(_QWORD *)(a1 + 64) = v22 + 1;
      *(_QWORD *)(a1 + 72) = v25;
      if (v22 + 1 < 0x154)
        goto LABEL_34;
    }
    operator delete(**(void ***)(a1 + 40));
    *(_QWORD *)(a1 + 40) += 8;
    *(_QWORD *)(a1 + 64) -= 170;
    if ((SHIBYTE(v72) & 0x80000000) == 0)
    {
LABEL_35:
      *(_OWORD *)v65 = *(_OWORD *)__dst;
      v66 = v72;
      LODWORD(v5) = 1;
      v67 = 1;
      goto LABEL_8;
    }
LABEL_51:
    sub_20E860C04(v65, __dst[0], (unint64_t)__dst[1]);
    LODWORD(v5) = 1;
    v67 = 1;
    if (SHIBYTE(v72) < 0)
      goto LABEL_39;
LABEL_8:
    if (v70 == (_DWORD)v5)
    {
      if (!v70)
        goto LABEL_93;
      if (SHIBYTE(v69) < 0)
      {
        operator delete(__p[0]);
        *(_OWORD *)__p = *(_OWORD *)v65;
        v69 = v66;
        if (!v70)
          return;
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)v65;
        v69 = v66;
      }
      goto LABEL_15;
    }
    if (v70)
      break;
    *(_OWORD *)__p = *(_OWORD *)v65;
    v69 = v66;
    v70 = 1;
LABEL_15:
    v6 = *(_QWORD *)(a2 + 8);
    if (v6 < *(_QWORD *)(a2 + 16))
    {
      v4 = *(_OWORD *)__p;
      *(_QWORD *)(v6 + 16) = v69;
      *(_OWORD *)v6 = v4;
      __p[1] = 0;
      v69 = 0;
      __p[0] = 0;
      *(_QWORD *)(a2 + 8) = v6 + 24;
      if (*(_BYTE *)(a1 + 22))
        goto LABEL_6;
    }
    else
    {
      *(_QWORD *)(a2 + 8) = sub_20E8780F0((void **)a2, (uint64_t)__p);
      if (*(_BYTE *)(a1 + 22))
        goto LABEL_6;
    }
  }
  if (SHIBYTE(v69) < 0)
    operator delete(__p[0]);
  v70 = 0;
  if (v67 && SHIBYTE(v66) < 0)
  {
    operator delete(v65[0]);
    LODWORD(v5) = v70;
LABEL_93:
    if ((_DWORD)v5)
    {
      if (SHIBYTE(v69) < 0)
        operator delete(__p[0]);
    }
  }
}

void sub_20F23AC54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  void **v32;

  if (a25 < 0)
    operator delete(__p);
  if (a19)
  {
    if (a18 < 0)
      operator delete(a13);
  }
  sub_20E89FB98(v32);
  _Unwind_Resume(a1);
}

void sub_20F23ACC8(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  std::string::size_type v8;
  int64x2_t v9;
  _QWORD *v10;
  void *v11;
  std::string::size_type size;
  std::string::size_type v13;
  std::string::size_type v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t i;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t j;
  int64x2_t v26;
  uint64_t v27;
  std::string *p_p;
  std::string __p;

  ++*(_DWORD *)(a1 + 168);
  if (*(_BYTE *)(a1 + 22) && !*(_BYTE *)(a1 + 224))
    goto LABEL_17;
  v4 = *(_QWORD *)(a1 + 208);
  if (!v4)
    goto LABEL_17;
  if (!*(_BYTE *)(a1 + 21))
  {
    v10 = *(_QWORD **)(a1 + 200);
    memset(&__p, 0, sizeof(__p));
    if (v4 >> 61)
      sub_20E92CED8();
    v11 = operator new(8 * v4);
    size = (std::string::size_type)v11;
    v13 = (std::string::size_type)v11 + 8 * v4;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v11;
    __p.__r_.__value_.__r.__words[2] = v13;
    p_p = &__p;
    if (v10)
    {
      do
      {
        v27 = v10[2];
        sub_20E9B2D04((uint64_t *)&p_p, &v27);
        v10 = (_QWORD *)*v10;
      }
      while (v10);
      size = __p.__r_.__value_.__l.__size_;
      v14 = __p.__r_.__value_.__r.__words[0];
      v13 = __p.__r_.__value_.__r.__words[2];
      if (!*(_QWORD *)(a1 + 208))
      {
LABEL_29:
        a2->i64[0] = v14;
        a2->i64[1] = size;
        a2[1].i64[0] = v13;
        return;
      }
      v15 = *(_QWORD **)(a1 + 200);
      if (v15)
      {
        do
        {
          v16 = (_QWORD *)*v15;
          operator delete(v15);
          v15 = v16;
        }
        while (v16);
      }
    }
    else
    {
      v14 = (std::string::size_type)v11;
    }
    *(_QWORD *)(a1 + 200) = 0;
    v20 = *(_QWORD *)(a1 + 192);
    if (v20)
    {
      for (i = 0; i != v20; ++i)
        *(_QWORD *)(*(_QWORD *)(a1 + 184) + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 208) = 0;
    goto LABEL_29;
  }
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 2816) + 192);
  sub_20FCCBC60((unint64_t *)v5, &__p);
  v6 = sub_20EB07858(*(_QWORD **)(v5 + 8), (uint64_t)&__p);
  v7 = v6;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v6)
      goto LABEL_7;
LABEL_17:
    a2->i64[0] = 0;
    a2->i64[1] = 0;
    a2[1].i64[0] = 0;
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v7)
    goto LABEL_17;
LABEL_7:
  if (*(_DWORD *)(a1 + 168) >= *(_DWORD *)(a1 + 8))
  {
    *(_DWORD *)(a1 + 168) = 0;
    v17 = *(_QWORD **)(a1 + 200);
    v18 = *(_QWORD *)(a1 + 208);
    memset(&__p, 0, sizeof(__p));
    if (v18)
    {
      if (v18 >> 61)
        sub_20E92CED8();
      v19 = operator new(8 * v18);
      v8 = (std::string::size_type)v19 + 8 * v18;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v19;
      __p.__r_.__value_.__r.__words[2] = v8;
      p_p = &__p;
      if (v17)
      {
        do
        {
LABEL_21:
          v27 = v17[2];
          sub_20E9B2D04((uint64_t *)&p_p, &v27);
          v17 = (_QWORD *)*v17;
        }
        while (v17);
        v9 = *(int64x2_t *)&__p.__r_.__value_.__l.__data_;
        v8 = __p.__r_.__value_.__r.__words[2];
        if (!*(_QWORD *)(a1 + 208))
          goto LABEL_38;
        goto LABEL_32;
      }
    }
    else
    {
      v8 = 0;
      v19 = 0;
      p_p = &__p;
      if (v17)
        goto LABEL_21;
    }
    v9 = vdupq_n_s64((unint64_t)v19);
    if (!v18)
      goto LABEL_38;
LABEL_32:
    v26 = v9;
    v22 = *(_QWORD **)(a1 + 200);
    if (v22)
    {
      do
      {
        v23 = (_QWORD *)*v22;
        operator delete(v22);
        v22 = v23;
      }
      while (v23);
    }
    *(_QWORD *)(a1 + 200) = 0;
    v24 = *(_QWORD *)(a1 + 192);
    if (v24)
    {
      for (j = 0; j != v24; ++j)
        *(_QWORD *)(*(_QWORD *)(a1 + 184) + 8 * j) = 0;
    }
    *(_QWORD *)(a1 + 208) = 0;
    v9 = v26;
    goto LABEL_38;
  }
  v8 = 0;
  v9 = 0uLL;
LABEL_38:
  *a2 = v9;
  a2[1].i64[0] = v8;
}

void sub_20F23AF64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F23AFA0(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  __int16 v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t v31;
  unint64_t v32;
  unint64_t v34;
  __int128 v35;
  unint64_t v36;
  BOOL v37;
  unint64_t v39;
  uint64_t v40;
  unsigned int v41;
  __int128 v43;
  BOOL v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unint64_t i;
  unint64_t v51;
  __int128 v52;
  unint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unint64_t v57;
  BOOL v58;
  __int128 v60;
  unint64_t v61;
  uint64_t v62;
  unsigned int v63;
  __int128 *v65;
  unint64_t v66;
  BOOL v67;
  __int128 v68;
  __int128 *v69;
  __int128 *v70;
  __int128 *v71;
  unint64_t v72;
  unint64_t v73;
  __int128 v74;
  __int16 v75;
  __int16 v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  __int128 v80;
  unint64_t v81;
  unint64_t v82;
  BOOL v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unsigned int v90;
  BOOL v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  int64_t v96;
  int64_t v97;
  int64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  BOOL v102;
  unint64_t v103;
  unint64_t v104;
  unsigned int v105;
  unint64_t v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  BOOL v112;
  int64_t v114;
  uint64_t v116;
  unint64_t v117;
  __int128 v118;
  unint64_t v119;
  uint64_t v120;
  int64_t v121;
  unint64_t v122;
  BOOL v123;
  __int128 v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unsigned int v130;
  BOOL v131;
  __int16 v132;
  __int128 v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v137;
  unint64_t v138;
  unsigned int v139;
  BOOL v140;
  uint64_t v141;
  unint64_t v142;
  BOOL v143;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  uint64_t v153;
  uint64_t v154;
  __int128 v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;

__n128 sub_20F23BB30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  BOOL v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;

  sub_20F23BD6C((__int128 *)a1, (uint64_t *)a2, (__int128 *)a3);
  if (*(_QWORD *)a4 < *(_QWORD *)a3
    || (*(_QWORD *)a4 == *(_QWORD *)a3 ? (v11 = *(_DWORD *)(a4 + 8) >= *(_DWORD *)(a3 + 8)) : (v11 = 1), !v11))
  {
    result = *(__n128 *)a3;
    v12 = *(_QWORD *)(a3 + 16);
    v13 = *(_WORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_WORD *)(a3 + 16) = v13;
    *(_WORD *)(a4 + 16) = v12;
    *(__n128 *)a4 = result;
    if (*(_QWORD *)a3 < *(_QWORD *)a2 || *(_QWORD *)a3 == *(_QWORD *)a2 && *(_DWORD *)(a3 + 8) < *(_DWORD *)(a2 + 8))
    {
      result = *(__n128 *)a2;
      v14 = *(_QWORD *)(a2 + 16);
      v15 = *(_WORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_WORD *)(a2 + 16) = v15;
      *(_WORD *)(a3 + 16) = v14;
      *(__n128 *)a3 = result;
      if (*(_QWORD *)a2 < *(_QWORD *)a1 || *(_QWORD *)a2 == *(_QWORD *)a1 && *(_DWORD *)(a2 + 8) < *(_DWORD *)(a1 + 8))
      {
        result = *(__n128 *)a1;
        v16 = *(_QWORD *)(a1 + 16);
        v17 = *(_WORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_WORD *)(a1 + 16) = v17;
        *(_WORD *)(a2 + 16) = v16;
        *(__n128 *)a2 = result;
      }
    }
  }
  if (*(_QWORD *)a5 < *(_QWORD *)a4 || *(_QWORD *)a5 == *(_QWORD *)a4 && *(_DWORD *)(a5 + 8) < *(_DWORD *)(a4 + 8))
  {
    result = *(__n128 *)a4;
    v18 = *(_QWORD *)(a4 + 16);
    v19 = *(_WORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_WORD *)(a4 + 16) = v19;
    *(_WORD *)(a5 + 16) = v18;
    *(__n128 *)a5 = result;
    if (*(_QWORD *)a4 < *(_QWORD *)a3 || *(_QWORD *)a4 == *(_QWORD *)a3 && *(_DWORD *)(a4 + 8) < *(_DWORD *)(a3 + 8))
    {
      result = *(__n128 *)a3;
      v20 = *(_QWORD *)(a3 + 16);
      v21 = *(_WORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_WORD *)(a3 + 16) = v21;
      *(_WORD *)(a4 + 16) = v20;
      *(__n128 *)a4 = result;
      if (*(_QWORD *)a3 < *(_QWORD *)a2 || *(_QWORD *)a3 == *(_QWORD *)a2 && *(_DWORD *)(a3 + 8) < *(_DWORD *)(a2 + 8))
      {
        result = *(__n128 *)a2;
        v22 = *(_QWORD *)(a2 + 16);
        v23 = *(_WORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_WORD *)(a2 + 16) = v23;
        *(_WORD *)(a3 + 16) = v22;
        *(__n128 *)a3 = result;
        if (*(_QWORD *)a2 < *(_QWORD *)a1
          || *(_QWORD *)a2 == *(_QWORD *)a1 && *(_DWORD *)(a2 + 8) < *(_DWORD *)(a1 + 8))
        {
          result = *(__n128 *)a1;
          v24 = *(_QWORD *)(a1 + 16);
          v25 = *(_WORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_WORD *)(a1 + 16) = v25;
          *(_WORD *)(a2 + 16) = v24;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

__int128 *sub_20F23BD6C(__int128 *result, uint64_t *a2, __int128 *a3)
{
  unint64_t v3;
  unsigned int v4;
  BOOL v5;
  BOOL v6;
  __int128 v7;
  uint64_t v8;
  __int16 v9;
  __int128 v10;
  uint64_t v11;
  __int16 v12;
  BOOL v13;
  __int128 v14;
  uint64_t v15;
  __int16 v16;
  __int128 v17;
  uint64_t v18;
  __int16 v19;
  __int16 v20;

  v3 = *a2;
  v4 = *((_DWORD *)a2 + 2);
  if ((unint64_t)*a2 >= *(_QWORD *)result
    && (*a2 == *(_QWORD *)result ? (v5 = v4 >= *((_DWORD *)result + 2)) : (v5 = 1), v5))
  {
    if (*(_QWORD *)a3 < v3 || (*(_QWORD *)a3 == v3 ? (v6 = *((_DWORD *)a3 + 2) >= v4) : (v6 = 1), !v6))
    {
      v7 = *(_OWORD *)a2;
      v8 = a2[2];
      v9 = *((_WORD *)a3 + 8);
      *(_OWORD *)a2 = *a3;
      *((_WORD *)a2 + 8) = v9;
      *((_WORD *)a3 + 8) = v8;
      *a3 = v7;
      if ((unint64_t)*a2 < *(_QWORD *)result
        || *a2 == *(_QWORD *)result && *((_DWORD *)a2 + 2) < *((_DWORD *)result + 2))
      {
        v10 = *result;
        v11 = *((_QWORD *)result + 2);
        v12 = *((_WORD *)a2 + 8);
        *result = *(_OWORD *)a2;
        *((_WORD *)result + 8) = v12;
        *((_WORD *)a2 + 8) = v11;
        *(_OWORD *)a2 = v10;
      }
    }
  }
  else
  {
    if (*(_QWORD *)a3 < v3 || (*(_QWORD *)a3 == v3 ? (v13 = *((_DWORD *)a3 + 2) >= v4) : (v13 = 1), !v13))
    {
      v17 = *result;
      v18 = *((_QWORD *)result + 2);
      v20 = *((_WORD *)a3 + 8);
      *result = *a3;
      *((_WORD *)result + 8) = v20;
      goto LABEL_27;
    }
    v14 = *result;
    v15 = *((_QWORD *)result + 2);
    v16 = *((_WORD *)a2 + 8);
    *result = *(_OWORD *)a2;
    *((_WORD *)result + 8) = v16;
    *((_WORD *)a2 + 8) = v15;
    *(_OWORD *)a2 = v14;
    if (*(_QWORD *)a3 < (unint64_t)*a2 || *(_QWORD *)a3 == *a2 && *((_DWORD *)a3 + 2) < *((_DWORD *)a2 + 2))
    {
      v17 = *(_OWORD *)a2;
      v18 = a2[2];
      v19 = *((_WORD *)a3 + 8);
      *(_OWORD *)a2 = *a3;
      *((_WORD *)a2 + 8) = v19;
LABEL_27:
      *((_WORD *)a3 + 8) = v18;
      *a3 = v17;
    }
  }
  return result;
}

BOOL sub_20F23BEBC(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  __int128 *v22;
  __int128 *v23;
  __int128 *v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int16 v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  __int128 v33;
  unint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (__int128 *)(a2 - 24);
      v7 = *(_QWORD *)(a2 - 24);
      if (v7 < *(_QWORD *)a1 || v7 == *(_QWORD *)a1 && *(_DWORD *)(a2 - 16) < *(_DWORD *)(a1 + 8))
      {
        v8 = *(_OWORD *)a1;
        v9 = *(_QWORD *)(a1 + 16);
        v10 = *(_WORD *)(a2 - 8);
        *(_OWORD *)a1 = *v6;
        *(_WORD *)(a1 + 16) = v10;
        *(_WORD *)(a2 - 8) = v9;
        *v6 = v8;
      }
      return result;
    case 3uLL:
      sub_20F23BD6C((__int128 *)a1, (uint64_t *)(a1 + 24), (__int128 *)(a2 - 24));
      return 1;
    case 4uLL:
      v22 = (__int128 *)(a1 + 24);
      v23 = (__int128 *)(a1 + 48);
      sub_20F23BD6C((__int128 *)a1, (uint64_t *)(a1 + 24), (__int128 *)(a1 + 48));
      v24 = (__int128 *)(a2 - 24);
      v25 = *(_QWORD *)(a2 - 24);
      v26 = *(_QWORD *)(a1 + 48);
      if (v25 >= v26)
      {
        result = 1;
        if (v25 != v26 || *(_DWORD *)(a2 - 16) >= *(_DWORD *)(a1 + 56))
          return result;
      }
      v27 = *v23;
      v28 = *(_QWORD *)(a1 + 64);
      v29 = *(_WORD *)(a2 - 8);
      *v23 = *v24;
      *(_WORD *)(a1 + 64) = v29;
      *(_WORD *)(a2 - 8) = v28;
      *v24 = v27;
      v30 = *(_QWORD *)(a1 + 48);
      v31 = *(_QWORD *)(a1 + 24);
      if (v30 >= v31)
      {
        result = 1;
        if (v30 != v31 || *(_DWORD *)(a1 + 56) >= *(_DWORD *)(a1 + 32))
          return result;
      }
      v32 = *(_QWORD *)(a1 + 40);
      v33 = *v22;
      *v22 = *v23;
      *(_WORD *)(a1 + 40) = *(_WORD *)(a1 + 64);
      *v23 = v33;
      *(_WORD *)(a1 + 64) = v32;
      v34 = *(_QWORD *)(a1 + 24);
      if (v34 >= *(_QWORD *)a1)
      {
        result = 1;
        if (v34 != *(_QWORD *)a1 || *(_DWORD *)(a1 + 32) >= *(_DWORD *)(a1 + 8))
          return result;
      }
      v35 = *(_QWORD *)(a1 + 16);
      v36 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *v22;
      *(_WORD *)(a1 + 16) = *(_WORD *)(a1 + 40);
      *v22 = v36;
      *(_WORD *)(a1 + 40) = v35;
      return 1;
    case 5uLL:
      sub_20F23BB30(a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24);
      return 1;
    default:
      v11 = a1 + 48;
      sub_20F23BD6C((__int128 *)a1, (uint64_t *)(a1 + 24), (__int128 *)(a1 + 48));
      v12 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v16 = *(_QWORD *)v12;
    v17 = *(_DWORD *)(v12 + 8);
    if (*(_QWORD *)v12 < *(_QWORD *)v11
      || (*(_QWORD *)v12 == *(_QWORD *)v11 ? (v18 = v17 >= *(_DWORD *)(v11 + 8)) : (v18 = 1), !v18))
    {
      v37 = *(_QWORD *)(v12 + 12);
      *(_OWORD *)v12 = *(_OWORD *)v11;
      *(_WORD *)(v12 + 16) = *(_WORD *)(v11 + 16);
      v15 = a1;
      if (v11 != a1)
      {
        v19 = v13;
        while (1)
        {
          v20 = *(_QWORD *)(a1 + v19 + 24);
          if (v16 >= v20 && (v16 != v20 || v17 >= *(_DWORD *)(a1 + v19 + 32)))
            break;
          *(_OWORD *)(a1 + v19 + 48) = *(_OWORD *)(a1 + v19 + 24);
          *(_WORD *)(a1 + v19 + 64) = *(_WORD *)(a1 + v19 + 40);
          v19 -= 24;
          if (v19 == -48)
          {
            v15 = a1;
            goto LABEL_9;
          }
        }
        v15 = a1 + v19 + 48;
      }
LABEL_9:
      *(_QWORD *)v15 = v16;
      *(_DWORD *)(v15 + 8) = v17;
      *(_DWORD *)(v15 + 12) = v37;
      *(_WORD *)(v15 + 16) = WORD2(v37);
      if (++v14 == 8)
        return v12 + 24 == a2;
    }
    v11 = v12;
    v13 += 24;
    v12 += 24;
    if (v12 == a2)
      return 1;
  }
}

void sub_20F23C218(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t v31;
  unint64_t v32;
  unint64_t v34;
  __int128 v35;
  unint64_t v36;
  BOOL v37;
  unint64_t v39;
  uint64_t v40;
  unsigned int v41;
  __int128 v43;
  BOOL v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unint64_t i;
  unint64_t v51;
  __int128 v52;
  unint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unint64_t v57;
  BOOL v58;
  __int128 v60;
  unint64_t v61;
  uint64_t v62;
  unsigned int v63;
  __int128 *v65;
  unint64_t v66;
  BOOL v67;
  __int128 v68;
  __int128 *v69;
  __int128 *v70;
  __int128 *v71;
  unint64_t v72;
  unint64_t v73;
  __int128 v74;
  char v75;
  char v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  __int128 v80;
  unint64_t v81;
  unint64_t v82;
  BOOL v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unsigned int v90;
  BOOL v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  int64_t v96;
  int64_t v97;
  int64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  BOOL v102;
  unint64_t v103;
  unint64_t v104;
  unsigned int v105;
  unint64_t v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  BOOL v112;
  int64_t v114;
  uint64_t v116;
  unint64_t v117;
  __int128 v118;
  unint64_t v119;
  uint64_t v120;
  int64_t v121;
  unint64_t v122;
  BOOL v123;
  __int128 v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unsigned int v130;
  BOOL v131;
  char v132;
  __int128 v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v137;
  unint64_t v138;
  unsigned int v139;
  BOOL v140;
  uint64_t v141;
  unint64_t v142;
  BOOL v143;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  uint64_t v153;
  uint64_t v154;
  __int128 v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;

__n128 sub_20F23CDA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  BOOL v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;

  sub_20F23CFE4((__int128 *)a1, (uint64_t *)a2, (__int128 *)a3);
  if (*(_QWORD *)a4 < *(_QWORD *)a3
    || (*(_QWORD *)a4 == *(_QWORD *)a3 ? (v11 = *(_DWORD *)(a4 + 8) >= *(_DWORD *)(a3 + 8)) : (v11 = 1), !v11))
  {
    result = *(__n128 *)a3;
    v12 = *(_QWORD *)(a3 + 16);
    v13 = *(_BYTE *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_BYTE *)(a3 + 16) = v13;
    *(_BYTE *)(a4 + 16) = v12;
    *(__n128 *)a4 = result;
    if (*(_QWORD *)a3 < *(_QWORD *)a2 || *(_QWORD *)a3 == *(_QWORD *)a2 && *(_DWORD *)(a3 + 8) < *(_DWORD *)(a2 + 8))
    {
      result = *(__n128 *)a2;
      v14 = *(_QWORD *)(a2 + 16);
      v15 = *(_BYTE *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_BYTE *)(a2 + 16) = v15;
      *(_BYTE *)(a3 + 16) = v14;
      *(__n128 *)a3 = result;
      if (*(_QWORD *)a2 < *(_QWORD *)a1 || *(_QWORD *)a2 == *(_QWORD *)a1 && *(_DWORD *)(a2 + 8) < *(_DWORD *)(a1 + 8))
      {
        result = *(__n128 *)a1;
        v16 = *(_QWORD *)(a1 + 16);
        v17 = *(_BYTE *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_BYTE *)(a1 + 16) = v17;
        *(_BYTE *)(a2 + 16) = v16;
        *(__n128 *)a2 = result;
      }
    }
  }
  if (*(_QWORD *)a5 < *(_QWORD *)a4 || *(_QWORD *)a5 == *(_QWORD *)a4 && *(_DWORD *)(a5 + 8) < *(_DWORD *)(a4 + 8))
  {
    result = *(__n128 *)a4;
    v18 = *(_QWORD *)(a4 + 16);
    v19 = *(_BYTE *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_BYTE *)(a4 + 16) = v19;
    *(_BYTE *)(a5 + 16) = v18;
    *(__n128 *)a5 = result;
    if (*(_QWORD *)a4 < *(_QWORD *)a3 || *(_QWORD *)a4 == *(_QWORD *)a3 && *(_DWORD *)(a4 + 8) < *(_DWORD *)(a3 + 8))
    {
      result = *(__n128 *)a3;
      v20 = *(_QWORD *)(a3 + 16);
      v21 = *(_BYTE *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_BYTE *)(a3 + 16) = v21;
      *(_BYTE *)(a4 + 16) = v20;
      *(__n128 *)a4 = result;
      if (*(_QWORD *)a3 < *(_QWORD *)a2 || *(_QWORD *)a3 == *(_QWORD *)a2 && *(_DWORD *)(a3 + 8) < *(_DWORD *)(a2 + 8))
      {
        result = *(__n128 *)a2;
        v22 = *(_QWORD *)(a2 + 16);
        v23 = *(_BYTE *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_BYTE *)(a2 + 16) = v23;
        *(_BYTE *)(a3 + 16) = v22;
        *(__n128 *)a3 = result;
        if (*(_QWORD *)a2 < *(_QWORD *)a1
          || *(_QWORD *)a2 == *(_QWORD *)a1 && *(_DWORD *)(a2 + 8) < *(_DWORD *)(a1 + 8))
        {
          result = *(__n128 *)a1;
          v24 = *(_QWORD *)(a1 + 16);
          v25 = *(_BYTE *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_BYTE *)(a1 + 16) = v25;
          *(_BYTE *)(a2 + 16) = v24;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

__int128 *sub_20F23CFE4(__int128 *result, uint64_t *a2, __int128 *a3)
{
  unint64_t v3;
  unsigned int v4;
  BOOL v5;
  BOOL v6;
  __int128 v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  uint64_t v11;
  char v12;
  BOOL v13;
  __int128 v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  char v20;

  v3 = *a2;
  v4 = *((_DWORD *)a2 + 2);
  if ((unint64_t)*a2 >= *(_QWORD *)result
    && (*a2 == *(_QWORD *)result ? (v5 = v4 >= *((_DWORD *)result + 2)) : (v5 = 1), v5))
  {
    if (*(_QWORD *)a3 < v3 || (*(_QWORD *)a3 == v3 ? (v6 = *((_DWORD *)a3 + 2) >= v4) : (v6 = 1), !v6))
    {
      v7 = *(_OWORD *)a2;
      v8 = a2[2];
      v9 = *((_BYTE *)a3 + 16);
      *(_OWORD *)a2 = *a3;
      *((_BYTE *)a2 + 16) = v9;
      *((_BYTE *)a3 + 16) = v8;
      *a3 = v7;
      if ((unint64_t)*a2 < *(_QWORD *)result
        || *a2 == *(_QWORD *)result && *((_DWORD *)a2 + 2) < *((_DWORD *)result + 2))
      {
        v10 = *result;
        v11 = *((_QWORD *)result + 2);
        v12 = *((_BYTE *)a2 + 16);
        *result = *(_OWORD *)a2;
        *((_BYTE *)result + 16) = v12;
        *((_BYTE *)a2 + 16) = v11;
        *(_OWORD *)a2 = v10;
      }
    }
  }
  else
  {
    if (*(_QWORD *)a3 < v3 || (*(_QWORD *)a3 == v3 ? (v13 = *((_DWORD *)a3 + 2) >= v4) : (v13 = 1), !v13))
    {
      v17 = *result;
      v18 = *((_QWORD *)result + 2);
      v20 = *((_BYTE *)a3 + 16);
      *result = *a3;
      *((_BYTE *)result + 16) = v20;
      goto LABEL_27;
    }
    v14 = *result;
    v15 = *((_QWORD *)result + 2);
    v16 = *((_BYTE *)a2 + 16);
    *result = *(_OWORD *)a2;
    *((_BYTE *)result + 16) = v16;
    *((_BYTE *)a2 + 16) = v15;
    *(_OWORD *)a2 = v14;
    if (*(_QWORD *)a3 < (unint64_t)*a2 || *(_QWORD *)a3 == *a2 && *((_DWORD *)a3 + 2) < *((_DWORD *)a2 + 2))
    {
      v17 = *(_OWORD *)a2;
      v18 = a2[2];
      v19 = *((_BYTE *)a3 + 16);
      *(_OWORD *)a2 = *a3;
      *((_BYTE *)a2 + 16) = v19;
LABEL_27:
      *((_BYTE *)a3 + 16) = v18;
      *a3 = v17;
    }
  }
  return result;
}

BOOL sub_20F23D134(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  __int128 *v22;
  __int128 *v23;
  __int128 *v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  __int128 v33;
  unint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (__int128 *)(a2 - 24);
      v7 = *(_QWORD *)(a2 - 24);
      if (v7 < *(_QWORD *)a1 || v7 == *(_QWORD *)a1 && *(_DWORD *)(a2 - 16) < *(_DWORD *)(a1 + 8))
      {
        v8 = *(_OWORD *)a1;
        v9 = *(_QWORD *)(a1 + 16);
        v10 = *(_BYTE *)(a2 - 8);
        *(_OWORD *)a1 = *v6;
        *(_BYTE *)(a1 + 16) = v10;
        *(_BYTE *)(a2 - 8) = v9;
        *v6 = v8;
      }
      return result;
    case 3uLL:
      sub_20F23CFE4((__int128 *)a1, (uint64_t *)(a1 + 24), (__int128 *)(a2 - 24));
      return 1;
    case 4uLL:
      v22 = (__int128 *)(a1 + 24);
      v23 = (__int128 *)(a1 + 48);
      sub_20F23CFE4((__int128 *)a1, (uint64_t *)(a1 + 24), (__int128 *)(a1 + 48));
      v24 = (__int128 *)(a2 - 24);
      v25 = *(_QWORD *)(a2 - 24);
      v26 = *(_QWORD *)(a1 + 48);
      if (v25 >= v26)
      {
        result = 1;
        if (v25 != v26 || *(_DWORD *)(a2 - 16) >= *(_DWORD *)(a1 + 56))
          return result;
      }
      v27 = *v23;
      v28 = *(_QWORD *)(a1 + 64);
      v29 = *(_BYTE *)(a2 - 8);
      *v23 = *v24;
      *(_BYTE *)(a1 + 64) = v29;
      *(_BYTE *)(a2 - 8) = v28;
      *v24 = v27;
      v30 = *(_QWORD *)(a1 + 48);
      v31 = *(_QWORD *)(a1 + 24);
      if (v30 >= v31)
      {
        result = 1;
        if (v30 != v31 || *(_DWORD *)(a1 + 56) >= *(_DWORD *)(a1 + 32))
          return result;
      }
      v32 = *(_QWORD *)(a1 + 40);
      v33 = *v22;
      *v22 = *v23;
      *(_BYTE *)(a1 + 40) = *(_BYTE *)(a1 + 64);
      *v23 = v33;
      *(_BYTE *)(a1 + 64) = v32;
      v34 = *(_QWORD *)(a1 + 24);
      if (v34 >= *(_QWORD *)a1)
      {
        result = 1;
        if (v34 != *(_QWORD *)a1 || *(_DWORD *)(a1 + 32) >= *(_DWORD *)(a1 + 8))
          return result;
      }
      v35 = *(_QWORD *)(a1 + 16);
      v36 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *v22;
      *(_BYTE *)(a1 + 16) = *(_BYTE *)(a1 + 40);
      *v22 = v36;
      *(_BYTE *)(a1 + 40) = v35;
      return 1;
    case 5uLL:
      sub_20F23CDA8(a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24);
      return 1;
    default:
      v11 = a1 + 48;
      sub_20F23CFE4((__int128 *)a1, (uint64_t *)(a1 + 24), (__int128 *)(a1 + 48));
      v12 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v16 = *(_QWORD *)v12;
    v17 = *(_DWORD *)(v12 + 8);
    if (*(_QWORD *)v12 < *(_QWORD *)v11
      || (*(_QWORD *)v12 == *(_QWORD *)v11 ? (v18 = v17 >= *(_DWORD *)(v11 + 8)) : (v18 = 1), !v18))
    {
      v37 = *(_QWORD *)(v12 + 12);
      *(_OWORD *)v12 = *(_OWORD *)v11;
      *(_BYTE *)(v12 + 16) = *(_BYTE *)(v11 + 16);
      v15 = a1;
      if (v11 != a1)
      {
        v19 = v13;
        while (1)
        {
          v20 = *(_QWORD *)(a1 + v19 + 24);
          if (v16 >= v20 && (v16 != v20 || v17 >= *(_DWORD *)(a1 + v19 + 32)))
            break;
          *(_OWORD *)(a1 + v19 + 48) = *(_OWORD *)(a1 + v19 + 24);
          *(_BYTE *)(a1 + v19 + 64) = *(_BYTE *)(a1 + v19 + 40);
          v19 -= 24;
          if (v19 == -48)
          {
            v15 = a1;
            goto LABEL_9;
          }
        }
        v15 = a1 + v19 + 48;
      }
LABEL_9:
      *(_QWORD *)v15 = v16;
      *(_DWORD *)(v15 + 8) = v17;
      *(_DWORD *)(v15 + 12) = v37;
      *(_BYTE *)(v15 + 16) = BYTE4(v37);
      if (++v14 == 8)
        return v12 + 24 == a2;
    }
    v11 = v12;
    v13 += 24;
    v12 += 24;
    if (v12 == a2)
      return 1;
  }
}

char *sub_20F23D490(uint64_t a1, char *__dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  int64_t v18;
  _BYTE *v19;
  char *v20;
  char *v21;
  _BYTE *v22;
  __int128 v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int128 v28;
  char *v29;
  char *v30;
  char *v31;
  __int128 v32;
  char *v33;
  unint64_t v34;
  char *v35;

  v5 = __dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v10 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - v10) >> 3)) < a5)
  {
    v11 = *(char **)a1;
    v12 = a5 - 0x5555555555555555 * ((uint64_t)(v10 - *(_QWORD *)a1) >> 3);
    if (v12 > 0xAAAAAAAAAAAAAAALL)
      sub_20E867F44();
    v13 = 0xAAAAAAAAAAAAAAABLL * ((v9 - (uint64_t)v11) >> 3);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x555555555555555)
      v14 = 0xAAAAAAAAAAAAAAALL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 > 0xAAAAAAAAAAAAAAALL)
        sub_20E877A38();
      v15 = (char *)operator new(24 * v14);
    }
    else
    {
      v15 = 0;
    }
    v24 = &v15[8 * ((v5 - v11) >> 3)];
    v25 = 24 * a5;
    v26 = &v24[24 * a5];
    v27 = v24;
    do
    {
      v28 = *(_OWORD *)v7;
      *((_QWORD *)v27 + 2) = *((_QWORD *)v7 + 2);
      *(_OWORD *)v27 = v28;
      v27 += 24;
      v7 += 24;
      v25 -= 24;
    }
    while (v25);
    v29 = *(char **)a1;
    v30 = &v15[8 * ((v5 - v11) >> 3)];
    if (*(char **)a1 != v5)
    {
      v31 = v5;
      v30 = &v15[8 * ((v5 - v11) >> 3)];
      do
      {
        v32 = *(_OWORD *)(v31 - 24);
        *((_DWORD *)v30 - 2) = *((_DWORD *)v31 - 2);
        *(_OWORD *)(v30 - 24) = v32;
        v30 -= 24;
        v31 -= 24;
      }
      while (v31 != v29);
      v10 = *(_QWORD *)(a1 + 8);
    }
    v33 = &v15[24 * v14];
    v34 = v10 - (_QWORD)v5;
    if (v34)
      memmove(v26, v5, v34 - 4);
    v35 = *(char **)a1;
    *(_QWORD *)a1 = v30;
    *(_QWORD *)(a1 + 8) = &v26[v34];
    *(_QWORD *)(a1 + 16) = v33;
    if (v35)
      operator delete(v35);
    return v24;
  }
  v16 = v10 - (_QWORD)__dst;
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (_QWORD)__dst) >> 3)) >= a5)
  {
    v17 = &__src[24 * a5];
    v19 = *(_BYTE **)(a1 + 8);
LABEL_18:
    v20 = &v5[24 * a5];
    v21 = &v19[-24 * a5];
    v22 = v19;
    if ((unint64_t)v21 < v10)
    {
      v22 = v19;
      do
      {
        v23 = *(_OWORD *)v21;
        *((_QWORD *)v22 + 2) = *((_QWORD *)v21 + 2);
        *(_OWORD *)v22 = v23;
        v22 += 24;
        v21 += 24;
      }
      while ((unint64_t)v21 < v10);
    }
    *(_QWORD *)(a1 + 8) = v22;
    if (v19 != v20)
      memmove(v20, v5, v19 - v20 - 4);
    if (v17 != v7)
      memmove(v5, v7, v17 - v7 - 4);
    return v5;
  }
  v17 = &__src[8 * ((uint64_t)(v10 - (_QWORD)__dst) >> 3)];
  v18 = a4 - v17;
  if (a4 != v17)
    memmove(*(void **)(a1 + 8), &__src[8 * ((uint64_t)(v10 - (_QWORD)__dst) >> 3)], v18 - 4);
  v19 = (_BYTE *)(v10 + v18);
  *(_QWORD *)(a1 + 8) = v10 + v18;
  if (v16 >= 1)
    goto LABEL_18;
  return v5;
}

void sub_20F23D70C(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  void *v29;
  void *v30;
  char *v31;
  char *v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  BOOL v43;
  int64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  unint64_t v56;
  int64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  __int128 *v79;
  _OWORD *v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  int64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  __int128 *v95;
  _OWORD *v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  int64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  __int128 *v113;
  _OWORD *v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;

  v2 = a1[4];
  v3 = v2 >= 0xAA;
  v4 = v2 - 170;
  if (v3)
  {
    a1[4] = v4;
    v6 = (_QWORD *)a1[1];
    v5 = (char *)a1[2];
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    a1[1] = v6 + 1;
    if (v5 != (char *)a1[3])
    {
LABEL_92:
      *(_QWORD *)v5 = v8;
      goto LABEL_93;
    }
    v9 = (char *)*a1;
    if ((unint64_t)v7 > *a1)
    {
      v10 = (uint64_t)&v7[-*a1] >> 3;
      if (v10 >= -1)
        v11 = v10 + 1;
      else
        v11 = v10 + 2;
      v12 = v11 >> 1;
      v13 = -v12;
      v14 = &v7[-8 * v12];
      v15 = v5 - v7;
      if (v5 != v7)
      {
        memmove(&v7[-8 * v12], v7, v5 - v7);
        v7 = (char *)a1[1];
      }
      v5 = &v14[v15];
      v16 = &v7[8 * v13];
      goto LABEL_11;
    }
    v38 = (v5 - v9) >> 2;
    if (v5 == v9)
      v38 = 1;
    if (v38 >> 61)
      goto LABEL_109;
    v39 = v38 >> 2;
    v40 = 8 * v38;
    v41 = (char *)operator new(8 * v38);
    v42 = &v41[8 * v39];
    v44 = v5 - v7;
    v43 = v5 == v7;
    v5 = v42;
    if (!v43)
    {
      v5 = &v42[v44 & 0xFFFFFFFFFFFFFFF8];
      v45 = v44 - 8;
      if ((unint64_t)(v44 - 8) >= 0x38)
      {
        v92 = &v41[8 * v39];
        v46 = v92;
        if ((unint64_t)(v92 - v7) >= 0x20)
        {
          v93 = (v45 >> 3) + 1;
          v94 = 8 * (v93 & 0x3FFFFFFFFFFFFFFCLL);
          v46 = &v42[v94];
          v7 += v94;
          v95 = (__int128 *)(v6 + 3);
          v96 = v92 + 16;
          v97 = v93 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v98 = *v95;
            *(v96 - 1) = *(v95 - 1);
            *v96 = v98;
            v95 += 2;
            v96 += 2;
            v97 -= 4;
          }
          while (v97);
          if (v93 == (v93 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_89;
        }
      }
      else
      {
        v46 = &v41[8 * v39];
      }
      do
      {
        v99 = *(_QWORD *)v7;
        v7 += 8;
        *(_QWORD *)v46 = v99;
        v46 += 8;
      }
      while (v46 != v5);
    }
LABEL_89:
    *a1 = v41;
    a1[1] = v42;
    a1[2] = v5;
    a1[3] = &v41[v40];
    if (!v9)
      goto LABEL_92;
    v100 = v9;
LABEL_91:
    operator delete(v100);
    v5 = (char *)a1[2];
    goto LABEL_92;
  }
  v18 = (char *)a1[2];
  v17 = (char *)a1[3];
  v20 = (char *)*a1;
  v19 = (char *)a1[1];
  v21 = v18 - v19;
  v22 = (v18 - v19) >> 3;
  v23 = (uint64_t)&v17[-*a1];
  if (v22 < (unint64_t)(v23 >> 3))
  {
    v24 = operator new(0xFF0uLL);
    v25 = v24;
    if (v17 != v18)
    {
      *(_QWORD *)v18 = v24;
LABEL_93:
      a1[2] += 8;
      return;
    }
    if (v19 == v20)
    {
      v69 = (v17 - v19) >> 2;
      if (v18 == v19)
        v69 = 1;
      if (v69 >> 61)
        goto LABEL_109;
      v70 = (v69 + 3) >> 2;
      v71 = 8 * v69;
      v72 = (char *)operator new(8 * v69);
      v47 = &v72[8 * v70];
      v73 = v47;
      if (v18 != v19)
      {
        v73 = &v47[8 * v22];
        v74 = &v72[8 * v70];
        v75 = v19;
        if ((unint64_t)(v21 - 8) < 0x38)
          goto LABEL_113;
        v76 = &v72[8 * v70];
        v74 = v76;
        v75 = v19;
        if ((unint64_t)(v76 - v19) < 0x20)
          goto LABEL_113;
        v77 = ((unint64_t)(v21 - 8) >> 3) + 1;
        v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
        v74 = &v47[v78];
        v75 = &v19[v78];
        v79 = (__int128 *)(v19 + 16);
        v80 = v76 + 16;
        v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v82 = *v79;
          *(v80 - 1) = *(v79 - 1);
          *v80 = v82;
          v79 += 2;
          v80 += 2;
          v81 -= 4;
        }
        while (v81);
        if (v77 != (v77 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_113:
          do
          {
            v83 = *(_QWORD *)v75;
            v75 += 8;
            *(_QWORD *)v74 = v83;
            v74 += 8;
          }
          while (v74 != v73);
        }
      }
      *a1 = v72;
      a1[1] = v47;
      a1[2] = v73;
      a1[3] = &v72[v71];
      if (v19)
      {
        operator delete(v19);
        v47 = (char *)a1[1];
      }
    }
    else
    {
      v47 = v19;
    }
    *((_QWORD *)v47 - 1) = v25;
    v84 = (char *)a1[1];
    v5 = (char *)a1[2];
    a1[1] = v84 - 8;
    v8 = *((_QWORD *)v84 - 1);
    a1[1] = v84;
    if (v5 != (char *)a1[3])
      goto LABEL_92;
    v85 = (char *)*a1;
    if ((unint64_t)v84 > *a1)
    {
      v86 = (uint64_t)&v84[-*a1] >> 3;
      if (v86 >= -1)
        v87 = v86 + 1;
      else
        v87 = v86 + 2;
      v88 = v87 >> 1;
      v89 = -v88;
      v90 = &v84[-8 * v88];
      v91 = v5 - v84;
      if (v5 != v84)
      {
        memmove(&v84[-8 * v88], v84, v5 - v84);
        v84 = (char *)a1[1];
      }
      v5 = &v90[v91];
      v16 = &v84[8 * v89];
LABEL_11:
      a1[1] = v16;
      a1[2] = v5;
      goto LABEL_92;
    }
    v101 = (v5 - v85) >> 2;
    if (v5 == v85)
      v101 = 1;
    if (!(v101 >> 61))
    {
      v102 = v101 >> 2;
      v103 = 8 * v101;
      v104 = (char *)operator new(8 * v101);
      v105 = &v104[8 * v102];
      v106 = v5 - v84;
      v43 = v5 == v84;
      v5 = v105;
      if (!v43)
      {
        v5 = &v105[v106 & 0xFFFFFFFFFFFFFFF8];
        v107 = v106 - 8;
        if ((unint64_t)(v106 - 8) >= 0x38)
        {
          v109 = &v104[8 * v102];
          v108 = v109;
          if ((unint64_t)(v109 - v84) >= 0x20)
          {
            v110 = (v107 >> 3) + 1;
            v111 = 8 * (v110 & 0x3FFFFFFFFFFFFFFCLL);
            v108 = &v105[v111];
            v112 = &v84[v111];
            v113 = (__int128 *)(v84 + 16);
            v114 = v109 + 16;
            v115 = v110 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v116 = *v113;
              *(v114 - 1) = *(v113 - 1);
              *v114 = v116;
              v113 += 2;
              v114 += 2;
              v115 -= 4;
            }
            while (v115);
            v84 = v112;
            if (v110 == (v110 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_106;
          }
        }
        else
        {
          v108 = &v104[8 * v102];
        }
        do
        {
          v117 = *(_QWORD *)v84;
          v84 += 8;
          *(_QWORD *)v108 = v117;
          v108 += 8;
        }
        while (v108 != v5);
      }
LABEL_106:
      *a1 = v104;
      a1[1] = v105;
      a1[2] = v5;
      a1[3] = &v104[v103];
      if (!v85)
        goto LABEL_92;
      v100 = v85;
      goto LABEL_91;
    }
LABEL_109:
    sub_20E877A38();
  }
  v26 = v23 >> 2;
  if (v17 == v20)
    v27 = 1;
  else
    v27 = v26;
  if (v27 >> 61)
    goto LABEL_109;
  v28 = (char *)operator new(8 * v27);
  v29 = operator new(0xFF0uLL);
  v30 = v29;
  v31 = &v28[8 * v22];
  v32 = &v28[8 * v27];
  if (v22 == v27)
  {
    if (v21 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v21 >> 2;
      if (v48 >> 61)
        sub_20E877A38();
      v31 = (char *)operator new(8 * v48);
      v32 = &v31[8 * v48];
      operator delete(v28);
      v49 = (char *)a1[1];
      v18 = (char *)a1[2];
      v28 = v31;
      *(_QWORD *)v31 = v30;
      v34 = v31 + 8;
      if (v18 == v49)
        goto LABEL_25;
      do
      {
LABEL_44:
        if (v31 == v28)
        {
          if (v34 >= v32)
          {
            if (v32 == v31)
              v54 = 1;
            else
              v54 = (v32 - v31) >> 2;
            if (v54 >> 61)
              sub_20E877A38();
            v55 = (char *)operator new(8 * v54);
            v28 = v55;
            v56 = (v54 + 3) >> 2;
            v50 = &v55[8 * v56];
            v36 = v50;
            v57 = v34 - v31;
            if (v34 != v31)
            {
              v36 = &v50[v57 & 0xFFFFFFFFFFFFFFF8];
              v58 = v57 - 8;
              v59 = &v55[8 * v56];
              v60 = v31;
              if (v58 < 0x38)
                goto LABEL_114;
              v61 = 8 * v56;
              v59 = &v55[8 * v56];
              v60 = v31;
              if ((unint64_t)(v59 - v31) < 0x20)
                goto LABEL_114;
              v62 = (v58 >> 3) + 1;
              v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
              v59 = &v50[v63];
              v60 = &v31[v63];
              v64 = (__int128 *)(v31 + 16);
              v65 = &v55[v61 + 16];
              v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v67 = *v64;
                *((_OWORD *)v65 - 1) = *(v64 - 1);
                *(_OWORD *)v65 = v67;
                v64 += 2;
                v65 += 32;
                v66 -= 4;
              }
              while (v66);
              if (v62 != (v62 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_114:
                do
                {
                  v68 = *(_QWORD *)v60;
                  v60 += 8;
                  *(_QWORD *)v59 = v68;
                  v59 += 8;
                }
                while (v59 != v36);
              }
            }
            v32 = &v55[8 * v54];
            operator delete(v31);
          }
          else
          {
            v52 = (v32 - v34) >> 3;
            if (v52 >= -1)
              v53 = v52 + 1;
            else
              v53 = v52 + 2;
            v36 = &v34[8 * (v53 >> 1)];
            v50 = &v31[8 * (v53 >> 1)];
            if (v34 == v31)
            {
              v28 = v34;
            }
            else
            {
              memmove(&v31[8 * (v53 >> 1)], v31, v34 - v31);
              v28 = v31;
            }
          }
        }
        else
        {
          v50 = v31;
          v36 = v34;
        }
        v51 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v50 - 1) = v51;
        v35 = v50 - 8;
        v34 = v36;
        v31 = v35;
      }
      while (v18 != (char *)a1[1]);
      goto LABEL_26;
    }
    v33 = v22 + 2;
    if (v22 >= -1)
      v33 = v22 + 1;
    v31 -= 8 * (v33 >> 1);
  }
  *(_QWORD *)v31 = v29;
  v34 = v31 + 8;
  if (v18 != v19)
    goto LABEL_44;
LABEL_25:
  v35 = v31;
  v36 = v34;
LABEL_26:
  v37 = (char *)*a1;
  *a1 = v28;
  a1[1] = v35;
  a1[2] = v36;
  a1[3] = v32;
  if (v37)
    operator delete(v37);
}

void sub_20F23DD74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20F23DD90(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20F23DDA4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20F23DDBC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20F23DDD4(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 200);
  v3 = *(_QWORD **)(a1 + 224);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  sub_20F23DE94((char ***)(a1 + 8));
  return a1;
}

void sub_20F23DE2C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 200);
  v3 = *(_QWORD **)(a1 + 224);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
    {
LABEL_6:
      sub_20F23DE94((char ***)(a1 + 8));
      JUMPOUT(0x212BC6398);
    }
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
  goto LABEL_6;
}

char ***sub_20F23DE94(char ***a1)
{
  char **v2;
  char **v3;
  char **v4;
  char **v5;
  uint64_t v6;
  char **v7;
  char **v8;
  char **v9;
  char **v10;
  char **v11;
  char *v12;
  char *v13;
  char **v14;
  char **v15;
  char **v16;
  char *v17;
  char **v18;
  char **v19;
  char **v20;
  char **v21;
  char **v22;
  char **v23;
  char **v24;
  uint64_t v25;
  char **v26;
  char **v27;
  char **v28;
  char **v29;
  char **v30;
  char **v31;
  char **v32;
  char **v33;
  char **v34;
  char **v35;
  char **v36;

  v2 = a1[21];
  if (v2)
  {
    v3 = a1[22];
    v4 = a1[21];
    if (v3 == v2)
    {
LABEL_11:
      a1[22] = v2;
      operator delete(v4);
      goto LABEL_12;
    }
    while (1)
    {
      v7 = v3 - 5;
      v5 = (char **)*(v3 - 2);
      if (v3 - 5 == v5)
      {
        v5 = v3 - 5;
        v6 = 4;
      }
      else
      {
        if (!v5)
          goto LABEL_6;
        v6 = 5;
      }
      (*(void (**)(void))&(*v5)[8 * v6])();
LABEL_6:
      v3 = v7;
      if (v7 == v2)
      {
        v4 = a1[21];
        goto LABEL_11;
      }
    }
  }
LABEL_12:
  v8 = a1[18];
  if (v8)
  {
    v9 = a1[19];
    v10 = a1[18];
    if (v9 != v8)
    {
      v11 = a1[19];
      do
      {
        v13 = *(v11 - 4);
        v11 -= 4;
        v12 = v13;
        if (v13)
        {
          *(v9 - 3) = v12;
          operator delete(v12);
        }
        v9 = v11;
      }
      while (v11 != v8);
      v10 = a1[18];
    }
    a1[19] = v8;
    operator delete(v10);
  }
  v14 = a1[15];
  if (v14)
  {
    v15 = a1[16];
    v16 = a1[15];
    if (v15 != v14)
    {
      do
      {
        v17 = *(v15 - 20);
        if (v17)
        {
          *(v15 - 19) = v17;
          operator delete(v17);
        }
        v15 -= 113;
      }
      while (v15 != v14);
      v16 = a1[15];
    }
    a1[16] = v14;
    operator delete(v16);
  }
  v18 = a1[12];
  if (v18)
  {
    v19 = a1[13];
    v20 = a1[12];
    if (v19 != v18)
    {
      do
      {
        if (*((char *)v19 - 9) < 0)
          operator delete(*(v19 - 4));
        v19 -= 4;
      }
      while (v19 != v18);
      v20 = a1[12];
    }
    a1[13] = v18;
    operator delete(v20);
  }
  v21 = a1[9];
  if (v21)
  {
    v22 = a1[10];
    v23 = a1[9];
    if (v22 == v21)
    {
LABEL_46:
      a1[10] = v21;
      operator delete(v23);
      goto LABEL_47;
    }
    while (1)
    {
      v26 = v22 - 5;
      v24 = (char **)*(v22 - 2);
      if (v22 - 5 == v24)
      {
        v24 = v22 - 5;
        v25 = 4;
      }
      else
      {
        if (!v24)
          goto LABEL_41;
        v25 = 5;
      }
      (*(void (**)(void))&(*v24)[8 * v25])();
LABEL_41:
      v22 = v26;
      if (v26 == v21)
      {
        v23 = a1[9];
        goto LABEL_46;
      }
    }
  }
LABEL_47:
  v27 = a1[6];
  if (v27)
  {
    a1[7] = v27;
    operator delete(v27);
  }
  v28 = a1[3];
  if (v28)
  {
    v29 = a1[4];
    v30 = a1[3];
    if (v29 != v28)
    {
      v31 = v29 - 44;
      do
      {
        while (1)
        {
          if (*((_BYTE *)v31 + 336) && *((char *)v31 + 335) < 0)
            operator delete(v31[39]);
          if (*((char *)v31 + 23) < 0)
            break;
          v32 = v31 - 3;
          v31 -= 47;
          if (v32 == v28)
            goto LABEL_58;
        }
        operator delete(*v31);
        v33 = v31 - 3;
        v31 -= 47;
      }
      while (v33 != v28);
LABEL_58:
      v30 = a1[3];
    }
    a1[4] = v28;
    operator delete(v30);
  }
  v34 = *a1;
  if (*a1)
  {
    v35 = a1[1];
    v36 = *a1;
    if (v35 != v34)
    {
      do
        v35 = sub_20E9549C4(v35 - 125);
      while (v35 != v34);
      v36 = *a1;
    }
    a1[1] = v34;
    operator delete(v36);
  }
  return a1;
}

_QWORD *sub_20F23E120(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24C9FCFE8;
  v2 = (void *)a1[29];
  if (v2)
  {
    a1[30] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20F23E15C(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24C9FCFE8;
  v2 = (void *)a1[29];
  if (v2)
  {
    a1[30] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x212BC6398);
}

void sub_20F23E1A8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t ***a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X6>, uint64_t *a7@<X7>, uint64_t a8@<X8>)
{
  unsigned int v9;
  unsigned __int8 v10;
  uint64_t v11;
  float v12;
  unsigned __int8 v13;
  int v14;
  _QWORD *v15;
  void *v16;
  unint64_t v17;
  size_t prime;
  _QWORD *v19;
  void *v20;
  int8x8_t v21;
  BOOL v22;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30;
  _BYTE v31[8];
  _BYTE v32[8];
  __int128 v33;
  __int128 v34;
  float v35;

  v33 = 0u;
  v34 = 0u;
  v35 = 1.0;
  v9 = *(_DWORD *)(a1 + 48);
  v10 = *(_BYTE *)(a1 + 224);
  v11 = *(_QWORD *)(a1 + 64);
  v12 = *(double *)(a1 + 72);
  v13 = *(_BYTE *)(a1 + 89);
  if (*(_BYTE *)(a1 + 92))
    v14 = 3;
  else
    v14 = 2;
  v32[0] = 0;
  v32[4] = 0;
  v31[0] = 0;
  v31[4] = 0;
  sub_20F23F9F8(a3, a4, &v33, a5 + 72, a5 + 77, a5 + 82, a5 + 9, v9, (char **)a8, v12, v10, v11, v13, v14, a6, a7, (uint64_t)v32, (uint64_t)v31, *(_BYTE *)(a1 + 95),
    0,
    0,
    0,
    0,
    (unint64_t *)(a2 + 96),
    0,
    0,
    0,
    0);
  v15 = (_QWORD *)v34;
  if ((_QWORD)v34)
  {
    do
    {
      v19 = (_QWORD *)*v15;
      v20 = (void *)v15[5];
      if (v20)
      {
        v15[6] = v20;
        operator delete(v20);
      }
      operator delete(v15);
      v15 = v19;
    }
    while (v19);
  }
  v16 = (void *)v33;
  *(_QWORD *)&v33 = 0;
  if (v16)
    operator delete(v16);
  v33 = 0u;
  v34 = 0u;
  v35 = 1.0;
  v17 = -858993459 * ((*(_QWORD *)(a8 + 8) - *(_QWORD *)a8) >> 3);
  prime = (unint64_t)(float)v17;
  if (prime == 1)
  {
    prime = 2;
LABEL_26:
    sub_20E8D2B3C((uint64_t)&v33, prime);
    goto LABEL_27;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime((unint64_t)(float)v17);
    v21 = *(int8x8_t *)((char *)&v33 + 8);
    v22 = prime >= *((_QWORD *)&v33 + 1);
    if (prime > *((_QWORD *)&v33 + 1))
      goto LABEL_26;
  }
  else
  {
    v21 = 0;
    v22 = 1;
    if (prime)
      goto LABEL_26;
  }
  if (!v22)
  {
    v23 = vcvtps_u32_f32((float)*((unint64_t *)&v34 + 1) / v35);
    if (*(_QWORD *)&v21 < 3uLL || (v24 = (uint8x8_t)vcnt_s8(v21), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
    {
      v23 = std::__next_prime(v23);
    }
    else
    {
      v25 = 1 << -(char)__clz(v23 - 1);
      if (v23 >= 2)
        v23 = v25;
    }
    if (prime <= v23)
      prime = v23;
    if (prime < *(_QWORD *)&v21)
      goto LABEL_26;
  }
LABEL_27:
  if (v17)
  {
    v26 = 0;
    v27 = 16;
    do
    {
      sub_20F24A8FC((uint64_t *)&v33, *(_DWORD *)(*(_QWORD *)a8 + v27), v26++);
      v27 += 40;
    }
    while (v17 != v26);
  }
  v28 = (_QWORD *)v34;
  if ((_QWORD)v34)
  {
    do
    {
      v29 = (_QWORD *)*v28;
      operator delete(v28);
      v28 = v29;
    }
    while (v29);
  }
  v30 = (void *)v33;
  *(_QWORD *)&v33 = 0;
  if (v30)
    operator delete(v30);
}

void sub_20F23E410(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v2;

  sub_20E8C25A8(v2 - 80);
  sub_20EDC0730(v1);
  _Unwind_Resume(a1);
}

void sub_20F23E444(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t ***a3@<X2>, _QWORD *a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X6>, uint64_t *a7@<X7>, _QWORD *a8@<X8>)
{
  unint64_t v13;
  double v14;
  int v15;
  uint64_t **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  BOOL v28;
  char v29;
  unsigned int v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  __int128 *v34;
  uint64_t *v35;
  uint64_t *v36;
  _QWORD *v37;
  uint64_t *v38;
  unint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  uint8x8_t v45;
  unint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  _BYTE *v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  int8x8_t v60;
  unint64_t v61;
  uint8x8_t v62;
  unint64_t v63;
  uint64_t **v64;
  uint64_t *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unsigned int v80;
  BOOL v81;
  char *v82;
  char *v83;
  void (***v84)(char *);
  void (**v85)(char *);
  uint64_t v86;
  void *v87;
  void *v88;
  void *v89;
  uint64_t v90;
  void *v91;
  int v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  size_t v97;
  const char *v98;
  unsigned __int8 v99;
  unsigned __int8 v100;
  const char *v101;
  size_t v102;
  _BYTE *v103;
  unint64_t v104;
  const char *v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __int128 *v111;
  uint64_t v112;
  uint64_t v113;
  NSObject *v114;
  size_t v115;
  std::__shared_weak_count_vtbl *v116;
  std::__shared_weak_count *v117;
  std::__shared_weak_count *v118;
  unint64_t *p_shared_owners;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  void *v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  void *v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  void *v150;
  uint64_t v151;
  void (***v152)(uint64_t);
  void (**v153)(uint64_t);
  _QWORD *v154;
  void *v155;
  uint64_t v156;
  unint64_t v157;
  size_t prime;
  uint64_t v159;
  unsigned int *v160;
  unsigned int v161;
  _QWORD *v162;
  _QWORD *v163;
  void *v164;
  _QWORD *v165;
  void *v166;
  int8x8_t v167;
  BOOL v168;
  unint64_t v169;
  uint8x8_t v170;
  uint64_t v171;
  _QWORD *v172;
  int v173;
  uint64_t v174;
  uint64_t ***v175;
  unint64_t v176;
  _QWORD *v177;
  uint64_t **v180;
  unint64_t v181;
  int v182;
  int v183;
  int v184;
  int v185;
  uint64_t *v186;
  _BYTE v187[8];
  _BYTE v188[8];
  void *v189[2];
  void *v190[2];
  int v191;
  void *__p;
  char *v193;
  _QWORD *v194;
  uint64_t v195;
  _BYTE object[40];
  __int128 v197;
  __int128 v198;
  __int128 v199;
  void *v200;
  unint64_t v201;
  uint64_t v202;
  void *v203;
  _BYTE *v204;
  uint64_t v205;
  void *v206;
  _BYTE *v207;
  uint64_t v208;
  void *v209;
  unint64_t v210;
  unint64_t v211;
  _BYTE v212[24];
  __int128 v213;
  int v214;
  const char *v215;
  uint64_t v216;
  std::__shared_weak_count *v217;
  __int128 v218;
  uint64_t v219;
  __int128 v220;
  __int128 v221;
  int v222;
  __int128 v223;
  uint64_t v224;
  __int128 v225;
  uint64_t v226;
  uint64_t v227;

  v227 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)v189 = 0u;
  *(_OWORD *)v190 = 0u;
  v191 = 1065353216;
  v13 = *(unsigned int *)(a1 + 48);
  v184 = *(unsigned __int8 *)(a1 + 224);
  v181 = *(unsigned int *)(a1 + 64);
  v14 = *(double *)(a1 + 72);
  v173 = *(unsigned __int8 *)(a1 + 89);
  v185 = *(unsigned __int8 *)(a1 + 92);
  if (*(_BYTE *)(a1 + 92))
    v15 = 3;
  else
    v15 = 2;
  v183 = v15;
  v188[0] = 0;
  v188[4] = 0;
  v187[0] = 0;
  v187[4] = 0;
  v182 = *(unsigned __int8 *)(a1 + 95);
  v220 = 0uLL;
  v221 = 0uLL;
  v222 = 733222904;
  kdebug_trace();
  v218 = 0uLL;
  v219 = 0;
  v16 = *a3;
  v180 = a3[1];
  if (*a3 == v180)
  {
    sub_20F240EA4(&v206);
    if (**((int **)v206 + 7) > 3)
      goto LABEL_230;
    v92 = *((unsigned __int8 *)v206 + 72);
    v93 = sub_20E8C31DC((uint64_t)v206, "OSLogSurrogateAppender", 1, 0);
    v94 = v93;
    if (!v92 && !v93)
      goto LABEL_230;
    v172 = a8;
    *(_QWORD *)v212 = &v206;
    *(std::chrono::steady_clock::time_point *)&v212[8] = std::chrono::steady_clock::now();
    *(std::chrono::system_clock::time_point *)&v212[16] = std::chrono::system_clock::now();
    LODWORD(v213) = 3;
    *((_QWORD *)&v213 + 1) = "unknown file";
    v214 = 62;
    v217 = 0;
    v215 = "unknown function";
    v216 = 0;
    v95 = **(_QWORD **)v212;
    v96 = **(_QWORD **)v212 + 16;
    if (*(char *)(**(_QWORD **)v212 + 39) < 0)
    {
      v98 = *(const char **)(v95 + 16);
      v97 = *(_QWORD *)(v95 + 24);
      v100 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v100 & 1) != 0)
        goto LABEL_146;
    }
    else
    {
      v97 = *(unsigned __int8 *)(**(_QWORD **)v212 + 39);
      v98 = (const char *)(**(_QWORD **)v212 + 16);
      v99 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v99 & 1) != 0)
        goto LABEL_146;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
      if (object[24] && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_146:
    if (byte_254A4A4F8[23] >= 0)
      v101 = byte_254A4A4F8;
    else
      v101 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v102 = byte_254A4A4F8[23];
    else
      v102 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)object = os_log_create(v101, v98);
    v103 = &object[8];
    if (v102 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v102 >= 0x17)
    {
      v104 = v94;
      v105 = v98;
      v106 = v95;
      v107 = v92;
      v108 = v96;
      v109 = (v102 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v102 | 7) != 0x17)
        v109 = v102 | 7;
      v110 = v109 + 1;
      v103 = operator new(v109 + 1);
      *(_QWORD *)&object[16] = v102;
      *(_QWORD *)&object[24] = v110 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v103;
      v96 = v108;
      v92 = v107;
      v95 = v106;
      v98 = v105;
      v94 = v104;
    }
    else
    {
      object[31] = v102;
      if (!v102)
      {
LABEL_160:
        v103[v102] = 0;
        object[32] = 1;
        v111 = &v197;
        if (v97 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v97 >= 0x17)
        {
          v112 = (v97 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v97 | 7) != 0x17)
            v112 = v97 | 7;
          v113 = v112 + 1;
          v111 = (__int128 *)operator new(v112 + 1);
          *((_QWORD *)&v197 + 1) = v97;
          *(_QWORD *)&v198 = v113 | 0x8000000000000000;
          *(_QWORD *)&v197 = v111;
        }
        else
        {
          BYTE7(v198) = v97;
          if (!v97)
            goto LABEL_168;
        }
        memmove(v111, v98, v97);
LABEL_168:
        *((_BYTE *)v111 + v97) = 0;
        BYTE8(v198) = 1;
        v114 = *(NSObject **)object;
        if (SBYTE7(v198) < 0)
          operator delete((void *)v197);
        if (object[32] && (object[31] & 0x80000000) != 0)
          operator delete(*(void **)&object[8]);
        if (*(_QWORD *)object)
          os_release(*(void **)object);
        if (v94 && *(_QWORD *)(v94 + 24))
        {
          v115 = _os_log_pack_size();
          v116 = (std::__shared_weak_count_vtbl *)operator new(v115, (std::align_val_t)8uLL);
          v117 = (std::__shared_weak_count *)operator new();
          v118 = v117;
          v117->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v117->__shared_owners_;
          v117->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v117->__shared_weak_owners_ = 0;
          v117[1].__vftable = v116;
          *(_QWORD *)object = v116;
          *(_QWORD *)&object[8] = v116;
          *(_QWORD *)&object[16] = v117;
          do
            v120 = __ldxr(p_shared_owners);
          while (__stxr(v120 + 1, p_shared_owners));
          *(_QWORD *)&object[24] = 0;
          *(_QWORD *)&object[32] = 0;
          *(_QWORD *)&v197 = 0;
          do
            v121 = __ldaxr(p_shared_owners);
          while (__stlxr(v121 - 1, p_shared_owners));
          if (!v121)
          {
            ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
            std::__shared_weak_count::__release_weak(v118);
          }
          v122 = *(_QWORD *)object;
          *(_WORD *)_os_log_pack_fill() = 0;
          v123 = operator new();
          v124 = *(unsigned __int8 *)(v95 + 39);
          if ((v124 & 0x80u) == 0)
            v125 = v96;
          else
            v125 = *(_QWORD *)(v95 + 16);
          if ((v124 & 0x80u) != 0)
            v124 = *(_QWORD *)(v95 + 24);
          *(_QWORD *)v123 = v122;
          *(_OWORD *)(v123 + 8) = *(_OWORD *)&object[8];
          *(_QWORD *)&object[8] = 0;
          *(_QWORD *)&object[16] = 0;
          *(_OWORD *)(v123 + 24) = *(_OWORD *)&object[24];
          *(_QWORD *)&object[24] = 0;
          *(_QWORD *)&object[32] = 0;
          *(_QWORD *)(v123 + 40) = v125;
          *(_QWORD *)(v123 + 48) = v124;
          *(_BYTE *)(v123 + 56) = 1;
          v209 = 0;
          *(_QWORD *)&v223 = v123;
          (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v94 + 24) + 40))(*(_QWORD *)(v94 + 24), &v223);
          v126 = v223;
          *(_QWORD *)&v223 = 0;
          a8 = v172;
          if (v126)
          {
            v127 = *(std::__shared_weak_count **)(v126 + 32);
            if (v127)
            {
              v128 = (unint64_t *)&v127->__shared_owners_;
              do
                v129 = __ldaxr(v128);
              while (__stlxr(v129 - 1, v128));
              if (!v129)
              {
                ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
                std::__shared_weak_count::__release_weak(v127);
              }
            }
            v130 = *(std::__shared_weak_count **)(v126 + 16);
            if (v130)
            {
              v131 = (unint64_t *)&v130->__shared_owners_;
              do
                v132 = __ldaxr(v131);
              while (__stlxr(v132 - 1, v131));
              if (!v132)
              {
                ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
                std::__shared_weak_count::__release_weak(v130);
              }
            }
            MEMORY[0x212BC6398](v126, 0x10F0C40B62ED6C6);
            v133 = v209;
            v209 = 0;
            if (v133)
            {
              v134 = (std::__shared_weak_count *)*((_QWORD *)v133 + 4);
              if (v134)
              {
                v135 = (unint64_t *)&v134->__shared_owners_;
                do
                  v136 = __ldaxr(v135);
                while (__stlxr(v136 - 1, v135));
                if (!v136)
                {
                  ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
                  std::__shared_weak_count::__release_weak(v134);
                }
              }
              v137 = (std::__shared_weak_count *)*((_QWORD *)v133 + 2);
              if (v137)
              {
                v138 = (unint64_t *)&v137->__shared_owners_;
                do
                  v139 = __ldaxr(v138);
                while (__stlxr(v139 - 1, v138));
                if (!v139)
                {
                  ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
                  std::__shared_weak_count::__release_weak(v137);
                }
              }
              MEMORY[0x212BC6398](v133, 0x10F0C40B62ED6C6);
            }
          }
          v140 = *(std::__shared_weak_count **)&object[32];
          if (*(_QWORD *)&object[32])
          {
            v141 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
            do
              v142 = __ldaxr(v141);
            while (__stlxr(v142 - 1, v141));
            if (!v142)
            {
              ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
              std::__shared_weak_count::__release_weak(v140);
            }
          }
          v143 = *(std::__shared_weak_count **)&object[16];
          if (*(_QWORD *)&object[16])
          {
            v144 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
            do
              v145 = __ldaxr(v144);
            while (__stlxr(v145 - 1, v144));
            if (!v145)
            {
              ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
              std::__shared_weak_count::__release_weak(v143);
            }
          }
        }
        else
        {
          os_log_type_enabled(v114, OS_LOG_TYPE_INFO);
          *(_WORD *)object = 0;
          v146 = (void *)_os_log_send_and_compose_impl();
          a8 = v172;
          if (v146)
            free(v146);
        }
        if (v92)
        {
          sub_20E8C003C((uint64_t)v212, "No sampled image_ids for matching");
          sub_20E863570((uint64_t)v212);
        }
        sub_20E863570((uint64_t)v212);
        v147 = v217;
        if (v217)
        {
          v148 = (unint64_t *)&v217->__shared_owners_;
          do
            v149 = __ldaxr(v148);
          while (__stlxr(v149 - 1, v148));
          if (!v149)
          {
            ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
            std::__shared_weak_count::__release_weak(v147);
          }
        }
LABEL_230:
        *a8 = 0;
        a8[1] = 0;
        a8[2] = 0;
        v91 = (void *)v218;
        if (!(_QWORD)v218)
          goto LABEL_237;
        goto LABEL_231;
      }
    }
    memmove(v103, v101, v102);
    goto LABEL_160;
  }
  v174 = a6;
  v18 = a5[9];
  v17 = a5[10];
  v211 = 0;
  v209 = 0;
  v210 = 0;
  v19 = v17 - v18;
  if (v19)
  {
    if (v19 < 0)
      sub_20E867F44();
    v20 = v13;
    v21 = a4;
    v22 = 0xCCCCCCCCCCCCCCCDLL * (v19 >> 3);
    v23 = (v22 - 1) >> 6;
    v24 = (char *)operator new(8 * (v23 + 1));
    v25 = v24;
    v211 = v23 + 1;
    v209 = v24;
    v210 = v22;
    if (v22 >= 0x41)
      v26 = (v22 - 1) >> 6;
    else
      v26 = 0;
    *(_QWORD *)&v24[8 * v26] = 0;
    v27 = 8 * (v22 >> 6);
    if (v22 >= 0x40)
      bzero(v24, 8 * (v22 >> 6));
    v29 = v22 & 0x3F;
    v28 = (v22 & 0x3F) == 0;
    a4 = v21;
    v13 = v20;
    if (!v28)
      *(_QWORD *)&v25[v27] &= ~(0xFFFFFFFFFFFFFFFFLL >> -v29);
  }
  v30 = 0;
  v186 = a5 + 9;
  v31 = v14;
  v175 = a3;
  v207 = 0;
  v206 = 0;
  v208 = 0;
  v203 = 0;
  v204 = 0;
  v205 = 0;
  v200 = 0;
  v201 = 0;
  v202 = 0;
  v32 = v174;
  v176 = v13;
  v177 = a4;
  while (2)
  {
    if (!*v16
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/include/VIO/AreaMapping/MapTrackingUtil.hpp", 75, (uint64_t)"ref_keyframe", 12, (uint64_t)"ref frame cannot be nullptr", 27, (void (*)(void **))sub_21023DDB0))
    {
LABEL_271:
      abort();
    }
    v207 = v206;
    v204 = v203;
    v201 = 0;
    if (v185)
    {
      if (!*((_BYTE *)a7 + 24)
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/include/VIO/AreaMapping/MapTrackingUtil.hpp", 83, (uint64_t)"keyframes_gravity_vectors", 25, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| !*(_BYTE *)(v32 + 24)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/include/VIO/AreaMapping/MapTrackingUtil.hpp", 84, (uint64_t)"query_gravity_vec", 17, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_271;
      }
      v33 = *a7;
      if (0xAAAAAAAAAAAAAAABLL * ((a7[1] - *a7) >> 3) != a3[1] - *a3)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/include/VIO/AreaMapping/MapTrackingUtil.hpp", 85, (uint64_t)"keyframes_gravity_vectors->size() == ref_vio_frames.size()", 58, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_271;
        }
        v33 = *a7;
      }
      v34 = (__int128 *)(v33 + 24 * v30++);
      v225 = *v34;
      v226 = *((_QWORD *)v34 + 2);
    }
    v35 = *v16;
    v36 = sub_20E9DF85C(v189, *v16);
    *(_WORD *)object = 0;
    if (v36)
      v37 = v36 + 5;
    else
      v37 = v35 + 82;
    memset(&object[8], 0, 32);
    v197 = 0u;
    v198 = 0u;
    v199 = 0u;
    v38 = *v16;
    *(_OWORD *)v212 = v225;
    *(_QWORD *)&v212[16] = v226;
    LOBYTE(v213) = 1;
    v39 = sub_20F240F98(v38, v37, a5 + 72, a5 + 77, a5 + 82, v186, v13, v184 != 0, v183, (char **)&v206, (char **)&v203, (uint64_t)&v200, v32, (uint64_t)v212, (uint64_t)v188, (uint64_t)v187, v182 != 0, 0, 0,
            0,
            0,
            0,
            0,
            0,
            0);
    v40 = v39;
    if (v39 < v181)
      goto LABEL_125;
    v41 = (v204 - (_BYTE *)v203) >> 2;
    if ((float)((float)v39 / (float)(unint64_t)v41) < v31)
      goto LABEL_125;
    v195 = 0;
    v42 = *v16;
    if (v210 != 0xCCCCCCCCCCCCCCCDLL * ((a5[10] - a5[9]) >> 3))
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/VIODatabaseTrackingUtil.hpp", 37, (uint64_t)"feature_taken_LUT.size() == query_feature_vec.size()", 52, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_270;
      }
      v41 = (v204 - (_BYTE *)v203) >> 2;
    }
    if (v41 != v201)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/VIODatabaseTrackingUtil.hpp", 38, (uint64_t)"query_corr_indices.size() == inlier_correspondence_masks.size()", 63, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_270;
      }
      v41 = v201;
    }
    if (v41 != (v207 - (_BYTE *)v206) >> 2
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/VIODatabaseTrackingUtil.hpp", 39, (uint64_t)"ref_corr_indices.size() == inlier_correspondence_masks.size()", 61, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_270;
    }
    v43 = v42[2];
    v223 = *(_OWORD *)v42;
    v224 = v43;
    v44 = a4[1];
    if (!v44)
      goto LABEL_269;
    v45 = (uint8x8_t)vcnt_s8((int8x8_t)v44);
    v45.i16[0] = vaddlv_u8(v45);
    if (v45.u32[0] > 1uLL)
    {
      v46 = v223;
      if ((unint64_t)v223 >= v44)
        v46 = (unint64_t)v223 % v44;
    }
    else
    {
      v46 = v223 & (v44 - 1);
    }
    v47 = *(_QWORD **)(*a4 + 8 * v46);
    if (!v47 || (v48 = (_QWORD *)*v47) == 0)
    {
LABEL_269:
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/VIODatabaseTrackingUtil.hpp", 53, (uint64_t)"submap_track_set_iter != track_set.end()", 40, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
LABEL_270:
      abort();
    }
    if (v45.u32[0] < 2uLL)
    {
      v49 = v44 - 1;
      while (1)
      {
        v51 = v48[1];
        if ((_QWORD)v223 == v51)
        {
          if (v48[2] == (_QWORD)v223)
            goto LABEL_60;
        }
        else if ((v51 & v49) != v46)
        {
          goto LABEL_269;
        }
        v48 = (_QWORD *)*v48;
        if (!v48)
          goto LABEL_269;
      }
    }
    while (1)
    {
      v50 = v48[1];
      if ((_QWORD)v223 == v50)
        break;
      if (v50 >= v44)
        v50 %= v44;
      if (v50 != v46)
        goto LABEL_269;
LABEL_50:
      v48 = (_QWORD *)*v48;
      if (!v48)
        goto LABEL_269;
    }
    if (v48[2] != (_QWORD)v223)
      goto LABEL_50;
LABEL_60:
    v52 = sub_20E9DF85C((_QWORD *)(v48[3] + 24), (uint64_t *)&v223);
    __p = 0;
    v193 = 0;
    v194 = 0;
    v53 = v201;
    if (v52 && v201)
    {
      if (v201 >= 0x666666666666667)
        sub_20E867F44();
      v54 = operator new(40 * v201);
      v55 = 0;
      __p = v54;
      v193 = (char *)v54;
      v194 = &v54[5 * v53];
      do
      {
        if (((*(_QWORD *)((char *)v200 + ((v55 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v55) & 1) != 0)
        {
          v57 = *((unsigned int *)v203 + v55);
          v58 = v57 >> 6;
          v59 = 1 << v57;
          if (((1 << v57) & *((_QWORD *)v209 + (v57 >> 6))) == 0)
          {
            v60 = (int8x8_t)v52[6];
            if (v60)
            {
              v61 = *(unsigned int *)(v42[9] + 40 * *((unsigned int *)v206 + v55) + 4);
              v62 = (uint8x8_t)vcnt_s8(v60);
              v62.i16[0] = vaddlv_u8(v62);
              if (v62.u32[0] > 1uLL)
              {
                v63 = *(unsigned int *)(v42[9] + 40 * *((unsigned int *)v206 + v55) + 4);
                if (*(_QWORD *)&v60 <= v61)
                  v63 = v61 % *(_QWORD *)&v60;
              }
              else
              {
                v63 = (v60.i32[0] - 1) & v61;
              }
              v64 = *(uint64_t ***)(v52[5] + 8 * v63);
              if (v64)
              {
                v65 = *v64;
                if (v65)
                {
                  if (v62.u32[0] < 2uLL)
                  {
                    v66 = *(_QWORD *)&v60 - 1;
                    while (1)
                    {
                      v68 = v65[1];
                      if (v68 == v61)
                      {
                        if (*((_DWORD *)v65 + 4) == (_DWORD)v61)
                          goto LABEL_91;
                      }
                      else if ((v68 & v66) != v63)
                      {
                        goto LABEL_67;
                      }
                      v65 = (uint64_t *)*v65;
                      if (!v65)
                        goto LABEL_67;
                    }
                  }
                  do
                  {
                    v67 = v65[1];
                    if (v67 == v61)
                    {
                      if (*((_DWORD *)v65 + 4) == (_DWORD)v61)
                      {
LABEL_91:
                        v69 = v65[3];
                        if (*(_BYTE *)(v69 + 192) && (!v173 || *(_BYTE *)(v69 + 188)))
                        {
                          *((_QWORD *)&v213 + 1) = v69 + 40;
                          v70 = *v186 + 40 * v57;
                          *(_QWORD *)&v212[16] = -1;
                          *(_QWORD *)&v213 = v70;
                          v71 = *(_QWORD *)(v69 + 24);
                          v72 = *(_QWORD *)(v69 + 32);
                          *(_QWORD *)v212 = &off_24C9E9850;
                          *(_QWORD *)&v212[8] = v71;
                          *(_DWORD *)&v212[16] = v72;
                          *((_QWORD *)v209 + v58) ^= v59;
                          if (v54 < v194)
                          {
                            *v54 = &off_24CA18630;
                            *(_OWORD *)(v54 + 1) = *(_OWORD *)&v212[8];
                            *v54 = &off_24C9E9850;
                            *(_OWORD *)(v54 + 3) = v213;
                            v54 += 5;
                          }
                          else
                          {
                            v54 = sub_20EDCA1E0(&__p, (uint64_t)v212);
                          }
                          v193 = (char *)v54;
                        }
                        break;
                      }
                    }
                    else
                    {
                      if (v67 >= *(_QWORD *)&v60)
                        v67 %= *(_QWORD *)&v60;
                      if (v67 != v63)
                        break;
                    }
                    v65 = (uint64_t *)*v65;
                  }
                  while (v65);
                }
              }
            }
          }
        }
LABEL_67:
        ++v55;
      }
      while (v55 != v53);
      v56 = __p;
      LODWORD(v53) = v201;
      v32 = v174;
    }
    else
    {
      v56 = 0;
      v54 = 0;
    }
    v73 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v54 - v56) >> 3);
    v74 = *(_OWORD *)*v16;
    *(_QWORD *)&v212[16] = (*v16)[2];
    *(_OWORD *)v212 = v74;
    *(_QWORD *)&v213 = __PAIR64__(v53, v40);
    DWORD2(v213) = -858993459 * (((char *)v54 - v56) >> 3);
    HIDWORD(v213) = DWORD2(v213);
    v75 = *(_QWORD *)(a2 + 96);
    v76 = *(_QWORD *)(a2 + 104);
    v13 = v176;
    if (v76 != v75)
    {
      v77 = 0xCCCCCCCCCCCCCCCDLL * ((v76 - v75) >> 3);
      a4 = v177;
      while (1)
      {
        v78 = v77 >> 1;
        v79 = v75 + 40 * (v77 >> 1);
        v80 = *(_DWORD *)(v79 + 16);
        v81 = v80 >= *(_DWORD *)&v212[16];
        if (v80 != *(_DWORD *)&v212[16])
          goto LABEL_105;
        if (*(_QWORD *)v79 >= *(_QWORD *)v212)
          break;
LABEL_99:
        v75 = v79 + 40;
        v78 = v77 + ~v78;
LABEL_100:
        v77 = v78;
        if (!v78)
          goto LABEL_109;
      }
      if (*(_QWORD *)v79 != *(_QWORD *)v212)
        goto LABEL_100;
      v81 = *(_DWORD *)(v79 + 8) >= *(_DWORD *)&v212[8];
LABEL_105:
      if (v81)
        goto LABEL_100;
      goto LABEL_99;
    }
    a4 = v177;
LABEL_109:
    if (v75 == v76
      || *(_DWORD *)(v75 + 16) != *(_DWORD *)&v212[16]
      || *(_QWORD *)v75 != *(_QWORD *)v212
      || *(_DWORD *)(v75 + 8) != *(_DWORD *)&v212[8])
    {
      sub_20F24A1E4((unint64_t *)(a2 + 96), v75, (uint64_t)v212);
      v56 = __p;
      v54 = v193;
      v73 = 0xCCCCCCCCCCCCCCCDLL * ((v193 - (_BYTE *)__p) >> 3);
    }
    sub_20F24A530((char **)&v218, *((uint64_t *)&v218 + 1), (uint64_t)v56, (uint64_t)v54, v73);
    v82 = (char *)__p;
    if (!__p)
    {
LABEL_123:
      v88 = (void *)*((_QWORD *)&v198 + 1);
      a3 = v175;
      if (!*((_QWORD *)&v198 + 1))
        goto LABEL_125;
      goto LABEL_124;
    }
    if (v193 != __p)
    {
      v83 = v193 - 40;
      v84 = (void (***)(char *))(v193 - 40);
      do
      {
        v85 = *v84;
        v84 -= 5;
        (*v85)(v83);
        v28 = v83 == v82;
        v83 = (char *)v84;
      }
      while (!v28);
      v86 = v195;
      v193 = v82;
      operator delete(__p);
      v32 = v174;
      if (v86)
      {
        v87 = *(void **)v86;
        if (*(_QWORD *)v86)
        {
          *(_QWORD *)(v86 + 8) = v87;
          operator delete(v87);
        }
        MEMORY[0x212BC6398](v86, 0x10C402FEFCB83);
      }
      goto LABEL_123;
    }
    v193 = (char *)__p;
    operator delete(__p);
    v88 = (void *)*((_QWORD *)&v198 + 1);
    a3 = v175;
    if (*((_QWORD *)&v198 + 1))
LABEL_124:
      operator delete(v88);
LABEL_125:
    if ((_QWORD)v197)
      operator delete((void *)v197);
    if (++v16 != v180)
      continue;
    break;
  }
  v89 = v200;
  v90 = v219;
  *(_OWORD *)a8 = v218;
  a8[2] = v90;
  v219 = 0;
  v218 = 0uLL;
  if (v89)
    operator delete(v89);
  if (v203)
  {
    v204 = v203;
    operator delete(v203);
  }
  if (v206)
  {
    v207 = v206;
    operator delete(v206);
  }
  if (v209)
    operator delete(v209);
  v91 = (void *)v218;
  if ((_QWORD)v218)
  {
LABEL_231:
    v150 = v91;
    if (*((void **)&v218 + 1) != v91)
    {
      v151 = *((_QWORD *)&v218 + 1) - 40;
      v152 = (void (***)(uint64_t))(*((_QWORD *)&v218 + 1) - 40);
      do
      {
        v153 = *v152;
        v152 -= 5;
        (*v153)(v151);
        v28 = v151 == (_QWORD)v91;
        v151 = (uint64_t)v152;
      }
      while (!v28);
      v150 = (void *)v218;
    }
    *((_QWORD *)&v218 + 1) = v91;
    operator delete(v150);
  }
LABEL_237:
  kdebug_trace();
  v154 = v190[0];
  if (v190[0])
  {
    do
    {
      v165 = (_QWORD *)*v154;
      v166 = (void *)v154[5];
      if (v166)
      {
        v154[6] = v166;
        operator delete(v166);
      }
      operator delete(v154);
      v154 = v165;
    }
    while (v165);
  }
  v155 = v189[0];
  v189[0] = 0;
  if (v155)
    operator delete(v155);
  memset(object, 0, 32);
  *(_DWORD *)&object[32] = 1065353216;
  v156 = *a8;
  v157 = -858993459 * ((a8[1] - *a8) >> 3);
  prime = (unint64_t)(float)v157;
  if (prime == 1)
  {
    prime = 2;
    goto LABEL_242;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime((unint64_t)(float)v157);
    v167 = *(int8x8_t *)&object[8];
    v168 = prime >= *(_QWORD *)&object[8];
    if (prime > *(_QWORD *)&object[8])
      goto LABEL_242;
  }
  else
  {
    v167 = 0;
    v168 = 1;
    if (prime)
      goto LABEL_242;
  }
  if (!v168)
  {
    v169 = vcvtps_u32_f32((float)*(unint64_t *)&object[24] / *(float *)&object[32]);
    if (*(_QWORD *)&v167 < 3uLL || (v170 = (uint8x8_t)vcnt_s8(v167), v170.i16[0] = vaddlv_u8(v170), v170.u32[0] > 1uLL))
    {
      v169 = std::__next_prime(v169);
    }
    else
    {
      v171 = 1 << -(char)__clz(v169 - 1);
      if (v169 >= 2)
        v169 = v171;
    }
    if (prime <= v169)
      prime = v169;
    if (prime < *(_QWORD *)&v167)
LABEL_242:
      sub_20E8D2B3C((uint64_t)object, prime);
  }
  if (v157)
  {
    v159 = 0;
    v160 = (unsigned int *)(v156 + 16);
    do
    {
      v161 = *v160;
      v160 += 10;
      sub_20F24A8FC((uint64_t *)object, v161, v159++);
    }
    while (v157 != v159);
  }
  v162 = *(_QWORD **)&object[16];
  if (*(_QWORD *)&object[16])
  {
    do
    {
      v163 = (_QWORD *)*v162;
      operator delete(v162);
      v162 = v163;
    }
    while (v163);
  }
  v164 = *(void **)object;
  *(_QWORD *)object = 0;
  if (v164)
    operator delete(v164);
}

void sub_20F23F81C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,void *a58,int a59,__int16 a60,char a61,char a62,char a63)
{
  uint64_t v63;

  if (a63)
  {
    if (a62 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0x240]);
  sub_20EDC0730((void **)(v63 - 256));
  sub_20E8E69C4(v63 - 224);
  sub_20F240E3C((uint64_t)&a47);
  _Unwind_Resume(a1);
}

uint64_t sub_20F23F9F8@<X0>(uint64_t ***a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, _QWORD *a6@<X5>, uint64_t *a7@<X6>, unsigned int a8@<W7>, char **a9@<X8>, float a10@<S0>, unsigned __int8 a11, unsigned int a12, unsigned __int8 a13, int a14, uint64_t a15, uint64_t *a16, uint64_t a17, uint64_t a18, unsigned __int8 a19, unsigned int **a20,char a21,unsigned int **a22,char a23,unint64_t *a24,uint64_t a25,unsigned __int8 a26,_BYTE *a27,char a28)
{
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int **v39;
  int **v40;
  unint64_t v41;
  int v42;
  unint64_t v43;
  uint64_t *v44;
  int v45;
  uint64_t **v46;
  uint64_t v47;
  __int128 *v48;
  uint64_t *v49;
  uint64_t *v50;
  _QWORD *v51;
  uint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  __int128 v55;
  unint64_t v56;
  __int128 v57;
  __int128 v58;
  unint64_t v59;
  char *v60;
  void *v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t *v70;
  uint64_t **v71;
  uint64_t v72;
  unint64_t v73;
  _BYTE *v74;
  _QWORD *v75;
  int64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t *v80;
  uint64_t v81;
  unint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t **v86;
  uint64_t v87;
  unint64_t v88;
  _BYTE *v89;
  unint64_t *v90;
  int64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  _OWORD *v97;
  char *v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t *v104;
  _OWORD *v105;
  unint64_t *v106;
  uint64_t v107;
  __int128 v108;
  unint64_t v109;
  std::string::size_type v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unsigned int v116;
  BOOL v117;
  uint64_t *v118;
  uint64_t *v119;
  unsigned __int8 v120;
  unsigned int *v121;
  unsigned int *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  unint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  _BYTE *v134;
  _DWORD *v135;
  int64_t v136;
  unint64_t v137;
  char *v138;
  int v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _OWORD *v143;
  char *v144;
  uint64_t v145;
  __int128 v146;
  char *v147;
  void *v148;
  char *v149;
  void (***v150)(char *);
  void (**v151)(char *);
  BOOL v152;
  unsigned int **v153;
  unsigned int *v154;
  char *v155;
  uint64_t v156;
  char *v157;
  int v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t *v161;
  size_t v162;
  const char *v163;
  unsigned __int8 v164;
  unsigned __int8 v165;
  const char *v166;
  size_t v167;
  std::string::size_type *p_size;
  int v169;
  const char *v170;
  uint64_t *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  __int128 *v175;
  uint64_t v176;
  uint64_t v177;
  NSObject *v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  char *v182;
  char *v183;
  char *v184;
  void (**v185)(char *);
  char **v187;
  uint64_t *v188;
  void **v190;
  _QWORD *v191;
  uint64_t **v192;
  uint64_t **v193;
  unsigned int **v194;
  unsigned int v195;
  unint64_t v196;
  unint64_t v197;
  uint64_t **v198;
  void **v202;
  unint64_t v203;
  int v204;
  int v205;
  char v206;
  void *v207;
  char *v208;
  uint64_t v209;
  std::string object;
  __int128 v211;
  __int128 v212;
  unint64_t v213;
  void *__p[2];
  uint64_t v215;
  __int128 v216;
  uint64_t v217;
  int ***v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  void *v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  char *v228;
  uint64_t v229;
  char *v230;
  char *v231;
  uint64_t v232;
  int **v233;
  unint64_t v234;
  unint64_t v235;
  char *v236;
  char *v237;
  char *v238;
  __int128 v239;
  __int128 v240;
  int v241;
  __int128 v242;
  std::string::size_type v243;
  uint64_t v244;

  v244 = *MEMORY[0x24BDAC8D0];
  v239 = 0u;
  v240 = 0u;
  v241 = 733222904;
  kdebug_trace();
  v236 = 0;
  v237 = 0;
  v238 = 0;
  v192 = *a1;
  v198 = a1[1];
  v187 = a9;
  if (*a1 == v198)
  {
    sub_20F240EA4(&v233);
    if (*v233[7] > 3)
      goto LABEL_220;
    v158 = *((unsigned __int8 *)v233 + 72);
    v159 = sub_20E8C31DC((uint64_t)v233, "OSLogSurrogateAppender", 1, 0);
    v160 = v159 ? v159 + 16 : 0;
    if (!v158 && !v159)
      goto LABEL_220;
    v218 = &v233;
    *(std::chrono::steady_clock::time_point *)&v219 = std::chrono::steady_clock::now();
    *((std::chrono::system_clock::time_point *)&v219 + 1) = std::chrono::system_clock::now();
    *((_QWORD *)&v220 + 1) = "unknown file";
    LODWORD(v220) = 3;
    LODWORD(v221) = 62;
    v222 = 0uLL;
    *((_QWORD *)&v221 + 1) = "unknown function";
    v161 = (uint64_t *)(v233 + 2);
    if (*((char *)v233 + 39) < 0)
    {
      v163 = (const char *)v233[2];
      v162 = (size_t)v233[3];
      v165 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v165 & 1) != 0)
        goto LABEL_184;
    }
    else
    {
      v162 = *((unsigned __int8 *)v233 + 39);
      v163 = (const char *)(v233 + 2);
      v164 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v164 & 1) != 0)
        goto LABEL_184;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
      if ((_BYTE)v211 && SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
        operator delete(object.__r_.__value_.__l.__data_);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_184:
    if (byte_254A4A4F8[23] >= 0)
      v166 = byte_254A4A4F8;
    else
      v166 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v167 = byte_254A4A4F8[23];
    else
      v167 = *(_QWORD *)&byte_254A4A4F8[8];
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v166, v163);
    p_size = &object.__r_.__value_.__l.__size_;
    if (v167 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v167 >= 0x17)
    {
      v169 = v158;
      v170 = v163;
      v171 = v161;
      v172 = v160;
      v173 = (v167 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v167 | 7) != 0x17)
        v173 = v167 | 7;
      v174 = v173 + 1;
      p_size = (std::string::size_type *)operator new(v173 + 1);
      *(_QWORD *)&v211 = v174 | 0x8000000000000000;
      object.__r_.__value_.__l.__size_ = (std::string::size_type)p_size;
      object.__r_.__value_.__r.__words[2] = v167;
      v160 = v172;
      v161 = v171;
      v163 = v170;
      v158 = v169;
    }
    else
    {
      BYTE7(v211) = v167;
      if (!v167)
      {
LABEL_198:
        *((_BYTE *)p_size + v167) = 0;
        BYTE8(v211) = 1;
        v175 = &v212;
        if (v162 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v162 >= 0x17)
        {
          v176 = (v162 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v162 | 7) != 0x17)
            v176 = v162 | 7;
          v177 = v176 + 1;
          v175 = (__int128 *)operator new(v176 + 1);
          v213 = v177 | 0x8000000000000000;
          *(_QWORD *)&v212 = v175;
          *((_QWORD *)&v212 + 1) = v162;
        }
        else
        {
          HIBYTE(v213) = v162;
          if (!v162)
            goto LABEL_206;
        }
        memmove(v175, v163, v162);
LABEL_206:
        *((_BYTE *)v175 + v162) = 0;
        LOBYTE(__p[0]) = 1;
        v178 = object.__r_.__value_.__r.__words[0];
        if (SHIBYTE(v213) < 0)
          operator delete((void *)v212);
        if (BYTE8(v211) && SBYTE7(v211) < 0)
          operator delete((void *)object.__r_.__value_.__l.__size_);
        if (object.__r_.__value_.__r.__words[0])
          os_release(object.__r_.__value_.__l.__data_);
        sub_20F2426D8((int)&object, v160, v161, v178, OS_LOG_TYPE_INFO);
        if (v158)
        {
          sub_20E8C003C((uint64_t)&v218, "No sampled image_ids for matching");
          sub_20E863570((uint64_t)&v218);
        }
        sub_20E863570((uint64_t)&v218);
        v179 = (std::__shared_weak_count *)*((_QWORD *)&v222 + 1);
        if (*((_QWORD *)&v222 + 1))
        {
          v180 = (unint64_t *)(*((_QWORD *)&v222 + 1) + 8);
          do
            v181 = __ldaxr(v180);
          while (__stlxr(v181 - 1, v180));
          if (!v181)
          {
            ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
            std::__shared_weak_count::__release_weak(v179);
          }
        }
LABEL_220:
        *v187 = 0;
        v187[1] = 0;
        v187[2] = 0;
        v157 = v236;
        if (!v236)
          return kdebug_trace();
        goto LABEL_221;
      }
    }
    memmove(p_size, v166, v167);
    goto LABEL_198;
  }
  v35 = *a7;
  v34 = a7[1];
  v234 = 0;
  v235 = 0;
  v233 = 0;
  v36 = v34 - v35;
  if (v36)
  {
    if (v36 < 0)
      sub_20E867F44();
    v37 = 0xCCCCCCCCCCCCCCCDLL * (v36 >> 3);
    v38 = (v37 - 1) >> 6;
    v39 = (int **)operator new(8 * (v38 + 1));
    v40 = v39;
    v234 = v37;
    v235 = v38 + 1;
    v233 = v39;
    if (v37 >= 0x41)
      v41 = (v37 - 1) >> 6;
    else
      v41 = 0;
    v39[v41] = 0;
    if (v37 >= 0x40)
      bzero(v39, 8 * (v37 >> 6));
    if ((v37 & 0x3F) != 0)
      v40[v37 >> 6] = (int *)((unint64_t)v40[v37 >> 6] & ~(0xFFFFFFFFFFFFFFFFLL >> -(v37 & 0x3F)));
  }
  v195 = 0;
  v42 = a26;
  v197 = a8;
  v43 = (unint64_t)&v218 & 0xF8;
  if (!a26)
    v43 = 0;
  v196 = v43;
  v190 = (void **)(a25 + 24);
  v202 = (void **)(a25 + 56);
  v230 = 0;
  v231 = 0;
  v232 = 0;
  v228 = 0;
  v229 = 0;
  v224 = 0;
  v225 = 0;
  v226 = 0;
  v227 = 0;
  v44 = a16;
  v45 = a14;
  v191 = a6;
  v46 = v192;
  v188 = a7;
  do
  {
    if (!*v46
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/include/VIO/AreaMapping/MapTrackingUtil.hpp", 75, (uint64_t)"ref_keyframe", 12, (uint64_t)"ref frame cannot be nullptr", 27, (void (*)(void **))sub_21023DDB0))
    {
LABEL_229:
      abort();
    }
    v231 = v230;
    v228 = v227;
    v225 = 0;
    if (v45 == 3)
    {
      if (!*((_BYTE *)v44 + 24)
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/include/VIO/AreaMapping/MapTrackingUtil.hpp", 83, (uint64_t)"keyframes_gravity_vectors", 25, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| !*(_BYTE *)(a15 + 24)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/include/VIO/AreaMapping/MapTrackingUtil.hpp", 84, (uint64_t)"query_gravity_vec", 17, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_229;
      }
      v47 = *v44;
      if (0xAAAAAAAAAAAAAAABLL * ((v44[1] - *v44) >> 3) != a1[1] - *a1)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/include/VIO/AreaMapping/MapTrackingUtil.hpp", 85, (uint64_t)"keyframes_gravity_vectors->size() == ref_vio_frames.size()", 58, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_229;
        }
        v47 = *v44;
      }
      v48 = (__int128 *)(v47 + 24 * v195);
      v242 = *v48;
      v243 = *((_QWORD *)v48 + 2);
      ++v195;
    }
    v49 = *v46;
    v50 = sub_20E9DF85C(a3, *v46);
    LOWORD(v218) = 0;
    if (v50)
      v51 = v50 + 5;
    else
      v51 = v49 + 82;
    v219 = 0u;
    v220 = 0u;
    v221 = 0u;
    v222 = 0u;
    v223 = 0u;
    v52 = *v46;
    *(_OWORD *)&object.__r_.__value_.__l.__data_ = v242;
    v53 = v203;
    if (v42)
      v53 = (unint64_t)&v218 >> 8;
    object.__r_.__value_.__r.__words[2] = v243;
    v203 = v53;
    LOBYTE(v211) = 1;
    v54 = sub_20F240F98(v52, v51, a4, a5, a6, a7, v197, a11, v45, &v230, &v227, (uint64_t)&v224, a15, (uint64_t)&object, a17, a18, a19, a20, a21,
            a22,
            a23,
            v196 | (v53 << 8),
            a26 != 0,
            a27,
            a28);
    if (v42)
    {
      v55 = *(_OWORD *)*v46;
      object.__r_.__value_.__r.__words[2] = (*v46)[2];
      *(_OWORD *)&object.__r_.__value_.__l.__data_ = v55;
      sub_20EE6D370((uint64_t)&v211, (__int128 *)&v218);
      v56 = *(_QWORD *)(a25 + 8);
      if (v56 >= *(_QWORD *)(a25 + 16))
      {
        v60 = sub_20F249FF0((void **)a25, (uint64_t)&object);
        v61 = (void *)v216;
        *(_QWORD *)(a25 + 8) = v60;
        if (v61)
        {
          *((_QWORD *)&v216 + 1) = v61;
          operator delete(v61);
        }
      }
      else
      {
        v57 = *(_OWORD *)&object.__r_.__value_.__l.__data_;
        *(_QWORD *)(v56 + 16) = *((_QWORD *)&object.__r_.__value_.__l + 2);
        *(_OWORD *)v56 = v57;
        v58 = v211;
        v59 = v213;
        *(_OWORD *)(v56 + 40) = v212;
        *(_OWORD *)(v56 + 24) = v58;
        *(_QWORD *)(v56 + 56) = v59;
        *(_QWORD *)(v56 + 64) = 0;
        *(_QWORD *)(v56 + 72) = 0;
        *(_QWORD *)(v56 + 80) = 0;
        *(_OWORD *)(v56 + 64) = *(_OWORD *)__p;
        __p[0] = 0;
        __p[1] = 0;
        *(_QWORD *)(v56 + 80) = v215;
        *(_QWORD *)(v56 + 88) = 0;
        v215 = 0;
        *(_QWORD *)(v56 + 96) = 0;
        *(_QWORD *)(v56 + 104) = 0;
        *(_OWORD *)(v56 + 88) = v216;
        *(_QWORD *)(v56 + 104) = v217;
        v216 = 0uLL;
        v217 = 0;
        *(_QWORD *)(a25 + 8) = v56 + 112;
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    if (v54 < a12 || (float)((float)v54 / (float)(unint64_t)((v228 - v227) >> 2)) < a10)
    {
      if (!v42)
        goto LABEL_156;
      v63 = *(char **)(a25 + 32);
      v62 = *(_QWORD *)(a25 + 40);
      if ((unint64_t)v63 < v62)
      {
        *(_QWORD *)v63 = 0;
        v64 = (uint64_t)(v63 + 8);
LABEL_81:
        *(_QWORD *)(a25 + 32) = v64;
        v45 = a14;
        goto LABEL_156;
      }
      v66 = (char *)*v190;
      v67 = v63 - (_BYTE *)*v190;
      v68 = v67 >> 3;
      v69 = (v67 >> 3) + 1;
      if (v69 >> 61)
        sub_20E867F44();
      v70 = a7;
      v71 = v46;
      v72 = v62 - (_QWORD)v66;
      if (v72 >> 2 > v69)
        v69 = v72 >> 2;
      if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8)
        v73 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v73 = v69;
      if (v73)
      {
        if (v73 >> 61)
          sub_20E877A38();
        v74 = operator new(8 * v73);
        v75 = &v74[8 * v68];
        *v75 = 0;
        v64 = (uint64_t)(v75 + 1);
        v76 = v63 - v66;
        if (v63 != v66)
          goto LABEL_54;
      }
      else
      {
        v74 = 0;
        v75 = (_QWORD *)(8 * v68);
        *(_QWORD *)(8 * v68) = 0;
        v64 = 8 * v68 + 8;
        v76 = v63 - v66;
        if (v63 != v66)
        {
LABEL_54:
          v77 = v76 - 8;
          if (v77 >= 0x58)
          {
            v93 = v63 - v74 - v67;
            v44 = a16;
            if (v93 >= 0x20)
            {
              v94 = (v77 >> 3) + 1;
              v95 = 8 * (v94 & 0x3FFFFFFFFFFFFFFCLL);
              v96 = &v63[-v95];
              v75 = (_QWORD *)((char *)v75 - v95);
              v97 = &v74[8 * v68 - 16];
              v98 = v63 - 16;
              v99 = v94 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v100 = *(_OWORD *)v98;
                *(v97 - 1) = *((_OWORD *)v98 - 1);
                *v97 = v100;
                v97 -= 2;
                v98 -= 32;
                v99 -= 4;
              }
              while (v99);
              v63 = v96;
              if (v94 == (v94 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_78;
            }
          }
          else
          {
            v44 = a16;
          }
          do
          {
            v101 = *((_QWORD *)v63 - 1);
            v63 -= 8;
            *--v75 = v101;
          }
          while (v63 != v66);
LABEL_78:
          *(_QWORD *)(a25 + 24) = v75;
          *(_QWORD *)(a25 + 32) = v64;
          *(_QWORD *)(a25 + 40) = &v74[8 * v73];
          if (v66)
            operator delete(v66);
          v46 = v71;
          v42 = a26;
          a7 = v70;
          a6 = v191;
          goto LABEL_81;
        }
      }
      v44 = a16;
      goto LABEL_78;
    }
    if (v42)
    {
      v65 = operator new();
      *(_QWORD *)v65 = 0;
      *(_QWORD *)(v65 + 8) = 0;
      *(_QWORD *)(v65 + 16) = 0;
    }
    else
    {
      v65 = 0;
    }
    v209 = v65;
    v194 = (unsigned int **)v65;
    sub_20EDC0118((uint64_t *)&v233, a2, (__int128 *)*v46, a7, &v230, &v227, &v224, a13, (uint64_t)&v207, (char **)v65);
    if (v42)
    {
      v78 = 0xCCCCCCCCCCCCCCCDLL * ((v208 - (_BYTE *)v207) >> 3);
      v80 = *(unint64_t **)(a25 + 32);
      v79 = *(_QWORD *)(a25 + 40);
      if ((unint64_t)v80 < v79)
      {
        *v80 = v78;
        v81 = (uint64_t)(v80 + 1);
LABEL_92:
        *(_QWORD *)(a25 + 32) = v81;
        goto LABEL_93;
      }
      v82 = (unint64_t *)*v190;
      v83 = (char *)v80 - (_BYTE *)*v190;
      v84 = v83 >> 3;
      v85 = (v83 >> 3) + 1;
      if (v85 >> 61)
        sub_20E867F44();
      v86 = v46;
      v87 = v79 - (_QWORD)v82;
      if (v87 >> 2 > v85)
        v85 = v87 >> 2;
      if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8)
        v88 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v88 = v85;
      if (v88)
      {
        if (v88 >> 61)
          sub_20E877A38();
        v89 = operator new(8 * v88);
        v90 = (unint64_t *)&v89[8 * v84];
        *v90 = v78;
        v81 = (uint64_t)(v90 + 1);
        v91 = (char *)v80 - (char *)v82;
        if (v80 == v82)
          goto LABEL_89;
      }
      else
      {
        v89 = 0;
        v90 = (unint64_t *)(8 * v84);
        *(_QWORD *)(8 * v84) = v78;
        v81 = 8 * v84 + 8;
        v91 = (char *)v80 - (char *)v82;
        if (v80 == v82)
        {
LABEL_89:
          *(_QWORD *)(a25 + 24) = v90;
          *(_QWORD *)(a25 + 32) = v81;
          *(_QWORD *)(a25 + 40) = &v89[8 * v88];
          if (v82)
            operator delete(v82);
          v46 = v86;
          v42 = a26;
          goto LABEL_92;
        }
      }
      v92 = v91 - 8;
      if (v92 < 0x58)
        goto LABEL_245;
      if ((unint64_t)((char *)v80 - v89 - v83) < 0x20)
        goto LABEL_245;
      v102 = (v92 >> 3) + 1;
      v103 = 8 * (v102 & 0x3FFFFFFFFFFFFFFCLL);
      v104 = &v80[v103 / 0xFFFFFFFFFFFFFFF8];
      v90 = (unint64_t *)((char *)v90 - v103);
      v105 = &v89[8 * v84 - 16];
      v106 = v80 - 2;
      v107 = v102 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v108 = *(_OWORD *)v106;
        *(v105 - 1) = *((_OWORD *)v106 - 1);
        *v105 = v108;
        v105 -= 2;
        v106 -= 4;
        v107 -= 4;
      }
      while (v107);
      v80 = v104;
      if (v102 != (v102 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_245:
        do
        {
          v109 = *--v80;
          *--v90 = v109;
        }
        while (v80 != v82);
      }
      goto LABEL_89;
    }
LABEL_93:
    if (a24)
    {
      v110 = (*v46)[2];
      *(_OWORD *)&object.__r_.__value_.__l.__data_ = *(_OWORD *)*v46;
      object.__r_.__value_.__r.__words[2] = v110;
      *(_QWORD *)&v211 = __PAIR64__(v225, v54);
      DWORD2(v211) = -858993459 * ((unint64_t)(v208 - (_BYTE *)v207) >> 3);
      HIDWORD(v211) = DWORD2(v211);
      v111 = *a24;
      v112 = a24[1];
      if (v112 != *a24)
      {
        v113 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v112 - *a24) >> 3);
        while (1)
        {
          v114 = v113 >> 1;
          v115 = v111 + 40 * (v113 >> 1);
          v116 = *(_DWORD *)(v115 + 16);
          v117 = v116 >= LODWORD(object.__r_.__value_.__r.__words[2]);
          if (v116 != LODWORD(object.__r_.__value_.__r.__words[2]))
            goto LABEL_102;
          if (*(_QWORD *)v115 >= object.__r_.__value_.__r.__words[0])
            break;
LABEL_96:
          v111 = v115 + 40;
          v114 = v113 + ~v114;
LABEL_97:
          v113 = v114;
          if (!v114)
            goto LABEL_105;
        }
        if (*(_QWORD *)v115 != object.__r_.__value_.__r.__words[0])
          goto LABEL_97;
        v117 = *(_DWORD *)(v115 + 8) >= LODWORD(object.__r_.__value_.__r.__words[1]);
LABEL_102:
        if (v117)
          goto LABEL_97;
        goto LABEL_96;
      }
LABEL_105:
      if (v111 == v112
        || *(_DWORD *)(v111 + 16) != LODWORD(object.__r_.__value_.__r.__words[2])
        || *(_QWORD *)v111 != object.__r_.__value_.__r.__words[0]
        || *(_DWORD *)(v111 + 8) != LODWORD(object.__r_.__value_.__r.__words[1]))
      {
        sub_20F24A1E4(a24, v111, (uint64_t)&object);
      }
    }
    if (a28)
    {
      v118 = sub_210219C18();
      v119 = *v46;
      LODWORD(object.__r_.__value_.__l.__data_) = *((_DWORD *)*v46 + 2);
      v205 = v54;
      v204 = -858993459 * ((unint64_t)(v208 - (_BYTE *)v207) >> 3);
      sub_20F2422E0((uint64_t)&v206, (uint64_t)v118, 0xEEEEB0B5B2B2EEEELL, v119, (int *)&object, (_DWORD *)v119 + 4, &v205, &v204);
      v120 = atomic_load((unsigned __int8 *)&qword_254A6D9C8);
      if ((v120 & 1) == 0 && __cxa_guard_acquire(&qword_254A6D9C8))
      {
        sub_20FCFB524();
        __cxa_atexit((void (*)(void *))sub_20FCFB238, &qword_254A6D9A0, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6D9C8);
        v42 = a26;
      }
      sub_210237040("CLUSTER:FM: RID:[%llu:%u:%u], NI2D:%u, NI3D:%u", &object, **v46, *((unsigned int *)*v46 + 2), *((unsigned int *)*v46 + 4), v54, 0xCCCCCCCCCCCCCCCDLL * ((v208 - (_BYTE *)v207) >> 3));
      sub_20EA5C6C8((uint64_t)&object, qword_254A6D9A8);
      if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
        operator delete(object.__r_.__value_.__l.__data_);
    }
    v193 = v46;
    sub_20F24A530(&v236, (uint64_t)v237, (uint64_t)v207, (uint64_t)v208, 0xCCCCCCCCCCCCCCCDLL * ((v208 - (_BYTE *)v207) >> 3));
    if (v42)
    {
      v121 = *v194;
      v122 = v194[1];
      if (*v194 != v122)
      {
        v123 = *(char **)(a25 + 64);
        do
        {
          v125 = *v121;
          v126 = v227;
          v127 = *(_QWORD *)(a25 + 72);
          if ((unint64_t)v123 < v127)
          {
            *(_DWORD *)v123 = *(_DWORD *)&v227[4 * v125];
            v124 = (uint64_t)(v123 + 4);
          }
          else
          {
            v128 = (char *)*v202;
            v129 = v123 - (_BYTE *)*v202;
            v130 = v129 >> 2;
            v131 = (v129 >> 2) + 1;
            if (v131 >> 62)
              sub_20E867F44();
            v132 = v127 - (_QWORD)v128;
            if (v132 >> 1 > v131)
              v131 = v132 >> 1;
            if ((unint64_t)v132 >= 0x7FFFFFFFFFFFFFFCLL)
              v133 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v133 = v131;
            if (v133)
            {
              if (v133 >> 62)
                sub_20E877A38();
              v134 = operator new(4 * v133);
              v135 = &v134[4 * v130];
              *v135 = *(_DWORD *)&v126[4 * v125];
              v124 = (uint64_t)(v135 + 1);
              v136 = v123 - v128;
              if (v123 != v128)
              {
LABEL_129:
                v137 = v136 - 4;
                if (v137 < 0xBC
                  || (v140 = (v123 - 4 - v128) & 0xFFFFFFFFFFFFFFFCLL, &v134[v129 - 4 - v140] > &v134[v129 - 4])
                  || &v123[-v140 - 4] > v123 - 4
                  || (unint64_t)(v123 - v134 - v129) < 0x20)
                {
                  v138 = v123;
                }
                else
                {
                  v141 = (v137 >> 2) + 1;
                  v142 = 4 * (v141 & 0x7FFFFFFFFFFFFFF8);
                  v138 = &v123[-v142];
                  v135 = (_DWORD *)((char *)v135 - v142);
                  v143 = &v134[4 * v130 - 16];
                  v144 = v123 - 16;
                  v145 = v141 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v146 = *(_OWORD *)v144;
                    *(v143 - 1) = *((_OWORD *)v144 - 1);
                    *v143 = v146;
                    v143 -= 2;
                    v144 -= 32;
                    v145 -= 8;
                  }
                  while (v145);
                  if (v141 == (v141 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_132:
                    *(_QWORD *)(a25 + 56) = v135;
                    *(_QWORD *)(a25 + 64) = v124;
                    *(_QWORD *)(a25 + 72) = &v134[4 * v133];
                    if (!v128)
                      goto LABEL_118;
LABEL_136:
                    operator delete(v128);
                    goto LABEL_118;
                  }
                }
                do
                {
                  v139 = *((_DWORD *)v138 - 1);
                  v138 -= 4;
                  *--v135 = v139;
                }
                while (v138 != v128);
                goto LABEL_132;
              }
            }
            else
            {
              v134 = 0;
              v135 = (_DWORD *)(4 * v130);
              *(_DWORD *)(4 * v130) = *(_DWORD *)&v227[4 * v125];
              v124 = 4 * v130 + 4;
              v136 = v123 - v128;
              if (v123 != v128)
                goto LABEL_129;
            }
            *(_QWORD *)(a25 + 56) = v135;
            *(_QWORD *)(a25 + 64) = v124;
            *(_QWORD *)(a25 + 72) = &v134[4 * v133];
            if (v128)
              goto LABEL_136;
          }
LABEL_118:
          *(_QWORD *)(a25 + 64) = v124;
          ++v121;
          v123 = (char *)v124;
        }
        while (v121 != v122);
      }
    }
    v147 = (char *)v207;
    if (!v207)
    {
      a7 = v188;
      v44 = a16;
      a6 = v191;
      v46 = v193;
      v42 = a26;
      v45 = a14;
      v209 = 0;
      v153 = v194;
      if (!v194)
        goto LABEL_156;
LABEL_153:
      v154 = *v153;
      if (*v153)
      {
        v153[1] = v154;
        operator delete(v154);
        v153 = v194;
      }
      MEMORY[0x212BC6398](v153, 0x10C402FEFCB83);
      goto LABEL_156;
    }
    v148 = v207;
    a7 = v188;
    a6 = v191;
    v45 = a14;
    if (v208 != v207)
    {
      v149 = v208 - 40;
      v150 = (void (***)(char *))(v208 - 40);
      do
      {
        v151 = *v150;
        v150 -= 5;
        (*v151)(v149);
        v152 = v149 == v147;
        v149 = (char *)v150;
      }
      while (!v152);
      v148 = v207;
      v194 = (unsigned int **)v209;
    }
    v208 = v147;
    operator delete(v148);
    v46 = v193;
    v209 = 0;
    v42 = a26;
    v44 = a16;
    v153 = v194;
    if (v194)
      goto LABEL_153;
LABEL_156:
    if (*((_QWORD *)&v222 + 1))
    {
      *(_QWORD *)&v223 = *((_QWORD *)&v222 + 1);
      operator delete(*((void **)&v222 + 1));
    }
    if ((_QWORD)v221)
    {
      *((_QWORD *)&v221 + 1) = v221;
      operator delete((void *)v221);
    }
    ++v46;
  }
  while (v46 != v198);
  v155 = v236;
  v156 = (uint64_t)v237;
  if (v42)
    *(_QWORD *)(a25 + 48) = 0xCCCCCCCCCCCCCCCDLL * ((v237 - v236) >> 3);
  *v187 = v155;
  v187[1] = (char *)v156;
  v187[2] = v238;
  v237 = 0;
  v238 = 0;
  v236 = 0;
  if (v224)
    operator delete(v224);
  if (v227)
  {
    v228 = v227;
    operator delete(v227);
  }
  if (v230)
  {
    v231 = v230;
    operator delete(v230);
  }
  if (v233)
    operator delete(v233);
  v157 = v236;
  if (v236)
  {
LABEL_221:
    v182 = v157;
    if (v237 != v157)
    {
      v183 = v237 - 40;
      v184 = v237 - 40;
      do
      {
        v185 = *(void (***)(char *))v184;
        v184 -= 40;
        (*v185)(v183);
        v152 = v183 == v157;
        v183 = v184;
      }
      while (!v152);
      v182 = v236;
    }
    v237 = v157;
    operator delete(v182);
  }
  return kdebug_trace();
}

void sub_20F240C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  uint64_t v71;

  if (LOBYTE(STACK[0x208]))
  {
    if (SLOBYTE(STACK[0x207]) < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0x260]);
  sub_20EDC0730((void **)(v71 - 216));
  sub_20E8E69C4(v71 - 192);
  _Unwind_Resume(a1);
}

uint64_t sub_20F240E3C(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  void *v6;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = (void *)v2[5];
      if (v6)
      {
        v2[6] = v6;
        operator delete(v6);
      }
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void sub_20F240EA4(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A687C8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A687C8))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.area_mapping");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A687C0);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A687C8);
  }
  *a1 = qword_254A687C0;
}

void sub_20F240F40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A687C8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A687C8);
  _Unwind_Resume(a1);
}

unint64_t sub_20F240F98(_QWORD *a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, _QWORD *a5, uint64_t *a6, unint64_t a7, int a8, int a9, char **a10, char **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned __int8 a17, unsigned int **a18, char a19, unsigned int **a20,char a21,uint64_t a22,char a23,_BYTE *a24,char a25)
{
  _BOOL4 v30;
  _BOOL4 v32;
  char **v33;
  int v34;
  unint64_t v35;
  char **v36;
  double v37;
  _QWORD *v38;
  uint64_t *v39;
  unsigned __int8 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  unsigned __int8 v44;
  char *v45;
  char *v46;
  int64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  int64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _BYTE *v62;
  char *v63;
  char *v64;
  int64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  _OWORD *v70;
  char *v71;
  uint64_t v72;
  __int128 v73;
  int v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  _BYTE *v80;
  char *v81;
  int64_t v82;
  unint64_t v83;
  char *v84;
  int v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _OWORD *v89;
  char *v90;
  uint64_t v91;
  __int128 v92;
  unsigned __int8 v93;
  int v94;
  unint64_t v95;
  uint64_t v96;
  _QWORD *v98;
  size_t v99;
  void **v100;
  unint64_t v101;
  const void *v102;
  uint64_t v103;
  uint64_t v104;
  const char *v105;
  uint64_t v106;
  uint64_t *v107;
  size_t v108;
  const char *v109;
  unsigned __int8 v110;
  unsigned __int8 v111;
  const char *v112;
  size_t v113;
  void **v114;
  uint64_t v115;
  uint64_t v116;
  void **v117;
  uint64_t v118;
  uint64_t v119;
  NSObject *v120;
  const char *v121;
  std::__shared_weak_count *v122;
  unint64_t *p_shared_owners;
  unint64_t v124;
  std::string::size_type v125;
  uint64_t v126;
  int v128;
  uint64_t *v129;
  _BOOL4 v130;
  const char *v135;
  std::string v136;
  int v137;
  const char *v138;
  int v139;
  const char *v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  void *__dst[2];
  int64_t v144;
  std::string __p;
  uint64_t v146;
  const void *v147;
  uint64_t v148;
  const void *v149;
  unint64_t v150;
  void *v151;
  char v152;
  unint64_t v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  char *v161;
  char *v162;
  uint64_t *v163;
  void **v164;
  size_t v165;
  unint64_t v166;
  char v167;
  void *v168[2];
  unint64_t v169;
  char v170;

  v30 = *a4 != a4[1] && a1[77] != a1[78];
  v32 = *a5 != a5[1] && *a2 != a2[1];
  if (a23)
  {
    *(_QWORD *)(a22 + 8) = 0xCCCCCCCCCCCCCCCDLL * ((a6[1] - *a6) >> 3);
    *(_QWORD *)(a22 + 16) = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[10] - a1[9]) >> 3);
  }
  v33 = a11;
  if (a25)
    *a24 = 0;
  if (*(_BYTE *)(a15 + 4))
  {
    v34 = *(_DWORD *)a15 != 2 || v30;
    if (v34 != 1)
      return 0;
    if (*(_DWORD *)a15 == 2)
    {
      v130 = v32;
      v128 = a8;
      v129 = a6;
      v35 = 0;
      v36 = a10;
      if (!v30)
        goto LABEL_57;
      goto LABEL_37;
    }
  }
  kdebug_trace();
  v130 = v32;
  v128 = a8;
  v129 = a6;
  v37 = *(float *)a16;
  if (!*(_BYTE *)(a16 + 4))
    v37 = 0.850000024;
  if (a19)
  {
    v36 = a10;
    v35 = sub_20F242AC8((uint64_t)a1, a3, a7, a17, a18, a10, a11, v37);
    if (!a23)
      goto LABEL_27;
    goto LABEL_26;
  }
  v36 = a10;
  v35 = sub_20EDCA350((uint64_t)a1, a3, a7, a17, a10, a11, v37);
  if (a23)
LABEL_26:
    *(_BYTE *)(a22 + 1) = 1;
LABEL_27:
  if (a25)
    *a24 |= 2u;
  kdebug_trace();
  v38 = a1;
  kdebug_trace();
  v39 = sub_210219C18();
  LODWORD(__p.__r_.__value_.__l.__data_) = v35;
  LODWORD(v163) = (unint64_t)(a3[1] - *a3) >> 6;
  LODWORD(v136.__r_.__value_.__l.__data_) = (v38[73] - v38[72]) >> 6;
  sub_20F242CDC((uint64_t)&v160, (uint64_t)v39, 0xEEEEB0B5B2B2EEEELL, (int *)&__p, (int *)&v163, (int *)&v136);
  v40 = atomic_load((unsigned __int8 *)&qword_254A6D9C8);
  if ((v40 & 1) == 0 && __cxa_guard_acquire(&qword_254A6D9C8))
  {
    sub_20FCFB524();
    __cxa_atexit((void (*)(void *))sub_20FCFB238, &qword_254A6D9A0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6D9C8);
    v38 = a1;
    v36 = a10;
  }
  sub_210237040("MQF:FREAK: NC:%u, QD:%u, MD:%u", &__p, v35, (unint64_t)(a3[1] - *a3) >> 6, (v38[73] - v38[72]) >> 6);
  sub_20EA5C6C8((uint64_t)&__p, qword_254A6D9A8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v30)
      goto LABEL_57;
  }
  else if (!v30)
  {
    goto LABEL_57;
  }
LABEL_37:
  if (!*(_BYTE *)(a15 + 4) || *(_DWORD *)a15 != 1)
  {
    if (0xCCCCCCCCCCCCCCCDLL * ((v129[1] - *v129) >> 3) != (a4[1] - *a4) >> 6
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioframe.hpp", 729, (uint64_t)"query_ml_descriptor_vec.size() == query_feature_vec.size()", 58, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_220;
    }
    memset(&__p, 0, sizeof(__p));
    v163 = 0;
    v164 = 0;
    v165 = 0;
    kdebug_trace();
    if (a21)
      v41 = sub_20F243028(a1, a4, a7, a17, a20, &__p.__r_.__value_.__l.__data_, (char **)&v163, 0.850000024);
    else
      v41 = sub_20F243314((uint64_t)a1, a4, a7, a17, &__p.__r_.__value_.__l.__data_, (char **)&v163, 0.850000024);
    v42 = v41;
    kdebug_trace();
    kdebug_trace();
    v43 = sub_210219C18();
    LODWORD(v136.__r_.__value_.__l.__data_) = v42;
    LODWORD(v160) = (unint64_t)(a4[1] - *a4) >> 6;
    LODWORD(v157) = (a1[78] - a1[77]) >> 6;
    sub_20F2436C4((uint64_t)__dst, (uint64_t)v43, 0xEEEEB0B5B2B2EEEELL, (int *)&v136, (int *)&v160, (int *)&v157);
    v44 = atomic_load((unsigned __int8 *)&qword_254A6D9C8);
    if ((v44 & 1) == 0 && __cxa_guard_acquire(&qword_254A6D9C8))
    {
      sub_20FCFB524();
      __cxa_atexit((void (*)(void *))sub_20FCFB238, &qword_254A6D9A0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6D9C8);
      v33 = a11;
      v36 = a10;
    }
    sub_210237040("MQF:ML: NC:%u, QD:%u, MD:%u", &v136, v42, (unint64_t)(a4[1] - *a4) >> 6, (a1[78] - a1[77]) >> 6);
    sub_20EA5C6C8((uint64_t)&v136, qword_254A6D9A8);
    if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v136.__r_.__value_.__l.__data_);
    if (a23)
      *(_BYTE *)a22 = 1;
    if (a25)
      *a24 |= 1u;
    if (v42)
      v35 = sub_20FD3C90C((uint64_t *)&v163, (uint64_t *)&__p, v33, v36);
    if (v163)
    {
      v164 = (void **)v163;
      operator delete(v163);
    }
    if (__p.__r_.__value_.__r.__words[0])
    {
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
LABEL_57:
  if (v130)
  {
    v46 = *v36;
    v45 = v36[1];
    v47 = v45 - *v36;
    v48 = v47 >> 2;
    if (v47 >> 2 == v35
      || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioframe.hpp", 776, (uint64_t)"n == num_correspondences", 24, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      v160 = 0;
      v161 = 0;
      v162 = 0;
      if (v45 != v46)
      {
        if (v47 < 0)
          sub_20E867F44();
        v160 = (char *)operator new(v47);
        v161 = v160;
        v162 = &v160[4 * v48];
        v49 = (char *)operator new(v47);
        v50 = 0;
        v157 = v49;
        v158 = v49;
        v159 = &v49[4 * v48];
        while (1)
        {
          v52 = *v36;
          v53 = *v33;
          v54 = *(unsigned int *)&(*v36)[4 * v50];
          if (*(unsigned __int8 *)(*a2 + 8 * v54) != *(unsigned __int8 *)(*a5 + 8 * *(unsigned int *)&(*v33)[4 * v50]))
            goto LABEL_65;
          v55 = v161;
          if (v161 < v162)
          {
            *(_DWORD *)v161 = v54;
            v161 = v55 + 4;
            v56 = v159;
            if (v49 >= v159)
              goto LABEL_91;
            goto LABEL_63;
          }
          v57 = v160;
          v58 = (v161 - v160) >> 2;
          v59 = v58 + 1;
          if ((unint64_t)(v58 + 1) >> 62)
            goto LABEL_213;
          v60 = v162 - v160;
          if ((v162 - v160) >> 1 > v59)
            v59 = v60 >> 1;
          v61 = (unint64_t)v60 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v59;
          if (v61)
          {
            if (v61 >> 62)
              goto LABEL_212;
            v62 = operator new(4 * v61);
            v63 = &v62[4 * v58];
            *(_DWORD *)v63 = *(_DWORD *)&v52[4 * v50];
            v64 = v63 + 4;
            v65 = v55 - v57;
            if (v55 == v57)
            {
LABEL_82:
              v33 = a11;
              goto LABEL_88;
            }
          }
          else
          {
            v62 = 0;
            v63 = (char *)(4 * v58);
            *(_DWORD *)(4 * v58) = v54;
            v64 = (char *)(4 * v58 + 4);
            v65 = v55 - v57;
            if (v55 == v57)
              goto LABEL_82;
          }
          v66 = v65 - 4;
          if (v66 < 0x2C)
            break;
          v33 = a11;
          if ((unint64_t)(v57 - v62) < 0x20)
            goto LABEL_87;
          v67 = (v66 >> 2) + 1;
          v68 = 4 * (v67 & 0x7FFFFFFFFFFFFFF8);
          v69 = &v55[-v68];
          v63 -= v68;
          v70 = &v62[4 * v58 - 16];
          v71 = v55 - 16;
          v72 = v67 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v73 = *(_OWORD *)v71;
            *(v70 - 1) = *((_OWORD *)v71 - 1);
            *v70 = v73;
            v70 -= 2;
            v71 -= 32;
            v72 -= 8;
          }
          while (v72);
          v55 = v69;
          if (v67 != (v67 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_87;
LABEL_88:
          v160 = v63;
          v161 = v64;
          v162 = &v62[4 * v61];
          if (v57)
          {
            operator delete(v57);
            v49 = v158;
          }
          v36 = a10;
          v161 = v64;
          v56 = v159;
          if (v49 >= v159)
          {
LABEL_91:
            v75 = v157;
            v76 = (v49 - v157) >> 2;
            v77 = v76 + 1;
            if ((unint64_t)(v76 + 1) >> 62)
LABEL_213:
              sub_20E867F44();
            v78 = v56 - v157;
            if (v78 >> 1 > v77)
              v77 = v78 >> 1;
            if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFFCLL)
              v79 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v79 = v77;
            if (v79)
            {
              if (v79 >> 62)
LABEL_212:
                sub_20E877A38();
              v80 = operator new(4 * v79);
              v33 = a11;
              v36 = a10;
              v81 = &v80[4 * v76];
              *(_DWORD *)v81 = *(_DWORD *)&v53[4 * v50];
              v51 = v81 + 4;
              v82 = v49 - v75;
              if (v49 == v75)
                goto LABEL_105;
LABEL_102:
              v83 = v82 - 4;
              if (v83 < 0xBC)
              {
                v84 = v49;
                goto LABEL_104;
              }
              v86 = (v49 - 4 - v75) & 0xFFFFFFFFFFFFFFFCLL;
              if (&v80[v49 - v75 - 4 - v86] > &v80[v49 - v75 - 4])
              {
                v84 = v49;
                goto LABEL_104;
              }
              if (&v49[-v86 - 4] > v49 - 4)
              {
                v84 = v49;
                goto LABEL_104;
              }
              if ((unint64_t)(v75 - v80) < 0x20)
              {
                v84 = v49;
                goto LABEL_104;
              }
              v87 = (v83 >> 2) + 1;
              v88 = 4 * (v87 & 0x7FFFFFFFFFFFFFF8);
              v84 = &v49[-v88];
              v81 -= v88;
              v89 = &v80[4 * v76 - 16];
              v90 = v49 - 16;
              v91 = v87 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v92 = *(_OWORD *)v90;
                *(v89 - 1) = *((_OWORD *)v90 - 1);
                *v89 = v92;
                v89 -= 2;
                v90 -= 32;
                v91 -= 8;
              }
              while (v91);
              if (v87 != (v87 & 0x7FFFFFFFFFFFFFF8))
              {
                do
                {
LABEL_104:
                  v85 = *((_DWORD *)v84 - 1);
                  v84 -= 4;
                  *((_DWORD *)v81 - 1) = v85;
                  v81 -= 4;
                }
                while (v84 != v75);
              }
            }
            else
            {
              v80 = 0;
              v81 = (char *)(4 * v76);
              *(_DWORD *)(4 * v76) = *(_DWORD *)&v53[4 * v50];
              v51 = (char *)(4 * v76 + 4);
              v82 = v49 - v75;
              if (v49 != v75)
                goto LABEL_102;
            }
LABEL_105:
            v157 = v81;
            v158 = v51;
            v159 = &v80[4 * v79];
            if (v75)
              operator delete(v75);
            goto LABEL_64;
          }
LABEL_63:
          *(_DWORD *)v49 = *(_DWORD *)&v53[4 * v50];
          v51 = v49 + 4;
LABEL_64:
          v158 = v51;
          v49 = v51;
LABEL_65:
          if (++v50 == v48)
            goto LABEL_118;
        }
        v33 = a11;
        do
        {
LABEL_87:
          v74 = *((_DWORD *)v55 - 1);
          v55 -= 4;
          *((_DWORD *)v63 - 1) = v74;
          v63 -= 4;
        }
        while (v55 != v57);
        goto LABEL_88;
      }
      v157 = 0;
      v158 = 0;
      v159 = 0;
LABEL_118:
      v93 = atomic_load((unsigned __int8 *)&qword_254A687D8);
      if ((v93 & 1) == 0 && __cxa_guard_acquire(&qword_254A687D8))
      {
        sub_21021D3D8(&v163);
        sub_20E8610C0(&__p, "cv3d.vio");
        sub_20E8C4068(&v163, (uint64_t)&__p, &qword_254A687D0);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __cxa_guard_release(&qword_254A687D8);
        v33 = a11;
        v36 = a10;
      }
      v156 = qword_254A687D0;
      if (**(int **)(qword_254A687D0 + 56) > 3)
        goto LABEL_189;
      v94 = *(unsigned __int8 *)(qword_254A687D0 + 72);
      v95 = sub_20E8C31DC(qword_254A687D0, "OSLogSurrogateAppender", 1, 0);
      v96 = v95 ? v95 + 16 : 0;
      if (!v94 && v95 == 0)
        goto LABEL_189;
      sub_20E863438((uint64_t)&__p);
      sub_20E86A980(&__p.__r_.__value_.__r.__words[2], (uint64_t)"Semantics filtering: ", 21);
      v98 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v98, (uint64_t)"/", 1);
      std::ostream::operator<<();
      if ((v154 & 0x10) != 0)
      {
        v101 = v153;
        if (v153 < v150)
        {
          v153 = v150;
          v101 = v150;
        }
        v102 = v149;
        v99 = v101 - (_QWORD)v149;
        if (v101 - (unint64_t)v149 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_211;
      }
      else
      {
        if ((v154 & 8) == 0)
        {
          v99 = 0;
          HIBYTE(v144) = 0;
          v100 = __dst;
          goto LABEL_140;
        }
        v102 = v147;
        v99 = v148 - (_QWORD)v147;
        if ((unint64_t)(v148 - (_QWORD)v147) > 0x7FFFFFFFFFFFFFF7)
LABEL_211:
          sub_20E860B7C();
      }
      if (v99 >= 0x17)
      {
        v103 = (v99 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v99 | 7) != 0x17)
          v103 = v99 | 7;
        v104 = v103 + 1;
        v100 = (void **)operator new(v103 + 1);
        __dst[1] = (void *)v99;
        v144 = v104 | 0x8000000000000000;
        __dst[0] = v100;
      }
      else
      {
        HIBYTE(v144) = v99;
        v100 = __dst;
        if (!v99)
        {
LABEL_140:
          *((_BYTE *)v100 + v99) = 0;
          v136.__r_.__value_.__r.__words[0] = (std::string::size_type)&v156;
          v136.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
          v136.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
          v137 = 3;
          v138 = "unknown file";
          v139 = 788;
          v141 = 0;
          v142 = 0;
          v140 = "unknown function";
          v105 = (const char *)__dst;
          if (v144 < 0)
            v105 = (const char *)__dst[0];
          v135 = v105;
          v106 = *(_QWORD *)v136.__r_.__value_.__l.__data_;
          v107 = (uint64_t *)(*(_QWORD *)v136.__r_.__value_.__l.__data_ + 16);
          if (*(char *)(*(_QWORD *)v136.__r_.__value_.__l.__data_ + 39) < 0)
          {
            v109 = *(const char **)(v106 + 16);
            v108 = *(_QWORD *)(v106 + 24);
            v111 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v111 & 1) != 0)
              goto LABEL_146;
          }
          else
          {
            v108 = *(unsigned __int8 *)(*(_QWORD *)v136.__r_.__value_.__l.__data_ + 39);
            v109 = (const char *)(*(_QWORD *)v136.__r_.__value_.__l.__data_ + 16);
            v110 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v110 & 1) != 0)
              goto LABEL_146;
          }
          if (__cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)&v163);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v163);
            if ((_BYTE)v166 && SHIBYTE(v165) < 0)
              operator delete(v163);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
            v36 = a10;
          }
LABEL_146:
          if (byte_254A4A4F8[23] >= 0)
            v112 = byte_254A4A4F8;
          else
            v112 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v113 = byte_254A4A4F8[23];
          else
            v113 = *(_QWORD *)&byte_254A4A4F8[8];
          v163 = (uint64_t *)os_log_create(v112, v109);
          v114 = (void **)&v164;
          if (v113 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v113 >= 0x17)
          {
            v115 = (v113 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v113 | 7) != 0x17)
              v115 = v113 | 7;
            v116 = v115 + 1;
            v114 = (void **)operator new(v115 + 1);
            v165 = v113;
            v166 = v116 | 0x8000000000000000;
            v164 = v114;
            v36 = a10;
          }
          else
          {
            HIBYTE(v166) = v113;
            if (!v113)
            {
LABEL_160:
              *((_BYTE *)v114 + v113) = 0;
              v167 = 1;
              v117 = v168;
              if (v108 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v108 >= 0x17)
              {
                v118 = (v108 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v108 | 7) != 0x17)
                  v118 = v108 | 7;
                v119 = v118 + 1;
                v117 = (void **)operator new(v118 + 1);
                v168[1] = (void *)v108;
                v169 = v119 | 0x8000000000000000;
                v168[0] = v117;
                v36 = a10;
              }
              else
              {
                HIBYTE(v169) = v108;
                if (!v108)
                  goto LABEL_168;
              }
              memmove(v117, v109, v108);
LABEL_168:
              *((_BYTE *)v117 + v108) = 0;
              v170 = 1;
              v120 = v163;
              if (SHIBYTE(v169) < 0)
                operator delete(v168[0]);
              v33 = a11;
              if (v167 && SHIBYTE(v166) < 0)
                operator delete(v164);
              if (v163)
                os_release(v163);
              sub_20F2499E8((int)&v163, v96, v107, v120, OS_LOG_TYPE_INFO, v94 != 0, &v135);
              if (v94)
              {
                v121 = (const char *)__dst;
                if (v144 < 0)
                  v121 = (const char *)__dst[0];
                sub_20E8C003C((uint64_t)&v136, "%s", v121);
                sub_20E863570((uint64_t)&v136);
              }
              sub_20E863570((uint64_t)&v136);
              v122 = v142;
              if (v142)
              {
                p_shared_owners = (unint64_t *)&v142->__shared_owners_;
                do
                  v124 = __ldaxr(p_shared_owners);
                while (__stlxr(v124 - 1, p_shared_owners));
                if (!v124)
                {
                  ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
                  std::__shared_weak_count::__release_weak(v122);
                }
              }
              if (SHIBYTE(v144) < 0)
                operator delete(__dst[0]);
              __p.__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7F0];
              v125 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
              *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words
                                        + *(_QWORD *)(__p.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
              __p.__r_.__value_.__r.__words[2] = v125;
              v146 = MEMORY[0x24BEDB848] + 16;
              if (v152 < 0)
                operator delete(v151);
              std::streambuf::~streambuf();
              std::iostream::~basic_iostream();
              MEMORY[0x212BC6290](&v155);
LABEL_189:
              if (&v160 != v36)
                sub_20E867E00(v36, v160, v161, (v161 - v160) >> 2);
              if (&v157 != v33)
                sub_20E867E00(v33, v157, v158, (v158 - v157) >> 2);
              v126 = v36[1] - *v36;
              if (v157)
              {
                v158 = v157;
                operator delete(v157);
              }
              v35 = v126 >> 2;
              if (v160)
              {
                v161 = v160;
                operator delete(v160);
              }
              goto LABEL_197;
            }
          }
          memmove(v114, v112, v113);
          goto LABEL_160;
        }
      }
      memmove(v100, v102, v99);
      goto LABEL_140;
    }
LABEL_220:
    abort();
  }
LABEL_197:
  if (a23)
  {
    *(_QWORD *)(a22 + 24) = (v36[1] - *v36) >> 2;
    if ((char **)(a22 + 40) != v33)
      sub_20E867E00((_QWORD *)(a22 + 40), *v33, v33[1], (v33[1] - *v33) >> 2);
    if ((char **)(a22 + 64) != v36)
      sub_20E867E00((_QWORD *)(a22 + 64), *v36, v36[1], (v36[1] - *v36) >> 2);
  }
  if (v35 > 3)
  {
    if (v128)
    {
      v35 = sub_20F243A10((uint64_t)a1, v129, a9, (unsigned int **)v36, (unsigned int **)v33, a12, 0, 0, 0, 0, a13, a14);
      if (!a23)
        return v35;
    }
    else
    {
      *(_QWORD *)(a12 + 8) = 0;
      sub_20EB884A4(a12, v35, 1uLL);
      if (!a23)
        return v35;
    }
    *(_QWORD *)(a22 + 32) = v35;
    return v35;
  }
  v35 = 0;
  v36[1] = *v36;
  v33[1] = *v33;
  *(_QWORD *)(a12 + 8) = 0;
  return v35;
}

void sub_20F24209C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  uint64_t v50;
  void *v52;
  void *v53;

  if (*(_BYTE *)(v50 - 136) && *(char *)(v50 - 137) < 0)
    operator delete(*(void **)(v50 - 160));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a27);
  if (a44 < 0)
    operator delete(__p);
  sub_20E863784((uint64_t)&a45);
  v52 = *(void **)(v50 - 208);
  if (v52)
  {
    *(_QWORD *)(v50 - 200) = v52;
    operator delete(v52);
  }
  v53 = *(void **)(v50 - 184);
  if (!v53)
    _Unwind_Resume(a1);
  *(_QWORD *)(v50 - 176) = v53;
  operator delete(v53);
  _Unwind_Resume(a1);
}

_QWORD *sub_20F2422A0(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[8];
  if (v3)
  {
    a1[9] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_20F2422E0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, int *a5, _DWORD *a6, int *a7, _DWORD *a8)
{
  unsigned __int8 v15;
  uint64_t v17;
  int v18;
  _DWORD *v19;
  int v20;
  int v21;
  _DWORD *v22;
  int v23;
  char *v24;
  size_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  _QWORD *v35;
  __uint64_t v36[2];
  int v37;
  _BYTE v38[14];
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;
  __int16 v43;
  void *v44;
  char v45;
  char v46;
  void *v47;
  char v48;
  char v49;
  void *v50;
  char v51;
  void *__p;
  char v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v15 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    v35 = a4;
    v17 = *a4;
    v18 = *a5;
    v19 = a6;
    v20 = *a6;
    v21 = *a7;
    v22 = a8;
    v23 = *a8;
    v37 = 134219008;
    *(_QWORD *)v38 = v17;
    *(_WORD *)&v38[8] = 1024;
    *(_DWORD *)&v38[10] = v18;
    v39 = 1024;
    v40 = v20;
    v41 = 1024;
    v42 = v21;
    v43 = 1024;
    LODWORD(v44) = v23;
    v24 = (char *)_os_log_send_and_compose_impl();
    v25 = strlen(v24);
    v36[0] = 0;
    pthread_threadid_np(0, v36);
    v26 = v36[0];
    timespec_get((timespec *)v36, 1);
    sub_210219E20(&v37, a3, "Trace", 5uLL, (__int128 *)(a2 + 8), (__int128 *)(a2 + 40), "CLUSTER:FM: RID:[%llu:%u:%u], NI2D:%u, NI3D:%u", 0x2EuLL, v24, v25, v26, v36);
    std::mutex::lock(&stru_254A5A410);
    v27 = qword_254A5A458;
    for (i = unk_254A5A460; v27 != i; v27 += 40)
    {
      v29 = *(_QWORD *)(v27 + 32);
      if (!v29)
        sub_20E86D37C();
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v29 + 48))(v29, &v37);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v53 < 0)
    {
      operator delete(__p);
      a8 = v22;
      if ((v51 & 0x80000000) == 0)
      {
LABEL_8:
        a6 = v19;
        if (!v49)
        {
LABEL_14:
          a4 = v35;
          if (v46 && v45 < 0)
            operator delete(v44);
          if (SHIBYTE(v43) < 0)
            operator delete(*(void **)&v38[4]);
          if (v24)
            free(v24);
          goto LABEL_21;
        }
LABEL_12:
        if (v48 < 0)
          operator delete(v47);
        goto LABEL_14;
      }
    }
    else
    {
      a8 = v22;
      if ((v51 & 0x80000000) == 0)
        goto LABEL_8;
    }
    operator delete(v50);
    a6 = v19;
    if (!v49)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_21:
  if ((unint64_t)(a3 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(*(os_log_t *)a2))
  {
    v30 = *a4;
    v31 = *a5;
    v32 = *a6;
    v33 = *a7;
    v34 = *a8;
    v37 = 134219008;
    *(_QWORD *)v38 = v30;
    *(_WORD *)&v38[8] = 1024;
    *(_DWORD *)&v38[10] = v31;
    v39 = 1024;
    v40 = v32;
    v41 = 1024;
    v42 = v33;
    v43 = 1024;
    LODWORD(v44) = v34;
    _os_signpost_emit_unreliably_with_name_impl();
  }
}

void sub_20F242658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);
  sub_20E96E218((uint64_t)va);
  if (v9)
    free(v9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20F242698(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_20F2426D8(int a1, uint64_t a2, uint64_t *a3, os_log_t oslog, os_log_type_t type)
{
  size_t v8;
  std::__shared_weak_count_vtbl *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  __int128 v27;
  uint64_t v28;

  if (a2 && *(_QWORD *)(a2 + 8))
  {
    v8 = _os_log_pack_size();
    v9 = (std::__shared_weak_count_vtbl *)operator new(v8, (std::align_val_t)8uLL);
    v10 = (std::__shared_weak_count *)operator new();
    v11 = v10;
    v10->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    v10->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v10->__shared_weak_owners_ = 0;
    v10[1].__vftable = v9;
    *(_QWORD *)&v27 = v9;
    *((_QWORD *)&v27 + 1) = v10;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v11);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v15 = operator new();
    v16 = *((unsigned __int8 *)a3 + 23);
    if ((v16 & 0x80u) == 0)
      v17 = a3;
    else
      v17 = (uint64_t *)*a3;
    if ((v16 & 0x80u) != 0)
      v16 = a3[1];
    *(_QWORD *)v15 = v9;
    *(_OWORD *)(v15 + 8) = v27;
    *(_OWORD *)(v15 + 24) = 0uLL;
    *(_QWORD *)(v15 + 40) = v17;
    *(_QWORD *)(v15 + 48) = v16;
    *(_BYTE *)(v15 + 56) = type;
    v28 = v15;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a2 + 8) + 40))(*(_QWORD *)(a2 + 8), &v28);
    v18 = v28;
    v28 = 0;
    if (v18)
    {
      v19 = *(std::__shared_weak_count **)(v18 + 32);
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v22 = *(std::__shared_weak_count **)(v18 + 16);
      if (v22)
      {
        v23 = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      MEMORY[0x212BC6398](v18, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v25 = (void *)_os_log_send_and_compose_impl();
    if (v25)
      free(v25);
  }
  return 0;
}

void sub_20F242A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F242A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F242AA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

uint64_t sub_20F242AC8(uint64_t a1, uint64_t *a2, unint64_t a3, int a4, unsigned int **a5, char **a6, char **a7, double a8)
{
  char ***v14;
  int v15;
  float v16;
  uint64_t v17;
  unint64_t v18;
  float v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char **v23;
  __int128 v25;
  uint64_t v26;
  void *__p[2];
  uint64_t v28;

  if (!a4 || *(_QWORD *)(a1 + 552) == *(_QWORD *)(a1 + 560))
  {
    if (*(_QWORD *)(a1 + 528) == *(_QWORD *)(a1 + 536))
    {
      __p[0] = 0;
      __p[1] = 0;
      v28 = 0;
      if (__p != (void **)(a1 + 576))
        sub_20EDB61CC(__p, *(char **)(a1 + 576), *(char **)(a1 + 584), (uint64_t)(*(_QWORD *)(a1 + 584) - *(_QWORD *)(a1 + 576)) >> 6);
      v15 = 0;
      v14 = 0;
      if (a3 == 1)
        goto LABEL_9;
      goto LABEL_13;
    }
    v14 = (char ***)(a1 + 528);
  }
  else
  {
    v14 = (char ***)(a1 + 552);
  }
  __p[0] = 0;
  __p[1] = 0;
  v28 = 0;
  sub_20F244D44(v14, a1, (uint64_t)&v25);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(_OWORD *)__p = v25;
  v28 = v26;
  v15 = 1;
  if (a3 == 1)
  {
LABEL_9:
    v16 = a8;
    v17 = sub_20F244E64(a5, a2, __p, a7, a6, v16, 1, 0, 0);
    goto LABEL_18;
  }
LABEL_13:
  v18 = ((char *)__p[1] - (char *)__p[0]) >> 6;
  if (v18 <= (a2[1] - *a2) >> 6)
    v18 = (a2[1] - *a2) >> 6;
  v19 = a8;
  if (v18 <= a3)
    v17 = sub_20F245348(a5, a2, __p, a7, a6, v19, a3, 0, 0);
  else
    v17 = sub_20F24586C(a5, a2, __p, a7, a6, a3, 0, 0, v19);
LABEL_18:
  v20 = v17;
  if (v15)
  {
    v21 = *a6;
    v22 = a6[1];
    if (*a6 != v22)
    {
      v23 = *v14;
      do
      {
        *(_DWORD *)v21 = *((_DWORD *)v23 + *(unsigned int *)v21);
        v21 += 4;
      }
      while (v21 != v22);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v20;
}

void sub_20F242CBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F242CDC(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, int *a5, int *a6)
{
  unsigned __int8 v11;
  int v13;
  int v14;
  int v15;
  char *v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  __uint64_t v25[2];
  uint64_t v26;
  void *v27;
  int v28;
  char v29;
  void *v30;
  char v31;
  char v32;
  void *v33;
  char v34;
  char v35;
  void *v36;
  char v37;
  void *__p;
  char v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v11 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    v13 = *a4;
    v14 = *a5;
    v15 = *a6;
    LODWORD(v26) = 67109632;
    HIDWORD(v26) = v13;
    LOWORD(v27) = 1024;
    *(_DWORD *)((char *)&v27 + 2) = v14;
    HIWORD(v27) = 1024;
    v28 = v15;
    v16 = (char *)_os_log_send_and_compose_impl();
    v17 = strlen(v16);
    v25[0] = 0;
    pthread_threadid_np(0, v25);
    v18 = v25[0];
    timespec_get((timespec *)v25, 1);
    sub_210219E20(&v26, a3, "Trace", 5uLL, (__int128 *)(a2 + 8), (__int128 *)(a2 + 40), "MQF:FREAK: NC:%u, QD:%u, MD:%u", 0x1EuLL, v16, v17, v18, v25);
    std::mutex::lock(&stru_254A5A410);
    v19 = qword_254A5A458;
    for (i = unk_254A5A460; v19 != i; v19 += 40)
    {
      v21 = *(_QWORD *)(v19 + 32);
      if (!v21)
        sub_20E86D37C();
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v21 + 48))(v21, &v26);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v39 < 0)
    {
      operator delete(__p);
      if ((v37 & 0x80000000) == 0)
      {
LABEL_8:
        if (!v35)
        {
LABEL_14:
          if (v32 && v31 < 0)
            operator delete(v30);
          if (v29 < 0)
            operator delete(v27);
          if (v16)
            free(v16);
          goto LABEL_21;
        }
LABEL_12:
        if (v34 < 0)
          operator delete(v33);
        goto LABEL_14;
      }
    }
    else if ((v37 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(v36);
    if (!v35)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_21:
  if ((unint64_t)(a3 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(*(os_log_t *)a2))
  {
    v22 = *a4;
    v23 = *a5;
    v24 = *a6;
    LODWORD(v26) = 67109632;
    HIDWORD(v26) = v22;
    LOWORD(v27) = 1024;
    *(_DWORD *)((char *)&v27 + 2) = v23;
    HIWORD(v27) = 1024;
    v28 = v24;
    _os_signpost_emit_unreliably_with_name_impl();
  }
}

void sub_20F242FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  sub_20E96E218((uint64_t)va);
  if (v7)
    free(v7);
  _Unwind_Resume(a1);
}

uint64_t sub_20F243028(_QWORD *a1, uint64_t *a2, unint64_t a3, int a4, unsigned int **a5, char **a6, char **a7, double a8)
{
  unsigned int **v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  float v31;
  uint64_t v32;
  unint64_t v33;
  float v34;
  uint64_t v35;
  char *v36;
  char *v37;
  _DWORD *v38;
  void *__p[2];
  uint64_t v41;
  void *__dst[2];
  uint64_t v43;

  __p[0] = 0;
  __p[1] = 0;
  v41 = 0;
  if (a4 && a1[69] != a1[70])
  {
    v15 = (unsigned int **)(a1 + 69);
LABEL_6:
    sub_20EDCBDD4(a1 + 77, v15, 1, __dst);
    v16 = v43;
    *(_OWORD *)__p = *(_OWORD *)__dst;
    goto LABEL_36;
  }
  if (a1[66] != a1[67])
  {
    v15 = (unsigned int **)(a1 + 66);
    goto LABEL_6;
  }
  __dst[0] = 0;
  __dst[1] = 0;
  v43 = 0;
  v17 = a1[78] - a1[77];
  if (v17)
  {
    sub_20E93DC84((uint64_t)__dst, v17 >> 6);
    v18 = (char *)a1[78];
    v19 = (char *)a1[77];
    v20 = __dst[0];
    v21 = v18 - v19;
    if (v18 != v19)
    {
      v22 = 0;
      v23 = v21 >> 6;
      do
      {
        if (*(_QWORD *)v19)
          v24 = 0;
        else
          v24 = *((_QWORD *)v19 + 1) == 0;
        if (!v24
          || *((_QWORD *)v19 + 2) != 0
          || *((_QWORD *)v19 + 3) != 0
          || *((_QWORD *)v19 + 4) != 0
          || *((_QWORD *)v19 + 5) != 0
          || *((_QWORD *)v19 + 6) != 0
          || *((_QWORD *)v19 + 7) != 0)
        {
          *v20++ = v22;
        }
        ++v22;
        v19 += 64;
      }
      while (v23 != v22);
    }
  }
  else
  {
    v20 = 0;
  }
  v16 = v43;
  __p[0] = __dst[0];
  __p[1] = v20;
LABEL_36:
  v41 = v16;
  sub_20F24614C((char ***)__p, (uint64_t)a1, (uint64_t)__dst);
  if (a3 == 1)
  {
    v31 = a8;
    v32 = sub_20F244E64(a5, a2, __dst, a7, a6, v31, 1, 0, 0);
  }
  else
  {
    v33 = ((char *)__dst[1] - (char *)__dst[0]) >> 6;
    if (v33 <= (a2[1] - *a2) >> 6)
      v33 = (a2[1] - *a2) >> 6;
    v34 = a8;
    if (v33 <= a3)
      v32 = sub_20F245348(a5, a2, __dst, a7, a6, v34, a3, 0, 0);
    else
      v32 = sub_20F24586C(a5, a2, __dst, a7, a6, a3, 0, 0, v34);
  }
  v35 = v32;
  v36 = *a6;
  v37 = a6[1];
  if (*a6 != v37)
  {
    v38 = __p[0];
    do
    {
      *(_DWORD *)v36 = v38[*(unsigned int *)v36];
      v36 += 4;
    }
    while (v36 != v37);
  }
  if (__dst[0])
  {
    __dst[1] = __dst[0];
    operator delete(__dst[0]);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v35;
}

void sub_20F2432CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F243314(uint64_t a1, _QWORD *a2, unint64_t a3, int a4, char **a5, char **a6, double a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t *v42;
  uint64_t *v43;
  float v44;
  uint64_t v45;
  float v46;
  unint64_t v47;
  float v48;
  uint64_t v49;
  void *__p[2];
  uint64_t v52;
  void *__dst[2];
  uint64_t v54;

  if (a4)
  {
    v13 = *(_QWORD *)(a1 + 552);
    v14 = *(_QWORD *)(a1 + 560);
    __p[0] = 0;
    __p[1] = 0;
    v52 = 0;
    if (v13 != v14)
    {
      sub_20EDCBDD4((_QWORD *)(a1 + 616), (unsigned int **)(a1 + 552), 1, __dst);
      *(_OWORD *)__p = *(_OWORD *)__dst;
      v52 = v54;
      goto LABEL_64;
    }
    if (*(_QWORD *)(a1 + 528) != *(_QWORD *)(a1 + 536))
      goto LABEL_33;
    __dst[0] = 0;
    __dst[1] = 0;
    v54 = 0;
    v29 = *(_QWORD *)(a1 + 624) - *(_QWORD *)(a1 + 616);
    if (v29)
    {
      sub_20E93DC84((uint64_t)__dst, v29 >> 6);
      v30 = *(char **)(a1 + 624);
      v31 = *(char **)(a1 + 616);
      v18 = __dst[0];
      v32 = v30 - v31;
      if (v30 != v31)
      {
        v33 = 0;
        v34 = v32 >> 6;
        do
        {
          if (*(_QWORD *)v31)
            v35 = 0;
          else
            v35 = *((_QWORD *)v31 + 1) == 0;
          if (!v35
            || *((_QWORD *)v31 + 2) != 0
            || *((_QWORD *)v31 + 3) != 0
            || *((_QWORD *)v31 + 4) != 0
            || *((_QWORD *)v31 + 5) != 0
            || *((_QWORD *)v31 + 6) != 0
            || *((_QWORD *)v31 + 7) != 0)
          {
            *v18++ = v33;
          }
          ++v33;
          v31 += 64;
        }
        while (v34 != v33);
      }
      goto LABEL_62;
    }
LABEL_61:
    v18 = 0;
LABEL_62:
    __p[0] = __dst[0];
    __p[1] = v18;
    v52 = v54;
    goto LABEL_63;
  }
  __p[0] = 0;
  __p[1] = 0;
  v52 = 0;
  if (*(_QWORD *)(a1 + 528) == *(_QWORD *)(a1 + 536))
  {
    __dst[0] = 0;
    __dst[1] = 0;
    v54 = 0;
    v15 = *(_QWORD *)(a1 + 624) - *(_QWORD *)(a1 + 616);
    if (v15)
    {
      sub_20E93DC84((uint64_t)__dst, v15 >> 6);
      v16 = *(char **)(a1 + 624);
      v17 = *(char **)(a1 + 616);
      v18 = __dst[0];
      v19 = v16 - v17;
      if (v16 != v17)
      {
        v20 = 0;
        v21 = v19 >> 6;
        do
        {
          if (*(_QWORD *)v17)
            v22 = 0;
          else
            v22 = *((_QWORD *)v17 + 1) == 0;
          if (!v22
            || *((_QWORD *)v17 + 2) != 0
            || *((_QWORD *)v17 + 3) != 0
            || *((_QWORD *)v17 + 4) != 0
            || *((_QWORD *)v17 + 5) != 0
            || *((_QWORD *)v17 + 6) != 0
            || *((_QWORD *)v17 + 7) != 0)
          {
            *v18++ = v20;
          }
          ++v20;
          v17 += 64;
        }
        while (v21 != v20);
      }
      goto LABEL_62;
    }
    goto LABEL_61;
  }
LABEL_33:
  sub_20EDCBDD4((_QWORD *)(a1 + 616), (unsigned int **)(a1 + 528), 1, __dst);
  *(_OWORD *)__p = *(_OWORD *)__dst;
  v52 = v54;
LABEL_63:
  sub_20EDCA64C(a1);
LABEL_64:
  if (*(_BYTE *)(a1 + 456))
  {
    v42 = (uint64_t *)(a1 + 288);
    v43 = (uint64_t *)(a1 + 616);
    if (a3 == 1)
    {
      v44 = a7;
      v45 = sub_20F24626C(v42, v43, a2, a5, a6, v44, 1, (unsigned int **)__p, 1);
    }
    else
    {
      v47 = (uint64_t)(*(_QWORD *)(a1 + 624) - *(_QWORD *)(a1 + 616)) >> 6;
      if (v47 <= (uint64_t)(a2[1] - *a2) >> 6)
        v47 = (uint64_t)(a2[1] - *a2) >> 6;
      v48 = a7;
      if (v47 <= a3)
        v45 = sub_20F246830(v42, v43, a2, a5, a6, v48, a3, (unsigned int **)__p, 1);
      else
        v45 = sub_20F246DF8(v42, v43, a2, a5, a6, a3, (unsigned int **)__p, 1, v48);
    }
  }
  else
  {
    v46 = a7;
    v45 = sub_20F2473D8((_QWORD *)(a1 + 616), a2, a5, a6, a3, (uint64_t)__p, 1, v46);
  }
  v49 = v45;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v49;
}

void sub_20F243684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F2436C4(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, int *a5, int *a6)
{
  unsigned __int8 v11;
  int v13;
  int v14;
  int v15;
  char *v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  __uint64_t v25[2];
  uint64_t v26;
  void *v27;
  int v28;
  char v29;
  void *v30;
  char v31;
  char v32;
  void *v33;
  char v34;
  char v35;
  void *v36;
  char v37;
  void *__p;
  char v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v11 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    v13 = *a4;
    v14 = *a5;
    v15 = *a6;
    LODWORD(v26) = 67109632;
    HIDWORD(v26) = v13;
    LOWORD(v27) = 1024;
    *(_DWORD *)((char *)&v27 + 2) = v14;
    HIWORD(v27) = 1024;
    v28 = v15;
    v16 = (char *)_os_log_send_and_compose_impl();
    v17 = strlen(v16);
    v25[0] = 0;
    pthread_threadid_np(0, v25);
    v18 = v25[0];
    timespec_get((timespec *)v25, 1);
    sub_210219E20(&v26, a3, "Trace", 5uLL, (__int128 *)(a2 + 8), (__int128 *)(a2 + 40), "MQF:ML: NC:%u, QD:%u, MD:%u", 0x1BuLL, v16, v17, v18, v25);
    std::mutex::lock(&stru_254A5A410);
    v19 = qword_254A5A458;
    for (i = unk_254A5A460; v19 != i; v19 += 40)
    {
      v21 = *(_QWORD *)(v19 + 32);
      if (!v21)
        sub_20E86D37C();
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v21 + 48))(v21, &v26);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v39 < 0)
    {
      operator delete(__p);
      if ((v37 & 0x80000000) == 0)
      {
LABEL_8:
        if (!v35)
        {
LABEL_14:
          if (v32 && v31 < 0)
            operator delete(v30);
          if (v29 < 0)
            operator delete(v27);
          if (v16)
            free(v16);
          goto LABEL_21;
        }
LABEL_12:
        if (v34 < 0)
          operator delete(v33);
        goto LABEL_14;
      }
    }
    else if ((v37 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(v36);
    if (!v35)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_21:
  if ((unint64_t)(a3 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(*(os_log_t *)a2))
  {
    v22 = *a4;
    v23 = *a5;
    v24 = *a6;
    LODWORD(v26) = 67109632;
    HIDWORD(v26) = v22;
    LOWORD(v27) = 1024;
    *(_DWORD *)((char *)&v27 + 2) = v23;
    HIWORD(v27) = 1024;
    v28 = v24;
    _os_signpost_emit_unreliably_with_name_impl();
  }
}

void sub_20F2439D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  sub_20E96E218((uint64_t)va);
  if (v7)
    free(v7);
  _Unwind_Resume(a1);
}

uint64_t sub_20F243A10(uint64_t a1, uint64_t *a2, int a3, unsigned int **a4, unsigned int **a5, uint64_t a6, uint64_t a7, char a8, _OWORD *a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  char *v30;
  unint64_t v31;
  int64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  char *v40;
  uint64_t v41;
  int64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _OWORD *v49;
  __int128 *v50;
  uint64_t v51;
  __int128 v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD *v56;
  __int128 *v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unsigned int *v69;
  char *v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  _BYTE *v77;
  char *v78;
  unint64_t v79;
  int64_t v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  _BYTE *v87;
  char *v88;
  uint64_t v89;
  int64_t v90;
  unint64_t v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _OWORD *v97;
  __int128 *v98;
  uint64_t v99;
  __int128 v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _OWORD *v104;
  __int128 *v105;
  uint64_t v106;
  __int128 v107;
  unsigned int *v108;
  unsigned int *v109;
  char *v110;
  char *v111;
  char *v112;
  uint64_t v113;
  _QWORD *v114;
  char *v115;
  _QWORD *v116;
  int64_t v117;
  uint64_t v118;
  unint64_t v119;
  char *v120;
  unint64_t v121;
  char *v122;
  char *v123;
  char *v124;
  int64_t v125;
  unint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  _BYTE *v132;
  char *v133;
  int64_t v134;
  unint64_t v135;
  char *v136;
  uint64_t v137;
  char *v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  __int128 v146;
  uint64_t v147;
  uint64_t v148;
  _OWORD *v149;
  __int128 *v150;
  uint64_t v151;
  __int128 v152;
  unsigned int *v153;
  unsigned int *v154;
  char *v155;
  char *v156;
  char *v157;
  uint64_t v158;
  _QWORD *v159;
  char *v160;
  _QWORD *v161;
  int64_t v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  char *v166;
  char *v167;
  char *v168;
  uint64_t v169;
  unint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  _BYTE *v176;
  char *v177;
  int64_t v178;
  unint64_t v179;
  char *v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  uint64_t v188;
  __int128 v189;
  uint64_t v190;
  uint64_t v191;
  _OWORD *v192;
  __int128 *v193;
  uint64_t v194;
  __int128 v195;
  uint64_t v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 *v205;
  __int128 *v207;
  char v208;
  char *v209;
  char *v210;
  char *v211;
  char *v212;
  unsigned int *v216;
  unsigned int *v217;
  void *__p;
  void *v221;
  char *v222;
  void *v223;
  void *v224;
  char *v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  uint64_t v236;

  v12 = a1;
  if (a3 == 2)
  {
    v236 = 0;
    v234 = 0u;
    v235 = 0u;
    v232 = 0u;
    v233 = 0u;
    v230 = 0u;
    v231 = 0u;
    v228 = 0u;
    v229 = 0u;
    v226 = 0u;
    v227 = 0u;
    v223 = 0;
    v224 = 0;
    v225 = 0;
    __p = 0;
    v221 = 0;
    v222 = 0;
    v61 = *(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72);
    if (v61)
    {
      v62 = 0xCCCCCCCCCCCCCCCDLL * (v61 >> 3);
      v63 = 2 * v62;
      if ((2 * v62) >> 61)
        goto LABEL_295;
      v64 = (char *)operator new(16 * v62);
      v65 = &v64[8 * v63];
      v223 = v64;
      v224 = v64;
      v225 = v65;
      v66 = a2[1] - *a2;
      v208 = a8;
      if (v66)
      {
LABEL_73:
        v67 = 0xCCCCCCCCCCCCCCCDLL * (v66 >> 3);
        v68 = 2 * v67;
        if (!((2 * v67) >> 61))
        {
          __p = operator new(16 * v67);
          v221 = __p;
          v210 = (char *)__p + 8 * v68;
          v212 = (char *)__p;
          v222 = v210;
          v69 = *a4;
          v217 = a4[1];
          if (*a4 != v217)
          {
LABEL_75:
            v70 = v64;
            while (1)
            {
              while (1)
              {
                v71 = *(_QWORD *)(v12 + 72);
                v72 = (_QWORD *)(v71 + 40 * *v69 + 16);
                if (v64 >= v65)
                  break;
                *(_QWORD *)v64 = *v72;
                v64 += 8;
                v73 = (_QWORD *)(v71 + 40 * *v69 + 24);
                if (v64 < v65)
                  goto LABEL_76;
LABEL_95:
                v84 = (v64 - v70) >> 3;
                v85 = v84 + 1;
                if ((unint64_t)(v84 + 1) >> 61)
                {
LABEL_277:
                  v224 = v64;
                  v225 = v65;
                  v223 = v70;
                  sub_20E867F44();
                }
                if ((v65 - v70) >> 2 > v85)
                  v85 = (v65 - v70) >> 2;
                if ((unint64_t)(v65 - v70) >= 0x7FFFFFFFFFFFFFF8)
                  v86 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v86 = v85;
                if (v86)
                {
                  if (v86 >> 61)
                  {
LABEL_279:
                    v224 = v64;
                    v225 = v65;
                    v223 = v70;
                    sub_20E877A38();
                  }
                  v87 = operator new(8 * v86);
                  v12 = a1;
                  v88 = &v87[8 * v84];
                  *(_QWORD *)v88 = *v73;
                  v89 = (uint64_t)(v88 + 8);
                  v90 = v64 - v70;
                  if (v64 == v70)
                    goto LABEL_112;
                }
                else
                {
                  v87 = 0;
                  v88 = (char *)(8 * v84);
                  *(_QWORD *)(8 * v84) = *v73;
                  v89 = 8 * v84 + 8;
                  v90 = v64 - v70;
                  if (v64 == v70)
                    goto LABEL_112;
                }
                v91 = v90 - 8;
                if (v91 >= 0x168)
                {
                  v101 = (v64 - 8 - v70) & 0xFFFFFFFFFFFFFFF8;
                  if (&v87[v64 - v70 - 8 - v101] > &v87[v64 - v70 - 8])
                  {
                    v92 = v64;
                  }
                  else if (&v64[-v101 - 8] > v64 - 8)
                  {
                    v92 = v64;
                  }
                  else if ((unint64_t)(v70 - v87) >= 0x20)
                  {
                    v102 = (v91 >> 3) + 1;
                    v103 = 8 * (v102 & 0x3FFFFFFFFFFFFFFCLL);
                    v92 = &v64[-v103];
                    v88 -= v103;
                    v104 = &v87[8 * v84 - 16];
                    v105 = (__int128 *)(v64 - 16);
                    v106 = v102 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v107 = *v105;
                      *(v104 - 1) = *(v105 - 1);
                      *v104 = v107;
                      v104 -= 2;
                      v105 -= 2;
                      v106 -= 4;
                    }
                    while (v106);
                    if (v102 == (v102 & 0x3FFFFFFFFFFFFFFCLL))
                      goto LABEL_112;
                  }
                  else
                  {
                    v92 = v64;
                  }
                }
                else
                {
                  v92 = v64;
                }
                do
                {
                  v93 = *((_QWORD *)v92 - 1);
                  v92 -= 8;
                  *((_QWORD *)v88 - 1) = v93;
                  v88 -= 8;
                }
                while (v92 != v70);
LABEL_112:
                v65 = &v87[8 * v86];
                if (v70)
                  operator delete(v70);
                v70 = v88;
                v64 = (char *)v89;
                if (++v69 == v217)
                {
LABEL_133:
                  v224 = v64;
                  goto LABEL_138;
                }
              }
              v74 = (v64 - v70) >> 3;
              v75 = v74 + 1;
              if ((unint64_t)(v74 + 1) >> 61)
                goto LABEL_277;
              if ((v65 - v70) >> 2 > v75)
                v75 = (v65 - v70) >> 2;
              if ((unint64_t)(v65 - v70) >= 0x7FFFFFFFFFFFFFF8)
                v76 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v76 = v75;
              if (v76)
              {
                if (v76 >> 61)
                  goto LABEL_279;
                v77 = operator new(8 * v76);
                v78 = &v77[8 * v74];
                *(_QWORD *)v78 = *v72;
                v79 = (unint64_t)(v78 + 8);
                v80 = v64 - v70;
                if (v64 != v70)
                {
LABEL_89:
                  v81 = v80 - 8;
                  if (v81 < 0x168
                    || (v94 = (v64 - 8 - v70) & 0xFFFFFFFFFFFFFFF8, &v77[v64 - v70 - 8 - v94] > &v77[v64 - v70 - 8])
                    || &v64[-v94 - 8] > v64 - 8
                    || (unint64_t)(v70 - v77) < 0x20)
                  {
                    v82 = v64;
                    v12 = a1;
                  }
                  else
                  {
                    v95 = (v81 >> 3) + 1;
                    v96 = 8 * (v95 & 0x3FFFFFFFFFFFFFFCLL);
                    v82 = &v64[-v96];
                    v78 -= v96;
                    v97 = &v77[8 * v74 - 16];
                    v98 = (__int128 *)(v64 - 16);
                    v99 = v95 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v100 = *v98;
                      *(v97 - 1) = *(v98 - 1);
                      *v97 = v100;
                      v97 -= 2;
                      v98 -= 2;
                      v99 -= 4;
                    }
                    while (v99);
                    v12 = a1;
                    if (v95 == (v95 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_92:
                      v65 = &v77[8 * v76];
                      if (!v70)
                        goto LABEL_94;
LABEL_93:
                      operator delete(v70);
                      v71 = *(_QWORD *)(v12 + 72);
                      goto LABEL_94;
                    }
                  }
                  do
                  {
                    v83 = *((_QWORD *)v82 - 1);
                    v82 -= 8;
                    *((_QWORD *)v78 - 1) = v83;
                    v78 -= 8;
                  }
                  while (v82 != v70);
                  goto LABEL_92;
                }
              }
              else
              {
                v77 = 0;
                v78 = (char *)(8 * v74);
                *(_QWORD *)(8 * v74) = *v72;
                v79 = 8 * v74 + 8;
                v80 = v64 - v70;
                if (v64 != v70)
                  goto LABEL_89;
              }
              v12 = a1;
              v65 = &v77[8 * v76];
              if (v70)
                goto LABEL_93;
LABEL_94:
              v70 = v78;
              v64 = (char *)v79;
              v73 = (_QWORD *)(v71 + 40 * *v69 + 24);
              if (v79 >= (unint64_t)v65)
                goto LABEL_95;
LABEL_76:
              *(_QWORD *)v64 = *v73;
              v64 += 8;
              if (++v69 == v217)
                goto LABEL_133;
            }
          }
          goto LABEL_137;
        }
LABEL_295:
        sub_20E867F44();
      }
    }
    else
    {
      v64 = 0;
      v65 = 0;
      v66 = a2[1] - *a2;
      v208 = a8;
      if (v66)
        goto LABEL_73;
    }
    v210 = 0;
    v212 = 0;
    v69 = *a4;
    v217 = a4[1];
    if (*a4 != v217)
      goto LABEL_75;
LABEL_137:
    v70 = v64;
LABEL_138:
    v225 = v65;
    v223 = v70;
    v108 = *a5;
    v109 = a5[1];
    v110 = v212;
    if (*a5 == v109)
    {
      v111 = v212;
      v112 = v210;
LABEL_266:
      v222 = v112;
      __p = v111;
      v196 = sub_20EB8871C((uint64_t *)&v223, (double *)&__p, a4, a5, 50, 100, 50, a6, 0.005, (uint64_t)&v232, (uint64_t)&v226);
      if (v208)
      {
        *(_OWORD *)a7 = v232;
        v197 = v233;
        v198 = v234;
        v199 = v235;
        *(_QWORD *)(a7 + 64) = v236;
        *(_OWORD *)(a7 + 32) = v198;
        *(_OWORD *)(a7 + 48) = v199;
        *(_OWORD *)(a7 + 16) = v197;
      }
      if (a10)
      {
        v200 = v227;
        *a9 = v226;
        a9[1] = v200;
        v201 = v228;
        v202 = v229;
        v203 = v231;
        a9[4] = v230;
        a9[5] = v203;
        a9[2] = v201;
        a9[3] = v202;
      }
      goto LABEL_272;
    }
    v111 = v212;
    v112 = v210;
    while (1)
    {
      while (1)
      {
        v113 = *a2;
        v114 = (_QWORD *)(*a2 + 40 * *v108 + 16);
        if (v110 >= v112)
          break;
        *(_QWORD *)v110 = *v114;
        v115 = v110 + 8;
        v116 = (_QWORD *)(v113 + 40 * *v108 + 24);
        if (v115 >= v112)
          goto LABEL_161;
LABEL_140:
        *(_QWORD *)v115 = *v116;
        v110 = v115 + 8;
        if (++v108 == v109)
          goto LABEL_199;
      }
      v117 = v110 - v111;
      v118 = (v110 - v111) >> 3;
      v119 = v118 + 1;
      if ((unint64_t)(v118 + 1) >> 61)
      {
        v115 = v110;
LABEL_282:
        v221 = v115;
        v222 = v112;
        __p = v111;
        sub_20E867F44();
      }
      v120 = v112;
      if ((v112 - v111) >> 2 > v119)
        v119 = (v112 - v111) >> 2;
      if ((unint64_t)(v112 - v111) >= 0x7FFFFFFFFFFFFFF8)
        v121 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v121 = v119;
      if (v121)
      {
        if (v121 >> 61)
        {
          v115 = v110;
LABEL_286:
          v221 = v115;
          v222 = v120;
          __p = v111;
          sub_20E877A38();
        }
        v122 = (char *)operator new(8 * v121);
        v123 = v110;
        v124 = &v122[8 * v118];
        *(_QWORD *)v124 = *v114;
        v115 = v124 + 8;
        v125 = v123 - v111;
        if (v123 == v111)
          goto LABEL_158;
      }
      else
      {
        v123 = v110;
        v122 = 0;
        v124 = (char *)(8 * v118);
        *(_QWORD *)(8 * v118) = *v114;
        v115 = (char *)(8 * v118 + 8);
        v125 = v123 - v111;
        if (v123 == v111)
          goto LABEL_158;
      }
      v126 = v125 - 8;
      if (v126 < 0x168)
      {
        v127 = v123;
        goto LABEL_157;
      }
      v139 = (v123 - 8 - v111) & 0xFFFFFFFFFFFFFFF8;
      if (&v122[v117 - 8 - v139] > &v122[v117 - 8])
      {
        v127 = v123;
        do
        {
LABEL_157:
          v128 = *((_QWORD *)v127 - 1);
          v127 -= 8;
          *((_QWORD *)v124 - 1) = v128;
          v124 -= 8;
        }
        while (v127 != v111);
        goto LABEL_158;
      }
      if (&v123[-v139 - 8] > v123 - 8)
      {
        v127 = v123;
        goto LABEL_157;
      }
      if ((unint64_t)(v123 - v122 - v117) < 0x20)
      {
        v127 = v123;
        goto LABEL_157;
      }
      v141 = (v126 >> 3) + 1;
      v142 = 8 * (v141 & 0x3FFFFFFFFFFFFFFCLL);
      v127 = &v123[-v142];
      v124 -= v142;
      v143 = &v122[8 * v118 - 16];
      v144 = v123 - 16;
      v145 = v141 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v146 = *(_OWORD *)v144;
        *((_OWORD *)v143 - 1) = *((_OWORD *)v144 - 1);
        *(_OWORD *)v143 = v146;
        v143 -= 32;
        v144 -= 32;
        v145 -= 4;
      }
      while (v145);
      if (v141 != (v141 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_157;
LABEL_158:
      v112 = &v122[8 * v121];
      if (v111)
      {
        operator delete(v111);
        v113 = *a2;
      }
      v111 = v124;
      v116 = (_QWORD *)(v113 + 40 * *v108 + 24);
      if (v115 < v112)
        goto LABEL_140;
LABEL_161:
      v129 = (v115 - v111) >> 3;
      v130 = v129 + 1;
      if ((unint64_t)(v129 + 1) >> 61)
        goto LABEL_282;
      if ((v112 - v111) >> 2 > v130)
        v130 = (v112 - v111) >> 2;
      if ((unint64_t)(v112 - v111) >= 0x7FFFFFFFFFFFFFF8)
        v131 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v131 = v130;
      if (v131)
      {
        v120 = v112;
        if (v131 >> 61)
          goto LABEL_286;
        v132 = operator new(8 * v131);
        v133 = &v132[8 * v129];
        *(_QWORD *)v133 = *v116;
        v110 = v133 + 8;
        v134 = v115 - v111;
        if (v115 == v111)
          goto LABEL_175;
      }
      else
      {
        v132 = 0;
        v133 = (char *)(8 * v129);
        *(_QWORD *)(8 * v129) = *v116;
        v110 = (char *)(8 * v129 + 8);
        v134 = v115 - v111;
        if (v115 == v111)
          goto LABEL_175;
      }
      v135 = v134 - 8;
      if (v135 >= 0x168)
      {
        v140 = (v115 - 8 - v111) & 0xFFFFFFFFFFFFFFF8;
        if (&v132[v115 - v111 - 8 - v140] > &v132[v115 - v111 - 8])
        {
          v136 = v115;
        }
        else if (&v115[-v140 - 8] > v115 - 8)
        {
          v136 = v115;
        }
        else if ((unint64_t)(v111 - v132) >= 0x20)
        {
          v147 = (v135 >> 3) + 1;
          v148 = 8 * (v147 & 0x3FFFFFFFFFFFFFFCLL);
          v136 = &v115[-v148];
          v133 -= v148;
          v149 = &v132[8 * v129 - 16];
          v150 = (__int128 *)(v115 - 16);
          v151 = v147 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v152 = *v150;
            *(v149 - 1) = *(v150 - 1);
            *v149 = v152;
            v149 -= 2;
            v150 -= 2;
            v151 -= 4;
          }
          while (v151);
          if (v147 == (v147 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_175;
        }
        else
        {
          v136 = v115;
        }
      }
      else
      {
        v136 = v115;
      }
      do
      {
        v137 = *((_QWORD *)v136 - 1);
        v136 -= 8;
        *((_QWORD *)v133 - 1) = v137;
        v133 -= 8;
      }
      while (v136 != v111);
LABEL_175:
      v138 = &v132[8 * v131];
      if (v111)
        operator delete(v111);
      v111 = v133;
      v112 = v138;
      if (++v108 == v109)
      {
LABEL_199:
        v221 = v110;
        goto LABEL_266;
      }
    }
  }
  if (a3 != 3)
  {
    if (a3 == 1)
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioframe.hpp", 843, (uint64_t)"", 0, (uint64_t)"Does not support Planar mode\n", 29, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioframe.hpp", 910, (uint64_t)"", 0, (uint64_t)"Invalid value for GeometryModel::TYPE", 37, (void (*)(void **))sub_21023DDB0);
LABEL_292:
    abort();
  }
  if (!*(_BYTE *)(a11 + 24)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioframe.hpp", 880, (uint64_t)"query_gravity_vec", 17, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| !*(_BYTE *)(a12 + 24)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioframe.hpp", 881, (uint64_t)"keyframe_gravity_vector", 23, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_292;
  }
  v236 = 0;
  v234 = 0u;
  v235 = 0u;
  v232 = 0u;
  v233 = 0u;
  v230 = 0u;
  v231 = 0u;
  v228 = 0u;
  v229 = 0u;
  v226 = 0u;
  v227 = 0u;
  v223 = 0;
  v224 = 0;
  v225 = 0;
  __p = 0;
  v221 = 0;
  v222 = 0;
  v13 = *(_QWORD *)(v12 + 80) - *(_QWORD *)(v12 + 72);
  if (v13)
  {
    v14 = 0xCCCCCCCCCCCCCCCDLL * (v13 >> 3);
    v15 = 2 * v14;
    if ((2 * v14) >> 61)
      goto LABEL_296;
    v16 = (char *)operator new(16 * v14);
    v17 = &v16[8 * v15];
    v223 = v16;
    v224 = v16;
    v225 = v17;
    v18 = a2[1] - *a2;
    v205 = (__int128 *)a12;
    v207 = (__int128 *)a11;
    if (v18)
    {
LABEL_10:
      v19 = 0xCCCCCCCCCCCCCCCDLL * (v18 >> 3);
      v20 = 2 * v19;
      if (!((2 * v19) >> 61))
      {
        __p = operator new(16 * v19);
        v221 = __p;
        v209 = (char *)__p + 8 * v20;
        v211 = (char *)__p;
        v222 = v209;
        v21 = *a4;
        v216 = a4[1];
        if (*a4 != v216)
        {
LABEL_12:
          v22 = v16;
          while (1)
          {
            while (1)
            {
              v23 = *(_QWORD *)(v12 + 72);
              v24 = (_QWORD *)(v23 + 40 * *v21 + 16);
              if (v16 >= v17)
                break;
              *(_QWORD *)v16 = *v24;
              v16 += 8;
              v25 = (_QWORD *)(v23 + 40 * *v21 + 24);
              if (v16 < v17)
                goto LABEL_13;
LABEL_32:
              v36 = (v16 - v22) >> 3;
              v37 = v36 + 1;
              if ((unint64_t)(v36 + 1) >> 61)
              {
LABEL_278:
                v224 = v16;
                v225 = v17;
                v223 = v22;
                sub_20E867F44();
              }
              if ((v17 - v22) >> 2 > v37)
                v37 = (v17 - v22) >> 2;
              if ((unint64_t)(v17 - v22) >= 0x7FFFFFFFFFFFFFF8)
                v38 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v38 = v37;
              if (v38)
              {
                if (v38 >> 61)
                {
LABEL_280:
                  v224 = v16;
                  v225 = v17;
                  v223 = v22;
                  sub_20E877A38();
                }
                v39 = operator new(8 * v38);
                v12 = a1;
                v40 = &v39[8 * v36];
                *(_QWORD *)v40 = *v25;
                v41 = (uint64_t)(v40 + 8);
                v42 = v16 - v22;
                if (v16 == v22)
                  goto LABEL_49;
              }
              else
              {
                v39 = 0;
                v40 = (char *)(8 * v36);
                *(_QWORD *)(8 * v36) = *v25;
                v41 = 8 * v36 + 8;
                v42 = v16 - v22;
                if (v16 == v22)
                  goto LABEL_49;
              }
              v43 = v42 - 8;
              if (v43 >= 0x168)
              {
                v53 = (v16 - 8 - v22) & 0xFFFFFFFFFFFFFFF8;
                if (&v39[v16 - v22 - 8 - v53] > &v39[v16 - v22 - 8])
                {
                  v44 = v16;
                }
                else if (&v16[-v53 - 8] > v16 - 8)
                {
                  v44 = v16;
                }
                else if ((unint64_t)(v22 - v39) >= 0x20)
                {
                  v54 = (v43 >> 3) + 1;
                  v55 = 8 * (v54 & 0x3FFFFFFFFFFFFFFCLL);
                  v44 = &v16[-v55];
                  v40 -= v55;
                  v56 = &v39[8 * v36 - 16];
                  v57 = (__int128 *)(v16 - 16);
                  v58 = v54 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v59 = *v57;
                    *(v56 - 1) = *(v57 - 1);
                    *v56 = v59;
                    v56 -= 2;
                    v57 -= 2;
                    v58 -= 4;
                  }
                  while (v58);
                  if (v54 == (v54 & 0x3FFFFFFFFFFFFFFCLL))
                    goto LABEL_49;
                }
                else
                {
                  v44 = v16;
                }
              }
              else
              {
                v44 = v16;
              }
              do
              {
                v45 = *((_QWORD *)v44 - 1);
                v44 -= 8;
                *((_QWORD *)v40 - 1) = v45;
                v40 -= 8;
              }
              while (v44 != v22);
LABEL_49:
              v17 = &v39[8 * v38];
              if (v22)
                operator delete(v22);
              v22 = v40;
              v16 = (char *)v41;
              if (++v21 == v216)
              {
LABEL_134:
                v224 = v16;
                goto LABEL_203;
              }
            }
            v26 = (v16 - v22) >> 3;
            v27 = v26 + 1;
            if ((unint64_t)(v26 + 1) >> 61)
              goto LABEL_278;
            if ((v17 - v22) >> 2 > v27)
              v27 = (v17 - v22) >> 2;
            if ((unint64_t)(v17 - v22) >= 0x7FFFFFFFFFFFFFF8)
              v28 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v28 = v27;
            if (v28)
            {
              if (v28 >> 61)
                goto LABEL_280;
              v29 = operator new(8 * v28);
              v30 = &v29[8 * v26];
              *(_QWORD *)v30 = *v24;
              v31 = (unint64_t)(v30 + 8);
              v32 = v16 - v22;
              if (v16 != v22)
              {
LABEL_26:
                v33 = v32 - 8;
                if (v33 < 0x168
                  || (v46 = (v16 - 8 - v22) & 0xFFFFFFFFFFFFFFF8, &v29[v16 - v22 - 8 - v46] > &v29[v16 - v22 - 8])
                  || &v16[-v46 - 8] > v16 - 8
                  || (unint64_t)(v22 - v29) < 0x20)
                {
                  v34 = v16;
                  v12 = a1;
                }
                else
                {
                  v47 = (v33 >> 3) + 1;
                  v48 = 8 * (v47 & 0x3FFFFFFFFFFFFFFCLL);
                  v34 = &v16[-v48];
                  v30 -= v48;
                  v49 = &v29[8 * v26 - 16];
                  v50 = (__int128 *)(v16 - 16);
                  v51 = v47 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v52 = *v50;
                    *(v49 - 1) = *(v50 - 1);
                    *v49 = v52;
                    v49 -= 2;
                    v50 -= 2;
                    v51 -= 4;
                  }
                  while (v51);
                  v12 = a1;
                  if (v47 == (v47 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_29:
                    v17 = &v29[8 * v28];
                    if (!v22)
                      goto LABEL_31;
LABEL_30:
                    operator delete(v22);
                    v23 = *(_QWORD *)(v12 + 72);
                    goto LABEL_31;
                  }
                }
                do
                {
                  v35 = *((_QWORD *)v34 - 1);
                  v34 -= 8;
                  *((_QWORD *)v30 - 1) = v35;
                  v30 -= 8;
                }
                while (v34 != v22);
                goto LABEL_29;
              }
            }
            else
            {
              v29 = 0;
              v30 = (char *)(8 * v26);
              *(_QWORD *)(8 * v26) = *v24;
              v31 = 8 * v26 + 8;
              v32 = v16 - v22;
              if (v16 != v22)
                goto LABEL_26;
            }
            v12 = a1;
            v17 = &v29[8 * v28];
            if (v22)
              goto LABEL_30;
LABEL_31:
            v22 = v30;
            v16 = (char *)v31;
            v25 = (_QWORD *)(v23 + 40 * *v21 + 24);
            if (v31 >= (unint64_t)v17)
              goto LABEL_32;
LABEL_13:
            *(_QWORD *)v16 = *v25;
            v16 += 8;
            if (++v21 == v216)
              goto LABEL_134;
          }
        }
        goto LABEL_202;
      }
LABEL_296:
      sub_20E867F44();
    }
  }
  else
  {
    v16 = 0;
    v17 = 0;
    v18 = a2[1] - *a2;
    v205 = (__int128 *)a12;
    v207 = (__int128 *)a11;
    if (v18)
      goto LABEL_10;
  }
  v209 = (char *)v18;
  v211 = 0;
  v21 = *a4;
  v216 = a4[1];
  if (*a4 != v216)
    goto LABEL_12;
LABEL_202:
  v22 = v16;
LABEL_203:
  v225 = v17;
  v223 = v22;
  v153 = *a5;
  v154 = a5[1];
  v155 = v211;
  if (*a5 != v154)
  {
    v156 = v211;
    v157 = v209;
    while (1)
    {
      while (1)
      {
        v158 = *a2;
        v159 = (_QWORD *)(*a2 + 40 * *v153 + 16);
        if (v155 >= v157)
          break;
        *(_QWORD *)v155 = *v159;
        v160 = v155 + 8;
        v161 = (_QWORD *)(v158 + 40 * *v153 + 24);
        if (v160 >= v157)
          goto LABEL_226;
LABEL_205:
        *(_QWORD *)v160 = *v161;
        v155 = v160 + 8;
        if (++v153 == v154)
          goto LABEL_264;
      }
      v162 = v155 - v156;
      v163 = (v155 - v156) >> 3;
      v164 = v163 + 1;
      if ((unint64_t)(v163 + 1) >> 61)
      {
        v160 = v155;
LABEL_284:
        v221 = v160;
        v222 = v157;
        __p = v156;
        sub_20E867F44();
      }
      if ((v157 - v156) >> 2 > v164)
        v164 = (v157 - v156) >> 2;
      if ((unint64_t)(v157 - v156) >= 0x7FFFFFFFFFFFFFF8)
        v165 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v165 = v164;
      if (v165)
      {
        if (v165 >> 61)
        {
          v160 = v155;
LABEL_288:
          v221 = v160;
          v222 = v157;
          __p = v156;
          sub_20E877A38();
        }
        v166 = (char *)operator new(8 * v165);
        v167 = v155;
        v168 = &v166[8 * v163];
        *(_QWORD *)v168 = *v159;
        v160 = v168 + 8;
        v169 = v167 - v156;
        if (v167 == v156)
          goto LABEL_223;
      }
      else
      {
        v167 = v155;
        v166 = 0;
        v168 = (char *)(8 * v163);
        *(_QWORD *)(8 * v163) = *v159;
        v160 = (char *)(8 * v163 + 8);
        v169 = v167 - v156;
        if (v167 == v156)
          goto LABEL_223;
      }
      v170 = v169 - 8;
      if (v170 < 0x168)
      {
        v171 = v167;
        goto LABEL_222;
      }
      v182 = (v167 - 8 - v156) & 0xFFFFFFFFFFFFFFF8;
      if (&v166[v162 - 8 - v182] > &v166[v162 - 8])
      {
        v171 = v167;
        do
        {
LABEL_222:
          v172 = *((_QWORD *)v171 - 1);
          v171 -= 8;
          *((_QWORD *)v168 - 1) = v172;
          v168 -= 8;
        }
        while (v171 != v156);
        goto LABEL_223;
      }
      if (&v167[-v182 - 8] > v167 - 8)
      {
        v171 = v167;
        goto LABEL_222;
      }
      if ((unint64_t)(v167 - v166 - v162) < 0x20)
      {
        v171 = v167;
        goto LABEL_222;
      }
      v184 = (v170 >> 3) + 1;
      v185 = 8 * (v184 & 0x3FFFFFFFFFFFFFFCLL);
      v171 = &v167[-v185];
      v168 -= v185;
      v186 = &v166[8 * v163 - 16];
      v187 = v167 - 16;
      v188 = v184 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v189 = *(_OWORD *)v187;
        *((_OWORD *)v186 - 1) = *((_OWORD *)v187 - 1);
        *(_OWORD *)v186 = v189;
        v186 -= 32;
        v187 -= 32;
        v188 -= 4;
      }
      while (v188);
      if (v184 != (v184 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_222;
LABEL_223:
      v157 = &v166[8 * v165];
      if (v156)
      {
        operator delete(v156);
        v158 = *a2;
      }
      v156 = v168;
      v161 = (_QWORD *)(v158 + 40 * *v153 + 24);
      if (v160 < v157)
        goto LABEL_205;
LABEL_226:
      v173 = (v160 - v156) >> 3;
      v174 = v173 + 1;
      if ((unint64_t)(v173 + 1) >> 61)
        goto LABEL_284;
      if ((v157 - v156) >> 2 > v174)
        v174 = (v157 - v156) >> 2;
      if ((unint64_t)(v157 - v156) >= 0x7FFFFFFFFFFFFFF8)
        v175 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v175 = v174;
      if (v175)
      {
        if (v175 >> 61)
          goto LABEL_288;
        v176 = operator new(8 * v175);
        v177 = &v176[8 * v173];
        *(_QWORD *)v177 = *v161;
        v155 = v177 + 8;
        v178 = v160 - v156;
        if (v160 == v156)
          goto LABEL_240;
      }
      else
      {
        v176 = 0;
        v177 = (char *)(8 * v173);
        *(_QWORD *)(8 * v173) = *v161;
        v155 = (char *)(8 * v173 + 8);
        v178 = v160 - v156;
        if (v160 == v156)
          goto LABEL_240;
      }
      v179 = v178 - 8;
      if (v179 >= 0x168)
      {
        v183 = (v160 - 8 - v156) & 0xFFFFFFFFFFFFFFF8;
        if (&v176[v160 - v156 - 8 - v183] > &v176[v160 - v156 - 8])
        {
          v180 = v160;
        }
        else if (&v160[-v183 - 8] > v160 - 8)
        {
          v180 = v160;
        }
        else if ((unint64_t)(v156 - v176) >= 0x20)
        {
          v190 = (v179 >> 3) + 1;
          v191 = 8 * (v190 & 0x3FFFFFFFFFFFFFFCLL);
          v180 = &v160[-v191];
          v177 -= v191;
          v192 = &v176[8 * v173 - 16];
          v193 = (__int128 *)(v160 - 16);
          v194 = v190 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v195 = *v193;
            *(v192 - 1) = *(v193 - 1);
            *v192 = v195;
            v192 -= 2;
            v193 -= 2;
            v194 -= 4;
          }
          while (v194);
          if (v190 == (v190 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_240;
        }
        else
        {
          v180 = v160;
        }
      }
      else
      {
        v180 = v160;
      }
      do
      {
        v181 = *((_QWORD *)v180 - 1);
        v180 -= 8;
        *((_QWORD *)v177 - 1) = v181;
        v177 -= 8;
      }
      while (v180 != v156);
LABEL_240:
      v157 = &v176[8 * v175];
      if (v156)
        operator delete(v156);
      v156 = v177;
      if (++v153 == v154)
      {
LABEL_264:
        v221 = v155;
        goto LABEL_271;
      }
    }
  }
  v156 = v211;
  v157 = v209;
LABEL_271:
  v222 = v157;
  __p = v156;
  v196 = sub_20EB88260((uint64_t *)&v223, (uint64_t *)&__p, a4, a5, v207, v205, 50, 100, 0.005, 50, a6, (uint64_t)&v232, (uint64_t)&v226);
LABEL_272:
  if (__p)
  {
    v221 = __p;
    operator delete(__p);
  }
  if (v223)
  {
    v224 = v223;
    operator delete(v223);
  }
  return v196;
}

void sub_20F244CB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28)
{
  if (__p)
    operator delete(__p);
  if (a26)
    operator delete(a26);
  _Unwind_Resume(exception_object);
}

char ***sub_20F244D44@<X0>(char ***result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *v4;
  unsigned int *v5;
  uint64_t v6;
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  char **v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v5 = (unsigned int *)*result;
  v4 = (unsigned int *)result[1];
  v15 = 0;
  v14 = 0uLL;
  v6 = (char *)v4 - (char *)v5;
  if (v4 == v5)
  {
    v13 = 0;
    v12 = 0uLL;
  }
  else
  {
    if ((unint64_t)v6 >= 0xFFFFFFFFFFFFFFDLL)
      sub_20ED343A8();
    *(_QWORD *)&v14 = operator new(16 * v6);
    *((_QWORD *)&v14 + 1) = v14;
    v15 = v14 + (v6 >> 2 << 6);
    v16 = (char **)&v14;
    do
    {
      v8 = (__int128 *)(*(_QWORD *)(a2 + 576) + ((unint64_t)*v5 << 6));
      v9 = v8[3];
      v11 = *v8;
      v10 = v8[1];
      v17[2] = v8[2];
      v17[3] = v9;
      v17[0] = v11;
      v17[1] = v10;
      result = sub_20F245D94(&v16, v17);
      ++v5;
    }
    while (v5 != v4);
    v12 = v14;
    v13 = v15;
  }
  *(_OWORD *)a3 = v12;
  *(_QWORD *)(a3 + 16) = v13;
  return result;
}

void sub_20F244E44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F244E64(unsigned int **a1, uint64_t *a2, _QWORD *a3, char **a4, char **a5, float a6, uint64_t a7, unsigned int **a8, char a9)
{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int128 *v28;
  uint64_t v29;
  __int128 v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  __int128 *v45;
  uint64_t v46;
  __int128 v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unsigned int *v55;
  unsigned int *v56;
  int8x16_t *v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unsigned int v66;
  int v67;
  unsigned int v69;
  BOOL v70;
  char *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  unsigned int **v77;
  char v78;
  uint64_t v79;
  unint64_t v81;
  uint64_t v83;
  unint64_t v84;
  void *__p;
  _BYTE *v86;
  uint64_t v87;

  a4[1] = *a4;
  a5[1] = *a5;
  v15 = a2[1] - *a2;
  v16 = v15 >> 6;
  v17 = *a4;
  if (v15 >> 6 <= (unint64_t)((a4[2] - *a4) >> 2))
    goto LABEL_13;
  if (v15 < 0)
    sub_20E867F44();
  v18 = a4[1];
  v19 = (char *)operator new((unint64_t)v15 >> 4);
  v20 = v18 - v17;
  v21 = &v19[(v18 - v17) & 0xFFFFFFFFFFFFFFFCLL];
  v22 = v21;
  if (v18 != v17)
  {
    if ((unint64_t)(v20 - 4) < 0x2C)
    {
      v22 = &v19[(v18 - v17) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_10:
        v31 = *((_DWORD *)v18 - 1);
        v18 -= 4;
        *((_DWORD *)v22 - 1) = v31;
        v22 -= 4;
      }
      while (v18 != v17);
      goto LABEL_11;
    }
    v22 = &v19[(v18 - v17) & 0xFFFFFFFFFFFFFFFCLL];
    if ((unint64_t)(&v18[-(v20 & 0xFFFFFFFFFFFFFFFCLL)] - v19) < 0x20)
      goto LABEL_10;
    v23 = v20 >> 2;
    v24 = ((unint64_t)(v20 - 4) >> 2) + 1;
    v25 = 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
    v26 = &v18[-v25];
    v22 = &v21[-v25];
    v27 = &v19[4 * v23 - 16];
    v28 = (__int128 *)(v18 - 16);
    v29 = v24 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v30 = *v28;
      *((_OWORD *)v27 - 1) = *(v28 - 1);
      *(_OWORD *)v27 = v30;
      v27 -= 32;
      v28 -= 2;
      v29 -= 8;
    }
    while (v29);
    v18 = v26;
    if (v24 != (v24 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_10;
  }
LABEL_11:
  *a4 = v22;
  a4[1] = v21;
  a4[2] = &v19[4 * v16];
  if (v17)
    operator delete(v17);
LABEL_13:
  v32 = a3[1] - *a3;
  v33 = v32 >> 6;
  v34 = *a5;
  if (v32 >> 6 <= (unint64_t)((a5[2] - *a5) >> 2))
    goto LABEL_25;
  if (v32 < 0)
    sub_20E867F44();
  v35 = a5[1];
  v36 = (char *)operator new((unint64_t)v32 >> 4);
  v37 = v35 - v34;
  v38 = &v36[(v35 - v34) & 0xFFFFFFFFFFFFFFFCLL];
  v39 = v38;
  if (v35 != v34)
  {
    if ((unint64_t)(v37 - 4) < 0x2C)
    {
      v39 = &v36[(v35 - v34) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_22:
        v48 = *((_DWORD *)v35 - 1);
        v35 -= 4;
        *((_DWORD *)v39 - 1) = v48;
        v39 -= 4;
      }
      while (v35 != v34);
      goto LABEL_23;
    }
    v39 = &v36[(v35 - v34) & 0xFFFFFFFFFFFFFFFCLL];
    if ((unint64_t)(&v35[-(v37 & 0xFFFFFFFFFFFFFFFCLL)] - v36) < 0x20)
      goto LABEL_22;
    v40 = v37 >> 2;
    v41 = ((unint64_t)(v37 - 4) >> 2) + 1;
    v42 = 4 * (v41 & 0x7FFFFFFFFFFFFFF8);
    v43 = &v35[-v42];
    v39 = &v38[-v42];
    v44 = &v36[4 * v40 - 16];
    v45 = (__int128 *)(v35 - 16);
    v46 = v41 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v47 = *v45;
      *((_OWORD *)v44 - 1) = *(v45 - 1);
      *(_OWORD *)v44 = v47;
      v44 -= 32;
      v45 -= 2;
      v46 -= 8;
    }
    while (v46);
    v35 = v43;
    if (v41 != (v41 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_22;
  }
LABEL_23:
  *a5 = v39;
  a5[1] = v38;
  a5[2] = &v36[4 * v33];
  if (v34)
    operator delete(v34);
LABEL_25:
  v77 = a8;
  v78 = a9;
  v79 = (uint64_t)a4;
  __p = 0;
  v86 = 0;
  v87 = 0;
  v50 = *a2;
  v49 = a2[1];
  v83 = 0xFFFFFFFF00000000;
  LOBYTE(v84) = 0;
  v51 = v49 - v50;
  if (v51)
    sub_20EDCFBAC(&__p, v51 >> 6, &v83);
  v52 = a3[1] - *a3;
  if (v52)
  {
    v53 = 0;
    v54 = v52 >> 6;
    if (v54 <= 1)
      v54 = 1;
    v81 = v54;
    do
    {
      v55 = *a1;
      v56 = a1[1];
      if (*a1 == v56)
      {
        LODWORD(v61) = -1;
        v59 = -1;
        v60 = -1;
      }
      else
      {
        v57 = (int8x16_t *)(*a3 + (v53 << 6));
        v58 = 0xFFFFFFFFLL;
        v59 = -1;
        v60 = -1;
        do
        {
          v62 = sub_20F245EB8(v55 + 8, (uint64_t)v57) % 0x3E8uLL;
          v63 = *v55;
          if (v62 >= v63
            || (v64 = *((_QWORD *)v55 + 1),
                v65 = (unint64_t)(*((_QWORD *)v55 + 2) - v64) >> 2,
                v66 = *(_DWORD *)(v64 + 4 * (v62 - 2 * v63 + v65)),
                v67 = v62 - v63 + v65,
                v66 == v67))
          {
            v61 = v58;
          }
          else
          {
            do
            {
              v61 = *a2 + ((unint64_t)v66 << 6);
              LODWORD(v61) = vaddlvq_u8((uint8x16_t)vaddq_s8(vaddq_s8(vcntq_s8(veorq_s8(*(int8x16_t *)(v61 + 16), v57[1])), vcntq_s8(veorq_s8(*(int8x16_t *)v61, *v57))), vaddq_s8(vcntq_s8(veorq_s8(*(int8x16_t *)(v61 + 32), v57[2])), vcntq_s8(veorq_s8(*(int8x16_t *)(v61 + 48), v57[3])))));
              if (v60 == v66 || v61 >= v59)
                v69 = v59;
              else
                v69 = v61;
              v70 = v61 >= v58;
              if (v61 >= v58)
                v61 = v58;
              else
                v61 = v61;
              if (v70)
                v59 = v69;
              else
                v59 = v58;
              if (!v70)
                v60 = v66;
              v66 = *(_DWORD *)(v64 + 4 * v66);
              LODWORD(v58) = v61;
            }
            while (v66 != v67);
          }
          v55 += 16;
          v58 = v61;
        }
        while (v55 != v56);
      }
      if ((float)((float)v59 * a6) > (float)v61)
      {
        v71 = (char *)__p + 12 * v60;
        if (!v71[8] || *((_DWORD *)v71 + 1) > v61)
        {
          v71[8] = 1;
          *(_QWORD *)v71 = v53 | ((unint64_t)v61 << 32);
        }
      }
      ++v53;
    }
    while (v53 != v81);
  }
  if (v78)
  {
    v72 = (_QWORD *)v79;
    sub_20EDCF560(v77, &__p, v79, (uint64_t)a5);
  }
  else
  {
    v83 = 0;
    v84 = 0xAAAAAAAAAAAAAAABLL * ((v86 - (_BYTE *)__p) >> 2);
    v72 = (_QWORD *)v79;
    sub_20EDCF87C(&v83, &__p, v79, (uint64_t)a5);
  }
  v75 = v72;
  v74 = *v72;
  v73 = v75[1];
  if (__p)
  {
    v86 = __p;
    operator delete(__p);
  }
  return (v73 - v74) >> 2;
}

void sub_20F245324(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F245348(unsigned int **a1, uint64_t *a2, _QWORD *a3, char **a4, char **a5, float a6, uint64_t a7, unsigned int **a8, char a9)
{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int128 *v28;
  uint64_t v29;
  __int128 v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  __int128 *v45;
  uint64_t v46;
  __int128 v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unsigned int *v55;
  unsigned int *v56;
  int8x16_t *v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unsigned int v66;
  int v67;
  unsigned int v69;
  BOOL v70;
  char **v71;
  char *v72;
  char *v73;
  char **v74;
  char *v75;
  char *v76;
  void *v77;
  char *v78;
  void *v79;
  void *v80;
  unsigned int **v82;
  char v83;
  unint64_t v85;
  void *__p;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  char *v91;
  uint64_t v92;

  a4[1] = *a4;
  a5[1] = *a5;
  v15 = a2[1] - *a2;
  v16 = v15 >> 6;
  v17 = *a4;
  if (v15 >> 6 <= (unint64_t)((a4[2] - *a4) >> 2))
    goto LABEL_13;
  if (v15 < 0)
    sub_20E867F44();
  v18 = a4[1];
  v19 = (char *)operator new((unint64_t)v15 >> 4);
  v20 = v18 - v17;
  v21 = &v19[(v18 - v17) & 0xFFFFFFFFFFFFFFFCLL];
  v22 = v21;
  if (v18 != v17)
  {
    if ((unint64_t)(v20 - 4) < 0x2C)
    {
      v22 = &v19[(v18 - v17) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_10:
        v31 = *((_DWORD *)v18 - 1);
        v18 -= 4;
        *((_DWORD *)v22 - 1) = v31;
        v22 -= 4;
      }
      while (v18 != v17);
      goto LABEL_11;
    }
    v22 = &v19[(v18 - v17) & 0xFFFFFFFFFFFFFFFCLL];
    if ((unint64_t)(&v18[-(v20 & 0xFFFFFFFFFFFFFFFCLL)] - v19) < 0x20)
      goto LABEL_10;
    v23 = v20 >> 2;
    v24 = ((unint64_t)(v20 - 4) >> 2) + 1;
    v25 = 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
    v26 = &v18[-v25];
    v22 = &v21[-v25];
    v27 = &v19[4 * v23 - 16];
    v28 = (__int128 *)(v18 - 16);
    v29 = v24 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v30 = *v28;
      *((_OWORD *)v27 - 1) = *(v28 - 1);
      *(_OWORD *)v27 = v30;
      v27 -= 32;
      v28 -= 2;
      v29 -= 8;
    }
    while (v29);
    v18 = v26;
    if (v24 != (v24 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_10;
  }
LABEL_11:
  *a4 = v22;
  a4[1] = v21;
  a4[2] = &v19[4 * v16];
  if (v17)
    operator delete(v17);
LABEL_13:
  v32 = a3[1] - *a3;
  v33 = v32 >> 6;
  v34 = *a5;
  if (v32 >> 6 <= (unint64_t)((a5[2] - *a5) >> 2))
    goto LABEL_25;
  if (v32 < 0)
    sub_20E867F44();
  v35 = a5[1];
  v36 = (char *)operator new((unint64_t)v32 >> 4);
  v37 = v35 - v34;
  v38 = &v36[(v35 - v34) & 0xFFFFFFFFFFFFFFFCLL];
  v39 = v38;
  if (v35 != v34)
  {
    if ((unint64_t)(v37 - 4) < 0x2C)
    {
      v39 = &v36[(v35 - v34) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_22:
        v48 = *((_DWORD *)v35 - 1);
        v35 -= 4;
        *((_DWORD *)v39 - 1) = v48;
        v39 -= 4;
      }
      while (v35 != v34);
      goto LABEL_23;
    }
    v39 = &v36[(v35 - v34) & 0xFFFFFFFFFFFFFFFCLL];
    if ((unint64_t)(&v35[-(v37 & 0xFFFFFFFFFFFFFFFCLL)] - v36) < 0x20)
      goto LABEL_22;
    v40 = v37 >> 2;
    v41 = ((unint64_t)(v37 - 4) >> 2) + 1;
    v42 = 4 * (v41 & 0x7FFFFFFFFFFFFFF8);
    v43 = &v35[-v42];
    v39 = &v38[-v42];
    v44 = &v36[4 * v40 - 16];
    v45 = (__int128 *)(v35 - 16);
    v46 = v41 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v47 = *v45;
      *((_OWORD *)v44 - 1) = *(v45 - 1);
      *(_OWORD *)v44 = v47;
      v44 -= 32;
      v45 -= 2;
      v46 -= 8;
    }
    while (v46);
    v35 = v43;
    if (v41 != (v41 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_22;
  }
LABEL_23:
  *a5 = v39;
  a5[1] = v38;
  a5[2] = &v36[4 * v33];
  if (v34)
    operator delete(v34);
LABEL_25:
  v83 = a9;
  v82 = a8;
  v90 = 0;
  v91 = 0;
  v92 = 0;
  v50 = *a2;
  v49 = a2[1];
  __p = 0;
  v88 = 0;
  v89 = 0;
  v51 = v49 - v50;
  if (v51)
  {
    sub_20EDD0E84((char **)&v90, v51 >> 6, (uint64_t)&__p);
    if (__p)
    {
      v88 = (uint64_t)__p;
      operator delete(__p);
    }
  }
  v52 = a3[1] - *a3;
  if (v52)
  {
    v53 = 0;
    v54 = v52 >> 6;
    if (v54 <= 1)
      v54 = 1;
    v85 = v54;
    do
    {
      v55 = *a1;
      v56 = a1[1];
      if (*a1 == v56)
      {
        LODWORD(v61) = -1;
        v59 = -1;
        v60 = -1;
      }
      else
      {
        v57 = (int8x16_t *)(*a3 + (v53 << 6));
        v58 = 0xFFFFFFFFLL;
        v59 = -1;
        v60 = -1;
        do
        {
          v62 = sub_20F245EB8(v55 + 8, (uint64_t)v57) % 0x3E8uLL;
          v63 = *v55;
          if (v62 >= v63
            || (v64 = *((_QWORD *)v55 + 1),
                v65 = (unint64_t)(*((_QWORD *)v55 + 2) - v64) >> 2,
                v66 = *(_DWORD *)(v64 + 4 * (v62 - 2 * v63 + v65)),
                v67 = v62 - v63 + v65,
                v66 == v67))
          {
            v61 = v58;
          }
          else
          {
            do
            {
              v61 = *a2 + ((unint64_t)v66 << 6);
              LODWORD(v61) = vaddlvq_u8((uint8x16_t)vaddq_s8(vaddq_s8(vcntq_s8(veorq_s8(*(int8x16_t *)(v61 + 16), v57[1])), vcntq_s8(veorq_s8(*(int8x16_t *)v61, *v57))), vaddq_s8(vcntq_s8(veorq_s8(*(int8x16_t *)(v61 + 32), v57[2])), vcntq_s8(veorq_s8(*(int8x16_t *)(v61 + 48), v57[3])))));
              if (v60 == v66 || v61 >= v59)
                v69 = v59;
              else
                v69 = v61;
              v70 = v61 >= v58;
              if (v61 >= v58)
                v61 = v58;
              else
                v61 = v61;
              if (v70)
                v59 = v69;
              else
                v59 = v58;
              if (!v70)
                v60 = v66;
              v66 = *(_DWORD *)(v64 + 4 * v66);
              LODWORD(v58) = v61;
            }
            while (v66 != v67);
          }
          v55 += 16;
          v58 = v61;
        }
        while (v55 != v56);
      }
      if ((float)((float)v59 * a6) > (float)v61)
      {
        __p = (void *)__PAIR64__(v61, v53);
        sub_20EDD11A4((void **)v90 + 4 * v60, &__p);
      }
      ++v53;
    }
    while (v53 != v85);
  }
  if (v83)
  {
    v71 = a4;
    sub_20EDD0594(v82, &v90, (uint64_t)a4, a5);
  }
  else
  {
    __p = 0;
    v88 = (v91 - (_BYTE *)v90) >> 5;
    v71 = a4;
    sub_20EDD09E0((uint64_t *)&__p, &v90, (uint64_t)a4, (uint64_t)a5);
  }
  v74 = v71;
  v73 = *v71;
  v72 = v74[1];
  v75 = (char *)v90;
  if (v90)
  {
    v76 = v91;
    v77 = v90;
    if (v91 != v90)
    {
      v78 = v91;
      do
      {
        v80 = (void *)*((_QWORD *)v78 - 4);
        v78 -= 32;
        v79 = v80;
        if (v80)
        {
          *((_QWORD *)v76 - 3) = v79;
          operator delete(v79);
        }
        v76 = v78;
      }
      while (v78 != v75);
      v77 = v90;
    }
    v91 = v75;
    operator delete(v77);
  }
  return (v72 - v73) >> 2;
}

void sub_20F24582C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  sub_20EDD0E10(&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_20F24586C(unsigned int **a1, uint64_t *a2, _QWORD *a3, char **a4, char **a5, uint64_t a6, unsigned int **a7, char a8, float a9)
{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int128 *v28;
  uint64_t v29;
  __int128 v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  __int128 *v45;
  uint64_t v46;
  __int128 v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unsigned int *v55;
  unsigned int *v56;
  int8x16_t *v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unsigned int v66;
  int v67;
  int8x16_t *v68;
  unsigned int v69;
  unsigned int v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  char *v76;
  char *v77;
  void *v78;
  char *v79;
  void *v80;
  void *v81;
  unsigned int **v83;
  uint64_t v84;
  unint64_t v87;
  void *__p;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  char *v94;
  uint64_t v95;

  a4[1] = *a4;
  a5[1] = *a5;
  v15 = a2[1] - *a2;
  v16 = v15 >> 6;
  v17 = *a4;
  if (v15 >> 6 <= (unint64_t)((a4[2] - *a4) >> 2))
    goto LABEL_13;
  if (v15 < 0)
    sub_20E867F44();
  v18 = a4[1];
  v19 = (char *)operator new((unint64_t)v15 >> 4);
  v20 = v18 - v17;
  v21 = &v19[(v18 - v17) & 0xFFFFFFFFFFFFFFFCLL];
  v22 = v21;
  if (v18 != v17)
  {
    if ((unint64_t)(v20 - 4) < 0x2C)
    {
      v22 = &v19[(v18 - v17) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_10:
        v31 = *((_DWORD *)v18 - 1);
        v18 -= 4;
        *((_DWORD *)v22 - 1) = v31;
        v22 -= 4;
      }
      while (v18 != v17);
      goto LABEL_11;
    }
    v22 = &v19[(v18 - v17) & 0xFFFFFFFFFFFFFFFCLL];
    if ((unint64_t)(&v18[-(v20 & 0xFFFFFFFFFFFFFFFCLL)] - v19) < 0x20)
      goto LABEL_10;
    v23 = v20 >> 2;
    v24 = ((unint64_t)(v20 - 4) >> 2) + 1;
    v25 = 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
    v26 = &v18[-v25];
    v22 = &v21[-v25];
    v27 = &v19[4 * v23 - 16];
    v28 = (__int128 *)(v18 - 16);
    v29 = v24 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v30 = *v28;
      *((_OWORD *)v27 - 1) = *(v28 - 1);
      *(_OWORD *)v27 = v30;
      v27 -= 32;
      v28 -= 2;
      v29 -= 8;
    }
    while (v29);
    v18 = v26;
    if (v24 != (v24 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_10;
  }
LABEL_11:
  *a4 = v22;
  a4[1] = v21;
  a4[2] = &v19[4 * v16];
  if (v17)
    operator delete(v17);
LABEL_13:
  v32 = a3[1] - *a3;
  v33 = v32 >> 6;
  v34 = *a5;
  if (v32 >> 6 <= (unint64_t)((a5[2] - *a5) >> 2))
    goto LABEL_25;
  if (v32 < 0)
    sub_20E867F44();
  v35 = a5[1];
  v36 = (char *)operator new((unint64_t)v32 >> 4);
  v37 = v35 - v34;
  v38 = &v36[(v35 - v34) & 0xFFFFFFFFFFFFFFFCLL];
  v39 = v38;
  if (v35 != v34)
  {
    if ((unint64_t)(v37 - 4) < 0x2C)
    {
      v39 = &v36[(v35 - v34) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_22:
        v48 = *((_DWORD *)v35 - 1);
        v35 -= 4;
        *((_DWORD *)v39 - 1) = v48;
        v39 -= 4;
      }
      while (v35 != v34);
      goto LABEL_23;
    }
    v39 = &v36[(v35 - v34) & 0xFFFFFFFFFFFFFFFCLL];
    if ((unint64_t)(&v35[-(v37 & 0xFFFFFFFFFFFFFFFCLL)] - v36) < 0x20)
      goto LABEL_22;
    v40 = v37 >> 2;
    v41 = ((unint64_t)(v37 - 4) >> 2) + 1;
    v42 = 4 * (v41 & 0x7FFFFFFFFFFFFFF8);
    v43 = &v35[-v42];
    v39 = &v38[-v42];
    v44 = &v36[4 * v40 - 16];
    v45 = (__int128 *)(v35 - 16);
    v46 = v41 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v47 = *v45;
      *((_OWORD *)v44 - 1) = *(v45 - 1);
      *(_OWORD *)v44 = v47;
      v44 -= 32;
      v45 -= 2;
      v46 -= 8;
    }
    while (v46);
    v35 = v43;
    if (v41 != (v41 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_22;
  }
LABEL_23:
  *a5 = v39;
  a5[1] = v38;
  a5[2] = &v36[4 * v33];
  if (v34)
    operator delete(v34);
LABEL_25:
  v93 = 0;
  v94 = 0;
  v95 = 0;
  v50 = *a2;
  v49 = a2[1];
  __p = 0;
  v90 = 0;
  v91 = 0;
  v92 = a6;
  v51 = v49 - v50;
  if (v51)
  {
    sub_20EDD1DC0((char **)&v93, v51 >> 6, (uint64_t)&__p);
    if (__p)
    {
      v90 = (unint64_t)__p;
      operator delete(__p);
    }
  }
  v83 = a7;
  v84 = (uint64_t)a4;
  v52 = a3[1] - *a3;
  if (v52)
  {
    v53 = 0;
    v54 = v52 >> 6;
    if (v54 <= 1)
      v54 = 1;
    v87 = v54;
    do
    {
      v55 = *a1;
      v56 = a1[1];
      if (*a1 == v56)
      {
        LODWORD(v61) = -1;
        v59 = -1;
        v60 = -1;
      }
      else
      {
        v57 = (int8x16_t *)(*a3 + (v53 << 6));
        v58 = 0xFFFFFFFFLL;
        v59 = -1;
        v60 = -1;
        do
        {
          v62 = sub_20F245EB8(v55 + 8, (uint64_t)v57) % 0x3E8uLL;
          v63 = *v55;
          if (v62 >= v63
            || (v64 = *((_QWORD *)v55 + 1),
                v65 = (unint64_t)(*((_QWORD *)v55 + 2) - v64) >> 2,
                v66 = *(_DWORD *)(v64 + 4 * (v62 - 2 * v63 + v65)),
                v67 = v62 - v63 + v65,
                v66 == v67))
          {
            v61 = v58;
          }
          else
          {
            do
            {
              v68 = (int8x16_t *)(*a2 + ((unint64_t)v66 << 6));
              v69 = vaddlvq_u8((uint8x16_t)vaddq_s8(vaddq_s8(vcntq_s8(veorq_s8(v68[1], v57[1])), vcntq_s8(veorq_s8(*v68, *v57))), vaddq_s8(vcntq_s8(veorq_s8(v68[2], v57[2])), vcntq_s8(veorq_s8(v68[3], v57[3])))));
              if (v60 == v66 || v69 >= v59)
                v71 = v59;
              else
                v71 = v69;
              if (v69 >= v58)
                v61 = v58;
              else
                v61 = v69;
              if (v69 >= v58)
                v59 = v71;
              else
                v59 = v58;
              if (v69 < v58)
                v60 = v66;
              v66 = *(_DWORD *)(v64 + 4 * v66);
              LODWORD(v58) = v61;
            }
            while (v66 != v67);
          }
          v55 += 16;
          v58 = v61;
        }
        while (v55 != v56);
      }
      if ((float)((float)v59 * a9) > (float)v61)
        sub_20EDD1370((uint64_t)v93 + 40 * v60, v61, v53);
      ++v53;
    }
    while (v53 != v87);
  }
  if (a8)
  {
    v72 = (_QWORD *)v84;
    sub_20EDD14C0(v83, &v93, v84, a5);
  }
  else
  {
    __p = 0;
    v90 = 0xCCCCCCCCCCCCCCCDLL * ((v94 - (_BYTE *)v93) >> 3);
    v72 = (_QWORD *)v84;
    sub_20EDD1910((uint64_t *)&__p, &v93, v84, a5);
  }
  v75 = v72;
  v74 = *v72;
  v73 = v75[1];
  v76 = (char *)v93;
  if (v93)
  {
    v77 = v94;
    v78 = v93;
    if (v94 != v93)
    {
      v79 = v94;
      do
      {
        v81 = (void *)*((_QWORD *)v79 - 5);
        v79 -= 40;
        v80 = v81;
        if (v81)
        {
          *((_QWORD *)v77 - 4) = v80;
          operator delete(v80);
        }
        v77 = v79;
      }
      while (v79 != v76);
      v78 = v93;
    }
    v94 = v76;
    operator delete(v78);
  }
  return (v73 - v74) >> 2;
}

void sub_20F245D54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  sub_20EDD1D4C(&a22);
  _Unwind_Resume(a1);
}

char ***sub_20F245D94(char ***a1, _OWORD *a2)
{
  char **v4;
  unint64_t v5;
  char *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v4 = *a1;
  v6 = (*a1)[1];
  v5 = (unint64_t)(*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    v11 = *v4;
    v12 = (v6 - *v4) >> 6;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 58)
      sub_20ED343A8();
    v14 = v5 - (_QWORD)v11;
    if (v14 >> 5 > v13)
      v13 = v14 >> 5;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFC0)
      v15 = 0x3FFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 >> 58)
        sub_20E877A38();
      v16 = (char *)operator new(v15 << 6);
    }
    else
    {
      v16 = 0;
    }
    v17 = &v16[64 * v12];
    v18 = a2[1];
    *(_OWORD *)v17 = *a2;
    *((_OWORD *)v17 + 1) = v18;
    v19 = a2[3];
    *((_OWORD *)v17 + 2) = a2[2];
    *((_OWORD *)v17 + 3) = v19;
    v10 = v17 + 64;
    if (v6 != v11)
    {
      do
      {
        v20 = *((_OWORD *)v6 - 4);
        v21 = *((_OWORD *)v6 - 3);
        v22 = *((_OWORD *)v6 - 1);
        *((_OWORD *)v17 - 2) = *((_OWORD *)v6 - 2);
        *((_OWORD *)v17 - 1) = v22;
        *((_OWORD *)v17 - 4) = v20;
        *((_OWORD *)v17 - 3) = v21;
        v17 -= 64;
        v6 -= 64;
      }
      while (v6 != v11);
      v6 = *v4;
    }
    *v4 = v17;
    v4[1] = v10;
    v4[2] = &v16[64 * v15];
    if (v6)
      operator delete(v6);
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    v9 = a2[3];
    *((_OWORD *)v6 + 2) = a2[2];
    *((_OWORD *)v6 + 3) = v9;
    *(_OWORD *)v6 = v7;
    *((_OWORD *)v6 + 1) = v8;
    v10 = v6 + 64;
  }
  v4[1] = v10;
  return a1;
}

uint64_t sub_20F245EB8(_DWORD *a1, uint64_t a2)
{
  int v2;
  unsigned int v3;
  int v5;

  v2 = a1[6];
  if (v2 == 1)
  {
    v5 = ((*(unsigned __int8 *)(a2 + *(unsigned __int8 *)(*(_QWORD *)a1 + 2)) >> *(_BYTE *)(*(_QWORD *)a1 + 3)) | (*(unsigned __int8 *)(a2 + **(unsigned __int8 **)a1) >> *(_BYTE *)(*(_QWORD *)a1 + 1))) & 1 | (2 * (((*(unsigned __int8 *)(a2 + *(unsigned __int8 *)(*(_QWORD *)a1 + 6)) >> *(_BYTE *)(*(_QWORD *)a1 + 7)) | (*(unsigned __int8 *)(a2 + *(unsigned __int8 *)(*(_QWORD *)a1 + 4)) >> *(_BYTE *)(*(_QWORD *)a1 + 5))) & 1)) & 0xF3 | (4 * (((*(unsigned __int8 *)(a2 + *(unsigned __int8 *)(*(_QWORD *)a1 + 10)) >> *(_BYTE *)(*(_QWORD *)a1 + 11)) | (*(unsigned __int8 *)(a2 + *(unsigned __int8 *)(*(_QWORD *)a1 + 8)) >> *(_BYTE *)(*(_QWORD *)a1 + 9))) & 1)) & 0xF7 | (8 * (((*(unsigned __int8 *)(a2 + *(unsigned __int8 *)(*(_QWORD *)a1 + 14)) >> *(_BYTE *)(*(_QWORD *)a1 + 15)) | (*(unsigned __int8 *)(a2 + *(unsigned __int8 *)(*(_QWORD *)a1 + 12)) >> *(_BYTE *)(*(_QWORD *)a1 + 13))) & 1));
    return v5 & 0xFFFFFF8F | (16
                            * (((*(unsigned __int8 *)(a2 + *(unsigned __int8 *)(*(_QWORD *)a1 + 18)) >> *(_BYTE *)(*(_QWORD *)a1 + 19)) | (*(unsigned __int8 *)(a2 + *(unsigned __int8 *)(*(_QWORD *)a1 + 16)) >> *(_BYTE *)(*(_QWORD *)a1 + 17))) & 1)) & 0x9F | (32 * (((*(unsigned __int8 *)(a2 + *(unsigned __int8 *)(*(_QWORD *)a1 + 22)) >> *(_BYTE *)(*(_QWORD *)a1 + 23)) | (*(unsigned __int8 *)(a2 + *(unsigned __int8 *)(*(_QWORD *)a1 + 20)) >> *(_BYTE *)(*(_QWORD *)a1 + 21))) & 1)) & 0xBF | ((((*(unsigned __int8 *)(a2 + *(unsigned __int8 *)(*(_QWORD *)a1 + 26)) >> *(_BYTE *)(*(_QWORD *)a1 + 27)) | (*(unsigned __int8 *)(a2 + *(unsigned __int8 *)(*(_QWORD *)a1 + 24)) >> *(_BYTE *)(*(_QWORD *)a1 + 25))) & 1) << 6);
  }
  else if (v2)
  {
    return 0;
  }
  else
  {
    v3 = (*(unsigned __int8 *)(a2 + **(unsigned __int8 **)a1) >> *(_BYTE *)(*(_QWORD *)a1 + 1)) & 1 | (2 * ((*(unsigned __int8 *)(a2 + *(unsigned __int8 *)(*(_QWORD *)a1 + 2)) >> *(_BYTE *)(*(_QWORD *)a1 + 3)) & 1)) & 0xFFFFFF83 | (4 * ((*(unsigned __int8 *)(a2 + *(unsigned __int8 *)(*(_QWORD *)a1 + 4)) >> *(_BYTE *)(*(_QWORD *)a1 + 5)) & 1)) & 0xFFFFFF87 | (8 * ((*(unsigned __int8 *)(a2 + *(unsigned __int8 *)(*(_QWORD *)a1 + 6)) >> *(_BYTE *)(*(_QWORD *)a1 + 7)) & 1)) & 0xFFFFFF8F | (16 * ((*(unsigned __int8 *)(a2 + *(unsigned __int8 *)(*(_QWORD *)a1 + 8)) >> *(_BYTE *)(*(_QWORD *)a1 + 9)) & 1)) & 0xFFFFFF9F | (32 * ((*(unsigned __int8 *)(a2 + *(unsigned __int8 *)(*(_QWORD *)a1 + 10)) >> *(_BYTE *)(*(_QWORD *)a1 + 11)) & 1)) & 0xFFFFFFBF | (((*(unsigned __int8 *)(a2 + *(unsigned __int8 *)(*(_QWORD *)a1 + 12)) >> *(_BYTE *)(*(_QWORD *)a1 + 13)) & 1) << 6);
    return v3 | (((*(unsigned __int8 *)(a2 + *(unsigned __int8 *)(*(_QWORD *)a1 + 14)) >> *(_BYTE *)(*(_QWORD *)a1 + 15)) & 1) << 7) | (((*(unsigned __int8 *)(a2 + *(unsigned __int8 *)(*(_QWORD *)a1 + 16)) >> *(_BYTE *)(*(_QWORD *)a1 + 17)) & 1) << 8) | (((*(unsigned __int8 *)(a2 + *(unsigned __int8 *)(*(_QWORD *)a1 + 18)) >> *(_BYTE *)(*(_QWORD *)a1 + 19)) & 1) << 9) | (((*(unsigned __int8 *)(a2 + *(unsigned __int8 *)(*(_QWORD *)a1 + 20)) >> *(_BYTE *)(*(_QWORD *)a1 + 21)) & 1) << 10) | (((*(unsigned __int8 *)(a2 + *(unsigned __int8 *)(*(_QWORD *)a1 + 22)) >> *(_BYTE *)(*(_QWORD *)a1 + 23)) & 1) << 11) | (((*(unsigned __int8 *)(a2 + *(unsigned __int8 *)(*(_QWORD *)a1 + 24)) >> *(_BYTE *)(*(_QWORD *)a1 + 25)) & 1) << 12) | (((*(unsigned __int8 *)(a2 + *(unsigned __int8 *)(*(_QWORD *)a1 + 26)) >> *(_BYTE *)(*(_QWORD *)a1 + 27)) & 1) << 13) | (((*(unsigned __int8 *)(a2 + *(unsigned __int8 *)(*(_QWORD *)a1 + 28)) >> *(_BYTE *)(*(_QWORD *)a1 + 29)) & 1) << 14);
  }
}

char ***sub_20F24614C@<X0>(char ***result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *v4;
  unsigned int *v5;
  uint64_t v6;
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  char **v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v5 = (unsigned int *)*result;
  v4 = (unsigned int *)result[1];
  v15 = 0;
  v14 = 0uLL;
  v6 = (char *)v4 - (char *)v5;
  if (v4 == v5)
  {
    v13 = 0;
    v12 = 0uLL;
  }
  else
  {
    if ((unint64_t)v6 >= 0xFFFFFFFFFFFFFFDLL)
      sub_20ED343A8();
    *(_QWORD *)&v14 = operator new(16 * v6);
    *((_QWORD *)&v14 + 1) = v14;
    v15 = v14 + (v6 >> 2 << 6);
    v16 = (char **)&v14;
    do
    {
      v8 = (__int128 *)(*(_QWORD *)(a2 + 616) + ((unint64_t)*v5 << 6));
      v9 = v8[3];
      v11 = *v8;
      v10 = v8[1];
      v17[2] = v8[2];
      v17[3] = v9;
      v17[0] = v11;
      v17[1] = v10;
      result = sub_20F245D94(&v16, v17);
      ++v5;
    }
    while (v5 != v4);
    v12 = v14;
    v13 = v15;
  }
  *(_OWORD *)a3 = v12;
  *(_QWORD *)(a3 + 16) = v13;
  return result;
}

void sub_20F24624C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F24626C(uint64_t *a1, uint64_t *a2, _QWORD *a3, char **a4, char **a5, float a6, uint64_t a7, unsigned int **a8, char a9)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int128 *v28;
  uint64_t v29;
  __int128 v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  __int128 *v45;
  uint64_t v46;
  __int128 v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  int8x16_t *v56;
  BOOL v57;
  uint64_t *v64;
  uint64_t *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  int8x16_t *v69;
  unsigned __int16 v70;
  char *v71;
  uint64_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  uint64_t *v77;
  unsigned int *v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  unsigned int v83;
  char *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v90;
  uint64_t v92;
  uint64_t v94;
  unint64_t v95;
  unsigned int v96;
  unsigned int v97;
  char v98;
  void *__p;
  _BYTE *v100;
  uint64_t v101;

  a4[1] = *a4;
  a5[1] = *a5;
  v14 = a2[1] - *a2;
  v15 = v14 >> 6;
  v16 = *a4;
  v17 = a1;
  if (v14 >> 6 <= (unint64_t)((a4[2] - *a4) >> 2))
    goto LABEL_13;
  if (v14 < 0)
    sub_20E867F44();
  v18 = a4[1];
  v19 = (char *)operator new((unint64_t)v14 >> 4);
  v20 = v18 - v16;
  v21 = &v19[(v18 - v16) & 0xFFFFFFFFFFFFFFFCLL];
  v22 = v21;
  if (v18 != v16)
  {
    if ((unint64_t)(v20 - 4) < 0x2C)
    {
      v22 = &v19[(v18 - v16) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_10:
        v31 = *((_DWORD *)v18 - 1);
        v18 -= 4;
        *((_DWORD *)v22 - 1) = v31;
        v22 -= 4;
      }
      while (v18 != v16);
      goto LABEL_11;
    }
    v22 = &v19[(v18 - v16) & 0xFFFFFFFFFFFFFFFCLL];
    if ((unint64_t)(&v18[-(v20 & 0xFFFFFFFFFFFFFFFCLL)] - v19) < 0x20)
      goto LABEL_10;
    v23 = v20 >> 2;
    v24 = ((unint64_t)(v20 - 4) >> 2) + 1;
    v25 = 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
    v26 = &v18[-v25];
    v22 = &v21[-v25];
    v27 = &v19[4 * v23 - 16];
    v28 = (__int128 *)(v18 - 16);
    v29 = v24 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v30 = *v28;
      *((_OWORD *)v27 - 1) = *(v28 - 1);
      *(_OWORD *)v27 = v30;
      v27 -= 32;
      v28 -= 2;
      v29 -= 8;
    }
    while (v29);
    v18 = v26;
    if (v24 != (v24 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_10;
  }
LABEL_11:
  *a4 = v22;
  a4[1] = v21;
  a4[2] = &v19[4 * v15];
  a1 = v17;
  if (v16)
  {
    operator delete(v16);
    a1 = v17;
  }
LABEL_13:
  v32 = a3[1] - *a3;
  v33 = v32 >> 6;
  v34 = *a5;
  if (v32 >> 6 <= (unint64_t)((a5[2] - *a5) >> 2))
    goto LABEL_25;
  if (v32 < 0)
    sub_20E867F44();
  v35 = a5[1];
  v36 = (char *)operator new((unint64_t)v32 >> 4);
  v37 = v35 - v34;
  v38 = &v36[(v35 - v34) & 0xFFFFFFFFFFFFFFFCLL];
  v39 = v38;
  if (v35 != v34)
  {
    if ((unint64_t)(v37 - 4) < 0x2C)
    {
      v39 = &v36[(v35 - v34) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_22:
        v48 = *((_DWORD *)v35 - 1);
        v35 -= 4;
        *((_DWORD *)v39 - 1) = v48;
        v39 -= 4;
      }
      while (v35 != v34);
      goto LABEL_23;
    }
    v39 = &v36[(v35 - v34) & 0xFFFFFFFFFFFFFFFCLL];
    if ((unint64_t)(&v35[-(v37 & 0xFFFFFFFFFFFFFFFCLL)] - v36) < 0x20)
      goto LABEL_22;
    v40 = v37 >> 2;
    v41 = ((unint64_t)(v37 - 4) >> 2) + 1;
    v42 = 4 * (v41 & 0x7FFFFFFFFFFFFFF8);
    v43 = &v35[-v42];
    v39 = &v38[-v42];
    v44 = &v36[4 * v40 - 16];
    v45 = (__int128 *)(v35 - 16);
    v46 = v41 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v47 = *v45;
      *((_OWORD *)v44 - 1) = *(v45 - 1);
      *(_OWORD *)v44 = v47;
      v44 -= 32;
      v45 -= 2;
      v46 -= 8;
    }
    while (v46);
    v35 = v43;
    if (v41 != (v41 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_22;
  }
LABEL_23:
  *a5 = v39;
  a5[1] = v38;
  a5[2] = &v36[4 * v33];
  a1 = v17;
  if (v34)
  {
    operator delete(v34);
    a1 = v17;
  }
LABEL_25:
  v90 = (uint64_t)a4;
  __p = 0;
  v100 = 0;
  v101 = 0;
  v50 = *a2;
  v49 = a2[1];
  v94 = 0xFFFFFFFF00000000;
  LOBYTE(v95) = 0;
  v51 = v49 - v50;
  if (v51)
  {
    sub_20EDCFBAC(&__p, v51 >> 6, &v94);
    a1 = v17;
  }
  v52 = a3[1] - *a3;
  if (v52)
  {
    v53 = 0;
    v54 = v52 >> 6;
    if (v54 <= 1)
      v55 = 1;
    else
      v55 = v54;
    v92 = v55;
    do
    {
      v56 = (int8x16_t *)(*a3 + (v53 << 6));
      if (v56->i64[0])
        v57 = 0;
      else
        v57 = v56->i64[1] == 0;
      if (v57
        && v56[1].i64[0] == 0
        && v56[1].i64[1] == 0
        && v56[2].i64[0] == 0
        && v56[2].i64[1] == 0
        && v56[3].i64[0] == 0
        && v56[3].i64[1] == 0)
      {
        goto LABEL_33;
      }
      v64 = a1;
      sub_20EDCF384(a1, (int8x16_t *)(*a3 + (v53 << 6)));
      v65 = (uint64_t *)v64[2];
      v66 = (_QWORD *)v64[3];
      v67 = v66 - v65;
      a1 = v64;
      if (!v67)
        goto LABEL_33;
      if (v67 == 1)
      {
        v68 = *v65;
        v69 = (int8x16_t *)(*a2 + (*v65 << 6));
        v70 = vaddlvq_u8((uint8x16_t)vaddq_s8(vaddq_s8(vcntq_s8(veorq_s8(v69[1], v56[1])), vcntq_s8(veorq_s8(*v69, *v56))), vaddq_s8(vcntq_s8(veorq_s8(v69[2], v56[2])), vcntq_s8(veorq_s8(v69[3], v56[3])))));
        v71 = (char *)__p + 12 * v68;
        if (!v71[8] || *((_DWORD *)v71 + 1) > v70)
        {
          v71[8] = 1;
          *(_QWORD *)v71 = v53 | ((unint64_t)v70 << 32);
        }
        goto LABEL_33;
      }
      LODWORD(v94) = -1;
      v96 = -1;
      v97 = -1;
      if (v66 == v65)
      {
        v83 = -1;
        if ((float)((float)0xFFFFFFFF * a6) > (float)0xFFFFFFFF)
          goto LABEL_75;
        goto LABEL_33;
      }
      v72 = *a2;
      v73 = *v56;
      v74 = v56[1];
      v75 = v56[2];
      v76 = v56[3];
      do
      {
        v80 = *v65++;
        v79 = v80;
        v81 = vaddlvq_u8((uint8x16_t)vaddq_s8(vaddq_s8(vcntq_s8(veorq_s8(*(int8x16_t *)(v72 + (v80 << 6) + 16), v74)), vcntq_s8(veorq_s8(*(int8x16_t *)(v72 + (v80 << 6)), v73))), vaddq_s8(vcntq_s8(veorq_s8(*(int8x16_t *)(v72 + (v80 << 6) + 32), v75)), vcntq_s8(veorq_s8(*(int8x16_t *)(v72 + (v80 << 6) + 48), v76)))));
        if (v81 < v97)
        {
          v96 = v97;
          v77 = &v94;
          v78 = &v97;
LABEL_64:
          *v78 = v81;
          *(_DWORD *)v77 = v79;
          goto LABEL_65;
        }
        if (v81 < v96 && v79 != v94)
        {
          v77 = (uint64_t *)&v98;
          v78 = &v96;
          goto LABEL_64;
        }
LABEL_65:
        --v67;
      }
      while (v67);
      v83 = v97;
      if ((float)((float)v96 * a6) > (float)v97)
      {
LABEL_75:
        v84 = (char *)__p + 12 * v94;
        if (!v84[8] || *((_DWORD *)v84 + 1) > v83)
        {
          v84[8] = 1;
          *(_QWORD *)v84 = v53 | ((unint64_t)v83 << 32);
        }
      }
LABEL_33:
      ++v53;
    }
    while (v53 != v92);
  }
  if (a9)
  {
    v85 = (_QWORD *)v90;
    sub_20EDCF560(a8, &__p, v90, (uint64_t)a5);
  }
  else
  {
    v94 = 0;
    v95 = 0xAAAAAAAAAAAAAAABLL * ((v100 - (_BYTE *)__p) >> 2);
    v85 = (_QWORD *)v90;
    sub_20EDCF87C(&v94, &__p, v90, (uint64_t)a5);
  }
  v88 = v85;
  v87 = *v85;
  v86 = v88[1];
  if (__p)
  {
    v100 = __p;
    operator delete(__p);
  }
  return (v86 - v87) >> 2;
}

void sub_20F246808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F246830(uint64_t *a1, uint64_t *a2, _QWORD *a3, char **a4, char **a5, float a6, uint64_t a7, unsigned int **a8, char a9)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  __int128 *v27;
  uint64_t v28;
  __int128 v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  __int128 *v44;
  uint64_t v45;
  __int128 v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int8x16_t *v57;
  unsigned __int16 v58;
  int8x16_t *v59;
  BOOL v60;
  uint64_t *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  unsigned int *v75;
  unsigned int *v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  int v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  char *v86;
  char *v87;
  void *v88;
  char *v89;
  void *v90;
  void *v91;
  uint64_t v93;
  uint64_t v96;
  unsigned int v98;
  unsigned int v99;
  char v100;
  unsigned int v101;
  void *__p;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  char *v106;
  uint64_t v107;

  a4[1] = *a4;
  a5[1] = *a5;
  v14 = a2[1] - *a2;
  v15 = v14 >> 6;
  v16 = *a4;
  if (v14 >> 6 <= (unint64_t)((a4[2] - *a4) >> 2))
    goto LABEL_13;
  if (v14 < 0)
    sub_20E867F44();
  v17 = a4[1];
  v18 = (char *)operator new((unint64_t)v14 >> 4);
  v19 = v17 - v16;
  v20 = &v18[(v17 - v16) & 0xFFFFFFFFFFFFFFFCLL];
  v21 = v20;
  if (v17 != v16)
  {
    if ((unint64_t)(v19 - 4) < 0x2C)
    {
      v21 = &v18[(v17 - v16) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_10:
        v30 = *((_DWORD *)v17 - 1);
        v17 -= 4;
        *((_DWORD *)v21 - 1) = v30;
        v21 -= 4;
      }
      while (v17 != v16);
      goto LABEL_11;
    }
    v21 = &v18[(v17 - v16) & 0xFFFFFFFFFFFFFFFCLL];
    if ((unint64_t)(&v17[-(v19 & 0xFFFFFFFFFFFFFFFCLL)] - v18) < 0x20)
      goto LABEL_10;
    v22 = v19 >> 2;
    v23 = ((unint64_t)(v19 - 4) >> 2) + 1;
    v24 = 4 * (v23 & 0x7FFFFFFFFFFFFFF8);
    v25 = &v17[-v24];
    v21 = &v20[-v24];
    v26 = &v18[4 * v22 - 16];
    v27 = (__int128 *)(v17 - 16);
    v28 = v23 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v29 = *v27;
      *((_OWORD *)v26 - 1) = *(v27 - 1);
      *(_OWORD *)v26 = v29;
      v26 -= 32;
      v27 -= 2;
      v28 -= 8;
    }
    while (v28);
    v17 = v25;
    if (v23 != (v23 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_10;
  }
LABEL_11:
  *a4 = v21;
  a4[1] = v20;
  a4[2] = &v18[4 * v15];
  if (v16)
    operator delete(v16);
LABEL_13:
  v31 = a3[1] - *a3;
  v32 = v31 >> 6;
  v33 = *a5;
  if (v31 >> 6 <= (unint64_t)((a5[2] - *a5) >> 2))
    goto LABEL_25;
  if (v31 < 0)
    sub_20E867F44();
  v34 = a5[1];
  v35 = (char *)operator new((unint64_t)v31 >> 4);
  v36 = v34 - v33;
  v37 = &v35[(v34 - v33) & 0xFFFFFFFFFFFFFFFCLL];
  v38 = v37;
  if (v34 != v33)
  {
    if ((unint64_t)(v36 - 4) < 0x2C)
    {
      v38 = &v35[(v34 - v33) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_22:
        v47 = *((_DWORD *)v34 - 1);
        v34 -= 4;
        *((_DWORD *)v38 - 1) = v47;
        v38 -= 4;
      }
      while (v34 != v33);
      goto LABEL_23;
    }
    v38 = &v35[(v34 - v33) & 0xFFFFFFFFFFFFFFFCLL];
    if ((unint64_t)(&v34[-(v36 & 0xFFFFFFFFFFFFFFFCLL)] - v35) < 0x20)
      goto LABEL_22;
    v39 = v36 >> 2;
    v40 = ((unint64_t)(v36 - 4) >> 2) + 1;
    v41 = 4 * (v40 & 0x7FFFFFFFFFFFFFF8);
    v42 = &v34[-v41];
    v38 = &v37[-v41];
    v43 = &v35[4 * v39 - 16];
    v44 = (__int128 *)(v34 - 16);
    v45 = v40 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v46 = *v44;
      *((_OWORD *)v43 - 1) = *(v44 - 1);
      *(_OWORD *)v43 = v46;
      v43 -= 32;
      v44 -= 2;
      v45 -= 8;
    }
    while (v45);
    v34 = v42;
    if (v40 != (v40 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_22;
  }
LABEL_23:
  *a5 = v38;
  a5[1] = v37;
  a5[2] = &v35[4 * v32];
  if (v33)
    operator delete(v33);
LABEL_25:
  v93 = (uint64_t)a4;
  v105 = 0;
  v106 = 0;
  v107 = 0;
  v49 = *a2;
  v48 = a2[1];
  __p = 0;
  v103 = 0;
  v104 = 0;
  v50 = v48 - v49;
  if (v50)
  {
    sub_20EDD0E84((char **)&v105, v50 >> 6, (uint64_t)&__p);
    if (__p)
    {
      v103 = (uint64_t)__p;
      operator delete(__p);
    }
  }
  v51 = a3[1] - *a3;
  v52 = a1;
  if (v51)
  {
    v53 = 0;
    v54 = v51 >> 6;
    if (v54 <= 1)
      v55 = 1;
    else
      v55 = v54;
    v96 = v55;
    do
    {
      v59 = (int8x16_t *)(*a3 + (v53 << 6));
      if (v59->i64[0])
        v60 = 0;
      else
        v60 = v59->i64[1] == 0;
      if (v60
        && v59[1].i64[0] == 0
        && v59[1].i64[1] == 0
        && v59[2].i64[0] == 0
        && v59[2].i64[1] == 0
        && v59[3].i64[0] == 0
        && v59[3].i64[1] == 0)
      {
        goto LABEL_35;
      }
      sub_20EDCF384(v52, (int8x16_t *)(*a3 + (v53 << 6)));
      v67 = (uint64_t *)v52[2];
      v68 = (_QWORD *)v52[3];
      v69 = v68 - v67;
      if (!v69)
        goto LABEL_35;
      if (v69 == 1)
      {
        v56 = *v67;
        v57 = (int8x16_t *)(*a2 + (v56 << 6));
        v58 = vaddlvq_u8((uint8x16_t)vaddq_s8(vaddq_s8(vcntq_s8(veorq_s8(v57[1], v59[1])), vcntq_s8(veorq_s8(*v57, *v59))), vaddq_s8(vcntq_s8(veorq_s8(v57[2], v59[2])), vcntq_s8(veorq_s8(v57[3], v59[3])))));
        LODWORD(__p) = v53;
        HIDWORD(__p) = v58;
        sub_20EDD11A4((void **)v105 + 4 * v56, &__p);
        goto LABEL_34;
      }
      v101 = -1;
      v98 = -1;
      v99 = -1;
      if (v68 == v67)
      {
        v81 = -1;
        if ((float)((float)0xFFFFFFFF * a6) > (float)0xFFFFFFFF)
          goto LABEL_74;
        goto LABEL_35;
      }
      v70 = *a2;
      v71 = *v59;
      v72 = v59[1];
      v73 = v59[2];
      v74 = v59[3];
      do
      {
        v78 = *v67++;
        v77 = v78;
        v79 = vaddlvq_u8((uint8x16_t)vaddq_s8(vaddq_s8(vcntq_s8(veorq_s8(*(int8x16_t *)(v70 + (v78 << 6) + 16), v72)), vcntq_s8(veorq_s8(*(int8x16_t *)(v70 + (v78 << 6)), v71))), vaddq_s8(vcntq_s8(veorq_s8(*(int8x16_t *)(v70 + (v78 << 6) + 32), v73)), vcntq_s8(veorq_s8(*(int8x16_t *)(v70 + (v78 << 6) + 48), v74)))));
        if (v79 < v99)
        {
          v98 = v99;
          v75 = &v101;
          v76 = &v99;
LABEL_63:
          *v76 = v79;
          *v75 = v77;
          goto LABEL_64;
        }
        if (v79 < v98 && v77 != v101)
        {
          v75 = (unsigned int *)&v100;
          v76 = &v98;
          goto LABEL_63;
        }
LABEL_64:
        --v69;
      }
      while (v69);
      v81 = v99;
      if ((float)((float)v98 * a6) > (float)v99)
      {
LABEL_74:
        __p = (void *)__PAIR64__(v81, v53);
        sub_20EDD11A4((void **)v105 + 4 * v101, &__p);
LABEL_34:
        v52 = a1;
      }
LABEL_35:
      ++v53;
    }
    while (v53 != v96);
  }
  if (a9)
  {
    v82 = (_QWORD *)v93;
    sub_20EDD0594(a8, &v105, v93, a5);
  }
  else
  {
    __p = 0;
    v103 = (v106 - (_BYTE *)v105) >> 5;
    v82 = (_QWORD *)v93;
    sub_20EDD09E0((uint64_t *)&__p, &v105, v93, (uint64_t)a5);
  }
  v85 = v82;
  v84 = *v82;
  v83 = v85[1];
  v86 = (char *)v105;
  if (v105)
  {
    v87 = v106;
    v88 = v105;
    if (v106 != v105)
    {
      v89 = v106;
      do
      {
        v91 = (void *)*((_QWORD *)v89 - 4);
        v89 -= 32;
        v90 = v91;
        if (v91)
        {
          *((_QWORD *)v87 - 3) = v90;
          operator delete(v90);
        }
        v87 = v89;
      }
      while (v89 != v86);
      v88 = v105;
    }
    v106 = v86;
    operator delete(v88);
  }
  return (v83 - v84) >> 2;
}

void sub_20F246DB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  sub_20EDD0E10(&a25);
  _Unwind_Resume(a1);
}

uint64_t sub_20F246DF8(uint64_t *a1, uint64_t *a2, _QWORD *a3, char **a4, char **a5, uint64_t a6, unsigned int **a7, char a8, float a9)
{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int128 *v28;
  uint64_t v29;
  __int128 v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  __int128 *v45;
  uint64_t v46;
  __int128 v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int8x16_t *v58;
  int8x16_t *v59;
  BOOL v60;
  uint64_t *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  void **p_p;
  unsigned int *v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  unsigned int v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  char *v86;
  char *v87;
  void *v88;
  char *v89;
  void *v90;
  void *v91;
  uint64_t v93;
  uint64_t v96;
  unsigned int v98;
  unsigned int v99;
  char v100;
  void *__p;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  char *v106;
  uint64_t v107;

  a4[1] = *a4;
  a5[1] = *a5;
  v15 = a2[1] - *a2;
  v16 = v15 >> 6;
  v17 = *a4;
  if (v15 >> 6 <= (unint64_t)((a4[2] - *a4) >> 2))
    goto LABEL_13;
  if (v15 < 0)
    sub_20E867F44();
  v18 = a4[1];
  v19 = (char *)operator new((unint64_t)v15 >> 4);
  v20 = v18 - v17;
  v21 = &v19[(v18 - v17) & 0xFFFFFFFFFFFFFFFCLL];
  v22 = v21;
  if (v18 != v17)
  {
    if ((unint64_t)(v20 - 4) < 0x2C)
    {
      v22 = &v19[(v18 - v17) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_10:
        v31 = *((_DWORD *)v18 - 1);
        v18 -= 4;
        *((_DWORD *)v22 - 1) = v31;
        v22 -= 4;
      }
      while (v18 != v17);
      goto LABEL_11;
    }
    v22 = &v19[(v18 - v17) & 0xFFFFFFFFFFFFFFFCLL];
    if ((unint64_t)(&v18[-(v20 & 0xFFFFFFFFFFFFFFFCLL)] - v19) < 0x20)
      goto LABEL_10;
    v23 = v20 >> 2;
    v24 = ((unint64_t)(v20 - 4) >> 2) + 1;
    v25 = 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
    v26 = &v18[-v25];
    v22 = &v21[-v25];
    v27 = &v19[4 * v23 - 16];
    v28 = (__int128 *)(v18 - 16);
    v29 = v24 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v30 = *v28;
      *((_OWORD *)v27 - 1) = *(v28 - 1);
      *(_OWORD *)v27 = v30;
      v27 -= 32;
      v28 -= 2;
      v29 -= 8;
    }
    while (v29);
    v18 = v26;
    if (v24 != (v24 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_10;
  }
LABEL_11:
  *a4 = v22;
  a4[1] = v21;
  a4[2] = &v19[4 * v16];
  if (v17)
    operator delete(v17);
LABEL_13:
  v32 = a3[1] - *a3;
  v33 = v32 >> 6;
  v34 = *a5;
  if (v32 >> 6 <= (unint64_t)((a5[2] - *a5) >> 2))
    goto LABEL_25;
  if (v32 < 0)
    sub_20E867F44();
  v35 = a5[1];
  v36 = (char *)operator new((unint64_t)v32 >> 4);
  v37 = v35 - v34;
  v38 = &v36[(v35 - v34) & 0xFFFFFFFFFFFFFFFCLL];
  v39 = v38;
  if (v35 != v34)
  {
    if ((unint64_t)(v37 - 4) < 0x2C)
    {
      v39 = &v36[(v35 - v34) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_22:
        v48 = *((_DWORD *)v35 - 1);
        v35 -= 4;
        *((_DWORD *)v39 - 1) = v48;
        v39 -= 4;
      }
      while (v35 != v34);
      goto LABEL_23;
    }
    v39 = &v36[(v35 - v34) & 0xFFFFFFFFFFFFFFFCLL];
    if ((unint64_t)(&v35[-(v37 & 0xFFFFFFFFFFFFFFFCLL)] - v36) < 0x20)
      goto LABEL_22;
    v40 = v37 >> 2;
    v41 = ((unint64_t)(v37 - 4) >> 2) + 1;
    v42 = 4 * (v41 & 0x7FFFFFFFFFFFFFF8);
    v43 = &v35[-v42];
    v39 = &v38[-v42];
    v44 = &v36[4 * v40 - 16];
    v45 = (__int128 *)(v35 - 16);
    v46 = v41 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v47 = *v45;
      *((_OWORD *)v44 - 1) = *(v45 - 1);
      *(_OWORD *)v44 = v47;
      v44 -= 32;
      v45 -= 2;
      v46 -= 8;
    }
    while (v46);
    v35 = v43;
    if (v41 != (v41 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_22;
  }
LABEL_23:
  *a5 = v39;
  a5[1] = v38;
  a5[2] = &v36[4 * v33];
  if (v34)
    operator delete(v34);
LABEL_25:
  v93 = (uint64_t)a4;
  v105 = 0;
  v106 = 0;
  v107 = 0;
  v50 = *a2;
  v49 = a2[1];
  __p = 0;
  v102 = 0;
  v103 = 0;
  v104 = a6;
  v51 = v49 - v50;
  if (v51)
  {
    sub_20EDD1DC0((char **)&v105, v51 >> 6, (uint64_t)&__p);
    if (__p)
    {
      v102 = (unint64_t)__p;
      operator delete(__p);
    }
  }
  v52 = a3[1] - *a3;
  v53 = a1;
  if (v52)
  {
    v54 = 0;
    v55 = v52 >> 6;
    if (v55 <= 1)
      v56 = 1;
    else
      v56 = v55;
    v96 = v56;
    do
    {
      v59 = (int8x16_t *)(*a3 + (v54 << 6));
      if (v59->i64[0])
        v60 = 0;
      else
        v60 = v59->i64[1] == 0;
      if (v60
        && v59[1].i64[0] == 0
        && v59[1].i64[1] == 0
        && v59[2].i64[0] == 0
        && v59[2].i64[1] == 0
        && v59[3].i64[0] == 0
        && v59[3].i64[1] == 0)
      {
        goto LABEL_34;
      }
      sub_20EDCF384(v53, (int8x16_t *)(*a3 + (v54 << 6)));
      v67 = (uint64_t *)v53[2];
      v68 = (_QWORD *)v53[3];
      v69 = v68 - v67;
      if (!v69)
        goto LABEL_34;
      if (v69 == 1)
      {
        v57 = *v67;
        v58 = (int8x16_t *)(*a2 + (v57 << 6));
        sub_20EDD1370((uint64_t)v105 + 40 * v57, vaddlvq_u8((uint8x16_t)vaddq_s8(vaddq_s8(vcntq_s8(veorq_s8(v58[1], v59[1])), vcntq_s8(veorq_s8(*v58, *v59))), vaddq_s8(vcntq_s8(veorq_s8(v58[2], v59[2])), vcntq_s8(veorq_s8(v58[3], v59[3]))))), v54);
        v53 = a1;
        goto LABEL_34;
      }
      LODWORD(__p) = -1;
      v98 = -1;
      v99 = -1;
      if (v68 == v67)
      {
        v81 = -1;
        if ((float)((float)0xFFFFFFFF * a9) > (float)0xFFFFFFFF)
          goto LABEL_73;
        goto LABEL_34;
      }
      v70 = *a2;
      v71 = *v59;
      v72 = v59[1];
      v73 = v59[2];
      v74 = v59[3];
      do
      {
        v78 = *v67++;
        v77 = v78;
        v79 = vaddlvq_u8((uint8x16_t)vaddq_s8(vaddq_s8(vcntq_s8(veorq_s8(*(int8x16_t *)(v70 + (v78 << 6) + 16), v72)), vcntq_s8(veorq_s8(*(int8x16_t *)(v70 + (v78 << 6)), v71))), vaddq_s8(vcntq_s8(veorq_s8(*(int8x16_t *)(v70 + (v78 << 6) + 32), v73)), vcntq_s8(veorq_s8(*(int8x16_t *)(v70 + (v78 << 6) + 48), v74)))));
        if (v79 < v99)
        {
          v98 = v99;
          p_p = &__p;
          v76 = &v99;
LABEL_62:
          *v76 = v79;
          *(_DWORD *)p_p = v77;
          goto LABEL_63;
        }
        if (v79 < v98 && v77 != __p)
        {
          p_p = (void **)&v100;
          v76 = &v98;
          goto LABEL_62;
        }
LABEL_63:
        --v69;
      }
      while (v69);
      v81 = v99;
      if ((float)((float)v98 * a9) > (float)v99)
      {
LABEL_73:
        sub_20EDD1370((uint64_t)v105 + 40 * __p, v81, v54);
        v53 = a1;
      }
LABEL_34:
      ++v54;
    }
    while (v54 != v96);
  }
  if (a8)
  {
    v82 = (_QWORD *)v93;
    sub_20EDD14C0(a7, &v105, v93, a5);
  }
  else
  {
    __p = 0;
    v102 = 0xCCCCCCCCCCCCCCCDLL * ((v106 - (_BYTE *)v105) >> 3);
    v82 = (_QWORD *)v93;
    sub_20EDD1910((uint64_t *)&__p, &v105, v93, a5);
  }
  v85 = v82;
  v84 = *v82;
  v83 = v85[1];
  v86 = (char *)v105;
  if (v105)
  {
    v87 = v106;
    v88 = v105;
    if (v106 != v105)
    {
      v89 = v106;
      do
      {
        v91 = (void *)*((_QWORD *)v89 - 5);
        v89 -= 40;
        v90 = v91;
        if (v91)
        {
          *((_QWORD *)v87 - 4) = v90;
          operator delete(v90);
        }
        v87 = v89;
      }
      while (v89 != v86);
      v88 = v105;
    }
    v106 = v86;
    operator delete(v88);
  }
  return (v83 - v84) >> 2;
}

void sub_20F247390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  sub_20EDD1D4C(&a25);
  _Unwind_Resume(a1);
}

uint64_t sub_20F2473D8(_QWORD *a1, _QWORD *a2, char **a3, char **a4, uint64_t a5, uint64_t a6, uint64_t a7, float a8)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  __int128 *v26;
  uint64_t v27;
  __int128 v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  __int128 *v43;
  uint64_t v44;
  __int128 v45;
  int v46;
  void *v48;
  char *v49;
  char *v50;
  char *v51;
  void *v52;
  void *v53;
  void *__p;
  char *v55;
  uint64_t v56;
  _QWORD v57[7];
  uint64_t v58;
  float v59;
  _QWORD v60[2];

  v60[0] = a6;
  v60[1] = a7;
  v59 = a8;
  v58 = a5;
  a3[1] = *a3;
  a4[1] = *a4;
  v13 = a1[1] - *a1;
  v14 = v13 >> 6;
  v15 = *a3;
  if (v13 >> 6 <= (unint64_t)((a3[2] - *a3) >> 2))
    goto LABEL_13;
  if (v13 < 0)
    sub_20E867F44();
  v16 = a3[1];
  v17 = (char *)operator new((unint64_t)v13 >> 4);
  v18 = v16 - v15;
  v19 = &v17[(v16 - v15) & 0xFFFFFFFFFFFFFFFCLL];
  v20 = v19;
  if (v16 != v15)
  {
    if ((unint64_t)(v18 - 4) < 0x2C)
    {
      v20 = &v17[(v16 - v15) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_10:
        v29 = *((_DWORD *)v16 - 1);
        v16 -= 4;
        *((_DWORD *)v20 - 1) = v29;
        v20 -= 4;
      }
      while (v16 != v15);
      goto LABEL_11;
    }
    v20 = &v17[(v16 - v15) & 0xFFFFFFFFFFFFFFFCLL];
    if ((unint64_t)(&v16[-(v18 & 0xFFFFFFFFFFFFFFFCLL)] - v17) < 0x20)
      goto LABEL_10;
    v21 = v18 >> 2;
    v22 = ((unint64_t)(v18 - 4) >> 2) + 1;
    v23 = 4 * (v22 & 0x7FFFFFFFFFFFFFF8);
    v24 = &v16[-v23];
    v20 = &v19[-v23];
    v25 = &v17[4 * v21 - 16];
    v26 = (__int128 *)(v16 - 16);
    v27 = v22 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v28 = *v26;
      *((_OWORD *)v25 - 1) = *(v26 - 1);
      *(_OWORD *)v25 = v28;
      v25 -= 32;
      v26 -= 2;
      v27 -= 8;
    }
    while (v27);
    v16 = v24;
    if (v22 != (v22 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_10;
  }
LABEL_11:
  *a3 = v20;
  a3[1] = v19;
  a3[2] = &v17[4 * v14];
  if (v15)
    operator delete(v15);
LABEL_13:
  v30 = a2[1] - *a2;
  v31 = v30 >> 6;
  v32 = *a4;
  if (v30 >> 6 <= (unint64_t)((a4[2] - *a4) >> 2))
    goto LABEL_25;
  if (v30 < 0)
    sub_20E867F44();
  v33 = a4[1];
  v34 = (char *)operator new((unint64_t)v30 >> 4);
  v35 = v33 - v32;
  v36 = &v34[(v33 - v32) & 0xFFFFFFFFFFFFFFFCLL];
  v37 = v36;
  if (v33 != v32)
  {
    if ((unint64_t)(v35 - 4) < 0x2C)
    {
      v37 = &v34[(v33 - v32) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_22:
        v46 = *((_DWORD *)v33 - 1);
        v33 -= 4;
        *((_DWORD *)v37 - 1) = v46;
        v37 -= 4;
      }
      while (v33 != v32);
      goto LABEL_23;
    }
    v37 = &v34[(v33 - v32) & 0xFFFFFFFFFFFFFFFCLL];
    if ((unint64_t)(&v33[-(v35 & 0xFFFFFFFFFFFFFFFCLL)] - v34) < 0x20)
      goto LABEL_22;
    v38 = v35 >> 2;
    v39 = ((unint64_t)(v35 - 4) >> 2) + 1;
    v40 = 4 * (v39 & 0x7FFFFFFFFFFFFFF8);
    v41 = &v33[-v40];
    v37 = &v36[-v40];
    v42 = &v34[4 * v38 - 16];
    v43 = (__int128 *)(v33 - 16);
    v44 = v39 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 8;
    }
    while (v44);
    v33 = v41;
    if (v39 != (v39 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_22;
  }
LABEL_23:
  *a4 = v37;
  a4[1] = v36;
  a4[2] = &v34[4 * v31];
  if (v32)
    operator delete(v32);
LABEL_25:
  if (a1[1] - *a1 < 0x80uLL)
    return 0;
  v57[0] = &v59;
  v57[1] = v60;
  v57[2] = a1;
  v57[3] = &v58;
  v57[4] = a2;
  v57[5] = a4;
  v57[6] = a3;
  if (a5 == 1)
  {
    __p = 0;
    v55 = 0;
    v56 = 0;
    sub_20F247724(v57, (uint64_t)&__p);
    v48 = __p;
    if (__p)
    {
      v55 = (char *)__p;
LABEL_38:
      operator delete(v48);
    }
  }
  else
  {
    __p = 0;
    v55 = 0;
    v56 = 0;
    sub_20F24869C((uint64_t)v57, (uint64_t)&__p);
    v49 = (char *)__p;
    if (__p)
    {
      v50 = v55;
      v48 = __p;
      if (v55 != __p)
      {
        v51 = v55;
        do
        {
          v53 = (void *)*((_QWORD *)v51 - 5);
          v51 -= 40;
          v52 = v53;
          if (v53)
          {
            *((_QWORD *)v50 - 4) = v52;
            operator delete(v52);
          }
          v50 = v51;
        }
        while (v51 != v49);
        v48 = __p;
      }
      v55 = v49;
      goto LABEL_38;
    }
  }
  return (a3[1] - *a3) >> 2;
}

void sub_20F2476EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20EDD1D4C(&a9);
  _Unwind_Resume(a1);
}

void sub_20F247700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (!__p)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F247724(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t **v4;
  float v5;
  unsigned int **v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  _QWORD *v10;
  unint64_t v11;
  size_t v12;
  int8x16_t *v13;
  int8x16_t *v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int8x16_t *v23;
  BOOL v24;
  unsigned int *v31;
  unsigned int *v32;
  uint64_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  BOOL v45;
  uint64_t v47;
  unsigned int *v48;
  unsigned int *v49;
  unsigned int v50;
  uint64_t v51;
  _BYTE *v52;
  _DWORD *v53;
  int v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  _BYTE *v67;
  _DWORD *v68;
  _DWORD *v69;
  int64_t v70;
  _DWORD *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  _OWORD *v76;
  char *v77;
  uint64_t v78;
  __int128 v79;
  int v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  _BYTE *v87;
  unsigned int *v88;
  int64_t v89;
  unsigned int *v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  _OWORD *v95;
  char *v96;
  uint64_t v97;
  __int128 v98;
  unsigned int v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v103;
  uint64_t v104;
  _BYTE *v105;
  _DWORD *v106;
  int v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  uint64_t v111;
  unint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  _BYTE *v120;
  _DWORD *v121;
  _DWORD *v122;
  int64_t v123;
  _DWORD *v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  _OWORD *v129;
  char *v130;
  uint64_t v131;
  __int128 v132;
  int v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  _BYTE *v140;
  _DWORD *v141;
  int64_t v142;
  _DWORD *v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  _OWORD *v148;
  char *v149;
  uint64_t v150;
  __int128 v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int8x16_t *v157;
  int8x16_t v158;
  int8x16_t v159;
  int8x16_t *v160;
  int8x16_t v161;
  int8x16_t v162;
  unsigned int v163;
  unsigned int v164;
  uint64_t v165;
  int v166;
  int8x16_t v167;
  int8x16_t v168;
  int8x16_t v169;
  int8x16_t v170;
  unsigned int v171;
  BOOL v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  int8x16_t *v176;
  int8x16_t *v177;
  int8x16_t v178;
  int8x16_t v179;
  int8x16_t v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  int8x16_t *v188;
  BOOL v189;
  uint64_t v196;
  int8x16_t v197;
  int8x16_t v198;
  unsigned int v199;
  int8x16_t *v200;
  unsigned int v201;
  uint64_t v202;
  int v203;
  int8x16_t v204;
  int8x16_t v205;
  unsigned int v206;
  int8x16_t v207;
  int8x16_t v208;
  int8x16_t v209;
  int8x16_t v210;
  BOOL v211;
  uint64_t v212;
  unint64_t v213;
  _QWORD *v214;
  uint64_t v215;
  uint64_t v216;
  _BYTE *v217;
  uint64_t v218;
  int v219;
  uint64_t v220;
  unint64_t v221;
  char *v222;
  uint64_t v223;
  unint64_t v224;
  char *v225;
  char *v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  unint64_t v231;
  _BYTE *v232;
  _DWORD *v233;
  uint64_t v234;
  int64_t v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  char *v239;
  _OWORD *v240;
  char *v241;
  uint64_t v242;
  __int128 v243;
  int v244;
  char *v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t v248;
  uint64_t v249;
  unint64_t v250;
  _BYTE *v251;
  unsigned int *v252;
  int64_t v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  char *v257;
  _OWORD *v258;
  char *v259;
  uint64_t v260;
  __int128 v261;
  unsigned int v262;
  int8x16_t *__p;
  unsigned int **v264;
  uint64_t v265;
  unsigned int *i;
  uint64_t v267;
  unsigned int *v269;
  uint64_t v270;
  unsigned int v271;
  uint64_t v273;
  char v274;

  v3 = a1;
  v4 = (uint64_t **)a1[1];
  v5 = *(float *)*a1;
  if (!*((_BYTE *)v4 + 8))
  {
    v16 = (_QWORD *)a1[2];
    v17 = (uint64_t)(v16[1] - *v16) >> 6;
    v273 = 0xFFFFFFFF00000000;
    v274 = 0;
    v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
    if (v17 <= v18)
    {
      if (v17 < v18)
        *(_QWORD *)(a2 + 8) = *(_QWORD *)a2 + 12 * v17;
    }
    else
    {
      sub_20EDCFBAC((void **)a2, v17 - v18, &v273);
      v16 = (_QWORD *)v3[2];
    }
    v100 = v16[1] - *v16;
    v101 = *(_QWORD *)(v3[4] + 8) - *(_QWORD *)v3[4];
    if ((v101 & 0x3FFFFFFFC0) != 0 && (v100 & 0x3FFFFFFFC0) != 0)
    {
      v153 = 0;
      v154 = (v100 >> 6);
      v155 = (v101 >> 6);
      do
      {
        v156 = 0;
        v157 = (int8x16_t *)(*(_QWORD *)v3[4] + (v153 << 6));
        v158 = *v157;
        v159 = v157[1];
        v160 = (int8x16_t *)(*(_QWORD *)v3[2] + 32);
        v161 = v157[2];
        v162 = v157[3];
        v163 = -1;
        v164 = -1;
        LODWORD(v165) = -1;
        v166 = -1;
        do
        {
          v167 = v160[-2];
          v168 = v160[-1];
          v169 = *v160;
          v170 = v160[1];
          v160 += 4;
          v171 = vaddlvq_u8((uint8x16_t)vaddq_s8(vaddq_s8(vcntq_s8(veorq_s8(v168, v159)), vcntq_s8(veorq_s8(v167, v158))), vaddq_s8(vcntq_s8(veorq_s8(v169, v161)), vcntq_s8(veorq_s8(v170, v162)))));
          if (v171 < v164)
          {
            v166 = v156;
            v164 = v171;
          }
          v172 = v171 >= v165;
          if (v171 >= v165)
          {
            v165 = v165;
          }
          else
          {
            v166 = v163;
            v164 = v165;
            v165 = v171;
          }
          if (!v172)
            v163 = v156;
          ++v156;
        }
        while (v154 != v156);
        if (v163 != -1 && v166 != -1 && (float)(v5 * (float)v164) > (float)v165)
        {
          v173 = *(_QWORD *)a2 + 12 * v163;
          if (!*(_BYTE *)(v173 + 8) || *(_DWORD *)(v173 + 4) > v165)
          {
            *(_BYTE *)(v173 + 8) = 1;
            *(_QWORD *)v173 = v153 | (v165 << 32);
          }
        }
        ++v153;
      }
      while (v153 != v155);
    }
    v270 = -1431655765 * ((*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
    if (!(_DWORD)v270)
      return;
    v103 = 0;
    while (1)
    {
      v104 = *(_QWORD *)a2 + 12 * v103;
      v105 = (_BYTE *)(v104 + 8);
      if (*(_BYTE *)(v104 + 8))
        break;
LABEL_116:
      if (++v103 == v270)
        return;
    }
    while (1)
    {
      *v105 = 0;
      v107 = *(_DWORD *)v104;
      v108 = v3[5];
      v110 = *(char **)(v108 + 8);
      v109 = *(_QWORD *)(v108 + 16);
      if ((unint64_t)v110 < v109)
      {
        *(_DWORD *)v110 = v107;
        *(_QWORD *)(v108 + 8) = v110 + 4;
        v111 = v3[6];
        v113 = *(char **)(v111 + 8);
        v112 = *(_QWORD *)(v111 + 16);
        if ((unint64_t)v113 >= v112)
          goto LABEL_144;
        goto LABEL_119;
      }
      v114 = *(char **)v108;
      v115 = (uint64_t)&v110[-*(_QWORD *)v108];
      v116 = v115 >> 2;
      v117 = (v115 >> 2) + 1;
      if (v117 >> 62)
        goto LABEL_281;
      v118 = v109 - (_QWORD)v114;
      if (v118 >> 1 > v117)
        v117 = v118 >> 1;
      v119 = (unint64_t)v118 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v117;
      if (!v119)
        break;
      if (v119 >> 62)
        goto LABEL_282;
      v120 = operator new(4 * v119);
      v121 = &v120[4 * v116];
      *v121 = v107;
      v122 = v121 + 1;
      v123 = v110 - v114;
      if (v110 != v114)
        goto LABEL_135;
LABEL_141:
      *(_QWORD *)v108 = v121;
      *(_QWORD *)(v108 + 8) = v122;
      *(_QWORD *)(v108 + 16) = &v120[4 * v119];
      if (v114)
        operator delete(v114);
      v3 = a1;
      *(_QWORD *)(v108 + 8) = v122;
      v111 = a1[6];
      v113 = *(char **)(v111 + 8);
      v112 = *(_QWORD *)(v111 + 16);
      if ((unint64_t)v113 >= v112)
      {
LABEL_144:
        v134 = *(char **)v111;
        v135 = (uint64_t)&v113[-*(_QWORD *)v111];
        v136 = v135 >> 2;
        v137 = (v135 >> 2) + 1;
        if (v137 >> 62)
LABEL_281:
          sub_20E867F44();
        v138 = v112 - (_QWORD)v134;
        if (v138 >> 1 > v137)
          v137 = v138 >> 1;
        if ((unint64_t)v138 >= 0x7FFFFFFFFFFFFFFCLL)
          v139 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v139 = v137;
        if (v139)
        {
          if (v139 >> 62)
LABEL_282:
            sub_20E877A38();
          v140 = operator new(4 * v139);
          v141 = &v140[4 * v136];
          *v141 = v103;
          v106 = v141 + 1;
          v142 = v113 - v134;
          if (v113 == v134)
            goto LABEL_161;
LABEL_155:
          v144 = v142 - 4;
          if (v144 < 0x2C)
            goto LABEL_289;
          if ((unint64_t)(v113 - &v140[v135]) < 0x20)
            goto LABEL_289;
          v145 = (v144 >> 2) + 1;
          v146 = 4 * (v145 & 0x7FFFFFFFFFFFFFF8);
          v147 = &v113[-v146];
          v141 = (_DWORD *)((char *)v141 - v146);
          v148 = &v140[v135 - 16];
          v149 = v113 - 16;
          v150 = v145 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v151 = *(_OWORD *)v149;
            *(v148 - 1) = *((_OWORD *)v149 - 1);
            *v148 = v151;
            v148 -= 2;
            v149 -= 32;
            v150 -= 8;
          }
          while (v150);
          v113 = v147;
          if (v145 != (v145 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_289:
            do
            {
              v152 = *((_DWORD *)v113 - 1);
              v113 -= 4;
              *--v141 = v152;
            }
            while (v113 != v134);
          }
        }
        else
        {
          v140 = 0;
          v141 = (_DWORD *)(4 * v136);
          v143 = (_DWORD *)(4 * v136);
          *v143 = v103;
          v106 = v143 + 1;
          v142 = v113 - v134;
          if (v113 != v134)
            goto LABEL_155;
        }
LABEL_161:
        *(_QWORD *)v111 = v141;
        *(_QWORD *)(v111 + 8) = v106;
        *(_QWORD *)(v111 + 16) = &v140[4 * v139];
        if (v134)
          operator delete(v134);
        goto LABEL_120;
      }
LABEL_119:
      *(_DWORD *)v113 = v103;
      v106 = v113 + 4;
LABEL_120:
      *(_QWORD *)(v111 + 8) = v106;
      if (!*v105)
        goto LABEL_116;
    }
    v120 = 0;
    v121 = (_DWORD *)(4 * v116);
    v124 = (_DWORD *)(4 * v116);
    *v124 = v107;
    v122 = v124 + 1;
    v123 = v110 - v114;
    if (v110 == v114)
      goto LABEL_141;
LABEL_135:
    v125 = v123 - 4;
    if (v125 < 0x2C)
      goto LABEL_290;
    if ((unint64_t)(v110 - v120 - v115) < 0x20)
      goto LABEL_290;
    v126 = (v125 >> 2) + 1;
    v127 = 4 * (v126 & 0x7FFFFFFFFFFFFFF8);
    v128 = &v110[-v127];
    v121 = (_DWORD *)((char *)v121 - v127);
    v129 = &v120[v115 - 16];
    v130 = v110 - 16;
    v131 = v126 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v132 = *(_OWORD *)v130;
      *(v129 - 1) = *((_OWORD *)v130 - 1);
      *v129 = v132;
      v129 -= 2;
      v130 -= 32;
      v131 -= 8;
    }
    while (v131);
    v110 = v128;
    if (v126 != (v126 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_290:
      do
      {
        v133 = *((_DWORD *)v110 - 1);
        v110 -= 4;
        *--v121 = v133;
      }
      while (v110 != v114);
    }
    goto LABEL_141;
  }
  v6 = (unsigned int **)*v4;
  v8 = **v4;
  v7 = (*v4)[1];
  v9 = v7 - v8;
  if ((unint64_t)(v7 - v8) >= 0xFA0)
  {
    v11 = (uint64_t)(*(_QWORD *)(a1[2] + 8) - *(_QWORD *)a1[2]) >> 6;
LABEL_10:
    v273 = 0xFFFFFFFF00000000;
    v274 = 0;
    v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
    if (v11 <= v19)
    {
      if (v11 < v19)
        *(_QWORD *)(a2 + 8) = *(_QWORD *)a2 + 12 * v11;
    }
    else
    {
      sub_20EDCFBAC((void **)a2, v11 - v19, &v273);
    }
    v20 = *(_QWORD *)(v3[4] + 8) - *(_QWORD *)v3[4];
    if ((v20 & 0x3FFFFFFFC0) != 0)
    {
      v21 = 0;
      v22 = (v20 >> 6);
      do
      {
        v23 = (int8x16_t *)(*(_QWORD *)v3[4] + (v21 << 6));
        if (v23->i64[0])
          v24 = 0;
        else
          v24 = v23->i64[1] == 0;
        if (!v24
          || v23[1].i64[0] != 0
          || v23[1].i64[1] != 0
          || v23[2].i64[0] != 0
          || v23[2].i64[1] != 0
          || v23[3].i64[0] != 0
          || v23[3].i64[1] != 0)
        {
          v31 = *v6;
          v32 = v6[1];
          if (*v6 != v32)
          {
            v34 = *v23;
            v35 = v23[1];
            v36 = v23[2];
            v37 = v23[3];
            v38 = -1;
            v39 = -1;
            LODWORD(v40) = -1;
            v41 = -1;
            do
            {
              v43 = *v31++;
              v42 = v43;
              v33 = *(_QWORD *)v3[2];
              v44 = vaddlvq_u8((uint8x16_t)vaddq_s8(vaddq_s8(vcntq_s8(veorq_s8(*(int8x16_t *)(v33 + ((unint64_t)v43 << 6) + 16), v35)), vcntq_s8(veorq_s8(*(int8x16_t *)(v33 + ((unint64_t)v43 << 6)), v34))), vaddq_s8(vcntq_s8(veorq_s8(*(int8x16_t *)(v33 + ((unint64_t)v43 << 6) + 32), v36)), vcntq_s8(veorq_s8(*(int8x16_t *)(v33 + ((unint64_t)v43 << 6) + 48), v37)))));
              if (v44 < v39)
              {
                v41 = v42;
                v39 = v44;
              }
              v45 = v44 >= v40;
              if (v44 >= v40)
              {
                v40 = v40;
              }
              else
              {
                v41 = v38;
                v39 = v40;
                v40 = v44;
              }
              if (!v45)
                v38 = v42;
            }
            while (v31 != v32);
            if (v38 != -1 && v41 != -1 && (float)(v5 * (float)v39) > (float)v40)
            {
              v47 = *(_QWORD *)a2 + 12 * v38;
              if (!*(_BYTE *)(v47 + 8) || *(_DWORD *)(v47 + 4) > v40)
              {
                *(_BYTE *)(v47 + 8) = 1;
                *(_QWORD *)v47 = v21 | (v40 << 32);
              }
            }
          }
        }
        ++v21;
      }
      while (v21 != v22);
    }
    v48 = *v6;
    v49 = v6[1];
    for (i = v49; ; v49 = i)
    {
      if (v48 == v49)
        return;
      v269 = v48;
      v50 = *v48;
      v51 = *(_QWORD *)a2 + 12 * *v48;
      v52 = (_BYTE *)(v51 + 8);
      if (*(_BYTE *)(v51 + 8))
        break;
LABEL_59:
      v48 = v269 + 1;
    }
    while (1)
    {
      *v52 = 0;
      v54 = *(_DWORD *)v51;
      v55 = v3[5];
      v57 = *(char **)(v55 + 8);
      v56 = *(_QWORD *)(v55 + 16);
      if ((unint64_t)v57 < v56)
      {
        *(_DWORD *)v57 = v54;
        *(_QWORD *)(v55 + 8) = v57 + 4;
        v58 = v3[6];
        v60 = *(char **)(v58 + 8);
        v59 = *(_QWORD *)(v58 + 16);
        if ((unint64_t)v60 >= v59)
          goto LABEL_88;
        goto LABEL_63;
      }
      v61 = *(char **)v55;
      v62 = (uint64_t)&v57[-*(_QWORD *)v55];
      v63 = v62 >> 2;
      v64 = (v62 >> 2) + 1;
      if (v64 >> 62)
        goto LABEL_281;
      v65 = v56 - (_QWORD)v61;
      if (v65 >> 1 > v64)
        v64 = v65 >> 1;
      v66 = (unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v64;
      if (!v66)
        break;
      if (v66 >> 62)
        goto LABEL_282;
      v67 = operator new(4 * v66);
      v68 = &v67[4 * v63];
      *v68 = v54;
      v69 = v68 + 1;
      v70 = v57 - v61;
      if (v57 != v61)
        goto LABEL_79;
LABEL_85:
      *(_QWORD *)v55 = v68;
      *(_QWORD *)(v55 + 8) = v69;
      *(_QWORD *)(v55 + 16) = &v67[4 * v66];
      if (v61)
        operator delete(v61);
      v3 = a1;
      *(_QWORD *)(v55 + 8) = v69;
      v58 = a1[6];
      v60 = *(char **)(v58 + 8);
      v59 = *(_QWORD *)(v58 + 16);
      if ((unint64_t)v60 >= v59)
      {
LABEL_88:
        v81 = *(char **)v58;
        v82 = (uint64_t)&v60[-*(_QWORD *)v58];
        v83 = v82 >> 2;
        v84 = (v82 >> 2) + 1;
        if (v84 >> 62)
          goto LABEL_281;
        v85 = v59 - (_QWORD)v81;
        if (v85 >> 1 > v84)
          v84 = v85 >> 1;
        if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFFCLL)
          v86 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v86 = v84;
        if (v86)
        {
          if (v86 >> 62)
            goto LABEL_282;
          v87 = operator new(4 * v86);
          v88 = (unsigned int *)&v87[4 * v83];
          *v88 = v50;
          v53 = v88 + 1;
          v89 = v60 - v81;
          if (v60 == v81)
            goto LABEL_105;
LABEL_99:
          v91 = v89 - 4;
          if (v91 < 0x2C)
            goto LABEL_291;
          if ((unint64_t)(v60 - &v87[v82]) < 0x20)
            goto LABEL_291;
          v92 = (v91 >> 2) + 1;
          v93 = 4 * (v92 & 0x7FFFFFFFFFFFFFF8);
          v94 = &v60[-v93];
          v88 = (unsigned int *)((char *)v88 - v93);
          v95 = &v87[v82 - 16];
          v96 = v60 - 16;
          v97 = v92 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v98 = *(_OWORD *)v96;
            *(v95 - 1) = *((_OWORD *)v96 - 1);
            *v95 = v98;
            v95 -= 2;
            v96 -= 32;
            v97 -= 8;
          }
          while (v97);
          v60 = v94;
          if (v92 != (v92 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_291:
            do
            {
              v99 = *((_DWORD *)v60 - 1);
              v60 -= 4;
              *--v88 = v99;
            }
            while (v60 != v81);
          }
        }
        else
        {
          v87 = 0;
          v88 = (unsigned int *)(4 * v83);
          v90 = (unsigned int *)(4 * v83);
          *v90 = v50;
          v53 = v90 + 1;
          v89 = v60 - v81;
          if (v60 != v81)
            goto LABEL_99;
        }
LABEL_105:
        *(_QWORD *)v58 = v88;
        *(_QWORD *)(v58 + 8) = v53;
        *(_QWORD *)(v58 + 16) = &v87[4 * v86];
        if (v81)
          operator delete(v81);
        goto LABEL_64;
      }
LABEL_63:
      *(_DWORD *)v60 = v50;
      v53 = v60 + 4;
LABEL_64:
      *(_QWORD *)(v58 + 8) = v53;
      if (!*v52)
        goto LABEL_59;
    }
    v67 = 0;
    v68 = (_DWORD *)(4 * v63);
    v71 = (_DWORD *)(4 * v63);
    *v71 = v54;
    v69 = v71 + 1;
    v70 = v57 - v61;
    if (v57 == v61)
      goto LABEL_85;
LABEL_79:
    v72 = v70 - 4;
    if (v72 < 0x2C)
      goto LABEL_292;
    if ((unint64_t)(v57 - v67 - v62) < 0x20)
      goto LABEL_292;
    v73 = (v72 >> 2) + 1;
    v74 = 4 * (v73 & 0x7FFFFFFFFFFFFFF8);
    v75 = &v57[-v74];
    v68 = (_DWORD *)((char *)v68 - v74);
    v76 = &v67[v62 - 16];
    v77 = v57 - 16;
    v78 = v73 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v79 = *(_OWORD *)v77;
      *(v76 - 1) = *((_OWORD *)v77 - 1);
      *v76 = v79;
      v76 -= 2;
      v77 -= 32;
      v78 -= 8;
    }
    while (v78);
    v57 = v75;
    if (v73 != (v73 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_292:
      do
      {
        v80 = *((_DWORD *)v57 - 1);
        v57 -= 4;
        *--v68 = v80;
      }
      while (v57 != v61);
    }
    goto LABEL_85;
  }
  v10 = (_QWORD *)a1[2];
  v11 = (uint64_t)(v10[1] - *v10) >> 6;
  if (v9 >> 2 >= v11 >> 2)
    goto LABEL_10;
  if (v7 == v8)
  {
    v14 = 0;
    v13 = 0;
  }
  else
  {
    v12 = v9;
    v13 = (int8x16_t *)operator new(16 * v9);
    bzero(v13, v12 * 16);
    v14 = &v13[v12];
    v15 = (char *)v6[1] - (char *)*v6;
    if ((v15 & 0x3FFFFFFFCLL) != 0)
    {
      v174 = 0;
      v175 = (v15 >> 2);
      v176 = v13;
      do
      {
        v177 = (int8x16_t *)(*v10 + ((unint64_t)(*v6)[v174] << 6));
        v178 = *v177;
        v179 = v177[1];
        v180 = v177[3];
        v176[2] = v177[2];
        v176[3] = v180;
        *v176 = v178;
        v176[1] = v179;
        v176 += 4;
        ++v174;
      }
      while (v175 != v174);
    }
  }
  v181 = (char *)v14 - (char *)v13;
  v182 = ((char *)v14 - (char *)v13) >> 6;
  v273 = 0xFFFFFFFF00000000;
  v274 = 0;
  v183 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  if (v182 <= v183)
  {
    if (v182 < v183)
      *(_QWORD *)(a2 + 8) = *(_QWORD *)a2 + 12 * v182;
  }
  else
  {
    sub_20EDCFBAC((void **)a2, v182 - v183, &v273);
  }
  if ((v181 & 0x3FFFFFFFC0) != 0)
  {
    v184 = *(_QWORD *)(v3[4] + 8) - *(_QWORD *)v3[4];
    if ((v184 & 0x3FFFFFFFC0) != 0)
    {
      v185 = 0;
      v186 = (v181 >> 6);
      v187 = (v184 >> 6);
      do
      {
        v188 = (int8x16_t *)(*(_QWORD *)v3[4] + (v185 << 6));
        if (v188->i64[0])
          v189 = 0;
        else
          v189 = v188->i64[1] == 0;
        if (!v189
          || v188[1].i64[0] != 0
          || v188[1].i64[1] != 0
          || v188[2].i64[0] != 0
          || v188[2].i64[1] != 0
          || v188[3].i64[0] != 0
          || v188[3].i64[1] != 0)
        {
          v196 = 0;
          v197 = *v188;
          v198 = v188[1];
          v199 = -1;
          v200 = v13 + 2;
          v201 = -1;
          LODWORD(v202) = -1;
          v203 = -1;
          v204 = v188[2];
          v205 = v188[3];
          do
          {
            v206 = v202;
            v207 = v200[-2];
            v208 = v200[-1];
            v209 = *v200;
            v210 = v200[1];
            v200 += 4;
            LODWORD(v202) = vaddlvq_u8((uint8x16_t)vaddq_s8(vaddq_s8(vcntq_s8(veorq_s8(v208, v198)), vcntq_s8(veorq_s8(v207, v197))), vaddq_s8(vcntq_s8(veorq_s8(v209, v204)), vcntq_s8(veorq_s8(v210, v205)))));
            if (v202 < v201)
            {
              v203 = v196;
              v201 = v202;
            }
            v211 = v202 >= v206;
            if (v202 >= v206)
            {
              v202 = v206;
            }
            else
            {
              v203 = v199;
              v201 = v206;
              v202 = v202;
            }
            if (!v211)
              v199 = v196;
            ++v196;
          }
          while (v186 != v196);
          if (v199 != -1 && v203 != -1 && (float)(v5 * (float)v201) > (float)v202)
          {
            v212 = *(_QWORD *)a2 + 12 * v199;
            if (!*(_BYTE *)(v212 + 8) || *(_DWORD *)(v212 + 4) > v202)
            {
              *(_BYTE *)(v212 + 8) = 1;
              *(_QWORD *)v212 = v185 | (v202 << 32);
            }
          }
        }
        ++v185;
      }
      while (v185 != v187);
    }
  }
  __p = v13;
  v264 = v6;
  v213 = (char *)v6[1] - (char *)*v6;
  v214 = (_QWORD *)a2;
  if ((v213 & 0x3FFFFFFFCLL) != 0)
  {
    v215 = 0;
    v265 = (v213 >> 2);
    while (1)
    {
      v267 = v215;
      v216 = *v214 + 12 * v215;
      v217 = (_BYTE *)(v216 + 8);
      if (*(_BYTE *)(v216 + 8))
        break;
LABEL_231:
      v215 = v267 + 1;
      if (v267 + 1 == v265)
        goto LABEL_278;
    }
    v271 = (*v264)[v215];
    while (1)
    {
      *v217 = 0;
      v219 = *(_DWORD *)v216;
      v220 = a1[5];
      v222 = *(char **)(v220 + 8);
      v221 = *(_QWORD *)(v220 + 16);
      if ((unint64_t)v222 < v221)
      {
        *(_DWORD *)v222 = v219;
        *(_QWORD *)(v220 + 8) = v222 + 4;
        v223 = a1[6];
        v225 = *(char **)(v223 + 8);
        v224 = *(_QWORD *)(v223 + 16);
        if ((unint64_t)v225 >= v224)
          goto LABEL_259;
        goto LABEL_234;
      }
      v226 = *(char **)v220;
      v227 = (uint64_t)&v222[-*(_QWORD *)v220];
      v228 = v227 >> 2;
      v229 = (v227 >> 2) + 1;
      if (v229 >> 62)
        sub_20E867F44();
      v230 = v221 - (_QWORD)v226;
      if (v230 >> 1 > v229)
        v229 = v230 >> 1;
      v231 = (unint64_t)v230 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v229;
      if (!v231)
        break;
      if (v231 >> 62)
        sub_20E877A38();
      v232 = operator new(4 * v231);
      v233 = &v232[4 * v228];
      *v233 = v219;
      v234 = (uint64_t)(v233 + 1);
      v235 = v222 - v226;
      if (v222 != v226)
        goto LABEL_250;
LABEL_256:
      *(_QWORD *)v220 = v233;
      *(_QWORD *)(v220 + 8) = v234;
      *(_QWORD *)(v220 + 16) = &v232[4 * v231];
      if (v226)
        operator delete(v226);
      v214 = (_QWORD *)a2;
      *(_QWORD *)(v220 + 8) = v234;
      v223 = a1[6];
      v225 = *(char **)(v223 + 8);
      v224 = *(_QWORD *)(v223 + 16);
      if ((unint64_t)v225 >= v224)
      {
LABEL_259:
        v245 = *(char **)v223;
        v246 = (uint64_t)&v225[-*(_QWORD *)v223];
        v247 = v246 >> 2;
        v248 = (v246 >> 2) + 1;
        if (v248 >> 62)
          sub_20E867F44();
        v249 = v224 - (_QWORD)v245;
        if (v249 >> 1 > v248)
          v248 = v249 >> 1;
        if ((unint64_t)v249 >= 0x7FFFFFFFFFFFFFFCLL)
          v250 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v250 = v248;
        if (v250)
        {
          if (v250 >> 62)
            sub_20E877A38();
          v251 = operator new(4 * v250);
          v252 = (unsigned int *)&v251[4 * v247];
          *v252 = v271;
          v218 = (uint64_t)(v252 + 1);
          v253 = v225 - v245;
          if (v225 == v245)
            goto LABEL_276;
LABEL_270:
          v254 = v253 - 4;
          if (v254 < 0x2C)
            goto LABEL_293;
          if ((unint64_t)(v225 - &v251[v246]) < 0x20)
            goto LABEL_293;
          v255 = (v254 >> 2) + 1;
          v256 = 4 * (v255 & 0x7FFFFFFFFFFFFFF8);
          v257 = &v225[-v256];
          v252 = (unsigned int *)((char *)v252 - v256);
          v258 = &v251[v246 - 16];
          v259 = v225 - 16;
          v260 = v255 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v261 = *(_OWORD *)v259;
            *(v258 - 1) = *((_OWORD *)v259 - 1);
            *v258 = v261;
            v258 -= 2;
            v259 -= 32;
            v260 -= 8;
          }
          while (v260);
          v225 = v257;
          if (v255 != (v255 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_293:
            do
            {
              v262 = *((_DWORD *)v225 - 1);
              v225 -= 4;
              *--v252 = v262;
            }
            while (v225 != v245);
          }
        }
        else
        {
          v251 = 0;
          v252 = (unsigned int *)(4 * v247);
          *(_DWORD *)(4 * v247) = v271;
          v218 = 4 * v247 + 4;
          v253 = v225 - v245;
          if (v225 != v245)
            goto LABEL_270;
        }
LABEL_276:
        *(_QWORD *)v223 = v252;
        *(_QWORD *)(v223 + 8) = v218;
        *(_QWORD *)(v223 + 16) = &v251[4 * v250];
        if (v245)
          operator delete(v245);
        goto LABEL_235;
      }
LABEL_234:
      *(_DWORD *)v225 = v271;
      v218 = (uint64_t)(v225 + 4);
LABEL_235:
      *(_QWORD *)(v223 + 8) = v218;
      if (!*v217)
        goto LABEL_231;
    }
    v232 = 0;
    v233 = (_DWORD *)(4 * v228);
    *(_DWORD *)(4 * v228) = v219;
    v234 = 4 * v228 + 4;
    v235 = v222 - v226;
    if (v222 == v226)
      goto LABEL_256;
LABEL_250:
    v236 = v235 - 4;
    if (v236 < 0x2C)
      goto LABEL_294;
    if ((unint64_t)(v222 - v232 - v227) < 0x20)
      goto LABEL_294;
    v237 = (v236 >> 2) + 1;
    v238 = 4 * (v237 & 0x7FFFFFFFFFFFFFF8);
    v239 = &v222[-v238];
    v233 = (_DWORD *)((char *)v233 - v238);
    v240 = &v232[v227 - 16];
    v241 = v222 - 16;
    v242 = v237 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v243 = *(_OWORD *)v241;
      *(v240 - 1) = *((_OWORD *)v241 - 1);
      *v240 = v243;
      v240 -= 2;
      v241 -= 32;
      v242 -= 8;
    }
    while (v242);
    v222 = v239;
    if (v237 != (v237 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_294:
      do
      {
        v244 = *((_DWORD *)v222 - 1);
        v222 -= 4;
        *--v233 = v244;
      }
      while (v222 != v226);
    }
    goto LABEL_256;
  }
LABEL_278:
  if (__p)
    operator delete(__p);
}

void sub_20F24866C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  if (v10)
    operator delete(v10);
  _Unwind_Resume(exception_object);
}

void sub_20F24869C(uint64_t a1, uint64_t a2)
{
  unsigned int ***v3;
  float v4;
  unsigned int **v5;
  unsigned int *v6;
  unsigned int *v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  size_t v11;
  int8x16_t *v12;
  char *i8;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int8x16_t *v34;
  BOOL v35;
  unsigned int *v42;
  unsigned int *v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  int8x16_t *v54;
  unsigned int v55;
  BOOL v56;
  unsigned int *v57;
  unsigned int *v58;
  unsigned int v59;
  _QWORD *v60;
  _DWORD *v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  _QWORD *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  _DWORD *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  _BYTE *v90;
  _DWORD *v91;
  int64_t v92;
  _DWORD *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  _OWORD *v98;
  char *v99;
  uint64_t v100;
  __int128 v101;
  int v102;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  _BYTE *v112;
  unsigned int *v113;
  _DWORD *v114;
  int64_t v115;
  unsigned int *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  _OWORD *v121;
  char *v122;
  uint64_t v123;
  __int128 v124;
  unsigned int v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v129;
  _QWORD *v130;
  _DWORD *v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int64_t v138;
  _QWORD *v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int v143;
  unsigned int v144;
  _QWORD *v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  unint64_t v151;
  char *v152;
  _DWORD *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  _BYTE *v160;
  _DWORD *v161;
  int64_t v162;
  _DWORD *v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  _OWORD *v168;
  char *v169;
  uint64_t v170;
  __int128 v171;
  int v172;
  uint64_t v173;
  unint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  _BYTE *v182;
  _DWORD *v183;
  _DWORD *v184;
  int64_t v185;
  _DWORD *v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  _OWORD *v191;
  char *v192;
  uint64_t v193;
  __int128 v194;
  int v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  int8x16_t *v200;
  int8x16_t v201;
  int8x16_t v202;
  int8x16_t *v203;
  int8x16_t v204;
  int8x16_t v205;
  unsigned int v206;
  unsigned int v207;
  unsigned int v208;
  int v209;
  int8x16_t v210;
  int8x16_t v211;
  int8x16_t v212;
  int8x16_t v213;
  unsigned int v214;
  uint64_t v215;
  uint64_t v216;
  int8x16_t *v217;
  __int128 *v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  unint64_t v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  void *v229;
  void *v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  int8x16_t *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  int8x16_t *v240;
  _BOOL4 v248;
  uint64_t v249;
  int8x16_t v250;
  int8x16_t v251;
  unsigned int v252;
  int8x16_t *v253;
  unsigned int v254;
  unsigned int v255;
  int v256;
  int8x16_t v257;
  int8x16_t v258;
  int8x16_t v259;
  int8x16_t v260;
  int8x16_t v261;
  int8x16_t v262;
  unsigned int v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t v268;
  _QWORD *v269;
  _DWORD *v270;
  uint64_t v271;
  unsigned int v272;
  _DWORD *v273;
  int v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  int64_t v279;
  _QWORD *v280;
  _QWORD *v281;
  uint64_t v282;
  uint64_t v283;
  unsigned int v284;
  unsigned int v285;
  _QWORD *v286;
  uint64_t v287;
  unint64_t v288;
  uint64_t v289;
  _QWORD *v290;
  uint64_t v291;
  unint64_t v292;
  char *v293;
  _DWORD *v294;
  char *v295;
  uint64_t v296;
  uint64_t v297;
  unint64_t v298;
  uint64_t v299;
  unint64_t v300;
  _BYTE *v301;
  _DWORD *v302;
  int64_t v303;
  _DWORD *v304;
  unint64_t v305;
  uint64_t v306;
  uint64_t v307;
  char *v308;
  _OWORD *v309;
  char *v310;
  uint64_t v311;
  __int128 v312;
  int v313;
  uint64_t v314;
  unint64_t v315;
  char *v316;
  char *v317;
  uint64_t v318;
  uint64_t v319;
  unint64_t v320;
  uint64_t v321;
  unint64_t v322;
  _BYTE *v323;
  unsigned int *v324;
  int64_t v325;
  unsigned int *v326;
  unint64_t v327;
  uint64_t v328;
  uint64_t v329;
  char *v330;
  _OWORD *v331;
  char *v332;
  uint64_t v333;
  __int128 v334;
  unsigned int v335;
  int8x16_t *v336;
  uint64_t v337;
  unsigned int *v338;
  uint64_t v339;
  uint64_t v340;
  unsigned int **v341;
  unsigned int *v342;
  uint64_t v343;
  void *__p;
  void *v346;
  uint64_t v347;
  uint64_t v348;

  v3 = *(unsigned int ****)(a1 + 8);
  v4 = **(float **)a1;
  if (!*((_BYTE *)v3 + 8))
  {
    v15 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) - **(_QWORD **)(a1 + 16)) >> 6;
    v16 = **(_QWORD **)(a1 + 24);
    __p = 0;
    v346 = 0;
    v347 = 0;
    v348 = v16;
    v17 = *(_QWORD *)(a2 + 8);
    v18 = 0xCCCCCCCCCCCCCCCDLL * ((v17 - *(_QWORD *)a2) >> 3);
    if (v15 <= v18)
    {
      if (v15 < v18)
      {
        v27 = *(_QWORD *)a2 + 40 * v15;
        if (v17 != v27)
        {
          v28 = *(_QWORD *)(a2 + 8);
          do
          {
            v30 = *(void **)(v28 - 40);
            v28 -= 40;
            v29 = v30;
            if (v30)
            {
              *(_QWORD *)(v17 - 32) = v29;
              operator delete(v29);
            }
            v17 = v28;
          }
          while (v28 != v27);
        }
        *(_QWORD *)(a2 + 8) = v27;
      }
    }
    else
    {
      sub_20EDD1DC0((char **)a2, v15 - v18, (uint64_t)&__p);
      if (__p)
      {
        v346 = __p;
        operator delete(__p);
      }
    }
    v126 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) - **(_QWORD **)(a1 + 16);
    v127 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) - **(_QWORD **)(a1 + 32);
    if ((v127 & 0x3FFFFFFFC0) != 0 && (v126 & 0x3FFFFFFFC0) != 0)
    {
      v196 = 0;
      v197 = (v126 >> 6);
      v198 = (v127 >> 6);
      do
      {
        v199 = 0;
        v200 = (int8x16_t *)(**(_QWORD **)(a1 + 32) + (v196 << 6));
        v201 = *v200;
        v202 = v200[1];
        v203 = (int8x16_t *)(**(_QWORD **)(a1 + 16) + 32);
        v204 = v200[2];
        v205 = v200[3];
        v206 = -1;
        v207 = -1;
        v208 = -1;
        v209 = -1;
        do
        {
          v210 = v203[-2];
          v211 = v203[-1];
          v212 = *v203;
          v213 = v203[1];
          v203 += 4;
          v214 = vaddlvq_u8((uint8x16_t)vaddq_s8(vaddq_s8(vcntq_s8(veorq_s8(v211, v202)), vcntq_s8(veorq_s8(v210, v201))), vaddq_s8(vcntq_s8(veorq_s8(v212, v204)), vcntq_s8(veorq_s8(v213, v205)))));
          if (v214 < v207)
          {
            v209 = v199;
            v207 = v214;
          }
          if (v214 < v208)
          {
            v209 = v206;
            v207 = v208;
            v208 = v214;
            v206 = v199;
          }
          ++v199;
        }
        while (v197 != v199);
        if (v206 != -1 && v209 != -1 && (float)(v4 * (float)v207) > (float)v208)
          sub_20EDD1370(*(_QWORD *)a2 + 40 * v206, v208, v196);
        ++v196;
      }
      while (v196 != v198);
    }
    v343 = -858993459 * ((*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
    if (!(_DWORD)v343)
      return;
    v129 = 0;
    while (1)
    {
      v130 = (_QWORD *)(*(_QWORD *)a2 + 40 * v129);
      v131 = (_DWORD *)*v130;
      v132 = v130[1];
      if (*v130 != v132)
        break;
LABEL_136:
      if (++v129 == v343)
        return;
    }
    while (1)
    {
      v133 = *v131;
      v134 = v132 - (_QWORD)v131;
      if (v132 - (uint64_t)v131 < 9)
        goto LABEL_154;
      v135 = 0;
      v136 = v134 >> 3;
      v137 = *(_QWORD *)v131;
      v138 = (unint64_t)((v134 >> 3) - 2) >> 1;
      v139 = v131;
      do
      {
        v140 = &v139[v135 + 1];
        v141 = (2 * v135) | 1;
        v142 = 2 * v135 + 2;
        if (v142 < v136)
        {
          v143 = *((_DWORD *)v140 + 1);
          v144 = *((_DWORD *)v140 + 3);
          v140 += v143 < v144;
          if (v143 < v144)
            v141 = v142;
        }
        *v139 = *v140;
        v139 = v140;
        v135 = v141;
      }
      while (v141 <= v138);
      v145 = (_QWORD *)(v132 - 8);
      if (v140 == v145)
        goto LABEL_153;
      *v140 = *v145;
      *v145 = v137;
      v146 = (char *)v140 - (char *)v131 + 8;
      if (v146 >= 9)
      {
        v147 = (((unint64_t)v146 >> 3) - 2) >> 1;
        if (v131[2 * v147 + 1] < *((_DWORD *)v140 + 1))
          break;
      }
LABEL_154:
      v130[1] -= 8;
      v150 = *(_QWORD *)(a1 + 40);
      v152 = *(char **)(v150 + 8);
      v151 = *(_QWORD *)(v150 + 16);
      if ((unint64_t)v152 >= v151)
      {
        v154 = *(char **)v150;
        v155 = (uint64_t)&v152[-*(_QWORD *)v150];
        v156 = v155 >> 2;
        v157 = (v155 >> 2) + 1;
        if (v157 >> 62)
          goto LABEL_325;
        v158 = v151 - (_QWORD)v154;
        if (v158 >> 1 > v157)
          v157 = v158 >> 1;
        if ((unint64_t)v158 >= 0x7FFFFFFFFFFFFFFCLL)
          v159 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v159 = v157;
        if (v159)
        {
          if (v159 >> 62)
            goto LABEL_326;
          v160 = operator new(4 * v159);
          v161 = &v160[4 * v156];
          *v161 = v133;
          v153 = v161 + 1;
          v162 = v152 - v154;
          if (v152 == v154)
            goto LABEL_173;
LABEL_167:
          v164 = v162 - 4;
          if (v164 < 0x2C)
            goto LABEL_333;
          if ((unint64_t)(v152 - v160 - v155) < 0x20)
            goto LABEL_333;
          v165 = (v164 >> 2) + 1;
          v166 = 4 * (v165 & 0x7FFFFFFFFFFFFFF8);
          v167 = &v152[-v166];
          v161 = (_DWORD *)((char *)v161 - v166);
          v168 = &v160[v155 - 16];
          v169 = v152 - 16;
          v170 = v165 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v171 = *(_OWORD *)v169;
            *(v168 - 1) = *((_OWORD *)v169 - 1);
            *v168 = v171;
            v168 -= 2;
            v169 -= 32;
            v170 -= 8;
          }
          while (v170);
          v152 = v167;
          if (v165 != (v165 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_333:
            do
            {
              v172 = *((_DWORD *)v152 - 1);
              v152 -= 4;
              *--v161 = v172;
            }
            while (v152 != v154);
          }
        }
        else
        {
          v160 = 0;
          v161 = (_DWORD *)(4 * v156);
          v163 = (_DWORD *)(4 * v156);
          *v163 = v133;
          v153 = v163 + 1;
          v162 = v152 - v154;
          if (v152 != v154)
            goto LABEL_167;
        }
LABEL_173:
        *(_QWORD *)v150 = v161;
        *(_QWORD *)(v150 + 8) = v153;
        *(_QWORD *)(v150 + 16) = &v160[4 * v159];
        if (v154)
          operator delete(v154);
        goto LABEL_175;
      }
      *(_DWORD *)v152 = v133;
      v153 = v152 + 4;
LABEL_175:
      *(_QWORD *)(v150 + 8) = v153;
      v173 = *(_QWORD *)(a1 + 48);
      v175 = *(char **)(v173 + 8);
      v174 = *(_QWORD *)(v173 + 16);
      if ((unint64_t)v175 < v174)
      {
        *(_DWORD *)v175 = v129;
        *(_QWORD *)(v173 + 8) = v175 + 4;
        v131 = (_DWORD *)*v130;
        v132 = v130[1];
        if (*v130 == v132)
          goto LABEL_136;
      }
      else
      {
        v176 = *(char **)v173;
        v177 = (uint64_t)&v175[-*(_QWORD *)v173];
        v178 = v177 >> 2;
        v179 = (v177 >> 2) + 1;
        if (v179 >> 62)
LABEL_325:
          sub_20E867F44();
        v180 = v174 - (_QWORD)v176;
        if (v180 >> 1 > v179)
          v179 = v180 >> 1;
        if ((unint64_t)v180 >= 0x7FFFFFFFFFFFFFFCLL)
          v181 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v181 = v179;
        if (v181)
        {
          if (v181 >> 62)
LABEL_326:
            sub_20E877A38();
          v182 = operator new(4 * v181);
          v183 = &v182[4 * v178];
          *v183 = v129;
          v184 = v183 + 1;
          v185 = v175 - v176;
          if (v175 == v176)
            goto LABEL_193;
LABEL_187:
          v187 = v185 - 4;
          if (v187 < 0x2C)
            goto LABEL_334;
          if ((unint64_t)(v175 - &v182[v177]) < 0x20)
            goto LABEL_334;
          v188 = (v187 >> 2) + 1;
          v189 = 4 * (v188 & 0x7FFFFFFFFFFFFFF8);
          v190 = &v175[-v189];
          v183 = (_DWORD *)((char *)v183 - v189);
          v191 = &v182[v177 - 16];
          v192 = v175 - 16;
          v193 = v188 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v194 = *(_OWORD *)v192;
            *(v191 - 1) = *((_OWORD *)v192 - 1);
            *v191 = v194;
            v191 -= 2;
            v192 -= 32;
            v193 -= 8;
          }
          while (v193);
          v175 = v190;
          if (v188 != (v188 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_334:
            do
            {
              v195 = *((_DWORD *)v175 - 1);
              v175 -= 4;
              *--v183 = v195;
            }
            while (v175 != v176);
          }
          goto LABEL_193;
        }
        v182 = 0;
        v183 = (_DWORD *)(4 * v178);
        v186 = (_DWORD *)(4 * v178);
        *v186 = v129;
        v184 = v186 + 1;
        v185 = v175 - v176;
        if (v175 != v176)
          goto LABEL_187;
LABEL_193:
        *(_QWORD *)v173 = v183;
        *(_QWORD *)(v173 + 8) = v184;
        *(_QWORD *)(v173 + 16) = &v182[4 * v181];
        if (v176)
          operator delete(v176);
        *(_QWORD *)(v173 + 8) = v184;
        v131 = (_DWORD *)*v130;
        v132 = v130[1];
        if (*v130 == v132)
          goto LABEL_136;
      }
    }
    v137 = *v140;
    v148 = HIDWORD(*v140);
    do
    {
      v149 = v140;
      v140 = &v131[2 * v147];
      *v149 = *v140;
      if (!v147)
        break;
      v147 = (v147 - 1) >> 1;
    }
    while (v131[2 * v147 + 1] < v148);
LABEL_153:
    *v140 = v137;
    goto LABEL_154;
  }
  v5 = *v3;
  v7 = **v3;
  v6 = (*v3)[1];
  v8 = (char *)v6 - (char *)v7;
  v341 = *v3;
  if ((unint64_t)((char *)v6 - (char *)v7) >= 0xFA0)
  {
    v10 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) - **(_QWORD **)(a1 + 16)) >> 6;
LABEL_11:
    v19 = **(_QWORD **)(a1 + 24);
    __p = 0;
    v346 = 0;
    v347 = 0;
    v348 = v19;
    v20 = *(_QWORD *)(a2 + 8);
    v21 = 0xCCCCCCCCCCCCCCCDLL * ((v20 - *(_QWORD *)a2) >> 3);
    if (v10 <= v21)
    {
      if (v10 < v21)
      {
        v22 = *(_QWORD *)a2 + 40 * v10;
        v23 = a2;
        if (v20 != v22)
        {
          v24 = *(_QWORD *)(a2 + 8);
          do
          {
            v26 = *(void **)(v24 - 40);
            v24 -= 40;
            v25 = v26;
            if (v26)
            {
              *(_QWORD *)(v20 - 32) = v25;
              operator delete(v25);
              v23 = a2;
            }
            v20 = v24;
          }
          while (v24 != v22);
        }
        *(_QWORD *)(v23 + 8) = v22;
      }
    }
    else
    {
      sub_20EDD1DC0((char **)a2, v10 - v21, (uint64_t)&__p);
      if (__p)
      {
        v346 = __p;
        operator delete(__p);
      }
    }
    v31 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) - **(_QWORD **)(a1 + 32);
    if ((v31 & 0x3FFFFFFFC0) != 0)
    {
      v32 = 0;
      v33 = (v31 >> 6);
      do
      {
        v34 = (int8x16_t *)(**(_QWORD **)(a1 + 32) + (v32 << 6));
        if (v34->i64[0])
          v35 = 0;
        else
          v35 = v34->i64[1] == 0;
        if (!v35
          || v34[1].i64[0] != 0
          || v34[1].i64[1] != 0
          || v34[2].i64[0] != 0
          || v34[2].i64[1] != 0
          || v34[3].i64[0] != 0
          || v34[3].i64[1] != 0)
        {
          v42 = *v341;
          v43 = v341[1];
          if (*v341 != v43)
          {
            v44 = *v34;
            v45 = v34[1];
            v46 = v34[2];
            v47 = v34[3];
            v48 = -1;
            v49 = -1;
            v50 = -1;
            v51 = -1;
            do
            {
              v53 = *v42++;
              v52 = v53;
              v54 = (int8x16_t *)(**(_QWORD **)(a1 + 16) + ((unint64_t)v53 << 6));
              v55 = vaddlvq_u8((uint8x16_t)vaddq_s8(vaddq_s8(vcntq_s8(veorq_s8(v54[1], v45)), vcntq_s8(veorq_s8(*v54, v44))), vaddq_s8(vcntq_s8(veorq_s8(v54[2], v46)), vcntq_s8(veorq_s8(v54[3], v47)))));
              if (v55 < v49)
              {
                v51 = v52;
                v49 = v55;
              }
              if (v55 < v50)
              {
                v51 = v48;
                v49 = v50;
                v50 = v55;
                v48 = v52;
              }
            }
            while (v42 != v43);
            v56 = v48 == -1 || v51 == -1;
            if (!v56 && (float)(v4 * (float)v49) > (float)v50)
              sub_20EDD1370(*(_QWORD *)a2 + 40 * v48, v50, v32);
          }
        }
        ++v32;
      }
      while (v32 != v33);
    }
    v58 = *v341;
    v57 = v341[1];
    v338 = v57;
    while (1)
    {
      if (v58 == v57)
        return;
      v342 = v58;
      v59 = *v58;
      v60 = (_QWORD *)(*(_QWORD *)a2 + 40 * *v58);
      v61 = (_DWORD *)*v60;
      v62 = v60[1];
      if (*v60 != v62)
        break;
LABEL_66:
      v57 = v338;
      v58 = v342 + 1;
    }
    while (1)
    {
      v63 = *v61;
      v64 = v62 - (_QWORD)v61;
      if (v62 - (uint64_t)v61 < 9)
        goto LABEL_85;
      v65 = 0;
      v66 = v64 >> 3;
      v67 = *(_QWORD *)v61;
      v68 = (unint64_t)((v64 >> 3) - 2) >> 1;
      v69 = v61;
      do
      {
        v70 = &v69[v65 + 1];
        v71 = (2 * v65) | 1;
        v72 = 2 * v65 + 2;
        if (v72 < v66)
        {
          v73 = *((_DWORD *)v70 + 1);
          v74 = *((_DWORD *)v70 + 3);
          v70 += v73 < v74;
          if (v73 < v74)
            v71 = v72;
        }
        *v69 = *v70;
        v69 = v70;
        v65 = v71;
      }
      while (v71 <= v68);
      v75 = (_QWORD *)(v62 - 8);
      if (v70 == v75)
        goto LABEL_84;
      *v70 = *v75;
      *v75 = v67;
      v76 = (char *)v70 - (char *)v61 + 8;
      if (v76 >= 9)
      {
        v77 = (((unint64_t)v76 >> 3) - 2) >> 1;
        if (v61[2 * v77 + 1] < *((_DWORD *)v70 + 1))
          break;
      }
LABEL_85:
      v60[1] -= 8;
      v80 = *(_QWORD *)(a1 + 40);
      v82 = *(char **)(v80 + 8);
      v81 = *(_QWORD *)(v80 + 16);
      if ((unint64_t)v82 >= v81)
      {
        v84 = *(char **)v80;
        v85 = (uint64_t)&v82[-*(_QWORD *)v80];
        v86 = v85 >> 2;
        v87 = (v85 >> 2) + 1;
        if (v87 >> 62)
          goto LABEL_325;
        v88 = v81 - (_QWORD)v84;
        if (v88 >> 1 > v87)
          v87 = v88 >> 1;
        if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFFCLL)
          v89 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v89 = v87;
        if (v89)
        {
          if (v89 >> 62)
            goto LABEL_326;
          v90 = operator new(4 * v89);
          v91 = &v90[4 * v86];
          *v91 = v63;
          v83 = v91 + 1;
          v92 = v82 - v84;
          if (v82 == v84)
            goto LABEL_104;
LABEL_98:
          v94 = v92 - 4;
          if (v94 < 0x2C)
            goto LABEL_335;
          if ((unint64_t)(v82 - v90 - v85) < 0x20)
            goto LABEL_335;
          v95 = (v94 >> 2) + 1;
          v96 = 4 * (v95 & 0x7FFFFFFFFFFFFFF8);
          v97 = &v82[-v96];
          v91 = (_DWORD *)((char *)v91 - v96);
          v98 = &v90[v85 - 16];
          v99 = v82 - 16;
          v100 = v95 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v101 = *(_OWORD *)v99;
            *(v98 - 1) = *((_OWORD *)v99 - 1);
            *v98 = v101;
            v98 -= 2;
            v99 -= 32;
            v100 -= 8;
          }
          while (v100);
          v82 = v97;
          if (v95 != (v95 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_335:
            do
            {
              v102 = *((_DWORD *)v82 - 1);
              v82 -= 4;
              *--v91 = v102;
            }
            while (v82 != v84);
          }
        }
        else
        {
          v90 = 0;
          v91 = (_DWORD *)(4 * v86);
          v93 = (_DWORD *)(4 * v86);
          *v93 = v63;
          v83 = v93 + 1;
          v92 = v82 - v84;
          if (v82 != v84)
            goto LABEL_98;
        }
LABEL_104:
        *(_QWORD *)v80 = v91;
        *(_QWORD *)(v80 + 8) = v83;
        *(_QWORD *)(v80 + 16) = &v90[4 * v89];
        if (v84)
          operator delete(v84);
        goto LABEL_106;
      }
      *(_DWORD *)v82 = v63;
      v83 = v82 + 4;
LABEL_106:
      *(_QWORD *)(v80 + 8) = v83;
      v103 = *(_QWORD *)(a1 + 48);
      v105 = *(char **)(v103 + 8);
      v104 = *(_QWORD *)(v103 + 16);
      if ((unint64_t)v105 < v104)
      {
        *(_DWORD *)v105 = v59;
        *(_QWORD *)(v103 + 8) = v105 + 4;
        v61 = (_DWORD *)*v60;
        v62 = v60[1];
        if (*v60 == v62)
          goto LABEL_66;
      }
      else
      {
        v106 = *(char **)v103;
        v107 = (uint64_t)&v105[-*(_QWORD *)v103];
        v108 = v107 >> 2;
        v109 = (v107 >> 2) + 1;
        if (v109 >> 62)
          goto LABEL_325;
        v110 = v104 - (_QWORD)v106;
        if (v110 >> 1 > v109)
          v109 = v110 >> 1;
        if ((unint64_t)v110 >= 0x7FFFFFFFFFFFFFFCLL)
          v111 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v111 = v109;
        if (v111)
        {
          if (v111 >> 62)
            goto LABEL_326;
          v112 = operator new(4 * v111);
          v113 = (unsigned int *)&v112[4 * v108];
          *v113 = v59;
          v114 = v113 + 1;
          v115 = v105 - v106;
          if (v105 == v106)
            goto LABEL_124;
LABEL_118:
          v117 = v115 - 4;
          if (v117 < 0x2C)
            goto LABEL_336;
          if ((unint64_t)(v105 - &v112[v107]) < 0x20)
            goto LABEL_336;
          v118 = (v117 >> 2) + 1;
          v119 = 4 * (v118 & 0x7FFFFFFFFFFFFFF8);
          v120 = &v105[-v119];
          v113 = (unsigned int *)((char *)v113 - v119);
          v121 = &v112[v107 - 16];
          v122 = v105 - 16;
          v123 = v118 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v124 = *(_OWORD *)v122;
            *(v121 - 1) = *((_OWORD *)v122 - 1);
            *v121 = v124;
            v121 -= 2;
            v122 -= 32;
            v123 -= 8;
          }
          while (v123);
          v105 = v120;
          if (v118 != (v118 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_336:
            do
            {
              v125 = *((_DWORD *)v105 - 1);
              v105 -= 4;
              *--v113 = v125;
            }
            while (v105 != v106);
          }
          goto LABEL_124;
        }
        v112 = 0;
        v113 = (unsigned int *)(4 * v108);
        v116 = (unsigned int *)(4 * v108);
        *v116 = v59;
        v114 = v116 + 1;
        v115 = v105 - v106;
        if (v105 != v106)
          goto LABEL_118;
LABEL_124:
        *(_QWORD *)v103 = v113;
        *(_QWORD *)(v103 + 8) = v114;
        *(_QWORD *)(v103 + 16) = &v112[4 * v111];
        if (v106)
          operator delete(v106);
        *(_QWORD *)(v103 + 8) = v114;
        v61 = (_DWORD *)*v60;
        v62 = v60[1];
        if (*v60 == v62)
          goto LABEL_66;
      }
    }
    v67 = *v70;
    v78 = HIDWORD(*v70);
    do
    {
      v79 = v70;
      v70 = &v61[2 * v77];
      *v79 = *v70;
      if (!v77)
        break;
      v77 = (v77 - 1) >> 1;
    }
    while (v61[2 * v77 + 1] < v78);
LABEL_84:
    *v70 = v67;
    goto LABEL_85;
  }
  v9 = *(_QWORD **)(a1 + 16);
  v10 = (uint64_t)(v9[1] - *v9) >> 6;
  if (v8 >> 2 >= v10 >> 2)
    goto LABEL_11;
  if (v6 == v7)
  {
    v12 = 0;
    i8 = 0;
  }
  else
  {
    v11 = v8;
    v12 = (int8x16_t *)operator new(16 * v8);
    bzero(v12, v11 * 16);
    i8 = v12[v11].i8;
    v14 = (char *)v5[1] - (char *)*v5;
    if ((v14 & 0x3FFFFFFFCLL) != 0)
    {
      v215 = 0;
      v216 = (v14 >> 2);
      v217 = v12;
      do
      {
        v218 = (__int128 *)(*v9 + ((unint64_t)(*v5)[v215] << 6));
        v219 = *v218;
        v220 = v218[1];
        v221 = v218[3];
        v217[2] = (int8x16_t)v218[2];
        v217[3] = (int8x16_t)v221;
        *v217 = (int8x16_t)v219;
        v217[1] = (int8x16_t)v220;
        v217 += 4;
        ++v215;
      }
      while (v216 != v215);
    }
  }
  v222 = i8 - (char *)v12;
  v223 = (i8 - (char *)v12) >> 6;
  v224 = **(_QWORD **)(a1 + 24);
  __p = 0;
  v346 = 0;
  v347 = 0;
  v348 = v224;
  v225 = *(_QWORD *)(a2 + 8);
  v226 = 0xCCCCCCCCCCCCCCCDLL * ((v225 - *(_QWORD *)a2) >> 3);
  if (v223 <= v226)
  {
    if (v223 < v226)
    {
      v227 = *(_QWORD *)a2 + 40 * v223;
      if (v225 != v227)
      {
        v228 = *(_QWORD *)(a2 + 8);
        do
        {
          v230 = *(void **)(v228 - 40);
          v228 -= 40;
          v229 = v230;
          if (v230)
          {
            *(_QWORD *)(v225 - 32) = v229;
            operator delete(v229);
          }
          v225 = v228;
        }
        while (v228 != v227);
      }
      *(_QWORD *)(a2 + 8) = v227;
    }
  }
  else
  {
    sub_20EDD1DC0((char **)a2, v223 - v226, (uint64_t)&__p);
    if (__p)
    {
      v346 = __p;
      operator delete(__p);
    }
  }
  v336 = v12;
  v231 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) - **(_QWORD **)(a1 + 32);
  if ((v231 & 0x3FFFFFFFC0) != 0)
  {
    v232 = 0;
    v233 = v222 & 0x3FFFFFFFC0;
    v234 = (v222 >> 6);
    v235 = (v231 >> 6);
    v236 = v12 + 2;
    v237 = 0;
    v238 = 0;
    v239 = 0;
    v339 = v235;
    do
    {
      v240 = (int8x16_t *)(**(_QWORD **)(a1 + 32) + (v232 << 6));
      v248 = v240->i64[0] != v237
          || v240->i64[1] != v238
          || v240[1].i64[0] != v239
          || v240[1].i64[1] != 0
          || v240[2].i64[0] != 0
          || v240[2].i64[1] != 0
          || v240[3].i64[0] != 0
          || v240[3].i64[1] != 0;
      if (v233 && v248)
      {
        v249 = 0;
        v250 = *v240;
        v251 = v240[1];
        v252 = -1;
        v253 = v236;
        v254 = -1;
        v255 = -1;
        v256 = -1;
        v257 = v240[2];
        v258 = v240[3];
        do
        {
          v259 = v253[-2];
          v260 = v253[-1];
          v261 = *v253;
          v262 = v253[1];
          v253 += 4;
          v263 = vaddlvq_u8((uint8x16_t)vaddq_s8(vaddq_s8(vcntq_s8(veorq_s8(v260, v251)), vcntq_s8(veorq_s8(v259, v250))), vaddq_s8(vcntq_s8(veorq_s8(v261, v257)), vcntq_s8(veorq_s8(v262, v258)))));
          if (v263 < v254)
          {
            v256 = v249;
            v254 = v263;
          }
          if (v263 < v255)
          {
            v256 = v252;
            v254 = v255;
            v255 = v263;
            v252 = v249;
          }
          ++v249;
        }
        while (v234 != v249);
        if (v252 != -1 && v256 != -1 && (float)(v4 * (float)v254) > (float)v255)
        {
          v264 = v237;
          v265 = v238;
          v266 = v239;
          sub_20EDD1370(*(_QWORD *)a2 + 40 * v252, v255, v232);
          v239 = v266;
          v238 = v265;
          v237 = v264;
          v235 = v339;
        }
      }
      ++v232;
    }
    while (v232 != v235);
  }
  v267 = (char *)v341[1] - (char *)*v341;
  if ((v267 & 0x3FFFFFFFCLL) != 0)
  {
    v268 = 0;
    v337 = (v267 >> 2);
    while (1)
    {
      v340 = v268;
      v269 = (_QWORD *)(*(_QWORD *)a2 + 40 * v268);
      v270 = (_DWORD *)*v269;
      v271 = v269[1];
      if (*v269 != v271)
        break;
LABEL_262:
      v268 = v340 + 1;
      if (v340 + 1 == v337)
        goto LABEL_322;
    }
    v272 = (*v341)[v268];
    while (1)
    {
      v274 = *v270;
      v275 = v271 - (_QWORD)v270;
      if (v271 - (uint64_t)v270 < 9)
        goto LABEL_281;
      v276 = 0;
      v277 = v275 >> 3;
      v278 = *(_QWORD *)v270;
      v279 = (unint64_t)((v275 >> 3) - 2) >> 1;
      v280 = v270;
      do
      {
        v281 = &v280[v276 + 1];
        v282 = (2 * v276) | 1;
        v283 = 2 * v276 + 2;
        if (v283 < v277)
        {
          v284 = *((_DWORD *)v281 + 1);
          v285 = *((_DWORD *)v281 + 3);
          v281 += v284 < v285;
          if (v284 < v285)
            v282 = v283;
        }
        *v280 = *v281;
        v280 = v281;
        v276 = v282;
      }
      while (v282 <= v279);
      v286 = (_QWORD *)(v271 - 8);
      if (v281 == v286)
        goto LABEL_280;
      *v281 = *v286;
      *v286 = v278;
      v287 = (char *)v281 - (char *)v270 + 8;
      if (v287 >= 9)
      {
        v288 = (((unint64_t)v287 >> 3) - 2) >> 1;
        if (v270[2 * v288 + 1] < *((_DWORD *)v281 + 1))
          break;
      }
LABEL_281:
      v269[1] -= 8;
      v291 = *(_QWORD *)(a1 + 40);
      v293 = *(char **)(v291 + 8);
      v292 = *(_QWORD *)(v291 + 16);
      if ((unint64_t)v293 < v292)
      {
        *(_DWORD *)v293 = v274;
        v294 = v293 + 4;
        goto LABEL_302;
      }
      v295 = *(char **)v291;
      v296 = (uint64_t)&v293[-*(_QWORD *)v291];
      v297 = v296 >> 2;
      v298 = (v296 >> 2) + 1;
      if (v298 >> 62)
        sub_20E867F44();
      v299 = v292 - (_QWORD)v295;
      if (v299 >> 1 > v298)
        v298 = v299 >> 1;
      if ((unint64_t)v299 >= 0x7FFFFFFFFFFFFFFCLL)
        v300 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v300 = v298;
      if (v300)
      {
        if (v300 >> 62)
          sub_20E877A38();
        v301 = operator new(4 * v300);
        v302 = &v301[4 * v297];
        *v302 = v274;
        v294 = v302 + 1;
        v303 = v293 - v295;
        if (v293 == v295)
          goto LABEL_300;
LABEL_294:
        v305 = v303 - 4;
        if (v305 < 0x2C)
          goto LABEL_337;
        if ((unint64_t)(v293 - v301 - v296) < 0x20)
          goto LABEL_337;
        v306 = (v305 >> 2) + 1;
        v307 = 4 * (v306 & 0x7FFFFFFFFFFFFFF8);
        v308 = &v293[-v307];
        v302 = (_DWORD *)((char *)v302 - v307);
        v309 = &v301[v296 - 16];
        v310 = v293 - 16;
        v311 = v306 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v312 = *(_OWORD *)v310;
          *(v309 - 1) = *((_OWORD *)v310 - 1);
          *v309 = v312;
          v309 -= 2;
          v310 -= 32;
          v311 -= 8;
        }
        while (v311);
        v293 = v308;
        if (v306 != (v306 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_337:
          do
          {
            v313 = *((_DWORD *)v293 - 1);
            v293 -= 4;
            *--v302 = v313;
          }
          while (v293 != v295);
        }
        goto LABEL_300;
      }
      v301 = 0;
      v302 = (_DWORD *)(4 * v297);
      v304 = (_DWORD *)(4 * v297);
      *v304 = v274;
      v294 = v304 + 1;
      v303 = v293 - v295;
      if (v293 != v295)
        goto LABEL_294;
LABEL_300:
      *(_QWORD *)v291 = v302;
      *(_QWORD *)(v291 + 8) = v294;
      *(_QWORD *)(v291 + 16) = &v301[4 * v300];
      if (v295)
        operator delete(v295);
LABEL_302:
      *(_QWORD *)(v291 + 8) = v294;
      v314 = *(_QWORD *)(a1 + 48);
      v316 = *(char **)(v314 + 8);
      v315 = *(_QWORD *)(v314 + 16);
      if ((unint64_t)v316 >= v315)
      {
        v317 = *(char **)v314;
        v318 = (uint64_t)&v316[-*(_QWORD *)v314];
        v319 = v318 >> 2;
        v320 = (v318 >> 2) + 1;
        if (v320 >> 62)
          sub_20E867F44();
        v321 = v315 - (_QWORD)v317;
        if (v321 >> 1 > v320)
          v320 = v321 >> 1;
        if ((unint64_t)v321 >= 0x7FFFFFFFFFFFFFFCLL)
          v322 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v322 = v320;
        if (v322)
        {
          if (v322 >> 62)
            sub_20E877A38();
          v323 = operator new(4 * v322);
          v324 = (unsigned int *)&v323[4 * v319];
          *v324 = v272;
          v273 = v324 + 1;
          v325 = v316 - v317;
          if (v316 == v317)
            goto LABEL_320;
LABEL_314:
          v327 = v325 - 4;
          if (v327 < 0x2C)
            goto LABEL_338;
          if ((unint64_t)(v316 - &v323[v318]) < 0x20)
            goto LABEL_338;
          v328 = (v327 >> 2) + 1;
          v329 = 4 * (v328 & 0x7FFFFFFFFFFFFFF8);
          v330 = &v316[-v329];
          v324 = (unsigned int *)((char *)v324 - v329);
          v331 = &v323[v318 - 16];
          v332 = v316 - 16;
          v333 = v328 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v334 = *(_OWORD *)v332;
            *(v331 - 1) = *((_OWORD *)v332 - 1);
            *v331 = v334;
            v331 -= 2;
            v332 -= 32;
            v333 -= 8;
          }
          while (v333);
          v316 = v330;
          if (v328 != (v328 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_338:
            do
            {
              v335 = *((_DWORD *)v316 - 1);
              v316 -= 4;
              *--v324 = v335;
            }
            while (v316 != v317);
          }
        }
        else
        {
          v323 = 0;
          v324 = (unsigned int *)(4 * v319);
          v326 = (unsigned int *)(4 * v319);
          *v326 = v272;
          v273 = v326 + 1;
          v325 = v316 - v317;
          if (v316 != v317)
            goto LABEL_314;
        }
LABEL_320:
        *(_QWORD *)v314 = v324;
        *(_QWORD *)(v314 + 8) = v273;
        *(_QWORD *)(v314 + 16) = &v323[4 * v322];
        if (v317)
          operator delete(v317);
        goto LABEL_266;
      }
      *(_DWORD *)v316 = v272;
      v273 = v316 + 4;
LABEL_266:
      *(_QWORD *)(v314 + 8) = v273;
      v270 = (_DWORD *)*v269;
      v271 = v269[1];
      if (*v269 == v271)
        goto LABEL_262;
    }
    v278 = *v281;
    v289 = HIDWORD(*v281);
    do
    {
      v290 = v281;
      v281 = &v270[2 * v288];
      *v290 = *v281;
      if (!v288)
        break;
      v288 = (v288 - 1) >> 1;
    }
    while (v270[2 * v288 + 1] < v289);
LABEL_280:
    *v281 = v278;
    goto LABEL_281;
  }
LABEL_322:
  if (v336)
    operator delete(v336);
}

void sub_20F249980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  void *v17;

  if (__p)
    operator delete(__p);
  if (v17)
    operator delete(v17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F2499E8(int a1, uint64_t a2, uint64_t *a3, os_log_t oslog, os_log_type_t type, uint64_t a6, const char **a7)
{
  size_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;
  const char *v14;
  size_t v15;
  size_t v16;
  _QWORD *p_dst;
  const char *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  char v23;
  _QWORD *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  _QWORD *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  __int128 v63;
  std::__shared_weak_count *v64;
  __int128 v65;
  _QWORD *__dst;
  __int128 v67;
  _BYTE v68[24];
  __int128 v69;
  uint64_t v70;
  _QWORD v71[3];

  v71[2] = *MEMORY[0x24BDAC8D0];
  if (a2 && *(_QWORD *)(a2 + 8))
  {
    v11 = _os_log_pack_size();
    v12 = (std::__shared_weak_count_vtbl *)operator new(v11, (std::align_val_t)8uLL);
    v13 = (std::__shared_weak_count *)operator new();
    v13->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v13->__shared_owners_ = 0;
    v13->__shared_weak_owners_ = 0;
    v13[1].__vftable = v12;
    *(_QWORD *)&v63 = v12;
    *((_QWORD *)&v63 + 1) = v12;
    v65 = 0uLL;
    v64 = v13;
    v14 = *a7;
    v15 = strlen(*a7);
    if (v15 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v16 = v15;
    if (v15 >= 0x17)
    {
      v20 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17)
        v20 = v15 | 7;
      v21 = v20 + 1;
      p_dst = operator new(v20 + 1);
      *(_QWORD *)&v67 = v16;
      *((_QWORD *)&v67 + 1) = v21 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v67) = v15;
      p_dst = &__dst;
      if (!v15)
      {
LABEL_13:
        *((_BYTE *)p_dst + v16) = 0;
        v22 = __dst;
        v71[0] = v67;
        *(_QWORD *)((char *)v71 + 7) = *(_QWORD *)((char *)&v67 + 7);
        v23 = HIBYTE(v67);
        v24 = operator new(0x38uLL);
        v24[1] = 0;
        v24[2] = 0;
        v24[3] = off_24C9ABC20;
        *v24 = &off_24C9ABBD0;
        v25 = v71[0];
        v24[4] = v22;
        v24[5] = v25;
        *(_QWORD *)((char *)v24 + 47) = *(_QWORD *)((char *)v71 + 7);
        *((_BYTE *)v24 + 55) = v23;
        v71[0] = 0;
        *(_QWORD *)((char *)v71 + 7) = 0;
        v26 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
        *(_QWORD *)&v65 = v24 + 3;
        *((_QWORD *)&v65 + 1) = v24;
        if (v26)
        {
          p_shared_owners = (unint64_t *)&v26->__shared_owners_;
          do
            v28 = __ldaxr(p_shared_owners);
          while (__stlxr(v28 - 1, p_shared_owners));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        *(_OWORD *)v68 = v63;
        *(_QWORD *)&v68[16] = v64;
        if (v64)
        {
          v29 = &v64->__shared_owners_;
          do
            v30 = __ldxr((unint64_t *)v29);
          while (__stxr(v30 + 1, (unint64_t *)v29));
        }
        v69 = v65;
        if (*((_QWORD *)&v65 + 1))
        {
          v31 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
          do
            v32 = __ldxr(v31);
          while (__stxr(v32 + 1, v31));
          v70 = v65;
          do
            v33 = __ldaxr(v31);
          while (__stlxr(v33 - 1, v31));
          if (!v33)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v65 + 1) + 16))(*((_QWORD *)&v65 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v65 + 1));
          }
        }
        else
        {
          v70 = v65;
        }
        if (v64)
        {
          v34 = &v64->__shared_owners_;
          do
            v35 = __ldaxr((unint64_t *)v34);
          while (__stlxr(v35 - 1, (unint64_t *)v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
            std::__shared_weak_count::__release_weak(v64);
          }
        }
        v36 = *(_QWORD *)v68;
        if (*(char *)(v70 + 31) >= 0)
          v37 = v70 + 8;
        else
          v37 = *(_QWORD *)(v70 + 8);
        v38 = _os_log_pack_fill();
        *(_DWORD *)v38 = 136315138;
        *(_QWORD *)(v38 + 4) = v37;
        v39 = operator new();
        v40 = *((unsigned __int8 *)a3 + 23);
        if ((v40 & 0x80u) == 0)
          v41 = a3;
        else
          v41 = (uint64_t *)*a3;
        if ((v40 & 0x80u) != 0)
          v40 = a3[1];
        *(_QWORD *)v39 = v36;
        *(_OWORD *)(v39 + 8) = *(_OWORD *)&v68[8];
        *(_QWORD *)&v68[8] = 0;
        *(_QWORD *)&v68[16] = 0;
        *(_OWORD *)(v39 + 24) = v69;
        v69 = 0uLL;
        *(_QWORD *)(v39 + 40) = v41;
        *(_QWORD *)(v39 + 48) = v40;
        *(_BYTE *)(v39 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v63 = v39;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a2 + 8) + 40))(*(_QWORD *)(a2 + 8), &v63);
        v42 = v63;
        *(_QWORD *)&v63 = 0;
        if (v42)
        {
          v43 = *(std::__shared_weak_count **)(v42 + 32);
          if (v43)
          {
            v44 = (unint64_t *)&v43->__shared_owners_;
            do
              v45 = __ldaxr(v44);
            while (__stlxr(v45 - 1, v44));
            if (!v45)
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v43);
            }
          }
          v46 = *(std::__shared_weak_count **)(v42 + 16);
          if (v46)
          {
            v47 = (unint64_t *)&v46->__shared_owners_;
            do
              v48 = __ldaxr(v47);
            while (__stlxr(v48 - 1, v47));
            if (!v48)
            {
              ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
              std::__shared_weak_count::__release_weak(v46);
            }
          }
          MEMORY[0x212BC6398](v42, 0x10F0C40B62ED6C6);
          v49 = __dst;
          __dst = 0;
          if (v49)
          {
            v50 = (std::__shared_weak_count *)v49[4];
            if (v50)
            {
              v51 = (unint64_t *)&v50->__shared_owners_;
              do
                v52 = __ldaxr(v51);
              while (__stlxr(v52 - 1, v51));
              if (!v52)
              {
                ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                std::__shared_weak_count::__release_weak(v50);
              }
            }
            v53 = (std::__shared_weak_count *)v49[2];
            if (v53)
            {
              v54 = (unint64_t *)&v53->__shared_owners_;
              do
                v55 = __ldaxr(v54);
              while (__stlxr(v55 - 1, v54));
              if (!v55)
              {
                ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                std::__shared_weak_count::__release_weak(v53);
              }
            }
            MEMORY[0x212BC6398](v49, 0x10F0C40B62ED6C6);
          }
        }
        v56 = (std::__shared_weak_count *)*((_QWORD *)&v69 + 1);
        if (*((_QWORD *)&v69 + 1))
        {
          v57 = (unint64_t *)(*((_QWORD *)&v69 + 1) + 8);
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
        v59 = *(std::__shared_weak_count **)&v68[16];
        if (*(_QWORD *)&v68[16])
        {
          v60 = (unint64_t *)(*(_QWORD *)&v68[16] + 8);
          do
            v61 = __ldaxr(v60);
          while (__stlxr(v61 - 1, v60));
          if (!v61)
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v59);
          }
        }
        return 0;
      }
    }
    memcpy(p_dst, v14, v16);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v18 = *a7;
  *(_DWORD *)v68 = 136315138;
  *(_QWORD *)&v68[4] = v18;
  v19 = (void *)_os_log_send_and_compose_impl();
  if (v19)
    free(v19);
  return 0;
}

void sub_20F249F60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20F249F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F249F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

char *sub_20F249FF0(void **a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char *v17;
  void *v18;
  void *v19;

  v3 = 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x249249249249249)
    sub_20E867F44();
  if (0xDB6DB6DB6DB6DB6ELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v4)
    v4 = 0xDB6DB6DB6DB6DB6ELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4)) >= 0x124924924924924)
    v5 = 0x249249249249249;
  else
    v5 = v4;
  if (v5 > 0x249249249249249)
    sub_20E877A38();
  v7 = 112 * v5;
  v8 = (char *)operator new(112 * v5);
  v9 = &v8[112 * v3];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  v10 = &v8[v7];
  *((_QWORD *)v9 + 2) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(v9 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(v9 + 40) = *(_OWORD *)(a2 + 40);
  *((_QWORD *)v9 + 7) = *(_QWORD *)(a2 + 56);
  *((_OWORD *)v9 + 4) = *(_OWORD *)(a2 + 64);
  *((_QWORD *)v9 + 10) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *((_QWORD *)v9 + 12) = 0;
  *((_QWORD *)v9 + 13) = 0;
  *(_OWORD *)(v9 + 88) = *(_OWORD *)(a2 + 88);
  *((_QWORD *)v9 + 13) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  v11 = v9 + 112;
  v12 = (char *)*a1;
  v13 = (char *)a1[1];
  if (v13 == *a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
  }
  else
  {
    do
    {
      v14 = *((_OWORD *)v13 - 7);
      *((_QWORD *)v9 - 12) = *((_QWORD *)v13 - 12);
      *((_OWORD *)v9 - 7) = v14;
      v15 = *(_OWORD *)(v13 - 88);
      v16 = *(_OWORD *)(v13 - 72);
      *((_QWORD *)v9 - 7) = *((_QWORD *)v13 - 7);
      *(_OWORD *)(v9 - 72) = v16;
      *(_OWORD *)(v9 - 88) = v15;
      *((_OWORD *)v9 - 3) = *((_OWORD *)v13 - 3);
      *((_QWORD *)v9 - 4) = *((_QWORD *)v13 - 4);
      *((_QWORD *)v13 - 6) = 0;
      *((_QWORD *)v13 - 5) = 0;
      *((_QWORD *)v13 - 4) = 0;
      *(_OWORD *)(v9 - 24) = *(_OWORD *)(v13 - 24);
      *((_QWORD *)v9 - 1) = *((_QWORD *)v13 - 1);
      v9 -= 112;
      *((_QWORD *)v13 - 3) = 0;
      *((_QWORD *)v13 - 2) = 0;
      *((_QWORD *)v13 - 1) = 0;
      v13 -= 112;
    }
    while (v13 != v12);
    v13 = (char *)*a1;
    v17 = (char *)a1[1];
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
    while (v17 != v13)
    {
      v18 = (void *)*((_QWORD *)v17 - 3);
      if (v18)
      {
        *((_QWORD *)v17 - 2) = v18;
        operator delete(v18);
      }
      v19 = (void *)*((_QWORD *)v17 - 6);
      if (v19)
      {
        *((_QWORD *)v17 - 5) = v19;
        operator delete(v19);
      }
      v17 -= 112;
    }
  }
  if (v13)
    operator delete(v13);
  return v11;
}

uint64_t sub_20F24A1E4(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  __n128 v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  unint64_t v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __n128 v40;
  _BYTE v41[24];

  v5 = (char *)*a1;
  v6 = a1[1];
  v7 = (uint64_t)(a2 - *a1) / 40;
  v8 = *a1 + 40 * v7;
  v9 = a1[2];
  if (v6 >= v9)
  {
    v17 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - (_QWORD)v5) >> 3) + 1;
    if (v17 > 0x666666666666666)
      sub_20E867F44();
    v18 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v9 - (_QWORD)v5) >> 3);
    if (2 * v18 > v17)
      v17 = 2 * v18;
    if (v18 >= 0x333333333333333)
      v19 = 0x666666666666666;
    else
      v19 = v17;
    *(_QWORD *)&v41[16] = a1 + 2;
    if (v19)
    {
      if (v19 > 0x666666666666666)
        sub_20E877A38();
      v20 = (char *)operator new(40 * v19);
    }
    else
    {
      v20 = 0;
    }
    v40.n128_u64[0] = (unint64_t)v20;
    v40.n128_u64[1] = (unint64_t)&v20[40 * v7];
    *(_QWORD *)v41 = v40.n128_u64[1];
    *(_QWORD *)&v41[8] = &v20[40 * v19];
    sub_20EB0FA40((uint64_t)&v40, (__n128 *)a3);
    v23 = v40.n128_u64[1];
    v24 = *a1;
    v25 = v40.n128_u64[1];
    if (*a1 != v8)
    {
      v26 = v8;
      v27 = v40.n128_u64[1];
      do
      {
        v25 = v27 - 40;
        v28 = *(_OWORD *)(v26 - 40);
        v29 = *(_OWORD *)(v26 - 24);
        *(_QWORD *)(v27 - 8) = *(_QWORD *)(v26 - 8);
        *(_OWORD *)(v27 - 24) = v29;
        *(_OWORD *)(v27 - 40) = v28;
        v26 -= 40;
        v27 -= 40;
      }
      while (v26 != v24);
    }
    v40.n128_u64[1] = v25;
    v30 = a1[1];
    v31 = *(_QWORD *)v41;
    if (v30 != v8)
    {
      do
      {
        v32 = *(_OWORD *)v8;
        v33 = *(_OWORD *)(v8 + 16);
        *(_QWORD *)(v31 + 32) = *(_QWORD *)(v8 + 32);
        *(_OWORD *)v31 = v32;
        *(_OWORD *)(v31 + 16) = v33;
        v8 += 40;
        v31 += 40;
      }
      while (v8 != v30);
      v25 = v40.n128_u64[1];
      v8 = a1[1];
    }
    v34 = (char *)*a1;
    *a1 = v25;
    a1[1] = v31;
    v35 = a1[2];
    a1[2] = *(_QWORD *)&v41[8];
    *(_QWORD *)v41 = v8;
    *(_QWORD *)&v41[8] = v35;
    v40.n128_u64[0] = (unint64_t)v34;
    v40.n128_u64[1] = (unint64_t)v34;
    if ((char *)v8 != v34)
      *(_QWORD *)v41 = &v34[(v8 - (uint64_t)v34 - 40) % 0x28uLL];
    if (v34)
      operator delete(v34);
    return v23;
  }
  else
  {
    if (v8 != v6)
    {
      v10 = *(_OWORD *)(a3 + 16);
      v40 = *(__n128 *)a3;
      *(_OWORD *)v41 = v10;
      *(_QWORD *)&v41[16] = *(_QWORD *)(a3 + 32);
      v11 = v8 + 40;
      v12 = v6 - 40;
      if (v6 < 0x28)
      {
        a1[1] = v6;
        if (v6 == v11)
        {
LABEL_33:
          *(__n128 *)v8 = v40;
          *(_DWORD *)(v8 + 16) = *(_DWORD *)v41;
          *(_OWORD *)&v5[40 * v7 + 24] = *(_OWORD *)&v41[8];
          return v8;
        }
      }
      else
      {
        v13 = v6 - 40;
        v14 = v6;
        do
        {
          v15 = *(_OWORD *)v13;
          v16 = *(_OWORD *)(v13 + 16);
          *(_QWORD *)(v14 + 32) = *(_QWORD *)(v13 + 32);
          *(_OWORD *)v14 = v15;
          *(_OWORD *)(v14 + 16) = v16;
          v13 += 40;
          v14 += 40;
        }
        while (v13 < v6);
        a1[1] = v14;
        if (v6 == v11)
          goto LABEL_33;
      }
      v36 = 8 * ((uint64_t)(v6 - v11) >> 3);
      v37 = (uint64_t)&v5[40 * v7 - 16];
      do
      {
        v38 = *(_OWORD *)(v37 + v36 - 24);
        *(_DWORD *)(v12 + 16) = *(_DWORD *)(v37 + v36 - 8);
        *(_OWORD *)v12 = v38;
        *(_OWORD *)(v12 + 24) = *(_OWORD *)(v37 + v36);
        v12 -= 40;
        v36 -= 40;
      }
      while (v36);
      goto LABEL_33;
    }
    v21 = *(__n128 *)a3;
    v22 = *(_OWORD *)(a3 + 16);
    *(_QWORD *)(v8 + 32) = *(_QWORD *)(a3 + 32);
    *(__n128 *)v8 = v21;
    *(_OWORD *)(v8 + 16) = v22;
    a1[1] = v8 + 40;
  }
  return v8;
}

void sub_20F24A4D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11)
{
  void *v12;

  if (a11 == a10)
  {
    v12 = __p;
    if (!__p)
      goto LABEL_3;
  }
  else
  {
    v12 = __p;
    if (!__p)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  operator delete(v12);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F24A530(char **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v33;
  char *v34;
  __int128 *v35;
  char *v36;
  __int128 v37;
  char *v38;
  char *v39;
  uint64_t v40;
  __int128 v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  void (**v46)(char *);
  BOOL v47;

  v5 = *a1;
  v6 = (a2 - (uint64_t)*a1) / 40;
  v7 = (uint64_t)&(*a1)[40 * v6];
  if (a5 < 1)
    return (uint64_t)&(*a1)[40 * v6];
  v9 = a3;
  v11 = (unint64_t)a1[1];
  v12 = a1[2];
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v12[-v11] >> 3)) >= a5)
  {
    v18 = v11 - v7;
    if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v11 - v7) >> 3)) >= a5)
    {
      v19 = a3 + 40 * a5;
      v20 = a1[1];
    }
    else
    {
      v19 = a3 + 8 * ((uint64_t)(v11 - v7) >> 3);
      if (v19 == a4)
      {
        v20 = a1[1];
        a1[1] = (char *)v11;
        if (v18 < 1)
          return v7;
      }
      else
      {
        v20 = a1[1];
        v21 = a3 + 8 * ((uint64_t)(v11 - v7) >> 3);
        v22 = v20;
        do
        {
          *(_QWORD *)v22 = &off_24CA18630;
          *(_OWORD *)(v22 + 8) = *(_OWORD *)(v21 + 8);
          *(_QWORD *)v22 = &off_24C9E9850;
          *(_OWORD *)(v22 + 24) = *(_OWORD *)(v21 + 24);
          v21 += 40;
          v20 += 40;
          v22 += 40;
        }
        while (v21 != a4);
        a1[1] = v20;
        if (v18 < 1)
          return v7;
      }
    }
    v23 = v7 + 40 * a5;
    v24 = (unint64_t)&v20[-40 * a5];
    v25 = v20;
    if (v24 < v11)
    {
      v25 = v20;
      do
      {
        *(_QWORD *)v25 = &off_24CA18630;
        *(_OWORD *)(v25 + 8) = *(_OWORD *)(v24 + 8);
        *(_QWORD *)v25 = &off_24C9E9850;
        *(_OWORD *)(v25 + 24) = *(_OWORD *)(v24 + 24);
        v24 += 40;
        v25 += 40;
      }
      while (v24 < v11);
    }
    a1[1] = v25;
    if (v20 != (char *)v23)
    {
      v26 = 8 * ((uint64_t)&v20[-v23] >> 3);
      v27 = v20 - 16;
      v28 = (uint64_t)&v5[40 * v6 - 32];
      do
      {
        v29 = *(_QWORD *)(v28 + v26);
        *((_DWORD *)v27 - 2) = *(_DWORD *)(v28 + v26 + 8);
        *((_QWORD *)v27 - 2) = v29;
        *(_OWORD *)v27 = *(_OWORD *)(v28 + v26 + 16);
        v27 -= 40;
        v26 -= 40;
      }
      while (v26);
    }
    if (v19 != a3)
    {
      v30 = &v5[40 * v6 + 24];
      do
      {
        v31 = *(_QWORD *)(v9 + 8);
        *((_DWORD *)v30 - 2) = *(_DWORD *)(v9 + 16);
        *((_QWORD *)v30 - 2) = v31;
        *(_OWORD *)v30 = *(_OWORD *)(v9 + 24);
        v30 += 40;
        v9 += 40;
      }
      while (v9 != v19);
    }
    return v7;
  }
  v13 = a5 - 0x3333333333333333 * ((uint64_t)(v11 - (_QWORD)v5) >> 3);
  if (v13 > 0x666666666666666)
    sub_20E867F44();
  v14 = 0xCCCCCCCCCCCCCCCDLL * ((v12 - v5) >> 3);
  if (2 * v14 > v13)
    v13 = 2 * v14;
  if (v14 >= 0x333333333333333)
    v15 = 0x666666666666666;
  else
    v15 = v13;
  if (v15)
  {
    if (v15 > 0x666666666666666)
      sub_20E877A38();
    v16 = (char *)operator new(40 * v15);
  }
  else
  {
    v16 = 0;
  }
  v17 = &v16[40 * v6];
  v33 = 40 * a5;
  v34 = &v17[40 * a5];
  v35 = (__int128 *)(v9 + 24);
  v36 = v17;
  do
  {
    *(_OWORD *)(v36 + 8) = *(v35 - 1);
    *(_QWORD *)v36 = &off_24C9E9850;
    v37 = *v35;
    v35 = (__int128 *)((char *)v35 + 40);
    *(_OWORD *)(v36 + 24) = v37;
    v36 += 40;
    v33 -= 40;
  }
  while (v33);
  v38 = *a1;
  v39 = v17;
  if (*a1 != (char *)v7)
  {
    v40 = v7;
    v39 = v17;
    do
    {
      v41 = *(_OWORD *)(v40 - 32);
      *((_QWORD *)v39 - 5) = &off_24C9E9850;
      v39 -= 40;
      *(_OWORD *)(v39 + 8) = v41;
      *(_OWORD *)(v39 + 24) = *(_OWORD *)(v40 - 16);
      v40 -= 40;
    }
    while ((char *)v40 != v38);
  }
  v42 = a1[1];
  if (v42 != (char *)v7)
  {
    do
    {
      *(_OWORD *)(v34 + 8) = *(_OWORD *)(v7 + 8);
      *(_QWORD *)v34 = &off_24C9E9850;
      *(_OWORD *)(v34 + 24) = *(_OWORD *)(v7 + 24);
      v7 += 40;
      v34 += 40;
    }
    while ((char *)v7 != v42);
    v7 = (uint64_t)a1[1];
  }
  v43 = *a1;
  *a1 = v39;
  a1[1] = v34;
  a1[2] = &v16[40 * v15];
  if ((char *)v7 != v43)
  {
    v44 = (char *)(v7 - 40);
    v45 = (char *)(v7 - 40);
    do
    {
      v46 = *(void (***)(char *))v45;
      v45 -= 40;
      (*v46)(v44);
      v47 = v44 == v43;
      v44 = v45;
    }
    while (!v47);
  }
  if (v43)
  {
    operator delete(v43);
    return (uint64_t)v17;
  }
  return (uint64_t)v17;
}

void sub_20F24A8FC(uint64_t *a1, unsigned int a2, int a3)
{
  _DWORD *v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;

  v6 = operator new(0x18uLL);
  v6[4] = a2;
  v6[5] = a3;
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = a2;
  if (sub_20F24AA2C((uint64_t)a1, a2, v6 + 4))
  {
    operator delete(v6);
    return;
  }
  v7 = (int8x8_t)a1[1];
  v8 = *((_QWORD *)v6 + 1);
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v7)
      v8 %= *(_QWORD *)&v7;
  }
  else
  {
    v8 &= *(_QWORD *)&v7 - 1;
  }
  v10 = *a1;
  v11 = *(_QWORD **)(*a1 + 8 * v8);
  if (v11)
  {
    *(_QWORD *)v6 = *v11;
LABEL_15:
    *v11 = v6;
    goto LABEL_16;
  }
  *(_QWORD *)v6 = a1[2];
  a1[2] = (uint64_t)v6;
  *(_QWORD *)(v10 + 8 * v8) = a1 + 2;
  if (*(_QWORD *)v6)
  {
    v12 = *(_QWORD *)(*(_QWORD *)v6 + 8);
    if (v9.u32[0] > 1uLL)
    {
      if (v12 >= *(_QWORD *)&v7)
        v12 %= *(_QWORD *)&v7;
    }
    else
    {
      v12 &= *(_QWORD *)&v7 - 1;
    }
    v11 = (_QWORD *)(*a1 + 8 * v12);
    goto LABEL_15;
  }
LABEL_16:
  ++a1[3];
}

void sub_20F24AA18(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20F24AA2C(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  uint64_t **v7;
  uint64_t *result;
  int v9;
  unint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t prime;
  size_t v18;
  uint8x8_t v19;
  uint64_t v20;
  size_t v21;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_22;
  v5 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = a2 % v4;
    if (v4 > a2)
      v6 = a2;
    v7 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v6);
    if (!v7)
      goto LABEL_22;
  }
  else
  {
    v6 = (v4 - 1) & a2;
    v7 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v6);
    if (!v7)
      goto LABEL_22;
  }
  result = *v7;
  if (*v7)
  {
    v9 = *a3;
    if (v5.u32[0] < 2uLL)
    {
      while (1)
      {
        v11 = result[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)result + 4) == v9)
            return result;
        }
        else if ((v11 & (v4 - 1)) != v6)
        {
          goto LABEL_22;
        }
        result = (uint64_t *)*result;
        if (!result)
          goto LABEL_22;
      }
    }
    do
    {
      v10 = result[1];
      if (v10 == a2)
      {
        if (*((_DWORD *)result + 4) == v9)
          return result;
      }
      else
      {
        if (v10 >= v4)
          v10 %= v4;
        if (v10 != v6)
          break;
      }
      result = (uint64_t *)*result;
    }
    while (result);
  }
LABEL_22:
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (v4 && (float)(v13 * (float)v4) >= v12)
    return 0;
  v14 = 1;
  if (v4 >= 3)
    v14 = (v4 & (v4 - 1)) != 0;
  v15 = v14 | (2 * v4);
  v16 = vcvtps_u32_f32(v12 / v13);
  if (v15 <= v16)
    prime = v16;
  else
    prime = v15;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v4 = *(_QWORD *)(a1 + 8);
  }
  if (prime > v4)
    goto LABEL_46;
  if (prime < v4)
  {
    v18 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v4 < 3 || (v19 = (uint8x8_t)vcnt_s8((int8x8_t)v4), v19.i16[0] = vaddlv_u8(v19), v19.u32[0] > 1uLL))
    {
      v21 = std::__next_prime(v18);
      if (prime <= v21)
        prime = v21;
      if (prime >= v4)
        return 0;
    }
    else
    {
      v20 = 1 << -(char)__clz(v18 - 1);
      if (v18 >= 2)
        v18 = v20;
      if (prime <= v18)
        prime = v18;
      if (prime >= v4)
        return 0;
    }
LABEL_46:
    sub_20E8D2B3C(a1, prime);
  }
  return 0;
}

void sub_20F24AC38(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t **a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>)
{
  unint64_t v7;
  float64x2_t v8;
  double *v15;
  unint64_t v17;
  void *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint8x8_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  float v32;
  _QWORD *v33;
  _QWORD *v34;
  _BOOL8 v35;
  unint64_t v36;
  unint64_t v37;
  size_t prime;
  unint64_t v39;
  uint8x8_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t **v46;
  uint64_t *v47;
  uint64_t *v48;
  int8x8_t v49;
  uint64_t v50;
  unint64_t v51;
  uint8x8_t v52;
  unint64_t v53;
  uint64_t ***v54;
  uint64_t **v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t *v58;
  unint64_t v59;
  _QWORD *v60;
  uint64_t *v61;
  unint64_t v62;
  unsigned int v63;
  _QWORD *v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t *v69;
  float64x2_t *v70;
  uint64_t v71;
  unsigned int v72;
  _QWORD *v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  double v77;
  float64x2_t v78;
  int64x2_t v79;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  int8x16_t v86;
  unint64_t v87;
  float64x2_t v88;
  double v90;
  float64x2_t v91;
  float64x2_t v93;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v101;
  int64x2_t v102;
  float64x2_t v103;
  int64x2_t v104;
  float64x2_t v106;
  uint64_t v107;
  int64x2_t v108;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v114;
  float64_t v116;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  double v127;
  unint64_t v128;
  float64x2_t v129;
  double v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  double v161;
  double v162;
  double v163;
  __double2 v164;
  uint64_t v165;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v171;
  float64x2_t v173;
  int v178;
  double *v179;
  double v180;
  unint64_t v181;
  float64x2_t *v182;
  double v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v187;
  float64x2_t v188;
  unint64_t v192;
  int8x16_t v193;
  unint64_t v194;
  float64x2_t v195;
  double v196;
  float64x2_t v198;
  double v199;
  int8x16_t v202;
  int8x16_t v203;
  double v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v210;
  double v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v229;
  float64x2_t v230;
  double v234;
  double v235;
  float64x2_t v236;
  float64x2_t *v237;
  uint64_t v238;
  unint64_t v239;
  uint64_t v240;
  unint64_t v241;
  char *v242;
  float64x2_t v243;
  float64x2_t *v244;
  uint64_t v245;
  float64x2_t v246;
  float64x2_t v247;
  _OWORD *f64;
  double v249;
  __double2 v250;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v255;
  uint64_t *v260;
  uint64_t *v261;
  float64x2_t *v262;
  float64x2_t v263;
  float64x2_t *v264;
  uint64_t v265;
  float64x2_t *v266;
  uint64_t v267;
  int v268;
  float64x2_t *v269;
  int v270;
  unint64_t v272;
  uint64_t v273;
  unint64_t v274;
  uint64_t v275;
  unint64_t v276;
  char *v277;
  float64x2_t v278;
  float64x2_t *v279;
  uint64_t v280;
  float64x2_t v281;
  float64x2_t v282;
  _QWORD *v283;
  _QWORD *v284;
  void *v285;
  float64x2_t v286;
  float64x2_t v287;
  float64_t v288;
  float64_t v289;
  uint64_t v290;
  float64x2_t v291;
  unint64_t v292;
  double *v293;
  float64_t v294;
  uint64_t v295;
  unsigned __int8 v296;
  void *v299[2];
  void *__p[2];
  float v301;
  float64x2_t v302;
  float64x2_t v303[2];
  float64x2_t v304;
  float64x2_t v305;
  float64x2_t v306;
  float64x2_t v307;
  float64x2_t v308;
  float64x2_t v309;
  float64x2_t v310;
  float64x2_t v311;
  float64x2_t *v312;
  uint64_t v313;
  float64x2_t *v314;
  uint64_t v315;

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a4 + 24) = _Q0;
  *(_QWORD *)(a4 + 40) = 0xBFF0000000000000;
  v15 = (double *)(a4 + 40);
  *(_BYTE *)(a4 + 48) = 0;
  if (*a2 == a2[1])
    return;
  v17 = a1[1] - *a1;
  *(_OWORD *)v299 = 0u;
  *(_OWORD *)__p = 0u;
  v301 = 1.0;
  if ((v17 & 0x7FFFFFFF8) == 0)
  {
    *(_BYTE *)(a4 + 48) = *a3 != a3[1];
    goto LABEL_210;
  }
  v293 = v15;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = (v17 >> 3);
  do
  {
    v24 = *(_QWORD *)(*a1 + 8 * v22);
    v25 = *(_QWORD *)(v24 + 160);
    if (v21)
    {
      v26 = (uint8x8_t)vcnt_s8((int8x8_t)v21);
      v26.i16[0] = vaddlv_u8(v26);
      if (v26.u32[0] > 1uLL)
      {
        v7 = *(_QWORD *)(v24 + 160);
        if (v21 <= v25)
          v7 = v25 % v21;
      }
      else
      {
        v7 = (v21 - 1) & v25;
      }
      v27 = (_QWORD *)*((_QWORD *)v299[0] + v7);
      if (v27)
      {
        v28 = (_QWORD *)*v27;
        if (v28)
        {
          if (v26.u32[0] < 2uLL)
          {
            while (1)
            {
              v30 = v28[1];
              if (v30 == v25)
              {
                if (v28[2] == v25)
                  goto LABEL_64;
              }
              else if ((v30 & (v21 - 1)) != v7)
              {
                goto LABEL_24;
              }
              v28 = (_QWORD *)*v28;
              if (!v28)
                goto LABEL_24;
            }
          }
          do
          {
            v29 = v28[1];
            if (v29 == v25)
            {
              if (v28[2] == v25)
                goto LABEL_64;
            }
            else
            {
              if (v29 >= v21)
                v29 %= v21;
              if (v29 != v7)
                break;
            }
            v28 = (_QWORD *)*v28;
          }
          while (v28);
        }
      }
    }
LABEL_24:
    v31 = operator new(0x20uLL);
    *v31 = 0;
    v31[1] = v25;
    v31[2] = v25;
    *((_DWORD *)v31 + 6) = v22;
    v32 = (float)((unint64_t)v20 + 1);
    if (v21 && (float)(v301 * (float)v21) >= v32)
    {
      v33 = v299[0];
      v34 = (_QWORD *)*((_QWORD *)v299[0] + v7);
      if (v34)
        goto LABEL_27;
    }
    else
    {
      v35 = (v21 & (v21 - 1)) != 0;
      if (v21 < 3)
        v35 = 1;
      v36 = v35 | (2 * v21);
      v37 = vcvtps_u32_f32(v32 / v301);
      if (v36 <= v37)
        prime = v37;
      else
        prime = v36;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
        v21 = (unint64_t)v299[1];
      }
      if (prime > v21)
        goto LABEL_38;
      if (prime < v21)
      {
        v39 = vcvtps_u32_f32((float)(unint64_t)__p[1] / v301);
        if (v21 < 3 || (v40 = (uint8x8_t)vcnt_s8((int8x8_t)v21), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
        {
          v39 = std::__next_prime(v39);
        }
        else
        {
          v41 = 1 << -(char)__clz(v39 - 1);
          if (v39 >= 2)
            v39 = v41;
        }
        if (prime <= v39)
          prime = v39;
        if (prime < v21)
LABEL_38:
          sub_20E8D2B3C((uint64_t)v299, prime);
      }
      v21 = (unint64_t)v299[1];
      v42 = (unint64_t)v299[1] - 1;
      if (((unint64_t)v299[1] & ((unint64_t)v299[1] - 1)) != 0)
      {
        if (v299[1] <= (void *)v25)
        {
          v7 = v25 % (unint64_t)v299[1];
          v33 = v299[0];
          v34 = (_QWORD *)*((_QWORD *)v299[0] + v25 % (unint64_t)v299[1]);
          if (v34)
          {
LABEL_27:
            *v31 = *v34;
LABEL_62:
            *v34 = v31;
            goto LABEL_63;
          }
        }
        else
        {
          v7 = v25;
          v33 = v299[0];
          v34 = (_QWORD *)*((_QWORD *)v299[0] + v25);
          if (v34)
            goto LABEL_27;
        }
      }
      else
      {
        v7 = v42 & v25;
        v33 = v299[0];
        v34 = (_QWORD *)*((_QWORD *)v299[0] + (v42 & v25));
        if (v34)
          goto LABEL_27;
      }
    }
    *v31 = __p[0];
    __p[0] = v31;
    v33[v7] = __p;
    if (*v31)
    {
      v43 = *(_QWORD *)(*v31 + 8);
      if ((v21 & (v21 - 1)) != 0)
      {
        if (v43 >= v21)
          v43 %= v21;
      }
      else
      {
        v43 &= v21 - 1;
      }
      v34 = (char *)v299[0] + 8 * v43;
      goto LABEL_62;
    }
LABEL_63:
    v20 = ++__p[1];
LABEL_64:
    ++v22;
  }
  while (v22 != v23);
  v44 = 0;
  v296 = 0;
  *(_BYTE *)(a4 + 48) = *a3 != a3[1];
  __asm { FMOV            V0.2D, #1.0 }
  v294 = *((double *)&_Q0 + 1);
  while (2)
  {
    v46 = *(uint64_t ***)(*a1 + 8 * v44);
    v48 = v46[26];
    v47 = v46[27];
    if (v48 == v47)
      goto LABEL_66;
    v49 = (int8x8_t)v299[1];
    if (!v299[1])
      goto LABEL_66;
    v50 = *a2 + (v44 << 7);
LABEL_71:
    v51 = v48[3];
    v52 = (uint8x8_t)vcnt_s8(v49);
    v52.i16[0] = vaddlv_u8(v52);
    if (v52.u32[0] > 1uLL)
    {
      v53 = v48[3];
      if (v51 >= *(_QWORD *)&v49)
        v53 = v51 % *(_QWORD *)&v49;
    }
    else
    {
      v53 = (*(_QWORD *)&v49 - 1) & v51;
    }
    v54 = (uint64_t ***)*((_QWORD *)v299[0] + v53);
    if (!v54)
      goto LABEL_170;
    v55 = *v54;
    if (!v55)
      goto LABEL_170;
    if (v52.u32[0] < 2uLL)
    {
      v56 = *(_QWORD *)&v49 - 1;
      while (1)
      {
        v58 = v55[1];
        if (v58 == (uint64_t *)v51)
        {
          if (v55[2] == (uint64_t *)v51)
            goto LABEL_91;
        }
        else if (((unint64_t)v58 & v56) != v53)
        {
          goto LABEL_170;
        }
        v55 = (uint64_t **)*v55;
        if (!v55)
          goto LABEL_170;
      }
    }
    while (2)
    {
      v57 = (unint64_t)v55[1];
      if (v57 != v51)
      {
        if (v57 >= *(_QWORD *)&v49)
          v57 %= *(_QWORD *)&v49;
        if (v57 != v53)
          goto LABEL_170;
        goto LABEL_80;
      }
      if (v55[2] != (uint64_t *)v51)
      {
LABEL_80:
        v55 = (uint64_t **)*v55;
        if (!v55)
          goto LABEL_170;
        continue;
      }
      break;
    }
LABEL_91:
    v59 = *((unsigned int *)v55 + 6);
    if (v44 > v59)
      goto LABEL_170;
    v60 = (_QWORD *)(*v46[53] + 56);
    v61 = (uint64_t *)*v60;
    if (!*v60)
      goto LABEL_104;
    v62 = *v48;
    v63 = *((_DWORD *)v48 + 2);
    v64 = v60;
    do
    {
      v65 = v61[4];
      if (v65 < v62)
      {
        ++v61;
      }
      else if (v65 == v62)
      {
        if (*((_DWORD *)v61 + 10) < v63)
          ++v61;
        else
          v64 = v61;
      }
      else
      {
        v64 = v61;
      }
      v61 = (uint64_t *)*v61;
    }
    while (v61);
    if (v64 == v60 || (v66 = v64[4], v62 < v66) || v62 == v66 && *((_DWORD *)v64 + 10) > v63)
    {
LABEL_104:
      v67 = 0;
      v68 = (_QWORD *)(**(_QWORD **)(*(_QWORD *)(*a1 + 8 * v59) + 424) + 56);
      v69 = (uint64_t *)*v68;
      if (!*v68)
        goto LABEL_170;
    }
    else
    {
      v67 = v64[6];
      v68 = (_QWORD *)(**(_QWORD **)(*(_QWORD *)(*a1 + 8 * v59) + 424) + 56);
      v69 = (uint64_t *)*v68;
      if (!*v68)
        goto LABEL_170;
    }
    v70 = (float64x2_t *)(v48 + 34);
    v71 = *a2 + (v59 << 7);
    v72 = *((_DWORD *)v48 + 8);
    v73 = v68;
    do
    {
      v74 = v69[4];
      if (v74 < v51)
      {
        ++v69;
      }
      else if (v74 == v51)
      {
        if (*((_DWORD *)v69 + 10) < v72)
          ++v69;
        else
          v73 = v69;
      }
      else
      {
        v73 = v69;
      }
      v69 = (uint64_t *)*v69;
    }
    while (v69);
    if (v73 != v68)
    {
      v75 = v73[4];
      if (v51 >= v75 && (v51 != v75 || *((_DWORD *)v73 + 10) <= v72))
      {
        if (v67)
        {
          v76 = v73[6];
          if (v76)
          {
            v77 = a6;
            v78.f64[0] = *(float64_t *)(v76 + 16);
            v79 = *(int64x2_t *)(v76 + 24);
            _Q3 = *(int64x2_t *)(v76 + 48);
            v81 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v76, v79);
            v78.f64[1] = *(float64_t *)(v76 + 40);
            v82 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v76, v79);
            v79.i64[0] = *(_QWORD *)(v76 + 88);
            v290 = v73[6];
            v83 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v81, *(double *)(v76 + 72)), v82, *(float64x2_t *)(v76 + 72), 1), v78, *(double *)v79.i64);
            _D4 = *(_QWORD *)(v76 + 80);
            __asm { FMLA            D5, D4, V3.D[1] }
            v8.f64[0] = _D5 + *(double *)(v76 + 64) * *(double *)v79.i64;
            v86 = vextq_s8((int8x16_t)v82, (int8x16_t)vdupq_laneq_s64(_Q3, 1), 8uLL);
            *(_QWORD *)&v82.f64[1] = v86.i64[0];
            v87 = *(_QWORD *)(v76 + 64);
            v88.f64[1] = v294;
            *(_QWORD *)&v88.f64[0] = *(_OWORD *)&vnegq_f64(v8);
            _Q2.f64[0] = *(float64_t *)(v71 + 16);
            v90 = *(double *)(v71 + 48);
            v91 = *(float64x2_t *)(v71 + 32);
            _D24 = *(double *)(v71 + 80);
            v93 = *(float64x2_t *)(v71 + 64);
            _D4 = *(double *)(v71 + 112);
            _Q5 = *(float64x2_t *)(v71 + 96);
            v96 = vmulq_n_f64(v81, _Q2.f64[0]);
            v97 = vmulq_n_f64((float64x2_t)_Q3.u64[0], _Q2.f64[0]);
            _Q2.f64[1] = v90;
            _Q25 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v71, (int64x2_t)v91), vnegq_f64(_Q5).f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)v71, (int64x2_t)v91), _Q5, 1), _Q2, _D4, 0);
            _Q2.f64[0] = *(float64_t *)(v71 + 72);
            __asm
            {
              FMLS            D28, D2, V5.D[1]
              FMLS            D28, D24, V4.D[0]
            }
            v101 = vmlsq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v81, *(double *)v71), v82, v91.f64[0]), v78, v93.f64[0]), (float64x2_t)0, v83);
            v102 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)_Q3.u64[0], *(double *)v71), (float64x2_t)v86.u64[1], v91.f64[0]), (float64x2_t)v87, v93.f64[0]), (float64x2_t)0, v88);
            v103 = vmlsq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v81, *(float64x2_t *)v71, 1), v82, v91, 1), v78, v93, 1), (float64x2_t)0, v83);
            v104 = (int64x2_t)vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64((float64x2_t)_Q3.u64[0], *(float64x2_t *)v71, 1), (float64x2_t)v86.u64[1], v91, 1), (float64x2_t)v87, v93, 1), (float64x2_t)0, v88);
            _Q1 = vmlsq_f64(vmlaq_n_f64(vmlaq_n_f64(v96, v82, v90), v78, _D24), (float64x2_t)0, v83);
            *(_QWORD *)&v97.f64[0] = *(_OWORD *)&vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v97, (float64x2_t)v86.u64[1], v90), (float64x2_t)v87, _D24), (float64x2_t)0, v88);
            v106 = vsubq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v81, _Q25.f64[0]), v82, _Q25, 1), v78, _D28), v83);
            v107 = *(_OWORD *)&vsubq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)(v76 + 48), _Q25.f64[0]), (float64x2_t)v86.u64[1], _Q25, 1), (float64x2_t)v87, _D28), v8);
            v78.f64[0] = *(float64_t *)(v67 + 16);
            v108 = *(int64x2_t *)(v67 + 24);
            _Q21 = *(int64x2_t *)(v67 + 48);
            v110 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v67, v108);
            v111 = (float64x2_t)vdupq_laneq_s64(_Q21, 1);
            v78.f64[1] = *(float64_t *)(v67 + 40);
            v112 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v67, v108);
            _Q22 = (float64x2_t)vextq_s8((int8x16_t)v112, (int8x16_t)v111, 8uLL);
            v111.f64[0] = *(float64_t *)(v67 + 88);
            v114 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v110, *(double *)(v67 + 72)), v112, *(float64x2_t *)(v67 + 72), 1), v78, v111.f64[0]);
            _D24 = *(_QWORD *)(v67 + 80);
            __asm { FMLA            D25, D24, V21.D[1] }
            v111.f64[0] = _Q25.f64[0] + *(double *)(v67 + 64) * v111.f64[0];
            *(_QWORD *)&v116 = *(_OWORD *)&vnegq_f64(v111);
            v111.f64[0] = *(float64_t *)(v67 + 48);
            v112.f64[1] = _Q22.f64[0];
            _Q22.f64[0] = *(float64_t *)(v67 + 64);
            _Q23.f64[1] = v294;
            _Q23.f64[0] = v116;
            _Q30.f64[0] = *(float64_t *)(v50 + 16);
            v119 = *(float64x2_t *)(v50 + 32);
            _Q25.f64[0] = *(float64_t *)(v50 + 80);
            v120 = *(float64x2_t *)(v50 + 64);
            _D31 = *(double *)(v50 + 112);
            v295 = v50;
            _Q11 = *(float64x2_t *)(v50 + 96);
            v123 = vmulq_n_f64(v110, _Q30.f64[0]);
            v124 = vmulq_n_f64((float64x2_t)*(unint64_t *)&v111.f64[0], _Q30.f64[0]);
            _Q30.f64[1] = *(float64_t *)(v50 + 48);
            v125 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v50, (int64x2_t)v119), vnegq_f64(_Q11).f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)v50, (int64x2_t)v119), _Q11, 1), _Q30, _D31, 0);
            _D12 = *(_QWORD *)(v50 + 72);
            __asm
            {
              FMLS            D30, D12, V11.D[1]
              FMLS            D30, D25, V31.D[0]
            }
            *(_QWORD *)&v127 = v107 ^ 0x8000000000000000;
            v128 = *(_QWORD *)&v106.f64[1] ^ 0x8000000000000000;
            v129 = vmlaq_f64(vmlaq_f64(vmulq_f64((float64x2_t)vzip1q_s64((int64x2_t)v101, (int64x2_t)v103), (float64x2_t)vdupq_n_s64(*(_QWORD *)&v106.f64[0] ^ 0x8000000000000000)), (float64x2_t)vdupq_n_s64(*(_QWORD *)&v106.f64[1] ^ 0x8000000000000000), (float64x2_t)vzip2q_s64((int64x2_t)v101, (int64x2_t)v103)), (float64x2_t)vdupq_n_s64(v107 ^ 0x8000000000000000), (float64x2_t)vzip1q_s64(v102, v104));
            _D31 = v128;
            __asm { FMLA            D19, D31, V1.D[1] }
            v132 = vmlad_n_f64(_D19, v127, v97.f64[0]);
            v133 = vmlsq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v110, *(double *)v50), v112, v119.f64[0]), v78, v120.f64[0]), (float64x2_t)0, v114);
            v134 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v111.f64[0], *(double *)v50), (float64x2_t)*(unint64_t *)&_Q22.f64[1], v119.f64[0]), (float64x2_t)*(unint64_t *)&_Q22.f64[0], v120.f64[0]), (float64x2_t)0, _Q23);
            v135 = vmlsq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v110, *(float64x2_t *)v50, 1), v112, v119, 1), v78, v120, 1), (float64x2_t)0, v114);
            v136 = vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64((float64x2_t)*(unint64_t *)&v111.f64[0], *(float64x2_t *)v50, 1), (float64x2_t)*(unint64_t *)&_Q22.f64[1], v119, 1), (float64x2_t)*(unint64_t *)&_Q22.f64[0], v120, 1), (float64x2_t)0, _Q23);
            v137 = vmlsq_f64(vmlaq_n_f64(vmlaq_n_f64(v123, v112, _Q30.f64[1]), v78, _Q25.f64[0]), (float64x2_t)0, v114);
            v138 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v124, (float64x2_t)*(unint64_t *)&_Q22.f64[1], _Q30.f64[1]), (float64x2_t)*(unint64_t *)&_Q22.f64[0], _Q25.f64[0]), (float64x2_t)0, _Q23);
            _Q17 = vsubq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v110, v125.f64[0]), v112, v125, 1), v78, _Q30.f64[0]), v114);
            v140 = vaddq_f64(_Q23, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v111.f64[0], v125.f64[0]), (float64x2_t)*(unint64_t *)&_Q22.f64[1], v125, 1), (float64x2_t)*(unint64_t *)&_Q22.f64[0], _Q30.f64[0]));
            v141 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v133, v101.f64[0]), v135, v103.f64[0]), v137, _Q1.f64[0]), (float64x2_t)0, _Q17);
            v142 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v134, v101.f64[0]), v136, v103.f64[0]), v138, _Q1.f64[0]), (float64x2_t)0, v140);
            v143 = vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v133, v101, 1), v135, v103, 1), v137, _Q1, 1), (float64x2_t)0, _Q17);
            v144 = vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v134, v101, 1), v136, v103, 1), v138, _Q1, 1), (float64x2_t)0, v140);
            v145 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v133, *(double *)v102.i64), v135, *(double *)v104.i64), v137, v97.f64[0]), (float64x2_t)0, _Q17);
            v146 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v134, *(double *)v102.i64), v136, *(double *)v104.i64), v138, v97.f64[0]), (float64x2_t)0, v140);
            v147 = vaddq_f64(_Q17, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v133, v129.f64[0]), v135, v129, 1), v137, v132));
            v148 = vaddq_f64(v140, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v134, v129.f64[0]), v136, v129, 1), v138, v132));
            *(_QWORD *)&_Q22.f64[0] = v48[8];
            v149 = *((float64x2_t *)v48 + 3);
            *(_QWORD *)&v103.f64[0] = v48[12];
            v150 = *((float64x2_t *)v48 + 5);
            *(_QWORD *)&_Q17.f64[0] = v48[16];
            v151 = *((float64x2_t *)v48 + 7);
            *(_QWORD *)&_Q23.f64[0] = v48[20];
            _Q24 = *((float64x2_t *)v48 + 9);
            v153 = vmulq_n_f64(v141, _Q22.f64[0]);
            v154 = vmulq_n_f64(v142, _Q22.f64[0]);
            _Q22.f64[1] = v103.f64[0];
            v155 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v149, (int64x2_t)v150), vnegq_f64(_Q24).f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v149, (int64x2_t)v150), _Q24, 1), _Q22, _Q23.f64[0], 0);
            *(_QWORD *)&_Q25.f64[0] = v48[15];
            __asm
            {
              FMLS            D22, D25, V24.D[1]
              FMLS            D22, D17, V23.D[0]
            }
            v304 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v141, v149.f64[0]), v143, v150.f64[0]), v145, v151.f64[0]), (float64x2_t)0, v147);
            v305 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v142, v149.f64[0]), v144, v150.f64[0]), v146, v151.f64[0]), (float64x2_t)0, v148);
            v306 = vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v141, v149, 1), v143, v150, 1), v145, v151, 1), (float64x2_t)0, v147);
            v307 = vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v142, v149, 1), v144, v150, 1), v146, v151, 1), (float64x2_t)0, v148);
            v308 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v153, v143, v103.f64[0]), v145, _Q17.f64[0]), (float64x2_t)0, v147);
            v309 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v154, v144, v103.f64[0]), v146, _Q17.f64[0]), (float64x2_t)0, v148);
            v310 = vaddq_f64(v147, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v141, v155.f64[0]), v143, v155, 1), v145, _Q22.f64[0]));
            v311 = vaddq_f64(v148, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v142, v155.f64[0]), v144, v155, 1), v146, _Q22.f64[0]));
            memset(v303, 0, sizeof(v303));
            v302 = 0u;
            v314 = &v304;
            v315 = 0;
            v312 = &v302;
            v313 = 0;
            sub_20E95B988(&v314, (double **)&v312);
            v157.f64[0] = v303[0].f64[0];
            _Q16 = v302;
            _Q0 = vmulq_f64(_Q16, _Q16);
            _D1 = v302.f64[1];
            __asm { FMLA            D0, D1, V16.D[1] }
            v161 = _Q0.f64[0] + v157.f64[0] * v157.f64[0];
            if (v161 >= 0.0000002635)
            {
              v163 = sqrt(v161);
              v286 = v302;
              v288 = v303[0].f64[0];
              v164 = __sincos_stret(v163);
              _Q16 = v286;
              v157.f64[0] = v288;
              v156.f64[0] = v164.__sinval / v163;
              _Q0.f64[0] = 1.0 / v161 * (1.0 - v164.__cosval);
              v162 = 1.0 / v161 * (1.0 - v164.__sinval / v163);
            }
            else
            {
              _Q0.f64[0] = 0.5 - v161 * (v161 / -720.0 + 0.0416666667);
              v162 = 0.166666667 - v161 * (v161 / -5040.0 + 0.00833333333);
              v156.f64[0] = 1.0 - v161 * v162;
            }
            a6 = v77;
            v50 = v295;
            v165 = v290;
            if (v161 >= 2.775e-15)
            {
              if (v161 <= 9.0)
                _Q0.f64[0] = (_Q0.f64[0] * 0.5 - v162) / v156.f64[0];
              else
                _Q0.f64[0] = (_Q0.f64[0] + v156.f64[0] * -0.5) / (v161 * _Q0.f64[0]);
            }
            else
            {
              _Q0.f64[0] = v161 * 0.0000330687831 + v161 * 0.00138888889 + 0.0833333333;
            }
            _Q1 = (float64x2_t)vextq_s8((int8x16_t)_Q16, (int8x16_t)_Q16, 8uLL);
            v156.f64[0] = v311.f64[0];
            _Q4.f64[0] = _Q1.f64[0];
            _Q4.f64[1] = v157.f64[0];
            v168 = (float64x2_t)vextq_s8((int8x16_t)v310, (int8x16_t)v156, 8uLL);
            v169 = vsubq_f64(vmulq_laneq_f64(_Q16, v310, 1), vmulq_f64(_Q1, v310));
            __asm { FMOV            V29.2D, #-0.5 }
            v171 = vaddq_f64(v156, vmulq_f64(v169, _Q29));
            v156.f64[1] = v310.f64[0];
            v157.f64[1] = _Q16.f64[0];
            _Q2 = vsubq_f64(vmulq_f64(_Q4, v156), vmulq_f64(v157, v168));
            v173 = (float64x2_t)vextq_s8((int8x16_t)_Q2, (int8x16_t)v169, 8uLL);
            v169.f64[1] = _Q2.f64[0];
            *(_QWORD *)&v303[1].f64[1] = *(_OWORD *)&vaddq_f64(v171, vmulq_f64(_Q0, vsubq_f64(vmulq_laneq_f64(_Q16, _Q2, 1), vmulq_f64(_Q1, _Q2))));
            *(float64x2_t *)((char *)v303 + 8) = vaddq_f64(vaddq_f64(v310, vmulq_f64(_Q2, _Q29)), vmulq_n_f64(vsubq_f64(vmulq_f64(_Q4, v169), vmulq_f64(v157, v173)), _Q0.f64[0]));
            _Q1.f64[1] = v303[0].f64[1];
            _V0.D[1] = v303[1].f64[1];
            _Q2.f64[1] = v302.f64[1];
            v8 = *((float64x2_t *)v48 + 22);
            _Q4.f64[0] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v48 + 176), *(double *)&v302), *(float64x2_t *)(v48 + 224), v302, 1), *v70, *(double *)v303), *(float64x2_t *)(v48 + 320), *v303, 1), *(float64x2_t *)(v48 + 368), *(double *)(v303 + 16)), *(float64x2_t *)(v48 + 416), *(v303 + 16), 1).f64[1];
            __asm { FMLA            D15, D4, V2.D[1] }
            _Q2.f64[0] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v48 + 192), *(double *)&v302), *(float64x2_t *)(v48 + 240), v302, 1), *(float64x2_t *)(v48 + 288), *(double *)v303), *(float64x2_t *)(v48 + 336), *v303, 1), *(float64x2_t *)(v48 + 384), *(double *)(v303 + 16)), *(float64x2_t *)(v48 + 432), *(v303 + 16), 1).f64[1];
            __asm { FMLA            D15, D2, V1.D[1] }
            _Q1.f64[0] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v48 + 208), *(double *)&v302), *(float64x2_t *)(v48 + 256), v302, 1), *(float64x2_t *)(v48 + 304), *(double *)v303), v8, *v303, 1), *(float64x2_t *)(v48 + 400), *(double *)(v303 + 16)), *(float64x2_t *)(v48 + 448), *(v303 + 16), 1).f64[1];
            __asm { FMLA            D15, D1, V0.D[1] }
            v178 = *((_DWORD *)v48 + 116);
            v179 = v293;
            if (!v178)
            {
LABEL_136:
              v180 = *v179;
              if (*v179 < _D15)
                v180 = _D15;
              *v179 = v180;
              goto LABEL_139;
            }
            if (v178 != 2)
            {
              if (v178 == 3)
              {
                v179 = (double *)(a4 + 32);
                goto LABEL_136;
              }
LABEL_139:
              if (_D15 <= a5)
                goto LABEL_170;
              v304 = *(float64x2_t *)(v48 + 3);
              v305 = *(float64x2_t *)v48;
              v182 = *(float64x2_t **)(a4 + 8);
              v181 = *(_QWORD *)(a4 + 16);
              if ((unint64_t)v182 < v181)
              {
                *v182 = v304;
                v182[1] = v305;
                *(_QWORD *)(a4 + 8) = v182 + 2;
                goto LABEL_170;
              }
              v237 = *(float64x2_t **)a4;
              v238 = ((uint64_t)v182 - *(_QWORD *)a4) >> 5;
              v239 = v238 + 1;
              if ((unint64_t)(v238 + 1) >> 59)
                sub_20E867F44();
              v240 = v181 - (_QWORD)v237;
              if (v240 >> 4 > v239)
                v239 = v240 >> 4;
              if ((unint64_t)v240 >= 0x7FFFFFFFFFFFFFE0)
                v241 = 0x7FFFFFFFFFFFFFFLL;
              else
                v241 = v239;
              if (v241)
              {
                if (v241 >> 59)
                  sub_20E877A38();
                v292 = v241;
                v242 = (char *)operator new(32 * v241);
                v241 = v292;
                v243 = v305;
                v244 = (float64x2_t *)&v242[32 * v238];
                *v244 = v304;
                v244[1] = v243;
                v245 = (uint64_t)v244;
                if (v182 == v237)
                  goto LABEL_163;
                do
                {
LABEL_161:
                  v247 = v182[-1];
                  *(float64x2_t *)(v245 - 32) = v182[-2];
                  *(float64x2_t *)(v245 - 16) = v247;
                  v245 -= 32;
                  v182 -= 2;
                }
                while (v182 != v237);
                v182 = *(float64x2_t **)a4;
              }
              else
              {
                v242 = 0;
                v246 = v305;
                v244 = (float64x2_t *)(32 * v238);
                *v244 = v304;
                v244[1] = v246;
                v245 = 32 * v238;
                if (v182 != v237)
                  goto LABEL_161;
              }
LABEL_163:
              f64 = (_OWORD *)v244[2].f64;
              *(_QWORD *)a4 = v245;
              *(_QWORD *)(a4 + 8) = v244 + 2;
              *(_QWORD *)(a4 + 16) = &v242[32 * v241];
              if (v182)
                operator delete(v182);
              v50 = v295;
              *(_QWORD *)(a4 + 8) = f64;
              goto LABEL_170;
            }
            v183 = *(double *)(a4 + 24);
            if (v183 < _D15)
              v183 = _D15;
            *(double *)(a4 + 24) = v183;
            if (_D15 <= v77)
              goto LABEL_170;
            v291 = _Q29;
            v184.f64[0] = *(float64_t *)(v67 + 16);
            v185 = *(float64x2_t *)(v67 + 24);
            _Q5 = *(int64x2_t *)(v67 + 48);
            v187 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v67, (int64x2_t)v185);
            v188 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v67, (int64x2_t)v185);
            v184.f64[1] = *(float64_t *)(v67 + 40);
            v185.f64[0] = *(float64_t *)(v67 + 88);
            _Q7 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v187, *(double *)(v67 + 72)), v188, *(float64x2_t *)(v67 + 72), 1), v184, v185.f64[0]);
            _D16 = *(_QWORD *)(v67 + 80);
            __asm { FMLA            D17, D16, V5.D[1] }
            v185.f64[0] = _D17 + *(double *)(v67 + 64) * v185.f64[0];
            v192 = *(_QWORD *)(v67 + 48);
            v193 = vextq_s8((int8x16_t)v188, (int8x16_t)vdupq_laneq_s64(_Q5, 1), 8uLL);
            *(_QWORD *)&v188.f64[1] = v193.i64[0];
            v194 = *(_QWORD *)(v67 + 64);
            v195.f64[1] = v294;
            *(_QWORD *)&v195.f64[0] = *(_OWORD *)&vnegq_f64(v185);
            v196 = *(double *)(v165 + 16);
            _D16 = *(double *)(v165 + 40);
            v198 = *(float64x2_t *)(v165 + 24);
            v199 = *(double *)(v165 + 64);
            _Q23 = *(float64x2_t *)(v165 + 48);
            _Q0 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v165, (int64x2_t)v198);
            v202 = (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q0, 1);
            v203 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&_Q0.f64[0], 0);
            v204 = *(double *)(v165 + 88);
            v205 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v165, (int64x2_t)v198);
            v206 = vmlaq_laneq_f64(vmulq_n_f64(v205, *(double *)(v165 + 72)), _Q0, *(float64x2_t *)(v165 + 72), 1);
            _Q0.f64[0] = v196;
            _Q0.f64[1] = _D16;
            _Q28 = vmlaq_n_f64(v206, _Q0, v204);
            _D26 = *(_QWORD *)(v165 + 80);
            __asm { FMLA            D0, D26, V23.D[1] }
            _Q0.f64[0] = _Q0.f64[0] + v199 * v204;
            _Q1 = (int64x2_t)vextq_s8(v203, v202, 8uLL);
            v210 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v205, _Q1), _Q28.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v205, _Q1), _Q28, 1), _Q23, _Q0.f64[0]);
            __asm { FMLA            D1, D16, V28.D[1] }
            v211 = *(double *)_Q1.i64 + v199 * _Q0.f64[0];
            v212 = vmlsq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v187, *(double *)v165), v188, *(float64x2_t *)v165, 1), v184, v196), (float64x2_t)0, _Q7);
            v213 = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v192, *(double *)v165), (float64x2_t)v193.u64[1], *(float64x2_t *)v165, 1), (float64x2_t)v194, v196), (float64x2_t)0, v195);
            v214 = vmlsq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v187, v198.f64[0]), v188, v198, 1), v184, _D16), (float64x2_t)0, _Q7);
            v215 = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v192, v198.f64[0]), (float64x2_t)v193.u64[1], v198, 1), (float64x2_t)v194, _D16), (float64x2_t)0, v195);
            v216 = vmlsq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v187, _Q23.f64[0]), v188, _Q23, 1), v184, v199), (float64x2_t)0, _Q7);
            v217 = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v192, _Q23.f64[0]), (float64x2_t)v193.u64[1], _Q23, 1), (float64x2_t)v194, v199), (float64x2_t)0, v195);
            v218 = vsubq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v187, v210.f64[0]), v188, v210, 1), v184, v211), _Q7);
            v219 = vaddq_f64(v195, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v192, v210.f64[0]), (float64x2_t)v193.u64[1], v210, 1), (float64x2_t)v194, v211));
            *(_QWORD *)&_Q22.f64[0] = v48[8];
            v221 = *((float64x2_t *)v48 + 3);
            *(_QWORD *)&v187.f64[0] = v48[12];
            v222 = *((float64x2_t *)v48 + 5);
            *(_QWORD *)&_Q7.f64[0] = v48[16];
            v223 = *((float64x2_t *)v48 + 7);
            *(_QWORD *)&_Q23.f64[0] = v48[20];
            _Q24 = *((float64x2_t *)v48 + 9);
            v225 = vmulq_n_f64(v212, _Q22.f64[0]);
            v226 = vmulq_n_f64(v213, _Q22.f64[0]);
            _Q22.f64[1] = v187.f64[0];
            v227 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v221, (int64x2_t)v222), vnegq_f64(_Q24).f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v221, (int64x2_t)v222), _Q24, 1), _Q22, _Q23.f64[0], 0);
            _D25 = v48[15];
            __asm
            {
              FMLS            D22, D25, V24.D[1]
              FMLS            D22, D7, V23.D[0]
            }
            v304 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v212, v221.f64[0]), v214, v222.f64[0]), v216, v223.f64[0]), (float64x2_t)0, v218);
            v305 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v213, v221.f64[0]), v215, v222.f64[0]), v217, v223.f64[0]), (float64x2_t)0, v219);
            v306 = vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v212, v221, 1), v214, v222, 1), v216, v223, 1), (float64x2_t)0, v218);
            v307 = vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v213, v221, 1), v215, v222, 1), v217, v223, 1), (float64x2_t)0, v219);
            v308 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v225, v214, v187.f64[0]), v216, _Q7.f64[0]), (float64x2_t)0, v218);
            v309 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v226, v215, v187.f64[0]), v217, _Q7.f64[0]), (float64x2_t)0, v219);
            v310 = vaddq_f64(v218, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v212, v227.f64[0]), v214, v227, 1), v216, _Q22.f64[0]));
            v311 = vaddq_f64(v219, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v213, v227.f64[0]), v215, v227, 1), v217, _Q22.f64[0]));
            memset(v303, 0, sizeof(v303));
            v302 = 0u;
            v314 = &v304;
            v315 = 0;
            v312 = &v302;
            v313 = 0;
            sub_20E95B988(&v314, (double **)&v312);
            v230.f64[0] = v303[0].f64[0];
            _Q18 = v302;
            _Q0 = vmulq_f64(_Q18, _Q18);
            _D1 = v302.f64[1];
            __asm { FMLA            D0, D1, V18.D[1] }
            v234 = _Q0.f64[0] + v230.f64[0] * v230.f64[0];
            if (v234 >= 0.0000002635)
            {
              v249 = sqrt(v234);
              v287 = v302;
              v289 = v303[0].f64[0];
              v250 = __sincos_stret(v249);
              _Q18 = v287;
              v230.f64[0] = v289;
              v229.f64[0] = v250.__sinval / v249;
              a6 = v77;
              _Q0.f64[0] = 1.0 / v234 * (1.0 - v250.__cosval);
              v235 = 1.0 / v234 * (1.0 - v229.f64[0]);
              v50 = v295;
              v236 = v291;
              if (v234 >= 2.775e-15)
                goto LABEL_147;
            }
            else
            {
              _Q0.f64[0] = 0.5 - v234 * (v234 / -720.0 + 0.0416666667);
              v235 = 0.166666667 - v234 * (v234 / -5040.0 + 0.00833333333);
              v229.f64[0] = 1.0 - v234 * v235;
              v50 = v295;
              v236 = v291;
              if (v234 >= 2.775e-15)
              {
LABEL_147:
                if (v234 <= 9.0)
                  _Q0.f64[0] = (_Q0.f64[0] * 0.5 - v235) / v229.f64[0];
                else
                  _Q0.f64[0] = (_Q0.f64[0] + v229.f64[0] * -0.5) / (v234 * _Q0.f64[0]);
                goto LABEL_169;
              }
            }
            _Q0.f64[0] = v234 * 0.0000330687831 + v234 * 0.00138888889 + 0.0833333333;
LABEL_169:
            _Q1 = (float64x2_t)vextq_s8((int8x16_t)_Q18, (int8x16_t)_Q18, 8uLL);
            v229.f64[0] = v311.f64[0];
            v252.f64[0] = _Q1.f64[0];
            v252.f64[1] = v230.f64[0];
            v253 = (float64x2_t)vextq_s8((int8x16_t)v310, (int8x16_t)v229, 8uLL);
            v254 = vsubq_f64(vmulq_laneq_f64(_Q18, v310, 1), vmulq_f64(_Q1, v310));
            v255 = vaddq_f64(v229, vmulq_f64(v254, v236));
            v229.f64[1] = v310.f64[0];
            v230.f64[1] = _Q18.f64[0];
            _Q2 = vsubq_f64(vmulq_f64(v252, v229), vmulq_f64(v230, v253));
            _Q5 = (float64x2_t)vextq_s8((int8x16_t)_Q2, (int8x16_t)v254, 8uLL);
            v254.f64[1] = _Q2.f64[0];
            *(_QWORD *)&v303[1].f64[1] = *(_OWORD *)&vaddq_f64(v255, vmulq_f64(_Q0, vsubq_f64(vmulq_laneq_f64(_Q18, _Q2, 1), vmulq_f64(_Q1, _Q2))));
            *(float64x2_t *)((char *)v303 + 8) = vaddq_f64(vaddq_f64(v310, vmulq_f64(_Q2, v236)), vmulq_n_f64(vsubq_f64(vmulq_f64(v252, v254), vmulq_f64(v230, _Q5)), _Q0.f64[0]));
            _Q1.f64[1] = v303[0].f64[1];
            _V0.D[1] = v303[1].f64[1];
            _Q2.f64[1] = v302.f64[1];
            v8 = *((float64x2_t *)v48 + 22);
            _D4 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v48 + 176), *(double *)&v302), *(float64x2_t *)(v48 + 224), v302, 1), *v70, *(double *)v303), *(float64x2_t *)(v48 + 320), *v303, 1), *(float64x2_t *)(v48 + 368), *(double *)(v303 + 16)), *(float64x2_t *)(v48 + 416), *(v303 + 16), 1).f64[1];
            __asm { FMLA            D5, D4, V2.D[1] }
            _Q2.f64[0] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v48 + 192), *(double *)&v302), *(float64x2_t *)(v48 + 240), v302, 1), *(float64x2_t *)(v48 + 288), *(double *)v303), *(float64x2_t *)(v48 + 336), *v303, 1), *(float64x2_t *)(v48 + 384), *(double *)(v303 + 16)), *(float64x2_t *)(v48 + 432), *(v303 + 16), 1).f64[1];
            __asm { FMLA            D5, D2, V1.D[1] }
            _Q1.f64[0] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v48 + 208), *(double *)&v302), *(float64x2_t *)(v48 + 256), v302, 1), *(float64x2_t *)(v48 + 304), *(double *)v303), v8, *v303, 1), *(float64x2_t *)(v48 + 400), *(double *)(v303 + 16)), *(float64x2_t *)(v48 + 448), *(v303 + 16), 1).f64[1];
            __asm { FMLA            D5, D1, V0.D[1] }
            v296 |= _D15 > _Q5.f64[0] * a7;
          }
        }
      }
    }
LABEL_170:
    while (1)
    {
      v48 += 59;
      if (v48 == v47)
        break;
      v49 = (int8x8_t)v299[1];
      if (v299[1])
        goto LABEL_71;
    }
LABEL_66:
    if (++v44 != v23)
      continue;
    break;
  }
  v260 = *a3;
  v261 = a3[1];
  if (((*a3 != v261) & v296) == 1)
  {
    v262 = *(float64x2_t **)(a4 + 8);
    do
    {
      v265 = v260[2];
      v266 = *(float64x2_t **)a4;
      if (*(float64x2_t **)a4 != v262)
      {
        v267 = *v260;
        v268 = *((_DWORD *)v260 + 2);
        v269 = *(float64x2_t **)a4;
        v270 = *((_DWORD *)v260 + 6);
        while (*(_QWORD *)&v269->f64[0] != v267
             || LODWORD(v269->f64[1]) != v268
             || *(_QWORD *)&v269[1].f64[0] != v265
             || LODWORD(v269[1].f64[1]) != v270)
        {
          if (*(_QWORD *)&v269->f64[0] == v265)
          {
            _ZF = LODWORD(v269->f64[1]) == v270 && *(_QWORD *)&v269[1].f64[0] == v267;
            if (_ZF && LODWORD(v269[1].f64[1]) == v268)
              break;
          }
          v269 += 2;
          if (v269 == v262)
            goto LABEL_192;
        }
        goto LABEL_176;
      }
LABEL_192:
      v304 = *(float64x2_t *)v260;
      v305 = *((float64x2_t *)v260 + 1);
      v272 = *(_QWORD *)(a4 + 16);
      if ((unint64_t)v262 < v272)
      {
        v263 = v305;
        *v262 = v304;
        v262[1] = v263;
        v264 = v262 + 2;
      }
      else
      {
        v273 = ((char *)v262 - (char *)v266) >> 5;
        v274 = v273 + 1;
        if ((unint64_t)(v273 + 1) >> 59)
          sub_20E867F44();
        v275 = v272 - (_QWORD)v266;
        if (v275 >> 4 > v274)
          v274 = v275 >> 4;
        if ((unint64_t)v275 >= 0x7FFFFFFFFFFFFFE0)
          v276 = 0x7FFFFFFFFFFFFFFLL;
        else
          v276 = v274;
        if (v276)
        {
          if (v276 >> 59)
            sub_20E877A38();
          v277 = (char *)operator new(32 * v276);
          v278 = v305;
          v279 = (float64x2_t *)&v277[32 * v273];
          *v279 = v304;
          v279[1] = v278;
          v280 = (uint64_t)v279;
          if (v266 != v262)
          {
            do
            {
LABEL_204:
              v282 = v262[-1];
              *(float64x2_t *)(v280 - 32) = v262[-2];
              *(float64x2_t *)(v280 - 16) = v282;
              v280 -= 32;
              v262 -= 2;
            }
            while (v262 != v266);
            v262 = *(float64x2_t **)a4;
            v264 = v279 + 2;
            *(_QWORD *)a4 = v280;
            *(_QWORD *)(a4 + 8) = v279 + 2;
            *(_QWORD *)(a4 + 16) = &v277[32 * v276];
            if (!v262)
              goto LABEL_175;
LABEL_208:
            operator delete(v262);
            goto LABEL_175;
          }
        }
        else
        {
          v277 = 0;
          v281 = v305;
          v279 = (float64x2_t *)(32 * v273);
          *v279 = v304;
          v279[1] = v281;
          v280 = 32 * v273;
          if (v266 != v262)
            goto LABEL_204;
        }
        v264 = v279 + 2;
        *(_QWORD *)a4 = v280;
        *(_QWORD *)(a4 + 8) = v279 + 2;
        *(_QWORD *)(a4 + 16) = &v277[32 * v276];
        if (v262)
          goto LABEL_208;
      }
LABEL_175:
      *(_QWORD *)(a4 + 8) = v264;
      v262 = v264;
LABEL_176:
      v260 += 4;
    }
    while (v260 != v261);
  }
LABEL_210:
  v283 = __p[0];
  if (__p[0])
  {
    do
    {
      v284 = (_QWORD *)*v283;
      operator delete(v283);
      v283 = v284;
    }
    while (v284);
  }
  v285 = v299[0];
  v299[0] = 0;
  if (v285)
    operator delete(v285);
}

void sub_20F24C1F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,_QWORD *__p)
{
  uint64_t v27;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;

  v29 = __p;
  if (__p)
  {
    do
    {
      v30 = (_QWORD *)*v29;
      operator delete(v29);
      v29 = v30;
    }
    while (v30);
  }
  if (a25)
  {
    operator delete(a25);
    v31 = *(void **)v27;
    if (!*(_QWORD *)v27)
LABEL_5:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v31 = *(void **)v27;
    if (!*(_QWORD *)v27)
      goto LABEL_5;
  }
  *(_QWORD *)(v27 + 8) = v31;
  operator delete(v31);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F24C274(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7, _QWORD *a8, double a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t *v40;
  _QWORD *v41;
  _QWORD *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  int v49;
  unint64_t v50;
  const void *v51;
  size_t v52;
  size_t v53;
  int v54;
  unint64_t v55;
  const void *v56;
  size_t v57;
  int v58;
  size_t v59;
  int v60;
  BOOL v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  void *v67;
  void *v68;
  void *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  void *v75;
  void *v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  unint64_t v81;
  unint64_t v82;
  size_t v83;
  const char *v84;
  unsigned __int8 v85;
  const char *v86;
  size_t v87;
  _BYTE *v88;
  unint64_t v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  _BYTE *v93;
  unint64_t v94;
  const char *v95;
  uint64_t v96;
  uint64_t v97;
  NSObject *v98;
  size_t v99;
  std::__shared_weak_count_vtbl *v100;
  std::__shared_weak_count *v101;
  std::__shared_weak_count *v102;
  unint64_t *p_shared_owners;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  int v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  void *v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  uint64_t v137;
  __int128 v138;
  uint64_t v139;
  __int128 *v140;
  uint64_t v141;
  uint64_t v142;
  __int128 *v143;
  __int128 *v144;
  __int128 *v145;
  __int128 *v146;
  uint64_t v147;
  uint64_t **v148;
  uint64_t **i;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  __int128 v153;
  __int128 *v154;
  __int128 *v155;
  uint64_t v156;
  __int128 *v157;
  __int128 *v158;
  __int128 *v159;
  __int128 *v160;
  uint64_t v161;
  uint64_t **v162;
  uint64_t **v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t v172;
  __int128 v173;
  uint64_t v174;
  uint64_t v175;
  _QWORD *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  void *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t *v190;
  uint64_t *v191;
  uint64_t v192;
  uint64_t *v193;
  uint64_t v194;
  uint64_t *v195;
  int v197;
  uint64_t *v198;
  uint64_t *v199;
  _QWORD *rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v201;
  void *v202;
  const char *v203;
  int v204;
  const char *v205;
  uint64_t v206;
  std::__shared_weak_count *v207;
  uint64_t v208;
  uint64_t v209;
  void *__p;
  void *v211;
  uint64_t v212;
  _BYTE __s2[48];
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 16) = *a8;
  *(_BYTE *)(a1 + 8) = 1;
  v16 = a8[1];
  v198 = (uint64_t *)(a1 + 16);
  *(_QWORD *)(a1 + 24) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 136) = 1065353216;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_DWORD *)(a1 + 176) = 1065353216;
  *(_QWORD *)(a1 + 184) = 0;
  v19 = a1 + 184;
  *(_QWORD *)(a1 + 192) = 0;
  v195 = (uint64_t *)(a1 + 192);
  *(_BYTE *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  v20 = a1 + 240;
  *(_QWORD *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  v21 = *(_QWORD *)(a10 + 24);
  if (!v21)
    goto LABEL_7;
  if (v21 != a10)
  {
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
LABEL_7:
    *(_QWORD *)(a1 + 264) = v21;
    goto LABEL_9;
  }
  *(_QWORD *)(a1 + 264) = v20;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a10 + 24) + 24))(*(_QWORD *)(a10 + 24), a1 + 240);
LABEL_9:
  v22 = *(_QWORD *)(a11 + 24);
  if (!v22)
  {
LABEL_12:
    *(_QWORD *)(a1 + 296) = v22;
    goto LABEL_14;
  }
  if (v22 != a11)
  {
    v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
    goto LABEL_12;
  }
  *(_QWORD *)(a1 + 296) = a1 + 272;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a11 + 24) + 24))(*(_QWORD *)(a11 + 24), a1 + 272);
LABEL_14:
  *(_QWORD *)(a1 + 304) = *a7;
  v23 = *(_QWORD *)(a12 + 24);
  if (!v23)
  {
LABEL_17:
    *(_QWORD *)(a1 + 336) = v23;
    goto LABEL_19;
  }
  if (v23 != a12)
  {
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
    goto LABEL_17;
  }
  *(_QWORD *)(a1 + 336) = a1 + 312;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a12 + 24) + 24))(*(_QWORD *)(a12 + 24), a1 + 312);
LABEL_19:
  v24 = *(_QWORD *)(a13 + 24);
  if (v24)
  {
    if (v24 == a13)
    {
      *(_QWORD *)(a1 + 368) = a1 + 344;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a13 + 24) + 24))(*(_QWORD *)(a13 + 24), a1 + 344);
      goto LABEL_24;
    }
    v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24);
  }
  *(_QWORD *)(a1 + 368) = v24;
LABEL_24:
  *(_BYTE *)(a1 + 376) = 0;
  *(_BYTE *)(a1 + 3552) = 0;
  *(_BYTE *)(a1 + 4456) = 0;
  *(_BYTE *)(a1 + 3608) = 0;
  *(_OWORD *)(a1 + 3560) = 0u;
  *(_OWORD *)(a1 + 3576) = 0u;
  *(_OWORD *)(a1 + 3592) = 0u;
  *(double *)(a1 + 4464) = a9;
  v25 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 424);
  v27 = *(char **)(v25 + 40);
  v26 = *(char **)(v25 + 48);
  if (v27 != v26)
  {
    v28 = v26 - v27 - 16;
    v29 = v27;
    if (v28 < 0x10)
      goto LABEL_317;
    v30 = (v28 >> 4) + 1;
    v29 = &v27[16 * (v30 & 0x1FFFFFFFFFFFFFFELL)];
    v31 = (uint64_t *)(v27 + 16);
    v32 = v30 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v33 = *(v31 - 2);
      v34 = *v31;
      v31 += 4;
      *(_BYTE *)(v33 + 736) = 0;
      *(_BYTE *)(v34 + 736) = 0;
      v32 -= 2;
    }
    while (v32);
    if (v30 != (v30 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_317:
      do
      {
        v35 = *(_QWORD *)v29;
        v29 += 16;
        *(_BYTE *)(v35 + 736) = 0;
      }
      while (v29 != v26);
    }
  }
  v36 = *(_QWORD *)a1;
  if (!*(_BYTE *)(*(_QWORD *)a1 + 2056))
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MapDataController.cpp", 110, (uint64_t)"config().opt_state_correction_config", 36, (uint64_t)&unk_21029C995, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v36 = *(_QWORD *)a1;
    if (!*(_BYTE *)(*(_QWORD *)a1 + 2056))
      sub_20E866B34();
  }
  v37 = operator new();
  *(_QWORD *)v37 = off_24C9FC008;
  sub_20EE82A14(v37 + 8);
  *(_QWORD *)(v37 + 872) = 2;
  *(_OWORD *)(v37 + 880) = xmmword_210384F70;
  *(_OWORD *)(v37 + 896) = xmmword_210378C50;
  *(_QWORD *)(v37 + 912) = 50;
  *(_QWORD *)(v37 + 920) = 0;
  *(_QWORD *)(v37 + 936) = 0;
  *(_QWORD *)(v37 + 928) = 0;
  v38 = operator new(8uLL);
  *v38 = 20;
  *(_QWORD *)(v37 + 920) = v38;
  *(_QWORD *)(v37 + 936) = v38 + 1;
  *(_QWORD *)(v37 + 928) = v38 + 1;
  *(_QWORD *)(v37 + 944) = 0;
  *(_QWORD *)(v37 + 960) = 0;
  *(_QWORD *)(v37 + 952) = 0;
  v39 = operator new(8uLL);
  *(_QWORD *)(v37 + 944) = v39;
  *v39++ = 0x3FD999999999999ALL;
  *(_QWORD *)(v37 + 960) = v39;
  *(_QWORD *)(v37 + 952) = v39;
  *(_QWORD *)(v37 + 968) = 0x3FECCCCCCCCCCCCDLL;
  *(_OWORD *)(v37 + 976) = xmmword_210384F80;
  *(_OWORD *)(v37 + 992) = xmmword_210384F90;
  *(_QWORD *)(v37 + 1008) = 0;
  *(_WORD *)(v37 + 1016) = 256;
  *(_OWORD *)(v37 + 1024) = xmmword_2103A9420;
  *(_QWORD *)(v37 + 1040) = 0xBFF0000000000000;
  *(_WORD *)(v37 + 1048) = 0;
  v40 = (uint64_t *)(v37 + 1096);
  v191 = (uint64_t *)(v37 + 1104);
  v193 = (uint64_t *)(v37 + 1112);
  v190 = (uint64_t *)(v37 + 1120);
  *(_OWORD *)(v37 + 1056) = 0u;
  *(_OWORD *)(v37 + 1072) = 0u;
  *(_BYTE *)(v37 + 1128) = 0;
  *(_OWORD *)(v37 + 1096) = 0u;
  *(_OWORD *)(v37 + 1112) = 0u;
  v41 = operator new(0x28uLL);
  v41[1] = 0;
  v41[2] = 0;
  *v41 = &off_24C9FC058;
  v41[3] = 0x303900000000;
  v41[4] = 0;
  *(_QWORD *)(v37 + 1056) = v41 + 3;
  *(_QWORD *)(v37 + 1064) = v41;
  v42 = operator new(0x28uLL);
  v42[1] = 0;
  v42[2] = 0;
  *v42 = &off_24C9FC058;
  v42[3] = 0x303900000000;
  v42[4] = 0;
  *(_QWORD *)(v37 + 1072) = v42 + 3;
  *(_QWORD *)(v37 + 1080) = v42;
  sub_20E8689E8(v37 + 8, v36 + 1008);
  v43 = *(_OWORD *)(v36 + 1872);
  v44 = *(_OWORD *)(v36 + 1904);
  *(_OWORD *)(v37 + 888) = *(_OWORD *)(v36 + 1888);
  *(_OWORD *)(v37 + 904) = v44;
  *(_OWORD *)(v37 + 872) = v43;
  if (v37 + 872 != v36 + 1872)
  {
    sub_20E86811C((_QWORD *)(v37 + 920), *(char **)(v36 + 1920), *(char **)(v36 + 1928), (uint64_t)(*(_QWORD *)(v36 + 1928) - *(_QWORD *)(v36 + 1920)) >> 3);
    sub_20E86811C((_QWORD *)(v37 + 944), *(char **)(v36 + 1944), *(char **)(v36 + 1952), (uint64_t)(*(_QWORD *)(v36 + 1952) - *(_QWORD *)(v36 + 1944)) >> 3);
  }
  v45 = *(_OWORD *)(v36 + 1984);
  *(_OWORD *)(v37 + 968) = *(_OWORD *)(v36 + 1968);
  *(_OWORD *)(v37 + 984) = v45;
  v46 = *(_OWORD *)(v36 + 2000);
  v47 = *(_OWORD *)(v36 + 2016);
  v48 = *(_OWORD *)(v36 + 2032);
  *(_WORD *)(v37 + 1048) = *(_WORD *)(v36 + 2048);
  *(_OWORD *)(v37 + 1016) = v47;
  *(_OWORD *)(v37 + 1032) = v48;
  *(_OWORD *)(v37 + 1000) = v46;
  if (sub_20F24DF40((const void **)(v36 + 1104)) == 5
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/include/VIO/AreaMapping/SlamRelocalizationBase.hpp", 57, (uint64_t)"area_mapping::StringToKeyframeSamplingMethod( config_slam_relocalization.keyframe_sampling_method) != area_mapping::KeyframeSamplingMethod::Unknown", 147, (uint64_t)"Unknown Keyframe sampling method!", 33, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_305;
  }
  __s2[23] = 20;
  strcpy(__s2, "individual_keyframes");
  v49 = *(char *)(v36 + 1151);
  v50 = v49 >= 0 ? *(unsigned __int8 *)(v36 + 1151) : *(_QWORD *)(v36 + 1136);
  v51 = v49 >= 0 ? (const void *)(v36 + 1128) : *(const void **)(v36 + 1128);
  v52 = v50 >= 0x14 ? 20 : v50;
  if (memcmp(v51, __s2, v52) || v50 != 20)
  {
    __s2[23] = 19;
    strcpy(__s2, "covisible_keyframes");
    v53 = v50 >= 0x13 ? 19 : v50;
    if ((memcmp(v51, __s2, v53) || v50 != 19)
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/include/VIO/AreaMapping/SlamRelocalizationBase.hpp", 63, (uint64_t)"area_mapping::StringToKeyframeMatchingMethod( config_slam_relocalization.keyframe_matching_method) != area_mapping::KeyframeMatchingMethod::Unknown", 147, (uint64_t)"Unknown Keyframe matching method!", 33, (void (*)(void **))sub_21023DDB0))
    {
LABEL_305:
      abort();
    }
  }
  *(_DWORD *)(v37 + 1088) = sub_20F24DF40((const void **)(v37 + 104));
  __s2[23] = 20;
  strcpy(__s2, "individual_keyframes");
  v54 = *(char *)(v37 + 151);
  if (v54 >= 0)
    v55 = *(unsigned __int8 *)(v37 + 151);
  else
    v55 = *(_QWORD *)(v37 + 136);
  if (v54 >= 0)
    v56 = (const void *)(v37 + 128);
  else
    v56 = *(const void **)(v37 + 128);
  if (v55 >= 0x14)
    v57 = 20;
  else
    v57 = v55;
  if (memcmp(v56, __s2, v57) || (v58 = 0, v55 != 20))
  {
    __s2[23] = 19;
    strcpy(__s2, "covisible_keyframes");
    if (v55 >= 0x13)
      v59 = 19;
    else
      v59 = v55;
    v60 = memcmp(v56, __s2, v59);
    v61 = v55 == 19 && v60 == 0;
    if (v61)
      v58 = 1;
    else
      v58 = 2;
  }
  *(_DWORD *)(v37 + 1092) = v58;
  v62 = operator new();
  sub_20F403984(v62, (__int128 *)(v37 + 872));
  v63 = (_QWORD *)*v40;
  *v40 = v62;
  if (v63)
    sub_20F04BCC8(v37 + 1096, v63);
  v64 = operator new();
  sub_20F40458C(v64, (__int128 *)(v37 + 872));
  v65 = (_QWORD *)*v191;
  *v191 = v64;
  if (v65)
  {
    v66 = v65[23];
    v65[23] = 0;
    if (v66)
    {
      v67 = *(void **)(v66 + 32);
      if (v67)
      {
        *(_QWORD *)(v66 + 40) = v67;
        operator delete(v67);
      }
      MEMORY[0x212BC6398](v66, 0x1010C409BE32CFALL);
    }
    v68 = (void *)v65[9];
    if (v68)
    {
      v65[10] = v68;
      operator delete(v68);
    }
    v69 = (void *)v65[6];
    if (v69)
    {
      v65[7] = v69;
      operator delete(v69);
    }
    MEMORY[0x212BC6398](v65, 0x10B0C40D335D76ALL);
  }
  v70 = operator new();
  sub_20F403984(v70, (__int128 *)(v36 + 1624));
  v71 = (_QWORD *)*v193;
  *v193 = v70;
  if (v71)
    sub_20F04BCC8((uint64_t)v193, v71);
  v72 = operator new();
  sub_20F40458C(v72, (__int128 *)(v36 + 1624));
  v73 = (_QWORD *)*v190;
  *v190 = v72;
  if (v73)
  {
    v74 = v73[23];
    v73[23] = 0;
    if (v74)
    {
      v75 = *(void **)(v74 + 32);
      if (v75)
      {
        *(_QWORD *)(v74 + 40) = v75;
        operator delete(v75);
      }
      MEMORY[0x212BC6398](v74, 0x1010C409BE32CFALL);
    }
    v76 = (void *)v73[9];
    if (v76)
    {
      v73[10] = v76;
      operator delete(v76);
    }
    v77 = (void *)v73[6];
    if (v77)
    {
      v73[7] = v77;
      operator delete(v77);
    }
    MEMORY[0x212BC6398](v73, 0x10B0C40D335D76ALL);
  }
  *(_QWORD *)v37 = &off_24C9FBF90;
  v78 = *(_QWORD *)v19;
  *(_QWORD *)v19 = v37;
  if (v78)
    (*(void (**)(uint64_t))(*(_QWORD *)v78 + 8))(v78);
  if (!(_BYTE)a4)
  {
    if (sub_20F24DF40((const void **)(*(_QWORD *)a1 + 1104)) != 2)
      goto LABEL_204;
    *(_QWORD *)(*(_QWORD *)v19 + 1088) = 0;
    sub_20F24E118(&v208);
    if (**(int **)(v208 + 56) > 3)
      goto LABEL_204;
    v80 = *(unsigned __int8 *)(v208 + 72);
    v81 = sub_20E8C31DC(v208, "OSLogSurrogateAppender", 1, 0);
    v82 = v81;
    if (!v80 && !v81)
      goto LABEL_204;
    v197 = v80;
    v199 = &v208;
    rep = (_QWORD *)std::chrono::steady_clock::now().__d_.__rep_;
    v201 = std::chrono::system_clock::now().__d_.__rep_;
    LODWORD(v202) = 3;
    v203 = "unknown file";
    v204 = 132;
    v206 = 0;
    v207 = 0;
    v205 = "unknown function";
    v194 = v208;
    if (*(char *)(v208 + 39) < 0)
    {
      v84 = *(const char **)(v208 + 16);
      v83 = *(_QWORD *)(v208 + 24);
    }
    else
    {
      v83 = *(unsigned __int8 *)(v208 + 39);
      v84 = (const char *)(v208 + 16);
    }
    v192 = v208 + 16;
    v85 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v85 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)__s2);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__s2);
      if (__s2[24] && (__s2[23] & 0x80000000) != 0)
        operator delete(*(void **)__s2);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v86 = byte_254A4A4F8;
    else
      v86 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v87 = byte_254A4A4F8[23];
    else
      v87 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)__s2 = os_log_create(v86, v84);
    v88 = &__s2[8];
    if (v87 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v87 >= 0x17)
    {
      v89 = v82;
      v90 = v84;
      v91 = (v87 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v87 | 7) != 0x17)
        v91 = v87 | 7;
      v92 = v91 + 1;
      v88 = operator new(v91 + 1);
      *(_QWORD *)&__s2[16] = v87;
      *(_QWORD *)&__s2[24] = v92 | 0x8000000000000000;
      *(_QWORD *)&__s2[8] = v88;
      v84 = v90;
      v82 = v89;
    }
    else
    {
      __s2[31] = v87;
      if (!v87)
      {
LABEL_135:
        v88[v87] = 0;
        __s2[32] = 1;
        v93 = &__s2[40];
        if (v83 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v83 >= 0x17)
        {
          v94 = v82;
          v95 = v84;
          v96 = (v83 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v83 | 7) != 0x17)
            v96 = v83 | 7;
          v97 = v96 + 1;
          v93 = operator new(v96 + 1);
          *(_QWORD *)&v214 = v83;
          *((_QWORD *)&v214 + 1) = v97 | 0x8000000000000000;
          *(_QWORD *)&__s2[40] = v93;
          v84 = v95;
          v82 = v94;
        }
        else
        {
          HIBYTE(v214) = v83;
          if (!v83)
            goto LABEL_143;
        }
        memmove(v93, v84, v83);
LABEL_143:
        v93[v83] = 0;
        LOBYTE(v215) = 1;
        v98 = *(NSObject **)__s2;
        if (SHIBYTE(v214) < 0)
          operator delete(*(void **)&__s2[40]);
        if (__s2[32] && (__s2[31] & 0x80000000) != 0)
          operator delete(*(void **)&__s2[8]);
        if (*(_QWORD *)__s2)
          os_release(*(void **)__s2);
        if (v82 && *(_QWORD *)(v82 + 24))
        {
          v99 = _os_log_pack_size();
          v100 = (std::__shared_weak_count_vtbl *)operator new(v99, (std::align_val_t)8uLL);
          v101 = (std::__shared_weak_count *)operator new();
          v102 = v101;
          v101->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v101->__shared_owners_;
          v101->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v101->__shared_weak_owners_ = 0;
          v101[1].__vftable = v100;
          *(_QWORD *)__s2 = v100;
          *(_QWORD *)&__s2[8] = v100;
          *(_QWORD *)&__s2[16] = v101;
          do
            v104 = __ldxr(p_shared_owners);
          while (__stxr(v104 + 1, p_shared_owners));
          memset(&__s2[24], 0, 24);
          do
            v105 = __ldaxr(p_shared_owners);
          while (__stlxr(v105 - 1, p_shared_owners));
          if (!v105)
          {
            ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
            std::__shared_weak_count::__release_weak(v102);
          }
          v106 = *(_QWORD *)__s2;
          *(_WORD *)_os_log_pack_fill() = 0;
          v107 = (char *)operator new();
          v108 = *(unsigned __int8 *)(v194 + 39);
          v109 = v192;
          if ((v108 & 0x80u) != 0)
          {
            v109 = *(_QWORD *)(v194 + 16);
            v108 = *(_QWORD *)(v194 + 24);
          }
          *(_QWORD *)v107 = v106;
          *(_OWORD *)(v107 + 8) = *(_OWORD *)&__s2[8];
          *(_QWORD *)&__s2[8] = 0;
          *(_QWORD *)&__s2[16] = 0;
          *(_OWORD *)(v107 + 24) = *(_OWORD *)&__s2[24];
          *(_QWORD *)&__s2[24] = 0;
          *(_QWORD *)&__s2[32] = 0;
          *((_QWORD *)v107 + 5) = v109;
          *((_QWORD *)v107 + 6) = v108;
          v107[56] = 1;
          v209 = 0;
          __p = v107;
          (*(void (**)(_QWORD, void **))(**(_QWORD **)(v82 + 24) + 40))(*(_QWORD *)(v82 + 24), &__p);
          v110 = __p;
          __p = 0;
          if (v110)
          {
            v111 = (std::__shared_weak_count *)*((_QWORD *)v110 + 4);
            if (v111)
            {
              v112 = (unint64_t *)&v111->__shared_owners_;
              do
                v113 = __ldaxr(v112);
              while (__stlxr(v113 - 1, v112));
              if (!v113)
              {
                ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
                std::__shared_weak_count::__release_weak(v111);
              }
            }
            v114 = (std::__shared_weak_count *)*((_QWORD *)v110 + 2);
            if (v114)
            {
              v115 = (unint64_t *)&v114->__shared_owners_;
              do
                v116 = __ldaxr(v115);
              while (__stlxr(v116 - 1, v115));
              if (!v116)
              {
                ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
                std::__shared_weak_count::__release_weak(v114);
              }
            }
            MEMORY[0x212BC6398](v110, 0x10F0C40B62ED6C6);
            v117 = v209;
            v209 = 0;
            if (v117)
            {
              v118 = *(std::__shared_weak_count **)(v117 + 32);
              if (v118)
              {
                v119 = (unint64_t *)&v118->__shared_owners_;
                do
                  v120 = __ldaxr(v119);
                while (__stlxr(v120 - 1, v119));
                if (!v120)
                {
                  ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                  std::__shared_weak_count::__release_weak(v118);
                }
              }
              v121 = *(std::__shared_weak_count **)(v117 + 16);
              if (v121)
              {
                v122 = (unint64_t *)&v121->__shared_owners_;
                do
                  v123 = __ldaxr(v122);
                while (__stlxr(v123 - 1, v122));
                if (!v123)
                {
                  ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
                  std::__shared_weak_count::__release_weak(v121);
                }
              }
              MEMORY[0x212BC6398](v117, 0x10F0C40B62ED6C6);
            }
          }
          v124 = *(std::__shared_weak_count **)&__s2[32];
          v125 = v197;
          if (*(_QWORD *)&__s2[32])
          {
            v126 = (unint64_t *)(*(_QWORD *)&__s2[32] + 8);
            do
              v127 = __ldaxr(v126);
            while (__stlxr(v127 - 1, v126));
            if (!v127)
            {
              ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
              std::__shared_weak_count::__release_weak(v124);
            }
          }
          v128 = *(std::__shared_weak_count **)&__s2[16];
          if (*(_QWORD *)&__s2[16])
          {
            v129 = (unint64_t *)(*(_QWORD *)&__s2[16] + 8);
            do
              v130 = __ldaxr(v129);
            while (__stlxr(v130 - 1, v129));
            if (!v130)
            {
              ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
              std::__shared_weak_count::__release_weak(v128);
            }
          }
        }
        else
        {
          os_log_type_enabled(v98, OS_LOG_TYPE_INFO);
          *(_WORD *)__s2 = 0;
          v131 = (void *)_os_log_send_and_compose_impl();
          v125 = v197;
          if (v131)
            free(v131);
        }
        if (v125)
        {
          sub_20E8C003C((uint64_t)&v199, "Switched to sequential sampling since the VLAD/PCA model could not be loaded.");
          sub_20E863570((uint64_t)&v199);
        }
        sub_20E863570((uint64_t)&v199);
        v132 = v207;
        if (v207)
        {
          v133 = (unint64_t *)&v207->__shared_owners_;
          do
            v134 = __ldaxr(v133);
          while (__stlxr(v134 - 1, v133));
          if (!v134)
          {
            ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
            std::__shared_weak_count::__release_weak(v132);
          }
        }
        goto LABEL_204;
      }
    }
    memmove(v88, v86, v87);
    goto LABEL_135;
  }
  sub_20F2C9564(*(_QWORD *)(*(_QWORD *)v19 + 1056), a3, a4);
  v79 = *v198;
  if (*(_DWORD *)(a3 + 48) != *(_DWORD *)(*v198 + 256)
    || *(_DWORD *)(a3 + 52) != *(_DWORD *)(v79 + 260)
    || *(_DWORD *)(a3 + 56) != *(_DWORD *)(v79 + 264)
    || *(_DWORD *)(a3 + 288) != *(_DWORD *)(v79 + 268)
    || *(_DWORD *)(a3 + 292) != *(_DWORD *)(v79 + 272)
    || *(_DWORD *)(a3 + 296) != *(_DWORD *)(v79 + 276))
  {
    goto LABEL_203;
  }
  if (*(_BYTE *)(a3 + 44) && *(_BYTE *)(v79 + 292))
  {
    if (*(_DWORD *)(a3 + 32) == *(_DWORD *)(v79 + 280)
      && *(_DWORD *)(a3 + 36) == *(_DWORD *)(v79 + 284)
      && *(_DWORD *)(a3 + 40) == *(_DWORD *)(v79 + 288))
    {
      goto LABEL_204;
    }
    goto LABEL_203;
  }
  if ((*(_BYTE *)(a3 + 44) != 0) != (*(_BYTE *)(v79 + 292) != 0))
  {
LABEL_203:
    v136 = *(_QWORD **)(v79 + 240);
    v135 = (_QWORD *)(v79 + 240);
    sub_20E86872C((uint64_t)(v135 - 1), v136);
    *(v135 - 1) = v135;
    *v135 = 0;
    v135[1] = 0;
    *(_QWORD *)__s2 = *(_QWORD *)(a3 + 48);
    *(_DWORD *)&__s2[8] = *(_DWORD *)(a3 + 56);
    *(_DWORD *)&__s2[20] = *(_DWORD *)(a3 + 296);
    *(_QWORD *)&__s2[12] = *(_QWORD *)(a3 + 288);
    *(_QWORD *)&__s2[29] = *(_QWORD *)(a3 + 37);
    *(_QWORD *)&__s2[24] = *(_QWORD *)(a3 + 32);
    v137 = *v198;
    *(_QWORD *)(v137 + 288) = *(_QWORD *)&__s2[32];
    v138 = *(_OWORD *)&__s2[16];
    *(_OWORD *)(v137 + 256) = *(_OWORD *)__s2;
    *(_OWORD *)(v137 + 272) = v138;
  }
LABEL_204:
  v139 = *v198;
  v140 = *(__int128 **)(*v198 + 232);
  v141 = *v198 + 240;
  if (v140 != (__int128 *)v141)
  {
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v19 + 1056) + 8))
    {
      do
      {
        v142 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v19 + 1056) + 8);
        if (v142)
          sub_20F278024((_QWORD *)(v142 + 400), (char *)v140 + 56, v140 + 2);
        v143 = (__int128 *)*((_QWORD *)v140 + 1);
        if (v143)
        {
          do
          {
            v144 = v143;
            v143 = *(__int128 **)v143;
          }
          while (v143);
        }
        else
        {
          do
          {
            v144 = (__int128 *)*((_QWORD *)v140 + 2);
            v61 = *(_QWORD *)v144 == (_QWORD)v140;
            v140 = v144;
          }
          while (!v61);
        }
        v140 = v144;
      }
      while (v144 != (__int128 *)v141);
      v139 = *v198;
    }
    else
    {
      do
      {
        v145 = (__int128 *)*((_QWORD *)v140 + 1);
        if (v145)
        {
          do
          {
            v146 = v145;
            v145 = *(__int128 **)v145;
          }
          while (v145);
        }
        else
        {
          do
          {
            v146 = (__int128 *)*((_QWORD *)v140 + 2);
            v61 = *(_QWORD *)v146 == (_QWORD)v140;
            v140 = v146;
          }
          while (!v61);
        }
        v140 = v146;
      }
      while (v146 != (__int128 *)v141);
    }
  }
  v147 = *(_QWORD *)(v139 + 424);
  v148 = *(uint64_t ***)(v147 + 40);
  for (i = *(uint64_t ***)(v147 + 48); v148 != i; v148 += 2)
    sub_20F24E20C(a1, (char ***)*v148 + 72, *v148);
  v150 = *(_QWORD *)a1;
  if (!(_BYTE)a6 || !*(_BYTE *)(v150 + 1225))
  {
LABEL_263:
    if (!*(_BYTE *)(v150 + 2499))
      goto LABEL_264;
    goto LABEL_270;
  }
  sub_20F2C9564(*(_QWORD *)(*(_QWORD *)v19 + 1072), a5, a6);
  v151 = *v198;
  if (*(_DWORD *)(a5 + 48) != *(_DWORD *)(*v198 + 320)
    || *(_DWORD *)(a5 + 52) != *(_DWORD *)(v151 + 324)
    || *(_DWORD *)(a5 + 56) != *(_DWORD *)(v151 + 328)
    || *(_DWORD *)(a5 + 288) != *(_DWORD *)(v151 + 332)
    || *(_DWORD *)(a5 + 292) != *(_DWORD *)(v151 + 336)
    || *(_DWORD *)(a5 + 296) != *(_DWORD *)(v151 + 340))
  {
    goto LABEL_241;
  }
  if (!*(_BYTE *)(a5 + 44) || !*(_BYTE *)(v151 + 356))
  {
    if ((*(_BYTE *)(a5 + 44) != 0) == (*(_BYTE *)(v151 + 356) != 0))
      goto LABEL_242;
    goto LABEL_241;
  }
  if (*(_DWORD *)(a5 + 32) != *(_DWORD *)(v151 + 344)
    || *(_DWORD *)(a5 + 36) != *(_DWORD *)(v151 + 348)
    || *(_DWORD *)(a5 + 40) != *(_DWORD *)(v151 + 352))
  {
LABEL_241:
    sub_20E86872C(v151 + 296, *(_QWORD **)(v151 + 304));
    *(_QWORD *)(v151 + 304) = 0;
    *(_QWORD *)(v151 + 312) = 0;
    *(_QWORD *)(v151 + 296) = v151 + 304;
    *(_QWORD *)__s2 = *(_QWORD *)(a5 + 48);
    *(_DWORD *)&__s2[8] = *(_DWORD *)(a5 + 56);
    *(_DWORD *)&__s2[20] = *(_DWORD *)(a5 + 296);
    *(_QWORD *)&__s2[12] = *(_QWORD *)(a5 + 288);
    *(_QWORD *)&__s2[29] = *(_QWORD *)(a5 + 37);
    *(_QWORD *)&__s2[24] = *(_QWORD *)(a5 + 32);
    v152 = *v198;
    *(_QWORD *)(v152 + 352) = *(_QWORD *)&__s2[32];
    v153 = *(_OWORD *)&__s2[16];
    *(_OWORD *)(v152 + 320) = *(_OWORD *)__s2;
    *(_OWORD *)(v152 + 336) = v153;
    v151 = *v198;
  }
LABEL_242:
  v154 = *(__int128 **)(v151 + 296);
  v155 = (__int128 *)(v151 + 304);
  if (v154 != (__int128 *)(v151 + 304))
  {
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v19 + 1072) + 8))
    {
      do
      {
        v156 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v19 + 1072) + 8);
        if (v156)
          sub_20F278024((_QWORD *)(v156 + 400), (char *)v154 + 56, v154 + 2);
        v157 = (__int128 *)*((_QWORD *)v154 + 1);
        if (v157)
        {
          do
          {
            v158 = v157;
            v157 = *(__int128 **)v157;
          }
          while (v157);
        }
        else
        {
          do
          {
            v158 = (__int128 *)*((_QWORD *)v154 + 2);
            v61 = *(_QWORD *)v158 == (_QWORD)v154;
            v154 = v158;
          }
          while (!v61);
        }
        v154 = v158;
      }
      while (v158 != v155);
    }
    else
    {
      do
      {
        v159 = (__int128 *)*((_QWORD *)v154 + 1);
        if (v159)
        {
          do
          {
            v160 = v159;
            v159 = *(__int128 **)v159;
          }
          while (v159);
        }
        else
        {
          do
          {
            v160 = (__int128 *)*((_QWORD *)v154 + 2);
            v61 = *(_QWORD *)v160 == (_QWORD)v154;
            v154 = v160;
          }
          while (!v61);
        }
        v154 = v160;
      }
      while (v160 != v155);
    }
  }
  v150 = *(_QWORD *)a1;
  if (*(_DWORD *)(*(_QWORD *)a1 + 2584) == 4)
    goto LABEL_263;
  v161 = *(_QWORD *)(*v198 + 424);
  v162 = *(uint64_t ***)(v161 + 40);
  v163 = *(uint64_t ***)(v161 + 48);
  if (v162 == v163)
    goto LABEL_263;
  do
  {
    if ((*v162)[77] != (*v162)[78])
      sub_20F24E494((_QWORD *)a1, (char ***)*v162 + 77, *v162);
    v162 += 2;
  }
  while (v162 != v163);
  v150 = *(_QWORD *)a1;
  if (!*(_BYTE *)(*(_QWORD *)a1 + 2499))
  {
LABEL_264:
    if ((*(_BYTE *)(a1 + 304) & 4) == 0)
      goto LABEL_286;
  }
LABEL_270:
  v164 = *v198;
  v165 = operator new();
  sub_20F7CC554(v165, v150 + 560, v164 + 168);
  v166 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = v165;
  if (v166)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v166 + 8))(v166);
    v165 = *(_QWORD *)(a1 + 200);
  }
  v218 = 0u;
  v219 = 0u;
  v216 = 0u;
  v217 = 0u;
  v214 = 0u;
  v215 = 0u;
  memset(&__s2[16], 0, 32);
  *(_QWORD *)&__s2[8] = **(_QWORD **)(*v198 + 424);
  v167 = *(_OWORD *)__s2;
  *(_QWORD *)(v165 + 24) = 0;
  *(_OWORD *)(v165 + 8) = v167;
  if ((_BYTE *)(v165 + 8) != __s2)
  {
    sub_20E86811C((_QWORD *)(v165 + 32), 0, 0, 0);
    sub_20E86811C((_QWORD *)(v165 + 56), (char *)v214, *((char **)&v214 + 1), (uint64_t)(*((_QWORD *)&v214 + 1) - v214) >> 3);
    sub_20E86811C((_QWORD *)(v165 + 80), *((char **)&v215 + 1), (char *)v216, (uint64_t)(v216 - *((_QWORD *)&v215 + 1)) >> 3);
  }
  v168 = v217;
  v169 = v218;
  *(_OWORD *)(v165 + 136) = v219;
  *(_OWORD *)(v165 + 120) = v169;
  *(_OWORD *)(v165 + 104) = v168;
  v170 = (_QWORD *)(*v198 + 168);
  __p = 0;
  v211 = 0;
  v212 = 0;
  sub_20F281F30(&v199, v170, (uint64_t *)&__p);
  if (__p)
  {
    v211 = __p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t **))(**(_QWORD **)(a1 + 200) + 64))(*(_QWORD *)(a1 + 200), &v199);
  v171 = *(_QWORD *)a1;
  v172 = operator new();
  v173 = *(_OWORD *)(v171 + 536);
  *(_QWORD *)(v172 + 16) = *(_QWORD *)(v171 + 552);
  *(_QWORD *)(v172 + 24) = 0;
  *(_OWORD *)v172 = v173;
  *(_WORD *)(v172 + 32) = 1;
  *(_DWORD *)(v172 + 36) = 0;
  v174 = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 232) = v172;
  if (v174)
    MEMORY[0x212BC6398](v174, 0x1000C40FD2CF380);
  if (v202)
  {
    v203 = (const char *)v202;
    operator delete(v202);
  }
  sub_20E86872C((uint64_t)&v199, rep);
  if (*((_QWORD *)&v215 + 1))
  {
    *(_QWORD *)&v216 = *((_QWORD *)&v215 + 1);
    operator delete(*((void **)&v215 + 1));
  }
  if ((_QWORD)v214)
  {
    *((_QWORD *)&v214 + 1) = v214;
    operator delete((void *)v214);
  }
  if (*(_QWORD *)&__s2[24])
  {
    *(_QWORD *)&__s2[32] = *(_QWORD *)&__s2[24];
    operator delete(*(void **)&__s2[24]);
  }
LABEL_286:
  v175 = *v198;
  v176 = (_QWORD *)operator new();
  sub_20F3B3AC4(v176, v175, (_QWORD *)(v175 + 160));
  v177 = *v195;
  *v195 = (uint64_t)v176;
  if (v177)
  {
    v178 = *(_QWORD *)(v177 + 16);
    if (v178)
    {
      v179 = *(_QWORD *)(v177 + 24);
      v180 = *(void **)(v177 + 16);
      if (v179 != v178)
      {
        v181 = v179 - 344;
        do
        {
          while (1)
          {
            if (*(_BYTE *)(v181 + 336) && *(char *)(v181 + 335) < 0)
              operator delete(*(void **)(v181 + 312));
            if (*(char *)(v181 + 23) < 0)
              break;
            v182 = v181 - 24;
            v181 -= 368;
            if (v182 == v178)
              goto LABEL_296;
          }
          operator delete(*(void **)v181);
          v183 = v181 - 24;
          v181 -= 368;
        }
        while (v183 != v178);
LABEL_296:
        v180 = *(void **)(v177 + 16);
      }
      *(_QWORD *)(v177 + 24) = v178;
      operator delete(v180);
    }
    MEMORY[0x212BC6398](v177, 0x1020C402FC4DB2FLL);
  }
  v184 = *(_QWORD *)(a1 + 336);
  if (v184)
  {
    v185 = *(_QWORD *)(*v198 + 424);
    if (v185)
    {
      if (*(_QWORD *)(*(_QWORD *)v185 + 64) && (*(_BYTE *)(a1 + 304) & 0x10) == 0)
      {
        *(_QWORD *)__s2 = *(_QWORD *)(*v198 + 160);
        LOBYTE(v199) = 1;
        (*(void (**)(uint64_t, _BYTE *, uint64_t **))(*(_QWORD *)v184 + 48))(v184, __s2, &v199);
      }
    }
  }
  return a1;
}

void sub_20F24D9D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, _QWORD *a14, _QWORD *a15, _QWORD *a16, _QWORD *a17, void **a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t *a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,void *__p,uint64_t a43)
{
  _QWORD *v43;
  uint64_t *v44;
  uint64_t v45;
  void *v47;
  void *v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  void *v63;

  if (*(_BYTE *)(v45 - 232) && *(char *)(v45 - 233) < 0)
    operator delete(*(void **)(v45 - 256));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a31);
  if (*(_BYTE *)(a11 + 848))
  {
    v47 = (void *)v43[546];
    if (v47)
    {
      v43[547] = v47;
      operator delete(v47);
    }
  }
  v48 = *a12;
  if (*a12)
  {
    v43[446] = v48;
    operator delete(v48);
  }
  v49 = (_QWORD *)v43[46];
  if (v49 == a14)
  {
    v50 = 4;
  }
  else
  {
    if (!v49)
      goto LABEL_14;
    v50 = 5;
    a14 = (_QWORD *)v43[46];
  }
  (*(void (**)(void))(*a14 + 8 * v50))();
LABEL_14:
  v51 = (_QWORD *)v43[42];
  if (v51 == a15)
  {
    v52 = 4;
  }
  else
  {
    if (!v51)
      goto LABEL_19;
    v52 = 5;
    a15 = (_QWORD *)v43[42];
  }
  (*(void (**)(void))(*a15 + 8 * v52))();
LABEL_19:
  v53 = (_QWORD *)v43[37];
  if (v53 == a16)
  {
    v54 = 4;
  }
  else
  {
    if (!v53)
      goto LABEL_24;
    v54 = 5;
    a16 = (_QWORD *)v43[37];
  }
  (*(void (**)(void))(*a16 + 8 * v54))();
LABEL_24:
  v55 = (_QWORD *)v43[33];
  if (v55 == a17)
  {
    v56 = 4;
  }
  else
  {
    if (!v55)
    {
      v57 = v43[29];
      v43[29] = 0;
      if (v57)
        goto LABEL_36;
      goto LABEL_28;
    }
    v56 = 5;
    a17 = (_QWORD *)v43[33];
  }
  (*(void (**)(void))(*a17 + 8 * v56))();
  v57 = v43[29];
  v43[29] = 0;
  if (v57)
  {
LABEL_36:
    MEMORY[0x212BC6398](v57, 0x1000C40FD2CF380);
    v58 = (uint64_t)(a18 + 9);
    v59 = v43[25];
    v43[25] = 0;
    if (v59)
    {
LABEL_37:
      (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
      sub_20F24DE7C(a28);
      v60 = *v44;
      *v44 = 0;
      if (v60)
      {
LABEL_38:
        (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
        sub_20E8C25A8(a13);
        sub_20E8C25A8(v58);
        v61 = (void *)v43[10];
        if (v61)
        {
LABEL_39:
          v43[11] = v61;
          operator delete(v61);
          v62 = (void *)v43[7];
          if (v62)
          {
LABEL_40:
            v43[8] = v62;
            operator delete(v62);
            v63 = *a18;
            if (*a18)
            {
LABEL_41:
              v43[5] = v63;
              operator delete(v63);
              sub_20E86665C(a30);
              _Unwind_Resume(a1);
            }
LABEL_33:
            sub_20E86665C(a30);
            _Unwind_Resume(a1);
          }
LABEL_32:
          v63 = *a18;
          if (*a18)
            goto LABEL_41;
          goto LABEL_33;
        }
LABEL_31:
        v62 = (void *)v43[7];
        if (v62)
          goto LABEL_40;
        goto LABEL_32;
      }
LABEL_30:
      sub_20E8C25A8(a13);
      sub_20E8C25A8(v58);
      v61 = (void *)v43[10];
      if (v61)
        goto LABEL_39;
      goto LABEL_31;
    }
LABEL_29:
    sub_20F24DE7C(a28);
    v60 = *v44;
    *v44 = 0;
    if (v60)
      goto LABEL_38;
    goto LABEL_30;
  }
LABEL_28:
  v58 = (uint64_t)(a18 + 9);
  v59 = v43[25];
  v43[25] = 0;
  if (v59)
    goto LABEL_37;
  goto LABEL_29;
}

uint64_t *sub_20F24DE7C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
      v4 = *(_QWORD *)(v2 + 24);
      v5 = *(void **)(v2 + 16);
      if (v4 != v3)
      {
        v6 = v4 - 344;
        do
        {
          while (1)
          {
            if (*(_BYTE *)(v6 + 336) && *(char *)(v6 + 335) < 0)
              operator delete(*(void **)(v6 + 312));
            if (*(char *)(v6 + 23) < 0)
              break;
            v7 = v6 - 24;
            v6 -= 368;
            if (v7 == v3)
              goto LABEL_11;
          }
          operator delete(*(void **)v6);
          v8 = v6 - 24;
          v6 -= 368;
        }
        while (v8 != v3);
LABEL_11:
        v5 = *(void **)(v2 + 16);
      }
      *(_QWORD *)(v2 + 24) = v3;
      operator delete(v5);
    }
    MEMORY[0x212BC6398](v2, 0x1020C402FC4DB2FLL);
  }
  return a1;
}

uint64_t sub_20F24DF40(const void **a1)
{
  int v1;
  unint64_t v2;
  const void *v3;
  size_t v4;
  int v5;
  uint64_t result;
  BOOL v7;
  size_t v8;
  size_t v10;
  size_t v11;
  size_t v12;
  int v13;
  char v15[32];

  v15[23] = 10;
  strcpy(v15, "sequential");
  v1 = *((char *)a1 + 23);
  if (v1 >= 0)
    v2 = *((unsigned __int8 *)a1 + 23);
  else
    v2 = (unint64_t)a1[1];
  if (v1 >= 0)
    v3 = a1;
  else
    v3 = *a1;
  if (v2 >= 0xA)
    v4 = 10;
  else
    v4 = v2;
  v5 = memcmp(v3, v15, v4);
  result = 0;
  if (v5)
    v7 = 0;
  else
    v7 = v2 == 10;
  if (!v7)
  {
    v15[23] = 6;
    strcpy(v15, "random");
    if (v2 >= 6)
      v8 = 6;
    else
      v8 = v2;
    if (!memcmp(v3, v15, v8) && v2 == 6)
    {
      return 1;
    }
    else
    {
      v15[23] = 20;
      strcpy(v15, "image_retrieval_vlad");
      if (v2 >= 0x14)
        v10 = 20;
      else
        v10 = v2;
      if (!memcmp(v3, v15, v10) && v2 == 20)
      {
        return 2;
      }
      else
      {
        v15[23] = 19;
        strcpy(v15, "image_retrieval_bow");
        if (v2 >= 0x13)
          v11 = 19;
        else
          v11 = v2;
        if (!memcmp(v3, v15, v11) && v2 == 19)
        {
          return 3;
        }
        else
        {
          v15[23] = 13;
          strcpy(v15, "all_keyframes");
          if (v2 >= 0xD)
            v12 = 13;
          else
            v12 = v2;
          v13 = memcmp(v3, v15, v12);
          if (v2 == 13 && v13 == 0)
            return 4;
          else
            return 5;
        }
      }
    }
  }
  return result;
}

void sub_20F24E118(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A687F8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A687F8))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.area_mapping");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A687F0);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A687F8);
  }
  *a1 = qword_254A687F0;
}

void sub_20F24E1B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A687F8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A687F8);
  _Unwind_Resume(a1);
}

uint64_t sub_20F24E20C(uint64_t a1, char ***a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t *v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  unint64_t v18;
  unsigned int v19;
  BOOL v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t **v26;
  uint64_t *v27;
  void *__p[3];
  _OWORD *__src[64];

  kdebug_trace();
  v6 = *(_QWORD *)(a1 + 184);
  if (!v6)
    return kdebug_trace();
  v7 = *(_QWORD *)(v6 + 1056);
  if (!*(_QWORD *)(v7 + 8))
    return kdebug_trace();
  v8 = *(_QWORD *)(a1 + 16);
  v11 = *(uint64_t **)(v8 + 240);
  v9 = (uint64_t *)(v8 + 240);
  v10 = v11;
  if (!v11)
    goto LABEL_19;
  v12 = *((_DWORD *)a3 + 4);
  v13 = *a3;
  v14 = v9;
  v15 = *((_DWORD *)a3 + 2);
  do
  {
    while (1)
    {
      v16 = *((_DWORD *)v10 + 12);
      v17 = v16 >= v12;
      if (v16 != v12)
        goto LABEL_10;
      v18 = v10[4];
      if (v18 >= v13)
        break;
LABEL_5:
      v10 = (uint64_t *)v10[1];
      if (!v10)
        goto LABEL_13;
    }
    if (v18 != v13)
      goto LABEL_12;
    v17 = *((_DWORD *)v10 + 10) >= v15;
LABEL_10:
    if (!v17)
      goto LABEL_5;
LABEL_12:
    v14 = v10;
    v10 = (uint64_t *)*v10;
  }
  while (v10);
LABEL_13:
  if (v14 == v9)
    goto LABEL_19;
  v19 = *((_DWORD *)v14 + 12);
  v20 = v12 >= v19;
  if (v12 != v19)
    goto LABEL_18;
  v21 = v14[4];
  if (v13 < v21)
    goto LABEL_19;
  if (v13 == v21)
  {
    v20 = v15 >= *((_DWORD *)v14 + 10);
LABEL_18:
    if (!v20)
    {
LABEL_19:
      sub_20F435ECC(a2, 0, (char **)__p);
      v22 = *(uint64_t **)(v7 + 8);
      sub_20F431A98(*v22, (uint64_t *)__p, (__int128 *)a3, __src);
      sub_20F278024(v22 + 50, __src, (__int128 *)a3);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 184) + 1056) + 8);
      v25 = *(_QWORD *)(v23 + 408);
      v24 = *(_QWORD *)(v23 + 416);
      if (v25 == v24)
        goto LABEL_28;
      while (*(_DWORD *)(v25 + 528) != *((_DWORD *)a3 + 4)
           || *(_QWORD *)(v25 + 512) != *a3
           || *(_DWORD *)(v25 + 520) != *((_DWORD *)a3 + 2))
      {
        v25 += 536;
        if (v25 == v24)
          goto LABEL_28;
      }
      if (v25 == v24)
      {
LABEL_28:
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MapDataController.cpp", 2096, (uint64_t)"opt_ref_image_descriptor", 24, (uint64_t)"Image descriptor does not exist.", 32, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v25 = 0;
      }
      v26 = (uint64_t **)(*(_QWORD *)(a1 + 16) + 232);
      __src[0] = a3;
      v27 = sub_20F29289C(v26, a3, (uint64_t)&unk_2102DB95C, __src);
      memcpy(v27 + 7, (const void *)v25, 0x200uLL);
    }
  }
  return kdebug_trace();
}

void sub_20F24E450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  sub_20E8E69C4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20F24E494(_QWORD *a1, char ***a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  unsigned int v15;
  BOOL v16;
  unint64_t v17;
  unsigned int v18;
  BOOL v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t **v25;
  uint64_t *v26;
  void *__p[3];
  _OWORD *__src[64];

  if (*(_DWORD *)(*a1 + 2584) == 4
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MapDataController.cpp", 2121, (uint64_t)"config().ml_desc_config.feature_type != feature_detection::FeatureType::DetectorNoneDescriptorATUHardNetGlobalFeat", 114, (uint64_t)"Compute ML-VLAD image descriptor when GlobalFeat is enabled", 59, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  kdebug_trace();
  v6 = a1[23];
  if (!v6)
    return kdebug_trace();
  v7 = *(_QWORD *)(v6 + 1072);
  if (!*(_QWORD *)(v7 + 8))
    return kdebug_trace();
  v8 = a1[2];
  v9 = *(uint64_t **)(v8 + 304);
  if (!v9)
    goto LABEL_21;
  v10 = (uint64_t *)(v8 + 304);
  v11 = *((_DWORD *)a3 + 4);
  v12 = *a3;
  v13 = *((_DWORD *)a3 + 2);
  v14 = v10;
  do
  {
    while (1)
    {
      v15 = *((_DWORD *)v9 + 12);
      v16 = v15 >= v11;
      if (v15 != v11)
        goto LABEL_12;
      v17 = v9[4];
      if (v17 >= v12)
        break;
LABEL_7:
      v9 = (uint64_t *)v9[1];
      if (!v9)
        goto LABEL_15;
    }
    if (v17 != v12)
      goto LABEL_14;
    v16 = *((_DWORD *)v9 + 10) >= v13;
LABEL_12:
    if (!v16)
      goto LABEL_7;
LABEL_14:
    v14 = v9;
    v9 = (uint64_t *)*v9;
  }
  while (v9);
LABEL_15:
  if (v14 == v10)
    goto LABEL_21;
  v18 = *((_DWORD *)v14 + 12);
  v19 = v11 >= v18;
  if (v11 != v18)
    goto LABEL_20;
  v20 = v14[4];
  if (v12 < v20)
    goto LABEL_21;
  if (v12 == v20)
  {
    v19 = v13 >= *((_DWORD *)v14 + 10);
LABEL_20:
    if (!v19)
    {
LABEL_21:
      sub_20F435ECC(a2, 1, (char **)__p);
      v21 = *(uint64_t **)(v7 + 8);
      sub_20F431A98(*v21, (uint64_t *)__p, (__int128 *)a3, __src);
      sub_20F278024(v21 + 50, __src, (__int128 *)a3);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      v22 = *(_QWORD *)(*(_QWORD *)(a1[23] + 1072) + 8);
      v24 = *(_QWORD *)(v22 + 408);
      v23 = *(_QWORD *)(v22 + 416);
      if (v24 == v23)
        goto LABEL_30;
      while (*(_DWORD *)(v24 + 528) != *((_DWORD *)a3 + 4)
           || *(_QWORD *)(v24 + 512) != *a3
           || *(_DWORD *)(v24 + 520) != *((_DWORD *)a3 + 2))
      {
        v24 += 536;
        if (v24 == v23)
          goto LABEL_30;
      }
      if (v24 == v23)
      {
LABEL_30:
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MapDataController.cpp", 2138, (uint64_t)"opt_ref_image_descriptor", 24, (uint64_t)"Image descriptor does not exist.", 32, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v24 = 0;
      }
      v25 = (uint64_t **)(a1[2] + 296);
      __src[0] = a3;
      v26 = sub_20F29289C(v25, a3, (uint64_t)&unk_2102DB95C, __src);
      memcpy(v26 + 7, (const void *)v24, 0x200uLL);
    }
  }
  return kdebug_trace();
}

void sub_20F24E728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  sub_20E8E69C4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20F24E76C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 *v24;
  uint64_t v25;
  __int128 v26;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(v3 + 208);
  v4 = *(_QWORD *)(v3 + 216);
  if (v4 != v5)
  {
    if ((0xCBEEA4E1A08AD8F3 * ((v4 - v5) >> 3)) >> 61)
      sub_20E92CED8();
    v6 = operator new(0x5F75270D0456C798 * ((v4 - v5) >> 3));
    *a2 = v6;
    a2[1] = v6;
    a2[2] = &v6[0xBEEA4E1A08AD8F3 * ((v4 - v5) >> 3)];
    v7 = v6;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v8 = v6;
          if (v7 != v6)
          {
            v8 = v7;
            while (*v8 != *(_QWORD *)(v5 + 24))
            {
              if (++v8 == v6)
              {
                v8 = v6;
                break;
              }
            }
          }
          if (v8 == v6)
            break;
          v5 += 472;
          if (v5 == v4)
            return;
        }
        v9 = a2[2];
        if ((unint64_t)v6 >= v9)
          break;
        *v6++ = *(_QWORD *)(v5 + 24);
        a2[1] = v6;
        v5 += 472;
        if (v5 == v4)
          return;
      }
      v10 = (char *)v6 - (char *)v7;
      v11 = v6 - v7;
      v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 61)
        sub_20E92CED8();
      v13 = v9 - (_QWORD)v7;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          sub_20E877A38();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        *v16 = *(_QWORD *)(v5 + 24);
        v17 = (uint64_t)(v16 + 1);
        if (v7 == v6)
          goto LABEL_28;
      }
      else
      {
        v15 = 0;
        v16 = (_QWORD *)(8 * v11);
        *(_QWORD *)(8 * v11) = *(_QWORD *)(v5 + 24);
        v17 = 8 * v11 + 8;
        if (v7 == v6)
          goto LABEL_28;
      }
      if ((unint64_t)(v10 - 8) >= 0x168)
      {
        v20 = ((char *)(v6 - 1) - (char *)v7) & 0xFFFFFFFFFFFFFFF8;
        if (&v15[v10 - 8 - v20] > &v15[v10 - 8])
        {
          v18 = v6;
        }
        else if ((_QWORD *)((char *)v6 - v20 - 8) > v6 - 1)
        {
          v18 = v6;
        }
        else if ((unint64_t)((char *)v7 - v15) >= 0x20)
        {
          v21 = ((unint64_t)(v10 - 8) >> 3) + 1;
          v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
          v18 = &v6[v22 / 0xFFFFFFFFFFFFFFF8];
          v16 = (_QWORD *)((char *)v16 - v22);
          v23 = &v15[8 * v11 - 16];
          v24 = (__int128 *)(v6 - 2);
          v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v26 = *v24;
            *(v23 - 1) = *(v24 - 1);
            *v23 = v26;
            v23 -= 2;
            v24 -= 2;
            v25 -= 4;
          }
          while (v25);
          if (v21 == (v21 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_28;
        }
        else
        {
          v18 = v6;
        }
      }
      else
      {
        v18 = v6;
      }
      do
      {
        v19 = *--v18;
        *--v16 = v19;
      }
      while (v18 != v7);
LABEL_28:
      *a2 = v16;
      a2[1] = v17;
      a2[2] = &v15[8 * v14];
      if (v7)
      {
        operator delete(v7);
        v7 = (_QWORD *)*a2;
        a2[1] = v17;
        v6 = (_QWORD *)v17;
        v5 += 472;
        if (v5 == v4)
          return;
      }
      else
      {
        v7 = v16;
        a2[1] = v17;
        v6 = (_QWORD *)v17;
        v5 += 472;
        if (v5 == v4)
          return;
      }
    }
  }
}

void sub_20F24EA24(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F24EA48(uint64_t result)
{
  uint64_t v1;
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *__p;
  __int128 v25;

  if ((*(_BYTE *)(result + 304) & 2) == 0)
    return result;
  v1 = result;
  __p = 0;
  v25 = 0uLL;
  v3 = *(_BYTE **)(result + 32);
  v2 = *(_BYTE **)(result + 40);
  v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0)
      sub_20E867F44();
    v5 = (char *)operator new(v2 - v3);
    memcpy(v5, v3, v4 - 4);
    v6 = 0;
    v7 = 16 * (v4 >> 4);
    do
    {
      v8 = (void **)&v5[v6];
      if (!*(_BYTE *)(v1 + 224) || *(void **)(v1 + 208) != *v8 || *(_DWORD *)(v1 + 216) != *(_DWORD *)&v5[v6 + 8])
        sub_20F250888((_QWORD *)v1, v8, 0);
      v6 += 16;
    }
    while (v7 != v6);
    operator delete(v5);
  }
  if (*(_BYTE *)(v1 + 224)
    && (v9 = *(_QWORD *)(v1 + 208),
        v10 = *(_QWORD *)(v1 + 216),
        __p = operator new(0x28uLL),
        v25 = xmmword_2102DB450,
        strcpy((char *)__p, "MapDataController::GiveupPrimarySubmap"),
        sub_20F24ED70((_QWORD *)v1, v9, v10, (uint64_t)&__p),
        SHIBYTE(v25) < 0))
  {
    operator delete(__p);
    if (*(_QWORD *)(v1 + 32) == *(_QWORD *)(v1 + 40))
      goto LABEL_16;
  }
  else if (*(_QWORD *)(v1 + 32) == *(_QWORD *)(v1 + 40))
  {
    goto LABEL_16;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MapDataController.cpp", 304, (uint64_t)"this->weak_state_ids().empty()", 30, (uint64_t)&unk_21029C995, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_16:
  __p = 0;
  v25 = 0uLL;
  v12 = *(_BYTE **)(v1 + 56);
  v11 = *(_BYTE **)(v1 + 64);
  v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0)
      sub_20E867F44();
    v14 = (char *)operator new(v11 - v12);
    memcpy(v14, v12, v13 - 4);
    v15 = 0;
    v16 = 16 * (v13 >> 4);
    do
    {
      v17 = (void **)&v14[v15];
      if (!*(_BYTE *)(v1 + 224) || *(void **)(v1 + 208) != *v17 || *(_DWORD *)(v1 + 216) != *(_DWORD *)&v14[v15 + 8])
        sub_20F250888((_QWORD *)v1, v17, 0);
      v15 += 16;
    }
    while (v16 != v15);
    *(_QWORD *)(v1 + 64) = *(_QWORD *)(v1 + 56);
    operator delete(v14);
    if (!*(_BYTE *)(*(_QWORD *)v1 + 2748))
      goto LABEL_30;
    goto LABEL_28;
  }
  *(_QWORD *)(v1 + 64) = v12;
  if (*(_BYTE *)(*(_QWORD *)v1 + 2748))
  {
LABEL_28:
    sub_20EE5BBAC(*(uint64_t **)(*(_QWORD *)(v1 + 16) + 424));
    v18 = *(_QWORD *)(v1 + 368);
    if (v18)
    {
      v19 = *(_QWORD *)(v1 + 16);
      v20 = *(void **)(v19 + 160);
      v23 = *(_QWORD *)(v19 + 424);
      __p = v20;
      (*(void (**)(uint64_t, void **, uint64_t *))(*(_QWORD *)v18 + 48))(v18, &__p, &v23);
    }
  }
LABEL_30:
  *(_DWORD *)(v1 + 304) &= ~2u;
  result = *(_QWORD *)(v1 + 336);
  if (result)
  {
    v21 = *(_QWORD *)(v1 + 16);
    v22 = *(_QWORD *)(v21 + 424);
    if (v22)
    {
      if (*(_QWORD *)(*(_QWORD *)v22 + 64))
      {
        __p = *(void **)(v21 + 160);
        LOBYTE(v23) = 1;
        return (*(uint64_t (**)(uint64_t, void **, uint64_t *))(*(_QWORD *)result + 48))(result, &__p, &v23);
      }
    }
  }
  return result;
}

void sub_20F24ED2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F24ED70(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  int v10;
  uint64_t v11;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _BYTE *v19;
  uint64_t v20;
  _QWORD *v21;
  size_t v22;
  void **p_dst;
  unint64_t v24;
  const void **v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;
  uint64_t v30;
  const char *v31;
  size_t v32;
  unsigned __int8 v33;
  const char *v34;
  size_t v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  size_t v43;
  std::__shared_weak_count_vtbl *v44;
  std::__shared_weak_count *v45;
  size_t v46;
  size_t v47;
  _QWORD *v48;
  void *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  char v54;
  _QWORD *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *p_shared_owners;
  unint64_t v59;
  char *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  const char *v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  _QWORD *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  const char *v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  _QWORD *v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  _BYTE *v118;
  uint64_t v119;
  _QWORD *v120;
  char v121;
  size_t v122;
  void **v123;
  unint64_t v124;
  const void *v125;
  uint64_t v126;
  uint64_t v127;
  const char *v128;
  uint64_t v129;
  const char *v130;
  size_t v131;
  unsigned __int8 v132;
  unsigned __int8 v133;
  const char *v134;
  size_t v135;
  _BYTE *v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  NSObject *v142;
  size_t v143;
  std::__shared_weak_count_vtbl *v144;
  std::__shared_weak_count *v145;
  size_t v146;
  size_t v147;
  _QWORD *v148;
  void *v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  char v154;
  _QWORD *v155;
  uint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  char *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  const char *v175;
  uint64_t v176;
  __int128 v177;
  uint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  _QWORD *v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  const char *v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  const char *v204;
  int v205;
  const char *v206;
  const char *v207;
  uint64_t v208;
  int v209;
  uint64_t *v210;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v212;
  int v213;
  const char *v214;
  int v215;
  const char *v216;
  uint64_t v217;
  std::__shared_weak_count *v218;
  void **__dst;
  size_t v220;
  int64_t v221;
  _QWORD v222[2];
  uint64_t v223;
  uint64_t v224;
  const void *v225;
  unint64_t v226;
  const void *v227;
  unint64_t v228;
  void *__p;
  char v230;
  unint64_t v231;
  int v232;
  _BYTE v233[152];
  uint64_t v234;
  __int128 v235;
  std::__shared_weak_count *v236;
  char *v237;
  std::__shared_weak_count *v238;
  _QWORD *v239;
  __int128 v240;
  _BYTE v241[24];
  __int128 v242;
  char *v243;
  size_t v244;
  unint64_t v245;
  char v246;
  _QWORD v247[5];

  v247[2] = *MEMORY[0x24BDAC8D0];
  result = sub_20F26182C(a1, a2, a3);
  if ((_DWORD)result)
  {
    v9 = *(unsigned __int8 *)(a4 + 23);
    if ((v9 & 0x80u) != 0)
      v9 = *(_QWORD *)(a4 + 8);
    if (v9)
    {
      sub_20F24E118(&v234);
      result = v234;
      if (**(int **)(v234 + 56) <= 2)
      {
        v10 = *(unsigned __int8 *)(v234 + 72);
        result = sub_20E8C31DC(v234, "OSLogSurrogateAppender", 1, 0);
        v11 = result;
        if (v10 || result != 0)
        {
          sub_20E863438((uint64_t)v222);
          v13 = sub_20E86A980(&v223, (uint64_t)"PromoteWeakStateToRegular ", 26);
          v14 = *(char *)(a4 + 23);
          if (v14 >= 0)
            v15 = a4;
          else
            v15 = *(_QWORD *)a4;
          if (v14 >= 0)
            v16 = *(unsigned __int8 *)(a4 + 23);
          else
            v16 = *(_QWORD *)(a4 + 8);
          v17 = sub_20E86A980(v13, v15, v16);
          v18 = sub_20E86A980(v17, (uint64_t)" state_id: ", 11);
          v210 = (uint64_t *)a2;
          LODWORD(rep) = a3;
          sub_210216370((uint64_t)&v210);
          if (v241[23] >= 0)
            v19 = v241;
          else
            v19 = *(_BYTE **)v241;
          if (v241[23] >= 0)
            v20 = v241[23];
          else
            v20 = *(_QWORD *)&v241[8];
          v21 = sub_20E86A980(v18, (uint64_t)v19, v20);
          sub_20E86A980(v21, (uint64_t)" size ", 6);
          std::ostream::operator<<();
          if ((v241[23] & 0x80000000) != 0)
            operator delete(*(void **)v241);
          v205 = v10;
          if ((v232 & 0x10) != 0)
          {
            v24 = v231;
            if (v231 < v228)
            {
              v231 = v228;
              v24 = v228;
            }
            v25 = &v227;
          }
          else
          {
            if ((v232 & 8) == 0)
            {
              v22 = 0;
              HIBYTE(v221) = 0;
              p_dst = (void **)&__dst;
              goto LABEL_39;
            }
            v25 = &v225;
            v24 = v226;
          }
          v26 = *v25;
          v22 = v24 - (_QWORD)*v25;
          if (v22 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v22 >= 0x17)
          {
            v27 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v22 | 7) != 0x17)
              v27 = v22 | 7;
            v28 = v27 + 1;
            p_dst = (void **)operator new(v27 + 1);
            v220 = v22;
            v221 = v28 | 0x8000000000000000;
            __dst = p_dst;
          }
          else
          {
            HIBYTE(v221) = v24 - *(_BYTE *)v25;
            p_dst = (void **)&__dst;
            if (!v22)
            {
LABEL_39:
              *((_BYTE *)p_dst + v22) = 0;
              v210 = &v234;
              rep = std::chrono::steady_clock::now().__d_.__rep_;
              v212 = std::chrono::system_clock::now().__d_.__rep_;
              v213 = 2;
              v214 = "unknown file";
              v215 = 1462;
              v217 = 0;
              v218 = 0;
              v216 = "unknown function";
              v29 = (void **)&__dst;
              if (v221 < 0)
                v29 = __dst;
              v206 = (const char *)v29;
              v30 = *v210;
              v31 = (const char *)(*v210 + 16);
              v204 = v31;
              if (*(char *)(*v210 + 39) < 0)
              {
                v31 = *(const char **)(v30 + 16);
                v32 = *(_QWORD *)(v30 + 24);
              }
              else
              {
                v32 = *(unsigned __int8 *)(*v210 + 39);
              }
              v203 = *v210;
              v208 = v11;
              v33 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v33 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
              {
                sub_20E9E46F8((uint64_t)v241);
                sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v241);
                if ((_BYTE)v242 && (v241[23] & 0x80000000) != 0)
                  operator delete(*(void **)v241);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                __cxa_guard_release(&qword_254A4A510);
              }
              if (byte_254A4A4F8[23] >= 0)
                v34 = byte_254A4A4F8;
              else
                v34 = *(const char **)byte_254A4A4F8;
              if (byte_254A4A4F8[23] >= 0)
                v35 = byte_254A4A4F8[23];
              else
                v35 = *(_QWORD *)&byte_254A4A4F8[8];
              *(_QWORD *)v241 = os_log_create(v34, v31);
              v36 = &v241[8];
              if (v35 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v35 >= 0x17)
              {
                v37 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v35 | 7) != 0x17)
                  v37 = v35 | 7;
                v38 = v37 + 1;
                v36 = operator new(v37 + 1);
                *(_QWORD *)&v241[16] = v35;
                *(_QWORD *)&v242 = v38 | 0x8000000000000000;
                *(_QWORD *)&v241[8] = v36;
              }
              else
              {
                BYTE7(v242) = v35;
                if (!v35)
                {
LABEL_59:
                  v36[v35] = 0;
                  BYTE8(v242) = 1;
                  v39 = (char *)&v243;
                  if (v32 > 0x7FFFFFFFFFFFFFF7)
                    sub_20E860B7C();
                  if (v32 >= 0x17)
                  {
                    v40 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v32 | 7) != 0x17)
                      v40 = v32 | 7;
                    v41 = v40 + 1;
                    v39 = (char *)operator new(v40 + 1);
                    v244 = v32;
                    v245 = v41 | 0x8000000000000000;
                    v243 = v39;
                  }
                  else
                  {
                    HIBYTE(v245) = v32;
                    if (!v32)
                    {
LABEL_67:
                      v39[v32] = 0;
                      v246 = 1;
                      v42 = *(NSObject **)v241;
                      if (SHIBYTE(v245) < 0)
                        operator delete(v243);
                      if (BYTE8(v242) && SBYTE7(v242) < 0)
                        operator delete(*(void **)&v241[8]);
                      if (*(_QWORD *)v241)
                        os_release(*(void **)v241);
                      if (!v208 || !*(_QWORD *)(v208 + 24))
                      {
                        os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG);
                        *(_DWORD *)v241 = 136315138;
                        *(_QWORD *)&v241[4] = v206;
                        v49 = (void *)_os_log_send_and_compose_impl();
                        v50 = v205;
                        if (v49)
                          free(v49);
                        goto LABEL_146;
                      }
                      v43 = _os_log_pack_size();
                      v44 = (std::__shared_weak_count_vtbl *)operator new(v43, (std::align_val_t)8uLL);
                      v45 = (std::__shared_weak_count *)operator new();
                      v45->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                      v45->__shared_owners_ = 0;
                      v45->__shared_weak_owners_ = 0;
                      v45[1].__vftable = v44;
                      *(_QWORD *)&v235 = v44;
                      *((_QWORD *)&v235 + 1) = v44;
                      v237 = 0;
                      v238 = 0;
                      v236 = v45;
                      v46 = strlen(v206);
                      if (v46 > 0x7FFFFFFFFFFFFFF7)
                        sub_20E860B7C();
                      v47 = v46;
                      if (v46 >= 0x17)
                      {
                        v51 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v46 | 7) != 0x17)
                          v51 = v46 | 7;
                        v52 = v51 + 1;
                        v48 = operator new(v51 + 1);
                        *(_QWORD *)&v240 = v47;
                        *((_QWORD *)&v240 + 1) = v52 | 0x8000000000000000;
                        v239 = v48;
                      }
                      else
                      {
                        HIBYTE(v240) = v46;
                        v48 = &v239;
                        if (!v46)
                        {
LABEL_86:
                          *((_BYTE *)v48 + v47) = 0;
                          v53 = v239;
                          v247[0] = v240;
                          *(_QWORD *)((char *)v247 + 7) = *(_QWORD *)((char *)&v240 + 7);
                          v54 = HIBYTE(v240);
                          v55 = operator new(0x38uLL);
                          v55[1] = 0;
                          v55[2] = 0;
                          v55[3] = off_24C9ABC20;
                          *v55 = &off_24C9ABBD0;
                          v56 = v247[0];
                          v55[4] = v53;
                          v55[5] = v56;
                          *(_QWORD *)((char *)v55 + 47) = *(_QWORD *)((char *)v247 + 7);
                          *((_BYTE *)v55 + 55) = v54;
                          v247[0] = 0;
                          *(_QWORD *)((char *)v247 + 7) = 0;
                          v57 = v238;
                          v237 = (char *)(v55 + 3);
                          v238 = (std::__shared_weak_count *)v55;
                          if (v57)
                          {
                            p_shared_owners = (unint64_t *)&v57->__shared_owners_;
                            do
                              v59 = __ldaxr(p_shared_owners);
                            while (__stlxr(v59 - 1, p_shared_owners));
                            if (!v59)
                            {
                              ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                              std::__shared_weak_count::__release_weak(v57);
                            }
                          }
                          *(_OWORD *)v241 = v235;
                          v60 = v237;
                          *(_QWORD *)&v241[16] = v236;
                          if (v236)
                          {
                            v61 = (unint64_t *)&v236->__shared_owners_;
                            do
                              v62 = __ldxr(v61);
                            while (__stxr(v62 + 1, v61));
                          }
                          v63 = v238;
                          *(_QWORD *)&v242 = v60;
                          *((_QWORD *)&v242 + 1) = v238;
                          if (v238)
                          {
                            v64 = (unint64_t *)&v238->__shared_owners_;
                            do
                              v65 = __ldxr(v64);
                            while (__stxr(v65 + 1, v64));
                            v243 = v60;
                            do
                              v66 = __ldaxr(v64);
                            while (__stlxr(v66 - 1, v64));
                            if (!v66)
                            {
                              ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                              std::__shared_weak_count::__release_weak(v63);
                            }
                          }
                          else
                          {
                            v243 = v60;
                          }
                          v67 = v236;
                          if (v236)
                          {
                            v68 = (unint64_t *)&v236->__shared_owners_;
                            do
                              v69 = __ldaxr(v68);
                            while (__stlxr(v69 - 1, v68));
                            if (!v69)
                            {
                              ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                              std::__shared_weak_count::__release_weak(v67);
                            }
                          }
                          v70 = *(_QWORD *)v241;
                          if (v243[31] >= 0)
                            v71 = v243 + 8;
                          else
                            v71 = (char *)*((_QWORD *)v243 + 1);
                          v72 = _os_log_pack_fill();
                          *(_DWORD *)v72 = 136315138;
                          *(_QWORD *)(v72 + 4) = v71;
                          v73 = operator new();
                          v74 = *(unsigned __int8 *)(v203 + 39);
                          v75 = *(const char **)(v203 + 16);
                          v76 = *(_QWORD *)(v203 + 24);
                          v77 = v242;
                          *(_OWORD *)(v73 + 8) = *(_OWORD *)&v241[8];
                          if ((v74 & 0x80u) != 0)
                            v74 = v76;
                          else
                            v75 = v204;
                          *(_QWORD *)v73 = v70;
                          *(_QWORD *)&v241[8] = 0;
                          *(_QWORD *)&v241[16] = 0;
                          *(_OWORD *)(v73 + 24) = v77;
                          v242 = 0uLL;
                          *(_QWORD *)(v73 + 40) = v75;
                          *(_QWORD *)(v73 + 48) = v74;
                          *(_BYTE *)(v73 + 56) = 2;
                          v239 = 0;
                          *(_QWORD *)&v235 = v73;
                          (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v208 + 24) + 40))(*(_QWORD *)(v208 + 24), &v235);
                          v50 = v205;
                          v78 = v235;
                          *(_QWORD *)&v235 = 0;
                          if (v78)
                          {
                            v79 = *(std::__shared_weak_count **)(v78 + 32);
                            if (v79)
                            {
                              v80 = (unint64_t *)&v79->__shared_owners_;
                              do
                                v81 = __ldaxr(v80);
                              while (__stlxr(v81 - 1, v80));
                              if (!v81)
                              {
                                ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                                std::__shared_weak_count::__release_weak(v79);
                              }
                            }
                            v82 = *(std::__shared_weak_count **)(v78 + 16);
                            if (v82)
                            {
                              v83 = (unint64_t *)&v82->__shared_owners_;
                              do
                                v84 = __ldaxr(v83);
                              while (__stlxr(v84 - 1, v83));
                              if (!v84)
                              {
                                ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                                std::__shared_weak_count::__release_weak(v82);
                              }
                            }
                            MEMORY[0x212BC6398](v78, 0x10F0C40B62ED6C6);
                            v85 = v239;
                            v239 = 0;
                            if (v85)
                            {
                              v86 = (std::__shared_weak_count *)v85[4];
                              if (v86)
                              {
                                v87 = (unint64_t *)&v86->__shared_owners_;
                                do
                                  v88 = __ldaxr(v87);
                                while (__stlxr(v88 - 1, v87));
                                if (!v88)
                                {
                                  ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                                  std::__shared_weak_count::__release_weak(v86);
                                }
                              }
                              v89 = (std::__shared_weak_count *)v85[2];
                              if (v89)
                              {
                                v90 = (unint64_t *)&v89->__shared_owners_;
                                do
                                  v91 = __ldaxr(v90);
                                while (__stlxr(v91 - 1, v90));
                                if (!v91)
                                {
                                  ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
                                  std::__shared_weak_count::__release_weak(v89);
                                }
                              }
                              MEMORY[0x212BC6398](v85, 0x10F0C40B62ED6C6);
                            }
                          }
                          v92 = (std::__shared_weak_count *)*((_QWORD *)&v242 + 1);
                          if (*((_QWORD *)&v242 + 1))
                          {
                            v93 = (unint64_t *)(*((_QWORD *)&v242 + 1) + 8);
                            do
                              v94 = __ldaxr(v93);
                            while (__stlxr(v94 - 1, v93));
                            if (!v94)
                            {
                              ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                              std::__shared_weak_count::__release_weak(v92);
                            }
                          }
                          v95 = *(std::__shared_weak_count **)&v241[16];
                          if (*(_QWORD *)&v241[16])
                          {
                            v96 = (unint64_t *)(*(_QWORD *)&v241[16] + 8);
                            do
                              v97 = __ldaxr(v96);
                            while (__stlxr(v97 - 1, v96));
                            if (!v97)
                            {
                              ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                              std::__shared_weak_count::__release_weak(v95);
                            }
                          }
LABEL_146:
                          if (v50)
                          {
                            v98 = (const char *)&__dst;
                            if (v221 < 0)
                              v98 = (const char *)__dst;
                            sub_20E8C003C((uint64_t)&v210, "%s", v98);
                            sub_20E863570((uint64_t)&v210);
                          }
                          sub_20E863570((uint64_t)&v210);
                          v99 = v218;
                          if (v218)
                          {
                            v100 = (unint64_t *)&v218->__shared_owners_;
                            do
                              v101 = __ldaxr(v100);
                            while (__stlxr(v101 - 1, v100));
                            if (!v101)
                            {
                              ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
                              std::__shared_weak_count::__release_weak(v99);
                            }
                          }
                          if (SHIBYTE(v221) < 0)
                            operator delete(__dst);
                          v222[0] = *MEMORY[0x24BEDB7F0];
                          v102 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                          *(_QWORD *)((char *)v222 + *(_QWORD *)(v222[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0]
                                                                                              + 64);
                          v223 = v102;
                          v224 = MEMORY[0x24BEDB848] + 16;
                          if (v230 < 0)
                            operator delete(__p);
                          std::streambuf::~streambuf();
                          std::iostream::~basic_iostream();
                          result = MEMORY[0x212BC6290](v233);
                          goto LABEL_160;
                        }
                      }
                      memcpy(v48, v206, v47);
                      goto LABEL_86;
                    }
                  }
                  memmove(v39, v31, v32);
                  goto LABEL_67;
                }
              }
              memmove(v36, v34, v35);
              goto LABEL_59;
            }
          }
          memmove(p_dst, v26, v22);
          goto LABEL_39;
        }
      }
    }
  }
LABEL_160:
  v222[0] = a2;
  v222[1] = a3;
  v104 = a1[7];
  v103 = a1[8];
  if (v104 != v103)
  {
    while (*(_QWORD *)v104 != a2 || *(_DWORD *)(v104 + 8) != (_DWORD)a3)
    {
      v104 += 16;
      if (v104 == v103)
        return result;
    }
  }
  if (v104 != v103)
  {
    v105 = v103 - (v104 + 16);
    if (v103 != v104 + 16)
      memmove((void *)v104, (const void *)(v104 + 16), v105 - 4);
    a1[8] = v104 + v105;
    v106 = a1[37];
    if (v106)
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v106 + 48))(v106, v222);
    result = a1[42];
    if (result)
    {
      v107 = a1[2];
      v108 = *(_QWORD *)(v107 + 424);
      if (v108)
      {
        if (*(_QWORD *)(*(_QWORD *)v108 + 64))
        {
          *(_QWORD *)v241 = *(_QWORD *)(v107 + 160);
          LOBYTE(v210) = 1;
          result = (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t **))(*(_QWORD *)result + 48))(result, v241, &v210);
        }
      }
    }
    v109 = *(unsigned __int8 *)(a4 + 23);
    if ((v109 & 0x80u) != 0)
      v109 = *(_QWORD *)(a4 + 8);
    if (v109)
    {
      sub_20F24E118(&v234);
      result = v234;
      if (**(int **)(v234 + 56) <= 2)
      {
        v110 = *(unsigned __int8 *)(v234 + 72);
        result = sub_20E8C31DC(v234, "OSLogSurrogateAppender", 1, 0);
        v111 = result;
        if (v110 || result)
        {
          sub_20E863438((uint64_t)v222);
          v112 = sub_20E86A980(&v223, (uint64_t)"PromoteSlidingStateToRegular ", 29);
          v113 = *(char *)(a4 + 23);
          if (v113 >= 0)
            v114 = a4;
          else
            v114 = *(_QWORD *)a4;
          if (v113 >= 0)
            v115 = *(unsigned __int8 *)(a4 + 23);
          else
            v115 = *(_QWORD *)(a4 + 8);
          v116 = sub_20E86A980(v112, v114, v115);
          v117 = sub_20E86A980(v116, (uint64_t)" state_id: ", 11);
          v210 = (uint64_t *)a2;
          LODWORD(rep) = a3;
          sub_210216370((uint64_t)&v210);
          if (v241[23] >= 0)
            v118 = v241;
          else
            v118 = *(_BYTE **)v241;
          if (v241[23] >= 0)
            v119 = v241[23];
          else
            v119 = *(_QWORD *)&v241[8];
          v120 = sub_20E86A980(v117, (uint64_t)v118, v119);
          sub_20E86A980(v120, (uint64_t)" size ", 6);
          std::ostream::operator<<();
          if ((v241[23] & 0x80000000) != 0)
          {
            operator delete(*(void **)v241);
            v121 = v232;
            v209 = v110;
            if ((v232 & 0x10) == 0)
            {
LABEL_196:
              if ((v121 & 8) == 0)
              {
                v122 = 0;
                HIBYTE(v221) = 0;
                v123 = (void **)&__dst;
                goto LABEL_209;
              }
              v125 = v225;
              v122 = v226 - (_QWORD)v225;
              if (v226 - (unint64_t)v225 > 0x7FFFFFFFFFFFFFF7)
LABEL_254:
                sub_20E860B7C();
LABEL_202:
              if (v122 >= 0x17)
              {
                v126 = (v122 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v122 | 7) != 0x17)
                  v126 = v122 | 7;
                v127 = v126 + 1;
                v123 = (void **)operator new(v126 + 1);
                v220 = v122;
                v221 = v127 | 0x8000000000000000;
                __dst = v123;
              }
              else
              {
                HIBYTE(v221) = v122;
                v123 = (void **)&__dst;
                if (!v122)
                {
LABEL_209:
                  *((_BYTE *)v123 + v122) = 0;
                  v210 = &v234;
                  rep = std::chrono::steady_clock::now().__d_.__rep_;
                  v212 = std::chrono::system_clock::now().__d_.__rep_;
                  v213 = 2;
                  v214 = "unknown file";
                  v215 = 1470;
                  v217 = 0;
                  v218 = 0;
                  v216 = "unknown function";
                  if (v221 >= 0)
                    v128 = (const char *)&__dst;
                  else
                    v128 = (const char *)__dst;
                  v129 = *v210;
                  v130 = (const char *)(*v210 + 16);
                  v207 = v130;
                  if (*(char *)(*v210 + 39) < 0)
                  {
                    v130 = *(const char **)(v129 + 16);
                    v131 = *(_QWORD *)(v129 + 24);
                    v133 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                    if ((v133 & 1) != 0)
                      goto LABEL_216;
                  }
                  else
                  {
                    v131 = *(unsigned __int8 *)(*v210 + 39);
                    v132 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                    if ((v132 & 1) != 0)
                      goto LABEL_216;
                  }
                  if (__cxa_guard_acquire(&qword_254A4A510))
                  {
                    sub_20E9E46F8((uint64_t)v241);
                    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v241);
                    if ((_BYTE)v242 && (v241[23] & 0x80000000) != 0)
                      operator delete(*(void **)v241);
                    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A4A510);
                  }
LABEL_216:
                  if (byte_254A4A4F8[23] >= 0)
                    v134 = byte_254A4A4F8;
                  else
                    v134 = *(const char **)byte_254A4A4F8;
                  if (byte_254A4A4F8[23] >= 0)
                    v135 = byte_254A4A4F8[23];
                  else
                    v135 = *(_QWORD *)&byte_254A4A4F8[8];
                  *(_QWORD *)v241 = os_log_create(v134, v130);
                  v136 = &v241[8];
                  if (v135 > 0x7FFFFFFFFFFFFFF7)
                    sub_20E860B7C();
                  if (v135 >= 0x17)
                  {
                    v137 = (v135 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v135 | 7) != 0x17)
                      v137 = v135 | 7;
                    v138 = v137 + 1;
                    v136 = operator new(v137 + 1);
                    *(_QWORD *)&v241[16] = v135;
                    *(_QWORD *)&v242 = v138 | 0x8000000000000000;
                    *(_QWORD *)&v241[8] = v136;
                  }
                  else
                  {
                    BYTE7(v242) = v135;
                    if (!v135)
                    {
LABEL_230:
                      v136[v135] = 0;
                      BYTE8(v242) = 1;
                      v139 = (char *)&v243;
                      if (v131 > 0x7FFFFFFFFFFFFFF7)
                        sub_20E860B7C();
                      if (v131 >= 0x17)
                      {
                        v140 = (v131 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v131 | 7) != 0x17)
                          v140 = v131 | 7;
                        v141 = v140 + 1;
                        v139 = (char *)operator new(v140 + 1);
                        v244 = v131;
                        v245 = v141 | 0x8000000000000000;
                        v243 = v139;
                      }
                      else
                      {
                        HIBYTE(v245) = v131;
                        if (!v131)
                        {
LABEL_238:
                          v139[v131] = 0;
                          v246 = 1;
                          v142 = *(NSObject **)v241;
                          if (SHIBYTE(v245) < 0)
                            operator delete(v243);
                          if (BYTE8(v242) && SBYTE7(v242) < 0)
                            operator delete(*(void **)&v241[8]);
                          if (*(_QWORD *)v241)
                            os_release(*(void **)v241);
                          if (!v111 || !*(_QWORD *)(v111 + 24))
                          {
                            os_log_type_enabled(v142, OS_LOG_TYPE_DEBUG);
                            *(_DWORD *)v241 = 136315138;
                            *(_QWORD *)&v241[4] = v128;
                            v149 = (void *)_os_log_send_and_compose_impl();
                            v150 = v209;
                            if (v149)
                              free(v149);
                            goto LABEL_319;
                          }
                          v143 = _os_log_pack_size();
                          v144 = (std::__shared_weak_count_vtbl *)operator new(v143, (std::align_val_t)8uLL);
                          v145 = (std::__shared_weak_count *)operator new();
                          v145->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                          v145->__shared_owners_ = 0;
                          v145->__shared_weak_owners_ = 0;
                          v145[1].__vftable = v144;
                          *(_QWORD *)&v235 = v144;
                          *((_QWORD *)&v235 + 1) = v144;
                          v237 = 0;
                          v238 = 0;
                          v236 = v145;
                          v146 = strlen(v128);
                          if (v146 > 0x7FFFFFFFFFFFFFF7)
                            sub_20E860B7C();
                          v147 = v146;
                          if (v146 >= 0x17)
                          {
                            v151 = (v146 & 0xFFFFFFFFFFFFFFF8) + 8;
                            if ((v146 | 7) != 0x17)
                              v151 = v146 | 7;
                            v152 = v151 + 1;
                            v148 = operator new(v151 + 1);
                            *(_QWORD *)&v240 = v147;
                            *((_QWORD *)&v240 + 1) = v152 | 0x8000000000000000;
                            v239 = v148;
                          }
                          else
                          {
                            HIBYTE(v240) = v146;
                            v148 = &v239;
                            if (!v146)
                            {
LABEL_259:
                              *((_BYTE *)v148 + v147) = 0;
                              v153 = v239;
                              v247[0] = v240;
                              *(_QWORD *)((char *)v247 + 7) = *(_QWORD *)((char *)&v240 + 7);
                              v154 = HIBYTE(v240);
                              v155 = operator new(0x38uLL);
                              v155[1] = 0;
                              v155[2] = 0;
                              v155[3] = off_24C9ABC20;
                              *v155 = &off_24C9ABBD0;
                              v156 = v247[0];
                              v155[4] = v153;
                              v155[5] = v156;
                              *(_QWORD *)((char *)v155 + 47) = *(_QWORD *)((char *)v247 + 7);
                              *((_BYTE *)v155 + 55) = v154;
                              v247[0] = 0;
                              *(_QWORD *)((char *)v247 + 7) = 0;
                              v157 = v238;
                              v237 = (char *)(v155 + 3);
                              v238 = (std::__shared_weak_count *)v155;
                              if (v157)
                              {
                                v158 = (unint64_t *)&v157->__shared_owners_;
                                do
                                  v159 = __ldaxr(v158);
                                while (__stlxr(v159 - 1, v158));
                                if (!v159)
                                {
                                  ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
                                  std::__shared_weak_count::__release_weak(v157);
                                }
                              }
                              *(_OWORD *)v241 = v235;
                              v160 = v237;
                              *(_QWORD *)&v241[16] = v236;
                              if (v236)
                              {
                                v161 = (unint64_t *)&v236->__shared_owners_;
                                do
                                  v162 = __ldxr(v161);
                                while (__stxr(v162 + 1, v161));
                              }
                              v163 = v238;
                              *(_QWORD *)&v242 = v160;
                              *((_QWORD *)&v242 + 1) = v238;
                              if (v238)
                              {
                                v164 = (unint64_t *)&v238->__shared_owners_;
                                do
                                  v165 = __ldxr(v164);
                                while (__stxr(v165 + 1, v164));
                                v243 = v160;
                                do
                                  v166 = __ldaxr(v164);
                                while (__stlxr(v166 - 1, v164));
                                if (!v166)
                                {
                                  ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
                                  std::__shared_weak_count::__release_weak(v163);
                                }
                              }
                              else
                              {
                                v243 = v160;
                              }
                              v167 = v236;
                              if (v236)
                              {
                                v168 = (unint64_t *)&v236->__shared_owners_;
                                do
                                  v169 = __ldaxr(v168);
                                while (__stlxr(v169 - 1, v168));
                                if (!v169)
                                {
                                  ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
                                  std::__shared_weak_count::__release_weak(v167);
                                }
                              }
                              v170 = *(_QWORD *)v241;
                              if (v243[31] >= 0)
                                v171 = v243 + 8;
                              else
                                v171 = (char *)*((_QWORD *)v243 + 1);
                              v172 = _os_log_pack_fill();
                              *(_DWORD *)v172 = 136315138;
                              *(_QWORD *)(v172 + 4) = v171;
                              v173 = operator new();
                              v174 = *(unsigned __int8 *)(v129 + 39);
                              v175 = *(const char **)(v129 + 16);
                              v176 = *(_QWORD *)(v129 + 24);
                              v177 = v242;
                              *(_OWORD *)(v173 + 8) = *(_OWORD *)&v241[8];
                              if ((v174 & 0x80u) != 0)
                                v174 = v176;
                              else
                                v175 = v207;
                              *(_QWORD *)v173 = v170;
                              *(_QWORD *)&v241[8] = 0;
                              *(_QWORD *)&v241[16] = 0;
                              *(_OWORD *)(v173 + 24) = v177;
                              v242 = 0uLL;
                              *(_QWORD *)(v173 + 40) = v175;
                              *(_QWORD *)(v173 + 48) = v174;
                              *(_BYTE *)(v173 + 56) = 2;
                              v239 = 0;
                              *(_QWORD *)&v235 = v173;
                              (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v111 + 24) + 40))(*(_QWORD *)(v111 + 24), &v235);
                              v178 = v235;
                              *(_QWORD *)&v235 = 0;
                              v150 = v209;
                              if (v178)
                              {
                                v179 = *(std::__shared_weak_count **)(v178 + 32);
                                if (v179)
                                {
                                  v180 = (unint64_t *)&v179->__shared_owners_;
                                  do
                                    v181 = __ldaxr(v180);
                                  while (__stlxr(v181 - 1, v180));
                                  if (!v181)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
                                    std::__shared_weak_count::__release_weak(v179);
                                  }
                                }
                                v182 = *(std::__shared_weak_count **)(v178 + 16);
                                if (v182)
                                {
                                  v183 = (unint64_t *)&v182->__shared_owners_;
                                  do
                                    v184 = __ldaxr(v183);
                                  while (__stlxr(v184 - 1, v183));
                                  if (!v184)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
                                    std::__shared_weak_count::__release_weak(v182);
                                  }
                                }
                                MEMORY[0x212BC6398](v178, 0x10F0C40B62ED6C6);
                                v185 = v239;
                                v239 = 0;
                                if (v185)
                                {
                                  v186 = (std::__shared_weak_count *)v185[4];
                                  if (v186)
                                  {
                                    v187 = (unint64_t *)&v186->__shared_owners_;
                                    do
                                      v188 = __ldaxr(v187);
                                    while (__stlxr(v188 - 1, v187));
                                    if (!v188)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
                                      std::__shared_weak_count::__release_weak(v186);
                                    }
                                  }
                                  v189 = (std::__shared_weak_count *)v185[2];
                                  if (v189)
                                  {
                                    v190 = (unint64_t *)&v189->__shared_owners_;
                                    do
                                      v191 = __ldaxr(v190);
                                    while (__stlxr(v191 - 1, v190));
                                    if (!v191)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
                                      std::__shared_weak_count::__release_weak(v189);
                                    }
                                  }
                                  MEMORY[0x212BC6398](v185, 0x10F0C40B62ED6C6);
                                }
                              }
                              v192 = (std::__shared_weak_count *)*((_QWORD *)&v242 + 1);
                              if (*((_QWORD *)&v242 + 1))
                              {
                                v193 = (unint64_t *)(*((_QWORD *)&v242 + 1) + 8);
                                do
                                  v194 = __ldaxr(v193);
                                while (__stlxr(v194 - 1, v193));
                                if (!v194)
                                {
                                  ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
                                  std::__shared_weak_count::__release_weak(v192);
                                }
                              }
                              v195 = *(std::__shared_weak_count **)&v241[16];
                              if (*(_QWORD *)&v241[16])
                              {
                                v196 = (unint64_t *)(*(_QWORD *)&v241[16] + 8);
                                do
                                  v197 = __ldaxr(v196);
                                while (__stlxr(v197 - 1, v196));
                                if (!v197)
                                {
                                  ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
                                  std::__shared_weak_count::__release_weak(v195);
                                }
                              }
LABEL_319:
                              if (v150)
                              {
                                v198 = (const char *)&__dst;
                                if (v221 < 0)
                                  v198 = (const char *)__dst;
                                sub_20E8C003C((uint64_t)&v210, "%s", v198);
                                sub_20E863570((uint64_t)&v210);
                              }
                              sub_20E863570((uint64_t)&v210);
                              v199 = v218;
                              if (v218)
                              {
                                v200 = (unint64_t *)&v218->__shared_owners_;
                                do
                                  v201 = __ldaxr(v200);
                                while (__stlxr(v201 - 1, v200));
                                if (!v201)
                                {
                                  ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
                                  std::__shared_weak_count::__release_weak(v199);
                                }
                              }
                              if (SHIBYTE(v221) < 0)
                                operator delete(__dst);
                              v222[0] = *MEMORY[0x24BEDB7F0];
                              v202 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                              *(_QWORD *)((char *)v222 + *(_QWORD *)(v222[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0]
                                                                                                  + 64);
                              v223 = v202;
                              v224 = MEMORY[0x24BEDB848] + 16;
                              if (v230 < 0)
                                operator delete(__p);
                              std::streambuf::~streambuf();
                              std::iostream::~basic_iostream();
                              return MEMORY[0x212BC6290](v233);
                            }
                          }
                          memcpy(v148, v128, v147);
                          goto LABEL_259;
                        }
                      }
                      memmove(v139, v130, v131);
                      goto LABEL_238;
                    }
                  }
                  memmove(v136, v134, v135);
                  goto LABEL_230;
                }
              }
              memmove(v123, v125, v122);
              goto LABEL_209;
            }
          }
          else
          {
            v121 = v232;
            v209 = v110;
            if ((v232 & 0x10) == 0)
              goto LABEL_196;
          }
          v124 = v231;
          if (v231 < v228)
          {
            v231 = v228;
            v124 = v228;
          }
          v125 = v227;
          v122 = v124 - (_QWORD)v227;
          if (v124 - (unint64_t)v227 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_254;
          goto LABEL_202;
        }
      }
    }
  }
  return result;
}

void sub_20F250388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32)
{
  uint64_t v32;

  if (*(_BYTE *)(v32 - 168) && *(char *)(v32 - 169) < 0)
    operator delete(*(void **)(v32 - 192));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a17);
  if (a31 < 0)
  {
    operator delete(__p);
    sub_20E863784((uint64_t)&a32);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&a32);
  _Unwind_Resume(a1);
}

uint64_t sub_20F2505E4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  _DWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  int v25;
  char *v26;
  _BYTE *v27;
  void *__p;
  _OWORD *v30;
  unint64_t v31;

  v2 = a1[2];
  v3 = **(_QWORD **)(v2 + 424);
  __p = *(void **)(v2 + 160);
  v4 = sub_20F28293C(*(_QWORD **)(v3 + 48), (_QWORD *)(v3 + 56), (unint64_t *)&__p);
  if (v4 == v5)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    do
    {
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      ++v6;
      v4 = v8;
    }
    while (v8 != v5);
  }
  __p = 0;
  v30 = 0;
  v31 = 0;
  v10 = a1[4];
  v11 = a1[5];
  if (v10 == v11)
  {
    v12 = 0;
    v27 = 0;
    return v6 - ((v12 - v27) >> 4);
  }
  v12 = 0;
  v13 = 0;
  do
  {
    if (*(_QWORD *)v10 == *(_QWORD *)(a1[2] + 160))
    {
      v15 = v12;
      if (v13 != v12)
      {
        v15 = v13;
        while (*(_QWORD *)v15 != *(_QWORD *)v10 || *((_DWORD *)v15 + 2) != *(_DWORD *)(v10 + 8))
        {
          v15 += 16;
          if (v15 == v12)
            goto LABEL_23;
        }
      }
      if (v15 == v12)
      {
LABEL_23:
        if ((unint64_t)v12 < v31)
        {
          *(_OWORD *)v12 = *(_OWORD *)v10;
          v14 = v12 + 16;
LABEL_14:
          v30 = v14;
          v12 = (char *)v14;
          goto LABEL_15;
        }
        v16 = (v12 - v13) >> 4;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 60)
          sub_20E867F44();
        v18 = v31 - (_QWORD)v13;
        if ((uint64_t)(v31 - (_QWORD)v13) >> 3 > v17)
          v17 = v18 >> 3;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0)
          v19 = 0xFFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          if (v19 >> 60)
            sub_20E877A38();
          v20 = (char *)operator new(16 * v19);
          v21 = &v20[16 * v16];
          *(_OWORD *)v21 = *(_OWORD *)v10;
          v22 = v21;
          if (v13 == v12)
          {
LABEL_33:
            v23 = &v20[16 * v19];
            v14 = v21 + 16;
            __p = v22;
            v30 = v21 + 16;
            v31 = (unint64_t)v23;
            if (!v12)
            {
LABEL_35:
              v13 = v22;
              goto LABEL_14;
            }
LABEL_34:
            operator delete(v12);
            goto LABEL_35;
          }
        }
        else
        {
          v20 = 0;
          v21 = (char *)(16 * v16);
          *(_OWORD *)(16 * v16) = *(_OWORD *)v10;
          v22 = (char *)(16 * v16);
          if (v13 == v12)
            goto LABEL_33;
        }
        do
        {
          v24 = *((_QWORD *)v12 - 2);
          v12 -= 16;
          v25 = *((_DWORD *)v12 + 2);
          *((_QWORD *)v22 - 2) = v24;
          v22 -= 16;
          *((_DWORD *)v22 + 2) = v25;
        }
        while (v12 != v13);
        v12 = (char *)__p;
        v26 = &v20[16 * v19];
        v14 = v21 + 16;
        __p = v22;
        v30 = v21 + 16;
        v31 = (unint64_t)v26;
        if (!v12)
          goto LABEL_35;
        goto LABEL_34;
      }
    }
LABEL_15:
    v10 += 16;
  }
  while (v10 != v11);
  v27 = __p;
  if (__p)
    operator delete(__p);
  return v6 - ((v12 - v27) >> 4);
}

void sub_20F250868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F250888(_QWORD *a1, void **a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  void *v10;
  void *v11;
  unint64_t v12;
  uint64_t *v13;
  void *v14;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  void **v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  int v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  std::ios_base *v35;
  uint64_t v36;
  _QWORD *v37;
  int v38;
  _BYTE *v39;
  uint64_t v40;
  _QWORD *v41;
  size_t v42;
  void **v43;
  unint64_t v44;
  uint8x8_t v45;
  uint64_t **v46;
  uint64_t *v47;
  unint64_t v48;
  unint64_t v50;
  uint64_t v52;
  unint64_t v53;
  const void **v54;
  const void *v55;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  const char *v60;
  size_t v61;
  unsigned __int8 v62;
  const char *v63;
  size_t v64;
  __int128 *v65;
  uint64_t v66;
  uint64_t v67;
  void *p_p;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  size_t v72;
  std::__shared_weak_count_vtbl *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  size_t v76;
  size_t v77;
  void *p_object;
  void *v79;
  int v80;
  uint64_t i;
  unint64_t v82;
  unsigned int v83;
  char *v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  char v91;
  _QWORD *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  char *v95;
  char *v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  char *shared_owners;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  const char *v105;
  void *v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  const char *v113;
  uint64_t *v114;
  unint64_t v115;
  _QWORD *v116;
  __int128 v117;
  int v118;
  const char *v119;
  int v120;
  const char *v121;
  std::__shared_weak_count *v122;
  unint64_t *p_shared_owners;
  unint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  uint64_t *v135;
  unint64_t v136;
  _QWORD *v137;
  __int128 v138;
  int v139;
  const char *v140;
  int v141;
  const char *v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  unsigned int v163;
  char *v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  _BYTE *v173;
  _BYTE *v174;
  uint64_t v175;
  char *v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  unint64_t v181;
  char *v182;
  char *v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  void *v187;
  void *v188;
  _QWORD *v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  unsigned __int8 v193;
  uint64_t v194;
  uint64_t j;
  unsigned __int8 v196;
  uint64_t v197;
  uint64_t *v198;
  uint64_t *k;
  uint64_t v200;
  uint64_t v201;
  int v202;
  unsigned int v203;
  unint64_t v204;
  int8x8_t v205;
  uint8x8_t v206;
  unint64_t v207;
  uint64_t **v208;
  uint64_t *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  unint64_t v214;
  uint64_t v215;
  uint64_t *v216;
  uint64_t *v217;
  unint64_t v218;
  unint64_t v219;
  uint64_t *v220;
  unint64_t v221;
  int8x8_t v222;
  uint8x8_t v223;
  unint64_t v224;
  uint64_t **v225;
  uint64_t *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t *v233;
  uint64_t *v234;
  unint64_t v235;
  unint64_t v236;
  uint64_t *v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t *v240;
  uint64_t *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  _QWORD *v257;
  uint64_t *v258;
  unsigned int v259;
  unint64_t v260;
  _QWORD *v261;
  uint64_t *v262;
  unsigned int v263;
  unsigned int v264;
  BOOL v265;
  unint64_t v266;
  unsigned int v267;
  BOOL v268;
  unint64_t v269;
  _QWORD *v270;
  _QWORD *v271;
  _QWORD *v272;
  uint64_t *v273;
  unsigned int v274;
  unint64_t v275;
  unsigned int v276;
  _QWORD *v277;
  uint64_t *v278;
  unsigned int v279;
  BOOL v280;
  unint64_t v281;
  unsigned int v282;
  BOOL v283;
  unint64_t v284;
  _QWORD *v285;
  _QWORD *v286;
  _QWORD *v287;
  unsigned __int8 v288;
  int v289;
  unint64_t v290;
  unint64_t v291;
  uint64_t v292;
  size_t v293;
  const char *v294;
  int v295;
  unsigned __int8 v296;
  size_t v297;
  const char *v298;
  _BYTE *v299;
  unint64_t v300;
  int v301;
  int v302;
  uint64_t v303;
  uint64_t v304;
  void **v305;
  uint64_t v306;
  uint64_t v307;
  NSObject *v308;
  int v309;
  size_t v310;
  std::__shared_weak_count_vtbl *v311;
  std::__shared_weak_count *v312;
  std::__shared_weak_count *v313;
  unint64_t *v314;
  unint64_t v315;
  unint64_t v316;
  _DWORD *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  std::__shared_weak_count *v322;
  unint64_t *v323;
  unint64_t v324;
  std::__shared_weak_count *v325;
  unint64_t *v326;
  unint64_t v327;
  void *v328;
  uint64_t *v329;
  unint64_t v330;
  _QWORD *v331;
  __int128 v332;
  int v333;
  const char *v334;
  int v335;
  const char *v336;
  std::__shared_weak_count *v337;
  unint64_t *v338;
  unint64_t v339;
  unint64_t *v340;
  unint64_t v341;
  std::__shared_weak_count *v342;
  unint64_t *v343;
  unint64_t v344;
  unint64_t *v345;
  unint64_t v346;
  std::__shared_weak_count *v347;
  unint64_t *v348;
  unint64_t v349;
  uint64_t *v350;
  unint64_t v351;
  _QWORD *v352;
  __int128 v353;
  int v354;
  const char *v355;
  int v356;
  const char *v357;
  std::__shared_weak_count *v358;
  unint64_t *v359;
  unint64_t v360;
  unint64_t *v361;
  unint64_t v362;
  std::__shared_weak_count *v363;
  unint64_t *v364;
  unint64_t v365;
  unint64_t *v366;
  unint64_t v367;
  std::__shared_weak_count *v368;
  unint64_t *v369;
  unint64_t v370;
  std::__shared_weak_count *v371;
  unint64_t *v372;
  unint64_t v373;
  char *v374;
  char *v375;
  unint64_t v376;
  void *v377;
  unint64_t v378;
  void **v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  unsigned __int8 v383;
  unsigned __int8 v384;
  std::__shared_weak_count_vtbl *v385;
  const char *v386;
  int v387;
  uint64_t v388;
  uint64_t v389;
  const char *__src;
  unint64_t v391;
  BOOL v392;
  __int128 v393;
  uint64_t v394;
  uint64_t *v395;
  __int128 v396;
  int v397;
  const char *v398;
  int v399;
  const char *v400;
  unint64_t v401;
  std::__shared_weak_count *v402;
  void *__dst[2];
  int64_t v404;
  uint64_t v405;
  void *object;
  __int128 v407;
  unint64_t v408;
  const char *v409;
  void *__p;
  const char *v411;
  unint64_t v412;
  std::__shared_weak_count *v413;
  _BYTE v414[24];
  uint64_t v415;
  const char *v416;
  int v417;
  const char *v418;
  unint64_t v419;
  std::__shared_weak_count *v420;
  unint64_t v421;
  __int128 v422;
  __int128 v423;
  int v424;
  uint64_t v425[20];
  _BYTE v426[24];
  unint64_t v427;
  const char *v428;
  void **v429;
  size_t v430;
  unint64_t v431;
  std::__shared_weak_count *v432;
  uint64_t v433;

  v433 = *MEMORY[0x24BDAC8D0];
  v3 = a1[2];
  v4 = **(_QWORD **)(v3 + 424);
  v7 = *(uint64_t **)(v4 + 56);
  v5 = (uint64_t *)(v4 + 56);
  v6 = v7;
  if (!v7)
    return;
  v11 = *a2;
  v10 = a2[1];
  v12 = v10;
  v13 = v5;
  do
  {
    v14 = (void *)v6[4];
    if (v14 < v11)
    {
      ++v6;
    }
    else if (v14 == v11)
    {
      if (*((_DWORD *)v6 + 10) < v10)
        ++v6;
      else
        v13 = v6;
    }
    else
    {
      v13 = v6;
    }
    v6 = (uint64_t *)*v6;
  }
  while (v6);
  if (v13 == v5)
    return;
  v15 = (void *)v13[4];
  if (v11 < v15 || v11 == v15 && *((_DWORD *)v13 + 10) > v10)
    return;
  if (!v13[6])
    return;
  v16 = (char *)a1[4];
  v17 = (char *)a1[5];
  v18 = v16;
  if (v17 != v16)
  {
    v19 = (v17 - v16) >> 4;
    v18 = (char *)a1[4];
    do
    {
      v20 = v19 >> 1;
      v21 = (void **)&v18[16 * (v19 >> 1)];
      if (*v21 < v11 || *v21 == v11 && *(_DWORD *)&v18[16 * v20 + 8] < v10)
      {
        v18 = (char *)(v21 + 2);
        v20 = v19 + ~v20;
      }
      v19 = v20;
    }
    while (v20);
  }
  if (v18 == v17 || *(void **)v18 != v11)
  {
    v22 = 0;
    v23 = *(unsigned __int8 *)(*a1 + 2499);
    if (!*(_BYTE *)(*a1 + 2499))
      goto LABEL_27;
  }
  else
  {
    v22 = *((_DWORD *)v18 + 2) == (_DWORD)v10;
    v23 = *(unsigned __int8 *)(*a1 + 2499);
    if (!*(_BYTE *)(*a1 + 2499))
    {
LABEL_27:
      if (*((_BYTE *)a1 + 224) && (v11 != (void *)a1[26] || *((_DWORD *)a1 + 54) != (_DWORD)v10))
        goto LABEL_265;
      return;
    }
  }
  v25 = *(_QWORD *)(v3 + 208);
  v24 = *(_QWORD *)(v3 + 216);
  if (v25 != v24)
  {
    while (v11 != *(void **)v25 || *(_DWORD *)(v25 + 8) != (_DWORD)v10)
    {
      v25 += 472;
      if (v25 == v24)
        goto LABEL_55;
    }
  }
  if (v25 != v24)
  {
    v26 = atomic_load((unsigned __int8 *)&qword_254A687F8);
    if ((v26 & 1) == 0 && __cxa_guard_acquire(&qword_254A687F8))
    {
      v384 = atomic_load((unsigned __int8 *)&qword_254A6DDE0);
      if ((v384 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDE0))
      {
        sub_20E8BFCE4(&qword_254A6DDD8);
        __cxa_guard_release(&qword_254A6DDE0);
      }
      *(_QWORD *)v426 = qword_254A6DDD8;
      v414[23] = 21;
      strcpy(v414, "cv3d.vio.area_mapping");
      sub_20E8C4068((uint64_t **)v426, (uint64_t)v414, &qword_254A687F0);
      if ((v414[23] & 0x80000000) != 0)
        operator delete(*(void **)v414);
      __cxa_guard_release(&qword_254A687F8);
    }
    v405 = qword_254A687F0;
    if (**(int **)(qword_254A687F0 + 56) > 2)
      return;
    v27 = *(unsigned __int8 *)(qword_254A687F0 + 72);
    v28 = sub_20E8C31DC(qword_254A687F0, "OSLogSurrogateAppender", 1, 0);
    v29 = !v27 && v28 == 0;
    if (v29)
      return;
    v391 = v28;
    v387 = v27;
    v30 = MEMORY[0x24BEDB858] + 104;
    v425[0] = MEMORY[0x24BEDB858] + 104;
    v31 = MEMORY[0x24BEDB858] + 64;
    v32 = (_QWORD *)MEMORY[0x24BEDB7F0];
    v33 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
    v34 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
    *(_QWORD *)&v414[16] = MEMORY[0x24BEDB858] + 64;
    *(_QWORD *)v414 = v33;
    *(_QWORD *)&v414[*(_QWORD *)(v33 - 24)] = v34;
    *(_QWORD *)&v414[8] = 0;
    v35 = (std::ios_base *)&v414[*(_QWORD *)(*(_QWORD *)v414 - 24)];
    std::ios_base::init(v35, &v415);
    v35[1].__vftable = 0;
    v35[1].__fmtflags_ = -1;
    v36 = v32[5];
    *(_QWORD *)&v414[16] = v32[4];
    *(_QWORD *)&v414[*(_QWORD *)(*(_QWORD *)&v414[16] - 24) + 16] = v36;
    *(_QWORD *)v414 = v32[1];
    *(_QWORD *)&v414[*(_QWORD *)(*(_QWORD *)v414 - 24)] = v32[6];
    v425[0] = v30;
    *(_QWORD *)v414 = MEMORY[0x24BEDB858] + 24;
    *(_QWORD *)&v414[16] = v31;
    std::streambuf::basic_streambuf();
    v415 = MEMORY[0x24BEDB848] + 16;
    v422 = 0u;
    v423 = 0u;
    v424 = 24;
    v37 = sub_20E86A980(&v414[16], (uint64_t)"skip deleting ", 14);
    v38 = *((_DWORD *)a2 + 2);
    object = *a2;
    LODWORD(v407) = v38;
    sub_210216370((uint64_t)&object);
    if (v426[23] >= 0)
      v39 = v426;
    else
      v39 = *(_BYTE **)v426;
    if (v426[23] >= 0)
      v40 = v426[23];
    else
      v40 = *(_QWORD *)&v426[8];
    v41 = sub_20E86A980(v37, (uint64_t)v39, v40);
    sub_20E86A980(v41, (uint64_t)" due to external relocalization", 31);
    if ((v426[23] & 0x80000000) != 0)
      operator delete(*(void **)v426);
    if ((v424 & 0x10) != 0)
    {
      v53 = *((_QWORD *)&v423 + 1);
      if (*((_QWORD *)&v423 + 1) < v421)
      {
        *((_QWORD *)&v423 + 1) = v421;
        v53 = v421;
      }
      v54 = (const void **)&v420;
    }
    else
    {
      if ((v424 & 8) == 0)
      {
        v42 = 0;
        HIBYTE(v404) = 0;
        v43 = __dst;
        goto LABEL_95;
      }
      v54 = (const void **)&v417;
      v53 = v419;
    }
    v55 = *v54;
    v42 = v53 - (_QWORD)*v54;
    if (v42 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v42 >= 0x17)
    {
      v56 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v42 | 7) != 0x17)
        v56 = v42 | 7;
      v57 = v56 + 1;
      v43 = (void **)operator new(v56 + 1);
      __dst[1] = (void *)v42;
      v404 = v57 | 0x8000000000000000;
      __dst[0] = v43;
    }
    else
    {
      HIBYTE(v404) = v53 - *(_BYTE *)v54;
      v43 = __dst;
      if (!v42)
      {
LABEL_95:
        *((_BYTE *)v43 + v42) = 0;
        v395 = &v405;
        *(std::chrono::steady_clock::time_point *)&v396 = std::chrono::steady_clock::now();
        *((std::chrono::system_clock::time_point *)&v396 + 1) = std::chrono::system_clock::now();
        v397 = 2;
        v398 = "unknown file";
        v399 = 3135;
        v401 = 0;
        v402 = 0;
        v400 = "unknown function";
        if (v404 >= 0)
          v58 = (const char *)__dst;
        else
          v58 = (const char *)__dst[0];
        v59 = *v395;
        v60 = (const char *)(*v395 + 16);
        v386 = v60;
        if (*(char *)(*v395 + 39) < 0)
        {
          v60 = *(const char **)(v59 + 16);
          v61 = *(_QWORD *)(v59 + 24);
        }
        else
        {
          v61 = *(unsigned __int8 *)(*v395 + 39);
        }
        v62 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v62 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)v426);
          if ((_BYTE)v427)
          {
            *(_OWORD *)byte_254A4A4F8 = *(_OWORD *)v426;
            *(_QWORD *)&byte_254A4A4F8[16] = *(_QWORD *)&v426[16];
          }
          else
          {
            byte_254A4A4F8[23] = 14;
            strcpy(byte_254A4A4F8, "com.apple.cv3d");
          }
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        if (byte_254A4A4F8[23] >= 0)
          v63 = byte_254A4A4F8;
        else
          v63 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v64 = byte_254A4A4F8[23];
        else
          v64 = *(_QWORD *)&byte_254A4A4F8[8];
        object = os_log_create(v63, v60);
        v65 = &v407;
        if (v64 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v64 >= 0x17)
        {
          v66 = (v64 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v64 | 7) != 0x17)
            v66 = v64 | 7;
          v67 = v66 + 1;
          v65 = (__int128 *)operator new(v66 + 1);
          *((_QWORD *)&v407 + 1) = v64;
          v408 = v67 | 0x8000000000000000;
          *(_QWORD *)&v407 = v65;
        }
        else
        {
          HIBYTE(v408) = v64;
          if (!v64)
          {
LABEL_116:
            *((_BYTE *)v65 + v64) = 0;
            LOBYTE(v409) = 1;
            p_p = &__p;
            if (v61 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v61 >= 0x17)
            {
              v69 = (v61 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v61 | 7) != 0x17)
                v69 = v61 | 7;
              v70 = v69 + 1;
              p_p = operator new(v69 + 1);
              v411 = (const char *)v61;
              v412 = v70 | 0x8000000000000000;
              __p = p_p;
            }
            else
            {
              HIBYTE(v412) = v61;
              if (!v61)
              {
LABEL_124:
                *((_BYTE *)p_p + v61) = 0;
                LOBYTE(v413) = 1;
                v71 = object;
                if (SHIBYTE(v412) < 0)
                  operator delete(__p);
                if ((_BYTE)v409 && SHIBYTE(v408) < 0)
                  operator delete((void *)v407);
                if (object)
                  os_release(object);
                if (!v391 || !*(_QWORD *)(v391 + 24))
                {
                  os_log_type_enabled(v71, OS_LOG_TYPE_DEBUG);
                  *(_DWORD *)v426 = 136315138;
                  *(_QWORD *)&v426[4] = v58;
                  v79 = (void *)_os_log_send_and_compose_impl();
                  v80 = v387;
                  if (v79)
                    free(v79);
LABEL_184:
                  if (v80)
                  {
                    v113 = (const char *)__dst;
                    if (v404 < 0)
                      v113 = (const char *)__dst[0];
                    sub_20E8C003C((uint64_t)&v395, "%s", v113);
                    v114 = v395;
                    if (!v395)
                      goto LABEL_241;
                    v115 = v401;
                    if (!v401)
                      goto LABEL_241;
                    v116 = (_QWORD *)(*v395 + 16);
                    if (*(char *)(*v395 + 39) < 0)
                      v116 = (_QWORD *)*v116;
                    v117 = v396;
                    v118 = v397;
                    v119 = v398;
                    v120 = v399;
                    v121 = v400;
                    v122 = v402;
                    if (v402)
                    {
                      p_shared_owners = (unint64_t *)&v402->__shared_owners_;
                      do
                        v124 = __ldxr(p_shared_owners);
                      while (__stxr(v124 + 1, p_shared_owners));
                    }
                    *(_QWORD *)v426 = v116;
                    *(_OWORD *)&v426[8] = v117;
                    LODWORD(v427) = v118;
                    v428 = v119;
                    LODWORD(v429) = v120;
                    v430 = (size_t)v121;
                    v431 = v115;
                    v432 = v122;
                    if (v122)
                    {
                      v125 = (unint64_t *)&v122->__shared_owners_;
                      do
                        v126 = __ldxr(v125);
                      while (__stxr(v126 + 1, v125));
                    }
                    v127 = v122;
                    if (v118 >= **(_DWORD **)(*v114 + 56))
                    {
                      sub_20E8C3FC4(*v114, (uint64_t)v426);
                      v127 = v432;
                    }
                    if (v127)
                    {
                      v128 = (unint64_t *)&v127->__shared_owners_;
                      do
                        v129 = __ldaxr(v128);
                      while (__stlxr(v129 - 1, v128));
                      if (!v129)
                      {
                        ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
                        std::__shared_weak_count::__release_weak(v127);
                      }
                    }
                    if (v122)
                    {
                      v130 = (unint64_t *)&v122->__shared_owners_;
                      do
                        v131 = __ldaxr(v130);
                      while (__stlxr(v131 - 1, v130));
                      if (!v131)
                      {
                        ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
                        std::__shared_weak_count::__release_weak(v122);
                      }
                    }
                    v132 = v402;
                    v401 = 0;
                    v402 = 0;
                    if (v132)
                    {
                      v133 = (unint64_t *)&v132->__shared_owners_;
                      do
                        v134 = __ldaxr(v133);
                      while (__stlxr(v134 - 1, v133));
                      if (!v134)
                      {
                        ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
                        std::__shared_weak_count::__release_weak(v132);
                      }
                    }
                  }
                  v135 = v395;
                  if (v395)
                  {
                    v136 = v401;
                    if (v401)
                    {
                      v137 = (_QWORD *)(*v395 + 16);
                      if (*(char *)(*v395 + 39) < 0)
                        v137 = (_QWORD *)*v137;
                      v138 = v396;
                      v139 = v397;
                      v140 = v398;
                      v141 = v399;
                      v142 = v400;
                      v143 = v402;
                      if (v402)
                      {
                        v144 = (unint64_t *)&v402->__shared_owners_;
                        do
                          v145 = __ldxr(v144);
                        while (__stxr(v145 + 1, v144));
                      }
                      *(_QWORD *)v426 = v137;
                      *(_OWORD *)&v426[8] = v138;
                      LODWORD(v427) = v139;
                      v428 = v140;
                      LODWORD(v429) = v141;
                      v430 = (size_t)v142;
                      v431 = v136;
                      v432 = v143;
                      if (v143)
                      {
                        v146 = (unint64_t *)&v143->__shared_owners_;
                        do
                          v147 = __ldxr(v146);
                        while (__stxr(v147 + 1, v146));
                      }
                      v148 = v143;
                      if (v139 >= **(_DWORD **)(*v135 + 56))
                      {
                        sub_20E8C3FC4(*v135, (uint64_t)v426);
                        v148 = v432;
                      }
                      if (v148)
                      {
                        v149 = (unint64_t *)&v148->__shared_owners_;
                        do
                          v150 = __ldaxr(v149);
                        while (__stlxr(v150 - 1, v149));
                        if (!v150)
                        {
                          ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
                          std::__shared_weak_count::__release_weak(v148);
                        }
                      }
                      if (v143)
                      {
                        v151 = (unint64_t *)&v143->__shared_owners_;
                        do
                          v152 = __ldaxr(v151);
                        while (__stlxr(v152 - 1, v151));
                        if (!v152)
                        {
                          ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
                          std::__shared_weak_count::__release_weak(v143);
                        }
                      }
                      v153 = v402;
                      v401 = 0;
                      v402 = 0;
                      if (v153)
                      {
                        v154 = (unint64_t *)&v153->__shared_owners_;
                        do
                          v155 = __ldaxr(v154);
                        while (__stlxr(v155 - 1, v154));
                        if (!v155)
                        {
                          ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
                          std::__shared_weak_count::__release_weak(v153);
                        }
                      }
                    }
                  }
LABEL_241:
                  v156 = v402;
                  if (v402)
                  {
                    v157 = (unint64_t *)&v402->__shared_owners_;
                    do
                      v158 = __ldaxr(v157);
                    while (__stlxr(v158 - 1, v157));
                    if (!v158)
                    {
                      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
                      std::__shared_weak_count::__release_weak(v156);
                    }
                  }
                  if (SHIBYTE(v404) < 0)
                    operator delete(__dst[0]);
                  *(_QWORD *)v414 = *MEMORY[0x24BEDB7F0];
                  v159 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                  *(_QWORD *)&v414[*(_QWORD *)(*(_QWORD *)v414 - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                  *(_QWORD *)&v414[16] = v159;
                  v415 = MEMORY[0x24BEDB848] + 16;
                  if (SBYTE7(v423) < 0)
                    operator delete((void *)v422);
                  std::streambuf::~streambuf();
                  std::iostream::~basic_iostream();
                  MEMORY[0x212BC6290](v425);
                  return;
                }
                v72 = _os_log_pack_size();
                v73 = (std::__shared_weak_count_vtbl *)operator new(v72, (std::align_val_t)8uLL);
                v74 = (std::__shared_weak_count *)operator new();
                v74->__shared_owners_ = 0;
                v75 = (unint64_t *)&v74->__shared_owners_;
                v74->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v74->__shared_weak_owners_ = 0;
                v74[1].__vftable = v73;
                v76 = strlen(v58);
                if (v76 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                v77 = v76;
                if (v76 >= 0x17)
                {
                  v88 = (v76 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v76 | 7) != 0x17)
                    v88 = v76 | 7;
                  v89 = v88 + 1;
                  p_object = operator new(v88 + 1);
                  *(_QWORD *)&v407 = v77;
                  *((_QWORD *)&v407 + 1) = v89 | 0x8000000000000000;
                  object = p_object;
                }
                else
                {
                  HIBYTE(v407) = v76;
                  p_object = &object;
                  if (!v76)
                  {
LABEL_158:
                    v385 = v73;
                    *((_BYTE *)p_object + v77) = 0;
                    v90 = object;
                    *(_QWORD *)v426 = v407;
                    *(_QWORD *)&v426[7] = *(_QWORD *)((char *)&v407 + 7);
                    v91 = HIBYTE(v407);
                    v92 = operator new(0x38uLL);
                    v93 = (std::__shared_weak_count *)v92;
                    v92[1] = 0;
                    v94 = v92 + 1;
                    v92[3] = off_24C9ABC20;
                    v95 = (char *)(v92 + 3);
                    v92[2] = 0;
                    v92[4] = v90;
                    v96 = (char *)(v92 + 4);
                    *v92 = &off_24C9ABBD0;
                    v92[5] = *(_QWORD *)v426;
                    *(_QWORD *)((char *)v92 + 47) = *(_QWORD *)&v426[7];
                    *((_BYTE *)v92 + 55) = v91;
                    do
                      v97 = __ldxr(v75);
                    while (__stxr(v97 + 1, v75));
                    do
                      v98 = __ldxr(v94);
                    while (__stxr(v98 + 1, v94));
                    do
                      v99 = __ldaxr(v94);
                    while (__stlxr(v99 - 1, v94));
                    if (!v99)
                    {
                      (*(void (**)(_QWORD *))(*v92 + 16))(v92);
                      std::__shared_weak_count::__release_weak(v93);
                    }
                    do
                      v100 = __ldaxr(v75);
                    while (__stlxr(v100 - 1, v75));
                    if (!v100)
                    {
                      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                      std::__shared_weak_count::__release_weak(v74);
                    }
                    if (SHIBYTE(v93[2].__vftable) >= 0)
                      shared_owners = v96;
                    else
                      shared_owners = (char *)v93[1].__shared_owners_;
                    v102 = _os_log_pack_fill();
                    *(_DWORD *)v102 = 136315138;
                    *(_QWORD *)(v102 + 4) = shared_owners;
                    v103 = (_QWORD *)operator new();
                    v104 = *(unsigned __int8 *)(v59 + 39);
                    v105 = v386;
                    if ((v104 & 0x80u) != 0)
                    {
                      v105 = *(const char **)(v59 + 16);
                      v104 = *(_QWORD *)(v59 + 24);
                    }
                    *v103 = v385;
                    v103[1] = v385;
                    v103[2] = v74;
                    v103[3] = v95;
                    v103[4] = v93;
                    v103[5] = v105;
                    v103[6] = v104;
                    *((_BYTE *)v103 + 56) = 2;
                    object = v103;
                    (*(void (**)(_QWORD, void **))(**(_QWORD **)(v391 + 24) + 40))(*(_QWORD *)(v391 + 24), &object);
                    v106 = object;
                    object = 0;
                    v80 = v387;
                    if (v106)
                    {
                      v107 = (std::__shared_weak_count *)*((_QWORD *)v106 + 4);
                      if (v107)
                      {
                        v108 = (unint64_t *)&v107->__shared_owners_;
                        do
                          v109 = __ldaxr(v108);
                        while (__stlxr(v109 - 1, v108));
                        if (!v109)
                        {
                          ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
                          std::__shared_weak_count::__release_weak(v107);
                        }
                      }
                      v110 = (std::__shared_weak_count *)*((_QWORD *)v106 + 2);
                      if (v110)
                      {
                        v111 = (unint64_t *)&v110->__shared_owners_;
                        do
                          v112 = __ldaxr(v111);
                        while (__stlxr(v112 - 1, v111));
                        if (!v112)
                        {
                          ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                          std::__shared_weak_count::__release_weak(v110);
                        }
                      }
                      MEMORY[0x212BC6398](v106, 0x10F0C40B62ED6C6);
                    }
                    goto LABEL_184;
                  }
                }
                memcpy(p_object, v58, v77);
                goto LABEL_158;
              }
            }
            memmove(p_p, v60, v61);
            goto LABEL_124;
          }
        }
        memmove(v65, v63, v64);
        goto LABEL_116;
      }
    }
    memmove(v43, v55, v42);
    goto LABEL_95;
  }
LABEL_55:
  if (v22)
    goto LABEL_265;
  v44 = *(_QWORD *)(v3 + 176);
  if (!v44)
    goto LABEL_265;
  v45 = (uint8x8_t)vcnt_s8((int8x8_t)v44);
  v45.i16[0] = vaddlv_u8(v45);
  if (v45.u32[0] > 1uLL)
  {
    if (v44 <= v10)
      v12 = v10 % v44;
  }
  else
  {
    v12 = ((_DWORD)v44 - 1) & v10;
  }
  v46 = *(uint64_t ***)(*(_QWORD *)(v3 + 168) + 8 * v12);
  if (!v46)
    goto LABEL_265;
  v47 = *v46;
  if (!v47)
    goto LABEL_265;
  if (v45.u32[0] < 2uLL)
  {
    v48 = v44 - 1;
    while (1)
    {
      v52 = v47[1];
      if (v52 == v10)
      {
        if ((void *)v47[2] == v11 && *((_DWORD *)v47 + 6) == (_DWORD)v10)
          goto LABEL_139;
      }
      else if ((v52 & v48) != v12)
      {
        goto LABEL_265;
      }
      v47 = (uint64_t *)*v47;
      if (!v47)
        goto LABEL_265;
    }
  }
  while (1)
  {
    v50 = v47[1];
    if (v50 == v10)
      break;
    if (v50 >= v44)
      v50 %= v44;
    if (v50 != v12)
      goto LABEL_265;
LABEL_69:
    v47 = (uint64_t *)*v47;
    if (!v47)
      goto LABEL_265;
  }
  if ((void *)v47[2] != v11 || *((_DWORD *)v47 + 6) != (_DWORD)v10)
    goto LABEL_69;
LABEL_139:
  if (v17 != v16)
  {
    for (i = v47[6]; i != v47[7]; i += 472)
    {
      v82 = *(_QWORD *)(i + 16);
      v83 = *(_DWORD *)(i + 24);
      v84 = (char *)a1[4];
      v85 = (v17 - v16) >> 4;
      do
      {
        v86 = v85 >> 1;
        v87 = (unint64_t *)&v84[16 * (v85 >> 1)];
        if (*v87 < v82 || *v87 == v82 && *(_DWORD *)&v84[16 * v86 + 8] < v83)
        {
          v84 = (char *)(v87 + 2);
          v86 = v85 + ~v86;
        }
        v85 = v86;
      }
      while (v86);
      if (v84 != v17 && *(_QWORD *)v84 == v82 && *((_DWORD *)v84 + 2) == v83)
        return;
    }
    v160 = v47[9];
    v161 = v47[10];
    while (v160 != v161)
    {
      v162 = *(_QWORD *)(v160 + 16);
      v163 = *(_DWORD *)(v160 + 24);
      v164 = (char *)a1[4];
      v165 = (v17 - v16) >> 4;
      do
      {
        v166 = v165 >> 1;
        v167 = (unint64_t *)&v164[16 * (v165 >> 1)];
        if (*v167 < v162 || *v167 == v162 && *(_DWORD *)&v164[16 * v166 + 8] < v163)
        {
          v164 = (char *)(v167 + 2);
          v166 = v165 + ~v166;
        }
        v165 = v166;
      }
      while (v166);
      if (v164 != v17 && *(_QWORD *)v164 == v162 && *((_DWORD *)v164 + 2) == v163)
        return;
      v160 += 472;
    }
  }
LABEL_265:
  v168 = *(_QWORD *)(v3 + 40);
  v169 = *(_QWORD *)(v3 + 48);
  if (v169 != v168)
  {
    v170 = 0xCCCCCCCCCCCCCCCDLL * ((v169 - v168) >> 3);
    do
    {
      v171 = v170 >> 1;
      v172 = v168 + 40 * (v170 >> 1);
      if (*(_QWORD *)v172 < (unint64_t)v11 || *(void **)v172 == v11 && *(_DWORD *)(v172 + 8) < v10)
      {
        v168 = v172 + 40;
        v171 = v170 + ~v171;
      }
      v170 = v171;
    }
    while (v171);
  }
  if (v168 == v169 || *(void **)v168 != v11 || *(_DWORD *)(v168 + 8) != (_DWORD)v10)
  {
LABEL_299:
    if (!v23 && *((_BYTE *)a1 + 224) && *a2 == (void *)a1[26] && *((_DWORD *)a2 + 2) == *((_DWORD *)a1 + 54))
    {
      sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MapDataController.cpp", 3197, (uint64_t)"!this->latest_vfusion_kf_state_id_ || state_id != this->latest_vfusion_kf_state_id_.value()", 91, (uint64_t)"Cannot delete the latest keyframe created by the VFusion front-end", 66, (void (*)(void **))sub_21023DDB0);
      v193 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
      if ((v193 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
      {
        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DE78);
      }
      if (!byte_254A6DE68 || byte_254A6DE70)
      {
        v194 = qword_254A6DE40;
        for (j = qword_254A6DE48; v194 != j; v194 += 16)
          (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v194)(*(_QWORD *)(v194 + 8), "!this->latest_vfusion_kf_state_id_ || state_id != this->latest_vfusion_kf_state_id_.value()", 91, "Cannot delete the latest keyframe created by the VFusion front-end", 66);
      }
      v196 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
      if ((v196 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
      {
        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DE78);
      }
      if (!byte_254A6DE68)
        abort();
      qword_254A6DE58(unk_254A6DE60, "!this->latest_vfusion_kf_state_id_ || state_id != this->latest_vfusion_kf_state_id_.value()", 91, "Cannot delete the latest keyframe created by the VFusion front-end", 66);
    }
    sub_20F23A0A0(**(_QWORD ***)(a1[2] + 424), (__int128 *)a2, (char **)v414);
    v190 = sub_20F26F650(*(uint64_t **)(a1[2] + 424), *a2, a2[1], 1u);
    if ((v190 & 1) == 0)
      goto LABEL_514;
    v192 = a1[4];
    v191 = a1[5];
    if (v192 != v191)
    {
      while (*(void **)v192 != *a2 || *(_DWORD *)(v192 + 8) != *((_DWORD *)a2 + 2))
      {
        v192 += 16;
        if (v192 == v191)
        {
          v192 = a1[5];
          break;
        }
      }
    }
    if (v192 != v191)
    {
      v197 = v191 - (v192 + 16);
      if (v191 != v192 + 16)
        memmove((void *)v192, (const void *)(v192 + 16), v197 - 4);
      a1[5] = v192 + v197;
      v198 = *(uint64_t **)v414;
      for (k = *(uint64_t **)&v414[8]; v198 != k; v198 += 3)
      {
        v202 = *((_DWORD *)v198 + 4);
        v203 = *((_DWORD *)v198 + 2);
        v204 = v203 ^ __ROR4__(v202, 13);
        v205 = (int8x8_t)a1[14];
        if (v205)
        {
          v206 = (uint8x8_t)vcnt_s8(v205);
          v206.i16[0] = vaddlv_u8(v206);
          if (v206.u32[0] > 1uLL)
          {
            v207 = v204;
            if (*(_QWORD *)&v205 <= v204)
              v207 = v204 % *(_QWORD *)&v205;
          }
          else
          {
            v207 = (v205.i32[0] - 1) & v204;
          }
          v208 = *(uint64_t ***)(a1[13] + 8 * v207);
          if (v208)
          {
            v209 = *v208;
            if (*v208)
            {
              v210 = *(_QWORD *)&v205 - 1;
              v211 = *v198;
              if (v206.u32[0] < 2uLL)
              {
                while (1)
                {
                  v212 = v209[1];
                  if (v212 == v204)
                  {
                    if (*((_DWORD *)v209 + 8) == v202 && v209[2] == v211 && *((_DWORD *)v209 + 6) == v203)
                      goto LABEL_347;
                  }
                  else if ((v212 & v210) != v207)
                  {
                    goto LABEL_383;
                  }
                  v209 = (uint64_t *)*v209;
                  if (!v209)
                    goto LABEL_383;
                }
              }
              do
              {
                v214 = v209[1];
                if (v214 == v204)
                {
                  if (*((_DWORD *)v209 + 8) == v202 && v209[2] == v211 && *((_DWORD *)v209 + 6) == v203)
                  {
LABEL_347:
                    v213 = v209[1];
                    if (v206.u32[0] > 1uLL)
                    {
                      if (v213 >= *(_QWORD *)&v205)
                        v213 %= *(_QWORD *)&v205;
                    }
                    else
                    {
                      v213 &= v210;
                    }
                    v215 = a1[13];
                    v216 = *(uint64_t **)(v215 + 8 * v213);
                    do
                    {
                      v217 = v216;
                      v216 = (uint64_t *)*v216;
                    }
                    while (v216 != v209);
                    if (v217 == a1 + 15)
                      goto LABEL_373;
                    v218 = v217[1];
                    if (v206.u32[0] > 1uLL)
                    {
                      if (v218 >= *(_QWORD *)&v205)
                        v218 %= *(_QWORD *)&v205;
                    }
                    else
                    {
                      v218 &= v210;
                    }
                    if (v218 != v213)
                    {
LABEL_373:
                      if (!*v209)
                        goto LABEL_374;
                      v219 = *(_QWORD *)(*v209 + 8);
                      if (v206.u32[0] > 1uLL)
                      {
                        if (v219 >= *(_QWORD *)&v205)
                          v219 %= *(_QWORD *)&v205;
                      }
                      else
                      {
                        v219 &= v210;
                      }
                      if (v219 != v213)
LABEL_374:
                        *(_QWORD *)(v215 + 8 * v213) = 0;
                    }
                    v220 = (uint64_t *)*v209;
                    if (*v209)
                    {
                      v221 = v220[1];
                      if (v206.u32[0] > 1uLL)
                      {
                        if (v221 >= *(_QWORD *)&v205)
                          v221 %= *(_QWORD *)&v205;
                      }
                      else
                      {
                        v221 &= v210;
                      }
                      if (v221 != v213)
                      {
                        *(_QWORD *)(a1[13] + 8 * v221) = v217;
                        v220 = (uint64_t *)*v209;
                      }
                    }
                    *v217 = (uint64_t)v220;
                    *v209 = 0;
                    --a1[16];
                    operator delete(v209);
                    v202 = *((_DWORD *)v198 + 4);
                    v203 = *((_DWORD *)v198 + 2);
                    v204 = v203 ^ __ROR4__(v202, 13);
                    break;
                  }
                }
                else
                {
                  if (v214 >= *(_QWORD *)&v205)
                    v214 %= *(_QWORD *)&v205;
                  if (v214 != v207)
                    break;
                }
                v209 = (uint64_t *)*v209;
              }
              while (v209);
            }
          }
        }
LABEL_383:
        v222 = (int8x8_t)a1[19];
        if (v222)
        {
          v223 = (uint8x8_t)vcnt_s8(v222);
          v223.i16[0] = vaddlv_u8(v223);
          if (v223.u32[0] > 1uLL)
          {
            v224 = v204;
            if (*(_QWORD *)&v222 <= v204)
              v224 = v204 % *(_QWORD *)&v222;
          }
          else
          {
            v224 = (v222.i32[0] - 1) & v204;
          }
          v225 = *(uint64_t ***)(a1[18] + 8 * v224);
          if (v225)
          {
            v226 = *v225;
            if (*v225)
            {
              v227 = *(_QWORD *)&v222 - 1;
              v228 = *v198;
              if (v223.u32[0] < 2uLL)
              {
                while (1)
                {
                  v229 = v226[1];
                  if (v229 == v204)
                  {
                    if (*((_DWORD *)v226 + 8) == v202 && v226[2] == v228 && *((_DWORD *)v226 + 6) == v203)
                      goto LABEL_398;
                  }
                  else if ((v229 & v227) != v224)
                  {
                    goto LABEL_331;
                  }
                  v226 = (uint64_t *)*v226;
                  if (!v226)
                    goto LABEL_331;
                }
              }
              do
              {
                v231 = v226[1];
                if (v231 == v204)
                {
                  if (*((_DWORD *)v226 + 8) == v202 && v226[2] == v228 && *((_DWORD *)v226 + 6) == v203)
                  {
LABEL_398:
                    v230 = v226[1];
                    if (v223.u32[0] > 1uLL)
                    {
                      if (v230 >= *(_QWORD *)&v222)
                        v230 %= *(_QWORD *)&v222;
                    }
                    else
                    {
                      v230 &= v227;
                    }
                    v232 = a1[18];
                    v233 = *(uint64_t **)(v232 + 8 * v230);
                    do
                    {
                      v234 = v233;
                      v233 = (uint64_t *)*v233;
                    }
                    while (v233 != v226);
                    if (v234 == a1 + 20)
                      goto LABEL_424;
                    v235 = v234[1];
                    if (v223.u32[0] > 1uLL)
                    {
                      if (v235 >= *(_QWORD *)&v222)
                        v235 %= *(_QWORD *)&v222;
                    }
                    else
                    {
                      v235 &= v227;
                    }
                    if (v235 != v230)
                    {
LABEL_424:
                      if (!*v226)
                        goto LABEL_425;
                      v236 = *(_QWORD *)(*v226 + 8);
                      if (v223.u32[0] > 1uLL)
                      {
                        if (v236 >= *(_QWORD *)&v222)
                          v236 %= *(_QWORD *)&v222;
                      }
                      else
                      {
                        v236 &= v227;
                      }
                      if (v236 != v230)
LABEL_425:
                        *(_QWORD *)(v232 + 8 * v230) = 0;
                    }
                    v237 = (uint64_t *)*v226;
                    if (*v226)
                    {
                      v238 = v237[1];
                      if (v223.u32[0] > 1uLL)
                      {
                        if (v238 >= *(_QWORD *)&v222)
                          v238 %= *(_QWORD *)&v222;
                      }
                      else
                      {
                        v238 &= v227;
                      }
                      if (v238 != v230)
                      {
                        *(_QWORD *)(a1[18] + 8 * v238) = v234;
                        v237 = (uint64_t *)*v226;
                      }
                    }
                    *v234 = (uint64_t)v237;
                    *v226 = 0;
                    --a1[21];
                    operator delete(v226);
                    break;
                  }
                }
                else
                {
                  if (v231 >= *(_QWORD *)&v222)
                    v231 %= *(_QWORD *)&v222;
                  if (v231 != v224)
                    break;
                }
                v226 = (uint64_t *)*v226;
              }
              while (v226);
            }
          }
        }
LABEL_331:
        ;
      }
LABEL_513:
      (*(void (**)(_QWORD, void **))(*(_QWORD *)a1[25] + 88))(a1[25], a2);
LABEL_514:
      if (*(_QWORD *)v414)
      {
        *(_QWORD *)&v414[8] = *(_QWORD *)v414;
        operator delete(*(void **)v414);
      }
      if (!v190)
        return;
      v288 = atomic_load((unsigned __int8 *)&qword_254A687F8);
      if ((v288 & 1) == 0 && __cxa_guard_acquire(&qword_254A687F8))
      {
        v383 = atomic_load((unsigned __int8 *)&qword_254A6DDE0);
        if ((v383 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDE0))
        {
          sub_20E8BFCE4(&qword_254A6DDD8);
          __cxa_guard_release(&qword_254A6DDE0);
        }
        *(_QWORD *)v426 = qword_254A6DDD8;
        v414[23] = 21;
        strcpy(v414, "cv3d.vio.area_mapping");
        sub_20E8C4068((uint64_t **)v426, (uint64_t)v414, &qword_254A687F0);
        if ((v414[23] & 0x80000000) != 0)
          operator delete(*(void **)v414);
        __cxa_guard_release(&qword_254A687F8);
      }
      v395 = (uint64_t *)qword_254A687F0;
      if (**(int **)(qword_254A687F0 + 56) > 3
        || (v289 = *(unsigned __int8 *)(qword_254A687F0 + 72),
            v290 = sub_20E8C31DC(qword_254A687F0, "OSLogSurrogateAppender", 1, 0),
            v291 = v290,
            !v289)
        && !v290)
      {
LABEL_637:
        if (!v22)
        {
          v374 = (char *)a1[7];
          v375 = (char *)a1[8];
          if (v375 != v374)
          {
            v376 = (v375 - v374) >> 4;
            v377 = *a2;
            do
            {
              v378 = v376 >> 1;
              v379 = (void **)&v374[16 * (v376 >> 1)];
              if (*v379 < v377 || *v379 == v377 && *(_DWORD *)&v374[16 * v378 + 8] < *((_DWORD *)a2 + 2))
              {
                v374 = (char *)(v379 + 2);
                v378 = v376 + ~v378;
              }
              v376 = v378;
            }
            while (v378);
          }
          if (v374 == v375 || *(void **)v374 != *a2 || *((_DWORD *)v374 + 2) != *((_DWORD *)a2 + 2))
          {
            v380 = a1[42];
            if (v380)
            {
              v381 = a1[2];
              v382 = *(_QWORD *)(v381 + 424);
              if (v382)
              {
                if (*(_QWORD *)(*(_QWORD *)v382 + 64))
                {
                  *(_QWORD *)v414 = *(_QWORD *)(v381 + 160);
                  v426[0] = 1;
                  (*(void (**)(uint64_t, _BYTE *, _BYTE *))(*(_QWORD *)v380 + 48))(v380, v414, v426);
                }
              }
            }
          }
        }
        return;
      }
      object = &v395;
      *(std::chrono::steady_clock::time_point *)&v407 = std::chrono::steady_clock::now();
      *((std::chrono::system_clock::time_point *)&v407 + 1) = std::chrono::system_clock::now();
      LODWORD(v408) = 3;
      v409 = "unknown file";
      LODWORD(__p) = 3183;
      v412 = 0;
      v413 = 0;
      v411 = "unknown function";
      v292 = *(_QWORD *)object;
      v389 = *(_QWORD *)object;
      if (*(char *)(*(_QWORD *)object + 39) < 0)
      {
        v294 = *(const char **)(v292 + 16);
        v293 = *(_QWORD *)(v292 + 24);
      }
      else
      {
        v293 = *(unsigned __int8 *)(*(_QWORD *)object + 39);
        v294 = (const char *)(*(_QWORD *)object + 16);
      }
      v388 = *(_QWORD *)object + 16;
      v392 = v22;
      v295 = *((_DWORD *)a2 + 2);
      v296 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v296 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)v414);
        if ((_BYTE)v415)
        {
          *(_OWORD *)byte_254A4A4F8 = *(_OWORD *)v414;
          *(_QWORD *)&byte_254A4A4F8[16] = *(_QWORD *)&v414[16];
        }
        else
        {
          byte_254A4A4F8[23] = 14;
          strcpy(byte_254A4A4F8, "com.apple.cv3d");
        }
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v297 = byte_254A4A4F8[23];
      else
        v297 = *(_QWORD *)&byte_254A4A4F8[8];
      if (byte_254A4A4F8[23] >= 0)
        v298 = byte_254A4A4F8;
      else
        v298 = *(const char **)byte_254A4A4F8;
      __src = v294;
      *(_QWORD *)v426 = os_log_create(v298, v294);
      v299 = &v426[8];
      if (v297 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v297 >= 0x17)
      {
        v300 = v291;
        v301 = v295;
        v302 = v289;
        v303 = (v297 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v297 | 7) != 0x17)
          v303 = v297 | 7;
        v304 = v303 + 1;
        v299 = operator new(v303 + 1);
        *(_QWORD *)&v426[16] = v297;
        v427 = v304 | 0x8000000000000000;
        *(_QWORD *)&v426[8] = v299;
        v289 = v302;
        v295 = v301;
        v291 = v300;
      }
      else
      {
        HIBYTE(v427) = v297;
        if (!v297)
        {
LABEL_539:
          v299[v297] = 0;
          LOBYTE(v428) = 1;
          v305 = (void **)&v429;
          if (v293 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          v22 = v392;
          if (v293 >= 0x17)
          {
            v306 = (v293 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v293 | 7) != 0x17)
              v306 = v293 | 7;
            v307 = v306 + 1;
            v305 = (void **)operator new(v306 + 1);
            v430 = v293;
            v431 = v307 | 0x8000000000000000;
            v429 = v305;
          }
          else
          {
            HIBYTE(v431) = v293;
            if (!v293)
            {
LABEL_547:
              *((_BYTE *)v305 + v293) = 0;
              LOBYTE(v432) = 1;
              v308 = *(NSObject **)v426;
              if (SHIBYTE(v431) < 0)
                operator delete(v429);
              if ((_BYTE)v428 && SHIBYTE(v427) < 0)
                operator delete(*(void **)&v426[8]);
              if (*(_QWORD *)v426)
                os_release(*(void **)v426);
              if (v291 && *(_QWORD *)(v291 + 24))
              {
                v309 = v295;
                v310 = _os_log_pack_size();
                v311 = (std::__shared_weak_count_vtbl *)operator new(v310, (std::align_val_t)8uLL);
                v312 = (std::__shared_weak_count *)operator new();
                v313 = v312;
                v312->__shared_owners_ = 0;
                v314 = (unint64_t *)&v312->__shared_owners_;
                v312->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v312->__shared_weak_owners_ = 0;
                v312[1].__vftable = v311;
                do
                  v315 = __ldxr(v314);
                while (__stxr(v315 + 1, v314));
                do
                  v316 = __ldaxr(v314);
                while (__stlxr(v316 - 1, v314));
                if (!v316)
                {
                  ((void (*)(std::__shared_weak_count *))v312->__on_zero_shared)(v312);
                  std::__shared_weak_count::__release_weak(v313);
                }
                v317 = (_DWORD *)_os_log_pack_fill();
                *v317 = 67109120;
                v317[1] = v309;
                v318 = operator new();
                v319 = *(unsigned __int8 *)(v389 + 39);
                v320 = v388;
                if ((v319 & 0x80u) != 0)
                {
                  v320 = *(_QWORD *)(v389 + 16);
                  v319 = *(_QWORD *)(v389 + 24);
                }
                *(_QWORD *)v318 = v311;
                *(_QWORD *)(v318 + 8) = v311;
                *(_QWORD *)(v318 + 16) = v313;
                *(_QWORD *)(v318 + 24) = 0;
                *(_QWORD *)(v318 + 32) = 0;
                *(_QWORD *)(v318 + 40) = v320;
                *(_QWORD *)(v318 + 48) = v319;
                *(_BYTE *)(v318 + 56) = 1;
                *(_QWORD *)v426 = v318;
                (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v291 + 24) + 40))(*(_QWORD *)(v291 + 24), v426);
                v321 = *(_QWORD *)v426;
                *(_QWORD *)v426 = 0;
                if (v321)
                {
                  v322 = *(std::__shared_weak_count **)(v321 + 32);
                  if (v322)
                  {
                    v323 = (unint64_t *)&v322->__shared_owners_;
                    do
                      v324 = __ldaxr(v323);
                    while (__stlxr(v324 - 1, v323));
                    if (!v324)
                    {
                      ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
                      std::__shared_weak_count::__release_weak(v322);
                    }
                  }
                  v325 = *(std::__shared_weak_count **)(v321 + 16);
                  if (v325)
                  {
                    v326 = (unint64_t *)&v325->__shared_owners_;
                    do
                      v327 = __ldaxr(v326);
                    while (__stlxr(v327 - 1, v326));
                    if (!v327)
                    {
                      ((void (*)(std::__shared_weak_count *))v325->__on_zero_shared)(v325);
                      std::__shared_weak_count::__release_weak(v325);
                    }
                  }
                  MEMORY[0x212BC6398](v321, 0x10F0C40B62ED6C6);
                }
              }
              else
              {
                os_log_type_enabled(v308, OS_LOG_TYPE_INFO);
                *(_DWORD *)v414 = 67109120;
                *(_DWORD *)&v414[4] = v295;
                v328 = (void *)_os_log_send_and_compose_impl();
                if (v328)
                  free(v328);
              }
              if (v289)
              {
                sub_20E8C003C((uint64_t)&object, "Removed a state (view:%d) in RemoveStateAndReanchor", *((_DWORD *)a2 + 2));
                v329 = (uint64_t *)object;
                if (!object || (v330 = v412) == 0)
                {
LABEL_632:
                  v371 = v413;
                  if (v413)
                  {
                    v372 = (unint64_t *)&v413->__shared_owners_;
                    do
                      v373 = __ldaxr(v372);
                    while (__stlxr(v373 - 1, v372));
                    if (!v373)
                    {
                      ((void (*)(std::__shared_weak_count *))v371->__on_zero_shared)(v371);
                      std::__shared_weak_count::__release_weak(v371);
                    }
                  }
                  goto LABEL_637;
                }
                v331 = (_QWORD *)(*(_QWORD *)object + 16);
                if (*(char *)(*(_QWORD *)object + 39) < 0)
                  v331 = (_QWORD *)*v331;
                v332 = v407;
                v333 = v408;
                v334 = v409;
                v335 = (int)__p;
                v336 = v411;
                v337 = v413;
                if (v413)
                {
                  v338 = (unint64_t *)&v413->__shared_owners_;
                  do
                    v339 = __ldxr(v338);
                  while (__stxr(v339 + 1, v338));
                }
                *(_QWORD *)v414 = v331;
                *(_OWORD *)&v414[8] = v332;
                LODWORD(v415) = v333;
                v416 = v334;
                v417 = v335;
                v418 = v336;
                v419 = v330;
                v420 = v337;
                if (v337)
                {
                  v340 = (unint64_t *)&v337->__shared_owners_;
                  do
                    v341 = __ldxr(v340);
                  while (__stxr(v341 + 1, v340));
                }
                v342 = v337;
                if (v333 >= **(_DWORD **)(*v329 + 56))
                {
                  sub_20E8C3FC4(*v329, (uint64_t)v414);
                  v342 = v420;
                }
                if (v342)
                {
                  v343 = (unint64_t *)&v342->__shared_owners_;
                  do
                    v344 = __ldaxr(v343);
                  while (__stlxr(v344 - 1, v343));
                  if (!v344)
                  {
                    ((void (*)(std::__shared_weak_count *))v342->__on_zero_shared)(v342);
                    std::__shared_weak_count::__release_weak(v342);
                  }
                }
                if (v337)
                {
                  v345 = (unint64_t *)&v337->__shared_owners_;
                  do
                    v346 = __ldaxr(v345);
                  while (__stlxr(v346 - 1, v345));
                  if (!v346)
                  {
                    ((void (*)(std::__shared_weak_count *))v337->__on_zero_shared)(v337);
                    std::__shared_weak_count::__release_weak(v337);
                  }
                }
                v347 = v413;
                v412 = 0;
                v413 = 0;
                if (v347)
                {
                  v348 = (unint64_t *)&v347->__shared_owners_;
                  do
                    v349 = __ldaxr(v348);
                  while (__stlxr(v349 - 1, v348));
                  if (!v349)
                  {
                    ((void (*)(std::__shared_weak_count *))v347->__on_zero_shared)(v347);
                    std::__shared_weak_count::__release_weak(v347);
                  }
                }
              }
              v350 = (uint64_t *)object;
              if (object)
              {
                v351 = v412;
                if (v412)
                {
                  v352 = (_QWORD *)(*(_QWORD *)object + 16);
                  if (*(char *)(*(_QWORD *)object + 39) < 0)
                    v352 = (_QWORD *)*v352;
                  v353 = v407;
                  v354 = v408;
                  v355 = v409;
                  v356 = (int)__p;
                  v357 = v411;
                  v358 = v413;
                  if (v413)
                  {
                    v359 = (unint64_t *)&v413->__shared_owners_;
                    do
                      v360 = __ldxr(v359);
                    while (__stxr(v360 + 1, v359));
                  }
                  *(_QWORD *)v414 = v352;
                  *(_OWORD *)&v414[8] = v353;
                  LODWORD(v415) = v354;
                  v416 = v355;
                  v417 = v356;
                  v418 = v357;
                  v419 = v351;
                  v420 = v358;
                  if (v358)
                  {
                    v361 = (unint64_t *)&v358->__shared_owners_;
                    do
                      v362 = __ldxr(v361);
                    while (__stxr(v362 + 1, v361));
                  }
                  v363 = v358;
                  if (v354 >= **(_DWORD **)(*v350 + 56))
                  {
                    sub_20E8C3FC4(*v350, (uint64_t)v414);
                    v363 = v420;
                  }
                  if (v363)
                  {
                    v364 = (unint64_t *)&v363->__shared_owners_;
                    do
                      v365 = __ldaxr(v364);
                    while (__stlxr(v365 - 1, v364));
                    if (!v365)
                    {
                      ((void (*)(std::__shared_weak_count *))v363->__on_zero_shared)(v363);
                      std::__shared_weak_count::__release_weak(v363);
                    }
                  }
                  if (v358)
                  {
                    v366 = (unint64_t *)&v358->__shared_owners_;
                    do
                      v367 = __ldaxr(v366);
                    while (__stlxr(v367 - 1, v366));
                    if (!v367)
                    {
                      ((void (*)(std::__shared_weak_count *))v358->__on_zero_shared)(v358);
                      std::__shared_weak_count::__release_weak(v358);
                    }
                  }
                  v368 = v413;
                  v412 = 0;
                  v413 = 0;
                  if (v368)
                  {
                    v369 = (unint64_t *)&v368->__shared_owners_;
                    do
                      v370 = __ldaxr(v369);
                    while (__stlxr(v370 - 1, v369));
                    if (!v370)
                    {
                      ((void (*)(std::__shared_weak_count *))v368->__on_zero_shared)(v368);
                      std::__shared_weak_count::__release_weak(v368);
                    }
                  }
                }
              }
              goto LABEL_632;
            }
          }
          memmove(v305, __src, v293);
          goto LABEL_547;
        }
      }
      memmove(v299, v298, v297);
      goto LABEL_539;
    }
    v201 = a1[7];
    v200 = a1[8];
    if (v201 != v200)
    {
      do
      {
        if (*(void **)v201 == *a2 && *(_DWORD *)(v201 + 8) == *((_DWORD *)a2 + 2))
          goto LABEL_434;
        v201 += 16;
      }
      while (v201 != v200);
      v201 = a1[8];
    }
LABEL_434:
    if (v201 != v200)
    {
      v239 = v200 - (v201 + 16);
      if (v200 != v201 + 16)
        memmove((void *)v201, (const void *)(v201 + 16), v239 - 4);
      a1[8] = v201 + v239;
    }
    v240 = *(uint64_t **)v414;
    v241 = *(uint64_t **)&v414[8];
LABEL_441:
    if (v240 == v241)
      goto LABEL_513;
    v242 = a1[23];
    v243 = *(_QWORD *)(*(_QWORD *)(v242 + 1056) + 8);
    if (v243)
    {
      v244 = *(_QWORD *)(v243 + 408);
      v245 = *(_QWORD *)(v243 + 416);
      if (v244 != v245)
      {
        v246 = 0;
        while (1)
        {
          if (*(_DWORD *)(v244 + v246 + 528) == *((_DWORD *)v240 + 4) && *(_QWORD *)(v244 + v246 + 512) == *v240)
          {
            v247 = v244 + v246;
            if (*(_DWORD *)(v244 + v246 + 520) == *((_DWORD *)v240 + 2))
              break;
          }
          v246 += 536;
          if (v244 + v246 == v245)
            goto LABEL_453;
        }
        if (v247 + 536 != v245)
        {
          do
          {
            v248 = v247 + 536;
            memcpy((void *)v247, (const void *)(v247 + 536), 0x214uLL);
            v249 = v247 + 1072;
            v247 += 536;
          }
          while (v249 != v245);
          v247 = v248;
        }
        *(_QWORD *)(v243 + 416) = v247;
        v242 = a1[23];
      }
    }
LABEL_453:
    v250 = *(_QWORD *)(*(_QWORD *)(v242 + 1072) + 8);
    if (v250)
    {
      v251 = *(_QWORD *)(v250 + 408);
      v252 = *(_QWORD *)(v250 + 416);
      if (v251 != v252)
      {
        v253 = 0;
        while (1)
        {
          if (*(_DWORD *)(v251 + v253 + 528) == *((_DWORD *)v240 + 4) && *(_QWORD *)(v251 + v253 + 512) == *v240)
          {
            v254 = v251 + v253;
            if (*(_DWORD *)(v251 + v253 + 520) == *((_DWORD *)v240 + 2))
              break;
          }
          v253 += 536;
          if (v251 + v253 == v252)
            goto LABEL_464;
        }
        if (v254 + 536 != v252)
        {
          do
          {
            v255 = v254 + 536;
            memcpy((void *)v254, (const void *)(v254 + 536), 0x214uLL);
            v256 = v254 + 1072;
            v254 += 536;
          }
          while (v256 != v252);
          v254 = v255;
        }
        *(_QWORD *)(v250 + 416) = v254;
      }
    }
LABEL_464:
    v257 = (_QWORD *)a1[2];
    v258 = (uint64_t *)v257[30];
    if (!v258)
      goto LABEL_489;
    v259 = *((_DWORD *)v240 + 4);
    v260 = *v240;
    v261 = v257 + 30;
    v262 = (uint64_t *)v257[30];
    v263 = *((_DWORD *)v240 + 2);
    while (1)
    {
      v264 = *((_DWORD *)v262 + 12);
      v265 = v264 >= v259;
      if (v264 != v259)
        goto LABEL_471;
      v266 = v262[4];
      if (v266 < v260)
      {
LABEL_466:
        v262 = (uint64_t *)v262[1];
        if (!v262)
          goto LABEL_474;
      }
      else
      {
        if (v266 != v260)
          goto LABEL_473;
        v265 = *((_DWORD *)v262 + 10) >= v263;
LABEL_471:
        if (!v265)
          goto LABEL_466;
LABEL_473:
        v261 = v262;
        v262 = (uint64_t *)*v262;
        if (!v262)
        {
LABEL_474:
          if (v261 != v257 + 30)
          {
            v267 = *((_DWORD *)v261 + 12);
            v268 = v259 >= v267;
            if (v259 != v267)
              goto LABEL_479;
            v269 = v261[4];
            if (v260 >= v269)
            {
              if (v260 != v269)
                goto LABEL_481;
              v268 = v263 >= *((_DWORD *)v261 + 10);
LABEL_479:
              if (v268)
              {
LABEL_481:
                v270 = (_QWORD *)v261[1];
                v271 = v261;
                if (v270)
                {
                  do
                  {
                    v272 = v270;
                    v270 = (_QWORD *)*v270;
                  }
                  while (v270);
                }
                else
                {
                  do
                  {
                    v272 = (_QWORD *)v271[2];
                    v29 = *v272 == (_QWORD)v271;
                    v271 = v272;
                  }
                  while (!v29);
                }
                if ((_QWORD *)v257[29] == v261)
                  v257[29] = v272;
                --v257[31];
                sub_20E8D2134(v258, v261);
                operator delete(v261);
                v257 = (_QWORD *)a1[2];
              }
            }
          }
LABEL_489:
          v273 = (uint64_t *)v257[38];
          if (!v273)
            goto LABEL_440;
          v274 = *((_DWORD *)v240 + 4);
          v275 = *v240;
          v276 = *((_DWORD *)v240 + 2);
          v277 = v257 + 38;
          v278 = (uint64_t *)v257[38];
          while (2)
          {
            while (2)
            {
              v279 = *((_DWORD *)v278 + 12);
              v280 = v279 >= v274;
              if (v279 == v274)
              {
                v281 = v278[4];
                if (v281 >= v275)
                {
                  if (v281 != v275)
                    goto LABEL_498;
                  v280 = *((_DWORD *)v278 + 10) >= v276;
                  break;
                }
LABEL_491:
                v278 = (uint64_t *)v278[1];
                if (!v278)
                  goto LABEL_499;
                continue;
              }
              break;
            }
            if (!v280)
              goto LABEL_491;
LABEL_498:
            v277 = v278;
            v278 = (uint64_t *)*v278;
            if (v278)
              continue;
            break;
          }
LABEL_499:
          if (v277 != v257 + 38)
          {
            v282 = *((_DWORD *)v277 + 12);
            v283 = v274 >= v282;
            if (v274 != v282)
              goto LABEL_504;
            v284 = v277[4];
            if (v275 >= v284)
            {
              if (v275 != v284)
                goto LABEL_506;
              v283 = v276 >= *((_DWORD *)v277 + 10);
LABEL_504:
              if (v283)
              {
LABEL_506:
                v285 = (_QWORD *)v277[1];
                v286 = v277;
                if (v285)
                {
                  do
                  {
                    v287 = v285;
                    v285 = (_QWORD *)*v285;
                  }
                  while (v285);
                }
                else
                {
                  do
                  {
                    v287 = (_QWORD *)v286[2];
                    v29 = *v287 == (_QWORD)v286;
                    v286 = v287;
                  }
                  while (!v29);
                }
                if ((_QWORD *)v257[37] == v277)
                  v257[37] = v287;
                --v257[39];
                sub_20E8D2134(v273, v277);
                operator delete(v277);
              }
            }
          }
LABEL_440:
          v240 += 3;
          goto LABEL_441;
        }
      }
    }
  }
  if ((a3 & 1) == 0)
  {
    sub_20F7CB968((_QWORD *)(v3 + 168), (uint64_t)a2, a1 + 4, (uint64_t)v414);
    memset(v426, 0, sizeof(v426));
    v174 = (_BYTE *)a1[4];
    v173 = (_BYTE *)a1[5];
    v175 = v173 - v174;
    if (v173 == v174)
    {
      v176 = 0;
      v177 = 0;
    }
    else
    {
      if (v175 < 0)
        sub_20E867F44();
      v176 = (char *)operator new(v173 - v174);
      *(_QWORD *)v426 = v176;
      *(_QWORD *)&v426[8] = v176;
      v177 = &v176[16 * (v175 >> 4)];
      *(_QWORD *)&v426[16] = v177;
      memcpy(v176, v174, v175 - 4);
      *(_QWORD *)&v426[8] = v177;
    }
    v178 = v177 - v176;
    v179 = (v177 - v176) >> 4;
    v180 = v179 + 1;
    if ((unint64_t)(v179 + 1) >> 60)
      sub_20E867F44();
    if (v178 >> 3 > v180)
      v180 = v178 >> 3;
    if ((unint64_t)v178 >= 0x7FFFFFFFFFFFFFF0)
      v181 = 0xFFFFFFFFFFFFFFFLL;
    else
      v181 = v180;
    if (v181)
    {
      if (v181 >> 60)
        sub_20E877A38();
      v182 = (char *)operator new(16 * v181);
    }
    else
    {
      v182 = 0;
    }
    v183 = &v182[16 * v179];
    *(_OWORD *)v183 = *(_OWORD *)a2;
    v184 = v183 + 16;
    if (v177 != v176)
    {
      do
      {
        v185 = *((_QWORD *)v177 - 2);
        v177 -= 16;
        *((_QWORD *)v183 - 2) = v185;
        v183 -= 16;
        *((_DWORD *)v183 + 2) = *((_DWORD *)v177 + 2);
      }
      while (v177 != v176);
      v176 = *(char **)v426;
    }
    *(_QWORD *)v426 = v183;
    *(_QWORD *)&v426[8] = v184;
    *(_QWORD *)&v426[16] = &v182[16 * v181];
    if (v176)
      operator delete(v176);
    *(_QWORD *)&v426[8] = v184;
    v186 = a1[2];
    v187 = *a2;
    v188 = a2[1];
    v189 = **(_QWORD ***)(v186 + 424);
    v393 = *(_OWORD *)v414;
    v394 = *(_QWORD *)&v414[16];
    sub_20FCC987C((_QWORD *)v186, (unint64_t)v187, v188, v189, (uint64_t *)v426, (uint64_t)&v393);
    if (*(_QWORD *)v426)
    {
      *(_QWORD *)&v426[8] = *(_QWORD *)v426;
      operator delete(*(void **)v426);
    }
    v23 = *(unsigned __int8 *)(*a1 + 2499);
    goto LABEL_299;
  }
}

void sub_20F252F58(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A6DDE0);
  __cxa_guard_abort(&qword_254A687F8);
  _Unwind_Resume(a1);
}

void sub_20F252F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t *a23,__int128 a24,int a25,uint64_t a26,int a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *object,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  uint64_t v63;
  uint64_t v64;
  _QWORD *v66;
  unint64_t *p_shared_owners;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;

  __cxa_guard_abort(&qword_254A4A510);
  if (a23 && a29)
  {
    v66 = (_QWORD *)(*a23 + 16);
    if (*(char *)(*a23 + 39) < 0)
      v66 = (_QWORD *)*v66;
    if (a30)
    {
      p_shared_owners = (unint64_t *)&a30->__shared_owners_;
      do
        v68 = __ldxr(p_shared_owners);
      while (__stxr(v68 + 1, p_shared_owners));
    }
    *(_QWORD *)(v64 - 176) = v66;
    *(_OWORD *)(v63 + 8) = a24;
    *(_DWORD *)(v64 - 152) = a25;
    *(_QWORD *)(v64 - 144) = a26;
    *(_DWORD *)(v64 - 136) = a27;
    *(_QWORD *)(v64 - 128) = a28;
    *(_QWORD *)(v64 - 120) = a29;
    *(_QWORD *)(v64 - 112) = a30;
    if (a30)
    {
      v69 = (unint64_t *)&a30->__shared_owners_;
      do
        v70 = __ldxr(v69);
      while (__stxr(v70 + 1, v69));
    }
    v71 = a30;
    if (a25 >= **(_DWORD **)(*a23 + 56))
    {
      sub_20E8C3FC4(*a23, v64 - 176);
      v71 = *(std::__shared_weak_count **)(v64 - 112);
    }
    if (v71)
    {
      v72 = (unint64_t *)&v71->__shared_owners_;
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
    if (a30)
    {
      v74 = (unint64_t *)&a30->__shared_owners_;
      do
        v75 = __ldaxr(v74);
      while (__stlxr(v75 - 1, v74));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))a30->__on_zero_shared)(a30);
        std::__shared_weak_count::__release_weak(a30);
      }
    }
    v76 = a30;
    a30 = 0;
    if (v76)
    {
      v77 = (unint64_t *)&v76->__shared_owners_;
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
      }
    }
  }
  if (a30)
  {
    v79 = (unint64_t *)&a30->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))a30->__on_zero_shared)(a30);
      std::__shared_weak_count::__release_weak(a30);
    }
  }
  if (a36 < 0)
    operator delete(__p);
  a47 = (void *)*MEMORY[0x24BEDB7F0];
  v81 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(void **)((char *)&a47 + *((_QWORD *)a47 - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
  a49 = v81;
  a50 = MEMORY[0x24BEDB848] + 16;
  if (a63 < 0)
    operator delete(a58);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](a17);
  _Unwind_Resume(a1);
}

void sub_20F253964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20F253990(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int *a4, uint64_t a5, double a6)
{
  void *v10;
  void *v11;
  int v12;
  unsigned int *v13;
  char v14;
  void *v15;
  unint64_t v16;
  void **v17;
  _BYTE *v18;
  _BYTE *v19;
  unint64_t v20;
  int8x8_t v21;
  int v22;
  _BYTE *v23;
  unsigned __int128 v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  int v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  _QWORD *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  void *v47;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  __int128 v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  void *v70;
  unint64_t i;
  int v72;
  uint64_t v73;
  __n128 v74;
  uint64_t v75;
  char *v76;
  int v77;
  uint64_t v78;
  _QWORD *v79;
  void *v80;
  _QWORD *v81;
  void ***v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::string::size_type *v86;
  std::string::size_type v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  __int128 v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *size;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  void **v110;
  void **j;
  void **v112;
  void **v113;
  void *v114;
  char v115;
  void *v116;
  unint64_t v117;
  void **v118;
  _BYTE *v119;
  _BYTE *v120;
  unint64_t v121;
  int8x8_t v122;
  int v123;
  _BYTE *v124;
  unsigned __int128 v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  unint64_t v132;
  uint64_t v133;
  _DWORD *v134;
  _DWORD *v135;
  char *v136;
  void *v137;
  int v138;
  int v139;
  char *v140;
  int64_t v141;
  uint64_t v142;
  unint64_t v143;
  int64_t v144;
  unint64_t v145;
  _BYTE *v146;
  char *v147;
  int64_t v148;
  unint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  char *v153;
  std::string::size_type v154;
  float *v155;
  void *v156;
  std::string::size_type v157;
  uint64_t v158;
  unint64_t v159;
  int64_t v160;
  unint64_t v161;
  char *v162;
  char *v163;
  std::string::size_type v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  std::string::size_type v168;
  char *v169;
  __int128 *v170;
  uint64_t v171;
  __int128 v172;
  int v173;
  uint64_t v174;
  float *v175;
  void (*v176)(int);
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  void (*v181)(int);
  void (*v182)(uint64_t);
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  _OWORD *v188;
  __int128 *v189;
  uint64_t v190;
  __int128 v191;
  int v192;
  char *v193;
  _BYTE *v194;
  int64_t v195;
  int64_t v196;
  unint64_t v197;
  uint64_t v198;
  unint64_t v199;
  _BYTE *v200;
  _DWORD *v201;
  int64_t v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  _OWORD *v207;
  char *v208;
  uint64_t v209;
  __int128 v210;
  int v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  _OWORD *v215;
  char *v216;
  uint64_t v217;
  __int128 v218;
  float *v219;
  double **v220;
  char *v221;
  int v222;
  void **v223;
  float *v224;
  double **v225;
  char *v226;
  int v227;
  void **v228;
  float *v229;
  double **v230;
  char *v231;
  int v232;
  void **v233;
  uint64_t v234;
  uint64_t v235;
  std::__shared_weak_count *v236;
  void ***v237;
  __n128 v238;
  uint64_t v239;
  uint64_t *v240;
  uint64_t v241;
  void *v242;
  _QWORD *v243;
  uint64_t v244;
  uint64_t v245;
  void **v246;
  std::__shared_weak_count *v247;
  unint64_t *v248;
  unint64_t v249;
  uint64_t v250;
  void **v251;
  uint64_t v252;
  void *v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  void **v260;
  void **k;
  void **v262;
  void **v263;
  void *v264;
  __n128 v265;
  uint64_t v266;
  uint64_t *v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  void **v271;
  void **m;
  void **v273;
  void **v274;
  void *v275;
  std::__shared_weak_count *v276;
  unint64_t *v277;
  unint64_t v278;
  uint64_t v279;
  _DWORD *v281;
  uint64_t v282;
  void *v283;
  int v284;
  uint64_t v285;
  void *v286;
  void *v287[2];
  _BYTE *v288;
  char v289;
  void *v290[2];
  _BYTE *v291;
  char v292;
  void *v293[2];
  void *v294;
  char v295;
  void *v296[2];
  char v297;
  void *v298[2];
  void *v299;
  void *v300[2];
  _BYTE *v301;
  char v302;
  void *v303;
  char v304;
  __n128 v305;
  char v306;
  double *v307;
  void *__dst[2];
  void *v309;
  char v310;
  void *v311[2];
  void *v312;
  void *v313;
  void *v314;
  uint64_t v315;
  _DWORD v316[4];
  double v317;
  void *v318;
  __int128 v319;
  uint64_t v320;
  std::__shared_weak_count *v321;
  uint64_t v322;
  void **v323;
  void *v324[2];
  _BYTE *v325;
  uint64_t v326;
  std::__shared_weak_count *v327;
  void ***v328;
  uint64_t v329;
  std::__shared_weak_count *v330;
  uint64_t v331;
  void **v332;
  __n128 v333;
  _BYTE v334[7];
  char v335;
  uint64_t v336;
  uint64_t v337;
  char v338;
  std::string v339;
  _BYTE v340[30];
  char v341;
  char v342;
  __n128 v343;
  _BYTE v344[7];
  char v345;
  uint64_t v346;
  uint64_t v347;
  char v348;
  void *v349[2];
  uint64_t v350;
  unsigned __int128 v351;
  unsigned __int8 v352;
  void *v353;
  __int128 v354;
  _BYTE v355[24];
  uint64_t v356;
  unsigned __int128 v357;
  char v358;
  __n128 v359;
  _BYTE v360[7];
  char v361;
  uint64_t v362;
  uint64_t v363;
  char v364;
  __n128 v365;
  _BYTE v366[7];
  char v367;
  uint64_t v368;
  uint64_t v369;
  char v370;
  void *v371[3];
  std::string *v372;
  std::string *v373;
  void *__p[2];
  uint64_t v375;
  unsigned __int128 v376;
  unsigned __int8 v377;
  void *v378;
  _BYTE v379[15];
  char v380;
  char v381;
  __int128 v382;
  uint64_t v383;
  unsigned __int128 v384;
  char v385;
  void (*v386)(int);
  __int128 v387;
  uint64_t v388;

  v388 = *MEMORY[0x24BDAC8D0];
  v317 = a6;
  LODWORD(v371[0]) = *(_DWORD *)(a5 + 8);
  sub_20EB04900((unint64_t *)a5, (std::string *)"_", (unsigned int *)v371);
  v10 = v313;
  v11 = v314;
  v316[0] = v315;
  *(_DWORD *)((char *)v316 + 3) = *(_DWORD *)((char *)&v315 + 3);
  v12 = SHIBYTE(v315);
  v314 = 0;
  v315 = 0;
  v313 = 0;
  v13 = (unsigned int *)(a5 + 16);
  v286 = v10;
  v284 = v12;
  sub_20EB04AE4("keyframe_", (unsigned int *)(a5 + 16));
  if (SHIBYTE(v312) < 0)
  {
    sub_20E860C04(__dst, v311[0], (unint64_t)v311[1]);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)v311;
    v309 = v312;
  }
  v310 = 1;
  if (v12 < 0)
  {
    sub_20E860C04(__p, v10, (unint64_t)v11);
    v376 = 0uLL;
    v377 = 1;
    if (!v310)
    {
      LOBYTE(v378) = 0;
      v381 = 0;
      LOBYTE(v382) = 0;
      v385 = 0;
LABEL_43:
      v382 = *(_OWORD *)__p;
      v383 = v375;
      v375 = 0;
      __p[0] = 0;
      __p[1] = 0;
      do
        v24 = __ldaxp(&v376);
      while (__stlxp(v24, &v376));
      v384 = v24;
      v385 = 1;
      if (v377 && SHIBYTE(v375) < 0)
        operator delete(__p[0]);
      goto LABEL_48;
    }
  }
  else
  {
    __p[0] = v10;
    __p[1] = v11;
    LODWORD(v375) = v316[0];
    *(_DWORD *)((char *)&v375 + 3) = *(_DWORD *)((char *)v316 + 3);
    HIBYTE(v375) = v12;
    v376 = 0uLL;
    v377 = 1;
  }
  v371[2] = v309;
  *(_OWORD *)v371 = *(_OWORD *)__dst;
  __dst[1] = 0;
  v309 = 0;
  __dst[0] = 0;
  v14 = HIBYTE(v371[2]);
  v15 = v371[0];
  v16 = (unint64_t)v371[1];
  if (SHIBYTE(v371[2]) >= 0)
    v17 = v371;
  else
    v17 = (void **)v371[0];
  if (SHIBYTE(v371[2]) >= 0)
    v16 = HIBYTE(v371[2]);
  if (v16)
  {
    v18 = v17;
    if (v16 >= 8)
    {
      v18 = (char *)v17 + (v16 & 0xFFFFFFFFFFFFFFF8);
      v19 = (char *)v17 + 3;
      v20 = v16 & 0xFFFFFFFFFFFFFFF8;
      while (1)
      {
        v21 = vceq_s8(*(int8x8_t *)(v19 - 3), (int8x8_t)0x2323232323232323);
        if ((v21.i8[0] & 1) != 0)
        {
          *(v19 - 3) = 95;
          if ((v21.i8[1] & 1) == 0)
            goto LABEL_18;
        }
        else if ((v21.i8[1] & 1) == 0)
        {
LABEL_18:
          if ((v21.i8[2] & 1) != 0)
            goto LABEL_19;
          goto LABEL_27;
        }
        *(v19 - 2) = 95;
        if ((v21.i8[2] & 1) != 0)
        {
LABEL_19:
          *(v19 - 1) = 95;
          if ((v21.i8[3] & 1) == 0)
            goto LABEL_20;
          goto LABEL_28;
        }
LABEL_27:
        if ((v21.i8[3] & 1) == 0)
        {
LABEL_20:
          if ((v21.i8[4] & 1) != 0)
            goto LABEL_21;
          goto LABEL_29;
        }
LABEL_28:
        *v19 = 95;
        if ((v21.i8[4] & 1) != 0)
        {
LABEL_21:
          v19[1] = 95;
          if ((v21.i8[5] & 1) == 0)
            goto LABEL_22;
          goto LABEL_30;
        }
LABEL_29:
        if ((v21.i8[5] & 1) == 0)
        {
LABEL_22:
          if ((v21.i8[6] & 1) != 0)
            goto LABEL_23;
          goto LABEL_31;
        }
LABEL_30:
        v19[2] = 95;
        if ((v21.i8[6] & 1) != 0)
        {
LABEL_23:
          v19[3] = 95;
          if ((v21.i8[7] & 1) != 0)
            goto LABEL_32;
          goto LABEL_15;
        }
LABEL_31:
        if ((v21.i8[7] & 1) != 0)
LABEL_32:
          v19[4] = 95;
LABEL_15:
        v19 += 8;
        v20 -= 8;
        if (!v20)
        {
          if (v16 == (v16 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_35;
          break;
        }
      }
    }
    v23 = (char *)v17 + v16;
    do
    {
      if (*v18 == 35)
        *v18 = 95;
      ++v18;
    }
    while (v18 != v23);
LABEL_35:
    v15 = v371[0];
    v14 = HIBYTE(v371[2]);
    v22 = v377;
  }
  else
  {
    v22 = 1;
  }
  v378 = v15;
  *(void **)v379 = v371[1];
  *(void **)&v379[7] = *(void **)((char *)&v371[1] + 7);
  memset(v371, 0, sizeof(v371));
  v380 = v14;
  v381 = 1;
  LOBYTE(v382) = 0;
  v385 = 0;
  if (v22)
    goto LABEL_43;
LABEL_48:
  if (v310 && SHIBYTE(v309) < 0)
    operator delete(__dst[0]);
  v307 = &v317;
  if (v12 < 0)
  {
    sub_20E860C04(&v365, v10, (unint64_t)v11);
  }
  else
  {
    v365.n128_u64[0] = (unint64_t)v10;
    v365.n128_u64[1] = (unint64_t)v11;
    *(_DWORD *)v366 = v316[0];
    *(_DWORD *)&v366[3] = *(_DWORD *)((char *)v316 + 3);
    v367 = v12;
  }
  v283 = v11;
  v369 = 0;
  v368 = 0;
  v370 = 1;
  v305.n128_u8[0] = 0;
  v306 = 0;
  v25 = sub_20F256414((uint64_t)v371, &v307, (uint64_t)v311, &v365, &v305);
  v279 = a1;
  v285 = a1 + 8;
  v26 = (*(uint64_t (**)(uint64_t, const char *, uint64_t, __n128))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8, "cv3d.vio.keyframes", 18, v25);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v26 + 24))(v26))
  {
    v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 1096) + 24) + 240 * *a4 + 72) + 408 * a4[1];
    v28 = *(void **)(v27 + 80);
    v29 = *(_DWORD *)(v27 + 24);
    LODWORD(v324[0]) = v29;
    HIDWORD(v324[0]) = *(_DWORD *)(v27 + 40);
    v30 = *(_QWORD *)(v27 + 32);
    v353 = v28;
    v318 = &off_24C9C0A88;
    if (HIDWORD(v324[0]))
      v31 = v29 == 0;
    else
      v31 = 1;
    v32 = v30 << 32;
    if (v31)
      v32 = 0;
    v339.__r_.__value_.__r.__words[0] = v32 | (v29 != 0);
    sub_20EA6AA08(&v353, v324, (uint64_t *)&v339, (uint64_t)&v319);
    v33 = operator new();
    v353 = &off_24C9FC408;
    sub_20F282FAC((uint64_t)&v318, (uint64_t)&v354);
    v339.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C9F0ED0;
    sub_20F282CE4((uint64_t)&v353, (uint64_t)&v339.__r_.__value_.__l.__size_);
    v34 = (std::__shared_weak_count *)*((_QWORD *)&v354 + 1);
    if (*((_QWORD *)&v354 + 1))
    {
      v35 = (unint64_t *)(*((_QWORD *)&v354 + 1) + 8);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    *(_QWORD *)v33 = &off_24C9F0E80;
    *(_QWORD *)(v33 + 8) = &off_24C9F0ED0;
    v37 = *(_OWORD *)&v339.__r_.__value_.__r.__words[1];
    *(_OWORD *)&v339.__r_.__value_.__r.__words[1] = 0uLL;
    v38 = *(_OWORD *)v340;
    *(_OWORD *)(v33 + 16) = v37;
    *(_OWORD *)(v33 + 32) = v38;
    *(_OWORD *)(v33 + 46) = *(_OWORD *)&v340[14];
    sub_20EB09F3C(v33 + 64, (uint64_t)v371);
    *(_QWORD *)v33 = &off_24C9F0AE0;
    v339.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C9F0ED0;
    v39 = (std::__shared_weak_count *)v339.__r_.__value_.__r.__words[2];
    if (v339.__r_.__value_.__r.__words[2])
    {
      v40 = (unint64_t *)(v339.__r_.__value_.__r.__words[2] + 8);
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    *(_QWORD *)v33 = &off_24CA0C258;
    v353 = 0;
    v386 = (void (*)(int))&off_24CA0C0E8;
    *(_QWORD *)&v387 = v33;
    v42 = (_QWORD *)operator new();
    *v42 = &off_24CA0C1E0;
    v42[1] = 0;
    v42[2] = 0;
    v42[3] = v33;
    *((_QWORD *)&v387 + 1) = v42;
    v43 = (std::__shared_weak_count *)*((_QWORD *)&v319 + 1);
    if (*((_QWORD *)&v319 + 1))
    {
      v44 = (unint64_t *)(*((_QWORD *)&v319 + 1) + 8);
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 56))(v26);
    v47 = *(void **)v46;
    v48 = *(std::__shared_weak_count **)(v46 + 8);
    if (v48)
    {
      p_shared_owners = (unint64_t *)&v48->__shared_owners_;
      do
        v50 = __ldxr(p_shared_owners);
      while (__stxr(v50 + 1, p_shared_owners));
    }
    v51 = v387;
    v339.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24CA0C0E8;
    *(_OWORD *)&v339.__r_.__value_.__r.__words[1] = v387;
    v387 = 0uLL;
    v353 = v47;
    *(_QWORD *)&v354 = v48;
    if (v48)
    {
      v52 = (unint64_t *)&v48->__shared_owners_;
      do
        v53 = __ldxr(v52);
      while (__stxr(v53 + 1, v52));
    }
    *((_QWORD *)&v354 + 1) = &off_24CA0C0E8;
    *(_OWORD *)v355 = v51;
    if (*((_QWORD *)&v51 + 1))
    {
      v54 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
      do
        v55 = __ldxr(v54);
      while (__stxr(v55 + 1, v54));
    }
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v279 + 16))(v279, &v353);
    v56 = *(std::__shared_weak_count **)&v355[8];
    if (*(_QWORD *)&v355[8])
    {
      v57 = (unint64_t *)(*(_QWORD *)&v355[8] + 8);
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
    v59 = (std::__shared_weak_count *)v354;
    if ((_QWORD)v354)
    {
      v60 = (unint64_t *)(v354 + 8);
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
    v62 = (std::__shared_weak_count *)v339.__r_.__value_.__r.__words[2];
    if (v339.__r_.__value_.__r.__words[2])
    {
      v63 = (unint64_t *)(v339.__r_.__value_.__r.__words[2] + 8);
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
    if (v48)
    {
      v65 = (unint64_t *)&v48->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    v67 = (std::__shared_weak_count *)*((_QWORD *)&v387 + 1);
    if (*((_QWORD *)&v387 + 1))
    {
      v68 = (unint64_t *)(*((_QWORD *)&v387 + 1) + 8);
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
  }
  sub_20EB0580C((uint64_t)v371);
  if (v306)
  {
    v70 = (void *)v305.n128_u64[0];
    if (v305.n128_u64[0])
    {
      for (i = v305.n128_u64[1]; ; i -= 96)
      {
        if ((void *)i == v70)
        {
          v305.n128_u64[1] = (unint64_t)v70;
          operator delete(v70);
          break;
        }
        if (*(_BYTE *)(i - 16) && *(char *)(i - 41) < 0)
        {
          operator delete(*(void **)(i - 64));
          if (!*(_BYTE *)(i - 72))
            continue;
        }
        else if (!*(_BYTE *)(i - 72))
        {
          continue;
        }
        if (*(char *)(i - 73) < 0)
          operator delete(*(void **)(i - 96));
      }
    }
  }
  if (v370 && v367 < 0)
    operator delete((void *)v365.n128_u64[0]);
  v72 = v12;
  v73 = (*(uint64_t (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)v285 + 48))(v285, "cv3d.reloc.submaps.keyframes", 28);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 24))(v73) & 1) == 0)
    goto LABEL_499;
  sub_20E8EB8DC("keyframe_metadata_", v13);
  if (v12 < 0)
  {
    sub_20E860C04(&v359, v10, (unint64_t)v283);
  }
  else
  {
    v359.n128_u64[0] = (unint64_t)v10;
    v359.n128_u64[1] = (unint64_t)v283;
    *(_DWORD *)v360 = v316[0];
    *(_DWORD *)&v360[3] = *(_DWORD *)((char *)v316 + 3);
    v361 = v12;
  }
  v363 = 0;
  v362 = 0;
  v364 = 1;
  sub_20EB054F8(&v353, (__int128 *)&v378);
  sub_20EB05604(v324, (uint64_t)&v353, 1uLL);
  *(_OWORD *)v300 = *(_OWORD *)v324;
  v301 = v325;
  v324[1] = 0;
  v325 = 0;
  v324[0] = 0;
  v302 = 1;
  v74 = sub_20F256414((uint64_t)v371, &v307, (uint64_t)&v303, &v359, (__n128 *)v300);
  v75 = (*(uint64_t (**)(uint64_t, const char *, uint64_t, __n128))(*(_QWORD *)v285 + 48))(v285, "cv3d.reloc.submaps.keyframes", 28, v74);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v75 + 24))(v75))
  {
    v339.__r_.__value_.__s.__data_[0] = 0;
    v339.__r_.__value_.__l.__size_ = 0;
    LOBYTE(v386) = 4;
    *(_QWORD *)&v387 = a3;
    v76 = sub_20EB04C20((uint64_t)&v339, "is_weak_keyframe");
    v77 = *v76;
    *v76 = (char)v386;
    LOBYTE(v386) = v77;
    v78 = *((_QWORD *)v76 + 1);
    *((_QWORD *)v76 + 1) = v387;
    *(_QWORD *)&v387 = v78;
    sub_20EB07D94((void ***)&v387, v77);
    v79 = (_QWORD *)operator new();
    *(_BYTE *)v79 = v339.__r_.__value_.__s.__data_[0];
    v79[1] = v339.__r_.__value_.__l.__size_;
    v339.__r_.__value_.__s.__data_[0] = 0;
    v339.__r_.__value_.__l.__size_ = 0;
    v296[0] = v79;
    v80 = (void *)operator new();
    sub_21009A830((uint64_t)v80, (uint64_t *)v296);
    v298[0] = v80;
    v81 = (_QWORD *)operator new();
    *v81 = &off_24CA15F60;
    v81[1] = 0;
    v81[2] = 0;
    v81[3] = v80;
    v298[1] = v81;
    v82 = (void ***)v296[0];
    v296[0] = 0;
    if (v82)
    {
      sub_20EB07D94(v82 + 1, *(unsigned __int8 *)v82);
      MEMORY[0x212BC6398](v82, 0x1022C40B06DCE69);
    }
    sub_20EB07D94((void ***)&v339.__r_.__value_.__l.__size_, v339.__r_.__value_.__s.__data_[0]);
    sub_20EB0962C((uint64_t *)v298, (uint64_t)v371, &v318);
    v83 = (std::__shared_weak_count *)v298[1];
    if (v298[1])
    {
      v84 = (unint64_t *)((char *)v298[1] + 8);
      do
        v85 = __ldaxr(v84);
      while (__stlxr(v85 - 1, v84));
      if (!v85)
      {
        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
        std::__shared_weak_count::__release_weak(v83);
      }
    }
    v86 = (std::string::size_type *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v75 + 56))(v75);
    v87 = *v86;
    v88 = (std::__shared_weak_count *)v86[1];
    if (v88)
    {
      v89 = (unint64_t *)&v88->__shared_owners_;
      do
        v90 = __ldxr(v89);
      while (__stxr(v90 + 1, v89));
    }
    v91 = v319;
    v386 = (void (*)(int))&off_24CA0C0E8;
    v387 = v319;
    v319 = 0uLL;
    v339.__r_.__value_.__r.__words[0] = v87;
    v339.__r_.__value_.__l.__size_ = (std::string::size_type)v88;
    if (v88)
    {
      v92 = (unint64_t *)&v88->__shared_owners_;
      do
        v93 = __ldxr(v92);
      while (__stxr(v93 + 1, v92));
    }
    v339.__r_.__value_.__r.__words[2] = (std::string::size_type)&off_24CA0C0E8;
    *(_OWORD *)v340 = v91;
    if (*((_QWORD *)&v91 + 1))
    {
      v94 = (unint64_t *)(*((_QWORD *)&v91 + 1) + 8);
      do
        v95 = __ldxr(v94);
      while (__stxr(v95 + 1, v94));
    }
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v279 + 16))(v279, &v339);
    v96 = *(std::__shared_weak_count **)&v340[8];
    if (*(_QWORD *)&v340[8])
    {
      v97 = (unint64_t *)(*(_QWORD *)&v340[8] + 8);
      do
        v98 = __ldaxr(v97);
      while (__stlxr(v98 - 1, v97));
      if (!v98)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
    size = (std::__shared_weak_count *)v339.__r_.__value_.__l.__size_;
    if (v339.__r_.__value_.__l.__size_)
    {
      v100 = (unint64_t *)(v339.__r_.__value_.__l.__size_ + 8);
      do
        v101 = __ldaxr(v100);
      while (__stlxr(v101 - 1, v100));
      if (!v101)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v102 = (std::__shared_weak_count *)*((_QWORD *)&v387 + 1);
    if (*((_QWORD *)&v387 + 1))
    {
      v103 = (unint64_t *)(*((_QWORD *)&v387 + 1) + 8);
      do
        v104 = __ldaxr(v103);
      while (__stlxr(v104 - 1, v103));
      if (!v104)
      {
        ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
        std::__shared_weak_count::__release_weak(v102);
      }
    }
    if (v88)
    {
      v105 = (unint64_t *)&v88->__shared_owners_;
      do
        v106 = __ldaxr(v105);
      while (__stlxr(v106 - 1, v105));
      if (!v106)
      {
        ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
        std::__shared_weak_count::__release_weak(v88);
      }
    }
    v107 = (std::__shared_weak_count *)*((_QWORD *)&v319 + 1);
    if (*((_QWORD *)&v319 + 1))
    {
      v108 = (unint64_t *)(*((_QWORD *)&v319 + 1) + 8);
      do
        v109 = __ldaxr(v108);
      while (__stlxr(v109 - 1, v108));
      if (!v109)
      {
        ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
        std::__shared_weak_count::__release_weak(v107);
      }
    }
  }
  sub_20EB0580C((uint64_t)v371);
  v72 = v12;
  if (v302)
  {
    v110 = (void **)v300[0];
    if (v300[0])
    {
      for (j = (void **)v300[1]; ; j -= 12)
      {
        if (j == v110)
        {
          v300[1] = v110;
          operator delete(v110);
          break;
        }
        if (*((_BYTE *)j - 16) && *((char *)j - 41) < 0)
        {
          operator delete(*(j - 8));
          if (!*((_BYTE *)j - 72))
            continue;
        }
        else if (!*((_BYTE *)j - 72))
        {
          continue;
        }
        if (*((char *)j - 73) < 0)
          operator delete(*(j - 12));
      }
    }
  }
  v112 = (void **)v324[0];
  if (v324[0])
  {
    v113 = (void **)v324[1];
    v114 = v324[0];
    if (v324[1] == v324[0])
    {
LABEL_196:
      v324[1] = v112;
      operator delete(v114);
      goto LABEL_197;
    }
    while (1)
    {
      if (*((_BYTE *)v113 - 16) && *((char *)v113 - 41) < 0)
      {
        operator delete(*(v113 - 8));
        if (*((_BYTE *)v113 - 72))
        {
LABEL_191:
          if (*((char *)v113 - 73) < 0)
            operator delete(*(v113 - 12));
        }
      }
      else if (*((_BYTE *)v113 - 72))
      {
        goto LABEL_191;
      }
      v113 -= 12;
      if (v113 == v112)
      {
        v114 = v324[0];
        goto LABEL_196;
      }
    }
  }
LABEL_197:
  if (v358 && SHIBYTE(v356) < 0)
    operator delete(*(void **)&v355[8]);
  if (v355[0] && SHIBYTE(v354) < 0)
    operator delete(v353);
  if (v364 && v361 < 0)
    operator delete((void *)v359.n128_u64[0]);
  *(_DWORD *)v355 = 0;
  sub_20E9ECA4C(&v353, "keypoints_");
  std::to_string(&v339, *v13);
  v371[0] = &v353;
  v371[1] = &v339;
  v371[2] = &v353;
  v372 = &v339;
  v373 = &v339;
  if (*(_DWORD *)v355 == -1)
    sub_20E877AB8();
  v318 = v371;
  ((void (*)(void **, void **))off_24C9FC098[*(unsigned int *)v355])(&v318, &v353);
  if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v339.__r_.__value_.__l.__data_);
  if (*(_DWORD *)v355 == -1)
    sub_20E877AB8();
  v371[0] = &v339;
  ((void (*)(void **__return_ptr, void **, void **))off_24C9FC0C8[*(unsigned int *)v355])(v298, v371, &v353);
  if (*(_DWORD *)v355 != -1)
    ((void (*)(void **, void **))off_24C9FC0B0[*(unsigned int *)v355])(v371, &v353);
  *(_DWORD *)v355 = 0;
  sub_20E9ECA4C(&v353, "keypoints_");
  std::to_string(&v339, *v13);
  v371[0] = &v353;
  v371[1] = &v339;
  v371[2] = &v353;
  v372 = &v339;
  v373 = &v339;
  if (*(_DWORD *)v355 == -1)
    sub_20E877AB8();
  v318 = v371;
  ((void (*)(void **, void **))off_24C9FC098[*(unsigned int *)v355])(&v318, &v353);
  if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v339.__r_.__value_.__l.__data_);
  v371[0] = &v353;
  v371[1] = "_metadata";
  v371[2] = &v353;
  v372 = (std::string *)"_metadata";
  v373 = (std::string *)"_metadata";
  if (*(_DWORD *)v355 == -1)
    sub_20E877AB8();
  v339.__r_.__value_.__r.__words[0] = (std::string::size_type)v371;
  ((void (*)(std::string *, void **))off_24C9FC200[*(unsigned int *)v355])(&v339, &v353);
  if (*(_DWORD *)v355 == -1)
    sub_20E877AB8();
  v371[0] = &v339;
  ((void (*)(void **__return_ptr, void **, void **))off_24C9FC0C8[*(unsigned int *)v355])(v296, v371, &v353);
  if (*(_DWORD *)v355 != -1)
    ((void (*)(void **, void **))off_24C9FC0B0[*(unsigned int *)v355])(v371, &v353);
  if (SHIBYTE(v299) < 0)
  {
    sub_20E860C04(v293, v298[0], (unint64_t)v298[1]);
  }
  else
  {
    *(_OWORD *)v293 = *(_OWORD *)v298;
    v294 = v299;
  }
  v295 = 1;
  if (v12 < 0)
  {
    sub_20E860C04(v349, v10, (unint64_t)v283);
    v351 = 0uLL;
    v352 = 1;
    if (!v295)
    {
      LOBYTE(v353) = 0;
      v355[0] = 0;
      v355[8] = 0;
      v358 = 0;
LABEL_261:
      *(_OWORD *)&v355[8] = *(_OWORD *)v349;
      v356 = v350;
      v350 = 0;
      v349[0] = 0;
      v349[1] = 0;
      do
        v125 = __ldaxp(&v351);
      while (__stlxp(v125, &v351));
      v357 = v125;
      v358 = 1;
      if (v352 && SHIBYTE(v350) < 0)
        operator delete(v349[0]);
      goto LABEL_266;
    }
  }
  else
  {
    v349[0] = v10;
    v349[1] = v283;
    LODWORD(v350) = v316[0];
    *(_DWORD *)((char *)&v350 + 3) = *(_DWORD *)((char *)v316 + 3);
    HIBYTE(v350) = v12;
    v351 = 0uLL;
    v352 = 1;
  }
  v371[2] = v294;
  *(_OWORD *)v371 = *(_OWORD *)v293;
  v293[1] = 0;
  v294 = 0;
  v293[0] = 0;
  v115 = HIBYTE(v371[2]);
  v116 = v371[0];
  v117 = (unint64_t)v371[1];
  if (SHIBYTE(v371[2]) >= 0)
    v118 = v371;
  else
    v118 = (void **)v371[0];
  if (SHIBYTE(v371[2]) >= 0)
    v117 = HIBYTE(v371[2]);
  if (v117)
  {
    v119 = v118;
    if (v117 >= 8)
    {
      v119 = (char *)v118 + (v117 & 0xFFFFFFFFFFFFFFF8);
      v120 = (char *)v118 + 3;
      v121 = v117 & 0xFFFFFFFFFFFFFFF8;
      while (1)
      {
        v122 = vceq_s8(*(int8x8_t *)(v120 - 3), (int8x8_t)0x2323232323232323);
        if ((v122.i8[0] & 1) != 0)
        {
          *(v120 - 3) = 95;
          if ((v122.i8[1] & 1) == 0)
            goto LABEL_236;
        }
        else if ((v122.i8[1] & 1) == 0)
        {
LABEL_236:
          if ((v122.i8[2] & 1) != 0)
            goto LABEL_237;
          goto LABEL_245;
        }
        *(v120 - 2) = 95;
        if ((v122.i8[2] & 1) != 0)
        {
LABEL_237:
          *(v120 - 1) = 95;
          if ((v122.i8[3] & 1) == 0)
            goto LABEL_238;
          goto LABEL_246;
        }
LABEL_245:
        if ((v122.i8[3] & 1) == 0)
        {
LABEL_238:
          if ((v122.i8[4] & 1) != 0)
            goto LABEL_239;
          goto LABEL_247;
        }
LABEL_246:
        *v120 = 95;
        if ((v122.i8[4] & 1) != 0)
        {
LABEL_239:
          v120[1] = 95;
          if ((v122.i8[5] & 1) == 0)
            goto LABEL_240;
          goto LABEL_248;
        }
LABEL_247:
        if ((v122.i8[5] & 1) == 0)
        {
LABEL_240:
          if ((v122.i8[6] & 1) != 0)
            goto LABEL_241;
          goto LABEL_249;
        }
LABEL_248:
        v120[2] = 95;
        if ((v122.i8[6] & 1) != 0)
        {
LABEL_241:
          v120[3] = 95;
          if ((v122.i8[7] & 1) != 0)
            goto LABEL_250;
          goto LABEL_233;
        }
LABEL_249:
        if ((v122.i8[7] & 1) != 0)
LABEL_250:
          v120[4] = 95;
LABEL_233:
        v120 += 8;
        v121 -= 8;
        if (!v121)
        {
          if (v117 == (v117 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_253;
          break;
        }
      }
    }
    v124 = (char *)v118 + v117;
    do
    {
      if (*v119 == 35)
        *v119 = 95;
      ++v119;
    }
    while (v119 != v124);
LABEL_253:
    v116 = v371[0];
    v115 = HIBYTE(v371[2]);
    v123 = v352;
  }
  else
  {
    v123 = 1;
  }
  *(void **)&v354 = v371[1];
  *(void **)((char *)&v354 + 7) = *(void **)((char *)&v371[1] + 7);
  memset(v371, 0, sizeof(v371));
  v353 = v116;
  HIBYTE(v354) = v115;
  v355[0] = 1;
  v355[8] = 0;
  v358 = 0;
  if (v123)
    goto LABEL_261;
LABEL_266:
  if (v295 && SHIBYTE(v294) < 0)
    operator delete(v293[0]);
  v126 = *(_QWORD *)(a2 + 1096);
  if (v126)
  {
    v128 = v126 + 24;
    v127 = *(_QWORD *)(v126 + 24);
    v129 = *a4;
    if (0xEEEEEEEEEEEEEEEFLL * ((*(_QWORD *)(v128 + 8) - v127) >> 4) > v129)
    {
      v131 = (uint64_t *)(v127 + 240 * v129 + 24);
      v130 = *v131;
      v132 = a4[1];
      if (v132 < (v131[1] - *v131) >> 4)
      {
        v133 = *(_QWORD *)(v130 + 16 * v132);
        v135 = *(_DWORD **)(v133 + 56);
        v134 = *(_DWORD **)(v133 + 64);
        memset(v371, 0, sizeof(v371));
        memset(&v339, 0, sizeof(v339));
        v386 = 0;
        v387 = 0uLL;
        v324[0] = 0;
        v324[1] = 0;
        v325 = 0;
        v281 = v134;
        if (v135 != v134)
        {
          v136 = 0;
          while (1)
          {
            v139 = v135[2];
            v138 = v135[3];
            if (v136 < v371[2])
            {
              *(_DWORD *)v136 = v139;
              *((_DWORD *)v136 + 1) = v138;
              v136 += 8;
              goto LABEL_292;
            }
            v140 = (char *)v371[0];
            v141 = v136 - (char *)v371[0];
            v142 = (v136 - (char *)v371[0]) >> 3;
            v143 = v142 + 1;
            if ((unint64_t)(v142 + 1) >> 61)
              sub_20E969238();
            v144 = (char *)v371[2] - (char *)v371[0];
            if (((char *)v371[2] - (char *)v371[0]) >> 2 > v143)
              v143 = v144 >> 2;
            if ((unint64_t)v144 >= 0x7FFFFFFFFFFFFFF8)
              v145 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v145 = v143;
            if (v145)
            {
              if (v145 >> 61)
                sub_20E877A38();
              v146 = operator new(8 * v145);
              v147 = &v146[8 * v142];
              *(_DWORD *)v147 = v139;
              *((_DWORD *)v147 + 1) = v138;
              v148 = v136 - v140;
              if (v136 != v140)
              {
LABEL_287:
                v149 = v148 - 8;
                if (v149 < 0x168
                  || (v212 = (v136 - 8 - v140) & 0xFFFFFFFFFFFFFFF8, &v146[v141 - 8 - v212] > &v146[v141 - 8])
                  || &v136[-v212 - 8] > v136 - 8
                  || (unint64_t)(v136 - v146 - v141) < 0x20)
                {
                  v150 = v136;
                  v151 = v147;
                }
                else
                {
                  v213 = (v149 >> 3) + 1;
                  v214 = 8 * (v213 & 0x3FFFFFFFFFFFFFFCLL);
                  v150 = &v136[-v214];
                  v151 = &v147[-v214];
                  v215 = &v146[8 * v142 - 16];
                  v216 = v136 - 16;
                  v217 = v213 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v218 = *(_OWORD *)v216;
                    *(v215 - 1) = *((_OWORD *)v216 - 1);
                    *v215 = v218;
                    v215 -= 2;
                    v216 -= 32;
                    v217 -= 4;
                  }
                  while (v217);
                  if (v213 == (v213 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_290:
                    v153 = (char *)v371[0];
                    v136 = v147 + 8;
                    v371[0] = v151;
                    v371[2] = &v146[8 * v145];
                    if (!v153)
                      goto LABEL_292;
LABEL_291:
                    operator delete(v153);
                    goto LABEL_292;
                  }
                }
                do
                {
                  v152 = *((_QWORD *)v150 - 1);
                  v150 -= 8;
                  *((_QWORD *)v151 - 1) = v152;
                  v151 -= 8;
                }
                while (v150 != v140);
                goto LABEL_290;
              }
            }
            else
            {
              v146 = 0;
              v147 = (char *)(8 * v142);
              *(_DWORD *)v147 = v139;
              *((_DWORD *)v147 + 1) = v138;
              v148 = v136 - v140;
              if (v136 != v140)
                goto LABEL_287;
            }
            v153 = v136;
            v136 = v147 + 8;
            v371[0] = v147;
            v371[2] = &v146[8 * v145];
            if (v153)
              goto LABEL_291;
LABEL_292:
            v371[1] = v136;
            v154 = v339.__r_.__value_.__l.__size_;
            if (v339.__r_.__value_.__l.__size_ < v339.__r_.__value_.__r.__words[2])
            {
              *(_DWORD *)v339.__r_.__value_.__l.__size_ = v135[4];
              v155 = (float *)(v154 + 4);
              goto LABEL_316;
            }
            v156 = (void *)v339.__r_.__value_.__r.__words[0];
            v157 = v339.__r_.__value_.__l.__size_ - v339.__r_.__value_.__r.__words[0];
            v158 = (uint64_t)(v339.__r_.__value_.__l.__size_ - v339.__r_.__value_.__r.__words[0]) >> 2;
            v159 = v158 + 1;
            if ((unint64_t)(v158 + 1) >> 62)
              goto LABEL_515;
            v160 = v339.__r_.__value_.__r.__words[2] - v339.__r_.__value_.__r.__words[0];
            if ((uint64_t)(v339.__r_.__value_.__r.__words[2] - v339.__r_.__value_.__r.__words[0]) >> 1 > v159)
              v159 = v160 >> 1;
            if ((unint64_t)v160 >= 0x7FFFFFFFFFFFFFFCLL)
              v161 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v161 = v159;
            if (v161)
            {
              if (v161 >> 62)
                goto LABEL_514;
              v162 = (char *)operator new(4 * v161);
              v163 = &v162[4 * v158];
              *(_DWORD *)v163 = v135[4];
              v155 = (float *)(v163 + 4);
              v164 = v154 - (_QWORD)v156;
              if ((void *)v154 == v156)
                goto LABEL_314;
LABEL_308:
              v165 = v164 - 4;
              if (v165 < 0x2C)
                goto LABEL_526;
              if (v154 - (_QWORD)v162 - v157 < 0x20)
                goto LABEL_526;
              v166 = (v165 >> 2) + 1;
              v167 = 4 * (v166 & 0x7FFFFFFFFFFFFFF8);
              v168 = v154 - v167;
              v163 -= v167;
              v169 = &v162[4 * v158 - 16];
              v170 = (__int128 *)(v154 - 16);
              v171 = v166 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v172 = *v170;
                *((_OWORD *)v169 - 1) = *(v170 - 1);
                *(_OWORD *)v169 = v172;
                v169 -= 32;
                v170 -= 2;
                v171 -= 8;
              }
              while (v171);
              v154 = v168;
              if (v166 != (v166 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_526:
                do
                {
                  v173 = *(_DWORD *)(v154 - 4);
                  v154 -= 4;
                  *((_DWORD *)v163 - 1) = v173;
                  v163 -= 4;
                }
                while ((void *)v154 != v156);
              }
              goto LABEL_314;
            }
            v162 = 0;
            v163 = (char *)(4 * v158);
            *(_DWORD *)(4 * v158) = v135[4];
            v155 = (float *)(4 * v158 + 4);
            v164 = v154 - (_QWORD)v156;
            if ((void *)v154 != v156)
              goto LABEL_308;
LABEL_314:
            v339.__r_.__value_.__r.__words[0] = (std::string::size_type)v163;
            v339.__r_.__value_.__r.__words[2] = (std::string::size_type)&v162[4 * v161];
            if (v156)
              operator delete(v156);
LABEL_316:
            v339.__r_.__value_.__l.__size_ = (std::string::size_type)v155;
            v174 = v387;
            if ((unint64_t)v387 < *((_QWORD *)&v387 + 1))
            {
              *(_DWORD *)v387 = v135[5];
              v175 = (float *)(v174 + 4);
              goto LABEL_337;
            }
            v176 = v386;
            v177 = (uint64_t)(v387 - (_QWORD)v386) >> 2;
            v178 = v177 + 1;
            if ((unint64_t)(v177 + 1) >> 62)
              goto LABEL_515;
            v179 = *((_QWORD *)&v387 + 1) - (_QWORD)v386;
            if ((uint64_t)(*((_QWORD *)&v387 + 1) - (_QWORD)v386) >> 1 > v178)
              v178 = v179 >> 1;
            if ((unint64_t)v179 >= 0x7FFFFFFFFFFFFFFCLL)
              v180 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v180 = v178;
            if (v180)
            {
              if (v180 >> 62)
                goto LABEL_514;
              v181 = (void (*)(int))operator new(4 * v180);
              v182 = (void (*)(uint64_t))((char *)v181 + 4 * v177);
              *(_DWORD *)v182 = v135[5];
              v175 = (float *)((char *)v182 + 4);
              v183 = v174 - (_QWORD)v176;
              if ((void (*)(int))v174 == v176)
                goto LABEL_335;
LABEL_329:
              v184 = v183 - 4;
              if (v184 < 0x2C)
                goto LABEL_527;
              if ((unint64_t)((char *)v176 - (char *)v181) < 0x20)
                goto LABEL_527;
              v185 = (v184 >> 2) + 1;
              v186 = 4 * (v185 & 0x7FFFFFFFFFFFFFF8);
              v187 = v174 - v186;
              v182 = (void (*)(uint64_t))((char *)v182 - v186);
              v188 = (_OWORD *)((char *)v181 + 4 * v177 - 16);
              v189 = (__int128 *)(v174 - 16);
              v190 = v185 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v191 = *v189;
                *(v188 - 1) = *(v189 - 1);
                *v188 = v191;
                v188 -= 2;
                v189 -= 2;
                v190 -= 8;
              }
              while (v190);
              v174 = v187;
              if (v185 != (v185 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_527:
                do
                {
                  v192 = *(_DWORD *)(v174 - 4);
                  v174 -= 4;
                  *((_DWORD *)v182 - 1) = v192;
                  v182 = (void (*)(uint64_t))((char *)v182 - 4);
                }
                while ((void (*)(int))v174 != v176);
              }
              goto LABEL_335;
            }
            v181 = 0;
            v182 = (void (*)(uint64_t))(4 * v177);
            *(_DWORD *)(4 * v177) = v135[5];
            v175 = (float *)(4 * v177 + 4);
            v183 = v174 - (_QWORD)v176;
            if ((void (*)(int))v174 != v176)
              goto LABEL_329;
LABEL_335:
            v386 = (void (*)(int))v182;
            *((_QWORD *)&v387 + 1) = (char *)v181 + 4 * v180;
            if (v176)
              operator delete(v176);
LABEL_337:
            *(_QWORD *)&v387 = v175;
            v193 = (char *)v324[1];
            if (v324[1] >= v325)
            {
              v194 = v324[0];
              v195 = (char *)v324[1] - (char *)v324[0];
              v196 = ((char *)v324[1] - (char *)v324[0]) >> 2;
              v197 = v196 + 1;
              if ((unint64_t)(v196 + 1) >> 62)
LABEL_515:
                sub_20E867F44();
              v198 = v325 - (char *)v324[0];
              if ((v325 - (char *)v324[0]) >> 1 > v197)
                v197 = v198 >> 1;
              if ((unint64_t)v198 >= 0x7FFFFFFFFFFFFFFCLL)
                v199 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v199 = v197;
              if (v199)
              {
                if (v199 >> 62)
LABEL_514:
                  sub_20E877A38();
                v200 = operator new(4 * v199);
                v201 = &v200[4 * v196];
                *v201 = v135[7];
                v137 = v201 + 1;
                v202 = v193 - v194;
                if (v193 == v194)
                  goto LABEL_355;
LABEL_349:
                v203 = v202 - 4;
                if (v203 < 0x2C)
                  goto LABEL_528;
                if ((unint64_t)(v193 - v200 - v195) < 0x20)
                  goto LABEL_528;
                v204 = (v203 >> 2) + 1;
                v205 = 4 * (v204 & 0x7FFFFFFFFFFFFFF8);
                v206 = &v193[-v205];
                v201 = (_DWORD *)((char *)v201 - v205);
                v207 = &v200[4 * v196 - 16];
                v208 = v193 - 16;
                v209 = v204 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v210 = *(_OWORD *)v208;
                  *(v207 - 1) = *((_OWORD *)v208 - 1);
                  *v207 = v210;
                  v207 -= 2;
                  v208 -= 32;
                  v209 -= 8;
                }
                while (v209);
                v193 = v206;
                if (v204 != (v204 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_528:
                  do
                  {
                    v211 = *((_DWORD *)v193 - 1);
                    v193 -= 4;
                    *--v201 = v211;
                  }
                  while (v193 != v194);
                }
              }
              else
              {
                v200 = 0;
                v201 = (_DWORD *)(4 * v196);
                *(_DWORD *)(4 * v196) = v135[7];
                v137 = (void *)(4 * v196 + 4);
                v202 = v193 - v194;
                if (v193 != v194)
                  goto LABEL_349;
              }
LABEL_355:
              v324[0] = v201;
              v325 = &v200[4 * v199];
              if (v194)
                operator delete(v194);
              goto LABEL_275;
            }
            *(_DWORD *)v324[1] = v135[7];
            v137 = v193 + 4;
LABEL_275:
            v10 = v286;
            v324[1] = v137;
            v135 += 8;
            if (v135 == v281)
            {
              v219 = (float *)v339.__r_.__value_.__r.__words[0];
              goto LABEL_366;
            }
          }
        }
        v136 = 0;
        v137 = 0;
        v175 = 0;
        v155 = 0;
        v219 = 0;
LABEL_366:
        LOBYTE(v331) = 0;
        v332 = 0;
        v330 = 0;
        LOBYTE(v329) = 2;
        v220 = (double **)operator new(0x18uLL);
        sub_20F27E158(v220, v219, v155);
        v330 = (std::__shared_weak_count *)v220;
        v221 = sub_20EB04C20((uint64_t)&v331, "orientation");
        v222 = *v221;
        *v221 = v329;
        LOBYTE(v329) = v222;
        v223 = (void **)*((_QWORD *)v221 + 1);
        *((_QWORD *)v221 + 1) = v330;
        v330 = (std::__shared_weak_count *)v223;
        sub_20EB07D94((void ***)&v330, v222);
        v327 = 0;
        LOBYTE(v326) = 2;
        v224 = (float *)v386;
        v225 = (double **)operator new(0x18uLL);
        sub_20F27E158(v225, v224, v175);
        v327 = (std::__shared_weak_count *)v225;
        v226 = sub_20EB04C20((uint64_t)&v331, "scale");
        v227 = *v226;
        *v226 = v326;
        LOBYTE(v326) = v227;
        v228 = (void **)*((_QWORD *)v226 + 1);
        *((_QWORD *)v226 + 1) = v327;
        v327 = (std::__shared_weak_count *)v228;
        sub_20EB07D94((void ***)&v327, v227);
        v323 = 0;
        LOBYTE(v322) = 2;
        v229 = (float *)v324[0];
        v230 = (double **)operator new(0x18uLL);
        sub_20F27E158(v230, v229, (float *)v137);
        v323 = (void **)v230;
        v231 = sub_20EB04C20((uint64_t)&v331, "laplacian_score");
        v232 = *v231;
        *v231 = v322;
        LOBYTE(v322) = v232;
        v233 = (void **)*((_QWORD *)v231 + 1);
        *((_QWORD *)v231 + 1) = v323;
        v323 = v233;
        sub_20EB07D94(&v323, v232);
        v234 = operator new();
        *(_BYTE *)v234 = v331;
        *(_QWORD *)(v234 + 8) = v332;
        LOBYTE(v331) = 0;
        v332 = 0;
        v328 = (void ***)v234;
        v235 = operator new();
        sub_21009A830(v235, (uint64_t *)&v328);
        v236 = (std::__shared_weak_count *)operator new();
        v236->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA15F60;
        v236->__shared_owners_ = 0;
        v236->__shared_weak_owners_ = 0;
        v236[1].__vftable = (std::__shared_weak_count_vtbl *)v235;
        v318 = v371[0];
        *(_QWORD *)&v319 = v136;
        *((void **)&v319 + 1) = v371[2];
        v320 = v235;
        v321 = v236;
        v237 = v328;
        v328 = 0;
        if (v237)
        {
          sub_20EB07D94(v237 + 1, *(unsigned __int8 *)v237);
          MEMORY[0x212BC6398](v237, 0x1022C40B06DCE69);
        }
        sub_20EB07D94(&v332, v331);
        v72 = v284;
        if (v229)
          operator delete(v229);
        if (v224)
          operator delete(v224);
        if (v219)
          operator delete(v219);
        if (v284 < 0)
        {
          sub_20E860C04(&v343, v10, (unint64_t)v283);
        }
        else
        {
          v343.n128_u64[0] = (unint64_t)v10;
          v343.n128_u64[1] = (unint64_t)v283;
          *(_DWORD *)v344 = v316[0];
          *(_DWORD *)&v344[3] = *(_DWORD *)((char *)v316 + 3);
          v345 = v284;
        }
        v347 = 0;
        v346 = 0;
        v348 = 1;
        sub_20EB054F8(&v339, (__int128 *)&v378);
        sub_20EB05604(v324, (uint64_t)&v339, 1uLL);
        *(_OWORD *)v290 = *(_OWORD *)v324;
        v291 = v325;
        v324[1] = 0;
        v325 = 0;
        v324[0] = 0;
        v292 = 1;
        v238 = sub_20F256414((uint64_t)v371, &v307, (uint64_t)v298, &v343, (__n128 *)v290);
        v239 = (*(uint64_t (**)(uint64_t, const char *, uint64_t, __n128))(*(_QWORD *)v285 + 48))(v285, "cv3d.reloc.submaps.keyframes", 28, v238);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v239 + 24))(v239))
        {
          v240 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v239 + 56))(v239);
          v241 = operator new();
          v242 = v318;
          *(_QWORD *)v241 = v318;
          v282 = v319;
          *(_OWORD *)(v241 + 8) = v319;
          v319 = 0uLL;
          v318 = 0;
          v322 = 0;
          v328 = (void ***)v241;
          v243 = (_QWORD *)operator new();
          *v243 = &off_24C9FC228;
          v243[1] = 0;
          if (v242)
            v244 = (v282 - (uint64_t)v242) >> 2;
          else
            v244 = 0;
          v243[2] = 0;
          v243[3] = v241;
          v328 = 0;
          *(_QWORD *)&v387 = v241;
          *((_QWORD *)&v387 + 1) = v243;
          v332 = 0;
          v331 = 0;
          v386 = sub_20F283BB0;
          sub_2100C2DD4(&v329, 11, (void (**)(uint64_t))&v386, v244, (uint64_t)v242);
          if (v386)
            v386(0);
          v245 = v329;
          v246 = (void **)&v330->__vftable;
          v329 = 0;
          v330 = 0;
          if ((*(_BYTE *)(v245 + 56) & 1) != 0)
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
            v247 = v330;
            if (v330)
            {
              v248 = (unint64_t *)&v330->__shared_owners_;
              do
                v249 = __ldaxr(v248);
              while (__stlxr(v249 - 1, v248));
              if (!v249)
              {
                ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
                std::__shared_weak_count::__release_weak(v247);
              }
            }
          }
          v250 = (uint64_t)v328;
          if (v328)
          {
            v251 = *v328;
            if (*v328)
            {
              v328[1] = v251;
              operator delete(v251);
            }
            MEMORY[0x212BC6398](v250, 0x20C40960023A9);
          }
          v252 = v322;
          if (v322)
          {
            v253 = *(void **)v322;
            if (*(_QWORD *)v322)
            {
              *(_QWORD *)(v322 + 8) = v253;
              operator delete(v253);
            }
            MEMORY[0x212BC6398](v252, 0x20C40960023A9);
          }
          v326 = v245;
          v327 = (std::__shared_weak_count *)v246;
          sub_20EB09798(&v326, (uint64_t)v371, &v386);
          v254 = v327;
          if (v327)
          {
            v255 = (unint64_t *)&v327->__shared_owners_;
            do
              v256 = __ldaxr(v255);
            while (__stlxr(v256 - 1, v255));
            if (!v256)
            {
              ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
              std::__shared_weak_count::__release_weak(v254);
            }
          }
          sub_20EB09324(v279, v240, (uint64_t)&v386);
          v257 = (std::__shared_weak_count *)*((_QWORD *)&v387 + 1);
          if (*((_QWORD *)&v387 + 1))
          {
            v258 = (unint64_t *)(*((_QWORD *)&v387 + 1) + 8);
            do
              v259 = __ldaxr(v258);
            while (__stlxr(v259 - 1, v258));
            if (!v259)
            {
              ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
              std::__shared_weak_count::__release_weak(v257);
            }
          }
        }
        sub_20EB0580C((uint64_t)v371);
        if (v292)
        {
          v260 = (void **)v290[0];
          if (v290[0])
          {
            for (k = (void **)v290[1]; k != v260; k -= 12)
            {
              if (*((_BYTE *)k - 16) && *((char *)k - 41) < 0)
                operator delete(*(k - 8));
              if (*((_BYTE *)k - 72) && *((char *)k - 73) < 0)
                operator delete(*(k - 12));
            }
            v290[1] = v260;
            operator delete(v260);
          }
        }
        v262 = (void **)v324[0];
        if (v324[0])
        {
          v263 = (void **)v324[1];
          v264 = v324[0];
          if (v324[1] != v324[0])
          {
            do
            {
              if (*((_BYTE *)v263 - 16) && *((char *)v263 - 41) < 0)
                operator delete(*(v263 - 8));
              if (*((_BYTE *)v263 - 72) && *((char *)v263 - 73) < 0)
                operator delete(*(v263 - 12));
              v263 -= 12;
            }
            while (v263 != v262);
            v264 = v324[0];
          }
          v324[1] = v262;
          operator delete(v264);
        }
        if (v342 && v341 < 0)
          operator delete(*(void **)&v340[8]);
        if (v340[0] && SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v339.__r_.__value_.__l.__data_);
        if (v348 && v345 < 0)
          operator delete((void *)v343.n128_u64[0]);
        if (v284 < 0)
        {
          sub_20E860C04(&v333, v10, (unint64_t)v283);
        }
        else
        {
          v333.n128_u64[0] = (unint64_t)v10;
          v333.n128_u64[1] = (unint64_t)v283;
          *(_DWORD *)v334 = v316[0];
          *(_DWORD *)&v334[3] = *(_DWORD *)((char *)v316 + 3);
          v335 = v284;
        }
        v337 = 0;
        v336 = 0;
        v338 = 1;
        sub_20EB054F8(&v339, (__int128 *)&v353);
        sub_20EB05604(v324, (uint64_t)&v339, 1uLL);
        *(_OWORD *)v287 = *(_OWORD *)v324;
        v288 = v325;
        v324[1] = 0;
        v325 = 0;
        v324[0] = 0;
        v289 = 1;
        v265 = sub_20F256414((uint64_t)v371, &v307, (uint64_t)v296, &v333, (__n128 *)v287);
        v266 = (*(uint64_t (**)(uint64_t, const char *, uint64_t, __n128))(*(_QWORD *)v285 + 48))(v285, "cv3d.reloc.submaps.keyframes", 28, v265);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v266 + 24))(v266))
        {
          v267 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v266 + 56))(v266);
          sub_20EB0962C(&v320, (uint64_t)v371, &v386);
          sub_20EB09324(v279, v267, (uint64_t)&v386);
          v268 = (std::__shared_weak_count *)*((_QWORD *)&v387 + 1);
          if (*((_QWORD *)&v387 + 1))
          {
            v269 = (unint64_t *)(*((_QWORD *)&v387 + 1) + 8);
            do
              v270 = __ldaxr(v269);
            while (__stlxr(v270 - 1, v269));
            if (!v270)
            {
              ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
              std::__shared_weak_count::__release_weak(v268);
            }
          }
        }
        sub_20EB0580C((uint64_t)v371);
        if (v289)
        {
          v271 = (void **)v287[0];
          if (v287[0])
          {
            for (m = (void **)v287[1]; m != v271; m -= 12)
            {
              if (*((_BYTE *)m - 16) && *((char *)m - 41) < 0)
                operator delete(*(m - 8));
              if (*((_BYTE *)m - 72) && *((char *)m - 73) < 0)
                operator delete(*(m - 12));
            }
            v287[1] = v271;
            operator delete(v271);
          }
        }
        v273 = (void **)v324[0];
        if (v324[0])
        {
          v274 = (void **)v324[1];
          v275 = v324[0];
          if (v324[1] != v324[0])
          {
            do
            {
              if (*((_BYTE *)v274 - 16) && *((char *)v274 - 41) < 0)
                operator delete(*(v274 - 8));
              if (*((_BYTE *)v274 - 72) && *((char *)v274 - 73) < 0)
                operator delete(*(v274 - 12));
              v274 -= 12;
            }
            while (v274 != v273);
            v275 = v324[0];
          }
          v324[1] = v273;
          operator delete(v275);
        }
        if (v342 && v341 < 0)
          operator delete(*(void **)&v340[8]);
        if (v340[0] && SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v339.__r_.__value_.__l.__data_);
        if (v338 && v335 < 0)
          operator delete((void *)v333.n128_u64[0]);
        v276 = v321;
        if (v321)
        {
          v277 = (unint64_t *)&v321->__shared_owners_;
          do
            v278 = __ldaxr(v277);
          while (__stlxr(v278 - 1, v277));
          if (!v278)
          {
            ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
            std::__shared_weak_count::__release_weak(v276);
          }
        }
        if (v318)
        {
          *(_QWORD *)&v319 = v318;
          operator delete(v318);
        }
      }
    }
  }
  if (v358 && SHIBYTE(v356) < 0)
    operator delete(*(void **)&v355[8]);
  if (v355[0] && SHIBYTE(v354) < 0)
    operator delete(v353);
  if ((v297 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v299) & 0x80000000) == 0)
      goto LABEL_498;
    goto LABEL_511;
  }
  operator delete(v296[0]);
  if (SHIBYTE(v299) < 0)
  {
LABEL_511:
    operator delete(v298[0]);
    if (v304 < 0)
      goto LABEL_512;
LABEL_499:
    if (!v385)
      goto LABEL_502;
    goto LABEL_500;
  }
LABEL_498:
  if ((v304 & 0x80000000) == 0)
    goto LABEL_499;
LABEL_512:
  operator delete(v303);
  if (!v385)
    goto LABEL_502;
LABEL_500:
  if (SHIBYTE(v383) < 0)
    operator delete((void *)v382);
LABEL_502:
  if (v381 && v380 < 0)
    operator delete(v378);
  if ((SHIBYTE(v312) & 0x80000000) == 0)
  {
    if ((v72 & 0x80000000) == 0)
      return;
LABEL_509:
    operator delete(v10);
    return;
  }
  operator delete(v311[0]);
  if (v72 < 0)
    goto LABEL_509;
}

void sub_20F255CC8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  _Unwind_Resume(a1);
}

__n128 sub_20F256414(uint64_t a1, double **a2, uint64_t a3, __n128 *a4, __n128 *a5)
{
  uint64_t v10;
  __n128 result;
  unsigned __int8 v12;
  _BYTE *v13;
  double v14;
  unsigned __int128 *n128_u64;
  unsigned __int128 v16;
  unint64_t v17;
  unint64_t v18;
  mach_timebase_info info;

  v10 = mach_continuous_time();
  v12 = atomic_load((unsigned __int8 *)&qword_254A6D7C8);
  if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_254A6D7C8))
  {
    mach_timebase_info(&info);
    LODWORD(v17) = info.numer;
    LODWORD(v18) = info.denom;
    *(double *)&qword_254A6D7C0 = (double)v17 / (double)v18;
    __cxa_guard_release(&qword_254A6D7C8);
  }
  *(_QWORD *)a1 = llround(*(double *)&qword_254A6D7C0 * (double)v10);
  *(_QWORD *)(a1 + 8) = 2;
  v13 = (_BYTE *)(a1 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    sub_20E860C04(v13, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v13 = *(_OWORD *)a3;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a3 + 16);
  }
  *(_BYTE *)(a1 + 48) = 0;
  v14 = **a2;
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 40) = 1;
  *(_BYTE *)(a1 + 72) = 0;
  result.n128_f64[0] = v14 * 1000000000.0;
  *(_QWORD *)(a1 + 80) = (uint64_t)result.n128_f64[0];
  *(_BYTE *)(a1 + 88) = 2;
  *(_BYTE *)(a1 + 96) = 1;
  *(_BYTE *)(a1 + 160) = 0;
  if (a4[3].n128_u8[0])
  {
    result = *a4;
    *(__n128 *)(a1 + 112) = *a4;
    *(_QWORD *)(a1 + 128) = a4[1].n128_u64[0];
    a4->n128_u64[1] = 0;
    a4[1].n128_u64[0] = 0;
    a4->n128_u64[0] = 0;
    n128_u64 = (unsigned __int128 *)a4[2].n128_u64;
    do
      v16 = __ldaxp(n128_u64);
    while (__stlxp(v16, n128_u64));
    *(_OWORD *)(a1 + 144) = v16;
    *(_BYTE *)(a1 + 160) = 1;
  }
  *(_BYTE *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  if (a5[1].n128_u8[8])
  {
    result = *a5;
    *(__n128 *)(a1 + 176) = *a5;
    *(_QWORD *)(a1 + 192) = a5[1].n128_u64[0];
    a5->n128_u64[1] = 0;
    a5[1].n128_u64[0] = 0;
    a5->n128_u64[0] = 0;
    *(_BYTE *)(a1 + 200) = 1;
  }
  return result;
}

void sub_20F2565AC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A6D7C8);
  _Unwind_Resume(a1);
}

uint64_t sub_20F2565C4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(void **)a1;
      if (!*(_QWORD *)a1)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
LABEL_6:
    *(_QWORD *)(a1 + 8) = v5;
    operator delete(v5);
  }
  return a1;
}

void sub_20F256638(_QWORD *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, char a5@<W4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  unsigned __int8 v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  unsigned __int8 v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  unsigned __int8 v34;
  unsigned __int8 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  unsigned __int8 v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t *v49;
  unsigned __int8 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  unsigned __int8 v55;
  _QWORD *v56;
  uint64_t v57;
  char v58;
  unint64_t v59;
  char *v60;
  _DWORD *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  int v70;
  uint64_t *v71;
  void **v72;
  char *v73;
  char *v74;
  unint64_t v75;
  char *v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  int v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  float64x2_t *v94;
  const void *v95;
  int v96;
  unint64_t v97;
  unint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  int v101;
  _BYTE *v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  _QWORD *v106;
  int v107;
  void *p_p;
  uint64_t v109;
  char v110;
  size_t v111;
  void **p_dst;
  float64_t v113;
  float64x2_t *v114;
  float64_t v115;
  uint64_t v116;
  uint64_t v117;
  const char *v118;
  uint64_t v119;
  const char *v120;
  size_t v121;
  unsigned __int8 v122;
  const char *v123;
  size_t v124;
  _BYTE *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  NSObject *v131;
  size_t v132;
  std::__shared_weak_count_vtbl *v133;
  std::__shared_weak_count *v134;
  size_t v135;
  size_t v136;
  _QWORD *v137;
  void *v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  char v143;
  _QWORD *v144;
  uint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *p_shared_owners;
  unint64_t v148;
  char *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  const char *v164;
  uint64_t v165;
  __int128 v166;
  uint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  _QWORD *v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  const char *v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  float64_t v191;
  uint64_t *v192;
  uint64_t *v193;
  int v194;
  unint64_t v195;
  unint64_t v196;
  _QWORD *v197;
  _BYTE *v198;
  void **v199;
  uint64_t *v200;
  uint64_t v201;
  unint64_t v202;
  unsigned int v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  unint64_t v208;
  uint64_t v209;
  _QWORD *v210;
  _QWORD *v211;
  int v212;
  _BYTE *v213;
  uint64_t v214;
  _QWORD *v215;
  _QWORD *v216;
  _QWORD *v217;
  int v218;
  void *v219;
  uint64_t v220;
  char v221;
  size_t v222;
  void **v223;
  unint64_t v224;
  unsigned int v225;
  unint64_t v226;
  unint64_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64_t v230;
  float64_t v231;
  float64x2_t v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  uint64_t v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  uint64_t v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  uint64_t v244;
  __int128 v245;
  uint64_t v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  uint64_t v252;
  __int128 v253;
  uint64_t v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  uint64_t v262;
  __int128 v263;
  __int128 v264;
  char *v265;
  __int128 v266;
  float64_t v267;
  float64_t v268;
  float64x2_t v269;
  __int128 v270;
  float64x2_t v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  char *v297;
  uint64_t v298;
  float64x2_t v299;
  float64x2_t v300;
  float64x2_t v301;
  float64x2_t v302;
  float64x2_t v303;
  float64x2_t v304;
  float64x2_t v305;
  float64x2_t v306;
  float64x2_t v307;
  float64x2_t v308;
  float64x2_t v309;
  float64x2_t v310;
  float64x2_t v311;
  float64x2_t v312;
  float64x2_t v313;
  float64x2_t v314;
  float64x2_t v315;
  float64x2_t v316;
  float64x2_t v317;
  float64x2_t v318;
  float64x2_t v319;
  uint64_t v320;
  int v321;
  float64_t v322;
  int8x16_t v323;
  float64_t v324;
  float64_t v325;
  int8x16_t v326;
  unint64_t v327;
  float64_t v328;
  float64x2_t v329;
  float64x2_t v330;
  BOOL v331;
  float64x2_t v332;
  float64x2_t v333;
  float64x2_t v334;
  float64x2_t v335;
  float64x2_t v336;
  float64x2_t v337;
  float64x2_t v338;
  float64x2_t v339;
  float64x2_t v340;
  float64x2_t v341;
  float64x2_t v342;
  float64x2_t v343;
  int8x16_t v344;
  int8x16_t v345;
  float64x2_t v346;
  float64x2_t v347;
  float64x2_t v348;
  float64x2_t v349;
  float64x2_t v350;
  float64x2_t v351;
  float64x2_t v352;
  float64x2_t v353;
  float64x2_t v354;
  float64x2_t v355;
  float64x2_t v356;
  float64x2_t v357;
  float64x2_t v358;
  float64x2_t v359;
  float64x2_t v360;
  float64x2_t v361;
  float64x2_t v362;
  float64x2_t v363;
  float64x2_t v364;
  float64x2_t v365;
  float64x2_t v366;
  float64x2_t v367;
  float64x2_t v368;
  float64x2_t v369;
  float64x2_t v370;
  float64x2_t v371;
  float64x2_t v372;
  float64x2_t v373;
  float64x2_t v374;
  float64x2_t v375;
  float64x2_t v376;
  float64x2_t v377;
  float64x2_t v378;
  float64x2_t v379;
  float64x2_t v380;
  float64x2_t v381;
  float64x2_t v382;
  float64x2_t v383;
  float64x2_t v384;
  float64x2_t v385;
  float64x2_t v386;
  float64x2_t v387;
  float64x2_t v388;
  float64x2_t v389;
  float64x2_t v390;
  float64x2_t v391;
  float64x2_t v392;
  float64x2_t v393;
  float64x2_t v394;
  float64x2_t v395;
  float64x2_t v396;
  float64x2_t v397;
  float64x2_t v398;
  float64x2_t v399;
  float64x2_t v400;
  float64x2_t v401;
  float64x2_t v402;
  float64x2_t v403;
  float64x2_t v404;
  float64x2_t v405;
  float64x2_t v406;
  float64x2_t v407;
  float64x2_t v408;
  float64x2_t v409;
  float64x2_t v410;
  float64x2_t v411;
  float64x2_t v412;
  float64x2_t v413;
  float64x2_t v414;
  float64x2_t v415;
  float64x2_t v416;
  float64x2_t v417;
  float64x2_t v418;
  float64x2_t v419;
  float64x2_t v420;
  float64x2_t v421;
  float64_t v422;
  float64_t v423;
  float64_t v424;
  float64_t v425;
  float64_t v426;
  float64_t v427;
  float64_t v428;
  void *v429;
  void *v430;
  float64_t v431;
  float64_t v432;
  uint64_t v433;
  void (***v434)(uint64_t);
  void (**v435)(uint64_t);
  float64_t v437;
  float64_t v438;
  float64_t v439;
  float64_t v440;
  void *v441;
  void *v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  char *v446;
  char *v447;
  void *v448;
  void *v449;
  uint64_t v450;
  uint64_t v451;
  __int128 v452;
  __int128 v453;
  __int128 v454;
  float64x2_t v455;
  __int128 v456;
  __int128 v457;
  uint64_t v458;
  float64x2_t v459;
  int64x2_t v460;
  float64x2_t v462;
  float64x2_t v463;
  float64x2_t v464;
  int8x16_t v465;
  float64x2_t v466;
  double v472;
  float64x2_t v473;
  double v476;
  float64_t v477;
  float64x2_t *v478;
  float64_t v479;
  uint64_t v480;
  uint64_t v481;
  const char *v482;
  uint64_t v483;
  const char *v484;
  size_t v485;
  unsigned __int8 v486;
  const char *v487;
  size_t v488;
  _BYTE *v489;
  uint64_t v490;
  uint64_t v491;
  char *v492;
  uint64_t v493;
  uint64_t v494;
  NSObject *v495;
  size_t v496;
  std::__shared_weak_count_vtbl *v497;
  std::__shared_weak_count *v498;
  size_t v499;
  size_t v500;
  _QWORD *v501;
  void *v502;
  int v503;
  uint64_t v504;
  uint64_t v505;
  _QWORD *v506;
  char v507;
  _QWORD *v508;
  uint64_t v509;
  std::__shared_weak_count *v510;
  unint64_t *v511;
  unint64_t v512;
  char *v513;
  unint64_t *v514;
  unint64_t v515;
  std::__shared_weak_count *v516;
  unint64_t *v517;
  unint64_t v518;
  unint64_t v519;
  std::__shared_weak_count *v520;
  unint64_t *v521;
  unint64_t v522;
  uint64_t v523;
  char *v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  const char *v528;
  uint64_t v529;
  __int128 v530;
  uint64_t v531;
  std::__shared_weak_count *v532;
  unint64_t *v533;
  unint64_t v534;
  std::__shared_weak_count *v535;
  unint64_t *v536;
  unint64_t v537;
  _QWORD *v538;
  std::__shared_weak_count *v539;
  unint64_t *v540;
  unint64_t v541;
  std::__shared_weak_count *v542;
  unint64_t *v543;
  unint64_t v544;
  std::__shared_weak_count *v545;
  unint64_t *v546;
  unint64_t v547;
  std::__shared_weak_count *v548;
  unint64_t *v549;
  unint64_t v550;
  const char *v551;
  std::__shared_weak_count *v552;
  unint64_t *v553;
  unint64_t v554;
  float64_t v555;
  float64x2_t v556;
  unint64_t v561;
  void *v562[2];
  float64x2_t v564;
  uint64_t *__src;
  const char *__srca;
  float64x2_t __srcb;
  uint64_t i;
  int v571;
  uint64_t *v572;
  float64x2_t v573;
  float64x2_t v574;
  unint64_t v575;
  void **v576;
  const char *v577;
  uint64_t v578;
  float64x2_t v579;
  float64x2_t v580;
  int v581;
  float64x2_t v583;
  void *__p;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v586;
  int v587;
  const char *v588;
  int v589;
  const char *v590;
  uint64_t v591;
  std::__shared_weak_count *v592;
  void **__dst;
  size_t v594;
  int64_t v595;
  uint64_t v596;
  uint64_t v597;
  __int128 v598;
  __int128 v599;
  __int128 v600;
  __int128 v601;
  __int128 v602;
  __int128 v603;
  uint64_t v604;
  uint64_t v605;
  __int128 v606;
  __int128 v607;
  __int128 v608;
  __int128 v609;
  __int128 v610;
  __int128 v611;
  uint64_t v612;
  uint64_t v613;
  __int128 v614;
  __int128 v615;
  __int128 v616;
  uint64_t v617;
  void *v618;
  void *v619;
  uint64_t v620;
  void *v621;
  void *v622;
  uint64_t v623;
  void *v624;
  char *v625;
  uint64_t v626;
  __int128 v627;
  __int128 v628;
  char v629;
  char v630;
  float64x2_t v631[6];
  float64x2_t v632;
  _BYTE v633[32];
  float64x2_t v634;
  _BYTE v635[96];
  _BYTE v636[32];
  __int128 v637;
  __int128 v638;
  uint64_t v639;
  __int128 v640;
  __int128 v641;
  __int128 v642;
  __int128 v643;
  uint64_t v644;
  __int128 v645;
  __int128 v646;
  __int128 v647;
  __int128 v648;
  uint64_t v649;
  __int128 v650;
  __int128 v651;
  __int128 v652;
  __int128 v653;
  uint64_t v654;
  __int128 v655;
  __int128 v656;
  __int128 v657;
  __int128 v658;
  uint64_t v659;
  __int128 v660;
  __int128 v661;
  __int128 v662;
  __int128 v663;
  uint64_t v664;
  _BYTE v665[696];
  _BYTE v666[648];
  _OWORD v667[43];
  __int128 v668;
  std::__shared_weak_count *v669;
  char *v670;
  std::__shared_weak_count *v671;
  _QWORD *v672;
  __int128 v673;
  _BYTE v674[24];
  _BYTE *v675;
  _BYTE v676[24];
  __int128 v677;
  char *v678;
  size_t v679;
  unint64_t v680;
  char v681;
  _QWORD v682[5];

  v682[2] = *MEMORY[0x24BDAC8D0];
  v630 = a3;
  v629 = a6;
  v628 = *(_OWORD *)(*a1 + 424);
  v9 = *(_QWORD *)(a2 + 1096);
  v10 = *(_QWORD *)(v9 + 56);
  __src = (uint64_t *)v9;
  LODWORD(v9) = *(_DWORD *)(v9 + 48);
  v561 = v10;
  *(_QWORD *)&v627 = v10;
  DWORD2(v627) = v9;
  v11 = *(_QWORD *)(a2 + 216);
  for (i = *(_QWORD *)(a2 + 224); v11 != i; v11 += 32)
  {
    if (!*(_BYTE *)(*a1 + 848) || *(_DWORD *)(*a1 + 852) == *(_DWORD *)v11)
    {
      v12 = *(_QWORD *)(v11 + 8);
      if (*(_QWORD *)(v11 + 16) != v12)
      {
        v13 = 0;
        v14 = 0;
        v578 = v11;
        do
        {
          v16 = *(_DWORD *)v11;
          if (*(_DWORD *)v11 >= 0x10000u)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
            v17 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v18 = qword_254A6DE40;
              v19 = qword_254A6DE48;
              while (v18 != v19)
              {
                v21 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v18;
                v20 = *(_QWORD *)(v18 + 8);
                v18 += 16;
                v21(v20, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
              }
            }
            v22 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v22 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
LABEL_604:
              abort();
            qword_254A6DE58(unk_254A6DE60, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
          }
          if (v14 >= 0x10000)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 39, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
            v23 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v23 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v24 = qword_254A6DE40;
              v25 = qword_254A6DE48;
              while (v24 != v25)
              {
                v27 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v24;
                v26 = *(_QWORD *)(v24 + 8);
                v24 += 16;
                v27(v26, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
              }
            }
            v28 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v28 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
              goto LABEL_604;
            qword_254A6DE58(unk_254A6DE60, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
          }
          if (v16 >= 0x10000)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
            v29 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v29 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v30 = qword_254A6DE40;
              v31 = qword_254A6DE48;
              while (v30 != v31)
              {
                v33 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v30;
                v32 = *(_QWORD *)(v30 + 8);
                v30 += 16;
                v33(v32, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
              }
            }
            v34 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v34 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
              goto LABEL_604;
            qword_254A6DE58(unk_254A6DE60, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
          }
          if (v14 >= 0x10000)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
            v35 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v35 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v36 = qword_254A6DE40;
              v37 = qword_254A6DE48;
              while (v36 != v37)
              {
                v39 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v36;
                v38 = *(_QWORD *)(v36 + 8);
                v36 += 16;
                v39(v38, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
              }
            }
            v40 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v40 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
              goto LABEL_604;
            qword_254A6DE58(unk_254A6DE60, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
          }
          v41 = *(uint64_t **)(a1[2] + 424);
          v42 = *v41;
          v43 = *(_QWORD *)(*v41 + 304);
          if (!v43)
            goto LABEL_57;
          v44 = (unsigned __int16)v14 | ((unsigned __int16)v16 << 16);
          v45 = v42 + 304;
          v46 = v45;
          do
          {
            v47 = *(_DWORD *)(v43 + 32);
            _CF = v47 >= v44;
            if (v47 >= v44)
              v49 = (uint64_t *)v43;
            else
              v49 = (uint64_t *)(v43 + 8);
            if (_CF)
              v46 = v43;
            v43 = *v49;
          }
          while (*v49);
          if (v46 != v45 && *(_DWORD *)(v46 + 32) <= v44)
          {
            v15 = v12 + 1664 * v13;
            *(float64x2_t *)((char *)&v631[4] + 8) = *(float64x2_t *)(v15 + 72);
            v631[5].f64[1] = *(float64_t *)(v15 + 88);
            memmove((void *)(v46 + 40), (const void *)v15, 0x48uLL);
            *(float64x2_t *)(v46 + 112) = *(float64x2_t *)((char *)&v631[4] + 8);
            *(float64_t *)(v46 + 128) = v631[5].f64[1];
          }
          else
          {
LABEL_57:
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MapDataController.cpp", 3268, (uint64_t)"T_I_to_C", 8, (uint64_t)"Cannot find the corresponding camera in viodatabase", 51, (void (*)(void **))sub_21023DDB0);
            v50 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v50 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v51 = qword_254A6DE40;
              v52 = qword_254A6DE48;
              while (v51 != v52)
              {
                v54 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v51;
                v53 = *(_QWORD *)(v51 + 8);
                v51 += 16;
                v54(v53, "T_I_to_C", 8, "Cannot find the corresponding camera in viodatabase", 51);
              }
            }
            v55 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v55 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
              goto LABEL_604;
            qword_254A6DE58(unk_254A6DE60, "T_I_to_C", 8, "Cannot find the corresponding camera in viodatabase", 51);
          }
          v11 = v578;
          v12 = *(_QWORD *)(v578 + 8);
          v13 = ++v14;
        }
        while (0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(v578 + 16) - v12) >> 7) > (unint64_t)v14);
      }
    }
  }
  v56 = a1;
  sub_20F283D18(**(_QWORD **)(a1[2] + 424), v561, *((uint64_t *)&v627 + 1), a2 + 240);
  (*(void (**)(_QWORD, __int128 *))(*(_QWORD *)v56[25] + 96))(v56[25], &v627);
  v57 = a9;
  v58 = a4;
  if (a3)
  {
    v60 = (char *)a1[5];
    v59 = a1[6];
    if ((unint64_t)v60 >= v59)
    {
      v62 = (char *)a1[4];
      v63 = (v60 - v62) >> 4;
      v64 = v63 + 1;
      if ((unint64_t)(v63 + 1) >> 60)
        sub_20E867F44();
      v65 = v59 - (_QWORD)v62;
      if (v65 >> 3 > v64)
        v64 = v65 >> 3;
      if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF0)
        v66 = 0xFFFFFFFFFFFFFFFLL;
      else
        v66 = v64;
      if (v66)
      {
        if (v66 >> 60)
          sub_20E877A38();
        v67 = (char *)operator new(16 * v66);
      }
      else
      {
        v67 = 0;
      }
      v68 = &v67[16 * v63];
      *(_OWORD *)v68 = v627;
      v61 = v68 + 16;
      if (v60 != v62)
      {
        do
        {
          v69 = *((_QWORD *)v60 - 2);
          v60 -= 16;
          v70 = *((_DWORD *)v60 + 2);
          *((_QWORD *)v68 - 2) = v69;
          v68 -= 16;
          *((_DWORD *)v68 + 2) = v70;
        }
        while (v60 != v62);
        v60 = (char *)a1[4];
      }
      a1[4] = v68;
      a1[5] = v61;
      a1[6] = &v67[16 * v66];
      if (v60)
        operator delete(v60);
    }
    else
    {
      *(_OWORD *)v60 = v627;
      v61 = v60 + 16;
    }
    a1[5] = v61;
  }
  v71 = __src;
  if (a4)
  {
    v74 = (char *)a1[7];
    v73 = (char *)a1[8];
    v72 = (void **)(a1 + 7);
    if (v74 == v73)
    {
      v77 = *(_QWORD *)(*a1 + 56);
      if (v77 <= (uint64_t)(a1[9] - (_QWORD)v74) >> 4)
      {
        v73 = (char *)a1[7];
        v75 = a1[9];
        if ((unint64_t)v74 < v75)
          goto LABEL_107;
        goto LABEL_113;
      }
      if (v77 >> 60)
        sub_20E867F44();
      v73 = (char *)operator new(16 * v77);
      a1[7] = v73;
      a1[8] = v73;
      a1[9] = &v73[16 * v77];
      v71 = __src;
      if (v74)
      {
        operator delete(v74);
        v73 = (char *)a1[8];
      }
    }
    v75 = a1[9];
    if ((unint64_t)v73 < v75)
    {
LABEL_107:
      *(_OWORD *)v73 = v627;
      v76 = v73 + 16;
      goto LABEL_128;
    }
LABEL_113:
    v78 = (char *)*v72;
    v79 = (v73 - (_BYTE *)*v72) >> 4;
    v80 = v79 + 1;
    if ((unint64_t)(v79 + 1) >> 60)
      sub_20E867F44();
    v81 = v75 - (_QWORD)v78;
    if (v81 >> 3 > v80)
      v80 = v81 >> 3;
    if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF0)
      v82 = 0xFFFFFFFFFFFFFFFLL;
    else
      v82 = v80;
    if (v82)
    {
      if (v82 >> 60)
        sub_20E877A38();
      v83 = (char *)operator new(16 * v82);
    }
    else
    {
      v83 = 0;
    }
    v84 = &v83[16 * v79];
    v85 = &v83[16 * v82];
    *(_OWORD *)v84 = v627;
    v76 = v84 + 16;
    if (v73 == v78)
    {
      v71 = __src;
      a1[7] = v84;
      a1[8] = v76;
      a1[9] = v85;
      if (!v73)
        goto LABEL_128;
    }
    else
    {
      v71 = __src;
      do
      {
        v86 = *((_QWORD *)v73 - 2);
        v73 -= 16;
        v87 = *((_DWORD *)v73 + 2);
        *((_QWORD *)v84 - 2) = v86;
        v84 -= 16;
        *((_DWORD *)v84 + 2) = v87;
      }
      while (v73 != v78);
      v73 = (char *)*v72;
      a1[7] = v84;
      a1[8] = v76;
      a1[9] = v85;
      if (!v73)
        goto LABEL_128;
    }
    operator delete(v73);
LABEL_128:
    a1[8] = v76;
  }
  v625 = 0;
  v624 = 0;
  v626 = 0;
  v622 = 0;
  v621 = 0;
  v623 = 0;
  v619 = 0;
  v618 = 0;
  v620 = 0;
  v675 = 0;
  v88 = operator new(0x60uLL);
  v89 = a2;
  *v88 = &off_24C9FC288;
  v88[1] = &v627;
  v88[2] = a1;
  v88[3] = &v621;
  v88[4] = &v630;
  v88[5] = a2;
  v88[6] = a2 + 240;
  v88[7] = &v628;
  v88[8] = a2 + 1072;
  v88[9] = &v624;
  v88[10] = &v629;
  v88[11] = &v618;
  v675 = v88;
  v90 = (uint64_t *)v71[10];
  if (v90)
  {
    if (*v71 == v71[1])
    {
      v93 = 5;
      do
        v90 = (uint64_t *)*v90;
      while (v90);
      goto LABEL_147;
    }
    do
    {
      v91 = *v71;
      v92 = v71[1];
      if (*v71 != v92)
      {
        while ((unsigned __int16)HIWORD(*((_DWORD *)v90 + 4)) != *(_DWORD *)v91
             || 0x6FB586FB586FB587 * ((uint64_t)(*(_QWORD *)(v91 + 16) - *(_QWORD *)(v91 + 8)) >> 3) <= (unint64_t)(unsigned __int16)*((_DWORD *)v90 + 4))
        {
          v91 += 104;
          if (v91 == v92)
            goto LABEL_132;
        }
        LODWORD(v631[0].f64[0]) = *((_DWORD *)v90 + 4);
        if (!v675)
          sub_20E86D37C();
        (*(void (**)(_BYTE *, float64x2_t *, uint64_t *))(*(_QWORD *)v675 + 48))(v675, v631, v90 + 3);
      }
LABEL_132:
      v90 = (uint64_t *)*v90;
    }
    while (v90);
    v88 = v675;
    if (v675 == v674)
    {
      v93 = 4;
      v88 = v674;
      goto LABEL_147;
    }
    if (!v675)
      goto LABEL_148;
  }
  v93 = 5;
LABEL_147:
  (*(void (**)(void))(*v88 + 8 * v93))();
LABEL_148:
  if (!v630)
    sub_20FCC78EC((_QWORD *)a1[2], **(_QWORD ***)(a1[2] + 424), a1 + 4);
  v94 = (float64x2_t *)(a2 + 1144);
  if (!*(_BYTE *)(a2 + 4288) || (a5 & 1) != 0)
  {
LABEL_315:
    v197 = v56 + 26;
    if (*((_BYTE *)v56 + 224))
      goto LABEL_316;
LABEL_380:
    *(_OWORD *)v197 = v627;
    *((_BYTE *)v56 + 224) = 1;
    *(_BYTE *)v57 = 0;
    *(_BYTE *)(v57 + 96) = 0;
    v198 = (_BYTE *)*v56;
    if (!*(_BYTE *)(*v56 + 2500))
      goto LABEL_388;
    goto LABEL_381;
  }
  v616 = 0u;
  v615 = 0u;
  v614 = 0u;
  v612 = 0;
  v611 = 0u;
  v610 = 0u;
  v609 = 0u;
  v608 = 0u;
  v607 = 0u;
  v606 = 0u;
  v604 = 0;
  v603 = 0u;
  v602 = 0u;
  v601 = 0u;
  v600 = 0u;
  v599 = 0u;
  v598 = 0u;
  v597 = 0x3CB0000000000000;
  *(_QWORD *)&v601 = 0x3CB0000000000000;
  v605 = 0x3CB0000000000000;
  *(_QWORD *)&v609 = 0x3CB0000000000000;
  v613 = 0x3CB0000000000000;
  v95 = (const void *)(a2 + 1272);
  v617 = 0x3CB0000000000000;
  if (!sub_20FC85388((void *)(a2 + 1272), (float64x2_t *)&v597))
  {
    sub_20F24E118(&v596);
    if (**(int **)(v596 + 56) <= 2)
    {
      v96 = *(unsigned __int8 *)(v596 + 72);
      v97 = sub_20E8C31DC(v596, "OSLogSurrogateAppender", 1, 0);
      v98 = v97;
      if (v96 || v97)
      {
        sub_20E863438((uint64_t)v631);
        v99 = sub_20E86A980((float64x2_t *)v631[1].f64, (uint64_t)"Fail to convert odometry PG covariance to info ", 47);
        v100 = sub_20E86A980(v99, (uint64_t)"state: ", 7);
        v101 = *(_DWORD *)(a2 + 1120);
        __p = *(void **)(a2 + 1112);
        LODWORD(rep) = v101;
        sub_210216370((uint64_t)&__p);
        if (v676[23] >= 0)
          v102 = v676;
        else
          v102 = *(_BYTE **)v676;
        if (v676[23] >= 0)
          v103 = v676[23];
        else
          v103 = *(_QWORD *)&v676[8];
        v104 = sub_20E86A980(v100, (uint64_t)v102, v103);
        v105 = sub_20E86A980(v104, (uint64_t)"-> ", 3);
        v106 = sub_20E86A980(v105, (uint64_t)"state: ", 7);
        v107 = *(_DWORD *)(a2 + 1136);
        *(_QWORD *)&v668 = *(_QWORD *)(a2 + 1128);
        DWORD2(v668) = v107;
        sub_210216370((uint64_t)&v668);
        if (v586 >= 0)
          p_p = &__p;
        else
          p_p = __p;
        if (v586 >= 0)
          v109 = HIBYTE(v586);
        else
          v109 = rep;
        sub_20E86A980(v106, (uint64_t)p_p, v109);
        if (SHIBYTE(v586) < 0)
        {
          operator delete(__p);
          if ((v676[23] & 0x80000000) == 0)
          {
LABEL_170:
            v110 = v633[8];
            v575 = v98;
            if ((v633[8] & 0x10) == 0)
            {
LABEL_171:
              if ((v110 & 8) == 0)
              {
                v111 = 0;
                HIBYTE(v595) = 0;
                p_dst = (void **)&__dst;
                goto LABEL_189;
              }
              v114 = (float64x2_t *)&v631[2].f64[1];
              v113 = v631[3].f64[1];
LABEL_181:
              v115 = v114->f64[0];
              v111 = *(_QWORD *)&v113 - *(_QWORD *)&v114->f64[0];
              if (v111 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v111 >= 0x17)
              {
                v116 = (v111 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v111 | 7) != 0x17)
                  v116 = v111 | 7;
                v117 = v116 + 1;
                p_dst = (void **)operator new(v116 + 1);
                v594 = v111;
                v595 = v117 | 0x8000000000000000;
                __dst = p_dst;
              }
              else
              {
                HIBYTE(v595) = LOBYTE(v113) - LOBYTE(v114->f64[0]);
                p_dst = (void **)&__dst;
                if (!v111)
                {
LABEL_189:
                  *((_BYTE *)p_dst + v111) = 0;
                  __p = &v596;
                  rep = std::chrono::steady_clock::now().__d_.__rep_;
                  v586 = std::chrono::system_clock::now().__d_.__rep_;
                  v587 = 2;
                  v588 = "unknown file";
                  v589 = 719;
                  v591 = 0;
                  v592 = 0;
                  v590 = "unknown function";
                  if (v595 >= 0)
                    v118 = (const char *)&__dst;
                  else
                    v118 = (const char *)__dst;
                  v119 = *(_QWORD *)__p;
                  v120 = (const char *)(*(_QWORD *)__p + 16);
                  __srca = v120;
                  if (*(char *)(*(_QWORD *)__p + 39) < 0)
                  {
                    v120 = *(const char **)(v119 + 16);
                    v121 = *(_QWORD *)(v119 + 24);
                  }
                  else
                  {
                    v121 = *(unsigned __int8 *)(*(_QWORD *)__p + 39);
                  }
                  v571 = v96;
                  v122 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                  if ((v122 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
                  {
                    sub_20E9E46F8((uint64_t)v676);
                    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v676);
                    if ((_BYTE)v677 && (v676[23] & 0x80000000) != 0)
                      operator delete(*(void **)v676);
                    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A4A510);
                    v57 = a9;
                    v56 = a1;
                  }
                  if (byte_254A4A4F8[23] >= 0)
                    v123 = byte_254A4A4F8;
                  else
                    v123 = *(const char **)byte_254A4A4F8;
                  if (byte_254A4A4F8[23] >= 0)
                    v124 = byte_254A4A4F8[23];
                  else
                    v124 = *(_QWORD *)&byte_254A4A4F8[8];
                  *(_QWORD *)v676 = os_log_create(v123, v120);
                  v125 = &v676[8];
                  if (v124 > 0x7FFFFFFFFFFFFFF7)
                    sub_20E860B7C();
                  if (v124 >= 0x17)
                  {
                    v126 = (v124 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v124 | 7) != 0x17)
                      v126 = v124 | 7;
                    v127 = v126 + 1;
                    v125 = operator new(v126 + 1);
                    *(_QWORD *)&v676[16] = v124;
                    *(_QWORD *)&v677 = v127 | 0x8000000000000000;
                    *(_QWORD *)&v676[8] = v125;
                    v56 = a1;
                  }
                  else
                  {
                    BYTE7(v677) = v124;
                    if (!v124)
                    {
LABEL_210:
                      v125[v124] = 0;
                      BYTE8(v677) = 1;
                      v128 = (char *)&v678;
                      if (v121 > 0x7FFFFFFFFFFFFFF7)
                        sub_20E860B7C();
                      if (v121 >= 0x17)
                      {
                        v129 = (v121 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v121 | 7) != 0x17)
                          v129 = v121 | 7;
                        v130 = v129 + 1;
                        v128 = (char *)operator new(v129 + 1);
                        v679 = v121;
                        v680 = v130 | 0x8000000000000000;
                        v678 = v128;
                      }
                      else
                      {
                        HIBYTE(v680) = v121;
                        if (!v121)
                        {
LABEL_218:
                          v128[v121] = 0;
                          v681 = 1;
                          v131 = *(NSObject **)v676;
                          if (SHIBYTE(v680) < 0)
                            operator delete(v678);
                          if (BYTE8(v677) && SBYTE7(v677) < 0)
                            operator delete(*(void **)&v676[8]);
                          if (*(_QWORD *)v676)
                            os_release(*(void **)v676);
                          if (!v575 || !*(_QWORD *)(v575 + 24))
                          {
                            os_log_type_enabled(v131, OS_LOG_TYPE_DEBUG);
                            *(_DWORD *)v676 = 136315138;
                            *(_QWORD *)&v676[4] = v118;
                            v138 = (void *)_os_log_send_and_compose_impl();
                            v58 = a4;
                            v95 = (const void *)(a2 + 1272);
                            v139 = v571;
                            if (v138)
                              free(v138);
                            goto LABEL_297;
                          }
                          v132 = _os_log_pack_size();
                          v133 = (std::__shared_weak_count_vtbl *)operator new(v132, (std::align_val_t)8uLL);
                          v134 = (std::__shared_weak_count *)operator new();
                          v134->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                          v134->__shared_owners_ = 0;
                          v134->__shared_weak_owners_ = 0;
                          v134[1].__vftable = v133;
                          *(_QWORD *)&v668 = v133;
                          *((_QWORD *)&v668 + 1) = v133;
                          v671 = 0;
                          v669 = v134;
                          v670 = 0;
                          v135 = strlen(v118);
                          if (v135 > 0x7FFFFFFFFFFFFFF7)
                            sub_20E860B7C();
                          v136 = v135;
                          if (v135 >= 0x17)
                          {
                            v140 = (v135 & 0xFFFFFFFFFFFFFFF8) + 8;
                            if ((v135 | 7) != 0x17)
                              v140 = v135 | 7;
                            v141 = v140 + 1;
                            v137 = operator new(v140 + 1);
                            *((_QWORD *)&v673 + 1) = v141 | 0x8000000000000000;
                            v672 = v137;
                            *(_QWORD *)&v673 = v136;
                          }
                          else
                          {
                            HIBYTE(v673) = v135;
                            v137 = &v672;
                            if (!v135)
                            {
LABEL_237:
                              *((_BYTE *)v137 + v136) = 0;
                              v142 = v672;
                              v682[0] = v673;
                              *(_QWORD *)((char *)v682 + 7) = *(_QWORD *)((char *)&v673 + 7);
                              v143 = HIBYTE(v673);
                              v144 = operator new(0x38uLL);
                              v144[1] = 0;
                              v144[2] = 0;
                              v144[3] = off_24C9ABC20;
                              *v144 = &off_24C9ABBD0;
                              v145 = v682[0];
                              v144[4] = v142;
                              v144[5] = v145;
                              *(_QWORD *)((char *)v144 + 47) = *(_QWORD *)((char *)v682 + 7);
                              *((_BYTE *)v144 + 55) = v143;
                              v682[0] = 0;
                              *(_QWORD *)((char *)v682 + 7) = 0;
                              v146 = v671;
                              v670 = (char *)(v144 + 3);
                              v671 = (std::__shared_weak_count *)v144;
                              if (v146)
                              {
                                p_shared_owners = (unint64_t *)&v146->__shared_owners_;
                                do
                                  v148 = __ldaxr(p_shared_owners);
                                while (__stlxr(v148 - 1, p_shared_owners));
                                if (!v148)
                                {
                                  ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
                                  std::__shared_weak_count::__release_weak(v146);
                                }
                              }
                              *(_OWORD *)v676 = v668;
                              v149 = v670;
                              *(_QWORD *)&v676[16] = v669;
                              if (v669)
                              {
                                v150 = (unint64_t *)&v669->__shared_owners_;
                                do
                                  v151 = __ldxr(v150);
                                while (__stxr(v151 + 1, v150));
                              }
                              v152 = v671;
                              *(_QWORD *)&v677 = v149;
                              *((_QWORD *)&v677 + 1) = v671;
                              if (v671)
                              {
                                v153 = (unint64_t *)&v671->__shared_owners_;
                                do
                                  v154 = __ldxr(v153);
                                while (__stxr(v154 + 1, v153));
                                v678 = v149;
                                do
                                  v155 = __ldaxr(v153);
                                while (__stlxr(v155 - 1, v153));
                                if (!v155)
                                {
                                  ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
                                  std::__shared_weak_count::__release_weak(v152);
                                }
                              }
                              else
                              {
                                v678 = v149;
                              }
                              v156 = v669;
                              if (v669)
                              {
                                v157 = (unint64_t *)&v669->__shared_owners_;
                                do
                                  v158 = __ldaxr(v157);
                                while (__stlxr(v158 - 1, v157));
                                if (!v158)
                                {
                                  ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
                                  std::__shared_weak_count::__release_weak(v156);
                                }
                              }
                              v159 = *(_QWORD *)v676;
                              if (v678[31] >= 0)
                                v160 = v678 + 8;
                              else
                                v160 = (char *)*((_QWORD *)v678 + 1);
                              v161 = _os_log_pack_fill();
                              *(_DWORD *)v161 = 136315138;
                              *(_QWORD *)(v161 + 4) = v160;
                              v162 = operator new();
                              v163 = *(unsigned __int8 *)(v119 + 39);
                              v164 = *(const char **)(v119 + 16);
                              v165 = *(_QWORD *)(v119 + 24);
                              v166 = v677;
                              *(_OWORD *)(v162 + 8) = *(_OWORD *)&v676[8];
                              if ((v163 & 0x80u) != 0)
                                v163 = v165;
                              else
                                v164 = __srca;
                              *(_QWORD *)v162 = v159;
                              *(_QWORD *)&v676[8] = 0;
                              *(_QWORD *)&v676[16] = 0;
                              *(_OWORD *)(v162 + 24) = v166;
                              v677 = 0uLL;
                              *(_QWORD *)(v162 + 40) = v164;
                              *(_QWORD *)(v162 + 48) = v163;
                              *(_BYTE *)(v162 + 56) = 2;
                              v672 = 0;
                              *(_QWORD *)&v668 = v162;
                              (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v575 + 24) + 40))(*(_QWORD *)(v575 + 24), &v668);
                              v167 = v668;
                              *(_QWORD *)&v668 = 0;
                              v58 = a4;
                              v95 = (const void *)(a2 + 1272);
                              v139 = v571;
                              if (v167)
                              {
                                v168 = *(std::__shared_weak_count **)(v167 + 32);
                                if (v168)
                                {
                                  v169 = (unint64_t *)&v168->__shared_owners_;
                                  do
                                    v170 = __ldaxr(v169);
                                  while (__stlxr(v170 - 1, v169));
                                  if (!v170)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
                                    std::__shared_weak_count::__release_weak(v168);
                                  }
                                }
                                v171 = *(std::__shared_weak_count **)(v167 + 16);
                                if (v171)
                                {
                                  v172 = (unint64_t *)&v171->__shared_owners_;
                                  do
                                    v173 = __ldaxr(v172);
                                  while (__stlxr(v173 - 1, v172));
                                  if (!v173)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
                                    std::__shared_weak_count::__release_weak(v171);
                                  }
                                }
                                MEMORY[0x212BC6398](v167, 0x10F0C40B62ED6C6);
                                v174 = v672;
                                v672 = 0;
                                if (v174)
                                {
                                  v175 = (std::__shared_weak_count *)v174[4];
                                  if (v175)
                                  {
                                    v176 = (unint64_t *)&v175->__shared_owners_;
                                    do
                                      v177 = __ldaxr(v176);
                                    while (__stlxr(v177 - 1, v176));
                                    if (!v177)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
                                      std::__shared_weak_count::__release_weak(v175);
                                    }
                                  }
                                  v178 = (std::__shared_weak_count *)v174[2];
                                  if (v178)
                                  {
                                    v179 = (unint64_t *)&v178->__shared_owners_;
                                    do
                                      v180 = __ldaxr(v179);
                                    while (__stlxr(v180 - 1, v179));
                                    if (!v180)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
                                      std::__shared_weak_count::__release_weak(v178);
                                    }
                                  }
                                  MEMORY[0x212BC6398](v174, 0x10F0C40B62ED6C6);
                                }
                              }
                              v181 = (std::__shared_weak_count *)*((_QWORD *)&v677 + 1);
                              if (*((_QWORD *)&v677 + 1))
                              {
                                v182 = (unint64_t *)(*((_QWORD *)&v677 + 1) + 8);
                                do
                                  v183 = __ldaxr(v182);
                                while (__stlxr(v183 - 1, v182));
                                if (!v183)
                                {
                                  ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
                                  std::__shared_weak_count::__release_weak(v181);
                                }
                              }
                              v184 = *(std::__shared_weak_count **)&v676[16];
                              if (*(_QWORD *)&v676[16])
                              {
                                v185 = (unint64_t *)(*(_QWORD *)&v676[16] + 8);
                                do
                                  v186 = __ldaxr(v185);
                                while (__stlxr(v186 - 1, v185));
                                if (!v186)
                                {
                                  ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
                                  std::__shared_weak_count::__release_weak(v184);
                                }
                              }
LABEL_297:
                              if (v139)
                              {
                                v187 = (const char *)&__dst;
                                if (v595 < 0)
                                  v187 = (const char *)__dst;
                                sub_20E8C003C((uint64_t)&__p, "%s", v187);
                                sub_20E863570((uint64_t)&__p);
                              }
                              sub_20E863570((uint64_t)&__p);
                              v188 = v592;
                              if (v592)
                              {
                                v189 = (unint64_t *)&v592->__shared_owners_;
                                do
                                  v190 = __ldaxr(v189);
                                while (__stlxr(v190 - 1, v189));
                                if (!v190)
                                {
                                  ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
                                  std::__shared_weak_count::__release_weak(v188);
                                }
                              }
                              if (SHIBYTE(v595) < 0)
                                operator delete(__dst);
                              v631[0].f64[0] = *(float64_t *)MEMORY[0x24BEDB7F0];
                              v191 = *(double *)(MEMORY[0x24BEDB7F0] + 72);
                              *(float64_t *)((char *)v631[0].f64 + *(_QWORD *)(*(_QWORD *)&v631[0].f64[0] - 24)) = *(float64_t *)(MEMORY[0x24BEDB7F0] + 64);
                              v631[1].f64[0] = v191;
                              *(_QWORD *)&v631[1].f64[1] = MEMORY[0x24BEDB848] + 16;
                              if (SHIBYTE(v632.f64[1]) < 0)
                                operator delete(*(void **)&v631[5].f64[1]);
                              std::streambuf::~streambuf();
                              std::iostream::~basic_iostream();
                              MEMORY[0x212BC6290](&v633[16]);
                              v89 = a2;
                              goto LABEL_311;
                            }
                          }
                          memcpy(v137, v118, v136);
                          goto LABEL_237;
                        }
                      }
                      memmove(v128, v120, v121);
                      goto LABEL_218;
                    }
                  }
                  memmove(v125, v123, v124);
                  goto LABEL_210;
                }
              }
              memmove(p_dst, *(const void **)&v115, v111);
              goto LABEL_189;
            }
LABEL_177:
            v113 = *(double *)v633;
            if (*(_QWORD *)v633 < *(_QWORD *)&v631[4].f64[1])
            {
              *(float64_t *)v633 = v631[4].f64[1];
              v113 = v631[4].f64[1];
            }
            v114 = &v631[4];
            goto LABEL_181;
          }
        }
        else if ((v676[23] & 0x80000000) == 0)
        {
          goto LABEL_170;
        }
        operator delete(*(void **)v676);
        v110 = v633[8];
        v575 = v98;
        if ((v633[8] & 0x10) == 0)
          goto LABEL_171;
        goto LABEL_177;
      }
    }
  }
LABEL_311:
  v192 = (uint64_t *)(v89 + 1112);
  v193 = (uint64_t *)(v89 + 1128);
  if (sub_20F259ECC(v56, (uint64_t *)(v89 + 1112), (uint64_t *)(v89 + 1128), (uint64_t)v94, (uint64_t)&v597, 2))
  {
    sub_20F24E118(&v596);
    if (**(int **)(v596 + 56) > 2)
      goto LABEL_315;
    v194 = *(unsigned __int8 *)(v596 + 72);
    v195 = sub_20E8C31DC(v596, "OSLogSurrogateAppender", 1, 0);
    v196 = v195;
    if (!v194 && !v195)
      goto LABEL_315;
    sub_20E863438((uint64_t)v631);
    v210 = sub_20E86A980((float64x2_t *)v631[1].f64, (uint64_t)"Failed to add the odometry edge between ", 40);
    v211 = sub_20E86A980(v210, (uint64_t)"state: ", 7);
    v212 = *(_DWORD *)(v89 + 1120);
    __p = *(void **)(v89 + 1112);
    LODWORD(rep) = v212;
    sub_210216370((uint64_t)&__p);
    if (v676[23] >= 0)
      v213 = v676;
    else
      v213 = *(_BYTE **)v676;
    if (v676[23] >= 0)
      v214 = v676[23];
    else
      v214 = *(_QWORD *)&v676[8];
    v215 = sub_20E86A980(v211, (uint64_t)v213, v214);
    v216 = sub_20E86A980(v215, (uint64_t)"-> ", 3);
    v217 = sub_20E86A980(v216, (uint64_t)"state: ", 7);
    v218 = *(_DWORD *)(v89 + 1136);
    *(_QWORD *)&v668 = *(_QWORD *)(v89 + 1128);
    DWORD2(v668) = v218;
    sub_210216370((uint64_t)&v668);
    if (v586 >= 0)
      v219 = &__p;
    else
      v219 = __p;
    if (v586 >= 0)
      v220 = HIBYTE(v586);
    else
      v220 = rep;
    sub_20E86A980(v217, (uint64_t)v219, v220);
    if (SHIBYTE(v586) < 0)
    {
      operator delete(__p);
      if ((v676[23] & 0x80000000) == 0)
      {
LABEL_345:
        v221 = v633[8];
        if ((v633[8] & 0x10) == 0)
        {
LABEL_346:
          if ((v221 & 8) == 0)
          {
            v222 = 0;
            HIBYTE(v595) = 0;
            v223 = (void **)&__dst;
            goto LABEL_481;
          }
          v478 = (float64x2_t *)&v631[2].f64[1];
          v477 = v631[3].f64[1];
LABEL_473:
          v479 = v478->f64[0];
          v222 = *(_QWORD *)&v477 - *(_QWORD *)&v478->f64[0];
          if (v222 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v222 >= 0x17)
          {
            v480 = (v222 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v222 | 7) != 0x17)
              v480 = v222 | 7;
            v481 = v480 + 1;
            v223 = (void **)operator new(v480 + 1);
            v594 = v222;
            v595 = v481 | 0x8000000000000000;
            __dst = v223;
          }
          else
          {
            HIBYTE(v595) = LOBYTE(v477) - LOBYTE(v478->f64[0]);
            v223 = (void **)&__dst;
            if (!v222)
            {
LABEL_481:
              *((_BYTE *)v223 + v222) = 0;
              __p = &v596;
              rep = std::chrono::steady_clock::now().__d_.__rep_;
              v586 = std::chrono::system_clock::now().__d_.__rep_;
              v587 = 2;
              v588 = "unknown file";
              v589 = 769;
              v591 = 0;
              v592 = 0;
              v590 = "unknown function";
              if (v595 >= 0)
                v482 = (const char *)&__dst;
              else
                v482 = (const char *)__dst;
              v483 = *(_QWORD *)__p;
              v484 = (const char *)(*(_QWORD *)__p + 16);
              v577 = v484;
              if (*(char *)(*(_QWORD *)__p + 39) < 0)
              {
                v484 = *(const char **)(v483 + 16);
                v485 = *(_QWORD *)(v483 + 24);
              }
              else
              {
                v485 = *(unsigned __int8 *)(*(_QWORD *)__p + 39);
              }
              v581 = v194;
              v486 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v486 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
              {
                sub_20E9E46F8((uint64_t)v676);
                sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v676);
                if ((_BYTE)v677 && (v676[23] & 0x80000000) != 0)
                  operator delete(*(void **)v676);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                __cxa_guard_release(&qword_254A4A510);
                v57 = a9;
              }
              if (byte_254A4A4F8[23] >= 0)
                v487 = byte_254A4A4F8;
              else
                v487 = *(const char **)byte_254A4A4F8;
              if (byte_254A4A4F8[23] >= 0)
                v488 = byte_254A4A4F8[23];
              else
                v488 = *(_QWORD *)&byte_254A4A4F8[8];
              *(_QWORD *)v676 = os_log_create(v487, v484);
              v489 = &v676[8];
              if (v488 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v488 >= 0x17)
              {
                v490 = (v488 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v488 | 7) != 0x17)
                  v490 = v488 | 7;
                v491 = v490 + 1;
                v489 = operator new(v490 + 1);
                *(_QWORD *)&v676[16] = v488;
                *(_QWORD *)&v677 = v491 | 0x8000000000000000;
                *(_QWORD *)&v676[8] = v489;
                v57 = a9;
              }
              else
              {
                BYTE7(v677) = v488;
                if (!v488)
                {
LABEL_502:
                  v489[v488] = 0;
                  BYTE8(v677) = 1;
                  v492 = (char *)&v678;
                  if (v485 > 0x7FFFFFFFFFFFFFF7)
                    sub_20E860B7C();
                  if (v485 >= 0x17)
                  {
                    v493 = (v485 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v485 | 7) != 0x17)
                      v493 = v485 | 7;
                    v494 = v493 + 1;
                    v492 = (char *)operator new(v493 + 1);
                    v679 = v485;
                    v680 = v494 | 0x8000000000000000;
                    v678 = v492;
                  }
                  else
                  {
                    HIBYTE(v680) = v485;
                    if (!v485)
                    {
LABEL_510:
                      v492[v485] = 0;
                      v681 = 1;
                      v495 = *(NSObject **)v676;
                      if (SHIBYTE(v680) < 0)
                        operator delete(v678);
                      if (BYTE8(v677) && SBYTE7(v677) < 0)
                        operator delete(*(void **)&v676[8]);
                      if (*(_QWORD *)v676)
                        os_release(*(void **)v676);
                      if (!v196 || !*(_QWORD *)(v196 + 24))
                      {
                        os_log_type_enabled(v495, OS_LOG_TYPE_DEBUG);
                        *(_DWORD *)v676 = 136315138;
                        *(_QWORD *)&v676[4] = v482;
                        v502 = (void *)_os_log_send_and_compose_impl();
                        v56 = a1;
                        v58 = a4;
                        v503 = v581;
                        if (v502)
                          free(v502);
LABEL_589:
                        if (v503)
                        {
                          v551 = (const char *)&__dst;
                          if (v595 < 0)
                            v551 = (const char *)__dst;
                          sub_20E8C003C((uint64_t)&__p, "%s", v551);
                          sub_20E863570((uint64_t)&__p);
                        }
                        sub_20E863570((uint64_t)&__p);
                        v552 = v592;
                        if (v592)
                        {
                          v553 = (unint64_t *)&v592->__shared_owners_;
                          do
                            v554 = __ldaxr(v553);
                          while (__stlxr(v554 - 1, v553));
                          if (!v554)
                          {
                            ((void (*)(std::__shared_weak_count *))v552->__on_zero_shared)(v552);
                            std::__shared_weak_count::__release_weak(v552);
                          }
                        }
                        if (SHIBYTE(v595) < 0)
                          operator delete(__dst);
                        v631[0].f64[0] = *(float64_t *)MEMORY[0x24BEDB7F0];
                        v555 = *(double *)(MEMORY[0x24BEDB7F0] + 72);
                        *(float64_t *)((char *)v631[0].f64 + *(_QWORD *)(*(_QWORD *)&v631[0].f64[0] - 24)) = *(float64_t *)(MEMORY[0x24BEDB7F0] + 64);
                        v631[1].f64[0] = v555;
                        *(_QWORD *)&v631[1].f64[1] = MEMORY[0x24BEDB848] + 16;
                        if (SHIBYTE(v632.f64[1]) < 0)
                          operator delete(*(void **)&v631[5].f64[1]);
                        std::streambuf::~streambuf();
                        std::iostream::~basic_iostream();
                        MEMORY[0x212BC6290](&v633[16]);
                        v89 = a2;
                        v197 = v56 + 26;
                        if (!*((_BYTE *)v56 + 224))
                          goto LABEL_380;
                        goto LABEL_316;
                      }
                      v496 = _os_log_pack_size();
                      v497 = (std::__shared_weak_count_vtbl *)operator new(v496, (std::align_val_t)8uLL);
                      v498 = (std::__shared_weak_count *)operator new();
                      v498->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                      v498->__shared_owners_ = 0;
                      v498->__shared_weak_owners_ = 0;
                      v498[1].__vftable = v497;
                      *(_QWORD *)&v668 = v497;
                      *((_QWORD *)&v668 + 1) = v497;
                      v671 = 0;
                      v669 = v498;
                      v670 = 0;
                      v499 = strlen(v482);
                      if (v499 > 0x7FFFFFFFFFFFFFF7)
                        sub_20E860B7C();
                      v500 = v499;
                      v58 = a4;
                      if (v499 >= 0x17)
                      {
                        v504 = (v499 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v499 | 7) != 0x17)
                          v504 = v499 | 7;
                        v505 = v504 + 1;
                        v501 = operator new(v504 + 1);
                        *((_QWORD *)&v673 + 1) = v505 | 0x8000000000000000;
                        v672 = v501;
                        *(_QWORD *)&v673 = v500;
                      }
                      else
                      {
                        HIBYTE(v673) = v499;
                        v501 = &v672;
                        if (!v499)
                        {
LABEL_529:
                          *((_BYTE *)v501 + v500) = 0;
                          v506 = v672;
                          v682[0] = v673;
                          *(_QWORD *)((char *)v682 + 7) = *(_QWORD *)((char *)&v673 + 7);
                          v507 = HIBYTE(v673);
                          v508 = operator new(0x38uLL);
                          v508[1] = 0;
                          v508[2] = 0;
                          v508[3] = off_24C9ABC20;
                          *v508 = &off_24C9ABBD0;
                          v509 = v682[0];
                          v508[4] = v506;
                          v508[5] = v509;
                          *(_QWORD *)((char *)v508 + 47) = *(_QWORD *)((char *)v682 + 7);
                          *((_BYTE *)v508 + 55) = v507;
                          v682[0] = 0;
                          *(_QWORD *)((char *)v682 + 7) = 0;
                          v510 = v671;
                          v670 = (char *)(v508 + 3);
                          v671 = (std::__shared_weak_count *)v508;
                          if (v510)
                          {
                            v511 = (unint64_t *)&v510->__shared_owners_;
                            do
                              v512 = __ldaxr(v511);
                            while (__stlxr(v512 - 1, v511));
                            if (!v512)
                            {
                              ((void (*)(std::__shared_weak_count *))v510->__on_zero_shared)(v510);
                              std::__shared_weak_count::__release_weak(v510);
                            }
                          }
                          *(_OWORD *)v676 = v668;
                          v513 = v670;
                          *(_QWORD *)&v676[16] = v669;
                          if (v669)
                          {
                            v514 = (unint64_t *)&v669->__shared_owners_;
                            do
                              v515 = __ldxr(v514);
                            while (__stxr(v515 + 1, v514));
                          }
                          v516 = v671;
                          *(_QWORD *)&v677 = v513;
                          *((_QWORD *)&v677 + 1) = v671;
                          if (v671)
                          {
                            v517 = (unint64_t *)&v671->__shared_owners_;
                            do
                              v518 = __ldxr(v517);
                            while (__stxr(v518 + 1, v517));
                            v678 = v513;
                            do
                              v519 = __ldaxr(v517);
                            while (__stlxr(v519 - 1, v517));
                            if (!v519)
                            {
                              ((void (*)(std::__shared_weak_count *))v516->__on_zero_shared)(v516);
                              std::__shared_weak_count::__release_weak(v516);
                            }
                          }
                          else
                          {
                            v678 = v513;
                          }
                          v520 = v669;
                          if (v669)
                          {
                            v521 = (unint64_t *)&v669->__shared_owners_;
                            do
                              v522 = __ldaxr(v521);
                            while (__stlxr(v522 - 1, v521));
                            if (!v522)
                            {
                              ((void (*)(std::__shared_weak_count *))v520->__on_zero_shared)(v520);
                              std::__shared_weak_count::__release_weak(v520);
                            }
                          }
                          v523 = *(_QWORD *)v676;
                          if (v678[31] >= 0)
                            v524 = v678 + 8;
                          else
                            v524 = (char *)*((_QWORD *)v678 + 1);
                          v525 = _os_log_pack_fill();
                          *(_DWORD *)v525 = 136315138;
                          *(_QWORD *)(v525 + 4) = v524;
                          v526 = operator new();
                          v527 = *(unsigned __int8 *)(v483 + 39);
                          v528 = *(const char **)(v483 + 16);
                          v529 = *(_QWORD *)(v483 + 24);
                          v530 = v677;
                          *(_OWORD *)(v526 + 8) = *(_OWORD *)&v676[8];
                          if ((v527 & 0x80u) != 0)
                            v527 = v529;
                          else
                            v528 = v577;
                          *(_QWORD *)v526 = v523;
                          *(_QWORD *)&v676[8] = 0;
                          *(_QWORD *)&v676[16] = 0;
                          *(_OWORD *)(v526 + 24) = v530;
                          v677 = 0uLL;
                          *(_QWORD *)(v526 + 40) = v528;
                          *(_QWORD *)(v526 + 48) = v527;
                          *(_BYTE *)(v526 + 56) = 2;
                          v672 = 0;
                          *(_QWORD *)&v668 = v526;
                          (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v196 + 24) + 40))(*(_QWORD *)(v196 + 24), &v668);
                          v531 = v668;
                          *(_QWORD *)&v668 = 0;
                          v56 = a1;
                          v503 = v581;
                          if (v531)
                          {
                            v532 = *(std::__shared_weak_count **)(v531 + 32);
                            if (v532)
                            {
                              v533 = (unint64_t *)&v532->__shared_owners_;
                              do
                                v534 = __ldaxr(v533);
                              while (__stlxr(v534 - 1, v533));
                              if (!v534)
                              {
                                ((void (*)(std::__shared_weak_count *))v532->__on_zero_shared)(v532);
                                std::__shared_weak_count::__release_weak(v532);
                              }
                            }
                            v535 = *(std::__shared_weak_count **)(v531 + 16);
                            if (v535)
                            {
                              v536 = (unint64_t *)&v535->__shared_owners_;
                              do
                                v537 = __ldaxr(v536);
                              while (__stlxr(v537 - 1, v536));
                              if (!v537)
                              {
                                ((void (*)(std::__shared_weak_count *))v535->__on_zero_shared)(v535);
                                std::__shared_weak_count::__release_weak(v535);
                              }
                            }
                            MEMORY[0x212BC6398](v531, 0x10F0C40B62ED6C6);
                            v538 = v672;
                            v672 = 0;
                            if (v538)
                            {
                              v539 = (std::__shared_weak_count *)v538[4];
                              if (v539)
                              {
                                v540 = (unint64_t *)&v539->__shared_owners_;
                                do
                                  v541 = __ldaxr(v540);
                                while (__stlxr(v541 - 1, v540));
                                if (!v541)
                                {
                                  ((void (*)(std::__shared_weak_count *))v539->__on_zero_shared)(v539);
                                  std::__shared_weak_count::__release_weak(v539);
                                }
                              }
                              v542 = (std::__shared_weak_count *)v538[2];
                              if (v542)
                              {
                                v543 = (unint64_t *)&v542->__shared_owners_;
                                do
                                  v544 = __ldaxr(v543);
                                while (__stlxr(v544 - 1, v543));
                                if (!v544)
                                {
                                  ((void (*)(std::__shared_weak_count *))v542->__on_zero_shared)(v542);
                                  std::__shared_weak_count::__release_weak(v542);
                                }
                              }
                              MEMORY[0x212BC6398](v538, 0x10F0C40B62ED6C6);
                            }
                          }
                          v545 = (std::__shared_weak_count *)*((_QWORD *)&v677 + 1);
                          if (*((_QWORD *)&v677 + 1))
                          {
                            v546 = (unint64_t *)(*((_QWORD *)&v677 + 1) + 8);
                            do
                              v547 = __ldaxr(v546);
                            while (__stlxr(v547 - 1, v546));
                            if (!v547)
                            {
                              ((void (*)(std::__shared_weak_count *))v545->__on_zero_shared)(v545);
                              std::__shared_weak_count::__release_weak(v545);
                            }
                          }
                          v548 = *(std::__shared_weak_count **)&v676[16];
                          if (*(_QWORD *)&v676[16])
                          {
                            v549 = (unint64_t *)(*(_QWORD *)&v676[16] + 8);
                            do
                              v550 = __ldaxr(v549);
                            while (__stlxr(v550 - 1, v549));
                            if (!v550)
                            {
                              ((void (*)(std::__shared_weak_count *))v548->__on_zero_shared)(v548);
                              std::__shared_weak_count::__release_weak(v548);
                            }
                          }
                          goto LABEL_589;
                        }
                      }
                      memcpy(v501, v482, v500);
                      goto LABEL_529;
                    }
                  }
                  memmove(v492, v484, v485);
                  goto LABEL_510;
                }
              }
              memmove(v489, v487, v488);
              goto LABEL_502;
            }
          }
          memmove(v223, *(const void **)&v479, v222);
          goto LABEL_481;
        }
LABEL_469:
        v477 = *(double *)v633;
        if (*(_QWORD *)v633 < *(_QWORD *)&v631[4].f64[1])
        {
          *(float64_t *)v633 = v631[4].f64[1];
          v477 = v631[4].f64[1];
        }
        v478 = &v631[4];
        goto LABEL_473;
      }
    }
    else if ((v676[23] & 0x80000000) == 0)
    {
      goto LABEL_345;
    }
    operator delete(*(void **)v676);
    v221 = v633[8];
    if ((v633[8] & 0x10) == 0)
      goto LABEL_346;
    goto LABEL_469;
  }
  v199 = *(void ***)(v56[2] + 424);
  v200 = (uint64_t *)((char *)*v199 + 56);
  v201 = *v200;
  if (*v200)
  {
    v202 = *(_QWORD *)(v89 + 1112);
    v203 = *(_DWORD *)(v89 + 1120);
    v204 = (uint64_t)*v199 + 56;
    v205 = v204;
    v206 = *(_QWORD *)v204;
    do
    {
      v207 = *(_QWORD *)(v206 + 32);
      if (v207 < v202)
      {
        v206 += 8;
      }
      else if (v207 == v202)
      {
        if (*(_DWORD *)(v206 + 40) < v203)
          v206 += 8;
        else
          v205 = v206;
      }
      else
      {
        v205 = v206;
      }
      v206 = *(_QWORD *)v206;
    }
    while (v206);
    if ((uint64_t *)v205 == v200
      || (v208 = *(_QWORD *)(v205 + 32), v202 < v208)
      || v202 == v208 && *(_DWORD *)(v205 + 40) > v203)
    {
      v209 = 0;
    }
    else
    {
      v209 = *(_QWORD *)(v205 + 48);
    }
    v224 = *(_QWORD *)(v89 + 1128);
    v225 = *(_DWORD *)(v89 + 1136);
    do
    {
      v226 = *(_QWORD *)(v201 + 32);
      if (v226 < v224)
      {
        v201 += 8;
      }
      else if (v226 == v224)
      {
        if (*(_DWORD *)(v201 + 40) < v225)
          v201 += 8;
        else
          v204 = v201;
      }
      else
      {
        v204 = v201;
      }
      v201 = *(_QWORD *)v201;
    }
    while (v201);
    if ((uint64_t *)v204 != v200)
    {
      v227 = *(_QWORD *)(v204 + 32);
      if (v224 >= v227 && (v224 != v227 || *(_DWORD *)(v204 + 40) <= v225))
      {
        if (v209)
        {
          v458 = *(_QWORD *)(v204 + 48);
          if (v458)
          {
            v459.f64[0] = *(float64_t *)(v209 + 16);
            v460 = *(int64x2_t *)(v209 + 24);
            _Q4 = *(int64x2_t *)(v209 + 48);
            v462 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v209, v460);
            v463 = (float64x2_t)vdupq_laneq_s64(_Q4, 1);
            v459.f64[1] = *(float64_t *)(v209 + 40);
            v464 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v209, v460);
            v465 = vextq_s8((int8x16_t)v464, (int8x16_t)v463, 8uLL);
            v463.f64[0] = *(float64_t *)(v209 + 88);
            v466 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v462, *(double *)(v209 + 72)), v464, *(float64x2_t *)(v209 + 72), 1), v459, v463.f64[0]);
            _D7 = *(_QWORD *)(v209 + 80);
            __asm { FMLA            D17, D7, V4.D[1] }
            v463.f64[0] = _D17 + *(double *)(v209 + 64) * v463.f64[0];
            _Q4.i64[0] = v465.i64[1];
            *(_QWORD *)&v464.f64[1] = v465.i64[0];
            __asm { FMOV            V2.2D, #1.0 }
            *(_QWORD *)&_Q2.f64[0] = *(_OWORD *)&vnegq_f64(v463);
            v472 = *(double *)(v458 + 88);
            v473 = *(float64x2_t *)(v458 + 72);
            _Q0 = vsubq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v462, v473.f64[0]), v464, v473, 1), v459, v472), v466);
            _Q1 = vaddq_f64(_Q2, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)(v209 + 48), v473.f64[0]), (float64x2_t)_Q4.u64[0], v473, 1), (float64x2_t)*(unint64_t *)(v209 + 64), v472));
            *(_QWORD *)&v476 = *(_OWORD *)&vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(a2 + 1160), _Q0.f64[0]), *(float64x2_t *)(a2 + 1192), _Q0, 1), *(float64x2_t *)(a2 + 1224), _Q1.f64[0]), *(float64x2_t *)(a2 + 1256), _Q1, 1);
            _Q1.f64[0] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(a2 + 1144), *(double *)&_Q0), *(float64x2_t *)(a2 + 1176), _Q0, 1), *(float64x2_t *)(a2 + 1208), *(double *)&_Q1), *(float64x2_t *)(a2 + 1240), _Q1, 1).f64[1];
            __asm { FMLA            D0, D1, V2.D[1] }
            if (sqrt(vmlad_n_f64(_Q0.f64[0], v476, v476)) > *(double *)(*v56 + 544))
              *(_BYTE *)(v56[29] + 32) = 0;
          }
        }
      }
    }
  }
  if (*(_BYTE *)(a2 + 4280))
  {
    v572 = (uint64_t *)(v89 + 1112);
    *(_OWORD *)v676 = v627;
    v228 = *(float64x2_t *)(v89 + 1572);
    v229 = *(float64x2_t *)(v89 + 1592);
    v631[0] = *(float64x2_t *)(v89 + 1560);
    *(float64x2_t *)((char *)v631 + 12) = v228;
    v631[2] = v229;
    v230 = *(double *)(v89 + 1608);
    *(float64x2_t *)((char *)&v631[3] + 8) = *(float64x2_t *)(v89 + 1616);
    v231 = *(double *)(v89 + 1632);
    v631[3].f64[0] = v230;
    v631[4].f64[1] = v231;
    v232 = *(float64x2_t *)(v89 + 1656);
    v631[5] = *(float64x2_t *)(v89 + 1640);
    v632 = v232;
    v233 = *(_OWORD *)(v89 + 1672);
    v234 = *(_OWORD *)(v89 + 1688);
    v235 = *(_OWORD *)(v89 + 1720);
    v236 = *(_QWORD *)(v89 + 1736);
    v634 = *(float64x2_t *)(v89 + 1704);
    *(_OWORD *)v635 = v235;
    *(_OWORD *)v633 = v233;
    *(_OWORD *)&v633[16] = v234;
    *(_OWORD *)&v635[24] = *(_OWORD *)(v89 + 1744);
    v237 = *(_OWORD *)(v89 + 1760);
    v238 = *(_OWORD *)(v89 + 1776);
    v239 = *(_OWORD *)(v89 + 1792);
    v240 = *(_QWORD *)(v89 + 1808);
    *(_QWORD *)&v635[16] = v236;
    *(_QWORD *)&v635[88] = v240;
    *(_OWORD *)&v635[72] = v239;
    *(_OWORD *)&v635[56] = v238;
    *(_OWORD *)&v635[40] = v237;
    v241 = *(_OWORD *)(v89 + 1816);
    v242 = *(_OWORD *)(v89 + 1832);
    v243 = *(_OWORD *)(v89 + 1848);
    v244 = *(_QWORD *)(v89 + 1880);
    v638 = *(_OWORD *)(v89 + 1864);
    v637 = v243;
    *(_OWORD *)v636 = v241;
    *(_OWORD *)&v636[16] = v242;
    v245 = *(_OWORD *)(v89 + 1888);
    v246 = *(_QWORD *)(v89 + 1952);
    v247 = *(_OWORD *)(v89 + 1904);
    v248 = *(_OWORD *)(v89 + 1936);
    v642 = *(_OWORD *)(v89 + 1920);
    v643 = v248;
    v640 = v245;
    v641 = v247;
    v639 = v244;
    v644 = v246;
    v249 = *(_OWORD *)(v89 + 1960);
    v250 = *(_OWORD *)(v89 + 1976);
    v251 = *(_OWORD *)(v89 + 1992);
    v252 = *(_QWORD *)(v89 + 2024);
    v648 = *(_OWORD *)(v89 + 2008);
    v647 = v251;
    v645 = v249;
    v646 = v250;
    v253 = *(_OWORD *)(v89 + 2032);
    v254 = *(_QWORD *)(v89 + 2096);
    v255 = *(_OWORD *)(v89 + 2048);
    v256 = *(_OWORD *)(v89 + 2080);
    v652 = *(_OWORD *)(v89 + 2064);
    v653 = v256;
    v650 = v253;
    v651 = v255;
    v649 = v252;
    v654 = v254;
    v257 = *(_OWORD *)(v89 + 2104);
    v258 = *(_OWORD *)(v89 + 2120);
    v259 = *(_OWORD *)(v89 + 2136);
    v260 = *(_OWORD *)(v89 + 2152);
    v659 = *(_QWORD *)(v89 + 2168);
    v658 = v260;
    v657 = v259;
    v655 = v257;
    v656 = v258;
    v261 = *(_OWORD *)(v89 + 2176);
    v262 = *(_QWORD *)(v89 + 2240);
    v263 = *(_OWORD *)(v89 + 2192);
    v264 = *(_OWORD *)(v89 + 2224);
    v662 = *(_OWORD *)(v89 + 2208);
    v663 = v264;
    v664 = v262;
    v660 = v261;
    v661 = v263;
    v576 = v199;
    memcpy(v665, (const void *)(v89 + 2248), sizeof(v665));
    memcpy(v666, (const void *)(v89 + 2944), sizeof(v666));
    memcpy(v667, (const void *)(v89 + 3592), sizeof(v667));
    v265 = (char *)v576[11];
    if (v265 >= v576[12])
    {
      v297 = sub_20E956F0C(v576 + 10, v676, (__int128 *)v631);
    }
    else
    {
      *(_OWORD *)v265 = *(_OWORD *)v676;
      v266 = *(__int128 *)((char *)v631 + 12);
      *((float64x2_t *)v265 + 1) = v631[0];
      *(_OWORD *)(v265 + 28) = v266;
      v267 = v631[3].f64[0];
      *((float64x2_t *)v265 + 3) = v631[2];
      *((float64_t *)v265 + 8) = v267;
      v268 = v631[4].f64[1];
      *(float64x2_t *)(v265 + 72) = *(float64x2_t *)((char *)&v631[3] + 8);
      *((float64_t *)v265 + 11) = v268;
      v269 = v632;
      *((float64x2_t *)v265 + 6) = v631[5];
      *((float64x2_t *)v265 + 7) = v269;
      *((_OWORD *)v265 + 8) = *(_OWORD *)v633;
      v270 = *(_OWORD *)&v633[16];
      v271 = v634;
      v272 = *(_OWORD *)v635;
      *((_QWORD *)v265 + 24) = *(_QWORD *)&v635[16];
      *((float64x2_t *)v265 + 10) = v271;
      *((_OWORD *)v265 + 11) = v272;
      *((_OWORD *)v265 + 9) = v270;
      *(_OWORD *)(v265 + 200) = *(_OWORD *)&v635[24];
      v273 = *(_OWORD *)&v635[40];
      v274 = *(_OWORD *)&v635[56];
      v275 = *(_OWORD *)&v635[72];
      *((_QWORD *)v265 + 33) = *(_QWORD *)&v635[88];
      *(_OWORD *)(v265 + 248) = v275;
      *(_OWORD *)(v265 + 232) = v274;
      *(_OWORD *)(v265 + 216) = v273;
      *((_OWORD *)v265 + 17) = *(_OWORD *)v636;
      v276 = *(_OWORD *)&v636[16];
      v277 = v637;
      v278 = v638;
      *((_QWORD *)v265 + 42) = v639;
      *((_OWORD *)v265 + 19) = v277;
      *((_OWORD *)v265 + 20) = v278;
      *((_OWORD *)v265 + 18) = v276;
      *(_OWORD *)(v265 + 344) = v640;
      v279 = v641;
      v280 = v642;
      v281 = v643;
      *((_QWORD *)v265 + 51) = v644;
      *(_OWORD *)(v265 + 376) = v280;
      *(_OWORD *)(v265 + 392) = v281;
      *(_OWORD *)(v265 + 360) = v279;
      *((_OWORD *)v265 + 26) = v645;
      v282 = v646;
      v283 = v647;
      v284 = v648;
      *((_QWORD *)v265 + 60) = v649;
      *((_OWORD *)v265 + 28) = v283;
      *((_OWORD *)v265 + 29) = v284;
      *((_OWORD *)v265 + 27) = v282;
      *(_OWORD *)(v265 + 488) = v650;
      v285 = v651;
      v286 = v652;
      v287 = v653;
      *((_QWORD *)v265 + 69) = v654;
      *(_OWORD *)(v265 + 520) = v286;
      *(_OWORD *)(v265 + 536) = v287;
      *(_OWORD *)(v265 + 504) = v285;
      *((_OWORD *)v265 + 35) = v655;
      v288 = v656;
      v289 = v657;
      v290 = v658;
      *((_QWORD *)v265 + 78) = v659;
      *((_OWORD *)v265 + 37) = v289;
      *((_OWORD *)v265 + 38) = v290;
      *((_OWORD *)v265 + 36) = v288;
      *(_OWORD *)(v265 + 632) = v660;
      v291 = v661;
      v292 = v662;
      v293 = v663;
      *((_QWORD *)v265 + 87) = v664;
      *(_OWORD *)(v265 + 664) = v292;
      *(_OWORD *)(v265 + 680) = v293;
      *(_OWORD *)(v265 + 648) = v291;
      memcpy(v265 + 704, v665, 0x288uLL);
      v294 = *(_QWORD *)&v665[664];
      *(_OWORD *)(v265 + 1352) = *(_OWORD *)&v665[648];
      *((_QWORD *)v265 + 171) = v294;
      v295 = *(_QWORD *)&v665[688];
      *((_OWORD *)v265 + 86) = *(_OWORD *)&v665[672];
      *((_QWORD *)v265 + 174) = v295;
      memcpy(v265 + 1400, v666, 0x288uLL);
      memcpy(v265 + 2048, v667, 0x288uLL);
      v296 = *((_QWORD *)&v667[41] + 1);
      *(_OWORD *)(v265 + 2696) = *(_OWORD *)((char *)&v667[40] + 8);
      *((_QWORD *)v265 + 339) = v296;
      *((_OWORD *)v265 + 170) = v667[42];
      v297 = v265 + 2736;
    }
    v56 = a1;
    v58 = a4;
    v89 = a2;
    v192 = v572;
    v576[11] = v297;
    v57 = a9;
  }
  if (*((_BYTE *)v56 + 3552))
  {
    if ((v56[49] != *v192 || *((_DWORD *)v56 + 100) != *(_DWORD *)(v89 + 1120))
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/VIOPoseFactorUtil.cpp", 357, (uint64_t)"accumulated_pose_info.state_id1 == delta_pose_info.state_id0", 60, (uint64_t)&unk_2102BA29B, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v298 = *v193;
    *((_DWORD *)v56 + 100) = *((_DWORD *)v193 + 2);
    v56[49] = v298;
    v299 = *(float64x2_t *)(a2 + 1160);
    v301 = *(float64x2_t *)(a2 + 1176);
    v300 = *(float64x2_t *)(a2 + 1192);
    v303 = *(float64x2_t *)(a2 + 1208);
    v302 = *(float64x2_t *)(a2 + 1224);
    v305 = *(float64x2_t *)(a2 + 1240);
    v304 = *(float64x2_t *)(a2 + 1256);
    v307 = *(float64x2_t *)(v56 + 51);
    v306 = *(float64x2_t *)(v56 + 53);
    v309 = *(float64x2_t *)(v56 + 55);
    v308 = *(float64x2_t *)(v56 + 57);
    v311 = *(float64x2_t *)(v56 + 59);
    v310 = *(float64x2_t *)(v56 + 61);
    v313 = *(float64x2_t *)(v56 + 63);
    v312 = *(float64x2_t *)(v56 + 65);
    v314 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v94, v307.f64[0]), v301, v307, 1), v303, v306.f64[0]), v305, v306, 1);
    v315 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v299, v307.f64[0]), v300, v307, 1), v302, v306.f64[0]), v304, v306, 1);
    v316 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v94, v309.f64[0]), v301, v309, 1), v303, v308.f64[0]), v305, v308, 1);
    v317 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v299, v309.f64[0]), v300, v309, 1), v302, v308.f64[0]), v304, v308, 1);
    v318 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v94, v311.f64[0]), v301, v311, 1), v303, v310.f64[0]), v305, v310, 1);
    v319 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v94, v313.f64[0]), v301, v313, 1), v303, v312.f64[0]), v305, v312, 1);
    *(float64x2_t *)(v56 + 51) = v314;
    *(float64x2_t *)(v56 + 53) = v315;
    *(float64x2_t *)(v56 + 55) = v316;
    *(float64x2_t *)(v56 + 57) = v317;
    *(float64x2_t *)(v56 + 59) = v318;
    *(float64x2_t *)(v56 + 61) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v299, v311.f64[0]), v300, v311, 1), v302, v310.f64[0]), v304, v310, 1);
    *(float64x2_t *)(v56 + 63) = v319;
    *(float64x2_t *)(v56 + 65) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v299, v313.f64[0]), v300, v313, 1), v302, v312.f64[0]), v304, v312, 1);
    sub_20EB70E00((uint64_t)(v56 + 51));
    v320 = 0;
    v321 = 0;
    v322 = *(double *)(a2 + 1160);
    v323 = *(int8x16_t *)v94;
    *(_QWORD *)&v324 = vextq_s8(v323, v323, 8uLL).u64[0];
    v325 = *(double *)(a2 + 1192);
    v326 = *(int8x16_t *)(a2 + 1176);
    v327 = vextq_s8(v326, v326, 8uLL).u64[0];
    v328 = *(double *)(a2 + 1224);
    v329 = *(float64x2_t *)(a2 + 1208);
    v330 = (float64x2_t)vextq_s8((int8x16_t)v329, (int8x16_t)v329, 8uLL);
    v631[1].f64[0] = v322;
    v631[0] = (float64x2_t)v323;
    v631[4].f64[0] = v325;
    v631[3] = (float64x2_t)v326;
    *(float64_t *)v633 = v328;
    v632 = v329;
    do
    {
      v634.f64[v320] = 0.0;
      v331 = v321 < 2;
      if (v321 < 2)
        ++v321;
      else
        v321 = 0;
      if (v331)
        ++v320;
      else
        v320 += 4;
    }
    while (v320 != 18);
    v332 = *(float64x2_t *)(a2 + 1240);
    v333.f64[0] = v324;
    v333.f64[1] = v325;
    v334 = vmulq_f64(v333, v332);
    v333.f64[0] = *(float64_t *)(a2 + 1256);
    v335 = (float64x2_t)vzip1q_s64((int64x2_t)v333, (int64x2_t)v332);
    *(_QWORD *)&v336.f64[0] = v326.i64[0];
    *(_QWORD *)&v336.f64[1] = v327;
    v337 = (float64x2_t)vextq_s8((int8x16_t)v332, (int8x16_t)v333, 8uLL);
    v338.f64[0] = v322;
    *(_QWORD *)&v338.f64[1] = v323.i64[0];
    v339 = vmulq_f64(v338, v337);
    v338.f64[0] = v328;
    v338.f64[1] = v329.f64[0];
    v340.f64[0] = v330.f64[0];
    v340.f64[1] = v328;
    v341 = vmlsq_f64(vmulq_f64(v338, v337), v340, v335);
    v340.f64[0] = v324;
    v340.f64[1] = v322;
    v342.f64[0] = v325;
    *(_QWORD *)&v342.f64[1] = v326.i64[0];
    v343 = vmlsq_f64(v339, v340, v335);
    v344 = (int8x16_t)vmlsq_f64(vmulq_f64(v336, v335), v342, v332);
    *(_QWORD *)&v335.f64[0] = v323.i64[0];
    *(_QWORD *)&v335.f64[1] = v327;
    v345 = (int8x16_t)vmlsq_f64(v334, v335, v337);
    *(float64x2_t *)((char *)&v631[1] + 8) = v343;
    v347 = *(float64x2_t *)(v56 + 67);
    v346 = *(float64x2_t *)(v56 + 69);
    *(_QWORD *)&v631[2].f64[1] = v345.i64[0];
    *(float64x2_t *)&v633[8] = v341;
    *(_QWORD *)&v633[24] = *(_OWORD *)&vmlsq_laneq_f64(vmulq_f64(v330, v332), v329, v332, 1);
    v326.i64[1] = v327;
    *(int8x16_t *)&v635[56] = v326;
    v348 = *(float64x2_t *)(v56 + 71);
    v349 = *(float64x2_t *)(v56 + 73);
    *(float64_t *)&v635[24] = v322;
    *(float64_t *)&v635[72] = v325;
    v556 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v631[0], v347.f64[0]), v631[3], v347, 1), v632, v346.f64[0]), v634, v346, 1), *(float64x2_t *)&v635[32], v348.f64[0]), *(float64x2_t *)&v635[80], v348, 1);
    *(_QWORD *)&v631[5].f64[1] = v344.i64[1];
    *(int8x16_t *)((char *)&v631[4] + 8) = vextq_s8(v345, v344, 8uLL);
    *(float64_t *)&v323.i64[1] = v324;
    *(int8x16_t *)&v635[8] = v323;
    v329.f64[1] = v330.f64[0];
    *(float64x2_t *)&v636[8] = v329;
    *(float64_t *)&v636[24] = v328;
    v579 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v631[1], v347.f64[0]), v631[4], v347, 1), *(float64x2_t *)v633, v346.f64[0]), *(float64x2_t *)v635, v346, 1), *(float64x2_t *)&v635[48], v348.f64[0]), *(float64x2_t *)v636, v348, 1);
    v583 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v631[2], v347.f64[0]), v631[5], v347, 1), *(float64x2_t *)&v633[16], v346.f64[0]), *(float64x2_t *)&v635[16], v346, 1), *(float64x2_t *)&v635[64], v348.f64[0]), *(float64x2_t *)&v636[16], v348, 1);
    v351 = *(float64x2_t *)(v56 + 75);
    v350 = *(float64x2_t *)(v56 + 77);
    v352 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v631[0], v349.f64[0]), v631[3], v349, 1), v632, v351.f64[0]), v634, v351, 1), *(float64x2_t *)&v635[32], v350.f64[0]), *(float64x2_t *)&v635[80], v350, 1);
    v573 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v631[1], v349.f64[0]), v631[4], v349, 1), *(float64x2_t *)v633, v351.f64[0]), *(float64x2_t *)v635, v351, 1), *(float64x2_t *)&v635[48], v350.f64[0]), *(float64x2_t *)v636, v350, 1);
    __srcb = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v631[2], v349.f64[0]), v631[5], v349, 1), *(float64x2_t *)&v633[16], v351.f64[0]), *(float64x2_t *)&v635[16], v351, 1), *(float64x2_t *)&v635[64], v350.f64[0]), *(float64x2_t *)&v636[16], v350, 1);
    v354 = *(float64x2_t *)(v56 + 79);
    v353 = *(float64x2_t *)(v56 + 81);
    v355 = *(float64x2_t *)(v56 + 83);
    v356 = *(float64x2_t *)(v56 + 85);
    v357 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v631[0], v354.f64[0]), v631[3], v354, 1), v632, v353.f64[0]), v634, v353, 1), *(float64x2_t *)&v635[32], v355.f64[0]), *(float64x2_t *)&v635[80], v355, 1);
    v358 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v631[1], v354.f64[0]), v631[4], v354, 1), *(float64x2_t *)v633, v353.f64[0]), *(float64x2_t *)v635, v353, 1), *(float64x2_t *)&v635[48], v355.f64[0]), *(float64x2_t *)v636, v355, 1);
    v359 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v631[2], v354.f64[0]), v631[5], v354, 1), *(float64x2_t *)&v633[16], v353.f64[0]), *(float64x2_t *)&v635[16], v353, 1), *(float64x2_t *)&v635[64], v355.f64[0]), *(float64x2_t *)&v636[16], v355, 1);
    v361 = *(float64x2_t *)(v56 + 87);
    v360 = *(float64x2_t *)(v56 + 89);
    v362 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v631[0], v356.f64[0]), v631[3], v356, 1), v632, v361.f64[0]), v634, v361, 1);
    v363 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v631[1], v356.f64[0]), v631[4], v356, 1), *(float64x2_t *)v633, v361.f64[0]), *(float64x2_t *)v635, v361, 1);
    v364 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v631[2], v356.f64[0]), v631[5], v356, 1), *(float64x2_t *)&v633[16], v361.f64[0]), *(float64x2_t *)&v635[16], v361, 1);
    v365 = *(float64x2_t *)(v56 + 91);
    v366 = vmlaq_laneq_f64(vmlaq_n_f64(v362, *(float64x2_t *)&v635[32], v360.f64[0]), *(float64x2_t *)&v635[80], v360, 1);
    v367 = vmlaq_laneq_f64(vmlaq_n_f64(v363, *(float64x2_t *)&v635[48], v360.f64[0]), *(float64x2_t *)v636, v360, 1);
    v368 = vmlaq_laneq_f64(vmlaq_n_f64(v364, *(float64x2_t *)&v635[64], v360.f64[0]), *(float64x2_t *)&v636[16], v360, 1);
    v369 = *(float64x2_t *)(v56 + 93);
    v370 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v631[0], v365.f64[0]), v631[3], v365, 1), v632, v369.f64[0]), v634, v369, 1);
    v371 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v631[1], v365.f64[0]), v631[4], v365, 1), *(float64x2_t *)v633, v369.f64[0]), *(float64x2_t *)v635, v369, 1);
    v372 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v631[2], v365.f64[0]), v631[5], v365, 1), *(float64x2_t *)&v633[16], v369.f64[0]), *(float64x2_t *)&v635[16], v369, 1);
    v373 = *(float64x2_t *)(v56 + 95);
    v374 = *(float64x2_t *)(v56 + 97);
    v375 = vmlaq_laneq_f64(vmlaq_n_f64(v370, *(float64x2_t *)&v635[32], v373.f64[0]), *(float64x2_t *)&v635[80], v373, 1);
    v376 = vmlaq_laneq_f64(vmlaq_n_f64(v371, *(float64x2_t *)&v635[48], v373.f64[0]), *(float64x2_t *)v636, v373, 1);
    v377 = vmlaq_laneq_f64(vmlaq_n_f64(v372, *(float64x2_t *)&v635[64], v373.f64[0]), *(float64x2_t *)&v636[16], v373, 1);
    v378 = *(float64x2_t *)(v56 + 99);
    v379 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v631[0], v374.f64[0]), v631[3], v374, 1), v632, v378.f64[0]), v634, v378, 1);
    v380 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v631[1], v374.f64[0]), v631[4], v374, 1), *(float64x2_t *)v633, v378.f64[0]), *(float64x2_t *)v635, v378, 1);
    v381 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v631[2], v374.f64[0]), v631[5], v374, 1), *(float64x2_t *)&v633[16], v378.f64[0]), *(float64x2_t *)&v635[16], v378, 1);
    v382 = *(float64x2_t *)(v56 + 101);
    v383 = vmlaq_laneq_f64(vmlaq_n_f64(v379, *(float64x2_t *)&v635[32], v382.f64[0]), *(float64x2_t *)&v635[80], v382, 1);
    v384 = vmlaq_laneq_f64(vmlaq_n_f64(v380, *(float64x2_t *)&v635[48], v382.f64[0]), *(float64x2_t *)v636, v382, 1);
    v385 = vmlaq_laneq_f64(vmlaq_n_f64(v381, *(float64x2_t *)&v635[64], v382.f64[0]), *(float64x2_t *)&v636[16], v382, 1);
    v386 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v583, v631[0].f64[0]), __srcb, v631[3].f64[0]), v359, v632.f64[0]), v368, v634.f64[0]), v377, *(double *)&v635[32]), v385, *(double *)&v635[80]);
    v387 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v556, v631[0], 1), v352, v631[3], 1), v357, v632, 1), v366, v634, 1), v375, *(float64x2_t *)&v635[32], 1), v383, *(float64x2_t *)&v635[80], 1);
    v388 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v579, v631[0], 1), v573, v631[3], 1), v358, v632, 1), v367, v634, 1), v376, *(float64x2_t *)&v635[32], 1), v384, *(float64x2_t *)&v635[80], 1);
    v389 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v583, v631[0], 1), __srcb, v631[3], 1), v359, v632, 1), v368, v634, 1), v377, *(float64x2_t *)&v635[32], 1), v385, *(float64x2_t *)&v635[80], 1);
    v390 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v556, v631[1].f64[0]), v352, v631[4].f64[0]), v357, *(double *)v633), v366, *(double *)v635), v375, *(double *)&v635[48]), v383, *(double *)v636);
    v391 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v579, v631[1].f64[0]), v573, v631[4].f64[0]), v358, *(double *)v633), v367, *(double *)v635), v376, *(double *)&v635[48]), v384, *(double *)v636);
    v392 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v583, v631[1].f64[0]), __srcb, v631[4].f64[0]), v359, *(double *)v633), v368, *(double *)v635), v377, *(double *)&v635[48]), v385, *(double *)v636);
    v393 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v556, v631[1], 1), v352, v631[4], 1), v357, *(float64x2_t *)v633, 1), v366, *(float64x2_t *)v635, 1), v375, *(float64x2_t *)&v635[48], 1), v383, *(float64x2_t *)v636, 1);
    v394 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v579, v631[1], 1), v573, v631[4], 1), v358, *(float64x2_t *)v633, 1), v367, *(float64x2_t *)v635, 1), v376, *(float64x2_t *)&v635[48], 1), v384, *(float64x2_t *)v636, 1);
    v395 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v583, v631[1], 1), __srcb, v631[4], 1), v359, *(float64x2_t *)v633, 1), v368, *(float64x2_t *)v635, 1), v377, *(float64x2_t *)&v635[48], 1), v385, *(float64x2_t *)v636, 1);
    v564 = vaddq_f64(*(float64x2_t *)(a2 + 1288), vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v579, v631[0].f64[0]), v573, v631[3].f64[0]), v358, v632.f64[0]), v367, v634.f64[0]), v376, *(double *)&v635[32]), v384, *(double *)&v635[80]));
    *(float64x2_t *)v562 = vaddq_f64(*(float64x2_t *)(a2 + 1272), vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v556, v631[0].f64[0]), v352, v631[3].f64[0]), v357, v632.f64[0]), v366, v634.f64[0]), v375, *(double *)&v635[32]), v383, *(double *)&v635[80]));
    v396 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v556, v343.f64[1]), v352, v631[5].f64[0]), v357, *(double *)&v633[16]), v366, *(double *)&v635[16]), v375, *(double *)&v635[64]), v383, *(double *)&v636[16]);
    v397 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v556, v631[2], 1), v352, v631[5], 1), v357, *(float64x2_t *)&v633[16], 1), v366, *(float64x2_t *)&v635[16], 1), v375, *(float64x2_t *)&v635[64], 1), v383, *(float64x2_t *)&v636[16], 1);
    v398 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v579, v343.f64[1]), v573, v631[5].f64[0]), v358, *(double *)&v633[16]), v367, *(double *)&v635[16]);
    v399 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v579, v631[2], 1), v573, v631[5], 1), v358, *(float64x2_t *)&v633[16], 1), v367, *(float64x2_t *)&v635[16], 1);
    v580 = *(float64x2_t *)(a2 + 1304);
    v400 = *(float64x2_t *)(a2 + 1336);
    v574 = *(float64x2_t *)(a2 + 1320);
    v401 = vmlaq_n_f64(vmlaq_n_f64(v398, v376, *(double *)&v635[64]), v384, *(double *)&v636[16]);
    v402 = vmlaq_laneq_f64(vmlaq_laneq_f64(v399, v376, *(float64x2_t *)&v635[64], 1), v384, *(float64x2_t *)&v636[16], 1);
    v403 = *(float64x2_t *)(a2 + 1352);
    v404 = *(float64x2_t *)(a2 + 1368);
    v406 = *(float64x2_t *)(a2 + 1384);
    v405 = *(float64x2_t *)(a2 + 1400);
    v407 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v583, v631[2].f64[0]), __srcb, v631[5].f64[0]), v359, *(double *)&v633[16]), v368, *(double *)&v635[16]);
    v408 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v583, v631[2], 1), __srcb, v631[5], 1), v359, *(float64x2_t *)&v633[16], 1), v368, *(float64x2_t *)&v635[16], 1);
    v410 = *(float64x2_t *)(a2 + 1416);
    v409 = *(float64x2_t *)(a2 + 1432);
    v412 = *(float64x2_t *)(a2 + 1448);
    v411 = *(float64x2_t *)(a2 + 1464);
    v413 = vmlaq_n_f64(v407, v377, *(double *)&v635[64]);
    v414 = vmlaq_laneq_f64(v408, v377, *(float64x2_t *)&v635[64], 1);
    v416 = *(float64x2_t *)(a2 + 1480);
    v415 = *(float64x2_t *)(a2 + 1496);
    v417 = vmlaq_n_f64(v413, v385, *(double *)&v636[16]);
    v418 = vmlaq_laneq_f64(v414, v385, *(float64x2_t *)&v636[16], 1);
    v420 = *(float64x2_t *)(a2 + 1512);
    v419 = *(float64x2_t *)(a2 + 1528);
    v421 = *(float64x2_t *)(a2 + 1544);
    *(_OWORD *)(v56 + 67) = *(_OWORD *)v562;
    *(float64x2_t *)(v56 + 69) = v564;
    *(float64x2_t *)(v56 + 71) = vaddq_f64(v580, v386);
    *(float64x2_t *)(v56 + 73) = vaddq_f64(v574, v387);
    *(float64x2_t *)(v56 + 75) = vaddq_f64(v400, v388);
    *(float64x2_t *)(v56 + 77) = vaddq_f64(v403, v389);
    *(float64x2_t *)(v56 + 79) = vaddq_f64(v404, v390);
    *(float64x2_t *)(v56 + 81) = vaddq_f64(v406, v391);
    *(float64x2_t *)(v56 + 83) = vaddq_f64(v405, v392);
    *(float64x2_t *)(v56 + 85) = vaddq_f64(v410, v393);
    *(float64x2_t *)(v56 + 87) = vaddq_f64(v409, v394);
    *(float64x2_t *)(v56 + 89) = vaddq_f64(v412, v395);
    *(float64x2_t *)(v56 + 91) = vaddq_f64(v411, v396);
    *(float64x2_t *)(v56 + 93) = vaddq_f64(v416, v401);
    *(float64x2_t *)(v56 + 95) = vaddq_f64(v415, v417);
    *(float64x2_t *)(v56 + 97) = vaddq_f64(v420, v397);
    *(float64x2_t *)(v56 + 99) = vaddq_f64(v419, v402);
    *(float64x2_t *)(v56 + 101) = vaddq_f64(v421, v418);
    v57 = a9;
    v197 = v56 + 26;
    if (!*((_BYTE *)v56 + 224))
      goto LABEL_380;
  }
  else
  {
    bzero(v56 + 47, 0xC68uLL);
    *(_OWORD *)(v56 + 59) = xmmword_2103A9B78;
    *(_OWORD *)(v56 + 61) = unk_2103A9B88;
    *(_OWORD *)(v56 + 63) = xmmword_2103A9B98;
    *(_OWORD *)(v56 + 65) = unk_2103A9BA8;
    *(_OWORD *)(v56 + 51) = xmmword_2103A9B38;
    *(_OWORD *)(v56 + 53) = unk_2103A9B48;
    *(_OWORD *)(v56 + 55) = xmmword_2103A9B58;
    *(_OWORD *)(v56 + 57) = unk_2103A9B68;
    *(_OWORD *)(v56 + 69) = 0u;
    *(_OWORD *)(v56 + 71) = 0u;
    *(_OWORD *)(v56 + 73) = 0u;
    *(_OWORD *)(v56 + 75) = 0u;
    *(_OWORD *)(v56 + 77) = 0u;
    *(_OWORD *)(v56 + 79) = 0u;
    *(_OWORD *)(v56 + 81) = 0u;
    *(_OWORD *)(v56 + 83) = 0u;
    *(_OWORD *)(v56 + 85) = 0u;
    *(_OWORD *)(v56 + 87) = 0u;
    *(_OWORD *)(v56 + 89) = 0u;
    *(_OWORD *)(v56 + 91) = 0u;
    *(_OWORD *)(v56 + 93) = 0u;
    *(_OWORD *)(v56 + 95) = 0u;
    *(_OWORD *)(v56 + 97) = 0u;
    *(_OWORD *)(v56 + 99) = 0u;
    *(_OWORD *)(v56 + 101) = 0u;
    *((_BYTE *)v56 + 824) = 0;
    *(_OWORD *)(v56 + 67) = 0u;
    *((_BYTE *)v56 + 3552) = 1;
    v450 = *v192;
    *((_DWORD *)v56 + 96) = *((_DWORD *)v192 + 2);
    v56[47] = v450;
    v451 = *v193;
    *((_DWORD *)v56 + 100) = *((_DWORD *)v193 + 2);
    v56[49] = v451;
    v452 = *(_OWORD *)(a2 + 1256);
    v454 = *(_OWORD *)(a2 + 1208);
    v453 = *(_OWORD *)(a2 + 1224);
    *(_OWORD *)(v56 + 63) = *(_OWORD *)(a2 + 1240);
    *(_OWORD *)(v56 + 65) = v452;
    *(_OWORD *)(v56 + 59) = v454;
    *(_OWORD *)(v56 + 61) = v453;
    v455 = *v94;
    v456 = *(_OWORD *)(a2 + 1160);
    v457 = *(_OWORD *)(a2 + 1192);
    *(_OWORD *)(v56 + 55) = *(_OWORD *)(a2 + 1176);
    *(_OWORD *)(v56 + 57) = v457;
    *(float64x2_t *)(v56 + 51) = v455;
    *(_OWORD *)(v56 + 53) = v456;
    memcpy(v56 + 67, v95, 0x120uLL);
    v197 = v56 + 26;
    if (!*((_BYTE *)v56 + 224))
      goto LABEL_380;
  }
LABEL_316:
  *v197 = v627;
  *((_DWORD *)v197 + 2) = DWORD2(v627);
  *(_BYTE *)v57 = 0;
  *(_BYTE *)(v57 + 96) = 0;
  v198 = (_BYTE *)*v56;
  if (!*(_BYTE *)(*v56 + 2500))
    goto LABEL_388;
LABEL_381:
  if (!v630 || v198[2600])
  {
    sub_20FCB7984(*(_QWORD **)(v89 + 1096), (uint64_t *)&v624, (uint64_t)v631);
    if (*(unsigned __int8 *)(v57 + 96) == LOBYTE(v632.f64[0]))
    {
      if (!*(_BYTE *)(v57 + 96))
        goto LABEL_387;
      sub_20F27E254((char **)v57, (uint64_t)v631);
      if (!LOBYTE(v632.f64[0]))
        goto LABEL_387;
    }
    else if (*(_BYTE *)(v57 + 96))
    {
      sub_20EE62D7C((void **)v57);
      *(_BYTE *)(v57 + 96) = 0;
      if (!LOBYTE(v632.f64[0]))
        goto LABEL_387;
    }
    else
    {
      v422 = v631[2].f64[1];
      *(float64_t *)(v57 + 16) = v631[1].f64[0];
      *(float64_t *)(v57 + 40) = v422;
      v423 = v631[5].f64[1];
      *(float64_t *)(v57 + 64) = v631[4].f64[0];
      *(float64x2_t *)v57 = v631[0];
      v631[0] = 0uLL;
      *(float64x2_t *)(v57 + 24) = *(float64x2_t *)((char *)&v631[1] + 8);
      memset(&v631[1], 0, 32);
      *(float64x2_t *)(v57 + 48) = v631[3];
      v631[3] = 0uLL;
      *(float64x2_t *)(v57 + 72) = *(float64x2_t *)((char *)&v631[4] + 8);
      *(float64_t *)(v57 + 88) = v423;
      memset(&v631[4], 0, 32);
      *(_BYTE *)(v57 + 96) = 1;
      if (!LOBYTE(v632.f64[0]))
        goto LABEL_387;
    }
    sub_20EE62D7C((void **)v631);
LABEL_387:
    v198 = (_BYTE *)*v56;
  }
LABEL_388:
  if (!v198[2502] || v621 == v622)
    goto LABEL_421;
  sub_20FCB8CD4(*(_QWORD *)(v89 + 1096), (uint64_t *)&v621, (uint64_t)v631);
  if (*(unsigned __int8 *)(a8 + 72) == LOBYTE(v631[4].f64[1]))
  {
    if (!*(_BYTE *)(a8 + 72))
      goto LABEL_420;
    sub_20F27E4B4(a8, (uint64_t)v631);
    if (!LOBYTE(v631[4].f64[1]))
      goto LABEL_420;
LABEL_403:
    v425 = v631[3].f64[0];
    if (*(_QWORD *)&v631[3].f64[0])
    {
      v426 = v631[3].f64[1];
      v427 = v631[3].f64[0];
      if (*(_QWORD *)&v631[3].f64[1] != *(_QWORD *)&v631[3].f64[0])
      {
        v428 = v631[3].f64[1];
        do
        {
          v430 = *(void **)(*(_QWORD *)&v428 - 24);
          *(_QWORD *)&v428 -= 24;
          v429 = v430;
          if (v430)
          {
            *(_QWORD *)(*(_QWORD *)&v426 - 16) = v429;
            operator delete(v429);
          }
          v426 = v428;
        }
        while (*(_QWORD *)&v428 != *(_QWORD *)&v425);
        v427 = v631[3].f64[0];
      }
      v631[3].f64[1] = v425;
      operator delete(*(void **)&v427);
    }
    v431 = v631[1].f64[1];
    if (*(_QWORD *)&v631[1].f64[1])
    {
      v432 = v631[1].f64[1];
      if (*(_QWORD *)&v631[2].f64[0] != *(_QWORD *)&v631[1].f64[1])
      {
        v433 = *(_QWORD *)&v631[2].f64[0] - 24;
        v434 = (void (***)(uint64_t))(*(_QWORD *)&v631[2].f64[0] - 24);
        do
        {
          v435 = *v434;
          v434 -= 3;
          (*v435)(v433);
          _ZF = v433 == *(_QWORD *)&v431;
          v433 = (uint64_t)v434;
        }
        while (!_ZF);
        v432 = v631[1].f64[1];
        v89 = a2;
      }
      v631[2].f64[0] = v431;
      operator delete(*(void **)&v432);
    }
    if (*(_QWORD *)&v631[0].f64[0])
    {
      v631[0].f64[1] = v631[0].f64[0];
      operator delete(*(void **)&v631[0].f64[0]);
    }
    goto LABEL_420;
  }
  if (*(_BYTE *)(a8 + 72))
  {
    sub_20EE6560C(a8);
    if (LOBYTE(v631[4].f64[1]))
      goto LABEL_403;
  }
  else
  {
    v424 = v631[2].f64[1];
    *(float64_t *)(a8 + 16) = v631[1].f64[0];
    *(float64x2_t *)a8 = v631[0];
    v631[0] = 0uLL;
    *(float64x2_t *)(a8 + 24) = *(float64x2_t *)((char *)&v631[1] + 8);
    *(float64_t *)(a8 + 40) = v424;
    memset(&v631[1], 0, 32);
    *(float64x2_t *)(a8 + 48) = v631[3];
    *(float64_t *)(a8 + 64) = v631[4].f64[0];
    memset(&v631[3], 0, 24);
    *(_BYTE *)(a8 + 72) = 1;
    if (LOBYTE(v631[4].f64[1]))
      goto LABEL_403;
  }
LABEL_420:
  v198 = (_BYTE *)*v56;
LABEL_421:
  if (v198[2501])
    _ZF = v630 == 0;
  else
    _ZF = 0;
  if (_ZF)
  {
    sub_20FCB97FC(*(int8x8_t **)(v89 + 1096), (char **)&v618, v631);
    sub_20F27E600(a7, (uint64_t)v631);
    if (LOBYTE(v631[3].f64[0]))
    {
      v437 = v631[1].f64[1];
      if (*(_QWORD *)&v631[1].f64[1])
      {
        v438 = v631[2].f64[0];
        v439 = v631[1].f64[1];
        if (*(_QWORD *)&v631[2].f64[0] != *(_QWORD *)&v631[1].f64[1])
        {
          v440 = v631[2].f64[0];
          do
          {
            v442 = *(void **)(*(_QWORD *)&v440 - 24);
            *(_QWORD *)&v440 -= 24;
            v441 = v442;
            if (v442)
            {
              *(_QWORD *)(*(_QWORD *)&v438 - 16) = v441;
              operator delete(v441);
            }
            v438 = v440;
          }
          while (*(_QWORD *)&v440 != *(_QWORD *)&v437);
          v439 = v631[1].f64[1];
        }
        v631[2].f64[0] = v437;
        operator delete(*(void **)&v439);
      }
      if (*(_QWORD *)&v631[0].f64[0])
      {
        v631[0].f64[1] = v631[0].f64[0];
        operator delete(*(void **)&v631[0].f64[0]);
      }
    }
    v198 = (_BYTE *)*v56;
  }
  if (!v198[2499])
    sub_20F46CFBC(v56[29]);
  if (!v630 && (v58 & 1) == 0)
  {
    v443 = v56[42];
    if (v443)
    {
      v444 = v56[2];
      v445 = *(_QWORD *)(v444 + 424);
      if (v445)
      {
        if (*(_QWORD *)(*(_QWORD *)v445 + 64))
        {
          v631[0].f64[0] = *(float64_t *)(v444 + 160);
          LOBYTE(v597) = 1;
          (*(void (**)(uint64_t, float64x2_t *, uint64_t *))(*(_QWORD *)v443 + 48))(v443, v631, &v597);
        }
      }
    }
  }
  if (v618)
  {
    v619 = v618;
    operator delete(v618);
  }
  if (v621)
  {
    v622 = v621;
    operator delete(v621);
  }
  v446 = (char *)v624;
  if (v624)
  {
    v447 = v625;
    v448 = v624;
    if (v625 != v624)
    {
      do
      {
        v449 = (void *)*((_QWORD *)v447 - 3);
        if (v449)
        {
          *((_QWORD *)v447 - 2) = v449;
          operator delete(v449);
        }
        v447 -= 64;
      }
      while (v447 != v446);
      v448 = v624;
    }
    v625 = v446;
    operator delete(v448);
  }
}

void sub_20F259BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  uint64_t v61;
  void *v63;
  void *v64;

  if (*(_BYTE *)(v61 - 232) && *(char *)(v61 - 233) < 0)
    operator delete(*(void **)(v61 - 256));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a47);
  if (a61 < 0)
    operator delete(__p);
  sub_20E863784((uint64_t)&STACK[0x330]);
  v63 = (void *)STACK[0x2B8];
  if (STACK[0x2B8])
  {
    STACK[0x2C0] = (unint64_t)v63;
    operator delete(v63);
    v64 = (void *)STACK[0x2D0];
    if (!STACK[0x2D0])
    {
LABEL_8:
      sub_20EE62F10((void **)&STACK[0x2E8]);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v64 = (void *)STACK[0x2D0];
    if (!STACK[0x2D0])
      goto LABEL_8;
  }
  STACK[0x2D8] = (unint64_t)v64;
  operator delete(v64);
  sub_20EE62F10((void **)&STACK[0x2E8]);
  _Unwind_Resume(a1);
}

uint64_t sub_20F259ECC(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t *v7;
  unint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  char *v35;
  char *v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;

  v6 = (_QWORD *)(**(_QWORD **)(a1[2] + 424) + 56);
  v7 = (uint64_t *)*v6;
  if (!*v6)
    return 2;
  v14 = *a2;
  v15 = *((_DWORD *)a2 + 2);
  v16 = v6;
  v17 = (uint64_t *)*v6;
  do
  {
    v18 = v17[4];
    if (v18 < v14)
    {
      ++v17;
    }
    else if (v18 == v14)
    {
      if (*((_DWORD *)v17 + 10) < v15)
        ++v17;
      else
        v16 = v17;
    }
    else
    {
      v16 = v17;
    }
    v17 = (uint64_t *)*v17;
  }
  while (v17);
  if (v16 == v6)
    return 2;
  v19 = v16[4];
  if (v14 < v19 || v14 == v19 && *((_DWORD *)v16 + 10) > v15)
    return 2;
  if (!v16[6])
    return 2;
  v20 = *a3;
  v21 = *((_DWORD *)a3 + 2);
  v22 = v6;
  do
  {
    v23 = v7[4];
    if (v23 < v20)
    {
      ++v7;
    }
    else if (v23 == v20)
    {
      if (*((_DWORD *)v7 + 10) < v21)
        ++v7;
      else
        v22 = v7;
    }
    else
    {
      v22 = v7;
    }
    v7 = (uint64_t *)*v7;
  }
  while (v7);
  if (v22 == v6)
    return 2;
  v24 = v22[4];
  if (v20 < v24 || v20 == v24 && *((_DWORD *)v22 + 10) > v21)
    return 2;
  if (!v22[6])
    return 2;
  v25 = *a1;
  if (*(_BYTE *)(*a1 + 2498) && v14 != v20)
  {
    v26 = (char *)a1[4];
    v27 = (char *)a1[5];
    v28 = v26;
    if (v27 != v26)
    {
      v29 = (v27 - v26) >> 4;
      v28 = (char *)a1[4];
      do
      {
        v30 = v29 >> 1;
        v31 = (unint64_t *)&v28[16 * (v29 >> 1)];
        if (*v31 < v14 || *v31 == v14 && *(_DWORD *)&v28[16 * v30 + 8] < v15)
        {
          v28 = (char *)(v31 + 2);
          v30 = v29 + ~v30;
        }
        v29 = v30;
      }
      while (v30);
    }
    if (v28 != v27 && *(_QWORD *)v28 == v14 && *((_DWORD *)v28 + 2) == v15)
      goto LABEL_54;
    if (v27 != v26)
    {
      v32 = (v27 - v26) >> 4;
      do
      {
        v33 = v32 >> 1;
        v34 = (unint64_t *)&v26[16 * (v32 >> 1)];
        if (*v34 < v20 || *v34 == v20 && *(_DWORD *)&v26[16 * v33 + 8] < v21)
        {
          v26 = (char *)(v34 + 2);
          v33 = v32 + ~v33;
        }
        v32 = v33;
      }
      while (v33);
    }
    if (v26 != v27 && *(_QWORD *)v26 == v20 && *((_DWORD *)v26 + 2) == v21)
    {
LABEL_54:
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MapDataController.cpp", 3364, (uint64_t)"!this->IsWeakState(state_id0) && !this->IsWeakState(state_id1)", 62, (uint64_t)"Inter session states has to be regular states ", 46, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_86;
      }
      v25 = *a1;
    }
  }
  if ((a6 & 0xFFFFFFFD) != 0 && *(_BYTE *)(v25 + 2499))
  {
    v35 = (char *)a1[4];
    v36 = (char *)a1[5];
    v37 = v35;
    if (v36 != v35)
    {
      v38 = (v36 - v35) >> 4;
      v39 = *a2;
      v37 = (char *)a1[4];
      do
      {
        v40 = v38 >> 1;
        v41 = (unint64_t *)&v37[16 * (v38 >> 1)];
        if (*v41 < v39 || *v41 == v39 && *(_DWORD *)&v37[16 * v40 + 8] < *((_DWORD *)a2 + 2))
        {
          v37 = (char *)(v41 + 2);
          v40 = v38 + ~v40;
        }
        v38 = v40;
      }
      while (v40);
    }
    if (v37 != v36 && *(_QWORD *)v37 == *a2 && *((_DWORD *)v37 + 2) == *((_DWORD *)a2 + 2))
      goto LABEL_89;
    if (v36 != v35)
    {
      v42 = (v36 - v35) >> 4;
      v43 = *a3;
      do
      {
        v44 = v42 >> 1;
        v45 = (unint64_t *)&v35[16 * (v42 >> 1)];
        if (*v45 < v43 || *v45 == v43 && *(_DWORD *)&v35[16 * v44 + 8] < *((_DWORD *)a3 + 2))
        {
          v35 = (char *)(v45 + 2);
          v44 = v42 + ~v44;
        }
        v42 = v44;
      }
      while (v44);
    }
    if (v35 != v36 && *(_QWORD *)v35 == *a3 && *((_DWORD *)v35 + 2) == *((_DWORD *)a3 + 2))
    {
LABEL_89:
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MapDataController.cpp", 3371, (uint64_t)"!this->IsWeakState(state_id0) && !this->IsWeakState(state_id1)", 62, (uint64_t)&unk_21029C995, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_86:
        abort();
      }
    }
  }
  if (a6 < 4)
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[25] + 40))(a1[25], a2, a3, a4, a5, a6);
  if ((_DWORD)a6 == 4)
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[25] + 48))(a1[25], a2, a3, a4, a5, 4);
  return 2;
}

uint64_t sub_20F25A328(uint64_t a1, uint64_t a2, _QWORD *a3, _BYTE *a4)
{
  uint64_t result;
  uint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  _BOOL4 v31;

  result = sub_20F25A5A0(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 424), (uint64_t *)a2, a3);
  v8 = result;
  if (!(_DWORD)result)
  {
    v9 = *(char **)(a1 + 32);
    v10 = *(char **)(a1 + 40);
    if (v10 != v9)
    {
      v11 = (v10 - v9) >> 4;
      v12 = *(_QWORD *)a2;
      do
      {
        v13 = v11 >> 1;
        v14 = (unint64_t *)&v9[16 * (v11 >> 1)];
        if (*v14 < v12 || *v14 == v12 && *(_DWORD *)&v9[16 * v13 + 8] < *(_DWORD *)(a2 + 8))
        {
          v9 = (char *)(v14 + 2);
          v13 = v11 + ~v13;
        }
        v11 = v13;
      }
      while (v13);
    }
    if (v9 == v10 || *(_QWORD *)v9 != *(_QWORD *)a2)
    {
      v15 = 0;
      v16 = *(_QWORD *)(a1 + 184);
      if (!*(_BYTE *)(v16 + 225))
        return result;
    }
    else
    {
      v15 = *((_DWORD *)v9 + 2) == *(_DWORD *)(a2 + 8);
      v16 = *(_QWORD *)(a1 + 184);
      if (!*(_BYTE *)(v16 + 225))
        return result;
    }
    v17 = *(_QWORD *)(v16 + 1072);
    if (v17)
    {
      if (*(_QWORD *)(v17 + 8))
      {
        if (a4[512])
        {
          if (v15)
          {
            v18 = sub_20F288C80((float *)(a1 + 144), (uint64_t *)a2, a2);
            memcpy(v18 + 5, a4, 0x200uLL);
          }
          else
          {
            sub_20F25A744((_QWORD *)a1, a4, (uint64_t *)a2);
          }
          return v8;
        }
        v19 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 424);
        v20 = *(char **)(v19 + 40);
        v21 = *(char **)(v19 + 48);
        if (v21 != v20)
        {
          v22 = (v21 - v20) >> 4;
          v23 = *(_DWORD *)(a2 + 16);
          v24 = *(_QWORD *)a2;
          while (1)
          {
            v25 = v22 >> 1;
            v26 = (uint64_t *)&v20[16 * (v22 >> 1)];
            v27 = *v26;
            v28 = *(_DWORD *)(*v26 + 16);
            v29 = v28 >= v23;
            if (v28 != v23)
              goto LABEL_30;
            if (*(_QWORD *)v27 >= v24)
              break;
LABEL_24:
            v20 = (char *)(v26 + 2);
            v25 = v22 + ~v25;
LABEL_25:
            v22 = v25;
            if (!v25)
              goto LABEL_33;
          }
          if (*(_QWORD *)v27 != v24)
            goto LABEL_25;
          v29 = *(_DWORD *)(v27 + 8) >= *(_DWORD *)(a2 + 8);
LABEL_30:
          if (v29)
            goto LABEL_25;
          goto LABEL_24;
        }
LABEL_33:
        if (v20 == v21)
          goto LABEL_39;
        v30 = *(_QWORD *)v20;
        if (*(_DWORD *)(*(_QWORD *)v20 + 16) != *(_DWORD *)(a2 + 16) || *(_QWORD *)v30 != *(_QWORD *)a2)
          goto LABEL_39;
        if (*(_DWORD *)(v30 + 8) != *(_DWORD *)(a2 + 8))
          v20 = v21;
        if (v21 == v20)
        {
LABEL_39:
          v31 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MapDataController.cpp", 831, (uint64_t)"maybe_frame != viodatabase()->end()", 35, (uint64_t)&unk_21029C995, 0, (void (*)(void **))sub_21023DDB0);
          v20 = v21;
          if (v31)
            abort();
        }
        sub_20F24E494((_QWORD *)a1, (char ***)(*(_QWORD *)v20 + 576), (uint64_t *)a2);
        return v8;
      }
    }
  }
  return result;
}

uint64_t sub_20F25A5A0(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;

  v4 = *(uint64_t **)(a1 + 40);
  v3 = *(uint64_t **)(a1 + 48);
  if (v3 != v4)
  {
    v5 = ((char *)v3 - (char *)v4) >> 4;
    v6 = *((_DWORD *)a2 + 4);
    v7 = *a2;
    while (1)
    {
      v8 = v5 >> 1;
      v9 = &v4[2 * (v5 >> 1)];
      v10 = *v9;
      v11 = *(_DWORD *)(*v9 + 16);
      v12 = v11 >= v6;
      if (v11 != v6)
        goto LABEL_9;
      if (*(_QWORD *)v10 >= v7)
        break;
LABEL_3:
      v4 = v9 + 2;
      v8 = v5 + ~v8;
LABEL_4:
      v5 = v8;
      if (!v8)
        goto LABEL_12;
    }
    if (*(_QWORD *)v10 != v7)
      goto LABEL_4;
    v12 = *(_DWORD *)(v10 + 8) >= *((_DWORD *)a2 + 2);
LABEL_9:
    if (v12)
      goto LABEL_4;
    goto LABEL_3;
  }
LABEL_12:
  if (v4 == v3)
    return 2;
  v13 = *v4;
  if (*(_DWORD *)(*v4 + 16) != *((_DWORD *)a2 + 4) || *(_QWORD *)v13 != *a2)
    return 2;
  if (*(_DWORD *)(v13 + 8) != *((_DWORD *)a2 + 2))
    v4 = *(uint64_t **)(a1 + 48);
  if (v3 == v4)
    return 2;
  v14 = (_QWORD *)*v4;
  if (!*v4)
    return 2;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v14[10] - v14[9]) >> 3) >= (uint64_t)(a3[1] - *a3) >> 6)
    return !sub_20F288320(v14, (uint64_t)a3);
  return 3;
}

BOOL sub_20F25A6B4(uint64_t a1, unint64_t *a2)
{
  char *v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;

  v2 = *(char **)(a1 + 32);
  v3 = *(char **)(a1 + 40);
  if (v3 != v2)
  {
    v4 = (v3 - v2) >> 4;
    v5 = *a2;
    do
    {
      v6 = v4 >> 1;
      v7 = (unint64_t *)&v2[16 * (v4 >> 1)];
      if (*v7 < v5 || *v7 == v5 && *(_DWORD *)&v2[16 * v6 + 8] < *((_DWORD *)a2 + 2))
      {
        v2 = (char *)(v7 + 2);
        v6 = v4 + ~v6;
      }
      v4 = v6;
    }
    while (v6);
  }
  return v2 != v3 && *(_QWORD *)v2 == *a2 && *((_DWORD *)v2 + 2) == *((_DWORD *)a2 + 2);
}

_QWORD *sub_20F25A744(_QWORD *result, void *__src, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  unsigned int v15;
  BOOL v16;
  unint64_t v17;
  unsigned int v18;
  BOOL v19;
  unint64_t v20;
  uint64_t **v21;
  uint64_t *v22;
  _OWORD *v23;

  v3 = result[23];
  if (!v3)
    return result;
  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 1072) + 8);
  if (!v4)
    return result;
  v7 = result;
  v8 = result[2];
  v9 = *(uint64_t **)(v8 + 304);
  if (!v9)
    goto LABEL_19;
  v10 = (uint64_t *)(v8 + 304);
  v11 = *((_DWORD *)a3 + 4);
  v12 = *a3;
  v13 = *((_DWORD *)a3 + 2);
  v14 = v10;
  do
  {
    while (1)
    {
      v15 = *((_DWORD *)v9 + 12);
      v16 = v15 >= v11;
      if (v15 != v11)
        goto LABEL_10;
      v17 = v9[4];
      if (v17 >= v12)
        break;
LABEL_5:
      v9 = (uint64_t *)v9[1];
      if (!v9)
        goto LABEL_13;
    }
    if (v17 != v12)
      goto LABEL_12;
    v16 = *((_DWORD *)v9 + 10) >= v13;
LABEL_10:
    if (!v16)
      goto LABEL_5;
LABEL_12:
    v14 = v9;
    v9 = (uint64_t *)*v9;
  }
  while (v9);
LABEL_13:
  if (v14 == v10)
    goto LABEL_19;
  v18 = *((_DWORD *)v14 + 12);
  v19 = v11 >= v18;
  if (v11 != v18)
    goto LABEL_18;
  v20 = v14[4];
  if (v12 < v20)
    goto LABEL_19;
  if (v12 == v20)
  {
    v19 = v13 >= *((_DWORD *)v14 + 10);
LABEL_18:
    if (!v19)
    {
LABEL_19:
      sub_20F278024((_QWORD *)(v4 + 400), __src, (__int128 *)a3);
      v21 = (uint64_t **)(v7[2] + 296);
      v23 = a3;
      v22 = sub_20F29289C(v21, a3, (uint64_t)&unk_2102DB95C, &v23);
      return memcpy(v22 + 7, __src, 0x200uLL);
    }
  }
  return result;
}

BOOL sub_20F25A864(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 424);
  v5 = *(uint64_t **)(v3 + 40);
  v4 = *(uint64_t **)(v3 + 48);
  if (v4 != v5)
  {
    v6 = ((char *)v4 - (char *)v5) >> 4;
    v7 = *((_DWORD *)a2 + 4);
    v8 = *a2;
    while (1)
    {
      v9 = v6 >> 1;
      v10 = &v5[2 * (v6 >> 1)];
      v11 = *v10;
      v12 = *(_DWORD *)(*v10 + 16);
      v13 = v12 >= v7;
      if (v12 != v7)
        goto LABEL_9;
      if (*(_QWORD *)v11 >= v8)
        break;
LABEL_3:
      v5 = v10 + 2;
      v9 = v6 + ~v9;
LABEL_4:
      v6 = v9;
      if (!v9)
        goto LABEL_12;
    }
    if (*(_QWORD *)v11 != v8)
      goto LABEL_4;
    v13 = *(_DWORD *)(v11 + 8) >= *((_DWORD *)a2 + 2);
LABEL_9:
    if (v13)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (v5 == v4)
    return 0;
  v14 = *v5;
  if (*(_DWORD *)(*v5 + 16) != *((_DWORD *)a2 + 4) || *(_QWORD *)v14 != *a2)
    return 0;
LABEL_12:
  if (*(_DWORD *)(v14 + 8) != *((_DWORD *)a2 + 2))
    v5 = v4;
  return v4 != v5 && *v5 && sub_20F289164(*v5, a3);
}

BOOL sub_20F25A934(_QWORD *a1, __int128 *a2, uint64_t *a3)
{
  int8x8_t **v6;
  int8x8_t *v7;
  int8x8_t *v8;
  unint64_t v9;
  unsigned int v10;
  void *v11;
  unint64_t v12;
  int8x8_t *v13;
  int8x8_t v14;
  unsigned int v15;
  int8x8_t v17;
  int v18;
  int8x8_t *v19;
  uint64_t v20;
  int8x8_t v21;
  unsigned int v22;
  unint64_t v23;
  uint8x8_t v24;
  unint64_t v25;
  uint64_t **v26;
  uint64_t *v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float64x2_t v33;
  double v35;
  uint64_t v36;
  float64x2_t v37;
  float64x2_t *v38;
  float64x2_t v39;
  float64x2_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _BOOL8 v45;
  void *v47;
  uint64_t v48;
  int8x8_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  int64x2_t v59;
  float64x2_t v61;
  double v65;
  float64x2_t v67;
  float64x2_t v69;
  double v70;
  int64x2_t v74;
  double v75;
  float64x2_t v76;
  unint64_t v78;
  int v79;
  int8x16_t v80;
  int8x16_t v81;
  float64x2_t v82;
  int8x16_t v83;
  uint64_t v84;
  int8x8_t v85;
  int v86;
  unsigned int v87;
  unint64_t v88;
  uint8x8_t v89;
  unint64_t v90;
  int8x8_t **v91;
  int8x8_t *v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  int8x8_t v96;
  int8x8_t v97;
  int8x8_t v98;
  uint8x8_t v99;
  unint64_t v100;
  uint64_t **v101;
  uint64_t *v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unsigned int v107;
  uint64_t v109;
  uint64_t v110;
  double v114;
  float64x2_t v117;
  uint64_t v119;
  uint64_t *v120;
  int8x16_t v121;
  int v122;
  int v123;
  uint64_t *v124;
  _BOOL4 v125;
  int v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  double v134;
  uint64_t *v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  int8x16_t v144;
  int8x16_t v145;
  int32x4_t v146;
  int32x4_t v147;
  int8x16_t v148;
  uint64_t *v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  unsigned int v153;
  std::__shared_weak_count *v154;
  unint64_t *p_shared_owners;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unsigned int v159;
  int v161;
  unint64_t v162;
  unint64_t v163;
  size_t v164;
  void **v165;
  double v166;
  const void **v167;
  const void *v168;
  uint64_t v169;
  uint64_t v170;
  const char *v171;
  uint64_t v172;
  const char *v173;
  size_t v174;
  unsigned __int8 v175;
  const char *v176;
  size_t v177;
  _BYTE *v178;
  uint64_t v179;
  unint64_t v180;
  const char *v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  void **v185;
  uint64_t v186;
  uint64_t v187;
  NSObject *v188;
  size_t v189;
  std::__shared_weak_count_vtbl *v190;
  std::__shared_weak_count *v191;
  size_t v192;
  size_t v193;
  _QWORD *v194;
  void *v195;
  uint64_t v196;
  uint64_t v197;
  _QWORD *v198;
  char v199;
  _QWORD *v200;
  uint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  void *v205;
  unint64_t *v206;
  unint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  unint64_t v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  uint64_t v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  const char *v220;
  uint64_t v221;
  __int128 v222;
  uint64_t v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  _QWORD *v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  const char *v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  uint64_t v247;
  float64x2_t v248;
  float64x2_t v249;
  double v250;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v255;
  double v256;
  float64x2_t v257;
  double v258;
  double v259;
  float64x2_t v260;
  float64x2_t v261;
  float64x2_t v262;
  float64x2_t v263;
  unsigned int v264;
  float64x2_t v265;
  int v266;
  int v267;
  int8x8_t v268;
  uint64_t v269;
  float64x2_t v270;
  unint64_t v271;
  const char *v272;
  double v273;
  unsigned int v274;
  const char *v275;
  __int128 v276;
  uint64_t v277;
  __int128 v278;
  uint64_t v279;
  float64x2_t v280;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v282;
  const char *v283;
  int v284;
  const char *v285;
  uint64_t v286;
  std::__shared_weak_count *v287;
  void *__dst[2];
  int64_t v289;
  void *__p;
  __int128 v291;
  uint64_t v292;
  uint64_t v293;
  __int128 v294;
  double v295;
  uint64_t v296;
  double v297;
  void *v298;
  char v299;
  double v300;
  int v301;
  uint64_t v302;
  uint64_t v303;
  unint64_t v304;
  uint64_t v305;
  __int128 v306;
  std::__shared_weak_count *v307;
  char *v308;
  std::__shared_weak_count *v309;
  _QWORD *v310;
  __int128 v311;
  _BYTE v312[24];
  __int128 v313;
  void *v314[2];
  unint64_t v315;
  char v316;
  _QWORD v317[5];

  v317[2] = *MEMORY[0x24BDAC8D0];
  v6 = *(int8x8_t ***)(a1[2] + 424);
  v8 = v6[5];
  v7 = v6[6];
  if (v7 != v8)
  {
    v9 = ((char *)v7 - (char *)v8) >> 4;
    v10 = *((_DWORD *)a2 + 4);
    v11 = *(void **)a2;
    while (1)
    {
      v12 = v9 >> 1;
      v13 = &v8[2 * (v9 >> 1)];
      v14 = *v13;
      v15 = *(_DWORD *)(*(_QWORD *)v13 + 16);
      _CF = v15 >= v10;
      if (v15 != v10)
        goto LABEL_9;
      if (**(_QWORD **)&v14 >= (unint64_t)v11)
        break;
LABEL_3:
      v8 = v13 + 2;
      v12 = v9 + ~v12;
LABEL_4:
      v9 = v12;
      if (!v12)
        goto LABEL_12;
    }
    if (**(void ***)&v14 != v11)
      goto LABEL_4;
    _CF = *(_DWORD *)(*(_QWORD *)&v14 + 8) >= *((_DWORD *)a2 + 2);
LABEL_9:
    if (_CF)
      goto LABEL_4;
    goto LABEL_3;
  }
LABEL_12:
  if (v8 == v7)
  {
    v18 = *((_DWORD *)a2 + 4);
    v19 = v6[6];
    v20 = (uint64_t)*v6;
    v21 = (*v6)[224];
    if (!*(_QWORD *)&v21)
      return 0;
    goto LABEL_24;
  }
  v17 = *v8;
  v18 = *(_DWORD *)(*(_QWORD *)v8 + 16);
  if (v18 != *((_DWORD *)a2 + 4))
  {
    v18 = *((_DWORD *)a2 + 4);
LABEL_23:
    v19 = v6[6];
    v20 = (uint64_t)*v6;
    v21 = (*v6)[224];
    if (!*(_QWORD *)&v21)
      return 0;
    goto LABEL_24;
  }
  if (**(_QWORD **)&v17 != *(_QWORD *)a2)
    goto LABEL_23;
  if (*(_DWORD *)(*(_QWORD *)&v17 + 8) == *((_DWORD *)a2 + 2))
    v19 = v8;
  else
    v19 = v6[6];
  v20 = (uint64_t)*v6;
  v21 = (*v6)[224];
  if (!*(_QWORD *)&v21)
    return 0;
LABEL_24:
  v22 = *((_DWORD *)a2 + 2);
  v23 = v22 ^ __ROR4__(v18, 13);
  v24 = (uint8x8_t)vcnt_s8(v21);
  v24.i16[0] = vaddlv_u8(v24);
  if (v24.u32[0] > 1uLL)
  {
    v25 = v23;
    if (*(_QWORD *)&v21 <= v23)
      v25 = v23 % *(_QWORD *)&v21;
  }
  else
  {
    v25 = (v21.i32[0] - 1) & v23;
  }
  v26 = *(uint64_t ***)(*(_QWORD *)(v20 + 1784) + 8 * v25);
  if (!v26)
    return 0;
  v27 = *v26;
  if (!v27)
    return 0;
  v28 = *(void **)a2;
  if (v24.u32[0] < 2uLL)
  {
    v29 = *(_QWORD *)&v21 - 1;
    while (1)
    {
      v31 = v27[1];
      if (v31 == v23)
      {
        if (*((_DWORD *)v27 + 8) == v18 && (void *)v27[2] == v28 && *((_DWORD *)v27 + 6) == v22)
          goto LABEL_47;
      }
      else if ((v31 & v29) != v25)
      {
        return 0;
      }
      v27 = (uint64_t *)*v27;
      if (!v27)
        return 0;
    }
  }
  while (1)
  {
    v30 = v27[1];
    if (v30 == v23)
      break;
    if (v30 >= *(_QWORD *)&v21)
      v30 %= *(_QWORD *)&v21;
    if (v30 != v25)
      return 0;
LABEL_33:
    v27 = (uint64_t *)*v27;
    if (!v27)
      return 0;
  }
  if (*((_DWORD *)v27 + 8) != v18 || (void *)v27[2] != v28 || *((_DWORD *)v27 + 6) != v22)
    goto LABEL_33;
LABEL_47:
  if (v7 == v19)
    return 0;
  v32 = v27[5];
  v33 = *(float64x2_t *)v32;
  _D9 = *(_QWORD *)(v32 + 40);
  v35 = *(double *)(v32 + 64);
  v263 = *(float64x2_t *)(v32 + 24);
  v265 = *(float64x2_t *)(v32 + 48);
  v36 = v27[9];
  v258 = *(double *)(v36 + 16);
  v260 = v33;
  v256 = *(double *)(v36 + 40);
  v252 = *(float64x2_t *)v36;
  v254 = *(float64x2_t *)(v36 + 24);
  v273 = *(double *)(v36 + 64);
  v270 = *(float64x2_t *)(v36 + 48);
  v37.f64[1] = *(float64_t *)(v36 + 56);
  v38 = (float64x2_t *)v27[11];
  v250 = v38[1].f64[0];
  v39 = *v38;
  v40 = (float64x2_t *)v27[7];
  v37.f64[0] = v40[1].f64[0];
  v261 = v37;
  v248 = v39;
  v249 = *v40;
  v41 = (uint64_t)v6[1];
  __p = *(void **)a2;
  LODWORD(v291) = 0;
  v269 = v41;
  v304 = sub_20F25BF64(v41, (unint64_t *)&__p);
  v305 = v42;
  v43 = (a3[1] - *a3) >> 3;
  v44 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)v19 + 80) - *(_QWORD *)(*(_QWORD *)v19 + 72)) >> 3);
  v45 = v43 <= v44;
  if (v43 <= v44)
  {
    v268 = *v19;
    v278 = *a2;
    v279 = *((_QWORD *)a2 + 2);
    sub_20F25C074((char **)&__p, *(_QWORD *)(*(_QWORD *)(a1[2] + 424) + 8), (uint64_t *)&v278);
    v47 = __p;
    v48 = v291;
    if (*(double *)&__p != 0.0)
    {
      *(_QWORD *)&v291 = __p;
      operator delete(__p);
    }
    v49 = v268;
    v50 = v269;
    v51 = *(_QWORD *)(*(_QWORD *)&v268 + 72);
    if (*(_QWORD *)(*(_QWORD *)&v268 + 80) == v51)
      goto LABEL_146;
    v52 = 0;
    v53 = 0;
    _V18.D[1] = v248.f64[1];
    _V19.D[1] = v252.f64[1];
    _V17.D[1] = v254.f64[1];
    __asm { FMLA            D3, D9, V18.D[1] }
    v59 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v260, v252.f64[0]), v263, v252, 1), v265, v258);
    __asm { FMLA            D4, D9, V19.D[1] }
    v61 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v260, v254.f64[0]), v263, v254, 1), v265, v256);
    __asm { FMLA            D5, D9, V17.D[1] }
    _V21.D[1] = v270.f64[1];
    _Q3.f64[0] = _Q3.f64[0] + v35 * v250;
    _Q1 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v260, v248.f64[0]), v263, v248, 1), v265, v250), v249);
    v65 = _D4 + v35 * v258;
    _D19 = _D5 + v35 * v256;
    v67 = (float64x2_t)vzip1q_s64(v59, (int64x2_t)v61);
    _Q17 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v260, v270.f64[0]), v263, v270, 1), v265, v273);
    v69 = (float64x2_t)vzip2q_s64(v59, (int64x2_t)v61);
    *(_QWORD *)&v70 = *(_OWORD *)&vaddq_f64(_Q3, v261);
    _Q6.f64[0] = v65;
    _Q6.f64[1] = _D19;
    _Q5 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v67, _Q1.f64[0]), v69, _Q1, 1), _Q6, v70);
    __asm { FMLA            D7, D9, V21.D[1] }
    _Q1.f64[0] = _Q1.f64[1];
    v74 = (int64x2_t)vextq_s8((int8x16_t)vdupq_lane_s64(*(uint64_t *)&v69.f64[0], 0), (int8x16_t)vdupq_laneq_s64((int64x2_t)v69, 1), 8uLL);
    v259 = _D19;
    v75 = _D7 + v35 * v273;
    __asm { FMLA            D6, D1, V17.D[1] }
    v76 = (float64x2_t)vzip1q_s64((int64x2_t)v67, v74);
    _Q6.f64[0] = vmlad_n_f64(_Q6.f64[0], v75, v70);
    *(_QWORD *)&v61.f64[1] = v74.i64[1];
    __asm { FMLA            D16, D19, V5.D[1] }
    v78 = v48 - (_QWORD)v47;
    v79 = 0;
    *(_QWORD *)&_Q17.f64[1] = vdupq_laneq_s64((int64x2_t)_Q17, 1).u64[0];
    v80 = (int8x16_t)vdupq_laneq_s64((int64x2_t)v61, 1);
    v81 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&v61.f64[0], 0);
    v82 = vmlaq_laneq_f64(vmulq_n_f64(v76, _Q5.f64[0]), v61, _Q5, 1);
    v61.f64[0] = _D16 + v75 * _Q6.f64[0];
    v253 = v61;
    v271 = v78 >> 3;
    v262 = _Q17;
    v83 = (int8x16_t)vmlaq_n_f64(v82, _Q17, _Q6.f64[0]);
    v251 = (float64x2_t)vextq_s8(v81, v80, 8uLL);
    *(_QWORD *)&v76.f64[1] = vextq_s8((int8x16_t)v76, (int8x16_t)v76, 8uLL).u64[0];
    v83.i64[1] = vextq_s8(v83, v83, 8uLL).u64[0];
    v255 = (float64x2_t)v83;
    v257 = v76;
    while (1)
    {
      v84 = v51 + 40 * v52;
      v85 = *(int8x8_t *)(v50 + 32);
      if (!*(_QWORD *)&v85)
        goto LABEL_97;
      v86 = *((_DWORD *)a2 + 4);
      v87 = *((_DWORD *)a2 + 2);
      v88 = v87 ^ __ROR4__(v86, 13);
      v89 = (uint8x8_t)vcnt_s8(v85);
      v89.i16[0] = vaddlv_u8(v89);
      if (v89.u32[0] > 1uLL)
      {
        v90 = v88;
        if (*(_QWORD *)&v85 <= v88)
          v90 = v88 % *(_QWORD *)&v85;
      }
      else
      {
        v90 = (v85.i32[0] - 1) & v88;
      }
      v91 = *(int8x8_t ***)(*(_QWORD *)(v50 + 24) + 8 * v90);
      if (!v91 || (v92 = *v91) == 0)
      {
LABEL_97:
        v104 = 0;
LABEL_98:
        v306 = v104;
        goto LABEL_99;
      }
      v93 = *(unsigned int *)(v84 + 4);
      v94 = *(void **)a2;
      if (v89.u32[0] < 2uLL)
      {
        v95 = *(_QWORD *)&v85 - 1;
        while (1)
        {
          v97 = v92[1];
          if (*(_QWORD *)&v97 == v88)
          {
            if (v92[4].i32[0] == v86 && (void *)v92[2] == v94 && v92[3].i32[0] == v87)
              goto LABEL_77;
          }
          else if ((*(_QWORD *)&v97 & v95) != v90)
          {
            goto LABEL_97;
          }
          v92 = (int8x8_t *)*v92;
          if (!v92)
            goto LABEL_97;
        }
      }
      while (1)
      {
        v96 = v92[1];
        if (*(_QWORD *)&v96 == v88)
          break;
        if (*(_QWORD *)&v96 >= *(_QWORD *)&v85)
          *(_QWORD *)&v96 %= *(_QWORD *)&v85;
        if (*(_QWORD *)&v96 != v90)
          goto LABEL_97;
LABEL_63:
        v92 = (int8x8_t *)*v92;
        if (!v92)
          goto LABEL_97;
      }
      if (v92[4].i32[0] != v86 || (void *)v92[2] != v94 || v92[3].i32[0] != v87)
        goto LABEL_63;
LABEL_77:
      v98 = v92[6];
      if (!*(_QWORD *)&v98)
        goto LABEL_97;
      v99 = (uint8x8_t)vcnt_s8(v98);
      v99.i16[0] = vaddlv_u8(v99);
      if (v99.u32[0] > 1uLL)
      {
        v100 = *(unsigned int *)(v84 + 4);
        if (*(_QWORD *)&v98 <= v93)
          v100 = v93 % *(_QWORD *)&v98;
      }
      else
      {
        v100 = (v98.i32[0] - 1) & v93;
      }
      v101 = *(uint64_t ***)(*(_QWORD *)&v92[5] + 8 * v100);
      if (!v101)
        goto LABEL_97;
      v102 = *v101;
      if (!v102)
        goto LABEL_97;
      if (v99.u32[0] < 2uLL)
      {
        v103 = *(_QWORD *)&v98 - 1;
        while (1)
        {
          v106 = v102[1];
          if (v106 == v93)
          {
            if (*((_DWORD *)v102 + 4) == (_DWORD)v93)
              goto LABEL_129;
          }
          else if ((v106 & v103) != v100)
          {
            goto LABEL_97;
          }
          v104 = 0;
          v102 = (uint64_t *)*v102;
          if (!v102)
            goto LABEL_98;
        }
      }
      while (2)
      {
        v105 = v102[1];
        if (v105 != v93)
        {
          if (v105 >= *(_QWORD *)&v98)
            v105 %= *(_QWORD *)&v98;
          if (v105 != v100)
            goto LABEL_97;
          goto LABEL_87;
        }
        if (*((_DWORD *)v102 + 4) != (_DWORD)v93)
        {
LABEL_87:
          v104 = 0;
          v102 = (uint64_t *)*v102;
          if (!v102)
            goto LABEL_98;
          continue;
        }
        break;
      }
LABEL_129:
      v104 = v102[3];
      v154 = (std::__shared_weak_count *)v102[4];
      if (!v154)
      {
        v49 = v268;
        v50 = v269;
        goto LABEL_98;
      }
      p_shared_owners = (unint64_t *)&v154->__shared_owners_;
      do
        v156 = __ldxr(p_shared_owners);
      while (__stxr(v156 + 1, p_shared_owners));
      *(_QWORD *)&v306 = v104;
      *((_QWORD *)&v306 + 1) = v154;
      do
        v157 = __ldxr(p_shared_owners);
      while (__stxr(v157 + 1, p_shared_owners));
      do
        v158 = __ldaxr(p_shared_owners);
      while (__stlxr(v158 - 1, p_shared_owners));
      v49 = v268;
      v50 = v269;
      if (!v158)
      {
        v267 = v79;
        v159 = v53;
        ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
        std::__shared_weak_count::__release_weak(v154);
        v53 = v159;
        v49 = v268;
        v50 = v269;
        v84 = v51 + 40 * v52;
        v79 = v267;
      }
LABEL_99:
      v107 = *(_DWORD *)(*a1 + 2504);
      v274 = v79 + v271;
      if (v79 + (int)v271 < v107 && (_QWORD)v306 == 0)
      {
        v109 = *a3;
        if (*(float *)(*a3 + 8 * v52 + 4) > *(float *)(*a1 + 2764))
        {
          v264 = v53;
          v266 = v79;
          v110 = 8 * v52;
          _Q0 = *(float64x2_t *)(v51 + 40 * v52 + 16);
          _D2 = _Q0.f64[1];
          __asm { FMLA            D1, D2, V0.D[1] }
          *(double *)&v312[16] = 1.0 / sqrt(_D1 + 1.0);
          *(float64x2_t *)v312 = vmulq_n_f64(_Q0, *(double *)&v312[16]);
          v114 = *(float *)(v109 + 8 * v52);
          _Q0 = vmulq_n_f64(_Q0, v114);
          _D4 = v259;
          v117 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v257, _Q0.f64[0]), v251, _Q0, 1), v262, v114);
          __asm { FMLA            D3, D4, V0.D[1] }
          _Q0.f64[0] = _D3 + v75 * v114;
          v280 = vaddq_f64(v255, v117);
          rep = *(_OWORD *)&vaddq_f64(v253, _Q0);
          v119 = v50;
          v120 = sub_20F25C29C(v305, (uint64_t *)a2, v20, (__int128 *)&v280, (__int128 *)v312, v50, v84);
          v304 = sub_20F25BF64(v119, &v304);
          LODWORD(v305) = v122;
          v123 = *((unsigned __int8 *)v120 + 192);
          if (*((_BYTE *)v120 + 192))
            v124 = v120 + 5;
          else
            v124 = 0;
          *(_WORD *)((char *)v124 + 149) = 257;
          v295 = 0.0;
          *(double *)&v292 = 0.0;
          v294 = 0u;
          v291 = 0u;
          *(double *)&__p = 1.0;
          *(double *)&v293 = 1.0;
          v296 = 0x3FF0000000000000;
          if (*(_BYTE *)(*a1 + 476))
          {
            v125 = sub_20F34CE4C((uint64_t)&__p, (uint64_t)v120, *(_QWORD **)(a1[2] + 424), *(float *)(*a1 + 472) * *(float *)(*a3 + v110), *(double *)(*a1 + 464));
            v123 = *((unsigned __int8 *)v120 + 192);
            v50 = v269;
            v126 = v266;
            v53 = v264;
            if (v125)
            {
              v128 = *(double *)&__p;
              v127 = *(double *)&v291;
              v129 = v295;
              v121.i64[0] = v296;
              v130 = *((double *)&v291 + 1);
              v131 = *(double *)&v292;
              v133 = *((double *)&v294 + 1);
              v132 = *(double *)&v294;
              v134 = *(double *)&v293;
              goto LABEL_112;
            }
            if (*((_BYTE *)v120 + 192))
              v149 = v120 + 5;
            else
              v149 = 0;
            *((_BYTE *)v149 + 148) = 0;
          }
          else
          {
            v129 = 0.0;
            v134 = 1.0;
            v130 = 0.0;
            v132 = 0.0;
            v121.i64[0] = 1.0;
            v127 = 0.0;
            v133 = 0.0;
            v131 = 0.0;
            v128 = 1.0;
            v50 = v269;
            v126 = v266;
            v53 = v264;
LABEL_112:
            if (v123)
              v135 = v120 + 5;
            else
              v135 = 0;
            v136 = v128;
            v137 = v131;
            *((float *)v135 + 28) = v136;
            *((float *)v135 + 29) = v137;
            v138 = v133;
            v139 = v127;
            *((float *)v135 + 30) = v138;
            *((float *)v135 + 31) = v139;
            *(float *)v121.i32 = *(double *)v121.i64;
            v140 = v132;
            v141 = v130;
            v142 = v129;
            v143 = v134;
            *((float *)v135 + 32) = v143;
            *((float *)v135 + 33) = v142;
            *((float *)v135 + 34) = v141;
            *((float *)v135 + 35) = v140;
            *((_DWORD *)v135 + 36) = v121.i32[0];
            v145 = *((int8x16_t *)v135 + 7);
            v144 = *((int8x16_t *)v135 + 8);
            v146 = (int32x4_t)vextq_s8(v145, v144, 0xCuLL);
            v147 = (int32x4_t)vextq_s8(v144, v121, 8uLL);
            v148 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v146, (int8x16_t)v146, 0xCuLL), (int8x16_t)v146, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v147, v147), (int8x16_t)v147, 0xCuLL)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v146, v146), (int8x16_t)v146, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v147, (int8x16_t)v147, 0xCuLL), (int8x16_t)v147, 8uLL));
            *((_BYTE *)v135 + 148) = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v145.i8, *(float32x2_t *)v148.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v148.i8, 1), *(float32x2_t *)v145.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v148, v148, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v145, v145, 8uLL)).f32[0] > 0.0;
          }
          v49 = v268;
          v79 = v126 + 1;
        }
      }
      v150 = (std::__shared_weak_count *)*((_QWORD *)&v306 + 1);
      if (*((_QWORD *)&v306 + 1))
      {
        v151 = (unint64_t *)(*((_QWORD *)&v306 + 1) + 8);
        do
          v152 = __ldaxr(v151);
        while (__stlxr(v152 - 1, v151));
        if (!v152)
        {
          v153 = v53;
          ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
          std::__shared_weak_count::__release_weak(v150);
          v53 = v153;
          v49 = v268;
          v50 = v269;
        }
      }
      if (v274 < v107)
      {
        v51 = *(_QWORD *)(*(_QWORD *)&v49 + 72);
        v52 = ++v53;
        if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(*(_QWORD *)&v49 + 80) - v51) >> 3) > v53)
          continue;
      }
LABEL_146:
      v276 = *a2;
      v277 = *((_QWORD *)a2 + 2);
      sub_20F25C074((char **)&__p, *(_QWORD *)(*(_QWORD *)(a1[2] + 424) + 8), (uint64_t *)&v276);
      sub_20F28C48C((int32x4_t **)(*(_QWORD *)v19 + 552), (int32x4_t *)__p, (int32x4_t *)v291, (uint64_t)(v291 - (_QWORD)__p) >> 3);
      if (*(double *)&__p != 0.0)
      {
        *(_QWORD *)&v291 = __p;
        operator delete(__p);
      }
      return v45;
    }
  }
  sub_20F24E118(&v303);
  if (**(int **)(v303 + 56) > 2)
    return v45;
  v161 = *(unsigned __int8 *)(v303 + 72);
  v162 = sub_20E8C31DC(v303, "OSLogSurrogateAppender", 1, 0);
  v163 = v162;
  if (!v161 && !v162)
    return v45;
  sub_20E863438((uint64_t)&__p);
  sub_20E86A980((_QWORD *)&v291 + 1, (uint64_t)"Features and depths are different size. Frame features are already pruned", 73);
  if ((v301 & 0x10) != 0)
  {
    v166 = v300;
    if (*(_QWORD *)&v300 < *(_QWORD *)&v297)
    {
      v300 = v297;
      v166 = v297;
    }
    v167 = (const void **)&v296;
  }
  else
  {
    if ((v301 & 8) == 0)
    {
      v164 = 0;
      HIBYTE(v289) = 0;
      v165 = __dst;
      goto LABEL_160;
    }
    v167 = (const void **)&v294;
    v166 = v295;
  }
  v168 = *v167;
  v164 = *(_QWORD *)&v166 - (_QWORD)*v167;
  if (v164 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v164 >= 0x17)
  {
    v169 = (v164 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v164 | 7) != 0x17)
      v169 = v164 | 7;
    v170 = v169 + 1;
    v165 = (void **)operator new(v169 + 1);
    __dst[1] = (void *)v164;
    v289 = v170 | 0x8000000000000000;
    __dst[0] = v165;
    goto LABEL_159;
  }
  HIBYTE(v289) = LOBYTE(v166) - *(_BYTE *)v167;
  v165 = __dst;
  if (v164)
LABEL_159:
    memmove(v165, v168, v164);
LABEL_160:
  *((_BYTE *)v165 + v164) = 0;
  *(_QWORD *)&v280.f64[0] = &v303;
  *(std::chrono::steady_clock::time_point *)&v280.f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
  rep = std::chrono::system_clock::now().__d_.__rep_;
  v282 = 2;
  v283 = "unknown file";
  v284 = 862;
  v286 = 0;
  v287 = 0;
  v285 = "unknown function";
  if (v289 >= 0)
    v171 = (const char *)__dst;
  else
    v171 = (const char *)__dst[0];
  v172 = **(_QWORD **)&v280.f64[0];
  v173 = (const char *)(**(_QWORD **)&v280.f64[0] + 16);
  v275 = v173;
  if (*(char *)(**(_QWORD **)&v280.f64[0] + 39) < 0)
  {
    v173 = *(const char **)(v172 + 16);
    v174 = *(_QWORD *)(v172 + 24);
  }
  else
  {
    v174 = *(unsigned __int8 *)(**(_QWORD **)&v280.f64[0] + 39);
  }
  v175 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v175 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v312);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v312);
    if ((_BYTE)v313 && (v312[23] & 0x80000000) != 0)
      operator delete(*(void **)v312);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v176 = byte_254A4A4F8;
  else
    v176 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v177 = byte_254A4A4F8[23];
  else
    v177 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)v312 = os_log_create(v176, v173);
  v178 = &v312[8];
  if (v177 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v177 >= 0x17)
  {
    v272 = v173;
    v179 = v172;
    v180 = v163;
    v181 = v171;
    v182 = v161;
    v183 = (v177 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v177 | 7) != 0x17)
      v183 = v177 | 7;
    v184 = v183 + 1;
    v178 = operator new(v183 + 1);
    *(_QWORD *)&v312[16] = v177;
    *(_QWORD *)&v313 = v184 | 0x8000000000000000;
    *(_QWORD *)&v312[8] = v178;
    v161 = v182;
    v171 = v181;
    v163 = v180;
    v172 = v179;
    v173 = v272;
    goto LABEL_180;
  }
  BYTE7(v313) = v177;
  if (v177)
LABEL_180:
    memmove(v178, v176, v177);
  v178[v177] = 0;
  BYTE8(v313) = 1;
  v185 = v314;
  if (v174 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v174 >= 0x17)
  {
    v186 = (v174 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v174 | 7) != 0x17)
      v186 = v174 | 7;
    v187 = v186 + 1;
    v185 = (void **)operator new(v186 + 1);
    v314[1] = (void *)v174;
    v315 = v187 | 0x8000000000000000;
    v314[0] = v185;
    goto LABEL_188;
  }
  HIBYTE(v315) = v174;
  if (v174)
LABEL_188:
    memmove(v185, v173, v174);
  *((_BYTE *)v185 + v174) = 0;
  v316 = 1;
  v188 = *(NSObject **)v312;
  if (SHIBYTE(v315) < 0)
    operator delete(v314[0]);
  if (BYTE8(v313) && SBYTE7(v313) < 0)
    operator delete(*(void **)&v312[8]);
  if (*(_QWORD *)v312)
    os_release(*(void **)v312);
  if (v163 && *(_QWORD *)(v163 + 24))
  {
    v189 = _os_log_pack_size();
    v190 = (std::__shared_weak_count_vtbl *)operator new(v189, (std::align_val_t)8uLL);
    v191 = (std::__shared_weak_count *)operator new();
    v191->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v191->__shared_owners_ = 0;
    v191->__shared_weak_owners_ = 0;
    v191[1].__vftable = v190;
    *(_QWORD *)&v306 = v190;
    *((_QWORD *)&v306 + 1) = v190;
    v309 = 0;
    v307 = v191;
    v308 = 0;
    v192 = strlen(v171);
    if (v192 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    v193 = v192;
    if (v192 >= 0x17)
    {
      v196 = (v192 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v192 | 7) != 0x17)
        v196 = v192 | 7;
      v197 = v196 + 1;
      v194 = operator new(v196 + 1);
      *(_QWORD *)&v311 = v193;
      *((_QWORD *)&v311 + 1) = v197 | 0x8000000000000000;
      v310 = v194;
    }
    else
    {
      HIBYTE(v311) = v192;
      v194 = &v310;
      if (!v192)
        goto LABEL_208;
    }
    memcpy(v194, v171, v193);
LABEL_208:
    *((_BYTE *)v194 + v193) = 0;
    v198 = v310;
    v317[0] = v311;
    *(_QWORD *)((char *)v317 + 7) = *(_QWORD *)((char *)&v311 + 7);
    v199 = HIBYTE(v311);
    v200 = operator new(0x38uLL);
    v200[1] = 0;
    v200[2] = 0;
    v200[3] = off_24C9ABC20;
    *v200 = &off_24C9ABBD0;
    v201 = v317[0];
    v200[4] = v198;
    v200[5] = v201;
    *(_QWORD *)((char *)v200 + 47) = *(_QWORD *)((char *)v317 + 7);
    *((_BYTE *)v200 + 55) = v199;
    v317[0] = 0;
    *(_QWORD *)((char *)v317 + 7) = 0;
    v202 = v309;
    v308 = (char *)(v200 + 3);
    v309 = (std::__shared_weak_count *)v200;
    if (v202)
    {
      v203 = (unint64_t *)&v202->__shared_owners_;
      do
        v204 = __ldaxr(v203);
      while (__stlxr(v204 - 1, v203));
      if (!v204)
      {
        ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
        std::__shared_weak_count::__release_weak(v202);
      }
    }
    *(_OWORD *)v312 = v306;
    v205 = v308;
    *(_QWORD *)&v312[16] = v307;
    if (v307)
    {
      v206 = (unint64_t *)&v307->__shared_owners_;
      do
        v207 = __ldxr(v206);
      while (__stxr(v207 + 1, v206));
    }
    v208 = v309;
    *(_QWORD *)&v313 = v205;
    *((_QWORD *)&v313 + 1) = v309;
    if (v309)
    {
      v209 = (unint64_t *)&v309->__shared_owners_;
      do
        v210 = __ldxr(v209);
      while (__stxr(v210 + 1, v209));
      v314[0] = v205;
      do
        v211 = __ldaxr(v209);
      while (__stlxr(v211 - 1, v209));
      if (!v211)
      {
        ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
        std::__shared_weak_count::__release_weak(v208);
      }
    }
    else
    {
      v314[0] = v205;
    }
    v212 = v307;
    if (v307)
    {
      v213 = (unint64_t *)&v307->__shared_owners_;
      do
        v214 = __ldaxr(v213);
      while (__stlxr(v214 - 1, v213));
      if (!v214)
      {
        ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
        std::__shared_weak_count::__release_weak(v212);
      }
    }
    v215 = *(_QWORD *)v312;
    if (*((char *)v314[0] + 31) >= 0)
      v216 = (char *)v314[0] + 8;
    else
      v216 = (char *)*((_QWORD *)v314[0] + 1);
    v217 = _os_log_pack_fill();
    *(_DWORD *)v217 = 136315138;
    *(_QWORD *)(v217 + 4) = v216;
    v218 = operator new();
    v219 = *(unsigned __int8 *)(v172 + 39);
    v220 = *(const char **)(v172 + 16);
    v221 = *(_QWORD *)(v172 + 24);
    v222 = v313;
    *(_OWORD *)(v218 + 8) = *(_OWORD *)&v312[8];
    if ((v219 & 0x80u) != 0)
      v219 = v221;
    else
      v220 = v275;
    *(_QWORD *)v218 = v215;
    *(_QWORD *)&v312[8] = 0;
    *(_QWORD *)&v312[16] = 0;
    *(_OWORD *)(v218 + 24) = v222;
    v313 = 0uLL;
    *(_QWORD *)(v218 + 40) = v220;
    *(_QWORD *)(v218 + 48) = v219;
    *(_BYTE *)(v218 + 56) = 2;
    v310 = 0;
    *(_QWORD *)&v306 = v218;
    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v163 + 24) + 40))(*(_QWORD *)(v163 + 24), &v306);
    v223 = v306;
    *(_QWORD *)&v306 = 0;
    if (v223)
    {
      v224 = *(std::__shared_weak_count **)(v223 + 32);
      if (v224)
      {
        v225 = (unint64_t *)&v224->__shared_owners_;
        do
          v226 = __ldaxr(v225);
        while (__stlxr(v226 - 1, v225));
        if (!v226)
        {
          ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
          std::__shared_weak_count::__release_weak(v224);
        }
      }
      v227 = *(std::__shared_weak_count **)(v223 + 16);
      if (v227)
      {
        v228 = (unint64_t *)&v227->__shared_owners_;
        do
          v229 = __ldaxr(v228);
        while (__stlxr(v229 - 1, v228));
        if (!v229)
        {
          ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
          std::__shared_weak_count::__release_weak(v227);
        }
      }
      MEMORY[0x212BC6398](v223, 0x10F0C40B62ED6C6);
      v230 = v310;
      v310 = 0;
      if (v230)
      {
        v231 = (std::__shared_weak_count *)v230[4];
        if (v231)
        {
          v232 = (unint64_t *)&v231->__shared_owners_;
          do
            v233 = __ldaxr(v232);
          while (__stlxr(v233 - 1, v232));
          if (!v233)
          {
            ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
            std::__shared_weak_count::__release_weak(v231);
          }
        }
        v234 = (std::__shared_weak_count *)v230[2];
        if (v234)
        {
          v235 = (unint64_t *)&v234->__shared_owners_;
          do
            v236 = __ldaxr(v235);
          while (__stlxr(v236 - 1, v235));
          if (!v236)
          {
            ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
            std::__shared_weak_count::__release_weak(v234);
          }
        }
        MEMORY[0x212BC6398](v230, 0x10F0C40B62ED6C6);
      }
    }
    v237 = (std::__shared_weak_count *)*((_QWORD *)&v313 + 1);
    if (*((_QWORD *)&v313 + 1))
    {
      v238 = (unint64_t *)(*((_QWORD *)&v313 + 1) + 8);
      do
        v239 = __ldaxr(v238);
      while (__stlxr(v239 - 1, v238));
      if (!v239)
      {
        ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
        std::__shared_weak_count::__release_weak(v237);
      }
    }
    v240 = *(std::__shared_weak_count **)&v312[16];
    if (*(_QWORD *)&v312[16])
    {
      v241 = (unint64_t *)(*(_QWORD *)&v312[16] + 8);
      do
        v242 = __ldaxr(v241);
      while (__stlxr(v242 - 1, v241));
      if (!v242)
      {
        ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
        std::__shared_weak_count::__release_weak(v240);
      }
    }
  }
  else
  {
    os_log_type_enabled(v188, OS_LOG_TYPE_DEBUG);
    *(_DWORD *)v312 = 136315138;
    *(_QWORD *)&v312[4] = v171;
    v195 = (void *)_os_log_send_and_compose_impl();
    if (v195)
      free(v195);
  }
  if (v161)
  {
    v243 = (const char *)__dst;
    if (v289 < 0)
      v243 = (const char *)__dst[0];
    sub_20E8C003C((uint64_t)&v280, "%s", v243);
    sub_20E863570((uint64_t)&v280);
  }
  sub_20E863570((uint64_t)&v280);
  v244 = v287;
  if (v287)
  {
    v245 = (unint64_t *)&v287->__shared_owners_;
    do
      v246 = __ldaxr(v245);
    while (__stlxr(v246 - 1, v245));
    if (!v246)
    {
      ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
      std::__shared_weak_count::__release_weak(v244);
    }
  }
  if (SHIBYTE(v289) < 0)
    operator delete(__dst[0]);
  __p = *(void **)MEMORY[0x24BEDB7F0];
  v247 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(void **)((char *)&__p + *((_QWORD *)__p - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
  *((_QWORD *)&v291 + 1) = v247;
  v292 = MEMORY[0x24BEDB848] + 16;
  if (v299 < 0)
    operator delete(v298);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](&v302);
  return v45;
}

void sub_20F25BDB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61,char a62)
{
  uint64_t v62;

  if (*(_BYTE *)(v62 - 200) && *(char *)(v62 - 201) < 0)
    operator delete(*(void **)(v62 - 224));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a47);
  if (a61 < 0)
    operator delete(__p);
  sub_20E863784((uint64_t)&a62);
  _Unwind_Resume(a1);
}

void sub_20F25BF00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20F25BF5CLL);
}

void sub_20F25BF1C(_Unwind_Exception *a1)
{
  sub_20E86665C((uint64_t)&STACK[0x2C0]);
  _Unwind_Resume(a1);
}

void sub_20F25BF30(_Unwind_Exception *a1)
{
  sub_20E86665C((uint64_t)&STACK[0x2C0]);
  _Unwind_Resume(a1);
}

void sub_20F25BF44(_Unwind_Exception *a1)
{
  sub_20E86665C((uint64_t)&STACK[0x2C0]);
  _Unwind_Resume(a1);
}

void sub_20F25BF58(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

unint64_t sub_20F25BF64(uint64_t a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;

  v2 = *a2;
  v3 = a2[1];
  v5 = (_QWORD *)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      v6 = v5;
      do
      {
        v7 = v4[4];
        if (v7 < v2)
        {
          ++v4;
        }
        else if (v7 == v2)
        {
          if (*((_DWORD *)v4 + 10) < v3)
            ++v4;
          else
            v6 = v4;
        }
        else
        {
          v6 = v4;
        }
        v4 = (uint64_t *)*v4;
      }
      while (v4);
      if (v6 == v5)
        break;
      v8 = v6[4];
      if (v2 < v8 || v2 == v8 && *((_DWORD *)v6 + 10) > v3)
        break;
      v10 = v6[6];
      v9 = (std::__shared_weak_count *)v6[7];
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      if (!v10)
        break;
      LODWORD(v3) = v3 + 1;
      v4 = (uint64_t *)*v5;
    }
    while (*v5);
  }
  return v2;
}

void sub_20F25C074(char **a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = sub_20E9DF85C((_QWORD *)(a2 + 24), a3);
  if (v4)
  {
    v5 = v4[7];
    if (v5)
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        while (1)
        {
          v9 = *(unsigned int *)(v5 + 16);
          if (v8 >= v7)
            break;
          *(_QWORD *)v8 = v9;
          v8 += 8;
          a1[1] = v8;
          v5 = *(_QWORD *)v5;
          if (!v5)
            return;
        }
        v10 = (v8 - v6) >> 3;
        v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 61)
          sub_20E867F44();
        if ((v7 - v6) >> 2 > v11)
          v11 = (v7 - v6) >> 2;
        if ((unint64_t)(v7 - v6) >= 0x7FFFFFFFFFFFFFF8)
          v12 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v12 = v11;
        if (v12)
        {
          if (v12 >> 61)
            sub_20E877A38();
          v13 = operator new(8 * v12);
          v14 = &v13[8 * v10];
          *(_QWORD *)v14 = v9;
          v15 = (uint64_t)(v14 + 8);
          v16 = v8 - v6;
          if (v8 == v6)
            goto LABEL_20;
        }
        else
        {
          v13 = 0;
          v14 = (char *)(8 * v10);
          *(_QWORD *)(8 * v10) = v9;
          v15 = 8 * v10 + 8;
          v16 = v8 - v6;
          if (v8 == v6)
            goto LABEL_20;
        }
        v17 = v16 - 8;
        if (v17 < 0x168)
        {
          v18 = v8;
          goto LABEL_19;
        }
        v20 = (v8 - 8 - v6) & 0xFFFFFFFFFFFFFFF8;
        if (&v13[v8 - v6 - 8 - v20] > &v13[v8 - v6 - 8])
          break;
        if (&v8[-v20 - 8] > v8 - 8)
        {
          v18 = v8;
          goto LABEL_19;
        }
        if ((unint64_t)(v6 - v13) < 0x20)
        {
          v18 = v8;
          goto LABEL_19;
        }
        v21 = (v17 >> 3) + 1;
        v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
        v18 = &v8[-v22];
        v14 -= v22;
        v23 = &v13[8 * v10 - 16];
        v24 = v8 - 16;
        v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v26 = *(_OWORD *)v24;
          *(v23 - 1) = *((_OWORD *)v24 - 1);
          *v23 = v26;
          v23 -= 2;
          v24 -= 32;
          v25 -= 4;
        }
        while (v25);
        if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_19;
LABEL_20:
        v7 = &v13[8 * v12];
        *a1 = v14;
        a1[1] = (char *)v15;
        a1[2] = v7;
        if (v6)
          operator delete(v6);
        v6 = v14;
        a1[1] = (char *)v15;
        v5 = *(_QWORD *)v5;
        v8 = (char *)v15;
        if (!v5)
          return;
      }
      v18 = v8;
      do
      {
LABEL_19:
        v19 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v18 != v6);
      goto LABEL_20;
    }
  }
}

void sub_20F25C27C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20F25C29C(unsigned int a1, uint64_t *a2, uint64_t a3, __int128 *a4, __int128 *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  __int128 v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  float v20;
  __int128 v28;
  __int128 v29;
  uint64_t *v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  __int16 v35;
  uint64_t *v36;
  std::__shared_weak_count *v37;
  __int128 v38;
  _OWORD v39[2];
  _OWORD v40[3];
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v13 = *a2;
  *(_QWORD *)&v40[0] = &off_24C9FC700;
  *((_QWORD *)&v40[0] + 1) = v13;
  *(_QWORD *)&v40[1] = a1;
  *((_QWORD *)&v40[1] + 1) = a7;
  *(_QWORD *)&v40[2] = 0;
  v14 = sub_20F28AA04((_QWORD *)(a6 + 24), a2);
  sub_20F289D80((uint64_t **)a6, (int8x8_t *)v14, (uint64_t)v40, &v36);
  v15 = v36;
  if (v36)
  {
    if (v36[26] - v36[25] == 32)
      goto LABEL_3;
    goto LABEL_22;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingTypes/include/VIO/MappingTypes/MapKeyframeCreator.hpp", 195, (uint64_t)"new_track", 9, (uint64_t)&unk_21029C995, 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_26;
  }
  v15 = v36;
  if (v36[26] - v36[25] != 32)
  {
LABEL_22:
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingTypes/include/VIO/MappingTypes/MapKeyframeCreator.hpp", 196, (uint64_t)"new_track->getTrackLength() == 1u", 33, (uint64_t)&unk_21029C995, 0, (void (*)(void **))sub_21023DDB0))
    {
      v15 = v36;
      if (*((_BYTE *)v36 + 192))
        goto LABEL_4;
      goto LABEL_24;
    }
LABEL_26:
    abort();
  }
LABEL_3:
  if (*((_BYTE *)v15 + 192))
    goto LABEL_4;
LABEL_24:
  memset(v40, 0, sizeof(v40));
  v38 = 0u;
  memset(v39, 0, 23);
  v15[7] = 0;
  v15[8] = 0;
  *(_OWORD *)(v15 + 9) = *(_OWORD *)((char *)&v40[1] + 8);
  v15[11] = *((_QWORD *)&v40[2] + 1);
  *((_BYTE *)v15 + 96) = 1;
  *(_WORD *)((char *)v15 + 97) = 0;
  v15[13] = 0;
  v15[14] = 0;
  v15[15] = 0;
  v15[16] = 0xFFEFFFFFFFFFFFFFLL;
  v15[17] = 0;
  v15[18] = 0x3FF0000000000000;
  v15[5] = (uint64_t)&off_24C9FC600;
  v15[6] = 0;
  *((_DWORD *)v15 + 46) = 0;
  *(_OWORD *)(v15 + 21) = 0u;
  *(_OWORD *)(v15 + 19) = 0u;
  v35 = WORD2(v39[1]);
  *((_BYTE *)v15 + 190) = BYTE6(v39[1]);
  *((_WORD *)v15 + 94) = v35;
  *((_BYTE *)v15 + 192) = 1;
LABEL_4:
  v16 = *a4;
  v15[8] = *((_QWORD *)a4 + 2);
  *((_OWORD *)v15 + 3) = v16;
  *((_BYTE *)v15 + 190) = 1;
  v17 = sub_20E9DF85C((_QWORD *)(a3 + 1784), a2);
  if (v17)
    v18 = v17 + 5;
  else
    v18 = 0;
  if (*((_BYTE *)v36 + 192))
    v19 = v36 + 5;
  else
    v19 = 0;
  v20 = *(float *)(a7 + 12);
  _Q1 = *a5;
  _D3 = *((_QWORD *)a5 + 1);
  __asm { FMLA            D2, D3, V1.D[1] }
  if (fabs(sqrt(_D2 + *((double *)a5 + 2) * *((double *)a5 + 2)) + -1.0) > 0.000001
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioanchoredpoint3d.hpp", 41, (uint64_t)"std::fabs(vio::math::L2Norm3(anchor_direcrion.data()) - 1) <= 1e-6", 66, (uint64_t)"anchor direction should be normalized to 1", 42, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_25;
  }
  v28 = *(_OWORD *)a2;
  *((_DWORD *)v19 + 12) = *((_DWORD *)a2 + 4);
  *((_OWORD *)v19 + 2) = v28;
  v19[12] = (uint64_t)v18;
  v29 = *a5;
  v19[10] = *((_QWORD *)a5 + 2);
  *((_OWORD *)v19 + 4) = v29;
  *((double *)v19 + 11) = v20;
  if (((*(uint64_t (**)(uint64_t *))(*v19 + 16))(v19) & 1) == 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingTypes/include/VIO/MappingTypes/MapKeyframeCreator.hpp", 206, (uint64_t)"ret", 3, (uint64_t)"We should not failing set a anchor", 34, (void (*)(void **))sub_21023DDB0))
  {
LABEL_25:
    abort();
  }
  v30 = v36;
  v31 = v37;
  if (v37)
  {
    p_shared_owners = (unint64_t *)&v37->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  return v30;
}

void sub_20F25C5E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20F25C5FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20F25C610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20F25C624(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t i;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  unint64_t prime;
  double v16;
  _QWORD *v17;
  _QWORD *v18;
  int8x8_t v19;
  size_t v20;
  uint8x8_t v21;
  uint64_t v22;
  size_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t *v31;
  uint64_t v32;
  float64x2_t v34;
  double v35;
  double v37;
  float64x2_t *v39;
  double v40;
  float64x2_t v42;
  uint64_t v43;
  int64x2_t v44;
  float64x2_t v46;
  unint64_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  int8x16_t v53;
  uint64_t v54;
  double v55;
  float64x2_t v56;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  int64x2_t v63;
  int64x2_t v64;
  int64x2_t v65;
  int64x2_t v66;
  int64x2_t v67;
  float64x2_t v71;
  float64x2_t v72;
  int8x16_t v73;
  uint64_t v74;
  _QWORD *v75;
  int v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v80;
  size_t v81;
  const char *v82;
  unsigned __int8 v83;
  unsigned __int8 v84;
  const char *v85;
  size_t v86;
  void **v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  void **v91;
  NSObject *v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *p_shared_owners;
  unint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  uint64_t *v102;
  uint64_t v103;
  float64_t v104;
  _QWORD v105[3];
  int v106;
  const char *v107;
  int v108;
  const char *v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  uint64_t v112;
  void *v113[2];
  char v114;
  char v115;
  void *object[2];
  size_t v117;
  unint64_t v118;
  void *__p[2];
  size_t v120;
  float64x2_t v121;
  int64x2_t v122;
  float64x2_t v123;
  int64x2_t v124;
  int64x2_t v125;
  int64x2_t v126;
  int64x2_t v127;
  int64x2_t v128;
  int64x2_t v129;
  int64x2_t v130;
  float64x2_t v131;
  int64x2_t v132;
  float64x2_t v133;
  __int128 v134;
  float64x2_t v135;
  __int128 v136;
  float64x2_t v137;
  __int128 v138;
  float64x2_t v139;
  float64x2_t v140;
  uint64_t v141;

  *(_QWORD *)(a1 + 48) = a2;
  v6 = (_QWORD *)(a1 + 64);
  v7 = a2;
  if (*(_QWORD *)(a1 + 88))
  {
    v8 = *(_QWORD **)(a1 + 80);
    if (v8)
    {
      do
      {
        v9 = (_QWORD *)*v8;
        operator delete(v8);
        v8 = v9;
      }
      while (v9);
    }
    *(_QWORD *)(a1 + 80) = 0;
    v10 = *(_QWORD *)(a1 + 72);
    if (v10)
    {
      for (i = 0; i != v10; ++i)
        *(_QWORD *)(*v6 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 88) = 0;
    v7 = *(_QWORD *)(a1 + 48);
  }
  v12 = *(_QWORD **)(v7 + 1760);
  v13 = (_QWORD *)(v7 + 1768);
  if (v12 == v13)
  {
    v14 = 0;
  }
  else
  {
    do
    {
      v16 = *(double *)(v12[5] + 1424);
      v14 = v16 > 0.0;
      if (v16 > 0.0)
        break;
      v17 = (_QWORD *)v12[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (_QWORD *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (_QWORD *)v12[2];
          _ZF = *v18 == (_QWORD)v12;
          v12 = v18;
        }
        while (!_ZF);
      }
      v12 = v18;
    }
    while (v18 != v13);
  }
  *(_BYTE *)(a1 + 56) = v14;
  prime = vcvtps_u32_f32((float)(unint64_t)(a3[2] * *(_QWORD *)(a2 + 312)) / *(float *)(a1 + 96));
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
  }
  v19 = *(int8x8_t *)(a1 + 72);
  if (prime > *(_QWORD *)&v19)
    goto LABEL_23;
  if (prime < *(_QWORD *)&v19)
  {
    v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 88) / *(float *)(a1 + 96));
    if (*(_QWORD *)&v19 >= 3uLL)
    {
      v21 = (uint8x8_t)vcnt_s8(v19);
      v21.i16[0] = vaddlv_u8(v21);
      if (v21.u32[0] <= 1uLL)
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
        if (prime <= v20)
          prime = v20;
        if (prime >= *(_QWORD *)&v19)
          goto LABEL_36;
LABEL_23:
        sub_20E8D2B3C((uint64_t)v6, prime);
        goto LABEL_36;
      }
    }
    v23 = std::__next_prime(v20);
    if (prime <= v23)
      prime = v23;
    if (prime < *(_QWORD *)&v19)
      goto LABEL_23;
  }
LABEL_36:
  v26 = (_QWORD *)*a3;
  v24 = a3 + 1;
  v25 = v26;
  if (v26 != v24)
  {
    v101 = v6;
    __asm { FMOV            V0.2D, #1.0 }
    v104 = *((double *)&_Q0 + 1);
    v100 = v24;
    do
    {
      v31 = sub_20E9DF85C((_QWORD *)(*(_QWORD *)(a1 + 48) + 1784), v25 + 4);
      if (v31)
      {
        v32 = v31[5];
        _Q6.f64[0] = *(float64_t *)(v32 + 16);
        v34 = *(float64x2_t *)v32;
        v35 = *(double *)(v32 + 40);
        _Q5 = *(float64x2_t *)(v32 + 24);
        v37 = *(double *)(v32 + 64);
        _Q3 = *(float64x2_t *)(v32 + 48);
        v39 = (float64x2_t *)v31[7];
        v40 = v39[1].f64[0];
        _Q16 = *v39;
        v42 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v34, (int64x2_t)_Q5), v39->f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v34, (int64x2_t)_Q5), *v39, 1);
        v43 = v31[9];
        v44 = *(int64x2_t *)(v43 + 24);
        _Q18 = *(float64x2_t *)(v43 + 48);
        v46 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v43, v44);
        v47 = *(_QWORD *)(v43 + 48);
        v48 = vmulq_n_f64(v46, _Q6.f64[0]);
        v49 = vmulq_n_f64((float64x2_t)v47, _Q6.f64[0]);
        _Q6.f64[1] = v35;
        v50 = vmlaq_n_f64(v42, _Q6, v40);
        _Q16.f64[0] = _Q16.f64[1];
        __asm { FMLA            D6, D16, V3.D[1] }
        _Q6.f64[0] = _Q6.f64[0] + v37 * v40;
        v51.f64[0] = *(float64_t *)(v43 + 16);
        _Q16.f64[0] = *(float64_t *)(v43 + 64);
        v52 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v43, v44);
        v51.f64[1] = *(float64_t *)(v43 + 40);
        v53 = vextq_s8((int8x16_t)v52, (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q18, 1), 8uLL);
        v54 = v31[11];
        v55 = *(double *)(v54 + 16);
        v56 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v46, *(double *)v54), v52, *(float64x2_t *)v54, 1), v51, v55);
        _D25 = *(_QWORD *)(v54 + 8);
        __asm { FMLA            D27, D25, V18.D[1] }
        _Q18.f64[0] = _D27 + _Q16.f64[0] * v55;
        *(_QWORD *)&v52.f64[1] = v53.i64[0];
        v53.i64[0] = *(_QWORD *)&_Q16.f64[0];
        _Q16.f64[1] = v104;
        *(_QWORD *)&_Q16.f64[0] = *(_OWORD *)&vnegq_f64(_Q18);
        v59 = vmlaq_n_f64(vmulq_n_f64(v46, v34.f64[0]), v52, _Q5.f64[0]);
        v60 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)v47, v34.f64[0]), (float64x2_t)v53.u64[1], _Q5.f64[0]);
        v61 = vmlaq_laneq_f64(vmulq_laneq_f64(v46, v34, 1), v52, _Q5, 1);
        v62 = vmlaq_laneq_f64(vmulq_laneq_f64((float64x2_t)v47, v34, 1), (float64x2_t)v53.u64[1], _Q5, 1);
        *(_QWORD *)&_Q5.f64[0] = *(_OWORD *)&vnegq_f64(v50);
        v63 = (int64x2_t)vmlsq_f64(vmlaq_n_f64(v59, v51, _Q3.f64[0]), (float64x2_t)0, v56);
        v64 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(v60, (float64x2_t)v53.u64[0], _Q3.f64[0]), (float64x2_t)0, _Q16);
        v65 = (int64x2_t)vmlsq_f64(vmlaq_laneq_f64(v61, v51, _Q3, 1), (float64x2_t)0, v56);
        v66 = (int64x2_t)vmlaq_f64(vmlaq_laneq_f64(v62, (float64x2_t)v53.u64[0], _Q3, 1), (float64x2_t)0, _Q16);
        v67 = (int64x2_t)vmlsq_f64(vmlaq_n_f64(vmlaq_n_f64(v48, v52, v35), v51, v37), (float64x2_t)0, v56);
        _Q23 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v49, (float64x2_t)v53.u64[1], v35), (float64x2_t)v53.u64[0], v37), (float64x2_t)0, _Q16);
        _Q0 = vsubq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v46, _Q5.f64[0]), v52, v50, 1), v51, _Q6.f64[0], 0), v56);
        _Q1 = (int64x2_t)vaddq_f64(_Q16, vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)v47, _Q5.f64[0]), (float64x2_t)v53.u64[1], v50, 1), (float64x2_t)v53.u64[0], _Q6.f64[0], 0));
        v71 = (float64x2_t)vzip1q_s64(v63, v65);
        v72 = (float64x2_t)vzip2q_s64(v63, v65);
        *(_QWORD *)&v51.f64[0] = vdupq_lane_s64(*(uint64_t *)&v72.f64[0], 0).u64[0];
        v73 = vextq_s8((int8x16_t)v72, (int8x16_t)vdupq_laneq_s64(v67, 1), 8uLL);
        *(_QWORD *)&v51.f64[1] = v73.i64[0];
        *(_QWORD *)&_Q6.f64[0] = v67.i64[1];
        __asm
        {
          FMLS            D5, D6, V0.D[1]
          FMLS            D5, D23, V1.D[0]
        }
        _Q5.f64[1] = 1.0;
        v74 = v31[13];
        *(_OWORD *)object = *((_OWORD *)v25 + 2);
        v117 = v25[6];
        v118 = v63.i64[0];
        *(int64x2_t *)__p = vzip1q_s64(v65, v67);
        v120 = *(_QWORD *)&_Q0.f64[0];
        v121 = v72;
        v122 = vzip2q_s64(v67, (int64x2_t)_Q0);
        v123 = (float64x2_t)vzip1q_s64(v64, v66);
        v124 = vzip1q_s64(_Q23, _Q1);
        v125 = v63;
        v126 = v64;
        v127 = v65;
        v128 = v66;
        v129 = v67;
        v130 = _Q23;
        v132 = _Q1;
        v131 = _Q0;
        v136 = v73.u64[1];
        v137 = v123;
        v134 = v67.u64[0];
        v135 = v51;
        v138 = _Q23.u64[0];
        v139 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v71, vnegq_f64(_Q0).f64[0]), v72, _Q0, 1), v123, *(double *)_Q1.i64, 0);
        v140 = _Q5;
        v133 = v71;
        v141 = v74;
        sub_20F28CB6C((uint64_t)v6, (uint64_t *)object, (uint64_t)object);
        v75 = (_QWORD *)v25[1];
        if (v75)
          goto LABEL_89;
        goto LABEL_92;
      }
      sub_20F27AFA0(&v112);
      if (**(int **)(v112 + 56) > 4)
        goto LABEL_88;
      v76 = *(unsigned __int8 *)(v112 + 72);
      v77 = sub_20E8C31DC(v112, "OSLogSurrogateAppender", 1, 0);
      v78 = v77 + 16;
      if (!v77)
        v78 = 0;
      _ZF = !v76 && v77 == 0;
      if (_ZF)
      {
LABEL_88:
        v75 = (_QWORD *)v25[1];
        if (v75)
          goto LABEL_89;
        goto LABEL_92;
      }
      v103 = v78;
      v105[0] = &v112;
      v105[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v105[2] = std::chrono::system_clock::now().__d_.__rep_;
      v106 = 4;
      v107 = "unknown file";
      v108 = 91;
      v109 = "unknown function";
      v110 = 0;
      v111 = 0;
      v80 = *(_QWORD *)v105[0];
      if (*(char *)(*(_QWORD *)v105[0] + 39) < 0)
      {
        v82 = *(const char **)(v80 + 16);
        v81 = *(_QWORD *)(v80 + 24);
        v102 = (uint64_t *)(*(_QWORD *)v105[0] + 16);
        v84 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v84 & 1) != 0)
          goto LABEL_53;
      }
      else
      {
        v81 = *(unsigned __int8 *)(*(_QWORD *)v105[0] + 39);
        v82 = (const char *)(*(_QWORD *)v105[0] + 16);
        v102 = (uint64_t *)v82;
        v83 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v83 & 1) != 0)
          goto LABEL_53;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)v113);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v113);
        if (v115 && v114 < 0)
          operator delete(v113[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
        v6 = v101;
      }
LABEL_53:
      if (byte_254A4A4F8[23] >= 0)
        v85 = byte_254A4A4F8;
      else
        v85 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v86 = byte_254A4A4F8[23];
      else
        v86 = *(_QWORD *)&byte_254A4A4F8[8];
      object[0] = os_log_create(v85, v82);
      if (v86 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v86 >= 0x17)
      {
        v88 = v82;
        v89 = (v86 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v86 | 7) != 0x17)
          v89 = v86 | 7;
        v90 = v89 + 1;
        v87 = (void **)operator new(v89 + 1);
        v117 = v86;
        v118 = v90 | 0x8000000000000000;
        object[1] = v87;
        v82 = v88;
        v6 = v101;
LABEL_66:
        memmove(v87, v85, v86);
        goto LABEL_67;
      }
      HIBYTE(v118) = v86;
      v87 = &object[1];
      if (v86)
        goto LABEL_66;
LABEL_67:
      *((_BYTE *)v87 + v86) = 0;
      LOBYTE(__p[0]) = 1;
      if (v81 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v81 >= 0x17)
      {
        v93 = v82;
        v94 = (v81 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v81 | 7) != 0x17)
          v94 = v81 | 7;
        v95 = v94 + 1;
        v91 = (void **)operator new(v94 + 1);
        v120 = v81;
        *(_QWORD *)&v121.f64[0] = v95 | 0x8000000000000000;
        __p[1] = v91;
        v82 = v93;
        v6 = v101;
      }
      else
      {
        HIBYTE(v121.f64[0]) = v81;
        v91 = &__p[1];
        if (!v81)
        {
          LOBYTE(__p[1]) = 0;
          LOBYTE(v121.f64[1]) = 1;
          v92 = object[0];
          if ((SHIBYTE(v121.f64[0]) & 0x80000000) == 0)
            goto LABEL_71;
          goto LABEL_77;
        }
      }
      memmove(v91, v82, v81);
      *((_BYTE *)v91 + v81) = 0;
      LOBYTE(v121.f64[1]) = 1;
      v92 = object[0];
      if ((SHIBYTE(v121.f64[0]) & 0x80000000) == 0)
      {
LABEL_71:
        if (!LOBYTE(__p[0]))
          goto LABEL_80;
        goto LABEL_78;
      }
LABEL_77:
      operator delete(__p[1]);
      if (!LOBYTE(__p[0]))
        goto LABEL_80;
LABEL_78:
      if (SHIBYTE(v118) < 0)
        operator delete(object[1]);
LABEL_80:
      if (object[0])
        os_release(object[0]);
      sub_20F28C77C((int)object, v103, v102, v92, OS_LOG_TYPE_ERROR);
      v24 = v100;
      if (v76)
      {
        sub_20E8C003C((uint64_t)v105, "Fail to find pose_ref");
        sub_20E863570((uint64_t)v105);
      }
      sub_20E863570((uint64_t)v105);
      v96 = v111;
      if (!v111)
        goto LABEL_88;
      p_shared_owners = (unint64_t *)&v111->__shared_owners_;
      do
        v98 = __ldaxr(p_shared_owners);
      while (__stlxr(v98 - 1, p_shared_owners));
      if (v98)
        goto LABEL_88;
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
      v75 = (_QWORD *)v25[1];
      if (v75)
      {
        do
        {
LABEL_89:
          v99 = v75;
          v75 = (_QWORD *)*v75;
        }
        while (v75);
        goto LABEL_38;
      }
      do
      {
LABEL_92:
        v99 = (_QWORD *)v25[2];
        _ZF = *v99 == (_QWORD)v25;
        v25 = v99;
      }
      while (!_ZF);
LABEL_38:
      v25 = v99;
    }
    while (v99 != v24);
  }
}

void sub_20F25CE6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  if (a35)
  {
    if (a34 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20F25CEAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *object,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40)
{
  if (a39 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_20F25CF20(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 80);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void sub_20F25CF68(unint64_t **a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v6;
  float64x2_t **v8;
  float64x2_t v9;
  float64x2_t v11;
  double v12;
  float64x2_t v13;
  float64x2_t *v14;
  double v15;
  double v17;
  double v19;
  float64x2_t v21;
  double v26;
  float64x2_t v27;
  double v29;
  float64x2_t v30;
  double v32;
  float64x2_t *v33;
  float64x2_t v35;
  float64x2_t *v36;
  float64x2_t v37;
  float64x2_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t *v46;
  uint64_t v47;
  int v48;
  float64x2_t *v49;
  int v50;
  float64x2_t *v51;
  int v52;
  void *__p[3];
  float64x2_t v54;
  double v55;
  float64x2_t v56;
  double v57;
  float64x2_t v58;
  double v59;
  float64x2_t v60;
  float64_t v61;

  v6 = sub_20E9DF85C((_QWORD *)(*(_QWORD *)a1[2][53] + 1784), (uint64_t *)a2);
  v8 = (float64x2_t **)(v6 + 5);
  if (!v6)
    v8 = 0;
  v9 = **v8;
  _D2 = (*v8)[2].f64[1];
  v11 = *(float64x2_t *)((char *)*v8 + 24);
  v12 = (*v8)[4].f64[0];
  v13 = (*v8)[3];
  v14 = v8[4];
  v15 = v14[1].f64[0];
  _Q7 = *v14;
  v17 = v14[2].f64[1];
  _Q17 = *(float64x2_t *)((char *)v14 + 24);
  v19 = v14[4].f64[0];
  _Q19 = v14[3];
  v21 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v9, v14->f64[0]), v11, *v14, 1), v13, v15);
  __asm { FMLA            D21, D2, V7.D[1] }
  v26 = _D21 + v12 * v15;
  v27 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v9, _Q17.f64[0]), v11, _Q17, 1), v13, v17);
  __asm { FMLA            D21, D2, V17.D[1] }
  v29 = _D21 + v12 * v17;
  v30 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v9, _Q19.f64[0]), v11, _Q19, 1), v13, v19);
  __asm { FMLA            D21, D2, V19.D[1] }
  v32 = _D21 + v12 * v19;
  v33 = v8[6];
  _Q19.f64[0] = v33[1].f64[0];
  _Q21 = *v33;
  v35 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v9, v33->f64[0]), v11, *v33, 1), v13, _Q19.f64[0]);
  __asm { FMLA            D0, D2, V21.D[1] }
  _Q0.f64[0] = _Q0.f64[0] + v12 * _Q19.f64[0];
  v36 = v8[2];
  v11.f64[0] = v36[1].f64[0];
  v37 = vaddq_f64(_Q0, v11);
  v38 = vaddq_f64(v35, *v36);
  v54 = v21;
  v55 = v26;
  v56 = v27;
  v57 = v29;
  v58 = v30;
  v59 = v32;
  v60 = v38;
  v61 = v37.f64[0];
  v39 = (uint64_t *)a1[2][53];
  v40 = *v39;
  v41 = *(_QWORD *)(*v39 + 1768);
  if (!v41)
    goto LABEL_15;
  v42 = *(_DWORD *)(a2 + 16);
  v43 = v40 + 1768;
  do
  {
    v44 = *(_DWORD *)(v41 + 32);
    _CF = v44 >= v42;
    if (v44 >= v42)
      v46 = (uint64_t *)v41;
    else
      v46 = (uint64_t *)(v41 + 8);
    if (_CF)
      v43 = v41;
    v41 = *v46;
  }
  while (*v46);
  if (v43 == v40 + 1768 || *(_DWORD *)(v43 + 32) > v42 || (v47 = *(_QWORD *)(v43 + 40)) == 0)
  {
LABEL_15:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MapDataController.cpp", 1076, (uint64_t)"default_ref_lens_for_computing_FOV", 34, (uint64_t)"Default lens of reference VIO Frame is not available", 52, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_29;
    }
    v47 = 0;
    v40 = *(_QWORD *)a1[2][53];
  }
  v49 = &v54;
  v50 = 0;
  v51 = &v60;
  v52 = 0;
  v48 = *(_DWORD *)(v47 + 992);
  if (v48 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_21029C995, 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_29;
    }
    v48 = *(_DWORD *)(v47 + 992);
  }
  if (!v48)
    goto LABEL_28;
  if (v48 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_21029C995, 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_29;
    }
    v48 = *(_DWORD *)(v47 + 992);
  }
  if (!v48)
  {
LABEL_28:
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)&unk_21029C995, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_29:
    abort();
  }
  v37.f64[0] = *(float64_t *)(v47 + 144);
  *(float *)v37.f64 = v37.f64[0];
  sub_20F25D3F0(v40, (uint64_t)&v49, (*a1)[2], a1 + 4, 0, 0, 0, __p, v37, *((double *)*a1 + 18), 1.79769313e308);
  sub_20F25D4F8(a1, a2, a3, (uint64_t **)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_20F25D3D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F25D3F0(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t **a4@<X3>, uint64_t a5@<X4>, unsigned __int8 a6@<W5>, int a7@<W6>, _QWORD *a8@<X8>, float64x2_t a9@<Q0>, double a10@<D1>, double a11@<D2>)
{
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _DWORD *v19;
  __int128 v20;
  _BYTE *v21;
  _BYTE *v22;

  sub_20F28CF60(a1, a2, a3, a4, a5, a6, a7, (void **)&v21, a9, a10, a11);
  v12 = v21;
  v13 = v22;
  a8[1] = 0;
  a8[2] = 0;
  *a8 = 0;
  v14 = v13 - v12;
  if (v13 != v12)
  {
    if (v14 < 0)
      sub_20E867F44();
    v15 = v14 >> 5;
    v16 = operator new(24 * (v14 >> 5));
    *a8 = v16;
    a8[1] = v16;
    v17 = &v16[3 * v15];
    a8[2] = v17;
    v18 = v16;
    do
    {
      v18[1] = 0;
      v18[2] = 0;
      *v18 = 0;
      *((_DWORD *)v18 + 4) = -1;
      v18 += 3;
    }
    while (v18 != v17);
    a8[1] = v17;
    v19 = v12;
    do
    {
      v20 = *(_OWORD *)v19;
      *((_DWORD *)v16 + 4) = v19[4];
      *(_OWORD *)v16 = v20;
      v16 += 3;
      v19 += 8;
    }
    while (v19 != (_DWORD *)v13);
  }
  if (v12)
  {
    v22 = v12;
    operator delete(v12);
  }
}

void sub_20F25D4BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void *v13;
  void *v14;

  v13 = *(void **)v11;
  if (*(_QWORD *)v11)
  {
    *(_QWORD *)(v11 + 8) = v13;
    operator delete(v13);
    v14 = __p;
    if (!__p)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v14 = __p;
    if (!__p)
      goto LABEL_3;
  }
  operator delete(v14);
  _Unwind_Resume(exception_object);
}

void sub_20F25D4F8(_QWORD *a1, uint64_t a2, _QWORD *a3, uint64_t **a4)
{
  _QWORD *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD *v14;
  uint64_t **v15;
  uint64_t **v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t **v21;
  uint64_t *v22;
  unsigned int v23;
  uint64_t *v25;
  uint64_t *v26;
  float64x2_t **v28;
  float64x2_t v29;
  float64x2_t v31;
  double v32;
  float64x2_t v33;
  float64x2_t *v34;
  double v35;
  double v37;
  double v39;
  float64x2_t v41;
  double v45;
  float64x2_t v46;
  double v48;
  float64x2_t v49;
  double v51;
  float64x2_t *v52;
  float64x2_t v54;
  float64x2_t *v55;
  float64x2_t v56;
  float v57;
  size_t prime;
  uint64_t *v59;
  uint64_t *v60;
  unsigned int v61;
  _QWORD *v62;
  uint64_t **v63;
  uint64_t **v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t **v68;
  uint64_t *v69;
  unsigned int v70;
  BOOL v71;
  uint64_t *v72;
  uint64_t *v73;
  float64x2_t **v75;
  float64x2_t v76;
  float64x2_t v78;
  double v79;
  float64x2_t v80;
  float64x2_t *v81;
  double v82;
  double v84;
  double v86;
  float64x2_t v88;
  double v90;
  float64x2_t v91;
  double v93;
  float64x2_t v94;
  double v96;
  float64x2_t *v97;
  float64x2_t v99;
  float64x2_t *v100;
  float64x2_t v101;
  uint64_t *v102;
  uint64_t *v103;
  int v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  size_t v108;
  const char *v109;
  unsigned __int8 v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  double *v114;
  _QWORD *v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  double *v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t *i;
  int v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v128;
  const char *v129;
  size_t v130;
  unsigned __int8 v131;
  const char *v132;
  size_t v133;
  __int128 *v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  NSObject *v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  size_t v144;
  std::__shared_weak_count_vtbl *v145;
  std::__shared_weak_count *v146;
  std::__shared_weak_count *v147;
  unint64_t *p_shared_owners;
  unint64_t v149;
  unint64_t v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  const char *v155;
  os_log_t v156;
  std::__shared_weak_count *isa;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  uint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  void *v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  unsigned __int8 v180;
  const char *v181;
  size_t v182;
  __int128 *v183;
  uint64_t v184;
  uint64_t v185;
  void *v186;
  NSObject *v187;
  uint64_t v188;
  uint64_t v189;
  size_t v190;
  NSObject *v191;
  std::__shared_weak_count *v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  unint64_t v196;
  os_log_t v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  void *v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  uint64_t v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  void *v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  _QWORD *v225;
  uint64_t v226;
  uint64_t *v227;
  uint64_t *v228;
  uint64_t v229;
  uint64_t *v230;
  uint64_t *v231;
  uint64_t *v232;
  unint64_t v233;
  unsigned int v234;
  uint64_t *v235;
  unint64_t v236;
  unint64_t v237;
  _BYTE *v238;
  _BYTE *v239;
  _QWORD *v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  unint64_t v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t *v251;
  uint64_t *v252;
  unint64_t v253;
  unsigned int v254;
  unint64_t v255;
  unint64_t v256;
  uint64_t *v257;
  uint64_t v258;
  unsigned int v259;
  BOOL v260;
  uint64_t v261;
  __int128 v262;
  void *v263;
  BOOL v264;
  unint64_t v265;
  uint8x8_t v266;
  uint64_t v267;
  uint64_t *v268;
  uint64_t *v269;
  uint64_t v270;
  uint64_t v271;
  char *v272;
  char *v273;
  unint64_t v274;
  unsigned int v275;
  unint64_t v276;
  unint64_t v277;
  uint64_t *v278;
  uint64_t v279;
  unsigned int v280;
  BOOL v281;
  uint64_t v282;
  __int128 v283;
  _QWORD *v284;
  _QWORD *v285;
  void *v286;
  _QWORD *v287;
  _QWORD *v288;
  void *v289;
  uint64_t **v291;
  _QWORD *v292;
  uint64_t v293;
  const char *v294;
  uint64_t v295;
  uint64_t *v296;
  uint64_t v297;
  int v298;
  uint64_t v299;
  int v300;
  int v301;
  int v302;
  __int128 v304;
  uint64_t v305;
  __int128 v306;
  uint64_t v307;
  _QWORD v308[3];
  int v309;
  const char *v310;
  int v311;
  const char *v312;
  uint64_t v313;
  std::__shared_weak_count *v314;
  uint64_t v315;
  __int128 v316;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v318;
  const char *v319;
  int v320;
  const char *v321;
  uint64_t v322;
  std::__shared_weak_count *v323;
  char v324;
  float64x2_t v325;
  double v326;
  float64x2_t v327;
  double v328;
  float64x2_t v329;
  double v330;
  float64x2_t v331;
  uint64_t v332;
  void *v333[2];
  void *v334[2];
  float v335;
  float64x2_t v336;
  double v337;
  float64x2_t v338;
  double v339;
  float64x2_t v340;
  double v341;
  float64x2_t v342;
  uint64_t v343;
  _QWORD **v344;
  _QWORD *v345[2];
  uint64_t v346;
  int v347;
  __int128 v348;
  __int128 v349;
  uint64_t v350;
  char v351;
  __int128 v352;
  __int128 v353;
  int v354;
  _OWORD v355[2];
  __int128 v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  __int128 v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  os_log_t oslog;
  __int128 v369;
  __int128 v370;
  void *v371[2];
  unint64_t v372;
  char v373;
  void *v374[2];
  char v375;
  char v376;
  uint64_t v377;
  _BYTE v378[24];
  _BYTE *v379;
  char v380;
  _QWORD v381[3];
  _QWORD *v382;
  char v383;
  void *object;
  __int128 v385;
  __int128 v386;
  void *__p[2];
  unint64_t v388;
  char v389;
  char v390;
  uint64_t v391;

  v5 = a1;
  v391 = *MEMORY[0x24BDAC8D0];
  v6 = *a1;
  v7 = *(_OWORD *)(*a1 + 800);
  v365 = *(_OWORD *)(*a1 + 816);
  v8 = *(_OWORD *)(v6 + 848);
  v366 = *(_OWORD *)(v6 + 832);
  v367 = v8;
  v9 = *(_OWORD *)(v6 + 752);
  v360 = *(_OWORD *)(v6 + 736);
  v361 = v9;
  v10 = *(_OWORD *)(v6 + 784);
  v362 = *(_OWORD *)(v6 + 768);
  v363 = v10;
  v364 = v7;
  v11 = *(_OWORD *)(v6 + 688);
  v356 = *(_OWORD *)(v6 + 672);
  v357 = v11;
  v12 = *(_OWORD *)(v6 + 720);
  v358 = *(_OWORD *)(v6 + 704);
  v359 = v12;
  v13 = *(_OWORD *)(v6 + 656);
  v355[0] = *(_OWORD *)(v6 + 640);
  v355[1] = v13;
  if (*(_BYTE *)(v6 + 2248))
    *(_QWORD *)&v356 = *(_QWORD *)(v6 + 2192);
  v346 = 1;
  v347 = 5;
  v348 = xmmword_2102DCC90;
  v349 = xmmword_2103853D0;
  v350 = 0;
  v351 = 0;
  v352 = 0u;
  v353 = 0u;
  v354 = 1065353216;
  v345[1] = 0;
  v345[0] = 0;
  v344 = v345;
  sub_20F25C624((uint64_t)&v346, **(_QWORD **)(a1[2] + 424), &v344);
  v14 = *(_QWORD **)(v5[2] + 424);
  v15 = (uint64_t **)v14[5];
  v16 = (uint64_t **)v14[6];
  if (v16 != v15)
  {
    v17 = ((char *)v16 - (char *)v15) >> 4;
    v18 = *(_DWORD *)(a2 + 16);
    v19 = *(_QWORD *)a2;
    while (1)
    {
      v20 = v17 >> 1;
      v21 = &v15[2 * (v17 >> 1)];
      v22 = *v21;
      v23 = *((_DWORD *)*v21 + 4);
      _CF = v23 >= v18;
      if (v23 != v18)
        goto LABEL_11;
      if (*v22 >= v19)
        break;
LABEL_5:
      v15 = v21 + 2;
      v20 = v17 + ~v20;
LABEL_6:
      v17 = v20;
      if (!v20)
        goto LABEL_14;
    }
    if (*v22 != v19)
      goto LABEL_6;
    _CF = *((_DWORD *)v22 + 2) >= *(_DWORD *)(a2 + 8);
LABEL_11:
    if (_CF)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_14:
  if (v15 != v16)
  {
    v25 = *v15;
    if (*((_DWORD *)*v15 + 4) == *(_DWORD *)(a2 + 16)
      && *v25 == *(_QWORD *)a2
      && *((_DWORD *)v25 + 2) == *(_DWORD *)(a2 + 8))
    {
      v16 = v15;
    }
  }
  v26 = sub_20E9DF85C((_QWORD *)(*v14 + 1784), (uint64_t *)a2);
  v28 = (float64x2_t **)(v26 + 5);
  if (!v26)
    v28 = 0;
  v29 = **v28;
  _D2 = (*v28)[2].f64[1];
  v31 = *(float64x2_t *)((char *)*v28 + 24);
  v32 = (*v28)[4].f64[0];
  v33 = (*v28)[3];
  v34 = v28[4];
  v35 = v34[1].f64[0];
  _Q7 = *v34;
  v37 = v34[2].f64[1];
  _Q17 = *(float64x2_t *)((char *)v34 + 24);
  v39 = v34[4].f64[0];
  _Q19 = v34[3];
  v41 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v29, v34->f64[0]), v31, *v34, 1), v33, v35);
  __asm { FMLA            D21, D2, V7.D[1] }
  v45 = _D21 + v32 * v35;
  v46 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v29, _Q17.f64[0]), v31, _Q17, 1), v33, v37);
  __asm { FMLA            D21, D2, V17.D[1] }
  v48 = _D21 + v32 * v37;
  v49 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v29, _Q19.f64[0]), v31, _Q19, 1), v33, v39);
  __asm { FMLA            D21, D2, V19.D[1] }
  v51 = _D21 + v32 * v39;
  v52 = v28[6];
  _Q19.f64[0] = v52[1].f64[0];
  _Q21 = *v52;
  v54 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v29, v52->f64[0]), v31, *v52, 1), v33, _Q19.f64[0]);
  __asm { FMLA            D0, D2, V21.D[1] }
  _Q0.f64[0] = _Q0.f64[0] + v32 * _Q19.f64[0];
  v55 = v28[2];
  v31.f64[0] = v55[1].f64[0];
  v56 = vaddq_f64(v54, *v55);
  v336 = v41;
  v338 = v46;
  v337 = v45;
  v339 = v48;
  v340 = v49;
  v342 = v56;
  v341 = v51;
  v343 = *(_OWORD *)&vaddq_f64(_Q0, v31);
  if (*((_BYTE *)*v16 + 736)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MapDataController.cpp", 1109, (uint64_t)"!(*ref_vio_frame)->is_weak_frame()", 34, (uint64_t)"Not weak keyframe", 17, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  *(_OWORD *)v333 = 0u;
  *(_OWORD *)v334 = 0u;
  v335 = 1.0;
  v57 = (float)(0xCCCCCCCCCCCCCCCDLL * (((*v16)[10] - (*v16)[9]) >> 3));
  prime = (unint64_t)v57;
  if ((unint64_t)v57 == 1)
  {
    prime = 2;
LABEL_25:
    sub_20E8D2B3C((uint64_t)v333, prime);
    goto LABEL_26;
  }
  if ((prime & ((unint64_t)v57 - 1)) != 0)
  {
    prime = std::__next_prime((unint64_t)v57);
    v263 = v333[1];
    v264 = (void *)prime >= v333[1];
    if ((void *)prime > v333[1])
      goto LABEL_25;
  }
  else
  {
    v263 = 0;
    v264 = 1;
    if (prime)
      goto LABEL_25;
  }
  if (!v264)
  {
    v265 = vcvtps_u32_f32((float)(unint64_t)v334[1] / v335);
    if ((unint64_t)v263 < 3
      || (v266 = (uint8x8_t)vcnt_s8((int8x8_t)v263), v266.i16[0] = vaddlv_u8(v266), v266.u32[0] > 1uLL))
    {
      v265 = std::__next_prime(v265);
    }
    else
    {
      v267 = 1 << -(char)__clz(v265 - 1);
      if (v265 >= 2)
        v265 = v267;
    }
    if (prime <= v265)
      prime = v265;
    if (prime < (unint64_t)v263)
      goto LABEL_25;
  }
LABEL_26:
  v59 = *a4;
  v60 = a4[1];
  if (*a4 != v60)
  {
    v292 = v5;
    v293 = a2;
    v291 = v16;
    v296 = a4[1];
    while (1)
    {
      v61 = *((_DWORD *)v59 + 4);
      if (v61 == *(_DWORD *)(a2 + 16) && *v59 == *(_QWORD *)a2 && *((_DWORD *)v59 + 2) == *(_DWORD *)(a2 + 8))
        goto LABEL_28;
      v62 = *(_QWORD **)(v5[2] + 424);
      v63 = (uint64_t **)v62[5];
      v64 = (uint64_t **)v62[6];
      if (v64 != v63)
      {
        v65 = ((char *)v64 - (char *)v63) >> 4;
        v66 = *v59;
        while (1)
        {
          v67 = v65 >> 1;
          v68 = &v63[2 * (v65 >> 1)];
          v69 = *v68;
          v70 = *((_DWORD *)*v68 + 4);
          v71 = v70 >= v61;
          if (v70 != v61)
            goto LABEL_40;
          if (*v69 >= v66)
            break;
LABEL_34:
          v63 = v68 + 2;
          v67 = v65 + ~v67;
LABEL_35:
          v65 = v67;
          if (!v67)
            goto LABEL_43;
        }
        if (*v69 != v66)
          goto LABEL_35;
        v71 = *((_DWORD *)v69 + 2) >= *((_DWORD *)v59 + 2);
LABEL_40:
        if (v71)
          goto LABEL_35;
        goto LABEL_34;
      }
LABEL_43:
      if (v63 != v64)
      {
        v72 = *v63;
        if (*((_DWORD *)*v63 + 4) == v61 && *v72 == *v59 && *((_DWORD *)v72 + 2) == *((_DWORD *)v59 + 2))
          v64 = v63;
      }
      v73 = sub_20E9DF85C((_QWORD *)(*v62 + 1784), v59);
      v75 = (float64x2_t **)(v73 + 5);
      if (!v73)
        v75 = 0;
      v76 = **v75;
      _D2 = (*v75)[2].f64[1];
      v78 = *(float64x2_t *)((char *)*v75 + 24);
      v79 = (*v75)[4].f64[0];
      v80 = (*v75)[3];
      v81 = v75[4];
      v82 = v81[1].f64[0];
      _Q7 = *v81;
      v84 = v81[2].f64[1];
      _Q17 = *(float64x2_t *)((char *)v81 + 24);
      v86 = v81[4].f64[0];
      _Q19 = v81[3];
      v88 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v76, v81->f64[0]), v78, *v81, 1), v80, v82);
      __asm { FMLA            D21, D2, V7.D[1] }
      v90 = _D21 + v79 * v82;
      v91 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v76, _Q17.f64[0]), v78, _Q17, 1), v80, v84);
      __asm { FMLA            D21, D2, V17.D[1] }
      v93 = _D21 + v79 * v84;
      v94 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v76, _Q19.f64[0]), v78, _Q19, 1), v80, v86);
      __asm { FMLA            D21, D2, V19.D[1] }
      v96 = _D21 + v79 * v86;
      v97 = v75[6];
      _Q19.f64[0] = v97[1].f64[0];
      _Q21 = *v97;
      v99 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v76, v97->f64[0]), v78, *v97, 1), v80, _Q19.f64[0]);
      __asm { FMLA            D0, D2, V21.D[1] }
      _Q0.f64[0] = _Q0.f64[0] + v79 * _Q19.f64[0];
      v100 = v75[2];
      v78.f64[0] = v100[1].f64[0];
      v101 = vaddq_f64(v99, *v100);
      v325 = v88;
      v327 = v91;
      v326 = v90;
      v328 = v93;
      v329 = v94;
      v331 = v101;
      v330 = v96;
      v332 = *(_OWORD *)&vaddq_f64(_Q0, v78);
      if (*((_BYTE *)*v64 + 736)
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MapDataController.cpp", 1125, (uint64_t)"!(*near_vio_frame)->is_weak_frame()", 35, (uint64_t)"Not weak keyframe", 17, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      if (!*(_BYTE *)*v5)
      {
        if (*(_BYTE *)(*v5 + 526))
        {
          v111 = *(_QWORD *)(v5[2] + 424);
          v112 = (uint64_t)*v16;
          v113 = *v64;
          v114 = *(double **)v111;
          v115 = *(_QWORD **)(v111 + 8);
          v381[0] = &off_24C9FC180;
          v381[1] = v5;
          v382 = v381;
          v383 = 1;
          sub_20F2DB2A8((uint64_t)v355, v114, (__int128 *)&v336, (uint64_t)&v325, a3, v112, v113, v115, (uint64_t *)&object, 0, (uint64_t)v381);
          v102 = (uint64_t *)object;
          v103 = (uint64_t *)v385;
          object = 0;
          v385 = 0uLL;
          if (!v383)
            goto LABEL_73;
          v116 = v382;
          if (v382 == v381)
          {
            v116 = v381;
            goto LABEL_71;
          }
LABEL_68:
          if (!v116)
            goto LABEL_73;
          v122 = 5;
        }
        else
        {
          v117 = *(_QWORD *)(v5[2] + 424);
          v118 = (uint64_t)*v16;
          v119 = *v64;
          v120 = *(double **)v117;
          v121 = *(_QWORD **)(v117 + 8);
          v378[0] = 0;
          v380 = 0;
          sub_20F2DB2A8((uint64_t)v355, v120, (__int128 *)&v336, (uint64_t)&v325, a3, v118, v119, v121, (uint64_t *)&object, 0, (uint64_t)v378);
          v102 = (uint64_t *)object;
          v103 = (uint64_t *)v385;
          object = 0;
          v385 = 0uLL;
          if (!v380)
            goto LABEL_73;
          v116 = v379;
          if (v379 != v378)
            goto LABEL_68;
          v116 = v378;
LABEL_71:
          v122 = 4;
        }
        (*(void (**)(void))(*v116 + 8 * v122))();
        goto LABEL_73;
      }
      LOBYTE(v316) = 0;
      v324 = 0;
      LOBYTE(object) = 0;
      v390 = 0;
      sub_20F2DD980((uint64_t)v355, **(double ***)(v5[2] + 424), (uint64_t)&v336, (uint64_t)&v325, a3, *v16, *v64, *(_QWORD **)(*(_QWORD *)(v5[2] + 424) + 8), (uint64_t *)&oslog, (uint64_t)&v316, &object);
      v102 = (uint64_t *)oslog;
      v103 = (uint64_t *)v369;
      if (v324)
      {
        if (v390)
        {
          if ((*(unsigned int (**)(_QWORD, uint64_t, uint64_t *, __int128 *, void **, uint64_t))(*(_QWORD *)v5[25] + 32))(v5[25], a2, v59, &v316, &object, 1))
          {
            sub_20F24E118(&v315);
            if (**(int **)(v315 + 56) <= 2)
            {
              v104 = *(unsigned __int8 *)(v315 + 72);
              v105 = sub_20E8C31DC(v315, "OSLogSurrogateAppender", 1, 0);
              v106 = v105;
              if (v104 || v105)
                break;
            }
          }
        }
      }
LABEL_73:
      for (i = v102; i != v103; i += 2)
        sub_20F28FE1C((uint64_t)v333, i, i);
      sub_20F24E118(v374);
      if (**((int **)v374[0] + 7) > 3)
        goto LABEL_164;
      v124 = *((unsigned __int8 *)v374[0] + 72);
      v125 = sub_20E8C31DC((uint64_t)v374[0], "OSLogSurrogateAppender", 1, 0);
      v126 = v125;
      if (!v124 && v125 == 0)
        goto LABEL_164;
      v298 = v124;
      *(_QWORD *)&v316 = v374;
      *((std::chrono::steady_clock::time_point *)&v316 + 1) = std::chrono::steady_clock::now();
      rep = std::chrono::system_clock::now().__d_.__rep_;
      v318 = 3;
      v319 = "unknown file";
      v320 = 1174;
      v321 = "unknown function";
      v322 = 0;
      v323 = 0;
      v128 = *(_QWORD *)v316;
      v129 = (const char *)(*(_QWORD *)v316 + 16);
      v294 = v129;
      v295 = *(_QWORD *)v316;
      if (*(char *)(*(_QWORD *)v316 + 39) < 0)
      {
        v129 = *(const char **)(v128 + 16);
        v130 = *(_QWORD *)(v128 + 24);
      }
      else
      {
        v130 = *(unsigned __int8 *)(*(_QWORD *)v316 + 39);
      }
      v300 = *(_DWORD *)(a2 + 8);
      v302 = *((_DWORD *)v59 + 2);
      v131 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v131 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)&oslog);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&oslog);
        if ((_BYTE)v370 && SHIBYTE(v369) < 0)
          operator delete(oslog);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v132 = byte_254A4A4F8;
      else
        v132 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v133 = byte_254A4A4F8[23];
      else
        v133 = *(_QWORD *)&byte_254A4A4F8[8];
      object = os_log_create(v132, v129);
      if (v133 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v133 >= 0x17)
      {
        v135 = v102;
        v136 = (v133 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v133 | 7) != 0x17)
          v136 = v133 | 7;
        v137 = v136 + 1;
        v134 = (__int128 *)operator new(v136 + 1);
        *(_QWORD *)&v386 = v137 | 0x8000000000000000;
        *(_QWORD *)&v385 = v134;
        *((_QWORD *)&v385 + 1) = v133;
        v102 = v135;
LABEL_97:
        memmove(v134, v132, v133);
        goto LABEL_98;
      }
      BYTE7(v386) = v133;
      v134 = &v385;
      if (v133)
        goto LABEL_97;
LABEL_98:
      *((_BYTE *)v134 + v133) = 0;
      BYTE8(v386) = 1;
      if (v130 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      a2 = v293;
      v60 = v296;
      if (v130 >= 0x17)
      {
        v140 = v102;
        v141 = (v130 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v130 | 7) != 0x17)
          v141 = v130 | 7;
        v142 = v141 + 1;
        v138 = operator new(v141 + 1);
        v388 = v142 | 0x8000000000000000;
        __p[0] = v138;
        __p[1] = (void *)v130;
        v102 = v140;
      }
      else
      {
        HIBYTE(v388) = v130;
        v138 = __p;
        if (!v130)
        {
          LOBYTE(__p[0]) = 0;
          v389 = 1;
          v139 = object;
          if ((SHIBYTE(v388) & 0x80000000) == 0)
            goto LABEL_102;
          goto LABEL_108;
        }
      }
      memmove(v138, v129, v130);
      *((_BYTE *)v138 + v130) = 0;
      v389 = 1;
      v139 = object;
      if ((SHIBYTE(v388) & 0x80000000) == 0)
      {
LABEL_102:
        if (!BYTE8(v386))
          goto LABEL_111;
        goto LABEL_109;
      }
LABEL_108:
      operator delete(__p[0]);
      if (!BYTE8(v386))
        goto LABEL_111;
LABEL_109:
      if (SBYTE7(v386) < 0)
        operator delete((void *)v385);
LABEL_111:
      if (object)
        os_release(object);
      v143 = ((char *)v103 - (char *)v102) >> 4;
      if (v126 && *(_QWORD *)(v126 + 24))
      {
        v144 = _os_log_pack_size();
        v145 = (std::__shared_weak_count_vtbl *)operator new(v144, (std::align_val_t)8uLL);
        v146 = (std::__shared_weak_count *)operator new();
        v147 = v146;
        v146->__shared_owners_ = 0;
        p_shared_owners = (unint64_t *)&v146->__shared_owners_;
        v146->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
        v146->__shared_weak_owners_ = 0;
        v146[1].__vftable = v145;
        object = v145;
        *(_QWORD *)&v385 = v145;
        *((_QWORD *)&v385 + 1) = v146;
        do
          v149 = __ldxr(p_shared_owners);
        while (__stxr(v149 + 1, p_shared_owners));
        v386 = 0uLL;
        __p[0] = 0;
        v60 = v296;
        do
          v150 = __ldaxr(p_shared_owners);
        while (__stlxr(v150 - 1, p_shared_owners));
        if (!v150)
        {
          ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
          std::__shared_weak_count::__release_weak(v147);
        }
        v151 = object;
        v152 = _os_log_pack_fill();
        *(_DWORD *)v152 = 67109632;
        *(_DWORD *)(v152 + 4) = v300;
        *(_WORD *)(v152 + 8) = 1024;
        *(_DWORD *)(v152 + 10) = v302;
        *(_WORD *)(v152 + 14) = 2048;
        *(_QWORD *)(v152 + 16) = v143;
        v153 = operator new();
        v154 = *(unsigned __int8 *)(v295 + 39);
        v155 = v294;
        if ((v154 & 0x80u) != 0)
        {
          v155 = *(const char **)(v295 + 16);
          v154 = *(_QWORD *)(v295 + 24);
        }
        *(_QWORD *)v153 = v151;
        *(_OWORD *)(v153 + 8) = v385;
        v385 = 0uLL;
        *(_OWORD *)(v153 + 24) = v386;
        v386 = 0uLL;
        *(_QWORD *)(v153 + 40) = v155;
        *(_QWORD *)(v153 + 48) = v154;
        *(_BYTE *)(v153 + 56) = 1;
        v308[0] = 0;
        oslog = (os_log_t)v153;
        (*(void (**)(_QWORD, os_log_t *))(**(_QWORD **)(v126 + 24) + 40))(*(_QWORD *)(v126 + 24), &oslog);
        v156 = oslog;
        oslog = 0;
        v16 = v291;
        v5 = v292;
        if (v156)
        {
          isa = (std::__shared_weak_count *)v156[4].isa;
          if (isa)
          {
            v158 = (unint64_t *)&isa->__shared_owners_;
            do
              v159 = __ldaxr(v158);
            while (__stlxr(v159 - 1, v158));
            if (!v159)
            {
              ((void (*)(std::__shared_weak_count *))isa->__on_zero_shared)(isa);
              std::__shared_weak_count::__release_weak(isa);
            }
          }
          v160 = (std::__shared_weak_count *)v156[2].isa;
          if (v160)
          {
            v161 = (unint64_t *)&v160->__shared_owners_;
            do
              v162 = __ldaxr(v161);
            while (__stlxr(v162 - 1, v161));
            if (!v162)
            {
              ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
              std::__shared_weak_count::__release_weak(v160);
            }
          }
          MEMORY[0x212BC6398](v156, 0x10F0C40B62ED6C6);
          v163 = v308[0];
          v308[0] = 0;
          if (v163)
          {
            v164 = *(std::__shared_weak_count **)(v163 + 32);
            if (v164)
            {
              v165 = (unint64_t *)&v164->__shared_owners_;
              do
                v166 = __ldaxr(v165);
              while (__stlxr(v166 - 1, v165));
              if (!v166)
              {
                ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
                std::__shared_weak_count::__release_weak(v164);
              }
            }
            v167 = *(std::__shared_weak_count **)(v163 + 16);
            if (v167)
            {
              v168 = (unint64_t *)&v167->__shared_owners_;
              do
                v169 = __ldaxr(v168);
              while (__stlxr(v169 - 1, v168));
              if (!v169)
              {
                ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
                std::__shared_weak_count::__release_weak(v167);
              }
            }
            MEMORY[0x212BC6398](v163, 0x10F0C40B62ED6C6);
          }
        }
        v170 = (std::__shared_weak_count *)*((_QWORD *)&v386 + 1);
        if (*((_QWORD *)&v386 + 1))
        {
          v171 = (unint64_t *)(*((_QWORD *)&v386 + 1) + 8);
          do
            v172 = __ldaxr(v171);
          while (__stlxr(v172 - 1, v171));
          if (!v172)
          {
            ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
            std::__shared_weak_count::__release_weak(v170);
          }
        }
        v173 = (std::__shared_weak_count *)*((_QWORD *)&v385 + 1);
        if (*((_QWORD *)&v385 + 1))
        {
          v174 = (unint64_t *)(*((_QWORD *)&v385 + 1) + 8);
          do
            v175 = __ldaxr(v174);
          while (__stlxr(v175 - 1, v174));
          if (!v175)
          {
            ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
            std::__shared_weak_count::__release_weak(v173);
          }
        }
      }
      else
      {
        os_log_type_enabled(v139, OS_LOG_TYPE_INFO);
        LODWORD(object) = 67109632;
        HIDWORD(object) = v300;
        LOWORD(v385) = 1024;
        *(_DWORD *)((char *)&v385 + 2) = v302;
        WORD3(v385) = 2048;
        *((_QWORD *)&v385 + 1) = v143;
        v176 = (void *)_os_log_send_and_compose_impl();
        v16 = v291;
        v5 = v292;
        if (v176)
          free(v176);
      }
      if (v298)
      {
        sub_20E8C003C((uint64_t)&v316, "Rematch image %u with %u with %zu tracks", *(_DWORD *)(v293 + 8), *((_DWORD *)v59 + 2), v143);
        sub_20E863570((uint64_t)&v316);
      }
      sub_20E863570((uint64_t)&v316);
      v177 = v323;
      if (v323)
      {
        v178 = (unint64_t *)&v323->__shared_owners_;
        do
          v179 = __ldaxr(v178);
        while (__stlxr(v179 - 1, v178));
        if (!v179)
        {
          ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
          std::__shared_weak_count::__release_weak(v177);
          if (!v102)
            goto LABEL_28;
LABEL_165:
          operator delete(v102);
          goto LABEL_28;
        }
      }
LABEL_164:
      if (v102)
        goto LABEL_165;
LABEL_28:
      v59 += 3;
      if (v59 == v60)
        goto LABEL_260;
    }
    v301 = v104;
    v308[0] = &v315;
    v308[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v308[2] = std::chrono::system_clock::now().__d_.__rep_;
    v309 = 2;
    v310 = "unknown file";
    v311 = 1151;
    v312 = "unknown function";
    v313 = 0;
    v314 = 0;
    v107 = *(_QWORD *)v308[0];
    v297 = *(_QWORD *)v308[0];
    if (*(char *)(*(_QWORD *)v308[0] + 39) < 0)
    {
      v109 = *(const char **)(v107 + 16);
      v108 = *(_QWORD *)(v107 + 24);
      v299 = *(_QWORD *)v308[0] + 16;
      v180 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v180 & 1) != 0)
        goto LABEL_169;
    }
    else
    {
      v108 = *(unsigned __int8 *)(*(_QWORD *)v308[0] + 39);
      v109 = (const char *)(*(_QWORD *)v308[0] + 16);
      v299 = (uint64_t)v109;
      v110 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v110 & 1) != 0)
        goto LABEL_169;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)v374);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v374);
      if (v376 && v375 < 0)
        operator delete(v374[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_169:
    if (byte_254A4A4F8[23] >= 0)
      v181 = byte_254A4A4F8;
    else
      v181 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v182 = byte_254A4A4F8[23];
    else
      v182 = *(_QWORD *)&byte_254A4A4F8[8];
    oslog = os_log_create(v181, v109);
    if (v182 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v182 >= 0x17)
    {
      v184 = (v182 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v182 | 7) != 0x17)
        v184 = v182 | 7;
      v185 = v184 + 1;
      v183 = (__int128 *)operator new(v184 + 1);
      *(_QWORD *)&v370 = v185 | 0x8000000000000000;
      *(_QWORD *)&v369 = v183;
      *((_QWORD *)&v369 + 1) = v182;
    }
    else
    {
      BYTE7(v370) = v182;
      v183 = &v369;
      if (!v182)
      {
LABEL_183:
        *((_BYTE *)v183 + v182) = 0;
        BYTE8(v370) = 1;
        if (v108 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        a2 = v293;
        v60 = v296;
        if (v108 >= 0x17)
        {
          v188 = (v108 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v108 | 7) != 0x17)
            v188 = v108 | 7;
          v189 = v188 + 1;
          v186 = operator new(v188 + 1);
          v372 = v189 | 0x8000000000000000;
          v371[0] = v186;
          v371[1] = (void *)v108;
        }
        else
        {
          HIBYTE(v372) = v108;
          v186 = v371;
          if (!v108)
          {
            LOBYTE(v371[0]) = 0;
            v373 = 1;
            v187 = oslog;
            if ((SHIBYTE(v372) & 0x80000000) == 0)
              goto LABEL_187;
            goto LABEL_193;
          }
        }
        memmove(v186, v109, v108);
        *((_BYTE *)v186 + v108) = 0;
        v373 = 1;
        v187 = oslog;
        if ((SHIBYTE(v372) & 0x80000000) == 0)
        {
LABEL_187:
          if (!BYTE8(v370))
            goto LABEL_196;
          goto LABEL_194;
        }
LABEL_193:
        operator delete(v371[0]);
        if (!BYTE8(v370))
        {
LABEL_196:
          if (oslog)
            os_release(oslog);
          if (v106 && *(_QWORD *)(v106 + 24))
          {
            v190 = _os_log_pack_size();
            v191 = operator new(v190, (std::align_val_t)8uLL);
            v192 = (std::__shared_weak_count *)operator new();
            v193 = v192;
            v192->__shared_owners_ = 0;
            v194 = (unint64_t *)&v192->__shared_owners_;
            v192->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v192->__shared_weak_owners_ = 0;
            v192[1].__vftable = (std::__shared_weak_count_vtbl *)v191;
            oslog = v191;
            *(_QWORD *)&v369 = v191;
            *((_QWORD *)&v369 + 1) = v192;
            do
              v195 = __ldxr(v194);
            while (__stxr(v195 + 1, v194));
            v370 = 0uLL;
            v371[0] = 0;
            v60 = v296;
            do
              v196 = __ldaxr(v194);
            while (__stlxr(v196 - 1, v194));
            if (!v196)
            {
              ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
              std::__shared_weak_count::__release_weak(v193);
            }
            v197 = oslog;
            *(_WORD *)_os_log_pack_fill() = 0;
            v198 = (char *)operator new();
            v199 = *(unsigned __int8 *)(v297 + 39);
            v200 = v299;
            if ((v199 & 0x80u) != 0)
            {
              v200 = *(_QWORD *)(v297 + 16);
              v199 = *(_QWORD *)(v297 + 24);
            }
            *(_QWORD *)v198 = v197;
            *(_OWORD *)(v198 + 8) = v369;
            v369 = 0uLL;
            *(_OWORD *)(v198 + 24) = v370;
            v370 = 0uLL;
            *((_QWORD *)v198 + 5) = v200;
            *((_QWORD *)v198 + 6) = v199;
            v198[56] = 2;
            v377 = 0;
            v374[0] = v198;
            (*(void (**)(_QWORD, void **))(**(_QWORD **)(v106 + 24) + 40))(*(_QWORD *)(v106 + 24), v374);
            v201 = v374[0];
            v374[0] = 0;
            v16 = v291;
            v5 = v292;
            if (v201)
            {
              v202 = (std::__shared_weak_count *)*((_QWORD *)v201 + 4);
              if (v202)
              {
                v203 = (unint64_t *)&v202->__shared_owners_;
                do
                  v204 = __ldaxr(v203);
                while (__stlxr(v204 - 1, v203));
                if (!v204)
                {
                  ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
                  std::__shared_weak_count::__release_weak(v202);
                }
              }
              v205 = (std::__shared_weak_count *)*((_QWORD *)v201 + 2);
              if (v205)
              {
                v206 = (unint64_t *)&v205->__shared_owners_;
                do
                  v207 = __ldaxr(v206);
                while (__stlxr(v207 - 1, v206));
                if (!v207)
                {
                  ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
                  std::__shared_weak_count::__release_weak(v205);
                }
              }
              MEMORY[0x212BC6398](v201, 0x10F0C40B62ED6C6);
              v208 = v377;
              v377 = 0;
              if (v208)
              {
                v209 = *(std::__shared_weak_count **)(v208 + 32);
                if (v209)
                {
                  v210 = (unint64_t *)&v209->__shared_owners_;
                  do
                    v211 = __ldaxr(v210);
                  while (__stlxr(v211 - 1, v210));
                  if (!v211)
                  {
                    ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
                    std::__shared_weak_count::__release_weak(v209);
                  }
                }
                v212 = *(std::__shared_weak_count **)(v208 + 16);
                if (v212)
                {
                  v213 = (unint64_t *)&v212->__shared_owners_;
                  do
                    v214 = __ldaxr(v213);
                  while (__stlxr(v214 - 1, v213));
                  if (!v214)
                  {
                    ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
                    std::__shared_weak_count::__release_weak(v212);
                  }
                }
                MEMORY[0x212BC6398](v208, 0x10F0C40B62ED6C6);
              }
            }
            v215 = (std::__shared_weak_count *)*((_QWORD *)&v370 + 1);
            if (*((_QWORD *)&v370 + 1))
            {
              v216 = (unint64_t *)(*((_QWORD *)&v370 + 1) + 8);
              do
                v217 = __ldaxr(v216);
              while (__stlxr(v217 - 1, v216));
              if (!v217)
              {
                ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
                std::__shared_weak_count::__release_weak(v215);
              }
            }
            v218 = (std::__shared_weak_count *)*((_QWORD *)&v369 + 1);
            if (*((_QWORD *)&v369 + 1))
            {
              v219 = (unint64_t *)(*((_QWORD *)&v369 + 1) + 8);
              do
                v220 = __ldaxr(v219);
              while (__stlxr(v220 - 1, v219));
              if (!v220)
              {
                ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
                std::__shared_weak_count::__release_weak(v218);
              }
            }
          }
          else
          {
            os_log_type_enabled(v187, OS_LOG_TYPE_DEBUG);
            LOWORD(oslog) = 0;
            v221 = (void *)_os_log_send_and_compose_impl();
            v16 = v291;
            v5 = v292;
            if (v221)
              free(v221);
          }
          if (v301)
          {
            sub_20E8C003C((uint64_t)v308, "Failed to add the rematched epipolar constraint.");
            sub_20E863570((uint64_t)v308);
          }
          sub_20E863570((uint64_t)v308);
          v222 = v314;
          if (v314)
          {
            v223 = (unint64_t *)&v314->__shared_owners_;
            do
              v224 = __ldaxr(v223);
            while (__stlxr(v224 - 1, v223));
            if (!v224)
            {
              ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
              std::__shared_weak_count::__release_weak(v222);
            }
          }
          goto LABEL_73;
        }
LABEL_194:
        if (SBYTE7(v370) < 0)
          operator delete((void *)v369);
        goto LABEL_196;
      }
    }
    memmove(v183, v181, v182);
    goto LABEL_183;
  }
LABEL_260:
  v225 = v334[0];
  if (v334[0])
  {
    while (1)
    {
      v229 = *(_QWORD *)(*(_QWORD *)(v5[2] + 424) + 8);
      v232 = *(uint64_t **)(v229 + 8);
      v230 = (uint64_t *)(v229 + 8);
      v231 = v232;
      if (!v232)
      {
LABEL_277:
        object = 0;
        *(_QWORD *)&v385 = 0;
        goto LABEL_286;
      }
      v233 = v225[2];
      v234 = *((_DWORD *)v225 + 6);
      v235 = v230;
      do
      {
        v236 = v231[4];
        if (v236 < v233)
        {
          ++v231;
        }
        else if (v236 == v233)
        {
          if (*((_DWORD *)v231 + 10) < v234)
            ++v231;
          else
            v235 = v231;
        }
        else
        {
          v235 = v231;
        }
        v231 = (uint64_t *)*v231;
      }
      while (v231);
      if (v235 == v230)
        break;
      v237 = v235[4];
      if (v233 < v237 || v233 == v237 && v234 < *((_DWORD *)v235 + 10))
        goto LABEL_277;
      v238 = (_BYTE *)v235[6];
      v244 = (std::__shared_weak_count *)v235[7];
      if (!v244)
        goto LABEL_279;
      v245 = (unint64_t *)&v244->__shared_owners_;
      do
        v246 = __ldxr(v245);
      while (__stxr(v246 + 1, v245));
      object = v238;
      *(_QWORD *)&v385 = v244;
      do
        v247 = __ldxr(v245);
      while (__stxr(v247 + 1, v245));
      do
        v248 = __ldaxr(v245);
      while (__stlxr(v248 - 1, v245));
      if (v248)
      {
        v238 = object;
        if (object)
          goto LABEL_280;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
        std::__shared_weak_count::__release_weak(v244);
        v238 = object;
        if (object)
        {
LABEL_280:
          if (!*(_BYTE *)(*v5 + 526))
            goto LABEL_284;
          v239 = v238 + 40;
          if (!v238[192])
            v239 = 0;
          if (!v239[148])
          {
LABEL_284:
            if ((sub_20F2A6D04(*(_QWORD **)(v5[2] + 424), (uint64_t)&v346, (uint64_t)v238, (uint64_t *)(*v5 + 488)) & 1) == 0)
            {
              v240 = *(_QWORD **)(*(_QWORD *)(v5[2] + 424) + 8);
              v316 = *(_OWORD *)((char *)object + 24);
              sub_20F25F344(v240, (uint64_t *)&v316);
            }
          }
        }
      }
LABEL_286:
      v241 = (std::__shared_weak_count *)v385;
      if ((_QWORD)v385)
      {
        v242 = (unint64_t *)(v385 + 8);
        do
          v243 = __ldaxr(v242);
        while (__stlxr(v243 - 1, v242));
        if (!v243)
        {
          ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
          std::__shared_weak_count::__release_weak(v241);
        }
      }
      v225 = (_QWORD *)*v225;
      if (!v225)
        goto LABEL_261;
    }
    v238 = 0;
LABEL_279:
    object = v238;
    *(_QWORD *)&v385 = 0;
    if (v238)
      goto LABEL_280;
    goto LABEL_286;
  }
LABEL_261:
  v226 = *v5;
  if (*(_BYTE *)(*v5 + 2248))
  {
    if (*(_BYTE *)(v226 + 2074))
    {
      v227 = *a4;
      v228 = a4[1];
      while (1)
      {
        if (v227 == v228)
          goto LABEL_356;
        v249 = v5[2];
        v250 = *(_QWORD *)(v249 + 424);
        v251 = *(uint64_t **)(v250 + 40);
        v252 = *(uint64_t **)(v250 + 48);
        if (v252 != v251)
          break;
LABEL_317:
        if (v251 != v252)
        {
          v261 = *v251;
          if (*(_DWORD *)(*v251 + 16) == *((_DWORD *)v227 + 4)
            && *(_QWORD *)v261 == *v227
            && *(_DWORD *)(v261 + 8) == *((_DWORD *)v227 + 2))
          {
            v252 = v251;
          }
        }
        v262 = *(_OWORD *)v227;
        v307 = v227[2];
        v306 = v262;
        sub_20F25C074((char **)&object, *(_QWORD *)(*(_QWORD *)(v249 + 424) + 8), (uint64_t *)&v306);
        sub_20F25F4C0(*v252, (int32x4_t **)&object);
        sub_20F28C48C((int32x4_t **)(*v252 + 552), (int32x4_t *)object, (int32x4_t *)v385, (uint64_t)(v385 - (_QWORD)object) >> 3);
        if (object)
        {
          *(_QWORD *)&v385 = object;
          operator delete(object);
        }
        v227 += 3;
      }
      v253 = ((char *)v252 - (char *)v251) >> 4;
      v254 = *((_DWORD *)v227 + 4);
      v255 = *v227;
      while (1)
      {
        v256 = v253 >> 1;
        v257 = &v251[2 * (v253 >> 1)];
        v258 = *v257;
        v259 = *(_DWORD *)(*v257 + 16);
        v260 = v259 >= v254;
        if (v259 != v254)
          goto LABEL_314;
        if (*(_QWORD *)v258 >= v255)
          break;
LABEL_308:
        v251 = v257 + 2;
        v256 = v253 + ~v256;
LABEL_309:
        v253 = v256;
        if (!v256)
          goto LABEL_317;
      }
      if (*(_QWORD *)v258 != v255)
        goto LABEL_309;
      v260 = *(_DWORD *)(v258 + 8) >= *((_DWORD *)v227 + 2);
LABEL_314:
      if (v260)
        goto LABEL_309;
      goto LABEL_308;
    }
    if (*(_BYTE *)(v226 + 2075))
    {
      v268 = *a4;
      v269 = a4[1];
      while (1)
      {
        if (v268 == v269)
          goto LABEL_356;
        v270 = v5[2];
        v271 = *(_QWORD *)(v270 + 424);
        v272 = *(char **)(v271 + 40);
        v273 = *(char **)(v271 + 48);
        if (v273 != v272)
          break;
LABEL_349:
        if (v272 != v273)
        {
          v282 = *(_QWORD *)v272;
          if (*(_DWORD *)(*(_QWORD *)v272 + 16) == *((_DWORD *)v268 + 4)
            && *(_QWORD *)v282 == *v268
            && *(_DWORD *)(v282 + 8) == *((_DWORD *)v268 + 2))
          {
            v273 = v272;
          }
        }
        v283 = *(_OWORD *)v268;
        v305 = v268[2];
        v304 = v283;
        sub_20F25C074((char **)&object, *(_QWORD *)(*(_QWORD *)(v270 + 424) + 8), (uint64_t *)&v304);
        sub_20F28C48C((int32x4_t **)(*(_QWORD *)v273 + 552), (int32x4_t *)object, (int32x4_t *)v385, (uint64_t)(v385 - (_QWORD)object) >> 3);
        if (object)
        {
          *(_QWORD *)&v385 = object;
          operator delete(object);
        }
        v268 += 3;
      }
      v274 = (v273 - v272) >> 4;
      v275 = *((_DWORD *)v268 + 4);
      v276 = *v268;
      while (1)
      {
        v277 = v274 >> 1;
        v278 = (uint64_t *)&v272[16 * (v274 >> 1)];
        v279 = *v278;
        v280 = *(_DWORD *)(*v278 + 16);
        v281 = v280 >= v275;
        if (v280 != v275)
          goto LABEL_346;
        if (*(_QWORD *)v279 >= v276)
          break;
LABEL_340:
        v272 = (char *)(v278 + 2);
        v277 = v274 + ~v277;
LABEL_341:
        v274 = v277;
        if (!v277)
          goto LABEL_349;
      }
      if (*(_QWORD *)v279 != v276)
        goto LABEL_341;
      v281 = *(_DWORD *)(v279 + 8) >= *((_DWORD *)v268 + 2);
LABEL_346:
      if (v281)
        goto LABEL_341;
      goto LABEL_340;
    }
  }
LABEL_356:
  v284 = v334[0];
  if (v334[0])
  {
    do
    {
      v285 = (_QWORD *)*v284;
      operator delete(v284);
      v284 = v285;
    }
    while (v285);
  }
  v286 = v333[0];
  v333[0] = 0;
  if (v286)
    operator delete(v286);
  sub_20E86872C((uint64_t)&v344, v345[0]);
  v287 = (_QWORD *)v353;
  if ((_QWORD)v353)
  {
    do
    {
      v288 = (_QWORD *)*v287;
      operator delete(v287);
      v287 = v288;
    }
    while (v288);
  }
  v289 = (void *)v352;
  *(_QWORD *)&v352 = 0;
  if (v289)
    operator delete(v289);
}

void sub_20F25F028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  void *v53;

  if (LOBYTE(STACK[0x458]) && SLOBYTE(STACK[0x457]) < 0)
    operator delete((void *)STACK[0x440]);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a53);
  if (v53)
    operator delete(v53);
  sub_20E8C25A8((uint64_t)&STACK[0x250]);
  sub_20E86872C((uint64_t)&STACK[0x2E0], (_QWORD *)STACK[0x2E8]);
  sub_20F25CF20((uint64_t)&STACK[0x2F8]);
  _Unwind_Resume(a1);
}

_QWORD *sub_20F25F344(_QWORD *a1, uint64_t *a2)
{
  uint64_t *v2;
  _QWORD *v3;
  unint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *i;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;

  v3 = a1 + 1;
  v2 = (uint64_t *)a1[1];
  if (v2)
  {
    v5 = *a2;
    v6 = *((_DWORD *)a2 + 2);
    v7 = a1 + 1;
    do
    {
      v8 = v2[4];
      if (v8 < v5)
      {
        ++v2;
      }
      else if (v8 == v5)
      {
        if (*((_DWORD *)v2 + 10) < v6)
          ++v2;
        else
          v7 = v2;
      }
      else
      {
        v7 = v2;
      }
      v2 = (uint64_t *)*v2;
    }
    while (v2);
    if (v7 != v3)
    {
      v9 = v7[4];
      if (v5 >= v9 && (v5 != v9 || v6 >= *((_DWORD *)v7 + 10)))
      {
        v10 = v7[6];
        v11 = *(uint64_t **)(v10 + 200);
        for (i = *(uint64_t **)(v10 + 208); v11 != i; v11 += 4)
          sub_20EE6BF60(a1 + 3, v11, *(_DWORD *)(v11[3] + 4));
        v13 = (_QWORD *)v7[1];
        if (v13)
        {
          do
          {
            v3 = v13;
            v13 = (_QWORD *)*v13;
          }
          while (v13);
        }
        else
        {
          v14 = v7;
          do
          {
            v3 = (_QWORD *)v14[2];
            v15 = *v3 == (_QWORD)v14;
            v14 = v3;
          }
          while (!v15);
        }
        if ((_QWORD *)*a1 == v7)
          *a1 = v3;
        v16 = (uint64_t *)a1[1];
        --a1[2];
        sub_20E8D2134(v16, v7);
        v17 = (std::__shared_weak_count *)v7[7];
        if (v17)
        {
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldaxr(p_shared_owners);
          while (__stlxr(v19 - 1, p_shared_owners));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        operator delete(v7);
      }
    }
  }
  return v3;
}

void sub_20F25F4C0(uint64_t a1, int32x4_t **a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  sub_20F28C48C((int32x4_t **)(a1 + 528), *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 3);
  if (*(_BYTE *)(a1 + 280))
  {
    sub_20E990EA4((uint64_t *)(a1 + 232));
    v3 = *(void **)(a1 + 208);
    if (v3)
    {
      *(_QWORD *)(a1 + 216) = v3;
      operator delete(v3);
    }
    v4 = *(void **)(a1 + 128);
    if (v4)
    {
      *(_QWORD *)(a1 + 136) = v4;
      operator delete(v4);
    }
    *(_BYTE *)(a1 + 280) = 0;
  }
  if (*(_BYTE *)(a1 + 456))
  {
    sub_20E990EA4((uint64_t *)(a1 + 408));
    v5 = *(void **)(a1 + 384);
    if (v5)
    {
      *(_QWORD *)(a1 + 392) = v5;
      operator delete(v5);
    }
    v6 = *(void **)(a1 + 304);
    if (v6)
    {
      *(_QWORD *)(a1 + 312) = v6;
      operator delete(v6);
    }
    *(_BYTE *)(a1 + 456) = 0;
  }
}

void sub_20F25F55C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  __int128 v11;
  __int128 *v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  void *__p;
  void *v22;
  char *v23;

  v1 = a1;
  __p = 0;
  v22 = 0;
  v23 = 0;
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(v2 + 424);
  v5 = *(char **)(v3 + 40);
  v4 = *(char **)(v3 + 48);
  v6 = v4 - v5;
  if (v4 == v5)
    goto LABEL_24;
  if (v6 < 0)
    sub_20E867F44();
  v20 = v1;
  v7 = v6 >> 4;
  v8 = (char *)operator new(24 * (v6 >> 4));
  v9 = &v8[24 * v7];
  __p = v8;
  v23 = v9;
  v10 = v8;
  do
  {
    while (1)
    {
      while (1)
      {
        v12 = *(__int128 **)v5;
        if (v8 >= v9)
          break;
        v11 = *v12;
        *((_QWORD *)v8 + 2) = *((_QWORD *)v12 + 2);
        *(_OWORD *)v8 = v11;
        v8 += 24;
        v5 += 16;
        if (v5 == v4)
          goto LABEL_23;
      }
      v13 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v10) >> 3) + 1;
      if (v13 > 0xAAAAAAAAAAAAAAALL)
      {
        v22 = v8;
        sub_20E867F44();
      }
      if (0x5555555555555556 * ((v9 - v10) >> 3) > v13)
        v13 = 0x5555555555555556 * ((v9 - v10) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((v9 - v10) >> 3) >= 0x555555555555555)
        v14 = 0xAAAAAAAAAAAAAAALL;
      else
        v14 = v13;
      if (v14)
      {
        if (v14 > 0xAAAAAAAAAAAAAAALL)
        {
          v22 = v8;
          sub_20E877A38();
        }
        v15 = (char *)operator new(24 * v14);
      }
      else
      {
        v15 = 0;
      }
      v16 = &v15[8 * ((v8 - v10) >> 3)];
      v17 = *v12;
      v9 = &v15[24 * v14];
      *((_QWORD *)v16 + 2) = *((_QWORD *)v12 + 2);
      *(_OWORD *)v16 = v17;
      v18 = v16 + 24;
      if (v8 == v10)
      {
        __p = &v15[8 * ((v8 - v10) >> 3)];
        v23 = v9;
        v10 = v8;
        break;
      }
      do
      {
        v19 = *(_OWORD *)(v8 - 24);
        *((_DWORD *)v16 - 2) = *((_DWORD *)v8 - 2);
        *(_OWORD *)(v16 - 24) = v19;
        v16 -= 24;
        v8 -= 24;
      }
      while (v8 != v10);
      __p = v16;
      v23 = v9;
      if (v10)
        break;
      v10 = v16;
      v8 = v18;
      v5 += 16;
      if (v5 == v4)
        goto LABEL_23;
    }
    operator delete(v10);
    v10 = v16;
    v8 = v18;
    v5 += 16;
  }
  while (v5 != v4);
LABEL_23:
  v22 = v8;
  v1 = v20;
  v2 = *(_QWORD *)(v20 + 16);
LABEL_24:
  sub_20F2A69A4(v2, (uint64_t **)&__p, (uint64_t *)(*(_QWORD *)v1 + 440));
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
}

void sub_20F25F770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F25F794(_QWORD *a1, uint64_t *a2, unint64_t a3, uint64_t *a4)
{
  unint64_t v4;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  int v29;
  unsigned int v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  __int128 v41;
  unint64_t v42;
  unint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  char *v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t *v58;
  unint64_t v59;
  int v60;
  char v61;
  char *v62;
  uint64_t v63;
  char *v64;
  int64_t v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  char *v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  void *v85;
  unint64_t *v86;
  unint64_t v87;
  void *v88;
  unint64_t v89;
  char *v90;
  _QWORD *v91;
  _QWORD *v92;
  void *v93;
  int v94;
  char v95;
  unint64_t v96;
  _QWORD *v97;
  char *v98;
  int v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  uint64_t v102;
  int v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  char v107;
  void *v108[2];
  void *__p[2];
  int v110;
  __int128 v111;
  __int128 v112;
  int v113;
  __int128 v114;
  __int128 v115;
  int v116;
  uint64_t v117;

  v117 = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return;
  v4 = a3;
  if (!a3)
    return;
  v6 = a2;
  v7 = a1;
  v102 = 1;
  v103 = 5;
  v104 = xmmword_2102DCC90;
  v105 = xmmword_2103853D0;
  v106 = 0;
  v107 = 0;
  *(_OWORD *)v108 = 0u;
  *(_OWORD *)__p = 0u;
  v110 = 1065353216;
  v8 = **(_QWORD **)(a1[2] + 424);
  *((_QWORD *)&v114 + 1) = 0;
  *(_QWORD *)&v115 = 0;
  *(_QWORD *)&v114 = (char *)&v114 + 8;
  sub_20F25C624((uint64_t)&v102, v8, &v114);
  sub_20E86872C((uint64_t)&v114, *((_QWORD **)&v114 + 1));
  LODWORD(v9) = 0;
  v96 = v4;
  v97 = v7;
  do
  {
    v10 = *(_QWORD *)(*(_QWORD *)(v7[2] + 424) + 8);
    v13 = *(uint64_t **)(v10 + 8);
    v11 = (uint64_t *)(v10 + 8);
    v12 = v13;
    if (!v13)
    {
LABEL_17:
      v101 = 0;
      goto LABEL_86;
    }
    v14 = *v6;
    v15 = *((_DWORD *)v6 + 2);
    v16 = v11;
    do
    {
      v17 = v12[4];
      if (v17 < v14)
      {
        ++v12;
      }
      else if (v17 == v14)
      {
        if (*((_DWORD *)v12 + 10) < v15)
          ++v12;
        else
          v16 = v12;
      }
      else
      {
        v16 = v12;
      }
      v12 = (uint64_t *)*v12;
    }
    while (v12);
    if (v16 == v11)
    {
      v19 = 0;
    }
    else
    {
      v18 = v16[4];
      if (v14 < v18 || v14 == v18 && v15 < *((_DWORD *)v16 + 10))
        goto LABEL_17;
      v19 = v16[6];
      v67 = (std::__shared_weak_count *)v16[7];
      if (v67)
      {
        p_shared_owners = (unint64_t *)&v67->__shared_owners_;
        do
          v69 = __ldxr(p_shared_owners);
        while (__stxr(v69 + 1, p_shared_owners));
        v100 = v19;
        v101 = v67;
        do
          v70 = __ldxr(p_shared_owners);
        while (__stxr(v70 + 1, p_shared_owners));
        do
          v71 = __ldaxr(p_shared_owners);
        while (__stlxr(v71 - 1, p_shared_owners));
        if (v71)
        {
          if (!v19)
            goto LABEL_86;
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
          v19 = v100;
          if (!v100)
            goto LABEL_86;
        }
LABEL_20:
        v20 = v19 + 40;
        v21 = *(unsigned __int8 *)(v19 + 192);
        if (!*(_BYTE *)(v19 + 192))
          v20 = 0;
        if (!*(_BYTE *)(v20 + 150) && *(_QWORD *)(v19 + 208) - *(_QWORD *)(v19 + 200) >= 0x21uLL)
        {
          sub_20F2A6D04(*(_QWORD **)(v7[2] + 424), (uint64_t)&v102, v19, (uint64_t *)(*v7 + 440));
          v19 = v100;
          v21 = *(unsigned __int8 *)(v100 + 192);
        }
        v99 = v9;
        v22 = v19 + 40;
        if (!v21)
          v22 = 0;
        v24 = *(_QWORD *)(v22 + 8);
        v23 = *(_QWORD *)(v22 + 16);
        v25 = *(_OWORD *)(v22 + 128);
        v111 = *(_OWORD *)(v22 + 112);
        v26 = *(_QWORD *)(v22 + 24);
        v27 = *(_BYTE *)(v22 + 148);
        v28 = *v6;
        v30 = *((_DWORD *)v6 + 2);
        v29 = *((_DWORD *)v6 + 3);
        v112 = v25;
        v113 = *(_DWORD *)(v22 + 144);
        v31 = (char *)*a4;
        v32 = a4[1];
        v33 = v32 - *a4;
        if (v32 == *a4)
        {
          v35 = (char *)*a4;
        }
        else
        {
          v34 = 0xCCCCCCCCCCCCCCCDLL * (v33 >> 4);
          v35 = (char *)*a4;
          do
          {
            v36 = v34 >> 1;
            v37 = &v35[80 * (v34 >> 1)];
            if (*(_QWORD *)v37 < v28 || *(_QWORD *)v37 == v28 && *((_DWORD *)v37 + 2) < v30)
            {
              v35 = v37 + 80;
              v36 = v34 + ~v36;
            }
            v34 = v36;
          }
          while (v36);
        }
        if (v35 != (char *)v32 && *(_QWORD *)v35 == v28 && *((_DWORD *)v35 + 2) == v30)
          goto LABEL_85;
        v38 = v35 - v31;
        v39 = 0xCCCCCCCCCCCCCCCDLL * ((v35 - v31) >> 4);
        v40 = a4[2];
        if (v32 < v40)
        {
          if (v35 == (char *)v32)
          {
            *(_QWORD *)v32 = v28;
            *(_DWORD *)(v32 + 8) = v30;
            *(_DWORD *)(v32 + 12) = v29;
            v72 = &v31[16 * ((v35 - v31) >> 4)];
            *((_QWORD *)v72 + 2) = v24;
            *((_QWORD *)v72 + 3) = v23;
            *((_QWORD *)v72 + 4) = v26;
            *(_OWORD *)(v72 + 40) = v111;
            *(_OWORD *)(v72 + 56) = v112;
            *((_DWORD *)v72 + 18) = v113;
            v72[76] = v27;
            a4[1] = v32 + 80;
          }
          else
          {
            v41 = *(_OWORD *)(v22 + 128);
            v114 = *(_OWORD *)(v22 + 112);
            v115 = v41;
            v116 = *(_DWORD *)(v22 + 144);
            v42 = v32 - 80;
            v43 = v32;
            if (v32 >= 0x50)
            {
              do
              {
                *(_OWORD *)v43 = *(_OWORD *)v42;
                v44 = *(_OWORD *)(v42 + 16);
                *(_QWORD *)(v43 + 32) = *(_QWORD *)(v42 + 32);
                *(_OWORD *)(v43 + 16) = v44;
                v45 = *(_OWORD *)(v42 + 40);
                v46 = *(_OWORD *)(v42 + 56);
                *(_DWORD *)(v43 + 72) = *(_DWORD *)(v42 + 72);
                *(_OWORD *)(v43 + 56) = v46;
                *(_OWORD *)(v43 + 40) = v45;
                *(_BYTE *)(v43 + 76) = *(_BYTE *)(v42 + 76);
                v43 += 80;
                v42 += 80;
              }
              while (v42 < v32);
            }
            a4[1] = v43;
            if ((char *)v32 != v35 + 80)
            {
              v47 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v32 - (_QWORD)(v35 + 80)) >> 4);
              v48 = v32 - 40;
              v49 = 80 * v47;
              do
              {
                v50 = *(_QWORD *)&v35[v49 - 80];
                *(_DWORD *)(v48 - 32) = *(_DWORD *)&v35[v49 - 72];
                *(_QWORD *)(v48 - 40) = v50;
                v51 = *(_OWORD *)&v35[v49 - 64];
                *(_QWORD *)(v48 - 8) = *(_QWORD *)&v35[v49 - 48];
                *(_OWORD *)(v48 - 24) = v51;
                v52 = *(_OWORD *)&v35[v49 - 40];
                v53 = *(_OWORD *)&v35[v49 - 24];
                *(_DWORD *)(v48 + 32) = *(_DWORD *)&v35[v49 - 8];
                *(_OWORD *)v48 = v52;
                *(_OWORD *)(v48 + 16) = v53;
                *(_BYTE *)(v48 + 36) = v35[v49 - 4];
                v48 -= 80;
                v49 -= 80;
              }
              while (v49);
            }
            *(_QWORD *)v35 = v28;
            *((_DWORD *)v35 + 2) = v30;
            v54 = &v31[16 * ((v35 - v31) >> 4)];
            *((_QWORD *)v54 + 2) = v24;
            *((_QWORD *)v54 + 3) = v23;
            *((_QWORD *)v54 + 4) = v26;
            *(_OWORD *)(v54 + 40) = v114;
            *(_OWORD *)(v54 + 56) = v115;
            *((_DWORD *)v54 + 18) = v116;
            v54[76] = v27;
          }
          goto LABEL_85;
        }
        v55 = a4;
        v56 = 0xCCCCCCCCCCCCCCCDLL * (v33 >> 4) + 1;
        if (v56 > 0x333333333333333)
          sub_20E867F44();
        if (0x999999999999999ALL * ((uint64_t)(v40 - (_QWORD)v31) >> 4) > v56)
          v56 = 0x999999999999999ALL * ((uint64_t)(v40 - (_QWORD)v31) >> 4);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v40 - (_QWORD)v31) >> 4) >= 0x199999999999999)
          v57 = 0x333333333333333;
        else
          v57 = v56;
        v98 = v31;
        if (v57)
        {
          if (v57 > 0x333333333333333)
            sub_20E877A38();
          v58 = v6;
          v59 = 0xCCCCCCCCCCCCCCCDLL * ((v35 - v31) >> 4);
          v60 = v29;
          v61 = v27;
          v62 = (char *)operator new(80 * v57);
          v27 = v61;
          v29 = v60;
          v39 = v59;
          v6 = v58;
          v63 = (uint64_t)&v62[80 * v39];
          v64 = &v62[80 * v57];
          if (v39 == v57)
            goto LABEL_56;
        }
        else
        {
          v62 = 0;
          v63 = 16 * ((v35 - v31) >> 4);
          v64 = 0;
          if (!v39)
          {
LABEL_56:
            a4 = v55;
            if (v38 < 1)
            {
              v88 = v62;
              v94 = v29;
              v95 = v27;
              v7 = v97;
              if (v98 == v35)
                v89 = 1;
              else
                v89 = 2 * v39;
              if (v89 > 0x333333333333333)
                sub_20E877A38();
              v90 = (char *)operator new(80 * v89);
              v63 = (uint64_t)&v90[80 * (v89 >> 2)];
              v64 = &v90[80 * v89];
              if (v88)
                operator delete(v88);
              v29 = v94;
              v27 = v95;
              goto LABEL_76;
            }
            v65 = 0xCCCCCCCCCCCCCCCDLL * ((v63 - (uint64_t)v62) >> 4);
            if (v65 >= -1)
              v66 = v65 + 1;
            else
              v66 = v65 + 2;
            v63 -= 80 * (v66 >> 1);
LABEL_75:
            v7 = v97;
LABEL_76:
            *(_QWORD *)v63 = v28;
            *(_DWORD *)(v63 + 8) = v30;
            *(_DWORD *)(v63 + 12) = v29;
            *(_QWORD *)(v63 + 16) = v24;
            *(_QWORD *)(v63 + 24) = v23;
            *(_QWORD *)(v63 + 32) = v26;
            *(_DWORD *)(v63 + 72) = v113;
            *(_OWORD *)(v63 + 56) = v112;
            *(_OWORD *)(v63 + 40) = v111;
            *(_BYTE *)(v63 + 76) = v27;
            v73 = (char *)*a4;
            v74 = v63;
            if ((char *)*a4 != v35)
            {
              v75 = 0;
              do
              {
                v76 = v63 + v75;
                *(_OWORD *)(v76 - 80) = *(_OWORD *)&v35[v75 - 80];
                v77 = *(_OWORD *)&v35[v75 - 64];
                *(_QWORD *)(v76 - 48) = *(_QWORD *)&v35[v75 - 48];
                *(_OWORD *)(v76 - 64) = v77;
                v78 = *(_OWORD *)&v35[v75 - 40];
                v79 = *(_OWORD *)&v35[v75 - 24];
                *(_DWORD *)(v76 - 8) = *(_DWORD *)&v35[v75 - 8];
                *(_OWORD *)(v76 - 24) = v79;
                *(_OWORD *)(v76 - 40) = v78;
                *(_BYTE *)(v76 - 4) = v35[v75 - 4];
                v75 -= 80;
              }
              while (&v35[v75] != v73);
              v74 = v63 + v75;
            }
            v80 = v63 + 80;
            v81 = (char *)a4[1];
            if (v81 == v35)
            {
              v4 = v96;
              v85 = (void *)*a4;
              *a4 = v74;
              a4[1] = v80;
              a4[2] = (uint64_t)v64;
              if (!v85)
                goto LABEL_85;
            }
            else
            {
              v4 = v96;
              do
              {
                *(_OWORD *)v80 = *(_OWORD *)v35;
                v82 = *((_OWORD *)v35 + 1);
                *(_QWORD *)(v80 + 32) = *((_QWORD *)v35 + 4);
                *(_OWORD *)(v80 + 16) = v82;
                v83 = *(_OWORD *)(v35 + 40);
                v84 = *(_OWORD *)(v35 + 56);
                *(_DWORD *)(v80 + 72) = *((_DWORD *)v35 + 18);
                *(_OWORD *)(v80 + 56) = v84;
                *(_OWORD *)(v80 + 40) = v83;
                *(_BYTE *)(v80 + 76) = v35[76];
                v80 += 80;
                v35 += 80;
              }
              while (v35 != v81);
              v85 = (void *)*a4;
              *a4 = v74;
              a4[1] = v80;
              a4[2] = (uint64_t)v64;
              if (!v85)
                goto LABEL_85;
            }
            operator delete(v85);
LABEL_85:
            LODWORD(v9) = v99;
            goto LABEL_86;
          }
        }
        a4 = v55;
        goto LABEL_75;
      }
    }
    v100 = v19;
    v101 = 0;
    if (v19)
      goto LABEL_20;
LABEL_86:
    if (v101)
    {
      v86 = (unint64_t *)&v101->__shared_owners_;
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 - 1, v86));
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
        std::__shared_weak_count::__release_weak(v101);
      }
    }
    v9 = (v9 + 1);
    v6 += 2;
  }
  while (v9 < v4);
  v91 = __p[0];
  if (__p[0])
  {
    do
    {
      v92 = (_QWORD *)*v91;
      operator delete(v91);
      v91 = v92;
    }
    while (v92);
  }
  v93 = v108[0];
  v108[0] = 0;
  if (v93)
    operator delete(v93);
}

void sub_20F25FF88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  sub_20E86872C(v8 - 176, *(_QWORD **)(v8 - 168));
  sub_20F25CF20((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F25FFA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16)
{
  void *v16;

  if (v16)
  {
    operator delete(v16);
    sub_20E86665C((uint64_t)&a14);
    sub_20F25CF20((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  sub_20E86665C((uint64_t)&a14);
  sub_20F25CF20((uint64_t)&a16);
  _Unwind_Resume(a1);
}

unint64_t sub_20F25FFF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t *v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t *v16;
  unsigned __int8 v17;
  unint64_t v18;

  v2 = *(_QWORD *)(a1 + 16);
  v5 = *(uint64_t **)(v2 + 240);
  v3 = (uint64_t *)(v2 + 240);
  v4 = v5;
  if (!v5)
    goto LABEL_18;
  v6 = *(_DWORD *)(a2 + 16);
  v7 = *(_QWORD *)a2;
  v8 = v3;
  v9 = *(_DWORD *)(a2 + 8);
  do
  {
    while (1)
    {
      v10 = *((_DWORD *)v4 + 12);
      v11 = v10 >= v6;
      if (v10 != v6)
        goto LABEL_8;
      v12 = v4[4];
      if (v12 >= v7)
        break;
LABEL_3:
      v4 = (uint64_t *)v4[1];
      if (!v4)
        goto LABEL_11;
    }
    if (v12 != v7)
      goto LABEL_10;
    v11 = *((_DWORD *)v4 + 10) >= v9;
LABEL_8:
    if (!v11)
      goto LABEL_3;
LABEL_10:
    v8 = v4;
    v4 = (uint64_t *)*v4;
  }
  while (v4);
LABEL_11:
  if (v8 != v3)
  {
    v13 = *((_DWORD *)v8 + 12);
    if (v6 == v13)
    {
      v14 = v8[4];
      if (v7 >= v14 && (v7 != v14 || v9 >= *((_DWORD *)v8 + 10)))
        return (unint64_t)(v8 + 7);
    }
    else if (v6 >= v13)
    {
      return (unint64_t)(v8 + 7);
    }
  }
LABEL_18:
  v16 = sub_20E9DF85C((_QWORD *)(a1 + 104), (uint64_t *)a2);
  v17 = (_BYTE)v16 + 40;
  v18 = (unint64_t)(v16 + 5) & 0xFFFFFFFFFFFFFF00;
  if (!v16)
  {
    v17 = 0;
    v18 = 0;
  }
  return v18 | v17;
}

unint64_t sub_20F2600E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  unsigned int v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  unsigned int v9;
  BOOL v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t *v15;
  unsigned __int8 v16;
  unint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(uint64_t **)(v2 + 304);
  if (!v3)
    goto LABEL_18;
  v4 = (uint64_t *)(v2 + 304);
  v5 = *(_DWORD *)(a2 + 16);
  v6 = *(_QWORD *)a2;
  v7 = *(_DWORD *)(a2 + 8);
  v8 = v4;
  do
  {
    while (1)
    {
      v9 = *((_DWORD *)v3 + 12);
      v10 = v9 >= v5;
      if (v9 != v5)
        goto LABEL_8;
      v11 = v3[4];
      if (v11 >= v6)
        break;
LABEL_3:
      v3 = (uint64_t *)v3[1];
      if (!v3)
        goto LABEL_11;
    }
    if (v11 != v6)
      goto LABEL_10;
    v10 = *((_DWORD *)v3 + 10) >= v7;
LABEL_8:
    if (!v10)
      goto LABEL_3;
LABEL_10:
    v8 = v3;
    v3 = (uint64_t *)*v3;
  }
  while (v3);
LABEL_11:
  if (v8 != v4)
  {
    v12 = *((_DWORD *)v8 + 12);
    if (v5 == v12)
    {
      v13 = v8[4];
      if (v6 >= v13 && (v6 != v13 || v7 >= *((_DWORD *)v8 + 10)))
        return ((_BYTE)v8 + 56);
    }
    else if (v5 >= v12)
    {
      return ((_BYTE)v8 + 56);
    }
  }
LABEL_18:
  v15 = sub_20E9DF85C((_QWORD *)(a1 + 144), (uint64_t *)a2);
  v16 = (_BYTE)v15 + 40;
  v17 = (unint64_t)(v15 + 5) & 0xFFFFFFFFFFFFFF00;
  if (!v15)
  {
    v16 = 0;
    v17 = 0;
  }
  return v17 | v16;
}

uint64_t sub_20F2601D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  const char *v10;
  unsigned __int8 v11;
  void *v13;
  int8x8_t v14;
  unint64_t v16;
  uint8x8_t v17;
  unint64_t v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v24;
  uint64_t v26;
  unsigned __int8 v27;
  const char *v28;
  size_t v29;
  void **v30;
  unint64_t v31;
  const char *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *p_p;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  size_t v42;
  std::__shared_weak_count_vtbl *v43;
  std::__shared_weak_count *v44;
  std::__shared_weak_count *v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  char *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  void *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  unsigned int *v77;
  unsigned int *v78;
  unint64_t v79;
  char v80;
  unsigned int *v81;
  char v82;
  char v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int *v88;
  unint64_t v89;
  unsigned int *v90;
  char v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  void *v99;
  unint64_t v100;
  uint64_t v101;
  int v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t *v106;
  char *v107;
  char *v108;
  void **v109;
  void **v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void **v114;
  void **v115;
  unsigned __int8 v116;
  const char *v117;
  const char *v118;
  NSObject *v119;
  uint64_t *v120;
  void *v121;
  std::mutex *v122;
  uint64_t v124;
  char *v125;
  void *v126;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v128;
  int v129;
  const char *v130;
  int v131;
  const char *v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  uint64_t v135;
  char *category[2];
  const char *v137[2];
  void *object[3];
  void *v139[2];
  void *__p;
  size_t v141;
  unint64_t v142;
  void *v143;
  char v144;
  char v145;
  void *v146;
  char v147;
  void *v148;
  char v149;
  uint64_t v150;

  v150 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)(*(_QWORD *)(**(_QWORD **)(v2 + 424) + 64)
                        - ((uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 4)) <= 1)
  {
    sub_20F24E118(&v135);
    if (**(int **)(v135 + 56) > 5)
      return 0;
    v3 = *(unsigned __int8 *)(v135 + 72);
    v4 = sub_20E8C31DC(v135, "OSLogSurrogateAppender", 1, 0);
    v5 = v4;
    if (!v3 && v4 == 0)
      return 0;
    v126 = &v135;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v128 = std::chrono::system_clock::now().__d_.__rep_;
    v129 = 5;
    v130 = "unknown file";
    v131 = 1371;
    v133 = 0;
    v134 = 0;
    v132 = "unknown function";
    v7 = v135;
    v8 = v135 + 16;
    if (*(char *)(v135 + 39) < 0)
    {
      v10 = *(const char **)(v135 + 16);
      v9 = *(_QWORD *)(v135 + 24);
      v27 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v27 & 1) != 0)
        goto LABEL_39;
    }
    else
    {
      v9 = *(unsigned __int8 *)(v135 + 39);
      v10 = (const char *)(*(_QWORD *)v126 + 16);
      v11 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v11 & 1) != 0)
        goto LABEL_39;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
      if (LOBYTE(v139[0]) && SHIBYTE(object[2]) < 0)
        operator delete(object[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_39:
    if (byte_254A4A4F8[23] >= 0)
      v28 = byte_254A4A4F8;
    else
      v28 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v29 = byte_254A4A4F8[23];
    else
      v29 = *(_QWORD *)&byte_254A4A4F8[8];
    object[0] = os_log_create(v28, v10);
    v30 = &object[1];
    if (v29 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v29 >= 0x17)
    {
      v31 = v5;
      v32 = v10;
      v33 = v7;
      v34 = v3;
      v35 = v8;
      v36 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v29 | 7) != 0x17)
        v36 = v29 | 7;
      v37 = v36 + 1;
      v30 = (void **)operator new(v36 + 1);
      object[2] = (void *)v29;
      v139[0] = (void *)(v37 | 0x8000000000000000);
      object[1] = v30;
      v8 = v35;
      v3 = v34;
      v7 = v33;
      v10 = v32;
      v5 = v31;
    }
    else
    {
      HIBYTE(v139[0]) = v29;
      if (!v29)
      {
LABEL_53:
        *((_BYTE *)v30 + v29) = 0;
        LOBYTE(v139[1]) = 1;
        p_p = &__p;
        if (v9 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v9 >= 0x17)
        {
          v39 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v9 | 7) != 0x17)
            v39 = v9 | 7;
          v40 = v39 + 1;
          p_p = operator new(v39 + 1);
          v141 = v9;
          v142 = v40 | 0x8000000000000000;
          __p = p_p;
        }
        else
        {
          HIBYTE(v142) = v9;
          if (!v9)
            goto LABEL_61;
        }
        memmove(p_p, v10, v9);
LABEL_61:
        *((_BYTE *)p_p + v9) = 0;
        LOBYTE(v143) = 1;
        v41 = object[0];
        if (SHIBYTE(v142) < 0)
          operator delete(__p);
        if (LOBYTE(v139[1]) && SHIBYTE(v139[0]) < 0)
          operator delete(object[1]);
        if (object[0])
          os_release(object[0]);
        if (v5 && *(_QWORD *)(v5 + 24))
        {
          v42 = _os_log_pack_size();
          v43 = (std::__shared_weak_count_vtbl *)operator new(v42, (std::align_val_t)8uLL);
          v44 = (std::__shared_weak_count *)operator new();
          v45 = v44;
          v44->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v44->__shared_owners_;
          v44->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v44->__shared_weak_owners_ = 0;
          v44[1].__vftable = v43;
          object[0] = v43;
          object[1] = v43;
          object[2] = v44;
          do
            v47 = __ldxr(p_shared_owners);
          while (__stxr(v47 + 1, p_shared_owners));
          v139[0] = 0;
          v139[1] = 0;
          __p = 0;
          do
            v48 = __ldaxr(p_shared_owners);
          while (__stlxr(v48 - 1, p_shared_owners));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v45);
          }
          v49 = object[0];
          *(_WORD *)_os_log_pack_fill() = 0;
          v50 = operator new();
          v51 = *(unsigned __int8 *)(v7 + 39);
          if ((v51 & 0x80u) == 0)
            v52 = v8;
          else
            v52 = *(_QWORD *)(v7 + 16);
          if ((v51 & 0x80u) != 0)
            v51 = *(_QWORD *)(v7 + 24);
          *(_QWORD *)v50 = v49;
          *(_OWORD *)(v50 + 8) = *(_OWORD *)&object[1];
          object[1] = 0;
          object[2] = 0;
          *(_OWORD *)(v50 + 24) = *(_OWORD *)v139;
          v139[0] = 0;
          v139[1] = 0;
          *(_QWORD *)(v50 + 40) = v52;
          *(_QWORD *)(v50 + 48) = v51;
          *(_BYTE *)(v50 + 56) = 16;
          category[0] = 0;
          v137[0] = (const char *)v50;
          (*(void (**)(_QWORD, const char **))(**(_QWORD **)(v5 + 24) + 40))(*(_QWORD *)(v5 + 24), v137);
          v53 = v137[0];
          v137[0] = 0;
          if (v53)
          {
            v54 = (std::__shared_weak_count *)*((_QWORD *)v53 + 4);
            if (v54)
            {
              v55 = (unint64_t *)&v54->__shared_owners_;
              do
                v56 = __ldaxr(v55);
              while (__stlxr(v56 - 1, v55));
              if (!v56)
              {
                ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                std::__shared_weak_count::__release_weak(v54);
              }
            }
            v57 = (std::__shared_weak_count *)*((_QWORD *)v53 + 2);
            if (v57)
            {
              v58 = (unint64_t *)&v57->__shared_owners_;
              do
                v59 = __ldaxr(v58);
              while (__stlxr(v59 - 1, v58));
              if (!v59)
              {
                ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                std::__shared_weak_count::__release_weak(v57);
              }
            }
            MEMORY[0x212BC6398](v53, 0x10F0C40B62ED6C6);
            v60 = category[0];
            category[0] = 0;
            if (v60)
            {
              v61 = (std::__shared_weak_count *)*((_QWORD *)v60 + 4);
              if (v61)
              {
                v62 = (unint64_t *)&v61->__shared_owners_;
                do
                  v63 = __ldaxr(v62);
                while (__stlxr(v63 - 1, v62));
                if (!v63)
                {
                  ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                  std::__shared_weak_count::__release_weak(v61);
                }
              }
              v64 = (std::__shared_weak_count *)*((_QWORD *)v60 + 2);
              if (v64)
              {
                v65 = (unint64_t *)&v64->__shared_owners_;
                do
                  v66 = __ldaxr(v65);
                while (__stlxr(v66 - 1, v65));
                if (!v66)
                {
                  ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                  std::__shared_weak_count::__release_weak(v64);
                }
              }
              MEMORY[0x212BC6398](v60, 0x10F0C40B62ED6C6);
            }
          }
          v67 = (std::__shared_weak_count *)v139[1];
          if (v139[1])
          {
            v68 = (unint64_t *)((char *)v139[1] + 8);
            do
              v69 = __ldaxr(v68);
            while (__stlxr(v69 - 1, v68));
            if (!v69)
            {
              ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
              std::__shared_weak_count::__release_weak(v67);
            }
          }
          v70 = (std::__shared_weak_count *)object[2];
          if (object[2])
          {
            v71 = (unint64_t *)((char *)object[2] + 8);
            do
              v72 = __ldaxr(v71);
            while (__stlxr(v72 - 1, v71));
            if (!v72)
            {
              ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
              std::__shared_weak_count::__release_weak(v70);
            }
          }
        }
        else
        {
          os_log_type_enabled(v41, OS_LOG_TYPE_ERROR);
          LOWORD(object[0]) = 0;
          v73 = (void *)_os_log_send_and_compose_impl();
          if (v73)
            free(v73);
        }
        if (v3)
        {
          sub_20E8C003C((uint64_t)&v126, "Cannot prune the only state in a submap.");
          sub_20E863570((uint64_t)&v126);
        }
        sub_20E863570((uint64_t)&v126);
        v74 = v134;
        if (v134)
        {
          v75 = (unint64_t *)&v134->__shared_owners_;
          do
            v76 = __ldaxr(v75);
          while (__stlxr(v76 - 1, v75));
          if (!v76)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
        return 0;
      }
    }
    memmove(v30, v28, v29);
    goto LABEL_53;
  }
  v13 = *(void **)a2;
  if (*(_QWORD *)a2 != *(_QWORD *)(v2 + 160))
    return 0;
  v14 = *(int8x8_t *)(v2 + 176);
  if (!*(_QWORD *)&v14)
    return 0;
  v16 = *(unsigned int *)(a2 + 8);
  v17 = (uint8x8_t)vcnt_s8(v14);
  v17.i16[0] = vaddlv_u8(v17);
  if (v17.u32[0] > 1uLL)
  {
    v18 = *(unsigned int *)(a2 + 8);
    if (*(_QWORD *)&v14 <= v16)
      v18 = v16 % *(_QWORD *)&v14;
  }
  else
  {
    v18 = (v14.i32[0] - 1) & v16;
  }
  v19 = *(uint64_t ***)(*(_QWORD *)(v2 + 168) + 8 * v18);
  if (!v19)
    return 0;
  v20 = *v19;
  if (!*v19)
    return 0;
  if (v17.u32[0] < 2uLL)
  {
    v21 = *(_QWORD *)&v14 - 1;
    while (1)
    {
      v26 = v20[1];
      if (v26 == v16)
      {
        if ((void *)v20[2] == v13 && *((_DWORD *)v20 + 6) == (_DWORD)v16)
          goto LABEL_125;
      }
      else if ((v26 & v21) != v18)
      {
        return 0;
      }
      result = 0;
      v20 = (uint64_t *)*v20;
      if (!v20)
        return result;
    }
  }
  while (1)
  {
    v24 = v20[1];
    if (v24 == v16)
      break;
    if (v24 >= *(_QWORD *)&v14)
      v24 %= *(_QWORD *)&v14;
    if (v24 != v18)
      return 0;
LABEL_24:
    result = 0;
    v20 = (uint64_t *)*v20;
    if (!v20)
      return result;
  }
  if ((void *)v20[2] != v13 || *((_DWORD *)v20 + 6) != (_DWORD)v16)
    goto LABEL_24;
LABEL_125:
  v77 = (unsigned int *)v20[6];
  v78 = (unsigned int *)v20[7];
  if (v77 == v78)
  {
    v80 = 0;
  }
  else
  {
    v79 = (char *)v78 - (char *)v77 - 472;
    if (v79 < 0x1D8)
    {
      v80 = 0;
      v81 = (unsigned int *)v20[6];
      goto LABEL_136;
    }
    v82 = 0;
    v83 = 0;
    v84 = v79 / 0x1D8 + 1;
    v81 = &v77[118 * (v84 & 0x1FFFFFFFFFFFFFELL)];
    v85 = v84 & 0x1FFFFFFFFFFFFFELL;
    v86 = v20[6];
    do
    {
      if (*(_DWORD *)(v86 + 464) == 2)
        ++v82;
      if (*(_DWORD *)(v86 + 936) == 2)
        ++v83;
      v86 += 944;
      v85 -= 2;
    }
    while (v85);
    v80 = v83 + v82;
    if (v84 != (v84 & 0x1FFFFFFFFFFFFFELL))
    {
      do
      {
LABEL_136:
        if (v81[116] == 2)
          ++v80;
        v81 += 118;
      }
      while (v81 != v78);
    }
  }
  v87 = (unsigned int *)v20[9];
  v88 = (unsigned int *)v20[10];
  if (v87 != v88)
  {
    v89 = (char *)v88 - (char *)v87 - 472;
    if (v89 < 0x1D8)
    {
      v90 = (unsigned int *)v20[9];
      goto LABEL_149;
    }
    v91 = 0;
    v92 = v89 / 0x1D8 + 1;
    v90 = &v87[118 * (v92 & 0x1FFFFFFFFFFFFFELL)];
    v93 = v92 & 0x1FFFFFFFFFFFFFELL;
    v94 = v20[9];
    do
    {
      if (*(_DWORD *)(v94 + 464) == 2)
        ++v80;
      if (*(_DWORD *)(v94 + 936) == 2)
        ++v91;
      v94 += 944;
      v93 -= 2;
    }
    while (v93);
    v80 += v91;
    if (v92 != (v92 & 0x1FFFFFFFFFFFFFELL))
    {
      do
      {
LABEL_149:
        if (v90[116] == 2)
          ++v80;
        v90 += 118;
      }
      while (v90 != v88);
    }
  }
  if (v80 != 1)
  {
    sub_20F24E118(&v135);
    if (**(int **)(v135 + 56) <= 5)
    {
      v102 = *(unsigned __int8 *)(v135 + 72);
      v103 = sub_20E8C31DC(v135, "OSLogSurrogateAppender", 1, 0);
      v104 = v103 ? v103 + 16 : 0;
      if (v102 || v103 != 0)
      {
        v126 = &v135;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v128 = std::chrono::system_clock::now().__d_.__rep_;
        v129 = 5;
        v130 = "unknown file";
        v131 = 1396;
        v133 = 0;
        v134 = 0;
        v132 = "unknown function";
        v106 = (uint64_t *)(v135 + 16);
        if (*(char *)(v135 + 39) < 0)
        {
          v108 = *(char **)(v135 + 16);
          v107 = *(char **)(v135 + 24);
        }
        else
        {
          v107 = (char *)*(unsigned __int8 *)(v135 + 39);
          v108 = (char *)(v135 + 16);
        }
        category[0] = v108;
        category[1] = v107;
        v116 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v116 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)object);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
          if (LOBYTE(v139[0]) && SHIBYTE(object[2]) < 0)
            operator delete(object[0]);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        v117 = (const char *)byte_254A4A4F8[23];
        if (byte_254A4A4F8[23] >= 0)
        {
          v118 = byte_254A4A4F8;
        }
        else
        {
          v117 = *(const char **)&byte_254A4A4F8[8];
          v118 = *(const char **)byte_254A4A4F8;
        }
        v137[0] = v118;
        v137[1] = v117;
        object[0] = os_log_create(v118, category[0]);
        sub_20E86E5A8(&object[1], (uint64_t)v137);
        sub_20E86E5A8(&__p, (uint64_t)category);
        v119 = object[0];
        sub_20E86E44C((uint64_t)object);
        sub_20F290130(v104, v106, v119, OS_LOG_TYPE_ERROR);
        if (v102)
        {
          sub_20E8C003C((uint64_t)&v126, "State to be pruned must have 1 odometry edge.");
          sub_20E863570((uint64_t)&v126);
        }
        sub_20E863714((uint64_t)&v126);
      }
    }
    return 0;
  }
  if (v77 != v78)
  {
    do
    {
      (*(void (**)(_QWORD, uint64_t, unsigned int *, _QWORD))(**(_QWORD **)(a1 + 200) + 120))(*(_QWORD *)(a1 + 200), a2, v77 + 4, *v77);
      v77 += 118;
    }
    while (v77 != v78);
    v87 = (unsigned int *)v20[9];
    v88 = (unsigned int *)v20[10];
  }
  while (v87 != v88)
  {
    (*(void (**)(_QWORD, uint64_t, unsigned int *, _QWORD))(**(_QWORD **)(a1 + 200) + 120))(*(_QWORD *)(a1 + 200), a2, v87 + 4, *v87);
    v87 += 118;
  }
  sub_20F261368((_QWORD *)a1, 0, a2);
  v95 = *(_QWORD *)(a1 + 16);
  v96 = *(_QWORD *)(v95 + 40);
  v97 = *(_QWORD *)(v95 + 48);
  if (v97 != v96)
  {
    v98 = 0xCCCCCCCCCCCCCCCDLL * ((v97 - v96) >> 3);
    v99 = *(void **)a2;
    do
    {
      v100 = v98 >> 1;
      v101 = v96 + 40 * (v98 >> 1);
      if (*(_QWORD *)v101 < (unint64_t)v99
        || *(void **)v101 == v99 && *(_DWORD *)(v101 + 8) < *(_DWORD *)(a2 + 8))
      {
        v96 = v101 + 40;
        v100 = v98 + ~v100;
      }
      v98 = v100;
    }
    while (v100);
  }
  if (v96 != v97 && *(_QWORD *)v96 == *(_QWORD *)a2 && *(_DWORD *)(v96 + 8) == *(_DWORD *)(a2 + 8))
  {
    memset(object, 0, sizeof(object));
    sub_20F27ECB8((char *)object, *(_QWORD *)(v96 + 16), *(_QWORD *)(v96 + 24), (uint64_t)(*(_QWORD *)(v96 + 24) - *(_QWORD *)(v96 + 16)) >> 5);
    v109 = (void **)object[0];
    v110 = (void **)object[1];
    if (object[0] != object[1])
    {
      do
      {
        sub_20FCC8710(*(_QWORD **)(*(_QWORD *)(a1 + 192) + 8), (uint64_t)v109);
        v111 = *(_QWORD *)(a1 + 336);
        if (v111)
        {
          v112 = *(_QWORD *)(a1 + 16);
          v113 = *(_QWORD *)(v112 + 424);
          if (v113)
          {
            if (*(_QWORD *)(*(_QWORD *)v113 + 64) && !sub_20FCCBE78(v109))
            {
              v126 = *(void **)(v112 + 160);
              LOBYTE(v137[0]) = 0;
              (*(void (**)(uint64_t, void **, const char **))(*(_QWORD *)v111 + 48))(v111, &v126, v137);
            }
          }
        }
        v109 += 4;
      }
      while (v109 != v110);
      v109 = (void **)object[0];
    }
    if (v109)
    {
      v114 = (void **)object[1];
      v115 = v109;
      if (object[1] != v109)
      {
        do
        {
          if (*((char *)v114 - 9) < 0)
            operator delete(*(v114 - 4));
          v114 -= 4;
        }
        while (v114 != v109);
        v115 = (void **)object[0];
      }
      object[1] = v109;
      operator delete(v115);
    }
  }
  sub_20F250888((_QWORD *)a1, (void **)a2, 0);
  v120 = sub_210219C18();
  LODWORD(v139[0]) = 0;
  sub_20F29051C((unsigned int *)object, a2);
  if (LODWORD(v139[0]) == -1)
    sub_20E877AB8();
  v137[0] = (const char *)category;
  ((void (*)(void **__return_ptr, const char **, void **))off_24C9FC0C8[LODWORD(v139[0])])(&v126, v137, object);
  if (LODWORD(v139[0]) != -1)
    ((void (*)(const char **, void **))off_24C9FC0B0[LODWORD(v139[0])])(v137, object);
  if (v128 >= 0)
    v121 = &v126;
  else
    v121 = v126;
  v122 = sub_21021A1E0();
  if (atomic_load((unint64_t *)&v122[1]))
  {
    v124 = (uint64_t)v122;
    LODWORD(object[0]) = 136315138;
    *(void **)((char *)object + 4) = v121;
    v125 = (char *)_os_log_send_and_compose_impl();
    v137[0] = v125;
    sub_21021A118(object, (uint64_t)v120, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, "TRACE:PRUNESTATE:ID: %s", 0x17uLL, v137);
    sub_21021A2DC(v124, (uint64_t)object);
    if (v149 < 0)
    {
      operator delete(v148);
      if (v147 < 0)
        goto LABEL_216;
LABEL_213:
      if (v145)
      {
LABEL_217:
        if (v144 < 0)
          operator delete(v143);
      }
    }
    else
    {
      if ((v147 & 0x80000000) == 0)
        goto LABEL_213;
LABEL_216:
      operator delete(v146);
      if (v145)
        goto LABEL_217;
    }
    if ((_BYTE)v142 && SHIBYTE(v141) < 0)
      operator delete(v139[1]);
    if (SHIBYTE(v139[0]) < 0)
      operator delete(object[1]);
    if (v125)
      free(v125);
  }
  if (os_signpost_enabled((os_log_t)*v120))
  {
    LODWORD(object[0]) = 136315138;
    *(void **)((char *)object + 4) = v121;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  if (SHIBYTE(v128) < 0)
    operator delete(v126);
  return 1;
}

void sub_20F261140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  if (a31)
  {
    if (a30 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20F261188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F26119C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,void *object,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  if (a35 && a34 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20F261358(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *sub_20F261368(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  __int128 *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  char v18;
  uint64_t v19;
  __int128 *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  __int128 *v34;
  __int128 *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  char v44;
  uint64_t v45;
  __int128 *v46;
  __int128 *v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;

  v5 = result;
  if (a2)
  {
    v6 = result[2];
    v7 = *(_QWORD *)(v6 + 208);
    v8 = *(__int128 **)(v6 + 216);
    if ((__int128 *)v7 != v8)
    {
      while (*(_QWORD *)a2 != *(_QWORD *)(v7 + 24) || *(_DWORD *)(a2 + 8) != *(_DWORD *)(v7 + 32))
      {
        v7 += 472;
        if ((__int128 *)v7 == v8)
          goto LABEL_21;
      }
      if ((__int128 *)v7 != v8)
      {
        v9 = (__int128 *)(v7 + 472);
        if ((__int128 *)(v7 + 472) != v8)
        {
          do
          {
            if (*(_QWORD *)a2 != *((_QWORD *)v9 + 3) || *(_DWORD *)(a2 + 8) != *((_DWORD *)v9 + 8))
            {
              v10 = *v9;
              v11 = v9[1];
              *(_OWORD *)(v7 + 28) = *(__int128 *)((char *)v9 + 28);
              *(_OWORD *)v7 = v10;
              *(_OWORD *)(v7 + 16) = v11;
              v12 = v9[10];
              v14 = v9[7];
              v13 = v9[8];
              *(_OWORD *)(v7 + 144) = v9[9];
              *(_OWORD *)(v7 + 160) = v12;
              *(_OWORD *)(v7 + 112) = v14;
              *(_OWORD *)(v7 + 128) = v13;
              v15 = v9[3];
              v16 = v9[4];
              v17 = v9[6];
              *(_OWORD *)(v7 + 80) = v9[5];
              *(_OWORD *)(v7 + 96) = v17;
              *(_OWORD *)(v7 + 48) = v15;
              *(_OWORD *)(v7 + 64) = v16;
              result = memcpy((void *)(v7 + 176), v9 + 11, 0x120uLL);
              v18 = *((_BYTE *)v9 + 468);
              *(_DWORD *)(v7 + 464) = *((_DWORD *)v9 + 116);
              *(_BYTE *)(v7 + 468) = v18;
              v7 += 472;
            }
            v9 = (__int128 *)((char *)v9 + 472);
          }
          while (v9 != v8);
          v8 = *(__int128 **)(v5[2] + 216);
        }
      }
      if ((__int128 *)v7 != v8)
      {
        v19 = (uint64_t)v8 - v7;
        v20 = v8;
        v21 = *(__int128 **)(v6 + 216);
        if (v20 != v21)
        {
          v22 = 8 * (v19 >> 3);
          do
          {
            v23 = *(_OWORD *)(v7 + v22);
            v24 = *(_OWORD *)(v7 + v22 + 16);
            *(_OWORD *)(v7 + 28) = *(_OWORD *)(v7 + v22 + 28);
            *(_OWORD *)v7 = v23;
            *(_OWORD *)(v7 + 16) = v24;
            v25 = *(_OWORD *)(v7 + v22 + 96);
            v27 = *(_OWORD *)(v7 + v22 + 48);
            v26 = *(_OWORD *)(v7 + v22 + 64);
            *(_OWORD *)(v7 + 80) = *(_OWORD *)(v7 + v22 + 80);
            *(_OWORD *)(v7 + 96) = v25;
            *(_OWORD *)(v7 + 48) = v27;
            *(_OWORD *)(v7 + 64) = v26;
            v28 = *(_OWORD *)(v7 + v22 + 160);
            v30 = *(_OWORD *)(v7 + v22 + 112);
            v29 = *(_OWORD *)(v7 + v22 + 128);
            *(_OWORD *)(v7 + 144) = *(_OWORD *)(v7 + v22 + 144);
            *(_OWORD *)(v7 + 160) = v28;
            *(_OWORD *)(v7 + 112) = v30;
            *(_OWORD *)(v7 + 128) = v29;
            result = memcpy((void *)(v7 + 176), (const void *)(v7 + v22 + 176), 0x120uLL);
            v31 = *(_BYTE *)(v7 + v22 + 468);
            *(_DWORD *)(v7 + 464) = *(_DWORD *)(v7 + v22 + 464);
            *(_BYTE *)(v7 + 468) = v31;
            v7 += 472;
          }
          while ((__int128 *)(v7 + v22) != v21);
        }
        *(_QWORD *)(v6 + 216) = v7;
      }
    }
  }
LABEL_21:
  if (!a3)
  {
LABEL_41:
    if (!(a2 | a3))
      return result;
    goto LABEL_42;
  }
  v32 = v5[2];
  v33 = *(_QWORD *)(v32 + 208);
  v34 = *(__int128 **)(v32 + 216);
  if ((__int128 *)v33 != v34)
  {
    while (*(_QWORD *)a3 != *(_QWORD *)v33 || *(_DWORD *)(a3 + 8) != *(_DWORD *)(v33 + 8))
    {
      v33 += 472;
      if ((__int128 *)v33 == v34)
        goto LABEL_41;
    }
    if ((__int128 *)v33 != v34)
    {
      v35 = (__int128 *)(v33 + 472);
      if ((__int128 *)(v33 + 472) != v34)
      {
        do
        {
          if (*(_QWORD *)a3 != *(_QWORD *)v35 || *(_DWORD *)(a3 + 8) != *((_DWORD *)v35 + 2))
          {
            v36 = *v35;
            v37 = v35[1];
            *(_OWORD *)(v33 + 28) = *(__int128 *)((char *)v35 + 28);
            *(_OWORD *)v33 = v36;
            *(_OWORD *)(v33 + 16) = v37;
            v38 = v35[10];
            v40 = v35[7];
            v39 = v35[8];
            *(_OWORD *)(v33 + 144) = v35[9];
            *(_OWORD *)(v33 + 160) = v38;
            *(_OWORD *)(v33 + 112) = v40;
            *(_OWORD *)(v33 + 128) = v39;
            v41 = v35[3];
            v42 = v35[4];
            v43 = v35[6];
            *(_OWORD *)(v33 + 80) = v35[5];
            *(_OWORD *)(v33 + 96) = v43;
            *(_OWORD *)(v33 + 48) = v41;
            *(_OWORD *)(v33 + 64) = v42;
            result = memcpy((void *)(v33 + 176), v35 + 11, 0x120uLL);
            v44 = *((_BYTE *)v35 + 468);
            *(_DWORD *)(v33 + 464) = *((_DWORD *)v35 + 116);
            *(_BYTE *)(v33 + 468) = v44;
            v33 += 472;
          }
          v35 = (__int128 *)((char *)v35 + 472);
        }
        while (v35 != v34);
        v34 = *(__int128 **)(v5[2] + 216);
      }
    }
    if ((__int128 *)v33 != v34)
    {
      v45 = (uint64_t)v34 - v33;
      v46 = v34;
      v47 = *(__int128 **)(v32 + 216);
      if (v46 != v47)
      {
        v48 = 8 * (v45 >> 3);
        do
        {
          v49 = *(_OWORD *)(v33 + v48);
          v50 = *(_OWORD *)(v33 + v48 + 16);
          *(_OWORD *)(v33 + 28) = *(_OWORD *)(v33 + v48 + 28);
          *(_OWORD *)v33 = v49;
          *(_OWORD *)(v33 + 16) = v50;
          v51 = *(_OWORD *)(v33 + v48 + 96);
          v53 = *(_OWORD *)(v33 + v48 + 48);
          v52 = *(_OWORD *)(v33 + v48 + 64);
          *(_OWORD *)(v33 + 80) = *(_OWORD *)(v33 + v48 + 80);
          *(_OWORD *)(v33 + 96) = v51;
          *(_OWORD *)(v33 + 48) = v53;
          *(_OWORD *)(v33 + 64) = v52;
          v54 = *(_OWORD *)(v33 + v48 + 160);
          v56 = *(_OWORD *)(v33 + v48 + 112);
          v55 = *(_OWORD *)(v33 + v48 + 128);
          *(_OWORD *)(v33 + 144) = *(_OWORD *)(v33 + v48 + 144);
          *(_OWORD *)(v33 + 160) = v54;
          *(_OWORD *)(v33 + 112) = v56;
          *(_OWORD *)(v33 + 128) = v55;
          result = memcpy((void *)(v33 + 176), (const void *)(v33 + v48 + 176), 0x120uLL);
          v57 = *(_BYTE *)(v33 + v48 + 468);
          *(_DWORD *)(v33 + 464) = *(_DWORD *)(v33 + v48 + 464);
          *(_BYTE *)(v33 + 468) = v57;
          v33 += 472;
        }
        while ((__int128 *)(v33 + v48) != v47);
      }
      *(_QWORD *)(v32 + 216) = v33;
      goto LABEL_41;
    }
  }
LABEL_42:
  result = (_QWORD *)v5[42];
  if (result)
  {
    v58 = v5[2];
    v59 = *(_QWORD *)(v58 + 424);
    if (v59)
    {
      if (*(_QWORD *)(*(_QWORD *)v59 + 64))
      {
        v60 = *(_QWORD *)(v58 + 160);
        v61 = 0;
        return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t *, char *))(*result + 48))(result, &v60, &v61);
      }
    }
  }
  return result;
}

void sub_20F26170C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  size_t v9;
  int v10;
  size_t v11;
  char v12;
  char __s2[23];
  char v14;

  sub_20FCC8710(*(_QWORD **)(a1[24] + 8), a2);
  v4 = a1[42];
  if (v4)
  {
    v5 = a1[2];
    v6 = *(_QWORD *)(v5 + 424);
    if (v6)
    {
      if (*(_QWORD *)(*(_QWORD *)v6 + 64))
      {
        v14 = 4;
        strcpy(__s2, "sem_");
        v7 = *(unsigned __int8 *)(a2 + 23);
        if ((v7 & 0x80u) == 0)
          v8 = *(unsigned __int8 *)(a2 + 23);
        else
          v8 = *(_QWORD *)(a2 + 8);
        if (v8 <= 3)
          goto LABEL_8;
        if ((v7 & 0x80) != 0)
        {
          if (*(_QWORD *)(a2 + 8) >= 4uLL)
            v11 = 4;
          else
            v11 = *(_QWORD *)(a2 + 8);
          v10 = memcmp(*(const void **)a2, __s2, v11);
          if (v11 != 4)
            goto LABEL_8;
        }
        else
        {
          if (v7 >= 4)
            v9 = 4;
          else
            v9 = *(unsigned __int8 *)(a2 + 23);
          v10 = memcmp((const void *)a2, __s2, v9);
          if (v9 != 4)
            goto LABEL_8;
        }
        if (v10)
        {
LABEL_8:
          *(_QWORD *)__s2 = *(_QWORD *)(v5 + 160);
          v12 = 0;
          (*(void (**)(uint64_t, char *, char *))(*(_QWORD *)v4 + 48))(v4, __s2, &v12);
        }
      }
    }
  }
}

BOOL sub_20F26182C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  char *v4;
  char *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int v17;
  BOOL v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  char *v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v30;
  uint64_t *v31;
  __int128 v32;
  void *__p[3];
  char v34;

  *(_QWORD *)&v32 = a2;
  *((_QWORD *)&v32 + 1) = a3;
  v4 = (char *)a1[4];
  v5 = (char *)a1[5];
  if (v4 == v5)
  {
LABEL_6:
    if (v4 == v5)
      return v4 != v5;
    sub_20F268698((uint64_t)a1, (uint64_t)&v32);
    sub_20F23A0A0(**(_QWORD ***)(a1[2] + 424), &v32, (char **)&v30);
    v6 = (uint64_t *)v30;
    v7 = v31;
    if (v30 != v31)
    {
      while (1)
      {
        v8 = *(_QWORD *)(a1[2] + 424);
        v9 = *(char **)(v8 + 40);
        v10 = *(char **)(v8 + 48);
        if (v10 != v9)
          break;
LABEL_23:
        if (v9 != v10)
        {
          v19 = *(_QWORD *)v9;
          if (*(_DWORD *)(*(_QWORD *)v9 + 16) == *((_DWORD *)v6 + 4)
            && *(_QWORD *)v19 == *v6
            && *(_DWORD *)(v19 + 8) == *((_DWORD *)v6 + 2))
          {
            v10 = v9;
          }
        }
        v20 = sub_20E9DF85C(a1 + 13, v6);
        sub_20F2684A4(a1, v20 + 5, v6);
        sub_20EF9C994((uint64_t)__p, a1 + 13, v20);
        if (__p[0])
          operator delete(__p[0]);
        v21 = sub_20E9DF85C(a1 + 18, v6);
        if (v21)
        {
          v22 = v21;
          sub_20F25A744(a1, v21 + 5, v6);
          sub_20EF9C994((uint64_t)__p, a1 + 18, v22);
          if (__p[0])
            operator delete(__p[0]);
        }
        *(_BYTE *)(*(_QWORD *)v10 + 736) = 0;
        v6 += 3;
        if (v6 == v7)
          goto LABEL_33;
      }
      v11 = (v10 - v9) >> 4;
      v12 = *((_DWORD *)v6 + 4);
      v13 = *v6;
      while (1)
      {
        v14 = v11 >> 1;
        v15 = (uint64_t *)&v9[16 * (v11 >> 1)];
        v16 = *v15;
        v17 = *(_DWORD *)(*v15 + 16);
        v18 = v17 >= v12;
        if (v17 != v12)
          goto LABEL_20;
        if (*(_QWORD *)v16 >= v13)
          break;
LABEL_14:
        v9 = (char *)(v15 + 2);
        v14 = v11 + ~v14;
LABEL_15:
        v11 = v14;
        if (!v14)
          goto LABEL_23;
      }
      if (*(_QWORD *)v16 != v13)
        goto LABEL_15;
      v18 = *(_DWORD *)(v16 + 8) >= *((_DWORD *)v6 + 2);
LABEL_20:
      if (v18)
        goto LABEL_15;
      goto LABEL_14;
    }
LABEL_33:
    v23 = (char *)a1[5];
    v24 = v23 - (v4 + 16);
    if (v23 != v4 + 16)
      memmove(v4, v4 + 16, v24 - 4);
    a1[5] = &v4[v24];
    v25 = a1[33];
    if (v25)
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v25 + 48))(v25, &v32);
    v26 = a1[42];
    if (v26)
    {
      v27 = a1[2];
      v28 = *(_QWORD *)(v27 + 424);
      if (v28)
      {
        if (*(_QWORD *)(*(_QWORD *)v28 + 64))
        {
          __p[0] = *(void **)(v27 + 160);
          v34 = 1;
          (*(void (**)(uint64_t, void **, char *))(*(_QWORD *)v26 + 48))(v26, __p, &v34);
        }
      }
    }
    if (v30)
    {
      v31 = (uint64_t *)v30;
      operator delete(v30);
    }
  }
  else
  {
    do
    {
      if (*(_QWORD *)v4 == a2 && *((_DWORD *)v4 + 2) == (_DWORD)a3)
        goto LABEL_6;
      v4 += 16;
    }
    while (v4 != v5);
    v4 = (char *)a1[5];
  }
  return v4 != v5;
}

void sub_20F261AD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F261B00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  __int128 *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  char v18;
  __int128 *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  char v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(v6 + 208);
  v8 = *(__int128 **)(v6 + 216);
  if ((__int128 *)v7 != v8)
  {
    while (*(_QWORD *)v7 != *(_QWORD *)a3
         || *(_DWORD *)(v7 + 8) != *(_DWORD *)(a3 + 8)
         || *(_QWORD *)(v7 + 24) != *(_QWORD *)a2
         || *(_DWORD *)(v7 + 32) != *(_DWORD *)(a2 + 8))
    {
      v7 += 472;
      if ((__int128 *)v7 == v8)
        goto LABEL_22;
    }
  }
  if ((__int128 *)v7 != v8)
  {
    v9 = (__int128 *)(v7 + 472);
    if ((__int128 *)(v7 + 472) != v8)
    {
      do
      {
        if (*(_QWORD *)v9 != *(_QWORD *)a3
          || *((_DWORD *)v9 + 2) != *(_DWORD *)(a3 + 8)
          || *((_QWORD *)v9 + 3) != *(_QWORD *)a2
          || *((_DWORD *)v9 + 8) != *(_DWORD *)(a2 + 8))
        {
          v10 = *v9;
          v11 = v9[1];
          *(_OWORD *)(v7 + 28) = *(__int128 *)((char *)v9 + 28);
          *(_OWORD *)v7 = v10;
          *(_OWORD *)(v7 + 16) = v11;
          v12 = v9[10];
          v14 = v9[7];
          v13 = v9[8];
          *(_OWORD *)(v7 + 144) = v9[9];
          *(_OWORD *)(v7 + 160) = v12;
          *(_OWORD *)(v7 + 112) = v14;
          *(_OWORD *)(v7 + 128) = v13;
          v15 = v9[3];
          v16 = v9[4];
          v17 = v9[6];
          *(_OWORD *)(v7 + 80) = v9[5];
          *(_OWORD *)(v7 + 96) = v17;
          *(_OWORD *)(v7 + 48) = v15;
          *(_OWORD *)(v7 + 64) = v16;
          memcpy((void *)(v7 + 176), v9 + 11, 0x120uLL);
          v18 = *((_BYTE *)v9 + 468);
          *(_DWORD *)(v7 + 464) = *((_DWORD *)v9 + 116);
          *(_BYTE *)(v7 + 468) = v18;
          v7 += 472;
        }
        v9 = (__int128 *)((char *)v9 + 472);
      }
      while (v9 != v8);
      v8 = *(__int128 **)(*(_QWORD *)(a1 + 16) + 216);
    }
    if ((__int128 *)v7 != v8)
    {
      v19 = *(__int128 **)(v6 + 216);
      if (v8 != v19)
      {
        v20 = 8 * (((uint64_t)v8 - v7) >> 3);
        do
        {
          v21 = *(_OWORD *)(v7 + v20);
          v22 = *(_OWORD *)(v7 + v20 + 16);
          *(_OWORD *)(v7 + 28) = *(_OWORD *)(v7 + v20 + 28);
          *(_OWORD *)v7 = v21;
          *(_OWORD *)(v7 + 16) = v22;
          v23 = *(_OWORD *)(v7 + v20 + 96);
          v25 = *(_OWORD *)(v7 + v20 + 48);
          v24 = *(_OWORD *)(v7 + v20 + 64);
          *(_OWORD *)(v7 + 80) = *(_OWORD *)(v7 + v20 + 80);
          *(_OWORD *)(v7 + 96) = v23;
          *(_OWORD *)(v7 + 48) = v25;
          *(_OWORD *)(v7 + 64) = v24;
          v26 = *(_OWORD *)(v7 + v20 + 160);
          v28 = *(_OWORD *)(v7 + v20 + 112);
          v27 = *(_OWORD *)(v7 + v20 + 128);
          *(_OWORD *)(v7 + 144) = *(_OWORD *)(v7 + v20 + 144);
          *(_OWORD *)(v7 + 160) = v26;
          *(_OWORD *)(v7 + 112) = v28;
          *(_OWORD *)(v7 + 128) = v27;
          memcpy((void *)(v7 + 176), (const void *)(v7 + v20 + 176), 0x120uLL);
          v29 = *(_BYTE *)(v7 + v20 + 468);
          *(_DWORD *)(v7 + 464) = *(_DWORD *)(v7 + v20 + 464);
          *(_BYTE *)(v7 + 468) = v29;
          v7 += 472;
        }
        while ((__int128 *)(v7 + v20) != v19);
      }
      *(_QWORD *)(v6 + 216) = v7;
    }
  }
LABEL_22:
  result = *(_QWORD *)(a1 + 336);
  if (result)
  {
    v31 = *(_QWORD *)(a1 + 16);
    v32 = *(_QWORD *)(v31 + 424);
    if (v32)
    {
      if (*(_QWORD *)(*(_QWORD *)v32 + 64))
      {
        v33 = *(_QWORD *)(v31 + 160);
        v34 = 0;
        return (*(uint64_t (**)(uint64_t, uint64_t *, char *))(*(_QWORD *)result + 48))(result, &v33, &v34);
      }
    }
  }
  return result;
}

uint64_t sub_20F261D44(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  __int128 **v3;
  uint64_t v4;
  __int128 v5;
  uint64_t *v6;
  float64x2_t **v7;
  double v9;
  float64x2_t *v10;
  __int128 v11;
  double v12;
  float64x2_t v14;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t *v24;
  uint64_t v25;
  float64x2_t *v26;
  float64x2_t v27;
  float64x2_t *v28;
  _QWORD *v29;
  int v30;
  float64x2_t v32;
  float v34;
  float64x2_t v36;
  uint64_t *v37;
  double v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t **v42;
  double *v43;
  double *v44;
  __int128 v45;
  float64x2_t *v46;
  _QWORD *v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unsigned int v54;
  uint64_t *v55;
  uint64_t **v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  float64x2_t v60;
  float64x2_t v62;
  double v63;
  float64x2_t v64;
  float64x2_t *v65;
  double v66;
  float64x2_t *v70;
  float64x2_t v71;
  float64x2_t *v72;
  double v73;
  double v77;
  double *v78;
  double *v79;
  float64_t *v80;
  double *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  uint64_t *v87;
  unint64_t v88;
  unsigned int v89;
  char *v90;
  __int128 v91;
  unint64_t v92;
  double *v93;
  __int128 v94;
  double *v95;
  __int128 v96;
  unint64_t v97;
  uint64_t v98;
  __n128 v99;
  unint64_t v100;
  double *v101;
  uint64_t v102;
  double *v103;
  uint64_t v104;
  double v105;
  uint64_t (***v106)();
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  double *v112;
  __int128 v113;
  void **v114;
  void **v115;
  unint64_t v116;
  __int128 **v117;
  void *v118;
  void *v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t (**v123)();
  int8x16_t v126;
  float64x2_t v128;
  float64x2_t v129;
  int8x16_t v130;
  __int128 v132;
  char *v133;
  unsigned int v134;
  unsigned __int8 v135;
  uint64_t v136;
  uint64_t i;
  unsigned __int8 v138;
  unsigned __int8 v139;
  uint64_t v140;
  uint64_t j;
  unsigned __int8 v142;
  unsigned __int8 v143;
  uint64_t v144;
  uint64_t k;
  unsigned __int8 v146;
  uint64_t *v147;
  uint64_t *v148;
  unint64_t v149;
  unsigned int v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t *v153;
  uint64_t v154;
  unsigned int v155;
  BOOL v156;
  uint64_t v157;
  double v158;
  double v159;
  double v160;
  uint64_t v161;
  __int128 v162;
  _QWORD *v163;
  _QWORD *v164;
  float64x2_t v165;
  unsigned int v166;
  unsigned int v167;
  uint64_t v168;
  float64x2_t v169;
  float64x2_t v171;
  double v174;
  double v175;
  double v177;
  double v178;
  uint64_t *v180;
  uint64_t *v181;
  unint64_t v182;
  unsigned int v183;
  unint64_t v184;
  unint64_t v185;
  uint64_t *v186;
  uint64_t v187;
  unsigned int v188;
  BOOL v189;
  uint64_t v190;
  uint64_t v191;
  __int128 v192;
  _QWORD *v193;
  _QWORD *v194;
  int v196;
  uint64_t v197;
  double v198;
  float64x2_t v199;
  double v202;
  unsigned int v203;
  double v204;
  double v205;
  uint64_t (**v206)();
  unint64_t v207;
  unint64_t v208;
  unint64_t v209;
  char *v210;
  __int128 v211;
  char *v212;
  uint64_t (**v213)();
  __int128 v214;
  uint64_t (**v215)();
  char *v216;
  char *v217;
  uint64_t (**v218)();
  _QWORD *v219;
  unsigned int v220;
  uint64_t (*v221)();
  char *v222;
  unint64_t v223;
  unint64_t v224;
  char *v225;
  uint64_t v226;
  unsigned int v227;
  BOOL v228;
  uint64_t v229;
  char *v230;
  uint64_t v231;
  _QWORD *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v239;
  char v240;
  double v242;
  _QWORD *v243;
  __int128 **v244;
  double v245;
  float64x2_t v246;
  unsigned int v247;
  __int128 **v248;
  double v249;
  double v250;
  float64x2_t v251;
  float64x2_t v252;
  double v253;
  float64x2_t v254;
  float64x2_t v255;
  double v256;
  float64x2_t v257;
  float64x2_t v258;
  float64x2_t v259;
  float64x2_t v260;
  double v261;
  float64x2_t v262;
  float64x2_t v263;
  unint64_t v264;
  __int128 v265;
  int8x16_t v266;
  float64x2_t v267;
  float64x2_t v268;
  float64x2_t v269;
  float64_t v270;
  double v271;
  int8x16_t v272;
  uint64_t v273;
  uint64_t v274;
  float64_t v275;
  double v276;
  void *__p[2];
  __int128 v278;
  __int128 v279;
  char *v280;
  char *v281;
  char *v282;
  __int128 v283;
  uint64_t v284;
  float64x2_t v285;
  uint64_t v286;
  float64_t *v287;
  double *v288;
  char *v289;
  __int128 v290;
  uint64_t v291;
  uint64_t (**v292)();
  _QWORD *v293;
  uint64_t (**v294)();
  uint64_t (***v295)();
  uint64_t v296;

  v296 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD **)(a2 + 424);
  v3 = (__int128 **)v2[5];
  v244 = (__int128 **)v2[6];
  if (v3 != v244)
  {
    v4 = a2;
    v240 = 0;
    v247 = *(_DWORD *)(*a1 + 2268);
    v242 = *(double *)(*a1 + 2296);
    v273 = *(_QWORD *)(a1[2] + 424);
    v245 = *(double *)(*a1 + 2288) * *(double *)(*a1 + 2288);
    v243 = *(_QWORD **)(a2 + 424);
    while (1)
    {
      v5 = **v3;
      v284 = *((_QWORD *)*v3 + 2);
      v283 = v5;
      v6 = sub_20E9DF85C((_QWORD *)(*v2 + 1784), (uint64_t *)&v283);
      v7 = (float64x2_t **)(v6 + 5);
      if (!v6)
        v7 = 0;
      _D14 = (*v7)[2].f64[1];
      v9 = (*v7)[4].f64[0];
      v10 = v7[4];
      v249 = v10[1].f64[0];
      v246 = *v10;
      v253 = v10[2].f64[1];
      v251 = *(float64x2_t *)((char *)v10 + 24);
      *((_QWORD *)&v11 + 1) = *(_QWORD *)&v10[2].f64[0];
      v12 = v10[4].f64[0];
      _Q1 = v10[3];
      v258 = *(float64x2_t *)((char *)*v7 + 24);
      v260 = **v7;
      v263 = (*v7)[3];
      v14 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v260, _Q1.f64[0]), v258, _Q1, 1), v263, v12);
      __asm { FMLA            D2, D14, V1.D[1] }
      *(double *)&v11 = _D2 + v9 * v12;
      v265 = v11;
      v266 = (int8x16_t)v14;
      v275 = v14.f64[1];
      v276 = *(double *)&v11;
      v18 = *v2;
      v19 = *(_QWORD *)(*v2 + 1768);
      if (!v19)
        goto LABEL_19;
      v20 = v18 + 1768;
      v21 = v18 + 1768;
      do
      {
        v22 = *(_DWORD *)(v19 + 32);
        _CF = v22 >= v284;
        if (v22 >= v284)
          v24 = (uint64_t *)v19;
        else
          v24 = (uint64_t *)(v19 + 8);
        if (_CF)
          v21 = v19;
        v19 = *v24;
      }
      while (*v24);
      if (v21 != v20 && *(_DWORD *)(v21 + 32) <= v284)
        v25 = *(_QWORD *)(v21 + 40);
      else
LABEL_19:
        v25 = 0;
      v26 = v7[6];
      v271 = v26[1].f64[0];
      v255 = *v26;
      v27.f64[1] = v26->f64[1];
      v28 = v7[2];
      v27.f64[0] = v28[1].f64[0];
      v267 = v27;
      v269 = *v28;
      v29 = *(_QWORD **)v273;
      v274 = v25;
      v30 = *(_DWORD *)(v25 + 992);
      if (v30 == -1)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_21029C995, 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v30 = *(_DWORD *)(v274 + 992);
      }
      if (!v30)
      {
        sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)&unk_21029C995, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
        abort();
      }
      v248 = v3;
      if (v30 == -1)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_21029C995, 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v30 = *(_DWORD *)(v274 + 992);
      }
      if (!v30)
      {
        sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)&unk_21029C995, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
        abort();
      }
      _V4.D[1] = v255.f64[1];
      v32.f64[1] = v263.f64[1];
      __asm { FMLA            D2, D14, V4.D[1] }
      v32.f64[0] = _D2 + v9 * v271;
      v272 = (int8x16_t)vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v260, v255.f64[0]), v258, v255, 1), v263, v271), v269);
      v268 = vaddq_f64(v32, v267);
      *(_QWORD *)&v270 = vextq_s8(v272, v272, 8uLL).u64[0];
      v34 = *(double *)(v274 + 144);
      v278 = 0u;
      v279 = 0u;
      *(_OWORD *)__p = 0u;
      _Q0.f64[0] = cos(v34 * 0.0174532925);
      v287 = 0;
      v288 = 0;
      v289 = 0;
      v292 = &off_24C9FC388;
      v293 = v29;
      v294 = 0;
      v295 = &v292;
      v37 = (uint64_t *)v29[225];
      if (!v37)
      {
        v43 = 0;
        v44 = 0;
        goto LABEL_102;
      }
      v38 = _Q0.f64[0];
      _D12 = v275;
      v40 = *v29;
      v41 = v29[1];
      v42 = (uint64_t **)(v29 + 7);
      do
      {
        v46 = (float64x2_t *)(v37 + 2);
        if (v40 == v41)
        {
          v55 = *v42;
          if (!*v42)
            goto LABEL_34;
          v53 = v37[2];
          v54 = *((_DWORD *)v37 + 6);
          v56 = (uint64_t **)(v29 + 7);
          do
          {
            v57 = v55[4];
            if (v57 < v53)
            {
              ++v55;
            }
            else if (v57 == v53)
            {
              if (*((_DWORD *)v55 + 10) < v54)
                ++v55;
              else
                v56 = (uint64_t **)v55;
            }
            else
            {
              v56 = (uint64_t **)v55;
            }
            v55 = (uint64_t *)*v55;
          }
          while (v55);
          if (v56 == v42)
            goto LABEL_34;
          v58 = (unint64_t)v56[4];
          if (v53 < v58 || v53 == v58 && *((_DWORD *)v56 + 10) > v54)
            goto LABEL_34;
          if (!v56[6])
            goto LABEL_34;
LABEL_63:
          v59 = v37[5];
          _Q0.f64[0] = *(float64_t *)(v59 + 16);
          v60 = *(float64x2_t *)v59;
          _D1 = *(_QWORD *)(v59 + 40);
          v62 = *(float64x2_t *)(v59 + 24);
          v63 = *(double *)(v59 + 64);
          v64 = *(float64x2_t *)(v59 + 48);
          v65 = (float64x2_t *)(v37[9]
                              - 8 * *((unsigned int *)v37 + 20)
                              + 8 * (*((_DWORD *)v37 + 20) + 6));
          v66 = v65[1].f64[0];
          _Q7 = *v65;
          _Q16 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v60, v65->f64[0]), v62, *v65, 1), v64, v66);
          __asm
          {
            FMLA            D17, D1, V7.D[1]
            FMLA            D7, D12, V16.D[1]
          }
          if (_Q7.f64[0] + v276 * (_D17 + v63 * v66) < v38)
            goto LABEL_34;
          v70 = (float64x2_t *)v37[7];
          v36.f64[0] = v70[1].f64[0];
          v71 = *v70;
          v72 = (float64x2_t *)v37[11];
          v73 = v72[1].f64[0];
          _Q17 = *v72;
          __asm { FMLA            D0, D1, V17.D[1] }
          _Q0.f64[0] = _Q0.f64[0] + v63 * v73;
          _Q0 = vsubq_f64(v268, vaddq_f64(v36, _Q0));
          *(_QWORD *)&_Q2.f64[0] = v272.i64[0];
          _Q2.f64[1] = v270;
          _Q2.f64[0] = vsubq_f64(_Q2, vaddq_f64(v71, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v60, *(double *)v72), v62, *v72, 1), v64, v73))).f64[1];
          __asm { FMLA            D3, D2, V1.D[1] }
          v77 = vmlad_n_f64(_D3, _Q0.f64[0], _Q0.f64[0]);
          _Q0.f64[0] = v245;
          if (v77 > v245)
            goto LABEL_34;
          if (v29[5] != -1)
          {
LABEL_66:
            v285 = *v46;
            v286 = v37[4];
            v78 = v288;
            if (v288 >= (double *)v289)
            {
              v81 = v287;
              v82 = ((char *)v288 - (char *)v287) >> 5;
              v83 = v82 + 1;
              if ((unint64_t)(v82 + 1) >> 59)
                sub_20E867F44();
              v84 = v289 - (char *)v287;
              if ((v289 - (char *)v287) >> 4 > v83)
                v83 = v84 >> 4;
              if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFE0)
                v85 = 0x7FFFFFFFFFFFFFFLL;
              else
                v85 = v83;
              if (v85)
              {
                v256 = v77;
                if (v85 >> 59)
                  sub_20E877A38();
                v239 = v85;
                v86 = (char *)operator new(32 * v85);
                v77 = v256;
                v85 = v239;
              }
              else
              {
                v86 = 0;
              }
              v90 = &v86[32 * v82];
              _Q0 = v285;
              *(float64x2_t *)v90 = v285;
              *((_QWORD *)v90 + 2) = v286;
              *((double *)v90 + 3) = v77;
              v80 = (float64_t *)v90;
              if (v78 != v81)
              {
                do
                {
                  _Q0 = *(float64x2_t *)(v78 - 4);
                  v91 = *((_OWORD *)v78 - 1);
                  *((float64x2_t *)v80 - 2) = _Q0;
                  *((_OWORD *)v80 - 1) = v91;
                  v80 -= 4;
                  v78 -= 4;
                }
                while (v78 != v81);
                v78 = v81;
              }
              v79 = (double *)(v90 + 32);
              v287 = v80;
              v289 = &v86[32 * v85];
              if (v78)
                operator delete(v78);
            }
            else
            {
              _Q0 = *v46;
              *((_QWORD *)v288 + 2) = v37[4];
              *(float64x2_t *)v78 = _Q0;
              v78[3] = v77;
              v79 = v78 + 4;
              v80 = v287;
            }
            v288 = v79;
            if ((char *)v79 - (char *)v80 >= 33)
            {
              v92 = (((unint64_t)((char *)v79 - (char *)v80) >> 5) - 2) >> 1;
              _Q0.f64[0] = *(v79 - 1);
              if (v80[4 * v92 + 3] < _Q0.f64[0])
              {
                v93 = v79 - 4;
                v94 = *((_OWORD *)v79 - 2);
                v291 = *((_QWORD *)v79 - 2);
                v290 = v94;
                do
                {
                  v95 = v93;
                  v93 = &v80[4 * v92];
                  v96 = *(_OWORD *)v93;
                  *((_DWORD *)v95 + 4) = *((_DWORD *)v93 + 4);
                  *(_OWORD *)v95 = v96;
                  v95[3] = v93[3];
                  if (!v92)
                    break;
                  v92 = (v92 - 1) >> 1;
                }
                while (v80[4 * v92 + 3] < _Q0.f64[0]);
                v45 = v290;
                *((_DWORD *)v93 + 4) = v291;
                *(_OWORD *)v93 = v45;
                v93[3] = _Q0.f64[0];
              }
            }
            v4 = a2;
            goto LABEL_34;
          }
          v87 = (uint64_t *)v29[4];
          if (!v87)
          {
LABEL_78:
            if (v287 != v288)
            {
              _Q0.f64[0] = v287[3];
              if (_Q0.f64[0] < v77)
                goto LABEL_34;
            }
            goto LABEL_66;
          }
          while (2)
          {
            v88 = v87[4];
            if (v53 >= v88)
            {
              if (v53 != v88)
              {
                if (v88 >= v53)
                  goto LABEL_66;
                goto LABEL_82;
              }
              v89 = *((_DWORD *)v87 + 10);
              if (v54 >= v89)
              {
                if (v89 >= v54)
                  goto LABEL_66;
LABEL_82:
                ++v87;
              }
            }
            v87 = (uint64_t *)*v87;
            if (!v87)
              goto LABEL_78;
            continue;
          }
        }
        v48 = (_QWORD *)*v29;
        v47 = (_QWORD *)v29[1];
        if (v47 != (_QWORD *)*v29)
        {
          v49 = ((uint64_t)v47 - *v29) >> 4;
          v50 = v37[2];
          do
          {
            v51 = v49 >> 1;
            v52 = &v48[2 * (v49 >> 1)];
            if (*v52 < v50 || *v52 == v50 && LODWORD(v48[2 * v51 + 1]) < *((_DWORD *)v37 + 6))
            {
              v48 = v52 + 2;
              v51 = v49 + ~v51;
            }
            v49 = v51;
          }
          while (v51);
        }
        if (v48 != v47)
        {
          v53 = *v48;
          if (*v48 == *(_QWORD *)&v46->f64[0])
          {
            v54 = *((_DWORD *)v48 + 2);
            if (v54 == *((_DWORD *)v37 + 6))
              goto LABEL_63;
          }
        }
LABEL_34:
        v37 = (uint64_t *)*v37;
      }
      while (v37);
      v44 = v287;
      v43 = v288;
LABEL_102:
      v97 = 126 - 2 * __clz(((char *)v43 - (char *)v44) >> 5);
      if (v43 == v44)
        v98 = 0;
      else
        v98 = v97;
      v99.n128_f64[0] = sub_20F290958((uint64_t)v44, v43, v98, 1, _Q0.f64[0]);
      if (v43 != v44)
      {
        v100 = (char *)v43 - (char *)v44 - 32;
        v101 = v44;
        if (v100 < 0x20)
          goto LABEL_363;
        v102 = (v100 >> 5) + 1;
        v101 = &v44[4 * (v102 & 0xFFFFFFFFFFFFFFELL)];
        v103 = v44 + 7;
        v104 = v102 & 0xFFFFFFFFFFFFFFELL;
        do
        {
          v99.n128_f64[0] = sqrt(*(v103 - 4));
          v105 = sqrt(*v103);
          *(v103 - 4) = v99.n128_f64[0];
          *v103 = v105;
          v103 += 8;
          v104 -= 2;
        }
        while (v104);
        if (v102 != (v102 & 0xFFFFFFFFFFFFFFELL))
        {
LABEL_363:
          do
          {
            v99.n128_f64[0] = sqrt(v101[3]);
            v101[3] = v99.n128_f64[0];
            v101 += 4;
          }
          while (v101 != v43);
        }
      }
      v288 = 0;
      v289 = 0;
      v287 = 0;
      if (!v295)
        sub_20E86D37C();
      ((void (*)(uint64_t (***)(), __n128))(*v295)[6])(v295, v99);
      v106 = v295;
      if (v295 == &v292)
      {
        v106 = &v292;
        v107 = 4;
        goto LABEL_116;
      }
      if (v295)
      {
        v107 = 5;
LABEL_116:
        (*v106)[v107]();
      }
      v281 = 0;
      v282 = 0;
      v280 = 0;
      v108 = (char *)v43 - (char *)v44;
      if (v43 != v44)
      {
        if (v108 < 0)
          sub_20E867F44();
        v109 = v108 >> 5;
        v110 = (char *)operator new(24 * (v108 >> 5));
        v280 = v110;
        v282 = &v110[24 * v109];
        v111 = v110;
        do
        {
          *((_QWORD *)v111 + 1) = 0;
          *((_QWORD *)v111 + 2) = 0;
          *(_QWORD *)v111 = 0;
          *((_DWORD *)v111 + 4) = -1;
          v111 += 24;
        }
        while (v111 != &v110[24 * v109]);
        v281 = &v110[24 * v109];
        v112 = v44;
        do
        {
          v113 = *(_OWORD *)v112;
          *((_DWORD *)v110 + 4) = *((_DWORD *)v112 + 4);
          *(_OWORD *)v110 = v113;
          v110 += 24;
          v112 += 4;
        }
        while (v112 != v43);
      }
      if (v44)
        operator delete(v44);
      v114 = (void **)__p[1];
      v115 = (void **)v278;
      v116 = v278 - (unint64_t)__p[1];
      v117 = v248;
      if ((unint64_t)v278 - (unint64_t)__p[1] >= 0x11)
      {
        do
        {
          v118 = *v114++;
          operator delete(v118);
          v116 -= 8;
        }
        while (v116 > 0x10);
      }
      while (v114 != v115)
      {
        v119 = *v114++;
        operator delete(v119);
      }
      v120 = v274;
      if (__p[0])
        operator delete(__p[0]);
      v292 = 0;
      v293 = 0;
      v294 = 0;
      v121 = v280;
      if (v280 == v281)
      {
        v2 = v243;
        if (!v280)
          goto LABEL_5;
        goto LABEL_4;
      }
      v122 = v281;
      v123 = 0;
      _V4.D[1] = v246.f64[1];
      _V7.D[1] = v251.f64[1];
      v126 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v260, v246.f64[0]), v258, v246, 1), v263, v249);
      __asm { FMLA            D0, D14, V4.D[1] }
      v128.f64[0] = _D0 + v9 * v249;
      *(_QWORD *)&v129.f64[0] = vextq_s8(v126, v126, 8uLL).u64[0];
      v130 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v260, v251.f64[0]), v258, v251, 1), v263, v253);
      __asm { FMLA            D1, D14, V7.D[1] }
      v126.i64[1] = v130.i64[0];
      *(_QWORD *)&v129.f64[1] = vextq_s8(v130, v130, 8uLL).u64[0];
      v252 = v129;
      v128.f64[1] = _D1 + v9 * v253;
      v254 = v128;
      v257 = (float64x2_t)v126;
      v264 = vextq_s8(v266, v266, 8uLL).u64[0];
      do
      {
        v134 = *(_DWORD *)(v120 + 992);
        if (v134 == -1)
        {
          sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_21029C995, 0, (void (*)(void **))sub_21023DDB0);
          v135 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v135 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68 || byte_254A6DE70)
          {
            v136 = qword_254A6DE40;
            for (i = qword_254A6DE48; v136 != i; v136 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v136)(*(_QWORD *)(v136 + 8), "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, &unk_21029C995, 0);
          }
          v138 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v138 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68)
            goto LABEL_348;
          qword_254A6DE58(unk_254A6DE60, "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, &unk_21029C995, 0);
          v134 = *(_DWORD *)(v274 + 992);
          if (v134 > 7)
          {
LABEL_151:
            if (v134 == -1)
            {
              sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_21029C995, 0, (void (*)(void **))sub_21023DDB0);
              v139 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v139 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              if (!byte_254A6DE68 || byte_254A6DE70)
              {
                v140 = qword_254A6DE40;
                for (j = qword_254A6DE48; v140 != j; v140 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v140)(*(_QWORD *)(v140 + 8), "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, &unk_21029C995, 0);
              }
              v142 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v142 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              if (!byte_254A6DE68)
                goto LABEL_350;
              qword_254A6DE58(unk_254A6DE60, "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, &unk_21029C995, 0);
              v134 = *(_DWORD *)(v274 + 992);
              if (v134 <= 7)
              {
                if (v134 <= 3)
                {
                  if (v134 > 1)
                  {
                    if (v134 != 2)
                      goto LABEL_213;
                  }
                  else if (!v134)
                  {
LABEL_349:
                    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)&unk_21029C995, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_350:
                    abort();
                  }
                  goto LABEL_171;
                }
LABEL_170:
                if (v134 != 6)
                  goto LABEL_213;
LABEL_171:
                sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/include/VIO/AreaMapping/MapTrackingUtil.hpp", 253, (uint64_t)"query_camera_lens->IsFisheye()", 30, (uint64_t)&unk_21029C995, 0, (void (*)(void **))sub_21023DDB0);
                v143 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                if ((v143 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                {
                  __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A6DE78);
                }
                if (!byte_254A6DE68 || byte_254A6DE70)
                {
                  v144 = qword_254A6DE40;
                  for (k = qword_254A6DE48; v144 != k; v144 += 16)
                    (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v144)(*(_QWORD *)(v144 + 8), "query_camera_lens->IsFisheye()", 30, &unk_21029C995, 0);
                }
                v146 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                if ((v146 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                {
                  __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A6DE78);
                }
                if (!byte_254A6DE68)
                  goto LABEL_350;
                qword_254A6DE58(unk_254A6DE60, "query_camera_lens->IsFisheye()", 30, &unk_21029C995, 0);
                goto LABEL_213;
              }
            }
            else if (v134 == 13)
            {
              goto LABEL_180;
            }
            if (v134 != 13)
              goto LABEL_213;
            goto LABEL_171;
          }
        }
        else if (v134 > 7)
        {
          goto LABEL_151;
        }
        if (v134 > 3)
        {
          if (v134 == 6)
            goto LABEL_180;
          goto LABEL_170;
        }
        if (v134 <= 1)
        {
          if (!v134)
          {
            sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)&unk_21029C995, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_348:
            abort();
          }
LABEL_180:
          v148 = *(uint64_t **)(v273 + 40);
          v147 = *(uint64_t **)(v273 + 48);
          if (v147 != v148)
          {
            v149 = ((char *)v147 - (char *)v148) >> 4;
            v150 = *((_DWORD *)v121 + 4);
            v151 = *(_QWORD *)v121;
            v120 = v274;
            while (1)
            {
              v152 = v149 >> 1;
              v153 = &v148[2 * (v149 >> 1)];
              v154 = *v153;
              v155 = *(_DWORD *)(*v153 + 16);
              v156 = v155 >= v150;
              if (v155 != v150)
                goto LABEL_188;
              if (*(_QWORD *)v154 >= v151)
                break;
LABEL_182:
              v148 = v153 + 2;
              v152 = v149 + ~v152;
LABEL_183:
              v149 = v152;
              if (!v152)
                goto LABEL_192;
            }
            if (*(_QWORD *)v154 != v151)
              goto LABEL_183;
            v156 = *(_DWORD *)(v154 + 8) >= *((_DWORD *)v121 + 2);
LABEL_188:
            if (v156)
              goto LABEL_183;
            goto LABEL_182;
          }
          v120 = v274;
LABEL_192:
          if (v148 != v147)
          {
            v157 = *v148;
            if (*(_DWORD *)(*v148 + 16) == *((_DWORD *)v121 + 4) && *(_QWORD *)v157 == *(_QWORD *)v121)
            {
              if (*(_DWORD *)(v157 + 8) != *((_DWORD *)v121 + 2))
                v148 = *(uint64_t **)(v273 + 48);
              if (v147 != v148)
              {
                v158 = sub_20F29212C(v120, 0.0);
                v160 = v159;
                v161 = *(_QWORD *)(v273 + 8);
                v162 = *(_OWORD *)v121;
                LODWORD(v278) = *((_DWORD *)v121 + 4);
                *(_OWORD *)__p = v162;
                v163 = (_QWORD *)(v161 + 24);
                if (sub_20E9DF85C((_QWORD *)(v161 + 24), (uint64_t *)__p))
                {
                  v164 = (_QWORD *)sub_20E9DF85C(v163, (uint64_t *)__p)[7];
                  if (v164)
                  {
                    v166 = 0;
                    v167 = 0;
                    v120 = v274;
                    do
                    {
                      v168 = v164[3];
                      if (*(_BYTE *)(v168 + 192))
                      {
                        ++v166;
                        v165.f64[0] = *(float64_t *)(v168 + 64);
                        v165 = vsubq_f64(v165, v268);
                        *(_QWORD *)&v169.f64[0] = v272.i64[0];
                        v169.f64[1] = v270;
                        _Q1 = vsubq_f64(*(float64x2_t *)(v168 + 48), v169);
                        v171 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v257, _Q1.f64[0]), v252, _Q1, 1), v254, v165.f64[0]);
                        _D4 = v264;
                        __asm { FMLA            D3, D4, V1.D[1] }
                        v174 = vmlad_n_f64(_D3, *(double *)&v265, v165.f64[0]);
                        v165.f64[0] = fabs(v171.f64[0]);
                        v175 = fabs(v158 * v174);
                        _NF = v174 >= 0.00000001 && v165.f64[0] < v175;
                        v177 = fabs(v171.f64[1]);
                        v178 = fabs(v160 * v174);
                        if (_NF && v177 < v178)
                          ++v167;
                      }
                      v164 = (_QWORD *)*v164;
                    }
                    while (v164);
                    goto LABEL_270;
                  }
                }
LABEL_269:
                v166 = 0;
                v167 = 0;
                v120 = v274;
LABEL_270:
                if (v167 > v247)
                {
                  v205 = (double)v166;
                  if (!v166)
                    v205 = 1.0;
                  if ((double)v167 / v205 > v242)
                  {
                    if (v123 < v294)
                    {
                      v132 = *(_OWORD *)v121;
                      v123[2] = (uint64_t (*)())*((_QWORD *)v121 + 2);
                      *(_OWORD *)v123 = v132;
                      v133 = (char *)(v123 + 3);
                    }
                    else
                    {
                      v206 = v292;
                      v207 = 0xAAAAAAAAAAAAAAABLL * (v123 - v292);
                      v208 = v207 + 1;
                      if (v207 + 1 > 0xAAAAAAAAAAAAAAALL)
                        sub_20E867F44();
                      if (0x5555555555555556 * (v294 - v292) > v208)
                        v208 = 0x5555555555555556 * (v294 - v292);
                      if (0xAAAAAAAAAAAAAAABLL * (v294 - v292) >= 0x555555555555555)
                        v209 = 0xAAAAAAAAAAAAAAALL;
                      else
                        v209 = v208;
                      if (v209)
                      {
                        if (v209 > 0xAAAAAAAAAAAAAAALL)
                          sub_20E877A38();
                        v210 = (char *)operator new(24 * v209);
                      }
                      else
                      {
                        v210 = 0;
                      }
                      v211 = *(_OWORD *)v121;
                      v212 = &v210[24 * v207];
                      *((_QWORD *)v212 + 2) = *((_QWORD *)v121 + 2);
                      *(_OWORD *)v212 = v211;
                      v213 = (uint64_t (**)())v212;
                      if (v123 != v206)
                      {
                        do
                        {
                          v214 = *(_OWORD *)(v123 - 3);
                          *((_DWORD *)v213 - 2) = *((_DWORD *)v123 - 2);
                          *(_OWORD *)(v213 - 3) = v214;
                          v213 -= 3;
                          v123 -= 3;
                        }
                        while (v123 != v206);
                        v123 = v292;
                      }
                      v133 = v212 + 24;
                      v292 = v213;
                      v293 = v212 + 24;
                      v294 = (uint64_t (**)())&v210[24 * v209];
                      if (v123)
                        operator delete(v123);
                      v120 = v274;
                    }
                    v293 = v133;
                    v123 = (uint64_t (**)())v133;
                  }
                }
                goto LABEL_136;
              }
            }
          }
          goto LABEL_136;
        }
        if (v134 == 2)
          goto LABEL_180;
LABEL_213:
        v181 = *(uint64_t **)(v273 + 40);
        v180 = *(uint64_t **)(v273 + 48);
        if (v180 != v181)
        {
          v182 = ((char *)v180 - (char *)v181) >> 4;
          v183 = *((_DWORD *)v121 + 4);
          v184 = *(_QWORD *)v121;
          v120 = v274;
          while (1)
          {
            v185 = v182 >> 1;
            v186 = &v181[2 * (v182 >> 1)];
            v187 = *v186;
            v188 = *(_DWORD *)(*v186 + 16);
            v189 = v188 >= v183;
            if (v188 != v183)
              goto LABEL_221;
            if (*(_QWORD *)v187 >= v184)
              break;
LABEL_215:
            v181 = v186 + 2;
            v185 = v182 + ~v185;
LABEL_216:
            v182 = v185;
            if (!v185)
              goto LABEL_225;
          }
          if (*(_QWORD *)v187 != v184)
            goto LABEL_216;
          v189 = *(_DWORD *)(v187 + 8) >= *((_DWORD *)v121 + 2);
LABEL_221:
          if (v189)
            goto LABEL_216;
          goto LABEL_215;
        }
        v120 = v274;
LABEL_225:
        if (v181 != v180)
        {
          v190 = *v181;
          if (*(_DWORD *)(*v181 + 16) == *((_DWORD *)v121 + 4) && *(_QWORD *)v190 == *(_QWORD *)v121)
          {
            if (*(_DWORD *)(v190 + 8) != *((_DWORD *)v121 + 2))
              v181 = *(uint64_t **)(v273 + 48);
            if (v180 != v181)
            {
              v191 = *(_QWORD *)(v273 + 8);
              v192 = *(_OWORD *)v121;
              LODWORD(v278) = *((_DWORD *)v121 + 4);
              *(_OWORD *)__p = v192;
              v193 = (_QWORD *)(v191 + 24);
              if (!sub_20E9DF85C((_QWORD *)(v191 + 24), (uint64_t *)__p))
                goto LABEL_269;
              v194 = (_QWORD *)sub_20E9DF85C(v193, (uint64_t *)__p)[7];
              if (!v194)
                goto LABEL_269;
              v166 = 0;
              v167 = 0;
              v120 = v274;
              while (2)
              {
                v197 = v194[3];
                if (!*(_BYTE *)(v197 + 192))
                  goto LABEL_236;
                ++v166;
                _Q0.f64[0] = *(float64_t *)(v197 + 64);
                *(_QWORD *)&v198 = *(_OWORD *)&vsubq_f64(_Q0, v268);
                *(_QWORD *)&v199.f64[0] = v272.i64[0];
                v199.f64[1] = v270;
                _Q2 = vsubq_f64(*(float64x2_t *)(v197 + 48), v199);
                *(_QWORD *)&_Q0.f64[0] = v264;
                v259 = _Q2;
                v261 = v198;
                __asm { FMLA            D1, D0, V2.D[1] }
                _Q0.f64[1] = *((float64_t *)&v265 + 1);
                v202 = vmlad_n_f64(_D1, *(double *)&v265, v198);
                if (v202 < 0.01)
                  goto LABEL_236;
                v250 = v202;
                if (v202 <= 0.0)
                {
                  v196 = 0;
                  goto LABEL_235;
                }
                v203 = *(_DWORD *)(v120 + 992);
                if (v203 == -1)
                {
                  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_21029C995, 0, (void (*)(void **))sub_21023DDB0))
                  {
                    goto LABEL_350;
                  }
                  v203 = *(_DWORD *)(v274 + 992);
                }
                v262 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v257, v259.f64[0]), v252, v259, 1), v254, v261);
                if (v203 > 7)
                {
                  if (v203 >= 0xC)
                  {
                    if (v203 > 0xD)
                    {
                      if (v203 == -1)
                      {
                        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_21029C995, 0, (void (*)(void **))sub_21023DDB0))
                        {
                          goto LABEL_350;
                        }
                        v203 = *(_DWORD *)(v274 + 992);
                        if (!v203)
                          goto LABEL_349;
                      }
                    }
                    else
                    {
                      if (v203 == 13)
                        goto LABEL_255;
                      v203 = 12;
                    }
                  }
                }
                else if (v203 > 3)
                {
                  if (v203 == 6)
                    goto LABEL_255;
                }
                else
                {
                  if (v203 <= 1)
                  {
                    if (!v203)
                      goto LABEL_349;
LABEL_255:
                    v196 = fabs(v262.f64[0]) < fabs(v250 * sub_20F29212C(v274, 0.0))
                        && fabs(v262.f64[1]) < fabs(v250 * v204);
                    v120 = v274;
LABEL_235:
                    v167 += v196;
LABEL_236:
                    v194 = (_QWORD *)*v194;
                    if (!v194)
                      goto LABEL_270;
                    continue;
                  }
                  if (v203 == 2)
                    goto LABEL_255;
                  v203 = 3;
                }
                break;
              }
              if (v203 == -1)
              {
                if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_21029C995, 0, (void (*)(void **))sub_21023DDB0))
                {
                  goto LABEL_350;
                }
                v203 = *(_DWORD *)(v274 + 992);
              }
              if (!v203)
                goto LABEL_349;
              _Q0 = vmulq_f64(v262, v262);
              v120 = v274;
              v196 = vaddvq_f64(_Q0) <= v250 * (v250 * *(double *)(v274 + 1000));
              goto LABEL_235;
            }
          }
        }
LABEL_136:
        v121 += 24;
      }
      while (v121 != v122);
      v215 = v292;
      v2 = v243;
      if (v292 == v123)
        goto LABEL_342;
      v216 = *(char **)(v273 + 40);
      v217 = *(char **)(v273 + 48);
      v218 = v292;
      do
      {
        if (v217 != v216)
        {
          v220 = *((_DWORD *)v218 + 4);
          v221 = *v218;
          v222 = v216;
          v223 = (v217 - v216) >> 4;
          while (1)
          {
            v224 = v223 >> 1;
            v225 = &v222[16 * (v223 >> 1)];
            v226 = *(_QWORD *)v225;
            v227 = *(_DWORD *)(*(_QWORD *)v225 + 16);
            v228 = v227 >= v220;
            if (v227 != v220)
              goto LABEL_315;
            if (*(_QWORD *)v226 >= (unint64_t)v221)
              break;
LABEL_309:
            v222 = v225 + 16;
            v224 = v223 + ~v224;
LABEL_310:
            v223 = v224;
            if (!v224)
              goto LABEL_319;
          }
          if (*(uint64_t (**)())v226 != v221)
            goto LABEL_310;
          v228 = *(_DWORD *)(v226 + 8) >= *((_DWORD *)v218 + 2);
LABEL_315:
          if (v228)
            goto LABEL_310;
          goto LABEL_309;
        }
        v222 = v216;
LABEL_319:
        if (v222 == v217)
        {
          v219 = *(_QWORD **)v217;
          if (*(_QWORD *)(*(_QWORD *)v217 + 728) != -1)
            goto LABEL_306;
        }
        else
        {
          v229 = *(_QWORD *)v222;
          v230 = v217;
          if (*(_DWORD *)(*(_QWORD *)v222 + 16) == *((_DWORD *)v218 + 4))
          {
            v230 = v217;
            if (*(uint64_t (**)())v229 == *v218)
            {
              if (*(_DWORD *)(v229 + 8) == *((_DWORD *)v218 + 2))
                v230 = v222;
              else
                v230 = v217;
            }
          }
          v219 = *(_QWORD **)v230;
          if (v219[91] != -1)
            goto LABEL_306;
        }
        v231 = *(_QWORD *)(v4 + 160);
        v232 = v219 + 87;
        v233 = v219[87];
        if (v233 == v231)
          goto LABEL_306;
        if (v233 == -1)
        {
          v237 = 0;
        }
        else
        {
          v234 = v219[88];
          if (v234 == v231)
            goto LABEL_306;
          if (v234 == -1)
          {
            v237 = 1;
          }
          else
          {
            v235 = v219[89];
            if (v235 == v231)
              goto LABEL_306;
            if (v235 == -1)
            {
              v237 = 2;
            }
            else
            {
              v236 = v219[90];
              if (v236 == v231)
                goto LABEL_306;
              if (v236 == -1)
              {
                v237 = 3;
              }
              else
              {
                if (v231 == -1)
                  goto LABEL_306;
                v237 = 4;
              }
            }
          }
        }
        v232[v237] = v231;
LABEL_306:
        v218 += 3;
      }
      while (v218 != v123);
      v240 = 1;
LABEL_342:
      if (v215)
        operator delete(v215);
      v121 = v280;
      v117 = v248;
      if (v280)
LABEL_4:
        operator delete(v121);
LABEL_5:
      v3 = v117 + 2;
      if (v3 == v244)
        return v240 & 1;
    }
  }
  v240 = 0;
  return v240 & 1;
}

void sub_20F2637DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  uint64_t v70;
  void *v72;

  v72 = *(void **)(v70 - 192);
  if (v72)
  {
    *(_QWORD *)(v70 - 184) = v72;
    operator delete(v72);
  }
  if (!__p)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20F26389C(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  _QWORD *v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  v4 = (char *)a1[10];
  v5 = (char *)a1[11];
  v6 = v5;
  if (v4 == v5)
    goto LABEL_7;
  v7 = (char *)a1[10];
  while (*(_QWORD *)v7 != *a2)
  {
    v7 += 8;
    if (v7 == v5)
    {
      v7 = (char *)a1[11];
      break;
    }
  }
  if (v7 == v5)
  {
LABEL_7:
    v8 = a1[12];
    if ((unint64_t)v5 >= v8)
    {
      v10 = v5 - v4;
      v11 = (v5 - v4) >> 3;
      v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 61)
        sub_20E92CED8();
      v13 = v8 - (_QWORD)v4;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          sub_20E877A38();
        v15 = operator new(8 * v14);
      }
      else
      {
        v15 = 0;
      }
      v16 = &v15[8 * v11];
      *v16 = *a2;
      v9 = v16 + 1;
      if (v4 != v5)
      {
        if ((unint64_t)(v10 - 8) < 0x58)
          goto LABEL_33;
        if ((unint64_t)(v4 - v15) < 0x20)
          goto LABEL_33;
        v17 = ((unint64_t)(v10 - 8) >> 3) + 1;
        v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
        v6 = &v5[-v18];
        v16 = (_QWORD *)((char *)v16 - v18);
        v19 = &v15[8 * v11 - 16];
        v20 = v5 - 16;
        v21 = v17 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v22 = *(_OWORD *)v20;
          *(v19 - 1) = *((_OWORD *)v20 - 1);
          *v19 = v22;
          v19 -= 2;
          v20 -= 32;
          v21 -= 4;
        }
        while (v21);
        if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_33:
          do
          {
            v23 = *((_QWORD *)v6 - 1);
            v6 -= 8;
            *--v16 = v23;
          }
          while (v6 != v4);
        }
      }
      a1[10] = v16;
      a1[11] = v9;
      a1[12] = &v15[8 * v14];
      if (v4)
        operator delete(v4);
    }
    else
    {
      *(_QWORD *)v5 = *a2;
      v9 = v5 + 8;
    }
    a1[11] = v9;
  }
}

void sub_20F263A50(_QWORD *a1, int8x16_t **a2, uint64_t a3, uint64_t *a4, unsigned int a5, char a6, char **a7)
{
  BOOL v9;
  unint64_t v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  char *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  char v28;

  sub_20F263BE0(*(_QWORD **)(a1[2] + 424), a4, a2, *(unsigned __int8 *)(*a1 + 720), a3, a6, (uint64_t)&v25, *(double *)(*a1 + 96));
  if (v28)
    v9 = HIDWORD(v26) >= a5;
  else
    v9 = 0;
  if (v9)
  {
    v11 = a7[1];
    v10 = (unint64_t)a7[2];
    if ((unint64_t)v11 >= v10)
    {
      v15 = *a7;
      v16 = 0xCCCCCCCCCCCCCCCDLL * ((v11 - *a7) >> 3);
      v17 = v16 + 1;
      if (v16 + 1 > 0x666666666666666)
        sub_20E867F44();
      v18 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v10 - (_QWORD)v15) >> 3);
      if (2 * v18 > v17)
        v17 = 2 * v18;
      if (v18 >= 0x333333333333333)
        v19 = 0x666666666666666;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 > 0x666666666666666)
          sub_20E877A38();
        v20 = (char *)operator new(40 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[40 * v16];
      v22 = v26;
      *(_OWORD *)v21 = v25;
      *((_OWORD *)v21 + 1) = v22;
      *((_QWORD *)v21 + 4) = v27;
      v14 = v21 + 40;
      if (v11 != v15)
      {
        do
        {
          v23 = *(_OWORD *)(v11 - 40);
          v24 = *(_OWORD *)(v11 - 24);
          *((_DWORD *)v21 - 2) = *((_DWORD *)v11 - 2);
          *(_OWORD *)(v21 - 24) = v24;
          *(_OWORD *)(v21 - 40) = v23;
          v21 -= 40;
          v11 -= 40;
        }
        while (v11 != v15);
        v11 = *a7;
      }
      *a7 = v21;
      a7[1] = v14;
      a7[2] = &v20[40 * v19];
      if (v11)
        operator delete(v11);
    }
    else
    {
      v12 = v25;
      v13 = v26;
      *((_QWORD *)v11 + 4) = v27;
      *(_OWORD *)v11 = v12;
      *((_OWORD *)v11 + 1) = v13;
      v14 = v11 + 40;
    }
    a7[1] = v14;
  }
}

void sub_20F263BE0(_QWORD *a1@<X0>, uint64_t *a2@<X1>, int8x16_t **a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X8>, double a8@<D0>)
{
  uint64_t *v14;
  uint64_t *v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  float64x2_t v31;
  int v32;
  int v33;
  float64x2_t v34;
  float64x2_t *v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  int v40;
  unint64_t v41;
  unint64_t v43;
  uint64_t v44;
  size_t v45;
  const char *v46;
  unsigned __int8 v47;
  double v51;
  double v52;
  double v54;
  double v55;
  uint64_t v57;
  unsigned __int8 v58;
  const char *v59;
  size_t v60;
  _BYTE *v61;
  unint64_t v62;
  const char *v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  size_t v72;
  std::__shared_weak_count_vtbl *v73;
  std::__shared_weak_count *v74;
  std::__shared_weak_count *v75;
  unint64_t *p_shared_owners;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  void *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  float64x2_t v107;
  float64_t v108;
  int8x16_t v109;
  double v110;
  float64x2_t v111;
  float64_t v112;
  uint64_t v113;
  __int128 v114;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v116;
  const char *v117;
  int v118;
  const char *v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  uint64_t v122;
  _BYTE object[24];
  __int128 v124;
  void *__p[2];
  unint64_t v126;
  char v127;
  uint64_t v128;
  uint64_t v129;

  if (!a5)
  {
    sub_20F24E118(&v122);
    if (**(int **)(v122 + 56) > 4
      || ((v40 = *(unsigned __int8 *)(v122 + 72), v41 = sub_20E8C31DC(v122, "OSLogSurrogateAppender", 1, 0), !v40)
        ? (_ZF = v41 == 0)
        : (_ZF = 0),
          _ZF))
    {
LABEL_129:
      *(_BYTE *)a7 = 0;
      *(_BYTE *)(a7 + 40) = 0;
      return;
    }
    v43 = v41;
    *(_QWORD *)&v114 = &v122;
    *((std::chrono::steady_clock::time_point *)&v114 + 1) = std::chrono::steady_clock::now();
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v116 = 4;
    v117 = "unknown file";
    v118 = 201;
    v120 = 0;
    v121 = 0;
    v119 = "unknown function";
    v44 = v122;
    if (*(char *)(v122 + 39) < 0)
    {
      v46 = *(const char **)(v122 + 16);
      v45 = *(_QWORD *)(v122 + 24);
      v113 = *(_QWORD *)v114 + 16;
      v58 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v58 & 1) != 0)
        goto LABEL_48;
    }
    else
    {
      v45 = *(unsigned __int8 *)(v122 + 39);
      v46 = (const char *)(*(_QWORD *)v114 + 16);
      v113 = (uint64_t)v46;
      v47 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v47 & 1) != 0)
        goto LABEL_48;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
      if ((_BYTE)v124 && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_48:
    if (byte_254A4A4F8[23] >= 0)
      v59 = byte_254A4A4F8;
    else
      v59 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v60 = byte_254A4A4F8[23];
    else
      v60 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)object = os_log_create(v59, v46);
    v61 = &object[8];
    if (v60 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v60 >= 0x17)
    {
      v62 = v43;
      v63 = v46;
      v64 = v44;
      v65 = v40;
      v66 = (v60 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v60 | 7) != 0x17)
        v66 = v60 | 7;
      v67 = v66 + 1;
      v61 = operator new(v66 + 1);
      *(_QWORD *)&object[16] = v60;
      *(_QWORD *)&v124 = v67 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v61;
      v40 = v65;
      v44 = v64;
      v46 = v63;
      v43 = v62;
    }
    else
    {
      BYTE7(v124) = v60;
      if (!v60)
      {
LABEL_62:
        v61[v60] = 0;
        BYTE8(v124) = 1;
        v68 = __p;
        if (v45 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v45 >= 0x17)
        {
          v69 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v45 | 7) != 0x17)
            v69 = v45 | 7;
          v70 = v69 + 1;
          v68 = operator new(v69 + 1);
          __p[1] = (void *)v45;
          v126 = v70 | 0x8000000000000000;
          __p[0] = v68;
        }
        else
        {
          HIBYTE(v126) = v45;
          if (!v45)
            goto LABEL_70;
        }
        memmove(v68, v46, v45);
LABEL_70:
        *((_BYTE *)v68 + v45) = 0;
        v127 = 1;
        v71 = *(NSObject **)object;
        if (SHIBYTE(v126) < 0)
          operator delete(__p[0]);
        if (BYTE8(v124) && SBYTE7(v124) < 0)
          operator delete(*(void **)&object[8]);
        if (*(_QWORD *)object)
          os_release(*(void **)object);
        if (v43 && *(_QWORD *)(v43 + 24))
        {
          v72 = _os_log_pack_size();
          v73 = (std::__shared_weak_count_vtbl *)operator new(v72, (std::align_val_t)8uLL);
          v74 = (std::__shared_weak_count *)operator new();
          v75 = v74;
          v74->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v74->__shared_owners_;
          v74->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v74->__shared_weak_owners_ = 0;
          v74[1].__vftable = v73;
          *(_QWORD *)object = v73;
          *(_QWORD *)&object[8] = v73;
          *(_QWORD *)&object[16] = v74;
          do
            v77 = __ldxr(p_shared_owners);
          while (__stxr(v77 + 1, p_shared_owners));
          v124 = 0uLL;
          __p[0] = 0;
          do
            v78 = __ldaxr(p_shared_owners);
          while (__stlxr(v78 - 1, p_shared_owners));
          if (!v78)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v75);
          }
          v79 = *(_QWORD *)object;
          *(_WORD *)_os_log_pack_fill() = 0;
          v80 = operator new();
          v81 = *(unsigned __int8 *)(v44 + 39);
          v82 = v113;
          if ((v81 & 0x80u) != 0)
          {
            v82 = *(_QWORD *)(v44 + 16);
            v81 = *(_QWORD *)(v44 + 24);
          }
          *(_QWORD *)v80 = v79;
          *(_OWORD *)(v80 + 8) = *(_OWORD *)&object[8];
          *(_QWORD *)&object[8] = 0;
          *(_QWORD *)&object[16] = 0;
          *(_OWORD *)(v80 + 24) = v124;
          v124 = 0uLL;
          *(_QWORD *)(v80 + 40) = v82;
          *(_QWORD *)(v80 + 48) = v81;
          *(_BYTE *)(v80 + 56) = 16;
          v128 = 0;
          v129 = v80;
          (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v43 + 24) + 40))(*(_QWORD *)(v43 + 24), &v129);
          v83 = v129;
          v129 = 0;
          if (v83)
          {
            v84 = *(std::__shared_weak_count **)(v83 + 32);
            if (v84)
            {
              v85 = (unint64_t *)&v84->__shared_owners_;
              do
                v86 = __ldaxr(v85);
              while (__stlxr(v86 - 1, v85));
              if (!v86)
              {
                ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                std::__shared_weak_count::__release_weak(v84);
              }
            }
            v87 = *(std::__shared_weak_count **)(v83 + 16);
            if (v87)
            {
              v88 = (unint64_t *)&v87->__shared_owners_;
              do
                v89 = __ldaxr(v88);
              while (__stlxr(v89 - 1, v88));
              if (!v89)
              {
                ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                std::__shared_weak_count::__release_weak(v87);
              }
            }
            MEMORY[0x212BC6398](v83, 0x10F0C40B62ED6C6);
            v90 = v128;
            v128 = 0;
            if (v90)
            {
              v91 = *(std::__shared_weak_count **)(v90 + 32);
              if (v91)
              {
                v92 = (unint64_t *)&v91->__shared_owners_;
                do
                  v93 = __ldaxr(v92);
                while (__stlxr(v93 - 1, v92));
                if (!v93)
                {
                  ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                  std::__shared_weak_count::__release_weak(v91);
                }
              }
              v94 = *(std::__shared_weak_count **)(v90 + 16);
              if (v94)
              {
                v95 = (unint64_t *)&v94->__shared_owners_;
                do
                  v96 = __ldaxr(v95);
                while (__stlxr(v96 - 1, v95));
                if (!v96)
                {
                  ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                  std::__shared_weak_count::__release_weak(v94);
                }
              }
              MEMORY[0x212BC6398](v90, 0x10F0C40B62ED6C6);
            }
          }
          v97 = (std::__shared_weak_count *)*((_QWORD *)&v124 + 1);
          if (*((_QWORD *)&v124 + 1))
          {
            v98 = (unint64_t *)(*((_QWORD *)&v124 + 1) + 8);
            do
              v99 = __ldaxr(v98);
            while (__stlxr(v99 - 1, v98));
            if (!v99)
            {
              ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
              std::__shared_weak_count::__release_weak(v97);
            }
          }
          v100 = *(std::__shared_weak_count **)&object[16];
          if (*(_QWORD *)&object[16])
          {
            v101 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
            do
              v102 = __ldaxr(v101);
            while (__stlxr(v102 - 1, v101));
            if (!v102)
            {
              ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
              std::__shared_weak_count::__release_weak(v100);
            }
          }
        }
        else
        {
          os_log_type_enabled(v71, OS_LOG_TYPE_ERROR);
          *(_WORD *)object = 0;
          v103 = (void *)_os_log_send_and_compose_impl();
          if (v103)
            free(v103);
        }
        if (v40)
        {
          sub_20E8C003C((uint64_t)&v114, "Invalid vision sensor when selecting map keyframes");
          sub_20E863570((uint64_t)&v114);
        }
        sub_20E863570((uint64_t)&v114);
        v104 = v121;
        if (v121)
        {
          v105 = (unint64_t *)&v121->__shared_owners_;
          do
            v106 = __ldaxr(v105);
          while (__stlxr(v106 - 1, v105));
          if (!v106)
          {
            ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
            std::__shared_weak_count::__release_weak(v104);
          }
        }
        goto LABEL_129;
      }
    }
    memmove(v61, v59, v60);
    goto LABEL_62;
  }
  v15 = (uint64_t *)a1[5];
  v14 = (uint64_t *)a1[6];
  if (v14 != v15)
  {
    v16 = ((char *)v14 - (char *)v15) >> 4;
    v17 = *((_DWORD *)a2 + 4);
    v18 = *a2;
    while (1)
    {
      v19 = v16 >> 1;
      v20 = &v15[2 * (v16 >> 1)];
      v21 = *v20;
      v22 = *(_DWORD *)(*v20 + 16);
      _CF = v22 >= v17;
      if (v22 != v17)
        goto LABEL_10;
      if (*(_QWORD *)v21 >= v18)
        break;
LABEL_4:
      v15 = v20 + 2;
      v19 = v16 + ~v19;
LABEL_5:
      v16 = v19;
      if (!v19)
        goto LABEL_13;
    }
    if (*(_QWORD *)v21 != v18)
      goto LABEL_5;
    _CF = *(_DWORD *)(v21 + 8) >= *((_DWORD *)a2 + 2);
LABEL_10:
    if (_CF)
      goto LABEL_5;
    goto LABEL_4;
  }
LABEL_13:
  if (v15 == v14)
    goto LABEL_129;
  v24 = *v15;
  if (*(_DWORD *)(*v15 + 16) != *((_DWORD *)a2 + 4) || *(_QWORD *)v24 != *a2)
    goto LABEL_129;
  if (*(_DWORD *)(v24 + 8) != *((_DWORD *)a2 + 2))
    v15 = (uint64_t *)a1[6];
  if (v14 == v15)
    goto LABEL_129;
  *(_OWORD *)object = *(_OWORD *)a2;
  *(_QWORD *)&object[16] = a2[2];
  v112 = *(double *)(*a3)[1].i64;
  v108 = *(double *)&(*a3)[2].i64[1];
  v107 = *(float64x2_t *)((char *)&(*a3)[1] + 8);
  v110 = *(double *)(*a3)[4].i64;
  v111 = *(float64x2_t *)*a3;
  v109 = (*a3)[3];
  v25 = sub_20F29212C(a5, a8);
  v27 = v26;
  v28 = a1[1];
  v114 = *(_OWORD *)a2;
  LODWORD(rep) = *((_DWORD *)a2 + 4);
  v29 = (_QWORD *)(v28 + 24);
  if (sub_20E9DF85C((_QWORD *)(v28 + 24), (uint64_t *)&v114)
    && (v30 = (_QWORD *)sub_20E9DF85C(v29, (uint64_t *)&v114)[7]) != 0)
  {
    v32 = 0;
    v33 = 0;
    v37 = v111;
    v39.f64[0] = v112;
    *(_QWORD *)&v38.f64[0] = vextq_s8((int8x16_t)v37, (int8x16_t)v37, 8uLL).u64[0];
    v34 = v107;
    _D1 = vextq_s8(v109, v109, 8uLL).u64[0];
    v36 = (float64x2_t *)a3[2];
    v37.f64[1] = v107.f64[0];
    *(_QWORD *)&v38.f64[1] = vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL).u64[0];
    v39.f64[1] = v108;
    do
    {
      v57 = v30[3];
      if (*(_BYTE *)(v57 + 192) && (!a4 || *(_BYTE *)(v57 + 188)) && ((a6 & 1) != 0 || !*(_BYTE *)(v57 + 189)))
      {
        ++v32;
        v34.f64[0] = *(float64_t *)(v57 + 64);
        v31.f64[0] = v36[1].f64[0];
        v34 = vsubq_f64(v34, v31);
        _Q4 = vsubq_f64(*(float64x2_t *)(v57 + 48), *v36);
        v31 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v37, _Q4.f64[0]), v38, _Q4, 1), v39, v34.f64[0]);
        __asm { FMLA            D6, D1, V4.D[1] }
        v51 = vmlad_n_f64(_D6, v110, v34.f64[0]);
        v34.f64[0] = fabs(v31.f64[0]);
        v52 = fabs(v25 * v51);
        _NF = v51 >= 0.00000001 && v34.f64[0] < v52;
        v54 = fabs(v31.f64[1]);
        v55 = fabs(v27 * v51);
        if (_NF && v54 < v55)
          ++v33;
      }
      v30 = (_QWORD *)*v30;
    }
    while (v30);
  }
  else
  {
    v32 = 0;
    v33 = 0;
  }
  *(_OWORD *)a7 = *(_OWORD *)object;
  *(_QWORD *)(a7 + 16) = *(_QWORD *)&object[16];
  *(_BYTE *)(a7 + 24) = a4;
  *(_DWORD *)(a7 + 28) = v32;
  *(_DWORD *)(a7 + 32) = v33;
  *(_BYTE *)(a7 + 40) = 1;
}

void sub_20F264510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39)
{
  if (a39)
  {
    if (a38 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void sub_20F264550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  sub_20E86E8C4((uint64_t *)(v33 - 112));
  sub_20E86E8C4((uint64_t *)(v33 - 120));
  sub_20E86E658((uint64_t)&a33);
  sub_20E863714((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void sub_20F26457C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_20E86E658((uint64_t)&a33);
  sub_20E863714((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void sub_20F264598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  MEMORY[0x212BC6398](v15, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F2645C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F2645E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F2645F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *object,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40)
{
  if (a40 && a39 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void sub_20F264638(_QWORD *a1, int8x16_t **a2, uint64_t *a3, uint64_t **a4, unint64_t a5, unsigned int a6, char a7, uint64_t *a8)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v17;
  __n128 v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  _QWORD *v23;
  _QWORD *v24;
  __int128 v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  __int128 v33;
  char *v34;
  char *v35;
  __int128 v36;
  void *v37;
  unint64_t v38;
  uint64_t v39;
  void *__p;
  _BYTE *v41;
  uint64_t v42;
  char v43;

  v8 = *a4;
  v9 = a4[1];
  if (*a4 != v9)
  {
    __p = 0;
    v41 = 0;
    v42 = 0;
    v17 = *a3;
    do
    {
      sub_20F263A50(a1, a2, v17, v8, a6, a7, (char **)&__p);
      v8 += 3;
    }
    while (v8 != v9);
    v19 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((v41 - (_BYTE *)__p) >> 3));
    if (v41 == __p)
      v20 = 0;
    else
      v20 = v19;
    sub_20F27EDE4((uint64_t)__p, (unint64_t)v41, v20, 1, v18);
    if (0xAAAAAAAAAAAAAAABLL * (a4[1] - *a4) >= a5)
      v21 = a5;
    else
      v21 = 0xAAAAAAAAAAAAAAABLL * (a4[1] - *a4);
    v22 = (char *)*a8;
    a8[1] = *a8;
    v23 = __p;
    v24 = v41;
    if (__p != v41)
    {
      while (1)
      {
        v26 = *a8;
        v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v22[-*a8] >> 3);
        if (v27 >= v21)
          goto LABEL_35;
        v28 = a8[2];
        if ((unint64_t)v22 < v28)
        {
          v25 = *(_OWORD *)v23;
          *((_QWORD *)v22 + 2) = v23[2];
          *(_OWORD *)v22 = v25;
          v22 += 24;
        }
        else
        {
          v29 = v27 + 1;
          if (v27 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20E867F44();
          v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - v26) >> 3);
          if (2 * v30 > v29)
            v29 = 2 * v30;
          if (v30 >= 0x555555555555555)
            v31 = 0xAAAAAAAAAAAAAAALL;
          else
            v31 = v29;
          if (v31)
          {
            if (v31 > 0xAAAAAAAAAAAAAAALL)
              sub_20E877A38();
            v32 = (char *)operator new(24 * v31);
          }
          else
          {
            v32 = 0;
          }
          v33 = *(_OWORD *)v23;
          v34 = &v32[24 * v27];
          *((_QWORD *)v34 + 2) = v23[2];
          *(_OWORD *)v34 = v33;
          if (v22 != (char *)v26)
          {
            v35 = &v32[24 * v27];
            do
            {
              v36 = *(_OWORD *)(v22 - 24);
              *((_DWORD *)v35 - 2) = *((_DWORD *)v22 - 2);
              *(_OWORD *)(v35 - 24) = v36;
              v35 -= 24;
              v22 -= 24;
            }
            while (v22 != (char *)v26);
            v37 = (void *)*a8;
            v22 = v34 + 24;
            *a8 = (uint64_t)v35;
            a8[1] = (uint64_t)(v34 + 24);
            a8[2] = (uint64_t)&v32[24 * v31];
            if (!v37)
              goto LABEL_13;
LABEL_32:
            operator delete(v37);
            goto LABEL_13;
          }
          v37 = v22;
          v22 = v34 + 24;
          *a8 = (uint64_t)v34;
          a8[1] = (uint64_t)(v34 + 24);
          a8[2] = (uint64_t)&v32[24 * v31];
          if (v37)
            goto LABEL_32;
        }
LABEL_13:
        a8[1] = (uint64_t)v22;
        v23 += 5;
        if (v23 == v24)
        {
          v26 = *a8;
          goto LABEL_35;
        }
      }
    }
    v26 = (uint64_t)v22;
LABEL_35:
    v38 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v22[-v26] >> 3));
    if (v22 == (char *)v26)
      v39 = 0;
    else
      v39 = v38;
    sub_20F2803D4(v26, (__int128 *)v22, (uint64_t)&v43, v39, 1);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
  }
}

void sub_20F2648DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F264904(_QWORD *a1, uint64_t a2, float64x2_t *a3, __int128 *a4, double a5, double a6, double a7, float64x2_t a8)
{
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  int v20;
  size_t v21;
  char v23;
  __int128 __s2;
  char v25;
  char v26;

  v11 = a1[24];
  v12 = **(_QWORD ***)(a1[2] + 424);
  __s2 = *a4;
  v25 = 1;
  v13 = sub_20FCC4918(*(_QWORD **)(v11 + 8), a2, v12, a3, a1 + 4, &__s2, *(double *)&__s2, a6, a7, a8);
  if ((v13 & 1) != 0)
  {
    v14 = a1[42];
    if (v14)
    {
      v15 = a1[2];
      v16 = *(_QWORD *)(v15 + 424);
      if (v16)
      {
        if (*(_QWORD *)(*(_QWORD *)v16 + 64))
        {
          v26 = 4;
          strcpy((char *)&__s2, "sem_");
          v17 = *(unsigned __int8 *)(a2 + 23);
          if ((v17 & 0x80u) == 0)
            v18 = *(unsigned __int8 *)(a2 + 23);
          else
            v18 = *(_QWORD *)(a2 + 8);
          if (v18 <= 3)
            goto LABEL_9;
          if ((v17 & 0x80) != 0)
          {
            if (*(_QWORD *)(a2 + 8) >= 4uLL)
              v21 = 4;
            else
              v21 = *(_QWORD *)(a2 + 8);
            v20 = memcmp(*(const void **)a2, &__s2, v21);
            if (v21 != 4)
              goto LABEL_9;
          }
          else
          {
            if (v17 >= 4)
              v19 = 4;
            else
              v19 = *(unsigned __int8 *)(a2 + 23);
            v20 = memcmp((const void *)a2, &__s2, v19);
            if (v19 != 4)
            {
LABEL_9:
              *(_QWORD *)&__s2 = *(_QWORD *)(v15 + 160);
              v23 = 0;
              (*(void (**)(uint64_t, __int128 *, char *))(*(_QWORD *)v14 + 48))(v14, &__s2, &v23);
              return v13;
            }
          }
          if (!v20)
            return v13;
          goto LABEL_9;
        }
      }
    }
  }
  return v13;
}

uint64_t sub_20F264A54(_QWORD *a1, uint64_t a2, uint64_t *a3, float64x2_t *a4, __int128 *a5)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  sub_20FCC6708(*(_QWORD **)(a1[24] + 8), a2, **(_QWORD **)(a1[2] + 424), a3, a4, a5);
  result = a1[42];
  if (result)
  {
    v7 = a1[2];
    v8 = *(_QWORD *)(v7 + 424);
    if (v8)
    {
      if (*(_QWORD *)(*(_QWORD *)v8 + 64))
      {
        v9 = *(_QWORD *)(v7 + 160);
        v10 = 0;
        return (*(uint64_t (**)(uint64_t, uint64_t *, char *))(*(_QWORD *)result + 48))(result, &v9, &v10);
      }
    }
  }
  return result;
}

void sub_20F264ADC(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  std::string __p;

  v4 = a1[24];
  sub_20FCCBC60((unint64_t *)v4, &__p);
  v5 = sub_20EB07858(*(_QWORD **)(v4 + 8), (uint64_t)&__p);
  v6 = v5;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!v5)
      goto LABEL_5;
LABEL_12:
    a2->__r_.__value_.__s.__data_[0] = 0;
    a2[1].__r_.__value_.__s.__data_[0] = 0;
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (v6)
    goto LABEL_12;
LABEL_5:
  if (!*(_QWORD *)(**(_QWORD **)(a1[2] + 424) + 64) || !sub_20F2505E4(a1))
    goto LABEL_12;
  sub_20F3B3BD8(a1[24], **(_QWORD ***)(a1[2] + 424), a1 + 4, *(_DWORD *)(*a1 + 972), *(_BYTE *)(*a1 + 2499) == 0, &__p);
  v7 = a1[42];
  if (v7)
  {
    v8 = a1[2];
    v9 = *(_QWORD *)(v8 + 424);
    if (v9)
    {
      if (*(_QWORD *)(*(_QWORD *)v9 + 64))
      {
        v10 = *(_QWORD *)(v8 + 160);
        v11 = 0;
        (*(void (**)(uint64_t, uint64_t *, char *))(*(_QWORD *)v7 + 48))(v7, &v10, &v11);
      }
    }
  }
  *a2 = __p;
  a2[1].__r_.__value_.__s.__data_[0] = 1;
}

void sub_20F264C0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F264C2C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  int v18;
  char v19;
  char __s2[23];
  char v21;

  v2 = (_QWORD *)a2;
  result = (uint64_t)sub_20EB07858(*(_QWORD **)(a1[24] + 8), a2);
  if (result)
  {
    _Q1 = *(_OWORD *)(result + 160);
    _D3 = *(_QWORD *)(result + 168);
    __asm { FMLA            D2, D3, V1.D[1] }
    if (*(double *)(*a1 + 2320) * *(double *)(*a1 + 2320) > _D2
                                                               + *(double *)(result + 176) * *(double *)(result + 176))
    {
      return 0;
    }
    else
    {
      sub_20FCC8710(*(_QWORD **)(a1[24] + 8), (uint64_t)v2);
      v12 = a1[42];
      if (!v12)
        return 1;
      v13 = a1[2];
      v14 = *(_QWORD *)(v13 + 424);
      if (!v14 || !*(_QWORD *)(*(_QWORD *)v14 + 64))
        return 1;
      v21 = 4;
      strcpy(__s2, "sem_");
      v15 = *((unsigned __int8 *)v2 + 23);
      v16 = (v15 & 0x80u) == 0 ? *((unsigned __int8 *)v2 + 23) : v2[1];
      if (v16 <= 3
        || ((v15 & 0x80) != 0
          ? (v2[1] >= 4uLL ? (v17 = 4) : (v17 = v2[1]), v2 = (_QWORD *)*v2)
          : (_QWORD *)(v15 >= 4 ? (v17 = 4) : (v17 = *((unsigned __int8 *)v2 + 23))),
            (v18 = memcmp(v2, __s2, v17), v17 != 4) || v18))
      {
        *(_QWORD *)__s2 = *(_QWORD *)(v13 + 160);
        v19 = 0;
        (*(void (**)(uint64_t, char *, char *))(*(_QWORD *)v12 + 48))(v12, __s2, &v19);
        return 1;
      }
      else
      {
        return 1;
      }
    }
  }
  return result;
}

void sub_20F264D94(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v4;
  void **v5;
  void **v6;
  void **v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  __int128 *v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  v4 = *(_QWORD **)(*(_QWORD *)(a1 + 192) + 8);
  v5 = (void **)(v4 + 11);
  v6 = (void **)v4[11];
  v7 = (void **)v4[12];
  if (v6 == v7)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    *v5 = 0;
    v4[12] = 0;
    v4[13] = 0;
    sub_20E8D13D8(v5, 0, 0, 0);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    if (0xAAAAAAAAAAAAAAABLL * (v7 - v6) >= 0xBE82FA0BE82FA1)
      sub_20E867F44();
    v8 = operator new(0x55555555555555C8 * (v7 - v6));
    *a2 = (uint64_t)v8;
    a2[1] = (uint64_t)v8;
    a2[2] = (uint64_t)v8 + 0x55555555555555C8 * (v7 - v6);
    v9 = (uint64_t)v6;
    do
    {
      v11 = sub_20EB07858(*(_QWORD **)(*(_QWORD *)(a1 + 192) + 8), v9);
      v12 = v11;
      if (v11)
      {
        v13 = (uint64_t)(v11 + 2);
        v14 = (__int128 *)(v11 + 5);
        v15 = a2[1];
        if (v15 >= a2[2])
        {
          v10 = sub_20F292340(a2, v13, (uint64_t)(v11 + 5));
        }
        else
        {
          sub_20FCCCC58(a2[1], v13);
          v16 = *v14;
          *(_QWORD *)(v15 + 48) = v12[7];
          *(_OWORD *)(v15 + 32) = v16;
          v17 = *((_OWORD *)v12 + 10);
          v18 = *((_OWORD *)v12 + 11);
          v19 = *((_OWORD *)v12 + 9);
          *(_OWORD *)(v15 + 120) = *((_OWORD *)v12 + 8);
          *(_OWORD *)(v15 + 168) = v18;
          *(_OWORD *)(v15 + 152) = v17;
          *(_OWORD *)(v15 + 136) = v19;
          v20 = *((_OWORD *)v12 + 4);
          v21 = *((_OWORD *)v12 + 5);
          v22 = *((_OWORD *)v12 + 6);
          *(_OWORD *)(v15 + 104) = *((_OWORD *)v12 + 7);
          *(_OWORD *)(v15 + 88) = v22;
          *(_OWORD *)(v15 + 72) = v21;
          *(_OWORD *)(v15 + 56) = v20;
          v23 = *((_OWORD *)v12 + 18);
          v24 = *((_OWORD *)v12 + 19);
          v25 = *((_OWORD *)v12 + 17);
          *(_OWORD *)(v15 + 248) = *((_OWORD *)v12 + 16);
          *(_OWORD *)(v15 + 296) = v24;
          *(_OWORD *)(v15 + 280) = v23;
          *(_OWORD *)(v15 + 264) = v25;
          v26 = *((_OWORD *)v12 + 12);
          v27 = *((_OWORD *)v12 + 13);
          v28 = *((_OWORD *)v12 + 14);
          *(_OWORD *)(v15 + 232) = *((_OWORD *)v12 + 15);
          *(_OWORD *)(v15 + 216) = v28;
          *(_OWORD *)(v15 + 200) = v27;
          *(_OWORD *)(v15 + 184) = v26;
          v29 = *((_OWORD *)v12 + 20);
          *(_OWORD *)(v15 + 321) = *(_OWORD *)((char *)v12 + 329);
          *(_OWORD *)(v15 + 312) = v29;
          v10 = v15 + 344;
          a2[1] = v15 + 344;
        }
        a2[1] = v10;
      }
      v9 += 24;
    }
    while ((void **)v9 != v7);
    if (v6)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      operator delete(v6);
    }
  }
}

void sub_20F264FBC(_Unwind_Exception *exception_object)
{
  void **v1;
  void **v2;

  if (v1)
  {
    do
    {
      if (*((char *)v2 - 1) < 0)
        operator delete(*(v2 - 3));
      v2 -= 3;
    }
    while (v2 != v1);
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_20F264FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_20EB9B16C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20F26502C(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v4;
  void **v5;
  void **v6;
  void **v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  __int128 *v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  v4 = *(_QWORD **)(*(_QWORD *)(a1 + 192) + 8);
  v5 = (void **)(v4 + 14);
  v6 = (void **)v4[14];
  v7 = (void **)v4[15];
  if (v6 == v7)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    *v5 = 0;
    v4[15] = 0;
    v4[16] = 0;
    sub_20E8D13D8(v5, 0, 0, 0);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    if (0xAAAAAAAAAAAAAAABLL * (v7 - v6) >= 0xBE82FA0BE82FA1)
      sub_20E867F44();
    v8 = operator new(0x55555555555555C8 * (v7 - v6));
    *a2 = (uint64_t)v8;
    a2[1] = (uint64_t)v8;
    a2[2] = (uint64_t)v8 + 0x55555555555555C8 * (v7 - v6);
    v9 = (uint64_t)v6;
    do
    {
      v11 = sub_20EB07858(*(_QWORD **)(*(_QWORD *)(a1 + 192) + 8), v9);
      v12 = v11;
      if (v11)
      {
        v13 = (uint64_t)(v11 + 2);
        v14 = (__int128 *)(v11 + 5);
        v15 = a2[1];
        if (v15 >= a2[2])
        {
          v10 = sub_20F292340(a2, v13, (uint64_t)(v11 + 5));
        }
        else
        {
          sub_20FCCCC58(a2[1], v13);
          v16 = *v14;
          *(_QWORD *)(v15 + 48) = v12[7];
          *(_OWORD *)(v15 + 32) = v16;
          v17 = *((_OWORD *)v12 + 10);
          v18 = *((_OWORD *)v12 + 11);
          v19 = *((_OWORD *)v12 + 9);
          *(_OWORD *)(v15 + 120) = *((_OWORD *)v12 + 8);
          *(_OWORD *)(v15 + 168) = v18;
          *(_OWORD *)(v15 + 152) = v17;
          *(_OWORD *)(v15 + 136) = v19;
          v20 = *((_OWORD *)v12 + 4);
          v21 = *((_OWORD *)v12 + 5);
          v22 = *((_OWORD *)v12 + 6);
          *(_OWORD *)(v15 + 104) = *((_OWORD *)v12 + 7);
          *(_OWORD *)(v15 + 88) = v22;
          *(_OWORD *)(v15 + 72) = v21;
          *(_OWORD *)(v15 + 56) = v20;
          v23 = *((_OWORD *)v12 + 18);
          v24 = *((_OWORD *)v12 + 19);
          v25 = *((_OWORD *)v12 + 17);
          *(_OWORD *)(v15 + 248) = *((_OWORD *)v12 + 16);
          *(_OWORD *)(v15 + 296) = v24;
          *(_OWORD *)(v15 + 280) = v23;
          *(_OWORD *)(v15 + 264) = v25;
          v26 = *((_OWORD *)v12 + 12);
          v27 = *((_OWORD *)v12 + 13);
          v28 = *((_OWORD *)v12 + 14);
          *(_OWORD *)(v15 + 232) = *((_OWORD *)v12 + 15);
          *(_OWORD *)(v15 + 216) = v28;
          *(_OWORD *)(v15 + 200) = v27;
          *(_OWORD *)(v15 + 184) = v26;
          v29 = *((_OWORD *)v12 + 20);
          *(_OWORD *)(v15 + 321) = *(_OWORD *)((char *)v12 + 329);
          *(_OWORD *)(v15 + 312) = v29;
          v10 = v15 + 344;
          a2[1] = v15 + 344;
        }
        a2[1] = v10;
      }
      v9 += 24;
    }
    while ((void **)v9 != v7);
    if (v6)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      operator delete(v6);
    }
  }
}

void sub_20F265254(_Unwind_Exception *exception_object)
{
  void **v1;
  void **v2;

  if (v1)
  {
    do
    {
      if (*((char *)v2 - 1) < 0)
        operator delete(*(v2 - 3));
      v2 -= 3;
    }
    while (v2 != v1);
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_20F265290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_20EB9B16C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20F2652C4(uint64_t a1@<X0>, void **a2@<X8>)
{
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  void **v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  __int128 v18;
  char *v19;
  void **i;
  void **__p;

  v3 = *(_QWORD **)(*(_QWORD *)(a1 + 192) + 8);
  v4 = (void **)(v3 + 17);
  v5 = v3[17];
  v6 = (void **)v3[18];
  if ((void **)v5 == v6)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    __p = (void **)v3[17];
    *v4 = 0;
    v3[18] = 0;
    v3[19] = 0;
    sub_20E8D13D8(v4, 0, 0, 0);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    if ((0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - v5) >> 3)) >> 59)
      sub_20E867F44();
    v7 = (char *)operator new(0x5555555555555560 * (((uint64_t)v6 - v5) >> 3));
    *a2 = v7;
    a2[1] = v7;
    a2[2] = &v7[0x5555555555555560 * (((uint64_t)v6 - v5) >> 3)];
    do
    {
      v8 = (unint64_t)a2[2];
      if ((unint64_t)v7 < v8)
      {
        sub_20FCCCC58((uint64_t)v7, v5);
        v7 += 32;
        a2[1] = v7;
      }
      else
      {
        v9 = (v7 - (_BYTE *)*a2) >> 5;
        if ((unint64_t)(v9 + 1) >> 59)
          sub_20E867F44();
        v10 = v8 - (_QWORD)*a2;
        v11 = v10 >> 4;
        if (v10 >> 4 <= (unint64_t)(v9 + 1))
          v11 = v9 + 1;
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
          v12 = 0x7FFFFFFFFFFFFFFLL;
        else
          v12 = v11;
        if (v12)
        {
          if (v12 >> 59)
            sub_20E877A38();
          v13 = (char *)operator new(32 * v12);
        }
        else
        {
          v13 = 0;
        }
        v14 = sub_20FCCCC58((uint64_t)&v13[32 * v9], v5);
        v16 = (char *)*a2;
        v15 = (char *)a2[1];
        v17 = v14;
        if (v15 != *a2)
        {
          do
          {
            v18 = *((_OWORD *)v15 - 2);
            *(_OWORD *)(v17 - 23) = *(_OWORD *)(v15 - 23);
            *(_OWORD *)(v17 - 32) = v18;
            v17 -= 32;
            v15 -= 32;
          }
          while (v15 != v16);
          v15 = v16;
        }
        v19 = &v13[32 * v12];
        v7 = (char *)(v14 + 32);
        *a2 = (void *)v17;
        a2[1] = (void *)(v14 + 32);
        a2[2] = v19;
        if (v15)
          operator delete(v15);
      }
      a2[1] = v7;
      v5 += 24;
    }
    while ((void **)v5 != v6);
    if (__p)
    {
      for (i = v6; i != __p; i -= 3)
      {
        if (*((char *)i - 1) < 0)
          operator delete(*(i - 3));
      }
      operator delete(__p);
    }
  }
}

void sub_20F2654F4(_Unwind_Exception *exception_object)
{
  void **v1;
  void **v2;

  if (v1)
  {
    do
    {
      if (*((char *)v2 - 1) < 0)
        operator delete(*(v2 - 3));
      v2 -= 3;
    }
    while (v2 != v1);
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_20F265530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v11;
    operator delete(v11);
    sub_20EB9B16C((uint64_t)&a9);
    _Unwind_Resume(a1);
  }
  sub_20EB9B16C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_20F2655AC(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t *a9, char a10, unint64_t *a11, char a12, char **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  _QWORD *v25;
  uint64_t **v26;
  uint64_t **v27;
  unint64_t v28;
  unsigned int v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t **v32;
  uint64_t *v33;
  unsigned int v34;
  uint64_t *v36;
  uint64_t **v37;
  uint64_t *v38;
  uint64_t *v39;
  float64x2_t v41;
  float64x2_t **v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  unsigned int v49;
  unint64_t v50;
  unsigned int v51;
  uint64_t *v52;
  unsigned int v53;
  BOOL v54;
  unint64_t v55;
  unsigned int v56;
  unint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  unsigned int v63;
  unint64_t v64;
  uint64_t *v65;
  unsigned int v66;
  unsigned int v67;
  BOOL v68;
  unint64_t v69;
  unsigned int v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t *v75;
  uint64_t v76;
  BOOL v77;
  char v78;
  _BOOL4 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  void *v86;
  void *v87;
  void *v88;
  BOOL v89;
  char v90;
  float64x2_t v91;
  float64x2_t v93;
  double v94;
  float64x2_t *v96;
  double v97;
  double v99;
  double v101;
  float64x2_t *v103;
  float64x2_t v105;
  float64x2_t *v109;
  double v110;
  float64x2_t v111;
  int64x2_t v112;
  float64x2_t v114;
  int64x2_t v115;
  double v117;
  float64x2_t v119;
  float64x2_t v121;
  int8x16_t v122;
  int8x16_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  unint64_t v129;
  uint64_t v130;
  _BOOL8 v131;
  _QWORD *v132;
  uint64_t v133;
  void *v134;
  void *v135;
  void *v136;
  _QWORD *v137;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int64x2_t v143;
  _BYTE v144[40];
  int8x16_t v145;
  int8x16_t v146;
  uint64_t v147;
  _OWORD v148[3];
  _QWORD *v149;
  _QWORD *v150;
  char v151;
  _QWORD v152[3];

  v25 = *(_QWORD **)(a1[2] + 424);
  v27 = (uint64_t **)v25[5];
  v26 = (uint64_t **)v25[6];
  if (v26 != v27)
  {
    v28 = ((char *)v26 - (char *)v27) >> 4;
    v29 = *(_DWORD *)(a2 + 16);
    v30 = *(_QWORD *)a2;
    while (1)
    {
      v31 = v28 >> 1;
      v32 = &v27[2 * (v28 >> 1)];
      v33 = *v32;
      v34 = *((_DWORD *)*v32 + 4);
      _CF = v34 >= v29;
      if (v34 != v29)
        goto LABEL_9;
      if (*v33 >= v30)
        break;
LABEL_3:
      v27 = v32 + 2;
      v31 = v28 + ~v31;
LABEL_4:
      v28 = v31;
      if (!v31)
        goto LABEL_12;
    }
    if (*v33 != v30)
      goto LABEL_4;
    _CF = *((_DWORD *)v33 + 2) >= *(_DWORD *)(a2 + 8);
LABEL_9:
    if (_CF)
      goto LABEL_4;
    goto LABEL_3;
  }
LABEL_12:
  if (v27 == v26)
  {
    v37 = (uint64_t **)v25[6];
  }
  else
  {
    v36 = *v27;
    v37 = (uint64_t **)v25[6];
    if (*((_DWORD *)*v27 + 4) == *(_DWORD *)(a2 + 16))
    {
      v37 = (uint64_t **)v25[6];
      if (*v36 == *(_QWORD *)a2)
      {
        if (*((_DWORD *)v36 + 2) == *(_DWORD *)(a2 + 8))
          v37 = v27;
        else
          v37 = (uint64_t **)v25[6];
      }
    }
    if (v26 != v37)
      goto LABEL_23;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MapDataController.cpp", 1943, (uint64_t)"vio_frame_iter != this->const_viodatabase()->end()", 50, (uint64_t)"Failed to find vio frame", 24, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_117;
  }
  v25 = *(_QWORD **)(a1[2] + 424);
LABEL_23:
  v140 = a7;
  v141 = a6;
  v38 = *v37;
  v39 = sub_20E9DF85C((_QWORD *)(*v25 + 1784), *v37);
  if (v39)
    v42 = (float64x2_t **)(v39 + 5);
  else
    v42 = 0;
  if (!v39
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MapDataController.cpp", 1948, (uint64_t)"vio_pose_ref", 12, (uint64_t)"vio_pose_ref does not exist!", 28, (void (*)(void **))sub_21023DDB0))
  {
LABEL_117:
    abort();
  }
  v43 = a1[23];
  if (!*(_BYTE *)(v43 + 225)
    || (v44 = *(_QWORD *)(v43 + 1072)) == 0
    || (*(_QWORD *)(v44 + 8) ? (_ZF = *(_BYTE *)(a4 + 4) == 0) : (_ZF = 1), _ZF || *(_DWORD *)a4 != 2))
  {
    v59 = a1[2];
    v62 = *(uint64_t **)(v59 + 240);
    v60 = (uint64_t *)(v59 + 240);
    v61 = v62;
    if (!v62)
      goto LABEL_69;
    v63 = *(_DWORD *)(a2 + 16);
    v64 = *(_QWORD *)a2;
    v65 = v60;
    v66 = *(_DWORD *)(a2 + 8);
    while (1)
    {
      v67 = *((_DWORD *)v61 + 12);
      v68 = v67 >= v63;
      if (v67 != v63)
        goto LABEL_58;
      v69 = v61[4];
      if (v69 < v64)
      {
LABEL_53:
        v61 = (uint64_t *)v61[1];
        if (!v61)
          goto LABEL_61;
      }
      else
      {
        if (v69 != v64)
          goto LABEL_60;
        v68 = *((_DWORD *)v61 + 10) >= v66;
LABEL_58:
        if (!v68)
          goto LABEL_53;
LABEL_60:
        v65 = v61;
        v61 = (uint64_t *)*v61;
        if (!v61)
        {
LABEL_61:
          if (v65 != v60)
          {
            v70 = *((_DWORD *)v65 + 12);
            if (v63 == v70)
            {
              v71 = v65[4];
              if (v64 >= v71 && (v64 != v71 || v66 >= *((_DWORD *)v65 + 10)))
              {
LABEL_66:
                v58 = v65 + 7;
LABEL_67:
                v72 = (unint64_t)v58 & 0xFFFFFFFFFFFFFF00;
                v73 = 1;
                goto LABEL_72;
              }
            }
            else if (v63 >= v70)
            {
              goto LABEL_66;
            }
          }
LABEL_69:
          v74 = a1 + 13;
          goto LABEL_70;
        }
      }
    }
  }
  v46 = a1[2];
  v47 = *(uint64_t **)(v46 + 304);
  if (!v47)
    goto LABEL_116;
  v48 = (uint64_t *)(v46 + 304);
  v49 = *(_DWORD *)(a2 + 16);
  v50 = *(_QWORD *)a2;
  v51 = *(_DWORD *)(a2 + 8);
  v52 = v48;
  do
  {
    while (1)
    {
      v53 = *((_DWORD *)v47 + 12);
      v54 = v53 >= v49;
      if (v53 != v49)
        goto LABEL_42;
      v55 = v47[4];
      if (v55 >= v50)
        break;
LABEL_37:
      v47 = (uint64_t *)v47[1];
      if (!v47)
        goto LABEL_45;
    }
    if (v55 != v50)
      goto LABEL_44;
    v54 = *((_DWORD *)v47 + 10) >= v51;
LABEL_42:
    if (!v54)
      goto LABEL_37;
LABEL_44:
    v52 = v47;
    v47 = (uint64_t *)*v47;
  }
  while (v47);
LABEL_45:
  if (v52 != v48)
  {
    v56 = *((_DWORD *)v52 + 12);
    if (v49 == v56)
    {
      v57 = v52[4];
      if (v50 >= v57 && (v50 != v57 || v51 >= *((_DWORD *)v52 + 10)))
      {
LABEL_50:
        v58 = v52 + 7;
        goto LABEL_67;
      }
    }
    else if (v49 >= v56)
    {
      goto LABEL_50;
    }
  }
LABEL_116:
  v74 = a1 + 18;
LABEL_70:
  v75 = sub_20E9DF85C(v74, (uint64_t *)a2);
  LOBYTE(v58) = (_BYTE)v75 + 40;
  v72 = (unint64_t)(v75 + 5) & 0xFFFFFFFFFFFFFF00;
  v73 = 1;
  if (!v75)
  {
    LOBYTE(v58) = 0;
    v72 = 0;
    v73 = 0;
  }
LABEL_72:
  v152[0] = v72 | v58;
  v152[1] = v73;
  v76 = *a1;
  if (*(_BYTE *)(*a1 + 1304))
    v77 = a5 == 0;
  else
    v77 = 0;
  if (v77)
  {
    v80 = a1[2];
    v81 = a3[2];
    v143.i64[0] = a2;
    v143.i64[1] = v80;
    *(_QWORD *)v144 = a1 + 4;
    *(_QWORD *)&v144[8] = v81;
    *(_QWORD *)&v144[16] = a3 + 4;
    *(_QWORD *)&v144[24] = v76 + 1312;
    v145.i64[0] = 0;
    v82 = operator new();
    sub_20F403984(v82, (__int128 *)(v76 + 1408));
    *(_QWORD *)&v144[32] = v82;
    v83 = operator new();
    sub_20F40458C(v83, (__int128 *)(v76 + 1408));
    v84 = (_QWORD *)v145.i64[0];
    v145.i64[0] = v83;
    if (v84)
    {
      v85 = v84[23];
      v84[23] = 0;
      if (v85)
      {
        v86 = *(void **)(v85 + 32);
        if (v86)
        {
          *(_QWORD *)(v85 + 40) = v86;
          operator delete(v86);
        }
        MEMORY[0x212BC6398](v85, 0x1010C409BE32CFALL);
      }
      v87 = (void *)v84[9];
      if (v87)
      {
        v84[10] = v87;
        operator delete(v87);
      }
      v88 = (void *)v84[6];
      if (v88)
      {
        v84[7] = v88;
        operator delete(v88);
      }
      MEMORY[0x212BC6398](v84, 0x10B0C40D335D76ALL);
      v83 = v145.i64[0];
    }
    v148[0] = v143;
    v148[1] = *(_OWORD *)v144;
    _Q0.i64[1] = *(_QWORD *)&v144[24];
    v148[2] = *(_OWORD *)&v144[16];
    v149 = *(_QWORD **)&v144[32];
    v150 = (_QWORD *)v83;
    v151 = 1;
    v78 = a10;
    if (!a12)
      goto LABEL_89;
LABEL_77:
    v79 = v38[77] != v38[78];
  }
  else
  {
    LOBYTE(v148[0]) = 0;
    v151 = 0;
    v78 = a10;
    if (a12)
      goto LABEL_77;
LABEL_89:
    v79 = 0;
  }
  v139 = a4;
  if (*((_BYTE *)v38 + 48))
    v89 = *((_DWORD *)v38 + 11) * *((_DWORD *)v38 + 10) == 0;
  else
    v89 = 1;
  v90 = !v89;
  v91 = **v42;
  _D2 = (*v42)[2].f64[1];
  v93 = *(float64x2_t *)((char *)*v42 + 24);
  v94 = (*v42)[4].f64[0];
  _Q5 = (*v42)[3];
  v96 = v42[4];
  v97 = v96[1].f64[0];
  _Q7 = *v96;
  v99 = v96[2].f64[1];
  _Q17 = *(float64x2_t *)((char *)v96 + 24);
  v101 = v96[4].f64[0];
  _Q19 = v96[3];
  v103 = v42[6];
  v41.f64[0] = v103[1].f64[0];
  _Q21 = *v103;
  v105 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v91, v103->f64[0]), v93, *v103, 1), _Q5, v41.f64[0]);
  __asm { FMLA            D23, D2, V21.D[1] }
  v41.f64[0] = _D23 + v94 * v41.f64[0];
  v109 = v42[2];
  _Q21.f64[0] = v109[1].f64[0];
  *(_QWORD *)&v110 = *(_OWORD *)&vaddq_f64(v41, _Q21);
  v111 = vaddq_f64(v105, *v109);
  v112 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v91, _Q7.f64[0]), v93, _Q7, 1), _Q5, v97);
  __asm { FMLA            D23, D2, V7.D[1] }
  v114.f64[0] = _D23 + v94 * v97;
  v115 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v91, _Q17.f64[0]), v93, _Q17, 1), _Q5, v99);
  __asm { FMLA            D23, D2, V17.D[1] }
  v117 = _D23 + v94 * v99;
  _Q1 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v91, _Q19.f64[0]), v93, _Q19, 1), _Q5, v101);
  __asm { FMLA            D0, D2, V19.D[1] }
  *(double *)_Q0.i64 = *(double *)_Q0.i64 + v94 * v101;
  v119 = (float64x2_t)vzip1q_s64(v112, v115);
  _Q4 = (float64x2_t)vzip2q_s64(v112, v115);
  *(float64_t *)v144 = v114.f64[0];
  v114.f64[1] = v117;
  v121 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v119, v111.f64[0]), _Q4, v111, 1), v114, v110);
  _Q5.f64[0] = v111.f64[1];
  __asm { FMLA            D4, D5, V1.D[1] }
  _Q4.f64[0] = vmlad_n_f64(_Q4.f64[0], *(double *)_Q0.i64, v110);
  v122 = (int8x16_t)vnegq_f64(v121);
  v143 = v112;
  v123 = vextq_s8(v122, _Q1, 8uLL);
  v122.i64[1] = *(_QWORD *)&v119.f64[1];
  *(int8x16_t *)&v144[8] = v122;
  *(int64x2_t *)&v144[24] = vzip2q_s64(v115, vdupq_lane_s64(*(uint64_t *)&v117, 0));
  v145 = v123;
  v146 = vextq_s8(_Q1, _Q0, 8uLL);
  v147 = *(_OWORD *)&vnegq_f64(_Q4);
  if (v78)
  {
    v124 = sub_20F265DDC(a9, (__int128 *)a2, v38 + 72);
    v125 = v124 & 0xFFFFFFFFFFFFFF00;
    v126 = v124 & 0xF8;
    v127 = 1;
    v128 = v38 + 77;
    if (v79)
      goto LABEL_98;
LABEL_100:
    v130 = 0;
    v129 = 0;
  }
  else
  {
    v127 = 0;
    v126 = 0;
    v125 = 0;
    v128 = v38 + 77;
    if (!v79)
      goto LABEL_100;
LABEL_98:
    v129 = sub_20F265DDC(a11, (__int128 *)a2, v128);
    v130 = 1;
  }
  v131 = sub_20F2A562C(a3[23], a3[2], (uint64_t *)(*a3 + 440), (uint64_t)v152, (uint64_t)(v38 + 9), (uint64_t)(v38 + 72), (uint64_t)v128, (uint64_t)(v38 + 82), (uint64_t)v38, (uint64_t)&v143, *(_BYTE *)(*a3 + 1084), v139, 0, a5, (uint64_t)v148, v125 | v126, v127, v129, v130,
           v141,
           v140,
           v90,
           a13,
           a14,
           a15,
           a16,
           a17,
           a18,
           a19);
  if (v151)
  {
    v132 = v150;
    v150 = 0;
    if (v132)
    {
      v133 = v132[23];
      v132[23] = 0;
      if (v133)
      {
        v134 = *(void **)(v133 + 32);
        if (v134)
        {
          *(_QWORD *)(v133 + 40) = v134;
          operator delete(v134);
        }
        MEMORY[0x212BC6398](v133, 0x1010C409BE32CFALL);
      }
      v135 = (void *)v132[9];
      if (v135)
      {
        v132[10] = v135;
        operator delete(v135);
      }
      v136 = (void *)v132[6];
      if (v136)
      {
        v132[7] = v136;
        operator delete(v136);
      }
      MEMORY[0x212BC6398](v132, 0x10B0C40D335D76ALL);
    }
    v137 = v149;
    v149 = 0;
    if (v137)
      sub_20F04BCC8((uint64_t)&v149, v137);
  }
  return v131;
}

void sub_20F265D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,_QWORD *a39)
{
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  MEMORY[0x212BC6398](v41, 0x10B0C40D335D76ALL);
  sub_20F04BD64((_QWORD *)(v39 + 56));
  if (a39)
    sub_20F04BCC8(v40, a39);
  _Unwind_Resume(a1);
}

void sub_20F265DC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20F265F88(v1 - 176);
  _Unwind_Resume(a1);
}

unint64_t sub_20F265DDC(unint64_t *a1, __int128 *a2, _QWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  char *v9;
  char *v10;
  void *v11;
  void *v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int *v16;
  unsigned int *i;
  __int128 v18;
  __int128 v20;
  uint64_t v21;
  void *__p;
  char *v23;
  uint64_t v24;

  v6 = a1[2];
  v7 = a1[3];
  if (v6 == v7)
    goto LABEL_22;
  do
  {
    v21 = *(_QWORD *)(v6 + 16);
    v20 = *(_OWORD *)v6;
    v23 = 0;
    v24 = 0;
    __p = 0;
    sub_20F237650((uint64_t)&__p, *(_QWORD *)(v6 + 24), *(_QWORD *)(v6 + 32), (uint64_t)(*(_QWORD *)(v6 + 32) - *(_QWORD *)(v6 + 24)) >> 6);
    if (*((_DWORD *)a2 + 4) == (_DWORD)v21 && *(_QWORD *)a2 == (_QWORD)v20)
    {
      v8 = *((_DWORD *)a2 + 2) == DWORD2(v20);
      v9 = (char *)__p;
      if (!__p)
        goto LABEL_16;
    }
    else
    {
      v8 = 0;
      v9 = (char *)__p;
      if (!__p)
        goto LABEL_16;
    }
    v10 = v23;
    v11 = v9;
    if (v23 != v9)
    {
      do
      {
        v12 = (void *)*((_QWORD *)v10 - 4);
        if (v12)
        {
          *((_QWORD *)v10 - 3) = v12;
          operator delete(v12);
        }
        v13 = (void *)*((_QWORD *)v10 - 7);
        if (v13)
        {
          *((_QWORD *)v10 - 6) = v13;
          operator delete(v13);
        }
        v10 -= 64;
      }
      while (v10 != v9);
      v11 = __p;
    }
    v23 = v9;
    operator delete(v11);
LABEL_16:
    if (v8)
      goto LABEL_19;
    v6 += 48;
  }
  while (v6 != v7);
  v6 = v7;
LABEL_19:
  if (v6 != a1[3])
    return v6 + 24;
  v6 = a1[2];
LABEL_22:
  v15 = v6 + 48 * *a1;
  *a1 = (*a1 + 1) % a1[1];
  v14 = v15 + 24;
  v16 = *(unsigned int **)(v15 + 24);
  for (i = *(unsigned int **)(v15 + 32); v16 != i; v16 += 16)
    sub_20F2925E8(v16, a3);
  v18 = *a2;
  *(_DWORD *)(v15 + 16) = *((_DWORD *)a2 + 4);
  *(_OWORD *)v15 = v18;
  return v14;
}

uint64_t sub_20F265F88(uint64_t a1)
{
  _QWORD *v2;

  if (*(_BYTE *)(a1 + 64))
  {
    sub_20F04BD64((_QWORD *)(a1 + 56));
    v2 = *(_QWORD **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;
    if (v2)
      sub_20F04BCC8(a1 + 48, v2);
  }
  return a1;
}

uint64_t sub_20F265FCC(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4, unint64_t *a5, char a6, unint64_t *a7, char a8, char **a9, double *a10, unsigned __int8 *__dst, _QWORD *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  BOOL v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  size_t v38;
  const char *v39;
  unsigned __int8 v40;
  const char *v41;
  size_t v42;
  const char *v43;
  void **v44;
  uint64_t v45;
  uint64_t v46;
  void **v47;
  const char *v48;
  unint64_t v49;
  NSObject *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  size_t v54;
  std::__shared_weak_count_vtbl *v55;
  std::__shared_weak_count *v56;
  std::__shared_weak_count *v57;
  unint64_t *p_shared_owners;
  unint64_t v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  void *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  void *v88;
  int v89;
  void *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  char v95;
  _QWORD *v96;
  int v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  size_t v101;
  int v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  size_t v107;
  const char *v108;
  unsigned __int8 v109;
  uint64_t v110;
  unsigned __int8 v111;
  const char *v112;
  size_t v113;
  void **v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void **v121;
  uint64_t v122;
  uint64_t v123;
  NSObject *v124;
  unint64_t v125;
  size_t v126;
  std::__shared_weak_count_vtbl *v127;
  std::__shared_weak_count *v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  unint64_t v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  uint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  void *v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  _QWORD *v162;
  uint64_t **v163;
  uint64_t **v164;
  unint64_t v165;
  unsigned int v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t **v169;
  uint64_t *v170;
  unsigned int v171;
  uint64_t *v173;
  uint64_t **v174;
  uint64_t *v175;
  uint64_t *v176;
  int8x16_t v177;
  float64x2_t v179;
  uint64_t v180;
  uint64_t v181;
  float64x2_t v183;
  double v184;
  float64x2_t v185;
  double v186;
  double v189;
  float64x2_t *v191;
  double v192;
  float64x2_t v194;
  float64x2_t *v197;
  double v198;
  float64x2_t v200;
  float64x2_t v203;
  double v205;
  double v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  double v212;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  double v221;
  float64x2_t v222;
  float64x2_t v223;
  double v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v245;
  float64x2_t v246;
  float64x2_t v247;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v255;
  float64x2_t v256;
  int64x2_t v257;
  int64x2_t v258;
  int64x2_t v259;
  int64x2_t v260;
  float64x2_t v262;
  uint64_t result;
  int v264;
  unint64_t v265;
  unint64_t v266;
  uint64_t v267;
  uint64_t v268;
  size_t v269;
  const char *v270;
  unsigned __int8 v271;
  const char *v272;
  size_t v273;
  void **v274;
  unint64_t v275;
  const char *v276;
  uint64_t v277;
  int v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  void **v282;
  uint64_t v283;
  uint64_t v284;
  NSObject *v285;
  size_t v286;
  std::__shared_weak_count_vtbl *v287;
  std::__shared_weak_count *v288;
  std::__shared_weak_count *v289;
  unint64_t *v290;
  unint64_t v291;
  unint64_t v292;
  void *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  std::__shared_weak_count *v298;
  unint64_t *v299;
  unint64_t v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  uint64_t v304;
  std::__shared_weak_count *v305;
  unint64_t *v306;
  unint64_t v307;
  std::__shared_weak_count *v308;
  unint64_t *v309;
  unint64_t v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  std::__shared_weak_count *v314;
  unint64_t *v315;
  unint64_t v316;
  void *v317;
  std::__shared_weak_count *v318;
  unint64_t *v319;
  unint64_t v320;
  unsigned __int8 v321;
  const char *v322;
  size_t v323;
  void **v324;
  unint64_t v325;
  const char *v326;
  uint64_t v327;
  int v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  void **v332;
  uint64_t v333;
  uint64_t v334;
  NSObject *v335;
  size_t v336;
  std::__shared_weak_count_vtbl *v337;
  std::__shared_weak_count *v338;
  std::__shared_weak_count *v339;
  unint64_t *v340;
  unint64_t v341;
  unint64_t v342;
  void *v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  std::__shared_weak_count *v348;
  unint64_t *v349;
  unint64_t v350;
  std::__shared_weak_count *v351;
  unint64_t *v352;
  unint64_t v353;
  uint64_t v354;
  std::__shared_weak_count *v355;
  unint64_t *v356;
  unint64_t v357;
  std::__shared_weak_count *v358;
  unint64_t *v359;
  unint64_t v360;
  std::__shared_weak_count *v361;
  unint64_t *v362;
  unint64_t v363;
  std::__shared_weak_count *v364;
  unint64_t *v365;
  unint64_t v366;
  void *v367;
  unint64_t *v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  int v372;
  uint64_t v373;
  void *v374;
  uint64_t v375;
  int v376;
  int v377;
  unint64_t v378;
  uint64_t *v379;
  _QWORD *v380;
  char v381;
  uint64_t v382;
  unint64_t *v383;
  uint64_t v384;
  char v385;
  uint64_t v386;
  unint64_t *v387;
  uint64_t v388;
  char *category;
  float64x2_t v390;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  float64x2_t v392;
  float64_t v393;
  float64x2_t v394;
  float64_t v395;
  float64x2_t v396;
  uint64_t v397;
  float64x2_t *v398;
  int v399;
  float64x2_t *v400;
  int v401;
  uint64_t v402;
  uint64_t v403;
  void *object[36];
  unsigned __int8 v405;
  uint64_t v406;

  v22 = a2;
  v23 = a1;
  v24 = a15;
  v406 = *MEMORY[0x24BDAC8D0];
  v25 = a16;
  if ((_BYTE)a16)
  {
    v26 = (char *)a1[4];
    v27 = (char *)a1[5];
    if (v27 != v26)
    {
      v28 = (v27 - v26) >> 4;
      v29 = *(_QWORD *)a2;
      do
      {
        v30 = v28 >> 1;
        v31 = (unint64_t *)&v26[16 * (v28 >> 1)];
        if (*v31 < v29 || *v31 == v29 && *(_DWORD *)&v26[16 * v30 + 8] < *(_DWORD *)(a2 + 8))
        {
          v26 = (char *)(v31 + 2);
          v30 = v28 + ~v30;
        }
        v28 = v30;
      }
      while (v30);
    }
    v32 = v26 != v27 && *(_QWORD *)v26 == *(_QWORD *)a2 && *((_DWORD *)v26 + 2) == *(_DWORD *)(a2 + 8);
    *(_BYTE *)(a15 + 1) = v32;
  }
  sub_20F24E118(&v402);
  v381 = a8;
  v383 = a7;
  v385 = a6;
  v387 = a5;
  if (**(int **)(v402 + 56) <= 2)
  {
    v34 = *(unsigned __int8 *)(v402 + 72);
    v35 = sub_20E8C31DC(v402, "OSLogSurrogateAppender", 1, 0);
    v36 = v35;
    if (v34 || v35 != 0)
    {
      v376 = v34;
      *(_QWORD *)&v390.f64[0] = &v402;
      *(std::chrono::steady_clock::time_point *)&v390.f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
      rep = std::chrono::system_clock::now().__d_.__rep_;
      LODWORD(v392.f64[0]) = 2;
      *(_QWORD *)&v392.f64[1] = "unknown file";
      LODWORD(v393) = 2015;
      v394.f64[1] = 0.0;
      v395 = 0.0;
      *(_QWORD *)&v394.f64[0] = "unknown function";
      v370 = v402;
      if (*(char *)(v402 + 39) < 0)
      {
        v39 = *(const char **)(v402 + 16);
        v38 = *(_QWORD *)(v402 + 24);
      }
      else
      {
        v38 = *(unsigned __int8 *)(v402 + 39);
        v39 = (const char *)(v402 + 16);
      }
      v378 = v36;
      v379 = a3;
      v369 = v402 + 16;
      v371 = a4;
      v372 = *(_DWORD *)(v22 + 8);
      v374 = *(void **)(a3[2] + 160);
      v40 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v40 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)object);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
        if (LOBYTE(object[3]) && SHIBYTE(object[2]) < 0)
          operator delete(object[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v41 = byte_254A4A4F8;
      else
        v41 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v42 = byte_254A4A4F8[23];
      else
        v42 = *(_QWORD *)&byte_254A4A4F8[8];
      v43 = v39;
      object[0] = os_log_create(v41, v39);
      v44 = &object[1];
      if (v42 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v42 >= 0x17)
      {
        v45 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v42 | 7) != 0x17)
          v45 = v42 | 7;
        v46 = v45 + 1;
        v44 = (void **)operator new(v45 + 1);
        object[2] = (void *)v42;
        object[3] = (void *)(v46 | 0x8000000000000000);
        object[1] = v44;
        v24 = a15;
        v25 = a16;
      }
      else
      {
        HIBYTE(object[3]) = v42;
        if (!v42)
        {
LABEL_38:
          *((_BYTE *)v44 + v42) = 0;
          LOBYTE(object[4]) = 1;
          v47 = &object[5];
          if (v38 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          v48 = v43;
          if (v38 >= 0x17)
          {
            v52 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v38 | 7) != 0x17)
              v52 = v38 | 7;
            v53 = v52 + 1;
            v49 = v378;
            v47 = (void **)operator new(v52 + 1);
            object[6] = (void *)v38;
            object[7] = (void *)(v53 | 0x8000000000000000);
            object[5] = v47;
          }
          else
          {
            HIBYTE(object[7]) = v38;
            v49 = v378;
            if (!v38)
            {
              LOBYTE(object[5]) = 0;
              LOBYTE(object[8]) = 1;
              v50 = object[0];
              if ((SHIBYTE(object[7]) & 0x80000000) == 0)
                goto LABEL_42;
              goto LABEL_48;
            }
          }
          memmove(v47, v48, v38);
          *((_BYTE *)v47 + v38) = 0;
          LOBYTE(object[8]) = 1;
          v50 = object[0];
          if ((SHIBYTE(object[7]) & 0x80000000) == 0)
          {
LABEL_42:
            v51 = v376;
            if (!LOBYTE(object[4]))
              goto LABEL_51;
            goto LABEL_49;
          }
LABEL_48:
          operator delete(object[5]);
          v51 = v376;
          if (!LOBYTE(object[4]))
          {
LABEL_51:
            if (object[0])
              os_release(object[0]);
            if (v49 && *(_QWORD *)(v49 + 24))
            {
              v54 = _os_log_pack_size();
              v55 = (std::__shared_weak_count_vtbl *)operator new(v54, (std::align_val_t)8uLL);
              v56 = (std::__shared_weak_count *)operator new();
              v57 = v56;
              v56->__shared_owners_ = 0;
              p_shared_owners = (unint64_t *)&v56->__shared_owners_;
              v56->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v56->__shared_weak_owners_ = 0;
              v56[1].__vftable = v55;
              object[0] = v55;
              object[1] = v55;
              object[2] = v56;
              do
                v59 = __ldxr(p_shared_owners);
              while (__stxr(v59 + 1, p_shared_owners));
              memset(&object[3], 0, 24);
              do
                v60 = __ldaxr(p_shared_owners);
              while (__stlxr(v60 - 1, p_shared_owners));
              if (!v60)
              {
                ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                std::__shared_weak_count::__release_weak(v57);
              }
              v61 = object[0];
              v62 = _os_log_pack_fill();
              v63 = *(void **)v22;
              v64 = *(_DWORD *)(v22 + 16);
              *(_DWORD *)v62 = 134218752;
              *(_QWORD *)(v62 + 4) = v63;
              *(_WORD *)(v62 + 12) = 1024;
              *(_DWORD *)(v62 + 14) = v372;
              *(_WORD *)(v62 + 18) = 1024;
              *(_DWORD *)(v62 + 20) = v64;
              *(_WORD *)(v62 + 24) = 2048;
              *(_QWORD *)(v62 + 26) = v374;
              v65 = operator new();
              v66 = *(unsigned __int8 *)(v370 + 39);
              v67 = v369;
              if ((v66 & 0x80u) != 0)
              {
                v67 = *(_QWORD *)(v370 + 16);
                v66 = *(_QWORD *)(v370 + 24);
              }
              *(_QWORD *)v65 = v61;
              *(_OWORD *)(v65 + 8) = *(_OWORD *)&object[1];
              object[1] = 0;
              object[2] = 0;
              *(_OWORD *)(v65 + 24) = *(_OWORD *)&object[3];
              object[3] = 0;
              object[4] = 0;
              *(_QWORD *)(v65 + 40) = v67;
              *(_QWORD *)(v65 + 48) = v66;
              *(_BYTE *)(v65 + 56) = 2;
              v403 = 0;
              v398 = (float64x2_t *)v65;
              (*(void (**)(_QWORD, float64x2_t **))(**(_QWORD **)(v49 + 24) + 40))(*(_QWORD *)(v49 + 24), &v398);
              v68 = (uint64_t)v398;
              v398 = 0;
              a4 = v371;
              if (v68)
              {
                v69 = *(std::__shared_weak_count **)(v68 + 32);
                if (v69)
                {
                  v70 = (unint64_t *)&v69->__shared_owners_;
                  do
                    v71 = __ldaxr(v70);
                  while (__stlxr(v71 - 1, v70));
                  if (!v71)
                  {
                    ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                    std::__shared_weak_count::__release_weak(v69);
                  }
                }
                v72 = *(std::__shared_weak_count **)(v68 + 16);
                if (v72)
                {
                  v73 = (unint64_t *)&v72->__shared_owners_;
                  do
                    v74 = __ldaxr(v73);
                  while (__stlxr(v74 - 1, v73));
                  if (!v74)
                  {
                    ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
                    std::__shared_weak_count::__release_weak(v72);
                  }
                }
                MEMORY[0x212BC6398](v68, 0x10F0C40B62ED6C6);
                v75 = v403;
                v403 = 0;
                if (v75)
                {
                  v76 = *(std::__shared_weak_count **)(v75 + 32);
                  if (v76)
                  {
                    v77 = (unint64_t *)&v76->__shared_owners_;
                    do
                      v78 = __ldaxr(v77);
                    while (__stlxr(v78 - 1, v77));
                    if (!v78)
                    {
                      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                      std::__shared_weak_count::__release_weak(v76);
                    }
                  }
                  v79 = *(std::__shared_weak_count **)(v75 + 16);
                  if (v79)
                  {
                    v80 = (unint64_t *)&v79->__shared_owners_;
                    do
                      v81 = __ldaxr(v80);
                    while (__stlxr(v81 - 1, v80));
                    if (!v81)
                    {
                      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                      std::__shared_weak_count::__release_weak(v79);
                    }
                  }
                  MEMORY[0x212BC6398](v75, 0x10F0C40B62ED6C6);
                }
              }
              v82 = (std::__shared_weak_count *)object[4];
              if (object[4])
              {
                v83 = (unint64_t *)((char *)object[4] + 8);
                do
                  v84 = __ldaxr(v83);
                while (__stlxr(v84 - 1, v83));
                if (!v84)
                {
                  ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                  std::__shared_weak_count::__release_weak(v82);
                }
              }
              v85 = (std::__shared_weak_count *)object[2];
              if (object[2])
              {
                v86 = (unint64_t *)((char *)object[2] + 8);
                do
                  v87 = __ldaxr(v86);
                while (__stlxr(v87 - 1, v86));
                if (!v87)
                {
                  ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                  std::__shared_weak_count::__release_weak(v85);
                }
              }
            }
            else
            {
              os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG);
              v88 = *(void **)v22;
              v89 = *(_DWORD *)(v22 + 16);
              LODWORD(object[0]) = 134218752;
              *(void **)((char *)object + 4) = v88;
              WORD2(object[1]) = 1024;
              *(_DWORD *)((char *)&object[1] + 6) = v372;
              WORD1(object[2]) = 1024;
              HIDWORD(object[2]) = v89;
              LOWORD(object[3]) = 2048;
              *(void **)((char *)&object[3] + 2) = v374;
              v90 = (void *)_os_log_send_and_compose_impl();
              a4 = v371;
              if (v90)
                free(v90);
            }
            if (v51)
            {
              sub_20E8C003C((uint64_t)&v390, "Attempting Relocalization for image: %llu_(%u,%u) against submap: %llu", *(_QWORD *)v22, *(_DWORD *)(v22 + 8), *(_DWORD *)(v22 + 16), *(_QWORD *)(v379[2] + 160));
              sub_20E863570((uint64_t)&v390);
            }
            sub_20E863570((uint64_t)&v390);
            v91 = *(std::__shared_weak_count **)&v395;
            if (v395 != 0.0)
            {
              v92 = (unint64_t *)(*(_QWORD *)&v395 + 8);
              do
                v93 = __ldaxr(v92);
              while (__stlxr(v93 - 1, v92));
              if (!v93)
              {
                ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                std::__shared_weak_count::__release_weak(v91);
              }
            }
            a3 = v379;
            goto LABEL_106;
          }
LABEL_49:
          if (SHIBYTE(object[3]) < 0)
            operator delete(object[1]);
          goto LABEL_51;
        }
      }
      memmove(v44, v41, v42);
      goto LABEL_38;
    }
  }
LABEL_106:
  v94 = a13;
  v95 = a14;
  v96 = a12;
  if (!sub_20F2655AC(v23, v22, a3, a4, 0, 0, 0, v33, v387, v385, v383, v381, a9, (uint64_t)a10, (uint64_t)a12, a13, a14, v24, a16))
  {
    sub_20F24E118(&v402);
    if (**(int **)(v402 + 56) > 2)
      return 0;
    v102 = *(unsigned __int8 *)(v402 + 72);
    v103 = sub_20E8C31DC(v402, "OSLogSurrogateAppender", 1, 0);
    v104 = v103;
    if (!v102 && !v103)
      return 0;
    *(_QWORD *)&v390.f64[0] = &v402;
    *(std::chrono::steady_clock::time_point *)&v390.f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
    rep = std::chrono::system_clock::now().__d_.__rep_;
    LODWORD(v392.f64[0]) = 2;
    *(_QWORD *)&v392.f64[1] = "unknown file";
    LODWORD(v393) = 2022;
    v394.f64[1] = 0.0;
    v395 = 0.0;
    *(_QWORD *)&v394.f64[0] = "unknown function";
    v105 = **(_QWORD **)&v390.f64[0];
    v106 = **(_QWORD **)&v390.f64[0] + 16;
    if (*(char *)(**(_QWORD **)&v390.f64[0] + 39) < 0)
    {
      v108 = *(const char **)(v105 + 16);
      v107 = *(_QWORD *)(v105 + 24);
      v271 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v271 & 1) != 0)
        goto LABEL_240;
    }
    else
    {
      v107 = *(unsigned __int8 *)(**(_QWORD **)&v390.f64[0] + 39);
      v108 = (const char *)(**(_QWORD **)&v390.f64[0] + 16);
      v109 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v109 & 1) != 0)
        goto LABEL_240;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
      if (LOBYTE(object[3]) && SHIBYTE(object[2]) < 0)
        operator delete(object[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_240:
    if (byte_254A4A4F8[23] >= 0)
      v272 = byte_254A4A4F8;
    else
      v272 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v273 = byte_254A4A4F8[23];
    else
      v273 = *(_QWORD *)&byte_254A4A4F8[8];
    object[0] = os_log_create(v272, v108);
    v274 = &object[1];
    if (v273 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v273 >= 0x17)
    {
      v275 = v104;
      v276 = v108;
      v277 = v105;
      v278 = v102;
      v279 = v106;
      v280 = (v273 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v273 | 7) != 0x17)
        v280 = v273 | 7;
      v281 = v280 + 1;
      v274 = (void **)operator new(v280 + 1);
      object[2] = (void *)v273;
      object[3] = (void *)(v281 | 0x8000000000000000);
      object[1] = v274;
      v106 = v279;
      v102 = v278;
      v105 = v277;
      v108 = v276;
      v104 = v275;
    }
    else
    {
      HIBYTE(object[3]) = v273;
      if (!v273)
      {
LABEL_254:
        *((_BYTE *)v274 + v273) = 0;
        LOBYTE(object[4]) = 1;
        v282 = &object[5];
        if (v107 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v107 >= 0x17)
        {
          v283 = (v107 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v107 | 7) != 0x17)
            v283 = v107 | 7;
          v284 = v283 + 1;
          v282 = (void **)operator new(v283 + 1);
          object[6] = (void *)v107;
          object[7] = (void *)(v284 | 0x8000000000000000);
          object[5] = v282;
        }
        else
        {
          HIBYTE(object[7]) = v107;
          if (!v107)
            goto LABEL_262;
        }
        memmove(v282, v108, v107);
LABEL_262:
        *((_BYTE *)v282 + v107) = 0;
        LOBYTE(object[8]) = 1;
        v285 = object[0];
        if (SHIBYTE(object[7]) < 0)
          operator delete(object[5]);
        if (LOBYTE(object[4]) && SHIBYTE(object[3]) < 0)
          operator delete(object[1]);
        if (object[0])
          os_release(object[0]);
        if (v104 && *(_QWORD *)(v104 + 24))
        {
          v286 = _os_log_pack_size();
          v287 = (std::__shared_weak_count_vtbl *)operator new(v286, (std::align_val_t)8uLL);
          v288 = (std::__shared_weak_count *)operator new();
          v289 = v288;
          v288->__shared_owners_ = 0;
          v290 = (unint64_t *)&v288->__shared_owners_;
          v288->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v288->__shared_weak_owners_ = 0;
          v288[1].__vftable = v287;
          object[0] = v287;
          object[1] = v287;
          object[2] = v288;
          do
            v291 = __ldxr(v290);
          while (__stxr(v291 + 1, v290));
          memset(&object[3], 0, 24);
          do
            v292 = __ldaxr(v290);
          while (__stlxr(v292 - 1, v290));
          if (!v292)
          {
            ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
            std::__shared_weak_count::__release_weak(v289);
          }
          v293 = object[0];
          *(_WORD *)_os_log_pack_fill() = 0;
          v294 = operator new();
          v295 = *(unsigned __int8 *)(v105 + 39);
          if ((v295 & 0x80u) == 0)
            v296 = v106;
          else
            v296 = *(_QWORD *)(v105 + 16);
          if ((v295 & 0x80u) != 0)
            v295 = *(_QWORD *)(v105 + 24);
          *(_QWORD *)v294 = v293;
          *(_OWORD *)(v294 + 8) = *(_OWORD *)&object[1];
          object[1] = 0;
          object[2] = 0;
          *(_OWORD *)(v294 + 24) = *(_OWORD *)&object[3];
          object[3] = 0;
          object[4] = 0;
          *(_QWORD *)(v294 + 40) = v296;
          *(_QWORD *)(v294 + 48) = v295;
          *(_BYTE *)(v294 + 56) = 2;
          v403 = 0;
          v398 = (float64x2_t *)v294;
          (*(void (**)(_QWORD, float64x2_t **))(**(_QWORD **)(v104 + 24) + 40))(*(_QWORD *)(v104 + 24), &v398);
          v297 = (uint64_t)v398;
          v398 = 0;
          if (v297)
          {
            v298 = *(std::__shared_weak_count **)(v297 + 32);
            if (v298)
            {
              v299 = (unint64_t *)&v298->__shared_owners_;
              do
                v300 = __ldaxr(v299);
              while (__stlxr(v300 - 1, v299));
              if (!v300)
              {
                ((void (*)(std::__shared_weak_count *))v298->__on_zero_shared)(v298);
                std::__shared_weak_count::__release_weak(v298);
              }
            }
            v301 = *(std::__shared_weak_count **)(v297 + 16);
            if (v301)
            {
              v302 = (unint64_t *)&v301->__shared_owners_;
              do
                v303 = __ldaxr(v302);
              while (__stlxr(v303 - 1, v302));
              if (!v303)
              {
                ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
                std::__shared_weak_count::__release_weak(v301);
              }
            }
            MEMORY[0x212BC6398](v297, 0x10F0C40B62ED6C6);
            v304 = v403;
            v403 = 0;
            if (v304)
            {
              v305 = *(std::__shared_weak_count **)(v304 + 32);
              if (v305)
              {
                v306 = (unint64_t *)&v305->__shared_owners_;
                do
                  v307 = __ldaxr(v306);
                while (__stlxr(v307 - 1, v306));
                if (!v307)
                {
                  ((void (*)(std::__shared_weak_count *))v305->__on_zero_shared)(v305);
                  std::__shared_weak_count::__release_weak(v305);
                }
              }
              v308 = *(std::__shared_weak_count **)(v304 + 16);
              if (v308)
              {
                v309 = (unint64_t *)&v308->__shared_owners_;
                do
                  v310 = __ldaxr(v309);
                while (__stlxr(v310 - 1, v309));
                if (!v310)
                {
                  ((void (*)(std::__shared_weak_count *))v308->__on_zero_shared)(v308);
                  std::__shared_weak_count::__release_weak(v308);
                }
              }
              MEMORY[0x212BC6398](v304, 0x10F0C40B62ED6C6);
            }
          }
          v311 = (std::__shared_weak_count *)object[4];
          if (object[4])
          {
            v312 = (unint64_t *)((char *)object[4] + 8);
            do
              v313 = __ldaxr(v312);
            while (__stlxr(v313 - 1, v312));
            if (!v313)
            {
              ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
              std::__shared_weak_count::__release_weak(v311);
            }
          }
          v314 = (std::__shared_weak_count *)object[2];
          if (object[2])
          {
            v315 = (unint64_t *)((char *)object[2] + 8);
            do
              v316 = __ldaxr(v315);
            while (__stlxr(v316 - 1, v315));
            if (!v316)
            {
              ((void (*)(std::__shared_weak_count *))v314->__on_zero_shared)(v314);
              std::__shared_weak_count::__release_weak(v314);
            }
          }
        }
        else
        {
          os_log_type_enabled(v285, OS_LOG_TYPE_DEBUG);
          LOWORD(object[0]) = 0;
          v317 = (void *)_os_log_send_and_compose_impl();
          if (v317)
            free(v317);
        }
        if (v102)
        {
          sub_20E8C003C((uint64_t)&v390, "Relocalization failed to compute pose.");
          sub_20E863570((uint64_t)&v390);
        }
        sub_20E863570((uint64_t)&v390);
        v318 = *(std::__shared_weak_count **)&v395;
        if (v395 == 0.0)
          return 0;
        v319 = (unint64_t *)(*(_QWORD *)&v395 + 8);
        do
          v320 = __ldaxr(v319);
        while (__stlxr(v320 - 1, v319));
LABEL_407:
        if (!v320)
        {
          ((void (*)(std::__shared_weak_count *))v318->__on_zero_shared)(v318);
          std::__shared_weak_count::__release_weak(v318);
        }
        return 0;
      }
    }
    memmove(v274, v272, v273);
    goto LABEL_254;
  }
  sub_20F24E118(&v402);
  if (**(int **)(v402 + 56) > 2)
    goto LABEL_201;
  v97 = *(unsigned __int8 *)(v402 + 72);
  v98 = sub_20E8C31DC(v402, "OSLogSurrogateAppender", 1, 0);
  v99 = v98;
  if (!v97 && !v98)
    goto LABEL_201;
  v380 = v23;
  *(_QWORD *)&v390.f64[0] = &v402;
  *(std::chrono::steady_clock::time_point *)&v390.f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
  rep = std::chrono::system_clock::now().__d_.__rep_;
  LODWORD(v392.f64[0]) = 2;
  *(_QWORD *)&v392.f64[1] = "unknown file";
  LODWORD(v393) = 2028;
  v394.f64[1] = 0.0;
  v395 = 0.0;
  *(_QWORD *)&v394.f64[0] = "unknown function";
  v100 = **(_QWORD **)&v390.f64[0];
  v373 = **(_QWORD **)&v390.f64[0] + 16;
  v375 = **(_QWORD **)&v390.f64[0];
  if (*(char *)(**(_QWORD **)&v390.f64[0] + 39) < 0)
  {
    v101 = *(_QWORD *)(v100 + 24);
    category = *(char **)(v100 + 16);
  }
  else
  {
    v101 = *(unsigned __int8 *)(**(_QWORD **)&v390.f64[0] + 39);
    category = (char *)(**(_QWORD **)&v390.f64[0] + 16);
  }
  v377 = v97;
  v110 = a12[1];
  v386 = *a12;
  v388 = a12[4];
  v382 = v24;
  v384 = a12[3];
  v111 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v111 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
    if (LOBYTE(object[3]) && SHIBYTE(object[2]) < 0)
      operator delete(object[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v112 = byte_254A4A4F8;
  else
    v112 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v113 = byte_254A4A4F8[23];
  else
    v113 = *(_QWORD *)&byte_254A4A4F8[8];
  object[0] = os_log_create(v112, category);
  v114 = &object[1];
  if (v113 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v113 >= 0x17)
  {
    v115 = v110;
    v116 = v99;
    v117 = v22;
    v118 = v25;
    v119 = (v113 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v113 | 7) != 0x17)
      v119 = v113 | 7;
    v120 = v119 + 1;
    v114 = (void **)operator new(v119 + 1);
    object[2] = (void *)v113;
    object[3] = (void *)(v120 | 0x8000000000000000);
    object[1] = v114;
    v25 = v118;
    v22 = v117;
    v99 = v116;
    v110 = v115;
    v96 = a12;
    goto LABEL_133;
  }
  HIBYTE(object[3]) = v113;
  if (v113)
LABEL_133:
    memmove(v114, v112, v113);
  *((_BYTE *)v114 + v113) = 0;
  LOBYTE(object[4]) = 1;
  v121 = &object[5];
  if (v101 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v101 >= 0x17)
  {
    v122 = (v101 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v101 | 7) != 0x17)
      v122 = v101 | 7;
    v123 = v122 + 1;
    v121 = (void **)operator new(v122 + 1);
    object[6] = (void *)v101;
    object[7] = (void *)(v123 | 0x8000000000000000);
    object[5] = v121;
  }
  else
  {
    HIBYTE(object[7]) = v101;
    if (!v101)
      goto LABEL_142;
  }
  memmove(v121, category, v101);
LABEL_142:
  *((_BYTE *)v121 + v101) = 0;
  LOBYTE(object[8]) = 1;
  v124 = object[0];
  if (SHIBYTE(object[7]) < 0)
    operator delete(object[5]);
  if (LOBYTE(object[4]) && SHIBYTE(object[3]) < 0)
    operator delete(object[1]);
  if (object[0])
    os_release(object[0]);
  v125 = 0xCCCCCCCCCCCCCCCDLL * ((v110 - v386) >> 3);
  if (v99 && *(_QWORD *)(v99 + 24))
  {
    v126 = _os_log_pack_size();
    v127 = (std::__shared_weak_count_vtbl *)operator new(v126, (std::align_val_t)8uLL);
    v128 = (std::__shared_weak_count *)operator new();
    v129 = v128;
    v128->__shared_owners_ = 0;
    v130 = (unint64_t *)&v128->__shared_owners_;
    v128->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v128->__shared_weak_owners_ = 0;
    v128[1].__vftable = v127;
    object[0] = v127;
    object[1] = v127;
    object[2] = v128;
    do
      v131 = __ldxr(v130);
    while (__stxr(v131 + 1, v130));
    memset(&object[3], 0, 24);
    do
      v132 = __ldaxr(v130);
    while (__stlxr(v132 - 1, v130));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v129);
    }
    v133 = object[0];
    v134 = _os_log_pack_fill();
    *(_DWORD *)v134 = 134218240;
    *(_QWORD *)(v134 + 4) = (v388 - v384) >> 2;
    *(_WORD *)(v134 + 12) = 2048;
    *(_QWORD *)(v134 + 14) = v125;
    v135 = operator new();
    v136 = *(unsigned __int8 *)(v375 + 39);
    v137 = v373;
    if ((v136 & 0x80u) != 0)
    {
      v137 = *(_QWORD *)(v375 + 16);
      v136 = *(_QWORD *)(v375 + 24);
    }
    *(_QWORD *)v135 = v133;
    *(_OWORD *)(v135 + 8) = *(_OWORD *)&object[1];
    object[1] = 0;
    object[2] = 0;
    *(_OWORD *)(v135 + 24) = *(_OWORD *)&object[3];
    object[3] = 0;
    object[4] = 0;
    *(_QWORD *)(v135 + 40) = v137;
    *(_QWORD *)(v135 + 48) = v136;
    *(_BYTE *)(v135 + 56) = 2;
    v403 = 0;
    v398 = (float64x2_t *)v135;
    (*(void (**)(_QWORD, float64x2_t **))(**(_QWORD **)(v99 + 24) + 40))(*(_QWORD *)(v99 + 24), &v398);
    v24 = v382;
    v95 = a14;
    v94 = a13;
    v138 = (uint64_t)v398;
    v398 = 0;
    v23 = v380;
    if (v138)
    {
      v139 = *(std::__shared_weak_count **)(v138 + 32);
      if (v139)
      {
        v140 = (unint64_t *)&v139->__shared_owners_;
        do
          v141 = __ldaxr(v140);
        while (__stlxr(v141 - 1, v140));
        if (!v141)
        {
          ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
          std::__shared_weak_count::__release_weak(v139);
        }
      }
      v142 = *(std::__shared_weak_count **)(v138 + 16);
      if (v142)
      {
        v143 = (unint64_t *)&v142->__shared_owners_;
        do
          v144 = __ldaxr(v143);
        while (__stlxr(v144 - 1, v143));
        if (!v144)
        {
          ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
          std::__shared_weak_count::__release_weak(v142);
        }
      }
      MEMORY[0x212BC6398](v138, 0x10F0C40B62ED6C6);
      v145 = v403;
      v403 = 0;
      if (v145)
      {
        v146 = *(std::__shared_weak_count **)(v145 + 32);
        if (v146)
        {
          v147 = (unint64_t *)&v146->__shared_owners_;
          do
            v148 = __ldaxr(v147);
          while (__stlxr(v148 - 1, v147));
          if (!v148)
          {
            ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
            std::__shared_weak_count::__release_weak(v146);
          }
        }
        v149 = *(std::__shared_weak_count **)(v145 + 16);
        if (v149)
        {
          v150 = (unint64_t *)&v149->__shared_owners_;
          do
            v151 = __ldaxr(v150);
          while (__stlxr(v151 - 1, v150));
          if (!v151)
          {
            ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
            std::__shared_weak_count::__release_weak(v149);
          }
        }
        MEMORY[0x212BC6398](v145, 0x10F0C40B62ED6C6);
      }
    }
    v152 = (std::__shared_weak_count *)object[4];
    if (object[4])
    {
      v153 = (unint64_t *)((char *)object[4] + 8);
      do
        v154 = __ldaxr(v153);
      while (__stlxr(v154 - 1, v153));
      if (!v154)
      {
        ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
        std::__shared_weak_count::__release_weak(v152);
      }
    }
    v155 = (std::__shared_weak_count *)object[2];
    if (object[2])
    {
      v156 = (unint64_t *)((char *)object[2] + 8);
      do
        v157 = __ldaxr(v156);
      while (__stlxr(v157 - 1, v156));
      if (!v157)
      {
        ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
        std::__shared_weak_count::__release_weak(v155);
      }
    }
  }
  else
  {
    os_log_type_enabled(v124, OS_LOG_TYPE_DEBUG);
    LODWORD(object[0]) = 134218240;
    *(void **)((char *)object + 4) = (void *)((v388 - v384) >> 2);
    WORD2(object[1]) = 2048;
    *(void **)((char *)&object[1] + 6) = (void *)(0xCCCCCCCCCCCCCCCDLL * ((v110 - v386) >> 3));
    v158 = (void *)_os_log_send_and_compose_impl();
    v23 = v380;
    v24 = v382;
    v95 = a14;
    v94 = a13;
    if (v158)
      free(v158);
  }
  if (v377)
  {
    sub_20E8C003C((uint64_t)&v390, "Relocalization successfully computed pose with inliers: %lu / %lu", (uint64_t)(v96[4] - v96[3]) >> 2, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v96[1] - *v96) >> 3));
    sub_20E863570((uint64_t)&v390);
  }
  sub_20E863570((uint64_t)&v390);
  v159 = *(std::__shared_weak_count **)&v395;
  if (v395 != 0.0)
  {
    v160 = (unint64_t *)(*(_QWORD *)&v395 + 8);
    do
      v161 = __ldaxr(v160);
    while (__stlxr(v161 - 1, v160));
    if (!v161)
    {
      ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
      std::__shared_weak_count::__release_weak(v159);
    }
  }
LABEL_201:
  v162 = *(_QWORD **)(v23[2] + 424);
  v164 = (uint64_t **)v162[5];
  v163 = (uint64_t **)v162[6];
  if (v163 != v164)
  {
    v165 = ((char *)v163 - (char *)v164) >> 4;
    v166 = *(_DWORD *)(v22 + 16);
    v167 = *(_QWORD *)v22;
    while (1)
    {
      v168 = v165 >> 1;
      v169 = &v164[2 * (v165 >> 1)];
      v170 = *v169;
      v171 = *((_DWORD *)*v169 + 4);
      _CF = v171 >= v166;
      if (v171 != v166)
        goto LABEL_209;
      if (*v170 >= v167)
        break;
LABEL_203:
      v164 = v169 + 2;
      v168 = v165 + ~v168;
LABEL_204:
      v165 = v168;
      if (!v168)
        goto LABEL_212;
    }
    if (*v170 != v167)
      goto LABEL_204;
    _CF = *((_DWORD *)v170 + 2) >= *(_DWORD *)(v22 + 8);
LABEL_209:
    if (_CF)
      goto LABEL_204;
    goto LABEL_203;
  }
LABEL_212:
  if (v164 == v163)
  {
    v174 = (uint64_t **)v162[6];
LABEL_221:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MapDataController.cpp", 2036, (uint64_t)"vio_frame_iter != this->const_viodatabase()->end()", 50, (uint64_t)"Failed to find vio frame", 24, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v162 = *(_QWORD **)(v23[2] + 424);
    goto LABEL_223;
  }
  v173 = *v164;
  v174 = (uint64_t **)v162[6];
  if (*((_DWORD *)*v164 + 4) == *(_DWORD *)(v22 + 16))
  {
    v174 = (uint64_t **)v162[6];
    if (*v173 == *(_QWORD *)v22)
    {
      if (*((_DWORD *)v173 + 2) == *(_DWORD *)(v22 + 8))
        v174 = v164;
      else
        v174 = (uint64_t **)v162[6];
    }
  }
  if (v163 == v174)
    goto LABEL_221;
LABEL_223:
  v175 = *v174;
  v176 = sub_20E9DF85C((_QWORD *)(*v162 + 1784), *v174);
  if (!v176)
  {
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MapDataController.cpp", 2041, (uint64_t)"vio_pose_ref", 12, (uint64_t)"vio_pose_ref does not exist!", 28, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  v180 = v176[9];
  v181 = v176[5];
  _D23 = *(_QWORD *)(v181 + 40);
  v183 = *(float64x2_t *)(v181 + 24);
  v184 = *(double *)(v181 + 64);
  v185 = *(float64x2_t *)(v181 + 48);
  v186 = *(double *)(v180 + 16);
  _Q2 = *(_OWORD *)v180;
  v177.i64[0] = *(_QWORD *)(v180 + 40);
  _Q3 = *(float64x2_t *)(v180 + 24);
  v189 = *(double *)(v180 + 64);
  _Q1 = *(float64x2_t *)(v180 + 48);
  v191 = (float64x2_t *)v176[11];
  v192 = v191[1].f64[0];
  _Q0 = *v191;
  v194 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v181, v191->f64[0]), v183, *v191, 1), v185, v192);
  __asm { FMLA            D16, D23, V0.D[1] }
  _Q16.f64[0] = _Q16.f64[0] + v184 * v192;
  v197 = (float64x2_t *)v176[7];
  v179.f64[0] = v197[1].f64[0];
  *(_QWORD *)&v198 = *(_OWORD *)&vaddq_f64(_Q16, v179);
  _Q17 = vaddq_f64(v194, *v197);
  v200 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v181, *(double *)v180), v183, *(float64x2_t *)v180, 1), v185, v186);
  __asm { FMLA            D19, D23, V2.D[1] }
  _Q22.f64[0] = _D19 + v184 * v186;
  v203 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v181, _Q3.f64[0]), v183, _Q3, 1), v185, *(double *)v177.i64);
  __asm { FMLA            D21, D23, V3.D[1] }
  v205 = _D21 + v184 * *(double *)v177.i64;
  _Q18 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v181, _Q1.f64[0]), v183, _Q1, 1), v185, v189);
  __asm { FMLA            D20, D23, V1.D[1] }
  v208 = _D20 + v184 * v189;
  v183.f64[0] = v186;
  v209 = vmulq_n_f64(*(float64x2_t *)v180, _Q22.f64[0]);
  v210 = vmulq_n_f64((float64x2_t)*(unint64_t *)&v183.f64[0], _Q22.f64[0]);
  _Q22.f64[1] = v205;
  v211 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v200, (int64x2_t)v203), _Q17.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v200, (int64x2_t)v203), _Q17, 1), _Q22, v198);
  _Q17.f64[0] = _Q17.f64[1];
  __asm { FMLA            D22, D17, V18.D[1] }
  _Q22.f64[0] = vmlad_n_f64(_Q22.f64[0], v208, v198);
  *(_QWORD *)&v212 = *(_OWORD *)&vnegq_f64(v211);
  _Q17 = vextq_s8((int8x16_t)_Q3, v177, 8uLL);
  *(_QWORD *)&_Q3.f64[1] = _Q17.i64[0];
  *(double *)_Q17.i64 = v189;
  __asm { FMOV            V5.2D, #1.0 }
  _Q5.f64[0] = v192;
  v215 = vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)v180, v200.f64[0]), _Q3, v203.f64[0]);
  v216 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v183.f64[0], v200.f64[0]), (float64x2_t)_Q17.u64[1], v203.f64[0]);
  v217 = vmlaq_laneq_f64(vmulq_laneq_f64(*(float64x2_t *)v180, v200, 1), _Q3, v203, 1);
  v218 = vmlaq_laneq_f64(vmulq_laneq_f64((float64x2_t)*(unint64_t *)&v183.f64[0], v200, 1), (float64x2_t)_Q17.u64[1], v203, 1);
  v219 = vmlaq_n_f64(v209, _Q3, v205);
  v220 = vmlaq_n_f64(v210, (float64x2_t)_Q17.u64[1], v205);
  v221 = a10[1];
  v222 = vmlsq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v180, v212), _Q3, v211, 1);
  v223 = vmulq_n_f64((float64x2_t)*(unint64_t *)&v183.f64[0], v212);
  v224 = a10[4];
  v183.f64[0] = a10[5];
  v225 = vmlsq_laneq_f64(v223, (float64x2_t)_Q17.u64[1], v211, 1);
  v211.f64[0] = a10[8];
  v185.f64[0] = a10[9];
  v226 = vmlaq_n_f64(v215, _Q1, _Q18.f64[0]);
  v227 = vmlaq_n_f64(v216, (float64x2_t)_Q17.u64[0], _Q18.f64[0]);
  v228 = vmlaq_laneq_f64(v217, _Q1, _Q18, 1);
  v229 = vmlaq_laneq_f64(v218, (float64x2_t)_Q17.u64[0], _Q18, 1);
  _Q18.f64[0] = a10[3];
  _Q18.f64[1] = a10[7];
  v230 = vmlaq_n_f64(v219, _Q1, v208);
  v231 = vmlaq_n_f64(v220, (float64x2_t)_Q17.u64[0], v208);
  _D20 = a10[11];
  v233 = vmlsq_lane_f64(v222, _Q1, _Q22.f64[0], 0);
  _Q1.f64[0] = *a10;
  _Q1.f64[1] = v221;
  v234 = vmlsq_lane_f64(v225, (float64x2_t)_Q17.u64[0], _Q22.f64[0], 0);
  _Q22.f64[0] = v224;
  _Q22.f64[1] = v183.f64[0];
  v235 = vmlsq_laneq_f64(vmulq_n_f64(_Q1, vnegq_f64(_Q18).f64[0]), _Q22, _Q18, 1);
  _Q22.f64[0] = v211.f64[0];
  _Q22.f64[1] = v185.f64[0];
  v236 = vmlsq_lane_f64(v235, _Q22, _D20, 0);
  v237 = vmlaq_f64(v226, (float64x2_t)0, _Q0);
  v238 = vmlaq_f64(v227, (float64x2_t)0, _Q5);
  v239 = vmlaq_f64(v228, (float64x2_t)0, _Q0);
  _Q7 = vmlaq_f64(v229, (float64x2_t)0, _Q5);
  v241 = vmlaq_n_f64(vmulq_n_f64(v237, *a10), v239, v221);
  v242 = vmlaq_n_f64(vmulq_n_f64(v238, *a10), _Q7, v221);
  v243 = vmlaq_n_f64(vmulq_n_f64(v237, v224), v239, v183.f64[0]);
  v244 = vmlaq_n_f64(vmulq_n_f64(v238, v224), _Q7, v183.f64[0]);
  v245 = vmlaq_n_f64(vmulq_n_f64(v237, v211.f64[0]), v239, v185.f64[0]);
  v246 = vmlaq_n_f64(vmulq_n_f64(v238, v211.f64[0]), _Q7, v185.f64[0]);
  v247 = vmlaq_laneq_f64(vmulq_n_f64(v237, v236.f64[0]), v239, v236, 1);
  _Q6 = vmlaq_laneq_f64(vmulq_n_f64(v238, v236.f64[0]), _Q7, v236, 1);
  v236.f64[0] = a10[2];
  _Q7.f64[0] = a10[6];
  __asm { FMLS            D17, D7, V18.D[1] }
  v249 = vmlaq_f64(v230, (float64x2_t)0, _Q0);
  v250 = vmlaq_f64(v231, (float64x2_t)0, _Q5);
  v251 = vmlaq_n_f64(v241, v249, v236.f64[0]);
  v252 = vmlaq_n_f64(v242, v250, v236.f64[0]);
  v236.f64[1] = _Q7.f64[0];
  _Q7.f64[0] = a10[10];
  __asm { FMLS            D17, D7, V20.D[0] }
  v253 = vmlaq_laneq_f64(v243, v249, v236, 1);
  v254 = vmlaq_laneq_f64(v244, v250, v236, 1);
  v255 = vaddq_f64(_Q0, v233);
  v256 = vaddq_f64(_Q5, v234);
  v257 = (int64x2_t)vmlaq_f64(v251, (float64x2_t)0, v255);
  v258 = (int64x2_t)vmlaq_f64(v252, (float64x2_t)0, v256);
  v259 = (int64x2_t)vmlaq_f64(v253, (float64x2_t)0, v255);
  v260 = (int64x2_t)vmlaq_f64(v254, (float64x2_t)0, v256);
  _Q24 = vmlaq_f64(vmlaq_n_f64(v245, v249, _Q7.f64[0]), (float64x2_t)0, v255);
  *(_QWORD *)&v246.f64[0] = *(_OWORD *)&vmlaq_f64(vmlaq_n_f64(v246, v250, _Q7.f64[0]), (float64x2_t)0, v256);
  v262 = vaddq_f64(v255, vmlaq_n_f64(v247, v249, *(double *)_Q17.i64));
  *(_QWORD *)&v256.f64[0] = *(_OWORD *)&vaddq_f64(v256, vmlaq_n_f64(_Q6, v250, *(double *)_Q17.i64));
  _Q6.f64[0] = v262.f64[1];
  __asm { FMLA            D5, D6, V24.D[1] }
  v393 = _Q24.f64[1];
  rep = *(_QWORD *)&_Q24.f64[0];
  v390 = (float64x2_t)vzip1q_s64(v257, v259);
  v392 = (float64x2_t)vzip2q_s64(v257, v259);
  v395 = v246.f64[0];
  _Q5.f64[0] = vmlad_n_f64(_Q5.f64[0], v256.f64[0], v246.f64[0]);
  v394 = (float64x2_t)vzip1q_s64(v258, v260);
  v396 = vnegq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v390, v262.f64[0]), v392, v262, 1), v394, v256.f64[0]));
  v397 = *(_OWORD *)&vnegq_f64(_Q5);
  v398 = &v390;
  v399 = 0;
  v400 = &v396;
  v401 = 0;
  sub_20F3833F8(v96, (uint64_t *)&v398, v176 + 9, v175[3], *(_DWORD *)(*v23 + 72), (uint64_t)object);
  if (__dst[288] == v405)
  {
    if (__dst[288])
    {
      memcpy(__dst, object, 0x120uLL);
      return 1;
    }
  }
  else
  {
    if (!__dst[288])
    {
      memcpy(__dst, object, 0x120uLL);
      result = 1;
      __dst[288] = 1;
      return result;
    }
    __dst[288] = 0;
  }
  if (v95)
    *(_BYTE *)(v94 + 161) = 1;
  if (v25)
    *(_BYTE *)(v24 + 17) = 3;
  sub_20F24E118(&v402);
  if (**(int **)(v402 + 56) <= 2)
  {
    v264 = *(unsigned __int8 *)(v402 + 72);
    v265 = sub_20E8C31DC(v402, "OSLogSurrogateAppender", 1, 0);
    v266 = v265;
    if (v264 || v265)
    {
      *(_QWORD *)&v390.f64[0] = &v402;
      *(std::chrono::steady_clock::time_point *)&v390.f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
      rep = std::chrono::system_clock::now().__d_.__rep_;
      LODWORD(v392.f64[0]) = 2;
      *(_QWORD *)&v392.f64[1] = "unknown file";
      LODWORD(v393) = 2062;
      v394.f64[1] = 0.0;
      v395 = 0.0;
      *(_QWORD *)&v394.f64[0] = "unknown function";
      v267 = **(_QWORD **)&v390.f64[0];
      v268 = **(_QWORD **)&v390.f64[0] + 16;
      if (*(char *)(**(_QWORD **)&v390.f64[0] + 39) < 0)
      {
        v270 = *(const char **)(v267 + 16);
        v269 = *(_QWORD *)(v267 + 24);
      }
      else
      {
        v269 = *(unsigned __int8 *)(**(_QWORD **)&v390.f64[0] + 39);
        v270 = (const char *)(**(_QWORD **)&v390.f64[0] + 16);
      }
      v321 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v321 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)object);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
        if (LOBYTE(object[3]) && SHIBYTE(object[2]) < 0)
          operator delete(object[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v322 = byte_254A4A4F8;
      else
        v322 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v323 = byte_254A4A4F8[23];
      else
        v323 = *(_QWORD *)&byte_254A4A4F8[8];
      object[0] = os_log_create(v322, v270);
      v324 = &object[1];
      if (v323 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v323 >= 0x17)
      {
        v325 = v266;
        v326 = v270;
        v327 = v267;
        v328 = v264;
        v329 = v268;
        v330 = (v323 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v323 | 7) != 0x17)
          v330 = v323 | 7;
        v331 = v330 + 1;
        v324 = (void **)operator new(v330 + 1);
        object[2] = (void *)v323;
        object[3] = (void *)(v331 | 0x8000000000000000);
        object[1] = v324;
        v268 = v329;
        v264 = v328;
        v267 = v327;
        v270 = v326;
        v266 = v325;
      }
      else
      {
        HIBYTE(object[3]) = v323;
        if (!v323)
        {
LABEL_339:
          *((_BYTE *)v324 + v323) = 0;
          LOBYTE(object[4]) = 1;
          v332 = &object[5];
          if (v269 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v269 >= 0x17)
          {
            v333 = (v269 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v269 | 7) != 0x17)
              v333 = v269 | 7;
            v334 = v333 + 1;
            v332 = (void **)operator new(v333 + 1);
            object[6] = (void *)v269;
            object[7] = (void *)(v334 | 0x8000000000000000);
            object[5] = v332;
          }
          else
          {
            HIBYTE(object[7]) = v269;
            if (!v269)
              goto LABEL_347;
          }
          memmove(v332, v270, v269);
LABEL_347:
          *((_BYTE *)v332 + v269) = 0;
          LOBYTE(object[8]) = 1;
          v335 = object[0];
          if (SHIBYTE(object[7]) < 0)
            operator delete(object[5]);
          if (LOBYTE(object[4]) && SHIBYTE(object[3]) < 0)
            operator delete(object[1]);
          if (object[0])
            os_release(object[0]);
          if (v266 && *(_QWORD *)(v266 + 24))
          {
            v336 = _os_log_pack_size();
            v337 = (std::__shared_weak_count_vtbl *)operator new(v336, (std::align_val_t)8uLL);
            v338 = (std::__shared_weak_count *)operator new();
            v339 = v338;
            v338->__shared_owners_ = 0;
            v340 = (unint64_t *)&v338->__shared_owners_;
            v338->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v338->__shared_weak_owners_ = 0;
            v338[1].__vftable = v337;
            object[0] = v337;
            object[1] = v337;
            object[2] = v338;
            do
              v341 = __ldxr(v340);
            while (__stxr(v341 + 1, v340));
            memset(&object[3], 0, 24);
            do
              v342 = __ldaxr(v340);
            while (__stlxr(v342 - 1, v340));
            if (!v342)
            {
              ((void (*)(std::__shared_weak_count *))v338->__on_zero_shared)(v338);
              std::__shared_weak_count::__release_weak(v339);
            }
            v343 = object[0];
            *(_WORD *)_os_log_pack_fill() = 0;
            v344 = operator new();
            v345 = *(unsigned __int8 *)(v267 + 39);
            if ((v345 & 0x80u) == 0)
              v346 = v268;
            else
              v346 = *(_QWORD *)(v267 + 16);
            if ((v345 & 0x80u) != 0)
              v345 = *(_QWORD *)(v267 + 24);
            *(_QWORD *)v344 = v343;
            *(_OWORD *)(v344 + 8) = *(_OWORD *)&object[1];
            object[1] = 0;
            object[2] = 0;
            *(_OWORD *)(v344 + 24) = *(_OWORD *)&object[3];
            object[3] = 0;
            object[4] = 0;
            *(_QWORD *)(v344 + 40) = v346;
            *(_QWORD *)(v344 + 48) = v345;
            *(_BYTE *)(v344 + 56) = 2;
            v403 = 0;
            v398 = (float64x2_t *)v344;
            (*(void (**)(_QWORD, float64x2_t **))(**(_QWORD **)(v266 + 24) + 40))(*(_QWORD *)(v266 + 24), &v398);
            v347 = (uint64_t)v398;
            v398 = 0;
            if (v347)
            {
              v348 = *(std::__shared_weak_count **)(v347 + 32);
              if (v348)
              {
                v349 = (unint64_t *)&v348->__shared_owners_;
                do
                  v350 = __ldaxr(v349);
                while (__stlxr(v350 - 1, v349));
                if (!v350)
                {
                  ((void (*)(std::__shared_weak_count *))v348->__on_zero_shared)(v348);
                  std::__shared_weak_count::__release_weak(v348);
                }
              }
              v351 = *(std::__shared_weak_count **)(v347 + 16);
              if (v351)
              {
                v352 = (unint64_t *)&v351->__shared_owners_;
                do
                  v353 = __ldaxr(v352);
                while (__stlxr(v353 - 1, v352));
                if (!v353)
                {
                  ((void (*)(std::__shared_weak_count *))v351->__on_zero_shared)(v351);
                  std::__shared_weak_count::__release_weak(v351);
                }
              }
              MEMORY[0x212BC6398](v347, 0x10F0C40B62ED6C6);
              v354 = v403;
              v403 = 0;
              if (v354)
              {
                v355 = *(std::__shared_weak_count **)(v354 + 32);
                if (v355)
                {
                  v356 = (unint64_t *)&v355->__shared_owners_;
                  do
                    v357 = __ldaxr(v356);
                  while (__stlxr(v357 - 1, v356));
                  if (!v357)
                  {
                    ((void (*)(std::__shared_weak_count *))v355->__on_zero_shared)(v355);
                    std::__shared_weak_count::__release_weak(v355);
                  }
                }
                v358 = *(std::__shared_weak_count **)(v354 + 16);
                if (v358)
                {
                  v359 = (unint64_t *)&v358->__shared_owners_;
                  do
                    v360 = __ldaxr(v359);
                  while (__stlxr(v360 - 1, v359));
                  if (!v360)
                  {
                    ((void (*)(std::__shared_weak_count *))v358->__on_zero_shared)(v358);
                    std::__shared_weak_count::__release_weak(v358);
                  }
                }
                MEMORY[0x212BC6398](v354, 0x10F0C40B62ED6C6);
              }
            }
            v361 = (std::__shared_weak_count *)object[4];
            if (object[4])
            {
              v362 = (unint64_t *)((char *)object[4] + 8);
              do
                v363 = __ldaxr(v362);
              while (__stlxr(v363 - 1, v362));
              if (!v363)
              {
                ((void (*)(std::__shared_weak_count *))v361->__on_zero_shared)(v361);
                std::__shared_weak_count::__release_weak(v361);
              }
            }
            v364 = (std::__shared_weak_count *)object[2];
            if (object[2])
            {
              v365 = (unint64_t *)((char *)object[2] + 8);
              do
                v366 = __ldaxr(v365);
              while (__stlxr(v366 - 1, v365));
              if (!v366)
              {
                ((void (*)(std::__shared_weak_count *))v364->__on_zero_shared)(v364);
                std::__shared_weak_count::__release_weak(v364);
              }
            }
          }
          else
          {
            os_log_type_enabled(v335, OS_LOG_TYPE_DEBUG);
            LOWORD(object[0]) = 0;
            v367 = (void *)_os_log_send_and_compose_impl();
            if (v367)
              free(v367);
          }
          if (v264)
          {
            sub_20E8C003C((uint64_t)&v390, "Relocalization failed to compute covariance for pose.");
            sub_20E863570((uint64_t)&v390);
          }
          sub_20E863570((uint64_t)&v390);
          v318 = *(std::__shared_weak_count **)&v395;
          if (v395 == 0.0)
            return 0;
          v368 = (unint64_t *)(*(_QWORD *)&v395 + 8);
          do
            v320 = __ldaxr(v368);
          while (__stlxr(v320 - 1, v368));
          goto LABEL_407;
        }
      }
      memmove(v324, v322, v323);
      goto LABEL_339;
    }
  }
  return 0;
}

void sub_20F2681D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58,char a59)
{
  if (a59)
  {
    if (a58 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void sub_20F268230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *object,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59,char a60)
{
  sub_20E86E8C4(&a47);
  sub_20E86E8C4(&a52);
  sub_20E86E658((uint64_t)&object);
  sub_20E863714((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void sub_20F268368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  sub_20E863714((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void sub_20F268388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  sub_20E863714((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void sub_20F26839C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  sub_20E863714((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void sub_20F2683B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *object,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59,char a60)
{
  if (a60 && a59 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void sub_20F268430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  sub_20E863714((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void sub_20F268444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *object,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59,char a60)
{
  if (a60 && a59 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void sub_20F268484(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20F2684A4(_QWORD *result, void *__src, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t *v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  unint64_t v18;
  unsigned int v19;
  BOOL v20;
  unint64_t v21;
  uint64_t **v22;
  uint64_t *v23;
  _OWORD *v24;

  v3 = result[23];
  if (!v3)
    return result;
  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 1056) + 8);
  if (!v4)
    return result;
  v7 = result;
  v8 = result[2];
  v11 = *(uint64_t **)(v8 + 240);
  v9 = (uint64_t *)(v8 + 240);
  v10 = v11;
  if (!v11)
    goto LABEL_19;
  v12 = *((_DWORD *)a3 + 4);
  v13 = *a3;
  v14 = v9;
  v15 = *((_DWORD *)a3 + 2);
  do
  {
    while (1)
    {
      v16 = *((_DWORD *)v10 + 12);
      v17 = v16 >= v12;
      if (v16 != v12)
        goto LABEL_10;
      v18 = v10[4];
      if (v18 >= v13)
        break;
LABEL_5:
      v10 = (uint64_t *)v10[1];
      if (!v10)
        goto LABEL_13;
    }
    if (v18 != v13)
      goto LABEL_12;
    v17 = *((_DWORD *)v10 + 10) >= v15;
LABEL_10:
    if (!v17)
      goto LABEL_5;
LABEL_12:
    v14 = v10;
    v10 = (uint64_t *)*v10;
  }
  while (v10);
LABEL_13:
  if (v14 == v9)
    goto LABEL_19;
  v19 = *((_DWORD *)v14 + 12);
  v20 = v12 >= v19;
  if (v12 != v19)
    goto LABEL_18;
  v21 = v14[4];
  if (v13 < v21)
    goto LABEL_19;
  if (v13 == v21)
  {
    v20 = v15 >= *((_DWORD *)v14 + 10);
LABEL_18:
    if (!v20)
    {
LABEL_19:
      sub_20F278024((_QWORD *)(v4 + 400), __src, (__int128 *)a3);
      v22 = (uint64_t **)(v7[2] + 232);
      v24 = a3;
      v23 = sub_20F29289C(v22, a3, (uint64_t)&unk_2102DB95C, &v24);
      return memcpy(v23 + 7, __src, 0x200uLL);
    }
  }
  return result;
}

float *sub_20F2685C0@<X0>(uint64_t a1@<X0>, char ***a2@<X1>, char ***a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X4>, float *a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  BOOL v10;
  __n128 v11;
  float *result;
  float *v13[3];

  v7 = *(_QWORD *)(a1 + 184);
  if (*(_BYTE *)(v7 + 225)
    && (v8 = *(_QWORD *)(v7 + 1072)) != 0
    && (*(_QWORD *)(v8 + 8) ? (v9 = *(_BYTE *)(a5 + 4) == 0) : (v9 = 1),
        !v9 ? (v10 = *(_DWORD *)a5 == 2) : (v10 = 0),
        v10))
  {
    sub_20F2CBB50(v8, a3, a4, (uint64_t)v13);
    v11.n128_f32[0] = sub_20F2929D8(a6, v13);
  }
  else
  {
    sub_20F2CBB50(*(_QWORD *)(v7 + 1056), a2, a4, (uint64_t)v13);
    v11.n128_f32[0] = sub_20F2929D8(a6, v13);
  }
  result = v13[0];
  if (v13[0])
    return (float *)MEMORY[0x212BC6368](v13[0], 0x1000C8052888210, v11);
  return result;
}

void sub_20F26866C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    MEMORY[0x212BC6368](a10, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

void sub_20F268698(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  char *v11;
  char *v12;
  int8x8_t v13;
  uint8x8_t v14;
  char *v15;
  int v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  unsigned int v31;
  uint64_t *v32;
  unsigned int v33;
  BOOL v34;
  unint64_t v35;
  unsigned int v36;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t *i;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  void **v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  BOOL v54;
  void *__p[2];
  unsigned __int8 v56;
  _DWORD v57[4];
  _QWORD v58[33];
  unint64_t v59;
  unsigned int v60;
  char v61;
  char *v62;
  char *v63;

  v4 = *(char **)(a1 + 32);
  v5 = *(char **)(a1 + 40);
  v6 = (_QWORD *)(a1 + 32);
  if (v5 != v4)
  {
    v7 = (v5 - v4) >> 4;
    v8 = *(_QWORD *)a2;
    do
    {
      v9 = v7 >> 1;
      v10 = (unint64_t *)&v4[16 * (v7 >> 1)];
      if (*v10 < v8 || *v10 == v8 && *(_DWORD *)&v4[16 * v9 + 8] < *(_DWORD *)(a2 + 8))
      {
        v4 = (char *)(v10 + 2);
        v9 = v7 + ~v9;
      }
      v7 = v9;
    }
    while (v9);
  }
  if ((v4 == v5 || *(_QWORD *)v4 != *(_QWORD *)a2 || *((_DWORD *)v4 + 2) != *(_DWORD *)(a2 + 8))
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MapDataController.cpp", 2185, (uint64_t)"this->IsWeakState(target_weak_state_id)", 39, (uint64_t)"State must be weak", 18, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  sub_20F23A0A0(**(_QWORD ***)(*(_QWORD *)(a1 + 16) + 424), (__int128 *)a2, &v62);
  v11 = v62;
  v12 = v63;
  if (v62 != v63)
  {
    v13 = *(int8x8_t *)(a1 + 112);
    if (v13)
    {
      v14 = (uint8x8_t)vcnt_s8(v13);
      v14.i16[0] = vaddlv_u8(v14);
      v15 = v62;
      while (1)
      {
        v16 = *((_DWORD *)v15 + 4);
        v17 = *((_DWORD *)v15 + 2);
        v18 = v17 ^ __ROR4__(v16, 13);
        if (v14.u32[0] > 1uLL)
        {
          v19 = v18;
          if (*(_QWORD *)&v13 <= v18)
            v19 = v18 % *(_QWORD *)&v13;
        }
        else
        {
          v19 = (*(_QWORD *)&v13 + 0xFFFFFFFFLL) & v18;
        }
        v20 = *(uint64_t ***)(*(_QWORD *)(a1 + 104) + 8 * v19);
        if (!v20)
          break;
        v21 = *v20;
        if (!v21)
          break;
        v22 = *(_QWORD *)v15;
        if (v14.u32[0] < 2uLL)
        {
          while (1)
          {
            v23 = v21[1];
            if (v23 == v18)
            {
              if (*((_DWORD *)v21 + 8) == v16 && v21[2] == v22 && *((_DWORD *)v21 + 6) == v17)
                goto LABEL_30;
            }
            else if ((v23 & (*(_QWORD *)&v13 - 1)) != v19)
            {
              goto LABEL_41;
            }
            v21 = (uint64_t *)*v21;
            if (!v21)
              goto LABEL_41;
          }
        }
        while (1)
        {
          v24 = v21[1];
          if (v24 == v18)
            break;
          if (v24 >= *(_QWORD *)&v13)
            v24 %= *(_QWORD *)&v13;
          if (v24 != v19)
            goto LABEL_41;
LABEL_33:
          v21 = (uint64_t *)*v21;
          if (!v21)
            goto LABEL_41;
        }
        if (*((_DWORD *)v21 + 8) != v16 || v21[2] != v22 || *((_DWORD *)v21 + 6) != v17)
          goto LABEL_33;
LABEL_30:
        v15 += 24;
        if (v15 == v63)
          goto LABEL_47;
      }
    }
LABEL_41:
    if (*(_BYTE *)(*(_QWORD *)a1 + 2499) && *(_BYTE *)(*(_QWORD *)a1 + 2612))
    {
      sub_20F7CB968((_QWORD *)(*(_QWORD *)(a1 + 16) + 168), a2, v6, (uint64_t)&v59);
      if (!v61)
      {
        sub_20E863438((uint64_t)v57);
        v39 = sub_20E86A980(v58, (uint64_t)"target weak state_id: ", 22);
        v40 = sub_21021659C(v39, (uint64_t *)a2);
        sub_20E86A980(v40, (uint64_t)". \n", 3);
        sub_20E86A980(v58, (uint64_t)" weak state id: ", 16);
        v41 = *(uint64_t **)(a1 + 32);
        for (i = *(uint64_t **)(a1 + 40); v41 != i; v41 += 2)
        {
          sub_21021659C(v58, v41);
          sub_20E86A980(v58, (uint64_t)", ", 2);
        }
        sub_20E86A980(v58, (uint64_t)"\n", 1);
        sub_20E86A980(v58, (uint64_t)"The states of the submap: ", 26);
        v43 = **(_QWORD **)(*(_QWORD *)(a1 + 16) + 424);
        v44 = *(_QWORD **)(v43 + 48);
        v45 = (_QWORD *)(v43 + 56);
        if (v44 != (_QWORD *)(v43 + 56))
        {
          do
          {
            v48 = sub_20E86A980(v58, (uint64_t)"state: ", 7);
            v49 = sub_21021659C(v48, v44 + 4);
            sub_20E86A980(v49, (uint64_t)"(", 1);
            sub_20F25A6B4(a1, v44 + 4);
            v50 = (_QWORD *)std::ostream::operator<<();
            v51 = sub_20E86A980(v50, (uint64_t)")", 1);
            sub_20E86A980(v51, (uint64_t)"->", 2);
            v52 = (_QWORD *)v44[1];
            if (v52)
            {
              do
              {
                v53 = v52;
                v52 = (_QWORD *)*v52;
              }
              while (v52);
            }
            else
            {
              do
              {
                v53 = (_QWORD *)v44[2];
                v54 = *v53 == (_QWORD)v44;
                v44 = v53;
              }
              while (!v54);
            }
            v44 = v53;
          }
          while (v53 != v45);
        }
        sub_20E86A980(v58, (uint64_t)"\n", 1);
        sub_20E923E88(v57, __p);
        if ((v56 & 0x80u) == 0)
          v46 = __p;
        else
          v46 = (void **)__p[0];
        if ((v56 & 0x80u) == 0)
          v47 = v56;
        else
          v47 = (uint64_t)__p[1];
        sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MapDataController.cpp", 2245, (uint64_t)&unk_21029C995, 0, (uint64_t)v46, v47, (void (*)(void **))sub_21023DDB0);
        if ((char)v56 < 0)
          operator delete(__p[0]);
        abort();
      }
      v25 = v62;
      v26 = v63;
      if (v62 != v63)
      {
LABEL_52:
        v27 = *(_QWORD *)(a1 + 16);
        v30 = *(uint64_t **)(v27 + 240);
        v28 = (uint64_t *)(v27 + 240);
        v29 = v30;
        if (!v30)
          goto LABEL_51;
        v31 = *((_DWORD *)v25 + 4);
        v32 = v28;
        while (1)
        {
          while (1)
          {
            v33 = *((_DWORD *)v29 + 12);
            v34 = v33 >= v31;
            if (v33 != v31)
              goto LABEL_59;
            v35 = v29[4];
            if (v35 >= v59)
              break;
LABEL_54:
            v29 = (uint64_t *)v29[1];
            if (!v29)
              goto LABEL_62;
          }
          if (v35 == v59)
          {
            v34 = *((_DWORD *)v29 + 10) >= v60;
LABEL_59:
            if (!v34)
              goto LABEL_54;
          }
          v32 = v29;
          v29 = (uint64_t *)*v29;
          if (!v29)
          {
LABEL_62:
            if (v32 == v28)
              goto LABEL_51;
            v36 = *((_DWORD *)v32 + 12);
            if (v31 != v36)
            {
              if (v31 >= v36)
                goto LABEL_69;
              goto LABEL_51;
            }
            v37 = v32[4];
            if (v59 < v37 || v59 == v37 && *((_DWORD *)v32 + 10) > v60)
            {
LABEL_51:
              sub_20F268CA0(a1, (uint64_t)v25);
              v25 += 24;
              if (v25 == v26)
                break;
            }
            else
            {
LABEL_69:
              v38 = sub_20F288C80((float *)(a1 + 104), (uint64_t *)v25, (uint64_t)v25);
              memcpy(v38 + 5, v32 + 7, 0x200uLL);
              v25 += 24;
              if (v25 == v26)
                break;
            }
            goto LABEL_52;
          }
        }
      }
    }
    else
    {
      do
      {
        sub_20F268CA0(a1, (uint64_t)v11);
        v11 += 24;
      }
      while (v11 != v12);
    }
LABEL_47:
    v11 = v62;
  }
  if (v11)
  {
    v63 = v11;
    operator delete(v11);
  }
}

void sub_20F268C44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;
  void *v18;

  if (a15 < 0)
    operator delete(__p);
  sub_20E863784((uint64_t)&a16);
  v18 = *(void **)(v16 - 112);
  if (v18)
  {
    *(_QWORD *)(v16 - 104) = v18;
    operator delete(v18);
  }
  _Unwind_Resume(a1);
}

void sub_20F268CA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  void *__p[3];
  _BYTE __src[512];

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 424);
  v5 = *(char **)(v4 + 40);
  v6 = *(char **)(v4 + 48);
  if (v6 != v5)
  {
    v7 = (v6 - v5) >> 4;
    v8 = *(_DWORD *)(a2 + 16);
    v9 = *(_QWORD *)a2;
    while (1)
    {
      v10 = v7 >> 1;
      v11 = (uint64_t *)&v5[16 * (v7 >> 1)];
      v12 = *v11;
      v13 = *(_DWORD *)(*v11 + 16);
      v14 = v13 >= v8;
      if (v13 != v8)
        goto LABEL_9;
      if (*(_QWORD *)v12 >= v9)
        break;
LABEL_3:
      v5 = (char *)(v11 + 2);
      v10 = v7 + ~v10;
LABEL_4:
      v7 = v10;
      if (!v10)
        goto LABEL_12;
    }
    if (*(_QWORD *)v12 != v9)
      goto LABEL_4;
    v14 = *(_DWORD *)(v12 + 8) >= *(_DWORD *)(a2 + 8);
LABEL_9:
    if (v14)
      goto LABEL_4;
    goto LABEL_3;
  }
LABEL_12:
  if (v5 == v6
    || (v15 = *(_QWORD *)v5, *(_DWORD *)(*(_QWORD *)v5 + 16) != *(_DWORD *)(a2 + 16))
    || *(_QWORD *)v15 != *(_QWORD *)a2
    || (*(_DWORD *)(v15 + 8) != *(_DWORD *)(a2 + 8) ? (v16 = v6) : (v16 = v5), v6 == v16))
  {
    v16 = v6;
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MapDataController.cpp", 2207, (uint64_t)"vio_frame_iter != this->const_viodatabase()->end()", 50, (uint64_t)&unk_21029C995, 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_26;
    }
  }
  v17 = *(_QWORD *)v16;
  if (*(_BYTE *)(*(_QWORD *)v16 + 736))
    goto LABEL_23;
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MapDataController.cpp", 2208, (uint64_t)"vio_frame_iter->get()->is_weak_frame()", 38, (uint64_t)"Frame should be weak", 20, (void (*)(void **))sub_21023DDB0))
  {
LABEL_26:
    abort();
  }
  v17 = *(_QWORD *)v16;
LABEL_23:
  v18 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 184) + 1056) + 8);
  sub_20F435ECC((char ***)(v17 + 576), 0, (char **)__p);
  sub_20F431A98(*v18, (uint64_t *)__p, (__int128 *)a2, __src);
  v19 = sub_20F288C80((float *)(a1 + 104), (uint64_t *)a2, a2);
  memcpy(v19 + 5, __src, 0x200uLL);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_20F268E70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 sub_20F268E8C@<Q0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, __n128 *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  __n128 *v5;
  __n128 *v6;
  __n128 *v7;
  __n128 *v8;
  unint64_t v9;
  __n128 *v10;
  unsigned __int32 v11;
  unint64_t v12;
  unint64_t v13;
  __n128 *v14;
  __n128 *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  __n128 *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  __n128 *v29;
  BOOL v30;
  __n128 *v31;
  __n128 *v32;
  char *v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  __n128 *v39;
  char *v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  __n128 result;

  v3 = *(uint64_t **)(a1[2] + 424);
  if (!v3)
    goto LABEL_75;
  v4 = *v3;
  if (!*(_QWORD *)(v4 + 64))
    goto LABEL_75;
  v7 = *(__n128 **)(v4 + 56);
  v5 = (__n128 *)(v4 + 56);
  v6 = v7;
  if (!v7)
    goto LABEL_75;
  v8 = (__n128 *)v5[-1].n128_u64[1];
  v9 = *a2;
  v10 = v5;
  v11 = *((_DWORD *)a2 + 2);
  do
  {
    v12 = v6[2].n128_u64[0];
    if (v12 < v9)
    {
      v6 = (__n128 *)((char *)v6 + 8);
    }
    else if (v12 == v9)
    {
      if (v6[2].n128_u32[2] < v11)
        v6 = (__n128 *)((char *)v6 + 8);
      else
        v10 = v6;
    }
    else
    {
      v10 = v6;
    }
    v6 = (__n128 *)v6->n128_u64[0];
  }
  while (v6);
  if (v10 != v5 && (v13 = v10[2].n128_u64[0], v9 >= v13) && (v9 != v13 || v10[2].n128_u32[2] <= v11))
  {
    v14 = v10;
    while (1)
    {
      v15 = v5;
      if (v10 != v5)
      {
        v16 = (char *)a1[4];
        v17 = (char *)a1[5];
        if (v17 != v16)
        {
          v18 = (v17 - v16) >> 4;
          v19 = v10[2].n128_u64[0];
          do
          {
            v20 = v18 >> 1;
            v21 = (unint64_t *)&v16[16 * (v18 >> 1)];
            if (*v21 < v19 || *v21 == v19 && *(_DWORD *)&v16[16 * v20 + 8] < v10[2].n128_u32[2])
            {
              v16 = (char *)(v21 + 2);
              v20 = v18 + ~v20;
            }
            v18 = v20;
          }
          while (v20);
        }
        v22 = v10 + 2;
        if (v16 == v17 || *(_QWORD *)v16 != v22->n128_u64[0] || *((_DWORD *)v16 + 2) != v10[2].n128_u32[2])
        {
          v23 = (char *)a1[7];
          v24 = (char *)a1[8];
          if (v24 != v23)
          {
            v25 = (v24 - v23) >> 4;
            v26 = v10[2].n128_u64[0];
            do
            {
              v27 = v25 >> 1;
              v28 = (unint64_t *)&v23[16 * (v25 >> 1)];
              if (*v28 < v26 || *v28 == v26 && *(_DWORD *)&v23[16 * v27 + 8] < v10[2].n128_u32[2])
              {
                v23 = (char *)(v28 + 2);
                v27 = v25 + ~v27;
              }
              v25 = v27;
            }
            while (v27);
          }
          if (v23 == v24 || *(_QWORD *)v23 != v22->n128_u64[0] || *((_DWORD *)v23 + 2) != v10[2].n128_u32[2])
          {
            result = *v22;
            *a3 = *v22;
            a3[1].n128_u8[0] = 1;
            return result;
          }
        }
        v29 = (__n128 *)v10->n128_u64[1];
        if (v29)
        {
          do
          {
            v15 = v29;
            v29 = (__n128 *)v29->n128_u64[0];
          }
          while (v29);
        }
        else
        {
          do
          {
            v15 = (__n128 *)v10[1].n128_u64[0];
            v30 = v15->n128_u64[0] == (_QWORD)v10;
            v10 = v15;
          }
          while (!v30);
        }
      }
      v31 = (__n128 *)v5[-1].n128_u64[1];
      if (v14 != v8)
      {
        v32 = (__n128 *)v14->n128_u64[0];
        if (v14->n128_u64[0])
        {
          do
          {
            v31 = v32;
            v32 = (__n128 *)v32->n128_u64[1];
          }
          while (v32);
        }
        else
        {
          do
          {
            v31 = (__n128 *)v14[1].n128_u64[0];
            v30 = v31->n128_u64[0] == (_QWORD)v14;
            v14 = v31;
          }
          while (v30);
        }
        v33 = (char *)a1[4];
        v34 = (char *)a1[5];
        if (v34 != v33)
        {
          v35 = (v34 - v33) >> 4;
          v36 = v31[2].n128_u64[0];
          do
          {
            v37 = v35 >> 1;
            v38 = (unint64_t *)&v33[16 * (v35 >> 1)];
            if (*v38 < v36 || *v38 == v36 && *(_DWORD *)&v33[16 * v37 + 8] < v31[2].n128_u32[2])
            {
              v33 = (char *)(v38 + 2);
              v37 = v35 + ~v37;
            }
            v35 = v37;
          }
          while (v37);
        }
        v39 = v31 + 2;
        if (v33 == v34 || *(_QWORD *)v33 != v39->n128_u64[0] || *((_DWORD *)v33 + 2) != v31[2].n128_u32[2])
        {
          v40 = (char *)a1[7];
          v41 = (char *)a1[8];
          if (v41 != v40)
          {
            v42 = (v41 - v40) >> 4;
            v43 = v31[2].n128_u64[0];
            do
            {
              v44 = v42 >> 1;
              v45 = (unint64_t *)&v40[16 * (v42 >> 1)];
              if (*v45 < v43 || *v45 == v43 && *(_DWORD *)&v40[16 * v44 + 8] < v31[2].n128_u32[2])
              {
                v40 = (char *)(v45 + 2);
                v44 = v42 + ~v44;
              }
              v42 = v44;
            }
            while (v44);
          }
          if (v40 == v41 || *(_QWORD *)v40 != v39->n128_u64[0] || *((_DWORD *)v40 + 2) != v31[2].n128_u32[2])
            break;
        }
      }
      v10 = v15;
      v14 = v31;
      if (v15 == v5)
      {
        v10 = v15;
        v14 = v31;
        if (v31 == v8)
          goto LABEL_75;
      }
    }
    result = *v39;
    *a3 = *v39;
    a3[1].n128_u8[0] = 1;
  }
  else
  {
LABEL_75:
    a3->n128_u8[0] = 0;
    a3[1].n128_u8[0] = 0;
  }
  return result;
}

uint64_t sub_20F269208(_QWORD *a1, uint64_t a2, float a3, float a4, double a5, double a6, double a7, float64x2_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  double v18;
  uint64_t v19;
  float64x2_t v20;
  double v21;
  double v22;
  float64x2_t v23;
  unint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t *v28;
  uint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int64x2_t v33;
  float64x2_t v35;
  float64x2_t v37;
  int64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  uint64_t v41;
  double v42;
  double v50;
  float64x2_t v55;
  float64x2_t v56;
  double v58;

  v9 = a1[450];
  if (!v9)
    return 1;
  v10 = **(_QWORD **)(a1[2] + 424);
  v13 = *(uint64_t **)(v10 + 56);
  v11 = (uint64_t *)(v10 + 56);
  v12 = v13;
  if (!v13)
    return 1;
  v14 = 0;
  v15 = a1[445];
  v16 = 0x6DB6DB6DB6DB6DB7 * ((a1[446] - v15) >> 4);
  _D3 = *(_QWORD *)(a2 + 56);
  v18 = *(double *)(a2 + 64);
  v19 = a1[448];
  a8.f64[0] = *(float64_t *)(a2 + 88);
  v23 = *(float64x2_t *)(a2 + 72);
  v20 = (float64x2_t)vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL);
  v21 = a3;
  v22 = a4;
  v23.f64[1] = v20.f64[0];
  while (1)
  {
    v24 = (v14 + v19) % v16;
    v25 = (uint64_t *)(v15 + 112 * v24);
    v26 = *v25;
    v27 = *((_DWORD *)v25 + 2);
    v28 = v11;
    v29 = v12;
    do
    {
      v30 = v29[4];
      if (v30 < v26)
      {
        ++v29;
      }
      else if (v30 == v26)
      {
        if (*((_DWORD *)v29 + 10) < v27)
          ++v29;
        else
          v28 = v29;
      }
      else
      {
        v28 = v29;
      }
      v29 = (uint64_t *)*v29;
    }
    while (v29);
    if (v28 != v11)
    {
      v31 = v28[4];
      if (v26 >= v31 && (v26 != v31 || *((_DWORD *)v28 + 10) <= v27))
      {
        v32 = v28[6];
        if (v32)
        {
          v20.f64[0] = *(float64_t *)(v32 + 16);
          _Q16.i64[0] = *(_QWORD *)(v32 + 40);
          v33 = *(int64x2_t *)(v32 + 24);
          _D17 = *(double *)(v32 + 64);
          v35 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v32, v33);
          _Q18 = *(float64x2_t *)(v32 + 48);
          v37 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v32, v33);
          v38 = (int64x2_t)vextq_s8((int8x16_t)vdupq_lane_s64(*(uint64_t *)&v35.f64[0], 0), (int8x16_t)vdupq_laneq_s64((int64x2_t)v35, 1), 8uLL);
          v39 = (float64x2_t)vzip1q_s64((int64x2_t)v37, v38);
          v40 = (float64x2_t)vzip2q_s64((int64x2_t)v37, v38);
          v41 = v15 + 112 * v24;
          v42 = *(double *)(v41 + 80);
          _Q24 = *(float64x2_t *)(v41 + 64);
          _Q25 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v39, _Q24.f64[0]), v40, _Q24, 1), _Q18, v42);
          __asm
          {
            FMLA            D26, D16, V24.D[1]
            FMLA            D24, D3, V25.D[1]
          }
          if (_Q24.f64[0] + v18 * (_D26 + _D17 * v42) > v21)
          {
            v50 = *(double *)(v32 + 88);
            _Q22 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v37, *(double *)(v32 + 72)), v35, *(float64x2_t *)(v32 + 72), 1), (float64x2_t)vzip1q_s64((int64x2_t)v20, _Q16), v50);
            _D23 = *(_QWORD *)(v32 + 80);
            __asm { FMLA            D21, D23, V18.D[1] }
            _D21 = _D21 + _D17 * v50;
            v55 = vnegq_f64(_Q22);
            v56 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v39, v55.f64[0]), v40, _Q22, 1), _Q18, _D21, 0);
            _Q23 = vmulq_f64(v20, v55);
            __asm
            {
              FMLS            D23, D16, V22.D[1]
              FMLS            D23, D17, V21.D[0]
            }
            v58 = *(double *)(v41 + 104);
            _Q22 = *(float64x2_t *)(v41 + 88);
            _Q7 = vmulq_f64(v20, _Q22);
            __asm { FMLA            D7, D16, V22.D[1] }
            _Q7.f64[0] = _Q7.f64[0] + _D17 * v58;
            v20 = vsubq_f64(a8, vsubq_f64(_Q7, _Q23));
            _Q16 = (int64x2_t)vsubq_f64(v23, vsubq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v39, _Q22.f64[0]), v40, _Q22, 1), _Q18, v58), v56));
            _D18 = _Q16.i64[1];
            __asm { FMLA            D17, D18, V16.D[1] }
            if (vmlad_n_f64(_D17, v20.f64[0], v20.f64[0]) < v22)
              break;
          }
        }
      }
    }
    if (++v14 == v9)
      return 1;
  }
  return 0;
}

uint64_t sub_20F269420(uint64_t a1, uint64_t a2, int a3)
{
  char *v6;
  char *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  uint64_t result;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  int v18;
  int v19;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int64x2_t v32;
  float64x2_t v34;
  unint64_t v35;
  float64x2_t v36;
  int8x16_t v37;
  float64x2_t v39;
  float64x2_t v44;
  unint64_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  unint64_t v49;
  unsigned int v50;
  uint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  float64x2_t v55;
  double v57;
  float64x2_t v59;
  double v60;
  int8x16_t v63;
  int8x16_t v64;
  float64x2_t v65;
  float64x2_t v66;
  double v67;
  float64x2_t v71;
  double v72;
  float64x2_t v73;
  int64x2_t v74;
  float64x2_t v75;
  int64x2_t v76;
  double v78;
  float64x2_t v79;
  unint64_t v80;
  unint64_t v81;
  float64x2_t v82;
  double v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  double v97;
  double v122;
  uint64_t v123;
  float64x2_t v124;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  float64x2_t v131;
  double v132;
  float64x2_t v133[4];
  float64_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  double *v143[2];
  float64x2_t *v144;
  uint64_t v145;
  double v146;

  if (!sub_20F44AAAC(a2, *(_QWORD *)(a1 + 16)))
    return 2;
  if ((*(_DWORD *)(a2 + 464) & 0xFFFFFFFD) != 0)
  {
    v6 = *(char **)(a1 + 32);
    v7 = *(char **)(a1 + 40);
    v8 = v6;
    if (v7 != v6)
    {
      v9 = (v7 - v6) >> 4;
      v10 = *(_QWORD *)a2;
      v8 = *(char **)(a1 + 32);
      do
      {
        v11 = v9 >> 1;
        v12 = (unint64_t *)&v8[16 * (v9 >> 1)];
        if (*v12 < v10 || *v12 == v10 && *(_DWORD *)&v8[16 * v11 + 8] < *(_DWORD *)(a2 + 8))
        {
          v8 = (char *)(v12 + 2);
          v11 = v9 + ~v11;
        }
        v9 = v11;
      }
      while (v11);
    }
    if (v8 != v7 && *(_QWORD *)v8 == *(_QWORD *)a2 && *((_DWORD *)v8 + 2) == *(_DWORD *)(a2 + 8))
      goto LABEL_88;
    if (v7 != v6)
    {
      v14 = (v7 - v6) >> 4;
      v15 = *(_QWORD *)(a2 + 24);
      do
      {
        v16 = v14 >> 1;
        v17 = (unint64_t *)&v6[16 * (v14 >> 1)];
        if (*v17 < v15 || *v17 == v15 && *(_DWORD *)&v6[16 * v16 + 8] < *(_DWORD *)(a2 + 32))
        {
          v6 = (char *)(v17 + 2);
          v16 = v14 + ~v16;
        }
        v14 = v16;
      }
      while (v16);
    }
    if (v6 != v7 && *(_QWORD *)v6 == *(_QWORD *)(a2 + 24) && *((_DWORD *)v6 + 2) == *(_DWORD *)(a2 + 32))
    {
LABEL_88:
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MapDataController.cpp", 2526, (uint64_t)"!this->IsWeakState(relocalization_result.query_image_id.view) && !this->IsWeakState(relocalization_result.ref_image_id.view)", 124, (uint64_t)&unk_21029C995, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_85;
      }
    }
  }
  v18 = *(_DWORD *)(a2 + 16);
  v19 = *(_DWORD *)(a2 + 40);
  if (v18 == -1 && v19 == -1)
  {
    result = sub_20F259ECC((uint64_t *)a1, (uint64_t *)(a2 + 24), (uint64_t *)a2, a2 + 48, a2 + 176, *(unsigned int *)(a2 + 464));
    if (!a3)
      goto LABEL_49;
  }
  else
  {
    if (v18 == -1 || v19 == -1)
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MapOptimization/src/PoseGraphEdgeUtil.cpp", 36, (uint64_t)"", 0, (uint64_t)"Invalid relocalization results", 30, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 200)
                                                                                           + 32))(*(_QWORD *)(a1 + 200), a2 + 24, a2, a2 + 48, a2 + 176, *(unsigned int *)(a2 + 464));
    if (!a3)
    {
LABEL_49:
      if ((_DWORD)result)
        return result;
      goto LABEL_76;
    }
  }
  if ((_DWORD)result)
    goto LABEL_49;
  if ((*(_DWORD *)(a2 + 464) & 0xFFFFFFFD) != 0)
  {
    if (*(_BYTE *)(a2 + 468))
    {
LABEL_75:
      v128 = *(_QWORD *)(a1 + 232);
      *(_QWORD *)(v128 + 24) = *(unsigned int *)(v128 + 16);
      *(_BYTE *)(v128 + 32) = 0;
      goto LABEL_76;
    }
    v21 = **(_QWORD **)(*(_QWORD *)(a1 + 16) + 424);
    v24 = *(uint64_t **)(v21 + 56);
    v22 = (uint64_t *)(v21 + 56);
    v23 = v24;
    if (!v24)
      goto LABEL_82;
    v25 = *(_QWORD *)a2;
    v26 = *(_DWORD *)(a2 + 8);
    v27 = v22;
    v28 = v23;
    do
    {
      v29 = v28[4];
      if (v29 < v25)
      {
        ++v28;
      }
      else if (v29 == v25)
      {
        if (*((_DWORD *)v28 + 10) < v26)
          ++v28;
        else
          v27 = v28;
      }
      else
      {
        v27 = v28;
      }
      v28 = (uint64_t *)*v28;
    }
    while (v28);
    if (v27 == v22 || (v30 = v27[4], v25 < v30) || v25 == v30 && *((_DWORD *)v27 + 10) > v26 || (v31 = v27[6]) == 0)
    {
LABEL_82:
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MapDataController.cpp", 2575, (uint64_t)"query_state", 11, (uint64_t)&unk_21029C995, 0, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    v36.f64[0] = *(float64_t *)(v31 + 16);
    v32 = *(int64x2_t *)(v31 + 24);
    _Q4 = *(float64x2_t *)(v31 + 48);
    v34 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v31, v32);
    v35 = vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL).u64[0];
    v46 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v31, v32);
    v36.f64[1] = *(float64_t *)(v31 + 40);
    v37 = vextq_s8((int8x16_t)v46, (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q4, 1), 8uLL);
    v32.i64[0] = *(_QWORD *)(v31 + 88);
    _Q5 = *(float64x2_t *)(v31 + 72);
    v39 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v34, _Q5.f64[0]), v46, _Q5, 1), v36, *(double *)v32.i64);
    _Q16 = vmulq_f64(_Q4, _Q5);
    _Q5.f64[0] = *(float64_t *)(v31 + 80);
    __asm { FMLA            D16, D5, V4.D[1] }
    _Q16.f64[0] = _Q16.f64[0] + *(double *)(v31 + 64) * *(double *)v32.i64;
    v44 = (float64x2_t)v32.u64[0];
    v44.f64[0] = *(float64_t *)(v31 + 48);
    v45 = vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL).u64[0];
    *(_QWORD *)&v46.f64[1] = v37.i64[0];
    v47 = (float64x2_t)*(unint64_t *)&_Q5.f64[0];
    *(_QWORD *)&v47.f64[0] = v37.i64[1];
    v48 = (float64x2_t)*(unint64_t *)(v31 + 64);
    v49 = *(_QWORD *)(a2 + 24);
    v50 = *(_DWORD *)(a2 + 32);
    v51 = v22;
    do
    {
      v52 = v23[4];
      if (v52 < v49)
      {
        ++v23;
      }
      else if (v52 == v49)
      {
        if (*((_DWORD *)v23 + 10) < v50)
          ++v23;
        else
          v51 = v23;
      }
      else
      {
        v51 = v23;
      }
      v23 = (uint64_t *)*v23;
    }
    while (v23);
    if (v51 != v22)
    {
      v53 = v51[4];
      if (v49 >= v53 && (v49 != v53 || *((_DWORD *)v51 + 10) <= v50))
      {
        v54 = v51[6];
        if (v54)
        {
          *(_QWORD *)&v39.f64[1] = v45;
          v55 = vnegq_f64(v39);
          __asm { FMOV            V17.2D, #1.0 }
          *(_QWORD *)&_Q17.f64[0] = *(_OWORD *)&vnegq_f64(_Q16);
          v57 = *(double *)(v54 + 16);
          _D21 = *(double *)(v54 + 40);
          v59 = *(float64x2_t *)(v54 + 24);
          v60 = *(double *)(v54 + 64);
          _Q24 = *(float64x2_t *)(v54 + 48);
          _Q7 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v54, (int64x2_t)v59);
          v63 = (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q7, 1);
          v64 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&_Q7.f64[0], 0);
          v65 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v54, (int64x2_t)v59);
          v66 = vmlaq_laneq_f64(vmulq_n_f64(v65, *(double *)(v54 + 72)), _Q7, *(float64x2_t *)(v54 + 72), 1);
          _Q7.f64[0] = v57;
          _Q7.f64[1] = _D21;
          v67 = *(double *)(v54 + 88);
          _Q28 = vmlaq_n_f64(v66, _Q7, v67);
          _D26 = *(_QWORD *)(v54 + 80);
          __asm { FMLA            D7, D26, V24.D[1] }
          _Q7.f64[0] = _Q7.f64[0] + v60 * v67;
          _Q16 = (int64x2_t)vextq_s8(v64, v63, 8uLL);
          v71 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v65, _Q16), _Q28.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v65, _Q16), _Q28, 1), _Q24, _Q7.f64[0]);
          __asm { FMLA            D16, D21, V28.D[1] }
          v72 = *(double *)_Q16.i64 + v60 * _Q7.f64[0];
          *(_QWORD *)&v34.f64[1] = v35;
          v73 = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v34, *(double *)v54), v46, *(float64x2_t *)v54, 1), v36, v57), (float64x2_t)0, v55);
          v74 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v44, *(double *)v54), v47, *(float64x2_t *)v54, 1), v48, v57), (float64x2_t)0, _Q17);
          v75 = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v34, v59.f64[0]), v46, v59, 1), v36, _D21), (float64x2_t)0, v55);
          v76 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v44, v59.f64[0]), v47, v59, 1), v48, _D21), (float64x2_t)0, _Q17);
          _Q22 = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v34, _Q24.f64[0]), v46, _Q24, 1), v36, v60), (float64x2_t)0, v55);
          *(_QWORD *)&v78 = *(_OWORD *)&vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v44, _Q24.f64[0]), v47, _Q24, 1), v48, v60), (float64x2_t)0, _Q17);
          v79 = vaddq_f64(v55, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v34, v71.f64[0]), v46, v71, 1), v36, v72));
          v80 = *(_OWORD *)&vaddq_f64(_Q17, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v44, v71.f64[0]), v47, v71, 1), v48, v72)) ^ 0x8000000000000000;
          v81 = *(_QWORD *)&v79.f64[1] ^ 0x8000000000000000;
          v82 = vmlaq_f64(vmlaq_f64(vmulq_f64((float64x2_t)vzip1q_s64((int64x2_t)v73, (int64x2_t)v75), (float64x2_t)vdupq_n_s64(*(_QWORD *)&v79.f64[0] ^ 0x8000000000000000)), (float64x2_t)vdupq_n_s64(*(_QWORD *)&v79.f64[1] ^ 0x8000000000000000), (float64x2_t)vzip2q_s64((int64x2_t)v73, (int64x2_t)v75)), (float64x2_t)vdupq_n_s64(v80), (float64x2_t)vzip1q_s64(v74, v76));
          _D2 = v81;
          __asm { FMLA            D1, D2, V22.D[1] }
          v85 = vmlad_n_f64(_D1, *(double *)&v80, v78);
          v87 = *(float64x2_t *)(a2 + 48);
          v86 = *(float64x2_t *)(a2 + 64);
          v89 = *(float64x2_t *)(a2 + 80);
          v88 = *(float64x2_t *)(a2 + 96);
          v91 = *(float64x2_t *)(a2 + 112);
          v90 = *(float64x2_t *)(a2 + 128);
          v93 = *(float64x2_t *)(a2 + 144);
          v92 = *(float64x2_t *)(a2 + 160);
          v136 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v86, v73.f64[0]), v88, v75.f64[0]), v90, _Q22.f64[0]), (float64x2_t)0, v92);
          v135 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v87, v73.f64[0]), v89, v75.f64[0]), v91, _Q22.f64[0]), (float64x2_t)0, v93);
          v138 = vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v86, v73, 1), v88, v75, 1), v90, _Q22, 1), (float64x2_t)0, v92);
          v137 = vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v87, v73, 1), v89, v75, 1), v91, _Q22, 1), (float64x2_t)0, v93);
          v139 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v87, *(double *)v74.i64), v89, *(double *)v76.i64), v91, v78), (float64x2_t)0, v93);
          v140 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v86, *(double *)v74.i64), v88, *(double *)v76.i64), v90, v78), (float64x2_t)0, v92);
          v141 = vaddq_f64(v93, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v87, v82.f64[0]), v89, v82, 1), v91, v85));
          v142 = vaddq_f64(v92, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v86, v82.f64[0]), v88, v82, 1), v90, v85));
          memset(v133, 0, 48);
          v144 = &v135;
          v145 = 0;
          v143[0] = (double *)v133;
          v143[1] = 0;
          sub_20E95B988(&v144, v143);
          _V1.D[1] = v133[0].f64[1];
          _D3 = v133[0].f64[1];
          __asm { FMLA            D2, D3, V1.D[1] }
          v97 = _D2 + v133[1].f64[0] * v133[1].f64[0];
          if (v97 >= 0.0000002635)
            __sincos_stret(sqrt(v97));
          _D29 = v142.f64[0];
          _V30.D[1] = v141.f64[1];
          _V1.D[1] = v133[0].f64[1];
          _Q20 = *(_OWORD *)(a2 + 256);
          _Q22 = *(_OWORD *)(a2 + 208);
          _Q17 = *(_OWORD *)(a2 + 352);
          _Q27 = *(_OWORD *)(a2 + 304);
          _Q2 = *(_OWORD *)(a2 + 448);
          _Q7 = *(_OWORD *)(a2 + 400);
          _D19 = *(_QWORD *)(a2 + 184);
          __asm
          {
            FMLA            D3, D19, V1.D[1]
            FMLA            D3, D22, V30.D[1]
            FMLA            D3, D29, V22.D[1]
          }
          _D19 = *(_QWORD *)(a2 + 232);
          __asm
          {
            FMLA            D6, D19, V1.D[1]
            FMLA            D6, D20, V30.D[1]
            FMLA            D6, D29, V20.D[1]
          }
          *(_QWORD *)&_Q20 = *(_QWORD *)(a2 + 280);
          __asm
          {
            FMLA            D19, D20, V1.D[1]
            FMLA            D19, D27, V30.D[1]
            FMLA            D19, D29, V27.D[1]
          }
          _D21 = *(_QWORD *)(a2 + 328);
          __asm
          {
            FMLA            D20, D21, V1.D[1]
            FMLA            D20, D17, V30.D[1]
            FMLA            D20, D29, V17.D[1]
          }
          _D18 = *(_QWORD *)(a2 + 376);
          __asm
          {
            FMLA            D17, D18, V1.D[1]
            FMLA            D17, D7, V30.D[1]
            FMLA            D17, D29, V7.D[1]
          }
          _D5 = *(_QWORD *)(a2 + 424);
          __asm
          {
            FMLA            D7, D5, V1.D[1]
            FMLA            D7, D2, V30.D[1]
            FMLA            D7, D29, V2.D[1]
            FMLA            D2, D6, V1.D[1]
          }
          v131 = v141;
          v132 = v142.f64[0];
          __asm { FMLA            D0, D17, V30.D[1] }
          v133[1].f64[0] = v136.f64[0];
          v133[0] = v135;
          v133[2].f64[1] = v138.f64[0];
          *(float64x2_t *)((char *)&v133[1] + 8) = v137;
          v134 = v140.f64[0];
          v133[3] = v139;
          v122 = _D0 + *(double *)&_Q7 * v142.f64[0];
          v144 = 0;
          v145 = 0;
          v146 = 0.0;
          sub_20E9733B8(v133, (double *)&v144);
          v123 = *(_QWORD *)a1;
          if (v122 < *(double *)(*(_QWORD *)a1 + 2784))
          {
            v124 = v131;
            v124.f64[1] = *(double *)vextq_s8((int8x16_t)v124, (int8x16_t)v124, 8uLL).i64;
            if (sqrt(vmulq_f64(v124, v124).f64[0] + v124.f64[1] * v124.f64[1] + v132 * v132) < *(double *)(v123 + 2776))
            {
              _V1.D[1] = v145;
              _D3 = v145;
              __asm { FMLA            D2, D3, V1.D[1] }
              if (sqrt(_D2 + v146 * v146) < *(double *)(v123 + 2768))
                goto LABEL_76;
            }
          }
          goto LABEL_75;
        }
      }
    }
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MapDataController.cpp", 2581, (uint64_t)"ref_state", 9, (uint64_t)&unk_21029C995, 0, (void (*)(void **))sub_21023DDB0);
LABEL_85:
    abort();
  }
LABEL_76:
  result = *(_QWORD *)(a1 + 336);
  if (result)
  {
    v129 = *(_QWORD *)(a1 + 16);
    v130 = *(_QWORD *)(v129 + 424);
    if (v130)
    {
      if (*(_QWORD *)(*(_QWORD *)v130 + 64))
      {
        v135.f64[0] = *(float64_t *)(v129 + 160);
        LOBYTE(v133[0].f64[0]) = 0;
        (*(void (**)(uint64_t, float64x2_t *, float64x2_t *))(*(_QWORD *)result + 48))(result, &v135, v133);
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_20F269D10(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  unint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t result;
  char **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (_QWORD *)(**(_QWORD **)(v3 + 424) + 56);
  v5 = (uint64_t *)*v4;
  if (!*v4)
    return 2;
  v6 = *a2;
  v7 = *((_DWORD *)a2 + 2);
  v8 = v4;
  do
  {
    v9 = v5[4];
    if (v9 < v6)
    {
      ++v5;
    }
    else if (v9 == v6)
    {
      if (*((_DWORD *)v5 + 10) < v7)
        ++v5;
      else
        v8 = v5;
    }
    else
    {
      v8 = v5;
    }
    v5 = (uint64_t *)*v5;
  }
  while (v5);
  if (v8 == v4)
    return 2;
  v10 = v8[4];
  if (v6 < v10)
    return 2;
  if (v6 == v10 && *((_DWORD *)v8 + 10) > v7 || !v8[6])
    return 2;
  v13 = *(_QWORD *)(v3 + 208);
  v14 = *(_QWORD *)(v3 + 216);
  v12 = (char **)(v3 + 208);
  if (v13 == v14)
    goto LABEL_31;
  while (*((_DWORD *)a2 + 116) != *(_DWORD *)(v13 + 464)
       || *((_DWORD *)a2 + 4) != *(_DWORD *)(v13 + 16)
       || v6 != *(_QWORD *)v13
       || *(_DWORD *)(v13 + 8) != v7
       || *((_DWORD *)a2 + 10) != *(_DWORD *)(v13 + 40)
       || a2[3] != *(_QWORD *)(v13 + 24)
       || *((_DWORD *)a2 + 8) != *(_DWORD *)(v13 + 32))
  {
    v13 += 472;
    if (v13 == v14)
      goto LABEL_31;
  }
  if (v13 != v14)
    return 1;
LABEL_31:
  sub_20F269ED8(v12, (__int128 *)a2);
  result = *(_QWORD *)(a1 + 336);
  if (result)
  {
    v15 = *(_QWORD *)(a1 + 16);
    v16 = *(_QWORD *)(v15 + 424);
    if (v16)
    {
      if (*(_QWORD *)(*(_QWORD *)v16 + 64))
      {
        v17 = *(_QWORD *)(v15 + 160);
        v18 = 0;
        (*(void (**)(uint64_t, uint64_t *, char *))(*(_QWORD *)result + 48))(result, &v17, &v18);
      }
    }
    return 0;
  }
  return result;
}

void sub_20F269ED8(char **a1, __int128 *a2)
{
  unint64_t v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  char v14;
  char *v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  __int128 v22;
  char *v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _OWORD *v29;
  __int128 v30;
  __int128 v31;
  _OWORD *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  char v39;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v16 = *a1;
    v17 = 0xCBEEA4E1A08AD8F3 * ((v5 - *a1) >> 3);
    v18 = v17 + 1;
    if (v17 + 1 > 0x8AD8F2FBA93868)
      sub_20E867F44();
    v19 = 0xCBEEA4E1A08AD8F3 * ((uint64_t)(v4 - (_QWORD)v16) >> 3);
    if (2 * v19 > v18)
      v18 = 2 * v19;
    if (v19 >= 0x456C797DD49C34)
      v20 = 0x8AD8F2FBA93868;
    else
      v20 = v18;
    if (v20)
    {
      if (v20 > 0x8AD8F2FBA93868)
        sub_20E877A38();
      v21 = (char *)operator new(472 * v20);
    }
    else
    {
      v21 = 0;
    }
    v22 = a2[1];
    v23 = &v21[472 * v17];
    *(_OWORD *)v23 = *a2;
    *((_OWORD *)v23 + 1) = v22;
    v24 = &v21[472 * v20];
    *(_OWORD *)(v23 + 28) = *(__int128 *)((char *)a2 + 28);
    v25 = a2[8];
    *((_OWORD *)v23 + 7) = a2[7];
    *((_OWORD *)v23 + 8) = v25;
    v26 = a2[10];
    *((_OWORD *)v23 + 9) = a2[9];
    *((_OWORD *)v23 + 10) = v26;
    v27 = a2[4];
    *((_OWORD *)v23 + 3) = a2[3];
    *((_OWORD *)v23 + 4) = v27;
    v28 = a2[6];
    *((_OWORD *)v23 + 5) = a2[5];
    *((_OWORD *)v23 + 6) = v28;
    memcpy(v23 + 176, a2 + 11, 0x125uLL);
    v15 = v23 + 472;
    if (v5 != v16)
    {
      do
      {
        v29 = v23;
        v23 -= 472;
        v30 = *(_OWORD *)(v5 - 472);
        v31 = *(_OWORD *)(v5 - 456);
        *(_OWORD *)(v23 + 28) = *(_OWORD *)(v5 - 444);
        *(_OWORD *)v23 = v30;
        *((_OWORD *)v23 + 1) = v31;
        v32 = (_OWORD *)((char *)v29 - 424);
        v33 = *(_OWORD *)(v5 - 312);
        v35 = *(_OWORD *)(v5 - 360);
        v34 = *(_OWORD *)(v5 - 344);
        v32[6] = *(_OWORD *)(v5 - 328);
        v32[7] = v33;
        v32[4] = v35;
        v32[5] = v34;
        v36 = *(_OWORD *)(v5 - 424);
        v37 = *(_OWORD *)(v5 - 408);
        v38 = *(_OWORD *)(v5 - 376);
        v32[2] = *(_OWORD *)(v5 - 392);
        v32[3] = v38;
        *v32 = v36;
        v32[1] = v37;
        memcpy((char *)v29 - 296, v5 - 296, 0x120uLL);
        v39 = *(v5 - 4);
        *((_DWORD *)v29 - 2) = *((_DWORD *)v5 - 2);
        *((_BYTE *)v29 - 4) = v39;
        v5 -= 472;
      }
      while (v5 != v16);
      v5 = *a1;
    }
    *a1 = v23;
    a1[1] = v15;
    a1[2] = v24;
    if (v5)
      operator delete(v5);
  }
  else
  {
    v6 = *a2;
    v7 = a2[1];
    *(_OWORD *)(v5 + 28) = *(__int128 *)((char *)a2 + 28);
    *(_OWORD *)v5 = v6;
    *((_OWORD *)v5 + 1) = v7;
    v8 = a2[10];
    v10 = a2[7];
    v9 = a2[8];
    *((_OWORD *)v5 + 9) = a2[9];
    *((_OWORD *)v5 + 10) = v8;
    *((_OWORD *)v5 + 7) = v10;
    *((_OWORD *)v5 + 8) = v9;
    v11 = a2[3];
    v12 = a2[4];
    v13 = a2[6];
    *((_OWORD *)v5 + 5) = a2[5];
    *((_OWORD *)v5 + 6) = v13;
    *((_OWORD *)v5 + 3) = v11;
    *((_OWORD *)v5 + 4) = v12;
    memcpy(v5 + 176, a2 + 11, 0x120uLL);
    v14 = *((_BYTE *)a2 + 468);
    *((_DWORD *)v5 + 116) = *((_DWORD *)a2 + 116);
    v5[468] = v14;
    v15 = v5 + 472;
  }
  a1[1] = v15;
}

uint64_t sub_20F26A100(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 *v5;
  __int128 *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char v16;
  __int128 *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  char v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(v3 + 208);
  v5 = *(__int128 **)(v3 + 216);
  if ((__int128 *)v4 != v5)
  {
    while (*(_QWORD *)(v4 + 24) != a2)
    {
      v4 += 472;
      if ((__int128 *)v4 == v5)
        goto LABEL_17;
    }
    if ((__int128 *)v4 != v5)
    {
      v7 = (__int128 *)(v4 + 472);
      if ((__int128 *)(v4 + 472) != v5)
      {
        do
        {
          if (*((_QWORD *)v7 + 3) != a2)
          {
            v8 = *v7;
            v9 = v7[1];
            *(_OWORD *)(v4 + 28) = *(__int128 *)((char *)v7 + 28);
            *(_OWORD *)v4 = v8;
            *(_OWORD *)(v4 + 16) = v9;
            v10 = v7[10];
            v12 = v7[7];
            v11 = v7[8];
            *(_OWORD *)(v4 + 144) = v7[9];
            *(_OWORD *)(v4 + 160) = v10;
            *(_OWORD *)(v4 + 112) = v12;
            *(_OWORD *)(v4 + 128) = v11;
            v13 = v7[3];
            v14 = v7[4];
            v15 = v7[6];
            *(_OWORD *)(v4 + 80) = v7[5];
            *(_OWORD *)(v4 + 96) = v15;
            *(_OWORD *)(v4 + 48) = v13;
            *(_OWORD *)(v4 + 64) = v14;
            memcpy((void *)(v4 + 176), v7 + 11, 0x120uLL);
            v16 = *((_BYTE *)v7 + 468);
            *(_DWORD *)(v4 + 464) = *((_DWORD *)v7 + 116);
            *(_BYTE *)(v4 + 468) = v16;
            v4 += 472;
          }
          v7 = (__int128 *)((char *)v7 + 472);
        }
        while (v7 != v5);
        v5 = *(__int128 **)(*(_QWORD *)(a1 + 16) + 216);
      }
    }
    if ((__int128 *)v4 != v5)
    {
      v17 = *(__int128 **)(v3 + 216);
      if (v5 != v17)
      {
        v18 = 8 * (((uint64_t)v5 - v4) >> 3);
        do
        {
          v19 = *(_OWORD *)(v4 + v18);
          v20 = *(_OWORD *)(v4 + v18 + 16);
          *(_OWORD *)(v4 + 28) = *(_OWORD *)(v4 + v18 + 28);
          *(_OWORD *)v4 = v19;
          *(_OWORD *)(v4 + 16) = v20;
          v21 = *(_OWORD *)(v4 + v18 + 96);
          v23 = *(_OWORD *)(v4 + v18 + 48);
          v22 = *(_OWORD *)(v4 + v18 + 64);
          *(_OWORD *)(v4 + 80) = *(_OWORD *)(v4 + v18 + 80);
          *(_OWORD *)(v4 + 96) = v21;
          *(_OWORD *)(v4 + 48) = v23;
          *(_OWORD *)(v4 + 64) = v22;
          v24 = *(_OWORD *)(v4 + v18 + 160);
          v26 = *(_OWORD *)(v4 + v18 + 112);
          v25 = *(_OWORD *)(v4 + v18 + 128);
          *(_OWORD *)(v4 + 144) = *(_OWORD *)(v4 + v18 + 144);
          *(_OWORD *)(v4 + 160) = v24;
          *(_OWORD *)(v4 + 112) = v26;
          *(_OWORD *)(v4 + 128) = v25;
          memcpy((void *)(v4 + 176), (const void *)(v4 + v18 + 176), 0x120uLL);
          v27 = *(_BYTE *)(v4 + v18 + 468);
          *(_DWORD *)(v4 + 464) = *(_DWORD *)(v4 + v18 + 464);
          *(_BYTE *)(v4 + 468) = v27;
          v4 += 472;
        }
        while ((__int128 *)(v4 + v18) != v17);
      }
      *(_QWORD *)(v3 + 216) = v4;
    }
  }
LABEL_17:
  result = *(_QWORD *)(a1 + 336);
  if (result)
  {
    v29 = *(_QWORD *)(a1 + 16);
    v30 = *(_QWORD *)(v29 + 424);
    if (v30)
    {
      if (*(_QWORD *)(*(_QWORD *)v30 + 64))
      {
        v31 = *(_QWORD *)(v29 + 160);
        v32 = 0;
        return (*(uint64_t (**)(uint64_t, uint64_t *, char *))(*(_QWORD *)result + 48))(result, &v31, &v32);
      }
    }
  }
  return result;
}

void sub_20F26A2D8(_QWORD *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  _QWORD *v6;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t *v13;
  float64x2_t v14;
  uint64_t *v15;
  uint64_t *v16;
  _QWORD *v17;
  _BYTE *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  int v27;
  _BYTE *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  _QWORD *v37;
  _BYTE *v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  std::string *v42;
  std::string::size_type size;
  _QWORD *v44;
  char v45;
  size_t v46;
  __int128 *p_dst;
  void **v48;
  _BYTE *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  __int128 *v64;
  __int128 v65;
  __int128 v66;
  unint64_t v67;
  int64x2_t v68;
  unint64_t v69;
  int64x2_t v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  int32x4_t *v81;
  uint64_t v82;
  void *v83;
  void *v84;
  uint64_t v85;
  uint64_t *v86;
  unint64_t v87;
  int32x4_t *v88;
  uint64_t v89;
  int32x4_t *v90;
  void *v91;
  void *v92;
  unint64_t v93;
  int32x4_t v94;
  int32x4_t *v95;
  int32x4_t v96;
  int32x4_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  unint64_t v112;
  unint64_t v113;
  unsigned int v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  float64x2_t v119;
  double v120;
  float64x2_t v121;
  double v122;
  double v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  double v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  _QWORD *v146;
  _QWORD *v147;
  void *v148;
  void *v149;
  void *v150;
  int v151;
  float64x2_t v152;
  uint64_t v153;
  _QWORD *v154;
  _QWORD *v155;
  _QWORD *v156;
  _QWORD *v157;
  _QWORD *v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  _QWORD *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD *v167;
  _QWORD *v168;
  uint64_t v169;
  _QWORD *v170;
  _QWORD *v171;
  int v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v176;
  const char *v177;
  size_t v178;
  unsigned __int8 v179;
  unsigned __int8 v180;
  const char *v181;
  size_t v182;
  _BYTE *v183;
  uint64_t v184;
  uint64_t v185;
  _BYTE *v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  NSObject *v190;
  size_t v191;
  std::__shared_weak_count_vtbl *v192;
  std::__shared_weak_count *v193;
  std::__shared_weak_count *v194;
  unint64_t *p_shared_owners;
  unint64_t v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  const char *v202;
  uint64_t v203;
  int v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  unint64_t v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  void *v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  _QWORD *v228;
  _QWORD *v229;
  void *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t *v233;
  _QWORD *v234;
  uint64_t *v236;
  int8x16_t v239;
  uint64_t v241;
  float64x2_t v242;
  float64x2_t v243;
  double v244;
  float64x2_t v245;
  uint64_t v246;
  double v247;
  double v250;
  float64x2_t v252;
  int8x16_t v253;
  float64x2_t v255;
  int8x16_t v256;
  int64x2_t v257;
  float64x2_t *v258;
  double v259;
  float64x2_t v261;
  float64x2_t *v262;
  float64_t v263;
  float64x2_t v264;
  uint64_t v265;
  float64x2_t v266;
  float64x2_t v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  float64x2_t v271;
  float64x2_t v272;
  float64x2_t v273;
  float64x2_t v274;
  uint64_t v275;
  int v276;
  unint64_t v277;
  unint64_t v278;
  _BYTE *v280;
  uint64_t v281;
  char v282;
  size_t v283;
  void *v284;
  _BYTE *v285;
  const void *v286;
  uint64_t v287;
  uint64_t v288;
  void **v289;
  uint64_t v290;
  const char *v291;
  size_t v292;
  unsigned __int8 v293;
  unsigned __int8 v294;
  const char *v295;
  size_t v296;
  _BYTE *v297;
  int v298;
  uint64_t v299;
  uint64_t v300;
  _BYTE *v301;
  uint64_t v302;
  uint64_t v303;
  NSObject *v304;
  size_t v305;
  void *v306;
  _QWORD *v307;
  size_t v308;
  size_t v309;
  unint64_t *v310;
  void *v311;
  uint64_t v312;
  uint64_t v313;
  unint64_t v314;
  char v315;
  _QWORD *v316;
  uint64_t v317;
  std::__shared_weak_count *v318;
  unint64_t *v319;
  unint64_t v320;
  char *v321;
  unint64_t *v322;
  unint64_t v323;
  std::__shared_weak_count *v324;
  unint64_t *v325;
  unint64_t v326;
  unint64_t v327;
  std::__shared_weak_count *v328;
  unint64_t *v329;
  unint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  const char *v336;
  uint64_t v337;
  std::__shared_weak_count *v338;
  unint64_t *v339;
  unint64_t v340;
  std::__shared_weak_count *v341;
  unint64_t *v342;
  unint64_t v343;
  unint64_t v344;
  std::__shared_weak_count *v345;
  unint64_t *v346;
  unint64_t v347;
  std::__shared_weak_count *v348;
  unint64_t *v349;
  unint64_t v350;
  std::__shared_weak_count *v351;
  unint64_t *v352;
  unint64_t v353;
  std::__shared_weak_count *v354;
  unint64_t *v355;
  unint64_t v356;
  void **v357;
  std::__shared_weak_count *v358;
  unint64_t *v359;
  unint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  const char *v365;
  int v366;
  unint64_t v367;
  _QWORD *v368;
  uint64_t v369;
  uint64_t v370;
  _QWORD *v371;
  _OWORD *v372;
  int v373;
  const char *v374;
  uint64_t v375;
  float64_t v376;
  void *v377[2];
  int64_t v378;
  uint64_t v379;
  std::string v380;
  int v381;
  const char *v382;
  __int128 v383;
  uint64_t v384;
  _BYTE v385[25];
  __int128 v386;
  void *v387[2];
  __int128 v388;
  void *v389[2];
  void *v390[2];
  __int128 v391;
  __int128 v392;
  __int128 v393;
  __int128 v394;
  __int128 __dst;
  unint64_t v396;
  char *v397;
  std::__shared_weak_count *v398;
  unint64_t *v399;
  __int128 v400;
  void *__p[2];
  _OWORD v402[3];
  void *v403[4];
  int64x2_t v404;
  __int128 v405;
  _OWORD v406[10];
  _QWORD v407[2];
  _BYTE v408[48];
  float64x2_t v409;
  float64x2_t v410;
  float64x2_t v411;
  float64x2_t v412;
  float64x2_t v413;
  float64x2_t v414;
  uint64_t v415;

  v6 = a1;
  v415 = *MEMORY[0x24BDAC8D0];
  v393 = 0u;
  v394 = 0u;
  v391 = 0u;
  v392 = 0u;
  *(_OWORD *)v389 = 0u;
  *(_OWORD *)v390 = 0u;
  *(_OWORD *)v387 = 0u;
  v388 = 0u;
  *((_QWORD *)&v386 + 1) = **(_QWORD **)(a1[2] + 424);
  v8 = a1[25];
  v9 = v386;
  *(_QWORD *)(v8 + 24) = 0;
  *(_OWORD *)(v8 + 8) = v9;
  if ((__int128 *)(v8 + 8) != &v386)
  {
    sub_20E86811C((_QWORD *)(v8 + 32), 0, 0, 0);
    sub_20E86811C((_QWORD *)(v8 + 56), (char *)v389[0], (char *)v389[1], ((char *)v389[1] - (char *)v389[0]) >> 3);
    sub_20E86811C((_QWORD *)(v8 + 80), (char *)v390[1], (char *)v391, (uint64_t)(v391 - (unint64_t)v390[1]) >> 3);
  }
  v10 = v392;
  v11 = v393;
  *(_OWORD *)(v8 + 136) = v394;
  *(_OWORD *)(v8 + 120) = v11;
  *(_OWORD *)(v8 + 104) = v10;
  v12 = v6[24];
  sub_20FCCBC60((unint64_t *)(v6[2] + 160), (std::string *)__p);
  v13 = sub_20EB07858(*(_QWORD **)(v12 + 8), (uint64_t)__p);
  v15 = v13;
  if (SBYTE7(v402[0]) < 0)
  {
    operator delete(__p[0]);
    if (v15)
      v16 = v15 + 5;
    else
      v16 = 0;
    v370 = a4;
    v371 = v6;
    if (!v15)
      goto LABEL_86;
  }
  else
  {
    if (v13)
      v16 = v13 + 5;
    else
      v16 = 0;
    v370 = a4;
    v371 = v6;
    if (!v13)
      goto LABEL_86;
  }
  if (!*((_BYTE *)v16 + 280))
    goto LABEL_86;
  sub_20E863438((uint64_t)__p);
  sub_20E86A980(v402, (uint64_t)" MapDataController::DebugLog: \n", 31);
  v17 = sub_20E86A980(v402, (uint64_t)"Submap state: ", 14);
  sub_20F270288((_DWORD *)v6 + 76, (std::string *)v408);
  if (v408[23] >= 0)
    v18 = v408;
  else
    v18 = *(_BYTE **)v408;
  if (v408[23] >= 0)
    v19 = v408[23];
  else
    v19 = *(_QWORD *)&v408[8];
  v20 = sub_20E86A980(v17, (uint64_t)v18, v19);
  sub_20E86A980(v20, (uint64_t)"\n", 1);
  if ((v408[23] & 0x80000000) != 0)
    operator delete(*(void **)v408);
  sub_20E86A980(v402, (uint64_t)" Number of states: ", 19);
  v21 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v21, (uint64_t)" regular: ", 10);
  v22 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v22, (uint64_t)" weak: ", 7);
  v23 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v23, (uint64_t)"\n", 1);
  sub_20E86A980(v402, (uint64_t)" state IDs: ", 12);
  v24 = **(_QWORD **)(v6[2] + 424);
  v25 = *(_QWORD **)(v24 + 48);
  v26 = (_QWORD *)(v24 + 56);
  if (v25 != (_QWORD *)(v24 + 56))
  {
    do
    {
      v27 = *((_DWORD *)v25 + 10);
      v380.__r_.__value_.__r.__words[0] = v25[4];
      LODWORD(v380.__r_.__value_.__r.__words[1]) = v27;
      sub_210216370((uint64_t)&v380);
      if (v408[23] >= 0)
        v28 = v408;
      else
        v28 = *(_BYTE **)v408;
      if (v408[23] >= 0)
        v29 = v408[23];
      else
        v29 = *(_QWORD *)&v408[8];
      v30 = sub_20E86A980(v402, (uint64_t)v28, v29);
      sub_20E86A980(v30, (uint64_t)", ", 2);
      if ((v408[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)v408);
        v31 = (_QWORD *)v25[1];
        if (v31)
        {
          do
          {
LABEL_35:
            v32 = v31;
            v31 = (_QWORD *)*v31;
          }
          while (v31);
          goto LABEL_24;
        }
      }
      else
      {
        v31 = (_QWORD *)v25[1];
        if (v31)
          goto LABEL_35;
      }
      do
      {
        v32 = (_QWORD *)v25[2];
        _ZF = *v32 == (_QWORD)v25;
        v25 = v32;
      }
      while (!_ZF);
LABEL_24:
      v25 = v32;
    }
    while (v32 != v26);
  }
  sub_20E86A980(v402, (uint64_t)"\n", 1);
  v33 = v371[24];
  v380.__r_.__value_.__r.__words[0] = *(_QWORD *)(v371[2] + 160);
  sub_20FCCBC60((unint64_t *)&v380, (std::string *)v408);
  v34 = sub_20EB07858(*(_QWORD **)(v33 + 8), (uint64_t)v408);
  v35 = v34;
  if ((v408[23] & 0x80000000) == 0)
  {
    if (v34)
      v36 = (uint64_t)(v34 + 5);
    else
      v36 = 0;
    if (v34)
      goto LABEL_45;
LABEL_64:
    sub_20E86A980(v402, (uint64_t)" No origina anchor\n", 19);
    goto LABEL_66;
  }
  operator delete(*(void **)v408);
  if (v35)
    v36 = (uint64_t)(v35 + 5);
  else
    v36 = 0;
  if (!v35)
    goto LABEL_64;
LABEL_45:
  v37 = sub_20E86A980(v402, (uint64_t)" origin_anchor: ", 16);
  v399 = *(unint64_t **)(v371[2] + 160);
  sub_20FCCBC60((unint64_t *)&v399, (std::string *)v408);
  if (v408[23] >= 0)
    v38 = v408;
  else
    v38 = *(_BYTE **)v408;
  if (v408[23] >= 0)
    v39 = v408[23];
  else
    v39 = *(_QWORD *)&v408[8];
  v40 = sub_20E86A980(v37, (uint64_t)v38, v39);
  v41 = sub_20E86A980(v40, (uint64_t)" base state: ", 13);
  sub_20F271158(v36, &v380);
  if ((v380.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v42 = &v380;
  else
    v42 = (std::string *)v380.__r_.__value_.__r.__words[0];
  if ((v380.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v380.__r_.__value_.__r.__words[2]);
  else
    size = v380.__r_.__value_.__l.__size_;
  v44 = sub_20E86A980(v41, (uint64_t)v42, size);
  sub_20E86A980(v44, (uint64_t)" \n", 2);
  if (SHIBYTE(v380.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v380.__r_.__value_.__l.__data_);
    if ((v408[23] & 0x80000000) != 0)
      goto LABEL_70;
  }
  else if ((v408[23] & 0x80000000) != 0)
  {
LABEL_70:
    operator delete(*(void **)v408);
    v45 = BYTE8(v405);
    if ((BYTE8(v405) & 0x10) != 0)
      goto LABEL_71;
    goto LABEL_67;
  }
LABEL_66:
  v45 = BYTE8(v405);
  if ((BYTE8(v405) & 0x10) != 0)
  {
LABEL_71:
    v49 = (_BYTE *)v405;
    if ((void *)v405 < v403[1])
    {
      *(void **)&v405 = v403[1];
      v49 = v403[1];
    }
    v48 = v403;
    goto LABEL_74;
  }
LABEL_67:
  if ((v45 & 8) == 0)
  {
    v46 = 0;
    HIBYTE(v396) = 0;
    p_dst = &__dst;
    a4 = v370;
    goto LABEL_82;
  }
  v48 = (void **)&v402[1] + 1;
  v49 = (_BYTE *)*((_QWORD *)&v402[2] + 1);
LABEL_74:
  a4 = v370;
  v50 = *v48;
  v46 = v49 - (_BYTE *)*v48;
  if (v46 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v46 >= 0x17)
  {
    v51 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v46 | 7) != 0x17)
      v51 = v46 | 7;
    v52 = v51 + 1;
    p_dst = (__int128 *)operator new(v51 + 1);
    *((_QWORD *)&__dst + 1) = v46;
    v396 = v52 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    a4 = v370;
  }
  else
  {
    HIBYTE(v396) = (_BYTE)v49 - *(_BYTE *)v48;
    p_dst = &__dst;
    if (!v46)
      goto LABEL_82;
  }
  memmove(p_dst, v50, v46);
LABEL_82:
  *((_BYTE *)p_dst + v46) = 0;
  __p[0] = *(void **)MEMORY[0x24BEDB7F0];
  v53 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
  *(_QWORD *)&v402[0] = v53;
  *((_QWORD *)&v402[0] + 1) = MEMORY[0x24BEDB848] + 16;
  if (v404.i8[15] < 0)
    operator delete(v403[3]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](v406);
  v6 = v371;
  v54 = v371[25];
  __p[0] = &__dst;
  LOBYTE(__p[1]) = 1;
  (*(void (**)(uint64_t, uint64_t *, void **))(*(_QWORD *)v54 + 24))(v54, v16, __p);
  if (SHIBYTE(v396) < 0)
    operator delete((void *)__dst);
LABEL_86:
  *(_BYTE *)a4 = 0;
  *(_BYTE *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 40) = 0;
  *(_BYTE *)(a4 + 32) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a4 + 64) = _Q0;
  *(_QWORD *)(a4 + 48) = 0;
  *(_QWORD *)(a4 + 56) = 0;
  *(_QWORD *)(a4 + 80) = 0xBFF0000000000000;
  *(_BYTE *)(a4 + 88) = 0;
  v59 = *v6;
  if (*(_BYTE *)(*v6 + 2233))
  {
    v368 = (_QWORD *)(a4 + 40);
    v380.__r_.__value_.__s.__data_[0] = 0;
    LOBYTE(v381) = 0;
    v384 = 0;
    v383 = 0uLL;
    *(_OWORD *)v385 = _Q0;
    *(_QWORD *)&v385[16] = 0xBFF0000000000000;
    v385[24] = 0;
    LOBYTE(v382) = 1;
    __dst = 0uLL;
    v396 = 0;
    v60 = **(_QWORD **)(v6[2] + 424);
    v61 = *(_QWORD **)(v60 + 48);
    v62 = (_QWORD *)(v60 + 56);
    if (v61 != (_QWORD *)(v60 + 56))
    {
      __asm { FMOV            V0.2D, #1.0 }
      v375 = *((_QWORD *)&_Q0 + 1);
      do
      {
        v64 = (__int128 *)v61[6];
        v65 = v64[3];
        v66 = *v64;
        v67 = *((_QWORD *)v64 + 2);
        v68 = vdupq_laneq_s64(*((int64x2_t *)v64 + 1), 1);
        v69 = *((_QWORD *)v64 + 5);
        v70 = vzip1q_s64(v68, *((int64x2_t *)v64 + 2));
        v68.i64[0] = *((_QWORD *)v64 + 8);
        *((_QWORD *)&v71 + 1) = v375;
        *(_QWORD *)&v71 = *((_QWORD *)v64 + 11);
        v72 = *((_OWORD *)v61 + 2);
        v405 = *(__int128 *)((char *)v64 + 72);
        v406[0] = v71;
        *(_OWORD *)&v403[2] = v65;
        v404 = v68;
        v402[2] = v70;
        *(_OWORD *)v403 = v69;
        *(_OWORD *)__p = v72;
        v402[0] = v66;
        v402[1] = v67;
        v73 = __dst;
        if (*((_QWORD *)&__dst + 1) != (_QWORD)__dst)
        {
          v74 = 0x8E38E38E38E38E39 * ((uint64_t)(*((_QWORD *)&__dst + 1) - __dst) >> 4);
          do
          {
            v75 = v74 >> 1;
            v76 = v73 + 144 * (v74 >> 1);
            if ((void *)*(_QWORD *)v76 < __p[0] || *(void **)v76 == __p[0] && *(_DWORD *)(v76 + 8) < LODWORD(__p[1]))
            {
              v73 = v76 + 144;
              v75 = v74 + ~v75;
            }
            v74 = v75;
          }
          while (v75);
        }
        if (v73 == *((_QWORD *)&__dst + 1) || *(void **)v73 != __p[0] || *(_DWORD *)(v73 + 8) != LODWORD(__p[1]))
          sub_20F052E54((char **)&__dst, v73, (uint64_t)__p);
        v77 = (_QWORD *)v61[1];
        if (v77)
        {
          do
          {
            v78 = v77;
            v77 = (_QWORD *)*v77;
          }
          while (v77);
        }
        else
        {
          do
          {
            v78 = (_QWORD *)v61[2];
            _ZF = *v78 == (_QWORD)v61;
            v61 = v78;
          }
          while (!_ZF);
        }
        v61 = v78;
      }
      while (v78 != v62);
      v59 = *v6;
    }
    if (*(_BYTE *)(v59 + 2077))
    {
      v403[0] = 0;
      *(_OWORD *)__p = 0u;
      memset(v402, 0, sizeof(v402));
      v79 = v6[2];
      v80 = *(_QWORD *)(v79 + 424);
      *(_QWORD *)v408 = v79 + 168;
      v408[8] = 1;
      if (!*(_BYTE *)(v59 + 2248))
        sub_20E866B34();
      sub_20F368C38(__p, v80, v408, *(_QWORD *)(v79 + 160), v59 + 2072, 0);
      if (*(_QWORD *)&v402[2])
      {
        *((_QWORD *)&v402[2] + 1) = *(_QWORD *)&v402[2];
        operator delete(*(void **)&v402[2]);
      }
      v81 = (int32x4_t *)__p[0];
      if (__p[0])
      {
        __p[1] = __p[0];
LABEL_150:
        operator delete(v81);
        goto LABEL_151;
      }
      goto LABEL_151;
    }
    v85 = v6[2];
    v86 = *(uint64_t **)(*(_QWORD *)(v85 + 424) + 72);
    if (!v86[13])
      goto LABEL_151;
    v87 = v86[12];
    memset(v408, 0, 24);
    if (!v87)
    {
      v88 = 0;
      goto LABEL_143;
    }
    if (v87 >> 62)
      sub_20EABADD4();
    v88 = (int32x4_t *)operator new(4 * v87);
    *(_QWORD *)v408 = v88;
    *(_QWORD *)&v408[16] = (char *)v88 + 4 * v87;
    bzero(v88, 4 * v87);
    *(_QWORD *)&v408[8] = (char *)v88 + 4 * v87;
    if (4 * v87 - 4 >= 0x1C)
    {
      v93 = ((4 * v87 - 4) >> 2) + 1;
      v89 = v93 & 0x7FFFFFFFFFFFFFF8;
      v90 = (int32x4_t *)((char *)v88 + 4 * (v93 & 0x7FFFFFFFFFFFFFF8));
      v94 = (int32x4_t)xmmword_210365350;
      v95 = v88 + 1;
      v96.i64[0] = 0x400000004;
      v96.i64[1] = 0x400000004;
      v97.i64[0] = 0x800000008;
      v97.i64[1] = 0x800000008;
      v98 = v93 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v95[-1] = v94;
        *v95 = vaddq_s32(v94, v96);
        v94 = vaddq_s32(v94, v97);
        v95 += 2;
        v98 -= 8;
      }
      while (v98);
      if (v93 == v89)
        goto LABEL_142;
    }
    else
    {
      LODWORD(v89) = 0;
      v90 = v88;
    }
    do
    {
      v90->i32[0] = v89;
      v90 = (int32x4_t *)((char *)v90 + 4);
      LODWORD(v89) = v89 + 1;
    }
    while (v90 != (int32x4_t *)((char *)v88 + 4 * v87));
LABEL_142:
    v86 = *(uint64_t **)(*(_QWORD *)(v85 + 424) + 72);
LABEL_143:
    sub_20FD328C8((uint64_t)__p, v86, (uint64_t)v408);
    v99 = (_QWORD *)v6[2];
    v100 = v99[53];
    v399 = v99 + 21;
    LOBYTE(v400) = 1;
    if (!*(_BYTE *)(*v6 + 2248))
      sub_20E866B34();
    sub_20F368C38(__p, v100, &v399, v99[20], *v6 + 2072, 0);
    if (*(_QWORD *)&v402[2])
    {
      *((_QWORD *)&v402[2] + 1) = *(_QWORD *)&v402[2];
      operator delete(*(void **)&v402[2]);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v88)
    {
      v81 = v88;
      goto LABEL_150;
    }
LABEL_151:
    v372 = (_OWORD *)(a4 + 64);
    if ((_BYTE)v381 && v380.__r_.__value_.__r.__words[0])
    {
      v380.__r_.__value_.__l.__size_ = v380.__r_.__value_.__r.__words[0];
      operator delete(v380.__r_.__value_.__l.__data_);
    }
    memset(&v380, 0, sizeof(v380));
    LOBYTE(v381) = 1;
    v101 = **(_QWORD **)(v6[2] + 424);
    v102 = *(_QWORD **)(v101 + 48);
    v103 = (_QWORD *)(v101 + 56);
    if (v102 != (_QWORD *)(v101 + 56))
    {
      do
      {
        v105 = *((_QWORD *)&__dst + 1);
        v104 = __dst;
        v106 = __dst;
        if (*((_QWORD *)&__dst + 1) != (_QWORD)__dst)
        {
          v107 = 0x8E38E38E38E38E39 * ((uint64_t)(*((_QWORD *)&__dst + 1) - __dst) >> 4);
          v108 = v102[4];
          v106 = __dst;
          do
          {
            v109 = v107 >> 1;
            v110 = v106 + 144 * (v107 >> 1);
            if (*(_QWORD *)v110 < v108 || *(_QWORD *)v110 == v108 && *(_DWORD *)(v110 + 8) < *((_DWORD *)v102 + 10))
            {
              v106 = v110 + 144;
              v109 = v107 + ~v109;
            }
            v107 = v109;
          }
          while (v109);
        }
        v111 = v102 + 4;
        if (v106 == *((_QWORD *)&__dst + 1)
          || *(_QWORD *)v106 != *v111
          || *(_DWORD *)(v106 + 8) != *((_DWORD *)v102 + 10))
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MapDataController.cpp", 3516, (uint64_t)"pre_optimize_state_inverse_poses.find(state.first) != pre_optimize_state_inverse_poses.end()", 92, (uint64_t)&unk_21029C995, 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v105 = *((_QWORD *)&__dst + 1);
          v104 = __dst;
        }
        if (v105 != v104)
        {
          v112 = 0x8E38E38E38E38E39 * ((v105 - v104) >> 4);
          v113 = v102[4];
          v114 = *((_DWORD *)v102 + 10);
          do
          {
            v115 = v112 >> 1;
            v116 = v104 + 144 * (v112 >> 1);
            if (*(_QWORD *)v116 < v113 || *(_QWORD *)v116 == v113 && *(_DWORD *)(v116 + 8) < v114)
            {
              v104 = v116 + 144;
              v115 = v112 + ~v115;
            }
            v112 = v115;
          }
          while (v115);
          if (v104 != v105)
          {
            if (*(_QWORD *)v104 == v113)
            {
              v105 = v104;
              if (*(_DWORD *)(v104 + 8) == v114)
                goto LABEL_184;
            }
            else
            {
              v105 = v104;
            }
          }
        }
        v404 = (int64x2_t)unk_2103A9B88;
        v405 = xmmword_2103A9B98;
        v406[0] = unk_2103A9BA8;
        v402[2] = xmmword_2103A9B58;
        memset(v403, 0, sizeof(v403));
        v402[0] = xmmword_2103A9B38;
        v402[1] = unk_2103A9B48;
        *(_OWORD *)__p = *(_OWORD *)v111;
        v104 = sub_20F052E54((char **)&__dst, v105, (uint64_t)__p);
LABEL_184:
        v117 = v102[6];
        _Q6.f64[0] = *(float64_t *)(v117 + 16);
        v119 = *(float64x2_t *)v117;
        v120 = *(double *)(v117 + 40);
        v121 = *(float64x2_t *)(v117 + 24);
        v122 = *(double *)(v117 + 64);
        _Q3 = *(float64x2_t *)(v117 + 48);
        v124 = *(double *)(v117 + 88);
        v126 = *(float64x2_t *)(v104 + 16);
        v125 = *(float64x2_t *)(v104 + 32);
        v127 = vmulq_n_f64(v126, _Q6.f64[0]);
        v128 = vmulq_n_f64(v125, _Q6.f64[0]);
        _Q6.f64[1] = v120;
        v129 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v117, (int64x2_t)v121), *(double *)(v117 + 72)), (float64x2_t)vzip2q_s64(*(int64x2_t *)v117, (int64x2_t)v121), *(float64x2_t *)(v117 + 72), 1), _Q6, v124);
        _D16 = *(_QWORD *)(v117 + 80);
        __asm { FMLA            D6, D16, V3.D[1] }
        _Q6.f64[0] = _Q6.f64[0] + v122 * v124;
        *(_QWORD *)&v131 = *(_OWORD *)&vnegq_f64(v129);
        *(_OWORD *)v408 = *(_OWORD *)v111;
        v133 = *(float64x2_t *)(v104 + 48);
        v132 = *(float64x2_t *)(v104 + 64);
        v135 = *(float64x2_t *)(v104 + 80);
        v134 = *(float64x2_t *)(v104 + 96);
        v136 = vmlaq_n_f64(vmulq_n_f64(v126, v119.f64[0]), v133, v121.f64[0]);
        v137 = vmlaq_n_f64(vmulq_n_f64(v125, v119.f64[0]), v132, v121.f64[0]);
        v138 = vmlaq_laneq_f64(vmulq_laneq_f64(v126, v119, 1), v133, v121, 1);
        v139 = vmlaq_laneq_f64(vmulq_laneq_f64(v125, v119, 1), v132, v121, 1);
        v141 = *(float64x2_t *)(v104 + 112);
        v140 = *(float64x2_t *)(v104 + 128);
        *(float64x2_t *)&v408[16] = vmlaq_f64(vmlaq_n_f64(v136, v135, _Q3.f64[0]), (float64x2_t)0, v141);
        *(float64x2_t *)&v408[32] = vmlaq_f64(vmlaq_n_f64(v137, v134, _Q3.f64[0]), (float64x2_t)0, v140);
        v409 = vmlaq_f64(vmlaq_laneq_f64(v138, v135, _Q3, 1), (float64x2_t)0, v141);
        v410 = vmlaq_f64(vmlaq_laneq_f64(v139, v134, _Q3, 1), (float64x2_t)0, v140);
        v411 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v127, v133, v120), v135, v122), (float64x2_t)0, v141);
        v412 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v128, v132, v120), v134, v122), (float64x2_t)0, v140);
        v413 = vaddq_f64(v141, vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v126, v131), v133, v129, 1), v135, _Q6.f64[0], 0));
        v414 = vaddq_f64(v140, vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v125, v131), v132, v129, 1), v134, _Q6.f64[0], 0));
        v142 = v380.__r_.__value_.__r.__words[0];
        if (v380.__r_.__value_.__l.__size_ != v380.__r_.__value_.__r.__words[0])
        {
          v143 = 0x8E38E38E38E38E39
               * ((uint64_t)(v380.__r_.__value_.__l.__size_ - v380.__r_.__value_.__r.__words[0]) >> 4);
          do
          {
            v144 = v143 >> 1;
            v145 = v142 + 144 * (v143 >> 1);
            if (*(_QWORD *)v145 < *(_QWORD *)v408
              || *(_QWORD *)v145 == *(_QWORD *)v408 && *(_DWORD *)(v145 + 8) < *(_DWORD *)&v408[8])
            {
              v142 = v145 + 144;
              v144 = v143 + ~v144;
            }
            v143 = v144;
          }
          while (v144);
        }
        if (v142 == v380.__r_.__value_.__l.__size_
          || *(_QWORD *)v142 != *(_QWORD *)v408
          || *(_DWORD *)(v142 + 8) != *(_DWORD *)&v408[8])
        {
          sub_20F052E54(&v380.__r_.__value_.__l.__data_, v142, (uint64_t)v408);
        }
        v146 = (_QWORD *)v102[1];
        if (v146)
        {
          do
          {
            v147 = v146;
            v146 = (_QWORD *)*v146;
          }
          while (v146);
        }
        else
        {
          do
          {
            v147 = (_QWORD *)v102[2];
            _ZF = *v147 == (_QWORD)v102;
            v102 = v147;
          }
          while (!_ZF);
        }
        v102 = v147;
      }
      while (v147 != v103);
    }
    if ((_QWORD)__dst)
    {
      *((_QWORD *)&__dst + 1) = __dst;
      operator delete((void *)__dst);
    }
    a4 = v370;
    if (*(unsigned __int8 *)(v370 + 24) == v381)
    {
      v6 = v371;
      if (*(_BYTE *)(v370 + 24))
      {
        v148 = *(void **)v370;
        if (*(_QWORD *)v370)
        {
          *(_QWORD *)(v370 + 8) = v148;
          operator delete(v148);
          *(_QWORD *)v370 = 0;
          *(_QWORD *)(v370 + 8) = 0;
          *(_QWORD *)(v370 + 16) = 0;
        }
        *(std::string *)v370 = v380;
        memset(&v380, 0, sizeof(v380));
        *(_BYTE *)(v370 + 32) = (_BYTE)v382;
        v149 = *(void **)(v370 + 40);
        if (!v149)
        {
LABEL_216:
          *(_OWORD *)(v370 + 40) = v383;
          *(_QWORD *)(v370 + 56) = v384;
          v384 = 0;
          v383 = 0uLL;
          *v372 = *(_OWORD *)v385;
          *(_OWORD *)((char *)v372 + 9) = *(_OWORD *)&v385[9];
          if ((_BYTE)v381)
          {
            v92 = (void *)v380.__r_.__value_.__r.__words[0];
            if (v380.__r_.__value_.__r.__words[0])
            {
              v380.__r_.__value_.__l.__size_ = v380.__r_.__value_.__r.__words[0];
              goto LABEL_219;
            }
          }
          goto LABEL_220;
        }
LABEL_215:
        *(_QWORD *)(v370 + 48) = v149;
        operator delete(v149);
        *v368 = 0;
        v368[1] = 0;
        v368[2] = 0;
        goto LABEL_216;
      }
    }
    else
    {
      if (!*(_BYTE *)(v370 + 24))
      {
        *(std::string *)v370 = v380;
        memset(&v380, 0, sizeof(v380));
        *(_BYTE *)(v370 + 24) = 1;
        v6 = v371;
        *(_BYTE *)(v370 + 32) = (_BYTE)v382;
        v149 = *(void **)(v370 + 40);
        if (!v149)
          goto LABEL_216;
        goto LABEL_215;
      }
      v150 = *(void **)v370;
      v6 = v371;
      if (*(_QWORD *)v370)
      {
        *(_QWORD *)(v370 + 8) = v150;
        operator delete(v150);
      }
      *(_BYTE *)(v370 + 24) = 0;
    }
    *(_BYTE *)(v370 + 32) = (_BYTE)v382;
    v149 = *(void **)(v370 + 40);
    if (!v149)
      goto LABEL_216;
    goto LABEL_215;
  }
  v82 = v6[25];
  *(_BYTE *)(v82 + 232) = a3;
  sub_20F46C2CC(v82, 1, a2, (uint64_t)__p, v14);
  if (*(unsigned __int8 *)(a4 + 24) != BYTE8(v402[0]))
  {
    if (!*(_BYTE *)(a4 + 24))
    {
      *(_OWORD *)a4 = *(_OWORD *)__p;
      *(_QWORD *)(a4 + 16) = *(_QWORD *)&v402[0];
      __p[1] = 0;
      *(_QWORD *)&v402[0] = 0;
      __p[0] = 0;
      *(_BYTE *)(a4 + 24) = 1;
      *(_BYTE *)(a4 + 32) = v402[1];
      v84 = *(void **)(a4 + 40);
      if (!v84)
        goto LABEL_132;
      goto LABEL_131;
    }
    v91 = *(void **)a4;
    if (*(_QWORD *)a4)
    {
      *(_QWORD *)(a4 + 8) = v91;
      operator delete(v91);
    }
    *(_BYTE *)(a4 + 24) = 0;
    goto LABEL_130;
  }
  if (!*(_BYTE *)(a4 + 24))
  {
LABEL_130:
    *(_BYTE *)(a4 + 32) = v402[1];
    v84 = *(void **)(a4 + 40);
    if (!v84)
      goto LABEL_132;
LABEL_131:
    *(_QWORD *)(a4 + 48) = v84;
    operator delete(v84);
    *(_QWORD *)(a4 + 40) = 0;
    *(_QWORD *)(a4 + 48) = 0;
    *(_QWORD *)(a4 + 56) = 0;
    goto LABEL_132;
  }
  v83 = *(void **)a4;
  if (*(_QWORD *)a4)
  {
    *(_QWORD *)(a4 + 8) = v83;
    operator delete(v83);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
  }
  *(_OWORD *)a4 = *(_OWORD *)__p;
  *(_QWORD *)(a4 + 16) = *(_QWORD *)&v402[0];
  __p[1] = 0;
  *(_QWORD *)&v402[0] = 0;
  __p[0] = 0;
  *(_BYTE *)(a4 + 32) = v402[1];
  v84 = *(void **)(a4 + 40);
  if (v84)
    goto LABEL_131;
LABEL_132:
  *(_OWORD *)(a4 + 40) = *(_OWORD *)((char *)&v402[1] + 8);
  *(_QWORD *)(a4 + 56) = *((_QWORD *)&v402[2] + 1);
  memset((char *)&v402[1] + 8, 0, 24);
  *(_OWORD *)(a4 + 64) = *(_OWORD *)v403;
  *(_OWORD *)(a4 + 73) = *(_OWORD *)((char *)&v403[1] + 1);
  if (BYTE8(v402[0]))
  {
    v92 = __p[0];
    if (__p[0])
    {
      __p[1] = __p[0];
LABEL_219:
      operator delete(v92);
    }
  }
LABEL_220:
  if (!*(_BYTE *)(a4 + 24)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MapDataController.cpp", 2692, (uint64_t)"map_optimization_result.opt_T_Gold_to_Gnew_per_state", 52, (uint64_t)"The delta transformation is empty", 33, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (*(_QWORD *)(a4 + 40) != *(_QWORD *)(a4 + 48))
    goto LABEL_519;
  v151 = *(unsigned __int8 *)(*v6 + 2497);
  __p[0] = (void *)1;
  LODWORD(__p[1]) = 5;
  v402[0] = xmmword_2102DCC90;
  v402[1] = xmmword_2103853D0;
  *(_QWORD *)&v402[2] = 0;
  BYTE8(v402[2]) = 0;
  v152 = 0uLL;
  memset(v403, 0, sizeof(v403));
  v404.i32[0] = 1065353216;
  v153 = v6[2];
  if (v151)
  {
    *(_QWORD *)&v408[8] = 0;
    *(_QWORD *)&v408[16] = 0;
    *(_QWORD *)v408 = &v408[8];
    sub_20F25C624((uint64_t)__p, **(_QWORD **)(v153 + 424), v408);
    sub_20E86872C((uint64_t)v408, *(_QWORD **)&v408[8]);
    v153 = v6[2];
  }
  v154 = *(_QWORD **)(*(_QWORD *)(v153 + 424) + 8);
  v157 = (_QWORD *)*v154;
  v155 = v154 + 1;
  v156 = v157;
  if (v157 == v155)
  {
    v165 = 0;
    v164 = 0;
    v163 = 0;
  }
  else
  {
    v158 = v156;
    do
    {
      v159 = v158[6];
      if (*(_BYTE *)(v159 + 192))
        v160 = v159 + 40;
      else
        v160 = 0;
      *(_BYTE *)(v160 + 150) = 0;
      v161 = (_QWORD *)v158[1];
      if (v161)
      {
        do
        {
          v162 = v161;
          v161 = (_QWORD *)*v161;
        }
        while (v161);
      }
      else
      {
        do
        {
          v162 = (_QWORD *)v158[2];
          _ZF = *v162 == (_QWORD)v158;
          v158 = v162;
        }
        while (!_ZF);
      }
      v158 = v162;
    }
    while (v162 != v155);
    v163 = 0;
    if (v151)
    {
      v164 = 0;
      v165 = 0;
      while (1)
      {
        v166 = v156[6];
        if (*(_BYTE *)(*v6 + 478))
          break;
        if (*(_QWORD *)(v166 + 208) - *(_QWORD *)(v166 + 200) == 32)
        {
          sub_20F380E74((uint64_t *)a4, v156[6], v152);
          ++v165;
LABEL_244:
          v167 = (_QWORD *)v156[1];
          if (!v167)
            goto LABEL_248;
          goto LABEL_245;
        }
        v164 += sub_20F2A6D04(*(_QWORD **)(v6[2] + 424), (uint64_t)__p, v166, (uint64_t *)(*v6 + 440));
        v167 = (_QWORD *)v156[1];
        if (!v167)
        {
          do
          {
LABEL_248:
            v168 = (_QWORD *)v156[2];
            _ZF = *v168 == (_QWORD)v156;
            v156 = v168;
          }
          while (!_ZF);
          goto LABEL_239;
        }
        do
        {
LABEL_245:
          v168 = v167;
          v167 = (_QWORD *)*v167;
        }
        while (v167);
LABEL_239:
        ++v163;
        v156 = v168;
        if (v168 == v155)
          goto LABEL_267;
      }
      sub_20F380E74((uint64_t *)a4, v156[6], v152);
      goto LABEL_244;
    }
    v165 = 0;
    do
    {
      v169 = v156[6];
      if (*(_BYTE *)(*v6 + 478))
      {
        sub_20F380E74((uint64_t *)a4, v169, v152);
      }
      else if (*(_QWORD *)(v169 + 208) - *(_QWORD *)(v169 + 200) == 32)
      {
        sub_20F380E74((uint64_t *)a4, v169, v152);
        ++v165;
      }
      v170 = (_QWORD *)v156[1];
      if (v170)
      {
        do
        {
          v171 = v170;
          v170 = (_QWORD *)*v170;
        }
        while (v170);
      }
      else
      {
        do
        {
          v171 = (_QWORD *)v156[2];
          _ZF = *v171 == (_QWORD)v156;
          v156 = v171;
        }
        while (!_ZF);
      }
      ++v163;
      v156 = v171;
    }
    while (v171 != v155);
    v164 = 0;
  }
LABEL_267:
  sub_20F24E118(v377);
  if (**((int **)v377[0] + 7) <= 3)
  {
    v172 = *((unsigned __int8 *)v377[0] + 72);
    v173 = sub_20E8C31DC((uint64_t)v377[0], "OSLogSurrogateAppender", 1, 0);
    v174 = v173;
    _ZF = !v172 && v173 == 0;
    if (!_ZF)
    {
      v366 = v172;
      v369 = v164;
      v380.__r_.__value_.__r.__words[0] = (std::string::size_type)v377;
      v380.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v380.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
      v381 = 3;
      v382 = "unknown file";
      LODWORD(v383) = 3316;
      v384 = 0;
      *(_QWORD *)v385 = 0;
      *((_QWORD *)&v383 + 1) = "unknown function";
      v176 = *(_QWORD *)v380.__r_.__value_.__l.__data_;
      v177 = (const char *)(*(_QWORD *)v380.__r_.__value_.__l.__data_ + 16);
      v365 = v177;
      if (*(char *)(*(_QWORD *)v380.__r_.__value_.__l.__data_ + 39) < 0)
      {
        v177 = *(const char **)(v176 + 16);
        v178 = *(_QWORD *)(v176 + 24);
        v367 = v174;
        v373 = v151;
        v180 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v180 & 1) != 0)
          goto LABEL_276;
      }
      else
      {
        v178 = *(unsigned __int8 *)(*(_QWORD *)v380.__r_.__value_.__l.__data_ + 39);
        v367 = v174;
        v373 = v151;
        v179 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v179 & 1) != 0)
          goto LABEL_276;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)v408);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v408);
        if (v408[24] && (v408[23] & 0x80000000) != 0)
          operator delete(*(void **)v408);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
        a4 = v370;
      }
LABEL_276:
      if (byte_254A4A4F8[23] >= 0)
        v181 = byte_254A4A4F8;
      else
        v181 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v182 = byte_254A4A4F8[23];
      else
        v182 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)v408 = os_log_create(v181, v177);
      v183 = &v408[8];
      if (v182 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v182 >= 0x17)
      {
        v184 = (v182 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v182 | 7) != 0x17)
          v184 = v182 | 7;
        v185 = v184 + 1;
        v183 = operator new(v184 + 1);
        *(_QWORD *)&v408[16] = v182;
        *(_QWORD *)&v408[24] = v185 | 0x8000000000000000;
        *(_QWORD *)&v408[8] = v183;
        a4 = v370;
      }
      else
      {
        v408[31] = v182;
        if (!v182)
        {
LABEL_290:
          v183[v182] = 0;
          v408[32] = 1;
          v186 = &v408[40];
          if (v178 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          v6 = v371;
          if (v178 >= 0x17)
          {
            v188 = (v178 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v178 | 7) != 0x17)
              v188 = v178 | 7;
            v189 = v188 + 1;
            v186 = operator new(v188 + 1);
            *(_QWORD *)&v409.f64[0] = v178;
            *(_QWORD *)&v409.f64[1] = v189 | 0x8000000000000000;
            *(_QWORD *)&v408[40] = v186;
            v187 = v373;
          }
          else
          {
            HIBYTE(v409.f64[1]) = v178;
            v187 = v373;
            if (!v178)
              goto LABEL_298;
          }
          memmove(v186, v177, v178);
LABEL_298:
          v186[v178] = 0;
          LOBYTE(v410.f64[0]) = 1;
          v190 = *(NSObject **)v408;
          if (SHIBYTE(v409.f64[1]) < 0)
            operator delete(*(void **)&v408[40]);
          if (v408[32] && (v408[31] & 0x80000000) != 0)
            operator delete(*(void **)&v408[8]);
          if (*(_QWORD *)v408)
            os_release(*(void **)v408);
          if (v367 && *(_QWORD *)(v367 + 24))
          {
            v191 = _os_log_pack_size();
            v192 = (std::__shared_weak_count_vtbl *)operator new(v191, (std::align_val_t)8uLL);
            v193 = (std::__shared_weak_count *)operator new();
            v194 = v193;
            v193->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v193->__shared_owners_;
            v193->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v193->__shared_weak_owners_ = 0;
            v193[1].__vftable = v192;
            *(_QWORD *)v408 = v192;
            *(_QWORD *)&v408[8] = v192;
            *(_QWORD *)&v408[16] = v193;
            do
              v196 = __ldxr(p_shared_owners);
            while (__stxr(v196 + 1, p_shared_owners));
            memset(&v408[24], 0, 24);
            do
              v197 = __ldaxr(p_shared_owners);
            while (__stlxr(v197 - 1, p_shared_owners));
            if (!v197)
            {
              ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
              std::__shared_weak_count::__release_weak(v194);
            }
            v198 = *(_QWORD *)v408;
            v199 = _os_log_pack_fill();
            *(_DWORD *)v199 = 134218752;
            *(_QWORD *)(v199 + 4) = v163;
            *(_WORD *)(v199 + 12) = 2048;
            *(_QWORD *)(v199 + 14) = v165;
            *(_WORD *)(v199 + 22) = 2048;
            *(_QWORD *)(v199 + 24) = v369;
            *(_WORD *)(v199 + 32) = 1024;
            *(_DWORD *)(v199 + 34) = v373;
            v200 = operator new();
            v201 = *(unsigned __int8 *)(v176 + 39);
            v202 = v365;
            if ((v201 & 0x80u) != 0)
            {
              v202 = *(const char **)(v176 + 16);
              v201 = *(_QWORD *)(v176 + 24);
            }
            *(_QWORD *)v200 = v198;
            *(_OWORD *)(v200 + 8) = *(_OWORD *)&v408[8];
            *(_QWORD *)&v408[8] = 0;
            *(_QWORD *)&v408[16] = 0;
            *(_OWORD *)(v200 + 24) = *(_OWORD *)&v408[24];
            *(_QWORD *)&v408[24] = 0;
            *(_QWORD *)&v408[32] = 0;
            *(_QWORD *)(v200 + 40) = v202;
            *(_QWORD *)(v200 + 48) = v201;
            *(_BYTE *)(v200 + 56) = 1;
            v399 = 0;
            *(_QWORD *)&__dst = v200;
            (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v367 + 24) + 40))(*(_QWORD *)(v367 + 24), &__dst);
            v203 = __dst;
            *(_QWORD *)&__dst = 0;
            v187 = v373;
            v204 = v366;
            if (v203)
            {
              v205 = *(std::__shared_weak_count **)(v203 + 32);
              if (v205)
              {
                v206 = (unint64_t *)&v205->__shared_owners_;
                do
                  v207 = __ldaxr(v206);
                while (__stlxr(v207 - 1, v206));
                if (!v207)
                {
                  ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
                  std::__shared_weak_count::__release_weak(v205);
                }
              }
              v208 = *(std::__shared_weak_count **)(v203 + 16);
              if (v208)
              {
                v209 = (unint64_t *)&v208->__shared_owners_;
                do
                  v210 = __ldaxr(v209);
                while (__stlxr(v210 - 1, v209));
                if (!v210)
                {
                  ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
                  std::__shared_weak_count::__release_weak(v208);
                }
              }
              MEMORY[0x212BC6398](v203, 0x10F0C40B62ED6C6);
              v211 = (unint64_t)v399;
              v399 = 0;
              if (v211)
              {
                v212 = *(std::__shared_weak_count **)(v211 + 32);
                if (v212)
                {
                  v213 = (unint64_t *)&v212->__shared_owners_;
                  do
                    v214 = __ldaxr(v213);
                  while (__stlxr(v214 - 1, v213));
                  if (!v214)
                  {
                    ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
                    std::__shared_weak_count::__release_weak(v212);
                  }
                }
                v215 = *(std::__shared_weak_count **)(v211 + 16);
                if (v215)
                {
                  v216 = (unint64_t *)&v215->__shared_owners_;
                  do
                    v217 = __ldaxr(v216);
                  while (__stlxr(v217 - 1, v216));
                  if (!v217)
                  {
                    ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
                    std::__shared_weak_count::__release_weak(v215);
                  }
                }
                MEMORY[0x212BC6398](v211, 0x10F0C40B62ED6C6);
              }
            }
            v218 = *(std::__shared_weak_count **)&v408[32];
            if (*(_QWORD *)&v408[32])
            {
              v219 = (unint64_t *)(*(_QWORD *)&v408[32] + 8);
              do
                v220 = __ldaxr(v219);
              while (__stlxr(v220 - 1, v219));
              if (!v220)
              {
                ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
                std::__shared_weak_count::__release_weak(v218);
              }
            }
            v221 = *(std::__shared_weak_count **)&v408[16];
            if (*(_QWORD *)&v408[16])
            {
              v222 = (unint64_t *)(*(_QWORD *)&v408[16] + 8);
              do
                v223 = __ldaxr(v222);
              while (__stlxr(v223 - 1, v222));
              if (!v223)
              {
                ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
                std::__shared_weak_count::__release_weak(v221);
              }
            }
          }
          else
          {
            os_log_type_enabled(v190, OS_LOG_TYPE_INFO);
            *(_DWORD *)v408 = 134218752;
            *(_QWORD *)&v408[4] = v163;
            *(_WORD *)&v408[12] = 2048;
            *(_QWORD *)&v408[14] = v165;
            *(_WORD *)&v408[22] = 2048;
            *(_QWORD *)&v408[24] = v369;
            *(_WORD *)&v408[32] = 1024;
            *(_DWORD *)&v408[34] = v187;
            v224 = (void *)_os_log_send_and_compose_impl();
            v204 = v366;
            if (v224)
              free(v224);
          }
          if (v204)
          {
            sub_20E8C003C((uint64_t)&v380, "total tracks: %zu, orphan tracks: %zu, triangulated tracks: %zu, do_batch_triangulation: %d", v163, v165, v369, v187);
            sub_20E863570((uint64_t)&v380);
          }
          sub_20E863570((uint64_t)&v380);
          v225 = *(std::__shared_weak_count **)v385;
          if (*(_QWORD *)v385)
          {
            v226 = (unint64_t *)(*(_QWORD *)v385 + 8);
            do
              v227 = __ldaxr(v226);
            while (__stlxr(v227 - 1, v226));
            if (!v227)
            {
              ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
              std::__shared_weak_count::__release_weak(v225);
            }
          }
          goto LABEL_357;
        }
      }
      memmove(v183, v181, v182);
      goto LABEL_290;
    }
  }
LABEL_357:
  v228 = v403[2];
  if (v403[2])
  {
    do
    {
      v229 = (_QWORD *)*v228;
      operator delete(v228);
      v228 = v229;
    }
    while (v229);
  }
  v230 = v403[0];
  v403[0] = 0;
  if (v230)
    operator delete(v230);
  v231 = v6[2];
  v232 = **(_QWORD **)(v231 + 424);
  v233 = *(uint64_t **)(v231 + 16);
  if (*(_QWORD *)(v232 + 64))
  {
    if (v233)
    {
      v234 = (_QWORD *)(v232 + 1784);
      __asm { FMOV            V0.2D, #1.0 }
      v376 = *((double *)&_Q0 + 1);
      do
      {
        v236 = sub_20E9DF85C(v234, v233 + 5);
        if (v236)
        {
          v241 = v236[5];
          v242 = *(float64x2_t *)v241;
          _Q5.f64[0] = *(float64_t *)(v241 + 40);
          v243 = *(float64x2_t *)(v241 + 24);
          v244 = *(double *)(v241 + 64);
          v245 = *(float64x2_t *)(v241 + 48);
          v246 = v236[9];
          v247 = *(double *)(v246 + 16);
          _Q2 = *(_OWORD *)v246;
          v239.i64[0] = *(_QWORD *)(v246 + 40);
          _Q18 = *(float64x2_t *)(v246 + 24);
          v250 = *(double *)(v246 + 64);
          _Q20 = *(float64x2_t *)(v246 + 48);
          v252 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v242, *(double *)v246), v243, *(float64x2_t *)v246, 1), v245, v247);
          __asm { FMLA            D21, D5, V2.D[1] }
          *(double *)_Q21.i64 = *(double *)_Q21.i64 + v244 * v247;
          v253 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v242, _Q18.f64[0]), v243, _Q18, 1), v245, *(double *)v239.i64);
          __asm { FMLA            D1, D5, V18.D[1] }
          *(double *)v239.i64 = _D1 + v244 * *(double *)v239.i64;
          v255 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v242, _Q20.f64[0]), v243, _Q20, 1), v245, v250);
          __asm { FMLA            D2, D5, V20.D[1] }
          *(double *)&_Q2 = *(double *)&_Q2 + v244 * v250;
          v256 = vextq_s8(v253, v239, 8uLL);
          v257 = vzip1q_s64(_Q21, (int64x2_t)v253);
          v258 = (float64x2_t *)v236[11];
          v259 = v258[1].f64[0];
          _Q20 = *v258;
          v261 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v242, v258->f64[0]), v243, *v258, 1), v245, v259);
          __asm { FMLA            D3, D5, V20.D[1] }
          _Q3.f64[0] = _Q3.f64[0] + v244 * v259;
          v262 = (float64x2_t *)v236[7];
          _Q5.f64[0] = v262[1].f64[0];
          *(_QWORD *)&v263 = *(_OWORD *)&vaddq_f64(_Q3, _Q5);
          *(_QWORD *)&v245.f64[0] = vdupq_laneq_s64(v257, 1).u64[0];
          *(_QWORD *)&v245.f64[1] = v256.i64[0];
          v264 = vaddq_f64(v261, *v262);
          v265 = v256.i64[1];
          *(_QWORD *)&v243.f64[0] = v257.i64[0];
          v266.f64[1] = v376;
          v266.f64[0] = v263;
          v268 = *((float64x2_t *)v233 + 4);
          v267 = *((float64x2_t *)v233 + 5);
          v270 = *((float64x2_t *)v233 + 6);
          v269 = *((float64x2_t *)v233 + 7);
          v272 = *((float64x2_t *)v233 + 8);
          v271 = *((float64x2_t *)v233 + 9);
          v274 = *((float64x2_t *)v233 + 10);
          v273 = *((float64x2_t *)v233 + 11);
          *((float64x2_t *)v233 + 12) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v252, v268.f64[0]), v245, v268, 1), v255, v267.f64[0]), v264, v267, 1);
          *((float64x2_t *)v233 + 13) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v243.f64[0], v268.f64[0]), (float64x2_t)(unint64_t)v265, v268, 1), (float64x2_t)(unint64_t)_Q2, v267.f64[0]), v266, v267, 1);
          *((float64x2_t *)v233 + 14) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v252, v270.f64[0]), v245, v270, 1), v255, v269.f64[0]), v264, v269, 1);
          *((float64x2_t *)v233 + 15) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v243.f64[0], v270.f64[0]), (float64x2_t)(unint64_t)v265, v270, 1), (float64x2_t)(unint64_t)_Q2, v269.f64[0]), v266, v269, 1);
          *((float64x2_t *)v233 + 16) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v252, v272.f64[0]), v245, v272, 1), v255, v271.f64[0]), v264, v271, 1);
          *((float64x2_t *)v233 + 17) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v243.f64[0], v272.f64[0]), (float64x2_t)(unint64_t)v265, v272, 1), (float64x2_t)(unint64_t)_Q2, v271.f64[0]), v266, v271, 1);
          *((float64x2_t *)v233 + 18) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v252, v274.f64[0]), v245, v274, 1), v255, v273.f64[0]), v264, v273, 1);
          *((float64x2_t *)v233 + 19) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v243.f64[0], v274.f64[0]), (float64x2_t)(unint64_t)v265, v274, 1), (float64x2_t)(unint64_t)_Q2, v273.f64[0]), v266, v273, 1);
        }
        v233 = (uint64_t *)*v233;
      }
      while (v233);
    }
    sub_20FCC8FF4((_QWORD *)v231);
  }
  else
  {
    for (; v233; v233 = (uint64_t *)*v233)
      sub_20FCC8E38((uint64_t *)v231, (uint64_t)(v233 + 2), (__int128 *)(v233 + 5));
  }
  v275 = v6[29];
  *(_BYTE *)(v275 + 32) = *(_BYTE *)(a4 + 32);
  ++*(_DWORD *)(v275 + 28);
  ++*(_DWORD *)(v275 + 36);
  sub_20F24E118(&v379);
  if (**(int **)(v379 + 56) <= 2)
  {
    v276 = *(unsigned __int8 *)(v379 + 72);
    v277 = sub_20E8C31DC(v379, "OSLogSurrogateAppender", 1, 0);
    v278 = v277;
    if (v276 || v277 != 0)
    {
      sub_20E863438((uint64_t)__p);
      sub_20F46D7B8(v408);
      if (v408[23] >= 0)
        v280 = v408;
      else
        v280 = *(_BYTE **)v408;
      if (v408[23] >= 0)
        v281 = v408[23];
      else
        v281 = *(_QWORD *)&v408[8];
      sub_20E86A980(v402, (uint64_t)v280, v281);
      if ((v408[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)v408);
        v282 = BYTE8(v405);
        if ((BYTE8(v405) & 0x10) == 0)
        {
LABEL_383:
          if ((v282 & 8) == 0)
          {
            v283 = 0;
            HIBYTE(v378) = 0;
            v284 = v377;
            goto LABEL_396;
          }
          v286 = (const void *)*((_QWORD *)&v402[1] + 1);
          v283 = *((_QWORD *)&v402[2] + 1) - *((_QWORD *)&v402[1] + 1);
          if (*((_QWORD *)&v402[2] + 1) - *((_QWORD *)&v402[1] + 1) > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_441:
            sub_20E860B7C();
LABEL_389:
          if (v283 >= 0x17)
          {
            v287 = (v283 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v283 | 7) != 0x17)
              v287 = v283 | 7;
            v288 = v287 + 1;
            v284 = operator new(v287 + 1);
            v377[1] = (void *)v283;
            v378 = v288 | 0x8000000000000000;
            v377[0] = v284;
          }
          else
          {
            HIBYTE(v378) = v283;
            v284 = v377;
            if (!v283)
            {
LABEL_396:
              *((_BYTE *)v284 + v283) = 0;
              v380.__r_.__value_.__r.__words[0] = (std::string::size_type)&v379;
              v380.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
              v380.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
              v381 = 2;
              v382 = "unknown file";
              LODWORD(v383) = 2707;
              v384 = 0;
              *(_QWORD *)v385 = 0;
              *((_QWORD *)&v383 + 1) = "unknown function";
              if (v378 >= 0)
                v289 = v377;
              else
                v289 = (void **)v377[0];
              v290 = *(_QWORD *)v380.__r_.__value_.__l.__data_;
              v291 = (const char *)(*(_QWORD *)v380.__r_.__value_.__l.__data_ + 16);
              v374 = v291;
              if (*(char *)(*(_QWORD *)v380.__r_.__value_.__l.__data_ + 39) < 0)
              {
                v291 = *(const char **)(v290 + 16);
                v292 = *(_QWORD *)(v290 + 24);
                v294 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                if ((v294 & 1) != 0)
                  goto LABEL_403;
              }
              else
              {
                v292 = *(unsigned __int8 *)(*(_QWORD *)v380.__r_.__value_.__l.__data_ + 39);
                v293 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                if ((v293 & 1) != 0)
                  goto LABEL_403;
              }
              if (__cxa_guard_acquire(&qword_254A4A510))
              {
                sub_20E9E46F8((uint64_t)v408);
                sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v408);
                if (v408[24] && (v408[23] & 0x80000000) != 0)
                  operator delete(*(void **)v408);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                __cxa_guard_release(&qword_254A4A510);
              }
LABEL_403:
              if (byte_254A4A4F8[23] >= 0)
                v295 = byte_254A4A4F8;
              else
                v295 = *(const char **)byte_254A4A4F8;
              if (byte_254A4A4F8[23] >= 0)
                v296 = byte_254A4A4F8[23];
              else
                v296 = *(_QWORD *)&byte_254A4A4F8[8];
              *(_QWORD *)v408 = os_log_create(v295, v291);
              v297 = &v408[8];
              if (v296 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v296 >= 0x17)
              {
                v298 = v276;
                v299 = (v296 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v296 | 7) != 0x17)
                  v299 = v296 | 7;
                v300 = v299 + 1;
                v297 = operator new(v299 + 1);
                *(_QWORD *)&v408[16] = v296;
                *(_QWORD *)&v408[24] = v300 | 0x8000000000000000;
                *(_QWORD *)&v408[8] = v297;
                v276 = v298;
              }
              else
              {
                v408[31] = v296;
                if (!v296)
                {
LABEL_417:
                  v297[v296] = 0;
                  v408[32] = 1;
                  v301 = &v408[40];
                  if (v292 > 0x7FFFFFFFFFFFFFF7)
                    sub_20E860B7C();
                  if (v292 >= 0x17)
                  {
                    v302 = (v292 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v292 | 7) != 0x17)
                      v302 = v292 | 7;
                    v303 = v302 + 1;
                    v301 = operator new(v302 + 1);
                    *(_QWORD *)&v409.f64[0] = v292;
                    *(_QWORD *)&v409.f64[1] = v303 | 0x8000000000000000;
                    *(_QWORD *)&v408[40] = v301;
                    v6 = v371;
                  }
                  else
                  {
                    HIBYTE(v409.f64[1]) = v292;
                    v6 = v371;
                    if (!v292)
                    {
LABEL_425:
                      v301[v292] = 0;
                      LOBYTE(v410.f64[0]) = 1;
                      v304 = *(NSObject **)v408;
                      if (SHIBYTE(v409.f64[1]) < 0)
                        operator delete(*(void **)&v408[40]);
                      if (v408[32] && (v408[31] & 0x80000000) != 0)
                        operator delete(*(void **)&v408[8]);
                      if (*(_QWORD *)v408)
                        os_release(*(void **)v408);
                      if (!v278 || !*(_QWORD *)(v278 + 24))
                      {
                        os_log_type_enabled(v304, OS_LOG_TYPE_DEBUG);
                        *(_DWORD *)v408 = 136315138;
                        *(_QWORD *)&v408[4] = v289;
                        v311 = (void *)_os_log_send_and_compose_impl();
                        if (v311)
                          free(v311);
                        goto LABEL_505;
                      }
                      v305 = _os_log_pack_size();
                      v306 = operator new(v305, (std::align_val_t)8uLL);
                      v307 = (_QWORD *)operator new();
                      *v307 = &off_24C9ABB80;
                      v307[1] = 0;
                      v307[2] = 0;
                      v307[3] = v306;
                      *(_QWORD *)&__dst = v306;
                      *((_QWORD *)&__dst + 1) = v306;
                      v397 = 0;
                      v398 = 0;
                      v396 = (unint64_t)v307;
                      v308 = strlen((const char *)v289);
                      if (v308 > 0x7FFFFFFFFFFFFFF7)
                        sub_20E860B7C();
                      v309 = v308;
                      if (v308 >= 0x17)
                      {
                        v312 = (v308 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v308 | 7) != 0x17)
                          v312 = v308 | 7;
                        v313 = v312 + 1;
                        v310 = (unint64_t *)operator new(v312 + 1);
                        *(_QWORD *)&v400 = v309;
                        *((_QWORD *)&v400 + 1) = v313 | 0x8000000000000000;
                        v399 = v310;
                        v6 = v371;
                      }
                      else
                      {
                        HIBYTE(v400) = v308;
                        v310 = (unint64_t *)&v399;
                        if (!v308)
                        {
LABEL_446:
                          *((_BYTE *)v310 + v309) = 0;
                          v314 = (unint64_t)v399;
                          v407[0] = v400;
                          *(_QWORD *)((char *)v407 + 7) = *(_QWORD *)((char *)&v400 + 7);
                          v315 = HIBYTE(v400);
                          v316 = operator new(0x38uLL);
                          v316[1] = 0;
                          v316[2] = 0;
                          v316[3] = off_24C9ABC20;
                          *v316 = &off_24C9ABBD0;
                          v317 = v407[0];
                          v316[4] = v314;
                          v316[5] = v317;
                          *(_QWORD *)((char *)v316 + 47) = *(_QWORD *)((char *)v407 + 7);
                          *((_BYTE *)v316 + 55) = v315;
                          v407[0] = 0;
                          *(_QWORD *)((char *)v407 + 7) = 0;
                          v318 = v398;
                          v397 = (char *)(v316 + 3);
                          v398 = (std::__shared_weak_count *)v316;
                          if (v318)
                          {
                            v319 = (unint64_t *)&v318->__shared_owners_;
                            do
                              v320 = __ldaxr(v319);
                            while (__stlxr(v320 - 1, v319));
                            if (!v320)
                            {
                              ((void (*)(std::__shared_weak_count *))v318->__on_zero_shared)(v318);
                              std::__shared_weak_count::__release_weak(v318);
                            }
                          }
                          *(_OWORD *)v408 = __dst;
                          v321 = v397;
                          *(_QWORD *)&v408[16] = v396;
                          if (v396)
                          {
                            v322 = (unint64_t *)(v396 + 8);
                            do
                              v323 = __ldxr(v322);
                            while (__stxr(v323 + 1, v322));
                          }
                          v324 = v398;
                          *(_QWORD *)&v408[24] = v321;
                          *(_QWORD *)&v408[32] = v398;
                          if (v398)
                          {
                            v325 = (unint64_t *)&v398->__shared_owners_;
                            do
                              v326 = __ldxr(v325);
                            while (__stxr(v326 + 1, v325));
                            *(_QWORD *)&v408[40] = v321;
                            do
                              v327 = __ldaxr(v325);
                            while (__stlxr(v327 - 1, v325));
                            if (!v327)
                            {
                              ((void (*)(std::__shared_weak_count *))v324->__on_zero_shared)(v324);
                              std::__shared_weak_count::__release_weak(v324);
                            }
                          }
                          else
                          {
                            *(_QWORD *)&v408[40] = v321;
                          }
                          v328 = (std::__shared_weak_count *)v396;
                          if (v396)
                          {
                            v329 = (unint64_t *)(v396 + 8);
                            do
                              v330 = __ldaxr(v329);
                            while (__stlxr(v330 - 1, v329));
                            if (!v330)
                            {
                              ((void (*)(std::__shared_weak_count *))v328->__on_zero_shared)(v328);
                              std::__shared_weak_count::__release_weak(v328);
                            }
                          }
                          v331 = *(_QWORD *)v408;
                          if (*(char *)(*(_QWORD *)&v408[40] + 31) >= 0)
                            v332 = *(_QWORD *)&v408[40] + 8;
                          else
                            v332 = *(_QWORD *)(*(_QWORD *)&v408[40] + 8);
                          v333 = _os_log_pack_fill();
                          *(_DWORD *)v333 = 136315138;
                          *(_QWORD *)(v333 + 4) = v332;
                          v334 = operator new();
                          v335 = *(unsigned __int8 *)(v290 + 39);
                          v336 = v374;
                          if ((v335 & 0x80u) != 0)
                          {
                            v336 = *(const char **)(v290 + 16);
                            v335 = *(_QWORD *)(v290 + 24);
                          }
                          *(_QWORD *)v334 = v331;
                          *(_OWORD *)(v334 + 8) = *(_OWORD *)&v408[8];
                          *(_QWORD *)&v408[8] = 0;
                          *(_QWORD *)&v408[16] = 0;
                          *(_OWORD *)(v334 + 24) = *(_OWORD *)&v408[24];
                          *(_QWORD *)&v408[24] = 0;
                          *(_QWORD *)&v408[32] = 0;
                          *(_QWORD *)(v334 + 40) = v336;
                          *(_QWORD *)(v334 + 48) = v335;
                          *(_BYTE *)(v334 + 56) = 2;
                          v399 = 0;
                          *(_QWORD *)&__dst = v334;
                          (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v278 + 24) + 40))(*(_QWORD *)(v278 + 24), &__dst);
                          v337 = __dst;
                          *(_QWORD *)&__dst = 0;
                          if (v337)
                          {
                            v338 = *(std::__shared_weak_count **)(v337 + 32);
                            if (v338)
                            {
                              v339 = (unint64_t *)&v338->__shared_owners_;
                              do
                                v340 = __ldaxr(v339);
                              while (__stlxr(v340 - 1, v339));
                              if (!v340)
                              {
                                ((void (*)(std::__shared_weak_count *))v338->__on_zero_shared)(v338);
                                std::__shared_weak_count::__release_weak(v338);
                              }
                            }
                            v341 = *(std::__shared_weak_count **)(v337 + 16);
                            if (v341)
                            {
                              v342 = (unint64_t *)&v341->__shared_owners_;
                              do
                                v343 = __ldaxr(v342);
                              while (__stlxr(v343 - 1, v342));
                              if (!v343)
                              {
                                ((void (*)(std::__shared_weak_count *))v341->__on_zero_shared)(v341);
                                std::__shared_weak_count::__release_weak(v341);
                              }
                            }
                            MEMORY[0x212BC6398](v337, 0x10F0C40B62ED6C6);
                            v344 = (unint64_t)v399;
                            v399 = 0;
                            if (v344)
                            {
                              v345 = *(std::__shared_weak_count **)(v344 + 32);
                              if (v345)
                              {
                                v346 = (unint64_t *)&v345->__shared_owners_;
                                do
                                  v347 = __ldaxr(v346);
                                while (__stlxr(v347 - 1, v346));
                                if (!v347)
                                {
                                  ((void (*)(std::__shared_weak_count *))v345->__on_zero_shared)(v345);
                                  std::__shared_weak_count::__release_weak(v345);
                                }
                              }
                              v348 = *(std::__shared_weak_count **)(v344 + 16);
                              if (v348)
                              {
                                v349 = (unint64_t *)&v348->__shared_owners_;
                                do
                                  v350 = __ldaxr(v349);
                                while (__stlxr(v350 - 1, v349));
                                if (!v350)
                                {
                                  ((void (*)(std::__shared_weak_count *))v348->__on_zero_shared)(v348);
                                  std::__shared_weak_count::__release_weak(v348);
                                }
                              }
                              MEMORY[0x212BC6398](v344, 0x10F0C40B62ED6C6);
                            }
                          }
                          v351 = *(std::__shared_weak_count **)&v408[32];
                          if (*(_QWORD *)&v408[32])
                          {
                            v352 = (unint64_t *)(*(_QWORD *)&v408[32] + 8);
                            do
                              v353 = __ldaxr(v352);
                            while (__stlxr(v353 - 1, v352));
                            if (!v353)
                            {
                              ((void (*)(std::__shared_weak_count *))v351->__on_zero_shared)(v351);
                              std::__shared_weak_count::__release_weak(v351);
                            }
                          }
                          v354 = *(std::__shared_weak_count **)&v408[16];
                          if (*(_QWORD *)&v408[16])
                          {
                            v355 = (unint64_t *)(*(_QWORD *)&v408[16] + 8);
                            do
                              v356 = __ldaxr(v355);
                            while (__stlxr(v356 - 1, v355));
                            if (!v356)
                            {
                              ((void (*)(std::__shared_weak_count *))v354->__on_zero_shared)(v354);
                              std::__shared_weak_count::__release_weak(v354);
                            }
                          }
LABEL_505:
                          if (v276)
                          {
                            v357 = v377;
                            if (v378 < 0)
                              v357 = (void **)v377[0];
                            sub_20E8C003C((uint64_t)&v380, "%s", (const char *)v357);
                            sub_20E863570((uint64_t)&v380);
                          }
                          sub_20E863570((uint64_t)&v380);
                          v358 = *(std::__shared_weak_count **)v385;
                          if (*(_QWORD *)v385)
                          {
                            v359 = (unint64_t *)(*(_QWORD *)v385 + 8);
                            do
                              v360 = __ldaxr(v359);
                            while (__stlxr(v360 - 1, v359));
                            if (!v360)
                            {
                              ((void (*)(std::__shared_weak_count *))v358->__on_zero_shared)(v358);
                              std::__shared_weak_count::__release_weak(v358);
                            }
                          }
                          if (SHIBYTE(v378) < 0)
                            operator delete(v377[0]);
                          __p[0] = *(void **)MEMORY[0x24BEDB7F0];
                          v361 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                          *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
                          *(_QWORD *)&v402[0] = v361;
                          *((_QWORD *)&v402[0] + 1) = MEMORY[0x24BEDB848] + 16;
                          if (v404.i8[15] < 0)
                            operator delete(v403[3]);
                          std::streambuf::~streambuf();
                          std::iostream::~basic_iostream();
                          MEMORY[0x212BC6290](v406);
                          goto LABEL_519;
                        }
                      }
                      memcpy(v310, v289, v309);
                      goto LABEL_446;
                    }
                  }
                  memmove(v301, v291, v292);
                  goto LABEL_425;
                }
              }
              memmove(v297, v295, v296);
              goto LABEL_417;
            }
          }
          memmove(v284, v286, v283);
          goto LABEL_396;
        }
      }
      else
      {
        v282 = BYTE8(v405);
        if ((BYTE8(v405) & 0x10) == 0)
          goto LABEL_383;
      }
      v285 = (_BYTE *)v405;
      if ((void *)v405 < v403[1])
      {
        *(void **)&v405 = v403[1];
        v285 = v403[1];
      }
      v286 = v403[0];
      v283 = v285 - (char *)v403[0];
      if ((unint64_t)(v285 - (char *)v403[0]) > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_441;
      goto LABEL_389;
    }
  }
LABEL_519:
  v362 = v6[42];
  if (v362)
  {
    v363 = v6[2];
    v364 = *(_QWORD *)(v363 + 424);
    if (v364)
    {
      if (*(_QWORD *)(*(_QWORD *)v364 + 64))
      {
        __p[0] = *(void **)(v363 + 160);
        v408[0] = 1;
        (*(void (**)(uint64_t, void **, _BYTE *))(*(_QWORD *)v362 + 48))(v362, __p, v408);
      }
    }
  }
  if (v390[1])
  {
    *(void **)&v391 = v390[1];
    operator delete(v390[1]);
  }
  if (v389[0])
  {
    v389[1] = v389[0];
    operator delete(v389[0]);
  }
  if (v387[1])
  {
    *(void **)&v388 = v387[1];
    operator delete(v387[1]);
  }
}

void sub_20F26C940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a66;
  uint64_t v66;

  if (*(_BYTE *)(v66 - 232) && *(char *)(v66 - 233) < 0)
    operator delete(*(void **)(v66 - 256));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a28);
  if (a26 < 0)
    operator delete(__p);
  sub_20E863784((uint64_t)&a66);
  sub_20F26CCE0(a17);
  sub_20E8E270C(&a40);
  _Unwind_Resume(a1);
}

uint64_t sub_20F26CCE0(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
  if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v3;
      operator delete(v3);
    }
  }
  return a1;
}

void sub_20F26CD28(uint64_t a1@<X0>, __int128 *a2@<X1>, void **a3@<X8>)
{
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  unint64_t v18;
  unsigned int v19;
  BOOL v20;
  unint64_t v21;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t **v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  __int128 v30;
  float v31;
  _QWORD *v32;
  _QWORD *v33;
  _BOOL8 v34;
  unint64_t v35;
  unint64_t v36;
  size_t prime;
  unint64_t v38;
  uint8x8_t v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  void *v44;
  void *v47[2];
  void *__p[2];
  float v49;
  void *v50;
  _DWORD *v51;
  _BYTE __dst[512];
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  sub_20F23A0A0(**(_QWORD ***)(*(_QWORD *)(a1 + 16) + 424), a2, (char **)&v50);
  *(_OWORD *)v47 = 0u;
  *(_OWORD *)__p = 0u;
  v49 = 1.0;
  v6 = v50;
  v5 = v51;
  if (v50 == v51)
    goto LABEL_87;
  v7 = 0;
  do
  {
LABEL_4:
    v8 = *(_QWORD *)(a1 + 16);
    v11 = *(_QWORD *)(v8 + 240);
    v10 = v8 + 240;
    v9 = v11;
    if (!v11)
      goto LABEL_20;
    v12 = v6[4];
    v13 = *(_QWORD *)v6;
    v14 = v10;
    v15 = v6[2];
    do
    {
      while (1)
      {
        v16 = *(_DWORD *)(v9 + 48);
        v17 = v16 >= v12;
        if (v16 != v12)
          goto LABEL_11;
        v18 = *(_QWORD *)(v9 + 32);
        if (v18 >= v13)
          break;
LABEL_6:
        v9 = *(_QWORD *)(v9 + 8);
        if (!v9)
          goto LABEL_14;
      }
      if (v18 != v13)
        goto LABEL_13;
      v17 = *(_DWORD *)(v9 + 40) >= v15;
LABEL_11:
      if (!v17)
        goto LABEL_6;
LABEL_13:
      v14 = v9;
      v9 = *(_QWORD *)v9;
    }
    while (v9);
LABEL_14:
    if (v14 == v10)
      goto LABEL_20;
    v19 = *(_DWORD *)(v14 + 48);
    v20 = v12 >= v19;
    if (v12 != v19)
      goto LABEL_19;
    v21 = *(_QWORD *)(v14 + 32);
    if (v13 < v21)
      goto LABEL_20;
    if (v13 == v21)
    {
      v20 = v15 >= *(_DWORD *)(v14 + 40);
LABEL_19:
      if (!v20)
      {
LABEL_20:
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MapDataController.cpp", 2771, (uint64_t)"image_descriptor_iter != this->data_->image_descriptors_.end()", 62, (uint64_t)"Corresponding VLAD does not exist", 33, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v12 = v6[4];
        v15 = v6[2];
        v14 = v10;
        v7 = (unint64_t)v47[1];
      }
    }
    memcpy(__dst, (const void *)(v14 + 56), sizeof(__dst));
    v22 = v15 ^ __ROR4__(v12, 13);
    if (v7)
    {
      v23 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
      v23.i16[0] = vaddlv_u8(v23);
      if (v23.u32[0] > 1uLL)
      {
        v10 = v22;
        if (v7 <= v22)
          v10 = v22 % v7;
      }
      else
      {
        v10 = ((_DWORD)v7 - 1) & v22;
      }
      v24 = (uint64_t **)*((_QWORD *)v47[0] + v10);
      if (v24)
      {
        v25 = *v24;
        if (v25)
        {
          v26 = *(_QWORD *)v6;
          if (v23.u32[0] < 2uLL)
          {
            while (1)
            {
              v28 = v25[1];
              if (v28 == v22)
              {
                if (*((_DWORD *)v25 + 8) == v12 && v25[2] == v26 && *((_DWORD *)v25 + 6) == v15)
                  goto LABEL_3;
              }
              else if ((v28 & (v7 - 1)) != v10)
              {
                goto LABEL_47;
              }
              v25 = (uint64_t *)*v25;
              if (!v25)
                goto LABEL_47;
            }
          }
          do
          {
            v27 = v25[1];
            if (v27 == v22)
            {
              if (*((_DWORD *)v25 + 8) == v12 && v25[2] == v26 && *((_DWORD *)v25 + 6) == v15)
              {
LABEL_3:
                v6 += 6;
                if (v6 == v5)
                  goto LABEL_87;
                goto LABEL_4;
              }
            }
            else
            {
              if (v27 >= v7)
                v27 %= v7;
              if (v27 != v10)
                break;
            }
            v25 = (uint64_t *)*v25;
          }
          while (v25);
        }
      }
    }
LABEL_47:
    v29 = operator new(0x228uLL);
    *v29 = 0;
    v29[1] = v22;
    v30 = *(_OWORD *)v6;
    v29[4] = *((_QWORD *)v6 + 2);
    *((_OWORD *)v29 + 1) = v30;
    memcpy(v29 + 5, __dst, 0x200uLL);
    v31 = (float)((unint64_t)__p[1] + 1);
    if (v7 && (float)(v49 * (float)v7) >= v31)
    {
      v32 = v47[0];
      v33 = (_QWORD *)*((_QWORD *)v47[0] + v10);
      if (v33)
        goto LABEL_50;
LABEL_74:
      *v29 = __p[0];
      __p[0] = v29;
      v32[v10] = __p;
      if (*v29)
      {
        v41 = *(_QWORD *)(*v29 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v41 >= v7)
            v41 %= v7;
        }
        else
        {
          v41 &= v7 - 1;
        }
        v33 = (char *)v47[0] + 8 * v41;
        goto LABEL_85;
      }
    }
    else
    {
      v34 = (v7 & (v7 - 1)) != 0;
      if (v7 < 3)
        v34 = 1;
      v35 = v34 | (2 * v7);
      v36 = vcvtps_u32_f32(v31 / v49);
      if (v35 <= v36)
        prime = v36;
      else
        prime = v35;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
        v7 = (unint64_t)v47[1];
      }
      if (prime > v7)
        goto LABEL_61;
      if (prime < v7)
      {
        v38 = vcvtps_u32_f32((float)(unint64_t)__p[1] / v49);
        if (v7 < 3 || (v39 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
        {
          v38 = std::__next_prime(v38);
        }
        else
        {
          v40 = 1 << -(char)__clz(v38 - 1);
          if (v38 >= 2)
            v38 = v40;
        }
        if (prime <= v38)
          prime = v38;
        if (prime < v7)
LABEL_61:
          sub_20E8D2B3C((uint64_t)v47, prime);
      }
      v7 = (unint64_t)v47[1];
      if (((unint64_t)v47[1] & ((unint64_t)v47[1] - 1)) != 0)
      {
        if (v47[1] <= (void *)v22)
        {
          v10 = v22 % (unint64_t)v47[1];
          v32 = v47[0];
          v33 = (_QWORD *)*((_QWORD *)v47[0] + v22 % (unint64_t)v47[1]);
          if (!v33)
            goto LABEL_74;
        }
        else
        {
          v10 = v22;
          v32 = v47[0];
          v33 = (_QWORD *)*((_QWORD *)v47[0] + v22);
          if (!v33)
            goto LABEL_74;
        }
      }
      else
      {
        v10 = (LODWORD(v47[1]) - 1) & v22;
        v32 = v47[0];
        v33 = (_QWORD *)*((_QWORD *)v47[0] + v10);
        if (!v33)
          goto LABEL_74;
      }
LABEL_50:
      *v29 = *v33;
LABEL_85:
      *v33 = v29;
    }
    ++__p[1];
    v6 += 6;
  }
  while (v6 != v5);
LABEL_87:
  sub_20F46A0E0(a3, *(_QWORD ***)(*(_QWORD *)(a1 + 16) + 424), (_QWORD *)(*(_QWORD *)(a1 + 16) + 168), (uint64_t *)a2, v47, (void **)(*(_QWORD *)(a1 + 16) + 160), (__int128 *)(*(_QWORD *)(a1 + 16) + 256), v4, (_QWORD *)(a1 + 32), 1);
  v42 = __p[0];
  if (__p[0])
  {
    do
    {
      v43 = (_QWORD *)*v42;
      operator delete(v42);
      v42 = v43;
    }
    while (v43);
  }
  v44 = v47[0];
  v47[0] = 0;
  if (v44)
    operator delete(v44);
  if (v50)
  {
    v51 = v50;
    operator delete(v50);
  }
}

void sub_20F26D258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  sub_20E8C25A8((uint64_t)&a15);
  if (!__p)
    _Unwind_Resume(a1);
  a21 = (uint64_t)__p;
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20F26D2A4(_QWORD *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char *v21;
  void *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  unsigned int v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t *v29;
  unsigned int v30;
  BOOL v31;
  unint64_t v32;
  unsigned int v33;
  BOOL v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t **v37;
  uint64_t **v38;
  unint64_t v39;
  unsigned int v40;
  unsigned int v41;
  char *v42;
  uint64_t *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unint64_t v50;
  uint64_t **v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  __int128 v56;
  char *v57;
  void *v58;
  char *v59;
  void *v60;
  void *v61;
  uint64_t v62;
  void *v63;
  char *v64;
  unint64_t v65;
  uint64_t **v66;
  uint64_t *v67;
  uint64_t v68;
  _BYTE v69[52];
  void *v70;
  _DWORD *v71;
  _BYTE __src[512];
  void *__p[68];

  __p[65] = *(void **)MEMORY[0x24BDAC8D0];
  sub_20F23A0A0(**(_QWORD ***)(a1[2] + 424), a2, (char **)&v70);
  v63 = 0;
  v64 = 0;
  v67 = 0;
  v68 = 0;
  v65 = 0;
  v66 = &v67;
  v69[48] = 0;
  memset(v69, 0, 37);
  v6 = v70;
  v5 = v71;
  if (v70 != v71)
  {
    v62 = a3;
    while (1)
    {
      v7 = *(_QWORD *)(a1[2] + 424);
      v9 = *(uint64_t **)(v7 + 40);
      v8 = *(uint64_t **)(v7 + 48);
      if (v8 != v9)
      {
        v10 = ((char *)v8 - (char *)v9) >> 4;
        v11 = v6[4];
        v12 = *(_QWORD *)v6;
        while (1)
        {
          v13 = v10 >> 1;
          v14 = &v9[2 * (v10 >> 1)];
          v15 = *v14;
          v16 = *(_DWORD *)(*v14 + 16);
          v17 = v16 >= v11;
          if (v16 != v11)
            goto LABEL_14;
          if (*(_QWORD *)v15 >= v12)
            break;
LABEL_8:
          v9 = v14 + 2;
          v13 = v10 + ~v13;
LABEL_9:
          v10 = v13;
          if (!v13)
            goto LABEL_17;
        }
        if (*(_QWORD *)v15 != v12)
          goto LABEL_9;
        v17 = *(_DWORD *)(v15 + 8) >= v6[2];
LABEL_14:
        if (v17)
          goto LABEL_9;
        goto LABEL_8;
      }
LABEL_17:
      if (v9 == v8)
        break;
      v18 = *v9;
      v19 = v8;
      if (*(_DWORD *)(*v9 + 16) == v6[4])
      {
        v19 = v8;
        if (*(_QWORD *)v18 == *(_QWORD *)v6)
        {
          if (*(_DWORD *)(v18 + 8) == v6[2])
            v19 = v9;
          else
            v19 = v8;
        }
      }
      if (v8 == v19)
        goto LABEL_26;
LABEL_27:
      v20 = *v19;
      if (*v19)
      {
        if (*(_QWORD *)(v20 + 616) == *(_QWORD *)(v20 + 624))
          goto LABEL_5;
      }
      else
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MapDataController.cpp", 2806, (uint64_t)"*frame_it != nullptr", 20, (uint64_t)&unk_21029C995, 0, (void (*)(void **))sub_21023DDB0))
        {
LABEL_90:
          abort();
        }
        v20 = *v19;
        if (*(_QWORD *)(*v19 + 616) == *(_QWORD *)(*v19 + 624))
          goto LABEL_5;
      }
      sub_20F43ABE0((uint64_t)__p, v20);
      v21 = v64;
      if ((unint64_t)v64 >= v65)
      {
        v64 = sub_20F2818AC(&v63, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
      else
      {
        *(_QWORD *)v64 = 0;
        *((_QWORD *)v21 + 1) = 0;
        *((_QWORD *)v21 + 2) = 0;
        *(_OWORD *)v21 = *(_OWORD *)__p;
        *((void **)v21 + 2) = __p[2];
        memset(__p, 0, 24);
        v22 = __p[5];
        *(_OWORD *)(v21 + 24) = *(_OWORD *)&__p[3];
        *((_QWORD *)v21 + 5) = v22;
        v64 = v21 + 48;
      }
      v23 = a1[2];
      v24 = *(uint64_t **)(v23 + 304);
      if (!v24)
        goto LABEL_5;
      v25 = (uint64_t *)(v23 + 304);
      v26 = v6[4];
      v27 = *(_QWORD *)v6;
      v28 = v6[2];
      v29 = (uint64_t *)(v23 + 304);
      do
      {
        while (1)
        {
          v30 = *((_DWORD *)v24 + 12);
          v31 = v30 >= v26;
          if (v30 != v26)
            goto LABEL_43;
          v32 = v24[4];
          if (v32 >= v27)
            break;
LABEL_38:
          v24 = (uint64_t *)v24[1];
          if (!v24)
            goto LABEL_46;
        }
        if (v32 != v27)
          goto LABEL_45;
        v31 = *((_DWORD *)v24 + 10) >= v28;
LABEL_43:
        if (!v31)
          goto LABEL_38;
LABEL_45:
        v29 = v24;
        v24 = (uint64_t *)*v24;
      }
      while (v24);
LABEL_46:
      if (v29 != v25)
      {
        v33 = *((_DWORD *)v29 + 12);
        v34 = v26 >= v33;
        if (v26 != v33)
          goto LABEL_51;
        v35 = v29[4];
        if (v27 >= v35)
        {
          if (v27 != v35)
            goto LABEL_53;
          v34 = v28 >= *((_DWORD *)v29 + 10);
LABEL_51:
          if (v34)
          {
LABEL_53:
            memcpy(__p, v29 + 7, 0x200uLL);
            memcpy(__src, __p, sizeof(__src));
            v36 = v67;
            v37 = &v67;
LABEL_55:
            v38 = v37;
            if (v36)
            {
              while (1)
              {
                v37 = (uint64_t **)v36;
                v39 = v36[4];
                if (v27 == v39)
                {
                  v40 = *((_DWORD *)v37 + 10);
                  if (v28 == v40)
                  {
                    v41 = *((_DWORD *)v37 + 12);
                    if (v26 < v41)
                      goto LABEL_54;
                    if (v41 >= v26)
                      goto LABEL_70;
                  }
                  else
                  {
                    if (v28 < v40)
                    {
LABEL_54:
                      v36 = *v37;
                      goto LABEL_55;
                    }
                    if (v40 >= v28)
                    {
LABEL_70:
                      v42 = (char *)v37;
                      goto LABEL_4;
                    }
                  }
                }
                else
                {
                  if (v27 < v39)
                    goto LABEL_54;
                  if (v39 >= v27)
                    goto LABEL_70;
                }
                v36 = v37[1];
                if (!v36)
                {
                  v38 = v37 + 1;
                  break;
                }
              }
            }
            v42 = (char *)operator new(0x238uLL);
            *((_QWORD *)v42 + 4) = v27;
            *((_DWORD *)v42 + 10) = v28;
            *((_DWORD *)v42 + 12) = v26;
            *(_OWORD *)(v42 + 72) = 0u;
            *(_OWORD *)(v42 + 88) = 0u;
            *(_OWORD *)(v42 + 104) = 0u;
            *(_OWORD *)(v42 + 120) = 0u;
            *(_OWORD *)(v42 + 136) = 0u;
            *(_OWORD *)(v42 + 152) = 0u;
            *(_OWORD *)(v42 + 168) = 0u;
            *(_OWORD *)(v42 + 184) = 0u;
            *(_OWORD *)(v42 + 200) = 0u;
            *(_OWORD *)(v42 + 216) = 0u;
            *(_OWORD *)(v42 + 232) = 0u;
            *(_OWORD *)(v42 + 248) = 0u;
            *(_OWORD *)(v42 + 264) = 0u;
            *(_OWORD *)(v42 + 280) = 0u;
            *(_OWORD *)(v42 + 56) = 0u;
            *(_OWORD *)(v42 + 296) = 0u;
            *(_OWORD *)(v42 + 312) = 0u;
            *(_OWORD *)(v42 + 328) = 0u;
            *(_OWORD *)(v42 + 344) = 0u;
            *(_OWORD *)(v42 + 360) = 0u;
            *(_OWORD *)(v42 + 376) = 0u;
            *(_OWORD *)(v42 + 392) = 0u;
            *(_OWORD *)(v42 + 408) = 0u;
            *(_OWORD *)(v42 + 424) = 0u;
            *(_OWORD *)(v42 + 440) = 0u;
            *(_OWORD *)(v42 + 456) = 0u;
            *(_OWORD *)(v42 + 472) = 0u;
            *(_OWORD *)(v42 + 488) = 0u;
            *(_OWORD *)(v42 + 504) = 0u;
            *(_OWORD *)(v42 + 520) = 0u;
            *(_OWORD *)(v42 + 536) = 0u;
            *(_OWORD *)(v42 + 552) = 0u;
            *(_QWORD *)v42 = 0;
            *((_QWORD *)v42 + 1) = 0;
            *((_QWORD *)v42 + 2) = v37;
            *v38 = (uint64_t *)v42;
            v43 = (uint64_t *)v42;
            if (*v66)
            {
              v66 = (uint64_t **)*v66;
              v43 = *v38;
            }
            sub_20E868578(v67, v43);
            ++v68;
LABEL_4:
            memcpy(v42 + 56, __src, 0x200uLL);
          }
        }
      }
LABEL_5:
      v6 += 6;
      if (v6 == v5)
      {
        v45 = (char *)v63;
        v44 = v64;
        a3 = v62;
        goto LABEL_73;
      }
    }
    v19 = v8;
LABEL_26:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MapDataController.cpp", 2805, (uint64_t)"frame_it != this->const_viodatabase()->end()", 44, (uint64_t)&unk_21029C995, 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_90;
    }
    goto LABEL_27;
  }
  v44 = 0;
  v45 = 0;
LABEL_73:
  v46 = *a1;
  *(_QWORD *)v69 = *(_QWORD *)(*a1 + 2752);
  *(_DWORD *)&v69[8] = *(_DWORD *)(v46 + 2760);
  v47 = a1[2];
  v48 = v47 + 320;
  __p[0] = *(void **)(v47 + 320);
  *(void **)((char *)&__p[1] + 4) = *(void **)(v47 + 332);
  v49 = *(_DWORD *)(v47 + 328);
  LODWORD(v47) = *(_DWORD *)(v47 + 340);
  LODWORD(__p[1]) = v49;
  HIDWORD(__p[2]) = v47;
  *(_OWORD *)&__p[3] = *(_OWORD *)(v48 + 24);
  *(void **)&v69[44] = __p[4];
  *(_OWORD *)&v69[28] = *(_OWORD *)&__p[2];
  *(_OWORD *)&v69[12] = *(_OWORD *)__p;
  if (v45 == v44)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 104) = 0;
    sub_20E86872C((uint64_t)&v66, v67);
    v55 = (char *)v63;
    if (!v63)
      goto LABEL_87;
  }
  else
  {
    *(_QWORD *)a3 = v45;
    *(_QWORD *)(a3 + 8) = v44;
    v50 = v65;
    v51 = v66;
    v64 = 0;
    v65 = 0;
    v63 = 0;
    *(_QWORD *)(a3 + 16) = v50;
    *(_QWORD *)(a3 + 24) = v51;
    v52 = v67;
    v53 = v68;
    *(_QWORD *)(a3 + 32) = v67;
    v54 = a3 + 32;
    *(_QWORD *)(a3 + 40) = v53;
    if (v53)
    {
      v52[2] = v54;
      v52 = 0;
      v66 = &v67;
      v67 = 0;
      v68 = 0;
    }
    else
    {
      *(_QWORD *)(a3 + 24) = v54;
    }
    v56 = *(_OWORD *)&v69[16];
    *(_OWORD *)(a3 + 48) = *(_OWORD *)v69;
    *(_OWORD *)(a3 + 64) = v56;
    *(_OWORD *)(a3 + 80) = *(_OWORD *)&v69[32];
    *(_DWORD *)(a3 + 96) = *(_DWORD *)&v69[48];
    *(_BYTE *)(a3 + 104) = 1;
    sub_20E86872C((uint64_t)&v66, v52);
    v55 = (char *)v63;
    if (!v63)
      goto LABEL_87;
  }
  v57 = v64;
  v58 = v55;
  if (v64 != v55)
  {
    v59 = v64;
    do
    {
      v61 = (void *)*((_QWORD *)v59 - 6);
      v59 -= 48;
      v60 = v61;
      if (v61)
      {
        *((_QWORD *)v57 - 5) = v60;
        operator delete(v60);
      }
      v57 = v59;
    }
    while (v59 != v55);
    v58 = v63;
  }
  v64 = v55;
  operator delete(v58);
LABEL_87:
  if (v70)
  {
    v71 = v70;
    operator delete(v70);
  }
}

void sub_20F26D8E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  sub_20EE5B500(&a11);
  if (!__p)
    _Unwind_Resume(a1);
  a25 = (uint64_t)__p;
  operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL sub_20F26D930(_QWORD *a1, uint64_t a2)
{
  int v4;
  uint64_t **v5;
  uint64_t **v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t **v10;
  uint64_t **v11;
  unsigned int v12;
  uint64_t *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t *v16;
  unsigned int v17;
  _QWORD *v18;
  __int128 v19;
  uint64_t *v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t **v25;
  BOOL v26;
  char *v27;
  uint64_t *v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t **v32;
  uint64_t v33;
  uint64_t *v34;
  _QWORD *v35;
  uint64_t *v36;
  uint64_t **v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t **v51;
  uint64_t **v52;
  BOOL v53;
  uint64_t v54;
  uint64_t i;
  void *__p;
  char *v58;
  char *v59;
  uint64_t **v60;
  uint64_t *v61;
  uint64_t v62;
  float64x2_t v63[8];
  unsigned __int8 v64;
  __int128 v65;

  sub_20F4692BC((uint64_t *)a2, a1[2], (uint64_t)v63);
  v4 = v64;
  if (!v64)
    return v4 != 0;
  sub_20F46B1C4(a2, v63);
  sub_20F46583C(a2, *(uint64_t **)(a1[2] + 424));
  v62 = 0;
  v61 = 0;
  v60 = &v61;
  v5 = *(uint64_t ***)a2;
  v6 = *(uint64_t ***)(a2 + 8);
  if (*(uint64_t ***)a2 == v6)
    goto LABEL_80;
  v7 = 0;
  do
  {
    v8 = *v5;
    v9 = v61;
    v10 = &v61;
    v11 = &v61;
    if (v61)
    {
      v12 = *((_DWORD *)v8 + 4);
      v13 = (uint64_t *)*v8;
      v14 = *((_DWORD *)v8 + 2);
      while (1)
      {
        while (1)
        {
          v11 = (uint64_t **)v9;
          v15 = *((_DWORD *)v9 + 12);
          if (v12 == v15)
            break;
          if (v12 >= v15)
          {
            if (v15 >= v12)
              goto LABEL_5;
            goto LABEL_19;
          }
LABEL_8:
          v9 = *v11;
          v10 = v11;
          if (!*v11)
            goto LABEL_21;
        }
        v16 = v11[4];
        if (v13 < v16)
          goto LABEL_8;
        if (v13 != v16)
        {
          if (v16 >= v13)
            goto LABEL_5;
          goto LABEL_19;
        }
        v17 = *((_DWORD *)v11 + 10);
        if (v14 < v17)
          goto LABEL_8;
        if (v17 >= v14)
          goto LABEL_5;
LABEL_19:
        v9 = v11[1];
        if (!v9)
        {
          v10 = v11 + 1;
          break;
        }
      }
    }
LABEL_21:
    v18 = operator new(0x38uLL);
    v19 = *(_OWORD *)v8;
    v18[6] = v8[2];
    *((_OWORD *)v18 + 2) = v19;
    *v18 = 0;
    v18[1] = 0;
    v18[2] = v11;
    *v10 = v18;
    if (*v60)
    {
      v60 = (uint64_t **)*v60;
      v18 = *v10;
    }
    sub_20E868578(v61, v18);
    v7 = ++v62;
LABEL_5:
    v5 += 69;
  }
  while (v5 != v6);
  if (v7)
  {
    v20 = (uint64_t *)v60;
    if (v60 != &v61)
    {
      v21 = 0;
      v22 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[2] + 424) + 8) + 24);
      do
      {
        v23 = sub_20E9DF85C(v22, v20 + 4);
        if (v23 && v23[8] > (unint64_t)v21)
          v21 = v23[8];
        v24 = (uint64_t *)v20[1];
        if (v24)
        {
          do
          {
            v25 = (uint64_t **)v24;
            v24 = (uint64_t *)*v24;
          }
          while (v24);
        }
        else
        {
          do
          {
            v25 = (uint64_t **)v20[2];
            v26 = *v25 == v20;
            v20 = (uint64_t *)v25;
          }
          while (!v26);
        }
        v20 = (uint64_t *)v25;
      }
      while (v25 != &v61);
      if (v21)
      {
        v27 = (char *)operator new(16 * v21);
        __p = v27;
        v58 = v27;
        v59 = &v27[16 * v21];
        v28 = (uint64_t *)v60;
        if (v60 == &v61)
          goto LABEL_79;
        if (v7 == 1)
        {
          do
          {
            v29 = sub_20E9DF85C(v22, v28 + 4);
            if (v29)
            {
              v30 = (_QWORD *)v29[7];
              while (v30)
              {
                v33 = v30[3];
                v30 = (_QWORD *)*v30;
                if (*(_BYTE *)(v33 + 192))
                  *(_BYTE *)(v33 + 190) = 0;
              }
            }
            v31 = (uint64_t *)v28[1];
            if (v31)
            {
              do
              {
                v32 = (uint64_t **)v31;
                v31 = (uint64_t *)*v31;
              }
              while (v31);
            }
            else
            {
              do
              {
                v32 = (uint64_t **)v28[2];
                v26 = *v32 == v28;
                v28 = (uint64_t *)v32;
              }
              while (!v26);
            }
            v28 = (uint64_t *)v32;
          }
          while (v32 != &v61);
        }
        else
        {
          do
          {
            v34 = sub_20E9DF85C(v22, v28 + 4);
            if (v34)
            {
              v35 = (_QWORD *)v34[7];
              while (v35)
              {
                v38 = v35;
                v39 = v35[3];
                v41 = *(_QWORD *)(v39 + 24);
                v40 = *(_QWORD *)(v39 + 32);
                *(_QWORD *)&v65 = v41;
                *((_QWORD *)&v65 + 1) = v40;
                v35 = (_QWORD *)*v35;
                if (*(_BYTE *)(v39 + 192))
                {
                  v42 = (char *)__p;
                  if (v58 != __p)
                  {
                    v43 = (v58 - (_BYTE *)__p) >> 4;
                    do
                    {
                      v44 = v43 >> 1;
                      v45 = &v42[16 * (v43 >> 1)];
                      if (*(_QWORD *)v45 < v41
                        || *(_QWORD *)v45 == v41 && *(_DWORD *)&v42[16 * v44 + 8] < v40)
                      {
                        v42 = v45 + 16;
                        v44 = v43 + ~v44;
                      }
                      v43 = v44;
                    }
                    while (v44);
                  }
                  if (v42 == v58 || *(_QWORD *)v42 != v41 || *((_DWORD *)v42 + 2) != (_DWORD)v40)
                  {
                    sub_20F0527A0((char **)&__p, v42, &v65);
                    v46 = v38[3];
                    if (*(_BYTE *)(v46 + 192))
                      v47 = v46 + 40;
                    else
                      v47 = 0;
                    *(_BYTE *)(v47 + 150) = 0;
                  }
                }
              }
            }
            v36 = (uint64_t *)v28[1];
            if (v36)
            {
              do
              {
                v37 = (uint64_t **)v36;
                v36 = (uint64_t *)*v36;
              }
              while (v36);
            }
            else
            {
              do
              {
                v37 = (uint64_t **)v28[2];
                v26 = *v37 == v28;
                v28 = (uint64_t *)v37;
              }
              while (!v26);
            }
            v28 = (uint64_t *)v37;
          }
          while (v37 != &v61);
        }
        v27 = (char *)__p;
        if (__p)
        {
LABEL_79:
          v58 = v27;
          operator delete(v27);
        }
      }
    }
  }
LABEL_80:
  v48 = a1[2];
  if (*(_DWORD *)(a2 + 952) != *(_DWORD *)(v48 + 256)
    || *(_DWORD *)(a2 + 956) != *(_DWORD *)(v48 + 260)
    || *(_DWORD *)(a2 + 960) != *(_DWORD *)(v48 + 264)
    || *(_DWORD *)(a2 + 964) != *(_DWORD *)(v48 + 268)
    || *(_DWORD *)(a2 + 968) != *(_DWORD *)(v48 + 272)
    || *(_DWORD *)(a2 + 972) != *(_DWORD *)(v48 + 276))
  {
    goto LABEL_93;
  }
  v49 = *(unsigned __int8 *)(v48 + 292);
  if (*(_BYTE *)(a2 + 988) && *(_BYTE *)(v48 + 292))
  {
    if (*(_DWORD *)(a2 + 976) == *(_DWORD *)(v48 + 280) && *(_DWORD *)(a2 + 980) == *(_DWORD *)(v48 + 284))
    {
      v50 = *(_DWORD *)(v48 + 288);
      v51 = *(uint64_t ***)a2;
      v52 = *(uint64_t ***)(a2 + 8);
      v53 = *(_QWORD *)a2 == (_QWORD)v52;
      if (*(_DWORD *)(a2 + 984) != v50)
        goto LABEL_91;
LABEL_96:
      if (!v53)
      {
        do
        {
          memmove(&__p, v51 + 2, 0x200uLL);
          sub_20F2684A4(a1, &__p, *v51);
          v51 += 69;
        }
        while (v51 != v52);
      }
      goto LABEL_98;
    }
LABEL_93:
    v51 = *(uint64_t ***)a2;
    v52 = *(uint64_t ***)(a2 + 8);
    if (*(uint64_t ***)a2 == v52)
      goto LABEL_98;
    do
    {
LABEL_102:
      sub_20F24E20C((uint64_t)a1, (char ***)*v51 + 72, *v51);
      v51 += 69;
    }
    while (v51 != v52);
    goto LABEL_98;
  }
  v51 = *(uint64_t ***)a2;
  v52 = *(uint64_t ***)(a2 + 8);
  v53 = *(_QWORD *)a2 == (_QWORD)v52;
  if ((*(_BYTE *)(a2 + 988) != 0) == (v49 != 0))
    goto LABEL_96;
LABEL_91:
  if (!v53)
    goto LABEL_102;
LABEL_98:
  v54 = *(_QWORD *)(a2 + 904);
  for (i = *(_QWORD *)(a2 + 912); v54 != i; v54 += 472)
    sub_20F269420((uint64_t)a1, v54, 1);
  sub_20E86872C((uint64_t)&v60, v61);
  return v4 != 0;
}

void sub_20F26DEE0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  _QWORD *v8;
  char *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  float32x4_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t *v31;
  unsigned int v32;
  unsigned int v33;
  BOOL v34;
  unint64_t v35;
  unsigned int v36;
  unint64_t v37;
  float32x4_t *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  unsigned int v42;
  unint64_t v43;
  unsigned int v44;
  uint64_t *v45;
  unsigned int v46;
  BOOL v47;
  unint64_t v48;
  unsigned int v49;
  unint64_t v50;
  uint64_t *v51;
  int v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  int v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  _BYTE *v64;
  int64_t v65;
  char *v66;
  double *v67;
  float32x4_t *v68;
  __int128 v69;
  void *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  double v77;
  char *v78;
  uint64_t v79;
  double *v80;
  __int128 v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  double *v88;
  __int128 v89;
  uint64_t v90;
  double *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  unint64_t v98;
  double v99;
  uint64_t v100;
  double *v101;
  __int128 v102;
  void *v103;
  float32x4_t v104;
  void *v105;
  uint64_t v106;
  void *v107;
  uint64_t *v108;
  float32x4_t *v109;
  void *v110;
  uint64_t v111;
  char *v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  char *v120;
  _BYTE *v121;
  _BYTE *v122;
  int64_t v123;
  char *v124;
  char *v125;
  unint64_t v126;
  unint64_t v127;
  int64_t v128;
  void *v129;
  _QWORD *v130;
  __int128 v131;
  _BYTE *v132;
  _BYTE *v133;
  int64_t v134;
  char *v135;
  char *v136;
  void *v137;
  void *v138;
  _QWORD *v139;
  _QWORD *v141;
  uint64_t v142;
  char *v143;
  _QWORD *v144;
  int v145;
  _QWORD *v147;
  float32x4_t v148;
  float32x4_t v149;
  char *v150;
  _BYTE v151[28];
  _BYTE v152[28];
  _BYTE v153[28];
  _BYTE v154[28];
  void *__p;
  _BYTE *v156;
  char *v157;
  uint64_t v158;
  char v159;
  __int128 v160;
  unint64_t v161;
  double *v162;
  char *v163;
  unint64_t v164;
  char *v165;
  char *v166;
  float32x4_t v167[3];

  v8 = (_QWORD *)a1;
  v10 = *(char **)(a1 + 32);
  v11 = *(char **)(a1 + 40);
  if (v11 != v10)
  {
    v12 = (v11 - v10) >> 4;
    v13 = *(_QWORD *)a2;
    do
    {
      v14 = v12 >> 1;
      v15 = (unint64_t *)&v10[16 * (v12 >> 1)];
      if (*v15 < v13 || *v15 == v13 && *(_DWORD *)&v10[16 * v14 + 8] < *(_DWORD *)(a2 + 8))
      {
        v10 = (char *)(v15 + 2);
        v14 = v12 + ~v14;
      }
      v12 = v14;
    }
    while (v14);
  }
  if (v10 != v11 && *(_QWORD *)v10 == *(_QWORD *)a2 && *((_DWORD *)v10 + 2) == *(_DWORD *)(a2 + 8))
    sub_20F268698(a1, a2);
  sub_20F23A0A0(**(_QWORD ***)(v8[2] + 424), (__int128 *)a2, &v165);
  v162 = 0;
  v163 = 0;
  v164 = 0;
  v17 = v165;
  v18 = v166;
  v147 = a6;
  if (v165 == v166)
  {
    v116 = 0;
    v115 = 0;
    v117 = 0;
    goto LABEL_156;
  }
  v19 = a3 & 0xFF00000000;
  v139 = v8 + 18;
  v141 = v8 + 13;
  v142 = a3 & 0xFF00000000;
  v144 = v8;
  v145 = a3;
  v143 = v166;
  while (2)
  {
    if (v19 && *((_DWORD *)v17 + 4) != (_DWORD)a3 || *(_BYTE *)(*v8 + 1226) && *((_WORD *)v17 + 9))
      goto LABEL_17;
    v21 = v8[23];
    if (*(_BYTE *)(v21 + 225))
    {
      v22 = *(_QWORD *)(v21 + 1072);
      if (v22)
      {
        v23 = !*(_QWORD *)(v22 + 8) || *(_BYTE *)(a5 + 4) == 0;
        if (!v23 && *(_DWORD *)a5 == 2)
        {
          v39 = v8[2];
          v40 = *(uint64_t **)(v39 + 304);
          if (!v40)
            goto LABEL_138;
          v41 = (uint64_t *)(v39 + 304);
          v42 = *((_DWORD *)v17 + 4);
          v43 = *(_QWORD *)v17;
          v44 = *((_DWORD *)v17 + 2);
          v45 = v41;
          while (1)
          {
            v46 = *((_DWORD *)v40 + 12);
            v47 = v46 >= v42;
            if (v46 != v42)
              goto LABEL_54;
            v48 = v40[4];
            if (v48 < v43)
            {
LABEL_49:
              v40 = (uint64_t *)v40[1];
              if (!v40)
                goto LABEL_57;
            }
            else
            {
              if (v48 != v43)
                goto LABEL_56;
              v47 = *((_DWORD *)v40 + 10) >= v44;
LABEL_54:
              if (!v47)
                goto LABEL_49;
LABEL_56:
              v45 = v40;
              v40 = (uint64_t *)*v40;
              if (!v40)
              {
LABEL_57:
                if (v45 != v41)
                {
                  v49 = *((_DWORD *)v45 + 12);
                  if (v42 == v49)
                  {
                    v50 = v45[4];
                    if (v43 >= v50 && (v43 != v50 || v44 >= *((_DWORD *)v45 + 10)))
                    {
LABEL_62:
                      v38 = (float32x4_t *)(v45 + 7);
                      goto LABEL_140;
                    }
                  }
                  else if (v42 >= v49)
                  {
                    goto LABEL_62;
                  }
                }
LABEL_138:
                v108 = sub_20E9DF85C(v139, (uint64_t *)v17);
                if (v108)
                {
                  v38 = (float32x4_t *)(v108 + 5);
LABEL_140:
                  v53 = *v8;
LABEL_141:
                  v52 = 1;
                  v54 = *(double *)(v53 + 128);
                  v160 = 0uLL;
                  v161 = 0;
                  if (*(_BYTE *)(v53 + 1056))
                    goto LABEL_67;
                  goto LABEL_142;
                }
                v59 = 1;
LABEL_74:
                if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MapDataController.cpp", 2938, (uint64_t)"opt_image_descriptor", 20, (uint64_t)&unk_21029C995, 0, (void (*)(void **))sub_21023DDB0))
                {
                  abort();
                }
                v38 = 0;
                v53 = *v8;
                if (!v59)
                {
                  v52 = 0;
                  v54 = *(double *)(v53 + 904);
                  v160 = 0uLL;
                  v161 = 0;
                  if (*(_BYTE *)(v53 + 1056))
                    goto LABEL_67;
                  goto LABEL_142;
                }
                goto LABEL_141;
              }
            }
          }
        }
      }
    }
    v25 = v8[2];
    v28 = *(uint64_t **)(v25 + 240);
    v26 = (uint64_t *)(v25 + 240);
    v27 = v28;
    if (!v28)
      goto LABEL_64;
    v29 = *((_DWORD *)v17 + 4);
    v30 = *(_QWORD *)v17;
    v31 = v26;
    v32 = *((_DWORD *)v17 + 2);
    do
    {
      while (1)
      {
        v33 = *((_DWORD *)v27 + 12);
        v34 = v33 >= v29;
        if (v33 != v29)
          goto LABEL_38;
        v35 = v27[4];
        if (v35 >= v30)
          break;
LABEL_33:
        v27 = (uint64_t *)v27[1];
        if (!v27)
          goto LABEL_41;
      }
      if (v35 != v30)
        goto LABEL_40;
      v34 = *((_DWORD *)v27 + 10) >= v32;
LABEL_38:
      if (!v34)
        goto LABEL_33;
LABEL_40:
      v31 = v27;
      v27 = (uint64_t *)*v27;
    }
    while (v27);
LABEL_41:
    if (v31 != v26)
    {
      v36 = *((_DWORD *)v31 + 12);
      if (v29 == v36)
      {
        v37 = v31[4];
        if (v30 >= v37 && (v30 != v37 || v32 >= *((_DWORD *)v31 + 10)))
        {
LABEL_46:
          v38 = (float32x4_t *)(v31 + 7);
          goto LABEL_66;
        }
      }
      else if (v29 >= v36)
      {
        goto LABEL_46;
      }
    }
LABEL_64:
    v51 = sub_20E9DF85C(v141, (uint64_t *)v17);
    if (!v51)
    {
      v59 = 0;
      goto LABEL_74;
    }
    v38 = (float32x4_t *)(v51 + 5);
LABEL_66:
    v52 = 0;
    v53 = *v8;
    v54 = *(double *)(*v8 + 904);
    v160 = 0uLL;
    v161 = 0;
    if (*(_BYTE *)(v53 + 1056))
    {
LABEL_67:
      sub_20F29CECC(v38, a4, v52, *(_QWORD *)(v53 + 1048), v154, v16);
      v55 = v160;
      if ((_QWORD)v160)
      {
        v56 = *((_QWORD *)&v160 + 1);
        v57 = (void *)v160;
        if (*((_QWORD *)&v160 + 1) != (_QWORD)v160)
        {
          do
          {
            v58 = *(void **)(v56 - 32);
            if (v58)
            {
              *(_QWORD *)(v56 - 24) = v58;
              operator delete(v58);
            }
            v56 -= 64;
          }
          while (v56 != v55);
          v57 = (void *)v160;
        }
        *((_QWORD *)&v160 + 1) = v55;
        operator delete(v57);
      }
      v16 = *(float32x4_t *)v154;
      v160 = *(_OWORD *)v154;
      v161 = *(_QWORD *)&v154[16];
      goto LABEL_81;
    }
LABEL_142:
    sub_20F29CB68(v38, a4, v52, (uint64_t)v154, v16);
    if (v159)
    {
      v109 = (float32x4_t *)*((_QWORD *)&v160 + 1);
      if (*((_QWORD *)&v160 + 1) >= v161)
      {
        v114 = sub_20F281A28(&v160, (uint64_t)v154);
      }
      else
      {
        v16 = *(float32x4_t *)v154;
        *(_OWORD *)(*((_QWORD *)&v160 + 1) + 12) = *(_OWORD *)&v154[12];
        v109[2].i64[0] = 0;
        *v109 = v16;
        v109[2].i64[1] = 0;
        v109[3].i64[0] = 0;
        v110 = __p;
        v111 = v156 - (_BYTE *)__p;
        if (v156 != __p)
        {
          if (0xAAAAAAAAAAAAAAABLL * (v111 >> 3) > 0xAAAAAAAAAAAAAAALL)
            sub_20E867F44();
          v112 = (char *)operator new(v156 - (_BYTE *)__p);
          v109[2].i64[0] = (uint64_t)v112;
          v109[2].i64[1] = (uint64_t)v112;
          v113 = &v112[8 * (v111 >> 3)];
          v109[3].i64[0] = (uint64_t)v113;
          memcpy(v112, v110, v111 - 4);
          v109[2].i64[1] = (uint64_t)v113;
        }
        v16.i64[0] = v158;
        v109[3].i64[1] = v158;
        v114 = (char *)&v109[4];
        v8 = v144;
        LODWORD(a3) = v145;
        v19 = v142;
        v18 = v143;
      }
      *((_QWORD *)&v160 + 1) = v114;
      if (v159 && __p)
      {
        v156 = __p;
        operator delete(__p);
      }
    }
LABEL_81:
    if (*(_BYTE *)(*v8 + 1056))
    {
      v60 = *(unsigned int *)(*v8 + 1048);
      v61 = *((_QWORD *)&v160 + 1);
      v62 = v160;
      if ((_QWORD)v160 == *((_QWORD *)&v160 + 1))
        goto LABEL_131;
LABEL_85:
      v150 = v17;
      while (2)
      {
        v16 = *(float32x4_t *)v62;
        *(_OWORD *)&v154[12] = *(_OWORD *)(v62 + 12);
        *(float32x4_t *)v154 = v16;
        v156 = 0;
        v157 = 0;
        __p = 0;
        v64 = *(_BYTE **)(v62 + 32);
        v63 = *(_BYTE **)(v62 + 40);
        v65 = v63 - v64;
        if (v63 != v64)
        {
          if (0xAAAAAAAAAAAAAAABLL * (v65 >> 3) > 0xAAAAAAAAAAAAAAALL)
            sub_20E867F44();
          __p = operator new(v65);
          v156 = __p;
          v66 = (char *)__p + 8 * (v65 >> 3);
          v157 = v66;
          memcpy(__p, v64, v65 - 4);
          v156 = v66;
        }
        v16.i64[0] = *(_QWORD *)(v62 + 56);
        v158 = v16.i64[0];
        if (*(double *)v16.i64 <= v54)
        {
          v67 = v162;
          v68 = (float32x4_t *)v163;
          if (v60 > (v163 - (char *)v162) >> 6 || *(double *)v16.i64 <= v162[7])
          {
            v69 = *(_OWORD *)v17;
            *(_DWORD *)&v154[24] = *((_DWORD *)v17 + 4);
            *(_OWORD *)&v154[8] = v69;
            if ((unint64_t)v163 >= v164)
            {
              v74 = sub_20F281A28(&v162, (uint64_t)v154);
              v67 = v162;
              v163 = v74;
              v75 = v74 - (char *)v162;
              if (v74 - (char *)v162 < 65)
                goto LABEL_107;
            }
            else
            {
              v16 = *(float32x4_t *)v154;
              *(_OWORD *)(v163 + 12) = *(_OWORD *)&v154[12];
              v68[2].i64[0] = 0;
              *v68 = v16;
              v68[2].i64[1] = 0;
              v68[3].i64[0] = 0;
              v70 = __p;
              v71 = v156 - (_BYTE *)__p;
              if (v156 != __p)
              {
                if (0xAAAAAAAAAAAAAAABLL * (v71 >> 3) > 0xAAAAAAAAAAAAAAALL)
                  sub_20E867F44();
                v72 = (char *)operator new(v156 - (_BYTE *)__p);
                v68[2].i64[0] = (uint64_t)v72;
                v68[2].i64[1] = (uint64_t)v72;
                v73 = &v72[8 * (v71 >> 3)];
                v68[3].i64[0] = (uint64_t)v73;
                memcpy(v72, v70, v71 - 4);
                v68[2].i64[1] = (uint64_t)v73;
                v17 = v150;
              }
              v16.i64[0] = v158;
              v68[3].i64[1] = v158;
              v74 = (char *)&v68[4];
              v163 = v74;
              v75 = v74 - (char *)v67;
              if (v74 - (char *)v67 < 65)
              {
LABEL_107:
                v83 = v75 >> 6;
                if (v75 >> 6 > v60)
                {
                  if (v75 >= 65)
                  {
                    v84 = 0;
                    v16 = *(float32x4_t *)v67;
                    *(float32x4_t *)((char *)v167 + 12) = *(float32x4_t *)((char *)v67 + 12);
                    v167[0] = v16;
                    v85 = *((_QWORD *)v67 + 4);
                    v86 = *((_QWORD *)v67 + 5);
                    v87 = *((_QWORD *)v67 + 6);
                    v67[4] = 0.0;
                    v67[5] = 0.0;
                    v67[6] = 0.0;
                    v88 = v67;
                    v16.i64[0] = (uint64_t)v67[7];
                    do
                    {
                      v91 = v88;
                      v88 += 8 * v84 + 8;
                      v92 = 2 * v84;
                      v84 = (2 * v84) | 1;
                      v93 = v92 + 2;
                      if (v93 < v83 && v88[7] < v88[15])
                      {
                        v88 += 8;
                        v84 = v93;
                      }
                      v89 = *(_OWORD *)v88;
                      *(_OWORD *)((char *)v91 + 12) = *(_OWORD *)((char *)v88 + 12);
                      *(_OWORD *)v91 = v89;
                      v90 = *((_QWORD *)v88 + 7);
                      *((_OWORD *)v91 + 2) = *((_OWORD *)v88 + 2);
                      v91[6] = v88[6];
                      v88[5] = 0.0;
                      v88[6] = 0.0;
                      v88[4] = 0.0;
                      *((_QWORD *)v91 + 7) = v90;
                    }
                    while (v84 <= (uint64_t)((unint64_t)(v83 - 2) >> 1));
                    v94 = v74 - 64;
                    if (v88 == (double *)(v74 - 64))
                    {
                      v104 = v167[0];
                      *(float32x4_t *)((char *)v88 + 12) = *(float32x4_t *)((char *)v167 + 12);
                      *(float32x4_t *)v88 = v104;
                      *((_QWORD *)v88 + 4) = v85;
                      *((_QWORD *)v88 + 5) = v86;
                      *((_QWORD *)v88 + 6) = v87;
                      v88[7] = *(double *)v16.i64;
                    }
                    else
                    {
                      v95 = *(_OWORD *)v94;
                      *(_OWORD *)((char *)v88 + 12) = *(_OWORD *)(v74 - 52);
                      *(_OWORD *)v88 = v95;
                      *(_QWORD *)&v95 = *((_QWORD *)v74 - 1);
                      *((_OWORD *)v88 + 2) = *((_OWORD *)v74 - 2);
                      v88[6] = *((double *)v74 - 2);
                      *((_QWORD *)v88 + 7) = v95;
                      v96 = *(__int128 *)((char *)v167 + 12);
                      *(float32x4_t *)v94 = v167[0];
                      *(_OWORD *)(v74 - 52) = v96;
                      *((_QWORD *)v74 - 4) = v85;
                      *((_QWORD *)v74 - 3) = v86;
                      *((_QWORD *)v74 - 2) = v87;
                      *((_QWORD *)v74 - 1) = v16.i64[0];
                      v97 = (char *)v88 - (char *)v67 + 64;
                      if (v97 >= 65)
                      {
                        v98 = (((unint64_t)v97 >> 6) - 2) >> 1;
                        *(double *)v16.i64 = v67[8 * v98 + 7];
                        v99 = v88[7];
                        if (*(double *)v16.i64 < v99)
                        {
                          *(_OWORD *)&v152[12] = *(_OWORD *)((char *)v88 + 12);
                          *(_OWORD *)v152 = *(_OWORD *)v88;
                          v149 = *(float32x4_t *)(v88 + 4);
                          v100 = *((_QWORD *)v88 + 6);
                          v88[4] = 0.0;
                          v88[5] = 0.0;
                          v88[6] = 0.0;
                          do
                          {
                            v101 = &v67[8 * v98];
                            v102 = *(_OWORD *)v101;
                            *(_OWORD *)((char *)v88 + 12) = *(_OWORD *)((char *)v101 + 12);
                            *(_OWORD *)v88 = v102;
                            v103 = (void *)*((_QWORD *)v88 + 4);
                            if (v103)
                            {
                              *((_QWORD *)v88 + 5) = v103;
                              operator delete(v103);
                              v88[4] = 0.0;
                              v88[5] = 0.0;
                              v88[6] = 0.0;
                            }
                            *((_OWORD *)v88 + 2) = *((_OWORD *)v101 + 2);
                            v88[6] = v101[6];
                            v101[5] = 0.0;
                            v101[6] = 0.0;
                            v101[4] = 0.0;
                            v88[7] = v101[7];
                            if (!v98)
                              break;
                            v98 = (v98 - 1) >> 1;
                            v88 = v101;
                          }
                          while (v67[8 * v98 + 7] < v99);
                          *(_OWORD *)((char *)v101 + 12) = *(_OWORD *)&v152[12];
                          *(_OWORD *)v101 = *(_OWORD *)v152;
                          v16 = v149;
                          *((float32x4_t *)v101 + 2) = v149;
                          *((_QWORD *)v101 + 6) = v100;
                          v101[7] = v99;
                          v17 = v150;
                        }
                      }
                    }
                    v74 = v163;
                  }
                  v105 = (void *)*((_QWORD *)v74 - 4);
                  if (v105)
                  {
                    *((_QWORD *)v74 - 3) = v105;
                    operator delete(v105);
                  }
                  v163 = v74 - 64;
                }
                goto LABEL_128;
              }
            }
            v76 = (((unint64_t)v75 >> 6) - 2) >> 1;
            *(double *)v16.i64 = v67[8 * v76 + 7];
            v77 = *((double *)v74 - 1);
            if (*(double *)v16.i64 < v77)
            {
              v78 = v74 - 64;
              *(_OWORD *)v151 = *((_OWORD *)v74 - 4);
              *(_OWORD *)&v151[12] = *(_OWORD *)(v74 - 52);
              v148 = *((float32x4_t *)v74 - 2);
              v79 = *((_QWORD *)v74 - 2);
              *((_QWORD *)v74 - 4) = 0;
              *((_QWORD *)v74 - 3) = 0;
              *((_QWORD *)v74 - 2) = 0;
              do
              {
                v80 = &v67[8 * v76];
                v81 = *(_OWORD *)v80;
                *(_OWORD *)(v78 + 12) = *(_OWORD *)((char *)v80 + 12);
                *(_OWORD *)v78 = v81;
                v82 = (void *)*((_QWORD *)v78 + 4);
                if (v82)
                {
                  *((_QWORD *)v78 + 5) = v82;
                  operator delete(v82);
                  *((_QWORD *)v78 + 4) = 0;
                  *((_QWORD *)v78 + 5) = 0;
                  *((_QWORD *)v78 + 6) = 0;
                }
                *((_OWORD *)v78 + 2) = *((_OWORD *)v80 + 2);
                *((double *)v78 + 6) = v80[6];
                v80[5] = 0.0;
                v80[6] = 0.0;
                v80[4] = 0.0;
                *((double *)v78 + 7) = v80[7];
                if (!v76)
                  break;
                v76 = (v76 - 1) >> 1;
                v78 = (char *)v80;
              }
              while (v67[8 * v76 + 7] < v77);
              *(_OWORD *)v80 = *(_OWORD *)v151;
              *(_OWORD *)((char *)v80 + 12) = *(_OWORD *)&v151[12];
              v16 = v148;
              *((float32x4_t *)v80 + 2) = v148;
              *((_QWORD *)v80 + 6) = v79;
              v80[7] = v77;
              v67 = v162;
              v74 = v163;
              v75 = v163 - (char *)v162;
              v17 = v150;
            }
            goto LABEL_107;
          }
        }
LABEL_128:
        if (__p)
        {
          v156 = __p;
          operator delete(__p);
        }
        v62 += 64;
        if (v62 == v61)
        {
          v62 = v160;
          v8 = v144;
          LODWORD(a3) = v145;
          v19 = v142;
          v18 = v143;
          goto LABEL_131;
        }
        continue;
      }
    }
    v60 = 1;
    v61 = *((_QWORD *)&v160 + 1);
    v62 = v160;
    if ((_QWORD)v160 != *((_QWORD *)&v160 + 1))
      goto LABEL_85;
LABEL_131:
    if (v62)
    {
      v106 = *((_QWORD *)&v160 + 1);
      v20 = (void *)v62;
      if (*((_QWORD *)&v160 + 1) != v62)
      {
        do
        {
          v107 = *(void **)(v106 - 32);
          if (v107)
          {
            *(_QWORD *)(v106 - 24) = v107;
            operator delete(v107);
          }
          v106 -= 64;
        }
        while (v106 != v62);
        v20 = (void *)v160;
      }
      *((_QWORD *)&v160 + 1) = v62;
      operator delete(v20);
    }
LABEL_17:
    v17 += 24;
    if (v17 != v18)
      continue;
    break;
  }
  v116 = (uint64_t)v162;
  v115 = (uint64_t)v163;
  a6 = v147;
  v117 = v163 - (char *)v162;
  if (v163 - (char *)v162 == 64)
  {
    *v147 = v162;
    v147[1] = v115;
    v147[2] = v164;
    goto LABEL_202;
  }
LABEL_156:
  if (v117 >= 65)
  {
    v118 = (unint64_t)v117 >> 6;
    do
    {
      sub_20F281CD8((__int128 *)v116, v115, (uint64_t)v154, v118);
      v115 -= 64;
    }
    while (v118-- > 2);
    v116 = (uint64_t)v162;
    v115 = (uint64_t)v163;
  }
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  if (v116 != v115)
  {
    do
    {
      while (1)
      {
        while (1)
        {
          *(_OWORD *)&v153[12] = *(_OWORD *)(v116 + 12);
          *(_OWORD *)v153 = *(_OWORD *)v116;
          v122 = *(_BYTE **)(v116 + 32);
          v121 = *(_BYTE **)(v116 + 40);
          v123 = v121 - v122;
          if (v121 == v122)
          {
            v125 = 0;
            v124 = 0;
          }
          else
          {
            if (0xAAAAAAAAAAAAAAABLL * (v123 >> 3) > 0xAAAAAAAAAAAAAAALL)
              sub_20E867F44();
            v124 = (char *)operator new(v123);
            v125 = &v124[8 * (v123 >> 3)];
            memcpy(v124, v122, v123 - 4);
          }
          v127 = *v147;
          v126 = v147[1];
          *(_OWORD *)v154 = *(_OWORD *)v153;
          *(_OWORD *)&v154[12] = *(_OWORD *)&v153[12];
          v156 = 0;
          v157 = 0;
          __p = 0;
          v128 = v125 - v124;
          if (v125 == v124)
          {
            v129 = 0;
            v130 = v147;
            if (v127 != v126)
              goto LABEL_176;
          }
          else
          {
            if (0xAAAAAAAAAAAAAAABLL * (v128 >> 3) > 0xAAAAAAAAAAAAAAALL)
              sub_20E867F44();
            v129 = operator new(v128);
            memcpy(v129, v124, v128 - 4);
            v130 = v147;
            if (v127 != v126)
            {
LABEL_176:
              while (*(_QWORD *)v127 != *(_QWORD *)v154
                   || *(_DWORD *)(v127 + 24) != *(_DWORD *)&v154[24]
                   || *(_QWORD *)(v127 + 8) != *(_QWORD *)&v154[8]
                   || *(_DWORD *)(v127 + 16) != *(_DWORD *)&v154[16])
              {
                v127 += 64;
                if (v127 == v126)
                {
                  v127 = v126;
                  break;
                }
              }
            }
          }
          if (v129)
            operator delete(v129);
          if (v124)
            operator delete(v124);
          if (v127 == v130[1])
            break;
          sub_20F23D490(v127 + 32, *(char **)(v127 + 40), *(char **)(v116 + 32), *(char **)(v116 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v116 + 40) - *(_QWORD *)(v116 + 32)) >> 3));
          *(double *)(v127 + 56) = fmin(*(double *)(v127 + 56), *(double *)(v116 + 56));
          v116 += 64;
          if (v116 == v115)
            goto LABEL_193;
        }
        if (v127 < v130[2])
          break;
        v130[1] = sub_20F281A28(v130, v116);
        v116 += 64;
        if (v116 == v115)
          goto LABEL_193;
      }
      v131 = *(_OWORD *)v116;
      *(_OWORD *)(v127 + 12) = *(_OWORD *)(v116 + 12);
      *(_QWORD *)(v127 + 32) = 0;
      *(_OWORD *)v127 = v131;
      *(_QWORD *)(v127 + 40) = 0;
      *(_QWORD *)(v127 + 48) = 0;
      v133 = *(_BYTE **)(v116 + 32);
      v132 = *(_BYTE **)(v116 + 40);
      v134 = v132 - v133;
      if (v132 != v133)
      {
        if (0xAAAAAAAAAAAAAAABLL * (v134 >> 3) > 0xAAAAAAAAAAAAAAALL)
          sub_20E867F44();
        v135 = (char *)operator new(v134);
        *(_QWORD *)(v127 + 32) = v135;
        *(_QWORD *)(v127 + 40) = v135;
        v120 = &v135[8 * (v134 >> 3)];
        *(_QWORD *)(v127 + 48) = v120;
        memcpy(v135, v133, v134 - 4);
        *(_QWORD *)(v127 + 40) = v120;
      }
      *(_QWORD *)(v127 + 56) = *(_QWORD *)(v116 + 56);
      v147[1] = v127 + 64;
      v147[1] = v127 + 64;
      v116 += 64;
    }
    while (v116 != v115);
LABEL_193:
    v115 = (uint64_t)v162;
  }
  if (v115)
  {
    v136 = v163;
    v137 = (void *)v115;
    if (v163 != (char *)v115)
    {
      do
      {
        v138 = (void *)*((_QWORD *)v136 - 4);
        if (v138)
        {
          *((_QWORD *)v136 - 3) = v138;
          operator delete(v138);
        }
        v136 -= 64;
      }
      while (v136 != (char *)v115);
      v137 = v162;
    }
    v163 = (char *)v115;
    operator delete(v137);
  }
LABEL_202:
  if (v165)
  {
    v166 = v165;
    operator delete(v165);
  }
}

void sub_20F26ECF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;
  void **v40;
  uint64_t v41;
  void *v43;
  void *v44;

  v43 = *v40;
  if (*v40)
  {
    *(_QWORD *)(v39 + 40) = v43;
    operator delete(v43);
  }
  *(_QWORD *)(v41 - 216) = v39;
  if (a39 && __p)
    operator delete(__p);
  sub_20F26EE18((void **)(v41 - 224));
  sub_20F26EE18((void **)(v41 - 192));
  v44 = *(void **)(v41 - 168);
  if (v44)
  {
    *(_QWORD *)(v41 - 160) = v44;
    operator delete(v44);
  }
  _Unwind_Resume(a1);
}

void **sub_20F26EE18(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 4);
        if (v5)
        {
          *((_QWORD *)v3 - 3) = v5;
          operator delete(v5);
        }
        v3 -= 64;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_20F26EE88(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __int128 *v7;
  __int128 *v8;
  _QWORD *v9;
  float32x4_t v10;
  char *v11;
  char *v12;
  int8x8_t v13;
  int v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t **v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t i;
  unsigned __int8 v27;
  double v28;
  int v29;
  int v30;
  void *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  __int128 *v35;
  __int128 *v36;
  float32x4_t *v37;
  _BYTE v39[28];
  void *__p;
  char *v41;
  double v42;
  unsigned __int8 v43;
  char *v44;
  char *v45;

  v4 = a1[4];
  v5 = a1[5];
  if (v4 == v5)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 64) = 0;
    return;
  }
  do
  {
    sub_20F268698((uint64_t)a1, v4);
    v4 += 16;
  }
  while (v4 != v5);
  v7 = (__int128 *)a1[4];
  v8 = (__int128 *)a1[5];
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 64) = 0;
  v35 = v8;
  if (v7 != v8)
  {
    v9 = (_QWORD *)(a3 + 32);
    v37 = (float32x4_t *)(a3 + 8);
LABEL_6:
    v36 = v7;
    sub_20F23A0A0(**(_QWORD ***)(a1[2] + 424), v7, &v44);
    v12 = v44;
    v11 = v45;
    if (v44 == v45)
    {
      if (v44)
        goto LABEL_64;
      goto LABEL_5;
    }
    while (1)
    {
      v13 = (int8x8_t)a1[14];
      if (v13)
      {
        v14 = *((_DWORD *)v12 + 4);
        v15 = *((_DWORD *)v12 + 2);
        v16 = v15 ^ __ROR4__(v14, 13);
        *(int8x8_t *)v10.f32 = vcnt_s8(v13);
        v10.i16[0] = vaddlv_u8(*(uint8x8_t *)v10.f32);
        if (v10.u32[0] > 1uLL)
        {
          v17 = v16;
          if (*(_QWORD *)&v13 <= v16)
            v17 = v16 % *(_QWORD *)&v13;
        }
        else
        {
          v17 = (v13.i32[0] - 1) & v16;
        }
        v18 = *(uint64_t ***)(a1[13] + 8 * v17);
        if (v18)
        {
          v19 = *v18;
          if (v19)
          {
            v20 = *(_QWORD *)v12;
            if (v10.u32[0] < 2uLL)
            {
              v21 = *(_QWORD *)&v13 - 1;
              while (1)
              {
                v23 = v19[1];
                if (v23 == v16)
                {
                  if (*((_DWORD *)v19 + 8) == v14 && v19[2] == v20 && *((_DWORD *)v19 + 6) == v15)
                    goto LABEL_43;
                }
                else if ((v23 & v21) != v17)
                {
                  goto LABEL_35;
                }
                v19 = (uint64_t *)*v19;
                if (!v19)
                  goto LABEL_35;
              }
            }
            do
            {
              v22 = v19[1];
              if (v22 == v16)
              {
                if (*((_DWORD *)v19 + 8) == v14 && v19[2] == v20 && *((_DWORD *)v19 + 6) == v15)
                  goto LABEL_43;
              }
              else
              {
                if (v22 >= *(_QWORD *)&v13)
                  v22 %= *(_QWORD *)&v13;
                if (v22 != v17)
                  break;
              }
              v19 = (uint64_t *)*v19;
            }
            while (v19);
          }
        }
      }
LABEL_35:
      sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MapDataController.cpp", 3032, (uint64_t)"desc_iter != this->weak_keyframes_image_descriptors_.end()", 58, (uint64_t)&unk_21029C995, 0, (void (*)(void **))sub_21023DDB0);
      v24 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
      if ((v24 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
      {
        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DE78);
      }
      if (!byte_254A6DE68 || byte_254A6DE70)
      {
        v25 = qword_254A6DE40;
        for (i = qword_254A6DE48; v25 != i; v25 += 16)
          (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v25)(*(_QWORD *)(v25 + 8), "desc_iter != this->weak_keyframes_image_descriptors_.end()", 58, &unk_21029C995, 0);
      }
      v27 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
      if ((v27 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
      {
        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DE78);
      }
      if (!byte_254A6DE68)
        abort();
      qword_254A6DE58(unk_254A6DE60, "desc_iter != this->weak_keyframes_image_descriptors_.end()", 58, &unk_21029C995, 0);
      v19 = 0;
LABEL_43:
      sub_20F29CB68((float32x4_t *)(v19 + 5), a2, 0, (uint64_t)v39, v10);
      if (!v43)
        goto LABEL_9;
      v28 = v42;
      if (v42 > *(double *)(*a1 + 904))
        goto LABEL_57;
      v29 = *(unsigned __int8 *)(a3 + 64);
      if (*(_BYTE *)(a3 + 64))
      {
        if (v42 >= *(double *)(a3 + 56))
          goto LABEL_57;
      }
      *(_OWORD *)a3 = *(_OWORD *)v39;
      *(_OWORD *)(a3 + 12) = *(_OWORD *)&v39[12];
      if (!v29)
        break;
      if (v39 == (_BYTE *)a3)
      {
        *(double *)(a3 + 56) = v28;
LABEL_56:
        v10 = *(float32x4_t *)v12;
        *(_DWORD *)(a3 + 24) = *((_DWORD *)v12 + 4);
        *v37 = v10;
LABEL_57:
        if (__p)
        {
          v41 = (char *)__p;
          operator delete(__p);
        }
        goto LABEL_9;
      }
      sub_20F27AE20(v9, (char *)__p, v41, 0xAAAAAAAAAAAAAAABLL * ((v41 - (_BYTE *)__p) >> 3));
      v30 = v43;
      *(double *)(a3 + 56) = v42;
      v10 = *(float32x4_t *)v12;
      *(_DWORD *)(a3 + 24) = *((_DWORD *)v12 + 4);
      *v37 = v10;
      if (v30)
        goto LABEL_57;
LABEL_9:
      v12 += 24;
      if (v12 == v11)
      {
        v12 = v44;
        if (v44)
        {
LABEL_64:
          v45 = v12;
          operator delete(v12);
        }
LABEL_5:
        v7 = v36 + 1;
        if (v36 + 1 != v35)
          goto LABEL_6;
        return;
      }
    }
    *v9 = 0;
    v9[1] = 0;
    v9[2] = 0;
    v31 = __p;
    v32 = v41 - (_BYTE *)__p;
    if (v41 != __p)
    {
      if (0xAAAAAAAAAAAAAAABLL * (v32 >> 3) >= 0xAAAAAAAAAAAAAABLL)
        sub_20E867F44();
      v33 = (char *)operator new(v41 - (_BYTE *)__p);
      *(_QWORD *)(a3 + 32) = v33;
      *(_QWORD *)(a3 + 40) = v33;
      v34 = &v33[8 * (v32 >> 3)];
      *(_QWORD *)(a3 + 48) = v34;
      memcpy(v33, v31, v32 - 4);
      *(_QWORD *)(a3 + 40) = v34;
      v9 = (_QWORD *)(a3 + 32);
    }
    *(double *)(a3 + 56) = v28;
    *(_BYTE *)(a3 + 64) = 1;
    goto LABEL_56;
  }
}

void sub_20F26F360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,char a22,void *a23,uint64_t a24)
{
  uint64_t v24;
  void *v26;
  void **v27;
  void *v28;

  v26 = *a9;
  if (*a9)
  {
    *(_QWORD *)(v24 + 40) = v26;
    operator delete(v26);
  }
  if (a22 && __p)
  {
    operator delete(__p);
    v27 = a9;
  }
  else
  {
    v27 = a9;
  }
  if (a23)
    operator delete(a23);
  if (*(_BYTE *)(v24 + 64))
  {
    v28 = *v27;
    if (*v27)
    {
      *(_QWORD *)(v24 + 40) = v28;
      operator delete(v28);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20F26F3F4(uint64_t a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t **v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[512];

  if (*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 424) + 64) != (uint64_t)(*(_QWORD *)(a1 + 40)
                                                                                  - *(_QWORD *)(a1 + 32)) >> 4
    && (*(_BYTE *)(*(_QWORD *)a1 + 2499) || (*(_BYTE *)(a1 + 304) & 4) != 0)
    && (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MapDataController.cpp", 3061, (uint64_t)"this->NumberOfRegularStates() == 0 || (!this->config().enable_submapping && !this->IsSelfSubmap())", 98, (uint64_t)&unk_21029C995, 0, (void (*)(void **))sub_21023DDB0)|| !*(_QWORD *)(a1 + 16)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MapDataController.cpp", 3062, (uint64_t)"this->data_", 11, (uint64_t)"External Map Info must have a Map Data", 38, (void (*)(void **))sub_21023DDB0))|| !*(_QWORD *)(a1 + 184)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MapDataController.cpp",
         3064,
         (uint64_t)"this->slam_relocalization_",
         26,
         (uint64_t)"External Map Info must have a relocalization module",
         51,
         (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  sub_20F44B01C(a2, *(_QWORD *)(a1 + 16));
  v4 = *(uint64_t ***)a2;
  v5 = *(uint64_t ***)(a2 + 8);
  if (*(uint64_t ***)a2 != v5)
  {
    while (1)
    {
      while (1)
      {
        v6 = *v4;
        if (!*((_BYTE *)*v4 + 736))
          break;
LABEL_11:
        v4 += 69;
        if (v4 == v5)
          return;
      }
      v7 = *(_QWORD *)(a1 + 16);
      if (*(_DWORD *)(a2 + 952) != *(_DWORD *)(v7 + 256)
        || *(_DWORD *)(a2 + 956) != *(_DWORD *)(v7 + 260)
        || *(_DWORD *)(a2 + 960) != *(_DWORD *)(v7 + 264)
        || *(_DWORD *)(a2 + 964) != *(_DWORD *)(v7 + 268)
        || *(_DWORD *)(a2 + 968) != *(_DWORD *)(v7 + 272)
        || *(_DWORD *)(a2 + 972) != *(_DWORD *)(v7 + 276))
      {
        goto LABEL_24;
      }
      if (*(_BYTE *)(a2 + 988) && *(_BYTE *)(v7 + 292))
        break;
      if ((*(_BYTE *)(a2 + 988) != 0) == (*(_BYTE *)(v7 + 292) != 0))
        goto LABEL_27;
LABEL_24:
      sub_20F24E20C(a1, (char ***)v6 + 72, *v4);
      v4 += 69;
      if (v4 == v5)
        return;
    }
    if (*(_DWORD *)(a2 + 976) != *(_DWORD *)(v7 + 280)
      || *(_DWORD *)(a2 + 980) != *(_DWORD *)(v7 + 284)
      || *(_DWORD *)(a2 + 984) != *(_DWORD *)(v7 + 288))
    {
      goto LABEL_24;
    }
LABEL_27:
    memmove(v9, v4 + 2, 0x200uLL);
    v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 184) + 1056) + 8);
    if (v8)
      sub_20F278024((_QWORD *)(v8 + 400), v9, (__int128 *)v6);
    goto LABEL_11;
  }
}

uint64_t sub_20F26F650(uint64_t *a1, void *a2, void *a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v6;
  void *v7;
  void *v8;
  char **v9;
  _QWORD *v10;
  char *v11;
  int v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t *v36;
  size_t v37;
  const char *v38;
  unsigned __int8 v39;
  uint64_t *v40;
  char **v41;
  _QWORD *v42;
  char *v43;
  int v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  float64x2_t v51;
  uint64_t v52;
  float64x2_t v59;
  uint64_t v63;
  int v64;
  int v65;
  unint64_t v66;
  char **v67;
  _QWORD *v68;
  char *v69;
  int v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  unint64_t v75;
  void *v76;
  void *v77;
  _QWORD *v78;
  void **v79;
  uint64_t v80;
  unsigned __int8 v81;
  const char *v82;
  size_t v83;
  void **v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  NSObject *v88;
  uint64_t v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *p_shared_owners;
  unint64_t v93;
  char **v95;
  uint64_t v97;
  uint64_t *v98;
  uint64_t *v99;
  int v100;
  float64x2_t v101;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v103;
  const char *v104;
  int v105;
  const char *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  void *v109;
  void *v110;
  void *object[2];
  size_t v112;
  void **v113;
  char v114;
  void *__p[2];
  unint64_t v116;
  char v117;
  uint64_t v118;

  v118 = *MEMORY[0x24BDAC8D0];
  v109 = a2;
  v110 = a3;
  v4 = *(_QWORD *)(*a1 + 56);
  if (!v4)
    goto LABEL_47;
  v6 = *a1 + 56;
  do
  {
    v7 = *(void **)(v4 + 32);
    if (v7 < a2)
    {
      v4 += 8;
    }
    else if (v7 == a2)
    {
      if (*(_DWORD *)(v4 + 40) < a3)
        v4 += 8;
      else
        v6 = v4;
    }
    else
    {
      v6 = v4;
    }
    v4 = *(_QWORD *)v4;
  }
  while (v4);
  if (v6 == *a1 + 56
    || (v8 = *(void **)(v6 + 32), a2 < v8)
    || a2 == v8 && *(_DWORD *)(v6 + 40) > a3
    || !*(_QWORD *)(v6 + 48))
  {
LABEL_47:
    sub_20F27AFA0(&v97);
    if (**(int **)(v97 + 56) > 4)
      return 0;
    v31 = *(unsigned __int8 *)(v97 + 72);
    v32 = sub_20E8C31DC(v97, "OSLogSurrogateAppender", 1, 0);
    v33 = v32 ? v32 + 16 : 0;
    if (!v31 && v32 == 0)
      return 0;
    *(_QWORD *)&v101.f64[0] = &v97;
    *(std::chrono::steady_clock::time_point *)&v101.f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v103 = 4;
    v104 = "unknown file";
    v105 = 408;
    v107 = 0;
    v108 = 0;
    v106 = "unknown function";
    v100 = (int)v110;
    v35 = **(_QWORD **)&v101.f64[0];
    v36 = (uint64_t *)(**(_QWORD **)&v101.f64[0] + 16);
    if (*(char *)(**(_QWORD **)&v101.f64[0] + 39) < 0)
    {
      v38 = *(const char **)(v35 + 16);
      v37 = *(_QWORD *)(v35 + 24);
      v81 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v81 & 1) != 0)
        goto LABEL_109;
    }
    else
    {
      v37 = *(unsigned __int8 *)(**(_QWORD **)&v101.f64[0] + 39);
      v38 = (const char *)(**(_QWORD **)&v101.f64[0] + 16);
      v39 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v39 & 1) != 0)
        goto LABEL_109;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
      if ((_BYTE)v113 && SHIBYTE(v112) < 0)
        operator delete(object[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_109:
    if (byte_254A4A4F8[23] >= 0)
      v82 = byte_254A4A4F8;
    else
      v82 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v83 = byte_254A4A4F8[23];
    else
      v83 = *(_QWORD *)&byte_254A4A4F8[8];
    object[0] = os_log_create(v82, v38);
    v84 = &object[1];
    if (v83 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v83 >= 0x17)
    {
      v85 = (v83 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v83 | 7) != 0x17)
        v85 = v83 | 7;
      v86 = v85 + 1;
      v84 = (void **)operator new(v85 + 1);
      v112 = v83;
      v113 = (void **)(v86 | 0x8000000000000000);
      object[1] = v84;
    }
    else
    {
      HIBYTE(v113) = v83;
      if (!v83)
      {
LABEL_123:
        *((_BYTE *)v84 + v83) = 0;
        v114 = 1;
        v87 = __p;
        if (v37 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v37 >= 0x17)
        {
          v89 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v37 | 7) != 0x17)
            v89 = v37 | 7;
          v90 = v89 + 1;
          v87 = operator new(v89 + 1);
          __p[1] = (void *)v37;
          v116 = v90 | 0x8000000000000000;
          __p[0] = v87;
        }
        else
        {
          HIBYTE(v116) = v37;
          if (!v37)
          {
            LOBYTE(__p[0]) = 0;
            v117 = 1;
            v88 = object[0];
            if ((SHIBYTE(v116) & 0x80000000) == 0)
              goto LABEL_127;
            goto LABEL_133;
          }
        }
        memmove(v87, v38, v37);
        *((_BYTE *)v87 + v37) = 0;
        v117 = 1;
        v88 = object[0];
        if ((SHIBYTE(v116) & 0x80000000) == 0)
        {
LABEL_127:
          if (!v114)
            goto LABEL_136;
          goto LABEL_134;
        }
LABEL_133:
        operator delete(__p[0]);
        if (!v114)
        {
LABEL_136:
          if (object[0])
            os_release(object[0]);
          sub_20F294980((int)object, v33, v36, v88, OS_LOG_TYPE_ERROR, v31 != 0, &v100);
          if (v31)
          {
            sub_20E8C003C((uint64_t)&v101, "Failed to prune a candidate state (view: %d)", (_DWORD)v110);
            sub_20E863570((uint64_t)&v101);
          }
          sub_20E863570((uint64_t)&v101);
          v91 = v108;
          if (v108)
          {
            p_shared_owners = (unint64_t *)&v108->__shared_owners_;
            do
              v93 = __ldaxr(p_shared_owners);
            while (__stlxr(v93 - 1, p_shared_owners));
            if (!v93)
            {
              ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
              std::__shared_weak_count::__release_weak(v91);
            }
          }
          return 0;
        }
LABEL_134:
        if (SHIBYTE(v113) < 0)
          operator delete(object[1]);
        goto LABEL_136;
      }
    }
    memmove(v84, v82, v83);
    goto LABEL_123;
  }
  v97 = 0;
  v98 = 0;
  v99 = 0;
  v9 = (char **)a1[2];
  v10 = *v9;
  v11 = v9[1];
  v12 = **v9;
  if (v12 <= -2)
  {
    do
    {
      v13 = (__clz(__rbit64(((*v10 >> 7) & ~*v10 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      v10 = (_QWORD *)((char *)v10 + v13);
      v11 += 32 * v13;
      v12 = *(char *)v10;
    }
    while (v12 < -1);
  }
  if (v12 == 255)
  {
    v14 = 0;
    v95 = (char **)a1[3];
    v42 = *v95;
    v43 = v95[1];
    v44 = **v95;
    if (v44 <= -2)
      goto LABEL_63;
    goto LABEL_64;
  }
  v14 = 0;
  do
  {
    v15 = *((_QWORD *)v11 + 2);
    if (*(_BYTE *)(v15 + 192))
      v16 = v15 + 40;
    else
      v16 = 0;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16)
      && (sub_20F292DE0((uint64_t)&v109, *a1, *((_QWORD *)v11 + 2)) & 1) == 0)
    {
      if (v14 < v99)
      {
        *(_OWORD *)v14 = *(_OWORD *)v11;
        v17 = v14 + 2;
LABEL_39:
        v98 = v17;
        v14 = v17;
        goto LABEL_40;
      }
      v18 = v97;
      v19 = ((uint64_t)v14 - v97) >> 4;
      v20 = v19 + 1;
      if ((unint64_t)(v19 + 1) >> 60)
        sub_20E867F44();
      v21 = (uint64_t)v99 - v97;
      if (((uint64_t)v99 - v97) >> 3 > v20)
        v20 = v21 >> 3;
      if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0)
        v22 = 0xFFFFFFFFFFFFFFFLL;
      else
        v22 = v20;
      if (v22)
      {
        if (v22 >> 60)
          sub_20E877A38();
        v23 = (char *)operator new(16 * v22);
        v24 = &v23[16 * v19];
        *(_OWORD *)v24 = *(_OWORD *)v11;
        v25 = (uint64_t)v24;
        if (v14 == (uint64_t *)v18)
        {
LABEL_37:
          v17 = (uint64_t *)(v24 + 16);
          v97 = v25;
          v98 = (uint64_t *)(v24 + 16);
          v99 = (uint64_t *)&v23[16 * v22];
          if (!v14)
            goto LABEL_39;
LABEL_38:
          operator delete(v14);
          goto LABEL_39;
        }
      }
      else
      {
        v23 = 0;
        v24 = (char *)(16 * v19);
        *(_OWORD *)(16 * v19) = *(_OWORD *)v11;
        v25 = 16 * v19;
        if (v14 == (uint64_t *)v18)
          goto LABEL_37;
      }
      do
      {
        v29 = *(v14 - 2);
        v14 -= 2;
        v30 = *((_DWORD *)v14 + 2);
        *(_QWORD *)(v25 - 16) = v29;
        v25 -= 16;
        *(_DWORD *)(v25 + 8) = v30;
      }
      while (v14 != (uint64_t *)v18);
      v14 = (uint64_t *)v97;
      v17 = (uint64_t *)(v24 + 16);
      v97 = v25;
      v98 = (uint64_t *)(v24 + 16);
      v99 = (uint64_t *)&v23[16 * v22];
      if (!v14)
        goto LABEL_39;
      goto LABEL_38;
    }
LABEL_40:
    v27 = *((char *)v10 + 1);
    v10 = (_QWORD *)((char *)v10 + 1);
    LOBYTE(v26) = v27;
    v11 += 32;
    if (v27 <= -2)
    {
      do
      {
        v28 = (__clz(__rbit64(((*v10 >> 7) & ~*v10 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
        v10 = (_QWORD *)((char *)v10 + v28);
        v11 += 32 * v28;
        v26 = *(char *)v10;
      }
      while (v26 < -1);
    }
  }
  while (v26 != 255);
  if ((uint64_t *)v97 != v14)
  {
    v40 = (uint64_t *)v97;
    do
    {
      sub_20F2939AC((uint64_t *)a1[2], *v40, v40[1]);
      v40 += 2;
    }
    while (v40 != v14);
    v14 = (uint64_t *)v97;
  }
  v41 = (char **)a1[3];
  v42 = *v41;
  v43 = v41[1];
  v44 = **v41;
  if (v44 <= -2)
  {
    do
    {
LABEL_63:
      v45 = (__clz(__rbit64(((*v42 >> 7) & ~*v42 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      v42 = (_QWORD *)((char *)v42 + v45);
      v43 += 32 * v45;
      v44 = *(char *)v42;
    }
    while (v44 < -1);
  }
LABEL_64:
  if (v44 != 255)
  {
    do
    {
      v46 = *((_QWORD *)v43 + 2);
      if (*(_BYTE *)(v46 + 968))
        v47 = v46 + 40;
      else
        v47 = 0;
      if (*(_QWORD *)(v47 + 920))
      {
        if (v109 == *(void **)(v47 + 896) && (_DWORD)v110 == *(_DWORD *)(v47 + 904))
        {
          v48 = *(_QWORD *)(v46 + 976);
          v49 = *(_QWORD *)(v46 + 984);
          if (v48 != v49)
          {
            while (*(void **)v48 == v109 && *(_DWORD *)(v48 + 8) == (_DWORD)v110)
            {
              v48 += 152;
              if (v48 == v49)
                goto LABEL_90;
            }
            v50 = sub_20E9DF85C((_QWORD *)(*a1 + 1784), (uint64_t *)v48);
            if (v50)
              v52 = (uint64_t)(v50 + 5);
            else
              v52 = 0;
            if (!v50
              && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/VIODatabaseUtil.hpp", 193, (uint64_t)"pose_ref != nullptr", 19, (uint64_t)"Cannot find the pose ref", 24, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_154;
            }
            if (!*(_QWORD *)(v52 + 64)
              && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/VIODatabaseUtil.hpp", 196, (uint64_t)"pose_ref->lens", 14, (uint64_t)"Lens does not exist", 19, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_154;
            }
            _Q0 = *(float64x2_t *)(v48 + 112);
            v51.f64[0] = 1.0;
            _Q2 = vmulq_f64(_Q0, _Q0);
            _D3 = *(_QWORD *)(v48 + 120);
            __asm { FMLA            D2, D3, V0.D[1] }
            _Q2.f64[0] = 1.0 / sqrt(_Q2.f64[0] + 1.0 * 1.0);
            v59 = vmulq_f64(v51, _Q2);
            *(float64x2_t *)object = vmulq_n_f64(_Q0, _Q2.f64[0]);
            v112 = *(_QWORD *)&v59.f64[0];
            _Q0 = *(float64x2_t *)(v48 + 128);
            v59.f64[0] = 1.0;
            _Q2 = vmulq_f64(_Q0, _Q0);
            _D3 = *(_QWORD *)(v48 + 136);
            __asm { FMLA            D2, D3, V0.D[1] }
            _Q2.f64[0] = 1.0 / sqrt(_Q2.f64[0] + 1.0 * 1.0);
            v101 = vmulq_n_f64(_Q0, _Q2.f64[0]);
            rep = *(_OWORD *)&vmulq_f64(v59, _Q2);
            v63 = *(_BYTE *)(v46 + 968) ? v46 + 40 : 0;
            if (!sub_20FCCD298(v63, (__int128 *)object, (__int128 *)&v101, (__int128 *)v48, v52)
              && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/VIODatabaseUtil.hpp", 210, (uint64_t)"ret", 3, (uint64_t)"When re-anchoring, failed to set anchor for track using frame ", 62, (void (*)(void **))sub_21023DDB0))
            {
LABEL_154:
              abort();
            }
          }
        }
      }
LABEL_90:
      v65 = *((char *)v42 + 1);
      v42 = (_QWORD *)((char *)v42 + 1);
      LOBYTE(v64) = v65;
      v43 += 32;
      if (v65 <= -2)
      {
        do
        {
          v66 = (__clz(__rbit64(((*v42 >> 7) & ~*v42 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          v42 = (_QWORD *)((char *)v42 + v66);
          v43 += 32 * v66;
          v64 = *(char *)v42;
        }
        while (v64 < -1);
      }
    }
    while (v64 != 255);
  }
  v67 = (char **)a1[4];
  v68 = *v67;
  v69 = v67[1];
  v70 = **v67;
  if (v70 <= -2)
  {
    do
    {
      v71 = (__clz(__rbit64(((*v68 >> 7) & ~*v68 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      v68 = (_QWORD *)((char *)v68 + v71);
      v69 += 32 * v71;
      v70 = *(char *)v68;
    }
    while (v70 < -1);
  }
  while (v70 != 255)
  {
    v72 = *((_QWORD *)v69 + 2);
    v73 = v72 + 40;
    if (!*(_BYTE *)(v72 + 280))
      v73 = 0;
    if (*(_BYTE *)(v73 + 152))
      sub_20F293B94((uint64_t)&v109, *a1, v72);
    v74 = *((char *)v68 + 1);
    v68 = (_QWORD *)((char *)v68 + 1);
    LOBYTE(v70) = v74;
    v69 += 32;
    if (v74 <= -2)
    {
      do
      {
        v75 = (__clz(__rbit64(((*v68 >> 7) & ~*v68 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
        v68 = (_QWORD *)((char *)v68 + v75);
        v69 += 32 * v75;
        v70 = *(char *)v68;
      }
      while (v70 < -1);
    }
  }
  if (v14)
  {
    v98 = v14;
    operator delete(v14);
  }
  v76 = v109;
  v77 = v110;
  v78 = operator new(0x20uLL);
  *v78 = &off_24C9FC4B0;
  v78[1] = a1;
  v78[2] = v109;
  *((_DWORD *)v78 + 6) = (_DWORD)v110;
  v113 = (void **)v78;
  sub_20F293D98(a1, v76, v77, (uint64_t)object);
  v79 = v113;
  if (v113 == object)
  {
    v80 = 4;
    v79 = object;
LABEL_147:
    (*((void (**)(void))*v79 + v80))();
  }
  else if (v113)
  {
    v80 = 5;
    goto LABEL_147;
  }
  if ((sub_20F294098((uint64_t)a1, v109, v110, a4) & 1) == 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/viodatabase.hpp", 449, (uint64_t)"ret", 3, (uint64_t)"Fail to remove state, this should not happen!", 45, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  return 1;
}

void sub_20F270150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33)
{
  if (a33)
  {
    if (a32 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_20F270190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void (**object)(void),void *__p,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  if (a30 == v31)
  {
    object[4]();
    _Unwind_Resume(exception_object);
  }
  if (a30)
  {
    (*(void (**)(void))(*(_QWORD *)a30 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20F270288(_DWORD *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string::size_type size;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  std::string::size_type v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  std::string::size_type v35;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  __int128 v39;
  std::string *v40;
  std::string::size_type v41;
  std::string *v42;
  __int128 v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  std::string::size_type v47;
  std::string *v48;
  __int128 v49;
  std::string *v50;
  __int128 v51;
  std::string *v52;
  std::string::size_type v53;
  std::string *v54;
  __int128 v55;
  std::string *v56;
  __int128 v57;
  std::string *p_p;
  std::string::size_type v59;
  std::string *v60;
  std::string __p;
  void *v62[2];
  char v63;
  std::string v64;
  void *v65[2];
  char v66;
  std::string v67;
  void *v68[2];
  char v69;
  std::string v70;
  void *v71[2];
  char v72;
  std::string v73;
  std::string::value_type v74[8];
  char v75;
  std::string v76;
  void *v77[2];
  char v78;
  std::string v79;
  void *v80[2];
  char v81;
  std::string v82;
  std::string::value_type v83[8];
  char v84;
  std::string v85;
  std::string::value_type __s[23];
  char v87;
  std::string v88;
  std::string v89;
  std::string v90;
  std::string v91;
  std::string v92;
  std::string v93;
  std::string v94;
  std::string v95;
  std::string v96;
  std::string v97;
  std::string v98;
  std::string v99;
  std::string v100;
  std::string v101;
  std::string v102;
  std::string v103;
  std::string v104;
  std::string v105;
  std::string v106;
  std::string v107;

  *((_BYTE *)&v89.__r_.__value_.__s + 23) = 8;
  strcpy((char *)&v89, " Active:");
  std::to_string(&v88, *a1 & 1);
  if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = &v88;
  else
    v4 = (std::string *)v88.__r_.__value_.__r.__words[0];
  if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v88.__r_.__value_.__r.__words[2]);
  else
    size = v88.__r_.__value_.__l.__size_;
  v6 = std::string::append(&v89, (const std::string::value_type *)v4, size);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v90.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v87 = 9;
  strcpy(__s, " Primary:");
  v8 = std::string::append(&v90, __s, 9uLL);
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v91.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v85, (*a1 >> 1) & 1);
  if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = &v85;
  else
    v10 = (std::string *)v85.__r_.__value_.__r.__words[0];
  if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = HIBYTE(v85.__r_.__value_.__r.__words[2]);
  else
    v11 = v85.__r_.__value_.__l.__size_;
  v12 = std::string::append(&v91, (const std::string::value_type *)v10, v11);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v92.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v84 = 6;
  strcpy(v83, " Self:");
  v14 = std::string::append(&v92, v83, 6uLL);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v93.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v82, (*a1 >> 2) & 1);
  if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = &v82;
  else
    v16 = (std::string *)v82.__r_.__value_.__r.__words[0];
  if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = HIBYTE(v82.__r_.__value_.__r.__words[2]);
  else
    v17 = v82.__r_.__value_.__l.__size_;
  v18 = std::string::append(&v93, (const std::string::value_type *)v16, v17);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v94.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  v81 = 8;
  strcpy((char *)v80, " Merged:");
  v20 = std::string::append(&v94, (const std::string::value_type *)v80, 8uLL);
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v95.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v79, (*a1 >> 3) & 1);
  if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = &v79;
  else
    v22 = (std::string *)v79.__r_.__value_.__r.__words[0];
  if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = HIBYTE(v79.__r_.__value_.__r.__words[2]);
  else
    v23 = v79.__r_.__value_.__l.__size_;
  v24 = std::string::append(&v95, (const std::string::value_type *)v22, v23);
  v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v96.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  v78 = 8;
  strcpy((char *)v77, " Loaded:");
  v26 = std::string::append(&v96, (const std::string::value_type *)v77, 8uLL);
  v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v97.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v76, (*a1 >> 4) & 1);
  if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v28 = &v76;
  else
    v28 = (std::string *)v76.__r_.__value_.__r.__words[0];
  if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v29 = HIBYTE(v76.__r_.__value_.__r.__words[2]);
  else
    v29 = v76.__r_.__value_.__l.__size_;
  v30 = std::string::append(&v97, (const std::string::value_type *)v28, v29);
  v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v98.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  v75 = 4;
  strcpy(v74, " CM:");
  v32 = std::string::append(&v98, v74, 4uLL);
  v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v99.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v73, (*a1 >> 5) & 1);
  if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v34 = &v73;
  else
    v34 = (std::string *)v73.__r_.__value_.__r.__words[0];
  if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v35 = HIBYTE(v73.__r_.__value_.__r.__words[2]);
  else
    v35 = v73.__r_.__value_.__l.__size_;
  v36 = std::string::append(&v99, (const std::string::value_type *)v34, v35);
  v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
  v100.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v37;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  v72 = 12;
  strcpy((char *)v71, " HasLocOnce:");
  v38 = std::string::append(&v100, (const std::string::value_type *)v71, 0xCuLL);
  v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  v101.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v101.__r_.__value_.__l.__data_ = v39;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v70, (*a1 >> 6) & 1);
  if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v40 = &v70;
  else
    v40 = (std::string *)v70.__r_.__value_.__r.__words[0];
  if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v41 = HIBYTE(v70.__r_.__value_.__r.__words[2]);
  else
    v41 = v70.__r_.__value_.__l.__size_;
  v42 = std::string::append(&v101, (const std::string::value_type *)v40, v41);
  v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
  v102.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v43;
  v42->__r_.__value_.__l.__size_ = 0;
  v42->__r_.__value_.__r.__words[2] = 0;
  v42->__r_.__value_.__r.__words[0] = 0;
  v69 = 8;
  strcpy((char *)v68, " Resume:");
  v44 = std::string::append(&v102, (const std::string::value_type *)v68, 8uLL);
  v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
  v103.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v45;
  v44->__r_.__value_.__l.__size_ = 0;
  v44->__r_.__value_.__r.__words[2] = 0;
  v44->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v67, (*a1 >> 7) & 1);
  if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v46 = &v67;
  else
    v46 = (std::string *)v67.__r_.__value_.__r.__words[0];
  if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v47 = HIBYTE(v67.__r_.__value_.__r.__words[2]);
  else
    v47 = v67.__r_.__value_.__l.__size_;
  v48 = std::string::append(&v103, (const std::string::value_type *)v46, v47);
  v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
  v104.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v49;
  v48->__r_.__value_.__l.__size_ = 0;
  v48->__r_.__value_.__r.__words[2] = 0;
  v48->__r_.__value_.__r.__words[0] = 0;
  v66 = 12;
  strcpy((char *)v65, " HasLocCurr:");
  v50 = std::string::append(&v104, (const std::string::value_type *)v65, 0xCuLL);
  v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
  v105.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v51;
  v50->__r_.__value_.__l.__size_ = 0;
  v50->__r_.__value_.__r.__words[2] = 0;
  v50->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v64, (*a1 >> 8) & 1);
  if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v52 = &v64;
  else
    v52 = (std::string *)v64.__r_.__value_.__r.__words[0];
  if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v53 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
  else
    v53 = v64.__r_.__value_.__l.__size_;
  v54 = std::string::append(&v105, (const std::string::value_type *)v52, v53);
  v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
  v106.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v106.__r_.__value_.__l.__data_ = v55;
  v54->__r_.__value_.__l.__size_ = 0;
  v54->__r_.__value_.__r.__words[2] = 0;
  v54->__r_.__value_.__r.__words[0] = 0;
  v63 = 9;
  strcpy((char *)v62, " Unknown:");
  v56 = std::string::append(&v106, (const std::string::value_type *)v62, 9uLL);
  v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
  v107.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v107.__r_.__value_.__l.__data_ = v57;
  v56->__r_.__value_.__l.__size_ = 0;
  v56->__r_.__value_.__r.__words[2] = 0;
  v56->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, (*a1 >> 9) & 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v59 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v59 = __p.__r_.__value_.__l.__size_;
  v60 = std::string::append(&v107, (const std::string::value_type *)p_p, v59);
  *a2 = *v60;
  v60->__r_.__value_.__l.__size_ = 0;
  v60->__r_.__value_.__r.__words[2] = 0;
  v60->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v107.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_63:
      if ((v63 & 0x80000000) == 0)
        goto LABEL_64;
      goto LABEL_102;
    }
  }
  else if ((SHIBYTE(v107.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_63;
  }
  operator delete(v107.__r_.__value_.__l.__data_);
  if ((v63 & 0x80000000) == 0)
  {
LABEL_64:
    if ((SHIBYTE(v106.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_65;
    goto LABEL_103;
  }
LABEL_102:
  operator delete(v62[0]);
  if ((SHIBYTE(v106.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_65:
    if ((SHIBYTE(v64.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_66;
    goto LABEL_104;
  }
LABEL_103:
  operator delete(v106.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v64.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_66:
    if ((SHIBYTE(v105.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_67;
    goto LABEL_105;
  }
LABEL_104:
  operator delete(v64.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v105.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_67:
    if ((v66 & 0x80000000) == 0)
      goto LABEL_68;
    goto LABEL_106;
  }
LABEL_105:
  operator delete(v105.__r_.__value_.__l.__data_);
  if ((v66 & 0x80000000) == 0)
  {
LABEL_68:
    if ((SHIBYTE(v104.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_69;
    goto LABEL_107;
  }
LABEL_106:
  operator delete(v65[0]);
  if ((SHIBYTE(v104.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_69:
    if ((SHIBYTE(v67.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_70;
    goto LABEL_108;
  }
LABEL_107:
  operator delete(v104.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v67.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_70:
    if ((SHIBYTE(v103.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_71;
    goto LABEL_109;
  }
LABEL_108:
  operator delete(v67.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v103.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_71:
    if ((v69 & 0x80000000) == 0)
      goto LABEL_72;
    goto LABEL_110;
  }
LABEL_109:
  operator delete(v103.__r_.__value_.__l.__data_);
  if ((v69 & 0x80000000) == 0)
  {
LABEL_72:
    if ((SHIBYTE(v102.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_73;
    goto LABEL_111;
  }
LABEL_110:
  operator delete(v68[0]);
  if ((SHIBYTE(v102.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_73:
    if ((SHIBYTE(v70.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_74;
    goto LABEL_112;
  }
LABEL_111:
  operator delete(v102.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v70.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_74:
    if ((SHIBYTE(v101.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_75;
    goto LABEL_113;
  }
LABEL_112:
  operator delete(v70.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v101.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_75:
    if ((v72 & 0x80000000) == 0)
      goto LABEL_76;
    goto LABEL_114;
  }
LABEL_113:
  operator delete(v101.__r_.__value_.__l.__data_);
  if ((v72 & 0x80000000) == 0)
  {
LABEL_76:
    if ((SHIBYTE(v100.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_77;
    goto LABEL_115;
  }
LABEL_114:
  operator delete(v71[0]);
  if ((SHIBYTE(v100.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_77:
    if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_78;
    goto LABEL_116;
  }
LABEL_115:
  operator delete(v100.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_78:
    if ((SHIBYTE(v99.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_79;
    goto LABEL_117;
  }
LABEL_116:
  operator delete(v73.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v99.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_79:
    if ((v75 & 0x80000000) == 0)
      goto LABEL_80;
    goto LABEL_118;
  }
LABEL_117:
  operator delete(v99.__r_.__value_.__l.__data_);
  if ((v75 & 0x80000000) == 0)
  {
LABEL_80:
    if ((SHIBYTE(v98.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_81;
    goto LABEL_119;
  }
LABEL_118:
  operator delete(*(void **)v74);
  if ((SHIBYTE(v98.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_81:
    if ((SHIBYTE(v76.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_82;
    goto LABEL_120;
  }
LABEL_119:
  operator delete(v98.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v76.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_82:
    if ((SHIBYTE(v97.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_83;
    goto LABEL_121;
  }
LABEL_120:
  operator delete(v76.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v97.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_83:
    if ((v78 & 0x80000000) == 0)
      goto LABEL_84;
    goto LABEL_122;
  }
LABEL_121:
  operator delete(v97.__r_.__value_.__l.__data_);
  if ((v78 & 0x80000000) == 0)
  {
LABEL_84:
    if ((SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_85;
    goto LABEL_123;
  }
LABEL_122:
  operator delete(v77[0]);
  if ((SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_85:
    if ((SHIBYTE(v79.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_86;
    goto LABEL_124;
  }
LABEL_123:
  operator delete(v96.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v79.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_86:
    if ((SHIBYTE(v95.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_87;
    goto LABEL_125;
  }
LABEL_124:
  operator delete(v79.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v95.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_87:
    if ((v81 & 0x80000000) == 0)
      goto LABEL_88;
    goto LABEL_126;
  }
LABEL_125:
  operator delete(v95.__r_.__value_.__l.__data_);
  if ((v81 & 0x80000000) == 0)
  {
LABEL_88:
    if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_89;
    goto LABEL_127;
  }
LABEL_126:
  operator delete(v80[0]);
  if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_89:
    if ((SHIBYTE(v82.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_90;
    goto LABEL_128;
  }
LABEL_127:
  operator delete(v94.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v82.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_90:
    if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_91;
    goto LABEL_129;
  }
LABEL_128:
  operator delete(v82.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_91:
    if ((v84 & 0x80000000) == 0)
      goto LABEL_92;
    goto LABEL_130;
  }
LABEL_129:
  operator delete(v93.__r_.__value_.__l.__data_);
  if ((v84 & 0x80000000) == 0)
  {
LABEL_92:
    if ((SHIBYTE(v92.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_93;
    goto LABEL_131;
  }
LABEL_130:
  operator delete(*(void **)v83);
  if ((SHIBYTE(v92.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_93:
    if ((SHIBYTE(v85.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_94;
    goto LABEL_132;
  }
LABEL_131:
  operator delete(v92.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v85.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_94:
    if ((SHIBYTE(v91.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_95;
    goto LABEL_133;
  }
LABEL_132:
  operator delete(v85.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v91.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_95:
    if ((v87 & 0x80000000) == 0)
      goto LABEL_96;
    goto LABEL_134;
  }
LABEL_133:
  operator delete(v91.__r_.__value_.__l.__data_);
  if ((v87 & 0x80000000) == 0)
  {
LABEL_96:
    if ((SHIBYTE(v90.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_97;
    goto LABEL_135;
  }
LABEL_134:
  operator delete(*(void **)__s);
  if ((SHIBYTE(v90.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_97:
    if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_98;
    goto LABEL_136;
  }
LABEL_135:
  operator delete(v90.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_98:
    if ((SHIBYTE(v89.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_137:
    operator delete(v89.__r_.__value_.__l.__data_);
    return;
  }
LABEL_136:
  operator delete(v88.__r_.__value_.__l.__data_);
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_137;
}

void sub_20F270BFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,void *a63)
{
  char a68;
  void *a69;
  char a72;
  void *a73;
  char a74;
  void *a75;
  char a76;
  void *a77;
  char a78;
  void *a79;
  char a80;
  void *a81;
  char a82;
  void *a83;
  char a84;
  void *a85;
  char a86;
  void *a87;
  char a88;
  void *a89;
  char a90;
  void *a91;
  char a92;
  uint64_t v92;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v92 - 41) & 0x80000000) == 0)
    {
LABEL_3:
      if ((a20 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_42;
    }
  }
  else if ((*(char *)(v92 - 41) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v92 - 64));
  if ((a20 & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v92 - 73) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_43;
  }
LABEL_42:
  operator delete(a15);
  if ((*(char *)(v92 - 73) & 0x80000000) == 0)
  {
LABEL_5:
    if ((a26 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_44;
  }
LABEL_43:
  operator delete(*(void **)(v92 - 96));
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(v92 - 105) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_45;
  }
LABEL_44:
  operator delete(a21);
  if ((*(char *)(v92 - 105) & 0x80000000) == 0)
  {
LABEL_7:
    if ((a32 & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_46;
  }
LABEL_45:
  operator delete(*(void **)(v92 - 128));
  if ((a32 & 0x80000000) == 0)
  {
LABEL_8:
    if ((*(char *)(v92 - 137) & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_47;
  }
LABEL_46:
  operator delete(a27);
  if ((*(char *)(v92 - 137) & 0x80000000) == 0)
  {
LABEL_9:
    if ((a38 & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_48;
  }
LABEL_47:
  operator delete(*(void **)(v92 - 160));
  if ((a38 & 0x80000000) == 0)
  {
LABEL_10:
    if ((*(char *)(v92 - 169) & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_49;
  }
LABEL_48:
  operator delete(a33);
  if ((*(char *)(v92 - 169) & 0x80000000) == 0)
  {
LABEL_11:
    if ((a44 & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_50;
  }
LABEL_49:
  operator delete(*(void **)(v92 - 192));
  if ((a44 & 0x80000000) == 0)
  {
LABEL_12:
    if ((*(char *)(v92 - 201) & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_51;
  }
LABEL_50:
  operator delete(a39);
  if ((*(char *)(v92 - 201) & 0x80000000) == 0)
  {
LABEL_13:
    if ((a50 & 0x80000000) == 0)
      goto LABEL_14;
    goto LABEL_52;
  }
LABEL_51:
  operator delete(*(void **)(v92 - 224));
  if ((a50 & 0x80000000) == 0)
  {
LABEL_14:
    if ((*(char *)(v92 - 233) & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_53;
  }
LABEL_52:
  operator delete(a45);
  if ((*(char *)(v92 - 233) & 0x80000000) == 0)
  {
LABEL_15:
    if ((a56 & 0x80000000) == 0)
      goto LABEL_16;
    goto LABEL_54;
  }
LABEL_53:
  operator delete(*(void **)(v92 - 256));
  if ((a56 & 0x80000000) == 0)
  {
LABEL_16:
    if ((SLOBYTE(STACK[0x337]) & 0x80000000) == 0)
      goto LABEL_17;
    goto LABEL_55;
  }
LABEL_54:
  operator delete(a51);
  if ((SLOBYTE(STACK[0x337]) & 0x80000000) == 0)
  {
LABEL_17:
    if ((a62 & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_56;
  }
LABEL_55:
  operator delete((void *)STACK[0x320]);
  if ((a62 & 0x80000000) == 0)
  {
LABEL_18:
    if ((SLOBYTE(STACK[0x317]) & 0x80000000) == 0)
      goto LABEL_19;
    goto LABEL_57;
  }
LABEL_56:
  operator delete(a57);
  if ((SLOBYTE(STACK[0x317]) & 0x80000000) == 0)
  {
LABEL_19:
    if ((a68 & 0x80000000) == 0)
      goto LABEL_20;
    goto LABEL_58;
  }
LABEL_57:
  operator delete((void *)STACK[0x300]);
  if ((a68 & 0x80000000) == 0)
  {
LABEL_20:
    if ((SLOBYTE(STACK[0x2F7]) & 0x80000000) == 0)
      goto LABEL_21;
    goto LABEL_59;
  }
LABEL_58:
  operator delete(a63);
  if ((SLOBYTE(STACK[0x2F7]) & 0x80000000) == 0)
  {
LABEL_21:
    if ((a72 & 0x80000000) == 0)
      goto LABEL_22;
    goto LABEL_60;
  }
LABEL_59:
  operator delete((void *)STACK[0x2E0]);
  if ((a72 & 0x80000000) == 0)
  {
LABEL_22:
    if ((SLOBYTE(STACK[0x2D7]) & 0x80000000) == 0)
      goto LABEL_23;
    goto LABEL_61;
  }
LABEL_60:
  operator delete(a69);
  if ((SLOBYTE(STACK[0x2D7]) & 0x80000000) == 0)
  {
LABEL_23:
    if ((a74 & 0x80000000) == 0)
      goto LABEL_24;
    goto LABEL_62;
  }
LABEL_61:
  operator delete((void *)STACK[0x2C0]);
  if ((a74 & 0x80000000) == 0)
  {
LABEL_24:
    if ((SLOBYTE(STACK[0x2B7]) & 0x80000000) == 0)
      goto LABEL_25;
    goto LABEL_63;
  }
LABEL_62:
  operator delete(a73);
  if ((SLOBYTE(STACK[0x2B7]) & 0x80000000) == 0)
  {
LABEL_25:
    if ((a76 & 0x80000000) == 0)
      goto LABEL_26;
    goto LABEL_64;
  }
LABEL_63:
  operator delete((void *)STACK[0x2A0]);
  if ((a76 & 0x80000000) == 0)
  {
LABEL_26:
    if ((SLOBYTE(STACK[0x297]) & 0x80000000) == 0)
      goto LABEL_27;
    goto LABEL_65;
  }
LABEL_64:
  operator delete(a75);
  if ((SLOBYTE(STACK[0x297]) & 0x80000000) == 0)
  {
LABEL_27:
    if ((a78 & 0x80000000) == 0)
      goto LABEL_28;
    goto LABEL_66;
  }
LABEL_65:
  operator delete((void *)STACK[0x280]);
  if ((a78 & 0x80000000) == 0)
  {
LABEL_28:
    if ((SLOBYTE(STACK[0x277]) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_67;
  }
LABEL_66:
  operator delete(a77);
  if ((SLOBYTE(STACK[0x277]) & 0x80000000) == 0)
  {
LABEL_29:
    if ((a80 & 0x80000000) == 0)
      goto LABEL_30;
    goto LABEL_68;
  }
LABEL_67:
  operator delete((void *)STACK[0x260]);
  if ((a80 & 0x80000000) == 0)
  {
LABEL_30:
    if ((SLOBYTE(STACK[0x257]) & 0x80000000) == 0)
      goto LABEL_31;
    goto LABEL_69;
  }
LABEL_68:
  operator delete(a79);
  if ((SLOBYTE(STACK[0x257]) & 0x80000000) == 0)
  {
LABEL_31:
    if ((a82 & 0x80000000) == 0)
      goto LABEL_32;
    goto LABEL_70;
  }
LABEL_69:
  operator delete((void *)STACK[0x240]);
  if ((a82 & 0x80000000) == 0)
  {
LABEL_32:
    if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0)
      goto LABEL_33;
    goto LABEL_71;
  }
LABEL_70:
  operator delete(a81);
  if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0)
  {
LABEL_33:
    if ((a84 & 0x80000000) == 0)
      goto LABEL_34;
    goto LABEL_72;
  }
LABEL_71:
  operator delete((void *)STACK[0x220]);
  if ((a84 & 0x80000000) == 0)
  {
LABEL_34:
    if ((SLOBYTE(STACK[0x217]) & 0x80000000) == 0)
      goto LABEL_35;
    goto LABEL_73;
  }
LABEL_72:
  operator delete(a83);
  if ((SLOBYTE(STACK[0x217]) & 0x80000000) == 0)
  {
LABEL_35:
    if ((a86 & 0x80000000) == 0)
      goto LABEL_36;
    goto LABEL_74;
  }
LABEL_73:
  operator delete((void *)STACK[0x200]);
  if ((a86 & 0x80000000) == 0)
  {
LABEL_36:
    if ((a92 & 0x80000000) == 0)
      goto LABEL_37;
    goto LABEL_75;
  }
LABEL_74:
  operator delete(a85);
  if ((a92 & 0x80000000) == 0)
  {
LABEL_37:
    if ((a88 & 0x80000000) == 0)
      goto LABEL_38;
    goto LABEL_76;
  }
LABEL_75:
  operator delete(a91);
  if ((a88 & 0x80000000) == 0)
  {
LABEL_38:
    if ((a90 & 0x80000000) == 0)
      goto LABEL_39;
    goto LABEL_77;
  }
LABEL_76:
  operator delete(a87);
  if ((a90 & 0x80000000) == 0)
LABEL_39:
    _Unwind_Resume(a1);
LABEL_77:
  operator delete(a89);
  _Unwind_Resume(a1);
}

void sub_20F271018(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0)
    JUMPOUT(0x20F270E78);
  JUMPOUT(0x20F270C68);
}

void sub_20F271028()
{
  uint64_t v0;

  if (*(char *)(v0 - 233) < 0)
    JUMPOUT(0x20F270E88);
  JUMPOUT(0x20F270C70);
}

void sub_20F271038(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0)
    JUMPOUT(0x20F270E98);
  JUMPOUT(0x20F270C78);
}

void sub_20F271048(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0)
    JUMPOUT(0x20F270EB8);
  JUMPOUT(0x20F270C88);
}

void sub_20F271058()
{
  if (SLOBYTE(STACK[0x317]) < 0)
    JUMPOUT(0x20F270EC8);
  JUMPOUT(0x20F270C90);
}

void sub_20F271068(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a41 < 0)
    JUMPOUT(0x20F270ED8);
  JUMPOUT(0x20F270C98);
}

void sub_20F271078(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (a44 < 0)
    JUMPOUT(0x20F270EF8);
  JUMPOUT(0x20F270CA8);
}

void sub_20F271088()
{
  if (SLOBYTE(STACK[0x2D7]) < 0)
    JUMPOUT(0x20F270F08);
  JUMPOUT(0x20F270CB0);
}

void sub_20F271098(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a47 < 0)
    JUMPOUT(0x20F270F18);
  JUMPOUT(0x20F270CB8);
}

void sub_20F2710A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a50 < 0)
    JUMPOUT(0x20F270F38);
  JUMPOUT(0x20F270CC8);
}

void sub_20F2710B8()
{
  if (SLOBYTE(STACK[0x297]) < 0)
    JUMPOUT(0x20F270F48);
  JUMPOUT(0x20F270CD0);
}

void sub_20F2710C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (a53 < 0)
    JUMPOUT(0x20F270F58);
  JUMPOUT(0x20F270CD8);
}

void sub_20F2710D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a56 < 0)
    JUMPOUT(0x20F270F78);
  JUMPOUT(0x20F270CE8);
}

void sub_20F2710E8()
{
  if (SLOBYTE(STACK[0x257]) < 0)
    JUMPOUT(0x20F270F88);
  JUMPOUT(0x20F270CF0);
}

void sub_20F2710F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (a59 < 0)
    JUMPOUT(0x20F270F98);
  JUMPOUT(0x20F270CF8);
}

void sub_20F271108(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  if (a62 < 0)
    JUMPOUT(0x20F270FB8);
  JUMPOUT(0x20F270D08);
}

void sub_20F271118()
{
  if (SLOBYTE(STACK[0x217]) < 0)
    JUMPOUT(0x20F270FC8);
  JUMPOUT(0x20F270D10);
}

void sub_20F271128(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,int a62,__int16 a63)
{
  char a65;

  if (a65 < 0)
    JUMPOUT(0x20F270FD8);
  JUMPOUT(0x20F270D18);
}

void sub_20F271138(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a68;

  if (a68 < 0)
    JUMPOUT(0x20F270FF8);
  JUMPOUT(0x20F270D28);
}

void sub_20F271148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a71;

  if (a71 < 0)
    JUMPOUT(0x20F271008);
  JUMPOUT(0x20F270D30);
}

void sub_20F271158(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  int v4;
  void **v5;
  std::string::size_type v6;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  std::string::size_type size;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  std::string v16;
  void *__p[2];
  unsigned __int8 v18;
  std::string v19;
  std::string v20;
  std::string v21;
  std::string v22;

  *((_BYTE *)&v19.__r_.__value_.__s + 23) = 1;
  LOWORD(v19.__r_.__value_.__l.__data_) = 123;
  v4 = *(_DWORD *)(a1 + 8);
  v16.__r_.__value_.__r.__words[0] = *(_QWORD *)a1;
  LODWORD(v16.__r_.__value_.__r.__words[1]) = v4;
  sub_210216370((uint64_t)&v16);
  if ((v18 & 0x80u) == 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  if ((v18 & 0x80u) == 0)
    v6 = v18;
  else
    v6 = (std::string::size_type)__p[1];
  v7 = std::string::append(&v19, (const std::string::value_type *)v5, v6);
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  v9 = std::string::append(&v20, ", ", 2uLL);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v16, *(_DWORD *)(a1 + 16));
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v16;
  else
    v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v16.__r_.__value_.__r.__words[2]);
  else
    size = v16.__r_.__value_.__l.__size_;
  v13 = std::string::append(&v21, (const std::string::value_type *)v11, size);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  v15 = std::string::append(&v22, "}", 1uLL);
  *a2 = *v15;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v22.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_15:
      if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_16;
      goto LABEL_22;
    }
  }
  else if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_15;
  }
  operator delete(v16.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_16:
    if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_17;
    goto LABEL_23;
  }
LABEL_22:
  operator delete(v21.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_17:
    if (((char)v18 & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_24;
  }
LABEL_23:
  operator delete(v20.__r_.__value_.__l.__data_);
  if (((char)v18 & 0x80000000) == 0)
  {
LABEL_18:
    if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_25:
    operator delete(v19.__r_.__value_.__l.__data_);
    return;
  }
LABEL_24:
  operator delete(__p[0]);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_25;
}

void sub_20F27132C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(char *)(v33 - 41) < 0)
  {
    operator delete(*(void **)(v33 - 64));
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v33 - 73) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((*(char *)(v33 - 73) & 0x80000000) == 0)
  {
LABEL_4:
    if ((a33 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(*(void **)(v33 - 96));
  if ((a33 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a21 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a28);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a27 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a16);
  if ((a27 & 0x80000000) == 0)
LABEL_7:
    _Unwind_Resume(exception_object);
LABEL_13:
  operator delete(a22);
  _Unwind_Resume(exception_object);
}

void sub_20F27141C(_QWORD *a1)
{
  sub_20F279D18(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F271440(uint64_t a1, uint64_t a2, char ***a3, __int128 *a4, uint64_t a5, double a6)
{
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  __int32 v16;
  float32x4_t v17;
  float32x4_t v18;
  uint64_t v19;
  uint64_t v20;
  void *__p[2];
  uint64_t v23;
  float32x4_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  int v28;
  float *v29[3];
  float32x4_t v30;
  uint64_t v31;

  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(_DWORD *)(a1 + 1088);
  v26 = 0u;
  v27 = 0u;
  v28 = 733221148;
  kdebug_trace();
  __p[0] = 0;
  __p[1] = 0;
  v23 = 0;
  switch(v13)
  {
    case 0:
      sub_20F2CA470(*(_DWORD **)(a1 + 1056), v12, a2 + 40, *(_QWORD *)a2, (char **)&v30, *(double *)(a1 + 40), a6);
      goto LABEL_9;
    case 1:
      sub_20F2C9728(*(_QWORD *)(a1 + 1056), v12, (uint64_t **)(a2 + 40), (void **)&v30);
      goto LABEL_9;
    case 2:
    case 3:
      v14 = *(_QWORD *)(a1 + 1056);
      v15 = *(_QWORD *)(v14 + 8);
      if (v15)
      {
        v16 = *(_DWORD *)(a1 + 68);
        sub_20F2CBB50(*(_QWORD *)(a1 + 1056), a3, a4, (uint64_t)v29);
        sub_20F2929D8(v30.f32, v29);
        v17.i32[0] = v16;
        sub_20F2CA7E0(v14, &v30, v12, 0, 0, (void **)&v24, v17);
        if (v29[0])
          MEMORY[0x212BC6368](v29[0], 0x1000C8052888210);
        v15 = v25;
        v18 = v24;
      }
      else
      {
        v18 = 0uLL;
      }
      goto LABEL_11;
    case 4:
      sub_20F2CA28C((uint64_t **)(a2 + 40), (void **)&v30);
LABEL_9:
      v15 = v31;
      v18 = v30;
LABEL_11:
      *(float32x4_t *)__p = v18;
      v23 = v15;
      break;
    default:
      break;
  }
  kdebug_trace();
  sub_20F277CE0(a1, a2, (__int128 **)__p, a5, 1);
  v20 = v19;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v20;
}

void sub_20F271620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20E8E69C4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F271664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (!__p)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F271690(uint64_t a1, uint64_t a2, float32x4_t *a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, unsigned __int8 a8)
{
  float32x4_t v16;
  uint64_t v17;
  BOOL v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v23;
  uint64_t v24;
  void *__p[2];
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  int v29;

  v27 = 0u;
  v28 = 0u;
  v29 = 733221148;
  kdebug_trace();
  if (*(_DWORD *)(a1 + 1088) == 2)
  {
    __p[0] = 0;
    __p[1] = 0;
    v26 = 0;
    if (*(_BYTE *)(a1 + 225)
      && (v17 = *(_QWORD *)(a1 + 1072)) != 0
      && (*(_QWORD *)(v17 + 8) ? (v18 = *(_BYTE *)(a4 + 4) == 0) : (v18 = 1),
          !v18 ? (v19 = *(_DWORD *)a4 == 2) : (v19 = 0),
          v19))
    {
      v16.i32[0] = *(_DWORD *)(a1 + 68);
      sub_20F2CA7E0(v17, a3, *(_QWORD *)(a1 + 48), a7, a8, (void **)&v23, v16);
    }
    else
    {
      v16.i32[0] = *(_DWORD *)(a1 + 68);
      sub_20F2CA7E0(*(_QWORD *)(a1 + 1056), a3, *(_QWORD *)(a1 + 48), a7, a8, (void **)&v23, v16);
    }
    *(_OWORD *)__p = v23;
    v26 = v24;
    sub_20F277CE0(a1, a2, (__int128 **)__p, a5, a6);
    v21 = v20;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    v21 = 5;
  }
  kdebug_trace();
  return v21;
}

void sub_20F2717FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20E8E69C4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F271810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20E8E69C4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F271824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (__p)
    operator delete(__p);
  sub_20E8E69C4((uint64_t)&a17);
  _Unwind_Resume(a1);
}

BOOL sub_20F271850(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v24;
  unint64_t v25;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  const char *v31;
  unsigned __int8 v32;
  const char *v33;
  size_t v34;
  _BYTE *v35;
  unint64_t v36;
  const char *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  size_t v47;
  std::__shared_weak_count_vtbl *v48;
  std::__shared_weak_count *v49;
  std::__shared_weak_count *v50;
  unint64_t *p_shared_owners;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  void *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  _QWORD v82[3];
  int v83;
  const char *v84;
  int v85;
  const char *v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  uint64_t v89;
  _BYTE object[24];
  __int128 v91;
  void *__p[2];
  unint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;

  if (!*(_QWORD *)(*a2 + 64))
    return 0;
  v4 = (uint64_t *)a2[5];
  v3 = (uint64_t *)a2[6];
  if (v3 != v4)
  {
    v5 = ((char *)v3 - (char *)v4) >> 4;
    v6 = *((_DWORD *)a3 + 4);
    v7 = *a3;
    while (1)
    {
      v8 = v5 >> 1;
      v9 = &v4[2 * (v5 >> 1)];
      v10 = *v9;
      v11 = *(_DWORD *)(*v9 + 16);
      v12 = v11 >= v6;
      if (v11 != v6)
        goto LABEL_10;
      if (*(_QWORD *)v10 >= v7)
        break;
LABEL_4:
      v4 = v9 + 2;
      v8 = v5 + ~v8;
LABEL_5:
      v5 = v8;
      if (!v8)
        goto LABEL_13;
    }
    if (*(_QWORD *)v10 != v7)
      goto LABEL_5;
    v12 = *(_DWORD *)(v10 + 8) >= *((_DWORD *)a3 + 2);
LABEL_10:
    if (v12)
      goto LABEL_5;
    goto LABEL_4;
  }
LABEL_13:
  if (v4 == v3)
    goto LABEL_33;
  v13 = *v4;
  v14 = (uint64_t *)a2[6];
  if (*(_DWORD *)(*v4 + 16) == *((_DWORD *)a3 + 4))
  {
    v14 = (uint64_t *)a2[6];
    if (*(_QWORD *)v13 == *a3)
    {
      if (*(_DWORD *)(v13 + 8) == *((_DWORD *)a3 + 2))
        v14 = v4;
      else
        v14 = (uint64_t *)a2[6];
    }
  }
  if (v3 == v14)
  {
LABEL_33:
    sub_20F24E118(&v89);
    if (**(int **)(v89 + 56) <= 4)
    {
      v24 = *(unsigned __int8 *)(v89 + 72);
      v25 = sub_20E8C31DC(v89, "OSLogSurrogateAppender", 1, 0);
      if (v24 || v25 != 0)
      {
        v27 = v25;
        v82[0] = &v89;
        v82[1] = std::chrono::steady_clock::now().__d_.__rep_;
        v82[2] = std::chrono::system_clock::now().__d_.__rep_;
        v83 = 4;
        v84 = "unknown file";
        v85 = 71;
        v87 = 0;
        v88 = 0;
        v86 = "unknown function";
        v28 = v89;
        v29 = v89 + 16;
        if (*(char *)(v89 + 39) < 0)
        {
          v31 = *(const char **)(v89 + 16);
          v30 = *(_QWORD *)(v89 + 24);
        }
        else
        {
          v30 = *(unsigned __int8 *)(v89 + 39);
          v31 = (const char *)(*(_QWORD *)v82[0] + 16);
        }
        v32 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v32 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)object);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
          if ((_BYTE)v91 && (object[23] & 0x80000000) != 0)
            operator delete(*(void **)object);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        if (byte_254A4A4F8[23] >= 0)
          v33 = byte_254A4A4F8;
        else
          v33 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v34 = byte_254A4A4F8[23];
        else
          v34 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)object = os_log_create(v33, v31);
        v35 = &object[8];
        if (v34 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v34 >= 0x17)
        {
          v36 = v27;
          v37 = v31;
          v38 = v28;
          v39 = v24;
          v40 = v29;
          v41 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v34 | 7) != 0x17)
            v41 = v34 | 7;
          v42 = v41 + 1;
          v35 = operator new(v41 + 1);
          *(_QWORD *)&object[16] = v34;
          *(_QWORD *)&v91 = v42 | 0x8000000000000000;
          *(_QWORD *)&object[8] = v35;
          v29 = v40;
          v24 = v39;
          v28 = v38;
          v31 = v37;
          v27 = v36;
        }
        else
        {
          BYTE7(v91) = v34;
          if (!v34)
          {
LABEL_56:
            v35[v34] = 0;
            BYTE8(v91) = 1;
            v43 = __p;
            if (v30 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v30 >= 0x17)
            {
              v44 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v30 | 7) != 0x17)
                v44 = v30 | 7;
              v45 = v44 + 1;
              v43 = operator new(v44 + 1);
              __p[1] = (void *)v30;
              v93 = v45 | 0x8000000000000000;
              __p[0] = v43;
            }
            else
            {
              HIBYTE(v93) = v30;
              if (!v30)
                goto LABEL_64;
            }
            memmove(v43, v31, v30);
LABEL_64:
            *((_BYTE *)v43 + v30) = 0;
            v94 = 1;
            v46 = *(NSObject **)object;
            if (SHIBYTE(v93) < 0)
              operator delete(__p[0]);
            if (BYTE8(v91) && SBYTE7(v91) < 0)
              operator delete(*(void **)&object[8]);
            if (*(_QWORD *)object)
              os_release(*(void **)object);
            if (v27 && *(_QWORD *)(v27 + 24))
            {
              v47 = _os_log_pack_size();
              v48 = (std::__shared_weak_count_vtbl *)operator new(v47, (std::align_val_t)8uLL);
              v49 = (std::__shared_weak_count *)operator new();
              v50 = v49;
              v49->__shared_owners_ = 0;
              p_shared_owners = (unint64_t *)&v49->__shared_owners_;
              v49->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v49->__shared_weak_owners_ = 0;
              v49[1].__vftable = v48;
              *(_QWORD *)object = v48;
              *(_QWORD *)&object[8] = v48;
              *(_QWORD *)&object[16] = v49;
              do
                v52 = __ldxr(p_shared_owners);
              while (__stxr(v52 + 1, p_shared_owners));
              v91 = 0uLL;
              __p[0] = 0;
              do
                v53 = __ldaxr(p_shared_owners);
              while (__stlxr(v53 - 1, p_shared_owners));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                std::__shared_weak_count::__release_weak(v50);
              }
              v54 = *(_QWORD *)object;
              *(_WORD *)_os_log_pack_fill() = 0;
              v55 = operator new();
              v56 = *(unsigned __int8 *)(v28 + 39);
              if ((v56 & 0x80u) == 0)
                v57 = v29;
              else
                v57 = *(_QWORD *)(v28 + 16);
              if ((v56 & 0x80u) != 0)
                v56 = *(_QWORD *)(v28 + 24);
              *(_QWORD *)v55 = v54;
              *(_OWORD *)(v55 + 8) = *(_OWORD *)&object[8];
              *(_QWORD *)&object[8] = 0;
              *(_QWORD *)&object[16] = 0;
              *(_OWORD *)(v55 + 24) = v91;
              v91 = 0uLL;
              *(_QWORD *)(v55 + 40) = v57;
              *(_QWORD *)(v55 + 48) = v56;
              *(_BYTE *)(v55 + 56) = 16;
              v95 = 0;
              v96 = v55;
              (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v27 + 24) + 40))(*(_QWORD *)(v27 + 24), &v96);
              v58 = v96;
              v96 = 0;
              if (v58)
              {
                v59 = *(std::__shared_weak_count **)(v58 + 32);
                if (v59)
                {
                  v60 = (unint64_t *)&v59->__shared_owners_;
                  do
                    v61 = __ldaxr(v60);
                  while (__stlxr(v61 - 1, v60));
                  if (!v61)
                  {
                    ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                    std::__shared_weak_count::__release_weak(v59);
                  }
                }
                v62 = *(std::__shared_weak_count **)(v58 + 16);
                if (v62)
                {
                  v63 = (unint64_t *)&v62->__shared_owners_;
                  do
                    v64 = __ldaxr(v63);
                  while (__stlxr(v64 - 1, v63));
                  if (!v64)
                  {
                    ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                    std::__shared_weak_count::__release_weak(v62);
                  }
                }
                MEMORY[0x212BC6398](v58, 0x10F0C40B62ED6C6);
                v65 = v95;
                v95 = 0;
                if (v65)
                {
                  v66 = *(std::__shared_weak_count **)(v65 + 32);
                  if (v66)
                  {
                    v67 = (unint64_t *)&v66->__shared_owners_;
                    do
                      v68 = __ldaxr(v67);
                    while (__stlxr(v68 - 1, v67));
                    if (!v68)
                    {
                      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                      std::__shared_weak_count::__release_weak(v66);
                    }
                  }
                  v69 = *(std::__shared_weak_count **)(v65 + 16);
                  if (v69)
                  {
                    v70 = (unint64_t *)&v69->__shared_owners_;
                    do
                      v71 = __ldaxr(v70);
                    while (__stlxr(v71 - 1, v70));
                    if (!v71)
                    {
                      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                      std::__shared_weak_count::__release_weak(v69);
                    }
                  }
                  MEMORY[0x212BC6398](v65, 0x10F0C40B62ED6C6);
                }
              }
              v72 = (std::__shared_weak_count *)*((_QWORD *)&v91 + 1);
              if (*((_QWORD *)&v91 + 1))
              {
                v73 = (unint64_t *)(*((_QWORD *)&v91 + 1) + 8);
                do
                  v74 = __ldaxr(v73);
                while (__stlxr(v74 - 1, v73));
                if (!v74)
                {
                  ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
                  std::__shared_weak_count::__release_weak(v72);
                }
              }
              v75 = *(std::__shared_weak_count **)&object[16];
              if (*(_QWORD *)&object[16])
              {
                v76 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                do
                  v77 = __ldaxr(v76);
                while (__stlxr(v77 - 1, v76));
                if (!v77)
                {
                  ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
                  std::__shared_weak_count::__release_weak(v75);
                }
              }
            }
            else
            {
              os_log_type_enabled(v46, OS_LOG_TYPE_ERROR);
              *(_WORD *)object = 0;
              v78 = (void *)_os_log_send_and_compose_impl();
              if (v78)
                free(v78);
            }
            if (v24)
            {
              sub_20E8C003C((uint64_t)v82, "Failed to find keyframe when querying its number of tracks with structure covariance");
              sub_20E863570((uint64_t)v82);
            }
            sub_20E863570((uint64_t)v82);
            v79 = v88;
            if (v88)
            {
              v80 = (unint64_t *)&v88->__shared_owners_;
              do
                v81 = __ldaxr(v80);
              while (__stlxr(v81 - 1, v80));
              if (!v81)
              {
                ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                std::__shared_weak_count::__release_weak(v79);
              }
            }
            return 0;
          }
        }
        memmove(v35, v33, v34);
        goto LABEL_56;
      }
    }
    return 0;
  }
  v15 = a2[1];
  *(_OWORD *)object = *(_OWORD *)a3;
  *(_DWORD *)&object[16] = *((_DWORD *)a3 + 4);
  v16 = (_QWORD *)(v15 + 24);
  if (sub_20E9DF85C((_QWORD *)(v15 + 24), (uint64_t *)object)
    && (v17 = (_QWORD *)sub_20E9DF85C(v16, (uint64_t *)object)[7]) != 0)
  {
    v18 = 0;
    v19 = 0;
    do
    {
      v20 = v17[3];
      if (*(_BYTE *)(v20 + 192))
      {
        v21 = *(unsigned __int8 *)(v20 + 188);
        if ((unint64_t)(v19 + 1) > 1)
          v22 = 1;
        else
          v22 = v18;
        if (v21)
        {
          v18 = v22;
          ++v19;
        }
      }
      v17 = (_QWORD *)*v17;
    }
    while (v17);
  }
  else
  {
    LOBYTE(v18) = 0;
  }
  return v18 != 0;
}

void sub_20F272060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a27)
  {
    if (a26 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20F2720A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  sub_20E86E8C4((uint64_t *)(v3 - 96));
  sub_20E86E8C4((uint64_t *)(v3 - 104));
  sub_20E86E658((uint64_t)va1);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F2720CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  sub_20E86E658((uint64_t)va1);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F2720E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  MEMORY[0x212BC6398](v3, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F272114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F272130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F272144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *object,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a28 && a27 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20F272188(float64x2_t *a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, _QWORD *a7, uint64_t a8, double a9, double a10, double a11, double a12, float64x2_t a13, unsigned __int8 a14, unsigned __int8 a15, uint64_t a16, uint64_t **a17, char a18, unsigned int **a19, char a20,unsigned int **a21,char a22,uint64_t a23,char a24,int a25,char a26,uint64_t a27,_DWORD *a28,uint64_t a29,_QWORD *a30,char a31,uint64_t a32,char a33)
{
  unint64_t v33;
  float64x2_t *k;
  int v37;
  uint64_t v38;
  float64_t v40;
  double v42;
  double v44;
  double v45;
  float64x2_t v47;
  int v55;
  uint64_t **v56;
  uint64_t **v57;
  uint64_t *v58;
  uint64_t *v59;
  __int128 v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t *v68;
  int v69;
  char *v70;
  char *v71;
  unsigned int v72;
  unint64_t v73;
  char *v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  float *v84;
  float v85;
  void **v86;
  uint64_t v87;
  float v88;
  float v89;
  float v91;
  float v92;
  float v93;
  unint64_t v94;
  uint8x8_t v95;
  void **v96;
  _QWORD *v97;
  uint64_t v98;
  unint64_t v100;
  unint64_t v102;
  float v103;
  _BOOL8 v104;
  unint64_t v105;
  unint64_t v106;
  size_t prime;
  void *v108;
  void *v109;
  uint64_t v110;
  _QWORD **v111;
  size_t v112;
  size_t v113;
  size_t v114;
  _QWORD *i;
  size_t v116;
  uint64_t v117;
  unint64_t v118;
  uint8x8_t v119;
  uint64_t v120;
  _QWORD *v121;
  void *v122;
  uint64_t v123;
  size_t v124;
  _QWORD *v125;
  _QWORD *v126;
  unint64_t v127;
  _QWORD *v128;
  _QWORD *v129;
  _QWORD *v130;
  _QWORD *v131;
  _QWORD *v132;
  _QWORD *v133;
  unint64_t v134;
  uint8x8_t v135;
  unint64_t v136;
  uint64_t **v137;
  uint64_t *v138;
  uint64_t v139;
  unint64_t v141;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t *v146;
  _QWORD *v147;
  _QWORD *v148;
  _QWORD *v149;
  _QWORD *v150;
  _QWORD *v151;
  _QWORD *v152;
  _QWORD *v153;
  void *v154;
  _QWORD *v155;
  char *v156;
  char *v157;
  void *v158;
  void *v159;
  unint64_t v160;
  _QWORD *v161;
  unint64_t v162;
  _QWORD *v163;
  void *v164;
  _QWORD *v165;
  void *v166;
  _QWORD *v167;
  void **v168;
  uint64_t v169;
  char **v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  char **v174;
  char **v175;
  void *v176;
  char **v177;
  char *v178;
  char *v179;
  _QWORD *v180;
  unint64_t v181;
  uint64_t *v182;
  uint64_t v183;
  char **v184;
  _QWORD *v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v188;
  _QWORD *v189;
  const void **v190;
  char v191;
  int v192;
  char v193;
  uint64_t v194;
  unint64_t v195;
  unint64_t v196;
  uint64_t *v197;
  uint64_t *v198;
  char v199;
  uint64_t v200;
  uint64_t *v201;
  uint64_t *v202;
  int v203;
  unsigned __int8 v204;
  uint64_t v206;
  int v207;
  uint64_t v208;
  char *v209;
  size_t v210;
  void *v211;
  uint64_t v212;
  uint64_t j;
  uint64_t v214;
  int v215;
  float64x2_t *v216;
  uint64_t v217;
  size_t v218;
  const char *v219;
  unsigned __int8 v220;
  uint64_t v221;
  int v222;
  unsigned __int8 v223;
  void *v224;
  uint64_t v225;
  uint64_t v226;
  void (***v227)(_QWORD);
  void (***v228)(_QWORD);
  void (***v229)(_QWORD);
  void (**v230)(_QWORD);
  uint64_t v231;
  unsigned int v232;
  int v233;
  unsigned int v234;
  float v235;
  int64_t v236;
  uint64_t v237;
  unint64_t v238;
  unint64_t v239;
  float64x2_t v240;
  float64x2_t v241;
  void (***v242)(_QWORD);
  _QWORD *v243;
  void (***v244)(_QWORD);
  void (***v245)(_QWORD);
  void (***v246)(_QWORD);
  void (***v247)(_QWORD);
  void (**v248)(_QWORD);
  unint64_t v249;
  float64x2_t v250;
  float64_t v251;
  unint64_t v252;
  float64x2_t *v253;
  uint64_t v254;
  int8x16_t v255;
  unint64_t v256;
  float64x2_t *v257;
  unint64_t v260;
  unint64_t v261;
  uint64_t v262;
  unint64_t v263;
  float64x2_t *v264;
  float64x2_t *v265;
  uint64_t v266;
  unint64_t v267;
  unint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  void (***v274)(_QWORD);
  void (***v275)(_QWORD);
  void (**v276)(_QWORD);
  unint64_t v277;
  unint64_t v278;
  unint64_t *v279;
  unint64_t *v280;
  unint64_t *v281;
  unint64_t v282;
  unint64_t *v283;
  unint64_t v284;
  unint64_t v285;
  unint64_t *v286;
  unint64_t *v287;
  unint64_t v288;
  unint64_t *v289;
  unint64_t v290;
  unint64_t v291;
  unint64_t v292;
  int v293;
  unint64_t v294;
  unint64_t v295;
  _QWORD *v297;
  size_t v298;
  void *p_dst;
  uint64_t v300;
  uint64_t v301;
  unint64_t v302;
  uint64_t v303;
  unint64_t v304;
  uint64_t v305;
  _QWORD *v306;
  _QWORD *v307;
  uint64_t v308;
  _QWORD *v309;
  double v310;
  double v311;
  float64_t v312;
  uint64_t v313;
  unint64_t v314;
  unint64_t v315;
  unint64_t v316;
  char *v317;
  double v318;
  double v319;
  float64_t v320;
  __double2 v321;
  _QWORD *v322;
  __int128 v323;
  char v324;
  long double v325;
  double v326;
  int v327;
  float64x2_t v328;
  _BOOL4 v329;
  uint64_t v330;
  uint64_t v331;
  unint64_t v332;
  double v333;
  char *v334;
  unint64_t v335;
  float64x2_t v336;
  float64x2_t v337;
  float64x2_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  void **v342;
  void **v343;
  uint64_t v344;
  uint64_t v345;
  void **v346;
  void *v347;
  void **v348;
  _QWORD *v349;
  uint64_t v350;
  _BYTE *v351;
  void **v352;
  _QWORD *v353;
  uint64_t v354;
  _QWORD *v355;
  uint64_t v356;
  _QWORD *v357;
  uint64_t v358;
  _QWORD *v359;
  uint64_t v360;
  uint64_t v361;
  unint64_t v362;
  uint64_t *v363;
  uint64_t v364;
  _QWORD *v365;
  uint64_t *v366;
  uint64_t v367;
  uint64_t v368;
  unint64_t v369;
  uint64_t v370;
  unint64_t v371;
  _BYTE *v372;
  uint64_t *v373;
  uint64_t v374;
  int64_t v375;
  unint64_t v376;
  uint64_t v377;
  unint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t *v381;
  _OWORD *v382;
  uint64_t *v383;
  uint64_t v384;
  __int128 v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t *v388;
  unint64_t *v389;
  unint64_t v390;
  unint64_t v391;
  float *v392;
  unint64_t v393;
  unint64_t v394;
  unint64_t v395;
  float *v396;
  _QWORD *v397;
  unint64_t v398;
  unint64_t v399;
  _BOOL4 v400;
  _BOOL4 v401;
  _QWORD *v402;
  unint64_t v403;
  unint64_t v404;
  unint64_t v405;
  uint64_t *v406;
  unsigned __int8 v407;
  unint64_t v408;
  char *v410;
  size_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  _BOOL4 v416;
  uint64_t v417;
  unsigned __int8 v418;
  int v419;
  int v420;
  void *v421;
  uint64_t v422;
  uint64_t v423;
  unint64_t v424;
  unint64_t v425;
  char *v426;
  char *v427;
  uint64_t v428;
  char *v429;
  uint64_t v430;
  int64x2_t v431;
  char *v432;
  void *v433;
  uint64_t v434;
  uint64_t v435;
  const char *v436;
  uint64_t v437;
  const char *v438;
  size_t v439;
  unsigned __int8 v440;
  unsigned __int8 v441;
  const char *v442;
  size_t v443;
  _BYTE *v444;
  uint64_t v445;
  uint64_t v446;
  char *v447;
  NSObject *v448;
  uint64_t v449;
  uint64_t v450;
  size_t v451;
  void *v452;
  double v453;
  size_t v454;
  size_t v455;
  _QWORD *v456;
  void *v457;
  int v458;
  int v459;
  unint64_t v460;
  unint64_t v461;
  int v462;
  unint64_t v463;
  unint64_t v464;
  uint64_t v465;
  uint64_t v466;
  _QWORD *v467;
  char v468;
  char *v469;
  void *v470;
  std::__shared_weak_count *v471;
  unint64_t *p_shared_owners;
  unint64_t v473;
  char *v474;
  unint64_t *v475;
  unint64_t v476;
  std::__shared_weak_count *v477;
  unint64_t *v478;
  unint64_t v479;
  unint64_t v480;
  std::__shared_weak_count *v481;
  unint64_t *v482;
  unint64_t v483;
  uint64_t v484;
  char *v485;
  uint64_t v486;
  char *v487;
  uint64_t v488;
  const char *v489;
  void *v490;
  std::__shared_weak_count *v491;
  unint64_t *v492;
  unint64_t v493;
  std::__shared_weak_count *v494;
  unint64_t *v495;
  unint64_t v496;
  _QWORD *v497;
  std::__shared_weak_count *v498;
  unint64_t *v499;
  unint64_t v500;
  std::__shared_weak_count *v501;
  unint64_t *v502;
  unint64_t v503;
  std::__shared_weak_count *v504;
  unint64_t *v505;
  unint64_t v506;
  std::__shared_weak_count *v507;
  unint64_t *v508;
  unint64_t v509;
  const char *v510;
  std::__shared_weak_count *v511;
  unint64_t *v512;
  unint64_t v513;
  unint64_t v514;
  char *v515;
  char *v516;
  uint64_t v517;
  uint64_t v518;
  unint64_t v519;
  uint64_t v520;
  unint64_t v521;
  _BYTE *v522;
  _QWORD *v523;
  uint64_t v524;
  int64_t v525;
  unint64_t v526;
  uint64_t v527;
  uint64_t v528;
  char *v529;
  _OWORD *v530;
  char *v531;
  uint64_t v532;
  __int128 v533;
  uint64_t v534;
  char *v535;
  char *v536;
  void *v537;
  void *v538;
  void *v539;
  uint64_t v540;
  unint64_t v541;
  float64x2_t v542;
  float64x2_t v543;
  double v544;
  float64x2_t v545;
  char *v548;
  uint64_t v549;
  _QWORD *v550;
  uint64_t v551;
  unsigned __int8 v552;
  const char *v553;
  size_t v554;
  _BYTE *v555;
  uint64_t v556;
  uint64_t v557;
  _BYTE *v558;
  NSObject *v559;
  uint64_t v560;
  uint64_t v561;
  size_t v562;
  std::__shared_weak_count_vtbl *v563;
  std::__shared_weak_count *v564;
  std::__shared_weak_count *v565;
  unint64_t *v566;
  unint64_t v567;
  unint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  __int128 v574;
  uint64_t v575;
  std::__shared_weak_count *v576;
  unint64_t *v577;
  unint64_t v578;
  std::__shared_weak_count *v579;
  unint64_t *v580;
  unint64_t v581;
  uint64_t v582;
  std::__shared_weak_count *v583;
  unint64_t *v584;
  unint64_t v585;
  std::__shared_weak_count *v586;
  unint64_t *v587;
  unint64_t v588;
  std::__shared_weak_count *v589;
  unint64_t *v590;
  unint64_t v591;
  std::__shared_weak_count *v592;
  unint64_t *v593;
  unint64_t v594;
  void *v595;
  std::__shared_weak_count *v596;
  unint64_t *v597;
  unint64_t v598;
  uint64_t v599;
  uint64_t v600;
  void *v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  size_t v605;
  const char *v606;
  uint64_t v607;
  uint64_t v608;
  size_t v609;
  const char *v610;
  double v611;
  unsigned __int8 v612;
  const char *v613;
  size_t v614;
  _BYTE *v615;
  unint64_t v616;
  uint64_t v617;
  uint64_t v618;
  _BYTE *v619;
  unint64_t v620;
  uint64_t v621;
  uint64_t v622;
  NSObject *v623;
  double v624;
  size_t v625;
  std::__shared_weak_count_vtbl *v626;
  std::__shared_weak_count *v627;
  std::__shared_weak_count *v628;
  unint64_t *v629;
  unint64_t v630;
  unint64_t v631;
  uint64_t v632;
  uint64_t v633;
  double v634;
  char *v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  __int128 v639;
  void *v640;
  std::__shared_weak_count *v641;
  unint64_t *v642;
  unint64_t v643;
  std::__shared_weak_count *v644;
  unint64_t *v645;
  unint64_t v646;
  uint64_t v647;
  std::__shared_weak_count *v648;
  unint64_t *v649;
  unint64_t v650;
  std::__shared_weak_count *v651;
  unint64_t *v652;
  unint64_t v653;
  std::__shared_weak_count *v654;
  int v655;
  unint64_t *v656;
  unint64_t v657;
  std::__shared_weak_count *v658;
  unint64_t *v659;
  unint64_t v660;
  float v661;
  void *v662;
  std::__shared_weak_count *v663;
  unint64_t *v664;
  unint64_t v665;
  unsigned __int8 v666;
  const char *v667;
  size_t v668;
  _BYTE *v669;
  unint64_t v670;
  uint64_t v671;
  uint64_t v672;
  _BYTE *v673;
  unint64_t v674;
  uint64_t v675;
  uint64_t v676;
  NSObject *v677;
  size_t v678;
  std::__shared_weak_count_vtbl *v679;
  std::__shared_weak_count *v680;
  std::__shared_weak_count *v681;
  unint64_t *v682;
  unint64_t v683;
  unint64_t v684;
  uint64_t v685;
  uint64_t v686;
  double v687;
  char *v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  __int128 v692;
  void *v693;
  std::__shared_weak_count *v694;
  unint64_t *v695;
  unint64_t v696;
  std::__shared_weak_count *v697;
  unint64_t *v698;
  unint64_t v699;
  _QWORD *v700;
  std::__shared_weak_count *v701;
  unint64_t *v702;
  unint64_t v703;
  std::__shared_weak_count *v704;
  unint64_t *v705;
  unint64_t v706;
  std::__shared_weak_count *v707;
  int v708;
  unint64_t *v709;
  unint64_t v710;
  std::__shared_weak_count *v711;
  unint64_t *v712;
  unint64_t v713;
  double v714;
  void *v715;
  std::__shared_weak_count *v716;
  unint64_t *v717;
  unint64_t v718;
  uint64_t v719;
  _QWORD *v720;
  void *v721;
  _QWORD *v723;
  void *v724;
  _QWORD *v725;
  float64x2_t *v726;
  unint64_t *v727;
  int64x2_t *v728;
  unint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  unint64_t v734;
  uint64_t *v735;
  char *v736;
  uint64_t *v737;
  float64x2_t *v738;
  void **v739;
  _QWORD *v740;
  _QWORD *v741;
  float64x2_t *v743;
  uint64_t *v744;
  char **v745;
  unint64_t v746;
  uint64_t v747;
  int v748;
  int v752;
  uint64_t v753;
  BOOL v754;
  const void **v756;
  unint64_t v757;
  void *v758;
  int v759;
  _BYTE *v760;
  _BYTE *v761;
  int v762;
  int v763;
  unint64_t v764;
  float64x2_t *v765;
  const void **v766;
  uint64_t v768;
  float64x2_t v769;
  const char *v770;
  float64x2_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  int v775;
  float64_t v776;
  unint64_t v777;
  uint64_t v778;
  uint64_t v779;
  int __s;
  int8x16_t __sa;
  const char *__sb;
  int8x16_t __sc;
  int __sd;
  int __se;
  void *__dst;
  size_t v787;
  int64_t v788;
  char v789;
  void *__p[2];
  void *v791[2];
  __int128 v792;
  void *v793[2];
  __int128 v794;
  void *v795[5];
  void *v796[3];
  void *v797[2];
  void *v798[2];
  int v799;
  float64x2_t v800;
  uint64_t v801;
  char v802;
  void *v803[2];
  float64_t v804;
  char *v805;
  std::__shared_weak_count *v806;
  uint64_t v807;
  _QWORD *v808;
  __int128 v809;
  double v810;
  uint64_t v811;
  uint64_t v812;
  _QWORD v813[3];
  _QWORD *v814;
  uint64_t v815;
  _QWORD v816[3];
  _QWORD *v817;
  void *v818[3];
  __int128 v819;
  __int128 v820;
  const char *v821;
  int v822;
  const char *v823;
  uint64_t v824;
  std::__shared_weak_count *v825;
  _BYTE object[64];
  void *v827[2];
  void *v828[2];
  void *v829[2];
  void *v830[2];
  float v831[3];
  char v832;
  _BYTE v833[40];
  char *v834;
  const char *v835;
  unint64_t v836;
  std::__shared_weak_count *v837;
  uint64_t v838;

  k = a1;
  v838 = *MEMORY[0x24BDAC8D0];
  if (a33)
    _ZF = *((_BYTE *)a17 + 64) == 0;
  else
    _ZF = 1;
  v37 = !_ZF;
  v752 = v37;
  LOBYTE(v800.f64[0]) = 0;
  v802 = 0;
  v743 = a1 + 64;
  if (a14)
  {
    _Q17.f64[0] = *(float64_t *)(a8 + 8);
    v38 = *(_QWORD *)(a8 + 16);
    v40 = *(double *)(a8 + 32);
    _D2 = *(double *)(a8 + 40);
    v42 = *(double *)(a8 + 48);
    _D5 = *(_QWORD *)(a8 + 72);
    v44 = *(double *)(a8 + 80);
    v802 = 1;
    v45 = a1[65].f64[0];
    _Q16 = *v743;
    v47.f64[0] = *(float64_t *)a8;
    v47.f64[1] = v40;
    __asm { FMLA            D19, D17, V16.D[1] }
    _Q17.f64[1] = _D2;
    _Q0.f64[1] = v42;
    _Q18 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v47, v743->f64[0]), _Q17, *v743, 1), _Q0, v45);
    __asm { FMLA            D0, D5, V16.D[1] }
    a13.f64[0] = _Q0.f64[0] + v44 * v45;
    __asm { FMLA            D1, D2, V16.D[1] }
    _D1 = _D1 + v45 * v42;
    __asm { FMLA            D2, D1, V18.D[1] }
    _Q0.f64[0] = sqrt(_D2 + (_Q0.f64[0] + v45 * v44) * a13.f64[0]);
    if (_Q0.f64[0] == 0.0)
      _Q0.f64[0] = 1.0;
    else
      _Q0.f64[0] = 1.0 / _Q0.f64[0];
    v800 = vmulq_n_f64(_Q18, _Q0.f64[0]);
    v801 = *(_OWORD *)&vmulq_f64(a13, _Q0);
  }
  if (((LOBYTE(a1[1].f64[1]) != 0) & a14) != 0)
    v55 = 3;
  else
    v55 = 2;
  v748 = v55;
  *(_OWORD *)v798 = 0u;
  *(_OWORD *)v797 = 0u;
  v799 = 1065353216;
  v765 = a1;
  if (*a7 == a7[1])
    goto LABEL_302;
  memset(v833, 0, 32);
  *(_DWORD *)&v833[32] = 1065353216;
  v56 = (uint64_t **)a2[5];
  v57 = (uint64_t **)a2[6];
  while (v56 != v57)
  {
    v58 = *v56;
    v59 = sub_20F27A920((uint64_t *)v833, *v56, (uint64_t)*v56) + 5;
    if (v59 != v58 + 82)
      sub_20E86811C(v59, (char *)v58[82], (char *)v58[83], (v58[83] - v58[82]) >> 3);
    v56 += 2;
  }
  v744 = a3;
  v60 = 0uLL;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v791 = 0u;
  LODWORD(v792) = 1065353216;
  v61 = (_QWORD *)a2[1];
  v64 = (_QWORD *)*v61;
  v62 = v61 + 1;
  v63 = v64;
  if (v64 == v62)
    goto LABEL_274;
  v65 = 0;
  v761 = &object[32];
  v760 = &object[36];
  while (2)
  {
    v831[0] = 0.0;
    *(_OWORD *)v830 = v60;
    *(_OWORD *)v829 = v60;
    *(_OWORD *)v828 = v60;
    *(_OWORD *)v827 = v60;
    *(_OWORD *)&object[48] = v60;
    *(_OWORD *)&object[32] = v60;
    *(_OWORD *)&object[16] = v60;
    *(_OWORD *)object = v60;
    v66 = v63[6];
    v67 = *(uint64_t **)(v66 + 200);
    v68 = *(uint64_t **)(v66 + 208);
    if (v67 == v68)
      goto LABEL_220;
    v69 = 0;
    v70 = (char *)a2[5];
    v71 = (char *)a2[6];
    do
    {
      if (v71 != v70)
      {
        v72 = *((_DWORD *)v67 + 4);
        v73 = *v67;
        v74 = v70;
        v75 = (v71 - v70) >> 4;
        while (1)
        {
          v76 = v75 >> 1;
          v77 = (uint64_t *)&v74[16 * (v75 >> 1)];
          v78 = *v77;
          v79 = *(_DWORD *)(*v77 + 16);
          _CF = v79 >= v72;
          if (v79 != v72)
            goto LABEL_35;
          if (*(_QWORD *)v78 >= v73)
            break;
LABEL_29:
          v74 = (char *)(v77 + 2);
          v76 = v75 + ~v76;
LABEL_30:
          v75 = v76;
          if (!v76)
            goto LABEL_39;
        }
        if (*(_QWORD *)v78 != v73)
          goto LABEL_30;
        _CF = *(_DWORD *)(v78 + 8) >= *((_DWORD *)v67 + 2);
LABEL_35:
        if (_CF)
          goto LABEL_30;
        goto LABEL_29;
      }
      v74 = v70;
LABEL_39:
      if (v74 == v71)
      {
        v82 = v71;
      }
      else
      {
        v81 = *(_QWORD *)v74;
        v82 = v71;
        if (*(_DWORD *)(*(_QWORD *)v74 + 16) == *((_DWORD *)v67 + 4))
        {
          v82 = v71;
          if (*(_QWORD *)v81 == *v67)
          {
            if (*(_DWORD *)(v81 + 8) == *((_DWORD *)v67 + 2))
              v82 = v74;
            else
              v82 = v71;
          }
        }
      }
      v83 = *(_QWORD *)(*(_QWORD *)v82 + 656);
      if (v83 != *(_QWORD *)(*(_QWORD *)v82 + 664))
      {
        v84 = (float *)(v83 + 8 * *(unsigned int *)(v67[3] + 4));
        *(float *)&object[4 * *(unsigned __int8 *)v84] = v84[1] + *(float *)&object[4 * *(unsigned __int8 *)v84];
        ++v69;
      }
      v67 += 4;
    }
    while (v67 != v68);
    if (v69 <= 0)
      goto LABEL_220;
    v85 = *(float *)&object[4];
    if (*(float *)&object[4] < *(float *)&object[8])
      v85 = *(float *)&object[8];
    v86 = (void **)&object[8];
    if (*(float *)&object[4] >= *(float *)&object[8])
      v86 = (void **)&object[4];
    if (v85 < *(float *)&object[12])
    {
      v85 = *(float *)&object[12];
      v86 = (void **)&object[12];
    }
    if (v85 < *(float *)&object[16])
    {
      v85 = *(float *)&object[16];
      v86 = (void **)&object[16];
    }
    if (v85 < *(float *)&object[20])
    {
      v85 = *(float *)&object[20];
      v86 = (void **)&object[20];
    }
    if (v85 < *(float *)&object[24])
    {
      v85 = *(float *)&object[24];
      v86 = (void **)&object[24];
    }
    if (v85 < *(float *)&object[28])
    {
      v85 = *(float *)&object[28];
      v86 = (void **)&object[28];
    }
    if (v85 < *(float *)&object[32])
    {
      v85 = *(float *)&object[32];
      v86 = (void **)&object[32];
    }
    if (v85 < *(float *)&object[36])
    {
      v85 = *(float *)&object[36];
      v86 = (void **)&object[36];
    }
    if (v85 < *(float *)&object[40])
    {
      v85 = *(float *)&object[40];
      v86 = (void **)&object[40];
    }
    if (v85 < *(float *)&object[44])
    {
      v85 = *(float *)&object[44];
      v86 = (void **)&object[44];
    }
    if (v85 < *(float *)&object[48])
    {
      v85 = *(float *)&object[48];
      v86 = (void **)&object[48];
    }
    if (v85 < *(float *)&object[52])
    {
      v85 = *(float *)&object[52];
      v86 = (void **)&object[52];
    }
    if (v85 < *(float *)&object[56])
    {
      v85 = *(float *)&object[56];
      v86 = (void **)&object[56];
    }
    if (v85 < *(float *)&object[60])
    {
      v85 = *(float *)&object[60];
      v86 = (void **)&object[60];
    }
    if (v85 < *(float *)v827)
    {
      v85 = *(float *)v827;
      v86 = v827;
    }
    if (v85 < *((float *)v827 + 1))
    {
      v85 = *((float *)v827 + 1);
      v86 = (void **)((char *)v827 + 4);
    }
    if (v85 < *(float *)&v827[1])
    {
      v85 = *(float *)&v827[1];
      v86 = &v827[1];
    }
    if (v85 < *((float *)&v827[1] + 1))
    {
      v85 = *((float *)&v827[1] + 1);
      v86 = (void **)((char *)&v827[1] + 4);
    }
    if (v85 < *(float *)v828)
    {
      v85 = *(float *)v828;
      v86 = v828;
    }
    if (v85 < *((float *)v828 + 1))
    {
      v85 = *((float *)v828 + 1);
      v86 = (void **)((char *)v828 + 4);
    }
    if (v85 < *(float *)&v828[1])
    {
      v85 = *(float *)&v828[1];
      v86 = &v828[1];
    }
    if (v85 < *((float *)&v828[1] + 1))
    {
      v85 = *((float *)&v828[1] + 1);
      v86 = (void **)((char *)&v828[1] + 4);
    }
    if (v85 < *(float *)v829)
    {
      v85 = *(float *)v829;
      v86 = v829;
    }
    if (v85 < *((float *)v829 + 1))
    {
      v85 = *((float *)v829 + 1);
      v86 = (void **)((char *)v829 + 4);
    }
    if (v85 < *(float *)&v829[1])
    {
      v85 = *(float *)&v829[1];
      v86 = &v829[1];
    }
    if (v85 < *((float *)&v829[1] + 1))
    {
      v85 = *((float *)&v829[1] + 1);
      v86 = (void **)((char *)&v829[1] + 4);
    }
    if (v85 < *(float *)v830)
    {
      v85 = *(float *)v830;
      v86 = v830;
    }
    if (v85 < *((float *)v830 + 1))
    {
      v85 = *((float *)v830 + 1);
      v86 = (void **)((char *)v830 + 4);
    }
    if (v85 < *(float *)&v830[1])
    {
      v85 = *(float *)&v830[1];
      v86 = &v830[1];
    }
    if (v85 < *((float *)&v830[1] + 1))
    {
      v85 = *((float *)&v830[1] + 1);
      v86 = (void **)((char *)&v830[1] + 4);
    }
    if (v85 < v831[0])
      v86 = (void **)v831;
    v87 = (((char *)v86 - &object[4]) >> 2) + 1;
    v88 = *(float *)&object[4 * v87];
    if (v88 == 0.0)
      goto LABEL_121;
    v89 = 0.0 - v88;
    if (v88 >= 0.0)
      v89 = *(float *)&object[4 * v87];
    if (v89 <= 0.000001)
      goto LABEL_121;
    _NF = v88 < *(float *)object;
    if (v88 == *(float *)object)
      goto LABEL_121;
    v91 = v88 - *(float *)object;
    v92 = *(float *)object - v88;
    if (!_NF)
      v92 = v91;
    if (v92 <= 0.000001)
LABEL_121:
      LOBYTE(v87) = 0;
    v93 = *(float *)&object[4 * v87];
    v94 = *((unsigned int *)v63 + 10);
    v65 = (unint64_t)__p[1];
    if (__p[1])
    {
      v95 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
      v95.i16[0] = vaddlv_u8(v95);
      if (v95.u32[0] > 1uLL)
      {
        v33 = *((unsigned int *)v63 + 10);
        if (__p[1] <= (void *)v94)
          v33 = v94 % (unint64_t)__p[1];
      }
      else
      {
        v33 = (LODWORD(__p[1]) - 1) & v94;
      }
      v96 = (void **)*((_QWORD *)__p[0] + v33);
      if (v96)
      {
        v97 = *v96;
        if (*v96)
        {
          v98 = v63[4];
          if (v95.u32[0] < 2uLL)
          {
            while (1)
            {
              v102 = v97[1];
              if (v102 == v94)
              {
                if (v97[2] == v98 && *((_DWORD *)v97 + 6) == (_DWORD)v94)
                  goto LABEL_219;
              }
              else if ((v102 & ((unint64_t)__p[1] - 1)) != v33)
              {
                goto LABEL_148;
              }
              v97 = (_QWORD *)*v97;
              if (!v97)
                goto LABEL_148;
            }
          }
          do
          {
            v100 = v97[1];
            if (v100 == v94)
            {
              if (v97[2] == v98 && *((_DWORD *)v97 + 6) == (_DWORD)v94)
                goto LABEL_219;
            }
            else
            {
              if ((void *)v100 >= __p[1])
                v100 %= (unint64_t)__p[1];
              if (v100 != v33)
                break;
            }
            v97 = (_QWORD *)*v97;
          }
          while (v97);
        }
      }
    }
LABEL_148:
    v97 = operator new(0x28uLL);
    *v97 = 0;
    v97[1] = v94;
    *((_OWORD *)v97 + 1) = *((_OWORD *)v63 + 2);
    v97[4] = 0;
    v103 = (float)((unint64_t)v791[1] + 1);
    if (v65 && (float)(*(float *)&v792 * (float)v65) >= v103)
    {
      v94 = v33;
      goto LABEL_209;
    }
    v104 = (v65 & (v65 - 1)) != 0;
    if (v65 < 3)
      v104 = 1;
    v105 = v104 | (2 * v65);
    v106 = vcvtps_u32_f32(v103 / *(float *)&v792);
    if (v105 <= v106)
      prime = v106;
    else
      prime = v105;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v65 = (unint64_t)__p[1];
    }
    if (prime <= v65)
    {
      if (prime >= v65)
        goto LABEL_197;
      v118 = vcvtps_u32_f32((float)(unint64_t)v791[1] / *(float *)&v792);
      if (v65 < 3 || (v119 = (uint8x8_t)vcnt_s8((int8x8_t)v65), v119.i16[0] = vaddlv_u8(v119), v119.u32[0] > 1uLL))
      {
        v118 = std::__next_prime(v118);
      }
      else
      {
        v120 = 1 << -(char)__clz(v118 - 1);
        if (v118 >= 2)
          v118 = v120;
      }
      if (prime <= v118)
        prime = v118;
      if (prime < v65)
      {
        if (prime)
          goto LABEL_161;
        v122 = __p[0];
        __p[0] = 0;
        if (v122)
          operator delete(v122);
        v65 = 0;
        __p[1] = 0;
        goto LABEL_198;
      }
      v65 = (unint64_t)__p[1];
      if (((unint64_t)__p[1] & ((unint64_t)__p[1] - 1)) == 0)
        goto LABEL_198;
      goto LABEL_207;
    }
LABEL_161:
    if (prime >> 61)
      sub_20E877A38();
    v108 = operator new(8 * prime);
    v109 = __p[0];
    __p[0] = v108;
    if (v109)
      operator delete(v109);
    v110 = 0;
    __p[1] = (void *)prime;
    do
      *((_QWORD *)__p[0] + v110++) = 0;
    while (prime != v110);
    v111 = (_QWORD **)v791[0];
    if (!v791[0])
    {
LABEL_206:
      v65 = prime;
      if ((prime & (prime - 1)) == 0)
        goto LABEL_198;
      goto LABEL_207;
    }
    v112 = *((_QWORD *)v791[0] + 1);
    v113 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v114 = v112 & v113;
      *((_QWORD *)__p[0] + v114) = v791;
      for (i = *v111; *v111; i = *v111)
      {
        v116 = i[1] & v113;
        if (v116 == v114)
        {
          v111 = (_QWORD **)i;
        }
        else if (*((_QWORD *)__p[0] + v116))
        {
          *v111 = (_QWORD *)*i;
          v117 = 8 * v116;
          *i = **(_QWORD **)((char *)__p[0] + v117);
          **(_QWORD **)((char *)__p[0] + v117) = i;
        }
        else
        {
          *((_QWORD *)__p[0] + v116) = v111;
          v111 = (_QWORD **)i;
          v114 = v116;
        }
      }
      goto LABEL_206;
    }
    if (v112 >= prime)
    {
      v112 %= prime;
      *((_QWORD *)__p[0] + v112) = v791;
      v121 = *v111;
      if (!*v111)
        goto LABEL_196;
      while (1)
      {
LABEL_201:
        v124 = v121[1];
        if (v124 >= prime)
          v124 %= prime;
        if (v124 == v112)
          goto LABEL_200;
        if (*((_QWORD *)__p[0] + v124))
          break;
        *((_QWORD *)__p[0] + v124) = v111;
        v111 = (_QWORD **)v121;
        v121 = (_QWORD *)*v121;
        v112 = v124;
        if (!v121)
          goto LABEL_206;
      }
      *v111 = (_QWORD *)*v121;
      v123 = 8 * v124;
      *v121 = **(_QWORD **)((char *)__p[0] + v123);
      **(_QWORD **)((char *)__p[0] + v123) = v121;
      v121 = v111;
LABEL_200:
      v111 = (_QWORD **)v121;
      v121 = (_QWORD *)*v121;
      if (!v121)
        goto LABEL_206;
      goto LABEL_201;
    }
    *((_QWORD *)__p[0] + v112) = v791;
    v121 = *v111;
    if (*v111)
      goto LABEL_201;
LABEL_196:
    v65 = prime;
LABEL_197:
    if ((v65 & (v65 - 1)) == 0)
    {
LABEL_198:
      v94 = ((_DWORD)v65 - 1) & v94;
      goto LABEL_209;
    }
LABEL_207:
    if (v65 <= v94)
      v94 %= v65;
LABEL_209:
    v125 = __p[0];
    v126 = (_QWORD *)*((_QWORD *)__p[0] + v94);
    if (v126)
    {
      *v97 = *v126;
      goto LABEL_217;
    }
    *v97 = v791[0];
    v791[0] = v97;
    v125[v94] = v791;
    if (*v97)
    {
      v127 = *(_QWORD *)(*v97 + 8);
      if ((v65 & (v65 - 1)) != 0)
      {
        if (v127 >= v65)
          v127 %= v65;
      }
      else
      {
        v127 &= v65 - 1;
      }
      v126 = (char *)__p[0] + 8 * v127;
LABEL_217:
      *v126 = v97;
    }
    ++v791[1];
LABEL_219:
    *((_BYTE *)v97 + 32) = v87;
    *((float *)v97 + 9) = v93 / (float)v69;
    v60 = 0uLL;
LABEL_220:
    v128 = (_QWORD *)v63[1];
    if (v128)
    {
      do
      {
        v129 = v128;
        v128 = (_QWORD *)*v128;
      }
      while (v128);
    }
    else
    {
      do
      {
        v129 = (_QWORD *)v63[2];
        _ZF = *v129 == (_QWORD)v63;
        v63 = v129;
      }
      while (!_ZF);
    }
    v63 = v129;
    k = v765;
    if (v129 != v62)
      continue;
    break;
  }
  v130 = (_QWORD *)a2[1];
  v133 = (_QWORD *)*v130;
  v131 = v130 + 1;
  v132 = v133;
  if (v133 != v131)
  {
    if (v65)
    {
LABEL_228:
      v134 = *((unsigned int *)v132 + 10);
      v135 = (uint8x8_t)vcnt_s8((int8x8_t)v65);
      v135.i16[0] = vaddlv_u8(v135);
      if (v135.u32[0] > 1uLL)
      {
        v136 = *((unsigned int *)v132 + 10);
        if (v65 <= v134)
          v136 = v134 % v65;
      }
      else
      {
        v136 = ((_DWORD)v65 - 1) & v134;
      }
      v137 = (uint64_t **)*((_QWORD *)__p[0] + v136);
      if (v137)
      {
        v138 = *v137;
        if (*v137)
        {
          v139 = v132[4];
          if (v135.u32[0] < 2uLL)
          {
            while (1)
            {
              v143 = v138[1];
              if (v143 == v134)
              {
                if (v138[2] == v139 && *((_DWORD *)v138 + 6) == (_DWORD)v134)
                  goto LABEL_254;
              }
              else if ((v143 & (v65 - 1)) != v136)
              {
                goto LABEL_259;
              }
              v138 = (uint64_t *)*v138;
              if (!v138)
                goto LABEL_259;
            }
          }
          while (1)
          {
            v141 = v138[1];
            if (v141 == v134)
            {
              if (v138[2] == v139 && *((_DWORD *)v138 + 6) == (_DWORD)v134)
              {
LABEL_254:
                v144 = v132[6];
                v145 = *(uint64_t **)(v144 + 200);
                v146 = *(uint64_t **)(v144 + 208);
                while (v145 != v146)
                {
                  v147 = sub_20F27A920((uint64_t *)v833, v145, (uint64_t)v145);
                  if (v147[5] != v147[6])
                    *(_QWORD *)(sub_20F27A920((uint64_t *)v833, v145, (uint64_t)v145)[5]
                              + 8 * *(unsigned int *)(v145[3] + 4)) = v138[4];
                  v145 += 4;
                }
                goto LABEL_259;
              }
            }
            else
            {
              if (v141 >= v65)
                v141 %= v65;
              if (v141 != v136)
                goto LABEL_259;
            }
            v138 = (uint64_t *)*v138;
            if (!v138)
              goto LABEL_259;
          }
        }
      }
      while (1)
      {
LABEL_259:
        v148 = (_QWORD *)v132[1];
        if (v148)
        {
          do
          {
            v149 = v148;
            v148 = (_QWORD *)*v148;
          }
          while (v148);
        }
        else
        {
          do
          {
            v149 = (_QWORD *)v132[2];
            _ZF = *v149 == (_QWORD)v132;
            v132 = v149;
          }
          while (!_ZF);
        }
        if (v149 == v131)
          break;
        v65 = (unint64_t)__p[1];
        v132 = v149;
        if (__p[1])
          goto LABEL_228;
      }
    }
    else
    {
      do
      {
        v150 = (_QWORD *)v132[1];
        if (v150)
        {
          do
          {
            v151 = v150;
            v150 = (_QWORD *)*v150;
          }
          while (v150);
        }
        else
        {
          do
          {
            v151 = (_QWORD *)v132[2];
            _ZF = *v151 == (_QWORD)v132;
            v132 = v151;
          }
          while (!_ZF);
        }
        v132 = v151;
      }
      while (v151 != v131);
    }
  }
LABEL_274:
  v152 = v791[0];
  if (v791[0])
  {
    do
    {
      v153 = (_QWORD *)*v152;
      operator delete(v152);
      v152 = v153;
    }
    while (v153);
  }
  v154 = __p[0];
  __p[0] = 0;
  if (v154)
    operator delete(v154);
  a3 = v744;
  if (v798[1])
  {
    v155 = v798[0];
    if (v798[0])
    {
      do
      {
        v163 = (_QWORD *)*v155;
        v164 = (void *)v155[5];
        if (v164)
        {
          v155[6] = v164;
          operator delete(v164);
        }
        operator delete(v155);
        v155 = v163;
      }
      while (v163);
    }
    v798[0] = 0;
    v156 = (char *)v797[1];
    if (v797[1])
    {
      v157 = 0;
      do
        *((_QWORD *)v797[0] + (_QWORD)v157++) = 0;
      while (v156 != v157);
    }
    v798[1] = 0;
  }
  v158 = *(void **)v833;
  *(_QWORD *)v833 = 0;
  v159 = v797[0];
  v797[0] = v158;
  if (v159)
    operator delete(v159);
  v160 = *(_QWORD *)&v833[8];
  v161 = *(_QWORD **)&v833[16];
  *(_QWORD *)&v833[8] = 0;
  v799 = *(_DWORD *)&v833[32];
  v797[1] = (void *)v160;
  *(_OWORD *)v798 = *(_OWORD *)&v833[16];
  if (*(_QWORD *)&v833[24])
  {
    v162 = *(_QWORD *)(*(_QWORD *)&v833[16] + 8);
    if ((v160 & (v160 - 1)) != 0)
    {
      if (v162 >= v160)
        v162 %= v160;
    }
    else
    {
      v162 &= v160 - 1;
    }
    *((_QWORD *)v797[0] + v162) = v798;
    *(_OWORD *)&v833[16] = 0uLL;
  }
  else if (*(_QWORD *)&v833[16])
  {
    do
    {
      v165 = (_QWORD *)*v161;
      v166 = (void *)v161[5];
      if (v166)
      {
        v161[6] = v166;
        operator delete(v166);
      }
      operator delete(v161);
      v161 = v165;
    }
    while (v165);
  }
  a1 = *(float64x2_t **)v833;
  *(_QWORD *)v833 = 0;
  if (a1)
    operator delete(a1);
LABEL_302:
  v167 = a30;
  if (!a31)
    goto LABEL_336;
  v168 = (void **)(a30 + 5);
  if (a30 + 5 == a3)
    goto LABEL_336;
  v170 = (char **)*a3;
  v169 = a3[1];
  v172 = (uint64_t)(a30 + 7);
  v171 = a30[7];
  v173 = 0xAAAAAAAAAAAAAAABLL * ((v169 - *a3) >> 3);
  v174 = (char **)a30[5];
  if (0xAAAAAAAAAAAAAAABLL * ((v171 - (uint64_t)v174) >> 3) < v173)
  {
    if (v174)
    {
      v175 = (char **)a30[6];
      v176 = (void *)a30[5];
      if (v175 != v174)
      {
        v177 = (char **)a30[6];
        do
        {
          v179 = *(v177 - 3);
          v177 -= 3;
          v178 = v179;
          if (v179)
          {
            *(v175 - 2) = v178;
            operator delete(v178);
          }
          v175 = v177;
        }
        while (v177 != v174);
        v176 = *v168;
        k = v765;
      }
      a30[6] = v174;
      operator delete(v176);
      v171 = 0;
      *v168 = 0;
      a30[6] = 0;
      a30[7] = 0;
    }
    if (v173 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_1209;
    v186 = 0xAAAAAAAAAAAAAAABLL * (v171 >> 3);
    v187 = 2 * v186;
    if (2 * v186 <= v173)
      v187 = v173;
    v188 = v186 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v187;
    if (v188 > 0xAAAAAAAAAAAAAAALL)
LABEL_1209:
      sub_20E867F44();
    v189 = operator new(24 * v188);
    a30[5] = v189;
    a30[6] = v189;
    a30[7] = &v189[3 * v188];
    a1 = (float64x2_t *)sub_20EE6CE10(v172, (uint64_t)v170, v169, v189);
    a30[6] = a1;
    v167 = a30;
    v753 = a32;
    v190 = (const void **)*a3;
    v756 = (const void **)a3[1];
    if ((const void **)*a3 == v756)
      goto LABEL_332;
LABEL_337:
    v192 = 0;
    v194 = (v193 - 113);
    if (!a33)
      v194 = 0;
    v747 = v194;
    v754 = a31 != 0;
    v195 = (unint64_t)__p & 0xF8;
    if (!a31)
      v195 = 0;
    v746 = v195;
    v196 = (unint64_t)object & 0xF8;
    if (!a31)
      v196 = 0;
    v729 = v196;
    v197 = (uint64_t *)&k[70];
    if (!a18)
      v197 = (uint64_t *)&k[69];
    v737 = v197;
    v738 = k + 69;
    v198 = (uint64_t *)&k[69].f64[1];
    if (!a18)
      v198 = (uint64_t *)&k[68].f64[1];
    v735 = v198;
    v736 = (char *)&k[68].f64[1];
    v733 = MEMORY[0x24BEDB848] + 16;
    v745 = (char **)(a29 + 24);
    v740 = v167 + 10;
    v741 = v167 + 8;
    v739 = (void **)(v167 + 11);
    v727 = v167 + 19;
    v728 = (int64x2_t *)(v167 + 17);
    v731 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    v732 = *MEMORY[0x24BEDB7F0];
    v730 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v199 = 1;
    while (2)
    {
      v759 = v192;
      v200 = (v192 + 1);
      v766 = v190;
      if (!BYTE5(k[4].f64[1])
        || (_BYTE *)v190[1] - (_BYTE *)*v190 != 24
        || sub_20F271850((uint64_t)a1, a2, (uint64_t *)*v190))
      {
        if (v752)
        {
          v201 = sub_210219C18();
          v202 = *a17;
          v203 = *((_DWORD *)*a17 + 2);
          v204 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
          if ((v204 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
          {
            __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DDD0);
          }
          if (atomic_load(&qword_254A5A450))
          {
            v206 = *v202;
            v207 = *((_DWORD *)v202 + 4);
            *(_DWORD *)object = 67109888;
            v208 = v200;
            *(_DWORD *)&object[4] = v200;
            *(_WORD *)&object[8] = 2048;
            *(_QWORD *)&object[10] = v206;
            *(_WORD *)&object[18] = 1024;
            *(_DWORD *)&object[20] = v203;
            *(_WORD *)&object[24] = 1024;
            *(_DWORD *)&object[26] = v207;
            v209 = (char *)_os_log_send_and_compose_impl();
            v210 = strlen(v209);
            __p[0] = 0;
            pthread_threadid_np(0, (__uint64_t *)__p);
            v211 = __p[0];
            timespec_get((timespec *)__p, 1);
            sub_210219E20(object, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v201 + 1), (__int128 *)(v201 + 5), "CLUSTER:IR: CI:%u QID:[%llu:%u:%u]", 0x22uLL, v209, v210, (uint64_t)v211, __p);
            std::mutex::lock(&stru_254A5A410);
            v212 = qword_254A5A458;
            for (j = unk_254A5A460; v212 != j; v212 += 40)
            {
              v214 = *(_QWORD *)(v212 + 32);
              if (!v214)
                sub_20E86D37C();
              (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v214 + 48))(v214, object);
            }
            std::mutex::unlock(&stru_254A5A410);
            if (v832 < 0)
            {
              operator delete(v830[1]);
              v190 = v766;
              v200 = v208;
              if (SHIBYTE(v830[0]) < 0)
                goto LABEL_369;
LABEL_360:
              if (LOBYTE(v828[1]))
              {
LABEL_370:
                if (SHIBYTE(v828[0]) < 0)
                  operator delete(v827[0]);
              }
            }
            else
            {
              v190 = v766;
              v200 = v208;
              if ((SHIBYTE(v830[0]) & 0x80000000) == 0)
                goto LABEL_360;
LABEL_369:
              operator delete(v829[0]);
              if (LOBYTE(v828[1]))
                goto LABEL_370;
            }
            if (object[56] && (object[55] & 0x80000000) != 0)
              operator delete(*(void **)&object[32]);
            if ((object[31] & 0x80000000) != 0)
            {
              operator delete(*(void **)&object[8]);
              if (v209)
LABEL_377:
                free(v209);
            }
            else if (v209)
            {
              goto LABEL_377;
            }
          }
          if (os_signpost_enabled((os_log_t)*v201))
          {
            v221 = *v202;
            v222 = *((_DWORD *)v202 + 4);
            *(_DWORD *)object = 67109888;
            *(_DWORD *)&object[4] = v200;
            *(_WORD *)&object[8] = 2048;
            *(_QWORD *)&object[10] = v221;
            *(_WORD *)&object[18] = 1024;
            *(_DWORD *)&object[20] = v203;
            *(_WORD *)&object[24] = 1024;
            *(_DWORD *)&object[26] = v222;
            _os_signpost_emit_unreliably_with_name_impl();
          }
          v223 = atomic_load((unsigned __int8 *)&qword_254A6D9C8);
          if ((v223 & 1) == 0 && __cxa_guard_acquire(&qword_254A6D9C8))
          {
            sub_20FCFB524();
            __cxa_atexit((void (*)(void *))sub_20FCFB238, &qword_254A6D9A0, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6D9C8);
            v190 = v766;
          }
          sub_210237040("CLUSTER:IR: CI:%u QID:[%llu:%u:%u]", (std::string *)object, v200, **a17, *((unsigned int *)*a17 + 2), *((unsigned int *)*a17 + 4));
          k = v765;
          sub_20EA5C6C8((uint64_t)object, qword_254A6D9A8);
          if ((object[23] & 0x80000000) != 0)
            operator delete(*(void **)object);
        }
        sub_20F279E20((uint64_t)a2, (uint64_t **)v190, (char **)v796);
        v763 = v200;
        if (a14)
        {
          sub_20F27A540((uint64_t)a2, (uint64_t ***)v796, (uint64_t)v743, (void **)object);
          v224 = *(void **)object;
          v225 = *(_QWORD *)&object[8];
          v227 = *(void (****)(_QWORD))a29;
          v226 = *(_QWORD *)(a29 + 8);
          if (v226 == *(_QWORD *)a29)
            goto LABEL_390;
        }
        else
        {
          v225 = 0;
          v224 = 0;
          v227 = *(void (****)(_QWORD))a29;
          v226 = *(_QWORD *)(a29 + 8);
          if (v226 == *(_QWORD *)a29)
            goto LABEL_390;
        }
        v228 = (void (***)(_QWORD))(v226 - 40);
        v229 = (void (***)(_QWORD))(v226 - 40);
        do
        {
          v230 = *v229;
          v229 -= 5;
          (*v230)(v228);
          _ZF = v228 == v227;
          v228 = v229;
        }
        while (!_ZF);
LABEL_390:
        *(_QWORD *)(a29 + 8) = v227;
        *(_QWORD *)(a29 + 32) = *(_QWORD *)(a29 + 24);
        *(_QWORD *)(a29 + 152) = *(_QWORD *)(a29 + 144);
        *(_QWORD *)(a29 + 176) = *(_QWORD *)(a29 + 168);
        *(_QWORD *)(a29 + 48) = 0x3FF0000000000000;
        *(_QWORD *)(a29 + 64) = 0;
        *(_QWORD *)(a29 + 72) = 0;
        *(_QWORD *)(a29 + 56) = 0;
        *(_QWORD *)(a29 + 80) = 0x3FF0000000000000;
        *(_QWORD *)(a29 + 96) = 0;
        *(_QWORD *)(a29 + 104) = 0;
        *(_QWORD *)(a29 + 88) = 0;
        *(_QWORD *)(a29 + 112) = 0x3FF0000000000000;
        *(_QWORD *)(a29 + 128) = 0;
        *(_QWORD *)(a29 + 136) = 0;
        *(_QWORD *)(a29 + 120) = 0;
        v794 = 0u;
        memset(v795, 0, 26);
        v792 = 0u;
        *(_OWORD *)v793 = 0u;
        *(_OWORD *)__p = 0u;
        *(_OWORD *)v791 = 0u;
        v789 = 0;
        v231 = a2[1];
        v232 = LODWORD(k[2].f64[0]);
        v233 = LOBYTE(k->f64[1]);
        v234 = LODWORD(k[1].f64[0]);
        v235 = *((float *)&k[1].f64[1] + 1);
        memset(object, 0, 24);
        v236 = v225 - (_QWORD)v224;
        v758 = v224;
        if (v236)
        {
          if (0xAAAAAAAAAAAAAAABLL * (v236 >> 3) > 0xAAAAAAAAAAAAAAALL)
            sub_20E9DEF2C();
          *(_QWORD *)object = operator new(v236);
          *(_QWORD *)&object[8] = *(_QWORD *)object;
          v237 = *(_QWORD *)object + 8 * (v236 >> 3);
          *(_QWORD *)&object[16] = v237;
          memcpy(*(void **)object, v224, v236);
          *(_QWORD *)&object[8] = v237;
        }
        object[24] = 1;
        LODWORD(v819) = LODWORD(k[6].f64[0]);
        BYTE4(v819) = 1;
        v238 = (unint64_t)v761;
        if (a31)
          v238 = (unint64_t)__p >> 8;
        v239 = (unint64_t)v760;
        if (a33)
          v239 = (unint64_t)&v789 >> 8;
        v761 = (_BYTE *)v238;
        v760 = (_BYTE *)v239;
        sub_20F23F9F8((uint64_t ***)v796, v231, v797, a5, a6, a7, a4, v232, (char **)v833, v235, v233 != 0, v234, a15, v748, (uint64_t)&v800, (uint64_t *)object, a16, (uint64_t)&v819, BYTE1(k[19].f64[0]),
          a19,
          a20,
          a21,
          a22,
          (unint64_t *)(a29 + 144),
          v746 | (v238 << 8),
          v754,
          (_BYTE *)(v747 | (v239 << 8)),
          a33 != 0);
        v242 = *(void (****)(_QWORD))a29;
        v243 = a30;
        if (*(_QWORD *)a29)
        {
          v244 = *(void (****)(_QWORD))(a29 + 8);
          v245 = *(void (****)(_QWORD))a29;
          if (v244 != v242)
          {
            v246 = v244 - 5;
            v247 = v244 - 5;
            do
            {
              v248 = *v247;
              v247 -= 5;
              (*v248)(v246);
              _ZF = v246 == v242;
              v246 = v247;
            }
            while (!_ZF);
            v245 = *(void (****)(_QWORD))a29;
          }
          *(_QWORD *)(a29 + 8) = v242;
          operator delete(v245);
          *(_QWORD *)a29 = 0;
          *(_QWORD *)(a29 + 8) = 0;
          *(_QWORD *)(a29 + 16) = 0;
        }
        v249 = *(_QWORD *)v833;
        *(_QWORD *)a29 = *(_QWORD *)v833;
        v250 = *(float64x2_t *)&v833[8];
        *(_OWORD *)(a29 + 8) = *(_OWORD *)&v833[8];
        memset(v833, 0, 24);
        v251 = v250.f64[0];
        if (object[24] && *(_QWORD *)object)
        {
          *(_QWORD *)&object[8] = *(_QWORD *)object;
          operator delete(*(void **)object);
          v249 = *(_QWORD *)a29;
          v251 = *(double *)(a29 + 8);
        }
        if (a24)
        {
          v252 = v249;
          if (v249 != *(_QWORD *)&v251)
          {
            v253 = *(float64x2_t **)(a23 + 8);
            if (*(float64x2_t **)a23 == v253)
            {
              v252 = v249 + 40 * ((*(_QWORD *)&v251 - v249 - 40) / 0x28) + 40;
            }
            else
            {
              v252 = v249;
LABEL_411:
              v254 = *(_QWORD *)(v252 + 32);
              v240.f64[0] = *(float64_t *)(v254 + 24);
              v255 = *(int8x16_t *)(v254 + 8);
              v256 = vextq_s8(v255, v255, 8uLL).u64[0];
              v257 = *(float64x2_t **)a23;
              while (1)
              {
                v241.f64[0] = v257[1].f64[0];
                v241 = vsubq_f64(v240, v241);
                *(_QWORD *)&_Q6.f64[0] = v255.i64[0];
                *(_QWORD *)&_Q6.f64[1] = v256;
                _D7 = vsubq_f64(_Q6, *v257).f64[1];
                __asm { FMLA            D6, D7, V5.D[1] }
                if (vmlad_n_f64(_Q6.f64[0], v241.f64[0], v241.f64[0]) < *(double *)(a23 + 24))
                  break;
                v257 = (float64x2_t *)((char *)v257 + 24);
                if (v257 == v253)
                {
                  v252 += 40;
                  if (v252 != *(_QWORD *)&v251)
                    goto LABEL_411;
                  goto LABEL_438;
                }
              }
            }
          }
          if (v252 != *(_QWORD *)&v251)
          {
            v260 = v252 + 40;
            if (v252 + 40 != *(_QWORD *)&v251)
            {
              v261 = v252;
              do
              {
                v263 = v260;
                v264 = *(float64x2_t **)a23;
                v265 = *(float64x2_t **)(a23 + 8);
                if (*(float64x2_t **)a23 == v265)
                {
LABEL_420:
                  v262 = *(_QWORD *)(v252 + 48);
                  *(_DWORD *)(v261 + 16) = *(_DWORD *)(v252 + 56);
                  *(_QWORD *)(v261 + 8) = v262;
                  v250 = *(float64x2_t *)(v252 + 64);
                  *(float64x2_t *)(v261 + 24) = v250;
                  v261 += 40;
                }
                else
                {
                  v266 = *(_QWORD *)(v252 + 72);
                  v267 = vextq_s8(*(int8x16_t *)(v266 + 8), *(int8x16_t *)(v266 + 8), 8uLL).u64[0];
                  while (1)
                  {
                    v241.f64[0] = v264[1].f64[0];
                    v250.f64[0] = *(float64_t *)(v266 + 24);
                    v241 = vsubq_f64(v250, v241);
                    _Q6.f64[0] = *(float64_t *)(v266 + 8);
                    *(_QWORD *)&_Q6.f64[1] = v267;
                    _D7 = vsubq_f64(_Q6, *v264).f64[1];
                    __asm { FMLA            D6, D7, V5.D[1] }
                    if (vmlad_n_f64(_Q6.f64[0], v241.f64[0], v241.f64[0]) < *(double *)(a23 + 24))
                      break;
                    v264 = (float64x2_t *)((char *)v264 + 24);
                    if (v264 == v265)
                      goto LABEL_420;
                  }
                }
                v260 = v263 + 40;
                v252 = v263;
              }
              while (v263 + 40 != *(_QWORD *)&v251);
              v249 = *(_QWORD *)a29;
              v251 = *(double *)(a29 + 8);
              v252 = v261;
            }
            if (v252 != *(_QWORD *)&v251)
            {
              v270 = v252;
              v271 = *(_QWORD *)&v251 - v252;
              if (v270 + v271 != *(_QWORD *)&v251)
              {
                v272 = 8 * (v271 >> 3);
                do
                {
                  v273 = *(_QWORD *)(v270 + v272 + 8);
                  *(_DWORD *)(v270 + 16) = *(_DWORD *)(v270 + v272 + 16);
                  *(_QWORD *)(v270 + 8) = v273;
                  *(_OWORD *)(v270 + 24) = *(_OWORD *)(v270 + v272 + 24);
                  v270 += 40;
                }
                while (v270 + v272 != *(_QWORD *)&v251);
                v251 = *(double *)(a29 + 8);
              }
              if (*(_QWORD *)&v251 != v270)
              {
                v274 = (void (***)(_QWORD))(*(_QWORD *)&v251 - 40);
                v275 = (void (***)(_QWORD))(*(_QWORD *)&v251 - 40);
                do
                {
                  v276 = *v275;
                  v275 -= 5;
                  (*v276)(v274);
                  _ZF = v274 == (void (***)(_QWORD))v270;
                  v274 = v275;
                }
                while (!_ZF);
              }
              *(double *)(a29 + 8) = *(double *)&v270;
              v249 = *(_QWORD *)a29;
              v251 = *(double *)&v270;
            }
          }
        }
LABEL_438:
        if (a31)
        {
          v278 = a30[9];
          v277 = a30[10];
          if (v278 < v277)
          {
            sub_20EE6D044(a30[9], (uint64_t)__p);
            a30[9] = v278 + 112;
            a30[9] = v278 + 112;
            goto LABEL_441;
          }
          v313 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v278 - *v741) >> 4);
          v314 = v313 + 1;
          if ((unint64_t)(v313 + 1) > 0x249249249249249)
            sub_20E867F44();
          v315 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v277 - *v741) >> 4);
          if (2 * v315 > v314)
            v314 = 2 * v315;
          if (v315 >= 0x124924924924924)
            v316 = 0x249249249249249;
          else
            v316 = v314;
          *(_QWORD *)&object[32] = v740;
          if (v316)
          {
            if (v316 > 0x249249249249249)
              sub_20E877A38();
            v317 = (char *)operator new(112 * v316);
          }
          else
          {
            v317 = 0;
          }
          *(_QWORD *)object = v317;
          *(_QWORD *)&object[8] = &v317[112 * v313];
          *(_QWORD *)&object[16] = *(_QWORD *)&object[8];
          *(_QWORD *)&object[24] = &v317[112 * v316];
          sub_20EE6D044(*(uint64_t *)&object[8], (uint64_t)__p);
          v340 = *(_QWORD *)&object[8];
          v341 = *(_QWORD *)&object[16] + 112;
          v342 = (void **)a30[8];
          v343 = (void **)a30[9];
          if (v343 == v342)
          {
            a30[8] = *(_QWORD *)&object[8];
            a30[9] = v341;
            a30[10] = *(_QWORD *)&object[24];
            if (v343)
              goto LABEL_521;
          }
          else
          {
            v344 = 0;
            do
            {
              v345 = v340 + v344 * 8;
              v346 = &v343[v344];
              *(_QWORD *)(v345 - 112) = 0;
              *(_QWORD *)(v345 - 104) = 0;
              *(_QWORD *)(v345 - 96) = 0;
              *(_OWORD *)(v345 - 112) = *(_OWORD *)&v343[v344 - 14];
              *(_QWORD *)(v345 - 96) = v343[v344 - 12];
              *(v346 - 14) = 0;
              *(v346 - 13) = 0;
              *(v346 - 12) = 0;
              *(_QWORD *)(v345 - 88) = 0;
              *(_QWORD *)(v345 - 80) = 0;
              *(_QWORD *)(v345 - 72) = 0;
              *(_OWORD *)(v345 - 88) = *(_OWORD *)&v343[v344 - 11];
              *(_QWORD *)(v345 - 72) = v343[v344 - 9];
              *(v346 - 10) = 0;
              *(v346 - 9) = 0;
              *(v346 - 11) = 0;
              v347 = v343[v344 - 8];
              *(_QWORD *)(v345 - 48) = 0;
              *(_QWORD *)(v345 - 40) = 0;
              *(_QWORD *)(v345 - 64) = v347;
              *(_QWORD *)(v345 - 56) = 0;
              *(_OWORD *)(v345 - 56) = *(_OWORD *)&v343[v344 - 7];
              *(_QWORD *)(v345 - 40) = v343[v344 - 5];
              *(v346 - 7) = 0;
              *(v346 - 6) = 0;
              *(v346 - 5) = 0;
              *(_QWORD *)(v345 - 24) = 0;
              *(_QWORD *)(v345 - 16) = 0;
              *(_QWORD *)(v345 - 32) = 0;
              *(_OWORD *)(v345 - 32) = *(_OWORD *)&v343[v344 - 4];
              *(_QWORD *)(v345 - 16) = v343[v344 - 2];
              *(v346 - 4) = 0;
              *(v346 - 3) = 0;
              *(v346 - 2) = 0;
              *(_WORD *)(v345 - 8) = v343[v344 - 1];
              v344 -= 14;
            }
            while (&v343[v344] != v342);
            v343 = (void **)a30[8];
            v348 = (void **)a30[9];
            a30[8] = v340 + v344 * 8;
            a30[9] = v341;
            for (a30[10] = *(_QWORD *)&object[24]; v348 != v343; v348 = sub_20E991750(v348 - 14))
              ;
            if (v343)
LABEL_521:
              operator delete(v343);
          }
          a30[9] = v341;
          if (!a33)
          {
LABEL_443:
            if (a18)
            {
              v279 = *(unint64_t **)&k[42].f64[0];
              v280 = *(unint64_t **)&k[42].f64[1];
              if (v279 != v280)
              {
                v281 = v279 + 1;
                if (v279 + 1 != v280)
                {
                  v282 = *v279;
                  v283 = v279 + 1;
                  do
                  {
                    v285 = *v283++;
                    v284 = v285;
                    if (v285 < v282)
                    {
                      v282 = v284;
                      v279 = v281;
                    }
                    v281 = v283;
                  }
                  while (v283 != v280);
                }
              }
            }
            else
            {
              v279 = *(unint64_t **)&k[57].f64[1];
              v286 = *(unint64_t **)&k[58].f64[0];
              if (v279 != v286)
              {
                v287 = v279 + 1;
                if (v279 + 1 != v286)
                {
                  v288 = *v279;
                  v289 = v279 + 1;
                  do
                  {
                    v291 = *v289++;
                    v290 = v291;
                    if (v291 < v288)
                    {
                      v288 = v290;
                      v279 = v287;
                    }
                    v287 = v289;
                  }
                  while (v289 != v286);
                }
              }
            }
            v292 = *v279;
            v764 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)&v251 - v249) >> 3);
            if (v764 < *v279)
            {
              sub_20F24E118(&v811);
              if (**(int **)(v811 + 56) > 3)
                goto LABEL_792;
              v293 = *(unsigned __int8 *)(v811 + 72);
              v294 = sub_20E8C31DC(v811, "OSLogSurrogateAppender", 1, 0);
              v295 = v294;
              if (!v293 && v294 == 0)
                goto LABEL_792;
              sub_20E863438((uint64_t)object);
              sub_20E86A980(&object[16], (uint64_t)"Not enough 2d-3d matches available for PnP pose estimation: ", 60);
              v297 = (_QWORD *)std::ostream::operator<<();
              sub_20E86A980(v297, (uint64_t)" < ", 3);
              std::ostream::operator<<();
              v775 = v293;
              if (((uint64_t)v830[1] & 0x10) != 0)
              {
                v351 = v830[0];
                v352 = v827;
                if (v830[0] < v827[1])
                {
                  v830[0] = v827[1];
                  v351 = v827[1];
                  v352 = v827;
                }
              }
              else
              {
                if (((uint64_t)v830[1] & 8) == 0)
                {
                  v298 = 0;
                  HIBYTE(v788) = 0;
                  p_dst = &__dst;
                  goto LABEL_666;
                }
                v351 = *(_BYTE **)&object[56];
                v352 = (void **)&object[40];
              }
              v433 = *v352;
              v298 = v351 - (_BYTE *)*v352;
              if (v298 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v298 >= 0x17)
              {
                v434 = (v298 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v298 | 7) != 0x17)
                  v434 = v298 | 7;
                v435 = v434 + 1;
                p_dst = operator new(v434 + 1);
                v788 = v435 | 0x8000000000000000;
                __dst = p_dst;
                v787 = v298;
              }
              else
              {
                HIBYTE(v788) = (_BYTE)v351 - *(_BYTE *)v352;
                p_dst = &__dst;
                if (!v298)
                {
LABEL_666:
                  *((_BYTE *)p_dst + v298) = 0;
                  *(_QWORD *)&v819 = &v811;
                  *((std::chrono::steady_clock::time_point *)&v819 + 1) = std::chrono::steady_clock::now();
                  *(std::chrono::system_clock::time_point *)&v820 = std::chrono::system_clock::now();
                  DWORD2(v820) = 3;
                  v821 = "unknown file";
                  v822 = 369;
                  v823 = "unknown function";
                  v824 = 0;
                  v825 = 0;
                  v436 = (const char *)&__dst;
                  if (v788 < 0)
                    v436 = (const char *)__dst;
                  __sb = v436;
                  v437 = *(_QWORD *)v819;
                  v438 = (const char *)(*(_QWORD *)v819 + 16);
                  v770 = v438;
                  if (*(char *)(*(_QWORD *)v819 + 39) < 0)
                  {
                    v438 = *(const char **)(v437 + 16);
                    v439 = *(_QWORD *)(v437 + 24);
                    v441 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                    if ((v441 & 1) == 0)
                    {
LABEL_1145:
                      if (__cxa_guard_acquire(&qword_254A4A510))
                      {
                        sub_20E9E46F8((uint64_t)v803);
                        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v803);
                        if ((_BYTE)v805 && SHIBYTE(v804) < 0)
                          operator delete(v803[0]);
                        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                        __cxa_guard_release(&qword_254A4A510);
                        v243 = a30;
                      }
                    }
                  }
                  else
                  {
                    v439 = *(unsigned __int8 *)(*(_QWORD *)v819 + 39);
                    v440 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                    if ((v440 & 1) == 0)
                      goto LABEL_1145;
                  }
                  if (byte_254A4A4F8[23] >= 0)
                    v442 = byte_254A4A4F8;
                  else
                    v442 = *(const char **)byte_254A4A4F8;
                  if (byte_254A4A4F8[23] >= 0)
                    v443 = byte_254A4A4F8[23];
                  else
                    v443 = *(_QWORD *)&byte_254A4A4F8[8];
                  *(_QWORD *)v833 = os_log_create(v442, v438);
                  if (v443 > 0x7FFFFFFFFFFFFFF7)
                    sub_20E860B7C();
                  if (v443 >= 0x17)
                  {
                    v445 = (v443 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v443 | 7) != 0x17)
                      v445 = v443 | 7;
                    v446 = v445 + 1;
                    v444 = operator new(v445 + 1);
                    *(_QWORD *)&v833[16] = v443;
                    *(_QWORD *)&v833[24] = v446 | 0x8000000000000000;
                    *(_QWORD *)&v833[8] = v444;
                    v243 = a30;
                  }
                  else
                  {
                    v833[31] = v443;
                    v444 = &v833[8];
                    if (!v443)
                    {
LABEL_686:
                      v444[v443] = 0;
                      v833[32] = 1;
                      if (v439 > 0x7FFFFFFFFFFFFFF7)
                        sub_20E860B7C();
                      k = v765;
                      v224 = v758;
                      if (v439 >= 0x17)
                      {
                        v449 = (v439 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v439 | 7) != 0x17)
                          v449 = v439 | 7;
                        v450 = v449 + 1;
                        v447 = (char *)operator new(v449 + 1);
                        v835 = (const char *)v439;
                        v836 = v450 | 0x8000000000000000;
                        v834 = v447;
                        v243 = a30;
                      }
                      else
                      {
                        HIBYTE(v836) = v439;
                        v447 = (char *)&v834;
                        if (!v439)
                        {
                          LOBYTE(v834) = 0;
                          LOBYTE(v837) = 1;
                          v448 = *(NSObject **)v833;
                          if ((SHIBYTE(v836) & 0x80000000) == 0)
                            goto LABEL_690;
LABEL_696:
                          operator delete(v834);
                          if (v833[32])
                            goto LABEL_697;
                          goto LABEL_699;
                        }
                      }
                      memmove(v447, v438, v439);
                      v447[v439] = 0;
                      LOBYTE(v837) = 1;
                      v448 = *(NSObject **)v833;
                      if (SHIBYTE(v836) < 0)
                        goto LABEL_696;
LABEL_690:
                      if (v833[32])
                      {
LABEL_697:
                        if ((v833[31] & 0x80000000) != 0)
                          operator delete(*(void **)&v833[8]);
                      }
LABEL_699:
                      if (*(_QWORD *)v833)
                        os_release(*(void **)v833);
                      if (v295 && *(_QWORD *)(v295 + 24))
                      {
                        v451 = _os_log_pack_size();
                        v452 = operator new(v451, (std::align_val_t)8uLL);
                        v453 = COERCE_DOUBLE(operator new());
                        **(_QWORD **)&v453 = &off_24C9ABB80;
                        *(_QWORD *)(*(_QWORD *)&v453 + 8) = 0;
                        *(_QWORD *)(*(_QWORD *)&v453 + 16) = 0;
                        *(_QWORD *)(*(_QWORD *)&v453 + 24) = v452;
                        v803[0] = v452;
                        v803[1] = v452;
                        v804 = v453;
                        v805 = 0;
                        v806 = 0;
                        v454 = strlen(__sb);
                        if (v454 > 0x7FFFFFFFFFFFFFF7)
                          sub_20E860B7C();
                        v455 = v454;
                        if (v454 >= 0x17)
                        {
                          v465 = (v454 & 0xFFFFFFFFFFFFFFF8) + 8;
                          if ((v454 | 7) != 0x17)
                            v465 = v454 | 7;
                          v466 = v465 + 1;
                          v456 = operator new(v465 + 1);
                          *((_QWORD *)&v809 + 1) = v466 | 0x8000000000000000;
                          v808 = v456;
                          *(_QWORD *)&v809 = v455;
                        }
                        else
                        {
                          HIBYTE(v809) = v454;
                          v456 = &v808;
                          if (!v454)
                            goto LABEL_722;
                        }
                        memcpy(v456, __sb, v455);
LABEL_722:
                        *((_BYTE *)v456 + v455) = 0;
                        v467 = v808;
                        v818[0] = (void *)v809;
                        *(void **)((char *)v818 + 7) = *(void **)((char *)&v809 + 7);
                        v468 = HIBYTE(v809);
                        v469 = (char *)operator new(0x38uLL);
                        *((_QWORD *)v469 + 1) = 0;
                        *((_QWORD *)v469 + 2) = 0;
                        *((_QWORD *)v469 + 3) = off_24C9ABC20;
                        *(_QWORD *)v469 = &off_24C9ABBD0;
                        v470 = v818[0];
                        *((_QWORD *)v469 + 4) = v467;
                        *((_QWORD *)v469 + 5) = v470;
                        *(void **)(v469 + 47) = *(void **)((char *)v818 + 7);
                        v469[55] = v468;
                        v818[0] = 0;
                        *(void **)((char *)v818 + 7) = 0;
                        v471 = v806;
                        v805 = v469 + 24;
                        v806 = (std::__shared_weak_count *)v469;
                        v243 = a30;
                        if (v471)
                        {
                          p_shared_owners = (unint64_t *)&v471->__shared_owners_;
                          do
                            v473 = __ldaxr(p_shared_owners);
                          while (__stlxr(v473 - 1, p_shared_owners));
                          if (!v473)
                          {
                            ((void (*)(std::__shared_weak_count *))v471->__on_zero_shared)(v471);
                            std::__shared_weak_count::__release_weak(v471);
                          }
                        }
                        *(_OWORD *)v833 = *(_OWORD *)v803;
                        v474 = v805;
                        *(float64_t *)&v833[16] = v804;
                        if (v804 != 0.0)
                        {
                          v475 = (unint64_t *)(*(_QWORD *)&v804 + 8);
                          do
                            v476 = __ldxr(v475);
                          while (__stxr(v476 + 1, v475));
                        }
                        v477 = v806;
                        *(_QWORD *)&v833[24] = v474;
                        *(_QWORD *)&v833[32] = v806;
                        if (v806)
                        {
                          v478 = (unint64_t *)&v806->__shared_owners_;
                          do
                            v479 = __ldxr(v478);
                          while (__stxr(v479 + 1, v478));
                          v834 = v474;
                          do
                            v480 = __ldaxr(v478);
                          while (__stlxr(v480 - 1, v478));
                          if (!v480)
                          {
                            ((void (*)(std::__shared_weak_count *))v477->__on_zero_shared)(v477);
                            std::__shared_weak_count::__release_weak(v477);
                          }
                        }
                        else
                        {
                          v834 = v474;
                        }
                        v481 = *(std::__shared_weak_count **)&v804;
                        if (v804 != 0.0)
                        {
                          v482 = (unint64_t *)(*(_QWORD *)&v804 + 8);
                          do
                            v483 = __ldaxr(v482);
                          while (__stlxr(v483 - 1, v482));
                          if (!v483)
                          {
                            ((void (*)(std::__shared_weak_count *))v481->__on_zero_shared)(v481);
                            std::__shared_weak_count::__release_weak(v481);
                          }
                        }
                        v484 = *(_QWORD *)v833;
                        if (v834[31] >= 0)
                          v485 = v834 + 8;
                        else
                          v485 = (char *)*((_QWORD *)v834 + 1);
                        v486 = _os_log_pack_fill();
                        *(_DWORD *)v486 = 136315138;
                        *(_QWORD *)(v486 + 4) = v485;
                        v487 = (char *)operator new();
                        v488 = *(unsigned __int8 *)(v437 + 39);
                        v489 = v770;
                        if ((v488 & 0x80u) != 0)
                        {
                          v489 = *(const char **)(v437 + 16);
                          v488 = *(_QWORD *)(v437 + 24);
                        }
                        *(_QWORD *)v487 = v484;
                        *(_OWORD *)(v487 + 8) = *(_OWORD *)&v833[8];
                        *(_QWORD *)&v833[8] = 0;
                        *(_QWORD *)&v833[16] = 0;
                        *(_OWORD *)(v487 + 24) = *(_OWORD *)&v833[24];
                        *(_QWORD *)&v833[24] = 0;
                        *(_QWORD *)&v833[32] = 0;
                        *((_QWORD *)v487 + 5) = v489;
                        *((_QWORD *)v487 + 6) = v488;
                        v487[56] = 1;
                        v808 = 0;
                        v803[0] = v487;
                        (*(void (**)(_QWORD, void **))(**(_QWORD **)(v295 + 24) + 40))(*(_QWORD *)(v295 + 24), v803);
                        v490 = v803[0];
                        v803[0] = 0;
                        v458 = v775;
                        if (v490)
                        {
                          v491 = (std::__shared_weak_count *)*((_QWORD *)v490 + 4);
                          if (v491)
                          {
                            v492 = (unint64_t *)&v491->__shared_owners_;
                            do
                              v493 = __ldaxr(v492);
                            while (__stlxr(v493 - 1, v492));
                            if (!v493)
                            {
                              ((void (*)(std::__shared_weak_count *))v491->__on_zero_shared)(v491);
                              std::__shared_weak_count::__release_weak(v491);
                            }
                          }
                          v494 = (std::__shared_weak_count *)*((_QWORD *)v490 + 2);
                          if (v494)
                          {
                            v495 = (unint64_t *)&v494->__shared_owners_;
                            do
                              v496 = __ldaxr(v495);
                            while (__stlxr(v496 - 1, v495));
                            if (!v496)
                            {
                              ((void (*)(std::__shared_weak_count *))v494->__on_zero_shared)(v494);
                              std::__shared_weak_count::__release_weak(v494);
                            }
                          }
                          MEMORY[0x212BC6398](v490, 0x10F0C40B62ED6C6);
                          v497 = v808;
                          v808 = 0;
                          if (v497)
                          {
                            v498 = (std::__shared_weak_count *)v497[4];
                            if (v498)
                            {
                              v499 = (unint64_t *)&v498->__shared_owners_;
                              do
                                v500 = __ldaxr(v499);
                              while (__stlxr(v500 - 1, v499));
                              if (!v500)
                              {
                                ((void (*)(std::__shared_weak_count *))v498->__on_zero_shared)(v498);
                                std::__shared_weak_count::__release_weak(v498);
                              }
                            }
                            v501 = (std::__shared_weak_count *)v497[2];
                            if (v501)
                            {
                              v502 = (unint64_t *)&v501->__shared_owners_;
                              do
                                v503 = __ldaxr(v502);
                              while (__stlxr(v503 - 1, v502));
                              if (!v503)
                              {
                                ((void (*)(std::__shared_weak_count *))v501->__on_zero_shared)(v501);
                                std::__shared_weak_count::__release_weak(v501);
                              }
                            }
                            MEMORY[0x212BC6398](v497, 0x10F0C40B62ED6C6);
                          }
                        }
                        v504 = *(std::__shared_weak_count **)&v833[32];
                        if (*(_QWORD *)&v833[32])
                        {
                          v505 = (unint64_t *)(*(_QWORD *)&v833[32] + 8);
                          do
                            v506 = __ldaxr(v505);
                          while (__stlxr(v506 - 1, v505));
                          if (!v506)
                          {
                            ((void (*)(std::__shared_weak_count *))v504->__on_zero_shared)(v504);
                            std::__shared_weak_count::__release_weak(v504);
                            v507 = *(std::__shared_weak_count **)&v833[16];
                            if (*(_QWORD *)&v833[16])
                              goto LABEL_776;
                            goto LABEL_779;
                          }
                        }
                        v507 = *(std::__shared_weak_count **)&v833[16];
                        if (!*(_QWORD *)&v833[16])
                          goto LABEL_779;
LABEL_776:
                        v508 = (unint64_t *)&v507->__shared_owners_;
                        do
                          v509 = __ldaxr(v508);
                        while (__stlxr(v509 - 1, v508));
                        if (v509)
                        {
LABEL_779:
                          if (v458)
                            goto LABEL_780;
LABEL_783:
                          sub_20E863570((uint64_t)&v819);
                          v511 = v825;
                          if (!v825)
                            goto LABEL_787;
                          v512 = (unint64_t *)&v825->__shared_owners_;
                          do
                            v513 = __ldaxr(v512);
                          while (__stlxr(v513 - 1, v512));
                          if (!v513)
                          {
                            ((void (*)(std::__shared_weak_count *))v511->__on_zero_shared)(v511);
                            std::__shared_weak_count::__release_weak(v511);
                            if (SHIBYTE(v788) < 0)
LABEL_788:
                              operator delete(__dst);
                          }
                          else
                          {
LABEL_787:
                            if (SHIBYTE(v788) < 0)
                              goto LABEL_788;
                          }
                          *(_QWORD *)object = v732;
                          *(_QWORD *)&object[*(_QWORD *)(v732 - 24)] = v731;
                          *(_QWORD *)&object[16] = v730;
                          *(_QWORD *)&object[24] = v733;
                          if (SHIBYTE(v829[1]) < 0)
                            operator delete(v828[1]);
                          std::streambuf::~streambuf();
                          std::iostream::~basic_iostream();
                          MEMORY[0x212BC6290](v831);
LABEL_792:
                          if (a31)
                          {
                            v515 = (char *)v243[12];
                            v514 = v243[13];
                            if ((unint64_t)v515 < v514)
                            {
                              *(_QWORD *)v515 = 0;
                              v243[12] = v515 + 8;
                              goto LABEL_815;
                            }
                            v516 = (char *)*v739;
                            v517 = v515 - (_BYTE *)*v739;
                            v518 = v517 >> 3;
                            v519 = (v517 >> 3) + 1;
                            if (v519 >> 61)
                              sub_20E867F44();
                            v520 = v514 - (_QWORD)v516;
                            if (v520 >> 2 > v519)
                              v519 = v520 >> 2;
                            if ((unint64_t)v520 >= 0x7FFFFFFFFFFFFFF8)
                              v521 = 0x1FFFFFFFFFFFFFFFLL;
                            else
                              v521 = v519;
                            if (v521)
                            {
                              if (v521 >> 61)
                                sub_20E877A38();
                              v522 = operator new(8 * v521);
                              v523 = &v522[8 * v518];
                              *v523 = 0;
                              v524 = (uint64_t)(v523 + 1);
                              v525 = v515 - v516;
                              if (v515 == v516)
                              {
LABEL_812:
                                a30[11] = v523;
                                a30[12] = v524;
                                a30[13] = &v522[8 * v521];
                                if (v516)
                                  operator delete(v516);
                                a30[12] = v524;
                                goto LABEL_815;
                              }
                            }
                            else
                            {
                              v522 = 0;
                              v523 = (_QWORD *)(8 * v518);
                              *(_QWORD *)(8 * v518) = 0;
                              v524 = 8 * v518 + 8;
                              v525 = v515 - v516;
                              if (v515 == v516)
                                goto LABEL_812;
                            }
                            v526 = v525 - 8;
                            if (v526 < 0x58)
                              goto LABEL_1218;
                            if ((unint64_t)(v515 - &v522[v517]) < 0x20)
                              goto LABEL_1218;
                            v527 = (v526 >> 3) + 1;
                            v528 = 8 * (v527 & 0x3FFFFFFFFFFFFFFCLL);
                            v529 = &v515[-v528];
                            v523 = (_QWORD *)((char *)v523 - v528);
                            v530 = &v522[8 * v518 - 16];
                            v531 = v515 - 16;
                            v532 = v527 & 0x3FFFFFFFFFFFFFFCLL;
                            do
                            {
                              v533 = *(_OWORD *)v531;
                              *(v530 - 1) = *((_OWORD *)v531 - 1);
                              *v530 = v533;
                              v530 -= 2;
                              v531 -= 32;
                              v532 -= 4;
                            }
                            while (v532);
                            v515 = v529;
                            if (v527 != (v527 & 0x3FFFFFFFFFFFFFFCLL))
                            {
LABEL_1218:
                              do
                              {
                                v534 = *((_QWORD *)v515 - 1);
                                v515 -= 8;
                                *--v523 = v534;
                              }
                              while (v515 != v516);
                            }
                            goto LABEL_812;
                          }
LABEL_815:
                          v420 = 3;
                          v190 = v766;
LABEL_816:
                          if (v795[0])
                          {
                            v795[1] = v795[0];
                            operator delete(v795[0]);
                          }
                          if (v793[1])
                          {
                            *(void **)&v794 = v793[1];
                            operator delete(v793[1]);
                          }
                          if (v791[1])
                          {
                            *(void **)&v792 = v791[1];
                            operator delete(v791[1]);
                          }
                          v535 = (char *)__p[0];
                          if (__p[0])
                          {
                            v536 = (char *)__p[1];
                            v537 = __p[0];
                            if (__p[1] != __p[0])
                            {
                              do
                              {
                                v538 = (void *)*((_QWORD *)v536 - 3);
                                if (v538)
                                {
                                  *((_QWORD *)v536 - 2) = v538;
                                  operator delete(v538);
                                }
                                v539 = (void *)*((_QWORD *)v536 - 6);
                                if (v539)
                                {
                                  *((_QWORD *)v536 - 5) = v539;
                                  operator delete(v539);
                                }
                                v536 -= 112;
                              }
                              while (v536 != v535);
                              v537 = __p[0];
                            }
                            __p[1] = v535;
                            operator delete(v537);
                          }
                          if (v224)
                            operator delete(v224);
                          a1 = (float64x2_t *)v796[0];
                          LODWORD(v200) = v763;
                          if (v796[0])
                          {
                            v796[1] = v796[0];
                            operator delete(v796[0]);
                          }
                          if (v420 != 3)
                          {
                            v719 = 0;
                            v720 = v798[0];
                            if (v798[0])
                              goto LABEL_1180;
                            goto LABEL_1176;
                          }
                          v199 = 0;
LABEL_348:
                          v190 += 3;
                          v192 = v200;
                          if (v190 == v756)
                          {
                            if (!a33)
                              goto LABEL_1170;
                            if ((v199 & 1) != 0)
                              v191 = 5;
                            else
                              v191 = 2;
                            goto LABEL_1169;
                          }
                          continue;
                        }
                        ((void (*)(std::__shared_weak_count *))v507->__on_zero_shared)(v507);
                        std::__shared_weak_count::__release_weak(v507);
                        if (!v775)
                          goto LABEL_783;
                      }
                      else
                      {
                        os_log_type_enabled(v448, OS_LOG_TYPE_INFO);
                        *(_DWORD *)v833 = 136315138;
                        *(_QWORD *)&v833[4] = __sb;
                        v457 = (void *)_os_log_send_and_compose_impl();
                        v458 = v775;
                        if (!v457)
                          goto LABEL_779;
                        free(v457);
                        if (!v775)
                          goto LABEL_783;
                      }
LABEL_780:
                      v510 = (const char *)&__dst;
                      if (v788 < 0)
                        v510 = (const char *)__dst;
                      sub_20E8C003C((uint64_t)&v819, "%s", v510);
                      sub_20E863570((uint64_t)&v819);
                      goto LABEL_783;
                    }
                  }
                  memmove(v444, v442, v443);
                  goto LABEL_686;
                }
              }
              memmove(p_dst, v433, v298);
              goto LABEL_666;
            }
            v787 = 0;
            __dst = 0;
            v788 = 0;
            memset(v818, 0, sizeof(v818));
            v300 = *(_QWORD *)(a29 + 8) - *(_QWORD *)a29;
            if (v300)
            {
              sub_20E93D8FC((uint64_t)&__dst, 0x999999999999999ALL * (v300 >> 3));
              v302 = *(_QWORD *)a29;
              v301 = *(_QWORD *)(a29 + 8);
              v818[1] = v818[0];
              v303 = v301 - v302;
              if (v303)
              {
                sub_20E93D8FC((uint64_t)v818, 0x6666666666666667 * (v303 >> 3));
                v304 = *(_QWORD *)a29;
                v305 = *(_QWORD *)(a29 + 8);
                if (*(_QWORD *)a29 != v305)
                {
                  v306 = (char *)__dst + 8;
                  v307 = (char *)v818[0] + 8;
                  do
                  {
                    v308 = *(_QWORD *)(v304 + 24);
                    *(v306 - 1) = *(_QWORD *)(v308 + 16);
                    *v306 = *(_QWORD *)(v308 + 24);
                    v306 += 2;
                    v309 = *(_QWORD **)(v304 + 32);
                    *(v307 - 1) = v309[1];
                    *v307 = v309[2];
                    v307[1] = v309[3];
                    v304 += 40;
                    v307 += 3;
                  }
                  while (v304 != v305);
                }
              }
            }
            v757 = v292;
            if (a14)
            {
              v820 = 0uLL;
              v819 = 0uLL;
              LODWORD(v821) = 733223800;
              kdebug_trace();
              v810 = 1.79769313e308;
              v809 = 0uLL;
              v808 = 0;
              v310 = k[39].f64[1];
              v311 = k[55].f64[0];
              v312 = k[69].f64[1];
              if (a26)
              {
                *(double *)(*(_QWORD *)(*(_QWORD *)&v312 + 184) + 24) = v310 * k[40].f64[0] * 0.5;
                v311 = v311 * k[55].f64[1];
              }
              else
              {
                *(double *)(*(_QWORD *)(*(_QWORD *)&v312 + 184) + 24) = v310 * 0.5;
              }
              *(double *)(*(_QWORD *)(*(_QWORD *)v736 + 184) + 24) = v311 * 0.5;
              if ((sub_20F403B58(*v735, (uint64_t *)&__dst, (uint64_t)v818, (__int128 *)a8, &v810, &v808, v745) & 1) == 0)
              {
                v324 = 0;
                goto LABEL_502;
              }
              v321 = __sincos_stret(v810);
              *(_QWORD *)(a27 + 64) = 0;
              *(_QWORD *)(a27 + 72) = 0;
              v322 = v808;
              v323 = v809;
              *(double *)a27 = v321.__cosval;
              *(double *)(a27 + 8) = v321.__sinval;
              *(_QWORD *)(a27 + 16) = 0;
              *(_QWORD *)(a27 + 24) = v322;
              *(double *)(a27 + 32) = -v321.__sinval;
              *(double *)(a27 + 40) = v321.__cosval;
              *(_QWORD *)(a27 + 48) = 0;
              *(_QWORD *)(a27 + 56) = v323;
              *(_QWORD *)(a27 + 80) = 0x3FF0000000000000;
              *(_QWORD *)(a27 + 88) = *((_QWORD *)&v323 + 1);
              if (!BYTE4(k[4].f64[1])
                || !LOBYTE(k[70].f64[1])
                || fabs(atan2(-v321.__sinval, v321.__cosval)) * 57.2957795 <= *(float *)&k[4].f64[1])
              {
                v324 = 1;
                goto LABEL_502;
              }
              sub_20F24E118(&v807);
              if (**(int **)(v807 + 56) > 3
                || (v459 = *(unsigned __int8 *)(v807 + 72),
                    v460 = sub_20E8C31DC(v807, "OSLogSurrogateAppender", 1, 0),
                    v461 = v460,
                    !v459)
                && !v460)
              {
LABEL_1051:
                v324 = 0;
LABEL_502:
                kdebug_trace();
                if ((v324 & 1) == 0)
                {
LABEL_503:
                  v329 = 0;
                  goto LABEL_561;
                }
LABEL_506:
                v330 = *(_QWORD *)(a29 + 24);
                v331 = *(_QWORD *)(a29 + 32);
                *(_QWORD *)object = v330;
                *(_QWORD *)&object[8] = &off_24C9FC0F0;
                *(_QWORD *)&object[32] = &object[8];
                *(_QWORD *)&object[16] = a29;
                *(_QWORD *)&object[40] = v331;
                *(_QWORD *)&object[48] = &off_24C9FC0F0;
                v827[1] = &object[48];
                *(_QWORD *)&object[56] = a29;
                v812 = v330;
                v813[0] = &off_24C9FC0F0;
                v814 = v813;
                v813[1] = a29;
                v815 = v331;
                v816[0] = &off_24C9FC0F0;
                v817 = v816;
                v816[1] = a29;
                v332 = LODWORD(k[54].f64[0]);
                if (!(_DWORD)v332)
                {
                  v329 = 1;
                  v349 = v817;
                  if (v817 == v816)
                    goto LABEL_544;
                  goto LABEL_529;
                }
                v333 = k[53].f64[1];
                *(_QWORD *)v833 = v330;
                *(_QWORD *)&v833[8] = &off_24C9FC0F0;
                v334 = (char *)&v819 + 8;
                *(_QWORD *)&v833[32] = &v833[8];
                *(_QWORD *)&v833[16] = a29;
                *(_QWORD *)&v819 = v331;
                *((_QWORD *)&v819 + 1) = &off_24C9FC0F0;
                v821 = (char *)&v819 + 8;
                *(_QWORD *)&v820 = a29;
                if (v330 == v331)
                {
                  v335 = 0;
                  __sa.i64[0] = 0;
                  v776 = 0.0;
                  v328.f64[0] = 0.0;
                  v769 = v328;
                }
                else
                {
                  v335 = 0;
                  __sa.i64[0] = 0;
                  v776 = 0.0;
                  v328.f64[0] = 0.0;
                  v769 = v328;
                  do
                  {
                    if (!*(_QWORD *)&v833[32])
                      sub_20E86D37C();
                    (*(void (**)(void **__return_ptr))(**(_QWORD **)&v833[32] + 48))(v803);
                    v336.f64[0] = v804;
                    v337 = vaddq_f64(v769, v336);
                    *(_QWORD *)&v336.f64[0] = __sa.i64[0];
                    v336.f64[1] = v776;
                    __sa = (int8x16_t)vaddq_f64(v336, *(float64x2_t *)v803);
                    v338 = (float64x2_t)vextq_s8(__sa, __sa, 8uLL);
                    v769 = v337;
                    v776 = v338.f64[0];
                    ++v335;
                    v330 = *(_QWORD *)v833 + 4;
                    *(_QWORD *)v833 = v330;
                  }
                  while (v330 != (_QWORD)v819);
                  v334 = (char *)v821;
                  if (v821 != (char *)&v819 + 8)
                  {
                    if (v821)
                    {
                      v339 = 5;
                      goto LABEL_536;
                    }
                    goto LABEL_537;
                  }
                  v334 = (char *)&v819 + 8;
                }
                v339 = 4;
LABEL_536:
                (*(void (**)(char *, uint64_t))(*(_QWORD *)v334 + 8 * v339))(v334, v330);
LABEL_537:
                v353 = *(_QWORD **)&v833[32];
                if (*(_BYTE **)&v833[32] == &v833[8])
                {
                  v353 = &v833[8];
                  v354 = 4;
LABEL_541:
                  (*(void (**)(_QWORD *, uint64_t))(*v353 + 8 * v354))(v353, v330);
                }
                else if (*(_QWORD *)&v833[32])
                {
                  v354 = 5;
                  goto LABEL_541;
                }
                if (v335 < v332)
                {
                  v329 = 0;
                  v349 = v817;
                  if (v817 == v816)
                    goto LABEL_544;
LABEL_529:
                  if (v349)
                  {
                    v350 = 5;
                    goto LABEL_545;
                  }
                  goto LABEL_546;
                }
                v377 = (uint64_t)v814;
                *(_QWORD *)v833 = v812;
                if (v814)
                {
                  if (v814 != v813)
                  {
                    v377 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v814 + 16))(v814, v330);
                    goto LABEL_579;
                  }
                  *(_QWORD *)&v833[32] = &v833[8];
                  (*(void (**)(uint64_t, _QWORD *))(v813[0] + 24))((uint64_t)v813, &v833[8]);
                }
                else
                {
LABEL_579:
                  *(_QWORD *)&v833[32] = v377;
                }
                v540 = (uint64_t)v817;
                *(_QWORD *)&v819 = v815;
                if (v817)
                {
                  if (v817 != v816)
                  {
                    v540 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v817 + 16))(v817, v330);
                    goto LABEL_844;
                  }
                  v821 = (char *)&v819 + 8;
                  (*(void (**)(uint64_t, _QWORD *))(v816[0] + 24))((uint64_t)v816, (_QWORD *)&v819 + 1);
                }
                else
                {
LABEL_844:
                  v821 = (const char *)v540;
                }
                v330 = *(_QWORD *)v833;
                if (*(_QWORD *)v833 == (_QWORD)v819)
                {
                  v541 = 0;
                  v548 = (char *)v821;
                  if (v821 != (char *)&v819 + 8)
                    goto LABEL_853;
                }
                else
                {
                  v541 = 0;
                  v338.f64[0] = (double)v335;
                  v542 = vdivq_f64(v769, v338);
                  *(_QWORD *)&v543.f64[0] = __sa.i64[0];
                  v543.f64[1] = v776;
                  __sc = (int8x16_t)vdivq_f64(v543, (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v335), 0));
                  v771 = v542;
                  v777 = vextq_s8(__sc, __sc, 8uLL).u64[0];
                  v544 = v333 * v333;
                  do
                  {
                    if (!*(_QWORD *)&v833[32])
                      sub_20E86D37C();
                    (*(void (**)(void **__return_ptr))(**(_QWORD **)&v833[32] + 48))(v803);
                    v545.f64[0] = v804;
                    *(_QWORD *)&v545.f64[0] = *(_OWORD *)&vsubq_f64(v771, v545);
                    *(_QWORD *)&_Q2.f64[0] = __sc.i64[0];
                    *(_QWORD *)&_Q2.f64[1] = v777;
                    _D3 = vsubq_f64(_Q2, *(float64x2_t *)v803).f64[1];
                    __asm { FMLA            D2, D3, V1.D[1] }
                    if (vmlad_n_f64(_Q2.f64[0], v545.f64[0], v545.f64[0]) > v544)
                      ++v541;
                    v330 = *(_QWORD *)v833 + 4;
                    *(_QWORD *)v833 = v330;
                  }
                  while (v330 != (_QWORD)v819);
                  v548 = (char *)v821;
                  if (v821 != (char *)&v819 + 8)
                  {
LABEL_853:
                    if (v548)
                    {
                      v549 = 5;
                      goto LABEL_857;
                    }
                    goto LABEL_858;
                  }
                }
                v548 = (char *)&v819 + 8;
                v549 = 4;
LABEL_857:
                (*(void (**)(char *, uint64_t))(*(_QWORD *)v548 + 8 * v549))(v548, v330);
LABEL_858:
                v550 = *(_QWORD **)&v833[32];
                if (*(_BYTE **)&v833[32] == &v833[8])
                {
                  v550 = &v833[8];
                  v551 = 4;
LABEL_862:
                  (*(void (**)(_QWORD *, uint64_t))(*v550 + 8 * v551))(v550, v330);
                }
                else if (*(_QWORD *)&v833[32])
                {
                  v551 = 5;
                  goto LABEL_862;
                }
                v329 = v541 >= v332;
                v349 = v817;
                if (v817 != v816)
                  goto LABEL_529;
LABEL_544:
                v349 = v816;
                v350 = 4;
LABEL_545:
                (*(void (**)(_QWORD *, uint64_t))(*v349 + 8 * v350))(v349, v330);
LABEL_546:
                v355 = v814;
                if (v814 == v813)
                {
                  v355 = v813;
                  v356 = 4;
LABEL_550:
                  (*(void (**)(_QWORD *, uint64_t))(*v355 + 8 * v356))(v355, v330);
                }
                else if (v814)
                {
                  v356 = 5;
                  goto LABEL_550;
                }
                v357 = v827[1];
                if (v827[1] == &object[48])
                {
                  v357 = &object[48];
                  v358 = 4;
LABEL_555:
                  (*(void (**)(_QWORD *, uint64_t))(*v357 + 8 * v358))(v357, v330);
                }
                else if (v827[1])
                {
                  v358 = 5;
                  goto LABEL_555;
                }
                v359 = *(_QWORD **)&object[32];
                if (*(_BYTE **)&object[32] == &object[8])
                {
                  v359 = &object[8];
                  v360 = 4;
LABEL_560:
                  (*(void (**)(_QWORD *, uint64_t))(*v359 + 8 * v360))(v359, v330);
                }
                else if (*(_QWORD *)&object[32])
                {
                  v360 = 5;
                  goto LABEL_560;
                }
LABEL_561:
                if (!a31)
                  goto LABEL_592;
                v361 = (uint64_t)(*(_QWORD *)(a29 + 32) - *(_QWORD *)(a29 + 24)) >> 2;
                v363 = (uint64_t *)v243[12];
                v362 = v243[13];
                if ((unint64_t)v363 < v362)
                {
                  *v363 = v361;
                  v243[12] = v363 + 1;
                  v364 = v243[9];
                  v365 = (_QWORD *)(v364 - 32);
                  if ((char **)(v364 - 32) == v745)
                    goto LABEL_591;
LABEL_590:
                  sub_20E867E00(v365, *(char **)(a29 + 24), *(char **)(a29 + 32), (uint64_t)(*(_QWORD *)(a29 + 32) - *(_QWORD *)(a29 + 24)) >> 2);
                  v364 = v243[9];
                  goto LABEL_591;
                }
                v366 = (uint64_t *)*v739;
                v367 = (char *)v363 - (_BYTE *)*v739;
                v368 = v367 >> 3;
                v369 = (v367 >> 3) + 1;
                if (v369 >> 61)
                  sub_20E867F44();
                v370 = v362 - (_QWORD)v366;
                if (v370 >> 2 > v369)
                  v369 = v370 >> 2;
                if ((unint64_t)v370 >= 0x7FFFFFFFFFFFFFF8)
                  v371 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v371 = v369;
                if (v371)
                {
                  if (v371 >> 61)
                    sub_20E877A38();
                  v372 = operator new(8 * v371);
                  v373 = (uint64_t *)&v372[8 * v368];
                  *v373 = v361;
                  v374 = (uint64_t)(v373 + 1);
                  v375 = (char *)v363 - (char *)v366;
                  if (v363 != v366)
                  {
LABEL_574:
                    v376 = v375 - 8;
                    if (v376 < 0x58)
                    {
                      v243 = a30;
                      goto LABEL_586;
                    }
                    v378 = (char *)v363 - &v372[v367];
                    v243 = a30;
                    if (v378 < 0x20)
                      goto LABEL_1219;
                    v379 = (v376 >> 3) + 1;
                    v380 = 8 * (v379 & 0x3FFFFFFFFFFFFFFCLL);
                    v381 = &v363[v380 / 0xFFFFFFFFFFFFFFF8];
                    v373 = (uint64_t *)((char *)v373 - v380);
                    v382 = &v372[8 * v368 - 16];
                    v383 = v363 - 2;
                    v384 = v379 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v385 = *(_OWORD *)v383;
                      *(v382 - 1) = *((_OWORD *)v383 - 1);
                      *v382 = v385;
                      v382 -= 2;
                      v383 -= 4;
                      v384 -= 4;
                    }
                    while (v384);
                    v363 = v381;
                    if (v379 != (v379 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_1219:
                      do
                      {
LABEL_586:
                        v386 = *--v363;
                        *--v373 = v386;
                      }
                      while (v363 != v366);
                    }
LABEL_587:
                    v243[11] = v373;
                    v243[12] = v374;
                    v243[13] = &v372[8 * v371];
                    if (v366)
                      operator delete(v366);
                    k = v765;
                    v243[12] = v374;
                    v364 = v243[9];
                    v365 = (_QWORD *)(v364 - 32);
                    if ((char **)(v364 - 32) != v745)
                      goto LABEL_590;
LABEL_591:
                    *(_BYTE *)(v364 - 8) = v329;
LABEL_592:
                    if (a33)
                      *(_BYTE *)(v753 + 2) = v329;
                    v387 = *(_QWORD *)(a29 + 32) - *(_QWORD *)(a29 + 24);
                    v190 = v766;
                    if (*((_BYTE *)a17 + 64)
                      && (v388 = a17[5],
                          v389 = (unint64_t *)*v388,
                          v390 = v388[1] - *v388,
                          (v390 & 0x7FFFFFFF8) != 0))
                    {
                      v391 = v387 >> 2;
                      v392 = (float *)v388[3];
                      v393 = (unint64_t)(float)(*v392 * (float)v764);
                      if (*v389 > v393)
                        v393 = *v389;
                      if (v393 > v391)
                      {
                        v394 = 0;
                        v395 = (v390 >> 3);
                        v396 = v392 + 1;
                        v397 = v389 + 1;
                        while (v395 - 1 != v394)
                        {
                          v398 = (unint64_t)(float)(v396[v394] * (float)v764);
                          if (v397[v394] > v398)
                            v398 = v397[v394];
                          ++v394;
                          if (v398 <= v391)
                          {
                            if (v394 >= v395)
                              goto LABEL_612;
                            goto LABEL_605;
                          }
                        }
                        goto LABEL_612;
                      }
LABEL_605:
                      object[0] = 0;
                      memset(&object[8], 0, 48);
                      v399 = v734;
                      if (a31)
                        v399 = (unint64_t)object >> 8;
                      v734 = v399;
                      v400 = sub_20F3AA620(a17, v766, a16, a14, (int64x2_t *)a27, LODWORD(k[54].f64[0]), (_QWORD *)(v729 | (v399 << 8)), v754, k[53].f64[1]);
                      v401 = v400;
                      v402 = a30;
                      if (a33)
                      {
                        ++*(_QWORD *)(v753 + 8);
                        *(_BYTE *)(v753 + 16) = v400;
                      }
                      if (a31)
                      {
                        object[0] = v400;
                        v403 = a30[18];
                        v404 = a30[19];
                        if (v403 >= v404)
                        {
                          v422 = v728->i64[0];
                          v423 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v403 - v728->i64[0]) >> 3);
                          v424 = v423 + 1;
                          if ((unint64_t)(v423 + 1) > 0x492492492492492)
                            sub_20E867F44();
                          if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v404 - v422) >> 3) > v424)
                            v424 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v404 - v422) >> 3);
                          if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v404 - v422) >> 3)) >= 0x249249249249249)
                            v425 = 0x492492492492492;
                          else
                            v425 = v424;
                          *(_QWORD *)&v833[32] = v727;
                          if (v425 > 0x492492492492492)
                            sub_20E877A38();
                          v426 = (char *)operator new(56 * v425);
                          v427 = &v426[56 * v423];
                          *v427 = v401;
                          *(_OWORD *)(v427 + 8) = *(_OWORD *)&object[8];
                          *((_QWORD *)v427 + 3) = *(_QWORD *)&object[24];
                          memset(&object[8], 0, 24);
                          *((_OWORD *)v427 + 2) = *(_OWORD *)&object[32];
                          *((_QWORD *)v427 + 6) = *(_QWORD *)&object[48];
                          memset(&object[32], 0, 24);
                          if (v403 == v422)
                          {
                            v431 = vdupq_n_s64(v403);
                            v432 = &v426[56 * v423];
                            v402 = a30;
                          }
                          else
                          {
                            v428 = 0;
                            v402 = a30;
                            do
                            {
                              v429 = &v427[v428];
                              v430 = v403 + v428;
                              *(v429 - 56) = *(_BYTE *)(v403 + v428 - 56);
                              *((_OWORD *)v429 - 3) = *(_OWORD *)(v403 + v428 - 48);
                              *((_QWORD *)v429 - 4) = *(_QWORD *)(v403 + v428 - 32);
                              *(_QWORD *)(v430 - 48) = 0;
                              *(_QWORD *)(v430 - 40) = 0;
                              *(_QWORD *)(v430 - 32) = 0;
                              *(_OWORD *)(v429 - 24) = *(_OWORD *)(v403 + v428 - 24);
                              *((_QWORD *)v429 - 1) = *(_QWORD *)(v403 + v428 - 8);
                              *(_QWORD *)(v430 - 24) = 0;
                              *(_QWORD *)(v430 - 16) = 0;
                              *(_QWORD *)(v430 - 8) = 0;
                              v428 -= 56;
                            }
                            while (v403 + v428 != v422);
                            v431 = *v728;
                            v404 = *v727;
                            v432 = &v427[v428];
                          }
                          v405 = (unint64_t)(v427 + 56);
                          v402[17] = v432;
                          v402[18] = v427 + 56;
                          *(int64x2_t *)&v833[8] = v431;
                          v402[19] = &v426[56 * v425];
                          *(_QWORD *)&v833[24] = v404;
                          *(_QWORD *)v833 = v431.i64[0];
                          sub_20EACA068((uint64_t)v833, v431.i64[0]);
                          if (*(_QWORD *)v833)
                            operator delete(*(void **)v833);
                        }
                        else
                        {
                          *(_BYTE *)v403 = v400;
                          *(_QWORD *)(v403 + 8) = 0;
                          *(_QWORD *)(v403 + 16) = 0;
                          *(_QWORD *)(v403 + 24) = 0;
                          *(_QWORD *)(v403 + 32) = 0;
                          *(_OWORD *)(v403 + 8) = *(_OWORD *)&object[8];
                          *(_QWORD *)(v403 + 24) = *(_QWORD *)&object[24];
                          memset(&object[8], 0, 24);
                          *(_QWORD *)(v403 + 40) = 0;
                          *(_QWORD *)(v403 + 48) = 0;
                          *(_OWORD *)(v403 + 32) = *(_OWORD *)&object[32];
                          *(_QWORD *)(v403 + 48) = *(_QWORD *)&object[48];
                          memset(&object[32], 0, 24);
                          v405 = v403 + 56;
                        }
                        v402[18] = v405;
                        *(_BYTE *)(v402[9] - 7) = v401;
                      }
                      if (*(_QWORD *)&object[32])
                      {
                        *(_QWORD *)&object[40] = *(_QWORD *)&object[32];
                        operator delete(*(void **)&object[32]);
                      }
                      v599 = *(_QWORD *)&object[8];
                      k = v765;
                      v190 = v766;
                      if (*(_QWORD *)&object[8])
                      {
                        v600 = *(_QWORD *)&object[16];
                        v601 = *(void **)&object[8];
                        if (*(_QWORD *)&object[16] != *(_QWORD *)&object[8])
                        {
                          do
                          {
                            v602 = v600 - 136;
                            sub_20E991750((void **)(v600 - 112));
                            v600 = v602;
                          }
                          while (v602 != v599);
                          v601 = *(void **)&object[8];
                        }
                        *(_QWORD *)&object[16] = v599;
                        operator delete(v601);
                      }
                    }
                    else
                    {
LABEL_612:
                      v401 = 0;
                    }
                    v406 = sub_210219C18();
                    v407 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
                    if ((v407 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
                    {
                      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
                      __cxa_guard_release(&qword_254A6DDD0);
                    }
                    v408 = (unint64_t)v387 >> 2;
                    if (atomic_load(&qword_254A5A450))
                    {
                      *(_DWORD *)object = 67110144;
                      *(_DWORD *)&object[4] = v329;
                      *(_WORD *)&object[8] = 1024;
                      *(_DWORD *)&object[10] = v401;
                      *(_WORD *)&object[14] = 1024;
                      *(_DWORD *)&object[16] = v764;
                      *(_WORD *)&object[20] = 1024;
                      *(_DWORD *)&object[22] = v757;
                      *(_WORD *)&object[26] = 1024;
                      *(_DWORD *)&object[28] = (unint64_t)v387 >> 2;
                      v410 = (char *)_os_log_send_and_compose_impl();
                      v411 = strlen(v410);
                      *(_QWORD *)v833 = 0;
                      pthread_threadid_np(0, (__uint64_t *)v833);
                      v412 = *(_QWORD *)v833;
                      timespec_get((timespec *)v833, 1);
                      sub_210219E20(object, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v406 + 1), (__int128 *)(v406 + 5), "RL:PNP: S:%d RS:%d NC:%u MI:%u NI:%u", 0x24uLL, v410, v411, v412, v833);
                      std::mutex::lock(&stru_254A5A410);
                      v413 = qword_254A5A458;
                      v414 = unk_254A5A460;
                      for (k = v765; v413 != v414; v413 += 40)
                      {
                        v415 = *(_QWORD *)(v413 + 32);
                        if (!v415)
                          sub_20E86D37C();
                        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v415 + 48))(v415, object);
                      }
                      std::mutex::unlock(&stru_254A5A410);
                      if (v832 < 0)
                      {
                        operator delete(v830[1]);
                        v190 = v766;
                        if (SHIBYTE(v830[0]) < 0)
                          goto LABEL_623;
LABEL_620:
                        if (LOBYTE(v828[1]))
                        {
LABEL_624:
                          if (SHIBYTE(v828[0]) < 0)
                            operator delete(v827[0]);
                        }
                      }
                      else
                      {
                        v190 = v766;
                        if ((SHIBYTE(v830[0]) & 0x80000000) == 0)
                          goto LABEL_620;
LABEL_623:
                        operator delete(v829[0]);
                        if (LOBYTE(v828[1]))
                          goto LABEL_624;
                      }
                      if (object[56] && (object[55] & 0x80000000) != 0)
                        operator delete(*(void **)&object[32]);
                      if ((object[31] & 0x80000000) != 0)
                      {
                        operator delete(*(void **)&object[8]);
                        if (v410)
LABEL_631:
                          free(v410);
                      }
                      else if (v410)
                      {
                        goto LABEL_631;
                      }
                    }
                    v416 = os_signpost_enabled((os_log_t)*v406);
                    v417 = v757;
                    if (v416)
                    {
                      *(_DWORD *)object = 67110144;
                      *(_DWORD *)&object[4] = v329;
                      *(_WORD *)&object[8] = 1024;
                      *(_DWORD *)&object[10] = v401;
                      *(_WORD *)&object[14] = 1024;
                      *(_DWORD *)&object[16] = v764;
                      *(_WORD *)&object[20] = 1024;
                      *(_DWORD *)&object[22] = v757;
                      *(_WORD *)&object[26] = 1024;
                      *(_DWORD *)&object[28] = v408;
                      _os_signpost_emit_unreliably_with_name_impl();
                    }
                    v418 = atomic_load((unsigned __int8 *)&qword_254A6D9C8);
                    v224 = v758;
                    v419 = v759;
                    if ((v418 & 1) == 0 && __cxa_guard_acquire(&qword_254A6D9C8))
                    {
                      sub_20FCFB524();
                      __cxa_atexit((void (*)(void *))sub_20FCFB238, &qword_254A6D9A0, &dword_20E81F000);
                      __cxa_guard_release(&qword_254A6D9C8);
                      k = v765;
                      v190 = v766;
                      v224 = v758;
                      v419 = v759;
                      v417 = v757;
                    }
                    sub_210237040("RL:PNP: S:%d RS:%d NC:%u MI:%u NI:%u", (std::string *)object, v329, v401, v764, v417, v408);
                    sub_20EA5C6C8((uint64_t)object, qword_254A6D9A8);
                    if ((object[23] & 0x80000000) != 0)
                    {
                      operator delete(*(void **)object);
                      if (v401 || v329)
                        goto LABEL_640;
LABEL_637:
                      v420 = 3;
                      v421 = v818[0];
                      if (v818[0])
                      {
LABEL_641:
                        v818[1] = v421;
                        operator delete(v421);
                      }
                    }
                    else
                    {
                      if (!v401 && !v329)
                        goto LABEL_637;
LABEL_640:
                      *a28 = v419;
                      v420 = 1;
                      v421 = v818[0];
                      if (v818[0])
                        goto LABEL_641;
                    }
                    if (__dst)
                    {
                      v787 = (size_t)__dst;
                      operator delete(__dst);
                    }
                    goto LABEL_816;
                  }
                }
                else
                {
                  v372 = 0;
                  v373 = (uint64_t *)(8 * v368);
                  *(_QWORD *)(8 * v368) = v361;
                  v374 = 8 * v368 + 8;
                  v375 = (char *)v363 - (char *)v366;
                  if (v363 != v366)
                    goto LABEL_574;
                }
                v243 = a30;
                goto LABEL_587;
              }
              *(_QWORD *)v833 = &v807;
              *(std::chrono::steady_clock::time_point *)&v833[8] = std::chrono::steady_clock::now();
              *(std::chrono::system_clock::time_point *)&v833[16] = std::chrono::system_clock::now();
              *(_DWORD *)&v833[24] = 3;
              *(_QWORD *)&v833[32] = "unknown file";
              LODWORD(v834) = 164;
              v835 = "unknown function";
              v836 = 0;
              v837 = 0;
              v603 = **(_QWORD **)v833;
              v604 = **(_QWORD **)v833 + 16;
              v778 = **(_QWORD **)v833;
              if (*(char *)(**(_QWORD **)v833 + 39) < 0)
              {
                v606 = *(const char **)(v603 + 16);
                v605 = *(_QWORD *)(v603 + 24);
              }
              else
              {
                v605 = *(unsigned __int8 *)(**(_QWORD **)v833 + 39);
                v606 = (const char *)(v603 + 16);
              }
              __sd = v459;
              v611 = v810;
              v612 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v612 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
              {
                sub_20E9E46F8((uint64_t)v803);
                sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v803);
                if ((_BYTE)v805 && SHIBYTE(v804) < 0)
                  operator delete(v803[0]);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                __cxa_guard_release(&qword_254A4A510);
                v243 = a30;
              }
              if (byte_254A4A4F8[23] >= 0)
                v613 = byte_254A4A4F8;
              else
                v613 = *(const char **)byte_254A4A4F8;
              if (byte_254A4A4F8[23] >= 0)
                v614 = byte_254A4A4F8[23];
              else
                v614 = *(_QWORD *)&byte_254A4A4F8[8];
              *(_QWORD *)object = os_log_create(v613, v606);
              if (v614 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              v772 = v604;
              if (v614 >= 0x17)
              {
                v616 = v461;
                v617 = (v614 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v614 | 7) != 0x17)
                  v617 = v614 | 7;
                v618 = v617 + 1;
                v615 = operator new(v617 + 1);
                *(_QWORD *)&object[24] = v618 | 0x8000000000000000;
                *(_QWORD *)&object[8] = v615;
                *(_QWORD *)&object[16] = v614;
                v461 = v616;
              }
              else
              {
                object[31] = v614;
                v615 = &object[8];
                if (!v614)
                {
LABEL_983:
                  v615[v614] = 0;
                  object[32] = 1;
                  if (v605 > 0x7FFFFFFFFFFFFFF7)
                    sub_20E860B7C();
                  k = v765;
                  if (v605 >= 0x17)
                  {
                    v620 = v461;
                    v621 = (v605 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v605 | 7) != 0x17)
                      v621 = v605 | 7;
                    v622 = v621 + 1;
                    v619 = operator new(v621 + 1);
                    *(_QWORD *)&object[56] = v622 | 0x8000000000000000;
                    *(_QWORD *)&object[40] = v619;
                    *(_QWORD *)&object[48] = v605;
                    v461 = v620;
                  }
                  else
                  {
                    object[63] = v605;
                    v619 = &object[40];
                    if (!v605)
                      goto LABEL_991;
                  }
                  memmove(v619, v606, v605);
LABEL_991:
                  v619[v605] = 0;
                  LOBYTE(v827[0]) = 1;
                  v623 = *(NSObject **)object;
                  if ((object[63] & 0x80000000) != 0)
                    operator delete(*(void **)&object[40]);
                  if (object[32] && (object[31] & 0x80000000) != 0)
                    operator delete(*(void **)&object[8]);
                  if (*(_QWORD *)object)
                    os_release(*(void **)object);
                  v624 = v611 * 57.2957795;
                  if (v461 && *(_QWORD *)(v461 + 24))
                  {
                    v625 = _os_log_pack_size();
                    v626 = (std::__shared_weak_count_vtbl *)operator new(v625, (std::align_val_t)8uLL);
                    v627 = (std::__shared_weak_count *)operator new();
                    v628 = v627;
                    v627->__shared_owners_ = 0;
                    v629 = (unint64_t *)&v627->__shared_owners_;
                    v627->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                    v627->__shared_weak_owners_ = 0;
                    v627[1].__vftable = v626;
                    *(_QWORD *)object = v626;
                    *(_QWORD *)&object[8] = v626;
                    *(_QWORD *)&object[16] = v627;
                    do
                      v630 = __ldxr(v629);
                    while (__stxr(v630 + 1, v629));
                    memset(&object[24], 0, 24);
                    k = v765;
                    do
                      v631 = __ldaxr(v629);
                    while (__stlxr(v631 - 1, v629));
                    if (!v631)
                    {
                      ((void (*)(std::__shared_weak_count *))v627->__on_zero_shared)(v627);
                      std::__shared_weak_count::__release_weak(v628);
                    }
                    v632 = *(_QWORD *)object;
                    v633 = _os_log_pack_fill();
                    v634 = *(float *)&v765[4].f64[1];
                    *(_DWORD *)v633 = 134218240;
                    *(double *)(v633 + 4) = v624;
                    *(_WORD *)(v633 + 12) = 2048;
                    *(double *)(v633 + 14) = v634;
                    v635 = (char *)operator new();
                    v636 = *(unsigned __int8 *)(v778 + 39);
                    v637 = *(_QWORD *)(v778 + 16);
                    v638 = *(_QWORD *)(v778 + 24);
                    v639 = *(_OWORD *)&object[24];
                    *(_OWORD *)(v635 + 8) = *(_OWORD *)&object[8];
                    if ((v636 & 0x80u) != 0)
                      v636 = v638;
                    else
                      v637 = v772;
                    *(_QWORD *)v635 = v632;
                    *(_QWORD *)&object[8] = 0;
                    *(_QWORD *)&object[16] = 0;
                    *(_OWORD *)(v635 + 24) = v639;
                    *(_QWORD *)&object[24] = 0;
                    *(_QWORD *)&object[32] = 0;
                    *((_QWORD *)v635 + 5) = v637;
                    *((_QWORD *)v635 + 6) = v636;
                    v635[56] = 1;
                    v811 = 0;
                    v803[0] = v635;
                    (*(void (**)(_QWORD, void **))(**(_QWORD **)(v461 + 24) + 40))(*(_QWORD *)(v461 + 24), v803);
                    v640 = v803[0];
                    v803[0] = 0;
                    if (v640)
                    {
                      v641 = (std::__shared_weak_count *)*((_QWORD *)v640 + 4);
                      if (v641)
                      {
                        v642 = (unint64_t *)&v641->__shared_owners_;
                        do
                          v643 = __ldaxr(v642);
                        while (__stlxr(v643 - 1, v642));
                        if (!v643)
                        {
                          ((void (*)(std::__shared_weak_count *))v641->__on_zero_shared)(v641);
                          std::__shared_weak_count::__release_weak(v641);
                        }
                      }
                      v644 = (std::__shared_weak_count *)*((_QWORD *)v640 + 2);
                      if (v644)
                      {
                        v645 = (unint64_t *)&v644->__shared_owners_;
                        do
                          v646 = __ldaxr(v645);
                        while (__stlxr(v646 - 1, v645));
                        if (!v646)
                        {
                          ((void (*)(std::__shared_weak_count *))v644->__on_zero_shared)(v644);
                          std::__shared_weak_count::__release_weak(v644);
                        }
                      }
                      MEMORY[0x212BC6398](v640, 0x10F0C40B62ED6C6);
                      v647 = v811;
                      v811 = 0;
                      if (v647)
                      {
                        v648 = *(std::__shared_weak_count **)(v647 + 32);
                        if (v648)
                        {
                          v649 = (unint64_t *)&v648->__shared_owners_;
                          do
                            v650 = __ldaxr(v649);
                          while (__stlxr(v650 - 1, v649));
                          if (!v650)
                          {
                            ((void (*)(std::__shared_weak_count *))v648->__on_zero_shared)(v648);
                            std::__shared_weak_count::__release_weak(v648);
                          }
                        }
                        v651 = *(std::__shared_weak_count **)(v647 + 16);
                        if (v651)
                        {
                          v652 = (unint64_t *)&v651->__shared_owners_;
                          do
                            v653 = __ldaxr(v652);
                          while (__stlxr(v653 - 1, v652));
                          if (!v653)
                          {
                            ((void (*)(std::__shared_weak_count *))v651->__on_zero_shared)(v651);
                            std::__shared_weak_count::__release_weak(v651);
                          }
                        }
                        MEMORY[0x212BC6398](v647, 0x10F0C40B62ED6C6);
                      }
                    }
                    v654 = *(std::__shared_weak_count **)&object[32];
                    v655 = __sd;
                    if (*(_QWORD *)&object[32])
                    {
                      v656 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                      do
                        v657 = __ldaxr(v656);
                      while (__stlxr(v657 - 1, v656));
                      if (!v657)
                      {
                        ((void (*)(std::__shared_weak_count *))v654->__on_zero_shared)(v654);
                        std::__shared_weak_count::__release_weak(v654);
                      }
                    }
                    v658 = *(std::__shared_weak_count **)&object[16];
                    if (*(_QWORD *)&object[16])
                    {
                      v659 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                      do
                        v660 = __ldaxr(v659);
                      while (__stlxr(v660 - 1, v659));
                      if (!v660)
                      {
                        ((void (*)(std::__shared_weak_count *))v658->__on_zero_shared)(v658);
                        std::__shared_weak_count::__release_weak(v658);
                      }
                    }
                  }
                  else
                  {
                    os_log_type_enabled(v623, OS_LOG_TYPE_INFO);
                    v661 = *(float *)&v765[4].f64[1];
                    *(_DWORD *)object = 134218240;
                    *(double *)&object[4] = v624;
                    *(_WORD *)&object[12] = 2048;
                    *(double *)&object[14] = v661;
                    v662 = (void *)_os_log_send_and_compose_impl();
                    v655 = __sd;
                    if (v662)
                      free(v662);
                  }
                  if (v655)
                  {
                    sub_20E8C003C((uint64_t)v833, "Estimated angle update (%f deg) exceed angle bound (%f deg)", v810 * 57.2957795, *(float *)&k[4].f64[1]);
                    sub_20E863570((uint64_t)v833);
                  }
                  sub_20E863570((uint64_t)v833);
                  v663 = v837;
                  if (v837)
                  {
                    v664 = (unint64_t *)&v837->__shared_owners_;
                    do
                      v665 = __ldaxr(v664);
                    while (__stlxr(v665 - 1, v664));
                    if (!v665)
                    {
                      ((void (*)(std::__shared_weak_count *))v663->__on_zero_shared)(v663);
                      std::__shared_weak_count::__release_weak(v663);
                    }
                  }
                  goto LABEL_1051;
                }
              }
              memmove(v615, v613, v614);
              goto LABEL_983;
            }
            v820 = 0uLL;
            v819 = 0uLL;
            LODWORD(v821) = 733223808;
            kdebug_trace();
            v318 = k[39].f64[1];
            v319 = k[55].f64[0];
            v320 = k[70].f64[0];
            if (a26)
            {
              *(double *)(*(_QWORD *)(*(_QWORD *)&v320 + 184) + 24) = v318 * k[40].f64[0] * 0.5;
              v319 = v319 * k[55].f64[1];
            }
            else
            {
              *(double *)(*(_QWORD *)(*(_QWORD *)&v320 + 184) + 24) = v318 * 0.5;
            }
            *(double *)(*(_QWORD *)(*(_QWORD *)&v738->f64[0] + 184) + 24) = v319 * 0.5;
            if ((sub_20F40478C(*v737, (uint64_t *)&__dst, (uint64_t *)v818, (double *)a8, (double *)a27, v745) & 1) == 0)
              goto LABEL_504;
            if (!BYTE4(k[4].f64[1]) || !LOBYTE(k[70].f64[1]))
              goto LABEL_500;
            v326 = (*(double *)(a27 + 80) + *(double *)a27 + *(double *)(a27 + 40) + -1.0) * 0.5;
            if (v326 > 1.0)
              v326 = 1.0;
            if (v326 < -1.0)
              v326 = -1.0;
            v325 = *(float *)&k[4].f64[1];
            if (acos(v326) * 57.2957795 <= v325)
            {
LABEL_500:
              v327 = 1;
              goto LABEL_505;
            }
            sub_20F24E118(&v811);
            if (**(int **)(v811 + 56) > 3
              || (v462 = *(unsigned __int8 *)(v811 + 72),
                  v463 = sub_20E8C31DC(v811, "OSLogSurrogateAppender", 1, 0),
                  v464 = v463,
                  !v462)
              && !v463)
            {
LABEL_504:
              v327 = 0;
LABEL_505:
              kdebug_trace();
              if (!v327)
                goto LABEL_503;
              goto LABEL_506;
            }
            *(_QWORD *)v833 = &v811;
            *(std::chrono::steady_clock::time_point *)&v833[8] = std::chrono::steady_clock::now();
            *(std::chrono::system_clock::time_point *)&v833[16] = std::chrono::system_clock::now();
            *(_DWORD *)&v833[24] = 3;
            *(_QWORD *)&v833[32] = "unknown file";
            LODWORD(v834) = 215;
            v835 = "unknown function";
            v836 = 0;
            v837 = 0;
            v607 = **(_QWORD **)v833;
            v608 = **(_QWORD **)v833 + 16;
            v779 = **(_QWORD **)v833;
            if (*(char *)(**(_QWORD **)v833 + 39) < 0)
            {
              v610 = *(const char **)(v607 + 16);
              v609 = *(_QWORD *)(v607 + 24);
            }
            else
            {
              v609 = *(unsigned __int8 *)(**(_QWORD **)v833 + 39);
              v610 = (const char *)(v607 + 16);
            }
            __se = v462;
            v666 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v666 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)v803);
              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v803);
              if ((_BYTE)v805 && SHIBYTE(v804) < 0)
                operator delete(v803[0]);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
              v243 = a30;
            }
            if (byte_254A4A4F8[23] >= 0)
              v667 = byte_254A4A4F8;
            else
              v667 = *(const char **)byte_254A4A4F8;
            if (byte_254A4A4F8[23] >= 0)
              v668 = byte_254A4A4F8[23];
            else
              v668 = *(_QWORD *)&byte_254A4A4F8[8];
            *(_QWORD *)object = os_log_create(v667, v610);
            if (v668 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            v773 = v608;
            if (v668 >= 0x17)
            {
              v670 = v464;
              v671 = (v668 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v668 | 7) != 0x17)
                v671 = v668 | 7;
              v672 = v671 + 1;
              v669 = operator new(v671 + 1);
              *(_QWORD *)&object[24] = v672 | 0x8000000000000000;
              *(_QWORD *)&object[8] = v669;
              *(_QWORD *)&object[16] = v668;
              v464 = v670;
            }
            else
            {
              object[31] = v668;
              v669 = &object[8];
              if (!v668)
              {
LABEL_1068:
                v669[v668] = 0;
                object[32] = 1;
                if (v609 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                k = v765;
                if (v609 >= 0x17)
                {
                  v674 = v464;
                  v675 = (v609 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v609 | 7) != 0x17)
                    v675 = v609 | 7;
                  v676 = v675 + 1;
                  v673 = operator new(v675 + 1);
                  *(_QWORD *)&object[56] = v676 | 0x8000000000000000;
                  *(_QWORD *)&object[40] = v673;
                  *(_QWORD *)&object[48] = v609;
                  v464 = v674;
                }
                else
                {
                  object[63] = v609;
                  v673 = &object[40];
                  if (!v609)
                    goto LABEL_1076;
                }
                memmove(v673, v610, v609);
LABEL_1076:
                v673[v609] = 0;
                LOBYTE(v827[0]) = 1;
                v677 = *(NSObject **)object;
                if ((object[63] & 0x80000000) != 0)
                  operator delete(*(void **)&object[40]);
                if (object[32] && (object[31] & 0x80000000) != 0)
                  operator delete(*(void **)&object[8]);
                if (*(_QWORD *)object)
                  os_release(*(void **)object);
                if (v464 && *(_QWORD *)(v464 + 24))
                {
                  v678 = _os_log_pack_size();
                  v679 = (std::__shared_weak_count_vtbl *)operator new(v678, (std::align_val_t)8uLL);
                  v680 = (std::__shared_weak_count *)operator new();
                  v681 = v680;
                  v680->__shared_owners_ = 0;
                  v682 = (unint64_t *)&v680->__shared_owners_;
                  v680->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                  v680->__shared_weak_owners_ = 0;
                  v680[1].__vftable = v679;
                  *(_QWORD *)object = v679;
                  *(_QWORD *)&object[8] = v679;
                  *(_QWORD *)&object[16] = v680;
                  do
                    v683 = __ldxr(v682);
                  while (__stxr(v683 + 1, v682));
                  memset(&object[24], 0, 24);
                  k = v765;
                  do
                    v684 = __ldaxr(v682);
                  while (__stlxr(v684 - 1, v682));
                  if (!v684)
                  {
                    ((void (*)(std::__shared_weak_count *))v680->__on_zero_shared)(v680);
                    std::__shared_weak_count::__release_weak(v681);
                  }
                  v685 = *(_QWORD *)object;
                  v686 = _os_log_pack_fill();
                  v687 = *(float *)&v765[4].f64[1];
                  *(_DWORD *)v686 = 134217984;
                  *(double *)(v686 + 4) = v687;
                  v688 = (char *)operator new();
                  v689 = *(unsigned __int8 *)(v779 + 39);
                  v690 = *(_QWORD *)(v779 + 16);
                  v691 = *(_QWORD *)(v779 + 24);
                  v692 = *(_OWORD *)&object[24];
                  *(_OWORD *)(v688 + 8) = *(_OWORD *)&object[8];
                  if ((v689 & 0x80u) != 0)
                    v689 = v691;
                  else
                    v690 = v773;
                  *(_QWORD *)v688 = v685;
                  *(_QWORD *)&object[8] = 0;
                  *(_QWORD *)&object[16] = 0;
                  *(_OWORD *)(v688 + 24) = v692;
                  *(_QWORD *)&object[24] = 0;
                  *(_QWORD *)&object[32] = 0;
                  *((_QWORD *)v688 + 5) = v690;
                  *((_QWORD *)v688 + 6) = v689;
                  v688[56] = 1;
                  v808 = 0;
                  v803[0] = v688;
                  (*(void (**)(_QWORD, void **))(**(_QWORD **)(v464 + 24) + 40))(*(_QWORD *)(v464 + 24), v803);
                  v693 = v803[0];
                  v803[0] = 0;
                  if (v693)
                  {
                    v694 = (std::__shared_weak_count *)*((_QWORD *)v693 + 4);
                    if (v694)
                    {
                      v695 = (unint64_t *)&v694->__shared_owners_;
                      do
                        v696 = __ldaxr(v695);
                      while (__stlxr(v696 - 1, v695));
                      if (!v696)
                      {
                        ((void (*)(std::__shared_weak_count *))v694->__on_zero_shared)(v694);
                        std::__shared_weak_count::__release_weak(v694);
                      }
                    }
                    v697 = (std::__shared_weak_count *)*((_QWORD *)v693 + 2);
                    if (v697)
                    {
                      v698 = (unint64_t *)&v697->__shared_owners_;
                      do
                        v699 = __ldaxr(v698);
                      while (__stlxr(v699 - 1, v698));
                      if (!v699)
                      {
                        ((void (*)(std::__shared_weak_count *))v697->__on_zero_shared)(v697);
                        std::__shared_weak_count::__release_weak(v697);
                      }
                    }
                    MEMORY[0x212BC6398](v693, 0x10F0C40B62ED6C6);
                    v700 = v808;
                    v808 = 0;
                    if (v700)
                    {
                      v701 = (std::__shared_weak_count *)v700[4];
                      if (v701)
                      {
                        v702 = (unint64_t *)&v701->__shared_owners_;
                        do
                          v703 = __ldaxr(v702);
                        while (__stlxr(v703 - 1, v702));
                        if (!v703)
                        {
                          ((void (*)(std::__shared_weak_count *))v701->__on_zero_shared)(v701);
                          std::__shared_weak_count::__release_weak(v701);
                        }
                      }
                      v704 = (std::__shared_weak_count *)v700[2];
                      if (v704)
                      {
                        v705 = (unint64_t *)&v704->__shared_owners_;
                        do
                          v706 = __ldaxr(v705);
                        while (__stlxr(v706 - 1, v705));
                        if (!v706)
                        {
                          ((void (*)(std::__shared_weak_count *))v704->__on_zero_shared)(v704);
                          std::__shared_weak_count::__release_weak(v704);
                        }
                      }
                      MEMORY[0x212BC6398](v700, 0x10F0C40B62ED6C6);
                    }
                  }
                  v707 = *(std::__shared_weak_count **)&object[32];
                  v708 = __se;
                  if (*(_QWORD *)&object[32])
                  {
                    v709 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                    do
                      v710 = __ldaxr(v709);
                    while (__stlxr(v710 - 1, v709));
                    if (!v710)
                    {
                      ((void (*)(std::__shared_weak_count *))v707->__on_zero_shared)(v707);
                      std::__shared_weak_count::__release_weak(v707);
                    }
                  }
                  v711 = *(std::__shared_weak_count **)&object[16];
                  if (*(_QWORD *)&object[16])
                  {
                    v712 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                    do
                      v713 = __ldaxr(v712);
                    while (__stlxr(v713 - 1, v712));
                    if (!v713)
                    {
                      ((void (*)(std::__shared_weak_count *))v711->__on_zero_shared)(v711);
                      std::__shared_weak_count::__release_weak(v711);
                    }
                  }
                }
                else
                {
                  os_log_type_enabled(v677, OS_LOG_TYPE_INFO);
                  v714 = *(float *)&v765[4].f64[1];
                  *(_DWORD *)object = 134217984;
                  *(double *)&object[4] = v714;
                  v715 = (void *)_os_log_send_and_compose_impl();
                  v708 = __se;
                  if (v715)
                    free(v715);
                }
                if (v708)
                {
                  sub_20E8C003C((uint64_t)v833, "Estimated angles update exceed angle bound (%f deg)", *(float *)&k[4].f64[1]);
                  sub_20E863570((uint64_t)v833);
                }
                sub_20E863570((uint64_t)v833);
                v716 = v837;
                if (v837)
                {
                  v717 = (unint64_t *)&v837->__shared_owners_;
                  do
                    v718 = __ldaxr(v717);
                  while (__stlxr(v718 - 1, v717));
                  if (!v718)
                  {
                    ((void (*)(std::__shared_weak_count *))v716->__on_zero_shared)(v716);
                    std::__shared_weak_count::__release_weak(v716);
                  }
                }
                goto LABEL_504;
              }
            }
            memmove(v669, v667, v668);
            goto LABEL_1068;
          }
        }
        else
        {
LABEL_441:
          if (!a33)
            goto LABEL_443;
        }
        *(_BYTE *)v753 = v789;
        goto LABEL_443;
      }
      break;
    }
    sub_20F24E118(v803);
    a1 = (float64x2_t *)v803[0];
    if (**((int **)v803[0] + 7) > 3)
      goto LABEL_348;
    v215 = *((unsigned __int8 *)v803[0] + 72);
    a1 = (float64x2_t *)sub_20E8C31DC((uint64_t)v803[0], "OSLogSurrogateAppender", 1, 0);
    v216 = a1;
    if (!v215 && !a1)
      goto LABEL_348;
    __s = v215;
    __p[0] = v803;
    __p[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
    v791[0] = (void *)std::chrono::system_clock::now().__d_.__rep_;
    LODWORD(v791[1]) = 3;
    *(_QWORD *)&v792 = "unknown file";
    DWORD2(v792) = 286;
    v793[0] = "unknown function";
    v793[1] = 0;
    *(_QWORD *)&v794 = 0;
    v217 = *(_QWORD *)__p[0];
    v768 = *(_QWORD *)__p[0];
    if (*(char *)(*(_QWORD *)__p[0] + 39) < 0)
    {
      v219 = *(const char **)(v217 + 16);
      v218 = *(_QWORD *)(v217 + 24);
      v774 = *(_QWORD *)__p[0] + 16;
      v762 = v200;
      v552 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v552 & 1) == 0)
      {
LABEL_1150:
        if (__cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)v833);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v833);
          if (v833[24] && (v833[23] & 0x80000000) != 0)
            operator delete(*(void **)v833);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
          k = v765;
        }
      }
    }
    else
    {
      v218 = *(unsigned __int8 *)(*(_QWORD *)__p[0] + 39);
      v219 = (const char *)(*(_QWORD *)__p[0] + 16);
      v774 = (uint64_t)v219;
      v762 = v200;
      v220 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v220 & 1) == 0)
        goto LABEL_1150;
    }
    if (byte_254A4A4F8[23] >= 0)
      v553 = byte_254A4A4F8;
    else
      v553 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v554 = byte_254A4A4F8[23];
    else
      v554 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)object = os_log_create(v553, v219);
    if (v554 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v554 >= 0x17)
    {
      v556 = (v554 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v554 | 7) != 0x17)
        v556 = v554 | 7;
      v557 = v556 + 1;
      v555 = operator new(v556 + 1);
      *(_QWORD *)&object[24] = v557 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v555;
      *(_QWORD *)&object[16] = v554;
      k = v765;
    }
    else
    {
      object[31] = v554;
      v555 = &object[8];
      if (!v554)
      {
LABEL_880:
        v555[v554] = 0;
        object[32] = 1;
        if (v218 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v218 >= 0x17)
        {
          v560 = (v218 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v218 | 7) != 0x17)
            v560 = v218 | 7;
          v561 = v560 + 1;
          v558 = operator new(v560 + 1);
          *(_QWORD *)&object[56] = v561 | 0x8000000000000000;
          *(_QWORD *)&object[40] = v558;
          *(_QWORD *)&object[48] = v218;
          v190 = v766;
        }
        else
        {
          object[63] = v218;
          v558 = &object[40];
          v190 = v766;
          if (!v218)
          {
            object[40] = 0;
            LOBYTE(v827[0]) = 1;
            v559 = *(NSObject **)object;
            if ((object[63] & 0x80000000) == 0)
              goto LABEL_884;
LABEL_890:
            operator delete(*(void **)&object[40]);
            if (object[32])
              goto LABEL_891;
            goto LABEL_893;
          }
        }
        memmove(v558, v219, v218);
        v558[v218] = 0;
        LOBYTE(v827[0]) = 1;
        v559 = *(NSObject **)object;
        if ((object[63] & 0x80000000) != 0)
          goto LABEL_890;
LABEL_884:
        if (object[32])
        {
LABEL_891:
          if ((object[31] & 0x80000000) != 0)
            operator delete(*(void **)&object[8]);
        }
LABEL_893:
        if (*(_QWORD *)object)
          os_release(*(void **)object);
        if (v216 && *(_QWORD *)&v216[1].f64[1])
        {
          v562 = _os_log_pack_size();
          v563 = (std::__shared_weak_count_vtbl *)operator new(v562, (std::align_val_t)8uLL);
          v564 = (std::__shared_weak_count *)operator new();
          v565 = v564;
          v564->__shared_owners_ = 0;
          v566 = (unint64_t *)&v564->__shared_owners_;
          v564->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v564->__shared_weak_owners_ = 0;
          v564[1].__vftable = v563;
          *(_QWORD *)object = v563;
          *(_QWORD *)&object[8] = v563;
          *(_QWORD *)&object[16] = v564;
          do
            v567 = __ldxr(v566);
          while (__stxr(v567 + 1, v566));
          memset(&object[24], 0, 24);
          do
            v568 = __ldaxr(v566);
          while (__stlxr(v568 - 1, v566));
          if (!v568)
          {
            ((void (*)(std::__shared_weak_count *))v564->__on_zero_shared)(v564);
            std::__shared_weak_count::__release_weak(v565);
          }
          v569 = *(_QWORD *)object;
          *(_WORD *)_os_log_pack_fill() = 0;
          v570 = operator new();
          v571 = *(unsigned __int8 *)(v768 + 39);
          v572 = *(_QWORD *)(v768 + 16);
          v573 = *(_QWORD *)(v768 + 24);
          v574 = *(_OWORD *)&object[24];
          *(_OWORD *)(v570 + 8) = *(_OWORD *)&object[8];
          if ((v571 & 0x80u) != 0)
            v571 = v573;
          else
            v572 = v774;
          *(_QWORD *)v570 = v569;
          *(_QWORD *)&object[8] = 0;
          *(_QWORD *)&object[16] = 0;
          *(_OWORD *)(v570 + 24) = v574;
          *(_QWORD *)&object[24] = 0;
          *(_QWORD *)&object[32] = 0;
          *(_QWORD *)(v570 + 40) = v572;
          *(_QWORD *)(v570 + 48) = v571;
          *(_BYTE *)(v570 + 56) = 1;
          *(_QWORD *)&v819 = 0;
          *(_QWORD *)v833 = v570;
          (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)&v216[1].f64[1] + 40))(*(_QWORD *)&v216[1].f64[1], v833);
          v575 = *(_QWORD *)v833;
          *(_QWORD *)v833 = 0;
          if (v575)
          {
            v576 = *(std::__shared_weak_count **)(v575 + 32);
            if (v576)
            {
              v577 = (unint64_t *)&v576->__shared_owners_;
              do
                v578 = __ldaxr(v577);
              while (__stlxr(v578 - 1, v577));
              if (!v578)
              {
                ((void (*)(std::__shared_weak_count *))v576->__on_zero_shared)(v576);
                std::__shared_weak_count::__release_weak(v576);
              }
            }
            v579 = *(std::__shared_weak_count **)(v575 + 16);
            if (v579)
            {
              v580 = (unint64_t *)&v579->__shared_owners_;
              do
                v581 = __ldaxr(v580);
              while (__stlxr(v581 - 1, v580));
              if (!v581)
              {
                ((void (*)(std::__shared_weak_count *))v579->__on_zero_shared)(v579);
                std::__shared_weak_count::__release_weak(v579);
              }
            }
            MEMORY[0x212BC6398](v575, 0x10F0C40B62ED6C6);
            v582 = v819;
            *(_QWORD *)&v819 = 0;
            if (v582)
            {
              v583 = *(std::__shared_weak_count **)(v582 + 32);
              if (v583)
              {
                v584 = (unint64_t *)&v583->__shared_owners_;
                do
                  v585 = __ldaxr(v584);
                while (__stlxr(v585 - 1, v584));
                if (!v585)
                {
                  ((void (*)(std::__shared_weak_count *))v583->__on_zero_shared)(v583);
                  std::__shared_weak_count::__release_weak(v583);
                }
              }
              v586 = *(std::__shared_weak_count **)(v582 + 16);
              if (v586)
              {
                v587 = (unint64_t *)&v586->__shared_owners_;
                do
                  v588 = __ldaxr(v587);
                while (__stlxr(v588 - 1, v587));
                if (!v588)
                {
                  ((void (*)(std::__shared_weak_count *))v586->__on_zero_shared)(v586);
                  std::__shared_weak_count::__release_weak(v586);
                }
              }
              MEMORY[0x212BC6398](v582, 0x10F0C40B62ED6C6);
            }
          }
          v589 = *(std::__shared_weak_count **)&object[32];
          LODWORD(v200) = v762;
          if (*(_QWORD *)&object[32])
          {
            v590 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
            do
              v591 = __ldaxr(v590);
            while (__stlxr(v591 - 1, v590));
            if (!v591)
            {
              ((void (*)(std::__shared_weak_count *))v589->__on_zero_shared)(v589);
              std::__shared_weak_count::__release_weak(v589);
            }
          }
          v592 = *(std::__shared_weak_count **)&object[16];
          if (*(_QWORD *)&object[16])
          {
            v593 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
            do
              v594 = __ldaxr(v593);
            while (__stlxr(v594 - 1, v593));
            if (!v594)
            {
              ((void (*)(std::__shared_weak_count *))v592->__on_zero_shared)(v592);
              std::__shared_weak_count::__release_weak(v592);
            }
          }
        }
        else
        {
          os_log_type_enabled(v559, OS_LOG_TYPE_INFO);
          *(_WORD *)object = 0;
          v595 = (void *)_os_log_send_and_compose_impl();
          LODWORD(v200) = v762;
          if (v595)
            free(v595);
        }
        if (__s)
        {
          sub_20E8C003C((uint64_t)__p, "Keyframes do not contain enough tracks with structure covariance.");
          sub_20E863570((uint64_t)__p);
        }
        sub_20E863570((uint64_t)__p);
        v596 = (std::__shared_weak_count *)v794;
        if ((_QWORD)v794)
        {
          v597 = (unint64_t *)(v794 + 8);
          do
            v598 = __ldaxr(v597);
          while (__stlxr(v598 - 1, v597));
          if (!v598)
          {
            ((void (*)(std::__shared_weak_count *))v596->__on_zero_shared)(v596);
            std::__shared_weak_count::__release_weak(v596);
          }
        }
        goto LABEL_348;
      }
    }
    memmove(v555, v553, v554);
    goto LABEL_880;
  }
  v180 = (_QWORD *)a30[6];
  v181 = 0xAAAAAAAAAAAAAAABLL * ((char **)v180 - v174);
  if (v181 >= v173)
  {
    if (v170 == (char **)v169)
    {
      v185 = (_QWORD *)a30[5];
      v167 = a30;
      if (v180 == v185)
        goto LABEL_1189;
    }
    else
    {
      v185 = (_QWORD *)a30[5];
      do
      {
        if (v170 != v174)
          a1 = (float64x2_t *)sub_20F27AE20(v174, *v170, v170[1], 0xAAAAAAAAAAAAAAABLL * ((v170[1] - *v170) >> 3));
        v170 += 3;
        v174 += 3;
        v185 += 3;
      }
      while (v170 != (char **)v169);
      v167 = a30;
      v180 = (_QWORD *)a30[6];
      if (v180 == v185)
      {
LABEL_1189:
        v167[6] = v185;
        v753 = a32;
        v190 = (const void **)*a3;
        v756 = (const void **)a3[1];
        if ((const void **)*a3 != v756)
          goto LABEL_337;
        goto LABEL_332;
      }
    }
    v725 = v180;
    do
    {
      v726 = (float64x2_t *)*(v725 - 3);
      v725 -= 3;
      a1 = v726;
      if (v726)
      {
        *(v180 - 2) = a1;
        operator delete(a1);
      }
      v180 = v725;
    }
    while (v725 != v185);
    goto LABEL_1189;
  }
  if (v180 != v174)
  {
    v182 = a3;
    v183 = 8 * ((char **)v180 - v174);
    v184 = (char **)*a3;
    do
    {
      if (v184 != v174)
        sub_20F27AE20(v174, *v184, v184[1], 0xAAAAAAAAAAAAAAABLL * ((v184[1] - *v184) >> 3));
      v184 += 3;
      v174 += 3;
      v183 -= 24;
    }
    while (v183);
    v174 = (char **)a30[6];
    k = v765;
    a3 = v182;
  }
  a1 = (float64x2_t *)sub_20EE6CE10(v172, (uint64_t)&v170[3 * v181], v169, v174);
  v167 = a30;
  a30[6] = a1;
LABEL_336:
  v753 = a32;
  v190 = (const void **)*a3;
  v756 = (const void **)a3[1];
  if ((const void **)*a3 != v756)
    goto LABEL_337;
LABEL_332:
  if (a33)
  {
    v191 = 5;
LABEL_1169:
    *(_BYTE *)(v753 + 17) = v191;
  }
LABEL_1170:
  if (a14)
    v719 = 2;
  else
    v719 = 3;
  v720 = v798[0];
  if (v798[0])
  {
    do
    {
LABEL_1180:
      v723 = (_QWORD *)*v720;
      v724 = (void *)v720[5];
      if (v724)
      {
        v720[6] = v724;
        operator delete(v724);
      }
      operator delete(v720);
      v720 = v723;
    }
    while (v723);
  }
LABEL_1176:
  v721 = v797[0];
  v797[0] = 0;
  if (v721)
    operator delete(v721);
  return v719;
}

